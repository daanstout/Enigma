
Keyboard.elf:     file format elf32-littlenios2
Keyboard.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00019e20 memsz 0x00019e20 flags r-x
    LOAD off    0x0001ae40 vaddr 0x00019e40 paddr 0x0001c00c align 2**12
         filesz 0x000021cc memsz 0x000021cc flags rw-
    LOAD off    0x0001d1d8 vaddr 0x0001e1d8 paddr 0x0001e1d8 align 2**12
         filesz 0x00000000 memsz 0x00007424 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000193cc  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000830  00019610  00019610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000021cc  00019e40  0001c00c  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007424  0001e1d8  0001e1d8  0001d1d8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000255fc  000255fc  0001d00c  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001d00c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d00c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010c8  00000000  00000000  0001d030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f2cb  00000000  00000000  0001e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b157  00000000  00000000  0004d3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e5e7  00000000  00000000  0005851a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003a88  00000000  00000000  00066b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005463  00000000  00000000  0006a58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ee1  00000000  00000000  0006f9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000868d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017e8  00000000  00000000  000868f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008d9ef  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008d9f5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008d9fa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008d9fb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008d9fc  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008da00  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008da04  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008da08  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008da11  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008da1a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008da23  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0008da2e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0008da8c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  00098651  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00019610 l    d  .rodata	00000000 .rodata
00019e40 l    d  .rwdata	00000000 .rwdata
0001e1d8 l    d  .bss	00000000 .bss
000255fc l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/daans/Documents/Eclipse_Projecten_Nios/Keyboard_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019692 l     O .rodata	00000010 zeroes.4255
0000277c l     F .text	000000bc __sbprintf
000196a2 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000298c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004548 l     F .text	00000008 __fp_lock
00004550 l     F .text	00000008 __fp_unlock
00004564 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00019e40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001a284 l     O .rwdata	00000020 lc_ctype_charset
0001a264 l     O .rwdata	00000020 lc_message_charset
0001a2a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000196d4 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00006dac l     F .text	000000fc __sprint_r.part.0
00019808 l     O .rodata	00000010 blanks.4199
000197f8 l     O .rodata	00000010 zeroes.4200
000081b4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a23c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c968 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ca88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cab4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cbb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cca8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000cd8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000cf84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001bf80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d1e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001bf84 l     O .rwdata	00000004 lockid
0001e214 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001bf88 l     O .rwdata	00000004 lockid
0001e21c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000ec14 l     F .text	00000044 OS_InitMisc
0000ec58 l     F .text	00000068 OS_InitRdyList
0000edb8 l     F .text	000000e0 OS_InitTCBList
0000eb38 l     F .text	000000dc OS_InitEventList
0000ecc0 l     F .text	0000007c OS_InitTaskIdle
0000ed3c l     F .text	0000007c OS_InitTaskStat
0000f018 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00010e1c l     F .text	00000110 OS_FlagTaskRdy
00010b74 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000152c4 l     F .text	00000038 alt_dev_reg
0001a88c l     O .rwdata	0000106c JTAG_UART
0001b8f8 l     O .rwdata	00000030 AV_Config
0001b928 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001b958 l     O .rwdata	0000002c Char_LCD_16x2
0001b984 l     O .rwdata	0000002c IrDA
0001b9b0 l     O .rwdata	0000002c Expansion_JP5
0001b9dc l     O .rwdata	0000002c Green_LEDs
0001ba08 l     O .rwdata	0000002c HEX3_HEX0
0001ba34 l     O .rwdata	0000002c HEX7_HEX4
0001ba60 l     O .rwdata	0000002c Pushbuttons
0001ba8c l     O .rwdata	0000002c Red_LEDs
0001bab8 l     O .rwdata	0000002c Slider_Switches
0001bae4 l     O .rwdata	00000038 PS2_Port
0001bb1c l     O .rwdata	00000038 PS2_Port_Dual
0001bb54 l     O .rwdata	0000002c Serial_Port
0001bb80 l     O .rwdata	00000034 USB
0001bbb4 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001bbfc l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001bc50 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000159ac l     F .text	000002a8 altera_avalon_jtag_uart_irq
00015c54 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001642c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
0001e274 l     O .bss	00000004 state.1996
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000181e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018450 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018738 l     F .text	00000050 alt_get_errno
00018788 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001e284 g     O .bss	00000004 alt_instruction_exception_handler
00006a30 g     F .text	00000074 _mprec_log10
0001bfd6 g     O .rwdata	00000002 OSTaskNameSize
00006b1c g     F .text	0000008c __any_on
00008be0 g     F .text	00000054 _isatty_r
000196e0 g     O .rodata	00000028 __mprec_tinytens
0000ceb0 g     F .text	000000d4 alt_main
0001929c g     F .text	00000090 strcpy
000254fc g     O .bss	00000100 alt_irq
00016fc8 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00008c34 g     F .text	0000005c _lseek_r
00011680 g     F .text	000000d0 OS_MemInit
0001c00c g       *ABS*	00000000 __flash_rwdata_start
00015260 g     F .text	00000064 OSTimeSet
00016598 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000b4d0 g     F .text	00000084 .hidden __eqdf2
0000d890 g     F .text	00000610 OSEventPendMulti
00000500 g     F .text	00000044 print
000255fc g       *ABS*	00000000 __alt_heap_start
00018d94 g     F .text	00000020 OSTaskCreateHook
0001e2b0 g     O .bss	00002000 task1_stk
00000690 g     F .text	0000003c printf
0001bfae g     O .rwdata	00000002 OSMboxEn
0000def4 g     F .text	0000007c OSIntEnter
00009504 g     F .text	0000009c _wcrtomb_r
00006d48 g     F .text	0000005c __sseek
00004898 g     F .text	00000010 __sinit
00017950 g     F .text	00000100 alt_up_char_buffer_string
000093b0 g     F .text	00000138 __swbuf_r
00016de8 g     F .text	00000034 read_CE_bit
0001bfbe g     O .rwdata	00000002 OSQEn
00004e84 g     F .text	0000007c _setlocale_r
00004700 g     F .text	00000068 __sfmoreglue
0000d564 g     F .text	000000d0 __malloc_unlock
00018df0 g     F .text	0000001c OSTaskStatHook
0001716c g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00017660 g     F .text	00000090 alt_up_rs232_read_fd
0001e224 g     O .bss	00000001 OSLockNesting
0001bffc g     O .rwdata	00000002 OSDataSize
0001e225 g     O .bss	00000001 OSRunning
00017884 g     F .text	000000cc alt_up_char_buffer_draw
00008c90 g     F .text	0000015c memmove
00018e28 g     F .text	0000001c OSInitHookBegin
0001bc7c g     O .rwdata	00000198 key_table
0001e1d8 g     O .bss	00000004 byte1
0001bff4 g     O .rwdata	00000002 OSTmrSize
00004880 g     F .text	00000018 _cleanup
00005c08 g     F .text	000000a8 _Balloc
0001e228 g     O .bss	00000004 OSIdleCtr
0000b554 g     F .text	000000e0 .hidden __gtdf2
00018b48 g     F .text	00000020 altera_nios2_gen2_irq_init
00018c14 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00016524 g     F .text	00000074 get_DDRAM_addr
0000f350 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001bffa g     O .rwdata	00000002 OSTmrWheelTblSize
00017aac g     F .text	00000070 get_multi_byte_make_code_index
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001bf9a g     O .rwdata	00000002 OSEventSize
0001e22c g     O .bss	00000001 OSPrioHighRdy
000086c8 g     F .text	00000058 _fstat_r
00018db4 g     F .text	00000020 OSTaskDelHook
0001e200 g     O .bss	00000004 errno
00006cc4 g     F .text	00000008 __seofread
00018bf4 g       .text	00000000 OSStartHighRdy
00013b64 g     F .text	000001ec OSTaskCreateExt
000106c0 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001bfda g     O .rwdata	00000002 OSTaskStatStkSize
0000f7b0 g     F .text	00000308 OSFlagAccept
00011d54 g     F .text	000000b8 OSQFlush
00017e94 g     F .text	00000064 set_keyboard_rate
00011750 g     F .text	00000140 OSQAccept
0001e20c g     O .bss	00000004 alt_argv
00023f48 g       *ABS*	00000000 _gp
000139a8 g     F .text	000001bc OSTaskCreate
00013468 g     F .text	00000540 OSTaskChangePrio
0001e220 g     O .bss	00000004 alt_heapsem
0001e1dc g     O .bss	00000004 PS2_data
0000f624 g     F .text	0000018c OSDebugInit
00013d50 g     F .text	000003e0 OSTaskDel
0001800c g     F .text	0000007c reset_keyboard
0001a70c g     O .rwdata	00000180 alt_fd_list
000222d8 g     O .bss	00000370 OSFlagTbl
0000e924 g     F .text	000000b4 OS_EventTaskRemove
00018390 g     F .text	00000090 alt_find_dev
000059ac g     F .text	00000138 memcpy
0001bfc4 g     O .rwdata	00000002 OSRdyTblSize
00016734 g     F .text	00000050 alt_up_character_lcd_write_fd
00017a50 g     F .text	0000005c alt_up_char_buffer_clear
00004558 g     F .text	0000000c _cleanup_r
0000c790 g     F .text	000000d0 .hidden __floatsidf
00018510 g     F .text	00000078 alt_io_redirect
0000b634 g     F .text	000000e0 .hidden __ltdf2
00019610 g       *ABS*	00000000 __DTOR_END__
00016cb4 g     F .text	00000090 alt_up_irda_write_fd
000175ec g     F .text	00000074 alt_up_rs232_read_data
00019138 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000d634 g     F .text	00000120 OSEventNameGet
0001bfa8 g     O .rwdata	00000002 OSFlagMax
00006ba8 g     F .text	00000074 __fpclassifyd
0000698c g     F .text	000000a4 __ratio
0000df70 g     F .text	000000f4 OSIntExit
00008190 g     F .text	00000024 __vfiprintf_internal
0001bfe2 g     O .rwdata	00000002 OSTCBSize
0001e22d g     O .bss	00000001 OSPrioCur
00016ab0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00015eb8 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000664 g     F .text	0000002c _printf_r
0000a358 g     F .text	00000008 .hidden __udivsi3
0000cc04 g     F .text	000000a4 isatty
0001bfc8 g     O .rwdata	00000002 OSStkWidth
00019730 g     O .rodata	000000c8 __mprec_tens
0001bfbc g     O .rwdata	00000002 OSPtrSize
00004f00 g     F .text	0000000c __locale_charset
0001bf9c g     O .rwdata	00000002 OSEventTblSize
00016a54 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00018b68 g       .text	00000000 OSCtxSw
000190ac g     F .text	0000008c alt_icache_flush
0001e1fc g     O .bss	00000004 __malloc_top_pad
0001e230 g     O .bss	00000004 OSTCBList
0001e204 g     O .bss	00000004 alt_fd_list_lock
0001bf58 g     O .rwdata	00000004 __mb_cur_max
00004f30 g     F .text	0000000c _localeconv_r
00008720 g     F .text	000004c0 __sfvwrite_r
00006014 g     F .text	0000003c __i2b
00022648 g     O .bss	00000c30 OSMemTbl
0001e234 g     O .bss	00000001 OSTickStepState
00006c1c g     F .text	00000054 _sbrk_r
0001bfc0 g     O .rwdata	00000002 OSQMax
00023278 g     O .bss	00000800 OSTaskStatStk
000112b0 g     F .text	000000f8 OSMemNameGet
0001bfa0 g     O .rwdata	00000002 OSFlagEn
00008dec g     F .text	0000005c _read_r
0001bfe6 g     O .rwdata	00000002 OSTimeTickHookEn
00012274 g     F .text	00000168 OSQPost
00010f2c g     F .text	000000a0 OS_FlagUnlink
0001bf78 g     O .rwdata	00000004 alt_max_fd
00017568 g     F .text	00000044 alt_up_rs232_check_parity
0000eee8 g     F .text	00000064 OS_MemCopy
0000ef4c g     F .text	000000cc OS_Sched
000083e4 g     F .text	000000f0 _fclose_r
000111c0 g     F .text	000000f0 OSMemGet
00014430 g     F .text	000001c0 OSTaskNameSet
00016e1c g     F .text	00000030 read_num_bytes_available
00004518 g     F .text	00000030 fflush
0001be14 g     O .rwdata	00000066 ascii_codes
0001e1f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0001e238 g     O .bss	00000004 OSCtxSwCtr
00018e0c g     F .text	0000001c OSTimeTickHook
00018588 g     F .text	000001b0 alt_irq_register
0001bfaa g     O .rwdata	00000002 OSFlagNameSize
00016d84 g     F .text	00000034 read_RI_bit
0000e9d8 g     F .text	000000fc OS_EventTaskRemoveMulti
0000a368 g     F .text	0000089c .hidden __adddf3
0000e7d8 g     F .text	0000014c OS_EventTaskWaitMulti
00006734 g     F .text	0000011c __b2d
0001bfc2 g     O .rwdata	00000002 OSQSize
00009cac g     F .text	00000590 .hidden __umoddi3
0000cddc g     F .text	000000d4 lseek
00012d78 g     F .text	00000268 OSSemPend
0001bf50 g     O .rwdata	00000004 _global_impure_ptr
00008e48 g     F .text	00000568 _realloc_r
0001bfac g     O .rwdata	00000002 OSLowestPrio
000255fc g       *ABS*	00000000 __bss_end
00018e7c g     F .text	00000020 OSTCBInitHook
0001e1e0 g     O .bss	00000001 letter
0001bff2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018a44 g     F .text	00000104 alt_tick
000096ec g     F .text	000005c0 .hidden __udivdi3
000084e8 g     F .text	00000184 _fputwc_r
0001bf94 g     O .rwdata	00000002 OSEventEn
00019708 g     O .rodata	00000028 __mprec_bigtens
00005df8 g     F .text	00000104 __s2b
0001bfee g     O .rwdata	00000002 OSTmrCfgNameSize
0000c860 g     F .text	000000a4 .hidden __floatunsidf
000064dc g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00016e80 g     F .text	0000002c read_data_byte
000048b8 g     F .text	00000018 __fp_lock_all
00010d38 g     F .text	000000e4 OS_FlagInit
000189ac g     F .text	00000098 alt_alarm_stop
00016db8 g     F .text	00000030 read_RE_bit
0001bfd0 g     O .rwdata	00000002 OSTaskIdleStkSize
0001e278 g     O .bss	00000004 alt_irq_active
00012960 g     F .text	000000b0 OSSemAccept
0000043c g     F .text	0000007c VGA_text
000114c0 g     F .text	000000d8 OSMemPut
00010fcc g     F .text	000001f4 OSMemCreate
0001e23c g     O .bss	00000004 OSIdleCtrMax
00016af0 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001a6e4 g     O .rwdata	00000028 alt_dev_null
0001bfe4 g     O .rwdata	00000002 OSTicksPerSec
0001bf4c g     O .rwdata	00000004 character_buffer
000169c8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00018b68 g       .text	00000000 OSIntCtxSw
00017024 g     F .text	00000074 alt_up_ps2_write_data_byte
000181c8 g     F .text	0000001c alt_dcache_flush_all
00005efc g     F .text	00000068 __hi0bits
0000c708 g     F .text	00000088 .hidden __fixdfsi
0001e240 g     O .bss	00000004 OSTCBFreeList
0001c00c g       *ABS*	00000000 __ram_rwdata_end
00012fe0 g     F .text	0000016c OSSemPendAbort
0001bee0 g     O .rwdata	00000066 multi_byte_make_code
0001bf70 g     O .rwdata	00000008 alt_dev_list
0000d230 g     F .text	000000f8 write
0001bfe8 g     O .rwdata	00000002 OSVersionNbr
00019e40 g       *ABS*	00000000 __ram_rodata_end
0000cb04 g     F .text	000000b0 fstat
000176f0 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b634 g     F .text	000000e0 .hidden __ledf2
0001bf90 g     O .rwdata	00000004 OSEndiannessTest
0000624c g     F .text	00000140 __pow5mult
00006ec0 g     F .text	000012d0 ___vfiprintf_internal_r
0001e1f0 g     O .bss	00000004 __nlocale_changed
0000a360 g     F .text	00000008 .hidden __umodsi3
0001bfa2 g     O .rwdata	00000002 OSFlagGrpSize
000255fc g       *ABS*	00000000 end
00017360 g     F .text	00000098 alt_up_ps2_write_fd
00016b2c g     F .text	00000044 alt_up_irda_check_parity
000177c4 g     F .text	00000080 alt_up_char_buffer_init
0001586c g     F .text	00000140 altera_avalon_jtag_uart_init
0000f1ac g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00019610 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000164a4 g     F .text	00000080 alt_avalon_timer_sc_init
0000c904 g     F .text	00000064 .hidden __clzsi2
0001616c g     F .text	000002c0 altera_avalon_jtag_uart_write
000048a8 g     F .text	00000004 __sfp_lock_acquire
000058c4 g     F .text	000000e8 memchr
0000ee98 g     F .text	00000050 OS_MemClr
00016648 g     F .text	00000078 alt_up_character_lcd_write
00000808 g     F .text	00001f50 ___vfprintf_internal_r
00018c38 g     F .text	0000015c OSTaskStkInit
00000280 g     F .text	00000084 task1
00004a0c g     F .text	000002f0 _free_r
00004f0c g     F .text	00000010 __locale_mb_cur_max
0000e534 g     F .text	00000198 OS_EventTaskRdy
00019440 g     F .text	00000194 __call_exitprocs
0001e244 g     O .bss	00000001 OSCPUUsage
00017ef8 g     F .text	00000114 translate_make_code
0001e1ec g     O .bss	00000004 __mlocale_changed
0001bf5c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001e27c g     O .bss	00000004 _alt_tick_rate
00011e0c g     F .text	000002fc OSQPend
00014d5c g     F .text	00000148 OSTimeDly
0000638c g     F .text	00000150 __lshift
0001e280 g     O .bss	00000004 _alt_nticks
0000cfd4 g     F .text	000000fc read
00015330 g     F .text	000003d8 alt_sys_init
00016880 g     F .text	00000088 alt_up_character_lcd_shift_display
0001932c g     F .text	00000114 __register_exitproc
0001e245 g     O .bss	00000001 OSTaskCtr
00017280 g     F .text	00000054 alt_up_ps2_clear_fifo
0001752c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000388 g     F .text	000000b4 VGA_box
00014ea4 g     F .text	00000168 OSTimeDlyHMSM
00006050 g     F .text	000001fc __multiply
00016908 g     F .text	0000008c alt_up_character_lcd_erase_pos
00015d64 g     F .text	00000068 altera_avalon_jtag_uart_close
00019e40 g       *ABS*	00000000 __ram_rwdata_start
00019610 g       *ABS*	00000000 __ram_rodata_start
0001e288 g     O .bss	00000028 __malloc_current_mallinfo
0001bf96 g     O .rwdata	00000002 OSEventMax
00006850 g     F .text	0000013c __d2b
0001314c g     F .text	00000110 OSSemPost
0000e0ec g     F .text	000000d8 OSSchedUnlock
00015708 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00018fb0 g     F .text	000000fc alt_get_fd
0001e248 g     O .bss	00000004 OSMemFreeList
0000e230 g     F .text	000000ac OSStatInit
00010ab0 g     F .text	000000c4 OSFlagQuery
0001bfcc g     O .rwdata	00000002 OSTaskCreateExtEn
000082cc g     F .text	00000054 _close_r
00017ddc g     F .text	000000b8 decode_scancode
00019220 g     F .text	0000007c memcmp
0000e518 g     F .text	0000001c OS_Dummy
000157c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000255fc g       *ABS*	00000000 __alt_stack_base
00015818 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000169fc g     F .text	00000058 alt_up_irda_enable_read_interrupt
00002838 g     F .text	00000154 __swsetup_r
00023a78 g     O .bss	000001e0 OSQTbl
0000ac04 g     F .text	000008cc .hidden __divdf3
00004768 g     F .text	00000118 __sfp
00006aa4 g     F .text	00000078 __copybits
0001a2dc g     O .rwdata	00000408 __malloc_av_
000048b4 g     F .text	00000004 __sinit_lock_release
0001e24c g     O .bss	00000004 OSTCBHighRdy
0000b714 g     F .text	00000724 .hidden __muldf3
00006c70 g     F .text	00000054 __sread
0001e250 g     O .bss	00000004 OSQFreeList
00017490 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00018e9c g     F .text	00000114 alt_find_file
00018234 g     F .text	000000a4 alt_dev_llist_insert
0000d444 g     F .text	00000120 __malloc_lock
0000d130 g     F .text	000000b0 sbrk
0000d754 g     F .text	0000013c OSEventNameSet
000044bc g     F .text	0000005c _fflush_r
00008320 g     F .text	000000c4 _calloc_r
0001e254 g     O .bss	00000001 OSRdyGrp
000004b8 g     F .text	00000048 PS2
0001e1d8 g       *ABS*	00000000 __bss_start
00005ae4 g     F .text	00000124 memset
00000304 g     F .text	00000084 main
00017b1c g     F .text	00000070 get_single_byte_make_code_index
0001e210 g     O .bss	00000004 alt_envp
0001e1f4 g     O .bss	00000004 __malloc_max_total_mem
00017844 g     F .text	00000040 alt_up_char_buffer_open_dev
00015768 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000094e8 g     F .text	0000001c __swbuf
00019934 g     O .rodata	00000100 OSUnMapTbl
0001bfc6 g     O .rwdata	00000002 OSSemEn
000167f8 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00010728 g     F .text	00000388 OSFlagPost
00006da4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000084d4 g     F .text	00000014 fclose
0000e6cc g     F .text	0000010c OS_EventTaskWait
000202b0 g     O .bss	00002000 task2_stk
00017210 g     F .text	00000070 alt_up_ps2_read_data_byte
0000f288 g     F .text	000000c8 OS_TaskStatStkChk
00014130 g     F .text	00000158 OSTaskDelReq
00002b8c g     F .text	00001728 _dtoa_r
0000511c g     F .text	000007a8 _malloc_r
00009660 g     F .text	00000030 __ascii_wctomb
0001bf7c g     O .rwdata	00000004 alt_errno
0000e1c4 g     F .text	0000006c OSStart
0000d3e8 g     F .text	0000005c __env_unlock
00004cfc g     F .text	000000c4 _fwalk
000145f0 g     F .text	000001f8 OSTaskResume
00011598 g     F .text	000000e8 OSMemQuery
0001bfd8 g     O .rwdata	00000002 OSTaskStatEn
00016b70 g     F .text	00000040 alt_up_irda_write_data
0001bfb2 g     O .rwdata	00000002 OSMemMax
000123dc g     F .text	00000170 OSQPostFront
000173f8 g     F .text	00000040 alt_up_ps2_open_dev
0000a2a8 g     F .text	00000054 .hidden __divsi3
00000544 g     F .text	00000120 getKey
0001e255 g     O .bss	00000003 OSRdyTbl
0001bf8c g     O .rwdata	00000002 OSDebugEn
00016608 g     F .text	00000040 alt_up_character_lcd_open_dev
000048e8 g     F .text	00000124 _malloc_trim_r
00016f70 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00019610 g       *ABS*	00000000 __CTOR_END__
0001bfa4 g     O .rwdata	00000002 OSFlagNodeSize
0001bfec g     O .rwdata	00000002 OSTmrCfgMax
000165d4 g     F .text	00000034 alt_up_character_lcd_init
000006cc g     F .text	000000a4 strcmp
00011890 g     F .text	000001fc OSQCreate
00014288 g     F .text	000001a8 OSTaskNameGet
00019610 g       *ABS*	00000000 __flash_rodata_start
0001254c g     F .text	0000020c OSQPostOpt
0000e2dc g     F .text	0000021c OSTimeTick
0001bfd4 g     O .rwdata	00000002 OSTaskMax
00019610 g       *ABS*	00000000 __DTOR_LIST__
00012a10 g     F .text	00000100 OSSemCreate
0001bff8 g     O .rwdata	00000002 OSTmrWheelSize
00017784 g     F .text	00000040 alt_up_rs232_open_dev
0000b4d0 g     F .text	00000084 .hidden __nedf2
0001bfce g     O .rwdata	00000002 OSTaskDelEn
0001325c g     F .text	00000110 OSSemQuery
00011a8c g     F .text	000002c8 OSQDel
00012108 g     F .text	0000016c OSQPendAbort
000152fc g     F .text	00000034 alt_irq_init
0000d0d0 g     F .text	00000060 alt_release_fd
00016e4c g     F .text	00000034 read_data_valid
00016994 g     F .text	00000034 alt_up_character_lcd_cursor_off
00019818 g     O .rodata	00000100 .hidden __clz_tab
0001e1e8 g     O .bss	00000004 _PathLocale
0001bf48 g     O .rwdata	00000004 PS2_ptr
00017108 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000191d4 g     F .text	00000014 atexit
00008270 g     F .text	0000005c _write_r
0000e064 g     F .text	00000088 OSSchedLock
00004f3c g     F .text	0000001c setlocale
0000fab8 g     F .text	00000128 OSFlagCreate
0001bf54 g     O .rwdata	00000004 _impure_ptr
0001e208 g     O .bss	00000004 alt_argc
000042b4 g     F .text	00000208 __sflush_r
00018334 g     F .text	0000005c _do_dtors
00004f28 g     F .text	00000008 __locale_cjk_lang
0001bf9e g     O .rwdata	00000002 OSEventMultiEn
0001e1e4 g     O .bss	00000004 RAVAIL
000222b0 g     O .bss	00000028 ascii
0000fbe0 g     F .text	00000270 OSFlagDel
0001e258 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000066d4 g     F .text	00000060 __ulp
000100d0 g     F .text	000005f0 OSFlagPend
0001bfea g     O .rwdata	00000002 OSTmrEn
000048d0 g     F .text	00000018 __fp_unlock_all
0001bf68 g     O .rwdata	00000008 alt_fs_list
0000f088 g     F .text	00000074 OS_StrCopy
00017438 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
000175ac g     F .text	00000040 alt_up_rs232_write_data
0001bfb4 g     O .rwdata	00000002 OSMemNameSize
00018e44 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001bfe0 g     O .rwdata	00000002 OSTCBPrioTblMax
00004f58 g     F .text	0000000c localeconv
0001bfdc g     O .rwdata	00000002 OSTaskStatStkChkEn
0001bfb0 g     O .rwdata	00000002 OSMemEn
0001bfba g     O .rwdata	00000002 OSMutexEn
0001c00c g       *ABS*	00000000 _edata
000255fc g       *ABS*	00000000 _end
0001e25c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00015dcc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001500c g     F .text	000001f0 OSTimeDlyResume
0000ff80 g     F .text	00000150 OSFlagNameSet
000147e8 g     F .text	000001c8 OSTaskStkChk
0001bfb6 g     O .rwdata	00000002 OSMemSize
00006ccc g     F .text	0000007c __swrite
0001bf60 g     O .rwdata	00000004 __malloc_trim_threshold
00004f1c g     F .text	0000000c __locale_msgcharset
0001e260 g     O .bss	00000004 OSTCBCur
000191e8 g     F .text	00000038 exit
00016bb0 g     F .text	00000074 alt_up_irda_read_data
0001bfb8 g     O .rwdata	00000002 OSMemTblSize
00004dc0 g     F .text	000000c4 _fwalk_reent
00016eac g     F .text	000000c4 alt_up_ps2_init
0000653c g     F .text	00000198 __mdiff
0000a2fc g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000048ac g     F .text	00000004 __sfp_lock_release
0000dea0 g     F .text	00000054 OSInit
00014bc4 g     F .text	0000012c OSTaskQuery
000166c0 g     F .text	00000074 alt_up_character_lcd_string
000128b4 g     F .text	000000ac OS_QInit
0000f0fc g     F .text	00000054 OS_StrLen
00016d44 g     F .text	00000040 alt_up_irda_open_dev
000113a8 g     F .text	00000118 OSMemNameSet
0001bfd2 g     O .rwdata	00000002 OSTaskProfileEn
0001e264 g     O .bss	00000004 OSTime
00023c58 g     O .bss	00000800 OSTaskIdleStk
000195d4 g     F .text	0000003c _exit
00018088 g     F .text	00000140 alt_alarm_start
0000fe50 g     F .text	00000130 OSFlagNameGet
000151fc g     F .text	00000064 OSTimeGet
00017b8c g     F .text	00000250 get_next_state
00004f64 g     F .text	000001b8 __smakebuf_r
00017098 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000770 g     F .text	00000098 strlen
00018dd4 g     F .text	0000001c OSTaskSwHook
00018854 g     F .text	00000158 open
00024458 g     O .bss	00000b40 OSEventTbl
0000b554 g     F .text	000000e0 .hidden __gedf2
00024f98 g     O .bss	00000510 OSTCBTbl
0001336c g     F .text	000000fc OSSemSet
0001bf64 g     O .rwdata	00000004 __wctomb
00006ea8 g     F .text	00000018 __sprint_r
00018420 g     F .text	00000030 alt_icache_flush_all
00016784 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001c000 g     O .rwdata	00000004 alt_priority_mask
00012b10 g     F .text	00000268 OSSemDel
0001e268 g     O .bss	00000004 OSFlagFreeList
0001bf98 g     O .rwdata	00000002 OSEventNameSize
00002758 g     F .text	00000024 __vfprintf_internal
0001e26c g     O .bss	00000001 OSStatRdy
000254a8 g     O .bss	00000054 OSTCBPrioTbl
00009690 g     F .text	0000005c _wctomb_r
0000d328 g     F .text	000000c0 __env_lock
000172d4 g     F .text	0000008c alt_up_ps2_read_fd
0001bfde g     O .rwdata	00000002 OSTaskSwHookEn
0000be38 g     F .text	000008d0 .hidden __subdf3
00016c24 g     F .text	00000090 alt_up_irda_read_fd
0001be7a g     O .rwdata	00000066 single_byte_make_code
00005f64 g     F .text	000000b0 __lo0bits
0001c004 g     O .rwdata	00000008 alt_alarm_list
0001bfa6 g     O .rwdata	00000002 OSFlagWidth
000182d8 g     F .text	0000005c _do_ctors
000174ec g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000095a0 g     F .text	000000c0 wcrtomb
0000c9b8 g     F .text	000000d0 close
0001e218 g     O .bss	00000004 alt_envsem
0001e270 g     O .bss	00000004 OSIdleCtrRun
0000e4f8 g     F .text	00000020 OSVersion
0001bff0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000cd0c g     F .text	00000080 alt_load
00014cf0 g     F .text	0000006c OS_TaskStkClr
0001bfca g     O .rwdata	00000002 OSTaskCreateEn
0000ead4 g     F .text	00000064 OS_EventWaitListInit
0000866c g     F .text	0000005c fputwc
00018e60 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000048b0 g     F .text	00000004 __sinit_lock_acquire
00005cd8 g     F .text	00000120 __multadd
000149b0 g     F .text	00000214 OSTaskSuspend
00005cb0 g     F .text	00000028 _Bfree
0000f150 g     F .text	0000005c OS_TaskIdle
0001bff6 g     O .rwdata	00000002 OSTmrTblSize
00012758 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000def40 	call	def4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10953f04 	addi	r2,r2,21756
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10953f04 	addi	r2,r2,21756
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000df700 	call	df70 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a8cf17 	ldw	r2,-23748(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a8cf17 	ldw	r2,-23748(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d68fd214 	ori	gp,gp,16200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10b87614 	ori	r2,r2,57816

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18d57f14 	ori	r3,r3,22012

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000cd0c0 	call	cd0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000ceb00 	call	ceb0 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <task1>:
//void convert(unsigned int i);
void print();
char getKey();


void task1(void* pdata) {
     280:	defffb04 	addi	sp,sp,-20
     284:	dfc00415 	stw	ra,16(sp)
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13fff15 	stw	r4,-4(fp)
	char strTemp[2];
	while (1) {
			PS2();
     294:	00004b80 	call	4b8 <PS2>

			VGA_box(0, 0, 319, 239, 0);
     298:	d8000015 	stw	zero,0(sp)
     29c:	0009883a 	mov	r4,zero
     2a0:	000b883a 	mov	r5,zero
     2a4:	01804fc4 	movi	r6,319
     2a8:	01c03bc4 	movi	r7,239
     2ac:	00003880 	call	388 <VGA_box>

			strTemp[0] = getKey();
     2b0:	00005440 	call	544 <getKey>
     2b4:	e0bffe05 	stb	r2,-8(fp)
			printf("getKey: %c\n", strTemp[0]);
     2b8:	e0bffe03 	ldbu	r2,-8(fp)
     2bc:	10803fcc 	andi	r2,r2,255
     2c0:	1080201c 	xori	r2,r2,128
     2c4:	10bfe004 	addi	r2,r2,-128
     2c8:	010000b4 	movhi	r4,2
     2cc:	21258404 	addi	r4,r4,-27120
     2d0:	100b883a 	mov	r5,r2
     2d4:	00006900 	call	690 <printf>

			VGA_text(5, 5, strTemp);
     2d8:	01000144 	movi	r4,5
     2dc:	01400144 	movi	r5,5
     2e0:	e1bffe04 	addi	r6,fp,-8
     2e4:	000043c0 	call	43c <VGA_text>
			VGA_box(0, 0, 319, 239, 0);
     2e8:	d8000015 	stw	zero,0(sp)
     2ec:	0009883a 	mov	r4,zero
     2f0:	000b883a 	mov	r5,zero
     2f4:	01804fc4 	movi	r6,319
     2f8:	01c03bc4 	movi	r7,239
     2fc:	00003880 	call	388 <VGA_box>
	}
     300:	003fe406 	br	294 <__alt_mem_Flash_flash_data+0xf4000294>

00000304 <main>:
}

int main(void) {
     304:	defff904 	addi	sp,sp,-28
     308:	dfc00615 	stw	ra,24(sp)
     30c:	df000515 	stw	fp,20(sp)
     310:	df000504 	addi	fp,sp,20

	VGA_box(0, 0, 319, 239, 0);
     314:	d8000015 	stw	zero,0(sp)
     318:	0009883a 	mov	r4,zero
     31c:	000b883a 	mov	r5,zero
     320:	01804fc4 	movi	r6,319
     324:	01c03bc4 	movi	r7,239
     328:	00003880 	call	388 <VGA_box>

	OSTaskCreateExt(task1,
     32c:	00800044 	movi	r2,1
     330:	d8800015 	stw	r2,0(sp)
     334:	008000b4 	movhi	r2,2
     338:	10b8ac04 	addi	r2,r2,-7504
     33c:	d8800115 	stw	r2,4(sp)
     340:	00820004 	movi	r2,2048
     344:	d8800215 	stw	r2,8(sp)
     348:	d8000315 	stw	zero,12(sp)
     34c:	d8000415 	stw	zero,16(sp)
     350:	01000034 	movhi	r4,0
     354:	2100a004 	addi	r4,r4,640
     358:	000b883a 	mov	r5,zero
     35c:	018000b4 	movhi	r6,2
     360:	3180ab04 	addi	r6,r6,684
     364:	01c00044 	movi	r7,1
     368:	0013b640 	call	13b64 <OSTaskCreateExt>
	TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSStart();
     36c:	000e1c40 	call	e1c4 <OSStart>
	return 0;
     370:	0005883a 	mov	r2,zero
}
     374:	e037883a 	mov	sp,fp
     378:	dfc00117 	ldw	ra,4(sp)
     37c:	df000017 	ldw	fp,0(sp)
     380:	dec00204 	addi	sp,sp,8
     384:	f800283a 	ret

00000388 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) {
     388:	defff604 	addi	sp,sp,-40
     38c:	df000915 	stw	fp,36(sp)
     390:	df000904 	addi	fp,sp,36
     394:	e13ffb15 	stw	r4,-20(fp)
     398:	e17ffc15 	stw	r5,-16(fp)
     39c:	e1bffd15 	stw	r6,-12(fp)
     3a0:	e1fffe15 	stw	r7,-8(fp)
     3a4:	e0800117 	ldw	r2,4(fp)
     3a8:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     3ac:	00820034 	movhi	r2,2048
     3b0:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     3b4:	e0bffc17 	ldw	r2,-16(fp)
     3b8:	e0bff715 	stw	r2,-36(fp)
     3bc:	00001806 	br	420 <VGA_box+0x98>
		col = x1;
     3c0:	e0bffb17 	ldw	r2,-20(fp)
     3c4:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2) {
     3c8:	00000f06 	br	408 <VGA_box+0x80>
			offset = (row << 9) + col;
     3cc:	e0bff717 	ldw	r2,-36(fp)
     3d0:	1006927a 	slli	r3,r2,9
     3d4:	e0bff817 	ldw	r2,-32(fp)
     3d8:	1885883a 	add	r2,r3,r2
     3dc:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     3e0:	e0bffa17 	ldw	r2,-24(fp)
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1007883a 	mov	r3,r2
     3ec:	e0bff917 	ldw	r2,-28(fp)
     3f0:	10c5883a 	add	r2,r2,r3
     3f4:	e0ffff0b 	ldhu	r3,-4(fp)
     3f8:	10c0000d 	sth	r3,0(r2)
			++col;
     3fc:	e0bff817 	ldw	r2,-32(fp)
     400:	10800044 	addi	r2,r2,1
     404:	e0bff815 	stw	r2,-32(fp)
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
		col = x1;
		while (col <= x2) {
     408:	e0bff817 	ldw	r2,-32(fp)
     40c:	e0fffd17 	ldw	r3,-12(fp)
     410:	18bfee0e 	bge	r3,r2,3cc <__alt_mem_Flash_flash_data+0xf40003cc>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) {
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     414:	e0bff717 	ldw	r2,-36(fp)
     418:	10800044 	addi	r2,r2,1
     41c:	e0bff715 	stw	r2,-36(fp)
     420:	e0bff717 	ldw	r2,-36(fp)
     424:	e0fffe17 	ldw	r3,-8(fp)
     428:	18bfe50e 	bge	r3,r2,3c0 <__alt_mem_Flash_flash_data+0xf40003c0>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     42c:	e037883a 	mov	sp,fp
     430:	df000017 	ldw	fp,0(sp)
     434:	dec00104 	addi	sp,sp,4
     438:	f800283a 	ret

0000043c <VGA_text>:
void VGA_text(int x, int y, char * text_ptr) {
     43c:	defffb04 	addi	sp,sp,-20
     440:	df000415 	stw	fp,16(sp)
     444:	df000404 	addi	fp,sp,16
     448:	e13ffd15 	stw	r4,-12(fp)
     44c:	e17ffe15 	stw	r5,-8(fp)
     450:	e1bfff15 	stw	r6,-4(fp)
	int offset;


	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     454:	e0bffe17 	ldw	r2,-8(fp)
     458:	100691fa 	slli	r3,r2,7
     45c:	e0bffd17 	ldw	r2,-12(fp)
     460:	1885883a 	add	r2,r3,r2
     464:	e0bffc15 	stw	r2,-16(fp)
	while (*(text_ptr)) {
     468:	00000906 	br	490 <VGA_text+0x54>
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     46c:	d0e00117 	ldw	r3,-32764(gp)
     470:	e0bffc17 	ldw	r2,-16(fp)
     474:	1885883a 	add	r2,r3,r2
     478:	e0ffff17 	ldw	r3,-4(fp)
     47c:	18c00003 	ldbu	r3,0(r3)
     480:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10800044 	addi	r2,r2,1
     48c:	e0bfff15 	stw	r2,-4(fp)
	int offset;


	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while (*(text_ptr)) {
     490:	e0bfff17 	ldw	r2,-4(fp)
     494:	10800003 	ldbu	r2,0(r2)
     498:	10803fcc 	andi	r2,r2,255
     49c:	1080201c 	xori	r2,r2,128
     4a0:	10bfe004 	addi	r2,r2,-128
     4a4:	103ff11e 	bne	r2,zero,46c <__alt_mem_Flash_flash_data+0xf400046c>
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		//++offset;
	}
}
     4a8:	e037883a 	mov	sp,fp
     4ac:	df000017 	ldw	fp,0(sp)
     4b0:	dec00104 	addi	sp,sp,4
     4b4:	f800283a 	ret

000004b8 <PS2>:
void PS2() {
     4b8:	deffff04 	addi	sp,sp,-4
     4bc:	df000015 	stw	fp,0(sp)
     4c0:	d839883a 	mov	fp,sp
	PS2_data = *(PS2_ptr);	// read the Data register in the PS/2 port
     4c4:	d0a00017 	ldw	r2,-32768(gp)
     4c8:	10800017 	ldw	r2,0(r2)
     4cc:	d0a8a515 	stw	r2,-23916(gp)
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;	// extract the RAVAIL field
     4d0:	d0a8a517 	ldw	r2,-23916(gp)
     4d4:	1004d43a 	srli	r2,r2,16
     4d8:	d0a8a715 	stw	r2,-23908(gp)
	if (RAVAIL > 0){
     4dc:	d0a8a717 	ldw	r2,-23908(gp)
     4e0:	0080030e 	bge	zero,r2,4f0 <PS2+0x38>


		/* always save the last three bytes received */
		byte1 = PS2_data & 0xFF;
     4e4:	d0a8a517 	ldw	r2,-23916(gp)
     4e8:	10803fcc 	andi	r2,r2,255
     4ec:	d0a8a415 	stw	r2,-23920(gp)




	}
}
     4f0:	e037883a 	mov	sp,fp
     4f4:	df000017 	ldw	fp,0(sp)
     4f8:	dec00104 	addi	sp,sp,4
     4fc:	f800283a 	ret

00000500 <print>:


void print(){
     500:	defffe04 	addi	sp,sp,-8
     504:	dfc00115 	stw	ra,4(sp)
     508:	df000015 	stw	fp,0(sp)
     50c:	d839883a 	mov	fp,sp
	printf("byte 1: %X, %c, %d\n", byte1, byte1, byte1);
     510:	d168a417 	ldw	r5,-23920(gp)
     514:	d0e8a417 	ldw	r3,-23920(gp)
     518:	d0a8a417 	ldw	r2,-23920(gp)
     51c:	010000b4 	movhi	r4,2
     520:	21258704 	addi	r4,r4,-27108
     524:	180d883a 	mov	r6,r3
     528:	100f883a 	mov	r7,r2
     52c:	00006900 	call	690 <printf>
//	printf("byte 2: %X, %c, %d\n", byte2, byte2, byte2);
//	printf("byte 3: %X, %c, %d\n", byte3, byte3, byte3);
//	printf("PS2_data :%X, %c, %d\n\n", PS2_data, PS2_data, PS2_data);
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <getKey>:
char getKey(){
     544:	defffd04 	addi	sp,sp,-12
     548:	dfc00215 	stw	ra,8(sp)
     54c:	df000115 	stw	fp,4(sp)
     550:	df000104 	addi	fp,sp,4
	if(byte1 != BREAKCODE){				//checks if the received scancode is a BREAKCODE indicator, 0xF0
     554:	d0a8a417 	ldw	r2,-23920(gp)
     558:	10803c20 	cmpeqi	r2,r2,240
     55c:	1000071e 	bne	r2,zero,57c <getKey+0x38>
		translate_make_code(KB_ASCII_MAKE_CODE, (char *) byte1, &ascii);			//if not, translates it to ascii
     560:	d0a8a417 	ldw	r2,-23920(gp)
     564:	10803fcc 	andi	r2,r2,255
     568:	01000044 	movi	r4,1
     56c:	100b883a 	mov	r5,r2
     570:	018000b4 	movhi	r6,2
     574:	3188ac04 	addi	r6,r6,8880
     578:	0017ef80 	call	17ef8 <translate_make_code>
	}

	char tempo = ascii[0];
     57c:	008000b4 	movhi	r2,2
     580:	1088ac04 	addi	r2,r2,8880
     584:	10800017 	ldw	r2,0(r2)
     588:	e0bfff05 	stb	r2,-4(fp)

	if(strcmp(ascii, "KP 8") == 0){
     58c:	010000b4 	movhi	r4,2
     590:	2108ac04 	addi	r4,r4,8880
     594:	014000b4 	movhi	r5,2
     598:	29658c04 	addi	r5,r5,-27088
     59c:	00006cc0 	call	6cc <strcmp>
     5a0:	1000021e 	bne	r2,zero,5ac <getKey+0x68>
		return UP;
     5a4:	00800e04 	movi	r2,56
     5a8:	00002906 	br	650 <getKey+0x10c>
	}else if(strcmp(ascii, "KP 2") == 0){
     5ac:	010000b4 	movhi	r4,2
     5b0:	2108ac04 	addi	r4,r4,8880
     5b4:	014000b4 	movhi	r5,2
     5b8:	29658e04 	addi	r5,r5,-27080
     5bc:	00006cc0 	call	6cc <strcmp>
     5c0:	1000021e 	bne	r2,zero,5cc <getKey+0x88>
		return DOWN;
     5c4:	00800c84 	movi	r2,50
     5c8:	00002106 	br	650 <getKey+0x10c>
	}else if(strcmp(ascii, "KP 6") == 0){
     5cc:	010000b4 	movhi	r4,2
     5d0:	2108ac04 	addi	r4,r4,8880
     5d4:	014000b4 	movhi	r5,2
     5d8:	29659004 	addi	r5,r5,-27072
     5dc:	00006cc0 	call	6cc <strcmp>
     5e0:	1000021e 	bne	r2,zero,5ec <getKey+0xa8>
		return RIGHT;
     5e4:	00800d84 	movi	r2,54
     5e8:	00001906 	br	650 <getKey+0x10c>
	}else if(strcmp(ascii, "KP 4") == 0){
     5ec:	010000b4 	movhi	r4,2
     5f0:	2108ac04 	addi	r4,r4,8880
     5f4:	014000b4 	movhi	r5,2
     5f8:	29659204 	addi	r5,r5,-27064
     5fc:	00006cc0 	call	6cc <strcmp>
     600:	1000021e 	bne	r2,zero,60c <getKey+0xc8>
		return LEFT;
     604:	00800d04 	movi	r2,52
     608:	00001106 	br	650 <getKey+0x10c>
	}else if((tempo >='A' && tempo <= 'Z')){			//checks wether or not the received byte is a letter
     60c:	e0bfff07 	ldb	r2,-4(fp)
     610:	10801050 	cmplti	r2,r2,65
     614:	10000d1e 	bne	r2,zero,64c <getKey+0x108>
     618:	e0bfff07 	ldb	r2,-4(fp)
     61c:	108016c8 	cmpgei	r2,r2,91
     620:	10000a1e 	bne	r2,zero,64c <getKey+0x108>
		if(strlen(ascii) == 1){
     624:	010000b4 	movhi	r4,2
     628:	2108ac04 	addi	r4,r4,8880
     62c:	00007700 	call	770 <strlen>
     630:	10800058 	cmpnei	r2,r2,1
     634:	1000051e 	bne	r2,zero,64c <getKey+0x108>
			tempo = tempo + 32;						//makes it a small letter instead of a capital
     638:	e0bfff03 	ldbu	r2,-4(fp)
     63c:	10800804 	addi	r2,r2,32
     640:	e0bfff05 	stb	r2,-4(fp)
			return tempo;							//returns the character
     644:	e0bfff03 	ldbu	r2,-4(fp)
     648:	00000106 	br	650 <getKey+0x10c>
		}
	}
	return 0;									// returns null
     64c:	0005883a 	mov	r2,zero
}
     650:	e037883a 	mov	sp,fp
     654:	dfc00117 	ldw	ra,4(sp)
     658:	df000017 	ldw	fp,0(sp)
     65c:	dec00204 	addi	sp,sp,8
     660:	f800283a 	ret

00000664 <_printf_r>:
     664:	defffd04 	addi	sp,sp,-12
     668:	dfc00015 	stw	ra,0(sp)
     66c:	d9800115 	stw	r6,4(sp)
     670:	d9c00215 	stw	r7,8(sp)
     674:	280d883a 	mov	r6,r5
     678:	21400217 	ldw	r5,8(r4)
     67c:	d9c00104 	addi	r7,sp,4
     680:	00008080 	call	808 <___vfprintf_internal_r>
     684:	dfc00017 	ldw	ra,0(sp)
     688:	dec00304 	addi	sp,sp,12
     68c:	f800283a 	ret

00000690 <printf>:
     690:	defffc04 	addi	sp,sp,-16
     694:	dfc00015 	stw	ra,0(sp)
     698:	d9400115 	stw	r5,4(sp)
     69c:	d9800215 	stw	r6,8(sp)
     6a0:	d9c00315 	stw	r7,12(sp)
     6a4:	008000b4 	movhi	r2,2
     6a8:	10afd504 	addi	r2,r2,-16556
     6ac:	10800017 	ldw	r2,0(r2)
     6b0:	200b883a 	mov	r5,r4
     6b4:	d9800104 	addi	r6,sp,4
     6b8:	11000217 	ldw	r4,8(r2)
     6bc:	00027580 	call	2758 <__vfprintf_internal>
     6c0:	dfc00017 	ldw	ra,0(sp)
     6c4:	dec00404 	addi	sp,sp,16
     6c8:	f800283a 	ret

000006cc <strcmp>:
     6cc:	2144b03a 	or	r2,r4,r5
     6d0:	108000cc 	andi	r2,r2,3
     6d4:	1000171e 	bne	r2,zero,734 <strcmp+0x68>
     6d8:	20800017 	ldw	r2,0(r4)
     6dc:	28c00017 	ldw	r3,0(r5)
     6e0:	10c0141e 	bne	r2,r3,734 <strcmp+0x68>
     6e4:	027fbff4 	movhi	r9,65279
     6e8:	4a7fbfc4 	addi	r9,r9,-257
     6ec:	0086303a 	nor	r3,zero,r2
     6f0:	02202074 	movhi	r8,32897
     6f4:	1245883a 	add	r2,r2,r9
     6f8:	42202004 	addi	r8,r8,-32640
     6fc:	10c4703a 	and	r2,r2,r3
     700:	1204703a 	and	r2,r2,r8
     704:	10000226 	beq	r2,zero,710 <strcmp+0x44>
     708:	00001706 	br	768 <strcmp+0x9c>
     70c:	1000161e 	bne	r2,zero,768 <strcmp+0x9c>
     710:	21000104 	addi	r4,r4,4
     714:	20c00017 	ldw	r3,0(r4)
     718:	29400104 	addi	r5,r5,4
     71c:	29800017 	ldw	r6,0(r5)
     720:	1a4f883a 	add	r7,r3,r9
     724:	00c4303a 	nor	r2,zero,r3
     728:	3884703a 	and	r2,r7,r2
     72c:	1204703a 	and	r2,r2,r8
     730:	19bff626 	beq	r3,r6,70c <__alt_mem_Flash_flash_data+0xf400070c>
     734:	20800007 	ldb	r2,0(r4)
     738:	1000051e 	bne	r2,zero,750 <strcmp+0x84>
     73c:	00000606 	br	758 <strcmp+0x8c>
     740:	21000044 	addi	r4,r4,1
     744:	20800007 	ldb	r2,0(r4)
     748:	29400044 	addi	r5,r5,1
     74c:	10000226 	beq	r2,zero,758 <strcmp+0x8c>
     750:	28c00007 	ldb	r3,0(r5)
     754:	10fffa26 	beq	r2,r3,740 <__alt_mem_Flash_flash_data+0xf4000740>
     758:	20800003 	ldbu	r2,0(r4)
     75c:	28c00003 	ldbu	r3,0(r5)
     760:	10c5c83a 	sub	r2,r2,r3
     764:	f800283a 	ret
     768:	0005883a 	mov	r2,zero
     76c:	f800283a 	ret

00000770 <strlen>:
     770:	208000cc 	andi	r2,r4,3
     774:	10002026 	beq	r2,zero,7f8 <strlen+0x88>
     778:	20800007 	ldb	r2,0(r4)
     77c:	10002026 	beq	r2,zero,800 <strlen+0x90>
     780:	2005883a 	mov	r2,r4
     784:	00000206 	br	790 <strlen+0x20>
     788:	10c00007 	ldb	r3,0(r2)
     78c:	18001826 	beq	r3,zero,7f0 <strlen+0x80>
     790:	10800044 	addi	r2,r2,1
     794:	10c000cc 	andi	r3,r2,3
     798:	183ffb1e 	bne	r3,zero,788 <__alt_mem_Flash_flash_data+0xf4000788>
     79c:	10c00017 	ldw	r3,0(r2)
     7a0:	01ffbff4 	movhi	r7,65279
     7a4:	39ffbfc4 	addi	r7,r7,-257
     7a8:	00ca303a 	nor	r5,zero,r3
     7ac:	01a02074 	movhi	r6,32897
     7b0:	19c7883a 	add	r3,r3,r7
     7b4:	31a02004 	addi	r6,r6,-32640
     7b8:	1946703a 	and	r3,r3,r5
     7bc:	1986703a 	and	r3,r3,r6
     7c0:	1800091e 	bne	r3,zero,7e8 <strlen+0x78>
     7c4:	10800104 	addi	r2,r2,4
     7c8:	10c00017 	ldw	r3,0(r2)
     7cc:	19cb883a 	add	r5,r3,r7
     7d0:	00c6303a 	nor	r3,zero,r3
     7d4:	28c6703a 	and	r3,r5,r3
     7d8:	1986703a 	and	r3,r3,r6
     7dc:	183ff926 	beq	r3,zero,7c4 <__alt_mem_Flash_flash_data+0xf40007c4>
     7e0:	00000106 	br	7e8 <strlen+0x78>
     7e4:	10800044 	addi	r2,r2,1
     7e8:	10c00007 	ldb	r3,0(r2)
     7ec:	183ffd1e 	bne	r3,zero,7e4 <__alt_mem_Flash_flash_data+0xf40007e4>
     7f0:	1105c83a 	sub	r2,r2,r4
     7f4:	f800283a 	ret
     7f8:	2005883a 	mov	r2,r4
     7fc:	003fe706 	br	79c <__alt_mem_Flash_flash_data+0xf400079c>
     800:	0005883a 	mov	r2,zero
     804:	f800283a 	ret

00000808 <___vfprintf_internal_r>:
     808:	deffb604 	addi	sp,sp,-296
     80c:	dfc04915 	stw	ra,292(sp)
     810:	ddc04715 	stw	r23,284(sp)
     814:	dd804615 	stw	r22,280(sp)
     818:	282f883a 	mov	r23,r5
     81c:	202d883a 	mov	r22,r4
     820:	d9802a15 	stw	r6,168(sp)
     824:	d9c02d15 	stw	r7,180(sp)
     828:	df004815 	stw	fp,288(sp)
     82c:	dd404515 	stw	r21,276(sp)
     830:	dd004415 	stw	r20,272(sp)
     834:	dcc04315 	stw	r19,268(sp)
     838:	dc804215 	stw	r18,264(sp)
     83c:	dc404115 	stw	r17,260(sp)
     840:	dc004015 	stw	r16,256(sp)
     844:	0004f300 	call	4f30 <_localeconv_r>
     848:	10800017 	ldw	r2,0(r2)
     84c:	1009883a 	mov	r4,r2
     850:	d8803515 	stw	r2,212(sp)
     854:	00007700 	call	770 <strlen>
     858:	d8803815 	stw	r2,224(sp)
     85c:	b0000226 	beq	r22,zero,868 <___vfprintf_internal_r+0x60>
     860:	b0800e17 	ldw	r2,56(r22)
     864:	1000e126 	beq	r2,zero,bec <___vfprintf_internal_r+0x3e4>
     868:	b880030b 	ldhu	r2,12(r23)
     86c:	10c8000c 	andi	r3,r2,8192
     870:	1800061e 	bne	r3,zero,88c <___vfprintf_internal_r+0x84>
     874:	b9001917 	ldw	r4,100(r23)
     878:	00f7ffc4 	movi	r3,-8193
     87c:	10880014 	ori	r2,r2,8192
     880:	20c6703a 	and	r3,r4,r3
     884:	b880030d 	sth	r2,12(r23)
     888:	b8c01915 	stw	r3,100(r23)
     88c:	10c0020c 	andi	r3,r2,8
     890:	1800a726 	beq	r3,zero,b30 <___vfprintf_internal_r+0x328>
     894:	b8c00417 	ldw	r3,16(r23)
     898:	1800a526 	beq	r3,zero,b30 <___vfprintf_internal_r+0x328>
     89c:	1080068c 	andi	r2,r2,26
     8a0:	00c00284 	movi	r3,10
     8a4:	10c0aa26 	beq	r2,r3,b50 <___vfprintf_internal_r+0x348>
     8a8:	dac01e04 	addi	r11,sp,120
     8ac:	db001dc4 	addi	r12,sp,119
     8b0:	d8800404 	addi	r2,sp,16
     8b4:	050000b4 	movhi	r20,2
     8b8:	dac02815 	stw	r11,160(sp)
     8bc:	5b17c83a 	sub	r11,r11,r12
     8c0:	a525a484 	addi	r20,r20,-26990
     8c4:	db002915 	stw	r12,164(sp)
     8c8:	d8801e15 	stw	r2,120(sp)
     8cc:	d8002015 	stw	zero,128(sp)
     8d0:	d8001f15 	stw	zero,124(sp)
     8d4:	d8003315 	stw	zero,204(sp)
     8d8:	d8003715 	stw	zero,220(sp)
     8dc:	d8003915 	stw	zero,228(sp)
     8e0:	1011883a 	mov	r8,r2
     8e4:	d8003b15 	stw	zero,236(sp)
     8e8:	d8003a15 	stw	zero,232(sp)
     8ec:	d8002f15 	stw	zero,188(sp)
     8f0:	dac03c15 	stw	r11,240(sp)
     8f4:	db002a17 	ldw	r12,168(sp)
     8f8:	60800007 	ldb	r2,0(r12)
     8fc:	1000be26 	beq	r2,zero,bf8 <___vfprintf_internal_r+0x3f0>
     900:	00c00944 	movi	r3,37
     904:	10c0bc26 	beq	r2,r3,bf8 <___vfprintf_internal_r+0x3f0>
     908:	6021883a 	mov	r16,r12
     90c:	00000106 	br	914 <___vfprintf_internal_r+0x10c>
     910:	10c08426 	beq	r2,r3,b24 <___vfprintf_internal_r+0x31c>
     914:	84000044 	addi	r16,r16,1
     918:	80800007 	ldb	r2,0(r16)
     91c:	103ffc1e 	bne	r2,zero,910 <__alt_mem_Flash_flash_data+0xf4000910>
     920:	dac02a17 	ldw	r11,168(sp)
     924:	82e3c83a 	sub	r17,r16,r11
     928:	88000f26 	beq	r17,zero,968 <___vfprintf_internal_r+0x160>
     92c:	d8c02017 	ldw	r3,128(sp)
     930:	d8801f17 	ldw	r2,124(sp)
     934:	dac02a17 	ldw	r11,168(sp)
     938:	1c47883a 	add	r3,r3,r17
     93c:	10800044 	addi	r2,r2,1
     940:	d8c02015 	stw	r3,128(sp)
     944:	42c00015 	stw	r11,0(r8)
     948:	44400115 	stw	r17,4(r8)
     94c:	d8801f15 	stw	r2,124(sp)
     950:	00c001c4 	movi	r3,7
     954:	18809316 	blt	r3,r2,ba4 <___vfprintf_internal_r+0x39c>
     958:	42000204 	addi	r8,r8,8
     95c:	db002f17 	ldw	r12,188(sp)
     960:	6459883a 	add	r12,r12,r17
     964:	db002f15 	stw	r12,188(sp)
     968:	80800007 	ldb	r2,0(r16)
     96c:	10009426 	beq	r2,zero,bc0 <___vfprintf_internal_r+0x3b8>
     970:	80800044 	addi	r2,r16,1
     974:	84000047 	ldb	r16,1(r16)
     978:	d8002785 	stb	zero,158(sp)
     97c:	000d883a 	mov	r6,zero
     980:	027fffc4 	movi	r9,-1
     984:	d8002e15 	stw	zero,184(sp)
     988:	0023883a 	mov	r17,zero
     98c:	01001604 	movi	r4,88
     990:	01400244 	movi	r5,9
     994:	02800a84 	movi	r10,42
     998:	01c01b04 	movi	r7,108
     99c:	10c00044 	addi	r3,r2,1
     9a0:	80bff804 	addi	r2,r16,-32
     9a4:	2082cd36 	bltu	r4,r2,14dc <___vfprintf_internal_r+0xcd4>
     9a8:	100490ba 	slli	r2,r2,2
     9ac:	02c00034 	movhi	r11,0
     9b0:	5ac27004 	addi	r11,r11,2496
     9b4:	12c5883a 	add	r2,r2,r11
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	1000683a 	jmp	r2
     9c0:	000012f4 	movhi	zero,75
     9c4:	000014dc 	xori	zero,zero,83
     9c8:	000014dc 	xori	zero,zero,83
     9cc:	00001444 	movi	zero,81
     9d0:	000014dc 	xori	zero,zero,83
     9d4:	000014dc 	xori	zero,zero,83
     9d8:	000014dc 	xori	zero,zero,83
     9dc:	000014dc 	xori	zero,zero,83
     9e0:	000014dc 	xori	zero,zero,83
     9e4:	000014dc 	xori	zero,zero,83
     9e8:	00001314 	movui	zero,76
     9ec:	00001340 	call	134 <alt_irq_handler+0x38>
     9f0:	000014dc 	xori	zero,zero,83
     9f4:	00000c00 	call	c0 <OSCtxSw_SWITCH_PC+0x80>
     9f8:	00000c10 	cmplti	zero,zero,48
     9fc:	000014dc 	xori	zero,zero,83
     a00:	00000c50 	cmplti	zero,zero,49
     a04:	00000c60 	cmpeqi	zero,zero,49
     a08:	00000c60 	cmpeqi	zero,zero,49
     a0c:	00000c60 	cmpeqi	zero,zero,49
     a10:	00000c60 	cmpeqi	zero,zero,49
     a14:	00000c60 	cmpeqi	zero,zero,49
     a18:	00000c60 	cmpeqi	zero,zero,49
     a1c:	00000c60 	cmpeqi	zero,zero,49
     a20:	00000c60 	cmpeqi	zero,zero,49
     a24:	00000c60 	cmpeqi	zero,zero,49
     a28:	000014dc 	xori	zero,zero,83
     a2c:	000014dc 	xori	zero,zero,83
     a30:	000014dc 	xori	zero,zero,83
     a34:	000014dc 	xori	zero,zero,83
     a38:	000014dc 	xori	zero,zero,83
     a3c:	000014dc 	xori	zero,zero,83
     a40:	000014dc 	xori	zero,zero,83
     a44:	000014dc 	xori	zero,zero,83
     a48:	000014dc 	xori	zero,zero,83
     a4c:	000014dc 	xori	zero,zero,83
     a50:	00000c94 	movui	zero,50
     a54:	00001104 	movi	zero,68
     a58:	000014dc 	xori	zero,zero,83
     a5c:	00001104 	movi	zero,68
     a60:	000014dc 	xori	zero,zero,83
     a64:	000014dc 	xori	zero,zero,83
     a68:	000014dc 	xori	zero,zero,83
     a6c:	000014dc 	xori	zero,zero,83
     a70:	000011f0 	cmpltui	zero,zero,71
     a74:	000014dc 	xori	zero,zero,83
     a78:	000014dc 	xori	zero,zero,83
     a7c:	00001098 	cmpnei	zero,zero,66
     a80:	000014dc 	xori	zero,zero,83
     a84:	000014dc 	xori	zero,zero,83
     a88:	000014dc 	xori	zero,zero,83
     a8c:	000014dc 	xori	zero,zero,83
     a90:	000014dc 	xori	zero,zero,83
     a94:	000010d4 	movui	zero,67
     a98:	000014dc 	xori	zero,zero,83
     a9c:	000014dc 	xori	zero,zero,83
     aa0:	00001298 	cmpnei	zero,zero,74
     aa4:	000014dc 	xori	zero,zero,83
     aa8:	000014dc 	xori	zero,zero,83
     aac:	000014dc 	xori	zero,zero,83
     ab0:	000014dc 	xori	zero,zero,83
     ab4:	000014dc 	xori	zero,zero,83
     ab8:	000014dc 	xori	zero,zero,83
     abc:	000014dc 	xori	zero,zero,83
     ac0:	000014dc 	xori	zero,zero,83
     ac4:	000014dc 	xori	zero,zero,83
     ac8:	000014dc 	xori	zero,zero,83
     acc:	00001350 	cmplti	zero,zero,77
     ad0:	00001200 	call	120 <alt_irq_handler+0x24>
     ad4:	00001104 	movi	zero,68
     ad8:	00001104 	movi	zero,68
     adc:	00001104 	movi	zero,68
     ae0:	00001240 	call	124 <alt_irq_handler+0x28>
     ae4:	00001200 	call	120 <alt_irq_handler+0x24>
     ae8:	000014dc 	xori	zero,zero,83
     aec:	000014dc 	xori	zero,zero,83
     af0:	00001250 	cmplti	zero,zero,73
     af4:	000014dc 	xori	zero,zero,83
     af8:	00001264 	muli	zero,zero,73
     afc:	000014a0 	cmpeqi	zero,zero,82
     b00:	000011a8 	cmpgeui	zero,zero,70
     b04:	00001454 	movui	zero,81
     b08:	000014dc 	xori	zero,zero,83
     b0c:	00001390 	cmplti	zero,zero,78
     b10:	000014dc 	xori	zero,zero,83
     b14:	00001464 	muli	zero,zero,81
     b18:	000014dc 	xori	zero,zero,83
     b1c:	000014dc 	xori	zero,zero,83
     b20:	00001404 	movi	zero,80
     b24:	db002a17 	ldw	r12,168(sp)
     b28:	8323c83a 	sub	r17,r16,r12
     b2c:	003f7e06 	br	928 <__alt_mem_Flash_flash_data+0xf4000928>
     b30:	b009883a 	mov	r4,r22
     b34:	b80b883a 	mov	r5,r23
     b38:	00028380 	call	2838 <__swsetup_r>
     b3c:	10000c1e 	bne	r2,zero,b70 <___vfprintf_internal_r+0x368>
     b40:	b880030b 	ldhu	r2,12(r23)
     b44:	00c00284 	movi	r3,10
     b48:	1080068c 	andi	r2,r2,26
     b4c:	10ff561e 	bne	r2,r3,8a8 <__alt_mem_Flash_flash_data+0xf40008a8>
     b50:	b880038f 	ldh	r2,14(r23)
     b54:	103f5416 	blt	r2,zero,8a8 <__alt_mem_Flash_flash_data+0xf40008a8>
     b58:	d9802a17 	ldw	r6,168(sp)
     b5c:	d9c02d17 	ldw	r7,180(sp)
     b60:	b009883a 	mov	r4,r22
     b64:	b80b883a 	mov	r5,r23
     b68:	000277c0 	call	277c <__sbprintf>
     b6c:	00000106 	br	b74 <___vfprintf_internal_r+0x36c>
     b70:	00bfffc4 	movi	r2,-1
     b74:	dfc04917 	ldw	ra,292(sp)
     b78:	df004817 	ldw	fp,288(sp)
     b7c:	ddc04717 	ldw	r23,284(sp)
     b80:	dd804617 	ldw	r22,280(sp)
     b84:	dd404517 	ldw	r21,276(sp)
     b88:	dd004417 	ldw	r20,272(sp)
     b8c:	dcc04317 	ldw	r19,268(sp)
     b90:	dc804217 	ldw	r18,264(sp)
     b94:	dc404117 	ldw	r17,260(sp)
     b98:	dc004017 	ldw	r16,256(sp)
     b9c:	dec04a04 	addi	sp,sp,296
     ba0:	f800283a 	ret
     ba4:	b009883a 	mov	r4,r22
     ba8:	b80b883a 	mov	r5,r23
     bac:	d9801e04 	addi	r6,sp,120
     bb0:	0006ea80 	call	6ea8 <__sprint_r>
     bb4:	1000081e 	bne	r2,zero,bd8 <___vfprintf_internal_r+0x3d0>
     bb8:	da000404 	addi	r8,sp,16
     bbc:	003f6706 	br	95c <__alt_mem_Flash_flash_data+0xf400095c>
     bc0:	d8802017 	ldw	r2,128(sp)
     bc4:	10000426 	beq	r2,zero,bd8 <___vfprintf_internal_r+0x3d0>
     bc8:	b009883a 	mov	r4,r22
     bcc:	b80b883a 	mov	r5,r23
     bd0:	d9801e04 	addi	r6,sp,120
     bd4:	0006ea80 	call	6ea8 <__sprint_r>
     bd8:	b880030b 	ldhu	r2,12(r23)
     bdc:	1080100c 	andi	r2,r2,64
     be0:	103fe31e 	bne	r2,zero,b70 <__alt_mem_Flash_flash_data+0xf4000b70>
     be4:	d8802f17 	ldw	r2,188(sp)
     be8:	003fe206 	br	b74 <__alt_mem_Flash_flash_data+0xf4000b74>
     bec:	b009883a 	mov	r4,r22
     bf0:	00048980 	call	4898 <__sinit>
     bf4:	003f1c06 	br	868 <__alt_mem_Flash_flash_data+0xf4000868>
     bf8:	dc002a17 	ldw	r16,168(sp)
     bfc:	003f5a06 	br	968 <__alt_mem_Flash_flash_data+0xf4000968>
     c00:	1805883a 	mov	r2,r3
     c04:	8c400114 	ori	r17,r17,4
     c08:	1c000007 	ldb	r16,0(r3)
     c0c:	003f6306 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
     c10:	1c000007 	ldb	r16,0(r3)
     c14:	18800044 	addi	r2,r3,1
     c18:	8286ad26 	beq	r16,r10,26d0 <___vfprintf_internal_r+0x1ec8>
     c1c:	82fff404 	addi	r11,r16,-48
     c20:	1007883a 	mov	r3,r2
     c24:	0013883a 	mov	r9,zero
     c28:	2aff5d36 	bltu	r5,r11,9a0 <__alt_mem_Flash_flash_data+0xf40009a0>
     c2c:	1c000007 	ldb	r16,0(r3)
     c30:	4a4002a4 	muli	r9,r9,10
     c34:	18c00044 	addi	r3,r3,1
     c38:	5a53883a 	add	r9,r11,r9
     c3c:	82fff404 	addi	r11,r16,-48
     c40:	2afffa2e 	bgeu	r5,r11,c2c <__alt_mem_Flash_flash_data+0xf4000c2c>
     c44:	483f560e 	bge	r9,zero,9a0 <__alt_mem_Flash_flash_data+0xf40009a0>
     c48:	027fffc4 	movi	r9,-1
     c4c:	003f5406 	br	9a0 <__alt_mem_Flash_flash_data+0xf40009a0>
     c50:	8c402014 	ori	r17,r17,128
     c54:	1805883a 	mov	r2,r3
     c58:	1c000007 	ldb	r16,0(r3)
     c5c:	003f4f06 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
     c60:	1805883a 	mov	r2,r3
     c64:	d8002e15 	stw	zero,184(sp)
     c68:	82fff404 	addi	r11,r16,-48
     c6c:	0019883a 	mov	r12,zero
     c70:	14000007 	ldb	r16,0(r2)
     c74:	630002a4 	muli	r12,r12,10
     c78:	18c00044 	addi	r3,r3,1
     c7c:	1805883a 	mov	r2,r3
     c80:	62d9883a 	add	r12,r12,r11
     c84:	82fff404 	addi	r11,r16,-48
     c88:	2afff92e 	bgeu	r5,r11,c70 <__alt_mem_Flash_flash_data+0xf4000c70>
     c8c:	db002e15 	stw	r12,184(sp)
     c90:	003f4306 	br	9a0 <__alt_mem_Flash_flash_data+0xf40009a0>
     c94:	8c400414 	ori	r17,r17,16
     c98:	d8c02a15 	stw	r3,168(sp)
     c9c:	d9802785 	stb	r6,158(sp)
     ca0:	8880080c 	andi	r2,r17,32
     ca4:	d8c02d17 	ldw	r3,180(sp)
     ca8:	10015a26 	beq	r2,zero,1214 <___vfprintf_internal_r+0xa0c>
     cac:	db002d17 	ldw	r12,180(sp)
     cb0:	18800117 	ldw	r2,4(r3)
     cb4:	1cc00017 	ldw	r19,0(r3)
     cb8:	63000204 	addi	r12,r12,8
     cbc:	db002d15 	stw	r12,180(sp)
     cc0:	1039883a 	mov	fp,r2
     cc4:	10044516 	blt	r2,zero,1ddc <___vfprintf_internal_r+0x15d4>
     cc8:	dd402783 	ldbu	r21,158(sp)
     ccc:	da403215 	stw	r9,200(sp)
     cd0:	00800044 	movi	r2,1
     cd4:	9f06b03a 	or	r3,r19,fp
     cd8:	48000216 	blt	r9,zero,ce4 <___vfprintf_internal_r+0x4dc>
     cdc:	013fdfc4 	movi	r4,-129
     ce0:	8922703a 	and	r17,r17,r4
     ce4:	1802071e 	bne	r3,zero,1504 <___vfprintf_internal_r+0xcfc>
     ce8:	4802fa26 	beq	r9,zero,18d4 <___vfprintf_internal_r+0x10cc>
     cec:	10803fcc 	andi	r2,r2,255
     cf0:	00c00044 	movi	r3,1
     cf4:	10c22926 	beq	r2,r3,159c <___vfprintf_internal_r+0xd94>
     cf8:	00c00084 	movi	r3,2
     cfc:	10c31726 	beq	r2,r3,195c <___vfprintf_internal_r+0x1154>
     d00:	d8c01e04 	addi	r3,sp,120
     d04:	9808d0fa 	srli	r4,r19,3
     d08:	e00a977a 	slli	r5,fp,29
     d0c:	e038d0fa 	srli	fp,fp,3
     d10:	9cc001cc 	andi	r19,r19,7
     d14:	98800c04 	addi	r2,r19,48
     d18:	18ffffc4 	addi	r3,r3,-1
     d1c:	2926b03a 	or	r19,r5,r4
     d20:	18800005 	stb	r2,0(r3)
     d24:	9f08b03a 	or	r4,r19,fp
     d28:	203ff61e 	bne	r4,zero,d04 <__alt_mem_Flash_flash_data+0xf4000d04>
     d2c:	8900004c 	andi	r4,r17,1
     d30:	d8c03115 	stw	r3,196(sp)
     d34:	2003931e 	bne	r4,zero,1b84 <___vfprintf_internal_r+0x137c>
     d38:	dac02817 	ldw	r11,160(sp)
     d3c:	58e5c83a 	sub	r18,r11,r3
     d40:	9005883a 	mov	r2,r18
     d44:	9240010e 	bge	r18,r9,d4c <___vfprintf_internal_r+0x544>
     d48:	4805883a 	mov	r2,r9
     d4c:	d8802b15 	stw	r2,172(sp)
     d50:	d8003415 	stw	zero,208(sp)
     d54:	a8803fcc 	andi	r2,r21,255
     d58:	1080201c 	xori	r2,r2,128
     d5c:	10bfe004 	addi	r2,r2,-128
     d60:	10000326 	beq	r2,zero,d70 <___vfprintf_internal_r+0x568>
     d64:	db002b17 	ldw	r12,172(sp)
     d68:	63000044 	addi	r12,r12,1
     d6c:	db002b15 	stw	r12,172(sp)
     d70:	88c0008c 	andi	r3,r17,2
     d74:	d8c02c15 	stw	r3,176(sp)
     d78:	18000326 	beq	r3,zero,d88 <___vfprintf_internal_r+0x580>
     d7c:	dac02b17 	ldw	r11,172(sp)
     d80:	5ac00084 	addi	r11,r11,2
     d84:	dac02b15 	stw	r11,172(sp)
     d88:	8b00210c 	andi	r12,r17,132
     d8c:	db003015 	stw	r12,192(sp)
     d90:	6001da1e 	bne	r12,zero,14fc <___vfprintf_internal_r+0xcf4>
     d94:	dac02e17 	ldw	r11,184(sp)
     d98:	db002b17 	ldw	r12,172(sp)
     d9c:	5b39c83a 	sub	fp,r11,r12
     da0:	0701d60e 	bge	zero,fp,14fc <___vfprintf_internal_r+0xcf4>
     da4:	02400404 	movi	r9,16
     da8:	d8c02017 	ldw	r3,128(sp)
     dac:	d8801f17 	ldw	r2,124(sp)
     db0:	4f053c0e 	bge	r9,fp,22a4 <___vfprintf_internal_r+0x1a9c>
     db4:	014000b4 	movhi	r5,2
     db8:	2965a884 	addi	r5,r5,-26974
     dbc:	d9403615 	stw	r5,216(sp)
     dc0:	482b883a 	mov	r21,r9
     dc4:	04c001c4 	movi	r19,7
     dc8:	00000306 	br	dd8 <___vfprintf_internal_r+0x5d0>
     dcc:	e73ffc04 	addi	fp,fp,-16
     dd0:	42000204 	addi	r8,r8,8
     dd4:	af00130e 	bge	r21,fp,e24 <___vfprintf_internal_r+0x61c>
     dd8:	02c000b4 	movhi	r11,2
     ddc:	18c00404 	addi	r3,r3,16
     de0:	10800044 	addi	r2,r2,1
     de4:	5ae5a884 	addi	r11,r11,-26974
     de8:	42c00015 	stw	r11,0(r8)
     dec:	45400115 	stw	r21,4(r8)
     df0:	d8c02015 	stw	r3,128(sp)
     df4:	d8801f15 	stw	r2,124(sp)
     df8:	98bff40e 	bge	r19,r2,dcc <__alt_mem_Flash_flash_data+0xf4000dcc>
     dfc:	b009883a 	mov	r4,r22
     e00:	b80b883a 	mov	r5,r23
     e04:	d9801e04 	addi	r6,sp,120
     e08:	0006ea80 	call	6ea8 <__sprint_r>
     e0c:	103f721e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
     e10:	e73ffc04 	addi	fp,fp,-16
     e14:	d8c02017 	ldw	r3,128(sp)
     e18:	d8801f17 	ldw	r2,124(sp)
     e1c:	da000404 	addi	r8,sp,16
     e20:	af3fed16 	blt	r21,fp,dd8 <__alt_mem_Flash_flash_data+0xf4000dd8>
     e24:	db003617 	ldw	r12,216(sp)
     e28:	e0c7883a 	add	r3,fp,r3
     e2c:	10800044 	addi	r2,r2,1
     e30:	43000015 	stw	r12,0(r8)
     e34:	47000115 	stw	fp,4(r8)
     e38:	d8c02015 	stw	r3,128(sp)
     e3c:	d8801f15 	stw	r2,124(sp)
     e40:	010001c4 	movi	r4,7
     e44:	20830e16 	blt	r4,r2,1a80 <___vfprintf_internal_r+0x1278>
     e48:	d8802787 	ldb	r2,158(sp)
     e4c:	42000204 	addi	r8,r8,8
     e50:	10000c26 	beq	r2,zero,e84 <___vfprintf_internal_r+0x67c>
     e54:	d8801f17 	ldw	r2,124(sp)
     e58:	d9002784 	addi	r4,sp,158
     e5c:	18c00044 	addi	r3,r3,1
     e60:	10800044 	addi	r2,r2,1
     e64:	41000015 	stw	r4,0(r8)
     e68:	01000044 	movi	r4,1
     e6c:	41000115 	stw	r4,4(r8)
     e70:	d8c02015 	stw	r3,128(sp)
     e74:	d8801f15 	stw	r2,124(sp)
     e78:	010001c4 	movi	r4,7
     e7c:	2082a716 	blt	r4,r2,191c <___vfprintf_internal_r+0x1114>
     e80:	42000204 	addi	r8,r8,8
     e84:	dac02c17 	ldw	r11,176(sp)
     e88:	58000c26 	beq	r11,zero,ebc <___vfprintf_internal_r+0x6b4>
     e8c:	d8801f17 	ldw	r2,124(sp)
     e90:	d9002704 	addi	r4,sp,156
     e94:	18c00084 	addi	r3,r3,2
     e98:	10800044 	addi	r2,r2,1
     e9c:	41000015 	stw	r4,0(r8)
     ea0:	01000084 	movi	r4,2
     ea4:	41000115 	stw	r4,4(r8)
     ea8:	d8c02015 	stw	r3,128(sp)
     eac:	d8801f15 	stw	r2,124(sp)
     eb0:	010001c4 	movi	r4,7
     eb4:	2082a116 	blt	r4,r2,193c <___vfprintf_internal_r+0x1134>
     eb8:	42000204 	addi	r8,r8,8
     ebc:	db003017 	ldw	r12,192(sp)
     ec0:	00802004 	movi	r2,128
     ec4:	60820326 	beq	r12,r2,16d4 <___vfprintf_internal_r+0xecc>
     ec8:	db003217 	ldw	r12,200(sp)
     ecc:	64abc83a 	sub	r21,r12,r18
     ed0:	0540260e 	bge	zero,r21,f6c <___vfprintf_internal_r+0x764>
     ed4:	07000404 	movi	fp,16
     ed8:	d8801f17 	ldw	r2,124(sp)
     edc:	e544570e 	bge	fp,r21,203c <___vfprintf_internal_r+0x1834>
     ee0:	014000b4 	movhi	r5,2
     ee4:	2965a484 	addi	r5,r5,-26990
     ee8:	d9402c15 	stw	r5,176(sp)
     eec:	04c001c4 	movi	r19,7
     ef0:	00000306 	br	f00 <___vfprintf_internal_r+0x6f8>
     ef4:	ad7ffc04 	addi	r21,r21,-16
     ef8:	42000204 	addi	r8,r8,8
     efc:	e540110e 	bge	fp,r21,f44 <___vfprintf_internal_r+0x73c>
     f00:	18c00404 	addi	r3,r3,16
     f04:	10800044 	addi	r2,r2,1
     f08:	45000015 	stw	r20,0(r8)
     f0c:	47000115 	stw	fp,4(r8)
     f10:	d8c02015 	stw	r3,128(sp)
     f14:	d8801f15 	stw	r2,124(sp)
     f18:	98bff60e 	bge	r19,r2,ef4 <__alt_mem_Flash_flash_data+0xf4000ef4>
     f1c:	b009883a 	mov	r4,r22
     f20:	b80b883a 	mov	r5,r23
     f24:	d9801e04 	addi	r6,sp,120
     f28:	0006ea80 	call	6ea8 <__sprint_r>
     f2c:	103f2a1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
     f30:	ad7ffc04 	addi	r21,r21,-16
     f34:	d8c02017 	ldw	r3,128(sp)
     f38:	d8801f17 	ldw	r2,124(sp)
     f3c:	da000404 	addi	r8,sp,16
     f40:	e57fef16 	blt	fp,r21,f00 <__alt_mem_Flash_flash_data+0xf4000f00>
     f44:	dac02c17 	ldw	r11,176(sp)
     f48:	1d47883a 	add	r3,r3,r21
     f4c:	10800044 	addi	r2,r2,1
     f50:	42c00015 	stw	r11,0(r8)
     f54:	45400115 	stw	r21,4(r8)
     f58:	d8c02015 	stw	r3,128(sp)
     f5c:	d8801f15 	stw	r2,124(sp)
     f60:	010001c4 	movi	r4,7
     f64:	20826516 	blt	r4,r2,18fc <___vfprintf_internal_r+0x10f4>
     f68:	42000204 	addi	r8,r8,8
     f6c:	8880400c 	andi	r2,r17,256
     f70:	1001901e 	bne	r2,zero,15b4 <___vfprintf_internal_r+0xdac>
     f74:	d8801f17 	ldw	r2,124(sp)
     f78:	db003117 	ldw	r12,196(sp)
     f7c:	1c87883a 	add	r3,r3,r18
     f80:	10800044 	addi	r2,r2,1
     f84:	43000015 	stw	r12,0(r8)
     f88:	44800115 	stw	r18,4(r8)
     f8c:	d8c02015 	stw	r3,128(sp)
     f90:	d8801f15 	stw	r2,124(sp)
     f94:	010001c4 	movi	r4,7
     f98:	20824016 	blt	r4,r2,189c <___vfprintf_internal_r+0x1094>
     f9c:	42000204 	addi	r8,r8,8
     fa0:	8c40010c 	andi	r17,r17,4
     fa4:	88003126 	beq	r17,zero,106c <___vfprintf_internal_r+0x864>
     fa8:	db002e17 	ldw	r12,184(sp)
     fac:	dac02b17 	ldw	r11,172(sp)
     fb0:	62e1c83a 	sub	r16,r12,r11
     fb4:	04002d0e 	bge	zero,r16,106c <___vfprintf_internal_r+0x864>
     fb8:	04400404 	movi	r17,16
     fbc:	d8801f17 	ldw	r2,124(sp)
     fc0:	8c05150e 	bge	r17,r16,2418 <___vfprintf_internal_r+0x1c10>
     fc4:	010000b4 	movhi	r4,2
     fc8:	2125a884 	addi	r4,r4,-26974
     fcc:	d9003615 	stw	r4,216(sp)
     fd0:	048001c4 	movi	r18,7
     fd4:	00000306 	br	fe4 <___vfprintf_internal_r+0x7dc>
     fd8:	843ffc04 	addi	r16,r16,-16
     fdc:	42000204 	addi	r8,r8,8
     fe0:	8c00130e 	bge	r17,r16,1030 <___vfprintf_internal_r+0x828>
     fe4:	014000b4 	movhi	r5,2
     fe8:	18c00404 	addi	r3,r3,16
     fec:	10800044 	addi	r2,r2,1
     ff0:	2965a884 	addi	r5,r5,-26974
     ff4:	41400015 	stw	r5,0(r8)
     ff8:	44400115 	stw	r17,4(r8)
     ffc:	d8c02015 	stw	r3,128(sp)
    1000:	d8801f15 	stw	r2,124(sp)
    1004:	90bff40e 	bge	r18,r2,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1008:	b009883a 	mov	r4,r22
    100c:	b80b883a 	mov	r5,r23
    1010:	d9801e04 	addi	r6,sp,120
    1014:	0006ea80 	call	6ea8 <__sprint_r>
    1018:	103eef1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    101c:	843ffc04 	addi	r16,r16,-16
    1020:	d8c02017 	ldw	r3,128(sp)
    1024:	d8801f17 	ldw	r2,124(sp)
    1028:	da000404 	addi	r8,sp,16
    102c:	8c3fed16 	blt	r17,r16,fe4 <__alt_mem_Flash_flash_data+0xf4000fe4>
    1030:	dac03617 	ldw	r11,216(sp)
    1034:	1c07883a 	add	r3,r3,r16
    1038:	10800044 	addi	r2,r2,1
    103c:	42c00015 	stw	r11,0(r8)
    1040:	44000115 	stw	r16,4(r8)
    1044:	d8c02015 	stw	r3,128(sp)
    1048:	d8801f15 	stw	r2,124(sp)
    104c:	010001c4 	movi	r4,7
    1050:	2080060e 	bge	r4,r2,106c <___vfprintf_internal_r+0x864>
    1054:	b009883a 	mov	r4,r22
    1058:	b80b883a 	mov	r5,r23
    105c:	d9801e04 	addi	r6,sp,120
    1060:	0006ea80 	call	6ea8 <__sprint_r>
    1064:	103edc1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1068:	d8c02017 	ldw	r3,128(sp)
    106c:	d8802b17 	ldw	r2,172(sp)
    1070:	db002e17 	ldw	r12,184(sp)
    1074:	1300010e 	bge	r2,r12,107c <___vfprintf_internal_r+0x874>
    1078:	6005883a 	mov	r2,r12
    107c:	dac02f17 	ldw	r11,188(sp)
    1080:	5897883a 	add	r11,r11,r2
    1084:	dac02f15 	stw	r11,188(sp)
    1088:	18020c1e 	bne	r3,zero,18bc <___vfprintf_internal_r+0x10b4>
    108c:	d8001f15 	stw	zero,124(sp)
    1090:	da000404 	addi	r8,sp,16
    1094:	003e1706 	br	8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
    1098:	8c400414 	ori	r17,r17,16
    109c:	d8c02a15 	stw	r3,168(sp)
    10a0:	8880080c 	andi	r2,r17,32
    10a4:	10010126 	beq	r2,zero,14ac <___vfprintf_internal_r+0xca4>
    10a8:	db002d17 	ldw	r12,180(sp)
    10ac:	0005883a 	mov	r2,zero
    10b0:	64c00017 	ldw	r19,0(r12)
    10b4:	67000117 	ldw	fp,4(r12)
    10b8:	63000204 	addi	r12,r12,8
    10bc:	db002d15 	stw	r12,180(sp)
    10c0:	9f06b03a 	or	r3,r19,fp
    10c4:	d8002785 	stb	zero,158(sp)
    10c8:	da403215 	stw	r9,200(sp)
    10cc:	002b883a 	mov	r21,zero
    10d0:	003f0106 	br	cd8 <__alt_mem_Flash_flash_data+0xf4000cd8>
    10d4:	8c400414 	ori	r17,r17,16
    10d8:	d8c02a15 	stw	r3,168(sp)
    10dc:	8880080c 	andi	r2,r17,32
    10e0:	1000e326 	beq	r2,zero,1470 <___vfprintf_internal_r+0xc68>
    10e4:	dac02d17 	ldw	r11,180(sp)
    10e8:	00800044 	movi	r2,1
    10ec:	5cc00017 	ldw	r19,0(r11)
    10f0:	5f000117 	ldw	fp,4(r11)
    10f4:	5ac00204 	addi	r11,r11,8
    10f8:	dac02d15 	stw	r11,180(sp)
    10fc:	9f06b03a 	or	r3,r19,fp
    1100:	003ff006 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1104:	db002d17 	ldw	r12,180(sp)
    1108:	dac02d17 	ldw	r11,180(sp)
    110c:	d8c02a15 	stw	r3,168(sp)
    1110:	63000017 	ldw	r12,0(r12)
    1114:	5ac00117 	ldw	r11,4(r11)
    1118:	d9802785 	stb	r6,158(sp)
    111c:	6009883a 	mov	r4,r12
    1120:	580b883a 	mov	r5,r11
    1124:	db003715 	stw	r12,220(sp)
    1128:	da003f15 	stw	r8,252(sp)
    112c:	da403e15 	stw	r9,248(sp)
    1130:	dac03915 	stw	r11,228(sp)
    1134:	0006ba80 	call	6ba8 <__fpclassifyd>
    1138:	db002d17 	ldw	r12,180(sp)
    113c:	04800044 	movi	r18,1
    1140:	da003f17 	ldw	r8,252(sp)
    1144:	64c00204 	addi	r19,r12,8
    1148:	da403e17 	ldw	r9,248(sp)
    114c:	d9003717 	ldw	r4,220(sp)
    1150:	d9403917 	ldw	r5,228(sp)
    1154:	14832b1e 	bne	r2,r18,1e04 <___vfprintf_internal_r+0x15fc>
    1158:	000d883a 	mov	r6,zero
    115c:	000f883a 	mov	r7,zero
    1160:	000b6340 	call	b634 <__ledf2>
    1164:	da003f17 	ldw	r8,252(sp)
    1168:	1004b716 	blt	r2,zero,2448 <___vfprintf_internal_r+0x1c40>
    116c:	dd402783 	ldbu	r21,158(sp)
    1170:	008011c4 	movi	r2,71
    1174:	14040e0e 	bge	r2,r16,21b0 <___vfprintf_internal_r+0x19a8>
    1178:	00c000b4 	movhi	r3,2
    117c:	18e59504 	addi	r3,r3,-27052
    1180:	d8c03115 	stw	r3,196(sp)
    1184:	02c000c4 	movi	r11,3
    1188:	00bfdfc4 	movi	r2,-129
    118c:	dac02b15 	stw	r11,172(sp)
    1190:	88a2703a 	and	r17,r17,r2
    1194:	dcc02d15 	stw	r19,180(sp)
    1198:	5825883a 	mov	r18,r11
    119c:	d8003215 	stw	zero,200(sp)
    11a0:	d8003415 	stw	zero,208(sp)
    11a4:	003eeb06 	br	d54 <__alt_mem_Flash_flash_data+0xf4000d54>
    11a8:	db002d17 	ldw	r12,180(sp)
    11ac:	00800c04 	movi	r2,48
    11b0:	d8802705 	stb	r2,156(sp)
    11b4:	64c00017 	ldw	r19,0(r12)
    11b8:	00801e04 	movi	r2,120
    11bc:	d8802745 	stb	r2,157(sp)
    11c0:	008000b4 	movhi	r2,2
    11c4:	10a59d04 	addi	r2,r2,-27020
    11c8:	63000104 	addi	r12,r12,4
    11cc:	d8c02a15 	stw	r3,168(sp)
    11d0:	d8803b15 	stw	r2,236(sp)
    11d4:	0039883a 	mov	fp,zero
    11d8:	8c400094 	ori	r17,r17,2
    11dc:	db002d15 	stw	r12,180(sp)
    11e0:	00800084 	movi	r2,2
    11e4:	04001e04 	movi	r16,120
    11e8:	9807883a 	mov	r3,r19
    11ec:	003fb506 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    11f0:	8c400214 	ori	r17,r17,8
    11f4:	1805883a 	mov	r2,r3
    11f8:	1c000007 	ldb	r16,0(r3)
    11fc:	003de706 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1200:	d8c02a15 	stw	r3,168(sp)
    1204:	d9802785 	stb	r6,158(sp)
    1208:	8880080c 	andi	r2,r17,32
    120c:	d8c02d17 	ldw	r3,180(sp)
    1210:	103ea61e 	bne	r2,zero,cac <__alt_mem_Flash_flash_data+0xf4000cac>
    1214:	8880040c 	andi	r2,r17,16
    1218:	1002221e 	bne	r2,zero,1aa4 <___vfprintf_internal_r+0x129c>
    121c:	8880100c 	andi	r2,r17,64
    1220:	10022026 	beq	r2,zero,1aa4 <___vfprintf_internal_r+0x129c>
    1224:	1cc0000f 	ldh	r19,0(r3)
    1228:	db002d17 	ldw	r12,180(sp)
    122c:	9839d7fa 	srai	fp,r19,31
    1230:	63000104 	addi	r12,r12,4
    1234:	db002d15 	stw	r12,180(sp)
    1238:	e005883a 	mov	r2,fp
    123c:	003ea106 	br	cc4 <__alt_mem_Flash_flash_data+0xf4000cc4>
    1240:	8c401014 	ori	r17,r17,64
    1244:	1805883a 	mov	r2,r3
    1248:	1c000007 	ldb	r16,0(r3)
    124c:	003dd306 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1250:	1c000007 	ldb	r16,0(r3)
    1254:	81c3e926 	beq	r16,r7,21fc <___vfprintf_internal_r+0x19f4>
    1258:	8c400414 	ori	r17,r17,16
    125c:	1805883a 	mov	r2,r3
    1260:	003dce06 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1264:	d8c02a15 	stw	r3,168(sp)
    1268:	d9802785 	stb	r6,158(sp)
    126c:	8880080c 	andi	r2,r17,32
    1270:	10034726 	beq	r2,zero,1f90 <___vfprintf_internal_r+0x1788>
    1274:	db002d17 	ldw	r12,180(sp)
    1278:	dac02f17 	ldw	r11,188(sp)
    127c:	60800017 	ldw	r2,0(r12)
    1280:	5807d7fa 	srai	r3,r11,31
    1284:	63000104 	addi	r12,r12,4
    1288:	db002d15 	stw	r12,180(sp)
    128c:	12c00015 	stw	r11,0(r2)
    1290:	10c00115 	stw	r3,4(r2)
    1294:	003d9706 	br	8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
    1298:	030000b4 	movhi	r12,2
    129c:	63259804 	addi	r12,r12,-27040
    12a0:	d8c02a15 	stw	r3,168(sp)
    12a4:	d9802785 	stb	r6,158(sp)
    12a8:	db003b15 	stw	r12,236(sp)
    12ac:	88c0080c 	andi	r3,r17,32
    12b0:	d8802d17 	ldw	r2,180(sp)
    12b4:	18005b26 	beq	r3,zero,1424 <___vfprintf_internal_r+0xc1c>
    12b8:	dac02d17 	ldw	r11,180(sp)
    12bc:	14c00017 	ldw	r19,0(r2)
    12c0:	17000117 	ldw	fp,4(r2)
    12c4:	5ac00204 	addi	r11,r11,8
    12c8:	dac02d15 	stw	r11,180(sp)
    12cc:	8880004c 	andi	r2,r17,1
    12d0:	10022926 	beq	r2,zero,1b78 <___vfprintf_internal_r+0x1370>
    12d4:	9f06b03a 	or	r3,r19,fp
    12d8:	18032b26 	beq	r3,zero,1f88 <___vfprintf_internal_r+0x1780>
    12dc:	00800c04 	movi	r2,48
    12e0:	d8802705 	stb	r2,156(sp)
    12e4:	dc002745 	stb	r16,157(sp)
    12e8:	8c400094 	ori	r17,r17,2
    12ec:	00800084 	movi	r2,2
    12f0:	003f7406 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    12f4:	30803fcc 	andi	r2,r6,255
    12f8:	1080201c 	xori	r2,r2,128
    12fc:	10bfe004 	addi	r2,r2,-128
    1300:	1003351e 	bne	r2,zero,1fd8 <___vfprintf_internal_r+0x17d0>
    1304:	1805883a 	mov	r2,r3
    1308:	01800804 	movi	r6,32
    130c:	1c000007 	ldb	r16,0(r3)
    1310:	003da206 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1314:	dac02d17 	ldw	r11,180(sp)
    1318:	db002d17 	ldw	r12,180(sp)
    131c:	5ac00017 	ldw	r11,0(r11)
    1320:	dac02e15 	stw	r11,184(sp)
    1324:	62c00104 	addi	r11,r12,4
    1328:	db002e17 	ldw	r12,184(sp)
    132c:	6003ad16 	blt	r12,zero,21e4 <___vfprintf_internal_r+0x19dc>
    1330:	dac02d15 	stw	r11,180(sp)
    1334:	1805883a 	mov	r2,r3
    1338:	1c000007 	ldb	r16,0(r3)
    133c:	003d9706 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1340:	1805883a 	mov	r2,r3
    1344:	01800ac4 	movi	r6,43
    1348:	1c000007 	ldb	r16,0(r3)
    134c:	003d9306 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1350:	db002d17 	ldw	r12,180(sp)
    1354:	d8c02a15 	stw	r3,168(sp)
    1358:	00c00044 	movi	r3,1
    135c:	60800017 	ldw	r2,0(r12)
    1360:	63000104 	addi	r12,r12,4
    1364:	d8c02b15 	stw	r3,172(sp)
    1368:	d8002785 	stb	zero,158(sp)
    136c:	d8801405 	stb	r2,80(sp)
    1370:	db002d15 	stw	r12,180(sp)
    1374:	dac01404 	addi	r11,sp,80
    1378:	1825883a 	mov	r18,r3
    137c:	d8003215 	stw	zero,200(sp)
    1380:	d8003415 	stw	zero,208(sp)
    1384:	dac03115 	stw	r11,196(sp)
    1388:	0005883a 	mov	r2,zero
    138c:	003e7806 	br	d70 <__alt_mem_Flash_flash_data+0xf4000d70>
    1390:	dac02d17 	ldw	r11,180(sp)
    1394:	db002d17 	ldw	r12,180(sp)
    1398:	d8c02a15 	stw	r3,168(sp)
    139c:	5ac00017 	ldw	r11,0(r11)
    13a0:	d8002785 	stb	zero,158(sp)
    13a4:	64c00104 	addi	r19,r12,4
    13a8:	dac03115 	stw	r11,196(sp)
    13ac:	5803fe26 	beq	r11,zero,23a8 <___vfprintf_internal_r+0x1ba0>
    13b0:	d9003117 	ldw	r4,196(sp)
    13b4:	4803b416 	blt	r9,zero,2288 <___vfprintf_internal_r+0x1a80>
    13b8:	480d883a 	mov	r6,r9
    13bc:	000b883a 	mov	r5,zero
    13c0:	da003f15 	stw	r8,252(sp)
    13c4:	da403e15 	stw	r9,248(sp)
    13c8:	00058c40 	call	58c4 <memchr>
    13cc:	da003f17 	ldw	r8,252(sp)
    13d0:	da403e17 	ldw	r9,248(sp)
    13d4:	10043026 	beq	r2,zero,2498 <___vfprintf_internal_r+0x1c90>
    13d8:	d8c03117 	ldw	r3,196(sp)
    13dc:	10e5c83a 	sub	r18,r2,r3
    13e0:	4c836b16 	blt	r9,r18,2190 <___vfprintf_internal_r+0x1988>
    13e4:	9005883a 	mov	r2,r18
    13e8:	9003ac16 	blt	r18,zero,229c <___vfprintf_internal_r+0x1a94>
    13ec:	dd402783 	ldbu	r21,158(sp)
    13f0:	d8802b15 	stw	r2,172(sp)
    13f4:	dcc02d15 	stw	r19,180(sp)
    13f8:	d8003215 	stw	zero,200(sp)
    13fc:	d8003415 	stw	zero,208(sp)
    1400:	003e5406 	br	d54 <__alt_mem_Flash_flash_data+0xf4000d54>
    1404:	008000b4 	movhi	r2,2
    1408:	10a59d04 	addi	r2,r2,-27020
    140c:	d8c02a15 	stw	r3,168(sp)
    1410:	d8803b15 	stw	r2,236(sp)
    1414:	d9802785 	stb	r6,158(sp)
    1418:	88c0080c 	andi	r3,r17,32
    141c:	d8802d17 	ldw	r2,180(sp)
    1420:	183fa51e 	bne	r3,zero,12b8 <__alt_mem_Flash_flash_data+0xf40012b8>
    1424:	88c0040c 	andi	r3,r17,16
    1428:	1802ee26 	beq	r3,zero,1fe4 <___vfprintf_internal_r+0x17dc>
    142c:	db002d17 	ldw	r12,180(sp)
    1430:	14c00017 	ldw	r19,0(r2)
    1434:	0039883a 	mov	fp,zero
    1438:	63000104 	addi	r12,r12,4
    143c:	db002d15 	stw	r12,180(sp)
    1440:	003fa206 	br	12cc <__alt_mem_Flash_flash_data+0xf40012cc>
    1444:	8c400054 	ori	r17,r17,1
    1448:	1805883a 	mov	r2,r3
    144c:	1c000007 	ldb	r16,0(r3)
    1450:	003d5206 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1454:	8c400814 	ori	r17,r17,32
    1458:	1805883a 	mov	r2,r3
    145c:	1c000007 	ldb	r16,0(r3)
    1460:	003d4e06 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1464:	d8c02a15 	stw	r3,168(sp)
    1468:	8880080c 	andi	r2,r17,32
    146c:	103f1d1e 	bne	r2,zero,10e4 <__alt_mem_Flash_flash_data+0xf40010e4>
    1470:	8880040c 	andi	r2,r17,16
    1474:	1001b81e 	bne	r2,zero,1b58 <___vfprintf_internal_r+0x1350>
    1478:	8880100c 	andi	r2,r17,64
    147c:	1001b626 	beq	r2,zero,1b58 <___vfprintf_internal_r+0x1350>
    1480:	dac02d17 	ldw	r11,180(sp)
    1484:	0039883a 	mov	fp,zero
    1488:	00800044 	movi	r2,1
    148c:	5cc0000b 	ldhu	r19,0(r11)
    1490:	5ac00104 	addi	r11,r11,4
    1494:	dac02d15 	stw	r11,180(sp)
    1498:	9807883a 	mov	r3,r19
    149c:	003f0906 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    14a0:	d8c02a15 	stw	r3,168(sp)
    14a4:	8880080c 	andi	r2,r17,32
    14a8:	103eff1e 	bne	r2,zero,10a8 <__alt_mem_Flash_flash_data+0xf40010a8>
    14ac:	8880040c 	andi	r2,r17,16
    14b0:	1001a11e 	bne	r2,zero,1b38 <___vfprintf_internal_r+0x1330>
    14b4:	8880100c 	andi	r2,r17,64
    14b8:	10019f26 	beq	r2,zero,1b38 <___vfprintf_internal_r+0x1330>
    14bc:	db002d17 	ldw	r12,180(sp)
    14c0:	0039883a 	mov	fp,zero
    14c4:	0005883a 	mov	r2,zero
    14c8:	64c0000b 	ldhu	r19,0(r12)
    14cc:	63000104 	addi	r12,r12,4
    14d0:	db002d15 	stw	r12,180(sp)
    14d4:	9807883a 	mov	r3,r19
    14d8:	003efa06 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    14dc:	d8c02a15 	stw	r3,168(sp)
    14e0:	d9802785 	stb	r6,158(sp)
    14e4:	803db626 	beq	r16,zero,bc0 <__alt_mem_Flash_flash_data+0xf4000bc0>
    14e8:	00c00044 	movi	r3,1
    14ec:	d8c02b15 	stw	r3,172(sp)
    14f0:	dc001405 	stb	r16,80(sp)
    14f4:	d8002785 	stb	zero,158(sp)
    14f8:	003f9e06 	br	1374 <__alt_mem_Flash_flash_data+0xf4001374>
    14fc:	d8c02017 	ldw	r3,128(sp)
    1500:	003e5306 	br	e50 <__alt_mem_Flash_flash_data+0xf4000e50>
    1504:	10803fcc 	andi	r2,r2,255
    1508:	00c00044 	movi	r3,1
    150c:	10fdfa1e 	bne	r2,r3,cf8 <__alt_mem_Flash_flash_data+0xf4000cf8>
    1510:	e000021e 	bne	fp,zero,151c <___vfprintf_internal_r+0xd14>
    1514:	00800244 	movi	r2,9
    1518:	14c0202e 	bgeu	r2,r19,159c <___vfprintf_internal_r+0xd94>
    151c:	dc002b15 	stw	r16,172(sp)
    1520:	dc402c15 	stw	r17,176(sp)
    1524:	9821883a 	mov	r16,r19
    1528:	e023883a 	mov	r17,fp
    152c:	dc801e04 	addi	r18,sp,120
    1530:	4827883a 	mov	r19,r9
    1534:	4039883a 	mov	fp,r8
    1538:	8009883a 	mov	r4,r16
    153c:	880b883a 	mov	r5,r17
    1540:	01800284 	movi	r6,10
    1544:	000f883a 	mov	r7,zero
    1548:	0009cac0 	call	9cac <__umoddi3>
    154c:	10800c04 	addi	r2,r2,48
    1550:	94bfffc4 	addi	r18,r18,-1
    1554:	8009883a 	mov	r4,r16
    1558:	880b883a 	mov	r5,r17
    155c:	01800284 	movi	r6,10
    1560:	000f883a 	mov	r7,zero
    1564:	90800005 	stb	r2,0(r18)
    1568:	00096ec0 	call	96ec <__udivdi3>
    156c:	1021883a 	mov	r16,r2
    1570:	10c4b03a 	or	r2,r2,r3
    1574:	1823883a 	mov	r17,r3
    1578:	103fef1e 	bne	r2,zero,1538 <__alt_mem_Flash_flash_data+0xf4001538>
    157c:	dac02817 	ldw	r11,160(sp)
    1580:	dc803115 	stw	r18,196(sp)
    1584:	dc002b17 	ldw	r16,172(sp)
    1588:	dc402c17 	ldw	r17,176(sp)
    158c:	9813883a 	mov	r9,r19
    1590:	e011883a 	mov	r8,fp
    1594:	5ca5c83a 	sub	r18,r11,r18
    1598:	003de906 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    159c:	9cc00c04 	addi	r19,r19,48
    15a0:	d8c01dc4 	addi	r3,sp,119
    15a4:	dcc01dc5 	stb	r19,119(sp)
    15a8:	dc803c17 	ldw	r18,240(sp)
    15ac:	d8c03115 	stw	r3,196(sp)
    15b0:	003de306 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    15b4:	00801944 	movi	r2,101
    15b8:	1400710e 	bge	r2,r16,1780 <___vfprintf_internal_r+0xf78>
    15bc:	d9003717 	ldw	r4,220(sp)
    15c0:	d9403917 	ldw	r5,228(sp)
    15c4:	000d883a 	mov	r6,zero
    15c8:	000f883a 	mov	r7,zero
    15cc:	d8c03d15 	stw	r3,244(sp)
    15d0:	da003f15 	stw	r8,252(sp)
    15d4:	000b4d00 	call	b4d0 <__eqdf2>
    15d8:	d8c03d17 	ldw	r3,244(sp)
    15dc:	da003f17 	ldw	r8,252(sp)
    15e0:	1000ef1e 	bne	r2,zero,19a0 <___vfprintf_internal_r+0x1198>
    15e4:	d8801f17 	ldw	r2,124(sp)
    15e8:	010000b4 	movhi	r4,2
    15ec:	2125a404 	addi	r4,r4,-26992
    15f0:	18c00044 	addi	r3,r3,1
    15f4:	10800044 	addi	r2,r2,1
    15f8:	41000015 	stw	r4,0(r8)
    15fc:	01000044 	movi	r4,1
    1600:	41000115 	stw	r4,4(r8)
    1604:	d8c02015 	stw	r3,128(sp)
    1608:	d8801f15 	stw	r2,124(sp)
    160c:	010001c4 	movi	r4,7
    1610:	20828e16 	blt	r4,r2,204c <___vfprintf_internal_r+0x1844>
    1614:	42000204 	addi	r8,r8,8
    1618:	d8802617 	ldw	r2,152(sp)
    161c:	dac03317 	ldw	r11,204(sp)
    1620:	12c00216 	blt	r2,r11,162c <___vfprintf_internal_r+0xe24>
    1624:	8880004c 	andi	r2,r17,1
    1628:	103e5d26 	beq	r2,zero,fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    162c:	db003817 	ldw	r12,224(sp)
    1630:	d8801f17 	ldw	r2,124(sp)
    1634:	dac03517 	ldw	r11,212(sp)
    1638:	1b07883a 	add	r3,r3,r12
    163c:	10800044 	addi	r2,r2,1
    1640:	42c00015 	stw	r11,0(r8)
    1644:	43000115 	stw	r12,4(r8)
    1648:	d8c02015 	stw	r3,128(sp)
    164c:	d8801f15 	stw	r2,124(sp)
    1650:	010001c4 	movi	r4,7
    1654:	2082ed16 	blt	r4,r2,220c <___vfprintf_internal_r+0x1a04>
    1658:	42000204 	addi	r8,r8,8
    165c:	db003317 	ldw	r12,204(sp)
    1660:	643fffc4 	addi	r16,r12,-1
    1664:	043e4e0e 	bge	zero,r16,fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    1668:	04800404 	movi	r18,16
    166c:	d8801f17 	ldw	r2,124(sp)
    1670:	94007e0e 	bge	r18,r16,186c <___vfprintf_internal_r+0x1064>
    1674:	014000b4 	movhi	r5,2
    1678:	2965a484 	addi	r5,r5,-26990
    167c:	d9402c15 	stw	r5,176(sp)
    1680:	054001c4 	movi	r21,7
    1684:	00000306 	br	1694 <___vfprintf_internal_r+0xe8c>
    1688:	42000204 	addi	r8,r8,8
    168c:	843ffc04 	addi	r16,r16,-16
    1690:	9400790e 	bge	r18,r16,1878 <___vfprintf_internal_r+0x1070>
    1694:	18c00404 	addi	r3,r3,16
    1698:	10800044 	addi	r2,r2,1
    169c:	45000015 	stw	r20,0(r8)
    16a0:	44800115 	stw	r18,4(r8)
    16a4:	d8c02015 	stw	r3,128(sp)
    16a8:	d8801f15 	stw	r2,124(sp)
    16ac:	a8bff60e 	bge	r21,r2,1688 <__alt_mem_Flash_flash_data+0xf4001688>
    16b0:	b009883a 	mov	r4,r22
    16b4:	b80b883a 	mov	r5,r23
    16b8:	d9801e04 	addi	r6,sp,120
    16bc:	0006ea80 	call	6ea8 <__sprint_r>
    16c0:	103d451e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    16c4:	d8c02017 	ldw	r3,128(sp)
    16c8:	d8801f17 	ldw	r2,124(sp)
    16cc:	da000404 	addi	r8,sp,16
    16d0:	003fee06 	br	168c <__alt_mem_Flash_flash_data+0xf400168c>
    16d4:	dac02e17 	ldw	r11,184(sp)
    16d8:	db002b17 	ldw	r12,172(sp)
    16dc:	5b2bc83a 	sub	r21,r11,r12
    16e0:	057df90e 	bge	zero,r21,ec8 <__alt_mem_Flash_flash_data+0xf4000ec8>
    16e4:	07000404 	movi	fp,16
    16e8:	d8801f17 	ldw	r2,124(sp)
    16ec:	e543640e 	bge	fp,r21,2480 <___vfprintf_internal_r+0x1c78>
    16f0:	014000b4 	movhi	r5,2
    16f4:	2965a484 	addi	r5,r5,-26990
    16f8:	d9402c15 	stw	r5,176(sp)
    16fc:	04c001c4 	movi	r19,7
    1700:	00000306 	br	1710 <___vfprintf_internal_r+0xf08>
    1704:	ad7ffc04 	addi	r21,r21,-16
    1708:	42000204 	addi	r8,r8,8
    170c:	e540110e 	bge	fp,r21,1754 <___vfprintf_internal_r+0xf4c>
    1710:	18c00404 	addi	r3,r3,16
    1714:	10800044 	addi	r2,r2,1
    1718:	45000015 	stw	r20,0(r8)
    171c:	47000115 	stw	fp,4(r8)
    1720:	d8c02015 	stw	r3,128(sp)
    1724:	d8801f15 	stw	r2,124(sp)
    1728:	98bff60e 	bge	r19,r2,1704 <__alt_mem_Flash_flash_data+0xf4001704>
    172c:	b009883a 	mov	r4,r22
    1730:	b80b883a 	mov	r5,r23
    1734:	d9801e04 	addi	r6,sp,120
    1738:	0006ea80 	call	6ea8 <__sprint_r>
    173c:	103d261e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1740:	ad7ffc04 	addi	r21,r21,-16
    1744:	d8c02017 	ldw	r3,128(sp)
    1748:	d8801f17 	ldw	r2,124(sp)
    174c:	da000404 	addi	r8,sp,16
    1750:	e57fef16 	blt	fp,r21,1710 <__alt_mem_Flash_flash_data+0xf4001710>
    1754:	dac02c17 	ldw	r11,176(sp)
    1758:	1d47883a 	add	r3,r3,r21
    175c:	10800044 	addi	r2,r2,1
    1760:	42c00015 	stw	r11,0(r8)
    1764:	45400115 	stw	r21,4(r8)
    1768:	d8c02015 	stw	r3,128(sp)
    176c:	d8801f15 	stw	r2,124(sp)
    1770:	010001c4 	movi	r4,7
    1774:	20819116 	blt	r4,r2,1dbc <___vfprintf_internal_r+0x15b4>
    1778:	42000204 	addi	r8,r8,8
    177c:	003dd206 	br	ec8 <__alt_mem_Flash_flash_data+0xf4000ec8>
    1780:	db003317 	ldw	r12,204(sp)
    1784:	00800044 	movi	r2,1
    1788:	18c00044 	addi	r3,r3,1
    178c:	1301530e 	bge	r2,r12,1cdc <___vfprintf_internal_r+0x14d4>
    1790:	dc001f17 	ldw	r16,124(sp)
    1794:	dac03117 	ldw	r11,196(sp)
    1798:	00800044 	movi	r2,1
    179c:	84000044 	addi	r16,r16,1
    17a0:	40800115 	stw	r2,4(r8)
    17a4:	42c00015 	stw	r11,0(r8)
    17a8:	d8c02015 	stw	r3,128(sp)
    17ac:	dc001f15 	stw	r16,124(sp)
    17b0:	008001c4 	movi	r2,7
    17b4:	14016b16 	blt	r2,r16,1d64 <___vfprintf_internal_r+0x155c>
    17b8:	42000204 	addi	r8,r8,8
    17bc:	db003817 	ldw	r12,224(sp)
    17c0:	dac03517 	ldw	r11,212(sp)
    17c4:	84000044 	addi	r16,r16,1
    17c8:	1b07883a 	add	r3,r3,r12
    17cc:	42c00015 	stw	r11,0(r8)
    17d0:	43000115 	stw	r12,4(r8)
    17d4:	d8c02015 	stw	r3,128(sp)
    17d8:	dc001f15 	stw	r16,124(sp)
    17dc:	008001c4 	movi	r2,7
    17e0:	14016916 	blt	r2,r16,1d88 <___vfprintf_internal_r+0x1580>
    17e4:	44800204 	addi	r18,r8,8
    17e8:	d9003717 	ldw	r4,220(sp)
    17ec:	d9403917 	ldw	r5,228(sp)
    17f0:	000d883a 	mov	r6,zero
    17f4:	000f883a 	mov	r7,zero
    17f8:	d8c03d15 	stw	r3,244(sp)
    17fc:	000b4d00 	call	b4d0 <__eqdf2>
    1800:	d8c03d17 	ldw	r3,244(sp)
    1804:	db003317 	ldw	r12,204(sp)
    1808:	1000ad26 	beq	r2,zero,1ac0 <___vfprintf_internal_r+0x12b8>
    180c:	dac03117 	ldw	r11,196(sp)
    1810:	60bfffc4 	addi	r2,r12,-1
    1814:	1887883a 	add	r3,r3,r2
    1818:	59000044 	addi	r4,r11,1
    181c:	84000044 	addi	r16,r16,1
    1820:	90800115 	stw	r2,4(r18)
    1824:	91000015 	stw	r4,0(r18)
    1828:	d8c02015 	stw	r3,128(sp)
    182c:	dc001f15 	stw	r16,124(sp)
    1830:	008001c4 	movi	r2,7
    1834:	14014216 	blt	r2,r16,1d40 <___vfprintf_internal_r+0x1538>
    1838:	94800204 	addi	r18,r18,8
    183c:	dac03a17 	ldw	r11,232(sp)
    1840:	dd4022c4 	addi	r21,sp,139
    1844:	84000044 	addi	r16,r16,1
    1848:	1ac7883a 	add	r3,r3,r11
    184c:	95400015 	stw	r21,0(r18)
    1850:	92c00115 	stw	r11,4(r18)
    1854:	d8c02015 	stw	r3,128(sp)
    1858:	dc001f15 	stw	r16,124(sp)
    185c:	008001c4 	movi	r2,7
    1860:	14000e16 	blt	r2,r16,189c <___vfprintf_internal_r+0x1094>
    1864:	92000204 	addi	r8,r18,8
    1868:	003dcd06 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    186c:	010000b4 	movhi	r4,2
    1870:	2125a484 	addi	r4,r4,-26990
    1874:	d9002c15 	stw	r4,176(sp)
    1878:	dac02c17 	ldw	r11,176(sp)
    187c:	1c07883a 	add	r3,r3,r16
    1880:	44000115 	stw	r16,4(r8)
    1884:	42c00015 	stw	r11,0(r8)
    1888:	10800044 	addi	r2,r2,1
    188c:	d8c02015 	stw	r3,128(sp)
    1890:	d8801f15 	stw	r2,124(sp)
    1894:	010001c4 	movi	r4,7
    1898:	20bdc00e 	bge	r4,r2,f9c <__alt_mem_Flash_flash_data+0xf4000f9c>
    189c:	b009883a 	mov	r4,r22
    18a0:	b80b883a 	mov	r5,r23
    18a4:	d9801e04 	addi	r6,sp,120
    18a8:	0006ea80 	call	6ea8 <__sprint_r>
    18ac:	103cca1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    18b0:	d8c02017 	ldw	r3,128(sp)
    18b4:	da000404 	addi	r8,sp,16
    18b8:	003db906 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    18bc:	b009883a 	mov	r4,r22
    18c0:	b80b883a 	mov	r5,r23
    18c4:	d9801e04 	addi	r6,sp,120
    18c8:	0006ea80 	call	6ea8 <__sprint_r>
    18cc:	103def26 	beq	r2,zero,108c <__alt_mem_Flash_flash_data+0xf400108c>
    18d0:	003cc106 	br	bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    18d4:	10803fcc 	andi	r2,r2,255
    18d8:	1000651e 	bne	r2,zero,1a70 <___vfprintf_internal_r+0x1268>
    18dc:	8880004c 	andi	r2,r17,1
    18e0:	10013226 	beq	r2,zero,1dac <___vfprintf_internal_r+0x15a4>
    18e4:	00800c04 	movi	r2,48
    18e8:	d8c01dc4 	addi	r3,sp,119
    18ec:	d8801dc5 	stb	r2,119(sp)
    18f0:	dc803c17 	ldw	r18,240(sp)
    18f4:	d8c03115 	stw	r3,196(sp)
    18f8:	003d1106 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    18fc:	b009883a 	mov	r4,r22
    1900:	b80b883a 	mov	r5,r23
    1904:	d9801e04 	addi	r6,sp,120
    1908:	0006ea80 	call	6ea8 <__sprint_r>
    190c:	103cb21e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1910:	d8c02017 	ldw	r3,128(sp)
    1914:	da000404 	addi	r8,sp,16
    1918:	003d9406 	br	f6c <__alt_mem_Flash_flash_data+0xf4000f6c>
    191c:	b009883a 	mov	r4,r22
    1920:	b80b883a 	mov	r5,r23
    1924:	d9801e04 	addi	r6,sp,120
    1928:	0006ea80 	call	6ea8 <__sprint_r>
    192c:	103caa1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1930:	d8c02017 	ldw	r3,128(sp)
    1934:	da000404 	addi	r8,sp,16
    1938:	003d5206 	br	e84 <__alt_mem_Flash_flash_data+0xf4000e84>
    193c:	b009883a 	mov	r4,r22
    1940:	b80b883a 	mov	r5,r23
    1944:	d9801e04 	addi	r6,sp,120
    1948:	0006ea80 	call	6ea8 <__sprint_r>
    194c:	103ca21e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1950:	d8c02017 	ldw	r3,128(sp)
    1954:	da000404 	addi	r8,sp,16
    1958:	003d5806 	br	ebc <__alt_mem_Flash_flash_data+0xf4000ebc>
    195c:	d9403b17 	ldw	r5,236(sp)
    1960:	d8c01e04 	addi	r3,sp,120
    1964:	988003cc 	andi	r2,r19,15
    1968:	e008973a 	slli	r4,fp,28
    196c:	2885883a 	add	r2,r5,r2
    1970:	9826d13a 	srli	r19,r19,4
    1974:	10800003 	ldbu	r2,0(r2)
    1978:	e038d13a 	srli	fp,fp,4
    197c:	18ffffc4 	addi	r3,r3,-1
    1980:	24e6b03a 	or	r19,r4,r19
    1984:	18800005 	stb	r2,0(r3)
    1988:	9f04b03a 	or	r2,r19,fp
    198c:	103ff51e 	bne	r2,zero,1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1990:	db002817 	ldw	r12,160(sp)
    1994:	d8c03115 	stw	r3,196(sp)
    1998:	60e5c83a 	sub	r18,r12,r3
    199c:	003ce806 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    19a0:	dc002617 	ldw	r16,152(sp)
    19a4:	0401b10e 	bge	zero,r16,206c <___vfprintf_internal_r+0x1864>
    19a8:	db003117 	ldw	r12,196(sp)
    19ac:	dac03317 	ldw	r11,204(sp)
    19b0:	62e1883a 	add	r16,r12,r11
    19b4:	db003417 	ldw	r12,208(sp)
    19b8:	5825883a 	mov	r18,r11
    19bc:	62c0010e 	bge	r12,r11,19c4 <___vfprintf_internal_r+0x11bc>
    19c0:	6025883a 	mov	r18,r12
    19c4:	04800b0e 	bge	zero,r18,19f4 <___vfprintf_internal_r+0x11ec>
    19c8:	d8801f17 	ldw	r2,124(sp)
    19cc:	dac03117 	ldw	r11,196(sp)
    19d0:	1c87883a 	add	r3,r3,r18
    19d4:	10800044 	addi	r2,r2,1
    19d8:	42c00015 	stw	r11,0(r8)
    19dc:	44800115 	stw	r18,4(r8)
    19e0:	d8c02015 	stw	r3,128(sp)
    19e4:	d8801f15 	stw	r2,124(sp)
    19e8:	010001c4 	movi	r4,7
    19ec:	20824f16 	blt	r4,r2,232c <___vfprintf_internal_r+0x1b24>
    19f0:	42000204 	addi	r8,r8,8
    19f4:	90024b16 	blt	r18,zero,2324 <___vfprintf_internal_r+0x1b1c>
    19f8:	db003417 	ldw	r12,208(sp)
    19fc:	64a5c83a 	sub	r18,r12,r18
    1a00:	0480730e 	bge	zero,r18,1bd0 <___vfprintf_internal_r+0x13c8>
    1a04:	05400404 	movi	r21,16
    1a08:	d8801f17 	ldw	r2,124(sp)
    1a0c:	ac817d0e 	bge	r21,r18,2004 <___vfprintf_internal_r+0x17fc>
    1a10:	014000b4 	movhi	r5,2
    1a14:	2965a484 	addi	r5,r5,-26990
    1a18:	d9402c15 	stw	r5,176(sp)
    1a1c:	070001c4 	movi	fp,7
    1a20:	00000306 	br	1a30 <___vfprintf_internal_r+0x1228>
    1a24:	42000204 	addi	r8,r8,8
    1a28:	94bffc04 	addi	r18,r18,-16
    1a2c:	ac81780e 	bge	r21,r18,2010 <___vfprintf_internal_r+0x1808>
    1a30:	18c00404 	addi	r3,r3,16
    1a34:	10800044 	addi	r2,r2,1
    1a38:	45000015 	stw	r20,0(r8)
    1a3c:	45400115 	stw	r21,4(r8)
    1a40:	d8c02015 	stw	r3,128(sp)
    1a44:	d8801f15 	stw	r2,124(sp)
    1a48:	e0bff60e 	bge	fp,r2,1a24 <__alt_mem_Flash_flash_data+0xf4001a24>
    1a4c:	b009883a 	mov	r4,r22
    1a50:	b80b883a 	mov	r5,r23
    1a54:	d9801e04 	addi	r6,sp,120
    1a58:	0006ea80 	call	6ea8 <__sprint_r>
    1a5c:	103c5e1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1a60:	d8c02017 	ldw	r3,128(sp)
    1a64:	d8801f17 	ldw	r2,124(sp)
    1a68:	da000404 	addi	r8,sp,16
    1a6c:	003fee06 	br	1a28 <__alt_mem_Flash_flash_data+0xf4001a28>
    1a70:	dac01e04 	addi	r11,sp,120
    1a74:	0025883a 	mov	r18,zero
    1a78:	dac03115 	stw	r11,196(sp)
    1a7c:	003cb006 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    1a80:	b009883a 	mov	r4,r22
    1a84:	b80b883a 	mov	r5,r23
    1a88:	d9801e04 	addi	r6,sp,120
    1a8c:	0006ea80 	call	6ea8 <__sprint_r>
    1a90:	103c511e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1a94:	d8c02017 	ldw	r3,128(sp)
    1a98:	d8802787 	ldb	r2,158(sp)
    1a9c:	da000404 	addi	r8,sp,16
    1aa0:	003ceb06 	br	e50 <__alt_mem_Flash_flash_data+0xf4000e50>
    1aa4:	1cc00017 	ldw	r19,0(r3)
    1aa8:	dac02d17 	ldw	r11,180(sp)
    1aac:	9839d7fa 	srai	fp,r19,31
    1ab0:	5ac00104 	addi	r11,r11,4
    1ab4:	dac02d15 	stw	r11,180(sp)
    1ab8:	e005883a 	mov	r2,fp
    1abc:	003c8106 	br	cc4 <__alt_mem_Flash_flash_data+0xf4000cc4>
    1ac0:	657fffc4 	addi	r21,r12,-1
    1ac4:	057f5d0e 	bge	zero,r21,183c <__alt_mem_Flash_flash_data+0xf400183c>
    1ac8:	07000404 	movi	fp,16
    1acc:	e540900e 	bge	fp,r21,1d10 <___vfprintf_internal_r+0x1508>
    1ad0:	010000b4 	movhi	r4,2
    1ad4:	2125a484 	addi	r4,r4,-26990
    1ad8:	d9002c15 	stw	r4,176(sp)
    1adc:	01c001c4 	movi	r7,7
    1ae0:	00000306 	br	1af0 <___vfprintf_internal_r+0x12e8>
    1ae4:	94800204 	addi	r18,r18,8
    1ae8:	ad7ffc04 	addi	r21,r21,-16
    1aec:	e5408b0e 	bge	fp,r21,1d1c <___vfprintf_internal_r+0x1514>
    1af0:	18c00404 	addi	r3,r3,16
    1af4:	84000044 	addi	r16,r16,1
    1af8:	95000015 	stw	r20,0(r18)
    1afc:	97000115 	stw	fp,4(r18)
    1b00:	d8c02015 	stw	r3,128(sp)
    1b04:	dc001f15 	stw	r16,124(sp)
    1b08:	3c3ff60e 	bge	r7,r16,1ae4 <__alt_mem_Flash_flash_data+0xf4001ae4>
    1b0c:	b009883a 	mov	r4,r22
    1b10:	b80b883a 	mov	r5,r23
    1b14:	d9801e04 	addi	r6,sp,120
    1b18:	d9c03d15 	stw	r7,244(sp)
    1b1c:	0006ea80 	call	6ea8 <__sprint_r>
    1b20:	d9c03d17 	ldw	r7,244(sp)
    1b24:	103c2c1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1b28:	d8c02017 	ldw	r3,128(sp)
    1b2c:	dc001f17 	ldw	r16,124(sp)
    1b30:	dc800404 	addi	r18,sp,16
    1b34:	003fec06 	br	1ae8 <__alt_mem_Flash_flash_data+0xf4001ae8>
    1b38:	dac02d17 	ldw	r11,180(sp)
    1b3c:	0039883a 	mov	fp,zero
    1b40:	0005883a 	mov	r2,zero
    1b44:	5cc00017 	ldw	r19,0(r11)
    1b48:	5ac00104 	addi	r11,r11,4
    1b4c:	dac02d15 	stw	r11,180(sp)
    1b50:	9807883a 	mov	r3,r19
    1b54:	003d5b06 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1b58:	db002d17 	ldw	r12,180(sp)
    1b5c:	0039883a 	mov	fp,zero
    1b60:	00800044 	movi	r2,1
    1b64:	64c00017 	ldw	r19,0(r12)
    1b68:	63000104 	addi	r12,r12,4
    1b6c:	db002d15 	stw	r12,180(sp)
    1b70:	9807883a 	mov	r3,r19
    1b74:	003d5306 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1b78:	00800084 	movi	r2,2
    1b7c:	9f06b03a 	or	r3,r19,fp
    1b80:	003d5006 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1b84:	10803fcc 	andi	r2,r2,255
    1b88:	1080201c 	xori	r2,r2,128
    1b8c:	10bfe004 	addi	r2,r2,-128
    1b90:	01000c04 	movi	r4,48
    1b94:	1101a526 	beq	r2,r4,222c <___vfprintf_internal_r+0x1a24>
    1b98:	dac03117 	ldw	r11,196(sp)
    1b9c:	db002817 	ldw	r12,160(sp)
    1ba0:	193fffc5 	stb	r4,-1(r3)
    1ba4:	5affffc4 	addi	r11,r11,-1
    1ba8:	dac03115 	stw	r11,196(sp)
    1bac:	62e5c83a 	sub	r18,r12,r11
    1bb0:	003c6306 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    1bb4:	b009883a 	mov	r4,r22
    1bb8:	b80b883a 	mov	r5,r23
    1bbc:	d9801e04 	addi	r6,sp,120
    1bc0:	0006ea80 	call	6ea8 <__sprint_r>
    1bc4:	103c041e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1bc8:	d8c02017 	ldw	r3,128(sp)
    1bcc:	da000404 	addi	r8,sp,16
    1bd0:	db003117 	ldw	r12,196(sp)
    1bd4:	dac03417 	ldw	r11,208(sp)
    1bd8:	d8802617 	ldw	r2,152(sp)
    1bdc:	62e5883a 	add	r18,r12,r11
    1be0:	db003317 	ldw	r12,204(sp)
    1be4:	13000216 	blt	r2,r12,1bf0 <___vfprintf_internal_r+0x13e8>
    1be8:	8900004c 	andi	r4,r17,1
    1bec:	20000c26 	beq	r4,zero,1c20 <___vfprintf_internal_r+0x1418>
    1bf0:	dac03817 	ldw	r11,224(sp)
    1bf4:	d9001f17 	ldw	r4,124(sp)
    1bf8:	db003517 	ldw	r12,212(sp)
    1bfc:	1ac7883a 	add	r3,r3,r11
    1c00:	21000044 	addi	r4,r4,1
    1c04:	43000015 	stw	r12,0(r8)
    1c08:	42c00115 	stw	r11,4(r8)
    1c0c:	d8c02015 	stw	r3,128(sp)
    1c10:	d9001f15 	stw	r4,124(sp)
    1c14:	014001c4 	movi	r5,7
    1c18:	2901cc16 	blt	r5,r4,234c <___vfprintf_internal_r+0x1b44>
    1c1c:	42000204 	addi	r8,r8,8
    1c20:	dac03317 	ldw	r11,204(sp)
    1c24:	8489c83a 	sub	r4,r16,r18
    1c28:	5885c83a 	sub	r2,r11,r2
    1c2c:	1021883a 	mov	r16,r2
    1c30:	2080010e 	bge	r4,r2,1c38 <___vfprintf_internal_r+0x1430>
    1c34:	2021883a 	mov	r16,r4
    1c38:	04000a0e 	bge	zero,r16,1c64 <___vfprintf_internal_r+0x145c>
    1c3c:	d9001f17 	ldw	r4,124(sp)
    1c40:	1c07883a 	add	r3,r3,r16
    1c44:	44800015 	stw	r18,0(r8)
    1c48:	21000044 	addi	r4,r4,1
    1c4c:	44000115 	stw	r16,4(r8)
    1c50:	d8c02015 	stw	r3,128(sp)
    1c54:	d9001f15 	stw	r4,124(sp)
    1c58:	014001c4 	movi	r5,7
    1c5c:	2901e316 	blt	r5,r4,23ec <___vfprintf_internal_r+0x1be4>
    1c60:	42000204 	addi	r8,r8,8
    1c64:	8001df16 	blt	r16,zero,23e4 <___vfprintf_internal_r+0x1bdc>
    1c68:	1421c83a 	sub	r16,r2,r16
    1c6c:	043ccc0e 	bge	zero,r16,fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    1c70:	04800404 	movi	r18,16
    1c74:	d8801f17 	ldw	r2,124(sp)
    1c78:	943efc0e 	bge	r18,r16,186c <__alt_mem_Flash_flash_data+0xf400186c>
    1c7c:	014000b4 	movhi	r5,2
    1c80:	2965a484 	addi	r5,r5,-26990
    1c84:	d9402c15 	stw	r5,176(sp)
    1c88:	054001c4 	movi	r21,7
    1c8c:	00000306 	br	1c9c <___vfprintf_internal_r+0x1494>
    1c90:	42000204 	addi	r8,r8,8
    1c94:	843ffc04 	addi	r16,r16,-16
    1c98:	943ef70e 	bge	r18,r16,1878 <__alt_mem_Flash_flash_data+0xf4001878>
    1c9c:	18c00404 	addi	r3,r3,16
    1ca0:	10800044 	addi	r2,r2,1
    1ca4:	45000015 	stw	r20,0(r8)
    1ca8:	44800115 	stw	r18,4(r8)
    1cac:	d8c02015 	stw	r3,128(sp)
    1cb0:	d8801f15 	stw	r2,124(sp)
    1cb4:	a8bff60e 	bge	r21,r2,1c90 <__alt_mem_Flash_flash_data+0xf4001c90>
    1cb8:	b009883a 	mov	r4,r22
    1cbc:	b80b883a 	mov	r5,r23
    1cc0:	d9801e04 	addi	r6,sp,120
    1cc4:	0006ea80 	call	6ea8 <__sprint_r>
    1cc8:	103bc31e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1ccc:	d8c02017 	ldw	r3,128(sp)
    1cd0:	d8801f17 	ldw	r2,124(sp)
    1cd4:	da000404 	addi	r8,sp,16
    1cd8:	003fee06 	br	1c94 <__alt_mem_Flash_flash_data+0xf4001c94>
    1cdc:	8888703a 	and	r4,r17,r2
    1ce0:	203eab1e 	bne	r4,zero,1790 <__alt_mem_Flash_flash_data+0xf4001790>
    1ce4:	dc001f17 	ldw	r16,124(sp)
    1ce8:	db003117 	ldw	r12,196(sp)
    1cec:	40800115 	stw	r2,4(r8)
    1cf0:	84000044 	addi	r16,r16,1
    1cf4:	43000015 	stw	r12,0(r8)
    1cf8:	d8c02015 	stw	r3,128(sp)
    1cfc:	dc001f15 	stw	r16,124(sp)
    1d00:	008001c4 	movi	r2,7
    1d04:	14000e16 	blt	r2,r16,1d40 <___vfprintf_internal_r+0x1538>
    1d08:	44800204 	addi	r18,r8,8
    1d0c:	003ecb06 	br	183c <__alt_mem_Flash_flash_data+0xf400183c>
    1d10:	008000b4 	movhi	r2,2
    1d14:	10a5a484 	addi	r2,r2,-26990
    1d18:	d8802c15 	stw	r2,176(sp)
    1d1c:	dac02c17 	ldw	r11,176(sp)
    1d20:	1d47883a 	add	r3,r3,r21
    1d24:	84000044 	addi	r16,r16,1
    1d28:	92c00015 	stw	r11,0(r18)
    1d2c:	95400115 	stw	r21,4(r18)
    1d30:	d8c02015 	stw	r3,128(sp)
    1d34:	dc001f15 	stw	r16,124(sp)
    1d38:	008001c4 	movi	r2,7
    1d3c:	143ebe0e 	bge	r2,r16,1838 <__alt_mem_Flash_flash_data+0xf4001838>
    1d40:	b009883a 	mov	r4,r22
    1d44:	b80b883a 	mov	r5,r23
    1d48:	d9801e04 	addi	r6,sp,120
    1d4c:	0006ea80 	call	6ea8 <__sprint_r>
    1d50:	103ba11e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1d54:	d8c02017 	ldw	r3,128(sp)
    1d58:	dc001f17 	ldw	r16,124(sp)
    1d5c:	dc800404 	addi	r18,sp,16
    1d60:	003eb606 	br	183c <__alt_mem_Flash_flash_data+0xf400183c>
    1d64:	b009883a 	mov	r4,r22
    1d68:	b80b883a 	mov	r5,r23
    1d6c:	d9801e04 	addi	r6,sp,120
    1d70:	0006ea80 	call	6ea8 <__sprint_r>
    1d74:	103b981e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1d78:	d8c02017 	ldw	r3,128(sp)
    1d7c:	dc001f17 	ldw	r16,124(sp)
    1d80:	da000404 	addi	r8,sp,16
    1d84:	003e8d06 	br	17bc <__alt_mem_Flash_flash_data+0xf40017bc>
    1d88:	b009883a 	mov	r4,r22
    1d8c:	b80b883a 	mov	r5,r23
    1d90:	d9801e04 	addi	r6,sp,120
    1d94:	0006ea80 	call	6ea8 <__sprint_r>
    1d98:	103b8f1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1d9c:	d8c02017 	ldw	r3,128(sp)
    1da0:	dc001f17 	ldw	r16,124(sp)
    1da4:	dc800404 	addi	r18,sp,16
    1da8:	003e8f06 	br	17e8 <__alt_mem_Flash_flash_data+0xf40017e8>
    1dac:	db001e04 	addi	r12,sp,120
    1db0:	0025883a 	mov	r18,zero
    1db4:	db003115 	stw	r12,196(sp)
    1db8:	003be106 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    1dbc:	b009883a 	mov	r4,r22
    1dc0:	b80b883a 	mov	r5,r23
    1dc4:	d9801e04 	addi	r6,sp,120
    1dc8:	0006ea80 	call	6ea8 <__sprint_r>
    1dcc:	103b821e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    1dd0:	d8c02017 	ldw	r3,128(sp)
    1dd4:	da000404 	addi	r8,sp,16
    1dd8:	003c3b06 	br	ec8 <__alt_mem_Flash_flash_data+0xf4000ec8>
    1ddc:	04e7c83a 	sub	r19,zero,r19
    1de0:	9804c03a 	cmpne	r2,r19,zero
    1de4:	0739c83a 	sub	fp,zero,fp
    1de8:	e0b9c83a 	sub	fp,fp,r2
    1dec:	05400b44 	movi	r21,45
    1df0:	dd402785 	stb	r21,158(sp)
    1df4:	da403215 	stw	r9,200(sp)
    1df8:	00800044 	movi	r2,1
    1dfc:	9f06b03a 	or	r3,r19,fp
    1e00:	003bb506 	br	cd8 <__alt_mem_Flash_flash_data+0xf4000cd8>
    1e04:	da003f15 	stw	r8,252(sp)
    1e08:	da403e15 	stw	r9,248(sp)
    1e0c:	0006ba80 	call	6ba8 <__fpclassifyd>
    1e10:	da003f17 	ldw	r8,252(sp)
    1e14:	da403e17 	ldw	r9,248(sp)
    1e18:	1000ce26 	beq	r2,zero,2154 <___vfprintf_internal_r+0x194c>
    1e1c:	057ff7c4 	movi	r21,-33
    1e20:	00bfffc4 	movi	r2,-1
    1e24:	856a703a 	and	r21,r16,r21
    1e28:	4881e826 	beq	r9,r2,25cc <___vfprintf_internal_r+0x1dc4>
    1e2c:	008011c4 	movi	r2,71
    1e30:	a881e326 	beq	r21,r2,25c0 <___vfprintf_internal_r+0x1db8>
    1e34:	db003917 	ldw	r12,228(sp)
    1e38:	8ac04014 	ori	r11,r17,256
    1e3c:	dac02d15 	stw	r11,180(sp)
    1e40:	6001ed16 	blt	r12,zero,25f8 <___vfprintf_internal_r+0x1df0>
    1e44:	dc803917 	ldw	r18,228(sp)
    1e48:	d8002b05 	stb	zero,172(sp)
    1e4c:	00801984 	movi	r2,102
    1e50:	80811826 	beq	r16,r2,22b4 <___vfprintf_internal_r+0x1aac>
    1e54:	00801184 	movi	r2,70
    1e58:	80811626 	beq	r16,r2,22b4 <___vfprintf_internal_r+0x1aac>
    1e5c:	00801144 	movi	r2,69
    1e60:	a881e926 	beq	r21,r2,2608 <___vfprintf_internal_r+0x1e00>
    1e64:	4839883a 	mov	fp,r9
    1e68:	d8802604 	addi	r2,sp,152
    1e6c:	d8800115 	stw	r2,4(sp)
    1e70:	d9403717 	ldw	r5,220(sp)
    1e74:	d8802504 	addi	r2,sp,148
    1e78:	d8800215 	stw	r2,8(sp)
    1e7c:	d8802104 	addi	r2,sp,132
    1e80:	df000015 	stw	fp,0(sp)
    1e84:	d8800315 	stw	r2,12(sp)
    1e88:	b009883a 	mov	r4,r22
    1e8c:	900d883a 	mov	r6,r18
    1e90:	01c00084 	movi	r7,2
    1e94:	da003f15 	stw	r8,252(sp)
    1e98:	da403e15 	stw	r9,248(sp)
    1e9c:	0002b8c0 	call	2b8c <_dtoa_r>
    1ea0:	d8803115 	stw	r2,196(sp)
    1ea4:	008019c4 	movi	r2,103
    1ea8:	da003f17 	ldw	r8,252(sp)
    1eac:	da403e17 	ldw	r9,248(sp)
    1eb0:	80800226 	beq	r16,r2,1ebc <___vfprintf_internal_r+0x16b4>
    1eb4:	008011c4 	movi	r2,71
    1eb8:	8081101e 	bne	r16,r2,22fc <___vfprintf_internal_r+0x1af4>
    1ebc:	8880004c 	andi	r2,r17,1
    1ec0:	1001dd26 	beq	r2,zero,2638 <___vfprintf_internal_r+0x1e30>
    1ec4:	db003117 	ldw	r12,196(sp)
    1ec8:	6715883a 	add	r10,r12,fp
    1ecc:	d9003717 	ldw	r4,220(sp)
    1ed0:	900b883a 	mov	r5,r18
    1ed4:	000d883a 	mov	r6,zero
    1ed8:	000f883a 	mov	r7,zero
    1edc:	da003f15 	stw	r8,252(sp)
    1ee0:	da403e15 	stw	r9,248(sp)
    1ee4:	da803d15 	stw	r10,244(sp)
    1ee8:	000b4d00 	call	b4d0 <__eqdf2>
    1eec:	da003f17 	ldw	r8,252(sp)
    1ef0:	da403e17 	ldw	r9,248(sp)
    1ef4:	da803d17 	ldw	r10,244(sp)
    1ef8:	10016526 	beq	r2,zero,2490 <___vfprintf_internal_r+0x1c88>
    1efc:	d8802117 	ldw	r2,132(sp)
    1f00:	1280062e 	bgeu	r2,r10,1f1c <___vfprintf_internal_r+0x1714>
    1f04:	01000c04 	movi	r4,48
    1f08:	10c00044 	addi	r3,r2,1
    1f0c:	d8c02115 	stw	r3,132(sp)
    1f10:	11000005 	stb	r4,0(r2)
    1f14:	d8802117 	ldw	r2,132(sp)
    1f18:	12bffb36 	bltu	r2,r10,1f08 <__alt_mem_Flash_flash_data+0xf4001f08>
    1f1c:	db003117 	ldw	r12,196(sp)
    1f20:	1305c83a 	sub	r2,r2,r12
    1f24:	d8803315 	stw	r2,204(sp)
    1f28:	008011c4 	movi	r2,71
    1f2c:	a8814d26 	beq	r21,r2,2464 <___vfprintf_internal_r+0x1c5c>
    1f30:	00801944 	movi	r2,101
    1f34:	1402060e 	bge	r2,r16,2750 <___vfprintf_internal_r+0x1f48>
    1f38:	00801984 	movi	r2,102
    1f3c:	8081b426 	beq	r16,r2,2610 <___vfprintf_internal_r+0x1e08>
    1f40:	db002617 	ldw	r12,152(sp)
    1f44:	db003415 	stw	r12,208(sp)
    1f48:	db003417 	ldw	r12,208(sp)
    1f4c:	dac03317 	ldw	r11,204(sp)
    1f50:	62c1a016 	blt	r12,r11,25d4 <___vfprintf_internal_r+0x1dcc>
    1f54:	8c40004c 	andi	r17,r17,1
    1f58:	8801bf1e 	bne	r17,zero,2658 <___vfprintf_internal_r+0x1e50>
    1f5c:	6005883a 	mov	r2,r12
    1f60:	6001b316 	blt	r12,zero,2630 <___vfprintf_internal_r+0x1e28>
    1f64:	dc803417 	ldw	r18,208(sp)
    1f68:	df002b07 	ldb	fp,172(sp)
    1f6c:	e0012e1e 	bne	fp,zero,2428 <___vfprintf_internal_r+0x1c20>
    1f70:	dc402d17 	ldw	r17,180(sp)
    1f74:	dd402783 	ldbu	r21,158(sp)
    1f78:	d8802b15 	stw	r2,172(sp)
    1f7c:	dcc02d15 	stw	r19,180(sp)
    1f80:	d8003215 	stw	zero,200(sp)
    1f84:	003b7306 	br	d54 <__alt_mem_Flash_flash_data+0xf4000d54>
    1f88:	00800084 	movi	r2,2
    1f8c:	003c4d06 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1f90:	8880040c 	andi	r2,r17,16
    1f94:	1000091e 	bne	r2,zero,1fbc <___vfprintf_internal_r+0x17b4>
    1f98:	8c40100c 	andi	r17,r17,64
    1f9c:	88000726 	beq	r17,zero,1fbc <___vfprintf_internal_r+0x17b4>
    1fa0:	db002d17 	ldw	r12,180(sp)
    1fa4:	dac02f17 	ldw	r11,188(sp)
    1fa8:	60800017 	ldw	r2,0(r12)
    1fac:	63000104 	addi	r12,r12,4
    1fb0:	db002d15 	stw	r12,180(sp)
    1fb4:	12c0000d 	sth	r11,0(r2)
    1fb8:	003a4e06 	br	8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
    1fbc:	db002d17 	ldw	r12,180(sp)
    1fc0:	dac02f17 	ldw	r11,188(sp)
    1fc4:	60800017 	ldw	r2,0(r12)
    1fc8:	63000104 	addi	r12,r12,4
    1fcc:	db002d15 	stw	r12,180(sp)
    1fd0:	12c00015 	stw	r11,0(r2)
    1fd4:	003a4706 	br	8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
    1fd8:	1c000007 	ldb	r16,0(r3)
    1fdc:	1805883a 	mov	r2,r3
    1fe0:	003a6e06 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    1fe4:	88c0100c 	andi	r3,r17,64
    1fe8:	18006b26 	beq	r3,zero,2198 <___vfprintf_internal_r+0x1990>
    1fec:	dac02d17 	ldw	r11,180(sp)
    1ff0:	14c0000b 	ldhu	r19,0(r2)
    1ff4:	0039883a 	mov	fp,zero
    1ff8:	5ac00104 	addi	r11,r11,4
    1ffc:	dac02d15 	stw	r11,180(sp)
    2000:	003cb206 	br	12cc <__alt_mem_Flash_flash_data+0xf40012cc>
    2004:	010000b4 	movhi	r4,2
    2008:	2125a484 	addi	r4,r4,-26990
    200c:	d9002c15 	stw	r4,176(sp)
    2010:	dac02c17 	ldw	r11,176(sp)
    2014:	1c87883a 	add	r3,r3,r18
    2018:	10800044 	addi	r2,r2,1
    201c:	42c00015 	stw	r11,0(r8)
    2020:	44800115 	stw	r18,4(r8)
    2024:	d8c02015 	stw	r3,128(sp)
    2028:	d8801f15 	stw	r2,124(sp)
    202c:	010001c4 	movi	r4,7
    2030:	20bee016 	blt	r4,r2,1bb4 <__alt_mem_Flash_flash_data+0xf4001bb4>
    2034:	42000204 	addi	r8,r8,8
    2038:	003ee506 	br	1bd0 <__alt_mem_Flash_flash_data+0xf4001bd0>
    203c:	010000b4 	movhi	r4,2
    2040:	2125a484 	addi	r4,r4,-26990
    2044:	d9002c15 	stw	r4,176(sp)
    2048:	003bbe06 	br	f44 <__alt_mem_Flash_flash_data+0xf4000f44>
    204c:	b009883a 	mov	r4,r22
    2050:	b80b883a 	mov	r5,r23
    2054:	d9801e04 	addi	r6,sp,120
    2058:	0006ea80 	call	6ea8 <__sprint_r>
    205c:	103ade1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2060:	d8c02017 	ldw	r3,128(sp)
    2064:	da000404 	addi	r8,sp,16
    2068:	003d6b06 	br	1618 <__alt_mem_Flash_flash_data+0xf4001618>
    206c:	d8801f17 	ldw	r2,124(sp)
    2070:	030000b4 	movhi	r12,2
    2074:	01000044 	movi	r4,1
    2078:	18c00044 	addi	r3,r3,1
    207c:	10800044 	addi	r2,r2,1
    2080:	6325a404 	addi	r12,r12,-26992
    2084:	41000115 	stw	r4,4(r8)
    2088:	43000015 	stw	r12,0(r8)
    208c:	d8c02015 	stw	r3,128(sp)
    2090:	d8801f15 	stw	r2,124(sp)
    2094:	010001c4 	movi	r4,7
    2098:	20804916 	blt	r4,r2,21c0 <___vfprintf_internal_r+0x19b8>
    209c:	42000204 	addi	r8,r8,8
    20a0:	8000041e 	bne	r16,zero,20b4 <___vfprintf_internal_r+0x18ac>
    20a4:	dac03317 	ldw	r11,204(sp)
    20a8:	5800021e 	bne	r11,zero,20b4 <___vfprintf_internal_r+0x18ac>
    20ac:	8880004c 	andi	r2,r17,1
    20b0:	103bbb26 	beq	r2,zero,fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    20b4:	db003817 	ldw	r12,224(sp)
    20b8:	d8801f17 	ldw	r2,124(sp)
    20bc:	dac03517 	ldw	r11,212(sp)
    20c0:	1b07883a 	add	r3,r3,r12
    20c4:	10800044 	addi	r2,r2,1
    20c8:	42c00015 	stw	r11,0(r8)
    20cc:	43000115 	stw	r12,4(r8)
    20d0:	d8c02015 	stw	r3,128(sp)
    20d4:	d8801f15 	stw	r2,124(sp)
    20d8:	010001c4 	movi	r4,7
    20dc:	20812e16 	blt	r4,r2,2598 <___vfprintf_internal_r+0x1d90>
    20e0:	42000204 	addi	r8,r8,8
    20e4:	0421c83a 	sub	r16,zero,r16
    20e8:	04005c0e 	bge	zero,r16,225c <___vfprintf_internal_r+0x1a54>
    20ec:	04800404 	movi	r18,16
    20f0:	94009f0e 	bge	r18,r16,2370 <___vfprintf_internal_r+0x1b68>
    20f4:	010000b4 	movhi	r4,2
    20f8:	2125a484 	addi	r4,r4,-26990
    20fc:	d9002c15 	stw	r4,176(sp)
    2100:	054001c4 	movi	r21,7
    2104:	00000306 	br	2114 <___vfprintf_internal_r+0x190c>
    2108:	42000204 	addi	r8,r8,8
    210c:	843ffc04 	addi	r16,r16,-16
    2110:	94009a0e 	bge	r18,r16,237c <___vfprintf_internal_r+0x1b74>
    2114:	18c00404 	addi	r3,r3,16
    2118:	10800044 	addi	r2,r2,1
    211c:	45000015 	stw	r20,0(r8)
    2120:	44800115 	stw	r18,4(r8)
    2124:	d8c02015 	stw	r3,128(sp)
    2128:	d8801f15 	stw	r2,124(sp)
    212c:	a8bff60e 	bge	r21,r2,2108 <__alt_mem_Flash_flash_data+0xf4002108>
    2130:	b009883a 	mov	r4,r22
    2134:	b80b883a 	mov	r5,r23
    2138:	d9801e04 	addi	r6,sp,120
    213c:	0006ea80 	call	6ea8 <__sprint_r>
    2140:	103aa51e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2144:	d8c02017 	ldw	r3,128(sp)
    2148:	d8801f17 	ldw	r2,124(sp)
    214c:	da000404 	addi	r8,sp,16
    2150:	003fee06 	br	210c <__alt_mem_Flash_flash_data+0xf400210c>
    2154:	008011c4 	movi	r2,71
    2158:	1400be16 	blt	r2,r16,2454 <___vfprintf_internal_r+0x1c4c>
    215c:	030000b4 	movhi	r12,2
    2160:	63259604 	addi	r12,r12,-27048
    2164:	db003115 	stw	r12,196(sp)
    2168:	00c000c4 	movi	r3,3
    216c:	00bfdfc4 	movi	r2,-129
    2170:	d8c02b15 	stw	r3,172(sp)
    2174:	88a2703a 	and	r17,r17,r2
    2178:	dd402783 	ldbu	r21,158(sp)
    217c:	dcc02d15 	stw	r19,180(sp)
    2180:	1825883a 	mov	r18,r3
    2184:	d8003215 	stw	zero,200(sp)
    2188:	d8003415 	stw	zero,208(sp)
    218c:	003af106 	br	d54 <__alt_mem_Flash_flash_data+0xf4000d54>
    2190:	4825883a 	mov	r18,r9
    2194:	003c9306 	br	13e4 <__alt_mem_Flash_flash_data+0xf40013e4>
    2198:	db002d17 	ldw	r12,180(sp)
    219c:	14c00017 	ldw	r19,0(r2)
    21a0:	0039883a 	mov	fp,zero
    21a4:	63000104 	addi	r12,r12,4
    21a8:	db002d15 	stw	r12,180(sp)
    21ac:	003c4706 	br	12cc <__alt_mem_Flash_flash_data+0xf40012cc>
    21b0:	008000b4 	movhi	r2,2
    21b4:	10a59404 	addi	r2,r2,-27056
    21b8:	d8803115 	stw	r2,196(sp)
    21bc:	003bf106 	br	1184 <__alt_mem_Flash_flash_data+0xf4001184>
    21c0:	b009883a 	mov	r4,r22
    21c4:	b80b883a 	mov	r5,r23
    21c8:	d9801e04 	addi	r6,sp,120
    21cc:	0006ea80 	call	6ea8 <__sprint_r>
    21d0:	103a811e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    21d4:	dc002617 	ldw	r16,152(sp)
    21d8:	d8c02017 	ldw	r3,128(sp)
    21dc:	da000404 	addi	r8,sp,16
    21e0:	003faf06 	br	20a0 <__alt_mem_Flash_flash_data+0xf40020a0>
    21e4:	db002e17 	ldw	r12,184(sp)
    21e8:	1805883a 	mov	r2,r3
    21ec:	dac02d15 	stw	r11,180(sp)
    21f0:	0319c83a 	sub	r12,zero,r12
    21f4:	db002e15 	stw	r12,184(sp)
    21f8:	003a8206 	br	c04 <__alt_mem_Flash_flash_data+0xf4000c04>
    21fc:	18800044 	addi	r2,r3,1
    2200:	8c400814 	ori	r17,r17,32
    2204:	1c000047 	ldb	r16,1(r3)
    2208:	0039e406 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    220c:	b009883a 	mov	r4,r22
    2210:	b80b883a 	mov	r5,r23
    2214:	d9801e04 	addi	r6,sp,120
    2218:	0006ea80 	call	6ea8 <__sprint_r>
    221c:	103a6e1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2220:	d8c02017 	ldw	r3,128(sp)
    2224:	da000404 	addi	r8,sp,16
    2228:	003d0c06 	br	165c <__alt_mem_Flash_flash_data+0xf400165c>
    222c:	db002817 	ldw	r12,160(sp)
    2230:	d8c03117 	ldw	r3,196(sp)
    2234:	60e5c83a 	sub	r18,r12,r3
    2238:	003ac106 	br	d40 <__alt_mem_Flash_flash_data+0xf4000d40>
    223c:	b009883a 	mov	r4,r22
    2240:	b80b883a 	mov	r5,r23
    2244:	d9801e04 	addi	r6,sp,120
    2248:	0006ea80 	call	6ea8 <__sprint_r>
    224c:	103a621e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2250:	d8c02017 	ldw	r3,128(sp)
    2254:	d8801f17 	ldw	r2,124(sp)
    2258:	da000404 	addi	r8,sp,16
    225c:	db003317 	ldw	r12,204(sp)
    2260:	dac03117 	ldw	r11,196(sp)
    2264:	10800044 	addi	r2,r2,1
    2268:	1b07883a 	add	r3,r3,r12
    226c:	42c00015 	stw	r11,0(r8)
    2270:	43000115 	stw	r12,4(r8)
    2274:	d8c02015 	stw	r3,128(sp)
    2278:	d8801f15 	stw	r2,124(sp)
    227c:	010001c4 	movi	r4,7
    2280:	20bb460e 	bge	r4,r2,f9c <__alt_mem_Flash_flash_data+0xf4000f9c>
    2284:	003d8506 	br	189c <__alt_mem_Flash_flash_data+0xf400189c>
    2288:	da003f15 	stw	r8,252(sp)
    228c:	00007700 	call	770 <strlen>
    2290:	1025883a 	mov	r18,r2
    2294:	da003f17 	ldw	r8,252(sp)
    2298:	903c540e 	bge	r18,zero,13ec <__alt_mem_Flash_flash_data+0xf40013ec>
    229c:	0005883a 	mov	r2,zero
    22a0:	003c5206 	br	13ec <__alt_mem_Flash_flash_data+0xf40013ec>
    22a4:	010000b4 	movhi	r4,2
    22a8:	2125a884 	addi	r4,r4,-26974
    22ac:	d9003615 	stw	r4,216(sp)
    22b0:	003adc06 	br	e24 <__alt_mem_Flash_flash_data+0xf4000e24>
    22b4:	d8802604 	addi	r2,sp,152
    22b8:	d8800115 	stw	r2,4(sp)
    22bc:	d9403717 	ldw	r5,220(sp)
    22c0:	d8802504 	addi	r2,sp,148
    22c4:	d8800215 	stw	r2,8(sp)
    22c8:	d8802104 	addi	r2,sp,132
    22cc:	da400015 	stw	r9,0(sp)
    22d0:	d8800315 	stw	r2,12(sp)
    22d4:	b009883a 	mov	r4,r22
    22d8:	900d883a 	mov	r6,r18
    22dc:	01c000c4 	movi	r7,3
    22e0:	da003f15 	stw	r8,252(sp)
    22e4:	da403e15 	stw	r9,248(sp)
    22e8:	0002b8c0 	call	2b8c <_dtoa_r>
    22ec:	da403e17 	ldw	r9,248(sp)
    22f0:	da003f17 	ldw	r8,252(sp)
    22f4:	d8803115 	stw	r2,196(sp)
    22f8:	4839883a 	mov	fp,r9
    22fc:	dac03117 	ldw	r11,196(sp)
    2300:	00801184 	movi	r2,70
    2304:	5f15883a 	add	r10,r11,fp
    2308:	a8bef01e 	bne	r21,r2,1ecc <__alt_mem_Flash_flash_data+0xf4001ecc>
    230c:	59000007 	ldb	r4,0(r11)
    2310:	00800c04 	movi	r2,48
    2314:	2080d526 	beq	r4,r2,266c <___vfprintf_internal_r+0x1e64>
    2318:	d8c02617 	ldw	r3,152(sp)
    231c:	50d5883a 	add	r10,r10,r3
    2320:	003eea06 	br	1ecc <__alt_mem_Flash_flash_data+0xf4001ecc>
    2324:	0025883a 	mov	r18,zero
    2328:	003db306 	br	19f8 <__alt_mem_Flash_flash_data+0xf40019f8>
    232c:	b009883a 	mov	r4,r22
    2330:	b80b883a 	mov	r5,r23
    2334:	d9801e04 	addi	r6,sp,120
    2338:	0006ea80 	call	6ea8 <__sprint_r>
    233c:	103a261e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2340:	d8c02017 	ldw	r3,128(sp)
    2344:	da000404 	addi	r8,sp,16
    2348:	003daa06 	br	19f4 <__alt_mem_Flash_flash_data+0xf40019f4>
    234c:	b009883a 	mov	r4,r22
    2350:	b80b883a 	mov	r5,r23
    2354:	d9801e04 	addi	r6,sp,120
    2358:	0006ea80 	call	6ea8 <__sprint_r>
    235c:	103a1e1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2360:	d8802617 	ldw	r2,152(sp)
    2364:	d8c02017 	ldw	r3,128(sp)
    2368:	da000404 	addi	r8,sp,16
    236c:	003e2c06 	br	1c20 <__alt_mem_Flash_flash_data+0xf4001c20>
    2370:	030000b4 	movhi	r12,2
    2374:	6325a484 	addi	r12,r12,-26990
    2378:	db002c15 	stw	r12,176(sp)
    237c:	dac02c17 	ldw	r11,176(sp)
    2380:	1c07883a 	add	r3,r3,r16
    2384:	10800044 	addi	r2,r2,1
    2388:	42c00015 	stw	r11,0(r8)
    238c:	44000115 	stw	r16,4(r8)
    2390:	d8c02015 	stw	r3,128(sp)
    2394:	d8801f15 	stw	r2,124(sp)
    2398:	010001c4 	movi	r4,7
    239c:	20bfa716 	blt	r4,r2,223c <__alt_mem_Flash_flash_data+0xf400223c>
    23a0:	42000204 	addi	r8,r8,8
    23a4:	003fad06 	br	225c <__alt_mem_Flash_flash_data+0xf400225c>
    23a8:	00800184 	movi	r2,6
    23ac:	1240012e 	bgeu	r2,r9,23b4 <___vfprintf_internal_r+0x1bac>
    23b0:	1013883a 	mov	r9,r2
    23b4:	4825883a 	mov	r18,r9
    23b8:	4805883a 	mov	r2,r9
    23bc:	4800c216 	blt	r9,zero,26c8 <___vfprintf_internal_r+0x1ec0>
    23c0:	d8802b15 	stw	r2,172(sp)
    23c4:	008000b4 	movhi	r2,2
    23c8:	10a5a204 	addi	r2,r2,-27000
    23cc:	d8803115 	stw	r2,196(sp)
    23d0:	dcc02d15 	stw	r19,180(sp)
    23d4:	d8003215 	stw	zero,200(sp)
    23d8:	d8003415 	stw	zero,208(sp)
    23dc:	0005883a 	mov	r2,zero
    23e0:	003a6306 	br	d70 <__alt_mem_Flash_flash_data+0xf4000d70>
    23e4:	0021883a 	mov	r16,zero
    23e8:	003e1f06 	br	1c68 <__alt_mem_Flash_flash_data+0xf4001c68>
    23ec:	b009883a 	mov	r4,r22
    23f0:	b80b883a 	mov	r5,r23
    23f4:	d9801e04 	addi	r6,sp,120
    23f8:	0006ea80 	call	6ea8 <__sprint_r>
    23fc:	1039f61e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    2400:	d8802617 	ldw	r2,152(sp)
    2404:	db003317 	ldw	r12,204(sp)
    2408:	d8c02017 	ldw	r3,128(sp)
    240c:	da000404 	addi	r8,sp,16
    2410:	6085c83a 	sub	r2,r12,r2
    2414:	003e1306 	br	1c64 <__alt_mem_Flash_flash_data+0xf4001c64>
    2418:	030000b4 	movhi	r12,2
    241c:	6325a884 	addi	r12,r12,-26974
    2420:	db003615 	stw	r12,216(sp)
    2424:	003b0206 	br	1030 <__alt_mem_Flash_flash_data+0xf4001030>
    2428:	00c00b44 	movi	r3,45
    242c:	d8802b15 	stw	r2,172(sp)
    2430:	dc402d17 	ldw	r17,180(sp)
    2434:	d8c02785 	stb	r3,158(sp)
    2438:	dcc02d15 	stw	r19,180(sp)
    243c:	d8003215 	stw	zero,200(sp)
    2440:	00800b44 	movi	r2,45
    2444:	003a4706 	br	d64 <__alt_mem_Flash_flash_data+0xf4000d64>
    2448:	05400b44 	movi	r21,45
    244c:	dd402785 	stb	r21,158(sp)
    2450:	003b4706 	br	1170 <__alt_mem_Flash_flash_data+0xf4001170>
    2454:	008000b4 	movhi	r2,2
    2458:	10a59704 	addi	r2,r2,-27044
    245c:	d8803115 	stw	r2,196(sp)
    2460:	003f4106 	br	2168 <__alt_mem_Flash_flash_data+0xf4002168>
    2464:	d8c02617 	ldw	r3,152(sp)
    2468:	00bfff44 	movi	r2,-3
    246c:	18801116 	blt	r3,r2,24b4 <___vfprintf_internal_r+0x1cac>
    2470:	48c01016 	blt	r9,r3,24b4 <___vfprintf_internal_r+0x1cac>
    2474:	d8c03415 	stw	r3,208(sp)
    2478:	040019c4 	movi	r16,103
    247c:	003eb206 	br	1f48 <__alt_mem_Flash_flash_data+0xf4001f48>
    2480:	010000b4 	movhi	r4,2
    2484:	2125a484 	addi	r4,r4,-26990
    2488:	d9002c15 	stw	r4,176(sp)
    248c:	003cb106 	br	1754 <__alt_mem_Flash_flash_data+0xf4001754>
    2490:	5005883a 	mov	r2,r10
    2494:	003ea106 	br	1f1c <__alt_mem_Flash_flash_data+0xf4001f1c>
    2498:	da402b15 	stw	r9,172(sp)
    249c:	dd402783 	ldbu	r21,158(sp)
    24a0:	4825883a 	mov	r18,r9
    24a4:	dcc02d15 	stw	r19,180(sp)
    24a8:	d8003215 	stw	zero,200(sp)
    24ac:	d8003415 	stw	zero,208(sp)
    24b0:	003a2806 	br	d54 <__alt_mem_Flash_flash_data+0xf4000d54>
    24b4:	843fff84 	addi	r16,r16,-2
    24b8:	1f3fffc4 	addi	fp,r3,-1
    24bc:	df002615 	stw	fp,152(sp)
    24c0:	dc0022c5 	stb	r16,139(sp)
    24c4:	e0009816 	blt	fp,zero,2728 <___vfprintf_internal_r+0x1f20>
    24c8:	00800ac4 	movi	r2,43
    24cc:	d8802305 	stb	r2,140(sp)
    24d0:	00800244 	movi	r2,9
    24d4:	1700750e 	bge	r2,fp,26ac <___vfprintf_internal_r+0x1ea4>
    24d8:	dd4022c4 	addi	r21,sp,139
    24dc:	dc002c15 	stw	r16,176(sp)
    24e0:	4025883a 	mov	r18,r8
    24e4:	a821883a 	mov	r16,r21
    24e8:	e009883a 	mov	r4,fp
    24ec:	01400284 	movi	r5,10
    24f0:	000a2fc0 	call	a2fc <__modsi3>
    24f4:	10800c04 	addi	r2,r2,48
    24f8:	843fffc4 	addi	r16,r16,-1
    24fc:	e009883a 	mov	r4,fp
    2500:	01400284 	movi	r5,10
    2504:	80800005 	stb	r2,0(r16)
    2508:	000a2a80 	call	a2a8 <__divsi3>
    250c:	1039883a 	mov	fp,r2
    2510:	00800244 	movi	r2,9
    2514:	173ff416 	blt	r2,fp,24e8 <__alt_mem_Flash_flash_data+0xf40024e8>
    2518:	9011883a 	mov	r8,r18
    251c:	e0800c04 	addi	r2,fp,48
    2520:	8025883a 	mov	r18,r16
    2524:	913fffc4 	addi	r4,r18,-1
    2528:	90bfffc5 	stb	r2,-1(r18)
    252c:	dc002c17 	ldw	r16,176(sp)
    2530:	2540852e 	bgeu	r4,r21,2748 <___vfprintf_internal_r+0x1f40>
    2534:	d9402384 	addi	r5,sp,142
    2538:	2c8bc83a 	sub	r5,r5,r18
    253c:	d8c02344 	addi	r3,sp,141
    2540:	a94b883a 	add	r5,r21,r5
    2544:	00000106 	br	254c <___vfprintf_internal_r+0x1d44>
    2548:	20800003 	ldbu	r2,0(r4)
    254c:	18800005 	stb	r2,0(r3)
    2550:	18c00044 	addi	r3,r3,1
    2554:	21000044 	addi	r4,r4,1
    2558:	197ffb1e 	bne	r3,r5,2548 <__alt_mem_Flash_flash_data+0xf4002548>
    255c:	d8802304 	addi	r2,sp,140
    2560:	1485c83a 	sub	r2,r2,r18
    2564:	d8c02344 	addi	r3,sp,141
    2568:	1885883a 	add	r2,r3,r2
    256c:	dac03317 	ldw	r11,204(sp)
    2570:	156bc83a 	sub	r21,r2,r21
    2574:	dd403a15 	stw	r21,232(sp)
    2578:	00800044 	movi	r2,1
    257c:	5d65883a 	add	r18,r11,r21
    2580:	12c0660e 	bge	r2,r11,271c <___vfprintf_internal_r+0x1f14>
    2584:	94800044 	addi	r18,r18,1
    2588:	9005883a 	mov	r2,r18
    258c:	90006116 	blt	r18,zero,2714 <___vfprintf_internal_r+0x1f0c>
    2590:	d8003415 	stw	zero,208(sp)
    2594:	003e7406 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    2598:	b009883a 	mov	r4,r22
    259c:	b80b883a 	mov	r5,r23
    25a0:	d9801e04 	addi	r6,sp,120
    25a4:	0006ea80 	call	6ea8 <__sprint_r>
    25a8:	10398b1e 	bne	r2,zero,bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>
    25ac:	dc002617 	ldw	r16,152(sp)
    25b0:	d8c02017 	ldw	r3,128(sp)
    25b4:	d8801f17 	ldw	r2,124(sp)
    25b8:	da000404 	addi	r8,sp,16
    25bc:	003ec906 	br	20e4 <__alt_mem_Flash_flash_data+0xf40020e4>
    25c0:	483e1c1e 	bne	r9,zero,1e34 <__alt_mem_Flash_flash_data+0xf4001e34>
    25c4:	9013883a 	mov	r9,r18
    25c8:	003e1a06 	br	1e34 <__alt_mem_Flash_flash_data+0xf4001e34>
    25cc:	02400184 	movi	r9,6
    25d0:	003e1806 	br	1e34 <__alt_mem_Flash_flash_data+0xf4001e34>
    25d4:	d8c03417 	ldw	r3,208(sp)
    25d8:	00c04b0e 	bge	zero,r3,2708 <___vfprintf_internal_r+0x1f00>
    25dc:	04800044 	movi	r18,1
    25e0:	dac03317 	ldw	r11,204(sp)
    25e4:	92e5883a 	add	r18,r18,r11
    25e8:	9005883a 	mov	r2,r18
    25ec:	903e5e0e 	bge	r18,zero,1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    25f0:	0005883a 	mov	r2,zero
    25f4:	003e5c06 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    25f8:	00c00b44 	movi	r3,45
    25fc:	64a0003c 	xorhi	r18,r12,32768
    2600:	d8c02b05 	stb	r3,172(sp)
    2604:	003e1106 	br	1e4c <__alt_mem_Flash_flash_data+0xf4001e4c>
    2608:	4f000044 	addi	fp,r9,1
    260c:	003e1606 	br	1e68 <__alt_mem_Flash_flash_data+0xf4001e68>
    2610:	d8c02617 	ldw	r3,152(sp)
    2614:	d8c03415 	stw	r3,208(sp)
    2618:	00c0350e 	bge	zero,r3,26f0 <___vfprintf_internal_r+0x1ee8>
    261c:	4800081e 	bne	r9,zero,2640 <___vfprintf_internal_r+0x1e38>
    2620:	8c40004c 	andi	r17,r17,1
    2624:	8800061e 	bne	r17,zero,2640 <___vfprintf_internal_r+0x1e38>
    2628:	1805883a 	mov	r2,r3
    262c:	183e4d0e 	bge	r3,zero,1f64 <__alt_mem_Flash_flash_data+0xf4001f64>
    2630:	0005883a 	mov	r2,zero
    2634:	003e4b06 	br	1f64 <__alt_mem_Flash_flash_data+0xf4001f64>
    2638:	d8802117 	ldw	r2,132(sp)
    263c:	003e3706 	br	1f1c <__alt_mem_Flash_flash_data+0xf4001f1c>
    2640:	dac03417 	ldw	r11,208(sp)
    2644:	4a400044 	addi	r9,r9,1
    2648:	5a65883a 	add	r18,r11,r9
    264c:	9005883a 	mov	r2,r18
    2650:	903e450e 	bge	r18,zero,1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    2654:	003fe606 	br	25f0 <__alt_mem_Flash_flash_data+0xf40025f0>
    2658:	db003417 	ldw	r12,208(sp)
    265c:	64800044 	addi	r18,r12,1
    2660:	9005883a 	mov	r2,r18
    2664:	903e400e 	bge	r18,zero,1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    2668:	003fe106 	br	25f0 <__alt_mem_Flash_flash_data+0xf40025f0>
    266c:	d9003717 	ldw	r4,220(sp)
    2670:	900b883a 	mov	r5,r18
    2674:	000d883a 	mov	r6,zero
    2678:	000f883a 	mov	r7,zero
    267c:	da003f15 	stw	r8,252(sp)
    2680:	da403e15 	stw	r9,248(sp)
    2684:	da803d15 	stw	r10,244(sp)
    2688:	000b4d00 	call	b4d0 <__eqdf2>
    268c:	da003f17 	ldw	r8,252(sp)
    2690:	da403e17 	ldw	r9,248(sp)
    2694:	da803d17 	ldw	r10,244(sp)
    2698:	103f1f26 	beq	r2,zero,2318 <__alt_mem_Flash_flash_data+0xf4002318>
    269c:	00800044 	movi	r2,1
    26a0:	1707c83a 	sub	r3,r2,fp
    26a4:	d8c02615 	stw	r3,152(sp)
    26a8:	003f1c06 	br	231c <__alt_mem_Flash_flash_data+0xf400231c>
    26ac:	00800c04 	movi	r2,48
    26b0:	e0c00c04 	addi	r3,fp,48
    26b4:	d8802345 	stb	r2,141(sp)
    26b8:	d8c02385 	stb	r3,142(sp)
    26bc:	d88023c4 	addi	r2,sp,143
    26c0:	dd4022c4 	addi	r21,sp,139
    26c4:	003fa906 	br	256c <__alt_mem_Flash_flash_data+0xf400256c>
    26c8:	0005883a 	mov	r2,zero
    26cc:	003f3c06 	br	23c0 <__alt_mem_Flash_flash_data+0xf40023c0>
    26d0:	dac02d17 	ldw	r11,180(sp)
    26d4:	5a400017 	ldw	r9,0(r11)
    26d8:	5ac00104 	addi	r11,r11,4
    26dc:	dac02d15 	stw	r11,180(sp)
    26e0:	483ec80e 	bge	r9,zero,2204 <__alt_mem_Flash_flash_data+0xf4002204>
    26e4:	027fffc4 	movi	r9,-1
    26e8:	1c000047 	ldb	r16,1(r3)
    26ec:	0038ab06 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>
    26f0:	4800111e 	bne	r9,zero,2738 <___vfprintf_internal_r+0x1f30>
    26f4:	8c40004c 	andi	r17,r17,1
    26f8:	88000f1e 	bne	r17,zero,2738 <___vfprintf_internal_r+0x1f30>
    26fc:	00800044 	movi	r2,1
    2700:	1025883a 	mov	r18,r2
    2704:	003e1806 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    2708:	04800084 	movi	r18,2
    270c:	90e5c83a 	sub	r18,r18,r3
    2710:	003fb306 	br	25e0 <__alt_mem_Flash_flash_data+0xf40025e0>
    2714:	0005883a 	mov	r2,zero
    2718:	003f9d06 	br	2590 <__alt_mem_Flash_flash_data+0xf4002590>
    271c:	88a2703a 	and	r17,r17,r2
    2720:	883f9926 	beq	r17,zero,2588 <__alt_mem_Flash_flash_data+0xf4002588>
    2724:	003f9706 	br	2584 <__alt_mem_Flash_flash_data+0xf4002584>
    2728:	00800b44 	movi	r2,45
    272c:	0739c83a 	sub	fp,zero,fp
    2730:	d8802305 	stb	r2,140(sp)
    2734:	003f6606 	br	24d0 <__alt_mem_Flash_flash_data+0xf40024d0>
    2738:	4c800084 	addi	r18,r9,2
    273c:	9005883a 	mov	r2,r18
    2740:	903e090e 	bge	r18,zero,1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    2744:	003faa06 	br	25f0 <__alt_mem_Flash_flash_data+0xf40025f0>
    2748:	d8802344 	addi	r2,sp,141
    274c:	003f8706 	br	256c <__alt_mem_Flash_flash_data+0xf400256c>
    2750:	d8c02617 	ldw	r3,152(sp)
    2754:	003f5806 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>

00002758 <__vfprintf_internal>:
    2758:	2007883a 	mov	r3,r4
    275c:	010000b4 	movhi	r4,2
    2760:	212fd504 	addi	r4,r4,-16556
    2764:	21000017 	ldw	r4,0(r4)
    2768:	2805883a 	mov	r2,r5
    276c:	300f883a 	mov	r7,r6
    2770:	180b883a 	mov	r5,r3
    2774:	100d883a 	mov	r6,r2
    2778:	00008081 	jmpi	808 <___vfprintf_internal_r>

0000277c <__sbprintf>:
    277c:	2880030b 	ldhu	r2,12(r5)
    2780:	2ac01917 	ldw	r11,100(r5)
    2784:	2a80038b 	ldhu	r10,14(r5)
    2788:	2a400717 	ldw	r9,28(r5)
    278c:	2a000917 	ldw	r8,36(r5)
    2790:	defee204 	addi	sp,sp,-1144
    2794:	00c10004 	movi	r3,1024
    2798:	dc011a15 	stw	r16,1128(sp)
    279c:	10bfff4c 	andi	r2,r2,65533
    27a0:	2821883a 	mov	r16,r5
    27a4:	d8cb883a 	add	r5,sp,r3
    27a8:	dc811c15 	stw	r18,1136(sp)
    27ac:	dc411b15 	stw	r17,1132(sp)
    27b0:	dfc11d15 	stw	ra,1140(sp)
    27b4:	2025883a 	mov	r18,r4
    27b8:	d881030d 	sth	r2,1036(sp)
    27bc:	dac11915 	stw	r11,1124(sp)
    27c0:	da81038d 	sth	r10,1038(sp)
    27c4:	da410715 	stw	r9,1052(sp)
    27c8:	da010915 	stw	r8,1060(sp)
    27cc:	dec10015 	stw	sp,1024(sp)
    27d0:	dec10415 	stw	sp,1040(sp)
    27d4:	d8c10215 	stw	r3,1032(sp)
    27d8:	d8c10515 	stw	r3,1044(sp)
    27dc:	d8010615 	stw	zero,1048(sp)
    27e0:	00008080 	call	808 <___vfprintf_internal_r>
    27e4:	1023883a 	mov	r17,r2
    27e8:	10000416 	blt	r2,zero,27fc <__sbprintf+0x80>
    27ec:	9009883a 	mov	r4,r18
    27f0:	d9410004 	addi	r5,sp,1024
    27f4:	00044bc0 	call	44bc <_fflush_r>
    27f8:	10000d1e 	bne	r2,zero,2830 <__sbprintf+0xb4>
    27fc:	d8c1030b 	ldhu	r3,1036(sp)
    2800:	18c0100c 	andi	r3,r3,64
    2804:	18000326 	beq	r3,zero,2814 <__sbprintf+0x98>
    2808:	8080030b 	ldhu	r2,12(r16)
    280c:	10801014 	ori	r2,r2,64
    2810:	8080030d 	sth	r2,12(r16)
    2814:	8805883a 	mov	r2,r17
    2818:	dfc11d17 	ldw	ra,1140(sp)
    281c:	dc811c17 	ldw	r18,1136(sp)
    2820:	dc411b17 	ldw	r17,1132(sp)
    2824:	dc011a17 	ldw	r16,1128(sp)
    2828:	dec11e04 	addi	sp,sp,1144
    282c:	f800283a 	ret
    2830:	047fffc4 	movi	r17,-1
    2834:	003ff106 	br	27fc <__alt_mem_Flash_flash_data+0xf40027fc>

00002838 <__swsetup_r>:
    2838:	008000b4 	movhi	r2,2
    283c:	defffd04 	addi	sp,sp,-12
    2840:	10afd504 	addi	r2,r2,-16556
    2844:	dc400115 	stw	r17,4(sp)
    2848:	2023883a 	mov	r17,r4
    284c:	11000017 	ldw	r4,0(r2)
    2850:	dc000015 	stw	r16,0(sp)
    2854:	dfc00215 	stw	ra,8(sp)
    2858:	2821883a 	mov	r16,r5
    285c:	20000226 	beq	r4,zero,2868 <__swsetup_r+0x30>
    2860:	20c00e17 	ldw	r3,56(r4)
    2864:	18003126 	beq	r3,zero,292c <__swsetup_r+0xf4>
    2868:	8080030b 	ldhu	r2,12(r16)
    286c:	10c0020c 	andi	r3,r2,8
    2870:	100d883a 	mov	r6,r2
    2874:	18000f26 	beq	r3,zero,28b4 <__swsetup_r+0x7c>
    2878:	80c00417 	ldw	r3,16(r16)
    287c:	18001526 	beq	r3,zero,28d4 <__swsetup_r+0x9c>
    2880:	1100004c 	andi	r4,r2,1
    2884:	20001c1e 	bne	r4,zero,28f8 <__swsetup_r+0xc0>
    2888:	1080008c 	andi	r2,r2,2
    288c:	1000291e 	bne	r2,zero,2934 <__swsetup_r+0xfc>
    2890:	80800517 	ldw	r2,20(r16)
    2894:	80800215 	stw	r2,8(r16)
    2898:	18001c26 	beq	r3,zero,290c <__swsetup_r+0xd4>
    289c:	0005883a 	mov	r2,zero
    28a0:	dfc00217 	ldw	ra,8(sp)
    28a4:	dc400117 	ldw	r17,4(sp)
    28a8:	dc000017 	ldw	r16,0(sp)
    28ac:	dec00304 	addi	sp,sp,12
    28b0:	f800283a 	ret
    28b4:	3080040c 	andi	r2,r6,16
    28b8:	10002e26 	beq	r2,zero,2974 <__swsetup_r+0x13c>
    28bc:	3080010c 	andi	r2,r6,4
    28c0:	10001e1e 	bne	r2,zero,293c <__swsetup_r+0x104>
    28c4:	80c00417 	ldw	r3,16(r16)
    28c8:	30800214 	ori	r2,r6,8
    28cc:	8080030d 	sth	r2,12(r16)
    28d0:	183feb1e 	bne	r3,zero,2880 <__alt_mem_Flash_flash_data+0xf4002880>
    28d4:	1140a00c 	andi	r5,r2,640
    28d8:	01008004 	movi	r4,512
    28dc:	293fe826 	beq	r5,r4,2880 <__alt_mem_Flash_flash_data+0xf4002880>
    28e0:	8809883a 	mov	r4,r17
    28e4:	800b883a 	mov	r5,r16
    28e8:	0004f640 	call	4f64 <__smakebuf_r>
    28ec:	8080030b 	ldhu	r2,12(r16)
    28f0:	80c00417 	ldw	r3,16(r16)
    28f4:	003fe206 	br	2880 <__alt_mem_Flash_flash_data+0xf4002880>
    28f8:	80800517 	ldw	r2,20(r16)
    28fc:	80000215 	stw	zero,8(r16)
    2900:	0085c83a 	sub	r2,zero,r2
    2904:	80800615 	stw	r2,24(r16)
    2908:	183fe41e 	bne	r3,zero,289c <__alt_mem_Flash_flash_data+0xf400289c>
    290c:	80c0030b 	ldhu	r3,12(r16)
    2910:	0005883a 	mov	r2,zero
    2914:	1900200c 	andi	r4,r3,128
    2918:	203fe126 	beq	r4,zero,28a0 <__alt_mem_Flash_flash_data+0xf40028a0>
    291c:	18c01014 	ori	r3,r3,64
    2920:	80c0030d 	sth	r3,12(r16)
    2924:	00bfffc4 	movi	r2,-1
    2928:	003fdd06 	br	28a0 <__alt_mem_Flash_flash_data+0xf40028a0>
    292c:	00048980 	call	4898 <__sinit>
    2930:	003fcd06 	br	2868 <__alt_mem_Flash_flash_data+0xf4002868>
    2934:	0005883a 	mov	r2,zero
    2938:	003fd606 	br	2894 <__alt_mem_Flash_flash_data+0xf4002894>
    293c:	81400c17 	ldw	r5,48(r16)
    2940:	28000626 	beq	r5,zero,295c <__swsetup_r+0x124>
    2944:	80801004 	addi	r2,r16,64
    2948:	28800326 	beq	r5,r2,2958 <__swsetup_r+0x120>
    294c:	8809883a 	mov	r4,r17
    2950:	0004a0c0 	call	4a0c <_free_r>
    2954:	8180030b 	ldhu	r6,12(r16)
    2958:	80000c15 	stw	zero,48(r16)
    295c:	80c00417 	ldw	r3,16(r16)
    2960:	00bff6c4 	movi	r2,-37
    2964:	118c703a 	and	r6,r2,r6
    2968:	80000115 	stw	zero,4(r16)
    296c:	80c00015 	stw	r3,0(r16)
    2970:	003fd506 	br	28c8 <__alt_mem_Flash_flash_data+0xf40028c8>
    2974:	00800244 	movi	r2,9
    2978:	88800015 	stw	r2,0(r17)
    297c:	30801014 	ori	r2,r6,64
    2980:	8080030d 	sth	r2,12(r16)
    2984:	00bfffc4 	movi	r2,-1
    2988:	003fc506 	br	28a0 <__alt_mem_Flash_flash_data+0xf40028a0>

0000298c <quorem>:
    298c:	defff704 	addi	sp,sp,-36
    2990:	dc800215 	stw	r18,8(sp)
    2994:	20800417 	ldw	r2,16(r4)
    2998:	2c800417 	ldw	r18,16(r5)
    299c:	dfc00815 	stw	ra,32(sp)
    29a0:	ddc00715 	stw	r23,28(sp)
    29a4:	dd800615 	stw	r22,24(sp)
    29a8:	dd400515 	stw	r21,20(sp)
    29ac:	dd000415 	stw	r20,16(sp)
    29b0:	dcc00315 	stw	r19,12(sp)
    29b4:	dc400115 	stw	r17,4(sp)
    29b8:	dc000015 	stw	r16,0(sp)
    29bc:	14807116 	blt	r2,r18,2b84 <quorem+0x1f8>
    29c0:	94bfffc4 	addi	r18,r18,-1
    29c4:	94ad883a 	add	r22,r18,r18
    29c8:	b5ad883a 	add	r22,r22,r22
    29cc:	2c400504 	addi	r17,r5,20
    29d0:	8da9883a 	add	r20,r17,r22
    29d4:	25400504 	addi	r21,r4,20
    29d8:	282f883a 	mov	r23,r5
    29dc:	adad883a 	add	r22,r21,r22
    29e0:	a1400017 	ldw	r5,0(r20)
    29e4:	2021883a 	mov	r16,r4
    29e8:	b1000017 	ldw	r4,0(r22)
    29ec:	29400044 	addi	r5,r5,1
    29f0:	000a3580 	call	a358 <__udivsi3>
    29f4:	1027883a 	mov	r19,r2
    29f8:	10002c26 	beq	r2,zero,2aac <quorem+0x120>
    29fc:	a813883a 	mov	r9,r21
    2a00:	8811883a 	mov	r8,r17
    2a04:	0009883a 	mov	r4,zero
    2a08:	000d883a 	mov	r6,zero
    2a0c:	41c00017 	ldw	r7,0(r8)
    2a10:	49400017 	ldw	r5,0(r9)
    2a14:	42000104 	addi	r8,r8,4
    2a18:	38bfffcc 	andi	r2,r7,65535
    2a1c:	14c5383a 	mul	r2,r2,r19
    2a20:	380ed43a 	srli	r7,r7,16
    2a24:	28ffffcc 	andi	r3,r5,65535
    2a28:	2085883a 	add	r2,r4,r2
    2a2c:	1008d43a 	srli	r4,r2,16
    2a30:	3ccf383a 	mul	r7,r7,r19
    2a34:	198d883a 	add	r6,r3,r6
    2a38:	10ffffcc 	andi	r3,r2,65535
    2a3c:	30c7c83a 	sub	r3,r6,r3
    2a40:	280ad43a 	srli	r5,r5,16
    2a44:	21c9883a 	add	r4,r4,r7
    2a48:	180dd43a 	srai	r6,r3,16
    2a4c:	20bfffcc 	andi	r2,r4,65535
    2a50:	288bc83a 	sub	r5,r5,r2
    2a54:	298b883a 	add	r5,r5,r6
    2a58:	280e943a 	slli	r7,r5,16
    2a5c:	18ffffcc 	andi	r3,r3,65535
    2a60:	2008d43a 	srli	r4,r4,16
    2a64:	38ceb03a 	or	r7,r7,r3
    2a68:	49c00015 	stw	r7,0(r9)
    2a6c:	280dd43a 	srai	r6,r5,16
    2a70:	4a400104 	addi	r9,r9,4
    2a74:	a23fe52e 	bgeu	r20,r8,2a0c <__alt_mem_Flash_flash_data+0xf4002a0c>
    2a78:	b0800017 	ldw	r2,0(r22)
    2a7c:	10000b1e 	bne	r2,zero,2aac <quorem+0x120>
    2a80:	b0bfff04 	addi	r2,r22,-4
    2a84:	a880082e 	bgeu	r21,r2,2aa8 <quorem+0x11c>
    2a88:	b0ffff17 	ldw	r3,-4(r22)
    2a8c:	18000326 	beq	r3,zero,2a9c <quorem+0x110>
    2a90:	00000506 	br	2aa8 <quorem+0x11c>
    2a94:	10c00017 	ldw	r3,0(r2)
    2a98:	1800031e 	bne	r3,zero,2aa8 <quorem+0x11c>
    2a9c:	10bfff04 	addi	r2,r2,-4
    2aa0:	94bfffc4 	addi	r18,r18,-1
    2aa4:	a8bffb36 	bltu	r21,r2,2a94 <__alt_mem_Flash_flash_data+0xf4002a94>
    2aa8:	84800415 	stw	r18,16(r16)
    2aac:	8009883a 	mov	r4,r16
    2ab0:	b80b883a 	mov	r5,r23
    2ab4:	00064dc0 	call	64dc <__mcmp>
    2ab8:	10002616 	blt	r2,zero,2b54 <quorem+0x1c8>
    2abc:	9cc00044 	addi	r19,r19,1
    2ac0:	a80d883a 	mov	r6,r21
    2ac4:	000b883a 	mov	r5,zero
    2ac8:	31000017 	ldw	r4,0(r6)
    2acc:	88800017 	ldw	r2,0(r17)
    2ad0:	31800104 	addi	r6,r6,4
    2ad4:	20ffffcc 	andi	r3,r4,65535
    2ad8:	194b883a 	add	r5,r3,r5
    2adc:	10ffffcc 	andi	r3,r2,65535
    2ae0:	28c7c83a 	sub	r3,r5,r3
    2ae4:	1004d43a 	srli	r2,r2,16
    2ae8:	2008d43a 	srli	r4,r4,16
    2aec:	180bd43a 	srai	r5,r3,16
    2af0:	18ffffcc 	andi	r3,r3,65535
    2af4:	2089c83a 	sub	r4,r4,r2
    2af8:	2149883a 	add	r4,r4,r5
    2afc:	2004943a 	slli	r2,r4,16
    2b00:	8c400104 	addi	r17,r17,4
    2b04:	200bd43a 	srai	r5,r4,16
    2b08:	10c6b03a 	or	r3,r2,r3
    2b0c:	30ffff15 	stw	r3,-4(r6)
    2b10:	a47fed2e 	bgeu	r20,r17,2ac8 <__alt_mem_Flash_flash_data+0xf4002ac8>
    2b14:	9485883a 	add	r2,r18,r18
    2b18:	1085883a 	add	r2,r2,r2
    2b1c:	a887883a 	add	r3,r21,r2
    2b20:	18800017 	ldw	r2,0(r3)
    2b24:	10000b1e 	bne	r2,zero,2b54 <quorem+0x1c8>
    2b28:	18bfff04 	addi	r2,r3,-4
    2b2c:	a880082e 	bgeu	r21,r2,2b50 <quorem+0x1c4>
    2b30:	18ffff17 	ldw	r3,-4(r3)
    2b34:	18000326 	beq	r3,zero,2b44 <quorem+0x1b8>
    2b38:	00000506 	br	2b50 <quorem+0x1c4>
    2b3c:	10c00017 	ldw	r3,0(r2)
    2b40:	1800031e 	bne	r3,zero,2b50 <quorem+0x1c4>
    2b44:	10bfff04 	addi	r2,r2,-4
    2b48:	94bfffc4 	addi	r18,r18,-1
    2b4c:	a8bffb36 	bltu	r21,r2,2b3c <__alt_mem_Flash_flash_data+0xf4002b3c>
    2b50:	84800415 	stw	r18,16(r16)
    2b54:	9805883a 	mov	r2,r19
    2b58:	dfc00817 	ldw	ra,32(sp)
    2b5c:	ddc00717 	ldw	r23,28(sp)
    2b60:	dd800617 	ldw	r22,24(sp)
    2b64:	dd400517 	ldw	r21,20(sp)
    2b68:	dd000417 	ldw	r20,16(sp)
    2b6c:	dcc00317 	ldw	r19,12(sp)
    2b70:	dc800217 	ldw	r18,8(sp)
    2b74:	dc400117 	ldw	r17,4(sp)
    2b78:	dc000017 	ldw	r16,0(sp)
    2b7c:	dec00904 	addi	sp,sp,36
    2b80:	f800283a 	ret
    2b84:	0005883a 	mov	r2,zero
    2b88:	003ff306 	br	2b58 <__alt_mem_Flash_flash_data+0xf4002b58>

00002b8c <_dtoa_r>:
    2b8c:	20801017 	ldw	r2,64(r4)
    2b90:	deffde04 	addi	sp,sp,-136
    2b94:	dd401d15 	stw	r21,116(sp)
    2b98:	dcc01b15 	stw	r19,108(sp)
    2b9c:	dc801a15 	stw	r18,104(sp)
    2ba0:	dc401915 	stw	r17,100(sp)
    2ba4:	dc001815 	stw	r16,96(sp)
    2ba8:	dfc02115 	stw	ra,132(sp)
    2bac:	df002015 	stw	fp,128(sp)
    2bb0:	ddc01f15 	stw	r23,124(sp)
    2bb4:	dd801e15 	stw	r22,120(sp)
    2bb8:	dd001c15 	stw	r20,112(sp)
    2bbc:	d9c00315 	stw	r7,12(sp)
    2bc0:	2021883a 	mov	r16,r4
    2bc4:	302b883a 	mov	r21,r6
    2bc8:	2825883a 	mov	r18,r5
    2bcc:	dc402417 	ldw	r17,144(sp)
    2bd0:	3027883a 	mov	r19,r6
    2bd4:	10000826 	beq	r2,zero,2bf8 <_dtoa_r+0x6c>
    2bd8:	21801117 	ldw	r6,68(r4)
    2bdc:	00c00044 	movi	r3,1
    2be0:	100b883a 	mov	r5,r2
    2be4:	1986983a 	sll	r3,r3,r6
    2be8:	11800115 	stw	r6,4(r2)
    2bec:	10c00215 	stw	r3,8(r2)
    2bf0:	0005cb00 	call	5cb0 <_Bfree>
    2bf4:	80001015 	stw	zero,64(r16)
    2bf8:	a8002d16 	blt	r21,zero,2cb0 <_dtoa_r+0x124>
    2bfc:	88000015 	stw	zero,0(r17)
    2c00:	a8dffc2c 	andhi	r3,r21,32752
    2c04:	009ffc34 	movhi	r2,32752
    2c08:	18801b26 	beq	r3,r2,2c78 <_dtoa_r+0xec>
    2c0c:	9009883a 	mov	r4,r18
    2c10:	980b883a 	mov	r5,r19
    2c14:	000d883a 	mov	r6,zero
    2c18:	000f883a 	mov	r7,zero
    2c1c:	000b4d00 	call	b4d0 <__eqdf2>
    2c20:	10002a1e 	bne	r2,zero,2ccc <_dtoa_r+0x140>
    2c24:	d8c02317 	ldw	r3,140(sp)
    2c28:	d9002517 	ldw	r4,148(sp)
    2c2c:	00800044 	movi	r2,1
    2c30:	18800015 	stw	r2,0(r3)
    2c34:	2001a226 	beq	r4,zero,32c0 <_dtoa_r+0x734>
    2c38:	008000b4 	movhi	r2,2
    2c3c:	10a5a444 	addi	r2,r2,-26991
    2c40:	20800015 	stw	r2,0(r4)
    2c44:	10bfffc4 	addi	r2,r2,-1
    2c48:	dfc02117 	ldw	ra,132(sp)
    2c4c:	df002017 	ldw	fp,128(sp)
    2c50:	ddc01f17 	ldw	r23,124(sp)
    2c54:	dd801e17 	ldw	r22,120(sp)
    2c58:	dd401d17 	ldw	r21,116(sp)
    2c5c:	dd001c17 	ldw	r20,112(sp)
    2c60:	dcc01b17 	ldw	r19,108(sp)
    2c64:	dc801a17 	ldw	r18,104(sp)
    2c68:	dc401917 	ldw	r17,100(sp)
    2c6c:	dc001817 	ldw	r16,96(sp)
    2c70:	dec02204 	addi	sp,sp,136
    2c74:	f800283a 	ret
    2c78:	d8c02317 	ldw	r3,140(sp)
    2c7c:	0089c3c4 	movi	r2,9999
    2c80:	18800015 	stw	r2,0(r3)
    2c84:	90017c26 	beq	r18,zero,3278 <_dtoa_r+0x6ec>
    2c88:	008000b4 	movhi	r2,2
    2c8c:	10a5b004 	addi	r2,r2,-26944
    2c90:	d9002517 	ldw	r4,148(sp)
    2c94:	203fec26 	beq	r4,zero,2c48 <__alt_mem_Flash_flash_data+0xf4002c48>
    2c98:	10c000c7 	ldb	r3,3(r2)
    2c9c:	18017d1e 	bne	r3,zero,3294 <_dtoa_r+0x708>
    2ca0:	10c000c4 	addi	r3,r2,3
    2ca4:	d9802517 	ldw	r6,148(sp)
    2ca8:	30c00015 	stw	r3,0(r6)
    2cac:	003fe606 	br	2c48 <__alt_mem_Flash_flash_data+0xf4002c48>
    2cb0:	04e00034 	movhi	r19,32768
    2cb4:	9cffffc4 	addi	r19,r19,-1
    2cb8:	00800044 	movi	r2,1
    2cbc:	ace6703a 	and	r19,r21,r19
    2cc0:	88800015 	stw	r2,0(r17)
    2cc4:	982b883a 	mov	r21,r19
    2cc8:	003fcd06 	br	2c00 <__alt_mem_Flash_flash_data+0xf4002c00>
    2ccc:	d8800204 	addi	r2,sp,8
    2cd0:	a822d53a 	srli	r17,r21,20
    2cd4:	d8800015 	stw	r2,0(sp)
    2cd8:	8009883a 	mov	r4,r16
    2cdc:	900b883a 	mov	r5,r18
    2ce0:	980d883a 	mov	r6,r19
    2ce4:	d9c00104 	addi	r7,sp,4
    2ce8:	00068500 	call	6850 <__d2b>
    2cec:	1039883a 	mov	fp,r2
    2cf0:	88016a1e 	bne	r17,zero,329c <_dtoa_r+0x710>
    2cf4:	dd000217 	ldw	r20,8(sp)
    2cf8:	dc400117 	ldw	r17,4(sp)
    2cfc:	00befbc4 	movi	r2,-1041
    2d00:	a463883a 	add	r17,r20,r17
    2d04:	8882ea16 	blt	r17,r2,38b0 <_dtoa_r+0xd24>
    2d08:	00bf0384 	movi	r2,-1010
    2d0c:	1445c83a 	sub	r2,r2,r17
    2d10:	89010484 	addi	r4,r17,1042
    2d14:	a8aa983a 	sll	r21,r21,r2
    2d18:	9108d83a 	srl	r4,r18,r4
    2d1c:	a908b03a 	or	r4,r21,r4
    2d20:	000c8600 	call	c860 <__floatunsidf>
    2d24:	017f8434 	movhi	r5,65040
    2d28:	01800044 	movi	r6,1
    2d2c:	1009883a 	mov	r4,r2
    2d30:	194b883a 	add	r5,r3,r5
    2d34:	8c7fffc4 	addi	r17,r17,-1
    2d38:	d9800f15 	stw	r6,60(sp)
    2d3c:	000d883a 	mov	r6,zero
    2d40:	01cffe34 	movhi	r7,16376
    2d44:	000be380 	call	be38 <__subdf3>
    2d48:	0198dbf4 	movhi	r6,25455
    2d4c:	01cff4f4 	movhi	r7,16339
    2d50:	1009883a 	mov	r4,r2
    2d54:	180b883a 	mov	r5,r3
    2d58:	3190d844 	addi	r6,r6,17249
    2d5c:	39e1e9c4 	addi	r7,r7,-30809
    2d60:	000b7140 	call	b714 <__muldf3>
    2d64:	01a2d874 	movhi	r6,35681
    2d68:	01cff1f4 	movhi	r7,16327
    2d6c:	180b883a 	mov	r5,r3
    2d70:	31b22cc4 	addi	r6,r6,-14157
    2d74:	39e28a04 	addi	r7,r7,-30168
    2d78:	1009883a 	mov	r4,r2
    2d7c:	000a3680 	call	a368 <__adddf3>
    2d80:	8809883a 	mov	r4,r17
    2d84:	102d883a 	mov	r22,r2
    2d88:	182b883a 	mov	r21,r3
    2d8c:	000c7900 	call	c790 <__floatsidf>
    2d90:	019427f4 	movhi	r6,20639
    2d94:	01cff4f4 	movhi	r7,16339
    2d98:	1009883a 	mov	r4,r2
    2d9c:	180b883a 	mov	r5,r3
    2da0:	319e7ec4 	addi	r6,r6,31227
    2da4:	39d104c4 	addi	r7,r7,17427
    2da8:	000b7140 	call	b714 <__muldf3>
    2dac:	b009883a 	mov	r4,r22
    2db0:	a80b883a 	mov	r5,r21
    2db4:	100d883a 	mov	r6,r2
    2db8:	180f883a 	mov	r7,r3
    2dbc:	000a3680 	call	a368 <__adddf3>
    2dc0:	1009883a 	mov	r4,r2
    2dc4:	180b883a 	mov	r5,r3
    2dc8:	102d883a 	mov	r22,r2
    2dcc:	182b883a 	mov	r21,r3
    2dd0:	000c7080 	call	c708 <__fixdfsi>
    2dd4:	b009883a 	mov	r4,r22
    2dd8:	a80b883a 	mov	r5,r21
    2ddc:	000d883a 	mov	r6,zero
    2de0:	000f883a 	mov	r7,zero
    2de4:	d8800515 	stw	r2,20(sp)
    2de8:	000b6340 	call	b634 <__ledf2>
    2dec:	10023116 	blt	r2,zero,36b4 <_dtoa_r+0xb28>
    2df0:	d8c00517 	ldw	r3,20(sp)
    2df4:	00800584 	movi	r2,22
    2df8:	10c21f36 	bltu	r2,r3,3678 <_dtoa_r+0xaec>
    2dfc:	180490fa 	slli	r2,r3,3
    2e00:	00c000b4 	movhi	r3,2
    2e04:	18e5cc04 	addi	r3,r3,-26832
    2e08:	1885883a 	add	r2,r3,r2
    2e0c:	11000017 	ldw	r4,0(r2)
    2e10:	11400117 	ldw	r5,4(r2)
    2e14:	900d883a 	mov	r6,r18
    2e18:	980f883a 	mov	r7,r19
    2e1c:	000b5540 	call	b554 <__gedf2>
    2e20:	0082a70e 	bge	zero,r2,38c0 <_dtoa_r+0xd34>
    2e24:	d9000517 	ldw	r4,20(sp)
    2e28:	d8000d15 	stw	zero,52(sp)
    2e2c:	213fffc4 	addi	r4,r4,-1
    2e30:	d9000515 	stw	r4,20(sp)
    2e34:	a463c83a 	sub	r17,r20,r17
    2e38:	8dbfffc4 	addi	r22,r17,-1
    2e3c:	b0021916 	blt	r22,zero,36a4 <_dtoa_r+0xb18>
    2e40:	d8000815 	stw	zero,32(sp)
    2e44:	d8800517 	ldw	r2,20(sp)
    2e48:	10020e16 	blt	r2,zero,3684 <_dtoa_r+0xaf8>
    2e4c:	b0ad883a 	add	r22,r22,r2
    2e50:	d8800a15 	stw	r2,40(sp)
    2e54:	d8000915 	stw	zero,36(sp)
    2e58:	d8c00317 	ldw	r3,12(sp)
    2e5c:	00800244 	movi	r2,9
    2e60:	10c11a36 	bltu	r2,r3,32cc <_dtoa_r+0x740>
    2e64:	00800144 	movi	r2,5
    2e68:	10c4fc0e 	bge	r2,r3,425c <_dtoa_r+0x16d0>
    2e6c:	18ffff04 	addi	r3,r3,-4
    2e70:	d8c00315 	stw	r3,12(sp)
    2e74:	0029883a 	mov	r20,zero
    2e78:	d9800317 	ldw	r6,12(sp)
    2e7c:	008000c4 	movi	r2,3
    2e80:	3083bd26 	beq	r6,r2,3d78 <_dtoa_r+0x11ec>
    2e84:	1183670e 	bge	r2,r6,3c24 <_dtoa_r+0x1098>
    2e88:	d8c00317 	ldw	r3,12(sp)
    2e8c:	00800104 	movi	r2,4
    2e90:	1882e726 	beq	r3,r2,3a30 <_dtoa_r+0xea4>
    2e94:	00800144 	movi	r2,5
    2e98:	1884f21e 	bne	r3,r2,4264 <_dtoa_r+0x16d8>
    2e9c:	00800044 	movi	r2,1
    2ea0:	d8800b15 	stw	r2,44(sp)
    2ea4:	d8c02217 	ldw	r3,136(sp)
    2ea8:	d9000517 	ldw	r4,20(sp)
    2eac:	1907883a 	add	r3,r3,r4
    2eb0:	19800044 	addi	r6,r3,1
    2eb4:	d8c00c15 	stw	r3,48(sp)
    2eb8:	d9800615 	stw	r6,24(sp)
    2ebc:	0183c30e 	bge	zero,r6,3dcc <_dtoa_r+0x1240>
    2ec0:	d9800617 	ldw	r6,24(sp)
    2ec4:	3023883a 	mov	r17,r6
    2ec8:	80001115 	stw	zero,68(r16)
    2ecc:	008005c4 	movi	r2,23
    2ed0:	1184f62e 	bgeu	r2,r6,42ac <_dtoa_r+0x1720>
    2ed4:	00c00044 	movi	r3,1
    2ed8:	00800104 	movi	r2,4
    2edc:	1085883a 	add	r2,r2,r2
    2ee0:	11000504 	addi	r4,r2,20
    2ee4:	180b883a 	mov	r5,r3
    2ee8:	18c00044 	addi	r3,r3,1
    2eec:	313ffb2e 	bgeu	r6,r4,2edc <__alt_mem_Flash_flash_data+0xf4002edc>
    2ef0:	81401115 	stw	r5,68(r16)
    2ef4:	8009883a 	mov	r4,r16
    2ef8:	0005c080 	call	5c08 <_Balloc>
    2efc:	d8800715 	stw	r2,28(sp)
    2f00:	80801015 	stw	r2,64(r16)
    2f04:	00800384 	movi	r2,14
    2f08:	1440fd36 	bltu	r2,r17,3300 <_dtoa_r+0x774>
    2f0c:	a000fc26 	beq	r20,zero,3300 <_dtoa_r+0x774>
    2f10:	d8800517 	ldw	r2,20(sp)
    2f14:	0083b90e 	bge	zero,r2,3dfc <_dtoa_r+0x1270>
    2f18:	d8c00517 	ldw	r3,20(sp)
    2f1c:	108003cc 	andi	r2,r2,15
    2f20:	100490fa 	slli	r2,r2,3
    2f24:	182fd13a 	srai	r23,r3,4
    2f28:	00c000b4 	movhi	r3,2
    2f2c:	18e5cc04 	addi	r3,r3,-26832
    2f30:	1885883a 	add	r2,r3,r2
    2f34:	b8c0040c 	andi	r3,r23,16
    2f38:	12c00017 	ldw	r11,0(r2)
    2f3c:	12800117 	ldw	r10,4(r2)
    2f40:	18039726 	beq	r3,zero,3da0 <_dtoa_r+0x1214>
    2f44:	008000b4 	movhi	r2,2
    2f48:	10a5c204 	addi	r2,r2,-26872
    2f4c:	11800817 	ldw	r6,32(r2)
    2f50:	11c00917 	ldw	r7,36(r2)
    2f54:	9009883a 	mov	r4,r18
    2f58:	980b883a 	mov	r5,r19
    2f5c:	da801615 	stw	r10,88(sp)
    2f60:	dac01515 	stw	r11,84(sp)
    2f64:	000ac040 	call	ac04 <__divdf3>
    2f68:	da801617 	ldw	r10,88(sp)
    2f6c:	dac01517 	ldw	r11,84(sp)
    2f70:	bdc003cc 	andi	r23,r23,15
    2f74:	044000c4 	movi	r17,3
    2f78:	d8800e15 	stw	r2,56(sp)
    2f7c:	182b883a 	mov	r21,r3
    2f80:	b8001126 	beq	r23,zero,2fc8 <_dtoa_r+0x43c>
    2f84:	050000b4 	movhi	r20,2
    2f88:	a525c204 	addi	r20,r20,-26872
    2f8c:	5805883a 	mov	r2,r11
    2f90:	5007883a 	mov	r3,r10
    2f94:	b980004c 	andi	r6,r23,1
    2f98:	1009883a 	mov	r4,r2
    2f9c:	b82fd07a 	srai	r23,r23,1
    2fa0:	180b883a 	mov	r5,r3
    2fa4:	30000426 	beq	r6,zero,2fb8 <_dtoa_r+0x42c>
    2fa8:	a1800017 	ldw	r6,0(r20)
    2fac:	a1c00117 	ldw	r7,4(r20)
    2fb0:	8c400044 	addi	r17,r17,1
    2fb4:	000b7140 	call	b714 <__muldf3>
    2fb8:	a5000204 	addi	r20,r20,8
    2fbc:	b83ff51e 	bne	r23,zero,2f94 <__alt_mem_Flash_flash_data+0xf4002f94>
    2fc0:	1017883a 	mov	r11,r2
    2fc4:	1815883a 	mov	r10,r3
    2fc8:	d9000e17 	ldw	r4,56(sp)
    2fcc:	a80b883a 	mov	r5,r21
    2fd0:	580d883a 	mov	r6,r11
    2fd4:	500f883a 	mov	r7,r10
    2fd8:	000ac040 	call	ac04 <__divdf3>
    2fdc:	1029883a 	mov	r20,r2
    2fe0:	182b883a 	mov	r21,r3
    2fe4:	d9800d17 	ldw	r6,52(sp)
    2fe8:	30000626 	beq	r6,zero,3004 <_dtoa_r+0x478>
    2fec:	a009883a 	mov	r4,r20
    2ff0:	a80b883a 	mov	r5,r21
    2ff4:	000d883a 	mov	r6,zero
    2ff8:	01cffc34 	movhi	r7,16368
    2ffc:	000b6340 	call	b634 <__ledf2>
    3000:	10043216 	blt	r2,zero,40cc <_dtoa_r+0x1540>
    3004:	8809883a 	mov	r4,r17
    3008:	000c7900 	call	c790 <__floatsidf>
    300c:	1009883a 	mov	r4,r2
    3010:	180b883a 	mov	r5,r3
    3014:	a00d883a 	mov	r6,r20
    3018:	a80f883a 	mov	r7,r21
    301c:	000b7140 	call	b714 <__muldf3>
    3020:	000d883a 	mov	r6,zero
    3024:	1009883a 	mov	r4,r2
    3028:	180b883a 	mov	r5,r3
    302c:	01d00734 	movhi	r7,16412
    3030:	000a3680 	call	a368 <__adddf3>
    3034:	1023883a 	mov	r17,r2
    3038:	d9800617 	ldw	r6,24(sp)
    303c:	00bf3034 	movhi	r2,64704
    3040:	1885883a 	add	r2,r3,r2
    3044:	d8800e15 	stw	r2,56(sp)
    3048:	30032e26 	beq	r6,zero,3d04 <_dtoa_r+0x1178>
    304c:	d8c00517 	ldw	r3,20(sp)
    3050:	da800617 	ldw	r10,24(sp)
    3054:	d8c01215 	stw	r3,72(sp)
    3058:	d9000b17 	ldw	r4,44(sp)
    305c:	2003b026 	beq	r4,zero,3f20 <_dtoa_r+0x1394>
    3060:	50bfffc4 	addi	r2,r10,-1
    3064:	100490fa 	slli	r2,r2,3
    3068:	00c000b4 	movhi	r3,2
    306c:	18e5cc04 	addi	r3,r3,-26832
    3070:	1885883a 	add	r2,r3,r2
    3074:	11800017 	ldw	r6,0(r2)
    3078:	11c00117 	ldw	r7,4(r2)
    307c:	d8800717 	ldw	r2,28(sp)
    3080:	0009883a 	mov	r4,zero
    3084:	014ff834 	movhi	r5,16352
    3088:	da801615 	stw	r10,88(sp)
    308c:	15c00044 	addi	r23,r2,1
    3090:	000ac040 	call	ac04 <__divdf3>
    3094:	d9c00e17 	ldw	r7,56(sp)
    3098:	880d883a 	mov	r6,r17
    309c:	1009883a 	mov	r4,r2
    30a0:	180b883a 	mov	r5,r3
    30a4:	000be380 	call	be38 <__subdf3>
    30a8:	a80b883a 	mov	r5,r21
    30ac:	a009883a 	mov	r4,r20
    30b0:	d8c01015 	stw	r3,64(sp)
    30b4:	d8800e15 	stw	r2,56(sp)
    30b8:	000c7080 	call	c708 <__fixdfsi>
    30bc:	1009883a 	mov	r4,r2
    30c0:	d8801715 	stw	r2,92(sp)
    30c4:	000c7900 	call	c790 <__floatsidf>
    30c8:	a009883a 	mov	r4,r20
    30cc:	a80b883a 	mov	r5,r21
    30d0:	100d883a 	mov	r6,r2
    30d4:	180f883a 	mov	r7,r3
    30d8:	000be380 	call	be38 <__subdf3>
    30dc:	da001717 	ldw	r8,92(sp)
    30e0:	1829883a 	mov	r20,r3
    30e4:	d8c00717 	ldw	r3,28(sp)
    30e8:	d9000e17 	ldw	r4,56(sp)
    30ec:	d9401017 	ldw	r5,64(sp)
    30f0:	42000c04 	addi	r8,r8,48
    30f4:	1023883a 	mov	r17,r2
    30f8:	1a000005 	stb	r8,0(r3)
    30fc:	880d883a 	mov	r6,r17
    3100:	a00f883a 	mov	r7,r20
    3104:	402b883a 	mov	r21,r8
    3108:	000b5540 	call	b554 <__gedf2>
    310c:	00844516 	blt	zero,r2,4224 <_dtoa_r+0x1698>
    3110:	0009883a 	mov	r4,zero
    3114:	014ffc34 	movhi	r5,16368
    3118:	880d883a 	mov	r6,r17
    311c:	a00f883a 	mov	r7,r20
    3120:	000be380 	call	be38 <__subdf3>
    3124:	d9000e17 	ldw	r4,56(sp)
    3128:	d9401017 	ldw	r5,64(sp)
    312c:	100d883a 	mov	r6,r2
    3130:	180f883a 	mov	r7,r3
    3134:	000b5540 	call	b554 <__gedf2>
    3138:	da801617 	ldw	r10,88(sp)
    313c:	00843616 	blt	zero,r2,4218 <_dtoa_r+0x168c>
    3140:	00800044 	movi	r2,1
    3144:	12806e0e 	bge	r2,r10,3300 <_dtoa_r+0x774>
    3148:	d9000717 	ldw	r4,28(sp)
    314c:	dd801315 	stw	r22,76(sp)
    3150:	dc001115 	stw	r16,68(sp)
    3154:	2295883a 	add	r10,r4,r10
    3158:	dcc01415 	stw	r19,80(sp)
    315c:	502d883a 	mov	r22,r10
    3160:	dcc01017 	ldw	r19,64(sp)
    3164:	b821883a 	mov	r16,r23
    3168:	dc801015 	stw	r18,64(sp)
    316c:	dc800e17 	ldw	r18,56(sp)
    3170:	00000906 	br	3198 <_dtoa_r+0x60c>
    3174:	000be380 	call	be38 <__subdf3>
    3178:	1009883a 	mov	r4,r2
    317c:	180b883a 	mov	r5,r3
    3180:	900d883a 	mov	r6,r18
    3184:	980f883a 	mov	r7,r19
    3188:	000b6340 	call	b634 <__ledf2>
    318c:	10040e16 	blt	r2,zero,41c8 <_dtoa_r+0x163c>
    3190:	b821883a 	mov	r16,r23
    3194:	bd841026 	beq	r23,r22,41d8 <_dtoa_r+0x164c>
    3198:	9009883a 	mov	r4,r18
    319c:	980b883a 	mov	r5,r19
    31a0:	000d883a 	mov	r6,zero
    31a4:	01d00934 	movhi	r7,16420
    31a8:	000b7140 	call	b714 <__muldf3>
    31ac:	000d883a 	mov	r6,zero
    31b0:	01d00934 	movhi	r7,16420
    31b4:	8809883a 	mov	r4,r17
    31b8:	a00b883a 	mov	r5,r20
    31bc:	1025883a 	mov	r18,r2
    31c0:	1827883a 	mov	r19,r3
    31c4:	000b7140 	call	b714 <__muldf3>
    31c8:	180b883a 	mov	r5,r3
    31cc:	1009883a 	mov	r4,r2
    31d0:	1823883a 	mov	r17,r3
    31d4:	1029883a 	mov	r20,r2
    31d8:	000c7080 	call	c708 <__fixdfsi>
    31dc:	1009883a 	mov	r4,r2
    31e0:	102b883a 	mov	r21,r2
    31e4:	000c7900 	call	c790 <__floatsidf>
    31e8:	a009883a 	mov	r4,r20
    31ec:	880b883a 	mov	r5,r17
    31f0:	100d883a 	mov	r6,r2
    31f4:	180f883a 	mov	r7,r3
    31f8:	000be380 	call	be38 <__subdf3>
    31fc:	ad400c04 	addi	r21,r21,48
    3200:	1009883a 	mov	r4,r2
    3204:	180b883a 	mov	r5,r3
    3208:	900d883a 	mov	r6,r18
    320c:	980f883a 	mov	r7,r19
    3210:	85400005 	stb	r21,0(r16)
    3214:	1023883a 	mov	r17,r2
    3218:	1829883a 	mov	r20,r3
    321c:	000b6340 	call	b634 <__ledf2>
    3220:	bdc00044 	addi	r23,r23,1
    3224:	0009883a 	mov	r4,zero
    3228:	014ffc34 	movhi	r5,16368
    322c:	880d883a 	mov	r6,r17
    3230:	a00f883a 	mov	r7,r20
    3234:	103fcf0e 	bge	r2,zero,3174 <__alt_mem_Flash_flash_data+0xf4003174>
    3238:	d9801217 	ldw	r6,72(sp)
    323c:	dc001117 	ldw	r16,68(sp)
    3240:	d9800515 	stw	r6,20(sp)
    3244:	8009883a 	mov	r4,r16
    3248:	e00b883a 	mov	r5,fp
    324c:	0005cb00 	call	5cb0 <_Bfree>
    3250:	d8c00517 	ldw	r3,20(sp)
    3254:	d9002317 	ldw	r4,140(sp)
    3258:	d9802517 	ldw	r6,148(sp)
    325c:	b8000005 	stb	zero,0(r23)
    3260:	18800044 	addi	r2,r3,1
    3264:	20800015 	stw	r2,0(r4)
    3268:	30027226 	beq	r6,zero,3c34 <_dtoa_r+0x10a8>
    326c:	35c00015 	stw	r23,0(r6)
    3270:	d8800717 	ldw	r2,28(sp)
    3274:	003e7406 	br	2c48 <__alt_mem_Flash_flash_data+0xf4002c48>
    3278:	00800434 	movhi	r2,16
    327c:	10bfffc4 	addi	r2,r2,-1
    3280:	a8aa703a 	and	r21,r21,r2
    3284:	a83e801e 	bne	r21,zero,2c88 <__alt_mem_Flash_flash_data+0xf4002c88>
    3288:	008000b4 	movhi	r2,2
    328c:	10a5ad04 	addi	r2,r2,-26956
    3290:	003e7f06 	br	2c90 <__alt_mem_Flash_flash_data+0xf4002c90>
    3294:	10c00204 	addi	r3,r2,8
    3298:	003e8206 	br	2ca4 <__alt_mem_Flash_flash_data+0xf4002ca4>
    329c:	01400434 	movhi	r5,16
    32a0:	297fffc4 	addi	r5,r5,-1
    32a4:	994a703a 	and	r5,r19,r5
    32a8:	9009883a 	mov	r4,r18
    32ac:	8c7f0044 	addi	r17,r17,-1023
    32b0:	294ffc34 	orhi	r5,r5,16368
    32b4:	dd000217 	ldw	r20,8(sp)
    32b8:	d8000f15 	stw	zero,60(sp)
    32bc:	003e9f06 	br	2d3c <__alt_mem_Flash_flash_data+0xf4002d3c>
    32c0:	008000b4 	movhi	r2,2
    32c4:	10a5a404 	addi	r2,r2,-26992
    32c8:	003e5f06 	br	2c48 <__alt_mem_Flash_flash_data+0xf4002c48>
    32cc:	80001115 	stw	zero,68(r16)
    32d0:	8009883a 	mov	r4,r16
    32d4:	000b883a 	mov	r5,zero
    32d8:	0005c080 	call	5c08 <_Balloc>
    32dc:	01bfffc4 	movi	r6,-1
    32e0:	d8800715 	stw	r2,28(sp)
    32e4:	80801015 	stw	r2,64(r16)
    32e8:	00800044 	movi	r2,1
    32ec:	d9800c15 	stw	r6,48(sp)
    32f0:	d8800b15 	stw	r2,44(sp)
    32f4:	d9800615 	stw	r6,24(sp)
    32f8:	d8002215 	stw	zero,136(sp)
    32fc:	d8000315 	stw	zero,12(sp)
    3300:	d8800117 	ldw	r2,4(sp)
    3304:	10008e16 	blt	r2,zero,3540 <_dtoa_r+0x9b4>
    3308:	d9000517 	ldw	r4,20(sp)
    330c:	00c00384 	movi	r3,14
    3310:	19008b16 	blt	r3,r4,3540 <_dtoa_r+0x9b4>
    3314:	200490fa 	slli	r2,r4,3
    3318:	00c000b4 	movhi	r3,2
    331c:	d9802217 	ldw	r6,136(sp)
    3320:	18e5cc04 	addi	r3,r3,-26832
    3324:	1885883a 	add	r2,r3,r2
    3328:	14400017 	ldw	r17,0(r2)
    332c:	15000117 	ldw	r20,4(r2)
    3330:	3001c716 	blt	r6,zero,3a50 <_dtoa_r+0xec4>
    3334:	880d883a 	mov	r6,r17
    3338:	a00f883a 	mov	r7,r20
    333c:	9009883a 	mov	r4,r18
    3340:	980b883a 	mov	r5,r19
    3344:	000ac040 	call	ac04 <__divdf3>
    3348:	180b883a 	mov	r5,r3
    334c:	1009883a 	mov	r4,r2
    3350:	000c7080 	call	c708 <__fixdfsi>
    3354:	1009883a 	mov	r4,r2
    3358:	102d883a 	mov	r22,r2
    335c:	000c7900 	call	c790 <__floatsidf>
    3360:	1009883a 	mov	r4,r2
    3364:	180b883a 	mov	r5,r3
    3368:	880d883a 	mov	r6,r17
    336c:	a00f883a 	mov	r7,r20
    3370:	000b7140 	call	b714 <__muldf3>
    3374:	9009883a 	mov	r4,r18
    3378:	980b883a 	mov	r5,r19
    337c:	100d883a 	mov	r6,r2
    3380:	180f883a 	mov	r7,r3
    3384:	000be380 	call	be38 <__subdf3>
    3388:	d9000717 	ldw	r4,28(sp)
    338c:	d9800617 	ldw	r6,24(sp)
    3390:	180b883a 	mov	r5,r3
    3394:	b0c00c04 	addi	r3,r22,48
    3398:	20c00005 	stb	r3,0(r4)
    339c:	25c00044 	addi	r23,r4,1
    33a0:	01000044 	movi	r4,1
    33a4:	1011883a 	mov	r8,r2
    33a8:	2807883a 	mov	r3,r5
    33ac:	31003d26 	beq	r6,r4,34a4 <_dtoa_r+0x918>
    33b0:	000d883a 	mov	r6,zero
    33b4:	01d00934 	movhi	r7,16420
    33b8:	1009883a 	mov	r4,r2
    33bc:	000b7140 	call	b714 <__muldf3>
    33c0:	1009883a 	mov	r4,r2
    33c4:	180b883a 	mov	r5,r3
    33c8:	000d883a 	mov	r6,zero
    33cc:	000f883a 	mov	r7,zero
    33d0:	1027883a 	mov	r19,r2
    33d4:	182b883a 	mov	r21,r3
    33d8:	000b4d00 	call	b4d0 <__eqdf2>
    33dc:	103f9926 	beq	r2,zero,3244 <__alt_mem_Flash_flash_data+0xf4003244>
    33e0:	d8c00617 	ldw	r3,24(sp)
    33e4:	d9000717 	ldw	r4,28(sp)
    33e8:	b825883a 	mov	r18,r23
    33ec:	18bfffc4 	addi	r2,r3,-1
    33f0:	20ad883a 	add	r22,r4,r2
    33f4:	dc000315 	stw	r16,12(sp)
    33f8:	00000a06 	br	3424 <_dtoa_r+0x898>
    33fc:	000b7140 	call	b714 <__muldf3>
    3400:	1009883a 	mov	r4,r2
    3404:	180b883a 	mov	r5,r3
    3408:	000d883a 	mov	r6,zero
    340c:	000f883a 	mov	r7,zero
    3410:	1027883a 	mov	r19,r2
    3414:	182b883a 	mov	r21,r3
    3418:	b825883a 	mov	r18,r23
    341c:	000b4d00 	call	b4d0 <__eqdf2>
    3420:	10022626 	beq	r2,zero,3cbc <_dtoa_r+0x1130>
    3424:	880d883a 	mov	r6,r17
    3428:	a00f883a 	mov	r7,r20
    342c:	9809883a 	mov	r4,r19
    3430:	a80b883a 	mov	r5,r21
    3434:	000ac040 	call	ac04 <__divdf3>
    3438:	180b883a 	mov	r5,r3
    343c:	1009883a 	mov	r4,r2
    3440:	000c7080 	call	c708 <__fixdfsi>
    3444:	1009883a 	mov	r4,r2
    3448:	1021883a 	mov	r16,r2
    344c:	000c7900 	call	c790 <__floatsidf>
    3450:	1009883a 	mov	r4,r2
    3454:	180b883a 	mov	r5,r3
    3458:	880d883a 	mov	r6,r17
    345c:	a00f883a 	mov	r7,r20
    3460:	000b7140 	call	b714 <__muldf3>
    3464:	9809883a 	mov	r4,r19
    3468:	a80b883a 	mov	r5,r21
    346c:	100d883a 	mov	r6,r2
    3470:	180f883a 	mov	r7,r3
    3474:	000be380 	call	be38 <__subdf3>
    3478:	82000c04 	addi	r8,r16,48
    347c:	92000005 	stb	r8,0(r18)
    3480:	1009883a 	mov	r4,r2
    3484:	180b883a 	mov	r5,r3
    3488:	000d883a 	mov	r6,zero
    348c:	01d00934 	movhi	r7,16420
    3490:	1011883a 	mov	r8,r2
    3494:	bdc00044 	addi	r23,r23,1
    3498:	95bfd81e 	bne	r18,r22,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    349c:	802d883a 	mov	r22,r16
    34a0:	dc000317 	ldw	r16,12(sp)
    34a4:	4009883a 	mov	r4,r8
    34a8:	180b883a 	mov	r5,r3
    34ac:	400d883a 	mov	r6,r8
    34b0:	180f883a 	mov	r7,r3
    34b4:	000a3680 	call	a368 <__adddf3>
    34b8:	8809883a 	mov	r4,r17
    34bc:	a00b883a 	mov	r5,r20
    34c0:	100d883a 	mov	r6,r2
    34c4:	180f883a 	mov	r7,r3
    34c8:	1027883a 	mov	r19,r2
    34cc:	1825883a 	mov	r18,r3
    34d0:	000b6340 	call	b634 <__ledf2>
    34d4:	10000816 	blt	r2,zero,34f8 <_dtoa_r+0x96c>
    34d8:	8809883a 	mov	r4,r17
    34dc:	a00b883a 	mov	r5,r20
    34e0:	980d883a 	mov	r6,r19
    34e4:	900f883a 	mov	r7,r18
    34e8:	000b4d00 	call	b4d0 <__eqdf2>
    34ec:	103f551e 	bne	r2,zero,3244 <__alt_mem_Flash_flash_data+0xf4003244>
    34f0:	b580004c 	andi	r22,r22,1
    34f4:	b03f5326 	beq	r22,zero,3244 <__alt_mem_Flash_flash_data+0xf4003244>
    34f8:	bd7fffc3 	ldbu	r21,-1(r23)
    34fc:	b8bfffc4 	addi	r2,r23,-1
    3500:	1007883a 	mov	r3,r2
    3504:	01400e44 	movi	r5,57
    3508:	d9800717 	ldw	r6,28(sp)
    350c:	00000506 	br	3524 <_dtoa_r+0x998>
    3510:	18ffffc4 	addi	r3,r3,-1
    3514:	30825e26 	beq	r6,r2,3e90 <_dtoa_r+0x1304>
    3518:	1d400003 	ldbu	r21,0(r3)
    351c:	102f883a 	mov	r23,r2
    3520:	10bfffc4 	addi	r2,r2,-1
    3524:	a9003fcc 	andi	r4,r21,255
    3528:	2100201c 	xori	r4,r4,128
    352c:	213fe004 	addi	r4,r4,-128
    3530:	217ff726 	beq	r4,r5,3510 <__alt_mem_Flash_flash_data+0xf4003510>
    3534:	aa000044 	addi	r8,r21,1
    3538:	12000005 	stb	r8,0(r2)
    353c:	003f4106 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    3540:	d8c00b17 	ldw	r3,44(sp)
    3544:	18006726 	beq	r3,zero,36e4 <_dtoa_r+0xb58>
    3548:	d9000317 	ldw	r4,12(sp)
    354c:	00c00044 	movi	r3,1
    3550:	19016a0e 	bge	r3,r4,3afc <_dtoa_r+0xf70>
    3554:	d8800617 	ldw	r2,24(sp)
    3558:	d8c00917 	ldw	r3,36(sp)
    355c:	157fffc4 	addi	r21,r2,-1
    3560:	1d420716 	blt	r3,r21,3d80 <_dtoa_r+0x11f4>
    3564:	1d6bc83a 	sub	r21,r3,r21
    3568:	d8800617 	ldw	r2,24(sp)
    356c:	1002c716 	blt	r2,zero,408c <_dtoa_r+0x1500>
    3570:	dd000817 	ldw	r20,32(sp)
    3574:	d8800617 	ldw	r2,24(sp)
    3578:	d9800817 	ldw	r6,32(sp)
    357c:	8009883a 	mov	r4,r16
    3580:	01400044 	movi	r5,1
    3584:	308d883a 	add	r6,r6,r2
    3588:	d9800815 	stw	r6,32(sp)
    358c:	b0ad883a 	add	r22,r22,r2
    3590:	00060140 	call	6014 <__i2b>
    3594:	1023883a 	mov	r17,r2
    3598:	a0000826 	beq	r20,zero,35bc <_dtoa_r+0xa30>
    359c:	0580070e 	bge	zero,r22,35bc <_dtoa_r+0xa30>
    35a0:	b005883a 	mov	r2,r22
    35a4:	a5812016 	blt	r20,r22,3a28 <_dtoa_r+0xe9c>
    35a8:	d8c00817 	ldw	r3,32(sp)
    35ac:	a0a9c83a 	sub	r20,r20,r2
    35b0:	b0adc83a 	sub	r22,r22,r2
    35b4:	1887c83a 	sub	r3,r3,r2
    35b8:	d8c00815 	stw	r3,32(sp)
    35bc:	d9000917 	ldw	r4,36(sp)
    35c0:	0100140e 	bge	zero,r4,3614 <_dtoa_r+0xa88>
    35c4:	d9800b17 	ldw	r6,44(sp)
    35c8:	3001e526 	beq	r6,zero,3d60 <_dtoa_r+0x11d4>
    35cc:	05400e0e 	bge	zero,r21,3608 <_dtoa_r+0xa7c>
    35d0:	880b883a 	mov	r5,r17
    35d4:	8009883a 	mov	r4,r16
    35d8:	a80d883a 	mov	r6,r21
    35dc:	000624c0 	call	624c <__pow5mult>
    35e0:	e00d883a 	mov	r6,fp
    35e4:	8009883a 	mov	r4,r16
    35e8:	100b883a 	mov	r5,r2
    35ec:	1023883a 	mov	r17,r2
    35f0:	00060500 	call	6050 <__multiply>
    35f4:	102f883a 	mov	r23,r2
    35f8:	e00b883a 	mov	r5,fp
    35fc:	8009883a 	mov	r4,r16
    3600:	0005cb00 	call	5cb0 <_Bfree>
    3604:	b839883a 	mov	fp,r23
    3608:	d8800917 	ldw	r2,36(sp)
    360c:	154dc83a 	sub	r6,r2,r21
    3610:	3001281e 	bne	r6,zero,3ab4 <_dtoa_r+0xf28>
    3614:	05c00044 	movi	r23,1
    3618:	8009883a 	mov	r4,r16
    361c:	b80b883a 	mov	r5,r23
    3620:	00060140 	call	6014 <__i2b>
    3624:	d8c00a17 	ldw	r3,40(sp)
    3628:	102b883a 	mov	r21,r2
    362c:	00c0310e 	bge	zero,r3,36f4 <_dtoa_r+0xb68>
    3630:	8009883a 	mov	r4,r16
    3634:	100b883a 	mov	r5,r2
    3638:	180d883a 	mov	r6,r3
    363c:	000624c0 	call	624c <__pow5mult>
    3640:	d9000317 	ldw	r4,12(sp)
    3644:	102b883a 	mov	r21,r2
    3648:	b9011f0e 	bge	r23,r4,3ac8 <_dtoa_r+0xf3c>
    364c:	0027883a 	mov	r19,zero
    3650:	a8800417 	ldw	r2,16(r21)
    3654:	10800104 	addi	r2,r2,4
    3658:	1085883a 	add	r2,r2,r2
    365c:	1085883a 	add	r2,r2,r2
    3660:	a885883a 	add	r2,r21,r2
    3664:	11000017 	ldw	r4,0(r2)
    3668:	0005efc0 	call	5efc <__hi0bits>
    366c:	00c00804 	movi	r3,32
    3670:	1885c83a 	sub	r2,r3,r2
    3674:	00002506 	br	370c <_dtoa_r+0xb80>
    3678:	01800044 	movi	r6,1
    367c:	d9800d15 	stw	r6,52(sp)
    3680:	003dec06 	br	2e34 <__alt_mem_Flash_flash_data+0xf4002e34>
    3684:	d8c00817 	ldw	r3,32(sp)
    3688:	d9000517 	ldw	r4,20(sp)
    368c:	d8000a15 	stw	zero,40(sp)
    3690:	1907c83a 	sub	r3,r3,r4
    3694:	010dc83a 	sub	r6,zero,r4
    3698:	d8c00815 	stw	r3,32(sp)
    369c:	d9800915 	stw	r6,36(sp)
    36a0:	003ded06 	br	2e58 <__alt_mem_Flash_flash_data+0xf4002e58>
    36a4:	05adc83a 	sub	r22,zero,r22
    36a8:	dd800815 	stw	r22,32(sp)
    36ac:	002d883a 	mov	r22,zero
    36b0:	003de406 	br	2e44 <__alt_mem_Flash_flash_data+0xf4002e44>
    36b4:	d9000517 	ldw	r4,20(sp)
    36b8:	000c7900 	call	c790 <__floatsidf>
    36bc:	1009883a 	mov	r4,r2
    36c0:	180b883a 	mov	r5,r3
    36c4:	b00d883a 	mov	r6,r22
    36c8:	a80f883a 	mov	r7,r21
    36cc:	000b4d00 	call	b4d0 <__eqdf2>
    36d0:	103dc726 	beq	r2,zero,2df0 <__alt_mem_Flash_flash_data+0xf4002df0>
    36d4:	d8800517 	ldw	r2,20(sp)
    36d8:	10bfffc4 	addi	r2,r2,-1
    36dc:	d8800515 	stw	r2,20(sp)
    36e0:	003dc306 	br	2df0 <__alt_mem_Flash_flash_data+0xf4002df0>
    36e4:	dd400917 	ldw	r21,36(sp)
    36e8:	dd000817 	ldw	r20,32(sp)
    36ec:	0023883a 	mov	r17,zero
    36f0:	003fa906 	br	3598 <__alt_mem_Flash_flash_data+0xf4003598>
    36f4:	d9800317 	ldw	r6,12(sp)
    36f8:	b981670e 	bge	r23,r6,3c98 <_dtoa_r+0x110c>
    36fc:	0027883a 	mov	r19,zero
    3700:	d8c00a17 	ldw	r3,40(sp)
    3704:	183fd21e 	bne	r3,zero,3650 <__alt_mem_Flash_flash_data+0xf4003650>
    3708:	00800044 	movi	r2,1
    370c:	1585883a 	add	r2,r2,r22
    3710:	108007cc 	andi	r2,r2,31
    3714:	10005f26 	beq	r2,zero,3894 <_dtoa_r+0xd08>
    3718:	00c00804 	movi	r3,32
    371c:	1887c83a 	sub	r3,r3,r2
    3720:	01000104 	movi	r4,4
    3724:	20c2dd0e 	bge	r4,r3,429c <_dtoa_r+0x1710>
    3728:	d9000817 	ldw	r4,32(sp)
    372c:	00c00704 	movi	r3,28
    3730:	1885c83a 	sub	r2,r3,r2
    3734:	2089883a 	add	r4,r4,r2
    3738:	d9000815 	stw	r4,32(sp)
    373c:	a0a9883a 	add	r20,r20,r2
    3740:	b0ad883a 	add	r22,r22,r2
    3744:	d8800817 	ldw	r2,32(sp)
    3748:	0080050e 	bge	zero,r2,3760 <_dtoa_r+0xbd4>
    374c:	e00b883a 	mov	r5,fp
    3750:	8009883a 	mov	r4,r16
    3754:	100d883a 	mov	r6,r2
    3758:	000638c0 	call	638c <__lshift>
    375c:	1039883a 	mov	fp,r2
    3760:	0580050e 	bge	zero,r22,3778 <_dtoa_r+0xbec>
    3764:	a80b883a 	mov	r5,r21
    3768:	8009883a 	mov	r4,r16
    376c:	b00d883a 	mov	r6,r22
    3770:	000638c0 	call	638c <__lshift>
    3774:	102b883a 	mov	r21,r2
    3778:	d8c00d17 	ldw	r3,52(sp)
    377c:	1801161e 	bne	r3,zero,3bd8 <_dtoa_r+0x104c>
    3780:	d8c00617 	ldw	r3,24(sp)
    3784:	00c12d0e 	bge	zero,r3,3c3c <_dtoa_r+0x10b0>
    3788:	d8c00b17 	ldw	r3,44(sp)
    378c:	1800571e 	bne	r3,zero,38ec <_dtoa_r+0xd60>
    3790:	dc800717 	ldw	r18,28(sp)
    3794:	dcc00617 	ldw	r19,24(sp)
    3798:	9029883a 	mov	r20,r18
    379c:	00000206 	br	37a8 <_dtoa_r+0xc1c>
    37a0:	0005cd80 	call	5cd8 <__multadd>
    37a4:	1039883a 	mov	fp,r2
    37a8:	e009883a 	mov	r4,fp
    37ac:	a80b883a 	mov	r5,r21
    37b0:	000298c0 	call	298c <quorem>
    37b4:	10800c04 	addi	r2,r2,48
    37b8:	90800005 	stb	r2,0(r18)
    37bc:	94800044 	addi	r18,r18,1
    37c0:	9507c83a 	sub	r3,r18,r20
    37c4:	8009883a 	mov	r4,r16
    37c8:	e00b883a 	mov	r5,fp
    37cc:	01800284 	movi	r6,10
    37d0:	000f883a 	mov	r7,zero
    37d4:	1cfff216 	blt	r3,r19,37a0 <__alt_mem_Flash_flash_data+0xf40037a0>
    37d8:	1011883a 	mov	r8,r2
    37dc:	d8800617 	ldw	r2,24(sp)
    37e0:	00822e0e 	bge	zero,r2,409c <_dtoa_r+0x1510>
    37e4:	d9000717 	ldw	r4,28(sp)
    37e8:	0025883a 	mov	r18,zero
    37ec:	20af883a 	add	r23,r4,r2
    37f0:	e00b883a 	mov	r5,fp
    37f4:	01800044 	movi	r6,1
    37f8:	8009883a 	mov	r4,r16
    37fc:	da001715 	stw	r8,92(sp)
    3800:	000638c0 	call	638c <__lshift>
    3804:	1009883a 	mov	r4,r2
    3808:	a80b883a 	mov	r5,r21
    380c:	1039883a 	mov	fp,r2
    3810:	00064dc0 	call	64dc <__mcmp>
    3814:	da001717 	ldw	r8,92(sp)
    3818:	00816e0e 	bge	zero,r2,3dd4 <_dtoa_r+0x1248>
    381c:	b93fffc3 	ldbu	r4,-1(r23)
    3820:	b8bfffc4 	addi	r2,r23,-1
    3824:	1007883a 	mov	r3,r2
    3828:	01800e44 	movi	r6,57
    382c:	d9c00717 	ldw	r7,28(sp)
    3830:	00000506 	br	3848 <_dtoa_r+0xcbc>
    3834:	18ffffc4 	addi	r3,r3,-1
    3838:	38811926 	beq	r7,r2,3ca0 <_dtoa_r+0x1114>
    383c:	19000003 	ldbu	r4,0(r3)
    3840:	102f883a 	mov	r23,r2
    3844:	10bfffc4 	addi	r2,r2,-1
    3848:	21403fcc 	andi	r5,r4,255
    384c:	2940201c 	xori	r5,r5,128
    3850:	297fe004 	addi	r5,r5,-128
    3854:	29bff726 	beq	r5,r6,3834 <__alt_mem_Flash_flash_data+0xf4003834>
    3858:	21000044 	addi	r4,r4,1
    385c:	11000005 	stb	r4,0(r2)
    3860:	8009883a 	mov	r4,r16
    3864:	a80b883a 	mov	r5,r21
    3868:	0005cb00 	call	5cb0 <_Bfree>
    386c:	883e7526 	beq	r17,zero,3244 <__alt_mem_Flash_flash_data+0xf4003244>
    3870:	90000426 	beq	r18,zero,3884 <_dtoa_r+0xcf8>
    3874:	94400326 	beq	r18,r17,3884 <_dtoa_r+0xcf8>
    3878:	8009883a 	mov	r4,r16
    387c:	900b883a 	mov	r5,r18
    3880:	0005cb00 	call	5cb0 <_Bfree>
    3884:	8009883a 	mov	r4,r16
    3888:	880b883a 	mov	r5,r17
    388c:	0005cb00 	call	5cb0 <_Bfree>
    3890:	003e6c06 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    3894:	00800704 	movi	r2,28
    3898:	d9800817 	ldw	r6,32(sp)
    389c:	a0a9883a 	add	r20,r20,r2
    38a0:	b0ad883a 	add	r22,r22,r2
    38a4:	308d883a 	add	r6,r6,r2
    38a8:	d9800815 	stw	r6,32(sp)
    38ac:	003fa506 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    38b0:	013efb84 	movi	r4,-1042
    38b4:	246bc83a 	sub	r21,r4,r17
    38b8:	9548983a 	sll	r4,r18,r21
    38bc:	003d1806 	br	2d20 <__alt_mem_Flash_flash_data+0xf4002d20>
    38c0:	d8000d15 	stw	zero,52(sp)
    38c4:	003d5b06 	br	2e34 <__alt_mem_Flash_flash_data+0xf4002e34>
    38c8:	880b883a 	mov	r5,r17
    38cc:	8009883a 	mov	r4,r16
    38d0:	01800284 	movi	r6,10
    38d4:	000f883a 	mov	r7,zero
    38d8:	0005cd80 	call	5cd8 <__multadd>
    38dc:	1023883a 	mov	r17,r2
    38e0:	d8800c17 	ldw	r2,48(sp)
    38e4:	0082550e 	bge	zero,r2,423c <_dtoa_r+0x16b0>
    38e8:	d8800615 	stw	r2,24(sp)
    38ec:	0500050e 	bge	zero,r20,3904 <_dtoa_r+0xd78>
    38f0:	880b883a 	mov	r5,r17
    38f4:	8009883a 	mov	r4,r16
    38f8:	a00d883a 	mov	r6,r20
    38fc:	000638c0 	call	638c <__lshift>
    3900:	1023883a 	mov	r17,r2
    3904:	98016a1e 	bne	r19,zero,3eb0 <_dtoa_r+0x1324>
    3908:	8829883a 	mov	r20,r17
    390c:	d9000617 	ldw	r4,24(sp)
    3910:	dcc00717 	ldw	r19,28(sp)
    3914:	9480004c 	andi	r18,r18,1
    3918:	20bfffc4 	addi	r2,r4,-1
    391c:	9885883a 	add	r2,r19,r2
    3920:	d8800415 	stw	r2,16(sp)
    3924:	dc800615 	stw	r18,24(sp)
    3928:	e009883a 	mov	r4,fp
    392c:	a80b883a 	mov	r5,r21
    3930:	000298c0 	call	298c <quorem>
    3934:	e009883a 	mov	r4,fp
    3938:	880b883a 	mov	r5,r17
    393c:	102f883a 	mov	r23,r2
    3940:	00064dc0 	call	64dc <__mcmp>
    3944:	8009883a 	mov	r4,r16
    3948:	a80b883a 	mov	r5,r21
    394c:	a00d883a 	mov	r6,r20
    3950:	102d883a 	mov	r22,r2
    3954:	000653c0 	call	653c <__mdiff>
    3958:	1007883a 	mov	r3,r2
    395c:	10800317 	ldw	r2,12(r2)
    3960:	bc800c04 	addi	r18,r23,48
    3964:	1000971e 	bne	r2,zero,3bc4 <_dtoa_r+0x1038>
    3968:	180b883a 	mov	r5,r3
    396c:	e009883a 	mov	r4,fp
    3970:	d8c01515 	stw	r3,84(sp)
    3974:	00064dc0 	call	64dc <__mcmp>
    3978:	d8c01517 	ldw	r3,84(sp)
    397c:	8009883a 	mov	r4,r16
    3980:	d8801515 	stw	r2,84(sp)
    3984:	180b883a 	mov	r5,r3
    3988:	0005cb00 	call	5cb0 <_Bfree>
    398c:	d8801517 	ldw	r2,84(sp)
    3990:	1000041e 	bne	r2,zero,39a4 <_dtoa_r+0xe18>
    3994:	d9800317 	ldw	r6,12(sp)
    3998:	3000021e 	bne	r6,zero,39a4 <_dtoa_r+0xe18>
    399c:	d8c00617 	ldw	r3,24(sp)
    39a0:	18007626 	beq	r3,zero,3b7c <_dtoa_r+0xff0>
    39a4:	b0005b16 	blt	r22,zero,3b14 <_dtoa_r+0xf88>
    39a8:	b000041e 	bne	r22,zero,39bc <_dtoa_r+0xe30>
    39ac:	d9000317 	ldw	r4,12(sp)
    39b0:	2000021e 	bne	r4,zero,39bc <_dtoa_r+0xe30>
    39b4:	d8c00617 	ldw	r3,24(sp)
    39b8:	18005626 	beq	r3,zero,3b14 <_dtoa_r+0xf88>
    39bc:	00814d16 	blt	zero,r2,3ef4 <_dtoa_r+0x1368>
    39c0:	d8c00417 	ldw	r3,16(sp)
    39c4:	9d800044 	addi	r22,r19,1
    39c8:	9c800005 	stb	r18,0(r19)
    39cc:	b02f883a 	mov	r23,r22
    39d0:	98c14c26 	beq	r19,r3,3f04 <_dtoa_r+0x1378>
    39d4:	e00b883a 	mov	r5,fp
    39d8:	8009883a 	mov	r4,r16
    39dc:	01800284 	movi	r6,10
    39e0:	000f883a 	mov	r7,zero
    39e4:	0005cd80 	call	5cd8 <__multadd>
    39e8:	1039883a 	mov	fp,r2
    39ec:	8d006d26 	beq	r17,r20,3ba4 <_dtoa_r+0x1018>
    39f0:	880b883a 	mov	r5,r17
    39f4:	01800284 	movi	r6,10
    39f8:	000f883a 	mov	r7,zero
    39fc:	8009883a 	mov	r4,r16
    3a00:	0005cd80 	call	5cd8 <__multadd>
    3a04:	a00b883a 	mov	r5,r20
    3a08:	8009883a 	mov	r4,r16
    3a0c:	01800284 	movi	r6,10
    3a10:	000f883a 	mov	r7,zero
    3a14:	1023883a 	mov	r17,r2
    3a18:	0005cd80 	call	5cd8 <__multadd>
    3a1c:	1029883a 	mov	r20,r2
    3a20:	b027883a 	mov	r19,r22
    3a24:	003fc006 	br	3928 <__alt_mem_Flash_flash_data+0xf4003928>
    3a28:	a005883a 	mov	r2,r20
    3a2c:	003ede06 	br	35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    3a30:	01000044 	movi	r4,1
    3a34:	d9000b15 	stw	r4,44(sp)
    3a38:	d9802217 	ldw	r6,136(sp)
    3a3c:	0180dc0e 	bge	zero,r6,3db0 <_dtoa_r+0x1224>
    3a40:	3023883a 	mov	r17,r6
    3a44:	d9800c15 	stw	r6,48(sp)
    3a48:	d9800615 	stw	r6,24(sp)
    3a4c:	003d1e06 	br	2ec8 <__alt_mem_Flash_flash_data+0xf4002ec8>
    3a50:	d8800617 	ldw	r2,24(sp)
    3a54:	00be3716 	blt	zero,r2,3334 <__alt_mem_Flash_flash_data+0xf4003334>
    3a58:	1000be1e 	bne	r2,zero,3d54 <_dtoa_r+0x11c8>
    3a5c:	8809883a 	mov	r4,r17
    3a60:	a00b883a 	mov	r5,r20
    3a64:	000d883a 	mov	r6,zero
    3a68:	01d00534 	movhi	r7,16404
    3a6c:	000b7140 	call	b714 <__muldf3>
    3a70:	1009883a 	mov	r4,r2
    3a74:	180b883a 	mov	r5,r3
    3a78:	900d883a 	mov	r6,r18
    3a7c:	980f883a 	mov	r7,r19
    3a80:	000b5540 	call	b554 <__gedf2>
    3a84:	002b883a 	mov	r21,zero
    3a88:	0023883a 	mov	r17,zero
    3a8c:	10007a16 	blt	r2,zero,3c78 <_dtoa_r+0x10ec>
    3a90:	d9002217 	ldw	r4,136(sp)
    3a94:	ddc00717 	ldw	r23,28(sp)
    3a98:	0108303a 	nor	r4,zero,r4
    3a9c:	d9000515 	stw	r4,20(sp)
    3aa0:	8009883a 	mov	r4,r16
    3aa4:	a80b883a 	mov	r5,r21
    3aa8:	0005cb00 	call	5cb0 <_Bfree>
    3aac:	883f751e 	bne	r17,zero,3884 <__alt_mem_Flash_flash_data+0xf4003884>
    3ab0:	003de406 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    3ab4:	e00b883a 	mov	r5,fp
    3ab8:	8009883a 	mov	r4,r16
    3abc:	000624c0 	call	624c <__pow5mult>
    3ac0:	1039883a 	mov	fp,r2
    3ac4:	003ed306 	br	3614 <__alt_mem_Flash_flash_data+0xf4003614>
    3ac8:	903ee01e 	bne	r18,zero,364c <__alt_mem_Flash_flash_data+0xf400364c>
    3acc:	00800434 	movhi	r2,16
    3ad0:	10bfffc4 	addi	r2,r2,-1
    3ad4:	9884703a 	and	r2,r19,r2
    3ad8:	103f081e 	bne	r2,zero,36fc <__alt_mem_Flash_flash_data+0xf40036fc>
    3adc:	9cdffc2c 	andhi	r19,r19,32752
    3ae0:	983f0626 	beq	r19,zero,36fc <__alt_mem_Flash_flash_data+0xf40036fc>
    3ae4:	d8800817 	ldw	r2,32(sp)
    3ae8:	b5800044 	addi	r22,r22,1
    3aec:	04c00044 	movi	r19,1
    3af0:	10800044 	addi	r2,r2,1
    3af4:	d8800815 	stw	r2,32(sp)
    3af8:	003f0106 	br	3700 <__alt_mem_Flash_flash_data+0xf4003700>
    3afc:	d9800f17 	ldw	r6,60(sp)
    3b00:	30016826 	beq	r6,zero,40a4 <_dtoa_r+0x1518>
    3b04:	10810cc4 	addi	r2,r2,1075
    3b08:	dd400917 	ldw	r21,36(sp)
    3b0c:	dd000817 	ldw	r20,32(sp)
    3b10:	003e9906 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    3b14:	9011883a 	mov	r8,r18
    3b18:	4007883a 	mov	r3,r8
    3b1c:	e02d883a 	mov	r22,fp
    3b20:	0080100e 	bge	zero,r2,3b64 <_dtoa_r+0xfd8>
    3b24:	01800044 	movi	r6,1
    3b28:	8009883a 	mov	r4,r16
    3b2c:	e00b883a 	mov	r5,fp
    3b30:	da001515 	stw	r8,84(sp)
    3b34:	da001715 	stw	r8,92(sp)
    3b38:	000638c0 	call	638c <__lshift>
    3b3c:	1009883a 	mov	r4,r2
    3b40:	a80b883a 	mov	r5,r21
    3b44:	102d883a 	mov	r22,r2
    3b48:	00064dc0 	call	64dc <__mcmp>
    3b4c:	d8c01517 	ldw	r3,84(sp)
    3b50:	da001717 	ldw	r8,92(sp)
    3b54:	0081a50e 	bge	zero,r2,41ec <_dtoa_r+0x1660>
    3b58:	00800e44 	movi	r2,57
    3b5c:	40817b26 	beq	r8,r2,414c <_dtoa_r+0x15c0>
    3b60:	40c00044 	addi	r3,r8,1
    3b64:	8825883a 	mov	r18,r17
    3b68:	9dc00044 	addi	r23,r19,1
    3b6c:	98c00005 	stb	r3,0(r19)
    3b70:	a023883a 	mov	r17,r20
    3b74:	b039883a 	mov	fp,r22
    3b78:	003f3906 	br	3860 <__alt_mem_Flash_flash_data+0xf4003860>
    3b7c:	00800e44 	movi	r2,57
    3b80:	9011883a 	mov	r8,r18
    3b84:	90817226 	beq	r18,r2,4150 <_dtoa_r+0x15c4>
    3b88:	0580010e 	bge	zero,r22,3b90 <_dtoa_r+0x1004>
    3b8c:	ba000c44 	addi	r8,r23,49
    3b90:	8825883a 	mov	r18,r17
    3b94:	9dc00044 	addi	r23,r19,1
    3b98:	9a000005 	stb	r8,0(r19)
    3b9c:	a023883a 	mov	r17,r20
    3ba0:	003f2f06 	br	3860 <__alt_mem_Flash_flash_data+0xf4003860>
    3ba4:	880b883a 	mov	r5,r17
    3ba8:	8009883a 	mov	r4,r16
    3bac:	01800284 	movi	r6,10
    3bb0:	000f883a 	mov	r7,zero
    3bb4:	0005cd80 	call	5cd8 <__multadd>
    3bb8:	1023883a 	mov	r17,r2
    3bbc:	1029883a 	mov	r20,r2
    3bc0:	003f9706 	br	3a20 <__alt_mem_Flash_flash_data+0xf4003a20>
    3bc4:	8009883a 	mov	r4,r16
    3bc8:	180b883a 	mov	r5,r3
    3bcc:	0005cb00 	call	5cb0 <_Bfree>
    3bd0:	00800044 	movi	r2,1
    3bd4:	003f7306 	br	39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    3bd8:	e009883a 	mov	r4,fp
    3bdc:	a80b883a 	mov	r5,r21
    3be0:	00064dc0 	call	64dc <__mcmp>
    3be4:	103ee60e 	bge	r2,zero,3780 <__alt_mem_Flash_flash_data+0xf4003780>
    3be8:	8009883a 	mov	r4,r16
    3bec:	e00b883a 	mov	r5,fp
    3bf0:	01800284 	movi	r6,10
    3bf4:	000f883a 	mov	r7,zero
    3bf8:	0005cd80 	call	5cd8 <__multadd>
    3bfc:	d9000517 	ldw	r4,20(sp)
    3c00:	d9800b17 	ldw	r6,44(sp)
    3c04:	1039883a 	mov	fp,r2
    3c08:	213fffc4 	addi	r4,r4,-1
    3c0c:	d9000515 	stw	r4,20(sp)
    3c10:	303f2d1e 	bne	r6,zero,38c8 <__alt_mem_Flash_flash_data+0xf40038c8>
    3c14:	d9000c17 	ldw	r4,48(sp)
    3c18:	0101780e 	bge	zero,r4,41fc <_dtoa_r+0x1670>
    3c1c:	d9000615 	stw	r4,24(sp)
    3c20:	003edb06 	br	3790 <__alt_mem_Flash_flash_data+0xf4003790>
    3c24:	00800084 	movi	r2,2
    3c28:	30818e1e 	bne	r6,r2,4264 <_dtoa_r+0x16d8>
    3c2c:	d8000b15 	stw	zero,44(sp)
    3c30:	003f8106 	br	3a38 <__alt_mem_Flash_flash_data+0xf4003a38>
    3c34:	d8800717 	ldw	r2,28(sp)
    3c38:	003c0306 	br	2c48 <__alt_mem_Flash_flash_data+0xf4002c48>
    3c3c:	d9000317 	ldw	r4,12(sp)
    3c40:	00800084 	movi	r2,2
    3c44:	113ed00e 	bge	r2,r4,3788 <__alt_mem_Flash_flash_data+0xf4003788>
    3c48:	d8c00617 	ldw	r3,24(sp)
    3c4c:	183f901e 	bne	r3,zero,3a90 <__alt_mem_Flash_flash_data+0xf4003a90>
    3c50:	a80b883a 	mov	r5,r21
    3c54:	8009883a 	mov	r4,r16
    3c58:	01800144 	movi	r6,5
    3c5c:	000f883a 	mov	r7,zero
    3c60:	0005cd80 	call	5cd8 <__multadd>
    3c64:	e009883a 	mov	r4,fp
    3c68:	100b883a 	mov	r5,r2
    3c6c:	102b883a 	mov	r21,r2
    3c70:	00064dc0 	call	64dc <__mcmp>
    3c74:	00bf860e 	bge	zero,r2,3a90 <__alt_mem_Flash_flash_data+0xf4003a90>
    3c78:	d9800717 	ldw	r6,28(sp)
    3c7c:	00800c44 	movi	r2,49
    3c80:	30800005 	stb	r2,0(r6)
    3c84:	d8800517 	ldw	r2,20(sp)
    3c88:	35c00044 	addi	r23,r6,1
    3c8c:	10800044 	addi	r2,r2,1
    3c90:	d8800515 	stw	r2,20(sp)
    3c94:	003f8206 	br	3aa0 <__alt_mem_Flash_flash_data+0xf4003aa0>
    3c98:	903e981e 	bne	r18,zero,36fc <__alt_mem_Flash_flash_data+0xf40036fc>
    3c9c:	003f8b06 	br	3acc <__alt_mem_Flash_flash_data+0xf4003acc>
    3ca0:	d9800517 	ldw	r6,20(sp)
    3ca4:	d8c00717 	ldw	r3,28(sp)
    3ca8:	00800c44 	movi	r2,49
    3cac:	31800044 	addi	r6,r6,1
    3cb0:	d9800515 	stw	r6,20(sp)
    3cb4:	18800005 	stb	r2,0(r3)
    3cb8:	003ee906 	br	3860 <__alt_mem_Flash_flash_data+0xf4003860>
    3cbc:	dc000317 	ldw	r16,12(sp)
    3cc0:	003d6006 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    3cc4:	8809883a 	mov	r4,r17
    3cc8:	000c7900 	call	c790 <__floatsidf>
    3ccc:	a009883a 	mov	r4,r20
    3cd0:	a80b883a 	mov	r5,r21
    3cd4:	100d883a 	mov	r6,r2
    3cd8:	180f883a 	mov	r7,r3
    3cdc:	000b7140 	call	b714 <__muldf3>
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	180b883a 	mov	r5,r3
    3ce8:	000d883a 	mov	r6,zero
    3cec:	01d00734 	movhi	r7,16412
    3cf0:	000a3680 	call	a368 <__adddf3>
    3cf4:	1023883a 	mov	r17,r2
    3cf8:	00bf3034 	movhi	r2,64704
    3cfc:	1885883a 	add	r2,r3,r2
    3d00:	d8800e15 	stw	r2,56(sp)
    3d04:	a009883a 	mov	r4,r20
    3d08:	a80b883a 	mov	r5,r21
    3d0c:	000d883a 	mov	r6,zero
    3d10:	01d00534 	movhi	r7,16404
    3d14:	000be380 	call	be38 <__subdf3>
    3d18:	d9c00e17 	ldw	r7,56(sp)
    3d1c:	1009883a 	mov	r4,r2
    3d20:	180b883a 	mov	r5,r3
    3d24:	880d883a 	mov	r6,r17
    3d28:	102b883a 	mov	r21,r2
    3d2c:	1829883a 	mov	r20,r3
    3d30:	000b5540 	call	b554 <__gedf2>
    3d34:	00807716 	blt	zero,r2,3f14 <_dtoa_r+0x1388>
    3d38:	d8800e17 	ldw	r2,56(sp)
    3d3c:	a809883a 	mov	r4,r21
    3d40:	a00b883a 	mov	r5,r20
    3d44:	11e0003c 	xorhi	r7,r2,32768
    3d48:	880d883a 	mov	r6,r17
    3d4c:	000b6340 	call	b634 <__ledf2>
    3d50:	103d6b0e 	bge	r2,zero,3300 <__alt_mem_Flash_flash_data+0xf4003300>
    3d54:	002b883a 	mov	r21,zero
    3d58:	0023883a 	mov	r17,zero
    3d5c:	003f4c06 	br	3a90 <__alt_mem_Flash_flash_data+0xf4003a90>
    3d60:	d9800917 	ldw	r6,36(sp)
    3d64:	e00b883a 	mov	r5,fp
    3d68:	8009883a 	mov	r4,r16
    3d6c:	000624c0 	call	624c <__pow5mult>
    3d70:	1039883a 	mov	fp,r2
    3d74:	003e2706 	br	3614 <__alt_mem_Flash_flash_data+0xf4003614>
    3d78:	d8000b15 	stw	zero,44(sp)
    3d7c:	003c4906 	br	2ea4 <__alt_mem_Flash_flash_data+0xf4002ea4>
    3d80:	d9000917 	ldw	r4,36(sp)
    3d84:	d9800a17 	ldw	r6,40(sp)
    3d88:	dd400915 	stw	r21,36(sp)
    3d8c:	a905c83a 	sub	r2,r21,r4
    3d90:	308d883a 	add	r6,r6,r2
    3d94:	d9800a15 	stw	r6,40(sp)
    3d98:	002b883a 	mov	r21,zero
    3d9c:	003df206 	br	3568 <__alt_mem_Flash_flash_data+0xf4003568>
    3da0:	dc800e15 	stw	r18,56(sp)
    3da4:	982b883a 	mov	r21,r19
    3da8:	04400084 	movi	r17,2
    3dac:	003c7406 	br	2f80 <__alt_mem_Flash_flash_data+0xf4002f80>
    3db0:	04400044 	movi	r17,1
    3db4:	dc400c15 	stw	r17,48(sp)
    3db8:	dc400615 	stw	r17,24(sp)
    3dbc:	dc402215 	stw	r17,136(sp)
    3dc0:	80001115 	stw	zero,68(r16)
    3dc4:	000b883a 	mov	r5,zero
    3dc8:	003c4a06 	br	2ef4 <__alt_mem_Flash_flash_data+0xf4002ef4>
    3dcc:	3023883a 	mov	r17,r6
    3dd0:	003ffb06 	br	3dc0 <__alt_mem_Flash_flash_data+0xf4003dc0>
    3dd4:	1000021e 	bne	r2,zero,3de0 <_dtoa_r+0x1254>
    3dd8:	4200004c 	andi	r8,r8,1
    3ddc:	403e8f1e 	bne	r8,zero,381c <__alt_mem_Flash_flash_data+0xf400381c>
    3de0:	01000c04 	movi	r4,48
    3de4:	00000106 	br	3dec <_dtoa_r+0x1260>
    3de8:	102f883a 	mov	r23,r2
    3dec:	b8bfffc4 	addi	r2,r23,-1
    3df0:	10c00007 	ldb	r3,0(r2)
    3df4:	193ffc26 	beq	r3,r4,3de8 <__alt_mem_Flash_flash_data+0xf4003de8>
    3df8:	003e9906 	br	3860 <__alt_mem_Flash_flash_data+0xf4003860>
    3dfc:	d9000517 	ldw	r4,20(sp)
    3e00:	012fc83a 	sub	r23,zero,r4
    3e04:	b800ad26 	beq	r23,zero,40bc <_dtoa_r+0x1530>
    3e08:	b88003cc 	andi	r2,r23,15
    3e0c:	100490fa 	slli	r2,r2,3
    3e10:	00c000b4 	movhi	r3,2
    3e14:	18e5cc04 	addi	r3,r3,-26832
    3e18:	1885883a 	add	r2,r3,r2
    3e1c:	11800017 	ldw	r6,0(r2)
    3e20:	11c00117 	ldw	r7,4(r2)
    3e24:	b82fd13a 	srai	r23,r23,4
    3e28:	9009883a 	mov	r4,r18
    3e2c:	980b883a 	mov	r5,r19
    3e30:	000b7140 	call	b714 <__muldf3>
    3e34:	1029883a 	mov	r20,r2
    3e38:	182b883a 	mov	r21,r3
    3e3c:	b800f426 	beq	r23,zero,4210 <_dtoa_r+0x1684>
    3e40:	020000b4 	movhi	r8,2
    3e44:	4225c204 	addi	r8,r8,-26872
    3e48:	8029883a 	mov	r20,r16
    3e4c:	04400084 	movi	r17,2
    3e50:	4021883a 	mov	r16,r8
    3e54:	b980004c 	andi	r6,r23,1
    3e58:	1009883a 	mov	r4,r2
    3e5c:	b82fd07a 	srai	r23,r23,1
    3e60:	180b883a 	mov	r5,r3
    3e64:	30000426 	beq	r6,zero,3e78 <_dtoa_r+0x12ec>
    3e68:	81800017 	ldw	r6,0(r16)
    3e6c:	81c00117 	ldw	r7,4(r16)
    3e70:	8c400044 	addi	r17,r17,1
    3e74:	000b7140 	call	b714 <__muldf3>
    3e78:	84000204 	addi	r16,r16,8
    3e7c:	b83ff51e 	bne	r23,zero,3e54 <__alt_mem_Flash_flash_data+0xf4003e54>
    3e80:	a021883a 	mov	r16,r20
    3e84:	182b883a 	mov	r21,r3
    3e88:	1029883a 	mov	r20,r2
    3e8c:	003c5506 	br	2fe4 <__alt_mem_Flash_flash_data+0xf4002fe4>
    3e90:	d9800517 	ldw	r6,20(sp)
    3e94:	d9000717 	ldw	r4,28(sp)
    3e98:	00c00c04 	movi	r3,48
    3e9c:	31800044 	addi	r6,r6,1
    3ea0:	d9800515 	stw	r6,20(sp)
    3ea4:	20c00005 	stb	r3,0(r4)
    3ea8:	02000c44 	movi	r8,49
    3eac:	003da206 	br	3538 <__alt_mem_Flash_flash_data+0xf4003538>
    3eb0:	89400117 	ldw	r5,4(r17)
    3eb4:	8009883a 	mov	r4,r16
    3eb8:	0005c080 	call	5c08 <_Balloc>
    3ebc:	89800417 	ldw	r6,16(r17)
    3ec0:	11000304 	addi	r4,r2,12
    3ec4:	89400304 	addi	r5,r17,12
    3ec8:	31800084 	addi	r6,r6,2
    3ecc:	318d883a 	add	r6,r6,r6
    3ed0:	318d883a 	add	r6,r6,r6
    3ed4:	1027883a 	mov	r19,r2
    3ed8:	00059ac0 	call	59ac <memcpy>
    3edc:	8009883a 	mov	r4,r16
    3ee0:	980b883a 	mov	r5,r19
    3ee4:	01800044 	movi	r6,1
    3ee8:	000638c0 	call	638c <__lshift>
    3eec:	1029883a 	mov	r20,r2
    3ef0:	003e8606 	br	390c <__alt_mem_Flash_flash_data+0xf400390c>
    3ef4:	00800e44 	movi	r2,57
    3ef8:	90809526 	beq	r18,r2,4150 <_dtoa_r+0x15c4>
    3efc:	92000044 	addi	r8,r18,1
    3f00:	003f2306 	br	3b90 <__alt_mem_Flash_flash_data+0xf4003b90>
    3f04:	9011883a 	mov	r8,r18
    3f08:	8825883a 	mov	r18,r17
    3f0c:	a023883a 	mov	r17,r20
    3f10:	003e3706 	br	37f0 <__alt_mem_Flash_flash_data+0xf40037f0>
    3f14:	002b883a 	mov	r21,zero
    3f18:	0023883a 	mov	r17,zero
    3f1c:	003f5606 	br	3c78 <__alt_mem_Flash_flash_data+0xf4003c78>
    3f20:	51bfffc4 	addi	r6,r10,-1
    3f24:	300490fa 	slli	r2,r6,3
    3f28:	00c000b4 	movhi	r3,2
    3f2c:	18e5cc04 	addi	r3,r3,-26832
    3f30:	1885883a 	add	r2,r3,r2
    3f34:	d9c00e17 	ldw	r7,56(sp)
    3f38:	11000017 	ldw	r4,0(r2)
    3f3c:	11400117 	ldw	r5,4(r2)
    3f40:	d8800717 	ldw	r2,28(sp)
    3f44:	d9801015 	stw	r6,64(sp)
    3f48:	880d883a 	mov	r6,r17
    3f4c:	da801615 	stw	r10,88(sp)
    3f50:	15c00044 	addi	r23,r2,1
    3f54:	000b7140 	call	b714 <__muldf3>
    3f58:	a80b883a 	mov	r5,r21
    3f5c:	a009883a 	mov	r4,r20
    3f60:	d8c01115 	stw	r3,68(sp)
    3f64:	d8800e15 	stw	r2,56(sp)
    3f68:	000c7080 	call	c708 <__fixdfsi>
    3f6c:	1009883a 	mov	r4,r2
    3f70:	1023883a 	mov	r17,r2
    3f74:	000c7900 	call	c790 <__floatsidf>
    3f78:	a009883a 	mov	r4,r20
    3f7c:	a80b883a 	mov	r5,r21
    3f80:	100d883a 	mov	r6,r2
    3f84:	180f883a 	mov	r7,r3
    3f88:	000be380 	call	be38 <__subdf3>
    3f8c:	1813883a 	mov	r9,r3
    3f90:	d8c00717 	ldw	r3,28(sp)
    3f94:	8c400c04 	addi	r17,r17,48
    3f98:	1011883a 	mov	r8,r2
    3f9c:	1c400005 	stb	r17,0(r3)
    3fa0:	da801617 	ldw	r10,88(sp)
    3fa4:	00800044 	movi	r2,1
    3fa8:	50802326 	beq	r10,r2,4038 <_dtoa_r+0x14ac>
    3fac:	d8800717 	ldw	r2,28(sp)
    3fb0:	b82b883a 	mov	r21,r23
    3fb4:	dc001315 	stw	r16,76(sp)
    3fb8:	12a9883a 	add	r20,r2,r10
    3fbc:	4807883a 	mov	r3,r9
    3fc0:	4005883a 	mov	r2,r8
    3fc4:	dc801415 	stw	r18,80(sp)
    3fc8:	000d883a 	mov	r6,zero
    3fcc:	01d00934 	movhi	r7,16420
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	180b883a 	mov	r5,r3
    3fd8:	000b7140 	call	b714 <__muldf3>
    3fdc:	180b883a 	mov	r5,r3
    3fe0:	1009883a 	mov	r4,r2
    3fe4:	1821883a 	mov	r16,r3
    3fe8:	1025883a 	mov	r18,r2
    3fec:	000c7080 	call	c708 <__fixdfsi>
    3ff0:	1009883a 	mov	r4,r2
    3ff4:	1023883a 	mov	r17,r2
    3ff8:	000c7900 	call	c790 <__floatsidf>
    3ffc:	9009883a 	mov	r4,r18
    4000:	800b883a 	mov	r5,r16
    4004:	100d883a 	mov	r6,r2
    4008:	180f883a 	mov	r7,r3
    400c:	8c400c04 	addi	r17,r17,48
    4010:	000be380 	call	be38 <__subdf3>
    4014:	ad400044 	addi	r21,r21,1
    4018:	ac7fffc5 	stb	r17,-1(r21)
    401c:	ad3fea1e 	bne	r21,r20,3fc8 <__alt_mem_Flash_flash_data+0xf4003fc8>
    4020:	1813883a 	mov	r9,r3
    4024:	d8c01017 	ldw	r3,64(sp)
    4028:	dc001317 	ldw	r16,76(sp)
    402c:	dc801417 	ldw	r18,80(sp)
    4030:	1011883a 	mov	r8,r2
    4034:	b8ef883a 	add	r23,r23,r3
    4038:	d9000e17 	ldw	r4,56(sp)
    403c:	d9401117 	ldw	r5,68(sp)
    4040:	000d883a 	mov	r6,zero
    4044:	01cff834 	movhi	r7,16352
    4048:	da001715 	stw	r8,92(sp)
    404c:	da401515 	stw	r9,84(sp)
    4050:	000a3680 	call	a368 <__adddf3>
    4054:	da001717 	ldw	r8,92(sp)
    4058:	da401517 	ldw	r9,84(sp)
    405c:	1009883a 	mov	r4,r2
    4060:	400d883a 	mov	r6,r8
    4064:	480f883a 	mov	r7,r9
    4068:	180b883a 	mov	r5,r3
    406c:	000b6340 	call	b634 <__ledf2>
    4070:	da001717 	ldw	r8,92(sp)
    4074:	da401517 	ldw	r9,84(sp)
    4078:	10003b0e 	bge	r2,zero,4168 <_dtoa_r+0x15dc>
    407c:	d9001217 	ldw	r4,72(sp)
    4080:	bd7fffc3 	ldbu	r21,-1(r23)
    4084:	d9000515 	stw	r4,20(sp)
    4088:	003d1c06 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    408c:	d8c00817 	ldw	r3,32(sp)
    4090:	18a9c83a 	sub	r20,r3,r2
    4094:	0005883a 	mov	r2,zero
    4098:	003d3706 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    409c:	00800044 	movi	r2,1
    40a0:	003dd006 	br	37e4 <__alt_mem_Flash_flash_data+0xf40037e4>
    40a4:	d8c00217 	ldw	r3,8(sp)
    40a8:	00800d84 	movi	r2,54
    40ac:	dd400917 	ldw	r21,36(sp)
    40b0:	10c5c83a 	sub	r2,r2,r3
    40b4:	dd000817 	ldw	r20,32(sp)
    40b8:	003d2f06 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    40bc:	9029883a 	mov	r20,r18
    40c0:	982b883a 	mov	r21,r19
    40c4:	04400084 	movi	r17,2
    40c8:	003bc606 	br	2fe4 <__alt_mem_Flash_flash_data+0xf4002fe4>
    40cc:	d8800617 	ldw	r2,24(sp)
    40d0:	103efc26 	beq	r2,zero,3cc4 <__alt_mem_Flash_flash_data+0xf4003cc4>
    40d4:	d8c00c17 	ldw	r3,48(sp)
    40d8:	00fc890e 	bge	zero,r3,3300 <__alt_mem_Flash_flash_data+0xf4003300>
    40dc:	a80b883a 	mov	r5,r21
    40e0:	a009883a 	mov	r4,r20
    40e4:	000d883a 	mov	r6,zero
    40e8:	01d00934 	movhi	r7,16420
    40ec:	000b7140 	call	b714 <__muldf3>
    40f0:	89000044 	addi	r4,r17,1
    40f4:	1029883a 	mov	r20,r2
    40f8:	182b883a 	mov	r21,r3
    40fc:	000c7900 	call	c790 <__floatsidf>
    4100:	a009883a 	mov	r4,r20
    4104:	a80b883a 	mov	r5,r21
    4108:	100d883a 	mov	r6,r2
    410c:	180f883a 	mov	r7,r3
    4110:	000b7140 	call	b714 <__muldf3>
    4114:	1009883a 	mov	r4,r2
    4118:	180b883a 	mov	r5,r3
    411c:	000d883a 	mov	r6,zero
    4120:	01d00734 	movhi	r7,16412
    4124:	000a3680 	call	a368 <__adddf3>
    4128:	d9000517 	ldw	r4,20(sp)
    412c:	1023883a 	mov	r17,r2
    4130:	00bf3034 	movhi	r2,64704
    4134:	213fffc4 	addi	r4,r4,-1
    4138:	1885883a 	add	r2,r3,r2
    413c:	d9001215 	stw	r4,72(sp)
    4140:	d8800e15 	stw	r2,56(sp)
    4144:	da800c17 	ldw	r10,48(sp)
    4148:	003bc306 	br	3058 <__alt_mem_Flash_flash_data+0xf4003058>
    414c:	b039883a 	mov	fp,r22
    4150:	01000e44 	movi	r4,57
    4154:	8825883a 	mov	r18,r17
    4158:	9dc00044 	addi	r23,r19,1
    415c:	99000005 	stb	r4,0(r19)
    4160:	a023883a 	mov	r17,r20
    4164:	003dae06 	br	3820 <__alt_mem_Flash_flash_data+0xf4003820>
    4168:	d9800e17 	ldw	r6,56(sp)
    416c:	d9c01117 	ldw	r7,68(sp)
    4170:	0009883a 	mov	r4,zero
    4174:	014ff834 	movhi	r5,16352
    4178:	da001715 	stw	r8,92(sp)
    417c:	da401515 	stw	r9,84(sp)
    4180:	000be380 	call	be38 <__subdf3>
    4184:	da001717 	ldw	r8,92(sp)
    4188:	da401517 	ldw	r9,84(sp)
    418c:	1009883a 	mov	r4,r2
    4190:	180b883a 	mov	r5,r3
    4194:	400d883a 	mov	r6,r8
    4198:	480f883a 	mov	r7,r9
    419c:	000b5540 	call	b554 <__gedf2>
    41a0:	00bc570e 	bge	zero,r2,3300 <__alt_mem_Flash_flash_data+0xf4003300>
    41a4:	01000c04 	movi	r4,48
    41a8:	00000106 	br	41b0 <_dtoa_r+0x1624>
    41ac:	102f883a 	mov	r23,r2
    41b0:	b8bfffc4 	addi	r2,r23,-1
    41b4:	10c00007 	ldb	r3,0(r2)
    41b8:	193ffc26 	beq	r3,r4,41ac <__alt_mem_Flash_flash_data+0xf40041ac>
    41bc:	d9801217 	ldw	r6,72(sp)
    41c0:	d9800515 	stw	r6,20(sp)
    41c4:	003c1f06 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    41c8:	d8801217 	ldw	r2,72(sp)
    41cc:	dc001117 	ldw	r16,68(sp)
    41d0:	d8800515 	stw	r2,20(sp)
    41d4:	003cc906 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    41d8:	dd801317 	ldw	r22,76(sp)
    41dc:	dc001117 	ldw	r16,68(sp)
    41e0:	dcc01417 	ldw	r19,80(sp)
    41e4:	dc801017 	ldw	r18,64(sp)
    41e8:	003c4506 	br	3300 <__alt_mem_Flash_flash_data+0xf4003300>
    41ec:	103e5d1e 	bne	r2,zero,3b64 <__alt_mem_Flash_flash_data+0xf4003b64>
    41f0:	4080004c 	andi	r2,r8,1
    41f4:	103e5b26 	beq	r2,zero,3b64 <__alt_mem_Flash_flash_data+0xf4003b64>
    41f8:	003e5706 	br	3b58 <__alt_mem_Flash_flash_data+0xf4003b58>
    41fc:	d8c00317 	ldw	r3,12(sp)
    4200:	00800084 	movi	r2,2
    4204:	10c00a16 	blt	r2,r3,4230 <_dtoa_r+0x16a4>
    4208:	d9000c17 	ldw	r4,48(sp)
    420c:	003e8306 	br	3c1c <__alt_mem_Flash_flash_data+0xf4003c1c>
    4210:	04400084 	movi	r17,2
    4214:	003b7306 	br	2fe4 <__alt_mem_Flash_flash_data+0xf4002fe4>
    4218:	d9801217 	ldw	r6,72(sp)
    421c:	d9800515 	stw	r6,20(sp)
    4220:	003cb606 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    4224:	d9001217 	ldw	r4,72(sp)
    4228:	d9000515 	stw	r4,20(sp)
    422c:	003c0506 	br	3244 <__alt_mem_Flash_flash_data+0xf4003244>
    4230:	d9800c17 	ldw	r6,48(sp)
    4234:	d9800615 	stw	r6,24(sp)
    4238:	003e8306 	br	3c48 <__alt_mem_Flash_flash_data+0xf4003c48>
    423c:	d9800317 	ldw	r6,12(sp)
    4240:	00800084 	movi	r2,2
    4244:	11800216 	blt	r2,r6,4250 <_dtoa_r+0x16c4>
    4248:	d8800c17 	ldw	r2,48(sp)
    424c:	003da606 	br	38e8 <__alt_mem_Flash_flash_data+0xf40038e8>
    4250:	d8800c17 	ldw	r2,48(sp)
    4254:	d8800615 	stw	r2,24(sp)
    4258:	003e7b06 	br	3c48 <__alt_mem_Flash_flash_data+0xf4003c48>
    425c:	05000044 	movi	r20,1
    4260:	003b0506 	br	2e78 <__alt_mem_Flash_flash_data+0xf4002e78>
    4264:	8009883a 	mov	r4,r16
    4268:	80001115 	stw	zero,68(r16)
    426c:	000b883a 	mov	r5,zero
    4270:	0005c080 	call	5c08 <_Balloc>
    4274:	d8800715 	stw	r2,28(sp)
    4278:	d8c00717 	ldw	r3,28(sp)
    427c:	00bfffc4 	movi	r2,-1
    4280:	01000044 	movi	r4,1
    4284:	d8800c15 	stw	r2,48(sp)
    4288:	80c01015 	stw	r3,64(r16)
    428c:	d9000b15 	stw	r4,44(sp)
    4290:	d8800615 	stw	r2,24(sp)
    4294:	d8002215 	stw	zero,136(sp)
    4298:	003c1906 	br	3300 <__alt_mem_Flash_flash_data+0xf4003300>
    429c:	193d2926 	beq	r3,r4,3744 <__alt_mem_Flash_flash_data+0xf4003744>
    42a0:	00c00f04 	movi	r3,60
    42a4:	1885c83a 	sub	r2,r3,r2
    42a8:	003d7b06 	br	3898 <__alt_mem_Flash_flash_data+0xf4003898>
    42ac:	000b883a 	mov	r5,zero
    42b0:	003b1006 	br	2ef4 <__alt_mem_Flash_flash_data+0xf4002ef4>

000042b4 <__sflush_r>:
    42b4:	2880030b 	ldhu	r2,12(r5)
    42b8:	defffb04 	addi	sp,sp,-20
    42bc:	dcc00315 	stw	r19,12(sp)
    42c0:	dc400115 	stw	r17,4(sp)
    42c4:	dfc00415 	stw	ra,16(sp)
    42c8:	dc800215 	stw	r18,8(sp)
    42cc:	dc000015 	stw	r16,0(sp)
    42d0:	10c0020c 	andi	r3,r2,8
    42d4:	2823883a 	mov	r17,r5
    42d8:	2027883a 	mov	r19,r4
    42dc:	1800311e 	bne	r3,zero,43a4 <__sflush_r+0xf0>
    42e0:	28c00117 	ldw	r3,4(r5)
    42e4:	10820014 	ori	r2,r2,2048
    42e8:	2880030d 	sth	r2,12(r5)
    42ec:	00c04b0e 	bge	zero,r3,441c <__sflush_r+0x168>
    42f0:	8a000a17 	ldw	r8,40(r17)
    42f4:	40002326 	beq	r8,zero,4384 <__sflush_r+0xd0>
    42f8:	9c000017 	ldw	r16,0(r19)
    42fc:	10c4000c 	andi	r3,r2,4096
    4300:	98000015 	stw	zero,0(r19)
    4304:	18004826 	beq	r3,zero,4428 <__sflush_r+0x174>
    4308:	89801417 	ldw	r6,80(r17)
    430c:	10c0010c 	andi	r3,r2,4
    4310:	18000626 	beq	r3,zero,432c <__sflush_r+0x78>
    4314:	88c00117 	ldw	r3,4(r17)
    4318:	88800c17 	ldw	r2,48(r17)
    431c:	30cdc83a 	sub	r6,r6,r3
    4320:	10000226 	beq	r2,zero,432c <__sflush_r+0x78>
    4324:	88800f17 	ldw	r2,60(r17)
    4328:	308dc83a 	sub	r6,r6,r2
    432c:	89400717 	ldw	r5,28(r17)
    4330:	9809883a 	mov	r4,r19
    4334:	000f883a 	mov	r7,zero
    4338:	403ee83a 	callr	r8
    433c:	00ffffc4 	movi	r3,-1
    4340:	10c04426 	beq	r2,r3,4454 <__sflush_r+0x1a0>
    4344:	88c0030b 	ldhu	r3,12(r17)
    4348:	89000417 	ldw	r4,16(r17)
    434c:	88000115 	stw	zero,4(r17)
    4350:	197dffcc 	andi	r5,r3,63487
    4354:	8940030d 	sth	r5,12(r17)
    4358:	89000015 	stw	r4,0(r17)
    435c:	18c4000c 	andi	r3,r3,4096
    4360:	18002c1e 	bne	r3,zero,4414 <__sflush_r+0x160>
    4364:	89400c17 	ldw	r5,48(r17)
    4368:	9c000015 	stw	r16,0(r19)
    436c:	28000526 	beq	r5,zero,4384 <__sflush_r+0xd0>
    4370:	88801004 	addi	r2,r17,64
    4374:	28800226 	beq	r5,r2,4380 <__sflush_r+0xcc>
    4378:	9809883a 	mov	r4,r19
    437c:	0004a0c0 	call	4a0c <_free_r>
    4380:	88000c15 	stw	zero,48(r17)
    4384:	0005883a 	mov	r2,zero
    4388:	dfc00417 	ldw	ra,16(sp)
    438c:	dcc00317 	ldw	r19,12(sp)
    4390:	dc800217 	ldw	r18,8(sp)
    4394:	dc400117 	ldw	r17,4(sp)
    4398:	dc000017 	ldw	r16,0(sp)
    439c:	dec00504 	addi	sp,sp,20
    43a0:	f800283a 	ret
    43a4:	2c800417 	ldw	r18,16(r5)
    43a8:	903ff626 	beq	r18,zero,4384 <__alt_mem_Flash_flash_data+0xf4004384>
    43ac:	2c000017 	ldw	r16,0(r5)
    43b0:	108000cc 	andi	r2,r2,3
    43b4:	2c800015 	stw	r18,0(r5)
    43b8:	84a1c83a 	sub	r16,r16,r18
    43bc:	1000131e 	bne	r2,zero,440c <__sflush_r+0x158>
    43c0:	28800517 	ldw	r2,20(r5)
    43c4:	88800215 	stw	r2,8(r17)
    43c8:	04000316 	blt	zero,r16,43d8 <__sflush_r+0x124>
    43cc:	003fed06 	br	4384 <__alt_mem_Flash_flash_data+0xf4004384>
    43d0:	90a5883a 	add	r18,r18,r2
    43d4:	043feb0e 	bge	zero,r16,4384 <__alt_mem_Flash_flash_data+0xf4004384>
    43d8:	88800917 	ldw	r2,36(r17)
    43dc:	89400717 	ldw	r5,28(r17)
    43e0:	800f883a 	mov	r7,r16
    43e4:	900d883a 	mov	r6,r18
    43e8:	9809883a 	mov	r4,r19
    43ec:	103ee83a 	callr	r2
    43f0:	80a1c83a 	sub	r16,r16,r2
    43f4:	00bff616 	blt	zero,r2,43d0 <__alt_mem_Flash_flash_data+0xf40043d0>
    43f8:	88c0030b 	ldhu	r3,12(r17)
    43fc:	00bfffc4 	movi	r2,-1
    4400:	18c01014 	ori	r3,r3,64
    4404:	88c0030d 	sth	r3,12(r17)
    4408:	003fdf06 	br	4388 <__alt_mem_Flash_flash_data+0xf4004388>
    440c:	0005883a 	mov	r2,zero
    4410:	003fec06 	br	43c4 <__alt_mem_Flash_flash_data+0xf40043c4>
    4414:	88801415 	stw	r2,80(r17)
    4418:	003fd206 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>
    441c:	28c00f17 	ldw	r3,60(r5)
    4420:	00ffb316 	blt	zero,r3,42f0 <__alt_mem_Flash_flash_data+0xf40042f0>
    4424:	003fd706 	br	4384 <__alt_mem_Flash_flash_data+0xf4004384>
    4428:	89400717 	ldw	r5,28(r17)
    442c:	000d883a 	mov	r6,zero
    4430:	9809883a 	mov	r4,r19
    4434:	01c00044 	movi	r7,1
    4438:	403ee83a 	callr	r8
    443c:	100d883a 	mov	r6,r2
    4440:	00bfffc4 	movi	r2,-1
    4444:	30801426 	beq	r6,r2,4498 <__sflush_r+0x1e4>
    4448:	8880030b 	ldhu	r2,12(r17)
    444c:	8a000a17 	ldw	r8,40(r17)
    4450:	003fae06 	br	430c <__alt_mem_Flash_flash_data+0xf400430c>
    4454:	98c00017 	ldw	r3,0(r19)
    4458:	183fba26 	beq	r3,zero,4344 <__alt_mem_Flash_flash_data+0xf4004344>
    445c:	01000744 	movi	r4,29
    4460:	19000626 	beq	r3,r4,447c <__sflush_r+0x1c8>
    4464:	01000584 	movi	r4,22
    4468:	19000426 	beq	r3,r4,447c <__sflush_r+0x1c8>
    446c:	88c0030b 	ldhu	r3,12(r17)
    4470:	18c01014 	ori	r3,r3,64
    4474:	88c0030d 	sth	r3,12(r17)
    4478:	003fc306 	br	4388 <__alt_mem_Flash_flash_data+0xf4004388>
    447c:	8880030b 	ldhu	r2,12(r17)
    4480:	88c00417 	ldw	r3,16(r17)
    4484:	88000115 	stw	zero,4(r17)
    4488:	10bdffcc 	andi	r2,r2,63487
    448c:	8880030d 	sth	r2,12(r17)
    4490:	88c00015 	stw	r3,0(r17)
    4494:	003fb306 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>
    4498:	98800017 	ldw	r2,0(r19)
    449c:	103fea26 	beq	r2,zero,4448 <__alt_mem_Flash_flash_data+0xf4004448>
    44a0:	00c00744 	movi	r3,29
    44a4:	10c00226 	beq	r2,r3,44b0 <__sflush_r+0x1fc>
    44a8:	00c00584 	movi	r3,22
    44ac:	10ffd21e 	bne	r2,r3,43f8 <__alt_mem_Flash_flash_data+0xf40043f8>
    44b0:	9c000015 	stw	r16,0(r19)
    44b4:	0005883a 	mov	r2,zero
    44b8:	003fb306 	br	4388 <__alt_mem_Flash_flash_data+0xf4004388>

000044bc <_fflush_r>:
    44bc:	defffd04 	addi	sp,sp,-12
    44c0:	dc000115 	stw	r16,4(sp)
    44c4:	dfc00215 	stw	ra,8(sp)
    44c8:	2021883a 	mov	r16,r4
    44cc:	20000226 	beq	r4,zero,44d8 <_fflush_r+0x1c>
    44d0:	20800e17 	ldw	r2,56(r4)
    44d4:	10000c26 	beq	r2,zero,4508 <_fflush_r+0x4c>
    44d8:	2880030f 	ldh	r2,12(r5)
    44dc:	1000051e 	bne	r2,zero,44f4 <_fflush_r+0x38>
    44e0:	0005883a 	mov	r2,zero
    44e4:	dfc00217 	ldw	ra,8(sp)
    44e8:	dc000117 	ldw	r16,4(sp)
    44ec:	dec00304 	addi	sp,sp,12
    44f0:	f800283a 	ret
    44f4:	8009883a 	mov	r4,r16
    44f8:	dfc00217 	ldw	ra,8(sp)
    44fc:	dc000117 	ldw	r16,4(sp)
    4500:	dec00304 	addi	sp,sp,12
    4504:	00042b41 	jmpi	42b4 <__sflush_r>
    4508:	d9400015 	stw	r5,0(sp)
    450c:	00048980 	call	4898 <__sinit>
    4510:	d9400017 	ldw	r5,0(sp)
    4514:	003ff006 	br	44d8 <__alt_mem_Flash_flash_data+0xf40044d8>

00004518 <fflush>:
    4518:	20000526 	beq	r4,zero,4530 <fflush+0x18>
    451c:	008000b4 	movhi	r2,2
    4520:	10afd504 	addi	r2,r2,-16556
    4524:	200b883a 	mov	r5,r4
    4528:	11000017 	ldw	r4,0(r2)
    452c:	00044bc1 	jmpi	44bc <_fflush_r>
    4530:	008000b4 	movhi	r2,2
    4534:	10afd404 	addi	r2,r2,-16560
    4538:	11000017 	ldw	r4,0(r2)
    453c:	01400034 	movhi	r5,0
    4540:	29512f04 	addi	r5,r5,17596
    4544:	0004dc01 	jmpi	4dc0 <_fwalk_reent>

00004548 <__fp_lock>:
    4548:	0005883a 	mov	r2,zero
    454c:	f800283a 	ret

00004550 <__fp_unlock>:
    4550:	0005883a 	mov	r2,zero
    4554:	f800283a 	ret

00004558 <_cleanup_r>:
    4558:	01400074 	movhi	r5,1
    455c:	2960f904 	addi	r5,r5,-31772
    4560:	0004dc01 	jmpi	4dc0 <_fwalk_reent>

00004564 <__sinit.part.1>:
    4564:	defff704 	addi	sp,sp,-36
    4568:	00c00034 	movhi	r3,0
    456c:	dfc00815 	stw	ra,32(sp)
    4570:	ddc00715 	stw	r23,28(sp)
    4574:	dd800615 	stw	r22,24(sp)
    4578:	dd400515 	stw	r21,20(sp)
    457c:	dd000415 	stw	r20,16(sp)
    4580:	dcc00315 	stw	r19,12(sp)
    4584:	dc800215 	stw	r18,8(sp)
    4588:	dc400115 	stw	r17,4(sp)
    458c:	dc000015 	stw	r16,0(sp)
    4590:	18d15604 	addi	r3,r3,17752
    4594:	24000117 	ldw	r16,4(r4)
    4598:	20c00f15 	stw	r3,60(r4)
    459c:	2080bb04 	addi	r2,r4,748
    45a0:	00c000c4 	movi	r3,3
    45a4:	20c0b915 	stw	r3,740(r4)
    45a8:	2080ba15 	stw	r2,744(r4)
    45ac:	2000b815 	stw	zero,736(r4)
    45b0:	05c00204 	movi	r23,8
    45b4:	00800104 	movi	r2,4
    45b8:	2025883a 	mov	r18,r4
    45bc:	b80d883a 	mov	r6,r23
    45c0:	81001704 	addi	r4,r16,92
    45c4:	000b883a 	mov	r5,zero
    45c8:	80000015 	stw	zero,0(r16)
    45cc:	80000115 	stw	zero,4(r16)
    45d0:	80000215 	stw	zero,8(r16)
    45d4:	8080030d 	sth	r2,12(r16)
    45d8:	80001915 	stw	zero,100(r16)
    45dc:	8000038d 	sth	zero,14(r16)
    45e0:	80000415 	stw	zero,16(r16)
    45e4:	80000515 	stw	zero,20(r16)
    45e8:	80000615 	stw	zero,24(r16)
    45ec:	0005ae40 	call	5ae4 <memset>
    45f0:	05800034 	movhi	r22,0
    45f4:	94400217 	ldw	r17,8(r18)
    45f8:	05400034 	movhi	r21,0
    45fc:	05000034 	movhi	r20,0
    4600:	04c00034 	movhi	r19,0
    4604:	b59b1c04 	addi	r22,r22,27760
    4608:	ad5b3304 	addi	r21,r21,27852
    460c:	a51b5204 	addi	r20,r20,27976
    4610:	9cdb6904 	addi	r19,r19,28068
    4614:	85800815 	stw	r22,32(r16)
    4618:	85400915 	stw	r21,36(r16)
    461c:	85000a15 	stw	r20,40(r16)
    4620:	84c00b15 	stw	r19,44(r16)
    4624:	84000715 	stw	r16,28(r16)
    4628:	00800284 	movi	r2,10
    462c:	8880030d 	sth	r2,12(r17)
    4630:	00800044 	movi	r2,1
    4634:	89001704 	addi	r4,r17,92
    4638:	b80d883a 	mov	r6,r23
    463c:	000b883a 	mov	r5,zero
    4640:	88000015 	stw	zero,0(r17)
    4644:	88000115 	stw	zero,4(r17)
    4648:	88000215 	stw	zero,8(r17)
    464c:	88001915 	stw	zero,100(r17)
    4650:	8880038d 	sth	r2,14(r17)
    4654:	88000415 	stw	zero,16(r17)
    4658:	88000515 	stw	zero,20(r17)
    465c:	88000615 	stw	zero,24(r17)
    4660:	0005ae40 	call	5ae4 <memset>
    4664:	94000317 	ldw	r16,12(r18)
    4668:	00800484 	movi	r2,18
    466c:	8c400715 	stw	r17,28(r17)
    4670:	8d800815 	stw	r22,32(r17)
    4674:	8d400915 	stw	r21,36(r17)
    4678:	8d000a15 	stw	r20,40(r17)
    467c:	8cc00b15 	stw	r19,44(r17)
    4680:	8080030d 	sth	r2,12(r16)
    4684:	00800084 	movi	r2,2
    4688:	80000015 	stw	zero,0(r16)
    468c:	80000115 	stw	zero,4(r16)
    4690:	80000215 	stw	zero,8(r16)
    4694:	80001915 	stw	zero,100(r16)
    4698:	8080038d 	sth	r2,14(r16)
    469c:	80000415 	stw	zero,16(r16)
    46a0:	80000515 	stw	zero,20(r16)
    46a4:	80000615 	stw	zero,24(r16)
    46a8:	81001704 	addi	r4,r16,92
    46ac:	000b883a 	mov	r5,zero
    46b0:	b80d883a 	mov	r6,r23
    46b4:	0005ae40 	call	5ae4 <memset>
    46b8:	00800044 	movi	r2,1
    46bc:	84000715 	stw	r16,28(r16)
    46c0:	85800815 	stw	r22,32(r16)
    46c4:	85400915 	stw	r21,36(r16)
    46c8:	85000a15 	stw	r20,40(r16)
    46cc:	84c00b15 	stw	r19,44(r16)
    46d0:	90800e15 	stw	r2,56(r18)
    46d4:	dfc00817 	ldw	ra,32(sp)
    46d8:	ddc00717 	ldw	r23,28(sp)
    46dc:	dd800617 	ldw	r22,24(sp)
    46e0:	dd400517 	ldw	r21,20(sp)
    46e4:	dd000417 	ldw	r20,16(sp)
    46e8:	dcc00317 	ldw	r19,12(sp)
    46ec:	dc800217 	ldw	r18,8(sp)
    46f0:	dc400117 	ldw	r17,4(sp)
    46f4:	dc000017 	ldw	r16,0(sp)
    46f8:	dec00904 	addi	sp,sp,36
    46fc:	f800283a 	ret

00004700 <__sfmoreglue>:
    4700:	defffc04 	addi	sp,sp,-16
    4704:	dc400115 	stw	r17,4(sp)
    4708:	2c7fffc4 	addi	r17,r5,-1
    470c:	8c401a24 	muli	r17,r17,104
    4710:	dc800215 	stw	r18,8(sp)
    4714:	2825883a 	mov	r18,r5
    4718:	89401d04 	addi	r5,r17,116
    471c:	dc000015 	stw	r16,0(sp)
    4720:	dfc00315 	stw	ra,12(sp)
    4724:	000511c0 	call	511c <_malloc_r>
    4728:	1021883a 	mov	r16,r2
    472c:	10000726 	beq	r2,zero,474c <__sfmoreglue+0x4c>
    4730:	11000304 	addi	r4,r2,12
    4734:	10000015 	stw	zero,0(r2)
    4738:	14800115 	stw	r18,4(r2)
    473c:	11000215 	stw	r4,8(r2)
    4740:	000b883a 	mov	r5,zero
    4744:	89801a04 	addi	r6,r17,104
    4748:	0005ae40 	call	5ae4 <memset>
    474c:	8005883a 	mov	r2,r16
    4750:	dfc00317 	ldw	ra,12(sp)
    4754:	dc800217 	ldw	r18,8(sp)
    4758:	dc400117 	ldw	r17,4(sp)
    475c:	dc000017 	ldw	r16,0(sp)
    4760:	dec00404 	addi	sp,sp,16
    4764:	f800283a 	ret

00004768 <__sfp>:
    4768:	008000b4 	movhi	r2,2
    476c:	defffb04 	addi	sp,sp,-20
    4770:	10afd404 	addi	r2,r2,-16560
    4774:	dc800215 	stw	r18,8(sp)
    4778:	14800017 	ldw	r18,0(r2)
    477c:	dcc00315 	stw	r19,12(sp)
    4780:	dfc00415 	stw	ra,16(sp)
    4784:	90800e17 	ldw	r2,56(r18)
    4788:	dc400115 	stw	r17,4(sp)
    478c:	dc000015 	stw	r16,0(sp)
    4790:	2027883a 	mov	r19,r4
    4794:	1000021e 	bne	r2,zero,47a0 <__sfp+0x38>
    4798:	9009883a 	mov	r4,r18
    479c:	00045640 	call	4564 <__sinit.part.1>
    47a0:	9480b804 	addi	r18,r18,736
    47a4:	047fffc4 	movi	r17,-1
    47a8:	91400117 	ldw	r5,4(r18)
    47ac:	94000217 	ldw	r16,8(r18)
    47b0:	297fffc4 	addi	r5,r5,-1
    47b4:	28000a16 	blt	r5,zero,47e0 <__sfp+0x78>
    47b8:	8080030f 	ldh	r2,12(r16)
    47bc:	10000c26 	beq	r2,zero,47f0 <__sfp+0x88>
    47c0:	80c01d04 	addi	r3,r16,116
    47c4:	00000206 	br	47d0 <__sfp+0x68>
    47c8:	18bfe60f 	ldh	r2,-104(r3)
    47cc:	10000826 	beq	r2,zero,47f0 <__sfp+0x88>
    47d0:	297fffc4 	addi	r5,r5,-1
    47d4:	1c3ffd04 	addi	r16,r3,-12
    47d8:	18c01a04 	addi	r3,r3,104
    47dc:	2c7ffa1e 	bne	r5,r17,47c8 <__alt_mem_Flash_flash_data+0xf40047c8>
    47e0:	90800017 	ldw	r2,0(r18)
    47e4:	10001d26 	beq	r2,zero,485c <__sfp+0xf4>
    47e8:	1025883a 	mov	r18,r2
    47ec:	003fee06 	br	47a8 <__alt_mem_Flash_flash_data+0xf40047a8>
    47f0:	00bfffc4 	movi	r2,-1
    47f4:	8080038d 	sth	r2,14(r16)
    47f8:	00800044 	movi	r2,1
    47fc:	8080030d 	sth	r2,12(r16)
    4800:	80001915 	stw	zero,100(r16)
    4804:	80000015 	stw	zero,0(r16)
    4808:	80000215 	stw	zero,8(r16)
    480c:	80000115 	stw	zero,4(r16)
    4810:	80000415 	stw	zero,16(r16)
    4814:	80000515 	stw	zero,20(r16)
    4818:	80000615 	stw	zero,24(r16)
    481c:	81001704 	addi	r4,r16,92
    4820:	000b883a 	mov	r5,zero
    4824:	01800204 	movi	r6,8
    4828:	0005ae40 	call	5ae4 <memset>
    482c:	8005883a 	mov	r2,r16
    4830:	80000c15 	stw	zero,48(r16)
    4834:	80000d15 	stw	zero,52(r16)
    4838:	80001115 	stw	zero,68(r16)
    483c:	80001215 	stw	zero,72(r16)
    4840:	dfc00417 	ldw	ra,16(sp)
    4844:	dcc00317 	ldw	r19,12(sp)
    4848:	dc800217 	ldw	r18,8(sp)
    484c:	dc400117 	ldw	r17,4(sp)
    4850:	dc000017 	ldw	r16,0(sp)
    4854:	dec00504 	addi	sp,sp,20
    4858:	f800283a 	ret
    485c:	9809883a 	mov	r4,r19
    4860:	01400104 	movi	r5,4
    4864:	00047000 	call	4700 <__sfmoreglue>
    4868:	90800015 	stw	r2,0(r18)
    486c:	103fde1e 	bne	r2,zero,47e8 <__alt_mem_Flash_flash_data+0xf40047e8>
    4870:	00800304 	movi	r2,12
    4874:	98800015 	stw	r2,0(r19)
    4878:	0005883a 	mov	r2,zero
    487c:	003ff006 	br	4840 <__alt_mem_Flash_flash_data+0xf4004840>

00004880 <_cleanup>:
    4880:	008000b4 	movhi	r2,2
    4884:	10afd404 	addi	r2,r2,-16560
    4888:	11000017 	ldw	r4,0(r2)
    488c:	01400074 	movhi	r5,1
    4890:	2960f904 	addi	r5,r5,-31772
    4894:	0004dc01 	jmpi	4dc0 <_fwalk_reent>

00004898 <__sinit>:
    4898:	20800e17 	ldw	r2,56(r4)
    489c:	10000126 	beq	r2,zero,48a4 <__sinit+0xc>
    48a0:	f800283a 	ret
    48a4:	00045641 	jmpi	4564 <__sinit.part.1>

000048a8 <__sfp_lock_acquire>:
    48a8:	f800283a 	ret

000048ac <__sfp_lock_release>:
    48ac:	f800283a 	ret

000048b0 <__sinit_lock_acquire>:
    48b0:	f800283a 	ret

000048b4 <__sinit_lock_release>:
    48b4:	f800283a 	ret

000048b8 <__fp_lock_all>:
    48b8:	008000b4 	movhi	r2,2
    48bc:	10afd504 	addi	r2,r2,-16556
    48c0:	11000017 	ldw	r4,0(r2)
    48c4:	01400034 	movhi	r5,0
    48c8:	29515204 	addi	r5,r5,17736
    48cc:	0004cfc1 	jmpi	4cfc <_fwalk>

000048d0 <__fp_unlock_all>:
    48d0:	008000b4 	movhi	r2,2
    48d4:	10afd504 	addi	r2,r2,-16556
    48d8:	11000017 	ldw	r4,0(r2)
    48dc:	01400034 	movhi	r5,0
    48e0:	29515404 	addi	r5,r5,17744
    48e4:	0004cfc1 	jmpi	4cfc <_fwalk>

000048e8 <_malloc_trim_r>:
    48e8:	defffb04 	addi	sp,sp,-20
    48ec:	dcc00315 	stw	r19,12(sp)
    48f0:	04c000b4 	movhi	r19,2
    48f4:	dc800215 	stw	r18,8(sp)
    48f8:	dc400115 	stw	r17,4(sp)
    48fc:	dc000015 	stw	r16,0(sp)
    4900:	dfc00415 	stw	ra,16(sp)
    4904:	2821883a 	mov	r16,r5
    4908:	9ce8b704 	addi	r19,r19,-23844
    490c:	2025883a 	mov	r18,r4
    4910:	000d4440 	call	d444 <__malloc_lock>
    4914:	98800217 	ldw	r2,8(r19)
    4918:	14400117 	ldw	r17,4(r2)
    491c:	00bfff04 	movi	r2,-4
    4920:	88a2703a 	and	r17,r17,r2
    4924:	8c21c83a 	sub	r16,r17,r16
    4928:	8403fbc4 	addi	r16,r16,4079
    492c:	8020d33a 	srli	r16,r16,12
    4930:	0083ffc4 	movi	r2,4095
    4934:	843fffc4 	addi	r16,r16,-1
    4938:	8020933a 	slli	r16,r16,12
    493c:	1400060e 	bge	r2,r16,4958 <_malloc_trim_r+0x70>
    4940:	9009883a 	mov	r4,r18
    4944:	000b883a 	mov	r5,zero
    4948:	0006c1c0 	call	6c1c <_sbrk_r>
    494c:	98c00217 	ldw	r3,8(r19)
    4950:	1c47883a 	add	r3,r3,r17
    4954:	10c00a26 	beq	r2,r3,4980 <_malloc_trim_r+0x98>
    4958:	9009883a 	mov	r4,r18
    495c:	000d5640 	call	d564 <__malloc_unlock>
    4960:	0005883a 	mov	r2,zero
    4964:	dfc00417 	ldw	ra,16(sp)
    4968:	dcc00317 	ldw	r19,12(sp)
    496c:	dc800217 	ldw	r18,8(sp)
    4970:	dc400117 	ldw	r17,4(sp)
    4974:	dc000017 	ldw	r16,0(sp)
    4978:	dec00504 	addi	sp,sp,20
    497c:	f800283a 	ret
    4980:	9009883a 	mov	r4,r18
    4984:	040bc83a 	sub	r5,zero,r16
    4988:	0006c1c0 	call	6c1c <_sbrk_r>
    498c:	00ffffc4 	movi	r3,-1
    4990:	10c00d26 	beq	r2,r3,49c8 <_malloc_trim_r+0xe0>
    4994:	00c000b4 	movhi	r3,2
    4998:	18f8a204 	addi	r3,r3,-7544
    499c:	18800017 	ldw	r2,0(r3)
    49a0:	99000217 	ldw	r4,8(r19)
    49a4:	8c23c83a 	sub	r17,r17,r16
    49a8:	8c400054 	ori	r17,r17,1
    49ac:	1421c83a 	sub	r16,r2,r16
    49b0:	24400115 	stw	r17,4(r4)
    49b4:	9009883a 	mov	r4,r18
    49b8:	1c000015 	stw	r16,0(r3)
    49bc:	000d5640 	call	d564 <__malloc_unlock>
    49c0:	00800044 	movi	r2,1
    49c4:	003fe706 	br	4964 <__alt_mem_Flash_flash_data+0xf4004964>
    49c8:	9009883a 	mov	r4,r18
    49cc:	000b883a 	mov	r5,zero
    49d0:	0006c1c0 	call	6c1c <_sbrk_r>
    49d4:	99000217 	ldw	r4,8(r19)
    49d8:	014003c4 	movi	r5,15
    49dc:	1107c83a 	sub	r3,r2,r4
    49e0:	28ffdd0e 	bge	r5,r3,4958 <__alt_mem_Flash_flash_data+0xf4004958>
    49e4:	014000b4 	movhi	r5,2
    49e8:	296fd704 	addi	r5,r5,-16548
    49ec:	29400017 	ldw	r5,0(r5)
    49f0:	18c00054 	ori	r3,r3,1
    49f4:	20c00115 	stw	r3,4(r4)
    49f8:	00c000b4 	movhi	r3,2
    49fc:	1145c83a 	sub	r2,r2,r5
    4a00:	18f8a204 	addi	r3,r3,-7544
    4a04:	18800015 	stw	r2,0(r3)
    4a08:	003fd306 	br	4958 <__alt_mem_Flash_flash_data+0xf4004958>

00004a0c <_free_r>:
    4a0c:	28004c26 	beq	r5,zero,4b40 <_free_r+0x134>
    4a10:	defffd04 	addi	sp,sp,-12
    4a14:	dc400115 	stw	r17,4(sp)
    4a18:	dc000015 	stw	r16,0(sp)
    4a1c:	2023883a 	mov	r17,r4
    4a20:	2821883a 	mov	r16,r5
    4a24:	dfc00215 	stw	ra,8(sp)
    4a28:	000d4440 	call	d444 <__malloc_lock>
    4a2c:	813fff17 	ldw	r4,-4(r16)
    4a30:	00bfff84 	movi	r2,-2
    4a34:	024000b4 	movhi	r9,2
    4a38:	81bffe04 	addi	r6,r16,-8
    4a3c:	2084703a 	and	r2,r4,r2
    4a40:	4a68b704 	addi	r9,r9,-23844
    4a44:	308b883a 	add	r5,r6,r2
    4a48:	2a000117 	ldw	r8,4(r5)
    4a4c:	49c00217 	ldw	r7,8(r9)
    4a50:	00ffff04 	movi	r3,-4
    4a54:	40c6703a 	and	r3,r8,r3
    4a58:	39405326 	beq	r7,r5,4ba8 <_free_r+0x19c>
    4a5c:	28c00115 	stw	r3,4(r5)
    4a60:	2100004c 	andi	r4,r4,1
    4a64:	2000091e 	bne	r4,zero,4a8c <_free_r+0x80>
    4a68:	81fffe17 	ldw	r7,-8(r16)
    4a6c:	4a000204 	addi	r8,r9,8
    4a70:	31cdc83a 	sub	r6,r6,r7
    4a74:	31000217 	ldw	r4,8(r6)
    4a78:	11c5883a 	add	r2,r2,r7
    4a7c:	22006126 	beq	r4,r8,4c04 <_free_r+0x1f8>
    4a80:	31c00317 	ldw	r7,12(r6)
    4a84:	21c00315 	stw	r7,12(r4)
    4a88:	39000215 	stw	r4,8(r7)
    4a8c:	28c9883a 	add	r4,r5,r3
    4a90:	21c00117 	ldw	r7,4(r4)
    4a94:	39c0004c 	andi	r7,r7,1
    4a98:	38000d1e 	bne	r7,zero,4ad0 <_free_r+0xc4>
    4a9c:	29000217 	ldw	r4,8(r5)
    4aa0:	10c5883a 	add	r2,r2,r3
    4aa4:	00c000b4 	movhi	r3,2
    4aa8:	18e8b904 	addi	r3,r3,-23836
    4aac:	20c07526 	beq	r4,r3,4c84 <_free_r+0x278>
    4ab0:	29c00317 	ldw	r7,12(r5)
    4ab4:	11400054 	ori	r5,r2,1
    4ab8:	3087883a 	add	r3,r6,r2
    4abc:	21c00315 	stw	r7,12(r4)
    4ac0:	39000215 	stw	r4,8(r7)
    4ac4:	31400115 	stw	r5,4(r6)
    4ac8:	18800015 	stw	r2,0(r3)
    4acc:	00000406 	br	4ae0 <_free_r+0xd4>
    4ad0:	10c00054 	ori	r3,r2,1
    4ad4:	30c00115 	stw	r3,4(r6)
    4ad8:	3087883a 	add	r3,r6,r2
    4adc:	18800015 	stw	r2,0(r3)
    4ae0:	00c07fc4 	movi	r3,511
    4ae4:	18801736 	bltu	r3,r2,4b44 <_free_r+0x138>
    4ae8:	1004d0fa 	srli	r2,r2,3
    4aec:	01400044 	movi	r5,1
    4af0:	49000117 	ldw	r4,4(r9)
    4af4:	1087883a 	add	r3,r2,r2
    4af8:	18c7883a 	add	r3,r3,r3
    4afc:	1005d0ba 	srai	r2,r2,2
    4b00:	18c7883a 	add	r3,r3,r3
    4b04:	1a47883a 	add	r3,r3,r9
    4b08:	19c00217 	ldw	r7,8(r3)
    4b0c:	2884983a 	sll	r2,r5,r2
    4b10:	30c00315 	stw	r3,12(r6)
    4b14:	31c00215 	stw	r7,8(r6)
    4b18:	1104b03a 	or	r2,r2,r4
    4b1c:	19800215 	stw	r6,8(r3)
    4b20:	48800115 	stw	r2,4(r9)
    4b24:	39800315 	stw	r6,12(r7)
    4b28:	8809883a 	mov	r4,r17
    4b2c:	dfc00217 	ldw	ra,8(sp)
    4b30:	dc400117 	ldw	r17,4(sp)
    4b34:	dc000017 	ldw	r16,0(sp)
    4b38:	dec00304 	addi	sp,sp,12
    4b3c:	000d5641 	jmpi	d564 <__malloc_unlock>
    4b40:	f800283a 	ret
    4b44:	1006d27a 	srli	r3,r2,9
    4b48:	01000104 	movi	r4,4
    4b4c:	20c04036 	bltu	r4,r3,4c50 <_free_r+0x244>
    4b50:	1006d1ba 	srli	r3,r2,6
    4b54:	19400e04 	addi	r5,r3,56
    4b58:	2947883a 	add	r3,r5,r5
    4b5c:	18c7883a 	add	r3,r3,r3
    4b60:	18c7883a 	add	r3,r3,r3
    4b64:	1a49883a 	add	r4,r3,r9
    4b68:	20c00217 	ldw	r3,8(r4)
    4b6c:	01c000b4 	movhi	r7,2
    4b70:	39e8b704 	addi	r7,r7,-23844
    4b74:	19003b26 	beq	r3,r4,4c64 <_free_r+0x258>
    4b78:	01ffff04 	movi	r7,-4
    4b7c:	19400117 	ldw	r5,4(r3)
    4b80:	29ca703a 	and	r5,r5,r7
    4b84:	1140022e 	bgeu	r2,r5,4b90 <_free_r+0x184>
    4b88:	18c00217 	ldw	r3,8(r3)
    4b8c:	20fffb1e 	bne	r4,r3,4b7c <__alt_mem_Flash_flash_data+0xf4004b7c>
    4b90:	18800317 	ldw	r2,12(r3)
    4b94:	30800315 	stw	r2,12(r6)
    4b98:	30c00215 	stw	r3,8(r6)
    4b9c:	11800215 	stw	r6,8(r2)
    4ba0:	19800315 	stw	r6,12(r3)
    4ba4:	003fe006 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4ba8:	2100004c 	andi	r4,r4,1
    4bac:	1885883a 	add	r2,r3,r2
    4bb0:	2000071e 	bne	r4,zero,4bd0 <_free_r+0x1c4>
    4bb4:	817ffe17 	ldw	r5,-8(r16)
    4bb8:	314dc83a 	sub	r6,r6,r5
    4bbc:	30c00317 	ldw	r3,12(r6)
    4bc0:	31000217 	ldw	r4,8(r6)
    4bc4:	1145883a 	add	r2,r2,r5
    4bc8:	20c00315 	stw	r3,12(r4)
    4bcc:	19000215 	stw	r4,8(r3)
    4bd0:	10c00054 	ori	r3,r2,1
    4bd4:	30c00115 	stw	r3,4(r6)
    4bd8:	00c000b4 	movhi	r3,2
    4bdc:	18efd804 	addi	r3,r3,-16544
    4be0:	18c00017 	ldw	r3,0(r3)
    4be4:	49800215 	stw	r6,8(r9)
    4be8:	10ffcf36 	bltu	r2,r3,4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4bec:	008000b4 	movhi	r2,2
    4bf0:	10b87f04 	addi	r2,r2,-7684
    4bf4:	11400017 	ldw	r5,0(r2)
    4bf8:	8809883a 	mov	r4,r17
    4bfc:	00048e80 	call	48e8 <_malloc_trim_r>
    4c00:	003fc906 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4c04:	28c9883a 	add	r4,r5,r3
    4c08:	21000117 	ldw	r4,4(r4)
    4c0c:	2100004c 	andi	r4,r4,1
    4c10:	20000a1e 	bne	r4,zero,4c3c <_free_r+0x230>
    4c14:	29000317 	ldw	r4,12(r5)
    4c18:	29400217 	ldw	r5,8(r5)
    4c1c:	10c5883a 	add	r2,r2,r3
    4c20:	10c00054 	ori	r3,r2,1
    4c24:	29000315 	stw	r4,12(r5)
    4c28:	21400215 	stw	r5,8(r4)
    4c2c:	30c00115 	stw	r3,4(r6)
    4c30:	308d883a 	add	r6,r6,r2
    4c34:	30800015 	stw	r2,0(r6)
    4c38:	003fbb06 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4c3c:	10c00054 	ori	r3,r2,1
    4c40:	30c00115 	stw	r3,4(r6)
    4c44:	308d883a 	add	r6,r6,r2
    4c48:	30800015 	stw	r2,0(r6)
    4c4c:	003fb606 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4c50:	01000504 	movi	r4,20
    4c54:	20c01436 	bltu	r4,r3,4ca8 <_free_r+0x29c>
    4c58:	194016c4 	addi	r5,r3,91
    4c5c:	2947883a 	add	r3,r5,r5
    4c60:	003fbe06 	br	4b5c <__alt_mem_Flash_flash_data+0xf4004b5c>
    4c64:	280bd0ba 	srai	r5,r5,2
    4c68:	00800044 	movi	r2,1
    4c6c:	39000117 	ldw	r4,4(r7)
    4c70:	114a983a 	sll	r5,r2,r5
    4c74:	1805883a 	mov	r2,r3
    4c78:	2908b03a 	or	r4,r5,r4
    4c7c:	39000115 	stw	r4,4(r7)
    4c80:	003fc406 	br	4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    4c84:	49800515 	stw	r6,20(r9)
    4c88:	49800415 	stw	r6,16(r9)
    4c8c:	10c00054 	ori	r3,r2,1
    4c90:	31000315 	stw	r4,12(r6)
    4c94:	31000215 	stw	r4,8(r6)
    4c98:	30c00115 	stw	r3,4(r6)
    4c9c:	308d883a 	add	r6,r6,r2
    4ca0:	30800015 	stw	r2,0(r6)
    4ca4:	003fa006 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    4ca8:	01001504 	movi	r4,84
    4cac:	20c00436 	bltu	r4,r3,4cc0 <_free_r+0x2b4>
    4cb0:	1006d33a 	srli	r3,r2,12
    4cb4:	19401b84 	addi	r5,r3,110
    4cb8:	2947883a 	add	r3,r5,r5
    4cbc:	003fa706 	br	4b5c <__alt_mem_Flash_flash_data+0xf4004b5c>
    4cc0:	01005504 	movi	r4,340
    4cc4:	20c00436 	bltu	r4,r3,4cd8 <_free_r+0x2cc>
    4cc8:	1006d3fa 	srli	r3,r2,15
    4ccc:	19401dc4 	addi	r5,r3,119
    4cd0:	2947883a 	add	r3,r5,r5
    4cd4:	003fa106 	br	4b5c <__alt_mem_Flash_flash_data+0xf4004b5c>
    4cd8:	01015504 	movi	r4,1364
    4cdc:	20c00436 	bltu	r4,r3,4cf0 <_free_r+0x2e4>
    4ce0:	1006d4ba 	srli	r3,r2,18
    4ce4:	19401f04 	addi	r5,r3,124
    4ce8:	2947883a 	add	r3,r5,r5
    4cec:	003f9b06 	br	4b5c <__alt_mem_Flash_flash_data+0xf4004b5c>
    4cf0:	00c03f04 	movi	r3,252
    4cf4:	01401f84 	movi	r5,126
    4cf8:	003f9806 	br	4b5c <__alt_mem_Flash_flash_data+0xf4004b5c>

00004cfc <_fwalk>:
    4cfc:	defff704 	addi	sp,sp,-36
    4d00:	dd000415 	stw	r20,16(sp)
    4d04:	dfc00815 	stw	ra,32(sp)
    4d08:	ddc00715 	stw	r23,28(sp)
    4d0c:	dd800615 	stw	r22,24(sp)
    4d10:	dd400515 	stw	r21,20(sp)
    4d14:	dcc00315 	stw	r19,12(sp)
    4d18:	dc800215 	stw	r18,8(sp)
    4d1c:	dc400115 	stw	r17,4(sp)
    4d20:	dc000015 	stw	r16,0(sp)
    4d24:	2500b804 	addi	r20,r4,736
    4d28:	a0002326 	beq	r20,zero,4db8 <_fwalk+0xbc>
    4d2c:	282b883a 	mov	r21,r5
    4d30:	002f883a 	mov	r23,zero
    4d34:	05800044 	movi	r22,1
    4d38:	04ffffc4 	movi	r19,-1
    4d3c:	a4400117 	ldw	r17,4(r20)
    4d40:	a4800217 	ldw	r18,8(r20)
    4d44:	8c7fffc4 	addi	r17,r17,-1
    4d48:	88000d16 	blt	r17,zero,4d80 <_fwalk+0x84>
    4d4c:	94000304 	addi	r16,r18,12
    4d50:	94800384 	addi	r18,r18,14
    4d54:	80c0000b 	ldhu	r3,0(r16)
    4d58:	8c7fffc4 	addi	r17,r17,-1
    4d5c:	813ffd04 	addi	r4,r16,-12
    4d60:	b0c0042e 	bgeu	r22,r3,4d74 <_fwalk+0x78>
    4d64:	90c0000f 	ldh	r3,0(r18)
    4d68:	1cc00226 	beq	r3,r19,4d74 <_fwalk+0x78>
    4d6c:	a83ee83a 	callr	r21
    4d70:	b8aeb03a 	or	r23,r23,r2
    4d74:	84001a04 	addi	r16,r16,104
    4d78:	94801a04 	addi	r18,r18,104
    4d7c:	8cfff51e 	bne	r17,r19,4d54 <__alt_mem_Flash_flash_data+0xf4004d54>
    4d80:	a5000017 	ldw	r20,0(r20)
    4d84:	a03fed1e 	bne	r20,zero,4d3c <__alt_mem_Flash_flash_data+0xf4004d3c>
    4d88:	b805883a 	mov	r2,r23
    4d8c:	dfc00817 	ldw	ra,32(sp)
    4d90:	ddc00717 	ldw	r23,28(sp)
    4d94:	dd800617 	ldw	r22,24(sp)
    4d98:	dd400517 	ldw	r21,20(sp)
    4d9c:	dd000417 	ldw	r20,16(sp)
    4da0:	dcc00317 	ldw	r19,12(sp)
    4da4:	dc800217 	ldw	r18,8(sp)
    4da8:	dc400117 	ldw	r17,4(sp)
    4dac:	dc000017 	ldw	r16,0(sp)
    4db0:	dec00904 	addi	sp,sp,36
    4db4:	f800283a 	ret
    4db8:	002f883a 	mov	r23,zero
    4dbc:	003ff206 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>

00004dc0 <_fwalk_reent>:
    4dc0:	defff704 	addi	sp,sp,-36
    4dc4:	dd400515 	stw	r21,20(sp)
    4dc8:	dfc00815 	stw	ra,32(sp)
    4dcc:	ddc00715 	stw	r23,28(sp)
    4dd0:	dd800615 	stw	r22,24(sp)
    4dd4:	dd000415 	stw	r20,16(sp)
    4dd8:	dcc00315 	stw	r19,12(sp)
    4ddc:	dc800215 	stw	r18,8(sp)
    4de0:	dc400115 	stw	r17,4(sp)
    4de4:	dc000015 	stw	r16,0(sp)
    4de8:	2540b804 	addi	r21,r4,736
    4dec:	a8002326 	beq	r21,zero,4e7c <_fwalk_reent+0xbc>
    4df0:	2829883a 	mov	r20,r5
    4df4:	202d883a 	mov	r22,r4
    4df8:	002f883a 	mov	r23,zero
    4dfc:	04c00044 	movi	r19,1
    4e00:	04bfffc4 	movi	r18,-1
    4e04:	ac400117 	ldw	r17,4(r21)
    4e08:	ac000217 	ldw	r16,8(r21)
    4e0c:	8c7fffc4 	addi	r17,r17,-1
    4e10:	88000c16 	blt	r17,zero,4e44 <_fwalk_reent+0x84>
    4e14:	84000304 	addi	r16,r16,12
    4e18:	80c0000b 	ldhu	r3,0(r16)
    4e1c:	8c7fffc4 	addi	r17,r17,-1
    4e20:	817ffd04 	addi	r5,r16,-12
    4e24:	98c0052e 	bgeu	r19,r3,4e3c <_fwalk_reent+0x7c>
    4e28:	80c0008f 	ldh	r3,2(r16)
    4e2c:	b009883a 	mov	r4,r22
    4e30:	1c800226 	beq	r3,r18,4e3c <_fwalk_reent+0x7c>
    4e34:	a03ee83a 	callr	r20
    4e38:	b8aeb03a 	or	r23,r23,r2
    4e3c:	84001a04 	addi	r16,r16,104
    4e40:	8cbff51e 	bne	r17,r18,4e18 <__alt_mem_Flash_flash_data+0xf4004e18>
    4e44:	ad400017 	ldw	r21,0(r21)
    4e48:	a83fee1e 	bne	r21,zero,4e04 <__alt_mem_Flash_flash_data+0xf4004e04>
    4e4c:	b805883a 	mov	r2,r23
    4e50:	dfc00817 	ldw	ra,32(sp)
    4e54:	ddc00717 	ldw	r23,28(sp)
    4e58:	dd800617 	ldw	r22,24(sp)
    4e5c:	dd400517 	ldw	r21,20(sp)
    4e60:	dd000417 	ldw	r20,16(sp)
    4e64:	dcc00317 	ldw	r19,12(sp)
    4e68:	dc800217 	ldw	r18,8(sp)
    4e6c:	dc400117 	ldw	r17,4(sp)
    4e70:	dc000017 	ldw	r16,0(sp)
    4e74:	dec00904 	addi	sp,sp,36
    4e78:	f800283a 	ret
    4e7c:	002f883a 	mov	r23,zero
    4e80:	003ff206 	br	4e4c <__alt_mem_Flash_flash_data+0xf4004e4c>

00004e84 <_setlocale_r>:
    4e84:	30001b26 	beq	r6,zero,4ef4 <_setlocale_r+0x70>
    4e88:	014000b4 	movhi	r5,2
    4e8c:	defffe04 	addi	sp,sp,-8
    4e90:	2965b204 	addi	r5,r5,-26936
    4e94:	3009883a 	mov	r4,r6
    4e98:	dc000015 	stw	r16,0(sp)
    4e9c:	dfc00115 	stw	ra,4(sp)
    4ea0:	3021883a 	mov	r16,r6
    4ea4:	00006cc0 	call	6cc <strcmp>
    4ea8:	1000061e 	bne	r2,zero,4ec4 <_setlocale_r+0x40>
    4eac:	008000b4 	movhi	r2,2
    4eb0:	10a5b104 	addi	r2,r2,-26940
    4eb4:	dfc00117 	ldw	ra,4(sp)
    4eb8:	dc000017 	ldw	r16,0(sp)
    4ebc:	dec00204 	addi	sp,sp,8
    4ec0:	f800283a 	ret
    4ec4:	014000b4 	movhi	r5,2
    4ec8:	2965b104 	addi	r5,r5,-26940
    4ecc:	8009883a 	mov	r4,r16
    4ed0:	00006cc0 	call	6cc <strcmp>
    4ed4:	103ff526 	beq	r2,zero,4eac <__alt_mem_Flash_flash_data+0xf4004eac>
    4ed8:	014000b4 	movhi	r5,2
    4edc:	29659c04 	addi	r5,r5,-27024
    4ee0:	8009883a 	mov	r4,r16
    4ee4:	00006cc0 	call	6cc <strcmp>
    4ee8:	103ff026 	beq	r2,zero,4eac <__alt_mem_Flash_flash_data+0xf4004eac>
    4eec:	0005883a 	mov	r2,zero
    4ef0:	003ff006 	br	4eb4 <__alt_mem_Flash_flash_data+0xf4004eb4>
    4ef4:	008000b4 	movhi	r2,2
    4ef8:	10a5b104 	addi	r2,r2,-26940
    4efc:	f800283a 	ret

00004f00 <__locale_charset>:
    4f00:	008000b4 	movhi	r2,2
    4f04:	10a8a104 	addi	r2,r2,-23932
    4f08:	f800283a 	ret

00004f0c <__locale_mb_cur_max>:
    4f0c:	008000b4 	movhi	r2,2
    4f10:	10afd604 	addi	r2,r2,-16552
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	f800283a 	ret

00004f1c <__locale_msgcharset>:
    4f1c:	008000b4 	movhi	r2,2
    4f20:	10a89904 	addi	r2,r2,-23964
    4f24:	f800283a 	ret

00004f28 <__locale_cjk_lang>:
    4f28:	0005883a 	mov	r2,zero
    4f2c:	f800283a 	ret

00004f30 <_localeconv_r>:
    4f30:	008000b4 	movhi	r2,2
    4f34:	10a8a904 	addi	r2,r2,-23900
    4f38:	f800283a 	ret

00004f3c <setlocale>:
    4f3c:	00c000b4 	movhi	r3,2
    4f40:	18efd504 	addi	r3,r3,-16556
    4f44:	2005883a 	mov	r2,r4
    4f48:	19000017 	ldw	r4,0(r3)
    4f4c:	280d883a 	mov	r6,r5
    4f50:	100b883a 	mov	r5,r2
    4f54:	0004e841 	jmpi	4e84 <_setlocale_r>

00004f58 <localeconv>:
    4f58:	008000b4 	movhi	r2,2
    4f5c:	10a8a904 	addi	r2,r2,-23900
    4f60:	f800283a 	ret

00004f64 <__smakebuf_r>:
    4f64:	2880030b 	ldhu	r2,12(r5)
    4f68:	10c0008c 	andi	r3,r2,2
    4f6c:	1800401e 	bne	r3,zero,5070 <__smakebuf_r+0x10c>
    4f70:	deffec04 	addi	sp,sp,-80
    4f74:	dc000f15 	stw	r16,60(sp)
    4f78:	2821883a 	mov	r16,r5
    4f7c:	2940038f 	ldh	r5,14(r5)
    4f80:	dc401015 	stw	r17,64(sp)
    4f84:	dfc01315 	stw	ra,76(sp)
    4f88:	dcc01215 	stw	r19,72(sp)
    4f8c:	dc801115 	stw	r18,68(sp)
    4f90:	2023883a 	mov	r17,r4
    4f94:	28001b16 	blt	r5,zero,5004 <__smakebuf_r+0xa0>
    4f98:	d80d883a 	mov	r6,sp
    4f9c:	00086c80 	call	86c8 <_fstat_r>
    4fa0:	10001716 	blt	r2,zero,5000 <__smakebuf_r+0x9c>
    4fa4:	d8800117 	ldw	r2,4(sp)
    4fa8:	00e00014 	movui	r3,32768
    4fac:	10bc000c 	andi	r2,r2,61440
    4fb0:	10c03726 	beq	r2,r3,5090 <__smakebuf_r+0x12c>
    4fb4:	80c0030b 	ldhu	r3,12(r16)
    4fb8:	18c20014 	ori	r3,r3,2048
    4fbc:	80c0030d 	sth	r3,12(r16)
    4fc0:	00c80004 	movi	r3,8192
    4fc4:	10c03c1e 	bne	r2,r3,50b8 <__smakebuf_r+0x154>
    4fc8:	8140038f 	ldh	r5,14(r16)
    4fcc:	8809883a 	mov	r4,r17
    4fd0:	0008be00 	call	8be0 <_isatty_r>
    4fd4:	10004e26 	beq	r2,zero,5110 <__smakebuf_r+0x1ac>
    4fd8:	8080030b 	ldhu	r2,12(r16)
    4fdc:	04c00044 	movi	r19,1
    4fe0:	80c010c4 	addi	r3,r16,67
    4fe4:	14c4b03a 	or	r2,r2,r19
    4fe8:	8080030d 	sth	r2,12(r16)
    4fec:	80c00015 	stw	r3,0(r16)
    4ff0:	80c00415 	stw	r3,16(r16)
    4ff4:	84c00515 	stw	r19,20(r16)
    4ff8:	04810004 	movi	r18,1024
    4ffc:	00000706 	br	501c <__smakebuf_r+0xb8>
    5000:	8080030b 	ldhu	r2,12(r16)
    5004:	10c0200c 	andi	r3,r2,128
    5008:	18001f1e 	bne	r3,zero,5088 <__smakebuf_r+0x124>
    500c:	04810004 	movi	r18,1024
    5010:	10820014 	ori	r2,r2,2048
    5014:	8080030d 	sth	r2,12(r16)
    5018:	0027883a 	mov	r19,zero
    501c:	8809883a 	mov	r4,r17
    5020:	900b883a 	mov	r5,r18
    5024:	000511c0 	call	511c <_malloc_r>
    5028:	10002e26 	beq	r2,zero,50e4 <__smakebuf_r+0x180>
    502c:	80c0030b 	ldhu	r3,12(r16)
    5030:	01000034 	movhi	r4,0
    5034:	21115604 	addi	r4,r4,17752
    5038:	89000f15 	stw	r4,60(r17)
    503c:	18c02014 	ori	r3,r3,128
    5040:	80c0030d 	sth	r3,12(r16)
    5044:	80800015 	stw	r2,0(r16)
    5048:	80800415 	stw	r2,16(r16)
    504c:	84800515 	stw	r18,20(r16)
    5050:	98001c1e 	bne	r19,zero,50c4 <__smakebuf_r+0x160>
    5054:	dfc01317 	ldw	ra,76(sp)
    5058:	dcc01217 	ldw	r19,72(sp)
    505c:	dc801117 	ldw	r18,68(sp)
    5060:	dc401017 	ldw	r17,64(sp)
    5064:	dc000f17 	ldw	r16,60(sp)
    5068:	dec01404 	addi	sp,sp,80
    506c:	f800283a 	ret
    5070:	288010c4 	addi	r2,r5,67
    5074:	28800015 	stw	r2,0(r5)
    5078:	28800415 	stw	r2,16(r5)
    507c:	00800044 	movi	r2,1
    5080:	28800515 	stw	r2,20(r5)
    5084:	f800283a 	ret
    5088:	04801004 	movi	r18,64
    508c:	003fe006 	br	5010 <__alt_mem_Flash_flash_data+0xf4005010>
    5090:	81000a17 	ldw	r4,40(r16)
    5094:	00c00034 	movhi	r3,0
    5098:	18db5204 	addi	r3,r3,27976
    509c:	20ffc51e 	bne	r4,r3,4fb4 <__alt_mem_Flash_flash_data+0xf4004fb4>
    50a0:	80c0030b 	ldhu	r3,12(r16)
    50a4:	01010004 	movi	r4,1024
    50a8:	81001315 	stw	r4,76(r16)
    50ac:	1906b03a 	or	r3,r3,r4
    50b0:	80c0030d 	sth	r3,12(r16)
    50b4:	003fc206 	br	4fc0 <__alt_mem_Flash_flash_data+0xf4004fc0>
    50b8:	0027883a 	mov	r19,zero
    50bc:	04810004 	movi	r18,1024
    50c0:	003fd606 	br	501c <__alt_mem_Flash_flash_data+0xf400501c>
    50c4:	8140038f 	ldh	r5,14(r16)
    50c8:	8809883a 	mov	r4,r17
    50cc:	0008be00 	call	8be0 <_isatty_r>
    50d0:	103fe026 	beq	r2,zero,5054 <__alt_mem_Flash_flash_data+0xf4005054>
    50d4:	8080030b 	ldhu	r2,12(r16)
    50d8:	10800054 	ori	r2,r2,1
    50dc:	8080030d 	sth	r2,12(r16)
    50e0:	003fdc06 	br	5054 <__alt_mem_Flash_flash_data+0xf4005054>
    50e4:	8080030b 	ldhu	r2,12(r16)
    50e8:	10c0800c 	andi	r3,r2,512
    50ec:	183fd91e 	bne	r3,zero,5054 <__alt_mem_Flash_flash_data+0xf4005054>
    50f0:	10800094 	ori	r2,r2,2
    50f4:	80c010c4 	addi	r3,r16,67
    50f8:	8080030d 	sth	r2,12(r16)
    50fc:	00800044 	movi	r2,1
    5100:	80c00015 	stw	r3,0(r16)
    5104:	80c00415 	stw	r3,16(r16)
    5108:	80800515 	stw	r2,20(r16)
    510c:	003fd106 	br	5054 <__alt_mem_Flash_flash_data+0xf4005054>
    5110:	04c00044 	movi	r19,1
    5114:	04810004 	movi	r18,1024
    5118:	003fc006 	br	501c <__alt_mem_Flash_flash_data+0xf400501c>

0000511c <_malloc_r>:
    511c:	defff504 	addi	sp,sp,-44
    5120:	dc800315 	stw	r18,12(sp)
    5124:	dfc00a15 	stw	ra,40(sp)
    5128:	df000915 	stw	fp,36(sp)
    512c:	ddc00815 	stw	r23,32(sp)
    5130:	dd800715 	stw	r22,28(sp)
    5134:	dd400615 	stw	r21,24(sp)
    5138:	dd000515 	stw	r20,20(sp)
    513c:	dcc00415 	stw	r19,16(sp)
    5140:	dc400215 	stw	r17,8(sp)
    5144:	dc000115 	stw	r16,4(sp)
    5148:	288002c4 	addi	r2,r5,11
    514c:	00c00584 	movi	r3,22
    5150:	2025883a 	mov	r18,r4
    5154:	18802a2e 	bgeu	r3,r2,5200 <_malloc_r+0xe4>
    5158:	047ffe04 	movi	r17,-8
    515c:	1462703a 	and	r17,r2,r17
    5160:	88009e16 	blt	r17,zero,53dc <_malloc_r+0x2c0>
    5164:	89409d36 	bltu	r17,r5,53dc <_malloc_r+0x2c0>
    5168:	000d4440 	call	d444 <__malloc_lock>
    516c:	00807dc4 	movi	r2,503
    5170:	14402736 	bltu	r2,r17,5210 <_malloc_r+0xf4>
    5174:	8806d0fa 	srli	r3,r17,3
    5178:	04c000b4 	movhi	r19,2
    517c:	9ce8b704 	addi	r19,r19,-23844
    5180:	18c5883a 	add	r2,r3,r3
    5184:	1085883a 	add	r2,r2,r2
    5188:	1085883a 	add	r2,r2,r2
    518c:	9885883a 	add	r2,r19,r2
    5190:	14000317 	ldw	r16,12(r2)
    5194:	80814a26 	beq	r16,r2,56c0 <_malloc_r+0x5a4>
    5198:	80c00117 	ldw	r3,4(r16)
    519c:	81000317 	ldw	r4,12(r16)
    51a0:	00bfff04 	movi	r2,-4
    51a4:	1884703a 	and	r2,r3,r2
    51a8:	81400217 	ldw	r5,8(r16)
    51ac:	8085883a 	add	r2,r16,r2
    51b0:	10c00117 	ldw	r3,4(r2)
    51b4:	29000315 	stw	r4,12(r5)
    51b8:	21400215 	stw	r5,8(r4)
    51bc:	18c00054 	ori	r3,r3,1
    51c0:	10c00115 	stw	r3,4(r2)
    51c4:	9009883a 	mov	r4,r18
    51c8:	000d5640 	call	d564 <__malloc_unlock>
    51cc:	80800204 	addi	r2,r16,8
    51d0:	dfc00a17 	ldw	ra,40(sp)
    51d4:	df000917 	ldw	fp,36(sp)
    51d8:	ddc00817 	ldw	r23,32(sp)
    51dc:	dd800717 	ldw	r22,28(sp)
    51e0:	dd400617 	ldw	r21,24(sp)
    51e4:	dd000517 	ldw	r20,20(sp)
    51e8:	dcc00417 	ldw	r19,16(sp)
    51ec:	dc800317 	ldw	r18,12(sp)
    51f0:	dc400217 	ldw	r17,8(sp)
    51f4:	dc000117 	ldw	r16,4(sp)
    51f8:	dec00b04 	addi	sp,sp,44
    51fc:	f800283a 	ret
    5200:	04400404 	movi	r17,16
    5204:	89407536 	bltu	r17,r5,53dc <_malloc_r+0x2c0>
    5208:	000d4440 	call	d444 <__malloc_lock>
    520c:	003fd906 	br	5174 <__alt_mem_Flash_flash_data+0xf4005174>
    5210:	8806d27a 	srli	r3,r17,9
    5214:	18007526 	beq	r3,zero,53ec <_malloc_r+0x2d0>
    5218:	00800104 	movi	r2,4
    521c:	10c0ef36 	bltu	r2,r3,55dc <_malloc_r+0x4c0>
    5220:	8806d1ba 	srli	r3,r17,6
    5224:	19c00e04 	addi	r7,r3,56
    5228:	39cb883a 	add	r5,r7,r7
    522c:	04c000b4 	movhi	r19,2
    5230:	294b883a 	add	r5,r5,r5
    5234:	9ce8b704 	addi	r19,r19,-23844
    5238:	294b883a 	add	r5,r5,r5
    523c:	994b883a 	add	r5,r19,r5
    5240:	2c000317 	ldw	r16,12(r5)
    5244:	2c000e26 	beq	r5,r16,5280 <_malloc_r+0x164>
    5248:	80800117 	ldw	r2,4(r16)
    524c:	01bfff04 	movi	r6,-4
    5250:	010003c4 	movi	r4,15
    5254:	1184703a 	and	r2,r2,r6
    5258:	1447c83a 	sub	r3,r2,r17
    525c:	20c00716 	blt	r4,r3,527c <_malloc_r+0x160>
    5260:	1800650e 	bge	r3,zero,53f8 <_malloc_r+0x2dc>
    5264:	84000317 	ldw	r16,12(r16)
    5268:	2c000526 	beq	r5,r16,5280 <_malloc_r+0x164>
    526c:	80800117 	ldw	r2,4(r16)
    5270:	1184703a 	and	r2,r2,r6
    5274:	1447c83a 	sub	r3,r2,r17
    5278:	20fff90e 	bge	r4,r3,5260 <__alt_mem_Flash_flash_data+0xf4005260>
    527c:	39ffffc4 	addi	r7,r7,-1
    5280:	38c00044 	addi	r3,r7,1
    5284:	018000b4 	movhi	r6,2
    5288:	9c000417 	ldw	r16,16(r19)
    528c:	31a8b704 	addi	r6,r6,-23844
    5290:	32400204 	addi	r9,r6,8
    5294:	82410326 	beq	r16,r9,56a4 <_malloc_r+0x588>
    5298:	81000117 	ldw	r4,4(r16)
    529c:	00bfff04 	movi	r2,-4
    52a0:	208e703a 	and	r7,r4,r2
    52a4:	3c45c83a 	sub	r2,r7,r17
    52a8:	010003c4 	movi	r4,15
    52ac:	2080ee16 	blt	r4,r2,5668 <_malloc_r+0x54c>
    52b0:	32400515 	stw	r9,20(r6)
    52b4:	32400415 	stw	r9,16(r6)
    52b8:	1000510e 	bge	r2,zero,5400 <_malloc_r+0x2e4>
    52bc:	00807fc4 	movi	r2,511
    52c0:	11c0ce36 	bltu	r2,r7,55fc <_malloc_r+0x4e0>
    52c4:	3808d0fa 	srli	r4,r7,3
    52c8:	01c00044 	movi	r7,1
    52cc:	30800117 	ldw	r2,4(r6)
    52d0:	210b883a 	add	r5,r4,r4
    52d4:	294b883a 	add	r5,r5,r5
    52d8:	2009d0ba 	srai	r4,r4,2
    52dc:	294b883a 	add	r5,r5,r5
    52e0:	298b883a 	add	r5,r5,r6
    52e4:	2a000217 	ldw	r8,8(r5)
    52e8:	3908983a 	sll	r4,r7,r4
    52ec:	81400315 	stw	r5,12(r16)
    52f0:	82000215 	stw	r8,8(r16)
    52f4:	2088b03a 	or	r4,r4,r2
    52f8:	2c000215 	stw	r16,8(r5)
    52fc:	31000115 	stw	r4,4(r6)
    5300:	44000315 	stw	r16,12(r8)
    5304:	1805d0ba 	srai	r2,r3,2
    5308:	01400044 	movi	r5,1
    530c:	288a983a 	sll	r5,r5,r2
    5310:	21404336 	bltu	r4,r5,5420 <_malloc_r+0x304>
    5314:	2144703a 	and	r2,r4,r5
    5318:	10000a1e 	bne	r2,zero,5344 <_malloc_r+0x228>
    531c:	00bfff04 	movi	r2,-4
    5320:	294b883a 	add	r5,r5,r5
    5324:	1886703a 	and	r3,r3,r2
    5328:	2144703a 	and	r2,r4,r5
    532c:	18c00104 	addi	r3,r3,4
    5330:	1000041e 	bne	r2,zero,5344 <_malloc_r+0x228>
    5334:	294b883a 	add	r5,r5,r5
    5338:	2144703a 	and	r2,r4,r5
    533c:	18c00104 	addi	r3,r3,4
    5340:	103ffc26 	beq	r2,zero,5334 <__alt_mem_Flash_flash_data+0xf4005334>
    5344:	023fff04 	movi	r8,-4
    5348:	01c003c4 	movi	r7,15
    534c:	18c5883a 	add	r2,r3,r3
    5350:	1085883a 	add	r2,r2,r2
    5354:	1085883a 	add	r2,r2,r2
    5358:	9895883a 	add	r10,r19,r2
    535c:	52c00304 	addi	r11,r10,12
    5360:	1819883a 	mov	r12,r3
    5364:	5c000017 	ldw	r16,0(r11)
    5368:	59bffd04 	addi	r6,r11,-12
    536c:	8180041e 	bne	r16,r6,5380 <_malloc_r+0x264>
    5370:	0000ce06 	br	56ac <_malloc_r+0x590>
    5374:	2000d70e 	bge	r4,zero,56d4 <_malloc_r+0x5b8>
    5378:	84000317 	ldw	r16,12(r16)
    537c:	8180cb26 	beq	r16,r6,56ac <_malloc_r+0x590>
    5380:	80800117 	ldw	r2,4(r16)
    5384:	1204703a 	and	r2,r2,r8
    5388:	1449c83a 	sub	r4,r2,r17
    538c:	393ff90e 	bge	r7,r4,5374 <__alt_mem_Flash_flash_data+0xf4005374>
    5390:	80800317 	ldw	r2,12(r16)
    5394:	80c00217 	ldw	r3,8(r16)
    5398:	89400054 	ori	r5,r17,1
    539c:	81400115 	stw	r5,4(r16)
    53a0:	18800315 	stw	r2,12(r3)
    53a4:	10c00215 	stw	r3,8(r2)
    53a8:	8463883a 	add	r17,r16,r17
    53ac:	9c400515 	stw	r17,20(r19)
    53b0:	9c400415 	stw	r17,16(r19)
    53b4:	20800054 	ori	r2,r4,1
    53b8:	88800115 	stw	r2,4(r17)
    53bc:	8a400315 	stw	r9,12(r17)
    53c0:	8a400215 	stw	r9,8(r17)
    53c4:	8923883a 	add	r17,r17,r4
    53c8:	89000015 	stw	r4,0(r17)
    53cc:	9009883a 	mov	r4,r18
    53d0:	000d5640 	call	d564 <__malloc_unlock>
    53d4:	80800204 	addi	r2,r16,8
    53d8:	003f7d06 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    53dc:	00800304 	movi	r2,12
    53e0:	90800015 	stw	r2,0(r18)
    53e4:	0005883a 	mov	r2,zero
    53e8:	003f7906 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    53ec:	01401f84 	movi	r5,126
    53f0:	01c00fc4 	movi	r7,63
    53f4:	003f8d06 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    53f8:	81000317 	ldw	r4,12(r16)
    53fc:	003f6a06 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5400:	81c5883a 	add	r2,r16,r7
    5404:	10c00117 	ldw	r3,4(r2)
    5408:	9009883a 	mov	r4,r18
    540c:	18c00054 	ori	r3,r3,1
    5410:	10c00115 	stw	r3,4(r2)
    5414:	000d5640 	call	d564 <__malloc_unlock>
    5418:	80800204 	addi	r2,r16,8
    541c:	003f6c06 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    5420:	9c000217 	ldw	r16,8(r19)
    5424:	00bfff04 	movi	r2,-4
    5428:	85800117 	ldw	r22,4(r16)
    542c:	b0ac703a 	and	r22,r22,r2
    5430:	b4400336 	bltu	r22,r17,5440 <_malloc_r+0x324>
    5434:	b445c83a 	sub	r2,r22,r17
    5438:	00c003c4 	movi	r3,15
    543c:	18805d16 	blt	r3,r2,55b4 <_malloc_r+0x498>
    5440:	05c000b4 	movhi	r23,2
    5444:	008000b4 	movhi	r2,2
    5448:	bdefd704 	addi	r23,r23,-16548
    544c:	10b87f04 	addi	r2,r2,-7684
    5450:	15400017 	ldw	r21,0(r2)
    5454:	b9000017 	ldw	r4,0(r23)
    5458:	00ffffc4 	movi	r3,-1
    545c:	858d883a 	add	r6,r16,r22
    5460:	8d6b883a 	add	r21,r17,r21
    5464:	20c0e426 	beq	r4,r3,57f8 <_malloc_r+0x6dc>
    5468:	ad4403c4 	addi	r21,r21,4111
    546c:	00fc0004 	movi	r3,-4096
    5470:	a8ea703a 	and	r21,r21,r3
    5474:	9009883a 	mov	r4,r18
    5478:	a80b883a 	mov	r5,r21
    547c:	d9800015 	stw	r6,0(sp)
    5480:	0006c1c0 	call	6c1c <_sbrk_r>
    5484:	00ffffc4 	movi	r3,-1
    5488:	1029883a 	mov	r20,r2
    548c:	d9800017 	ldw	r6,0(sp)
    5490:	10c0a426 	beq	r2,r3,5724 <_malloc_r+0x608>
    5494:	1180a236 	bltu	r2,r6,5720 <_malloc_r+0x604>
    5498:	070000b4 	movhi	fp,2
    549c:	e738a204 	addi	fp,fp,-7544
    54a0:	e0c00017 	ldw	r3,0(fp)
    54a4:	a8c7883a 	add	r3,r21,r3
    54a8:	e0c00015 	stw	r3,0(fp)
    54ac:	3500da26 	beq	r6,r20,5818 <_malloc_r+0x6fc>
    54b0:	b9000017 	ldw	r4,0(r23)
    54b4:	00bfffc4 	movi	r2,-1
    54b8:	2080e426 	beq	r4,r2,584c <_malloc_r+0x730>
    54bc:	a185c83a 	sub	r2,r20,r6
    54c0:	1885883a 	add	r2,r3,r2
    54c4:	e0800015 	stw	r2,0(fp)
    54c8:	a0c001cc 	andi	r3,r20,7
    54cc:	1800b526 	beq	r3,zero,57a4 <_malloc_r+0x688>
    54d0:	a0e9c83a 	sub	r20,r20,r3
    54d4:	00840204 	movi	r2,4104
    54d8:	a5000204 	addi	r20,r20,8
    54dc:	10c7c83a 	sub	r3,r2,r3
    54e0:	a545883a 	add	r2,r20,r21
    54e4:	1083ffcc 	andi	r2,r2,4095
    54e8:	18abc83a 	sub	r21,r3,r2
    54ec:	9009883a 	mov	r4,r18
    54f0:	a80b883a 	mov	r5,r21
    54f4:	0006c1c0 	call	6c1c <_sbrk_r>
    54f8:	00ffffc4 	movi	r3,-1
    54fc:	10c0d026 	beq	r2,r3,5840 <_malloc_r+0x724>
    5500:	1507c83a 	sub	r3,r2,r20
    5504:	a8c7883a 	add	r3,r21,r3
    5508:	18c00054 	ori	r3,r3,1
    550c:	e0800017 	ldw	r2,0(fp)
    5510:	9d000215 	stw	r20,8(r19)
    5514:	a0c00115 	stw	r3,4(r20)
    5518:	a887883a 	add	r3,r21,r2
    551c:	e0c00015 	stw	r3,0(fp)
    5520:	84c00e26 	beq	r16,r19,555c <_malloc_r+0x440>
    5524:	018003c4 	movi	r6,15
    5528:	3580a02e 	bgeu	r6,r22,57ac <_malloc_r+0x690>
    552c:	81400117 	ldw	r5,4(r16)
    5530:	013ffe04 	movi	r4,-8
    5534:	b0bffd04 	addi	r2,r22,-12
    5538:	1104703a 	and	r2,r2,r4
    553c:	2900004c 	andi	r4,r5,1
    5540:	1108b03a 	or	r4,r2,r4
    5544:	81000115 	stw	r4,4(r16)
    5548:	01400144 	movi	r5,5
    554c:	8089883a 	add	r4,r16,r2
    5550:	21400115 	stw	r5,4(r4)
    5554:	21400215 	stw	r5,8(r4)
    5558:	3080c036 	bltu	r6,r2,585c <_malloc_r+0x740>
    555c:	008000b4 	movhi	r2,2
    5560:	10b87e04 	addi	r2,r2,-7688
    5564:	11000017 	ldw	r4,0(r2)
    5568:	20c0012e 	bgeu	r4,r3,5570 <_malloc_r+0x454>
    556c:	10c00015 	stw	r3,0(r2)
    5570:	008000b4 	movhi	r2,2
    5574:	10b87d04 	addi	r2,r2,-7692
    5578:	11000017 	ldw	r4,0(r2)
    557c:	9c000217 	ldw	r16,8(r19)
    5580:	20c0012e 	bgeu	r4,r3,5588 <_malloc_r+0x46c>
    5584:	10c00015 	stw	r3,0(r2)
    5588:	80c00117 	ldw	r3,4(r16)
    558c:	00bfff04 	movi	r2,-4
    5590:	1886703a 	and	r3,r3,r2
    5594:	1c45c83a 	sub	r2,r3,r17
    5598:	1c400236 	bltu	r3,r17,55a4 <_malloc_r+0x488>
    559c:	00c003c4 	movi	r3,15
    55a0:	18800416 	blt	r3,r2,55b4 <_malloc_r+0x498>
    55a4:	9009883a 	mov	r4,r18
    55a8:	000d5640 	call	d564 <__malloc_unlock>
    55ac:	0005883a 	mov	r2,zero
    55b0:	003f0706 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    55b4:	88c00054 	ori	r3,r17,1
    55b8:	80c00115 	stw	r3,4(r16)
    55bc:	8463883a 	add	r17,r16,r17
    55c0:	10800054 	ori	r2,r2,1
    55c4:	9c400215 	stw	r17,8(r19)
    55c8:	88800115 	stw	r2,4(r17)
    55cc:	9009883a 	mov	r4,r18
    55d0:	000d5640 	call	d564 <__malloc_unlock>
    55d4:	80800204 	addi	r2,r16,8
    55d8:	003efd06 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    55dc:	00800504 	movi	r2,20
    55e0:	10c0482e 	bgeu	r2,r3,5704 <_malloc_r+0x5e8>
    55e4:	00801504 	movi	r2,84
    55e8:	10c06836 	bltu	r2,r3,578c <_malloc_r+0x670>
    55ec:	8806d33a 	srli	r3,r17,12
    55f0:	19c01b84 	addi	r7,r3,110
    55f4:	39cb883a 	add	r5,r7,r7
    55f8:	003f0c06 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    55fc:	3804d27a 	srli	r2,r7,9
    5600:	01000104 	movi	r4,4
    5604:	2080422e 	bgeu	r4,r2,5710 <_malloc_r+0x5f4>
    5608:	01000504 	movi	r4,20
    560c:	20807c36 	bltu	r4,r2,5800 <_malloc_r+0x6e4>
    5610:	110016c4 	addi	r4,r2,91
    5614:	210b883a 	add	r5,r4,r4
    5618:	294b883a 	add	r5,r5,r5
    561c:	294b883a 	add	r5,r5,r5
    5620:	994b883a 	add	r5,r19,r5
    5624:	28800217 	ldw	r2,8(r5)
    5628:	020000b4 	movhi	r8,2
    562c:	4228b704 	addi	r8,r8,-23844
    5630:	11406326 	beq	r2,r5,57c0 <_malloc_r+0x6a4>
    5634:	01bfff04 	movi	r6,-4
    5638:	11000117 	ldw	r4,4(r2)
    563c:	2188703a 	and	r4,r4,r6
    5640:	3900022e 	bgeu	r7,r4,564c <_malloc_r+0x530>
    5644:	10800217 	ldw	r2,8(r2)
    5648:	28bffb1e 	bne	r5,r2,5638 <__alt_mem_Flash_flash_data+0xf4005638>
    564c:	11800317 	ldw	r6,12(r2)
    5650:	99000117 	ldw	r4,4(r19)
    5654:	81800315 	stw	r6,12(r16)
    5658:	80800215 	stw	r2,8(r16)
    565c:	34000215 	stw	r16,8(r6)
    5660:	14000315 	stw	r16,12(r2)
    5664:	003f2706 	br	5304 <__alt_mem_Flash_flash_data+0xf4005304>
    5668:	88c00054 	ori	r3,r17,1
    566c:	80c00115 	stw	r3,4(r16)
    5670:	8463883a 	add	r17,r16,r17
    5674:	34400515 	stw	r17,20(r6)
    5678:	34400415 	stw	r17,16(r6)
    567c:	10c00054 	ori	r3,r2,1
    5680:	8a400315 	stw	r9,12(r17)
    5684:	8a400215 	stw	r9,8(r17)
    5688:	88c00115 	stw	r3,4(r17)
    568c:	88a3883a 	add	r17,r17,r2
    5690:	88800015 	stw	r2,0(r17)
    5694:	9009883a 	mov	r4,r18
    5698:	000d5640 	call	d564 <__malloc_unlock>
    569c:	80800204 	addi	r2,r16,8
    56a0:	003ecb06 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    56a4:	31000117 	ldw	r4,4(r6)
    56a8:	003f1606 	br	5304 <__alt_mem_Flash_flash_data+0xf4005304>
    56ac:	63000044 	addi	r12,r12,1
    56b0:	608000cc 	andi	r2,r12,3
    56b4:	5ac00204 	addi	r11,r11,8
    56b8:	103f2a1e 	bne	r2,zero,5364 <__alt_mem_Flash_flash_data+0xf4005364>
    56bc:	00002106 	br	5744 <_malloc_r+0x628>
    56c0:	80800204 	addi	r2,r16,8
    56c4:	84000517 	ldw	r16,20(r16)
    56c8:	143eb31e 	bne	r2,r16,5198 <__alt_mem_Flash_flash_data+0xf4005198>
    56cc:	18c00084 	addi	r3,r3,2
    56d0:	003eec06 	br	5284 <__alt_mem_Flash_flash_data+0xf4005284>
    56d4:	8085883a 	add	r2,r16,r2
    56d8:	10c00117 	ldw	r3,4(r2)
    56dc:	81000317 	ldw	r4,12(r16)
    56e0:	81400217 	ldw	r5,8(r16)
    56e4:	18c00054 	ori	r3,r3,1
    56e8:	10c00115 	stw	r3,4(r2)
    56ec:	29000315 	stw	r4,12(r5)
    56f0:	21400215 	stw	r5,8(r4)
    56f4:	9009883a 	mov	r4,r18
    56f8:	000d5640 	call	d564 <__malloc_unlock>
    56fc:	80800204 	addi	r2,r16,8
    5700:	003eb306 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    5704:	19c016c4 	addi	r7,r3,91
    5708:	39cb883a 	add	r5,r7,r7
    570c:	003ec706 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    5710:	3804d1ba 	srli	r2,r7,6
    5714:	11000e04 	addi	r4,r2,56
    5718:	210b883a 	add	r5,r4,r4
    571c:	003fbe06 	br	5618 <__alt_mem_Flash_flash_data+0xf4005618>
    5720:	84ff5d26 	beq	r16,r19,5498 <__alt_mem_Flash_flash_data+0xf4005498>
    5724:	9c000217 	ldw	r16,8(r19)
    5728:	00bfff04 	movi	r2,-4
    572c:	80c00117 	ldw	r3,4(r16)
    5730:	1886703a 	and	r3,r3,r2
    5734:	003f9706 	br	5594 <__alt_mem_Flash_flash_data+0xf4005594>
    5738:	52800017 	ldw	r10,0(r10)
    573c:	18ffffc4 	addi	r3,r3,-1
    5740:	50805c1e 	bne	r10,r2,58b4 <_malloc_r+0x798>
    5744:	190000cc 	andi	r4,r3,3
    5748:	50bffe04 	addi	r2,r10,-8
    574c:	203ffa1e 	bne	r4,zero,5738 <__alt_mem_Flash_flash_data+0xf4005738>
    5750:	98800117 	ldw	r2,4(r19)
    5754:	0146303a 	nor	r3,zero,r5
    5758:	1884703a 	and	r2,r3,r2
    575c:	98800115 	stw	r2,4(r19)
    5760:	294b883a 	add	r5,r5,r5
    5764:	117f2e36 	bltu	r2,r5,5420 <__alt_mem_Flash_flash_data+0xf4005420>
    5768:	283f2d26 	beq	r5,zero,5420 <__alt_mem_Flash_flash_data+0xf4005420>
    576c:	1146703a 	and	r3,r2,r5
    5770:	1800521e 	bne	r3,zero,58bc <_malloc_r+0x7a0>
    5774:	6007883a 	mov	r3,r12
    5778:	294b883a 	add	r5,r5,r5
    577c:	1148703a 	and	r4,r2,r5
    5780:	18c00104 	addi	r3,r3,4
    5784:	203ffc26 	beq	r4,zero,5778 <__alt_mem_Flash_flash_data+0xf4005778>
    5788:	003ef006 	br	534c <__alt_mem_Flash_flash_data+0xf400534c>
    578c:	00805504 	movi	r2,340
    5790:	10c01336 	bltu	r2,r3,57e0 <_malloc_r+0x6c4>
    5794:	8806d3fa 	srli	r3,r17,15
    5798:	19c01dc4 	addi	r7,r3,119
    579c:	39cb883a 	add	r5,r7,r7
    57a0:	003ea206 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    57a4:	00c40004 	movi	r3,4096
    57a8:	003f4d06 	br	54e0 <__alt_mem_Flash_flash_data+0xf40054e0>
    57ac:	00800044 	movi	r2,1
    57b0:	a0800115 	stw	r2,4(r20)
    57b4:	a021883a 	mov	r16,r20
    57b8:	0007883a 	mov	r3,zero
    57bc:	003f7506 	br	5594 <__alt_mem_Flash_flash_data+0xf4005594>
    57c0:	200bd0ba 	srai	r5,r4,2
    57c4:	01800044 	movi	r6,1
    57c8:	41000117 	ldw	r4,4(r8)
    57cc:	314a983a 	sll	r5,r6,r5
    57d0:	100d883a 	mov	r6,r2
    57d4:	2908b03a 	or	r4,r5,r4
    57d8:	41000115 	stw	r4,4(r8)
    57dc:	003f9d06 	br	5654 <__alt_mem_Flash_flash_data+0xf4005654>
    57e0:	00815504 	movi	r2,1364
    57e4:	10c01336 	bltu	r2,r3,5834 <_malloc_r+0x718>
    57e8:	8806d4ba 	srli	r3,r17,18
    57ec:	19c01f04 	addi	r7,r3,124
    57f0:	39cb883a 	add	r5,r7,r7
    57f4:	003e8d06 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    57f8:	ad400404 	addi	r21,r21,16
    57fc:	003f1d06 	br	5474 <__alt_mem_Flash_flash_data+0xf4005474>
    5800:	01001504 	movi	r4,84
    5804:	20801c36 	bltu	r4,r2,5878 <_malloc_r+0x75c>
    5808:	3804d33a 	srli	r2,r7,12
    580c:	11001b84 	addi	r4,r2,110
    5810:	210b883a 	add	r5,r4,r4
    5814:	003f8006 	br	5618 <__alt_mem_Flash_flash_data+0xf4005618>
    5818:	3083ffcc 	andi	r2,r6,4095
    581c:	103f241e 	bne	r2,zero,54b0 <__alt_mem_Flash_flash_data+0xf40054b0>
    5820:	99000217 	ldw	r4,8(r19)
    5824:	ad85883a 	add	r2,r21,r22
    5828:	10800054 	ori	r2,r2,1
    582c:	20800115 	stw	r2,4(r4)
    5830:	003f4a06 	br	555c <__alt_mem_Flash_flash_data+0xf400555c>
    5834:	01403f04 	movi	r5,252
    5838:	01c01f84 	movi	r7,126
    583c:	003e7b06 	br	522c <__alt_mem_Flash_flash_data+0xf400522c>
    5840:	00c00044 	movi	r3,1
    5844:	002b883a 	mov	r21,zero
    5848:	003f3006 	br	550c <__alt_mem_Flash_flash_data+0xf400550c>
    584c:	008000b4 	movhi	r2,2
    5850:	10afd704 	addi	r2,r2,-16548
    5854:	15000015 	stw	r20,0(r2)
    5858:	003f1b06 	br	54c8 <__alt_mem_Flash_flash_data+0xf40054c8>
    585c:	9009883a 	mov	r4,r18
    5860:	81400204 	addi	r5,r16,8
    5864:	0004a0c0 	call	4a0c <_free_r>
    5868:	008000b4 	movhi	r2,2
    586c:	10b8a204 	addi	r2,r2,-7544
    5870:	10c00017 	ldw	r3,0(r2)
    5874:	003f3906 	br	555c <__alt_mem_Flash_flash_data+0xf400555c>
    5878:	01005504 	movi	r4,340
    587c:	20800436 	bltu	r4,r2,5890 <_malloc_r+0x774>
    5880:	3804d3fa 	srli	r2,r7,15
    5884:	11001dc4 	addi	r4,r2,119
    5888:	210b883a 	add	r5,r4,r4
    588c:	003f6206 	br	5618 <__alt_mem_Flash_flash_data+0xf4005618>
    5890:	01015504 	movi	r4,1364
    5894:	20800436 	bltu	r4,r2,58a8 <_malloc_r+0x78c>
    5898:	3804d4ba 	srli	r2,r7,18
    589c:	11001f04 	addi	r4,r2,124
    58a0:	210b883a 	add	r5,r4,r4
    58a4:	003f5c06 	br	5618 <__alt_mem_Flash_flash_data+0xf4005618>
    58a8:	01403f04 	movi	r5,252
    58ac:	01001f84 	movi	r4,126
    58b0:	003f5906 	br	5618 <__alt_mem_Flash_flash_data+0xf4005618>
    58b4:	98800117 	ldw	r2,4(r19)
    58b8:	003fa906 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    58bc:	6007883a 	mov	r3,r12
    58c0:	003ea206 	br	534c <__alt_mem_Flash_flash_data+0xf400534c>

000058c4 <memchr>:
    58c4:	208000cc 	andi	r2,r4,3
    58c8:	280f883a 	mov	r7,r5
    58cc:	10003526 	beq	r2,zero,59a4 <memchr+0xe0>
    58d0:	30bfffc4 	addi	r2,r6,-1
    58d4:	30001b26 	beq	r6,zero,5944 <memchr+0x80>
    58d8:	21800003 	ldbu	r6,0(r4)
    58dc:	28c03fcc 	andi	r3,r5,255
    58e0:	30c01a26 	beq	r6,r3,594c <memchr+0x88>
    58e4:	180d883a 	mov	r6,r3
    58e8:	00000406 	br	58fc <memchr+0x38>
    58ec:	10001526 	beq	r2,zero,5944 <memchr+0x80>
    58f0:	20c00003 	ldbu	r3,0(r4)
    58f4:	10bfffc4 	addi	r2,r2,-1
    58f8:	19801426 	beq	r3,r6,594c <memchr+0x88>
    58fc:	21000044 	addi	r4,r4,1
    5900:	20c000cc 	andi	r3,r4,3
    5904:	183ff91e 	bne	r3,zero,58ec <__alt_mem_Flash_flash_data+0xf40058ec>
    5908:	024000c4 	movi	r9,3
    590c:	48801136 	bltu	r9,r2,5954 <memchr+0x90>
    5910:	10000c26 	beq	r2,zero,5944 <memchr+0x80>
    5914:	20c00003 	ldbu	r3,0(r4)
    5918:	29403fcc 	andi	r5,r5,255
    591c:	19400b26 	beq	r3,r5,594c <memchr+0x88>
    5920:	20c00044 	addi	r3,r4,1
    5924:	2085883a 	add	r2,r4,r2
    5928:	39803fcc 	andi	r6,r7,255
    592c:	00000306 	br	593c <memchr+0x78>
    5930:	18c00044 	addi	r3,r3,1
    5934:	197fffc3 	ldbu	r5,-1(r3)
    5938:	29800426 	beq	r5,r6,594c <memchr+0x88>
    593c:	1809883a 	mov	r4,r3
    5940:	18bffb1e 	bne	r3,r2,5930 <__alt_mem_Flash_flash_data+0xf4005930>
    5944:	0005883a 	mov	r2,zero
    5948:	f800283a 	ret
    594c:	2005883a 	mov	r2,r4
    5950:	f800283a 	ret
    5954:	28c03fcc 	andi	r3,r5,255
    5958:	1810923a 	slli	r8,r3,8
    595c:	02ffbff4 	movhi	r11,65279
    5960:	02a02074 	movhi	r10,32897
    5964:	40c6b03a 	or	r3,r8,r3
    5968:	1810943a 	slli	r8,r3,16
    596c:	5affbfc4 	addi	r11,r11,-257
    5970:	52a02004 	addi	r10,r10,-32640
    5974:	40d0b03a 	or	r8,r8,r3
    5978:	20c00017 	ldw	r3,0(r4)
    597c:	40c6f03a 	xor	r3,r8,r3
    5980:	1acd883a 	add	r6,r3,r11
    5984:	00c6303a 	nor	r3,zero,r3
    5988:	30c6703a 	and	r3,r6,r3
    598c:	1a86703a 	and	r3,r3,r10
    5990:	183fdf1e 	bne	r3,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    5994:	10bfff04 	addi	r2,r2,-4
    5998:	21000104 	addi	r4,r4,4
    599c:	48bff636 	bltu	r9,r2,5978 <__alt_mem_Flash_flash_data+0xf4005978>
    59a0:	003fdb06 	br	5910 <__alt_mem_Flash_flash_data+0xf4005910>
    59a4:	3005883a 	mov	r2,r6
    59a8:	003fd706 	br	5908 <__alt_mem_Flash_flash_data+0xf4005908>

000059ac <memcpy>:
    59ac:	deffff04 	addi	sp,sp,-4
    59b0:	dc000015 	stw	r16,0(sp)
    59b4:	00c003c4 	movi	r3,15
    59b8:	2005883a 	mov	r2,r4
    59bc:	1980432e 	bgeu	r3,r6,5acc <memcpy+0x120>
    59c0:	2146b03a 	or	r3,r4,r5
    59c4:	18c000cc 	andi	r3,r3,3
    59c8:	1800421e 	bne	r3,zero,5ad4 <memcpy+0x128>
    59cc:	343ffc04 	addi	r16,r6,-16
    59d0:	8020d13a 	srli	r16,r16,4
    59d4:	28c00104 	addi	r3,r5,4
    59d8:	23400104 	addi	r13,r4,4
    59dc:	801e913a 	slli	r15,r16,4
    59e0:	2b000204 	addi	r12,r5,8
    59e4:	22c00204 	addi	r11,r4,8
    59e8:	7bc00504 	addi	r15,r15,20
    59ec:	2a800304 	addi	r10,r5,12
    59f0:	22400304 	addi	r9,r4,12
    59f4:	2bdf883a 	add	r15,r5,r15
    59f8:	2811883a 	mov	r8,r5
    59fc:	200f883a 	mov	r7,r4
    5a00:	41000017 	ldw	r4,0(r8)
    5a04:	39c00404 	addi	r7,r7,16
    5a08:	18c00404 	addi	r3,r3,16
    5a0c:	393ffc15 	stw	r4,-16(r7)
    5a10:	1bbffc17 	ldw	r14,-16(r3)
    5a14:	6b400404 	addi	r13,r13,16
    5a18:	5ac00404 	addi	r11,r11,16
    5a1c:	6bbffc15 	stw	r14,-16(r13)
    5a20:	63800017 	ldw	r14,0(r12)
    5a24:	4a400404 	addi	r9,r9,16
    5a28:	42000404 	addi	r8,r8,16
    5a2c:	5bbffc15 	stw	r14,-16(r11)
    5a30:	53800017 	ldw	r14,0(r10)
    5a34:	63000404 	addi	r12,r12,16
    5a38:	52800404 	addi	r10,r10,16
    5a3c:	4bbffc15 	stw	r14,-16(r9)
    5a40:	1bffef1e 	bne	r3,r15,5a00 <__alt_mem_Flash_flash_data+0xf4005a00>
    5a44:	81c00044 	addi	r7,r16,1
    5a48:	380e913a 	slli	r7,r7,4
    5a4c:	310003cc 	andi	r4,r6,15
    5a50:	02c000c4 	movi	r11,3
    5a54:	11c7883a 	add	r3,r2,r7
    5a58:	29cb883a 	add	r5,r5,r7
    5a5c:	59001f2e 	bgeu	r11,r4,5adc <memcpy+0x130>
    5a60:	1813883a 	mov	r9,r3
    5a64:	2811883a 	mov	r8,r5
    5a68:	200f883a 	mov	r7,r4
    5a6c:	42800017 	ldw	r10,0(r8)
    5a70:	4a400104 	addi	r9,r9,4
    5a74:	39ffff04 	addi	r7,r7,-4
    5a78:	4abfff15 	stw	r10,-4(r9)
    5a7c:	42000104 	addi	r8,r8,4
    5a80:	59fffa36 	bltu	r11,r7,5a6c <__alt_mem_Flash_flash_data+0xf4005a6c>
    5a84:	213fff04 	addi	r4,r4,-4
    5a88:	2008d0ba 	srli	r4,r4,2
    5a8c:	318000cc 	andi	r6,r6,3
    5a90:	21000044 	addi	r4,r4,1
    5a94:	2109883a 	add	r4,r4,r4
    5a98:	2109883a 	add	r4,r4,r4
    5a9c:	1907883a 	add	r3,r3,r4
    5aa0:	290b883a 	add	r5,r5,r4
    5aa4:	30000626 	beq	r6,zero,5ac0 <memcpy+0x114>
    5aa8:	198d883a 	add	r6,r3,r6
    5aac:	29c00003 	ldbu	r7,0(r5)
    5ab0:	18c00044 	addi	r3,r3,1
    5ab4:	29400044 	addi	r5,r5,1
    5ab8:	19ffffc5 	stb	r7,-1(r3)
    5abc:	19bffb1e 	bne	r3,r6,5aac <__alt_mem_Flash_flash_data+0xf4005aac>
    5ac0:	dc000017 	ldw	r16,0(sp)
    5ac4:	dec00104 	addi	sp,sp,4
    5ac8:	f800283a 	ret
    5acc:	2007883a 	mov	r3,r4
    5ad0:	003ff406 	br	5aa4 <__alt_mem_Flash_flash_data+0xf4005aa4>
    5ad4:	2007883a 	mov	r3,r4
    5ad8:	003ff306 	br	5aa8 <__alt_mem_Flash_flash_data+0xf4005aa8>
    5adc:	200d883a 	mov	r6,r4
    5ae0:	003ff006 	br	5aa4 <__alt_mem_Flash_flash_data+0xf4005aa4>

00005ae4 <memset>:
    5ae4:	20c000cc 	andi	r3,r4,3
    5ae8:	2005883a 	mov	r2,r4
    5aec:	18004326 	beq	r3,zero,5bfc <memset+0x118>
    5af0:	31ffffc4 	addi	r7,r6,-1
    5af4:	30004026 	beq	r6,zero,5bf8 <memset+0x114>
    5af8:	2813883a 	mov	r9,r5
    5afc:	200d883a 	mov	r6,r4
    5b00:	2007883a 	mov	r3,r4
    5b04:	00000406 	br	5b18 <memset+0x34>
    5b08:	3a3fffc4 	addi	r8,r7,-1
    5b0c:	31800044 	addi	r6,r6,1
    5b10:	38003926 	beq	r7,zero,5bf8 <memset+0x114>
    5b14:	400f883a 	mov	r7,r8
    5b18:	18c00044 	addi	r3,r3,1
    5b1c:	32400005 	stb	r9,0(r6)
    5b20:	1a0000cc 	andi	r8,r3,3
    5b24:	403ff81e 	bne	r8,zero,5b08 <__alt_mem_Flash_flash_data+0xf4005b08>
    5b28:	010000c4 	movi	r4,3
    5b2c:	21c02d2e 	bgeu	r4,r7,5be4 <memset+0x100>
    5b30:	29803fcc 	andi	r6,r5,255
    5b34:	3008923a 	slli	r4,r6,8
    5b38:	218cb03a 	or	r6,r4,r6
    5b3c:	3008943a 	slli	r4,r6,16
    5b40:	218cb03a 	or	r6,r4,r6
    5b44:	010003c4 	movi	r4,15
    5b48:	21c0182e 	bgeu	r4,r7,5bac <memset+0xc8>
    5b4c:	3b3ffc04 	addi	r12,r7,-16
    5b50:	6018d13a 	srli	r12,r12,4
    5b54:	1a000104 	addi	r8,r3,4
    5b58:	1ac00204 	addi	r11,r3,8
    5b5c:	6008913a 	slli	r4,r12,4
    5b60:	1a800304 	addi	r10,r3,12
    5b64:	1813883a 	mov	r9,r3
    5b68:	21000504 	addi	r4,r4,20
    5b6c:	1909883a 	add	r4,r3,r4
    5b70:	49800015 	stw	r6,0(r9)
    5b74:	41800015 	stw	r6,0(r8)
    5b78:	59800015 	stw	r6,0(r11)
    5b7c:	51800015 	stw	r6,0(r10)
    5b80:	42000404 	addi	r8,r8,16
    5b84:	4a400404 	addi	r9,r9,16
    5b88:	5ac00404 	addi	r11,r11,16
    5b8c:	52800404 	addi	r10,r10,16
    5b90:	413ff71e 	bne	r8,r4,5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    5b94:	63000044 	addi	r12,r12,1
    5b98:	6018913a 	slli	r12,r12,4
    5b9c:	39c003cc 	andi	r7,r7,15
    5ba0:	010000c4 	movi	r4,3
    5ba4:	1b07883a 	add	r3,r3,r12
    5ba8:	21c00e2e 	bgeu	r4,r7,5be4 <memset+0x100>
    5bac:	1813883a 	mov	r9,r3
    5bb0:	3811883a 	mov	r8,r7
    5bb4:	010000c4 	movi	r4,3
    5bb8:	49800015 	stw	r6,0(r9)
    5bbc:	423fff04 	addi	r8,r8,-4
    5bc0:	4a400104 	addi	r9,r9,4
    5bc4:	223ffc36 	bltu	r4,r8,5bb8 <__alt_mem_Flash_flash_data+0xf4005bb8>
    5bc8:	393fff04 	addi	r4,r7,-4
    5bcc:	2008d0ba 	srli	r4,r4,2
    5bd0:	39c000cc 	andi	r7,r7,3
    5bd4:	21000044 	addi	r4,r4,1
    5bd8:	2109883a 	add	r4,r4,r4
    5bdc:	2109883a 	add	r4,r4,r4
    5be0:	1907883a 	add	r3,r3,r4
    5be4:	38000426 	beq	r7,zero,5bf8 <memset+0x114>
    5be8:	19cf883a 	add	r7,r3,r7
    5bec:	19400005 	stb	r5,0(r3)
    5bf0:	18c00044 	addi	r3,r3,1
    5bf4:	19fffd1e 	bne	r3,r7,5bec <__alt_mem_Flash_flash_data+0xf4005bec>
    5bf8:	f800283a 	ret
    5bfc:	2007883a 	mov	r3,r4
    5c00:	300f883a 	mov	r7,r6
    5c04:	003fc806 	br	5b28 <__alt_mem_Flash_flash_data+0xf4005b28>

00005c08 <_Balloc>:
    5c08:	20801317 	ldw	r2,76(r4)
    5c0c:	defffc04 	addi	sp,sp,-16
    5c10:	dc400115 	stw	r17,4(sp)
    5c14:	dc000015 	stw	r16,0(sp)
    5c18:	dfc00315 	stw	ra,12(sp)
    5c1c:	dc800215 	stw	r18,8(sp)
    5c20:	2023883a 	mov	r17,r4
    5c24:	2821883a 	mov	r16,r5
    5c28:	10000f26 	beq	r2,zero,5c68 <_Balloc+0x60>
    5c2c:	8407883a 	add	r3,r16,r16
    5c30:	18c7883a 	add	r3,r3,r3
    5c34:	10c7883a 	add	r3,r2,r3
    5c38:	18800017 	ldw	r2,0(r3)
    5c3c:	10001126 	beq	r2,zero,5c84 <_Balloc+0x7c>
    5c40:	11000017 	ldw	r4,0(r2)
    5c44:	19000015 	stw	r4,0(r3)
    5c48:	10000415 	stw	zero,16(r2)
    5c4c:	10000315 	stw	zero,12(r2)
    5c50:	dfc00317 	ldw	ra,12(sp)
    5c54:	dc800217 	ldw	r18,8(sp)
    5c58:	dc400117 	ldw	r17,4(sp)
    5c5c:	dc000017 	ldw	r16,0(sp)
    5c60:	dec00404 	addi	sp,sp,16
    5c64:	f800283a 	ret
    5c68:	01400104 	movi	r5,4
    5c6c:	01800844 	movi	r6,33
    5c70:	00083200 	call	8320 <_calloc_r>
    5c74:	88801315 	stw	r2,76(r17)
    5c78:	103fec1e 	bne	r2,zero,5c2c <__alt_mem_Flash_flash_data+0xf4005c2c>
    5c7c:	0005883a 	mov	r2,zero
    5c80:	003ff306 	br	5c50 <__alt_mem_Flash_flash_data+0xf4005c50>
    5c84:	01400044 	movi	r5,1
    5c88:	2c24983a 	sll	r18,r5,r16
    5c8c:	8809883a 	mov	r4,r17
    5c90:	91800144 	addi	r6,r18,5
    5c94:	318d883a 	add	r6,r6,r6
    5c98:	318d883a 	add	r6,r6,r6
    5c9c:	00083200 	call	8320 <_calloc_r>
    5ca0:	103ff626 	beq	r2,zero,5c7c <__alt_mem_Flash_flash_data+0xf4005c7c>
    5ca4:	14000115 	stw	r16,4(r2)
    5ca8:	14800215 	stw	r18,8(r2)
    5cac:	003fe606 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>

00005cb0 <_Bfree>:
    5cb0:	28000826 	beq	r5,zero,5cd4 <_Bfree+0x24>
    5cb4:	28c00117 	ldw	r3,4(r5)
    5cb8:	20801317 	ldw	r2,76(r4)
    5cbc:	18c7883a 	add	r3,r3,r3
    5cc0:	18c7883a 	add	r3,r3,r3
    5cc4:	10c5883a 	add	r2,r2,r3
    5cc8:	10c00017 	ldw	r3,0(r2)
    5ccc:	28c00015 	stw	r3,0(r5)
    5cd0:	11400015 	stw	r5,0(r2)
    5cd4:	f800283a 	ret

00005cd8 <__multadd>:
    5cd8:	defffa04 	addi	sp,sp,-24
    5cdc:	dc000115 	stw	r16,4(sp)
    5ce0:	2c000417 	ldw	r16,16(r5)
    5ce4:	dc800315 	stw	r18,12(sp)
    5ce8:	dc400215 	stw	r17,8(sp)
    5cec:	dfc00515 	stw	ra,20(sp)
    5cf0:	dcc00415 	stw	r19,16(sp)
    5cf4:	2823883a 	mov	r17,r5
    5cf8:	2025883a 	mov	r18,r4
    5cfc:	2a400504 	addi	r9,r5,20
    5d00:	0015883a 	mov	r10,zero
    5d04:	4a000017 	ldw	r8,0(r9)
    5d08:	4a400104 	addi	r9,r9,4
    5d0c:	52800044 	addi	r10,r10,1
    5d10:	40ffffcc 	andi	r3,r8,65535
    5d14:	1987383a 	mul	r3,r3,r6
    5d18:	4010d43a 	srli	r8,r8,16
    5d1c:	19cf883a 	add	r7,r3,r7
    5d20:	4191383a 	mul	r8,r8,r6
    5d24:	3816d43a 	srli	r11,r7,16
    5d28:	38ffffcc 	andi	r3,r7,65535
    5d2c:	5a0f883a 	add	r7,r11,r8
    5d30:	3810943a 	slli	r8,r7,16
    5d34:	380ed43a 	srli	r7,r7,16
    5d38:	40c7883a 	add	r3,r8,r3
    5d3c:	48ffff15 	stw	r3,-4(r9)
    5d40:	543ff016 	blt	r10,r16,5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    5d44:	38000926 	beq	r7,zero,5d6c <__multadd+0x94>
    5d48:	88800217 	ldw	r2,8(r17)
    5d4c:	80800f0e 	bge	r16,r2,5d8c <__multadd+0xb4>
    5d50:	80800144 	addi	r2,r16,5
    5d54:	1085883a 	add	r2,r2,r2
    5d58:	1085883a 	add	r2,r2,r2
    5d5c:	8885883a 	add	r2,r17,r2
    5d60:	11c00015 	stw	r7,0(r2)
    5d64:	84000044 	addi	r16,r16,1
    5d68:	8c000415 	stw	r16,16(r17)
    5d6c:	8805883a 	mov	r2,r17
    5d70:	dfc00517 	ldw	ra,20(sp)
    5d74:	dcc00417 	ldw	r19,16(sp)
    5d78:	dc800317 	ldw	r18,12(sp)
    5d7c:	dc400217 	ldw	r17,8(sp)
    5d80:	dc000117 	ldw	r16,4(sp)
    5d84:	dec00604 	addi	sp,sp,24
    5d88:	f800283a 	ret
    5d8c:	89400117 	ldw	r5,4(r17)
    5d90:	9009883a 	mov	r4,r18
    5d94:	d9c00015 	stw	r7,0(sp)
    5d98:	29400044 	addi	r5,r5,1
    5d9c:	0005c080 	call	5c08 <_Balloc>
    5da0:	89800417 	ldw	r6,16(r17)
    5da4:	11000304 	addi	r4,r2,12
    5da8:	89400304 	addi	r5,r17,12
    5dac:	31800084 	addi	r6,r6,2
    5db0:	318d883a 	add	r6,r6,r6
    5db4:	318d883a 	add	r6,r6,r6
    5db8:	1027883a 	mov	r19,r2
    5dbc:	00059ac0 	call	59ac <memcpy>
    5dc0:	d9c00017 	ldw	r7,0(sp)
    5dc4:	88000a26 	beq	r17,zero,5df0 <__multadd+0x118>
    5dc8:	89000117 	ldw	r4,4(r17)
    5dcc:	90c01317 	ldw	r3,76(r18)
    5dd0:	2109883a 	add	r4,r4,r4
    5dd4:	2109883a 	add	r4,r4,r4
    5dd8:	1907883a 	add	r3,r3,r4
    5ddc:	18800017 	ldw	r2,0(r3)
    5de0:	88800015 	stw	r2,0(r17)
    5de4:	1c400015 	stw	r17,0(r3)
    5de8:	9823883a 	mov	r17,r19
    5dec:	003fd806 	br	5d50 <__alt_mem_Flash_flash_data+0xf4005d50>
    5df0:	9823883a 	mov	r17,r19
    5df4:	003fd606 	br	5d50 <__alt_mem_Flash_flash_data+0xf4005d50>

00005df8 <__s2b>:
    5df8:	defff904 	addi	sp,sp,-28
    5dfc:	dc400115 	stw	r17,4(sp)
    5e00:	dc000015 	stw	r16,0(sp)
    5e04:	2023883a 	mov	r17,r4
    5e08:	2821883a 	mov	r16,r5
    5e0c:	39000204 	addi	r4,r7,8
    5e10:	01400244 	movi	r5,9
    5e14:	dcc00315 	stw	r19,12(sp)
    5e18:	dc800215 	stw	r18,8(sp)
    5e1c:	dfc00615 	stw	ra,24(sp)
    5e20:	dd400515 	stw	r21,20(sp)
    5e24:	dd000415 	stw	r20,16(sp)
    5e28:	3825883a 	mov	r18,r7
    5e2c:	3027883a 	mov	r19,r6
    5e30:	000a2a80 	call	a2a8 <__divsi3>
    5e34:	00c00044 	movi	r3,1
    5e38:	000b883a 	mov	r5,zero
    5e3c:	1880030e 	bge	r3,r2,5e4c <__s2b+0x54>
    5e40:	18c7883a 	add	r3,r3,r3
    5e44:	29400044 	addi	r5,r5,1
    5e48:	18bffd16 	blt	r3,r2,5e40 <__alt_mem_Flash_flash_data+0xf4005e40>
    5e4c:	8809883a 	mov	r4,r17
    5e50:	0005c080 	call	5c08 <_Balloc>
    5e54:	d8c00717 	ldw	r3,28(sp)
    5e58:	10c00515 	stw	r3,20(r2)
    5e5c:	00c00044 	movi	r3,1
    5e60:	10c00415 	stw	r3,16(r2)
    5e64:	00c00244 	movi	r3,9
    5e68:	1cc0210e 	bge	r3,r19,5ef0 <__s2b+0xf8>
    5e6c:	80eb883a 	add	r21,r16,r3
    5e70:	a829883a 	mov	r20,r21
    5e74:	84e1883a 	add	r16,r16,r19
    5e78:	a1c00007 	ldb	r7,0(r20)
    5e7c:	8809883a 	mov	r4,r17
    5e80:	a5000044 	addi	r20,r20,1
    5e84:	100b883a 	mov	r5,r2
    5e88:	01800284 	movi	r6,10
    5e8c:	39fff404 	addi	r7,r7,-48
    5e90:	0005cd80 	call	5cd8 <__multadd>
    5e94:	a43ff81e 	bne	r20,r16,5e78 <__alt_mem_Flash_flash_data+0xf4005e78>
    5e98:	ace1883a 	add	r16,r21,r19
    5e9c:	843ffe04 	addi	r16,r16,-8
    5ea0:	9c800a0e 	bge	r19,r18,5ecc <__s2b+0xd4>
    5ea4:	94e5c83a 	sub	r18,r18,r19
    5ea8:	84a5883a 	add	r18,r16,r18
    5eac:	81c00007 	ldb	r7,0(r16)
    5eb0:	8809883a 	mov	r4,r17
    5eb4:	84000044 	addi	r16,r16,1
    5eb8:	100b883a 	mov	r5,r2
    5ebc:	01800284 	movi	r6,10
    5ec0:	39fff404 	addi	r7,r7,-48
    5ec4:	0005cd80 	call	5cd8 <__multadd>
    5ec8:	84bff81e 	bne	r16,r18,5eac <__alt_mem_Flash_flash_data+0xf4005eac>
    5ecc:	dfc00617 	ldw	ra,24(sp)
    5ed0:	dd400517 	ldw	r21,20(sp)
    5ed4:	dd000417 	ldw	r20,16(sp)
    5ed8:	dcc00317 	ldw	r19,12(sp)
    5edc:	dc800217 	ldw	r18,8(sp)
    5ee0:	dc400117 	ldw	r17,4(sp)
    5ee4:	dc000017 	ldw	r16,0(sp)
    5ee8:	dec00704 	addi	sp,sp,28
    5eec:	f800283a 	ret
    5ef0:	84000284 	addi	r16,r16,10
    5ef4:	1827883a 	mov	r19,r3
    5ef8:	003fe906 	br	5ea0 <__alt_mem_Flash_flash_data+0xf4005ea0>

00005efc <__hi0bits>:
    5efc:	20bfffec 	andhi	r2,r4,65535
    5f00:	1000141e 	bne	r2,zero,5f54 <__hi0bits+0x58>
    5f04:	2008943a 	slli	r4,r4,16
    5f08:	00800404 	movi	r2,16
    5f0c:	20ffc02c 	andhi	r3,r4,65280
    5f10:	1800021e 	bne	r3,zero,5f1c <__hi0bits+0x20>
    5f14:	2008923a 	slli	r4,r4,8
    5f18:	10800204 	addi	r2,r2,8
    5f1c:	20fc002c 	andhi	r3,r4,61440
    5f20:	1800021e 	bne	r3,zero,5f2c <__hi0bits+0x30>
    5f24:	2008913a 	slli	r4,r4,4
    5f28:	10800104 	addi	r2,r2,4
    5f2c:	20f0002c 	andhi	r3,r4,49152
    5f30:	1800031e 	bne	r3,zero,5f40 <__hi0bits+0x44>
    5f34:	2109883a 	add	r4,r4,r4
    5f38:	10800084 	addi	r2,r2,2
    5f3c:	2109883a 	add	r4,r4,r4
    5f40:	20000316 	blt	r4,zero,5f50 <__hi0bits+0x54>
    5f44:	2110002c 	andhi	r4,r4,16384
    5f48:	2000041e 	bne	r4,zero,5f5c <__hi0bits+0x60>
    5f4c:	00800804 	movi	r2,32
    5f50:	f800283a 	ret
    5f54:	0005883a 	mov	r2,zero
    5f58:	003fec06 	br	5f0c <__alt_mem_Flash_flash_data+0xf4005f0c>
    5f5c:	10800044 	addi	r2,r2,1
    5f60:	f800283a 	ret

00005f64 <__lo0bits>:
    5f64:	20c00017 	ldw	r3,0(r4)
    5f68:	188001cc 	andi	r2,r3,7
    5f6c:	10000826 	beq	r2,zero,5f90 <__lo0bits+0x2c>
    5f70:	1880004c 	andi	r2,r3,1
    5f74:	1000211e 	bne	r2,zero,5ffc <__lo0bits+0x98>
    5f78:	1880008c 	andi	r2,r3,2
    5f7c:	1000211e 	bne	r2,zero,6004 <__lo0bits+0xa0>
    5f80:	1806d0ba 	srli	r3,r3,2
    5f84:	00800084 	movi	r2,2
    5f88:	20c00015 	stw	r3,0(r4)
    5f8c:	f800283a 	ret
    5f90:	18bfffcc 	andi	r2,r3,65535
    5f94:	10001326 	beq	r2,zero,5fe4 <__lo0bits+0x80>
    5f98:	0005883a 	mov	r2,zero
    5f9c:	19403fcc 	andi	r5,r3,255
    5fa0:	2800021e 	bne	r5,zero,5fac <__lo0bits+0x48>
    5fa4:	1806d23a 	srli	r3,r3,8
    5fa8:	10800204 	addi	r2,r2,8
    5fac:	194003cc 	andi	r5,r3,15
    5fb0:	2800021e 	bne	r5,zero,5fbc <__lo0bits+0x58>
    5fb4:	1806d13a 	srli	r3,r3,4
    5fb8:	10800104 	addi	r2,r2,4
    5fbc:	194000cc 	andi	r5,r3,3
    5fc0:	2800021e 	bne	r5,zero,5fcc <__lo0bits+0x68>
    5fc4:	1806d0ba 	srli	r3,r3,2
    5fc8:	10800084 	addi	r2,r2,2
    5fcc:	1940004c 	andi	r5,r3,1
    5fd0:	2800081e 	bne	r5,zero,5ff4 <__lo0bits+0x90>
    5fd4:	1806d07a 	srli	r3,r3,1
    5fd8:	1800051e 	bne	r3,zero,5ff0 <__lo0bits+0x8c>
    5fdc:	00800804 	movi	r2,32
    5fe0:	f800283a 	ret
    5fe4:	1806d43a 	srli	r3,r3,16
    5fe8:	00800404 	movi	r2,16
    5fec:	003feb06 	br	5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    5ff0:	10800044 	addi	r2,r2,1
    5ff4:	20c00015 	stw	r3,0(r4)
    5ff8:	f800283a 	ret
    5ffc:	0005883a 	mov	r2,zero
    6000:	f800283a 	ret
    6004:	1806d07a 	srli	r3,r3,1
    6008:	00800044 	movi	r2,1
    600c:	20c00015 	stw	r3,0(r4)
    6010:	f800283a 	ret

00006014 <__i2b>:
    6014:	defffd04 	addi	sp,sp,-12
    6018:	dc000015 	stw	r16,0(sp)
    601c:	04000044 	movi	r16,1
    6020:	dc400115 	stw	r17,4(sp)
    6024:	2823883a 	mov	r17,r5
    6028:	800b883a 	mov	r5,r16
    602c:	dfc00215 	stw	ra,8(sp)
    6030:	0005c080 	call	5c08 <_Balloc>
    6034:	14400515 	stw	r17,20(r2)
    6038:	14000415 	stw	r16,16(r2)
    603c:	dfc00217 	ldw	ra,8(sp)
    6040:	dc400117 	ldw	r17,4(sp)
    6044:	dc000017 	ldw	r16,0(sp)
    6048:	dec00304 	addi	sp,sp,12
    604c:	f800283a 	ret

00006050 <__multiply>:
    6050:	defffa04 	addi	sp,sp,-24
    6054:	dcc00315 	stw	r19,12(sp)
    6058:	dc800215 	stw	r18,8(sp)
    605c:	2cc00417 	ldw	r19,16(r5)
    6060:	34800417 	ldw	r18,16(r6)
    6064:	dd000415 	stw	r20,16(sp)
    6068:	dc400115 	stw	r17,4(sp)
    606c:	dfc00515 	stw	ra,20(sp)
    6070:	dc000015 	stw	r16,0(sp)
    6074:	2829883a 	mov	r20,r5
    6078:	3023883a 	mov	r17,r6
    607c:	9c807016 	blt	r19,r18,6240 <__multiply+0x1f0>
    6080:	9005883a 	mov	r2,r18
    6084:	9825883a 	mov	r18,r19
    6088:	1027883a 	mov	r19,r2
    608c:	a0800217 	ldw	r2,8(r20)
    6090:	94e1883a 	add	r16,r18,r19
    6094:	a1400117 	ldw	r5,4(r20)
    6098:	1400010e 	bge	r2,r16,60a0 <__multiply+0x50>
    609c:	29400044 	addi	r5,r5,1
    60a0:	0005c080 	call	5c08 <_Balloc>
    60a4:	8417883a 	add	r11,r16,r16
    60a8:	13000504 	addi	r12,r2,20
    60ac:	5ad7883a 	add	r11,r11,r11
    60b0:	62d7883a 	add	r11,r12,r11
    60b4:	6007883a 	mov	r3,r12
    60b8:	62c0032e 	bgeu	r12,r11,60c8 <__multiply+0x78>
    60bc:	18000015 	stw	zero,0(r3)
    60c0:	18c00104 	addi	r3,r3,4
    60c4:	1afffd36 	bltu	r3,r11,60bc <__alt_mem_Flash_flash_data+0xf40060bc>
    60c8:	9ce7883a 	add	r19,r19,r19
    60cc:	94a5883a 	add	r18,r18,r18
    60d0:	89800504 	addi	r6,r17,20
    60d4:	9ce7883a 	add	r19,r19,r19
    60d8:	a3800504 	addi	r14,r20,20
    60dc:	94a5883a 	add	r18,r18,r18
    60e0:	34db883a 	add	r13,r6,r19
    60e4:	7495883a 	add	r10,r14,r18
    60e8:	3340422e 	bgeu	r6,r13,61f4 <__multiply+0x1a4>
    60ec:	34400017 	ldw	r17,0(r6)
    60f0:	8cbfffcc 	andi	r18,r17,65535
    60f4:	90001b26 	beq	r18,zero,6164 <__multiply+0x114>
    60f8:	6013883a 	mov	r9,r12
    60fc:	7023883a 	mov	r17,r14
    6100:	0011883a 	mov	r8,zero
    6104:	88c00017 	ldw	r3,0(r17)
    6108:	4bc00017 	ldw	r15,0(r9)
    610c:	8c400104 	addi	r17,r17,4
    6110:	19ffffcc 	andi	r7,r3,65535
    6114:	3c8f383a 	mul	r7,r7,r18
    6118:	1808d43a 	srli	r4,r3,16
    611c:	797fffcc 	andi	r5,r15,65535
    6120:	29cb883a 	add	r5,r5,r7
    6124:	2a0b883a 	add	r5,r5,r8
    6128:	2489383a 	mul	r4,r4,r18
    612c:	7806d43a 	srli	r3,r15,16
    6130:	2810d43a 	srli	r8,r5,16
    6134:	297fffcc 	andi	r5,r5,65535
    6138:	1907883a 	add	r3,r3,r4
    613c:	1a07883a 	add	r3,r3,r8
    6140:	1808943a 	slli	r4,r3,16
    6144:	480f883a 	mov	r7,r9
    6148:	1810d43a 	srli	r8,r3,16
    614c:	214ab03a 	or	r5,r4,r5
    6150:	49400015 	stw	r5,0(r9)
    6154:	4a400104 	addi	r9,r9,4
    6158:	8abfea36 	bltu	r17,r10,6104 <__alt_mem_Flash_flash_data+0xf4006104>
    615c:	3a000115 	stw	r8,4(r7)
    6160:	34400017 	ldw	r17,0(r6)
    6164:	8822d43a 	srli	r17,r17,16
    6168:	88001f26 	beq	r17,zero,61e8 <__multiply+0x198>
    616c:	60c00017 	ldw	r3,0(r12)
    6170:	7013883a 	mov	r9,r14
    6174:	601f883a 	mov	r15,r12
    6178:	1811883a 	mov	r8,r3
    617c:	6027883a 	mov	r19,r12
    6180:	000f883a 	mov	r7,zero
    6184:	00000106 	br	618c <__multiply+0x13c>
    6188:	9027883a 	mov	r19,r18
    618c:	4940000b 	ldhu	r5,0(r9)
    6190:	4010d43a 	srli	r8,r8,16
    6194:	193fffcc 	andi	r4,r3,65535
    6198:	2c4b383a 	mul	r5,r5,r17
    619c:	7bc00104 	addi	r15,r15,4
    61a0:	4a400104 	addi	r9,r9,4
    61a4:	2a0b883a 	add	r5,r5,r8
    61a8:	29cb883a 	add	r5,r5,r7
    61ac:	2806943a 	slli	r3,r5,16
    61b0:	9c800104 	addi	r18,r19,4
    61b4:	280ad43a 	srli	r5,r5,16
    61b8:	1908b03a 	or	r4,r3,r4
    61bc:	793fff15 	stw	r4,-4(r15)
    61c0:	48ffff17 	ldw	r3,-4(r9)
    61c4:	92000017 	ldw	r8,0(r18)
    61c8:	1806d43a 	srli	r3,r3,16
    61cc:	413fffcc 	andi	r4,r8,65535
    61d0:	1c47383a 	mul	r3,r3,r17
    61d4:	1907883a 	add	r3,r3,r4
    61d8:	1947883a 	add	r3,r3,r5
    61dc:	180ed43a 	srli	r7,r3,16
    61e0:	4abfe936 	bltu	r9,r10,6188 <__alt_mem_Flash_flash_data+0xf4006188>
    61e4:	98c00115 	stw	r3,4(r19)
    61e8:	31800104 	addi	r6,r6,4
    61ec:	63000104 	addi	r12,r12,4
    61f0:	337fbe36 	bltu	r6,r13,60ec <__alt_mem_Flash_flash_data+0xf40060ec>
    61f4:	0400090e 	bge	zero,r16,621c <__multiply+0x1cc>
    61f8:	58ffff17 	ldw	r3,-4(r11)
    61fc:	5affff04 	addi	r11,r11,-4
    6200:	18000326 	beq	r3,zero,6210 <__multiply+0x1c0>
    6204:	00000506 	br	621c <__multiply+0x1cc>
    6208:	58c00017 	ldw	r3,0(r11)
    620c:	1800031e 	bne	r3,zero,621c <__multiply+0x1cc>
    6210:	843fffc4 	addi	r16,r16,-1
    6214:	5affff04 	addi	r11,r11,-4
    6218:	803ffb1e 	bne	r16,zero,6208 <__alt_mem_Flash_flash_data+0xf4006208>
    621c:	14000415 	stw	r16,16(r2)
    6220:	dfc00517 	ldw	ra,20(sp)
    6224:	dd000417 	ldw	r20,16(sp)
    6228:	dcc00317 	ldw	r19,12(sp)
    622c:	dc800217 	ldw	r18,8(sp)
    6230:	dc400117 	ldw	r17,4(sp)
    6234:	dc000017 	ldw	r16,0(sp)
    6238:	dec00604 	addi	sp,sp,24
    623c:	f800283a 	ret
    6240:	3029883a 	mov	r20,r6
    6244:	2823883a 	mov	r17,r5
    6248:	003f9006 	br	608c <__alt_mem_Flash_flash_data+0xf400608c>

0000624c <__pow5mult>:
    624c:	defffa04 	addi	sp,sp,-24
    6250:	dcc00315 	stw	r19,12(sp)
    6254:	dc800215 	stw	r18,8(sp)
    6258:	dc000015 	stw	r16,0(sp)
    625c:	dfc00515 	stw	ra,20(sp)
    6260:	dd000415 	stw	r20,16(sp)
    6264:	dc400115 	stw	r17,4(sp)
    6268:	308000cc 	andi	r2,r6,3
    626c:	3021883a 	mov	r16,r6
    6270:	2027883a 	mov	r19,r4
    6274:	2825883a 	mov	r18,r5
    6278:	10002e1e 	bne	r2,zero,6334 <__pow5mult+0xe8>
    627c:	8021d0ba 	srai	r16,r16,2
    6280:	80001a26 	beq	r16,zero,62ec <__pow5mult+0xa0>
    6284:	9c401217 	ldw	r17,72(r19)
    6288:	8800061e 	bne	r17,zero,62a4 <__pow5mult+0x58>
    628c:	00003406 	br	6360 <__pow5mult+0x114>
    6290:	8021d07a 	srai	r16,r16,1
    6294:	80001526 	beq	r16,zero,62ec <__pow5mult+0xa0>
    6298:	88800017 	ldw	r2,0(r17)
    629c:	10001c26 	beq	r2,zero,6310 <__pow5mult+0xc4>
    62a0:	1023883a 	mov	r17,r2
    62a4:	80c0004c 	andi	r3,r16,1
    62a8:	183ff926 	beq	r3,zero,6290 <__alt_mem_Flash_flash_data+0xf4006290>
    62ac:	900b883a 	mov	r5,r18
    62b0:	880d883a 	mov	r6,r17
    62b4:	9809883a 	mov	r4,r19
    62b8:	00060500 	call	6050 <__multiply>
    62bc:	90001b26 	beq	r18,zero,632c <__pow5mult+0xe0>
    62c0:	91c00117 	ldw	r7,4(r18)
    62c4:	98c01317 	ldw	r3,76(r19)
    62c8:	8021d07a 	srai	r16,r16,1
    62cc:	39cf883a 	add	r7,r7,r7
    62d0:	39cf883a 	add	r7,r7,r7
    62d4:	19c7883a 	add	r3,r3,r7
    62d8:	19000017 	ldw	r4,0(r3)
    62dc:	91000015 	stw	r4,0(r18)
    62e0:	1c800015 	stw	r18,0(r3)
    62e4:	1025883a 	mov	r18,r2
    62e8:	803feb1e 	bne	r16,zero,6298 <__alt_mem_Flash_flash_data+0xf4006298>
    62ec:	9005883a 	mov	r2,r18
    62f0:	dfc00517 	ldw	ra,20(sp)
    62f4:	dd000417 	ldw	r20,16(sp)
    62f8:	dcc00317 	ldw	r19,12(sp)
    62fc:	dc800217 	ldw	r18,8(sp)
    6300:	dc400117 	ldw	r17,4(sp)
    6304:	dc000017 	ldw	r16,0(sp)
    6308:	dec00604 	addi	sp,sp,24
    630c:	f800283a 	ret
    6310:	9809883a 	mov	r4,r19
    6314:	880b883a 	mov	r5,r17
    6318:	880d883a 	mov	r6,r17
    631c:	00060500 	call	6050 <__multiply>
    6320:	88800015 	stw	r2,0(r17)
    6324:	10000015 	stw	zero,0(r2)
    6328:	003fdd06 	br	62a0 <__alt_mem_Flash_flash_data+0xf40062a0>
    632c:	1025883a 	mov	r18,r2
    6330:	003fd706 	br	6290 <__alt_mem_Flash_flash_data+0xf4006290>
    6334:	10bfffc4 	addi	r2,r2,-1
    6338:	1085883a 	add	r2,r2,r2
    633c:	00c000b4 	movhi	r3,2
    6340:	18e5b504 	addi	r3,r3,-26924
    6344:	1085883a 	add	r2,r2,r2
    6348:	1885883a 	add	r2,r3,r2
    634c:	11800017 	ldw	r6,0(r2)
    6350:	000f883a 	mov	r7,zero
    6354:	0005cd80 	call	5cd8 <__multadd>
    6358:	1025883a 	mov	r18,r2
    635c:	003fc706 	br	627c <__alt_mem_Flash_flash_data+0xf400627c>
    6360:	05000044 	movi	r20,1
    6364:	9809883a 	mov	r4,r19
    6368:	a00b883a 	mov	r5,r20
    636c:	0005c080 	call	5c08 <_Balloc>
    6370:	1023883a 	mov	r17,r2
    6374:	00809c44 	movi	r2,625
    6378:	88800515 	stw	r2,20(r17)
    637c:	8d000415 	stw	r20,16(r17)
    6380:	9c401215 	stw	r17,72(r19)
    6384:	88000015 	stw	zero,0(r17)
    6388:	003fc606 	br	62a4 <__alt_mem_Flash_flash_data+0xf40062a4>

0000638c <__lshift>:
    638c:	defff904 	addi	sp,sp,-28
    6390:	dd000415 	stw	r20,16(sp)
    6394:	dcc00315 	stw	r19,12(sp)
    6398:	3029d17a 	srai	r20,r6,5
    639c:	2cc00417 	ldw	r19,16(r5)
    63a0:	28800217 	ldw	r2,8(r5)
    63a4:	dd400515 	stw	r21,20(sp)
    63a8:	a4e7883a 	add	r19,r20,r19
    63ac:	dc800215 	stw	r18,8(sp)
    63b0:	dc400115 	stw	r17,4(sp)
    63b4:	dc000015 	stw	r16,0(sp)
    63b8:	dfc00615 	stw	ra,24(sp)
    63bc:	9c000044 	addi	r16,r19,1
    63c0:	2823883a 	mov	r17,r5
    63c4:	302b883a 	mov	r21,r6
    63c8:	2025883a 	mov	r18,r4
    63cc:	29400117 	ldw	r5,4(r5)
    63d0:	1400030e 	bge	r2,r16,63e0 <__lshift+0x54>
    63d4:	1085883a 	add	r2,r2,r2
    63d8:	29400044 	addi	r5,r5,1
    63dc:	143ffd16 	blt	r2,r16,63d4 <__alt_mem_Flash_flash_data+0xf40063d4>
    63e0:	9009883a 	mov	r4,r18
    63e4:	0005c080 	call	5c08 <_Balloc>
    63e8:	11c00504 	addi	r7,r2,20
    63ec:	0500090e 	bge	zero,r20,6414 <__lshift+0x88>
    63f0:	3811883a 	mov	r8,r7
    63f4:	0007883a 	mov	r3,zero
    63f8:	40000015 	stw	zero,0(r8)
    63fc:	18c00044 	addi	r3,r3,1
    6400:	42000104 	addi	r8,r8,4
    6404:	1d3ffc1e 	bne	r3,r20,63f8 <__alt_mem_Flash_flash_data+0xf40063f8>
    6408:	18c7883a 	add	r3,r3,r3
    640c:	18c7883a 	add	r3,r3,r3
    6410:	38cf883a 	add	r7,r7,r3
    6414:	89000417 	ldw	r4,16(r17)
    6418:	88c00504 	addi	r3,r17,20
    641c:	a98007cc 	andi	r6,r21,31
    6420:	2109883a 	add	r4,r4,r4
    6424:	2109883a 	add	r4,r4,r4
    6428:	1909883a 	add	r4,r3,r4
    642c:	30002326 	beq	r6,zero,64bc <__lshift+0x130>
    6430:	01400804 	movi	r5,32
    6434:	298bc83a 	sub	r5,r5,r6
    6438:	0013883a 	mov	r9,zero
    643c:	1a000017 	ldw	r8,0(r3)
    6440:	3815883a 	mov	r10,r7
    6444:	39c00104 	addi	r7,r7,4
    6448:	4190983a 	sll	r8,r8,r6
    644c:	18c00104 	addi	r3,r3,4
    6450:	4a10b03a 	or	r8,r9,r8
    6454:	3a3fff15 	stw	r8,-4(r7)
    6458:	1a3fff17 	ldw	r8,-4(r3)
    645c:	4152d83a 	srl	r9,r8,r5
    6460:	193ff636 	bltu	r3,r4,643c <__alt_mem_Flash_flash_data+0xf400643c>
    6464:	52400115 	stw	r9,4(r10)
    6468:	48001a1e 	bne	r9,zero,64d4 <__lshift+0x148>
    646c:	843fffc4 	addi	r16,r16,-1
    6470:	14000415 	stw	r16,16(r2)
    6474:	88000826 	beq	r17,zero,6498 <__lshift+0x10c>
    6478:	89000117 	ldw	r4,4(r17)
    647c:	90c01317 	ldw	r3,76(r18)
    6480:	2109883a 	add	r4,r4,r4
    6484:	2109883a 	add	r4,r4,r4
    6488:	1907883a 	add	r3,r3,r4
    648c:	19000017 	ldw	r4,0(r3)
    6490:	89000015 	stw	r4,0(r17)
    6494:	1c400015 	stw	r17,0(r3)
    6498:	dfc00617 	ldw	ra,24(sp)
    649c:	dd400517 	ldw	r21,20(sp)
    64a0:	dd000417 	ldw	r20,16(sp)
    64a4:	dcc00317 	ldw	r19,12(sp)
    64a8:	dc800217 	ldw	r18,8(sp)
    64ac:	dc400117 	ldw	r17,4(sp)
    64b0:	dc000017 	ldw	r16,0(sp)
    64b4:	dec00704 	addi	sp,sp,28
    64b8:	f800283a 	ret
    64bc:	19400017 	ldw	r5,0(r3)
    64c0:	39c00104 	addi	r7,r7,4
    64c4:	18c00104 	addi	r3,r3,4
    64c8:	397fff15 	stw	r5,-4(r7)
    64cc:	193ffb36 	bltu	r3,r4,64bc <__alt_mem_Flash_flash_data+0xf40064bc>
    64d0:	003fe606 	br	646c <__alt_mem_Flash_flash_data+0xf400646c>
    64d4:	9c000084 	addi	r16,r19,2
    64d8:	003fe406 	br	646c <__alt_mem_Flash_flash_data+0xf400646c>

000064dc <__mcmp>:
    64dc:	20800417 	ldw	r2,16(r4)
    64e0:	28c00417 	ldw	r3,16(r5)
    64e4:	10c5c83a 	sub	r2,r2,r3
    64e8:	1000111e 	bne	r2,zero,6530 <__mcmp+0x54>
    64ec:	18c7883a 	add	r3,r3,r3
    64f0:	18c7883a 	add	r3,r3,r3
    64f4:	21000504 	addi	r4,r4,20
    64f8:	29400504 	addi	r5,r5,20
    64fc:	20c5883a 	add	r2,r4,r3
    6500:	28cb883a 	add	r5,r5,r3
    6504:	00000106 	br	650c <__mcmp+0x30>
    6508:	20800a2e 	bgeu	r4,r2,6534 <__mcmp+0x58>
    650c:	10bfff04 	addi	r2,r2,-4
    6510:	297fff04 	addi	r5,r5,-4
    6514:	11800017 	ldw	r6,0(r2)
    6518:	28c00017 	ldw	r3,0(r5)
    651c:	30fffa26 	beq	r6,r3,6508 <__alt_mem_Flash_flash_data+0xf4006508>
    6520:	30c00236 	bltu	r6,r3,652c <__mcmp+0x50>
    6524:	00800044 	movi	r2,1
    6528:	f800283a 	ret
    652c:	00bfffc4 	movi	r2,-1
    6530:	f800283a 	ret
    6534:	0005883a 	mov	r2,zero
    6538:	f800283a 	ret

0000653c <__mdiff>:
    653c:	defffb04 	addi	sp,sp,-20
    6540:	dc000015 	stw	r16,0(sp)
    6544:	2821883a 	mov	r16,r5
    6548:	dcc00315 	stw	r19,12(sp)
    654c:	300b883a 	mov	r5,r6
    6550:	2027883a 	mov	r19,r4
    6554:	8009883a 	mov	r4,r16
    6558:	dc800215 	stw	r18,8(sp)
    655c:	dfc00415 	stw	ra,16(sp)
    6560:	dc400115 	stw	r17,4(sp)
    6564:	3025883a 	mov	r18,r6
    6568:	00064dc0 	call	64dc <__mcmp>
    656c:	10005226 	beq	r2,zero,66b8 <__mdiff+0x17c>
    6570:	10004c16 	blt	r2,zero,66a4 <__mdiff+0x168>
    6574:	0023883a 	mov	r17,zero
    6578:	81400117 	ldw	r5,4(r16)
    657c:	9809883a 	mov	r4,r19
    6580:	0005c080 	call	5c08 <_Balloc>
    6584:	83400417 	ldw	r13,16(r16)
    6588:	93800417 	ldw	r14,16(r18)
    658c:	81000504 	addi	r4,r16,20
    6590:	6b59883a 	add	r12,r13,r13
    6594:	739d883a 	add	r14,r14,r14
    6598:	6319883a 	add	r12,r12,r12
    659c:	91800504 	addi	r6,r18,20
    65a0:	739d883a 	add	r14,r14,r14
    65a4:	14400315 	stw	r17,12(r2)
    65a8:	2319883a 	add	r12,r4,r12
    65ac:	339d883a 	add	r14,r6,r14
    65b0:	12400504 	addi	r9,r2,20
    65b4:	0007883a 	mov	r3,zero
    65b8:	22000017 	ldw	r8,0(r4)
    65bc:	32800017 	ldw	r10,0(r6)
    65c0:	4ac00104 	addi	r11,r9,4
    65c4:	41ffffcc 	andi	r7,r8,65535
    65c8:	38c7883a 	add	r3,r7,r3
    65cc:	51ffffcc 	andi	r7,r10,65535
    65d0:	19cfc83a 	sub	r7,r3,r7
    65d4:	4010d43a 	srli	r8,r8,16
    65d8:	5014d43a 	srli	r10,r10,16
    65dc:	3807d43a 	srai	r3,r7,16
    65e0:	39ffffcc 	andi	r7,r7,65535
    65e4:	4291c83a 	sub	r8,r8,r10
    65e8:	40c7883a 	add	r3,r8,r3
    65ec:	1810943a 	slli	r8,r3,16
    65f0:	31800104 	addi	r6,r6,4
    65f4:	21000104 	addi	r4,r4,4
    65f8:	41ceb03a 	or	r7,r8,r7
    65fc:	49c00015 	stw	r7,0(r9)
    6600:	1807d43a 	srai	r3,r3,16
    6604:	580b883a 	mov	r5,r11
    6608:	5813883a 	mov	r9,r11
    660c:	33bfea36 	bltu	r6,r14,65b8 <__alt_mem_Flash_flash_data+0xf40065b8>
    6610:	2011883a 	mov	r8,r4
    6614:	2300152e 	bgeu	r4,r12,666c <__mdiff+0x130>
    6618:	21400017 	ldw	r5,0(r4)
    661c:	4a400104 	addi	r9,r9,4
    6620:	21000104 	addi	r4,r4,4
    6624:	29ffffcc 	andi	r7,r5,65535
    6628:	38c7883a 	add	r3,r7,r3
    662c:	280ad43a 	srli	r5,r5,16
    6630:	180dd43a 	srai	r6,r3,16
    6634:	19ffffcc 	andi	r7,r3,65535
    6638:	3147883a 	add	r3,r6,r5
    663c:	180a943a 	slli	r5,r3,16
    6640:	1807d43a 	srai	r3,r3,16
    6644:	29ceb03a 	or	r7,r5,r7
    6648:	49ffff15 	stw	r7,-4(r9)
    664c:	233ff236 	bltu	r4,r12,6618 <__alt_mem_Flash_flash_data+0xf4006618>
    6650:	0206303a 	nor	r3,zero,r8
    6654:	1b07883a 	add	r3,r3,r12
    6658:	1806d0ba 	srli	r3,r3,2
    665c:	18c00044 	addi	r3,r3,1
    6660:	18c7883a 	add	r3,r3,r3
    6664:	18c7883a 	add	r3,r3,r3
    6668:	58cb883a 	add	r5,r11,r3
    666c:	28ffff04 	addi	r3,r5,-4
    6670:	3800041e 	bne	r7,zero,6684 <__mdiff+0x148>
    6674:	18ffff04 	addi	r3,r3,-4
    6678:	19000017 	ldw	r4,0(r3)
    667c:	6b7fffc4 	addi	r13,r13,-1
    6680:	203ffc26 	beq	r4,zero,6674 <__alt_mem_Flash_flash_data+0xf4006674>
    6684:	13400415 	stw	r13,16(r2)
    6688:	dfc00417 	ldw	ra,16(sp)
    668c:	dcc00317 	ldw	r19,12(sp)
    6690:	dc800217 	ldw	r18,8(sp)
    6694:	dc400117 	ldw	r17,4(sp)
    6698:	dc000017 	ldw	r16,0(sp)
    669c:	dec00504 	addi	sp,sp,20
    66a0:	f800283a 	ret
    66a4:	8005883a 	mov	r2,r16
    66a8:	04400044 	movi	r17,1
    66ac:	9021883a 	mov	r16,r18
    66b0:	1025883a 	mov	r18,r2
    66b4:	003fb006 	br	6578 <__alt_mem_Flash_flash_data+0xf4006578>
    66b8:	9809883a 	mov	r4,r19
    66bc:	000b883a 	mov	r5,zero
    66c0:	0005c080 	call	5c08 <_Balloc>
    66c4:	00c00044 	movi	r3,1
    66c8:	10c00415 	stw	r3,16(r2)
    66cc:	10000515 	stw	zero,20(r2)
    66d0:	003fed06 	br	6688 <__alt_mem_Flash_flash_data+0xf4006688>

000066d4 <__ulp>:
    66d4:	295ffc2c 	andhi	r5,r5,32752
    66d8:	00bf3034 	movhi	r2,64704
    66dc:	2887883a 	add	r3,r5,r2
    66e0:	00c0020e 	bge	zero,r3,66ec <__ulp+0x18>
    66e4:	0005883a 	mov	r2,zero
    66e8:	f800283a 	ret
    66ec:	00c7c83a 	sub	r3,zero,r3
    66f0:	180bd53a 	srai	r5,r3,20
    66f4:	008004c4 	movi	r2,19
    66f8:	11400a0e 	bge	r2,r5,6724 <__ulp+0x50>
    66fc:	00800c84 	movi	r2,50
    6700:	0007883a 	mov	r3,zero
    6704:	11400516 	blt	r2,r5,671c <__ulp+0x48>
    6708:	00800cc4 	movi	r2,51
    670c:	114bc83a 	sub	r5,r2,r5
    6710:	00800044 	movi	r2,1
    6714:	1144983a 	sll	r2,r2,r5
    6718:	f800283a 	ret
    671c:	00800044 	movi	r2,1
    6720:	f800283a 	ret
    6724:	00800234 	movhi	r2,8
    6728:	1147d83a 	sra	r3,r2,r5
    672c:	0005883a 	mov	r2,zero
    6730:	f800283a 	ret

00006734 <__b2d>:
    6734:	defffa04 	addi	sp,sp,-24
    6738:	dc000015 	stw	r16,0(sp)
    673c:	24000417 	ldw	r16,16(r4)
    6740:	dc400115 	stw	r17,4(sp)
    6744:	24400504 	addi	r17,r4,20
    6748:	8421883a 	add	r16,r16,r16
    674c:	8421883a 	add	r16,r16,r16
    6750:	8c21883a 	add	r16,r17,r16
    6754:	dc800215 	stw	r18,8(sp)
    6758:	84bfff17 	ldw	r18,-4(r16)
    675c:	dd000415 	stw	r20,16(sp)
    6760:	dcc00315 	stw	r19,12(sp)
    6764:	9009883a 	mov	r4,r18
    6768:	2829883a 	mov	r20,r5
    676c:	dfc00515 	stw	ra,20(sp)
    6770:	0005efc0 	call	5efc <__hi0bits>
    6774:	00c00804 	movi	r3,32
    6778:	1887c83a 	sub	r3,r3,r2
    677c:	a0c00015 	stw	r3,0(r20)
    6780:	00c00284 	movi	r3,10
    6784:	84ffff04 	addi	r19,r16,-4
    6788:	18801216 	blt	r3,r2,67d4 <__b2d+0xa0>
    678c:	014002c4 	movi	r5,11
    6790:	2889c83a 	sub	r4,r5,r2
    6794:	9106d83a 	srl	r3,r18,r4
    6798:	18cffc34 	orhi	r3,r3,16368
    679c:	8cc0282e 	bgeu	r17,r19,6840 <__b2d+0x10c>
    67a0:	817ffe17 	ldw	r5,-8(r16)
    67a4:	290ad83a 	srl	r5,r5,r4
    67a8:	10800544 	addi	r2,r2,21
    67ac:	9084983a 	sll	r2,r18,r2
    67b0:	2884b03a 	or	r2,r5,r2
    67b4:	dfc00517 	ldw	ra,20(sp)
    67b8:	dd000417 	ldw	r20,16(sp)
    67bc:	dcc00317 	ldw	r19,12(sp)
    67c0:	dc800217 	ldw	r18,8(sp)
    67c4:	dc400117 	ldw	r17,4(sp)
    67c8:	dc000017 	ldw	r16,0(sp)
    67cc:	dec00604 	addi	sp,sp,24
    67d0:	f800283a 	ret
    67d4:	113ffd44 	addi	r4,r2,-11
    67d8:	8cc00f2e 	bgeu	r17,r19,6818 <__b2d+0xe4>
    67dc:	81bffe04 	addi	r6,r16,-8
    67e0:	817ffe17 	ldw	r5,-8(r16)
    67e4:	20001326 	beq	r4,zero,6834 <__b2d+0x100>
    67e8:	00c00ac4 	movi	r3,43
    67ec:	1885c83a 	sub	r2,r3,r2
    67f0:	2886d83a 	srl	r3,r5,r2
    67f4:	9124983a 	sll	r18,r18,r4
    67f8:	90e4b03a 	or	r18,r18,r3
    67fc:	90cffc34 	orhi	r3,r18,16368
    6800:	8980112e 	bgeu	r17,r6,6848 <__b2d+0x114>
    6804:	81bffd17 	ldw	r6,-12(r16)
    6808:	308cd83a 	srl	r6,r6,r2
    680c:	2904983a 	sll	r2,r5,r4
    6810:	1184b03a 	or	r2,r2,r6
    6814:	003fe706 	br	67b4 <__alt_mem_Flash_flash_data+0xf40067b4>
    6818:	20000526 	beq	r4,zero,6830 <__b2d+0xfc>
    681c:	9124983a 	sll	r18,r18,r4
    6820:	000d883a 	mov	r6,zero
    6824:	000b883a 	mov	r5,zero
    6828:	90cffc34 	orhi	r3,r18,16368
    682c:	003ff706 	br	680c <__alt_mem_Flash_flash_data+0xf400680c>
    6830:	000b883a 	mov	r5,zero
    6834:	90cffc34 	orhi	r3,r18,16368
    6838:	2805883a 	mov	r2,r5
    683c:	003fdd06 	br	67b4 <__alt_mem_Flash_flash_data+0xf40067b4>
    6840:	000b883a 	mov	r5,zero
    6844:	003fd806 	br	67a8 <__alt_mem_Flash_flash_data+0xf40067a8>
    6848:	000d883a 	mov	r6,zero
    684c:	003fef06 	br	680c <__alt_mem_Flash_flash_data+0xf400680c>

00006850 <__d2b>:
    6850:	defff704 	addi	sp,sp,-36
    6854:	dc000215 	stw	r16,8(sp)
    6858:	3021883a 	mov	r16,r6
    685c:	dc400315 	stw	r17,12(sp)
    6860:	8022907a 	slli	r17,r16,1
    6864:	dd400715 	stw	r21,28(sp)
    6868:	282b883a 	mov	r21,r5
    686c:	01400044 	movi	r5,1
    6870:	dd000615 	stw	r20,24(sp)
    6874:	dcc00515 	stw	r19,20(sp)
    6878:	dc800415 	stw	r18,16(sp)
    687c:	dfc00815 	stw	ra,32(sp)
    6880:	3829883a 	mov	r20,r7
    6884:	dc800917 	ldw	r18,36(sp)
    6888:	8822d57a 	srli	r17,r17,21
    688c:	0005c080 	call	5c08 <_Balloc>
    6890:	1027883a 	mov	r19,r2
    6894:	00800434 	movhi	r2,16
    6898:	10bfffc4 	addi	r2,r2,-1
    689c:	808c703a 	and	r6,r16,r2
    68a0:	88000126 	beq	r17,zero,68a8 <__d2b+0x58>
    68a4:	31800434 	orhi	r6,r6,16
    68a8:	d9800015 	stw	r6,0(sp)
    68ac:	a8001f26 	beq	r21,zero,692c <__d2b+0xdc>
    68b0:	d9000104 	addi	r4,sp,4
    68b4:	dd400115 	stw	r21,4(sp)
    68b8:	0005f640 	call	5f64 <__lo0bits>
    68bc:	d8c00017 	ldw	r3,0(sp)
    68c0:	1000291e 	bne	r2,zero,6968 <__d2b+0x118>
    68c4:	d9000117 	ldw	r4,4(sp)
    68c8:	99000515 	stw	r4,20(r19)
    68cc:	1820c03a 	cmpne	r16,r3,zero
    68d0:	84000044 	addi	r16,r16,1
    68d4:	98c00615 	stw	r3,24(r19)
    68d8:	9c000415 	stw	r16,16(r19)
    68dc:	88001b1e 	bne	r17,zero,694c <__d2b+0xfc>
    68e0:	800690ba 	slli	r3,r16,2
    68e4:	10bef384 	addi	r2,r2,-1074
    68e8:	a0800015 	stw	r2,0(r20)
    68ec:	98c5883a 	add	r2,r19,r3
    68f0:	11000417 	ldw	r4,16(r2)
    68f4:	8020917a 	slli	r16,r16,5
    68f8:	0005efc0 	call	5efc <__hi0bits>
    68fc:	8085c83a 	sub	r2,r16,r2
    6900:	90800015 	stw	r2,0(r18)
    6904:	9805883a 	mov	r2,r19
    6908:	dfc00817 	ldw	ra,32(sp)
    690c:	dd400717 	ldw	r21,28(sp)
    6910:	dd000617 	ldw	r20,24(sp)
    6914:	dcc00517 	ldw	r19,20(sp)
    6918:	dc800417 	ldw	r18,16(sp)
    691c:	dc400317 	ldw	r17,12(sp)
    6920:	dc000217 	ldw	r16,8(sp)
    6924:	dec00904 	addi	sp,sp,36
    6928:	f800283a 	ret
    692c:	d809883a 	mov	r4,sp
    6930:	0005f640 	call	5f64 <__lo0bits>
    6934:	d8c00017 	ldw	r3,0(sp)
    6938:	04000044 	movi	r16,1
    693c:	9c000415 	stw	r16,16(r19)
    6940:	98c00515 	stw	r3,20(r19)
    6944:	10800804 	addi	r2,r2,32
    6948:	883fe526 	beq	r17,zero,68e0 <__alt_mem_Flash_flash_data+0xf40068e0>
    694c:	8c7ef344 	addi	r17,r17,-1075
    6950:	88a3883a 	add	r17,r17,r2
    6954:	00c00d44 	movi	r3,53
    6958:	a4400015 	stw	r17,0(r20)
    695c:	1885c83a 	sub	r2,r3,r2
    6960:	90800015 	stw	r2,0(r18)
    6964:	003fe706 	br	6904 <__alt_mem_Flash_flash_data+0xf4006904>
    6968:	01000804 	movi	r4,32
    696c:	2089c83a 	sub	r4,r4,r2
    6970:	1908983a 	sll	r4,r3,r4
    6974:	d9400117 	ldw	r5,4(sp)
    6978:	1886d83a 	srl	r3,r3,r2
    697c:	2148b03a 	or	r4,r4,r5
    6980:	99000515 	stw	r4,20(r19)
    6984:	d8c00015 	stw	r3,0(sp)
    6988:	003fd006 	br	68cc <__alt_mem_Flash_flash_data+0xf40068cc>

0000698c <__ratio>:
    698c:	defff904 	addi	sp,sp,-28
    6990:	dc400315 	stw	r17,12(sp)
    6994:	2823883a 	mov	r17,r5
    6998:	d9400104 	addi	r5,sp,4
    699c:	dfc00615 	stw	ra,24(sp)
    69a0:	dcc00515 	stw	r19,20(sp)
    69a4:	dc800415 	stw	r18,16(sp)
    69a8:	2027883a 	mov	r19,r4
    69ac:	dc000215 	stw	r16,8(sp)
    69b0:	00067340 	call	6734 <__b2d>
    69b4:	8809883a 	mov	r4,r17
    69b8:	d80b883a 	mov	r5,sp
    69bc:	1025883a 	mov	r18,r2
    69c0:	1821883a 	mov	r16,r3
    69c4:	00067340 	call	6734 <__b2d>
    69c8:	8a400417 	ldw	r9,16(r17)
    69cc:	9a000417 	ldw	r8,16(r19)
    69d0:	100d883a 	mov	r6,r2
    69d4:	d8800017 	ldw	r2,0(sp)
    69d8:	4251c83a 	sub	r8,r8,r9
    69dc:	4012917a 	slli	r9,r8,5
    69e0:	da000117 	ldw	r8,4(sp)
    69e4:	4091c83a 	sub	r8,r8,r2
    69e8:	4251883a 	add	r8,r8,r9
    69ec:	02000d0e 	bge	zero,r8,6a24 <__ratio+0x98>
    69f0:	4010953a 	slli	r8,r8,20
    69f4:	4421883a 	add	r16,r8,r16
    69f8:	9009883a 	mov	r4,r18
    69fc:	800b883a 	mov	r5,r16
    6a00:	180f883a 	mov	r7,r3
    6a04:	000ac040 	call	ac04 <__divdf3>
    6a08:	dfc00617 	ldw	ra,24(sp)
    6a0c:	dcc00517 	ldw	r19,20(sp)
    6a10:	dc800417 	ldw	r18,16(sp)
    6a14:	dc400317 	ldw	r17,12(sp)
    6a18:	dc000217 	ldw	r16,8(sp)
    6a1c:	dec00704 	addi	sp,sp,28
    6a20:	f800283a 	ret
    6a24:	4010953a 	slli	r8,r8,20
    6a28:	1a07c83a 	sub	r3,r3,r8
    6a2c:	003ff206 	br	69f8 <__alt_mem_Flash_flash_data+0xf40069f8>

00006a30 <_mprec_log10>:
    6a30:	defffe04 	addi	sp,sp,-8
    6a34:	dc000015 	stw	r16,0(sp)
    6a38:	dfc00115 	stw	ra,4(sp)
    6a3c:	008005c4 	movi	r2,23
    6a40:	2021883a 	mov	r16,r4
    6a44:	11000d0e 	bge	r2,r4,6a7c <_mprec_log10+0x4c>
    6a48:	0005883a 	mov	r2,zero
    6a4c:	00cffc34 	movhi	r3,16368
    6a50:	843fffc4 	addi	r16,r16,-1
    6a54:	1009883a 	mov	r4,r2
    6a58:	180b883a 	mov	r5,r3
    6a5c:	000d883a 	mov	r6,zero
    6a60:	01d00934 	movhi	r7,16420
    6a64:	000b7140 	call	b714 <__muldf3>
    6a68:	803ff91e 	bne	r16,zero,6a50 <__alt_mem_Flash_flash_data+0xf4006a50>
    6a6c:	dfc00117 	ldw	ra,4(sp)
    6a70:	dc000017 	ldw	r16,0(sp)
    6a74:	dec00204 	addi	sp,sp,8
    6a78:	f800283a 	ret
    6a7c:	202090fa 	slli	r16,r4,3
    6a80:	008000b4 	movhi	r2,2
    6a84:	10a5cc04 	addi	r2,r2,-26832
    6a88:	1421883a 	add	r16,r2,r16
    6a8c:	80800017 	ldw	r2,0(r16)
    6a90:	80c00117 	ldw	r3,4(r16)
    6a94:	dfc00117 	ldw	ra,4(sp)
    6a98:	dc000017 	ldw	r16,0(sp)
    6a9c:	dec00204 	addi	sp,sp,8
    6aa0:	f800283a 	ret

00006aa4 <__copybits>:
    6aa4:	297fffc4 	addi	r5,r5,-1
    6aa8:	280fd17a 	srai	r7,r5,5
    6aac:	30c00417 	ldw	r3,16(r6)
    6ab0:	30800504 	addi	r2,r6,20
    6ab4:	39c00044 	addi	r7,r7,1
    6ab8:	18c7883a 	add	r3,r3,r3
    6abc:	39cf883a 	add	r7,r7,r7
    6ac0:	18c7883a 	add	r3,r3,r3
    6ac4:	39cf883a 	add	r7,r7,r7
    6ac8:	10c7883a 	add	r3,r2,r3
    6acc:	21cf883a 	add	r7,r4,r7
    6ad0:	10c00d2e 	bgeu	r2,r3,6b08 <__copybits+0x64>
    6ad4:	200b883a 	mov	r5,r4
    6ad8:	12000017 	ldw	r8,0(r2)
    6adc:	29400104 	addi	r5,r5,4
    6ae0:	10800104 	addi	r2,r2,4
    6ae4:	2a3fff15 	stw	r8,-4(r5)
    6ae8:	10fffb36 	bltu	r2,r3,6ad8 <__alt_mem_Flash_flash_data+0xf4006ad8>
    6aec:	1985c83a 	sub	r2,r3,r6
    6af0:	10bffac4 	addi	r2,r2,-21
    6af4:	1004d0ba 	srli	r2,r2,2
    6af8:	10800044 	addi	r2,r2,1
    6afc:	1085883a 	add	r2,r2,r2
    6b00:	1085883a 	add	r2,r2,r2
    6b04:	2089883a 	add	r4,r4,r2
    6b08:	21c0032e 	bgeu	r4,r7,6b18 <__copybits+0x74>
    6b0c:	20000015 	stw	zero,0(r4)
    6b10:	21000104 	addi	r4,r4,4
    6b14:	21fffd36 	bltu	r4,r7,6b0c <__alt_mem_Flash_flash_data+0xf4006b0c>
    6b18:	f800283a 	ret

00006b1c <__any_on>:
    6b1c:	20c00417 	ldw	r3,16(r4)
    6b20:	2805d17a 	srai	r2,r5,5
    6b24:	21000504 	addi	r4,r4,20
    6b28:	18800d0e 	bge	r3,r2,6b60 <__any_on+0x44>
    6b2c:	18c7883a 	add	r3,r3,r3
    6b30:	18c7883a 	add	r3,r3,r3
    6b34:	20c7883a 	add	r3,r4,r3
    6b38:	20c0192e 	bgeu	r4,r3,6ba0 <__any_on+0x84>
    6b3c:	18bfff17 	ldw	r2,-4(r3)
    6b40:	18ffff04 	addi	r3,r3,-4
    6b44:	1000041e 	bne	r2,zero,6b58 <__any_on+0x3c>
    6b48:	20c0142e 	bgeu	r4,r3,6b9c <__any_on+0x80>
    6b4c:	18ffff04 	addi	r3,r3,-4
    6b50:	19400017 	ldw	r5,0(r3)
    6b54:	283ffc26 	beq	r5,zero,6b48 <__alt_mem_Flash_flash_data+0xf4006b48>
    6b58:	00800044 	movi	r2,1
    6b5c:	f800283a 	ret
    6b60:	10c00a0e 	bge	r2,r3,6b8c <__any_on+0x70>
    6b64:	1085883a 	add	r2,r2,r2
    6b68:	1085883a 	add	r2,r2,r2
    6b6c:	294007cc 	andi	r5,r5,31
    6b70:	2087883a 	add	r3,r4,r2
    6b74:	283ff026 	beq	r5,zero,6b38 <__alt_mem_Flash_flash_data+0xf4006b38>
    6b78:	19800017 	ldw	r6,0(r3)
    6b7c:	3144d83a 	srl	r2,r6,r5
    6b80:	114a983a 	sll	r5,r2,r5
    6b84:	29bff41e 	bne	r5,r6,6b58 <__alt_mem_Flash_flash_data+0xf4006b58>
    6b88:	003feb06 	br	6b38 <__alt_mem_Flash_flash_data+0xf4006b38>
    6b8c:	1085883a 	add	r2,r2,r2
    6b90:	1085883a 	add	r2,r2,r2
    6b94:	2087883a 	add	r3,r4,r2
    6b98:	003fe706 	br	6b38 <__alt_mem_Flash_flash_data+0xf4006b38>
    6b9c:	f800283a 	ret
    6ba0:	0005883a 	mov	r2,zero
    6ba4:	f800283a 	ret

00006ba8 <__fpclassifyd>:
    6ba8:	00a00034 	movhi	r2,32768
    6bac:	10bfffc4 	addi	r2,r2,-1
    6bb0:	2884703a 	and	r2,r5,r2
    6bb4:	10000726 	beq	r2,zero,6bd4 <__fpclassifyd+0x2c>
    6bb8:	00fffc34 	movhi	r3,65520
    6bbc:	019ff834 	movhi	r6,32736
    6bc0:	28c7883a 	add	r3,r5,r3
    6bc4:	31bfffc4 	addi	r6,r6,-1
    6bc8:	30c00536 	bltu	r6,r3,6be0 <__fpclassifyd+0x38>
    6bcc:	00800104 	movi	r2,4
    6bd0:	f800283a 	ret
    6bd4:	2000021e 	bne	r4,zero,6be0 <__fpclassifyd+0x38>
    6bd8:	00800084 	movi	r2,2
    6bdc:	f800283a 	ret
    6be0:	00dffc34 	movhi	r3,32752
    6be4:	019ff834 	movhi	r6,32736
    6be8:	28cb883a 	add	r5,r5,r3
    6bec:	31bfffc4 	addi	r6,r6,-1
    6bf0:	317ff62e 	bgeu	r6,r5,6bcc <__alt_mem_Flash_flash_data+0xf4006bcc>
    6bf4:	01400434 	movhi	r5,16
    6bf8:	297fffc4 	addi	r5,r5,-1
    6bfc:	28800236 	bltu	r5,r2,6c08 <__fpclassifyd+0x60>
    6c00:	008000c4 	movi	r2,3
    6c04:	f800283a 	ret
    6c08:	10c00226 	beq	r2,r3,6c14 <__fpclassifyd+0x6c>
    6c0c:	0005883a 	mov	r2,zero
    6c10:	f800283a 	ret
    6c14:	2005003a 	cmpeq	r2,r4,zero
    6c18:	f800283a 	ret

00006c1c <_sbrk_r>:
    6c1c:	defffd04 	addi	sp,sp,-12
    6c20:	dc000015 	stw	r16,0(sp)
    6c24:	040000b4 	movhi	r16,2
    6c28:	dc400115 	stw	r17,4(sp)
    6c2c:	84388004 	addi	r16,r16,-7680
    6c30:	2023883a 	mov	r17,r4
    6c34:	2809883a 	mov	r4,r5
    6c38:	dfc00215 	stw	ra,8(sp)
    6c3c:	80000015 	stw	zero,0(r16)
    6c40:	000d1300 	call	d130 <sbrk>
    6c44:	00ffffc4 	movi	r3,-1
    6c48:	10c00526 	beq	r2,r3,6c60 <_sbrk_r+0x44>
    6c4c:	dfc00217 	ldw	ra,8(sp)
    6c50:	dc400117 	ldw	r17,4(sp)
    6c54:	dc000017 	ldw	r16,0(sp)
    6c58:	dec00304 	addi	sp,sp,12
    6c5c:	f800283a 	ret
    6c60:	80c00017 	ldw	r3,0(r16)
    6c64:	183ff926 	beq	r3,zero,6c4c <__alt_mem_Flash_flash_data+0xf4006c4c>
    6c68:	88c00015 	stw	r3,0(r17)
    6c6c:	003ff706 	br	6c4c <__alt_mem_Flash_flash_data+0xf4006c4c>

00006c70 <__sread>:
    6c70:	defffe04 	addi	sp,sp,-8
    6c74:	dc000015 	stw	r16,0(sp)
    6c78:	2821883a 	mov	r16,r5
    6c7c:	2940038f 	ldh	r5,14(r5)
    6c80:	dfc00115 	stw	ra,4(sp)
    6c84:	0008dec0 	call	8dec <_read_r>
    6c88:	10000716 	blt	r2,zero,6ca8 <__sread+0x38>
    6c8c:	80c01417 	ldw	r3,80(r16)
    6c90:	1887883a 	add	r3,r3,r2
    6c94:	80c01415 	stw	r3,80(r16)
    6c98:	dfc00117 	ldw	ra,4(sp)
    6c9c:	dc000017 	ldw	r16,0(sp)
    6ca0:	dec00204 	addi	sp,sp,8
    6ca4:	f800283a 	ret
    6ca8:	80c0030b 	ldhu	r3,12(r16)
    6cac:	18fbffcc 	andi	r3,r3,61439
    6cb0:	80c0030d 	sth	r3,12(r16)
    6cb4:	dfc00117 	ldw	ra,4(sp)
    6cb8:	dc000017 	ldw	r16,0(sp)
    6cbc:	dec00204 	addi	sp,sp,8
    6cc0:	f800283a 	ret

00006cc4 <__seofread>:
    6cc4:	0005883a 	mov	r2,zero
    6cc8:	f800283a 	ret

00006ccc <__swrite>:
    6ccc:	2880030b 	ldhu	r2,12(r5)
    6cd0:	defffb04 	addi	sp,sp,-20
    6cd4:	dcc00315 	stw	r19,12(sp)
    6cd8:	dc800215 	stw	r18,8(sp)
    6cdc:	dc400115 	stw	r17,4(sp)
    6ce0:	dc000015 	stw	r16,0(sp)
    6ce4:	dfc00415 	stw	ra,16(sp)
    6ce8:	10c0400c 	andi	r3,r2,256
    6cec:	2821883a 	mov	r16,r5
    6cf0:	2027883a 	mov	r19,r4
    6cf4:	3025883a 	mov	r18,r6
    6cf8:	3823883a 	mov	r17,r7
    6cfc:	18000526 	beq	r3,zero,6d14 <__swrite+0x48>
    6d00:	2940038f 	ldh	r5,14(r5)
    6d04:	000d883a 	mov	r6,zero
    6d08:	01c00084 	movi	r7,2
    6d0c:	0008c340 	call	8c34 <_lseek_r>
    6d10:	8080030b 	ldhu	r2,12(r16)
    6d14:	8140038f 	ldh	r5,14(r16)
    6d18:	10bbffcc 	andi	r2,r2,61439
    6d1c:	9809883a 	mov	r4,r19
    6d20:	900d883a 	mov	r6,r18
    6d24:	880f883a 	mov	r7,r17
    6d28:	8080030d 	sth	r2,12(r16)
    6d2c:	dfc00417 	ldw	ra,16(sp)
    6d30:	dcc00317 	ldw	r19,12(sp)
    6d34:	dc800217 	ldw	r18,8(sp)
    6d38:	dc400117 	ldw	r17,4(sp)
    6d3c:	dc000017 	ldw	r16,0(sp)
    6d40:	dec00504 	addi	sp,sp,20
    6d44:	00082701 	jmpi	8270 <_write_r>

00006d48 <__sseek>:
    6d48:	defffe04 	addi	sp,sp,-8
    6d4c:	dc000015 	stw	r16,0(sp)
    6d50:	2821883a 	mov	r16,r5
    6d54:	2940038f 	ldh	r5,14(r5)
    6d58:	dfc00115 	stw	ra,4(sp)
    6d5c:	0008c340 	call	8c34 <_lseek_r>
    6d60:	00ffffc4 	movi	r3,-1
    6d64:	10c00826 	beq	r2,r3,6d88 <__sseek+0x40>
    6d68:	80c0030b 	ldhu	r3,12(r16)
    6d6c:	80801415 	stw	r2,80(r16)
    6d70:	18c40014 	ori	r3,r3,4096
    6d74:	80c0030d 	sth	r3,12(r16)
    6d78:	dfc00117 	ldw	ra,4(sp)
    6d7c:	dc000017 	ldw	r16,0(sp)
    6d80:	dec00204 	addi	sp,sp,8
    6d84:	f800283a 	ret
    6d88:	80c0030b 	ldhu	r3,12(r16)
    6d8c:	18fbffcc 	andi	r3,r3,61439
    6d90:	80c0030d 	sth	r3,12(r16)
    6d94:	dfc00117 	ldw	ra,4(sp)
    6d98:	dc000017 	ldw	r16,0(sp)
    6d9c:	dec00204 	addi	sp,sp,8
    6da0:	f800283a 	ret

00006da4 <__sclose>:
    6da4:	2940038f 	ldh	r5,14(r5)
    6da8:	00082cc1 	jmpi	82cc <_close_r>

00006dac <__sprint_r.part.0>:
    6dac:	28801917 	ldw	r2,100(r5)
    6db0:	defff604 	addi	sp,sp,-40
    6db4:	dd400515 	stw	r21,20(sp)
    6db8:	dcc00315 	stw	r19,12(sp)
    6dbc:	dfc00915 	stw	ra,36(sp)
    6dc0:	df000815 	stw	fp,32(sp)
    6dc4:	ddc00715 	stw	r23,28(sp)
    6dc8:	dd800615 	stw	r22,24(sp)
    6dcc:	dd000415 	stw	r20,16(sp)
    6dd0:	dc800215 	stw	r18,8(sp)
    6dd4:	dc400115 	stw	r17,4(sp)
    6dd8:	dc000015 	stw	r16,0(sp)
    6ddc:	1088000c 	andi	r2,r2,8192
    6de0:	2827883a 	mov	r19,r5
    6de4:	302b883a 	mov	r21,r6
    6de8:	10002d26 	beq	r2,zero,6ea0 <__sprint_r.part.0+0xf4>
    6dec:	30800217 	ldw	r2,8(r6)
    6df0:	35800017 	ldw	r22,0(r6)
    6df4:	10002826 	beq	r2,zero,6e98 <__sprint_r.part.0+0xec>
    6df8:	2029883a 	mov	r20,r4
    6dfc:	b5c00104 	addi	r23,r22,4
    6e00:	04bfffc4 	movi	r18,-1
    6e04:	bc400017 	ldw	r17,0(r23)
    6e08:	b4000017 	ldw	r16,0(r22)
    6e0c:	0039883a 	mov	fp,zero
    6e10:	8822d0ba 	srli	r17,r17,2
    6e14:	04400316 	blt	zero,r17,6e24 <__sprint_r.part.0+0x78>
    6e18:	00001806 	br	6e7c <__sprint_r.part.0+0xd0>
    6e1c:	84000104 	addi	r16,r16,4
    6e20:	8f001526 	beq	r17,fp,6e78 <__sprint_r.part.0+0xcc>
    6e24:	81400017 	ldw	r5,0(r16)
    6e28:	a009883a 	mov	r4,r20
    6e2c:	980d883a 	mov	r6,r19
    6e30:	00084e80 	call	84e8 <_fputwc_r>
    6e34:	e7000044 	addi	fp,fp,1
    6e38:	14bff81e 	bne	r2,r18,6e1c <__alt_mem_Flash_flash_data+0xf4006e1c>
    6e3c:	9005883a 	mov	r2,r18
    6e40:	a8000215 	stw	zero,8(r21)
    6e44:	a8000115 	stw	zero,4(r21)
    6e48:	dfc00917 	ldw	ra,36(sp)
    6e4c:	df000817 	ldw	fp,32(sp)
    6e50:	ddc00717 	ldw	r23,28(sp)
    6e54:	dd800617 	ldw	r22,24(sp)
    6e58:	dd400517 	ldw	r21,20(sp)
    6e5c:	dd000417 	ldw	r20,16(sp)
    6e60:	dcc00317 	ldw	r19,12(sp)
    6e64:	dc800217 	ldw	r18,8(sp)
    6e68:	dc400117 	ldw	r17,4(sp)
    6e6c:	dc000017 	ldw	r16,0(sp)
    6e70:	dec00a04 	addi	sp,sp,40
    6e74:	f800283a 	ret
    6e78:	a8800217 	ldw	r2,8(r21)
    6e7c:	8c63883a 	add	r17,r17,r17
    6e80:	8c63883a 	add	r17,r17,r17
    6e84:	1445c83a 	sub	r2,r2,r17
    6e88:	a8800215 	stw	r2,8(r21)
    6e8c:	b5800204 	addi	r22,r22,8
    6e90:	bdc00204 	addi	r23,r23,8
    6e94:	103fdb1e 	bne	r2,zero,6e04 <__alt_mem_Flash_flash_data+0xf4006e04>
    6e98:	0005883a 	mov	r2,zero
    6e9c:	003fe806 	br	6e40 <__alt_mem_Flash_flash_data+0xf4006e40>
    6ea0:	00087200 	call	8720 <__sfvwrite_r>
    6ea4:	003fe606 	br	6e40 <__alt_mem_Flash_flash_data+0xf4006e40>

00006ea8 <__sprint_r>:
    6ea8:	30c00217 	ldw	r3,8(r6)
    6eac:	18000126 	beq	r3,zero,6eb4 <__sprint_r+0xc>
    6eb0:	0006dac1 	jmpi	6dac <__sprint_r.part.0>
    6eb4:	30000115 	stw	zero,4(r6)
    6eb8:	0005883a 	mov	r2,zero
    6ebc:	f800283a 	ret

00006ec0 <___vfiprintf_internal_r>:
    6ec0:	deffca04 	addi	sp,sp,-216
    6ec4:	dd803215 	stw	r22,200(sp)
    6ec8:	dd403115 	stw	r21,196(sp)
    6ecc:	dfc03515 	stw	ra,212(sp)
    6ed0:	df003415 	stw	fp,208(sp)
    6ed4:	ddc03315 	stw	r23,204(sp)
    6ed8:	dd003015 	stw	r20,192(sp)
    6edc:	dcc02f15 	stw	r19,188(sp)
    6ee0:	dc802e15 	stw	r18,184(sp)
    6ee4:	dc402d15 	stw	r17,180(sp)
    6ee8:	dc002c15 	stw	r16,176(sp)
    6eec:	d9002015 	stw	r4,128(sp)
    6ef0:	d9c02215 	stw	r7,136(sp)
    6ef4:	282b883a 	mov	r21,r5
    6ef8:	302d883a 	mov	r22,r6
    6efc:	20000226 	beq	r4,zero,6f08 <___vfiprintf_internal_r+0x48>
    6f00:	20800e17 	ldw	r2,56(r4)
    6f04:	1001b126 	beq	r2,zero,75cc <___vfiprintf_internal_r+0x70c>
    6f08:	a880030b 	ldhu	r2,12(r21)
    6f0c:	10c8000c 	andi	r3,r2,8192
    6f10:	1800061e 	bne	r3,zero,6f2c <___vfiprintf_internal_r+0x6c>
    6f14:	a9001917 	ldw	r4,100(r21)
    6f18:	00f7ffc4 	movi	r3,-8193
    6f1c:	10880014 	ori	r2,r2,8192
    6f20:	20c6703a 	and	r3,r4,r3
    6f24:	a880030d 	sth	r2,12(r21)
    6f28:	a8c01915 	stw	r3,100(r21)
    6f2c:	10c0020c 	andi	r3,r2,8
    6f30:	18018926 	beq	r3,zero,7558 <___vfiprintf_internal_r+0x698>
    6f34:	a8c00417 	ldw	r3,16(r21)
    6f38:	18018726 	beq	r3,zero,7558 <___vfiprintf_internal_r+0x698>
    6f3c:	1080068c 	andi	r2,r2,26
    6f40:	00c00284 	movi	r3,10
    6f44:	10c18c26 	beq	r2,r3,7578 <___vfiprintf_internal_r+0x6b8>
    6f48:	d8801a04 	addi	r2,sp,104
    6f4c:	d8c019c4 	addi	r3,sp,103
    6f50:	070000b4 	movhi	fp,2
    6f54:	05c000b4 	movhi	r23,2
    6f58:	10c9c83a 	sub	r4,r2,r3
    6f5c:	e7260204 	addi	fp,fp,-26616
    6f60:	bde5fe04 	addi	r23,r23,-26632
    6f64:	d8801e15 	stw	r2,120(sp)
    6f68:	d8c01f15 	stw	r3,124(sp)
    6f6c:	dec01a15 	stw	sp,104(sp)
    6f70:	d8001c15 	stw	zero,112(sp)
    6f74:	d8001b15 	stw	zero,108(sp)
    6f78:	d8002615 	stw	zero,152(sp)
    6f7c:	d8002315 	stw	zero,140(sp)
    6f80:	d9002715 	stw	r4,156(sp)
    6f84:	d811883a 	mov	r8,sp
    6f88:	dd402115 	stw	r21,132(sp)
    6f8c:	b021883a 	mov	r16,r22
    6f90:	80800007 	ldb	r2,0(r16)
    6f94:	10037226 	beq	r2,zero,7d60 <___vfiprintf_internal_r+0xea0>
    6f98:	01000944 	movi	r4,37
    6f9c:	11037026 	beq	r2,r4,7d60 <___vfiprintf_internal_r+0xea0>
    6fa0:	8005883a 	mov	r2,r16
    6fa4:	00000106 	br	6fac <___vfiprintf_internal_r+0xec>
    6fa8:	19000326 	beq	r3,r4,6fb8 <___vfiprintf_internal_r+0xf8>
    6fac:	10800044 	addi	r2,r2,1
    6fb0:	10c00007 	ldb	r3,0(r2)
    6fb4:	183ffc1e 	bne	r3,zero,6fa8 <__alt_mem_Flash_flash_data+0xf4006fa8>
    6fb8:	1425c83a 	sub	r18,r2,r16
    6fbc:	1023883a 	mov	r17,r2
    6fc0:	90001026 	beq	r18,zero,7004 <___vfiprintf_internal_r+0x144>
    6fc4:	d8c01c17 	ldw	r3,112(sp)
    6fc8:	d8801b17 	ldw	r2,108(sp)
    6fcc:	44000015 	stw	r16,0(r8)
    6fd0:	90c7883a 	add	r3,r18,r3
    6fd4:	10800044 	addi	r2,r2,1
    6fd8:	44800115 	stw	r18,4(r8)
    6fdc:	d8c01c15 	stw	r3,112(sp)
    6fe0:	d8801b15 	stw	r2,108(sp)
    6fe4:	010001c4 	movi	r4,7
    6fe8:	2080750e 	bge	r4,r2,71c0 <___vfiprintf_internal_r+0x300>
    6fec:	18036f1e 	bne	r3,zero,7dac <___vfiprintf_internal_r+0xeec>
    6ff0:	d8802317 	ldw	r2,140(sp)
    6ff4:	d8001b15 	stw	zero,108(sp)
    6ff8:	d811883a 	mov	r8,sp
    6ffc:	1485883a 	add	r2,r2,r18
    7000:	d8802315 	stw	r2,140(sp)
    7004:	88800007 	ldb	r2,0(r17)
    7008:	10041026 	beq	r2,zero,804c <___vfiprintf_internal_r+0x118c>
    700c:	88c00047 	ldb	r3,1(r17)
    7010:	88800044 	addi	r2,r17,1
    7014:	d8001d85 	stb	zero,118(sp)
    7018:	000f883a 	mov	r7,zero
    701c:	027fffc4 	movi	r9,-1
    7020:	0025883a 	mov	r18,zero
    7024:	002b883a 	mov	r21,zero
    7028:	01401604 	movi	r5,88
    702c:	01800244 	movi	r6,9
    7030:	03400a84 	movi	r13,42
    7034:	03001b04 	movi	r12,108
    7038:	14000044 	addi	r16,r2,1
    703c:	18bff804 	addi	r2,r3,-32
    7040:	28825536 	bltu	r5,r2,7998 <___vfiprintf_internal_r+0xad8>
    7044:	100490ba 	slli	r2,r2,2
    7048:	01000034 	movhi	r4,0
    704c:	211c1704 	addi	r4,r4,28764
    7050:	1105883a 	add	r2,r2,r4
    7054:	10800017 	ldw	r2,0(r2)
    7058:	1000683a 	jmp	r2
    705c:	0000775c 	xori	zero,zero,477
    7060:	00007998 	cmpnei	zero,zero,486
    7064:	00007998 	cmpnei	zero,zero,486
    7068:	0000777c 	xorhi	zero,zero,477
    706c:	00007998 	cmpnei	zero,zero,486
    7070:	00007998 	cmpnei	zero,zero,486
    7074:	00007998 	cmpnei	zero,zero,486
    7078:	00007998 	cmpnei	zero,zero,486
    707c:	00007998 	cmpnei	zero,zero,486
    7080:	00007998 	cmpnei	zero,zero,486
    7084:	0000778c 	andi	zero,zero,478
    7088:	000077ac 	andhi	zero,zero,478
    708c:	00007998 	cmpnei	zero,zero,486
    7090:	000075d4 	movui	zero,471
    7094:	000076c0 	call	76c <strcmp+0xa0>
    7098:	00007998 	cmpnei	zero,zero,486
    709c:	00007640 	call	764 <strcmp+0x98>
    70a0:	00007650 	cmplti	zero,zero,473
    70a4:	00007650 	cmplti	zero,zero,473
    70a8:	00007650 	cmplti	zero,zero,473
    70ac:	00007650 	cmplti	zero,zero,473
    70b0:	00007650 	cmplti	zero,zero,473
    70b4:	00007650 	cmplti	zero,zero,473
    70b8:	00007650 	cmplti	zero,zero,473
    70bc:	00007650 	cmplti	zero,zero,473
    70c0:	00007650 	cmplti	zero,zero,473
    70c4:	00007998 	cmpnei	zero,zero,486
    70c8:	00007998 	cmpnei	zero,zero,486
    70cc:	00007998 	cmpnei	zero,zero,486
    70d0:	00007998 	cmpnei	zero,zero,486
    70d4:	00007998 	cmpnei	zero,zero,486
    70d8:	00007998 	cmpnei	zero,zero,486
    70dc:	00007998 	cmpnei	zero,zero,486
    70e0:	00007998 	cmpnei	zero,zero,486
    70e4:	00007998 	cmpnei	zero,zero,486
    70e8:	00007998 	cmpnei	zero,zero,486
    70ec:	0000767c 	xorhi	zero,zero,473
    70f0:	00007998 	cmpnei	zero,zero,486
    70f4:	00007998 	cmpnei	zero,zero,486
    70f8:	00007998 	cmpnei	zero,zero,486
    70fc:	00007998 	cmpnei	zero,zero,486
    7100:	00007998 	cmpnei	zero,zero,486
    7104:	00007998 	cmpnei	zero,zero,486
    7108:	00007998 	cmpnei	zero,zero,486
    710c:	00007998 	cmpnei	zero,zero,486
    7110:	00007998 	cmpnei	zero,zero,486
    7114:	00007998 	cmpnei	zero,zero,486
    7118:	00007208 	cmpgei	zero,zero,456
    711c:	00007998 	cmpnei	zero,zero,486
    7120:	00007998 	cmpnei	zero,zero,486
    7124:	00007998 	cmpnei	zero,zero,486
    7128:	00007998 	cmpnei	zero,zero,486
    712c:	00007998 	cmpnei	zero,zero,486
    7130:	000071d4 	movui	zero,455
    7134:	00007998 	cmpnei	zero,zero,486
    7138:	00007998 	cmpnei	zero,zero,486
    713c:	0000781c 	xori	zero,zero,480
    7140:	00007998 	cmpnei	zero,zero,486
    7144:	00007998 	cmpnei	zero,zero,486
    7148:	00007998 	cmpnei	zero,zero,486
    714c:	00007998 	cmpnei	zero,zero,486
    7150:	00007998 	cmpnei	zero,zero,486
    7154:	00007998 	cmpnei	zero,zero,486
    7158:	00007998 	cmpnei	zero,zero,486
    715c:	00007998 	cmpnei	zero,zero,486
    7160:	00007998 	cmpnei	zero,zero,486
    7164:	00007998 	cmpnei	zero,zero,486
    7168:	000077bc 	xorhi	zero,zero,478
    716c:	000077e8 	cmpgeui	zero,zero,479
    7170:	00007998 	cmpnei	zero,zero,486
    7174:	00007998 	cmpnei	zero,zero,486
    7178:	00007998 	cmpnei	zero,zero,486
    717c:	000078c4 	movi	zero,483
    7180:	000077e8 	cmpgeui	zero,zero,479
    7184:	00007998 	cmpnei	zero,zero,486
    7188:	00007998 	cmpnei	zero,zero,486
    718c:	000078d4 	movui	zero,483
    7190:	00007998 	cmpnei	zero,zero,486
    7194:	00007700 	call	770 <strlen>
    7198:	0000720c 	andi	zero,zero,456
    719c:	000078e8 	cmpgeui	zero,zero,483
    71a0:	00007928 	cmpgeui	zero,zero,484
    71a4:	00007998 	cmpnei	zero,zero,486
    71a8:	00007870 	cmpltui	zero,zero,481
    71ac:	00007998 	cmpnei	zero,zero,486
    71b0:	000071d8 	cmpnei	zero,zero,455
    71b4:	00007998 	cmpnei	zero,zero,486
    71b8:	00007998 	cmpnei	zero,zero,486
    71bc:	00007938 	rdprs	zero,zero,484
    71c0:	42000204 	addi	r8,r8,8
    71c4:	d8802317 	ldw	r2,140(sp)
    71c8:	1485883a 	add	r2,r2,r18
    71cc:	d8802315 	stw	r2,140(sp)
    71d0:	003f8c06 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    71d4:	ad400414 	ori	r21,r21,16
    71d8:	a880080c 	andi	r2,r21,32
    71dc:	1001e61e 	bne	r2,zero,7978 <___vfiprintf_internal_r+0xab8>
    71e0:	a880040c 	andi	r2,r21,16
    71e4:	10034726 	beq	r2,zero,7f04 <___vfiprintf_internal_r+0x1044>
    71e8:	d8802217 	ldw	r2,136(sp)
    71ec:	001b883a 	mov	r13,zero
    71f0:	15800017 	ldw	r22,0(r2)
    71f4:	10800104 	addi	r2,r2,4
    71f8:	d8802215 	stw	r2,136(sp)
    71fc:	b009883a 	mov	r4,r22
    7200:	00800044 	movi	r2,1
    7204:	00000c06 	br	7238 <___vfiprintf_internal_r+0x378>
    7208:	ad400414 	ori	r21,r21,16
    720c:	a880080c 	andi	r2,r21,32
    7210:	1001491e 	bne	r2,zero,7738 <___vfiprintf_internal_r+0x878>
    7214:	a880040c 	andi	r2,r21,16
    7218:	10032d26 	beq	r2,zero,7ed0 <___vfiprintf_internal_r+0x1010>
    721c:	d9002217 	ldw	r4,136(sp)
    7220:	001b883a 	mov	r13,zero
    7224:	0005883a 	mov	r2,zero
    7228:	25800017 	ldw	r22,0(r4)
    722c:	21000104 	addi	r4,r4,4
    7230:	d9002215 	stw	r4,136(sp)
    7234:	b009883a 	mov	r4,r22
    7238:	d8001d85 	stb	zero,118(sp)
    723c:	4827883a 	mov	r19,r9
    7240:	001d883a 	mov	r14,zero
    7244:	48000216 	blt	r9,zero,7250 <___vfiprintf_internal_r+0x390>
    7248:	00ffdfc4 	movi	r3,-129
    724c:	a8ea703a 	and	r21,r21,r3
    7250:	2002071e 	bne	r4,zero,7a70 <___vfiprintf_internal_r+0xbb0>
    7254:	4802ad26 	beq	r9,zero,7d0c <___vfiprintf_internal_r+0xe4c>
    7258:	10803fcc 	andi	r2,r2,255
    725c:	00c00044 	movi	r3,1
    7260:	10c22b26 	beq	r2,r3,7b10 <___vfiprintf_internal_r+0xc50>
    7264:	00c00084 	movi	r3,2
    7268:	dd001a04 	addi	r20,sp,104
    726c:	10c0dd1e 	bne	r2,r3,75e4 <___vfiprintf_internal_r+0x724>
    7270:	d9002617 	ldw	r4,152(sp)
    7274:	b08003cc 	andi	r2,r22,15
    7278:	6806973a 	slli	r3,r13,28
    727c:	2085883a 	add	r2,r4,r2
    7280:	b02cd13a 	srli	r22,r22,4
    7284:	10800003 	ldbu	r2,0(r2)
    7288:	681ad13a 	srli	r13,r13,4
    728c:	a53fffc4 	addi	r20,r20,-1
    7290:	1dacb03a 	or	r22,r3,r22
    7294:	a0800005 	stb	r2,0(r20)
    7298:	b344b03a 	or	r2,r22,r13
    729c:	103ff51e 	bne	r2,zero,7274 <__alt_mem_Flash_flash_data+0xf4007274>
    72a0:	d9001e17 	ldw	r4,120(sp)
    72a4:	2527c83a 	sub	r19,r4,r20
    72a8:	9823883a 	mov	r17,r19
    72ac:	9a40010e 	bge	r19,r9,72b4 <___vfiprintf_internal_r+0x3f4>
    72b0:	4823883a 	mov	r17,r9
    72b4:	73803fcc 	andi	r14,r14,255
    72b8:	7380201c 	xori	r14,r14,128
    72bc:	73bfe004 	addi	r14,r14,-128
    72c0:	70000126 	beq	r14,zero,72c8 <___vfiprintf_internal_r+0x408>
    72c4:	8c400044 	addi	r17,r17,1
    72c8:	ab40008c 	andi	r13,r21,2
    72cc:	68000126 	beq	r13,zero,72d4 <___vfiprintf_internal_r+0x414>
    72d0:	8c400084 	addi	r17,r17,2
    72d4:	ad80210c 	andi	r22,r21,132
    72d8:	b001c51e 	bne	r22,zero,79f0 <___vfiprintf_internal_r+0xb30>
    72dc:	9447c83a 	sub	r3,r18,r17
    72e0:	00c1c30e 	bge	zero,r3,79f0 <___vfiprintf_internal_r+0xb30>
    72e4:	01c00404 	movi	r7,16
    72e8:	d8801c17 	ldw	r2,112(sp)
    72ec:	38c37b0e 	bge	r7,r3,80dc <___vfiprintf_internal_r+0x121c>
    72f0:	010000b4 	movhi	r4,2
    72f4:	21260204 	addi	r4,r4,-26616
    72f8:	dc002915 	stw	r16,164(sp)
    72fc:	d9801b17 	ldw	r6,108(sp)
    7300:	d9002415 	stw	r4,144(sp)
    7304:	03c001c4 	movi	r15,7
    7308:	da402515 	stw	r9,148(sp)
    730c:	db402815 	stw	r13,160(sp)
    7310:	1821883a 	mov	r16,r3
    7314:	00000506 	br	732c <___vfiprintf_internal_r+0x46c>
    7318:	31400084 	addi	r5,r6,2
    731c:	42000204 	addi	r8,r8,8
    7320:	200d883a 	mov	r6,r4
    7324:	843ffc04 	addi	r16,r16,-16
    7328:	3c000d0e 	bge	r7,r16,7360 <___vfiprintf_internal_r+0x4a0>
    732c:	10800404 	addi	r2,r2,16
    7330:	31000044 	addi	r4,r6,1
    7334:	47000015 	stw	fp,0(r8)
    7338:	41c00115 	stw	r7,4(r8)
    733c:	d8801c15 	stw	r2,112(sp)
    7340:	d9001b15 	stw	r4,108(sp)
    7344:	793ff40e 	bge	r15,r4,7318 <__alt_mem_Flash_flash_data+0xf4007318>
    7348:	10019b1e 	bne	r2,zero,79b8 <___vfiprintf_internal_r+0xaf8>
    734c:	843ffc04 	addi	r16,r16,-16
    7350:	000d883a 	mov	r6,zero
    7354:	01400044 	movi	r5,1
    7358:	d811883a 	mov	r8,sp
    735c:	3c3ff316 	blt	r7,r16,732c <__alt_mem_Flash_flash_data+0xf400732c>
    7360:	8007883a 	mov	r3,r16
    7364:	da402517 	ldw	r9,148(sp)
    7368:	db402817 	ldw	r13,160(sp)
    736c:	dc002917 	ldw	r16,164(sp)
    7370:	d9002417 	ldw	r4,144(sp)
    7374:	1885883a 	add	r2,r3,r2
    7378:	40c00115 	stw	r3,4(r8)
    737c:	41000015 	stw	r4,0(r8)
    7380:	d8801c15 	stw	r2,112(sp)
    7384:	d9401b15 	stw	r5,108(sp)
    7388:	00c001c4 	movi	r3,7
    738c:	19426a16 	blt	r3,r5,7d38 <___vfiprintf_internal_r+0xe78>
    7390:	d8c01d87 	ldb	r3,118(sp)
    7394:	42000204 	addi	r8,r8,8
    7398:	29000044 	addi	r4,r5,1
    739c:	1801991e 	bne	r3,zero,7a04 <___vfiprintf_internal_r+0xb44>
    73a0:	68000c26 	beq	r13,zero,73d4 <___vfiprintf_internal_r+0x514>
    73a4:	d8c01d04 	addi	r3,sp,116
    73a8:	10800084 	addi	r2,r2,2
    73ac:	40c00015 	stw	r3,0(r8)
    73b0:	00c00084 	movi	r3,2
    73b4:	40c00115 	stw	r3,4(r8)
    73b8:	d8801c15 	stw	r2,112(sp)
    73bc:	d9001b15 	stw	r4,108(sp)
    73c0:	00c001c4 	movi	r3,7
    73c4:	19024c16 	blt	r3,r4,7cf8 <___vfiprintf_internal_r+0xe38>
    73c8:	200b883a 	mov	r5,r4
    73cc:	42000204 	addi	r8,r8,8
    73d0:	21000044 	addi	r4,r4,1
    73d4:	00c02004 	movi	r3,128
    73d8:	b0c20126 	beq	r22,r3,7be0 <___vfiprintf_internal_r+0xd20>
    73dc:	4cedc83a 	sub	r22,r9,r19
    73e0:	0580230e 	bge	zero,r22,7470 <___vfiprintf_internal_r+0x5b0>
    73e4:	01c00404 	movi	r7,16
    73e8:	3d83140e 	bge	r7,r22,803c <___vfiprintf_internal_r+0x117c>
    73ec:	010000b4 	movhi	r4,2
    73f0:	2125fe04 	addi	r4,r4,-26632
    73f4:	d9002415 	stw	r4,144(sp)
    73f8:	034001c4 	movi	r13,7
    73fc:	00000506 	br	7414 <___vfiprintf_internal_r+0x554>
    7400:	29000084 	addi	r4,r5,2
    7404:	42000204 	addi	r8,r8,8
    7408:	180b883a 	mov	r5,r3
    740c:	b5bffc04 	addi	r22,r22,-16
    7410:	3d800d0e 	bge	r7,r22,7448 <___vfiprintf_internal_r+0x588>
    7414:	10800404 	addi	r2,r2,16
    7418:	28c00044 	addi	r3,r5,1
    741c:	45c00015 	stw	r23,0(r8)
    7420:	41c00115 	stw	r7,4(r8)
    7424:	d8801c15 	stw	r2,112(sp)
    7428:	d8c01b15 	stw	r3,108(sp)
    742c:	68fff40e 	bge	r13,r3,7400 <__alt_mem_Flash_flash_data+0xf4007400>
    7430:	1001811e 	bne	r2,zero,7a38 <___vfiprintf_internal_r+0xb78>
    7434:	b5bffc04 	addi	r22,r22,-16
    7438:	01000044 	movi	r4,1
    743c:	000b883a 	mov	r5,zero
    7440:	d811883a 	mov	r8,sp
    7444:	3dbff316 	blt	r7,r22,7414 <__alt_mem_Flash_flash_data+0xf4007414>
    7448:	d8c02417 	ldw	r3,144(sp)
    744c:	1585883a 	add	r2,r2,r22
    7450:	45800115 	stw	r22,4(r8)
    7454:	40c00015 	stw	r3,0(r8)
    7458:	d8801c15 	stw	r2,112(sp)
    745c:	d9001b15 	stw	r4,108(sp)
    7460:	00c001c4 	movi	r3,7
    7464:	1901d016 	blt	r3,r4,7ba8 <___vfiprintf_internal_r+0xce8>
    7468:	42000204 	addi	r8,r8,8
    746c:	21000044 	addi	r4,r4,1
    7470:	14c5883a 	add	r2,r2,r19
    7474:	45000015 	stw	r20,0(r8)
    7478:	44c00115 	stw	r19,4(r8)
    747c:	d8801c15 	stw	r2,112(sp)
    7480:	d9001b15 	stw	r4,108(sp)
    7484:	00c001c4 	movi	r3,7
    7488:	1901cf0e 	bge	r3,r4,7bc8 <___vfiprintf_internal_r+0xd08>
    748c:	1002361e 	bne	r2,zero,7d68 <___vfiprintf_internal_r+0xea8>
    7490:	d8001b15 	stw	zero,108(sp)
    7494:	aac0010c 	andi	r11,r21,4
    7498:	58002826 	beq	r11,zero,753c <___vfiprintf_internal_r+0x67c>
    749c:	9467c83a 	sub	r19,r18,r17
    74a0:	d811883a 	mov	r8,sp
    74a4:	04c3340e 	bge	zero,r19,8178 <___vfiprintf_internal_r+0x12b8>
    74a8:	01c00404 	movi	r7,16
    74ac:	3cc31b0e 	bge	r7,r19,811c <___vfiprintf_internal_r+0x125c>
    74b0:	00c000b4 	movhi	r3,2
    74b4:	18e60204 	addi	r3,r3,-26616
    74b8:	d9001b17 	ldw	r4,108(sp)
    74bc:	d8c02415 	stw	r3,144(sp)
    74c0:	382b883a 	mov	r21,r7
    74c4:	050001c4 	movi	r20,7
    74c8:	dd802017 	ldw	r22,128(sp)
    74cc:	00000506 	br	74e4 <___vfiprintf_internal_r+0x624>
    74d0:	21400084 	addi	r5,r4,2
    74d4:	42000204 	addi	r8,r8,8
    74d8:	1809883a 	mov	r4,r3
    74dc:	9cfffc04 	addi	r19,r19,-16
    74e0:	acc00d0e 	bge	r21,r19,7518 <___vfiprintf_internal_r+0x658>
    74e4:	10800404 	addi	r2,r2,16
    74e8:	20c00044 	addi	r3,r4,1
    74ec:	47000015 	stw	fp,0(r8)
    74f0:	45400115 	stw	r21,4(r8)
    74f4:	d8801c15 	stw	r2,112(sp)
    74f8:	d8c01b15 	stw	r3,108(sp)
    74fc:	a0fff40e 	bge	r20,r3,74d0 <__alt_mem_Flash_flash_data+0xf40074d0>
    7500:	10019f1e 	bne	r2,zero,7b80 <___vfiprintf_internal_r+0xcc0>
    7504:	9cfffc04 	addi	r19,r19,-16
    7508:	01400044 	movi	r5,1
    750c:	0009883a 	mov	r4,zero
    7510:	d811883a 	mov	r8,sp
    7514:	acfff316 	blt	r21,r19,74e4 <__alt_mem_Flash_flash_data+0xf40074e4>
    7518:	d8c02417 	ldw	r3,144(sp)
    751c:	14c5883a 	add	r2,r2,r19
    7520:	44c00115 	stw	r19,4(r8)
    7524:	40c00015 	stw	r3,0(r8)
    7528:	d8801c15 	stw	r2,112(sp)
    752c:	d9401b15 	stw	r5,108(sp)
    7530:	00c001c4 	movi	r3,7
    7534:	1941810e 	bge	r3,r5,7b3c <___vfiprintf_internal_r+0xc7c>
    7538:	10017a1e 	bne	r2,zero,7b24 <___vfiprintf_internal_r+0xc64>
    753c:	8c82a416 	blt	r17,r18,7fd0 <___vfiprintf_internal_r+0x1110>
    7540:	d9002317 	ldw	r4,140(sp)
    7544:	2449883a 	add	r4,r4,r17
    7548:	d9002315 	stw	r4,140(sp)
    754c:	d8001b15 	stw	zero,108(sp)
    7550:	d811883a 	mov	r8,sp
    7554:	003e8e06 	br	6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    7558:	d9002017 	ldw	r4,128(sp)
    755c:	a80b883a 	mov	r5,r21
    7560:	00028380 	call	2838 <__swsetup_r>
    7564:	10000c1e 	bne	r2,zero,7598 <___vfiprintf_internal_r+0x6d8>
    7568:	a880030b 	ldhu	r2,12(r21)
    756c:	00c00284 	movi	r3,10
    7570:	1080068c 	andi	r2,r2,26
    7574:	10fe741e 	bne	r2,r3,6f48 <__alt_mem_Flash_flash_data+0xf4006f48>
    7578:	a880038f 	ldh	r2,14(r21)
    757c:	103e7216 	blt	r2,zero,6f48 <__alt_mem_Flash_flash_data+0xf4006f48>
    7580:	d9002017 	ldw	r4,128(sp)
    7584:	d9c02217 	ldw	r7,136(sp)
    7588:	a80b883a 	mov	r5,r21
    758c:	b00d883a 	mov	r6,r22
    7590:	00081b40 	call	81b4 <__sbprintf>
    7594:	00000106 	br	759c <___vfiprintf_internal_r+0x6dc>
    7598:	00bfffc4 	movi	r2,-1
    759c:	dfc03517 	ldw	ra,212(sp)
    75a0:	df003417 	ldw	fp,208(sp)
    75a4:	ddc03317 	ldw	r23,204(sp)
    75a8:	dd803217 	ldw	r22,200(sp)
    75ac:	dd403117 	ldw	r21,196(sp)
    75b0:	dd003017 	ldw	r20,192(sp)
    75b4:	dcc02f17 	ldw	r19,188(sp)
    75b8:	dc802e17 	ldw	r18,184(sp)
    75bc:	dc402d17 	ldw	r17,180(sp)
    75c0:	dc002c17 	ldw	r16,176(sp)
    75c4:	dec03604 	addi	sp,sp,216
    75c8:	f800283a 	ret
    75cc:	00048980 	call	4898 <__sinit>
    75d0:	003e4d06 	br	6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    75d4:	8005883a 	mov	r2,r16
    75d8:	ad400114 	ori	r21,r21,4
    75dc:	80c00007 	ldb	r3,0(r16)
    75e0:	003e9506 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    75e4:	b006d0fa 	srli	r3,r22,3
    75e8:	6808977a 	slli	r4,r13,29
    75ec:	681ad0fa 	srli	r13,r13,3
    75f0:	b58001cc 	andi	r22,r22,7
    75f4:	b0800c04 	addi	r2,r22,48
    75f8:	a53fffc4 	addi	r20,r20,-1
    75fc:	20ecb03a 	or	r22,r4,r3
    7600:	a0800005 	stb	r2,0(r20)
    7604:	b346b03a 	or	r3,r22,r13
    7608:	183ff61e 	bne	r3,zero,75e4 <__alt_mem_Flash_flash_data+0xf40075e4>
    760c:	a8c0004c 	andi	r3,r21,1
    7610:	a009883a 	mov	r4,r20
    7614:	18013b26 	beq	r3,zero,7b04 <___vfiprintf_internal_r+0xc44>
    7618:	10803fcc 	andi	r2,r2,255
    761c:	1080201c 	xori	r2,r2,128
    7620:	10bfe004 	addi	r2,r2,-128
    7624:	00c00c04 	movi	r3,48
    7628:	10ff1d26 	beq	r2,r3,72a0 <__alt_mem_Flash_flash_data+0xf40072a0>
    762c:	d8801e17 	ldw	r2,120(sp)
    7630:	a53fffc4 	addi	r20,r20,-1
    7634:	20ffffc5 	stb	r3,-1(r4)
    7638:	1527c83a 	sub	r19,r2,r20
    763c:	003f1a06 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7640:	ad402014 	ori	r21,r21,128
    7644:	8005883a 	mov	r2,r16
    7648:	80c00007 	ldb	r3,0(r16)
    764c:	003e7a06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    7650:	8005883a 	mov	r2,r16
    7654:	0025883a 	mov	r18,zero
    7658:	193ff404 	addi	r4,r3,-48
    765c:	10c00007 	ldb	r3,0(r2)
    7660:	948002a4 	muli	r18,r18,10
    7664:	84000044 	addi	r16,r16,1
    7668:	8005883a 	mov	r2,r16
    766c:	9125883a 	add	r18,r18,r4
    7670:	193ff404 	addi	r4,r3,-48
    7674:	313ff92e 	bgeu	r6,r4,765c <__alt_mem_Flash_flash_data+0xf400765c>
    7678:	003e7006 	br	703c <__alt_mem_Flash_flash_data+0xf400703c>
    767c:	ad400414 	ori	r21,r21,16
    7680:	d9c01d85 	stb	r7,118(sp)
    7684:	a880080c 	andi	r2,r21,32
    7688:	d8c02217 	ldw	r3,136(sp)
    768c:	10005a26 	beq	r2,zero,77f8 <___vfiprintf_internal_r+0x938>
    7690:	d9002217 	ldw	r4,136(sp)
    7694:	18800117 	ldw	r2,4(r3)
    7698:	1d800017 	ldw	r22,0(r3)
    769c:	21000204 	addi	r4,r4,8
    76a0:	d9002215 	stw	r4,136(sp)
    76a4:	101b883a 	mov	r13,r2
    76a8:	1001f416 	blt	r2,zero,7e7c <___vfiprintf_internal_r+0xfbc>
    76ac:	db801d83 	ldbu	r14,118(sp)
    76b0:	4827883a 	mov	r19,r9
    76b4:	00800044 	movi	r2,1
    76b8:	b348b03a 	or	r4,r22,r13
    76bc:	003ee106 	br	7244 <__alt_mem_Flash_flash_data+0xf4007244>
    76c0:	80c00007 	ldb	r3,0(r16)
    76c4:	80800044 	addi	r2,r16,1
    76c8:	1b42a326 	beq	r3,r13,8158 <___vfiprintf_internal_r+0x1298>
    76cc:	193ff404 	addi	r4,r3,-48
    76d0:	1021883a 	mov	r16,r2
    76d4:	0013883a 	mov	r9,zero
    76d8:	313e5836 	bltu	r6,r4,703c <__alt_mem_Flash_flash_data+0xf400703c>
    76dc:	80c00007 	ldb	r3,0(r16)
    76e0:	4a4002a4 	muli	r9,r9,10
    76e4:	84000044 	addi	r16,r16,1
    76e8:	2253883a 	add	r9,r4,r9
    76ec:	193ff404 	addi	r4,r3,-48
    76f0:	313ffa2e 	bgeu	r6,r4,76dc <__alt_mem_Flash_flash_data+0xf40076dc>
    76f4:	483e510e 	bge	r9,zero,703c <__alt_mem_Flash_flash_data+0xf400703c>
    76f8:	027fffc4 	movi	r9,-1
    76fc:	003e4f06 	br	703c <__alt_mem_Flash_flash_data+0xf400703c>
    7700:	d9c01d85 	stb	r7,118(sp)
    7704:	a880080c 	andi	r2,r21,32
    7708:	10020826 	beq	r2,zero,7f2c <___vfiprintf_internal_r+0x106c>
    770c:	d8c02217 	ldw	r3,136(sp)
    7710:	d9002317 	ldw	r4,140(sp)
    7714:	18800017 	ldw	r2,0(r3)
    7718:	2007d7fa 	srai	r3,r4,31
    771c:	d9002217 	ldw	r4,136(sp)
    7720:	10c00115 	stw	r3,4(r2)
    7724:	21000104 	addi	r4,r4,4
    7728:	d9002215 	stw	r4,136(sp)
    772c:	d9002317 	ldw	r4,140(sp)
    7730:	11000015 	stw	r4,0(r2)
    7734:	003e1606 	br	6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    7738:	d8802217 	ldw	r2,136(sp)
    773c:	d8c02217 	ldw	r3,136(sp)
    7740:	15800017 	ldw	r22,0(r2)
    7744:	13400117 	ldw	r13,4(r2)
    7748:	18c00204 	addi	r3,r3,8
    774c:	0005883a 	mov	r2,zero
    7750:	d8c02215 	stw	r3,136(sp)
    7754:	b348b03a 	or	r4,r22,r13
    7758:	003eb706 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    775c:	38803fcc 	andi	r2,r7,255
    7760:	1080201c 	xori	r2,r2,128
    7764:	10bfe004 	addi	r2,r2,-128
    7768:	1001e31e 	bne	r2,zero,7ef8 <___vfiprintf_internal_r+0x1038>
    776c:	8005883a 	mov	r2,r16
    7770:	01c00804 	movi	r7,32
    7774:	80c00007 	ldb	r3,0(r16)
    7778:	003e2f06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    777c:	ad400054 	ori	r21,r21,1
    7780:	8005883a 	mov	r2,r16
    7784:	80c00007 	ldb	r3,0(r16)
    7788:	003e2b06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    778c:	d8c02217 	ldw	r3,136(sp)
    7790:	1c800017 	ldw	r18,0(r3)
    7794:	18c00104 	addi	r3,r3,4
    7798:	90023816 	blt	r18,zero,807c <___vfiprintf_internal_r+0x11bc>
    779c:	d8c02215 	stw	r3,136(sp)
    77a0:	8005883a 	mov	r2,r16
    77a4:	80c00007 	ldb	r3,0(r16)
    77a8:	003e2306 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    77ac:	8005883a 	mov	r2,r16
    77b0:	01c00ac4 	movi	r7,43
    77b4:	80c00007 	ldb	r3,0(r16)
    77b8:	003e1f06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    77bc:	d8c02217 	ldw	r3,136(sp)
    77c0:	04400044 	movi	r17,1
    77c4:	d8001d85 	stb	zero,118(sp)
    77c8:	18800017 	ldw	r2,0(r3)
    77cc:	18c00104 	addi	r3,r3,4
    77d0:	d8c02215 	stw	r3,136(sp)
    77d4:	d8801005 	stb	r2,64(sp)
    77d8:	8827883a 	mov	r19,r17
    77dc:	dd001004 	addi	r20,sp,64
    77e0:	0013883a 	mov	r9,zero
    77e4:	003eb806 	br	72c8 <__alt_mem_Flash_flash_data+0xf40072c8>
    77e8:	d9c01d85 	stb	r7,118(sp)
    77ec:	a880080c 	andi	r2,r21,32
    77f0:	d8c02217 	ldw	r3,136(sp)
    77f4:	103fa61e 	bne	r2,zero,7690 <__alt_mem_Flash_flash_data+0xf4007690>
    77f8:	a880040c 	andi	r2,r21,16
    77fc:	1001dd26 	beq	r2,zero,7f74 <___vfiprintf_internal_r+0x10b4>
    7800:	1d800017 	ldw	r22,0(r3)
    7804:	d8802217 	ldw	r2,136(sp)
    7808:	b01bd7fa 	srai	r13,r22,31
    780c:	10800104 	addi	r2,r2,4
    7810:	d8802215 	stw	r2,136(sp)
    7814:	6805883a 	mov	r2,r13
    7818:	003fa306 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    781c:	008000b4 	movhi	r2,2
    7820:	10a59804 	addi	r2,r2,-27040
    7824:	d8802615 	stw	r2,152(sp)
    7828:	d9c01d85 	stb	r7,118(sp)
    782c:	a880080c 	andi	r2,r21,32
    7830:	10004726 	beq	r2,zero,7950 <___vfiprintf_internal_r+0xa90>
    7834:	d9002217 	ldw	r4,136(sp)
    7838:	25800017 	ldw	r22,0(r4)
    783c:	23400117 	ldw	r13,4(r4)
    7840:	21000204 	addi	r4,r4,8
    7844:	d9002215 	stw	r4,136(sp)
    7848:	a880004c 	andi	r2,r21,1
    784c:	10014e26 	beq	r2,zero,7d88 <___vfiprintf_internal_r+0xec8>
    7850:	b348b03a 	or	r4,r22,r13
    7854:	20019c26 	beq	r4,zero,7ec8 <___vfiprintf_internal_r+0x1008>
    7858:	00800c04 	movi	r2,48
    785c:	d8801d05 	stb	r2,116(sp)
    7860:	d8c01d45 	stb	r3,117(sp)
    7864:	ad400094 	ori	r21,r21,2
    7868:	00800084 	movi	r2,2
    786c:	003e7206 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7870:	d8c02217 	ldw	r3,136(sp)
    7874:	d8001d85 	stb	zero,118(sp)
    7878:	1d000017 	ldw	r20,0(r3)
    787c:	1d800104 	addi	r22,r3,4
    7880:	a0021c26 	beq	r20,zero,80f4 <___vfiprintf_internal_r+0x1234>
    7884:	a009883a 	mov	r4,r20
    7888:	48020016 	blt	r9,zero,808c <___vfiprintf_internal_r+0x11cc>
    788c:	480d883a 	mov	r6,r9
    7890:	000b883a 	mov	r5,zero
    7894:	da002a15 	stw	r8,168(sp)
    7898:	da402b15 	stw	r9,172(sp)
    789c:	00058c40 	call	58c4 <memchr>
    78a0:	da002a17 	ldw	r8,168(sp)
    78a4:	da402b17 	ldw	r9,172(sp)
    78a8:	10022226 	beq	r2,zero,8134 <___vfiprintf_internal_r+0x1274>
    78ac:	1527c83a 	sub	r19,r2,r20
    78b0:	4cc1c916 	blt	r9,r19,7fd8 <___vfiprintf_internal_r+0x1118>
    78b4:	db801d83 	ldbu	r14,118(sp)
    78b8:	dd802215 	stw	r22,136(sp)
    78bc:	0013883a 	mov	r9,zero
    78c0:	003e7906 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    78c4:	ad401014 	ori	r21,r21,64
    78c8:	8005883a 	mov	r2,r16
    78cc:	80c00007 	ldb	r3,0(r16)
    78d0:	003dd906 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    78d4:	80c00007 	ldb	r3,0(r16)
    78d8:	8005883a 	mov	r2,r16
    78dc:	1b01e326 	beq	r3,r12,806c <___vfiprintf_internal_r+0x11ac>
    78e0:	ad400414 	ori	r21,r21,16
    78e4:	003dd406 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    78e8:	d9002217 	ldw	r4,136(sp)
    78ec:	00800c04 	movi	r2,48
    78f0:	d8801d05 	stb	r2,116(sp)
    78f4:	25800017 	ldw	r22,0(r4)
    78f8:	00801e04 	movi	r2,120
    78fc:	d8801d45 	stb	r2,117(sp)
    7900:	008000b4 	movhi	r2,2
    7904:	21000104 	addi	r4,r4,4
    7908:	10a59d04 	addi	r2,r2,-27020
    790c:	d9002215 	stw	r4,136(sp)
    7910:	d8802615 	stw	r2,152(sp)
    7914:	001b883a 	mov	r13,zero
    7918:	ad400094 	ori	r21,r21,2
    791c:	00800084 	movi	r2,2
    7920:	b009883a 	mov	r4,r22
    7924:	003e4406 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7928:	ad400814 	ori	r21,r21,32
    792c:	8005883a 	mov	r2,r16
    7930:	80c00007 	ldb	r3,0(r16)
    7934:	003dc006 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    7938:	008000b4 	movhi	r2,2
    793c:	10a59d04 	addi	r2,r2,-27020
    7940:	d8802615 	stw	r2,152(sp)
    7944:	d9c01d85 	stb	r7,118(sp)
    7948:	a880080c 	andi	r2,r21,32
    794c:	103fb91e 	bne	r2,zero,7834 <__alt_mem_Flash_flash_data+0xf4007834>
    7950:	a880040c 	andi	r2,r21,16
    7954:	10010f1e 	bne	r2,zero,7d94 <___vfiprintf_internal_r+0xed4>
    7958:	a880100c 	andi	r2,r21,64
    795c:	10010d26 	beq	r2,zero,7d94 <___vfiprintf_internal_r+0xed4>
    7960:	d9002217 	ldw	r4,136(sp)
    7964:	001b883a 	mov	r13,zero
    7968:	2580000b 	ldhu	r22,0(r4)
    796c:	21000104 	addi	r4,r4,4
    7970:	d9002215 	stw	r4,136(sp)
    7974:	003fb406 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7978:	d9002217 	ldw	r4,136(sp)
    797c:	00800044 	movi	r2,1
    7980:	25800017 	ldw	r22,0(r4)
    7984:	23400117 	ldw	r13,4(r4)
    7988:	21000204 	addi	r4,r4,8
    798c:	d9002215 	stw	r4,136(sp)
    7990:	b348b03a 	or	r4,r22,r13
    7994:	003e2806 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7998:	d9c01d85 	stb	r7,118(sp)
    799c:	1801ab26 	beq	r3,zero,804c <___vfiprintf_internal_r+0x118c>
    79a0:	04400044 	movi	r17,1
    79a4:	d8c01005 	stb	r3,64(sp)
    79a8:	d8001d85 	stb	zero,118(sp)
    79ac:	8827883a 	mov	r19,r17
    79b0:	dd001004 	addi	r20,sp,64
    79b4:	003f8a06 	br	77e0 <__alt_mem_Flash_flash_data+0xf40077e0>
    79b8:	d9002017 	ldw	r4,128(sp)
    79bc:	d9402117 	ldw	r5,132(sp)
    79c0:	d9801a04 	addi	r6,sp,104
    79c4:	d9c02b15 	stw	r7,172(sp)
    79c8:	dbc02a15 	stw	r15,168(sp)
    79cc:	0006dac0 	call	6dac <__sprint_r.part.0>
    79d0:	d9c02b17 	ldw	r7,172(sp)
    79d4:	dbc02a17 	ldw	r15,168(sp)
    79d8:	1000631e 	bne	r2,zero,7b68 <___vfiprintf_internal_r+0xca8>
    79dc:	d9801b17 	ldw	r6,108(sp)
    79e0:	d8801c17 	ldw	r2,112(sp)
    79e4:	d811883a 	mov	r8,sp
    79e8:	31400044 	addi	r5,r6,1
    79ec:	003e4d06 	br	7324 <__alt_mem_Flash_flash_data+0xf4007324>
    79f0:	d9401b17 	ldw	r5,108(sp)
    79f4:	d8801c17 	ldw	r2,112(sp)
    79f8:	29000044 	addi	r4,r5,1
    79fc:	d8c01d87 	ldb	r3,118(sp)
    7a00:	183e6726 	beq	r3,zero,73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    7a04:	00c00044 	movi	r3,1
    7a08:	d9401d84 	addi	r5,sp,118
    7a0c:	10c5883a 	add	r2,r2,r3
    7a10:	41400015 	stw	r5,0(r8)
    7a14:	40c00115 	stw	r3,4(r8)
    7a18:	d8801c15 	stw	r2,112(sp)
    7a1c:	d9001b15 	stw	r4,108(sp)
    7a20:	014001c4 	movi	r5,7
    7a24:	2900ab16 	blt	r5,r4,7cd4 <___vfiprintf_internal_r+0xe14>
    7a28:	200b883a 	mov	r5,r4
    7a2c:	42000204 	addi	r8,r8,8
    7a30:	21000044 	addi	r4,r4,1
    7a34:	003e5a06 	br	73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    7a38:	d9002017 	ldw	r4,128(sp)
    7a3c:	d9402117 	ldw	r5,132(sp)
    7a40:	d9801a04 	addi	r6,sp,104
    7a44:	d9c02b15 	stw	r7,172(sp)
    7a48:	db402a15 	stw	r13,168(sp)
    7a4c:	0006dac0 	call	6dac <__sprint_r.part.0>
    7a50:	d9c02b17 	ldw	r7,172(sp)
    7a54:	db402a17 	ldw	r13,168(sp)
    7a58:	1000431e 	bne	r2,zero,7b68 <___vfiprintf_internal_r+0xca8>
    7a5c:	d9401b17 	ldw	r5,108(sp)
    7a60:	d8801c17 	ldw	r2,112(sp)
    7a64:	d811883a 	mov	r8,sp
    7a68:	29000044 	addi	r4,r5,1
    7a6c:	003e6706 	br	740c <__alt_mem_Flash_flash_data+0xf400740c>
    7a70:	10803fcc 	andi	r2,r2,255
    7a74:	00c00044 	movi	r3,1
    7a78:	10fdfa1e 	bne	r2,r3,7264 <__alt_mem_Flash_flash_data+0xf4007264>
    7a7c:	6800021e 	bne	r13,zero,7a88 <___vfiprintf_internal_r+0xbc8>
    7a80:	00800244 	movi	r2,9
    7a84:	1580222e 	bgeu	r2,r22,7b10 <___vfiprintf_internal_r+0xc50>
    7a88:	dc802415 	stw	r18,144(sp)
    7a8c:	dc002515 	stw	r16,148(sp)
    7a90:	dc401a04 	addi	r17,sp,104
    7a94:	b021883a 	mov	r16,r22
    7a98:	4827883a 	mov	r19,r9
    7a9c:	4029883a 	mov	r20,r8
    7aa0:	702d883a 	mov	r22,r14
    7aa4:	6825883a 	mov	r18,r13
    7aa8:	8009883a 	mov	r4,r16
    7aac:	900b883a 	mov	r5,r18
    7ab0:	01800284 	movi	r6,10
    7ab4:	000f883a 	mov	r7,zero
    7ab8:	0009cac0 	call	9cac <__umoddi3>
    7abc:	10800c04 	addi	r2,r2,48
    7ac0:	8c7fffc4 	addi	r17,r17,-1
    7ac4:	8009883a 	mov	r4,r16
    7ac8:	900b883a 	mov	r5,r18
    7acc:	01800284 	movi	r6,10
    7ad0:	000f883a 	mov	r7,zero
    7ad4:	88800005 	stb	r2,0(r17)
    7ad8:	00096ec0 	call	96ec <__udivdi3>
    7adc:	1021883a 	mov	r16,r2
    7ae0:	10c4b03a 	or	r2,r2,r3
    7ae4:	1825883a 	mov	r18,r3
    7ae8:	103fef1e 	bne	r2,zero,7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7aec:	dc802417 	ldw	r18,144(sp)
    7af0:	dc002517 	ldw	r16,148(sp)
    7af4:	a011883a 	mov	r8,r20
    7af8:	9813883a 	mov	r9,r19
    7afc:	b01d883a 	mov	r14,r22
    7b00:	8829883a 	mov	r20,r17
    7b04:	d8c01e17 	ldw	r3,120(sp)
    7b08:	1d27c83a 	sub	r19,r3,r20
    7b0c:	003de606 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7b10:	b5800c04 	addi	r22,r22,48
    7b14:	dd8019c5 	stb	r22,103(sp)
    7b18:	dcc02717 	ldw	r19,156(sp)
    7b1c:	dd0019c4 	addi	r20,sp,103
    7b20:	003de106 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7b24:	d9002017 	ldw	r4,128(sp)
    7b28:	d9402117 	ldw	r5,132(sp)
    7b2c:	d9801a04 	addi	r6,sp,104
    7b30:	0006dac0 	call	6dac <__sprint_r.part.0>
    7b34:	10000c1e 	bne	r2,zero,7b68 <___vfiprintf_internal_r+0xca8>
    7b38:	d8801c17 	ldw	r2,112(sp)
    7b3c:	8c80010e 	bge	r17,r18,7b44 <___vfiprintf_internal_r+0xc84>
    7b40:	9023883a 	mov	r17,r18
    7b44:	d8c02317 	ldw	r3,140(sp)
    7b48:	1c47883a 	add	r3,r3,r17
    7b4c:	d8c02315 	stw	r3,140(sp)
    7b50:	103e7e26 	beq	r2,zero,754c <__alt_mem_Flash_flash_data+0xf400754c>
    7b54:	d9002017 	ldw	r4,128(sp)
    7b58:	d9402117 	ldw	r5,132(sp)
    7b5c:	d9801a04 	addi	r6,sp,104
    7b60:	0006dac0 	call	6dac <__sprint_r.part.0>
    7b64:	103e7926 	beq	r2,zero,754c <__alt_mem_Flash_flash_data+0xf400754c>
    7b68:	dd402117 	ldw	r21,132(sp)
    7b6c:	a880030b 	ldhu	r2,12(r21)
    7b70:	1080100c 	andi	r2,r2,64
    7b74:	103e881e 	bne	r2,zero,7598 <__alt_mem_Flash_flash_data+0xf4007598>
    7b78:	d8802317 	ldw	r2,140(sp)
    7b7c:	003e8706 	br	759c <__alt_mem_Flash_flash_data+0xf400759c>
    7b80:	d9402117 	ldw	r5,132(sp)
    7b84:	b009883a 	mov	r4,r22
    7b88:	d9801a04 	addi	r6,sp,104
    7b8c:	0006dac0 	call	6dac <__sprint_r.part.0>
    7b90:	103ff51e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7b94:	d9001b17 	ldw	r4,108(sp)
    7b98:	d8801c17 	ldw	r2,112(sp)
    7b9c:	d811883a 	mov	r8,sp
    7ba0:	21400044 	addi	r5,r4,1
    7ba4:	003e4d06 	br	74dc <__alt_mem_Flash_flash_data+0xf40074dc>
    7ba8:	1000aa1e 	bne	r2,zero,7e54 <___vfiprintf_internal_r+0xf94>
    7bac:	00c00044 	movi	r3,1
    7bb0:	9805883a 	mov	r2,r19
    7bb4:	dd000015 	stw	r20,0(sp)
    7bb8:	dcc00115 	stw	r19,4(sp)
    7bbc:	dcc01c15 	stw	r19,112(sp)
    7bc0:	d8c01b15 	stw	r3,108(sp)
    7bc4:	d811883a 	mov	r8,sp
    7bc8:	42000204 	addi	r8,r8,8
    7bcc:	aac0010c 	andi	r11,r21,4
    7bd0:	583fda26 	beq	r11,zero,7b3c <__alt_mem_Flash_flash_data+0xf4007b3c>
    7bd4:	9467c83a 	sub	r19,r18,r17
    7bd8:	04fe3316 	blt	zero,r19,74a8 <__alt_mem_Flash_flash_data+0xf40074a8>
    7bdc:	003fd706 	br	7b3c <__alt_mem_Flash_flash_data+0xf4007b3c>
    7be0:	946dc83a 	sub	r22,r18,r17
    7be4:	05bdfd0e 	bge	zero,r22,73dc <__alt_mem_Flash_flash_data+0xf40073dc>
    7be8:	00c000b4 	movhi	r3,2
    7bec:	18e5fe04 	addi	r3,r3,-26632
    7bf0:	01c00404 	movi	r7,16
    7bf4:	d8c02415 	stw	r3,144(sp)
    7bf8:	3d81530e 	bge	r7,r22,8148 <___vfiprintf_internal_r+0x1288>
    7bfc:	8007883a 	mov	r3,r16
    7c00:	034001c4 	movi	r13,7
    7c04:	b021883a 	mov	r16,r22
    7c08:	da402515 	stw	r9,148(sp)
    7c0c:	182d883a 	mov	r22,r3
    7c10:	00000506 	br	7c28 <___vfiprintf_internal_r+0xd68>
    7c14:	29800084 	addi	r6,r5,2
    7c18:	42000204 	addi	r8,r8,8
    7c1c:	180b883a 	mov	r5,r3
    7c20:	843ffc04 	addi	r16,r16,-16
    7c24:	3c000d0e 	bge	r7,r16,7c5c <___vfiprintf_internal_r+0xd9c>
    7c28:	10800404 	addi	r2,r2,16
    7c2c:	28c00044 	addi	r3,r5,1
    7c30:	45c00015 	stw	r23,0(r8)
    7c34:	41c00115 	stw	r7,4(r8)
    7c38:	d8801c15 	stw	r2,112(sp)
    7c3c:	d8c01b15 	stw	r3,108(sp)
    7c40:	68fff40e 	bge	r13,r3,7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    7c44:	1000151e 	bne	r2,zero,7c9c <___vfiprintf_internal_r+0xddc>
    7c48:	843ffc04 	addi	r16,r16,-16
    7c4c:	01800044 	movi	r6,1
    7c50:	000b883a 	mov	r5,zero
    7c54:	d811883a 	mov	r8,sp
    7c58:	3c3ff316 	blt	r7,r16,7c28 <__alt_mem_Flash_flash_data+0xf4007c28>
    7c5c:	da402517 	ldw	r9,148(sp)
    7c60:	b007883a 	mov	r3,r22
    7c64:	802d883a 	mov	r22,r16
    7c68:	1821883a 	mov	r16,r3
    7c6c:	d8c02417 	ldw	r3,144(sp)
    7c70:	1585883a 	add	r2,r2,r22
    7c74:	45800115 	stw	r22,4(r8)
    7c78:	40c00015 	stw	r3,0(r8)
    7c7c:	d8801c15 	stw	r2,112(sp)
    7c80:	d9801b15 	stw	r6,108(sp)
    7c84:	00c001c4 	movi	r3,7
    7c88:	19806d16 	blt	r3,r6,7e40 <___vfiprintf_internal_r+0xf80>
    7c8c:	42000204 	addi	r8,r8,8
    7c90:	31000044 	addi	r4,r6,1
    7c94:	300b883a 	mov	r5,r6
    7c98:	003dd006 	br	73dc <__alt_mem_Flash_flash_data+0xf40073dc>
    7c9c:	d9002017 	ldw	r4,128(sp)
    7ca0:	d9402117 	ldw	r5,132(sp)
    7ca4:	d9801a04 	addi	r6,sp,104
    7ca8:	d9c02b15 	stw	r7,172(sp)
    7cac:	db402a15 	stw	r13,168(sp)
    7cb0:	0006dac0 	call	6dac <__sprint_r.part.0>
    7cb4:	d9c02b17 	ldw	r7,172(sp)
    7cb8:	db402a17 	ldw	r13,168(sp)
    7cbc:	103faa1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7cc0:	d9401b17 	ldw	r5,108(sp)
    7cc4:	d8801c17 	ldw	r2,112(sp)
    7cc8:	d811883a 	mov	r8,sp
    7ccc:	29800044 	addi	r6,r5,1
    7cd0:	003fd306 	br	7c20 <__alt_mem_Flash_flash_data+0xf4007c20>
    7cd4:	1000401e 	bne	r2,zero,7dd8 <___vfiprintf_internal_r+0xf18>
    7cd8:	68003b26 	beq	r13,zero,7dc8 <___vfiprintf_internal_r+0xf08>
    7cdc:	d9001d04 	addi	r4,sp,116
    7ce0:	00800084 	movi	r2,2
    7ce4:	d9000015 	stw	r4,0(sp)
    7ce8:	d8800115 	stw	r2,4(sp)
    7cec:	1809883a 	mov	r4,r3
    7cf0:	d811883a 	mov	r8,sp
    7cf4:	003db406 	br	73c8 <__alt_mem_Flash_flash_data+0xf40073c8>
    7cf8:	1000451e 	bne	r2,zero,7e10 <___vfiprintf_internal_r+0xf50>
    7cfc:	01000044 	movi	r4,1
    7d00:	000b883a 	mov	r5,zero
    7d04:	d811883a 	mov	r8,sp
    7d08:	003db206 	br	73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    7d0c:	10803fcc 	andi	r2,r2,255
    7d10:	1000071e 	bne	r2,zero,7d30 <___vfiprintf_internal_r+0xe70>
    7d14:	a880004c 	andi	r2,r21,1
    7d18:	10000526 	beq	r2,zero,7d30 <___vfiprintf_internal_r+0xe70>
    7d1c:	00800c04 	movi	r2,48
    7d20:	d88019c5 	stb	r2,103(sp)
    7d24:	dcc02717 	ldw	r19,156(sp)
    7d28:	dd0019c4 	addi	r20,sp,103
    7d2c:	003d5e06 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7d30:	dd001a04 	addi	r20,sp,104
    7d34:	003d5c06 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7d38:	1000971e 	bne	r2,zero,7f98 <___vfiprintf_internal_r+0x10d8>
    7d3c:	d8c01d87 	ldb	r3,118(sp)
    7d40:	18005826 	beq	r3,zero,7ea4 <___vfiprintf_internal_r+0xfe4>
    7d44:	00800044 	movi	r2,1
    7d48:	d8c01d84 	addi	r3,sp,118
    7d4c:	1009883a 	mov	r4,r2
    7d50:	d8c00015 	stw	r3,0(sp)
    7d54:	d8800115 	stw	r2,4(sp)
    7d58:	d811883a 	mov	r8,sp
    7d5c:	003f3206 	br	7a28 <__alt_mem_Flash_flash_data+0xf4007a28>
    7d60:	8023883a 	mov	r17,r16
    7d64:	003ca706 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    7d68:	d9002017 	ldw	r4,128(sp)
    7d6c:	d9402117 	ldw	r5,132(sp)
    7d70:	d9801a04 	addi	r6,sp,104
    7d74:	0006dac0 	call	6dac <__sprint_r.part.0>
    7d78:	103f7b1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7d7c:	d8801c17 	ldw	r2,112(sp)
    7d80:	d811883a 	mov	r8,sp
    7d84:	003f9106 	br	7bcc <__alt_mem_Flash_flash_data+0xf4007bcc>
    7d88:	00800084 	movi	r2,2
    7d8c:	b348b03a 	or	r4,r22,r13
    7d90:	003d2906 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7d94:	d8802217 	ldw	r2,136(sp)
    7d98:	001b883a 	mov	r13,zero
    7d9c:	15800017 	ldw	r22,0(r2)
    7da0:	10800104 	addi	r2,r2,4
    7da4:	d8802215 	stw	r2,136(sp)
    7da8:	003ea706 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7dac:	d9002017 	ldw	r4,128(sp)
    7db0:	d9402117 	ldw	r5,132(sp)
    7db4:	d9801a04 	addi	r6,sp,104
    7db8:	0006dac0 	call	6dac <__sprint_r.part.0>
    7dbc:	103f6a1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7dc0:	d811883a 	mov	r8,sp
    7dc4:	003cff06 	br	71c4 <__alt_mem_Flash_flash_data+0xf40071c4>
    7dc8:	000b883a 	mov	r5,zero
    7dcc:	1809883a 	mov	r4,r3
    7dd0:	d811883a 	mov	r8,sp
    7dd4:	003d7f06 	br	73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    7dd8:	d9002017 	ldw	r4,128(sp)
    7ddc:	d9402117 	ldw	r5,132(sp)
    7de0:	d9801a04 	addi	r6,sp,104
    7de4:	da402b15 	stw	r9,172(sp)
    7de8:	db402a15 	stw	r13,168(sp)
    7dec:	0006dac0 	call	6dac <__sprint_r.part.0>
    7df0:	da402b17 	ldw	r9,172(sp)
    7df4:	db402a17 	ldw	r13,168(sp)
    7df8:	103f5b1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7dfc:	d9401b17 	ldw	r5,108(sp)
    7e00:	d8801c17 	ldw	r2,112(sp)
    7e04:	d811883a 	mov	r8,sp
    7e08:	29000044 	addi	r4,r5,1
    7e0c:	003d6406 	br	73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    7e10:	d9002017 	ldw	r4,128(sp)
    7e14:	d9402117 	ldw	r5,132(sp)
    7e18:	d9801a04 	addi	r6,sp,104
    7e1c:	da402b15 	stw	r9,172(sp)
    7e20:	0006dac0 	call	6dac <__sprint_r.part.0>
    7e24:	da402b17 	ldw	r9,172(sp)
    7e28:	103f4f1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7e2c:	d9401b17 	ldw	r5,108(sp)
    7e30:	d8801c17 	ldw	r2,112(sp)
    7e34:	d811883a 	mov	r8,sp
    7e38:	29000044 	addi	r4,r5,1
    7e3c:	003d6506 	br	73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    7e40:	10009a1e 	bne	r2,zero,80ac <___vfiprintf_internal_r+0x11ec>
    7e44:	01000044 	movi	r4,1
    7e48:	000b883a 	mov	r5,zero
    7e4c:	d811883a 	mov	r8,sp
    7e50:	003d6206 	br	73dc <__alt_mem_Flash_flash_data+0xf40073dc>
    7e54:	d9002017 	ldw	r4,128(sp)
    7e58:	d9402117 	ldw	r5,132(sp)
    7e5c:	d9801a04 	addi	r6,sp,104
    7e60:	0006dac0 	call	6dac <__sprint_r.part.0>
    7e64:	103f401e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7e68:	d9001b17 	ldw	r4,108(sp)
    7e6c:	d8801c17 	ldw	r2,112(sp)
    7e70:	d811883a 	mov	r8,sp
    7e74:	21000044 	addi	r4,r4,1
    7e78:	003d7d06 	br	7470 <__alt_mem_Flash_flash_data+0xf4007470>
    7e7c:	05adc83a 	sub	r22,zero,r22
    7e80:	b004c03a 	cmpne	r2,r22,zero
    7e84:	035bc83a 	sub	r13,zero,r13
    7e88:	689bc83a 	sub	r13,r13,r2
    7e8c:	03800b44 	movi	r14,45
    7e90:	db801d85 	stb	r14,118(sp)
    7e94:	4827883a 	mov	r19,r9
    7e98:	00800044 	movi	r2,1
    7e9c:	b348b03a 	or	r4,r22,r13
    7ea0:	003ce806 	br	7244 <__alt_mem_Flash_flash_data+0xf4007244>
    7ea4:	000b883a 	mov	r5,zero
    7ea8:	01000044 	movi	r4,1
    7eac:	d811883a 	mov	r8,sp
    7eb0:	683d4826 	beq	r13,zero,73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    7eb4:	00800084 	movi	r2,2
    7eb8:	d8c01d04 	addi	r3,sp,116
    7ebc:	d8c00015 	stw	r3,0(sp)
    7ec0:	d8800115 	stw	r2,4(sp)
    7ec4:	003d4006 	br	73c8 <__alt_mem_Flash_flash_data+0xf40073c8>
    7ec8:	00800084 	movi	r2,2
    7ecc:	003cda06 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7ed0:	a880100c 	andi	r2,r21,64
    7ed4:	10004226 	beq	r2,zero,7fe0 <___vfiprintf_internal_r+0x1120>
    7ed8:	d8802217 	ldw	r2,136(sp)
    7edc:	001b883a 	mov	r13,zero
    7ee0:	1580000b 	ldhu	r22,0(r2)
    7ee4:	10800104 	addi	r2,r2,4
    7ee8:	d8802215 	stw	r2,136(sp)
    7eec:	b009883a 	mov	r4,r22
    7ef0:	0005883a 	mov	r2,zero
    7ef4:	003cd006 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7ef8:	80c00007 	ldb	r3,0(r16)
    7efc:	8005883a 	mov	r2,r16
    7f00:	003c4d06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    7f04:	a880100c 	andi	r2,r21,64
    7f08:	10004426 	beq	r2,zero,801c <___vfiprintf_internal_r+0x115c>
    7f0c:	d8c02217 	ldw	r3,136(sp)
    7f10:	001b883a 	mov	r13,zero
    7f14:	00800044 	movi	r2,1
    7f18:	1d80000b 	ldhu	r22,0(r3)
    7f1c:	18c00104 	addi	r3,r3,4
    7f20:	d8c02215 	stw	r3,136(sp)
    7f24:	b009883a 	mov	r4,r22
    7f28:	003cc306 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7f2c:	a880040c 	andi	r2,r21,16
    7f30:	1000091e 	bne	r2,zero,7f58 <___vfiprintf_internal_r+0x1098>
    7f34:	aac0100c 	andi	r11,r21,64
    7f38:	58000726 	beq	r11,zero,7f58 <___vfiprintf_internal_r+0x1098>
    7f3c:	d8c02217 	ldw	r3,136(sp)
    7f40:	d9002317 	ldw	r4,140(sp)
    7f44:	18800017 	ldw	r2,0(r3)
    7f48:	18c00104 	addi	r3,r3,4
    7f4c:	d8c02215 	stw	r3,136(sp)
    7f50:	1100000d 	sth	r4,0(r2)
    7f54:	003c0e06 	br	6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    7f58:	d8c02217 	ldw	r3,136(sp)
    7f5c:	d9002317 	ldw	r4,140(sp)
    7f60:	18800017 	ldw	r2,0(r3)
    7f64:	18c00104 	addi	r3,r3,4
    7f68:	d8c02215 	stw	r3,136(sp)
    7f6c:	11000015 	stw	r4,0(r2)
    7f70:	003c0706 	br	6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    7f74:	a880100c 	andi	r2,r21,64
    7f78:	10002126 	beq	r2,zero,8000 <___vfiprintf_internal_r+0x1140>
    7f7c:	1d80000f 	ldh	r22,0(r3)
    7f80:	d8c02217 	ldw	r3,136(sp)
    7f84:	b01bd7fa 	srai	r13,r22,31
    7f88:	18c00104 	addi	r3,r3,4
    7f8c:	d8c02215 	stw	r3,136(sp)
    7f90:	6805883a 	mov	r2,r13
    7f94:	003dc406 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7f98:	d9002017 	ldw	r4,128(sp)
    7f9c:	d9402117 	ldw	r5,132(sp)
    7fa0:	d9801a04 	addi	r6,sp,104
    7fa4:	da402b15 	stw	r9,172(sp)
    7fa8:	db402a15 	stw	r13,168(sp)
    7fac:	0006dac0 	call	6dac <__sprint_r.part.0>
    7fb0:	da402b17 	ldw	r9,172(sp)
    7fb4:	db402a17 	ldw	r13,168(sp)
    7fb8:	103eeb1e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7fbc:	d9401b17 	ldw	r5,108(sp)
    7fc0:	d8801c17 	ldw	r2,112(sp)
    7fc4:	d811883a 	mov	r8,sp
    7fc8:	29000044 	addi	r4,r5,1
    7fcc:	003e8b06 	br	79fc <__alt_mem_Flash_flash_data+0xf40079fc>
    7fd0:	9023883a 	mov	r17,r18
    7fd4:	003d5a06 	br	7540 <__alt_mem_Flash_flash_data+0xf4007540>
    7fd8:	4827883a 	mov	r19,r9
    7fdc:	003e3506 	br	78b4 <__alt_mem_Flash_flash_data+0xf40078b4>
    7fe0:	d8c02217 	ldw	r3,136(sp)
    7fe4:	001b883a 	mov	r13,zero
    7fe8:	0005883a 	mov	r2,zero
    7fec:	1d800017 	ldw	r22,0(r3)
    7ff0:	18c00104 	addi	r3,r3,4
    7ff4:	d8c02215 	stw	r3,136(sp)
    7ff8:	b009883a 	mov	r4,r22
    7ffc:	003c8e06 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    8000:	1d800017 	ldw	r22,0(r3)
    8004:	d9002217 	ldw	r4,136(sp)
    8008:	b01bd7fa 	srai	r13,r22,31
    800c:	21000104 	addi	r4,r4,4
    8010:	d9002215 	stw	r4,136(sp)
    8014:	6805883a 	mov	r2,r13
    8018:	003da306 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    801c:	d9002217 	ldw	r4,136(sp)
    8020:	001b883a 	mov	r13,zero
    8024:	00800044 	movi	r2,1
    8028:	25800017 	ldw	r22,0(r4)
    802c:	21000104 	addi	r4,r4,4
    8030:	d9002215 	stw	r4,136(sp)
    8034:	b009883a 	mov	r4,r22
    8038:	003c7f06 	br	7238 <__alt_mem_Flash_flash_data+0xf4007238>
    803c:	00c000b4 	movhi	r3,2
    8040:	18e5fe04 	addi	r3,r3,-26632
    8044:	d8c02415 	stw	r3,144(sp)
    8048:	003cff06 	br	7448 <__alt_mem_Flash_flash_data+0xf4007448>
    804c:	d8801c17 	ldw	r2,112(sp)
    8050:	dd402117 	ldw	r21,132(sp)
    8054:	103ec526 	beq	r2,zero,7b6c <__alt_mem_Flash_flash_data+0xf4007b6c>
    8058:	d9002017 	ldw	r4,128(sp)
    805c:	a80b883a 	mov	r5,r21
    8060:	d9801a04 	addi	r6,sp,104
    8064:	0006dac0 	call	6dac <__sprint_r.part.0>
    8068:	003ec006 	br	7b6c <__alt_mem_Flash_flash_data+0xf4007b6c>
    806c:	80800044 	addi	r2,r16,1
    8070:	ad400814 	ori	r21,r21,32
    8074:	80c00047 	ldb	r3,1(r16)
    8078:	003bef06 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    807c:	04a5c83a 	sub	r18,zero,r18
    8080:	8005883a 	mov	r2,r16
    8084:	d8c02215 	stw	r3,136(sp)
    8088:	003d5306 	br	75d8 <__alt_mem_Flash_flash_data+0xf40075d8>
    808c:	da002a15 	stw	r8,168(sp)
    8090:	00007700 	call	770 <strlen>
    8094:	1027883a 	mov	r19,r2
    8098:	db801d83 	ldbu	r14,118(sp)
    809c:	dd802215 	stw	r22,136(sp)
    80a0:	0013883a 	mov	r9,zero
    80a4:	da002a17 	ldw	r8,168(sp)
    80a8:	003c7f06 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    80ac:	d9002017 	ldw	r4,128(sp)
    80b0:	d9402117 	ldw	r5,132(sp)
    80b4:	d9801a04 	addi	r6,sp,104
    80b8:	da402b15 	stw	r9,172(sp)
    80bc:	0006dac0 	call	6dac <__sprint_r.part.0>
    80c0:	da402b17 	ldw	r9,172(sp)
    80c4:	103ea81e 	bne	r2,zero,7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    80c8:	d9401b17 	ldw	r5,108(sp)
    80cc:	d8801c17 	ldw	r2,112(sp)
    80d0:	d811883a 	mov	r8,sp
    80d4:	29000044 	addi	r4,r5,1
    80d8:	003cc006 	br	73dc <__alt_mem_Flash_flash_data+0xf40073dc>
    80dc:	d9401b17 	ldw	r5,108(sp)
    80e0:	010000b4 	movhi	r4,2
    80e4:	21260204 	addi	r4,r4,-26616
    80e8:	d9002415 	stw	r4,144(sp)
    80ec:	29400044 	addi	r5,r5,1
    80f0:	003c9f06 	br	7370 <__alt_mem_Flash_flash_data+0xf4007370>
    80f4:	00800184 	movi	r2,6
    80f8:	1240012e 	bgeu	r2,r9,8100 <___vfiprintf_internal_r+0x1240>
    80fc:	1013883a 	mov	r9,r2
    8100:	4827883a 	mov	r19,r9
    8104:	4823883a 	mov	r17,r9
    8108:	48001116 	blt	r9,zero,8150 <___vfiprintf_internal_r+0x1290>
    810c:	050000b4 	movhi	r20,2
    8110:	dd802215 	stw	r22,136(sp)
    8114:	a525a204 	addi	r20,r20,-27000
    8118:	003db106 	br	77e0 <__alt_mem_Flash_flash_data+0xf40077e0>
    811c:	d9401b17 	ldw	r5,108(sp)
    8120:	010000b4 	movhi	r4,2
    8124:	21260204 	addi	r4,r4,-26616
    8128:	d9002415 	stw	r4,144(sp)
    812c:	29400044 	addi	r5,r5,1
    8130:	003cf906 	br	7518 <__alt_mem_Flash_flash_data+0xf4007518>
    8134:	4827883a 	mov	r19,r9
    8138:	db801d83 	ldbu	r14,118(sp)
    813c:	dd802215 	stw	r22,136(sp)
    8140:	0013883a 	mov	r9,zero
    8144:	003c5806 	br	72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    8148:	200d883a 	mov	r6,r4
    814c:	003ec706 	br	7c6c <__alt_mem_Flash_flash_data+0xf4007c6c>
    8150:	0023883a 	mov	r17,zero
    8154:	003fed06 	br	810c <__alt_mem_Flash_flash_data+0xf400810c>
    8158:	d9002217 	ldw	r4,136(sp)
    815c:	22400017 	ldw	r9,0(r4)
    8160:	20c00104 	addi	r3,r4,4
    8164:	d8c02215 	stw	r3,136(sp)
    8168:	483fc20e 	bge	r9,zero,8074 <__alt_mem_Flash_flash_data+0xf4008074>
    816c:	027fffc4 	movi	r9,-1
    8170:	80c00047 	ldb	r3,1(r16)
    8174:	003bb006 	br	7038 <__alt_mem_Flash_flash_data+0xf4007038>
    8178:	8c80010e 	bge	r17,r18,8180 <___vfiprintf_internal_r+0x12c0>
    817c:	9023883a 	mov	r17,r18
    8180:	d8802317 	ldw	r2,140(sp)
    8184:	1445883a 	add	r2,r2,r17
    8188:	d8802315 	stw	r2,140(sp)
    818c:	003cef06 	br	754c <__alt_mem_Flash_flash_data+0xf400754c>

00008190 <__vfiprintf_internal>:
    8190:	2007883a 	mov	r3,r4
    8194:	010000b4 	movhi	r4,2
    8198:	212fd504 	addi	r4,r4,-16556
    819c:	21000017 	ldw	r4,0(r4)
    81a0:	2805883a 	mov	r2,r5
    81a4:	300f883a 	mov	r7,r6
    81a8:	180b883a 	mov	r5,r3
    81ac:	100d883a 	mov	r6,r2
    81b0:	0006ec01 	jmpi	6ec0 <___vfiprintf_internal_r>

000081b4 <__sbprintf>:
    81b4:	2880030b 	ldhu	r2,12(r5)
    81b8:	2ac01917 	ldw	r11,100(r5)
    81bc:	2a80038b 	ldhu	r10,14(r5)
    81c0:	2a400717 	ldw	r9,28(r5)
    81c4:	2a000917 	ldw	r8,36(r5)
    81c8:	defee204 	addi	sp,sp,-1144
    81cc:	00c10004 	movi	r3,1024
    81d0:	dc011a15 	stw	r16,1128(sp)
    81d4:	10bfff4c 	andi	r2,r2,65533
    81d8:	2821883a 	mov	r16,r5
    81dc:	d8cb883a 	add	r5,sp,r3
    81e0:	dc811c15 	stw	r18,1136(sp)
    81e4:	dc411b15 	stw	r17,1132(sp)
    81e8:	dfc11d15 	stw	ra,1140(sp)
    81ec:	2025883a 	mov	r18,r4
    81f0:	d881030d 	sth	r2,1036(sp)
    81f4:	dac11915 	stw	r11,1124(sp)
    81f8:	da81038d 	sth	r10,1038(sp)
    81fc:	da410715 	stw	r9,1052(sp)
    8200:	da010915 	stw	r8,1060(sp)
    8204:	dec10015 	stw	sp,1024(sp)
    8208:	dec10415 	stw	sp,1040(sp)
    820c:	d8c10215 	stw	r3,1032(sp)
    8210:	d8c10515 	stw	r3,1044(sp)
    8214:	d8010615 	stw	zero,1048(sp)
    8218:	0006ec00 	call	6ec0 <___vfiprintf_internal_r>
    821c:	1023883a 	mov	r17,r2
    8220:	10000416 	blt	r2,zero,8234 <__sbprintf+0x80>
    8224:	9009883a 	mov	r4,r18
    8228:	d9410004 	addi	r5,sp,1024
    822c:	00044bc0 	call	44bc <_fflush_r>
    8230:	10000d1e 	bne	r2,zero,8268 <__sbprintf+0xb4>
    8234:	d8c1030b 	ldhu	r3,1036(sp)
    8238:	18c0100c 	andi	r3,r3,64
    823c:	18000326 	beq	r3,zero,824c <__sbprintf+0x98>
    8240:	8080030b 	ldhu	r2,12(r16)
    8244:	10801014 	ori	r2,r2,64
    8248:	8080030d 	sth	r2,12(r16)
    824c:	8805883a 	mov	r2,r17
    8250:	dfc11d17 	ldw	ra,1140(sp)
    8254:	dc811c17 	ldw	r18,1136(sp)
    8258:	dc411b17 	ldw	r17,1132(sp)
    825c:	dc011a17 	ldw	r16,1128(sp)
    8260:	dec11e04 	addi	sp,sp,1144
    8264:	f800283a 	ret
    8268:	047fffc4 	movi	r17,-1
    826c:	003ff106 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>

00008270 <_write_r>:
    8270:	defffd04 	addi	sp,sp,-12
    8274:	dc000015 	stw	r16,0(sp)
    8278:	040000b4 	movhi	r16,2
    827c:	dc400115 	stw	r17,4(sp)
    8280:	84388004 	addi	r16,r16,-7680
    8284:	2023883a 	mov	r17,r4
    8288:	2809883a 	mov	r4,r5
    828c:	300b883a 	mov	r5,r6
    8290:	380d883a 	mov	r6,r7
    8294:	dfc00215 	stw	ra,8(sp)
    8298:	80000015 	stw	zero,0(r16)
    829c:	000d2300 	call	d230 <write>
    82a0:	00ffffc4 	movi	r3,-1
    82a4:	10c00526 	beq	r2,r3,82bc <_write_r+0x4c>
    82a8:	dfc00217 	ldw	ra,8(sp)
    82ac:	dc400117 	ldw	r17,4(sp)
    82b0:	dc000017 	ldw	r16,0(sp)
    82b4:	dec00304 	addi	sp,sp,12
    82b8:	f800283a 	ret
    82bc:	80c00017 	ldw	r3,0(r16)
    82c0:	183ff926 	beq	r3,zero,82a8 <__alt_mem_Flash_flash_data+0xf40082a8>
    82c4:	88c00015 	stw	r3,0(r17)
    82c8:	003ff706 	br	82a8 <__alt_mem_Flash_flash_data+0xf40082a8>

000082cc <_close_r>:
    82cc:	defffd04 	addi	sp,sp,-12
    82d0:	dc000015 	stw	r16,0(sp)
    82d4:	040000b4 	movhi	r16,2
    82d8:	dc400115 	stw	r17,4(sp)
    82dc:	84388004 	addi	r16,r16,-7680
    82e0:	2023883a 	mov	r17,r4
    82e4:	2809883a 	mov	r4,r5
    82e8:	dfc00215 	stw	ra,8(sp)
    82ec:	80000015 	stw	zero,0(r16)
    82f0:	000c9b80 	call	c9b8 <close>
    82f4:	00ffffc4 	movi	r3,-1
    82f8:	10c00526 	beq	r2,r3,8310 <_close_r+0x44>
    82fc:	dfc00217 	ldw	ra,8(sp)
    8300:	dc400117 	ldw	r17,4(sp)
    8304:	dc000017 	ldw	r16,0(sp)
    8308:	dec00304 	addi	sp,sp,12
    830c:	f800283a 	ret
    8310:	80c00017 	ldw	r3,0(r16)
    8314:	183ff926 	beq	r3,zero,82fc <__alt_mem_Flash_flash_data+0xf40082fc>
    8318:	88c00015 	stw	r3,0(r17)
    831c:	003ff706 	br	82fc <__alt_mem_Flash_flash_data+0xf40082fc>

00008320 <_calloc_r>:
    8320:	298b383a 	mul	r5,r5,r6
    8324:	defffe04 	addi	sp,sp,-8
    8328:	dc000015 	stw	r16,0(sp)
    832c:	dfc00115 	stw	ra,4(sp)
    8330:	000511c0 	call	511c <_malloc_r>
    8334:	1021883a 	mov	r16,r2
    8338:	10002826 	beq	r2,zero,83dc <_calloc_r+0xbc>
    833c:	11bfff17 	ldw	r6,-4(r2)
    8340:	00bfff04 	movi	r2,-4
    8344:	00c00904 	movi	r3,36
    8348:	308c703a 	and	r6,r6,r2
    834c:	308d883a 	add	r6,r6,r2
    8350:	19801436 	bltu	r3,r6,83a4 <_calloc_r+0x84>
    8354:	008004c4 	movi	r2,19
    8358:	11800936 	bltu	r2,r6,8380 <_calloc_r+0x60>
    835c:	8005883a 	mov	r2,r16
    8360:	10000015 	stw	zero,0(r2)
    8364:	10000115 	stw	zero,4(r2)
    8368:	10000215 	stw	zero,8(r2)
    836c:	8005883a 	mov	r2,r16
    8370:	dfc00117 	ldw	ra,4(sp)
    8374:	dc000017 	ldw	r16,0(sp)
    8378:	dec00204 	addi	sp,sp,8
    837c:	f800283a 	ret
    8380:	80000015 	stw	zero,0(r16)
    8384:	80000115 	stw	zero,4(r16)
    8388:	008006c4 	movi	r2,27
    838c:	11800d2e 	bgeu	r2,r6,83c4 <_calloc_r+0xa4>
    8390:	80000215 	stw	zero,8(r16)
    8394:	80000315 	stw	zero,12(r16)
    8398:	30c00c26 	beq	r6,r3,83cc <_calloc_r+0xac>
    839c:	80800404 	addi	r2,r16,16
    83a0:	003fef06 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    83a4:	8009883a 	mov	r4,r16
    83a8:	000b883a 	mov	r5,zero
    83ac:	0005ae40 	call	5ae4 <memset>
    83b0:	8005883a 	mov	r2,r16
    83b4:	dfc00117 	ldw	ra,4(sp)
    83b8:	dc000017 	ldw	r16,0(sp)
    83bc:	dec00204 	addi	sp,sp,8
    83c0:	f800283a 	ret
    83c4:	80800204 	addi	r2,r16,8
    83c8:	003fe506 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    83cc:	80000415 	stw	zero,16(r16)
    83d0:	80800604 	addi	r2,r16,24
    83d4:	80000515 	stw	zero,20(r16)
    83d8:	003fe106 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    83dc:	0005883a 	mov	r2,zero
    83e0:	003fe306 	br	8370 <__alt_mem_Flash_flash_data+0xf4008370>

000083e4 <_fclose_r>:
    83e4:	28003926 	beq	r5,zero,84cc <_fclose_r+0xe8>
    83e8:	defffc04 	addi	sp,sp,-16
    83ec:	dc400115 	stw	r17,4(sp)
    83f0:	dc000015 	stw	r16,0(sp)
    83f4:	dfc00315 	stw	ra,12(sp)
    83f8:	dc800215 	stw	r18,8(sp)
    83fc:	2023883a 	mov	r17,r4
    8400:	2821883a 	mov	r16,r5
    8404:	20000226 	beq	r4,zero,8410 <_fclose_r+0x2c>
    8408:	20800e17 	ldw	r2,56(r4)
    840c:	10002726 	beq	r2,zero,84ac <_fclose_r+0xc8>
    8410:	8080030f 	ldh	r2,12(r16)
    8414:	1000071e 	bne	r2,zero,8434 <_fclose_r+0x50>
    8418:	0005883a 	mov	r2,zero
    841c:	dfc00317 	ldw	ra,12(sp)
    8420:	dc800217 	ldw	r18,8(sp)
    8424:	dc400117 	ldw	r17,4(sp)
    8428:	dc000017 	ldw	r16,0(sp)
    842c:	dec00404 	addi	sp,sp,16
    8430:	f800283a 	ret
    8434:	8809883a 	mov	r4,r17
    8438:	800b883a 	mov	r5,r16
    843c:	00042b40 	call	42b4 <__sflush_r>
    8440:	1025883a 	mov	r18,r2
    8444:	80800b17 	ldw	r2,44(r16)
    8448:	10000426 	beq	r2,zero,845c <_fclose_r+0x78>
    844c:	81400717 	ldw	r5,28(r16)
    8450:	8809883a 	mov	r4,r17
    8454:	103ee83a 	callr	r2
    8458:	10001616 	blt	r2,zero,84b4 <_fclose_r+0xd0>
    845c:	8080030b 	ldhu	r2,12(r16)
    8460:	1080200c 	andi	r2,r2,128
    8464:	1000151e 	bne	r2,zero,84bc <_fclose_r+0xd8>
    8468:	81400c17 	ldw	r5,48(r16)
    846c:	28000526 	beq	r5,zero,8484 <_fclose_r+0xa0>
    8470:	80801004 	addi	r2,r16,64
    8474:	28800226 	beq	r5,r2,8480 <_fclose_r+0x9c>
    8478:	8809883a 	mov	r4,r17
    847c:	0004a0c0 	call	4a0c <_free_r>
    8480:	80000c15 	stw	zero,48(r16)
    8484:	81401117 	ldw	r5,68(r16)
    8488:	28000326 	beq	r5,zero,8498 <_fclose_r+0xb4>
    848c:	8809883a 	mov	r4,r17
    8490:	0004a0c0 	call	4a0c <_free_r>
    8494:	80001115 	stw	zero,68(r16)
    8498:	00048a80 	call	48a8 <__sfp_lock_acquire>
    849c:	8000030d 	sth	zero,12(r16)
    84a0:	00048ac0 	call	48ac <__sfp_lock_release>
    84a4:	9005883a 	mov	r2,r18
    84a8:	003fdc06 	br	841c <__alt_mem_Flash_flash_data+0xf400841c>
    84ac:	00048980 	call	4898 <__sinit>
    84b0:	003fd706 	br	8410 <__alt_mem_Flash_flash_data+0xf4008410>
    84b4:	04bfffc4 	movi	r18,-1
    84b8:	003fe806 	br	845c <__alt_mem_Flash_flash_data+0xf400845c>
    84bc:	81400417 	ldw	r5,16(r16)
    84c0:	8809883a 	mov	r4,r17
    84c4:	0004a0c0 	call	4a0c <_free_r>
    84c8:	003fe706 	br	8468 <__alt_mem_Flash_flash_data+0xf4008468>
    84cc:	0005883a 	mov	r2,zero
    84d0:	f800283a 	ret

000084d4 <fclose>:
    84d4:	008000b4 	movhi	r2,2
    84d8:	10afd504 	addi	r2,r2,-16556
    84dc:	200b883a 	mov	r5,r4
    84e0:	11000017 	ldw	r4,0(r2)
    84e4:	00083e41 	jmpi	83e4 <_fclose_r>

000084e8 <_fputwc_r>:
    84e8:	3080030b 	ldhu	r2,12(r6)
    84ec:	defff804 	addi	sp,sp,-32
    84f0:	dcc00415 	stw	r19,16(sp)
    84f4:	dc800315 	stw	r18,12(sp)
    84f8:	dc000115 	stw	r16,4(sp)
    84fc:	dfc00715 	stw	ra,28(sp)
    8500:	dd400615 	stw	r21,24(sp)
    8504:	dd000515 	stw	r20,20(sp)
    8508:	dc400215 	stw	r17,8(sp)
    850c:	10c8000c 	andi	r3,r2,8192
    8510:	3021883a 	mov	r16,r6
    8514:	2027883a 	mov	r19,r4
    8518:	2825883a 	mov	r18,r5
    851c:	1800051e 	bne	r3,zero,8534 <_fputwc_r+0x4c>
    8520:	30c01917 	ldw	r3,100(r6)
    8524:	10880014 	ori	r2,r2,8192
    8528:	3080030d 	sth	r2,12(r6)
    852c:	18880014 	ori	r2,r3,8192
    8530:	30801915 	stw	r2,100(r6)
    8534:	0004f0c0 	call	4f0c <__locale_mb_cur_max>
    8538:	00c00044 	movi	r3,1
    853c:	10c03e26 	beq	r2,r3,8638 <_fputwc_r+0x150>
    8540:	9809883a 	mov	r4,r19
    8544:	d80b883a 	mov	r5,sp
    8548:	900d883a 	mov	r6,r18
    854c:	81c01704 	addi	r7,r16,92
    8550:	00095040 	call	9504 <_wcrtomb_r>
    8554:	1029883a 	mov	r20,r2
    8558:	00bfffc4 	movi	r2,-1
    855c:	a0802026 	beq	r20,r2,85e0 <_fputwc_r+0xf8>
    8560:	d9400003 	ldbu	r5,0(sp)
    8564:	a0001c26 	beq	r20,zero,85d8 <_fputwc_r+0xf0>
    8568:	0023883a 	mov	r17,zero
    856c:	05400284 	movi	r21,10
    8570:	00000906 	br	8598 <_fputwc_r+0xb0>
    8574:	80800017 	ldw	r2,0(r16)
    8578:	11400005 	stb	r5,0(r2)
    857c:	80c00017 	ldw	r3,0(r16)
    8580:	18c00044 	addi	r3,r3,1
    8584:	80c00015 	stw	r3,0(r16)
    8588:	8c400044 	addi	r17,r17,1
    858c:	dc45883a 	add	r2,sp,r17
    8590:	8d00112e 	bgeu	r17,r20,85d8 <_fputwc_r+0xf0>
    8594:	11400003 	ldbu	r5,0(r2)
    8598:	80c00217 	ldw	r3,8(r16)
    859c:	18ffffc4 	addi	r3,r3,-1
    85a0:	80c00215 	stw	r3,8(r16)
    85a4:	183ff30e 	bge	r3,zero,8574 <__alt_mem_Flash_flash_data+0xf4008574>
    85a8:	80800617 	ldw	r2,24(r16)
    85ac:	18801916 	blt	r3,r2,8614 <_fputwc_r+0x12c>
    85b0:	80800017 	ldw	r2,0(r16)
    85b4:	11400005 	stb	r5,0(r2)
    85b8:	80800017 	ldw	r2,0(r16)
    85bc:	10c00003 	ldbu	r3,0(r2)
    85c0:	10800044 	addi	r2,r2,1
    85c4:	1d402326 	beq	r3,r21,8654 <_fputwc_r+0x16c>
    85c8:	80800015 	stw	r2,0(r16)
    85cc:	8c400044 	addi	r17,r17,1
    85d0:	dc45883a 	add	r2,sp,r17
    85d4:	8d3fef36 	bltu	r17,r20,8594 <__alt_mem_Flash_flash_data+0xf4008594>
    85d8:	9005883a 	mov	r2,r18
    85dc:	00000406 	br	85f0 <_fputwc_r+0x108>
    85e0:	80c0030b 	ldhu	r3,12(r16)
    85e4:	a005883a 	mov	r2,r20
    85e8:	18c01014 	ori	r3,r3,64
    85ec:	80c0030d 	sth	r3,12(r16)
    85f0:	dfc00717 	ldw	ra,28(sp)
    85f4:	dd400617 	ldw	r21,24(sp)
    85f8:	dd000517 	ldw	r20,20(sp)
    85fc:	dcc00417 	ldw	r19,16(sp)
    8600:	dc800317 	ldw	r18,12(sp)
    8604:	dc400217 	ldw	r17,8(sp)
    8608:	dc000117 	ldw	r16,4(sp)
    860c:	dec00804 	addi	sp,sp,32
    8610:	f800283a 	ret
    8614:	9809883a 	mov	r4,r19
    8618:	29403fcc 	andi	r5,r5,255
    861c:	800d883a 	mov	r6,r16
    8620:	00093b00 	call	93b0 <__swbuf_r>
    8624:	10bfffe0 	cmpeqi	r2,r2,-1
    8628:	10803fcc 	andi	r2,r2,255
    862c:	103fd626 	beq	r2,zero,8588 <__alt_mem_Flash_flash_data+0xf4008588>
    8630:	00bfffc4 	movi	r2,-1
    8634:	003fee06 	br	85f0 <__alt_mem_Flash_flash_data+0xf40085f0>
    8638:	90ffffc4 	addi	r3,r18,-1
    863c:	01003f84 	movi	r4,254
    8640:	20ffbf36 	bltu	r4,r3,8540 <__alt_mem_Flash_flash_data+0xf4008540>
    8644:	900b883a 	mov	r5,r18
    8648:	dc800005 	stb	r18,0(sp)
    864c:	1029883a 	mov	r20,r2
    8650:	003fc506 	br	8568 <__alt_mem_Flash_flash_data+0xf4008568>
    8654:	9809883a 	mov	r4,r19
    8658:	a80b883a 	mov	r5,r21
    865c:	800d883a 	mov	r6,r16
    8660:	00093b00 	call	93b0 <__swbuf_r>
    8664:	10bfffe0 	cmpeqi	r2,r2,-1
    8668:	003fef06 	br	8628 <__alt_mem_Flash_flash_data+0xf4008628>

0000866c <fputwc>:
    866c:	008000b4 	movhi	r2,2
    8670:	defffc04 	addi	sp,sp,-16
    8674:	10afd504 	addi	r2,r2,-16556
    8678:	dc000115 	stw	r16,4(sp)
    867c:	14000017 	ldw	r16,0(r2)
    8680:	dc400215 	stw	r17,8(sp)
    8684:	dfc00315 	stw	ra,12(sp)
    8688:	2023883a 	mov	r17,r4
    868c:	280d883a 	mov	r6,r5
    8690:	80000626 	beq	r16,zero,86ac <fputwc+0x40>
    8694:	80800e17 	ldw	r2,56(r16)
    8698:	1000041e 	bne	r2,zero,86ac <fputwc+0x40>
    869c:	8009883a 	mov	r4,r16
    86a0:	d9400015 	stw	r5,0(sp)
    86a4:	00048980 	call	4898 <__sinit>
    86a8:	d9800017 	ldw	r6,0(sp)
    86ac:	8009883a 	mov	r4,r16
    86b0:	880b883a 	mov	r5,r17
    86b4:	dfc00317 	ldw	ra,12(sp)
    86b8:	dc400217 	ldw	r17,8(sp)
    86bc:	dc000117 	ldw	r16,4(sp)
    86c0:	dec00404 	addi	sp,sp,16
    86c4:	00084e81 	jmpi	84e8 <_fputwc_r>

000086c8 <_fstat_r>:
    86c8:	defffd04 	addi	sp,sp,-12
    86cc:	dc000015 	stw	r16,0(sp)
    86d0:	040000b4 	movhi	r16,2
    86d4:	dc400115 	stw	r17,4(sp)
    86d8:	84388004 	addi	r16,r16,-7680
    86dc:	2023883a 	mov	r17,r4
    86e0:	2809883a 	mov	r4,r5
    86e4:	300b883a 	mov	r5,r6
    86e8:	dfc00215 	stw	ra,8(sp)
    86ec:	80000015 	stw	zero,0(r16)
    86f0:	000cb040 	call	cb04 <fstat>
    86f4:	00ffffc4 	movi	r3,-1
    86f8:	10c00526 	beq	r2,r3,8710 <_fstat_r+0x48>
    86fc:	dfc00217 	ldw	ra,8(sp)
    8700:	dc400117 	ldw	r17,4(sp)
    8704:	dc000017 	ldw	r16,0(sp)
    8708:	dec00304 	addi	sp,sp,12
    870c:	f800283a 	ret
    8710:	80c00017 	ldw	r3,0(r16)
    8714:	183ff926 	beq	r3,zero,86fc <__alt_mem_Flash_flash_data+0xf40086fc>
    8718:	88c00015 	stw	r3,0(r17)
    871c:	003ff706 	br	86fc <__alt_mem_Flash_flash_data+0xf40086fc>

00008720 <__sfvwrite_r>:
    8720:	30800217 	ldw	r2,8(r6)
    8724:	10006726 	beq	r2,zero,88c4 <__sfvwrite_r+0x1a4>
    8728:	defff404 	addi	sp,sp,-48
    872c:	dd000615 	stw	r20,24(sp)
    8730:	2029883a 	mov	r20,r4
    8734:	2900030b 	ldhu	r4,12(r5)
    8738:	ddc00915 	stw	r23,36(sp)
    873c:	dc000215 	stw	r16,8(sp)
    8740:	dfc00b15 	stw	ra,44(sp)
    8744:	df000a15 	stw	fp,40(sp)
    8748:	dd800815 	stw	r22,32(sp)
    874c:	dd400715 	stw	r21,28(sp)
    8750:	dcc00515 	stw	r19,20(sp)
    8754:	dc800415 	stw	r18,16(sp)
    8758:	dc400315 	stw	r17,12(sp)
    875c:	2080020c 	andi	r2,r4,8
    8760:	2821883a 	mov	r16,r5
    8764:	302f883a 	mov	r23,r6
    8768:	10002726 	beq	r2,zero,8808 <__sfvwrite_r+0xe8>
    876c:	28800417 	ldw	r2,16(r5)
    8770:	10002526 	beq	r2,zero,8808 <__sfvwrite_r+0xe8>
    8774:	2080008c 	andi	r2,r4,2
    8778:	bc400017 	ldw	r17,0(r23)
    877c:	10002a26 	beq	r2,zero,8828 <__sfvwrite_r+0x108>
    8780:	05600034 	movhi	r21,32768
    8784:	0027883a 	mov	r19,zero
    8788:	0025883a 	mov	r18,zero
    878c:	ad7f0004 	addi	r21,r21,-1024
    8790:	980d883a 	mov	r6,r19
    8794:	a009883a 	mov	r4,r20
    8798:	90004626 	beq	r18,zero,88b4 <__sfvwrite_r+0x194>
    879c:	900f883a 	mov	r7,r18
    87a0:	81400717 	ldw	r5,28(r16)
    87a4:	ac80022e 	bgeu	r21,r18,87b0 <__sfvwrite_r+0x90>
    87a8:	01e00034 	movhi	r7,32768
    87ac:	39ff0004 	addi	r7,r7,-1024
    87b0:	80800917 	ldw	r2,36(r16)
    87b4:	103ee83a 	callr	r2
    87b8:	0080520e 	bge	zero,r2,8904 <__sfvwrite_r+0x1e4>
    87bc:	b8c00217 	ldw	r3,8(r23)
    87c0:	98a7883a 	add	r19,r19,r2
    87c4:	90a5c83a 	sub	r18,r18,r2
    87c8:	1885c83a 	sub	r2,r3,r2
    87cc:	b8800215 	stw	r2,8(r23)
    87d0:	103fef1e 	bne	r2,zero,8790 <__alt_mem_Flash_flash_data+0xf4008790>
    87d4:	0005883a 	mov	r2,zero
    87d8:	dfc00b17 	ldw	ra,44(sp)
    87dc:	df000a17 	ldw	fp,40(sp)
    87e0:	ddc00917 	ldw	r23,36(sp)
    87e4:	dd800817 	ldw	r22,32(sp)
    87e8:	dd400717 	ldw	r21,28(sp)
    87ec:	dd000617 	ldw	r20,24(sp)
    87f0:	dcc00517 	ldw	r19,20(sp)
    87f4:	dc800417 	ldw	r18,16(sp)
    87f8:	dc400317 	ldw	r17,12(sp)
    87fc:	dc000217 	ldw	r16,8(sp)
    8800:	dec00c04 	addi	sp,sp,48
    8804:	f800283a 	ret
    8808:	a009883a 	mov	r4,r20
    880c:	800b883a 	mov	r5,r16
    8810:	00028380 	call	2838 <__swsetup_r>
    8814:	1000ec1e 	bne	r2,zero,8bc8 <__sfvwrite_r+0x4a8>
    8818:	8100030b 	ldhu	r4,12(r16)
    881c:	bc400017 	ldw	r17,0(r23)
    8820:	2080008c 	andi	r2,r4,2
    8824:	103fd61e 	bne	r2,zero,8780 <__alt_mem_Flash_flash_data+0xf4008780>
    8828:	2080004c 	andi	r2,r4,1
    882c:	10003a1e 	bne	r2,zero,8918 <__sfvwrite_r+0x1f8>
    8830:	0039883a 	mov	fp,zero
    8834:	0025883a 	mov	r18,zero
    8838:	90001a26 	beq	r18,zero,88a4 <__sfvwrite_r+0x184>
    883c:	2080800c 	andi	r2,r4,512
    8840:	85800217 	ldw	r22,8(r16)
    8844:	10007626 	beq	r2,zero,8a20 <__sfvwrite_r+0x300>
    8848:	b027883a 	mov	r19,r22
    884c:	95809436 	bltu	r18,r22,8aa0 <__sfvwrite_r+0x380>
    8850:	2081200c 	andi	r2,r4,1152
    8854:	10009f1e 	bne	r2,zero,8ad4 <__sfvwrite_r+0x3b4>
    8858:	81000017 	ldw	r4,0(r16)
    885c:	e00b883a 	mov	r5,fp
    8860:	980d883a 	mov	r6,r19
    8864:	0008c900 	call	8c90 <memmove>
    8868:	81000217 	ldw	r4,8(r16)
    886c:	81400017 	ldw	r5,0(r16)
    8870:	9005883a 	mov	r2,r18
    8874:	2587c83a 	sub	r3,r4,r22
    8878:	2ce7883a 	add	r19,r5,r19
    887c:	80c00215 	stw	r3,8(r16)
    8880:	84c00015 	stw	r19,0(r16)
    8884:	b8c00217 	ldw	r3,8(r23)
    8888:	e0b9883a 	add	fp,fp,r2
    888c:	90a5c83a 	sub	r18,r18,r2
    8890:	1885c83a 	sub	r2,r3,r2
    8894:	b8800215 	stw	r2,8(r23)
    8898:	103fce26 	beq	r2,zero,87d4 <__alt_mem_Flash_flash_data+0xf40087d4>
    889c:	8100030b 	ldhu	r4,12(r16)
    88a0:	903fe61e 	bne	r18,zero,883c <__alt_mem_Flash_flash_data+0xf400883c>
    88a4:	8f000017 	ldw	fp,0(r17)
    88a8:	8c800117 	ldw	r18,4(r17)
    88ac:	8c400204 	addi	r17,r17,8
    88b0:	003fe106 	br	8838 <__alt_mem_Flash_flash_data+0xf4008838>
    88b4:	8cc00017 	ldw	r19,0(r17)
    88b8:	8c800117 	ldw	r18,4(r17)
    88bc:	8c400204 	addi	r17,r17,8
    88c0:	003fb306 	br	8790 <__alt_mem_Flash_flash_data+0xf4008790>
    88c4:	0005883a 	mov	r2,zero
    88c8:	f800283a 	ret
    88cc:	00a00034 	movhi	r2,32768
    88d0:	10bfffc4 	addi	r2,r2,-1
    88d4:	9009883a 	mov	r4,r18
    88d8:	1480012e 	bgeu	r2,r18,88e0 <__sfvwrite_r+0x1c0>
    88dc:	1009883a 	mov	r4,r2
    88e0:	980b883a 	mov	r5,r19
    88e4:	000a2a80 	call	a2a8 <__divsi3>
    88e8:	81400717 	ldw	r5,28(r16)
    88ec:	80c00917 	ldw	r3,36(r16)
    88f0:	988f383a 	mul	r7,r19,r2
    88f4:	a009883a 	mov	r4,r20
    88f8:	e00d883a 	mov	r6,fp
    88fc:	183ee83a 	callr	r3
    8900:	00bfe016 	blt	zero,r2,8884 <__alt_mem_Flash_flash_data+0xf4008884>
    8904:	8080030b 	ldhu	r2,12(r16)
    8908:	10801014 	ori	r2,r2,64
    890c:	8080030d 	sth	r2,12(r16)
    8910:	00bfffc4 	movi	r2,-1
    8914:	003fb006 	br	87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    8918:	0027883a 	mov	r19,zero
    891c:	0011883a 	mov	r8,zero
    8920:	0039883a 	mov	fp,zero
    8924:	0025883a 	mov	r18,zero
    8928:	90001f26 	beq	r18,zero,89a8 <__sfvwrite_r+0x288>
    892c:	40006026 	beq	r8,zero,8ab0 <__sfvwrite_r+0x390>
    8930:	982b883a 	mov	r21,r19
    8934:	94c0012e 	bgeu	r18,r19,893c <__sfvwrite_r+0x21c>
    8938:	902b883a 	mov	r21,r18
    893c:	81000017 	ldw	r4,0(r16)
    8940:	80800417 	ldw	r2,16(r16)
    8944:	a82d883a 	mov	r22,r21
    8948:	81800217 	ldw	r6,8(r16)
    894c:	81c00517 	ldw	r7,20(r16)
    8950:	1100022e 	bgeu	r2,r4,895c <__sfvwrite_r+0x23c>
    8954:	31c7883a 	add	r3,r6,r7
    8958:	1d401816 	blt	r3,r21,89bc <__sfvwrite_r+0x29c>
    895c:	a9c04416 	blt	r21,r7,8a70 <__sfvwrite_r+0x350>
    8960:	80800917 	ldw	r2,36(r16)
    8964:	81400717 	ldw	r5,28(r16)
    8968:	a009883a 	mov	r4,r20
    896c:	da000115 	stw	r8,4(sp)
    8970:	e00d883a 	mov	r6,fp
    8974:	103ee83a 	callr	r2
    8978:	102d883a 	mov	r22,r2
    897c:	da000117 	ldw	r8,4(sp)
    8980:	00bfe00e 	bge	zero,r2,8904 <__alt_mem_Flash_flash_data+0xf4008904>
    8984:	9da7c83a 	sub	r19,r19,r22
    8988:	98001f26 	beq	r19,zero,8a08 <__sfvwrite_r+0x2e8>
    898c:	b8800217 	ldw	r2,8(r23)
    8990:	e5b9883a 	add	fp,fp,r22
    8994:	95a5c83a 	sub	r18,r18,r22
    8998:	15adc83a 	sub	r22,r2,r22
    899c:	bd800215 	stw	r22,8(r23)
    89a0:	b03f8c26 	beq	r22,zero,87d4 <__alt_mem_Flash_flash_data+0xf40087d4>
    89a4:	903fe11e 	bne	r18,zero,892c <__alt_mem_Flash_flash_data+0xf400892c>
    89a8:	8f000017 	ldw	fp,0(r17)
    89ac:	8c800117 	ldw	r18,4(r17)
    89b0:	0011883a 	mov	r8,zero
    89b4:	8c400204 	addi	r17,r17,8
    89b8:	003fdb06 	br	8928 <__alt_mem_Flash_flash_data+0xf4008928>
    89bc:	180d883a 	mov	r6,r3
    89c0:	e00b883a 	mov	r5,fp
    89c4:	da000115 	stw	r8,4(sp)
    89c8:	d8c00015 	stw	r3,0(sp)
    89cc:	0008c900 	call	8c90 <memmove>
    89d0:	d8c00017 	ldw	r3,0(sp)
    89d4:	80800017 	ldw	r2,0(r16)
    89d8:	a009883a 	mov	r4,r20
    89dc:	800b883a 	mov	r5,r16
    89e0:	10c5883a 	add	r2,r2,r3
    89e4:	80800015 	stw	r2,0(r16)
    89e8:	d8c00015 	stw	r3,0(sp)
    89ec:	00044bc0 	call	44bc <_fflush_r>
    89f0:	d8c00017 	ldw	r3,0(sp)
    89f4:	da000117 	ldw	r8,4(sp)
    89f8:	103fc21e 	bne	r2,zero,8904 <__alt_mem_Flash_flash_data+0xf4008904>
    89fc:	182d883a 	mov	r22,r3
    8a00:	9da7c83a 	sub	r19,r19,r22
    8a04:	983fe11e 	bne	r19,zero,898c <__alt_mem_Flash_flash_data+0xf400898c>
    8a08:	a009883a 	mov	r4,r20
    8a0c:	800b883a 	mov	r5,r16
    8a10:	00044bc0 	call	44bc <_fflush_r>
    8a14:	103fbb1e 	bne	r2,zero,8904 <__alt_mem_Flash_flash_data+0xf4008904>
    8a18:	0011883a 	mov	r8,zero
    8a1c:	003fdb06 	br	898c <__alt_mem_Flash_flash_data+0xf400898c>
    8a20:	81000017 	ldw	r4,0(r16)
    8a24:	80800417 	ldw	r2,16(r16)
    8a28:	11000236 	bltu	r2,r4,8a34 <__sfvwrite_r+0x314>
    8a2c:	84c00517 	ldw	r19,20(r16)
    8a30:	94ffa62e 	bgeu	r18,r19,88cc <__alt_mem_Flash_flash_data+0xf40088cc>
    8a34:	9027883a 	mov	r19,r18
    8a38:	b480012e 	bgeu	r22,r18,8a40 <__sfvwrite_r+0x320>
    8a3c:	b027883a 	mov	r19,r22
    8a40:	e00b883a 	mov	r5,fp
    8a44:	980d883a 	mov	r6,r19
    8a48:	0008c900 	call	8c90 <memmove>
    8a4c:	80800217 	ldw	r2,8(r16)
    8a50:	80c00017 	ldw	r3,0(r16)
    8a54:	14c5c83a 	sub	r2,r2,r19
    8a58:	1cc7883a 	add	r3,r3,r19
    8a5c:	80800215 	stw	r2,8(r16)
    8a60:	80c00015 	stw	r3,0(r16)
    8a64:	10004326 	beq	r2,zero,8b74 <__sfvwrite_r+0x454>
    8a68:	9805883a 	mov	r2,r19
    8a6c:	003f8506 	br	8884 <__alt_mem_Flash_flash_data+0xf4008884>
    8a70:	a80d883a 	mov	r6,r21
    8a74:	e00b883a 	mov	r5,fp
    8a78:	da000115 	stw	r8,4(sp)
    8a7c:	0008c900 	call	8c90 <memmove>
    8a80:	80800217 	ldw	r2,8(r16)
    8a84:	80c00017 	ldw	r3,0(r16)
    8a88:	da000117 	ldw	r8,4(sp)
    8a8c:	1545c83a 	sub	r2,r2,r21
    8a90:	1d6b883a 	add	r21,r3,r21
    8a94:	80800215 	stw	r2,8(r16)
    8a98:	85400015 	stw	r21,0(r16)
    8a9c:	003fb906 	br	8984 <__alt_mem_Flash_flash_data+0xf4008984>
    8aa0:	81000017 	ldw	r4,0(r16)
    8aa4:	902d883a 	mov	r22,r18
    8aa8:	9027883a 	mov	r19,r18
    8aac:	003f6b06 	br	885c <__alt_mem_Flash_flash_data+0xf400885c>
    8ab0:	e009883a 	mov	r4,fp
    8ab4:	01400284 	movi	r5,10
    8ab8:	900d883a 	mov	r6,r18
    8abc:	00058c40 	call	58c4 <memchr>
    8ac0:	10003e26 	beq	r2,zero,8bbc <__sfvwrite_r+0x49c>
    8ac4:	10800044 	addi	r2,r2,1
    8ac8:	1727c83a 	sub	r19,r2,fp
    8acc:	02000044 	movi	r8,1
    8ad0:	003f9706 	br	8930 <__alt_mem_Flash_flash_data+0xf4008930>
    8ad4:	80800517 	ldw	r2,20(r16)
    8ad8:	81400417 	ldw	r5,16(r16)
    8adc:	80c00017 	ldw	r3,0(r16)
    8ae0:	10a7883a 	add	r19,r2,r2
    8ae4:	9885883a 	add	r2,r19,r2
    8ae8:	1026d7fa 	srli	r19,r2,31
    8aec:	196bc83a 	sub	r21,r3,r5
    8af0:	a9800044 	addi	r6,r21,1
    8af4:	9885883a 	add	r2,r19,r2
    8af8:	1027d07a 	srai	r19,r2,1
    8afc:	3485883a 	add	r2,r6,r18
    8b00:	980d883a 	mov	r6,r19
    8b04:	9880022e 	bgeu	r19,r2,8b10 <__sfvwrite_r+0x3f0>
    8b08:	1027883a 	mov	r19,r2
    8b0c:	100d883a 	mov	r6,r2
    8b10:	2101000c 	andi	r4,r4,1024
    8b14:	20001c26 	beq	r4,zero,8b88 <__sfvwrite_r+0x468>
    8b18:	a009883a 	mov	r4,r20
    8b1c:	300b883a 	mov	r5,r6
    8b20:	000511c0 	call	511c <_malloc_r>
    8b24:	102d883a 	mov	r22,r2
    8b28:	10002926 	beq	r2,zero,8bd0 <__sfvwrite_r+0x4b0>
    8b2c:	81400417 	ldw	r5,16(r16)
    8b30:	1009883a 	mov	r4,r2
    8b34:	a80d883a 	mov	r6,r21
    8b38:	00059ac0 	call	59ac <memcpy>
    8b3c:	8080030b 	ldhu	r2,12(r16)
    8b40:	00fedfc4 	movi	r3,-1153
    8b44:	10c4703a 	and	r2,r2,r3
    8b48:	10802014 	ori	r2,r2,128
    8b4c:	8080030d 	sth	r2,12(r16)
    8b50:	b549883a 	add	r4,r22,r21
    8b54:	9d4bc83a 	sub	r5,r19,r21
    8b58:	85800415 	stw	r22,16(r16)
    8b5c:	84c00515 	stw	r19,20(r16)
    8b60:	81000015 	stw	r4,0(r16)
    8b64:	902d883a 	mov	r22,r18
    8b68:	81400215 	stw	r5,8(r16)
    8b6c:	9027883a 	mov	r19,r18
    8b70:	003f3a06 	br	885c <__alt_mem_Flash_flash_data+0xf400885c>
    8b74:	a009883a 	mov	r4,r20
    8b78:	800b883a 	mov	r5,r16
    8b7c:	00044bc0 	call	44bc <_fflush_r>
    8b80:	103fb926 	beq	r2,zero,8a68 <__alt_mem_Flash_flash_data+0xf4008a68>
    8b84:	003f5f06 	br	8904 <__alt_mem_Flash_flash_data+0xf4008904>
    8b88:	a009883a 	mov	r4,r20
    8b8c:	0008e480 	call	8e48 <_realloc_r>
    8b90:	102d883a 	mov	r22,r2
    8b94:	103fee1e 	bne	r2,zero,8b50 <__alt_mem_Flash_flash_data+0xf4008b50>
    8b98:	81400417 	ldw	r5,16(r16)
    8b9c:	a009883a 	mov	r4,r20
    8ba0:	0004a0c0 	call	4a0c <_free_r>
    8ba4:	8080030b 	ldhu	r2,12(r16)
    8ba8:	00ffdfc4 	movi	r3,-129
    8bac:	1884703a 	and	r2,r3,r2
    8bb0:	00c00304 	movi	r3,12
    8bb4:	a0c00015 	stw	r3,0(r20)
    8bb8:	003f5306 	br	8908 <__alt_mem_Flash_flash_data+0xf4008908>
    8bbc:	94c00044 	addi	r19,r18,1
    8bc0:	02000044 	movi	r8,1
    8bc4:	003f5a06 	br	8930 <__alt_mem_Flash_flash_data+0xf4008930>
    8bc8:	00bfffc4 	movi	r2,-1
    8bcc:	003f0206 	br	87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    8bd0:	00800304 	movi	r2,12
    8bd4:	a0800015 	stw	r2,0(r20)
    8bd8:	8080030b 	ldhu	r2,12(r16)
    8bdc:	003f4a06 	br	8908 <__alt_mem_Flash_flash_data+0xf4008908>

00008be0 <_isatty_r>:
    8be0:	defffd04 	addi	sp,sp,-12
    8be4:	dc000015 	stw	r16,0(sp)
    8be8:	040000b4 	movhi	r16,2
    8bec:	dc400115 	stw	r17,4(sp)
    8bf0:	84388004 	addi	r16,r16,-7680
    8bf4:	2023883a 	mov	r17,r4
    8bf8:	2809883a 	mov	r4,r5
    8bfc:	dfc00215 	stw	ra,8(sp)
    8c00:	80000015 	stw	zero,0(r16)
    8c04:	000cc040 	call	cc04 <isatty>
    8c08:	00ffffc4 	movi	r3,-1
    8c0c:	10c00526 	beq	r2,r3,8c24 <_isatty_r+0x44>
    8c10:	dfc00217 	ldw	ra,8(sp)
    8c14:	dc400117 	ldw	r17,4(sp)
    8c18:	dc000017 	ldw	r16,0(sp)
    8c1c:	dec00304 	addi	sp,sp,12
    8c20:	f800283a 	ret
    8c24:	80c00017 	ldw	r3,0(r16)
    8c28:	183ff926 	beq	r3,zero,8c10 <__alt_mem_Flash_flash_data+0xf4008c10>
    8c2c:	88c00015 	stw	r3,0(r17)
    8c30:	003ff706 	br	8c10 <__alt_mem_Flash_flash_data+0xf4008c10>

00008c34 <_lseek_r>:
    8c34:	defffd04 	addi	sp,sp,-12
    8c38:	dc000015 	stw	r16,0(sp)
    8c3c:	040000b4 	movhi	r16,2
    8c40:	dc400115 	stw	r17,4(sp)
    8c44:	84388004 	addi	r16,r16,-7680
    8c48:	2023883a 	mov	r17,r4
    8c4c:	2809883a 	mov	r4,r5
    8c50:	300b883a 	mov	r5,r6
    8c54:	380d883a 	mov	r6,r7
    8c58:	dfc00215 	stw	ra,8(sp)
    8c5c:	80000015 	stw	zero,0(r16)
    8c60:	000cddc0 	call	cddc <lseek>
    8c64:	00ffffc4 	movi	r3,-1
    8c68:	10c00526 	beq	r2,r3,8c80 <_lseek_r+0x4c>
    8c6c:	dfc00217 	ldw	ra,8(sp)
    8c70:	dc400117 	ldw	r17,4(sp)
    8c74:	dc000017 	ldw	r16,0(sp)
    8c78:	dec00304 	addi	sp,sp,12
    8c7c:	f800283a 	ret
    8c80:	80c00017 	ldw	r3,0(r16)
    8c84:	183ff926 	beq	r3,zero,8c6c <__alt_mem_Flash_flash_data+0xf4008c6c>
    8c88:	88c00015 	stw	r3,0(r17)
    8c8c:	003ff706 	br	8c6c <__alt_mem_Flash_flash_data+0xf4008c6c>

00008c90 <memmove>:
    8c90:	2005883a 	mov	r2,r4
    8c94:	29000b2e 	bgeu	r5,r4,8cc4 <memmove+0x34>
    8c98:	298f883a 	add	r7,r5,r6
    8c9c:	21c0092e 	bgeu	r4,r7,8cc4 <memmove+0x34>
    8ca0:	2187883a 	add	r3,r4,r6
    8ca4:	198bc83a 	sub	r5,r3,r6
    8ca8:	30004b26 	beq	r6,zero,8dd8 <memmove+0x148>
    8cac:	39ffffc4 	addi	r7,r7,-1
    8cb0:	39000003 	ldbu	r4,0(r7)
    8cb4:	18ffffc4 	addi	r3,r3,-1
    8cb8:	19000005 	stb	r4,0(r3)
    8cbc:	197ffb1e 	bne	r3,r5,8cac <__alt_mem_Flash_flash_data+0xf4008cac>
    8cc0:	f800283a 	ret
    8cc4:	00c003c4 	movi	r3,15
    8cc8:	1980412e 	bgeu	r3,r6,8dd0 <memmove+0x140>
    8ccc:	1146b03a 	or	r3,r2,r5
    8cd0:	18c000cc 	andi	r3,r3,3
    8cd4:	1800411e 	bne	r3,zero,8ddc <memmove+0x14c>
    8cd8:	33fffc04 	addi	r15,r6,-16
    8cdc:	781ed13a 	srli	r15,r15,4
    8ce0:	28c00104 	addi	r3,r5,4
    8ce4:	13400104 	addi	r13,r2,4
    8ce8:	781c913a 	slli	r14,r15,4
    8cec:	2b000204 	addi	r12,r5,8
    8cf0:	12c00204 	addi	r11,r2,8
    8cf4:	73800504 	addi	r14,r14,20
    8cf8:	2a800304 	addi	r10,r5,12
    8cfc:	12400304 	addi	r9,r2,12
    8d00:	2b9d883a 	add	r14,r5,r14
    8d04:	2811883a 	mov	r8,r5
    8d08:	100f883a 	mov	r7,r2
    8d0c:	41000017 	ldw	r4,0(r8)
    8d10:	39c00404 	addi	r7,r7,16
    8d14:	18c00404 	addi	r3,r3,16
    8d18:	393ffc15 	stw	r4,-16(r7)
    8d1c:	193ffc17 	ldw	r4,-16(r3)
    8d20:	6b400404 	addi	r13,r13,16
    8d24:	5ac00404 	addi	r11,r11,16
    8d28:	693ffc15 	stw	r4,-16(r13)
    8d2c:	61000017 	ldw	r4,0(r12)
    8d30:	4a400404 	addi	r9,r9,16
    8d34:	42000404 	addi	r8,r8,16
    8d38:	593ffc15 	stw	r4,-16(r11)
    8d3c:	51000017 	ldw	r4,0(r10)
    8d40:	63000404 	addi	r12,r12,16
    8d44:	52800404 	addi	r10,r10,16
    8d48:	493ffc15 	stw	r4,-16(r9)
    8d4c:	1bbfef1e 	bne	r3,r14,8d0c <__alt_mem_Flash_flash_data+0xf4008d0c>
    8d50:	79000044 	addi	r4,r15,1
    8d54:	2008913a 	slli	r4,r4,4
    8d58:	328003cc 	andi	r10,r6,15
    8d5c:	02c000c4 	movi	r11,3
    8d60:	1107883a 	add	r3,r2,r4
    8d64:	290b883a 	add	r5,r5,r4
    8d68:	5a801e2e 	bgeu	r11,r10,8de4 <memmove+0x154>
    8d6c:	1813883a 	mov	r9,r3
    8d70:	2811883a 	mov	r8,r5
    8d74:	500f883a 	mov	r7,r10
    8d78:	41000017 	ldw	r4,0(r8)
    8d7c:	4a400104 	addi	r9,r9,4
    8d80:	39ffff04 	addi	r7,r7,-4
    8d84:	493fff15 	stw	r4,-4(r9)
    8d88:	42000104 	addi	r8,r8,4
    8d8c:	59fffa36 	bltu	r11,r7,8d78 <__alt_mem_Flash_flash_data+0xf4008d78>
    8d90:	513fff04 	addi	r4,r10,-4
    8d94:	2008d0ba 	srli	r4,r4,2
    8d98:	318000cc 	andi	r6,r6,3
    8d9c:	21000044 	addi	r4,r4,1
    8da0:	2109883a 	add	r4,r4,r4
    8da4:	2109883a 	add	r4,r4,r4
    8da8:	1907883a 	add	r3,r3,r4
    8dac:	290b883a 	add	r5,r5,r4
    8db0:	30000926 	beq	r6,zero,8dd8 <memmove+0x148>
    8db4:	198d883a 	add	r6,r3,r6
    8db8:	29c00003 	ldbu	r7,0(r5)
    8dbc:	18c00044 	addi	r3,r3,1
    8dc0:	29400044 	addi	r5,r5,1
    8dc4:	19ffffc5 	stb	r7,-1(r3)
    8dc8:	19bffb1e 	bne	r3,r6,8db8 <__alt_mem_Flash_flash_data+0xf4008db8>
    8dcc:	f800283a 	ret
    8dd0:	1007883a 	mov	r3,r2
    8dd4:	003ff606 	br	8db0 <__alt_mem_Flash_flash_data+0xf4008db0>
    8dd8:	f800283a 	ret
    8ddc:	1007883a 	mov	r3,r2
    8de0:	003ff406 	br	8db4 <__alt_mem_Flash_flash_data+0xf4008db4>
    8de4:	500d883a 	mov	r6,r10
    8de8:	003ff106 	br	8db0 <__alt_mem_Flash_flash_data+0xf4008db0>

00008dec <_read_r>:
    8dec:	defffd04 	addi	sp,sp,-12
    8df0:	dc000015 	stw	r16,0(sp)
    8df4:	040000b4 	movhi	r16,2
    8df8:	dc400115 	stw	r17,4(sp)
    8dfc:	84388004 	addi	r16,r16,-7680
    8e00:	2023883a 	mov	r17,r4
    8e04:	2809883a 	mov	r4,r5
    8e08:	300b883a 	mov	r5,r6
    8e0c:	380d883a 	mov	r6,r7
    8e10:	dfc00215 	stw	ra,8(sp)
    8e14:	80000015 	stw	zero,0(r16)
    8e18:	000cfd40 	call	cfd4 <read>
    8e1c:	00ffffc4 	movi	r3,-1
    8e20:	10c00526 	beq	r2,r3,8e38 <_read_r+0x4c>
    8e24:	dfc00217 	ldw	ra,8(sp)
    8e28:	dc400117 	ldw	r17,4(sp)
    8e2c:	dc000017 	ldw	r16,0(sp)
    8e30:	dec00304 	addi	sp,sp,12
    8e34:	f800283a 	ret
    8e38:	80c00017 	ldw	r3,0(r16)
    8e3c:	183ff926 	beq	r3,zero,8e24 <__alt_mem_Flash_flash_data+0xf4008e24>
    8e40:	88c00015 	stw	r3,0(r17)
    8e44:	003ff706 	br	8e24 <__alt_mem_Flash_flash_data+0xf4008e24>

00008e48 <_realloc_r>:
    8e48:	defff604 	addi	sp,sp,-40
    8e4c:	dd000415 	stw	r20,16(sp)
    8e50:	dc400115 	stw	r17,4(sp)
    8e54:	dfc00915 	stw	ra,36(sp)
    8e58:	df000815 	stw	fp,32(sp)
    8e5c:	ddc00715 	stw	r23,28(sp)
    8e60:	dd800615 	stw	r22,24(sp)
    8e64:	dd400515 	stw	r21,20(sp)
    8e68:	dcc00315 	stw	r19,12(sp)
    8e6c:	dc800215 	stw	r18,8(sp)
    8e70:	dc000015 	stw	r16,0(sp)
    8e74:	2829883a 	mov	r20,r5
    8e78:	3023883a 	mov	r17,r6
    8e7c:	2800ad26 	beq	r5,zero,9134 <_realloc_r+0x2ec>
    8e80:	2025883a 	mov	r18,r4
    8e84:	000d4440 	call	d444 <__malloc_lock>
    8e88:	a0ffff17 	ldw	r3,-4(r20)
    8e8c:	043fff04 	movi	r16,-4
    8e90:	890002c4 	addi	r4,r17,11
    8e94:	01c00584 	movi	r7,22
    8e98:	a57ffe04 	addi	r21,r20,-8
    8e9c:	1c20703a 	and	r16,r3,r16
    8ea0:	39001d2e 	bgeu	r7,r4,8f18 <_realloc_r+0xd0>
    8ea4:	05bffe04 	movi	r22,-8
    8ea8:	25ac703a 	and	r22,r4,r22
    8eac:	b00f883a 	mov	r7,r22
    8eb0:	b0006516 	blt	r22,zero,9048 <_realloc_r+0x200>
    8eb4:	b4406436 	bltu	r22,r17,9048 <_realloc_r+0x200>
    8eb8:	81c01a0e 	bge	r16,r7,8f24 <_realloc_r+0xdc>
    8ebc:	070000b4 	movhi	fp,2
    8ec0:	e728b704 	addi	fp,fp,-23844
    8ec4:	e1400217 	ldw	r5,8(fp)
    8ec8:	ac11883a 	add	r8,r21,r16
    8ecc:	2a006226 	beq	r5,r8,9058 <_realloc_r+0x210>
    8ed0:	41800117 	ldw	r6,4(r8)
    8ed4:	027fff84 	movi	r9,-2
    8ed8:	3252703a 	and	r9,r6,r9
    8edc:	4253883a 	add	r9,r8,r9
    8ee0:	49000117 	ldw	r4,4(r9)
    8ee4:	2100004c 	andi	r4,r4,1
    8ee8:	2000281e 	bne	r4,zero,8f8c <_realloc_r+0x144>
    8eec:	00bfff04 	movi	r2,-4
    8ef0:	3084703a 	and	r2,r6,r2
    8ef4:	1409883a 	add	r4,r2,r16
    8ef8:	21c05e16 	blt	r4,r7,9074 <_realloc_r+0x22c>
    8efc:	40800317 	ldw	r2,12(r8)
    8f00:	41400217 	ldw	r5,8(r8)
    8f04:	a023883a 	mov	r17,r20
    8f08:	2021883a 	mov	r16,r4
    8f0c:	28800315 	stw	r2,12(r5)
    8f10:	11400215 	stw	r5,8(r2)
    8f14:	00000406 	br	8f28 <_realloc_r+0xe0>
    8f18:	01c00404 	movi	r7,16
    8f1c:	382d883a 	mov	r22,r7
    8f20:	003fe406 	br	8eb4 <__alt_mem_Flash_flash_data+0xf4008eb4>
    8f24:	a023883a 	mov	r17,r20
    8f28:	858fc83a 	sub	r7,r16,r22
    8f2c:	008003c4 	movi	r2,15
    8f30:	18c0004c 	andi	r3,r3,1
    8f34:	11c07236 	bltu	r2,r7,9100 <_realloc_r+0x2b8>
    8f38:	1c06b03a 	or	r3,r3,r16
    8f3c:	a8c00115 	stw	r3,4(r21)
    8f40:	ac21883a 	add	r16,r21,r16
    8f44:	80800117 	ldw	r2,4(r16)
    8f48:	10800054 	ori	r2,r2,1
    8f4c:	80800115 	stw	r2,4(r16)
    8f50:	9009883a 	mov	r4,r18
    8f54:	000d5640 	call	d564 <__malloc_unlock>
    8f58:	8805883a 	mov	r2,r17
    8f5c:	dfc00917 	ldw	ra,36(sp)
    8f60:	df000817 	ldw	fp,32(sp)
    8f64:	ddc00717 	ldw	r23,28(sp)
    8f68:	dd800617 	ldw	r22,24(sp)
    8f6c:	dd400517 	ldw	r21,20(sp)
    8f70:	dd000417 	ldw	r20,16(sp)
    8f74:	dcc00317 	ldw	r19,12(sp)
    8f78:	dc800217 	ldw	r18,8(sp)
    8f7c:	dc400117 	ldw	r17,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00a04 	addi	sp,sp,40
    8f88:	f800283a 	ret
    8f8c:	18c0004c 	andi	r3,r3,1
    8f90:	1800081e 	bne	r3,zero,8fb4 <_realloc_r+0x16c>
    8f94:	a4fffe17 	ldw	r19,-8(r20)
    8f98:	00bfff04 	movi	r2,-4
    8f9c:	ace7c83a 	sub	r19,r21,r19
    8fa0:	98c00117 	ldw	r3,4(r19)
    8fa4:	1886703a 	and	r3,r3,r2
    8fa8:	98000226 	beq	r19,zero,8fb4 <_realloc_r+0x16c>
    8fac:	1c2f883a 	add	r23,r3,r16
    8fb0:	b9c06d0e 	bge	r23,r7,9168 <_realloc_r+0x320>
    8fb4:	880b883a 	mov	r5,r17
    8fb8:	9009883a 	mov	r4,r18
    8fbc:	000511c0 	call	511c <_malloc_r>
    8fc0:	1023883a 	mov	r17,r2
    8fc4:	1000ef26 	beq	r2,zero,9384 <_realloc_r+0x53c>
    8fc8:	a0ffff17 	ldw	r3,-4(r20)
    8fcc:	113ffe04 	addi	r4,r2,-8
    8fd0:	00bfff84 	movi	r2,-2
    8fd4:	1884703a 	and	r2,r3,r2
    8fd8:	a885883a 	add	r2,r21,r2
    8fdc:	2080bf26 	beq	r4,r2,92dc <_realloc_r+0x494>
    8fe0:	81bfff04 	addi	r6,r16,-4
    8fe4:	00800904 	movi	r2,36
    8fe8:	11808936 	bltu	r2,r6,9210 <_realloc_r+0x3c8>
    8fec:	00c004c4 	movi	r3,19
    8ff0:	19806c2e 	bgeu	r3,r6,91a4 <_realloc_r+0x35c>
    8ff4:	a0c00017 	ldw	r3,0(r20)
    8ff8:	88c00015 	stw	r3,0(r17)
    8ffc:	a0c00117 	ldw	r3,4(r20)
    9000:	88c00115 	stw	r3,4(r17)
    9004:	00c006c4 	movi	r3,27
    9008:	1980ac36 	bltu	r3,r6,92bc <_realloc_r+0x474>
    900c:	88800204 	addi	r2,r17,8
    9010:	a0c00204 	addi	r3,r20,8
    9014:	19000017 	ldw	r4,0(r3)
    9018:	11000015 	stw	r4,0(r2)
    901c:	19000117 	ldw	r4,4(r3)
    9020:	11000115 	stw	r4,4(r2)
    9024:	18c00217 	ldw	r3,8(r3)
    9028:	10c00215 	stw	r3,8(r2)
    902c:	a00b883a 	mov	r5,r20
    9030:	9009883a 	mov	r4,r18
    9034:	0004a0c0 	call	4a0c <_free_r>
    9038:	9009883a 	mov	r4,r18
    903c:	000d5640 	call	d564 <__malloc_unlock>
    9040:	8805883a 	mov	r2,r17
    9044:	003fc506 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    9048:	00800304 	movi	r2,12
    904c:	90800015 	stw	r2,0(r18)
    9050:	0005883a 	mov	r2,zero
    9054:	003fc106 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    9058:	29800117 	ldw	r6,4(r5)
    905c:	00bfff04 	movi	r2,-4
    9060:	b1000404 	addi	r4,r22,16
    9064:	3084703a 	and	r2,r6,r2
    9068:	140d883a 	add	r6,r2,r16
    906c:	31005b0e 	bge	r6,r4,91dc <_realloc_r+0x394>
    9070:	2811883a 	mov	r8,r5
    9074:	18c0004c 	andi	r3,r3,1
    9078:	183fce1e 	bne	r3,zero,8fb4 <__alt_mem_Flash_flash_data+0xf4008fb4>
    907c:	a4fffe17 	ldw	r19,-8(r20)
    9080:	00ffff04 	movi	r3,-4
    9084:	ace7c83a 	sub	r19,r21,r19
    9088:	99000117 	ldw	r4,4(r19)
    908c:	20c6703a 	and	r3,r4,r3
    9090:	403fc526 	beq	r8,zero,8fa8 <__alt_mem_Flash_flash_data+0xf4008fa8>
    9094:	1c2f883a 	add	r23,r3,r16
    9098:	b8af883a 	add	r23,r23,r2
    909c:	41406026 	beq	r8,r5,9220 <_realloc_r+0x3d8>
    90a0:	b9ffc116 	blt	r23,r7,8fa8 <__alt_mem_Flash_flash_data+0xf4008fa8>
    90a4:	40c00217 	ldw	r3,8(r8)
    90a8:	40800317 	ldw	r2,12(r8)
    90ac:	81bfff04 	addi	r6,r16,-4
    90b0:	01000904 	movi	r4,36
    90b4:	18800315 	stw	r2,12(r3)
    90b8:	10c00215 	stw	r3,8(r2)
    90bc:	99400217 	ldw	r5,8(r19)
    90c0:	98c00317 	ldw	r3,12(r19)
    90c4:	9c400204 	addi	r17,r19,8
    90c8:	28c00315 	stw	r3,12(r5)
    90cc:	19400215 	stw	r5,8(r3)
    90d0:	21802d36 	bltu	r4,r6,9188 <_realloc_r+0x340>
    90d4:	008004c4 	movi	r2,19
    90d8:	1180352e 	bgeu	r2,r6,91b0 <_realloc_r+0x368>
    90dc:	a0800017 	ldw	r2,0(r20)
    90e0:	98800215 	stw	r2,8(r19)
    90e4:	a0800117 	ldw	r2,4(r20)
    90e8:	98800315 	stw	r2,12(r19)
    90ec:	008006c4 	movi	r2,27
    90f0:	11808036 	bltu	r2,r6,92f4 <_realloc_r+0x4ac>
    90f4:	98c00404 	addi	r3,r19,16
    90f8:	a5000204 	addi	r20,r20,8
    90fc:	00002d06 	br	91b4 <_realloc_r+0x36c>
    9100:	1d86b03a 	or	r3,r3,r22
    9104:	ad8b883a 	add	r5,r21,r22
    9108:	a8c00115 	stw	r3,4(r21)
    910c:	38800054 	ori	r2,r7,1
    9110:	28800115 	stw	r2,4(r5)
    9114:	29cf883a 	add	r7,r5,r7
    9118:	38800117 	ldw	r2,4(r7)
    911c:	9009883a 	mov	r4,r18
    9120:	29400204 	addi	r5,r5,8
    9124:	10800054 	ori	r2,r2,1
    9128:	38800115 	stw	r2,4(r7)
    912c:	0004a0c0 	call	4a0c <_free_r>
    9130:	003f8706 	br	8f50 <__alt_mem_Flash_flash_data+0xf4008f50>
    9134:	300b883a 	mov	r5,r6
    9138:	dfc00917 	ldw	ra,36(sp)
    913c:	df000817 	ldw	fp,32(sp)
    9140:	ddc00717 	ldw	r23,28(sp)
    9144:	dd800617 	ldw	r22,24(sp)
    9148:	dd400517 	ldw	r21,20(sp)
    914c:	dd000417 	ldw	r20,16(sp)
    9150:	dcc00317 	ldw	r19,12(sp)
    9154:	dc800217 	ldw	r18,8(sp)
    9158:	dc400117 	ldw	r17,4(sp)
    915c:	dc000017 	ldw	r16,0(sp)
    9160:	dec00a04 	addi	sp,sp,40
    9164:	000511c1 	jmpi	511c <_malloc_r>
    9168:	98800317 	ldw	r2,12(r19)
    916c:	98c00217 	ldw	r3,8(r19)
    9170:	81bfff04 	addi	r6,r16,-4
    9174:	01000904 	movi	r4,36
    9178:	18800315 	stw	r2,12(r3)
    917c:	10c00215 	stw	r3,8(r2)
    9180:	9c400204 	addi	r17,r19,8
    9184:	21bfd32e 	bgeu	r4,r6,90d4 <__alt_mem_Flash_flash_data+0xf40090d4>
    9188:	8809883a 	mov	r4,r17
    918c:	a00b883a 	mov	r5,r20
    9190:	0008c900 	call	8c90 <memmove>
    9194:	98c00117 	ldw	r3,4(r19)
    9198:	b821883a 	mov	r16,r23
    919c:	982b883a 	mov	r21,r19
    91a0:	003f6106 	br	8f28 <__alt_mem_Flash_flash_data+0xf4008f28>
    91a4:	8805883a 	mov	r2,r17
    91a8:	a007883a 	mov	r3,r20
    91ac:	003f9906 	br	9014 <__alt_mem_Flash_flash_data+0xf4009014>
    91b0:	8807883a 	mov	r3,r17
    91b4:	a0800017 	ldw	r2,0(r20)
    91b8:	b821883a 	mov	r16,r23
    91bc:	982b883a 	mov	r21,r19
    91c0:	18800015 	stw	r2,0(r3)
    91c4:	a0800117 	ldw	r2,4(r20)
    91c8:	18800115 	stw	r2,4(r3)
    91cc:	a0800217 	ldw	r2,8(r20)
    91d0:	18800215 	stw	r2,8(r3)
    91d4:	98c00117 	ldw	r3,4(r19)
    91d8:	003f5306 	br	8f28 <__alt_mem_Flash_flash_data+0xf4008f28>
    91dc:	adab883a 	add	r21,r21,r22
    91e0:	3585c83a 	sub	r2,r6,r22
    91e4:	e5400215 	stw	r21,8(fp)
    91e8:	10800054 	ori	r2,r2,1
    91ec:	a8800115 	stw	r2,4(r21)
    91f0:	a0bfff17 	ldw	r2,-4(r20)
    91f4:	9009883a 	mov	r4,r18
    91f8:	1080004c 	andi	r2,r2,1
    91fc:	b0acb03a 	or	r22,r22,r2
    9200:	a5bfff15 	stw	r22,-4(r20)
    9204:	000d5640 	call	d564 <__malloc_unlock>
    9208:	a005883a 	mov	r2,r20
    920c:	003f5306 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    9210:	8809883a 	mov	r4,r17
    9214:	a00b883a 	mov	r5,r20
    9218:	0008c900 	call	8c90 <memmove>
    921c:	003f8306 	br	902c <__alt_mem_Flash_flash_data+0xf400902c>
    9220:	b0800404 	addi	r2,r22,16
    9224:	b8bf6016 	blt	r23,r2,8fa8 <__alt_mem_Flash_flash_data+0xf4008fa8>
    9228:	98800317 	ldw	r2,12(r19)
    922c:	98c00217 	ldw	r3,8(r19)
    9230:	81bfff04 	addi	r6,r16,-4
    9234:	01000904 	movi	r4,36
    9238:	18800315 	stw	r2,12(r3)
    923c:	10c00215 	stw	r3,8(r2)
    9240:	9c400204 	addi	r17,r19,8
    9244:	21804336 	bltu	r4,r6,9354 <_realloc_r+0x50c>
    9248:	008004c4 	movi	r2,19
    924c:	11803f2e 	bgeu	r2,r6,934c <_realloc_r+0x504>
    9250:	a0800017 	ldw	r2,0(r20)
    9254:	98800215 	stw	r2,8(r19)
    9258:	a0800117 	ldw	r2,4(r20)
    925c:	98800315 	stw	r2,12(r19)
    9260:	008006c4 	movi	r2,27
    9264:	11803f36 	bltu	r2,r6,9364 <_realloc_r+0x51c>
    9268:	98800404 	addi	r2,r19,16
    926c:	a5000204 	addi	r20,r20,8
    9270:	a0c00017 	ldw	r3,0(r20)
    9274:	10c00015 	stw	r3,0(r2)
    9278:	a0c00117 	ldw	r3,4(r20)
    927c:	10c00115 	stw	r3,4(r2)
    9280:	a0c00217 	ldw	r3,8(r20)
    9284:	10c00215 	stw	r3,8(r2)
    9288:	9d87883a 	add	r3,r19,r22
    928c:	bd85c83a 	sub	r2,r23,r22
    9290:	e0c00215 	stw	r3,8(fp)
    9294:	10800054 	ori	r2,r2,1
    9298:	18800115 	stw	r2,4(r3)
    929c:	98800117 	ldw	r2,4(r19)
    92a0:	9009883a 	mov	r4,r18
    92a4:	1080004c 	andi	r2,r2,1
    92a8:	b0acb03a 	or	r22,r22,r2
    92ac:	9d800115 	stw	r22,4(r19)
    92b0:	000d5640 	call	d564 <__malloc_unlock>
    92b4:	8805883a 	mov	r2,r17
    92b8:	003f2806 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    92bc:	a0c00217 	ldw	r3,8(r20)
    92c0:	88c00215 	stw	r3,8(r17)
    92c4:	a0c00317 	ldw	r3,12(r20)
    92c8:	88c00315 	stw	r3,12(r17)
    92cc:	30801126 	beq	r6,r2,9314 <_realloc_r+0x4cc>
    92d0:	88800404 	addi	r2,r17,16
    92d4:	a0c00404 	addi	r3,r20,16
    92d8:	003f4e06 	br	9014 <__alt_mem_Flash_flash_data+0xf4009014>
    92dc:	893fff17 	ldw	r4,-4(r17)
    92e0:	00bfff04 	movi	r2,-4
    92e4:	a023883a 	mov	r17,r20
    92e8:	2084703a 	and	r2,r4,r2
    92ec:	80a1883a 	add	r16,r16,r2
    92f0:	003f0d06 	br	8f28 <__alt_mem_Flash_flash_data+0xf4008f28>
    92f4:	a0800217 	ldw	r2,8(r20)
    92f8:	98800415 	stw	r2,16(r19)
    92fc:	a0800317 	ldw	r2,12(r20)
    9300:	98800515 	stw	r2,20(r19)
    9304:	31000a26 	beq	r6,r4,9330 <_realloc_r+0x4e8>
    9308:	98c00604 	addi	r3,r19,24
    930c:	a5000404 	addi	r20,r20,16
    9310:	003fa806 	br	91b4 <__alt_mem_Flash_flash_data+0xf40091b4>
    9314:	a1000417 	ldw	r4,16(r20)
    9318:	88800604 	addi	r2,r17,24
    931c:	a0c00604 	addi	r3,r20,24
    9320:	89000415 	stw	r4,16(r17)
    9324:	a1000517 	ldw	r4,20(r20)
    9328:	89000515 	stw	r4,20(r17)
    932c:	003f3906 	br	9014 <__alt_mem_Flash_flash_data+0xf4009014>
    9330:	a0800417 	ldw	r2,16(r20)
    9334:	a5000604 	addi	r20,r20,24
    9338:	98c00804 	addi	r3,r19,32
    933c:	98800615 	stw	r2,24(r19)
    9340:	a0bfff17 	ldw	r2,-4(r20)
    9344:	98800715 	stw	r2,28(r19)
    9348:	003f9a06 	br	91b4 <__alt_mem_Flash_flash_data+0xf40091b4>
    934c:	8805883a 	mov	r2,r17
    9350:	003fc706 	br	9270 <__alt_mem_Flash_flash_data+0xf4009270>
    9354:	8809883a 	mov	r4,r17
    9358:	a00b883a 	mov	r5,r20
    935c:	0008c900 	call	8c90 <memmove>
    9360:	003fc906 	br	9288 <__alt_mem_Flash_flash_data+0xf4009288>
    9364:	a0800217 	ldw	r2,8(r20)
    9368:	98800415 	stw	r2,16(r19)
    936c:	a0800317 	ldw	r2,12(r20)
    9370:	98800515 	stw	r2,20(r19)
    9374:	31000726 	beq	r6,r4,9394 <_realloc_r+0x54c>
    9378:	98800604 	addi	r2,r19,24
    937c:	a5000404 	addi	r20,r20,16
    9380:	003fbb06 	br	9270 <__alt_mem_Flash_flash_data+0xf4009270>
    9384:	9009883a 	mov	r4,r18
    9388:	000d5640 	call	d564 <__malloc_unlock>
    938c:	0005883a 	mov	r2,zero
    9390:	003ef206 	br	8f5c <__alt_mem_Flash_flash_data+0xf4008f5c>
    9394:	a0c00417 	ldw	r3,16(r20)
    9398:	a5000604 	addi	r20,r20,24
    939c:	98800804 	addi	r2,r19,32
    93a0:	98c00615 	stw	r3,24(r19)
    93a4:	a0ffff17 	ldw	r3,-4(r20)
    93a8:	98c00715 	stw	r3,28(r19)
    93ac:	003fb006 	br	9270 <__alt_mem_Flash_flash_data+0xf4009270>

000093b0 <__swbuf_r>:
    93b0:	defffc04 	addi	sp,sp,-16
    93b4:	dc800215 	stw	r18,8(sp)
    93b8:	dc400115 	stw	r17,4(sp)
    93bc:	dc000015 	stw	r16,0(sp)
    93c0:	dfc00315 	stw	ra,12(sp)
    93c4:	2025883a 	mov	r18,r4
    93c8:	2823883a 	mov	r17,r5
    93cc:	3021883a 	mov	r16,r6
    93d0:	20000226 	beq	r4,zero,93dc <__swbuf_r+0x2c>
    93d4:	20800e17 	ldw	r2,56(r4)
    93d8:	10004126 	beq	r2,zero,94e0 <__swbuf_r+0x130>
    93dc:	80c00617 	ldw	r3,24(r16)
    93e0:	8180030b 	ldhu	r6,12(r16)
    93e4:	80c00215 	stw	r3,8(r16)
    93e8:	30c0020c 	andi	r3,r6,8
    93ec:	18003526 	beq	r3,zero,94c4 <__swbuf_r+0x114>
    93f0:	80c00417 	ldw	r3,16(r16)
    93f4:	18003326 	beq	r3,zero,94c4 <__swbuf_r+0x114>
    93f8:	3088000c 	andi	r2,r6,8192
    93fc:	8c403fcc 	andi	r17,r17,255
    9400:	10001726 	beq	r2,zero,9460 <__swbuf_r+0xb0>
    9404:	80800017 	ldw	r2,0(r16)
    9408:	81000517 	ldw	r4,20(r16)
    940c:	10c7c83a 	sub	r3,r2,r3
    9410:	19001d0e 	bge	r3,r4,9488 <__swbuf_r+0xd8>
    9414:	18c00044 	addi	r3,r3,1
    9418:	81400217 	ldw	r5,8(r16)
    941c:	11000044 	addi	r4,r2,1
    9420:	81000015 	stw	r4,0(r16)
    9424:	297fffc4 	addi	r5,r5,-1
    9428:	81400215 	stw	r5,8(r16)
    942c:	14400005 	stb	r17,0(r2)
    9430:	80800517 	ldw	r2,20(r16)
    9434:	10c01d26 	beq	r2,r3,94ac <__swbuf_r+0xfc>
    9438:	8080030b 	ldhu	r2,12(r16)
    943c:	1080004c 	andi	r2,r2,1
    9440:	1000181e 	bne	r2,zero,94a4 <__swbuf_r+0xf4>
    9444:	8805883a 	mov	r2,r17
    9448:	dfc00317 	ldw	ra,12(sp)
    944c:	dc800217 	ldw	r18,8(sp)
    9450:	dc400117 	ldw	r17,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00404 	addi	sp,sp,16
    945c:	f800283a 	ret
    9460:	81001917 	ldw	r4,100(r16)
    9464:	00b7ffc4 	movi	r2,-8193
    9468:	31880014 	ori	r6,r6,8192
    946c:	2084703a 	and	r2,r4,r2
    9470:	80801915 	stw	r2,100(r16)
    9474:	80800017 	ldw	r2,0(r16)
    9478:	81000517 	ldw	r4,20(r16)
    947c:	8180030d 	sth	r6,12(r16)
    9480:	10c7c83a 	sub	r3,r2,r3
    9484:	193fe316 	blt	r3,r4,9414 <__alt_mem_Flash_flash_data+0xf4009414>
    9488:	9009883a 	mov	r4,r18
    948c:	800b883a 	mov	r5,r16
    9490:	00044bc0 	call	44bc <_fflush_r>
    9494:	1000091e 	bne	r2,zero,94bc <__swbuf_r+0x10c>
    9498:	80800017 	ldw	r2,0(r16)
    949c:	00c00044 	movi	r3,1
    94a0:	003fdd06 	br	9418 <__alt_mem_Flash_flash_data+0xf4009418>
    94a4:	00800284 	movi	r2,10
    94a8:	88bfe61e 	bne	r17,r2,9444 <__alt_mem_Flash_flash_data+0xf4009444>
    94ac:	9009883a 	mov	r4,r18
    94b0:	800b883a 	mov	r5,r16
    94b4:	00044bc0 	call	44bc <_fflush_r>
    94b8:	103fe226 	beq	r2,zero,9444 <__alt_mem_Flash_flash_data+0xf4009444>
    94bc:	00bfffc4 	movi	r2,-1
    94c0:	003fe106 	br	9448 <__alt_mem_Flash_flash_data+0xf4009448>
    94c4:	9009883a 	mov	r4,r18
    94c8:	800b883a 	mov	r5,r16
    94cc:	00028380 	call	2838 <__swsetup_r>
    94d0:	103ffa1e 	bne	r2,zero,94bc <__alt_mem_Flash_flash_data+0xf40094bc>
    94d4:	8180030b 	ldhu	r6,12(r16)
    94d8:	80c00417 	ldw	r3,16(r16)
    94dc:	003fc606 	br	93f8 <__alt_mem_Flash_flash_data+0xf40093f8>
    94e0:	00048980 	call	4898 <__sinit>
    94e4:	003fbd06 	br	93dc <__alt_mem_Flash_flash_data+0xf40093dc>

000094e8 <__swbuf>:
    94e8:	00c000b4 	movhi	r3,2
    94ec:	18efd504 	addi	r3,r3,-16556
    94f0:	2005883a 	mov	r2,r4
    94f4:	19000017 	ldw	r4,0(r3)
    94f8:	280d883a 	mov	r6,r5
    94fc:	100b883a 	mov	r5,r2
    9500:	00093b01 	jmpi	93b0 <__swbuf_r>

00009504 <_wcrtomb_r>:
    9504:	defff604 	addi	sp,sp,-40
    9508:	008000b4 	movhi	r2,2
    950c:	dc800815 	stw	r18,32(sp)
    9510:	dc400715 	stw	r17,28(sp)
    9514:	dc000615 	stw	r16,24(sp)
    9518:	10afd904 	addi	r2,r2,-16540
    951c:	dfc00915 	stw	ra,36(sp)
    9520:	2021883a 	mov	r16,r4
    9524:	3823883a 	mov	r17,r7
    9528:	14800017 	ldw	r18,0(r2)
    952c:	28001426 	beq	r5,zero,9580 <_wcrtomb_r+0x7c>
    9530:	d9400415 	stw	r5,16(sp)
    9534:	d9800515 	stw	r6,20(sp)
    9538:	0004f000 	call	4f00 <__locale_charset>
    953c:	d9400417 	ldw	r5,16(sp)
    9540:	d9800517 	ldw	r6,20(sp)
    9544:	8009883a 	mov	r4,r16
    9548:	dc400015 	stw	r17,0(sp)
    954c:	100f883a 	mov	r7,r2
    9550:	903ee83a 	callr	r18
    9554:	00ffffc4 	movi	r3,-1
    9558:	10c0031e 	bne	r2,r3,9568 <_wcrtomb_r+0x64>
    955c:	88000015 	stw	zero,0(r17)
    9560:	00c02284 	movi	r3,138
    9564:	80c00015 	stw	r3,0(r16)
    9568:	dfc00917 	ldw	ra,36(sp)
    956c:	dc800817 	ldw	r18,32(sp)
    9570:	dc400717 	ldw	r17,28(sp)
    9574:	dc000617 	ldw	r16,24(sp)
    9578:	dec00a04 	addi	sp,sp,40
    957c:	f800283a 	ret
    9580:	0004f000 	call	4f00 <__locale_charset>
    9584:	8009883a 	mov	r4,r16
    9588:	dc400015 	stw	r17,0(sp)
    958c:	d9400104 	addi	r5,sp,4
    9590:	000d883a 	mov	r6,zero
    9594:	100f883a 	mov	r7,r2
    9598:	903ee83a 	callr	r18
    959c:	003fed06 	br	9554 <__alt_mem_Flash_flash_data+0xf4009554>

000095a0 <wcrtomb>:
    95a0:	defff604 	addi	sp,sp,-40
    95a4:	008000b4 	movhi	r2,2
    95a8:	dc800615 	stw	r18,24(sp)
    95ac:	dc400515 	stw	r17,20(sp)
    95b0:	dc000415 	stw	r16,16(sp)
    95b4:	10afd504 	addi	r2,r2,-16556
    95b8:	dfc00915 	stw	ra,36(sp)
    95bc:	dd000815 	stw	r20,32(sp)
    95c0:	dcc00715 	stw	r19,28(sp)
    95c4:	2021883a 	mov	r16,r4
    95c8:	3025883a 	mov	r18,r6
    95cc:	14400017 	ldw	r17,0(r2)
    95d0:	20001826 	beq	r4,zero,9634 <wcrtomb+0x94>
    95d4:	008000b4 	movhi	r2,2
    95d8:	10afd904 	addi	r2,r2,-16540
    95dc:	15000017 	ldw	r20,0(r2)
    95e0:	2827883a 	mov	r19,r5
    95e4:	0004f000 	call	4f00 <__locale_charset>
    95e8:	8809883a 	mov	r4,r17
    95ec:	dc800015 	stw	r18,0(sp)
    95f0:	800b883a 	mov	r5,r16
    95f4:	980d883a 	mov	r6,r19
    95f8:	100f883a 	mov	r7,r2
    95fc:	a03ee83a 	callr	r20
    9600:	00ffffc4 	movi	r3,-1
    9604:	10c0031e 	bne	r2,r3,9614 <wcrtomb+0x74>
    9608:	90000015 	stw	zero,0(r18)
    960c:	00c02284 	movi	r3,138
    9610:	88c00015 	stw	r3,0(r17)
    9614:	dfc00917 	ldw	ra,36(sp)
    9618:	dd000817 	ldw	r20,32(sp)
    961c:	dcc00717 	ldw	r19,28(sp)
    9620:	dc800617 	ldw	r18,24(sp)
    9624:	dc400517 	ldw	r17,20(sp)
    9628:	dc000417 	ldw	r16,16(sp)
    962c:	dec00a04 	addi	sp,sp,40
    9630:	f800283a 	ret
    9634:	008000b4 	movhi	r2,2
    9638:	10afd904 	addi	r2,r2,-16540
    963c:	14000017 	ldw	r16,0(r2)
    9640:	0004f000 	call	4f00 <__locale_charset>
    9644:	8809883a 	mov	r4,r17
    9648:	dc800015 	stw	r18,0(sp)
    964c:	d9400104 	addi	r5,sp,4
    9650:	000d883a 	mov	r6,zero
    9654:	100f883a 	mov	r7,r2
    9658:	803ee83a 	callr	r16
    965c:	003fe806 	br	9600 <__alt_mem_Flash_flash_data+0xf4009600>

00009660 <__ascii_wctomb>:
    9660:	28000526 	beq	r5,zero,9678 <__ascii_wctomb+0x18>
    9664:	00803fc4 	movi	r2,255
    9668:	11800536 	bltu	r2,r6,9680 <__ascii_wctomb+0x20>
    966c:	29800005 	stb	r6,0(r5)
    9670:	00800044 	movi	r2,1
    9674:	f800283a 	ret
    9678:	0005883a 	mov	r2,zero
    967c:	f800283a 	ret
    9680:	00802284 	movi	r2,138
    9684:	20800015 	stw	r2,0(r4)
    9688:	00bfffc4 	movi	r2,-1
    968c:	f800283a 	ret

00009690 <_wctomb_r>:
    9690:	008000b4 	movhi	r2,2
    9694:	defff904 	addi	sp,sp,-28
    9698:	10afd904 	addi	r2,r2,-16540
    969c:	dfc00615 	stw	ra,24(sp)
    96a0:	dc400515 	stw	r17,20(sp)
    96a4:	dc000415 	stw	r16,16(sp)
    96a8:	3823883a 	mov	r17,r7
    96ac:	14000017 	ldw	r16,0(r2)
    96b0:	d9000115 	stw	r4,4(sp)
    96b4:	d9400215 	stw	r5,8(sp)
    96b8:	d9800315 	stw	r6,12(sp)
    96bc:	0004f000 	call	4f00 <__locale_charset>
    96c0:	d9000117 	ldw	r4,4(sp)
    96c4:	d9400217 	ldw	r5,8(sp)
    96c8:	d9800317 	ldw	r6,12(sp)
    96cc:	dc400015 	stw	r17,0(sp)
    96d0:	100f883a 	mov	r7,r2
    96d4:	803ee83a 	callr	r16
    96d8:	dfc00617 	ldw	ra,24(sp)
    96dc:	dc400517 	ldw	r17,20(sp)
    96e0:	dc000417 	ldw	r16,16(sp)
    96e4:	dec00704 	addi	sp,sp,28
    96e8:	f800283a 	ret

000096ec <__udivdi3>:
    96ec:	defff504 	addi	sp,sp,-44
    96f0:	dcc00415 	stw	r19,16(sp)
    96f4:	dc000115 	stw	r16,4(sp)
    96f8:	dfc00a15 	stw	ra,40(sp)
    96fc:	df000915 	stw	fp,36(sp)
    9700:	ddc00815 	stw	r23,32(sp)
    9704:	dd800715 	stw	r22,28(sp)
    9708:	dd400615 	stw	r21,24(sp)
    970c:	dd000515 	stw	r20,20(sp)
    9710:	dc800315 	stw	r18,12(sp)
    9714:	dc400215 	stw	r17,8(sp)
    9718:	2027883a 	mov	r19,r4
    971c:	2821883a 	mov	r16,r5
    9720:	3800421e 	bne	r7,zero,982c <__udivdi3+0x140>
    9724:	3025883a 	mov	r18,r6
    9728:	2023883a 	mov	r17,r4
    972c:	2980542e 	bgeu	r5,r6,9880 <__udivdi3+0x194>
    9730:	00bfffd4 	movui	r2,65535
    9734:	282d883a 	mov	r22,r5
    9738:	1180a836 	bltu	r2,r6,99dc <__udivdi3+0x2f0>
    973c:	00803fc4 	movi	r2,255
    9740:	1181422e 	bgeu	r2,r6,9c4c <__udivdi3+0x560>
    9744:	00800204 	movi	r2,8
    9748:	1007883a 	mov	r3,r2
    974c:	3084d83a 	srl	r2,r6,r2
    9750:	010000b4 	movhi	r4,2
    9754:	21260604 	addi	r4,r4,-26600
    9758:	2085883a 	add	r2,r4,r2
    975c:	10800003 	ldbu	r2,0(r2)
    9760:	10c7883a 	add	r3,r2,r3
    9764:	00800804 	movi	r2,32
    9768:	10c5c83a 	sub	r2,r2,r3
    976c:	10000526 	beq	r2,zero,9784 <__udivdi3+0x98>
    9770:	80a0983a 	sll	r16,r16,r2
    9774:	98c6d83a 	srl	r3,r19,r3
    9778:	30a4983a 	sll	r18,r6,r2
    977c:	98a2983a 	sll	r17,r19,r2
    9780:	80ecb03a 	or	r22,r16,r3
    9784:	902ad43a 	srli	r21,r18,16
    9788:	b009883a 	mov	r4,r22
    978c:	953fffcc 	andi	r20,r18,65535
    9790:	a80b883a 	mov	r5,r21
    9794:	000a3600 	call	a360 <__umodsi3>
    9798:	b009883a 	mov	r4,r22
    979c:	a80b883a 	mov	r5,r21
    97a0:	1027883a 	mov	r19,r2
    97a4:	000a3580 	call	a358 <__udivsi3>
    97a8:	1021883a 	mov	r16,r2
    97ac:	8806d43a 	srli	r3,r17,16
    97b0:	9804943a 	slli	r2,r19,16
    97b4:	8527383a 	mul	r19,r16,r20
    97b8:	10c4b03a 	or	r2,r2,r3
    97bc:	14c0052e 	bgeu	r2,r19,97d4 <__udivdi3+0xe8>
    97c0:	1485883a 	add	r2,r2,r18
    97c4:	80ffffc4 	addi	r3,r16,-1
    97c8:	14800136 	bltu	r2,r18,97d0 <__udivdi3+0xe4>
    97cc:	14c13436 	bltu	r2,r19,9ca0 <__udivdi3+0x5b4>
    97d0:	1821883a 	mov	r16,r3
    97d4:	14e7c83a 	sub	r19,r2,r19
    97d8:	9809883a 	mov	r4,r19
    97dc:	a80b883a 	mov	r5,r21
    97e0:	000a3600 	call	a360 <__umodsi3>
    97e4:	102d883a 	mov	r22,r2
    97e8:	9809883a 	mov	r4,r19
    97ec:	a80b883a 	mov	r5,r21
    97f0:	000a3580 	call	a358 <__udivsi3>
    97f4:	b02c943a 	slli	r22,r22,16
    97f8:	1529383a 	mul	r20,r2,r20
    97fc:	8c7fffcc 	andi	r17,r17,65535
    9800:	b462b03a 	or	r17,r22,r17
    9804:	8d00052e 	bgeu	r17,r20,981c <__udivdi3+0x130>
    9808:	8ca3883a 	add	r17,r17,r18
    980c:	10ffffc4 	addi	r3,r2,-1
    9810:	8c80f636 	bltu	r17,r18,9bec <__udivdi3+0x500>
    9814:	8d00f52e 	bgeu	r17,r20,9bec <__udivdi3+0x500>
    9818:	10bfff84 	addi	r2,r2,-2
    981c:	8020943a 	slli	r16,r16,16
    9820:	0007883a 	mov	r3,zero
    9824:	1404b03a 	or	r2,r2,r16
    9828:	00005b06 	br	9998 <__udivdi3+0x2ac>
    982c:	29c05836 	bltu	r5,r7,9990 <__udivdi3+0x2a4>
    9830:	00bfffd4 	movui	r2,65535
    9834:	11c0642e 	bgeu	r2,r7,99c8 <__udivdi3+0x2dc>
    9838:	00804034 	movhi	r2,256
    983c:	10bfffc4 	addi	r2,r2,-1
    9840:	11c0f32e 	bgeu	r2,r7,9c10 <__udivdi3+0x524>
    9844:	00c00604 	movi	r3,24
    9848:	180b883a 	mov	r5,r3
    984c:	38c6d83a 	srl	r3,r7,r3
    9850:	008000b4 	movhi	r2,2
    9854:	10a60604 	addi	r2,r2,-26600
    9858:	10c7883a 	add	r3,r2,r3
    985c:	18c00003 	ldbu	r3,0(r3)
    9860:	01000804 	movi	r4,32
    9864:	1947883a 	add	r3,r3,r5
    9868:	20e5c83a 	sub	r18,r4,r3
    986c:	9000661e 	bne	r18,zero,9a08 <__udivdi3+0x31c>
    9870:	3c00f936 	bltu	r7,r16,9c58 <__udivdi3+0x56c>
    9874:	9985403a 	cmpgeu	r2,r19,r6
    9878:	0007883a 	mov	r3,zero
    987c:	00004606 	br	9998 <__udivdi3+0x2ac>
    9880:	3000041e 	bne	r6,zero,9894 <__udivdi3+0x1a8>
    9884:	01000044 	movi	r4,1
    9888:	000b883a 	mov	r5,zero
    988c:	000a3580 	call	a358 <__udivsi3>
    9890:	1025883a 	mov	r18,r2
    9894:	00bfffd4 	movui	r2,65535
    9898:	1480562e 	bgeu	r2,r18,99f4 <__udivdi3+0x308>
    989c:	00804034 	movhi	r2,256
    98a0:	10bfffc4 	addi	r2,r2,-1
    98a4:	1480e32e 	bgeu	r2,r18,9c34 <__udivdi3+0x548>
    98a8:	00800604 	movi	r2,24
    98ac:	1007883a 	mov	r3,r2
    98b0:	9084d83a 	srl	r2,r18,r2
    98b4:	010000b4 	movhi	r4,2
    98b8:	21260604 	addi	r4,r4,-26600
    98bc:	2085883a 	add	r2,r4,r2
    98c0:	10800003 	ldbu	r2,0(r2)
    98c4:	10c5883a 	add	r2,r2,r3
    98c8:	00c00804 	movi	r3,32
    98cc:	1887c83a 	sub	r3,r3,r2
    98d0:	1800911e 	bne	r3,zero,9b18 <__udivdi3+0x42c>
    98d4:	9028d43a 	srli	r20,r18,16
    98d8:	84a1c83a 	sub	r16,r16,r18
    98dc:	957fffcc 	andi	r21,r18,65535
    98e0:	00c00044 	movi	r3,1
    98e4:	8009883a 	mov	r4,r16
    98e8:	a00b883a 	mov	r5,r20
    98ec:	d8c00015 	stw	r3,0(sp)
    98f0:	000a3600 	call	a360 <__umodsi3>
    98f4:	8009883a 	mov	r4,r16
    98f8:	a00b883a 	mov	r5,r20
    98fc:	1027883a 	mov	r19,r2
    9900:	000a3580 	call	a358 <__udivsi3>
    9904:	1021883a 	mov	r16,r2
    9908:	880cd43a 	srli	r6,r17,16
    990c:	9804943a 	slli	r2,r19,16
    9910:	8567383a 	mul	r19,r16,r21
    9914:	d8c00017 	ldw	r3,0(sp)
    9918:	1188b03a 	or	r4,r2,r6
    991c:	24c0052e 	bgeu	r4,r19,9934 <__udivdi3+0x248>
    9920:	2489883a 	add	r4,r4,r18
    9924:	80bfffc4 	addi	r2,r16,-1
    9928:	24800136 	bltu	r4,r18,9930 <__udivdi3+0x244>
    992c:	24c0d936 	bltu	r4,r19,9c94 <__udivdi3+0x5a8>
    9930:	1021883a 	mov	r16,r2
    9934:	24e7c83a 	sub	r19,r4,r19
    9938:	9809883a 	mov	r4,r19
    993c:	a00b883a 	mov	r5,r20
    9940:	d8c00015 	stw	r3,0(sp)
    9944:	000a3600 	call	a360 <__umodsi3>
    9948:	102d883a 	mov	r22,r2
    994c:	9809883a 	mov	r4,r19
    9950:	a00b883a 	mov	r5,r20
    9954:	000a3580 	call	a358 <__udivsi3>
    9958:	b02c943a 	slli	r22,r22,16
    995c:	156b383a 	mul	r21,r2,r21
    9960:	8c7fffcc 	andi	r17,r17,65535
    9964:	b462b03a 	or	r17,r22,r17
    9968:	d8c00017 	ldw	r3,0(sp)
    996c:	8d40052e 	bgeu	r17,r21,9984 <__udivdi3+0x298>
    9970:	8ca3883a 	add	r17,r17,r18
    9974:	113fffc4 	addi	r4,r2,-1
    9978:	8c809a36 	bltu	r17,r18,9be4 <__udivdi3+0x4f8>
    997c:	8d40992e 	bgeu	r17,r21,9be4 <__udivdi3+0x4f8>
    9980:	10bfff84 	addi	r2,r2,-2
    9984:	8020943a 	slli	r16,r16,16
    9988:	1404b03a 	or	r2,r2,r16
    998c:	00000206 	br	9998 <__udivdi3+0x2ac>
    9990:	0007883a 	mov	r3,zero
    9994:	0005883a 	mov	r2,zero
    9998:	dfc00a17 	ldw	ra,40(sp)
    999c:	df000917 	ldw	fp,36(sp)
    99a0:	ddc00817 	ldw	r23,32(sp)
    99a4:	dd800717 	ldw	r22,28(sp)
    99a8:	dd400617 	ldw	r21,24(sp)
    99ac:	dd000517 	ldw	r20,20(sp)
    99b0:	dcc00417 	ldw	r19,16(sp)
    99b4:	dc800317 	ldw	r18,12(sp)
    99b8:	dc400217 	ldw	r17,8(sp)
    99bc:	dc000117 	ldw	r16,4(sp)
    99c0:	dec00b04 	addi	sp,sp,44
    99c4:	f800283a 	ret
    99c8:	00803fc4 	movi	r2,255
    99cc:	11c0932e 	bgeu	r2,r7,9c1c <__udivdi3+0x530>
    99d0:	00c00204 	movi	r3,8
    99d4:	180b883a 	mov	r5,r3
    99d8:	003f9c06 	br	984c <__alt_mem_Flash_flash_data+0xf400984c>
    99dc:	00804034 	movhi	r2,256
    99e0:	10bfffc4 	addi	r2,r2,-1
    99e4:	1180902e 	bgeu	r2,r6,9c28 <__udivdi3+0x53c>
    99e8:	00800604 	movi	r2,24
    99ec:	1007883a 	mov	r3,r2
    99f0:	003f5606 	br	974c <__alt_mem_Flash_flash_data+0xf400974c>
    99f4:	00803fc4 	movi	r2,255
    99f8:	1480912e 	bgeu	r2,r18,9c40 <__udivdi3+0x554>
    99fc:	00800204 	movi	r2,8
    9a00:	1007883a 	mov	r3,r2
    9a04:	003faa06 	br	98b0 <__alt_mem_Flash_flash_data+0xf40098b0>
    9a08:	30eed83a 	srl	r23,r6,r3
    9a0c:	3c8e983a 	sll	r7,r7,r18
    9a10:	80f8d83a 	srl	fp,r16,r3
    9a14:	98c6d83a 	srl	r3,r19,r3
    9a18:	3deeb03a 	or	r23,r7,r23
    9a1c:	b828d43a 	srli	r20,r23,16
    9a20:	84a0983a 	sll	r16,r16,r18
    9a24:	e009883a 	mov	r4,fp
    9a28:	a00b883a 	mov	r5,r20
    9a2c:	80e2b03a 	or	r17,r16,r3
    9a30:	34aa983a 	sll	r21,r6,r18
    9a34:	000a3600 	call	a360 <__umodsi3>
    9a38:	e009883a 	mov	r4,fp
    9a3c:	a00b883a 	mov	r5,r20
    9a40:	102d883a 	mov	r22,r2
    9a44:	000a3580 	call	a358 <__udivsi3>
    9a48:	1021883a 	mov	r16,r2
    9a4c:	bf3fffcc 	andi	fp,r23,65535
    9a50:	b004943a 	slli	r2,r22,16
    9a54:	8808d43a 	srli	r4,r17,16
    9a58:	872d383a 	mul	r22,r16,fp
    9a5c:	1104b03a 	or	r2,r2,r4
    9a60:	1580042e 	bgeu	r2,r22,9a74 <__udivdi3+0x388>
    9a64:	15c5883a 	add	r2,r2,r23
    9a68:	80ffffc4 	addi	r3,r16,-1
    9a6c:	15c0812e 	bgeu	r2,r23,9c74 <__udivdi3+0x588>
    9a70:	1821883a 	mov	r16,r3
    9a74:	15adc83a 	sub	r22,r2,r22
    9a78:	b009883a 	mov	r4,r22
    9a7c:	a00b883a 	mov	r5,r20
    9a80:	000a3600 	call	a360 <__umodsi3>
    9a84:	a00b883a 	mov	r5,r20
    9a88:	b009883a 	mov	r4,r22
    9a8c:	d8800015 	stw	r2,0(sp)
    9a90:	000a3580 	call	a358 <__udivsi3>
    9a94:	d8c00017 	ldw	r3,0(sp)
    9a98:	170b383a 	mul	r5,r2,fp
    9a9c:	8c7fffcc 	andi	r17,r17,65535
    9aa0:	1806943a 	slli	r3,r3,16
    9aa4:	1c46b03a 	or	r3,r3,r17
    9aa8:	1940042e 	bgeu	r3,r5,9abc <__udivdi3+0x3d0>
    9aac:	1dc7883a 	add	r3,r3,r23
    9ab0:	113fffc4 	addi	r4,r2,-1
    9ab4:	1dc06b2e 	bgeu	r3,r23,9c64 <__udivdi3+0x578>
    9ab8:	2005883a 	mov	r2,r4
    9abc:	8020943a 	slli	r16,r16,16
    9ac0:	a9ffffcc 	andi	r7,r21,65535
    9ac4:	a82ad43a 	srli	r21,r21,16
    9ac8:	1404b03a 	or	r2,r2,r16
    9acc:	113fffcc 	andi	r4,r2,65535
    9ad0:	100cd43a 	srli	r6,r2,16
    9ad4:	21d3383a 	mul	r9,r4,r7
    9ad8:	2549383a 	mul	r4,r4,r21
    9adc:	31cf383a 	mul	r7,r6,r7
    9ae0:	4810d43a 	srli	r8,r9,16
    9ae4:	1947c83a 	sub	r3,r3,r5
    9ae8:	3909883a 	add	r4,r7,r4
    9aec:	2209883a 	add	r4,r4,r8
    9af0:	354d383a 	mul	r6,r6,r21
    9af4:	21c0022e 	bgeu	r4,r7,9b00 <__udivdi3+0x414>
    9af8:	01400074 	movhi	r5,1
    9afc:	314d883a 	add	r6,r6,r5
    9b00:	202ad43a 	srli	r21,r4,16
    9b04:	354d883a 	add	r6,r6,r21
    9b08:	19803f36 	bltu	r3,r6,9c08 <__udivdi3+0x51c>
    9b0c:	19803926 	beq	r3,r6,9bf4 <__udivdi3+0x508>
    9b10:	0007883a 	mov	r3,zero
    9b14:	003fa006 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9b18:	90e4983a 	sll	r18,r18,r3
    9b1c:	80aad83a 	srl	r21,r16,r2
    9b20:	80e0983a 	sll	r16,r16,r3
    9b24:	9028d43a 	srli	r20,r18,16
    9b28:	9884d83a 	srl	r2,r19,r2
    9b2c:	a809883a 	mov	r4,r21
    9b30:	a00b883a 	mov	r5,r20
    9b34:	80acb03a 	or	r22,r16,r2
    9b38:	98e2983a 	sll	r17,r19,r3
    9b3c:	000a3600 	call	a360 <__umodsi3>
    9b40:	a809883a 	mov	r4,r21
    9b44:	a00b883a 	mov	r5,r20
    9b48:	1021883a 	mov	r16,r2
    9b4c:	000a3580 	call	a358 <__udivsi3>
    9b50:	957fffcc 	andi	r21,r18,65535
    9b54:	8020943a 	slli	r16,r16,16
    9b58:	b00ad43a 	srli	r5,r22,16
    9b5c:	1567383a 	mul	r19,r2,r21
    9b60:	102f883a 	mov	r23,r2
    9b64:	8148b03a 	or	r4,r16,r5
    9b68:	24c0062e 	bgeu	r4,r19,9b84 <__udivdi3+0x498>
    9b6c:	2489883a 	add	r4,r4,r18
    9b70:	10bfffc4 	addi	r2,r2,-1
    9b74:	24804536 	bltu	r4,r18,9c8c <__udivdi3+0x5a0>
    9b78:	24c0442e 	bgeu	r4,r19,9c8c <__udivdi3+0x5a0>
    9b7c:	bdffff84 	addi	r23,r23,-2
    9b80:	2489883a 	add	r4,r4,r18
    9b84:	24e7c83a 	sub	r19,r4,r19
    9b88:	9809883a 	mov	r4,r19
    9b8c:	a00b883a 	mov	r5,r20
    9b90:	000a3600 	call	a360 <__umodsi3>
    9b94:	1021883a 	mov	r16,r2
    9b98:	9809883a 	mov	r4,r19
    9b9c:	a00b883a 	mov	r5,r20
    9ba0:	000a3580 	call	a358 <__udivsi3>
    9ba4:	8020943a 	slli	r16,r16,16
    9ba8:	1007883a 	mov	r3,r2
    9bac:	1545383a 	mul	r2,r2,r21
    9bb0:	b13fffcc 	andi	r4,r22,65535
    9bb4:	8108b03a 	or	r4,r16,r4
    9bb8:	2080062e 	bgeu	r4,r2,9bd4 <__udivdi3+0x4e8>
    9bbc:	2489883a 	add	r4,r4,r18
    9bc0:	197fffc4 	addi	r5,r3,-1
    9bc4:	24802f36 	bltu	r4,r18,9c84 <__udivdi3+0x598>
    9bc8:	20802e2e 	bgeu	r4,r2,9c84 <__udivdi3+0x598>
    9bcc:	18ffff84 	addi	r3,r3,-2
    9bd0:	2489883a 	add	r4,r4,r18
    9bd4:	b82e943a 	slli	r23,r23,16
    9bd8:	20a1c83a 	sub	r16,r4,r2
    9bdc:	1dc6b03a 	or	r3,r3,r23
    9be0:	003f4006 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    9be4:	2005883a 	mov	r2,r4
    9be8:	003f6606 	br	9984 <__alt_mem_Flash_flash_data+0xf4009984>
    9bec:	1805883a 	mov	r2,r3
    9bf0:	003f0a06 	br	981c <__alt_mem_Flash_flash_data+0xf400981c>
    9bf4:	2006943a 	slli	r3,r4,16
    9bf8:	9c88983a 	sll	r4,r19,r18
    9bfc:	4a7fffcc 	andi	r9,r9,65535
    9c00:	1a47883a 	add	r3,r3,r9
    9c04:	20ffc22e 	bgeu	r4,r3,9b10 <__alt_mem_Flash_flash_data+0xf4009b10>
    9c08:	10bfffc4 	addi	r2,r2,-1
    9c0c:	003fc006 	br	9b10 <__alt_mem_Flash_flash_data+0xf4009b10>
    9c10:	00c00404 	movi	r3,16
    9c14:	180b883a 	mov	r5,r3
    9c18:	003f0c06 	br	984c <__alt_mem_Flash_flash_data+0xf400984c>
    9c1c:	0007883a 	mov	r3,zero
    9c20:	000b883a 	mov	r5,zero
    9c24:	003f0906 	br	984c <__alt_mem_Flash_flash_data+0xf400984c>
    9c28:	00800404 	movi	r2,16
    9c2c:	1007883a 	mov	r3,r2
    9c30:	003ec606 	br	974c <__alt_mem_Flash_flash_data+0xf400974c>
    9c34:	00800404 	movi	r2,16
    9c38:	1007883a 	mov	r3,r2
    9c3c:	003f1c06 	br	98b0 <__alt_mem_Flash_flash_data+0xf40098b0>
    9c40:	0005883a 	mov	r2,zero
    9c44:	0007883a 	mov	r3,zero
    9c48:	003f1906 	br	98b0 <__alt_mem_Flash_flash_data+0xf40098b0>
    9c4c:	0005883a 	mov	r2,zero
    9c50:	0007883a 	mov	r3,zero
    9c54:	003ebd06 	br	974c <__alt_mem_Flash_flash_data+0xf400974c>
    9c58:	0007883a 	mov	r3,zero
    9c5c:	00800044 	movi	r2,1
    9c60:	003f4d06 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9c64:	197f942e 	bgeu	r3,r5,9ab8 <__alt_mem_Flash_flash_data+0xf4009ab8>
    9c68:	10bfff84 	addi	r2,r2,-2
    9c6c:	1dc7883a 	add	r3,r3,r23
    9c70:	003f9206 	br	9abc <__alt_mem_Flash_flash_data+0xf4009abc>
    9c74:	15bf7e2e 	bgeu	r2,r22,9a70 <__alt_mem_Flash_flash_data+0xf4009a70>
    9c78:	843fff84 	addi	r16,r16,-2
    9c7c:	15c5883a 	add	r2,r2,r23
    9c80:	003f7c06 	br	9a74 <__alt_mem_Flash_flash_data+0xf4009a74>
    9c84:	2807883a 	mov	r3,r5
    9c88:	003fd206 	br	9bd4 <__alt_mem_Flash_flash_data+0xf4009bd4>
    9c8c:	102f883a 	mov	r23,r2
    9c90:	003fbc06 	br	9b84 <__alt_mem_Flash_flash_data+0xf4009b84>
    9c94:	843fff84 	addi	r16,r16,-2
    9c98:	2489883a 	add	r4,r4,r18
    9c9c:	003f2506 	br	9934 <__alt_mem_Flash_flash_data+0xf4009934>
    9ca0:	843fff84 	addi	r16,r16,-2
    9ca4:	1485883a 	add	r2,r2,r18
    9ca8:	003eca06 	br	97d4 <__alt_mem_Flash_flash_data+0xf40097d4>

00009cac <__umoddi3>:
    9cac:	defff404 	addi	sp,sp,-48
    9cb0:	ddc00915 	stw	r23,36(sp)
    9cb4:	dc400315 	stw	r17,12(sp)
    9cb8:	dc000215 	stw	r16,8(sp)
    9cbc:	dfc00b15 	stw	ra,44(sp)
    9cc0:	df000a15 	stw	fp,40(sp)
    9cc4:	dd800815 	stw	r22,32(sp)
    9cc8:	dd400715 	stw	r21,28(sp)
    9ccc:	dd000615 	stw	r20,24(sp)
    9cd0:	dcc00515 	stw	r19,20(sp)
    9cd4:	dc800415 	stw	r18,16(sp)
    9cd8:	2021883a 	mov	r16,r4
    9cdc:	2823883a 	mov	r17,r5
    9ce0:	282f883a 	mov	r23,r5
    9ce4:	3800381e 	bne	r7,zero,9dc8 <__umoddi3+0x11c>
    9ce8:	3027883a 	mov	r19,r6
    9cec:	2029883a 	mov	r20,r4
    9cf0:	29804e2e 	bgeu	r5,r6,9e2c <__umoddi3+0x180>
    9cf4:	00bfffd4 	movui	r2,65535
    9cf8:	11809c36 	bltu	r2,r6,9f6c <__umoddi3+0x2c0>
    9cfc:	00803fc4 	movi	r2,255
    9d00:	11813b2e 	bgeu	r2,r6,a1f0 <__umoddi3+0x544>
    9d04:	01400204 	movi	r5,8
    9d08:	2805883a 	mov	r2,r5
    9d0c:	314ad83a 	srl	r5,r6,r5
    9d10:	00c000b4 	movhi	r3,2
    9d14:	18e60604 	addi	r3,r3,-26600
    9d18:	194b883a 	add	r5,r3,r5
    9d1c:	29000003 	ldbu	r4,0(r5)
    9d20:	2089883a 	add	r4,r4,r2
    9d24:	00800804 	movi	r2,32
    9d28:	1105c83a 	sub	r2,r2,r4
    9d2c:	1000ec26 	beq	r2,zero,a0e0 <__umoddi3+0x434>
    9d30:	88a2983a 	sll	r17,r17,r2
    9d34:	8108d83a 	srl	r4,r16,r4
    9d38:	30a6983a 	sll	r19,r6,r2
    9d3c:	80a8983a 	sll	r20,r16,r2
    9d40:	1025883a 	mov	r18,r2
    9d44:	892eb03a 	or	r23,r17,r4
    9d48:	982cd43a 	srli	r22,r19,16
    9d4c:	b809883a 	mov	r4,r23
    9d50:	9d7fffcc 	andi	r21,r19,65535
    9d54:	b00b883a 	mov	r5,r22
    9d58:	000a3600 	call	a360 <__umodsi3>
    9d5c:	b809883a 	mov	r4,r23
    9d60:	b00b883a 	mov	r5,r22
    9d64:	1021883a 	mov	r16,r2
    9d68:	000a3580 	call	a358 <__udivsi3>
    9d6c:	8020943a 	slli	r16,r16,16
    9d70:	a00cd43a 	srli	r6,r20,16
    9d74:	1545383a 	mul	r2,r2,r21
    9d78:	8188b03a 	or	r4,r16,r6
    9d7c:	2080042e 	bgeu	r4,r2,9d90 <__umoddi3+0xe4>
    9d80:	24c9883a 	add	r4,r4,r19
    9d84:	24c00236 	bltu	r4,r19,9d90 <__umoddi3+0xe4>
    9d88:	2080012e 	bgeu	r4,r2,9d90 <__umoddi3+0xe4>
    9d8c:	24c9883a 	add	r4,r4,r19
    9d90:	20a3c83a 	sub	r17,r4,r2
    9d94:	8809883a 	mov	r4,r17
    9d98:	b00b883a 	mov	r5,r22
    9d9c:	000a3600 	call	a360 <__umodsi3>
    9da0:	8809883a 	mov	r4,r17
    9da4:	b00b883a 	mov	r5,r22
    9da8:	1021883a 	mov	r16,r2
    9dac:	000a3580 	call	a358 <__udivsi3>
    9db0:	8006943a 	slli	r3,r16,16
    9db4:	1545383a 	mul	r2,r2,r21
    9db8:	a13fffcc 	andi	r4,r20,65535
    9dbc:	1906b03a 	or	r3,r3,r4
    9dc0:	1880532e 	bgeu	r3,r2,9f10 <__umoddi3+0x264>
    9dc4:	00004e06 	br	9f00 <__umoddi3+0x254>
    9dc8:	29c05536 	bltu	r5,r7,9f20 <__umoddi3+0x274>
    9dcc:	00bfffd4 	movui	r2,65535
    9dd0:	11c0612e 	bgeu	r2,r7,9f58 <__umoddi3+0x2ac>
    9dd4:	00804034 	movhi	r2,256
    9dd8:	10bfffc4 	addi	r2,r2,-1
    9ddc:	11c0f82e 	bgeu	r2,r7,a1c0 <__umoddi3+0x514>
    9de0:	01400604 	movi	r5,24
    9de4:	282b883a 	mov	r21,r5
    9de8:	394ad83a 	srl	r5,r7,r5
    9dec:	00c000b4 	movhi	r3,2
    9df0:	18e60604 	addi	r3,r3,-26600
    9df4:	194b883a 	add	r5,r3,r5
    9df8:	28800003 	ldbu	r2,0(r5)
    9dfc:	00c00804 	movi	r3,32
    9e00:	156b883a 	add	r21,r2,r21
    9e04:	1d69c83a 	sub	r20,r3,r21
    9e08:	a000631e 	bne	r20,zero,9f98 <__umoddi3+0x2ec>
    9e0c:	3c400136 	bltu	r7,r17,9e14 <__umoddi3+0x168>
    9e10:	81810436 	bltu	r16,r6,a224 <__umoddi3+0x578>
    9e14:	8185c83a 	sub	r2,r16,r6
    9e18:	89e3c83a 	sub	r17,r17,r7
    9e1c:	8087803a 	cmpltu	r3,r16,r2
    9e20:	88efc83a 	sub	r23,r17,r3
    9e24:	b807883a 	mov	r3,r23
    9e28:	00003f06 	br	9f28 <__umoddi3+0x27c>
    9e2c:	3000041e 	bne	r6,zero,9e40 <__umoddi3+0x194>
    9e30:	01000044 	movi	r4,1
    9e34:	000b883a 	mov	r5,zero
    9e38:	000a3580 	call	a358 <__udivsi3>
    9e3c:	1027883a 	mov	r19,r2
    9e40:	00bfffd4 	movui	r2,65535
    9e44:	14c04f2e 	bgeu	r2,r19,9f84 <__umoddi3+0x2d8>
    9e48:	00804034 	movhi	r2,256
    9e4c:	10bfffc4 	addi	r2,r2,-1
    9e50:	14c0e42e 	bgeu	r2,r19,a1e4 <__umoddi3+0x538>
    9e54:	00800604 	movi	r2,24
    9e58:	1007883a 	mov	r3,r2
    9e5c:	9884d83a 	srl	r2,r19,r2
    9e60:	010000b4 	movhi	r4,2
    9e64:	21260604 	addi	r4,r4,-26600
    9e68:	2085883a 	add	r2,r4,r2
    9e6c:	11000003 	ldbu	r4,0(r2)
    9e70:	00800804 	movi	r2,32
    9e74:	20c7883a 	add	r3,r4,r3
    9e78:	10c5c83a 	sub	r2,r2,r3
    9e7c:	10009a1e 	bne	r2,zero,a0e8 <__umoddi3+0x43c>
    9e80:	982cd43a 	srli	r22,r19,16
    9e84:	8ce3c83a 	sub	r17,r17,r19
    9e88:	9c3fffcc 	andi	r16,r19,65535
    9e8c:	0025883a 	mov	r18,zero
    9e90:	8809883a 	mov	r4,r17
    9e94:	b00b883a 	mov	r5,r22
    9e98:	000a3600 	call	a360 <__umodsi3>
    9e9c:	8809883a 	mov	r4,r17
    9ea0:	b00b883a 	mov	r5,r22
    9ea4:	102b883a 	mov	r21,r2
    9ea8:	000a3580 	call	a358 <__udivsi3>
    9eac:	a806943a 	slli	r3,r21,16
    9eb0:	a008d43a 	srli	r4,r20,16
    9eb4:	1405383a 	mul	r2,r2,r16
    9eb8:	190cb03a 	or	r6,r3,r4
    9ebc:	3080032e 	bgeu	r6,r2,9ecc <__umoddi3+0x220>
    9ec0:	34cd883a 	add	r6,r6,r19
    9ec4:	34c00136 	bltu	r6,r19,9ecc <__umoddi3+0x220>
    9ec8:	3080d436 	bltu	r6,r2,a21c <__umoddi3+0x570>
    9ecc:	30abc83a 	sub	r21,r6,r2
    9ed0:	a809883a 	mov	r4,r21
    9ed4:	b00b883a 	mov	r5,r22
    9ed8:	000a3600 	call	a360 <__umodsi3>
    9edc:	1023883a 	mov	r17,r2
    9ee0:	a809883a 	mov	r4,r21
    9ee4:	b00b883a 	mov	r5,r22
    9ee8:	000a3580 	call	a358 <__udivsi3>
    9eec:	8822943a 	slli	r17,r17,16
    9ef0:	1405383a 	mul	r2,r2,r16
    9ef4:	a13fffcc 	andi	r4,r20,65535
    9ef8:	8906b03a 	or	r3,r17,r4
    9efc:	1880042e 	bgeu	r3,r2,9f10 <__umoddi3+0x264>
    9f00:	1cc7883a 	add	r3,r3,r19
    9f04:	1cc00236 	bltu	r3,r19,9f10 <__umoddi3+0x264>
    9f08:	1880012e 	bgeu	r3,r2,9f10 <__umoddi3+0x264>
    9f0c:	1cc7883a 	add	r3,r3,r19
    9f10:	1887c83a 	sub	r3,r3,r2
    9f14:	1c84d83a 	srl	r2,r3,r18
    9f18:	0007883a 	mov	r3,zero
    9f1c:	00000206 	br	9f28 <__umoddi3+0x27c>
    9f20:	2005883a 	mov	r2,r4
    9f24:	2807883a 	mov	r3,r5
    9f28:	dfc00b17 	ldw	ra,44(sp)
    9f2c:	df000a17 	ldw	fp,40(sp)
    9f30:	ddc00917 	ldw	r23,36(sp)
    9f34:	dd800817 	ldw	r22,32(sp)
    9f38:	dd400717 	ldw	r21,28(sp)
    9f3c:	dd000617 	ldw	r20,24(sp)
    9f40:	dcc00517 	ldw	r19,20(sp)
    9f44:	dc800417 	ldw	r18,16(sp)
    9f48:	dc400317 	ldw	r17,12(sp)
    9f4c:	dc000217 	ldw	r16,8(sp)
    9f50:	dec00c04 	addi	sp,sp,48
    9f54:	f800283a 	ret
    9f58:	00803fc4 	movi	r2,255
    9f5c:	11c0952e 	bgeu	r2,r7,a1b4 <__umoddi3+0x508>
    9f60:	01400204 	movi	r5,8
    9f64:	282b883a 	mov	r21,r5
    9f68:	003f9f06 	br	9de8 <__alt_mem_Flash_flash_data+0xf4009de8>
    9f6c:	00804034 	movhi	r2,256
    9f70:	10bfffc4 	addi	r2,r2,-1
    9f74:	1180952e 	bgeu	r2,r6,a1cc <__umoddi3+0x520>
    9f78:	01400604 	movi	r5,24
    9f7c:	2805883a 	mov	r2,r5
    9f80:	003f6206 	br	9d0c <__alt_mem_Flash_flash_data+0xf4009d0c>
    9f84:	00803fc4 	movi	r2,255
    9f88:	14c0932e 	bgeu	r2,r19,a1d8 <__umoddi3+0x52c>
    9f8c:	00800204 	movi	r2,8
    9f90:	1007883a 	mov	r3,r2
    9f94:	003fb106 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    9f98:	3548d83a 	srl	r4,r6,r21
    9f9c:	3d0e983a 	sll	r7,r7,r20
    9fa0:	8d10983a 	sll	r8,r17,r20
    9fa4:	8d6cd83a 	srl	r22,r17,r21
    9fa8:	3922b03a 	or	r17,r7,r4
    9fac:	882ed43a 	srli	r23,r17,16
    9fb0:	8564d83a 	srl	r18,r16,r21
    9fb4:	b009883a 	mov	r4,r22
    9fb8:	b80b883a 	mov	r5,r23
    9fbc:	44a4b03a 	or	r18,r8,r18
    9fc0:	3526983a 	sll	r19,r6,r20
    9fc4:	000a3600 	call	a360 <__umodsi3>
    9fc8:	b009883a 	mov	r4,r22
    9fcc:	b80b883a 	mov	r5,r23
    9fd0:	1039883a 	mov	fp,r2
    9fd4:	000a3580 	call	a358 <__udivsi3>
    9fd8:	102d883a 	mov	r22,r2
    9fdc:	8a3fffcc 	andi	r8,r17,65535
    9fe0:	e004943a 	slli	r2,fp,16
    9fe4:	900cd43a 	srli	r6,r18,16
    9fe8:	b239383a 	mul	fp,r22,r8
    9fec:	8520983a 	sll	r16,r16,r20
    9ff0:	118ab03a 	or	r5,r2,r6
    9ff4:	2f00042e 	bgeu	r5,fp,a008 <__umoddi3+0x35c>
    9ff8:	2c4b883a 	add	r5,r5,r17
    9ffc:	b0bfffc4 	addi	r2,r22,-1
    a000:	2c40822e 	bgeu	r5,r17,a20c <__umoddi3+0x560>
    a004:	102d883a 	mov	r22,r2
    a008:	2f39c83a 	sub	fp,r5,fp
    a00c:	e009883a 	mov	r4,fp
    a010:	b80b883a 	mov	r5,r23
    a014:	da000115 	stw	r8,4(sp)
    a018:	000a3600 	call	a360 <__umodsi3>
    a01c:	e009883a 	mov	r4,fp
    a020:	b80b883a 	mov	r5,r23
    a024:	d8800015 	stw	r2,0(sp)
    a028:	000a3580 	call	a358 <__udivsi3>
    a02c:	d9800017 	ldw	r6,0(sp)
    a030:	da000117 	ldw	r8,4(sp)
    a034:	94bfffcc 	andi	r18,r18,65535
    a038:	300c943a 	slli	r6,r6,16
    a03c:	1209383a 	mul	r4,r2,r8
    a040:	3490b03a 	or	r8,r6,r18
    a044:	4100042e 	bgeu	r8,r4,a058 <__umoddi3+0x3ac>
    a048:	4451883a 	add	r8,r8,r17
    a04c:	10ffffc4 	addi	r3,r2,-1
    a050:	44406a2e 	bgeu	r8,r17,a1fc <__umoddi3+0x550>
    a054:	1805883a 	mov	r2,r3
    a058:	b012943a 	slli	r9,r22,16
    a05c:	9abfffcc 	andi	r10,r19,65535
    a060:	980ed43a 	srli	r7,r19,16
    a064:	124ab03a 	or	r5,r2,r9
    a068:	2a7fffcc 	andi	r9,r5,65535
    a06c:	280ad43a 	srli	r5,r5,16
    a070:	4a8d383a 	mul	r6,r9,r10
    a074:	49d3383a 	mul	r9,r9,r7
    a078:	2a95383a 	mul	r10,r5,r10
    a07c:	3004d43a 	srli	r2,r6,16
    a080:	4111c83a 	sub	r8,r8,r4
    a084:	5253883a 	add	r9,r10,r9
    a088:	4893883a 	add	r9,r9,r2
    a08c:	29cb383a 	mul	r5,r5,r7
    a090:	4a80022e 	bgeu	r9,r10,a09c <__umoddi3+0x3f0>
    a094:	00800074 	movhi	r2,1
    a098:	288b883a 	add	r5,r5,r2
    a09c:	4808d43a 	srli	r4,r9,16
    a0a0:	4812943a 	slli	r9,r9,16
    a0a4:	31bfffcc 	andi	r6,r6,65535
    a0a8:	290b883a 	add	r5,r5,r4
    a0ac:	498d883a 	add	r6,r9,r6
    a0b0:	41403a36 	bltu	r8,r5,a19c <__umoddi3+0x4f0>
    a0b4:	41405d26 	beq	r8,r5,a22c <__umoddi3+0x580>
    a0b8:	4149c83a 	sub	r4,r8,r5
    a0bc:	300f883a 	mov	r7,r6
    a0c0:	81cfc83a 	sub	r7,r16,r7
    a0c4:	81c7803a 	cmpltu	r3,r16,r7
    a0c8:	20c7c83a 	sub	r3,r4,r3
    a0cc:	1d44983a 	sll	r2,r3,r21
    a0d0:	3d0ed83a 	srl	r7,r7,r20
    a0d4:	1d06d83a 	srl	r3,r3,r20
    a0d8:	11c4b03a 	or	r2,r2,r7
    a0dc:	003f9206 	br	9f28 <__alt_mem_Flash_flash_data+0xf4009f28>
    a0e0:	0025883a 	mov	r18,zero
    a0e4:	003f1806 	br	9d48 <__alt_mem_Flash_flash_data+0xf4009d48>
    a0e8:	98a6983a 	sll	r19,r19,r2
    a0ec:	88e8d83a 	srl	r20,r17,r3
    a0f0:	80c6d83a 	srl	r3,r16,r3
    a0f4:	982cd43a 	srli	r22,r19,16
    a0f8:	88a2983a 	sll	r17,r17,r2
    a0fc:	a009883a 	mov	r4,r20
    a100:	b00b883a 	mov	r5,r22
    a104:	88eab03a 	or	r21,r17,r3
    a108:	1025883a 	mov	r18,r2
    a10c:	000a3600 	call	a360 <__umodsi3>
    a110:	a009883a 	mov	r4,r20
    a114:	b00b883a 	mov	r5,r22
    a118:	1023883a 	mov	r17,r2
    a11c:	000a3580 	call	a358 <__udivsi3>
    a120:	9f3fffcc 	andi	fp,r19,65535
    a124:	8822943a 	slli	r17,r17,16
    a128:	a80ad43a 	srli	r5,r21,16
    a12c:	1705383a 	mul	r2,r2,fp
    a130:	84a8983a 	sll	r20,r16,r18
    a134:	8948b03a 	or	r4,r17,r5
    a138:	2080042e 	bgeu	r4,r2,a14c <__umoddi3+0x4a0>
    a13c:	24c9883a 	add	r4,r4,r19
    a140:	24c00236 	bltu	r4,r19,a14c <__umoddi3+0x4a0>
    a144:	2080012e 	bgeu	r4,r2,a14c <__umoddi3+0x4a0>
    a148:	24c9883a 	add	r4,r4,r19
    a14c:	20afc83a 	sub	r23,r4,r2
    a150:	b809883a 	mov	r4,r23
    a154:	b00b883a 	mov	r5,r22
    a158:	000a3600 	call	a360 <__umodsi3>
    a15c:	1023883a 	mov	r17,r2
    a160:	b809883a 	mov	r4,r23
    a164:	b00b883a 	mov	r5,r22
    a168:	000a3580 	call	a358 <__udivsi3>
    a16c:	8822943a 	slli	r17,r17,16
    a170:	1705383a 	mul	r2,r2,fp
    a174:	a93fffcc 	andi	r4,r21,65535
    a178:	8908b03a 	or	r4,r17,r4
    a17c:	2080042e 	bgeu	r4,r2,a190 <__umoddi3+0x4e4>
    a180:	24c9883a 	add	r4,r4,r19
    a184:	24c00236 	bltu	r4,r19,a190 <__umoddi3+0x4e4>
    a188:	2080012e 	bgeu	r4,r2,a190 <__umoddi3+0x4e4>
    a18c:	24c9883a 	add	r4,r4,r19
    a190:	20a3c83a 	sub	r17,r4,r2
    a194:	e021883a 	mov	r16,fp
    a198:	003f3d06 	br	9e90 <__alt_mem_Flash_flash_data+0xf4009e90>
    a19c:	34cfc83a 	sub	r7,r6,r19
    a1a0:	2c4bc83a 	sub	r5,r5,r17
    a1a4:	31cd803a 	cmpltu	r6,r6,r7
    a1a8:	298dc83a 	sub	r6,r5,r6
    a1ac:	4189c83a 	sub	r4,r8,r6
    a1b0:	003fc306 	br	a0c0 <__alt_mem_Flash_flash_data+0xf400a0c0>
    a1b4:	000b883a 	mov	r5,zero
    a1b8:	002b883a 	mov	r21,zero
    a1bc:	003f0a06 	br	9de8 <__alt_mem_Flash_flash_data+0xf4009de8>
    a1c0:	01400404 	movi	r5,16
    a1c4:	282b883a 	mov	r21,r5
    a1c8:	003f0706 	br	9de8 <__alt_mem_Flash_flash_data+0xf4009de8>
    a1cc:	01400404 	movi	r5,16
    a1d0:	2805883a 	mov	r2,r5
    a1d4:	003ecd06 	br	9d0c <__alt_mem_Flash_flash_data+0xf4009d0c>
    a1d8:	0005883a 	mov	r2,zero
    a1dc:	0007883a 	mov	r3,zero
    a1e0:	003f1e06 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    a1e4:	00800404 	movi	r2,16
    a1e8:	1007883a 	mov	r3,r2
    a1ec:	003f1b06 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    a1f0:	000b883a 	mov	r5,zero
    a1f4:	0005883a 	mov	r2,zero
    a1f8:	003ec406 	br	9d0c <__alt_mem_Flash_flash_data+0xf4009d0c>
    a1fc:	413f952e 	bgeu	r8,r4,a054 <__alt_mem_Flash_flash_data+0xf400a054>
    a200:	10bfff84 	addi	r2,r2,-2
    a204:	4451883a 	add	r8,r8,r17
    a208:	003f9306 	br	a058 <__alt_mem_Flash_flash_data+0xf400a058>
    a20c:	2f3f7d2e 	bgeu	r5,fp,a004 <__alt_mem_Flash_flash_data+0xf400a004>
    a210:	b5bfff84 	addi	r22,r22,-2
    a214:	2c4b883a 	add	r5,r5,r17
    a218:	003f7b06 	br	a008 <__alt_mem_Flash_flash_data+0xf400a008>
    a21c:	34cd883a 	add	r6,r6,r19
    a220:	003f2a06 	br	9ecc <__alt_mem_Flash_flash_data+0xf4009ecc>
    a224:	8005883a 	mov	r2,r16
    a228:	003efe06 	br	9e24 <__alt_mem_Flash_flash_data+0xf4009e24>
    a22c:	81bfdb36 	bltu	r16,r6,a19c <__alt_mem_Flash_flash_data+0xf400a19c>
    a230:	300f883a 	mov	r7,r6
    a234:	0009883a 	mov	r4,zero
    a238:	003fa106 	br	a0c0 <__alt_mem_Flash_flash_data+0xf400a0c0>

0000a23c <udivmodsi4>:
    a23c:	2900182e 	bgeu	r5,r4,a2a0 <udivmodsi4+0x64>
    a240:	28001716 	blt	r5,zero,a2a0 <udivmodsi4+0x64>
    a244:	00800804 	movi	r2,32
    a248:	00c00044 	movi	r3,1
    a24c:	00000206 	br	a258 <udivmodsi4+0x1c>
    a250:	10001126 	beq	r2,zero,a298 <udivmodsi4+0x5c>
    a254:	28000516 	blt	r5,zero,a26c <udivmodsi4+0x30>
    a258:	294b883a 	add	r5,r5,r5
    a25c:	10bfffc4 	addi	r2,r2,-1
    a260:	18c7883a 	add	r3,r3,r3
    a264:	293ffa36 	bltu	r5,r4,a250 <__alt_mem_Flash_flash_data+0xf400a250>
    a268:	18000b26 	beq	r3,zero,a298 <udivmodsi4+0x5c>
    a26c:	0005883a 	mov	r2,zero
    a270:	21400236 	bltu	r4,r5,a27c <udivmodsi4+0x40>
    a274:	2149c83a 	sub	r4,r4,r5
    a278:	10c4b03a 	or	r2,r2,r3
    a27c:	1806d07a 	srli	r3,r3,1
    a280:	280ad07a 	srli	r5,r5,1
    a284:	183ffa1e 	bne	r3,zero,a270 <__alt_mem_Flash_flash_data+0xf400a270>
    a288:	3000011e 	bne	r6,zero,a290 <udivmodsi4+0x54>
    a28c:	f800283a 	ret
    a290:	2005883a 	mov	r2,r4
    a294:	f800283a 	ret
    a298:	0005883a 	mov	r2,zero
    a29c:	003ffa06 	br	a288 <__alt_mem_Flash_flash_data+0xf400a288>
    a2a0:	00c00044 	movi	r3,1
    a2a4:	003ff106 	br	a26c <__alt_mem_Flash_flash_data+0xf400a26c>

0000a2a8 <__divsi3>:
    a2a8:	defffe04 	addi	sp,sp,-8
    a2ac:	dfc00115 	stw	ra,4(sp)
    a2b0:	dc000015 	stw	r16,0(sp)
    a2b4:	20000b16 	blt	r4,zero,a2e4 <__divsi3+0x3c>
    a2b8:	0021883a 	mov	r16,zero
    a2bc:	28000c16 	blt	r5,zero,a2f0 <__divsi3+0x48>
    a2c0:	000d883a 	mov	r6,zero
    a2c4:	000a23c0 	call	a23c <udivmodsi4>
    a2c8:	0407c83a 	sub	r3,zero,r16
    a2cc:	1884f03a 	xor	r2,r3,r2
    a2d0:	1405883a 	add	r2,r2,r16
    a2d4:	dfc00117 	ldw	ra,4(sp)
    a2d8:	dc000017 	ldw	r16,0(sp)
    a2dc:	dec00204 	addi	sp,sp,8
    a2e0:	f800283a 	ret
    a2e4:	0109c83a 	sub	r4,zero,r4
    a2e8:	04000044 	movi	r16,1
    a2ec:	283ff40e 	bge	r5,zero,a2c0 <__alt_mem_Flash_flash_data+0xf400a2c0>
    a2f0:	014bc83a 	sub	r5,zero,r5
    a2f4:	8400005c 	xori	r16,r16,1
    a2f8:	003ff106 	br	a2c0 <__alt_mem_Flash_flash_data+0xf400a2c0>

0000a2fc <__modsi3>:
    a2fc:	defffd04 	addi	sp,sp,-12
    a300:	dfc00215 	stw	ra,8(sp)
    a304:	dc400115 	stw	r17,4(sp)
    a308:	dc000015 	stw	r16,0(sp)
    a30c:	20000c16 	blt	r4,zero,a340 <__modsi3+0x44>
    a310:	0023883a 	mov	r17,zero
    a314:	0021883a 	mov	r16,zero
    a318:	28000d16 	blt	r5,zero,a350 <__modsi3+0x54>
    a31c:	01800044 	movi	r6,1
    a320:	000a23c0 	call	a23c <udivmodsi4>
    a324:	1404f03a 	xor	r2,r2,r16
    a328:	8885883a 	add	r2,r17,r2
    a32c:	dfc00217 	ldw	ra,8(sp)
    a330:	dc400117 	ldw	r17,4(sp)
    a334:	dc000017 	ldw	r16,0(sp)
    a338:	dec00304 	addi	sp,sp,12
    a33c:	f800283a 	ret
    a340:	0109c83a 	sub	r4,zero,r4
    a344:	04400044 	movi	r17,1
    a348:	043fffc4 	movi	r16,-1
    a34c:	283ff30e 	bge	r5,zero,a31c <__alt_mem_Flash_flash_data+0xf400a31c>
    a350:	014bc83a 	sub	r5,zero,r5
    a354:	003ff106 	br	a31c <__alt_mem_Flash_flash_data+0xf400a31c>

0000a358 <__udivsi3>:
    a358:	000d883a 	mov	r6,zero
    a35c:	000a23c1 	jmpi	a23c <udivmodsi4>

0000a360 <__umodsi3>:
    a360:	01800044 	movi	r6,1
    a364:	000a23c1 	jmpi	a23c <udivmodsi4>

0000a368 <__adddf3>:
    a368:	02000434 	movhi	r8,16
    a36c:	423fffc4 	addi	r8,r8,-1
    a370:	defffb04 	addi	sp,sp,-20
    a374:	2a12703a 	and	r9,r5,r8
    a378:	2806d7fa 	srli	r3,r5,31
    a37c:	3a10703a 	and	r8,r7,r8
    a380:	3804d53a 	srli	r2,r7,20
    a384:	3014d77a 	srli	r10,r6,29
    a388:	dc000015 	stw	r16,0(sp)
    a38c:	481290fa 	slli	r9,r9,3
    a390:	2820d53a 	srli	r16,r5,20
    a394:	401090fa 	slli	r8,r8,3
    a398:	200ad77a 	srli	r5,r4,29
    a39c:	380ed7fa 	srli	r7,r7,31
    a3a0:	dc800215 	stw	r18,8(sp)
    a3a4:	dc400115 	stw	r17,4(sp)
    a3a8:	dfc00415 	stw	ra,16(sp)
    a3ac:	dcc00315 	stw	r19,12(sp)
    a3b0:	1c803fcc 	andi	r18,r3,255
    a3b4:	8401ffcc 	andi	r16,r16,2047
    a3b8:	494ab03a 	or	r5,r9,r5
    a3bc:	202290fa 	slli	r17,r4,3
    a3c0:	1081ffcc 	andi	r2,r2,2047
    a3c4:	4290b03a 	or	r8,r8,r10
    a3c8:	300c90fa 	slli	r6,r6,3
    a3cc:	91c07026 	beq	r18,r7,a590 <__adddf3+0x228>
    a3d0:	8087c83a 	sub	r3,r16,r2
    a3d4:	00c0b30e 	bge	zero,r3,a6a4 <__adddf3+0x33c>
    a3d8:	10002a1e 	bne	r2,zero,a484 <__adddf3+0x11c>
    a3dc:	4184b03a 	or	r2,r8,r6
    a3e0:	1000991e 	bne	r2,zero,a648 <__adddf3+0x2e0>
    a3e4:	888001cc 	andi	r2,r17,7
    a3e8:	10005b26 	beq	r2,zero,a558 <__adddf3+0x1f0>
    a3ec:	88c003cc 	andi	r3,r17,15
    a3f0:	00800104 	movi	r2,4
    a3f4:	18805826 	beq	r3,r2,a558 <__adddf3+0x1f0>
    a3f8:	89800104 	addi	r6,r17,4
    a3fc:	3463803a 	cmpltu	r17,r6,r17
    a400:	2c4b883a 	add	r5,r5,r17
    a404:	2880202c 	andhi	r2,r5,128
    a408:	9007883a 	mov	r3,r18
    a40c:	3023883a 	mov	r17,r6
    a410:	10005426 	beq	r2,zero,a564 <__adddf3+0x1fc>
    a414:	84000044 	addi	r16,r16,1
    a418:	0081ffc4 	movi	r2,2047
    a41c:	8080c126 	beq	r16,r2,a724 <__adddf3+0x3bc>
    a420:	013fe034 	movhi	r4,65408
    a424:	213fffc4 	addi	r4,r4,-1
    a428:	290a703a 	and	r5,r5,r4
    a42c:	2804977a 	slli	r2,r5,29
    a430:	280a927a 	slli	r5,r5,9
    a434:	8822d0fa 	srli	r17,r17,3
    a438:	8401ffcc 	andi	r16,r16,2047
    a43c:	2808d33a 	srli	r4,r5,12
    a440:	1444b03a 	or	r2,r2,r17
    a444:	8401ffcc 	andi	r16,r16,2047
    a448:	800a953a 	slli	r5,r16,20
    a44c:	18c03fcc 	andi	r3,r3,255
    a450:	04000434 	movhi	r16,16
    a454:	180697fa 	slli	r3,r3,31
    a458:	843fffc4 	addi	r16,r16,-1
    a45c:	2420703a 	and	r16,r4,r16
    a460:	8160b03a 	or	r16,r16,r5
    a464:	80c6b03a 	or	r3,r16,r3
    a468:	dfc00417 	ldw	ra,16(sp)
    a46c:	dcc00317 	ldw	r19,12(sp)
    a470:	dc800217 	ldw	r18,8(sp)
    a474:	dc400117 	ldw	r17,4(sp)
    a478:	dc000017 	ldw	r16,0(sp)
    a47c:	dec00504 	addi	sp,sp,20
    a480:	f800283a 	ret
    a484:	0081ffc4 	movi	r2,2047
    a488:	80bfd626 	beq	r16,r2,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a48c:	42002034 	orhi	r8,r8,128
    a490:	00800e04 	movi	r2,56
    a494:	10c0a616 	blt	r2,r3,a730 <__adddf3+0x3c8>
    a498:	008007c4 	movi	r2,31
    a49c:	10c0c916 	blt	r2,r3,a7c4 <__adddf3+0x45c>
    a4a0:	00800804 	movi	r2,32
    a4a4:	10c5c83a 	sub	r2,r2,r3
    a4a8:	408e983a 	sll	r7,r8,r2
    a4ac:	30c8d83a 	srl	r4,r6,r3
    a4b0:	3084983a 	sll	r2,r6,r2
    a4b4:	40c6d83a 	srl	r3,r8,r3
    a4b8:	390cb03a 	or	r6,r7,r4
    a4bc:	1004c03a 	cmpne	r2,r2,zero
    a4c0:	308cb03a 	or	r6,r6,r2
    a4c4:	898dc83a 	sub	r6,r17,r6
    a4c8:	89a3803a 	cmpltu	r17,r17,r6
    a4cc:	28cbc83a 	sub	r5,r5,r3
    a4d0:	2c4bc83a 	sub	r5,r5,r17
    a4d4:	3023883a 	mov	r17,r6
    a4d8:	2880202c 	andhi	r2,r5,128
    a4dc:	10006d26 	beq	r2,zero,a694 <__adddf3+0x32c>
    a4e0:	04c02034 	movhi	r19,128
    a4e4:	9cffffc4 	addi	r19,r19,-1
    a4e8:	2ce6703a 	and	r19,r5,r19
    a4ec:	98007e26 	beq	r19,zero,a6e8 <__adddf3+0x380>
    a4f0:	9809883a 	mov	r4,r19
    a4f4:	000c9040 	call	c904 <__clzsi2>
    a4f8:	10fffe04 	addi	r3,r2,-8
    a4fc:	010007c4 	movi	r4,31
    a500:	20c07f16 	blt	r4,r3,a700 <__adddf3+0x398>
    a504:	01400a04 	movi	r5,40
    a508:	2885c83a 	sub	r2,r5,r2
    a50c:	888ad83a 	srl	r5,r17,r2
    a510:	98e6983a 	sll	r19,r19,r3
    a514:	88e2983a 	sll	r17,r17,r3
    a518:	2ce6b03a 	or	r19,r5,r19
    a51c:	1c007c16 	blt	r3,r16,a710 <__adddf3+0x3a8>
    a520:	1c21c83a 	sub	r16,r3,r16
    a524:	81400044 	addi	r5,r16,1
    a528:	00c007c4 	movi	r3,31
    a52c:	19409816 	blt	r3,r5,a790 <__adddf3+0x428>
    a530:	1c21c83a 	sub	r16,r3,r16
    a534:	8c08983a 	sll	r4,r17,r16
    a538:	8946d83a 	srl	r3,r17,r5
    a53c:	9c20983a 	sll	r16,r19,r16
    a540:	2008c03a 	cmpne	r4,r4,zero
    a544:	994ad83a 	srl	r5,r19,r5
    a548:	1c06b03a 	or	r3,r3,r16
    a54c:	1922b03a 	or	r17,r3,r4
    a550:	0021883a 	mov	r16,zero
    a554:	003fa306 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a558:	2880202c 	andhi	r2,r5,128
    a55c:	9007883a 	mov	r3,r18
    a560:	103fac1e 	bne	r2,zero,a414 <__alt_mem_Flash_flash_data+0xf400a414>
    a564:	2804977a 	slli	r2,r5,29
    a568:	8822d0fa 	srli	r17,r17,3
    a56c:	0101ffc4 	movi	r4,2047
    a570:	280ad0fa 	srli	r5,r5,3
    a574:	1444b03a 	or	r2,r2,r17
    a578:	81002c26 	beq	r16,r4,a62c <__adddf3+0x2c4>
    a57c:	8120703a 	and	r16,r16,r4
    a580:	01000434 	movhi	r4,16
    a584:	213fffc4 	addi	r4,r4,-1
    a588:	2908703a 	and	r4,r5,r4
    a58c:	003fad06 	br	a444 <__alt_mem_Flash_flash_data+0xf400a444>
    a590:	8089c83a 	sub	r4,r16,r2
    a594:	01006a0e 	bge	zero,r4,a740 <__adddf3+0x3d8>
    a598:	10003326 	beq	r2,zero,a668 <__adddf3+0x300>
    a59c:	0081ffc4 	movi	r2,2047
    a5a0:	80bf9026 	beq	r16,r2,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a5a4:	42002034 	orhi	r8,r8,128
    a5a8:	00800e04 	movi	r2,56
    a5ac:	1100b116 	blt	r2,r4,a874 <__adddf3+0x50c>
    a5b0:	008007c4 	movi	r2,31
    a5b4:	1100e216 	blt	r2,r4,a940 <__adddf3+0x5d8>
    a5b8:	00800804 	movi	r2,32
    a5bc:	1105c83a 	sub	r2,r2,r4
    a5c0:	4092983a 	sll	r9,r8,r2
    a5c4:	310ed83a 	srl	r7,r6,r4
    a5c8:	3084983a 	sll	r2,r6,r2
    a5cc:	4110d83a 	srl	r8,r8,r4
    a5d0:	49ccb03a 	or	r6,r9,r7
    a5d4:	1004c03a 	cmpne	r2,r2,zero
    a5d8:	308cb03a 	or	r6,r6,r2
    a5dc:	344d883a 	add	r6,r6,r17
    a5e0:	3463803a 	cmpltu	r17,r6,r17
    a5e4:	414b883a 	add	r5,r8,r5
    a5e8:	2c4b883a 	add	r5,r5,r17
    a5ec:	3023883a 	mov	r17,r6
    a5f0:	2880202c 	andhi	r2,r5,128
    a5f4:	10002726 	beq	r2,zero,a694 <__adddf3+0x32c>
    a5f8:	84000044 	addi	r16,r16,1
    a5fc:	0081ffc4 	movi	r2,2047
    a600:	8080ae26 	beq	r16,r2,a8bc <__adddf3+0x554>
    a604:	00bfe034 	movhi	r2,65408
    a608:	10bfffc4 	addi	r2,r2,-1
    a60c:	288a703a 	and	r5,r5,r2
    a610:	880cd07a 	srli	r6,r17,1
    a614:	280897fa 	slli	r4,r5,31
    a618:	88c0004c 	andi	r3,r17,1
    a61c:	30e2b03a 	or	r17,r6,r3
    a620:	280ad07a 	srli	r5,r5,1
    a624:	8922b03a 	or	r17,r17,r4
    a628:	003f6e06 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a62c:	1148b03a 	or	r4,r2,r5
    a630:	20003c26 	beq	r4,zero,a724 <__adddf3+0x3bc>
    a634:	29000234 	orhi	r4,r5,8
    a638:	01400434 	movhi	r5,16
    a63c:	297fffc4 	addi	r5,r5,-1
    a640:	2148703a 	and	r4,r4,r5
    a644:	003f7f06 	br	a444 <__alt_mem_Flash_flash_data+0xf400a444>
    a648:	18ffffc4 	addi	r3,r3,-1
    a64c:	18004d1e 	bne	r3,zero,a784 <__adddf3+0x41c>
    a650:	898dc83a 	sub	r6,r17,r6
    a654:	89a3803a 	cmpltu	r17,r17,r6
    a658:	2a0bc83a 	sub	r5,r5,r8
    a65c:	2c4bc83a 	sub	r5,r5,r17
    a660:	3023883a 	mov	r17,r6
    a664:	003f9c06 	br	a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a668:	4184b03a 	or	r2,r8,r6
    a66c:	103f5d26 	beq	r2,zero,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a670:	213fffc4 	addi	r4,r4,-1
    a674:	203fd926 	beq	r4,zero,a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a678:	0081ffc4 	movi	r2,2047
    a67c:	80bfca1e 	bne	r16,r2,a5a8 <__alt_mem_Flash_flash_data+0xf400a5a8>
    a680:	003f5806 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a684:	10c8b03a 	or	r4,r2,r3
    a688:	20008b26 	beq	r4,zero,a8b8 <__adddf3+0x550>
    a68c:	100b883a 	mov	r5,r2
    a690:	1823883a 	mov	r17,r3
    a694:	888001cc 	andi	r2,r17,7
    a698:	103f541e 	bne	r2,zero,a3ec <__alt_mem_Flash_flash_data+0xf400a3ec>
    a69c:	9007883a 	mov	r3,r18
    a6a0:	003fb006 	br	a564 <__alt_mem_Flash_flash_data+0xf400a564>
    a6a4:	1800531e 	bne	r3,zero,a7f4 <__adddf3+0x48c>
    a6a8:	80800044 	addi	r2,r16,1
    a6ac:	1081ffcc 	andi	r2,r2,2047
    a6b0:	00c00044 	movi	r3,1
    a6b4:	1880990e 	bge	r3,r2,a91c <__adddf3+0x5b4>
    a6b8:	8985c83a 	sub	r2,r17,r6
    a6bc:	8887803a 	cmpltu	r3,r17,r2
    a6c0:	2a27c83a 	sub	r19,r5,r8
    a6c4:	98e7c83a 	sub	r19,r19,r3
    a6c8:	98c0202c 	andhi	r3,r19,128
    a6cc:	18006226 	beq	r3,zero,a858 <__adddf3+0x4f0>
    a6d0:	3463c83a 	sub	r17,r6,r17
    a6d4:	4151c83a 	sub	r8,r8,r5
    a6d8:	344d803a 	cmpltu	r6,r6,r17
    a6dc:	41a7c83a 	sub	r19,r8,r6
    a6e0:	3825883a 	mov	r18,r7
    a6e4:	983f821e 	bne	r19,zero,a4f0 <__alt_mem_Flash_flash_data+0xf400a4f0>
    a6e8:	8809883a 	mov	r4,r17
    a6ec:	000c9040 	call	c904 <__clzsi2>
    a6f0:	10800804 	addi	r2,r2,32
    a6f4:	10fffe04 	addi	r3,r2,-8
    a6f8:	010007c4 	movi	r4,31
    a6fc:	20ff810e 	bge	r4,r3,a504 <__alt_mem_Flash_flash_data+0xf400a504>
    a700:	14fff604 	addi	r19,r2,-40
    a704:	8ce6983a 	sll	r19,r17,r19
    a708:	0023883a 	mov	r17,zero
    a70c:	1c3f840e 	bge	r3,r16,a520 <__alt_mem_Flash_flash_data+0xf400a520>
    a710:	017fe034 	movhi	r5,65408
    a714:	297fffc4 	addi	r5,r5,-1
    a718:	80e1c83a 	sub	r16,r16,r3
    a71c:	994a703a 	and	r5,r19,r5
    a720:	003f3006 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a724:	0009883a 	mov	r4,zero
    a728:	0005883a 	mov	r2,zero
    a72c:	003f4506 	br	a444 <__alt_mem_Flash_flash_data+0xf400a444>
    a730:	418cb03a 	or	r6,r8,r6
    a734:	300cc03a 	cmpne	r6,r6,zero
    a738:	0007883a 	mov	r3,zero
    a73c:	003f6106 	br	a4c4 <__alt_mem_Flash_flash_data+0xf400a4c4>
    a740:	2000921e 	bne	r4,zero,a98c <__adddf3+0x624>
    a744:	80800044 	addi	r2,r16,1
    a748:	11c1ffcc 	andi	r7,r2,2047
    a74c:	01000044 	movi	r4,1
    a750:	21c0610e 	bge	r4,r7,a8d8 <__adddf3+0x570>
    a754:	0101ffc4 	movi	r4,2047
    a758:	1100a326 	beq	r2,r4,a9e8 <__adddf3+0x680>
    a75c:	344d883a 	add	r6,r6,r17
    a760:	3463803a 	cmpltu	r17,r6,r17
    a764:	414b883a 	add	r5,r8,r5
    a768:	2c4b883a 	add	r5,r5,r17
    a76c:	282297fa 	slli	r17,r5,31
    a770:	300cd07a 	srli	r6,r6,1
    a774:	280ad07a 	srli	r5,r5,1
    a778:	1021883a 	mov	r16,r2
    a77c:	89a2b03a 	or	r17,r17,r6
    a780:	003f1806 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a784:	0081ffc4 	movi	r2,2047
    a788:	80bf411e 	bne	r16,r2,a490 <__alt_mem_Flash_flash_data+0xf400a490>
    a78c:	003f1506 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a790:	80bff844 	addi	r2,r16,-31
    a794:	00c00804 	movi	r3,32
    a798:	9884d83a 	srl	r2,r19,r2
    a79c:	28c04a26 	beq	r5,r3,a8c8 <__adddf3+0x560>
    a7a0:	00c00fc4 	movi	r3,63
    a7a4:	1c21c83a 	sub	r16,r3,r16
    a7a8:	9c26983a 	sll	r19,r19,r16
    a7ac:	9c62b03a 	or	r17,r19,r17
    a7b0:	8822c03a 	cmpne	r17,r17,zero
    a7b4:	88a2b03a 	or	r17,r17,r2
    a7b8:	000b883a 	mov	r5,zero
    a7bc:	0021883a 	mov	r16,zero
    a7c0:	003fb406 	br	a694 <__alt_mem_Flash_flash_data+0xf400a694>
    a7c4:	18bff804 	addi	r2,r3,-32
    a7c8:	01000804 	movi	r4,32
    a7cc:	4084d83a 	srl	r2,r8,r2
    a7d0:	19003f26 	beq	r3,r4,a8d0 <__adddf3+0x568>
    a7d4:	01001004 	movi	r4,64
    a7d8:	20c7c83a 	sub	r3,r4,r3
    a7dc:	40d0983a 	sll	r8,r8,r3
    a7e0:	418cb03a 	or	r6,r8,r6
    a7e4:	300cc03a 	cmpne	r6,r6,zero
    a7e8:	308cb03a 	or	r6,r6,r2
    a7ec:	0007883a 	mov	r3,zero
    a7f0:	003f3406 	br	a4c4 <__alt_mem_Flash_flash_data+0xf400a4c4>
    a7f4:	80002326 	beq	r16,zero,a884 <__adddf3+0x51c>
    a7f8:	0101ffc4 	movi	r4,2047
    a7fc:	11005e26 	beq	r2,r4,a978 <__adddf3+0x610>
    a800:	00c7c83a 	sub	r3,zero,r3
    a804:	29402034 	orhi	r5,r5,128
    a808:	01000e04 	movi	r4,56
    a80c:	20c07216 	blt	r4,r3,a9d8 <__adddf3+0x670>
    a810:	010007c4 	movi	r4,31
    a814:	20c0ce16 	blt	r4,r3,ab50 <__adddf3+0x7e8>
    a818:	01000804 	movi	r4,32
    a81c:	20c9c83a 	sub	r4,r4,r3
    a820:	2914983a 	sll	r10,r5,r4
    a824:	88d2d83a 	srl	r9,r17,r3
    a828:	8908983a 	sll	r4,r17,r4
    a82c:	28c6d83a 	srl	r3,r5,r3
    a830:	5262b03a 	or	r17,r10,r9
    a834:	2008c03a 	cmpne	r4,r4,zero
    a838:	8922b03a 	or	r17,r17,r4
    a83c:	3463c83a 	sub	r17,r6,r17
    a840:	40c7c83a 	sub	r3,r8,r3
    a844:	344d803a 	cmpltu	r6,r6,r17
    a848:	198bc83a 	sub	r5,r3,r6
    a84c:	1021883a 	mov	r16,r2
    a850:	3825883a 	mov	r18,r7
    a854:	003f2006 	br	a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a858:	9886b03a 	or	r3,r19,r2
    a85c:	1800141e 	bne	r3,zero,a8b0 <__adddf3+0x548>
    a860:	0007883a 	mov	r3,zero
    a864:	000b883a 	mov	r5,zero
    a868:	0023883a 	mov	r17,zero
    a86c:	0021883a 	mov	r16,zero
    a870:	003f3c06 	br	a564 <__alt_mem_Flash_flash_data+0xf400a564>
    a874:	418cb03a 	or	r6,r8,r6
    a878:	300cc03a 	cmpne	r6,r6,zero
    a87c:	0011883a 	mov	r8,zero
    a880:	003f5606 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a884:	2c48b03a 	or	r4,r5,r17
    a888:	20003b26 	beq	r4,zero,a978 <__adddf3+0x610>
    a88c:	00c6303a 	nor	r3,zero,r3
    a890:	1800371e 	bne	r3,zero,a970 <__adddf3+0x608>
    a894:	3463c83a 	sub	r17,r6,r17
    a898:	414bc83a 	sub	r5,r8,r5
    a89c:	344d803a 	cmpltu	r6,r6,r17
    a8a0:	298bc83a 	sub	r5,r5,r6
    a8a4:	1021883a 	mov	r16,r2
    a8a8:	3825883a 	mov	r18,r7
    a8ac:	003f0a06 	br	a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a8b0:	1023883a 	mov	r17,r2
    a8b4:	003f0d06 	br	a4ec <__alt_mem_Flash_flash_data+0xf400a4ec>
    a8b8:	0007883a 	mov	r3,zero
    a8bc:	000b883a 	mov	r5,zero
    a8c0:	0023883a 	mov	r17,zero
    a8c4:	003f2706 	br	a564 <__alt_mem_Flash_flash_data+0xf400a564>
    a8c8:	0027883a 	mov	r19,zero
    a8cc:	003fb706 	br	a7ac <__alt_mem_Flash_flash_data+0xf400a7ac>
    a8d0:	0011883a 	mov	r8,zero
    a8d4:	003fc206 	br	a7e0 <__alt_mem_Flash_flash_data+0xf400a7e0>
    a8d8:	2c44b03a 	or	r2,r5,r17
    a8dc:	8000871e 	bne	r16,zero,aafc <__adddf3+0x794>
    a8e0:	1000b126 	beq	r2,zero,aba8 <__adddf3+0x840>
    a8e4:	4184b03a 	or	r2,r8,r6
    a8e8:	103ebe26 	beq	r2,zero,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a8ec:	3445883a 	add	r2,r6,r17
    a8f0:	1463803a 	cmpltu	r17,r2,r17
    a8f4:	414b883a 	add	r5,r8,r5
    a8f8:	2c4b883a 	add	r5,r5,r17
    a8fc:	28c0202c 	andhi	r3,r5,128
    a900:	1023883a 	mov	r17,r2
    a904:	183f6326 	beq	r3,zero,a694 <__alt_mem_Flash_flash_data+0xf400a694>
    a908:	00bfe034 	movhi	r2,65408
    a90c:	10bfffc4 	addi	r2,r2,-1
    a910:	2021883a 	mov	r16,r4
    a914:	288a703a 	and	r5,r5,r2
    a918:	003eb206 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a91c:	2c44b03a 	or	r2,r5,r17
    a920:	8000251e 	bne	r16,zero,a9b8 <__adddf3+0x650>
    a924:	10004b1e 	bne	r2,zero,aa54 <__adddf3+0x6ec>
    a928:	4184b03a 	or	r2,r8,r6
    a92c:	103fe226 	beq	r2,zero,a8b8 <__alt_mem_Flash_flash_data+0xf400a8b8>
    a930:	400b883a 	mov	r5,r8
    a934:	3023883a 	mov	r17,r6
    a938:	3825883a 	mov	r18,r7
    a93c:	003ea906 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a940:	20bff804 	addi	r2,r4,-32
    a944:	01c00804 	movi	r7,32
    a948:	4084d83a 	srl	r2,r8,r2
    a94c:	21c07e26 	beq	r4,r7,ab48 <__adddf3+0x7e0>
    a950:	01c01004 	movi	r7,64
    a954:	3909c83a 	sub	r4,r7,r4
    a958:	4110983a 	sll	r8,r8,r4
    a95c:	418cb03a 	or	r6,r8,r6
    a960:	300cc03a 	cmpne	r6,r6,zero
    a964:	308cb03a 	or	r6,r6,r2
    a968:	0011883a 	mov	r8,zero
    a96c:	003f1b06 	br	a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a970:	0101ffc4 	movi	r4,2047
    a974:	113fa41e 	bne	r2,r4,a808 <__alt_mem_Flash_flash_data+0xf400a808>
    a978:	400b883a 	mov	r5,r8
    a97c:	3023883a 	mov	r17,r6
    a980:	1021883a 	mov	r16,r2
    a984:	3825883a 	mov	r18,r7
    a988:	003e9606 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a98c:	80001a1e 	bne	r16,zero,a9f8 <__adddf3+0x690>
    a990:	2c4eb03a 	or	r7,r5,r17
    a994:	38005526 	beq	r7,zero,aaec <__adddf3+0x784>
    a998:	0108303a 	nor	r4,zero,r4
    a99c:	2000511e 	bne	r4,zero,aae4 <__adddf3+0x77c>
    a9a0:	89a3883a 	add	r17,r17,r6
    a9a4:	414b883a 	add	r5,r8,r5
    a9a8:	898d803a 	cmpltu	r6,r17,r6
    a9ac:	298b883a 	add	r5,r5,r6
    a9b0:	1021883a 	mov	r16,r2
    a9b4:	003f0e06 	br	a5f0 <__alt_mem_Flash_flash_data+0xf400a5f0>
    a9b8:	1000341e 	bne	r2,zero,aa8c <__adddf3+0x724>
    a9bc:	4184b03a 	or	r2,r8,r6
    a9c0:	10006f26 	beq	r2,zero,ab80 <__adddf3+0x818>
    a9c4:	400b883a 	mov	r5,r8
    a9c8:	3023883a 	mov	r17,r6
    a9cc:	3825883a 	mov	r18,r7
    a9d0:	0401ffc4 	movi	r16,2047
    a9d4:	003e8306 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a9d8:	2c62b03a 	or	r17,r5,r17
    a9dc:	8822c03a 	cmpne	r17,r17,zero
    a9e0:	0007883a 	mov	r3,zero
    a9e4:	003f9506 	br	a83c <__alt_mem_Flash_flash_data+0xf400a83c>
    a9e8:	1021883a 	mov	r16,r2
    a9ec:	000b883a 	mov	r5,zero
    a9f0:	0023883a 	mov	r17,zero
    a9f4:	003edb06 	br	a564 <__alt_mem_Flash_flash_data+0xf400a564>
    a9f8:	01c1ffc4 	movi	r7,2047
    a9fc:	11c03b26 	beq	r2,r7,aaec <__adddf3+0x784>
    aa00:	0109c83a 	sub	r4,zero,r4
    aa04:	29402034 	orhi	r5,r5,128
    aa08:	01c00e04 	movi	r7,56
    aa0c:	39006216 	blt	r7,r4,ab98 <__adddf3+0x830>
    aa10:	01c007c4 	movi	r7,31
    aa14:	39006b16 	blt	r7,r4,abc4 <__adddf3+0x85c>
    aa18:	01c00804 	movi	r7,32
    aa1c:	390fc83a 	sub	r7,r7,r4
    aa20:	29d4983a 	sll	r10,r5,r7
    aa24:	8912d83a 	srl	r9,r17,r4
    aa28:	89ce983a 	sll	r7,r17,r7
    aa2c:	2908d83a 	srl	r4,r5,r4
    aa30:	5262b03a 	or	r17,r10,r9
    aa34:	380ac03a 	cmpne	r5,r7,zero
    aa38:	8962b03a 	or	r17,r17,r5
    aa3c:	89a3883a 	add	r17,r17,r6
    aa40:	2211883a 	add	r8,r4,r8
    aa44:	898d803a 	cmpltu	r6,r17,r6
    aa48:	418b883a 	add	r5,r8,r6
    aa4c:	1021883a 	mov	r16,r2
    aa50:	003ee706 	br	a5f0 <__alt_mem_Flash_flash_data+0xf400a5f0>
    aa54:	4184b03a 	or	r2,r8,r6
    aa58:	103e6226 	beq	r2,zero,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    aa5c:	8987c83a 	sub	r3,r17,r6
    aa60:	88c9803a 	cmpltu	r4,r17,r3
    aa64:	2a05c83a 	sub	r2,r5,r8
    aa68:	1105c83a 	sub	r2,r2,r4
    aa6c:	1100202c 	andhi	r4,r2,128
    aa70:	203f0426 	beq	r4,zero,a684 <__alt_mem_Flash_flash_data+0xf400a684>
    aa74:	3463c83a 	sub	r17,r6,r17
    aa78:	414bc83a 	sub	r5,r8,r5
    aa7c:	344d803a 	cmpltu	r6,r6,r17
    aa80:	298bc83a 	sub	r5,r5,r6
    aa84:	3825883a 	mov	r18,r7
    aa88:	003e5606 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    aa8c:	4184b03a 	or	r2,r8,r6
    aa90:	10002b26 	beq	r2,zero,ab40 <__adddf3+0x7d8>
    aa94:	2804d0fa 	srli	r2,r5,3
    aa98:	8822d0fa 	srli	r17,r17,3
    aa9c:	280a977a 	slli	r5,r5,29
    aaa0:	10c0022c 	andhi	r3,r2,8
    aaa4:	2c62b03a 	or	r17,r5,r17
    aaa8:	18000826 	beq	r3,zero,aacc <__adddf3+0x764>
    aaac:	4008d0fa 	srli	r4,r8,3
    aab0:	20c0022c 	andhi	r3,r4,8
    aab4:	1800051e 	bne	r3,zero,aacc <__adddf3+0x764>
    aab8:	300cd0fa 	srli	r6,r6,3
    aabc:	4010977a 	slli	r8,r8,29
    aac0:	2005883a 	mov	r2,r4
    aac4:	3825883a 	mov	r18,r7
    aac8:	41a2b03a 	or	r17,r8,r6
    aacc:	880ad77a 	srli	r5,r17,29
    aad0:	100490fa 	slli	r2,r2,3
    aad4:	882290fa 	slli	r17,r17,3
    aad8:	0401ffc4 	movi	r16,2047
    aadc:	288ab03a 	or	r5,r5,r2
    aae0:	003e4006 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    aae4:	01c1ffc4 	movi	r7,2047
    aae8:	11ffc71e 	bne	r2,r7,aa08 <__alt_mem_Flash_flash_data+0xf400aa08>
    aaec:	400b883a 	mov	r5,r8
    aaf0:	3023883a 	mov	r17,r6
    aaf4:	1021883a 	mov	r16,r2
    aaf8:	003e3a06 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    aafc:	10002d26 	beq	r2,zero,abb4 <__adddf3+0x84c>
    ab00:	4184b03a 	or	r2,r8,r6
    ab04:	10000e26 	beq	r2,zero,ab40 <__adddf3+0x7d8>
    ab08:	2804d0fa 	srli	r2,r5,3
    ab0c:	8822d0fa 	srli	r17,r17,3
    ab10:	280a977a 	slli	r5,r5,29
    ab14:	10c0022c 	andhi	r3,r2,8
    ab18:	2c62b03a 	or	r17,r5,r17
    ab1c:	183feb26 	beq	r3,zero,aacc <__alt_mem_Flash_flash_data+0xf400aacc>
    ab20:	4008d0fa 	srli	r4,r8,3
    ab24:	20c0022c 	andhi	r3,r4,8
    ab28:	183fe81e 	bne	r3,zero,aacc <__alt_mem_Flash_flash_data+0xf400aacc>
    ab2c:	300cd0fa 	srli	r6,r6,3
    ab30:	4010977a 	slli	r8,r8,29
    ab34:	2005883a 	mov	r2,r4
    ab38:	41a2b03a 	or	r17,r8,r6
    ab3c:	003fe306 	br	aacc <__alt_mem_Flash_flash_data+0xf400aacc>
    ab40:	0401ffc4 	movi	r16,2047
    ab44:	003e2706 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    ab48:	0011883a 	mov	r8,zero
    ab4c:	003f8306 	br	a95c <__alt_mem_Flash_flash_data+0xf400a95c>
    ab50:	193ff804 	addi	r4,r3,-32
    ab54:	02400804 	movi	r9,32
    ab58:	2908d83a 	srl	r4,r5,r4
    ab5c:	1a402526 	beq	r3,r9,abf4 <__adddf3+0x88c>
    ab60:	02401004 	movi	r9,64
    ab64:	48c7c83a 	sub	r3,r9,r3
    ab68:	28ca983a 	sll	r5,r5,r3
    ab6c:	2c62b03a 	or	r17,r5,r17
    ab70:	8822c03a 	cmpne	r17,r17,zero
    ab74:	8922b03a 	or	r17,r17,r4
    ab78:	0007883a 	mov	r3,zero
    ab7c:	003f2f06 	br	a83c <__alt_mem_Flash_flash_data+0xf400a83c>
    ab80:	01402034 	movhi	r5,128
    ab84:	0007883a 	mov	r3,zero
    ab88:	297fffc4 	addi	r5,r5,-1
    ab8c:	047ffe04 	movi	r17,-8
    ab90:	0401ffc4 	movi	r16,2047
    ab94:	003e7306 	br	a564 <__alt_mem_Flash_flash_data+0xf400a564>
    ab98:	2c62b03a 	or	r17,r5,r17
    ab9c:	8822c03a 	cmpne	r17,r17,zero
    aba0:	0009883a 	mov	r4,zero
    aba4:	003fa506 	br	aa3c <__alt_mem_Flash_flash_data+0xf400aa3c>
    aba8:	400b883a 	mov	r5,r8
    abac:	3023883a 	mov	r17,r6
    abb0:	003e0c06 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    abb4:	400b883a 	mov	r5,r8
    abb8:	3023883a 	mov	r17,r6
    abbc:	0401ffc4 	movi	r16,2047
    abc0:	003e0806 	br	a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    abc4:	21fff804 	addi	r7,r4,-32
    abc8:	02400804 	movi	r9,32
    abcc:	29ced83a 	srl	r7,r5,r7
    abd0:	22400a26 	beq	r4,r9,abfc <__adddf3+0x894>
    abd4:	02401004 	movi	r9,64
    abd8:	4909c83a 	sub	r4,r9,r4
    abdc:	290a983a 	sll	r5,r5,r4
    abe0:	2c62b03a 	or	r17,r5,r17
    abe4:	8822c03a 	cmpne	r17,r17,zero
    abe8:	89e2b03a 	or	r17,r17,r7
    abec:	0009883a 	mov	r4,zero
    abf0:	003f9206 	br	aa3c <__alt_mem_Flash_flash_data+0xf400aa3c>
    abf4:	000b883a 	mov	r5,zero
    abf8:	003fdc06 	br	ab6c <__alt_mem_Flash_flash_data+0xf400ab6c>
    abfc:	000b883a 	mov	r5,zero
    ac00:	003ff706 	br	abe0 <__alt_mem_Flash_flash_data+0xf400abe0>

0000ac04 <__divdf3>:
    ac04:	defff204 	addi	sp,sp,-56
    ac08:	dd000815 	stw	r20,32(sp)
    ac0c:	2828d53a 	srli	r20,r5,20
    ac10:	dd800a15 	stw	r22,40(sp)
    ac14:	282cd7fa 	srli	r22,r5,31
    ac18:	dc000415 	stw	r16,16(sp)
    ac1c:	04000434 	movhi	r16,16
    ac20:	df000c15 	stw	fp,48(sp)
    ac24:	dcc00715 	stw	r19,28(sp)
    ac28:	dc800615 	stw	r18,24(sp)
    ac2c:	dc400515 	stw	r17,20(sp)
    ac30:	843fffc4 	addi	r16,r16,-1
    ac34:	dfc00d15 	stw	ra,52(sp)
    ac38:	ddc00b15 	stw	r23,44(sp)
    ac3c:	dd400915 	stw	r21,36(sp)
    ac40:	a501ffcc 	andi	r20,r20,2047
    ac44:	2025883a 	mov	r18,r4
    ac48:	2027883a 	mov	r19,r4
    ac4c:	2c22703a 	and	r17,r5,r16
    ac50:	b7003fcc 	andi	fp,r22,255
    ac54:	a0005e26 	beq	r20,zero,add0 <__divdf3+0x1cc>
    ac58:	0081ffc4 	movi	r2,2047
    ac5c:	a0803526 	beq	r20,r2,ad34 <__divdf3+0x130>
    ac60:	8c000434 	orhi	r16,r17,16
    ac64:	2004d77a 	srli	r2,r4,29
    ac68:	802090fa 	slli	r16,r16,3
    ac6c:	202690fa 	slli	r19,r4,3
    ac70:	a53f0044 	addi	r20,r20,-1023
    ac74:	80a2b03a 	or	r17,r16,r2
    ac78:	0025883a 	mov	r18,zero
    ac7c:	0011883a 	mov	r8,zero
    ac80:	380ad53a 	srli	r5,r7,20
    ac84:	382ed7fa 	srli	r23,r7,31
    ac88:	04000434 	movhi	r16,16
    ac8c:	843fffc4 	addi	r16,r16,-1
    ac90:	2941ffcc 	andi	r5,r5,2047
    ac94:	302b883a 	mov	r21,r6
    ac98:	3c20703a 	and	r16,r7,r16
    ac9c:	ba403fcc 	andi	r9,r23,255
    aca0:	28006726 	beq	r5,zero,ae40 <__divdf3+0x23c>
    aca4:	0081ffc4 	movi	r2,2047
    aca8:	28805f26 	beq	r5,r2,ae28 <__divdf3+0x224>
    acac:	84000434 	orhi	r16,r16,16
    acb0:	3004d77a 	srli	r2,r6,29
    acb4:	802090fa 	slli	r16,r16,3
    acb8:	302a90fa 	slli	r21,r6,3
    acbc:	297f0044 	addi	r5,r5,-1023
    acc0:	80a0b03a 	or	r16,r16,r2
    acc4:	000f883a 	mov	r7,zero
    acc8:	3c86b03a 	or	r3,r7,r18
    accc:	180690ba 	slli	r3,r3,2
    acd0:	00800074 	movhi	r2,1
    acd4:	10ab3d04 	addi	r2,r2,-21260
    acd8:	1887883a 	add	r3,r3,r2
    acdc:	18c00017 	ldw	r3,0(r3)
    ace0:	b5c8f03a 	xor	r4,r22,r23
    ace4:	200d883a 	mov	r6,r4
    ace8:	24803fcc 	andi	r18,r4,255
    acec:	a169c83a 	sub	r20,r20,r5
    acf0:	1800683a 	jmp	r3
    acf4:	0000af3c 	xorhi	zero,zero,700
    acf8:	0000ad6c 	andhi	zero,zero,693
    acfc:	0000af00 	call	af0 <___vfprintf_internal_r+0x2e8>
    ad00:	0000ad50 	cmplti	zero,zero,693
    ad04:	0000af00 	call	af0 <___vfprintf_internal_r+0x2e8>
    ad08:	0000aed4 	movui	zero,699
    ad0c:	0000af00 	call	af0 <___vfprintf_internal_r+0x2e8>
    ad10:	0000ad50 	cmplti	zero,zero,693
    ad14:	0000ad6c 	andhi	zero,zero,693
    ad18:	0000ad6c 	andhi	zero,zero,693
    ad1c:	0000aed4 	movui	zero,699
    ad20:	0000ad50 	cmplti	zero,zero,693
    ad24:	0000ad60 	cmpeqi	zero,zero,693
    ad28:	0000ad60 	cmpeqi	zero,zero,693
    ad2c:	0000ad60 	cmpeqi	zero,zero,693
    ad30:	0000af10 	cmplti	zero,zero,700
    ad34:	8904b03a 	or	r2,r17,r4
    ad38:	1000631e 	bne	r2,zero,aec8 <__divdf3+0x2c4>
    ad3c:	04800204 	movi	r18,8
    ad40:	0023883a 	mov	r17,zero
    ad44:	0027883a 	mov	r19,zero
    ad48:	02000084 	movi	r8,2
    ad4c:	003fcc06 	br	ac80 <__alt_mem_Flash_flash_data+0xf400ac80>
    ad50:	8023883a 	mov	r17,r16
    ad54:	a827883a 	mov	r19,r21
    ad58:	4839883a 	mov	fp,r9
    ad5c:	3811883a 	mov	r8,r7
    ad60:	00800084 	movi	r2,2
    ad64:	40812a1e 	bne	r8,r2,b210 <__divdf3+0x60c>
    ad68:	e025883a 	mov	r18,fp
    ad6c:	9180004c 	andi	r6,r18,1
    ad70:	0101ffc4 	movi	r4,2047
    ad74:	000b883a 	mov	r5,zero
    ad78:	0027883a 	mov	r19,zero
    ad7c:	2008953a 	slli	r4,r4,20
    ad80:	30c03fcc 	andi	r3,r6,255
    ad84:	04000434 	movhi	r16,16
    ad88:	180697fa 	slli	r3,r3,31
    ad8c:	843fffc4 	addi	r16,r16,-1
    ad90:	2c20703a 	and	r16,r5,r16
    ad94:	8120b03a 	or	r16,r16,r4
    ad98:	80c6b03a 	or	r3,r16,r3
    ad9c:	9805883a 	mov	r2,r19
    ada0:	dfc00d17 	ldw	ra,52(sp)
    ada4:	df000c17 	ldw	fp,48(sp)
    ada8:	ddc00b17 	ldw	r23,44(sp)
    adac:	dd800a17 	ldw	r22,40(sp)
    adb0:	dd400917 	ldw	r21,36(sp)
    adb4:	dd000817 	ldw	r20,32(sp)
    adb8:	dcc00717 	ldw	r19,28(sp)
    adbc:	dc800617 	ldw	r18,24(sp)
    adc0:	dc400517 	ldw	r17,20(sp)
    adc4:	dc000417 	ldw	r16,16(sp)
    adc8:	dec00e04 	addi	sp,sp,56
    adcc:	f800283a 	ret
    add0:	8904b03a 	or	r2,r17,r4
    add4:	10003726 	beq	r2,zero,aeb4 <__divdf3+0x2b0>
    add8:	88011c26 	beq	r17,zero,b24c <__divdf3+0x648>
    addc:	8809883a 	mov	r4,r17
    ade0:	d9800315 	stw	r6,12(sp)
    ade4:	d9c00115 	stw	r7,4(sp)
    ade8:	000c9040 	call	c904 <__clzsi2>
    adec:	d9800317 	ldw	r6,12(sp)
    adf0:	d9c00117 	ldw	r7,4(sp)
    adf4:	1007883a 	mov	r3,r2
    adf8:	01000a04 	movi	r4,40
    adfc:	1cfffe04 	addi	r19,r3,-8
    ae00:	20c9c83a 	sub	r4,r4,r3
    ae04:	8cca983a 	sll	r5,r17,r19
    ae08:	9108d83a 	srl	r4,r18,r4
    ae0c:	94e6983a 	sll	r19,r18,r19
    ae10:	2162b03a 	or	r17,r4,r5
    ae14:	053f0344 	movi	r20,-1011
    ae18:	a0e9c83a 	sub	r20,r20,r3
    ae1c:	0025883a 	mov	r18,zero
    ae20:	0011883a 	mov	r8,zero
    ae24:	003f9606 	br	ac80 <__alt_mem_Flash_flash_data+0xf400ac80>
    ae28:	8184b03a 	or	r2,r16,r6
    ae2c:	10001f1e 	bne	r2,zero,aeac <__divdf3+0x2a8>
    ae30:	0021883a 	mov	r16,zero
    ae34:	002b883a 	mov	r21,zero
    ae38:	01c00084 	movi	r7,2
    ae3c:	003fa206 	br	acc8 <__alt_mem_Flash_flash_data+0xf400acc8>
    ae40:	8184b03a 	or	r2,r16,r6
    ae44:	10001526 	beq	r2,zero,ae9c <__divdf3+0x298>
    ae48:	80010c26 	beq	r16,zero,b27c <__divdf3+0x678>
    ae4c:	8009883a 	mov	r4,r16
    ae50:	d9800315 	stw	r6,12(sp)
    ae54:	da000215 	stw	r8,8(sp)
    ae58:	da400015 	stw	r9,0(sp)
    ae5c:	000c9040 	call	c904 <__clzsi2>
    ae60:	d9800317 	ldw	r6,12(sp)
    ae64:	da000217 	ldw	r8,8(sp)
    ae68:	da400017 	ldw	r9,0(sp)
    ae6c:	1007883a 	mov	r3,r2
    ae70:	01000a04 	movi	r4,40
    ae74:	1d7ffe04 	addi	r21,r3,-8
    ae78:	20c9c83a 	sub	r4,r4,r3
    ae7c:	8560983a 	sll	r16,r16,r21
    ae80:	3108d83a 	srl	r4,r6,r4
    ae84:	356a983a 	sll	r21,r6,r21
    ae88:	2420b03a 	or	r16,r4,r16
    ae8c:	017f0344 	movi	r5,-1011
    ae90:	28cbc83a 	sub	r5,r5,r3
    ae94:	000f883a 	mov	r7,zero
    ae98:	003f8b06 	br	acc8 <__alt_mem_Flash_flash_data+0xf400acc8>
    ae9c:	0021883a 	mov	r16,zero
    aea0:	002b883a 	mov	r21,zero
    aea4:	01c00044 	movi	r7,1
    aea8:	003f8706 	br	acc8 <__alt_mem_Flash_flash_data+0xf400acc8>
    aeac:	01c000c4 	movi	r7,3
    aeb0:	003f8506 	br	acc8 <__alt_mem_Flash_flash_data+0xf400acc8>
    aeb4:	04800104 	movi	r18,4
    aeb8:	0023883a 	mov	r17,zero
    aebc:	0027883a 	mov	r19,zero
    aec0:	02000044 	movi	r8,1
    aec4:	003f6e06 	br	ac80 <__alt_mem_Flash_flash_data+0xf400ac80>
    aec8:	04800304 	movi	r18,12
    aecc:	020000c4 	movi	r8,3
    aed0:	003f6b06 	br	ac80 <__alt_mem_Flash_flash_data+0xf400ac80>
    aed4:	01400434 	movhi	r5,16
    aed8:	000d883a 	mov	r6,zero
    aedc:	297fffc4 	addi	r5,r5,-1
    aee0:	04ffffc4 	movi	r19,-1
    aee4:	0101ffc4 	movi	r4,2047
    aee8:	003fa406 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    aeec:	043f0084 	movi	r16,-1022
    aef0:	8521c83a 	sub	r16,r16,r20
    aef4:	00800e04 	movi	r2,56
    aef8:	1401200e 	bge	r2,r16,b37c <__divdf3+0x778>
    aefc:	9180004c 	andi	r6,r18,1
    af00:	0009883a 	mov	r4,zero
    af04:	000b883a 	mov	r5,zero
    af08:	0027883a 	mov	r19,zero
    af0c:	003f9b06 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    af10:	8880022c 	andhi	r2,r17,8
    af14:	1000c726 	beq	r2,zero,b234 <__divdf3+0x630>
    af18:	8080022c 	andhi	r2,r16,8
    af1c:	1000c51e 	bne	r2,zero,b234 <__divdf3+0x630>
    af20:	00800434 	movhi	r2,16
    af24:	81400234 	orhi	r5,r16,8
    af28:	10bfffc4 	addi	r2,r2,-1
    af2c:	b80d883a 	mov	r6,r23
    af30:	288a703a 	and	r5,r5,r2
    af34:	a827883a 	mov	r19,r21
    af38:	003fea06 	br	aee4 <__alt_mem_Flash_flash_data+0xf400aee4>
    af3c:	8440ea36 	bltu	r16,r17,b2e8 <__divdf3+0x6e4>
    af40:	8c00e826 	beq	r17,r16,b2e4 <__divdf3+0x6e0>
    af44:	a53fffc4 	addi	r20,r20,-1
    af48:	882d883a 	mov	r22,r17
    af4c:	000d883a 	mov	r6,zero
    af50:	a804d63a 	srli	r2,r21,24
    af54:	8020923a 	slli	r16,r16,8
    af58:	b009883a 	mov	r4,r22
    af5c:	d9800315 	stw	r6,12(sp)
    af60:	1420b03a 	or	r16,r2,r16
    af64:	802ed43a 	srli	r23,r16,16
    af68:	873fffcc 	andi	fp,r16,65535
    af6c:	a82a923a 	slli	r21,r21,8
    af70:	b80b883a 	mov	r5,r23
    af74:	000a3580 	call	a358 <__udivsi3>
    af78:	b009883a 	mov	r4,r22
    af7c:	b80b883a 	mov	r5,r23
    af80:	1023883a 	mov	r17,r2
    af84:	000a3600 	call	a360 <__umodsi3>
    af88:	1004943a 	slli	r2,r2,16
    af8c:	9808d43a 	srli	r4,r19,16
    af90:	8f2d383a 	mul	r22,r17,fp
    af94:	d9800317 	ldw	r6,12(sp)
    af98:	1106b03a 	or	r3,r2,r4
    af9c:	1d80062e 	bgeu	r3,r22,afb8 <__divdf3+0x3b4>
    afa0:	1c07883a 	add	r3,r3,r16
    afa4:	88bfffc4 	addi	r2,r17,-1
    afa8:	1c00dc36 	bltu	r3,r16,b31c <__divdf3+0x718>
    afac:	1d80db2e 	bgeu	r3,r22,b31c <__divdf3+0x718>
    afb0:	8c7fff84 	addi	r17,r17,-2
    afb4:	1c07883a 	add	r3,r3,r16
    afb8:	1dadc83a 	sub	r22,r3,r22
    afbc:	b009883a 	mov	r4,r22
    afc0:	b80b883a 	mov	r5,r23
    afc4:	d9800315 	stw	r6,12(sp)
    afc8:	000a3580 	call	a358 <__udivsi3>
    afcc:	b009883a 	mov	r4,r22
    afd0:	b80b883a 	mov	r5,r23
    afd4:	d8800015 	stw	r2,0(sp)
    afd8:	000a3600 	call	a360 <__umodsi3>
    afdc:	da400017 	ldw	r9,0(sp)
    afe0:	1004943a 	slli	r2,r2,16
    afe4:	9cffffcc 	andi	r19,r19,65535
    afe8:	4f07383a 	mul	r3,r9,fp
    afec:	14c8b03a 	or	r4,r2,r19
    aff0:	d9800317 	ldw	r6,12(sp)
    aff4:	20c0062e 	bgeu	r4,r3,b010 <__divdf3+0x40c>
    aff8:	2409883a 	add	r4,r4,r16
    affc:	48bfffc4 	addi	r2,r9,-1
    b000:	2400c436 	bltu	r4,r16,b314 <__divdf3+0x710>
    b004:	20c0c32e 	bgeu	r4,r3,b314 <__divdf3+0x710>
    b008:	4a7fff84 	addi	r9,r9,-2
    b00c:	2409883a 	add	r4,r4,r16
    b010:	8822943a 	slli	r17,r17,16
    b014:	a80ed43a 	srli	r7,r21,16
    b018:	aa3fffcc 	andi	r8,r21,65535
    b01c:	4c62b03a 	or	r17,r9,r17
    b020:	8816d43a 	srli	r11,r17,16
    b024:	897fffcc 	andi	r5,r17,65535
    b028:	2a15383a 	mul	r10,r5,r8
    b02c:	5a19383a 	mul	r12,r11,r8
    b030:	29cb383a 	mul	r5,r5,r7
    b034:	5012d43a 	srli	r9,r10,16
    b038:	20c5c83a 	sub	r2,r4,r3
    b03c:	614b883a 	add	r5,r12,r5
    b040:	2a4b883a 	add	r5,r5,r9
    b044:	59c7383a 	mul	r3,r11,r7
    b048:	2b00022e 	bgeu	r5,r12,b054 <__divdf3+0x450>
    b04c:	01000074 	movhi	r4,1
    b050:	1907883a 	add	r3,r3,r4
    b054:	2808d43a 	srli	r4,r5,16
    b058:	280a943a 	slli	r5,r5,16
    b05c:	54ffffcc 	andi	r19,r10,65535
    b060:	1907883a 	add	r3,r3,r4
    b064:	2ccb883a 	add	r5,r5,r19
    b068:	10c09336 	bltu	r2,r3,b2b8 <__divdf3+0x6b4>
    b06c:	10c0ad26 	beq	r2,r3,b324 <__divdf3+0x720>
    b070:	10c7c83a 	sub	r3,r2,r3
    b074:	3167c83a 	sub	r19,r6,r5
    b078:	34ed803a 	cmpltu	r22,r6,r19
    b07c:	1dadc83a 	sub	r22,r3,r22
    b080:	b400b226 	beq	r22,r16,b34c <__divdf3+0x748>
    b084:	b009883a 	mov	r4,r22
    b088:	b80b883a 	mov	r5,r23
    b08c:	d9c00115 	stw	r7,4(sp)
    b090:	da000215 	stw	r8,8(sp)
    b094:	000a3580 	call	a358 <__udivsi3>
    b098:	b009883a 	mov	r4,r22
    b09c:	b80b883a 	mov	r5,r23
    b0a0:	d8800315 	stw	r2,12(sp)
    b0a4:	000a3600 	call	a360 <__umodsi3>
    b0a8:	d9800317 	ldw	r6,12(sp)
    b0ac:	1004943a 	slli	r2,r2,16
    b0b0:	9808d43a 	srli	r4,r19,16
    b0b4:	372d383a 	mul	r22,r6,fp
    b0b8:	d9c00117 	ldw	r7,4(sp)
    b0bc:	1106b03a 	or	r3,r2,r4
    b0c0:	da000217 	ldw	r8,8(sp)
    b0c4:	1d80062e 	bgeu	r3,r22,b0e0 <__divdf3+0x4dc>
    b0c8:	1c07883a 	add	r3,r3,r16
    b0cc:	30bfffc4 	addi	r2,r6,-1
    b0d0:	1c00a036 	bltu	r3,r16,b354 <__divdf3+0x750>
    b0d4:	1d809f2e 	bgeu	r3,r22,b354 <__divdf3+0x750>
    b0d8:	31bfff84 	addi	r6,r6,-2
    b0dc:	1c07883a 	add	r3,r3,r16
    b0e0:	1dadc83a 	sub	r22,r3,r22
    b0e4:	b009883a 	mov	r4,r22
    b0e8:	b80b883a 	mov	r5,r23
    b0ec:	d9800315 	stw	r6,12(sp)
    b0f0:	d9c00115 	stw	r7,4(sp)
    b0f4:	da000215 	stw	r8,8(sp)
    b0f8:	000a3580 	call	a358 <__udivsi3>
    b0fc:	b009883a 	mov	r4,r22
    b100:	b80b883a 	mov	r5,r23
    b104:	d8800015 	stw	r2,0(sp)
    b108:	000a3600 	call	a360 <__umodsi3>
    b10c:	da400017 	ldw	r9,0(sp)
    b110:	1004943a 	slli	r2,r2,16
    b114:	993fffcc 	andi	r4,r19,65535
    b118:	4f39383a 	mul	fp,r9,fp
    b11c:	1106b03a 	or	r3,r2,r4
    b120:	d9800317 	ldw	r6,12(sp)
    b124:	d9c00117 	ldw	r7,4(sp)
    b128:	da000217 	ldw	r8,8(sp)
    b12c:	1f00062e 	bgeu	r3,fp,b148 <__divdf3+0x544>
    b130:	1c07883a 	add	r3,r3,r16
    b134:	48bfffc4 	addi	r2,r9,-1
    b138:	1c008836 	bltu	r3,r16,b35c <__divdf3+0x758>
    b13c:	1f00872e 	bgeu	r3,fp,b35c <__divdf3+0x758>
    b140:	4a7fff84 	addi	r9,r9,-2
    b144:	1c07883a 	add	r3,r3,r16
    b148:	3008943a 	slli	r4,r6,16
    b14c:	1f07c83a 	sub	r3,r3,fp
    b150:	4926b03a 	or	r19,r9,r4
    b154:	993fffcc 	andi	r4,r19,65535
    b158:	980cd43a 	srli	r6,r19,16
    b15c:	220b383a 	mul	r5,r4,r8
    b160:	21c5383a 	mul	r2,r4,r7
    b164:	3211383a 	mul	r8,r6,r8
    b168:	2808d43a 	srli	r4,r5,16
    b16c:	31cf383a 	mul	r7,r6,r7
    b170:	4085883a 	add	r2,r8,r2
    b174:	1105883a 	add	r2,r2,r4
    b178:	1200022e 	bgeu	r2,r8,b184 <__divdf3+0x580>
    b17c:	01000074 	movhi	r4,1
    b180:	390f883a 	add	r7,r7,r4
    b184:	1008d43a 	srli	r4,r2,16
    b188:	1004943a 	slli	r2,r2,16
    b18c:	297fffcc 	andi	r5,r5,65535
    b190:	390f883a 	add	r7,r7,r4
    b194:	1145883a 	add	r2,r2,r5
    b198:	19c06536 	bltu	r3,r7,b330 <__divdf3+0x72c>
    b19c:	19c09f26 	beq	r3,r7,b41c <__divdf3+0x818>
    b1a0:	9cc00054 	ori	r19,r19,1
    b1a4:	a100ffc4 	addi	r4,r20,1023
    b1a8:	013f500e 	bge	zero,r4,aeec <__alt_mem_Flash_flash_data+0xf400aeec>
    b1ac:	988001cc 	andi	r2,r19,7
    b1b0:	10000726 	beq	r2,zero,b1d0 <__divdf3+0x5cc>
    b1b4:	98c003cc 	andi	r3,r19,15
    b1b8:	00800104 	movi	r2,4
    b1bc:	18800426 	beq	r3,r2,b1d0 <__divdf3+0x5cc>
    b1c0:	9885883a 	add	r2,r19,r2
    b1c4:	14e1803a 	cmpltu	r16,r2,r19
    b1c8:	8c23883a 	add	r17,r17,r16
    b1cc:	1027883a 	mov	r19,r2
    b1d0:	8880402c 	andhi	r2,r17,256
    b1d4:	10000426 	beq	r2,zero,b1e8 <__divdf3+0x5e4>
    b1d8:	00bfc034 	movhi	r2,65280
    b1dc:	10bfffc4 	addi	r2,r2,-1
    b1e0:	a1010004 	addi	r4,r20,1024
    b1e4:	88a2703a 	and	r17,r17,r2
    b1e8:	0081ff84 	movi	r2,2046
    b1ec:	113edf16 	blt	r2,r4,ad6c <__alt_mem_Flash_flash_data+0xf400ad6c>
    b1f0:	9826d0fa 	srli	r19,r19,3
    b1f4:	8804977a 	slli	r2,r17,29
    b1f8:	8820927a 	slli	r16,r17,9
    b1fc:	2101ffcc 	andi	r4,r4,2047
    b200:	14e6b03a 	or	r19,r2,r19
    b204:	800ad33a 	srli	r5,r16,12
    b208:	9180004c 	andi	r6,r18,1
    b20c:	003edb06 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    b210:	008000c4 	movi	r2,3
    b214:	4080a826 	beq	r8,r2,b4b8 <__divdf3+0x8b4>
    b218:	00800044 	movi	r2,1
    b21c:	4080551e 	bne	r8,r2,b374 <__divdf3+0x770>
    b220:	e00d883a 	mov	r6,fp
    b224:	0009883a 	mov	r4,zero
    b228:	000b883a 	mov	r5,zero
    b22c:	0027883a 	mov	r19,zero
    b230:	003ed206 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    b234:	00800434 	movhi	r2,16
    b238:	89400234 	orhi	r5,r17,8
    b23c:	10bfffc4 	addi	r2,r2,-1
    b240:	b00d883a 	mov	r6,r22
    b244:	288a703a 	and	r5,r5,r2
    b248:	003f2606 	br	aee4 <__alt_mem_Flash_flash_data+0xf400aee4>
    b24c:	d9800315 	stw	r6,12(sp)
    b250:	d9c00115 	stw	r7,4(sp)
    b254:	000c9040 	call	c904 <__clzsi2>
    b258:	10c00804 	addi	r3,r2,32
    b25c:	010009c4 	movi	r4,39
    b260:	d9800317 	ldw	r6,12(sp)
    b264:	d9c00117 	ldw	r7,4(sp)
    b268:	20fee30e 	bge	r4,r3,adf8 <__alt_mem_Flash_flash_data+0xf400adf8>
    b26c:	117ffe04 	addi	r5,r2,-8
    b270:	9162983a 	sll	r17,r18,r5
    b274:	0027883a 	mov	r19,zero
    b278:	003ee606 	br	ae14 <__alt_mem_Flash_flash_data+0xf400ae14>
    b27c:	3009883a 	mov	r4,r6
    b280:	d9800315 	stw	r6,12(sp)
    b284:	da000215 	stw	r8,8(sp)
    b288:	da400015 	stw	r9,0(sp)
    b28c:	000c9040 	call	c904 <__clzsi2>
    b290:	10c00804 	addi	r3,r2,32
    b294:	010009c4 	movi	r4,39
    b298:	d9800317 	ldw	r6,12(sp)
    b29c:	da000217 	ldw	r8,8(sp)
    b2a0:	da400017 	ldw	r9,0(sp)
    b2a4:	20fef20e 	bge	r4,r3,ae70 <__alt_mem_Flash_flash_data+0xf400ae70>
    b2a8:	10bffe04 	addi	r2,r2,-8
    b2ac:	a8a0983a 	sll	r16,r21,r2
    b2b0:	002b883a 	mov	r21,zero
    b2b4:	003ef506 	br	ae8c <__alt_mem_Flash_flash_data+0xf400ae8c>
    b2b8:	354d883a 	add	r6,r6,r21
    b2bc:	3549803a 	cmpltu	r4,r6,r21
    b2c0:	2409883a 	add	r4,r4,r16
    b2c4:	2089883a 	add	r4,r4,r2
    b2c8:	88bfffc4 	addi	r2,r17,-1
    b2cc:	81000c2e 	bgeu	r16,r4,b300 <__divdf3+0x6fc>
    b2d0:	20c04436 	bltu	r4,r3,b3e4 <__divdf3+0x7e0>
    b2d4:	19006f26 	beq	r3,r4,b494 <__divdf3+0x890>
    b2d8:	20c7c83a 	sub	r3,r4,r3
    b2dc:	1023883a 	mov	r17,r2
    b2e0:	003f6406 	br	b074 <__alt_mem_Flash_flash_data+0xf400b074>
    b2e4:	9d7f1736 	bltu	r19,r21,af44 <__alt_mem_Flash_flash_data+0xf400af44>
    b2e8:	9806d07a 	srli	r3,r19,1
    b2ec:	880497fa 	slli	r2,r17,31
    b2f0:	980c97fa 	slli	r6,r19,31
    b2f4:	882cd07a 	srli	r22,r17,1
    b2f8:	18a6b03a 	or	r19,r3,r2
    b2fc:	003f1406 	br	af50 <__alt_mem_Flash_flash_data+0xf400af50>
    b300:	243ff51e 	bne	r4,r16,b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b304:	357ff22e 	bgeu	r6,r21,b2d0 <__alt_mem_Flash_flash_data+0xf400b2d0>
    b308:	80c7c83a 	sub	r3,r16,r3
    b30c:	1023883a 	mov	r17,r2
    b310:	003f5806 	br	b074 <__alt_mem_Flash_flash_data+0xf400b074>
    b314:	1013883a 	mov	r9,r2
    b318:	003f3d06 	br	b010 <__alt_mem_Flash_flash_data+0xf400b010>
    b31c:	1023883a 	mov	r17,r2
    b320:	003f2506 	br	afb8 <__alt_mem_Flash_flash_data+0xf400afb8>
    b324:	317fe436 	bltu	r6,r5,b2b8 <__alt_mem_Flash_flash_data+0xf400b2b8>
    b328:	0007883a 	mov	r3,zero
    b32c:	003f5106 	br	b074 <__alt_mem_Flash_flash_data+0xf400b074>
    b330:	1c07883a 	add	r3,r3,r16
    b334:	993fffc4 	addi	r4,r19,-1
    b338:	1c000a2e 	bgeu	r3,r16,b364 <__divdf3+0x760>
    b33c:	2027883a 	mov	r19,r4
    b340:	19ff971e 	bne	r3,r7,b1a0 <__alt_mem_Flash_flash_data+0xf400b1a0>
    b344:	a8bf961e 	bne	r21,r2,b1a0 <__alt_mem_Flash_flash_data+0xf400b1a0>
    b348:	003f9606 	br	b1a4 <__alt_mem_Flash_flash_data+0xf400b1a4>
    b34c:	04ffffc4 	movi	r19,-1
    b350:	003f9406 	br	b1a4 <__alt_mem_Flash_flash_data+0xf400b1a4>
    b354:	100d883a 	mov	r6,r2
    b358:	003f6106 	br	b0e0 <__alt_mem_Flash_flash_data+0xf400b0e0>
    b35c:	1013883a 	mov	r9,r2
    b360:	003f7906 	br	b148 <__alt_mem_Flash_flash_data+0xf400b148>
    b364:	19c02636 	bltu	r3,r7,b400 <__divdf3+0x7fc>
    b368:	38c04d26 	beq	r7,r3,b4a0 <__divdf3+0x89c>
    b36c:	2027883a 	mov	r19,r4
    b370:	003f8b06 	br	b1a0 <__alt_mem_Flash_flash_data+0xf400b1a0>
    b374:	e025883a 	mov	r18,fp
    b378:	003f8a06 	br	b1a4 <__alt_mem_Flash_flash_data+0xf400b1a4>
    b37c:	008007c4 	movi	r2,31
    b380:	14002a16 	blt	r2,r16,b42c <__divdf3+0x828>
    b384:	a5010784 	addi	r20,r20,1054
    b388:	8d04983a 	sll	r2,r17,r20
    b38c:	9c06d83a 	srl	r3,r19,r16
    b390:	9d28983a 	sll	r20,r19,r20
    b394:	8c20d83a 	srl	r16,r17,r16
    b398:	1886b03a 	or	r3,r3,r2
    b39c:	a004c03a 	cmpne	r2,r20,zero
    b3a0:	1884b03a 	or	r2,r3,r2
    b3a4:	10c001cc 	andi	r3,r2,7
    b3a8:	18000726 	beq	r3,zero,b3c8 <__divdf3+0x7c4>
    b3ac:	110003cc 	andi	r4,r2,15
    b3b0:	00c00104 	movi	r3,4
    b3b4:	20c00426 	beq	r4,r3,b3c8 <__divdf3+0x7c4>
    b3b8:	10c00104 	addi	r3,r2,4
    b3bc:	1885803a 	cmpltu	r2,r3,r2
    b3c0:	80a1883a 	add	r16,r16,r2
    b3c4:	1805883a 	mov	r2,r3
    b3c8:	80c0202c 	andhi	r3,r16,128
    b3cc:	18002d26 	beq	r3,zero,b484 <__divdf3+0x880>
    b3d0:	9180004c 	andi	r6,r18,1
    b3d4:	01000044 	movi	r4,1
    b3d8:	000b883a 	mov	r5,zero
    b3dc:	0027883a 	mov	r19,zero
    b3e0:	003e6606 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    b3e4:	354d883a 	add	r6,r6,r21
    b3e8:	356d803a 	cmpltu	r22,r6,r21
    b3ec:	b42d883a 	add	r22,r22,r16
    b3f0:	b12d883a 	add	r22,r22,r4
    b3f4:	8c7fff84 	addi	r17,r17,-2
    b3f8:	b0c7c83a 	sub	r3,r22,r3
    b3fc:	003f1d06 	br	b074 <__alt_mem_Flash_flash_data+0xf400b074>
    b400:	ad4b883a 	add	r5,r21,r21
    b404:	2d6b803a 	cmpltu	r21,r5,r21
    b408:	ac2b883a 	add	r21,r21,r16
    b40c:	1d47883a 	add	r3,r3,r21
    b410:	993fff84 	addi	r4,r19,-2
    b414:	282b883a 	mov	r21,r5
    b418:	003fc806 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b41c:	103fc41e 	bne	r2,zero,b330 <__alt_mem_Flash_flash_data+0xf400b330>
    b420:	002b883a 	mov	r21,zero
    b424:	a8bf5e1e 	bne	r21,r2,b1a0 <__alt_mem_Flash_flash_data+0xf400b1a0>
    b428:	003f5e06 	br	b1a4 <__alt_mem_Flash_flash_data+0xf400b1a4>
    b42c:	00bef884 	movi	r2,-1054
    b430:	1505c83a 	sub	r2,r2,r20
    b434:	00c00804 	movi	r3,32
    b438:	8884d83a 	srl	r2,r17,r2
    b43c:	80c01c26 	beq	r16,r3,b4b0 <__divdf3+0x8ac>
    b440:	a0c10f84 	addi	r3,r20,1086
    b444:	88c6983a 	sll	r3,r17,r3
    b448:	1cc6b03a 	or	r3,r3,r19
    b44c:	1806c03a 	cmpne	r3,r3,zero
    b450:	1884b03a 	or	r2,r3,r2
    b454:	140001cc 	andi	r16,r2,7
    b458:	8000061e 	bne	r16,zero,b474 <__divdf3+0x870>
    b45c:	000b883a 	mov	r5,zero
    b460:	1004d0fa 	srli	r2,r2,3
    b464:	9180004c 	andi	r6,r18,1
    b468:	0009883a 	mov	r4,zero
    b46c:	1426b03a 	or	r19,r2,r16
    b470:	003e4206 	br	ad7c <__alt_mem_Flash_flash_data+0xf400ad7c>
    b474:	110003cc 	andi	r4,r2,15
    b478:	00c00104 	movi	r3,4
    b47c:	0021883a 	mov	r16,zero
    b480:	20ffcd1e 	bne	r4,r3,b3b8 <__alt_mem_Flash_flash_data+0xf400b3b8>
    b484:	800a927a 	slli	r5,r16,9
    b488:	8020977a 	slli	r16,r16,29
    b48c:	280ad33a 	srli	r5,r5,12
    b490:	003ff306 	br	b460 <__alt_mem_Flash_flash_data+0xf400b460>
    b494:	317fd336 	bltu	r6,r5,b3e4 <__alt_mem_Flash_flash_data+0xf400b3e4>
    b498:	1023883a 	mov	r17,r2
    b49c:	003fa206 	br	b328 <__alt_mem_Flash_flash_data+0xf400b328>
    b4a0:	a8bfd736 	bltu	r21,r2,b400 <__alt_mem_Flash_flash_data+0xf400b400>
    b4a4:	2027883a 	mov	r19,r4
    b4a8:	a8bf3d1e 	bne	r21,r2,b1a0 <__alt_mem_Flash_flash_data+0xf400b1a0>
    b4ac:	003f3d06 	br	b1a4 <__alt_mem_Flash_flash_data+0xf400b1a4>
    b4b0:	0007883a 	mov	r3,zero
    b4b4:	003fe406 	br	b448 <__alt_mem_Flash_flash_data+0xf400b448>
    b4b8:	00800434 	movhi	r2,16
    b4bc:	89400234 	orhi	r5,r17,8
    b4c0:	10bfffc4 	addi	r2,r2,-1
    b4c4:	e00d883a 	mov	r6,fp
    b4c8:	288a703a 	and	r5,r5,r2
    b4cc:	003e8506 	br	aee4 <__alt_mem_Flash_flash_data+0xf400aee4>

0000b4d0 <__eqdf2>:
    b4d0:	2804d53a 	srli	r2,r5,20
    b4d4:	3806d53a 	srli	r3,r7,20
    b4d8:	02000434 	movhi	r8,16
    b4dc:	423fffc4 	addi	r8,r8,-1
    b4e0:	1081ffcc 	andi	r2,r2,2047
    b4e4:	0241ffc4 	movi	r9,2047
    b4e8:	2a14703a 	and	r10,r5,r8
    b4ec:	18c1ffcc 	andi	r3,r3,2047
    b4f0:	3a10703a 	and	r8,r7,r8
    b4f4:	280ad7fa 	srli	r5,r5,31
    b4f8:	380ed7fa 	srli	r7,r7,31
    b4fc:	12400f26 	beq	r2,r9,b53c <__eqdf2+0x6c>
    b500:	0241ffc4 	movi	r9,2047
    b504:	1a400326 	beq	r3,r9,b514 <__eqdf2+0x44>
    b508:	10c00526 	beq	r2,r3,b520 <__eqdf2+0x50>
    b50c:	00800044 	movi	r2,1
    b510:	f800283a 	ret
    b514:	4192b03a 	or	r9,r8,r6
    b518:	483ffc1e 	bne	r9,zero,b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    b51c:	10fffb1e 	bne	r2,r3,b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    b520:	523ffa1e 	bne	r10,r8,b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    b524:	21bff91e 	bne	r4,r6,b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    b528:	29c00826 	beq	r5,r7,b54c <__eqdf2+0x7c>
    b52c:	103ff71e 	bne	r2,zero,b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    b530:	5104b03a 	or	r2,r10,r4
    b534:	1004c03a 	cmpne	r2,r2,zero
    b538:	f800283a 	ret
    b53c:	5112b03a 	or	r9,r10,r4
    b540:	483fef26 	beq	r9,zero,b500 <__alt_mem_Flash_flash_data+0xf400b500>
    b544:	00800044 	movi	r2,1
    b548:	f800283a 	ret
    b54c:	0005883a 	mov	r2,zero
    b550:	f800283a 	ret

0000b554 <__gedf2>:
    b554:	2804d53a 	srli	r2,r5,20
    b558:	3806d53a 	srli	r3,r7,20
    b55c:	02000434 	movhi	r8,16
    b560:	423fffc4 	addi	r8,r8,-1
    b564:	0241ffc4 	movi	r9,2047
    b568:	1081ffcc 	andi	r2,r2,2047
    b56c:	2a14703a 	and	r10,r5,r8
    b570:	1a46703a 	and	r3,r3,r9
    b574:	3a10703a 	and	r8,r7,r8
    b578:	280ad7fa 	srli	r5,r5,31
    b57c:	380ed7fa 	srli	r7,r7,31
    b580:	12400b26 	beq	r2,r9,b5b0 <__gedf2+0x5c>
    b584:	1a401626 	beq	r3,r9,b5e0 <__gedf2+0x8c>
    b588:	10000c1e 	bne	r2,zero,b5bc <__gedf2+0x68>
    b58c:	5112b03a 	or	r9,r10,r4
    b590:	4813003a 	cmpeq	r9,r9,zero
    b594:	4817883a 	mov	r11,r9
    b598:	18000c1e 	bne	r3,zero,b5cc <__gedf2+0x78>
    b59c:	4198b03a 	or	r12,r8,r6
    b5a0:	60000a1e 	bne	r12,zero,b5cc <__gedf2+0x78>
    b5a4:	48001326 	beq	r9,zero,b5f4 <__gedf2+0xa0>
    b5a8:	0005883a 	mov	r2,zero
    b5ac:	f800283a 	ret
    b5b0:	5112b03a 	or	r9,r10,r4
    b5b4:	4800191e 	bne	r9,zero,b61c <__gedf2+0xc8>
    b5b8:	18800926 	beq	r3,r2,b5e0 <__gedf2+0x8c>
    b5bc:	18000b1e 	bne	r3,zero,b5ec <__gedf2+0x98>
    b5c0:	4192b03a 	or	r9,r8,r6
    b5c4:	0017883a 	mov	r11,zero
    b5c8:	48000a26 	beq	r9,zero,b5f4 <__gedf2+0xa0>
    b5cc:	39c03fcc 	andi	r7,r7,255
    b5d0:	58000726 	beq	r11,zero,b5f0 <__gedf2+0x9c>
    b5d4:	3800081e 	bne	r7,zero,b5f8 <__gedf2+0xa4>
    b5d8:	00bfffc4 	movi	r2,-1
    b5dc:	f800283a 	ret
    b5e0:	4192b03a 	or	r9,r8,r6
    b5e4:	48000d1e 	bne	r9,zero,b61c <__gedf2+0xc8>
    b5e8:	103fe826 	beq	r2,zero,b58c <__alt_mem_Flash_flash_data+0xf400b58c>
    b5ec:	39c03fcc 	andi	r7,r7,255
    b5f0:	29c00326 	beq	r5,r7,b600 <__gedf2+0xac>
    b5f4:	283ff81e 	bne	r5,zero,b5d8 <__alt_mem_Flash_flash_data+0xf400b5d8>
    b5f8:	00800044 	movi	r2,1
    b5fc:	f800283a 	ret
    b600:	18bffc16 	blt	r3,r2,b5f4 <__alt_mem_Flash_flash_data+0xf400b5f4>
    b604:	10c00316 	blt	r2,r3,b614 <__gedf2+0xc0>
    b608:	42bffa36 	bltu	r8,r10,b5f4 <__alt_mem_Flash_flash_data+0xf400b5f4>
    b60c:	52000526 	beq	r10,r8,b624 <__gedf2+0xd0>
    b610:	523fe52e 	bgeu	r10,r8,b5a8 <__alt_mem_Flash_flash_data+0xf400b5a8>
    b614:	283ff026 	beq	r5,zero,b5d8 <__alt_mem_Flash_flash_data+0xf400b5d8>
    b618:	003ff706 	br	b5f8 <__alt_mem_Flash_flash_data+0xf400b5f8>
    b61c:	00bfff84 	movi	r2,-2
    b620:	f800283a 	ret
    b624:	313ff336 	bltu	r6,r4,b5f4 <__alt_mem_Flash_flash_data+0xf400b5f4>
    b628:	21bfdf2e 	bgeu	r4,r6,b5a8 <__alt_mem_Flash_flash_data+0xf400b5a8>
    b62c:	283fea26 	beq	r5,zero,b5d8 <__alt_mem_Flash_flash_data+0xf400b5d8>
    b630:	003ff106 	br	b5f8 <__alt_mem_Flash_flash_data+0xf400b5f8>

0000b634 <__ledf2>:
    b634:	2804d53a 	srli	r2,r5,20
    b638:	3810d53a 	srli	r8,r7,20
    b63c:	00c00434 	movhi	r3,16
    b640:	18ffffc4 	addi	r3,r3,-1
    b644:	0241ffc4 	movi	r9,2047
    b648:	1081ffcc 	andi	r2,r2,2047
    b64c:	28d4703a 	and	r10,r5,r3
    b650:	4250703a 	and	r8,r8,r9
    b654:	38c6703a 	and	r3,r7,r3
    b658:	280ad7fa 	srli	r5,r5,31
    b65c:	380ed7fa 	srli	r7,r7,31
    b660:	12400b26 	beq	r2,r9,b690 <__ledf2+0x5c>
    b664:	42401926 	beq	r8,r9,b6cc <__ledf2+0x98>
    b668:	10000c1e 	bne	r2,zero,b69c <__ledf2+0x68>
    b66c:	5112b03a 	or	r9,r10,r4
    b670:	4813003a 	cmpeq	r9,r9,zero
    b674:	4817883a 	mov	r11,r9
    b678:	40000f26 	beq	r8,zero,b6b8 <__ledf2+0x84>
    b67c:	39c03fcc 	andi	r7,r7,255
    b680:	58001826 	beq	r11,zero,b6e4 <__ledf2+0xb0>
    b684:	38000a1e 	bne	r7,zero,b6b0 <__ledf2+0x7c>
    b688:	00bfffc4 	movi	r2,-1
    b68c:	f800283a 	ret
    b690:	5112b03a 	or	r9,r10,r4
    b694:	48000f1e 	bne	r9,zero,b6d4 <__ledf2+0xa0>
    b698:	40800c26 	beq	r8,r2,b6cc <__ledf2+0x98>
    b69c:	4000101e 	bne	r8,zero,b6e0 <__ledf2+0xac>
    b6a0:	1992b03a 	or	r9,r3,r6
    b6a4:	0017883a 	mov	r11,zero
    b6a8:	483ff41e 	bne	r9,zero,b67c <__alt_mem_Flash_flash_data+0xf400b67c>
    b6ac:	283ff61e 	bne	r5,zero,b688 <__alt_mem_Flash_flash_data+0xf400b688>
    b6b0:	00800044 	movi	r2,1
    b6b4:	f800283a 	ret
    b6b8:	1998b03a 	or	r12,r3,r6
    b6bc:	603fef1e 	bne	r12,zero,b67c <__alt_mem_Flash_flash_data+0xf400b67c>
    b6c0:	483ffa26 	beq	r9,zero,b6ac <__alt_mem_Flash_flash_data+0xf400b6ac>
    b6c4:	0005883a 	mov	r2,zero
    b6c8:	f800283a 	ret
    b6cc:	1992b03a 	or	r9,r3,r6
    b6d0:	48000226 	beq	r9,zero,b6dc <__ledf2+0xa8>
    b6d4:	00800084 	movi	r2,2
    b6d8:	f800283a 	ret
    b6dc:	103fe326 	beq	r2,zero,b66c <__alt_mem_Flash_flash_data+0xf400b66c>
    b6e0:	39c03fcc 	andi	r7,r7,255
    b6e4:	29fff11e 	bne	r5,r7,b6ac <__alt_mem_Flash_flash_data+0xf400b6ac>
    b6e8:	40bff016 	blt	r8,r2,b6ac <__alt_mem_Flash_flash_data+0xf400b6ac>
    b6ec:	12000316 	blt	r2,r8,b6fc <__ledf2+0xc8>
    b6f0:	1abfee36 	bltu	r3,r10,b6ac <__alt_mem_Flash_flash_data+0xf400b6ac>
    b6f4:	50c00326 	beq	r10,r3,b704 <__ledf2+0xd0>
    b6f8:	50fff22e 	bgeu	r10,r3,b6c4 <__alt_mem_Flash_flash_data+0xf400b6c4>
    b6fc:	283fe226 	beq	r5,zero,b688 <__alt_mem_Flash_flash_data+0xf400b688>
    b700:	003feb06 	br	b6b0 <__alt_mem_Flash_flash_data+0xf400b6b0>
    b704:	313fe936 	bltu	r6,r4,b6ac <__alt_mem_Flash_flash_data+0xf400b6ac>
    b708:	21bfee2e 	bgeu	r4,r6,b6c4 <__alt_mem_Flash_flash_data+0xf400b6c4>
    b70c:	283fde26 	beq	r5,zero,b688 <__alt_mem_Flash_flash_data+0xf400b688>
    b710:	003fe706 	br	b6b0 <__alt_mem_Flash_flash_data+0xf400b6b0>

0000b714 <__muldf3>:
    b714:	defff204 	addi	sp,sp,-56
    b718:	2804d53a 	srli	r2,r5,20
    b71c:	dd800a15 	stw	r22,40(sp)
    b720:	282cd7fa 	srli	r22,r5,31
    b724:	dc000415 	stw	r16,16(sp)
    b728:	04000434 	movhi	r16,16
    b72c:	df000c15 	stw	fp,48(sp)
    b730:	dd000815 	stw	r20,32(sp)
    b734:	dcc00715 	stw	r19,28(sp)
    b738:	dc800615 	stw	r18,24(sp)
    b73c:	dc400515 	stw	r17,20(sp)
    b740:	843fffc4 	addi	r16,r16,-1
    b744:	dfc00d15 	stw	ra,52(sp)
    b748:	ddc00b15 	stw	r23,44(sp)
    b74c:	dd400915 	stw	r21,36(sp)
    b750:	1501ffcc 	andi	r20,r2,2047
    b754:	2023883a 	mov	r17,r4
    b758:	2025883a 	mov	r18,r4
    b75c:	2c20703a 	and	r16,r5,r16
    b760:	b027883a 	mov	r19,r22
    b764:	b7003fcc 	andi	fp,r22,255
    b768:	a0005926 	beq	r20,zero,b8d0 <__muldf3+0x1bc>
    b76c:	0081ffc4 	movi	r2,2047
    b770:	a0803426 	beq	r20,r2,b844 <__muldf3+0x130>
    b774:	84000434 	orhi	r16,r16,16
    b778:	2004d77a 	srli	r2,r4,29
    b77c:	802090fa 	slli	r16,r16,3
    b780:	202490fa 	slli	r18,r4,3
    b784:	a53f0044 	addi	r20,r20,-1023
    b788:	80a0b03a 	or	r16,r16,r2
    b78c:	002b883a 	mov	r21,zero
    b790:	0015883a 	mov	r10,zero
    b794:	3812d53a 	srli	r9,r7,20
    b798:	3806d7fa 	srli	r3,r7,31
    b79c:	02000434 	movhi	r8,16
    b7a0:	423fffc4 	addi	r8,r8,-1
    b7a4:	4941ffcc 	andi	r5,r9,2047
    b7a8:	302f883a 	mov	r23,r6
    b7ac:	3a22703a 	and	r17,r7,r8
    b7b0:	1ac03fcc 	andi	r11,r3,255
    b7b4:	28006226 	beq	r5,zero,b940 <__muldf3+0x22c>
    b7b8:	0081ffc4 	movi	r2,2047
    b7bc:	28805a26 	beq	r5,r2,b928 <__muldf3+0x214>
    b7c0:	8a000434 	orhi	r8,r17,16
    b7c4:	3004d77a 	srli	r2,r6,29
    b7c8:	401090fa 	slli	r8,r8,3
    b7cc:	302e90fa 	slli	r23,r6,3
    b7d0:	297f0044 	addi	r5,r5,-1023
    b7d4:	40a2b03a 	or	r17,r8,r2
    b7d8:	0013883a 	mov	r9,zero
    b7dc:	4d4cb03a 	or	r6,r9,r21
    b7e0:	300c90ba 	slli	r6,r6,2
    b7e4:	02000074 	movhi	r8,1
    b7e8:	422e0104 	addi	r8,r8,-18428
    b7ec:	320d883a 	add	r6,r6,r8
    b7f0:	31800017 	ldw	r6,0(r6)
    b7f4:	a14b883a 	add	r5,r20,r5
    b7f8:	1dacf03a 	xor	r22,r3,r22
    b7fc:	2b000044 	addi	r12,r5,1
    b800:	3000683a 	jmp	r6
    b804:	0000ba40 	call	ba4 <___vfprintf_internal_r+0x39c>
    b808:	0000ba2c 	andhi	zero,zero,744
    b80c:	0000ba2c 	andhi	zero,zero,744
    b810:	0000ba18 	cmpnei	zero,zero,744
    b814:	0000b860 	cmpeqi	zero,zero,737
    b818:	0000b860 	cmpeqi	zero,zero,737
    b81c:	0000ba00 	call	ba0 <___vfprintf_internal_r+0x398>
    b820:	0000ba18 	cmpnei	zero,zero,744
    b824:	0000b860 	cmpeqi	zero,zero,737
    b828:	0000ba00 	call	ba0 <___vfprintf_internal_r+0x398>
    b82c:	0000b860 	cmpeqi	zero,zero,737
    b830:	0000ba18 	cmpnei	zero,zero,744
    b834:	0000b864 	muli	zero,zero,737
    b838:	0000b864 	muli	zero,zero,737
    b83c:	0000b864 	muli	zero,zero,737
    b840:	0000bc3c 	xorhi	zero,zero,752
    b844:	8104b03a 	or	r2,r16,r4
    b848:	10006a1e 	bne	r2,zero,b9f4 <__muldf3+0x2e0>
    b84c:	05400204 	movi	r21,8
    b850:	0021883a 	mov	r16,zero
    b854:	0025883a 	mov	r18,zero
    b858:	02800084 	movi	r10,2
    b85c:	003fcd06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b860:	b039883a 	mov	fp,r22
    b864:	00800084 	movi	r2,2
    b868:	50804e1e 	bne	r10,r2,b9a4 <__muldf3+0x290>
    b86c:	e4c0004c 	andi	r19,fp,1
    b870:	0101ffc4 	movi	r4,2047
    b874:	0021883a 	mov	r16,zero
    b878:	0025883a 	mov	r18,zero
    b87c:	2008953a 	slli	r4,r4,20
    b880:	98c03fcc 	andi	r3,r19,255
    b884:	01400434 	movhi	r5,16
    b888:	297fffc4 	addi	r5,r5,-1
    b88c:	180697fa 	slli	r3,r3,31
    b890:	8160703a 	and	r16,r16,r5
    b894:	8120b03a 	or	r16,r16,r4
    b898:	80c6b03a 	or	r3,r16,r3
    b89c:	9005883a 	mov	r2,r18
    b8a0:	dfc00d17 	ldw	ra,52(sp)
    b8a4:	df000c17 	ldw	fp,48(sp)
    b8a8:	ddc00b17 	ldw	r23,44(sp)
    b8ac:	dd800a17 	ldw	r22,40(sp)
    b8b0:	dd400917 	ldw	r21,36(sp)
    b8b4:	dd000817 	ldw	r20,32(sp)
    b8b8:	dcc00717 	ldw	r19,28(sp)
    b8bc:	dc800617 	ldw	r18,24(sp)
    b8c0:	dc400517 	ldw	r17,20(sp)
    b8c4:	dc000417 	ldw	r16,16(sp)
    b8c8:	dec00e04 	addi	sp,sp,56
    b8cc:	f800283a 	ret
    b8d0:	8104b03a 	or	r2,r16,r4
    b8d4:	10004226 	beq	r2,zero,b9e0 <__muldf3+0x2cc>
    b8d8:	8000f926 	beq	r16,zero,bcc0 <__muldf3+0x5ac>
    b8dc:	8009883a 	mov	r4,r16
    b8e0:	d9800315 	stw	r6,12(sp)
    b8e4:	d9c00015 	stw	r7,0(sp)
    b8e8:	000c9040 	call	c904 <__clzsi2>
    b8ec:	d9800317 	ldw	r6,12(sp)
    b8f0:	d9c00017 	ldw	r7,0(sp)
    b8f4:	1007883a 	mov	r3,r2
    b8f8:	01000a04 	movi	r4,40
    b8fc:	18bffe04 	addi	r2,r3,-8
    b900:	20c9c83a 	sub	r4,r4,r3
    b904:	80a0983a 	sll	r16,r16,r2
    b908:	8908d83a 	srl	r4,r17,r4
    b90c:	88a4983a 	sll	r18,r17,r2
    b910:	2420b03a 	or	r16,r4,r16
    b914:	017f0344 	movi	r5,-1011
    b918:	28e9c83a 	sub	r20,r5,r3
    b91c:	002b883a 	mov	r21,zero
    b920:	0015883a 	mov	r10,zero
    b924:	003f9b06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b928:	8984b03a 	or	r2,r17,r6
    b92c:	10002a1e 	bne	r2,zero,b9d8 <__muldf3+0x2c4>
    b930:	0023883a 	mov	r17,zero
    b934:	002f883a 	mov	r23,zero
    b938:	02400084 	movi	r9,2
    b93c:	003fa706 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b940:	8984b03a 	or	r2,r17,r6
    b944:	10002026 	beq	r2,zero,b9c8 <__muldf3+0x2b4>
    b948:	8800cc26 	beq	r17,zero,bc7c <__muldf3+0x568>
    b94c:	8809883a 	mov	r4,r17
    b950:	d8c00215 	stw	r3,8(sp)
    b954:	d9800315 	stw	r6,12(sp)
    b958:	da800015 	stw	r10,0(sp)
    b95c:	dac00115 	stw	r11,4(sp)
    b960:	000c9040 	call	c904 <__clzsi2>
    b964:	d8c00217 	ldw	r3,8(sp)
    b968:	d9800317 	ldw	r6,12(sp)
    b96c:	da800017 	ldw	r10,0(sp)
    b970:	dac00117 	ldw	r11,4(sp)
    b974:	1009883a 	mov	r4,r2
    b978:	01400a04 	movi	r5,40
    b97c:	25fffe04 	addi	r23,r4,-8
    b980:	290bc83a 	sub	r5,r5,r4
    b984:	8dd0983a 	sll	r8,r17,r23
    b988:	314ad83a 	srl	r5,r6,r5
    b98c:	35ee983a 	sll	r23,r6,r23
    b990:	2a22b03a 	or	r17,r5,r8
    b994:	017f0344 	movi	r5,-1011
    b998:	290bc83a 	sub	r5,r5,r4
    b99c:	0013883a 	mov	r9,zero
    b9a0:	003f8e06 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b9a4:	008000c4 	movi	r2,3
    b9a8:	50811d26 	beq	r10,r2,be20 <__muldf3+0x70c>
    b9ac:	00800044 	movi	r2,1
    b9b0:	5080e01e 	bne	r10,r2,bd34 <__muldf3+0x620>
    b9b4:	e0a6703a 	and	r19,fp,r2
    b9b8:	0009883a 	mov	r4,zero
    b9bc:	0021883a 	mov	r16,zero
    b9c0:	0025883a 	mov	r18,zero
    b9c4:	003fad06 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    b9c8:	0023883a 	mov	r17,zero
    b9cc:	002f883a 	mov	r23,zero
    b9d0:	02400044 	movi	r9,1
    b9d4:	003f8106 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b9d8:	024000c4 	movi	r9,3
    b9dc:	003f7f06 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b9e0:	05400104 	movi	r21,4
    b9e4:	0021883a 	mov	r16,zero
    b9e8:	0025883a 	mov	r18,zero
    b9ec:	02800044 	movi	r10,1
    b9f0:	003f6806 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b9f4:	05400304 	movi	r21,12
    b9f8:	028000c4 	movi	r10,3
    b9fc:	003f6506 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    ba00:	04000434 	movhi	r16,16
    ba04:	0027883a 	mov	r19,zero
    ba08:	843fffc4 	addi	r16,r16,-1
    ba0c:	04bfffc4 	movi	r18,-1
    ba10:	0101ffc4 	movi	r4,2047
    ba14:	003f9906 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    ba18:	8821883a 	mov	r16,r17
    ba1c:	b825883a 	mov	r18,r23
    ba20:	5839883a 	mov	fp,r11
    ba24:	4815883a 	mov	r10,r9
    ba28:	003f8e06 	br	b864 <__alt_mem_Flash_flash_data+0xf400b864>
    ba2c:	8821883a 	mov	r16,r17
    ba30:	b825883a 	mov	r18,r23
    ba34:	b039883a 	mov	fp,r22
    ba38:	4815883a 	mov	r10,r9
    ba3c:	003f8906 	br	b864 <__alt_mem_Flash_flash_data+0xf400b864>
    ba40:	b80cd43a 	srli	r6,r23,16
    ba44:	9006d43a 	srli	r3,r18,16
    ba48:	90bfffcc 	andi	r2,r18,65535
    ba4c:	bdffffcc 	andi	r23,r23,65535
    ba50:	b891383a 	mul	r8,r23,r2
    ba54:	b8c9383a 	mul	r4,r23,r3
    ba58:	309b383a 	mul	r13,r6,r2
    ba5c:	400ed43a 	srli	r7,r8,16
    ba60:	30df383a 	mul	r15,r6,r3
    ba64:	235b883a 	add	r13,r4,r13
    ba68:	69db883a 	add	r13,r13,r7
    ba6c:	6900022e 	bgeu	r13,r4,ba78 <__muldf3+0x364>
    ba70:	01000074 	movhi	r4,1
    ba74:	791f883a 	add	r15,r15,r4
    ba78:	8828d43a 	srli	r20,r17,16
    ba7c:	8c7fffcc 	andi	r17,r17,65535
    ba80:	888f383a 	mul	r7,r17,r2
    ba84:	88d3383a 	mul	r9,r17,r3
    ba88:	a0a5383a 	mul	r18,r20,r2
    ba8c:	3816d43a 	srli	r11,r7,16
    ba90:	6814943a 	slli	r10,r13,16
    ba94:	4ca5883a 	add	r18,r9,r18
    ba98:	423fffcc 	andi	r8,r8,65535
    ba9c:	92e5883a 	add	r18,r18,r11
    baa0:	6808d43a 	srli	r4,r13,16
    baa4:	5215883a 	add	r10,r10,r8
    baa8:	a0c7383a 	mul	r3,r20,r3
    baac:	9240022e 	bgeu	r18,r9,bab8 <__muldf3+0x3a4>
    bab0:	00800074 	movhi	r2,1
    bab4:	1887883a 	add	r3,r3,r2
    bab8:	802ad43a 	srli	r21,r16,16
    babc:	80bfffcc 	andi	r2,r16,65535
    bac0:	b893383a 	mul	r9,r23,r2
    bac4:	3091383a 	mul	r8,r6,r2
    bac8:	bd6f383a 	mul	r23,r23,r21
    bacc:	9026943a 	slli	r19,r18,16
    bad0:	481ad43a 	srli	r13,r9,16
    bad4:	9024d43a 	srli	r18,r18,16
    bad8:	39ffffcc 	andi	r7,r7,65535
    badc:	ba11883a 	add	r8,r23,r8
    bae0:	99e7883a 	add	r19,r19,r7
    bae4:	4351883a 	add	r8,r8,r13
    bae8:	1c97883a 	add	r11,r3,r18
    baec:	354d383a 	mul	r6,r6,r21
    baf0:	9925883a 	add	r18,r19,r4
    baf4:	45c0022e 	bgeu	r8,r23,bb00 <__muldf3+0x3ec>
    baf8:	00c00074 	movhi	r3,1
    bafc:	30cd883a 	add	r6,r6,r3
    bb00:	8889383a 	mul	r4,r17,r2
    bb04:	8d63383a 	mul	r17,r17,r21
    bb08:	a085383a 	mul	r2,r20,r2
    bb0c:	200ed43a 	srli	r7,r4,16
    bb10:	401cd43a 	srli	r14,r8,16
    bb14:	401a943a 	slli	r13,r8,16
    bb18:	8885883a 	add	r2,r17,r2
    bb1c:	4a3fffcc 	andi	r8,r9,65535
    bb20:	11c5883a 	add	r2,r2,r7
    bb24:	339d883a 	add	r14,r6,r14
    bb28:	6a11883a 	add	r8,r13,r8
    bb2c:	a561383a 	mul	r16,r20,r21
    bb30:	1440022e 	bgeu	r2,r17,bb3c <__muldf3+0x428>
    bb34:	00c00074 	movhi	r3,1
    bb38:	80e1883a 	add	r16,r16,r3
    bb3c:	1006943a 	slli	r3,r2,16
    bb40:	213fffcc 	andi	r4,r4,65535
    bb44:	93db883a 	add	r13,r18,r15
    bb48:	1909883a 	add	r4,r3,r4
    bb4c:	22c7883a 	add	r3,r4,r11
    bb50:	6cd3803a 	cmpltu	r9,r13,r19
    bb54:	6a09883a 	add	r4,r13,r8
    bb58:	1a5b883a 	add	r13,r3,r9
    bb5c:	2211803a 	cmpltu	r8,r4,r8
    bb60:	734d883a 	add	r6,r14,r13
    bb64:	100ed43a 	srli	r7,r2,16
    bb68:	6a53803a 	cmpltu	r9,r13,r9
    bb6c:	3205883a 	add	r2,r6,r8
    bb70:	1ac7803a 	cmpltu	r3,r3,r11
    bb74:	1211803a 	cmpltu	r8,r2,r8
    bb78:	48c6b03a 	or	r3,r9,r3
    bb7c:	338d803a 	cmpltu	r6,r6,r14
    bb80:	19c7883a 	add	r3,r3,r7
    bb84:	418cb03a 	or	r6,r8,r6
    bb88:	1987883a 	add	r3,r3,r6
    bb8c:	2024927a 	slli	r18,r4,9
    bb90:	1c07883a 	add	r3,r3,r16
    bb94:	1806927a 	slli	r3,r3,9
    bb98:	1020d5fa 	srli	r16,r2,23
    bb9c:	2008d5fa 	srli	r4,r4,23
    bba0:	9294b03a 	or	r10,r18,r10
    bba4:	1004927a 	slli	r2,r2,9
    bba8:	5024c03a 	cmpne	r18,r10,zero
    bbac:	1c20b03a 	or	r16,r3,r16
    bbb0:	9108b03a 	or	r4,r18,r4
    bbb4:	80c0402c 	andhi	r3,r16,256
    bbb8:	20a4b03a 	or	r18,r4,r2
    bbbc:	18000726 	beq	r3,zero,bbdc <__muldf3+0x4c8>
    bbc0:	9006d07a 	srli	r3,r18,1
    bbc4:	800897fa 	slli	r4,r16,31
    bbc8:	9080004c 	andi	r2,r18,1
    bbcc:	8020d07a 	srli	r16,r16,1
    bbd0:	10c4b03a 	or	r2,r2,r3
    bbd4:	1124b03a 	or	r18,r2,r4
    bbd8:	600b883a 	mov	r5,r12
    bbdc:	2900ffc4 	addi	r4,r5,1023
    bbe0:	01004b0e 	bge	zero,r4,bd10 <__muldf3+0x5fc>
    bbe4:	908001cc 	andi	r2,r18,7
    bbe8:	10000726 	beq	r2,zero,bc08 <__muldf3+0x4f4>
    bbec:	90c003cc 	andi	r3,r18,15
    bbf0:	00800104 	movi	r2,4
    bbf4:	18800426 	beq	r3,r2,bc08 <__muldf3+0x4f4>
    bbf8:	9087883a 	add	r3,r18,r2
    bbfc:	1c85803a 	cmpltu	r2,r3,r18
    bc00:	80a1883a 	add	r16,r16,r2
    bc04:	1825883a 	mov	r18,r3
    bc08:	8080402c 	andhi	r2,r16,256
    bc0c:	10000426 	beq	r2,zero,bc20 <__muldf3+0x50c>
    bc10:	00bfc034 	movhi	r2,65280
    bc14:	10bfffc4 	addi	r2,r2,-1
    bc18:	29010004 	addi	r4,r5,1024
    bc1c:	80a0703a 	and	r16,r16,r2
    bc20:	0081ff84 	movi	r2,2046
    bc24:	1100320e 	bge	r2,r4,bcf0 <__muldf3+0x5dc>
    bc28:	b4c0004c 	andi	r19,r22,1
    bc2c:	0101ffc4 	movi	r4,2047
    bc30:	0021883a 	mov	r16,zero
    bc34:	0025883a 	mov	r18,zero
    bc38:	003f1006 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    bc3c:	8080022c 	andhi	r2,r16,8
    bc40:	10000926 	beq	r2,zero,bc68 <__muldf3+0x554>
    bc44:	8880022c 	andhi	r2,r17,8
    bc48:	1000071e 	bne	r2,zero,bc68 <__muldf3+0x554>
    bc4c:	00800434 	movhi	r2,16
    bc50:	8c000234 	orhi	r16,r17,8
    bc54:	10bfffc4 	addi	r2,r2,-1
    bc58:	1827883a 	mov	r19,r3
    bc5c:	80a0703a 	and	r16,r16,r2
    bc60:	b825883a 	mov	r18,r23
    bc64:	003f6a06 	br	ba10 <__alt_mem_Flash_flash_data+0xf400ba10>
    bc68:	00800434 	movhi	r2,16
    bc6c:	84000234 	orhi	r16,r16,8
    bc70:	10bfffc4 	addi	r2,r2,-1
    bc74:	80a0703a 	and	r16,r16,r2
    bc78:	003f6506 	br	ba10 <__alt_mem_Flash_flash_data+0xf400ba10>
    bc7c:	3009883a 	mov	r4,r6
    bc80:	d8c00215 	stw	r3,8(sp)
    bc84:	d9800315 	stw	r6,12(sp)
    bc88:	da800015 	stw	r10,0(sp)
    bc8c:	dac00115 	stw	r11,4(sp)
    bc90:	000c9040 	call	c904 <__clzsi2>
    bc94:	11000804 	addi	r4,r2,32
    bc98:	014009c4 	movi	r5,39
    bc9c:	d8c00217 	ldw	r3,8(sp)
    bca0:	d9800317 	ldw	r6,12(sp)
    bca4:	da800017 	ldw	r10,0(sp)
    bca8:	dac00117 	ldw	r11,4(sp)
    bcac:	293f320e 	bge	r5,r4,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    bcb0:	10bffe04 	addi	r2,r2,-8
    bcb4:	b8a2983a 	sll	r17,r23,r2
    bcb8:	002f883a 	mov	r23,zero
    bcbc:	003f3506 	br	b994 <__alt_mem_Flash_flash_data+0xf400b994>
    bcc0:	d9800315 	stw	r6,12(sp)
    bcc4:	d9c00015 	stw	r7,0(sp)
    bcc8:	000c9040 	call	c904 <__clzsi2>
    bccc:	10c00804 	addi	r3,r2,32
    bcd0:	010009c4 	movi	r4,39
    bcd4:	d9800317 	ldw	r6,12(sp)
    bcd8:	d9c00017 	ldw	r7,0(sp)
    bcdc:	20ff060e 	bge	r4,r3,b8f8 <__alt_mem_Flash_flash_data+0xf400b8f8>
    bce0:	10bffe04 	addi	r2,r2,-8
    bce4:	88a0983a 	sll	r16,r17,r2
    bce8:	0025883a 	mov	r18,zero
    bcec:	003f0906 	br	b914 <__alt_mem_Flash_flash_data+0xf400b914>
    bcf0:	9004d0fa 	srli	r2,r18,3
    bcf4:	8024977a 	slli	r18,r16,29
    bcf8:	8020927a 	slli	r16,r16,9
    bcfc:	2101ffcc 	andi	r4,r4,2047
    bd00:	90a4b03a 	or	r18,r18,r2
    bd04:	8020d33a 	srli	r16,r16,12
    bd08:	b4c0004c 	andi	r19,r22,1
    bd0c:	003edb06 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    bd10:	00ff0084 	movi	r3,-1022
    bd14:	1947c83a 	sub	r3,r3,r5
    bd18:	00800e04 	movi	r2,56
    bd1c:	10c0080e 	bge	r2,r3,bd40 <__muldf3+0x62c>
    bd20:	b4c0004c 	andi	r19,r22,1
    bd24:	0009883a 	mov	r4,zero
    bd28:	0021883a 	mov	r16,zero
    bd2c:	0025883a 	mov	r18,zero
    bd30:	003ed206 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    bd34:	600b883a 	mov	r5,r12
    bd38:	e02d883a 	mov	r22,fp
    bd3c:	003fa706 	br	bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bd40:	008007c4 	movi	r2,31
    bd44:	10c01816 	blt	r2,r3,bda8 <__muldf3+0x694>
    bd48:	29410784 	addi	r5,r5,1054
    bd4c:	8144983a 	sll	r2,r16,r5
    bd50:	90c8d83a 	srl	r4,r18,r3
    bd54:	914a983a 	sll	r5,r18,r5
    bd58:	80c6d83a 	srl	r3,r16,r3
    bd5c:	2088b03a 	or	r4,r4,r2
    bd60:	2804c03a 	cmpne	r2,r5,zero
    bd64:	2084b03a 	or	r2,r4,r2
    bd68:	110001cc 	andi	r4,r2,7
    bd6c:	20000726 	beq	r4,zero,bd8c <__muldf3+0x678>
    bd70:	114003cc 	andi	r5,r2,15
    bd74:	01000104 	movi	r4,4
    bd78:	29000426 	beq	r5,r4,bd8c <__muldf3+0x678>
    bd7c:	11000104 	addi	r4,r2,4
    bd80:	2085803a 	cmpltu	r2,r4,r2
    bd84:	1887883a 	add	r3,r3,r2
    bd88:	2005883a 	mov	r2,r4
    bd8c:	1900202c 	andhi	r4,r3,128
    bd90:	20001826 	beq	r4,zero,bdf4 <__muldf3+0x6e0>
    bd94:	b4c0004c 	andi	r19,r22,1
    bd98:	01000044 	movi	r4,1
    bd9c:	0021883a 	mov	r16,zero
    bda0:	0025883a 	mov	r18,zero
    bda4:	003eb506 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    bda8:	00bef884 	movi	r2,-1054
    bdac:	1145c83a 	sub	r2,r2,r5
    bdb0:	8088d83a 	srl	r4,r16,r2
    bdb4:	00800804 	movi	r2,32
    bdb8:	18801726 	beq	r3,r2,be18 <__muldf3+0x704>
    bdbc:	28810f84 	addi	r2,r5,1086
    bdc0:	8084983a 	sll	r2,r16,r2
    bdc4:	1484b03a 	or	r2,r2,r18
    bdc8:	1004c03a 	cmpne	r2,r2,zero
    bdcc:	1104b03a 	or	r2,r2,r4
    bdd0:	10c001cc 	andi	r3,r2,7
    bdd4:	18000b1e 	bne	r3,zero,be04 <__muldf3+0x6f0>
    bdd8:	0021883a 	mov	r16,zero
    bddc:	1004d0fa 	srli	r2,r2,3
    bde0:	b4c0004c 	andi	r19,r22,1
    bde4:	0009883a 	mov	r4,zero
    bde8:	10e4b03a 	or	r18,r2,r3
    bdec:	003ea306 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    bdf0:	0007883a 	mov	r3,zero
    bdf4:	1820927a 	slli	r16,r3,9
    bdf8:	1806977a 	slli	r3,r3,29
    bdfc:	8020d33a 	srli	r16,r16,12
    be00:	003ff606 	br	bddc <__alt_mem_Flash_flash_data+0xf400bddc>
    be04:	110003cc 	andi	r4,r2,15
    be08:	00c00104 	movi	r3,4
    be0c:	20fff826 	beq	r4,r3,bdf0 <__alt_mem_Flash_flash_data+0xf400bdf0>
    be10:	0007883a 	mov	r3,zero
    be14:	003fd906 	br	bd7c <__alt_mem_Flash_flash_data+0xf400bd7c>
    be18:	0005883a 	mov	r2,zero
    be1c:	003fe906 	br	bdc4 <__alt_mem_Flash_flash_data+0xf400bdc4>
    be20:	00800434 	movhi	r2,16
    be24:	84000234 	orhi	r16,r16,8
    be28:	10bfffc4 	addi	r2,r2,-1
    be2c:	e4c0004c 	andi	r19,fp,1
    be30:	80a0703a 	and	r16,r16,r2
    be34:	003ef606 	br	ba10 <__alt_mem_Flash_flash_data+0xf400ba10>

0000be38 <__subdf3>:
    be38:	00c00434 	movhi	r3,16
    be3c:	18ffffc4 	addi	r3,r3,-1
    be40:	defffb04 	addi	sp,sp,-20
    be44:	28d2703a 	and	r9,r5,r3
    be48:	3814d53a 	srli	r10,r7,20
    be4c:	38c6703a 	and	r3,r7,r3
    be50:	3004d77a 	srli	r2,r6,29
    be54:	dc800215 	stw	r18,8(sp)
    be58:	dc000015 	stw	r16,0(sp)
    be5c:	2824d7fa 	srli	r18,r5,31
    be60:	2820d53a 	srli	r16,r5,20
    be64:	481290fa 	slli	r9,r9,3
    be68:	200ad77a 	srli	r5,r4,29
    be6c:	180690fa 	slli	r3,r3,3
    be70:	dc400115 	stw	r17,4(sp)
    be74:	dfc00415 	stw	ra,16(sp)
    be78:	202290fa 	slli	r17,r4,3
    be7c:	dcc00315 	stw	r19,12(sp)
    be80:	5281ffcc 	andi	r10,r10,2047
    be84:	0101ffc4 	movi	r4,2047
    be88:	9011883a 	mov	r8,r18
    be8c:	8401ffcc 	andi	r16,r16,2047
    be90:	94803fcc 	andi	r18,r18,255
    be94:	494ab03a 	or	r5,r9,r5
    be98:	380ed7fa 	srli	r7,r7,31
    be9c:	1886b03a 	or	r3,r3,r2
    bea0:	300c90fa 	slli	r6,r6,3
    bea4:	51009026 	beq	r10,r4,c0e8 <__subdf3+0x2b0>
    bea8:	39c0005c 	xori	r7,r7,1
    beac:	8285c83a 	sub	r2,r16,r10
    beb0:	91c06f26 	beq	r18,r7,c070 <__subdf3+0x238>
    beb4:	0080b10e 	bge	zero,r2,c17c <__subdf3+0x344>
    beb8:	50002a1e 	bne	r10,zero,bf64 <__subdf3+0x12c>
    bebc:	1988b03a 	or	r4,r3,r6
    bec0:	2000941e 	bne	r4,zero,c114 <__subdf3+0x2dc>
    bec4:	888001cc 	andi	r2,r17,7
    bec8:	10005b26 	beq	r2,zero,c038 <__subdf3+0x200>
    becc:	88c003cc 	andi	r3,r17,15
    bed0:	00800104 	movi	r2,4
    bed4:	18805826 	beq	r3,r2,c038 <__subdf3+0x200>
    bed8:	88c00104 	addi	r3,r17,4
    bedc:	1c63803a 	cmpltu	r17,r3,r17
    bee0:	2c4b883a 	add	r5,r5,r17
    bee4:	2880202c 	andhi	r2,r5,128
    bee8:	9200004c 	andi	r8,r18,1
    beec:	1823883a 	mov	r17,r3
    bef0:	10005426 	beq	r2,zero,c044 <__subdf3+0x20c>
    bef4:	84000044 	addi	r16,r16,1
    bef8:	0081ffc4 	movi	r2,2047
    befc:	8080bf26 	beq	r16,r2,c1fc <__subdf3+0x3c4>
    bf00:	013fe034 	movhi	r4,65408
    bf04:	213fffc4 	addi	r4,r4,-1
    bf08:	290a703a 	and	r5,r5,r4
    bf0c:	2804977a 	slli	r2,r5,29
    bf10:	280a927a 	slli	r5,r5,9
    bf14:	8822d0fa 	srli	r17,r17,3
    bf18:	8401ffcc 	andi	r16,r16,2047
    bf1c:	2808d33a 	srli	r4,r5,12
    bf20:	1444b03a 	or	r2,r2,r17
    bf24:	8401ffcc 	andi	r16,r16,2047
    bf28:	800a953a 	slli	r5,r16,20
    bf2c:	40c03fcc 	andi	r3,r8,255
    bf30:	04000434 	movhi	r16,16
    bf34:	180697fa 	slli	r3,r3,31
    bf38:	843fffc4 	addi	r16,r16,-1
    bf3c:	2420703a 	and	r16,r4,r16
    bf40:	8160b03a 	or	r16,r16,r5
    bf44:	80c6b03a 	or	r3,r16,r3
    bf48:	dfc00417 	ldw	ra,16(sp)
    bf4c:	dcc00317 	ldw	r19,12(sp)
    bf50:	dc800217 	ldw	r18,8(sp)
    bf54:	dc400117 	ldw	r17,4(sp)
    bf58:	dc000017 	ldw	r16,0(sp)
    bf5c:	dec00504 	addi	sp,sp,20
    bf60:	f800283a 	ret
    bf64:	0101ffc4 	movi	r4,2047
    bf68:	813fd626 	beq	r16,r4,bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    bf6c:	18c02034 	orhi	r3,r3,128
    bf70:	01000e04 	movi	r4,56
    bf74:	2080a416 	blt	r4,r2,c208 <__subdf3+0x3d0>
    bf78:	010007c4 	movi	r4,31
    bf7c:	2080c716 	blt	r4,r2,c29c <__subdf3+0x464>
    bf80:	01000804 	movi	r4,32
    bf84:	2089c83a 	sub	r4,r4,r2
    bf88:	1910983a 	sll	r8,r3,r4
    bf8c:	308ed83a 	srl	r7,r6,r2
    bf90:	3108983a 	sll	r4,r6,r4
    bf94:	1884d83a 	srl	r2,r3,r2
    bf98:	41ccb03a 	or	r6,r8,r7
    bf9c:	2008c03a 	cmpne	r4,r4,zero
    bfa0:	310cb03a 	or	r6,r6,r4
    bfa4:	898dc83a 	sub	r6,r17,r6
    bfa8:	89a3803a 	cmpltu	r17,r17,r6
    bfac:	288bc83a 	sub	r5,r5,r2
    bfb0:	2c4bc83a 	sub	r5,r5,r17
    bfb4:	3023883a 	mov	r17,r6
    bfb8:	2880202c 	andhi	r2,r5,128
    bfbc:	10006b26 	beq	r2,zero,c16c <__subdf3+0x334>
    bfc0:	04c02034 	movhi	r19,128
    bfc4:	9cffffc4 	addi	r19,r19,-1
    bfc8:	2ce6703a 	and	r19,r5,r19
    bfcc:	98007c26 	beq	r19,zero,c1c0 <__subdf3+0x388>
    bfd0:	9809883a 	mov	r4,r19
    bfd4:	000c9040 	call	c904 <__clzsi2>
    bfd8:	10fffe04 	addi	r3,r2,-8
    bfdc:	010007c4 	movi	r4,31
    bfe0:	20c07d16 	blt	r4,r3,c1d8 <__subdf3+0x3a0>
    bfe4:	01400a04 	movi	r5,40
    bfe8:	2885c83a 	sub	r2,r5,r2
    bfec:	888ad83a 	srl	r5,r17,r2
    bff0:	98e6983a 	sll	r19,r19,r3
    bff4:	88e2983a 	sll	r17,r17,r3
    bff8:	2ce6b03a 	or	r19,r5,r19
    bffc:	1c007a16 	blt	r3,r16,c1e8 <__subdf3+0x3b0>
    c000:	1c21c83a 	sub	r16,r3,r16
    c004:	81400044 	addi	r5,r16,1
    c008:	00c007c4 	movi	r3,31
    c00c:	19409616 	blt	r3,r5,c268 <__subdf3+0x430>
    c010:	1c21c83a 	sub	r16,r3,r16
    c014:	8c08983a 	sll	r4,r17,r16
    c018:	8946d83a 	srl	r3,r17,r5
    c01c:	9c20983a 	sll	r16,r19,r16
    c020:	2008c03a 	cmpne	r4,r4,zero
    c024:	994ad83a 	srl	r5,r19,r5
    c028:	1c06b03a 	or	r3,r3,r16
    c02c:	1922b03a 	or	r17,r3,r4
    c030:	0021883a 	mov	r16,zero
    c034:	003fa306 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c038:	2880202c 	andhi	r2,r5,128
    c03c:	9200004c 	andi	r8,r18,1
    c040:	103fac1e 	bne	r2,zero,bef4 <__alt_mem_Flash_flash_data+0xf400bef4>
    c044:	2804977a 	slli	r2,r5,29
    c048:	8822d0fa 	srli	r17,r17,3
    c04c:	00c1ffc4 	movi	r3,2047
    c050:	280ad0fa 	srli	r5,r5,3
    c054:	1444b03a 	or	r2,r2,r17
    c058:	80c02726 	beq	r16,r3,c0f8 <__subdf3+0x2c0>
    c05c:	01000434 	movhi	r4,16
    c060:	213fffc4 	addi	r4,r4,-1
    c064:	80e0703a 	and	r16,r16,r3
    c068:	2908703a 	and	r4,r5,r4
    c06c:	003fad06 	br	bf24 <__alt_mem_Flash_flash_data+0xf400bf24>
    c070:	0080690e 	bge	zero,r2,c218 <__subdf3+0x3e0>
    c074:	50002f26 	beq	r10,zero,c134 <__subdf3+0x2fc>
    c078:	0101ffc4 	movi	r4,2047
    c07c:	813f9126 	beq	r16,r4,bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c080:	18c02034 	orhi	r3,r3,128
    c084:	01000e04 	movi	r4,56
    c088:	2080b00e 	bge	r4,r2,c34c <__subdf3+0x514>
    c08c:	198cb03a 	or	r6,r3,r6
    c090:	300ec03a 	cmpne	r7,r6,zero
    c094:	0005883a 	mov	r2,zero
    c098:	3c4f883a 	add	r7,r7,r17
    c09c:	3c63803a 	cmpltu	r17,r7,r17
    c0a0:	114b883a 	add	r5,r2,r5
    c0a4:	2c4b883a 	add	r5,r5,r17
    c0a8:	3823883a 	mov	r17,r7
    c0ac:	2880202c 	andhi	r2,r5,128
    c0b0:	10002e26 	beq	r2,zero,c16c <__subdf3+0x334>
    c0b4:	84000044 	addi	r16,r16,1
    c0b8:	0081ffc4 	movi	r2,2047
    c0bc:	8080de26 	beq	r16,r2,c438 <__subdf3+0x600>
    c0c0:	00bfe034 	movhi	r2,65408
    c0c4:	10bfffc4 	addi	r2,r2,-1
    c0c8:	288a703a 	and	r5,r5,r2
    c0cc:	880cd07a 	srli	r6,r17,1
    c0d0:	280897fa 	slli	r4,r5,31
    c0d4:	88c0004c 	andi	r3,r17,1
    c0d8:	30e2b03a 	or	r17,r6,r3
    c0dc:	280ad07a 	srli	r5,r5,1
    c0e0:	8922b03a 	or	r17,r17,r4
    c0e4:	003f7706 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c0e8:	1984b03a 	or	r2,r3,r6
    c0ec:	103f6e26 	beq	r2,zero,bea8 <__alt_mem_Flash_flash_data+0xf400bea8>
    c0f0:	39c03fcc 	andi	r7,r7,255
    c0f4:	003f6d06 	br	beac <__alt_mem_Flash_flash_data+0xf400beac>
    c0f8:	1146b03a 	or	r3,r2,r5
    c0fc:	18003f26 	beq	r3,zero,c1fc <__subdf3+0x3c4>
    c100:	00c00434 	movhi	r3,16
    c104:	29000234 	orhi	r4,r5,8
    c108:	18ffffc4 	addi	r3,r3,-1
    c10c:	20c8703a 	and	r4,r4,r3
    c110:	003f8406 	br	bf24 <__alt_mem_Flash_flash_data+0xf400bf24>
    c114:	10bfffc4 	addi	r2,r2,-1
    c118:	1000501e 	bne	r2,zero,c25c <__subdf3+0x424>
    c11c:	898fc83a 	sub	r7,r17,r6
    c120:	89e3803a 	cmpltu	r17,r17,r7
    c124:	28cbc83a 	sub	r5,r5,r3
    c128:	2c4bc83a 	sub	r5,r5,r17
    c12c:	3823883a 	mov	r17,r7
    c130:	003fa106 	br	bfb8 <__alt_mem_Flash_flash_data+0xf400bfb8>
    c134:	1988b03a 	or	r4,r3,r6
    c138:	203f6226 	beq	r4,zero,bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c13c:	10bfffc4 	addi	r2,r2,-1
    c140:	10009b1e 	bne	r2,zero,c3b0 <__subdf3+0x578>
    c144:	344d883a 	add	r6,r6,r17
    c148:	3463803a 	cmpltu	r17,r6,r17
    c14c:	194b883a 	add	r5,r3,r5
    c150:	2c4b883a 	add	r5,r5,r17
    c154:	3023883a 	mov	r17,r6
    c158:	003fd406 	br	c0ac <__alt_mem_Flash_flash_data+0xf400c0ac>
    c15c:	1106b03a 	or	r3,r2,r4
    c160:	1800b426 	beq	r3,zero,c434 <__subdf3+0x5fc>
    c164:	100b883a 	mov	r5,r2
    c168:	2023883a 	mov	r17,r4
    c16c:	888001cc 	andi	r2,r17,7
    c170:	103f561e 	bne	r2,zero,becc <__alt_mem_Flash_flash_data+0xf400becc>
    c174:	9200004c 	andi	r8,r18,1
    c178:	003fb206 	br	c044 <__alt_mem_Flash_flash_data+0xf400c044>
    c17c:	1000531e 	bne	r2,zero,c2cc <__subdf3+0x494>
    c180:	80800044 	addi	r2,r16,1
    c184:	1081ffcc 	andi	r2,r2,2047
    c188:	01000044 	movi	r4,1
    c18c:	2080a00e 	bge	r4,r2,c410 <__subdf3+0x5d8>
    c190:	8985c83a 	sub	r2,r17,r6
    c194:	8889803a 	cmpltu	r4,r17,r2
    c198:	28e7c83a 	sub	r19,r5,r3
    c19c:	9927c83a 	sub	r19,r19,r4
    c1a0:	9900202c 	andhi	r4,r19,128
    c1a4:	20006226 	beq	r4,zero,c330 <__subdf3+0x4f8>
    c1a8:	3463c83a 	sub	r17,r6,r17
    c1ac:	194bc83a 	sub	r5,r3,r5
    c1b0:	344d803a 	cmpltu	r6,r6,r17
    c1b4:	29a7c83a 	sub	r19,r5,r6
    c1b8:	3825883a 	mov	r18,r7
    c1bc:	983f841e 	bne	r19,zero,bfd0 <__alt_mem_Flash_flash_data+0xf400bfd0>
    c1c0:	8809883a 	mov	r4,r17
    c1c4:	000c9040 	call	c904 <__clzsi2>
    c1c8:	10800804 	addi	r2,r2,32
    c1cc:	10fffe04 	addi	r3,r2,-8
    c1d0:	010007c4 	movi	r4,31
    c1d4:	20ff830e 	bge	r4,r3,bfe4 <__alt_mem_Flash_flash_data+0xf400bfe4>
    c1d8:	14fff604 	addi	r19,r2,-40
    c1dc:	8ce6983a 	sll	r19,r17,r19
    c1e0:	0023883a 	mov	r17,zero
    c1e4:	1c3f860e 	bge	r3,r16,c000 <__alt_mem_Flash_flash_data+0xf400c000>
    c1e8:	017fe034 	movhi	r5,65408
    c1ec:	297fffc4 	addi	r5,r5,-1
    c1f0:	80e1c83a 	sub	r16,r16,r3
    c1f4:	994a703a 	and	r5,r19,r5
    c1f8:	003f3206 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c1fc:	0009883a 	mov	r4,zero
    c200:	0005883a 	mov	r2,zero
    c204:	003f4706 	br	bf24 <__alt_mem_Flash_flash_data+0xf400bf24>
    c208:	198cb03a 	or	r6,r3,r6
    c20c:	300cc03a 	cmpne	r6,r6,zero
    c210:	0005883a 	mov	r2,zero
    c214:	003f6306 	br	bfa4 <__alt_mem_Flash_flash_data+0xf400bfa4>
    c218:	10009d1e 	bne	r2,zero,c490 <__subdf3+0x658>
    c21c:	81c00044 	addi	r7,r16,1
    c220:	3881ffcc 	andi	r2,r7,2047
    c224:	02400044 	movi	r9,1
    c228:	4880680e 	bge	r9,r2,c3cc <__subdf3+0x594>
    c22c:	0081ffc4 	movi	r2,2047
    c230:	3880ae26 	beq	r7,r2,c4ec <__subdf3+0x6b4>
    c234:	344d883a 	add	r6,r6,r17
    c238:	3463803a 	cmpltu	r17,r6,r17
    c23c:	194b883a 	add	r5,r3,r5
    c240:	2c4b883a 	add	r5,r5,r17
    c244:	282297fa 	slli	r17,r5,31
    c248:	300cd07a 	srli	r6,r6,1
    c24c:	280ad07a 	srli	r5,r5,1
    c250:	3821883a 	mov	r16,r7
    c254:	89a2b03a 	or	r17,r17,r6
    c258:	003f1a06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c25c:	0101ffc4 	movi	r4,2047
    c260:	813f431e 	bne	r16,r4,bf70 <__alt_mem_Flash_flash_data+0xf400bf70>
    c264:	003f1706 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c268:	80bff844 	addi	r2,r16,-31
    c26c:	00c00804 	movi	r3,32
    c270:	9884d83a 	srl	r2,r19,r2
    c274:	28c05126 	beq	r5,r3,c3bc <__subdf3+0x584>
    c278:	00c00fc4 	movi	r3,63
    c27c:	1c21c83a 	sub	r16,r3,r16
    c280:	9c26983a 	sll	r19,r19,r16
    c284:	9c62b03a 	or	r17,r19,r17
    c288:	8822c03a 	cmpne	r17,r17,zero
    c28c:	88a2b03a 	or	r17,r17,r2
    c290:	000b883a 	mov	r5,zero
    c294:	0021883a 	mov	r16,zero
    c298:	003fb406 	br	c16c <__alt_mem_Flash_flash_data+0xf400c16c>
    c29c:	113ff804 	addi	r4,r2,-32
    c2a0:	01c00804 	movi	r7,32
    c2a4:	1908d83a 	srl	r4,r3,r4
    c2a8:	11c04626 	beq	r2,r7,c3c4 <__subdf3+0x58c>
    c2ac:	01c01004 	movi	r7,64
    c2b0:	3885c83a 	sub	r2,r7,r2
    c2b4:	1884983a 	sll	r2,r3,r2
    c2b8:	118cb03a 	or	r6,r2,r6
    c2bc:	300cc03a 	cmpne	r6,r6,zero
    c2c0:	310cb03a 	or	r6,r6,r4
    c2c4:	0005883a 	mov	r2,zero
    c2c8:	003f3606 	br	bfa4 <__alt_mem_Flash_flash_data+0xf400bfa4>
    c2cc:	80002b26 	beq	r16,zero,c37c <__subdf3+0x544>
    c2d0:	0101ffc4 	movi	r4,2047
    c2d4:	51006926 	beq	r10,r4,c47c <__subdf3+0x644>
    c2d8:	0085c83a 	sub	r2,zero,r2
    c2dc:	29402034 	orhi	r5,r5,128
    c2e0:	01000e04 	movi	r4,56
    c2e4:	20807d16 	blt	r4,r2,c4dc <__subdf3+0x6a4>
    c2e8:	010007c4 	movi	r4,31
    c2ec:	2080d916 	blt	r4,r2,c654 <__subdf3+0x81c>
    c2f0:	01000804 	movi	r4,32
    c2f4:	2089c83a 	sub	r4,r4,r2
    c2f8:	2912983a 	sll	r9,r5,r4
    c2fc:	8890d83a 	srl	r8,r17,r2
    c300:	8908983a 	sll	r4,r17,r4
    c304:	2884d83a 	srl	r2,r5,r2
    c308:	4a22b03a 	or	r17,r9,r8
    c30c:	2008c03a 	cmpne	r4,r4,zero
    c310:	8922b03a 	or	r17,r17,r4
    c314:	3463c83a 	sub	r17,r6,r17
    c318:	1885c83a 	sub	r2,r3,r2
    c31c:	344d803a 	cmpltu	r6,r6,r17
    c320:	118bc83a 	sub	r5,r2,r6
    c324:	5021883a 	mov	r16,r10
    c328:	3825883a 	mov	r18,r7
    c32c:	003f2206 	br	bfb8 <__alt_mem_Flash_flash_data+0xf400bfb8>
    c330:	9886b03a 	or	r3,r19,r2
    c334:	18001c1e 	bne	r3,zero,c3a8 <__subdf3+0x570>
    c338:	0011883a 	mov	r8,zero
    c33c:	000b883a 	mov	r5,zero
    c340:	0023883a 	mov	r17,zero
    c344:	0021883a 	mov	r16,zero
    c348:	003f3e06 	br	c044 <__alt_mem_Flash_flash_data+0xf400c044>
    c34c:	010007c4 	movi	r4,31
    c350:	20803c16 	blt	r4,r2,c444 <__subdf3+0x60c>
    c354:	01000804 	movi	r4,32
    c358:	2089c83a 	sub	r4,r4,r2
    c35c:	1912983a 	sll	r9,r3,r4
    c360:	308ed83a 	srl	r7,r6,r2
    c364:	3108983a 	sll	r4,r6,r4
    c368:	1884d83a 	srl	r2,r3,r2
    c36c:	49ceb03a 	or	r7,r9,r7
    c370:	2008c03a 	cmpne	r4,r4,zero
    c374:	390eb03a 	or	r7,r7,r4
    c378:	003f4706 	br	c098 <__alt_mem_Flash_flash_data+0xf400c098>
    c37c:	2c48b03a 	or	r4,r5,r17
    c380:	20003e26 	beq	r4,zero,c47c <__subdf3+0x644>
    c384:	0084303a 	nor	r2,zero,r2
    c388:	10003a1e 	bne	r2,zero,c474 <__subdf3+0x63c>
    c38c:	3463c83a 	sub	r17,r6,r17
    c390:	194bc83a 	sub	r5,r3,r5
    c394:	344d803a 	cmpltu	r6,r6,r17
    c398:	298bc83a 	sub	r5,r5,r6
    c39c:	5021883a 	mov	r16,r10
    c3a0:	3825883a 	mov	r18,r7
    c3a4:	003f0406 	br	bfb8 <__alt_mem_Flash_flash_data+0xf400bfb8>
    c3a8:	1023883a 	mov	r17,r2
    c3ac:	003f0706 	br	bfcc <__alt_mem_Flash_flash_data+0xf400bfcc>
    c3b0:	0101ffc4 	movi	r4,2047
    c3b4:	813f331e 	bne	r16,r4,c084 <__alt_mem_Flash_flash_data+0xf400c084>
    c3b8:	003ec206 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c3bc:	0027883a 	mov	r19,zero
    c3c0:	003fb006 	br	c284 <__alt_mem_Flash_flash_data+0xf400c284>
    c3c4:	0005883a 	mov	r2,zero
    c3c8:	003fbb06 	br	c2b8 <__alt_mem_Flash_flash_data+0xf400c2b8>
    c3cc:	2c44b03a 	or	r2,r5,r17
    c3d0:	80008b1e 	bne	r16,zero,c600 <__subdf3+0x7c8>
    c3d4:	1000b526 	beq	r2,zero,c6ac <__subdf3+0x874>
    c3d8:	1984b03a 	or	r2,r3,r6
    c3dc:	103eb926 	beq	r2,zero,bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c3e0:	3449883a 	add	r4,r6,r17
    c3e4:	2463803a 	cmpltu	r17,r4,r17
    c3e8:	194b883a 	add	r5,r3,r5
    c3ec:	2c4b883a 	add	r5,r5,r17
    c3f0:	2880202c 	andhi	r2,r5,128
    c3f4:	2023883a 	mov	r17,r4
    c3f8:	103f5c26 	beq	r2,zero,c16c <__alt_mem_Flash_flash_data+0xf400c16c>
    c3fc:	00bfe034 	movhi	r2,65408
    c400:	10bfffc4 	addi	r2,r2,-1
    c404:	4821883a 	mov	r16,r9
    c408:	288a703a 	and	r5,r5,r2
    c40c:	003ead06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c410:	2c44b03a 	or	r2,r5,r17
    c414:	8000291e 	bne	r16,zero,c4bc <__subdf3+0x684>
    c418:	10004f1e 	bne	r2,zero,c558 <__subdf3+0x720>
    c41c:	1984b03a 	or	r2,r3,r6
    c420:	10000426 	beq	r2,zero,c434 <__subdf3+0x5fc>
    c424:	180b883a 	mov	r5,r3
    c428:	3023883a 	mov	r17,r6
    c42c:	3825883a 	mov	r18,r7
    c430:	003ea406 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c434:	0011883a 	mov	r8,zero
    c438:	000b883a 	mov	r5,zero
    c43c:	0023883a 	mov	r17,zero
    c440:	003f0006 	br	c044 <__alt_mem_Flash_flash_data+0xf400c044>
    c444:	11fff804 	addi	r7,r2,-32
    c448:	19c8d83a 	srl	r4,r3,r7
    c44c:	01c00804 	movi	r7,32
    c450:	11c07e26 	beq	r2,r7,c64c <__subdf3+0x814>
    c454:	01c01004 	movi	r7,64
    c458:	3885c83a 	sub	r2,r7,r2
    c45c:	1884983a 	sll	r2,r3,r2
    c460:	118cb03a 	or	r6,r2,r6
    c464:	300ec03a 	cmpne	r7,r6,zero
    c468:	390eb03a 	or	r7,r7,r4
    c46c:	0005883a 	mov	r2,zero
    c470:	003f0906 	br	c098 <__alt_mem_Flash_flash_data+0xf400c098>
    c474:	0101ffc4 	movi	r4,2047
    c478:	513f991e 	bne	r10,r4,c2e0 <__alt_mem_Flash_flash_data+0xf400c2e0>
    c47c:	180b883a 	mov	r5,r3
    c480:	3023883a 	mov	r17,r6
    c484:	5021883a 	mov	r16,r10
    c488:	3825883a 	mov	r18,r7
    c48c:	003e8d06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c490:	80001a1e 	bne	r16,zero,c4fc <__subdf3+0x6c4>
    c494:	2c48b03a 	or	r4,r5,r17
    c498:	20005526 	beq	r4,zero,c5f0 <__subdf3+0x7b8>
    c49c:	0084303a 	nor	r2,zero,r2
    c4a0:	1000511e 	bne	r2,zero,c5e8 <__subdf3+0x7b0>
    c4a4:	89a3883a 	add	r17,r17,r6
    c4a8:	194b883a 	add	r5,r3,r5
    c4ac:	898d803a 	cmpltu	r6,r17,r6
    c4b0:	298b883a 	add	r5,r5,r6
    c4b4:	5021883a 	mov	r16,r10
    c4b8:	003efc06 	br	c0ac <__alt_mem_Flash_flash_data+0xf400c0ac>
    c4bc:	1000341e 	bne	r2,zero,c590 <__subdf3+0x758>
    c4c0:	1984b03a 	or	r2,r3,r6
    c4c4:	10006f26 	beq	r2,zero,c684 <__subdf3+0x84c>
    c4c8:	180b883a 	mov	r5,r3
    c4cc:	3023883a 	mov	r17,r6
    c4d0:	3825883a 	mov	r18,r7
    c4d4:	0401ffc4 	movi	r16,2047
    c4d8:	003e7a06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c4dc:	2c62b03a 	or	r17,r5,r17
    c4e0:	8822c03a 	cmpne	r17,r17,zero
    c4e4:	0005883a 	mov	r2,zero
    c4e8:	003f8a06 	br	c314 <__alt_mem_Flash_flash_data+0xf400c314>
    c4ec:	3821883a 	mov	r16,r7
    c4f0:	000b883a 	mov	r5,zero
    c4f4:	0023883a 	mov	r17,zero
    c4f8:	003ed206 	br	c044 <__alt_mem_Flash_flash_data+0xf400c044>
    c4fc:	0101ffc4 	movi	r4,2047
    c500:	51003b26 	beq	r10,r4,c5f0 <__subdf3+0x7b8>
    c504:	0085c83a 	sub	r2,zero,r2
    c508:	29402034 	orhi	r5,r5,128
    c50c:	01000e04 	movi	r4,56
    c510:	20806216 	blt	r4,r2,c69c <__subdf3+0x864>
    c514:	010007c4 	movi	r4,31
    c518:	20806b16 	blt	r4,r2,c6c8 <__subdf3+0x890>
    c51c:	01000804 	movi	r4,32
    c520:	2089c83a 	sub	r4,r4,r2
    c524:	2912983a 	sll	r9,r5,r4
    c528:	888ed83a 	srl	r7,r17,r2
    c52c:	8908983a 	sll	r4,r17,r4
    c530:	2884d83a 	srl	r2,r5,r2
    c534:	49e2b03a 	or	r17,r9,r7
    c538:	2008c03a 	cmpne	r4,r4,zero
    c53c:	8922b03a 	or	r17,r17,r4
    c540:	89a3883a 	add	r17,r17,r6
    c544:	10c5883a 	add	r2,r2,r3
    c548:	898d803a 	cmpltu	r6,r17,r6
    c54c:	118b883a 	add	r5,r2,r6
    c550:	5021883a 	mov	r16,r10
    c554:	003ed506 	br	c0ac <__alt_mem_Flash_flash_data+0xf400c0ac>
    c558:	1984b03a 	or	r2,r3,r6
    c55c:	103e5926 	beq	r2,zero,bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c560:	8989c83a 	sub	r4,r17,r6
    c564:	8911803a 	cmpltu	r8,r17,r4
    c568:	28c5c83a 	sub	r2,r5,r3
    c56c:	1205c83a 	sub	r2,r2,r8
    c570:	1200202c 	andhi	r8,r2,128
    c574:	403ef926 	beq	r8,zero,c15c <__alt_mem_Flash_flash_data+0xf400c15c>
    c578:	3463c83a 	sub	r17,r6,r17
    c57c:	194bc83a 	sub	r5,r3,r5
    c580:	344d803a 	cmpltu	r6,r6,r17
    c584:	298bc83a 	sub	r5,r5,r6
    c588:	3825883a 	mov	r18,r7
    c58c:	003e4d06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c590:	1984b03a 	or	r2,r3,r6
    c594:	10002b26 	beq	r2,zero,c644 <__subdf3+0x80c>
    c598:	2808d0fa 	srli	r4,r5,3
    c59c:	8822d0fa 	srli	r17,r17,3
    c5a0:	280a977a 	slli	r5,r5,29
    c5a4:	2080022c 	andhi	r2,r4,8
    c5a8:	2c62b03a 	or	r17,r5,r17
    c5ac:	10000826 	beq	r2,zero,c5d0 <__subdf3+0x798>
    c5b0:	1810d0fa 	srli	r8,r3,3
    c5b4:	4080022c 	andhi	r2,r8,8
    c5b8:	1000051e 	bne	r2,zero,c5d0 <__subdf3+0x798>
    c5bc:	300cd0fa 	srli	r6,r6,3
    c5c0:	1804977a 	slli	r2,r3,29
    c5c4:	4009883a 	mov	r4,r8
    c5c8:	3825883a 	mov	r18,r7
    c5cc:	11a2b03a 	or	r17,r2,r6
    c5d0:	880ad77a 	srli	r5,r17,29
    c5d4:	200890fa 	slli	r4,r4,3
    c5d8:	882290fa 	slli	r17,r17,3
    c5dc:	0401ffc4 	movi	r16,2047
    c5e0:	290ab03a 	or	r5,r5,r4
    c5e4:	003e3706 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c5e8:	0101ffc4 	movi	r4,2047
    c5ec:	513fc71e 	bne	r10,r4,c50c <__alt_mem_Flash_flash_data+0xf400c50c>
    c5f0:	180b883a 	mov	r5,r3
    c5f4:	3023883a 	mov	r17,r6
    c5f8:	5021883a 	mov	r16,r10
    c5fc:	003e3106 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c600:	10002d26 	beq	r2,zero,c6b8 <__subdf3+0x880>
    c604:	1984b03a 	or	r2,r3,r6
    c608:	10000e26 	beq	r2,zero,c644 <__subdf3+0x80c>
    c60c:	2808d0fa 	srli	r4,r5,3
    c610:	8822d0fa 	srli	r17,r17,3
    c614:	280a977a 	slli	r5,r5,29
    c618:	2080022c 	andhi	r2,r4,8
    c61c:	2c62b03a 	or	r17,r5,r17
    c620:	103feb26 	beq	r2,zero,c5d0 <__alt_mem_Flash_flash_data+0xf400c5d0>
    c624:	180ed0fa 	srli	r7,r3,3
    c628:	3880022c 	andhi	r2,r7,8
    c62c:	103fe81e 	bne	r2,zero,c5d0 <__alt_mem_Flash_flash_data+0xf400c5d0>
    c630:	300cd0fa 	srli	r6,r6,3
    c634:	1804977a 	slli	r2,r3,29
    c638:	3809883a 	mov	r4,r7
    c63c:	11a2b03a 	or	r17,r2,r6
    c640:	003fe306 	br	c5d0 <__alt_mem_Flash_flash_data+0xf400c5d0>
    c644:	0401ffc4 	movi	r16,2047
    c648:	003e1e06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c64c:	0005883a 	mov	r2,zero
    c650:	003f8306 	br	c460 <__alt_mem_Flash_flash_data+0xf400c460>
    c654:	113ff804 	addi	r4,r2,-32
    c658:	02000804 	movi	r8,32
    c65c:	2908d83a 	srl	r4,r5,r4
    c660:	12002526 	beq	r2,r8,c6f8 <__subdf3+0x8c0>
    c664:	02001004 	movi	r8,64
    c668:	4085c83a 	sub	r2,r8,r2
    c66c:	288a983a 	sll	r5,r5,r2
    c670:	2c62b03a 	or	r17,r5,r17
    c674:	8822c03a 	cmpne	r17,r17,zero
    c678:	8922b03a 	or	r17,r17,r4
    c67c:	0005883a 	mov	r2,zero
    c680:	003f2406 	br	c314 <__alt_mem_Flash_flash_data+0xf400c314>
    c684:	01402034 	movhi	r5,128
    c688:	0011883a 	mov	r8,zero
    c68c:	297fffc4 	addi	r5,r5,-1
    c690:	047ffe04 	movi	r17,-8
    c694:	0401ffc4 	movi	r16,2047
    c698:	003e6a06 	br	c044 <__alt_mem_Flash_flash_data+0xf400c044>
    c69c:	2c62b03a 	or	r17,r5,r17
    c6a0:	8822c03a 	cmpne	r17,r17,zero
    c6a4:	0005883a 	mov	r2,zero
    c6a8:	003fa506 	br	c540 <__alt_mem_Flash_flash_data+0xf400c540>
    c6ac:	180b883a 	mov	r5,r3
    c6b0:	3023883a 	mov	r17,r6
    c6b4:	003e0306 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c6b8:	180b883a 	mov	r5,r3
    c6bc:	3023883a 	mov	r17,r6
    c6c0:	0401ffc4 	movi	r16,2047
    c6c4:	003dff06 	br	bec4 <__alt_mem_Flash_flash_data+0xf400bec4>
    c6c8:	113ff804 	addi	r4,r2,-32
    c6cc:	01c00804 	movi	r7,32
    c6d0:	2908d83a 	srl	r4,r5,r4
    c6d4:	11c00a26 	beq	r2,r7,c700 <__subdf3+0x8c8>
    c6d8:	01c01004 	movi	r7,64
    c6dc:	3885c83a 	sub	r2,r7,r2
    c6e0:	288a983a 	sll	r5,r5,r2
    c6e4:	2c62b03a 	or	r17,r5,r17
    c6e8:	8822c03a 	cmpne	r17,r17,zero
    c6ec:	8922b03a 	or	r17,r17,r4
    c6f0:	0005883a 	mov	r2,zero
    c6f4:	003f9206 	br	c540 <__alt_mem_Flash_flash_data+0xf400c540>
    c6f8:	000b883a 	mov	r5,zero
    c6fc:	003fdc06 	br	c670 <__alt_mem_Flash_flash_data+0xf400c670>
    c700:	000b883a 	mov	r5,zero
    c704:	003ff706 	br	c6e4 <__alt_mem_Flash_flash_data+0xf400c6e4>

0000c708 <__fixdfsi>:
    c708:	2806d53a 	srli	r3,r5,20
    c70c:	00800434 	movhi	r2,16
    c710:	10bfffc4 	addi	r2,r2,-1
    c714:	18c1ffcc 	andi	r3,r3,2047
    c718:	0180ff84 	movi	r6,1022
    c71c:	2884703a 	and	r2,r5,r2
    c720:	280ad7fa 	srli	r5,r5,31
    c724:	30c0130e 	bge	r6,r3,c774 <__fixdfsi+0x6c>
    c728:	01810744 	movi	r6,1053
    c72c:	30c00d16 	blt	r6,r3,c764 <__fixdfsi+0x5c>
    c730:	01810cc4 	movi	r6,1075
    c734:	30cdc83a 	sub	r6,r6,r3
    c738:	01c007c4 	movi	r7,31
    c73c:	10800434 	orhi	r2,r2,16
    c740:	39800e0e 	bge	r7,r6,c77c <__fixdfsi+0x74>
    c744:	010104c4 	movi	r4,1043
    c748:	20c7c83a 	sub	r3,r4,r3
    c74c:	10c6d83a 	srl	r3,r2,r3
    c750:	29403fcc 	andi	r5,r5,255
    c754:	0145c83a 	sub	r2,zero,r5
    c758:	1884f03a 	xor	r2,r3,r2
    c75c:	1145883a 	add	r2,r2,r5
    c760:	f800283a 	ret
    c764:	00a00034 	movhi	r2,32768
    c768:	10bfffc4 	addi	r2,r2,-1
    c76c:	2885883a 	add	r2,r5,r2
    c770:	f800283a 	ret
    c774:	0005883a 	mov	r2,zero
    c778:	f800283a 	ret
    c77c:	18fefb44 	addi	r3,r3,-1043
    c780:	2188d83a 	srl	r4,r4,r6
    c784:	10c6983a 	sll	r3,r2,r3
    c788:	20c6b03a 	or	r3,r4,r3
    c78c:	003ff006 	br	c750 <__alt_mem_Flash_flash_data+0xf400c750>

0000c790 <__floatsidf>:
    c790:	defffd04 	addi	sp,sp,-12
    c794:	dc400115 	stw	r17,4(sp)
    c798:	dfc00215 	stw	ra,8(sp)
    c79c:	dc000015 	stw	r16,0(sp)
    c7a0:	2023883a 	mov	r17,r4
    c7a4:	20001426 	beq	r4,zero,c7f8 <__floatsidf+0x68>
    c7a8:	2020d7fa 	srli	r16,r4,31
    c7ac:	80000126 	beq	r16,zero,c7b4 <__floatsidf+0x24>
    c7b0:	0123c83a 	sub	r17,zero,r4
    c7b4:	8809883a 	mov	r4,r17
    c7b8:	000c9040 	call	c904 <__clzsi2>
    c7bc:	01410784 	movi	r5,1054
    c7c0:	00c00284 	movi	r3,10
    c7c4:	288bc83a 	sub	r5,r5,r2
    c7c8:	18801c16 	blt	r3,r2,c83c <__floatsidf+0xac>
    c7cc:	00c002c4 	movi	r3,11
    c7d0:	1887c83a 	sub	r3,r3,r2
    c7d4:	88c8d83a 	srl	r4,r17,r3
    c7d8:	00c00434 	movhi	r3,16
    c7dc:	18ffffc4 	addi	r3,r3,-1
    c7e0:	10800544 	addi	r2,r2,21
    c7e4:	20c8703a 	and	r4,r4,r3
    c7e8:	8884983a 	sll	r2,r17,r2
    c7ec:	28c1ffcc 	andi	r3,r5,2047
    c7f0:	800d883a 	mov	r6,r16
    c7f4:	00000406 	br	c808 <__floatsidf+0x78>
    c7f8:	000d883a 	mov	r6,zero
    c7fc:	0007883a 	mov	r3,zero
    c800:	0009883a 	mov	r4,zero
    c804:	0005883a 	mov	r2,zero
    c808:	180a953a 	slli	r5,r3,20
    c80c:	31803fcc 	andi	r6,r6,255
    c810:	00c00434 	movhi	r3,16
    c814:	300c97fa 	slli	r6,r6,31
    c818:	18ffffc4 	addi	r3,r3,-1
    c81c:	20c6703a 	and	r3,r4,r3
    c820:	1946b03a 	or	r3,r3,r5
    c824:	1986b03a 	or	r3,r3,r6
    c828:	dfc00217 	ldw	ra,8(sp)
    c82c:	dc400117 	ldw	r17,4(sp)
    c830:	dc000017 	ldw	r16,0(sp)
    c834:	dec00304 	addi	sp,sp,12
    c838:	f800283a 	ret
    c83c:	10fffd44 	addi	r3,r2,-11
    c840:	88c8983a 	sll	r4,r17,r3
    c844:	00800434 	movhi	r2,16
    c848:	10bfffc4 	addi	r2,r2,-1
    c84c:	2088703a 	and	r4,r4,r2
    c850:	28c1ffcc 	andi	r3,r5,2047
    c854:	800d883a 	mov	r6,r16
    c858:	0005883a 	mov	r2,zero
    c85c:	003fea06 	br	c808 <__alt_mem_Flash_flash_data+0xf400c808>

0000c860 <__floatunsidf>:
    c860:	defffe04 	addi	sp,sp,-8
    c864:	dc000015 	stw	r16,0(sp)
    c868:	dfc00115 	stw	ra,4(sp)
    c86c:	2021883a 	mov	r16,r4
    c870:	20001026 	beq	r4,zero,c8b4 <__floatunsidf+0x54>
    c874:	000c9040 	call	c904 <__clzsi2>
    c878:	01410784 	movi	r5,1054
    c87c:	100d883a 	mov	r6,r2
    c880:	288bc83a 	sub	r5,r5,r2
    c884:	00800284 	movi	r2,10
    c888:	11801616 	blt	r2,r6,c8e4 <__floatunsidf+0x84>
    c88c:	008002c4 	movi	r2,11
    c890:	1185c83a 	sub	r2,r2,r6
    c894:	8084d83a 	srl	r2,r16,r2
    c898:	00c00434 	movhi	r3,16
    c89c:	31c00544 	addi	r7,r6,21
    c8a0:	18ffffc4 	addi	r3,r3,-1
    c8a4:	81e0983a 	sll	r16,r16,r7
    c8a8:	10cc703a 	and	r6,r2,r3
    c8ac:	2941ffcc 	andi	r5,r5,2047
    c8b0:	00000206 	br	c8bc <__floatunsidf+0x5c>
    c8b4:	000b883a 	mov	r5,zero
    c8b8:	000d883a 	mov	r6,zero
    c8bc:	280a953a 	slli	r5,r5,20
    c8c0:	00c00434 	movhi	r3,16
    c8c4:	18ffffc4 	addi	r3,r3,-1
    c8c8:	30c6703a 	and	r3,r6,r3
    c8cc:	8005883a 	mov	r2,r16
    c8d0:	1946b03a 	or	r3,r3,r5
    c8d4:	dfc00117 	ldw	ra,4(sp)
    c8d8:	dc000017 	ldw	r16,0(sp)
    c8dc:	dec00204 	addi	sp,sp,8
    c8e0:	f800283a 	ret
    c8e4:	31bffd44 	addi	r6,r6,-11
    c8e8:	818c983a 	sll	r6,r16,r6
    c8ec:	00800434 	movhi	r2,16
    c8f0:	10bfffc4 	addi	r2,r2,-1
    c8f4:	2941ffcc 	andi	r5,r5,2047
    c8f8:	0021883a 	mov	r16,zero
    c8fc:	308c703a 	and	r6,r6,r2
    c900:	003fee06 	br	c8bc <__alt_mem_Flash_flash_data+0xf400c8bc>

0000c904 <__clzsi2>:
    c904:	00bfffd4 	movui	r2,65535
    c908:	11000b36 	bltu	r2,r4,c938 <__clzsi2+0x34>
    c90c:	00803fc4 	movi	r2,255
    c910:	1100122e 	bgeu	r2,r4,c95c <__clzsi2+0x58>
    c914:	00c00204 	movi	r3,8
    c918:	01400604 	movi	r5,24
    c91c:	20c8d83a 	srl	r4,r4,r3
    c920:	008000b4 	movhi	r2,2
    c924:	10a60604 	addi	r2,r2,-26600
    c928:	1109883a 	add	r4,r2,r4
    c92c:	20800003 	ldbu	r2,0(r4)
    c930:	2885c83a 	sub	r2,r5,r2
    c934:	f800283a 	ret
    c938:	00804034 	movhi	r2,256
    c93c:	10bfffc4 	addi	r2,r2,-1
    c940:	11000336 	bltu	r2,r4,c950 <__clzsi2+0x4c>
    c944:	00c00404 	movi	r3,16
    c948:	180b883a 	mov	r5,r3
    c94c:	003ff306 	br	c91c <__alt_mem_Flash_flash_data+0xf400c91c>
    c950:	00c00604 	movi	r3,24
    c954:	01400204 	movi	r5,8
    c958:	003ff006 	br	c91c <__alt_mem_Flash_flash_data+0xf400c91c>
    c95c:	0007883a 	mov	r3,zero
    c960:	01400804 	movi	r5,32
    c964:	003fed06 	br	c91c <__alt_mem_Flash_flash_data+0xf400c91c>

0000c968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c968:	defffe04 	addi	sp,sp,-8
    c96c:	dfc00115 	stw	ra,4(sp)
    c970:	df000015 	stw	fp,0(sp)
    c974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c978:	008000b4 	movhi	r2,2
    c97c:	10afdf04 	addi	r2,r2,-16516
    c980:	10800017 	ldw	r2,0(r2)
    c984:	10000526 	beq	r2,zero,c99c <alt_get_errno+0x34>
    c988:	008000b4 	movhi	r2,2
    c98c:	10afdf04 	addi	r2,r2,-16516
    c990:	10800017 	ldw	r2,0(r2)
    c994:	103ee83a 	callr	r2
    c998:	00000206 	br	c9a4 <alt_get_errno+0x3c>
    c99c:	008000b4 	movhi	r2,2
    c9a0:	10b88004 	addi	r2,r2,-7680
}
    c9a4:	e037883a 	mov	sp,fp
    c9a8:	dfc00117 	ldw	ra,4(sp)
    c9ac:	df000017 	ldw	fp,0(sp)
    c9b0:	dec00204 	addi	sp,sp,8
    c9b4:	f800283a 	ret

0000c9b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c9b8:	defffb04 	addi	sp,sp,-20
    c9bc:	dfc00415 	stw	ra,16(sp)
    c9c0:	df000315 	stw	fp,12(sp)
    c9c4:	df000304 	addi	fp,sp,12
    c9c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c9cc:	e0bfff17 	ldw	r2,-4(fp)
    c9d0:	10000616 	blt	r2,zero,c9ec <close+0x34>
    c9d4:	e0bfff17 	ldw	r2,-4(fp)
    c9d8:	10c00324 	muli	r3,r2,12
    c9dc:	008000b4 	movhi	r2,2
    c9e0:	10a9c304 	addi	r2,r2,-22772
    c9e4:	1885883a 	add	r2,r3,r2
    c9e8:	00000106 	br	c9f0 <close+0x38>
    c9ec:	0005883a 	mov	r2,zero
    c9f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c9f4:	e0bffd17 	ldw	r2,-12(fp)
    c9f8:	10001926 	beq	r2,zero,ca60 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800017 	ldw	r2,0(r2)
    ca04:	10800417 	ldw	r2,16(r2)
    ca08:	10000626 	beq	r2,zero,ca24 <close+0x6c>
    ca0c:	e0bffd17 	ldw	r2,-12(fp)
    ca10:	10800017 	ldw	r2,0(r2)
    ca14:	10800417 	ldw	r2,16(r2)
    ca18:	e13ffd17 	ldw	r4,-12(fp)
    ca1c:	103ee83a 	callr	r2
    ca20:	00000106 	br	ca28 <close+0x70>
    ca24:	0005883a 	mov	r2,zero
    ca28:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ca2c:	e13fff17 	ldw	r4,-4(fp)
    ca30:	000d0d00 	call	d0d0 <alt_release_fd>
    if (rval < 0)
    ca34:	e0bffe17 	ldw	r2,-8(fp)
    ca38:	1000070e 	bge	r2,zero,ca58 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ca3c:	000c9680 	call	c968 <alt_get_errno>
    ca40:	1007883a 	mov	r3,r2
    ca44:	e0bffe17 	ldw	r2,-8(fp)
    ca48:	0085c83a 	sub	r2,zero,r2
    ca4c:	18800015 	stw	r2,0(r3)
      return -1;
    ca50:	00bfffc4 	movi	r2,-1
    ca54:	00000706 	br	ca74 <close+0xbc>
    }
    return 0;
    ca58:	0005883a 	mov	r2,zero
    ca5c:	00000506 	br	ca74 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ca60:	000c9680 	call	c968 <alt_get_errno>
    ca64:	1007883a 	mov	r3,r2
    ca68:	00801444 	movi	r2,81
    ca6c:	18800015 	stw	r2,0(r3)
    return -1;
    ca70:	00bfffc4 	movi	r2,-1
  }
}
    ca74:	e037883a 	mov	sp,fp
    ca78:	dfc00117 	ldw	ra,4(sp)
    ca7c:	df000017 	ldw	fp,0(sp)
    ca80:	dec00204 	addi	sp,sp,8
    ca84:	f800283a 	ret

0000ca88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ca88:	defffc04 	addi	sp,sp,-16
    ca8c:	df000315 	stw	fp,12(sp)
    ca90:	df000304 	addi	fp,sp,12
    ca94:	e13ffd15 	stw	r4,-12(fp)
    ca98:	e17ffe15 	stw	r5,-8(fp)
    ca9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    caa0:	e0bfff17 	ldw	r2,-4(fp)
}
    caa4:	e037883a 	mov	sp,fp
    caa8:	df000017 	ldw	fp,0(sp)
    caac:	dec00104 	addi	sp,sp,4
    cab0:	f800283a 	ret

0000cab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cab4:	defffe04 	addi	sp,sp,-8
    cab8:	dfc00115 	stw	ra,4(sp)
    cabc:	df000015 	stw	fp,0(sp)
    cac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cac4:	008000b4 	movhi	r2,2
    cac8:	10afdf04 	addi	r2,r2,-16516
    cacc:	10800017 	ldw	r2,0(r2)
    cad0:	10000526 	beq	r2,zero,cae8 <alt_get_errno+0x34>
    cad4:	008000b4 	movhi	r2,2
    cad8:	10afdf04 	addi	r2,r2,-16516
    cadc:	10800017 	ldw	r2,0(r2)
    cae0:	103ee83a 	callr	r2
    cae4:	00000206 	br	caf0 <alt_get_errno+0x3c>
    cae8:	008000b4 	movhi	r2,2
    caec:	10b88004 	addi	r2,r2,-7680
}
    caf0:	e037883a 	mov	sp,fp
    caf4:	dfc00117 	ldw	ra,4(sp)
    caf8:	df000017 	ldw	fp,0(sp)
    cafc:	dec00204 	addi	sp,sp,8
    cb00:	f800283a 	ret

0000cb04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cb04:	defffb04 	addi	sp,sp,-20
    cb08:	dfc00415 	stw	ra,16(sp)
    cb0c:	df000315 	stw	fp,12(sp)
    cb10:	df000304 	addi	fp,sp,12
    cb14:	e13ffe15 	stw	r4,-8(fp)
    cb18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cb1c:	e0bffe17 	ldw	r2,-8(fp)
    cb20:	10000616 	blt	r2,zero,cb3c <fstat+0x38>
    cb24:	e0bffe17 	ldw	r2,-8(fp)
    cb28:	10c00324 	muli	r3,r2,12
    cb2c:	008000b4 	movhi	r2,2
    cb30:	10a9c304 	addi	r2,r2,-22772
    cb34:	1885883a 	add	r2,r3,r2
    cb38:	00000106 	br	cb40 <fstat+0x3c>
    cb3c:	0005883a 	mov	r2,zero
    cb40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cb44:	e0bffd17 	ldw	r2,-12(fp)
    cb48:	10001026 	beq	r2,zero,cb8c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cb4c:	e0bffd17 	ldw	r2,-12(fp)
    cb50:	10800017 	ldw	r2,0(r2)
    cb54:	10800817 	ldw	r2,32(r2)
    cb58:	10000726 	beq	r2,zero,cb78 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	10800017 	ldw	r2,0(r2)
    cb64:	10800817 	ldw	r2,32(r2)
    cb68:	e13ffd17 	ldw	r4,-12(fp)
    cb6c:	e17fff17 	ldw	r5,-4(fp)
    cb70:	103ee83a 	callr	r2
    cb74:	00000a06 	br	cba0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cb78:	e0bfff17 	ldw	r2,-4(fp)
    cb7c:	00c80004 	movi	r3,8192
    cb80:	10c00115 	stw	r3,4(r2)
      return 0;
    cb84:	0005883a 	mov	r2,zero
    cb88:	00000506 	br	cba0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cb8c:	000cab40 	call	cab4 <alt_get_errno>
    cb90:	1007883a 	mov	r3,r2
    cb94:	00801444 	movi	r2,81
    cb98:	18800015 	stw	r2,0(r3)
    return -1;
    cb9c:	00bfffc4 	movi	r2,-1
  }
}
    cba0:	e037883a 	mov	sp,fp
    cba4:	dfc00117 	ldw	ra,4(sp)
    cba8:	df000017 	ldw	fp,0(sp)
    cbac:	dec00204 	addi	sp,sp,8
    cbb0:	f800283a 	ret

0000cbb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cbb4:	defffe04 	addi	sp,sp,-8
    cbb8:	dfc00115 	stw	ra,4(sp)
    cbbc:	df000015 	stw	fp,0(sp)
    cbc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cbc4:	008000b4 	movhi	r2,2
    cbc8:	10afdf04 	addi	r2,r2,-16516
    cbcc:	10800017 	ldw	r2,0(r2)
    cbd0:	10000526 	beq	r2,zero,cbe8 <alt_get_errno+0x34>
    cbd4:	008000b4 	movhi	r2,2
    cbd8:	10afdf04 	addi	r2,r2,-16516
    cbdc:	10800017 	ldw	r2,0(r2)
    cbe0:	103ee83a 	callr	r2
    cbe4:	00000206 	br	cbf0 <alt_get_errno+0x3c>
    cbe8:	008000b4 	movhi	r2,2
    cbec:	10b88004 	addi	r2,r2,-7680
}
    cbf0:	e037883a 	mov	sp,fp
    cbf4:	dfc00117 	ldw	ra,4(sp)
    cbf8:	df000017 	ldw	fp,0(sp)
    cbfc:	dec00204 	addi	sp,sp,8
    cc00:	f800283a 	ret

0000cc04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cc04:	deffed04 	addi	sp,sp,-76
    cc08:	dfc01215 	stw	ra,72(sp)
    cc0c:	df001115 	stw	fp,68(sp)
    cc10:	df001104 	addi	fp,sp,68
    cc14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cc18:	e0bfff17 	ldw	r2,-4(fp)
    cc1c:	10000616 	blt	r2,zero,cc38 <isatty+0x34>
    cc20:	e0bfff17 	ldw	r2,-4(fp)
    cc24:	10c00324 	muli	r3,r2,12
    cc28:	008000b4 	movhi	r2,2
    cc2c:	10a9c304 	addi	r2,r2,-22772
    cc30:	1885883a 	add	r2,r3,r2
    cc34:	00000106 	br	cc3c <isatty+0x38>
    cc38:	0005883a 	mov	r2,zero
    cc3c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cc40:	e0bfef17 	ldw	r2,-68(fp)
    cc44:	10000e26 	beq	r2,zero,cc80 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cc48:	e0bfef17 	ldw	r2,-68(fp)
    cc4c:	10800017 	ldw	r2,0(r2)
    cc50:	10800817 	ldw	r2,32(r2)
    cc54:	1000021e 	bne	r2,zero,cc60 <isatty+0x5c>
    {
      return 1;
    cc58:	00800044 	movi	r2,1
    cc5c:	00000d06 	br	cc94 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cc60:	e0bff004 	addi	r2,fp,-64
    cc64:	e13fff17 	ldw	r4,-4(fp)
    cc68:	100b883a 	mov	r5,r2
    cc6c:	000cb040 	call	cb04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cc70:	e0bff117 	ldw	r2,-60(fp)
    cc74:	10880020 	cmpeqi	r2,r2,8192
    cc78:	10803fcc 	andi	r2,r2,255
    cc7c:	00000506 	br	cc94 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cc80:	000cbb40 	call	cbb4 <alt_get_errno>
    cc84:	1007883a 	mov	r3,r2
    cc88:	00801444 	movi	r2,81
    cc8c:	18800015 	stw	r2,0(r3)
    return 0;
    cc90:	0005883a 	mov	r2,zero
  }
}
    cc94:	e037883a 	mov	sp,fp
    cc98:	dfc00117 	ldw	ra,4(sp)
    cc9c:	df000017 	ldw	fp,0(sp)
    cca0:	dec00204 	addi	sp,sp,8
    cca4:	f800283a 	ret

0000cca8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cca8:	defffc04 	addi	sp,sp,-16
    ccac:	df000315 	stw	fp,12(sp)
    ccb0:	df000304 	addi	fp,sp,12
    ccb4:	e13ffd15 	stw	r4,-12(fp)
    ccb8:	e17ffe15 	stw	r5,-8(fp)
    ccbc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ccc0:	e0fffe17 	ldw	r3,-8(fp)
    ccc4:	e0bffd17 	ldw	r2,-12(fp)
    ccc8:	18800c26 	beq	r3,r2,ccfc <alt_load_section+0x54>
  {
    while( to != end )
    cccc:	00000806 	br	ccf0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ccd0:	e0bffe17 	ldw	r2,-8(fp)
    ccd4:	10c00104 	addi	r3,r2,4
    ccd8:	e0fffe15 	stw	r3,-8(fp)
    ccdc:	e0fffd17 	ldw	r3,-12(fp)
    cce0:	19000104 	addi	r4,r3,4
    cce4:	e13ffd15 	stw	r4,-12(fp)
    cce8:	18c00017 	ldw	r3,0(r3)
    ccec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ccf0:	e0fffe17 	ldw	r3,-8(fp)
    ccf4:	e0bfff17 	ldw	r2,-4(fp)
    ccf8:	18bff51e 	bne	r3,r2,ccd0 <__alt_mem_Flash_flash_data+0xf400ccd0>
    {
      *to++ = *from++;
    }
  }
}
    ccfc:	e037883a 	mov	sp,fp
    cd00:	df000017 	ldw	fp,0(sp)
    cd04:	dec00104 	addi	sp,sp,4
    cd08:	f800283a 	ret

0000cd0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    cd0c:	defffe04 	addi	sp,sp,-8
    cd10:	dfc00115 	stw	ra,4(sp)
    cd14:	df000015 	stw	fp,0(sp)
    cd18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    cd1c:	010000b4 	movhi	r4,2
    cd20:	21300304 	addi	r4,r4,-16372
    cd24:	014000b4 	movhi	r5,2
    cd28:	29679004 	addi	r5,r5,-25024
    cd2c:	018000b4 	movhi	r6,2
    cd30:	31b00304 	addi	r6,r6,-16372
    cd34:	000cca80 	call	cca8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cd38:	01000034 	movhi	r4,0
    cd3c:	21000804 	addi	r4,r4,32
    cd40:	01400034 	movhi	r5,0
    cd44:	29400804 	addi	r5,r5,32
    cd48:	01800034 	movhi	r6,0
    cd4c:	31809104 	addi	r6,r6,580
    cd50:	000cca80 	call	cca8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cd54:	010000b4 	movhi	r4,2
    cd58:	21258404 	addi	r4,r4,-27120
    cd5c:	014000b4 	movhi	r5,2
    cd60:	29658404 	addi	r5,r5,-27120
    cd64:	018000b4 	movhi	r6,2
    cd68:	31a79004 	addi	r6,r6,-25024
    cd6c:	000cca80 	call	cca8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cd70:	00181c80 	call	181c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    cd74:	00184200 	call	18420 <alt_icache_flush_all>
}
    cd78:	e037883a 	mov	sp,fp
    cd7c:	dfc00117 	ldw	ra,4(sp)
    cd80:	df000017 	ldw	fp,0(sp)
    cd84:	dec00204 	addi	sp,sp,8
    cd88:	f800283a 	ret

0000cd8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd8c:	defffe04 	addi	sp,sp,-8
    cd90:	dfc00115 	stw	ra,4(sp)
    cd94:	df000015 	stw	fp,0(sp)
    cd98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd9c:	008000b4 	movhi	r2,2
    cda0:	10afdf04 	addi	r2,r2,-16516
    cda4:	10800017 	ldw	r2,0(r2)
    cda8:	10000526 	beq	r2,zero,cdc0 <alt_get_errno+0x34>
    cdac:	008000b4 	movhi	r2,2
    cdb0:	10afdf04 	addi	r2,r2,-16516
    cdb4:	10800017 	ldw	r2,0(r2)
    cdb8:	103ee83a 	callr	r2
    cdbc:	00000206 	br	cdc8 <alt_get_errno+0x3c>
    cdc0:	008000b4 	movhi	r2,2
    cdc4:	10b88004 	addi	r2,r2,-7680
}
    cdc8:	e037883a 	mov	sp,fp
    cdcc:	dfc00117 	ldw	ra,4(sp)
    cdd0:	df000017 	ldw	fp,0(sp)
    cdd4:	dec00204 	addi	sp,sp,8
    cdd8:	f800283a 	ret

0000cddc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cddc:	defff904 	addi	sp,sp,-28
    cde0:	dfc00615 	stw	ra,24(sp)
    cde4:	df000515 	stw	fp,20(sp)
    cde8:	df000504 	addi	fp,sp,20
    cdec:	e13ffd15 	stw	r4,-12(fp)
    cdf0:	e17ffe15 	stw	r5,-8(fp)
    cdf4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cdf8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cdfc:	e0bffd17 	ldw	r2,-12(fp)
    ce00:	10000616 	blt	r2,zero,ce1c <lseek+0x40>
    ce04:	e0bffd17 	ldw	r2,-12(fp)
    ce08:	10c00324 	muli	r3,r2,12
    ce0c:	008000b4 	movhi	r2,2
    ce10:	10a9c304 	addi	r2,r2,-22772
    ce14:	1885883a 	add	r2,r3,r2
    ce18:	00000106 	br	ce20 <lseek+0x44>
    ce1c:	0005883a 	mov	r2,zero
    ce20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ce24:	e0bffc17 	ldw	r2,-16(fp)
    ce28:	10001026 	beq	r2,zero,ce6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ce2c:	e0bffc17 	ldw	r2,-16(fp)
    ce30:	10800017 	ldw	r2,0(r2)
    ce34:	10800717 	ldw	r2,28(r2)
    ce38:	10000926 	beq	r2,zero,ce60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ce3c:	e0bffc17 	ldw	r2,-16(fp)
    ce40:	10800017 	ldw	r2,0(r2)
    ce44:	10800717 	ldw	r2,28(r2)
    ce48:	e13ffc17 	ldw	r4,-16(fp)
    ce4c:	e17ffe17 	ldw	r5,-8(fp)
    ce50:	e1bfff17 	ldw	r6,-4(fp)
    ce54:	103ee83a 	callr	r2
    ce58:	e0bffb15 	stw	r2,-20(fp)
    ce5c:	00000506 	br	ce74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ce60:	00bfde84 	movi	r2,-134
    ce64:	e0bffb15 	stw	r2,-20(fp)
    ce68:	00000206 	br	ce74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ce6c:	00bfebc4 	movi	r2,-81
    ce70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ce74:	e0bffb17 	ldw	r2,-20(fp)
    ce78:	1000070e 	bge	r2,zero,ce98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ce7c:	000cd8c0 	call	cd8c <alt_get_errno>
    ce80:	1007883a 	mov	r3,r2
    ce84:	e0bffb17 	ldw	r2,-20(fp)
    ce88:	0085c83a 	sub	r2,zero,r2
    ce8c:	18800015 	stw	r2,0(r3)
    rc = -1;
    ce90:	00bfffc4 	movi	r2,-1
    ce94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ce98:	e0bffb17 	ldw	r2,-20(fp)
}
    ce9c:	e037883a 	mov	sp,fp
    cea0:	dfc00117 	ldw	ra,4(sp)
    cea4:	df000017 	ldw	fp,0(sp)
    cea8:	dec00204 	addi	sp,sp,8
    ceac:	f800283a 	ret

0000ceb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ceb0:	defff904 	addi	sp,sp,-28
    ceb4:	dfc00615 	stw	ra,24(sp)
    ceb8:	df000515 	stw	fp,20(sp)
    cebc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cec0:	0009883a 	mov	r4,zero
    cec4:	00152fc0 	call	152fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    cec8:	000dea00 	call	dea0 <OSInit>
    cecc:	01000044 	movi	r4,1
    ced0:	0012a100 	call	12a10 <OSSemCreate>
    ced4:	1007883a 	mov	r3,r2
    ced8:	008000b4 	movhi	r2,2
    cedc:	10b88604 	addi	r2,r2,-7656
    cee0:	10c00015 	stw	r3,0(r2)
    cee4:	01000044 	movi	r4,1
    cee8:	0012a100 	call	12a10 <OSSemCreate>
    ceec:	1007883a 	mov	r3,r2
    cef0:	008000b4 	movhi	r2,2
    cef4:	10b88804 	addi	r2,r2,-7648
    cef8:	10c00015 	stw	r3,0(r2)
    cefc:	008000b4 	movhi	r2,2
    cf00:	10b88104 	addi	r2,r2,-7676
    cf04:	e0bffc15 	stw	r2,-16(fp)
    cf08:	00800044 	movi	r2,1
    cf0c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    cf10:	e0bffd0b 	ldhu	r2,-12(fp)
    cf14:	1009883a 	mov	r4,r2
    cf18:	0012a100 	call	12a10 <OSSemCreate>
    cf1c:	1007883a 	mov	r3,r2
    cf20:	e0bffc17 	ldw	r2,-16(fp)
    cf24:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cf28:	00153300 	call	15330 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cf2c:	010000b4 	movhi	r4,2
    cf30:	21264904 	addi	r4,r4,-26332
    cf34:	014000b4 	movhi	r5,2
    cf38:	29664904 	addi	r5,r5,-26332
    cf3c:	018000b4 	movhi	r6,2
    cf40:	31a64904 	addi	r6,r6,-26332
    cf44:	00185100 	call	18510 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    cf48:	00182d80 	call	182d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    cf4c:	010000b4 	movhi	r4,2
    cf50:	2120cd04 	addi	r4,r4,-31948
    cf54:	00191d40 	call	191d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    cf58:	d128b017 	ldw	r4,-23872(gp)
    cf5c:	d0e8b117 	ldw	r3,-23868(gp)
    cf60:	d0a8b217 	ldw	r2,-23864(gp)
    cf64:	180b883a 	mov	r5,r3
    cf68:	100d883a 	mov	r6,r2
    cf6c:	00003040 	call	304 <main>
    cf70:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    cf74:	01000044 	movi	r4,1
    cf78:	000c9b80 	call	c9b8 <close>
  exit (result);
    cf7c:	e13ffb17 	ldw	r4,-20(fp)
    cf80:	00191e80 	call	191e8 <exit>

0000cf84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf84:	defffe04 	addi	sp,sp,-8
    cf88:	dfc00115 	stw	ra,4(sp)
    cf8c:	df000015 	stw	fp,0(sp)
    cf90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf94:	008000b4 	movhi	r2,2
    cf98:	10afdf04 	addi	r2,r2,-16516
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	10000526 	beq	r2,zero,cfb8 <alt_get_errno+0x34>
    cfa4:	008000b4 	movhi	r2,2
    cfa8:	10afdf04 	addi	r2,r2,-16516
    cfac:	10800017 	ldw	r2,0(r2)
    cfb0:	103ee83a 	callr	r2
    cfb4:	00000206 	br	cfc0 <alt_get_errno+0x3c>
    cfb8:	008000b4 	movhi	r2,2
    cfbc:	10b88004 	addi	r2,r2,-7680
}
    cfc0:	e037883a 	mov	sp,fp
    cfc4:	dfc00117 	ldw	ra,4(sp)
    cfc8:	df000017 	ldw	fp,0(sp)
    cfcc:	dec00204 	addi	sp,sp,8
    cfd0:	f800283a 	ret

0000cfd4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    cfd4:	defff904 	addi	sp,sp,-28
    cfd8:	dfc00615 	stw	ra,24(sp)
    cfdc:	df000515 	stw	fp,20(sp)
    cfe0:	df000504 	addi	fp,sp,20
    cfe4:	e13ffd15 	stw	r4,-12(fp)
    cfe8:	e17ffe15 	stw	r5,-8(fp)
    cfec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cff0:	e0bffd17 	ldw	r2,-12(fp)
    cff4:	10000616 	blt	r2,zero,d010 <read+0x3c>
    cff8:	e0bffd17 	ldw	r2,-12(fp)
    cffc:	10c00324 	muli	r3,r2,12
    d000:	008000b4 	movhi	r2,2
    d004:	10a9c304 	addi	r2,r2,-22772
    d008:	1885883a 	add	r2,r3,r2
    d00c:	00000106 	br	d014 <read+0x40>
    d010:	0005883a 	mov	r2,zero
    d014:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d018:	e0bffb17 	ldw	r2,-20(fp)
    d01c:	10002226 	beq	r2,zero,d0a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d020:	e0bffb17 	ldw	r2,-20(fp)
    d024:	10800217 	ldw	r2,8(r2)
    d028:	108000cc 	andi	r2,r2,3
    d02c:	10800060 	cmpeqi	r2,r2,1
    d030:	1000181e 	bne	r2,zero,d094 <read+0xc0>
        (fd->dev->read))
    d034:	e0bffb17 	ldw	r2,-20(fp)
    d038:	10800017 	ldw	r2,0(r2)
    d03c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d040:	10001426 	beq	r2,zero,d094 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d044:	e0bffb17 	ldw	r2,-20(fp)
    d048:	10800017 	ldw	r2,0(r2)
    d04c:	10800517 	ldw	r2,20(r2)
    d050:	e0ffff17 	ldw	r3,-4(fp)
    d054:	e13ffb17 	ldw	r4,-20(fp)
    d058:	e17ffe17 	ldw	r5,-8(fp)
    d05c:	180d883a 	mov	r6,r3
    d060:	103ee83a 	callr	r2
    d064:	e0bffc15 	stw	r2,-16(fp)
    d068:	e0bffc17 	ldw	r2,-16(fp)
    d06c:	1000070e 	bge	r2,zero,d08c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d070:	000cf840 	call	cf84 <alt_get_errno>
    d074:	1007883a 	mov	r3,r2
    d078:	e0bffc17 	ldw	r2,-16(fp)
    d07c:	0085c83a 	sub	r2,zero,r2
    d080:	18800015 	stw	r2,0(r3)
          return -1;
    d084:	00bfffc4 	movi	r2,-1
    d088:	00000c06 	br	d0bc <read+0xe8>
        }
        return rval;
    d08c:	e0bffc17 	ldw	r2,-16(fp)
    d090:	00000a06 	br	d0bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d094:	000cf840 	call	cf84 <alt_get_errno>
    d098:	1007883a 	mov	r3,r2
    d09c:	00800344 	movi	r2,13
    d0a0:	18800015 	stw	r2,0(r3)
    d0a4:	00000406 	br	d0b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d0a8:	000cf840 	call	cf84 <alt_get_errno>
    d0ac:	1007883a 	mov	r3,r2
    d0b0:	00801444 	movi	r2,81
    d0b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d0b8:	00bfffc4 	movi	r2,-1
}
    d0bc:	e037883a 	mov	sp,fp
    d0c0:	dfc00117 	ldw	ra,4(sp)
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00204 	addi	sp,sp,8
    d0cc:	f800283a 	ret

0000d0d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d0d0:	defffe04 	addi	sp,sp,-8
    d0d4:	df000115 	stw	fp,4(sp)
    d0d8:	df000104 	addi	fp,sp,4
    d0dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d0e0:	e0bfff17 	ldw	r2,-4(fp)
    d0e4:	108000d0 	cmplti	r2,r2,3
    d0e8:	10000d1e 	bne	r2,zero,d120 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d0ec:	008000b4 	movhi	r2,2
    d0f0:	10a9c304 	addi	r2,r2,-22772
    d0f4:	e0ffff17 	ldw	r3,-4(fp)
    d0f8:	18c00324 	muli	r3,r3,12
    d0fc:	18c00204 	addi	r3,r3,8
    d100:	10c5883a 	add	r2,r2,r3
    d104:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d108:	008000b4 	movhi	r2,2
    d10c:	10a9c304 	addi	r2,r2,-22772
    d110:	e0ffff17 	ldw	r3,-4(fp)
    d114:	18c00324 	muli	r3,r3,12
    d118:	10c5883a 	add	r2,r2,r3
    d11c:	10000015 	stw	zero,0(r2)
  }
}
    d120:	e037883a 	mov	sp,fp
    d124:	df000017 	ldw	fp,0(sp)
    d128:	dec00104 	addi	sp,sp,4
    d12c:	f800283a 	ret

0000d130 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d130:	defff904 	addi	sp,sp,-28
    d134:	df000615 	stw	fp,24(sp)
    d138:	df000604 	addi	fp,sp,24
    d13c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d140:	0005303a 	rdctl	r2,status
    d144:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d148:	e0fffc17 	ldw	r3,-16(fp)
    d14c:	00bfff84 	movi	r2,-2
    d150:	1884703a 	and	r2,r3,r2
    d154:	1001703a 	wrctl	status,r2
  
  return context;
    d158:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d15c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d160:	d0a00e17 	ldw	r2,-32712(gp)
    d164:	10c000c4 	addi	r3,r2,3
    d168:	00bfff04 	movi	r2,-4
    d16c:	1884703a 	and	r2,r3,r2
    d170:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d174:	d0e00e17 	ldw	r3,-32712(gp)
    d178:	e0bfff17 	ldw	r2,-4(fp)
    d17c:	1887883a 	add	r3,r3,r2
    d180:	00810034 	movhi	r2,1024
    d184:	10800004 	addi	r2,r2,0
    d188:	10c0062e 	bgeu	r2,r3,d1a4 <sbrk+0x74>
    d18c:	e0bffa17 	ldw	r2,-24(fp)
    d190:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d194:	e0bffd17 	ldw	r2,-12(fp)
    d198:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d19c:	00bfffc4 	movi	r2,-1
    d1a0:	00000b06 	br	d1d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d1a4:	d0a00e17 	ldw	r2,-32712(gp)
    d1a8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d1ac:	d0e00e17 	ldw	r3,-32712(gp)
    d1b0:	e0bfff17 	ldw	r2,-4(fp)
    d1b4:	1885883a 	add	r2,r3,r2
    d1b8:	d0a00e15 	stw	r2,-32712(gp)
    d1bc:	e0bffa17 	ldw	r2,-24(fp)
    d1c0:	e0bffe15 	stw	r2,-8(fp)
    d1c4:	e0bffe17 	ldw	r2,-8(fp)
    d1c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d1cc:	e0bffb17 	ldw	r2,-20(fp)
} 
    d1d0:	e037883a 	mov	sp,fp
    d1d4:	df000017 	ldw	fp,0(sp)
    d1d8:	dec00104 	addi	sp,sp,4
    d1dc:	f800283a 	ret

0000d1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1e0:	defffe04 	addi	sp,sp,-8
    d1e4:	dfc00115 	stw	ra,4(sp)
    d1e8:	df000015 	stw	fp,0(sp)
    d1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d1f0:	008000b4 	movhi	r2,2
    d1f4:	10afdf04 	addi	r2,r2,-16516
    d1f8:	10800017 	ldw	r2,0(r2)
    d1fc:	10000526 	beq	r2,zero,d214 <alt_get_errno+0x34>
    d200:	008000b4 	movhi	r2,2
    d204:	10afdf04 	addi	r2,r2,-16516
    d208:	10800017 	ldw	r2,0(r2)
    d20c:	103ee83a 	callr	r2
    d210:	00000206 	br	d21c <alt_get_errno+0x3c>
    d214:	008000b4 	movhi	r2,2
    d218:	10b88004 	addi	r2,r2,-7680
}
    d21c:	e037883a 	mov	sp,fp
    d220:	dfc00117 	ldw	ra,4(sp)
    d224:	df000017 	ldw	fp,0(sp)
    d228:	dec00204 	addi	sp,sp,8
    d22c:	f800283a 	ret

0000d230 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d230:	defff904 	addi	sp,sp,-28
    d234:	dfc00615 	stw	ra,24(sp)
    d238:	df000515 	stw	fp,20(sp)
    d23c:	df000504 	addi	fp,sp,20
    d240:	e13ffd15 	stw	r4,-12(fp)
    d244:	e17ffe15 	stw	r5,-8(fp)
    d248:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d24c:	e0bffd17 	ldw	r2,-12(fp)
    d250:	10000616 	blt	r2,zero,d26c <write+0x3c>
    d254:	e0bffd17 	ldw	r2,-12(fp)
    d258:	10c00324 	muli	r3,r2,12
    d25c:	008000b4 	movhi	r2,2
    d260:	10a9c304 	addi	r2,r2,-22772
    d264:	1885883a 	add	r2,r3,r2
    d268:	00000106 	br	d270 <write+0x40>
    d26c:	0005883a 	mov	r2,zero
    d270:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d274:	e0bffb17 	ldw	r2,-20(fp)
    d278:	10002126 	beq	r2,zero,d300 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d27c:	e0bffb17 	ldw	r2,-20(fp)
    d280:	10800217 	ldw	r2,8(r2)
    d284:	108000cc 	andi	r2,r2,3
    d288:	10001826 	beq	r2,zero,d2ec <write+0xbc>
    d28c:	e0bffb17 	ldw	r2,-20(fp)
    d290:	10800017 	ldw	r2,0(r2)
    d294:	10800617 	ldw	r2,24(r2)
    d298:	10001426 	beq	r2,zero,d2ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d29c:	e0bffb17 	ldw	r2,-20(fp)
    d2a0:	10800017 	ldw	r2,0(r2)
    d2a4:	10800617 	ldw	r2,24(r2)
    d2a8:	e0ffff17 	ldw	r3,-4(fp)
    d2ac:	e13ffb17 	ldw	r4,-20(fp)
    d2b0:	e17ffe17 	ldw	r5,-8(fp)
    d2b4:	180d883a 	mov	r6,r3
    d2b8:	103ee83a 	callr	r2
    d2bc:	e0bffc15 	stw	r2,-16(fp)
    d2c0:	e0bffc17 	ldw	r2,-16(fp)
    d2c4:	1000070e 	bge	r2,zero,d2e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d2c8:	000d1e00 	call	d1e0 <alt_get_errno>
    d2cc:	1007883a 	mov	r3,r2
    d2d0:	e0bffc17 	ldw	r2,-16(fp)
    d2d4:	0085c83a 	sub	r2,zero,r2
    d2d8:	18800015 	stw	r2,0(r3)
        return -1;
    d2dc:	00bfffc4 	movi	r2,-1
    d2e0:	00000c06 	br	d314 <write+0xe4>
      }
      return rval;
    d2e4:	e0bffc17 	ldw	r2,-16(fp)
    d2e8:	00000a06 	br	d314 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d2ec:	000d1e00 	call	d1e0 <alt_get_errno>
    d2f0:	1007883a 	mov	r3,r2
    d2f4:	00800344 	movi	r2,13
    d2f8:	18800015 	stw	r2,0(r3)
    d2fc:	00000406 	br	d310 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d300:	000d1e00 	call	d1e0 <alt_get_errno>
    d304:	1007883a 	mov	r3,r2
    d308:	00801444 	movi	r2,81
    d30c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d310:	00bfffc4 	movi	r2,-1
}
    d314:	e037883a 	mov	sp,fp
    d318:	dfc00117 	ldw	ra,4(sp)
    d31c:	df000017 	ldw	fp,0(sp)
    d320:	dec00204 	addi	sp,sp,8
    d324:	f800283a 	ret

0000d328 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d328:	deffdf04 	addi	sp,sp,-132
    d32c:	dfc02015 	stw	ra,128(sp)
    d330:	df001f15 	stw	fp,124(sp)
    d334:	df001f04 	addi	fp,sp,124
    d338:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d33c:	e0bfe204 	addi	r2,fp,-120
    d340:	01003fc4 	movi	r4,255
    d344:	100b883a 	mov	r5,r2
    d348:	0014bc40 	call	14bc4 <OSTaskQuery>
    d34c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d350:	e0bffe83 	ldbu	r2,-6(fp)
    d354:	10803fcc 	andi	r2,r2,255
    d358:	10000126 	beq	r2,zero,d360 <__env_lock+0x38>
    return;
    d35c:	00001d06 	br	d3d4 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    d360:	e0bfee83 	ldbu	r2,-70(fp)
    d364:	10803fcc 	andi	r2,r2,255
    d368:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d36c:	d0e8b417 	ldw	r3,-23856(gp)
    d370:	e0bffd04 	addi	r2,fp,-12
    d374:	1809883a 	mov	r4,r3
    d378:	100b883a 	mov	r5,r2
    d37c:	001325c0 	call	1325c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d380:	e0bffe43 	ldbu	r2,-7(fp)
    d384:	10803fcc 	andi	r2,r2,255
    d388:	10000726 	beq	r2,zero,d3a8 <__env_lock+0x80>
    d38c:	d0a00f17 	ldw	r2,-32708(gp)
    d390:	e0ffe117 	ldw	r3,-124(fp)
    d394:	1880041e 	bne	r3,r2,d3a8 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    d398:	d0a8b317 	ldw	r2,-23860(gp)
    d39c:	10800044 	addi	r2,r2,1
    d3a0:	d0a8b315 	stw	r2,-23860(gp)
    d3a4:	00000a06 	br	d3d0 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d3a8:	d0e8b417 	ldw	r3,-23856(gp)
    d3ac:	e0bffe84 	addi	r2,fp,-6
    d3b0:	1809883a 	mov	r4,r3
    d3b4:	000b883a 	mov	r5,zero
    d3b8:	100d883a 	mov	r6,r2
    d3bc:	0012d780 	call	12d78 <OSSemPend>
    locks  = 1;
    d3c0:	00800044 	movi	r2,1
    d3c4:	d0a8b315 	stw	r2,-23860(gp)
    lockid = id;
    d3c8:	e0bfe117 	ldw	r2,-124(fp)
    d3cc:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d3d0:	0001883a 	nop
}
    d3d4:	e037883a 	mov	sp,fp
    d3d8:	dfc00117 	ldw	ra,4(sp)
    d3dc:	df000017 	ldw	fp,0(sp)
    d3e0:	dec00204 	addi	sp,sp,8
    d3e4:	f800283a 	ret

0000d3e8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d3e8:	defffd04 	addi	sp,sp,-12
    d3ec:	dfc00215 	stw	ra,8(sp)
    d3f0:	df000115 	stw	fp,4(sp)
    d3f4:	df000104 	addi	fp,sp,4
    d3f8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    d3fc:	d0a8b317 	ldw	r2,-23860(gp)
    d400:	1000011e 	bne	r2,zero,d408 <__env_unlock+0x20>
    return;
    d404:	00000a06 	br	d430 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    d408:	d0a8b317 	ldw	r2,-23860(gp)
    d40c:	10bfffc4 	addi	r2,r2,-1
    d410:	d0a8b315 	stw	r2,-23860(gp)
    d414:	d0a8b317 	ldw	r2,-23860(gp)
    d418:	1000051e 	bne	r2,zero,d430 <__env_unlock+0x48>
  {
    lockid = -1;
    d41c:	00bfffc4 	movi	r2,-1
    d420:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    d424:	d0a8b417 	ldw	r2,-23856(gp)
    d428:	1009883a 	mov	r4,r2
    d42c:	001314c0 	call	1314c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d430:	e037883a 	mov	sp,fp
    d434:	dfc00117 	ldw	ra,4(sp)
    d438:	df000017 	ldw	fp,0(sp)
    d43c:	dec00204 	addi	sp,sp,8
    d440:	f800283a 	ret

0000d444 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    d444:	deffdb04 	addi	sp,sp,-148
    d448:	dfc02415 	stw	ra,144(sp)
    d44c:	df002315 	stw	fp,140(sp)
    d450:	df002304 	addi	fp,sp,140
    d454:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d458:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    d45c:	008000b4 	movhi	r2,2
    d460:	10b88944 	addi	r2,r2,-7643
    d464:	10800003 	ldbu	r2,0(r2)
    d468:	10803fcc 	andi	r2,r2,255
    d46c:	10800060 	cmpeqi	r2,r2,1
    d470:	1000011e 	bne	r2,zero,d478 <__malloc_lock+0x34>
      return;
    d474:	00003606 	br	d550 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d478:	e0bfe204 	addi	r2,fp,-120
    d47c:	01003fc4 	movi	r4,255
    d480:	100b883a 	mov	r5,r2
    d484:	0014bc40 	call	14bc4 <OSTaskQuery>
    d488:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d48c:	e0bffe83 	ldbu	r2,-6(fp)
    d490:	10803fcc 	andi	r2,r2,255
    d494:	10000126 	beq	r2,zero,d49c <__malloc_lock+0x58>
    return;
    d498:	00002d06 	br	d550 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    d49c:	e0bfee83 	ldbu	r2,-70(fp)
    d4a0:	10803fcc 	andi	r2,r2,255
    d4a4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    d4a8:	d0e8b617 	ldw	r3,-23848(gp)
    d4ac:	e0bffd04 	addi	r2,fp,-12
    d4b0:	1809883a 	mov	r4,r3
    d4b4:	100b883a 	mov	r5,r2
    d4b8:	001325c0 	call	1325c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4bc:	0005303a 	rdctl	r2,status
    d4c0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4c4:	e0ffdf17 	ldw	r3,-132(fp)
    d4c8:	00bfff84 	movi	r2,-2
    d4cc:	1884703a 	and	r2,r3,r2
    d4d0:	1001703a 	wrctl	status,r2
  
  return context;
    d4d4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    d4d8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    d4dc:	e0bffd0b 	ldhu	r2,-12(fp)
    d4e0:	10bfffcc 	andi	r2,r2,65535
    d4e4:	10000b1e 	bne	r2,zero,d514 <__malloc_lock+0xd0>
    d4e8:	d0a01017 	ldw	r2,-32704(gp)
    d4ec:	e0ffde17 	ldw	r3,-136(fp)
    d4f0:	1880081e 	bne	r3,r2,d514 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    d4f4:	d0a8b517 	ldw	r2,-23852(gp)
    d4f8:	10800044 	addi	r2,r2,1
    d4fc:	d0a8b515 	stw	r2,-23852(gp)
    d500:	e0bfdd17 	ldw	r2,-140(fp)
    d504:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d508:	e0bfe017 	ldw	r2,-128(fp)
    d50c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    d510:	00000e06 	br	d54c <__malloc_lock+0x108>
    d514:	e0bfdd17 	ldw	r2,-140(fp)
    d518:	e0bfe115 	stw	r2,-124(fp)
    d51c:	e0bfe117 	ldw	r2,-124(fp)
    d520:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    d524:	d0e8b617 	ldw	r3,-23848(gp)
    d528:	e0bffe84 	addi	r2,fp,-6
    d52c:	1809883a 	mov	r4,r3
    d530:	000b883a 	mov	r5,zero
    d534:	100d883a 	mov	r6,r2
    d538:	0012d780 	call	12d78 <OSSemPend>
    locks  = 1;
    d53c:	00800044 	movi	r2,1
    d540:	d0a8b515 	stw	r2,-23852(gp)
    lockid = id;
    d544:	e0bfde17 	ldw	r2,-136(fp)
    d548:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d54c:	0001883a 	nop
}
    d550:	e037883a 	mov	sp,fp
    d554:	dfc00117 	ldw	ra,4(sp)
    d558:	df000017 	ldw	fp,0(sp)
    d55c:	dec00204 	addi	sp,sp,8
    d560:	f800283a 	ret

0000d564 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d564:	defff804 	addi	sp,sp,-32
    d568:	dfc00715 	stw	ra,28(sp)
    d56c:	df000615 	stw	fp,24(sp)
    d570:	df000604 	addi	fp,sp,24
    d574:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d578:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    d57c:	008000b4 	movhi	r2,2
    d580:	10b88944 	addi	r2,r2,-7643
    d584:	10800003 	ldbu	r2,0(r2)
    d588:	10803fcc 	andi	r2,r2,255
    d58c:	10800060 	cmpeqi	r2,r2,1
    d590:	1000011e 	bne	r2,zero,d598 <__malloc_unlock+0x34>
      return;
    d594:	00002206 	br	d620 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d598:	0005303a 	rdctl	r2,status
    d59c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5a0:	e0fffb17 	ldw	r3,-20(fp)
    d5a4:	00bfff84 	movi	r2,-2
    d5a8:	1884703a 	and	r2,r3,r2
    d5ac:	1001703a 	wrctl	status,r2
  
  return context;
    d5b0:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    d5b4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    d5b8:	d0a8b517 	ldw	r2,-23852(gp)
    d5bc:	1000051e 	bne	r2,zero,d5d4 <__malloc_unlock+0x70>
    d5c0:	e0bffa17 	ldw	r2,-24(fp)
    d5c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5c8:	e0bffc17 	ldw	r2,-16(fp)
    d5cc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    d5d0:	00001306 	br	d620 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    d5d4:	d0a8b517 	ldw	r2,-23852(gp)
    d5d8:	10bfffc4 	addi	r2,r2,-1
    d5dc:	d0a8b515 	stw	r2,-23852(gp)
    d5e0:	d0a8b517 	ldw	r2,-23852(gp)
    d5e4:	10000a1e 	bne	r2,zero,d610 <__malloc_unlock+0xac>
  {
    lockid = -1;
    d5e8:	00bfffc4 	movi	r2,-1
    d5ec:	d0a01015 	stw	r2,-32704(gp)
    d5f0:	e0bffa17 	ldw	r2,-24(fp)
    d5f4:	e0bffd15 	stw	r2,-12(fp)
    d5f8:	e0bffd17 	ldw	r2,-12(fp)
    d5fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    d600:	d0a8b617 	ldw	r2,-23848(gp)
    d604:	1009883a 	mov	r4,r2
    d608:	001314c0 	call	1314c <OSSemPost>
    d60c:	00000406 	br	d620 <__malloc_unlock+0xbc>
    d610:	e0bffa17 	ldw	r2,-24(fp)
    d614:	e0bffe15 	stw	r2,-8(fp)
    d618:	e0bffe17 	ldw	r2,-8(fp)
    d61c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d620:	e037883a 	mov	sp,fp
    d624:	dfc00117 	ldw	ra,4(sp)
    d628:	df000017 	ldw	fp,0(sp)
    d62c:	dec00204 	addi	sp,sp,8
    d630:	f800283a 	ret

0000d634 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    d634:	defff704 	addi	sp,sp,-36
    d638:	dfc00815 	stw	ra,32(sp)
    d63c:	df000715 	stw	fp,28(sp)
    d640:	df000704 	addi	fp,sp,28
    d644:	e13ffd15 	stw	r4,-12(fp)
    d648:	e17ffe15 	stw	r5,-8(fp)
    d64c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d650:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    d654:	e0bfff17 	ldw	r2,-4(fp)
    d658:	1000021e 	bne	r2,zero,d664 <OSEventNameGet+0x30>
        return (0);
    d65c:	0005883a 	mov	r2,zero
    d660:	00003706 	br	d740 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    d664:	e0bffd17 	ldw	r2,-12(fp)
    d668:	1000051e 	bne	r2,zero,d680 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    d66c:	e0bfff17 	ldw	r2,-4(fp)
    d670:	00c00104 	movi	r3,4
    d674:	10c00005 	stb	r3,0(r2)
        return (0);
    d678:	0005883a 	mov	r2,zero
    d67c:	00003006 	br	d740 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    d680:	e0bffe17 	ldw	r2,-8(fp)
    d684:	1000051e 	bne	r2,zero,d69c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    d688:	e0bfff17 	ldw	r2,-4(fp)
    d68c:	00c00304 	movi	r3,12
    d690:	10c00005 	stb	r3,0(r2)
        return (0);
    d694:	0005883a 	mov	r2,zero
    d698:	00002906 	br	d740 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    d69c:	d0a8c503 	ldbu	r2,-23788(gp)
    d6a0:	10803fcc 	andi	r2,r2,255
    d6a4:	10000526 	beq	r2,zero,d6bc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    d6a8:	e0bfff17 	ldw	r2,-4(fp)
    d6ac:	00c00444 	movi	r3,17
    d6b0:	10c00005 	stb	r3,0(r2)
        return (0);
    d6b4:	0005883a 	mov	r2,zero
    d6b8:	00002106 	br	d740 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    d6bc:	e0bffd17 	ldw	r2,-12(fp)
    d6c0:	10800003 	ldbu	r2,0(r2)
    d6c4:	10803fcc 	andi	r2,r2,255
    d6c8:	10bfffc4 	addi	r2,r2,-1
    d6cc:	10800128 	cmpgeui	r2,r2,4
    d6d0:	10000526 	beq	r2,zero,d6e8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    d6d4:	e0bfff17 	ldw	r2,-4(fp)
    d6d8:	00c00044 	movi	r3,1
    d6dc:	10c00005 	stb	r3,0(r2)
             return (0);
    d6e0:	0005883a 	mov	r2,zero
    d6e4:	00001606 	br	d740 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    d6e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6ec:	0005303a 	rdctl	r2,status
    d6f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6f4:	e0fffb17 	ldw	r3,-20(fp)
    d6f8:	00bfff84 	movi	r2,-2
    d6fc:	1884703a 	and	r2,r3,r2
    d700:	1001703a 	wrctl	status,r2
  
  return context;
    d704:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    d708:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    d70c:	e0bffd17 	ldw	r2,-12(fp)
    d710:	10800384 	addi	r2,r2,14
    d714:	e13ffe17 	ldw	r4,-8(fp)
    d718:	100b883a 	mov	r5,r2
    d71c:	000f0880 	call	f088 <OS_StrCopy>
    d720:	e0bffa05 	stb	r2,-24(fp)
    d724:	e0bff917 	ldw	r2,-28(fp)
    d728:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d72c:	e0bffc17 	ldw	r2,-16(fp)
    d730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    d734:	e0bfff17 	ldw	r2,-4(fp)
    d738:	10000005 	stb	zero,0(r2)
    return (len);
    d73c:	e0bffa03 	ldbu	r2,-24(fp)
}
    d740:	e037883a 	mov	sp,fp
    d744:	dfc00117 	ldw	ra,4(sp)
    d748:	df000017 	ldw	fp,0(sp)
    d74c:	dec00204 	addi	sp,sp,8
    d750:	f800283a 	ret

0000d754 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    d754:	defff604 	addi	sp,sp,-40
    d758:	dfc00915 	stw	ra,36(sp)
    d75c:	df000815 	stw	fp,32(sp)
    d760:	df000804 	addi	fp,sp,32
    d764:	e13ffd15 	stw	r4,-12(fp)
    d768:	e17ffe15 	stw	r5,-8(fp)
    d76c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d770:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    d774:	e0bfff17 	ldw	r2,-4(fp)
    d778:	1000011e 	bne	r2,zero,d780 <OSEventNameSet+0x2c>
        return;
    d77c:	00003f06 	br	d87c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    d780:	e0bffd17 	ldw	r2,-12(fp)
    d784:	1000041e 	bne	r2,zero,d798 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    d788:	e0bfff17 	ldw	r2,-4(fp)
    d78c:	00c00104 	movi	r3,4
    d790:	10c00005 	stb	r3,0(r2)
        return;
    d794:	00003906 	br	d87c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    d798:	e0bffe17 	ldw	r2,-8(fp)
    d79c:	1000041e 	bne	r2,zero,d7b0 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    d7a0:	e0bfff17 	ldw	r2,-4(fp)
    d7a4:	00c00304 	movi	r3,12
    d7a8:	10c00005 	stb	r3,0(r2)
        return;
    d7ac:	00003306 	br	d87c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    d7b0:	d0a8c503 	ldbu	r2,-23788(gp)
    d7b4:	10803fcc 	andi	r2,r2,255
    d7b8:	10000426 	beq	r2,zero,d7cc <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    d7bc:	e0bfff17 	ldw	r2,-4(fp)
    d7c0:	00c00484 	movi	r3,18
    d7c4:	10c00005 	stb	r3,0(r2)
        return;
    d7c8:	00002c06 	br	d87c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    d7cc:	e0bffd17 	ldw	r2,-12(fp)
    d7d0:	10800003 	ldbu	r2,0(r2)
    d7d4:	10803fcc 	andi	r2,r2,255
    d7d8:	10bfffc4 	addi	r2,r2,-1
    d7dc:	10800128 	cmpgeui	r2,r2,4
    d7e0:	10000426 	beq	r2,zero,d7f4 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    d7e4:	e0bfff17 	ldw	r2,-4(fp)
    d7e8:	00c00044 	movi	r3,1
    d7ec:	10c00005 	stb	r3,0(r2)
             return;
    d7f0:	00002206 	br	d87c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    d7f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7f8:	0005303a 	rdctl	r2,status
    d7fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d800:	e0fffa17 	ldw	r3,-24(fp)
    d804:	00bfff84 	movi	r2,-2
    d808:	1884703a 	and	r2,r3,r2
    d80c:	1001703a 	wrctl	status,r2
  
  return context;
    d810:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    d814:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    d818:	e13ffe17 	ldw	r4,-8(fp)
    d81c:	000f0fc0 	call	f0fc <OS_StrLen>
    d820:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    d824:	e0bff903 	ldbu	r2,-28(fp)
    d828:	10800830 	cmpltui	r2,r2,32
    d82c:	1000081e 	bne	r2,zero,d850 <OSEventNameSet+0xfc>
    d830:	e0bff817 	ldw	r2,-32(fp)
    d834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d838:	e0bffb17 	ldw	r2,-20(fp)
    d83c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    d840:	e0bfff17 	ldw	r2,-4(fp)
    d844:	00c002c4 	movi	r3,11
    d848:	10c00005 	stb	r3,0(r2)
        return;
    d84c:	00000b06 	br	d87c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    d850:	e0bffd17 	ldw	r2,-12(fp)
    d854:	10800384 	addi	r2,r2,14
    d858:	1009883a 	mov	r4,r2
    d85c:	e17ffe17 	ldw	r5,-8(fp)
    d860:	000f0880 	call	f088 <OS_StrCopy>
    d864:	e0bff817 	ldw	r2,-32(fp)
    d868:	e0bffc15 	stw	r2,-16(fp)
    d86c:	e0bffc17 	ldw	r2,-16(fp)
    d870:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    d874:	e0bfff17 	ldw	r2,-4(fp)
    d878:	10000005 	stb	zero,0(r2)
}
    d87c:	e037883a 	mov	sp,fp
    d880:	dfc00117 	ldw	ra,4(sp)
    d884:	df000017 	ldw	fp,0(sp)
    d888:	dec00204 	addi	sp,sp,8
    d88c:	f800283a 	ret

0000d890 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    d890:	deffed04 	addi	sp,sp,-76
    d894:	dfc01215 	stw	ra,72(sp)
    d898:	df001115 	stw	fp,68(sp)
    d89c:	df001104 	addi	fp,sp,68
    d8a0:	e13ffc15 	stw	r4,-16(fp)
    d8a4:	e17ffd15 	stw	r5,-12(fp)
    d8a8:	e1bffe15 	stw	r6,-8(fp)
    d8ac:	3805883a 	mov	r2,r7
    d8b0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    d8b4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    d8b8:	e0800217 	ldw	r2,8(fp)
    d8bc:	1000021e 	bne	r2,zero,d8c8 <OSEventPendMulti+0x38>
        return (0);
    d8c0:	0005883a 	mov	r2,zero
    d8c4:	00017106 	br	de8c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    d8c8:	e0bffc17 	ldw	r2,-16(fp)
    d8cc:	1000051e 	bne	r2,zero,d8e4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    d8d0:	e0800217 	ldw	r2,8(fp)
    d8d4:	00c00104 	movi	r3,4
    d8d8:	10c00005 	stb	r3,0(r2)
        return (0);
    d8dc:	0005883a 	mov	r2,zero
    d8e0:	00016a06 	br	de8c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	1000051e 	bne	r2,zero,d900 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    d8ec:	e0800217 	ldw	r2,8(fp)
    d8f0:	00c00104 	movi	r3,4
    d8f4:	10c00005 	stb	r3,0(r2)
        return (0);
    d8f8:	0005883a 	mov	r2,zero
    d8fc:	00016306 	br	de8c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    d900:	e0bffe17 	ldw	r2,-8(fp)
    d904:	1000051e 	bne	r2,zero,d91c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    d908:	e0800217 	ldw	r2,8(fp)
    d90c:	00c00104 	movi	r3,4
    d910:	10c00005 	stb	r3,0(r2)
        return (0);
    d914:	0005883a 	mov	r2,zero
    d918:	00015c06 	br	de8c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    d91c:	e0bffd17 	ldw	r2,-12(fp)
    d920:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    d924:	e0bffc17 	ldw	r2,-16(fp)
    d928:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    d92c:	e0bfef17 	ldw	r2,-68(fp)
    d930:	10800017 	ldw	r2,0(r2)
    d934:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    d938:	00001906 	br	d9a0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    d93c:	e0bff017 	ldw	r2,-64(fp)
    d940:	10800003 	ldbu	r2,0(r2)
    d944:	10803fcc 	andi	r2,r2,255
    d948:	10c000a0 	cmpeqi	r3,r2,2
    d94c:	1800091e 	bne	r3,zero,d974 <OSEventPendMulti+0xe4>
    d950:	10c000e0 	cmpeqi	r3,r2,3
    d954:	1800091e 	bne	r3,zero,d97c <OSEventPendMulti+0xec>
    d958:	10800060 	cmpeqi	r2,r2,1
    d95c:	1000091e 	bne	r2,zero,d984 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    d960:	e0800217 	ldw	r2,8(fp)
    d964:	00c00044 	movi	r3,1
    d968:	10c00005 	stb	r3,0(r2)
                 return (0);
    d96c:	0005883a 	mov	r2,zero
    d970:	00014606 	br	de8c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    d974:	0001883a 	nop
    d978:	00000306 	br	d988 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    d97c:	0001883a 	nop
    d980:	00000106 	br	d988 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    d984:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    d988:	e0bfef17 	ldw	r2,-68(fp)
    d98c:	10800104 	addi	r2,r2,4
    d990:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    d994:	e0bfef17 	ldw	r2,-68(fp)
    d998:	10800017 	ldw	r2,0(r2)
    d99c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    d9a0:	e0bff017 	ldw	r2,-64(fp)
    d9a4:	103fe51e 	bne	r2,zero,d93c <__alt_mem_Flash_flash_data+0xf400d93c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    d9a8:	d0a8c503 	ldbu	r2,-23788(gp)
    d9ac:	10803fcc 	andi	r2,r2,255
    d9b0:	10000526 	beq	r2,zero,d9c8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    d9b4:	e0800217 	ldw	r2,8(fp)
    d9b8:	00c00084 	movi	r3,2
    d9bc:	10c00005 	stb	r3,0(r2)
        return (0);
    d9c0:	0005883a 	mov	r2,zero
    d9c4:	00013106 	br	de8c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    d9c8:	d0a8b703 	ldbu	r2,-23844(gp)
    d9cc:	10803fcc 	andi	r2,r2,255
    d9d0:	10000526 	beq	r2,zero,d9e8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    d9d4:	e0800217 	ldw	r2,8(fp)
    d9d8:	00c00344 	movi	r3,13
    d9dc:	10c00005 	stb	r3,0(r2)
        return (0);
    d9e0:	0005883a 	mov	r2,zero
    d9e4:	00012906 	br	de8c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9e8:	0005303a 	rdctl	r2,status
    d9ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9f0:	e0fff517 	ldw	r3,-44(fp)
    d9f4:	00bfff84 	movi	r2,-2
    d9f8:	1884703a 	and	r2,r3,r2
    d9fc:	1001703a 	wrctl	status,r2
  
  return context;
    da00:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    da04:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    da08:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    da0c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    da10:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    da14:	e0bffc17 	ldw	r2,-16(fp)
    da18:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    da1c:	e0bfef17 	ldw	r2,-68(fp)
    da20:	10800017 	ldw	r2,0(r2)
    da24:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    da28:	00008106 	br	dc30 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    da2c:	e0bff017 	ldw	r2,-64(fp)
    da30:	10800003 	ldbu	r2,0(r2)
    da34:	10803fcc 	andi	r2,r2,255
    da38:	10c000a0 	cmpeqi	r3,r2,2
    da3c:	18003c1e 	bne	r3,zero,db30 <OSEventPendMulti+0x2a0>
    da40:	10c000e0 	cmpeqi	r3,r2,3
    da44:	1800031e 	bne	r3,zero,da54 <OSEventPendMulti+0x1c4>
    da48:	10800060 	cmpeqi	r2,r2,1
    da4c:	10001e1e 	bne	r2,zero,dac8 <OSEventPendMulti+0x238>
    da50:	00006606 	br	dbec <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    da54:	e0bff017 	ldw	r2,-64(fp)
    da58:	1080020b 	ldhu	r2,8(r2)
    da5c:	10bfffcc 	andi	r2,r2,65535
    da60:	10001526 	beq	r2,zero,dab8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    da64:	e0bff017 	ldw	r2,-64(fp)
    da68:	1080020b 	ldhu	r2,8(r2)
    da6c:	10bfffc4 	addi	r2,r2,-1
    da70:	1007883a 	mov	r3,r2
    da74:	e0bff017 	ldw	r2,-64(fp)
    da78:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    da7c:	e0bffd17 	ldw	r2,-12(fp)
    da80:	10c00104 	addi	r3,r2,4
    da84:	e0fffd15 	stw	r3,-12(fp)
    da88:	e0fff017 	ldw	r3,-64(fp)
    da8c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    da90:	00800044 	movi	r2,1
    da94:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    da98:	e0bffe17 	ldw	r2,-8(fp)
    da9c:	10c00104 	addi	r3,r2,4
    daa0:	e0fffe15 	stw	r3,-8(fp)
    daa4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    daa8:	e0bff18b 	ldhu	r2,-58(fp)
    daac:	10800044 	addi	r2,r2,1
    dab0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    dab4:	00005806 	br	dc18 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    dab8:	e0bff203 	ldbu	r2,-56(fp)
    dabc:	10800054 	ori	r2,r2,1
    dac0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    dac4:	00005406 	br	dc18 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    dac8:	e0bff017 	ldw	r2,-64(fp)
    dacc:	10800117 	ldw	r2,4(r2)
    dad0:	10001326 	beq	r2,zero,db20 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    dad4:	e0bffe17 	ldw	r2,-8(fp)
    dad8:	10c00104 	addi	r3,r2,4
    dadc:	e0fffe15 	stw	r3,-8(fp)
    dae0:	e0fff017 	ldw	r3,-64(fp)
    dae4:	18c00117 	ldw	r3,4(r3)
    dae8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    daec:	e0bff017 	ldw	r2,-64(fp)
    daf0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    daf4:	e0bffd17 	ldw	r2,-12(fp)
    daf8:	10c00104 	addi	r3,r2,4
    dafc:	e0fffd15 	stw	r3,-12(fp)
    db00:	e0fff017 	ldw	r3,-64(fp)
    db04:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    db08:	00800044 	movi	r2,1
    db0c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    db10:	e0bff18b 	ldhu	r2,-58(fp)
    db14:	10800044 	addi	r2,r2,1
    db18:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    db1c:	00003e06 	br	dc18 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    db20:	e0bff203 	ldbu	r2,-56(fp)
    db24:	10800094 	ori	r2,r2,2
    db28:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    db2c:	00003a06 	br	dc18 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    db30:	e0bff017 	ldw	r2,-64(fp)
    db34:	10800117 	ldw	r2,4(r2)
    db38:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    db3c:	e0bff417 	ldw	r2,-48(fp)
    db40:	1080058b 	ldhu	r2,22(r2)
    db44:	10bfffcc 	andi	r2,r2,65535
    db48:	10002426 	beq	r2,zero,dbdc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    db4c:	e0bffe17 	ldw	r2,-8(fp)
    db50:	10c00104 	addi	r3,r2,4
    db54:	e0fffe15 	stw	r3,-8(fp)
    db58:	e0fff417 	ldw	r3,-48(fp)
    db5c:	18c00417 	ldw	r3,16(r3)
    db60:	19400104 	addi	r5,r3,4
    db64:	e13ff417 	ldw	r4,-48(fp)
    db68:	21400415 	stw	r5,16(r4)
    db6c:	18c00017 	ldw	r3,0(r3)
    db70:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    db74:	e0bff417 	ldw	r2,-48(fp)
    db78:	10c00417 	ldw	r3,16(r2)
    db7c:	e0bff417 	ldw	r2,-48(fp)
    db80:	10800217 	ldw	r2,8(r2)
    db84:	1880041e 	bne	r3,r2,db98 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    db88:	e0bff417 	ldw	r2,-48(fp)
    db8c:	10c00117 	ldw	r3,4(r2)
    db90:	e0bff417 	ldw	r2,-48(fp)
    db94:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    db98:	e0bff417 	ldw	r2,-48(fp)
    db9c:	1080058b 	ldhu	r2,22(r2)
    dba0:	10bfffc4 	addi	r2,r2,-1
    dba4:	1007883a 	mov	r3,r2
    dba8:	e0bff417 	ldw	r2,-48(fp)
    dbac:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    dbb0:	e0bffd17 	ldw	r2,-12(fp)
    dbb4:	10c00104 	addi	r3,r2,4
    dbb8:	e0fffd15 	stw	r3,-12(fp)
    dbbc:	e0fff017 	ldw	r3,-64(fp)
    dbc0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    dbc4:	00800044 	movi	r2,1
    dbc8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    dbcc:	e0bff18b 	ldhu	r2,-58(fp)
    dbd0:	10800044 	addi	r2,r2,1
    dbd4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    dbd8:	00000f06 	br	dc18 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    dbdc:	e0bff203 	ldbu	r2,-56(fp)
    dbe0:	10800114 	ori	r2,r2,4
    dbe4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    dbe8:	00000b06 	br	dc18 <OSEventPendMulti+0x388>
    dbec:	e0bff317 	ldw	r2,-52(fp)
    dbf0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbf4:	e0bff617 	ldw	r2,-40(fp)
    dbf8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    dbfc:	e0bffd17 	ldw	r2,-12(fp)
    dc00:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    dc04:	e0800217 	ldw	r2,8(fp)
    dc08:	00c00044 	movi	r3,1
    dc0c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    dc10:	e0bff18b 	ldhu	r2,-58(fp)
    dc14:	00009d06 	br	de8c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    dc18:	e0bfef17 	ldw	r2,-68(fp)
    dc1c:	10800104 	addi	r2,r2,4
    dc20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    dc24:	e0bfef17 	ldw	r2,-68(fp)
    dc28:	10800017 	ldw	r2,0(r2)
    dc2c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    dc30:	e0bff017 	ldw	r2,-64(fp)
    dc34:	103f7d1e 	bne	r2,zero,da2c <__alt_mem_Flash_flash_data+0xf400da2c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    dc38:	e0bff103 	ldbu	r2,-60(fp)
    dc3c:	10800058 	cmpnei	r2,r2,1
    dc40:	10000a1e 	bne	r2,zero,dc6c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    dc44:	e0bffd17 	ldw	r2,-12(fp)
    dc48:	10000015 	stw	zero,0(r2)
    dc4c:	e0bff317 	ldw	r2,-52(fp)
    dc50:	e0bff715 	stw	r2,-36(fp)
    dc54:	e0bff717 	ldw	r2,-36(fp)
    dc58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    dc5c:	e0800217 	ldw	r2,8(fp)
    dc60:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    dc64:	e0bff18b 	ldhu	r2,-58(fp)
    dc68:	00008806 	br	de8c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    dc6c:	d0a8c617 	ldw	r2,-23784(gp)
    dc70:	d0e8c617 	ldw	r3,-23784(gp)
    dc74:	19000c03 	ldbu	r4,48(r3)
    dc78:	e0fff203 	ldbu	r3,-56(fp)
    dc7c:	20c6b03a 	or	r3,r4,r3
    dc80:	1809883a 	mov	r4,r3
    dc84:	00ffe004 	movi	r3,-128
    dc88:	20c6b03a 	or	r3,r4,r3
    dc8c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    dc90:	d0a8c617 	ldw	r2,-23784(gp)
    dc94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    dc98:	d0a8c617 	ldw	r2,-23784(gp)
    dc9c:	e0ffff0b 	ldhu	r3,-4(fp)
    dca0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    dca4:	e13ffc17 	ldw	r4,-16(fp)
    dca8:	000e7d80 	call	e7d8 <OS_EventTaskWaitMulti>
    dcac:	e0bff317 	ldw	r2,-52(fp)
    dcb0:	e0bff815 	stw	r2,-32(fp)
    dcb4:	e0bff817 	ldw	r2,-32(fp)
    dcb8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    dcbc:	000ef4c0 	call	ef4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dcc0:	0005303a 	rdctl	r2,status
    dcc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dcc8:	e0fff917 	ldw	r3,-28(fp)
    dccc:	00bfff84 	movi	r2,-2
    dcd0:	1884703a 	and	r2,r3,r2
    dcd4:	1001703a 	wrctl	status,r2
  
  return context;
    dcd8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    dcdc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    dce0:	d0a8c617 	ldw	r2,-23784(gp)
    dce4:	10800c43 	ldbu	r2,49(r2)
    dce8:	10803fcc 	andi	r2,r2,255
    dcec:	10000226 	beq	r2,zero,dcf8 <OSEventPendMulti+0x468>
    dcf0:	108000a0 	cmpeqi	r2,r2,2
    dcf4:	10001826 	beq	r2,zero,dd58 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    dcf8:	d0a8c617 	ldw	r2,-23784(gp)
    dcfc:	10800717 	ldw	r2,28(r2)
    dd00:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    dd04:	e0bff017 	ldw	r2,-64(fp)
    dd08:	10000b26 	beq	r2,zero,dd38 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    dd0c:	e0bffd17 	ldw	r2,-12(fp)
    dd10:	10c00104 	addi	r3,r2,4
    dd14:	e0fffd15 	stw	r3,-12(fp)
    dd18:	e0fff017 	ldw	r3,-64(fp)
    dd1c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    dd20:	e0bffd17 	ldw	r2,-12(fp)
    dd24:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    dd28:	e0bff18b 	ldhu	r2,-58(fp)
    dd2c:	10800044 	addi	r2,r2,1
    dd30:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    dd34:	00000d06 	br	dd6c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    dd38:	d0a8c617 	ldw	r2,-23784(gp)
    dd3c:	00c00044 	movi	r3,1
    dd40:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    dd44:	d0a8c617 	ldw	r2,-23784(gp)
    dd48:	1009883a 	mov	r4,r2
    dd4c:	e17ffc17 	ldw	r5,-16(fp)
    dd50:	000e9d80 	call	e9d8 <OS_EventTaskRemoveMulti>
             }
			 break;
    dd54:	00000506 	br	dd6c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    dd58:	d0a8c617 	ldw	r2,-23784(gp)
    dd5c:	1009883a 	mov	r4,r2
    dd60:	e17ffc17 	ldw	r5,-16(fp)
    dd64:	000e9d80 	call	e9d8 <OS_EventTaskRemoveMulti>
             break;
    dd68:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    dd6c:	d0a8c617 	ldw	r2,-23784(gp)
    dd70:	10800c43 	ldbu	r2,49(r2)
    dd74:	10803fcc 	andi	r2,r2,255
    dd78:	10000326 	beq	r2,zero,dd88 <OSEventPendMulti+0x4f8>
    dd7c:	108000a0 	cmpeqi	r2,r2,2
    dd80:	1000231e 	bne	r2,zero,de10 <OSEventPendMulti+0x580>
    dd84:	00002a06 	br	de30 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    dd88:	e0bff017 	ldw	r2,-64(fp)
    dd8c:	10800003 	ldbu	r2,0(r2)
    dd90:	10803fcc 	andi	r2,r2,255
    dd94:	0080100e 	bge	zero,r2,ddd8 <OSEventPendMulti+0x548>
    dd98:	10c000d0 	cmplti	r3,r2,3
    dd9c:	1800071e 	bne	r3,zero,ddbc <OSEventPendMulti+0x52c>
    dda0:	108000e0 	cmpeqi	r2,r2,3
    dda4:	10000c26 	beq	r2,zero,ddd8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    dda8:	e0bffe17 	ldw	r2,-8(fp)
    ddac:	10c00104 	addi	r3,r2,4
    ddb0:	e0fffe15 	stw	r3,-8(fp)
    ddb4:	10000015 	stw	zero,0(r2)
                      break;
    ddb8:	00001206 	br	de04 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    ddbc:	e0bffe17 	ldw	r2,-8(fp)
    ddc0:	10c00104 	addi	r3,r2,4
    ddc4:	e0fffe15 	stw	r3,-8(fp)
    ddc8:	d0e8c617 	ldw	r3,-23784(gp)
    ddcc:	18c00917 	ldw	r3,36(r3)
    ddd0:	10c00015 	stw	r3,0(r2)
                      break;
    ddd4:	00000b06 	br	de04 <OSEventPendMulti+0x574>
    ddd8:	e0bff317 	ldw	r2,-52(fp)
    dddc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dde0:	e0bffa17 	ldw	r2,-24(fp)
    dde4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    dde8:	e0bffd17 	ldw	r2,-12(fp)
    ddec:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    ddf0:	e0800217 	ldw	r2,8(fp)
    ddf4:	00c00044 	movi	r3,1
    ddf8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    ddfc:	e0bff18b 	ldhu	r2,-58(fp)
    de00:	00002206 	br	de8c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    de04:	e0800217 	ldw	r2,8(fp)
    de08:	10000005 	stb	zero,0(r2)
             break;
    de0c:	00001006 	br	de50 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    de10:	e0bffe17 	ldw	r2,-8(fp)
    de14:	10c00104 	addi	r3,r2,4
    de18:	e0fffe15 	stw	r3,-8(fp)
    de1c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    de20:	e0800217 	ldw	r2,8(fp)
    de24:	00c00384 	movi	r3,14
    de28:	10c00005 	stb	r3,0(r2)
             break;
    de2c:	00000806 	br	de50 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    de30:	e0bffe17 	ldw	r2,-8(fp)
    de34:	10c00104 	addi	r3,r2,4
    de38:	e0fffe15 	stw	r3,-8(fp)
    de3c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    de40:	e0800217 	ldw	r2,8(fp)
    de44:	00c00284 	movi	r3,10
    de48:	10c00005 	stb	r3,0(r2)
             break;
    de4c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    de50:	d0a8c617 	ldw	r2,-23784(gp)
    de54:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    de58:	d0a8c617 	ldw	r2,-23784(gp)
    de5c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    de60:	d0a8c617 	ldw	r2,-23784(gp)
    de64:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    de68:	d0a8c617 	ldw	r2,-23784(gp)
    de6c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    de70:	d0a8c617 	ldw	r2,-23784(gp)
    de74:	10000915 	stw	zero,36(r2)
    de78:	e0bff317 	ldw	r2,-52(fp)
    de7c:	e0bffb15 	stw	r2,-20(fp)
    de80:	e0bffb17 	ldw	r2,-20(fp)
    de84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    de88:	e0bff18b 	ldhu	r2,-58(fp)
}
    de8c:	e037883a 	mov	sp,fp
    de90:	dfc00117 	ldw	ra,4(sp)
    de94:	df000017 	ldw	fp,0(sp)
    de98:	dec00204 	addi	sp,sp,8
    de9c:	f800283a 	ret

0000dea0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    dea0:	defffe04 	addi	sp,sp,-8
    dea4:	dfc00115 	stw	ra,4(sp)
    dea8:	df000015 	stw	fp,0(sp)
    deac:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    deb0:	0018e280 	call	18e28 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    deb4:	000ec140 	call	ec14 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    deb8:	000ec580 	call	ec58 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    debc:	000edb80 	call	edb8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    dec0:	000eb380 	call	eb38 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    dec4:	0010d380 	call	10d38 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    dec8:	00116800 	call	11680 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    decc:	00128b40 	call	128b4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    ded0:	000ecc00 	call	ecc0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    ded4:	000ed3c0 	call	ed3c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    ded8:	0018e440 	call	18e44 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    dedc:	000f6240 	call	f624 <OSDebugInit>
#endif
}
    dee0:	e037883a 	mov	sp,fp
    dee4:	dfc00117 	ldw	ra,4(sp)
    dee8:	df000017 	ldw	fp,0(sp)
    deec:	dec00204 	addi	sp,sp,8
    def0:	f800283a 	ret

0000def4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    def4:	defffc04 	addi	sp,sp,-16
    def8:	df000315 	stw	fp,12(sp)
    defc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    df00:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    df04:	d0a8b743 	ldbu	r2,-23843(gp)
    df08:	10803fcc 	andi	r2,r2,255
    df0c:	10800058 	cmpnei	r2,r2,1
    df10:	1000131e 	bne	r2,zero,df60 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df14:	0005303a 	rdctl	r2,status
    df18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df1c:	e0fffe17 	ldw	r3,-8(fp)
    df20:	00bfff84 	movi	r2,-2
    df24:	1884703a 	and	r2,r3,r2
    df28:	1001703a 	wrctl	status,r2
  
  return context;
    df2c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    df30:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    df34:	d0a8c503 	ldbu	r2,-23788(gp)
    df38:	10803fcc 	andi	r2,r2,255
    df3c:	10803fe0 	cmpeqi	r2,r2,255
    df40:	1000031e 	bne	r2,zero,df50 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    df44:	d0a8c503 	ldbu	r2,-23788(gp)
    df48:	10800044 	addi	r2,r2,1
    df4c:	d0a8c505 	stb	r2,-23788(gp)
    df50:	e0bffd17 	ldw	r2,-12(fp)
    df54:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df58:	e0bfff17 	ldw	r2,-4(fp)
    df5c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    df60:	e037883a 	mov	sp,fp
    df64:	df000017 	ldw	fp,0(sp)
    df68:	dec00104 	addi	sp,sp,4
    df6c:	f800283a 	ret

0000df70 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    df70:	defffb04 	addi	sp,sp,-20
    df74:	dfc00415 	stw	ra,16(sp)
    df78:	df000315 	stw	fp,12(sp)
    df7c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    df80:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    df84:	d0a8b743 	ldbu	r2,-23843(gp)
    df88:	10803fcc 	andi	r2,r2,255
    df8c:	10800058 	cmpnei	r2,r2,1
    df90:	10002f1e 	bne	r2,zero,e050 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df94:	0005303a 	rdctl	r2,status
    df98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df9c:	e0fffe17 	ldw	r3,-8(fp)
    dfa0:	00bfff84 	movi	r2,-2
    dfa4:	1884703a 	and	r2,r3,r2
    dfa8:	1001703a 	wrctl	status,r2
  
  return context;
    dfac:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    dfb0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    dfb4:	d0a8c503 	ldbu	r2,-23788(gp)
    dfb8:	10803fcc 	andi	r2,r2,255
    dfbc:	10000326 	beq	r2,zero,dfcc <OSIntExit+0x5c>
            OSIntNesting--;
    dfc0:	d0a8c503 	ldbu	r2,-23788(gp)
    dfc4:	10bfffc4 	addi	r2,r2,-1
    dfc8:	d0a8c505 	stb	r2,-23788(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    dfcc:	d0a8c503 	ldbu	r2,-23788(gp)
    dfd0:	10803fcc 	andi	r2,r2,255
    dfd4:	10001a1e 	bne	r2,zero,e040 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    dfd8:	d0a8b703 	ldbu	r2,-23844(gp)
    dfdc:	10803fcc 	andi	r2,r2,255
    dfe0:	1000171e 	bne	r2,zero,e040 <OSIntExit+0xd0>
                OS_SchedNew();
    dfe4:	000f0180 	call	f018 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    dfe8:	d0e8b903 	ldbu	r3,-23836(gp)
    dfec:	d0a8b943 	ldbu	r2,-23835(gp)
    dff0:	18c03fcc 	andi	r3,r3,255
    dff4:	10803fcc 	andi	r2,r2,255
    dff8:	18801126 	beq	r3,r2,e040 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    dffc:	d0a8b903 	ldbu	r2,-23836(gp)
    e000:	10c03fcc 	andi	r3,r2,255
    e004:	008000b4 	movhi	r2,2
    e008:	10952a04 	addi	r2,r2,21672
    e00c:	18c7883a 	add	r3,r3,r3
    e010:	18c7883a 	add	r3,r3,r3
    e014:	10c5883a 	add	r2,r2,r3
    e018:	10800017 	ldw	r2,0(r2)
    e01c:	d0a8c115 	stw	r2,-23804(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e020:	d0a8c117 	ldw	r2,-23804(gp)
    e024:	10c00e17 	ldw	r3,56(r2)
    e028:	18c00044 	addi	r3,r3,1
    e02c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e030:	d0a8bc17 	ldw	r2,-23824(gp)
    e034:	10800044 	addi	r2,r2,1
    e038:	d0a8bc15 	stw	r2,-23824(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e03c:	0018b680 	call	18b68 <OSCtxSw>
    e040:	e0bffd17 	ldw	r2,-12(fp)
    e044:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e048:	e0bfff17 	ldw	r2,-4(fp)
    e04c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e050:	e037883a 	mov	sp,fp
    e054:	dfc00117 	ldw	ra,4(sp)
    e058:	df000017 	ldw	fp,0(sp)
    e05c:	dec00204 	addi	sp,sp,8
    e060:	f800283a 	ret

0000e064 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e064:	defffc04 	addi	sp,sp,-16
    e068:	df000315 	stw	fp,12(sp)
    e06c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e070:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e074:	d0a8b743 	ldbu	r2,-23843(gp)
    e078:	10803fcc 	andi	r2,r2,255
    e07c:	10800058 	cmpnei	r2,r2,1
    e080:	1000161e 	bne	r2,zero,e0dc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e084:	0005303a 	rdctl	r2,status
    e088:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e08c:	e0fffe17 	ldw	r3,-8(fp)
    e090:	00bfff84 	movi	r2,-2
    e094:	1884703a 	and	r2,r3,r2
    e098:	1001703a 	wrctl	status,r2
  
  return context;
    e09c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e0a0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e0a4:	d0a8c503 	ldbu	r2,-23788(gp)
    e0a8:	10803fcc 	andi	r2,r2,255
    e0ac:	1000071e 	bne	r2,zero,e0cc <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e0b0:	d0a8b703 	ldbu	r2,-23844(gp)
    e0b4:	10803fcc 	andi	r2,r2,255
    e0b8:	10803fe0 	cmpeqi	r2,r2,255
    e0bc:	1000031e 	bne	r2,zero,e0cc <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e0c0:	d0a8b703 	ldbu	r2,-23844(gp)
    e0c4:	10800044 	addi	r2,r2,1
    e0c8:	d0a8b705 	stb	r2,-23844(gp)
    e0cc:	e0bffd17 	ldw	r2,-12(fp)
    e0d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0d4:	e0bfff17 	ldw	r2,-4(fp)
    e0d8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e0dc:	e037883a 	mov	sp,fp
    e0e0:	df000017 	ldw	fp,0(sp)
    e0e4:	dec00104 	addi	sp,sp,4
    e0e8:	f800283a 	ret

0000e0ec <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e0ec:	defff804 	addi	sp,sp,-32
    e0f0:	dfc00715 	stw	ra,28(sp)
    e0f4:	df000615 	stw	fp,24(sp)
    e0f8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e0fc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e100:	d0a8b743 	ldbu	r2,-23843(gp)
    e104:	10803fcc 	andi	r2,r2,255
    e108:	10800058 	cmpnei	r2,r2,1
    e10c:	1000281e 	bne	r2,zero,e1b0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e110:	0005303a 	rdctl	r2,status
    e114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e118:	e0fffb17 	ldw	r3,-20(fp)
    e11c:	00bfff84 	movi	r2,-2
    e120:	1884703a 	and	r2,r3,r2
    e124:	1001703a 	wrctl	status,r2
  
  return context;
    e128:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    e12c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e130:	d0a8b703 	ldbu	r2,-23844(gp)
    e134:	10803fcc 	andi	r2,r2,255
    e138:	10001926 	beq	r2,zero,e1a0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e13c:	d0a8b703 	ldbu	r2,-23844(gp)
    e140:	10bfffc4 	addi	r2,r2,-1
    e144:	d0a8b705 	stb	r2,-23844(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e148:	d0a8b703 	ldbu	r2,-23844(gp)
    e14c:	10803fcc 	andi	r2,r2,255
    e150:	10000e1e 	bne	r2,zero,e18c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e154:	d0a8c503 	ldbu	r2,-23788(gp)
    e158:	10803fcc 	andi	r2,r2,255
    e15c:	1000061e 	bne	r2,zero,e178 <OSSchedUnlock+0x8c>
    e160:	e0bffa17 	ldw	r2,-24(fp)
    e164:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e168:	e0bffc17 	ldw	r2,-16(fp)
    e16c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e170:	000ef4c0 	call	ef4c <OS_Sched>
    e174:	00000e06 	br	e1b0 <OSSchedUnlock+0xc4>
    e178:	e0bffa17 	ldw	r2,-24(fp)
    e17c:	e0bffd15 	stw	r2,-12(fp)
    e180:	e0bffd17 	ldw	r2,-12(fp)
    e184:	1001703a 	wrctl	status,r2
    e188:	00000906 	br	e1b0 <OSSchedUnlock+0xc4>
    e18c:	e0bffa17 	ldw	r2,-24(fp)
    e190:	e0bffe15 	stw	r2,-8(fp)
    e194:	e0bffe17 	ldw	r2,-8(fp)
    e198:	1001703a 	wrctl	status,r2
    e19c:	00000406 	br	e1b0 <OSSchedUnlock+0xc4>
    e1a0:	e0bffa17 	ldw	r2,-24(fp)
    e1a4:	e0bfff15 	stw	r2,-4(fp)
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e1b0:	e037883a 	mov	sp,fp
    e1b4:	dfc00117 	ldw	ra,4(sp)
    e1b8:	df000017 	ldw	fp,0(sp)
    e1bc:	dec00204 	addi	sp,sp,8
    e1c0:	f800283a 	ret

0000e1c4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e1c4:	defffe04 	addi	sp,sp,-8
    e1c8:	dfc00115 	stw	ra,4(sp)
    e1cc:	df000015 	stw	fp,0(sp)
    e1d0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e1d4:	d0a8b743 	ldbu	r2,-23843(gp)
    e1d8:	10803fcc 	andi	r2,r2,255
    e1dc:	10000f1e 	bne	r2,zero,e21c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e1e0:	000f0180 	call	f018 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e1e4:	d0a8b903 	ldbu	r2,-23836(gp)
    e1e8:	d0a8b945 	stb	r2,-23835(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e1ec:	d0a8b903 	ldbu	r2,-23836(gp)
    e1f0:	10c03fcc 	andi	r3,r2,255
    e1f4:	008000b4 	movhi	r2,2
    e1f8:	10952a04 	addi	r2,r2,21672
    e1fc:	18c7883a 	add	r3,r3,r3
    e200:	18c7883a 	add	r3,r3,r3
    e204:	10c5883a 	add	r2,r2,r3
    e208:	10800017 	ldw	r2,0(r2)
    e20c:	d0a8c115 	stw	r2,-23804(gp)
        OSTCBCur      = OSTCBHighRdy;
    e210:	d0a8c117 	ldw	r2,-23804(gp)
    e214:	d0a8c615 	stw	r2,-23784(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e218:	0018bf40 	call	18bf4 <OSStartHighRdy>
    }
}
    e21c:	e037883a 	mov	sp,fp
    e220:	dfc00117 	ldw	ra,4(sp)
    e224:	df000017 	ldw	fp,0(sp)
    e228:	dec00204 	addi	sp,sp,8
    e22c:	f800283a 	ret

0000e230 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e230:	defff904 	addi	sp,sp,-28
    e234:	dfc00615 	stw	ra,24(sp)
    e238:	df000515 	stw	fp,20(sp)
    e23c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e240:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e244:	01000084 	movi	r4,2
    e248:	0014d5c0 	call	14d5c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e24c:	0005303a 	rdctl	r2,status
    e250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e254:	e0fffc17 	ldw	r3,-16(fp)
    e258:	00bfff84 	movi	r2,-2
    e25c:	1884703a 	and	r2,r3,r2
    e260:	1001703a 	wrctl	status,r2
  
  return context;
    e264:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e268:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e26c:	d028b815 	stw	zero,-23840(gp)
    e270:	e0bffb17 	ldw	r2,-20(fp)
    e274:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e278:	e0bffd17 	ldw	r2,-12(fp)
    e27c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e280:	0009883a 	mov	r4,zero
    e284:	0014d5c0 	call	14d5c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e288:	0005303a 	rdctl	r2,status
    e28c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e290:	e0fffe17 	ldw	r3,-8(fp)
    e294:	00bfff84 	movi	r2,-2
    e298:	1884703a 	and	r2,r3,r2
    e29c:	1001703a 	wrctl	status,r2
  
  return context;
    e2a0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e2a4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e2a8:	d0a8b817 	ldw	r2,-23840(gp)
    e2ac:	d0a8bd15 	stw	r2,-23820(gp)
    OSStatRdy    = OS_TRUE;
    e2b0:	00800044 	movi	r2,1
    e2b4:	d0a8c905 	stb	r2,-23772(gp)
    e2b8:	e0bffb17 	ldw	r2,-20(fp)
    e2bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2c0:	e0bfff17 	ldw	r2,-4(fp)
    e2c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e2c8:	e037883a 	mov	sp,fp
    e2cc:	dfc00117 	ldw	ra,4(sp)
    e2d0:	df000017 	ldw	fp,0(sp)
    e2d4:	dec00204 	addi	sp,sp,8
    e2d8:	f800283a 	ret

0000e2dc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e2dc:	defff704 	addi	sp,sp,-36
    e2e0:	dfc00815 	stw	ra,32(sp)
    e2e4:	df000715 	stw	fp,28(sp)
    e2e8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e2ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e2f0:	0018e0c0 	call	18e0c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2f4:	0005303a 	rdctl	r2,status
    e2f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2fc:	e0fffc17 	ldw	r3,-16(fp)
    e300:	00bfff84 	movi	r2,-2
    e304:	1884703a 	and	r2,r3,r2
    e308:	1001703a 	wrctl	status,r2
  
  return context;
    e30c:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e310:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e314:	d0a8c717 	ldw	r2,-23780(gp)
    e318:	10800044 	addi	r2,r2,1
    e31c:	d0a8c715 	stw	r2,-23780(gp)
    e320:	e0bffb17 	ldw	r2,-20(fp)
    e324:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e328:	e0bffd17 	ldw	r2,-12(fp)
    e32c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e330:	d0a8b743 	ldbu	r2,-23843(gp)
    e334:	10803fcc 	andi	r2,r2,255
    e338:	10800058 	cmpnei	r2,r2,1
    e33c:	1000691e 	bne	r2,zero,e4e4 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e340:	d0a8bb03 	ldbu	r2,-23828(gp)
    e344:	10803fcc 	andi	r2,r2,255
    e348:	10c00060 	cmpeqi	r3,r2,1
    e34c:	1800061e 	bne	r3,zero,e368 <OSTimeTick+0x8c>
    e350:	10c000a0 	cmpeqi	r3,r2,2
    e354:	1800061e 	bne	r3,zero,e370 <OSTimeTick+0x94>
    e358:	10000a1e 	bne	r2,zero,e384 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e35c:	00800044 	movi	r2,1
    e360:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e364:	00000b06 	br	e394 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e368:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e36c:	00000906 	br	e394 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e370:	00800044 	movi	r2,1
    e374:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e378:	00800044 	movi	r2,1
    e37c:	d0a8bb05 	stb	r2,-23828(gp)
                 break;
    e380:	00000406 	br	e394 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e384:	00800044 	movi	r2,1
    e388:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e38c:	d028bb05 	stb	zero,-23828(gp)
                 break;
    e390:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e394:	e0bffa03 	ldbu	r2,-24(fp)
    e398:	1000011e 	bne	r2,zero,e3a0 <OSTimeTick+0xc4>
            return;
    e39c:	00005106 	br	e4e4 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e3a0:	d0a8ba17 	ldw	r2,-23832(gp)
    e3a4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e3a8:	00004906 	br	e4d0 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3ac:	0005303a 	rdctl	r2,status
    e3b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3b4:	e0fffe17 	ldw	r3,-8(fp)
    e3b8:	00bfff84 	movi	r2,-2
    e3bc:	1884703a 	and	r2,r3,r2
    e3c0:	1001703a 	wrctl	status,r2
  
  return context;
    e3c4:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    e3c8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e3cc:	e0bff917 	ldw	r2,-28(fp)
    e3d0:	10800b8b 	ldhu	r2,46(r2)
    e3d4:	10bfffcc 	andi	r2,r2,65535
    e3d8:	10003626 	beq	r2,zero,e4b4 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e3dc:	e0bff917 	ldw	r2,-28(fp)
    e3e0:	10800b8b 	ldhu	r2,46(r2)
    e3e4:	10bfffc4 	addi	r2,r2,-1
    e3e8:	1007883a 	mov	r3,r2
    e3ec:	e0bff917 	ldw	r2,-28(fp)
    e3f0:	10c00b8d 	sth	r3,46(r2)
    e3f4:	e0bff917 	ldw	r2,-28(fp)
    e3f8:	10800b8b 	ldhu	r2,46(r2)
    e3fc:	10bfffcc 	andi	r2,r2,65535
    e400:	10002c1e 	bne	r2,zero,e4b4 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    e404:	e0bff917 	ldw	r2,-28(fp)
    e408:	10800c03 	ldbu	r2,48(r2)
    e40c:	10803fcc 	andi	r2,r2,255
    e410:	10800dcc 	andi	r2,r2,55
    e414:	10000b26 	beq	r2,zero,e444 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    e418:	e0bff917 	ldw	r2,-28(fp)
    e41c:	10c00c03 	ldbu	r3,48(r2)
    e420:	00bff204 	movi	r2,-56
    e424:	1884703a 	and	r2,r3,r2
    e428:	1007883a 	mov	r3,r2
    e42c:	e0bff917 	ldw	r2,-28(fp)
    e430:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    e434:	e0bff917 	ldw	r2,-28(fp)
    e438:	00c00044 	movi	r3,1
    e43c:	10c00c45 	stb	r3,49(r2)
    e440:	00000206 	br	e44c <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    e444:	e0bff917 	ldw	r2,-28(fp)
    e448:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    e44c:	e0bff917 	ldw	r2,-28(fp)
    e450:	10800c03 	ldbu	r2,48(r2)
    e454:	10803fcc 	andi	r2,r2,255
    e458:	1080020c 	andi	r2,r2,8
    e45c:	1000151e 	bne	r2,zero,e4b4 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    e460:	e0bff917 	ldw	r2,-28(fp)
    e464:	10c00d83 	ldbu	r3,54(r2)
    e468:	d0a8c303 	ldbu	r2,-23796(gp)
    e46c:	1884b03a 	or	r2,r3,r2
    e470:	d0a8c305 	stb	r2,-23796(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    e474:	e0bff917 	ldw	r2,-28(fp)
    e478:	10800d03 	ldbu	r2,52(r2)
    e47c:	10c03fcc 	andi	r3,r2,255
    e480:	e0bff917 	ldw	r2,-28(fp)
    e484:	10800d03 	ldbu	r2,52(r2)
    e488:	11003fcc 	andi	r4,r2,255
    e48c:	d0a8c344 	addi	r2,gp,-23795
    e490:	2085883a 	add	r2,r4,r2
    e494:	11000003 	ldbu	r4,0(r2)
    e498:	e0bff917 	ldw	r2,-28(fp)
    e49c:	10800d43 	ldbu	r2,53(r2)
    e4a0:	2084b03a 	or	r2,r4,r2
    e4a4:	1009883a 	mov	r4,r2
    e4a8:	d0a8c344 	addi	r2,gp,-23795
    e4ac:	1885883a 	add	r2,r3,r2
    e4b0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    e4b4:	e0bff917 	ldw	r2,-28(fp)
    e4b8:	10800517 	ldw	r2,20(r2)
    e4bc:	e0bff915 	stw	r2,-28(fp)
    e4c0:	e0bffb17 	ldw	r2,-20(fp)
    e4c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4c8:	e0bfff17 	ldw	r2,-4(fp)
    e4cc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e4d0:	e0bff917 	ldw	r2,-28(fp)
    e4d4:	10800c83 	ldbu	r2,50(r2)
    e4d8:	10803fcc 	andi	r2,r2,255
    e4dc:	10800518 	cmpnei	r2,r2,20
    e4e0:	103fb21e 	bne	r2,zero,e3ac <__alt_mem_Flash_flash_data+0xf400e3ac>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    e4e4:	e037883a 	mov	sp,fp
    e4e8:	dfc00117 	ldw	ra,4(sp)
    e4ec:	df000017 	ldw	fp,0(sp)
    e4f0:	dec00204 	addi	sp,sp,8
    e4f4:	f800283a 	ret

0000e4f8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    e4f8:	deffff04 	addi	sp,sp,-4
    e4fc:	df000015 	stw	fp,0(sp)
    e500:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    e504:	00804784 	movi	r2,286
}
    e508:	e037883a 	mov	sp,fp
    e50c:	df000017 	ldw	fp,0(sp)
    e510:	dec00104 	addi	sp,sp,4
    e514:	f800283a 	ret

0000e518 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    e518:	deffff04 	addi	sp,sp,-4
    e51c:	df000015 	stw	fp,0(sp)
    e520:	d839883a 	mov	fp,sp
}
    e524:	e037883a 	mov	sp,fp
    e528:	df000017 	ldw	fp,0(sp)
    e52c:	dec00104 	addi	sp,sp,4
    e530:	f800283a 	ret

0000e534 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    e534:	defff804 	addi	sp,sp,-32
    e538:	dfc00715 	stw	ra,28(sp)
    e53c:	df000615 	stw	fp,24(sp)
    e540:	df000604 	addi	fp,sp,24
    e544:	e13ffc15 	stw	r4,-16(fp)
    e548:	e17ffd15 	stw	r5,-12(fp)
    e54c:	3007883a 	mov	r3,r6
    e550:	3805883a 	mov	r2,r7
    e554:	e0fffe05 	stb	r3,-8(fp)
    e558:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    e55c:	e0bffc17 	ldw	r2,-16(fp)
    e560:	10800283 	ldbu	r2,10(r2)
    e564:	10c03fcc 	andi	r3,r2,255
    e568:	008000b4 	movhi	r2,2
    e56c:	10a64d04 	addi	r2,r2,-26316
    e570:	10c5883a 	add	r2,r2,r3
    e574:	10800003 	ldbu	r2,0(r2)
    e578:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    e57c:	e0bffa03 	ldbu	r2,-24(fp)
    e580:	e0fffc17 	ldw	r3,-16(fp)
    e584:	1885883a 	add	r2,r3,r2
    e588:	10800204 	addi	r2,r2,8
    e58c:	108000c3 	ldbu	r2,3(r2)
    e590:	10c03fcc 	andi	r3,r2,255
    e594:	008000b4 	movhi	r2,2
    e598:	10a64d04 	addi	r2,r2,-26316
    e59c:	10c5883a 	add	r2,r2,r3
    e5a0:	10800003 	ldbu	r2,0(r2)
    e5a4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    e5a8:	e0bffa03 	ldbu	r2,-24(fp)
    e5ac:	100490fa 	slli	r2,r2,3
    e5b0:	1007883a 	mov	r3,r2
    e5b4:	e0bffa43 	ldbu	r2,-23(fp)
    e5b8:	1885883a 	add	r2,r3,r2
    e5bc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    e5c0:	e0fffa83 	ldbu	r3,-22(fp)
    e5c4:	008000b4 	movhi	r2,2
    e5c8:	10952a04 	addi	r2,r2,21672
    e5cc:	18c7883a 	add	r3,r3,r3
    e5d0:	18c7883a 	add	r3,r3,r3
    e5d4:	10c5883a 	add	r2,r2,r3
    e5d8:	10800017 	ldw	r2,0(r2)
    e5dc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    e5e0:	e0bffb17 	ldw	r2,-20(fp)
    e5e4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    e5e8:	e0bffb17 	ldw	r2,-20(fp)
    e5ec:	e0fffd17 	ldw	r3,-12(fp)
    e5f0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    e5f4:	e0bffb17 	ldw	r2,-20(fp)
    e5f8:	10800c03 	ldbu	r2,48(r2)
    e5fc:	1007883a 	mov	r3,r2
    e600:	e0bffe03 	ldbu	r2,-8(fp)
    e604:	0084303a 	nor	r2,zero,r2
    e608:	1884703a 	and	r2,r3,r2
    e60c:	1007883a 	mov	r3,r2
    e610:	e0bffb17 	ldw	r2,-20(fp)
    e614:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    e618:	e0bffb17 	ldw	r2,-20(fp)
    e61c:	e0ffff03 	ldbu	r3,-4(fp)
    e620:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    e624:	e0bffb17 	ldw	r2,-20(fp)
    e628:	10800c03 	ldbu	r2,48(r2)
    e62c:	10803fcc 	andi	r2,r2,255
    e630:	1080020c 	andi	r2,r2,8
    e634:	1000111e 	bne	r2,zero,e67c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    e638:	e0bffb17 	ldw	r2,-20(fp)
    e63c:	10c00d83 	ldbu	r3,54(r2)
    e640:	d0a8c303 	ldbu	r2,-23796(gp)
    e644:	1884b03a 	or	r2,r3,r2
    e648:	d0a8c305 	stb	r2,-23796(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    e64c:	e0fffa03 	ldbu	r3,-24(fp)
    e650:	e13ffa03 	ldbu	r4,-24(fp)
    e654:	d0a8c344 	addi	r2,gp,-23795
    e658:	2085883a 	add	r2,r4,r2
    e65c:	11000003 	ldbu	r4,0(r2)
    e660:	e0bffb17 	ldw	r2,-20(fp)
    e664:	10800d43 	ldbu	r2,53(r2)
    e668:	2084b03a 	or	r2,r4,r2
    e66c:	1009883a 	mov	r4,r2
    e670:	d0a8c344 	addi	r2,gp,-23795
    e674:	1885883a 	add	r2,r3,r2
    e678:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    e67c:	e13ffb17 	ldw	r4,-20(fp)
    e680:	e17ffc17 	ldw	r5,-16(fp)
    e684:	000e9240 	call	e924 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    e688:	e0bffb17 	ldw	r2,-20(fp)
    e68c:	10800817 	ldw	r2,32(r2)
    e690:	10000826 	beq	r2,zero,e6b4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    e694:	e0bffb17 	ldw	r2,-20(fp)
    e698:	10800817 	ldw	r2,32(r2)
    e69c:	e13ffb17 	ldw	r4,-20(fp)
    e6a0:	100b883a 	mov	r5,r2
    e6a4:	000e9d80 	call	e9d8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    e6a8:	e0bffb17 	ldw	r2,-20(fp)
    e6ac:	e0fffc17 	ldw	r3,-16(fp)
    e6b0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    e6b4:	e0bffa83 	ldbu	r2,-22(fp)
}
    e6b8:	e037883a 	mov	sp,fp
    e6bc:	dfc00117 	ldw	ra,4(sp)
    e6c0:	df000017 	ldw	fp,0(sp)
    e6c4:	dec00204 	addi	sp,sp,8
    e6c8:	f800283a 	ret

0000e6cc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    e6cc:	defffd04 	addi	sp,sp,-12
    e6d0:	df000215 	stw	fp,8(sp)
    e6d4:	df000204 	addi	fp,sp,8
    e6d8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    e6dc:	d0a8c617 	ldw	r2,-23784(gp)
    e6e0:	e0ffff17 	ldw	r3,-4(fp)
    e6e4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    e6e8:	d0a8c617 	ldw	r2,-23784(gp)
    e6ec:	10800d03 	ldbu	r2,52(r2)
    e6f0:	10803fcc 	andi	r2,r2,255
    e6f4:	d0e8c617 	ldw	r3,-23784(gp)
    e6f8:	18c00d03 	ldbu	r3,52(r3)
    e6fc:	18c03fcc 	andi	r3,r3,255
    e700:	e13fff17 	ldw	r4,-4(fp)
    e704:	20c7883a 	add	r3,r4,r3
    e708:	18c00204 	addi	r3,r3,8
    e70c:	190000c3 	ldbu	r4,3(r3)
    e710:	d0e8c617 	ldw	r3,-23784(gp)
    e714:	18c00d43 	ldbu	r3,53(r3)
    e718:	20c6b03a 	or	r3,r4,r3
    e71c:	1809883a 	mov	r4,r3
    e720:	e0ffff17 	ldw	r3,-4(fp)
    e724:	1885883a 	add	r2,r3,r2
    e728:	10800204 	addi	r2,r2,8
    e72c:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    e730:	e0bfff17 	ldw	r2,-4(fp)
    e734:	10c00283 	ldbu	r3,10(r2)
    e738:	d0a8c617 	ldw	r2,-23784(gp)
    e73c:	10800d83 	ldbu	r2,54(r2)
    e740:	1884b03a 	or	r2,r3,r2
    e744:	1007883a 	mov	r3,r2
    e748:	e0bfff17 	ldw	r2,-4(fp)
    e74c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    e750:	d0a8c617 	ldw	r2,-23784(gp)
    e754:	10800d03 	ldbu	r2,52(r2)
    e758:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    e75c:	e0fffe03 	ldbu	r3,-8(fp)
    e760:	e13ffe03 	ldbu	r4,-8(fp)
    e764:	d0a8c344 	addi	r2,gp,-23795
    e768:	2085883a 	add	r2,r4,r2
    e76c:	10800003 	ldbu	r2,0(r2)
    e770:	1009883a 	mov	r4,r2
    e774:	d0a8c617 	ldw	r2,-23784(gp)
    e778:	10800d43 	ldbu	r2,53(r2)
    e77c:	0084303a 	nor	r2,zero,r2
    e780:	2084703a 	and	r2,r4,r2
    e784:	1009883a 	mov	r4,r2
    e788:	d0a8c344 	addi	r2,gp,-23795
    e78c:	1885883a 	add	r2,r3,r2
    e790:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e794:	e0fffe03 	ldbu	r3,-8(fp)
    e798:	d0a8c344 	addi	r2,gp,-23795
    e79c:	1885883a 	add	r2,r3,r2
    e7a0:	10800003 	ldbu	r2,0(r2)
    e7a4:	10803fcc 	andi	r2,r2,255
    e7a8:	1000071e 	bne	r2,zero,e7c8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    e7ac:	d0a8c617 	ldw	r2,-23784(gp)
    e7b0:	10800d83 	ldbu	r2,54(r2)
    e7b4:	0084303a 	nor	r2,zero,r2
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	d0a8c303 	ldbu	r2,-23796(gp)
    e7c0:	1884703a 	and	r2,r3,r2
    e7c4:	d0a8c305 	stb	r2,-23796(gp)
    }
}
    e7c8:	e037883a 	mov	sp,fp
    e7cc:	df000017 	ldw	fp,0(sp)
    e7d0:	dec00104 	addi	sp,sp,4
    e7d4:	f800283a 	ret

0000e7d8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    e7d8:	defffb04 	addi	sp,sp,-20
    e7dc:	df000415 	stw	fp,16(sp)
    e7e0:	df000404 	addi	fp,sp,16
    e7e4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    e7e8:	d0a8c617 	ldw	r2,-23784(gp)
    e7ec:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    e7f0:	d0a8c617 	ldw	r2,-23784(gp)
    e7f4:	e0ffff17 	ldw	r3,-4(fp)
    e7f8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    e7fc:	e0bfff17 	ldw	r2,-4(fp)
    e800:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    e804:	e0bffc17 	ldw	r2,-16(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e810:	00002006 	br	e894 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    e814:	d0a8c617 	ldw	r2,-23784(gp)
    e818:	10800d03 	ldbu	r2,52(r2)
    e81c:	10803fcc 	andi	r2,r2,255
    e820:	d0e8c617 	ldw	r3,-23784(gp)
    e824:	18c00d03 	ldbu	r3,52(r3)
    e828:	18c03fcc 	andi	r3,r3,255
    e82c:	e13ffd17 	ldw	r4,-12(fp)
    e830:	20c7883a 	add	r3,r4,r3
    e834:	18c00204 	addi	r3,r3,8
    e838:	190000c3 	ldbu	r4,3(r3)
    e83c:	d0e8c617 	ldw	r3,-23784(gp)
    e840:	18c00d43 	ldbu	r3,53(r3)
    e844:	20c6b03a 	or	r3,r4,r3
    e848:	1809883a 	mov	r4,r3
    e84c:	e0fffd17 	ldw	r3,-12(fp)
    e850:	1885883a 	add	r2,r3,r2
    e854:	10800204 	addi	r2,r2,8
    e858:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    e85c:	e0bffd17 	ldw	r2,-12(fp)
    e860:	10c00283 	ldbu	r3,10(r2)
    e864:	d0a8c617 	ldw	r2,-23784(gp)
    e868:	10800d83 	ldbu	r2,54(r2)
    e86c:	1884b03a 	or	r2,r3,r2
    e870:	1007883a 	mov	r3,r2
    e874:	e0bffd17 	ldw	r2,-12(fp)
    e878:	10c00285 	stb	r3,10(r2)
        pevents++;
    e87c:	e0bffc17 	ldw	r2,-16(fp)
    e880:	10800104 	addi	r2,r2,4
    e884:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    e888:	e0bffc17 	ldw	r2,-16(fp)
    e88c:	10800017 	ldw	r2,0(r2)
    e890:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e894:	e0bffd17 	ldw	r2,-12(fp)
    e898:	103fde1e 	bne	r2,zero,e814 <__alt_mem_Flash_flash_data+0xf400e814>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    e89c:	d0a8c617 	ldw	r2,-23784(gp)
    e8a0:	10800d03 	ldbu	r2,52(r2)
    e8a4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    e8a8:	e0fffe03 	ldbu	r3,-8(fp)
    e8ac:	e13ffe03 	ldbu	r4,-8(fp)
    e8b0:	d0a8c344 	addi	r2,gp,-23795
    e8b4:	2085883a 	add	r2,r4,r2
    e8b8:	10800003 	ldbu	r2,0(r2)
    e8bc:	1009883a 	mov	r4,r2
    e8c0:	d0a8c617 	ldw	r2,-23784(gp)
    e8c4:	10800d43 	ldbu	r2,53(r2)
    e8c8:	0084303a 	nor	r2,zero,r2
    e8cc:	2084703a 	and	r2,r4,r2
    e8d0:	1009883a 	mov	r4,r2
    e8d4:	d0a8c344 	addi	r2,gp,-23795
    e8d8:	1885883a 	add	r2,r3,r2
    e8dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e8e0:	e0fffe03 	ldbu	r3,-8(fp)
    e8e4:	d0a8c344 	addi	r2,gp,-23795
    e8e8:	1885883a 	add	r2,r3,r2
    e8ec:	10800003 	ldbu	r2,0(r2)
    e8f0:	10803fcc 	andi	r2,r2,255
    e8f4:	1000071e 	bne	r2,zero,e914 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    e8f8:	d0a8c617 	ldw	r2,-23784(gp)
    e8fc:	10800d83 	ldbu	r2,54(r2)
    e900:	0084303a 	nor	r2,zero,r2
    e904:	1007883a 	mov	r3,r2
    e908:	d0a8c303 	ldbu	r2,-23796(gp)
    e90c:	1884703a 	and	r2,r3,r2
    e910:	d0a8c305 	stb	r2,-23796(gp)
    }
}
    e914:	e037883a 	mov	sp,fp
    e918:	df000017 	ldw	fp,0(sp)
    e91c:	dec00104 	addi	sp,sp,4
    e920:	f800283a 	ret

0000e924 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    e924:	defffc04 	addi	sp,sp,-16
    e928:	df000315 	stw	fp,12(sp)
    e92c:	df000304 	addi	fp,sp,12
    e930:	e13ffe15 	stw	r4,-8(fp)
    e934:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    e938:	e0bffe17 	ldw	r2,-8(fp)
    e93c:	10800d03 	ldbu	r2,52(r2)
    e940:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    e944:	e0bffd03 	ldbu	r2,-12(fp)
    e948:	e0fffd03 	ldbu	r3,-12(fp)
    e94c:	e13fff17 	ldw	r4,-4(fp)
    e950:	20c7883a 	add	r3,r4,r3
    e954:	18c00204 	addi	r3,r3,8
    e958:	18c000c3 	ldbu	r3,3(r3)
    e95c:	1809883a 	mov	r4,r3
    e960:	e0fffe17 	ldw	r3,-8(fp)
    e964:	18c00d43 	ldbu	r3,53(r3)
    e968:	00c6303a 	nor	r3,zero,r3
    e96c:	20c6703a 	and	r3,r4,r3
    e970:	1809883a 	mov	r4,r3
    e974:	e0ffff17 	ldw	r3,-4(fp)
    e978:	1885883a 	add	r2,r3,r2
    e97c:	10800204 	addi	r2,r2,8
    e980:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    e984:	e0bffd03 	ldbu	r2,-12(fp)
    e988:	e0ffff17 	ldw	r3,-4(fp)
    e98c:	1885883a 	add	r2,r3,r2
    e990:	10800204 	addi	r2,r2,8
    e994:	108000c3 	ldbu	r2,3(r2)
    e998:	10803fcc 	andi	r2,r2,255
    e99c:	10000a1e 	bne	r2,zero,e9c8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10800283 	ldbu	r2,10(r2)
    e9a8:	1007883a 	mov	r3,r2
    e9ac:	e0bffe17 	ldw	r2,-8(fp)
    e9b0:	10800d83 	ldbu	r2,54(r2)
    e9b4:	0084303a 	nor	r2,zero,r2
    e9b8:	1884703a 	and	r2,r3,r2
    e9bc:	1007883a 	mov	r3,r2
    e9c0:	e0bfff17 	ldw	r2,-4(fp)
    e9c4:	10c00285 	stb	r3,10(r2)
    }
}
    e9c8:	e037883a 	mov	sp,fp
    e9cc:	df000017 	ldw	fp,0(sp)
    e9d0:	dec00104 	addi	sp,sp,4
    e9d4:	f800283a 	ret

0000e9d8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    e9d8:	defffa04 	addi	sp,sp,-24
    e9dc:	df000515 	stw	fp,20(sp)
    e9e0:	df000504 	addi	fp,sp,20
    e9e4:	e13ffe15 	stw	r4,-8(fp)
    e9e8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    e9ec:	e0bffe17 	ldw	r2,-8(fp)
    e9f0:	10800d03 	ldbu	r2,52(r2)
    e9f4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    e9f8:	e0bffe17 	ldw	r2,-8(fp)
    e9fc:	10800d83 	ldbu	r2,54(r2)
    ea00:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    ea04:	e0bffe17 	ldw	r2,-8(fp)
    ea08:	10800d43 	ldbu	r2,53(r2)
    ea0c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    ea10:	e0bfff17 	ldw	r2,-4(fp)
    ea14:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    ea18:	e0bffb17 	ldw	r2,-20(fp)
    ea1c:	10800017 	ldw	r2,0(r2)
    ea20:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    ea24:	00002506 	br	eabc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    ea28:	e0bffd03 	ldbu	r2,-12(fp)
    ea2c:	e0fffd03 	ldbu	r3,-12(fp)
    ea30:	e13ffc17 	ldw	r4,-16(fp)
    ea34:	20c7883a 	add	r3,r4,r3
    ea38:	18c00204 	addi	r3,r3,8
    ea3c:	18c000c3 	ldbu	r3,3(r3)
    ea40:	1809883a 	mov	r4,r3
    ea44:	e0fffd83 	ldbu	r3,-10(fp)
    ea48:	00c6303a 	nor	r3,zero,r3
    ea4c:	20c6703a 	and	r3,r4,r3
    ea50:	1809883a 	mov	r4,r3
    ea54:	e0fffc17 	ldw	r3,-16(fp)
    ea58:	1885883a 	add	r2,r3,r2
    ea5c:	10800204 	addi	r2,r2,8
    ea60:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    ea64:	e0bffd03 	ldbu	r2,-12(fp)
    ea68:	e0fffc17 	ldw	r3,-16(fp)
    ea6c:	1885883a 	add	r2,r3,r2
    ea70:	10800204 	addi	r2,r2,8
    ea74:	108000c3 	ldbu	r2,3(r2)
    ea78:	10803fcc 	andi	r2,r2,255
    ea7c:	1000091e 	bne	r2,zero,eaa4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    ea80:	e0bffc17 	ldw	r2,-16(fp)
    ea84:	10800283 	ldbu	r2,10(r2)
    ea88:	1007883a 	mov	r3,r2
    ea8c:	e0bffd43 	ldbu	r2,-11(fp)
    ea90:	0084303a 	nor	r2,zero,r2
    ea94:	1884703a 	and	r2,r3,r2
    ea98:	1007883a 	mov	r3,r2
    ea9c:	e0bffc17 	ldw	r2,-16(fp)
    eaa0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    eaa4:	e0bffb17 	ldw	r2,-20(fp)
    eaa8:	10800104 	addi	r2,r2,4
    eaac:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    eab0:	e0bffb17 	ldw	r2,-20(fp)
    eab4:	10800017 	ldw	r2,0(r2)
    eab8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    eabc:	e0bffc17 	ldw	r2,-16(fp)
    eac0:	103fd91e 	bne	r2,zero,ea28 <__alt_mem_Flash_flash_data+0xf400ea28>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    eac4:	e037883a 	mov	sp,fp
    eac8:	df000017 	ldw	fp,0(sp)
    eacc:	dec00104 	addi	sp,sp,4
    ead0:	f800283a 	ret

0000ead4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    ead4:	defffc04 	addi	sp,sp,-16
    ead8:	df000315 	stw	fp,12(sp)
    eadc:	df000304 	addi	fp,sp,12
    eae0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    eae4:	e0bfff17 	ldw	r2,-4(fp)
    eae8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    eaec:	e0bfff17 	ldw	r2,-4(fp)
    eaf0:	108002c4 	addi	r2,r2,11
    eaf4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    eaf8:	e03ffe05 	stb	zero,-8(fp)
    eafc:	00000706 	br	eb1c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    eb00:	e0bffd17 	ldw	r2,-12(fp)
    eb04:	10c00044 	addi	r3,r2,1
    eb08:	e0fffd15 	stw	r3,-12(fp)
    eb0c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    eb10:	e0bffe03 	ldbu	r2,-8(fp)
    eb14:	10800044 	addi	r2,r2,1
    eb18:	e0bffe05 	stb	r2,-8(fp)
    eb1c:	e0bffe03 	ldbu	r2,-8(fp)
    eb20:	108000f0 	cmpltui	r2,r2,3
    eb24:	103ff61e 	bne	r2,zero,eb00 <__alt_mem_Flash_flash_data+0xf400eb00>
        *ptbl++ = 0;
    }
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	df000017 	ldw	fp,0(sp)
    eb30:	dec00104 	addi	sp,sp,4
    eb34:	f800283a 	ret

0000eb38 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    eb38:	defffb04 	addi	sp,sp,-20
    eb3c:	dfc00415 	stw	ra,16(sp)
    eb40:	df000315 	stw	fp,12(sp)
    eb44:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    eb48:	010000b4 	movhi	r4,2
    eb4c:	21111604 	addi	r4,r4,17496
    eb50:	0142d004 	movi	r5,2880
    eb54:	000ee980 	call	ee98 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    eb58:	008000b4 	movhi	r2,2
    eb5c:	10911604 	addi	r2,r2,17496
    eb60:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    eb64:	008000b4 	movhi	r2,2
    eb68:	10912204 	addi	r2,r2,17544
    eb6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    eb70:	e03ffd0d 	sth	zero,-12(fp)
    eb74:	00001306 	br	ebc4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    eb78:	e0bffe17 	ldw	r2,-8(fp)
    eb7c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	e0ffff17 	ldw	r3,-4(fp)
    eb88:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	00c00fc4 	movi	r3,63
    eb94:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    eb98:	e0bffe17 	ldw	r2,-8(fp)
    eb9c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    eba0:	e0bffe17 	ldw	r2,-8(fp)
    eba4:	10800c04 	addi	r2,r2,48
    eba8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    ebac:	e0bfff17 	ldw	r2,-4(fp)
    ebb0:	10800c04 	addi	r2,r2,48
    ebb4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    ebb8:	e0bffd0b 	ldhu	r2,-12(fp)
    ebbc:	10800044 	addi	r2,r2,1
    ebc0:	e0bffd0d 	sth	r2,-12(fp)
    ebc4:	e0bffd0b 	ldhu	r2,-12(fp)
    ebc8:	10800ef0 	cmpltui	r2,r2,59
    ebcc:	103fea1e 	bne	r2,zero,eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    ebd0:	e0bffe17 	ldw	r2,-8(fp)
    ebd4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    ebd8:	e0bffe17 	ldw	r2,-8(fp)
    ebdc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    ebe0:	e0bffe17 	ldw	r2,-8(fp)
    ebe4:	00c00fc4 	movi	r3,63
    ebe8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    ebec:	e0bffe17 	ldw	r2,-8(fp)
    ebf0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    ebf4:	008000b4 	movhi	r2,2
    ebf8:	10911604 	addi	r2,r2,17496
    ebfc:	d0a8c415 	stw	r2,-23792(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    ec00:	e037883a 	mov	sp,fp
    ec04:	dfc00117 	ldw	ra,4(sp)
    ec08:	df000017 	ldw	fp,0(sp)
    ec0c:	dec00204 	addi	sp,sp,8
    ec10:	f800283a 	ret

0000ec14 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    ec14:	deffff04 	addi	sp,sp,-4
    ec18:	df000015 	stw	fp,0(sp)
    ec1c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    ec20:	d028c715 	stw	zero,-23780(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    ec24:	d028c505 	stb	zero,-23788(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    ec28:	d028b705 	stb	zero,-23844(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    ec2c:	d028bf45 	stb	zero,-23811(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    ec30:	d028b745 	stb	zero,-23843(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    ec34:	d028bc15 	stw	zero,-23824(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    ec38:	d028b815 	stw	zero,-23840(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    ec3c:	d028ca15 	stw	zero,-23768(gp)
    OSIdleCtrMax  = 0L;
    ec40:	d028bd15 	stw	zero,-23820(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    ec44:	d028c905 	stb	zero,-23772(gp)
#endif
}
    ec48:	e037883a 	mov	sp,fp
    ec4c:	df000017 	ldw	fp,0(sp)
    ec50:	dec00104 	addi	sp,sp,4
    ec54:	f800283a 	ret

0000ec58 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    ec58:	defffd04 	addi	sp,sp,-12
    ec5c:	df000215 	stw	fp,8(sp)
    ec60:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    ec64:	d028c305 	stb	zero,-23796(gp)
    prdytbl       = &OSRdyTbl[0];
    ec68:	d0a8c344 	addi	r2,gp,-23795
    ec6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    ec70:	e03ffe05 	stb	zero,-8(fp)
    ec74:	00000706 	br	ec94 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    ec78:	e0bfff17 	ldw	r2,-4(fp)
    ec7c:	10c00044 	addi	r3,r2,1
    ec80:	e0ffff15 	stw	r3,-4(fp)
    ec84:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    ec88:	e0bffe03 	ldbu	r2,-8(fp)
    ec8c:	10800044 	addi	r2,r2,1
    ec90:	e0bffe05 	stb	r2,-8(fp)
    ec94:	e0bffe03 	ldbu	r2,-8(fp)
    ec98:	108000f0 	cmpltui	r2,r2,3
    ec9c:	103ff61e 	bne	r2,zero,ec78 <__alt_mem_Flash_flash_data+0xf400ec78>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    eca0:	d028b945 	stb	zero,-23835(gp)
    OSPrioHighRdy = 0;
    eca4:	d028b905 	stb	zero,-23836(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    eca8:	d028c115 	stw	zero,-23804(gp)
    OSTCBCur      = (OS_TCB *)0;
    ecac:	d028c615 	stw	zero,-23784(gp)
}
    ecb0:	e037883a 	mov	sp,fp
    ecb4:	df000017 	ldw	fp,0(sp)
    ecb8:	dec00104 	addi	sp,sp,4
    ecbc:	f800283a 	ret

0000ecc0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    ecc0:	defff804 	addi	sp,sp,-32
    ecc4:	dfc00715 	stw	ra,28(sp)
    ecc8:	df000615 	stw	fp,24(sp)
    eccc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    ecd0:	00bfffd4 	movui	r2,65535
    ecd4:	d8800015 	stw	r2,0(sp)
    ecd8:	008000b4 	movhi	r2,2
    ecdc:	108f1604 	addi	r2,r2,15448
    ece0:	d8800115 	stw	r2,4(sp)
    ece4:	00808004 	movi	r2,512
    ece8:	d8800215 	stw	r2,8(sp)
    ecec:	d8000315 	stw	zero,12(sp)
    ecf0:	008000c4 	movi	r2,3
    ecf4:	d8800415 	stw	r2,16(sp)
    ecf8:	01000074 	movhi	r4,1
    ecfc:	213c5404 	addi	r4,r4,-3760
    ed00:	000b883a 	mov	r5,zero
    ed04:	018000b4 	movhi	r6,2
    ed08:	31911504 	addi	r6,r6,17492
    ed0c:	01c00504 	movi	r7,20
    ed10:	0013b640 	call	13b64 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    ed14:	01000504 	movi	r4,20
    ed18:	014000b4 	movhi	r5,2
    ed1c:	29668d04 	addi	r5,r5,-26060
    ed20:	e1bfff04 	addi	r6,fp,-4
    ed24:	00144300 	call	14430 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    ed28:	e037883a 	mov	sp,fp
    ed2c:	dfc00117 	ldw	ra,4(sp)
    ed30:	df000017 	ldw	fp,0(sp)
    ed34:	dec00204 	addi	sp,sp,8
    ed38:	f800283a 	ret

0000ed3c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    ed3c:	defff804 	addi	sp,sp,-32
    ed40:	dfc00715 	stw	ra,28(sp)
    ed44:	df000615 	stw	fp,24(sp)
    ed48:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    ed4c:	00bfff94 	movui	r2,65534
    ed50:	d8800015 	stw	r2,0(sp)
    ed54:	008000b4 	movhi	r2,2
    ed58:	108c9e04 	addi	r2,r2,12920
    ed5c:	d8800115 	stw	r2,4(sp)
    ed60:	00808004 	movi	r2,512
    ed64:	d8800215 	stw	r2,8(sp)
    ed68:	d8000315 	stw	zero,12(sp)
    ed6c:	008000c4 	movi	r2,3
    ed70:	d8800415 	stw	r2,16(sp)
    ed74:	01000074 	movhi	r4,1
    ed78:	213c6b04 	addi	r4,r4,-3668
    ed7c:	000b883a 	mov	r5,zero
    ed80:	018000b4 	movhi	r6,2
    ed84:	318e9d04 	addi	r6,r6,14964
    ed88:	01c004c4 	movi	r7,19
    ed8c:	0013b640 	call	13b64 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    ed90:	010004c4 	movi	r4,19
    ed94:	014000b4 	movhi	r5,2
    ed98:	29669104 	addi	r5,r5,-26044
    ed9c:	e1bfff04 	addi	r6,fp,-4
    eda0:	00144300 	call	14430 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    eda4:	e037883a 	mov	sp,fp
    eda8:	dfc00117 	ldw	ra,4(sp)
    edac:	df000017 	ldw	fp,0(sp)
    edb0:	dec00204 	addi	sp,sp,8
    edb4:	f800283a 	ret

0000edb8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    edb8:	defffb04 	addi	sp,sp,-20
    edbc:	dfc00415 	stw	ra,16(sp)
    edc0:	df000315 	stw	fp,12(sp)
    edc4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    edc8:	010000b4 	movhi	r4,2
    edcc:	2113e604 	addi	r4,r4,20376
    edd0:	01414404 	movi	r5,1296
    edd4:	000ee980 	call	ee98 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    edd8:	010000b4 	movhi	r4,2
    eddc:	21152a04 	addi	r4,r4,21672
    ede0:	01401504 	movi	r5,84
    ede4:	000ee980 	call	ee98 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    ede8:	008000b4 	movhi	r2,2
    edec:	1093e604 	addi	r2,r2,20376
    edf0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    edf4:	008000b4 	movhi	r2,2
    edf8:	10940104 	addi	r2,r2,20484
    edfc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    ee00:	e03ffd05 	stb	zero,-12(fp)
    ee04:	00001106 	br	ee4c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    ee08:	e0bffe17 	ldw	r2,-8(fp)
    ee0c:	e0ffff17 	ldw	r3,-4(fp)
    ee10:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    ee14:	e0bffe17 	ldw	r2,-8(fp)
    ee18:	00c00fc4 	movi	r3,63
    ee1c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    ee20:	e0bffe17 	ldw	r2,-8(fp)
    ee24:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    ee28:	e0bffe17 	ldw	r2,-8(fp)
    ee2c:	10801b04 	addi	r2,r2,108
    ee30:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    ee34:	e0bfff17 	ldw	r2,-4(fp)
    ee38:	10801b04 	addi	r2,r2,108
    ee3c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    ee40:	e0bffd03 	ldbu	r2,-12(fp)
    ee44:	10800044 	addi	r2,r2,1
    ee48:	e0bffd05 	stb	r2,-12(fp)
    ee4c:	e0bffd03 	ldbu	r2,-12(fp)
    ee50:	108002f0 	cmpltui	r2,r2,11
    ee54:	103fec1e 	bne	r2,zero,ee08 <__alt_mem_Flash_flash_data+0xf400ee08>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    ee58:	e0bffe17 	ldw	r2,-8(fp)
    ee5c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ee60:	e0bffe17 	ldw	r2,-8(fp)
    ee64:	00c00fc4 	movi	r3,63
    ee68:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    ee6c:	e0bffe17 	ldw	r2,-8(fp)
    ee70:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    ee74:	d028ba15 	stw	zero,-23832(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    ee78:	008000b4 	movhi	r2,2
    ee7c:	1093e604 	addi	r2,r2,20376
    ee80:	d0a8be15 	stw	r2,-23816(gp)
}
    ee84:	e037883a 	mov	sp,fp
    ee88:	dfc00117 	ldw	ra,4(sp)
    ee8c:	df000017 	ldw	fp,0(sp)
    ee90:	dec00204 	addi	sp,sp,8
    ee94:	f800283a 	ret

0000ee98 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    ee98:	defffd04 	addi	sp,sp,-12
    ee9c:	df000215 	stw	fp,8(sp)
    eea0:	df000204 	addi	fp,sp,8
    eea4:	e13ffe15 	stw	r4,-8(fp)
    eea8:	2805883a 	mov	r2,r5
    eeac:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    eeb0:	00000706 	br	eed0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    eeb4:	e0bffe17 	ldw	r2,-8(fp)
    eeb8:	10c00044 	addi	r3,r2,1
    eebc:	e0fffe15 	stw	r3,-8(fp)
    eec0:	10000005 	stb	zero,0(r2)
        size--;
    eec4:	e0bfff0b 	ldhu	r2,-4(fp)
    eec8:	10bfffc4 	addi	r2,r2,-1
    eecc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    eed0:	e0bfff0b 	ldhu	r2,-4(fp)
    eed4:	103ff71e 	bne	r2,zero,eeb4 <__alt_mem_Flash_flash_data+0xf400eeb4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    eed8:	e037883a 	mov	sp,fp
    eedc:	df000017 	ldw	fp,0(sp)
    eee0:	dec00104 	addi	sp,sp,4
    eee4:	f800283a 	ret

0000eee8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    eee8:	defffc04 	addi	sp,sp,-16
    eeec:	df000315 	stw	fp,12(sp)
    eef0:	df000304 	addi	fp,sp,12
    eef4:	e13ffd15 	stw	r4,-12(fp)
    eef8:	e17ffe15 	stw	r5,-8(fp)
    eefc:	3005883a 	mov	r2,r6
    ef00:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    ef04:	00000b06 	br	ef34 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    ef08:	e0bffd17 	ldw	r2,-12(fp)
    ef0c:	10c00044 	addi	r3,r2,1
    ef10:	e0fffd15 	stw	r3,-12(fp)
    ef14:	e0fffe17 	ldw	r3,-8(fp)
    ef18:	19000044 	addi	r4,r3,1
    ef1c:	e13ffe15 	stw	r4,-8(fp)
    ef20:	18c00003 	ldbu	r3,0(r3)
    ef24:	10c00005 	stb	r3,0(r2)
        size--;
    ef28:	e0bfff0b 	ldhu	r2,-4(fp)
    ef2c:	10bfffc4 	addi	r2,r2,-1
    ef30:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    ef34:	e0bfff0b 	ldhu	r2,-4(fp)
    ef38:	103ff31e 	bne	r2,zero,ef08 <__alt_mem_Flash_flash_data+0xf400ef08>
        *pdest++ = *psrc++;
        size--;
    }
}
    ef3c:	e037883a 	mov	sp,fp
    ef40:	df000017 	ldw	fp,0(sp)
    ef44:	dec00104 	addi	sp,sp,4
    ef48:	f800283a 	ret

0000ef4c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    ef4c:	defffb04 	addi	sp,sp,-20
    ef50:	dfc00415 	stw	ra,16(sp)
    ef54:	df000315 	stw	fp,12(sp)
    ef58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ef5c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef60:	0005303a 	rdctl	r2,status
    ef64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef68:	e0fffe17 	ldw	r3,-8(fp)
    ef6c:	00bfff84 	movi	r2,-2
    ef70:	1884703a 	and	r2,r3,r2
    ef74:	1001703a 	wrctl	status,r2
  
  return context;
    ef78:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    ef7c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    ef80:	d0a8c503 	ldbu	r2,-23788(gp)
    ef84:	10803fcc 	andi	r2,r2,255
    ef88:	10001a1e 	bne	r2,zero,eff4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    ef8c:	d0a8b703 	ldbu	r2,-23844(gp)
    ef90:	10803fcc 	andi	r2,r2,255
    ef94:	1000171e 	bne	r2,zero,eff4 <OS_Sched+0xa8>
            OS_SchedNew();
    ef98:	000f0180 	call	f018 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    ef9c:	d0e8b903 	ldbu	r3,-23836(gp)
    efa0:	d0a8b943 	ldbu	r2,-23835(gp)
    efa4:	18c03fcc 	andi	r3,r3,255
    efa8:	10803fcc 	andi	r2,r2,255
    efac:	18801126 	beq	r3,r2,eff4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    efb0:	d0a8b903 	ldbu	r2,-23836(gp)
    efb4:	10c03fcc 	andi	r3,r2,255
    efb8:	008000b4 	movhi	r2,2
    efbc:	10952a04 	addi	r2,r2,21672
    efc0:	18c7883a 	add	r3,r3,r3
    efc4:	18c7883a 	add	r3,r3,r3
    efc8:	10c5883a 	add	r2,r2,r3
    efcc:	10800017 	ldw	r2,0(r2)
    efd0:	d0a8c115 	stw	r2,-23804(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    efd4:	d0a8c117 	ldw	r2,-23804(gp)
    efd8:	10c00e17 	ldw	r3,56(r2)
    efdc:	18c00044 	addi	r3,r3,1
    efe0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    efe4:	d0a8bc17 	ldw	r2,-23824(gp)
    efe8:	10800044 	addi	r2,r2,1
    efec:	d0a8bc15 	stw	r2,-23824(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    eff0:	0018b680 	call	18b68 <OSCtxSw>
    eff4:	e0bffd17 	ldw	r2,-12(fp)
    eff8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    effc:	e0bfff17 	ldw	r2,-4(fp)
    f000:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f004:	e037883a 	mov	sp,fp
    f008:	dfc00117 	ldw	ra,4(sp)
    f00c:	df000017 	ldw	fp,0(sp)
    f010:	dec00204 	addi	sp,sp,8
    f014:	f800283a 	ret

0000f018 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f018:	defffe04 	addi	sp,sp,-8
    f01c:	df000115 	stw	fp,4(sp)
    f020:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f024:	d0a8c303 	ldbu	r2,-23796(gp)
    f028:	10c03fcc 	andi	r3,r2,255
    f02c:	008000b4 	movhi	r2,2
    f030:	10a64d04 	addi	r2,r2,-26316
    f034:	10c5883a 	add	r2,r2,r3
    f038:	10800003 	ldbu	r2,0(r2)
    f03c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f040:	e0bfff03 	ldbu	r2,-4(fp)
    f044:	100490fa 	slli	r2,r2,3
    f048:	1009883a 	mov	r4,r2
    f04c:	e0ffff03 	ldbu	r3,-4(fp)
    f050:	d0a8c344 	addi	r2,gp,-23795
    f054:	1885883a 	add	r2,r3,r2
    f058:	10800003 	ldbu	r2,0(r2)
    f05c:	10c03fcc 	andi	r3,r2,255
    f060:	008000b4 	movhi	r2,2
    f064:	10a64d04 	addi	r2,r2,-26316
    f068:	10c5883a 	add	r2,r2,r3
    f06c:	10800003 	ldbu	r2,0(r2)
    f070:	2085883a 	add	r2,r4,r2
    f074:	d0a8b905 	stb	r2,-23836(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f078:	e037883a 	mov	sp,fp
    f07c:	df000017 	ldw	fp,0(sp)
    f080:	dec00104 	addi	sp,sp,4
    f084:	f800283a 	ret

0000f088 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f088:	defffc04 	addi	sp,sp,-16
    f08c:	df000315 	stw	fp,12(sp)
    f090:	df000304 	addi	fp,sp,12
    f094:	e13ffe15 	stw	r4,-8(fp)
    f098:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f09c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f0a0:	00000b06 	br	f0d0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f0a4:	e0bffe17 	ldw	r2,-8(fp)
    f0a8:	10c00044 	addi	r3,r2,1
    f0ac:	e0fffe15 	stw	r3,-8(fp)
    f0b0:	e0ffff17 	ldw	r3,-4(fp)
    f0b4:	19000044 	addi	r4,r3,1
    f0b8:	e13fff15 	stw	r4,-4(fp)
    f0bc:	18c00003 	ldbu	r3,0(r3)
    f0c0:	10c00005 	stb	r3,0(r2)
        len++;
    f0c4:	e0bffd03 	ldbu	r2,-12(fp)
    f0c8:	10800044 	addi	r2,r2,1
    f0cc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	10800003 	ldbu	r2,0(r2)
    f0d8:	10803fcc 	andi	r2,r2,255
    f0dc:	103ff11e 	bne	r2,zero,f0a4 <__alt_mem_Flash_flash_data+0xf400f0a4>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f0e0:	e0bffe17 	ldw	r2,-8(fp)
    f0e4:	10000005 	stb	zero,0(r2)
    return (len);
    f0e8:	e0bffd03 	ldbu	r2,-12(fp)
}
    f0ec:	e037883a 	mov	sp,fp
    f0f0:	df000017 	ldw	fp,0(sp)
    f0f4:	dec00104 	addi	sp,sp,4
    f0f8:	f800283a 	ret

0000f0fc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f0fc:	defffd04 	addi	sp,sp,-12
    f100:	df000215 	stw	fp,8(sp)
    f104:	df000204 	addi	fp,sp,8
    f108:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f10c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f110:	00000606 	br	f12c <OS_StrLen+0x30>
        psrc++;
    f114:	e0bfff17 	ldw	r2,-4(fp)
    f118:	10800044 	addi	r2,r2,1
    f11c:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f120:	e0bffe03 	ldbu	r2,-8(fp)
    f124:	10800044 	addi	r2,r2,1
    f128:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f12c:	e0bfff17 	ldw	r2,-4(fp)
    f130:	10800003 	ldbu	r2,0(r2)
    f134:	10803fcc 	andi	r2,r2,255
    f138:	103ff61e 	bne	r2,zero,f114 <__alt_mem_Flash_flash_data+0xf400f114>
        psrc++;
        len++;
    }
    return (len);
    f13c:	e0bffe03 	ldbu	r2,-8(fp)
}
    f140:	e037883a 	mov	sp,fp
    f144:	df000017 	ldw	fp,0(sp)
    f148:	dec00104 	addi	sp,sp,4
    f14c:	f800283a 	ret

0000f150 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f150:	defffa04 	addi	sp,sp,-24
    f154:	dfc00515 	stw	ra,20(sp)
    f158:	df000415 	stw	fp,16(sp)
    f15c:	df000404 	addi	fp,sp,16
    f160:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f164:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f168:	0005303a 	rdctl	r2,status
    f16c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f170:	e0fffd17 	ldw	r3,-12(fp)
    f174:	00bfff84 	movi	r2,-2
    f178:	1884703a 	and	r2,r3,r2
    f17c:	1001703a 	wrctl	status,r2
  
  return context;
    f180:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f184:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f188:	d0a8b817 	ldw	r2,-23840(gp)
    f18c:	10800044 	addi	r2,r2,1
    f190:	d0a8b815 	stw	r2,-23840(gp)
    f194:	e0bffc17 	ldw	r2,-16(fp)
    f198:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f19c:	e0bffe17 	ldw	r2,-8(fp)
    f1a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f1a4:	0018e600 	call	18e60 <OSTaskIdleHook>
    }
    f1a8:	003fef06 	br	f168 <__alt_mem_Flash_flash_data+0xf400f168>

0000f1ac <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f1ac:	defff804 	addi	sp,sp,-32
    f1b0:	dfc00715 	stw	ra,28(sp)
    f1b4:	df000615 	stw	fp,24(sp)
    f1b8:	dc400515 	stw	r17,20(sp)
    f1bc:	dc000415 	stw	r16,16(sp)
    f1c0:	df000604 	addi	fp,sp,24
    f1c4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f1c8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f1cc:	00000206 	br	f1d8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f1d0:	01000044 	movi	r4,1
    f1d4:	0014d5c0 	call	14d5c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f1d8:	d0a8c903 	ldbu	r2,-23772(gp)
    f1dc:	10803fcc 	andi	r2,r2,255
    f1e0:	103ffb26 	beq	r2,zero,f1d0 <__alt_mem_Flash_flash_data+0xf400f1d0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f1e4:	d0e8bd17 	ldw	r3,-23820(gp)
    f1e8:	00947b34 	movhi	r2,20972
    f1ec:	10a147c4 	addi	r2,r2,-31457
    f1f0:	1888383a 	mulxuu	r4,r3,r2
    f1f4:	1885383a 	mul	r2,r3,r2
    f1f8:	1021883a 	mov	r16,r2
    f1fc:	2023883a 	mov	r17,r4
    f200:	8804d17a 	srli	r2,r17,5
    f204:	d0a8bd15 	stw	r2,-23820(gp)
    if (OSIdleCtrMax == 0L) {
    f208:	d0a8bd17 	ldw	r2,-23820(gp)
    f20c:	1000031e 	bne	r2,zero,f21c <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    f210:	d028bf05 	stb	zero,-23812(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f214:	01003fc4 	movi	r4,255
    f218:	00149b00 	call	149b0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f21c:	0005303a 	rdctl	r2,status
    f220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f224:	e0fffb17 	ldw	r3,-20(fp)
    f228:	00bfff84 	movi	r2,-2
    f22c:	1884703a 	and	r2,r3,r2
    f230:	1001703a 	wrctl	status,r2
  
  return context;
    f234:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f238:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f23c:	d0a8b817 	ldw	r2,-23840(gp)
    f240:	d0a8ca15 	stw	r2,-23768(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f244:	d028b815 	stw	zero,-23840(gp)
    f248:	e0bffa17 	ldw	r2,-24(fp)
    f24c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f250:	e0bffc17 	ldw	r2,-16(fp)
    f254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f258:	d0e8ca17 	ldw	r3,-23768(gp)
    f25c:	d0a8bd17 	ldw	r2,-23820(gp)
    f260:	1885203a 	divu	r2,r3,r2
    f264:	1007883a 	mov	r3,r2
    f268:	00801904 	movi	r2,100
    f26c:	10c5c83a 	sub	r2,r2,r3
    f270:	d0a8bf05 	stb	r2,-23812(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f274:	0018df00 	call	18df0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f278:	000f2880 	call	f288 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f27c:	0009883a 	mov	r4,zero
    f280:	0014d5c0 	call	14d5c <OSTimeDly>
    }
    f284:	003fe506 	br	f21c <__alt_mem_Flash_flash_data+0xf400f21c>

0000f288 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f288:	defffa04 	addi	sp,sp,-24
    f28c:	dfc00515 	stw	ra,20(sp)
    f290:	df000415 	stw	fp,16(sp)
    f294:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f298:	e03ffc05 	stb	zero,-16(fp)
    f29c:	00002406 	br	f330 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f2a0:	e0fffc03 	ldbu	r3,-16(fp)
    f2a4:	e0bffe04 	addi	r2,fp,-8
    f2a8:	1809883a 	mov	r4,r3
    f2ac:	100b883a 	mov	r5,r2
    f2b0:	00147e80 	call	147e8 <OSTaskStkChk>
    f2b4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f2b8:	e0bffc43 	ldbu	r2,-15(fp)
    f2bc:	1000191e 	bne	r2,zero,f324 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f2c0:	e0fffc03 	ldbu	r3,-16(fp)
    f2c4:	008000b4 	movhi	r2,2
    f2c8:	10952a04 	addi	r2,r2,21672
    f2cc:	18c7883a 	add	r3,r3,r3
    f2d0:	18c7883a 	add	r3,r3,r3
    f2d4:	10c5883a 	add	r2,r2,r3
    f2d8:	10800017 	ldw	r2,0(r2)
    f2dc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f2e0:	e0bffd17 	ldw	r2,-12(fp)
    f2e4:	10000f26 	beq	r2,zero,f324 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f2e8:	e0bffd17 	ldw	r2,-12(fp)
    f2ec:	10800060 	cmpeqi	r2,r2,1
    f2f0:	10000c1e 	bne	r2,zero,f324 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f2f4:	e0bffd17 	ldw	r2,-12(fp)
    f2f8:	10c00217 	ldw	r3,8(r2)
    f2fc:	e0bffd17 	ldw	r2,-12(fp)
    f300:	10800317 	ldw	r2,12(r2)
    f304:	1085883a 	add	r2,r2,r2
    f308:	1085883a 	add	r2,r2,r2
    f30c:	1887883a 	add	r3,r3,r2
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f318:	e0ffff17 	ldw	r3,-4(fp)
    f31c:	e0bffd17 	ldw	r2,-12(fp)
    f320:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f324:	e0bffc03 	ldbu	r2,-16(fp)
    f328:	10800044 	addi	r2,r2,1
    f32c:	e0bffc05 	stb	r2,-16(fp)
    f330:	e0bffc03 	ldbu	r2,-16(fp)
    f334:	10800570 	cmpltui	r2,r2,21
    f338:	103fd91e 	bne	r2,zero,f2a0 <__alt_mem_Flash_flash_data+0xf400f2a0>
#endif
                }
            }
        }
    }
}
    f33c:	e037883a 	mov	sp,fp
    f340:	dfc00117 	ldw	ra,4(sp)
    f344:	df000017 	ldw	fp,0(sp)
    f348:	dec00204 	addi	sp,sp,8
    f34c:	f800283a 	ret

0000f350 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f350:	defff204 	addi	sp,sp,-56
    f354:	dfc00d15 	stw	ra,52(sp)
    f358:	df000c15 	stw	fp,48(sp)
    f35c:	df000c04 	addi	fp,sp,48
    f360:	e17ffc15 	stw	r5,-16(fp)
    f364:	e1bffd15 	stw	r6,-12(fp)
    f368:	3807883a 	mov	r3,r7
    f36c:	e0800417 	ldw	r2,16(fp)
    f370:	e13ffb05 	stb	r4,-20(fp)
    f374:	e0fffe0d 	sth	r3,-8(fp)
    f378:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f37c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f380:	0005303a 	rdctl	r2,status
    f384:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f388:	e0fff617 	ldw	r3,-40(fp)
    f38c:	00bfff84 	movi	r2,-2
    f390:	1884703a 	and	r2,r3,r2
    f394:	1001703a 	wrctl	status,r2
  
  return context;
    f398:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    f39c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    f3a0:	d0a8be17 	ldw	r2,-23816(gp)
    f3a4:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    f3a8:	e0bff517 	ldw	r2,-44(fp)
    f3ac:	10009326 	beq	r2,zero,f5fc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    f3b0:	e0bff517 	ldw	r2,-44(fp)
    f3b4:	10800517 	ldw	r2,20(r2)
    f3b8:	d0a8be15 	stw	r2,-23816(gp)
    f3bc:	e0bff417 	ldw	r2,-48(fp)
    f3c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3c4:	e0bff717 	ldw	r2,-36(fp)
    f3c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    f3cc:	e0bff517 	ldw	r2,-44(fp)
    f3d0:	e0fffc17 	ldw	r3,-16(fp)
    f3d4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    f3d8:	e0bff517 	ldw	r2,-44(fp)
    f3dc:	e0fffb03 	ldbu	r3,-20(fp)
    f3e0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    f3e4:	e0bff517 	ldw	r2,-44(fp)
    f3e8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    f3ec:	e0bff517 	ldw	r2,-44(fp)
    f3f0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    f3f4:	e0bff517 	ldw	r2,-44(fp)
    f3f8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    f3fc:	e0bff517 	ldw	r2,-44(fp)
    f400:	e0c00317 	ldw	r3,12(fp)
    f404:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    f408:	e0bff517 	ldw	r2,-44(fp)
    f40c:	e0c00217 	ldw	r3,8(fp)
    f410:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    f414:	e0bff517 	ldw	r2,-44(fp)
    f418:	e0fffd17 	ldw	r3,-12(fp)
    f41c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    f420:	e0bff517 	ldw	r2,-44(fp)
    f424:	e0ffff0b 	ldhu	r3,-4(fp)
    f428:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    f42c:	e0bff517 	ldw	r2,-44(fp)
    f430:	e0fffe0b 	ldhu	r3,-8(fp)
    f434:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    f438:	e0bff517 	ldw	r2,-44(fp)
    f43c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    f440:	e0bffb03 	ldbu	r2,-20(fp)
    f444:	1004d0fa 	srli	r2,r2,3
    f448:	1007883a 	mov	r3,r2
    f44c:	e0bff517 	ldw	r2,-44(fp)
    f450:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    f454:	e0bffb03 	ldbu	r2,-20(fp)
    f458:	108001cc 	andi	r2,r2,7
    f45c:	1007883a 	mov	r3,r2
    f460:	e0bff517 	ldw	r2,-44(fp)
    f464:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    f468:	e0bff517 	ldw	r2,-44(fp)
    f46c:	10800d03 	ldbu	r2,52(r2)
    f470:	10803fcc 	andi	r2,r2,255
    f474:	00c00044 	movi	r3,1
    f478:	1884983a 	sll	r2,r3,r2
    f47c:	1007883a 	mov	r3,r2
    f480:	e0bff517 	ldw	r2,-44(fp)
    f484:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    f488:	e0bff517 	ldw	r2,-44(fp)
    f48c:	10800cc3 	ldbu	r2,51(r2)
    f490:	10803fcc 	andi	r2,r2,255
    f494:	00c00044 	movi	r3,1
    f498:	1884983a 	sll	r2,r3,r2
    f49c:	1007883a 	mov	r3,r2
    f4a0:	e0bff517 	ldw	r2,-44(fp)
    f4a4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    f4a8:	e0bff517 	ldw	r2,-44(fp)
    f4ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    f4b0:	e0bff517 	ldw	r2,-44(fp)
    f4b4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    f4b8:	e0bff517 	ldw	r2,-44(fp)
    f4bc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    f4c0:	e0bff517 	ldw	r2,-44(fp)
    f4c4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    f4c8:	e0bff517 	ldw	r2,-44(fp)
    f4cc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    f4d0:	e0bff517 	ldw	r2,-44(fp)
    f4d4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    f4d8:	e0bff517 	ldw	r2,-44(fp)
    f4dc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    f4e0:	e0bff517 	ldw	r2,-44(fp)
    f4e4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    f4e8:	e0bff517 	ldw	r2,-44(fp)
    f4ec:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    f4f0:	e0bff517 	ldw	r2,-44(fp)
    f4f4:	00c00fc4 	movi	r3,63
    f4f8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    f4fc:	e0bff517 	ldw	r2,-44(fp)
    f500:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    f504:	e13ff517 	ldw	r4,-44(fp)
    f508:	0018e7c0 	call	18e7c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    f50c:	e13ff517 	ldw	r4,-44(fp)
    f510:	0018d940 	call	18d94 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f514:	0005303a 	rdctl	r2,status
    f518:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f51c:	e0fff817 	ldw	r3,-32(fp)
    f520:	00bfff84 	movi	r2,-2
    f524:	1884703a 	and	r2,r3,r2
    f528:	1001703a 	wrctl	status,r2
  
  return context;
    f52c:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    f530:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    f534:	e0fffb03 	ldbu	r3,-20(fp)
    f538:	008000b4 	movhi	r2,2
    f53c:	10952a04 	addi	r2,r2,21672
    f540:	18c7883a 	add	r3,r3,r3
    f544:	18c7883a 	add	r3,r3,r3
    f548:	10c5883a 	add	r2,r2,r3
    f54c:	e0fff517 	ldw	r3,-44(fp)
    f550:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    f554:	d0e8ba17 	ldw	r3,-23832(gp)
    f558:	e0bff517 	ldw	r2,-44(fp)
    f55c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    f560:	e0bff517 	ldw	r2,-44(fp)
    f564:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    f568:	d0a8ba17 	ldw	r2,-23832(gp)
    f56c:	10000326 	beq	r2,zero,f57c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    f570:	d0a8ba17 	ldw	r2,-23832(gp)
    f574:	e0fff517 	ldw	r3,-44(fp)
    f578:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    f57c:	e0bff517 	ldw	r2,-44(fp)
    f580:	d0a8ba15 	stw	r2,-23832(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    f584:	e0bff517 	ldw	r2,-44(fp)
    f588:	10c00d83 	ldbu	r3,54(r2)
    f58c:	d0a8c303 	ldbu	r2,-23796(gp)
    f590:	1884b03a 	or	r2,r3,r2
    f594:	d0a8c305 	stb	r2,-23796(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f598:	e0bff517 	ldw	r2,-44(fp)
    f59c:	10800d03 	ldbu	r2,52(r2)
    f5a0:	10c03fcc 	andi	r3,r2,255
    f5a4:	e0bff517 	ldw	r2,-44(fp)
    f5a8:	10800d03 	ldbu	r2,52(r2)
    f5ac:	11003fcc 	andi	r4,r2,255
    f5b0:	d0a8c344 	addi	r2,gp,-23795
    f5b4:	2085883a 	add	r2,r4,r2
    f5b8:	11000003 	ldbu	r4,0(r2)
    f5bc:	e0bff517 	ldw	r2,-44(fp)
    f5c0:	10800d43 	ldbu	r2,53(r2)
    f5c4:	2084b03a 	or	r2,r4,r2
    f5c8:	1009883a 	mov	r4,r2
    f5cc:	d0a8c344 	addi	r2,gp,-23795
    f5d0:	1885883a 	add	r2,r3,r2
    f5d4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    f5d8:	d0a8bf43 	ldbu	r2,-23811(gp)
    f5dc:	10800044 	addi	r2,r2,1
    f5e0:	d0a8bf45 	stb	r2,-23811(gp)
    f5e4:	e0bff417 	ldw	r2,-48(fp)
    f5e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5ec:	e0bff917 	ldw	r2,-28(fp)
    f5f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    f5f4:	0005883a 	mov	r2,zero
    f5f8:	00000506 	br	f610 <OS_TCBInit+0x2c0>
    f5fc:	e0bff417 	ldw	r2,-48(fp)
    f600:	e0bffa15 	stw	r2,-24(fp)
    f604:	e0bffa17 	ldw	r2,-24(fp)
    f608:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    f60c:	00801084 	movi	r2,66
}
    f610:	e037883a 	mov	sp,fp
    f614:	dfc00117 	ldw	ra,4(sp)
    f618:	df000017 	ldw	fp,0(sp)
    f61c:	dec00204 	addi	sp,sp,8
    f620:	f800283a 	ret

0000f624 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    f624:	defffe04 	addi	sp,sp,-8
    f628:	df000115 	stw	fp,4(sp)
    f62c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    f630:	d0a01104 	addi	r2,gp,-32700
    f634:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    f638:	d0a01204 	addi	r2,gp,-32696
    f63c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    f640:	d0a01384 	addi	r2,gp,-32690
    f644:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    f648:	d0a01404 	addi	r2,gp,-32688
    f64c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    f650:	d0a01304 	addi	r2,gp,-32692
    f654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    f658:	d0a01484 	addi	r2,gp,-32686
    f65c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    f660:	d0a01504 	addi	r2,gp,-32684
    f664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    f668:	d0a01584 	addi	r2,gp,-32682
    f66c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    f670:	d0a01604 	addi	r2,gp,-32680
    f674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    f678:	d0a01684 	addi	r2,gp,-32678
    f67c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    f680:	d0a01704 	addi	r2,gp,-32676
    f684:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    f688:	d0a01784 	addi	r2,gp,-32674
    f68c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    f690:	d0a01804 	addi	r2,gp,-32672
    f694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    f698:	d0a01884 	addi	r2,gp,-32670
    f69c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    f6a0:	d0a01904 	addi	r2,gp,-32668
    f6a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    f6a8:	d0a01984 	addi	r2,gp,-32666
    f6ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    f6b0:	d0a01a04 	addi	r2,gp,-32664
    f6b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    f6b8:	d0a01a84 	addi	r2,gp,-32662
    f6bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    f6c0:	d0a01b04 	addi	r2,gp,-32660
    f6c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    f6c8:	d0a01b84 	addi	r2,gp,-32658
    f6cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    f6d0:	d0a01c04 	addi	r2,gp,-32656
    f6d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    f6d8:	d0a01c84 	addi	r2,gp,-32654
    f6dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    f6e0:	d0a01d04 	addi	r2,gp,-32652
    f6e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    f6e8:	d0a01d84 	addi	r2,gp,-32650
    f6ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    f6f0:	d0a01e04 	addi	r2,gp,-32648
    f6f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    f6f8:	d0a01e84 	addi	r2,gp,-32646
    f6fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    f700:	d0a01f04 	addi	r2,gp,-32644
    f704:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    f708:	d0a01f84 	addi	r2,gp,-32642
    f70c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    f710:	d0a02004 	addi	r2,gp,-32640
    f714:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    f718:	d0a02084 	addi	r2,gp,-32638
    f71c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    f720:	d0a02104 	addi	r2,gp,-32636
    f724:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    f728:	d0a02184 	addi	r2,gp,-32634
    f72c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    f730:	d0a02204 	addi	r2,gp,-32632
    f734:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    f738:	d0a02284 	addi	r2,gp,-32630
    f73c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    f740:	d0a02304 	addi	r2,gp,-32628
    f744:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    f748:	d0a02384 	addi	r2,gp,-32626
    f74c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    f750:	d0a02404 	addi	r2,gp,-32624
    f754:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    f758:	d0a02484 	addi	r2,gp,-32622
    f75c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    f760:	d0a02504 	addi	r2,gp,-32620
    f764:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    f768:	d0a02584 	addi	r2,gp,-32618
    f76c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    f770:	d0a02604 	addi	r2,gp,-32616
    f774:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    f778:	d0a02684 	addi	r2,gp,-32614
    f77c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    f780:	d0a02704 	addi	r2,gp,-32612
    f784:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    f788:	d0a02784 	addi	r2,gp,-32610
    f78c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    f790:	d0a02804 	addi	r2,gp,-32608
    f794:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    f798:	d0a02d04 	addi	r2,gp,-32588
    f79c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    f7a0:	e037883a 	mov	sp,fp
    f7a4:	df000017 	ldw	fp,0(sp)
    f7a8:	dec00104 	addi	sp,sp,4
    f7ac:	f800283a 	ret

0000f7b0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    f7b0:	defff204 	addi	sp,sp,-56
    f7b4:	df000d15 	stw	fp,52(sp)
    f7b8:	df000d04 	addi	fp,sp,52
    f7bc:	e13ffc15 	stw	r4,-16(fp)
    f7c0:	2807883a 	mov	r3,r5
    f7c4:	3005883a 	mov	r2,r6
    f7c8:	e1ffff15 	stw	r7,-4(fp)
    f7cc:	e0fffd0d 	sth	r3,-12(fp)
    f7d0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f7d4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f7d8:	e0bfff17 	ldw	r2,-4(fp)
    f7dc:	1000021e 	bne	r2,zero,f7e8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    f7e0:	0005883a 	mov	r2,zero
    f7e4:	0000b006 	br	faa8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f7e8:	e0bffc17 	ldw	r2,-16(fp)
    f7ec:	1000051e 	bne	r2,zero,f804 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f7f0:	e0bfff17 	ldw	r2,-4(fp)
    f7f4:	00c01b84 	movi	r3,110
    f7f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f7fc:	0005883a 	mov	r2,zero
    f800:	0000a906 	br	faa8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    f804:	e0bffc17 	ldw	r2,-16(fp)
    f808:	10800003 	ldbu	r2,0(r2)
    f80c:	10803fcc 	andi	r2,r2,255
    f810:	10800160 	cmpeqi	r2,r2,5
    f814:	1000051e 	bne	r2,zero,f82c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	00c00044 	movi	r3,1
    f820:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f824:	0005883a 	mov	r2,zero
    f828:	00009f06 	br	faa8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    f82c:	e0fffe03 	ldbu	r3,-8(fp)
    f830:	00bfe004 	movi	r2,-128
    f834:	1884703a 	and	r2,r3,r2
    f838:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    f83c:	e0bff503 	ldbu	r2,-44(fp)
    f840:	10000626 	beq	r2,zero,f85c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    f844:	e0bffe03 	ldbu	r2,-8(fp)
    f848:	10801fcc 	andi	r2,r2,127
    f84c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    f850:	00800044 	movi	r2,1
    f854:	e0bff385 	stb	r2,-50(fp)
    f858:	00000106 	br	f860 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    f85c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    f860:	e0bfff17 	ldw	r2,-4(fp)
    f864:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f868:	0005303a 	rdctl	r2,status
    f86c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f870:	e0fff617 	ldw	r3,-40(fp)
    f874:	00bfff84 	movi	r2,-2
    f878:	1884703a 	and	r2,r3,r2
    f87c:	1001703a 	wrctl	status,r2
  
  return context;
    f880:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    f884:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    f888:	e0bffe03 	ldbu	r2,-8(fp)
    f88c:	10c00060 	cmpeqi	r3,r2,1
    f890:	18005f1e 	bne	r3,zero,fa10 <OSFlagAccept+0x260>
    f894:	10c00088 	cmpgei	r3,r2,2
    f898:	1800021e 	bne	r3,zero,f8a4 <OSFlagAccept+0xf4>
    f89c:	10003f26 	beq	r2,zero,f99c <OSFlagAccept+0x1ec>
    f8a0:	00007706 	br	fa80 <OSFlagAccept+0x2d0>
    f8a4:	10c000a0 	cmpeqi	r3,r2,2
    f8a8:	1800031e 	bne	r3,zero,f8b8 <OSFlagAccept+0x108>
    f8ac:	108000e0 	cmpeqi	r2,r2,3
    f8b0:	10001e1e 	bne	r2,zero,f92c <OSFlagAccept+0x17c>
    f8b4:	00007206 	br	fa80 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f8b8:	e0bffc17 	ldw	r2,-16(fp)
    f8bc:	10c0020b 	ldhu	r3,8(r2)
    f8c0:	e0bffd0b 	ldhu	r2,-12(fp)
    f8c4:	1884703a 	and	r2,r3,r2
    f8c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f8cc:	e0fff30b 	ldhu	r3,-52(fp)
    f8d0:	e0bffd0b 	ldhu	r2,-12(fp)
    f8d4:	18800d1e 	bne	r3,r2,f90c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f8d8:	e0bff383 	ldbu	r2,-50(fp)
    f8dc:	10800058 	cmpnei	r2,r2,1
    f8e0:	10000d1e 	bne	r2,zero,f918 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    f8e4:	e0bffc17 	ldw	r2,-16(fp)
    f8e8:	1080020b 	ldhu	r2,8(r2)
    f8ec:	1007883a 	mov	r3,r2
    f8f0:	e0bff30b 	ldhu	r2,-52(fp)
    f8f4:	0084303a 	nor	r2,zero,r2
    f8f8:	1884703a 	and	r2,r3,r2
    f8fc:	1007883a 	mov	r3,r2
    f900:	e0bffc17 	ldw	r2,-16(fp)
    f904:	10c0020d 	sth	r3,8(r2)
    f908:	00000306 	br	f918 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f90c:	e0bfff17 	ldw	r2,-4(fp)
    f910:	00c01c04 	movi	r3,112
    f914:	10c00005 	stb	r3,0(r2)
    f918:	e0bff417 	ldw	r2,-48(fp)
    f91c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f920:	e0bff717 	ldw	r2,-36(fp)
    f924:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f928:	00005e06 	br	faa4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10c0020b 	ldhu	r3,8(r2)
    f934:	e0bffd0b 	ldhu	r2,-12(fp)
    f938:	1884703a 	and	r2,r3,r2
    f93c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    f940:	e0bff30b 	ldhu	r2,-52(fp)
    f944:	10000d26 	beq	r2,zero,f97c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f948:	e0bff383 	ldbu	r2,-50(fp)
    f94c:	10800058 	cmpnei	r2,r2,1
    f950:	10000d1e 	bne	r2,zero,f988 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    f954:	e0bffc17 	ldw	r2,-16(fp)
    f958:	1080020b 	ldhu	r2,8(r2)
    f95c:	1007883a 	mov	r3,r2
    f960:	e0bff30b 	ldhu	r2,-52(fp)
    f964:	0084303a 	nor	r2,zero,r2
    f968:	1884703a 	and	r2,r3,r2
    f96c:	1007883a 	mov	r3,r2
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10c0020d 	sth	r3,8(r2)
    f978:	00000306 	br	f988 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f97c:	e0bfff17 	ldw	r2,-4(fp)
    f980:	00c01c04 	movi	r3,112
    f984:	10c00005 	stb	r3,0(r2)
    f988:	e0bff417 	ldw	r2,-48(fp)
    f98c:	e0bff815 	stw	r2,-32(fp)
    f990:	e0bff817 	ldw	r2,-32(fp)
    f994:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f998:	00004206 	br	faa4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    f99c:	e0bffc17 	ldw	r2,-16(fp)
    f9a0:	1080020b 	ldhu	r2,8(r2)
    f9a4:	0084303a 	nor	r2,zero,r2
    f9a8:	1007883a 	mov	r3,r2
    f9ac:	e0bffd0b 	ldhu	r2,-12(fp)
    f9b0:	1884703a 	and	r2,r3,r2
    f9b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f9b8:	e0fff30b 	ldhu	r3,-52(fp)
    f9bc:	e0bffd0b 	ldhu	r2,-12(fp)
    f9c0:	18800b1e 	bne	r3,r2,f9f0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f9c4:	e0bff383 	ldbu	r2,-50(fp)
    f9c8:	10800058 	cmpnei	r2,r2,1
    f9cc:	10000b1e 	bne	r2,zero,f9fc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    f9d0:	e0bffc17 	ldw	r2,-16(fp)
    f9d4:	10c0020b 	ldhu	r3,8(r2)
    f9d8:	e0bff30b 	ldhu	r2,-52(fp)
    f9dc:	1884b03a 	or	r2,r3,r2
    f9e0:	1007883a 	mov	r3,r2
    f9e4:	e0bffc17 	ldw	r2,-16(fp)
    f9e8:	10c0020d 	sth	r3,8(r2)
    f9ec:	00000306 	br	f9fc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	00c01c04 	movi	r3,112
    f9f8:	10c00005 	stb	r3,0(r2)
    f9fc:	e0bff417 	ldw	r2,-48(fp)
    fa00:	e0bff915 	stw	r2,-28(fp)
    fa04:	e0bff917 	ldw	r2,-28(fp)
    fa08:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fa0c:	00002506 	br	faa4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    fa10:	e0bffc17 	ldw	r2,-16(fp)
    fa14:	1080020b 	ldhu	r2,8(r2)
    fa18:	0084303a 	nor	r2,zero,r2
    fa1c:	1007883a 	mov	r3,r2
    fa20:	e0bffd0b 	ldhu	r2,-12(fp)
    fa24:	1884703a 	and	r2,r3,r2
    fa28:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    fa2c:	e0bff30b 	ldhu	r2,-52(fp)
    fa30:	10000b26 	beq	r2,zero,fa60 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fa34:	e0bff383 	ldbu	r2,-50(fp)
    fa38:	10800058 	cmpnei	r2,r2,1
    fa3c:	10000b1e 	bne	r2,zero,fa6c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    fa40:	e0bffc17 	ldw	r2,-16(fp)
    fa44:	10c0020b 	ldhu	r3,8(r2)
    fa48:	e0bff30b 	ldhu	r2,-52(fp)
    fa4c:	1884b03a 	or	r2,r3,r2
    fa50:	1007883a 	mov	r3,r2
    fa54:	e0bffc17 	ldw	r2,-16(fp)
    fa58:	10c0020d 	sth	r3,8(r2)
    fa5c:	00000306 	br	fa6c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fa60:	e0bfff17 	ldw	r2,-4(fp)
    fa64:	00c01c04 	movi	r3,112
    fa68:	10c00005 	stb	r3,0(r2)
    fa6c:	e0bff417 	ldw	r2,-48(fp)
    fa70:	e0bffa15 	stw	r2,-24(fp)
    fa74:	e0bffa17 	ldw	r2,-24(fp)
    fa78:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fa7c:	00000906 	br	faa4 <OSFlagAccept+0x2f4>
    fa80:	e0bff417 	ldw	r2,-48(fp)
    fa84:	e0bffb15 	stw	r2,-20(fp)
    fa88:	e0bffb17 	ldw	r2,-20(fp)
    fa8c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    fa90:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    fa94:	e0bfff17 	ldw	r2,-4(fp)
    fa98:	00c01bc4 	movi	r3,111
    fa9c:	10c00005 	stb	r3,0(r2)
             break;
    faa0:	0001883a 	nop
    }
    return (flags_rdy);
    faa4:	e0bff30b 	ldhu	r2,-52(fp)
}
    faa8:	e037883a 	mov	sp,fp
    faac:	df000017 	ldw	fp,0(sp)
    fab0:	dec00104 	addi	sp,sp,4
    fab4:	f800283a 	ret

0000fab8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    fab8:	defff804 	addi	sp,sp,-32
    fabc:	df000715 	stw	fp,28(sp)
    fac0:	df000704 	addi	fp,sp,28
    fac4:	2005883a 	mov	r2,r4
    fac8:	e17fff15 	stw	r5,-4(fp)
    facc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    fad0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    fad4:	e0bfff17 	ldw	r2,-4(fp)
    fad8:	1000021e 	bne	r2,zero,fae4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    fadc:	0005883a 	mov	r2,zero
    fae0:	00003b06 	br	fbd0 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    fae4:	008000b4 	movhi	r2,2
    fae8:	10b89704 	addi	r2,r2,-7588
    faec:	10800003 	ldbu	r2,0(r2)
    faf0:	10803fcc 	andi	r2,r2,255
    faf4:	10000526 	beq	r2,zero,fb0c <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    faf8:	e0bfff17 	ldw	r2,-4(fp)
    fafc:	00c00404 	movi	r3,16
    fb00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    fb04:	0005883a 	mov	r2,zero
    fb08:	00003106 	br	fbd0 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb0c:	0005303a 	rdctl	r2,status
    fb10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb14:	e0fffb17 	ldw	r3,-20(fp)
    fb18:	00bfff84 	movi	r2,-2
    fb1c:	1884703a 	and	r2,r3,r2
    fb20:	1001703a 	wrctl	status,r2
  
  return context;
    fb24:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    fb28:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    fb2c:	008000b4 	movhi	r2,2
    fb30:	10b89a04 	addi	r2,r2,-7576
    fb34:	10800017 	ldw	r2,0(r2)
    fb38:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    fb3c:	e0bffa17 	ldw	r2,-24(fp)
    fb40:	10001b26 	beq	r2,zero,fbb0 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    fb44:	008000b4 	movhi	r2,2
    fb48:	10b89a04 	addi	r2,r2,-7576
    fb4c:	10800017 	ldw	r2,0(r2)
    fb50:	10c00117 	ldw	r3,4(r2)
    fb54:	008000b4 	movhi	r2,2
    fb58:	10b89a04 	addi	r2,r2,-7576
    fb5c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    fb60:	e0bffa17 	ldw	r2,-24(fp)
    fb64:	00c00144 	movi	r3,5
    fb68:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    fb6c:	e0bffa17 	ldw	r2,-24(fp)
    fb70:	e0fffe0b 	ldhu	r3,-8(fp)
    fb74:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    fb78:	e0bffa17 	ldw	r2,-24(fp)
    fb7c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    fb80:	e0bffa17 	ldw	r2,-24(fp)
    fb84:	00c00fc4 	movi	r3,63
    fb88:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    fb8c:	e0bffa17 	ldw	r2,-24(fp)
    fb90:	100002c5 	stb	zero,11(r2)
    fb94:	e0bff917 	ldw	r2,-28(fp)
    fb98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb9c:	e0bffc17 	ldw	r2,-16(fp)
    fba0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	10000005 	stb	zero,0(r2)
    fbac:	00000706 	br	fbcc <OSFlagCreate+0x114>
    fbb0:	e0bff917 	ldw	r2,-28(fp)
    fbb4:	e0bffd15 	stw	r2,-12(fp)
    fbb8:	e0bffd17 	ldw	r2,-12(fp)
    fbbc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    fbc0:	e0bfff17 	ldw	r2,-4(fp)
    fbc4:	00c01c84 	movi	r3,114
    fbc8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    fbcc:	e0bffa17 	ldw	r2,-24(fp)
}
    fbd0:	e037883a 	mov	sp,fp
    fbd4:	df000017 	ldw	fp,0(sp)
    fbd8:	dec00104 	addi	sp,sp,4
    fbdc:	f800283a 	ret

0000fbe0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    fbe0:	defff204 	addi	sp,sp,-56
    fbe4:	dfc00d15 	stw	ra,52(sp)
    fbe8:	df000c15 	stw	fp,48(sp)
    fbec:	df000c04 	addi	fp,sp,48
    fbf0:	e13ffd15 	stw	r4,-12(fp)
    fbf4:	2805883a 	mov	r2,r5
    fbf8:	e1bfff15 	stw	r6,-4(fp)
    fbfc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fc00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fc04:	e0bfff17 	ldw	r2,-4(fp)
    fc08:	1000021e 	bne	r2,zero,fc14 <OSFlagDel+0x34>
        return (pgrp);
    fc0c:	e0bffd17 	ldw	r2,-12(fp)
    fc10:	00008a06 	br	fe3c <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fc14:	e0bffd17 	ldw	r2,-12(fp)
    fc18:	1000051e 	bne	r2,zero,fc30 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fc1c:	e0bfff17 	ldw	r2,-4(fp)
    fc20:	00c01b84 	movi	r3,110
    fc24:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    fc28:	e0bffd17 	ldw	r2,-12(fp)
    fc2c:	00008306 	br	fe3c <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    fc30:	008000b4 	movhi	r2,2
    fc34:	10b89704 	addi	r2,r2,-7588
    fc38:	10800003 	ldbu	r2,0(r2)
    fc3c:	10803fcc 	andi	r2,r2,255
    fc40:	10000526 	beq	r2,zero,fc58 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    fc44:	e0bfff17 	ldw	r2,-4(fp)
    fc48:	00c003c4 	movi	r3,15
    fc4c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    fc50:	e0bffd17 	ldw	r2,-12(fp)
    fc54:	00007906 	br	fe3c <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    fc58:	e0bffd17 	ldw	r2,-12(fp)
    fc5c:	10800003 	ldbu	r2,0(r2)
    fc60:	10803fcc 	andi	r2,r2,255
    fc64:	10800160 	cmpeqi	r2,r2,5
    fc68:	1000051e 	bne	r2,zero,fc80 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    fc6c:	e0bfff17 	ldw	r2,-4(fp)
    fc70:	00c00044 	movi	r3,1
    fc74:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    fc78:	e0bffd17 	ldw	r2,-12(fp)
    fc7c:	00006f06 	br	fe3c <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc80:	0005303a 	rdctl	r2,status
    fc84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc88:	e0fff817 	ldw	r3,-32(fp)
    fc8c:	00bfff84 	movi	r2,-2
    fc90:	1884703a 	and	r2,r3,r2
    fc94:	1001703a 	wrctl	status,r2
  
  return context;
    fc98:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    fc9c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    fca0:	e0bffd17 	ldw	r2,-12(fp)
    fca4:	10800117 	ldw	r2,4(r2)
    fca8:	10000326 	beq	r2,zero,fcb8 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    fcac:	00800044 	movi	r2,1
    fcb0:	e0bff405 	stb	r2,-48(fp)
    fcb4:	00000106 	br	fcbc <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    fcb8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    fcbc:	e0bffe03 	ldbu	r2,-8(fp)
    fcc0:	10000326 	beq	r2,zero,fcd0 <OSFlagDel+0xf0>
    fcc4:	10800060 	cmpeqi	r2,r2,1
    fcc8:	1000271e 	bne	r2,zero,fd68 <OSFlagDel+0x188>
    fccc:	00005006 	br	fe10 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    fcd0:	e0bff403 	ldbu	r2,-48(fp)
    fcd4:	10001a1e 	bne	r2,zero,fd40 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    fcd8:	e0bffd17 	ldw	r2,-12(fp)
    fcdc:	00c00fc4 	movi	r3,63
    fce0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    fce4:	e0bffd17 	ldw	r2,-12(fp)
    fce8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    fcec:	e0bffd17 	ldw	r2,-12(fp)
    fcf0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    fcf4:	008000b4 	movhi	r2,2
    fcf8:	10b89a04 	addi	r2,r2,-7576
    fcfc:	10c00017 	ldw	r3,0(r2)
    fd00:	e0bffd17 	ldw	r2,-12(fp)
    fd04:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    fd08:	e0bffd17 	ldw	r2,-12(fp)
    fd0c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    fd10:	008000b4 	movhi	r2,2
    fd14:	10b89a04 	addi	r2,r2,-7576
    fd18:	e0fffd17 	ldw	r3,-12(fp)
    fd1c:	10c00015 	stw	r3,0(r2)
    fd20:	e0bff717 	ldw	r2,-36(fp)
    fd24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd28:	e0bff917 	ldw	r2,-28(fp)
    fd2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    fd30:	e0bfff17 	ldw	r2,-4(fp)
    fd34:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    fd38:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    fd3c:	00003e06 	br	fe38 <OSFlagDel+0x258>
    fd40:	e0bff717 	ldw	r2,-36(fp)
    fd44:	e0bffa15 	stw	r2,-24(fp)
    fd48:	e0bffa17 	ldw	r2,-24(fp)
    fd4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    fd50:	e0bfff17 	ldw	r2,-4(fp)
    fd54:	00c01244 	movi	r3,73
    fd58:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    fd5c:	e0bffd17 	ldw	r2,-12(fp)
    fd60:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    fd64:	00003406 	br	fe38 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    fd68:	e0bffd17 	ldw	r2,-12(fp)
    fd6c:	10800117 	ldw	r2,4(r2)
    fd70:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    fd74:	00000606 	br	fd90 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    fd78:	e13ff517 	ldw	r4,-44(fp)
    fd7c:	000b883a 	mov	r5,zero
    fd80:	0010e1c0 	call	10e1c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    fd84:	e0bff517 	ldw	r2,-44(fp)
    fd88:	10800017 	ldw	r2,0(r2)
    fd8c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    fd90:	e0bff517 	ldw	r2,-44(fp)
    fd94:	103ff81e 	bne	r2,zero,fd78 <__alt_mem_Flash_flash_data+0xf400fd78>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    fd98:	e0bffd17 	ldw	r2,-12(fp)
    fd9c:	00c00fc4 	movi	r3,63
    fda0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    fda4:	e0bffd17 	ldw	r2,-12(fp)
    fda8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    fdac:	e0bffd17 	ldw	r2,-12(fp)
    fdb0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    fdb4:	008000b4 	movhi	r2,2
    fdb8:	10b89a04 	addi	r2,r2,-7576
    fdbc:	10c00017 	ldw	r3,0(r2)
    fdc0:	e0bffd17 	ldw	r2,-12(fp)
    fdc4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    fdc8:	e0bffd17 	ldw	r2,-12(fp)
    fdcc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    fdd0:	008000b4 	movhi	r2,2
    fdd4:	10b89a04 	addi	r2,r2,-7576
    fdd8:	e0fffd17 	ldw	r3,-12(fp)
    fddc:	10c00015 	stw	r3,0(r2)
    fde0:	e0bff717 	ldw	r2,-36(fp)
    fde4:	e0bffb15 	stw	r2,-20(fp)
    fde8:	e0bffb17 	ldw	r2,-20(fp)
    fdec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    fdf0:	e0bff403 	ldbu	r2,-48(fp)
    fdf4:	10800058 	cmpnei	r2,r2,1
    fdf8:	1000011e 	bne	r2,zero,fe00 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    fdfc:	000ef4c0 	call	ef4c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    fe00:	e0bfff17 	ldw	r2,-4(fp)
    fe04:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    fe08:	e03ff615 	stw	zero,-40(fp)
             break;
    fe0c:	00000a06 	br	fe38 <OSFlagDel+0x258>
    fe10:	e0bff717 	ldw	r2,-36(fp)
    fe14:	e0bffc15 	stw	r2,-16(fp)
    fe18:	e0bffc17 	ldw	r2,-16(fp)
    fe1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    fe20:	e0bfff17 	ldw	r2,-4(fp)
    fe24:	00c001c4 	movi	r3,7
    fe28:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    fe2c:	e0bffd17 	ldw	r2,-12(fp)
    fe30:	e0bff615 	stw	r2,-40(fp)
             break;
    fe34:	0001883a 	nop
    }
    return (pgrp_return);
    fe38:	e0bff617 	ldw	r2,-40(fp)
}
    fe3c:	e037883a 	mov	sp,fp
    fe40:	dfc00117 	ldw	ra,4(sp)
    fe44:	df000017 	ldw	fp,0(sp)
    fe48:	dec00204 	addi	sp,sp,8
    fe4c:	f800283a 	ret

0000fe50 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    fe50:	defff604 	addi	sp,sp,-40
    fe54:	dfc00915 	stw	ra,36(sp)
    fe58:	df000815 	stw	fp,32(sp)
    fe5c:	df000804 	addi	fp,sp,32
    fe60:	e13ffd15 	stw	r4,-12(fp)
    fe64:	e17ffe15 	stw	r5,-8(fp)
    fe68:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fe6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fe70:	e0bfff17 	ldw	r2,-4(fp)
    fe74:	1000021e 	bne	r2,zero,fe80 <OSFlagNameGet+0x30>
        return (0);
    fe78:	0005883a 	mov	r2,zero
    fe7c:	00003b06 	br	ff6c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    fe80:	e0bffd17 	ldw	r2,-12(fp)
    fe84:	1000051e 	bne	r2,zero,fe9c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fe88:	e0bfff17 	ldw	r2,-4(fp)
    fe8c:	00c01b84 	movi	r3,110
    fe90:	10c00005 	stb	r3,0(r2)
        return (0);
    fe94:	0005883a 	mov	r2,zero
    fe98:	00003406 	br	ff6c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fe9c:	e0bffe17 	ldw	r2,-8(fp)
    fea0:	1000051e 	bne	r2,zero,feb8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	00c00304 	movi	r3,12
    feac:	10c00005 	stb	r3,0(r2)
        return (0);
    feb0:	0005883a 	mov	r2,zero
    feb4:	00002d06 	br	ff6c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    feb8:	008000b4 	movhi	r2,2
    febc:	10b89704 	addi	r2,r2,-7588
    fec0:	10800003 	ldbu	r2,0(r2)
    fec4:	10803fcc 	andi	r2,r2,255
    fec8:	10000526 	beq	r2,zero,fee0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    fecc:	e0bfff17 	ldw	r2,-4(fp)
    fed0:	00c00444 	movi	r3,17
    fed4:	10c00005 	stb	r3,0(r2)
        return (0);
    fed8:	0005883a 	mov	r2,zero
    fedc:	00002306 	br	ff6c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fee0:	0005303a 	rdctl	r2,status
    fee4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fee8:	e0fffa17 	ldw	r3,-24(fp)
    feec:	00bfff84 	movi	r2,-2
    fef0:	1884703a 	and	r2,r3,r2
    fef4:	1001703a 	wrctl	status,r2
  
  return context;
    fef8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    fefc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    ff00:	e0bffd17 	ldw	r2,-12(fp)
    ff04:	10800003 	ldbu	r2,0(r2)
    ff08:	10803fcc 	andi	r2,r2,255
    ff0c:	10800160 	cmpeqi	r2,r2,5
    ff10:	1000091e 	bne	r2,zero,ff38 <OSFlagNameGet+0xe8>
    ff14:	e0bff817 	ldw	r2,-32(fp)
    ff18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff1c:	e0bffb17 	ldw	r2,-20(fp)
    ff20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    ff24:	e0bfff17 	ldw	r2,-4(fp)
    ff28:	00c00044 	movi	r3,1
    ff2c:	10c00005 	stb	r3,0(r2)
        return (0);
    ff30:	0005883a 	mov	r2,zero
    ff34:	00000d06 	br	ff6c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    ff38:	e0bffd17 	ldw	r2,-12(fp)
    ff3c:	10800284 	addi	r2,r2,10
    ff40:	e13ffe17 	ldw	r4,-8(fp)
    ff44:	100b883a 	mov	r5,r2
    ff48:	000f0880 	call	f088 <OS_StrCopy>
    ff4c:	e0bff905 	stb	r2,-28(fp)
    ff50:	e0bff817 	ldw	r2,-32(fp)
    ff54:	e0bffc15 	stw	r2,-16(fp)
    ff58:	e0bffc17 	ldw	r2,-16(fp)
    ff5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    ff60:	e0bfff17 	ldw	r2,-4(fp)
    ff64:	10000005 	stb	zero,0(r2)
    return (len);
    ff68:	e0bff903 	ldbu	r2,-28(fp)
}
    ff6c:	e037883a 	mov	sp,fp
    ff70:	dfc00117 	ldw	ra,4(sp)
    ff74:	df000017 	ldw	fp,0(sp)
    ff78:	dec00204 	addi	sp,sp,8
    ff7c:	f800283a 	ret

0000ff80 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    ff80:	defff504 	addi	sp,sp,-44
    ff84:	dfc00a15 	stw	ra,40(sp)
    ff88:	df000915 	stw	fp,36(sp)
    ff8c:	df000904 	addi	fp,sp,36
    ff90:	e13ffd15 	stw	r4,-12(fp)
    ff94:	e17ffe15 	stw	r5,-8(fp)
    ff98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ff9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ffa0:	e0bfff17 	ldw	r2,-4(fp)
    ffa4:	1000011e 	bne	r2,zero,ffac <OSFlagNameSet+0x2c>
        return;
    ffa8:	00004406 	br	100bc <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    ffac:	e0bffd17 	ldw	r2,-12(fp)
    ffb0:	1000041e 	bne	r2,zero,ffc4 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    ffb4:	e0bfff17 	ldw	r2,-4(fp)
    ffb8:	00c01b84 	movi	r3,110
    ffbc:	10c00005 	stb	r3,0(r2)
        return;
    ffc0:	00003e06 	br	100bc <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    ffc4:	e0bffe17 	ldw	r2,-8(fp)
    ffc8:	1000041e 	bne	r2,zero,ffdc <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    ffcc:	e0bfff17 	ldw	r2,-4(fp)
    ffd0:	00c00304 	movi	r3,12
    ffd4:	10c00005 	stb	r3,0(r2)
        return;
    ffd8:	00003806 	br	100bc <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ffdc:	008000b4 	movhi	r2,2
    ffe0:	10b89704 	addi	r2,r2,-7588
    ffe4:	10800003 	ldbu	r2,0(r2)
    ffe8:	10803fcc 	andi	r2,r2,255
    ffec:	10000426 	beq	r2,zero,10000 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    fff0:	e0bfff17 	ldw	r2,-4(fp)
    fff4:	00c00484 	movi	r3,18
    fff8:	10c00005 	stb	r3,0(r2)
        return;
    fffc:	00002f06 	br	100bc <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10000:	0005303a 	rdctl	r2,status
   10004:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10008:	e0fff917 	ldw	r3,-28(fp)
   1000c:	00bfff84 	movi	r2,-2
   10010:	1884703a 	and	r2,r3,r2
   10014:	1001703a 	wrctl	status,r2
  
  return context;
   10018:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1001c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10020:	e0bffd17 	ldw	r2,-12(fp)
   10024:	10800003 	ldbu	r2,0(r2)
   10028:	10803fcc 	andi	r2,r2,255
   1002c:	10800160 	cmpeqi	r2,r2,5
   10030:	1000081e 	bne	r2,zero,10054 <OSFlagNameSet+0xd4>
   10034:	e0bff717 	ldw	r2,-36(fp)
   10038:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1003c:	e0bffa17 	ldw	r2,-24(fp)
   10040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10044:	e0bfff17 	ldw	r2,-4(fp)
   10048:	00c00044 	movi	r3,1
   1004c:	10c00005 	stb	r3,0(r2)
        return;
   10050:	00001a06 	br	100bc <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10054:	e13ffe17 	ldw	r4,-8(fp)
   10058:	000f0fc0 	call	f0fc <OS_StrLen>
   1005c:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10060:	e0bff803 	ldbu	r2,-32(fp)
   10064:	10800830 	cmpltui	r2,r2,32
   10068:	1000081e 	bne	r2,zero,1008c <OSFlagNameSet+0x10c>
   1006c:	e0bff717 	ldw	r2,-36(fp)
   10070:	e0bffb15 	stw	r2,-20(fp)
   10074:	e0bffb17 	ldw	r2,-20(fp)
   10078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1007c:	e0bfff17 	ldw	r2,-4(fp)
   10080:	00c01cc4 	movi	r3,115
   10084:	10c00005 	stb	r3,0(r2)
        return;
   10088:	00000c06 	br	100bc <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1008c:	e0bffd17 	ldw	r2,-12(fp)
   10090:	10800284 	addi	r2,r2,10
   10094:	1009883a 	mov	r4,r2
   10098:	e17ffe17 	ldw	r5,-8(fp)
   1009c:	000f0880 	call	f088 <OS_StrCopy>
   100a0:	e0bff717 	ldw	r2,-36(fp)
   100a4:	e0bffc15 	stw	r2,-16(fp)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   100b0:	e0bfff17 	ldw	r2,-4(fp)
   100b4:	10000005 	stb	zero,0(r2)
    return;
   100b8:	0001883a 	nop
}
   100bc:	e037883a 	mov	sp,fp
   100c0:	dfc00117 	ldw	ra,4(sp)
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   100d0:	deffe204 	addi	sp,sp,-120
   100d4:	dfc01d15 	stw	ra,116(sp)
   100d8:	df001c15 	stw	fp,112(sp)
   100dc:	df001c04 	addi	fp,sp,112
   100e0:	e13ffc15 	stw	r4,-16(fp)
   100e4:	2809883a 	mov	r4,r5
   100e8:	3007883a 	mov	r3,r6
   100ec:	3805883a 	mov	r2,r7
   100f0:	e13ffd0d 	sth	r4,-12(fp)
   100f4:	e0fffe05 	stb	r3,-8(fp)
   100f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   100fc:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10100:	e0800217 	ldw	r2,8(fp)
   10104:	1000021e 	bne	r2,zero,10110 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10108:	0005883a 	mov	r2,zero
   1010c:	00016706 	br	106ac <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10110:	e0bffc17 	ldw	r2,-16(fp)
   10114:	1000051e 	bne	r2,zero,1012c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10118:	e0800217 	ldw	r2,8(fp)
   1011c:	00c01b84 	movi	r3,110
   10120:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10124:	0005883a 	mov	r2,zero
   10128:	00016006 	br	106ac <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1012c:	008000b4 	movhi	r2,2
   10130:	10b89704 	addi	r2,r2,-7588
   10134:	10800003 	ldbu	r2,0(r2)
   10138:	10803fcc 	andi	r2,r2,255
   1013c:	10000526 	beq	r2,zero,10154 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10140:	e0800217 	ldw	r2,8(fp)
   10144:	00c00084 	movi	r3,2
   10148:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1014c:	0005883a 	mov	r2,zero
   10150:	00015606 	br	106ac <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10154:	008000b4 	movhi	r2,2
   10158:	10b88904 	addi	r2,r2,-7644
   1015c:	10800003 	ldbu	r2,0(r2)
   10160:	10803fcc 	andi	r2,r2,255
   10164:	10000526 	beq	r2,zero,1017c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10168:	e0800217 	ldw	r2,8(fp)
   1016c:	00c00344 	movi	r3,13
   10170:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10174:	0005883a 	mov	r2,zero
   10178:	00014c06 	br	106ac <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	10800003 	ldbu	r2,0(r2)
   10184:	10803fcc 	andi	r2,r2,255
   10188:	10800160 	cmpeqi	r2,r2,5
   1018c:	1000051e 	bne	r2,zero,101a4 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   10190:	e0800217 	ldw	r2,8(fp)
   10194:	00c00044 	movi	r3,1
   10198:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1019c:	0005883a 	mov	r2,zero
   101a0:	00014206 	br	106ac <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   101a4:	e0fffe03 	ldbu	r3,-8(fp)
   101a8:	00bfe004 	movi	r2,-128
   101ac:	1884703a 	and	r2,r3,r2
   101b0:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   101b4:	e0bfe703 	ldbu	r2,-100(fp)
   101b8:	10000626 	beq	r2,zero,101d4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   101bc:	e0bffe03 	ldbu	r2,-8(fp)
   101c0:	10801fcc 	andi	r2,r2,127
   101c4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   101c8:	00800044 	movi	r2,1
   101cc:	e0bfe505 	stb	r2,-108(fp)
   101d0:	00000106 	br	101d8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   101d4:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101d8:	0005303a 	rdctl	r2,status
   101dc:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101e0:	e0ffe917 	ldw	r3,-92(fp)
   101e4:	00bfff84 	movi	r2,-2
   101e8:	1884703a 	and	r2,r3,r2
   101ec:	1001703a 	wrctl	status,r2
  
  return context;
   101f0:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   101f4:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   101f8:	e0bffe03 	ldbu	r2,-8(fp)
   101fc:	10c00060 	cmpeqi	r3,r2,1
   10200:	1800921e 	bne	r3,zero,1044c <OSFlagPend+0x37c>
   10204:	10c00088 	cmpgei	r3,r2,2
   10208:	1800021e 	bne	r3,zero,10214 <OSFlagPend+0x144>
   1020c:	10006126 	beq	r2,zero,10394 <OSFlagPend+0x2c4>
   10210:	0000bb06 	br	10500 <OSFlagPend+0x430>
   10214:	10c000a0 	cmpeqi	r3,r2,2
   10218:	1800031e 	bne	r3,zero,10228 <OSFlagPend+0x158>
   1021c:	108000e0 	cmpeqi	r2,r2,3
   10220:	10002f1e 	bne	r2,zero,102e0 <OSFlagPend+0x210>
   10224:	0000b606 	br	10500 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10228:	e0bffc17 	ldw	r2,-16(fp)
   1022c:	10c0020b 	ldhu	r3,8(r2)
   10230:	e0bffd0b 	ldhu	r2,-12(fp)
   10234:	1884703a 	and	r2,r3,r2
   10238:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1023c:	e0ffe78b 	ldhu	r3,-98(fp)
   10240:	e0bffd0b 	ldhu	r2,-12(fp)
   10244:	1880191e 	bne	r3,r2,102ac <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10248:	e0bfe503 	ldbu	r2,-108(fp)
   1024c:	10800058 	cmpnei	r2,r2,1
   10250:	1000091e 	bne	r2,zero,10278 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10254:	e0bffc17 	ldw	r2,-16(fp)
   10258:	1080020b 	ldhu	r2,8(r2)
   1025c:	1007883a 	mov	r3,r2
   10260:	e0bfe78b 	ldhu	r2,-98(fp)
   10264:	0084303a 	nor	r2,zero,r2
   10268:	1884703a 	and	r2,r3,r2
   1026c:	1007883a 	mov	r3,r2
   10270:	e0bffc17 	ldw	r2,-16(fp)
   10274:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10278:	008000b4 	movhi	r2,2
   1027c:	10b89804 	addi	r2,r2,-7584
   10280:	10800017 	ldw	r2,0(r2)
   10284:	e0ffe78b 	ldhu	r3,-98(fp)
   10288:	10c00b0d 	sth	r3,44(r2)
   1028c:	e0bfe617 	ldw	r2,-104(fp)
   10290:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10294:	e0bfea17 	ldw	r2,-88(fp)
   10298:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1029c:	e0800217 	ldw	r2,8(fp)
   102a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   102a4:	e0bfe78b 	ldhu	r2,-98(fp)
   102a8:	00010006 	br	106ac <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   102ac:	e1bffd0b 	ldhu	r6,-12(fp)
   102b0:	e0fffe03 	ldbu	r3,-8(fp)
   102b4:	e0bfff0b 	ldhu	r2,-4(fp)
   102b8:	e17ff704 	addi	r5,fp,-36
   102bc:	d8800015 	stw	r2,0(sp)
   102c0:	e13ffc17 	ldw	r4,-16(fp)
   102c4:	180f883a 	mov	r7,r3
   102c8:	0010b740 	call	10b74 <OS_FlagBlock>
   102cc:	e0bfe617 	ldw	r2,-104(fp)
   102d0:	e0bfeb15 	stw	r2,-84(fp)
   102d4:	e0bfeb17 	ldw	r2,-84(fp)
   102d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   102dc:	00009206 	br	10528 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   102e0:	e0bffc17 	ldw	r2,-16(fp)
   102e4:	10c0020b 	ldhu	r3,8(r2)
   102e8:	e0bffd0b 	ldhu	r2,-12(fp)
   102ec:	1884703a 	and	r2,r3,r2
   102f0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   102f4:	e0bfe78b 	ldhu	r2,-98(fp)
   102f8:	10001926 	beq	r2,zero,10360 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   102fc:	e0bfe503 	ldbu	r2,-108(fp)
   10300:	10800058 	cmpnei	r2,r2,1
   10304:	1000091e 	bne	r2,zero,1032c <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10308:	e0bffc17 	ldw	r2,-16(fp)
   1030c:	1080020b 	ldhu	r2,8(r2)
   10310:	1007883a 	mov	r3,r2
   10314:	e0bfe78b 	ldhu	r2,-98(fp)
   10318:	0084303a 	nor	r2,zero,r2
   1031c:	1884703a 	and	r2,r3,r2
   10320:	1007883a 	mov	r3,r2
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1032c:	008000b4 	movhi	r2,2
   10330:	10b89804 	addi	r2,r2,-7584
   10334:	10800017 	ldw	r2,0(r2)
   10338:	e0ffe78b 	ldhu	r3,-98(fp)
   1033c:	10c00b0d 	sth	r3,44(r2)
   10340:	e0bfe617 	ldw	r2,-104(fp)
   10344:	e0bfec15 	stw	r2,-80(fp)
   10348:	e0bfec17 	ldw	r2,-80(fp)
   1034c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10350:	e0800217 	ldw	r2,8(fp)
   10354:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10358:	e0bfe78b 	ldhu	r2,-98(fp)
   1035c:	0000d306 	br	106ac <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10360:	e1bffd0b 	ldhu	r6,-12(fp)
   10364:	e0fffe03 	ldbu	r3,-8(fp)
   10368:	e0bfff0b 	ldhu	r2,-4(fp)
   1036c:	e17ff704 	addi	r5,fp,-36
   10370:	d8800015 	stw	r2,0(sp)
   10374:	e13ffc17 	ldw	r4,-16(fp)
   10378:	180f883a 	mov	r7,r3
   1037c:	0010b740 	call	10b74 <OS_FlagBlock>
   10380:	e0bfe617 	ldw	r2,-104(fp)
   10384:	e0bfed15 	stw	r2,-76(fp)
   10388:	e0bfed17 	ldw	r2,-76(fp)
   1038c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10390:	00006506 	br	10528 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	1080020b 	ldhu	r2,8(r2)
   1039c:	0084303a 	nor	r2,zero,r2
   103a0:	1007883a 	mov	r3,r2
   103a4:	e0bffd0b 	ldhu	r2,-12(fp)
   103a8:	1884703a 	and	r2,r3,r2
   103ac:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   103b0:	e0ffe78b 	ldhu	r3,-98(fp)
   103b4:	e0bffd0b 	ldhu	r2,-12(fp)
   103b8:	1880171e 	bne	r3,r2,10418 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   103bc:	e0bfe503 	ldbu	r2,-108(fp)
   103c0:	10800058 	cmpnei	r2,r2,1
   103c4:	1000071e 	bne	r2,zero,103e4 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   103c8:	e0bffc17 	ldw	r2,-16(fp)
   103cc:	10c0020b 	ldhu	r3,8(r2)
   103d0:	e0bfe78b 	ldhu	r2,-98(fp)
   103d4:	1884b03a 	or	r2,r3,r2
   103d8:	1007883a 	mov	r3,r2
   103dc:	e0bffc17 	ldw	r2,-16(fp)
   103e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   103e4:	008000b4 	movhi	r2,2
   103e8:	10b89804 	addi	r2,r2,-7584
   103ec:	10800017 	ldw	r2,0(r2)
   103f0:	e0ffe78b 	ldhu	r3,-98(fp)
   103f4:	10c00b0d 	sth	r3,44(r2)
   103f8:	e0bfe617 	ldw	r2,-104(fp)
   103fc:	e0bfee15 	stw	r2,-72(fp)
   10400:	e0bfee17 	ldw	r2,-72(fp)
   10404:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10408:	e0800217 	ldw	r2,8(fp)
   1040c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10410:	e0bfe78b 	ldhu	r2,-98(fp)
   10414:	0000a506 	br	106ac <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10418:	e1bffd0b 	ldhu	r6,-12(fp)
   1041c:	e0fffe03 	ldbu	r3,-8(fp)
   10420:	e0bfff0b 	ldhu	r2,-4(fp)
   10424:	e17ff704 	addi	r5,fp,-36
   10428:	d8800015 	stw	r2,0(sp)
   1042c:	e13ffc17 	ldw	r4,-16(fp)
   10430:	180f883a 	mov	r7,r3
   10434:	0010b740 	call	10b74 <OS_FlagBlock>
   10438:	e0bfe617 	ldw	r2,-104(fp)
   1043c:	e0bfef15 	stw	r2,-68(fp)
   10440:	e0bfef17 	ldw	r2,-68(fp)
   10444:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10448:	00003706 	br	10528 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1044c:	e0bffc17 	ldw	r2,-16(fp)
   10450:	1080020b 	ldhu	r2,8(r2)
   10454:	0084303a 	nor	r2,zero,r2
   10458:	1007883a 	mov	r3,r2
   1045c:	e0bffd0b 	ldhu	r2,-12(fp)
   10460:	1884703a 	and	r2,r3,r2
   10464:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10468:	e0bfe78b 	ldhu	r2,-98(fp)
   1046c:	10001726 	beq	r2,zero,104cc <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10470:	e0bfe503 	ldbu	r2,-108(fp)
   10474:	10800058 	cmpnei	r2,r2,1
   10478:	1000071e 	bne	r2,zero,10498 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1047c:	e0bffc17 	ldw	r2,-16(fp)
   10480:	10c0020b 	ldhu	r3,8(r2)
   10484:	e0bfe78b 	ldhu	r2,-98(fp)
   10488:	1884b03a 	or	r2,r3,r2
   1048c:	1007883a 	mov	r3,r2
   10490:	e0bffc17 	ldw	r2,-16(fp)
   10494:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10498:	008000b4 	movhi	r2,2
   1049c:	10b89804 	addi	r2,r2,-7584
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	e0ffe78b 	ldhu	r3,-98(fp)
   104a8:	10c00b0d 	sth	r3,44(r2)
   104ac:	e0bfe617 	ldw	r2,-104(fp)
   104b0:	e0bff015 	stw	r2,-64(fp)
   104b4:	e0bff017 	ldw	r2,-64(fp)
   104b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   104bc:	e0800217 	ldw	r2,8(fp)
   104c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   104c4:	e0bfe78b 	ldhu	r2,-98(fp)
   104c8:	00007806 	br	106ac <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   104cc:	e1bffd0b 	ldhu	r6,-12(fp)
   104d0:	e0fffe03 	ldbu	r3,-8(fp)
   104d4:	e0bfff0b 	ldhu	r2,-4(fp)
   104d8:	e17ff704 	addi	r5,fp,-36
   104dc:	d8800015 	stw	r2,0(sp)
   104e0:	e13ffc17 	ldw	r4,-16(fp)
   104e4:	180f883a 	mov	r7,r3
   104e8:	0010b740 	call	10b74 <OS_FlagBlock>
   104ec:	e0bfe617 	ldw	r2,-104(fp)
   104f0:	e0bff115 	stw	r2,-60(fp)
   104f4:	e0bff117 	ldw	r2,-60(fp)
   104f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   104fc:	00000a06 	br	10528 <OSFlagPend+0x458>
   10500:	e0bfe617 	ldw	r2,-104(fp)
   10504:	e0bff215 	stw	r2,-56(fp)
   10508:	e0bff217 	ldw	r2,-56(fp)
   1050c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10510:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10514:	e0800217 	ldw	r2,8(fp)
   10518:	00c01bc4 	movi	r3,111
   1051c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10520:	e0bfe78b 	ldhu	r2,-98(fp)
   10524:	00006106 	br	106ac <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10528:	000ef4c0 	call	ef4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1052c:	0005303a 	rdctl	r2,status
   10530:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10534:	e0fff317 	ldw	r3,-52(fp)
   10538:	00bfff84 	movi	r2,-2
   1053c:	1884703a 	and	r2,r3,r2
   10540:	1001703a 	wrctl	status,r2
  
  return context;
   10544:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   10548:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1054c:	008000b4 	movhi	r2,2
   10550:	10b89804 	addi	r2,r2,-7584
   10554:	10800017 	ldw	r2,0(r2)
   10558:	10800c43 	ldbu	r2,49(r2)
   1055c:	10803fcc 	andi	r2,r2,255
   10560:	10002226 	beq	r2,zero,105ec <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10564:	008000b4 	movhi	r2,2
   10568:	10b89804 	addi	r2,r2,-7584
   1056c:	10800017 	ldw	r2,0(r2)
   10570:	10800c43 	ldbu	r2,49(r2)
   10574:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10578:	008000b4 	movhi	r2,2
   1057c:	10b89804 	addi	r2,r2,-7584
   10580:	10800017 	ldw	r2,0(r2)
   10584:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10588:	e0bff704 	addi	r2,fp,-36
   1058c:	1009883a 	mov	r4,r2
   10590:	0010f2c0 	call	10f2c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10594:	008000b4 	movhi	r2,2
   10598:	10b89804 	addi	r2,r2,-7584
   1059c:	10800017 	ldw	r2,0(r2)
   105a0:	10000c05 	stb	zero,48(r2)
   105a4:	e0bfe617 	ldw	r2,-104(fp)
   105a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105ac:	e0bff417 	ldw	r2,-48(fp)
   105b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   105b4:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   105b8:	e0bfe803 	ldbu	r2,-96(fp)
   105bc:	108000a0 	cmpeqi	r2,r2,2
   105c0:	10000426 	beq	r2,zero,105d4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   105c4:	e0800217 	ldw	r2,8(fp)
   105c8:	00c00384 	movi	r3,14
   105cc:	10c00005 	stb	r3,0(r2)
                 break;
   105d0:	00000406 	br	105e4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   105d4:	e0800217 	ldw	r2,8(fp)
   105d8:	00c00284 	movi	r3,10
   105dc:	10c00005 	stb	r3,0(r2)
                 break;
   105e0:	0001883a 	nop
        }
        return (flags_rdy);
   105e4:	e0bfe78b 	ldhu	r2,-98(fp)
   105e8:	00003006 	br	106ac <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   105ec:	008000b4 	movhi	r2,2
   105f0:	10b89804 	addi	r2,r2,-7584
   105f4:	10800017 	ldw	r2,0(r2)
   105f8:	10800b0b 	ldhu	r2,44(r2)
   105fc:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10600:	e0bfe503 	ldbu	r2,-108(fp)
   10604:	10800058 	cmpnei	r2,r2,1
   10608:	1000211e 	bne	r2,zero,10690 <OSFlagPend+0x5c0>
        switch (wait_type) {
   1060c:	e0bffe03 	ldbu	r2,-8(fp)
   10610:	10001616 	blt	r2,zero,1066c <OSFlagPend+0x59c>
   10614:	10c00090 	cmplti	r3,r2,2
   10618:	18000c1e 	bne	r3,zero,1064c <OSFlagPend+0x57c>
   1061c:	10800108 	cmpgei	r2,r2,4
   10620:	1000121e 	bne	r2,zero,1066c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10624:	e0bffc17 	ldw	r2,-16(fp)
   10628:	1080020b 	ldhu	r2,8(r2)
   1062c:	1007883a 	mov	r3,r2
   10630:	e0bfe78b 	ldhu	r2,-98(fp)
   10634:	0084303a 	nor	r2,zero,r2
   10638:	1884703a 	and	r2,r3,r2
   1063c:	1007883a 	mov	r3,r2
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	10c0020d 	sth	r3,8(r2)
                 break;
   10648:	00001106 	br	10690 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1064c:	e0bffc17 	ldw	r2,-16(fp)
   10650:	10c0020b 	ldhu	r3,8(r2)
   10654:	e0bfe78b 	ldhu	r2,-98(fp)
   10658:	1884b03a 	or	r2,r3,r2
   1065c:	1007883a 	mov	r3,r2
   10660:	e0bffc17 	ldw	r2,-16(fp)
   10664:	10c0020d 	sth	r3,8(r2)
                 break;
   10668:	00000906 	br	10690 <OSFlagPend+0x5c0>
   1066c:	e0bfe617 	ldw	r2,-104(fp)
   10670:	e0bff515 	stw	r2,-44(fp)
   10674:	e0bff517 	ldw	r2,-44(fp)
   10678:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1067c:	e0800217 	ldw	r2,8(fp)
   10680:	00c01bc4 	movi	r3,111
   10684:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10688:	0005883a 	mov	r2,zero
   1068c:	00000706 	br	106ac <OSFlagPend+0x5dc>
   10690:	e0bfe617 	ldw	r2,-104(fp)
   10694:	e0bff615 	stw	r2,-40(fp)
   10698:	e0bff617 	ldw	r2,-40(fp)
   1069c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   106a0:	e0800217 	ldw	r2,8(fp)
   106a4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   106a8:	e0bfe78b 	ldhu	r2,-98(fp)
}
   106ac:	e037883a 	mov	sp,fp
   106b0:	dfc00117 	ldw	ra,4(sp)
   106b4:	df000017 	ldw	fp,0(sp)
   106b8:	dec00204 	addi	sp,sp,8
   106bc:	f800283a 	ret

000106c0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   106c0:	defffb04 	addi	sp,sp,-20
   106c4:	df000415 	stw	fp,16(sp)
   106c8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   106cc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106d0:	0005303a 	rdctl	r2,status
   106d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d8:	e0fffe17 	ldw	r3,-8(fp)
   106dc:	00bfff84 	movi	r2,-2
   106e0:	1884703a 	and	r2,r3,r2
   106e4:	1001703a 	wrctl	status,r2
  
  return context;
   106e8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   106ec:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   106f0:	008000b4 	movhi	r2,2
   106f4:	10b89804 	addi	r2,r2,-7584
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	10800b0b 	ldhu	r2,44(r2)
   10700:	e0bffd0d 	sth	r2,-12(fp)
   10704:	e0bffc17 	ldw	r2,-16(fp)
   10708:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1070c:	e0bfff17 	ldw	r2,-4(fp)
   10710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10714:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10718:	e037883a 	mov	sp,fp
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00104 	addi	sp,sp,4
   10724:	f800283a 	ret

00010728 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10728:	deffef04 	addi	sp,sp,-68
   1072c:	dfc01015 	stw	ra,64(sp)
   10730:	df000f15 	stw	fp,60(sp)
   10734:	df000f04 	addi	fp,sp,60
   10738:	e13ffc15 	stw	r4,-16(fp)
   1073c:	2807883a 	mov	r3,r5
   10740:	3005883a 	mov	r2,r6
   10744:	e1ffff15 	stw	r7,-4(fp)
   10748:	e0fffd0d 	sth	r3,-12(fp)
   1074c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10750:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10754:	e0bfff17 	ldw	r2,-4(fp)
   10758:	1000021e 	bne	r2,zero,10764 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1075c:	0005883a 	mov	r2,zero
   10760:	0000ce06 	br	10a9c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10764:	e0bffc17 	ldw	r2,-16(fp)
   10768:	1000051e 	bne	r2,zero,10780 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	00c01b84 	movi	r3,110
   10774:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10778:	0005883a 	mov	r2,zero
   1077c:	0000c706 	br	10a9c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10780:	e0bffc17 	ldw	r2,-16(fp)
   10784:	10800003 	ldbu	r2,0(r2)
   10788:	10803fcc 	andi	r2,r2,255
   1078c:	10800160 	cmpeqi	r2,r2,5
   10790:	1000051e 	bne	r2,zero,107a8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10794:	e0bfff17 	ldw	r2,-4(fp)
   10798:	00c00044 	movi	r3,1
   1079c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107a0:	0005883a 	mov	r2,zero
   107a4:	0000bd06 	br	10a9c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107a8:	0005303a 	rdctl	r2,status
   107ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107b0:	e0fff617 	ldw	r3,-40(fp)
   107b4:	00bfff84 	movi	r2,-2
   107b8:	1884703a 	and	r2,r3,r2
   107bc:	1001703a 	wrctl	status,r2
  
  return context;
   107c0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   107c4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   107c8:	e0bffe03 	ldbu	r2,-8(fp)
   107cc:	10000326 	beq	r2,zero,107dc <OSFlagPost+0xb4>
   107d0:	10800060 	cmpeqi	r2,r2,1
   107d4:	10000b1e 	bne	r2,zero,10804 <OSFlagPost+0xdc>
   107d8:	00001206 	br	10824 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   107dc:	e0bffc17 	ldw	r2,-16(fp)
   107e0:	1080020b 	ldhu	r2,8(r2)
   107e4:	1007883a 	mov	r3,r2
   107e8:	e0bffd0b 	ldhu	r2,-12(fp)
   107ec:	0084303a 	nor	r2,zero,r2
   107f0:	1884703a 	and	r2,r3,r2
   107f4:	1007883a 	mov	r3,r2
   107f8:	e0bffc17 	ldw	r2,-16(fp)
   107fc:	10c0020d 	sth	r3,8(r2)
             break;
   10800:	00001106 	br	10848 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10804:	e0bffc17 	ldw	r2,-16(fp)
   10808:	10c0020b 	ldhu	r3,8(r2)
   1080c:	e0bffd0b 	ldhu	r2,-12(fp)
   10810:	1884b03a 	or	r2,r3,r2
   10814:	1007883a 	mov	r3,r2
   10818:	e0bffc17 	ldw	r2,-16(fp)
   1081c:	10c0020d 	sth	r3,8(r2)
             break;
   10820:	00000906 	br	10848 <OSFlagPost+0x120>
   10824:	e0bff317 	ldw	r2,-52(fp)
   10828:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1082c:	e0bff717 	ldw	r2,-36(fp)
   10830:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10834:	e0bfff17 	ldw	r2,-4(fp)
   10838:	00c01c44 	movi	r3,113
   1083c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10840:	0005883a 	mov	r2,zero
   10844:	00009506 	br	10a9c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10848:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1084c:	e0bffc17 	ldw	r2,-16(fp)
   10850:	10800117 	ldw	r2,4(r2)
   10854:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10858:	00007406 	br	10a2c <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   1085c:	e0bff117 	ldw	r2,-60(fp)
   10860:	10800483 	ldbu	r2,18(r2)
   10864:	10803fcc 	andi	r2,r2,255
   10868:	10c00060 	cmpeqi	r3,r2,1
   1086c:	18004d1e 	bne	r3,zero,109a4 <OSFlagPost+0x27c>
   10870:	10c00088 	cmpgei	r3,r2,2
   10874:	1800021e 	bne	r3,zero,10880 <OSFlagPost+0x158>
   10878:	10003126 	beq	r2,zero,10940 <OSFlagPost+0x218>
   1087c:	00005f06 	br	109fc <OSFlagPost+0x2d4>
   10880:	10c000a0 	cmpeqi	r3,r2,2
   10884:	1800031e 	bne	r3,zero,10894 <OSFlagPost+0x16c>
   10888:	108000e0 	cmpeqi	r2,r2,3
   1088c:	1000181e 	bne	r2,zero,108f0 <OSFlagPost+0x1c8>
   10890:	00005a06 	br	109fc <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10894:	e0bffc17 	ldw	r2,-16(fp)
   10898:	10c0020b 	ldhu	r3,8(r2)
   1089c:	e0bff117 	ldw	r2,-60(fp)
   108a0:	1080040b 	ldhu	r2,16(r2)
   108a4:	1884703a 	and	r2,r3,r2
   108a8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   108ac:	e0bff117 	ldw	r2,-60(fp)
   108b0:	1080040b 	ldhu	r2,16(r2)
   108b4:	10ffffcc 	andi	r3,r2,65535
   108b8:	e0bff40b 	ldhu	r2,-48(fp)
   108bc:	18800b1e 	bne	r3,r2,108ec <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   108c0:	e0bff40b 	ldhu	r2,-48(fp)
   108c4:	e13ff117 	ldw	r4,-60(fp)
   108c8:	100b883a 	mov	r5,r2
   108cc:	0010e1c0 	call	10e1c <OS_FlagTaskRdy>
   108d0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   108d4:	e0bff483 	ldbu	r2,-46(fp)
   108d8:	10800058 	cmpnei	r2,r2,1
   108dc:	1000031e 	bne	r2,zero,108ec <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   108e0:	00800044 	movi	r2,1
   108e4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   108e8:	00004d06 	br	10a20 <OSFlagPost+0x2f8>
   108ec:	00004c06 	br	10a20 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   108f0:	e0bffc17 	ldw	r2,-16(fp)
   108f4:	10c0020b 	ldhu	r3,8(r2)
   108f8:	e0bff117 	ldw	r2,-60(fp)
   108fc:	1080040b 	ldhu	r2,16(r2)
   10900:	1884703a 	and	r2,r3,r2
   10904:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10908:	e0bff40b 	ldhu	r2,-48(fp)
   1090c:	10000b26 	beq	r2,zero,1093c <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10910:	e0bff40b 	ldhu	r2,-48(fp)
   10914:	e13ff117 	ldw	r4,-60(fp)
   10918:	100b883a 	mov	r5,r2
   1091c:	0010e1c0 	call	10e1c <OS_FlagTaskRdy>
   10920:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10924:	e0bff483 	ldbu	r2,-46(fp)
   10928:	10800058 	cmpnei	r2,r2,1
   1092c:	1000031e 	bne	r2,zero,1093c <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10930:	00800044 	movi	r2,1
   10934:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10938:	00003906 	br	10a20 <OSFlagPost+0x2f8>
   1093c:	00003806 	br	10a20 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10940:	e0bffc17 	ldw	r2,-16(fp)
   10944:	1080020b 	ldhu	r2,8(r2)
   10948:	0084303a 	nor	r2,zero,r2
   1094c:	1007883a 	mov	r3,r2
   10950:	e0bff117 	ldw	r2,-60(fp)
   10954:	1080040b 	ldhu	r2,16(r2)
   10958:	1884703a 	and	r2,r3,r2
   1095c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10960:	e0bff117 	ldw	r2,-60(fp)
   10964:	1080040b 	ldhu	r2,16(r2)
   10968:	10ffffcc 	andi	r3,r2,65535
   1096c:	e0bff40b 	ldhu	r2,-48(fp)
   10970:	18800b1e 	bne	r3,r2,109a0 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10974:	e0bff40b 	ldhu	r2,-48(fp)
   10978:	e13ff117 	ldw	r4,-60(fp)
   1097c:	100b883a 	mov	r5,r2
   10980:	0010e1c0 	call	10e1c <OS_FlagTaskRdy>
   10984:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10988:	e0bff483 	ldbu	r2,-46(fp)
   1098c:	10800058 	cmpnei	r2,r2,1
   10990:	1000031e 	bne	r2,zero,109a0 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10994:	00800044 	movi	r2,1
   10998:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1099c:	00002006 	br	10a20 <OSFlagPost+0x2f8>
   109a0:	00001f06 	br	10a20 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   109a4:	e0bffc17 	ldw	r2,-16(fp)
   109a8:	1080020b 	ldhu	r2,8(r2)
   109ac:	0084303a 	nor	r2,zero,r2
   109b0:	1007883a 	mov	r3,r2
   109b4:	e0bff117 	ldw	r2,-60(fp)
   109b8:	1080040b 	ldhu	r2,16(r2)
   109bc:	1884703a 	and	r2,r3,r2
   109c0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   109c4:	e0bff40b 	ldhu	r2,-48(fp)
   109c8:	10000b26 	beq	r2,zero,109f8 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   109cc:	e0bff40b 	ldhu	r2,-48(fp)
   109d0:	e13ff117 	ldw	r4,-60(fp)
   109d4:	100b883a 	mov	r5,r2
   109d8:	0010e1c0 	call	10e1c <OS_FlagTaskRdy>
   109dc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   109e0:	e0bff483 	ldbu	r2,-46(fp)
   109e4:	10800058 	cmpnei	r2,r2,1
   109e8:	1000031e 	bne	r2,zero,109f8 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   109ec:	00800044 	movi	r2,1
   109f0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   109f4:	00000a06 	br	10a20 <OSFlagPost+0x2f8>
   109f8:	00000906 	br	10a20 <OSFlagPost+0x2f8>
   109fc:	e0bff317 	ldw	r2,-52(fp)
   10a00:	e0bff815 	stw	r2,-32(fp)
   10a04:	e0bff817 	ldw	r2,-32(fp)
   10a08:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10a0c:	e0bfff17 	ldw	r2,-4(fp)
   10a10:	00c01bc4 	movi	r3,111
   10a14:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10a18:	0005883a 	mov	r2,zero
   10a1c:	00001f06 	br	10a9c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   10a20:	e0bff117 	ldw	r2,-60(fp)
   10a24:	10800017 	ldw	r2,0(r2)
   10a28:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10a2c:	e0bff117 	ldw	r2,-60(fp)
   10a30:	103f8a1e 	bne	r2,zero,1085c <__alt_mem_Flash_flash_data+0xf401085c>
   10a34:	e0bff317 	ldw	r2,-52(fp)
   10a38:	e0bff915 	stw	r2,-28(fp)
   10a3c:	e0bff917 	ldw	r2,-28(fp)
   10a40:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   10a44:	e0bff203 	ldbu	r2,-56(fp)
   10a48:	10800058 	cmpnei	r2,r2,1
   10a4c:	1000011e 	bne	r2,zero,10a54 <OSFlagPost+0x32c>
        OS_Sched();
   10a50:	000ef4c0 	call	ef4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a54:	0005303a 	rdctl	r2,status
   10a58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a5c:	e0fffa17 	ldw	r3,-24(fp)
   10a60:	00bfff84 	movi	r2,-2
   10a64:	1884703a 	and	r2,r3,r2
   10a68:	1001703a 	wrctl	status,r2
  
  return context;
   10a6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10a70:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   10a74:	e0bffc17 	ldw	r2,-16(fp)
   10a78:	1080020b 	ldhu	r2,8(r2)
   10a7c:	e0bff50d 	sth	r2,-44(fp)
   10a80:	e0bff317 	ldw	r2,-52(fp)
   10a84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a88:	e0bffb17 	ldw	r2,-20(fp)
   10a8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   10a90:	e0bfff17 	ldw	r2,-4(fp)
   10a94:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   10a98:	e0bff50b 	ldhu	r2,-44(fp)
}
   10a9c:	e037883a 	mov	sp,fp
   10aa0:	dfc00117 	ldw	ra,4(sp)
   10aa4:	df000017 	ldw	fp,0(sp)
   10aa8:	dec00204 	addi	sp,sp,8
   10aac:	f800283a 	ret

00010ab0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   10ab0:	defff904 	addi	sp,sp,-28
   10ab4:	df000615 	stw	fp,24(sp)
   10ab8:	df000604 	addi	fp,sp,24
   10abc:	e13ffe15 	stw	r4,-8(fp)
   10ac0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   10ac4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	1000021e 	bne	r2,zero,10ad8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   10ad0:	0005883a 	mov	r2,zero
   10ad4:	00002306 	br	10b64 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   10ad8:	e0bffe17 	ldw	r2,-8(fp)
   10adc:	1000051e 	bne	r2,zero,10af4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10ae0:	e0bfff17 	ldw	r2,-4(fp)
   10ae4:	00c01b84 	movi	r3,110
   10ae8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10aec:	0005883a 	mov	r2,zero
   10af0:	00001c06 	br	10b64 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	10800003 	ldbu	r2,0(r2)
   10afc:	10803fcc 	andi	r2,r2,255
   10b00:	10800160 	cmpeqi	r2,r2,5
   10b04:	1000051e 	bne	r2,zero,10b1c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   10b08:	e0bfff17 	ldw	r2,-4(fp)
   10b0c:	00c00044 	movi	r3,1
   10b10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10b14:	0005883a 	mov	r2,zero
   10b18:	00001206 	br	10b64 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b1c:	0005303a 	rdctl	r2,status
   10b20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b24:	e0fffc17 	ldw	r3,-16(fp)
   10b28:	00bfff84 	movi	r2,-2
   10b2c:	1884703a 	and	r2,r3,r2
   10b30:	1001703a 	wrctl	status,r2
  
  return context;
   10b34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10b38:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   10b3c:	e0bffe17 	ldw	r2,-8(fp)
   10b40:	1080020b 	ldhu	r2,8(r2)
   10b44:	e0bffb0d 	sth	r2,-20(fp)
   10b48:	e0bffa17 	ldw	r2,-24(fp)
   10b4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b50:	e0bffd17 	ldw	r2,-12(fp)
   10b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10b58:	e0bfff17 	ldw	r2,-4(fp)
   10b5c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   10b60:	e0bffb0b 	ldhu	r2,-20(fp)
}
   10b64:	e037883a 	mov	sp,fp
   10b68:	df000017 	ldw	fp,0(sp)
   10b6c:	dec00104 	addi	sp,sp,4
   10b70:	f800283a 	ret

00010b74 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   10b74:	defff804 	addi	sp,sp,-32
   10b78:	df000715 	stw	fp,28(sp)
   10b7c:	df000704 	addi	fp,sp,28
   10b80:	e13ffb15 	stw	r4,-20(fp)
   10b84:	e17ffc15 	stw	r5,-16(fp)
   10b88:	3009883a 	mov	r4,r6
   10b8c:	3807883a 	mov	r3,r7
   10b90:	e0800117 	ldw	r2,4(fp)
   10b94:	e13ffd0d 	sth	r4,-12(fp)
   10b98:	e0fffe05 	stb	r3,-8(fp)
   10b9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   10ba0:	008000b4 	movhi	r2,2
   10ba4:	10b89804 	addi	r2,r2,-7584
   10ba8:	10c00017 	ldw	r3,0(r2)
   10bac:	008000b4 	movhi	r2,2
   10bb0:	10b89804 	addi	r2,r2,-7584
   10bb4:	10800017 	ldw	r2,0(r2)
   10bb8:	10800c03 	ldbu	r2,48(r2)
   10bbc:	10800814 	ori	r2,r2,32
   10bc0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   10bc4:	008000b4 	movhi	r2,2
   10bc8:	10b89804 	addi	r2,r2,-7584
   10bcc:	10800017 	ldw	r2,0(r2)
   10bd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   10bd4:	008000b4 	movhi	r2,2
   10bd8:	10b89804 	addi	r2,r2,-7584
   10bdc:	10800017 	ldw	r2,0(r2)
   10be0:	e0ffff0b 	ldhu	r3,-4(fp)
   10be4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   10be8:	008000b4 	movhi	r2,2
   10bec:	10b89804 	addi	r2,r2,-7584
   10bf0:	10800017 	ldw	r2,0(r2)
   10bf4:	e0fffc17 	ldw	r3,-16(fp)
   10bf8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   10bfc:	e0bffc17 	ldw	r2,-16(fp)
   10c00:	e0fffd0b 	ldhu	r3,-12(fp)
   10c04:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   10c08:	e0bffc17 	ldw	r2,-16(fp)
   10c0c:	e0fffe03 	ldbu	r3,-8(fp)
   10c10:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   10c14:	008000b4 	movhi	r2,2
   10c18:	10b89804 	addi	r2,r2,-7584
   10c1c:	10c00017 	ldw	r3,0(r2)
   10c20:	e0bffc17 	ldw	r2,-16(fp)
   10c24:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   10c28:	e0bffb17 	ldw	r2,-20(fp)
   10c2c:	10c00117 	ldw	r3,4(r2)
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   10c38:	e0bffc17 	ldw	r2,-16(fp)
   10c3c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   10c40:	e0bffc17 	ldw	r2,-16(fp)
   10c44:	e0fffb17 	ldw	r3,-20(fp)
   10c48:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10c4c:	e0bffb17 	ldw	r2,-20(fp)
   10c50:	10800117 	ldw	r2,4(r2)
   10c54:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   10c58:	e0bff917 	ldw	r2,-28(fp)
   10c5c:	10000326 	beq	r2,zero,10c6c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   10c60:	e0bff917 	ldw	r2,-28(fp)
   10c64:	e0fffc17 	ldw	r3,-16(fp)
   10c68:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   10c6c:	e0bffb17 	ldw	r2,-20(fp)
   10c70:	e0fffc17 	ldw	r3,-16(fp)
   10c74:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   10c78:	008000b4 	movhi	r2,2
   10c7c:	10b89804 	addi	r2,r2,-7584
   10c80:	10800017 	ldw	r2,0(r2)
   10c84:	10800d03 	ldbu	r2,52(r2)
   10c88:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   10c8c:	e0fffa03 	ldbu	r3,-24(fp)
   10c90:	e13ffa03 	ldbu	r4,-24(fp)
   10c94:	008000b4 	movhi	r2,2
   10c98:	10b89544 	addi	r2,r2,-7595
   10c9c:	1105883a 	add	r2,r2,r4
   10ca0:	10800003 	ldbu	r2,0(r2)
   10ca4:	1009883a 	mov	r4,r2
   10ca8:	008000b4 	movhi	r2,2
   10cac:	10b89804 	addi	r2,r2,-7584
   10cb0:	10800017 	ldw	r2,0(r2)
   10cb4:	10800d43 	ldbu	r2,53(r2)
   10cb8:	0084303a 	nor	r2,zero,r2
   10cbc:	2084703a 	and	r2,r4,r2
   10cc0:	1009883a 	mov	r4,r2
   10cc4:	008000b4 	movhi	r2,2
   10cc8:	10b89544 	addi	r2,r2,-7595
   10ccc:	10c5883a 	add	r2,r2,r3
   10cd0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   10cd4:	e0fffa03 	ldbu	r3,-24(fp)
   10cd8:	008000b4 	movhi	r2,2
   10cdc:	10b89544 	addi	r2,r2,-7595
   10ce0:	10c5883a 	add	r2,r2,r3
   10ce4:	10800003 	ldbu	r2,0(r2)
   10ce8:	10803fcc 	andi	r2,r2,255
   10cec:	10000e1e 	bne	r2,zero,10d28 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   10cf0:	008000b4 	movhi	r2,2
   10cf4:	10b89804 	addi	r2,r2,-7584
   10cf8:	10800017 	ldw	r2,0(r2)
   10cfc:	10800d83 	ldbu	r2,54(r2)
   10d00:	0084303a 	nor	r2,zero,r2
   10d04:	1007883a 	mov	r3,r2
   10d08:	008000b4 	movhi	r2,2
   10d0c:	10b89504 	addi	r2,r2,-7596
   10d10:	10800003 	ldbu	r2,0(r2)
   10d14:	1884703a 	and	r2,r3,r2
   10d18:	1007883a 	mov	r3,r2
   10d1c:	008000b4 	movhi	r2,2
   10d20:	10b89504 	addi	r2,r2,-7596
   10d24:	10c00005 	stb	r3,0(r2)
    }
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   10d38:	defffb04 	addi	sp,sp,-20
   10d3c:	dfc00415 	stw	ra,16(sp)
   10d40:	df000315 	stw	fp,12(sp)
   10d44:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   10d48:	010000b4 	movhi	r4,2
   10d4c:	2108b604 	addi	r4,r4,8920
   10d50:	0140dc04 	movi	r5,880
   10d54:	000ee980 	call	ee98 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   10d58:	008000b4 	movhi	r2,2
   10d5c:	1088b604 	addi	r2,r2,8920
   10d60:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   10d64:	008000b4 	movhi	r2,2
   10d68:	1088c104 	addi	r2,r2,8964
   10d6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   10d70:	e03ffd0d 	sth	zero,-12(fp)
   10d74:	00001306 	br	10dc4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10d78:	e0bffe17 	ldw	r2,-8(fp)
   10d7c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   10d80:	e0bffe17 	ldw	r2,-8(fp)
   10d84:	e0ffff17 	ldw	r3,-4(fp)
   10d88:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   10d8c:	e0bffe17 	ldw	r2,-8(fp)
   10d90:	00c00fc4 	movi	r3,63
   10d94:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   10d98:	e0bffe17 	ldw	r2,-8(fp)
   10d9c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   10da0:	e0bffe17 	ldw	r2,-8(fp)
   10da4:	10800b04 	addi	r2,r2,44
   10da8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   10dac:	e0bfff17 	ldw	r2,-4(fp)
   10db0:	10800b04 	addi	r2,r2,44
   10db4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   10db8:	e0bffd0b 	ldhu	r2,-12(fp)
   10dbc:	10800044 	addi	r2,r2,1
   10dc0:	e0bffd0d 	sth	r2,-12(fp)
   10dc4:	e0bffd0b 	ldhu	r2,-12(fp)
   10dc8:	108004f0 	cmpltui	r2,r2,19
   10dcc:	103fea1e 	bne	r2,zero,10d78 <__alt_mem_Flash_flash_data+0xf4010d78>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10dd0:	e0bffe17 	ldw	r2,-8(fp)
   10dd4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   10de0:	e0bffe17 	ldw	r2,-8(fp)
   10de4:	00c00fc4 	movi	r3,63
   10de8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   10dec:	e0bffe17 	ldw	r2,-8(fp)
   10df0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   10df4:	008000b4 	movhi	r2,2
   10df8:	10b89a04 	addi	r2,r2,-7576
   10dfc:	00c000b4 	movhi	r3,2
   10e00:	18c8b604 	addi	r3,r3,8920
   10e04:	10c00015 	stw	r3,0(r2)
#endif
}
   10e08:	e037883a 	mov	sp,fp
   10e0c:	dfc00117 	ldw	ra,4(sp)
   10e10:	df000017 	ldw	fp,0(sp)
   10e14:	dec00204 	addi	sp,sp,8
   10e18:	f800283a 	ret

00010e1c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   10e1c:	defffa04 	addi	sp,sp,-24
   10e20:	dfc00515 	stw	ra,20(sp)
   10e24:	df000415 	stw	fp,16(sp)
   10e28:	df000404 	addi	fp,sp,16
   10e2c:	e13ffe15 	stw	r4,-8(fp)
   10e30:	2805883a 	mov	r2,r5
   10e34:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   10e38:	e0bffe17 	ldw	r2,-8(fp)
   10e3c:	10800217 	ldw	r2,8(r2)
   10e40:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   10e44:	e0bffd17 	ldw	r2,-12(fp)
   10e48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   10e4c:	e0bffd17 	ldw	r2,-12(fp)
   10e50:	e0ffff0b 	ldhu	r3,-4(fp)
   10e54:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   10e58:	e0bffd17 	ldw	r2,-12(fp)
   10e5c:	10c00c03 	ldbu	r3,48(r2)
   10e60:	00bff7c4 	movi	r2,-33
   10e64:	1884703a 	and	r2,r3,r2
   10e68:	1007883a 	mov	r3,r2
   10e6c:	e0bffd17 	ldw	r2,-12(fp)
   10e70:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   10e74:	e0bffd17 	ldw	r2,-12(fp)
   10e78:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   10e7c:	e0bffd17 	ldw	r2,-12(fp)
   10e80:	10800c03 	ldbu	r2,48(r2)
   10e84:	10803fcc 	andi	r2,r2,255
   10e88:	10001f1e 	bne	r2,zero,10f08 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	10c00d83 	ldbu	r3,54(r2)
   10e94:	008000b4 	movhi	r2,2
   10e98:	10b89504 	addi	r2,r2,-7596
   10e9c:	10800003 	ldbu	r2,0(r2)
   10ea0:	1884b03a 	or	r2,r3,r2
   10ea4:	1007883a 	mov	r3,r2
   10ea8:	008000b4 	movhi	r2,2
   10eac:	10b89504 	addi	r2,r2,-7596
   10eb0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10eb4:	e0bffd17 	ldw	r2,-12(fp)
   10eb8:	10800d03 	ldbu	r2,52(r2)
   10ebc:	10c03fcc 	andi	r3,r2,255
   10ec0:	e0bffd17 	ldw	r2,-12(fp)
   10ec4:	10800d03 	ldbu	r2,52(r2)
   10ec8:	11003fcc 	andi	r4,r2,255
   10ecc:	008000b4 	movhi	r2,2
   10ed0:	10b89544 	addi	r2,r2,-7595
   10ed4:	1105883a 	add	r2,r2,r4
   10ed8:	11000003 	ldbu	r4,0(r2)
   10edc:	e0bffd17 	ldw	r2,-12(fp)
   10ee0:	10800d43 	ldbu	r2,53(r2)
   10ee4:	2084b03a 	or	r2,r4,r2
   10ee8:	1009883a 	mov	r4,r2
   10eec:	008000b4 	movhi	r2,2
   10ef0:	10b89544 	addi	r2,r2,-7595
   10ef4:	10c5883a 	add	r2,r2,r3
   10ef8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   10efc:	00800044 	movi	r2,1
   10f00:	e0bffc05 	stb	r2,-16(fp)
   10f04:	00000106 	br	10f0c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   10f08:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   10f0c:	e13ffe17 	ldw	r4,-8(fp)
   10f10:	0010f2c0 	call	10f2c <OS_FlagUnlink>
    return (sched);
   10f14:	e0bffc03 	ldbu	r2,-16(fp)
}
   10f18:	e037883a 	mov	sp,fp
   10f1c:	dfc00117 	ldw	ra,4(sp)
   10f20:	df000017 	ldw	fp,0(sp)
   10f24:	dec00204 	addi	sp,sp,8
   10f28:	f800283a 	ret

00010f2c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   10f2c:	defffa04 	addi	sp,sp,-24
   10f30:	df000515 	stw	fp,20(sp)
   10f34:	df000504 	addi	fp,sp,20
   10f38:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   10f3c:	e0bfff17 	ldw	r2,-4(fp)
   10f40:	10800117 	ldw	r2,4(r2)
   10f44:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10800017 	ldw	r2,0(r2)
   10f50:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   10f54:	e0bffb17 	ldw	r2,-20(fp)
   10f58:	10000b1e 	bne	r2,zero,10f88 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   10f5c:	e0bfff17 	ldw	r2,-4(fp)
   10f60:	10800317 	ldw	r2,12(r2)
   10f64:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   10f68:	e0bffd17 	ldw	r2,-12(fp)
   10f6c:	e0fffc17 	ldw	r3,-16(fp)
   10f70:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   10f74:	e0bffc17 	ldw	r2,-16(fp)
   10f78:	10000b26 	beq	r2,zero,10fa8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   10f7c:	e0bffc17 	ldw	r2,-16(fp)
   10f80:	10000115 	stw	zero,4(r2)
   10f84:	00000806 	br	10fa8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   10f88:	e0bffb17 	ldw	r2,-20(fp)
   10f8c:	e0fffc17 	ldw	r3,-16(fp)
   10f90:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	10000326 	beq	r2,zero,10fa8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	e0fffb17 	ldw	r3,-20(fp)
   10fa4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	10800217 	ldw	r2,8(r2)
   10fb0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   10fb4:	e0bffe17 	ldw	r2,-8(fp)
   10fb8:	10000a15 	stw	zero,40(r2)
#endif
}
   10fbc:	e037883a 	mov	sp,fp
   10fc0:	df000017 	ldw	fp,0(sp)
   10fc4:	dec00104 	addi	sp,sp,4
   10fc8:	f800283a 	ret

00010fcc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   10fcc:	defff404 	addi	sp,sp,-48
   10fd0:	df000b15 	stw	fp,44(sp)
   10fd4:	df000b04 	addi	fp,sp,44
   10fd8:	e13ffc15 	stw	r4,-16(fp)
   10fdc:	e17ffd15 	stw	r5,-12(fp)
   10fe0:	e1bffe15 	stw	r6,-8(fp)
   10fe4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10fe8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   10fec:	e0bfff17 	ldw	r2,-4(fp)
   10ff0:	1000021e 	bne	r2,zero,10ffc <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   10ff4:	0005883a 	mov	r2,zero
   10ff8:	00006d06 	br	111b0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   10ffc:	e0bffc17 	ldw	r2,-16(fp)
   11000:	1000051e 	bne	r2,zero,11018 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11004:	e0bfff17 	ldw	r2,-4(fp)
   11008:	00c01884 	movi	r3,98
   1100c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11010:	0005883a 	mov	r2,zero
   11014:	00006606 	br	111b0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11018:	e0bffc17 	ldw	r2,-16(fp)
   1101c:	108000cc 	andi	r2,r2,3
   11020:	10000526 	beq	r2,zero,11038 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11024:	e0bfff17 	ldw	r2,-4(fp)
   11028:	00c01884 	movi	r3,98
   1102c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11030:	0005883a 	mov	r2,zero
   11034:	00005e06 	br	111b0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	108000a8 	cmpgeui	r2,r2,2
   11040:	1000051e 	bne	r2,zero,11058 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11044:	e0bfff17 	ldw	r2,-4(fp)
   11048:	00c016c4 	movi	r3,91
   1104c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11050:	0005883a 	mov	r2,zero
   11054:	00005606 	br	111b0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11058:	e0bffe17 	ldw	r2,-8(fp)
   1105c:	10800128 	cmpgeui	r2,r2,4
   11060:	1000051e 	bne	r2,zero,11078 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11064:	e0bfff17 	ldw	r2,-4(fp)
   11068:	00c01704 	movi	r3,92
   1106c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11070:	0005883a 	mov	r2,zero
   11074:	00004e06 	br	111b0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11078:	0005303a 	rdctl	r2,status
   1107c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11080:	e0fffa17 	ldw	r3,-24(fp)
   11084:	00bfff84 	movi	r2,-2
   11088:	1884703a 	and	r2,r3,r2
   1108c:	1001703a 	wrctl	status,r2
  
  return context;
   11090:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11094:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11098:	008000b4 	movhi	r2,2
   1109c:	10b89204 	addi	r2,r2,-7608
   110a0:	10800017 	ldw	r2,0(r2)
   110a4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   110a8:	008000b4 	movhi	r2,2
   110ac:	10b89204 	addi	r2,r2,-7608
   110b0:	10800017 	ldw	r2,0(r2)
   110b4:	10000726 	beq	r2,zero,110d4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   110b8:	008000b4 	movhi	r2,2
   110bc:	10b89204 	addi	r2,r2,-7608
   110c0:	10800017 	ldw	r2,0(r2)
   110c4:	10c00117 	ldw	r3,4(r2)
   110c8:	008000b4 	movhi	r2,2
   110cc:	10b89204 	addi	r2,r2,-7608
   110d0:	10c00015 	stw	r3,0(r2)
   110d4:	e0bff817 	ldw	r2,-32(fp)
   110d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110dc:	e0bffb17 	ldw	r2,-20(fp)
   110e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   110e4:	e0bff917 	ldw	r2,-28(fp)
   110e8:	1000051e 	bne	r2,zero,11100 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   110ec:	e0bfff17 	ldw	r2,-4(fp)
   110f0:	00c01684 	movi	r3,90
   110f4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   110f8:	0005883a 	mov	r2,zero
   110fc:	00002c06 	br	111b0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11108:	e0fffc17 	ldw	r3,-16(fp)
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	1885883a 	add	r2,r3,r2
   11114:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11118:	e03ff715 	stw	zero,-36(fp)
   1111c:	00000c06 	br	11150 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11120:	e0bff617 	ldw	r2,-40(fp)
   11124:	e0fff517 	ldw	r3,-44(fp)
   11128:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1112c:	e0bff517 	ldw	r2,-44(fp)
   11130:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11134:	e0fff517 	ldw	r3,-44(fp)
   11138:	e0bffe17 	ldw	r2,-8(fp)
   1113c:	1885883a 	add	r2,r3,r2
   11140:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11144:	e0bff717 	ldw	r2,-36(fp)
   11148:	10800044 	addi	r2,r2,1
   1114c:	e0bff715 	stw	r2,-36(fp)
   11150:	e0bffd17 	ldw	r2,-12(fp)
   11154:	10bfffc4 	addi	r2,r2,-1
   11158:	e0fff717 	ldw	r3,-36(fp)
   1115c:	18bff036 	bltu	r3,r2,11120 <__alt_mem_Flash_flash_data+0xf4011120>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11160:	e0bff617 	ldw	r2,-40(fp)
   11164:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11168:	e0bff917 	ldw	r2,-28(fp)
   1116c:	e0fffc17 	ldw	r3,-16(fp)
   11170:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11174:	e0bff917 	ldw	r2,-28(fp)
   11178:	e0fffc17 	ldw	r3,-16(fp)
   1117c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11180:	e0bff917 	ldw	r2,-28(fp)
   11184:	e0fffd17 	ldw	r3,-12(fp)
   11188:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1118c:	e0bff917 	ldw	r2,-28(fp)
   11190:	e0fffd17 	ldw	r3,-12(fp)
   11194:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11198:	e0bff917 	ldw	r2,-28(fp)
   1119c:	e0fffe17 	ldw	r3,-8(fp)
   111a0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   111a4:	e0bfff17 	ldw	r2,-4(fp)
   111a8:	10000005 	stb	zero,0(r2)
    return (pmem);
   111ac:	e0bff917 	ldw	r2,-28(fp)
}
   111b0:	e037883a 	mov	sp,fp
   111b4:	df000017 	ldw	fp,0(sp)
   111b8:	dec00104 	addi	sp,sp,4
   111bc:	f800283a 	ret

000111c0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   111c0:	defff804 	addi	sp,sp,-32
   111c4:	df000715 	stw	fp,28(sp)
   111c8:	df000704 	addi	fp,sp,28
   111cc:	e13ffe15 	stw	r4,-8(fp)
   111d0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   111d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   111d8:	e0bfff17 	ldw	r2,-4(fp)
   111dc:	1000021e 	bne	r2,zero,111e8 <OSMemGet+0x28>
        return ((void *)0);
   111e0:	0005883a 	mov	r2,zero
   111e4:	00002e06 	br	112a0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   111e8:	e0bffe17 	ldw	r2,-8(fp)
   111ec:	1000051e 	bne	r2,zero,11204 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   111f0:	e0bfff17 	ldw	r2,-4(fp)
   111f4:	00c01804 	movi	r3,96
   111f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   111fc:	0005883a 	mov	r2,zero
   11200:	00002706 	br	112a0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11204:	0005303a 	rdctl	r2,status
   11208:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1120c:	e0fffb17 	ldw	r3,-20(fp)
   11210:	00bfff84 	movi	r2,-2
   11214:	1884703a 	and	r2,r3,r2
   11218:	1001703a 	wrctl	status,r2
  
  return context;
   1121c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11220:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11224:	e0bffe17 	ldw	r2,-8(fp)
   11228:	10800417 	ldw	r2,16(r2)
   1122c:	10001426 	beq	r2,zero,11280 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11230:	e0bffe17 	ldw	r2,-8(fp)
   11234:	10800117 	ldw	r2,4(r2)
   11238:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1123c:	e0bffa17 	ldw	r2,-24(fp)
   11240:	10c00017 	ldw	r3,0(r2)
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1124c:	e0bffe17 	ldw	r2,-8(fp)
   11250:	10800417 	ldw	r2,16(r2)
   11254:	10ffffc4 	addi	r3,r2,-1
   11258:	e0bffe17 	ldw	r2,-8(fp)
   1125c:	10c00415 	stw	r3,16(r2)
   11260:	e0bff917 	ldw	r2,-28(fp)
   11264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11268:	e0bffc17 	ldw	r2,-16(fp)
   1126c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11278:	e0bffa17 	ldw	r2,-24(fp)
   1127c:	00000806 	br	112a0 <OSMemGet+0xe0>
   11280:	e0bff917 	ldw	r2,-28(fp)
   11284:	e0bffd15 	stw	r2,-12(fp)
   11288:	e0bffd17 	ldw	r2,-12(fp)
   1128c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11290:	e0bfff17 	ldw	r2,-4(fp)
   11294:	00c01744 	movi	r3,93
   11298:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1129c:	0005883a 	mov	r2,zero
}
   112a0:	e037883a 	mov	sp,fp
   112a4:	df000017 	ldw	fp,0(sp)
   112a8:	dec00104 	addi	sp,sp,4
   112ac:	f800283a 	ret

000112b0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   112b0:	defff704 	addi	sp,sp,-36
   112b4:	dfc00815 	stw	ra,32(sp)
   112b8:	df000715 	stw	fp,28(sp)
   112bc:	df000704 	addi	fp,sp,28
   112c0:	e13ffd15 	stw	r4,-12(fp)
   112c4:	e17ffe15 	stw	r5,-8(fp)
   112c8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   112cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   112d0:	e0bfff17 	ldw	r2,-4(fp)
   112d4:	1000021e 	bne	r2,zero,112e0 <OSMemNameGet+0x30>
        return (0);
   112d8:	0005883a 	mov	r2,zero
   112dc:	00002d06 	br	11394 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   112e0:	e0bffd17 	ldw	r2,-12(fp)
   112e4:	1000051e 	bne	r2,zero,112fc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   112e8:	e0bfff17 	ldw	r2,-4(fp)
   112ec:	00c01804 	movi	r3,96
   112f0:	10c00005 	stb	r3,0(r2)
        return (0);
   112f4:	0005883a 	mov	r2,zero
   112f8:	00002606 	br	11394 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   112fc:	e0bffe17 	ldw	r2,-8(fp)
   11300:	1000051e 	bne	r2,zero,11318 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11304:	e0bfff17 	ldw	r2,-4(fp)
   11308:	00c00304 	movi	r3,12
   1130c:	10c00005 	stb	r3,0(r2)
        return (0);
   11310:	0005883a 	mov	r2,zero
   11314:	00001f06 	br	11394 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11318:	008000b4 	movhi	r2,2
   1131c:	10b89704 	addi	r2,r2,-7588
   11320:	10800003 	ldbu	r2,0(r2)
   11324:	10803fcc 	andi	r2,r2,255
   11328:	10000526 	beq	r2,zero,11340 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1132c:	e0bfff17 	ldw	r2,-4(fp)
   11330:	00c00444 	movi	r3,17
   11334:	10c00005 	stb	r3,0(r2)
        return (0);
   11338:	0005883a 	mov	r2,zero
   1133c:	00001506 	br	11394 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11340:	0005303a 	rdctl	r2,status
   11344:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11348:	e0fffb17 	ldw	r3,-20(fp)
   1134c:	00bfff84 	movi	r2,-2
   11350:	1884703a 	and	r2,r3,r2
   11354:	1001703a 	wrctl	status,r2
  
  return context;
   11358:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1135c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11360:	e0bffd17 	ldw	r2,-12(fp)
   11364:	10800504 	addi	r2,r2,20
   11368:	e13ffe17 	ldw	r4,-8(fp)
   1136c:	100b883a 	mov	r5,r2
   11370:	000f0880 	call	f088 <OS_StrCopy>
   11374:	e0bffa05 	stb	r2,-24(fp)
   11378:	e0bff917 	ldw	r2,-28(fp)
   1137c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11380:	e0bffc17 	ldw	r2,-16(fp)
   11384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10000005 	stb	zero,0(r2)
    return (len);
   11390:	e0bffa03 	ldbu	r2,-24(fp)
}
   11394:	e037883a 	mov	sp,fp
   11398:	dfc00117 	ldw	ra,4(sp)
   1139c:	df000017 	ldw	fp,0(sp)
   113a0:	dec00204 	addi	sp,sp,8
   113a4:	f800283a 	ret

000113a8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   113a8:	defff604 	addi	sp,sp,-40
   113ac:	dfc00915 	stw	ra,36(sp)
   113b0:	df000815 	stw	fp,32(sp)
   113b4:	df000804 	addi	fp,sp,32
   113b8:	e13ffd15 	stw	r4,-12(fp)
   113bc:	e17ffe15 	stw	r5,-8(fp)
   113c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   113c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   113c8:	e0bfff17 	ldw	r2,-4(fp)
   113cc:	1000011e 	bne	r2,zero,113d4 <OSMemNameSet+0x2c>
        return;
   113d0:	00003606 	br	114ac <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   113d4:	e0bffd17 	ldw	r2,-12(fp)
   113d8:	1000041e 	bne	r2,zero,113ec <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   113dc:	e0bfff17 	ldw	r2,-4(fp)
   113e0:	00c01804 	movi	r3,96
   113e4:	10c00005 	stb	r3,0(r2)
        return;
   113e8:	00003006 	br	114ac <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   113ec:	e0bffe17 	ldw	r2,-8(fp)
   113f0:	1000041e 	bne	r2,zero,11404 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	00c00304 	movi	r3,12
   113fc:	10c00005 	stb	r3,0(r2)
        return;
   11400:	00002a06 	br	114ac <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11404:	008000b4 	movhi	r2,2
   11408:	10b89704 	addi	r2,r2,-7588
   1140c:	10800003 	ldbu	r2,0(r2)
   11410:	10803fcc 	andi	r2,r2,255
   11414:	10000426 	beq	r2,zero,11428 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   11418:	e0bfff17 	ldw	r2,-4(fp)
   1141c:	00c00484 	movi	r3,18
   11420:	10c00005 	stb	r3,0(r2)
        return;
   11424:	00002106 	br	114ac <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11428:	0005303a 	rdctl	r2,status
   1142c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11430:	e0fffa17 	ldw	r3,-24(fp)
   11434:	00bfff84 	movi	r2,-2
   11438:	1884703a 	and	r2,r3,r2
   1143c:	1001703a 	wrctl	status,r2
  
  return context;
   11440:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11444:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11448:	e13ffe17 	ldw	r4,-8(fp)
   1144c:	000f0fc0 	call	f0fc <OS_StrLen>
   11450:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11454:	e0bff903 	ldbu	r2,-28(fp)
   11458:	10800830 	cmpltui	r2,r2,32
   1145c:	1000081e 	bne	r2,zero,11480 <OSMemNameSet+0xd8>
   11460:	e0bff817 	ldw	r2,-32(fp)
   11464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11468:	e0bffb17 	ldw	r2,-20(fp)
   1146c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	00c018c4 	movi	r3,99
   11478:	10c00005 	stb	r3,0(r2)
        return;
   1147c:	00000b06 	br	114ac <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11480:	e0bffd17 	ldw	r2,-12(fp)
   11484:	10800504 	addi	r2,r2,20
   11488:	1009883a 	mov	r4,r2
   1148c:	e17ffe17 	ldw	r5,-8(fp)
   11490:	000f0880 	call	f088 <OS_StrCopy>
   11494:	e0bff817 	ldw	r2,-32(fp)
   11498:	e0bffc15 	stw	r2,-16(fp)
   1149c:	e0bffc17 	ldw	r2,-16(fp)
   114a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	10000005 	stb	zero,0(r2)
}
   114ac:	e037883a 	mov	sp,fp
   114b0:	dfc00117 	ldw	ra,4(sp)
   114b4:	df000017 	ldw	fp,0(sp)
   114b8:	dec00204 	addi	sp,sp,8
   114bc:	f800283a 	ret

000114c0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   114c0:	defff904 	addi	sp,sp,-28
   114c4:	df000615 	stw	fp,24(sp)
   114c8:	df000604 	addi	fp,sp,24
   114cc:	e13ffe15 	stw	r4,-8(fp)
   114d0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   114d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   114d8:	e0bffe17 	ldw	r2,-8(fp)
   114dc:	1000021e 	bne	r2,zero,114e8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   114e0:	00801804 	movi	r2,96
   114e4:	00002806 	br	11588 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   114e8:	e0bfff17 	ldw	r2,-4(fp)
   114ec:	1000021e 	bne	r2,zero,114f8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   114f0:	008017c4 	movi	r2,95
   114f4:	00002406 	br	11588 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114f8:	0005303a 	rdctl	r2,status
   114fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11500:	e0fffb17 	ldw	r3,-20(fp)
   11504:	00bfff84 	movi	r2,-2
   11508:	1884703a 	and	r2,r3,r2
   1150c:	1001703a 	wrctl	status,r2
  
  return context;
   11510:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11514:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11518:	e0bffe17 	ldw	r2,-8(fp)
   1151c:	10c00417 	ldw	r3,16(r2)
   11520:	e0bffe17 	ldw	r2,-8(fp)
   11524:	10800317 	ldw	r2,12(r2)
   11528:	18800636 	bltu	r3,r2,11544 <OSMemPut+0x84>
   1152c:	e0bffa17 	ldw	r2,-24(fp)
   11530:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   1153c:	00801784 	movi	r2,94
   11540:	00001106 	br	11588 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11544:	e0bffe17 	ldw	r2,-8(fp)
   11548:	10c00117 	ldw	r3,4(r2)
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	e0ffff17 	ldw	r3,-4(fp)
   1155c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11560:	e0bffe17 	ldw	r2,-8(fp)
   11564:	10800417 	ldw	r2,16(r2)
   11568:	10c00044 	addi	r3,r2,1
   1156c:	e0bffe17 	ldw	r2,-8(fp)
   11570:	10c00415 	stw	r3,16(r2)
   11574:	e0bffa17 	ldw	r2,-24(fp)
   11578:	e0bffd15 	stw	r2,-12(fp)
   1157c:	e0bffd17 	ldw	r2,-12(fp)
   11580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11584:	0005883a 	mov	r2,zero
}
   11588:	e037883a 	mov	sp,fp
   1158c:	df000017 	ldw	fp,0(sp)
   11590:	dec00104 	addi	sp,sp,4
   11594:	f800283a 	ret

00011598 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11598:	defffa04 	addi	sp,sp,-24
   1159c:	df000515 	stw	fp,20(sp)
   115a0:	df000504 	addi	fp,sp,20
   115a4:	e13ffe15 	stw	r4,-8(fp)
   115a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   115ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   115b0:	e0bffe17 	ldw	r2,-8(fp)
   115b4:	1000021e 	bne	r2,zero,115c0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   115b8:	00801804 	movi	r2,96
   115bc:	00002c06 	br	11670 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   115c0:	e0bfff17 	ldw	r2,-4(fp)
   115c4:	1000021e 	bne	r2,zero,115d0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   115c8:	00801844 	movi	r2,97
   115cc:	00002806 	br	11670 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115d0:	0005303a 	rdctl	r2,status
   115d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115d8:	e0fffc17 	ldw	r3,-16(fp)
   115dc:	00bfff84 	movi	r2,-2
   115e0:	1884703a 	and	r2,r3,r2
   115e4:	1001703a 	wrctl	status,r2
  
  return context;
   115e8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   115ec:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   115f0:	e0bffe17 	ldw	r2,-8(fp)
   115f4:	10c00017 	ldw	r3,0(r2)
   115f8:	e0bfff17 	ldw	r2,-4(fp)
   115fc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11600:	e0bffe17 	ldw	r2,-8(fp)
   11604:	10c00117 	ldw	r3,4(r2)
   11608:	e0bfff17 	ldw	r2,-4(fp)
   1160c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	10c00217 	ldw	r3,8(r2)
   11618:	e0bfff17 	ldw	r2,-4(fp)
   1161c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11620:	e0bffe17 	ldw	r2,-8(fp)
   11624:	10c00317 	ldw	r3,12(r2)
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11630:	e0bffe17 	ldw	r2,-8(fp)
   11634:	10c00417 	ldw	r3,16(r2)
   11638:	e0bfff17 	ldw	r2,-4(fp)
   1163c:	10c00415 	stw	r3,16(r2)
   11640:	e0bffb17 	ldw	r2,-20(fp)
   11644:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11648:	e0bffd17 	ldw	r2,-12(fp)
   1164c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11650:	e0bfff17 	ldw	r2,-4(fp)
   11654:	10c00317 	ldw	r3,12(r2)
   11658:	e0bfff17 	ldw	r2,-4(fp)
   1165c:	10800417 	ldw	r2,16(r2)
   11660:	1887c83a 	sub	r3,r3,r2
   11664:	e0bfff17 	ldw	r2,-4(fp)
   11668:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1166c:	0005883a 	mov	r2,zero
}
   11670:	e037883a 	mov	sp,fp
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00104 	addi	sp,sp,4
   1167c:	f800283a 	ret

00011680 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11680:	defffc04 	addi	sp,sp,-16
   11684:	dfc00315 	stw	ra,12(sp)
   11688:	df000215 	stw	fp,8(sp)
   1168c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11690:	010000b4 	movhi	r4,2
   11694:	21099204 	addi	r4,r4,9800
   11698:	01430c04 	movi	r5,3120
   1169c:	000ee980 	call	ee98 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   116a0:	008000b4 	movhi	r2,2
   116a4:	10899204 	addi	r2,r2,9800
   116a8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   116ac:	e03fff0d 	sth	zero,-4(fp)
   116b0:	00001306 	br	11700 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   116b4:	e0bfff0b 	ldhu	r2,-4(fp)
   116b8:	10800044 	addi	r2,r2,1
   116bc:	10c00d24 	muli	r3,r2,52
   116c0:	008000b4 	movhi	r2,2
   116c4:	10899204 	addi	r2,r2,9800
   116c8:	1887883a 	add	r3,r3,r2
   116cc:	e0bffe17 	ldw	r2,-8(fp)
   116d0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   116d4:	e0bffe17 	ldw	r2,-8(fp)
   116d8:	00c00fc4 	movi	r3,63
   116dc:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   116e0:	e0bffe17 	ldw	r2,-8(fp)
   116e4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   116e8:	e0bffe17 	ldw	r2,-8(fp)
   116ec:	10800d04 	addi	r2,r2,52
   116f0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   116f4:	e0bfff0b 	ldhu	r2,-4(fp)
   116f8:	10800044 	addi	r2,r2,1
   116fc:	e0bfff0d 	sth	r2,-4(fp)
   11700:	e0bfff0b 	ldhu	r2,-4(fp)
   11704:	10800ef0 	cmpltui	r2,r2,59
   11708:	103fea1e 	bne	r2,zero,116b4 <__alt_mem_Flash_flash_data+0xf40116b4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1170c:	e0bffe17 	ldw	r2,-8(fp)
   11710:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	00c00fc4 	movi	r3,63
   1171c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11720:	e0bffe17 	ldw	r2,-8(fp)
   11724:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11728:	008000b4 	movhi	r2,2
   1172c:	10b89204 	addi	r2,r2,-7608
   11730:	00c000b4 	movhi	r3,2
   11734:	18c99204 	addi	r3,r3,9800
   11738:	10c00015 	stw	r3,0(r2)
#endif
}
   1173c:	e037883a 	mov	sp,fp
   11740:	dfc00117 	ldw	ra,4(sp)
   11744:	df000017 	ldw	fp,0(sp)
   11748:	dec00204 	addi	sp,sp,8
   1174c:	f800283a 	ret

00011750 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11750:	defff804 	addi	sp,sp,-32
   11754:	df000715 	stw	fp,28(sp)
   11758:	df000704 	addi	fp,sp,28
   1175c:	e13ffe15 	stw	r4,-8(fp)
   11760:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11764:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11768:	e0bfff17 	ldw	r2,-4(fp)
   1176c:	1000021e 	bne	r2,zero,11778 <OSQAccept+0x28>
        return ((void *)0);
   11770:	0005883a 	mov	r2,zero
   11774:	00004206 	br	11880 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11778:	e0bffe17 	ldw	r2,-8(fp)
   1177c:	1000051e 	bne	r2,zero,11794 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11780:	e0bfff17 	ldw	r2,-4(fp)
   11784:	00c00104 	movi	r3,4
   11788:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1178c:	0005883a 	mov	r2,zero
   11790:	00003b06 	br	11880 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11794:	e0bffe17 	ldw	r2,-8(fp)
   11798:	10800003 	ldbu	r2,0(r2)
   1179c:	10803fcc 	andi	r2,r2,255
   117a0:	108000a0 	cmpeqi	r2,r2,2
   117a4:	1000051e 	bne	r2,zero,117bc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   117a8:	e0bfff17 	ldw	r2,-4(fp)
   117ac:	00c00044 	movi	r3,1
   117b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   117b4:	0005883a 	mov	r2,zero
   117b8:	00003106 	br	11880 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117bc:	0005303a 	rdctl	r2,status
   117c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117c4:	e0fffc17 	ldw	r3,-16(fp)
   117c8:	00bfff84 	movi	r2,-2
   117cc:	1884703a 	and	r2,r3,r2
   117d0:	1001703a 	wrctl	status,r2
  
  return context;
   117d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   117d8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   117dc:	e0bffe17 	ldw	r2,-8(fp)
   117e0:	10800117 	ldw	r2,4(r2)
   117e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   117e8:	e0bffb17 	ldw	r2,-20(fp)
   117ec:	1080058b 	ldhu	r2,22(r2)
   117f0:	10bfffcc 	andi	r2,r2,65535
   117f4:	10001926 	beq	r2,zero,1185c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   117f8:	e0bffb17 	ldw	r2,-20(fp)
   117fc:	10800417 	ldw	r2,16(r2)
   11800:	11000104 	addi	r4,r2,4
   11804:	e0fffb17 	ldw	r3,-20(fp)
   11808:	19000415 	stw	r4,16(r3)
   1180c:	10800017 	ldw	r2,0(r2)
   11810:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11814:	e0bffb17 	ldw	r2,-20(fp)
   11818:	1080058b 	ldhu	r2,22(r2)
   1181c:	10bfffc4 	addi	r2,r2,-1
   11820:	1007883a 	mov	r3,r2
   11824:	e0bffb17 	ldw	r2,-20(fp)
   11828:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1182c:	e0bffb17 	ldw	r2,-20(fp)
   11830:	10c00417 	ldw	r3,16(r2)
   11834:	e0bffb17 	ldw	r2,-20(fp)
   11838:	10800217 	ldw	r2,8(r2)
   1183c:	1880041e 	bne	r3,r2,11850 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11840:	e0bffb17 	ldw	r2,-20(fp)
   11844:	10c00117 	ldw	r3,4(r2)
   11848:	e0bffb17 	ldw	r2,-20(fp)
   1184c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11850:	e0bfff17 	ldw	r2,-4(fp)
   11854:	10000005 	stb	zero,0(r2)
   11858:	00000406 	br	1186c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1185c:	e0bfff17 	ldw	r2,-4(fp)
   11860:	00c007c4 	movi	r3,31
   11864:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11868:	e03ff915 	stw	zero,-28(fp)
   1186c:	e0bffa17 	ldw	r2,-24(fp)
   11870:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11874:	e0bffd17 	ldw	r2,-12(fp)
   11878:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1187c:	e0bff917 	ldw	r2,-28(fp)
}
   11880:	e037883a 	mov	sp,fp
   11884:	df000017 	ldw	fp,0(sp)
   11888:	dec00104 	addi	sp,sp,4
   1188c:	f800283a 	ret

00011890 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11890:	defff404 	addi	sp,sp,-48
   11894:	dfc00b15 	stw	ra,44(sp)
   11898:	df000a15 	stw	fp,40(sp)
   1189c:	df000a04 	addi	fp,sp,40
   118a0:	e13ffe15 	stw	r4,-8(fp)
   118a4:	2805883a 	mov	r2,r5
   118a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   118ac:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   118b0:	008000b4 	movhi	r2,2
   118b4:	10b89704 	addi	r2,r2,-7588
   118b8:	10800003 	ldbu	r2,0(r2)
   118bc:	10803fcc 	andi	r2,r2,255
   118c0:	10000226 	beq	r2,zero,118cc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   118c4:	0005883a 	mov	r2,zero
   118c8:	00006b06 	br	11a78 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118cc:	0005303a 	rdctl	r2,status
   118d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118d4:	e0fff917 	ldw	r3,-28(fp)
   118d8:	00bfff84 	movi	r2,-2
   118dc:	1884703a 	and	r2,r3,r2
   118e0:	1001703a 	wrctl	status,r2
  
  return context;
   118e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   118e8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   118ec:	008000b4 	movhi	r2,2
   118f0:	10b89604 	addi	r2,r2,-7592
   118f4:	10800017 	ldw	r2,0(r2)
   118f8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   118fc:	008000b4 	movhi	r2,2
   11900:	10b89604 	addi	r2,r2,-7592
   11904:	10800017 	ldw	r2,0(r2)
   11908:	10000726 	beq	r2,zero,11928 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1190c:	008000b4 	movhi	r2,2
   11910:	10b89604 	addi	r2,r2,-7592
   11914:	10800017 	ldw	r2,0(r2)
   11918:	10c00117 	ldw	r3,4(r2)
   1191c:	008000b4 	movhi	r2,2
   11920:	10b89604 	addi	r2,r2,-7592
   11924:	10c00015 	stw	r3,0(r2)
   11928:	e0bff717 	ldw	r2,-36(fp)
   1192c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11930:	e0bffa17 	ldw	r2,-24(fp)
   11934:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11938:	e0bff617 	ldw	r2,-40(fp)
   1193c:	10004d26 	beq	r2,zero,11a74 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11940:	0005303a 	rdctl	r2,status
   11944:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11948:	e0fffb17 	ldw	r3,-20(fp)
   1194c:	00bfff84 	movi	r2,-2
   11950:	1884703a 	and	r2,r3,r2
   11954:	1001703a 	wrctl	status,r2
  
  return context;
   11958:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   1195c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11960:	008000b4 	movhi	r2,2
   11964:	10b89404 	addi	r2,r2,-7600
   11968:	10800017 	ldw	r2,0(r2)
   1196c:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11970:	e0bff817 	ldw	r2,-32(fp)
   11974:	10003126 	beq	r2,zero,11a3c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11978:	008000b4 	movhi	r2,2
   1197c:	10b89404 	addi	r2,r2,-7600
   11980:	10800017 	ldw	r2,0(r2)
   11984:	10c00017 	ldw	r3,0(r2)
   11988:	008000b4 	movhi	r2,2
   1198c:	10b89404 	addi	r2,r2,-7600
   11990:	10c00015 	stw	r3,0(r2)
   11994:	e0bff717 	ldw	r2,-36(fp)
   11998:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   119a4:	e0bff817 	ldw	r2,-32(fp)
   119a8:	e0fffe17 	ldw	r3,-8(fp)
   119ac:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   119b0:	e0bfff0b 	ldhu	r2,-4(fp)
   119b4:	1085883a 	add	r2,r2,r2
   119b8:	1085883a 	add	r2,r2,r2
   119bc:	1007883a 	mov	r3,r2
   119c0:	e0bffe17 	ldw	r2,-8(fp)
   119c4:	10c7883a 	add	r3,r2,r3
   119c8:	e0bff817 	ldw	r2,-32(fp)
   119cc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   119d0:	e0bff817 	ldw	r2,-32(fp)
   119d4:	e0fffe17 	ldw	r3,-8(fp)
   119d8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   119dc:	e0bff817 	ldw	r2,-32(fp)
   119e0:	e0fffe17 	ldw	r3,-8(fp)
   119e4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   119e8:	e0bff817 	ldw	r2,-32(fp)
   119ec:	e0ffff0b 	ldhu	r3,-4(fp)
   119f0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   119f4:	e0bff817 	ldw	r2,-32(fp)
   119f8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   119fc:	e0bff617 	ldw	r2,-40(fp)
   11a00:	00c00084 	movi	r3,2
   11a04:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   11a08:	e0bff617 	ldw	r2,-40(fp)
   11a0c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   11a10:	e0bff617 	ldw	r2,-40(fp)
   11a14:	e0fff817 	ldw	r3,-32(fp)
   11a18:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   11a1c:	e0bff617 	ldw	r2,-40(fp)
   11a20:	00c00fc4 	movi	r3,63
   11a24:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11a28:	e0bff617 	ldw	r2,-40(fp)
   11a2c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11a30:	e13ff617 	ldw	r4,-40(fp)
   11a34:	000ead40 	call	ead4 <OS_EventWaitListInit>
   11a38:	00000e06 	br	11a74 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11a3c:	008000b4 	movhi	r2,2
   11a40:	10b89604 	addi	r2,r2,-7592
   11a44:	10c00017 	ldw	r3,0(r2)
   11a48:	e0bff617 	ldw	r2,-40(fp)
   11a4c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11a50:	008000b4 	movhi	r2,2
   11a54:	10b89604 	addi	r2,r2,-7592
   11a58:	e0fff617 	ldw	r3,-40(fp)
   11a5c:	10c00015 	stw	r3,0(r2)
   11a60:	e0bff717 	ldw	r2,-36(fp)
   11a64:	e0bffd15 	stw	r2,-12(fp)
   11a68:	e0bffd17 	ldw	r2,-12(fp)
   11a6c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11a70:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   11a74:	e0bff617 	ldw	r2,-40(fp)
}
   11a78:	e037883a 	mov	sp,fp
   11a7c:	dfc00117 	ldw	ra,4(sp)
   11a80:	df000017 	ldw	fp,0(sp)
   11a84:	dec00204 	addi	sp,sp,8
   11a88:	f800283a 	ret

00011a8c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11a8c:	defff204 	addi	sp,sp,-56
   11a90:	dfc00d15 	stw	ra,52(sp)
   11a94:	df000c15 	stw	fp,48(sp)
   11a98:	df000c04 	addi	fp,sp,48
   11a9c:	e13ffd15 	stw	r4,-12(fp)
   11aa0:	2805883a 	mov	r2,r5
   11aa4:	e1bfff15 	stw	r6,-4(fp)
   11aa8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11aac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11ab0:	e0bfff17 	ldw	r2,-4(fp)
   11ab4:	1000021e 	bne	r2,zero,11ac0 <OSQDel+0x34>
        return (pevent);
   11ab8:	e0bffd17 	ldw	r2,-12(fp)
   11abc:	0000a006 	br	11d40 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11ac0:	e0bffd17 	ldw	r2,-12(fp)
   11ac4:	1000051e 	bne	r2,zero,11adc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11ac8:	e0bfff17 	ldw	r2,-4(fp)
   11acc:	00c00104 	movi	r3,4
   11ad0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11ad4:	e0bffd17 	ldw	r2,-12(fp)
   11ad8:	00009906 	br	11d40 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11adc:	e0bffd17 	ldw	r2,-12(fp)
   11ae0:	10800003 	ldbu	r2,0(r2)
   11ae4:	10803fcc 	andi	r2,r2,255
   11ae8:	108000a0 	cmpeqi	r2,r2,2
   11aec:	1000051e 	bne	r2,zero,11b04 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11af0:	e0bfff17 	ldw	r2,-4(fp)
   11af4:	00c00044 	movi	r3,1
   11af8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11afc:	e0bffd17 	ldw	r2,-12(fp)
   11b00:	00008f06 	br	11d40 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11b04:	008000b4 	movhi	r2,2
   11b08:	10b89704 	addi	r2,r2,-7588
   11b0c:	10800003 	ldbu	r2,0(r2)
   11b10:	10803fcc 	andi	r2,r2,255
   11b14:	10000526 	beq	r2,zero,11b2c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11b18:	e0bfff17 	ldw	r2,-4(fp)
   11b1c:	00c003c4 	movi	r3,15
   11b20:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11b24:	e0bffd17 	ldw	r2,-12(fp)
   11b28:	00008506 	br	11d40 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b2c:	0005303a 	rdctl	r2,status
   11b30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b34:	e0fff817 	ldw	r3,-32(fp)
   11b38:	00bfff84 	movi	r2,-2
   11b3c:	1884703a 	and	r2,r3,r2
   11b40:	1001703a 	wrctl	status,r2
  
  return context;
   11b44:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11b48:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   11b4c:	e0bffd17 	ldw	r2,-12(fp)
   11b50:	10800283 	ldbu	r2,10(r2)
   11b54:	10803fcc 	andi	r2,r2,255
   11b58:	10000326 	beq	r2,zero,11b68 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11b5c:	00800044 	movi	r2,1
   11b60:	e0bff405 	stb	r2,-48(fp)
   11b64:	00000106 	br	11b6c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11b68:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11b6c:	e0bffe03 	ldbu	r2,-8(fp)
   11b70:	10000326 	beq	r2,zero,11b80 <OSQDel+0xf4>
   11b74:	10800060 	cmpeqi	r2,r2,1
   11b78:	1000381e 	bne	r2,zero,11c5c <OSQDel+0x1d0>
   11b7c:	00006506 	br	11d14 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   11b80:	e0bff403 	ldbu	r2,-48(fp)
   11b84:	1000261e 	bne	r2,zero,11c20 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11b88:	e0bffd17 	ldw	r2,-12(fp)
   11b8c:	00c00fc4 	movi	r3,63
   11b90:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   11b94:	e0bffd17 	ldw	r2,-12(fp)
   11b98:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   11b9c:	e0bffd17 	ldw	r2,-12(fp)
   11ba0:	10800117 	ldw	r2,4(r2)
   11ba4:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   11ba8:	008000b4 	movhi	r2,2
   11bac:	10b89404 	addi	r2,r2,-7600
   11bb0:	10c00017 	ldw	r3,0(r2)
   11bb4:	e0bff717 	ldw	r2,-36(fp)
   11bb8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   11bbc:	008000b4 	movhi	r2,2
   11bc0:	10b89404 	addi	r2,r2,-7600
   11bc4:	e0fff717 	ldw	r3,-36(fp)
   11bc8:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   11bd4:	008000b4 	movhi	r2,2
   11bd8:	10b89604 	addi	r2,r2,-7592
   11bdc:	10c00017 	ldw	r3,0(r2)
   11be0:	e0bffd17 	ldw	r2,-12(fp)
   11be4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   11be8:	e0bffd17 	ldw	r2,-12(fp)
   11bec:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   11bf0:	008000b4 	movhi	r2,2
   11bf4:	10b89604 	addi	r2,r2,-7592
   11bf8:	e0fffd17 	ldw	r3,-12(fp)
   11bfc:	10c00015 	stw	r3,0(r2)
   11c00:	e0bff617 	ldw	r2,-40(fp)
   11c04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c08:	e0bff917 	ldw	r2,-28(fp)
   11c0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   11c10:	e0bfff17 	ldw	r2,-4(fp)
   11c14:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   11c18:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   11c1c:	00004706 	br	11d3c <OSQDel+0x2b0>
   11c20:	e0bff617 	ldw	r2,-40(fp)
   11c24:	e0bffa15 	stw	r2,-24(fp)
   11c28:	e0bffa17 	ldw	r2,-24(fp)
   11c2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   11c30:	e0bfff17 	ldw	r2,-4(fp)
   11c34:	00c01244 	movi	r3,73
   11c38:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   11c3c:	e0bffd17 	ldw	r2,-12(fp)
   11c40:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   11c44:	00003d06 	br	11d3c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   11c48:	e13ffd17 	ldw	r4,-12(fp)
   11c4c:	000b883a 	mov	r5,zero
   11c50:	01800104 	movi	r6,4
   11c54:	000f883a 	mov	r7,zero
   11c58:	000e5340 	call	e534 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   11c5c:	e0bffd17 	ldw	r2,-12(fp)
   11c60:	10800283 	ldbu	r2,10(r2)
   11c64:	10803fcc 	andi	r2,r2,255
   11c68:	103ff71e 	bne	r2,zero,11c48 <__alt_mem_Flash_flash_data+0xf4011c48>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   11c6c:	e0bffd17 	ldw	r2,-12(fp)
   11c70:	00c00fc4 	movi	r3,63
   11c74:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   11c78:	e0bffd17 	ldw	r2,-12(fp)
   11c7c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   11c80:	e0bffd17 	ldw	r2,-12(fp)
   11c84:	10800117 	ldw	r2,4(r2)
   11c88:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   11c8c:	008000b4 	movhi	r2,2
   11c90:	10b89404 	addi	r2,r2,-7600
   11c94:	10c00017 	ldw	r3,0(r2)
   11c98:	e0bff717 	ldw	r2,-36(fp)
   11c9c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   11ca0:	008000b4 	movhi	r2,2
   11ca4:	10b89404 	addi	r2,r2,-7600
   11ca8:	e0fff717 	ldw	r3,-36(fp)
   11cac:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11cb0:	e0bffd17 	ldw	r2,-12(fp)
   11cb4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   11cb8:	008000b4 	movhi	r2,2
   11cbc:	10b89604 	addi	r2,r2,-7592
   11cc0:	10c00017 	ldw	r3,0(r2)
   11cc4:	e0bffd17 	ldw	r2,-12(fp)
   11cc8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   11ccc:	e0bffd17 	ldw	r2,-12(fp)
   11cd0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   11cd4:	008000b4 	movhi	r2,2
   11cd8:	10b89604 	addi	r2,r2,-7592
   11cdc:	e0fffd17 	ldw	r3,-12(fp)
   11ce0:	10c00015 	stw	r3,0(r2)
   11ce4:	e0bff617 	ldw	r2,-40(fp)
   11ce8:	e0bffb15 	stw	r2,-20(fp)
   11cec:	e0bffb17 	ldw	r2,-20(fp)
   11cf0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   11cf4:	e0bff403 	ldbu	r2,-48(fp)
   11cf8:	10800058 	cmpnei	r2,r2,1
   11cfc:	1000011e 	bne	r2,zero,11d04 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   11d00:	000ef4c0 	call	ef4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   11d04:	e0bfff17 	ldw	r2,-4(fp)
   11d08:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   11d0c:	e03ff515 	stw	zero,-44(fp)
             break;
   11d10:	00000a06 	br	11d3c <OSQDel+0x2b0>
   11d14:	e0bff617 	ldw	r2,-40(fp)
   11d18:	e0bffc15 	stw	r2,-16(fp)
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   11d24:	e0bfff17 	ldw	r2,-4(fp)
   11d28:	00c001c4 	movi	r3,7
   11d2c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   11d30:	e0bffd17 	ldw	r2,-12(fp)
   11d34:	e0bff515 	stw	r2,-44(fp)
             break;
   11d38:	0001883a 	nop
    }
    return (pevent_return);
   11d3c:	e0bff517 	ldw	r2,-44(fp)
}
   11d40:	e037883a 	mov	sp,fp
   11d44:	dfc00117 	ldw	ra,4(sp)
   11d48:	df000017 	ldw	fp,0(sp)
   11d4c:	dec00204 	addi	sp,sp,8
   11d50:	f800283a 	ret

00011d54 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   11d54:	defffa04 	addi	sp,sp,-24
   11d58:	df000515 	stw	fp,20(sp)
   11d5c:	df000504 	addi	fp,sp,20
   11d60:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11d64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11d68:	e0bfff17 	ldw	r2,-4(fp)
   11d6c:	1000021e 	bne	r2,zero,11d78 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   11d70:	00800104 	movi	r2,4
   11d74:	00002106 	br	11dfc <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   11d78:	e0bfff17 	ldw	r2,-4(fp)
   11d7c:	10800003 	ldbu	r2,0(r2)
   11d80:	10803fcc 	andi	r2,r2,255
   11d84:	108000a0 	cmpeqi	r2,r2,2
   11d88:	1000021e 	bne	r2,zero,11d94 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   11d8c:	00800044 	movi	r2,1
   11d90:	00001a06 	br	11dfc <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d94:	0005303a 	rdctl	r2,status
   11d98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d9c:	e0fffd17 	ldw	r3,-12(fp)
   11da0:	00bfff84 	movi	r2,-2
   11da4:	1884703a 	and	r2,r3,r2
   11da8:	1001703a 	wrctl	status,r2
  
  return context;
   11dac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11db0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   11db4:	e0bfff17 	ldw	r2,-4(fp)
   11db8:	10800117 	ldw	r2,4(r2)
   11dbc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	10c00117 	ldw	r3,4(r2)
   11dc8:	e0bffc17 	ldw	r2,-16(fp)
   11dcc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   11dd0:	e0bffc17 	ldw	r2,-16(fp)
   11dd4:	10c00117 	ldw	r3,4(r2)
   11dd8:	e0bffc17 	ldw	r2,-16(fp)
   11ddc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   11de0:	e0bffc17 	ldw	r2,-16(fp)
   11de4:	1000058d 	sth	zero,22(r2)
   11de8:	e0bffb17 	ldw	r2,-20(fp)
   11dec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11df0:	e0bffe17 	ldw	r2,-8(fp)
   11df4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11df8:	0005883a 	mov	r2,zero
}
   11dfc:	e037883a 	mov	sp,fp
   11e00:	df000017 	ldw	fp,0(sp)
   11e04:	dec00104 	addi	sp,sp,4
   11e08:	f800283a 	ret

00011e0c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   11e0c:	defff304 	addi	sp,sp,-52
   11e10:	dfc00c15 	stw	ra,48(sp)
   11e14:	df000b15 	stw	fp,44(sp)
   11e18:	df000b04 	addi	fp,sp,44
   11e1c:	e13ffd15 	stw	r4,-12(fp)
   11e20:	2805883a 	mov	r2,r5
   11e24:	e1bfff15 	stw	r6,-4(fp)
   11e28:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11e2c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11e30:	e0bfff17 	ldw	r2,-4(fp)
   11e34:	1000021e 	bne	r2,zero,11e40 <OSQPend+0x34>
        return ((void *)0);
   11e38:	0005883a 	mov	r2,zero
   11e3c:	0000ad06 	br	120f4 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11e40:	e0bffd17 	ldw	r2,-12(fp)
   11e44:	1000051e 	bne	r2,zero,11e5c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	00c00104 	movi	r3,4
   11e50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11e54:	0005883a 	mov	r2,zero
   11e58:	0000a606 	br	120f4 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11e5c:	e0bffd17 	ldw	r2,-12(fp)
   11e60:	10800003 	ldbu	r2,0(r2)
   11e64:	10803fcc 	andi	r2,r2,255
   11e68:	108000a0 	cmpeqi	r2,r2,2
   11e6c:	1000051e 	bne	r2,zero,11e84 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11e70:	e0bfff17 	ldw	r2,-4(fp)
   11e74:	00c00044 	movi	r3,1
   11e78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11e7c:	0005883a 	mov	r2,zero
   11e80:	00009c06 	br	120f4 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11e84:	008000b4 	movhi	r2,2
   11e88:	10b89704 	addi	r2,r2,-7588
   11e8c:	10800003 	ldbu	r2,0(r2)
   11e90:	10803fcc 	andi	r2,r2,255
   11e94:	10000526 	beq	r2,zero,11eac <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   11e98:	e0bfff17 	ldw	r2,-4(fp)
   11e9c:	00c00084 	movi	r3,2
   11ea0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11ea4:	0005883a 	mov	r2,zero
   11ea8:	00009206 	br	120f4 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   11eac:	008000b4 	movhi	r2,2
   11eb0:	10b88904 	addi	r2,r2,-7644
   11eb4:	10800003 	ldbu	r2,0(r2)
   11eb8:	10803fcc 	andi	r2,r2,255
   11ebc:	10000526 	beq	r2,zero,11ed4 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   11ec0:	e0bfff17 	ldw	r2,-4(fp)
   11ec4:	00c00344 	movi	r3,13
   11ec8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11ecc:	0005883a 	mov	r2,zero
   11ed0:	00008806 	br	120f4 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ed4:	0005303a 	rdctl	r2,status
   11ed8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11edc:	e0fff817 	ldw	r3,-32(fp)
   11ee0:	00bfff84 	movi	r2,-2
   11ee4:	1884703a 	and	r2,r3,r2
   11ee8:	1001703a 	wrctl	status,r2
  
  return context;
   11eec:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11ef0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11ef4:	e0bffd17 	ldw	r2,-12(fp)
   11ef8:	10800117 	ldw	r2,4(r2)
   11efc:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11f00:	e0bff717 	ldw	r2,-36(fp)
   11f04:	1080058b 	ldhu	r2,22(r2)
   11f08:	10bfffcc 	andi	r2,r2,65535
   11f0c:	10001e26 	beq	r2,zero,11f88 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11f10:	e0bff717 	ldw	r2,-36(fp)
   11f14:	10800417 	ldw	r2,16(r2)
   11f18:	11000104 	addi	r4,r2,4
   11f1c:	e0fff717 	ldw	r3,-36(fp)
   11f20:	19000415 	stw	r4,16(r3)
   11f24:	10800017 	ldw	r2,0(r2)
   11f28:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11f2c:	e0bff717 	ldw	r2,-36(fp)
   11f30:	1080058b 	ldhu	r2,22(r2)
   11f34:	10bfffc4 	addi	r2,r2,-1
   11f38:	1007883a 	mov	r3,r2
   11f3c:	e0bff717 	ldw	r2,-36(fp)
   11f40:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11f44:	e0bff717 	ldw	r2,-36(fp)
   11f48:	10c00417 	ldw	r3,16(r2)
   11f4c:	e0bff717 	ldw	r2,-36(fp)
   11f50:	10800217 	ldw	r2,8(r2)
   11f54:	1880041e 	bne	r3,r2,11f68 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   11f58:	e0bff717 	ldw	r2,-36(fp)
   11f5c:	10c00117 	ldw	r3,4(r2)
   11f60:	e0bff717 	ldw	r2,-36(fp)
   11f64:	10c00415 	stw	r3,16(r2)
   11f68:	e0bff617 	ldw	r2,-40(fp)
   11f6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f70:	e0bff917 	ldw	r2,-28(fp)
   11f74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   11f78:	e0bfff17 	ldw	r2,-4(fp)
   11f7c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   11f80:	e0bff517 	ldw	r2,-44(fp)
   11f84:	00005b06 	br	120f4 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   11f88:	008000b4 	movhi	r2,2
   11f8c:	10b89804 	addi	r2,r2,-7584
   11f90:	10c00017 	ldw	r3,0(r2)
   11f94:	008000b4 	movhi	r2,2
   11f98:	10b89804 	addi	r2,r2,-7584
   11f9c:	10800017 	ldw	r2,0(r2)
   11fa0:	10800c03 	ldbu	r2,48(r2)
   11fa4:	10800114 	ori	r2,r2,4
   11fa8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11fac:	008000b4 	movhi	r2,2
   11fb0:	10b89804 	addi	r2,r2,-7584
   11fb4:	10800017 	ldw	r2,0(r2)
   11fb8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   11fbc:	008000b4 	movhi	r2,2
   11fc0:	10b89804 	addi	r2,r2,-7584
   11fc4:	10800017 	ldw	r2,0(r2)
   11fc8:	e0fffe0b 	ldhu	r3,-8(fp)
   11fcc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   11fd0:	e13ffd17 	ldw	r4,-12(fp)
   11fd4:	000e6cc0 	call	e6cc <OS_EventTaskWait>
   11fd8:	e0bff617 	ldw	r2,-40(fp)
   11fdc:	e0bffa15 	stw	r2,-24(fp)
   11fe0:	e0bffa17 	ldw	r2,-24(fp)
   11fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   11fe8:	000ef4c0 	call	ef4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fec:	0005303a 	rdctl	r2,status
   11ff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ff4:	e0fffb17 	ldw	r3,-20(fp)
   11ff8:	00bfff84 	movi	r2,-2
   11ffc:	1884703a 	and	r2,r3,r2
   12000:	1001703a 	wrctl	status,r2
  
  return context;
   12004:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12008:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1200c:	008000b4 	movhi	r2,2
   12010:	10b89804 	addi	r2,r2,-7584
   12014:	10800017 	ldw	r2,0(r2)
   12018:	10800c43 	ldbu	r2,49(r2)
   1201c:	10803fcc 	andi	r2,r2,255
   12020:	10000326 	beq	r2,zero,12030 <OSQPend+0x224>
   12024:	108000a0 	cmpeqi	r2,r2,2
   12028:	1000091e 	bne	r2,zero,12050 <OSQPend+0x244>
   1202c:	00000d06 	br	12064 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12030:	008000b4 	movhi	r2,2
   12034:	10b89804 	addi	r2,r2,-7584
   12038:	10800017 	ldw	r2,0(r2)
   1203c:	10800917 	ldw	r2,36(r2)
   12040:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12044:	e0bfff17 	ldw	r2,-4(fp)
   12048:	10000005 	stb	zero,0(r2)
             break;
   1204c:	00001006 	br	12090 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12050:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12054:	e0bfff17 	ldw	r2,-4(fp)
   12058:	00c00384 	movi	r3,14
   1205c:	10c00005 	stb	r3,0(r2)
             break;
   12060:	00000b06 	br	12090 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12064:	008000b4 	movhi	r2,2
   12068:	10b89804 	addi	r2,r2,-7584
   1206c:	10800017 	ldw	r2,0(r2)
   12070:	1009883a 	mov	r4,r2
   12074:	e17ffd17 	ldw	r5,-12(fp)
   12078:	000e9240 	call	e924 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1207c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12080:	e0bfff17 	ldw	r2,-4(fp)
   12084:	00c00284 	movi	r3,10
   12088:	10c00005 	stb	r3,0(r2)
             break;
   1208c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12090:	008000b4 	movhi	r2,2
   12094:	10b89804 	addi	r2,r2,-7584
   12098:	10800017 	ldw	r2,0(r2)
   1209c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   120a0:	008000b4 	movhi	r2,2
   120a4:	10b89804 	addi	r2,r2,-7584
   120a8:	10800017 	ldw	r2,0(r2)
   120ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   120b0:	008000b4 	movhi	r2,2
   120b4:	10b89804 	addi	r2,r2,-7584
   120b8:	10800017 	ldw	r2,0(r2)
   120bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   120c0:	008000b4 	movhi	r2,2
   120c4:	10b89804 	addi	r2,r2,-7584
   120c8:	10800017 	ldw	r2,0(r2)
   120cc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   120d0:	008000b4 	movhi	r2,2
   120d4:	10b89804 	addi	r2,r2,-7584
   120d8:	10800017 	ldw	r2,0(r2)
   120dc:	10000915 	stw	zero,36(r2)
   120e0:	e0bff617 	ldw	r2,-40(fp)
   120e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120e8:	e0bffc17 	ldw	r2,-16(fp)
   120ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   120f0:	e0bff517 	ldw	r2,-44(fp)
}
   120f4:	e037883a 	mov	sp,fp
   120f8:	dfc00117 	ldw	ra,4(sp)
   120fc:	df000017 	ldw	fp,0(sp)
   12100:	dec00204 	addi	sp,sp,8
   12104:	f800283a 	ret

00012108 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12108:	defff604 	addi	sp,sp,-40
   1210c:	dfc00915 	stw	ra,36(sp)
   12110:	df000815 	stw	fp,32(sp)
   12114:	df000804 	addi	fp,sp,32
   12118:	e13ffd15 	stw	r4,-12(fp)
   1211c:	2805883a 	mov	r2,r5
   12120:	e1bfff15 	stw	r6,-4(fp)
   12124:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12128:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1212c:	e0bfff17 	ldw	r2,-4(fp)
   12130:	1000021e 	bne	r2,zero,1213c <OSQPendAbort+0x34>
        return (0);
   12134:	0005883a 	mov	r2,zero
   12138:	00004906 	br	12260 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1213c:	e0bffd17 	ldw	r2,-12(fp)
   12140:	1000051e 	bne	r2,zero,12158 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12144:	e0bfff17 	ldw	r2,-4(fp)
   12148:	00c00104 	movi	r3,4
   1214c:	10c00005 	stb	r3,0(r2)
        return (0);
   12150:	0005883a 	mov	r2,zero
   12154:	00004206 	br	12260 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12158:	e0bffd17 	ldw	r2,-12(fp)
   1215c:	10800003 	ldbu	r2,0(r2)
   12160:	10803fcc 	andi	r2,r2,255
   12164:	108000a0 	cmpeqi	r2,r2,2
   12168:	1000051e 	bne	r2,zero,12180 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1216c:	e0bfff17 	ldw	r2,-4(fp)
   12170:	00c00044 	movi	r3,1
   12174:	10c00005 	stb	r3,0(r2)
        return (0);
   12178:	0005883a 	mov	r2,zero
   1217c:	00003806 	br	12260 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12180:	0005303a 	rdctl	r2,status
   12184:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12188:	e0fffa17 	ldw	r3,-24(fp)
   1218c:	00bfff84 	movi	r2,-2
   12190:	1884703a 	and	r2,r3,r2
   12194:	1001703a 	wrctl	status,r2
  
  return context;
   12198:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1219c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   121a0:	e0bffd17 	ldw	r2,-12(fp)
   121a4:	10800283 	ldbu	r2,10(r2)
   121a8:	10803fcc 	andi	r2,r2,255
   121ac:	10002526 	beq	r2,zero,12244 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   121b0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   121b4:	e0bffe03 	ldbu	r2,-8(fp)
   121b8:	10800060 	cmpeqi	r2,r2,1
   121bc:	10000e26 	beq	r2,zero,121f8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   121c0:	00000806 	br	121e4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   121c4:	e13ffd17 	ldw	r4,-12(fp)
   121c8:	000b883a 	mov	r5,zero
   121cc:	01800104 	movi	r6,4
   121d0:	01c00084 	movi	r7,2
   121d4:	000e5340 	call	e534 <OS_EventTaskRdy>
                     nbr_tasks++;
   121d8:	e0bff803 	ldbu	r2,-32(fp)
   121dc:	10800044 	addi	r2,r2,1
   121e0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   121e4:	e0bffd17 	ldw	r2,-12(fp)
   121e8:	10800283 	ldbu	r2,10(r2)
   121ec:	10803fcc 	andi	r2,r2,255
   121f0:	103ff41e 	bne	r2,zero,121c4 <__alt_mem_Flash_flash_data+0xf40121c4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   121f4:	00000906 	br	1221c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   121f8:	e13ffd17 	ldw	r4,-12(fp)
   121fc:	000b883a 	mov	r5,zero
   12200:	01800104 	movi	r6,4
   12204:	01c00084 	movi	r7,2
   12208:	000e5340 	call	e534 <OS_EventTaskRdy>
                 nbr_tasks++;
   1220c:	e0bff803 	ldbu	r2,-32(fp)
   12210:	10800044 	addi	r2,r2,1
   12214:	e0bff805 	stb	r2,-32(fp)
                 break;
   12218:	0001883a 	nop
   1221c:	e0bff917 	ldw	r2,-28(fp)
   12220:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12224:	e0bffb17 	ldw	r2,-20(fp)
   12228:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1222c:	000ef4c0 	call	ef4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12230:	e0bfff17 	ldw	r2,-4(fp)
   12234:	00c00384 	movi	r3,14
   12238:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1223c:	e0bff803 	ldbu	r2,-32(fp)
   12240:	00000706 	br	12260 <OSQPendAbort+0x158>
   12244:	e0bff917 	ldw	r2,-28(fp)
   12248:	e0bffc15 	stw	r2,-16(fp)
   1224c:	e0bffc17 	ldw	r2,-16(fp)
   12250:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12254:	e0bfff17 	ldw	r2,-4(fp)
   12258:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1225c:	0005883a 	mov	r2,zero
}
   12260:	e037883a 	mov	sp,fp
   12264:	dfc00117 	ldw	ra,4(sp)
   12268:	df000017 	ldw	fp,0(sp)
   1226c:	dec00204 	addi	sp,sp,8
   12270:	f800283a 	ret

00012274 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12274:	defff604 	addi	sp,sp,-40
   12278:	dfc00915 	stw	ra,36(sp)
   1227c:	df000815 	stw	fp,32(sp)
   12280:	df000804 	addi	fp,sp,32
   12284:	e13ffe15 	stw	r4,-8(fp)
   12288:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1228c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12290:	e0bffe17 	ldw	r2,-8(fp)
   12294:	1000021e 	bne	r2,zero,122a0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12298:	00800104 	movi	r2,4
   1229c:	00004a06 	br	123c8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   122a0:	e0bffe17 	ldw	r2,-8(fp)
   122a4:	10800003 	ldbu	r2,0(r2)
   122a8:	10803fcc 	andi	r2,r2,255
   122ac:	108000a0 	cmpeqi	r2,r2,2
   122b0:	1000021e 	bne	r2,zero,122bc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   122b4:	00800044 	movi	r2,1
   122b8:	00004306 	br	123c8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122bc:	0005303a 	rdctl	r2,status
   122c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122c4:	e0fffa17 	ldw	r3,-24(fp)
   122c8:	00bfff84 	movi	r2,-2
   122cc:	1884703a 	and	r2,r3,r2
   122d0:	1001703a 	wrctl	status,r2
  
  return context;
   122d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   122d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   122dc:	e0bffe17 	ldw	r2,-8(fp)
   122e0:	10800283 	ldbu	r2,10(r2)
   122e4:	10803fcc 	andi	r2,r2,255
   122e8:	10000c26 	beq	r2,zero,1231c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   122ec:	e13ffe17 	ldw	r4,-8(fp)
   122f0:	e17fff17 	ldw	r5,-4(fp)
   122f4:	01800104 	movi	r6,4
   122f8:	000f883a 	mov	r7,zero
   122fc:	000e5340 	call	e534 <OS_EventTaskRdy>
   12300:	e0bff817 	ldw	r2,-32(fp)
   12304:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12308:	e0bffb17 	ldw	r2,-20(fp)
   1230c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12310:	000ef4c0 	call	ef4c <OS_Sched>
        return (OS_ERR_NONE);
   12314:	0005883a 	mov	r2,zero
   12318:	00002b06 	br	123c8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1231c:	e0bffe17 	ldw	r2,-8(fp)
   12320:	10800117 	ldw	r2,4(r2)
   12324:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12328:	e0bff917 	ldw	r2,-28(fp)
   1232c:	10c0058b 	ldhu	r3,22(r2)
   12330:	e0bff917 	ldw	r2,-28(fp)
   12334:	1080050b 	ldhu	r2,20(r2)
   12338:	18ffffcc 	andi	r3,r3,65535
   1233c:	10bfffcc 	andi	r2,r2,65535
   12340:	18800636 	bltu	r3,r2,1235c <OSQPost+0xe8>
   12344:	e0bff817 	ldw	r2,-32(fp)
   12348:	e0bffc15 	stw	r2,-16(fp)
   1234c:	e0bffc17 	ldw	r2,-16(fp)
   12350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12354:	00800784 	movi	r2,30
   12358:	00001b06 	br	123c8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1235c:	e0bff917 	ldw	r2,-28(fp)
   12360:	10800317 	ldw	r2,12(r2)
   12364:	11000104 	addi	r4,r2,4
   12368:	e0fff917 	ldw	r3,-28(fp)
   1236c:	19000315 	stw	r4,12(r3)
   12370:	e0ffff17 	ldw	r3,-4(fp)
   12374:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12378:	e0bff917 	ldw	r2,-28(fp)
   1237c:	1080058b 	ldhu	r2,22(r2)
   12380:	10800044 	addi	r2,r2,1
   12384:	1007883a 	mov	r3,r2
   12388:	e0bff917 	ldw	r2,-28(fp)
   1238c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12390:	e0bff917 	ldw	r2,-28(fp)
   12394:	10c00317 	ldw	r3,12(r2)
   12398:	e0bff917 	ldw	r2,-28(fp)
   1239c:	10800217 	ldw	r2,8(r2)
   123a0:	1880041e 	bne	r3,r2,123b4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   123a4:	e0bff917 	ldw	r2,-28(fp)
   123a8:	10c00117 	ldw	r3,4(r2)
   123ac:	e0bff917 	ldw	r2,-28(fp)
   123b0:	10c00315 	stw	r3,12(r2)
   123b4:	e0bff817 	ldw	r2,-32(fp)
   123b8:	e0bffd15 	stw	r2,-12(fp)
   123bc:	e0bffd17 	ldw	r2,-12(fp)
   123c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   123c4:	0005883a 	mov	r2,zero
}
   123c8:	e037883a 	mov	sp,fp
   123cc:	dfc00117 	ldw	ra,4(sp)
   123d0:	df000017 	ldw	fp,0(sp)
   123d4:	dec00204 	addi	sp,sp,8
   123d8:	f800283a 	ret

000123dc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   123dc:	defff604 	addi	sp,sp,-40
   123e0:	dfc00915 	stw	ra,36(sp)
   123e4:	df000815 	stw	fp,32(sp)
   123e8:	df000804 	addi	fp,sp,32
   123ec:	e13ffe15 	stw	r4,-8(fp)
   123f0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   123f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   123f8:	e0bffe17 	ldw	r2,-8(fp)
   123fc:	1000021e 	bne	r2,zero,12408 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12400:	00800104 	movi	r2,4
   12404:	00004c06 	br	12538 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12408:	e0bffe17 	ldw	r2,-8(fp)
   1240c:	10800003 	ldbu	r2,0(r2)
   12410:	10803fcc 	andi	r2,r2,255
   12414:	108000a0 	cmpeqi	r2,r2,2
   12418:	1000021e 	bne	r2,zero,12424 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1241c:	00800044 	movi	r2,1
   12420:	00004506 	br	12538 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12424:	0005303a 	rdctl	r2,status
   12428:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1242c:	e0fffa17 	ldw	r3,-24(fp)
   12430:	00bfff84 	movi	r2,-2
   12434:	1884703a 	and	r2,r3,r2
   12438:	1001703a 	wrctl	status,r2
  
  return context;
   1243c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12440:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12444:	e0bffe17 	ldw	r2,-8(fp)
   12448:	10800283 	ldbu	r2,10(r2)
   1244c:	10803fcc 	andi	r2,r2,255
   12450:	10000c26 	beq	r2,zero,12484 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12454:	e13ffe17 	ldw	r4,-8(fp)
   12458:	e17fff17 	ldw	r5,-4(fp)
   1245c:	01800104 	movi	r6,4
   12460:	000f883a 	mov	r7,zero
   12464:	000e5340 	call	e534 <OS_EventTaskRdy>
   12468:	e0bff817 	ldw	r2,-32(fp)
   1246c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12470:	e0bffb17 	ldw	r2,-20(fp)
   12474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12478:	000ef4c0 	call	ef4c <OS_Sched>
        return (OS_ERR_NONE);
   1247c:	0005883a 	mov	r2,zero
   12480:	00002d06 	br	12538 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12484:	e0bffe17 	ldw	r2,-8(fp)
   12488:	10800117 	ldw	r2,4(r2)
   1248c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12490:	e0bff917 	ldw	r2,-28(fp)
   12494:	10c0058b 	ldhu	r3,22(r2)
   12498:	e0bff917 	ldw	r2,-28(fp)
   1249c:	1080050b 	ldhu	r2,20(r2)
   124a0:	18ffffcc 	andi	r3,r3,65535
   124a4:	10bfffcc 	andi	r2,r2,65535
   124a8:	18800636 	bltu	r3,r2,124c4 <OSQPostFront+0xe8>
   124ac:	e0bff817 	ldw	r2,-32(fp)
   124b0:	e0bffc15 	stw	r2,-16(fp)
   124b4:	e0bffc17 	ldw	r2,-16(fp)
   124b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   124bc:	00800784 	movi	r2,30
   124c0:	00001d06 	br	12538 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   124c4:	e0bff917 	ldw	r2,-28(fp)
   124c8:	10c00417 	ldw	r3,16(r2)
   124cc:	e0bff917 	ldw	r2,-28(fp)
   124d0:	10800117 	ldw	r2,4(r2)
   124d4:	1880041e 	bne	r3,r2,124e8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   124d8:	e0bff917 	ldw	r2,-28(fp)
   124dc:	10c00217 	ldw	r3,8(r2)
   124e0:	e0bff917 	ldw	r2,-28(fp)
   124e4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   124e8:	e0bff917 	ldw	r2,-28(fp)
   124ec:	10800417 	ldw	r2,16(r2)
   124f0:	10ffff04 	addi	r3,r2,-4
   124f4:	e0bff917 	ldw	r2,-28(fp)
   124f8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   124fc:	e0bff917 	ldw	r2,-28(fp)
   12500:	10800417 	ldw	r2,16(r2)
   12504:	e0ffff17 	ldw	r3,-4(fp)
   12508:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1250c:	e0bff917 	ldw	r2,-28(fp)
   12510:	1080058b 	ldhu	r2,22(r2)
   12514:	10800044 	addi	r2,r2,1
   12518:	1007883a 	mov	r3,r2
   1251c:	e0bff917 	ldw	r2,-28(fp)
   12520:	10c0058d 	sth	r3,22(r2)
   12524:	e0bff817 	ldw	r2,-32(fp)
   12528:	e0bffd15 	stw	r2,-12(fp)
   1252c:	e0bffd17 	ldw	r2,-12(fp)
   12530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12534:	0005883a 	mov	r2,zero
}
   12538:	e037883a 	mov	sp,fp
   1253c:	dfc00117 	ldw	ra,4(sp)
   12540:	df000017 	ldw	fp,0(sp)
   12544:	dec00204 	addi	sp,sp,8
   12548:	f800283a 	ret

0001254c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1254c:	defff504 	addi	sp,sp,-44
   12550:	dfc00a15 	stw	ra,40(sp)
   12554:	df000915 	stw	fp,36(sp)
   12558:	df000904 	addi	fp,sp,36
   1255c:	e13ffd15 	stw	r4,-12(fp)
   12560:	e17ffe15 	stw	r5,-8(fp)
   12564:	3005883a 	mov	r2,r6
   12568:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1256c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12570:	e0bffd17 	ldw	r2,-12(fp)
   12574:	1000021e 	bne	r2,zero,12580 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12578:	00800104 	movi	r2,4
   1257c:	00007106 	br	12744 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12580:	e0bffd17 	ldw	r2,-12(fp)
   12584:	10800003 	ldbu	r2,0(r2)
   12588:	10803fcc 	andi	r2,r2,255
   1258c:	108000a0 	cmpeqi	r2,r2,2
   12590:	1000021e 	bne	r2,zero,1259c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12594:	00800044 	movi	r2,1
   12598:	00006a06 	br	12744 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1259c:	0005303a 	rdctl	r2,status
   125a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125a4:	e0fff917 	ldw	r3,-28(fp)
   125a8:	00bfff84 	movi	r2,-2
   125ac:	1884703a 	and	r2,r3,r2
   125b0:	1001703a 	wrctl	status,r2
  
  return context;
   125b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   125b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   125bc:	e0bffd17 	ldw	r2,-12(fp)
   125c0:	10800283 	ldbu	r2,10(r2)
   125c4:	10803fcc 	andi	r2,r2,255
   125c8:	10001d26 	beq	r2,zero,12640 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   125cc:	e0bfff03 	ldbu	r2,-4(fp)
   125d0:	1080004c 	andi	r2,r2,1
   125d4:	10000b26 	beq	r2,zero,12604 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   125d8:	00000506 	br	125f0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   125dc:	e13ffd17 	ldw	r4,-12(fp)
   125e0:	e17ffe17 	ldw	r5,-8(fp)
   125e4:	01800104 	movi	r6,4
   125e8:	000f883a 	mov	r7,zero
   125ec:	000e5340 	call	e534 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   125f0:	e0bffd17 	ldw	r2,-12(fp)
   125f4:	10800283 	ldbu	r2,10(r2)
   125f8:	10803fcc 	andi	r2,r2,255
   125fc:	103ff71e 	bne	r2,zero,125dc <__alt_mem_Flash_flash_data+0xf40125dc>
   12600:	00000506 	br	12618 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12604:	e13ffd17 	ldw	r4,-12(fp)
   12608:	e17ffe17 	ldw	r5,-8(fp)
   1260c:	01800104 	movi	r6,4
   12610:	000f883a 	mov	r7,zero
   12614:	000e5340 	call	e534 <OS_EventTaskRdy>
   12618:	e0bff717 	ldw	r2,-36(fp)
   1261c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12620:	e0bffa17 	ldw	r2,-24(fp)
   12624:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12628:	e0bfff03 	ldbu	r2,-4(fp)
   1262c:	1080010c 	andi	r2,r2,4
   12630:	1000011e 	bne	r2,zero,12638 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12634:	000ef4c0 	call	ef4c <OS_Sched>
        }
        return (OS_ERR_NONE);
   12638:	0005883a 	mov	r2,zero
   1263c:	00004106 	br	12744 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12640:	e0bffd17 	ldw	r2,-12(fp)
   12644:	10800117 	ldw	r2,4(r2)
   12648:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1264c:	e0bff817 	ldw	r2,-32(fp)
   12650:	10c0058b 	ldhu	r3,22(r2)
   12654:	e0bff817 	ldw	r2,-32(fp)
   12658:	1080050b 	ldhu	r2,20(r2)
   1265c:	18ffffcc 	andi	r3,r3,65535
   12660:	10bfffcc 	andi	r2,r2,65535
   12664:	18800636 	bltu	r3,r2,12680 <OSQPostOpt+0x134>
   12668:	e0bff717 	ldw	r2,-36(fp)
   1266c:	e0bffb15 	stw	r2,-20(fp)
   12670:	e0bffb17 	ldw	r2,-20(fp)
   12674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12678:	00800784 	movi	r2,30
   1267c:	00003106 	br	12744 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12680:	e0bfff03 	ldbu	r2,-4(fp)
   12684:	1080008c 	andi	r2,r2,2
   12688:	10001326 	beq	r2,zero,126d8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1268c:	e0bff817 	ldw	r2,-32(fp)
   12690:	10c00417 	ldw	r3,16(r2)
   12694:	e0bff817 	ldw	r2,-32(fp)
   12698:	10800117 	ldw	r2,4(r2)
   1269c:	1880041e 	bne	r3,r2,126b0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   126a0:	e0bff817 	ldw	r2,-32(fp)
   126a4:	10c00217 	ldw	r3,8(r2)
   126a8:	e0bff817 	ldw	r2,-32(fp)
   126ac:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   126b0:	e0bff817 	ldw	r2,-32(fp)
   126b4:	10800417 	ldw	r2,16(r2)
   126b8:	10ffff04 	addi	r3,r2,-4
   126bc:	e0bff817 	ldw	r2,-32(fp)
   126c0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   126c4:	e0bff817 	ldw	r2,-32(fp)
   126c8:	10800417 	ldw	r2,16(r2)
   126cc:	e0fffe17 	ldw	r3,-8(fp)
   126d0:	10c00015 	stw	r3,0(r2)
   126d4:	00001006 	br	12718 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   126d8:	e0bff817 	ldw	r2,-32(fp)
   126dc:	10800317 	ldw	r2,12(r2)
   126e0:	11000104 	addi	r4,r2,4
   126e4:	e0fff817 	ldw	r3,-32(fp)
   126e8:	19000315 	stw	r4,12(r3)
   126ec:	e0fffe17 	ldw	r3,-8(fp)
   126f0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   126f4:	e0bff817 	ldw	r2,-32(fp)
   126f8:	10c00317 	ldw	r3,12(r2)
   126fc:	e0bff817 	ldw	r2,-32(fp)
   12700:	10800217 	ldw	r2,8(r2)
   12704:	1880041e 	bne	r3,r2,12718 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12708:	e0bff817 	ldw	r2,-32(fp)
   1270c:	10c00117 	ldw	r3,4(r2)
   12710:	e0bff817 	ldw	r2,-32(fp)
   12714:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12718:	e0bff817 	ldw	r2,-32(fp)
   1271c:	1080058b 	ldhu	r2,22(r2)
   12720:	10800044 	addi	r2,r2,1
   12724:	1007883a 	mov	r3,r2
   12728:	e0bff817 	ldw	r2,-32(fp)
   1272c:	10c0058d 	sth	r3,22(r2)
   12730:	e0bff717 	ldw	r2,-36(fp)
   12734:	e0bffc15 	stw	r2,-16(fp)
   12738:	e0bffc17 	ldw	r2,-16(fp)
   1273c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12740:	0005883a 	mov	r2,zero
}
   12744:	e037883a 	mov	sp,fp
   12748:	dfc00117 	ldw	ra,4(sp)
   1274c:	df000017 	ldw	fp,0(sp)
   12750:	dec00204 	addi	sp,sp,8
   12754:	f800283a 	ret

00012758 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12758:	defff604 	addi	sp,sp,-40
   1275c:	df000915 	stw	fp,36(sp)
   12760:	df000904 	addi	fp,sp,36
   12764:	e13ffe15 	stw	r4,-8(fp)
   12768:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1276c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	1000021e 	bne	r2,zero,12780 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12778:	00800104 	movi	r2,4
   1277c:	00004906 	br	128a4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12780:	e0bfff17 	ldw	r2,-4(fp)
   12784:	1000021e 	bne	r2,zero,12790 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12788:	00800244 	movi	r2,9
   1278c:	00004506 	br	128a4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12790:	e0bffe17 	ldw	r2,-8(fp)
   12794:	10800003 	ldbu	r2,0(r2)
   12798:	10803fcc 	andi	r2,r2,255
   1279c:	108000a0 	cmpeqi	r2,r2,2
   127a0:	1000021e 	bne	r2,zero,127ac <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   127a4:	00800044 	movi	r2,1
   127a8:	00003e06 	br	128a4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127ac:	0005303a 	rdctl	r2,status
   127b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127b4:	e0fffc17 	ldw	r3,-16(fp)
   127b8:	00bfff84 	movi	r2,-2
   127bc:	1884703a 	and	r2,r3,r2
   127c0:	1001703a 	wrctl	status,r2
  
  return context;
   127c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   127c8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   127cc:	e0bffe17 	ldw	r2,-8(fp)
   127d0:	10c00283 	ldbu	r3,10(r2)
   127d4:	e0bfff17 	ldw	r2,-4(fp)
   127d8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   127dc:	e0bffe17 	ldw	r2,-8(fp)
   127e0:	108002c4 	addi	r2,r2,11
   127e4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   127e8:	e0bfff17 	ldw	r2,-4(fp)
   127ec:	10800204 	addi	r2,r2,8
   127f0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   127f4:	e03ff705 	stb	zero,-36(fp)
   127f8:	00000b06 	br	12828 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   127fc:	e0bff917 	ldw	r2,-28(fp)
   12800:	10c00044 	addi	r3,r2,1
   12804:	e0fff915 	stw	r3,-28(fp)
   12808:	e0fff817 	ldw	r3,-32(fp)
   1280c:	19000044 	addi	r4,r3,1
   12810:	e13ff815 	stw	r4,-32(fp)
   12814:	18c00003 	ldbu	r3,0(r3)
   12818:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1281c:	e0bff703 	ldbu	r2,-36(fp)
   12820:	10800044 	addi	r2,r2,1
   12824:	e0bff705 	stb	r2,-36(fp)
   12828:	e0bff703 	ldbu	r2,-36(fp)
   1282c:	108000f0 	cmpltui	r2,r2,3
   12830:	103ff21e 	bne	r2,zero,127fc <__alt_mem_Flash_flash_data+0xf40127fc>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	10800117 	ldw	r2,4(r2)
   1283c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   12840:	e0bffb17 	ldw	r2,-20(fp)
   12844:	1080058b 	ldhu	r2,22(r2)
   12848:	10bfffcc 	andi	r2,r2,65535
   1284c:	10000626 	beq	r2,zero,12868 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12850:	e0bffb17 	ldw	r2,-20(fp)
   12854:	10800417 	ldw	r2,16(r2)
   12858:	10c00017 	ldw	r3,0(r2)
   1285c:	e0bfff17 	ldw	r2,-4(fp)
   12860:	10c00015 	stw	r3,0(r2)
   12864:	00000206 	br	12870 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12868:	e0bfff17 	ldw	r2,-4(fp)
   1286c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12870:	e0bffb17 	ldw	r2,-20(fp)
   12874:	10c0058b 	ldhu	r3,22(r2)
   12878:	e0bfff17 	ldw	r2,-4(fp)
   1287c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12880:	e0bffb17 	ldw	r2,-20(fp)
   12884:	10c0050b 	ldhu	r3,20(r2)
   12888:	e0bfff17 	ldw	r2,-4(fp)
   1288c:	10c0018d 	sth	r3,6(r2)
   12890:	e0bffa17 	ldw	r2,-24(fp)
   12894:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12898:	e0bffd17 	ldw	r2,-12(fp)
   1289c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   128a0:	0005883a 	mov	r2,zero
}
   128a4:	e037883a 	mov	sp,fp
   128a8:	df000017 	ldw	fp,0(sp)
   128ac:	dec00104 	addi	sp,sp,4
   128b0:	f800283a 	ret

000128b4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   128b4:	defffb04 	addi	sp,sp,-20
   128b8:	dfc00415 	stw	ra,16(sp)
   128bc:	df000315 	stw	fp,12(sp)
   128c0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   128c4:	010000b4 	movhi	r4,2
   128c8:	210e9e04 	addi	r4,r4,14968
   128cc:	01407804 	movi	r5,480
   128d0:	000ee980 	call	ee98 <OS_MemClr>
    pq1 = &OSQTbl[0];
   128d4:	008000b4 	movhi	r2,2
   128d8:	108e9e04 	addi	r2,r2,14968
   128dc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   128e0:	008000b4 	movhi	r2,2
   128e4:	108ea404 	addi	r2,r2,14992
   128e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   128ec:	e03ffd0d 	sth	zero,-12(fp)
   128f0:	00000c06 	br	12924 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   128f4:	e0bffe17 	ldw	r2,-8(fp)
   128f8:	e0ffff17 	ldw	r3,-4(fp)
   128fc:	10c00015 	stw	r3,0(r2)
        pq1++;
   12900:	e0bffe17 	ldw	r2,-8(fp)
   12904:	10800604 	addi	r2,r2,24
   12908:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1290c:	e0bfff17 	ldw	r2,-4(fp)
   12910:	10800604 	addi	r2,r2,24
   12914:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12918:	e0bffd0b 	ldhu	r2,-12(fp)
   1291c:	10800044 	addi	r2,r2,1
   12920:	e0bffd0d 	sth	r2,-12(fp)
   12924:	e0bffd0b 	ldhu	r2,-12(fp)
   12928:	108004f0 	cmpltui	r2,r2,19
   1292c:	103ff11e 	bne	r2,zero,128f4 <__alt_mem_Flash_flash_data+0xf40128f4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12930:	e0bffe17 	ldw	r2,-8(fp)
   12934:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12938:	008000b4 	movhi	r2,2
   1293c:	10b89404 	addi	r2,r2,-7600
   12940:	00c000b4 	movhi	r3,2
   12944:	18ce9e04 	addi	r3,r3,14968
   12948:	10c00015 	stw	r3,0(r2)
#endif
}
   1294c:	e037883a 	mov	sp,fp
   12950:	dfc00117 	ldw	ra,4(sp)
   12954:	df000017 	ldw	fp,0(sp)
   12958:	dec00204 	addi	sp,sp,8
   1295c:	f800283a 	ret

00012960 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12960:	defffa04 	addi	sp,sp,-24
   12964:	df000515 	stw	fp,20(sp)
   12968:	df000504 	addi	fp,sp,20
   1296c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12970:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	1000021e 	bne	r2,zero,12984 <OSSemAccept+0x24>
        return (0);
   1297c:	0005883a 	mov	r2,zero
   12980:	00001f06 	br	12a00 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12984:	e0bfff17 	ldw	r2,-4(fp)
   12988:	10800003 	ldbu	r2,0(r2)
   1298c:	10803fcc 	andi	r2,r2,255
   12990:	108000e0 	cmpeqi	r2,r2,3
   12994:	1000021e 	bne	r2,zero,129a0 <OSSemAccept+0x40>
        return (0);
   12998:	0005883a 	mov	r2,zero
   1299c:	00001806 	br	12a00 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129a0:	0005303a 	rdctl	r2,status
   129a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129a8:	e0fffd17 	ldw	r3,-12(fp)
   129ac:	00bfff84 	movi	r2,-2
   129b0:	1884703a 	and	r2,r3,r2
   129b4:	1001703a 	wrctl	status,r2
  
  return context;
   129b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   129bc:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   129c0:	e0bfff17 	ldw	r2,-4(fp)
   129c4:	1080020b 	ldhu	r2,8(r2)
   129c8:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   129cc:	e0bffc0b 	ldhu	r2,-16(fp)
   129d0:	10000626 	beq	r2,zero,129ec <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   129d4:	e0bfff17 	ldw	r2,-4(fp)
   129d8:	1080020b 	ldhu	r2,8(r2)
   129dc:	10bfffc4 	addi	r2,r2,-1
   129e0:	1007883a 	mov	r3,r2
   129e4:	e0bfff17 	ldw	r2,-4(fp)
   129e8:	10c0020d 	sth	r3,8(r2)
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129f4:	e0bffe17 	ldw	r2,-8(fp)
   129f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   129fc:	e0bffc0b 	ldhu	r2,-16(fp)
}
   12a00:	e037883a 	mov	sp,fp
   12a04:	df000017 	ldw	fp,0(sp)
   12a08:	dec00104 	addi	sp,sp,4
   12a0c:	f800283a 	ret

00012a10 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   12a10:	defff904 	addi	sp,sp,-28
   12a14:	dfc00615 	stw	ra,24(sp)
   12a18:	df000515 	stw	fp,20(sp)
   12a1c:	df000504 	addi	fp,sp,20
   12a20:	2005883a 	mov	r2,r4
   12a24:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12a28:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12a2c:	008000b4 	movhi	r2,2
   12a30:	10b89704 	addi	r2,r2,-7588
   12a34:	10800003 	ldbu	r2,0(r2)
   12a38:	10803fcc 	andi	r2,r2,255
   12a3c:	10000226 	beq	r2,zero,12a48 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12a40:	0005883a 	mov	r2,zero
   12a44:	00002d06 	br	12afc <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a48:	0005303a 	rdctl	r2,status
   12a4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a50:	e0fffd17 	ldw	r3,-12(fp)
   12a54:	00bfff84 	movi	r2,-2
   12a58:	1884703a 	and	r2,r3,r2
   12a5c:	1001703a 	wrctl	status,r2
  
  return context;
   12a60:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12a64:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12a68:	008000b4 	movhi	r2,2
   12a6c:	10b89604 	addi	r2,r2,-7592
   12a70:	10800017 	ldw	r2,0(r2)
   12a74:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12a78:	008000b4 	movhi	r2,2
   12a7c:	10b89604 	addi	r2,r2,-7592
   12a80:	10800017 	ldw	r2,0(r2)
   12a84:	10000726 	beq	r2,zero,12aa4 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12a88:	008000b4 	movhi	r2,2
   12a8c:	10b89604 	addi	r2,r2,-7592
   12a90:	10800017 	ldw	r2,0(r2)
   12a94:	10c00117 	ldw	r3,4(r2)
   12a98:	008000b4 	movhi	r2,2
   12a9c:	10b89604 	addi	r2,r2,-7592
   12aa0:	10c00015 	stw	r3,0(r2)
   12aa4:	e0bffb17 	ldw	r2,-20(fp)
   12aa8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12aac:	e0bffe17 	ldw	r2,-8(fp)
   12ab0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   12ab4:	e0bffc17 	ldw	r2,-16(fp)
   12ab8:	10000f26 	beq	r2,zero,12af8 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12abc:	e0bffc17 	ldw	r2,-16(fp)
   12ac0:	00c000c4 	movi	r3,3
   12ac4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   12ac8:	e0bffc17 	ldw	r2,-16(fp)
   12acc:	e0ffff0b 	ldhu	r3,-4(fp)
   12ad0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   12ad4:	e0bffc17 	ldw	r2,-16(fp)
   12ad8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   12adc:	e0bffc17 	ldw	r2,-16(fp)
   12ae0:	00c00fc4 	movi	r3,63
   12ae4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12ae8:	e0bffc17 	ldw	r2,-16(fp)
   12aec:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   12af0:	e13ffc17 	ldw	r4,-16(fp)
   12af4:	000ead40 	call	ead4 <OS_EventWaitListInit>
    }
    return (pevent);
   12af8:	e0bffc17 	ldw	r2,-16(fp)
}
   12afc:	e037883a 	mov	sp,fp
   12b00:	dfc00117 	ldw	ra,4(sp)
   12b04:	df000017 	ldw	fp,0(sp)
   12b08:	dec00204 	addi	sp,sp,8
   12b0c:	f800283a 	ret

00012b10 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12b10:	defff304 	addi	sp,sp,-52
   12b14:	dfc00c15 	stw	ra,48(sp)
   12b18:	df000b15 	stw	fp,44(sp)
   12b1c:	df000b04 	addi	fp,sp,44
   12b20:	e13ffd15 	stw	r4,-12(fp)
   12b24:	2805883a 	mov	r2,r5
   12b28:	e1bfff15 	stw	r6,-4(fp)
   12b2c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12b30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12b34:	e0bfff17 	ldw	r2,-4(fp)
   12b38:	1000021e 	bne	r2,zero,12b44 <OSSemDel+0x34>
        return (pevent);
   12b3c:	e0bffd17 	ldw	r2,-12(fp)
   12b40:	00008806 	br	12d64 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12b44:	e0bffd17 	ldw	r2,-12(fp)
   12b48:	1000051e 	bne	r2,zero,12b60 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12b4c:	e0bfff17 	ldw	r2,-4(fp)
   12b50:	00c00104 	movi	r3,4
   12b54:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12b58:	e0bffd17 	ldw	r2,-12(fp)
   12b5c:	00008106 	br	12d64 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12b60:	e0bffd17 	ldw	r2,-12(fp)
   12b64:	10800003 	ldbu	r2,0(r2)
   12b68:	10803fcc 	andi	r2,r2,255
   12b6c:	108000e0 	cmpeqi	r2,r2,3
   12b70:	1000051e 	bne	r2,zero,12b88 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12b74:	e0bfff17 	ldw	r2,-4(fp)
   12b78:	00c00044 	movi	r3,1
   12b7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12b80:	e0bffd17 	ldw	r2,-12(fp)
   12b84:	00007706 	br	12d64 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12b88:	008000b4 	movhi	r2,2
   12b8c:	10b89704 	addi	r2,r2,-7588
   12b90:	10800003 	ldbu	r2,0(r2)
   12b94:	10803fcc 	andi	r2,r2,255
   12b98:	10000526 	beq	r2,zero,12bb0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   12b9c:	e0bfff17 	ldw	r2,-4(fp)
   12ba0:	00c003c4 	movi	r3,15
   12ba4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12ba8:	e0bffd17 	ldw	r2,-12(fp)
   12bac:	00006d06 	br	12d64 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bb0:	0005303a 	rdctl	r2,status
   12bb4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bb8:	e0fff817 	ldw	r3,-32(fp)
   12bbc:	00bfff84 	movi	r2,-2
   12bc0:	1884703a 	and	r2,r3,r2
   12bc4:	1001703a 	wrctl	status,r2
  
  return context;
   12bc8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12bcc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   12bd0:	e0bffd17 	ldw	r2,-12(fp)
   12bd4:	10800283 	ldbu	r2,10(r2)
   12bd8:	10803fcc 	andi	r2,r2,255
   12bdc:	10000326 	beq	r2,zero,12bec <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12be0:	00800044 	movi	r2,1
   12be4:	e0bff505 	stb	r2,-44(fp)
   12be8:	00000106 	br	12bf0 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12bec:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   12bf0:	e0bffe03 	ldbu	r2,-8(fp)
   12bf4:	10000326 	beq	r2,zero,12c04 <OSSemDel+0xf4>
   12bf8:	10800060 	cmpeqi	r2,r2,1
   12bfc:	10002c1e 	bne	r2,zero,12cb0 <OSSemDel+0x1a0>
   12c00:	00004d06 	br	12d38 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   12c04:	e0bff503 	ldbu	r2,-44(fp)
   12c08:	10001a1e 	bne	r2,zero,12c74 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12c0c:	e0bffd17 	ldw	r2,-12(fp)
   12c10:	00c00fc4 	movi	r3,63
   12c14:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12c18:	e0bffd17 	ldw	r2,-12(fp)
   12c1c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12c20:	e0bffd17 	ldw	r2,-12(fp)
   12c24:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12c28:	008000b4 	movhi	r2,2
   12c2c:	10b89604 	addi	r2,r2,-7592
   12c30:	10c00017 	ldw	r3,0(r2)
   12c34:	e0bffd17 	ldw	r2,-12(fp)
   12c38:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12c3c:	e0bffd17 	ldw	r2,-12(fp)
   12c40:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12c44:	008000b4 	movhi	r2,2
   12c48:	10b89604 	addi	r2,r2,-7592
   12c4c:	e0fffd17 	ldw	r3,-12(fp)
   12c50:	10c00015 	stw	r3,0(r2)
   12c54:	e0bff717 	ldw	r2,-36(fp)
   12c58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c5c:	e0bff917 	ldw	r2,-28(fp)
   12c60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12c64:	e0bfff17 	ldw	r2,-4(fp)
   12c68:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   12c6c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12c70:	00003b06 	br	12d60 <OSSemDel+0x250>
   12c74:	e0bff717 	ldw	r2,-36(fp)
   12c78:	e0bffa15 	stw	r2,-24(fp)
   12c7c:	e0bffa17 	ldw	r2,-24(fp)
   12c80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	00c01244 	movi	r3,73
   12c8c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12c90:	e0bffd17 	ldw	r2,-12(fp)
   12c94:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12c98:	00003106 	br	12d60 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   12c9c:	e13ffd17 	ldw	r4,-12(fp)
   12ca0:	000b883a 	mov	r5,zero
   12ca4:	01800044 	movi	r6,1
   12ca8:	000f883a 	mov	r7,zero
   12cac:	000e5340 	call	e534 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   12cb0:	e0bffd17 	ldw	r2,-12(fp)
   12cb4:	10800283 	ldbu	r2,10(r2)
   12cb8:	10803fcc 	andi	r2,r2,255
   12cbc:	103ff71e 	bne	r2,zero,12c9c <__alt_mem_Flash_flash_data+0xf4012c9c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12cc0:	e0bffd17 	ldw	r2,-12(fp)
   12cc4:	00c00fc4 	movi	r3,63
   12cc8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12ccc:	e0bffd17 	ldw	r2,-12(fp)
   12cd0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12cd4:	e0bffd17 	ldw	r2,-12(fp)
   12cd8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12cdc:	008000b4 	movhi	r2,2
   12ce0:	10b89604 	addi	r2,r2,-7592
   12ce4:	10c00017 	ldw	r3,0(r2)
   12ce8:	e0bffd17 	ldw	r2,-12(fp)
   12cec:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12cf0:	e0bffd17 	ldw	r2,-12(fp)
   12cf4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12cf8:	008000b4 	movhi	r2,2
   12cfc:	10b89604 	addi	r2,r2,-7592
   12d00:	e0fffd17 	ldw	r3,-12(fp)
   12d04:	10c00015 	stw	r3,0(r2)
   12d08:	e0bff717 	ldw	r2,-36(fp)
   12d0c:	e0bffb15 	stw	r2,-20(fp)
   12d10:	e0bffb17 	ldw	r2,-20(fp)
   12d14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12d18:	e0bff503 	ldbu	r2,-44(fp)
   12d1c:	10800058 	cmpnei	r2,r2,1
   12d20:	1000011e 	bne	r2,zero,12d28 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12d24:	000ef4c0 	call	ef4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12d28:	e0bfff17 	ldw	r2,-4(fp)
   12d2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   12d30:	e03ff615 	stw	zero,-40(fp)
             break;
   12d34:	00000a06 	br	12d60 <OSSemDel+0x250>
   12d38:	e0bff717 	ldw	r2,-36(fp)
   12d3c:	e0bffc15 	stw	r2,-16(fp)
   12d40:	e0bffc17 	ldw	r2,-16(fp)
   12d44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	00c001c4 	movi	r3,7
   12d50:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12d54:	e0bffd17 	ldw	r2,-12(fp)
   12d58:	e0bff615 	stw	r2,-40(fp)
             break;
   12d5c:	0001883a 	nop
    }
    return (pevent_return);
   12d60:	e0bff617 	ldw	r2,-40(fp)
}
   12d64:	e037883a 	mov	sp,fp
   12d68:	dfc00117 	ldw	ra,4(sp)
   12d6c:	df000017 	ldw	fp,0(sp)
   12d70:	dec00204 	addi	sp,sp,8
   12d74:	f800283a 	ret

00012d78 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12d78:	defff504 	addi	sp,sp,-44
   12d7c:	dfc00a15 	stw	ra,40(sp)
   12d80:	df000915 	stw	fp,36(sp)
   12d84:	df000904 	addi	fp,sp,36
   12d88:	e13ffd15 	stw	r4,-12(fp)
   12d8c:	2805883a 	mov	r2,r5
   12d90:	e1bfff15 	stw	r6,-4(fp)
   12d94:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d98:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12d9c:	e0bfff17 	ldw	r2,-4(fp)
   12da0:	1000011e 	bne	r2,zero,12da8 <OSSemPend+0x30>
        return;
   12da4:	00008906 	br	12fcc <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12da8:	e0bffd17 	ldw	r2,-12(fp)
   12dac:	1000041e 	bne	r2,zero,12dc0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   12db0:	e0bfff17 	ldw	r2,-4(fp)
   12db4:	00c00104 	movi	r3,4
   12db8:	10c00005 	stb	r3,0(r2)
        return;
   12dbc:	00008306 	br	12fcc <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12dc0:	e0bffd17 	ldw	r2,-12(fp)
   12dc4:	10800003 	ldbu	r2,0(r2)
   12dc8:	10803fcc 	andi	r2,r2,255
   12dcc:	108000e0 	cmpeqi	r2,r2,3
   12dd0:	1000041e 	bne	r2,zero,12de4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12dd4:	e0bfff17 	ldw	r2,-4(fp)
   12dd8:	00c00044 	movi	r3,1
   12ddc:	10c00005 	stb	r3,0(r2)
        return;
   12de0:	00007a06 	br	12fcc <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   12de4:	008000b4 	movhi	r2,2
   12de8:	10b89704 	addi	r2,r2,-7588
   12dec:	10800003 	ldbu	r2,0(r2)
   12df0:	10803fcc 	andi	r2,r2,255
   12df4:	10000426 	beq	r2,zero,12e08 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   12df8:	e0bfff17 	ldw	r2,-4(fp)
   12dfc:	00c00084 	movi	r3,2
   12e00:	10c00005 	stb	r3,0(r2)
        return;
   12e04:	00007106 	br	12fcc <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   12e08:	008000b4 	movhi	r2,2
   12e0c:	10b88904 	addi	r2,r2,-7644
   12e10:	10800003 	ldbu	r2,0(r2)
   12e14:	10803fcc 	andi	r2,r2,255
   12e18:	10000426 	beq	r2,zero,12e2c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   12e1c:	e0bfff17 	ldw	r2,-4(fp)
   12e20:	00c00344 	movi	r3,13
   12e24:	10c00005 	stb	r3,0(r2)
        return;
   12e28:	00006806 	br	12fcc <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e2c:	0005303a 	rdctl	r2,status
   12e30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e34:	e0fff817 	ldw	r3,-32(fp)
   12e38:	00bfff84 	movi	r2,-2
   12e3c:	1884703a 	and	r2,r3,r2
   12e40:	1001703a 	wrctl	status,r2
  
  return context;
   12e44:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12e48:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   12e4c:	e0bffd17 	ldw	r2,-12(fp)
   12e50:	1080020b 	ldhu	r2,8(r2)
   12e54:	10bfffcc 	andi	r2,r2,65535
   12e58:	10000d26 	beq	r2,zero,12e90 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   12e5c:	e0bffd17 	ldw	r2,-12(fp)
   12e60:	1080020b 	ldhu	r2,8(r2)
   12e64:	10bfffc4 	addi	r2,r2,-1
   12e68:	1007883a 	mov	r3,r2
   12e6c:	e0bffd17 	ldw	r2,-12(fp)
   12e70:	10c0020d 	sth	r3,8(r2)
   12e74:	e0bff717 	ldw	r2,-36(fp)
   12e78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e7c:	e0bff917 	ldw	r2,-28(fp)
   12e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12e84:	e0bfff17 	ldw	r2,-4(fp)
   12e88:	10000005 	stb	zero,0(r2)
        return;
   12e8c:	00004f06 	br	12fcc <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   12e90:	008000b4 	movhi	r2,2
   12e94:	10b89804 	addi	r2,r2,-7584
   12e98:	10c00017 	ldw	r3,0(r2)
   12e9c:	008000b4 	movhi	r2,2
   12ea0:	10b89804 	addi	r2,r2,-7584
   12ea4:	10800017 	ldw	r2,0(r2)
   12ea8:	10800c03 	ldbu	r2,48(r2)
   12eac:	10800054 	ori	r2,r2,1
   12eb0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12eb4:	008000b4 	movhi	r2,2
   12eb8:	10b89804 	addi	r2,r2,-7584
   12ebc:	10800017 	ldw	r2,0(r2)
   12ec0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   12ec4:	008000b4 	movhi	r2,2
   12ec8:	10b89804 	addi	r2,r2,-7584
   12ecc:	10800017 	ldw	r2,0(r2)
   12ed0:	e0fffe0b 	ldhu	r3,-8(fp)
   12ed4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   12ed8:	e13ffd17 	ldw	r4,-12(fp)
   12edc:	000e6cc0 	call	e6cc <OS_EventTaskWait>
   12ee0:	e0bff717 	ldw	r2,-36(fp)
   12ee4:	e0bffa15 	stw	r2,-24(fp)
   12ee8:	e0bffa17 	ldw	r2,-24(fp)
   12eec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   12ef0:	000ef4c0 	call	ef4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ef4:	0005303a 	rdctl	r2,status
   12ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12efc:	e0fffb17 	ldw	r3,-20(fp)
   12f00:	00bfff84 	movi	r2,-2
   12f04:	1884703a 	and	r2,r3,r2
   12f08:	1001703a 	wrctl	status,r2
  
  return context;
   12f0c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12f10:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12f14:	008000b4 	movhi	r2,2
   12f18:	10b89804 	addi	r2,r2,-7584
   12f1c:	10800017 	ldw	r2,0(r2)
   12f20:	10800c43 	ldbu	r2,49(r2)
   12f24:	10803fcc 	andi	r2,r2,255
   12f28:	10000326 	beq	r2,zero,12f38 <OSSemPend+0x1c0>
   12f2c:	108000a0 	cmpeqi	r2,r2,2
   12f30:	1000041e 	bne	r2,zero,12f44 <OSSemPend+0x1cc>
   12f34:	00000706 	br	12f54 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   12f38:	e0bfff17 	ldw	r2,-4(fp)
   12f3c:	10000005 	stb	zero,0(r2)
             break;
   12f40:	00000e06 	br	12f7c <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12f44:	e0bfff17 	ldw	r2,-4(fp)
   12f48:	00c00384 	movi	r3,14
   12f4c:	10c00005 	stb	r3,0(r2)
             break;
   12f50:	00000a06 	br	12f7c <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   12f54:	008000b4 	movhi	r2,2
   12f58:	10b89804 	addi	r2,r2,-7584
   12f5c:	10800017 	ldw	r2,0(r2)
   12f60:	1009883a 	mov	r4,r2
   12f64:	e17ffd17 	ldw	r5,-12(fp)
   12f68:	000e9240 	call	e924 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12f6c:	e0bfff17 	ldw	r2,-4(fp)
   12f70:	00c00284 	movi	r3,10
   12f74:	10c00005 	stb	r3,0(r2)
             break;
   12f78:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12f7c:	008000b4 	movhi	r2,2
   12f80:	10b89804 	addi	r2,r2,-7584
   12f84:	10800017 	ldw	r2,0(r2)
   12f88:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12f8c:	008000b4 	movhi	r2,2
   12f90:	10b89804 	addi	r2,r2,-7584
   12f94:	10800017 	ldw	r2,0(r2)
   12f98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12f9c:	008000b4 	movhi	r2,2
   12fa0:	10b89804 	addi	r2,r2,-7584
   12fa4:	10800017 	ldw	r2,0(r2)
   12fa8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12fac:	008000b4 	movhi	r2,2
   12fb0:	10b89804 	addi	r2,r2,-7584
   12fb4:	10800017 	ldw	r2,0(r2)
   12fb8:	10000815 	stw	zero,32(r2)
   12fbc:	e0bff717 	ldw	r2,-36(fp)
   12fc0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fc4:	e0bffc17 	ldw	r2,-16(fp)
   12fc8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   12fcc:	e037883a 	mov	sp,fp
   12fd0:	dfc00117 	ldw	ra,4(sp)
   12fd4:	df000017 	ldw	fp,0(sp)
   12fd8:	dec00204 	addi	sp,sp,8
   12fdc:	f800283a 	ret

00012fe0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12fe0:	defff604 	addi	sp,sp,-40
   12fe4:	dfc00915 	stw	ra,36(sp)
   12fe8:	df000815 	stw	fp,32(sp)
   12fec:	df000804 	addi	fp,sp,32
   12ff0:	e13ffd15 	stw	r4,-12(fp)
   12ff4:	2805883a 	mov	r2,r5
   12ff8:	e1bfff15 	stw	r6,-4(fp)
   12ffc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13000:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	1000021e 	bne	r2,zero,13014 <OSSemPendAbort+0x34>
        return (0);
   1300c:	0005883a 	mov	r2,zero
   13010:	00004906 	br	13138 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13014:	e0bffd17 	ldw	r2,-12(fp)
   13018:	1000051e 	bne	r2,zero,13030 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1301c:	e0bfff17 	ldw	r2,-4(fp)
   13020:	00c00104 	movi	r3,4
   13024:	10c00005 	stb	r3,0(r2)
        return (0);
   13028:	0005883a 	mov	r2,zero
   1302c:	00004206 	br	13138 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13030:	e0bffd17 	ldw	r2,-12(fp)
   13034:	10800003 	ldbu	r2,0(r2)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	108000e0 	cmpeqi	r2,r2,3
   13040:	1000051e 	bne	r2,zero,13058 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13044:	e0bfff17 	ldw	r2,-4(fp)
   13048:	00c00044 	movi	r3,1
   1304c:	10c00005 	stb	r3,0(r2)
        return (0);
   13050:	0005883a 	mov	r2,zero
   13054:	00003806 	br	13138 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13058:	0005303a 	rdctl	r2,status
   1305c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13060:	e0fffa17 	ldw	r3,-24(fp)
   13064:	00bfff84 	movi	r2,-2
   13068:	1884703a 	and	r2,r3,r2
   1306c:	1001703a 	wrctl	status,r2
  
  return context;
   13070:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13074:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13078:	e0bffd17 	ldw	r2,-12(fp)
   1307c:	10800283 	ldbu	r2,10(r2)
   13080:	10803fcc 	andi	r2,r2,255
   13084:	10002526 	beq	r2,zero,1311c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13088:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1308c:	e0bffe03 	ldbu	r2,-8(fp)
   13090:	10800060 	cmpeqi	r2,r2,1
   13094:	10000e26 	beq	r2,zero,130d0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13098:	00000806 	br	130bc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1309c:	e13ffd17 	ldw	r4,-12(fp)
   130a0:	000b883a 	mov	r5,zero
   130a4:	01800044 	movi	r6,1
   130a8:	01c00084 	movi	r7,2
   130ac:	000e5340 	call	e534 <OS_EventTaskRdy>
                     nbr_tasks++;
   130b0:	e0bff803 	ldbu	r2,-32(fp)
   130b4:	10800044 	addi	r2,r2,1
   130b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   130bc:	e0bffd17 	ldw	r2,-12(fp)
   130c0:	10800283 	ldbu	r2,10(r2)
   130c4:	10803fcc 	andi	r2,r2,255
   130c8:	103ff41e 	bne	r2,zero,1309c <__alt_mem_Flash_flash_data+0xf401309c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   130cc:	00000906 	br	130f4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   130d0:	e13ffd17 	ldw	r4,-12(fp)
   130d4:	000b883a 	mov	r5,zero
   130d8:	01800044 	movi	r6,1
   130dc:	01c00084 	movi	r7,2
   130e0:	000e5340 	call	e534 <OS_EventTaskRdy>
                 nbr_tasks++;
   130e4:	e0bff803 	ldbu	r2,-32(fp)
   130e8:	10800044 	addi	r2,r2,1
   130ec:	e0bff805 	stb	r2,-32(fp)
                 break;
   130f0:	0001883a 	nop
   130f4:	e0bff917 	ldw	r2,-28(fp)
   130f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130fc:	e0bffb17 	ldw	r2,-20(fp)
   13100:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13104:	000ef4c0 	call	ef4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13108:	e0bfff17 	ldw	r2,-4(fp)
   1310c:	00c00384 	movi	r3,14
   13110:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13114:	e0bff803 	ldbu	r2,-32(fp)
   13118:	00000706 	br	13138 <OSSemPendAbort+0x158>
   1311c:	e0bff917 	ldw	r2,-28(fp)
   13120:	e0bffc15 	stw	r2,-16(fp)
   13124:	e0bffc17 	ldw	r2,-16(fp)
   13128:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1312c:	e0bfff17 	ldw	r2,-4(fp)
   13130:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13134:	0005883a 	mov	r2,zero
}
   13138:	e037883a 	mov	sp,fp
   1313c:	dfc00117 	ldw	ra,4(sp)
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00204 	addi	sp,sp,8
   13148:	f800283a 	ret

0001314c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1314c:	defff804 	addi	sp,sp,-32
   13150:	dfc00715 	stw	ra,28(sp)
   13154:	df000615 	stw	fp,24(sp)
   13158:	df000604 	addi	fp,sp,24
   1315c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13160:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13164:	e0bfff17 	ldw	r2,-4(fp)
   13168:	1000021e 	bne	r2,zero,13174 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1316c:	00800104 	movi	r2,4
   13170:	00003506 	br	13248 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13174:	e0bfff17 	ldw	r2,-4(fp)
   13178:	10800003 	ldbu	r2,0(r2)
   1317c:	10803fcc 	andi	r2,r2,255
   13180:	108000e0 	cmpeqi	r2,r2,3
   13184:	1000021e 	bne	r2,zero,13190 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13188:	00800044 	movi	r2,1
   1318c:	00002e06 	br	13248 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13190:	0005303a 	rdctl	r2,status
   13194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13198:	e0fffb17 	ldw	r3,-20(fp)
   1319c:	00bfff84 	movi	r2,-2
   131a0:	1884703a 	and	r2,r3,r2
   131a4:	1001703a 	wrctl	status,r2
  
  return context;
   131a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   131ac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	10800283 	ldbu	r2,10(r2)
   131b8:	10803fcc 	andi	r2,r2,255
   131bc:	10000c26 	beq	r2,zero,131f0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   131c0:	e13fff17 	ldw	r4,-4(fp)
   131c4:	000b883a 	mov	r5,zero
   131c8:	01800044 	movi	r6,1
   131cc:	000f883a 	mov	r7,zero
   131d0:	000e5340 	call	e534 <OS_EventTaskRdy>
   131d4:	e0bffa17 	ldw	r2,-24(fp)
   131d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131dc:	e0bffc17 	ldw	r2,-16(fp)
   131e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   131e4:	000ef4c0 	call	ef4c <OS_Sched>
        return (OS_ERR_NONE);
   131e8:	0005883a 	mov	r2,zero
   131ec:	00001606 	br	13248 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   131f0:	e0bfff17 	ldw	r2,-4(fp)
   131f4:	1080020b 	ldhu	r2,8(r2)
   131f8:	10ffffcc 	andi	r3,r2,65535
   131fc:	00bfffd4 	movui	r2,65535
   13200:	18800c26 	beq	r3,r2,13234 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13204:	e0bfff17 	ldw	r2,-4(fp)
   13208:	1080020b 	ldhu	r2,8(r2)
   1320c:	10800044 	addi	r2,r2,1
   13210:	1007883a 	mov	r3,r2
   13214:	e0bfff17 	ldw	r2,-4(fp)
   13218:	10c0020d 	sth	r3,8(r2)
   1321c:	e0bffa17 	ldw	r2,-24(fp)
   13220:	e0bffd15 	stw	r2,-12(fp)
   13224:	e0bffd17 	ldw	r2,-12(fp)
   13228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1322c:	0005883a 	mov	r2,zero
   13230:	00000506 	br	13248 <OSSemPost+0xfc>
   13234:	e0bffa17 	ldw	r2,-24(fp)
   13238:	e0bffe15 	stw	r2,-8(fp)
   1323c:	e0bffe17 	ldw	r2,-8(fp)
   13240:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13244:	00800c84 	movi	r2,50
}
   13248:	e037883a 	mov	sp,fp
   1324c:	dfc00117 	ldw	ra,4(sp)
   13250:	df000017 	ldw	fp,0(sp)
   13254:	dec00204 	addi	sp,sp,8
   13258:	f800283a 	ret

0001325c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1325c:	defff704 	addi	sp,sp,-36
   13260:	df000815 	stw	fp,32(sp)
   13264:	df000804 	addi	fp,sp,32
   13268:	e13ffe15 	stw	r4,-8(fp)
   1326c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13270:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13274:	e0bffe17 	ldw	r2,-8(fp)
   13278:	1000021e 	bne	r2,zero,13284 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1327c:	00800104 	movi	r2,4
   13280:	00003606 	br	1335c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13284:	e0bfff17 	ldw	r2,-4(fp)
   13288:	1000021e 	bne	r2,zero,13294 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1328c:	00800244 	movi	r2,9
   13290:	00003206 	br	1335c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13294:	e0bffe17 	ldw	r2,-8(fp)
   13298:	10800003 	ldbu	r2,0(r2)
   1329c:	10803fcc 	andi	r2,r2,255
   132a0:	108000e0 	cmpeqi	r2,r2,3
   132a4:	1000021e 	bne	r2,zero,132b0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   132a8:	00800044 	movi	r2,1
   132ac:	00002b06 	br	1335c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132b0:	0005303a 	rdctl	r2,status
   132b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132b8:	e0fffc17 	ldw	r3,-16(fp)
   132bc:	00bfff84 	movi	r2,-2
   132c0:	1884703a 	and	r2,r3,r2
   132c4:	1001703a 	wrctl	status,r2
  
  return context;
   132c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   132cc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   132d0:	e0bffe17 	ldw	r2,-8(fp)
   132d4:	10c00283 	ldbu	r3,10(r2)
   132d8:	e0bfff17 	ldw	r2,-4(fp)
   132dc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   132e0:	e0bffe17 	ldw	r2,-8(fp)
   132e4:	108002c4 	addi	r2,r2,11
   132e8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   132ec:	e0bfff17 	ldw	r2,-4(fp)
   132f0:	10800084 	addi	r2,r2,2
   132f4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   132f8:	e03ffa05 	stb	zero,-24(fp)
   132fc:	00000b06 	br	1332c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13300:	e0bff917 	ldw	r2,-28(fp)
   13304:	10c00044 	addi	r3,r2,1
   13308:	e0fff915 	stw	r3,-28(fp)
   1330c:	e0fff817 	ldw	r3,-32(fp)
   13310:	19000044 	addi	r4,r3,1
   13314:	e13ff815 	stw	r4,-32(fp)
   13318:	18c00003 	ldbu	r3,0(r3)
   1331c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13320:	e0bffa03 	ldbu	r2,-24(fp)
   13324:	10800044 	addi	r2,r2,1
   13328:	e0bffa05 	stb	r2,-24(fp)
   1332c:	e0bffa03 	ldbu	r2,-24(fp)
   13330:	108000f0 	cmpltui	r2,r2,3
   13334:	103ff21e 	bne	r2,zero,13300 <__alt_mem_Flash_flash_data+0xf4013300>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13338:	e0bffe17 	ldw	r2,-8(fp)
   1333c:	10c0020b 	ldhu	r3,8(r2)
   13340:	e0bfff17 	ldw	r2,-4(fp)
   13344:	10c0000d 	sth	r3,0(r2)
   13348:	e0bffb17 	ldw	r2,-20(fp)
   1334c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13350:	e0bffd17 	ldw	r2,-12(fp)
   13354:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13358:	0005883a 	mov	r2,zero
}
   1335c:	e037883a 	mov	sp,fp
   13360:	df000017 	ldw	fp,0(sp)
   13364:	dec00104 	addi	sp,sp,4
   13368:	f800283a 	ret

0001336c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1336c:	defff904 	addi	sp,sp,-28
   13370:	df000615 	stw	fp,24(sp)
   13374:	df000604 	addi	fp,sp,24
   13378:	e13ffd15 	stw	r4,-12(fp)
   1337c:	2805883a 	mov	r2,r5
   13380:	e1bfff15 	stw	r6,-4(fp)
   13384:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13388:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1338c:	e0bfff17 	ldw	r2,-4(fp)
   13390:	1000011e 	bne	r2,zero,13398 <OSSemSet+0x2c>
        return;
   13394:	00003006 	br	13458 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	1000041e 	bne	r2,zero,133b0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	00c00104 	movi	r3,4
   133a8:	10c00005 	stb	r3,0(r2)
        return;
   133ac:	00002a06 	br	13458 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   133b0:	e0bffd17 	ldw	r2,-12(fp)
   133b4:	10800003 	ldbu	r2,0(r2)
   133b8:	10803fcc 	andi	r2,r2,255
   133bc:	108000e0 	cmpeqi	r2,r2,3
   133c0:	1000041e 	bne	r2,zero,133d4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   133c4:	e0bfff17 	ldw	r2,-4(fp)
   133c8:	00c00044 	movi	r3,1
   133cc:	10c00005 	stb	r3,0(r2)
        return;
   133d0:	00002106 	br	13458 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133d4:	0005303a 	rdctl	r2,status
   133d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133dc:	e0fffb17 	ldw	r3,-20(fp)
   133e0:	00bfff84 	movi	r2,-2
   133e4:	1884703a 	and	r2,r3,r2
   133e8:	1001703a 	wrctl	status,r2
  
  return context;
   133ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   133f0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   133f4:	e0bfff17 	ldw	r2,-4(fp)
   133f8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	1080020b 	ldhu	r2,8(r2)
   13404:	10bfffcc 	andi	r2,r2,65535
   13408:	10000426 	beq	r2,zero,1341c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1340c:	e0bffd17 	ldw	r2,-12(fp)
   13410:	e0fffe0b 	ldhu	r3,-8(fp)
   13414:	10c0020d 	sth	r3,8(r2)
   13418:	00000b06 	br	13448 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1341c:	e0bffd17 	ldw	r2,-12(fp)
   13420:	10800283 	ldbu	r2,10(r2)
   13424:	10803fcc 	andi	r2,r2,255
   13428:	1000041e 	bne	r2,zero,1343c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1342c:	e0bffd17 	ldw	r2,-12(fp)
   13430:	e0fffe0b 	ldhu	r3,-8(fp)
   13434:	10c0020d 	sth	r3,8(r2)
   13438:	00000306 	br	13448 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	00c01244 	movi	r3,73
   13444:	10c00005 	stb	r3,0(r2)
   13448:	e0bffa17 	ldw	r2,-24(fp)
   1344c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13450:	e0bffc17 	ldw	r2,-16(fp)
   13454:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   13458:	e037883a 	mov	sp,fp
   1345c:	df000017 	ldw	fp,0(sp)
   13460:	dec00104 	addi	sp,sp,4
   13464:	f800283a 	ret

00013468 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13468:	defff104 	addi	sp,sp,-60
   1346c:	dfc00e15 	stw	ra,56(sp)
   13470:	df000d15 	stw	fp,52(sp)
   13474:	df000d04 	addi	fp,sp,52
   13478:	2007883a 	mov	r3,r4
   1347c:	2805883a 	mov	r2,r5
   13480:	e0fffe05 	stb	r3,-8(fp)
   13484:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13488:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1348c:	e0bffe03 	ldbu	r2,-8(fp)
   13490:	10800530 	cmpltui	r2,r2,20
   13494:	1000051e 	bne	r2,zero,134ac <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13498:	e0bffe03 	ldbu	r2,-8(fp)
   1349c:	10803fe0 	cmpeqi	r2,r2,255
   134a0:	1000021e 	bne	r2,zero,134ac <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   134a4:	00800a84 	movi	r2,42
   134a8:	00013a06 	br	13994 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   134ac:	e0bfff03 	ldbu	r2,-4(fp)
   134b0:	10800530 	cmpltui	r2,r2,20
   134b4:	1000021e 	bne	r2,zero,134c0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   134b8:	00800a84 	movi	r2,42
   134bc:	00013506 	br	13994 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134c0:	0005303a 	rdctl	r2,status
   134c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134c8:	e0fff917 	ldw	r3,-28(fp)
   134cc:	00bfff84 	movi	r2,-2
   134d0:	1884703a 	and	r2,r3,r2
   134d4:	1001703a 	wrctl	status,r2
  
  return context;
   134d8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   134dc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   134e0:	e0ffff03 	ldbu	r3,-4(fp)
   134e4:	008000b4 	movhi	r2,2
   134e8:	10952a04 	addi	r2,r2,21672
   134ec:	18c7883a 	add	r3,r3,r3
   134f0:	18c7883a 	add	r3,r3,r3
   134f4:	10c5883a 	add	r2,r2,r3
   134f8:	10800017 	ldw	r2,0(r2)
   134fc:	10000626 	beq	r2,zero,13518 <OSTaskChangePrio+0xb0>
   13500:	e0bff517 	ldw	r2,-44(fp)
   13504:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13508:	e0bffa17 	ldw	r2,-24(fp)
   1350c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13510:	00800a04 	movi	r2,40
   13514:	00011f06 	br	13994 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13518:	e0bffe03 	ldbu	r2,-8(fp)
   1351c:	10803fd8 	cmpnei	r2,r2,255
   13520:	1000051e 	bne	r2,zero,13538 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13524:	008000b4 	movhi	r2,2
   13528:	10b89804 	addi	r2,r2,-7584
   1352c:	10800017 	ldw	r2,0(r2)
   13530:	10800c83 	ldbu	r2,50(r2)
   13534:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13538:	e0fffe03 	ldbu	r3,-8(fp)
   1353c:	008000b4 	movhi	r2,2
   13540:	10952a04 	addi	r2,r2,21672
   13544:	18c7883a 	add	r3,r3,r3
   13548:	18c7883a 	add	r3,r3,r3
   1354c:	10c5883a 	add	r2,r2,r3
   13550:	10800017 	ldw	r2,0(r2)
   13554:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13558:	e0bff617 	ldw	r2,-40(fp)
   1355c:	1000061e 	bne	r2,zero,13578 <OSTaskChangePrio+0x110>
   13560:	e0bff517 	ldw	r2,-44(fp)
   13564:	e0bffb15 	stw	r2,-20(fp)
   13568:	e0bffb17 	ldw	r2,-20(fp)
   1356c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13570:	00800a44 	movi	r2,41
   13574:	00010706 	br	13994 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13578:	e0bff617 	ldw	r2,-40(fp)
   1357c:	10800058 	cmpnei	r2,r2,1
   13580:	1000061e 	bne	r2,zero,1359c <OSTaskChangePrio+0x134>
   13584:	e0bff517 	ldw	r2,-44(fp)
   13588:	e0bffc15 	stw	r2,-16(fp)
   1358c:	e0bffc17 	ldw	r2,-16(fp)
   13590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13594:	008010c4 	movi	r2,67
   13598:	0000fe06 	br	13994 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1359c:	e0bfff03 	ldbu	r2,-4(fp)
   135a0:	1004d0fa 	srli	r2,r2,3
   135a4:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   135a8:	e0bfff03 	ldbu	r2,-4(fp)
   135ac:	108001cc 	andi	r2,r2,7
   135b0:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   135b4:	e0bff703 	ldbu	r2,-36(fp)
   135b8:	00c00044 	movi	r3,1
   135bc:	1884983a 	sll	r2,r3,r2
   135c0:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   135c4:	e0bff743 	ldbu	r2,-35(fp)
   135c8:	00c00044 	movi	r3,1
   135cc:	1884983a 	sll	r2,r3,r2
   135d0:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   135d4:	e0fffe03 	ldbu	r3,-8(fp)
   135d8:	008000b4 	movhi	r2,2
   135dc:	10952a04 	addi	r2,r2,21672
   135e0:	18c7883a 	add	r3,r3,r3
   135e4:	18c7883a 	add	r3,r3,r3
   135e8:	10c5883a 	add	r2,r2,r3
   135ec:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   135f0:	e0ffff03 	ldbu	r3,-4(fp)
   135f4:	008000b4 	movhi	r2,2
   135f8:	10952a04 	addi	r2,r2,21672
   135fc:	18c7883a 	add	r3,r3,r3
   13600:	18c7883a 	add	r3,r3,r3
   13604:	10c5883a 	add	r2,r2,r3
   13608:	e0fff617 	ldw	r3,-40(fp)
   1360c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13610:	e0bff617 	ldw	r2,-40(fp)
   13614:	10800d03 	ldbu	r2,52(r2)
   13618:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1361c:	e0bff617 	ldw	r2,-40(fp)
   13620:	10800d83 	ldbu	r2,54(r2)
   13624:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13628:	e0bff617 	ldw	r2,-40(fp)
   1362c:	10800d43 	ldbu	r2,53(r2)
   13630:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13634:	e0fff803 	ldbu	r3,-32(fp)
   13638:	008000b4 	movhi	r2,2
   1363c:	10b89544 	addi	r2,r2,-7595
   13640:	10c5883a 	add	r2,r2,r3
   13644:	10c00003 	ldbu	r3,0(r2)
   13648:	e0bff883 	ldbu	r2,-30(fp)
   1364c:	1884703a 	and	r2,r3,r2
   13650:	10803fcc 	andi	r2,r2,255
   13654:	10003726 	beq	r2,zero,13734 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13658:	e0fff803 	ldbu	r3,-32(fp)
   1365c:	e13ff803 	ldbu	r4,-32(fp)
   13660:	008000b4 	movhi	r2,2
   13664:	10b89544 	addi	r2,r2,-7595
   13668:	1105883a 	add	r2,r2,r4
   1366c:	10800003 	ldbu	r2,0(r2)
   13670:	1009883a 	mov	r4,r2
   13674:	e0bff883 	ldbu	r2,-30(fp)
   13678:	0084303a 	nor	r2,zero,r2
   1367c:	2084703a 	and	r2,r4,r2
   13680:	1009883a 	mov	r4,r2
   13684:	008000b4 	movhi	r2,2
   13688:	10b89544 	addi	r2,r2,-7595
   1368c:	10c5883a 	add	r2,r2,r3
   13690:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13694:	e0fff803 	ldbu	r3,-32(fp)
   13698:	008000b4 	movhi	r2,2
   1369c:	10b89544 	addi	r2,r2,-7595
   136a0:	10c5883a 	add	r2,r2,r3
   136a4:	10800003 	ldbu	r2,0(r2)
   136a8:	10803fcc 	andi	r2,r2,255
   136ac:	10000b1e 	bne	r2,zero,136dc <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   136b0:	e0bff843 	ldbu	r2,-31(fp)
   136b4:	0084303a 	nor	r2,zero,r2
   136b8:	1007883a 	mov	r3,r2
   136bc:	008000b4 	movhi	r2,2
   136c0:	10b89504 	addi	r2,r2,-7596
   136c4:	10800003 	ldbu	r2,0(r2)
   136c8:	1884703a 	and	r2,r3,r2
   136cc:	1007883a 	mov	r3,r2
   136d0:	008000b4 	movhi	r2,2
   136d4:	10b89504 	addi	r2,r2,-7596
   136d8:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   136dc:	008000b4 	movhi	r2,2
   136e0:	10b89504 	addi	r2,r2,-7596
   136e4:	10c00003 	ldbu	r3,0(r2)
   136e8:	e0bff783 	ldbu	r2,-34(fp)
   136ec:	1884b03a 	or	r2,r3,r2
   136f0:	1007883a 	mov	r3,r2
   136f4:	008000b4 	movhi	r2,2
   136f8:	10b89504 	addi	r2,r2,-7596
   136fc:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   13700:	e0fff703 	ldbu	r3,-36(fp)
   13704:	e13ff703 	ldbu	r4,-36(fp)
   13708:	008000b4 	movhi	r2,2
   1370c:	10b89544 	addi	r2,r2,-7595
   13710:	1105883a 	add	r2,r2,r4
   13714:	11000003 	ldbu	r4,0(r2)
   13718:	e0bff7c3 	ldbu	r2,-33(fp)
   1371c:	2084b03a 	or	r2,r4,r2
   13720:	1009883a 	mov	r4,r2
   13724:	008000b4 	movhi	r2,2
   13728:	10b89544 	addi	r2,r2,-7595
   1372c:	10c5883a 	add	r2,r2,r3
   13730:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13734:	e0bff617 	ldw	r2,-40(fp)
   13738:	10800717 	ldw	r2,28(r2)
   1373c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13740:	e0bff317 	ldw	r2,-52(fp)
   13744:	10003326 	beq	r2,zero,13814 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13748:	e0bff803 	ldbu	r2,-32(fp)
   1374c:	e0fff803 	ldbu	r3,-32(fp)
   13750:	e13ff317 	ldw	r4,-52(fp)
   13754:	20c7883a 	add	r3,r4,r3
   13758:	18c00204 	addi	r3,r3,8
   1375c:	18c000c3 	ldbu	r3,3(r3)
   13760:	1809883a 	mov	r4,r3
   13764:	e0fff883 	ldbu	r3,-30(fp)
   13768:	00c6303a 	nor	r3,zero,r3
   1376c:	20c6703a 	and	r3,r4,r3
   13770:	1809883a 	mov	r4,r3
   13774:	e0fff317 	ldw	r3,-52(fp)
   13778:	1885883a 	add	r2,r3,r2
   1377c:	10800204 	addi	r2,r2,8
   13780:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13784:	e0bff803 	ldbu	r2,-32(fp)
   13788:	e0fff317 	ldw	r3,-52(fp)
   1378c:	1885883a 	add	r2,r3,r2
   13790:	10800204 	addi	r2,r2,8
   13794:	108000c3 	ldbu	r2,3(r2)
   13798:	10803fcc 	andi	r2,r2,255
   1379c:	1000091e 	bne	r2,zero,137c4 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   137a0:	e0bff317 	ldw	r2,-52(fp)
   137a4:	10800283 	ldbu	r2,10(r2)
   137a8:	1007883a 	mov	r3,r2
   137ac:	e0bff843 	ldbu	r2,-31(fp)
   137b0:	0084303a 	nor	r2,zero,r2
   137b4:	1884703a 	and	r2,r3,r2
   137b8:	1007883a 	mov	r3,r2
   137bc:	e0bff317 	ldw	r2,-52(fp)
   137c0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   137c4:	e0bff317 	ldw	r2,-52(fp)
   137c8:	10c00283 	ldbu	r3,10(r2)
   137cc:	e0bff783 	ldbu	r2,-34(fp)
   137d0:	1884b03a 	or	r2,r3,r2
   137d4:	1007883a 	mov	r3,r2
   137d8:	e0bff317 	ldw	r2,-52(fp)
   137dc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   137e0:	e0bff703 	ldbu	r2,-36(fp)
   137e4:	e0fff703 	ldbu	r3,-36(fp)
   137e8:	e13ff317 	ldw	r4,-52(fp)
   137ec:	20c7883a 	add	r3,r4,r3
   137f0:	18c00204 	addi	r3,r3,8
   137f4:	190000c3 	ldbu	r4,3(r3)
   137f8:	e0fff7c3 	ldbu	r3,-33(fp)
   137fc:	20c6b03a 	or	r3,r4,r3
   13800:	1809883a 	mov	r4,r3
   13804:	e0fff317 	ldw	r3,-52(fp)
   13808:	1885883a 	add	r2,r3,r2
   1380c:	10800204 	addi	r2,r2,8
   13810:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13814:	e0bff617 	ldw	r2,-40(fp)
   13818:	10800817 	ldw	r2,32(r2)
   1381c:	10004226 	beq	r2,zero,13928 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13820:	e0bff617 	ldw	r2,-40(fp)
   13824:	10800817 	ldw	r2,32(r2)
   13828:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1382c:	e0bff417 	ldw	r2,-48(fp)
   13830:	10800017 	ldw	r2,0(r2)
   13834:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13838:	00003906 	br	13920 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1383c:	e0bff803 	ldbu	r2,-32(fp)
   13840:	e0fff803 	ldbu	r3,-32(fp)
   13844:	e13ff317 	ldw	r4,-52(fp)
   13848:	20c7883a 	add	r3,r4,r3
   1384c:	18c00204 	addi	r3,r3,8
   13850:	18c000c3 	ldbu	r3,3(r3)
   13854:	1809883a 	mov	r4,r3
   13858:	e0fff883 	ldbu	r3,-30(fp)
   1385c:	00c6303a 	nor	r3,zero,r3
   13860:	20c6703a 	and	r3,r4,r3
   13864:	1809883a 	mov	r4,r3
   13868:	e0fff317 	ldw	r3,-52(fp)
   1386c:	1885883a 	add	r2,r3,r2
   13870:	10800204 	addi	r2,r2,8
   13874:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13878:	e0bff803 	ldbu	r2,-32(fp)
   1387c:	e0fff317 	ldw	r3,-52(fp)
   13880:	1885883a 	add	r2,r3,r2
   13884:	10800204 	addi	r2,r2,8
   13888:	108000c3 	ldbu	r2,3(r2)
   1388c:	10803fcc 	andi	r2,r2,255
   13890:	1000091e 	bne	r2,zero,138b8 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   13894:	e0bff317 	ldw	r2,-52(fp)
   13898:	10800283 	ldbu	r2,10(r2)
   1389c:	1007883a 	mov	r3,r2
   138a0:	e0bff843 	ldbu	r2,-31(fp)
   138a4:	0084303a 	nor	r2,zero,r2
   138a8:	1884703a 	and	r2,r3,r2
   138ac:	1007883a 	mov	r3,r2
   138b0:	e0bff317 	ldw	r2,-52(fp)
   138b4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   138b8:	e0bff317 	ldw	r2,-52(fp)
   138bc:	10c00283 	ldbu	r3,10(r2)
   138c0:	e0bff783 	ldbu	r2,-34(fp)
   138c4:	1884b03a 	or	r2,r3,r2
   138c8:	1007883a 	mov	r3,r2
   138cc:	e0bff317 	ldw	r2,-52(fp)
   138d0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   138d4:	e0bff703 	ldbu	r2,-36(fp)
   138d8:	e0fff703 	ldbu	r3,-36(fp)
   138dc:	e13ff317 	ldw	r4,-52(fp)
   138e0:	20c7883a 	add	r3,r4,r3
   138e4:	18c00204 	addi	r3,r3,8
   138e8:	190000c3 	ldbu	r4,3(r3)
   138ec:	e0fff7c3 	ldbu	r3,-33(fp)
   138f0:	20c6b03a 	or	r3,r4,r3
   138f4:	1809883a 	mov	r4,r3
   138f8:	e0fff317 	ldw	r3,-52(fp)
   138fc:	1885883a 	add	r2,r3,r2
   13900:	10800204 	addi	r2,r2,8
   13904:	110000c5 	stb	r4,3(r2)
            pevents++;
   13908:	e0bff417 	ldw	r2,-48(fp)
   1390c:	10800104 	addi	r2,r2,4
   13910:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13914:	e0bff417 	ldw	r2,-48(fp)
   13918:	10800017 	ldw	r2,0(r2)
   1391c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13920:	e0bff317 	ldw	r2,-52(fp)
   13924:	103fc51e 	bne	r2,zero,1383c <__alt_mem_Flash_flash_data+0xf401383c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13928:	e0bff617 	ldw	r2,-40(fp)
   1392c:	e0ffff03 	ldbu	r3,-4(fp)
   13930:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13934:	e0bff617 	ldw	r2,-40(fp)
   13938:	e0fff703 	ldbu	r3,-36(fp)
   1393c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13940:	e0bff617 	ldw	r2,-40(fp)
   13944:	e0fff743 	ldbu	r3,-35(fp)
   13948:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1394c:	e0bff617 	ldw	r2,-40(fp)
   13950:	e0fff783 	ldbu	r3,-34(fp)
   13954:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13958:	e0bff617 	ldw	r2,-40(fp)
   1395c:	e0fff7c3 	ldbu	r3,-33(fp)
   13960:	10c00d45 	stb	r3,53(r2)
   13964:	e0bff517 	ldw	r2,-44(fp)
   13968:	e0bffd15 	stw	r2,-12(fp)
   1396c:	e0bffd17 	ldw	r2,-12(fp)
   13970:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13974:	008000b4 	movhi	r2,2
   13978:	10b88944 	addi	r2,r2,-7643
   1397c:	10800003 	ldbu	r2,0(r2)
   13980:	10803fcc 	andi	r2,r2,255
   13984:	10800058 	cmpnei	r2,r2,1
   13988:	1000011e 	bne	r2,zero,13990 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1398c:	000ef4c0 	call	ef4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   13990:	0005883a 	mov	r2,zero
}
   13994:	e037883a 	mov	sp,fp
   13998:	dfc00117 	ldw	ra,4(sp)
   1399c:	df000017 	ldw	fp,0(sp)
   139a0:	dec00204 	addi	sp,sp,8
   139a4:	f800283a 	ret

000139a8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   139a8:	deffee04 	addi	sp,sp,-72
   139ac:	dfc01115 	stw	ra,68(sp)
   139b0:	df001015 	stw	fp,64(sp)
   139b4:	df001004 	addi	fp,sp,64
   139b8:	e13ffc15 	stw	r4,-16(fp)
   139bc:	e17ffd15 	stw	r5,-12(fp)
   139c0:	e1bffe15 	stw	r6,-8(fp)
   139c4:	3805883a 	mov	r2,r7
   139c8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   139cc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   139d0:	e0bfff03 	ldbu	r2,-4(fp)
   139d4:	10800570 	cmpltui	r2,r2,21
   139d8:	1000021e 	bne	r2,zero,139e4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   139dc:	00800a84 	movi	r2,42
   139e0:	00005b06 	br	13b50 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139e4:	0005303a 	rdctl	r2,status
   139e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139ec:	e0fff617 	ldw	r3,-40(fp)
   139f0:	00bfff84 	movi	r2,-2
   139f4:	1884703a 	and	r2,r3,r2
   139f8:	1001703a 	wrctl	status,r2
  
  return context;
   139fc:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13a00:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13a04:	008000b4 	movhi	r2,2
   13a08:	10b89704 	addi	r2,r2,-7588
   13a0c:	10800003 	ldbu	r2,0(r2)
   13a10:	10803fcc 	andi	r2,r2,255
   13a14:	10000626 	beq	r2,zero,13a30 <OSTaskCreate+0x88>
   13a18:	e0bff317 	ldw	r2,-52(fp)
   13a1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a20:	e0bff717 	ldw	r2,-36(fp)
   13a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13a28:	00800f04 	movi	r2,60
   13a2c:	00004806 	br	13b50 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13a30:	e0ffff03 	ldbu	r3,-4(fp)
   13a34:	008000b4 	movhi	r2,2
   13a38:	10952a04 	addi	r2,r2,21672
   13a3c:	18c7883a 	add	r3,r3,r3
   13a40:	18c7883a 	add	r3,r3,r3
   13a44:	10c5883a 	add	r2,r2,r3
   13a48:	10800017 	ldw	r2,0(r2)
   13a4c:	10003b1e 	bne	r2,zero,13b3c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13a50:	e0ffff03 	ldbu	r3,-4(fp)
   13a54:	008000b4 	movhi	r2,2
   13a58:	10952a04 	addi	r2,r2,21672
   13a5c:	18c7883a 	add	r3,r3,r3
   13a60:	18c7883a 	add	r3,r3,r3
   13a64:	10c5883a 	add	r2,r2,r3
   13a68:	00c00044 	movi	r3,1
   13a6c:	10c00015 	stw	r3,0(r2)
   13a70:	e0bff317 	ldw	r2,-52(fp)
   13a74:	e0bff815 	stw	r2,-32(fp)
   13a78:	e0bff817 	ldw	r2,-32(fp)
   13a7c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13a80:	e13ffc17 	ldw	r4,-16(fp)
   13a84:	e17ffd17 	ldw	r5,-12(fp)
   13a88:	e1bffe17 	ldw	r6,-8(fp)
   13a8c:	000f883a 	mov	r7,zero
   13a90:	0018c380 	call	18c38 <OSTaskStkInit>
   13a94:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13a98:	e0bfff03 	ldbu	r2,-4(fp)
   13a9c:	d8000015 	stw	zero,0(sp)
   13aa0:	d8000115 	stw	zero,4(sp)
   13aa4:	d8000215 	stw	zero,8(sp)
   13aa8:	1009883a 	mov	r4,r2
   13aac:	e17ff417 	ldw	r5,-48(fp)
   13ab0:	000d883a 	mov	r6,zero
   13ab4:	000f883a 	mov	r7,zero
   13ab8:	000f3500 	call	f350 <OS_TCBInit>
   13abc:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   13ac0:	e0bff503 	ldbu	r2,-44(fp)
   13ac4:	1000081e 	bne	r2,zero,13ae8 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   13ac8:	008000b4 	movhi	r2,2
   13acc:	10b88944 	addi	r2,r2,-7643
   13ad0:	10800003 	ldbu	r2,0(r2)
   13ad4:	10803fcc 	andi	r2,r2,255
   13ad8:	10800058 	cmpnei	r2,r2,1
   13adc:	1000151e 	bne	r2,zero,13b34 <OSTaskCreate+0x18c>
                OS_Sched();
   13ae0:	000ef4c0 	call	ef4c <OS_Sched>
   13ae4:	00001306 	br	13b34 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ae8:	0005303a 	rdctl	r2,status
   13aec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13af0:	e0fff917 	ldw	r3,-28(fp)
   13af4:	00bfff84 	movi	r2,-2
   13af8:	1884703a 	and	r2,r3,r2
   13afc:	1001703a 	wrctl	status,r2
  
  return context;
   13b00:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13b04:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   13b08:	e0ffff03 	ldbu	r3,-4(fp)
   13b0c:	008000b4 	movhi	r2,2
   13b10:	10952a04 	addi	r2,r2,21672
   13b14:	18c7883a 	add	r3,r3,r3
   13b18:	18c7883a 	add	r3,r3,r3
   13b1c:	10c5883a 	add	r2,r2,r3
   13b20:	10000015 	stw	zero,0(r2)
   13b24:	e0bff317 	ldw	r2,-52(fp)
   13b28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b2c:	e0bffa17 	ldw	r2,-24(fp)
   13b30:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13b34:	e0bff503 	ldbu	r2,-44(fp)
   13b38:	00000506 	br	13b50 <OSTaskCreate+0x1a8>
   13b3c:	e0bff317 	ldw	r2,-52(fp)
   13b40:	e0bffb15 	stw	r2,-20(fp)
   13b44:	e0bffb17 	ldw	r2,-20(fp)
   13b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13b4c:	00800a04 	movi	r2,40
}
   13b50:	e037883a 	mov	sp,fp
   13b54:	dfc00117 	ldw	ra,4(sp)
   13b58:	df000017 	ldw	fp,0(sp)
   13b5c:	dec00204 	addi	sp,sp,8
   13b60:	f800283a 	ret

00013b64 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   13b64:	deffec04 	addi	sp,sp,-80
   13b68:	dfc01315 	stw	ra,76(sp)
   13b6c:	df001215 	stw	fp,72(sp)
   13b70:	df001204 	addi	fp,sp,72
   13b74:	e13ffa15 	stw	r4,-24(fp)
   13b78:	e17ffb15 	stw	r5,-20(fp)
   13b7c:	e1bffc15 	stw	r6,-16(fp)
   13b80:	3809883a 	mov	r4,r7
   13b84:	e0c00217 	ldw	r3,8(fp)
   13b88:	e0800617 	ldw	r2,24(fp)
   13b8c:	e13ffd05 	stb	r4,-12(fp)
   13b90:	e0fffe0d 	sth	r3,-8(fp)
   13b94:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13b98:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13b9c:	e0bffd03 	ldbu	r2,-12(fp)
   13ba0:	10800570 	cmpltui	r2,r2,21
   13ba4:	1000021e 	bne	r2,zero,13bb0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   13ba8:	00800a84 	movi	r2,42
   13bac:	00006306 	br	13d3c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bb0:	0005303a 	rdctl	r2,status
   13bb4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bb8:	e0fff417 	ldw	r3,-48(fp)
   13bbc:	00bfff84 	movi	r2,-2
   13bc0:	1884703a 	and	r2,r3,r2
   13bc4:	1001703a 	wrctl	status,r2
  
  return context;
   13bc8:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13bcc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13bd0:	008000b4 	movhi	r2,2
   13bd4:	10b89704 	addi	r2,r2,-7588
   13bd8:	10800003 	ldbu	r2,0(r2)
   13bdc:	10803fcc 	andi	r2,r2,255
   13be0:	10000626 	beq	r2,zero,13bfc <OSTaskCreateExt+0x98>
   13be4:	e0bff117 	ldw	r2,-60(fp)
   13be8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bec:	e0bff517 	ldw	r2,-44(fp)
   13bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13bf4:	00800f04 	movi	r2,60
   13bf8:	00005006 	br	13d3c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13bfc:	e0fffd03 	ldbu	r3,-12(fp)
   13c00:	008000b4 	movhi	r2,2
   13c04:	10952a04 	addi	r2,r2,21672
   13c08:	18c7883a 	add	r3,r3,r3
   13c0c:	18c7883a 	add	r3,r3,r3
   13c10:	10c5883a 	add	r2,r2,r3
   13c14:	10800017 	ldw	r2,0(r2)
   13c18:	1000431e 	bne	r2,zero,13d28 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13c1c:	e0fffd03 	ldbu	r3,-12(fp)
   13c20:	008000b4 	movhi	r2,2
   13c24:	10952a04 	addi	r2,r2,21672
   13c28:	18c7883a 	add	r3,r3,r3
   13c2c:	18c7883a 	add	r3,r3,r3
   13c30:	10c5883a 	add	r2,r2,r3
   13c34:	00c00044 	movi	r3,1
   13c38:	10c00015 	stw	r3,0(r2)
   13c3c:	e0bff117 	ldw	r2,-60(fp)
   13c40:	e0bff615 	stw	r2,-40(fp)
   13c44:	e0bff617 	ldw	r2,-40(fp)
   13c48:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   13c4c:	e0bfff0b 	ldhu	r2,-4(fp)
   13c50:	e1000317 	ldw	r4,12(fp)
   13c54:	e1400417 	ldw	r5,16(fp)
   13c58:	100d883a 	mov	r6,r2
   13c5c:	0014cf00 	call	14cf0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   13c60:	e0bfff0b 	ldhu	r2,-4(fp)
   13c64:	e13ffa17 	ldw	r4,-24(fp)
   13c68:	e17ffb17 	ldw	r5,-20(fp)
   13c6c:	e1bffc17 	ldw	r6,-16(fp)
   13c70:	100f883a 	mov	r7,r2
   13c74:	0018c380 	call	18c38 <OSTaskStkInit>
   13c78:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   13c7c:	e13ffd03 	ldbu	r4,-12(fp)
   13c80:	e1fffe0b 	ldhu	r7,-8(fp)
   13c84:	e0bfff0b 	ldhu	r2,-4(fp)
   13c88:	e0c00417 	ldw	r3,16(fp)
   13c8c:	d8c00015 	stw	r3,0(sp)
   13c90:	e0c00517 	ldw	r3,20(fp)
   13c94:	d8c00115 	stw	r3,4(sp)
   13c98:	d8800215 	stw	r2,8(sp)
   13c9c:	e17ff217 	ldw	r5,-56(fp)
   13ca0:	e1800317 	ldw	r6,12(fp)
   13ca4:	000f3500 	call	f350 <OS_TCBInit>
   13ca8:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   13cac:	e0bff303 	ldbu	r2,-52(fp)
   13cb0:	1000081e 	bne	r2,zero,13cd4 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   13cb4:	008000b4 	movhi	r2,2
   13cb8:	10b88944 	addi	r2,r2,-7643
   13cbc:	10800003 	ldbu	r2,0(r2)
   13cc0:	10803fcc 	andi	r2,r2,255
   13cc4:	10800058 	cmpnei	r2,r2,1
   13cc8:	1000151e 	bne	r2,zero,13d20 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   13ccc:	000ef4c0 	call	ef4c <OS_Sched>
   13cd0:	00001306 	br	13d20 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cd4:	0005303a 	rdctl	r2,status
   13cd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cdc:	e0fff717 	ldw	r3,-36(fp)
   13ce0:	00bfff84 	movi	r2,-2
   13ce4:	1884703a 	and	r2,r3,r2
   13ce8:	1001703a 	wrctl	status,r2
  
  return context;
   13cec:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13cf0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   13cf4:	e0fffd03 	ldbu	r3,-12(fp)
   13cf8:	008000b4 	movhi	r2,2
   13cfc:	10952a04 	addi	r2,r2,21672
   13d00:	18c7883a 	add	r3,r3,r3
   13d04:	18c7883a 	add	r3,r3,r3
   13d08:	10c5883a 	add	r2,r2,r3
   13d0c:	10000015 	stw	zero,0(r2)
   13d10:	e0bff117 	ldw	r2,-60(fp)
   13d14:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d18:	e0bff817 	ldw	r2,-32(fp)
   13d1c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13d20:	e0bff303 	ldbu	r2,-52(fp)
   13d24:	00000506 	br	13d3c <OSTaskCreateExt+0x1d8>
   13d28:	e0bff117 	ldw	r2,-60(fp)
   13d2c:	e0bff915 	stw	r2,-28(fp)
   13d30:	e0bff917 	ldw	r2,-28(fp)
   13d34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13d38:	00800a04 	movi	r2,40
}
   13d3c:	e037883a 	mov	sp,fp
   13d40:	dfc00117 	ldw	ra,4(sp)
   13d44:	df000017 	ldw	fp,0(sp)
   13d48:	dec00204 	addi	sp,sp,8
   13d4c:	f800283a 	ret

00013d50 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   13d50:	defff404 	addi	sp,sp,-48
   13d54:	dfc00b15 	stw	ra,44(sp)
   13d58:	df000a15 	stw	fp,40(sp)
   13d5c:	df000a04 	addi	fp,sp,40
   13d60:	2005883a 	mov	r2,r4
   13d64:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   13d68:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   13d6c:	008000b4 	movhi	r2,2
   13d70:	10b89704 	addi	r2,r2,-7588
   13d74:	10800003 	ldbu	r2,0(r2)
   13d78:	10803fcc 	andi	r2,r2,255
   13d7c:	10000226 	beq	r2,zero,13d88 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   13d80:	00801004 	movi	r2,64
   13d84:	0000e506 	br	1411c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   13d88:	e0bfff03 	ldbu	r2,-4(fp)
   13d8c:	10800518 	cmpnei	r2,r2,20
   13d90:	1000021e 	bne	r2,zero,13d9c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   13d94:	00800f84 	movi	r2,62
   13d98:	0000e006 	br	1411c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   13d9c:	e0bfff03 	ldbu	r2,-4(fp)
   13da0:	10800530 	cmpltui	r2,r2,20
   13da4:	1000051e 	bne	r2,zero,13dbc <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   13da8:	e0bfff03 	ldbu	r2,-4(fp)
   13dac:	10803fe0 	cmpeqi	r2,r2,255
   13db0:	1000021e 	bne	r2,zero,13dbc <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   13db4:	00800a84 	movi	r2,42
   13db8:	0000d806 	br	1411c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dbc:	0005303a 	rdctl	r2,status
   13dc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dc4:	e0fff917 	ldw	r3,-28(fp)
   13dc8:	00bfff84 	movi	r2,-2
   13dcc:	1884703a 	and	r2,r3,r2
   13dd0:	1001703a 	wrctl	status,r2
  
  return context;
   13dd4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13dd8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   13ddc:	e0bfff03 	ldbu	r2,-4(fp)
   13de0:	10803fd8 	cmpnei	r2,r2,255
   13de4:	1000051e 	bne	r2,zero,13dfc <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   13de8:	008000b4 	movhi	r2,2
   13dec:	10b89804 	addi	r2,r2,-7584
   13df0:	10800017 	ldw	r2,0(r2)
   13df4:	10800c83 	ldbu	r2,50(r2)
   13df8:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13dfc:	e0ffff03 	ldbu	r3,-4(fp)
   13e00:	008000b4 	movhi	r2,2
   13e04:	10952a04 	addi	r2,r2,21672
   13e08:	18c7883a 	add	r3,r3,r3
   13e0c:	18c7883a 	add	r3,r3,r3
   13e10:	10c5883a 	add	r2,r2,r3
   13e14:	10800017 	ldw	r2,0(r2)
   13e18:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   13e1c:	e0bff717 	ldw	r2,-36(fp)
   13e20:	1000061e 	bne	r2,zero,13e3c <OSTaskDel+0xec>
   13e24:	e0bff617 	ldw	r2,-40(fp)
   13e28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e2c:	e0bffa17 	ldw	r2,-24(fp)
   13e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13e34:	008010c4 	movi	r2,67
   13e38:	0000b806 	br	1411c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   13e3c:	e0bff717 	ldw	r2,-36(fp)
   13e40:	10800058 	cmpnei	r2,r2,1
   13e44:	1000061e 	bne	r2,zero,13e60 <OSTaskDel+0x110>
   13e48:	e0bff617 	ldw	r2,-40(fp)
   13e4c:	e0bffb15 	stw	r2,-20(fp)
   13e50:	e0bffb17 	ldw	r2,-20(fp)
   13e54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   13e58:	00800f44 	movi	r2,61
   13e5c:	0000af06 	br	1411c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   13e60:	e0bff717 	ldw	r2,-36(fp)
   13e64:	10800d03 	ldbu	r2,52(r2)
   13e68:	10c03fcc 	andi	r3,r2,255
   13e6c:	e0bff717 	ldw	r2,-36(fp)
   13e70:	10800d03 	ldbu	r2,52(r2)
   13e74:	11003fcc 	andi	r4,r2,255
   13e78:	008000b4 	movhi	r2,2
   13e7c:	10b89544 	addi	r2,r2,-7595
   13e80:	1105883a 	add	r2,r2,r4
   13e84:	10800003 	ldbu	r2,0(r2)
   13e88:	1009883a 	mov	r4,r2
   13e8c:	e0bff717 	ldw	r2,-36(fp)
   13e90:	10800d43 	ldbu	r2,53(r2)
   13e94:	0084303a 	nor	r2,zero,r2
   13e98:	2084703a 	and	r2,r4,r2
   13e9c:	1009883a 	mov	r4,r2
   13ea0:	008000b4 	movhi	r2,2
   13ea4:	10b89544 	addi	r2,r2,-7595
   13ea8:	10c5883a 	add	r2,r2,r3
   13eac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   13eb0:	e0bff717 	ldw	r2,-36(fp)
   13eb4:	10800d03 	ldbu	r2,52(r2)
   13eb8:	10c03fcc 	andi	r3,r2,255
   13ebc:	008000b4 	movhi	r2,2
   13ec0:	10b89544 	addi	r2,r2,-7595
   13ec4:	10c5883a 	add	r2,r2,r3
   13ec8:	10800003 	ldbu	r2,0(r2)
   13ecc:	10803fcc 	andi	r2,r2,255
   13ed0:	10000c1e 	bne	r2,zero,13f04 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   13ed4:	e0bff717 	ldw	r2,-36(fp)
   13ed8:	10800d83 	ldbu	r2,54(r2)
   13edc:	0084303a 	nor	r2,zero,r2
   13ee0:	1007883a 	mov	r3,r2
   13ee4:	008000b4 	movhi	r2,2
   13ee8:	10b89504 	addi	r2,r2,-7596
   13eec:	10800003 	ldbu	r2,0(r2)
   13ef0:	1884703a 	and	r2,r3,r2
   13ef4:	1007883a 	mov	r3,r2
   13ef8:	008000b4 	movhi	r2,2
   13efc:	10b89504 	addi	r2,r2,-7596
   13f00:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   13f04:	e0bff717 	ldw	r2,-36(fp)
   13f08:	10800717 	ldw	r2,28(r2)
   13f0c:	10000526 	beq	r2,zero,13f24 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   13f10:	e0bff717 	ldw	r2,-36(fp)
   13f14:	10800717 	ldw	r2,28(r2)
   13f18:	e13ff717 	ldw	r4,-36(fp)
   13f1c:	100b883a 	mov	r5,r2
   13f20:	000e9240 	call	e924 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   13f24:	e0bff717 	ldw	r2,-36(fp)
   13f28:	10800817 	ldw	r2,32(r2)
   13f2c:	10000526 	beq	r2,zero,13f44 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   13f30:	e0bff717 	ldw	r2,-36(fp)
   13f34:	10800817 	ldw	r2,32(r2)
   13f38:	e13ff717 	ldw	r4,-36(fp)
   13f3c:	100b883a 	mov	r5,r2
   13f40:	000e9d80 	call	e9d8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   13f44:	e0bff717 	ldw	r2,-36(fp)
   13f48:	10800a17 	ldw	r2,40(r2)
   13f4c:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   13f50:	e0bff817 	ldw	r2,-32(fp)
   13f54:	10000226 	beq	r2,zero,13f60 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   13f58:	e13ff817 	ldw	r4,-32(fp)
   13f5c:	0010f2c0 	call	10f2c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   13f60:	e0bff717 	ldw	r2,-36(fp)
   13f64:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   13f68:	e0bff717 	ldw	r2,-36(fp)
   13f6c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13f70:	e0bff717 	ldw	r2,-36(fp)
   13f74:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   13f78:	008000b4 	movhi	r2,2
   13f7c:	10b88904 	addi	r2,r2,-7644
   13f80:	10800003 	ldbu	r2,0(r2)
   13f84:	10803fcc 	andi	r2,r2,255
   13f88:	10803fe0 	cmpeqi	r2,r2,255
   13f8c:	1000081e 	bne	r2,zero,13fb0 <OSTaskDel+0x260>
        OSLockNesting++;
   13f90:	008000b4 	movhi	r2,2
   13f94:	10b88904 	addi	r2,r2,-7644
   13f98:	10800003 	ldbu	r2,0(r2)
   13f9c:	10800044 	addi	r2,r2,1
   13fa0:	1007883a 	mov	r3,r2
   13fa4:	008000b4 	movhi	r2,2
   13fa8:	10b88904 	addi	r2,r2,-7644
   13fac:	10c00005 	stb	r3,0(r2)
   13fb0:	e0bff617 	ldw	r2,-40(fp)
   13fb4:	e0bffc15 	stw	r2,-16(fp)
   13fb8:	e0bffc17 	ldw	r2,-16(fp)
   13fbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   13fc0:	000e5180 	call	e518 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fc4:	0005303a 	rdctl	r2,status
   13fc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fcc:	e0fffd17 	ldw	r3,-12(fp)
   13fd0:	00bfff84 	movi	r2,-2
   13fd4:	1884703a 	and	r2,r3,r2
   13fd8:	1001703a 	wrctl	status,r2
  
  return context;
   13fdc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   13fe0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   13fe4:	008000b4 	movhi	r2,2
   13fe8:	10b88904 	addi	r2,r2,-7644
   13fec:	10800003 	ldbu	r2,0(r2)
   13ff0:	10803fcc 	andi	r2,r2,255
   13ff4:	10000826 	beq	r2,zero,14018 <OSTaskDel+0x2c8>
        OSLockNesting--;
   13ff8:	008000b4 	movhi	r2,2
   13ffc:	10b88904 	addi	r2,r2,-7644
   14000:	10800003 	ldbu	r2,0(r2)
   14004:	10bfffc4 	addi	r2,r2,-1
   14008:	1007883a 	mov	r3,r2
   1400c:	008000b4 	movhi	r2,2
   14010:	10b88904 	addi	r2,r2,-7644
   14014:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14018:	e13ff717 	ldw	r4,-36(fp)
   1401c:	0018db40 	call	18db4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14020:	008000b4 	movhi	r2,2
   14024:	10b89144 	addi	r2,r2,-7611
   14028:	10800003 	ldbu	r2,0(r2)
   1402c:	10bfffc4 	addi	r2,r2,-1
   14030:	1007883a 	mov	r3,r2
   14034:	008000b4 	movhi	r2,2
   14038:	10b89144 	addi	r2,r2,-7611
   1403c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14040:	e0ffff03 	ldbu	r3,-4(fp)
   14044:	008000b4 	movhi	r2,2
   14048:	10952a04 	addi	r2,r2,21672
   1404c:	18c7883a 	add	r3,r3,r3
   14050:	18c7883a 	add	r3,r3,r3
   14054:	10c5883a 	add	r2,r2,r3
   14058:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1405c:	e0bff717 	ldw	r2,-36(fp)
   14060:	10800617 	ldw	r2,24(r2)
   14064:	1000091e 	bne	r2,zero,1408c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14068:	e0bff717 	ldw	r2,-36(fp)
   1406c:	10800517 	ldw	r2,20(r2)
   14070:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14074:	e0bff717 	ldw	r2,-36(fp)
   14078:	10c00517 	ldw	r3,20(r2)
   1407c:	008000b4 	movhi	r2,2
   14080:	10b88c04 	addi	r2,r2,-7632
   14084:	10c00015 	stw	r3,0(r2)
   14088:	00000a06 	br	140b4 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1408c:	e0bff717 	ldw	r2,-36(fp)
   14090:	10800617 	ldw	r2,24(r2)
   14094:	e0fff717 	ldw	r3,-36(fp)
   14098:	18c00517 	ldw	r3,20(r3)
   1409c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   140a0:	e0bff717 	ldw	r2,-36(fp)
   140a4:	10800517 	ldw	r2,20(r2)
   140a8:	e0fff717 	ldw	r3,-36(fp)
   140ac:	18c00617 	ldw	r3,24(r3)
   140b0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   140b4:	008000b4 	movhi	r2,2
   140b8:	10b89004 	addi	r2,r2,-7616
   140bc:	10c00017 	ldw	r3,0(r2)
   140c0:	e0bff717 	ldw	r2,-36(fp)
   140c4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   140c8:	008000b4 	movhi	r2,2
   140cc:	10b89004 	addi	r2,r2,-7616
   140d0:	e0fff717 	ldw	r3,-36(fp)
   140d4:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   140d8:	e0bff717 	ldw	r2,-36(fp)
   140dc:	00c00fc4 	movi	r3,63
   140e0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   140e4:	e0bff717 	ldw	r2,-36(fp)
   140e8:	10001345 	stb	zero,77(r2)
   140ec:	e0bff617 	ldw	r2,-40(fp)
   140f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140f4:	e0bffe17 	ldw	r2,-8(fp)
   140f8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   140fc:	008000b4 	movhi	r2,2
   14100:	10b88944 	addi	r2,r2,-7643
   14104:	10800003 	ldbu	r2,0(r2)
   14108:	10803fcc 	andi	r2,r2,255
   1410c:	10800058 	cmpnei	r2,r2,1
   14110:	1000011e 	bne	r2,zero,14118 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   14114:	000ef4c0 	call	ef4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14118:	0005883a 	mov	r2,zero
}
   1411c:	e037883a 	mov	sp,fp
   14120:	dfc00117 	ldw	ra,4(sp)
   14124:	df000017 	ldw	fp,0(sp)
   14128:	dec00204 	addi	sp,sp,8
   1412c:	f800283a 	ret

00014130 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14130:	defff504 	addi	sp,sp,-44
   14134:	df000a15 	stw	fp,40(sp)
   14138:	df000a04 	addi	fp,sp,40
   1413c:	2005883a 	mov	r2,r4
   14140:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14144:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14148:	e0bfff03 	ldbu	r2,-4(fp)
   1414c:	10800518 	cmpnei	r2,r2,20
   14150:	1000021e 	bne	r2,zero,1415c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14154:	00800f84 	movi	r2,62
   14158:	00004706 	br	14278 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1415c:	e0bfff03 	ldbu	r2,-4(fp)
   14160:	10800530 	cmpltui	r2,r2,20
   14164:	1000051e 	bne	r2,zero,1417c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14168:	e0bfff03 	ldbu	r2,-4(fp)
   1416c:	10803fe0 	cmpeqi	r2,r2,255
   14170:	1000021e 	bne	r2,zero,1417c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14174:	00800a84 	movi	r2,42
   14178:	00003f06 	br	14278 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1417c:	e0bfff03 	ldbu	r2,-4(fp)
   14180:	10803fd8 	cmpnei	r2,r2,255
   14184:	1000131e 	bne	r2,zero,141d4 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14188:	0005303a 	rdctl	r2,status
   1418c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14190:	e0fff917 	ldw	r3,-28(fp)
   14194:	00bfff84 	movi	r2,-2
   14198:	1884703a 	and	r2,r3,r2
   1419c:	1001703a 	wrctl	status,r2
  
  return context;
   141a0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   141a4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   141a8:	008000b4 	movhi	r2,2
   141ac:	10b89804 	addi	r2,r2,-7584
   141b0:	10800017 	ldw	r2,0(r2)
   141b4:	10800dc3 	ldbu	r2,55(r2)
   141b8:	e0bff705 	stb	r2,-36(fp)
   141bc:	e0bff617 	ldw	r2,-40(fp)
   141c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141c4:	e0bffa17 	ldw	r2,-24(fp)
   141c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   141cc:	e0bff703 	ldbu	r2,-36(fp)
   141d0:	00002906 	br	14278 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141d4:	0005303a 	rdctl	r2,status
   141d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141dc:	e0fffb17 	ldw	r3,-20(fp)
   141e0:	00bfff84 	movi	r2,-2
   141e4:	1884703a 	and	r2,r3,r2
   141e8:	1001703a 	wrctl	status,r2
  
  return context;
   141ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   141f0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   141f4:	e0ffff03 	ldbu	r3,-4(fp)
   141f8:	008000b4 	movhi	r2,2
   141fc:	10952a04 	addi	r2,r2,21672
   14200:	18c7883a 	add	r3,r3,r3
   14204:	18c7883a 	add	r3,r3,r3
   14208:	10c5883a 	add	r2,r2,r3
   1420c:	10800017 	ldw	r2,0(r2)
   14210:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	1000061e 	bne	r2,zero,14234 <OSTaskDelReq+0x104>
   1421c:	e0bff617 	ldw	r2,-40(fp)
   14220:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14224:	e0bffc17 	ldw	r2,-16(fp)
   14228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1422c:	008010c4 	movi	r2,67
   14230:	00001106 	br	14278 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14234:	e0bff817 	ldw	r2,-32(fp)
   14238:	10800058 	cmpnei	r2,r2,1
   1423c:	1000061e 	bne	r2,zero,14258 <OSTaskDelReq+0x128>
   14240:	e0bff617 	ldw	r2,-40(fp)
   14244:	e0bffd15 	stw	r2,-12(fp)
   14248:	e0bffd17 	ldw	r2,-12(fp)
   1424c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14250:	00800f44 	movi	r2,61
   14254:	00000806 	br	14278 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14258:	e0bff817 	ldw	r2,-32(fp)
   1425c:	00c00fc4 	movi	r3,63
   14260:	10c00dc5 	stb	r3,55(r2)
   14264:	e0bff617 	ldw	r2,-40(fp)
   14268:	e0bffe15 	stw	r2,-8(fp)
   1426c:	e0bffe17 	ldw	r2,-8(fp)
   14270:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14274:	0005883a 	mov	r2,zero
}
   14278:	e037883a 	mov	sp,fp
   1427c:	df000017 	ldw	fp,0(sp)
   14280:	dec00104 	addi	sp,sp,4
   14284:	f800283a 	ret

00014288 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14288:	defff404 	addi	sp,sp,-48
   1428c:	dfc00b15 	stw	ra,44(sp)
   14290:	df000a15 	stw	fp,40(sp)
   14294:	df000a04 	addi	fp,sp,40
   14298:	2005883a 	mov	r2,r4
   1429c:	e17ffe15 	stw	r5,-8(fp)
   142a0:	e1bfff15 	stw	r6,-4(fp)
   142a4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   142a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   142ac:	e0bfff17 	ldw	r2,-4(fp)
   142b0:	1000021e 	bne	r2,zero,142bc <OSTaskNameGet+0x34>
        return (0);
   142b4:	0005883a 	mov	r2,zero
   142b8:	00005806 	br	1441c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   142bc:	e0bffd03 	ldbu	r2,-12(fp)
   142c0:	10800570 	cmpltui	r2,r2,21
   142c4:	1000081e 	bne	r2,zero,142e8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   142c8:	e0bffd03 	ldbu	r2,-12(fp)
   142cc:	10803fe0 	cmpeqi	r2,r2,255
   142d0:	1000051e 	bne	r2,zero,142e8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   142d4:	e0bfff17 	ldw	r2,-4(fp)
   142d8:	00c00a84 	movi	r3,42
   142dc:	10c00005 	stb	r3,0(r2)
            return (0);
   142e0:	0005883a 	mov	r2,zero
   142e4:	00004d06 	br	1441c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   142e8:	e0bffe17 	ldw	r2,-8(fp)
   142ec:	1000051e 	bne	r2,zero,14304 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	00c00304 	movi	r3,12
   142f8:	10c00005 	stb	r3,0(r2)
        return (0);
   142fc:	0005883a 	mov	r2,zero
   14300:	00004606 	br	1441c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14304:	008000b4 	movhi	r2,2
   14308:	10b89704 	addi	r2,r2,-7588
   1430c:	10800003 	ldbu	r2,0(r2)
   14310:	10803fcc 	andi	r2,r2,255
   14314:	10000526 	beq	r2,zero,1432c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   14318:	e0bfff17 	ldw	r2,-4(fp)
   1431c:	00c00444 	movi	r3,17
   14320:	10c00005 	stb	r3,0(r2)
        return (0);
   14324:	0005883a 	mov	r2,zero
   14328:	00003c06 	br	1441c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1432c:	0005303a 	rdctl	r2,status
   14330:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14334:	e0fff917 	ldw	r3,-28(fp)
   14338:	00bfff84 	movi	r2,-2
   1433c:	1884703a 	and	r2,r3,r2
   14340:	1001703a 	wrctl	status,r2
  
  return context;
   14344:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14348:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1434c:	e0bffd03 	ldbu	r2,-12(fp)
   14350:	10803fd8 	cmpnei	r2,r2,255
   14354:	1000051e 	bne	r2,zero,1436c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   14358:	008000b4 	movhi	r2,2
   1435c:	10b89804 	addi	r2,r2,-7584
   14360:	10800017 	ldw	r2,0(r2)
   14364:	10800c83 	ldbu	r2,50(r2)
   14368:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1436c:	e0fffd03 	ldbu	r3,-12(fp)
   14370:	008000b4 	movhi	r2,2
   14374:	10952a04 	addi	r2,r2,21672
   14378:	18c7883a 	add	r3,r3,r3
   1437c:	18c7883a 	add	r3,r3,r3
   14380:	10c5883a 	add	r2,r2,r3
   14384:	10800017 	ldw	r2,0(r2)
   14388:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1438c:	e0bff717 	ldw	r2,-36(fp)
   14390:	1000091e 	bne	r2,zero,143b8 <OSTaskNameGet+0x130>
   14394:	e0bff617 	ldw	r2,-40(fp)
   14398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1439c:	e0bffa17 	ldw	r2,-24(fp)
   143a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   143a4:	e0bfff17 	ldw	r2,-4(fp)
   143a8:	00c010c4 	movi	r3,67
   143ac:	10c00005 	stb	r3,0(r2)
        return (0);
   143b0:	0005883a 	mov	r2,zero
   143b4:	00001906 	br	1441c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   143b8:	e0bff717 	ldw	r2,-36(fp)
   143bc:	10800058 	cmpnei	r2,r2,1
   143c0:	1000091e 	bne	r2,zero,143e8 <OSTaskNameGet+0x160>
   143c4:	e0bff617 	ldw	r2,-40(fp)
   143c8:	e0bffb15 	stw	r2,-20(fp)
   143cc:	e0bffb17 	ldw	r2,-20(fp)
   143d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   143d4:	e0bfff17 	ldw	r2,-4(fp)
   143d8:	00c010c4 	movi	r3,67
   143dc:	10c00005 	stb	r3,0(r2)
        return (0);
   143e0:	0005883a 	mov	r2,zero
   143e4:	00000d06 	br	1441c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   143e8:	e0bff717 	ldw	r2,-36(fp)
   143ec:	10801304 	addi	r2,r2,76
   143f0:	e13ffe17 	ldw	r4,-8(fp)
   143f4:	100b883a 	mov	r5,r2
   143f8:	000f0880 	call	f088 <OS_StrCopy>
   143fc:	e0bff805 	stb	r2,-32(fp)
   14400:	e0bff617 	ldw	r2,-40(fp)
   14404:	e0bffc15 	stw	r2,-16(fp)
   14408:	e0bffc17 	ldw	r2,-16(fp)
   1440c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14410:	e0bfff17 	ldw	r2,-4(fp)
   14414:	10000005 	stb	zero,0(r2)
    return (len);
   14418:	e0bff803 	ldbu	r2,-32(fp)
}
   1441c:	e037883a 	mov	sp,fp
   14420:	dfc00117 	ldw	ra,4(sp)
   14424:	df000017 	ldw	fp,0(sp)
   14428:	dec00204 	addi	sp,sp,8
   1442c:	f800283a 	ret

00014430 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14430:	defff304 	addi	sp,sp,-52
   14434:	dfc00c15 	stw	ra,48(sp)
   14438:	df000b15 	stw	fp,44(sp)
   1443c:	df000b04 	addi	fp,sp,44
   14440:	2005883a 	mov	r2,r4
   14444:	e17ffe15 	stw	r5,-8(fp)
   14448:	e1bfff15 	stw	r6,-4(fp)
   1444c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14450:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14454:	e0bfff17 	ldw	r2,-4(fp)
   14458:	1000011e 	bne	r2,zero,14460 <OSTaskNameSet+0x30>
        return;
   1445c:	00005f06 	br	145dc <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14460:	e0bffd03 	ldbu	r2,-12(fp)
   14464:	10800570 	cmpltui	r2,r2,21
   14468:	1000071e 	bne	r2,zero,14488 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1446c:	e0bffd03 	ldbu	r2,-12(fp)
   14470:	10803fe0 	cmpeqi	r2,r2,255
   14474:	1000041e 	bne	r2,zero,14488 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14478:	e0bfff17 	ldw	r2,-4(fp)
   1447c:	00c00a84 	movi	r3,42
   14480:	10c00005 	stb	r3,0(r2)
            return;
   14484:	00005506 	br	145dc <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14488:	e0bffe17 	ldw	r2,-8(fp)
   1448c:	1000041e 	bne	r2,zero,144a0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14490:	e0bfff17 	ldw	r2,-4(fp)
   14494:	00c00304 	movi	r3,12
   14498:	10c00005 	stb	r3,0(r2)
        return;
   1449c:	00004f06 	br	145dc <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   144a0:	008000b4 	movhi	r2,2
   144a4:	10b89704 	addi	r2,r2,-7588
   144a8:	10800003 	ldbu	r2,0(r2)
   144ac:	10803fcc 	andi	r2,r2,255
   144b0:	10000426 	beq	r2,zero,144c4 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   144b4:	e0bfff17 	ldw	r2,-4(fp)
   144b8:	00c00484 	movi	r3,18
   144bc:	10c00005 	stb	r3,0(r2)
        return;
   144c0:	00004606 	br	145dc <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144c4:	0005303a 	rdctl	r2,status
   144c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144cc:	e0fff817 	ldw	r3,-32(fp)
   144d0:	00bfff84 	movi	r2,-2
   144d4:	1884703a 	and	r2,r3,r2
   144d8:	1001703a 	wrctl	status,r2
  
  return context;
   144dc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   144e0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   144e4:	e0bffd03 	ldbu	r2,-12(fp)
   144e8:	10803fd8 	cmpnei	r2,r2,255
   144ec:	1000051e 	bne	r2,zero,14504 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   144f0:	008000b4 	movhi	r2,2
   144f4:	10b89804 	addi	r2,r2,-7584
   144f8:	10800017 	ldw	r2,0(r2)
   144fc:	10800c83 	ldbu	r2,50(r2)
   14500:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14504:	e0fffd03 	ldbu	r3,-12(fp)
   14508:	008000b4 	movhi	r2,2
   1450c:	10952a04 	addi	r2,r2,21672
   14510:	18c7883a 	add	r3,r3,r3
   14514:	18c7883a 	add	r3,r3,r3
   14518:	10c5883a 	add	r2,r2,r3
   1451c:	10800017 	ldw	r2,0(r2)
   14520:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14524:	e0bff617 	ldw	r2,-40(fp)
   14528:	1000081e 	bne	r2,zero,1454c <OSTaskNameSet+0x11c>
   1452c:	e0bff517 	ldw	r2,-44(fp)
   14530:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14534:	e0bff917 	ldw	r2,-28(fp)
   14538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1453c:	e0bfff17 	ldw	r2,-4(fp)
   14540:	00c010c4 	movi	r3,67
   14544:	10c00005 	stb	r3,0(r2)
        return;
   14548:	00002406 	br	145dc <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1454c:	e0bff617 	ldw	r2,-40(fp)
   14550:	10800058 	cmpnei	r2,r2,1
   14554:	1000081e 	bne	r2,zero,14578 <OSTaskNameSet+0x148>
   14558:	e0bff517 	ldw	r2,-44(fp)
   1455c:	e0bffa15 	stw	r2,-24(fp)
   14560:	e0bffa17 	ldw	r2,-24(fp)
   14564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14568:	e0bfff17 	ldw	r2,-4(fp)
   1456c:	00c010c4 	movi	r3,67
   14570:	10c00005 	stb	r3,0(r2)
        return;
   14574:	00001906 	br	145dc <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14578:	e13ffe17 	ldw	r4,-8(fp)
   1457c:	000f0fc0 	call	f0fc <OS_StrLen>
   14580:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14584:	e0bff703 	ldbu	r2,-36(fp)
   14588:	10800830 	cmpltui	r2,r2,32
   1458c:	1000081e 	bne	r2,zero,145b0 <OSTaskNameSet+0x180>
   14590:	e0bff517 	ldw	r2,-44(fp)
   14594:	e0bffb15 	stw	r2,-20(fp)
   14598:	e0bffb17 	ldw	r2,-20(fp)
   1459c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   145a0:	e0bfff17 	ldw	r2,-4(fp)
   145a4:	00c01044 	movi	r3,65
   145a8:	10c00005 	stb	r3,0(r2)
        return;
   145ac:	00000b06 	br	145dc <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   145b0:	e0bff617 	ldw	r2,-40(fp)
   145b4:	10801304 	addi	r2,r2,76
   145b8:	1009883a 	mov	r4,r2
   145bc:	e17ffe17 	ldw	r5,-8(fp)
   145c0:	000f0880 	call	f088 <OS_StrCopy>
   145c4:	e0bff517 	ldw	r2,-44(fp)
   145c8:	e0bffc15 	stw	r2,-16(fp)
   145cc:	e0bffc17 	ldw	r2,-16(fp)
   145d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   145d4:	e0bfff17 	ldw	r2,-4(fp)
   145d8:	10000005 	stb	zero,0(r2)
}
   145dc:	e037883a 	mov	sp,fp
   145e0:	dfc00117 	ldw	ra,4(sp)
   145e4:	df000017 	ldw	fp,0(sp)
   145e8:	dec00204 	addi	sp,sp,8
   145ec:	f800283a 	ret

000145f0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   145f0:	defff404 	addi	sp,sp,-48
   145f4:	dfc00b15 	stw	ra,44(sp)
   145f8:	df000a15 	stw	fp,40(sp)
   145fc:	df000a04 	addi	fp,sp,40
   14600:	2005883a 	mov	r2,r4
   14604:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14608:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1460c:	e0bfff03 	ldbu	r2,-4(fp)
   14610:	10800530 	cmpltui	r2,r2,20
   14614:	1000021e 	bne	r2,zero,14620 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14618:	00800a84 	movi	r2,42
   1461c:	00006d06 	br	147d4 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14620:	0005303a 	rdctl	r2,status
   14624:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14628:	e0fff817 	ldw	r3,-32(fp)
   1462c:	00bfff84 	movi	r2,-2
   14630:	1884703a 	and	r2,r3,r2
   14634:	1001703a 	wrctl	status,r2
  
  return context;
   14638:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1463c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14640:	e0ffff03 	ldbu	r3,-4(fp)
   14644:	008000b4 	movhi	r2,2
   14648:	10952a04 	addi	r2,r2,21672
   1464c:	18c7883a 	add	r3,r3,r3
   14650:	18c7883a 	add	r3,r3,r3
   14654:	10c5883a 	add	r2,r2,r3
   14658:	10800017 	ldw	r2,0(r2)
   1465c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14660:	e0bff717 	ldw	r2,-36(fp)
   14664:	1000061e 	bne	r2,zero,14680 <OSTaskResume+0x90>
   14668:	e0bff617 	ldw	r2,-40(fp)
   1466c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14670:	e0bff917 	ldw	r2,-28(fp)
   14674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14678:	00801184 	movi	r2,70
   1467c:	00005506 	br	147d4 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14680:	e0bff717 	ldw	r2,-36(fp)
   14684:	10800058 	cmpnei	r2,r2,1
   14688:	1000061e 	bne	r2,zero,146a4 <OSTaskResume+0xb4>
   1468c:	e0bff617 	ldw	r2,-40(fp)
   14690:	e0bffa15 	stw	r2,-24(fp)
   14694:	e0bffa17 	ldw	r2,-24(fp)
   14698:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1469c:	008010c4 	movi	r2,67
   146a0:	00004c06 	br	147d4 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   146a4:	e0bff717 	ldw	r2,-36(fp)
   146a8:	10800c03 	ldbu	r2,48(r2)
   146ac:	10803fcc 	andi	r2,r2,255
   146b0:	1080020c 	andi	r2,r2,8
   146b4:	10004226 	beq	r2,zero,147c0 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   146b8:	e0bff717 	ldw	r2,-36(fp)
   146bc:	10c00c03 	ldbu	r3,48(r2)
   146c0:	00bffdc4 	movi	r2,-9
   146c4:	1884703a 	and	r2,r3,r2
   146c8:	1007883a 	mov	r3,r2
   146cc:	e0bff717 	ldw	r2,-36(fp)
   146d0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   146d4:	e0bff717 	ldw	r2,-36(fp)
   146d8:	10800c03 	ldbu	r2,48(r2)
   146dc:	10803fcc 	andi	r2,r2,255
   146e0:	1000311e 	bne	r2,zero,147a8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   146e4:	e0bff717 	ldw	r2,-36(fp)
   146e8:	10800b8b 	ldhu	r2,46(r2)
   146ec:	10bfffcc 	andi	r2,r2,65535
   146f0:	1000281e 	bne	r2,zero,14794 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   146f4:	e0bff717 	ldw	r2,-36(fp)
   146f8:	10c00d83 	ldbu	r3,54(r2)
   146fc:	008000b4 	movhi	r2,2
   14700:	10b89504 	addi	r2,r2,-7596
   14704:	10800003 	ldbu	r2,0(r2)
   14708:	1884b03a 	or	r2,r3,r2
   1470c:	1007883a 	mov	r3,r2
   14710:	008000b4 	movhi	r2,2
   14714:	10b89504 	addi	r2,r2,-7596
   14718:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1471c:	e0bff717 	ldw	r2,-36(fp)
   14720:	10800d03 	ldbu	r2,52(r2)
   14724:	10c03fcc 	andi	r3,r2,255
   14728:	e0bff717 	ldw	r2,-36(fp)
   1472c:	10800d03 	ldbu	r2,52(r2)
   14730:	11003fcc 	andi	r4,r2,255
   14734:	008000b4 	movhi	r2,2
   14738:	10b89544 	addi	r2,r2,-7595
   1473c:	1105883a 	add	r2,r2,r4
   14740:	11000003 	ldbu	r4,0(r2)
   14744:	e0bff717 	ldw	r2,-36(fp)
   14748:	10800d43 	ldbu	r2,53(r2)
   1474c:	2084b03a 	or	r2,r4,r2
   14750:	1009883a 	mov	r4,r2
   14754:	008000b4 	movhi	r2,2
   14758:	10b89544 	addi	r2,r2,-7595
   1475c:	10c5883a 	add	r2,r2,r3
   14760:	11000005 	stb	r4,0(r2)
   14764:	e0bff617 	ldw	r2,-40(fp)
   14768:	e0bffb15 	stw	r2,-20(fp)
   1476c:	e0bffb17 	ldw	r2,-20(fp)
   14770:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14774:	008000b4 	movhi	r2,2
   14778:	10b88944 	addi	r2,r2,-7643
   1477c:	10800003 	ldbu	r2,0(r2)
   14780:	10803fcc 	andi	r2,r2,255
   14784:	10800058 	cmpnei	r2,r2,1
   14788:	10000b1e 	bne	r2,zero,147b8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1478c:	000ef4c0 	call	ef4c <OS_Sched>
   14790:	00000906 	br	147b8 <OSTaskResume+0x1c8>
   14794:	e0bff617 	ldw	r2,-40(fp)
   14798:	e0bffc15 	stw	r2,-16(fp)
   1479c:	e0bffc17 	ldw	r2,-16(fp)
   147a0:	1001703a 	wrctl	status,r2
   147a4:	00000406 	br	147b8 <OSTaskResume+0x1c8>
   147a8:	e0bff617 	ldw	r2,-40(fp)
   147ac:	e0bffd15 	stw	r2,-12(fp)
   147b0:	e0bffd17 	ldw	r2,-12(fp)
   147b4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   147b8:	0005883a 	mov	r2,zero
   147bc:	00000506 	br	147d4 <OSTaskResume+0x1e4>
   147c0:	e0bff617 	ldw	r2,-40(fp)
   147c4:	e0bffe15 	stw	r2,-8(fp)
   147c8:	e0bffe17 	ldw	r2,-8(fp)
   147cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   147d0:	00801104 	movi	r2,68
}
   147d4:	e037883a 	mov	sp,fp
   147d8:	dfc00117 	ldw	ra,4(sp)
   147dc:	df000017 	ldw	fp,0(sp)
   147e0:	dec00204 	addi	sp,sp,8
   147e4:	f800283a 	ret

000147e8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   147e8:	defff304 	addi	sp,sp,-52
   147ec:	df000c15 	stw	fp,48(sp)
   147f0:	df000c04 	addi	fp,sp,48
   147f4:	2005883a 	mov	r2,r4
   147f8:	e17fff15 	stw	r5,-4(fp)
   147fc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14800:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14804:	e0bffe03 	ldbu	r2,-8(fp)
   14808:	10800570 	cmpltui	r2,r2,21
   1480c:	1000051e 	bne	r2,zero,14824 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14810:	e0bffe03 	ldbu	r2,-8(fp)
   14814:	10803fe0 	cmpeqi	r2,r2,255
   14818:	1000021e 	bne	r2,zero,14824 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1481c:	00800a84 	movi	r2,42
   14820:	00005f06 	br	149a0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14824:	e0bfff17 	ldw	r2,-4(fp)
   14828:	1000021e 	bne	r2,zero,14834 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1482c:	00800244 	movi	r2,9
   14830:	00005b06 	br	149a0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14834:	e0bfff17 	ldw	r2,-4(fp)
   14838:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1483c:	e0bfff17 	ldw	r2,-4(fp)
   14840:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14844:	0005303a 	rdctl	r2,status
   14848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1484c:	e0fff917 	ldw	r3,-28(fp)
   14850:	00bfff84 	movi	r2,-2
   14854:	1884703a 	and	r2,r3,r2
   14858:	1001703a 	wrctl	status,r2
  
  return context;
   1485c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14860:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14864:	e0bffe03 	ldbu	r2,-8(fp)
   14868:	10803fd8 	cmpnei	r2,r2,255
   1486c:	1000051e 	bne	r2,zero,14884 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14870:	008000b4 	movhi	r2,2
   14874:	10b89804 	addi	r2,r2,-7584
   14878:	10800017 	ldw	r2,0(r2)
   1487c:	10800c83 	ldbu	r2,50(r2)
   14880:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14884:	e0fffe03 	ldbu	r3,-8(fp)
   14888:	008000b4 	movhi	r2,2
   1488c:	10952a04 	addi	r2,r2,21672
   14890:	18c7883a 	add	r3,r3,r3
   14894:	18c7883a 	add	r3,r3,r3
   14898:	10c5883a 	add	r2,r2,r3
   1489c:	10800017 	ldw	r2,0(r2)
   148a0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   148a4:	e0bff717 	ldw	r2,-36(fp)
   148a8:	1000061e 	bne	r2,zero,148c4 <OSTaskStkChk+0xdc>
   148ac:	e0bff617 	ldw	r2,-40(fp)
   148b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148b4:	e0bffa17 	ldw	r2,-24(fp)
   148b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   148bc:	008010c4 	movi	r2,67
   148c0:	00003706 	br	149a0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   148c4:	e0bff717 	ldw	r2,-36(fp)
   148c8:	10800058 	cmpnei	r2,r2,1
   148cc:	1000061e 	bne	r2,zero,148e8 <OSTaskStkChk+0x100>
   148d0:	e0bff617 	ldw	r2,-40(fp)
   148d4:	e0bffb15 	stw	r2,-20(fp)
   148d8:	e0bffb17 	ldw	r2,-20(fp)
   148dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   148e0:	008010c4 	movi	r2,67
   148e4:	00002e06 	br	149a0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   148e8:	e0bff717 	ldw	r2,-36(fp)
   148ec:	1080040b 	ldhu	r2,16(r2)
   148f0:	10bfffcc 	andi	r2,r2,65535
   148f4:	1080004c 	andi	r2,r2,1
   148f8:	1000061e 	bne	r2,zero,14914 <OSTaskStkChk+0x12c>
   148fc:	e0bff617 	ldw	r2,-40(fp)
   14900:	e0bffc15 	stw	r2,-16(fp)
   14904:	e0bffc17 	ldw	r2,-16(fp)
   14908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1490c:	00801144 	movi	r2,69
   14910:	00002306 	br	149a0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   14914:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14918:	e0bff717 	ldw	r2,-36(fp)
   1491c:	10800317 	ldw	r2,12(r2)
   14920:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14924:	e0bff717 	ldw	r2,-36(fp)
   14928:	10800217 	ldw	r2,8(r2)
   1492c:	e0bff415 	stw	r2,-48(fp)
   14930:	e0bff617 	ldw	r2,-40(fp)
   14934:	e0bffd15 	stw	r2,-12(fp)
   14938:	e0bffd17 	ldw	r2,-12(fp)
   1493c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14940:	00000306 	br	14950 <OSTaskStkChk+0x168>
        nfree++;
   14944:	e0bff517 	ldw	r2,-44(fp)
   14948:	10800044 	addi	r2,r2,1
   1494c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14950:	e0bff417 	ldw	r2,-48(fp)
   14954:	10c00104 	addi	r3,r2,4
   14958:	e0fff415 	stw	r3,-48(fp)
   1495c:	10800017 	ldw	r2,0(r2)
   14960:	103ff826 	beq	r2,zero,14944 <__alt_mem_Flash_flash_data+0xf4014944>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14964:	e0bff517 	ldw	r2,-44(fp)
   14968:	1085883a 	add	r2,r2,r2
   1496c:	1085883a 	add	r2,r2,r2
   14970:	1007883a 	mov	r3,r2
   14974:	e0bfff17 	ldw	r2,-4(fp)
   14978:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1497c:	e0fff817 	ldw	r3,-32(fp)
   14980:	e0bff517 	ldw	r2,-44(fp)
   14984:	1885c83a 	sub	r2,r3,r2
   14988:	1085883a 	add	r2,r2,r2
   1498c:	1085883a 	add	r2,r2,r2
   14990:	1007883a 	mov	r3,r2
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1499c:	0005883a 	mov	r2,zero
}
   149a0:	e037883a 	mov	sp,fp
   149a4:	df000017 	ldw	fp,0(sp)
   149a8:	dec00104 	addi	sp,sp,4
   149ac:	f800283a 	ret

000149b0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   149b0:	defff504 	addi	sp,sp,-44
   149b4:	dfc00a15 	stw	ra,40(sp)
   149b8:	df000915 	stw	fp,36(sp)
   149bc:	df000904 	addi	fp,sp,36
   149c0:	2005883a 	mov	r2,r4
   149c4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   149c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   149cc:	e0bfff03 	ldbu	r2,-4(fp)
   149d0:	10800518 	cmpnei	r2,r2,20
   149d4:	1000021e 	bne	r2,zero,149e0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   149d8:	008011c4 	movi	r2,71
   149dc:	00007406 	br	14bb0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   149e0:	e0bfff03 	ldbu	r2,-4(fp)
   149e4:	10800530 	cmpltui	r2,r2,20
   149e8:	1000051e 	bne	r2,zero,14a00 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   149ec:	e0bfff03 	ldbu	r2,-4(fp)
   149f0:	10803fe0 	cmpeqi	r2,r2,255
   149f4:	1000021e 	bne	r2,zero,14a00 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   149f8:	00800a84 	movi	r2,42
   149fc:	00006c06 	br	14bb0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a00:	0005303a 	rdctl	r2,status
   14a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a08:	e0fffb17 	ldw	r3,-20(fp)
   14a0c:	00bfff84 	movi	r2,-2
   14a10:	1884703a 	and	r2,r3,r2
   14a14:	1001703a 	wrctl	status,r2
  
  return context;
   14a18:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14a1c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14a20:	e0bfff03 	ldbu	r2,-4(fp)
   14a24:	10803fd8 	cmpnei	r2,r2,255
   14a28:	1000081e 	bne	r2,zero,14a4c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14a2c:	008000b4 	movhi	r2,2
   14a30:	10b89804 	addi	r2,r2,-7584
   14a34:	10800017 	ldw	r2,0(r2)
   14a38:	10800c83 	ldbu	r2,50(r2)
   14a3c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14a40:	00800044 	movi	r2,1
   14a44:	e0bff705 	stb	r2,-36(fp)
   14a48:	00000b06 	br	14a78 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14a4c:	008000b4 	movhi	r2,2
   14a50:	10b89804 	addi	r2,r2,-7584
   14a54:	10800017 	ldw	r2,0(r2)
   14a58:	10800c83 	ldbu	r2,50(r2)
   14a5c:	10c03fcc 	andi	r3,r2,255
   14a60:	e0bfff03 	ldbu	r2,-4(fp)
   14a64:	1880031e 	bne	r3,r2,14a74 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   14a68:	00800044 	movi	r2,1
   14a6c:	e0bff705 	stb	r2,-36(fp)
   14a70:	00000106 	br	14a78 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   14a74:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14a78:	e0ffff03 	ldbu	r3,-4(fp)
   14a7c:	008000b4 	movhi	r2,2
   14a80:	10952a04 	addi	r2,r2,21672
   14a84:	18c7883a 	add	r3,r3,r3
   14a88:	18c7883a 	add	r3,r3,r3
   14a8c:	10c5883a 	add	r2,r2,r3
   14a90:	10800017 	ldw	r2,0(r2)
   14a94:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   14a98:	e0bff917 	ldw	r2,-28(fp)
   14a9c:	1000061e 	bne	r2,zero,14ab8 <OSTaskSuspend+0x108>
   14aa0:	e0bff817 	ldw	r2,-32(fp)
   14aa4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14aa8:	e0bffc17 	ldw	r2,-16(fp)
   14aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14ab0:	00801204 	movi	r2,72
   14ab4:	00003e06 	br	14bb0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14ab8:	e0bff917 	ldw	r2,-28(fp)
   14abc:	10800058 	cmpnei	r2,r2,1
   14ac0:	1000061e 	bne	r2,zero,14adc <OSTaskSuspend+0x12c>
   14ac4:	e0bff817 	ldw	r2,-32(fp)
   14ac8:	e0bffd15 	stw	r2,-12(fp)
   14acc:	e0bffd17 	ldw	r2,-12(fp)
   14ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ad4:	008010c4 	movi	r2,67
   14ad8:	00003506 	br	14bb0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   14adc:	e0bff917 	ldw	r2,-28(fp)
   14ae0:	10800d03 	ldbu	r2,52(r2)
   14ae4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   14ae8:	e0fffa03 	ldbu	r3,-24(fp)
   14aec:	e13ffa03 	ldbu	r4,-24(fp)
   14af0:	008000b4 	movhi	r2,2
   14af4:	10b89544 	addi	r2,r2,-7595
   14af8:	1105883a 	add	r2,r2,r4
   14afc:	10800003 	ldbu	r2,0(r2)
   14b00:	1009883a 	mov	r4,r2
   14b04:	e0bff917 	ldw	r2,-28(fp)
   14b08:	10800d43 	ldbu	r2,53(r2)
   14b0c:	0084303a 	nor	r2,zero,r2
   14b10:	2084703a 	and	r2,r4,r2
   14b14:	1009883a 	mov	r4,r2
   14b18:	008000b4 	movhi	r2,2
   14b1c:	10b89544 	addi	r2,r2,-7595
   14b20:	10c5883a 	add	r2,r2,r3
   14b24:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14b28:	e0fffa03 	ldbu	r3,-24(fp)
   14b2c:	008000b4 	movhi	r2,2
   14b30:	10b89544 	addi	r2,r2,-7595
   14b34:	10c5883a 	add	r2,r2,r3
   14b38:	10800003 	ldbu	r2,0(r2)
   14b3c:	10803fcc 	andi	r2,r2,255
   14b40:	10000c1e 	bne	r2,zero,14b74 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14b44:	e0bff917 	ldw	r2,-28(fp)
   14b48:	10800d83 	ldbu	r2,54(r2)
   14b4c:	0084303a 	nor	r2,zero,r2
   14b50:	1007883a 	mov	r3,r2
   14b54:	008000b4 	movhi	r2,2
   14b58:	10b89504 	addi	r2,r2,-7596
   14b5c:	10800003 	ldbu	r2,0(r2)
   14b60:	1884703a 	and	r2,r3,r2
   14b64:	1007883a 	mov	r3,r2
   14b68:	008000b4 	movhi	r2,2
   14b6c:	10b89504 	addi	r2,r2,-7596
   14b70:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   14b74:	e0bff917 	ldw	r2,-28(fp)
   14b78:	10800c03 	ldbu	r2,48(r2)
   14b7c:	10800214 	ori	r2,r2,8
   14b80:	1007883a 	mov	r3,r2
   14b84:	e0bff917 	ldw	r2,-28(fp)
   14b88:	10c00c05 	stb	r3,48(r2)
   14b8c:	e0bff817 	ldw	r2,-32(fp)
   14b90:	e0bffe15 	stw	r2,-8(fp)
   14b94:	e0bffe17 	ldw	r2,-8(fp)
   14b98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   14b9c:	e0bff703 	ldbu	r2,-36(fp)
   14ba0:	10800058 	cmpnei	r2,r2,1
   14ba4:	1000011e 	bne	r2,zero,14bac <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   14ba8:	000ef4c0 	call	ef4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14bac:	0005883a 	mov	r2,zero
}
   14bb0:	e037883a 	mov	sp,fp
   14bb4:	dfc00117 	ldw	ra,4(sp)
   14bb8:	df000017 	ldw	fp,0(sp)
   14bbc:	dec00204 	addi	sp,sp,8
   14bc0:	f800283a 	ret

00014bc4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   14bc4:	defff604 	addi	sp,sp,-40
   14bc8:	dfc00915 	stw	ra,36(sp)
   14bcc:	df000815 	stw	fp,32(sp)
   14bd0:	df000804 	addi	fp,sp,32
   14bd4:	2005883a 	mov	r2,r4
   14bd8:	e17fff15 	stw	r5,-4(fp)
   14bdc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14be0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   14be4:	e0bffe03 	ldbu	r2,-8(fp)
   14be8:	10800570 	cmpltui	r2,r2,21
   14bec:	1000051e 	bne	r2,zero,14c04 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   14bf0:	e0bffe03 	ldbu	r2,-8(fp)
   14bf4:	10803fe0 	cmpeqi	r2,r2,255
   14bf8:	1000021e 	bne	r2,zero,14c04 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   14bfc:	00800a84 	movi	r2,42
   14c00:	00003606 	br	14cdc <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   14c04:	e0bfff17 	ldw	r2,-4(fp)
   14c08:	1000021e 	bne	r2,zero,14c14 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   14c0c:	00800244 	movi	r2,9
   14c10:	00003206 	br	14cdc <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c14:	0005303a 	rdctl	r2,status
   14c18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c1c:	e0fffa17 	ldw	r3,-24(fp)
   14c20:	00bfff84 	movi	r2,-2
   14c24:	1884703a 	and	r2,r3,r2
   14c28:	1001703a 	wrctl	status,r2
  
  return context;
   14c2c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14c30:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   14c34:	e0bffe03 	ldbu	r2,-8(fp)
   14c38:	10803fd8 	cmpnei	r2,r2,255
   14c3c:	1000051e 	bne	r2,zero,14c54 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   14c40:	008000b4 	movhi	r2,2
   14c44:	10b89804 	addi	r2,r2,-7584
   14c48:	10800017 	ldw	r2,0(r2)
   14c4c:	10800c83 	ldbu	r2,50(r2)
   14c50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14c54:	e0fffe03 	ldbu	r3,-8(fp)
   14c58:	008000b4 	movhi	r2,2
   14c5c:	10952a04 	addi	r2,r2,21672
   14c60:	18c7883a 	add	r3,r3,r3
   14c64:	18c7883a 	add	r3,r3,r3
   14c68:	10c5883a 	add	r2,r2,r3
   14c6c:	10800017 	ldw	r2,0(r2)
   14c70:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   14c74:	e0bff917 	ldw	r2,-28(fp)
   14c78:	1000061e 	bne	r2,zero,14c94 <OSTaskQuery+0xd0>
   14c7c:	e0bff817 	ldw	r2,-32(fp)
   14c80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c84:	e0bffb17 	ldw	r2,-20(fp)
   14c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   14c8c:	00800a44 	movi	r2,41
   14c90:	00001206 	br	14cdc <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   14c94:	e0bff917 	ldw	r2,-28(fp)
   14c98:	10800058 	cmpnei	r2,r2,1
   14c9c:	1000061e 	bne	r2,zero,14cb8 <OSTaskQuery+0xf4>
   14ca0:	e0bff817 	ldw	r2,-32(fp)
   14ca4:	e0bffc15 	stw	r2,-16(fp)
   14ca8:	e0bffc17 	ldw	r2,-16(fp)
   14cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14cb0:	008010c4 	movi	r2,67
   14cb4:	00000906 	br	14cdc <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   14cb8:	e13fff17 	ldw	r4,-4(fp)
   14cbc:	e17ff917 	ldw	r5,-28(fp)
   14cc0:	01801b04 	movi	r6,108
   14cc4:	000eee80 	call	eee8 <OS_MemCopy>
   14cc8:	e0bff817 	ldw	r2,-32(fp)
   14ccc:	e0bffd15 	stw	r2,-12(fp)
   14cd0:	e0bffd17 	ldw	r2,-12(fp)
   14cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14cd8:	0005883a 	mov	r2,zero
}
   14cdc:	e037883a 	mov	sp,fp
   14ce0:	dfc00117 	ldw	ra,4(sp)
   14ce4:	df000017 	ldw	fp,0(sp)
   14ce8:	dec00204 	addi	sp,sp,8
   14cec:	f800283a 	ret

00014cf0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   14cf0:	defffc04 	addi	sp,sp,-16
   14cf4:	df000315 	stw	fp,12(sp)
   14cf8:	df000304 	addi	fp,sp,12
   14cfc:	e13ffd15 	stw	r4,-12(fp)
   14d00:	e17ffe15 	stw	r5,-8(fp)
   14d04:	3005883a 	mov	r2,r6
   14d08:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   14d0c:	e0bfff0b 	ldhu	r2,-4(fp)
   14d10:	1080004c 	andi	r2,r2,1
   14d14:	10000d26 	beq	r2,zero,14d4c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   14d18:	e0bfff0b 	ldhu	r2,-4(fp)
   14d1c:	1080008c 	andi	r2,r2,2
   14d20:	10000a26 	beq	r2,zero,14d4c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14d24:	00000706 	br	14d44 <OS_TaskStkClr+0x54>
                size--;
   14d28:	e0bffe17 	ldw	r2,-8(fp)
   14d2c:	10bfffc4 	addi	r2,r2,-1
   14d30:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   14d34:	e0bffd17 	ldw	r2,-12(fp)
   14d38:	10c00104 	addi	r3,r2,4
   14d3c:	e0fffd15 	stw	r3,-12(fp)
   14d40:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14d44:	e0bffe17 	ldw	r2,-8(fp)
   14d48:	103ff71e 	bne	r2,zero,14d28 <__alt_mem_Flash_flash_data+0xf4014d28>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   14d4c:	e037883a 	mov	sp,fp
   14d50:	df000017 	ldw	fp,0(sp)
   14d54:	dec00104 	addi	sp,sp,4
   14d58:	f800283a 	ret

00014d5c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   14d5c:	defff904 	addi	sp,sp,-28
   14d60:	dfc00615 	stw	ra,24(sp)
   14d64:	df000515 	stw	fp,20(sp)
   14d68:	df000504 	addi	fp,sp,20
   14d6c:	2005883a 	mov	r2,r4
   14d70:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d74:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14d78:	008000b4 	movhi	r2,2
   14d7c:	10b89704 	addi	r2,r2,-7588
   14d80:	10800003 	ldbu	r2,0(r2)
   14d84:	10803fcc 	andi	r2,r2,255
   14d88:	10000126 	beq	r2,zero,14d90 <OSTimeDly+0x34>
        return;
   14d8c:	00004006 	br	14e90 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   14d90:	e0bfff0b 	ldhu	r2,-4(fp)
   14d94:	10003e26 	beq	r2,zero,14e90 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d98:	0005303a 	rdctl	r2,status
   14d9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14da0:	e0fffd17 	ldw	r3,-12(fp)
   14da4:	00bfff84 	movi	r2,-2
   14da8:	1884703a 	and	r2,r3,r2
   14dac:	1001703a 	wrctl	status,r2
  
  return context;
   14db0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   14db4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   14db8:	008000b4 	movhi	r2,2
   14dbc:	10b89804 	addi	r2,r2,-7584
   14dc0:	10800017 	ldw	r2,0(r2)
   14dc4:	10800d03 	ldbu	r2,52(r2)
   14dc8:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14dcc:	e0fffc03 	ldbu	r3,-16(fp)
   14dd0:	e13ffc03 	ldbu	r4,-16(fp)
   14dd4:	008000b4 	movhi	r2,2
   14dd8:	10b89544 	addi	r2,r2,-7595
   14ddc:	1105883a 	add	r2,r2,r4
   14de0:	10800003 	ldbu	r2,0(r2)
   14de4:	1009883a 	mov	r4,r2
   14de8:	008000b4 	movhi	r2,2
   14dec:	10b89804 	addi	r2,r2,-7584
   14df0:	10800017 	ldw	r2,0(r2)
   14df4:	10800d43 	ldbu	r2,53(r2)
   14df8:	0084303a 	nor	r2,zero,r2
   14dfc:	2084703a 	and	r2,r4,r2
   14e00:	1009883a 	mov	r4,r2
   14e04:	008000b4 	movhi	r2,2
   14e08:	10b89544 	addi	r2,r2,-7595
   14e0c:	10c5883a 	add	r2,r2,r3
   14e10:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   14e14:	e0fffc03 	ldbu	r3,-16(fp)
   14e18:	008000b4 	movhi	r2,2
   14e1c:	10b89544 	addi	r2,r2,-7595
   14e20:	10c5883a 	add	r2,r2,r3
   14e24:	10800003 	ldbu	r2,0(r2)
   14e28:	10803fcc 	andi	r2,r2,255
   14e2c:	10000e1e 	bne	r2,zero,14e68 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14e30:	008000b4 	movhi	r2,2
   14e34:	10b89804 	addi	r2,r2,-7584
   14e38:	10800017 	ldw	r2,0(r2)
   14e3c:	10800d83 	ldbu	r2,54(r2)
   14e40:	0084303a 	nor	r2,zero,r2
   14e44:	1007883a 	mov	r3,r2
   14e48:	008000b4 	movhi	r2,2
   14e4c:	10b89504 	addi	r2,r2,-7596
   14e50:	10800003 	ldbu	r2,0(r2)
   14e54:	1884703a 	and	r2,r3,r2
   14e58:	1007883a 	mov	r3,r2
   14e5c:	008000b4 	movhi	r2,2
   14e60:	10b89504 	addi	r2,r2,-7596
   14e64:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   14e68:	008000b4 	movhi	r2,2
   14e6c:	10b89804 	addi	r2,r2,-7584
   14e70:	10800017 	ldw	r2,0(r2)
   14e74:	e0ffff0b 	ldhu	r3,-4(fp)
   14e78:	10c00b8d 	sth	r3,46(r2)
   14e7c:	e0bffb17 	ldw	r2,-20(fp)
   14e80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   14e8c:	000ef4c0 	call	ef4c <OS_Sched>
    }
}
   14e90:	e037883a 	mov	sp,fp
   14e94:	dfc00117 	ldw	ra,4(sp)
   14e98:	df000017 	ldw	fp,0(sp)
   14e9c:	dec00204 	addi	sp,sp,8
   14ea0:	f800283a 	ret

00014ea4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   14ea4:	defff804 	addi	sp,sp,-32
   14ea8:	dfc00715 	stw	ra,28(sp)
   14eac:	df000615 	stw	fp,24(sp)
   14eb0:	df000604 	addi	fp,sp,24
   14eb4:	2015883a 	mov	r10,r4
   14eb8:	2809883a 	mov	r4,r5
   14ebc:	3007883a 	mov	r3,r6
   14ec0:	3805883a 	mov	r2,r7
   14ec4:	e2bffc05 	stb	r10,-16(fp)
   14ec8:	e13ffd05 	stb	r4,-12(fp)
   14ecc:	e0fffe05 	stb	r3,-8(fp)
   14ed0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14ed4:	008000b4 	movhi	r2,2
   14ed8:	10b89704 	addi	r2,r2,-7588
   14edc:	10800003 	ldbu	r2,0(r2)
   14ee0:	10803fcc 	andi	r2,r2,255
   14ee4:	10000226 	beq	r2,zero,14ef0 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   14ee8:	00801544 	movi	r2,85
   14eec:	00004206 	br	14ff8 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   14ef0:	e0bffc03 	ldbu	r2,-16(fp)
   14ef4:	1000081e 	bne	r2,zero,14f18 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   14ef8:	e0bffd03 	ldbu	r2,-12(fp)
   14efc:	1000061e 	bne	r2,zero,14f18 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   14f00:	e0bffe03 	ldbu	r2,-8(fp)
   14f04:	1000041e 	bne	r2,zero,14f18 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   14f08:	e0bfff0b 	ldhu	r2,-4(fp)
   14f0c:	1000021e 	bne	r2,zero,14f18 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   14f10:	00801504 	movi	r2,84
   14f14:	00003806 	br	14ff8 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   14f18:	e0bffd03 	ldbu	r2,-12(fp)
   14f1c:	10800f30 	cmpltui	r2,r2,60
   14f20:	1000021e 	bne	r2,zero,14f2c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   14f24:	00801444 	movi	r2,81
   14f28:	00003306 	br	14ff8 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   14f2c:	e0bffe03 	ldbu	r2,-8(fp)
   14f30:	10800f30 	cmpltui	r2,r2,60
   14f34:	1000021e 	bne	r2,zero,14f40 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   14f38:	00801484 	movi	r2,82
   14f3c:	00002e06 	br	14ff8 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   14f40:	e0bfff0b 	ldhu	r2,-4(fp)
   14f44:	1080fa30 	cmpltui	r2,r2,1000
   14f48:	1000021e 	bne	r2,zero,14f54 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   14f4c:	008014c4 	movi	r2,83
   14f50:	00002906 	br	14ff8 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14f54:	e0bffc03 	ldbu	r2,-16(fp)
   14f58:	10c38424 	muli	r3,r2,3600
   14f5c:	e0bffd03 	ldbu	r2,-12(fp)
   14f60:	10800f24 	muli	r2,r2,60
   14f64:	1887883a 	add	r3,r3,r2
   14f68:	e0bffe03 	ldbu	r2,-8(fp)
   14f6c:	1885883a 	add	r2,r3,r2
   14f70:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   14f74:	e0bfff0b 	ldhu	r2,-4(fp)
   14f78:	10800f84 	addi	r2,r2,62
   14f7c:	100690fa 	slli	r3,r2,3
   14f80:	008418b4 	movhi	r2,4194
   14f84:	109374c4 	addi	r2,r2,19923
   14f88:	188a383a 	mulxuu	r5,r3,r2
   14f8c:	1885383a 	mul	r2,r3,r2
   14f90:	1011883a 	mov	r8,r2
   14f94:	2813883a 	mov	r9,r5
   14f98:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14f9c:	2085883a 	add	r2,r4,r2
   14fa0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   14fa4:	e0bffb17 	ldw	r2,-20(fp)
   14fa8:	1004d43a 	srli	r2,r2,16
   14fac:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   14fb0:	e0bffb17 	ldw	r2,-20(fp)
   14fb4:	10bfffcc 	andi	r2,r2,65535
   14fb8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   14fbc:	e0bffb17 	ldw	r2,-20(fp)
   14fc0:	10bfffcc 	andi	r2,r2,65535
   14fc4:	1009883a 	mov	r4,r2
   14fc8:	0014d5c0 	call	14d5c <OSTimeDly>
    while (loops > 0) {
   14fcc:	00000706 	br	14fec <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   14fd0:	01200014 	movui	r4,32768
   14fd4:	0014d5c0 	call	14d5c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   14fd8:	01200014 	movui	r4,32768
   14fdc:	0014d5c0 	call	14d5c <OSTimeDly>
        loops--;
   14fe0:	e0bffa0b 	ldhu	r2,-24(fp)
   14fe4:	10bfffc4 	addi	r2,r2,-1
   14fe8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   14fec:	e0bffa0b 	ldhu	r2,-24(fp)
   14ff0:	103ff71e 	bne	r2,zero,14fd0 <__alt_mem_Flash_flash_data+0xf4014fd0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   14ff4:	0005883a 	mov	r2,zero
}
   14ff8:	e037883a 	mov	sp,fp
   14ffc:	dfc00117 	ldw	ra,4(sp)
   15000:	df000017 	ldw	fp,0(sp)
   15004:	dec00204 	addi	sp,sp,8
   15008:	f800283a 	ret

0001500c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1500c:	defff504 	addi	sp,sp,-44
   15010:	dfc00a15 	stw	ra,40(sp)
   15014:	df000915 	stw	fp,36(sp)
   15018:	df000904 	addi	fp,sp,36
   1501c:	2005883a 	mov	r2,r4
   15020:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15024:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15028:	e0bfff03 	ldbu	r2,-4(fp)
   1502c:	10800530 	cmpltui	r2,r2,20
   15030:	1000021e 	bne	r2,zero,1503c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15034:	00800a84 	movi	r2,42
   15038:	00006b06 	br	151e8 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1503c:	0005303a 	rdctl	r2,status
   15040:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15044:	e0fff917 	ldw	r3,-28(fp)
   15048:	00bfff84 	movi	r2,-2
   1504c:	1884703a 	and	r2,r3,r2
   15050:	1001703a 	wrctl	status,r2
  
  return context;
   15054:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15058:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1505c:	e0ffff03 	ldbu	r3,-4(fp)
   15060:	008000b4 	movhi	r2,2
   15064:	10952a04 	addi	r2,r2,21672
   15068:	18c7883a 	add	r3,r3,r3
   1506c:	18c7883a 	add	r3,r3,r3
   15070:	10c5883a 	add	r2,r2,r3
   15074:	10800017 	ldw	r2,0(r2)
   15078:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1507c:	e0bff817 	ldw	r2,-32(fp)
   15080:	1000061e 	bne	r2,zero,1509c <OSTimeDlyResume+0x90>
   15084:	e0bff717 	ldw	r2,-36(fp)
   15088:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1508c:	e0bffa17 	ldw	r2,-24(fp)
   15090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15094:	008010c4 	movi	r2,67
   15098:	00005306 	br	151e8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1509c:	e0bff817 	ldw	r2,-32(fp)
   150a0:	10800058 	cmpnei	r2,r2,1
   150a4:	1000061e 	bne	r2,zero,150c0 <OSTimeDlyResume+0xb4>
   150a8:	e0bff717 	ldw	r2,-36(fp)
   150ac:	e0bffb15 	stw	r2,-20(fp)
   150b0:	e0bffb17 	ldw	r2,-20(fp)
   150b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   150b8:	008010c4 	movi	r2,67
   150bc:	00004a06 	br	151e8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   150c0:	e0bff817 	ldw	r2,-32(fp)
   150c4:	10800b8b 	ldhu	r2,46(r2)
   150c8:	10bfffcc 	andi	r2,r2,65535
   150cc:	1000061e 	bne	r2,zero,150e8 <OSTimeDlyResume+0xdc>
   150d0:	e0bff717 	ldw	r2,-36(fp)
   150d4:	e0bffc15 	stw	r2,-16(fp)
   150d8:	e0bffc17 	ldw	r2,-16(fp)
   150dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   150e0:	00801404 	movi	r2,80
   150e4:	00004006 	br	151e8 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   150e8:	e0bff817 	ldw	r2,-32(fp)
   150ec:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   150f0:	e0bff817 	ldw	r2,-32(fp)
   150f4:	10800c03 	ldbu	r2,48(r2)
   150f8:	10803fcc 	andi	r2,r2,255
   150fc:	10800dcc 	andi	r2,r2,55
   15100:	10000b26 	beq	r2,zero,15130 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15104:	e0bff817 	ldw	r2,-32(fp)
   15108:	10c00c03 	ldbu	r3,48(r2)
   1510c:	00bff204 	movi	r2,-56
   15110:	1884703a 	and	r2,r3,r2
   15114:	1007883a 	mov	r3,r2
   15118:	e0bff817 	ldw	r2,-32(fp)
   1511c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15120:	e0bff817 	ldw	r2,-32(fp)
   15124:	00c00044 	movi	r3,1
   15128:	10c00c45 	stb	r3,49(r2)
   1512c:	00000206 	br	15138 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15130:	e0bff817 	ldw	r2,-32(fp)
   15134:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15138:	e0bff817 	ldw	r2,-32(fp)
   1513c:	10800c03 	ldbu	r2,48(r2)
   15140:	10803fcc 	andi	r2,r2,255
   15144:	1080020c 	andi	r2,r2,8
   15148:	1000221e 	bne	r2,zero,151d4 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1514c:	e0bff817 	ldw	r2,-32(fp)
   15150:	10c00d83 	ldbu	r3,54(r2)
   15154:	008000b4 	movhi	r2,2
   15158:	10b89504 	addi	r2,r2,-7596
   1515c:	10800003 	ldbu	r2,0(r2)
   15160:	1884b03a 	or	r2,r3,r2
   15164:	1007883a 	mov	r3,r2
   15168:	008000b4 	movhi	r2,2
   1516c:	10b89504 	addi	r2,r2,-7596
   15170:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15174:	e0bff817 	ldw	r2,-32(fp)
   15178:	10800d03 	ldbu	r2,52(r2)
   1517c:	10c03fcc 	andi	r3,r2,255
   15180:	e0bff817 	ldw	r2,-32(fp)
   15184:	10800d03 	ldbu	r2,52(r2)
   15188:	11003fcc 	andi	r4,r2,255
   1518c:	008000b4 	movhi	r2,2
   15190:	10b89544 	addi	r2,r2,-7595
   15194:	1105883a 	add	r2,r2,r4
   15198:	11000003 	ldbu	r4,0(r2)
   1519c:	e0bff817 	ldw	r2,-32(fp)
   151a0:	10800d43 	ldbu	r2,53(r2)
   151a4:	2084b03a 	or	r2,r4,r2
   151a8:	1009883a 	mov	r4,r2
   151ac:	008000b4 	movhi	r2,2
   151b0:	10b89544 	addi	r2,r2,-7595
   151b4:	10c5883a 	add	r2,r2,r3
   151b8:	11000005 	stb	r4,0(r2)
   151bc:	e0bff717 	ldw	r2,-36(fp)
   151c0:	e0bffd15 	stw	r2,-12(fp)
   151c4:	e0bffd17 	ldw	r2,-12(fp)
   151c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   151cc:	000ef4c0 	call	ef4c <OS_Sched>
   151d0:	00000406 	br	151e4 <OSTimeDlyResume+0x1d8>
   151d4:	e0bff717 	ldw	r2,-36(fp)
   151d8:	e0bffe15 	stw	r2,-8(fp)
   151dc:	e0bffe17 	ldw	r2,-8(fp)
   151e0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   151e4:	0005883a 	mov	r2,zero
}
   151e8:	e037883a 	mov	sp,fp
   151ec:	dfc00117 	ldw	ra,4(sp)
   151f0:	df000017 	ldw	fp,0(sp)
   151f4:	dec00204 	addi	sp,sp,8
   151f8:	f800283a 	ret

000151fc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   151fc:	defffb04 	addi	sp,sp,-20
   15200:	df000415 	stw	fp,16(sp)
   15204:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15208:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1520c:	0005303a 	rdctl	r2,status
   15210:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15214:	e0fffe17 	ldw	r3,-8(fp)
   15218:	00bfff84 	movi	r2,-2
   1521c:	1884703a 	and	r2,r3,r2
   15220:	1001703a 	wrctl	status,r2
  
  return context;
   15224:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15228:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1522c:	008000b4 	movhi	r2,2
   15230:	10b89904 	addi	r2,r2,-7580
   15234:	10800017 	ldw	r2,0(r2)
   15238:	e0bffd15 	stw	r2,-12(fp)
   1523c:	e0bffc17 	ldw	r2,-16(fp)
   15240:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15244:	e0bfff17 	ldw	r2,-4(fp)
   15248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1524c:	e0bffd17 	ldw	r2,-12(fp)
}
   15250:	e037883a 	mov	sp,fp
   15254:	df000017 	ldw	fp,0(sp)
   15258:	dec00104 	addi	sp,sp,4
   1525c:	f800283a 	ret

00015260 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15260:	defffb04 	addi	sp,sp,-20
   15264:	df000415 	stw	fp,16(sp)
   15268:	df000404 	addi	fp,sp,16
   1526c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15270:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15274:	0005303a 	rdctl	r2,status
   15278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1527c:	e0fffd17 	ldw	r3,-12(fp)
   15280:	00bfff84 	movi	r2,-2
   15284:	1884703a 	and	r2,r3,r2
   15288:	1001703a 	wrctl	status,r2
  
  return context;
   1528c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15290:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15294:	008000b4 	movhi	r2,2
   15298:	10b89904 	addi	r2,r2,-7580
   1529c:	e0ffff17 	ldw	r3,-4(fp)
   152a0:	10c00015 	stw	r3,0(r2)
   152a4:	e0bffc17 	ldw	r2,-16(fp)
   152a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152ac:	e0bffe17 	ldw	r2,-8(fp)
   152b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   152b4:	e037883a 	mov	sp,fp
   152b8:	df000017 	ldw	fp,0(sp)
   152bc:	dec00104 	addi	sp,sp,4
   152c0:	f800283a 	ret

000152c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   152c4:	defffd04 	addi	sp,sp,-12
   152c8:	dfc00215 	stw	ra,8(sp)
   152cc:	df000115 	stw	fp,4(sp)
   152d0:	df000104 	addi	fp,sp,4
   152d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   152d8:	e13fff17 	ldw	r4,-4(fp)
   152dc:	014000b4 	movhi	r5,2
   152e0:	296fdc04 	addi	r5,r5,-16528
   152e4:	00182340 	call	18234 <alt_dev_llist_insert>
}
   152e8:	e037883a 	mov	sp,fp
   152ec:	dfc00117 	ldw	ra,4(sp)
   152f0:	df000017 	ldw	fp,0(sp)
   152f4:	dec00204 	addi	sp,sp,8
   152f8:	f800283a 	ret

000152fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   152fc:	defffd04 	addi	sp,sp,-12
   15300:	dfc00215 	stw	ra,8(sp)
   15304:	df000115 	stw	fp,4(sp)
   15308:	df000104 	addi	fp,sp,4
   1530c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15310:	0018b480 	call	18b48 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15314:	00800044 	movi	r2,1
   15318:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1531c:	e037883a 	mov	sp,fp
   15320:	dfc00117 	ldw	ra,4(sp)
   15324:	df000017 	ldw	fp,0(sp)
   15328:	dec00204 	addi	sp,sp,8
   1532c:	f800283a 	ret

00015330 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15330:	defffd04 	addi	sp,sp,-12
   15334:	dfc00215 	stw	ra,8(sp)
   15338:	df000115 	stw	fp,4(sp)
   1533c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   15340:	01040034 	movhi	r4,4096
   15344:	21080004 	addi	r4,r4,8192
   15348:	000b883a 	mov	r5,zero
   1534c:	000d883a 	mov	r6,zero
   15350:	01c00204 	movi	r7,8
   15354:	00164a40 	call	164a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15358:	010000b4 	movhi	r4,2
   1535c:	212a2d04 	addi	r4,r4,-22348
   15360:	000b883a 	mov	r5,zero
   15364:	01800204 	movi	r6,8
   15368:	001586c0 	call	1586c <altera_avalon_jtag_uart_init>
   1536c:	010000b4 	movhi	r4,2
   15370:	212a2304 	addi	r4,r4,-22388
   15374:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15378:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1537c:	010000b4 	movhi	r4,2
   15380:	212e3e04 	addi	r4,r4,-18184
   15384:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15388:	010000b4 	movhi	r4,2
   1538c:	212e4a04 	addi	r4,r4,-18136
   15390:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15394:	010000b4 	movhi	r4,2
   15398:	212e5604 	addi	r4,r4,-18088
   1539c:	00165d40 	call	165d4 <alt_up_character_lcd_init>
   153a0:	010000b4 	movhi	r4,2
   153a4:	212e5604 	addi	r4,r4,-18088
   153a8:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   153ac:	010000b4 	movhi	r4,2
   153b0:	212e6104 	addi	r4,r4,-18044
   153b4:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   153b8:	010000b4 	movhi	r4,2
   153bc:	212e6c04 	addi	r4,r4,-18000
   153c0:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   153c4:	010000b4 	movhi	r4,2
   153c8:	212e7704 	addi	r4,r4,-17956
   153cc:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   153d0:	010000b4 	movhi	r4,2
   153d4:	212e8204 	addi	r4,r4,-17912
   153d8:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   153dc:	010000b4 	movhi	r4,2
   153e0:	212e8d04 	addi	r4,r4,-17868
   153e4:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   153e8:	010000b4 	movhi	r4,2
   153ec:	212e9804 	addi	r4,r4,-17824
   153f0:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   153f4:	010000b4 	movhi	r4,2
   153f8:	212ea304 	addi	r4,r4,-17780
   153fc:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   15400:	010000b4 	movhi	r4,2
   15404:	212eae04 	addi	r4,r4,-17736
   15408:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1540c:	010000b4 	movhi	r4,2
   15410:	212eb904 	addi	r4,r4,-17692
   15414:	0016eac0 	call	16eac <alt_up_ps2_init>
   15418:	010000b4 	movhi	r4,2
   1541c:	212eb904 	addi	r4,r4,-17692
   15420:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15424:	010000b4 	movhi	r4,2
   15428:	212ec704 	addi	r4,r4,-17636
   1542c:	0016eac0 	call	16eac <alt_up_ps2_init>
   15430:	010000b4 	movhi	r4,2
   15434:	212ec704 	addi	r4,r4,-17636
   15438:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1543c:	010000b4 	movhi	r4,2
   15440:	212ed504 	addi	r4,r4,-17580
   15444:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15448:	010000b4 	movhi	r4,2
   1544c:	212ee004 	addi	r4,r4,-17536
   15450:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   15454:	008000b4 	movhi	r2,2
   15458:	10aeed04 	addi	r2,r2,-17484
   1545c:	10800a17 	ldw	r2,40(r2)
   15460:	10800104 	addi	r2,r2,4
   15464:	10800017 	ldw	r2,0(r2)
   15468:	10ffffcc 	andi	r3,r2,65535
   1546c:	008000b4 	movhi	r2,2
   15470:	10aeed04 	addi	r2,r2,-17484
   15474:	10c00c15 	stw	r3,48(r2)
   15478:	008000b4 	movhi	r2,2
   1547c:	10aeed04 	addi	r2,r2,-17484
   15480:	10800a17 	ldw	r2,40(r2)
   15484:	10800104 	addi	r2,r2,4
   15488:	10800017 	ldw	r2,0(r2)
   1548c:	1006d43a 	srli	r3,r2,16
   15490:	008000b4 	movhi	r2,2
   15494:	10aeed04 	addi	r2,r2,-17484
   15498:	10c00d15 	stw	r3,52(r2)
   1549c:	008000b4 	movhi	r2,2
   154a0:	10aeed04 	addi	r2,r2,-17484
   154a4:	10800c17 	ldw	r2,48(r2)
   154a8:	10801068 	cmpgeui	r2,r2,65
   154ac:	1000081e 	bne	r2,zero,154d0 <alt_sys_init+0x1a0>
   154b0:	008000b4 	movhi	r2,2
   154b4:	10aeed04 	addi	r2,r2,-17484
   154b8:	00c00fc4 	movi	r3,63
   154bc:	10c00f15 	stw	r3,60(r2)
   154c0:	008000b4 	movhi	r2,2
   154c4:	10aeed04 	addi	r2,r2,-17484
   154c8:	00c00184 	movi	r3,6
   154cc:	10c01015 	stw	r3,64(r2)
   154d0:	008000b4 	movhi	r2,2
   154d4:	10aeed04 	addi	r2,r2,-17484
   154d8:	10800d17 	ldw	r2,52(r2)
   154dc:	10800868 	cmpgeui	r2,r2,33
   154e0:	1000041e 	bne	r2,zero,154f4 <alt_sys_init+0x1c4>
   154e4:	008000b4 	movhi	r2,2
   154e8:	10aeed04 	addi	r2,r2,-17484
   154ec:	00c007c4 	movi	r3,31
   154f0:	10c01115 	stw	r3,68(r2)
   154f4:	010000b4 	movhi	r4,2
   154f8:	212eed04 	addi	r4,r4,-17484
   154fc:	00177c40 	call	177c4 <alt_up_char_buffer_init>
   15500:	010000b4 	movhi	r4,2
   15504:	212eed04 	addi	r4,r4,-17484
   15508:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1550c:	008000b4 	movhi	r2,2
   15510:	10aeff04 	addi	r2,r2,-17412
   15514:	10800a17 	ldw	r2,40(r2)
   15518:	10800017 	ldw	r2,0(r2)
   1551c:	1007883a 	mov	r3,r2
   15520:	008000b4 	movhi	r2,2
   15524:	10aeff04 	addi	r2,r2,-17412
   15528:	10c00b15 	stw	r3,44(r2)
   1552c:	008000b4 	movhi	r2,2
   15530:	10aeff04 	addi	r2,r2,-17412
   15534:	10800a17 	ldw	r2,40(r2)
   15538:	10800104 	addi	r2,r2,4
   1553c:	10800017 	ldw	r2,0(r2)
   15540:	1007883a 	mov	r3,r2
   15544:	008000b4 	movhi	r2,2
   15548:	10aeff04 	addi	r2,r2,-17412
   1554c:	10c00c15 	stw	r3,48(r2)
   15550:	008000b4 	movhi	r2,2
   15554:	10aeff04 	addi	r2,r2,-17412
   15558:	10800a17 	ldw	r2,40(r2)
   1555c:	10800204 	addi	r2,r2,8
   15560:	10800017 	ldw	r2,0(r2)
   15564:	10ffffcc 	andi	r3,r2,65535
   15568:	008000b4 	movhi	r2,2
   1556c:	10aeff04 	addi	r2,r2,-17412
   15570:	10c00f15 	stw	r3,60(r2)
   15574:	008000b4 	movhi	r2,2
   15578:	10aeff04 	addi	r2,r2,-17412
   1557c:	10800a17 	ldw	r2,40(r2)
   15580:	10800204 	addi	r2,r2,8
   15584:	10800017 	ldw	r2,0(r2)
   15588:	1006d43a 	srli	r3,r2,16
   1558c:	008000b4 	movhi	r2,2
   15590:	10aeff04 	addi	r2,r2,-17412
   15594:	10c01015 	stw	r3,64(r2)
   15598:	008000b4 	movhi	r2,2
   1559c:	10aeff04 	addi	r2,r2,-17412
   155a0:	10800a17 	ldw	r2,40(r2)
   155a4:	10800304 	addi	r2,r2,12
   155a8:	10800017 	ldw	r2,0(r2)
   155ac:	1005d07a 	srai	r2,r2,1
   155b0:	10c0004c 	andi	r3,r2,1
   155b4:	008000b4 	movhi	r2,2
   155b8:	10aeff04 	addi	r2,r2,-17412
   155bc:	10c00d15 	stw	r3,52(r2)
   155c0:	008000b4 	movhi	r2,2
   155c4:	10aeff04 	addi	r2,r2,-17412
   155c8:	10800a17 	ldw	r2,40(r2)
   155cc:	10800304 	addi	r2,r2,12
   155d0:	10800017 	ldw	r2,0(r2)
   155d4:	1005d13a 	srai	r2,r2,4
   155d8:	10c003cc 	andi	r3,r2,15
   155dc:	008000b4 	movhi	r2,2
   155e0:	10aeff04 	addi	r2,r2,-17412
   155e4:	10c00e15 	stw	r3,56(r2)
   155e8:	008000b4 	movhi	r2,2
   155ec:	10aeff04 	addi	r2,r2,-17412
   155f0:	10800a17 	ldw	r2,40(r2)
   155f4:	10800304 	addi	r2,r2,12
   155f8:	10800017 	ldw	r2,0(r2)
   155fc:	1005d43a 	srai	r2,r2,16
   15600:	e0bfff05 	stb	r2,-4(fp)
   15604:	008000b4 	movhi	r2,2
   15608:	10aeff04 	addi	r2,r2,-17412
   1560c:	10800a17 	ldw	r2,40(r2)
   15610:	10800304 	addi	r2,r2,12
   15614:	10800017 	ldw	r2,0(r2)
   15618:	1004d63a 	srli	r2,r2,24
   1561c:	e0bfff45 	stb	r2,-3(fp)
   15620:	008000b4 	movhi	r2,2
   15624:	10aeff04 	addi	r2,r2,-17412
   15628:	10800e17 	ldw	r2,56(r2)
   1562c:	10800058 	cmpnei	r2,r2,1
   15630:	1000041e 	bne	r2,zero,15644 <alt_sys_init+0x314>
   15634:	008000b4 	movhi	r2,2
   15638:	10aeff04 	addi	r2,r2,-17412
   1563c:	10001115 	stw	zero,68(r2)
   15640:	00000e06 	br	1567c <alt_sys_init+0x34c>
   15644:	008000b4 	movhi	r2,2
   15648:	10aeff04 	addi	r2,r2,-17412
   1564c:	10800e17 	ldw	r2,56(r2)
   15650:	10800098 	cmpnei	r2,r2,2
   15654:	1000051e 	bne	r2,zero,1566c <alt_sys_init+0x33c>
   15658:	008000b4 	movhi	r2,2
   1565c:	10aeff04 	addi	r2,r2,-17412
   15660:	00c00044 	movi	r3,1
   15664:	10c01115 	stw	r3,68(r2)
   15668:	00000406 	br	1567c <alt_sys_init+0x34c>
   1566c:	008000b4 	movhi	r2,2
   15670:	10aeff04 	addi	r2,r2,-17412
   15674:	00c00084 	movi	r3,2
   15678:	10c01115 	stw	r3,68(r2)
   1567c:	e0bfff03 	ldbu	r2,-4(fp)
   15680:	00c00804 	movi	r3,32
   15684:	1885c83a 	sub	r2,r3,r2
   15688:	00ffffc4 	movi	r3,-1
   1568c:	1886d83a 	srl	r3,r3,r2
   15690:	008000b4 	movhi	r2,2
   15694:	10aeff04 	addi	r2,r2,-17412
   15698:	10c01215 	stw	r3,72(r2)
   1569c:	e0ffff03 	ldbu	r3,-4(fp)
   156a0:	008000b4 	movhi	r2,2
   156a4:	10aeff04 	addi	r2,r2,-17412
   156a8:	10801117 	ldw	r2,68(r2)
   156ac:	1887883a 	add	r3,r3,r2
   156b0:	008000b4 	movhi	r2,2
   156b4:	10aeff04 	addi	r2,r2,-17412
   156b8:	10c01315 	stw	r3,76(r2)
   156bc:	e0bfff43 	ldbu	r2,-3(fp)
   156c0:	00c00804 	movi	r3,32
   156c4:	1885c83a 	sub	r2,r3,r2
   156c8:	00ffffc4 	movi	r3,-1
   156cc:	1886d83a 	srl	r3,r3,r2
   156d0:	008000b4 	movhi	r2,2
   156d4:	10aeff04 	addi	r2,r2,-17412
   156d8:	10c01415 	stw	r3,80(r2)
   156dc:	010000b4 	movhi	r4,2
   156e0:	212eff04 	addi	r4,r4,-17412
   156e4:	00152c40 	call	152c4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   156e8:	010000b4 	movhi	r4,2
   156ec:	212f1404 	addi	r4,r4,-17328
   156f0:	00152c40 	call	152c4 <alt_dev_reg>
}
   156f4:	e037883a 	mov	sp,fp
   156f8:	dfc00117 	ldw	ra,4(sp)
   156fc:	df000017 	ldw	fp,0(sp)
   15700:	dec00204 	addi	sp,sp,8
   15704:	f800283a 	ret

00015708 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15708:	defffa04 	addi	sp,sp,-24
   1570c:	dfc00515 	stw	ra,20(sp)
   15710:	df000415 	stw	fp,16(sp)
   15714:	df000404 	addi	fp,sp,16
   15718:	e13ffd15 	stw	r4,-12(fp)
   1571c:	e17ffe15 	stw	r5,-8(fp)
   15720:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15724:	e0bffd17 	ldw	r2,-12(fp)
   15728:	10800017 	ldw	r2,0(r2)
   1572c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15730:	e0bffc17 	ldw	r2,-16(fp)
   15734:	10c00a04 	addi	r3,r2,40
   15738:	e0bffd17 	ldw	r2,-12(fp)
   1573c:	10800217 	ldw	r2,8(r2)
   15740:	1809883a 	mov	r4,r3
   15744:	e17ffe17 	ldw	r5,-8(fp)
   15748:	e1bfff17 	ldw	r6,-4(fp)
   1574c:	100f883a 	mov	r7,r2
   15750:	0015eb80 	call	15eb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15754:	e037883a 	mov	sp,fp
   15758:	dfc00117 	ldw	ra,4(sp)
   1575c:	df000017 	ldw	fp,0(sp)
   15760:	dec00204 	addi	sp,sp,8
   15764:	f800283a 	ret

00015768 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15768:	defffa04 	addi	sp,sp,-24
   1576c:	dfc00515 	stw	ra,20(sp)
   15770:	df000415 	stw	fp,16(sp)
   15774:	df000404 	addi	fp,sp,16
   15778:	e13ffd15 	stw	r4,-12(fp)
   1577c:	e17ffe15 	stw	r5,-8(fp)
   15780:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15784:	e0bffd17 	ldw	r2,-12(fp)
   15788:	10800017 	ldw	r2,0(r2)
   1578c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15790:	e0bffc17 	ldw	r2,-16(fp)
   15794:	10c00a04 	addi	r3,r2,40
   15798:	e0bffd17 	ldw	r2,-12(fp)
   1579c:	10800217 	ldw	r2,8(r2)
   157a0:	1809883a 	mov	r4,r3
   157a4:	e17ffe17 	ldw	r5,-8(fp)
   157a8:	e1bfff17 	ldw	r6,-4(fp)
   157ac:	100f883a 	mov	r7,r2
   157b0:	001616c0 	call	1616c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   157b4:	e037883a 	mov	sp,fp
   157b8:	dfc00117 	ldw	ra,4(sp)
   157bc:	df000017 	ldw	fp,0(sp)
   157c0:	dec00204 	addi	sp,sp,8
   157c4:	f800283a 	ret

000157c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   157c8:	defffc04 	addi	sp,sp,-16
   157cc:	dfc00315 	stw	ra,12(sp)
   157d0:	df000215 	stw	fp,8(sp)
   157d4:	df000204 	addi	fp,sp,8
   157d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   157dc:	e0bfff17 	ldw	r2,-4(fp)
   157e0:	10800017 	ldw	r2,0(r2)
   157e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   157e8:	e0bffe17 	ldw	r2,-8(fp)
   157ec:	10c00a04 	addi	r3,r2,40
   157f0:	e0bfff17 	ldw	r2,-4(fp)
   157f4:	10800217 	ldw	r2,8(r2)
   157f8:	1809883a 	mov	r4,r3
   157fc:	100b883a 	mov	r5,r2
   15800:	0015d640 	call	15d64 <altera_avalon_jtag_uart_close>
}
   15804:	e037883a 	mov	sp,fp
   15808:	dfc00117 	ldw	ra,4(sp)
   1580c:	df000017 	ldw	fp,0(sp)
   15810:	dec00204 	addi	sp,sp,8
   15814:	f800283a 	ret

00015818 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15818:	defffa04 	addi	sp,sp,-24
   1581c:	dfc00515 	stw	ra,20(sp)
   15820:	df000415 	stw	fp,16(sp)
   15824:	df000404 	addi	fp,sp,16
   15828:	e13ffd15 	stw	r4,-12(fp)
   1582c:	e17ffe15 	stw	r5,-8(fp)
   15830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15834:	e0bffd17 	ldw	r2,-12(fp)
   15838:	10800017 	ldw	r2,0(r2)
   1583c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15840:	e0bffc17 	ldw	r2,-16(fp)
   15844:	10800a04 	addi	r2,r2,40
   15848:	1009883a 	mov	r4,r2
   1584c:	e17ffe17 	ldw	r5,-8(fp)
   15850:	e1bfff17 	ldw	r6,-4(fp)
   15854:	0015dcc0 	call	15dcc <altera_avalon_jtag_uart_ioctl>
}
   15858:	e037883a 	mov	sp,fp
   1585c:	dfc00117 	ldw	ra,4(sp)
   15860:	df000017 	ldw	fp,0(sp)
   15864:	dec00204 	addi	sp,sp,8
   15868:	f800283a 	ret

0001586c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1586c:	defff104 	addi	sp,sp,-60
   15870:	dfc00e15 	stw	ra,56(sp)
   15874:	df000d15 	stw	fp,52(sp)
   15878:	df000d04 	addi	fp,sp,52
   1587c:	e13ff915 	stw	r4,-28(fp)
   15880:	e17ffa15 	stw	r5,-24(fp)
   15884:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15888:	e0bff917 	ldw	r2,-28(fp)
   1588c:	10800c04 	addi	r2,r2,48
   15890:	e0bff315 	stw	r2,-52(fp)
   15894:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15898:	e0fff40b 	ldhu	r3,-48(fp)
   1589c:	e0bff884 	addi	r2,fp,-30
   158a0:	1809883a 	mov	r4,r3
   158a4:	100b883a 	mov	r5,r2
   158a8:	000fab80 	call	fab8 <OSFlagCreate>
   158ac:	1007883a 	mov	r3,r2
   158b0:	e0bff317 	ldw	r2,-52(fp)
   158b4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   158b8:	e0bff917 	ldw	r2,-28(fp)
   158bc:	10800a04 	addi	r2,r2,40
   158c0:	e0bff515 	stw	r2,-44(fp)
   158c4:	00800044 	movi	r2,1
   158c8:	e0bff60d 	sth	r2,-40(fp)
   158cc:	e0bff60b 	ldhu	r2,-40(fp)
   158d0:	1009883a 	mov	r4,r2
   158d4:	0012a100 	call	12a10 <OSSemCreate>
   158d8:	1007883a 	mov	r3,r2
   158dc:	e0bff517 	ldw	r2,-44(fp)
   158e0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   158e4:	e0bff917 	ldw	r2,-28(fp)
   158e8:	10800b04 	addi	r2,r2,44
   158ec:	e0bff715 	stw	r2,-36(fp)
   158f0:	00800044 	movi	r2,1
   158f4:	e0bff80d 	sth	r2,-32(fp)
   158f8:	e0bff80b 	ldhu	r2,-32(fp)
   158fc:	1009883a 	mov	r4,r2
   15900:	0012a100 	call	12a10 <OSSemCreate>
   15904:	1007883a 	mov	r3,r2
   15908:	e0bff717 	ldw	r2,-36(fp)
   1590c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15910:	e0bff917 	ldw	r2,-28(fp)
   15914:	00c00044 	movi	r3,1
   15918:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1591c:	e0bff917 	ldw	r2,-28(fp)
   15920:	10800017 	ldw	r2,0(r2)
   15924:	10800104 	addi	r2,r2,4
   15928:	1007883a 	mov	r3,r2
   1592c:	e0bff917 	ldw	r2,-28(fp)
   15930:	10800817 	ldw	r2,32(r2)
   15934:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15938:	e0bffb17 	ldw	r2,-20(fp)
   1593c:	1009883a 	mov	r4,r2
   15940:	e17ff917 	ldw	r5,-28(fp)
   15944:	01800074 	movhi	r6,1
   15948:	31966b04 	addi	r6,r6,22956
   1594c:	00185880 	call	18588 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15950:	e0bff917 	ldw	r2,-28(fp)
   15954:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15958:	e0bff917 	ldw	r2,-28(fp)
   1595c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15960:	008000b4 	movhi	r2,2
   15964:	10b89f04 	addi	r2,r2,-7556
   15968:	10800017 	ldw	r2,0(r2)
   1596c:	1809883a 	mov	r4,r3
   15970:	100b883a 	mov	r5,r2
   15974:	01800074 	movhi	r6,1
   15978:	31971504 	addi	r6,r6,23636
   1597c:	e1fff917 	ldw	r7,-28(fp)
   15980:	00180880 	call	18088 <alt_alarm_start>
   15984:	1000040e 	bge	r2,zero,15998 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15988:	e0fff917 	ldw	r3,-28(fp)
   1598c:	00a00034 	movhi	r2,32768
   15990:	10bfffc4 	addi	r2,r2,-1
   15994:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15998:	e037883a 	mov	sp,fp
   1599c:	dfc00117 	ldw	ra,4(sp)
   159a0:	df000017 	ldw	fp,0(sp)
   159a4:	dec00204 	addi	sp,sp,8
   159a8:	f800283a 	ret

000159ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   159ac:	defff104 	addi	sp,sp,-60
   159b0:	dfc00e15 	stw	ra,56(sp)
   159b4:	df000d15 	stw	fp,52(sp)
   159b8:	df000d04 	addi	fp,sp,52
   159bc:	e13ffe15 	stw	r4,-8(fp)
   159c0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   159c4:	e0bffe17 	ldw	r2,-8(fp)
   159c8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   159cc:	e0bff517 	ldw	r2,-44(fp)
   159d0:	10800017 	ldw	r2,0(r2)
   159d4:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   159d8:	e0bff617 	ldw	r2,-40(fp)
   159dc:	10800104 	addi	r2,r2,4
   159e0:	10800037 	ldwio	r2,0(r2)
   159e4:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   159e8:	e0bff717 	ldw	r2,-36(fp)
   159ec:	1080c00c 	andi	r2,r2,768
   159f0:	1000011e 	bne	r2,zero,159f8 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   159f4:	00009206 	br	15c40 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   159f8:	e0bff717 	ldw	r2,-36(fp)
   159fc:	1080400c 	andi	r2,r2,256
   15a00:	10004726 	beq	r2,zero,15b20 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15a04:	00800074 	movhi	r2,1
   15a08:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15a0c:	e0bff517 	ldw	r2,-44(fp)
   15a10:	10800d17 	ldw	r2,52(r2)
   15a14:	10800044 	addi	r2,r2,1
   15a18:	1081ffcc 	andi	r2,r2,2047
   15a1c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   15a20:	e0bff517 	ldw	r2,-44(fp)
   15a24:	10c00e17 	ldw	r3,56(r2)
   15a28:	e0bff817 	ldw	r2,-32(fp)
   15a2c:	1880011e 	bne	r3,r2,15a34 <altera_avalon_jtag_uart_irq+0x88>
          break;
   15a30:	00002906 	br	15ad8 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15a34:	e0bff617 	ldw	r2,-40(fp)
   15a38:	10800037 	ldwio	r2,0(r2)
   15a3c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15a40:	e0bff317 	ldw	r2,-52(fp)
   15a44:	10a0000c 	andi	r2,r2,32768
   15a48:	1000011e 	bne	r2,zero,15a50 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   15a4c:	00002206 	br	15ad8 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15a50:	e0bff517 	ldw	r2,-44(fp)
   15a54:	10800d17 	ldw	r2,52(r2)
   15a58:	e0fff317 	ldw	r3,-52(fp)
   15a5c:	1809883a 	mov	r4,r3
   15a60:	e0fff517 	ldw	r3,-44(fp)
   15a64:	1885883a 	add	r2,r3,r2
   15a68:	10801104 	addi	r2,r2,68
   15a6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15a70:	e0bff517 	ldw	r2,-44(fp)
   15a74:	10800d17 	ldw	r2,52(r2)
   15a78:	10800044 	addi	r2,r2,1
   15a7c:	10c1ffcc 	andi	r3,r2,2047
   15a80:	e0bff517 	ldw	r2,-44(fp)
   15a84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15a88:	e0bff517 	ldw	r2,-44(fp)
   15a8c:	10800c17 	ldw	r2,48(r2)
   15a90:	e0bff915 	stw	r2,-28(fp)
   15a94:	00800044 	movi	r2,1
   15a98:	e0bffa0d 	sth	r2,-24(fp)
   15a9c:	00800044 	movi	r2,1
   15aa0:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15aa4:	008000b4 	movhi	r2,2
   15aa8:	10b88944 	addi	r2,r2,-7643
   15aac:	10800003 	ldbu	r2,0(r2)
   15ab0:	10803fcc 	andi	r2,r2,255
   15ab4:	103fd526 	beq	r2,zero,15a0c <__alt_mem_Flash_flash_data+0xf4015a0c>
  {
    OSFlagPost (group, flags, opt, &err);
   15ab8:	e17ffa0b 	ldhu	r5,-24(fp)
   15abc:	e0fffa83 	ldbu	r3,-22(fp)
   15ac0:	e0bffcc4 	addi	r2,fp,-13
   15ac4:	e13ff917 	ldw	r4,-28(fp)
   15ac8:	180d883a 	mov	r6,r3
   15acc:	100f883a 	mov	r7,r2
   15ad0:	00107280 	call	10728 <OSFlagPost>
      }
   15ad4:	003fcd06 	br	15a0c <__alt_mem_Flash_flash_data+0xf4015a0c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15ad8:	e0bff317 	ldw	r2,-52(fp)
   15adc:	10bfffec 	andhi	r2,r2,65535
   15ae0:	10000f26 	beq	r2,zero,15b20 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15ae4:	e0bff517 	ldw	r2,-44(fp)
   15ae8:	10c00817 	ldw	r3,32(r2)
   15aec:	00bfff84 	movi	r2,-2
   15af0:	1886703a 	and	r3,r3,r2
   15af4:	e0bff517 	ldw	r2,-44(fp)
   15af8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15afc:	e0bff617 	ldw	r2,-40(fp)
   15b00:	10800104 	addi	r2,r2,4
   15b04:	1007883a 	mov	r3,r2
   15b08:	e0bff517 	ldw	r2,-44(fp)
   15b0c:	10800817 	ldw	r2,32(r2)
   15b10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15b14:	e0bff617 	ldw	r2,-40(fp)
   15b18:	10800104 	addi	r2,r2,4
   15b1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15b20:	e0bff717 	ldw	r2,-36(fp)
   15b24:	1080800c 	andi	r2,r2,512
   15b28:	10004426 	beq	r2,zero,15c3c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15b2c:	e0bff717 	ldw	r2,-36(fp)
   15b30:	1004d43a 	srli	r2,r2,16
   15b34:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15b38:	00002706 	br	15bd8 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15b3c:	e0bff617 	ldw	r2,-40(fp)
   15b40:	e0fff517 	ldw	r3,-44(fp)
   15b44:	18c01017 	ldw	r3,64(r3)
   15b48:	e13ff517 	ldw	r4,-44(fp)
   15b4c:	20c7883a 	add	r3,r4,r3
   15b50:	18c21104 	addi	r3,r3,2116
   15b54:	18c00003 	ldbu	r3,0(r3)
   15b58:	18c03fcc 	andi	r3,r3,255
   15b5c:	18c0201c 	xori	r3,r3,128
   15b60:	18ffe004 	addi	r3,r3,-128
   15b64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15b68:	e0bff517 	ldw	r2,-44(fp)
   15b6c:	10801017 	ldw	r2,64(r2)
   15b70:	10800044 	addi	r2,r2,1
   15b74:	10c1ffcc 	andi	r3,r2,2047
   15b78:	e0bff517 	ldw	r2,-44(fp)
   15b7c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15b80:	e0bff517 	ldw	r2,-44(fp)
   15b84:	10800c17 	ldw	r2,48(r2)
   15b88:	e0bffb15 	stw	r2,-20(fp)
   15b8c:	00800084 	movi	r2,2
   15b90:	e0bffc0d 	sth	r2,-16(fp)
   15b94:	00800044 	movi	r2,1
   15b98:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15b9c:	008000b4 	movhi	r2,2
   15ba0:	10b88944 	addi	r2,r2,-7643
   15ba4:	10800003 	ldbu	r2,0(r2)
   15ba8:	10803fcc 	andi	r2,r2,255
   15bac:	10000726 	beq	r2,zero,15bcc <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   15bb0:	e17ffc0b 	ldhu	r5,-16(fp)
   15bb4:	e0fffc83 	ldbu	r3,-14(fp)
   15bb8:	e0bffd04 	addi	r2,fp,-12
   15bbc:	e13ffb17 	ldw	r4,-20(fp)
   15bc0:	180d883a 	mov	r6,r3
   15bc4:	100f883a 	mov	r7,r2
   15bc8:	00107280 	call	10728 <OSFlagPost>

        space--;
   15bcc:	e0bff417 	ldw	r2,-48(fp)
   15bd0:	10bfffc4 	addi	r2,r2,-1
   15bd4:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15bd8:	e0bff417 	ldw	r2,-48(fp)
   15bdc:	10000526 	beq	r2,zero,15bf4 <altera_avalon_jtag_uart_irq+0x248>
   15be0:	e0bff517 	ldw	r2,-44(fp)
   15be4:	10c01017 	ldw	r3,64(r2)
   15be8:	e0bff517 	ldw	r2,-44(fp)
   15bec:	10800f17 	ldw	r2,60(r2)
   15bf0:	18bfd21e 	bne	r3,r2,15b3c <__alt_mem_Flash_flash_data+0xf4015b3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   15bf4:	e0bff417 	ldw	r2,-48(fp)
   15bf8:	10001026 	beq	r2,zero,15c3c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15bfc:	e0bff517 	ldw	r2,-44(fp)
   15c00:	10c00817 	ldw	r3,32(r2)
   15c04:	00bfff44 	movi	r2,-3
   15c08:	1886703a 	and	r3,r3,r2
   15c0c:	e0bff517 	ldw	r2,-44(fp)
   15c10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15c14:	e0bff517 	ldw	r2,-44(fp)
   15c18:	10800017 	ldw	r2,0(r2)
   15c1c:	10800104 	addi	r2,r2,4
   15c20:	1007883a 	mov	r3,r2
   15c24:	e0bff517 	ldw	r2,-44(fp)
   15c28:	10800817 	ldw	r2,32(r2)
   15c2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15c30:	e0bff617 	ldw	r2,-40(fp)
   15c34:	10800104 	addi	r2,r2,4
   15c38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15c3c:	003f6606 	br	159d8 <__alt_mem_Flash_flash_data+0xf40159d8>
}
   15c40:	e037883a 	mov	sp,fp
   15c44:	dfc00117 	ldw	ra,4(sp)
   15c48:	df000017 	ldw	fp,0(sp)
   15c4c:	dec00204 	addi	sp,sp,8
   15c50:	f800283a 	ret

00015c54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15c54:	defff904 	addi	sp,sp,-28
   15c58:	dfc00615 	stw	ra,24(sp)
   15c5c:	df000515 	stw	fp,20(sp)
   15c60:	df000504 	addi	fp,sp,20
   15c64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15c68:	e0bfff17 	ldw	r2,-4(fp)
   15c6c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15c70:	e0bffb17 	ldw	r2,-20(fp)
   15c74:	10800017 	ldw	r2,0(r2)
   15c78:	10800104 	addi	r2,r2,4
   15c7c:	10800037 	ldwio	r2,0(r2)
   15c80:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15c84:	e0bffc17 	ldw	r2,-16(fp)
   15c88:	1081000c 	andi	r2,r2,1024
   15c8c:	10000b26 	beq	r2,zero,15cbc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15c90:	e0bffb17 	ldw	r2,-20(fp)
   15c94:	10800017 	ldw	r2,0(r2)
   15c98:	10800104 	addi	r2,r2,4
   15c9c:	1007883a 	mov	r3,r2
   15ca0:	e0bffb17 	ldw	r2,-20(fp)
   15ca4:	10800817 	ldw	r2,32(r2)
   15ca8:	10810014 	ori	r2,r2,1024
   15cac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15cb0:	e0bffb17 	ldw	r2,-20(fp)
   15cb4:	10000915 	stw	zero,36(r2)
   15cb8:	00002206 	br	15d44 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15cbc:	e0bffb17 	ldw	r2,-20(fp)
   15cc0:	10c00917 	ldw	r3,36(r2)
   15cc4:	00a00034 	movhi	r2,32768
   15cc8:	10bfff04 	addi	r2,r2,-4
   15ccc:	10c01d36 	bltu	r2,r3,15d44 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   15cd0:	e0bffb17 	ldw	r2,-20(fp)
   15cd4:	10800917 	ldw	r2,36(r2)
   15cd8:	10c00044 	addi	r3,r2,1
   15cdc:	e0bffb17 	ldw	r2,-20(fp)
   15ce0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   15ce4:	e0bffb17 	ldw	r2,-20(fp)
   15ce8:	10c00917 	ldw	r3,36(r2)
   15cec:	e0bffb17 	ldw	r2,-20(fp)
   15cf0:	10800117 	ldw	r2,4(r2)
   15cf4:	18801336 	bltu	r3,r2,15d44 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   15cf8:	e0bffb17 	ldw	r2,-20(fp)
   15cfc:	10800c17 	ldw	r2,48(r2)
   15d00:	e0bffd15 	stw	r2,-12(fp)
   15d04:	00800104 	movi	r2,4
   15d08:	e0bffe0d 	sth	r2,-8(fp)
   15d0c:	00800044 	movi	r2,1
   15d10:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15d14:	008000b4 	movhi	r2,2
   15d18:	10b88944 	addi	r2,r2,-7643
   15d1c:	10800003 	ldbu	r2,0(r2)
   15d20:	10803fcc 	andi	r2,r2,255
   15d24:	10000726 	beq	r2,zero,15d44 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   15d28:	e17ffe0b 	ldhu	r5,-8(fp)
   15d2c:	e0fffe83 	ldbu	r3,-6(fp)
   15d30:	e0bffec4 	addi	r2,fp,-5
   15d34:	e13ffd17 	ldw	r4,-12(fp)
   15d38:	180d883a 	mov	r6,r3
   15d3c:	100f883a 	mov	r7,r2
   15d40:	00107280 	call	10728 <OSFlagPost>
   15d44:	008000b4 	movhi	r2,2
   15d48:	10b89f04 	addi	r2,r2,-7556
   15d4c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   15d50:	e037883a 	mov	sp,fp
   15d54:	dfc00117 	ldw	ra,4(sp)
   15d58:	df000017 	ldw	fp,0(sp)
   15d5c:	dec00204 	addi	sp,sp,8
   15d60:	f800283a 	ret

00015d64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15d64:	defffd04 	addi	sp,sp,-12
   15d68:	df000215 	stw	fp,8(sp)
   15d6c:	df000204 	addi	fp,sp,8
   15d70:	e13ffe15 	stw	r4,-8(fp)
   15d74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15d78:	00000506 	br	15d90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15d7c:	e0bfff17 	ldw	r2,-4(fp)
   15d80:	1090000c 	andi	r2,r2,16384
   15d84:	10000226 	beq	r2,zero,15d90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15d88:	00bffd44 	movi	r2,-11
   15d8c:	00000b06 	br	15dbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15d90:	e0bffe17 	ldw	r2,-8(fp)
   15d94:	10c01017 	ldw	r3,64(r2)
   15d98:	e0bffe17 	ldw	r2,-8(fp)
   15d9c:	10800f17 	ldw	r2,60(r2)
   15da0:	18800526 	beq	r3,r2,15db8 <altera_avalon_jtag_uart_close+0x54>
   15da4:	e0bffe17 	ldw	r2,-8(fp)
   15da8:	10c00917 	ldw	r3,36(r2)
   15dac:	e0bffe17 	ldw	r2,-8(fp)
   15db0:	10800117 	ldw	r2,4(r2)
   15db4:	18bff136 	bltu	r3,r2,15d7c <__alt_mem_Flash_flash_data+0xf4015d7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15db8:	0005883a 	mov	r2,zero
}
   15dbc:	e037883a 	mov	sp,fp
   15dc0:	df000017 	ldw	fp,0(sp)
   15dc4:	dec00104 	addi	sp,sp,4
   15dc8:	f800283a 	ret

00015dcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15dcc:	defffa04 	addi	sp,sp,-24
   15dd0:	df000515 	stw	fp,20(sp)
   15dd4:	df000504 	addi	fp,sp,20
   15dd8:	e13ffd15 	stw	r4,-12(fp)
   15ddc:	e17ffe15 	stw	r5,-8(fp)
   15de0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15de4:	00bff9c4 	movi	r2,-25
   15de8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15dec:	e0bffe17 	ldw	r2,-8(fp)
   15df0:	10da8060 	cmpeqi	r3,r2,27137
   15df4:	1800031e 	bne	r3,zero,15e04 <altera_avalon_jtag_uart_ioctl+0x38>
   15df8:	109a80a0 	cmpeqi	r2,r2,27138
   15dfc:	1000191e 	bne	r2,zero,15e64 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   15e00:	00002806 	br	15ea4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15e04:	e0bffd17 	ldw	r2,-12(fp)
   15e08:	10c00117 	ldw	r3,4(r2)
   15e0c:	00a00034 	movhi	r2,32768
   15e10:	10bfffc4 	addi	r2,r2,-1
   15e14:	18801226 	beq	r3,r2,15e60 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   15e18:	e0bfff17 	ldw	r2,-4(fp)
   15e1c:	10800017 	ldw	r2,0(r2)
   15e20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15e24:	e0bffc17 	ldw	r2,-16(fp)
   15e28:	10800090 	cmplti	r2,r2,2
   15e2c:	1000061e 	bne	r2,zero,15e48 <altera_avalon_jtag_uart_ioctl+0x7c>
   15e30:	e0fffc17 	ldw	r3,-16(fp)
   15e34:	00a00034 	movhi	r2,32768
   15e38:	10bfffc4 	addi	r2,r2,-1
   15e3c:	18800226 	beq	r3,r2,15e48 <altera_avalon_jtag_uart_ioctl+0x7c>
   15e40:	e0bffc17 	ldw	r2,-16(fp)
   15e44:	00000206 	br	15e50 <altera_avalon_jtag_uart_ioctl+0x84>
   15e48:	00a00034 	movhi	r2,32768
   15e4c:	10bfff84 	addi	r2,r2,-2
   15e50:	e0fffd17 	ldw	r3,-12(fp)
   15e54:	18800115 	stw	r2,4(r3)
      rc = 0;
   15e58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15e5c:	00001106 	br	15ea4 <altera_avalon_jtag_uart_ioctl+0xd8>
   15e60:	00001006 	br	15ea4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15e64:	e0bffd17 	ldw	r2,-12(fp)
   15e68:	10c00117 	ldw	r3,4(r2)
   15e6c:	00a00034 	movhi	r2,32768
   15e70:	10bfffc4 	addi	r2,r2,-1
   15e74:	18800a26 	beq	r3,r2,15ea0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15e78:	e0bffd17 	ldw	r2,-12(fp)
   15e7c:	10c00917 	ldw	r3,36(r2)
   15e80:	e0bffd17 	ldw	r2,-12(fp)
   15e84:	10800117 	ldw	r2,4(r2)
   15e88:	1885803a 	cmpltu	r2,r3,r2
   15e8c:	10c03fcc 	andi	r3,r2,255
   15e90:	e0bfff17 	ldw	r2,-4(fp)
   15e94:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15e98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15e9c:	00000006 	br	15ea0 <altera_avalon_jtag_uart_ioctl+0xd4>
   15ea0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15ea4:	e0bffb17 	ldw	r2,-20(fp)
}
   15ea8:	e037883a 	mov	sp,fp
   15eac:	df000017 	ldw	fp,0(sp)
   15eb0:	dec00104 	addi	sp,sp,4
   15eb4:	f800283a 	ret

00015eb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15eb8:	deffec04 	addi	sp,sp,-80
   15ebc:	dfc01315 	stw	ra,76(sp)
   15ec0:	df001215 	stw	fp,72(sp)
   15ec4:	df001204 	addi	fp,sp,72
   15ec8:	e13ffc15 	stw	r4,-16(fp)
   15ecc:	e17ffd15 	stw	r5,-12(fp)
   15ed0:	e1bffe15 	stw	r6,-8(fp)
   15ed4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15ed8:	e0bffd17 	ldw	r2,-12(fp)
   15edc:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   15ee0:	e0bffc17 	ldw	r2,-16(fp)
   15ee4:	10800a17 	ldw	r2,40(r2)
   15ee8:	e0bff415 	stw	r2,-48(fp)
   15eec:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   15ef0:	e0fff50b 	ldhu	r3,-44(fp)
   15ef4:	e0bffb04 	addi	r2,fp,-20
   15ef8:	e13ff417 	ldw	r4,-48(fp)
   15efc:	180b883a 	mov	r5,r3
   15f00:	100d883a 	mov	r6,r2
   15f04:	0012d780 	call	12d78 <OSSemPend>

  while (space > 0)
   15f08:	00006506 	br	160a0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15f0c:	e0bffc17 	ldw	r2,-16(fp)
   15f10:	10800d17 	ldw	r2,52(r2)
   15f14:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   15f18:	e0bffc17 	ldw	r2,-16(fp)
   15f1c:	10800e17 	ldw	r2,56(r2)
   15f20:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   15f24:	e0fff117 	ldw	r3,-60(fp)
   15f28:	e0bff217 	ldw	r2,-56(fp)
   15f2c:	18800536 	bltu	r3,r2,15f44 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   15f30:	e0fff117 	ldw	r3,-60(fp)
   15f34:	e0bff217 	ldw	r2,-56(fp)
   15f38:	1885c83a 	sub	r2,r3,r2
   15f3c:	e0bff015 	stw	r2,-64(fp)
   15f40:	00000406 	br	15f54 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15f44:	00c20004 	movi	r3,2048
   15f48:	e0bff217 	ldw	r2,-56(fp)
   15f4c:	1885c83a 	sub	r2,r3,r2
   15f50:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   15f54:	e0bff017 	ldw	r2,-64(fp)
   15f58:	1000011e 	bne	r2,zero,15f60 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   15f5c:	00001d06 	br	15fd4 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   15f60:	e0fffe17 	ldw	r3,-8(fp)
   15f64:	e0bff017 	ldw	r2,-64(fp)
   15f68:	1880022e 	bgeu	r3,r2,15f74 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
   15f70:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15f74:	e0bff217 	ldw	r2,-56(fp)
   15f78:	10801104 	addi	r2,r2,68
   15f7c:	e0fffc17 	ldw	r3,-16(fp)
   15f80:	1885883a 	add	r2,r3,r2
   15f84:	e13fef17 	ldw	r4,-68(fp)
   15f88:	100b883a 	mov	r5,r2
   15f8c:	e1bff017 	ldw	r6,-64(fp)
   15f90:	00059ac0 	call	59ac <memcpy>
      ptr   += n;
   15f94:	e0ffef17 	ldw	r3,-68(fp)
   15f98:	e0bff017 	ldw	r2,-64(fp)
   15f9c:	1885883a 	add	r2,r3,r2
   15fa0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   15fa4:	e0fffe17 	ldw	r3,-8(fp)
   15fa8:	e0bff017 	ldw	r2,-64(fp)
   15fac:	1885c83a 	sub	r2,r3,r2
   15fb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15fb4:	e0fff217 	ldw	r3,-56(fp)
   15fb8:	e0bff017 	ldw	r2,-64(fp)
   15fbc:	1885883a 	add	r2,r3,r2
   15fc0:	10c1ffcc 	andi	r3,r2,2047
   15fc4:	e0bffc17 	ldw	r2,-16(fp)
   15fc8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   15fcc:	e0bffe17 	ldw	r2,-8(fp)
   15fd0:	00bfce16 	blt	zero,r2,15f0c <__alt_mem_Flash_flash_data+0xf4015f0c>

    /* If we read any data then return it */
    if (ptr != buffer)
   15fd4:	e0ffef17 	ldw	r3,-68(fp)
   15fd8:	e0bffd17 	ldw	r2,-12(fp)
   15fdc:	18800126 	beq	r3,r2,15fe4 <altera_avalon_jtag_uart_read+0x12c>
      break;
   15fe0:	00003106 	br	160a8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15fe4:	e0bfff17 	ldw	r2,-4(fp)
   15fe8:	1090000c 	andi	r2,r2,16384
   15fec:	10000126 	beq	r2,zero,15ff4 <altera_avalon_jtag_uart_read+0x13c>
      break;
   15ff0:	00002d06 	br	160a8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   15ff4:	008000b4 	movhi	r2,2
   15ff8:	10b88944 	addi	r2,r2,-7643
   15ffc:	10800003 	ldbu	r2,0(r2)
   16000:	10803fcc 	andi	r2,r2,255
   16004:	10800058 	cmpnei	r2,r2,1
   16008:	1000161e 	bne	r2,zero,16064 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1600c:	e0bffc17 	ldw	r2,-16(fp)
   16010:	10800c17 	ldw	r2,48(r2)
   16014:	e0bff615 	stw	r2,-40(fp)
   16018:	00800144 	movi	r2,5
   1601c:	e0bff70d 	sth	r2,-36(fp)
   16020:	00bfe0c4 	movi	r2,-125
   16024:	e0bff785 	stb	r2,-34(fp)
   16028:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1602c:	008000b4 	movhi	r2,2
   16030:	10b88944 	addi	r2,r2,-7643
   16034:	10800003 	ldbu	r2,0(r2)
   16038:	10803fcc 	andi	r2,r2,255
   1603c:	10001326 	beq	r2,zero,1608c <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16040:	e17ff70b 	ldhu	r5,-36(fp)
   16044:	e1bff783 	ldbu	r6,-34(fp)
   16048:	e0fff80b 	ldhu	r3,-32(fp)
   1604c:	e0bffb44 	addi	r2,fp,-19
   16050:	d8800015 	stw	r2,0(sp)
   16054:	e13ff617 	ldw	r4,-40(fp)
   16058:	180f883a 	mov	r7,r3
   1605c:	00100d00 	call	100d0 <OSFlagPend>
   16060:	00000a06 	br	1608c <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16064:	0001883a 	nop
   16068:	e0bffc17 	ldw	r2,-16(fp)
   1606c:	10c00d17 	ldw	r3,52(r2)
   16070:	e0bff117 	ldw	r2,-60(fp)
   16074:	1880051e 	bne	r3,r2,1608c <altera_avalon_jtag_uart_read+0x1d4>
   16078:	e0bffc17 	ldw	r2,-16(fp)
   1607c:	10c00917 	ldw	r3,36(r2)
   16080:	e0bffc17 	ldw	r2,-16(fp)
   16084:	10800117 	ldw	r2,4(r2)
   16088:	18bff736 	bltu	r3,r2,16068 <__alt_mem_Flash_flash_data+0xf4016068>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1608c:	e0bffc17 	ldw	r2,-16(fp)
   16090:	10c00d17 	ldw	r3,52(r2)
   16094:	e0bff117 	ldw	r2,-60(fp)
   16098:	1880011e 	bne	r3,r2,160a0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1609c:	00000206 	br	160a8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   160a0:	e0bffe17 	ldw	r2,-8(fp)
   160a4:	00bf9916 	blt	zero,r2,15f0c <__alt_mem_Flash_flash_data+0xf4015f0c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   160a8:	e0bffc17 	ldw	r2,-16(fp)
   160ac:	10800a17 	ldw	r2,40(r2)
   160b0:	1009883a 	mov	r4,r2
   160b4:	001314c0 	call	1314c <OSSemPost>

  if (ptr != buffer)
   160b8:	e0ffef17 	ldw	r3,-68(fp)
   160bc:	e0bffd17 	ldw	r2,-12(fp)
   160c0:	18801826 	beq	r3,r2,16124 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160c4:	0005303a 	rdctl	r2,status
   160c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160cc:	e0fff917 	ldw	r3,-28(fp)
   160d0:	00bfff84 	movi	r2,-2
   160d4:	1884703a 	and	r2,r3,r2
   160d8:	1001703a 	wrctl	status,r2
  
  return context;
   160dc:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   160e0:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   160e4:	e0bffc17 	ldw	r2,-16(fp)
   160e8:	10800817 	ldw	r2,32(r2)
   160ec:	10c00054 	ori	r3,r2,1
   160f0:	e0bffc17 	ldw	r2,-16(fp)
   160f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   160f8:	e0bffc17 	ldw	r2,-16(fp)
   160fc:	10800017 	ldw	r2,0(r2)
   16100:	10800104 	addi	r2,r2,4
   16104:	1007883a 	mov	r3,r2
   16108:	e0bffc17 	ldw	r2,-16(fp)
   1610c:	10800817 	ldw	r2,32(r2)
   16110:	18800035 	stwio	r2,0(r3)
   16114:	e0bff317 	ldw	r2,-52(fp)
   16118:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1611c:	e0bffa17 	ldw	r2,-24(fp)
   16120:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16124:	e0ffef17 	ldw	r3,-68(fp)
   16128:	e0bffd17 	ldw	r2,-12(fp)
   1612c:	18800426 	beq	r3,r2,16140 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   16130:	e0ffef17 	ldw	r3,-68(fp)
   16134:	e0bffd17 	ldw	r2,-12(fp)
   16138:	1885c83a 	sub	r2,r3,r2
   1613c:	00000606 	br	16158 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   16140:	e0bfff17 	ldw	r2,-4(fp)
   16144:	1090000c 	andi	r2,r2,16384
   16148:	10000226 	beq	r2,zero,16154 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1614c:	00bffd44 	movi	r2,-11
   16150:	00000106 	br	16158 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   16154:	00bffec4 	movi	r2,-5
}
   16158:	e037883a 	mov	sp,fp
   1615c:	dfc00117 	ldw	ra,4(sp)
   16160:	df000017 	ldw	fp,0(sp)
   16164:	dec00204 	addi	sp,sp,8
   16168:	f800283a 	ret

0001616c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1616c:	deffed04 	addi	sp,sp,-76
   16170:	dfc01215 	stw	ra,72(sp)
   16174:	df001115 	stw	fp,68(sp)
   16178:	df001104 	addi	fp,sp,68
   1617c:	e13ffc15 	stw	r4,-16(fp)
   16180:	e17ffd15 	stw	r5,-12(fp)
   16184:	e1bffe15 	stw	r6,-8(fp)
   16188:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1618c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16190:	e0bffd17 	ldw	r2,-12(fp)
   16194:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16198:	e0bffc17 	ldw	r2,-16(fp)
   1619c:	10800b17 	ldw	r2,44(r2)
   161a0:	e0bff515 	stw	r2,-44(fp)
   161a4:	e03ff60d 	sth	zero,-40(fp)
   161a8:	e0fff60b 	ldhu	r3,-40(fp)
   161ac:	e0bffbc4 	addi	r2,fp,-17
   161b0:	e13ff517 	ldw	r4,-44(fp)
   161b4:	180b883a 	mov	r5,r3
   161b8:	100d883a 	mov	r6,r2
   161bc:	0012d780 	call	12d78 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   161c0:	00003806 	br	162a4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   161c4:	e0bffc17 	ldw	r2,-16(fp)
   161c8:	10800f17 	ldw	r2,60(r2)
   161cc:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   161d0:	e0bffc17 	ldw	r2,-16(fp)
   161d4:	10801017 	ldw	r2,64(r2)
   161d8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   161dc:	e0fff317 	ldw	r3,-52(fp)
   161e0:	e0bff017 	ldw	r2,-64(fp)
   161e4:	1880062e 	bgeu	r3,r2,16200 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   161e8:	e0fff017 	ldw	r3,-64(fp)
   161ec:	e0bff317 	ldw	r2,-52(fp)
   161f0:	1885c83a 	sub	r2,r3,r2
   161f4:	10bfffc4 	addi	r2,r2,-1
   161f8:	e0bff115 	stw	r2,-60(fp)
   161fc:	00000b06 	br	1622c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16200:	e0bff017 	ldw	r2,-64(fp)
   16204:	10000526 	beq	r2,zero,1621c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16208:	00c20004 	movi	r3,2048
   1620c:	e0bff317 	ldw	r2,-52(fp)
   16210:	1885c83a 	sub	r2,r3,r2
   16214:	e0bff115 	stw	r2,-60(fp)
   16218:	00000406 	br	1622c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1621c:	00c1ffc4 	movi	r3,2047
   16220:	e0bff317 	ldw	r2,-52(fp)
   16224:	1885c83a 	sub	r2,r3,r2
   16228:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1622c:	e0bff117 	ldw	r2,-60(fp)
   16230:	1000011e 	bne	r2,zero,16238 <altera_avalon_jtag_uart_write+0xcc>
        break;
   16234:	00001d06 	br	162ac <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   16238:	e0fffe17 	ldw	r3,-8(fp)
   1623c:	e0bff117 	ldw	r2,-60(fp)
   16240:	1880022e 	bgeu	r3,r2,1624c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   16244:	e0bffe17 	ldw	r2,-8(fp)
   16248:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1624c:	e0bff317 	ldw	r2,-52(fp)
   16250:	10821104 	addi	r2,r2,2116
   16254:	e0fffc17 	ldw	r3,-16(fp)
   16258:	1885883a 	add	r2,r3,r2
   1625c:	1009883a 	mov	r4,r2
   16260:	e17ffd17 	ldw	r5,-12(fp)
   16264:	e1bff117 	ldw	r6,-60(fp)
   16268:	00059ac0 	call	59ac <memcpy>
      ptr   += n;
   1626c:	e0fffd17 	ldw	r3,-12(fp)
   16270:	e0bff117 	ldw	r2,-60(fp)
   16274:	1885883a 	add	r2,r3,r2
   16278:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1627c:	e0fffe17 	ldw	r3,-8(fp)
   16280:	e0bff117 	ldw	r2,-60(fp)
   16284:	1885c83a 	sub	r2,r3,r2
   16288:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1628c:	e0fff317 	ldw	r3,-52(fp)
   16290:	e0bff117 	ldw	r2,-60(fp)
   16294:	1885883a 	add	r2,r3,r2
   16298:	10c1ffcc 	andi	r3,r2,2047
   1629c:	e0bffc17 	ldw	r2,-16(fp)
   162a0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   162a4:	e0bffe17 	ldw	r2,-8(fp)
   162a8:	00bfc616 	blt	zero,r2,161c4 <__alt_mem_Flash_flash_data+0xf40161c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162ac:	0005303a 	rdctl	r2,status
   162b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162b4:	e0fff717 	ldw	r3,-36(fp)
   162b8:	00bfff84 	movi	r2,-2
   162bc:	1884703a 	and	r2,r3,r2
   162c0:	1001703a 	wrctl	status,r2
  
  return context;
   162c4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   162c8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   162cc:	e0bffc17 	ldw	r2,-16(fp)
   162d0:	10800817 	ldw	r2,32(r2)
   162d4:	10c00094 	ori	r3,r2,2
   162d8:	e0bffc17 	ldw	r2,-16(fp)
   162dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   162e0:	e0bffc17 	ldw	r2,-16(fp)
   162e4:	10800017 	ldw	r2,0(r2)
   162e8:	10800104 	addi	r2,r2,4
   162ec:	1007883a 	mov	r3,r2
   162f0:	e0bffc17 	ldw	r2,-16(fp)
   162f4:	10800817 	ldw	r2,32(r2)
   162f8:	18800035 	stwio	r2,0(r3)
   162fc:	e0bff417 	ldw	r2,-48(fp)
   16300:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16304:	e0bff817 	ldw	r2,-32(fp)
   16308:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1630c:	e0bffe17 	ldw	r2,-8(fp)
   16310:	00802e0e 	bge	zero,r2,163cc <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	1090000c 	andi	r2,r2,16384
   1631c:	10000126 	beq	r2,zero,16324 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   16320:	00002c06 	br	163d4 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16324:	008000b4 	movhi	r2,2
   16328:	10b88944 	addi	r2,r2,-7643
   1632c:	10800003 	ldbu	r2,0(r2)
   16330:	10803fcc 	andi	r2,r2,255
   16334:	10800058 	cmpnei	r2,r2,1
   16338:	1000161e 	bne	r2,zero,16394 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1633c:	e0bffc17 	ldw	r2,-16(fp)
   16340:	10800c17 	ldw	r2,48(r2)
   16344:	e0bff915 	stw	r2,-28(fp)
   16348:	00800184 	movi	r2,6
   1634c:	e0bffa0d 	sth	r2,-24(fp)
   16350:	00bfe0c4 	movi	r2,-125
   16354:	e0bffa85 	stb	r2,-22(fp)
   16358:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1635c:	008000b4 	movhi	r2,2
   16360:	10b88944 	addi	r2,r2,-7643
   16364:	10800003 	ldbu	r2,0(r2)
   16368:	10803fcc 	andi	r2,r2,255
   1636c:	10001326 	beq	r2,zero,163bc <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16370:	e17ffa0b 	ldhu	r5,-24(fp)
   16374:	e1bffa83 	ldbu	r6,-22(fp)
   16378:	e0fffb0b 	ldhu	r3,-20(fp)
   1637c:	e0bffb84 	addi	r2,fp,-18
   16380:	d8800015 	stw	r2,0(sp)
   16384:	e13ff917 	ldw	r4,-28(fp)
   16388:	180f883a 	mov	r7,r3
   1638c:	00100d00 	call	100d0 <OSFlagPend>
   16390:	00000a06 	br	163bc <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16394:	0001883a 	nop
   16398:	e0bffc17 	ldw	r2,-16(fp)
   1639c:	10c01017 	ldw	r3,64(r2)
   163a0:	e0bff017 	ldw	r2,-64(fp)
   163a4:	1880051e 	bne	r3,r2,163bc <altera_avalon_jtag_uart_write+0x250>
   163a8:	e0bffc17 	ldw	r2,-16(fp)
   163ac:	10c00917 	ldw	r3,36(r2)
   163b0:	e0bffc17 	ldw	r2,-16(fp)
   163b4:	10800117 	ldw	r2,4(r2)
   163b8:	18bff736 	bltu	r3,r2,16398 <__alt_mem_Flash_flash_data+0xf4016398>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   163bc:	e0bffc17 	ldw	r2,-16(fp)
   163c0:	10800917 	ldw	r2,36(r2)
   163c4:	10000126 	beq	r2,zero,163cc <altera_avalon_jtag_uart_write+0x260>
         break;
   163c8:	00000206 	br	163d4 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   163cc:	e0bffe17 	ldw	r2,-8(fp)
   163d0:	00bf7b16 	blt	zero,r2,161c0 <__alt_mem_Flash_flash_data+0xf40161c0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   163d4:	e0bffc17 	ldw	r2,-16(fp)
   163d8:	10800b17 	ldw	r2,44(r2)
   163dc:	1009883a 	mov	r4,r2
   163e0:	001314c0 	call	1314c <OSSemPost>

  if (ptr != start)
   163e4:	e0fffd17 	ldw	r3,-12(fp)
   163e8:	e0bff217 	ldw	r2,-56(fp)
   163ec:	18800426 	beq	r3,r2,16400 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   163f0:	e0fffd17 	ldw	r3,-12(fp)
   163f4:	e0bff217 	ldw	r2,-56(fp)
   163f8:	1885c83a 	sub	r2,r3,r2
   163fc:	00000606 	br	16418 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   16400:	e0bfff17 	ldw	r2,-4(fp)
   16404:	1090000c 	andi	r2,r2,16384
   16408:	10000226 	beq	r2,zero,16414 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1640c:	00bffd44 	movi	r2,-11
   16410:	00000106 	br	16418 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16414:	00bffec4 	movi	r2,-5
}
   16418:	e037883a 	mov	sp,fp
   1641c:	dfc00117 	ldw	ra,4(sp)
   16420:	df000017 	ldw	fp,0(sp)
   16424:	dec00204 	addi	sp,sp,8
   16428:	f800283a 	ret

0001642c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1642c:	defff904 	addi	sp,sp,-28
   16430:	dfc00615 	stw	ra,24(sp)
   16434:	df000515 	stw	fp,20(sp)
   16438:	df000504 	addi	fp,sp,20
   1643c:	e13ffe15 	stw	r4,-8(fp)
   16440:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16444:	0007883a 	mov	r3,zero
   16448:	e0bffe17 	ldw	r2,-8(fp)
   1644c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16450:	e0bffe17 	ldw	r2,-8(fp)
   16454:	10800104 	addi	r2,r2,4
   16458:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1645c:	0005303a 	rdctl	r2,status
   16460:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16464:	e0fffc17 	ldw	r3,-16(fp)
   16468:	00bfff84 	movi	r2,-2
   1646c:	1884703a 	and	r2,r3,r2
   16470:	1001703a 	wrctl	status,r2
  
  return context;
   16474:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16478:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1647c:	0018a440 	call	18a44 <alt_tick>
   16480:	e0bffb17 	ldw	r2,-20(fp)
   16484:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16488:	e0bffd17 	ldw	r2,-12(fp)
   1648c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16490:	e037883a 	mov	sp,fp
   16494:	dfc00117 	ldw	ra,4(sp)
   16498:	df000017 	ldw	fp,0(sp)
   1649c:	dec00204 	addi	sp,sp,8
   164a0:	f800283a 	ret

000164a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   164a4:	defff904 	addi	sp,sp,-28
   164a8:	dfc00615 	stw	ra,24(sp)
   164ac:	df000515 	stw	fp,20(sp)
   164b0:	df000504 	addi	fp,sp,20
   164b4:	e13ffc15 	stw	r4,-16(fp)
   164b8:	e17ffd15 	stw	r5,-12(fp)
   164bc:	e1bffe15 	stw	r6,-8(fp)
   164c0:	e1ffff15 	stw	r7,-4(fp)
   164c4:	e0bfff17 	ldw	r2,-4(fp)
   164c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   164cc:	008000b4 	movhi	r2,2
   164d0:	10b89f04 	addi	r2,r2,-7556
   164d4:	10800017 	ldw	r2,0(r2)
   164d8:	1000041e 	bne	r2,zero,164ec <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   164dc:	008000b4 	movhi	r2,2
   164e0:	10b89f04 	addi	r2,r2,-7556
   164e4:	e0fffb17 	ldw	r3,-20(fp)
   164e8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   164ec:	e0bffc17 	ldw	r2,-16(fp)
   164f0:	10800104 	addi	r2,r2,4
   164f4:	00c001c4 	movi	r3,7
   164f8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   164fc:	e13ffe17 	ldw	r4,-8(fp)
   16500:	e17ffc17 	ldw	r5,-16(fp)
   16504:	01800074 	movhi	r6,1
   16508:	31990b04 	addi	r6,r6,25644
   1650c:	00185880 	call	18588 <alt_irq_register>
#endif  
}
   16510:	e037883a 	mov	sp,fp
   16514:	dfc00117 	ldw	ra,4(sp)
   16518:	df000017 	ldw	fp,0(sp)
   1651c:	dec00204 	addi	sp,sp,8
   16520:	f800283a 	ret

00016524 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16524:	defffc04 	addi	sp,sp,-16
   16528:	df000315 	stw	fp,12(sp)
   1652c:	df000304 	addi	fp,sp,12
   16530:	e13ffe15 	stw	r4,-8(fp)
   16534:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16538:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1653c:	e0bfff17 	ldw	r2,-4(fp)
   16540:	1000061e 	bne	r2,zero,1655c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   16544:	e0bffe17 	ldw	r2,-8(fp)
   16548:	1007883a 	mov	r3,r2
   1654c:	e0bffd03 	ldbu	r2,-12(fp)
   16550:	1884b03a 	or	r2,r3,r2
   16554:	e0bffd05 	stb	r2,-12(fp)
   16558:	00000806 	br	1657c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1655c:	e0bffe17 	ldw	r2,-8(fp)
   16560:	1007883a 	mov	r3,r2
   16564:	e0bffd03 	ldbu	r2,-12(fp)
   16568:	1884b03a 	or	r2,r3,r2
   1656c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   16570:	e0bffd03 	ldbu	r2,-12(fp)
   16574:	10801014 	ori	r2,r2,64
   16578:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1657c:	e0fffd03 	ldbu	r3,-12(fp)
   16580:	00bfe004 	movi	r2,-128
   16584:	1884b03a 	or	r2,r3,r2
}
   16588:	e037883a 	mov	sp,fp
   1658c:	df000017 	ldw	fp,0(sp)
   16590:	dec00104 	addi	sp,sp,4
   16594:	f800283a 	ret

00016598 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16598:	defffd04 	addi	sp,sp,-12
   1659c:	df000215 	stw	fp,8(sp)
   165a0:	df000204 	addi	fp,sp,8
   165a4:	e13ffe15 	stw	r4,-8(fp)
   165a8:	2805883a 	mov	r2,r5
   165ac:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   165b0:	e0bffe17 	ldw	r2,-8(fp)
   165b4:	10800a17 	ldw	r2,40(r2)
   165b8:	1007883a 	mov	r3,r2
   165bc:	e0bfff03 	ldbu	r2,-4(fp)
   165c0:	18800025 	stbio	r2,0(r3)
}
   165c4:	e037883a 	mov	sp,fp
   165c8:	df000017 	ldw	fp,0(sp)
   165cc:	dec00104 	addi	sp,sp,4
   165d0:	f800283a 	ret

000165d4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   165d4:	defffe04 	addi	sp,sp,-8
   165d8:	df000115 	stw	fp,4(sp)
   165dc:	df000104 	addi	fp,sp,4
   165e0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   165e4:	e0bfff17 	ldw	r2,-4(fp)
   165e8:	10800a17 	ldw	r2,40(r2)
   165ec:	1007883a 	mov	r3,r2
   165f0:	00800044 	movi	r2,1
   165f4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   165f8:	e037883a 	mov	sp,fp
   165fc:	df000017 	ldw	fp,0(sp)
   16600:	dec00104 	addi	sp,sp,4
   16604:	f800283a 	ret

00016608 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   16608:	defffc04 	addi	sp,sp,-16
   1660c:	dfc00315 	stw	ra,12(sp)
   16610:	df000215 	stw	fp,8(sp)
   16614:	df000204 	addi	fp,sp,8
   16618:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1661c:	e13fff17 	ldw	r4,-4(fp)
   16620:	014000b4 	movhi	r5,2
   16624:	296fdc04 	addi	r5,r5,-16528
   16628:	00183900 	call	18390 <alt_find_dev>
   1662c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16630:	e0bffe17 	ldw	r2,-8(fp)
}
   16634:	e037883a 	mov	sp,fp
   16638:	dfc00117 	ldw	ra,4(sp)
   1663c:	df000017 	ldw	fp,0(sp)
   16640:	dec00204 	addi	sp,sp,8
   16644:	f800283a 	ret

00016648 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16648:	defffb04 	addi	sp,sp,-20
   1664c:	df000415 	stw	fp,16(sp)
   16650:	df000404 	addi	fp,sp,16
   16654:	e13ffd15 	stw	r4,-12(fp)
   16658:	e17ffe15 	stw	r5,-8(fp)
   1665c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16660:	e03ffc15 	stw	zero,-16(fp)
   16664:	00000f06 	br	166a4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16668:	e0bffd17 	ldw	r2,-12(fp)
   1666c:	10800a17 	ldw	r2,40(r2)
   16670:	10800044 	addi	r2,r2,1
   16674:	1009883a 	mov	r4,r2
   16678:	e0fffe17 	ldw	r3,-8(fp)
   1667c:	e0bffc17 	ldw	r2,-16(fp)
   16680:	1885883a 	add	r2,r3,r2
   16684:	10800003 	ldbu	r2,0(r2)
   16688:	10803fcc 	andi	r2,r2,255
   1668c:	1080201c 	xori	r2,r2,128
   16690:	10bfe004 	addi	r2,r2,-128
   16694:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16698:	e0bffc17 	ldw	r2,-16(fp)
   1669c:	10800044 	addi	r2,r2,1
   166a0:	e0bffc15 	stw	r2,-16(fp)
   166a4:	e0fffc17 	ldw	r3,-16(fp)
   166a8:	e0bfff17 	ldw	r2,-4(fp)
   166ac:	18bfee36 	bltu	r3,r2,16668 <__alt_mem_Flash_flash_data+0xf4016668>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   166b0:	e037883a 	mov	sp,fp
   166b4:	df000017 	ldw	fp,0(sp)
   166b8:	dec00104 	addi	sp,sp,4
   166bc:	f800283a 	ret

000166c0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   166c0:	defffd04 	addi	sp,sp,-12
   166c4:	df000215 	stw	fp,8(sp)
   166c8:	df000204 	addi	fp,sp,8
   166cc:	e13ffe15 	stw	r4,-8(fp)
   166d0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   166d4:	00000d06 	br	1670c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   166d8:	e0bffe17 	ldw	r2,-8(fp)
   166dc:	10800a17 	ldw	r2,40(r2)
   166e0:	10800044 	addi	r2,r2,1
   166e4:	1007883a 	mov	r3,r2
   166e8:	e0bfff17 	ldw	r2,-4(fp)
   166ec:	10800003 	ldbu	r2,0(r2)
   166f0:	10803fcc 	andi	r2,r2,255
   166f4:	1080201c 	xori	r2,r2,128
   166f8:	10bfe004 	addi	r2,r2,-128
   166fc:	18800025 	stbio	r2,0(r3)
		++ptr;
   16700:	e0bfff17 	ldw	r2,-4(fp)
   16704:	10800044 	addi	r2,r2,1
   16708:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1670c:	e0bfff17 	ldw	r2,-4(fp)
   16710:	10800003 	ldbu	r2,0(r2)
   16714:	10803fcc 	andi	r2,r2,255
   16718:	1080201c 	xori	r2,r2,128
   1671c:	10bfe004 	addi	r2,r2,-128
   16720:	103fed1e 	bne	r2,zero,166d8 <__alt_mem_Flash_flash_data+0xf40166d8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   16724:	e037883a 	mov	sp,fp
   16728:	df000017 	ldw	fp,0(sp)
   1672c:	dec00104 	addi	sp,sp,4
   16730:	f800283a 	ret

00016734 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16734:	defffb04 	addi	sp,sp,-20
   16738:	dfc00415 	stw	ra,16(sp)
   1673c:	df000315 	stw	fp,12(sp)
   16740:	df000304 	addi	fp,sp,12
   16744:	e13ffd15 	stw	r4,-12(fp)
   16748:	e17ffe15 	stw	r5,-8(fp)
   1674c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16750:	e0bffd17 	ldw	r2,-12(fp)
   16754:	10c00017 	ldw	r3,0(r2)
   16758:	e0bfff17 	ldw	r2,-4(fp)
   1675c:	1809883a 	mov	r4,r3
   16760:	e17ffe17 	ldw	r5,-8(fp)
   16764:	100d883a 	mov	r6,r2
   16768:	00166480 	call	16648 <alt_up_character_lcd_write>
	return 0;
   1676c:	0005883a 	mov	r2,zero
}
   16770:	e037883a 	mov	sp,fp
   16774:	dfc00117 	ldw	ra,4(sp)
   16778:	df000017 	ldw	fp,0(sp)
   1677c:	dec00204 	addi	sp,sp,8
   16780:	f800283a 	ret

00016784 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16784:	defffa04 	addi	sp,sp,-24
   16788:	dfc00515 	stw	ra,20(sp)
   1678c:	df000415 	stw	fp,16(sp)
   16790:	df000404 	addi	fp,sp,16
   16794:	e13ffd15 	stw	r4,-12(fp)
   16798:	e17ffe15 	stw	r5,-8(fp)
   1679c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   167a0:	e0bffe17 	ldw	r2,-8(fp)
   167a4:	10800a28 	cmpgeui	r2,r2,40
   167a8:	1000031e 	bne	r2,zero,167b8 <alt_up_character_lcd_set_cursor_pos+0x34>
   167ac:	e0bfff17 	ldw	r2,-4(fp)
   167b0:	108000b0 	cmpltui	r2,r2,2
   167b4:	1000021e 	bne	r2,zero,167c0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   167b8:	00bfffc4 	movi	r2,-1
   167bc:	00000906 	br	167e4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   167c0:	e13ffe17 	ldw	r4,-8(fp)
   167c4:	e17fff17 	ldw	r5,-4(fp)
   167c8:	00165240 	call	16524 <get_DDRAM_addr>
   167cc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   167d0:	e0bffc03 	ldbu	r2,-16(fp)
   167d4:	e13ffd17 	ldw	r4,-12(fp)
   167d8:	100b883a 	mov	r5,r2
   167dc:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
	return 0;
   167e0:	0005883a 	mov	r2,zero
}
   167e4:	e037883a 	mov	sp,fp
   167e8:	dfc00117 	ldw	ra,4(sp)
   167ec:	df000017 	ldw	fp,0(sp)
   167f0:	dec00204 	addi	sp,sp,8
   167f4:	f800283a 	ret

000167f8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   167f8:	defffb04 	addi	sp,sp,-20
   167fc:	dfc00415 	stw	ra,16(sp)
   16800:	df000315 	stw	fp,12(sp)
   16804:	df000304 	addi	fp,sp,12
   16808:	e13ffe15 	stw	r4,-8(fp)
   1680c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16810:	e0bfff17 	ldw	r2,-4(fp)
   16814:	1000011e 	bne	r2,zero,1681c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   16818:	00001406 	br	1686c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1681c:	e0bfff17 	ldw	r2,-4(fp)
   16820:	0080020e 	bge	zero,r2,1682c <alt_up_character_lcd_shift_cursor+0x34>
   16824:	00800504 	movi	r2,20
   16828:	00000106 	br	16830 <alt_up_character_lcd_shift_cursor+0x38>
   1682c:	00800404 	movi	r2,16
   16830:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16834:	e0bfff17 	ldw	r2,-4(fp)
   16838:	1000010e 	bge	r2,zero,16840 <alt_up_character_lcd_shift_cursor+0x48>
   1683c:	0085c83a 	sub	r2,zero,r2
   16840:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16844:	00000406 	br	16858 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16848:	e0bffd43 	ldbu	r2,-11(fp)
   1684c:	e13ffe17 	ldw	r4,-8(fp)
   16850:	100b883a 	mov	r5,r2
   16854:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16858:	e0bffd03 	ldbu	r2,-12(fp)
   1685c:	10ffffc4 	addi	r3,r2,-1
   16860:	e0fffd05 	stb	r3,-12(fp)
   16864:	10803fcc 	andi	r2,r2,255
   16868:	103ff71e 	bne	r2,zero,16848 <__alt_mem_Flash_flash_data+0xf4016848>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1686c:	e037883a 	mov	sp,fp
   16870:	dfc00117 	ldw	ra,4(sp)
   16874:	df000017 	ldw	fp,0(sp)
   16878:	dec00204 	addi	sp,sp,8
   1687c:	f800283a 	ret

00016880 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16880:	defffb04 	addi	sp,sp,-20
   16884:	dfc00415 	stw	ra,16(sp)
   16888:	df000315 	stw	fp,12(sp)
   1688c:	df000304 	addi	fp,sp,12
   16890:	e13ffe15 	stw	r4,-8(fp)
   16894:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16898:	e0bfff17 	ldw	r2,-4(fp)
   1689c:	1000011e 	bne	r2,zero,168a4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   168a0:	00001406 	br	168f4 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   168a4:	e0bfff17 	ldw	r2,-4(fp)
   168a8:	0080020e 	bge	zero,r2,168b4 <alt_up_character_lcd_shift_display+0x34>
   168ac:	00800704 	movi	r2,28
   168b0:	00000106 	br	168b8 <alt_up_character_lcd_shift_display+0x38>
   168b4:	00800604 	movi	r2,24
   168b8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   168bc:	e0bfff17 	ldw	r2,-4(fp)
   168c0:	1000010e 	bge	r2,zero,168c8 <alt_up_character_lcd_shift_display+0x48>
   168c4:	0085c83a 	sub	r2,zero,r2
   168c8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   168cc:	00000406 	br	168e0 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   168d0:	e0bffd43 	ldbu	r2,-11(fp)
   168d4:	e13ffe17 	ldw	r4,-8(fp)
   168d8:	100b883a 	mov	r5,r2
   168dc:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   168e0:	e0bffd03 	ldbu	r2,-12(fp)
   168e4:	10ffffc4 	addi	r3,r2,-1
   168e8:	e0fffd05 	stb	r3,-12(fp)
   168ec:	10803fcc 	andi	r2,r2,255
   168f0:	103ff71e 	bne	r2,zero,168d0 <__alt_mem_Flash_flash_data+0xf40168d0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   168f4:	e037883a 	mov	sp,fp
   168f8:	dfc00117 	ldw	ra,4(sp)
   168fc:	df000017 	ldw	fp,0(sp)
   16900:	dec00204 	addi	sp,sp,8
   16904:	f800283a 	ret

00016908 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   16908:	defffa04 	addi	sp,sp,-24
   1690c:	dfc00515 	stw	ra,20(sp)
   16910:	df000415 	stw	fp,16(sp)
   16914:	df000404 	addi	fp,sp,16
   16918:	e13ffd15 	stw	r4,-12(fp)
   1691c:	e17ffe15 	stw	r5,-8(fp)
   16920:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16924:	e0bffe17 	ldw	r2,-8(fp)
   16928:	10800a28 	cmpgeui	r2,r2,40
   1692c:	1000031e 	bne	r2,zero,1693c <alt_up_character_lcd_erase_pos+0x34>
   16930:	e0bfff17 	ldw	r2,-4(fp)
   16934:	108000b0 	cmpltui	r2,r2,2
   16938:	1000021e 	bne	r2,zero,16944 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1693c:	00bfffc4 	movi	r2,-1
   16940:	00000f06 	br	16980 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16944:	e13ffe17 	ldw	r4,-8(fp)
   16948:	e17fff17 	ldw	r5,-4(fp)
   1694c:	00165240 	call	16524 <get_DDRAM_addr>
   16950:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16954:	e0bffc03 	ldbu	r2,-16(fp)
   16958:	e13ffd17 	ldw	r4,-12(fp)
   1695c:	100b883a 	mov	r5,r2
   16960:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16964:	e0bffd17 	ldw	r2,-12(fp)
   16968:	10800a17 	ldw	r2,40(r2)
   1696c:	10800044 	addi	r2,r2,1
   16970:	1007883a 	mov	r3,r2
   16974:	00800084 	movi	r2,2
   16978:	18800025 	stbio	r2,0(r3)
	return 0;
   1697c:	0005883a 	mov	r2,zero
}
   16980:	e037883a 	mov	sp,fp
   16984:	dfc00117 	ldw	ra,4(sp)
   16988:	df000017 	ldw	fp,0(sp)
   1698c:	dec00204 	addi	sp,sp,8
   16990:	f800283a 	ret

00016994 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   16994:	defffd04 	addi	sp,sp,-12
   16998:	dfc00215 	stw	ra,8(sp)
   1699c:	df000115 	stw	fp,4(sp)
   169a0:	df000104 	addi	fp,sp,4
   169a4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   169a8:	e13fff17 	ldw	r4,-4(fp)
   169ac:	01400304 	movi	r5,12
   169b0:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
}
   169b4:	e037883a 	mov	sp,fp
   169b8:	dfc00117 	ldw	ra,4(sp)
   169bc:	df000017 	ldw	fp,0(sp)
   169c0:	dec00204 	addi	sp,sp,8
   169c4:	f800283a 	ret

000169c8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   169c8:	defffd04 	addi	sp,sp,-12
   169cc:	dfc00215 	stw	ra,8(sp)
   169d0:	df000115 	stw	fp,4(sp)
   169d4:	df000104 	addi	fp,sp,4
   169d8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   169dc:	e13fff17 	ldw	r4,-4(fp)
   169e0:	014003c4 	movi	r5,15
   169e4:	00165980 	call	16598 <alt_up_character_lcd_send_cmd>
}
   169e8:	e037883a 	mov	sp,fp
   169ec:	dfc00117 	ldw	ra,4(sp)
   169f0:	df000017 	ldw	fp,0(sp)
   169f4:	dec00204 	addi	sp,sp,8
   169f8:	f800283a 	ret

000169fc <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   169fc:	defffd04 	addi	sp,sp,-12
   16a00:	df000215 	stw	fp,8(sp)
   16a04:	df000204 	addi	fp,sp,8
   16a08:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16a0c:	e0bfff17 	ldw	r2,-4(fp)
   16a10:	10800a17 	ldw	r2,40(r2)
   16a14:	10800104 	addi	r2,r2,4
   16a18:	10800037 	ldwio	r2,0(r2)
   16a1c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   16a20:	e0bffe17 	ldw	r2,-8(fp)
   16a24:	10800054 	ori	r2,r2,1
   16a28:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16a2c:	e0bfff17 	ldw	r2,-4(fp)
   16a30:	10800a17 	ldw	r2,40(r2)
   16a34:	10800104 	addi	r2,r2,4
   16a38:	1007883a 	mov	r3,r2
   16a3c:	e0bffe17 	ldw	r2,-8(fp)
   16a40:	18800035 	stwio	r2,0(r3)
}
   16a44:	e037883a 	mov	sp,fp
   16a48:	df000017 	ldw	fp,0(sp)
   16a4c:	dec00104 	addi	sp,sp,4
   16a50:	f800283a 	ret

00016a54 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   16a54:	defffd04 	addi	sp,sp,-12
   16a58:	df000215 	stw	fp,8(sp)
   16a5c:	df000204 	addi	fp,sp,8
   16a60:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16a64:	e0bfff17 	ldw	r2,-4(fp)
   16a68:	10800a17 	ldw	r2,40(r2)
   16a6c:	10800104 	addi	r2,r2,4
   16a70:	10800037 	ldwio	r2,0(r2)
   16a74:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   16a78:	e0fffe17 	ldw	r3,-8(fp)
   16a7c:	00bfff84 	movi	r2,-2
   16a80:	1884703a 	and	r2,r3,r2
   16a84:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16a88:	e0bfff17 	ldw	r2,-4(fp)
   16a8c:	10800a17 	ldw	r2,40(r2)
   16a90:	10800104 	addi	r2,r2,4
   16a94:	1007883a 	mov	r3,r2
   16a98:	e0bffe17 	ldw	r2,-8(fp)
   16a9c:	18800035 	stwio	r2,0(r3)
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	df000017 	ldw	fp,0(sp)
   16aa8:	dec00104 	addi	sp,sp,4
   16aac:	f800283a 	ret

00016ab0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   16ab0:	defffd04 	addi	sp,sp,-12
   16ab4:	df000215 	stw	fp,8(sp)
   16ab8:	df000204 	addi	fp,sp,8
   16abc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   16ac0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   16ac4:	e0bfff17 	ldw	r2,-4(fp)
   16ac8:	10800a17 	ldw	r2,40(r2)
   16acc:	10800084 	addi	r2,r2,2
   16ad0:	1080002b 	ldhuio	r2,0(r2)
   16ad4:	10bfffcc 	andi	r2,r2,65535
   16ad8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   16adc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   16ae0:	e037883a 	mov	sp,fp
   16ae4:	df000017 	ldw	fp,0(sp)
   16ae8:	dec00104 	addi	sp,sp,4
   16aec:	f800283a 	ret

00016af0 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   16af0:	defffd04 	addi	sp,sp,-12
   16af4:	df000215 	stw	fp,8(sp)
   16af8:	df000204 	addi	fp,sp,8
   16afc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16b00:	e0bfff17 	ldw	r2,-4(fp)
   16b04:	10800a17 	ldw	r2,40(r2)
   16b08:	10800104 	addi	r2,r2,4
   16b0c:	10800037 	ldwio	r2,0(r2)
   16b10:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   16b14:	e0bffe17 	ldw	r2,-8(fp)
   16b18:	1004d43a 	srli	r2,r2,16
}
   16b1c:	e037883a 	mov	sp,fp
   16b20:	df000017 	ldw	fp,0(sp)
   16b24:	dec00104 	addi	sp,sp,4
   16b28:	f800283a 	ret

00016b2c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   16b2c:	defffd04 	addi	sp,sp,-12
   16b30:	df000215 	stw	fp,8(sp)
   16b34:	df000204 	addi	fp,sp,8
   16b38:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   16b3c:	e0bfff17 	ldw	r2,-4(fp)
   16b40:	1080800c 	andi	r2,r2,512
   16b44:	1004d27a 	srli	r2,r2,9
   16b48:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   16b4c:	e0bffe17 	ldw	r2,-8(fp)
   16b50:	10000226 	beq	r2,zero,16b5c <alt_up_irda_check_parity+0x30>
   16b54:	00bfffc4 	movi	r2,-1
   16b58:	00000106 	br	16b60 <alt_up_irda_check_parity+0x34>
   16b5c:	0005883a 	mov	r2,zero
}
   16b60:	e037883a 	mov	sp,fp
   16b64:	df000017 	ldw	fp,0(sp)
   16b68:	dec00104 	addi	sp,sp,4
   16b6c:	f800283a 	ret

00016b70 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   16b70:	defffd04 	addi	sp,sp,-12
   16b74:	df000215 	stw	fp,8(sp)
   16b78:	df000204 	addi	fp,sp,8
   16b7c:	e13ffe15 	stw	r4,-8(fp)
   16b80:	2805883a 	mov	r2,r5
   16b84:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   16b88:	e0bffe17 	ldw	r2,-8(fp)
   16b8c:	10800a17 	ldw	r2,40(r2)
   16b90:	1007883a 	mov	r3,r2
   16b94:	e0bfff03 	ldbu	r2,-4(fp)
   16b98:	18800035 	stwio	r2,0(r3)
	return 0;
   16b9c:	0005883a 	mov	r2,zero
}
   16ba0:	e037883a 	mov	sp,fp
   16ba4:	df000017 	ldw	fp,0(sp)
   16ba8:	dec00104 	addi	sp,sp,4
   16bac:	f800283a 	ret

00016bb0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   16bb0:	defffa04 	addi	sp,sp,-24
   16bb4:	dfc00515 	stw	ra,20(sp)
   16bb8:	df000415 	stw	fp,16(sp)
   16bbc:	df000404 	addi	fp,sp,16
   16bc0:	e13ffd15 	stw	r4,-12(fp)
   16bc4:	e17ffe15 	stw	r5,-8(fp)
   16bc8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   16bcc:	e0bffd17 	ldw	r2,-12(fp)
   16bd0:	10800a17 	ldw	r2,40(r2)
   16bd4:	10800037 	ldwio	r2,0(r2)
   16bd8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   16bdc:	e0bffc17 	ldw	r2,-16(fp)
   16be0:	1007883a 	mov	r3,r2
   16be4:	e0bffe17 	ldw	r2,-8(fp)
   16be8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   16bec:	e13ffc17 	ldw	r4,-16(fp)
   16bf0:	0016b2c0 	call	16b2c <alt_up_irda_check_parity>
   16bf4:	1007883a 	mov	r3,r2
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   16c00:	e0bffc17 	ldw	r2,-16(fp)
   16c04:	10a0000c 	andi	r2,r2,32768
   16c08:	1004d3fa 	srli	r2,r2,15
   16c0c:	10bfffc4 	addi	r2,r2,-1
}
   16c10:	e037883a 	mov	sp,fp
   16c14:	dfc00117 	ldw	ra,4(sp)
   16c18:	df000017 	ldw	fp,0(sp)
   16c1c:	dec00204 	addi	sp,sp,8
   16c20:	f800283a 	ret

00016c24 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   16c24:	defff804 	addi	sp,sp,-32
   16c28:	dfc00715 	stw	ra,28(sp)
   16c2c:	df000615 	stw	fp,24(sp)
   16c30:	df000604 	addi	fp,sp,24
   16c34:	e13ffd15 	stw	r4,-12(fp)
   16c38:	e17ffe15 	stw	r5,-8(fp)
   16c3c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   16c40:	e0bffd17 	ldw	r2,-12(fp)
   16c44:	10800017 	ldw	r2,0(r2)
   16c48:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   16c4c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   16c50:	00000e06 	br	16c8c <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   16c54:	e0bffe17 	ldw	r2,-8(fp)
   16c58:	10c00044 	addi	r3,r2,1
   16c5c:	e0fffe15 	stw	r3,-8(fp)
   16c60:	e0fffc04 	addi	r3,fp,-16
   16c64:	e13ffb17 	ldw	r4,-20(fp)
   16c68:	100b883a 	mov	r5,r2
   16c6c:	180d883a 	mov	r6,r3
   16c70:	0016bb00 	call	16bb0 <alt_up_irda_read_data>
   16c74:	1000041e 	bne	r2,zero,16c88 <alt_up_irda_read_fd+0x64>
			count++;
   16c78:	e0bffa17 	ldw	r2,-24(fp)
   16c7c:	10800044 	addi	r2,r2,1
   16c80:	e0bffa15 	stw	r2,-24(fp)
   16c84:	00000106 	br	16c8c <alt_up_irda_read_fd+0x68>
		else
			break;
   16c88:	00000406 	br	16c9c <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   16c8c:	e0bfff17 	ldw	r2,-4(fp)
   16c90:	10ffffc4 	addi	r3,r2,-1
   16c94:	e0ffff15 	stw	r3,-4(fp)
   16c98:	103fee1e 	bne	r2,zero,16c54 <__alt_mem_Flash_flash_data+0xf4016c54>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   16c9c:	e0bffa17 	ldw	r2,-24(fp)
}
   16ca0:	e037883a 	mov	sp,fp
   16ca4:	dfc00117 	ldw	ra,4(sp)
   16ca8:	df000017 	ldw	fp,0(sp)
   16cac:	dec00204 	addi	sp,sp,8
   16cb0:	f800283a 	ret

00016cb4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   16cb4:	defff904 	addi	sp,sp,-28
   16cb8:	dfc00615 	stw	ra,24(sp)
   16cbc:	df000515 	stw	fp,20(sp)
   16cc0:	df000504 	addi	fp,sp,20
   16cc4:	e13ffd15 	stw	r4,-12(fp)
   16cc8:	e17ffe15 	stw	r5,-8(fp)
   16ccc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   16cd0:	e0bffd17 	ldw	r2,-12(fp)
   16cd4:	10800017 	ldw	r2,0(r2)
   16cd8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   16cdc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   16ce0:	00000e06 	br	16d1c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   16ce4:	e0bffe17 	ldw	r2,-8(fp)
   16ce8:	10c00044 	addi	r3,r2,1
   16cec:	e0fffe15 	stw	r3,-8(fp)
   16cf0:	10800003 	ldbu	r2,0(r2)
   16cf4:	10803fcc 	andi	r2,r2,255
   16cf8:	e13ffc17 	ldw	r4,-16(fp)
   16cfc:	100b883a 	mov	r5,r2
   16d00:	0016b700 	call	16b70 <alt_up_irda_write_data>
   16d04:	1000041e 	bne	r2,zero,16d18 <alt_up_irda_write_fd+0x64>
			count++;
   16d08:	e0bffb17 	ldw	r2,-20(fp)
   16d0c:	10800044 	addi	r2,r2,1
   16d10:	e0bffb15 	stw	r2,-20(fp)
   16d14:	00000106 	br	16d1c <alt_up_irda_write_fd+0x68>
		else
			break;
   16d18:	00000406 	br	16d2c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   16d1c:	e0bfff17 	ldw	r2,-4(fp)
   16d20:	10ffffc4 	addi	r3,r2,-1
   16d24:	e0ffff15 	stw	r3,-4(fp)
   16d28:	103fee1e 	bne	r2,zero,16ce4 <__alt_mem_Flash_flash_data+0xf4016ce4>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   16d2c:	e0bffb17 	ldw	r2,-20(fp)
}
   16d30:	e037883a 	mov	sp,fp
   16d34:	dfc00117 	ldw	ra,4(sp)
   16d38:	df000017 	ldw	fp,0(sp)
   16d3c:	dec00204 	addi	sp,sp,8
   16d40:	f800283a 	ret

00016d44 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   16d44:	defffc04 	addi	sp,sp,-16
   16d48:	dfc00315 	stw	ra,12(sp)
   16d4c:	df000215 	stw	fp,8(sp)
   16d50:	df000204 	addi	fp,sp,8
   16d54:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   16d58:	e13fff17 	ldw	r4,-4(fp)
   16d5c:	014000b4 	movhi	r5,2
   16d60:	296fdc04 	addi	r5,r5,-16528
   16d64:	00183900 	call	18390 <alt_find_dev>
   16d68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16d6c:	e0bffe17 	ldw	r2,-8(fp)
}
   16d70:	e037883a 	mov	sp,fp
   16d74:	dfc00117 	ldw	ra,4(sp)
   16d78:	df000017 	ldw	fp,0(sp)
   16d7c:	dec00204 	addi	sp,sp,8
   16d80:	f800283a 	ret

00016d84 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   16d84:	defffd04 	addi	sp,sp,-12
   16d88:	df000215 	stw	fp,8(sp)
   16d8c:	df000204 	addi	fp,sp,8
   16d90:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   16d94:	e0bfff17 	ldw	r2,-4(fp)
   16d98:	1080400c 	andi	r2,r2,256
   16d9c:	1004d23a 	srli	r2,r2,8
   16da0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   16da4:	e0bffe03 	ldbu	r2,-8(fp)
}
   16da8:	e037883a 	mov	sp,fp
   16dac:	df000017 	ldw	fp,0(sp)
   16db0:	dec00104 	addi	sp,sp,4
   16db4:	f800283a 	ret

00016db8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   16db8:	defffd04 	addi	sp,sp,-12
   16dbc:	df000215 	stw	fp,8(sp)
   16dc0:	df000204 	addi	fp,sp,8
   16dc4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   16dc8:	e0bfff17 	ldw	r2,-4(fp)
   16dcc:	1080004c 	andi	r2,r2,1
   16dd0:	e0bffe05 	stb	r2,-8(fp)
	return re;
   16dd4:	e0bffe03 	ldbu	r2,-8(fp)
}
   16dd8:	e037883a 	mov	sp,fp
   16ddc:	df000017 	ldw	fp,0(sp)
   16de0:	dec00104 	addi	sp,sp,4
   16de4:	f800283a 	ret

00016de8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   16de8:	defffd04 	addi	sp,sp,-12
   16dec:	df000215 	stw	fp,8(sp)
   16df0:	df000204 	addi	fp,sp,8
   16df4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   16df8:	e0bfff17 	ldw	r2,-4(fp)
   16dfc:	1081000c 	andi	r2,r2,1024
   16e00:	1004d2ba 	srli	r2,r2,10
   16e04:	e0bffe05 	stb	r2,-8(fp)
	return re;
   16e08:	e0bffe03 	ldbu	r2,-8(fp)
}
   16e0c:	e037883a 	mov	sp,fp
   16e10:	df000017 	ldw	fp,0(sp)
   16e14:	dec00104 	addi	sp,sp,4
   16e18:	f800283a 	ret

00016e1c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   16e1c:	defffd04 	addi	sp,sp,-12
   16e20:	df000215 	stw	fp,8(sp)
   16e24:	df000204 	addi	fp,sp,8
   16e28:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   16e2c:	e0bfff17 	ldw	r2,-4(fp)
   16e30:	1004d43a 	srli	r2,r2,16
   16e34:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   16e38:	e0bffe0b 	ldhu	r2,-8(fp)
}
   16e3c:	e037883a 	mov	sp,fp
   16e40:	df000017 	ldw	fp,0(sp)
   16e44:	dec00104 	addi	sp,sp,4
   16e48:	f800283a 	ret

00016e4c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   16e4c:	defffd04 	addi	sp,sp,-12
   16e50:	df000215 	stw	fp,8(sp)
   16e54:	df000204 	addi	fp,sp,8
   16e58:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   16e5c:	e0bfff17 	ldw	r2,-4(fp)
   16e60:	10a0000c 	andi	r2,r2,32768
   16e64:	1004d3fa 	srli	r2,r2,15
   16e68:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   16e6c:	e0bffe03 	ldbu	r2,-8(fp)
}
   16e70:	e037883a 	mov	sp,fp
   16e74:	df000017 	ldw	fp,0(sp)
   16e78:	dec00104 	addi	sp,sp,4
   16e7c:	f800283a 	ret

00016e80 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   16e80:	defffd04 	addi	sp,sp,-12
   16e84:	df000215 	stw	fp,8(sp)
   16e88:	df000204 	addi	fp,sp,8
   16e8c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   16e90:	e0bfff17 	ldw	r2,-4(fp)
   16e94:	e0bffe05 	stb	r2,-8(fp)
	return data;
   16e98:	e0bffe03 	ldbu	r2,-8(fp)
}
   16e9c:	e037883a 	mov	sp,fp
   16ea0:	df000017 	ldw	fp,0(sp)
   16ea4:	dec00104 	addi	sp,sp,4
   16ea8:	f800283a 	ret

00016eac <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   16eac:	defffb04 	addi	sp,sp,-20
   16eb0:	dfc00415 	stw	ra,16(sp)
   16eb4:	df000315 	stw	fp,12(sp)
   16eb8:	df000304 	addi	fp,sp,12
   16ebc:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   16ec0:	e13fff17 	ldw	r4,-4(fp)
   16ec4:	01403fc4 	movi	r5,255
   16ec8:	00171080 	call	17108 <alt_up_ps2_write_data_byte_with_ack>
   16ecc:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   16ed0:	e0bffd17 	ldw	r2,-12(fp)
   16ed4:	1000211e 	bne	r2,zero,16f5c <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   16ed8:	e0bffe04 	addi	r2,fp,-8
   16edc:	e13fff17 	ldw	r4,-4(fp)
   16ee0:	100b883a 	mov	r5,r2
   16ee4:	001716c0 	call	1716c <alt_up_ps2_read_data_byte_timeout>
   16ee8:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   16eec:	e0bffd17 	ldw	r2,-12(fp)
   16ef0:	10001a1e 	bne	r2,zero,16f5c <alt_up_ps2_init+0xb0>
   16ef4:	e0bffe03 	ldbu	r2,-8(fp)
   16ef8:	10803fcc 	andi	r2,r2,255
   16efc:	10802a98 	cmpnei	r2,r2,170
   16f00:	1000161e 	bne	r2,zero,16f5c <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   16f04:	e0bffe04 	addi	r2,fp,-8
   16f08:	e13fff17 	ldw	r4,-4(fp)
   16f0c:	100b883a 	mov	r5,r2
   16f10:	001716c0 	call	1716c <alt_up_ps2_read_data_byte_timeout>
   16f14:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   16f18:	e0bffd17 	ldw	r2,-12(fp)
   16f1c:	10bfe318 	cmpnei	r2,r2,-116
   16f20:	1000041e 	bne	r2,zero,16f34 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   16f24:	e0bfff17 	ldw	r2,-4(fp)
   16f28:	00c00044 	movi	r3,1
   16f2c:	10c00d15 	stw	r3,52(r2)
   16f30:	00000a06 	br	16f5c <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   16f34:	e0bffd17 	ldw	r2,-12(fp)
   16f38:	1000081e 	bne	r2,zero,16f5c <alt_up_ps2_init+0xb0>
   16f3c:	e0bffe03 	ldbu	r2,-8(fp)
   16f40:	10803fcc 	andi	r2,r2,255
   16f44:	1000051e 	bne	r2,zero,16f5c <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   16f48:	e0bfff17 	ldw	r2,-4(fp)
   16f4c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   16f50:	e13fff17 	ldw	r4,-4(fp)
   16f54:	01403d04 	movi	r5,244
   16f58:	00170240 	call	17024 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   16f5c:	e037883a 	mov	sp,fp
   16f60:	dfc00117 	ldw	ra,4(sp)
   16f64:	df000017 	ldw	fp,0(sp)
   16f68:	dec00204 	addi	sp,sp,8
   16f6c:	f800283a 	ret

00016f70 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   16f70:	defffd04 	addi	sp,sp,-12
   16f74:	df000215 	stw	fp,8(sp)
   16f78:	df000204 	addi	fp,sp,8
   16f7c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   16f80:	e0bfff17 	ldw	r2,-4(fp)
   16f84:	10800a17 	ldw	r2,40(r2)
   16f88:	10800104 	addi	r2,r2,4
   16f8c:	10800037 	ldwio	r2,0(r2)
   16f90:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   16f94:	e0bffe17 	ldw	r2,-8(fp)
   16f98:	10800054 	ori	r2,r2,1
   16f9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   16fa0:	e0bfff17 	ldw	r2,-4(fp)
   16fa4:	10800a17 	ldw	r2,40(r2)
   16fa8:	10800104 	addi	r2,r2,4
   16fac:	1007883a 	mov	r3,r2
   16fb0:	e0bffe17 	ldw	r2,-8(fp)
   16fb4:	18800035 	stwio	r2,0(r3)
}
   16fb8:	e037883a 	mov	sp,fp
   16fbc:	df000017 	ldw	fp,0(sp)
   16fc0:	dec00104 	addi	sp,sp,4
   16fc4:	f800283a 	ret

00016fc8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   16fc8:	defffd04 	addi	sp,sp,-12
   16fcc:	df000215 	stw	fp,8(sp)
   16fd0:	df000204 	addi	fp,sp,8
   16fd4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   16fd8:	e0bfff17 	ldw	r2,-4(fp)
   16fdc:	10800a17 	ldw	r2,40(r2)
   16fe0:	10800104 	addi	r2,r2,4
   16fe4:	10800037 	ldwio	r2,0(r2)
   16fe8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   16fec:	e0fffe17 	ldw	r3,-8(fp)
   16ff0:	00bfff84 	movi	r2,-2
   16ff4:	1884703a 	and	r2,r3,r2
   16ff8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   16ffc:	e0bfff17 	ldw	r2,-4(fp)
   17000:	10800a17 	ldw	r2,40(r2)
   17004:	10800104 	addi	r2,r2,4
   17008:	1007883a 	mov	r3,r2
   1700c:	e0bffe17 	ldw	r2,-8(fp)
   17010:	18800035 	stwio	r2,0(r3)
}
   17014:	e037883a 	mov	sp,fp
   17018:	df000017 	ldw	fp,0(sp)
   1701c:	dec00104 	addi	sp,sp,4
   17020:	f800283a 	ret

00017024 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17024:	defffb04 	addi	sp,sp,-20
   17028:	dfc00415 	stw	ra,16(sp)
   1702c:	df000315 	stw	fp,12(sp)
   17030:	df000304 	addi	fp,sp,12
   17034:	e13ffe15 	stw	r4,-8(fp)
   17038:	2805883a 	mov	r2,r5
   1703c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   17040:	e0bffe17 	ldw	r2,-8(fp)
   17044:	10800a17 	ldw	r2,40(r2)
   17048:	1007883a 	mov	r3,r2
   1704c:	e0bfff03 	ldbu	r2,-4(fp)
   17050:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17054:	e0bffe17 	ldw	r2,-8(fp)
   17058:	10800a17 	ldw	r2,40(r2)
   1705c:	10800104 	addi	r2,r2,4
   17060:	10800037 	ldwio	r2,0(r2)
   17064:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17068:	e13ffd17 	ldw	r4,-12(fp)
   1706c:	0016de80 	call	16de8 <read_CE_bit>
   17070:	10803fcc 	andi	r2,r2,255
   17074:	10000226 	beq	r2,zero,17080 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17078:	00bffec4 	movi	r2,-5
   1707c:	00000106 	br	17084 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   17080:	0005883a 	mov	r2,zero
}
   17084:	e037883a 	mov	sp,fp
   17088:	dfc00117 	ldw	ra,4(sp)
   1708c:	df000017 	ldw	fp,0(sp)
   17090:	dec00204 	addi	sp,sp,8
   17094:	f800283a 	ret

00017098 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   17098:	defffc04 	addi	sp,sp,-16
   1709c:	dfc00315 	stw	ra,12(sp)
   170a0:	df000215 	stw	fp,8(sp)
   170a4:	df000204 	addi	fp,sp,8
   170a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   170ac:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   170b0:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   170b4:	e0bffe44 	addi	r2,fp,-7
   170b8:	e13fff17 	ldw	r4,-4(fp)
   170bc:	100b883a 	mov	r5,r2
   170c0:	001716c0 	call	1716c <alt_up_ps2_read_data_byte_timeout>
   170c4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   170c8:	e0bffe03 	ldbu	r2,-8(fp)
   170cc:	1000061e 	bne	r2,zero,170e8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   170d0:	e0bffe43 	ldbu	r2,-7(fp)
   170d4:	10803fcc 	andi	r2,r2,255
   170d8:	10803e98 	cmpnei	r2,r2,250
   170dc:	1000041e 	bne	r2,zero,170f0 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   170e0:	0005883a 	mov	r2,zero
   170e4:	00000306 	br	170f4 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   170e8:	e0bffe03 	ldbu	r2,-8(fp)
   170ec:	00000106 	br	170f4 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   170f0:	003ff006 	br	170b4 <__alt_mem_Flash_flash_data+0xf40170b4>
	return -ETIMEDOUT;
}
   170f4:	e037883a 	mov	sp,fp
   170f8:	dfc00117 	ldw	ra,4(sp)
   170fc:	df000017 	ldw	fp,0(sp)
   17100:	dec00204 	addi	sp,sp,8
   17104:	f800283a 	ret

00017108 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17108:	defffa04 	addi	sp,sp,-24
   1710c:	dfc00515 	stw	ra,20(sp)
   17110:	df000415 	stw	fp,16(sp)
   17114:	df000404 	addi	fp,sp,16
   17118:	e13ffe15 	stw	r4,-8(fp)
   1711c:	2805883a 	mov	r2,r5
   17120:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   17124:	e0bfff03 	ldbu	r2,-4(fp)
   17128:	e13ffe17 	ldw	r4,-8(fp)
   1712c:	100b883a 	mov	r5,r2
   17130:	00170240 	call	17024 <alt_up_ps2_write_data_byte>
   17134:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   17138:	e0bffc17 	ldw	r2,-16(fp)
   1713c:	10000226 	beq	r2,zero,17148 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   17140:	e0bffc17 	ldw	r2,-16(fp)
   17144:	00000406 	br	17158 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   17148:	e13ffe17 	ldw	r4,-8(fp)
   1714c:	00170980 	call	17098 <alt_up_ps2_wait_for_ack>
   17150:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17154:	e0bffd17 	ldw	r2,-12(fp)
}
   17158:	e037883a 	mov	sp,fp
   1715c:	dfc00117 	ldw	ra,4(sp)
   17160:	df000017 	ldw	fp,0(sp)
   17164:	dec00204 	addi	sp,sp,8
   17168:	f800283a 	ret

0001716c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1716c:	defffa04 	addi	sp,sp,-24
   17170:	dfc00515 	stw	ra,20(sp)
   17174:	df000415 	stw	fp,16(sp)
   17178:	df000404 	addi	fp,sp,16
   1717c:	e13ffe15 	stw	r4,-8(fp)
   17180:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17184:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17188:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1718c:	e0bffc17 	ldw	r2,-16(fp)
   17190:	10800044 	addi	r2,r2,1
   17194:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17198:	e0bffe17 	ldw	r2,-8(fp)
   1719c:	10800a17 	ldw	r2,40(r2)
   171a0:	10800037 	ldwio	r2,0(r2)
   171a4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   171a8:	e13ffd17 	ldw	r4,-12(fp)
   171ac:	0016e4c0 	call	16e4c <read_data_valid>
   171b0:	10803fcc 	andi	r2,r2,255
   171b4:	10000726 	beq	r2,zero,171d4 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   171b8:	e13ffd17 	ldw	r4,-12(fp)
   171bc:	0016e800 	call	16e80 <read_data_byte>
   171c0:	1007883a 	mov	r3,r2
   171c4:	e0bfff17 	ldw	r2,-4(fp)
   171c8:	10c00005 	stb	r3,0(r2)
			return 0;
   171cc:	0005883a 	mov	r2,zero
   171d0:	00000a06 	br	171fc <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   171d4:	e0bffe17 	ldw	r2,-8(fp)
   171d8:	10800c17 	ldw	r2,48(r2)
   171dc:	10000626 	beq	r2,zero,171f8 <alt_up_ps2_read_data_byte_timeout+0x8c>
   171e0:	e0bffe17 	ldw	r2,-8(fp)
   171e4:	10c00c17 	ldw	r3,48(r2)
   171e8:	e0bffc17 	ldw	r2,-16(fp)
   171ec:	1880022e 	bgeu	r3,r2,171f8 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   171f0:	00bfe304 	movi	r2,-116
   171f4:	00000106 	br	171fc <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   171f8:	003fe406 	br	1718c <__alt_mem_Flash_flash_data+0xf401718c>
}
   171fc:	e037883a 	mov	sp,fp
   17200:	dfc00117 	ldw	ra,4(sp)
   17204:	df000017 	ldw	fp,0(sp)
   17208:	dec00204 	addi	sp,sp,8
   1720c:	f800283a 	ret

00017210 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17210:	defffb04 	addi	sp,sp,-20
   17214:	dfc00415 	stw	ra,16(sp)
   17218:	df000315 	stw	fp,12(sp)
   1721c:	df000304 	addi	fp,sp,12
   17220:	e13ffe15 	stw	r4,-8(fp)
   17224:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17228:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1722c:	e0bffe17 	ldw	r2,-8(fp)
   17230:	10800a17 	ldw	r2,40(r2)
   17234:	10800037 	ldwio	r2,0(r2)
   17238:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1723c:	e13ffd17 	ldw	r4,-12(fp)
   17240:	0016e4c0 	call	16e4c <read_data_valid>
   17244:	10803fcc 	andi	r2,r2,255
   17248:	10000726 	beq	r2,zero,17268 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1724c:	e13ffd17 	ldw	r4,-12(fp)
   17250:	0016e800 	call	16e80 <read_data_byte>
   17254:	1007883a 	mov	r3,r2
   17258:	e0bfff17 	ldw	r2,-4(fp)
   1725c:	10c00005 	stb	r3,0(r2)
		return 0;
   17260:	0005883a 	mov	r2,zero
   17264:	00000106 	br	1726c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17268:	00bfffc4 	movi	r2,-1
}
   1726c:	e037883a 	mov	sp,fp
   17270:	dfc00117 	ldw	ra,4(sp)
   17274:	df000017 	ldw	fp,0(sp)
   17278:	dec00204 	addi	sp,sp,8
   1727c:	f800283a 	ret

00017280 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   17280:	defffb04 	addi	sp,sp,-20
   17284:	dfc00415 	stw	ra,16(sp)
   17288:	df000315 	stw	fp,12(sp)
   1728c:	df000304 	addi	fp,sp,12
   17290:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17294:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17298:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1729c:	e0bfff17 	ldw	r2,-4(fp)
   172a0:	10800a17 	ldw	r2,40(r2)
   172a4:	10800037 	ldwio	r2,0(r2)
   172a8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   172ac:	e13ffe17 	ldw	r4,-8(fp)
   172b0:	0016e1c0 	call	16e1c <read_num_bytes_available>
   172b4:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   172b8:	e0bffd0b 	ldhu	r2,-12(fp)
   172bc:	103ff71e 	bne	r2,zero,1729c <__alt_mem_Flash_flash_data+0xf401729c>
}
   172c0:	e037883a 	mov	sp,fp
   172c4:	dfc00117 	ldw	ra,4(sp)
   172c8:	df000017 	ldw	fp,0(sp)
   172cc:	dec00204 	addi	sp,sp,8
   172d0:	f800283a 	ret

000172d4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   172d4:	defff804 	addi	sp,sp,-32
   172d8:	dfc00715 	stw	ra,28(sp)
   172dc:	df000615 	stw	fp,24(sp)
   172e0:	df000604 	addi	fp,sp,24
   172e4:	e13ffd15 	stw	r4,-12(fp)
   172e8:	e17ffe15 	stw	r5,-8(fp)
   172ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   172f0:	e0bffd17 	ldw	r2,-12(fp)
   172f4:	10800017 	ldw	r2,0(r2)
   172f8:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   172fc:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17300:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   17304:	e0fffc17 	ldw	r3,-16(fp)
   17308:	e0bfff17 	ldw	r2,-4(fp)
   1730c:	18bffd16 	blt	r3,r2,17304 <__alt_mem_Flash_flash_data+0xf4017304>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17310:	e0bffe17 	ldw	r2,-8(fp)
   17314:	10c00044 	addi	r3,r2,1
   17318:	e0fffe15 	stw	r3,-8(fp)
   1731c:	e13ffa17 	ldw	r4,-24(fp)
   17320:	100b883a 	mov	r5,r2
   17324:	001716c0 	call	1716c <alt_up_ps2_read_data_byte_timeout>
   17328:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1732c:	e0bffb17 	ldw	r2,-20(fp)
   17330:	10000226 	beq	r2,zero,1733c <alt_up_ps2_read_fd+0x68>
			return count;
   17334:	e0bffc17 	ldw	r2,-16(fp)
   17338:	00000406 	br	1734c <alt_up_ps2_read_fd+0x78>
		count++;
   1733c:	e0bffc17 	ldw	r2,-16(fp)
   17340:	10800044 	addi	r2,r2,1
   17344:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17348:	e0bffc17 	ldw	r2,-16(fp)
}
   1734c:	e037883a 	mov	sp,fp
   17350:	dfc00117 	ldw	ra,4(sp)
   17354:	df000017 	ldw	fp,0(sp)
   17358:	dec00204 	addi	sp,sp,8
   1735c:	f800283a 	ret

00017360 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17360:	defff804 	addi	sp,sp,-32
   17364:	dfc00715 	stw	ra,28(sp)
   17368:	df000615 	stw	fp,24(sp)
   1736c:	df000604 	addi	fp,sp,24
   17370:	e13ffd15 	stw	r4,-12(fp)
   17374:	e17ffe15 	stw	r5,-8(fp)
   17378:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1737c:	e0bffd17 	ldw	r2,-12(fp)
   17380:	10800017 	ldw	r2,0(r2)
   17384:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17388:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1738c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   17390:	00001006 	br	173d4 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17394:	e0bffe17 	ldw	r2,-8(fp)
   17398:	10c00044 	addi	r3,r2,1
   1739c:	e0fffe15 	stw	r3,-8(fp)
   173a0:	10800003 	ldbu	r2,0(r2)
   173a4:	10803fcc 	andi	r2,r2,255
   173a8:	e13ffb17 	ldw	r4,-20(fp)
   173ac:	100b883a 	mov	r5,r2
   173b0:	00170240 	call	17024 <alt_up_ps2_write_data_byte>
   173b4:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   173b8:	e0bffc17 	ldw	r2,-16(fp)
   173bc:	10000226 	beq	r2,zero,173c8 <alt_up_ps2_write_fd+0x68>
			return count;
   173c0:	e0bffa17 	ldw	r2,-24(fp)
   173c4:	00000706 	br	173e4 <alt_up_ps2_write_fd+0x84>
		count++;
   173c8:	e0bffa17 	ldw	r2,-24(fp)
   173cc:	10800044 	addi	r2,r2,1
   173d0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   173d4:	e0fffa17 	ldw	r3,-24(fp)
   173d8:	e0bfff17 	ldw	r2,-4(fp)
   173dc:	18bfed16 	blt	r3,r2,17394 <__alt_mem_Flash_flash_data+0xf4017394>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   173e0:	e0bffa17 	ldw	r2,-24(fp)
}
   173e4:	e037883a 	mov	sp,fp
   173e8:	dfc00117 	ldw	ra,4(sp)
   173ec:	df000017 	ldw	fp,0(sp)
   173f0:	dec00204 	addi	sp,sp,8
   173f4:	f800283a 	ret

000173f8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   173f8:	defffc04 	addi	sp,sp,-16
   173fc:	dfc00315 	stw	ra,12(sp)
   17400:	df000215 	stw	fp,8(sp)
   17404:	df000204 	addi	fp,sp,8
   17408:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1740c:	e13fff17 	ldw	r4,-4(fp)
   17410:	014000b4 	movhi	r5,2
   17414:	296fdc04 	addi	r5,r5,-16528
   17418:	00183900 	call	18390 <alt_find_dev>
   1741c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17420:	e0bffe17 	ldw	r2,-8(fp)
}
   17424:	e037883a 	mov	sp,fp
   17428:	dfc00117 	ldw	ra,4(sp)
   1742c:	df000017 	ldw	fp,0(sp)
   17430:	dec00204 	addi	sp,sp,8
   17434:	f800283a 	ret

00017438 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17438:	defffd04 	addi	sp,sp,-12
   1743c:	df000215 	stw	fp,8(sp)
   17440:	df000204 	addi	fp,sp,8
   17444:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17448:	e0bfff17 	ldw	r2,-4(fp)
   1744c:	10800a17 	ldw	r2,40(r2)
   17450:	10800104 	addi	r2,r2,4
   17454:	10800037 	ldwio	r2,0(r2)
   17458:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1745c:	e0bffe17 	ldw	r2,-8(fp)
   17460:	10800054 	ori	r2,r2,1
   17464:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17468:	e0bfff17 	ldw	r2,-4(fp)
   1746c:	10800a17 	ldw	r2,40(r2)
   17470:	10800104 	addi	r2,r2,4
   17474:	1007883a 	mov	r3,r2
   17478:	e0bffe17 	ldw	r2,-8(fp)
   1747c:	18800035 	stwio	r2,0(r3)
}
   17480:	e037883a 	mov	sp,fp
   17484:	df000017 	ldw	fp,0(sp)
   17488:	dec00104 	addi	sp,sp,4
   1748c:	f800283a 	ret

00017490 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17490:	defffd04 	addi	sp,sp,-12
   17494:	df000215 	stw	fp,8(sp)
   17498:	df000204 	addi	fp,sp,8
   1749c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   174a0:	e0bfff17 	ldw	r2,-4(fp)
   174a4:	10800a17 	ldw	r2,40(r2)
   174a8:	10800104 	addi	r2,r2,4
   174ac:	10800037 	ldwio	r2,0(r2)
   174b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   174b4:	e0fffe17 	ldw	r3,-8(fp)
   174b8:	00bfff84 	movi	r2,-2
   174bc:	1884703a 	and	r2,r3,r2
   174c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   174c4:	e0bfff17 	ldw	r2,-4(fp)
   174c8:	10800a17 	ldw	r2,40(r2)
   174cc:	10800104 	addi	r2,r2,4
   174d0:	1007883a 	mov	r3,r2
   174d4:	e0bffe17 	ldw	r2,-8(fp)
   174d8:	18800035 	stwio	r2,0(r3)
}
   174dc:	e037883a 	mov	sp,fp
   174e0:	df000017 	ldw	fp,0(sp)
   174e4:	dec00104 	addi	sp,sp,4
   174e8:	f800283a 	ret

000174ec <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   174ec:	defffd04 	addi	sp,sp,-12
   174f0:	df000215 	stw	fp,8(sp)
   174f4:	df000204 	addi	fp,sp,8
   174f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   174fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   17500:	e0bfff17 	ldw	r2,-4(fp)
   17504:	10800a17 	ldw	r2,40(r2)
   17508:	10800084 	addi	r2,r2,2
   1750c:	1080002b 	ldhuio	r2,0(r2)
   17510:	10bfffcc 	andi	r2,r2,65535
   17514:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   17518:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1751c:	e037883a 	mov	sp,fp
   17520:	df000017 	ldw	fp,0(sp)
   17524:	dec00104 	addi	sp,sp,4
   17528:	f800283a 	ret

0001752c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1752c:	defffd04 	addi	sp,sp,-12
   17530:	df000215 	stw	fp,8(sp)
   17534:	df000204 	addi	fp,sp,8
   17538:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1753c:	e0bfff17 	ldw	r2,-4(fp)
   17540:	10800a17 	ldw	r2,40(r2)
   17544:	10800104 	addi	r2,r2,4
   17548:	10800037 	ldwio	r2,0(r2)
   1754c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   17550:	e0bffe17 	ldw	r2,-8(fp)
   17554:	1004d43a 	srli	r2,r2,16
}
   17558:	e037883a 	mov	sp,fp
   1755c:	df000017 	ldw	fp,0(sp)
   17560:	dec00104 	addi	sp,sp,4
   17564:	f800283a 	ret

00017568 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17568:	defffd04 	addi	sp,sp,-12
   1756c:	df000215 	stw	fp,8(sp)
   17570:	df000204 	addi	fp,sp,8
   17574:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	1080800c 	andi	r2,r2,512
   17580:	1004d27a 	srli	r2,r2,9
   17584:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17588:	e0bffe17 	ldw	r2,-8(fp)
   1758c:	10000226 	beq	r2,zero,17598 <alt_up_rs232_check_parity+0x30>
   17590:	00bfffc4 	movi	r2,-1
   17594:	00000106 	br	1759c <alt_up_rs232_check_parity+0x34>
   17598:	0005883a 	mov	r2,zero
}
   1759c:	e037883a 	mov	sp,fp
   175a0:	df000017 	ldw	fp,0(sp)
   175a4:	dec00104 	addi	sp,sp,4
   175a8:	f800283a 	ret

000175ac <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   175ac:	defffd04 	addi	sp,sp,-12
   175b0:	df000215 	stw	fp,8(sp)
   175b4:	df000204 	addi	fp,sp,8
   175b8:	e13ffe15 	stw	r4,-8(fp)
   175bc:	2805883a 	mov	r2,r5
   175c0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   175c4:	e0bffe17 	ldw	r2,-8(fp)
   175c8:	10800a17 	ldw	r2,40(r2)
   175cc:	1007883a 	mov	r3,r2
   175d0:	e0bfff03 	ldbu	r2,-4(fp)
   175d4:	18800035 	stwio	r2,0(r3)
	return 0;
   175d8:	0005883a 	mov	r2,zero
}
   175dc:	e037883a 	mov	sp,fp
   175e0:	df000017 	ldw	fp,0(sp)
   175e4:	dec00104 	addi	sp,sp,4
   175e8:	f800283a 	ret

000175ec <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   175ec:	defffa04 	addi	sp,sp,-24
   175f0:	dfc00515 	stw	ra,20(sp)
   175f4:	df000415 	stw	fp,16(sp)
   175f8:	df000404 	addi	fp,sp,16
   175fc:	e13ffd15 	stw	r4,-12(fp)
   17600:	e17ffe15 	stw	r5,-8(fp)
   17604:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17608:	e0bffd17 	ldw	r2,-12(fp)
   1760c:	10800a17 	ldw	r2,40(r2)
   17610:	10800037 	ldwio	r2,0(r2)
   17614:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17618:	e0bffc17 	ldw	r2,-16(fp)
   1761c:	1007883a 	mov	r3,r2
   17620:	e0bffe17 	ldw	r2,-8(fp)
   17624:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17628:	e13ffc17 	ldw	r4,-16(fp)
   1762c:	00175680 	call	17568 <alt_up_rs232_check_parity>
   17630:	1007883a 	mov	r3,r2
   17634:	e0bfff17 	ldw	r2,-4(fp)
   17638:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1763c:	e0bffc17 	ldw	r2,-16(fp)
   17640:	10a0000c 	andi	r2,r2,32768
   17644:	1004d3fa 	srli	r2,r2,15
   17648:	10bfffc4 	addi	r2,r2,-1
}
   1764c:	e037883a 	mov	sp,fp
   17650:	dfc00117 	ldw	ra,4(sp)
   17654:	df000017 	ldw	fp,0(sp)
   17658:	dec00204 	addi	sp,sp,8
   1765c:	f800283a 	ret

00017660 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17660:	defff804 	addi	sp,sp,-32
   17664:	dfc00715 	stw	ra,28(sp)
   17668:	df000615 	stw	fp,24(sp)
   1766c:	df000604 	addi	fp,sp,24
   17670:	e13ffd15 	stw	r4,-12(fp)
   17674:	e17ffe15 	stw	r5,-8(fp)
   17678:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1767c:	e0bffd17 	ldw	r2,-12(fp)
   17680:	10800017 	ldw	r2,0(r2)
   17684:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17688:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1768c:	00000e06 	br	176c8 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   17690:	e0bffe17 	ldw	r2,-8(fp)
   17694:	10c00044 	addi	r3,r2,1
   17698:	e0fffe15 	stw	r3,-8(fp)
   1769c:	e0fffc04 	addi	r3,fp,-16
   176a0:	e13ffb17 	ldw	r4,-20(fp)
   176a4:	100b883a 	mov	r5,r2
   176a8:	180d883a 	mov	r6,r3
   176ac:	00175ec0 	call	175ec <alt_up_rs232_read_data>
   176b0:	1000041e 	bne	r2,zero,176c4 <alt_up_rs232_read_fd+0x64>
			count++;
   176b4:	e0bffa17 	ldw	r2,-24(fp)
   176b8:	10800044 	addi	r2,r2,1
   176bc:	e0bffa15 	stw	r2,-24(fp)
   176c0:	00000106 	br	176c8 <alt_up_rs232_read_fd+0x68>
		else
			break;
   176c4:	00000406 	br	176d8 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   176c8:	e0bfff17 	ldw	r2,-4(fp)
   176cc:	10ffffc4 	addi	r3,r2,-1
   176d0:	e0ffff15 	stw	r3,-4(fp)
   176d4:	103fee1e 	bne	r2,zero,17690 <__alt_mem_Flash_flash_data+0xf4017690>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   176d8:	e0bffa17 	ldw	r2,-24(fp)
}
   176dc:	e037883a 	mov	sp,fp
   176e0:	dfc00117 	ldw	ra,4(sp)
   176e4:	df000017 	ldw	fp,0(sp)
   176e8:	dec00204 	addi	sp,sp,8
   176ec:	f800283a 	ret

000176f0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   176f0:	defff904 	addi	sp,sp,-28
   176f4:	dfc00615 	stw	ra,24(sp)
   176f8:	df000515 	stw	fp,20(sp)
   176fc:	df000504 	addi	fp,sp,20
   17700:	e13ffd15 	stw	r4,-12(fp)
   17704:	e17ffe15 	stw	r5,-8(fp)
   17708:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1770c:	e0bffd17 	ldw	r2,-12(fp)
   17710:	10800017 	ldw	r2,0(r2)
   17714:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17718:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1771c:	00000f06 	br	1775c <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   17720:	e0bffe17 	ldw	r2,-8(fp)
   17724:	10800003 	ldbu	r2,0(r2)
   17728:	10803fcc 	andi	r2,r2,255
   1772c:	e13ffc17 	ldw	r4,-16(fp)
   17730:	100b883a 	mov	r5,r2
   17734:	00175ac0 	call	175ac <alt_up_rs232_write_data>
   17738:	1000071e 	bne	r2,zero,17758 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1773c:	e0bffb17 	ldw	r2,-20(fp)
   17740:	10800044 	addi	r2,r2,1
   17744:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   17748:	e0bffe17 	ldw	r2,-8(fp)
   1774c:	10800044 	addi	r2,r2,1
   17750:	e0bffe15 	stw	r2,-8(fp)
   17754:	00000106 	br	1775c <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   17758:	00000406 	br	1776c <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1775c:	e0bfff17 	ldw	r2,-4(fp)
   17760:	10ffffc4 	addi	r3,r2,-1
   17764:	e0ffff15 	stw	r3,-4(fp)
   17768:	103fed1e 	bne	r2,zero,17720 <__alt_mem_Flash_flash_data+0xf4017720>
			ptr++;
		}
		else
			break;
	}
	return count;
   1776c:	e0bffb17 	ldw	r2,-20(fp)
}
   17770:	e037883a 	mov	sp,fp
   17774:	dfc00117 	ldw	ra,4(sp)
   17778:	df000017 	ldw	fp,0(sp)
   1777c:	dec00204 	addi	sp,sp,8
   17780:	f800283a 	ret

00017784 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   17784:	defffc04 	addi	sp,sp,-16
   17788:	dfc00315 	stw	ra,12(sp)
   1778c:	df000215 	stw	fp,8(sp)
   17790:	df000204 	addi	fp,sp,8
   17794:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   17798:	e13fff17 	ldw	r4,-4(fp)
   1779c:	014000b4 	movhi	r5,2
   177a0:	296fdc04 	addi	r5,r5,-16528
   177a4:	00183900 	call	18390 <alt_find_dev>
   177a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   177ac:	e0bffe17 	ldw	r2,-8(fp)
}
   177b0:	e037883a 	mov	sp,fp
   177b4:	dfc00117 	ldw	ra,4(sp)
   177b8:	df000017 	ldw	fp,0(sp)
   177bc:	dec00204 	addi	sp,sp,8
   177c0:	f800283a 	ret

000177c4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   177c4:	defffc04 	addi	sp,sp,-16
   177c8:	dfc00315 	stw	ra,12(sp)
   177cc:	df000215 	stw	fp,8(sp)
   177d0:	df000204 	addi	fp,sp,8
   177d4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   177d8:	e0bfff17 	ldw	r2,-4(fp)
   177dc:	10800217 	ldw	r2,8(r2)
   177e0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   177e4:	00000b06 	br	17814 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   177e8:	e13ffe17 	ldw	r4,-8(fp)
   177ec:	014000b4 	movhi	r5,2
   177f0:	2966f904 	addi	r5,r5,-25628
   177f4:	00006cc0 	call	6cc <strcmp>
   177f8:	1000031e 	bne	r2,zero,17808 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   177fc:	e0bffe17 	ldw	r2,-8(fp)
   17800:	10000005 	stb	zero,0(r2)
			break;
   17804:	00000906 	br	1782c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   17808:	e0bffe17 	ldw	r2,-8(fp)
   1780c:	10800044 	addi	r2,r2,1
   17810:	e0bffe15 	stw	r2,-8(fp)
   17814:	e0bffe17 	ldw	r2,-8(fp)
   17818:	10800003 	ldbu	r2,0(r2)
   1781c:	10803fcc 	andi	r2,r2,255
   17820:	1080201c 	xori	r2,r2,128
   17824:	10bfe004 	addi	r2,r2,-128
   17828:	103fef1e 	bne	r2,zero,177e8 <__alt_mem_Flash_flash_data+0xf40177e8>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1782c:	0001883a 	nop
}
   17830:	e037883a 	mov	sp,fp
   17834:	dfc00117 	ldw	ra,4(sp)
   17838:	df000017 	ldw	fp,0(sp)
   1783c:	dec00204 	addi	sp,sp,8
   17840:	f800283a 	ret

00017844 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   17844:	defffc04 	addi	sp,sp,-16
   17848:	dfc00315 	stw	ra,12(sp)
   1784c:	df000215 	stw	fp,8(sp)
   17850:	df000204 	addi	fp,sp,8
   17854:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   17858:	e13fff17 	ldw	r4,-4(fp)
   1785c:	014000b4 	movhi	r5,2
   17860:	296fdc04 	addi	r5,r5,-16528
   17864:	00183900 	call	18390 <alt_find_dev>
   17868:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1786c:	e0bffe17 	ldw	r2,-8(fp)
}
   17870:	e037883a 	mov	sp,fp
   17874:	dfc00117 	ldw	ra,4(sp)
   17878:	df000017 	ldw	fp,0(sp)
   1787c:	dec00204 	addi	sp,sp,8
   17880:	f800283a 	ret

00017884 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   17884:	defffa04 	addi	sp,sp,-24
   17888:	df000515 	stw	fp,20(sp)
   1788c:	df000504 	addi	fp,sp,20
   17890:	e13ffc15 	stw	r4,-16(fp)
   17894:	2805883a 	mov	r2,r5
   17898:	e1bffe15 	stw	r6,-8(fp)
   1789c:	e1ffff15 	stw	r7,-4(fp)
   178a0:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   178a4:	e0bffc17 	ldw	r2,-16(fp)
   178a8:	10800c17 	ldw	r2,48(r2)
   178ac:	e0fffe17 	ldw	r3,-8(fp)
   178b0:	1880042e 	bgeu	r3,r2,178c4 <alt_up_char_buffer_draw+0x40>
   178b4:	e0bffc17 	ldw	r2,-16(fp)
   178b8:	10800d17 	ldw	r2,52(r2)
   178bc:	e0ffff17 	ldw	r3,-4(fp)
   178c0:	18800236 	bltu	r3,r2,178cc <alt_up_char_buffer_draw+0x48>
		return -1;
   178c4:	00bfffc4 	movi	r2,-1
   178c8:	00001d06 	br	17940 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   178cc:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   178d0:	e0bffc17 	ldw	r2,-16(fp)
   178d4:	10c00f17 	ldw	r3,60(r2)
   178d8:	e0bffe17 	ldw	r2,-8(fp)
   178dc:	1884703a 	and	r2,r3,r2
   178e0:	e0fffc17 	ldw	r3,-16(fp)
   178e4:	18c00e17 	ldw	r3,56(r3)
   178e8:	10c4983a 	sll	r2,r2,r3
   178ec:	e0fffb17 	ldw	r3,-20(fp)
   178f0:	1884b03a 	or	r2,r3,r2
   178f4:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   178f8:	e0bffc17 	ldw	r2,-16(fp)
   178fc:	10c01117 	ldw	r3,68(r2)
   17900:	e0bfff17 	ldw	r2,-4(fp)
   17904:	1884703a 	and	r2,r3,r2
   17908:	e0fffc17 	ldw	r3,-16(fp)
   1790c:	18c01017 	ldw	r3,64(r3)
   17910:	10c4983a 	sll	r2,r2,r3
   17914:	e0fffb17 	ldw	r3,-20(fp)
   17918:	1884b03a 	or	r2,r3,r2
   1791c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   17920:	e0bffc17 	ldw	r2,-16(fp)
   17924:	10c00b17 	ldw	r3,44(r2)
   17928:	e0bffb17 	ldw	r2,-20(fp)
   1792c:	1885883a 	add	r2,r3,r2
   17930:	1007883a 	mov	r3,r2
   17934:	e0bffd03 	ldbu	r2,-12(fp)
   17938:	18800025 	stbio	r2,0(r3)

	return 0;
   1793c:	0005883a 	mov	r2,zero
}
   17940:	e037883a 	mov	sp,fp
   17944:	df000017 	ldw	fp,0(sp)
   17948:	dec00104 	addi	sp,sp,4
   1794c:	f800283a 	ret

00017950 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   17950:	defffa04 	addi	sp,sp,-24
   17954:	df000515 	stw	fp,20(sp)
   17958:	df000504 	addi	fp,sp,20
   1795c:	e13ffc15 	stw	r4,-16(fp)
   17960:	e17ffd15 	stw	r5,-12(fp)
   17964:	e1bffe15 	stw	r6,-8(fp)
   17968:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1796c:	e0bffc17 	ldw	r2,-16(fp)
   17970:	10800c17 	ldw	r2,48(r2)
   17974:	e0fffe17 	ldw	r3,-8(fp)
   17978:	1880042e 	bgeu	r3,r2,1798c <alt_up_char_buffer_string+0x3c>
   1797c:	e0bffc17 	ldw	r2,-16(fp)
   17980:	10800d17 	ldw	r2,52(r2)
   17984:	e0ffff17 	ldw	r3,-4(fp)
   17988:	18800236 	bltu	r3,r2,17994 <alt_up_char_buffer_string+0x44>
		return -1;
   1798c:	00bfffc4 	movi	r2,-1
   17990:	00002b06 	br	17a40 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   17994:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   17998:	e0bffc17 	ldw	r2,-16(fp)
   1799c:	10801017 	ldw	r2,64(r2)
   179a0:	1007883a 	mov	r3,r2
   179a4:	e0bfff17 	ldw	r2,-4(fp)
   179a8:	10c6983a 	sll	r3,r2,r3
   179ac:	e0bffe17 	ldw	r2,-8(fp)
   179b0:	1885883a 	add	r2,r3,r2
   179b4:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   179b8:	00001a06 	br	17a24 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   179bc:	e0bffc17 	ldw	r2,-16(fp)
   179c0:	10c00b17 	ldw	r3,44(r2)
   179c4:	e0bffb17 	ldw	r2,-20(fp)
   179c8:	1885883a 	add	r2,r3,r2
   179cc:	1007883a 	mov	r3,r2
   179d0:	e0bffd17 	ldw	r2,-12(fp)
   179d4:	10800003 	ldbu	r2,0(r2)
   179d8:	10803fcc 	andi	r2,r2,255
   179dc:	1080201c 	xori	r2,r2,128
   179e0:	10bfe004 	addi	r2,r2,-128
   179e4:	18800025 	stbio	r2,0(r3)
		++ptr;
   179e8:	e0bffd17 	ldw	r2,-12(fp)
   179ec:	10800044 	addi	r2,r2,1
   179f0:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   179f4:	e0bffe17 	ldw	r2,-8(fp)
   179f8:	10800044 	addi	r2,r2,1
   179fc:	e0bffe15 	stw	r2,-8(fp)
   17a00:	e0bffc17 	ldw	r2,-16(fp)
   17a04:	10800c17 	ldw	r2,48(r2)
   17a08:	e0fffe17 	ldw	r3,-8(fp)
   17a0c:	18800236 	bltu	r3,r2,17a18 <alt_up_char_buffer_string+0xc8>
			return -1;
   17a10:	00bfffc4 	movi	r2,-1
   17a14:	00000a06 	br	17a40 <alt_up_char_buffer_string+0xf0>
		++offset;
   17a18:	e0bffb17 	ldw	r2,-20(fp)
   17a1c:	10800044 	addi	r2,r2,1
   17a20:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   17a24:	e0bffd17 	ldw	r2,-12(fp)
   17a28:	10800003 	ldbu	r2,0(r2)
   17a2c:	10803fcc 	andi	r2,r2,255
   17a30:	1080201c 	xori	r2,r2,128
   17a34:	10bfe004 	addi	r2,r2,-128
   17a38:	103fe01e 	bne	r2,zero,179bc <__alt_mem_Flash_flash_data+0xf40179bc>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   17a3c:	0005883a 	mov	r2,zero
}
   17a40:	e037883a 	mov	sp,fp
   17a44:	df000017 	ldw	fp,0(sp)
   17a48:	dec00104 	addi	sp,sp,4
   17a4c:	f800283a 	ret

00017a50 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   17a50:	defffe04 	addi	sp,sp,-8
   17a54:	df000115 	stw	fp,4(sp)
   17a58:	df000104 	addi	fp,sp,4
   17a5c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   17a60:	e0bfff17 	ldw	r2,-4(fp)
   17a64:	10800a17 	ldw	r2,40(r2)
   17a68:	10800084 	addi	r2,r2,2
   17a6c:	1007883a 	mov	r3,r2
   17a70:	00800044 	movi	r2,1
   17a74:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   17a78:	0001883a 	nop
   17a7c:	e0bfff17 	ldw	r2,-4(fp)
   17a80:	10800a17 	ldw	r2,40(r2)
   17a84:	10800084 	addi	r2,r2,2
   17a88:	10800023 	ldbuio	r2,0(r2)
   17a8c:	10803fcc 	andi	r2,r2,255
   17a90:	1080004c 	andi	r2,r2,1
   17a94:	103ff91e 	bne	r2,zero,17a7c <__alt_mem_Flash_flash_data+0xf4017a7c>
	return 0;
   17a98:	0005883a 	mov	r2,zero
}
   17a9c:	e037883a 	mov	sp,fp
   17aa0:	df000017 	ldw	fp,0(sp)
   17aa4:	dec00104 	addi	sp,sp,4
   17aa8:	f800283a 	ret

00017aac <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   17aac:	defffd04 	addi	sp,sp,-12
   17ab0:	df000215 	stw	fp,8(sp)
   17ab4:	df000204 	addi	fp,sp,8
   17ab8:	2005883a 	mov	r2,r4
   17abc:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17ac0:	e03ffe15 	stw	zero,-8(fp)
   17ac4:	00000d06 	br	17afc <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   17ac8:	008000b4 	movhi	r2,2
   17acc:	10afb804 	addi	r2,r2,-16672
   17ad0:	e0fffe17 	ldw	r3,-8(fp)
   17ad4:	10c5883a 	add	r2,r2,r3
   17ad8:	10800003 	ldbu	r2,0(r2)
   17adc:	10c03fcc 	andi	r3,r2,255
   17ae0:	e0bfff03 	ldbu	r2,-4(fp)
   17ae4:	1880021e 	bne	r3,r2,17af0 <get_multi_byte_make_code_index+0x44>
			return i;
   17ae8:	e0bffe17 	ldw	r2,-8(fp)
   17aec:	00000706 	br	17b0c <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17af0:	e0bffe17 	ldw	r2,-8(fp)
   17af4:	10800044 	addi	r2,r2,1
   17af8:	e0bffe15 	stw	r2,-8(fp)
   17afc:	e0bffe17 	ldw	r2,-8(fp)
   17b00:	108019b0 	cmpltui	r2,r2,102
   17b04:	103ff01e 	bne	r2,zero,17ac8 <__alt_mem_Flash_flash_data+0xf4017ac8>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   17b08:	00801984 	movi	r2,102
}
   17b0c:	e037883a 	mov	sp,fp
   17b10:	df000017 	ldw	fp,0(sp)
   17b14:	dec00104 	addi	sp,sp,4
   17b18:	f800283a 	ret

00017b1c <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   17b1c:	defffd04 	addi	sp,sp,-12
   17b20:	df000215 	stw	fp,8(sp)
   17b24:	df000204 	addi	fp,sp,8
   17b28:	2005883a 	mov	r2,r4
   17b2c:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17b30:	e03ffe15 	stw	zero,-8(fp)
   17b34:	00000d06 	br	17b6c <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   17b38:	008000b4 	movhi	r2,2
   17b3c:	10af9e84 	addi	r2,r2,-16774
   17b40:	e0fffe17 	ldw	r3,-8(fp)
   17b44:	10c5883a 	add	r2,r2,r3
   17b48:	10800003 	ldbu	r2,0(r2)
   17b4c:	10c03fcc 	andi	r3,r2,255
   17b50:	e0bfff03 	ldbu	r2,-4(fp)
   17b54:	1880021e 	bne	r3,r2,17b60 <get_single_byte_make_code_index+0x44>
			return i;
   17b58:	e0bffe17 	ldw	r2,-8(fp)
   17b5c:	00000706 	br	17b7c <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17b60:	e0bffe17 	ldw	r2,-8(fp)
   17b64:	10800044 	addi	r2,r2,1
   17b68:	e0bffe15 	stw	r2,-8(fp)
   17b6c:	e0bffe17 	ldw	r2,-8(fp)
   17b70:	108019b0 	cmpltui	r2,r2,102
   17b74:	103ff01e 	bne	r2,zero,17b38 <__alt_mem_Flash_flash_data+0xf4017b38>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   17b78:	00801984 	movi	r2,102
}
   17b7c:	e037883a 	mov	sp,fp
   17b80:	df000017 	ldw	fp,0(sp)
   17b84:	dec00104 	addi	sp,sp,4
   17b88:	f800283a 	ret

00017b8c <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   17b8c:	defff804 	addi	sp,sp,-32
   17b90:	dfc00715 	stw	ra,28(sp)
   17b94:	df000615 	stw	fp,24(sp)
   17b98:	df000604 	addi	fp,sp,24
   17b9c:	e13ffc15 	stw	r4,-16(fp)
   17ba0:	2805883a 	mov	r2,r5
   17ba4:	e1bffe15 	stw	r6,-8(fp)
   17ba8:	e1ffff15 	stw	r7,-4(fp)
   17bac:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   17bb0:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   17bb4:	00801984 	movi	r2,102
   17bb8:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   17bbc:	e0800217 	ldw	r2,8(fp)
   17bc0:	10000005 	stb	zero,0(r2)
	switch (state)
   17bc4:	e0bffc17 	ldw	r2,-16(fp)
   17bc8:	10c00060 	cmpeqi	r3,r2,1
   17bcc:	18003a1e 	bne	r3,zero,17cb8 <get_next_state+0x12c>
   17bd0:	0080052e 	bgeu	zero,r2,17be8 <get_next_state+0x5c>
   17bd4:	10c000a0 	cmpeqi	r3,r2,2
   17bd8:	18004c1e 	bne	r3,zero,17d0c <get_next_state+0x180>
   17bdc:	108000e0 	cmpeqi	r2,r2,3
   17be0:	10005f1e 	bne	r2,zero,17d60 <get_next_state+0x1d4>
   17be4:	00007306 	br	17db4 <get_next_state+0x228>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   17be8:	e0bffd03 	ldbu	r2,-12(fp)
   17bec:	10803818 	cmpnei	r2,r2,224
   17bf0:	1000031e 	bne	r2,zero,17c00 <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   17bf4:	00800044 	movi	r2,1
   17bf8:	e0bffa15 	stw	r2,-24(fp)
   17bfc:	00002d06 	br	17cb4 <get_next_state+0x128>
			}
			else if (byte == 0xF0)
   17c00:	e0bffd03 	ldbu	r2,-12(fp)
   17c04:	10803c18 	cmpnei	r2,r2,240
   17c08:	1000031e 	bne	r2,zero,17c18 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   17c0c:	00800084 	movi	r2,2
   17c10:	e0bffa15 	stw	r2,-24(fp)
   17c14:	00002706 	br	17cb4 <get_next_state+0x128>
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   17c18:	e0bffd03 	ldbu	r2,-12(fp)
   17c1c:	1009883a 	mov	r4,r2
   17c20:	0017b1c0 	call	17b1c <get_single_byte_make_code_index>
   17c24:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   17c28:	e0bffb17 	ldw	r2,-20(fp)
   17c2c:	10800a30 	cmpltui	r2,r2,40
   17c30:	1000061e 	bne	r2,zero,17c4c <get_next_state+0xc0>
   17c34:	e0bffb17 	ldw	r2,-20(fp)
   17c38:	10801120 	cmpeqi	r2,r2,68
   17c3c:	1000031e 	bne	r2,zero,17c4c <get_next_state+0xc0>
   17c40:	e0bffb17 	ldw	r2,-20(fp)
   17c44:	10801430 	cmpltui	r2,r2,80
   17c48:	1000111e 	bne	r2,zero,17c90 <get_next_state+0x104>
   17c4c:	e0bffb17 	ldw	r2,-20(fp)
   17c50:	108019a0 	cmpeqi	r2,r2,102
   17c54:	10000e1e 	bne	r2,zero,17c90 <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   17c58:	e0bffe17 	ldw	r2,-8(fp)
   17c5c:	00c00044 	movi	r3,1
   17c60:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   17c64:	008000b4 	movhi	r2,2
   17c68:	10af8504 	addi	r2,r2,-16876
   17c6c:	e0fffb17 	ldw	r3,-20(fp)
   17c70:	10c5883a 	add	r2,r2,r3
   17c74:	10c00003 	ldbu	r3,0(r2)
   17c78:	e0800217 	ldw	r2,8(fp)
   17c7c:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   17c80:	e0bfff17 	ldw	r2,-4(fp)
   17c84:	e0fffd03 	ldbu	r3,-12(fp)
   17c88:	10c00005 	stb	r3,0(r2)
   17c8c:	00000606 	br	17ca8 <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   17c90:	e0bffe17 	ldw	r2,-8(fp)
   17c94:	00c00084 	movi	r3,2
   17c98:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   17c9c:	e0bfff17 	ldw	r2,-4(fp)
   17ca0:	e0fffd03 	ldbu	r3,-12(fp)
   17ca4:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   17ca8:	00800104 	movi	r2,4
   17cac:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   17cb0:	00004406 	br	17dc4 <get_next_state+0x238>
   17cb4:	00004306 	br	17dc4 <get_next_state+0x238>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   17cb8:	e0bffd03 	ldbu	r2,-12(fp)
   17cbc:	10803c20 	cmpeqi	r2,r2,240
   17cc0:	10000c1e 	bne	r2,zero,17cf4 <get_next_state+0x168>
   17cc4:	e0bffd03 	ldbu	r2,-12(fp)
   17cc8:	10803820 	cmpeqi	r2,r2,224
   17ccc:	1000091e 	bne	r2,zero,17cf4 <get_next_state+0x168>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   17cd0:	e0bffe17 	ldw	r2,-8(fp)
   17cd4:	00c000c4 	movi	r3,3
   17cd8:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   17cdc:	e0bfff17 	ldw	r2,-4(fp)
   17ce0:	e0fffd03 	ldbu	r3,-12(fp)
   17ce4:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   17ce8:	00800104 	movi	r2,4
   17cec:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   17cf0:	00003406 	br	17dc4 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   17cf4:	e0bffe17 	ldw	r2,-8(fp)
   17cf8:	00c00104 	movi	r3,4
   17cfc:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   17d00:	008000c4 	movi	r2,3
   17d04:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   17d08:	00002e06 	br	17dc4 <get_next_state+0x238>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   17d0c:	e0bffd03 	ldbu	r2,-12(fp)
   17d10:	10803c20 	cmpeqi	r2,r2,240
   17d14:	10000c1e 	bne	r2,zero,17d48 <get_next_state+0x1bc>
   17d18:	e0bffd03 	ldbu	r2,-12(fp)
   17d1c:	10803820 	cmpeqi	r2,r2,224
   17d20:	1000091e 	bne	r2,zero,17d48 <get_next_state+0x1bc>
			{
				*decode_mode = KB_BREAK_CODE;
   17d24:	e0bffe17 	ldw	r2,-8(fp)
   17d28:	00c00104 	movi	r3,4
   17d2c:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   17d30:	e0bfff17 	ldw	r2,-4(fp)
   17d34:	e0fffd03 	ldbu	r3,-12(fp)
   17d38:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   17d3c:	00800104 	movi	r2,4
   17d40:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   17d44:	00001f06 	br	17dc4 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   17d48:	00800084 	movi	r2,2
   17d4c:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   17d50:	e0bffe17 	ldw	r2,-8(fp)
   17d54:	00c00104 	movi	r3,4
   17d58:	10c00015 	stw	r3,0(r2)
			}
			break;
   17d5c:	00001906 	br	17dc4 <get_next_state+0x238>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   17d60:	e0bffd03 	ldbu	r2,-12(fp)
   17d64:	10803c20 	cmpeqi	r2,r2,240
   17d68:	10000c1e 	bne	r2,zero,17d9c <get_next_state+0x210>
   17d6c:	e0bffd03 	ldbu	r2,-12(fp)
   17d70:	10803820 	cmpeqi	r2,r2,224
   17d74:	1000091e 	bne	r2,zero,17d9c <get_next_state+0x210>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   17d78:	e0bffe17 	ldw	r2,-8(fp)
   17d7c:	00c00144 	movi	r3,5
   17d80:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   17d84:	e0bfff17 	ldw	r2,-4(fp)
   17d88:	e0fffd03 	ldbu	r3,-12(fp)
   17d8c:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   17d90:	00800104 	movi	r2,4
   17d94:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   17d98:	00000a06 	br	17dc4 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   17d9c:	008000c4 	movi	r2,3
   17da0:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   17da4:	e0bffe17 	ldw	r2,-8(fp)
   17da8:	00c00144 	movi	r3,5
   17dac:	10c00015 	stw	r3,0(r2)
			}
			break;
   17db0:	00000406 	br	17dc4 <get_next_state+0x238>
		default:
			*decode_mode = KB_INVALID_CODE;
   17db4:	e0bffe17 	ldw	r2,-8(fp)
   17db8:	00c00184 	movi	r3,6
   17dbc:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   17dc0:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   17dc4:	e0bffa17 	ldw	r2,-24(fp)
}
   17dc8:	e037883a 	mov	sp,fp
   17dcc:	dfc00117 	ldw	ra,4(sp)
   17dd0:	df000017 	ldw	fp,0(sp)
   17dd4:	dec00204 	addi	sp,sp,8
   17dd8:	f800283a 	ret

00017ddc <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   17ddc:	defff704 	addi	sp,sp,-36
   17de0:	dfc00815 	stw	ra,32(sp)
   17de4:	df000715 	stw	fp,28(sp)
   17de8:	df000704 	addi	fp,sp,28
   17dec:	e13ffc15 	stw	r4,-16(fp)
   17df0:	e17ffd15 	stw	r5,-12(fp)
   17df4:	e1bffe15 	stw	r6,-8(fp)
   17df8:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   17dfc:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   17e00:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   17e04:	e0bffd17 	ldw	r2,-12(fp)
   17e08:	00c00184 	movi	r3,6
   17e0c:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   17e10:	e0bffb04 	addi	r2,fp,-20
   17e14:	e13ffc17 	ldw	r4,-16(fp)
   17e18:	100b883a 	mov	r5,r2
   17e1c:	00172100 	call	17210 <alt_up_ps2_read_data_byte>
   17e20:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   17e24:	e0bffa17 	ldw	r2,-24(fp)
   17e28:	10000626 	beq	r2,zero,17e44 <decode_scancode+0x68>
			if (state == STATE_INIT)
   17e2c:	d0a8cb17 	ldw	r2,-23764(gp)
   17e30:	1000021e 	bne	r2,zero,17e3c <decode_scancode+0x60>
				return status_read;
   17e34:	e0bffa17 	ldw	r2,-24(fp)
   17e38:	00001106 	br	17e80 <decode_scancode+0xa4>
			else
				return -2;
   17e3c:	00bfff84 	movi	r2,-2
   17e40:	00000f06 	br	17e80 <decode_scancode+0xa4>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   17e44:	d128cb17 	ldw	r4,-23764(gp)
   17e48:	e0bffb03 	ldbu	r2,-20(fp)
   17e4c:	10c03fcc 	andi	r3,r2,255
   17e50:	e0bfff17 	ldw	r2,-4(fp)
   17e54:	d8800015 	stw	r2,0(sp)
   17e58:	180b883a 	mov	r5,r3
   17e5c:	e1bffd17 	ldw	r6,-12(fp)
   17e60:	e1fffe17 	ldw	r7,-8(fp)
   17e64:	0017b8c0 	call	17b8c <get_next_state>
   17e68:	d0a8cb15 	stw	r2,-23764(gp)
	} while ( state != STATE_DONE );
   17e6c:	d0a8cb17 	ldw	r2,-23764(gp)
   17e70:	10800118 	cmpnei	r2,r2,4
   17e74:	103fe61e 	bne	r2,zero,17e10 <__alt_mem_Flash_flash_data+0xf4017e10>

	state = STATE_INIT;
   17e78:	d028cb15 	stw	zero,-23764(gp)

	return 0;
   17e7c:	0005883a 	mov	r2,zero
}
   17e80:	e037883a 	mov	sp,fp
   17e84:	dfc00117 	ldw	ra,4(sp)
   17e88:	df000017 	ldw	fp,0(sp)
   17e8c:	dec00204 	addi	sp,sp,8
   17e90:	f800283a 	ret

00017e94 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   17e94:	defffb04 	addi	sp,sp,-20
   17e98:	dfc00415 	stw	ra,16(sp)
   17e9c:	df000315 	stw	fp,12(sp)
   17ea0:	df000304 	addi	fp,sp,12
   17ea4:	e13ffe15 	stw	r4,-8(fp)
   17ea8:	2805883a 	mov	r2,r5
   17eac:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0x01);
   17eb0:	e13ffe17 	ldw	r4,-8(fp)
   17eb4:	01400044 	movi	r5,1
   17eb8:	00171080 	call	17108 <alt_up_ps2_write_data_byte_with_ack>
   17ebc:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   17ec0:	e0bffd17 	ldw	r2,-12(fp)
   17ec4:	1000061e 	bne	r2,zero,17ee0 <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   17ec8:	e0bfff03 	ldbu	r2,-4(fp)
   17ecc:	108007cc 	andi	r2,r2,31
   17ed0:	e13ffe17 	ldw	r4,-8(fp)
   17ed4:	100b883a 	mov	r5,r2
   17ed8:	00171080 	call	17108 <alt_up_ps2_write_data_byte_with_ack>
   17edc:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   17ee0:	e0bffd17 	ldw	r2,-12(fp)
}
   17ee4:	e037883a 	mov	sp,fp
   17ee8:	dfc00117 	ldw	ra,4(sp)
   17eec:	df000017 	ldw	fp,0(sp)
   17ef0:	dec00204 	addi	sp,sp,8
   17ef4:	f800283a 	ret

00017ef8 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   17ef8:	defffa04 	addi	sp,sp,-24
   17efc:	dfc00515 	stw	ra,20(sp)
   17f00:	df000415 	stw	fp,16(sp)
   17f04:	df000404 	addi	fp,sp,16
   17f08:	e13ffd15 	stw	r4,-12(fp)
   17f0c:	2805883a 	mov	r2,r5
   17f10:	e1bfff15 	stw	r6,-4(fp)
   17f14:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   17f18:	e0bffd17 	ldw	r2,-12(fp)
   17f1c:	10c000a0 	cmpeqi	r3,r2,2
   17f20:	1800131e 	bne	r3,zero,17f70 <translate_make_code+0x78>
   17f24:	10c000e0 	cmpeqi	r3,r2,3
   17f28:	1800201e 	bne	r3,zero,17fac <translate_make_code+0xb4>
   17f2c:	10800060 	cmpeqi	r2,r2,1
   17f30:	10002d26 	beq	r2,zero,17fe8 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   17f34:	e0bffe03 	ldbu	r2,-8(fp)
   17f38:	1009883a 	mov	r4,r2
   17f3c:	0017b1c0 	call	17b1c <get_single_byte_make_code_index>
   17f40:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   17f44:	008000b4 	movhi	r2,2
   17f48:	10af1f04 	addi	r2,r2,-17284
   17f4c:	e0fffc17 	ldw	r3,-16(fp)
   17f50:	18c7883a 	add	r3,r3,r3
   17f54:	18c7883a 	add	r3,r3,r3
   17f58:	10c5883a 	add	r2,r2,r3
   17f5c:	10800017 	ldw	r2,0(r2)
   17f60:	e13fff17 	ldw	r4,-4(fp)
   17f64:	100b883a 	mov	r5,r2
   17f68:	001929c0 	call	1929c <strcpy>
			break;
   17f6c:	00002206 	br	17ff8 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   17f70:	e0bffe03 	ldbu	r2,-8(fp)
   17f74:	1009883a 	mov	r4,r2
   17f78:	0017b1c0 	call	17b1c <get_single_byte_make_code_index>
   17f7c:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   17f80:	008000b4 	movhi	r2,2
   17f84:	10af1f04 	addi	r2,r2,-17284
   17f88:	e0fffc17 	ldw	r3,-16(fp)
   17f8c:	18c7883a 	add	r3,r3,r3
   17f90:	18c7883a 	add	r3,r3,r3
   17f94:	10c5883a 	add	r2,r2,r3
   17f98:	10800017 	ldw	r2,0(r2)
   17f9c:	e13fff17 	ldw	r4,-4(fp)
   17fa0:	100b883a 	mov	r5,r2
   17fa4:	001929c0 	call	1929c <strcpy>
			break;
   17fa8:	00001306 	br	17ff8 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   17fac:	e0bffe03 	ldbu	r2,-8(fp)
   17fb0:	1009883a 	mov	r4,r2
   17fb4:	0017aac0 	call	17aac <get_multi_byte_make_code_index>
   17fb8:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   17fbc:	008000b4 	movhi	r2,2
   17fc0:	10af1f04 	addi	r2,r2,-17284
   17fc4:	e0fffc17 	ldw	r3,-16(fp)
   17fc8:	18c7883a 	add	r3,r3,r3
   17fcc:	18c7883a 	add	r3,r3,r3
   17fd0:	10c5883a 	add	r2,r2,r3
   17fd4:	10800017 	ldw	r2,0(r2)
   17fd8:	e13fff17 	ldw	r4,-4(fp)
   17fdc:	100b883a 	mov	r5,r2
   17fe0:	001929c0 	call	1929c <strcpy>
			break;
   17fe4:	00000406 	br	17ff8 <translate_make_code+0x100>
		default:
			str = "";
   17fe8:	008000b4 	movhi	r2,2
   17fec:	10a78e04 	addi	r2,r2,-25032
   17ff0:	e0bfff15 	stw	r2,-4(fp)
			break;
   17ff4:	0001883a 	nop
	}
}
   17ff8:	e037883a 	mov	sp,fp
   17ffc:	dfc00117 	ldw	ra,4(sp)
   18000:	df000017 	ldw	fp,0(sp)
   18004:	dec00204 	addi	sp,sp,8
   18008:	f800283a 	ret

0001800c <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   1800c:	defffb04 	addi	sp,sp,-20
   18010:	dfc00415 	stw	ra,16(sp)
   18014:	df000315 	stw	fp,12(sp)
   18018:	df000304 	addi	fp,sp,12
   1801c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   18020:	e13fff17 	ldw	r4,-4(fp)
   18024:	01403fc4 	movi	r5,255
   18028:	00171080 	call	17108 <alt_up_ps2_write_data_byte_with_ack>
   1802c:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   18030:	e0bffd17 	ldw	r2,-12(fp)
   18034:	10000e1e 	bne	r2,zero,18070 <reset_keyboard+0x64>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   18038:	e0bffe04 	addi	r2,fp,-8
   1803c:	e13fff17 	ldw	r4,-4(fp)
   18040:	100b883a 	mov	r5,r2
   18044:	00172100 	call	17210 <alt_up_ps2_read_data_byte>
   18048:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1804c:	e0bffd17 	ldw	r2,-12(fp)
   18050:	1000051e 	bne	r2,zero,18068 <reset_keyboard+0x5c>
   18054:	e0bffe03 	ldbu	r2,-8(fp)
   18058:	10803fcc 	andi	r2,r2,255
   1805c:	10802a98 	cmpnei	r2,r2,170
   18060:	1000011e 	bne	r2,zero,18068 <reset_keyboard+0x5c>
   18064:	00000206 	br	18070 <reset_keyboard+0x64>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   18068:	00bfffc4 	movi	r2,-1
   1806c:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   18070:	e0bffd17 	ldw	r2,-12(fp)
}
   18074:	e037883a 	mov	sp,fp
   18078:	dfc00117 	ldw	ra,4(sp)
   1807c:	df000017 	ldw	fp,0(sp)
   18080:	dec00204 	addi	sp,sp,8
   18084:	f800283a 	ret

00018088 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   18088:	defff504 	addi	sp,sp,-44
   1808c:	df000a15 	stw	fp,40(sp)
   18090:	df000a04 	addi	fp,sp,40
   18094:	e13ffc15 	stw	r4,-16(fp)
   18098:	e17ffd15 	stw	r5,-12(fp)
   1809c:	e1bffe15 	stw	r6,-8(fp)
   180a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   180a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   180a8:	008000b4 	movhi	r2,2
   180ac:	10b89f04 	addi	r2,r2,-7556
   180b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   180b4:	10003f26 	beq	r2,zero,181b4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   180b8:	e0bffc17 	ldw	r2,-16(fp)
   180bc:	10003b26 	beq	r2,zero,181ac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   180c0:	e0bffc17 	ldw	r2,-16(fp)
   180c4:	e0fffe17 	ldw	r3,-8(fp)
   180c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   180cc:	e0bffc17 	ldw	r2,-16(fp)
   180d0:	e0ffff17 	ldw	r3,-4(fp)
   180d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180d8:	0005303a 	rdctl	r2,status
   180dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180e0:	e0fff817 	ldw	r3,-32(fp)
   180e4:	00bfff84 	movi	r2,-2
   180e8:	1884703a 	and	r2,r3,r2
   180ec:	1001703a 	wrctl	status,r2
  
  return context;
   180f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   180f4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   180f8:	008000b4 	movhi	r2,2
   180fc:	10b8a004 	addi	r2,r2,-7552
   18100:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   18104:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   18108:	e0fffd17 	ldw	r3,-12(fp)
   1810c:	e0bff617 	ldw	r2,-40(fp)
   18110:	1885883a 	add	r2,r3,r2
   18114:	10c00044 	addi	r3,r2,1
   18118:	e0bffc17 	ldw	r2,-16(fp)
   1811c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18120:	e0bffc17 	ldw	r2,-16(fp)
   18124:	10c00217 	ldw	r3,8(r2)
   18128:	e0bff617 	ldw	r2,-40(fp)
   1812c:	1880042e 	bgeu	r3,r2,18140 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   18130:	e0bffc17 	ldw	r2,-16(fp)
   18134:	00c00044 	movi	r3,1
   18138:	10c00405 	stb	r3,16(r2)
   1813c:	00000206 	br	18148 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   18140:	e0bffc17 	ldw	r2,-16(fp)
   18144:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   18148:	e0fffc17 	ldw	r3,-16(fp)
   1814c:	008000b4 	movhi	r2,2
   18150:	10b00104 	addi	r2,r2,-16380
   18154:	e0bff915 	stw	r2,-28(fp)
   18158:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1815c:	e0bffa17 	ldw	r2,-24(fp)
   18160:	e0fff917 	ldw	r3,-28(fp)
   18164:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18168:	e0bff917 	ldw	r2,-28(fp)
   1816c:	10c00017 	ldw	r3,0(r2)
   18170:	e0bffa17 	ldw	r2,-24(fp)
   18174:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18178:	e0bff917 	ldw	r2,-28(fp)
   1817c:	10800017 	ldw	r2,0(r2)
   18180:	e0fffa17 	ldw	r3,-24(fp)
   18184:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18188:	e0bff917 	ldw	r2,-28(fp)
   1818c:	e0fffa17 	ldw	r3,-24(fp)
   18190:	10c00015 	stw	r3,0(r2)
   18194:	e0bff717 	ldw	r2,-36(fp)
   18198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1819c:	e0bffb17 	ldw	r2,-20(fp)
   181a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   181a4:	0005883a 	mov	r2,zero
   181a8:	00000306 	br	181b8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   181ac:	00bffa84 	movi	r2,-22
   181b0:	00000106 	br	181b8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   181b4:	00bfde84 	movi	r2,-134
  }
}
   181b8:	e037883a 	mov	sp,fp
   181bc:	df000017 	ldw	fp,0(sp)
   181c0:	dec00104 	addi	sp,sp,4
   181c4:	f800283a 	ret

000181c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   181c8:	deffff04 	addi	sp,sp,-4
   181cc:	df000015 	stw	fp,0(sp)
   181d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   181d4:	e037883a 	mov	sp,fp
   181d8:	df000017 	ldw	fp,0(sp)
   181dc:	dec00104 	addi	sp,sp,4
   181e0:	f800283a 	ret

000181e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   181e4:	defffe04 	addi	sp,sp,-8
   181e8:	dfc00115 	stw	ra,4(sp)
   181ec:	df000015 	stw	fp,0(sp)
   181f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   181f4:	008000b4 	movhi	r2,2
   181f8:	10afdf04 	addi	r2,r2,-16516
   181fc:	10800017 	ldw	r2,0(r2)
   18200:	10000526 	beq	r2,zero,18218 <alt_get_errno+0x34>
   18204:	008000b4 	movhi	r2,2
   18208:	10afdf04 	addi	r2,r2,-16516
   1820c:	10800017 	ldw	r2,0(r2)
   18210:	103ee83a 	callr	r2
   18214:	00000206 	br	18220 <alt_get_errno+0x3c>
   18218:	008000b4 	movhi	r2,2
   1821c:	10b88004 	addi	r2,r2,-7680
}
   18220:	e037883a 	mov	sp,fp
   18224:	dfc00117 	ldw	ra,4(sp)
   18228:	df000017 	ldw	fp,0(sp)
   1822c:	dec00204 	addi	sp,sp,8
   18230:	f800283a 	ret

00018234 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18234:	defffa04 	addi	sp,sp,-24
   18238:	dfc00515 	stw	ra,20(sp)
   1823c:	df000415 	stw	fp,16(sp)
   18240:	df000404 	addi	fp,sp,16
   18244:	e13ffe15 	stw	r4,-8(fp)
   18248:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1824c:	e0bffe17 	ldw	r2,-8(fp)
   18250:	10000326 	beq	r2,zero,18260 <alt_dev_llist_insert+0x2c>
   18254:	e0bffe17 	ldw	r2,-8(fp)
   18258:	10800217 	ldw	r2,8(r2)
   1825c:	1000061e 	bne	r2,zero,18278 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   18260:	00181e40 	call	181e4 <alt_get_errno>
   18264:	1007883a 	mov	r3,r2
   18268:	00800584 	movi	r2,22
   1826c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   18270:	00bffa84 	movi	r2,-22
   18274:	00001306 	br	182c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18278:	e0bffe17 	ldw	r2,-8(fp)
   1827c:	e0ffff17 	ldw	r3,-4(fp)
   18280:	e0fffc15 	stw	r3,-16(fp)
   18284:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18288:	e0bffd17 	ldw	r2,-12(fp)
   1828c:	e0fffc17 	ldw	r3,-16(fp)
   18290:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18294:	e0bffc17 	ldw	r2,-16(fp)
   18298:	10c00017 	ldw	r3,0(r2)
   1829c:	e0bffd17 	ldw	r2,-12(fp)
   182a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   182a4:	e0bffc17 	ldw	r2,-16(fp)
   182a8:	10800017 	ldw	r2,0(r2)
   182ac:	e0fffd17 	ldw	r3,-12(fp)
   182b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   182b4:	e0bffc17 	ldw	r2,-16(fp)
   182b8:	e0fffd17 	ldw	r3,-12(fp)
   182bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   182c0:	0005883a 	mov	r2,zero
}
   182c4:	e037883a 	mov	sp,fp
   182c8:	dfc00117 	ldw	ra,4(sp)
   182cc:	df000017 	ldw	fp,0(sp)
   182d0:	dec00204 	addi	sp,sp,8
   182d4:	f800283a 	ret

000182d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   182d8:	defffd04 	addi	sp,sp,-12
   182dc:	dfc00215 	stw	ra,8(sp)
   182e0:	df000115 	stw	fp,4(sp)
   182e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   182e8:	008000b4 	movhi	r2,2
   182ec:	10a58304 	addi	r2,r2,-27124
   182f0:	e0bfff15 	stw	r2,-4(fp)
   182f4:	00000606 	br	18310 <_do_ctors+0x38>
        (*ctor) (); 
   182f8:	e0bfff17 	ldw	r2,-4(fp)
   182fc:	10800017 	ldw	r2,0(r2)
   18300:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18304:	e0bfff17 	ldw	r2,-4(fp)
   18308:	10bfff04 	addi	r2,r2,-4
   1830c:	e0bfff15 	stw	r2,-4(fp)
   18310:	e0ffff17 	ldw	r3,-4(fp)
   18314:	008000b4 	movhi	r2,2
   18318:	10a58404 	addi	r2,r2,-27120
   1831c:	18bff62e 	bgeu	r3,r2,182f8 <__alt_mem_Flash_flash_data+0xf40182f8>
        (*ctor) (); 
}
   18320:	e037883a 	mov	sp,fp
   18324:	dfc00117 	ldw	ra,4(sp)
   18328:	df000017 	ldw	fp,0(sp)
   1832c:	dec00204 	addi	sp,sp,8
   18330:	f800283a 	ret

00018334 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18334:	defffd04 	addi	sp,sp,-12
   18338:	dfc00215 	stw	ra,8(sp)
   1833c:	df000115 	stw	fp,4(sp)
   18340:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18344:	008000b4 	movhi	r2,2
   18348:	10a58304 	addi	r2,r2,-27124
   1834c:	e0bfff15 	stw	r2,-4(fp)
   18350:	00000606 	br	1836c <_do_dtors+0x38>
        (*dtor) (); 
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	10800017 	ldw	r2,0(r2)
   1835c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18360:	e0bfff17 	ldw	r2,-4(fp)
   18364:	10bfff04 	addi	r2,r2,-4
   18368:	e0bfff15 	stw	r2,-4(fp)
   1836c:	e0ffff17 	ldw	r3,-4(fp)
   18370:	008000b4 	movhi	r2,2
   18374:	10a58404 	addi	r2,r2,-27120
   18378:	18bff62e 	bgeu	r3,r2,18354 <__alt_mem_Flash_flash_data+0xf4018354>
        (*dtor) (); 
}
   1837c:	e037883a 	mov	sp,fp
   18380:	dfc00117 	ldw	ra,4(sp)
   18384:	df000017 	ldw	fp,0(sp)
   18388:	dec00204 	addi	sp,sp,8
   1838c:	f800283a 	ret

00018390 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18390:	defffa04 	addi	sp,sp,-24
   18394:	dfc00515 	stw	ra,20(sp)
   18398:	df000415 	stw	fp,16(sp)
   1839c:	df000404 	addi	fp,sp,16
   183a0:	e13ffe15 	stw	r4,-8(fp)
   183a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   183a8:	e0bfff17 	ldw	r2,-4(fp)
   183ac:	10800017 	ldw	r2,0(r2)
   183b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   183b4:	e13ffe17 	ldw	r4,-8(fp)
   183b8:	00007700 	call	770 <strlen>
   183bc:	10800044 	addi	r2,r2,1
   183c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   183c4:	00000d06 	br	183fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   183c8:	e0bffc17 	ldw	r2,-16(fp)
   183cc:	10c00217 	ldw	r3,8(r2)
   183d0:	e0bffd17 	ldw	r2,-12(fp)
   183d4:	1809883a 	mov	r4,r3
   183d8:	e17ffe17 	ldw	r5,-8(fp)
   183dc:	100d883a 	mov	r6,r2
   183e0:	00192200 	call	19220 <memcmp>
   183e4:	1000021e 	bne	r2,zero,183f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   183e8:	e0bffc17 	ldw	r2,-16(fp)
   183ec:	00000706 	br	1840c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   183f0:	e0bffc17 	ldw	r2,-16(fp)
   183f4:	10800017 	ldw	r2,0(r2)
   183f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   183fc:	e0fffc17 	ldw	r3,-16(fp)
   18400:	e0bfff17 	ldw	r2,-4(fp)
   18404:	18bff01e 	bne	r3,r2,183c8 <__alt_mem_Flash_flash_data+0xf40183c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18408:	0005883a 	mov	r2,zero
}
   1840c:	e037883a 	mov	sp,fp
   18410:	dfc00117 	ldw	ra,4(sp)
   18414:	df000017 	ldw	fp,0(sp)
   18418:	dec00204 	addi	sp,sp,8
   1841c:	f800283a 	ret

00018420 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18420:	defffe04 	addi	sp,sp,-8
   18424:	dfc00115 	stw	ra,4(sp)
   18428:	df000015 	stw	fp,0(sp)
   1842c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18430:	0009883a 	mov	r4,zero
   18434:	01440004 	movi	r5,4096
   18438:	00190ac0 	call	190ac <alt_icache_flush>
#endif
}
   1843c:	e037883a 	mov	sp,fp
   18440:	dfc00117 	ldw	ra,4(sp)
   18444:	df000017 	ldw	fp,0(sp)
   18448:	dec00204 	addi	sp,sp,8
   1844c:	f800283a 	ret

00018450 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18450:	defff904 	addi	sp,sp,-28
   18454:	dfc00615 	stw	ra,24(sp)
   18458:	df000515 	stw	fp,20(sp)
   1845c:	df000504 	addi	fp,sp,20
   18460:	e13ffc15 	stw	r4,-16(fp)
   18464:	e17ffd15 	stw	r5,-12(fp)
   18468:	e1bffe15 	stw	r6,-8(fp)
   1846c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   18470:	e13ffd17 	ldw	r4,-12(fp)
   18474:	e17ffe17 	ldw	r5,-8(fp)
   18478:	e1bfff17 	ldw	r6,-4(fp)
   1847c:	00188540 	call	18854 <open>
   18480:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   18484:	e0bffb17 	ldw	r2,-20(fp)
   18488:	10001c16 	blt	r2,zero,184fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1848c:	008000b4 	movhi	r2,2
   18490:	10a9c304 	addi	r2,r2,-22772
   18494:	e0fffb17 	ldw	r3,-20(fp)
   18498:	18c00324 	muli	r3,r3,12
   1849c:	10c5883a 	add	r2,r2,r3
   184a0:	10c00017 	ldw	r3,0(r2)
   184a4:	e0bffc17 	ldw	r2,-16(fp)
   184a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   184ac:	008000b4 	movhi	r2,2
   184b0:	10a9c304 	addi	r2,r2,-22772
   184b4:	e0fffb17 	ldw	r3,-20(fp)
   184b8:	18c00324 	muli	r3,r3,12
   184bc:	18c00104 	addi	r3,r3,4
   184c0:	10c5883a 	add	r2,r2,r3
   184c4:	10c00017 	ldw	r3,0(r2)
   184c8:	e0bffc17 	ldw	r2,-16(fp)
   184cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   184d0:	008000b4 	movhi	r2,2
   184d4:	10a9c304 	addi	r2,r2,-22772
   184d8:	e0fffb17 	ldw	r3,-20(fp)
   184dc:	18c00324 	muli	r3,r3,12
   184e0:	18c00204 	addi	r3,r3,8
   184e4:	10c5883a 	add	r2,r2,r3
   184e8:	10c00017 	ldw	r3,0(r2)
   184ec:	e0bffc17 	ldw	r2,-16(fp)
   184f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   184f4:	e13ffb17 	ldw	r4,-20(fp)
   184f8:	000d0d00 	call	d0d0 <alt_release_fd>
  }
} 
   184fc:	e037883a 	mov	sp,fp
   18500:	dfc00117 	ldw	ra,4(sp)
   18504:	df000017 	ldw	fp,0(sp)
   18508:	dec00204 	addi	sp,sp,8
   1850c:	f800283a 	ret

00018510 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18510:	defffb04 	addi	sp,sp,-20
   18514:	dfc00415 	stw	ra,16(sp)
   18518:	df000315 	stw	fp,12(sp)
   1851c:	df000304 	addi	fp,sp,12
   18520:	e13ffd15 	stw	r4,-12(fp)
   18524:	e17ffe15 	stw	r5,-8(fp)
   18528:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1852c:	010000b4 	movhi	r4,2
   18530:	2129c604 	addi	r4,r4,-22760
   18534:	e17ffd17 	ldw	r5,-12(fp)
   18538:	01800044 	movi	r6,1
   1853c:	01c07fc4 	movi	r7,511
   18540:	00184500 	call	18450 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   18544:	010000b4 	movhi	r4,2
   18548:	2129c304 	addi	r4,r4,-22772
   1854c:	e17ffe17 	ldw	r5,-8(fp)
   18550:	000d883a 	mov	r6,zero
   18554:	01c07fc4 	movi	r7,511
   18558:	00184500 	call	18450 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1855c:	010000b4 	movhi	r4,2
   18560:	2129c904 	addi	r4,r4,-22748
   18564:	e17fff17 	ldw	r5,-4(fp)
   18568:	01800044 	movi	r6,1
   1856c:	01c07fc4 	movi	r7,511
   18570:	00184500 	call	18450 <alt_open_fd>
}  
   18574:	e037883a 	mov	sp,fp
   18578:	dfc00117 	ldw	ra,4(sp)
   1857c:	df000017 	ldw	fp,0(sp)
   18580:	dec00204 	addi	sp,sp,8
   18584:	f800283a 	ret

00018588 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   18588:	defff004 	addi	sp,sp,-64
   1858c:	df000f15 	stw	fp,60(sp)
   18590:	df000f04 	addi	fp,sp,60
   18594:	e13ffd15 	stw	r4,-12(fp)
   18598:	e17ffe15 	stw	r5,-8(fp)
   1859c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   185a0:	00bffa84 	movi	r2,-22
   185a4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   185a8:	e0bffd17 	ldw	r2,-12(fp)
   185ac:	10800828 	cmpgeui	r2,r2,32
   185b0:	10005c1e 	bne	r2,zero,18724 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185b4:	0005303a 	rdctl	r2,status
   185b8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185bc:	e0fff317 	ldw	r3,-52(fp)
   185c0:	00bfff84 	movi	r2,-2
   185c4:	1884703a 	and	r2,r3,r2
   185c8:	1001703a 	wrctl	status,r2
  
  return context;
   185cc:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   185d0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   185d4:	008000b4 	movhi	r2,2
   185d8:	10953f04 	addi	r2,r2,21756
   185dc:	e0fffd17 	ldw	r3,-12(fp)
   185e0:	180690fa 	slli	r3,r3,3
   185e4:	10c5883a 	add	r2,r2,r3
   185e8:	e0ffff17 	ldw	r3,-4(fp)
   185ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   185f0:	008000b4 	movhi	r2,2
   185f4:	10953f04 	addi	r2,r2,21756
   185f8:	e0fffd17 	ldw	r3,-12(fp)
   185fc:	180690fa 	slli	r3,r3,3
   18600:	18c00104 	addi	r3,r3,4
   18604:	10c5883a 	add	r2,r2,r3
   18608:	e0fffe17 	ldw	r3,-8(fp)
   1860c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18610:	e0bfff17 	ldw	r2,-4(fp)
   18614:	10001f26 	beq	r2,zero,18694 <alt_irq_register+0x10c>
   18618:	e0bffd17 	ldw	r2,-12(fp)
   1861c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18620:	0005303a 	rdctl	r2,status
   18624:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18628:	e0fff517 	ldw	r3,-44(fp)
   1862c:	00bfff84 	movi	r2,-2
   18630:	1884703a 	and	r2,r3,r2
   18634:	1001703a 	wrctl	status,r2
  
  return context;
   18638:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1863c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   18640:	e0bff417 	ldw	r2,-48(fp)
   18644:	00c00044 	movi	r3,1
   18648:	1884983a 	sll	r2,r3,r2
   1864c:	1007883a 	mov	r3,r2
   18650:	008000b4 	movhi	r2,2
   18654:	10b89e04 	addi	r2,r2,-7560
   18658:	10800017 	ldw	r2,0(r2)
   1865c:	1886b03a 	or	r3,r3,r2
   18660:	008000b4 	movhi	r2,2
   18664:	10b89e04 	addi	r2,r2,-7560
   18668:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1866c:	008000b4 	movhi	r2,2
   18670:	10b89e04 	addi	r2,r2,-7560
   18674:	10800017 	ldw	r2,0(r2)
   18678:	100170fa 	wrctl	ienable,r2
   1867c:	e0bff617 	ldw	r2,-40(fp)
   18680:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18684:	e0bff717 	ldw	r2,-36(fp)
   18688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1868c:	0005883a 	mov	r2,zero
   18690:	00001f06 	br	18710 <alt_irq_register+0x188>
   18694:	e0bffd17 	ldw	r2,-12(fp)
   18698:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1869c:	0005303a 	rdctl	r2,status
   186a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186a4:	e0fff917 	ldw	r3,-28(fp)
   186a8:	00bfff84 	movi	r2,-2
   186ac:	1884703a 	and	r2,r3,r2
   186b0:	1001703a 	wrctl	status,r2
  
  return context;
   186b4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   186b8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   186bc:	e0bff817 	ldw	r2,-32(fp)
   186c0:	00c00044 	movi	r3,1
   186c4:	1884983a 	sll	r2,r3,r2
   186c8:	0084303a 	nor	r2,zero,r2
   186cc:	1007883a 	mov	r3,r2
   186d0:	008000b4 	movhi	r2,2
   186d4:	10b89e04 	addi	r2,r2,-7560
   186d8:	10800017 	ldw	r2,0(r2)
   186dc:	1886703a 	and	r3,r3,r2
   186e0:	008000b4 	movhi	r2,2
   186e4:	10b89e04 	addi	r2,r2,-7560
   186e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   186ec:	008000b4 	movhi	r2,2
   186f0:	10b89e04 	addi	r2,r2,-7560
   186f4:	10800017 	ldw	r2,0(r2)
   186f8:	100170fa 	wrctl	ienable,r2
   186fc:	e0bffa17 	ldw	r2,-24(fp)
   18700:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18704:	e0bffb17 	ldw	r2,-20(fp)
   18708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1870c:	0005883a 	mov	r2,zero
   18710:	e0bff115 	stw	r2,-60(fp)
   18714:	e0bff217 	ldw	r2,-56(fp)
   18718:	e0bffc15 	stw	r2,-16(fp)
   1871c:	e0bffc17 	ldw	r2,-16(fp)
   18720:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18724:	e0bff117 	ldw	r2,-60(fp)
}
   18728:	e037883a 	mov	sp,fp
   1872c:	df000017 	ldw	fp,0(sp)
   18730:	dec00104 	addi	sp,sp,4
   18734:	f800283a 	ret

00018738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18738:	defffe04 	addi	sp,sp,-8
   1873c:	dfc00115 	stw	ra,4(sp)
   18740:	df000015 	stw	fp,0(sp)
   18744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18748:	008000b4 	movhi	r2,2
   1874c:	10afdf04 	addi	r2,r2,-16516
   18750:	10800017 	ldw	r2,0(r2)
   18754:	10000526 	beq	r2,zero,1876c <alt_get_errno+0x34>
   18758:	008000b4 	movhi	r2,2
   1875c:	10afdf04 	addi	r2,r2,-16516
   18760:	10800017 	ldw	r2,0(r2)
   18764:	103ee83a 	callr	r2
   18768:	00000206 	br	18774 <alt_get_errno+0x3c>
   1876c:	008000b4 	movhi	r2,2
   18770:	10b88004 	addi	r2,r2,-7680
}
   18774:	e037883a 	mov	sp,fp
   18778:	dfc00117 	ldw	ra,4(sp)
   1877c:	df000017 	ldw	fp,0(sp)
   18780:	dec00204 	addi	sp,sp,8
   18784:	f800283a 	ret

00018788 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18788:	defffd04 	addi	sp,sp,-12
   1878c:	df000215 	stw	fp,8(sp)
   18790:	df000204 	addi	fp,sp,8
   18794:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18798:	e0bfff17 	ldw	r2,-4(fp)
   1879c:	10800217 	ldw	r2,8(r2)
   187a0:	10d00034 	orhi	r3,r2,16384
   187a4:	e0bfff17 	ldw	r2,-4(fp)
   187a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   187ac:	e03ffe15 	stw	zero,-8(fp)
   187b0:	00001d06 	br	18828 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   187b4:	008000b4 	movhi	r2,2
   187b8:	10a9c304 	addi	r2,r2,-22772
   187bc:	e0fffe17 	ldw	r3,-8(fp)
   187c0:	18c00324 	muli	r3,r3,12
   187c4:	10c5883a 	add	r2,r2,r3
   187c8:	10c00017 	ldw	r3,0(r2)
   187cc:	e0bfff17 	ldw	r2,-4(fp)
   187d0:	10800017 	ldw	r2,0(r2)
   187d4:	1880111e 	bne	r3,r2,1881c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   187d8:	008000b4 	movhi	r2,2
   187dc:	10a9c304 	addi	r2,r2,-22772
   187e0:	e0fffe17 	ldw	r3,-8(fp)
   187e4:	18c00324 	muli	r3,r3,12
   187e8:	18c00204 	addi	r3,r3,8
   187ec:	10c5883a 	add	r2,r2,r3
   187f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   187f4:	1000090e 	bge	r2,zero,1881c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   187f8:	e0bffe17 	ldw	r2,-8(fp)
   187fc:	10c00324 	muli	r3,r2,12
   18800:	008000b4 	movhi	r2,2
   18804:	10a9c304 	addi	r2,r2,-22772
   18808:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1880c:	e0bfff17 	ldw	r2,-4(fp)
   18810:	18800226 	beq	r3,r2,1881c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18814:	00bffcc4 	movi	r2,-13
   18818:	00000a06 	br	18844 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1881c:	e0bffe17 	ldw	r2,-8(fp)
   18820:	10800044 	addi	r2,r2,1
   18824:	e0bffe15 	stw	r2,-8(fp)
   18828:	008000b4 	movhi	r2,2
   1882c:	10afde04 	addi	r2,r2,-16520
   18830:	10800017 	ldw	r2,0(r2)
   18834:	1007883a 	mov	r3,r2
   18838:	e0bffe17 	ldw	r2,-8(fp)
   1883c:	18bfdd2e 	bgeu	r3,r2,187b4 <__alt_mem_Flash_flash_data+0xf40187b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18840:	0005883a 	mov	r2,zero
}
   18844:	e037883a 	mov	sp,fp
   18848:	df000017 	ldw	fp,0(sp)
   1884c:	dec00104 	addi	sp,sp,4
   18850:	f800283a 	ret

00018854 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18854:	defff604 	addi	sp,sp,-40
   18858:	dfc00915 	stw	ra,36(sp)
   1885c:	df000815 	stw	fp,32(sp)
   18860:	df000804 	addi	fp,sp,32
   18864:	e13ffd15 	stw	r4,-12(fp)
   18868:	e17ffe15 	stw	r5,-8(fp)
   1886c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18870:	00bfffc4 	movi	r2,-1
   18874:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18878:	00bffb44 	movi	r2,-19
   1887c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18880:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18884:	e13ffd17 	ldw	r4,-12(fp)
   18888:	014000b4 	movhi	r5,2
   1888c:	296fdc04 	addi	r5,r5,-16528
   18890:	00183900 	call	18390 <alt_find_dev>
   18894:	e0bff815 	stw	r2,-32(fp)
   18898:	e0bff817 	ldw	r2,-32(fp)
   1889c:	1000051e 	bne	r2,zero,188b4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   188a0:	e13ffd17 	ldw	r4,-12(fp)
   188a4:	0018e9c0 	call	18e9c <alt_find_file>
   188a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   188ac:	00800044 	movi	r2,1
   188b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   188b4:	e0bff817 	ldw	r2,-32(fp)
   188b8:	10002926 	beq	r2,zero,18960 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   188bc:	e13ff817 	ldw	r4,-32(fp)
   188c0:	0018fb00 	call	18fb0 <alt_get_fd>
   188c4:	e0bff915 	stw	r2,-28(fp)
   188c8:	e0bff917 	ldw	r2,-28(fp)
   188cc:	1000030e 	bge	r2,zero,188dc <open+0x88>
    {
      status = index;
   188d0:	e0bff917 	ldw	r2,-28(fp)
   188d4:	e0bffa15 	stw	r2,-24(fp)
   188d8:	00002306 	br	18968 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   188dc:	e0bff917 	ldw	r2,-28(fp)
   188e0:	10c00324 	muli	r3,r2,12
   188e4:	008000b4 	movhi	r2,2
   188e8:	10a9c304 	addi	r2,r2,-22772
   188ec:	1885883a 	add	r2,r3,r2
   188f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   188f4:	e0fffe17 	ldw	r3,-8(fp)
   188f8:	00900034 	movhi	r2,16384
   188fc:	10bfffc4 	addi	r2,r2,-1
   18900:	1886703a 	and	r3,r3,r2
   18904:	e0bffc17 	ldw	r2,-16(fp)
   18908:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1890c:	e0bffb17 	ldw	r2,-20(fp)
   18910:	1000051e 	bne	r2,zero,18928 <open+0xd4>
   18914:	e13ffc17 	ldw	r4,-16(fp)
   18918:	00187880 	call	18788 <alt_file_locked>
   1891c:	e0bffa15 	stw	r2,-24(fp)
   18920:	e0bffa17 	ldw	r2,-24(fp)
   18924:	10001016 	blt	r2,zero,18968 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18928:	e0bff817 	ldw	r2,-32(fp)
   1892c:	10800317 	ldw	r2,12(r2)
   18930:	10000826 	beq	r2,zero,18954 <open+0x100>
   18934:	e0bff817 	ldw	r2,-32(fp)
   18938:	10800317 	ldw	r2,12(r2)
   1893c:	e13ffc17 	ldw	r4,-16(fp)
   18940:	e17ffd17 	ldw	r5,-12(fp)
   18944:	e1bffe17 	ldw	r6,-8(fp)
   18948:	e1ffff17 	ldw	r7,-4(fp)
   1894c:	103ee83a 	callr	r2
   18950:	00000106 	br	18958 <open+0x104>
   18954:	0005883a 	mov	r2,zero
   18958:	e0bffa15 	stw	r2,-24(fp)
   1895c:	00000206 	br	18968 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18960:	00bffb44 	movi	r2,-19
   18964:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18968:	e0bffa17 	ldw	r2,-24(fp)
   1896c:	1000090e 	bge	r2,zero,18994 <open+0x140>
  {
    alt_release_fd (index);  
   18970:	e13ff917 	ldw	r4,-28(fp)
   18974:	000d0d00 	call	d0d0 <alt_release_fd>
    ALT_ERRNO = -status;
   18978:	00187380 	call	18738 <alt_get_errno>
   1897c:	1007883a 	mov	r3,r2
   18980:	e0bffa17 	ldw	r2,-24(fp)
   18984:	0085c83a 	sub	r2,zero,r2
   18988:	18800015 	stw	r2,0(r3)
    return -1;
   1898c:	00bfffc4 	movi	r2,-1
   18990:	00000106 	br	18998 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   18994:	e0bff917 	ldw	r2,-28(fp)
}
   18998:	e037883a 	mov	sp,fp
   1899c:	dfc00117 	ldw	ra,4(sp)
   189a0:	df000017 	ldw	fp,0(sp)
   189a4:	dec00204 	addi	sp,sp,8
   189a8:	f800283a 	ret

000189ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   189ac:	defffa04 	addi	sp,sp,-24
   189b0:	df000515 	stw	fp,20(sp)
   189b4:	df000504 	addi	fp,sp,20
   189b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189bc:	0005303a 	rdctl	r2,status
   189c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189c4:	e0fffc17 	ldw	r3,-16(fp)
   189c8:	00bfff84 	movi	r2,-2
   189cc:	1884703a 	and	r2,r3,r2
   189d0:	1001703a 	wrctl	status,r2
  
  return context;
   189d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   189d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   189dc:	e0bfff17 	ldw	r2,-4(fp)
   189e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   189e4:	e0bffd17 	ldw	r2,-12(fp)
   189e8:	10800017 	ldw	r2,0(r2)
   189ec:	e0fffd17 	ldw	r3,-12(fp)
   189f0:	18c00117 	ldw	r3,4(r3)
   189f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   189f8:	e0bffd17 	ldw	r2,-12(fp)
   189fc:	10800117 	ldw	r2,4(r2)
   18a00:	e0fffd17 	ldw	r3,-12(fp)
   18a04:	18c00017 	ldw	r3,0(r3)
   18a08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18a0c:	e0bffd17 	ldw	r2,-12(fp)
   18a10:	e0fffd17 	ldw	r3,-12(fp)
   18a14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18a18:	e0bffd17 	ldw	r2,-12(fp)
   18a1c:	e0fffd17 	ldw	r3,-12(fp)
   18a20:	10c00015 	stw	r3,0(r2)
   18a24:	e0bffb17 	ldw	r2,-20(fp)
   18a28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a2c:	e0bffe17 	ldw	r2,-8(fp)
   18a30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18a34:	e037883a 	mov	sp,fp
   18a38:	df000017 	ldw	fp,0(sp)
   18a3c:	dec00104 	addi	sp,sp,4
   18a40:	f800283a 	ret

00018a44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18a44:	defffb04 	addi	sp,sp,-20
   18a48:	dfc00415 	stw	ra,16(sp)
   18a4c:	df000315 	stw	fp,12(sp)
   18a50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18a54:	d0a02f17 	ldw	r2,-32580(gp)
   18a58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18a5c:	d0a8ce17 	ldw	r2,-23752(gp)
   18a60:	10800044 	addi	r2,r2,1
   18a64:	d0a8ce15 	stw	r2,-23752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18a68:	00002e06 	br	18b24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18a6c:	e0bffd17 	ldw	r2,-12(fp)
   18a70:	10800017 	ldw	r2,0(r2)
   18a74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18a78:	e0bffd17 	ldw	r2,-12(fp)
   18a7c:	10800403 	ldbu	r2,16(r2)
   18a80:	10803fcc 	andi	r2,r2,255
   18a84:	10000426 	beq	r2,zero,18a98 <alt_tick+0x54>
   18a88:	d0a8ce17 	ldw	r2,-23752(gp)
   18a8c:	1000021e 	bne	r2,zero,18a98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18a90:	e0bffd17 	ldw	r2,-12(fp)
   18a94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18a98:	e0bffd17 	ldw	r2,-12(fp)
   18a9c:	10800217 	ldw	r2,8(r2)
   18aa0:	d0e8ce17 	ldw	r3,-23752(gp)
   18aa4:	18801d36 	bltu	r3,r2,18b1c <alt_tick+0xd8>
   18aa8:	e0bffd17 	ldw	r2,-12(fp)
   18aac:	10800403 	ldbu	r2,16(r2)
   18ab0:	10803fcc 	andi	r2,r2,255
   18ab4:	1000191e 	bne	r2,zero,18b1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18ab8:	e0bffd17 	ldw	r2,-12(fp)
   18abc:	10800317 	ldw	r2,12(r2)
   18ac0:	e0fffd17 	ldw	r3,-12(fp)
   18ac4:	18c00517 	ldw	r3,20(r3)
   18ac8:	1809883a 	mov	r4,r3
   18acc:	103ee83a 	callr	r2
   18ad0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18ad4:	e0bfff17 	ldw	r2,-4(fp)
   18ad8:	1000031e 	bne	r2,zero,18ae8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18adc:	e13ffd17 	ldw	r4,-12(fp)
   18ae0:	00189ac0 	call	189ac <alt_alarm_stop>
   18ae4:	00000d06 	br	18b1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18ae8:	e0bffd17 	ldw	r2,-12(fp)
   18aec:	10c00217 	ldw	r3,8(r2)
   18af0:	e0bfff17 	ldw	r2,-4(fp)
   18af4:	1887883a 	add	r3,r3,r2
   18af8:	e0bffd17 	ldw	r2,-12(fp)
   18afc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18b00:	e0bffd17 	ldw	r2,-12(fp)
   18b04:	10c00217 	ldw	r3,8(r2)
   18b08:	d0a8ce17 	ldw	r2,-23752(gp)
   18b0c:	1880032e 	bgeu	r3,r2,18b1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18b10:	e0bffd17 	ldw	r2,-12(fp)
   18b14:	00c00044 	movi	r3,1
   18b18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18b1c:	e0bffe17 	ldw	r2,-8(fp)
   18b20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18b24:	e0fffd17 	ldw	r3,-12(fp)
   18b28:	d0a02f04 	addi	r2,gp,-32580
   18b2c:	18bfcf1e 	bne	r3,r2,18a6c <__alt_mem_Flash_flash_data+0xf4018a6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18b30:	000e2dc0 	call	e2dc <OSTimeTick>
}
   18b34:	e037883a 	mov	sp,fp
   18b38:	dfc00117 	ldw	ra,4(sp)
   18b3c:	df000017 	ldw	fp,0(sp)
   18b40:	dec00204 	addi	sp,sp,8
   18b44:	f800283a 	ret

00018b48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18b48:	deffff04 	addi	sp,sp,-4
   18b4c:	df000015 	stw	fp,0(sp)
   18b50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18b54:	000170fa 	wrctl	ienable,zero
}
   18b58:	e037883a 	mov	sp,fp
   18b5c:	df000017 	ldw	fp,0(sp)
   18b60:	dec00104 	addi	sp,sp,4
   18b64:	f800283a 	ret

00018b68 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18b68:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18b6c:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18b70:	d128c617 	ldw	r4,-23784(gp)

      stw ra,  0(sp)
   18b74:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18b78:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18b7c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18b80:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18b84:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18b88:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18b8c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18b90:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18b94:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18b98:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18b9c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18ba0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18ba4:	0018dd40 	call	18dd4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18ba8:	d128c117 	ldw	r4,-23804(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18bac:	d168b907 	ldb	r5,-23836(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18bb0:	d128c615 	stw	r4,-23784(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18bb4:	d168b945 	stb	r5,-23835(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18bb8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18bbc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18bc0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18bc4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18bc8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18bcc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18bd0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18bd4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18bd8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18bdc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18be0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18be4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18be8:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18bec:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18bf0:	f800283a 	ret

00018bf4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18bf4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18bf8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18bfc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18c00:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c04:	0018dd40 	call	18dd4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18c08:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18c0c:	d4a8b745 	stb	r18,-23843(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18c10:	003fe506 	br	18ba8 <__alt_mem_Flash_flash_data+0xf4018ba8>

00018c14 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18c14:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18c18:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18c1c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18c20:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18c24:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18c28:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18c2c:	dec00204 	addi	sp,sp,8

      callr r2
   18c30:	103ee83a 	callr	r2

      nop
   18c34:	0001883a 	nop

00018c38 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18c38:	defff704 	addi	sp,sp,-36
   18c3c:	dfc00815 	stw	ra,32(sp)
   18c40:	df000715 	stw	fp,28(sp)
   18c44:	df000704 	addi	fp,sp,28
   18c48:	e13ffc15 	stw	r4,-16(fp)
   18c4c:	e17ffd15 	stw	r5,-12(fp)
   18c50:	e1bffe15 	stw	r6,-8(fp)
   18c54:	3805883a 	mov	r2,r7
   18c58:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18c5c:	e0fffe17 	ldw	r3,-8(fp)
   18c60:	00bfff04 	movi	r2,-4
   18c64:	1884703a 	and	r2,r3,r2
   18c68:	10bef704 	addi	r2,r2,-1060
   18c6c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18c70:	e13ff917 	ldw	r4,-28(fp)
   18c74:	000b883a 	mov	r5,zero
   18c78:	01810904 	movi	r6,1060
   18c7c:	0005ae40 	call	5ae4 <memset>
   18c80:	e0bff917 	ldw	r2,-28(fp)
   18c84:	10c0bb04 	addi	r3,r2,748
   18c88:	e0bff917 	ldw	r2,-28(fp)
   18c8c:	10c00115 	stw	r3,4(r2)
   18c90:	e0bff917 	ldw	r2,-28(fp)
   18c94:	10c0d504 	addi	r3,r2,852
   18c98:	e0bff917 	ldw	r2,-28(fp)
   18c9c:	10c00215 	stw	r3,8(r2)
   18ca0:	e0bff917 	ldw	r2,-28(fp)
   18ca4:	10c0ef04 	addi	r3,r2,956
   18ca8:	e0bff917 	ldw	r2,-28(fp)
   18cac:	10c00315 	stw	r3,12(r2)
   18cb0:	e0fff917 	ldw	r3,-28(fp)
   18cb4:	008000b4 	movhi	r2,2
   18cb8:	10a78f04 	addi	r2,r2,-25028
   18cbc:	18800d15 	stw	r2,52(r3)
   18cc0:	e0bff917 	ldw	r2,-28(fp)
   18cc4:	00c00044 	movi	r3,1
   18cc8:	10c02915 	stw	r3,164(r2)
   18ccc:	10002a15 	stw	zero,168(r2)
   18cd0:	e0bff917 	ldw	r2,-28(fp)
   18cd4:	00ccc384 	movi	r3,13070
   18cd8:	10c02b0d 	sth	r3,172(r2)
   18cdc:	e0bff917 	ldw	r2,-28(fp)
   18ce0:	00eaf344 	movi	r3,-21555
   18ce4:	10c02b8d 	sth	r3,174(r2)
   18ce8:	e0bff917 	ldw	r2,-28(fp)
   18cec:	00c48d04 	movi	r3,4660
   18cf0:	10c02c0d 	sth	r3,176(r2)
   18cf4:	e0bff917 	ldw	r2,-28(fp)
   18cf8:	00f99b44 	movi	r3,-6547
   18cfc:	10c02c8d 	sth	r3,178(r2)
   18d00:	e0bff917 	ldw	r2,-28(fp)
   18d04:	00f7bb04 	movi	r3,-8468
   18d08:	10c02d0d 	sth	r3,180(r2)
   18d0c:	e0bff917 	ldw	r2,-28(fp)
   18d10:	00c00144 	movi	r3,5
   18d14:	10c02d8d 	sth	r3,182(r2)
   18d18:	e0bff917 	ldw	r2,-28(fp)
   18d1c:	00c002c4 	movi	r3,11
   18d20:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18d24:	e0bff917 	ldw	r2,-28(fp)
   18d28:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18d2c:	e0bffa17 	ldw	r2,-24(fp)
   18d30:	10bff304 	addi	r2,r2,-52
   18d34:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18d38:	e0bffb17 	ldw	r2,-20(fp)
   18d3c:	10800c04 	addi	r2,r2,48
   18d40:	e0fffc17 	ldw	r3,-16(fp)
   18d44:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18d48:	e0bffb17 	ldw	r2,-20(fp)
   18d4c:	10800b04 	addi	r2,r2,44
   18d50:	e0fffd17 	ldw	r3,-12(fp)
   18d54:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18d58:	e0bffb17 	ldw	r2,-20(fp)
   18d5c:	10800a04 	addi	r2,r2,40
   18d60:	e0fff917 	ldw	r3,-28(fp)
   18d64:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   18d68:	008000b4 	movhi	r2,2
   18d6c:	10a30504 	addi	r2,r2,-29676
   18d70:	10c00104 	addi	r3,r2,4
   18d74:	e0bffb17 	ldw	r2,-20(fp)
   18d78:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   18d7c:	e0bffb17 	ldw	r2,-20(fp)
}
   18d80:	e037883a 	mov	sp,fp
   18d84:	dfc00117 	ldw	ra,4(sp)
   18d88:	df000017 	ldw	fp,0(sp)
   18d8c:	dec00204 	addi	sp,sp,8
   18d90:	f800283a 	ret

00018d94 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   18d94:	defffe04 	addi	sp,sp,-8
   18d98:	df000115 	stw	fp,4(sp)
   18d9c:	df000104 	addi	fp,sp,4
   18da0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   18da4:	e037883a 	mov	sp,fp
   18da8:	df000017 	ldw	fp,0(sp)
   18dac:	dec00104 	addi	sp,sp,4
   18db0:	f800283a 	ret

00018db4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   18db4:	defffe04 	addi	sp,sp,-8
   18db8:	df000115 	stw	fp,4(sp)
   18dbc:	df000104 	addi	fp,sp,4
   18dc0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18dc4:	e037883a 	mov	sp,fp
   18dc8:	df000017 	ldw	fp,0(sp)
   18dcc:	dec00104 	addi	sp,sp,4
   18dd0:	f800283a 	ret

00018dd4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18dd4:	deffff04 	addi	sp,sp,-4
   18dd8:	df000015 	stw	fp,0(sp)
   18ddc:	d839883a 	mov	fp,sp
}
   18de0:	e037883a 	mov	sp,fp
   18de4:	df000017 	ldw	fp,0(sp)
   18de8:	dec00104 	addi	sp,sp,4
   18dec:	f800283a 	ret

00018df0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   18df0:	deffff04 	addi	sp,sp,-4
   18df4:	df000015 	stw	fp,0(sp)
   18df8:	d839883a 	mov	fp,sp
}
   18dfc:	e037883a 	mov	sp,fp
   18e00:	df000017 	ldw	fp,0(sp)
   18e04:	dec00104 	addi	sp,sp,4
   18e08:	f800283a 	ret

00018e0c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18e0c:	deffff04 	addi	sp,sp,-4
   18e10:	df000015 	stw	fp,0(sp)
   18e14:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18e18:	e037883a 	mov	sp,fp
   18e1c:	df000017 	ldw	fp,0(sp)
   18e20:	dec00104 	addi	sp,sp,4
   18e24:	f800283a 	ret

00018e28 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18e28:	deffff04 	addi	sp,sp,-4
   18e2c:	df000015 	stw	fp,0(sp)
   18e30:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18e34:	e037883a 	mov	sp,fp
   18e38:	df000017 	ldw	fp,0(sp)
   18e3c:	dec00104 	addi	sp,sp,4
   18e40:	f800283a 	ret

00018e44 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18e44:	deffff04 	addi	sp,sp,-4
   18e48:	df000015 	stw	fp,0(sp)
   18e4c:	d839883a 	mov	fp,sp
}
   18e50:	e037883a 	mov	sp,fp
   18e54:	df000017 	ldw	fp,0(sp)
   18e58:	dec00104 	addi	sp,sp,4
   18e5c:	f800283a 	ret

00018e60 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   18e60:	deffff04 	addi	sp,sp,-4
   18e64:	df000015 	stw	fp,0(sp)
   18e68:	d839883a 	mov	fp,sp
}
   18e6c:	e037883a 	mov	sp,fp
   18e70:	df000017 	ldw	fp,0(sp)
   18e74:	dec00104 	addi	sp,sp,4
   18e78:	f800283a 	ret

00018e7c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   18e7c:	defffe04 	addi	sp,sp,-8
   18e80:	df000115 	stw	fp,4(sp)
   18e84:	df000104 	addi	fp,sp,4
   18e88:	e13fff15 	stw	r4,-4(fp)
}
   18e8c:	e037883a 	mov	sp,fp
   18e90:	df000017 	ldw	fp,0(sp)
   18e94:	dec00104 	addi	sp,sp,4
   18e98:	f800283a 	ret

00018e9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18e9c:	defffb04 	addi	sp,sp,-20
   18ea0:	dfc00415 	stw	ra,16(sp)
   18ea4:	df000315 	stw	fp,12(sp)
   18ea8:	df000304 	addi	fp,sp,12
   18eac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18eb0:	008000b4 	movhi	r2,2
   18eb4:	10afda04 	addi	r2,r2,-16536
   18eb8:	10800017 	ldw	r2,0(r2)
   18ebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18ec0:	00003106 	br	18f88 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   18ec4:	e0bffd17 	ldw	r2,-12(fp)
   18ec8:	10800217 	ldw	r2,8(r2)
   18ecc:	1009883a 	mov	r4,r2
   18ed0:	00007700 	call	770 <strlen>
   18ed4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18ed8:	e0bffd17 	ldw	r2,-12(fp)
   18edc:	10c00217 	ldw	r3,8(r2)
   18ee0:	e0bffe17 	ldw	r2,-8(fp)
   18ee4:	10bfffc4 	addi	r2,r2,-1
   18ee8:	1885883a 	add	r2,r3,r2
   18eec:	10800003 	ldbu	r2,0(r2)
   18ef0:	10803fcc 	andi	r2,r2,255
   18ef4:	1080201c 	xori	r2,r2,128
   18ef8:	10bfe004 	addi	r2,r2,-128
   18efc:	10800bd8 	cmpnei	r2,r2,47
   18f00:	1000031e 	bne	r2,zero,18f10 <alt_find_file+0x74>
    {
      len -= 1;
   18f04:	e0bffe17 	ldw	r2,-8(fp)
   18f08:	10bfffc4 	addi	r2,r2,-1
   18f0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18f10:	e0bffe17 	ldw	r2,-8(fp)
   18f14:	e0ffff17 	ldw	r3,-4(fp)
   18f18:	1885883a 	add	r2,r3,r2
   18f1c:	10800003 	ldbu	r2,0(r2)
   18f20:	10803fcc 	andi	r2,r2,255
   18f24:	1080201c 	xori	r2,r2,128
   18f28:	10bfe004 	addi	r2,r2,-128
   18f2c:	10800be0 	cmpeqi	r2,r2,47
   18f30:	1000081e 	bne	r2,zero,18f54 <alt_find_file+0xb8>
   18f34:	e0bffe17 	ldw	r2,-8(fp)
   18f38:	e0ffff17 	ldw	r3,-4(fp)
   18f3c:	1885883a 	add	r2,r3,r2
   18f40:	10800003 	ldbu	r2,0(r2)
   18f44:	10803fcc 	andi	r2,r2,255
   18f48:	1080201c 	xori	r2,r2,128
   18f4c:	10bfe004 	addi	r2,r2,-128
   18f50:	10000a1e 	bne	r2,zero,18f7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   18f54:	e0bffd17 	ldw	r2,-12(fp)
   18f58:	10c00217 	ldw	r3,8(r2)
   18f5c:	e0bffe17 	ldw	r2,-8(fp)
   18f60:	1809883a 	mov	r4,r3
   18f64:	e17fff17 	ldw	r5,-4(fp)
   18f68:	100d883a 	mov	r6,r2
   18f6c:	00192200 	call	19220 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18f70:	1000021e 	bne	r2,zero,18f7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18f74:	e0bffd17 	ldw	r2,-12(fp)
   18f78:	00000806 	br	18f9c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   18f7c:	e0bffd17 	ldw	r2,-12(fp)
   18f80:	10800017 	ldw	r2,0(r2)
   18f84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18f88:	e0fffd17 	ldw	r3,-12(fp)
   18f8c:	008000b4 	movhi	r2,2
   18f90:	10afda04 	addi	r2,r2,-16536
   18f94:	18bfcb1e 	bne	r3,r2,18ec4 <__alt_mem_Flash_flash_data+0xf4018ec4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18f98:	0005883a 	mov	r2,zero
}
   18f9c:	e037883a 	mov	sp,fp
   18fa0:	dfc00117 	ldw	ra,4(sp)
   18fa4:	df000017 	ldw	fp,0(sp)
   18fa8:	dec00204 	addi	sp,sp,8
   18fac:	f800283a 	ret

00018fb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   18fb0:	defff904 	addi	sp,sp,-28
   18fb4:	dfc00615 	stw	ra,24(sp)
   18fb8:	df000515 	stw	fp,20(sp)
   18fbc:	df000504 	addi	fp,sp,20
   18fc0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   18fc4:	00bffa04 	movi	r2,-24
   18fc8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   18fcc:	008000b4 	movhi	r2,2
   18fd0:	10b88104 	addi	r2,r2,-7676
   18fd4:	10800017 	ldw	r2,0(r2)
   18fd8:	e0bffd15 	stw	r2,-12(fp)
   18fdc:	e03ffe0d 	sth	zero,-8(fp)
   18fe0:	e0fffe0b 	ldhu	r3,-8(fp)
   18fe4:	e0bffe84 	addi	r2,fp,-6
   18fe8:	e13ffd17 	ldw	r4,-12(fp)
   18fec:	180b883a 	mov	r5,r3
   18ff0:	100d883a 	mov	r6,r2
   18ff4:	0012d780 	call	12d78 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18ff8:	e03ffb15 	stw	zero,-20(fp)
   18ffc:	00001d06 	br	19074 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   19000:	008000b4 	movhi	r2,2
   19004:	10a9c304 	addi	r2,r2,-22772
   19008:	e0fffb17 	ldw	r3,-20(fp)
   1900c:	18c00324 	muli	r3,r3,12
   19010:	10c5883a 	add	r2,r2,r3
   19014:	10800017 	ldw	r2,0(r2)
   19018:	1000131e 	bne	r2,zero,19068 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1901c:	008000b4 	movhi	r2,2
   19020:	10a9c304 	addi	r2,r2,-22772
   19024:	e0fffb17 	ldw	r3,-20(fp)
   19028:	18c00324 	muli	r3,r3,12
   1902c:	10c5883a 	add	r2,r2,r3
   19030:	e0ffff17 	ldw	r3,-4(fp)
   19034:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   19038:	008000b4 	movhi	r2,2
   1903c:	10afde04 	addi	r2,r2,-16520
   19040:	10c00017 	ldw	r3,0(r2)
   19044:	e0bffb17 	ldw	r2,-20(fp)
   19048:	1880040e 	bge	r3,r2,1905c <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1904c:	008000b4 	movhi	r2,2
   19050:	10afde04 	addi	r2,r2,-16520
   19054:	e0fffb17 	ldw	r3,-20(fp)
   19058:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1905c:	e0bffb17 	ldw	r2,-20(fp)
   19060:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19064:	00000606 	br	19080 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19068:	e0bffb17 	ldw	r2,-20(fp)
   1906c:	10800044 	addi	r2,r2,1
   19070:	e0bffb15 	stw	r2,-20(fp)
   19074:	e0bffb17 	ldw	r2,-20(fp)
   19078:	10800810 	cmplti	r2,r2,32
   1907c:	103fe01e 	bne	r2,zero,19000 <__alt_mem_Flash_flash_data+0xf4019000>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   19080:	008000b4 	movhi	r2,2
   19084:	10b88104 	addi	r2,r2,-7676
   19088:	10800017 	ldw	r2,0(r2)
   1908c:	1009883a 	mov	r4,r2
   19090:	001314c0 	call	1314c <OSSemPost>

  return rc;
   19094:	e0bffc17 	ldw	r2,-16(fp)
}
   19098:	e037883a 	mov	sp,fp
   1909c:	dfc00117 	ldw	ra,4(sp)
   190a0:	df000017 	ldw	fp,0(sp)
   190a4:	dec00204 	addi	sp,sp,8
   190a8:	f800283a 	ret

000190ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   190ac:	defffb04 	addi	sp,sp,-20
   190b0:	df000415 	stw	fp,16(sp)
   190b4:	df000404 	addi	fp,sp,16
   190b8:	e13ffe15 	stw	r4,-8(fp)
   190bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   190c0:	e0bfff17 	ldw	r2,-4(fp)
   190c4:	10840070 	cmpltui	r2,r2,4097
   190c8:	1000021e 	bne	r2,zero,190d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   190cc:	00840004 	movi	r2,4096
   190d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   190d4:	e0fffe17 	ldw	r3,-8(fp)
   190d8:	e0bfff17 	ldw	r2,-4(fp)
   190dc:	1885883a 	add	r2,r3,r2
   190e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   190e4:	e0bffe17 	ldw	r2,-8(fp)
   190e8:	e0bffc15 	stw	r2,-16(fp)
   190ec:	00000506 	br	19104 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   190f0:	e0bffc17 	ldw	r2,-16(fp)
   190f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   190f8:	e0bffc17 	ldw	r2,-16(fp)
   190fc:	10800804 	addi	r2,r2,32
   19100:	e0bffc15 	stw	r2,-16(fp)
   19104:	e0fffc17 	ldw	r3,-16(fp)
   19108:	e0bffd17 	ldw	r2,-12(fp)
   1910c:	18bff836 	bltu	r3,r2,190f0 <__alt_mem_Flash_flash_data+0xf40190f0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   19110:	e0bffe17 	ldw	r2,-8(fp)
   19114:	108007cc 	andi	r2,r2,31
   19118:	10000226 	beq	r2,zero,19124 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1911c:	e0bffc17 	ldw	r2,-16(fp)
   19120:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   19124:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   19128:	e037883a 	mov	sp,fp
   1912c:	df000017 	ldw	fp,0(sp)
   19130:	dec00104 	addi	sp,sp,4
   19134:	f800283a 	ret

00019138 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19138:	defffe04 	addi	sp,sp,-8
   1913c:	df000115 	stw	fp,4(sp)
   19140:	df000104 	addi	fp,sp,4
   19144:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19148:	e0bfff17 	ldw	r2,-4(fp)
   1914c:	10bffe84 	addi	r2,r2,-6
   19150:	10c00428 	cmpgeui	r3,r2,16
   19154:	18001a1e 	bne	r3,zero,191c0 <alt_exception_cause_generated_bad_addr+0x88>
   19158:	100690ba 	slli	r3,r2,2
   1915c:	008000b4 	movhi	r2,2
   19160:	10a45c04 	addi	r2,r2,-28304
   19164:	1885883a 	add	r2,r3,r2
   19168:	10800017 	ldw	r2,0(r2)
   1916c:	1000683a 	jmp	r2
   19170:	000191b0 	cmpltui	zero,zero,1606
   19174:	000191b0 	cmpltui	zero,zero,1606
   19178:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   1917c:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   19180:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   19184:	000191b0 	cmpltui	zero,zero,1606
   19188:	000191b8 	rdprs	zero,zero,1606
   1918c:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   19190:	000191b0 	cmpltui	zero,zero,1606
   19194:	000191b0 	cmpltui	zero,zero,1606
   19198:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   1919c:	000191b0 	cmpltui	zero,zero,1606
   191a0:	000191b8 	rdprs	zero,zero,1606
   191a4:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   191a8:	000191c0 	call	191c <___vfprintf_internal_r+0x1114>
   191ac:	000191b0 	cmpltui	zero,zero,1606
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   191b0:	00800044 	movi	r2,1
   191b4:	00000306 	br	191c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   191b8:	0005883a 	mov	r2,zero
   191bc:	00000106 	br	191c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   191c0:	0005883a 	mov	r2,zero
  }
}
   191c4:	e037883a 	mov	sp,fp
   191c8:	df000017 	ldw	fp,0(sp)
   191cc:	dec00104 	addi	sp,sp,4
   191d0:	f800283a 	ret

000191d4 <atexit>:
   191d4:	200b883a 	mov	r5,r4
   191d8:	000d883a 	mov	r6,zero
   191dc:	0009883a 	mov	r4,zero
   191e0:	000f883a 	mov	r7,zero
   191e4:	001932c1 	jmpi	1932c <__register_exitproc>

000191e8 <exit>:
   191e8:	defffe04 	addi	sp,sp,-8
   191ec:	000b883a 	mov	r5,zero
   191f0:	dc000015 	stw	r16,0(sp)
   191f4:	dfc00115 	stw	ra,4(sp)
   191f8:	2021883a 	mov	r16,r4
   191fc:	00194400 	call	19440 <__call_exitprocs>
   19200:	008000b4 	movhi	r2,2
   19204:	10afd404 	addi	r2,r2,-16560
   19208:	11000017 	ldw	r4,0(r2)
   1920c:	20800f17 	ldw	r2,60(r4)
   19210:	10000126 	beq	r2,zero,19218 <exit+0x30>
   19214:	103ee83a 	callr	r2
   19218:	8009883a 	mov	r4,r16
   1921c:	00195d40 	call	195d4 <_exit>

00019220 <memcmp>:
   19220:	01c000c4 	movi	r7,3
   19224:	3980192e 	bgeu	r7,r6,1928c <memcmp+0x6c>
   19228:	2144b03a 	or	r2,r4,r5
   1922c:	11c4703a 	and	r2,r2,r7
   19230:	10000f26 	beq	r2,zero,19270 <memcmp+0x50>
   19234:	20800003 	ldbu	r2,0(r4)
   19238:	28c00003 	ldbu	r3,0(r5)
   1923c:	10c0151e 	bne	r2,r3,19294 <memcmp+0x74>
   19240:	31bfff84 	addi	r6,r6,-2
   19244:	01ffffc4 	movi	r7,-1
   19248:	00000406 	br	1925c <memcmp+0x3c>
   1924c:	20800003 	ldbu	r2,0(r4)
   19250:	28c00003 	ldbu	r3,0(r5)
   19254:	31bfffc4 	addi	r6,r6,-1
   19258:	10c00e1e 	bne	r2,r3,19294 <memcmp+0x74>
   1925c:	21000044 	addi	r4,r4,1
   19260:	29400044 	addi	r5,r5,1
   19264:	31fff91e 	bne	r6,r7,1924c <__alt_mem_Flash_flash_data+0xf401924c>
   19268:	0005883a 	mov	r2,zero
   1926c:	f800283a 	ret
   19270:	20c00017 	ldw	r3,0(r4)
   19274:	28800017 	ldw	r2,0(r5)
   19278:	1880041e 	bne	r3,r2,1928c <memcmp+0x6c>
   1927c:	31bfff04 	addi	r6,r6,-4
   19280:	21000104 	addi	r4,r4,4
   19284:	29400104 	addi	r5,r5,4
   19288:	39bff936 	bltu	r7,r6,19270 <__alt_mem_Flash_flash_data+0xf4019270>
   1928c:	303fe91e 	bne	r6,zero,19234 <__alt_mem_Flash_flash_data+0xf4019234>
   19290:	003ff506 	br	19268 <__alt_mem_Flash_flash_data+0xf4019268>
   19294:	10c5c83a 	sub	r2,r2,r3
   19298:	f800283a 	ret

0001929c <strcpy>:
   1929c:	2906b03a 	or	r3,r5,r4
   192a0:	18c000cc 	andi	r3,r3,3
   192a4:	2005883a 	mov	r2,r4
   192a8:	1800161e 	bne	r3,zero,19304 <strcpy+0x68>
   192ac:	29c00017 	ldw	r7,0(r5)
   192b0:	02ffbff4 	movhi	r11,65279
   192b4:	5affbfc4 	addi	r11,r11,-257
   192b8:	02a02074 	movhi	r10,32897
   192bc:	01c8303a 	nor	r4,zero,r7
   192c0:	3ac7883a 	add	r3,r7,r11
   192c4:	52a02004 	addi	r10,r10,-32640
   192c8:	20c6703a 	and	r3,r4,r3
   192cc:	1a86703a 	and	r3,r3,r10
   192d0:	18000c1e 	bne	r3,zero,19304 <strcpy+0x68>
   192d4:	1011883a 	mov	r8,r2
   192d8:	41c00015 	stw	r7,0(r8)
   192dc:	29400104 	addi	r5,r5,4
   192e0:	29c00017 	ldw	r7,0(r5)
   192e4:	41800104 	addi	r6,r8,4
   192e8:	3011883a 	mov	r8,r6
   192ec:	01d2303a 	nor	r9,zero,r7
   192f0:	3ac7883a 	add	r3,r7,r11
   192f4:	48c6703a 	and	r3,r9,r3
   192f8:	1a86703a 	and	r3,r3,r10
   192fc:	183ff626 	beq	r3,zero,192d8 <__alt_mem_Flash_flash_data+0xf40192d8>
   19300:	00000106 	br	19308 <strcpy+0x6c>
   19304:	100d883a 	mov	r6,r2
   19308:	28c00003 	ldbu	r3,0(r5)
   1930c:	31800044 	addi	r6,r6,1
   19310:	29400044 	addi	r5,r5,1
   19314:	30ffffc5 	stb	r3,-1(r6)
   19318:	18c03fcc 	andi	r3,r3,255
   1931c:	18c0201c 	xori	r3,r3,128
   19320:	18ffe004 	addi	r3,r3,-128
   19324:	183ff81e 	bne	r3,zero,19308 <__alt_mem_Flash_flash_data+0xf4019308>
   19328:	f800283a 	ret

0001932c <__register_exitproc>:
   1932c:	008000b4 	movhi	r2,2
   19330:	defffa04 	addi	sp,sp,-24
   19334:	10afd404 	addi	r2,r2,-16560
   19338:	dc000315 	stw	r16,12(sp)
   1933c:	14000017 	ldw	r16,0(r2)
   19340:	dc400415 	stw	r17,16(sp)
   19344:	dfc00515 	stw	ra,20(sp)
   19348:	80805217 	ldw	r2,328(r16)
   1934c:	2023883a 	mov	r17,r4
   19350:	10003626 	beq	r2,zero,1942c <__register_exitproc+0x100>
   19354:	10c00117 	ldw	r3,4(r2)
   19358:	010007c4 	movi	r4,31
   1935c:	20c00e16 	blt	r4,r3,19398 <__register_exitproc+0x6c>
   19360:	1a400044 	addi	r9,r3,1
   19364:	8800211e 	bne	r17,zero,193ec <__register_exitproc+0xc0>
   19368:	18c00084 	addi	r3,r3,2
   1936c:	18c7883a 	add	r3,r3,r3
   19370:	18c7883a 	add	r3,r3,r3
   19374:	12400115 	stw	r9,4(r2)
   19378:	10c7883a 	add	r3,r2,r3
   1937c:	19400015 	stw	r5,0(r3)
   19380:	0005883a 	mov	r2,zero
   19384:	dfc00517 	ldw	ra,20(sp)
   19388:	dc400417 	ldw	r17,16(sp)
   1938c:	dc000317 	ldw	r16,12(sp)
   19390:	dec00604 	addi	sp,sp,24
   19394:	f800283a 	ret
   19398:	00800034 	movhi	r2,0
   1939c:	10800004 	addi	r2,r2,0
   193a0:	10002526 	beq	r2,zero,19438 <__register_exitproc+0x10c>
   193a4:	01006404 	movi	r4,400
   193a8:	d9400015 	stw	r5,0(sp)
   193ac:	d9800115 	stw	r6,4(sp)
   193b0:	d9c00215 	stw	r7,8(sp)
   193b4:	00000000 	call	0 <__alt_mem_SDRAM>
   193b8:	d9400017 	ldw	r5,0(sp)
   193bc:	d9800117 	ldw	r6,4(sp)
   193c0:	d9c00217 	ldw	r7,8(sp)
   193c4:	10001c26 	beq	r2,zero,19438 <__register_exitproc+0x10c>
   193c8:	80c05217 	ldw	r3,328(r16)
   193cc:	10000115 	stw	zero,4(r2)
   193d0:	02400044 	movi	r9,1
   193d4:	10c00015 	stw	r3,0(r2)
   193d8:	80805215 	stw	r2,328(r16)
   193dc:	10006215 	stw	zero,392(r2)
   193e0:	10006315 	stw	zero,396(r2)
   193e4:	0007883a 	mov	r3,zero
   193e8:	883fdf26 	beq	r17,zero,19368 <__alt_mem_Flash_flash_data+0xf4019368>
   193ec:	18d1883a 	add	r8,r3,r3
   193f0:	4211883a 	add	r8,r8,r8
   193f4:	1211883a 	add	r8,r2,r8
   193f8:	41802215 	stw	r6,136(r8)
   193fc:	01000044 	movi	r4,1
   19400:	11806217 	ldw	r6,392(r2)
   19404:	20c8983a 	sll	r4,r4,r3
   19408:	310cb03a 	or	r6,r6,r4
   1940c:	11806215 	stw	r6,392(r2)
   19410:	41c04215 	stw	r7,264(r8)
   19414:	01800084 	movi	r6,2
   19418:	89bfd31e 	bne	r17,r6,19368 <__alt_mem_Flash_flash_data+0xf4019368>
   1941c:	11806317 	ldw	r6,396(r2)
   19420:	3108b03a 	or	r4,r6,r4
   19424:	11006315 	stw	r4,396(r2)
   19428:	003fcf06 	br	19368 <__alt_mem_Flash_flash_data+0xf4019368>
   1942c:	80805304 	addi	r2,r16,332
   19430:	80805215 	stw	r2,328(r16)
   19434:	003fc706 	br	19354 <__alt_mem_Flash_flash_data+0xf4019354>
   19438:	00bfffc4 	movi	r2,-1
   1943c:	003fd106 	br	19384 <__alt_mem_Flash_flash_data+0xf4019384>

00019440 <__call_exitprocs>:
   19440:	008000b4 	movhi	r2,2
   19444:	10afd404 	addi	r2,r2,-16560
   19448:	10800017 	ldw	r2,0(r2)
   1944c:	defff404 	addi	sp,sp,-48
   19450:	dd800815 	stw	r22,32(sp)
   19454:	d8800015 	stw	r2,0(sp)
   19458:	10805204 	addi	r2,r2,328
   1945c:	dd000615 	stw	r20,24(sp)
   19460:	dc800415 	stw	r18,16(sp)
   19464:	dfc00b15 	stw	ra,44(sp)
   19468:	df000a15 	stw	fp,40(sp)
   1946c:	ddc00915 	stw	r23,36(sp)
   19470:	dd400715 	stw	r21,28(sp)
   19474:	dcc00515 	stw	r19,20(sp)
   19478:	dc400315 	stw	r17,12(sp)
   1947c:	dc000215 	stw	r16,8(sp)
   19480:	2025883a 	mov	r18,r4
   19484:	2829883a 	mov	r20,r5
   19488:	d8800115 	stw	r2,4(sp)
   1948c:	05bfffc4 	movi	r22,-1
   19490:	d8800017 	ldw	r2,0(sp)
   19494:	14c05217 	ldw	r19,328(r2)
   19498:	98001d26 	beq	r19,zero,19510 <__call_exitprocs+0xd0>
   1949c:	dd400117 	ldw	r21,4(sp)
   194a0:	98800117 	ldw	r2,4(r19)
   194a4:	173fffc4 	addi	fp,r2,-1
   194a8:	e0000d16 	blt	fp,zero,194e0 <__call_exitprocs+0xa0>
   194ac:	14000044 	addi	r16,r2,1
   194b0:	8421883a 	add	r16,r16,r16
   194b4:	8421883a 	add	r16,r16,r16
   194b8:	84402004 	addi	r17,r16,128
   194bc:	9c63883a 	add	r17,r19,r17
   194c0:	9c21883a 	add	r16,r19,r16
   194c4:	a0001e26 	beq	r20,zero,19540 <__call_exitprocs+0x100>
   194c8:	80804017 	ldw	r2,256(r16)
   194cc:	15001c26 	beq	r2,r20,19540 <__call_exitprocs+0x100>
   194d0:	e73fffc4 	addi	fp,fp,-1
   194d4:	843fff04 	addi	r16,r16,-4
   194d8:	8c7fff04 	addi	r17,r17,-4
   194dc:	e5bff91e 	bne	fp,r22,194c4 <__alt_mem_Flash_flash_data+0xf40194c4>
   194e0:	00800034 	movhi	r2,0
   194e4:	10800004 	addi	r2,r2,0
   194e8:	10000926 	beq	r2,zero,19510 <__call_exitprocs+0xd0>
   194ec:	98800117 	ldw	r2,4(r19)
   194f0:	1000311e 	bne	r2,zero,195b8 <__call_exitprocs+0x178>
   194f4:	98800017 	ldw	r2,0(r19)
   194f8:	10003426 	beq	r2,zero,195cc <__call_exitprocs+0x18c>
   194fc:	9809883a 	mov	r4,r19
   19500:	a8800015 	stw	r2,0(r21)
   19504:	00000000 	call	0 <__alt_mem_SDRAM>
   19508:	acc00017 	ldw	r19,0(r21)
   1950c:	983fe41e 	bne	r19,zero,194a0 <__alt_mem_Flash_flash_data+0xf40194a0>
   19510:	dfc00b17 	ldw	ra,44(sp)
   19514:	df000a17 	ldw	fp,40(sp)
   19518:	ddc00917 	ldw	r23,36(sp)
   1951c:	dd800817 	ldw	r22,32(sp)
   19520:	dd400717 	ldw	r21,28(sp)
   19524:	dd000617 	ldw	r20,24(sp)
   19528:	dcc00517 	ldw	r19,20(sp)
   1952c:	dc800417 	ldw	r18,16(sp)
   19530:	dc400317 	ldw	r17,12(sp)
   19534:	dc000217 	ldw	r16,8(sp)
   19538:	dec00c04 	addi	sp,sp,48
   1953c:	f800283a 	ret
   19540:	98800117 	ldw	r2,4(r19)
   19544:	80c00017 	ldw	r3,0(r16)
   19548:	10bfffc4 	addi	r2,r2,-1
   1954c:	17001526 	beq	r2,fp,195a4 <__call_exitprocs+0x164>
   19550:	80000015 	stw	zero,0(r16)
   19554:	183fde26 	beq	r3,zero,194d0 <__alt_mem_Flash_flash_data+0xf40194d0>
   19558:	00800044 	movi	r2,1
   1955c:	1708983a 	sll	r4,r2,fp
   19560:	98806217 	ldw	r2,392(r19)
   19564:	9dc00117 	ldw	r23,4(r19)
   19568:	2084703a 	and	r2,r4,r2
   1956c:	1000061e 	bne	r2,zero,19588 <__call_exitprocs+0x148>
   19570:	183ee83a 	callr	r3
   19574:	98800117 	ldw	r2,4(r19)
   19578:	15ffc51e 	bne	r2,r23,19490 <__alt_mem_Flash_flash_data+0xf4019490>
   1957c:	a8800017 	ldw	r2,0(r21)
   19580:	14ffd326 	beq	r2,r19,194d0 <__alt_mem_Flash_flash_data+0xf40194d0>
   19584:	003fc206 	br	19490 <__alt_mem_Flash_flash_data+0xf4019490>
   19588:	98806317 	ldw	r2,396(r19)
   1958c:	2084703a 	and	r2,r4,r2
   19590:	1000061e 	bne	r2,zero,195ac <__call_exitprocs+0x16c>
   19594:	89400017 	ldw	r5,0(r17)
   19598:	9009883a 	mov	r4,r18
   1959c:	183ee83a 	callr	r3
   195a0:	003ff406 	br	19574 <__alt_mem_Flash_flash_data+0xf4019574>
   195a4:	9f000115 	stw	fp,4(r19)
   195a8:	003fea06 	br	19554 <__alt_mem_Flash_flash_data+0xf4019554>
   195ac:	89000017 	ldw	r4,0(r17)
   195b0:	183ee83a 	callr	r3
   195b4:	003fef06 	br	19574 <__alt_mem_Flash_flash_data+0xf4019574>
   195b8:	98800017 	ldw	r2,0(r19)
   195bc:	982b883a 	mov	r21,r19
   195c0:	1027883a 	mov	r19,r2
   195c4:	983fb61e 	bne	r19,zero,194a0 <__alt_mem_Flash_flash_data+0xf40194a0>
   195c8:	003fd106 	br	19510 <__alt_mem_Flash_flash_data+0xf4019510>
   195cc:	0005883a 	mov	r2,zero
   195d0:	003ffa06 	br	195bc <__alt_mem_Flash_flash_data+0xf40195bc>

000195d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   195d4:	defffd04 	addi	sp,sp,-12
   195d8:	df000215 	stw	fp,8(sp)
   195dc:	df000204 	addi	fp,sp,8
   195e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   195e4:	008000b4 	movhi	r2,2
   195e8:	10b88944 	addi	r2,r2,-7643
   195ec:	10000005 	stb	zero,0(r2)
   195f0:	e0bfff17 	ldw	r2,-4(fp)
   195f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   195f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   195fc:	10000226 	beq	r2,zero,19608 <_exit+0x34>
    ALT_SIM_FAIL();
   19600:	002af070 	cmpltui	zero,zero,43969
   19604:	00000106 	br	1960c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   19608:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1960c:	003fff06 	br	1960c <__alt_mem_Flash_flash_data+0xf401960c>
