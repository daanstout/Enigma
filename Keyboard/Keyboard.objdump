
Keyboard.elf:     file format elf32-littlenios2
Keyboard.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001a2d4 memsz 0x0001a2d4 flags r-x
    LOAD off    0x0001b2f4 vaddr 0x0001a2f4 paddr 0x0001c4c4 align 2**12
         filesz 0x000021d0 memsz 0x000021d0 flags rw-
    LOAD off    0x0001d694 vaddr 0x0001e694 paddr 0x0001e694 align 2**12
         filesz 0x00000000 memsz 0x0000742c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019878  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000838  00019abc  00019abc  0001aabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000021d0  0001a2f4  0001c4c4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000742c  0001e694  0001e694  0001d694  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00025ac0  00025ac0  0001d4c4  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001d4c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d4c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001160  00000000  00000000  0001d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003164f  00000000  00000000  0001e648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b8db  00000000  00000000  0004fc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ee00  00000000  00000000  0005b572  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003bf4  00000000  00000000  0006a374  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000055ff  00000000  00000000  0006df68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017291  00000000  00000000  00073567  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008a7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001860  00000000  00000000  0008a818  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00091b46  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00091b4c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00091b51  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00091b52  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00091b53  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00091b57  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00091b5b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00091b5f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00091b68  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00091b71  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00091b7a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  00091b85  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  00091be3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  0009c7a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00019abc l    d  .rodata	00000000 .rodata
0001a2f4 l    d  .rwdata	00000000 .rwdata
0001e694 l    d  .bss	00000000 .bss
00025ac0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/daans/Documents/Eclipse_Projecten_Nios/Keyboard_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019b46 l     O .rodata	00000010 zeroes.4255
00002a7c l     F .text	000000bc __sbprintf
00019b56 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002c8c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004848 l     F .text	00000008 __fp_lock
00004850 l     F .text	00000008 __fp_unlock
00004864 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001a2f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001a738 l     O .rwdata	00000020 lc_ctype_charset
0001a718 l     O .rwdata	00000020 lc_message_charset
0001a758 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00019b88 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007d9c l     F .text	000000fc __sprint_r.part.0
00019cbc l     O .rodata	00000010 blanks.4199
00019cac l     O .rodata	00000010 zeroes.4200
000091a4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a6a8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cdd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cef4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cf20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d020 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d114 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d1f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d3f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001c438 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d64c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001c43c l     O .rwdata	00000004 lockid
0001e6d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001c440 l     O .rwdata	00000004 lockid
0001e6e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f080 l     F .text	00000044 OS_InitMisc
0000f0c4 l     F .text	00000068 OS_InitRdyList
0000f224 l     F .text	000000e0 OS_InitTCBList
0000efa4 l     F .text	000000dc OS_InitEventList
0000f12c l     F .text	0000007c OS_InitTaskIdle
0000f1a8 l     F .text	0000007c OS_InitTaskStat
0000f484 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011288 l     F .text	00000110 OS_FlagTaskRdy
00010fe0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015730 l     F .text	00000038 alt_dev_reg
0001ad40 l     O .rwdata	0000106c JTAG_UART
0001bdac l     O .rwdata	00000030 AV_Config
0001bddc l     O .rwdata	00000030 Audio_Subsystem_Audio
0001be0c l     O .rwdata	0000002c Char_LCD_16x2
0001be38 l     O .rwdata	0000002c IrDA
0001be64 l     O .rwdata	0000002c Expansion_JP5
0001be90 l     O .rwdata	0000002c Green_LEDs
0001bebc l     O .rwdata	0000002c HEX3_HEX0
0001bee8 l     O .rwdata	0000002c HEX7_HEX4
0001bf14 l     O .rwdata	0000002c Pushbuttons
0001bf40 l     O .rwdata	0000002c Red_LEDs
0001bf6c l     O .rwdata	0000002c Slider_Switches
0001bf98 l     O .rwdata	00000038 PS2_Port
0001bfd0 l     O .rwdata	00000038 PS2_Port_Dual
0001c008 l     O .rwdata	0000002c Serial_Port
0001c034 l     O .rwdata	00000034 USB
0001c068 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001c0b0 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001c104 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015e18 l     F .text	000002a8 altera_avalon_jtag_uart_irq
000160c0 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016898 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
0001e738 l     O .bss	00000004 state.1996
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018690 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000188fc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018be4 l     F .text	00000050 alt_get_errno
00018c34 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001e748 g     O .bss	00000004 alt_instruction_exception_handler
000008f8 g     F .text	00000018 putchar
0000734c g     F .text	00000074 _mprec_log10
0001c48e g     O .rwdata	00000002 OSTaskNameSize
00007438 g     F .text	0000008c __any_on
00009864 g     F .text	00000054 _isatty_r
00019b94 g     O .rodata	00000028 __mprec_tinytens
0000d31c g     F .text	000000d4 alt_main
00019748 g     F .text	00000090 strcpy
00000910 g     F .text	000000a8 _puts_r
000259c0 g     O .bss	00000100 alt_irq
00017474 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000098b8 g     F .text	0000005c _lseek_r
00011aec g     F .text	000000d0 OS_MemInit
0001c4c4 g       *ABS*	00000000 __flash_rwdata_start
000156cc g     F .text	00000064 OSTimeSet
00016a04 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000b93c g     F .text	00000084 .hidden __eqdf2
0000dcfc g     F .text	00000610 OSEventPendMulti
00025ac0 g       *ABS*	00000000 __alt_heap_start
00019240 g     F .text	00000020 OSTaskCreateHook
0001e774 g     O .bss	00002000 task1_stk
00000758 g     F .text	000000c4 charToBinary
000008b4 g     F .text	0000003c printf
0001c466 g     O .rwdata	00000002 OSMboxEn
0000e360 g     F .text	0000007c OSIntEnter
00009970 g     F .text	0000009c _wcrtomb_r
00007d38 g     F .text	0000005c __sseek
00004b98 g     F .text	00000010 __sinit
00017dfc g     F .text	00000100 alt_up_char_buffer_string
00009260 g     F .text	00000138 __swbuf_r
00017294 g     F .text	00000034 read_CE_bit
0001c476 g     O .rwdata	00000002 OSQEn
00005644 g     F .text	0000007c _setlocale_r
00004a00 g     F .text	00000068 __sfmoreglue
0000d9d0 g     F .text	000000d0 __malloc_unlock
0001929c g     F .text	0000001c OSTaskStatHook
00017618 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00017b0c g     F .text	00000090 alt_up_rs232_read_fd
0001e6e8 g     O .bss	00000001 OSLockNesting
0001c4b4 g     O .rwdata	00000002 OSDataSize
0001e6e9 g     O .bss	00000001 OSRunning
00017d30 g     F .text	000000cc alt_up_char_buffer_draw
000062a4 g     F .text	0000015c memmove
000192d4 g     F .text	0000001c OSInitHookBegin
0001c130 g     O .rwdata	00000198 key_table
0001e698 g     O .bss	00000004 byte1
0001c4ac g     O .rwdata	00000002 OSTmrSize
00004b80 g     F .text	00000018 _cleanup
00006524 g     F .text	000000a8 _Balloc
0001e6ec g     O .bss	00000004 OSIdleCtr
0000b9c0 g     F .text	000000e0 .hidden __gtdf2
00018ff4 g     F .text	00000020 altera_nios2_gen2_irq_init
000190c0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00016990 g     F .text	00000074 get_DDRAM_addr
0000f7bc g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001c4b2 g     O .rwdata	00000002 OSTmrWheelTblSize
00017f58 g     F .text	00000070 get_multi_byte_make_code_index
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001c452 g     O .rwdata	00000002 OSEventSize
0001e6f0 g     O .bss	00000001 OSPrioHighRdy
0000980c g     F .text	00000058 _fstat_r
00019260 g     F .text	00000020 OSTaskDelHook
0001e6c4 g     O .bss	00000004 errno
00007cb4 g     F .text	00000008 __seofread
000190a0 g       .text	00000000 OSStartHighRdy
00013fd0 g     F .text	000001ec OSTaskCreateExt
00010b2c g     F .text	00000068 OSFlagPendGetFlagsRdy
0001c492 g     O .rwdata	00000002 OSTaskStatStkSize
0000fc1c g     F .text	00000308 OSFlagAccept
000121c0 g     F .text	000000b8 OSQFlush
00018340 g     F .text	00000064 set_keyboard_rate
00011bbc g     F .text	00000140 OSQAccept
0001e6d0 g     O .bss	00000004 alt_argv
000243fc g       *ABS*	00000000 _gp
00013e14 g     F .text	000001bc OSTaskCreate
000138d4 g     F .text	00000540 OSTaskChangePrio
0001e6e4 g     O .bss	00000004 alt_heapsem
0001e69c g     O .bss	00000004 PS2_data
0000fa90 g     F .text	0000018c OSDebugInit
000141bc g     F .text	000003e0 OSTaskDel
000184b8 g     F .text	0000007c reset_keyboard
0001abc0 g     O .rwdata	00000180 alt_fd_list
0002279c g     O .bss	00000370 OSFlagTbl
000008f0 g     F .text	00000008 _putchar_r
0000ed90 g     F .text	000000b4 OS_EventTaskRemove
0001883c g     F .text	00000090 alt_find_dev
0000616c g     F .text	00000138 memcpy
0001c47c g     O .rwdata	00000002 OSRdyTblSize
00016ba0 g     F .text	00000050 alt_up_character_lcd_write_fd
00017efc g     F .text	0000005c alt_up_char_buffer_clear
00004858 g     F .text	0000000c _cleanup_r
0000cbfc g     F .text	000000d0 .hidden __floatsidf
000189bc g     F .text	00000078 alt_io_redirect
0000baa0 g     F .text	000000e0 .hidden __ltdf2
00019abc g       *ABS*	00000000 __DTOR_END__
00017120 g     F .text	00000090 alt_up_irda_write_fd
00017a98 g     F .text	00000074 alt_up_rs232_read_data
000009b8 g     F .text	00000014 puts
000195e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000daa0 g     F .text	00000120 OSEventNameGet
0001c460 g     O .rwdata	00000002 OSFlagMax
00007b98 g     F .text	00000074 __fpclassifyd
000072a8 g     F .text	000000a4 __ratio
0000e3dc g     F .text	000000f4 OSIntExit
00009180 g     F .text	00000024 __vfiprintf_internal
0001c49a g     O .rwdata	00000002 OSTCBSize
0001e6f1 g     O .bss	00000001 OSPrioCur
00016f1c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016324 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000888 g     F .text	0000002c _printf_r
0000a7c4 g     F .text	00000008 .hidden __udivsi3
0000d070 g     F .text	000000a4 isatty
0001c480 g     O .rwdata	00000002 OSStkWidth
00019be4 g     O .rodata	000000c8 __mprec_tens
0001c474 g     O .rwdata	00000002 OSPtrSize
000056c0 g     F .text	0000000c __locale_charset
0001c454 g     O .rwdata	00000002 OSEventTblSize
00016ec0 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00019014 g       .text	00000000 OSCtxSw
00019558 g     F .text	0000008c alt_icache_flush
0001e6c0 g     O .bss	00000004 __malloc_top_pad
0001e6f4 g     O .bss	00000004 OSTCBList
0001e6a0 g     O .bss	00000004 gpio_dev
0001e6c8 g     O .bss	00000004 alt_fd_list_lock
0001c410 g     O .rwdata	00000004 __mb_cur_max
000056f0 g     F .text	0000000c _localeconv_r
00006930 g     F .text	0000003c __i2b
00004ffc g     F .text	000004c0 __sfvwrite_r
00022b0c g     O .bss	00000c30 OSMemTbl
0001e6f8 g     O .bss	00000001 OSTickStepState
00007c0c g     F .text	00000054 _sbrk_r
0001c478 g     O .rwdata	00000002 OSQMax
0002373c g     O .bss	00000800 OSTaskStatStk
0001171c g     F .text	000000f8 OSMemNameGet
0001c458 g     O .rwdata	00000002 OSFlagEn
00009914 g     F .text	0000005c _read_r
0001c49e g     O .rwdata	00000002 OSTimeTickHookEn
000126e0 g     F .text	00000168 OSQPost
00011398 g     F .text	000000a0 OS_FlagUnlink
0001c430 g     O .rwdata	00000004 alt_max_fd
00017a14 g     F .text	00000044 alt_up_rs232_check_parity
0000f354 g     F .text	00000064 OS_MemCopy
0000f3b8 g     F .text	000000cc OS_Sched
00009528 g     F .text	000000f0 _fclose_r
0001162c g     F .text	000000f0 OSMemGet
0001489c g     F .text	000001c0 OSTaskNameSet
000172c8 g     F .text	00000030 read_num_bytes_available
00004818 g     F .text	00000030 fflush
0001c2c8 g     O .rwdata	00000066 ascii_codes
0001e6bc g     O .bss	00000004 __malloc_max_sbrked_mem
0001e6fc g     O .bss	00000004 OSCtxSwCtr
000192b8 g     F .text	0000001c OSTimeTickHook
00018a34 g     F .text	000001b0 alt_irq_register
0001c400 g     O .rwdata	00000004 JP5_ptr
0001c462 g     O .rwdata	00000002 OSFlagNameSize
00017230 g     F .text	00000034 read_RI_bit
0000ee44 g     F .text	000000fc OS_EventTaskRemoveMulti
0000a7d4 g     F .text	0000089c .hidden __adddf3
0000ec44 g     F .text	0000014c OS_EventTaskWaitMulti
00007050 g     F .text	0000011c __b2d
0001c47a g     O .rwdata	00000002 OSQSize
0000a118 g     F .text	00000590 .hidden __umoddi3
0000d248 g     F .text	000000d4 lseek
000131e4 g     F .text	00000268 OSSemPend
0001c408 g     O .rwdata	00000004 _global_impure_ptr
00007630 g     F .text	00000568 _realloc_r
0001c464 g     O .rwdata	00000002 OSLowestPrio
00025ac0 g       *ABS*	00000000 __bss_end
00019328 g     F .text	00000020 OSTCBInitHook
0001e6a4 g     O .bss	00000001 letter
0001c4aa g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018ef0 g     F .text	00000104 alt_tick
00009b58 g     F .text	000005c0 .hidden __udivdi3
0000962c g     F .text	00000184 _fputwc_r
0001c44c g     O .rwdata	00000002 OSEventEn
00019bbc g     O .rodata	00000028 __mprec_bigtens
00006714 g     F .text	00000104 __s2b
0001c4a6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000cccc g     F .text	000000a4 .hidden __floatunsidf
00006df8 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001732c g     F .text	0000002c read_data_byte
00004bb8 g     F .text	00000018 __fp_lock_all
000111a4 g     F .text	000000e4 OS_FlagInit
00018e58 g     F .text	00000098 alt_alarm_stop
00017264 g     F .text	00000030 read_RE_bit
0001c488 g     O .rwdata	00000002 OSTaskIdleStkSize
0001e73c g     O .bss	00000004 alt_irq_active
00012dcc g     F .text	000000b0 OSSemAccept
000004cc g     F .text	0000007c VGA_text
0001192c g     F .text	000000d8 OSMemPut
00011438 g     F .text	000001f4 OSMemCreate
0001e700 g     O .bss	00000004 OSIdleCtrMax
00016f5c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001ab98 g     O .rwdata	00000028 alt_dev_null
0001c49c g     O .rwdata	00000002 OSTicksPerSec
0001c404 g     O .rwdata	00000004 character_buffer
00016e34 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000171f0 g     F .text	00000040 alt_up_parallel_port_open_dev
00019014 g       .text	00000000 OSIntCtxSw
000174d0 g     F .text	00000074 alt_up_ps2_write_data_byte
00018674 g     F .text	0000001c alt_dcache_flush_all
00006818 g     F .text	00000068 __hi0bits
0000cb74 g     F .text	00000088 .hidden __fixdfsi
0001e704 g     O .bss	00000004 OSTCBFreeList
0001c4c4 g       *ABS*	00000000 __ram_rwdata_end
0001344c g     F .text	0000016c OSSemPendAbort
0001c394 g     O .rwdata	00000066 multi_byte_make_code
0001c428 g     O .rwdata	00000008 alt_dev_list
0000d69c g     F .text	000000f8 write
000074c4 g     F .text	000000a0 _putc_r
0001c4a0 g     O .rwdata	00000002 OSVersionNbr
0001a2f4 g       *ABS*	00000000 __ram_rodata_end
0000cf70 g     F .text	000000b0 fstat
00017b9c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000baa0 g     F .text	000000e0 .hidden __ledf2
0001c448 g     O .rwdata	00000004 OSEndiannessTest
0000081c g     F .text	0000006c binaryToChar
00006b68 g     F .text	00000140 __pow5mult
00007eb0 g     F .text	000012d0 ___vfiprintf_internal_r
0001e6b4 g     O .bss	00000004 __nlocale_changed
0000a7cc g     F .text	00000008 .hidden __umodsi3
0001c45a g     O .rwdata	00000002 OSFlagGrpSize
00025ac0 g       *ABS*	00000000 end
0001780c g     F .text	00000098 alt_up_ps2_write_fd
00016f98 g     F .text	00000044 alt_up_irda_check_parity
00017c70 g     F .text	00000080 alt_up_char_buffer_init
00015cd8 g     F .text	00000140 altera_avalon_jtag_uart_init
0000f618 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00019abc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00016910 g     F .text	00000080 alt_avalon_timer_sc_init
0000cd70 g     F .text	00000064 .hidden __clzsi2
000165d8 g     F .text	000002c0 altera_avalon_jtag_uart_write
00004ba8 g     F .text	00000004 __sfp_lock_acquire
00006084 g     F .text	000000e8 memchr
0000f304 g     F .text	00000050 OS_MemClr
00016ab4 g     F .text	00000078 alt_up_character_lcd_write
00000b08 g     F .text	00001f50 ___vfprintf_internal_r
000190e4 g     F .text	0000015c OSTaskStkInit
00000280 g     F .text	000000ec task1
00004d0c g     F .text	000002f0 _free_r
000056cc g     F .text	00000010 __locale_mb_cur_max
0000e9a0 g     F .text	00000198 OS_EventTaskRdy
000198ec g     F .text	00000194 __call_exitprocs
0001e708 g     O .bss	00000001 OSCPUUsage
000183a4 g     F .text	00000114 translate_make_code
0001e6b0 g     O .bss	00000004 __mlocale_changed
0001c414 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001e740 g     O .bss	00000004 _alt_tick_rate
00012278 g     F .text	000002fc OSQPend
000151c8 g     F .text	00000148 OSTimeDly
00006ca8 g     F .text	00000150 __lshift
0001e744 g     O .bss	00000004 _alt_nticks
0000d440 g     F .text	000000fc read
0001579c g     F .text	000003d8 alt_sys_init
00016cec g     F .text	00000088 alt_up_character_lcd_shift_display
000197d8 g     F .text	00000114 __register_exitproc
0001e709 g     O .bss	00000001 OSTaskCtr
0001772c g     F .text	00000054 alt_up_ps2_clear_fifo
000179d8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000418 g     F .text	000000b4 VGA_box
00015310 g     F .text	00000168 OSTimeDlyHMSM
0000696c g     F .text	000001fc __multiply
00016d74 g     F .text	0000008c alt_up_character_lcd_erase_pos
000161d0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001a2f4 g       *ABS*	00000000 __ram_rwdata_start
00019abc g       *ABS*	00000000 __ram_rodata_start
0001e74c g     O .bss	00000028 __malloc_current_mallinfo
0001c44e g     O .rwdata	00000002 OSEventMax
0000716c g     F .text	0000013c __d2b
000135b8 g     F .text	00000110 OSSemPost
0000e558 g     F .text	000000d8 OSSchedUnlock
00015b74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001945c g     F .text	000000fc alt_get_fd
0001e70c g     O .bss	00000004 OSMemFreeList
0000e69c g     F .text	000000ac OSStatInit
00010f1c g     F .text	000000c4 OSFlagQuery
0001c484 g     O .rwdata	00000002 OSTaskCreateExtEn
00009410 g     F .text	00000054 _close_r
00018288 g     F .text	000000b8 decode_scancode
000196cc g     F .text	0000007c memcmp
0000e984 g     F .text	0000001c OS_Dummy
00015c34 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00025ac0 g       *ABS*	00000000 __alt_stack_base
00015c84 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00016e68 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00002b38 g     F .text	00000154 __swsetup_r
00023f3c g     O .bss	000001e0 OSQTbl
0000b070 g     F .text	000008cc .hidden __divdf3
00004a68 g     F .text	00000118 __sfp
000073c0 g     F .text	00000078 __copybits
0001a790 g     O .rwdata	00000408 __malloc_av_
00004bb4 g     F .text	00000004 __sinit_lock_release
0001e710 g     O .bss	00000004 OSTCBHighRdy
0000bb80 g     F .text	00000724 .hidden __muldf3
00007c60 g     F .text	00000054 __sread
0001e714 g     O .bss	00000004 OSQFreeList
0001793c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00019348 g     F .text	00000114 alt_find_file
000186e0 g     F .text	000000a4 alt_dev_llist_insert
0000d8b0 g     F .text	00000120 __malloc_lock
0000d59c g     F .text	000000b0 sbrk
0000dbc0 g     F .text	0000013c OSEventNameSet
000047bc g     F .text	0000005c _fflush_r
00009464 g     F .text	000000c4 _calloc_r
0001e718 g     O .bss	00000001 OSRdyGrp
00000548 g     F .text	00000048 PS2
0001e694 g       *ABS*	00000000 __bss_start
00006400 g     F .text	00000124 memset
0000036c g     F .text	000000ac main
00017fc8 g     F .text	00000070 get_single_byte_make_code_index
0001e6d4 g     O .bss	00000004 alt_envp
0001e6b8 g     O .bss	00000004 __malloc_max_total_mem
00017cf0 g     F .text	00000040 alt_up_char_buffer_open_dev
00015bd4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009398 g     F .text	0000001c __swbuf
00019de8 g     O .rodata	00000100 OSUnMapTbl
0001c47e g     O .rwdata	00000002 OSSemEn
00016c64 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00010b94 g     F .text	00000388 OSFlagPost
00007d94 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009618 g     F .text	00000014 fclose
0000eb38 g     F .text	0000010c OS_EventTaskWait
00020774 g     O .bss	00002000 task2_stk
000176bc g     F .text	00000070 alt_up_ps2_read_data_byte
0000f6f4 g     F .text	000000c8 OS_TaskStatStkChk
0001459c g     F .text	00000158 OSTaskDelReq
00002e8c g     F .text	00001728 _dtoa_r
000058dc g     F .text	000007a8 _malloc_r
00009acc g     F .text	00000030 __ascii_wctomb
0001c434 g     O .rwdata	00000004 alt_errno
0000e630 g     F .text	0000006c OSStart
0000d854 g     F .text	0000005c __env_unlock
000054bc g     F .text	000000c4 _fwalk
00014a5c g     F .text	000001f8 OSTaskResume
00011a04 g     F .text	000000e8 OSMemQuery
0001c490 g     O .rwdata	00000002 OSTaskStatEn
00016fdc g     F .text	00000040 alt_up_irda_write_data
0001c46a g     O .rwdata	00000002 OSMemMax
00012848 g     F .text	00000170 OSQPostFront
000178a4 g     F .text	00000040 alt_up_ps2_open_dev
00007564 g     F .text	000000cc putc
0000a714 g     F .text	00000054 .hidden __divsi3
00000590 g     F .text	00000124 getKey
0001e719 g     O .bss	00000003 OSRdyTbl
0001c444 g     O .rwdata	00000002 OSDebugEn
00016a74 g     F .text	00000040 alt_up_character_lcd_open_dev
00004be8 g     F .text	00000124 _malloc_trim_r
0001741c g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00019abc g       *ABS*	00000000 __CTOR_END__
0001c45c g     O .rwdata	00000002 OSFlagNodeSize
0001c4a4 g     O .rwdata	00000002 OSTmrCfgMax
00016a40 g     F .text	00000034 alt_up_character_lcd_init
000009cc g     F .text	000000a4 strcmp
00011cfc g     F .text	000001fc OSQCreate
000146f4 g     F .text	000001a8 OSTaskNameGet
00019abc g       *ABS*	00000000 __flash_rodata_start
000129b8 g     F .text	0000020c OSQPostOpt
0000e748 g     F .text	0000021c OSTimeTick
0001c48c g     O .rwdata	00000002 OSTaskMax
00019abc g       *ABS*	00000000 __DTOR_LIST__
00012e7c g     F .text	00000100 OSSemCreate
0001c4b0 g     O .rwdata	00000002 OSTmrWheelSize
00017c30 g     F .text	00000040 alt_up_rs232_open_dev
0000b93c g     F .text	00000084 .hidden __nedf2
0001c486 g     O .rwdata	00000002 OSTaskDelEn
000136c8 g     F .text	00000110 OSSemQuery
00011ef8 g     F .text	000002c8 OSQDel
00012574 g     F .text	0000016c OSQPendAbort
00015768 g     F .text	00000034 alt_irq_init
0000d53c g     F .text	00000060 alt_release_fd
000172f8 g     F .text	00000034 read_data_valid
00016e00 g     F .text	00000034 alt_up_character_lcd_cursor_off
00019ccc g     O .rodata	00000100 .hidden __clz_tab
0001e6ac g     O .bss	00000004 _PathLocale
0001c3fc g     O .rwdata	00000004 PS2_ptr
000175b4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00019680 g     F .text	00000014 atexit
000093b4 g     F .text	0000005c _write_r
0000e4d0 g     F .text	00000088 OSSchedLock
000056fc g     F .text	0000001c setlocale
000006b4 g     F .text	000000a4 getJP5
0000ff24 g     F .text	00000128 OSFlagCreate
0001c40c g     O .rwdata	00000004 _impure_ptr
0001e6cc g     O .bss	00000004 alt_argc
000045b4 g     F .text	00000208 __sflush_r
000187e0 g     F .text	0000005c _do_dtors
000056e8 g     F .text	00000008 __locale_cjk_lang
0001c456 g     O .rwdata	00000002 OSEventMultiEn
0001e6a8 g     O .bss	00000004 RAVAIL
00022774 g     O .bss	00000028 ascii
0001004c g     F .text	00000270 OSFlagDel
0001e71c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006ff0 g     F .text	00000060 __ulp
0001053c g     F .text	000005f0 OSFlagPend
0001c4a2 g     O .rwdata	00000002 OSTmrEn
00004bd0 g     F .text	00000018 __fp_unlock_all
0001e694 g     O .bss	00000004 toggle
0001c420 g     O .rwdata	00000008 alt_fs_list
0000f4f4 g     F .text	00000074 OS_StrCopy
000178e4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00017a58 g     F .text	00000040 alt_up_rs232_write_data
0001c46c g     O .rwdata	00000002 OSMemNameSize
000192f0 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001c498 g     O .rwdata	00000002 OSTCBPrioTblMax
00005718 g     F .text	0000000c localeconv
0001c494 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001c468 g     O .rwdata	00000002 OSMemEn
0001c472 g     O .rwdata	00000002 OSMutexEn
0001c4c4 g       *ABS*	00000000 _edata
00025ac0 g       *ABS*	00000000 _end
0001e720 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00016238 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015478 g     F .text	000001f0 OSTimeDlyResume
000103ec g     F .text	00000150 OSFlagNameSet
00014c54 g     F .text	000001c8 OSTaskStkChk
0001c46e g     O .rwdata	00000002 OSMemSize
00007cbc g     F .text	0000007c __swrite
0001c418 g     O .rwdata	00000004 __malloc_trim_threshold
000056dc g     F .text	0000000c __locale_msgcharset
0001e724 g     O .bss	00000004 OSTCBCur
00019694 g     F .text	00000038 exit
0001701c g     F .text	00000074 alt_up_irda_read_data
0001c470 g     O .rwdata	00000002 OSMemTblSize
00005580 g     F .text	000000c4 _fwalk_reent
00017358 g     F .text	000000c4 alt_up_ps2_init
00006e58 g     F .text	00000198 __mdiff
0000a768 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004bac g     F .text	00000004 __sfp_lock_release
0000e30c g     F .text	00000054 OSInit
00015030 g     F .text	0000012c OSTaskQuery
00016b2c g     F .text	00000074 alt_up_character_lcd_string
00012d20 g     F .text	000000ac OS_QInit
0000f568 g     F .text	00000054 OS_StrLen
000171b0 g     F .text	00000040 alt_up_irda_open_dev
00011814 g     F .text	00000118 OSMemNameSet
0001c48a g     O .rwdata	00000002 OSTaskProfileEn
0001e728 g     O .bss	00000004 OSTime
0002411c g     O .bss	00000800 OSTaskIdleStk
00019a80 g     F .text	0000003c _exit
00018534 g     F .text	00000140 alt_alarm_start
000102bc g     F .text	00000130 OSFlagNameGet
00015668 g     F .text	00000064 OSTimeGet
00018038 g     F .text	00000250 get_next_state
00005724 g     F .text	000001b8 __smakebuf_r
00017544 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000a70 g     F .text	00000098 strlen
00019280 g     F .text	0000001c OSTaskSwHook
00018d00 g     F .text	00000158 open
0002491c g     O .bss	00000b40 OSEventTbl
0000b9c0 g     F .text	000000e0 .hidden __gedf2
0002545c g     O .bss	00000510 OSTCBTbl
000137d8 g     F .text	000000fc OSSemSet
0001c41c g     O .rwdata	00000004 __wctomb
00007e98 g     F .text	00000018 __sprint_r
000188cc g     F .text	00000030 alt_icache_flush_all
00016bf0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001c4b8 g     O .rwdata	00000004 alt_priority_mask
00012f7c g     F .text	00000268 OSSemDel
0001e72c g     O .bss	00000004 OSFlagFreeList
0001c450 g     O .rwdata	00000002 OSEventNameSize
00002a58 g     F .text	00000024 __vfprintf_internal
0001e730 g     O .bss	00000001 OSStatRdy
0002596c g     O .bss	00000054 OSTCBPrioTbl
00009afc g     F .text	0000005c _wctomb_r
0000d794 g     F .text	000000c0 __env_lock
00017780 g     F .text	0000008c alt_up_ps2_read_fd
0001c496 g     O .rwdata	00000002 OSTaskSwHookEn
0000c2a4 g     F .text	000008d0 .hidden __subdf3
00017090 g     F .text	00000090 alt_up_irda_read_fd
0001c32e g     O .rwdata	00000066 single_byte_make_code
00006880 g     F .text	000000b0 __lo0bits
0001c4bc g     O .rwdata	00000008 alt_alarm_list
0001c45e g     O .rwdata	00000002 OSFlagWidth
00018784 g     F .text	0000005c _do_ctors
00017998 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009a0c g     F .text	000000c0 wcrtomb
0000ce24 g     F .text	000000d0 close
0001e6dc g     O .bss	00000004 alt_envsem
0001e734 g     O .bss	00000004 OSIdleCtrRun
0000e964 g     F .text	00000020 OSVersion
0001c4a8 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d178 g     F .text	00000080 alt_load
0001515c g     F .text	0000006c OS_TaskStkClr
0001c482 g     O .rwdata	00000002 OSTaskCreateEn
0000ef40 g     F .text	00000064 OS_EventWaitListInit
000097b0 g     F .text	0000005c fputwc
0001930c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00004bb0 g     F .text	00000004 __sinit_lock_acquire
000065f4 g     F .text	00000120 __multadd
00014e1c g     F .text	00000214 OSTaskSuspend
000065cc g     F .text	00000028 _Bfree
0000f5bc g     F .text	0000005c OS_TaskIdle
0001c4ae g     O .rwdata	00000002 OSTmrTblSize
00012bc4 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e3600 	call	e360 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10967004 	addi	r2,r2,22976
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10967004 	addi	r2,r2,22976
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000e3dc0 	call	e3dc <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a8d317 	ldw	r2,-23732(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a8d317 	ldw	r2,-23732(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d690ff14 	ori	gp,gp,17404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10b9a514 	ori	r2,r2,59028

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18d6b014 	ori	r3,r3,23232

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000d1780 	call	d178 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000d31c0 	call	d31c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <task1>:
//char/binary

void charToBinary(char c, INT8U *binaryChar[15]);
char binaryToChar(INT8U c[15]);

void task1(void* pdata) {
     280:	deffe804 	addi	sp,sp,-96
     284:	dfc01715 	stw	ra,92(sp)
     288:	df001615 	stw	fp,88(sp)
     28c:	df001604 	addi	fp,sp,88
     290:	e13fff15 	stw	r4,-4(fp)
//		//setJP5();
//
//		VGA_text(5, 5, strTemp);
//		VGA_box(0, 0, 319, 239, 0);

		INT8U test[15] = { 0, 1, 0, 0, 1, 1, 1, 0 };
     294:	e03fec15 	stw	zero,-80(fp)
     298:	e03fed15 	stw	zero,-76(fp)
     29c:	e03fee15 	stw	zero,-72(fp)
     2a0:	e03fef0d 	sth	zero,-68(fp)
     2a4:	e03fef85 	stb	zero,-66(fp)
     2a8:	00800044 	movi	r2,1
     2ac:	e0bfec45 	stb	r2,-79(fp)
     2b0:	00800044 	movi	r2,1
     2b4:	e0bfed05 	stb	r2,-76(fp)
     2b8:	00800044 	movi	r2,1
     2bc:	e0bfed45 	stb	r2,-75(fp)
     2c0:	00800044 	movi	r2,1
     2c4:	e0bfed85 	stb	r2,-74(fp)
		unsigned char testChar = binaryToChar(test);
     2c8:	e0bfec04 	addi	r2,fp,-80
     2cc:	1009883a 	mov	r4,r2
     2d0:	000081c0 	call	81c <binaryToChar>
     2d4:	e0bfeb05 	stb	r2,-84(fp)

		printf("%c\n", testChar);
     2d8:	e0bfeb03 	ldbu	r2,-84(fp)
     2dc:	010000b4 	movhi	r4,2
     2e0:	2126af04 	addi	r4,r4,-25924
     2e4:	100b883a 	mov	r5,r2
     2e8:	00008b40 	call	8b4 <printf>

		unsigned char test2 = 'N';
     2ec:	00801384 	movi	r2,78
     2f0:	e0bfeb45 	stb	r2,-83(fp)
		INT8U *testChar2[15];
		charToBinary(testChar, &testChar2);
     2f4:	e0bfeb03 	ldbu	r2,-84(fp)
     2f8:	10c03fcc 	andi	r3,r2,255
     2fc:	18c0201c 	xori	r3,r3,128
     300:	18ffe004 	addi	r3,r3,-128
     304:	e0bff004 	addi	r2,fp,-64
     308:	1809883a 	mov	r4,r3
     30c:	100b883a 	mov	r5,r2
     310:	00007580 	call	758 <charToBinary>
		int co;
		for (co = 0; co < 8; co++) {
     314:	e03fea15 	stw	zero,-88(fp)
     318:	00000e06 	br	354 <task1+0xd4>
			printf("%d", testChar2[co]);
     31c:	e0bfea17 	ldw	r2,-88(fp)
     320:	1085883a 	add	r2,r2,r2
     324:	1085883a 	add	r2,r2,r2
     328:	e0ffea04 	addi	r3,fp,-88
     32c:	1885883a 	add	r2,r3,r2
     330:	10800604 	addi	r2,r2,24
     334:	10800017 	ldw	r2,0(r2)
     338:	010000b4 	movhi	r4,2
     33c:	2126b004 	addi	r4,r4,-25920
     340:	100b883a 	mov	r5,r2
     344:	00008b40 	call	8b4 <printf>

		unsigned char test2 = 'N';
		INT8U *testChar2[15];
		charToBinary(testChar, &testChar2);
		int co;
		for (co = 0; co < 8; co++) {
     348:	e0bfea17 	ldw	r2,-88(fp)
     34c:	10800044 	addi	r2,r2,1
     350:	e0bfea15 	stw	r2,-88(fp)
     354:	e0bfea17 	ldw	r2,-88(fp)
     358:	10800210 	cmplti	r2,r2,8
     35c:	103fef1e 	bne	r2,zero,31c <__alt_mem_Flash_flash_data+0xf400031c>
			printf("%d", testChar2[co]);
		}
		printf("\n");
     360:	01000284 	movi	r4,10
     364:	00008f80 	call	8f8 <putchar>

	}
     368:	003fca06 	br	294 <__alt_mem_Flash_flash_data+0xf4000294>

0000036c <main>:
}

int main(void) {
     36c:	defff904 	addi	sp,sp,-28
     370:	dfc00615 	stw	ra,24(sp)
     374:	df000515 	stw	fp,20(sp)
     378:	df000504 	addi	fp,sp,20
	VGA_box(0, 0, 319, 239, 0);
     37c:	d8000015 	stw	zero,0(sp)
     380:	0009883a 	mov	r4,zero
     384:	000b883a 	mov	r5,zero
     388:	01804fc4 	movi	r6,319
     38c:	01c03bc4 	movi	r7,239
     390:	00004180 	call	418 <VGA_box>

	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");	//	DE2-115 gpio
     394:	010000b4 	movhi	r4,2
     398:	2126b104 	addi	r4,r4,-25916
     39c:	00171f00 	call	171f0 <alt_up_parallel_port_open_dev>
     3a0:	d0a8a915 	stw	r2,-23900(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);// set D0 as INPUT
     3a4:	d0a8a917 	ldw	r2,-23900(gp)
     3a8:	10800a17 	ldw	r2,40(r2)
     3ac:	10800104 	addi	r2,r2,4
     3b0:	1007883a 	mov	r3,r2
     3b4:	00800044 	movi	r2,1
     3b8:	18800035 	stwio	r2,0(r3)
	//INPUT is 1
	//OUTPUT is 0

	OSTaskCreateExt(task1,
     3bc:	00800044 	movi	r2,1
     3c0:	d8800015 	stw	r2,0(sp)
     3c4:	008000b4 	movhi	r2,2
     3c8:	10b9dd04 	addi	r2,r2,-6284
     3cc:	d8800115 	stw	r2,4(sp)
     3d0:	00820004 	movi	r2,2048
     3d4:	d8800215 	stw	r2,8(sp)
     3d8:	d8000315 	stw	zero,12(sp)
     3dc:	d8000415 	stw	zero,16(sp)
     3e0:	01000034 	movhi	r4,0
     3e4:	2100a004 	addi	r4,r4,640
     3e8:	000b883a 	mov	r5,zero
     3ec:	018000b4 	movhi	r6,2
     3f0:	3181dc04 	addi	r6,r6,1904
     3f4:	01c00044 	movi	r7,1
     3f8:	0013fd00 	call	13fd0 <OSTaskCreateExt>
	NULL, (void *) &task1_stk[TASK_STACKSIZE - 1], TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSStart();
     3fc:	000e6300 	call	e630 <OSStart>
	return 0;
     400:	0005883a 	mov	r2,zero
}
     404:	e037883a 	mov	sp,fp
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	df000017 	ldw	fp,0(sp)
     410:	dec00204 	addi	sp,sp,8
     414:	f800283a 	ret

00000418 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) {
     418:	defff604 	addi	sp,sp,-40
     41c:	df000915 	stw	fp,36(sp)
     420:	df000904 	addi	fp,sp,36
     424:	e13ffb15 	stw	r4,-20(fp)
     428:	e17ffc15 	stw	r5,-16(fp)
     42c:	e1bffd15 	stw	r6,-12(fp)
     430:	e1fffe15 	stw	r7,-8(fp)
     434:	e0800117 	ldw	r2,4(fp)
     438:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     43c:	00820034 	movhi	r2,2048
     440:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     444:	e0bffc17 	ldw	r2,-16(fp)
     448:	e0bff715 	stw	r2,-36(fp)
     44c:	00001806 	br	4b0 <VGA_box+0x98>
		col = x1;
     450:	e0bffb17 	ldw	r2,-20(fp)
     454:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2) {
     458:	00000f06 	br	498 <VGA_box+0x80>
			offset = (row << 9) + col;
     45c:	e0bff717 	ldw	r2,-36(fp)
     460:	1006927a 	slli	r3,r2,9
     464:	e0bff817 	ldw	r2,-32(fp)
     468:	1885883a 	add	r2,r3,r2
     46c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     470:	e0bffa17 	ldw	r2,-24(fp)
     474:	1085883a 	add	r2,r2,r2
     478:	1007883a 	mov	r3,r2
     47c:	e0bff917 	ldw	r2,-28(fp)
     480:	10c5883a 	add	r2,r2,r3
     484:	e0ffff0b 	ldhu	r3,-4(fp)
     488:	10c0000d 	sth	r3,0(r2)
			++col;
     48c:	e0bff817 	ldw	r2,-32(fp)
     490:	10800044 	addi	r2,r2,1
     494:	e0bff815 	stw	r2,-32(fp)
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
		col = x1;
		while (col <= x2) {
     498:	e0bff817 	ldw	r2,-32(fp)
     49c:	e0fffd17 	ldw	r3,-12(fp)
     4a0:	18bfee0e 	bge	r3,r2,45c <__alt_mem_Flash_flash_data+0xf400045c>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) {
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     4a4:	e0bff717 	ldw	r2,-36(fp)
     4a8:	10800044 	addi	r2,r2,1
     4ac:	e0bff715 	stw	r2,-36(fp)
     4b0:	e0bff717 	ldw	r2,-36(fp)
     4b4:	e0fffe17 	ldw	r3,-8(fp)
     4b8:	18bfe50e 	bge	r3,r2,450 <__alt_mem_Flash_flash_data+0xf4000450>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     4bc:	e037883a 	mov	sp,fp
     4c0:	df000017 	ldw	fp,0(sp)
     4c4:	dec00104 	addi	sp,sp,4
     4c8:	f800283a 	ret

000004cc <VGA_text>:
void VGA_text(int x, int y, char * text_ptr) {
     4cc:	defffb04 	addi	sp,sp,-20
     4d0:	df000415 	stw	fp,16(sp)
     4d4:	df000404 	addi	fp,sp,16
     4d8:	e13ffd15 	stw	r4,-12(fp)
     4dc:	e17ffe15 	stw	r5,-8(fp)
     4e0:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     4e4:	e0bffe17 	ldw	r2,-8(fp)
     4e8:	100691fa 	slli	r3,r2,7
     4ec:	e0bffd17 	ldw	r2,-12(fp)
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	e0bffc15 	stw	r2,-16(fp)
	while (*(text_ptr)) {
     4f8:	00000906 	br	520 <VGA_text+0x54>
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     4fc:	d0e00217 	ldw	r3,-32760(gp)
     500:	e0bffc17 	ldw	r2,-16(fp)
     504:	1885883a 	add	r2,r3,r2
     508:	e0ffff17 	ldw	r3,-4(fp)
     50c:	18c00003 	ldbu	r3,0(r3)
     510:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     514:	e0bfff17 	ldw	r2,-4(fp)
     518:	10800044 	addi	r2,r2,1
     51c:	e0bfff15 	stw	r2,-4(fp)
void VGA_text(int x, int y, char * text_ptr) {
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while (*(text_ptr)) {
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	10800003 	ldbu	r2,0(r2)
     528:	10803fcc 	andi	r2,r2,255
     52c:	1080201c 	xori	r2,r2,128
     530:	10bfe004 	addi	r2,r2,-128
     534:	103ff11e 	bne	r2,zero,4fc <__alt_mem_Flash_flash_data+0xf40004fc>
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		//++offset;
	}
}
     538:	e037883a 	mov	sp,fp
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00104 	addi	sp,sp,4
     544:	f800283a 	ret

00000548 <PS2>:
void PS2() {
     548:	deffff04 	addi	sp,sp,-4
     54c:	df000015 	stw	fp,0(sp)
     550:	d839883a 	mov	fp,sp
	PS2_data = *(PS2_ptr);	// read the Data register in the PS/2 port
     554:	d0a00017 	ldw	r2,-32768(gp)
     558:	10800017 	ldw	r2,0(r2)
     55c:	d0a8a815 	stw	r2,-23904(gp)
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;	// extract the RAVAIL field
     560:	d0a8a817 	ldw	r2,-23904(gp)
     564:	1004d43a 	srli	r2,r2,16
     568:	d0a8ab15 	stw	r2,-23892(gp)
	if (RAVAIL > 0) {
     56c:	d0a8ab17 	ldw	r2,-23892(gp)
     570:	0080030e 	bge	zero,r2,580 <PS2+0x38>
		/* always save the last three bytes received */
		byte1 = PS2_data & 0xFF;
     574:	d0a8a817 	ldw	r2,-23904(gp)
     578:	10803fcc 	andi	r2,r2,255
     57c:	d0a8a715 	stw	r2,-23908(gp)
	}
}
     580:	e037883a 	mov	sp,fp
     584:	df000017 	ldw	fp,0(sp)
     588:	dec00104 	addi	sp,sp,4
     58c:	f800283a 	ret

00000590 <getKey>:

char getKey() {
     590:	defffd04 	addi	sp,sp,-12
     594:	dfc00215 	stw	ra,8(sp)
     598:	df000115 	stw	fp,4(sp)
     59c:	df000104 	addi	fp,sp,4
	if (byte1 != BREAKCODE) {//checks if the received scancode is a BREAKCODE indicator, 0xF0
     5a0:	d0a8a717 	ldw	r2,-23908(gp)
     5a4:	10803c20 	cmpeqi	r2,r2,240
     5a8:	1000081e 	bne	r2,zero,5cc <getKey+0x3c>
		translate_make_code(KB_ASCII_MAKE_CODE, (char *) byte1, &ascii);//if not, translates it to ascii
     5ac:	d0a8a717 	ldw	r2,-23908(gp)
     5b0:	10803fcc 	andi	r2,r2,255
     5b4:	01000044 	movi	r4,1
     5b8:	100b883a 	mov	r5,r2
     5bc:	018000b4 	movhi	r6,2
     5c0:	3189dd04 	addi	r6,r6,10100
     5c4:	00183a40 	call	183a4 <translate_make_code>
		byte1 = 0;
     5c8:	d028a715 	stw	zero,-23908(gp)
	}

	char tempo = ascii[0];
     5cc:	008000b4 	movhi	r2,2
     5d0:	1089dd04 	addi	r2,r2,10100
     5d4:	10800017 	ldw	r2,0(r2)
     5d8:	e0bfff05 	stb	r2,-4(fp)

	if (strcmp(ascii, "KP 8") == 0) {
     5dc:	010000b4 	movhi	r4,2
     5e0:	2109dd04 	addi	r4,r4,10100
     5e4:	014000b4 	movhi	r5,2
     5e8:	2966b604 	addi	r5,r5,-25896
     5ec:	00009cc0 	call	9cc <strcmp>
     5f0:	1000021e 	bne	r2,zero,5fc <getKey+0x6c>
		return UP;
     5f4:	00800e04 	movi	r2,56
     5f8:	00002906 	br	6a0 <getKey+0x110>
	} else if (strcmp(ascii, "KP 2") == 0) {
     5fc:	010000b4 	movhi	r4,2
     600:	2109dd04 	addi	r4,r4,10100
     604:	014000b4 	movhi	r5,2
     608:	2966b804 	addi	r5,r5,-25888
     60c:	00009cc0 	call	9cc <strcmp>
     610:	1000021e 	bne	r2,zero,61c <getKey+0x8c>
		return DOWN;
     614:	00800c84 	movi	r2,50
     618:	00002106 	br	6a0 <getKey+0x110>
	} else if (strcmp(ascii, "KP 6") == 0) {
     61c:	010000b4 	movhi	r4,2
     620:	2109dd04 	addi	r4,r4,10100
     624:	014000b4 	movhi	r5,2
     628:	2966ba04 	addi	r5,r5,-25880
     62c:	00009cc0 	call	9cc <strcmp>
     630:	1000021e 	bne	r2,zero,63c <getKey+0xac>
		return RIGHT;
     634:	00800d84 	movi	r2,54
     638:	00001906 	br	6a0 <getKey+0x110>
	} else if (strcmp(ascii, "KP 4") == 0) {
     63c:	010000b4 	movhi	r4,2
     640:	2109dd04 	addi	r4,r4,10100
     644:	014000b4 	movhi	r5,2
     648:	2966bc04 	addi	r5,r5,-25872
     64c:	00009cc0 	call	9cc <strcmp>
     650:	1000021e 	bne	r2,zero,65c <getKey+0xcc>
		return LEFT;
     654:	00800d04 	movi	r2,52
     658:	00001106 	br	6a0 <getKey+0x110>
	} else if ((tempo >= 'A' && tempo <= 'Z')) {//checks wether or not the received byte is a letter
     65c:	e0bfff07 	ldb	r2,-4(fp)
     660:	10801050 	cmplti	r2,r2,65
     664:	10000d1e 	bne	r2,zero,69c <getKey+0x10c>
     668:	e0bfff07 	ldb	r2,-4(fp)
     66c:	108016c8 	cmpgei	r2,r2,91
     670:	10000a1e 	bne	r2,zero,69c <getKey+0x10c>
		if (strlen(ascii) == 1) {
     674:	010000b4 	movhi	r4,2
     678:	2109dd04 	addi	r4,r4,10100
     67c:	0000a700 	call	a70 <strlen>
     680:	10800058 	cmpnei	r2,r2,1
     684:	1000051e 	bne	r2,zero,69c <getKey+0x10c>
			tempo = tempo + 32;	//makes it a small letter instead of a capital
     688:	e0bfff03 	ldbu	r2,-4(fp)
     68c:	10800804 	addi	r2,r2,32
     690:	e0bfff05 	stb	r2,-4(fp)
			return tempo;							//returns the character
     694:	e0bfff03 	ldbu	r2,-4(fp)
     698:	00000106 	br	6a0 <getKey+0x110>
		}
	}
	return 0;									// returns null
     69c:	0005883a 	mov	r2,zero
}
     6a0:	e037883a 	mov	sp,fp
     6a4:	dfc00117 	ldw	ra,4(sp)
     6a8:	df000017 	ldw	fp,0(sp)
     6ac:	dec00204 	addi	sp,sp,8
     6b0:	f800283a 	ret

000006b4 <getJP5>:

void getJP5() {
     6b4:	defffd04 	addi	sp,sp,-12
     6b8:	dfc00215 	stw	ra,8(sp)
     6bc:	df000115 	stw	fp,4(sp)
     6c0:	df000104 	addi	fp,sp,4

	int gpio_values;

	toggle = !toggle;		//
     6c4:	d0a8a617 	ldw	r2,-23912(gp)
     6c8:	1005003a 	cmpeq	r2,r2,zero
     6cc:	10803fcc 	andi	r2,r2,255
     6d0:	d0a8a615 	stw	r2,-23912(gp)
	if (toggle) {
     6d4:	d0a8a617 	ldw	r2,-23912(gp)
     6d8:	10000626 	beq	r2,zero,6f4 <getJP5+0x40>
		alt_up_parallel_port_write_data(gpio_dev, 0x00000001);	//	set D0 HIGH
     6dc:	d0a8a917 	ldw	r2,-23900(gp)
     6e0:	10800a17 	ldw	r2,40(r2)
     6e4:	1007883a 	mov	r3,r2
     6e8:	00800044 	movi	r2,1
     6ec:	18800035 	stwio	r2,0(r3)
     6f0:	00000406 	br	704 <getJP5+0x50>
	} else {
		alt_up_parallel_port_write_data(gpio_dev, 0x00000000);	//	set D0 LOW
     6f4:	d0a8a917 	ldw	r2,-23900(gp)
     6f8:	10800a17 	ldw	r2,40(r2)
     6fc:	0007883a 	mov	r3,zero
     700:	10c00035 	stwio	r3,0(r2)
	}

	gpio_values = alt_up_parallel_port_read_data(gpio_dev);	//		Read form the GPIO
     704:	d0a8a917 	ldw	r2,-23900(gp)
     708:	10800a17 	ldw	r2,40(r2)
     70c:	10800037 	ldwio	r2,0(r2)
     710:	e0bfff15 	stw	r2,-4(fp)

	gpio_values &= 0x00000002;		//		extract D1
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	1080008c 	andi	r2,r2,2
     71c:	e0bfff15 	stw	r2,-4(fp)
	if (gpio_values == 0) {
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1000041e 	bne	r2,zero,738 <getJP5+0x84>
		printf("Off\n");
     728:	010000b4 	movhi	r4,2
     72c:	2126be04 	addi	r4,r4,-25864
     730:	00009b80 	call	9b8 <puts>
     734:	00000306 	br	744 <getJP5+0x90>
	} else {
		printf("On\n");
     738:	010000b4 	movhi	r4,2
     73c:	2126bf04 	addi	r4,r4,-25860
     740:	00009b80 	call	9b8 <puts>
	}
	//OSTimeDlyHMSM(0, 0, 0, 10);
}
     744:	e037883a 	mov	sp,fp
     748:	dfc00117 	ldw	ra,4(sp)
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00204 	addi	sp,sp,8
     754:	f800283a 	ret

00000758 <charToBinary>:
//	IOWR_ALTERA_AVALON_PIO_DATA(PIN_AD15, 'c');
//	char tempor = IORD_ALTERA_AVALON_PIO_DATA(PIN_AC15) & 0xFF;
//	printf("set: %d %c\n", tempor, tempor);
//}

void charToBinary(char c, INT8U *binaryChar[15]) {
     758:	defff804 	addi	sp,sp,-32
     75c:	df000715 	stw	fp,28(sp)
     760:	df000704 	addi	fp,sp,28
     764:	2005883a 	mov	r2,r4
     768:	e17fff15 	stw	r5,-4(fp)
     76c:	e0bffe05 	stb	r2,-8(fp)
	INT8U temp[15];
	int i;
	for (i = 0; i < 8; i++) {
     770:	e03ff915 	stw	zero,-28(fp)
     774:	00000c06 	br	7a8 <charToBinary+0x50>
		temp[i] = ((c >> i) & 1);
     778:	e0fffe07 	ldb	r3,-8(fp)
     77c:	e0bff917 	ldw	r2,-28(fp)
     780:	1885d83a 	sra	r2,r3,r2
     784:	1080004c 	andi	r2,r2,1
     788:	1009883a 	mov	r4,r2
     78c:	e0fffa04 	addi	r3,fp,-24
     790:	e0bff917 	ldw	r2,-28(fp)
     794:	1885883a 	add	r2,r3,r2
     798:	11000005 	stb	r4,0(r2)
//}

void charToBinary(char c, INT8U *binaryChar[15]) {
	INT8U temp[15];
	int i;
	for (i = 0; i < 8; i++) {
     79c:	e0bff917 	ldw	r2,-28(fp)
     7a0:	10800044 	addi	r2,r2,1
     7a4:	e0bff915 	stw	r2,-28(fp)
     7a8:	e0bff917 	ldw	r2,-28(fp)
     7ac:	10800210 	cmplti	r2,r2,8
     7b0:	103ff11e 	bne	r2,zero,778 <__alt_mem_Flash_flash_data+0xf4000778>
		temp[i] = ((c >> i) & 1);
	}
	for(i = 0; i < 8; i++){
     7b4:	e03ff915 	stw	zero,-28(fp)
     7b8:	00001106 	br	800 <charToBinary+0xa8>
		binaryChar[7 - i] = temp[i];
     7bc:	00c001c4 	movi	r3,7
     7c0:	e0bff917 	ldw	r2,-28(fp)
     7c4:	1885c83a 	sub	r2,r3,r2
     7c8:	1085883a 	add	r2,r2,r2
     7cc:	1085883a 	add	r2,r2,r2
     7d0:	1007883a 	mov	r3,r2
     7d4:	e0bfff17 	ldw	r2,-4(fp)
     7d8:	10c5883a 	add	r2,r2,r3
     7dc:	e13ffa04 	addi	r4,fp,-24
     7e0:	e0fff917 	ldw	r3,-28(fp)
     7e4:	20c7883a 	add	r3,r4,r3
     7e8:	18c00003 	ldbu	r3,0(r3)
     7ec:	18c03fcc 	andi	r3,r3,255
     7f0:	10c00015 	stw	r3,0(r2)
	INT8U temp[15];
	int i;
	for (i = 0; i < 8; i++) {
		temp[i] = ((c >> i) & 1);
	}
	for(i = 0; i < 8; i++){
     7f4:	e0bff917 	ldw	r2,-28(fp)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	e0bff915 	stw	r2,-28(fp)
     800:	e0bff917 	ldw	r2,-28(fp)
     804:	10800210 	cmplti	r2,r2,8
     808:	103fec1e 	bne	r2,zero,7bc <__alt_mem_Flash_flash_data+0xf40007bc>
		binaryChar[7 - i] = temp[i];
	}
}
     80c:	e037883a 	mov	sp,fp
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00104 	addi	sp,sp,4
     818:	f800283a 	ret

0000081c <binaryToChar>:

char binaryToChar(INT8U c[15]) {
     81c:	defffc04 	addi	sp,sp,-16
     820:	df000315 	stw	fp,12(sp)
     824:	df000304 	addi	fp,sp,12
     828:	e13fff15 	stw	r4,-4(fp)
	unsigned char charBinary;
	int i;
	for (i = 0; i < 8; i++) {
     82c:	e03ffe15 	stw	zero,-8(fp)
     830:	00000d06 	br	868 <binaryToChar+0x4c>
		charBinary = charBinary << 1;
     834:	e0bffd03 	ldbu	r2,-12(fp)
     838:	1085883a 	add	r2,r2,r2
     83c:	e0bffd05 	stb	r2,-12(fp)
		charBinary = charBinary | c[i];
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	e0ffff17 	ldw	r3,-4(fp)
     848:	1885883a 	add	r2,r3,r2
     84c:	10c00003 	ldbu	r3,0(r2)
     850:	e0bffd03 	ldbu	r2,-12(fp)
     854:	1884b03a 	or	r2,r3,r2
     858:	e0bffd05 	stb	r2,-12(fp)
}

char binaryToChar(INT8U c[15]) {
	unsigned char charBinary;
	int i;
	for (i = 0; i < 8; i++) {
     85c:	e0bffe17 	ldw	r2,-8(fp)
     860:	10800044 	addi	r2,r2,1
     864:	e0bffe15 	stw	r2,-8(fp)
     868:	e0bffe17 	ldw	r2,-8(fp)
     86c:	10800210 	cmplti	r2,r2,8
     870:	103ff01e 	bne	r2,zero,834 <__alt_mem_Flash_flash_data+0xf4000834>
		charBinary = charBinary << 1;
		charBinary = charBinary | c[i];
	}
	return charBinary;
     874:	e0bffd03 	ldbu	r2,-12(fp)
}
     878:	e037883a 	mov	sp,fp
     87c:	df000017 	ldw	fp,0(sp)
     880:	dec00104 	addi	sp,sp,4
     884:	f800283a 	ret

00000888 <_printf_r>:
     888:	defffd04 	addi	sp,sp,-12
     88c:	dfc00015 	stw	ra,0(sp)
     890:	d9800115 	stw	r6,4(sp)
     894:	d9c00215 	stw	r7,8(sp)
     898:	280d883a 	mov	r6,r5
     89c:	21400217 	ldw	r5,8(r4)
     8a0:	d9c00104 	addi	r7,sp,4
     8a4:	0000b080 	call	b08 <___vfprintf_internal_r>
     8a8:	dfc00017 	ldw	ra,0(sp)
     8ac:	dec00304 	addi	sp,sp,12
     8b0:	f800283a 	ret

000008b4 <printf>:
     8b4:	defffc04 	addi	sp,sp,-16
     8b8:	dfc00015 	stw	ra,0(sp)
     8bc:	d9400115 	stw	r5,4(sp)
     8c0:	d9800215 	stw	r6,8(sp)
     8c4:	d9c00315 	stw	r7,12(sp)
     8c8:	008000b4 	movhi	r2,2
     8cc:	10b10304 	addi	r2,r2,-15348
     8d0:	10800017 	ldw	r2,0(r2)
     8d4:	200b883a 	mov	r5,r4
     8d8:	d9800104 	addi	r6,sp,4
     8dc:	11000217 	ldw	r4,8(r2)
     8e0:	0002a580 	call	2a58 <__vfprintf_internal>
     8e4:	dfc00017 	ldw	ra,0(sp)
     8e8:	dec00404 	addi	sp,sp,16
     8ec:	f800283a 	ret

000008f0 <_putchar_r>:
     8f0:	21800217 	ldw	r6,8(r4)
     8f4:	00074c41 	jmpi	74c4 <_putc_r>

000008f8 <putchar>:
     8f8:	008000b4 	movhi	r2,2
     8fc:	10b10304 	addi	r2,r2,-15348
     900:	200b883a 	mov	r5,r4
     904:	11000017 	ldw	r4,0(r2)
     908:	21800217 	ldw	r6,8(r4)
     90c:	00074c41 	jmpi	74c4 <_putc_r>

00000910 <_puts_r>:
     910:	defff604 	addi	sp,sp,-40
     914:	dc000715 	stw	r16,28(sp)
     918:	2021883a 	mov	r16,r4
     91c:	2809883a 	mov	r4,r5
     920:	dc400815 	stw	r17,32(sp)
     924:	dfc00915 	stw	ra,36(sp)
     928:	2823883a 	mov	r17,r5
     92c:	0000a700 	call	a70 <strlen>
     930:	81400217 	ldw	r5,8(r16)
     934:	11000044 	addi	r4,r2,1
     938:	d8800115 	stw	r2,4(sp)
     93c:	008000b4 	movhi	r2,2
     940:	2980030b 	ldhu	r6,12(r5)
     944:	10a6c004 	addi	r2,r2,-25856
     948:	d8800215 	stw	r2,8(sp)
     94c:	00800044 	movi	r2,1
     950:	d8800315 	stw	r2,12(sp)
     954:	00800084 	movi	r2,2
     958:	d8800515 	stw	r2,20(sp)
     95c:	dc400015 	stw	r17,0(sp)
     960:	d9000615 	stw	r4,24(sp)
     964:	dec00415 	stw	sp,16(sp)
     968:	3088000c 	andi	r2,r6,8192
     96c:	1000061e 	bne	r2,zero,988 <_puts_r+0x78>
     970:	29001917 	ldw	r4,100(r5)
     974:	00b7ffc4 	movi	r2,-8193
     978:	31880014 	ori	r6,r6,8192
     97c:	2084703a 	and	r2,r4,r2
     980:	2980030d 	sth	r6,12(r5)
     984:	28801915 	stw	r2,100(r5)
     988:	8009883a 	mov	r4,r16
     98c:	d9800404 	addi	r6,sp,16
     990:	0004ffc0 	call	4ffc <__sfvwrite_r>
     994:	1000061e 	bne	r2,zero,9b0 <_puts_r+0xa0>
     998:	00800284 	movi	r2,10
     99c:	dfc00917 	ldw	ra,36(sp)
     9a0:	dc400817 	ldw	r17,32(sp)
     9a4:	dc000717 	ldw	r16,28(sp)
     9a8:	dec00a04 	addi	sp,sp,40
     9ac:	f800283a 	ret
     9b0:	00bfffc4 	movi	r2,-1
     9b4:	003ff906 	br	99c <__alt_mem_Flash_flash_data+0xf400099c>

000009b8 <puts>:
     9b8:	008000b4 	movhi	r2,2
     9bc:	10b10304 	addi	r2,r2,-15348
     9c0:	200b883a 	mov	r5,r4
     9c4:	11000017 	ldw	r4,0(r2)
     9c8:	00009101 	jmpi	910 <_puts_r>

000009cc <strcmp>:
     9cc:	2144b03a 	or	r2,r4,r5
     9d0:	108000cc 	andi	r2,r2,3
     9d4:	1000171e 	bne	r2,zero,a34 <strcmp+0x68>
     9d8:	20800017 	ldw	r2,0(r4)
     9dc:	28c00017 	ldw	r3,0(r5)
     9e0:	10c0141e 	bne	r2,r3,a34 <strcmp+0x68>
     9e4:	027fbff4 	movhi	r9,65279
     9e8:	4a7fbfc4 	addi	r9,r9,-257
     9ec:	0086303a 	nor	r3,zero,r2
     9f0:	02202074 	movhi	r8,32897
     9f4:	1245883a 	add	r2,r2,r9
     9f8:	42202004 	addi	r8,r8,-32640
     9fc:	10c4703a 	and	r2,r2,r3
     a00:	1204703a 	and	r2,r2,r8
     a04:	10000226 	beq	r2,zero,a10 <strcmp+0x44>
     a08:	00001706 	br	a68 <strcmp+0x9c>
     a0c:	1000161e 	bne	r2,zero,a68 <strcmp+0x9c>
     a10:	21000104 	addi	r4,r4,4
     a14:	20c00017 	ldw	r3,0(r4)
     a18:	29400104 	addi	r5,r5,4
     a1c:	29800017 	ldw	r6,0(r5)
     a20:	1a4f883a 	add	r7,r3,r9
     a24:	00c4303a 	nor	r2,zero,r3
     a28:	3884703a 	and	r2,r7,r2
     a2c:	1204703a 	and	r2,r2,r8
     a30:	19bff626 	beq	r3,r6,a0c <__alt_mem_Flash_flash_data+0xf4000a0c>
     a34:	20800007 	ldb	r2,0(r4)
     a38:	1000051e 	bne	r2,zero,a50 <strcmp+0x84>
     a3c:	00000606 	br	a58 <strcmp+0x8c>
     a40:	21000044 	addi	r4,r4,1
     a44:	20800007 	ldb	r2,0(r4)
     a48:	29400044 	addi	r5,r5,1
     a4c:	10000226 	beq	r2,zero,a58 <strcmp+0x8c>
     a50:	28c00007 	ldb	r3,0(r5)
     a54:	10fffa26 	beq	r2,r3,a40 <__alt_mem_Flash_flash_data+0xf4000a40>
     a58:	20800003 	ldbu	r2,0(r4)
     a5c:	28c00003 	ldbu	r3,0(r5)
     a60:	10c5c83a 	sub	r2,r2,r3
     a64:	f800283a 	ret
     a68:	0005883a 	mov	r2,zero
     a6c:	f800283a 	ret

00000a70 <strlen>:
     a70:	208000cc 	andi	r2,r4,3
     a74:	10002026 	beq	r2,zero,af8 <strlen+0x88>
     a78:	20800007 	ldb	r2,0(r4)
     a7c:	10002026 	beq	r2,zero,b00 <strlen+0x90>
     a80:	2005883a 	mov	r2,r4
     a84:	00000206 	br	a90 <strlen+0x20>
     a88:	10c00007 	ldb	r3,0(r2)
     a8c:	18001826 	beq	r3,zero,af0 <strlen+0x80>
     a90:	10800044 	addi	r2,r2,1
     a94:	10c000cc 	andi	r3,r2,3
     a98:	183ffb1e 	bne	r3,zero,a88 <__alt_mem_Flash_flash_data+0xf4000a88>
     a9c:	10c00017 	ldw	r3,0(r2)
     aa0:	01ffbff4 	movhi	r7,65279
     aa4:	39ffbfc4 	addi	r7,r7,-257
     aa8:	00ca303a 	nor	r5,zero,r3
     aac:	01a02074 	movhi	r6,32897
     ab0:	19c7883a 	add	r3,r3,r7
     ab4:	31a02004 	addi	r6,r6,-32640
     ab8:	1946703a 	and	r3,r3,r5
     abc:	1986703a 	and	r3,r3,r6
     ac0:	1800091e 	bne	r3,zero,ae8 <strlen+0x78>
     ac4:	10800104 	addi	r2,r2,4
     ac8:	10c00017 	ldw	r3,0(r2)
     acc:	19cb883a 	add	r5,r3,r7
     ad0:	00c6303a 	nor	r3,zero,r3
     ad4:	28c6703a 	and	r3,r5,r3
     ad8:	1986703a 	and	r3,r3,r6
     adc:	183ff926 	beq	r3,zero,ac4 <__alt_mem_Flash_flash_data+0xf4000ac4>
     ae0:	00000106 	br	ae8 <strlen+0x78>
     ae4:	10800044 	addi	r2,r2,1
     ae8:	10c00007 	ldb	r3,0(r2)
     aec:	183ffd1e 	bne	r3,zero,ae4 <__alt_mem_Flash_flash_data+0xf4000ae4>
     af0:	1105c83a 	sub	r2,r2,r4
     af4:	f800283a 	ret
     af8:	2005883a 	mov	r2,r4
     afc:	003fe706 	br	a9c <__alt_mem_Flash_flash_data+0xf4000a9c>
     b00:	0005883a 	mov	r2,zero
     b04:	f800283a 	ret

00000b08 <___vfprintf_internal_r>:
     b08:	deffb604 	addi	sp,sp,-296
     b0c:	dfc04915 	stw	ra,292(sp)
     b10:	ddc04715 	stw	r23,284(sp)
     b14:	dd804615 	stw	r22,280(sp)
     b18:	282f883a 	mov	r23,r5
     b1c:	202d883a 	mov	r22,r4
     b20:	d9802a15 	stw	r6,168(sp)
     b24:	d9c02d15 	stw	r7,180(sp)
     b28:	df004815 	stw	fp,288(sp)
     b2c:	dd404515 	stw	r21,276(sp)
     b30:	dd004415 	stw	r20,272(sp)
     b34:	dcc04315 	stw	r19,268(sp)
     b38:	dc804215 	stw	r18,264(sp)
     b3c:	dc404115 	stw	r17,260(sp)
     b40:	dc004015 	stw	r16,256(sp)
     b44:	00056f00 	call	56f0 <_localeconv_r>
     b48:	10800017 	ldw	r2,0(r2)
     b4c:	1009883a 	mov	r4,r2
     b50:	d8803515 	stw	r2,212(sp)
     b54:	0000a700 	call	a70 <strlen>
     b58:	d8803815 	stw	r2,224(sp)
     b5c:	b0000226 	beq	r22,zero,b68 <___vfprintf_internal_r+0x60>
     b60:	b0800e17 	ldw	r2,56(r22)
     b64:	1000e126 	beq	r2,zero,eec <___vfprintf_internal_r+0x3e4>
     b68:	b880030b 	ldhu	r2,12(r23)
     b6c:	10c8000c 	andi	r3,r2,8192
     b70:	1800061e 	bne	r3,zero,b8c <___vfprintf_internal_r+0x84>
     b74:	b9001917 	ldw	r4,100(r23)
     b78:	00f7ffc4 	movi	r3,-8193
     b7c:	10880014 	ori	r2,r2,8192
     b80:	20c6703a 	and	r3,r4,r3
     b84:	b880030d 	sth	r2,12(r23)
     b88:	b8c01915 	stw	r3,100(r23)
     b8c:	10c0020c 	andi	r3,r2,8
     b90:	1800a726 	beq	r3,zero,e30 <___vfprintf_internal_r+0x328>
     b94:	b8c00417 	ldw	r3,16(r23)
     b98:	1800a526 	beq	r3,zero,e30 <___vfprintf_internal_r+0x328>
     b9c:	1080068c 	andi	r2,r2,26
     ba0:	00c00284 	movi	r3,10
     ba4:	10c0aa26 	beq	r2,r3,e50 <___vfprintf_internal_r+0x348>
     ba8:	dac01e04 	addi	r11,sp,120
     bac:	db001dc4 	addi	r12,sp,119
     bb0:	d8800404 	addi	r2,sp,16
     bb4:	050000b4 	movhi	r20,2
     bb8:	dac02815 	stw	r11,160(sp)
     bbc:	5b17c83a 	sub	r11,r11,r12
     bc0:	a526d184 	addi	r20,r20,-25786
     bc4:	db002915 	stw	r12,164(sp)
     bc8:	d8801e15 	stw	r2,120(sp)
     bcc:	d8002015 	stw	zero,128(sp)
     bd0:	d8001f15 	stw	zero,124(sp)
     bd4:	d8003315 	stw	zero,204(sp)
     bd8:	d8003715 	stw	zero,220(sp)
     bdc:	d8003915 	stw	zero,228(sp)
     be0:	1011883a 	mov	r8,r2
     be4:	d8003b15 	stw	zero,236(sp)
     be8:	d8003a15 	stw	zero,232(sp)
     bec:	d8002f15 	stw	zero,188(sp)
     bf0:	dac03c15 	stw	r11,240(sp)
     bf4:	db002a17 	ldw	r12,168(sp)
     bf8:	60800007 	ldb	r2,0(r12)
     bfc:	1000be26 	beq	r2,zero,ef8 <___vfprintf_internal_r+0x3f0>
     c00:	00c00944 	movi	r3,37
     c04:	10c0bc26 	beq	r2,r3,ef8 <___vfprintf_internal_r+0x3f0>
     c08:	6021883a 	mov	r16,r12
     c0c:	00000106 	br	c14 <___vfprintf_internal_r+0x10c>
     c10:	10c08426 	beq	r2,r3,e24 <___vfprintf_internal_r+0x31c>
     c14:	84000044 	addi	r16,r16,1
     c18:	80800007 	ldb	r2,0(r16)
     c1c:	103ffc1e 	bne	r2,zero,c10 <__alt_mem_Flash_flash_data+0xf4000c10>
     c20:	dac02a17 	ldw	r11,168(sp)
     c24:	82e3c83a 	sub	r17,r16,r11
     c28:	88000f26 	beq	r17,zero,c68 <___vfprintf_internal_r+0x160>
     c2c:	d8c02017 	ldw	r3,128(sp)
     c30:	d8801f17 	ldw	r2,124(sp)
     c34:	dac02a17 	ldw	r11,168(sp)
     c38:	1c47883a 	add	r3,r3,r17
     c3c:	10800044 	addi	r2,r2,1
     c40:	d8c02015 	stw	r3,128(sp)
     c44:	42c00015 	stw	r11,0(r8)
     c48:	44400115 	stw	r17,4(r8)
     c4c:	d8801f15 	stw	r2,124(sp)
     c50:	00c001c4 	movi	r3,7
     c54:	18809316 	blt	r3,r2,ea4 <___vfprintf_internal_r+0x39c>
     c58:	42000204 	addi	r8,r8,8
     c5c:	db002f17 	ldw	r12,188(sp)
     c60:	6459883a 	add	r12,r12,r17
     c64:	db002f15 	stw	r12,188(sp)
     c68:	80800007 	ldb	r2,0(r16)
     c6c:	10009426 	beq	r2,zero,ec0 <___vfprintf_internal_r+0x3b8>
     c70:	80800044 	addi	r2,r16,1
     c74:	84000047 	ldb	r16,1(r16)
     c78:	d8002785 	stb	zero,158(sp)
     c7c:	000d883a 	mov	r6,zero
     c80:	027fffc4 	movi	r9,-1
     c84:	d8002e15 	stw	zero,184(sp)
     c88:	0023883a 	mov	r17,zero
     c8c:	01001604 	movi	r4,88
     c90:	01400244 	movi	r5,9
     c94:	02800a84 	movi	r10,42
     c98:	01c01b04 	movi	r7,108
     c9c:	10c00044 	addi	r3,r2,1
     ca0:	80bff804 	addi	r2,r16,-32
     ca4:	2082cd36 	bltu	r4,r2,17dc <___vfprintf_internal_r+0xcd4>
     ca8:	100490ba 	slli	r2,r2,2
     cac:	02c00034 	movhi	r11,0
     cb0:	5ac33004 	addi	r11,r11,3264
     cb4:	12c5883a 	add	r2,r2,r11
     cb8:	10800017 	ldw	r2,0(r2)
     cbc:	1000683a 	jmp	r2
     cc0:	000015f4 	movhi	zero,87
     cc4:	000017dc 	xori	zero,zero,95
     cc8:	000017dc 	xori	zero,zero,95
     ccc:	00001744 	movi	zero,93
     cd0:	000017dc 	xori	zero,zero,95
     cd4:	000017dc 	xori	zero,zero,95
     cd8:	000017dc 	xori	zero,zero,95
     cdc:	000017dc 	xori	zero,zero,95
     ce0:	000017dc 	xori	zero,zero,95
     ce4:	000017dc 	xori	zero,zero,95
     ce8:	00001614 	movui	zero,88
     cec:	00001640 	call	164 <alt_irq_handler+0x68>
     cf0:	000017dc 	xori	zero,zero,95
     cf4:	00000f00 	call	f0 <OSCtxSw_SWITCH_PC+0xb0>
     cf8:	00000f10 	cmplti	zero,zero,60
     cfc:	000017dc 	xori	zero,zero,95
     d00:	00000f50 	cmplti	zero,zero,61
     d04:	00000f60 	cmpeqi	zero,zero,61
     d08:	00000f60 	cmpeqi	zero,zero,61
     d0c:	00000f60 	cmpeqi	zero,zero,61
     d10:	00000f60 	cmpeqi	zero,zero,61
     d14:	00000f60 	cmpeqi	zero,zero,61
     d18:	00000f60 	cmpeqi	zero,zero,61
     d1c:	00000f60 	cmpeqi	zero,zero,61
     d20:	00000f60 	cmpeqi	zero,zero,61
     d24:	00000f60 	cmpeqi	zero,zero,61
     d28:	000017dc 	xori	zero,zero,95
     d2c:	000017dc 	xori	zero,zero,95
     d30:	000017dc 	xori	zero,zero,95
     d34:	000017dc 	xori	zero,zero,95
     d38:	000017dc 	xori	zero,zero,95
     d3c:	000017dc 	xori	zero,zero,95
     d40:	000017dc 	xori	zero,zero,95
     d44:	000017dc 	xori	zero,zero,95
     d48:	000017dc 	xori	zero,zero,95
     d4c:	000017dc 	xori	zero,zero,95
     d50:	00000f94 	movui	zero,62
     d54:	00001404 	movi	zero,80
     d58:	000017dc 	xori	zero,zero,95
     d5c:	00001404 	movi	zero,80
     d60:	000017dc 	xori	zero,zero,95
     d64:	000017dc 	xori	zero,zero,95
     d68:	000017dc 	xori	zero,zero,95
     d6c:	000017dc 	xori	zero,zero,95
     d70:	000014f0 	cmpltui	zero,zero,83
     d74:	000017dc 	xori	zero,zero,95
     d78:	000017dc 	xori	zero,zero,95
     d7c:	00001398 	cmpnei	zero,zero,78
     d80:	000017dc 	xori	zero,zero,95
     d84:	000017dc 	xori	zero,zero,95
     d88:	000017dc 	xori	zero,zero,95
     d8c:	000017dc 	xori	zero,zero,95
     d90:	000017dc 	xori	zero,zero,95
     d94:	000013d4 	movui	zero,79
     d98:	000017dc 	xori	zero,zero,95
     d9c:	000017dc 	xori	zero,zero,95
     da0:	00001598 	cmpnei	zero,zero,86
     da4:	000017dc 	xori	zero,zero,95
     da8:	000017dc 	xori	zero,zero,95
     dac:	000017dc 	xori	zero,zero,95
     db0:	000017dc 	xori	zero,zero,95
     db4:	000017dc 	xori	zero,zero,95
     db8:	000017dc 	xori	zero,zero,95
     dbc:	000017dc 	xori	zero,zero,95
     dc0:	000017dc 	xori	zero,zero,95
     dc4:	000017dc 	xori	zero,zero,95
     dc8:	000017dc 	xori	zero,zero,95
     dcc:	00001650 	cmplti	zero,zero,89
     dd0:	00001500 	call	150 <alt_irq_handler+0x54>
     dd4:	00001404 	movi	zero,80
     dd8:	00001404 	movi	zero,80
     ddc:	00001404 	movi	zero,80
     de0:	00001540 	call	154 <alt_irq_handler+0x58>
     de4:	00001500 	call	150 <alt_irq_handler+0x54>
     de8:	000017dc 	xori	zero,zero,95
     dec:	000017dc 	xori	zero,zero,95
     df0:	00001550 	cmplti	zero,zero,85
     df4:	000017dc 	xori	zero,zero,95
     df8:	00001564 	muli	zero,zero,85
     dfc:	000017a0 	cmpeqi	zero,zero,94
     e00:	000014a8 	cmpgeui	zero,zero,82
     e04:	00001754 	movui	zero,93
     e08:	000017dc 	xori	zero,zero,95
     e0c:	00001690 	cmplti	zero,zero,90
     e10:	000017dc 	xori	zero,zero,95
     e14:	00001764 	muli	zero,zero,93
     e18:	000017dc 	xori	zero,zero,95
     e1c:	000017dc 	xori	zero,zero,95
     e20:	00001704 	movi	zero,92
     e24:	db002a17 	ldw	r12,168(sp)
     e28:	8323c83a 	sub	r17,r16,r12
     e2c:	003f7e06 	br	c28 <__alt_mem_Flash_flash_data+0xf4000c28>
     e30:	b009883a 	mov	r4,r22
     e34:	b80b883a 	mov	r5,r23
     e38:	0002b380 	call	2b38 <__swsetup_r>
     e3c:	10000c1e 	bne	r2,zero,e70 <___vfprintf_internal_r+0x368>
     e40:	b880030b 	ldhu	r2,12(r23)
     e44:	00c00284 	movi	r3,10
     e48:	1080068c 	andi	r2,r2,26
     e4c:	10ff561e 	bne	r2,r3,ba8 <__alt_mem_Flash_flash_data+0xf4000ba8>
     e50:	b880038f 	ldh	r2,14(r23)
     e54:	103f5416 	blt	r2,zero,ba8 <__alt_mem_Flash_flash_data+0xf4000ba8>
     e58:	d9802a17 	ldw	r6,168(sp)
     e5c:	d9c02d17 	ldw	r7,180(sp)
     e60:	b009883a 	mov	r4,r22
     e64:	b80b883a 	mov	r5,r23
     e68:	0002a7c0 	call	2a7c <__sbprintf>
     e6c:	00000106 	br	e74 <___vfprintf_internal_r+0x36c>
     e70:	00bfffc4 	movi	r2,-1
     e74:	dfc04917 	ldw	ra,292(sp)
     e78:	df004817 	ldw	fp,288(sp)
     e7c:	ddc04717 	ldw	r23,284(sp)
     e80:	dd804617 	ldw	r22,280(sp)
     e84:	dd404517 	ldw	r21,276(sp)
     e88:	dd004417 	ldw	r20,272(sp)
     e8c:	dcc04317 	ldw	r19,268(sp)
     e90:	dc804217 	ldw	r18,264(sp)
     e94:	dc404117 	ldw	r17,260(sp)
     e98:	dc004017 	ldw	r16,256(sp)
     e9c:	dec04a04 	addi	sp,sp,296
     ea0:	f800283a 	ret
     ea4:	b009883a 	mov	r4,r22
     ea8:	b80b883a 	mov	r5,r23
     eac:	d9801e04 	addi	r6,sp,120
     eb0:	0007e980 	call	7e98 <__sprint_r>
     eb4:	1000081e 	bne	r2,zero,ed8 <___vfprintf_internal_r+0x3d0>
     eb8:	da000404 	addi	r8,sp,16
     ebc:	003f6706 	br	c5c <__alt_mem_Flash_flash_data+0xf4000c5c>
     ec0:	d8802017 	ldw	r2,128(sp)
     ec4:	10000426 	beq	r2,zero,ed8 <___vfprintf_internal_r+0x3d0>
     ec8:	b009883a 	mov	r4,r22
     ecc:	b80b883a 	mov	r5,r23
     ed0:	d9801e04 	addi	r6,sp,120
     ed4:	0007e980 	call	7e98 <__sprint_r>
     ed8:	b880030b 	ldhu	r2,12(r23)
     edc:	1080100c 	andi	r2,r2,64
     ee0:	103fe31e 	bne	r2,zero,e70 <__alt_mem_Flash_flash_data+0xf4000e70>
     ee4:	d8802f17 	ldw	r2,188(sp)
     ee8:	003fe206 	br	e74 <__alt_mem_Flash_flash_data+0xf4000e74>
     eec:	b009883a 	mov	r4,r22
     ef0:	0004b980 	call	4b98 <__sinit>
     ef4:	003f1c06 	br	b68 <__alt_mem_Flash_flash_data+0xf4000b68>
     ef8:	dc002a17 	ldw	r16,168(sp)
     efc:	003f5a06 	br	c68 <__alt_mem_Flash_flash_data+0xf4000c68>
     f00:	1805883a 	mov	r2,r3
     f04:	8c400114 	ori	r17,r17,4
     f08:	1c000007 	ldb	r16,0(r3)
     f0c:	003f6306 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
     f10:	1c000007 	ldb	r16,0(r3)
     f14:	18800044 	addi	r2,r3,1
     f18:	8286ad26 	beq	r16,r10,29d0 <___vfprintf_internal_r+0x1ec8>
     f1c:	82fff404 	addi	r11,r16,-48
     f20:	1007883a 	mov	r3,r2
     f24:	0013883a 	mov	r9,zero
     f28:	2aff5d36 	bltu	r5,r11,ca0 <__alt_mem_Flash_flash_data+0xf4000ca0>
     f2c:	1c000007 	ldb	r16,0(r3)
     f30:	4a4002a4 	muli	r9,r9,10
     f34:	18c00044 	addi	r3,r3,1
     f38:	5a53883a 	add	r9,r11,r9
     f3c:	82fff404 	addi	r11,r16,-48
     f40:	2afffa2e 	bgeu	r5,r11,f2c <__alt_mem_Flash_flash_data+0xf4000f2c>
     f44:	483f560e 	bge	r9,zero,ca0 <__alt_mem_Flash_flash_data+0xf4000ca0>
     f48:	027fffc4 	movi	r9,-1
     f4c:	003f5406 	br	ca0 <__alt_mem_Flash_flash_data+0xf4000ca0>
     f50:	8c402014 	ori	r17,r17,128
     f54:	1805883a 	mov	r2,r3
     f58:	1c000007 	ldb	r16,0(r3)
     f5c:	003f4f06 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
     f60:	1805883a 	mov	r2,r3
     f64:	d8002e15 	stw	zero,184(sp)
     f68:	82fff404 	addi	r11,r16,-48
     f6c:	0019883a 	mov	r12,zero
     f70:	14000007 	ldb	r16,0(r2)
     f74:	630002a4 	muli	r12,r12,10
     f78:	18c00044 	addi	r3,r3,1
     f7c:	1805883a 	mov	r2,r3
     f80:	62d9883a 	add	r12,r12,r11
     f84:	82fff404 	addi	r11,r16,-48
     f88:	2afff92e 	bgeu	r5,r11,f70 <__alt_mem_Flash_flash_data+0xf4000f70>
     f8c:	db002e15 	stw	r12,184(sp)
     f90:	003f4306 	br	ca0 <__alt_mem_Flash_flash_data+0xf4000ca0>
     f94:	8c400414 	ori	r17,r17,16
     f98:	d8c02a15 	stw	r3,168(sp)
     f9c:	d9802785 	stb	r6,158(sp)
     fa0:	8880080c 	andi	r2,r17,32
     fa4:	d8c02d17 	ldw	r3,180(sp)
     fa8:	10015a26 	beq	r2,zero,1514 <___vfprintf_internal_r+0xa0c>
     fac:	db002d17 	ldw	r12,180(sp)
     fb0:	18800117 	ldw	r2,4(r3)
     fb4:	1cc00017 	ldw	r19,0(r3)
     fb8:	63000204 	addi	r12,r12,8
     fbc:	db002d15 	stw	r12,180(sp)
     fc0:	1039883a 	mov	fp,r2
     fc4:	10044516 	blt	r2,zero,20dc <___vfprintf_internal_r+0x15d4>
     fc8:	dd402783 	ldbu	r21,158(sp)
     fcc:	da403215 	stw	r9,200(sp)
     fd0:	00800044 	movi	r2,1
     fd4:	9f06b03a 	or	r3,r19,fp
     fd8:	48000216 	blt	r9,zero,fe4 <___vfprintf_internal_r+0x4dc>
     fdc:	013fdfc4 	movi	r4,-129
     fe0:	8922703a 	and	r17,r17,r4
     fe4:	1802071e 	bne	r3,zero,1804 <___vfprintf_internal_r+0xcfc>
     fe8:	4802fa26 	beq	r9,zero,1bd4 <___vfprintf_internal_r+0x10cc>
     fec:	10803fcc 	andi	r2,r2,255
     ff0:	00c00044 	movi	r3,1
     ff4:	10c22926 	beq	r2,r3,189c <___vfprintf_internal_r+0xd94>
     ff8:	00c00084 	movi	r3,2
     ffc:	10c31726 	beq	r2,r3,1c5c <___vfprintf_internal_r+0x1154>
    1000:	d8c01e04 	addi	r3,sp,120
    1004:	9808d0fa 	srli	r4,r19,3
    1008:	e00a977a 	slli	r5,fp,29
    100c:	e038d0fa 	srli	fp,fp,3
    1010:	9cc001cc 	andi	r19,r19,7
    1014:	98800c04 	addi	r2,r19,48
    1018:	18ffffc4 	addi	r3,r3,-1
    101c:	2926b03a 	or	r19,r5,r4
    1020:	18800005 	stb	r2,0(r3)
    1024:	9f08b03a 	or	r4,r19,fp
    1028:	203ff61e 	bne	r4,zero,1004 <__alt_mem_Flash_flash_data+0xf4001004>
    102c:	8900004c 	andi	r4,r17,1
    1030:	d8c03115 	stw	r3,196(sp)
    1034:	2003931e 	bne	r4,zero,1e84 <___vfprintf_internal_r+0x137c>
    1038:	dac02817 	ldw	r11,160(sp)
    103c:	58e5c83a 	sub	r18,r11,r3
    1040:	9005883a 	mov	r2,r18
    1044:	9240010e 	bge	r18,r9,104c <___vfprintf_internal_r+0x544>
    1048:	4805883a 	mov	r2,r9
    104c:	d8802b15 	stw	r2,172(sp)
    1050:	d8003415 	stw	zero,208(sp)
    1054:	a8803fcc 	andi	r2,r21,255
    1058:	1080201c 	xori	r2,r2,128
    105c:	10bfe004 	addi	r2,r2,-128
    1060:	10000326 	beq	r2,zero,1070 <___vfprintf_internal_r+0x568>
    1064:	db002b17 	ldw	r12,172(sp)
    1068:	63000044 	addi	r12,r12,1
    106c:	db002b15 	stw	r12,172(sp)
    1070:	88c0008c 	andi	r3,r17,2
    1074:	d8c02c15 	stw	r3,176(sp)
    1078:	18000326 	beq	r3,zero,1088 <___vfprintf_internal_r+0x580>
    107c:	dac02b17 	ldw	r11,172(sp)
    1080:	5ac00084 	addi	r11,r11,2
    1084:	dac02b15 	stw	r11,172(sp)
    1088:	8b00210c 	andi	r12,r17,132
    108c:	db003015 	stw	r12,192(sp)
    1090:	6001da1e 	bne	r12,zero,17fc <___vfprintf_internal_r+0xcf4>
    1094:	dac02e17 	ldw	r11,184(sp)
    1098:	db002b17 	ldw	r12,172(sp)
    109c:	5b39c83a 	sub	fp,r11,r12
    10a0:	0701d60e 	bge	zero,fp,17fc <___vfprintf_internal_r+0xcf4>
    10a4:	02400404 	movi	r9,16
    10a8:	d8c02017 	ldw	r3,128(sp)
    10ac:	d8801f17 	ldw	r2,124(sp)
    10b0:	4f053c0e 	bge	r9,fp,25a4 <___vfprintf_internal_r+0x1a9c>
    10b4:	014000b4 	movhi	r5,2
    10b8:	2966d584 	addi	r5,r5,-25770
    10bc:	d9403615 	stw	r5,216(sp)
    10c0:	482b883a 	mov	r21,r9
    10c4:	04c001c4 	movi	r19,7
    10c8:	00000306 	br	10d8 <___vfprintf_internal_r+0x5d0>
    10cc:	e73ffc04 	addi	fp,fp,-16
    10d0:	42000204 	addi	r8,r8,8
    10d4:	af00130e 	bge	r21,fp,1124 <___vfprintf_internal_r+0x61c>
    10d8:	02c000b4 	movhi	r11,2
    10dc:	18c00404 	addi	r3,r3,16
    10e0:	10800044 	addi	r2,r2,1
    10e4:	5ae6d584 	addi	r11,r11,-25770
    10e8:	42c00015 	stw	r11,0(r8)
    10ec:	45400115 	stw	r21,4(r8)
    10f0:	d8c02015 	stw	r3,128(sp)
    10f4:	d8801f15 	stw	r2,124(sp)
    10f8:	98bff40e 	bge	r19,r2,10cc <__alt_mem_Flash_flash_data+0xf40010cc>
    10fc:	b009883a 	mov	r4,r22
    1100:	b80b883a 	mov	r5,r23
    1104:	d9801e04 	addi	r6,sp,120
    1108:	0007e980 	call	7e98 <__sprint_r>
    110c:	103f721e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1110:	e73ffc04 	addi	fp,fp,-16
    1114:	d8c02017 	ldw	r3,128(sp)
    1118:	d8801f17 	ldw	r2,124(sp)
    111c:	da000404 	addi	r8,sp,16
    1120:	af3fed16 	blt	r21,fp,10d8 <__alt_mem_Flash_flash_data+0xf40010d8>
    1124:	db003617 	ldw	r12,216(sp)
    1128:	e0c7883a 	add	r3,fp,r3
    112c:	10800044 	addi	r2,r2,1
    1130:	43000015 	stw	r12,0(r8)
    1134:	47000115 	stw	fp,4(r8)
    1138:	d8c02015 	stw	r3,128(sp)
    113c:	d8801f15 	stw	r2,124(sp)
    1140:	010001c4 	movi	r4,7
    1144:	20830e16 	blt	r4,r2,1d80 <___vfprintf_internal_r+0x1278>
    1148:	d8802787 	ldb	r2,158(sp)
    114c:	42000204 	addi	r8,r8,8
    1150:	10000c26 	beq	r2,zero,1184 <___vfprintf_internal_r+0x67c>
    1154:	d8801f17 	ldw	r2,124(sp)
    1158:	d9002784 	addi	r4,sp,158
    115c:	18c00044 	addi	r3,r3,1
    1160:	10800044 	addi	r2,r2,1
    1164:	41000015 	stw	r4,0(r8)
    1168:	01000044 	movi	r4,1
    116c:	41000115 	stw	r4,4(r8)
    1170:	d8c02015 	stw	r3,128(sp)
    1174:	d8801f15 	stw	r2,124(sp)
    1178:	010001c4 	movi	r4,7
    117c:	2082a716 	blt	r4,r2,1c1c <___vfprintf_internal_r+0x1114>
    1180:	42000204 	addi	r8,r8,8
    1184:	dac02c17 	ldw	r11,176(sp)
    1188:	58000c26 	beq	r11,zero,11bc <___vfprintf_internal_r+0x6b4>
    118c:	d8801f17 	ldw	r2,124(sp)
    1190:	d9002704 	addi	r4,sp,156
    1194:	18c00084 	addi	r3,r3,2
    1198:	10800044 	addi	r2,r2,1
    119c:	41000015 	stw	r4,0(r8)
    11a0:	01000084 	movi	r4,2
    11a4:	41000115 	stw	r4,4(r8)
    11a8:	d8c02015 	stw	r3,128(sp)
    11ac:	d8801f15 	stw	r2,124(sp)
    11b0:	010001c4 	movi	r4,7
    11b4:	2082a116 	blt	r4,r2,1c3c <___vfprintf_internal_r+0x1134>
    11b8:	42000204 	addi	r8,r8,8
    11bc:	db003017 	ldw	r12,192(sp)
    11c0:	00802004 	movi	r2,128
    11c4:	60820326 	beq	r12,r2,19d4 <___vfprintf_internal_r+0xecc>
    11c8:	db003217 	ldw	r12,200(sp)
    11cc:	64abc83a 	sub	r21,r12,r18
    11d0:	0540260e 	bge	zero,r21,126c <___vfprintf_internal_r+0x764>
    11d4:	07000404 	movi	fp,16
    11d8:	d8801f17 	ldw	r2,124(sp)
    11dc:	e544570e 	bge	fp,r21,233c <___vfprintf_internal_r+0x1834>
    11e0:	014000b4 	movhi	r5,2
    11e4:	2966d184 	addi	r5,r5,-25786
    11e8:	d9402c15 	stw	r5,176(sp)
    11ec:	04c001c4 	movi	r19,7
    11f0:	00000306 	br	1200 <___vfprintf_internal_r+0x6f8>
    11f4:	ad7ffc04 	addi	r21,r21,-16
    11f8:	42000204 	addi	r8,r8,8
    11fc:	e540110e 	bge	fp,r21,1244 <___vfprintf_internal_r+0x73c>
    1200:	18c00404 	addi	r3,r3,16
    1204:	10800044 	addi	r2,r2,1
    1208:	45000015 	stw	r20,0(r8)
    120c:	47000115 	stw	fp,4(r8)
    1210:	d8c02015 	stw	r3,128(sp)
    1214:	d8801f15 	stw	r2,124(sp)
    1218:	98bff60e 	bge	r19,r2,11f4 <__alt_mem_Flash_flash_data+0xf40011f4>
    121c:	b009883a 	mov	r4,r22
    1220:	b80b883a 	mov	r5,r23
    1224:	d9801e04 	addi	r6,sp,120
    1228:	0007e980 	call	7e98 <__sprint_r>
    122c:	103f2a1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1230:	ad7ffc04 	addi	r21,r21,-16
    1234:	d8c02017 	ldw	r3,128(sp)
    1238:	d8801f17 	ldw	r2,124(sp)
    123c:	da000404 	addi	r8,sp,16
    1240:	e57fef16 	blt	fp,r21,1200 <__alt_mem_Flash_flash_data+0xf4001200>
    1244:	dac02c17 	ldw	r11,176(sp)
    1248:	1d47883a 	add	r3,r3,r21
    124c:	10800044 	addi	r2,r2,1
    1250:	42c00015 	stw	r11,0(r8)
    1254:	45400115 	stw	r21,4(r8)
    1258:	d8c02015 	stw	r3,128(sp)
    125c:	d8801f15 	stw	r2,124(sp)
    1260:	010001c4 	movi	r4,7
    1264:	20826516 	blt	r4,r2,1bfc <___vfprintf_internal_r+0x10f4>
    1268:	42000204 	addi	r8,r8,8
    126c:	8880400c 	andi	r2,r17,256
    1270:	1001901e 	bne	r2,zero,18b4 <___vfprintf_internal_r+0xdac>
    1274:	d8801f17 	ldw	r2,124(sp)
    1278:	db003117 	ldw	r12,196(sp)
    127c:	1c87883a 	add	r3,r3,r18
    1280:	10800044 	addi	r2,r2,1
    1284:	43000015 	stw	r12,0(r8)
    1288:	44800115 	stw	r18,4(r8)
    128c:	d8c02015 	stw	r3,128(sp)
    1290:	d8801f15 	stw	r2,124(sp)
    1294:	010001c4 	movi	r4,7
    1298:	20824016 	blt	r4,r2,1b9c <___vfprintf_internal_r+0x1094>
    129c:	42000204 	addi	r8,r8,8
    12a0:	8c40010c 	andi	r17,r17,4
    12a4:	88003126 	beq	r17,zero,136c <___vfprintf_internal_r+0x864>
    12a8:	db002e17 	ldw	r12,184(sp)
    12ac:	dac02b17 	ldw	r11,172(sp)
    12b0:	62e1c83a 	sub	r16,r12,r11
    12b4:	04002d0e 	bge	zero,r16,136c <___vfprintf_internal_r+0x864>
    12b8:	04400404 	movi	r17,16
    12bc:	d8801f17 	ldw	r2,124(sp)
    12c0:	8c05150e 	bge	r17,r16,2718 <___vfprintf_internal_r+0x1c10>
    12c4:	010000b4 	movhi	r4,2
    12c8:	2126d584 	addi	r4,r4,-25770
    12cc:	d9003615 	stw	r4,216(sp)
    12d0:	048001c4 	movi	r18,7
    12d4:	00000306 	br	12e4 <___vfprintf_internal_r+0x7dc>
    12d8:	843ffc04 	addi	r16,r16,-16
    12dc:	42000204 	addi	r8,r8,8
    12e0:	8c00130e 	bge	r17,r16,1330 <___vfprintf_internal_r+0x828>
    12e4:	014000b4 	movhi	r5,2
    12e8:	18c00404 	addi	r3,r3,16
    12ec:	10800044 	addi	r2,r2,1
    12f0:	2966d584 	addi	r5,r5,-25770
    12f4:	41400015 	stw	r5,0(r8)
    12f8:	44400115 	stw	r17,4(r8)
    12fc:	d8c02015 	stw	r3,128(sp)
    1300:	d8801f15 	stw	r2,124(sp)
    1304:	90bff40e 	bge	r18,r2,12d8 <__alt_mem_Flash_flash_data+0xf40012d8>
    1308:	b009883a 	mov	r4,r22
    130c:	b80b883a 	mov	r5,r23
    1310:	d9801e04 	addi	r6,sp,120
    1314:	0007e980 	call	7e98 <__sprint_r>
    1318:	103eef1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    131c:	843ffc04 	addi	r16,r16,-16
    1320:	d8c02017 	ldw	r3,128(sp)
    1324:	d8801f17 	ldw	r2,124(sp)
    1328:	da000404 	addi	r8,sp,16
    132c:	8c3fed16 	blt	r17,r16,12e4 <__alt_mem_Flash_flash_data+0xf40012e4>
    1330:	dac03617 	ldw	r11,216(sp)
    1334:	1c07883a 	add	r3,r3,r16
    1338:	10800044 	addi	r2,r2,1
    133c:	42c00015 	stw	r11,0(r8)
    1340:	44000115 	stw	r16,4(r8)
    1344:	d8c02015 	stw	r3,128(sp)
    1348:	d8801f15 	stw	r2,124(sp)
    134c:	010001c4 	movi	r4,7
    1350:	2080060e 	bge	r4,r2,136c <___vfprintf_internal_r+0x864>
    1354:	b009883a 	mov	r4,r22
    1358:	b80b883a 	mov	r5,r23
    135c:	d9801e04 	addi	r6,sp,120
    1360:	0007e980 	call	7e98 <__sprint_r>
    1364:	103edc1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1368:	d8c02017 	ldw	r3,128(sp)
    136c:	d8802b17 	ldw	r2,172(sp)
    1370:	db002e17 	ldw	r12,184(sp)
    1374:	1300010e 	bge	r2,r12,137c <___vfprintf_internal_r+0x874>
    1378:	6005883a 	mov	r2,r12
    137c:	dac02f17 	ldw	r11,188(sp)
    1380:	5897883a 	add	r11,r11,r2
    1384:	dac02f15 	stw	r11,188(sp)
    1388:	18020c1e 	bne	r3,zero,1bbc <___vfprintf_internal_r+0x10b4>
    138c:	d8001f15 	stw	zero,124(sp)
    1390:	da000404 	addi	r8,sp,16
    1394:	003e1706 	br	bf4 <__alt_mem_Flash_flash_data+0xf4000bf4>
    1398:	8c400414 	ori	r17,r17,16
    139c:	d8c02a15 	stw	r3,168(sp)
    13a0:	8880080c 	andi	r2,r17,32
    13a4:	10010126 	beq	r2,zero,17ac <___vfprintf_internal_r+0xca4>
    13a8:	db002d17 	ldw	r12,180(sp)
    13ac:	0005883a 	mov	r2,zero
    13b0:	64c00017 	ldw	r19,0(r12)
    13b4:	67000117 	ldw	fp,4(r12)
    13b8:	63000204 	addi	r12,r12,8
    13bc:	db002d15 	stw	r12,180(sp)
    13c0:	9f06b03a 	or	r3,r19,fp
    13c4:	d8002785 	stb	zero,158(sp)
    13c8:	da403215 	stw	r9,200(sp)
    13cc:	002b883a 	mov	r21,zero
    13d0:	003f0106 	br	fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    13d4:	8c400414 	ori	r17,r17,16
    13d8:	d8c02a15 	stw	r3,168(sp)
    13dc:	8880080c 	andi	r2,r17,32
    13e0:	1000e326 	beq	r2,zero,1770 <___vfprintf_internal_r+0xc68>
    13e4:	dac02d17 	ldw	r11,180(sp)
    13e8:	00800044 	movi	r2,1
    13ec:	5cc00017 	ldw	r19,0(r11)
    13f0:	5f000117 	ldw	fp,4(r11)
    13f4:	5ac00204 	addi	r11,r11,8
    13f8:	dac02d15 	stw	r11,180(sp)
    13fc:	9f06b03a 	or	r3,r19,fp
    1400:	003ff006 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    1404:	db002d17 	ldw	r12,180(sp)
    1408:	dac02d17 	ldw	r11,180(sp)
    140c:	d8c02a15 	stw	r3,168(sp)
    1410:	63000017 	ldw	r12,0(r12)
    1414:	5ac00117 	ldw	r11,4(r11)
    1418:	d9802785 	stb	r6,158(sp)
    141c:	6009883a 	mov	r4,r12
    1420:	580b883a 	mov	r5,r11
    1424:	db003715 	stw	r12,220(sp)
    1428:	da003f15 	stw	r8,252(sp)
    142c:	da403e15 	stw	r9,248(sp)
    1430:	dac03915 	stw	r11,228(sp)
    1434:	0007b980 	call	7b98 <__fpclassifyd>
    1438:	db002d17 	ldw	r12,180(sp)
    143c:	04800044 	movi	r18,1
    1440:	da003f17 	ldw	r8,252(sp)
    1444:	64c00204 	addi	r19,r12,8
    1448:	da403e17 	ldw	r9,248(sp)
    144c:	d9003717 	ldw	r4,220(sp)
    1450:	d9403917 	ldw	r5,228(sp)
    1454:	14832b1e 	bne	r2,r18,2104 <___vfprintf_internal_r+0x15fc>
    1458:	000d883a 	mov	r6,zero
    145c:	000f883a 	mov	r7,zero
    1460:	000baa00 	call	baa0 <__ledf2>
    1464:	da003f17 	ldw	r8,252(sp)
    1468:	1004b716 	blt	r2,zero,2748 <___vfprintf_internal_r+0x1c40>
    146c:	dd402783 	ldbu	r21,158(sp)
    1470:	008011c4 	movi	r2,71
    1474:	14040e0e 	bge	r2,r16,24b0 <___vfprintf_internal_r+0x19a8>
    1478:	00c000b4 	movhi	r3,2
    147c:	18e6c204 	addi	r3,r3,-25848
    1480:	d8c03115 	stw	r3,196(sp)
    1484:	02c000c4 	movi	r11,3
    1488:	00bfdfc4 	movi	r2,-129
    148c:	dac02b15 	stw	r11,172(sp)
    1490:	88a2703a 	and	r17,r17,r2
    1494:	dcc02d15 	stw	r19,180(sp)
    1498:	5825883a 	mov	r18,r11
    149c:	d8003215 	stw	zero,200(sp)
    14a0:	d8003415 	stw	zero,208(sp)
    14a4:	003eeb06 	br	1054 <__alt_mem_Flash_flash_data+0xf4001054>
    14a8:	db002d17 	ldw	r12,180(sp)
    14ac:	00800c04 	movi	r2,48
    14b0:	d8802705 	stb	r2,156(sp)
    14b4:	64c00017 	ldw	r19,0(r12)
    14b8:	00801e04 	movi	r2,120
    14bc:	d8802745 	stb	r2,157(sp)
    14c0:	008000b4 	movhi	r2,2
    14c4:	10a6ca04 	addi	r2,r2,-25816
    14c8:	63000104 	addi	r12,r12,4
    14cc:	d8c02a15 	stw	r3,168(sp)
    14d0:	d8803b15 	stw	r2,236(sp)
    14d4:	0039883a 	mov	fp,zero
    14d8:	8c400094 	ori	r17,r17,2
    14dc:	db002d15 	stw	r12,180(sp)
    14e0:	00800084 	movi	r2,2
    14e4:	04001e04 	movi	r16,120
    14e8:	9807883a 	mov	r3,r19
    14ec:	003fb506 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    14f0:	8c400214 	ori	r17,r17,8
    14f4:	1805883a 	mov	r2,r3
    14f8:	1c000007 	ldb	r16,0(r3)
    14fc:	003de706 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1500:	d8c02a15 	stw	r3,168(sp)
    1504:	d9802785 	stb	r6,158(sp)
    1508:	8880080c 	andi	r2,r17,32
    150c:	d8c02d17 	ldw	r3,180(sp)
    1510:	103ea61e 	bne	r2,zero,fac <__alt_mem_Flash_flash_data+0xf4000fac>
    1514:	8880040c 	andi	r2,r17,16
    1518:	1002221e 	bne	r2,zero,1da4 <___vfprintf_internal_r+0x129c>
    151c:	8880100c 	andi	r2,r17,64
    1520:	10022026 	beq	r2,zero,1da4 <___vfprintf_internal_r+0x129c>
    1524:	1cc0000f 	ldh	r19,0(r3)
    1528:	db002d17 	ldw	r12,180(sp)
    152c:	9839d7fa 	srai	fp,r19,31
    1530:	63000104 	addi	r12,r12,4
    1534:	db002d15 	stw	r12,180(sp)
    1538:	e005883a 	mov	r2,fp
    153c:	003ea106 	br	fc4 <__alt_mem_Flash_flash_data+0xf4000fc4>
    1540:	8c401014 	ori	r17,r17,64
    1544:	1805883a 	mov	r2,r3
    1548:	1c000007 	ldb	r16,0(r3)
    154c:	003dd306 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1550:	1c000007 	ldb	r16,0(r3)
    1554:	81c3e926 	beq	r16,r7,24fc <___vfprintf_internal_r+0x19f4>
    1558:	8c400414 	ori	r17,r17,16
    155c:	1805883a 	mov	r2,r3
    1560:	003dce06 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1564:	d8c02a15 	stw	r3,168(sp)
    1568:	d9802785 	stb	r6,158(sp)
    156c:	8880080c 	andi	r2,r17,32
    1570:	10034726 	beq	r2,zero,2290 <___vfprintf_internal_r+0x1788>
    1574:	db002d17 	ldw	r12,180(sp)
    1578:	dac02f17 	ldw	r11,188(sp)
    157c:	60800017 	ldw	r2,0(r12)
    1580:	5807d7fa 	srai	r3,r11,31
    1584:	63000104 	addi	r12,r12,4
    1588:	db002d15 	stw	r12,180(sp)
    158c:	12c00015 	stw	r11,0(r2)
    1590:	10c00115 	stw	r3,4(r2)
    1594:	003d9706 	br	bf4 <__alt_mem_Flash_flash_data+0xf4000bf4>
    1598:	030000b4 	movhi	r12,2
    159c:	6326c504 	addi	r12,r12,-25836
    15a0:	d8c02a15 	stw	r3,168(sp)
    15a4:	d9802785 	stb	r6,158(sp)
    15a8:	db003b15 	stw	r12,236(sp)
    15ac:	88c0080c 	andi	r3,r17,32
    15b0:	d8802d17 	ldw	r2,180(sp)
    15b4:	18005b26 	beq	r3,zero,1724 <___vfprintf_internal_r+0xc1c>
    15b8:	dac02d17 	ldw	r11,180(sp)
    15bc:	14c00017 	ldw	r19,0(r2)
    15c0:	17000117 	ldw	fp,4(r2)
    15c4:	5ac00204 	addi	r11,r11,8
    15c8:	dac02d15 	stw	r11,180(sp)
    15cc:	8880004c 	andi	r2,r17,1
    15d0:	10022926 	beq	r2,zero,1e78 <___vfprintf_internal_r+0x1370>
    15d4:	9f06b03a 	or	r3,r19,fp
    15d8:	18032b26 	beq	r3,zero,2288 <___vfprintf_internal_r+0x1780>
    15dc:	00800c04 	movi	r2,48
    15e0:	d8802705 	stb	r2,156(sp)
    15e4:	dc002745 	stb	r16,157(sp)
    15e8:	8c400094 	ori	r17,r17,2
    15ec:	00800084 	movi	r2,2
    15f0:	003f7406 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    15f4:	30803fcc 	andi	r2,r6,255
    15f8:	1080201c 	xori	r2,r2,128
    15fc:	10bfe004 	addi	r2,r2,-128
    1600:	1003351e 	bne	r2,zero,22d8 <___vfprintf_internal_r+0x17d0>
    1604:	1805883a 	mov	r2,r3
    1608:	01800804 	movi	r6,32
    160c:	1c000007 	ldb	r16,0(r3)
    1610:	003da206 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1614:	dac02d17 	ldw	r11,180(sp)
    1618:	db002d17 	ldw	r12,180(sp)
    161c:	5ac00017 	ldw	r11,0(r11)
    1620:	dac02e15 	stw	r11,184(sp)
    1624:	62c00104 	addi	r11,r12,4
    1628:	db002e17 	ldw	r12,184(sp)
    162c:	6003ad16 	blt	r12,zero,24e4 <___vfprintf_internal_r+0x19dc>
    1630:	dac02d15 	stw	r11,180(sp)
    1634:	1805883a 	mov	r2,r3
    1638:	1c000007 	ldb	r16,0(r3)
    163c:	003d9706 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1640:	1805883a 	mov	r2,r3
    1644:	01800ac4 	movi	r6,43
    1648:	1c000007 	ldb	r16,0(r3)
    164c:	003d9306 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1650:	db002d17 	ldw	r12,180(sp)
    1654:	d8c02a15 	stw	r3,168(sp)
    1658:	00c00044 	movi	r3,1
    165c:	60800017 	ldw	r2,0(r12)
    1660:	63000104 	addi	r12,r12,4
    1664:	d8c02b15 	stw	r3,172(sp)
    1668:	d8002785 	stb	zero,158(sp)
    166c:	d8801405 	stb	r2,80(sp)
    1670:	db002d15 	stw	r12,180(sp)
    1674:	dac01404 	addi	r11,sp,80
    1678:	1825883a 	mov	r18,r3
    167c:	d8003215 	stw	zero,200(sp)
    1680:	d8003415 	stw	zero,208(sp)
    1684:	dac03115 	stw	r11,196(sp)
    1688:	0005883a 	mov	r2,zero
    168c:	003e7806 	br	1070 <__alt_mem_Flash_flash_data+0xf4001070>
    1690:	dac02d17 	ldw	r11,180(sp)
    1694:	db002d17 	ldw	r12,180(sp)
    1698:	d8c02a15 	stw	r3,168(sp)
    169c:	5ac00017 	ldw	r11,0(r11)
    16a0:	d8002785 	stb	zero,158(sp)
    16a4:	64c00104 	addi	r19,r12,4
    16a8:	dac03115 	stw	r11,196(sp)
    16ac:	5803fe26 	beq	r11,zero,26a8 <___vfprintf_internal_r+0x1ba0>
    16b0:	d9003117 	ldw	r4,196(sp)
    16b4:	4803b416 	blt	r9,zero,2588 <___vfprintf_internal_r+0x1a80>
    16b8:	480d883a 	mov	r6,r9
    16bc:	000b883a 	mov	r5,zero
    16c0:	da003f15 	stw	r8,252(sp)
    16c4:	da403e15 	stw	r9,248(sp)
    16c8:	00060840 	call	6084 <memchr>
    16cc:	da003f17 	ldw	r8,252(sp)
    16d0:	da403e17 	ldw	r9,248(sp)
    16d4:	10043026 	beq	r2,zero,2798 <___vfprintf_internal_r+0x1c90>
    16d8:	d8c03117 	ldw	r3,196(sp)
    16dc:	10e5c83a 	sub	r18,r2,r3
    16e0:	4c836b16 	blt	r9,r18,2490 <___vfprintf_internal_r+0x1988>
    16e4:	9005883a 	mov	r2,r18
    16e8:	9003ac16 	blt	r18,zero,259c <___vfprintf_internal_r+0x1a94>
    16ec:	dd402783 	ldbu	r21,158(sp)
    16f0:	d8802b15 	stw	r2,172(sp)
    16f4:	dcc02d15 	stw	r19,180(sp)
    16f8:	d8003215 	stw	zero,200(sp)
    16fc:	d8003415 	stw	zero,208(sp)
    1700:	003e5406 	br	1054 <__alt_mem_Flash_flash_data+0xf4001054>
    1704:	008000b4 	movhi	r2,2
    1708:	10a6ca04 	addi	r2,r2,-25816
    170c:	d8c02a15 	stw	r3,168(sp)
    1710:	d8803b15 	stw	r2,236(sp)
    1714:	d9802785 	stb	r6,158(sp)
    1718:	88c0080c 	andi	r3,r17,32
    171c:	d8802d17 	ldw	r2,180(sp)
    1720:	183fa51e 	bne	r3,zero,15b8 <__alt_mem_Flash_flash_data+0xf40015b8>
    1724:	88c0040c 	andi	r3,r17,16
    1728:	1802ee26 	beq	r3,zero,22e4 <___vfprintf_internal_r+0x17dc>
    172c:	db002d17 	ldw	r12,180(sp)
    1730:	14c00017 	ldw	r19,0(r2)
    1734:	0039883a 	mov	fp,zero
    1738:	63000104 	addi	r12,r12,4
    173c:	db002d15 	stw	r12,180(sp)
    1740:	003fa206 	br	15cc <__alt_mem_Flash_flash_data+0xf40015cc>
    1744:	8c400054 	ori	r17,r17,1
    1748:	1805883a 	mov	r2,r3
    174c:	1c000007 	ldb	r16,0(r3)
    1750:	003d5206 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1754:	8c400814 	ori	r17,r17,32
    1758:	1805883a 	mov	r2,r3
    175c:	1c000007 	ldb	r16,0(r3)
    1760:	003d4e06 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    1764:	d8c02a15 	stw	r3,168(sp)
    1768:	8880080c 	andi	r2,r17,32
    176c:	103f1d1e 	bne	r2,zero,13e4 <__alt_mem_Flash_flash_data+0xf40013e4>
    1770:	8880040c 	andi	r2,r17,16
    1774:	1001b81e 	bne	r2,zero,1e58 <___vfprintf_internal_r+0x1350>
    1778:	8880100c 	andi	r2,r17,64
    177c:	1001b626 	beq	r2,zero,1e58 <___vfprintf_internal_r+0x1350>
    1780:	dac02d17 	ldw	r11,180(sp)
    1784:	0039883a 	mov	fp,zero
    1788:	00800044 	movi	r2,1
    178c:	5cc0000b 	ldhu	r19,0(r11)
    1790:	5ac00104 	addi	r11,r11,4
    1794:	dac02d15 	stw	r11,180(sp)
    1798:	9807883a 	mov	r3,r19
    179c:	003f0906 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    17a0:	d8c02a15 	stw	r3,168(sp)
    17a4:	8880080c 	andi	r2,r17,32
    17a8:	103eff1e 	bne	r2,zero,13a8 <__alt_mem_Flash_flash_data+0xf40013a8>
    17ac:	8880040c 	andi	r2,r17,16
    17b0:	1001a11e 	bne	r2,zero,1e38 <___vfprintf_internal_r+0x1330>
    17b4:	8880100c 	andi	r2,r17,64
    17b8:	10019f26 	beq	r2,zero,1e38 <___vfprintf_internal_r+0x1330>
    17bc:	db002d17 	ldw	r12,180(sp)
    17c0:	0039883a 	mov	fp,zero
    17c4:	0005883a 	mov	r2,zero
    17c8:	64c0000b 	ldhu	r19,0(r12)
    17cc:	63000104 	addi	r12,r12,4
    17d0:	db002d15 	stw	r12,180(sp)
    17d4:	9807883a 	mov	r3,r19
    17d8:	003efa06 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    17dc:	d8c02a15 	stw	r3,168(sp)
    17e0:	d9802785 	stb	r6,158(sp)
    17e4:	803db626 	beq	r16,zero,ec0 <__alt_mem_Flash_flash_data+0xf4000ec0>
    17e8:	00c00044 	movi	r3,1
    17ec:	d8c02b15 	stw	r3,172(sp)
    17f0:	dc001405 	stb	r16,80(sp)
    17f4:	d8002785 	stb	zero,158(sp)
    17f8:	003f9e06 	br	1674 <__alt_mem_Flash_flash_data+0xf4001674>
    17fc:	d8c02017 	ldw	r3,128(sp)
    1800:	003e5306 	br	1150 <__alt_mem_Flash_flash_data+0xf4001150>
    1804:	10803fcc 	andi	r2,r2,255
    1808:	00c00044 	movi	r3,1
    180c:	10fdfa1e 	bne	r2,r3,ff8 <__alt_mem_Flash_flash_data+0xf4000ff8>
    1810:	e000021e 	bne	fp,zero,181c <___vfprintf_internal_r+0xd14>
    1814:	00800244 	movi	r2,9
    1818:	14c0202e 	bgeu	r2,r19,189c <___vfprintf_internal_r+0xd94>
    181c:	dc002b15 	stw	r16,172(sp)
    1820:	dc402c15 	stw	r17,176(sp)
    1824:	9821883a 	mov	r16,r19
    1828:	e023883a 	mov	r17,fp
    182c:	dc801e04 	addi	r18,sp,120
    1830:	4827883a 	mov	r19,r9
    1834:	4039883a 	mov	fp,r8
    1838:	8009883a 	mov	r4,r16
    183c:	880b883a 	mov	r5,r17
    1840:	01800284 	movi	r6,10
    1844:	000f883a 	mov	r7,zero
    1848:	000a1180 	call	a118 <__umoddi3>
    184c:	10800c04 	addi	r2,r2,48
    1850:	94bfffc4 	addi	r18,r18,-1
    1854:	8009883a 	mov	r4,r16
    1858:	880b883a 	mov	r5,r17
    185c:	01800284 	movi	r6,10
    1860:	000f883a 	mov	r7,zero
    1864:	90800005 	stb	r2,0(r18)
    1868:	0009b580 	call	9b58 <__udivdi3>
    186c:	1021883a 	mov	r16,r2
    1870:	10c4b03a 	or	r2,r2,r3
    1874:	1823883a 	mov	r17,r3
    1878:	103fef1e 	bne	r2,zero,1838 <__alt_mem_Flash_flash_data+0xf4001838>
    187c:	dac02817 	ldw	r11,160(sp)
    1880:	dc803115 	stw	r18,196(sp)
    1884:	dc002b17 	ldw	r16,172(sp)
    1888:	dc402c17 	ldw	r17,176(sp)
    188c:	9813883a 	mov	r9,r19
    1890:	e011883a 	mov	r8,fp
    1894:	5ca5c83a 	sub	r18,r11,r18
    1898:	003de906 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    189c:	9cc00c04 	addi	r19,r19,48
    18a0:	d8c01dc4 	addi	r3,sp,119
    18a4:	dcc01dc5 	stb	r19,119(sp)
    18a8:	dc803c17 	ldw	r18,240(sp)
    18ac:	d8c03115 	stw	r3,196(sp)
    18b0:	003de306 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    18b4:	00801944 	movi	r2,101
    18b8:	1400710e 	bge	r2,r16,1a80 <___vfprintf_internal_r+0xf78>
    18bc:	d9003717 	ldw	r4,220(sp)
    18c0:	d9403917 	ldw	r5,228(sp)
    18c4:	000d883a 	mov	r6,zero
    18c8:	000f883a 	mov	r7,zero
    18cc:	d8c03d15 	stw	r3,244(sp)
    18d0:	da003f15 	stw	r8,252(sp)
    18d4:	000b93c0 	call	b93c <__eqdf2>
    18d8:	d8c03d17 	ldw	r3,244(sp)
    18dc:	da003f17 	ldw	r8,252(sp)
    18e0:	1000ef1e 	bne	r2,zero,1ca0 <___vfprintf_internal_r+0x1198>
    18e4:	d8801f17 	ldw	r2,124(sp)
    18e8:	010000b4 	movhi	r4,2
    18ec:	2126d104 	addi	r4,r4,-25788
    18f0:	18c00044 	addi	r3,r3,1
    18f4:	10800044 	addi	r2,r2,1
    18f8:	41000015 	stw	r4,0(r8)
    18fc:	01000044 	movi	r4,1
    1900:	41000115 	stw	r4,4(r8)
    1904:	d8c02015 	stw	r3,128(sp)
    1908:	d8801f15 	stw	r2,124(sp)
    190c:	010001c4 	movi	r4,7
    1910:	20828e16 	blt	r4,r2,234c <___vfprintf_internal_r+0x1844>
    1914:	42000204 	addi	r8,r8,8
    1918:	d8802617 	ldw	r2,152(sp)
    191c:	dac03317 	ldw	r11,204(sp)
    1920:	12c00216 	blt	r2,r11,192c <___vfprintf_internal_r+0xe24>
    1924:	8880004c 	andi	r2,r17,1
    1928:	103e5d26 	beq	r2,zero,12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    192c:	db003817 	ldw	r12,224(sp)
    1930:	d8801f17 	ldw	r2,124(sp)
    1934:	dac03517 	ldw	r11,212(sp)
    1938:	1b07883a 	add	r3,r3,r12
    193c:	10800044 	addi	r2,r2,1
    1940:	42c00015 	stw	r11,0(r8)
    1944:	43000115 	stw	r12,4(r8)
    1948:	d8c02015 	stw	r3,128(sp)
    194c:	d8801f15 	stw	r2,124(sp)
    1950:	010001c4 	movi	r4,7
    1954:	2082ed16 	blt	r4,r2,250c <___vfprintf_internal_r+0x1a04>
    1958:	42000204 	addi	r8,r8,8
    195c:	db003317 	ldw	r12,204(sp)
    1960:	643fffc4 	addi	r16,r12,-1
    1964:	043e4e0e 	bge	zero,r16,12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    1968:	04800404 	movi	r18,16
    196c:	d8801f17 	ldw	r2,124(sp)
    1970:	94007e0e 	bge	r18,r16,1b6c <___vfprintf_internal_r+0x1064>
    1974:	014000b4 	movhi	r5,2
    1978:	2966d184 	addi	r5,r5,-25786
    197c:	d9402c15 	stw	r5,176(sp)
    1980:	054001c4 	movi	r21,7
    1984:	00000306 	br	1994 <___vfprintf_internal_r+0xe8c>
    1988:	42000204 	addi	r8,r8,8
    198c:	843ffc04 	addi	r16,r16,-16
    1990:	9400790e 	bge	r18,r16,1b78 <___vfprintf_internal_r+0x1070>
    1994:	18c00404 	addi	r3,r3,16
    1998:	10800044 	addi	r2,r2,1
    199c:	45000015 	stw	r20,0(r8)
    19a0:	44800115 	stw	r18,4(r8)
    19a4:	d8c02015 	stw	r3,128(sp)
    19a8:	d8801f15 	stw	r2,124(sp)
    19ac:	a8bff60e 	bge	r21,r2,1988 <__alt_mem_Flash_flash_data+0xf4001988>
    19b0:	b009883a 	mov	r4,r22
    19b4:	b80b883a 	mov	r5,r23
    19b8:	d9801e04 	addi	r6,sp,120
    19bc:	0007e980 	call	7e98 <__sprint_r>
    19c0:	103d451e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    19c4:	d8c02017 	ldw	r3,128(sp)
    19c8:	d8801f17 	ldw	r2,124(sp)
    19cc:	da000404 	addi	r8,sp,16
    19d0:	003fee06 	br	198c <__alt_mem_Flash_flash_data+0xf400198c>
    19d4:	dac02e17 	ldw	r11,184(sp)
    19d8:	db002b17 	ldw	r12,172(sp)
    19dc:	5b2bc83a 	sub	r21,r11,r12
    19e0:	057df90e 	bge	zero,r21,11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    19e4:	07000404 	movi	fp,16
    19e8:	d8801f17 	ldw	r2,124(sp)
    19ec:	e543640e 	bge	fp,r21,2780 <___vfprintf_internal_r+0x1c78>
    19f0:	014000b4 	movhi	r5,2
    19f4:	2966d184 	addi	r5,r5,-25786
    19f8:	d9402c15 	stw	r5,176(sp)
    19fc:	04c001c4 	movi	r19,7
    1a00:	00000306 	br	1a10 <___vfprintf_internal_r+0xf08>
    1a04:	ad7ffc04 	addi	r21,r21,-16
    1a08:	42000204 	addi	r8,r8,8
    1a0c:	e540110e 	bge	fp,r21,1a54 <___vfprintf_internal_r+0xf4c>
    1a10:	18c00404 	addi	r3,r3,16
    1a14:	10800044 	addi	r2,r2,1
    1a18:	45000015 	stw	r20,0(r8)
    1a1c:	47000115 	stw	fp,4(r8)
    1a20:	d8c02015 	stw	r3,128(sp)
    1a24:	d8801f15 	stw	r2,124(sp)
    1a28:	98bff60e 	bge	r19,r2,1a04 <__alt_mem_Flash_flash_data+0xf4001a04>
    1a2c:	b009883a 	mov	r4,r22
    1a30:	b80b883a 	mov	r5,r23
    1a34:	d9801e04 	addi	r6,sp,120
    1a38:	0007e980 	call	7e98 <__sprint_r>
    1a3c:	103d261e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1a40:	ad7ffc04 	addi	r21,r21,-16
    1a44:	d8c02017 	ldw	r3,128(sp)
    1a48:	d8801f17 	ldw	r2,124(sp)
    1a4c:	da000404 	addi	r8,sp,16
    1a50:	e57fef16 	blt	fp,r21,1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    1a54:	dac02c17 	ldw	r11,176(sp)
    1a58:	1d47883a 	add	r3,r3,r21
    1a5c:	10800044 	addi	r2,r2,1
    1a60:	42c00015 	stw	r11,0(r8)
    1a64:	45400115 	stw	r21,4(r8)
    1a68:	d8c02015 	stw	r3,128(sp)
    1a6c:	d8801f15 	stw	r2,124(sp)
    1a70:	010001c4 	movi	r4,7
    1a74:	20819116 	blt	r4,r2,20bc <___vfprintf_internal_r+0x15b4>
    1a78:	42000204 	addi	r8,r8,8
    1a7c:	003dd206 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    1a80:	db003317 	ldw	r12,204(sp)
    1a84:	00800044 	movi	r2,1
    1a88:	18c00044 	addi	r3,r3,1
    1a8c:	1301530e 	bge	r2,r12,1fdc <___vfprintf_internal_r+0x14d4>
    1a90:	dc001f17 	ldw	r16,124(sp)
    1a94:	dac03117 	ldw	r11,196(sp)
    1a98:	00800044 	movi	r2,1
    1a9c:	84000044 	addi	r16,r16,1
    1aa0:	40800115 	stw	r2,4(r8)
    1aa4:	42c00015 	stw	r11,0(r8)
    1aa8:	d8c02015 	stw	r3,128(sp)
    1aac:	dc001f15 	stw	r16,124(sp)
    1ab0:	008001c4 	movi	r2,7
    1ab4:	14016b16 	blt	r2,r16,2064 <___vfprintf_internal_r+0x155c>
    1ab8:	42000204 	addi	r8,r8,8
    1abc:	db003817 	ldw	r12,224(sp)
    1ac0:	dac03517 	ldw	r11,212(sp)
    1ac4:	84000044 	addi	r16,r16,1
    1ac8:	1b07883a 	add	r3,r3,r12
    1acc:	42c00015 	stw	r11,0(r8)
    1ad0:	43000115 	stw	r12,4(r8)
    1ad4:	d8c02015 	stw	r3,128(sp)
    1ad8:	dc001f15 	stw	r16,124(sp)
    1adc:	008001c4 	movi	r2,7
    1ae0:	14016916 	blt	r2,r16,2088 <___vfprintf_internal_r+0x1580>
    1ae4:	44800204 	addi	r18,r8,8
    1ae8:	d9003717 	ldw	r4,220(sp)
    1aec:	d9403917 	ldw	r5,228(sp)
    1af0:	000d883a 	mov	r6,zero
    1af4:	000f883a 	mov	r7,zero
    1af8:	d8c03d15 	stw	r3,244(sp)
    1afc:	000b93c0 	call	b93c <__eqdf2>
    1b00:	d8c03d17 	ldw	r3,244(sp)
    1b04:	db003317 	ldw	r12,204(sp)
    1b08:	1000ad26 	beq	r2,zero,1dc0 <___vfprintf_internal_r+0x12b8>
    1b0c:	dac03117 	ldw	r11,196(sp)
    1b10:	60bfffc4 	addi	r2,r12,-1
    1b14:	1887883a 	add	r3,r3,r2
    1b18:	59000044 	addi	r4,r11,1
    1b1c:	84000044 	addi	r16,r16,1
    1b20:	90800115 	stw	r2,4(r18)
    1b24:	91000015 	stw	r4,0(r18)
    1b28:	d8c02015 	stw	r3,128(sp)
    1b2c:	dc001f15 	stw	r16,124(sp)
    1b30:	008001c4 	movi	r2,7
    1b34:	14014216 	blt	r2,r16,2040 <___vfprintf_internal_r+0x1538>
    1b38:	94800204 	addi	r18,r18,8
    1b3c:	dac03a17 	ldw	r11,232(sp)
    1b40:	dd4022c4 	addi	r21,sp,139
    1b44:	84000044 	addi	r16,r16,1
    1b48:	1ac7883a 	add	r3,r3,r11
    1b4c:	95400015 	stw	r21,0(r18)
    1b50:	92c00115 	stw	r11,4(r18)
    1b54:	d8c02015 	stw	r3,128(sp)
    1b58:	dc001f15 	stw	r16,124(sp)
    1b5c:	008001c4 	movi	r2,7
    1b60:	14000e16 	blt	r2,r16,1b9c <___vfprintf_internal_r+0x1094>
    1b64:	92000204 	addi	r8,r18,8
    1b68:	003dcd06 	br	12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    1b6c:	010000b4 	movhi	r4,2
    1b70:	2126d184 	addi	r4,r4,-25786
    1b74:	d9002c15 	stw	r4,176(sp)
    1b78:	dac02c17 	ldw	r11,176(sp)
    1b7c:	1c07883a 	add	r3,r3,r16
    1b80:	44000115 	stw	r16,4(r8)
    1b84:	42c00015 	stw	r11,0(r8)
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	d8c02015 	stw	r3,128(sp)
    1b90:	d8801f15 	stw	r2,124(sp)
    1b94:	010001c4 	movi	r4,7
    1b98:	20bdc00e 	bge	r4,r2,129c <__alt_mem_Flash_flash_data+0xf400129c>
    1b9c:	b009883a 	mov	r4,r22
    1ba0:	b80b883a 	mov	r5,r23
    1ba4:	d9801e04 	addi	r6,sp,120
    1ba8:	0007e980 	call	7e98 <__sprint_r>
    1bac:	103cca1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1bb0:	d8c02017 	ldw	r3,128(sp)
    1bb4:	da000404 	addi	r8,sp,16
    1bb8:	003db906 	br	12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    1bbc:	b009883a 	mov	r4,r22
    1bc0:	b80b883a 	mov	r5,r23
    1bc4:	d9801e04 	addi	r6,sp,120
    1bc8:	0007e980 	call	7e98 <__sprint_r>
    1bcc:	103def26 	beq	r2,zero,138c <__alt_mem_Flash_flash_data+0xf400138c>
    1bd0:	003cc106 	br	ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1bd4:	10803fcc 	andi	r2,r2,255
    1bd8:	1000651e 	bne	r2,zero,1d70 <___vfprintf_internal_r+0x1268>
    1bdc:	8880004c 	andi	r2,r17,1
    1be0:	10013226 	beq	r2,zero,20ac <___vfprintf_internal_r+0x15a4>
    1be4:	00800c04 	movi	r2,48
    1be8:	d8c01dc4 	addi	r3,sp,119
    1bec:	d8801dc5 	stb	r2,119(sp)
    1bf0:	dc803c17 	ldw	r18,240(sp)
    1bf4:	d8c03115 	stw	r3,196(sp)
    1bf8:	003d1106 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    1bfc:	b009883a 	mov	r4,r22
    1c00:	b80b883a 	mov	r5,r23
    1c04:	d9801e04 	addi	r6,sp,120
    1c08:	0007e980 	call	7e98 <__sprint_r>
    1c0c:	103cb21e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1c10:	d8c02017 	ldw	r3,128(sp)
    1c14:	da000404 	addi	r8,sp,16
    1c18:	003d9406 	br	126c <__alt_mem_Flash_flash_data+0xf400126c>
    1c1c:	b009883a 	mov	r4,r22
    1c20:	b80b883a 	mov	r5,r23
    1c24:	d9801e04 	addi	r6,sp,120
    1c28:	0007e980 	call	7e98 <__sprint_r>
    1c2c:	103caa1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1c30:	d8c02017 	ldw	r3,128(sp)
    1c34:	da000404 	addi	r8,sp,16
    1c38:	003d5206 	br	1184 <__alt_mem_Flash_flash_data+0xf4001184>
    1c3c:	b009883a 	mov	r4,r22
    1c40:	b80b883a 	mov	r5,r23
    1c44:	d9801e04 	addi	r6,sp,120
    1c48:	0007e980 	call	7e98 <__sprint_r>
    1c4c:	103ca21e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1c50:	d8c02017 	ldw	r3,128(sp)
    1c54:	da000404 	addi	r8,sp,16
    1c58:	003d5806 	br	11bc <__alt_mem_Flash_flash_data+0xf40011bc>
    1c5c:	d9403b17 	ldw	r5,236(sp)
    1c60:	d8c01e04 	addi	r3,sp,120
    1c64:	988003cc 	andi	r2,r19,15
    1c68:	e008973a 	slli	r4,fp,28
    1c6c:	2885883a 	add	r2,r5,r2
    1c70:	9826d13a 	srli	r19,r19,4
    1c74:	10800003 	ldbu	r2,0(r2)
    1c78:	e038d13a 	srli	fp,fp,4
    1c7c:	18ffffc4 	addi	r3,r3,-1
    1c80:	24e6b03a 	or	r19,r4,r19
    1c84:	18800005 	stb	r2,0(r3)
    1c88:	9f04b03a 	or	r2,r19,fp
    1c8c:	103ff51e 	bne	r2,zero,1c64 <__alt_mem_Flash_flash_data+0xf4001c64>
    1c90:	db002817 	ldw	r12,160(sp)
    1c94:	d8c03115 	stw	r3,196(sp)
    1c98:	60e5c83a 	sub	r18,r12,r3
    1c9c:	003ce806 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    1ca0:	dc002617 	ldw	r16,152(sp)
    1ca4:	0401b10e 	bge	zero,r16,236c <___vfprintf_internal_r+0x1864>
    1ca8:	db003117 	ldw	r12,196(sp)
    1cac:	dac03317 	ldw	r11,204(sp)
    1cb0:	62e1883a 	add	r16,r12,r11
    1cb4:	db003417 	ldw	r12,208(sp)
    1cb8:	5825883a 	mov	r18,r11
    1cbc:	62c0010e 	bge	r12,r11,1cc4 <___vfprintf_internal_r+0x11bc>
    1cc0:	6025883a 	mov	r18,r12
    1cc4:	04800b0e 	bge	zero,r18,1cf4 <___vfprintf_internal_r+0x11ec>
    1cc8:	d8801f17 	ldw	r2,124(sp)
    1ccc:	dac03117 	ldw	r11,196(sp)
    1cd0:	1c87883a 	add	r3,r3,r18
    1cd4:	10800044 	addi	r2,r2,1
    1cd8:	42c00015 	stw	r11,0(r8)
    1cdc:	44800115 	stw	r18,4(r8)
    1ce0:	d8c02015 	stw	r3,128(sp)
    1ce4:	d8801f15 	stw	r2,124(sp)
    1ce8:	010001c4 	movi	r4,7
    1cec:	20824f16 	blt	r4,r2,262c <___vfprintf_internal_r+0x1b24>
    1cf0:	42000204 	addi	r8,r8,8
    1cf4:	90024b16 	blt	r18,zero,2624 <___vfprintf_internal_r+0x1b1c>
    1cf8:	db003417 	ldw	r12,208(sp)
    1cfc:	64a5c83a 	sub	r18,r12,r18
    1d00:	0480730e 	bge	zero,r18,1ed0 <___vfprintf_internal_r+0x13c8>
    1d04:	05400404 	movi	r21,16
    1d08:	d8801f17 	ldw	r2,124(sp)
    1d0c:	ac817d0e 	bge	r21,r18,2304 <___vfprintf_internal_r+0x17fc>
    1d10:	014000b4 	movhi	r5,2
    1d14:	2966d184 	addi	r5,r5,-25786
    1d18:	d9402c15 	stw	r5,176(sp)
    1d1c:	070001c4 	movi	fp,7
    1d20:	00000306 	br	1d30 <___vfprintf_internal_r+0x1228>
    1d24:	42000204 	addi	r8,r8,8
    1d28:	94bffc04 	addi	r18,r18,-16
    1d2c:	ac81780e 	bge	r21,r18,2310 <___vfprintf_internal_r+0x1808>
    1d30:	18c00404 	addi	r3,r3,16
    1d34:	10800044 	addi	r2,r2,1
    1d38:	45000015 	stw	r20,0(r8)
    1d3c:	45400115 	stw	r21,4(r8)
    1d40:	d8c02015 	stw	r3,128(sp)
    1d44:	d8801f15 	stw	r2,124(sp)
    1d48:	e0bff60e 	bge	fp,r2,1d24 <__alt_mem_Flash_flash_data+0xf4001d24>
    1d4c:	b009883a 	mov	r4,r22
    1d50:	b80b883a 	mov	r5,r23
    1d54:	d9801e04 	addi	r6,sp,120
    1d58:	0007e980 	call	7e98 <__sprint_r>
    1d5c:	103c5e1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1d60:	d8c02017 	ldw	r3,128(sp)
    1d64:	d8801f17 	ldw	r2,124(sp)
    1d68:	da000404 	addi	r8,sp,16
    1d6c:	003fee06 	br	1d28 <__alt_mem_Flash_flash_data+0xf4001d28>
    1d70:	dac01e04 	addi	r11,sp,120
    1d74:	0025883a 	mov	r18,zero
    1d78:	dac03115 	stw	r11,196(sp)
    1d7c:	003cb006 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    1d80:	b009883a 	mov	r4,r22
    1d84:	b80b883a 	mov	r5,r23
    1d88:	d9801e04 	addi	r6,sp,120
    1d8c:	0007e980 	call	7e98 <__sprint_r>
    1d90:	103c511e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1d94:	d8c02017 	ldw	r3,128(sp)
    1d98:	d8802787 	ldb	r2,158(sp)
    1d9c:	da000404 	addi	r8,sp,16
    1da0:	003ceb06 	br	1150 <__alt_mem_Flash_flash_data+0xf4001150>
    1da4:	1cc00017 	ldw	r19,0(r3)
    1da8:	dac02d17 	ldw	r11,180(sp)
    1dac:	9839d7fa 	srai	fp,r19,31
    1db0:	5ac00104 	addi	r11,r11,4
    1db4:	dac02d15 	stw	r11,180(sp)
    1db8:	e005883a 	mov	r2,fp
    1dbc:	003c8106 	br	fc4 <__alt_mem_Flash_flash_data+0xf4000fc4>
    1dc0:	657fffc4 	addi	r21,r12,-1
    1dc4:	057f5d0e 	bge	zero,r21,1b3c <__alt_mem_Flash_flash_data+0xf4001b3c>
    1dc8:	07000404 	movi	fp,16
    1dcc:	e540900e 	bge	fp,r21,2010 <___vfprintf_internal_r+0x1508>
    1dd0:	010000b4 	movhi	r4,2
    1dd4:	2126d184 	addi	r4,r4,-25786
    1dd8:	d9002c15 	stw	r4,176(sp)
    1ddc:	01c001c4 	movi	r7,7
    1de0:	00000306 	br	1df0 <___vfprintf_internal_r+0x12e8>
    1de4:	94800204 	addi	r18,r18,8
    1de8:	ad7ffc04 	addi	r21,r21,-16
    1dec:	e5408b0e 	bge	fp,r21,201c <___vfprintf_internal_r+0x1514>
    1df0:	18c00404 	addi	r3,r3,16
    1df4:	84000044 	addi	r16,r16,1
    1df8:	95000015 	stw	r20,0(r18)
    1dfc:	97000115 	stw	fp,4(r18)
    1e00:	d8c02015 	stw	r3,128(sp)
    1e04:	dc001f15 	stw	r16,124(sp)
    1e08:	3c3ff60e 	bge	r7,r16,1de4 <__alt_mem_Flash_flash_data+0xf4001de4>
    1e0c:	b009883a 	mov	r4,r22
    1e10:	b80b883a 	mov	r5,r23
    1e14:	d9801e04 	addi	r6,sp,120
    1e18:	d9c03d15 	stw	r7,244(sp)
    1e1c:	0007e980 	call	7e98 <__sprint_r>
    1e20:	d9c03d17 	ldw	r7,244(sp)
    1e24:	103c2c1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1e28:	d8c02017 	ldw	r3,128(sp)
    1e2c:	dc001f17 	ldw	r16,124(sp)
    1e30:	dc800404 	addi	r18,sp,16
    1e34:	003fec06 	br	1de8 <__alt_mem_Flash_flash_data+0xf4001de8>
    1e38:	dac02d17 	ldw	r11,180(sp)
    1e3c:	0039883a 	mov	fp,zero
    1e40:	0005883a 	mov	r2,zero
    1e44:	5cc00017 	ldw	r19,0(r11)
    1e48:	5ac00104 	addi	r11,r11,4
    1e4c:	dac02d15 	stw	r11,180(sp)
    1e50:	9807883a 	mov	r3,r19
    1e54:	003d5b06 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    1e58:	db002d17 	ldw	r12,180(sp)
    1e5c:	0039883a 	mov	fp,zero
    1e60:	00800044 	movi	r2,1
    1e64:	64c00017 	ldw	r19,0(r12)
    1e68:	63000104 	addi	r12,r12,4
    1e6c:	db002d15 	stw	r12,180(sp)
    1e70:	9807883a 	mov	r3,r19
    1e74:	003d5306 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    1e78:	00800084 	movi	r2,2
    1e7c:	9f06b03a 	or	r3,r19,fp
    1e80:	003d5006 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    1e84:	10803fcc 	andi	r2,r2,255
    1e88:	1080201c 	xori	r2,r2,128
    1e8c:	10bfe004 	addi	r2,r2,-128
    1e90:	01000c04 	movi	r4,48
    1e94:	1101a526 	beq	r2,r4,252c <___vfprintf_internal_r+0x1a24>
    1e98:	dac03117 	ldw	r11,196(sp)
    1e9c:	db002817 	ldw	r12,160(sp)
    1ea0:	193fffc5 	stb	r4,-1(r3)
    1ea4:	5affffc4 	addi	r11,r11,-1
    1ea8:	dac03115 	stw	r11,196(sp)
    1eac:	62e5c83a 	sub	r18,r12,r11
    1eb0:	003c6306 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    1eb4:	b009883a 	mov	r4,r22
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	d9801e04 	addi	r6,sp,120
    1ec0:	0007e980 	call	7e98 <__sprint_r>
    1ec4:	103c041e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1ec8:	d8c02017 	ldw	r3,128(sp)
    1ecc:	da000404 	addi	r8,sp,16
    1ed0:	db003117 	ldw	r12,196(sp)
    1ed4:	dac03417 	ldw	r11,208(sp)
    1ed8:	d8802617 	ldw	r2,152(sp)
    1edc:	62e5883a 	add	r18,r12,r11
    1ee0:	db003317 	ldw	r12,204(sp)
    1ee4:	13000216 	blt	r2,r12,1ef0 <___vfprintf_internal_r+0x13e8>
    1ee8:	8900004c 	andi	r4,r17,1
    1eec:	20000c26 	beq	r4,zero,1f20 <___vfprintf_internal_r+0x1418>
    1ef0:	dac03817 	ldw	r11,224(sp)
    1ef4:	d9001f17 	ldw	r4,124(sp)
    1ef8:	db003517 	ldw	r12,212(sp)
    1efc:	1ac7883a 	add	r3,r3,r11
    1f00:	21000044 	addi	r4,r4,1
    1f04:	43000015 	stw	r12,0(r8)
    1f08:	42c00115 	stw	r11,4(r8)
    1f0c:	d8c02015 	stw	r3,128(sp)
    1f10:	d9001f15 	stw	r4,124(sp)
    1f14:	014001c4 	movi	r5,7
    1f18:	2901cc16 	blt	r5,r4,264c <___vfprintf_internal_r+0x1b44>
    1f1c:	42000204 	addi	r8,r8,8
    1f20:	dac03317 	ldw	r11,204(sp)
    1f24:	8489c83a 	sub	r4,r16,r18
    1f28:	5885c83a 	sub	r2,r11,r2
    1f2c:	1021883a 	mov	r16,r2
    1f30:	2080010e 	bge	r4,r2,1f38 <___vfprintf_internal_r+0x1430>
    1f34:	2021883a 	mov	r16,r4
    1f38:	04000a0e 	bge	zero,r16,1f64 <___vfprintf_internal_r+0x145c>
    1f3c:	d9001f17 	ldw	r4,124(sp)
    1f40:	1c07883a 	add	r3,r3,r16
    1f44:	44800015 	stw	r18,0(r8)
    1f48:	21000044 	addi	r4,r4,1
    1f4c:	44000115 	stw	r16,4(r8)
    1f50:	d8c02015 	stw	r3,128(sp)
    1f54:	d9001f15 	stw	r4,124(sp)
    1f58:	014001c4 	movi	r5,7
    1f5c:	2901e316 	blt	r5,r4,26ec <___vfprintf_internal_r+0x1be4>
    1f60:	42000204 	addi	r8,r8,8
    1f64:	8001df16 	blt	r16,zero,26e4 <___vfprintf_internal_r+0x1bdc>
    1f68:	1421c83a 	sub	r16,r2,r16
    1f6c:	043ccc0e 	bge	zero,r16,12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    1f70:	04800404 	movi	r18,16
    1f74:	d8801f17 	ldw	r2,124(sp)
    1f78:	943efc0e 	bge	r18,r16,1b6c <__alt_mem_Flash_flash_data+0xf4001b6c>
    1f7c:	014000b4 	movhi	r5,2
    1f80:	2966d184 	addi	r5,r5,-25786
    1f84:	d9402c15 	stw	r5,176(sp)
    1f88:	054001c4 	movi	r21,7
    1f8c:	00000306 	br	1f9c <___vfprintf_internal_r+0x1494>
    1f90:	42000204 	addi	r8,r8,8
    1f94:	843ffc04 	addi	r16,r16,-16
    1f98:	943ef70e 	bge	r18,r16,1b78 <__alt_mem_Flash_flash_data+0xf4001b78>
    1f9c:	18c00404 	addi	r3,r3,16
    1fa0:	10800044 	addi	r2,r2,1
    1fa4:	45000015 	stw	r20,0(r8)
    1fa8:	44800115 	stw	r18,4(r8)
    1fac:	d8c02015 	stw	r3,128(sp)
    1fb0:	d8801f15 	stw	r2,124(sp)
    1fb4:	a8bff60e 	bge	r21,r2,1f90 <__alt_mem_Flash_flash_data+0xf4001f90>
    1fb8:	b009883a 	mov	r4,r22
    1fbc:	b80b883a 	mov	r5,r23
    1fc0:	d9801e04 	addi	r6,sp,120
    1fc4:	0007e980 	call	7e98 <__sprint_r>
    1fc8:	103bc31e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    1fcc:	d8c02017 	ldw	r3,128(sp)
    1fd0:	d8801f17 	ldw	r2,124(sp)
    1fd4:	da000404 	addi	r8,sp,16
    1fd8:	003fee06 	br	1f94 <__alt_mem_Flash_flash_data+0xf4001f94>
    1fdc:	8888703a 	and	r4,r17,r2
    1fe0:	203eab1e 	bne	r4,zero,1a90 <__alt_mem_Flash_flash_data+0xf4001a90>
    1fe4:	dc001f17 	ldw	r16,124(sp)
    1fe8:	db003117 	ldw	r12,196(sp)
    1fec:	40800115 	stw	r2,4(r8)
    1ff0:	84000044 	addi	r16,r16,1
    1ff4:	43000015 	stw	r12,0(r8)
    1ff8:	d8c02015 	stw	r3,128(sp)
    1ffc:	dc001f15 	stw	r16,124(sp)
    2000:	008001c4 	movi	r2,7
    2004:	14000e16 	blt	r2,r16,2040 <___vfprintf_internal_r+0x1538>
    2008:	44800204 	addi	r18,r8,8
    200c:	003ecb06 	br	1b3c <__alt_mem_Flash_flash_data+0xf4001b3c>
    2010:	008000b4 	movhi	r2,2
    2014:	10a6d184 	addi	r2,r2,-25786
    2018:	d8802c15 	stw	r2,176(sp)
    201c:	dac02c17 	ldw	r11,176(sp)
    2020:	1d47883a 	add	r3,r3,r21
    2024:	84000044 	addi	r16,r16,1
    2028:	92c00015 	stw	r11,0(r18)
    202c:	95400115 	stw	r21,4(r18)
    2030:	d8c02015 	stw	r3,128(sp)
    2034:	dc001f15 	stw	r16,124(sp)
    2038:	008001c4 	movi	r2,7
    203c:	143ebe0e 	bge	r2,r16,1b38 <__alt_mem_Flash_flash_data+0xf4001b38>
    2040:	b009883a 	mov	r4,r22
    2044:	b80b883a 	mov	r5,r23
    2048:	d9801e04 	addi	r6,sp,120
    204c:	0007e980 	call	7e98 <__sprint_r>
    2050:	103ba11e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2054:	d8c02017 	ldw	r3,128(sp)
    2058:	dc001f17 	ldw	r16,124(sp)
    205c:	dc800404 	addi	r18,sp,16
    2060:	003eb606 	br	1b3c <__alt_mem_Flash_flash_data+0xf4001b3c>
    2064:	b009883a 	mov	r4,r22
    2068:	b80b883a 	mov	r5,r23
    206c:	d9801e04 	addi	r6,sp,120
    2070:	0007e980 	call	7e98 <__sprint_r>
    2074:	103b981e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2078:	d8c02017 	ldw	r3,128(sp)
    207c:	dc001f17 	ldw	r16,124(sp)
    2080:	da000404 	addi	r8,sp,16
    2084:	003e8d06 	br	1abc <__alt_mem_Flash_flash_data+0xf4001abc>
    2088:	b009883a 	mov	r4,r22
    208c:	b80b883a 	mov	r5,r23
    2090:	d9801e04 	addi	r6,sp,120
    2094:	0007e980 	call	7e98 <__sprint_r>
    2098:	103b8f1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    209c:	d8c02017 	ldw	r3,128(sp)
    20a0:	dc001f17 	ldw	r16,124(sp)
    20a4:	dc800404 	addi	r18,sp,16
    20a8:	003e8f06 	br	1ae8 <__alt_mem_Flash_flash_data+0xf4001ae8>
    20ac:	db001e04 	addi	r12,sp,120
    20b0:	0025883a 	mov	r18,zero
    20b4:	db003115 	stw	r12,196(sp)
    20b8:	003be106 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    20bc:	b009883a 	mov	r4,r22
    20c0:	b80b883a 	mov	r5,r23
    20c4:	d9801e04 	addi	r6,sp,120
    20c8:	0007e980 	call	7e98 <__sprint_r>
    20cc:	103b821e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    20d0:	d8c02017 	ldw	r3,128(sp)
    20d4:	da000404 	addi	r8,sp,16
    20d8:	003c3b06 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    20dc:	04e7c83a 	sub	r19,zero,r19
    20e0:	9804c03a 	cmpne	r2,r19,zero
    20e4:	0739c83a 	sub	fp,zero,fp
    20e8:	e0b9c83a 	sub	fp,fp,r2
    20ec:	05400b44 	movi	r21,45
    20f0:	dd402785 	stb	r21,158(sp)
    20f4:	da403215 	stw	r9,200(sp)
    20f8:	00800044 	movi	r2,1
    20fc:	9f06b03a 	or	r3,r19,fp
    2100:	003bb506 	br	fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2104:	da003f15 	stw	r8,252(sp)
    2108:	da403e15 	stw	r9,248(sp)
    210c:	0007b980 	call	7b98 <__fpclassifyd>
    2110:	da003f17 	ldw	r8,252(sp)
    2114:	da403e17 	ldw	r9,248(sp)
    2118:	1000ce26 	beq	r2,zero,2454 <___vfprintf_internal_r+0x194c>
    211c:	057ff7c4 	movi	r21,-33
    2120:	00bfffc4 	movi	r2,-1
    2124:	856a703a 	and	r21,r16,r21
    2128:	4881e826 	beq	r9,r2,28cc <___vfprintf_internal_r+0x1dc4>
    212c:	008011c4 	movi	r2,71
    2130:	a881e326 	beq	r21,r2,28c0 <___vfprintf_internal_r+0x1db8>
    2134:	db003917 	ldw	r12,228(sp)
    2138:	8ac04014 	ori	r11,r17,256
    213c:	dac02d15 	stw	r11,180(sp)
    2140:	6001ed16 	blt	r12,zero,28f8 <___vfprintf_internal_r+0x1df0>
    2144:	dc803917 	ldw	r18,228(sp)
    2148:	d8002b05 	stb	zero,172(sp)
    214c:	00801984 	movi	r2,102
    2150:	80811826 	beq	r16,r2,25b4 <___vfprintf_internal_r+0x1aac>
    2154:	00801184 	movi	r2,70
    2158:	80811626 	beq	r16,r2,25b4 <___vfprintf_internal_r+0x1aac>
    215c:	00801144 	movi	r2,69
    2160:	a881e926 	beq	r21,r2,2908 <___vfprintf_internal_r+0x1e00>
    2164:	4839883a 	mov	fp,r9
    2168:	d8802604 	addi	r2,sp,152
    216c:	d8800115 	stw	r2,4(sp)
    2170:	d9403717 	ldw	r5,220(sp)
    2174:	d8802504 	addi	r2,sp,148
    2178:	d8800215 	stw	r2,8(sp)
    217c:	d8802104 	addi	r2,sp,132
    2180:	df000015 	stw	fp,0(sp)
    2184:	d8800315 	stw	r2,12(sp)
    2188:	b009883a 	mov	r4,r22
    218c:	900d883a 	mov	r6,r18
    2190:	01c00084 	movi	r7,2
    2194:	da003f15 	stw	r8,252(sp)
    2198:	da403e15 	stw	r9,248(sp)
    219c:	0002e8c0 	call	2e8c <_dtoa_r>
    21a0:	d8803115 	stw	r2,196(sp)
    21a4:	008019c4 	movi	r2,103
    21a8:	da003f17 	ldw	r8,252(sp)
    21ac:	da403e17 	ldw	r9,248(sp)
    21b0:	80800226 	beq	r16,r2,21bc <___vfprintf_internal_r+0x16b4>
    21b4:	008011c4 	movi	r2,71
    21b8:	8081101e 	bne	r16,r2,25fc <___vfprintf_internal_r+0x1af4>
    21bc:	8880004c 	andi	r2,r17,1
    21c0:	1001dd26 	beq	r2,zero,2938 <___vfprintf_internal_r+0x1e30>
    21c4:	db003117 	ldw	r12,196(sp)
    21c8:	6715883a 	add	r10,r12,fp
    21cc:	d9003717 	ldw	r4,220(sp)
    21d0:	900b883a 	mov	r5,r18
    21d4:	000d883a 	mov	r6,zero
    21d8:	000f883a 	mov	r7,zero
    21dc:	da003f15 	stw	r8,252(sp)
    21e0:	da403e15 	stw	r9,248(sp)
    21e4:	da803d15 	stw	r10,244(sp)
    21e8:	000b93c0 	call	b93c <__eqdf2>
    21ec:	da003f17 	ldw	r8,252(sp)
    21f0:	da403e17 	ldw	r9,248(sp)
    21f4:	da803d17 	ldw	r10,244(sp)
    21f8:	10016526 	beq	r2,zero,2790 <___vfprintf_internal_r+0x1c88>
    21fc:	d8802117 	ldw	r2,132(sp)
    2200:	1280062e 	bgeu	r2,r10,221c <___vfprintf_internal_r+0x1714>
    2204:	01000c04 	movi	r4,48
    2208:	10c00044 	addi	r3,r2,1
    220c:	d8c02115 	stw	r3,132(sp)
    2210:	11000005 	stb	r4,0(r2)
    2214:	d8802117 	ldw	r2,132(sp)
    2218:	12bffb36 	bltu	r2,r10,2208 <__alt_mem_Flash_flash_data+0xf4002208>
    221c:	db003117 	ldw	r12,196(sp)
    2220:	1305c83a 	sub	r2,r2,r12
    2224:	d8803315 	stw	r2,204(sp)
    2228:	008011c4 	movi	r2,71
    222c:	a8814d26 	beq	r21,r2,2764 <___vfprintf_internal_r+0x1c5c>
    2230:	00801944 	movi	r2,101
    2234:	1402060e 	bge	r2,r16,2a50 <___vfprintf_internal_r+0x1f48>
    2238:	00801984 	movi	r2,102
    223c:	8081b426 	beq	r16,r2,2910 <___vfprintf_internal_r+0x1e08>
    2240:	db002617 	ldw	r12,152(sp)
    2244:	db003415 	stw	r12,208(sp)
    2248:	db003417 	ldw	r12,208(sp)
    224c:	dac03317 	ldw	r11,204(sp)
    2250:	62c1a016 	blt	r12,r11,28d4 <___vfprintf_internal_r+0x1dcc>
    2254:	8c40004c 	andi	r17,r17,1
    2258:	8801bf1e 	bne	r17,zero,2958 <___vfprintf_internal_r+0x1e50>
    225c:	6005883a 	mov	r2,r12
    2260:	6001b316 	blt	r12,zero,2930 <___vfprintf_internal_r+0x1e28>
    2264:	dc803417 	ldw	r18,208(sp)
    2268:	df002b07 	ldb	fp,172(sp)
    226c:	e0012e1e 	bne	fp,zero,2728 <___vfprintf_internal_r+0x1c20>
    2270:	dc402d17 	ldw	r17,180(sp)
    2274:	dd402783 	ldbu	r21,158(sp)
    2278:	d8802b15 	stw	r2,172(sp)
    227c:	dcc02d15 	stw	r19,180(sp)
    2280:	d8003215 	stw	zero,200(sp)
    2284:	003b7306 	br	1054 <__alt_mem_Flash_flash_data+0xf4001054>
    2288:	00800084 	movi	r2,2
    228c:	003c4d06 	br	13c4 <__alt_mem_Flash_flash_data+0xf40013c4>
    2290:	8880040c 	andi	r2,r17,16
    2294:	1000091e 	bne	r2,zero,22bc <___vfprintf_internal_r+0x17b4>
    2298:	8c40100c 	andi	r17,r17,64
    229c:	88000726 	beq	r17,zero,22bc <___vfprintf_internal_r+0x17b4>
    22a0:	db002d17 	ldw	r12,180(sp)
    22a4:	dac02f17 	ldw	r11,188(sp)
    22a8:	60800017 	ldw	r2,0(r12)
    22ac:	63000104 	addi	r12,r12,4
    22b0:	db002d15 	stw	r12,180(sp)
    22b4:	12c0000d 	sth	r11,0(r2)
    22b8:	003a4e06 	br	bf4 <__alt_mem_Flash_flash_data+0xf4000bf4>
    22bc:	db002d17 	ldw	r12,180(sp)
    22c0:	dac02f17 	ldw	r11,188(sp)
    22c4:	60800017 	ldw	r2,0(r12)
    22c8:	63000104 	addi	r12,r12,4
    22cc:	db002d15 	stw	r12,180(sp)
    22d0:	12c00015 	stw	r11,0(r2)
    22d4:	003a4706 	br	bf4 <__alt_mem_Flash_flash_data+0xf4000bf4>
    22d8:	1c000007 	ldb	r16,0(r3)
    22dc:	1805883a 	mov	r2,r3
    22e0:	003a6e06 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    22e4:	88c0100c 	andi	r3,r17,64
    22e8:	18006b26 	beq	r3,zero,2498 <___vfprintf_internal_r+0x1990>
    22ec:	dac02d17 	ldw	r11,180(sp)
    22f0:	14c0000b 	ldhu	r19,0(r2)
    22f4:	0039883a 	mov	fp,zero
    22f8:	5ac00104 	addi	r11,r11,4
    22fc:	dac02d15 	stw	r11,180(sp)
    2300:	003cb206 	br	15cc <__alt_mem_Flash_flash_data+0xf40015cc>
    2304:	010000b4 	movhi	r4,2
    2308:	2126d184 	addi	r4,r4,-25786
    230c:	d9002c15 	stw	r4,176(sp)
    2310:	dac02c17 	ldw	r11,176(sp)
    2314:	1c87883a 	add	r3,r3,r18
    2318:	10800044 	addi	r2,r2,1
    231c:	42c00015 	stw	r11,0(r8)
    2320:	44800115 	stw	r18,4(r8)
    2324:	d8c02015 	stw	r3,128(sp)
    2328:	d8801f15 	stw	r2,124(sp)
    232c:	010001c4 	movi	r4,7
    2330:	20bee016 	blt	r4,r2,1eb4 <__alt_mem_Flash_flash_data+0xf4001eb4>
    2334:	42000204 	addi	r8,r8,8
    2338:	003ee506 	br	1ed0 <__alt_mem_Flash_flash_data+0xf4001ed0>
    233c:	010000b4 	movhi	r4,2
    2340:	2126d184 	addi	r4,r4,-25786
    2344:	d9002c15 	stw	r4,176(sp)
    2348:	003bbe06 	br	1244 <__alt_mem_Flash_flash_data+0xf4001244>
    234c:	b009883a 	mov	r4,r22
    2350:	b80b883a 	mov	r5,r23
    2354:	d9801e04 	addi	r6,sp,120
    2358:	0007e980 	call	7e98 <__sprint_r>
    235c:	103ade1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2360:	d8c02017 	ldw	r3,128(sp)
    2364:	da000404 	addi	r8,sp,16
    2368:	003d6b06 	br	1918 <__alt_mem_Flash_flash_data+0xf4001918>
    236c:	d8801f17 	ldw	r2,124(sp)
    2370:	030000b4 	movhi	r12,2
    2374:	01000044 	movi	r4,1
    2378:	18c00044 	addi	r3,r3,1
    237c:	10800044 	addi	r2,r2,1
    2380:	6326d104 	addi	r12,r12,-25788
    2384:	41000115 	stw	r4,4(r8)
    2388:	43000015 	stw	r12,0(r8)
    238c:	d8c02015 	stw	r3,128(sp)
    2390:	d8801f15 	stw	r2,124(sp)
    2394:	010001c4 	movi	r4,7
    2398:	20804916 	blt	r4,r2,24c0 <___vfprintf_internal_r+0x19b8>
    239c:	42000204 	addi	r8,r8,8
    23a0:	8000041e 	bne	r16,zero,23b4 <___vfprintf_internal_r+0x18ac>
    23a4:	dac03317 	ldw	r11,204(sp)
    23a8:	5800021e 	bne	r11,zero,23b4 <___vfprintf_internal_r+0x18ac>
    23ac:	8880004c 	andi	r2,r17,1
    23b0:	103bbb26 	beq	r2,zero,12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    23b4:	db003817 	ldw	r12,224(sp)
    23b8:	d8801f17 	ldw	r2,124(sp)
    23bc:	dac03517 	ldw	r11,212(sp)
    23c0:	1b07883a 	add	r3,r3,r12
    23c4:	10800044 	addi	r2,r2,1
    23c8:	42c00015 	stw	r11,0(r8)
    23cc:	43000115 	stw	r12,4(r8)
    23d0:	d8c02015 	stw	r3,128(sp)
    23d4:	d8801f15 	stw	r2,124(sp)
    23d8:	010001c4 	movi	r4,7
    23dc:	20812e16 	blt	r4,r2,2898 <___vfprintf_internal_r+0x1d90>
    23e0:	42000204 	addi	r8,r8,8
    23e4:	0421c83a 	sub	r16,zero,r16
    23e8:	04005c0e 	bge	zero,r16,255c <___vfprintf_internal_r+0x1a54>
    23ec:	04800404 	movi	r18,16
    23f0:	94009f0e 	bge	r18,r16,2670 <___vfprintf_internal_r+0x1b68>
    23f4:	010000b4 	movhi	r4,2
    23f8:	2126d184 	addi	r4,r4,-25786
    23fc:	d9002c15 	stw	r4,176(sp)
    2400:	054001c4 	movi	r21,7
    2404:	00000306 	br	2414 <___vfprintf_internal_r+0x190c>
    2408:	42000204 	addi	r8,r8,8
    240c:	843ffc04 	addi	r16,r16,-16
    2410:	94009a0e 	bge	r18,r16,267c <___vfprintf_internal_r+0x1b74>
    2414:	18c00404 	addi	r3,r3,16
    2418:	10800044 	addi	r2,r2,1
    241c:	45000015 	stw	r20,0(r8)
    2420:	44800115 	stw	r18,4(r8)
    2424:	d8c02015 	stw	r3,128(sp)
    2428:	d8801f15 	stw	r2,124(sp)
    242c:	a8bff60e 	bge	r21,r2,2408 <__alt_mem_Flash_flash_data+0xf4002408>
    2430:	b009883a 	mov	r4,r22
    2434:	b80b883a 	mov	r5,r23
    2438:	d9801e04 	addi	r6,sp,120
    243c:	0007e980 	call	7e98 <__sprint_r>
    2440:	103aa51e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2444:	d8c02017 	ldw	r3,128(sp)
    2448:	d8801f17 	ldw	r2,124(sp)
    244c:	da000404 	addi	r8,sp,16
    2450:	003fee06 	br	240c <__alt_mem_Flash_flash_data+0xf400240c>
    2454:	008011c4 	movi	r2,71
    2458:	1400be16 	blt	r2,r16,2754 <___vfprintf_internal_r+0x1c4c>
    245c:	030000b4 	movhi	r12,2
    2460:	6326c304 	addi	r12,r12,-25844
    2464:	db003115 	stw	r12,196(sp)
    2468:	00c000c4 	movi	r3,3
    246c:	00bfdfc4 	movi	r2,-129
    2470:	d8c02b15 	stw	r3,172(sp)
    2474:	88a2703a 	and	r17,r17,r2
    2478:	dd402783 	ldbu	r21,158(sp)
    247c:	dcc02d15 	stw	r19,180(sp)
    2480:	1825883a 	mov	r18,r3
    2484:	d8003215 	stw	zero,200(sp)
    2488:	d8003415 	stw	zero,208(sp)
    248c:	003af106 	br	1054 <__alt_mem_Flash_flash_data+0xf4001054>
    2490:	4825883a 	mov	r18,r9
    2494:	003c9306 	br	16e4 <__alt_mem_Flash_flash_data+0xf40016e4>
    2498:	db002d17 	ldw	r12,180(sp)
    249c:	14c00017 	ldw	r19,0(r2)
    24a0:	0039883a 	mov	fp,zero
    24a4:	63000104 	addi	r12,r12,4
    24a8:	db002d15 	stw	r12,180(sp)
    24ac:	003c4706 	br	15cc <__alt_mem_Flash_flash_data+0xf40015cc>
    24b0:	008000b4 	movhi	r2,2
    24b4:	10a6c104 	addi	r2,r2,-25852
    24b8:	d8803115 	stw	r2,196(sp)
    24bc:	003bf106 	br	1484 <__alt_mem_Flash_flash_data+0xf4001484>
    24c0:	b009883a 	mov	r4,r22
    24c4:	b80b883a 	mov	r5,r23
    24c8:	d9801e04 	addi	r6,sp,120
    24cc:	0007e980 	call	7e98 <__sprint_r>
    24d0:	103a811e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    24d4:	dc002617 	ldw	r16,152(sp)
    24d8:	d8c02017 	ldw	r3,128(sp)
    24dc:	da000404 	addi	r8,sp,16
    24e0:	003faf06 	br	23a0 <__alt_mem_Flash_flash_data+0xf40023a0>
    24e4:	db002e17 	ldw	r12,184(sp)
    24e8:	1805883a 	mov	r2,r3
    24ec:	dac02d15 	stw	r11,180(sp)
    24f0:	0319c83a 	sub	r12,zero,r12
    24f4:	db002e15 	stw	r12,184(sp)
    24f8:	003a8206 	br	f04 <__alt_mem_Flash_flash_data+0xf4000f04>
    24fc:	18800044 	addi	r2,r3,1
    2500:	8c400814 	ori	r17,r17,32
    2504:	1c000047 	ldb	r16,1(r3)
    2508:	0039e406 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    250c:	b009883a 	mov	r4,r22
    2510:	b80b883a 	mov	r5,r23
    2514:	d9801e04 	addi	r6,sp,120
    2518:	0007e980 	call	7e98 <__sprint_r>
    251c:	103a6e1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2520:	d8c02017 	ldw	r3,128(sp)
    2524:	da000404 	addi	r8,sp,16
    2528:	003d0c06 	br	195c <__alt_mem_Flash_flash_data+0xf400195c>
    252c:	db002817 	ldw	r12,160(sp)
    2530:	d8c03117 	ldw	r3,196(sp)
    2534:	60e5c83a 	sub	r18,r12,r3
    2538:	003ac106 	br	1040 <__alt_mem_Flash_flash_data+0xf4001040>
    253c:	b009883a 	mov	r4,r22
    2540:	b80b883a 	mov	r5,r23
    2544:	d9801e04 	addi	r6,sp,120
    2548:	0007e980 	call	7e98 <__sprint_r>
    254c:	103a621e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2550:	d8c02017 	ldw	r3,128(sp)
    2554:	d8801f17 	ldw	r2,124(sp)
    2558:	da000404 	addi	r8,sp,16
    255c:	db003317 	ldw	r12,204(sp)
    2560:	dac03117 	ldw	r11,196(sp)
    2564:	10800044 	addi	r2,r2,1
    2568:	1b07883a 	add	r3,r3,r12
    256c:	42c00015 	stw	r11,0(r8)
    2570:	43000115 	stw	r12,4(r8)
    2574:	d8c02015 	stw	r3,128(sp)
    2578:	d8801f15 	stw	r2,124(sp)
    257c:	010001c4 	movi	r4,7
    2580:	20bb460e 	bge	r4,r2,129c <__alt_mem_Flash_flash_data+0xf400129c>
    2584:	003d8506 	br	1b9c <__alt_mem_Flash_flash_data+0xf4001b9c>
    2588:	da003f15 	stw	r8,252(sp)
    258c:	0000a700 	call	a70 <strlen>
    2590:	1025883a 	mov	r18,r2
    2594:	da003f17 	ldw	r8,252(sp)
    2598:	903c540e 	bge	r18,zero,16ec <__alt_mem_Flash_flash_data+0xf40016ec>
    259c:	0005883a 	mov	r2,zero
    25a0:	003c5206 	br	16ec <__alt_mem_Flash_flash_data+0xf40016ec>
    25a4:	010000b4 	movhi	r4,2
    25a8:	2126d584 	addi	r4,r4,-25770
    25ac:	d9003615 	stw	r4,216(sp)
    25b0:	003adc06 	br	1124 <__alt_mem_Flash_flash_data+0xf4001124>
    25b4:	d8802604 	addi	r2,sp,152
    25b8:	d8800115 	stw	r2,4(sp)
    25bc:	d9403717 	ldw	r5,220(sp)
    25c0:	d8802504 	addi	r2,sp,148
    25c4:	d8800215 	stw	r2,8(sp)
    25c8:	d8802104 	addi	r2,sp,132
    25cc:	da400015 	stw	r9,0(sp)
    25d0:	d8800315 	stw	r2,12(sp)
    25d4:	b009883a 	mov	r4,r22
    25d8:	900d883a 	mov	r6,r18
    25dc:	01c000c4 	movi	r7,3
    25e0:	da003f15 	stw	r8,252(sp)
    25e4:	da403e15 	stw	r9,248(sp)
    25e8:	0002e8c0 	call	2e8c <_dtoa_r>
    25ec:	da403e17 	ldw	r9,248(sp)
    25f0:	da003f17 	ldw	r8,252(sp)
    25f4:	d8803115 	stw	r2,196(sp)
    25f8:	4839883a 	mov	fp,r9
    25fc:	dac03117 	ldw	r11,196(sp)
    2600:	00801184 	movi	r2,70
    2604:	5f15883a 	add	r10,r11,fp
    2608:	a8bef01e 	bne	r21,r2,21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    260c:	59000007 	ldb	r4,0(r11)
    2610:	00800c04 	movi	r2,48
    2614:	2080d526 	beq	r4,r2,296c <___vfprintf_internal_r+0x1e64>
    2618:	d8c02617 	ldw	r3,152(sp)
    261c:	50d5883a 	add	r10,r10,r3
    2620:	003eea06 	br	21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    2624:	0025883a 	mov	r18,zero
    2628:	003db306 	br	1cf8 <__alt_mem_Flash_flash_data+0xf4001cf8>
    262c:	b009883a 	mov	r4,r22
    2630:	b80b883a 	mov	r5,r23
    2634:	d9801e04 	addi	r6,sp,120
    2638:	0007e980 	call	7e98 <__sprint_r>
    263c:	103a261e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2640:	d8c02017 	ldw	r3,128(sp)
    2644:	da000404 	addi	r8,sp,16
    2648:	003daa06 	br	1cf4 <__alt_mem_Flash_flash_data+0xf4001cf4>
    264c:	b009883a 	mov	r4,r22
    2650:	b80b883a 	mov	r5,r23
    2654:	d9801e04 	addi	r6,sp,120
    2658:	0007e980 	call	7e98 <__sprint_r>
    265c:	103a1e1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2660:	d8802617 	ldw	r2,152(sp)
    2664:	d8c02017 	ldw	r3,128(sp)
    2668:	da000404 	addi	r8,sp,16
    266c:	003e2c06 	br	1f20 <__alt_mem_Flash_flash_data+0xf4001f20>
    2670:	030000b4 	movhi	r12,2
    2674:	6326d184 	addi	r12,r12,-25786
    2678:	db002c15 	stw	r12,176(sp)
    267c:	dac02c17 	ldw	r11,176(sp)
    2680:	1c07883a 	add	r3,r3,r16
    2684:	10800044 	addi	r2,r2,1
    2688:	42c00015 	stw	r11,0(r8)
    268c:	44000115 	stw	r16,4(r8)
    2690:	d8c02015 	stw	r3,128(sp)
    2694:	d8801f15 	stw	r2,124(sp)
    2698:	010001c4 	movi	r4,7
    269c:	20bfa716 	blt	r4,r2,253c <__alt_mem_Flash_flash_data+0xf400253c>
    26a0:	42000204 	addi	r8,r8,8
    26a4:	003fad06 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    26a8:	00800184 	movi	r2,6
    26ac:	1240012e 	bgeu	r2,r9,26b4 <___vfprintf_internal_r+0x1bac>
    26b0:	1013883a 	mov	r9,r2
    26b4:	4825883a 	mov	r18,r9
    26b8:	4805883a 	mov	r2,r9
    26bc:	4800c216 	blt	r9,zero,29c8 <___vfprintf_internal_r+0x1ec0>
    26c0:	d8802b15 	stw	r2,172(sp)
    26c4:	008000b4 	movhi	r2,2
    26c8:	10a6cf04 	addi	r2,r2,-25796
    26cc:	d8803115 	stw	r2,196(sp)
    26d0:	dcc02d15 	stw	r19,180(sp)
    26d4:	d8003215 	stw	zero,200(sp)
    26d8:	d8003415 	stw	zero,208(sp)
    26dc:	0005883a 	mov	r2,zero
    26e0:	003a6306 	br	1070 <__alt_mem_Flash_flash_data+0xf4001070>
    26e4:	0021883a 	mov	r16,zero
    26e8:	003e1f06 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    26ec:	b009883a 	mov	r4,r22
    26f0:	b80b883a 	mov	r5,r23
    26f4:	d9801e04 	addi	r6,sp,120
    26f8:	0007e980 	call	7e98 <__sprint_r>
    26fc:	1039f61e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    2700:	d8802617 	ldw	r2,152(sp)
    2704:	db003317 	ldw	r12,204(sp)
    2708:	d8c02017 	ldw	r3,128(sp)
    270c:	da000404 	addi	r8,sp,16
    2710:	6085c83a 	sub	r2,r12,r2
    2714:	003e1306 	br	1f64 <__alt_mem_Flash_flash_data+0xf4001f64>
    2718:	030000b4 	movhi	r12,2
    271c:	6326d584 	addi	r12,r12,-25770
    2720:	db003615 	stw	r12,216(sp)
    2724:	003b0206 	br	1330 <__alt_mem_Flash_flash_data+0xf4001330>
    2728:	00c00b44 	movi	r3,45
    272c:	d8802b15 	stw	r2,172(sp)
    2730:	dc402d17 	ldw	r17,180(sp)
    2734:	d8c02785 	stb	r3,158(sp)
    2738:	dcc02d15 	stw	r19,180(sp)
    273c:	d8003215 	stw	zero,200(sp)
    2740:	00800b44 	movi	r2,45
    2744:	003a4706 	br	1064 <__alt_mem_Flash_flash_data+0xf4001064>
    2748:	05400b44 	movi	r21,45
    274c:	dd402785 	stb	r21,158(sp)
    2750:	003b4706 	br	1470 <__alt_mem_Flash_flash_data+0xf4001470>
    2754:	008000b4 	movhi	r2,2
    2758:	10a6c404 	addi	r2,r2,-25840
    275c:	d8803115 	stw	r2,196(sp)
    2760:	003f4106 	br	2468 <__alt_mem_Flash_flash_data+0xf4002468>
    2764:	d8c02617 	ldw	r3,152(sp)
    2768:	00bfff44 	movi	r2,-3
    276c:	18801116 	blt	r3,r2,27b4 <___vfprintf_internal_r+0x1cac>
    2770:	48c01016 	blt	r9,r3,27b4 <___vfprintf_internal_r+0x1cac>
    2774:	d8c03415 	stw	r3,208(sp)
    2778:	040019c4 	movi	r16,103
    277c:	003eb206 	br	2248 <__alt_mem_Flash_flash_data+0xf4002248>
    2780:	010000b4 	movhi	r4,2
    2784:	2126d184 	addi	r4,r4,-25786
    2788:	d9002c15 	stw	r4,176(sp)
    278c:	003cb106 	br	1a54 <__alt_mem_Flash_flash_data+0xf4001a54>
    2790:	5005883a 	mov	r2,r10
    2794:	003ea106 	br	221c <__alt_mem_Flash_flash_data+0xf400221c>
    2798:	da402b15 	stw	r9,172(sp)
    279c:	dd402783 	ldbu	r21,158(sp)
    27a0:	4825883a 	mov	r18,r9
    27a4:	dcc02d15 	stw	r19,180(sp)
    27a8:	d8003215 	stw	zero,200(sp)
    27ac:	d8003415 	stw	zero,208(sp)
    27b0:	003a2806 	br	1054 <__alt_mem_Flash_flash_data+0xf4001054>
    27b4:	843fff84 	addi	r16,r16,-2
    27b8:	1f3fffc4 	addi	fp,r3,-1
    27bc:	df002615 	stw	fp,152(sp)
    27c0:	dc0022c5 	stb	r16,139(sp)
    27c4:	e0009816 	blt	fp,zero,2a28 <___vfprintf_internal_r+0x1f20>
    27c8:	00800ac4 	movi	r2,43
    27cc:	d8802305 	stb	r2,140(sp)
    27d0:	00800244 	movi	r2,9
    27d4:	1700750e 	bge	r2,fp,29ac <___vfprintf_internal_r+0x1ea4>
    27d8:	dd4022c4 	addi	r21,sp,139
    27dc:	dc002c15 	stw	r16,176(sp)
    27e0:	4025883a 	mov	r18,r8
    27e4:	a821883a 	mov	r16,r21
    27e8:	e009883a 	mov	r4,fp
    27ec:	01400284 	movi	r5,10
    27f0:	000a7680 	call	a768 <__modsi3>
    27f4:	10800c04 	addi	r2,r2,48
    27f8:	843fffc4 	addi	r16,r16,-1
    27fc:	e009883a 	mov	r4,fp
    2800:	01400284 	movi	r5,10
    2804:	80800005 	stb	r2,0(r16)
    2808:	000a7140 	call	a714 <__divsi3>
    280c:	1039883a 	mov	fp,r2
    2810:	00800244 	movi	r2,9
    2814:	173ff416 	blt	r2,fp,27e8 <__alt_mem_Flash_flash_data+0xf40027e8>
    2818:	9011883a 	mov	r8,r18
    281c:	e0800c04 	addi	r2,fp,48
    2820:	8025883a 	mov	r18,r16
    2824:	913fffc4 	addi	r4,r18,-1
    2828:	90bfffc5 	stb	r2,-1(r18)
    282c:	dc002c17 	ldw	r16,176(sp)
    2830:	2540852e 	bgeu	r4,r21,2a48 <___vfprintf_internal_r+0x1f40>
    2834:	d9402384 	addi	r5,sp,142
    2838:	2c8bc83a 	sub	r5,r5,r18
    283c:	d8c02344 	addi	r3,sp,141
    2840:	a94b883a 	add	r5,r21,r5
    2844:	00000106 	br	284c <___vfprintf_internal_r+0x1d44>
    2848:	20800003 	ldbu	r2,0(r4)
    284c:	18800005 	stb	r2,0(r3)
    2850:	18c00044 	addi	r3,r3,1
    2854:	21000044 	addi	r4,r4,1
    2858:	197ffb1e 	bne	r3,r5,2848 <__alt_mem_Flash_flash_data+0xf4002848>
    285c:	d8802304 	addi	r2,sp,140
    2860:	1485c83a 	sub	r2,r2,r18
    2864:	d8c02344 	addi	r3,sp,141
    2868:	1885883a 	add	r2,r3,r2
    286c:	dac03317 	ldw	r11,204(sp)
    2870:	156bc83a 	sub	r21,r2,r21
    2874:	dd403a15 	stw	r21,232(sp)
    2878:	00800044 	movi	r2,1
    287c:	5d65883a 	add	r18,r11,r21
    2880:	12c0660e 	bge	r2,r11,2a1c <___vfprintf_internal_r+0x1f14>
    2884:	94800044 	addi	r18,r18,1
    2888:	9005883a 	mov	r2,r18
    288c:	90006116 	blt	r18,zero,2a14 <___vfprintf_internal_r+0x1f0c>
    2890:	d8003415 	stw	zero,208(sp)
    2894:	003e7406 	br	2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2898:	b009883a 	mov	r4,r22
    289c:	b80b883a 	mov	r5,r23
    28a0:	d9801e04 	addi	r6,sp,120
    28a4:	0007e980 	call	7e98 <__sprint_r>
    28a8:	10398b1e 	bne	r2,zero,ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>
    28ac:	dc002617 	ldw	r16,152(sp)
    28b0:	d8c02017 	ldw	r3,128(sp)
    28b4:	d8801f17 	ldw	r2,124(sp)
    28b8:	da000404 	addi	r8,sp,16
    28bc:	003ec906 	br	23e4 <__alt_mem_Flash_flash_data+0xf40023e4>
    28c0:	483e1c1e 	bne	r9,zero,2134 <__alt_mem_Flash_flash_data+0xf4002134>
    28c4:	9013883a 	mov	r9,r18
    28c8:	003e1a06 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    28cc:	02400184 	movi	r9,6
    28d0:	003e1806 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    28d4:	d8c03417 	ldw	r3,208(sp)
    28d8:	00c04b0e 	bge	zero,r3,2a08 <___vfprintf_internal_r+0x1f00>
    28dc:	04800044 	movi	r18,1
    28e0:	dac03317 	ldw	r11,204(sp)
    28e4:	92e5883a 	add	r18,r18,r11
    28e8:	9005883a 	mov	r2,r18
    28ec:	903e5e0e 	bge	r18,zero,2268 <__alt_mem_Flash_flash_data+0xf4002268>
    28f0:	0005883a 	mov	r2,zero
    28f4:	003e5c06 	br	2268 <__alt_mem_Flash_flash_data+0xf4002268>
    28f8:	00c00b44 	movi	r3,45
    28fc:	64a0003c 	xorhi	r18,r12,32768
    2900:	d8c02b05 	stb	r3,172(sp)
    2904:	003e1106 	br	214c <__alt_mem_Flash_flash_data+0xf400214c>
    2908:	4f000044 	addi	fp,r9,1
    290c:	003e1606 	br	2168 <__alt_mem_Flash_flash_data+0xf4002168>
    2910:	d8c02617 	ldw	r3,152(sp)
    2914:	d8c03415 	stw	r3,208(sp)
    2918:	00c0350e 	bge	zero,r3,29f0 <___vfprintf_internal_r+0x1ee8>
    291c:	4800081e 	bne	r9,zero,2940 <___vfprintf_internal_r+0x1e38>
    2920:	8c40004c 	andi	r17,r17,1
    2924:	8800061e 	bne	r17,zero,2940 <___vfprintf_internal_r+0x1e38>
    2928:	1805883a 	mov	r2,r3
    292c:	183e4d0e 	bge	r3,zero,2264 <__alt_mem_Flash_flash_data+0xf4002264>
    2930:	0005883a 	mov	r2,zero
    2934:	003e4b06 	br	2264 <__alt_mem_Flash_flash_data+0xf4002264>
    2938:	d8802117 	ldw	r2,132(sp)
    293c:	003e3706 	br	221c <__alt_mem_Flash_flash_data+0xf400221c>
    2940:	dac03417 	ldw	r11,208(sp)
    2944:	4a400044 	addi	r9,r9,1
    2948:	5a65883a 	add	r18,r11,r9
    294c:	9005883a 	mov	r2,r18
    2950:	903e450e 	bge	r18,zero,2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2954:	003fe606 	br	28f0 <__alt_mem_Flash_flash_data+0xf40028f0>
    2958:	db003417 	ldw	r12,208(sp)
    295c:	64800044 	addi	r18,r12,1
    2960:	9005883a 	mov	r2,r18
    2964:	903e400e 	bge	r18,zero,2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2968:	003fe106 	br	28f0 <__alt_mem_Flash_flash_data+0xf40028f0>
    296c:	d9003717 	ldw	r4,220(sp)
    2970:	900b883a 	mov	r5,r18
    2974:	000d883a 	mov	r6,zero
    2978:	000f883a 	mov	r7,zero
    297c:	da003f15 	stw	r8,252(sp)
    2980:	da403e15 	stw	r9,248(sp)
    2984:	da803d15 	stw	r10,244(sp)
    2988:	000b93c0 	call	b93c <__eqdf2>
    298c:	da003f17 	ldw	r8,252(sp)
    2990:	da403e17 	ldw	r9,248(sp)
    2994:	da803d17 	ldw	r10,244(sp)
    2998:	103f1f26 	beq	r2,zero,2618 <__alt_mem_Flash_flash_data+0xf4002618>
    299c:	00800044 	movi	r2,1
    29a0:	1707c83a 	sub	r3,r2,fp
    29a4:	d8c02615 	stw	r3,152(sp)
    29a8:	003f1c06 	br	261c <__alt_mem_Flash_flash_data+0xf400261c>
    29ac:	00800c04 	movi	r2,48
    29b0:	e0c00c04 	addi	r3,fp,48
    29b4:	d8802345 	stb	r2,141(sp)
    29b8:	d8c02385 	stb	r3,142(sp)
    29bc:	d88023c4 	addi	r2,sp,143
    29c0:	dd4022c4 	addi	r21,sp,139
    29c4:	003fa906 	br	286c <__alt_mem_Flash_flash_data+0xf400286c>
    29c8:	0005883a 	mov	r2,zero
    29cc:	003f3c06 	br	26c0 <__alt_mem_Flash_flash_data+0xf40026c0>
    29d0:	dac02d17 	ldw	r11,180(sp)
    29d4:	5a400017 	ldw	r9,0(r11)
    29d8:	5ac00104 	addi	r11,r11,4
    29dc:	dac02d15 	stw	r11,180(sp)
    29e0:	483ec80e 	bge	r9,zero,2504 <__alt_mem_Flash_flash_data+0xf4002504>
    29e4:	027fffc4 	movi	r9,-1
    29e8:	1c000047 	ldb	r16,1(r3)
    29ec:	0038ab06 	br	c9c <__alt_mem_Flash_flash_data+0xf4000c9c>
    29f0:	4800111e 	bne	r9,zero,2a38 <___vfprintf_internal_r+0x1f30>
    29f4:	8c40004c 	andi	r17,r17,1
    29f8:	88000f1e 	bne	r17,zero,2a38 <___vfprintf_internal_r+0x1f30>
    29fc:	00800044 	movi	r2,1
    2a00:	1025883a 	mov	r18,r2
    2a04:	003e1806 	br	2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2a08:	04800084 	movi	r18,2
    2a0c:	90e5c83a 	sub	r18,r18,r3
    2a10:	003fb306 	br	28e0 <__alt_mem_Flash_flash_data+0xf40028e0>
    2a14:	0005883a 	mov	r2,zero
    2a18:	003f9d06 	br	2890 <__alt_mem_Flash_flash_data+0xf4002890>
    2a1c:	88a2703a 	and	r17,r17,r2
    2a20:	883f9926 	beq	r17,zero,2888 <__alt_mem_Flash_flash_data+0xf4002888>
    2a24:	003f9706 	br	2884 <__alt_mem_Flash_flash_data+0xf4002884>
    2a28:	00800b44 	movi	r2,45
    2a2c:	0739c83a 	sub	fp,zero,fp
    2a30:	d8802305 	stb	r2,140(sp)
    2a34:	003f6606 	br	27d0 <__alt_mem_Flash_flash_data+0xf40027d0>
    2a38:	4c800084 	addi	r18,r9,2
    2a3c:	9005883a 	mov	r2,r18
    2a40:	903e090e 	bge	r18,zero,2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2a44:	003faa06 	br	28f0 <__alt_mem_Flash_flash_data+0xf40028f0>
    2a48:	d8802344 	addi	r2,sp,141
    2a4c:	003f8706 	br	286c <__alt_mem_Flash_flash_data+0xf400286c>
    2a50:	d8c02617 	ldw	r3,152(sp)
    2a54:	003f5806 	br	27b8 <__alt_mem_Flash_flash_data+0xf40027b8>

00002a58 <__vfprintf_internal>:
    2a58:	2007883a 	mov	r3,r4
    2a5c:	010000b4 	movhi	r4,2
    2a60:	21310304 	addi	r4,r4,-15348
    2a64:	21000017 	ldw	r4,0(r4)
    2a68:	2805883a 	mov	r2,r5
    2a6c:	300f883a 	mov	r7,r6
    2a70:	180b883a 	mov	r5,r3
    2a74:	100d883a 	mov	r6,r2
    2a78:	0000b081 	jmpi	b08 <___vfprintf_internal_r>

00002a7c <__sbprintf>:
    2a7c:	2880030b 	ldhu	r2,12(r5)
    2a80:	2ac01917 	ldw	r11,100(r5)
    2a84:	2a80038b 	ldhu	r10,14(r5)
    2a88:	2a400717 	ldw	r9,28(r5)
    2a8c:	2a000917 	ldw	r8,36(r5)
    2a90:	defee204 	addi	sp,sp,-1144
    2a94:	00c10004 	movi	r3,1024
    2a98:	dc011a15 	stw	r16,1128(sp)
    2a9c:	10bfff4c 	andi	r2,r2,65533
    2aa0:	2821883a 	mov	r16,r5
    2aa4:	d8cb883a 	add	r5,sp,r3
    2aa8:	dc811c15 	stw	r18,1136(sp)
    2aac:	dc411b15 	stw	r17,1132(sp)
    2ab0:	dfc11d15 	stw	ra,1140(sp)
    2ab4:	2025883a 	mov	r18,r4
    2ab8:	d881030d 	sth	r2,1036(sp)
    2abc:	dac11915 	stw	r11,1124(sp)
    2ac0:	da81038d 	sth	r10,1038(sp)
    2ac4:	da410715 	stw	r9,1052(sp)
    2ac8:	da010915 	stw	r8,1060(sp)
    2acc:	dec10015 	stw	sp,1024(sp)
    2ad0:	dec10415 	stw	sp,1040(sp)
    2ad4:	d8c10215 	stw	r3,1032(sp)
    2ad8:	d8c10515 	stw	r3,1044(sp)
    2adc:	d8010615 	stw	zero,1048(sp)
    2ae0:	0000b080 	call	b08 <___vfprintf_internal_r>
    2ae4:	1023883a 	mov	r17,r2
    2ae8:	10000416 	blt	r2,zero,2afc <__sbprintf+0x80>
    2aec:	9009883a 	mov	r4,r18
    2af0:	d9410004 	addi	r5,sp,1024
    2af4:	00047bc0 	call	47bc <_fflush_r>
    2af8:	10000d1e 	bne	r2,zero,2b30 <__sbprintf+0xb4>
    2afc:	d8c1030b 	ldhu	r3,1036(sp)
    2b00:	18c0100c 	andi	r3,r3,64
    2b04:	18000326 	beq	r3,zero,2b14 <__sbprintf+0x98>
    2b08:	8080030b 	ldhu	r2,12(r16)
    2b0c:	10801014 	ori	r2,r2,64
    2b10:	8080030d 	sth	r2,12(r16)
    2b14:	8805883a 	mov	r2,r17
    2b18:	dfc11d17 	ldw	ra,1140(sp)
    2b1c:	dc811c17 	ldw	r18,1136(sp)
    2b20:	dc411b17 	ldw	r17,1132(sp)
    2b24:	dc011a17 	ldw	r16,1128(sp)
    2b28:	dec11e04 	addi	sp,sp,1144
    2b2c:	f800283a 	ret
    2b30:	047fffc4 	movi	r17,-1
    2b34:	003ff106 	br	2afc <__alt_mem_Flash_flash_data+0xf4002afc>

00002b38 <__swsetup_r>:
    2b38:	008000b4 	movhi	r2,2
    2b3c:	defffd04 	addi	sp,sp,-12
    2b40:	10b10304 	addi	r2,r2,-15348
    2b44:	dc400115 	stw	r17,4(sp)
    2b48:	2023883a 	mov	r17,r4
    2b4c:	11000017 	ldw	r4,0(r2)
    2b50:	dc000015 	stw	r16,0(sp)
    2b54:	dfc00215 	stw	ra,8(sp)
    2b58:	2821883a 	mov	r16,r5
    2b5c:	20000226 	beq	r4,zero,2b68 <__swsetup_r+0x30>
    2b60:	20c00e17 	ldw	r3,56(r4)
    2b64:	18003126 	beq	r3,zero,2c2c <__swsetup_r+0xf4>
    2b68:	8080030b 	ldhu	r2,12(r16)
    2b6c:	10c0020c 	andi	r3,r2,8
    2b70:	100d883a 	mov	r6,r2
    2b74:	18000f26 	beq	r3,zero,2bb4 <__swsetup_r+0x7c>
    2b78:	80c00417 	ldw	r3,16(r16)
    2b7c:	18001526 	beq	r3,zero,2bd4 <__swsetup_r+0x9c>
    2b80:	1100004c 	andi	r4,r2,1
    2b84:	20001c1e 	bne	r4,zero,2bf8 <__swsetup_r+0xc0>
    2b88:	1080008c 	andi	r2,r2,2
    2b8c:	1000291e 	bne	r2,zero,2c34 <__swsetup_r+0xfc>
    2b90:	80800517 	ldw	r2,20(r16)
    2b94:	80800215 	stw	r2,8(r16)
    2b98:	18001c26 	beq	r3,zero,2c0c <__swsetup_r+0xd4>
    2b9c:	0005883a 	mov	r2,zero
    2ba0:	dfc00217 	ldw	ra,8(sp)
    2ba4:	dc400117 	ldw	r17,4(sp)
    2ba8:	dc000017 	ldw	r16,0(sp)
    2bac:	dec00304 	addi	sp,sp,12
    2bb0:	f800283a 	ret
    2bb4:	3080040c 	andi	r2,r6,16
    2bb8:	10002e26 	beq	r2,zero,2c74 <__swsetup_r+0x13c>
    2bbc:	3080010c 	andi	r2,r6,4
    2bc0:	10001e1e 	bne	r2,zero,2c3c <__swsetup_r+0x104>
    2bc4:	80c00417 	ldw	r3,16(r16)
    2bc8:	30800214 	ori	r2,r6,8
    2bcc:	8080030d 	sth	r2,12(r16)
    2bd0:	183feb1e 	bne	r3,zero,2b80 <__alt_mem_Flash_flash_data+0xf4002b80>
    2bd4:	1140a00c 	andi	r5,r2,640
    2bd8:	01008004 	movi	r4,512
    2bdc:	293fe826 	beq	r5,r4,2b80 <__alt_mem_Flash_flash_data+0xf4002b80>
    2be0:	8809883a 	mov	r4,r17
    2be4:	800b883a 	mov	r5,r16
    2be8:	00057240 	call	5724 <__smakebuf_r>
    2bec:	8080030b 	ldhu	r2,12(r16)
    2bf0:	80c00417 	ldw	r3,16(r16)
    2bf4:	003fe206 	br	2b80 <__alt_mem_Flash_flash_data+0xf4002b80>
    2bf8:	80800517 	ldw	r2,20(r16)
    2bfc:	80000215 	stw	zero,8(r16)
    2c00:	0085c83a 	sub	r2,zero,r2
    2c04:	80800615 	stw	r2,24(r16)
    2c08:	183fe41e 	bne	r3,zero,2b9c <__alt_mem_Flash_flash_data+0xf4002b9c>
    2c0c:	80c0030b 	ldhu	r3,12(r16)
    2c10:	0005883a 	mov	r2,zero
    2c14:	1900200c 	andi	r4,r3,128
    2c18:	203fe126 	beq	r4,zero,2ba0 <__alt_mem_Flash_flash_data+0xf4002ba0>
    2c1c:	18c01014 	ori	r3,r3,64
    2c20:	80c0030d 	sth	r3,12(r16)
    2c24:	00bfffc4 	movi	r2,-1
    2c28:	003fdd06 	br	2ba0 <__alt_mem_Flash_flash_data+0xf4002ba0>
    2c2c:	0004b980 	call	4b98 <__sinit>
    2c30:	003fcd06 	br	2b68 <__alt_mem_Flash_flash_data+0xf4002b68>
    2c34:	0005883a 	mov	r2,zero
    2c38:	003fd606 	br	2b94 <__alt_mem_Flash_flash_data+0xf4002b94>
    2c3c:	81400c17 	ldw	r5,48(r16)
    2c40:	28000626 	beq	r5,zero,2c5c <__swsetup_r+0x124>
    2c44:	80801004 	addi	r2,r16,64
    2c48:	28800326 	beq	r5,r2,2c58 <__swsetup_r+0x120>
    2c4c:	8809883a 	mov	r4,r17
    2c50:	0004d0c0 	call	4d0c <_free_r>
    2c54:	8180030b 	ldhu	r6,12(r16)
    2c58:	80000c15 	stw	zero,48(r16)
    2c5c:	80c00417 	ldw	r3,16(r16)
    2c60:	00bff6c4 	movi	r2,-37
    2c64:	118c703a 	and	r6,r2,r6
    2c68:	80000115 	stw	zero,4(r16)
    2c6c:	80c00015 	stw	r3,0(r16)
    2c70:	003fd506 	br	2bc8 <__alt_mem_Flash_flash_data+0xf4002bc8>
    2c74:	00800244 	movi	r2,9
    2c78:	88800015 	stw	r2,0(r17)
    2c7c:	30801014 	ori	r2,r6,64
    2c80:	8080030d 	sth	r2,12(r16)
    2c84:	00bfffc4 	movi	r2,-1
    2c88:	003fc506 	br	2ba0 <__alt_mem_Flash_flash_data+0xf4002ba0>

00002c8c <quorem>:
    2c8c:	defff704 	addi	sp,sp,-36
    2c90:	dc800215 	stw	r18,8(sp)
    2c94:	20800417 	ldw	r2,16(r4)
    2c98:	2c800417 	ldw	r18,16(r5)
    2c9c:	dfc00815 	stw	ra,32(sp)
    2ca0:	ddc00715 	stw	r23,28(sp)
    2ca4:	dd800615 	stw	r22,24(sp)
    2ca8:	dd400515 	stw	r21,20(sp)
    2cac:	dd000415 	stw	r20,16(sp)
    2cb0:	dcc00315 	stw	r19,12(sp)
    2cb4:	dc400115 	stw	r17,4(sp)
    2cb8:	dc000015 	stw	r16,0(sp)
    2cbc:	14807116 	blt	r2,r18,2e84 <quorem+0x1f8>
    2cc0:	94bfffc4 	addi	r18,r18,-1
    2cc4:	94ad883a 	add	r22,r18,r18
    2cc8:	b5ad883a 	add	r22,r22,r22
    2ccc:	2c400504 	addi	r17,r5,20
    2cd0:	8da9883a 	add	r20,r17,r22
    2cd4:	25400504 	addi	r21,r4,20
    2cd8:	282f883a 	mov	r23,r5
    2cdc:	adad883a 	add	r22,r21,r22
    2ce0:	a1400017 	ldw	r5,0(r20)
    2ce4:	2021883a 	mov	r16,r4
    2ce8:	b1000017 	ldw	r4,0(r22)
    2cec:	29400044 	addi	r5,r5,1
    2cf0:	000a7c40 	call	a7c4 <__udivsi3>
    2cf4:	1027883a 	mov	r19,r2
    2cf8:	10002c26 	beq	r2,zero,2dac <quorem+0x120>
    2cfc:	a813883a 	mov	r9,r21
    2d00:	8811883a 	mov	r8,r17
    2d04:	0009883a 	mov	r4,zero
    2d08:	000d883a 	mov	r6,zero
    2d0c:	41c00017 	ldw	r7,0(r8)
    2d10:	49400017 	ldw	r5,0(r9)
    2d14:	42000104 	addi	r8,r8,4
    2d18:	38bfffcc 	andi	r2,r7,65535
    2d1c:	14c5383a 	mul	r2,r2,r19
    2d20:	380ed43a 	srli	r7,r7,16
    2d24:	28ffffcc 	andi	r3,r5,65535
    2d28:	2085883a 	add	r2,r4,r2
    2d2c:	1008d43a 	srli	r4,r2,16
    2d30:	3ccf383a 	mul	r7,r7,r19
    2d34:	198d883a 	add	r6,r3,r6
    2d38:	10ffffcc 	andi	r3,r2,65535
    2d3c:	30c7c83a 	sub	r3,r6,r3
    2d40:	280ad43a 	srli	r5,r5,16
    2d44:	21c9883a 	add	r4,r4,r7
    2d48:	180dd43a 	srai	r6,r3,16
    2d4c:	20bfffcc 	andi	r2,r4,65535
    2d50:	288bc83a 	sub	r5,r5,r2
    2d54:	298b883a 	add	r5,r5,r6
    2d58:	280e943a 	slli	r7,r5,16
    2d5c:	18ffffcc 	andi	r3,r3,65535
    2d60:	2008d43a 	srli	r4,r4,16
    2d64:	38ceb03a 	or	r7,r7,r3
    2d68:	49c00015 	stw	r7,0(r9)
    2d6c:	280dd43a 	srai	r6,r5,16
    2d70:	4a400104 	addi	r9,r9,4
    2d74:	a23fe52e 	bgeu	r20,r8,2d0c <__alt_mem_Flash_flash_data+0xf4002d0c>
    2d78:	b0800017 	ldw	r2,0(r22)
    2d7c:	10000b1e 	bne	r2,zero,2dac <quorem+0x120>
    2d80:	b0bfff04 	addi	r2,r22,-4
    2d84:	a880082e 	bgeu	r21,r2,2da8 <quorem+0x11c>
    2d88:	b0ffff17 	ldw	r3,-4(r22)
    2d8c:	18000326 	beq	r3,zero,2d9c <quorem+0x110>
    2d90:	00000506 	br	2da8 <quorem+0x11c>
    2d94:	10c00017 	ldw	r3,0(r2)
    2d98:	1800031e 	bne	r3,zero,2da8 <quorem+0x11c>
    2d9c:	10bfff04 	addi	r2,r2,-4
    2da0:	94bfffc4 	addi	r18,r18,-1
    2da4:	a8bffb36 	bltu	r21,r2,2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    2da8:	84800415 	stw	r18,16(r16)
    2dac:	8009883a 	mov	r4,r16
    2db0:	b80b883a 	mov	r5,r23
    2db4:	0006df80 	call	6df8 <__mcmp>
    2db8:	10002616 	blt	r2,zero,2e54 <quorem+0x1c8>
    2dbc:	9cc00044 	addi	r19,r19,1
    2dc0:	a80d883a 	mov	r6,r21
    2dc4:	000b883a 	mov	r5,zero
    2dc8:	31000017 	ldw	r4,0(r6)
    2dcc:	88800017 	ldw	r2,0(r17)
    2dd0:	31800104 	addi	r6,r6,4
    2dd4:	20ffffcc 	andi	r3,r4,65535
    2dd8:	194b883a 	add	r5,r3,r5
    2ddc:	10ffffcc 	andi	r3,r2,65535
    2de0:	28c7c83a 	sub	r3,r5,r3
    2de4:	1004d43a 	srli	r2,r2,16
    2de8:	2008d43a 	srli	r4,r4,16
    2dec:	180bd43a 	srai	r5,r3,16
    2df0:	18ffffcc 	andi	r3,r3,65535
    2df4:	2089c83a 	sub	r4,r4,r2
    2df8:	2149883a 	add	r4,r4,r5
    2dfc:	2004943a 	slli	r2,r4,16
    2e00:	8c400104 	addi	r17,r17,4
    2e04:	200bd43a 	srai	r5,r4,16
    2e08:	10c6b03a 	or	r3,r2,r3
    2e0c:	30ffff15 	stw	r3,-4(r6)
    2e10:	a47fed2e 	bgeu	r20,r17,2dc8 <__alt_mem_Flash_flash_data+0xf4002dc8>
    2e14:	9485883a 	add	r2,r18,r18
    2e18:	1085883a 	add	r2,r2,r2
    2e1c:	a887883a 	add	r3,r21,r2
    2e20:	18800017 	ldw	r2,0(r3)
    2e24:	10000b1e 	bne	r2,zero,2e54 <quorem+0x1c8>
    2e28:	18bfff04 	addi	r2,r3,-4
    2e2c:	a880082e 	bgeu	r21,r2,2e50 <quorem+0x1c4>
    2e30:	18ffff17 	ldw	r3,-4(r3)
    2e34:	18000326 	beq	r3,zero,2e44 <quorem+0x1b8>
    2e38:	00000506 	br	2e50 <quorem+0x1c4>
    2e3c:	10c00017 	ldw	r3,0(r2)
    2e40:	1800031e 	bne	r3,zero,2e50 <quorem+0x1c4>
    2e44:	10bfff04 	addi	r2,r2,-4
    2e48:	94bfffc4 	addi	r18,r18,-1
    2e4c:	a8bffb36 	bltu	r21,r2,2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    2e50:	84800415 	stw	r18,16(r16)
    2e54:	9805883a 	mov	r2,r19
    2e58:	dfc00817 	ldw	ra,32(sp)
    2e5c:	ddc00717 	ldw	r23,28(sp)
    2e60:	dd800617 	ldw	r22,24(sp)
    2e64:	dd400517 	ldw	r21,20(sp)
    2e68:	dd000417 	ldw	r20,16(sp)
    2e6c:	dcc00317 	ldw	r19,12(sp)
    2e70:	dc800217 	ldw	r18,8(sp)
    2e74:	dc400117 	ldw	r17,4(sp)
    2e78:	dc000017 	ldw	r16,0(sp)
    2e7c:	dec00904 	addi	sp,sp,36
    2e80:	f800283a 	ret
    2e84:	0005883a 	mov	r2,zero
    2e88:	003ff306 	br	2e58 <__alt_mem_Flash_flash_data+0xf4002e58>

00002e8c <_dtoa_r>:
    2e8c:	20801017 	ldw	r2,64(r4)
    2e90:	deffde04 	addi	sp,sp,-136
    2e94:	dd401d15 	stw	r21,116(sp)
    2e98:	dcc01b15 	stw	r19,108(sp)
    2e9c:	dc801a15 	stw	r18,104(sp)
    2ea0:	dc401915 	stw	r17,100(sp)
    2ea4:	dc001815 	stw	r16,96(sp)
    2ea8:	dfc02115 	stw	ra,132(sp)
    2eac:	df002015 	stw	fp,128(sp)
    2eb0:	ddc01f15 	stw	r23,124(sp)
    2eb4:	dd801e15 	stw	r22,120(sp)
    2eb8:	dd001c15 	stw	r20,112(sp)
    2ebc:	d9c00315 	stw	r7,12(sp)
    2ec0:	2021883a 	mov	r16,r4
    2ec4:	302b883a 	mov	r21,r6
    2ec8:	2825883a 	mov	r18,r5
    2ecc:	dc402417 	ldw	r17,144(sp)
    2ed0:	3027883a 	mov	r19,r6
    2ed4:	10000826 	beq	r2,zero,2ef8 <_dtoa_r+0x6c>
    2ed8:	21801117 	ldw	r6,68(r4)
    2edc:	00c00044 	movi	r3,1
    2ee0:	100b883a 	mov	r5,r2
    2ee4:	1986983a 	sll	r3,r3,r6
    2ee8:	11800115 	stw	r6,4(r2)
    2eec:	10c00215 	stw	r3,8(r2)
    2ef0:	00065cc0 	call	65cc <_Bfree>
    2ef4:	80001015 	stw	zero,64(r16)
    2ef8:	a8002d16 	blt	r21,zero,2fb0 <_dtoa_r+0x124>
    2efc:	88000015 	stw	zero,0(r17)
    2f00:	a8dffc2c 	andhi	r3,r21,32752
    2f04:	009ffc34 	movhi	r2,32752
    2f08:	18801b26 	beq	r3,r2,2f78 <_dtoa_r+0xec>
    2f0c:	9009883a 	mov	r4,r18
    2f10:	980b883a 	mov	r5,r19
    2f14:	000d883a 	mov	r6,zero
    2f18:	000f883a 	mov	r7,zero
    2f1c:	000b93c0 	call	b93c <__eqdf2>
    2f20:	10002a1e 	bne	r2,zero,2fcc <_dtoa_r+0x140>
    2f24:	d8c02317 	ldw	r3,140(sp)
    2f28:	d9002517 	ldw	r4,148(sp)
    2f2c:	00800044 	movi	r2,1
    2f30:	18800015 	stw	r2,0(r3)
    2f34:	2001a226 	beq	r4,zero,35c0 <_dtoa_r+0x734>
    2f38:	008000b4 	movhi	r2,2
    2f3c:	10a6d144 	addi	r2,r2,-25787
    2f40:	20800015 	stw	r2,0(r4)
    2f44:	10bfffc4 	addi	r2,r2,-1
    2f48:	dfc02117 	ldw	ra,132(sp)
    2f4c:	df002017 	ldw	fp,128(sp)
    2f50:	ddc01f17 	ldw	r23,124(sp)
    2f54:	dd801e17 	ldw	r22,120(sp)
    2f58:	dd401d17 	ldw	r21,116(sp)
    2f5c:	dd001c17 	ldw	r20,112(sp)
    2f60:	dcc01b17 	ldw	r19,108(sp)
    2f64:	dc801a17 	ldw	r18,104(sp)
    2f68:	dc401917 	ldw	r17,100(sp)
    2f6c:	dc001817 	ldw	r16,96(sp)
    2f70:	dec02204 	addi	sp,sp,136
    2f74:	f800283a 	ret
    2f78:	d8c02317 	ldw	r3,140(sp)
    2f7c:	0089c3c4 	movi	r2,9999
    2f80:	18800015 	stw	r2,0(r3)
    2f84:	90017c26 	beq	r18,zero,3578 <_dtoa_r+0x6ec>
    2f88:	008000b4 	movhi	r2,2
    2f8c:	10a6dd04 	addi	r2,r2,-25740
    2f90:	d9002517 	ldw	r4,148(sp)
    2f94:	203fec26 	beq	r4,zero,2f48 <__alt_mem_Flash_flash_data+0xf4002f48>
    2f98:	10c000c7 	ldb	r3,3(r2)
    2f9c:	18017d1e 	bne	r3,zero,3594 <_dtoa_r+0x708>
    2fa0:	10c000c4 	addi	r3,r2,3
    2fa4:	d9802517 	ldw	r6,148(sp)
    2fa8:	30c00015 	stw	r3,0(r6)
    2fac:	003fe606 	br	2f48 <__alt_mem_Flash_flash_data+0xf4002f48>
    2fb0:	04e00034 	movhi	r19,32768
    2fb4:	9cffffc4 	addi	r19,r19,-1
    2fb8:	00800044 	movi	r2,1
    2fbc:	ace6703a 	and	r19,r21,r19
    2fc0:	88800015 	stw	r2,0(r17)
    2fc4:	982b883a 	mov	r21,r19
    2fc8:	003fcd06 	br	2f00 <__alt_mem_Flash_flash_data+0xf4002f00>
    2fcc:	d8800204 	addi	r2,sp,8
    2fd0:	a822d53a 	srli	r17,r21,20
    2fd4:	d8800015 	stw	r2,0(sp)
    2fd8:	8009883a 	mov	r4,r16
    2fdc:	900b883a 	mov	r5,r18
    2fe0:	980d883a 	mov	r6,r19
    2fe4:	d9c00104 	addi	r7,sp,4
    2fe8:	000716c0 	call	716c <__d2b>
    2fec:	1039883a 	mov	fp,r2
    2ff0:	88016a1e 	bne	r17,zero,359c <_dtoa_r+0x710>
    2ff4:	dd000217 	ldw	r20,8(sp)
    2ff8:	dc400117 	ldw	r17,4(sp)
    2ffc:	00befbc4 	movi	r2,-1041
    3000:	a463883a 	add	r17,r20,r17
    3004:	8882ea16 	blt	r17,r2,3bb0 <_dtoa_r+0xd24>
    3008:	00bf0384 	movi	r2,-1010
    300c:	1445c83a 	sub	r2,r2,r17
    3010:	89010484 	addi	r4,r17,1042
    3014:	a8aa983a 	sll	r21,r21,r2
    3018:	9108d83a 	srl	r4,r18,r4
    301c:	a908b03a 	or	r4,r21,r4
    3020:	000cccc0 	call	cccc <__floatunsidf>
    3024:	017f8434 	movhi	r5,65040
    3028:	01800044 	movi	r6,1
    302c:	1009883a 	mov	r4,r2
    3030:	194b883a 	add	r5,r3,r5
    3034:	8c7fffc4 	addi	r17,r17,-1
    3038:	d9800f15 	stw	r6,60(sp)
    303c:	000d883a 	mov	r6,zero
    3040:	01cffe34 	movhi	r7,16376
    3044:	000c2a40 	call	c2a4 <__subdf3>
    3048:	0198dbf4 	movhi	r6,25455
    304c:	01cff4f4 	movhi	r7,16339
    3050:	1009883a 	mov	r4,r2
    3054:	180b883a 	mov	r5,r3
    3058:	3190d844 	addi	r6,r6,17249
    305c:	39e1e9c4 	addi	r7,r7,-30809
    3060:	000bb800 	call	bb80 <__muldf3>
    3064:	01a2d874 	movhi	r6,35681
    3068:	01cff1f4 	movhi	r7,16327
    306c:	180b883a 	mov	r5,r3
    3070:	31b22cc4 	addi	r6,r6,-14157
    3074:	39e28a04 	addi	r7,r7,-30168
    3078:	1009883a 	mov	r4,r2
    307c:	000a7d40 	call	a7d4 <__adddf3>
    3080:	8809883a 	mov	r4,r17
    3084:	102d883a 	mov	r22,r2
    3088:	182b883a 	mov	r21,r3
    308c:	000cbfc0 	call	cbfc <__floatsidf>
    3090:	019427f4 	movhi	r6,20639
    3094:	01cff4f4 	movhi	r7,16339
    3098:	1009883a 	mov	r4,r2
    309c:	180b883a 	mov	r5,r3
    30a0:	319e7ec4 	addi	r6,r6,31227
    30a4:	39d104c4 	addi	r7,r7,17427
    30a8:	000bb800 	call	bb80 <__muldf3>
    30ac:	b009883a 	mov	r4,r22
    30b0:	a80b883a 	mov	r5,r21
    30b4:	100d883a 	mov	r6,r2
    30b8:	180f883a 	mov	r7,r3
    30bc:	000a7d40 	call	a7d4 <__adddf3>
    30c0:	1009883a 	mov	r4,r2
    30c4:	180b883a 	mov	r5,r3
    30c8:	102d883a 	mov	r22,r2
    30cc:	182b883a 	mov	r21,r3
    30d0:	000cb740 	call	cb74 <__fixdfsi>
    30d4:	b009883a 	mov	r4,r22
    30d8:	a80b883a 	mov	r5,r21
    30dc:	000d883a 	mov	r6,zero
    30e0:	000f883a 	mov	r7,zero
    30e4:	d8800515 	stw	r2,20(sp)
    30e8:	000baa00 	call	baa0 <__ledf2>
    30ec:	10023116 	blt	r2,zero,39b4 <_dtoa_r+0xb28>
    30f0:	d8c00517 	ldw	r3,20(sp)
    30f4:	00800584 	movi	r2,22
    30f8:	10c21f36 	bltu	r2,r3,3978 <_dtoa_r+0xaec>
    30fc:	180490fa 	slli	r2,r3,3
    3100:	00c000b4 	movhi	r3,2
    3104:	18e6f904 	addi	r3,r3,-25628
    3108:	1885883a 	add	r2,r3,r2
    310c:	11000017 	ldw	r4,0(r2)
    3110:	11400117 	ldw	r5,4(r2)
    3114:	900d883a 	mov	r6,r18
    3118:	980f883a 	mov	r7,r19
    311c:	000b9c00 	call	b9c0 <__gedf2>
    3120:	0082a70e 	bge	zero,r2,3bc0 <_dtoa_r+0xd34>
    3124:	d9000517 	ldw	r4,20(sp)
    3128:	d8000d15 	stw	zero,52(sp)
    312c:	213fffc4 	addi	r4,r4,-1
    3130:	d9000515 	stw	r4,20(sp)
    3134:	a463c83a 	sub	r17,r20,r17
    3138:	8dbfffc4 	addi	r22,r17,-1
    313c:	b0021916 	blt	r22,zero,39a4 <_dtoa_r+0xb18>
    3140:	d8000815 	stw	zero,32(sp)
    3144:	d8800517 	ldw	r2,20(sp)
    3148:	10020e16 	blt	r2,zero,3984 <_dtoa_r+0xaf8>
    314c:	b0ad883a 	add	r22,r22,r2
    3150:	d8800a15 	stw	r2,40(sp)
    3154:	d8000915 	stw	zero,36(sp)
    3158:	d8c00317 	ldw	r3,12(sp)
    315c:	00800244 	movi	r2,9
    3160:	10c11a36 	bltu	r2,r3,35cc <_dtoa_r+0x740>
    3164:	00800144 	movi	r2,5
    3168:	10c4fc0e 	bge	r2,r3,455c <_dtoa_r+0x16d0>
    316c:	18ffff04 	addi	r3,r3,-4
    3170:	d8c00315 	stw	r3,12(sp)
    3174:	0029883a 	mov	r20,zero
    3178:	d9800317 	ldw	r6,12(sp)
    317c:	008000c4 	movi	r2,3
    3180:	3083bd26 	beq	r6,r2,4078 <_dtoa_r+0x11ec>
    3184:	1183670e 	bge	r2,r6,3f24 <_dtoa_r+0x1098>
    3188:	d8c00317 	ldw	r3,12(sp)
    318c:	00800104 	movi	r2,4
    3190:	1882e726 	beq	r3,r2,3d30 <_dtoa_r+0xea4>
    3194:	00800144 	movi	r2,5
    3198:	1884f21e 	bne	r3,r2,4564 <_dtoa_r+0x16d8>
    319c:	00800044 	movi	r2,1
    31a0:	d8800b15 	stw	r2,44(sp)
    31a4:	d8c02217 	ldw	r3,136(sp)
    31a8:	d9000517 	ldw	r4,20(sp)
    31ac:	1907883a 	add	r3,r3,r4
    31b0:	19800044 	addi	r6,r3,1
    31b4:	d8c00c15 	stw	r3,48(sp)
    31b8:	d9800615 	stw	r6,24(sp)
    31bc:	0183c30e 	bge	zero,r6,40cc <_dtoa_r+0x1240>
    31c0:	d9800617 	ldw	r6,24(sp)
    31c4:	3023883a 	mov	r17,r6
    31c8:	80001115 	stw	zero,68(r16)
    31cc:	008005c4 	movi	r2,23
    31d0:	1184f62e 	bgeu	r2,r6,45ac <_dtoa_r+0x1720>
    31d4:	00c00044 	movi	r3,1
    31d8:	00800104 	movi	r2,4
    31dc:	1085883a 	add	r2,r2,r2
    31e0:	11000504 	addi	r4,r2,20
    31e4:	180b883a 	mov	r5,r3
    31e8:	18c00044 	addi	r3,r3,1
    31ec:	313ffb2e 	bgeu	r6,r4,31dc <__alt_mem_Flash_flash_data+0xf40031dc>
    31f0:	81401115 	stw	r5,68(r16)
    31f4:	8009883a 	mov	r4,r16
    31f8:	00065240 	call	6524 <_Balloc>
    31fc:	d8800715 	stw	r2,28(sp)
    3200:	80801015 	stw	r2,64(r16)
    3204:	00800384 	movi	r2,14
    3208:	1440fd36 	bltu	r2,r17,3600 <_dtoa_r+0x774>
    320c:	a000fc26 	beq	r20,zero,3600 <_dtoa_r+0x774>
    3210:	d8800517 	ldw	r2,20(sp)
    3214:	0083b90e 	bge	zero,r2,40fc <_dtoa_r+0x1270>
    3218:	d8c00517 	ldw	r3,20(sp)
    321c:	108003cc 	andi	r2,r2,15
    3220:	100490fa 	slli	r2,r2,3
    3224:	182fd13a 	srai	r23,r3,4
    3228:	00c000b4 	movhi	r3,2
    322c:	18e6f904 	addi	r3,r3,-25628
    3230:	1885883a 	add	r2,r3,r2
    3234:	b8c0040c 	andi	r3,r23,16
    3238:	12c00017 	ldw	r11,0(r2)
    323c:	12800117 	ldw	r10,4(r2)
    3240:	18039726 	beq	r3,zero,40a0 <_dtoa_r+0x1214>
    3244:	008000b4 	movhi	r2,2
    3248:	10a6ef04 	addi	r2,r2,-25668
    324c:	11800817 	ldw	r6,32(r2)
    3250:	11c00917 	ldw	r7,36(r2)
    3254:	9009883a 	mov	r4,r18
    3258:	980b883a 	mov	r5,r19
    325c:	da801615 	stw	r10,88(sp)
    3260:	dac01515 	stw	r11,84(sp)
    3264:	000b0700 	call	b070 <__divdf3>
    3268:	da801617 	ldw	r10,88(sp)
    326c:	dac01517 	ldw	r11,84(sp)
    3270:	bdc003cc 	andi	r23,r23,15
    3274:	044000c4 	movi	r17,3
    3278:	d8800e15 	stw	r2,56(sp)
    327c:	182b883a 	mov	r21,r3
    3280:	b8001126 	beq	r23,zero,32c8 <_dtoa_r+0x43c>
    3284:	050000b4 	movhi	r20,2
    3288:	a526ef04 	addi	r20,r20,-25668
    328c:	5805883a 	mov	r2,r11
    3290:	5007883a 	mov	r3,r10
    3294:	b980004c 	andi	r6,r23,1
    3298:	1009883a 	mov	r4,r2
    329c:	b82fd07a 	srai	r23,r23,1
    32a0:	180b883a 	mov	r5,r3
    32a4:	30000426 	beq	r6,zero,32b8 <_dtoa_r+0x42c>
    32a8:	a1800017 	ldw	r6,0(r20)
    32ac:	a1c00117 	ldw	r7,4(r20)
    32b0:	8c400044 	addi	r17,r17,1
    32b4:	000bb800 	call	bb80 <__muldf3>
    32b8:	a5000204 	addi	r20,r20,8
    32bc:	b83ff51e 	bne	r23,zero,3294 <__alt_mem_Flash_flash_data+0xf4003294>
    32c0:	1017883a 	mov	r11,r2
    32c4:	1815883a 	mov	r10,r3
    32c8:	d9000e17 	ldw	r4,56(sp)
    32cc:	a80b883a 	mov	r5,r21
    32d0:	580d883a 	mov	r6,r11
    32d4:	500f883a 	mov	r7,r10
    32d8:	000b0700 	call	b070 <__divdf3>
    32dc:	1029883a 	mov	r20,r2
    32e0:	182b883a 	mov	r21,r3
    32e4:	d9800d17 	ldw	r6,52(sp)
    32e8:	30000626 	beq	r6,zero,3304 <_dtoa_r+0x478>
    32ec:	a009883a 	mov	r4,r20
    32f0:	a80b883a 	mov	r5,r21
    32f4:	000d883a 	mov	r6,zero
    32f8:	01cffc34 	movhi	r7,16368
    32fc:	000baa00 	call	baa0 <__ledf2>
    3300:	10043216 	blt	r2,zero,43cc <_dtoa_r+0x1540>
    3304:	8809883a 	mov	r4,r17
    3308:	000cbfc0 	call	cbfc <__floatsidf>
    330c:	1009883a 	mov	r4,r2
    3310:	180b883a 	mov	r5,r3
    3314:	a00d883a 	mov	r6,r20
    3318:	a80f883a 	mov	r7,r21
    331c:	000bb800 	call	bb80 <__muldf3>
    3320:	000d883a 	mov	r6,zero
    3324:	1009883a 	mov	r4,r2
    3328:	180b883a 	mov	r5,r3
    332c:	01d00734 	movhi	r7,16412
    3330:	000a7d40 	call	a7d4 <__adddf3>
    3334:	1023883a 	mov	r17,r2
    3338:	d9800617 	ldw	r6,24(sp)
    333c:	00bf3034 	movhi	r2,64704
    3340:	1885883a 	add	r2,r3,r2
    3344:	d8800e15 	stw	r2,56(sp)
    3348:	30032e26 	beq	r6,zero,4004 <_dtoa_r+0x1178>
    334c:	d8c00517 	ldw	r3,20(sp)
    3350:	da800617 	ldw	r10,24(sp)
    3354:	d8c01215 	stw	r3,72(sp)
    3358:	d9000b17 	ldw	r4,44(sp)
    335c:	2003b026 	beq	r4,zero,4220 <_dtoa_r+0x1394>
    3360:	50bfffc4 	addi	r2,r10,-1
    3364:	100490fa 	slli	r2,r2,3
    3368:	00c000b4 	movhi	r3,2
    336c:	18e6f904 	addi	r3,r3,-25628
    3370:	1885883a 	add	r2,r3,r2
    3374:	11800017 	ldw	r6,0(r2)
    3378:	11c00117 	ldw	r7,4(r2)
    337c:	d8800717 	ldw	r2,28(sp)
    3380:	0009883a 	mov	r4,zero
    3384:	014ff834 	movhi	r5,16352
    3388:	da801615 	stw	r10,88(sp)
    338c:	15c00044 	addi	r23,r2,1
    3390:	000b0700 	call	b070 <__divdf3>
    3394:	d9c00e17 	ldw	r7,56(sp)
    3398:	880d883a 	mov	r6,r17
    339c:	1009883a 	mov	r4,r2
    33a0:	180b883a 	mov	r5,r3
    33a4:	000c2a40 	call	c2a4 <__subdf3>
    33a8:	a80b883a 	mov	r5,r21
    33ac:	a009883a 	mov	r4,r20
    33b0:	d8c01015 	stw	r3,64(sp)
    33b4:	d8800e15 	stw	r2,56(sp)
    33b8:	000cb740 	call	cb74 <__fixdfsi>
    33bc:	1009883a 	mov	r4,r2
    33c0:	d8801715 	stw	r2,92(sp)
    33c4:	000cbfc0 	call	cbfc <__floatsidf>
    33c8:	a009883a 	mov	r4,r20
    33cc:	a80b883a 	mov	r5,r21
    33d0:	100d883a 	mov	r6,r2
    33d4:	180f883a 	mov	r7,r3
    33d8:	000c2a40 	call	c2a4 <__subdf3>
    33dc:	da001717 	ldw	r8,92(sp)
    33e0:	1829883a 	mov	r20,r3
    33e4:	d8c00717 	ldw	r3,28(sp)
    33e8:	d9000e17 	ldw	r4,56(sp)
    33ec:	d9401017 	ldw	r5,64(sp)
    33f0:	42000c04 	addi	r8,r8,48
    33f4:	1023883a 	mov	r17,r2
    33f8:	1a000005 	stb	r8,0(r3)
    33fc:	880d883a 	mov	r6,r17
    3400:	a00f883a 	mov	r7,r20
    3404:	402b883a 	mov	r21,r8
    3408:	000b9c00 	call	b9c0 <__gedf2>
    340c:	00844516 	blt	zero,r2,4524 <_dtoa_r+0x1698>
    3410:	0009883a 	mov	r4,zero
    3414:	014ffc34 	movhi	r5,16368
    3418:	880d883a 	mov	r6,r17
    341c:	a00f883a 	mov	r7,r20
    3420:	000c2a40 	call	c2a4 <__subdf3>
    3424:	d9000e17 	ldw	r4,56(sp)
    3428:	d9401017 	ldw	r5,64(sp)
    342c:	100d883a 	mov	r6,r2
    3430:	180f883a 	mov	r7,r3
    3434:	000b9c00 	call	b9c0 <__gedf2>
    3438:	da801617 	ldw	r10,88(sp)
    343c:	00843616 	blt	zero,r2,4518 <_dtoa_r+0x168c>
    3440:	00800044 	movi	r2,1
    3444:	12806e0e 	bge	r2,r10,3600 <_dtoa_r+0x774>
    3448:	d9000717 	ldw	r4,28(sp)
    344c:	dd801315 	stw	r22,76(sp)
    3450:	dc001115 	stw	r16,68(sp)
    3454:	2295883a 	add	r10,r4,r10
    3458:	dcc01415 	stw	r19,80(sp)
    345c:	502d883a 	mov	r22,r10
    3460:	dcc01017 	ldw	r19,64(sp)
    3464:	b821883a 	mov	r16,r23
    3468:	dc801015 	stw	r18,64(sp)
    346c:	dc800e17 	ldw	r18,56(sp)
    3470:	00000906 	br	3498 <_dtoa_r+0x60c>
    3474:	000c2a40 	call	c2a4 <__subdf3>
    3478:	1009883a 	mov	r4,r2
    347c:	180b883a 	mov	r5,r3
    3480:	900d883a 	mov	r6,r18
    3484:	980f883a 	mov	r7,r19
    3488:	000baa00 	call	baa0 <__ledf2>
    348c:	10040e16 	blt	r2,zero,44c8 <_dtoa_r+0x163c>
    3490:	b821883a 	mov	r16,r23
    3494:	bd841026 	beq	r23,r22,44d8 <_dtoa_r+0x164c>
    3498:	9009883a 	mov	r4,r18
    349c:	980b883a 	mov	r5,r19
    34a0:	000d883a 	mov	r6,zero
    34a4:	01d00934 	movhi	r7,16420
    34a8:	000bb800 	call	bb80 <__muldf3>
    34ac:	000d883a 	mov	r6,zero
    34b0:	01d00934 	movhi	r7,16420
    34b4:	8809883a 	mov	r4,r17
    34b8:	a00b883a 	mov	r5,r20
    34bc:	1025883a 	mov	r18,r2
    34c0:	1827883a 	mov	r19,r3
    34c4:	000bb800 	call	bb80 <__muldf3>
    34c8:	180b883a 	mov	r5,r3
    34cc:	1009883a 	mov	r4,r2
    34d0:	1823883a 	mov	r17,r3
    34d4:	1029883a 	mov	r20,r2
    34d8:	000cb740 	call	cb74 <__fixdfsi>
    34dc:	1009883a 	mov	r4,r2
    34e0:	102b883a 	mov	r21,r2
    34e4:	000cbfc0 	call	cbfc <__floatsidf>
    34e8:	a009883a 	mov	r4,r20
    34ec:	880b883a 	mov	r5,r17
    34f0:	100d883a 	mov	r6,r2
    34f4:	180f883a 	mov	r7,r3
    34f8:	000c2a40 	call	c2a4 <__subdf3>
    34fc:	ad400c04 	addi	r21,r21,48
    3500:	1009883a 	mov	r4,r2
    3504:	180b883a 	mov	r5,r3
    3508:	900d883a 	mov	r6,r18
    350c:	980f883a 	mov	r7,r19
    3510:	85400005 	stb	r21,0(r16)
    3514:	1023883a 	mov	r17,r2
    3518:	1829883a 	mov	r20,r3
    351c:	000baa00 	call	baa0 <__ledf2>
    3520:	bdc00044 	addi	r23,r23,1
    3524:	0009883a 	mov	r4,zero
    3528:	014ffc34 	movhi	r5,16368
    352c:	880d883a 	mov	r6,r17
    3530:	a00f883a 	mov	r7,r20
    3534:	103fcf0e 	bge	r2,zero,3474 <__alt_mem_Flash_flash_data+0xf4003474>
    3538:	d9801217 	ldw	r6,72(sp)
    353c:	dc001117 	ldw	r16,68(sp)
    3540:	d9800515 	stw	r6,20(sp)
    3544:	8009883a 	mov	r4,r16
    3548:	e00b883a 	mov	r5,fp
    354c:	00065cc0 	call	65cc <_Bfree>
    3550:	d8c00517 	ldw	r3,20(sp)
    3554:	d9002317 	ldw	r4,140(sp)
    3558:	d9802517 	ldw	r6,148(sp)
    355c:	b8000005 	stb	zero,0(r23)
    3560:	18800044 	addi	r2,r3,1
    3564:	20800015 	stw	r2,0(r4)
    3568:	30027226 	beq	r6,zero,3f34 <_dtoa_r+0x10a8>
    356c:	35c00015 	stw	r23,0(r6)
    3570:	d8800717 	ldw	r2,28(sp)
    3574:	003e7406 	br	2f48 <__alt_mem_Flash_flash_data+0xf4002f48>
    3578:	00800434 	movhi	r2,16
    357c:	10bfffc4 	addi	r2,r2,-1
    3580:	a8aa703a 	and	r21,r21,r2
    3584:	a83e801e 	bne	r21,zero,2f88 <__alt_mem_Flash_flash_data+0xf4002f88>
    3588:	008000b4 	movhi	r2,2
    358c:	10a6da04 	addi	r2,r2,-25752
    3590:	003e7f06 	br	2f90 <__alt_mem_Flash_flash_data+0xf4002f90>
    3594:	10c00204 	addi	r3,r2,8
    3598:	003e8206 	br	2fa4 <__alt_mem_Flash_flash_data+0xf4002fa4>
    359c:	01400434 	movhi	r5,16
    35a0:	297fffc4 	addi	r5,r5,-1
    35a4:	994a703a 	and	r5,r19,r5
    35a8:	9009883a 	mov	r4,r18
    35ac:	8c7f0044 	addi	r17,r17,-1023
    35b0:	294ffc34 	orhi	r5,r5,16368
    35b4:	dd000217 	ldw	r20,8(sp)
    35b8:	d8000f15 	stw	zero,60(sp)
    35bc:	003e9f06 	br	303c <__alt_mem_Flash_flash_data+0xf400303c>
    35c0:	008000b4 	movhi	r2,2
    35c4:	10a6d104 	addi	r2,r2,-25788
    35c8:	003e5f06 	br	2f48 <__alt_mem_Flash_flash_data+0xf4002f48>
    35cc:	80001115 	stw	zero,68(r16)
    35d0:	8009883a 	mov	r4,r16
    35d4:	000b883a 	mov	r5,zero
    35d8:	00065240 	call	6524 <_Balloc>
    35dc:	01bfffc4 	movi	r6,-1
    35e0:	d8800715 	stw	r2,28(sp)
    35e4:	80801015 	stw	r2,64(r16)
    35e8:	00800044 	movi	r2,1
    35ec:	d9800c15 	stw	r6,48(sp)
    35f0:	d8800b15 	stw	r2,44(sp)
    35f4:	d9800615 	stw	r6,24(sp)
    35f8:	d8002215 	stw	zero,136(sp)
    35fc:	d8000315 	stw	zero,12(sp)
    3600:	d8800117 	ldw	r2,4(sp)
    3604:	10008e16 	blt	r2,zero,3840 <_dtoa_r+0x9b4>
    3608:	d9000517 	ldw	r4,20(sp)
    360c:	00c00384 	movi	r3,14
    3610:	19008b16 	blt	r3,r4,3840 <_dtoa_r+0x9b4>
    3614:	200490fa 	slli	r2,r4,3
    3618:	00c000b4 	movhi	r3,2
    361c:	d9802217 	ldw	r6,136(sp)
    3620:	18e6f904 	addi	r3,r3,-25628
    3624:	1885883a 	add	r2,r3,r2
    3628:	14400017 	ldw	r17,0(r2)
    362c:	15000117 	ldw	r20,4(r2)
    3630:	3001c716 	blt	r6,zero,3d50 <_dtoa_r+0xec4>
    3634:	880d883a 	mov	r6,r17
    3638:	a00f883a 	mov	r7,r20
    363c:	9009883a 	mov	r4,r18
    3640:	980b883a 	mov	r5,r19
    3644:	000b0700 	call	b070 <__divdf3>
    3648:	180b883a 	mov	r5,r3
    364c:	1009883a 	mov	r4,r2
    3650:	000cb740 	call	cb74 <__fixdfsi>
    3654:	1009883a 	mov	r4,r2
    3658:	102d883a 	mov	r22,r2
    365c:	000cbfc0 	call	cbfc <__floatsidf>
    3660:	1009883a 	mov	r4,r2
    3664:	180b883a 	mov	r5,r3
    3668:	880d883a 	mov	r6,r17
    366c:	a00f883a 	mov	r7,r20
    3670:	000bb800 	call	bb80 <__muldf3>
    3674:	9009883a 	mov	r4,r18
    3678:	980b883a 	mov	r5,r19
    367c:	100d883a 	mov	r6,r2
    3680:	180f883a 	mov	r7,r3
    3684:	000c2a40 	call	c2a4 <__subdf3>
    3688:	d9000717 	ldw	r4,28(sp)
    368c:	d9800617 	ldw	r6,24(sp)
    3690:	180b883a 	mov	r5,r3
    3694:	b0c00c04 	addi	r3,r22,48
    3698:	20c00005 	stb	r3,0(r4)
    369c:	25c00044 	addi	r23,r4,1
    36a0:	01000044 	movi	r4,1
    36a4:	1011883a 	mov	r8,r2
    36a8:	2807883a 	mov	r3,r5
    36ac:	31003d26 	beq	r6,r4,37a4 <_dtoa_r+0x918>
    36b0:	000d883a 	mov	r6,zero
    36b4:	01d00934 	movhi	r7,16420
    36b8:	1009883a 	mov	r4,r2
    36bc:	000bb800 	call	bb80 <__muldf3>
    36c0:	1009883a 	mov	r4,r2
    36c4:	180b883a 	mov	r5,r3
    36c8:	000d883a 	mov	r6,zero
    36cc:	000f883a 	mov	r7,zero
    36d0:	1027883a 	mov	r19,r2
    36d4:	182b883a 	mov	r21,r3
    36d8:	000b93c0 	call	b93c <__eqdf2>
    36dc:	103f9926 	beq	r2,zero,3544 <__alt_mem_Flash_flash_data+0xf4003544>
    36e0:	d8c00617 	ldw	r3,24(sp)
    36e4:	d9000717 	ldw	r4,28(sp)
    36e8:	b825883a 	mov	r18,r23
    36ec:	18bfffc4 	addi	r2,r3,-1
    36f0:	20ad883a 	add	r22,r4,r2
    36f4:	dc000315 	stw	r16,12(sp)
    36f8:	00000a06 	br	3724 <_dtoa_r+0x898>
    36fc:	000bb800 	call	bb80 <__muldf3>
    3700:	1009883a 	mov	r4,r2
    3704:	180b883a 	mov	r5,r3
    3708:	000d883a 	mov	r6,zero
    370c:	000f883a 	mov	r7,zero
    3710:	1027883a 	mov	r19,r2
    3714:	182b883a 	mov	r21,r3
    3718:	b825883a 	mov	r18,r23
    371c:	000b93c0 	call	b93c <__eqdf2>
    3720:	10022626 	beq	r2,zero,3fbc <_dtoa_r+0x1130>
    3724:	880d883a 	mov	r6,r17
    3728:	a00f883a 	mov	r7,r20
    372c:	9809883a 	mov	r4,r19
    3730:	a80b883a 	mov	r5,r21
    3734:	000b0700 	call	b070 <__divdf3>
    3738:	180b883a 	mov	r5,r3
    373c:	1009883a 	mov	r4,r2
    3740:	000cb740 	call	cb74 <__fixdfsi>
    3744:	1009883a 	mov	r4,r2
    3748:	1021883a 	mov	r16,r2
    374c:	000cbfc0 	call	cbfc <__floatsidf>
    3750:	1009883a 	mov	r4,r2
    3754:	180b883a 	mov	r5,r3
    3758:	880d883a 	mov	r6,r17
    375c:	a00f883a 	mov	r7,r20
    3760:	000bb800 	call	bb80 <__muldf3>
    3764:	9809883a 	mov	r4,r19
    3768:	a80b883a 	mov	r5,r21
    376c:	100d883a 	mov	r6,r2
    3770:	180f883a 	mov	r7,r3
    3774:	000c2a40 	call	c2a4 <__subdf3>
    3778:	82000c04 	addi	r8,r16,48
    377c:	92000005 	stb	r8,0(r18)
    3780:	1009883a 	mov	r4,r2
    3784:	180b883a 	mov	r5,r3
    3788:	000d883a 	mov	r6,zero
    378c:	01d00934 	movhi	r7,16420
    3790:	1011883a 	mov	r8,r2
    3794:	bdc00044 	addi	r23,r23,1
    3798:	95bfd81e 	bne	r18,r22,36fc <__alt_mem_Flash_flash_data+0xf40036fc>
    379c:	802d883a 	mov	r22,r16
    37a0:	dc000317 	ldw	r16,12(sp)
    37a4:	4009883a 	mov	r4,r8
    37a8:	180b883a 	mov	r5,r3
    37ac:	400d883a 	mov	r6,r8
    37b0:	180f883a 	mov	r7,r3
    37b4:	000a7d40 	call	a7d4 <__adddf3>
    37b8:	8809883a 	mov	r4,r17
    37bc:	a00b883a 	mov	r5,r20
    37c0:	100d883a 	mov	r6,r2
    37c4:	180f883a 	mov	r7,r3
    37c8:	1027883a 	mov	r19,r2
    37cc:	1825883a 	mov	r18,r3
    37d0:	000baa00 	call	baa0 <__ledf2>
    37d4:	10000816 	blt	r2,zero,37f8 <_dtoa_r+0x96c>
    37d8:	8809883a 	mov	r4,r17
    37dc:	a00b883a 	mov	r5,r20
    37e0:	980d883a 	mov	r6,r19
    37e4:	900f883a 	mov	r7,r18
    37e8:	000b93c0 	call	b93c <__eqdf2>
    37ec:	103f551e 	bne	r2,zero,3544 <__alt_mem_Flash_flash_data+0xf4003544>
    37f0:	b580004c 	andi	r22,r22,1
    37f4:	b03f5326 	beq	r22,zero,3544 <__alt_mem_Flash_flash_data+0xf4003544>
    37f8:	bd7fffc3 	ldbu	r21,-1(r23)
    37fc:	b8bfffc4 	addi	r2,r23,-1
    3800:	1007883a 	mov	r3,r2
    3804:	01400e44 	movi	r5,57
    3808:	d9800717 	ldw	r6,28(sp)
    380c:	00000506 	br	3824 <_dtoa_r+0x998>
    3810:	18ffffc4 	addi	r3,r3,-1
    3814:	30825e26 	beq	r6,r2,4190 <_dtoa_r+0x1304>
    3818:	1d400003 	ldbu	r21,0(r3)
    381c:	102f883a 	mov	r23,r2
    3820:	10bfffc4 	addi	r2,r2,-1
    3824:	a9003fcc 	andi	r4,r21,255
    3828:	2100201c 	xori	r4,r4,128
    382c:	213fe004 	addi	r4,r4,-128
    3830:	217ff726 	beq	r4,r5,3810 <__alt_mem_Flash_flash_data+0xf4003810>
    3834:	aa000044 	addi	r8,r21,1
    3838:	12000005 	stb	r8,0(r2)
    383c:	003f4106 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    3840:	d8c00b17 	ldw	r3,44(sp)
    3844:	18006726 	beq	r3,zero,39e4 <_dtoa_r+0xb58>
    3848:	d9000317 	ldw	r4,12(sp)
    384c:	00c00044 	movi	r3,1
    3850:	19016a0e 	bge	r3,r4,3dfc <_dtoa_r+0xf70>
    3854:	d8800617 	ldw	r2,24(sp)
    3858:	d8c00917 	ldw	r3,36(sp)
    385c:	157fffc4 	addi	r21,r2,-1
    3860:	1d420716 	blt	r3,r21,4080 <_dtoa_r+0x11f4>
    3864:	1d6bc83a 	sub	r21,r3,r21
    3868:	d8800617 	ldw	r2,24(sp)
    386c:	1002c716 	blt	r2,zero,438c <_dtoa_r+0x1500>
    3870:	dd000817 	ldw	r20,32(sp)
    3874:	d8800617 	ldw	r2,24(sp)
    3878:	d9800817 	ldw	r6,32(sp)
    387c:	8009883a 	mov	r4,r16
    3880:	01400044 	movi	r5,1
    3884:	308d883a 	add	r6,r6,r2
    3888:	d9800815 	stw	r6,32(sp)
    388c:	b0ad883a 	add	r22,r22,r2
    3890:	00069300 	call	6930 <__i2b>
    3894:	1023883a 	mov	r17,r2
    3898:	a0000826 	beq	r20,zero,38bc <_dtoa_r+0xa30>
    389c:	0580070e 	bge	zero,r22,38bc <_dtoa_r+0xa30>
    38a0:	b005883a 	mov	r2,r22
    38a4:	a5812016 	blt	r20,r22,3d28 <_dtoa_r+0xe9c>
    38a8:	d8c00817 	ldw	r3,32(sp)
    38ac:	a0a9c83a 	sub	r20,r20,r2
    38b0:	b0adc83a 	sub	r22,r22,r2
    38b4:	1887c83a 	sub	r3,r3,r2
    38b8:	d8c00815 	stw	r3,32(sp)
    38bc:	d9000917 	ldw	r4,36(sp)
    38c0:	0100140e 	bge	zero,r4,3914 <_dtoa_r+0xa88>
    38c4:	d9800b17 	ldw	r6,44(sp)
    38c8:	3001e526 	beq	r6,zero,4060 <_dtoa_r+0x11d4>
    38cc:	05400e0e 	bge	zero,r21,3908 <_dtoa_r+0xa7c>
    38d0:	880b883a 	mov	r5,r17
    38d4:	8009883a 	mov	r4,r16
    38d8:	a80d883a 	mov	r6,r21
    38dc:	0006b680 	call	6b68 <__pow5mult>
    38e0:	e00d883a 	mov	r6,fp
    38e4:	8009883a 	mov	r4,r16
    38e8:	100b883a 	mov	r5,r2
    38ec:	1023883a 	mov	r17,r2
    38f0:	000696c0 	call	696c <__multiply>
    38f4:	102f883a 	mov	r23,r2
    38f8:	e00b883a 	mov	r5,fp
    38fc:	8009883a 	mov	r4,r16
    3900:	00065cc0 	call	65cc <_Bfree>
    3904:	b839883a 	mov	fp,r23
    3908:	d8800917 	ldw	r2,36(sp)
    390c:	154dc83a 	sub	r6,r2,r21
    3910:	3001281e 	bne	r6,zero,3db4 <_dtoa_r+0xf28>
    3914:	05c00044 	movi	r23,1
    3918:	8009883a 	mov	r4,r16
    391c:	b80b883a 	mov	r5,r23
    3920:	00069300 	call	6930 <__i2b>
    3924:	d8c00a17 	ldw	r3,40(sp)
    3928:	102b883a 	mov	r21,r2
    392c:	00c0310e 	bge	zero,r3,39f4 <_dtoa_r+0xb68>
    3930:	8009883a 	mov	r4,r16
    3934:	100b883a 	mov	r5,r2
    3938:	180d883a 	mov	r6,r3
    393c:	0006b680 	call	6b68 <__pow5mult>
    3940:	d9000317 	ldw	r4,12(sp)
    3944:	102b883a 	mov	r21,r2
    3948:	b9011f0e 	bge	r23,r4,3dc8 <_dtoa_r+0xf3c>
    394c:	0027883a 	mov	r19,zero
    3950:	a8800417 	ldw	r2,16(r21)
    3954:	10800104 	addi	r2,r2,4
    3958:	1085883a 	add	r2,r2,r2
    395c:	1085883a 	add	r2,r2,r2
    3960:	a885883a 	add	r2,r21,r2
    3964:	11000017 	ldw	r4,0(r2)
    3968:	00068180 	call	6818 <__hi0bits>
    396c:	00c00804 	movi	r3,32
    3970:	1885c83a 	sub	r2,r3,r2
    3974:	00002506 	br	3a0c <_dtoa_r+0xb80>
    3978:	01800044 	movi	r6,1
    397c:	d9800d15 	stw	r6,52(sp)
    3980:	003dec06 	br	3134 <__alt_mem_Flash_flash_data+0xf4003134>
    3984:	d8c00817 	ldw	r3,32(sp)
    3988:	d9000517 	ldw	r4,20(sp)
    398c:	d8000a15 	stw	zero,40(sp)
    3990:	1907c83a 	sub	r3,r3,r4
    3994:	010dc83a 	sub	r6,zero,r4
    3998:	d8c00815 	stw	r3,32(sp)
    399c:	d9800915 	stw	r6,36(sp)
    39a0:	003ded06 	br	3158 <__alt_mem_Flash_flash_data+0xf4003158>
    39a4:	05adc83a 	sub	r22,zero,r22
    39a8:	dd800815 	stw	r22,32(sp)
    39ac:	002d883a 	mov	r22,zero
    39b0:	003de406 	br	3144 <__alt_mem_Flash_flash_data+0xf4003144>
    39b4:	d9000517 	ldw	r4,20(sp)
    39b8:	000cbfc0 	call	cbfc <__floatsidf>
    39bc:	1009883a 	mov	r4,r2
    39c0:	180b883a 	mov	r5,r3
    39c4:	b00d883a 	mov	r6,r22
    39c8:	a80f883a 	mov	r7,r21
    39cc:	000b93c0 	call	b93c <__eqdf2>
    39d0:	103dc726 	beq	r2,zero,30f0 <__alt_mem_Flash_flash_data+0xf40030f0>
    39d4:	d8800517 	ldw	r2,20(sp)
    39d8:	10bfffc4 	addi	r2,r2,-1
    39dc:	d8800515 	stw	r2,20(sp)
    39e0:	003dc306 	br	30f0 <__alt_mem_Flash_flash_data+0xf40030f0>
    39e4:	dd400917 	ldw	r21,36(sp)
    39e8:	dd000817 	ldw	r20,32(sp)
    39ec:	0023883a 	mov	r17,zero
    39f0:	003fa906 	br	3898 <__alt_mem_Flash_flash_data+0xf4003898>
    39f4:	d9800317 	ldw	r6,12(sp)
    39f8:	b981670e 	bge	r23,r6,3f98 <_dtoa_r+0x110c>
    39fc:	0027883a 	mov	r19,zero
    3a00:	d8c00a17 	ldw	r3,40(sp)
    3a04:	183fd21e 	bne	r3,zero,3950 <__alt_mem_Flash_flash_data+0xf4003950>
    3a08:	00800044 	movi	r2,1
    3a0c:	1585883a 	add	r2,r2,r22
    3a10:	108007cc 	andi	r2,r2,31
    3a14:	10005f26 	beq	r2,zero,3b94 <_dtoa_r+0xd08>
    3a18:	00c00804 	movi	r3,32
    3a1c:	1887c83a 	sub	r3,r3,r2
    3a20:	01000104 	movi	r4,4
    3a24:	20c2dd0e 	bge	r4,r3,459c <_dtoa_r+0x1710>
    3a28:	d9000817 	ldw	r4,32(sp)
    3a2c:	00c00704 	movi	r3,28
    3a30:	1885c83a 	sub	r2,r3,r2
    3a34:	2089883a 	add	r4,r4,r2
    3a38:	d9000815 	stw	r4,32(sp)
    3a3c:	a0a9883a 	add	r20,r20,r2
    3a40:	b0ad883a 	add	r22,r22,r2
    3a44:	d8800817 	ldw	r2,32(sp)
    3a48:	0080050e 	bge	zero,r2,3a60 <_dtoa_r+0xbd4>
    3a4c:	e00b883a 	mov	r5,fp
    3a50:	8009883a 	mov	r4,r16
    3a54:	100d883a 	mov	r6,r2
    3a58:	0006ca80 	call	6ca8 <__lshift>
    3a5c:	1039883a 	mov	fp,r2
    3a60:	0580050e 	bge	zero,r22,3a78 <_dtoa_r+0xbec>
    3a64:	a80b883a 	mov	r5,r21
    3a68:	8009883a 	mov	r4,r16
    3a6c:	b00d883a 	mov	r6,r22
    3a70:	0006ca80 	call	6ca8 <__lshift>
    3a74:	102b883a 	mov	r21,r2
    3a78:	d8c00d17 	ldw	r3,52(sp)
    3a7c:	1801161e 	bne	r3,zero,3ed8 <_dtoa_r+0x104c>
    3a80:	d8c00617 	ldw	r3,24(sp)
    3a84:	00c12d0e 	bge	zero,r3,3f3c <_dtoa_r+0x10b0>
    3a88:	d8c00b17 	ldw	r3,44(sp)
    3a8c:	1800571e 	bne	r3,zero,3bec <_dtoa_r+0xd60>
    3a90:	dc800717 	ldw	r18,28(sp)
    3a94:	dcc00617 	ldw	r19,24(sp)
    3a98:	9029883a 	mov	r20,r18
    3a9c:	00000206 	br	3aa8 <_dtoa_r+0xc1c>
    3aa0:	00065f40 	call	65f4 <__multadd>
    3aa4:	1039883a 	mov	fp,r2
    3aa8:	e009883a 	mov	r4,fp
    3aac:	a80b883a 	mov	r5,r21
    3ab0:	0002c8c0 	call	2c8c <quorem>
    3ab4:	10800c04 	addi	r2,r2,48
    3ab8:	90800005 	stb	r2,0(r18)
    3abc:	94800044 	addi	r18,r18,1
    3ac0:	9507c83a 	sub	r3,r18,r20
    3ac4:	8009883a 	mov	r4,r16
    3ac8:	e00b883a 	mov	r5,fp
    3acc:	01800284 	movi	r6,10
    3ad0:	000f883a 	mov	r7,zero
    3ad4:	1cfff216 	blt	r3,r19,3aa0 <__alt_mem_Flash_flash_data+0xf4003aa0>
    3ad8:	1011883a 	mov	r8,r2
    3adc:	d8800617 	ldw	r2,24(sp)
    3ae0:	00822e0e 	bge	zero,r2,439c <_dtoa_r+0x1510>
    3ae4:	d9000717 	ldw	r4,28(sp)
    3ae8:	0025883a 	mov	r18,zero
    3aec:	20af883a 	add	r23,r4,r2
    3af0:	e00b883a 	mov	r5,fp
    3af4:	01800044 	movi	r6,1
    3af8:	8009883a 	mov	r4,r16
    3afc:	da001715 	stw	r8,92(sp)
    3b00:	0006ca80 	call	6ca8 <__lshift>
    3b04:	1009883a 	mov	r4,r2
    3b08:	a80b883a 	mov	r5,r21
    3b0c:	1039883a 	mov	fp,r2
    3b10:	0006df80 	call	6df8 <__mcmp>
    3b14:	da001717 	ldw	r8,92(sp)
    3b18:	00816e0e 	bge	zero,r2,40d4 <_dtoa_r+0x1248>
    3b1c:	b93fffc3 	ldbu	r4,-1(r23)
    3b20:	b8bfffc4 	addi	r2,r23,-1
    3b24:	1007883a 	mov	r3,r2
    3b28:	01800e44 	movi	r6,57
    3b2c:	d9c00717 	ldw	r7,28(sp)
    3b30:	00000506 	br	3b48 <_dtoa_r+0xcbc>
    3b34:	18ffffc4 	addi	r3,r3,-1
    3b38:	38811926 	beq	r7,r2,3fa0 <_dtoa_r+0x1114>
    3b3c:	19000003 	ldbu	r4,0(r3)
    3b40:	102f883a 	mov	r23,r2
    3b44:	10bfffc4 	addi	r2,r2,-1
    3b48:	21403fcc 	andi	r5,r4,255
    3b4c:	2940201c 	xori	r5,r5,128
    3b50:	297fe004 	addi	r5,r5,-128
    3b54:	29bff726 	beq	r5,r6,3b34 <__alt_mem_Flash_flash_data+0xf4003b34>
    3b58:	21000044 	addi	r4,r4,1
    3b5c:	11000005 	stb	r4,0(r2)
    3b60:	8009883a 	mov	r4,r16
    3b64:	a80b883a 	mov	r5,r21
    3b68:	00065cc0 	call	65cc <_Bfree>
    3b6c:	883e7526 	beq	r17,zero,3544 <__alt_mem_Flash_flash_data+0xf4003544>
    3b70:	90000426 	beq	r18,zero,3b84 <_dtoa_r+0xcf8>
    3b74:	94400326 	beq	r18,r17,3b84 <_dtoa_r+0xcf8>
    3b78:	8009883a 	mov	r4,r16
    3b7c:	900b883a 	mov	r5,r18
    3b80:	00065cc0 	call	65cc <_Bfree>
    3b84:	8009883a 	mov	r4,r16
    3b88:	880b883a 	mov	r5,r17
    3b8c:	00065cc0 	call	65cc <_Bfree>
    3b90:	003e6c06 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    3b94:	00800704 	movi	r2,28
    3b98:	d9800817 	ldw	r6,32(sp)
    3b9c:	a0a9883a 	add	r20,r20,r2
    3ba0:	b0ad883a 	add	r22,r22,r2
    3ba4:	308d883a 	add	r6,r6,r2
    3ba8:	d9800815 	stw	r6,32(sp)
    3bac:	003fa506 	br	3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3bb0:	013efb84 	movi	r4,-1042
    3bb4:	246bc83a 	sub	r21,r4,r17
    3bb8:	9548983a 	sll	r4,r18,r21
    3bbc:	003d1806 	br	3020 <__alt_mem_Flash_flash_data+0xf4003020>
    3bc0:	d8000d15 	stw	zero,52(sp)
    3bc4:	003d5b06 	br	3134 <__alt_mem_Flash_flash_data+0xf4003134>
    3bc8:	880b883a 	mov	r5,r17
    3bcc:	8009883a 	mov	r4,r16
    3bd0:	01800284 	movi	r6,10
    3bd4:	000f883a 	mov	r7,zero
    3bd8:	00065f40 	call	65f4 <__multadd>
    3bdc:	1023883a 	mov	r17,r2
    3be0:	d8800c17 	ldw	r2,48(sp)
    3be4:	0082550e 	bge	zero,r2,453c <_dtoa_r+0x16b0>
    3be8:	d8800615 	stw	r2,24(sp)
    3bec:	0500050e 	bge	zero,r20,3c04 <_dtoa_r+0xd78>
    3bf0:	880b883a 	mov	r5,r17
    3bf4:	8009883a 	mov	r4,r16
    3bf8:	a00d883a 	mov	r6,r20
    3bfc:	0006ca80 	call	6ca8 <__lshift>
    3c00:	1023883a 	mov	r17,r2
    3c04:	98016a1e 	bne	r19,zero,41b0 <_dtoa_r+0x1324>
    3c08:	8829883a 	mov	r20,r17
    3c0c:	d9000617 	ldw	r4,24(sp)
    3c10:	dcc00717 	ldw	r19,28(sp)
    3c14:	9480004c 	andi	r18,r18,1
    3c18:	20bfffc4 	addi	r2,r4,-1
    3c1c:	9885883a 	add	r2,r19,r2
    3c20:	d8800415 	stw	r2,16(sp)
    3c24:	dc800615 	stw	r18,24(sp)
    3c28:	e009883a 	mov	r4,fp
    3c2c:	a80b883a 	mov	r5,r21
    3c30:	0002c8c0 	call	2c8c <quorem>
    3c34:	e009883a 	mov	r4,fp
    3c38:	880b883a 	mov	r5,r17
    3c3c:	102f883a 	mov	r23,r2
    3c40:	0006df80 	call	6df8 <__mcmp>
    3c44:	8009883a 	mov	r4,r16
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	a00d883a 	mov	r6,r20
    3c50:	102d883a 	mov	r22,r2
    3c54:	0006e580 	call	6e58 <__mdiff>
    3c58:	1007883a 	mov	r3,r2
    3c5c:	10800317 	ldw	r2,12(r2)
    3c60:	bc800c04 	addi	r18,r23,48
    3c64:	1000971e 	bne	r2,zero,3ec4 <_dtoa_r+0x1038>
    3c68:	180b883a 	mov	r5,r3
    3c6c:	e009883a 	mov	r4,fp
    3c70:	d8c01515 	stw	r3,84(sp)
    3c74:	0006df80 	call	6df8 <__mcmp>
    3c78:	d8c01517 	ldw	r3,84(sp)
    3c7c:	8009883a 	mov	r4,r16
    3c80:	d8801515 	stw	r2,84(sp)
    3c84:	180b883a 	mov	r5,r3
    3c88:	00065cc0 	call	65cc <_Bfree>
    3c8c:	d8801517 	ldw	r2,84(sp)
    3c90:	1000041e 	bne	r2,zero,3ca4 <_dtoa_r+0xe18>
    3c94:	d9800317 	ldw	r6,12(sp)
    3c98:	3000021e 	bne	r6,zero,3ca4 <_dtoa_r+0xe18>
    3c9c:	d8c00617 	ldw	r3,24(sp)
    3ca0:	18007626 	beq	r3,zero,3e7c <_dtoa_r+0xff0>
    3ca4:	b0005b16 	blt	r22,zero,3e14 <_dtoa_r+0xf88>
    3ca8:	b000041e 	bne	r22,zero,3cbc <_dtoa_r+0xe30>
    3cac:	d9000317 	ldw	r4,12(sp)
    3cb0:	2000021e 	bne	r4,zero,3cbc <_dtoa_r+0xe30>
    3cb4:	d8c00617 	ldw	r3,24(sp)
    3cb8:	18005626 	beq	r3,zero,3e14 <_dtoa_r+0xf88>
    3cbc:	00814d16 	blt	zero,r2,41f4 <_dtoa_r+0x1368>
    3cc0:	d8c00417 	ldw	r3,16(sp)
    3cc4:	9d800044 	addi	r22,r19,1
    3cc8:	9c800005 	stb	r18,0(r19)
    3ccc:	b02f883a 	mov	r23,r22
    3cd0:	98c14c26 	beq	r19,r3,4204 <_dtoa_r+0x1378>
    3cd4:	e00b883a 	mov	r5,fp
    3cd8:	8009883a 	mov	r4,r16
    3cdc:	01800284 	movi	r6,10
    3ce0:	000f883a 	mov	r7,zero
    3ce4:	00065f40 	call	65f4 <__multadd>
    3ce8:	1039883a 	mov	fp,r2
    3cec:	8d006d26 	beq	r17,r20,3ea4 <_dtoa_r+0x1018>
    3cf0:	880b883a 	mov	r5,r17
    3cf4:	01800284 	movi	r6,10
    3cf8:	000f883a 	mov	r7,zero
    3cfc:	8009883a 	mov	r4,r16
    3d00:	00065f40 	call	65f4 <__multadd>
    3d04:	a00b883a 	mov	r5,r20
    3d08:	8009883a 	mov	r4,r16
    3d0c:	01800284 	movi	r6,10
    3d10:	000f883a 	mov	r7,zero
    3d14:	1023883a 	mov	r17,r2
    3d18:	00065f40 	call	65f4 <__multadd>
    3d1c:	1029883a 	mov	r20,r2
    3d20:	b027883a 	mov	r19,r22
    3d24:	003fc006 	br	3c28 <__alt_mem_Flash_flash_data+0xf4003c28>
    3d28:	a005883a 	mov	r2,r20
    3d2c:	003ede06 	br	38a8 <__alt_mem_Flash_flash_data+0xf40038a8>
    3d30:	01000044 	movi	r4,1
    3d34:	d9000b15 	stw	r4,44(sp)
    3d38:	d9802217 	ldw	r6,136(sp)
    3d3c:	0180dc0e 	bge	zero,r6,40b0 <_dtoa_r+0x1224>
    3d40:	3023883a 	mov	r17,r6
    3d44:	d9800c15 	stw	r6,48(sp)
    3d48:	d9800615 	stw	r6,24(sp)
    3d4c:	003d1e06 	br	31c8 <__alt_mem_Flash_flash_data+0xf40031c8>
    3d50:	d8800617 	ldw	r2,24(sp)
    3d54:	00be3716 	blt	zero,r2,3634 <__alt_mem_Flash_flash_data+0xf4003634>
    3d58:	1000be1e 	bne	r2,zero,4054 <_dtoa_r+0x11c8>
    3d5c:	8809883a 	mov	r4,r17
    3d60:	a00b883a 	mov	r5,r20
    3d64:	000d883a 	mov	r6,zero
    3d68:	01d00534 	movhi	r7,16404
    3d6c:	000bb800 	call	bb80 <__muldf3>
    3d70:	1009883a 	mov	r4,r2
    3d74:	180b883a 	mov	r5,r3
    3d78:	900d883a 	mov	r6,r18
    3d7c:	980f883a 	mov	r7,r19
    3d80:	000b9c00 	call	b9c0 <__gedf2>
    3d84:	002b883a 	mov	r21,zero
    3d88:	0023883a 	mov	r17,zero
    3d8c:	10007a16 	blt	r2,zero,3f78 <_dtoa_r+0x10ec>
    3d90:	d9002217 	ldw	r4,136(sp)
    3d94:	ddc00717 	ldw	r23,28(sp)
    3d98:	0108303a 	nor	r4,zero,r4
    3d9c:	d9000515 	stw	r4,20(sp)
    3da0:	8009883a 	mov	r4,r16
    3da4:	a80b883a 	mov	r5,r21
    3da8:	00065cc0 	call	65cc <_Bfree>
    3dac:	883f751e 	bne	r17,zero,3b84 <__alt_mem_Flash_flash_data+0xf4003b84>
    3db0:	003de406 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    3db4:	e00b883a 	mov	r5,fp
    3db8:	8009883a 	mov	r4,r16
    3dbc:	0006b680 	call	6b68 <__pow5mult>
    3dc0:	1039883a 	mov	fp,r2
    3dc4:	003ed306 	br	3914 <__alt_mem_Flash_flash_data+0xf4003914>
    3dc8:	903ee01e 	bne	r18,zero,394c <__alt_mem_Flash_flash_data+0xf400394c>
    3dcc:	00800434 	movhi	r2,16
    3dd0:	10bfffc4 	addi	r2,r2,-1
    3dd4:	9884703a 	and	r2,r19,r2
    3dd8:	103f081e 	bne	r2,zero,39fc <__alt_mem_Flash_flash_data+0xf40039fc>
    3ddc:	9cdffc2c 	andhi	r19,r19,32752
    3de0:	983f0626 	beq	r19,zero,39fc <__alt_mem_Flash_flash_data+0xf40039fc>
    3de4:	d8800817 	ldw	r2,32(sp)
    3de8:	b5800044 	addi	r22,r22,1
    3dec:	04c00044 	movi	r19,1
    3df0:	10800044 	addi	r2,r2,1
    3df4:	d8800815 	stw	r2,32(sp)
    3df8:	003f0106 	br	3a00 <__alt_mem_Flash_flash_data+0xf4003a00>
    3dfc:	d9800f17 	ldw	r6,60(sp)
    3e00:	30016826 	beq	r6,zero,43a4 <_dtoa_r+0x1518>
    3e04:	10810cc4 	addi	r2,r2,1075
    3e08:	dd400917 	ldw	r21,36(sp)
    3e0c:	dd000817 	ldw	r20,32(sp)
    3e10:	003e9906 	br	3878 <__alt_mem_Flash_flash_data+0xf4003878>
    3e14:	9011883a 	mov	r8,r18
    3e18:	4007883a 	mov	r3,r8
    3e1c:	e02d883a 	mov	r22,fp
    3e20:	0080100e 	bge	zero,r2,3e64 <_dtoa_r+0xfd8>
    3e24:	01800044 	movi	r6,1
    3e28:	8009883a 	mov	r4,r16
    3e2c:	e00b883a 	mov	r5,fp
    3e30:	da001515 	stw	r8,84(sp)
    3e34:	da001715 	stw	r8,92(sp)
    3e38:	0006ca80 	call	6ca8 <__lshift>
    3e3c:	1009883a 	mov	r4,r2
    3e40:	a80b883a 	mov	r5,r21
    3e44:	102d883a 	mov	r22,r2
    3e48:	0006df80 	call	6df8 <__mcmp>
    3e4c:	d8c01517 	ldw	r3,84(sp)
    3e50:	da001717 	ldw	r8,92(sp)
    3e54:	0081a50e 	bge	zero,r2,44ec <_dtoa_r+0x1660>
    3e58:	00800e44 	movi	r2,57
    3e5c:	40817b26 	beq	r8,r2,444c <_dtoa_r+0x15c0>
    3e60:	40c00044 	addi	r3,r8,1
    3e64:	8825883a 	mov	r18,r17
    3e68:	9dc00044 	addi	r23,r19,1
    3e6c:	98c00005 	stb	r3,0(r19)
    3e70:	a023883a 	mov	r17,r20
    3e74:	b039883a 	mov	fp,r22
    3e78:	003f3906 	br	3b60 <__alt_mem_Flash_flash_data+0xf4003b60>
    3e7c:	00800e44 	movi	r2,57
    3e80:	9011883a 	mov	r8,r18
    3e84:	90817226 	beq	r18,r2,4450 <_dtoa_r+0x15c4>
    3e88:	0580010e 	bge	zero,r22,3e90 <_dtoa_r+0x1004>
    3e8c:	ba000c44 	addi	r8,r23,49
    3e90:	8825883a 	mov	r18,r17
    3e94:	9dc00044 	addi	r23,r19,1
    3e98:	9a000005 	stb	r8,0(r19)
    3e9c:	a023883a 	mov	r17,r20
    3ea0:	003f2f06 	br	3b60 <__alt_mem_Flash_flash_data+0xf4003b60>
    3ea4:	880b883a 	mov	r5,r17
    3ea8:	8009883a 	mov	r4,r16
    3eac:	01800284 	movi	r6,10
    3eb0:	000f883a 	mov	r7,zero
    3eb4:	00065f40 	call	65f4 <__multadd>
    3eb8:	1023883a 	mov	r17,r2
    3ebc:	1029883a 	mov	r20,r2
    3ec0:	003f9706 	br	3d20 <__alt_mem_Flash_flash_data+0xf4003d20>
    3ec4:	8009883a 	mov	r4,r16
    3ec8:	180b883a 	mov	r5,r3
    3ecc:	00065cc0 	call	65cc <_Bfree>
    3ed0:	00800044 	movi	r2,1
    3ed4:	003f7306 	br	3ca4 <__alt_mem_Flash_flash_data+0xf4003ca4>
    3ed8:	e009883a 	mov	r4,fp
    3edc:	a80b883a 	mov	r5,r21
    3ee0:	0006df80 	call	6df8 <__mcmp>
    3ee4:	103ee60e 	bge	r2,zero,3a80 <__alt_mem_Flash_flash_data+0xf4003a80>
    3ee8:	8009883a 	mov	r4,r16
    3eec:	e00b883a 	mov	r5,fp
    3ef0:	01800284 	movi	r6,10
    3ef4:	000f883a 	mov	r7,zero
    3ef8:	00065f40 	call	65f4 <__multadd>
    3efc:	d9000517 	ldw	r4,20(sp)
    3f00:	d9800b17 	ldw	r6,44(sp)
    3f04:	1039883a 	mov	fp,r2
    3f08:	213fffc4 	addi	r4,r4,-1
    3f0c:	d9000515 	stw	r4,20(sp)
    3f10:	303f2d1e 	bne	r6,zero,3bc8 <__alt_mem_Flash_flash_data+0xf4003bc8>
    3f14:	d9000c17 	ldw	r4,48(sp)
    3f18:	0101780e 	bge	zero,r4,44fc <_dtoa_r+0x1670>
    3f1c:	d9000615 	stw	r4,24(sp)
    3f20:	003edb06 	br	3a90 <__alt_mem_Flash_flash_data+0xf4003a90>
    3f24:	00800084 	movi	r2,2
    3f28:	30818e1e 	bne	r6,r2,4564 <_dtoa_r+0x16d8>
    3f2c:	d8000b15 	stw	zero,44(sp)
    3f30:	003f8106 	br	3d38 <__alt_mem_Flash_flash_data+0xf4003d38>
    3f34:	d8800717 	ldw	r2,28(sp)
    3f38:	003c0306 	br	2f48 <__alt_mem_Flash_flash_data+0xf4002f48>
    3f3c:	d9000317 	ldw	r4,12(sp)
    3f40:	00800084 	movi	r2,2
    3f44:	113ed00e 	bge	r2,r4,3a88 <__alt_mem_Flash_flash_data+0xf4003a88>
    3f48:	d8c00617 	ldw	r3,24(sp)
    3f4c:	183f901e 	bne	r3,zero,3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    3f50:	a80b883a 	mov	r5,r21
    3f54:	8009883a 	mov	r4,r16
    3f58:	01800144 	movi	r6,5
    3f5c:	000f883a 	mov	r7,zero
    3f60:	00065f40 	call	65f4 <__multadd>
    3f64:	e009883a 	mov	r4,fp
    3f68:	100b883a 	mov	r5,r2
    3f6c:	102b883a 	mov	r21,r2
    3f70:	0006df80 	call	6df8 <__mcmp>
    3f74:	00bf860e 	bge	zero,r2,3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    3f78:	d9800717 	ldw	r6,28(sp)
    3f7c:	00800c44 	movi	r2,49
    3f80:	30800005 	stb	r2,0(r6)
    3f84:	d8800517 	ldw	r2,20(sp)
    3f88:	35c00044 	addi	r23,r6,1
    3f8c:	10800044 	addi	r2,r2,1
    3f90:	d8800515 	stw	r2,20(sp)
    3f94:	003f8206 	br	3da0 <__alt_mem_Flash_flash_data+0xf4003da0>
    3f98:	903e981e 	bne	r18,zero,39fc <__alt_mem_Flash_flash_data+0xf40039fc>
    3f9c:	003f8b06 	br	3dcc <__alt_mem_Flash_flash_data+0xf4003dcc>
    3fa0:	d9800517 	ldw	r6,20(sp)
    3fa4:	d8c00717 	ldw	r3,28(sp)
    3fa8:	00800c44 	movi	r2,49
    3fac:	31800044 	addi	r6,r6,1
    3fb0:	d9800515 	stw	r6,20(sp)
    3fb4:	18800005 	stb	r2,0(r3)
    3fb8:	003ee906 	br	3b60 <__alt_mem_Flash_flash_data+0xf4003b60>
    3fbc:	dc000317 	ldw	r16,12(sp)
    3fc0:	003d6006 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    3fc4:	8809883a 	mov	r4,r17
    3fc8:	000cbfc0 	call	cbfc <__floatsidf>
    3fcc:	a009883a 	mov	r4,r20
    3fd0:	a80b883a 	mov	r5,r21
    3fd4:	100d883a 	mov	r6,r2
    3fd8:	180f883a 	mov	r7,r3
    3fdc:	000bb800 	call	bb80 <__muldf3>
    3fe0:	1009883a 	mov	r4,r2
    3fe4:	180b883a 	mov	r5,r3
    3fe8:	000d883a 	mov	r6,zero
    3fec:	01d00734 	movhi	r7,16412
    3ff0:	000a7d40 	call	a7d4 <__adddf3>
    3ff4:	1023883a 	mov	r17,r2
    3ff8:	00bf3034 	movhi	r2,64704
    3ffc:	1885883a 	add	r2,r3,r2
    4000:	d8800e15 	stw	r2,56(sp)
    4004:	a009883a 	mov	r4,r20
    4008:	a80b883a 	mov	r5,r21
    400c:	000d883a 	mov	r6,zero
    4010:	01d00534 	movhi	r7,16404
    4014:	000c2a40 	call	c2a4 <__subdf3>
    4018:	d9c00e17 	ldw	r7,56(sp)
    401c:	1009883a 	mov	r4,r2
    4020:	180b883a 	mov	r5,r3
    4024:	880d883a 	mov	r6,r17
    4028:	102b883a 	mov	r21,r2
    402c:	1829883a 	mov	r20,r3
    4030:	000b9c00 	call	b9c0 <__gedf2>
    4034:	00807716 	blt	zero,r2,4214 <_dtoa_r+0x1388>
    4038:	d8800e17 	ldw	r2,56(sp)
    403c:	a809883a 	mov	r4,r21
    4040:	a00b883a 	mov	r5,r20
    4044:	11e0003c 	xorhi	r7,r2,32768
    4048:	880d883a 	mov	r6,r17
    404c:	000baa00 	call	baa0 <__ledf2>
    4050:	103d6b0e 	bge	r2,zero,3600 <__alt_mem_Flash_flash_data+0xf4003600>
    4054:	002b883a 	mov	r21,zero
    4058:	0023883a 	mov	r17,zero
    405c:	003f4c06 	br	3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    4060:	d9800917 	ldw	r6,36(sp)
    4064:	e00b883a 	mov	r5,fp
    4068:	8009883a 	mov	r4,r16
    406c:	0006b680 	call	6b68 <__pow5mult>
    4070:	1039883a 	mov	fp,r2
    4074:	003e2706 	br	3914 <__alt_mem_Flash_flash_data+0xf4003914>
    4078:	d8000b15 	stw	zero,44(sp)
    407c:	003c4906 	br	31a4 <__alt_mem_Flash_flash_data+0xf40031a4>
    4080:	d9000917 	ldw	r4,36(sp)
    4084:	d9800a17 	ldw	r6,40(sp)
    4088:	dd400915 	stw	r21,36(sp)
    408c:	a905c83a 	sub	r2,r21,r4
    4090:	308d883a 	add	r6,r6,r2
    4094:	d9800a15 	stw	r6,40(sp)
    4098:	002b883a 	mov	r21,zero
    409c:	003df206 	br	3868 <__alt_mem_Flash_flash_data+0xf4003868>
    40a0:	dc800e15 	stw	r18,56(sp)
    40a4:	982b883a 	mov	r21,r19
    40a8:	04400084 	movi	r17,2
    40ac:	003c7406 	br	3280 <__alt_mem_Flash_flash_data+0xf4003280>
    40b0:	04400044 	movi	r17,1
    40b4:	dc400c15 	stw	r17,48(sp)
    40b8:	dc400615 	stw	r17,24(sp)
    40bc:	dc402215 	stw	r17,136(sp)
    40c0:	80001115 	stw	zero,68(r16)
    40c4:	000b883a 	mov	r5,zero
    40c8:	003c4a06 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    40cc:	3023883a 	mov	r17,r6
    40d0:	003ffb06 	br	40c0 <__alt_mem_Flash_flash_data+0xf40040c0>
    40d4:	1000021e 	bne	r2,zero,40e0 <_dtoa_r+0x1254>
    40d8:	4200004c 	andi	r8,r8,1
    40dc:	403e8f1e 	bne	r8,zero,3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    40e0:	01000c04 	movi	r4,48
    40e4:	00000106 	br	40ec <_dtoa_r+0x1260>
    40e8:	102f883a 	mov	r23,r2
    40ec:	b8bfffc4 	addi	r2,r23,-1
    40f0:	10c00007 	ldb	r3,0(r2)
    40f4:	193ffc26 	beq	r3,r4,40e8 <__alt_mem_Flash_flash_data+0xf40040e8>
    40f8:	003e9906 	br	3b60 <__alt_mem_Flash_flash_data+0xf4003b60>
    40fc:	d9000517 	ldw	r4,20(sp)
    4100:	012fc83a 	sub	r23,zero,r4
    4104:	b800ad26 	beq	r23,zero,43bc <_dtoa_r+0x1530>
    4108:	b88003cc 	andi	r2,r23,15
    410c:	100490fa 	slli	r2,r2,3
    4110:	00c000b4 	movhi	r3,2
    4114:	18e6f904 	addi	r3,r3,-25628
    4118:	1885883a 	add	r2,r3,r2
    411c:	11800017 	ldw	r6,0(r2)
    4120:	11c00117 	ldw	r7,4(r2)
    4124:	b82fd13a 	srai	r23,r23,4
    4128:	9009883a 	mov	r4,r18
    412c:	980b883a 	mov	r5,r19
    4130:	000bb800 	call	bb80 <__muldf3>
    4134:	1029883a 	mov	r20,r2
    4138:	182b883a 	mov	r21,r3
    413c:	b800f426 	beq	r23,zero,4510 <_dtoa_r+0x1684>
    4140:	020000b4 	movhi	r8,2
    4144:	4226ef04 	addi	r8,r8,-25668
    4148:	8029883a 	mov	r20,r16
    414c:	04400084 	movi	r17,2
    4150:	4021883a 	mov	r16,r8
    4154:	b980004c 	andi	r6,r23,1
    4158:	1009883a 	mov	r4,r2
    415c:	b82fd07a 	srai	r23,r23,1
    4160:	180b883a 	mov	r5,r3
    4164:	30000426 	beq	r6,zero,4178 <_dtoa_r+0x12ec>
    4168:	81800017 	ldw	r6,0(r16)
    416c:	81c00117 	ldw	r7,4(r16)
    4170:	8c400044 	addi	r17,r17,1
    4174:	000bb800 	call	bb80 <__muldf3>
    4178:	84000204 	addi	r16,r16,8
    417c:	b83ff51e 	bne	r23,zero,4154 <__alt_mem_Flash_flash_data+0xf4004154>
    4180:	a021883a 	mov	r16,r20
    4184:	182b883a 	mov	r21,r3
    4188:	1029883a 	mov	r20,r2
    418c:	003c5506 	br	32e4 <__alt_mem_Flash_flash_data+0xf40032e4>
    4190:	d9800517 	ldw	r6,20(sp)
    4194:	d9000717 	ldw	r4,28(sp)
    4198:	00c00c04 	movi	r3,48
    419c:	31800044 	addi	r6,r6,1
    41a0:	d9800515 	stw	r6,20(sp)
    41a4:	20c00005 	stb	r3,0(r4)
    41a8:	02000c44 	movi	r8,49
    41ac:	003da206 	br	3838 <__alt_mem_Flash_flash_data+0xf4003838>
    41b0:	89400117 	ldw	r5,4(r17)
    41b4:	8009883a 	mov	r4,r16
    41b8:	00065240 	call	6524 <_Balloc>
    41bc:	89800417 	ldw	r6,16(r17)
    41c0:	11000304 	addi	r4,r2,12
    41c4:	89400304 	addi	r5,r17,12
    41c8:	31800084 	addi	r6,r6,2
    41cc:	318d883a 	add	r6,r6,r6
    41d0:	318d883a 	add	r6,r6,r6
    41d4:	1027883a 	mov	r19,r2
    41d8:	000616c0 	call	616c <memcpy>
    41dc:	8009883a 	mov	r4,r16
    41e0:	980b883a 	mov	r5,r19
    41e4:	01800044 	movi	r6,1
    41e8:	0006ca80 	call	6ca8 <__lshift>
    41ec:	1029883a 	mov	r20,r2
    41f0:	003e8606 	br	3c0c <__alt_mem_Flash_flash_data+0xf4003c0c>
    41f4:	00800e44 	movi	r2,57
    41f8:	90809526 	beq	r18,r2,4450 <_dtoa_r+0x15c4>
    41fc:	92000044 	addi	r8,r18,1
    4200:	003f2306 	br	3e90 <__alt_mem_Flash_flash_data+0xf4003e90>
    4204:	9011883a 	mov	r8,r18
    4208:	8825883a 	mov	r18,r17
    420c:	a023883a 	mov	r17,r20
    4210:	003e3706 	br	3af0 <__alt_mem_Flash_flash_data+0xf4003af0>
    4214:	002b883a 	mov	r21,zero
    4218:	0023883a 	mov	r17,zero
    421c:	003f5606 	br	3f78 <__alt_mem_Flash_flash_data+0xf4003f78>
    4220:	51bfffc4 	addi	r6,r10,-1
    4224:	300490fa 	slli	r2,r6,3
    4228:	00c000b4 	movhi	r3,2
    422c:	18e6f904 	addi	r3,r3,-25628
    4230:	1885883a 	add	r2,r3,r2
    4234:	d9c00e17 	ldw	r7,56(sp)
    4238:	11000017 	ldw	r4,0(r2)
    423c:	11400117 	ldw	r5,4(r2)
    4240:	d8800717 	ldw	r2,28(sp)
    4244:	d9801015 	stw	r6,64(sp)
    4248:	880d883a 	mov	r6,r17
    424c:	da801615 	stw	r10,88(sp)
    4250:	15c00044 	addi	r23,r2,1
    4254:	000bb800 	call	bb80 <__muldf3>
    4258:	a80b883a 	mov	r5,r21
    425c:	a009883a 	mov	r4,r20
    4260:	d8c01115 	stw	r3,68(sp)
    4264:	d8800e15 	stw	r2,56(sp)
    4268:	000cb740 	call	cb74 <__fixdfsi>
    426c:	1009883a 	mov	r4,r2
    4270:	1023883a 	mov	r17,r2
    4274:	000cbfc0 	call	cbfc <__floatsidf>
    4278:	a009883a 	mov	r4,r20
    427c:	a80b883a 	mov	r5,r21
    4280:	100d883a 	mov	r6,r2
    4284:	180f883a 	mov	r7,r3
    4288:	000c2a40 	call	c2a4 <__subdf3>
    428c:	1813883a 	mov	r9,r3
    4290:	d8c00717 	ldw	r3,28(sp)
    4294:	8c400c04 	addi	r17,r17,48
    4298:	1011883a 	mov	r8,r2
    429c:	1c400005 	stb	r17,0(r3)
    42a0:	da801617 	ldw	r10,88(sp)
    42a4:	00800044 	movi	r2,1
    42a8:	50802326 	beq	r10,r2,4338 <_dtoa_r+0x14ac>
    42ac:	d8800717 	ldw	r2,28(sp)
    42b0:	b82b883a 	mov	r21,r23
    42b4:	dc001315 	stw	r16,76(sp)
    42b8:	12a9883a 	add	r20,r2,r10
    42bc:	4807883a 	mov	r3,r9
    42c0:	4005883a 	mov	r2,r8
    42c4:	dc801415 	stw	r18,80(sp)
    42c8:	000d883a 	mov	r6,zero
    42cc:	01d00934 	movhi	r7,16420
    42d0:	1009883a 	mov	r4,r2
    42d4:	180b883a 	mov	r5,r3
    42d8:	000bb800 	call	bb80 <__muldf3>
    42dc:	180b883a 	mov	r5,r3
    42e0:	1009883a 	mov	r4,r2
    42e4:	1821883a 	mov	r16,r3
    42e8:	1025883a 	mov	r18,r2
    42ec:	000cb740 	call	cb74 <__fixdfsi>
    42f0:	1009883a 	mov	r4,r2
    42f4:	1023883a 	mov	r17,r2
    42f8:	000cbfc0 	call	cbfc <__floatsidf>
    42fc:	9009883a 	mov	r4,r18
    4300:	800b883a 	mov	r5,r16
    4304:	100d883a 	mov	r6,r2
    4308:	180f883a 	mov	r7,r3
    430c:	8c400c04 	addi	r17,r17,48
    4310:	000c2a40 	call	c2a4 <__subdf3>
    4314:	ad400044 	addi	r21,r21,1
    4318:	ac7fffc5 	stb	r17,-1(r21)
    431c:	ad3fea1e 	bne	r21,r20,42c8 <__alt_mem_Flash_flash_data+0xf40042c8>
    4320:	1813883a 	mov	r9,r3
    4324:	d8c01017 	ldw	r3,64(sp)
    4328:	dc001317 	ldw	r16,76(sp)
    432c:	dc801417 	ldw	r18,80(sp)
    4330:	1011883a 	mov	r8,r2
    4334:	b8ef883a 	add	r23,r23,r3
    4338:	d9000e17 	ldw	r4,56(sp)
    433c:	d9401117 	ldw	r5,68(sp)
    4340:	000d883a 	mov	r6,zero
    4344:	01cff834 	movhi	r7,16352
    4348:	da001715 	stw	r8,92(sp)
    434c:	da401515 	stw	r9,84(sp)
    4350:	000a7d40 	call	a7d4 <__adddf3>
    4354:	da001717 	ldw	r8,92(sp)
    4358:	da401517 	ldw	r9,84(sp)
    435c:	1009883a 	mov	r4,r2
    4360:	400d883a 	mov	r6,r8
    4364:	480f883a 	mov	r7,r9
    4368:	180b883a 	mov	r5,r3
    436c:	000baa00 	call	baa0 <__ledf2>
    4370:	da001717 	ldw	r8,92(sp)
    4374:	da401517 	ldw	r9,84(sp)
    4378:	10003b0e 	bge	r2,zero,4468 <_dtoa_r+0x15dc>
    437c:	d9001217 	ldw	r4,72(sp)
    4380:	bd7fffc3 	ldbu	r21,-1(r23)
    4384:	d9000515 	stw	r4,20(sp)
    4388:	003d1c06 	br	37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    438c:	d8c00817 	ldw	r3,32(sp)
    4390:	18a9c83a 	sub	r20,r3,r2
    4394:	0005883a 	mov	r2,zero
    4398:	003d3706 	br	3878 <__alt_mem_Flash_flash_data+0xf4003878>
    439c:	00800044 	movi	r2,1
    43a0:	003dd006 	br	3ae4 <__alt_mem_Flash_flash_data+0xf4003ae4>
    43a4:	d8c00217 	ldw	r3,8(sp)
    43a8:	00800d84 	movi	r2,54
    43ac:	dd400917 	ldw	r21,36(sp)
    43b0:	10c5c83a 	sub	r2,r2,r3
    43b4:	dd000817 	ldw	r20,32(sp)
    43b8:	003d2f06 	br	3878 <__alt_mem_Flash_flash_data+0xf4003878>
    43bc:	9029883a 	mov	r20,r18
    43c0:	982b883a 	mov	r21,r19
    43c4:	04400084 	movi	r17,2
    43c8:	003bc606 	br	32e4 <__alt_mem_Flash_flash_data+0xf40032e4>
    43cc:	d8800617 	ldw	r2,24(sp)
    43d0:	103efc26 	beq	r2,zero,3fc4 <__alt_mem_Flash_flash_data+0xf4003fc4>
    43d4:	d8c00c17 	ldw	r3,48(sp)
    43d8:	00fc890e 	bge	zero,r3,3600 <__alt_mem_Flash_flash_data+0xf4003600>
    43dc:	a80b883a 	mov	r5,r21
    43e0:	a009883a 	mov	r4,r20
    43e4:	000d883a 	mov	r6,zero
    43e8:	01d00934 	movhi	r7,16420
    43ec:	000bb800 	call	bb80 <__muldf3>
    43f0:	89000044 	addi	r4,r17,1
    43f4:	1029883a 	mov	r20,r2
    43f8:	182b883a 	mov	r21,r3
    43fc:	000cbfc0 	call	cbfc <__floatsidf>
    4400:	a009883a 	mov	r4,r20
    4404:	a80b883a 	mov	r5,r21
    4408:	100d883a 	mov	r6,r2
    440c:	180f883a 	mov	r7,r3
    4410:	000bb800 	call	bb80 <__muldf3>
    4414:	1009883a 	mov	r4,r2
    4418:	180b883a 	mov	r5,r3
    441c:	000d883a 	mov	r6,zero
    4420:	01d00734 	movhi	r7,16412
    4424:	000a7d40 	call	a7d4 <__adddf3>
    4428:	d9000517 	ldw	r4,20(sp)
    442c:	1023883a 	mov	r17,r2
    4430:	00bf3034 	movhi	r2,64704
    4434:	213fffc4 	addi	r4,r4,-1
    4438:	1885883a 	add	r2,r3,r2
    443c:	d9001215 	stw	r4,72(sp)
    4440:	d8800e15 	stw	r2,56(sp)
    4444:	da800c17 	ldw	r10,48(sp)
    4448:	003bc306 	br	3358 <__alt_mem_Flash_flash_data+0xf4003358>
    444c:	b039883a 	mov	fp,r22
    4450:	01000e44 	movi	r4,57
    4454:	8825883a 	mov	r18,r17
    4458:	9dc00044 	addi	r23,r19,1
    445c:	99000005 	stb	r4,0(r19)
    4460:	a023883a 	mov	r17,r20
    4464:	003dae06 	br	3b20 <__alt_mem_Flash_flash_data+0xf4003b20>
    4468:	d9800e17 	ldw	r6,56(sp)
    446c:	d9c01117 	ldw	r7,68(sp)
    4470:	0009883a 	mov	r4,zero
    4474:	014ff834 	movhi	r5,16352
    4478:	da001715 	stw	r8,92(sp)
    447c:	da401515 	stw	r9,84(sp)
    4480:	000c2a40 	call	c2a4 <__subdf3>
    4484:	da001717 	ldw	r8,92(sp)
    4488:	da401517 	ldw	r9,84(sp)
    448c:	1009883a 	mov	r4,r2
    4490:	180b883a 	mov	r5,r3
    4494:	400d883a 	mov	r6,r8
    4498:	480f883a 	mov	r7,r9
    449c:	000b9c00 	call	b9c0 <__gedf2>
    44a0:	00bc570e 	bge	zero,r2,3600 <__alt_mem_Flash_flash_data+0xf4003600>
    44a4:	01000c04 	movi	r4,48
    44a8:	00000106 	br	44b0 <_dtoa_r+0x1624>
    44ac:	102f883a 	mov	r23,r2
    44b0:	b8bfffc4 	addi	r2,r23,-1
    44b4:	10c00007 	ldb	r3,0(r2)
    44b8:	193ffc26 	beq	r3,r4,44ac <__alt_mem_Flash_flash_data+0xf40044ac>
    44bc:	d9801217 	ldw	r6,72(sp)
    44c0:	d9800515 	stw	r6,20(sp)
    44c4:	003c1f06 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    44c8:	d8801217 	ldw	r2,72(sp)
    44cc:	dc001117 	ldw	r16,68(sp)
    44d0:	d8800515 	stw	r2,20(sp)
    44d4:	003cc906 	br	37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    44d8:	dd801317 	ldw	r22,76(sp)
    44dc:	dc001117 	ldw	r16,68(sp)
    44e0:	dcc01417 	ldw	r19,80(sp)
    44e4:	dc801017 	ldw	r18,64(sp)
    44e8:	003c4506 	br	3600 <__alt_mem_Flash_flash_data+0xf4003600>
    44ec:	103e5d1e 	bne	r2,zero,3e64 <__alt_mem_Flash_flash_data+0xf4003e64>
    44f0:	4080004c 	andi	r2,r8,1
    44f4:	103e5b26 	beq	r2,zero,3e64 <__alt_mem_Flash_flash_data+0xf4003e64>
    44f8:	003e5706 	br	3e58 <__alt_mem_Flash_flash_data+0xf4003e58>
    44fc:	d8c00317 	ldw	r3,12(sp)
    4500:	00800084 	movi	r2,2
    4504:	10c00a16 	blt	r2,r3,4530 <_dtoa_r+0x16a4>
    4508:	d9000c17 	ldw	r4,48(sp)
    450c:	003e8306 	br	3f1c <__alt_mem_Flash_flash_data+0xf4003f1c>
    4510:	04400084 	movi	r17,2
    4514:	003b7306 	br	32e4 <__alt_mem_Flash_flash_data+0xf40032e4>
    4518:	d9801217 	ldw	r6,72(sp)
    451c:	d9800515 	stw	r6,20(sp)
    4520:	003cb606 	br	37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    4524:	d9001217 	ldw	r4,72(sp)
    4528:	d9000515 	stw	r4,20(sp)
    452c:	003c0506 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    4530:	d9800c17 	ldw	r6,48(sp)
    4534:	d9800615 	stw	r6,24(sp)
    4538:	003e8306 	br	3f48 <__alt_mem_Flash_flash_data+0xf4003f48>
    453c:	d9800317 	ldw	r6,12(sp)
    4540:	00800084 	movi	r2,2
    4544:	11800216 	blt	r2,r6,4550 <_dtoa_r+0x16c4>
    4548:	d8800c17 	ldw	r2,48(sp)
    454c:	003da606 	br	3be8 <__alt_mem_Flash_flash_data+0xf4003be8>
    4550:	d8800c17 	ldw	r2,48(sp)
    4554:	d8800615 	stw	r2,24(sp)
    4558:	003e7b06 	br	3f48 <__alt_mem_Flash_flash_data+0xf4003f48>
    455c:	05000044 	movi	r20,1
    4560:	003b0506 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    4564:	8009883a 	mov	r4,r16
    4568:	80001115 	stw	zero,68(r16)
    456c:	000b883a 	mov	r5,zero
    4570:	00065240 	call	6524 <_Balloc>
    4574:	d8800715 	stw	r2,28(sp)
    4578:	d8c00717 	ldw	r3,28(sp)
    457c:	00bfffc4 	movi	r2,-1
    4580:	01000044 	movi	r4,1
    4584:	d8800c15 	stw	r2,48(sp)
    4588:	80c01015 	stw	r3,64(r16)
    458c:	d9000b15 	stw	r4,44(sp)
    4590:	d8800615 	stw	r2,24(sp)
    4594:	d8002215 	stw	zero,136(sp)
    4598:	003c1906 	br	3600 <__alt_mem_Flash_flash_data+0xf4003600>
    459c:	193d2926 	beq	r3,r4,3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    45a0:	00c00f04 	movi	r3,60
    45a4:	1885c83a 	sub	r2,r3,r2
    45a8:	003d7b06 	br	3b98 <__alt_mem_Flash_flash_data+0xf4003b98>
    45ac:	000b883a 	mov	r5,zero
    45b0:	003b1006 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>

000045b4 <__sflush_r>:
    45b4:	2880030b 	ldhu	r2,12(r5)
    45b8:	defffb04 	addi	sp,sp,-20
    45bc:	dcc00315 	stw	r19,12(sp)
    45c0:	dc400115 	stw	r17,4(sp)
    45c4:	dfc00415 	stw	ra,16(sp)
    45c8:	dc800215 	stw	r18,8(sp)
    45cc:	dc000015 	stw	r16,0(sp)
    45d0:	10c0020c 	andi	r3,r2,8
    45d4:	2823883a 	mov	r17,r5
    45d8:	2027883a 	mov	r19,r4
    45dc:	1800311e 	bne	r3,zero,46a4 <__sflush_r+0xf0>
    45e0:	28c00117 	ldw	r3,4(r5)
    45e4:	10820014 	ori	r2,r2,2048
    45e8:	2880030d 	sth	r2,12(r5)
    45ec:	00c04b0e 	bge	zero,r3,471c <__sflush_r+0x168>
    45f0:	8a000a17 	ldw	r8,40(r17)
    45f4:	40002326 	beq	r8,zero,4684 <__sflush_r+0xd0>
    45f8:	9c000017 	ldw	r16,0(r19)
    45fc:	10c4000c 	andi	r3,r2,4096
    4600:	98000015 	stw	zero,0(r19)
    4604:	18004826 	beq	r3,zero,4728 <__sflush_r+0x174>
    4608:	89801417 	ldw	r6,80(r17)
    460c:	10c0010c 	andi	r3,r2,4
    4610:	18000626 	beq	r3,zero,462c <__sflush_r+0x78>
    4614:	88c00117 	ldw	r3,4(r17)
    4618:	88800c17 	ldw	r2,48(r17)
    461c:	30cdc83a 	sub	r6,r6,r3
    4620:	10000226 	beq	r2,zero,462c <__sflush_r+0x78>
    4624:	88800f17 	ldw	r2,60(r17)
    4628:	308dc83a 	sub	r6,r6,r2
    462c:	89400717 	ldw	r5,28(r17)
    4630:	9809883a 	mov	r4,r19
    4634:	000f883a 	mov	r7,zero
    4638:	403ee83a 	callr	r8
    463c:	00ffffc4 	movi	r3,-1
    4640:	10c04426 	beq	r2,r3,4754 <__sflush_r+0x1a0>
    4644:	88c0030b 	ldhu	r3,12(r17)
    4648:	89000417 	ldw	r4,16(r17)
    464c:	88000115 	stw	zero,4(r17)
    4650:	197dffcc 	andi	r5,r3,63487
    4654:	8940030d 	sth	r5,12(r17)
    4658:	89000015 	stw	r4,0(r17)
    465c:	18c4000c 	andi	r3,r3,4096
    4660:	18002c1e 	bne	r3,zero,4714 <__sflush_r+0x160>
    4664:	89400c17 	ldw	r5,48(r17)
    4668:	9c000015 	stw	r16,0(r19)
    466c:	28000526 	beq	r5,zero,4684 <__sflush_r+0xd0>
    4670:	88801004 	addi	r2,r17,64
    4674:	28800226 	beq	r5,r2,4680 <__sflush_r+0xcc>
    4678:	9809883a 	mov	r4,r19
    467c:	0004d0c0 	call	4d0c <_free_r>
    4680:	88000c15 	stw	zero,48(r17)
    4684:	0005883a 	mov	r2,zero
    4688:	dfc00417 	ldw	ra,16(sp)
    468c:	dcc00317 	ldw	r19,12(sp)
    4690:	dc800217 	ldw	r18,8(sp)
    4694:	dc400117 	ldw	r17,4(sp)
    4698:	dc000017 	ldw	r16,0(sp)
    469c:	dec00504 	addi	sp,sp,20
    46a0:	f800283a 	ret
    46a4:	2c800417 	ldw	r18,16(r5)
    46a8:	903ff626 	beq	r18,zero,4684 <__alt_mem_Flash_flash_data+0xf4004684>
    46ac:	2c000017 	ldw	r16,0(r5)
    46b0:	108000cc 	andi	r2,r2,3
    46b4:	2c800015 	stw	r18,0(r5)
    46b8:	84a1c83a 	sub	r16,r16,r18
    46bc:	1000131e 	bne	r2,zero,470c <__sflush_r+0x158>
    46c0:	28800517 	ldw	r2,20(r5)
    46c4:	88800215 	stw	r2,8(r17)
    46c8:	04000316 	blt	zero,r16,46d8 <__sflush_r+0x124>
    46cc:	003fed06 	br	4684 <__alt_mem_Flash_flash_data+0xf4004684>
    46d0:	90a5883a 	add	r18,r18,r2
    46d4:	043feb0e 	bge	zero,r16,4684 <__alt_mem_Flash_flash_data+0xf4004684>
    46d8:	88800917 	ldw	r2,36(r17)
    46dc:	89400717 	ldw	r5,28(r17)
    46e0:	800f883a 	mov	r7,r16
    46e4:	900d883a 	mov	r6,r18
    46e8:	9809883a 	mov	r4,r19
    46ec:	103ee83a 	callr	r2
    46f0:	80a1c83a 	sub	r16,r16,r2
    46f4:	00bff616 	blt	zero,r2,46d0 <__alt_mem_Flash_flash_data+0xf40046d0>
    46f8:	88c0030b 	ldhu	r3,12(r17)
    46fc:	00bfffc4 	movi	r2,-1
    4700:	18c01014 	ori	r3,r3,64
    4704:	88c0030d 	sth	r3,12(r17)
    4708:	003fdf06 	br	4688 <__alt_mem_Flash_flash_data+0xf4004688>
    470c:	0005883a 	mov	r2,zero
    4710:	003fec06 	br	46c4 <__alt_mem_Flash_flash_data+0xf40046c4>
    4714:	88801415 	stw	r2,80(r17)
    4718:	003fd206 	br	4664 <__alt_mem_Flash_flash_data+0xf4004664>
    471c:	28c00f17 	ldw	r3,60(r5)
    4720:	00ffb316 	blt	zero,r3,45f0 <__alt_mem_Flash_flash_data+0xf40045f0>
    4724:	003fd706 	br	4684 <__alt_mem_Flash_flash_data+0xf4004684>
    4728:	89400717 	ldw	r5,28(r17)
    472c:	000d883a 	mov	r6,zero
    4730:	9809883a 	mov	r4,r19
    4734:	01c00044 	movi	r7,1
    4738:	403ee83a 	callr	r8
    473c:	100d883a 	mov	r6,r2
    4740:	00bfffc4 	movi	r2,-1
    4744:	30801426 	beq	r6,r2,4798 <__sflush_r+0x1e4>
    4748:	8880030b 	ldhu	r2,12(r17)
    474c:	8a000a17 	ldw	r8,40(r17)
    4750:	003fae06 	br	460c <__alt_mem_Flash_flash_data+0xf400460c>
    4754:	98c00017 	ldw	r3,0(r19)
    4758:	183fba26 	beq	r3,zero,4644 <__alt_mem_Flash_flash_data+0xf4004644>
    475c:	01000744 	movi	r4,29
    4760:	19000626 	beq	r3,r4,477c <__sflush_r+0x1c8>
    4764:	01000584 	movi	r4,22
    4768:	19000426 	beq	r3,r4,477c <__sflush_r+0x1c8>
    476c:	88c0030b 	ldhu	r3,12(r17)
    4770:	18c01014 	ori	r3,r3,64
    4774:	88c0030d 	sth	r3,12(r17)
    4778:	003fc306 	br	4688 <__alt_mem_Flash_flash_data+0xf4004688>
    477c:	8880030b 	ldhu	r2,12(r17)
    4780:	88c00417 	ldw	r3,16(r17)
    4784:	88000115 	stw	zero,4(r17)
    4788:	10bdffcc 	andi	r2,r2,63487
    478c:	8880030d 	sth	r2,12(r17)
    4790:	88c00015 	stw	r3,0(r17)
    4794:	003fb306 	br	4664 <__alt_mem_Flash_flash_data+0xf4004664>
    4798:	98800017 	ldw	r2,0(r19)
    479c:	103fea26 	beq	r2,zero,4748 <__alt_mem_Flash_flash_data+0xf4004748>
    47a0:	00c00744 	movi	r3,29
    47a4:	10c00226 	beq	r2,r3,47b0 <__sflush_r+0x1fc>
    47a8:	00c00584 	movi	r3,22
    47ac:	10ffd21e 	bne	r2,r3,46f8 <__alt_mem_Flash_flash_data+0xf40046f8>
    47b0:	9c000015 	stw	r16,0(r19)
    47b4:	0005883a 	mov	r2,zero
    47b8:	003fb306 	br	4688 <__alt_mem_Flash_flash_data+0xf4004688>

000047bc <_fflush_r>:
    47bc:	defffd04 	addi	sp,sp,-12
    47c0:	dc000115 	stw	r16,4(sp)
    47c4:	dfc00215 	stw	ra,8(sp)
    47c8:	2021883a 	mov	r16,r4
    47cc:	20000226 	beq	r4,zero,47d8 <_fflush_r+0x1c>
    47d0:	20800e17 	ldw	r2,56(r4)
    47d4:	10000c26 	beq	r2,zero,4808 <_fflush_r+0x4c>
    47d8:	2880030f 	ldh	r2,12(r5)
    47dc:	1000051e 	bne	r2,zero,47f4 <_fflush_r+0x38>
    47e0:	0005883a 	mov	r2,zero
    47e4:	dfc00217 	ldw	ra,8(sp)
    47e8:	dc000117 	ldw	r16,4(sp)
    47ec:	dec00304 	addi	sp,sp,12
    47f0:	f800283a 	ret
    47f4:	8009883a 	mov	r4,r16
    47f8:	dfc00217 	ldw	ra,8(sp)
    47fc:	dc000117 	ldw	r16,4(sp)
    4800:	dec00304 	addi	sp,sp,12
    4804:	00045b41 	jmpi	45b4 <__sflush_r>
    4808:	d9400015 	stw	r5,0(sp)
    480c:	0004b980 	call	4b98 <__sinit>
    4810:	d9400017 	ldw	r5,0(sp)
    4814:	003ff006 	br	47d8 <__alt_mem_Flash_flash_data+0xf40047d8>

00004818 <fflush>:
    4818:	20000526 	beq	r4,zero,4830 <fflush+0x18>
    481c:	008000b4 	movhi	r2,2
    4820:	10b10304 	addi	r2,r2,-15348
    4824:	200b883a 	mov	r5,r4
    4828:	11000017 	ldw	r4,0(r2)
    482c:	00047bc1 	jmpi	47bc <_fflush_r>
    4830:	008000b4 	movhi	r2,2
    4834:	10b10204 	addi	r2,r2,-15352
    4838:	11000017 	ldw	r4,0(r2)
    483c:	01400034 	movhi	r5,0
    4840:	2951ef04 	addi	r5,r5,18364
    4844:	00055801 	jmpi	5580 <_fwalk_reent>

00004848 <__fp_lock>:
    4848:	0005883a 	mov	r2,zero
    484c:	f800283a 	ret

00004850 <__fp_unlock>:
    4850:	0005883a 	mov	r2,zero
    4854:	f800283a 	ret

00004858 <_cleanup_r>:
    4858:	01400074 	movhi	r5,1
    485c:	29654a04 	addi	r5,r5,-27352
    4860:	00055801 	jmpi	5580 <_fwalk_reent>

00004864 <__sinit.part.1>:
    4864:	defff704 	addi	sp,sp,-36
    4868:	00c00034 	movhi	r3,0
    486c:	dfc00815 	stw	ra,32(sp)
    4870:	ddc00715 	stw	r23,28(sp)
    4874:	dd800615 	stw	r22,24(sp)
    4878:	dd400515 	stw	r21,20(sp)
    487c:	dd000415 	stw	r20,16(sp)
    4880:	dcc00315 	stw	r19,12(sp)
    4884:	dc800215 	stw	r18,8(sp)
    4888:	dc400115 	stw	r17,4(sp)
    488c:	dc000015 	stw	r16,0(sp)
    4890:	18d21604 	addi	r3,r3,18520
    4894:	24000117 	ldw	r16,4(r4)
    4898:	20c00f15 	stw	r3,60(r4)
    489c:	2080bb04 	addi	r2,r4,748
    48a0:	00c000c4 	movi	r3,3
    48a4:	20c0b915 	stw	r3,740(r4)
    48a8:	2080ba15 	stw	r2,744(r4)
    48ac:	2000b815 	stw	zero,736(r4)
    48b0:	05c00204 	movi	r23,8
    48b4:	00800104 	movi	r2,4
    48b8:	2025883a 	mov	r18,r4
    48bc:	b80d883a 	mov	r6,r23
    48c0:	81001704 	addi	r4,r16,92
    48c4:	000b883a 	mov	r5,zero
    48c8:	80000015 	stw	zero,0(r16)
    48cc:	80000115 	stw	zero,4(r16)
    48d0:	80000215 	stw	zero,8(r16)
    48d4:	8080030d 	sth	r2,12(r16)
    48d8:	80001915 	stw	zero,100(r16)
    48dc:	8000038d 	sth	zero,14(r16)
    48e0:	80000415 	stw	zero,16(r16)
    48e4:	80000515 	stw	zero,20(r16)
    48e8:	80000615 	stw	zero,24(r16)
    48ec:	00064000 	call	6400 <memset>
    48f0:	05800034 	movhi	r22,0
    48f4:	94400217 	ldw	r17,8(r18)
    48f8:	05400034 	movhi	r21,0
    48fc:	05000034 	movhi	r20,0
    4900:	04c00034 	movhi	r19,0
    4904:	b59f1804 	addi	r22,r22,31840
    4908:	ad5f2f04 	addi	r21,r21,31932
    490c:	a51f4e04 	addi	r20,r20,32056
    4910:	9cdf6504 	addi	r19,r19,32148
    4914:	85800815 	stw	r22,32(r16)
    4918:	85400915 	stw	r21,36(r16)
    491c:	85000a15 	stw	r20,40(r16)
    4920:	84c00b15 	stw	r19,44(r16)
    4924:	84000715 	stw	r16,28(r16)
    4928:	00800284 	movi	r2,10
    492c:	8880030d 	sth	r2,12(r17)
    4930:	00800044 	movi	r2,1
    4934:	89001704 	addi	r4,r17,92
    4938:	b80d883a 	mov	r6,r23
    493c:	000b883a 	mov	r5,zero
    4940:	88000015 	stw	zero,0(r17)
    4944:	88000115 	stw	zero,4(r17)
    4948:	88000215 	stw	zero,8(r17)
    494c:	88001915 	stw	zero,100(r17)
    4950:	8880038d 	sth	r2,14(r17)
    4954:	88000415 	stw	zero,16(r17)
    4958:	88000515 	stw	zero,20(r17)
    495c:	88000615 	stw	zero,24(r17)
    4960:	00064000 	call	6400 <memset>
    4964:	94000317 	ldw	r16,12(r18)
    4968:	00800484 	movi	r2,18
    496c:	8c400715 	stw	r17,28(r17)
    4970:	8d800815 	stw	r22,32(r17)
    4974:	8d400915 	stw	r21,36(r17)
    4978:	8d000a15 	stw	r20,40(r17)
    497c:	8cc00b15 	stw	r19,44(r17)
    4980:	8080030d 	sth	r2,12(r16)
    4984:	00800084 	movi	r2,2
    4988:	80000015 	stw	zero,0(r16)
    498c:	80000115 	stw	zero,4(r16)
    4990:	80000215 	stw	zero,8(r16)
    4994:	80001915 	stw	zero,100(r16)
    4998:	8080038d 	sth	r2,14(r16)
    499c:	80000415 	stw	zero,16(r16)
    49a0:	80000515 	stw	zero,20(r16)
    49a4:	80000615 	stw	zero,24(r16)
    49a8:	81001704 	addi	r4,r16,92
    49ac:	000b883a 	mov	r5,zero
    49b0:	b80d883a 	mov	r6,r23
    49b4:	00064000 	call	6400 <memset>
    49b8:	00800044 	movi	r2,1
    49bc:	84000715 	stw	r16,28(r16)
    49c0:	85800815 	stw	r22,32(r16)
    49c4:	85400915 	stw	r21,36(r16)
    49c8:	85000a15 	stw	r20,40(r16)
    49cc:	84c00b15 	stw	r19,44(r16)
    49d0:	90800e15 	stw	r2,56(r18)
    49d4:	dfc00817 	ldw	ra,32(sp)
    49d8:	ddc00717 	ldw	r23,28(sp)
    49dc:	dd800617 	ldw	r22,24(sp)
    49e0:	dd400517 	ldw	r21,20(sp)
    49e4:	dd000417 	ldw	r20,16(sp)
    49e8:	dcc00317 	ldw	r19,12(sp)
    49ec:	dc800217 	ldw	r18,8(sp)
    49f0:	dc400117 	ldw	r17,4(sp)
    49f4:	dc000017 	ldw	r16,0(sp)
    49f8:	dec00904 	addi	sp,sp,36
    49fc:	f800283a 	ret

00004a00 <__sfmoreglue>:
    4a00:	defffc04 	addi	sp,sp,-16
    4a04:	dc400115 	stw	r17,4(sp)
    4a08:	2c7fffc4 	addi	r17,r5,-1
    4a0c:	8c401a24 	muli	r17,r17,104
    4a10:	dc800215 	stw	r18,8(sp)
    4a14:	2825883a 	mov	r18,r5
    4a18:	89401d04 	addi	r5,r17,116
    4a1c:	dc000015 	stw	r16,0(sp)
    4a20:	dfc00315 	stw	ra,12(sp)
    4a24:	00058dc0 	call	58dc <_malloc_r>
    4a28:	1021883a 	mov	r16,r2
    4a2c:	10000726 	beq	r2,zero,4a4c <__sfmoreglue+0x4c>
    4a30:	11000304 	addi	r4,r2,12
    4a34:	10000015 	stw	zero,0(r2)
    4a38:	14800115 	stw	r18,4(r2)
    4a3c:	11000215 	stw	r4,8(r2)
    4a40:	000b883a 	mov	r5,zero
    4a44:	89801a04 	addi	r6,r17,104
    4a48:	00064000 	call	6400 <memset>
    4a4c:	8005883a 	mov	r2,r16
    4a50:	dfc00317 	ldw	ra,12(sp)
    4a54:	dc800217 	ldw	r18,8(sp)
    4a58:	dc400117 	ldw	r17,4(sp)
    4a5c:	dc000017 	ldw	r16,0(sp)
    4a60:	dec00404 	addi	sp,sp,16
    4a64:	f800283a 	ret

00004a68 <__sfp>:
    4a68:	008000b4 	movhi	r2,2
    4a6c:	defffb04 	addi	sp,sp,-20
    4a70:	10b10204 	addi	r2,r2,-15352
    4a74:	dc800215 	stw	r18,8(sp)
    4a78:	14800017 	ldw	r18,0(r2)
    4a7c:	dcc00315 	stw	r19,12(sp)
    4a80:	dfc00415 	stw	ra,16(sp)
    4a84:	90800e17 	ldw	r2,56(r18)
    4a88:	dc400115 	stw	r17,4(sp)
    4a8c:	dc000015 	stw	r16,0(sp)
    4a90:	2027883a 	mov	r19,r4
    4a94:	1000021e 	bne	r2,zero,4aa0 <__sfp+0x38>
    4a98:	9009883a 	mov	r4,r18
    4a9c:	00048640 	call	4864 <__sinit.part.1>
    4aa0:	9480b804 	addi	r18,r18,736
    4aa4:	047fffc4 	movi	r17,-1
    4aa8:	91400117 	ldw	r5,4(r18)
    4aac:	94000217 	ldw	r16,8(r18)
    4ab0:	297fffc4 	addi	r5,r5,-1
    4ab4:	28000a16 	blt	r5,zero,4ae0 <__sfp+0x78>
    4ab8:	8080030f 	ldh	r2,12(r16)
    4abc:	10000c26 	beq	r2,zero,4af0 <__sfp+0x88>
    4ac0:	80c01d04 	addi	r3,r16,116
    4ac4:	00000206 	br	4ad0 <__sfp+0x68>
    4ac8:	18bfe60f 	ldh	r2,-104(r3)
    4acc:	10000826 	beq	r2,zero,4af0 <__sfp+0x88>
    4ad0:	297fffc4 	addi	r5,r5,-1
    4ad4:	1c3ffd04 	addi	r16,r3,-12
    4ad8:	18c01a04 	addi	r3,r3,104
    4adc:	2c7ffa1e 	bne	r5,r17,4ac8 <__alt_mem_Flash_flash_data+0xf4004ac8>
    4ae0:	90800017 	ldw	r2,0(r18)
    4ae4:	10001d26 	beq	r2,zero,4b5c <__sfp+0xf4>
    4ae8:	1025883a 	mov	r18,r2
    4aec:	003fee06 	br	4aa8 <__alt_mem_Flash_flash_data+0xf4004aa8>
    4af0:	00bfffc4 	movi	r2,-1
    4af4:	8080038d 	sth	r2,14(r16)
    4af8:	00800044 	movi	r2,1
    4afc:	8080030d 	sth	r2,12(r16)
    4b00:	80001915 	stw	zero,100(r16)
    4b04:	80000015 	stw	zero,0(r16)
    4b08:	80000215 	stw	zero,8(r16)
    4b0c:	80000115 	stw	zero,4(r16)
    4b10:	80000415 	stw	zero,16(r16)
    4b14:	80000515 	stw	zero,20(r16)
    4b18:	80000615 	stw	zero,24(r16)
    4b1c:	81001704 	addi	r4,r16,92
    4b20:	000b883a 	mov	r5,zero
    4b24:	01800204 	movi	r6,8
    4b28:	00064000 	call	6400 <memset>
    4b2c:	8005883a 	mov	r2,r16
    4b30:	80000c15 	stw	zero,48(r16)
    4b34:	80000d15 	stw	zero,52(r16)
    4b38:	80001115 	stw	zero,68(r16)
    4b3c:	80001215 	stw	zero,72(r16)
    4b40:	dfc00417 	ldw	ra,16(sp)
    4b44:	dcc00317 	ldw	r19,12(sp)
    4b48:	dc800217 	ldw	r18,8(sp)
    4b4c:	dc400117 	ldw	r17,4(sp)
    4b50:	dc000017 	ldw	r16,0(sp)
    4b54:	dec00504 	addi	sp,sp,20
    4b58:	f800283a 	ret
    4b5c:	9809883a 	mov	r4,r19
    4b60:	01400104 	movi	r5,4
    4b64:	0004a000 	call	4a00 <__sfmoreglue>
    4b68:	90800015 	stw	r2,0(r18)
    4b6c:	103fde1e 	bne	r2,zero,4ae8 <__alt_mem_Flash_flash_data+0xf4004ae8>
    4b70:	00800304 	movi	r2,12
    4b74:	98800015 	stw	r2,0(r19)
    4b78:	0005883a 	mov	r2,zero
    4b7c:	003ff006 	br	4b40 <__alt_mem_Flash_flash_data+0xf4004b40>

00004b80 <_cleanup>:
    4b80:	008000b4 	movhi	r2,2
    4b84:	10b10204 	addi	r2,r2,-15352
    4b88:	11000017 	ldw	r4,0(r2)
    4b8c:	01400074 	movhi	r5,1
    4b90:	29654a04 	addi	r5,r5,-27352
    4b94:	00055801 	jmpi	5580 <_fwalk_reent>

00004b98 <__sinit>:
    4b98:	20800e17 	ldw	r2,56(r4)
    4b9c:	10000126 	beq	r2,zero,4ba4 <__sinit+0xc>
    4ba0:	f800283a 	ret
    4ba4:	00048641 	jmpi	4864 <__sinit.part.1>

00004ba8 <__sfp_lock_acquire>:
    4ba8:	f800283a 	ret

00004bac <__sfp_lock_release>:
    4bac:	f800283a 	ret

00004bb0 <__sinit_lock_acquire>:
    4bb0:	f800283a 	ret

00004bb4 <__sinit_lock_release>:
    4bb4:	f800283a 	ret

00004bb8 <__fp_lock_all>:
    4bb8:	008000b4 	movhi	r2,2
    4bbc:	10b10304 	addi	r2,r2,-15348
    4bc0:	11000017 	ldw	r4,0(r2)
    4bc4:	01400034 	movhi	r5,0
    4bc8:	29521204 	addi	r5,r5,18504
    4bcc:	00054bc1 	jmpi	54bc <_fwalk>

00004bd0 <__fp_unlock_all>:
    4bd0:	008000b4 	movhi	r2,2
    4bd4:	10b10304 	addi	r2,r2,-15348
    4bd8:	11000017 	ldw	r4,0(r2)
    4bdc:	01400034 	movhi	r5,0
    4be0:	29521404 	addi	r5,r5,18512
    4be4:	00054bc1 	jmpi	54bc <_fwalk>

00004be8 <_malloc_trim_r>:
    4be8:	defffb04 	addi	sp,sp,-20
    4bec:	dcc00315 	stw	r19,12(sp)
    4bf0:	04c000b4 	movhi	r19,2
    4bf4:	dc800215 	stw	r18,8(sp)
    4bf8:	dc400115 	stw	r17,4(sp)
    4bfc:	dc000015 	stw	r16,0(sp)
    4c00:	dfc00415 	stw	ra,16(sp)
    4c04:	2821883a 	mov	r16,r5
    4c08:	9ce9e404 	addi	r19,r19,-22640
    4c0c:	2025883a 	mov	r18,r4
    4c10:	000d8b00 	call	d8b0 <__malloc_lock>
    4c14:	98800217 	ldw	r2,8(r19)
    4c18:	14400117 	ldw	r17,4(r2)
    4c1c:	00bfff04 	movi	r2,-4
    4c20:	88a2703a 	and	r17,r17,r2
    4c24:	8c21c83a 	sub	r16,r17,r16
    4c28:	8403fbc4 	addi	r16,r16,4079
    4c2c:	8020d33a 	srli	r16,r16,12
    4c30:	0083ffc4 	movi	r2,4095
    4c34:	843fffc4 	addi	r16,r16,-1
    4c38:	8020933a 	slli	r16,r16,12
    4c3c:	1400060e 	bge	r2,r16,4c58 <_malloc_trim_r+0x70>
    4c40:	9009883a 	mov	r4,r18
    4c44:	000b883a 	mov	r5,zero
    4c48:	0007c0c0 	call	7c0c <_sbrk_r>
    4c4c:	98c00217 	ldw	r3,8(r19)
    4c50:	1c47883a 	add	r3,r3,r17
    4c54:	10c00a26 	beq	r2,r3,4c80 <_malloc_trim_r+0x98>
    4c58:	9009883a 	mov	r4,r18
    4c5c:	000d9d00 	call	d9d0 <__malloc_unlock>
    4c60:	0005883a 	mov	r2,zero
    4c64:	dfc00417 	ldw	ra,16(sp)
    4c68:	dcc00317 	ldw	r19,12(sp)
    4c6c:	dc800217 	ldw	r18,8(sp)
    4c70:	dc400117 	ldw	r17,4(sp)
    4c74:	dc000017 	ldw	r16,0(sp)
    4c78:	dec00504 	addi	sp,sp,20
    4c7c:	f800283a 	ret
    4c80:	9009883a 	mov	r4,r18
    4c84:	040bc83a 	sub	r5,zero,r16
    4c88:	0007c0c0 	call	7c0c <_sbrk_r>
    4c8c:	00ffffc4 	movi	r3,-1
    4c90:	10c00d26 	beq	r2,r3,4cc8 <_malloc_trim_r+0xe0>
    4c94:	00c000b4 	movhi	r3,2
    4c98:	18f9d304 	addi	r3,r3,-6324
    4c9c:	18800017 	ldw	r2,0(r3)
    4ca0:	99000217 	ldw	r4,8(r19)
    4ca4:	8c23c83a 	sub	r17,r17,r16
    4ca8:	8c400054 	ori	r17,r17,1
    4cac:	1421c83a 	sub	r16,r2,r16
    4cb0:	24400115 	stw	r17,4(r4)
    4cb4:	9009883a 	mov	r4,r18
    4cb8:	1c000015 	stw	r16,0(r3)
    4cbc:	000d9d00 	call	d9d0 <__malloc_unlock>
    4cc0:	00800044 	movi	r2,1
    4cc4:	003fe706 	br	4c64 <__alt_mem_Flash_flash_data+0xf4004c64>
    4cc8:	9009883a 	mov	r4,r18
    4ccc:	000b883a 	mov	r5,zero
    4cd0:	0007c0c0 	call	7c0c <_sbrk_r>
    4cd4:	99000217 	ldw	r4,8(r19)
    4cd8:	014003c4 	movi	r5,15
    4cdc:	1107c83a 	sub	r3,r2,r4
    4ce0:	28ffdd0e 	bge	r5,r3,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4ce4:	014000b4 	movhi	r5,2
    4ce8:	29710504 	addi	r5,r5,-15340
    4cec:	29400017 	ldw	r5,0(r5)
    4cf0:	18c00054 	ori	r3,r3,1
    4cf4:	20c00115 	stw	r3,4(r4)
    4cf8:	00c000b4 	movhi	r3,2
    4cfc:	1145c83a 	sub	r2,r2,r5
    4d00:	18f9d304 	addi	r3,r3,-6324
    4d04:	18800015 	stw	r2,0(r3)
    4d08:	003fd306 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>

00004d0c <_free_r>:
    4d0c:	28004c26 	beq	r5,zero,4e40 <_free_r+0x134>
    4d10:	defffd04 	addi	sp,sp,-12
    4d14:	dc400115 	stw	r17,4(sp)
    4d18:	dc000015 	stw	r16,0(sp)
    4d1c:	2023883a 	mov	r17,r4
    4d20:	2821883a 	mov	r16,r5
    4d24:	dfc00215 	stw	ra,8(sp)
    4d28:	000d8b00 	call	d8b0 <__malloc_lock>
    4d2c:	813fff17 	ldw	r4,-4(r16)
    4d30:	00bfff84 	movi	r2,-2
    4d34:	024000b4 	movhi	r9,2
    4d38:	81bffe04 	addi	r6,r16,-8
    4d3c:	2084703a 	and	r2,r4,r2
    4d40:	4a69e404 	addi	r9,r9,-22640
    4d44:	308b883a 	add	r5,r6,r2
    4d48:	2a000117 	ldw	r8,4(r5)
    4d4c:	49c00217 	ldw	r7,8(r9)
    4d50:	00ffff04 	movi	r3,-4
    4d54:	40c6703a 	and	r3,r8,r3
    4d58:	39405326 	beq	r7,r5,4ea8 <_free_r+0x19c>
    4d5c:	28c00115 	stw	r3,4(r5)
    4d60:	2100004c 	andi	r4,r4,1
    4d64:	2000091e 	bne	r4,zero,4d8c <_free_r+0x80>
    4d68:	81fffe17 	ldw	r7,-8(r16)
    4d6c:	4a000204 	addi	r8,r9,8
    4d70:	31cdc83a 	sub	r6,r6,r7
    4d74:	31000217 	ldw	r4,8(r6)
    4d78:	11c5883a 	add	r2,r2,r7
    4d7c:	22006126 	beq	r4,r8,4f04 <_free_r+0x1f8>
    4d80:	31c00317 	ldw	r7,12(r6)
    4d84:	21c00315 	stw	r7,12(r4)
    4d88:	39000215 	stw	r4,8(r7)
    4d8c:	28c9883a 	add	r4,r5,r3
    4d90:	21c00117 	ldw	r7,4(r4)
    4d94:	39c0004c 	andi	r7,r7,1
    4d98:	38000d1e 	bne	r7,zero,4dd0 <_free_r+0xc4>
    4d9c:	29000217 	ldw	r4,8(r5)
    4da0:	10c5883a 	add	r2,r2,r3
    4da4:	00c000b4 	movhi	r3,2
    4da8:	18e9e604 	addi	r3,r3,-22632
    4dac:	20c07526 	beq	r4,r3,4f84 <_free_r+0x278>
    4db0:	29c00317 	ldw	r7,12(r5)
    4db4:	11400054 	ori	r5,r2,1
    4db8:	3087883a 	add	r3,r6,r2
    4dbc:	21c00315 	stw	r7,12(r4)
    4dc0:	39000215 	stw	r4,8(r7)
    4dc4:	31400115 	stw	r5,4(r6)
    4dc8:	18800015 	stw	r2,0(r3)
    4dcc:	00000406 	br	4de0 <_free_r+0xd4>
    4dd0:	10c00054 	ori	r3,r2,1
    4dd4:	30c00115 	stw	r3,4(r6)
    4dd8:	3087883a 	add	r3,r6,r2
    4ddc:	18800015 	stw	r2,0(r3)
    4de0:	00c07fc4 	movi	r3,511
    4de4:	18801736 	bltu	r3,r2,4e44 <_free_r+0x138>
    4de8:	1004d0fa 	srli	r2,r2,3
    4dec:	01400044 	movi	r5,1
    4df0:	49000117 	ldw	r4,4(r9)
    4df4:	1087883a 	add	r3,r2,r2
    4df8:	18c7883a 	add	r3,r3,r3
    4dfc:	1005d0ba 	srai	r2,r2,2
    4e00:	18c7883a 	add	r3,r3,r3
    4e04:	1a47883a 	add	r3,r3,r9
    4e08:	19c00217 	ldw	r7,8(r3)
    4e0c:	2884983a 	sll	r2,r5,r2
    4e10:	30c00315 	stw	r3,12(r6)
    4e14:	31c00215 	stw	r7,8(r6)
    4e18:	1104b03a 	or	r2,r2,r4
    4e1c:	19800215 	stw	r6,8(r3)
    4e20:	48800115 	stw	r2,4(r9)
    4e24:	39800315 	stw	r6,12(r7)
    4e28:	8809883a 	mov	r4,r17
    4e2c:	dfc00217 	ldw	ra,8(sp)
    4e30:	dc400117 	ldw	r17,4(sp)
    4e34:	dc000017 	ldw	r16,0(sp)
    4e38:	dec00304 	addi	sp,sp,12
    4e3c:	000d9d01 	jmpi	d9d0 <__malloc_unlock>
    4e40:	f800283a 	ret
    4e44:	1006d27a 	srli	r3,r2,9
    4e48:	01000104 	movi	r4,4
    4e4c:	20c04036 	bltu	r4,r3,4f50 <_free_r+0x244>
    4e50:	1006d1ba 	srli	r3,r2,6
    4e54:	19400e04 	addi	r5,r3,56
    4e58:	2947883a 	add	r3,r5,r5
    4e5c:	18c7883a 	add	r3,r3,r3
    4e60:	18c7883a 	add	r3,r3,r3
    4e64:	1a49883a 	add	r4,r3,r9
    4e68:	20c00217 	ldw	r3,8(r4)
    4e6c:	01c000b4 	movhi	r7,2
    4e70:	39e9e404 	addi	r7,r7,-22640
    4e74:	19003b26 	beq	r3,r4,4f64 <_free_r+0x258>
    4e78:	01ffff04 	movi	r7,-4
    4e7c:	19400117 	ldw	r5,4(r3)
    4e80:	29ca703a 	and	r5,r5,r7
    4e84:	1140022e 	bgeu	r2,r5,4e90 <_free_r+0x184>
    4e88:	18c00217 	ldw	r3,8(r3)
    4e8c:	20fffb1e 	bne	r4,r3,4e7c <__alt_mem_Flash_flash_data+0xf4004e7c>
    4e90:	18800317 	ldw	r2,12(r3)
    4e94:	30800315 	stw	r2,12(r6)
    4e98:	30c00215 	stw	r3,8(r6)
    4e9c:	11800215 	stw	r6,8(r2)
    4ea0:	19800315 	stw	r6,12(r3)
    4ea4:	003fe006 	br	4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4ea8:	2100004c 	andi	r4,r4,1
    4eac:	1885883a 	add	r2,r3,r2
    4eb0:	2000071e 	bne	r4,zero,4ed0 <_free_r+0x1c4>
    4eb4:	817ffe17 	ldw	r5,-8(r16)
    4eb8:	314dc83a 	sub	r6,r6,r5
    4ebc:	30c00317 	ldw	r3,12(r6)
    4ec0:	31000217 	ldw	r4,8(r6)
    4ec4:	1145883a 	add	r2,r2,r5
    4ec8:	20c00315 	stw	r3,12(r4)
    4ecc:	19000215 	stw	r4,8(r3)
    4ed0:	10c00054 	ori	r3,r2,1
    4ed4:	30c00115 	stw	r3,4(r6)
    4ed8:	00c000b4 	movhi	r3,2
    4edc:	18f10604 	addi	r3,r3,-15336
    4ee0:	18c00017 	ldw	r3,0(r3)
    4ee4:	49800215 	stw	r6,8(r9)
    4ee8:	10ffcf36 	bltu	r2,r3,4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4eec:	008000b4 	movhi	r2,2
    4ef0:	10b9b004 	addi	r2,r2,-6464
    4ef4:	11400017 	ldw	r5,0(r2)
    4ef8:	8809883a 	mov	r4,r17
    4efc:	0004be80 	call	4be8 <_malloc_trim_r>
    4f00:	003fc906 	br	4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4f04:	28c9883a 	add	r4,r5,r3
    4f08:	21000117 	ldw	r4,4(r4)
    4f0c:	2100004c 	andi	r4,r4,1
    4f10:	20000a1e 	bne	r4,zero,4f3c <_free_r+0x230>
    4f14:	29000317 	ldw	r4,12(r5)
    4f18:	29400217 	ldw	r5,8(r5)
    4f1c:	10c5883a 	add	r2,r2,r3
    4f20:	10c00054 	ori	r3,r2,1
    4f24:	29000315 	stw	r4,12(r5)
    4f28:	21400215 	stw	r5,8(r4)
    4f2c:	30c00115 	stw	r3,4(r6)
    4f30:	308d883a 	add	r6,r6,r2
    4f34:	30800015 	stw	r2,0(r6)
    4f38:	003fbb06 	br	4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4f3c:	10c00054 	ori	r3,r2,1
    4f40:	30c00115 	stw	r3,4(r6)
    4f44:	308d883a 	add	r6,r6,r2
    4f48:	30800015 	stw	r2,0(r6)
    4f4c:	003fb606 	br	4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4f50:	01000504 	movi	r4,20
    4f54:	20c01436 	bltu	r4,r3,4fa8 <_free_r+0x29c>
    4f58:	194016c4 	addi	r5,r3,91
    4f5c:	2947883a 	add	r3,r5,r5
    4f60:	003fbe06 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>
    4f64:	280bd0ba 	srai	r5,r5,2
    4f68:	00800044 	movi	r2,1
    4f6c:	39000117 	ldw	r4,4(r7)
    4f70:	114a983a 	sll	r5,r2,r5
    4f74:	1805883a 	mov	r2,r3
    4f78:	2908b03a 	or	r4,r5,r4
    4f7c:	39000115 	stw	r4,4(r7)
    4f80:	003fc406 	br	4e94 <__alt_mem_Flash_flash_data+0xf4004e94>
    4f84:	49800515 	stw	r6,20(r9)
    4f88:	49800415 	stw	r6,16(r9)
    4f8c:	10c00054 	ori	r3,r2,1
    4f90:	31000315 	stw	r4,12(r6)
    4f94:	31000215 	stw	r4,8(r6)
    4f98:	30c00115 	stw	r3,4(r6)
    4f9c:	308d883a 	add	r6,r6,r2
    4fa0:	30800015 	stw	r2,0(r6)
    4fa4:	003fa006 	br	4e28 <__alt_mem_Flash_flash_data+0xf4004e28>
    4fa8:	01001504 	movi	r4,84
    4fac:	20c00436 	bltu	r4,r3,4fc0 <_free_r+0x2b4>
    4fb0:	1006d33a 	srli	r3,r2,12
    4fb4:	19401b84 	addi	r5,r3,110
    4fb8:	2947883a 	add	r3,r5,r5
    4fbc:	003fa706 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>
    4fc0:	01005504 	movi	r4,340
    4fc4:	20c00436 	bltu	r4,r3,4fd8 <_free_r+0x2cc>
    4fc8:	1006d3fa 	srli	r3,r2,15
    4fcc:	19401dc4 	addi	r5,r3,119
    4fd0:	2947883a 	add	r3,r5,r5
    4fd4:	003fa106 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>
    4fd8:	01015504 	movi	r4,1364
    4fdc:	20c00436 	bltu	r4,r3,4ff0 <_free_r+0x2e4>
    4fe0:	1006d4ba 	srli	r3,r2,18
    4fe4:	19401f04 	addi	r5,r3,124
    4fe8:	2947883a 	add	r3,r5,r5
    4fec:	003f9b06 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>
    4ff0:	00c03f04 	movi	r3,252
    4ff4:	01401f84 	movi	r5,126
    4ff8:	003f9806 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>

00004ffc <__sfvwrite_r>:
    4ffc:	30800217 	ldw	r2,8(r6)
    5000:	10006726 	beq	r2,zero,51a0 <__sfvwrite_r+0x1a4>
    5004:	defff404 	addi	sp,sp,-48
    5008:	dd000615 	stw	r20,24(sp)
    500c:	2029883a 	mov	r20,r4
    5010:	2900030b 	ldhu	r4,12(r5)
    5014:	ddc00915 	stw	r23,36(sp)
    5018:	dc000215 	stw	r16,8(sp)
    501c:	dfc00b15 	stw	ra,44(sp)
    5020:	df000a15 	stw	fp,40(sp)
    5024:	dd800815 	stw	r22,32(sp)
    5028:	dd400715 	stw	r21,28(sp)
    502c:	dcc00515 	stw	r19,20(sp)
    5030:	dc800415 	stw	r18,16(sp)
    5034:	dc400315 	stw	r17,12(sp)
    5038:	2080020c 	andi	r2,r4,8
    503c:	2821883a 	mov	r16,r5
    5040:	302f883a 	mov	r23,r6
    5044:	10002726 	beq	r2,zero,50e4 <__sfvwrite_r+0xe8>
    5048:	28800417 	ldw	r2,16(r5)
    504c:	10002526 	beq	r2,zero,50e4 <__sfvwrite_r+0xe8>
    5050:	2080008c 	andi	r2,r4,2
    5054:	bc400017 	ldw	r17,0(r23)
    5058:	10002a26 	beq	r2,zero,5104 <__sfvwrite_r+0x108>
    505c:	05600034 	movhi	r21,32768
    5060:	0027883a 	mov	r19,zero
    5064:	0025883a 	mov	r18,zero
    5068:	ad7f0004 	addi	r21,r21,-1024
    506c:	980d883a 	mov	r6,r19
    5070:	a009883a 	mov	r4,r20
    5074:	90004626 	beq	r18,zero,5190 <__sfvwrite_r+0x194>
    5078:	900f883a 	mov	r7,r18
    507c:	81400717 	ldw	r5,28(r16)
    5080:	ac80022e 	bgeu	r21,r18,508c <__sfvwrite_r+0x90>
    5084:	01e00034 	movhi	r7,32768
    5088:	39ff0004 	addi	r7,r7,-1024
    508c:	80800917 	ldw	r2,36(r16)
    5090:	103ee83a 	callr	r2
    5094:	0080520e 	bge	zero,r2,51e0 <__sfvwrite_r+0x1e4>
    5098:	b8c00217 	ldw	r3,8(r23)
    509c:	98a7883a 	add	r19,r19,r2
    50a0:	90a5c83a 	sub	r18,r18,r2
    50a4:	1885c83a 	sub	r2,r3,r2
    50a8:	b8800215 	stw	r2,8(r23)
    50ac:	103fef1e 	bne	r2,zero,506c <__alt_mem_Flash_flash_data+0xf400506c>
    50b0:	0005883a 	mov	r2,zero
    50b4:	dfc00b17 	ldw	ra,44(sp)
    50b8:	df000a17 	ldw	fp,40(sp)
    50bc:	ddc00917 	ldw	r23,36(sp)
    50c0:	dd800817 	ldw	r22,32(sp)
    50c4:	dd400717 	ldw	r21,28(sp)
    50c8:	dd000617 	ldw	r20,24(sp)
    50cc:	dcc00517 	ldw	r19,20(sp)
    50d0:	dc800417 	ldw	r18,16(sp)
    50d4:	dc400317 	ldw	r17,12(sp)
    50d8:	dc000217 	ldw	r16,8(sp)
    50dc:	dec00c04 	addi	sp,sp,48
    50e0:	f800283a 	ret
    50e4:	a009883a 	mov	r4,r20
    50e8:	800b883a 	mov	r5,r16
    50ec:	0002b380 	call	2b38 <__swsetup_r>
    50f0:	1000ec1e 	bne	r2,zero,54a4 <__sfvwrite_r+0x4a8>
    50f4:	8100030b 	ldhu	r4,12(r16)
    50f8:	bc400017 	ldw	r17,0(r23)
    50fc:	2080008c 	andi	r2,r4,2
    5100:	103fd61e 	bne	r2,zero,505c <__alt_mem_Flash_flash_data+0xf400505c>
    5104:	2080004c 	andi	r2,r4,1
    5108:	10003a1e 	bne	r2,zero,51f4 <__sfvwrite_r+0x1f8>
    510c:	0039883a 	mov	fp,zero
    5110:	0025883a 	mov	r18,zero
    5114:	90001a26 	beq	r18,zero,5180 <__sfvwrite_r+0x184>
    5118:	2080800c 	andi	r2,r4,512
    511c:	85800217 	ldw	r22,8(r16)
    5120:	10007626 	beq	r2,zero,52fc <__sfvwrite_r+0x300>
    5124:	b027883a 	mov	r19,r22
    5128:	95809436 	bltu	r18,r22,537c <__sfvwrite_r+0x380>
    512c:	2081200c 	andi	r2,r4,1152
    5130:	10009f1e 	bne	r2,zero,53b0 <__sfvwrite_r+0x3b4>
    5134:	81000017 	ldw	r4,0(r16)
    5138:	e00b883a 	mov	r5,fp
    513c:	980d883a 	mov	r6,r19
    5140:	00062a40 	call	62a4 <memmove>
    5144:	81000217 	ldw	r4,8(r16)
    5148:	81400017 	ldw	r5,0(r16)
    514c:	9005883a 	mov	r2,r18
    5150:	2587c83a 	sub	r3,r4,r22
    5154:	2ce7883a 	add	r19,r5,r19
    5158:	80c00215 	stw	r3,8(r16)
    515c:	84c00015 	stw	r19,0(r16)
    5160:	b8c00217 	ldw	r3,8(r23)
    5164:	e0b9883a 	add	fp,fp,r2
    5168:	90a5c83a 	sub	r18,r18,r2
    516c:	1885c83a 	sub	r2,r3,r2
    5170:	b8800215 	stw	r2,8(r23)
    5174:	103fce26 	beq	r2,zero,50b0 <__alt_mem_Flash_flash_data+0xf40050b0>
    5178:	8100030b 	ldhu	r4,12(r16)
    517c:	903fe61e 	bne	r18,zero,5118 <__alt_mem_Flash_flash_data+0xf4005118>
    5180:	8f000017 	ldw	fp,0(r17)
    5184:	8c800117 	ldw	r18,4(r17)
    5188:	8c400204 	addi	r17,r17,8
    518c:	003fe106 	br	5114 <__alt_mem_Flash_flash_data+0xf4005114>
    5190:	8cc00017 	ldw	r19,0(r17)
    5194:	8c800117 	ldw	r18,4(r17)
    5198:	8c400204 	addi	r17,r17,8
    519c:	003fb306 	br	506c <__alt_mem_Flash_flash_data+0xf400506c>
    51a0:	0005883a 	mov	r2,zero
    51a4:	f800283a 	ret
    51a8:	00a00034 	movhi	r2,32768
    51ac:	10bfffc4 	addi	r2,r2,-1
    51b0:	9009883a 	mov	r4,r18
    51b4:	1480012e 	bgeu	r2,r18,51bc <__sfvwrite_r+0x1c0>
    51b8:	1009883a 	mov	r4,r2
    51bc:	980b883a 	mov	r5,r19
    51c0:	000a7140 	call	a714 <__divsi3>
    51c4:	81400717 	ldw	r5,28(r16)
    51c8:	80c00917 	ldw	r3,36(r16)
    51cc:	988f383a 	mul	r7,r19,r2
    51d0:	a009883a 	mov	r4,r20
    51d4:	e00d883a 	mov	r6,fp
    51d8:	183ee83a 	callr	r3
    51dc:	00bfe016 	blt	zero,r2,5160 <__alt_mem_Flash_flash_data+0xf4005160>
    51e0:	8080030b 	ldhu	r2,12(r16)
    51e4:	10801014 	ori	r2,r2,64
    51e8:	8080030d 	sth	r2,12(r16)
    51ec:	00bfffc4 	movi	r2,-1
    51f0:	003fb006 	br	50b4 <__alt_mem_Flash_flash_data+0xf40050b4>
    51f4:	0027883a 	mov	r19,zero
    51f8:	0011883a 	mov	r8,zero
    51fc:	0039883a 	mov	fp,zero
    5200:	0025883a 	mov	r18,zero
    5204:	90001f26 	beq	r18,zero,5284 <__sfvwrite_r+0x288>
    5208:	40006026 	beq	r8,zero,538c <__sfvwrite_r+0x390>
    520c:	982b883a 	mov	r21,r19
    5210:	94c0012e 	bgeu	r18,r19,5218 <__sfvwrite_r+0x21c>
    5214:	902b883a 	mov	r21,r18
    5218:	81000017 	ldw	r4,0(r16)
    521c:	80800417 	ldw	r2,16(r16)
    5220:	a82d883a 	mov	r22,r21
    5224:	81800217 	ldw	r6,8(r16)
    5228:	81c00517 	ldw	r7,20(r16)
    522c:	1100022e 	bgeu	r2,r4,5238 <__sfvwrite_r+0x23c>
    5230:	31c7883a 	add	r3,r6,r7
    5234:	1d401816 	blt	r3,r21,5298 <__sfvwrite_r+0x29c>
    5238:	a9c04416 	blt	r21,r7,534c <__sfvwrite_r+0x350>
    523c:	80800917 	ldw	r2,36(r16)
    5240:	81400717 	ldw	r5,28(r16)
    5244:	a009883a 	mov	r4,r20
    5248:	da000115 	stw	r8,4(sp)
    524c:	e00d883a 	mov	r6,fp
    5250:	103ee83a 	callr	r2
    5254:	102d883a 	mov	r22,r2
    5258:	da000117 	ldw	r8,4(sp)
    525c:	00bfe00e 	bge	zero,r2,51e0 <__alt_mem_Flash_flash_data+0xf40051e0>
    5260:	9da7c83a 	sub	r19,r19,r22
    5264:	98001f26 	beq	r19,zero,52e4 <__sfvwrite_r+0x2e8>
    5268:	b8800217 	ldw	r2,8(r23)
    526c:	e5b9883a 	add	fp,fp,r22
    5270:	95a5c83a 	sub	r18,r18,r22
    5274:	15adc83a 	sub	r22,r2,r22
    5278:	bd800215 	stw	r22,8(r23)
    527c:	b03f8c26 	beq	r22,zero,50b0 <__alt_mem_Flash_flash_data+0xf40050b0>
    5280:	903fe11e 	bne	r18,zero,5208 <__alt_mem_Flash_flash_data+0xf4005208>
    5284:	8f000017 	ldw	fp,0(r17)
    5288:	8c800117 	ldw	r18,4(r17)
    528c:	0011883a 	mov	r8,zero
    5290:	8c400204 	addi	r17,r17,8
    5294:	003fdb06 	br	5204 <__alt_mem_Flash_flash_data+0xf4005204>
    5298:	180d883a 	mov	r6,r3
    529c:	e00b883a 	mov	r5,fp
    52a0:	da000115 	stw	r8,4(sp)
    52a4:	d8c00015 	stw	r3,0(sp)
    52a8:	00062a40 	call	62a4 <memmove>
    52ac:	d8c00017 	ldw	r3,0(sp)
    52b0:	80800017 	ldw	r2,0(r16)
    52b4:	a009883a 	mov	r4,r20
    52b8:	800b883a 	mov	r5,r16
    52bc:	10c5883a 	add	r2,r2,r3
    52c0:	80800015 	stw	r2,0(r16)
    52c4:	d8c00015 	stw	r3,0(sp)
    52c8:	00047bc0 	call	47bc <_fflush_r>
    52cc:	d8c00017 	ldw	r3,0(sp)
    52d0:	da000117 	ldw	r8,4(sp)
    52d4:	103fc21e 	bne	r2,zero,51e0 <__alt_mem_Flash_flash_data+0xf40051e0>
    52d8:	182d883a 	mov	r22,r3
    52dc:	9da7c83a 	sub	r19,r19,r22
    52e0:	983fe11e 	bne	r19,zero,5268 <__alt_mem_Flash_flash_data+0xf4005268>
    52e4:	a009883a 	mov	r4,r20
    52e8:	800b883a 	mov	r5,r16
    52ec:	00047bc0 	call	47bc <_fflush_r>
    52f0:	103fbb1e 	bne	r2,zero,51e0 <__alt_mem_Flash_flash_data+0xf40051e0>
    52f4:	0011883a 	mov	r8,zero
    52f8:	003fdb06 	br	5268 <__alt_mem_Flash_flash_data+0xf4005268>
    52fc:	81000017 	ldw	r4,0(r16)
    5300:	80800417 	ldw	r2,16(r16)
    5304:	11000236 	bltu	r2,r4,5310 <__sfvwrite_r+0x314>
    5308:	84c00517 	ldw	r19,20(r16)
    530c:	94ffa62e 	bgeu	r18,r19,51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5310:	9027883a 	mov	r19,r18
    5314:	b480012e 	bgeu	r22,r18,531c <__sfvwrite_r+0x320>
    5318:	b027883a 	mov	r19,r22
    531c:	e00b883a 	mov	r5,fp
    5320:	980d883a 	mov	r6,r19
    5324:	00062a40 	call	62a4 <memmove>
    5328:	80800217 	ldw	r2,8(r16)
    532c:	80c00017 	ldw	r3,0(r16)
    5330:	14c5c83a 	sub	r2,r2,r19
    5334:	1cc7883a 	add	r3,r3,r19
    5338:	80800215 	stw	r2,8(r16)
    533c:	80c00015 	stw	r3,0(r16)
    5340:	10004326 	beq	r2,zero,5450 <__sfvwrite_r+0x454>
    5344:	9805883a 	mov	r2,r19
    5348:	003f8506 	br	5160 <__alt_mem_Flash_flash_data+0xf4005160>
    534c:	a80d883a 	mov	r6,r21
    5350:	e00b883a 	mov	r5,fp
    5354:	da000115 	stw	r8,4(sp)
    5358:	00062a40 	call	62a4 <memmove>
    535c:	80800217 	ldw	r2,8(r16)
    5360:	80c00017 	ldw	r3,0(r16)
    5364:	da000117 	ldw	r8,4(sp)
    5368:	1545c83a 	sub	r2,r2,r21
    536c:	1d6b883a 	add	r21,r3,r21
    5370:	80800215 	stw	r2,8(r16)
    5374:	85400015 	stw	r21,0(r16)
    5378:	003fb906 	br	5260 <__alt_mem_Flash_flash_data+0xf4005260>
    537c:	81000017 	ldw	r4,0(r16)
    5380:	902d883a 	mov	r22,r18
    5384:	9027883a 	mov	r19,r18
    5388:	003f6b06 	br	5138 <__alt_mem_Flash_flash_data+0xf4005138>
    538c:	e009883a 	mov	r4,fp
    5390:	01400284 	movi	r5,10
    5394:	900d883a 	mov	r6,r18
    5398:	00060840 	call	6084 <memchr>
    539c:	10003e26 	beq	r2,zero,5498 <__sfvwrite_r+0x49c>
    53a0:	10800044 	addi	r2,r2,1
    53a4:	1727c83a 	sub	r19,r2,fp
    53a8:	02000044 	movi	r8,1
    53ac:	003f9706 	br	520c <__alt_mem_Flash_flash_data+0xf400520c>
    53b0:	80800517 	ldw	r2,20(r16)
    53b4:	81400417 	ldw	r5,16(r16)
    53b8:	80c00017 	ldw	r3,0(r16)
    53bc:	10a7883a 	add	r19,r2,r2
    53c0:	9885883a 	add	r2,r19,r2
    53c4:	1026d7fa 	srli	r19,r2,31
    53c8:	196bc83a 	sub	r21,r3,r5
    53cc:	a9800044 	addi	r6,r21,1
    53d0:	9885883a 	add	r2,r19,r2
    53d4:	1027d07a 	srai	r19,r2,1
    53d8:	3485883a 	add	r2,r6,r18
    53dc:	980d883a 	mov	r6,r19
    53e0:	9880022e 	bgeu	r19,r2,53ec <__sfvwrite_r+0x3f0>
    53e4:	1027883a 	mov	r19,r2
    53e8:	100d883a 	mov	r6,r2
    53ec:	2101000c 	andi	r4,r4,1024
    53f0:	20001c26 	beq	r4,zero,5464 <__sfvwrite_r+0x468>
    53f4:	a009883a 	mov	r4,r20
    53f8:	300b883a 	mov	r5,r6
    53fc:	00058dc0 	call	58dc <_malloc_r>
    5400:	102d883a 	mov	r22,r2
    5404:	10002926 	beq	r2,zero,54ac <__sfvwrite_r+0x4b0>
    5408:	81400417 	ldw	r5,16(r16)
    540c:	1009883a 	mov	r4,r2
    5410:	a80d883a 	mov	r6,r21
    5414:	000616c0 	call	616c <memcpy>
    5418:	8080030b 	ldhu	r2,12(r16)
    541c:	00fedfc4 	movi	r3,-1153
    5420:	10c4703a 	and	r2,r2,r3
    5424:	10802014 	ori	r2,r2,128
    5428:	8080030d 	sth	r2,12(r16)
    542c:	b549883a 	add	r4,r22,r21
    5430:	9d4bc83a 	sub	r5,r19,r21
    5434:	85800415 	stw	r22,16(r16)
    5438:	84c00515 	stw	r19,20(r16)
    543c:	81000015 	stw	r4,0(r16)
    5440:	902d883a 	mov	r22,r18
    5444:	81400215 	stw	r5,8(r16)
    5448:	9027883a 	mov	r19,r18
    544c:	003f3a06 	br	5138 <__alt_mem_Flash_flash_data+0xf4005138>
    5450:	a009883a 	mov	r4,r20
    5454:	800b883a 	mov	r5,r16
    5458:	00047bc0 	call	47bc <_fflush_r>
    545c:	103fb926 	beq	r2,zero,5344 <__alt_mem_Flash_flash_data+0xf4005344>
    5460:	003f5f06 	br	51e0 <__alt_mem_Flash_flash_data+0xf40051e0>
    5464:	a009883a 	mov	r4,r20
    5468:	00076300 	call	7630 <_realloc_r>
    546c:	102d883a 	mov	r22,r2
    5470:	103fee1e 	bne	r2,zero,542c <__alt_mem_Flash_flash_data+0xf400542c>
    5474:	81400417 	ldw	r5,16(r16)
    5478:	a009883a 	mov	r4,r20
    547c:	0004d0c0 	call	4d0c <_free_r>
    5480:	8080030b 	ldhu	r2,12(r16)
    5484:	00ffdfc4 	movi	r3,-129
    5488:	1884703a 	and	r2,r3,r2
    548c:	00c00304 	movi	r3,12
    5490:	a0c00015 	stw	r3,0(r20)
    5494:	003f5306 	br	51e4 <__alt_mem_Flash_flash_data+0xf40051e4>
    5498:	94c00044 	addi	r19,r18,1
    549c:	02000044 	movi	r8,1
    54a0:	003f5a06 	br	520c <__alt_mem_Flash_flash_data+0xf400520c>
    54a4:	00bfffc4 	movi	r2,-1
    54a8:	003f0206 	br	50b4 <__alt_mem_Flash_flash_data+0xf40050b4>
    54ac:	00800304 	movi	r2,12
    54b0:	a0800015 	stw	r2,0(r20)
    54b4:	8080030b 	ldhu	r2,12(r16)
    54b8:	003f4a06 	br	51e4 <__alt_mem_Flash_flash_data+0xf40051e4>

000054bc <_fwalk>:
    54bc:	defff704 	addi	sp,sp,-36
    54c0:	dd000415 	stw	r20,16(sp)
    54c4:	dfc00815 	stw	ra,32(sp)
    54c8:	ddc00715 	stw	r23,28(sp)
    54cc:	dd800615 	stw	r22,24(sp)
    54d0:	dd400515 	stw	r21,20(sp)
    54d4:	dcc00315 	stw	r19,12(sp)
    54d8:	dc800215 	stw	r18,8(sp)
    54dc:	dc400115 	stw	r17,4(sp)
    54e0:	dc000015 	stw	r16,0(sp)
    54e4:	2500b804 	addi	r20,r4,736
    54e8:	a0002326 	beq	r20,zero,5578 <_fwalk+0xbc>
    54ec:	282b883a 	mov	r21,r5
    54f0:	002f883a 	mov	r23,zero
    54f4:	05800044 	movi	r22,1
    54f8:	04ffffc4 	movi	r19,-1
    54fc:	a4400117 	ldw	r17,4(r20)
    5500:	a4800217 	ldw	r18,8(r20)
    5504:	8c7fffc4 	addi	r17,r17,-1
    5508:	88000d16 	blt	r17,zero,5540 <_fwalk+0x84>
    550c:	94000304 	addi	r16,r18,12
    5510:	94800384 	addi	r18,r18,14
    5514:	80c0000b 	ldhu	r3,0(r16)
    5518:	8c7fffc4 	addi	r17,r17,-1
    551c:	813ffd04 	addi	r4,r16,-12
    5520:	b0c0042e 	bgeu	r22,r3,5534 <_fwalk+0x78>
    5524:	90c0000f 	ldh	r3,0(r18)
    5528:	1cc00226 	beq	r3,r19,5534 <_fwalk+0x78>
    552c:	a83ee83a 	callr	r21
    5530:	b8aeb03a 	or	r23,r23,r2
    5534:	84001a04 	addi	r16,r16,104
    5538:	94801a04 	addi	r18,r18,104
    553c:	8cfff51e 	bne	r17,r19,5514 <__alt_mem_Flash_flash_data+0xf4005514>
    5540:	a5000017 	ldw	r20,0(r20)
    5544:	a03fed1e 	bne	r20,zero,54fc <__alt_mem_Flash_flash_data+0xf40054fc>
    5548:	b805883a 	mov	r2,r23
    554c:	dfc00817 	ldw	ra,32(sp)
    5550:	ddc00717 	ldw	r23,28(sp)
    5554:	dd800617 	ldw	r22,24(sp)
    5558:	dd400517 	ldw	r21,20(sp)
    555c:	dd000417 	ldw	r20,16(sp)
    5560:	dcc00317 	ldw	r19,12(sp)
    5564:	dc800217 	ldw	r18,8(sp)
    5568:	dc400117 	ldw	r17,4(sp)
    556c:	dc000017 	ldw	r16,0(sp)
    5570:	dec00904 	addi	sp,sp,36
    5574:	f800283a 	ret
    5578:	002f883a 	mov	r23,zero
    557c:	003ff206 	br	5548 <__alt_mem_Flash_flash_data+0xf4005548>

00005580 <_fwalk_reent>:
    5580:	defff704 	addi	sp,sp,-36
    5584:	dd400515 	stw	r21,20(sp)
    5588:	dfc00815 	stw	ra,32(sp)
    558c:	ddc00715 	stw	r23,28(sp)
    5590:	dd800615 	stw	r22,24(sp)
    5594:	dd000415 	stw	r20,16(sp)
    5598:	dcc00315 	stw	r19,12(sp)
    559c:	dc800215 	stw	r18,8(sp)
    55a0:	dc400115 	stw	r17,4(sp)
    55a4:	dc000015 	stw	r16,0(sp)
    55a8:	2540b804 	addi	r21,r4,736
    55ac:	a8002326 	beq	r21,zero,563c <_fwalk_reent+0xbc>
    55b0:	2829883a 	mov	r20,r5
    55b4:	202d883a 	mov	r22,r4
    55b8:	002f883a 	mov	r23,zero
    55bc:	04c00044 	movi	r19,1
    55c0:	04bfffc4 	movi	r18,-1
    55c4:	ac400117 	ldw	r17,4(r21)
    55c8:	ac000217 	ldw	r16,8(r21)
    55cc:	8c7fffc4 	addi	r17,r17,-1
    55d0:	88000c16 	blt	r17,zero,5604 <_fwalk_reent+0x84>
    55d4:	84000304 	addi	r16,r16,12
    55d8:	80c0000b 	ldhu	r3,0(r16)
    55dc:	8c7fffc4 	addi	r17,r17,-1
    55e0:	817ffd04 	addi	r5,r16,-12
    55e4:	98c0052e 	bgeu	r19,r3,55fc <_fwalk_reent+0x7c>
    55e8:	80c0008f 	ldh	r3,2(r16)
    55ec:	b009883a 	mov	r4,r22
    55f0:	1c800226 	beq	r3,r18,55fc <_fwalk_reent+0x7c>
    55f4:	a03ee83a 	callr	r20
    55f8:	b8aeb03a 	or	r23,r23,r2
    55fc:	84001a04 	addi	r16,r16,104
    5600:	8cbff51e 	bne	r17,r18,55d8 <__alt_mem_Flash_flash_data+0xf40055d8>
    5604:	ad400017 	ldw	r21,0(r21)
    5608:	a83fee1e 	bne	r21,zero,55c4 <__alt_mem_Flash_flash_data+0xf40055c4>
    560c:	b805883a 	mov	r2,r23
    5610:	dfc00817 	ldw	ra,32(sp)
    5614:	ddc00717 	ldw	r23,28(sp)
    5618:	dd800617 	ldw	r22,24(sp)
    561c:	dd400517 	ldw	r21,20(sp)
    5620:	dd000417 	ldw	r20,16(sp)
    5624:	dcc00317 	ldw	r19,12(sp)
    5628:	dc800217 	ldw	r18,8(sp)
    562c:	dc400117 	ldw	r17,4(sp)
    5630:	dc000017 	ldw	r16,0(sp)
    5634:	dec00904 	addi	sp,sp,36
    5638:	f800283a 	ret
    563c:	002f883a 	mov	r23,zero
    5640:	003ff206 	br	560c <__alt_mem_Flash_flash_data+0xf400560c>

00005644 <_setlocale_r>:
    5644:	30001b26 	beq	r6,zero,56b4 <_setlocale_r+0x70>
    5648:	014000b4 	movhi	r5,2
    564c:	defffe04 	addi	sp,sp,-8
    5650:	2966df04 	addi	r5,r5,-25732
    5654:	3009883a 	mov	r4,r6
    5658:	dc000015 	stw	r16,0(sp)
    565c:	dfc00115 	stw	ra,4(sp)
    5660:	3021883a 	mov	r16,r6
    5664:	00009cc0 	call	9cc <strcmp>
    5668:	1000061e 	bne	r2,zero,5684 <_setlocale_r+0x40>
    566c:	008000b4 	movhi	r2,2
    5670:	10a6de04 	addi	r2,r2,-25736
    5674:	dfc00117 	ldw	ra,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00204 	addi	sp,sp,8
    5680:	f800283a 	ret
    5684:	014000b4 	movhi	r5,2
    5688:	2966de04 	addi	r5,r5,-25736
    568c:	8009883a 	mov	r4,r16
    5690:	00009cc0 	call	9cc <strcmp>
    5694:	103ff526 	beq	r2,zero,566c <__alt_mem_Flash_flash_data+0xf400566c>
    5698:	014000b4 	movhi	r5,2
    569c:	2966c904 	addi	r5,r5,-25820
    56a0:	8009883a 	mov	r4,r16
    56a4:	00009cc0 	call	9cc <strcmp>
    56a8:	103ff026 	beq	r2,zero,566c <__alt_mem_Flash_flash_data+0xf400566c>
    56ac:	0005883a 	mov	r2,zero
    56b0:	003ff006 	br	5674 <__alt_mem_Flash_flash_data+0xf4005674>
    56b4:	008000b4 	movhi	r2,2
    56b8:	10a6de04 	addi	r2,r2,-25736
    56bc:	f800283a 	ret

000056c0 <__locale_charset>:
    56c0:	008000b4 	movhi	r2,2
    56c4:	10a9ce04 	addi	r2,r2,-22728
    56c8:	f800283a 	ret

000056cc <__locale_mb_cur_max>:
    56cc:	008000b4 	movhi	r2,2
    56d0:	10b10404 	addi	r2,r2,-15344
    56d4:	10800017 	ldw	r2,0(r2)
    56d8:	f800283a 	ret

000056dc <__locale_msgcharset>:
    56dc:	008000b4 	movhi	r2,2
    56e0:	10a9c604 	addi	r2,r2,-22760
    56e4:	f800283a 	ret

000056e8 <__locale_cjk_lang>:
    56e8:	0005883a 	mov	r2,zero
    56ec:	f800283a 	ret

000056f0 <_localeconv_r>:
    56f0:	008000b4 	movhi	r2,2
    56f4:	10a9d604 	addi	r2,r2,-22696
    56f8:	f800283a 	ret

000056fc <setlocale>:
    56fc:	00c000b4 	movhi	r3,2
    5700:	18f10304 	addi	r3,r3,-15348
    5704:	2005883a 	mov	r2,r4
    5708:	19000017 	ldw	r4,0(r3)
    570c:	280d883a 	mov	r6,r5
    5710:	100b883a 	mov	r5,r2
    5714:	00056441 	jmpi	5644 <_setlocale_r>

00005718 <localeconv>:
    5718:	008000b4 	movhi	r2,2
    571c:	10a9d604 	addi	r2,r2,-22696
    5720:	f800283a 	ret

00005724 <__smakebuf_r>:
    5724:	2880030b 	ldhu	r2,12(r5)
    5728:	10c0008c 	andi	r3,r2,2
    572c:	1800401e 	bne	r3,zero,5830 <__smakebuf_r+0x10c>
    5730:	deffec04 	addi	sp,sp,-80
    5734:	dc000f15 	stw	r16,60(sp)
    5738:	2821883a 	mov	r16,r5
    573c:	2940038f 	ldh	r5,14(r5)
    5740:	dc401015 	stw	r17,64(sp)
    5744:	dfc01315 	stw	ra,76(sp)
    5748:	dcc01215 	stw	r19,72(sp)
    574c:	dc801115 	stw	r18,68(sp)
    5750:	2023883a 	mov	r17,r4
    5754:	28001b16 	blt	r5,zero,57c4 <__smakebuf_r+0xa0>
    5758:	d80d883a 	mov	r6,sp
    575c:	000980c0 	call	980c <_fstat_r>
    5760:	10001716 	blt	r2,zero,57c0 <__smakebuf_r+0x9c>
    5764:	d8800117 	ldw	r2,4(sp)
    5768:	00e00014 	movui	r3,32768
    576c:	10bc000c 	andi	r2,r2,61440
    5770:	10c03726 	beq	r2,r3,5850 <__smakebuf_r+0x12c>
    5774:	80c0030b 	ldhu	r3,12(r16)
    5778:	18c20014 	ori	r3,r3,2048
    577c:	80c0030d 	sth	r3,12(r16)
    5780:	00c80004 	movi	r3,8192
    5784:	10c03c1e 	bne	r2,r3,5878 <__smakebuf_r+0x154>
    5788:	8140038f 	ldh	r5,14(r16)
    578c:	8809883a 	mov	r4,r17
    5790:	00098640 	call	9864 <_isatty_r>
    5794:	10004e26 	beq	r2,zero,58d0 <__smakebuf_r+0x1ac>
    5798:	8080030b 	ldhu	r2,12(r16)
    579c:	04c00044 	movi	r19,1
    57a0:	80c010c4 	addi	r3,r16,67
    57a4:	14c4b03a 	or	r2,r2,r19
    57a8:	8080030d 	sth	r2,12(r16)
    57ac:	80c00015 	stw	r3,0(r16)
    57b0:	80c00415 	stw	r3,16(r16)
    57b4:	84c00515 	stw	r19,20(r16)
    57b8:	04810004 	movi	r18,1024
    57bc:	00000706 	br	57dc <__smakebuf_r+0xb8>
    57c0:	8080030b 	ldhu	r2,12(r16)
    57c4:	10c0200c 	andi	r3,r2,128
    57c8:	18001f1e 	bne	r3,zero,5848 <__smakebuf_r+0x124>
    57cc:	04810004 	movi	r18,1024
    57d0:	10820014 	ori	r2,r2,2048
    57d4:	8080030d 	sth	r2,12(r16)
    57d8:	0027883a 	mov	r19,zero
    57dc:	8809883a 	mov	r4,r17
    57e0:	900b883a 	mov	r5,r18
    57e4:	00058dc0 	call	58dc <_malloc_r>
    57e8:	10002e26 	beq	r2,zero,58a4 <__smakebuf_r+0x180>
    57ec:	80c0030b 	ldhu	r3,12(r16)
    57f0:	01000034 	movhi	r4,0
    57f4:	21121604 	addi	r4,r4,18520
    57f8:	89000f15 	stw	r4,60(r17)
    57fc:	18c02014 	ori	r3,r3,128
    5800:	80c0030d 	sth	r3,12(r16)
    5804:	80800015 	stw	r2,0(r16)
    5808:	80800415 	stw	r2,16(r16)
    580c:	84800515 	stw	r18,20(r16)
    5810:	98001c1e 	bne	r19,zero,5884 <__smakebuf_r+0x160>
    5814:	dfc01317 	ldw	ra,76(sp)
    5818:	dcc01217 	ldw	r19,72(sp)
    581c:	dc801117 	ldw	r18,68(sp)
    5820:	dc401017 	ldw	r17,64(sp)
    5824:	dc000f17 	ldw	r16,60(sp)
    5828:	dec01404 	addi	sp,sp,80
    582c:	f800283a 	ret
    5830:	288010c4 	addi	r2,r5,67
    5834:	28800015 	stw	r2,0(r5)
    5838:	28800415 	stw	r2,16(r5)
    583c:	00800044 	movi	r2,1
    5840:	28800515 	stw	r2,20(r5)
    5844:	f800283a 	ret
    5848:	04801004 	movi	r18,64
    584c:	003fe006 	br	57d0 <__alt_mem_Flash_flash_data+0xf40057d0>
    5850:	81000a17 	ldw	r4,40(r16)
    5854:	00c00034 	movhi	r3,0
    5858:	18df4e04 	addi	r3,r3,32056
    585c:	20ffc51e 	bne	r4,r3,5774 <__alt_mem_Flash_flash_data+0xf4005774>
    5860:	80c0030b 	ldhu	r3,12(r16)
    5864:	01010004 	movi	r4,1024
    5868:	81001315 	stw	r4,76(r16)
    586c:	1906b03a 	or	r3,r3,r4
    5870:	80c0030d 	sth	r3,12(r16)
    5874:	003fc206 	br	5780 <__alt_mem_Flash_flash_data+0xf4005780>
    5878:	0027883a 	mov	r19,zero
    587c:	04810004 	movi	r18,1024
    5880:	003fd606 	br	57dc <__alt_mem_Flash_flash_data+0xf40057dc>
    5884:	8140038f 	ldh	r5,14(r16)
    5888:	8809883a 	mov	r4,r17
    588c:	00098640 	call	9864 <_isatty_r>
    5890:	103fe026 	beq	r2,zero,5814 <__alt_mem_Flash_flash_data+0xf4005814>
    5894:	8080030b 	ldhu	r2,12(r16)
    5898:	10800054 	ori	r2,r2,1
    589c:	8080030d 	sth	r2,12(r16)
    58a0:	003fdc06 	br	5814 <__alt_mem_Flash_flash_data+0xf4005814>
    58a4:	8080030b 	ldhu	r2,12(r16)
    58a8:	10c0800c 	andi	r3,r2,512
    58ac:	183fd91e 	bne	r3,zero,5814 <__alt_mem_Flash_flash_data+0xf4005814>
    58b0:	10800094 	ori	r2,r2,2
    58b4:	80c010c4 	addi	r3,r16,67
    58b8:	8080030d 	sth	r2,12(r16)
    58bc:	00800044 	movi	r2,1
    58c0:	80c00015 	stw	r3,0(r16)
    58c4:	80c00415 	stw	r3,16(r16)
    58c8:	80800515 	stw	r2,20(r16)
    58cc:	003fd106 	br	5814 <__alt_mem_Flash_flash_data+0xf4005814>
    58d0:	04c00044 	movi	r19,1
    58d4:	04810004 	movi	r18,1024
    58d8:	003fc006 	br	57dc <__alt_mem_Flash_flash_data+0xf40057dc>

000058dc <_malloc_r>:
    58dc:	defff504 	addi	sp,sp,-44
    58e0:	dc800315 	stw	r18,12(sp)
    58e4:	dfc00a15 	stw	ra,40(sp)
    58e8:	df000915 	stw	fp,36(sp)
    58ec:	ddc00815 	stw	r23,32(sp)
    58f0:	dd800715 	stw	r22,28(sp)
    58f4:	dd400615 	stw	r21,24(sp)
    58f8:	dd000515 	stw	r20,20(sp)
    58fc:	dcc00415 	stw	r19,16(sp)
    5900:	dc400215 	stw	r17,8(sp)
    5904:	dc000115 	stw	r16,4(sp)
    5908:	288002c4 	addi	r2,r5,11
    590c:	00c00584 	movi	r3,22
    5910:	2025883a 	mov	r18,r4
    5914:	18802a2e 	bgeu	r3,r2,59c0 <_malloc_r+0xe4>
    5918:	047ffe04 	movi	r17,-8
    591c:	1462703a 	and	r17,r2,r17
    5920:	88009e16 	blt	r17,zero,5b9c <_malloc_r+0x2c0>
    5924:	89409d36 	bltu	r17,r5,5b9c <_malloc_r+0x2c0>
    5928:	000d8b00 	call	d8b0 <__malloc_lock>
    592c:	00807dc4 	movi	r2,503
    5930:	14402736 	bltu	r2,r17,59d0 <_malloc_r+0xf4>
    5934:	8806d0fa 	srli	r3,r17,3
    5938:	04c000b4 	movhi	r19,2
    593c:	9ce9e404 	addi	r19,r19,-22640
    5940:	18c5883a 	add	r2,r3,r3
    5944:	1085883a 	add	r2,r2,r2
    5948:	1085883a 	add	r2,r2,r2
    594c:	9885883a 	add	r2,r19,r2
    5950:	14000317 	ldw	r16,12(r2)
    5954:	80814a26 	beq	r16,r2,5e80 <_malloc_r+0x5a4>
    5958:	80c00117 	ldw	r3,4(r16)
    595c:	81000317 	ldw	r4,12(r16)
    5960:	00bfff04 	movi	r2,-4
    5964:	1884703a 	and	r2,r3,r2
    5968:	81400217 	ldw	r5,8(r16)
    596c:	8085883a 	add	r2,r16,r2
    5970:	10c00117 	ldw	r3,4(r2)
    5974:	29000315 	stw	r4,12(r5)
    5978:	21400215 	stw	r5,8(r4)
    597c:	18c00054 	ori	r3,r3,1
    5980:	10c00115 	stw	r3,4(r2)
    5984:	9009883a 	mov	r4,r18
    5988:	000d9d00 	call	d9d0 <__malloc_unlock>
    598c:	80800204 	addi	r2,r16,8
    5990:	dfc00a17 	ldw	ra,40(sp)
    5994:	df000917 	ldw	fp,36(sp)
    5998:	ddc00817 	ldw	r23,32(sp)
    599c:	dd800717 	ldw	r22,28(sp)
    59a0:	dd400617 	ldw	r21,24(sp)
    59a4:	dd000517 	ldw	r20,20(sp)
    59a8:	dcc00417 	ldw	r19,16(sp)
    59ac:	dc800317 	ldw	r18,12(sp)
    59b0:	dc400217 	ldw	r17,8(sp)
    59b4:	dc000117 	ldw	r16,4(sp)
    59b8:	dec00b04 	addi	sp,sp,44
    59bc:	f800283a 	ret
    59c0:	04400404 	movi	r17,16
    59c4:	89407536 	bltu	r17,r5,5b9c <_malloc_r+0x2c0>
    59c8:	000d8b00 	call	d8b0 <__malloc_lock>
    59cc:	003fd906 	br	5934 <__alt_mem_Flash_flash_data+0xf4005934>
    59d0:	8806d27a 	srli	r3,r17,9
    59d4:	18007526 	beq	r3,zero,5bac <_malloc_r+0x2d0>
    59d8:	00800104 	movi	r2,4
    59dc:	10c0ef36 	bltu	r2,r3,5d9c <_malloc_r+0x4c0>
    59e0:	8806d1ba 	srli	r3,r17,6
    59e4:	19c00e04 	addi	r7,r3,56
    59e8:	39cb883a 	add	r5,r7,r7
    59ec:	04c000b4 	movhi	r19,2
    59f0:	294b883a 	add	r5,r5,r5
    59f4:	9ce9e404 	addi	r19,r19,-22640
    59f8:	294b883a 	add	r5,r5,r5
    59fc:	994b883a 	add	r5,r19,r5
    5a00:	2c000317 	ldw	r16,12(r5)
    5a04:	2c000e26 	beq	r5,r16,5a40 <_malloc_r+0x164>
    5a08:	80800117 	ldw	r2,4(r16)
    5a0c:	01bfff04 	movi	r6,-4
    5a10:	010003c4 	movi	r4,15
    5a14:	1184703a 	and	r2,r2,r6
    5a18:	1447c83a 	sub	r3,r2,r17
    5a1c:	20c00716 	blt	r4,r3,5a3c <_malloc_r+0x160>
    5a20:	1800650e 	bge	r3,zero,5bb8 <_malloc_r+0x2dc>
    5a24:	84000317 	ldw	r16,12(r16)
    5a28:	2c000526 	beq	r5,r16,5a40 <_malloc_r+0x164>
    5a2c:	80800117 	ldw	r2,4(r16)
    5a30:	1184703a 	and	r2,r2,r6
    5a34:	1447c83a 	sub	r3,r2,r17
    5a38:	20fff90e 	bge	r4,r3,5a20 <__alt_mem_Flash_flash_data+0xf4005a20>
    5a3c:	39ffffc4 	addi	r7,r7,-1
    5a40:	38c00044 	addi	r3,r7,1
    5a44:	018000b4 	movhi	r6,2
    5a48:	9c000417 	ldw	r16,16(r19)
    5a4c:	31a9e404 	addi	r6,r6,-22640
    5a50:	32400204 	addi	r9,r6,8
    5a54:	82410326 	beq	r16,r9,5e64 <_malloc_r+0x588>
    5a58:	81000117 	ldw	r4,4(r16)
    5a5c:	00bfff04 	movi	r2,-4
    5a60:	208e703a 	and	r7,r4,r2
    5a64:	3c45c83a 	sub	r2,r7,r17
    5a68:	010003c4 	movi	r4,15
    5a6c:	2080ee16 	blt	r4,r2,5e28 <_malloc_r+0x54c>
    5a70:	32400515 	stw	r9,20(r6)
    5a74:	32400415 	stw	r9,16(r6)
    5a78:	1000510e 	bge	r2,zero,5bc0 <_malloc_r+0x2e4>
    5a7c:	00807fc4 	movi	r2,511
    5a80:	11c0ce36 	bltu	r2,r7,5dbc <_malloc_r+0x4e0>
    5a84:	3808d0fa 	srli	r4,r7,3
    5a88:	01c00044 	movi	r7,1
    5a8c:	30800117 	ldw	r2,4(r6)
    5a90:	210b883a 	add	r5,r4,r4
    5a94:	294b883a 	add	r5,r5,r5
    5a98:	2009d0ba 	srai	r4,r4,2
    5a9c:	294b883a 	add	r5,r5,r5
    5aa0:	298b883a 	add	r5,r5,r6
    5aa4:	2a000217 	ldw	r8,8(r5)
    5aa8:	3908983a 	sll	r4,r7,r4
    5aac:	81400315 	stw	r5,12(r16)
    5ab0:	82000215 	stw	r8,8(r16)
    5ab4:	2088b03a 	or	r4,r4,r2
    5ab8:	2c000215 	stw	r16,8(r5)
    5abc:	31000115 	stw	r4,4(r6)
    5ac0:	44000315 	stw	r16,12(r8)
    5ac4:	1805d0ba 	srai	r2,r3,2
    5ac8:	01400044 	movi	r5,1
    5acc:	288a983a 	sll	r5,r5,r2
    5ad0:	21404336 	bltu	r4,r5,5be0 <_malloc_r+0x304>
    5ad4:	2144703a 	and	r2,r4,r5
    5ad8:	10000a1e 	bne	r2,zero,5b04 <_malloc_r+0x228>
    5adc:	00bfff04 	movi	r2,-4
    5ae0:	294b883a 	add	r5,r5,r5
    5ae4:	1886703a 	and	r3,r3,r2
    5ae8:	2144703a 	and	r2,r4,r5
    5aec:	18c00104 	addi	r3,r3,4
    5af0:	1000041e 	bne	r2,zero,5b04 <_malloc_r+0x228>
    5af4:	294b883a 	add	r5,r5,r5
    5af8:	2144703a 	and	r2,r4,r5
    5afc:	18c00104 	addi	r3,r3,4
    5b00:	103ffc26 	beq	r2,zero,5af4 <__alt_mem_Flash_flash_data+0xf4005af4>
    5b04:	023fff04 	movi	r8,-4
    5b08:	01c003c4 	movi	r7,15
    5b0c:	18c5883a 	add	r2,r3,r3
    5b10:	1085883a 	add	r2,r2,r2
    5b14:	1085883a 	add	r2,r2,r2
    5b18:	9895883a 	add	r10,r19,r2
    5b1c:	52c00304 	addi	r11,r10,12
    5b20:	1819883a 	mov	r12,r3
    5b24:	5c000017 	ldw	r16,0(r11)
    5b28:	59bffd04 	addi	r6,r11,-12
    5b2c:	8180041e 	bne	r16,r6,5b40 <_malloc_r+0x264>
    5b30:	0000ce06 	br	5e6c <_malloc_r+0x590>
    5b34:	2000d70e 	bge	r4,zero,5e94 <_malloc_r+0x5b8>
    5b38:	84000317 	ldw	r16,12(r16)
    5b3c:	8180cb26 	beq	r16,r6,5e6c <_malloc_r+0x590>
    5b40:	80800117 	ldw	r2,4(r16)
    5b44:	1204703a 	and	r2,r2,r8
    5b48:	1449c83a 	sub	r4,r2,r17
    5b4c:	393ff90e 	bge	r7,r4,5b34 <__alt_mem_Flash_flash_data+0xf4005b34>
    5b50:	80800317 	ldw	r2,12(r16)
    5b54:	80c00217 	ldw	r3,8(r16)
    5b58:	89400054 	ori	r5,r17,1
    5b5c:	81400115 	stw	r5,4(r16)
    5b60:	18800315 	stw	r2,12(r3)
    5b64:	10c00215 	stw	r3,8(r2)
    5b68:	8463883a 	add	r17,r16,r17
    5b6c:	9c400515 	stw	r17,20(r19)
    5b70:	9c400415 	stw	r17,16(r19)
    5b74:	20800054 	ori	r2,r4,1
    5b78:	88800115 	stw	r2,4(r17)
    5b7c:	8a400315 	stw	r9,12(r17)
    5b80:	8a400215 	stw	r9,8(r17)
    5b84:	8923883a 	add	r17,r17,r4
    5b88:	89000015 	stw	r4,0(r17)
    5b8c:	9009883a 	mov	r4,r18
    5b90:	000d9d00 	call	d9d0 <__malloc_unlock>
    5b94:	80800204 	addi	r2,r16,8
    5b98:	003f7d06 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5b9c:	00800304 	movi	r2,12
    5ba0:	90800015 	stw	r2,0(r18)
    5ba4:	0005883a 	mov	r2,zero
    5ba8:	003f7906 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5bac:	01401f84 	movi	r5,126
    5bb0:	01c00fc4 	movi	r7,63
    5bb4:	003f8d06 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    5bb8:	81000317 	ldw	r4,12(r16)
    5bbc:	003f6a06 	br	5968 <__alt_mem_Flash_flash_data+0xf4005968>
    5bc0:	81c5883a 	add	r2,r16,r7
    5bc4:	10c00117 	ldw	r3,4(r2)
    5bc8:	9009883a 	mov	r4,r18
    5bcc:	18c00054 	ori	r3,r3,1
    5bd0:	10c00115 	stw	r3,4(r2)
    5bd4:	000d9d00 	call	d9d0 <__malloc_unlock>
    5bd8:	80800204 	addi	r2,r16,8
    5bdc:	003f6c06 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5be0:	9c000217 	ldw	r16,8(r19)
    5be4:	00bfff04 	movi	r2,-4
    5be8:	85800117 	ldw	r22,4(r16)
    5bec:	b0ac703a 	and	r22,r22,r2
    5bf0:	b4400336 	bltu	r22,r17,5c00 <_malloc_r+0x324>
    5bf4:	b445c83a 	sub	r2,r22,r17
    5bf8:	00c003c4 	movi	r3,15
    5bfc:	18805d16 	blt	r3,r2,5d74 <_malloc_r+0x498>
    5c00:	05c000b4 	movhi	r23,2
    5c04:	008000b4 	movhi	r2,2
    5c08:	bdf10504 	addi	r23,r23,-15340
    5c0c:	10b9b004 	addi	r2,r2,-6464
    5c10:	15400017 	ldw	r21,0(r2)
    5c14:	b9000017 	ldw	r4,0(r23)
    5c18:	00ffffc4 	movi	r3,-1
    5c1c:	858d883a 	add	r6,r16,r22
    5c20:	8d6b883a 	add	r21,r17,r21
    5c24:	20c0e426 	beq	r4,r3,5fb8 <_malloc_r+0x6dc>
    5c28:	ad4403c4 	addi	r21,r21,4111
    5c2c:	00fc0004 	movi	r3,-4096
    5c30:	a8ea703a 	and	r21,r21,r3
    5c34:	9009883a 	mov	r4,r18
    5c38:	a80b883a 	mov	r5,r21
    5c3c:	d9800015 	stw	r6,0(sp)
    5c40:	0007c0c0 	call	7c0c <_sbrk_r>
    5c44:	00ffffc4 	movi	r3,-1
    5c48:	1029883a 	mov	r20,r2
    5c4c:	d9800017 	ldw	r6,0(sp)
    5c50:	10c0a426 	beq	r2,r3,5ee4 <_malloc_r+0x608>
    5c54:	1180a236 	bltu	r2,r6,5ee0 <_malloc_r+0x604>
    5c58:	070000b4 	movhi	fp,2
    5c5c:	e739d304 	addi	fp,fp,-6324
    5c60:	e0c00017 	ldw	r3,0(fp)
    5c64:	a8c7883a 	add	r3,r21,r3
    5c68:	e0c00015 	stw	r3,0(fp)
    5c6c:	3500da26 	beq	r6,r20,5fd8 <_malloc_r+0x6fc>
    5c70:	b9000017 	ldw	r4,0(r23)
    5c74:	00bfffc4 	movi	r2,-1
    5c78:	2080e426 	beq	r4,r2,600c <_malloc_r+0x730>
    5c7c:	a185c83a 	sub	r2,r20,r6
    5c80:	1885883a 	add	r2,r3,r2
    5c84:	e0800015 	stw	r2,0(fp)
    5c88:	a0c001cc 	andi	r3,r20,7
    5c8c:	1800b526 	beq	r3,zero,5f64 <_malloc_r+0x688>
    5c90:	a0e9c83a 	sub	r20,r20,r3
    5c94:	00840204 	movi	r2,4104
    5c98:	a5000204 	addi	r20,r20,8
    5c9c:	10c7c83a 	sub	r3,r2,r3
    5ca0:	a545883a 	add	r2,r20,r21
    5ca4:	1083ffcc 	andi	r2,r2,4095
    5ca8:	18abc83a 	sub	r21,r3,r2
    5cac:	9009883a 	mov	r4,r18
    5cb0:	a80b883a 	mov	r5,r21
    5cb4:	0007c0c0 	call	7c0c <_sbrk_r>
    5cb8:	00ffffc4 	movi	r3,-1
    5cbc:	10c0d026 	beq	r2,r3,6000 <_malloc_r+0x724>
    5cc0:	1507c83a 	sub	r3,r2,r20
    5cc4:	a8c7883a 	add	r3,r21,r3
    5cc8:	18c00054 	ori	r3,r3,1
    5ccc:	e0800017 	ldw	r2,0(fp)
    5cd0:	9d000215 	stw	r20,8(r19)
    5cd4:	a0c00115 	stw	r3,4(r20)
    5cd8:	a887883a 	add	r3,r21,r2
    5cdc:	e0c00015 	stw	r3,0(fp)
    5ce0:	84c00e26 	beq	r16,r19,5d1c <_malloc_r+0x440>
    5ce4:	018003c4 	movi	r6,15
    5ce8:	3580a02e 	bgeu	r6,r22,5f6c <_malloc_r+0x690>
    5cec:	81400117 	ldw	r5,4(r16)
    5cf0:	013ffe04 	movi	r4,-8
    5cf4:	b0bffd04 	addi	r2,r22,-12
    5cf8:	1104703a 	and	r2,r2,r4
    5cfc:	2900004c 	andi	r4,r5,1
    5d00:	1108b03a 	or	r4,r2,r4
    5d04:	81000115 	stw	r4,4(r16)
    5d08:	01400144 	movi	r5,5
    5d0c:	8089883a 	add	r4,r16,r2
    5d10:	21400115 	stw	r5,4(r4)
    5d14:	21400215 	stw	r5,8(r4)
    5d18:	3080c036 	bltu	r6,r2,601c <_malloc_r+0x740>
    5d1c:	008000b4 	movhi	r2,2
    5d20:	10b9af04 	addi	r2,r2,-6468
    5d24:	11000017 	ldw	r4,0(r2)
    5d28:	20c0012e 	bgeu	r4,r3,5d30 <_malloc_r+0x454>
    5d2c:	10c00015 	stw	r3,0(r2)
    5d30:	008000b4 	movhi	r2,2
    5d34:	10b9ae04 	addi	r2,r2,-6472
    5d38:	11000017 	ldw	r4,0(r2)
    5d3c:	9c000217 	ldw	r16,8(r19)
    5d40:	20c0012e 	bgeu	r4,r3,5d48 <_malloc_r+0x46c>
    5d44:	10c00015 	stw	r3,0(r2)
    5d48:	80c00117 	ldw	r3,4(r16)
    5d4c:	00bfff04 	movi	r2,-4
    5d50:	1886703a 	and	r3,r3,r2
    5d54:	1c45c83a 	sub	r2,r3,r17
    5d58:	1c400236 	bltu	r3,r17,5d64 <_malloc_r+0x488>
    5d5c:	00c003c4 	movi	r3,15
    5d60:	18800416 	blt	r3,r2,5d74 <_malloc_r+0x498>
    5d64:	9009883a 	mov	r4,r18
    5d68:	000d9d00 	call	d9d0 <__malloc_unlock>
    5d6c:	0005883a 	mov	r2,zero
    5d70:	003f0706 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5d74:	88c00054 	ori	r3,r17,1
    5d78:	80c00115 	stw	r3,4(r16)
    5d7c:	8463883a 	add	r17,r16,r17
    5d80:	10800054 	ori	r2,r2,1
    5d84:	9c400215 	stw	r17,8(r19)
    5d88:	88800115 	stw	r2,4(r17)
    5d8c:	9009883a 	mov	r4,r18
    5d90:	000d9d00 	call	d9d0 <__malloc_unlock>
    5d94:	80800204 	addi	r2,r16,8
    5d98:	003efd06 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5d9c:	00800504 	movi	r2,20
    5da0:	10c0482e 	bgeu	r2,r3,5ec4 <_malloc_r+0x5e8>
    5da4:	00801504 	movi	r2,84
    5da8:	10c06836 	bltu	r2,r3,5f4c <_malloc_r+0x670>
    5dac:	8806d33a 	srli	r3,r17,12
    5db0:	19c01b84 	addi	r7,r3,110
    5db4:	39cb883a 	add	r5,r7,r7
    5db8:	003f0c06 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    5dbc:	3804d27a 	srli	r2,r7,9
    5dc0:	01000104 	movi	r4,4
    5dc4:	2080422e 	bgeu	r4,r2,5ed0 <_malloc_r+0x5f4>
    5dc8:	01000504 	movi	r4,20
    5dcc:	20807c36 	bltu	r4,r2,5fc0 <_malloc_r+0x6e4>
    5dd0:	110016c4 	addi	r4,r2,91
    5dd4:	210b883a 	add	r5,r4,r4
    5dd8:	294b883a 	add	r5,r5,r5
    5ddc:	294b883a 	add	r5,r5,r5
    5de0:	994b883a 	add	r5,r19,r5
    5de4:	28800217 	ldw	r2,8(r5)
    5de8:	020000b4 	movhi	r8,2
    5dec:	4229e404 	addi	r8,r8,-22640
    5df0:	11406326 	beq	r2,r5,5f80 <_malloc_r+0x6a4>
    5df4:	01bfff04 	movi	r6,-4
    5df8:	11000117 	ldw	r4,4(r2)
    5dfc:	2188703a 	and	r4,r4,r6
    5e00:	3900022e 	bgeu	r7,r4,5e0c <_malloc_r+0x530>
    5e04:	10800217 	ldw	r2,8(r2)
    5e08:	28bffb1e 	bne	r5,r2,5df8 <__alt_mem_Flash_flash_data+0xf4005df8>
    5e0c:	11800317 	ldw	r6,12(r2)
    5e10:	99000117 	ldw	r4,4(r19)
    5e14:	81800315 	stw	r6,12(r16)
    5e18:	80800215 	stw	r2,8(r16)
    5e1c:	34000215 	stw	r16,8(r6)
    5e20:	14000315 	stw	r16,12(r2)
    5e24:	003f2706 	br	5ac4 <__alt_mem_Flash_flash_data+0xf4005ac4>
    5e28:	88c00054 	ori	r3,r17,1
    5e2c:	80c00115 	stw	r3,4(r16)
    5e30:	8463883a 	add	r17,r16,r17
    5e34:	34400515 	stw	r17,20(r6)
    5e38:	34400415 	stw	r17,16(r6)
    5e3c:	10c00054 	ori	r3,r2,1
    5e40:	8a400315 	stw	r9,12(r17)
    5e44:	8a400215 	stw	r9,8(r17)
    5e48:	88c00115 	stw	r3,4(r17)
    5e4c:	88a3883a 	add	r17,r17,r2
    5e50:	88800015 	stw	r2,0(r17)
    5e54:	9009883a 	mov	r4,r18
    5e58:	000d9d00 	call	d9d0 <__malloc_unlock>
    5e5c:	80800204 	addi	r2,r16,8
    5e60:	003ecb06 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5e64:	31000117 	ldw	r4,4(r6)
    5e68:	003f1606 	br	5ac4 <__alt_mem_Flash_flash_data+0xf4005ac4>
    5e6c:	63000044 	addi	r12,r12,1
    5e70:	608000cc 	andi	r2,r12,3
    5e74:	5ac00204 	addi	r11,r11,8
    5e78:	103f2a1e 	bne	r2,zero,5b24 <__alt_mem_Flash_flash_data+0xf4005b24>
    5e7c:	00002106 	br	5f04 <_malloc_r+0x628>
    5e80:	80800204 	addi	r2,r16,8
    5e84:	84000517 	ldw	r16,20(r16)
    5e88:	143eb31e 	bne	r2,r16,5958 <__alt_mem_Flash_flash_data+0xf4005958>
    5e8c:	18c00084 	addi	r3,r3,2
    5e90:	003eec06 	br	5a44 <__alt_mem_Flash_flash_data+0xf4005a44>
    5e94:	8085883a 	add	r2,r16,r2
    5e98:	10c00117 	ldw	r3,4(r2)
    5e9c:	81000317 	ldw	r4,12(r16)
    5ea0:	81400217 	ldw	r5,8(r16)
    5ea4:	18c00054 	ori	r3,r3,1
    5ea8:	10c00115 	stw	r3,4(r2)
    5eac:	29000315 	stw	r4,12(r5)
    5eb0:	21400215 	stw	r5,8(r4)
    5eb4:	9009883a 	mov	r4,r18
    5eb8:	000d9d00 	call	d9d0 <__malloc_unlock>
    5ebc:	80800204 	addi	r2,r16,8
    5ec0:	003eb306 	br	5990 <__alt_mem_Flash_flash_data+0xf4005990>
    5ec4:	19c016c4 	addi	r7,r3,91
    5ec8:	39cb883a 	add	r5,r7,r7
    5ecc:	003ec706 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    5ed0:	3804d1ba 	srli	r2,r7,6
    5ed4:	11000e04 	addi	r4,r2,56
    5ed8:	210b883a 	add	r5,r4,r4
    5edc:	003fbe06 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    5ee0:	84ff5d26 	beq	r16,r19,5c58 <__alt_mem_Flash_flash_data+0xf4005c58>
    5ee4:	9c000217 	ldw	r16,8(r19)
    5ee8:	00bfff04 	movi	r2,-4
    5eec:	80c00117 	ldw	r3,4(r16)
    5ef0:	1886703a 	and	r3,r3,r2
    5ef4:	003f9706 	br	5d54 <__alt_mem_Flash_flash_data+0xf4005d54>
    5ef8:	52800017 	ldw	r10,0(r10)
    5efc:	18ffffc4 	addi	r3,r3,-1
    5f00:	50805c1e 	bne	r10,r2,6074 <_malloc_r+0x798>
    5f04:	190000cc 	andi	r4,r3,3
    5f08:	50bffe04 	addi	r2,r10,-8
    5f0c:	203ffa1e 	bne	r4,zero,5ef8 <__alt_mem_Flash_flash_data+0xf4005ef8>
    5f10:	98800117 	ldw	r2,4(r19)
    5f14:	0146303a 	nor	r3,zero,r5
    5f18:	1884703a 	and	r2,r3,r2
    5f1c:	98800115 	stw	r2,4(r19)
    5f20:	294b883a 	add	r5,r5,r5
    5f24:	117f2e36 	bltu	r2,r5,5be0 <__alt_mem_Flash_flash_data+0xf4005be0>
    5f28:	283f2d26 	beq	r5,zero,5be0 <__alt_mem_Flash_flash_data+0xf4005be0>
    5f2c:	1146703a 	and	r3,r2,r5
    5f30:	1800521e 	bne	r3,zero,607c <_malloc_r+0x7a0>
    5f34:	6007883a 	mov	r3,r12
    5f38:	294b883a 	add	r5,r5,r5
    5f3c:	1148703a 	and	r4,r2,r5
    5f40:	18c00104 	addi	r3,r3,4
    5f44:	203ffc26 	beq	r4,zero,5f38 <__alt_mem_Flash_flash_data+0xf4005f38>
    5f48:	003ef006 	br	5b0c <__alt_mem_Flash_flash_data+0xf4005b0c>
    5f4c:	00805504 	movi	r2,340
    5f50:	10c01336 	bltu	r2,r3,5fa0 <_malloc_r+0x6c4>
    5f54:	8806d3fa 	srli	r3,r17,15
    5f58:	19c01dc4 	addi	r7,r3,119
    5f5c:	39cb883a 	add	r5,r7,r7
    5f60:	003ea206 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    5f64:	00c40004 	movi	r3,4096
    5f68:	003f4d06 	br	5ca0 <__alt_mem_Flash_flash_data+0xf4005ca0>
    5f6c:	00800044 	movi	r2,1
    5f70:	a0800115 	stw	r2,4(r20)
    5f74:	a021883a 	mov	r16,r20
    5f78:	0007883a 	mov	r3,zero
    5f7c:	003f7506 	br	5d54 <__alt_mem_Flash_flash_data+0xf4005d54>
    5f80:	200bd0ba 	srai	r5,r4,2
    5f84:	01800044 	movi	r6,1
    5f88:	41000117 	ldw	r4,4(r8)
    5f8c:	314a983a 	sll	r5,r6,r5
    5f90:	100d883a 	mov	r6,r2
    5f94:	2908b03a 	or	r4,r5,r4
    5f98:	41000115 	stw	r4,4(r8)
    5f9c:	003f9d06 	br	5e14 <__alt_mem_Flash_flash_data+0xf4005e14>
    5fa0:	00815504 	movi	r2,1364
    5fa4:	10c01336 	bltu	r2,r3,5ff4 <_malloc_r+0x718>
    5fa8:	8806d4ba 	srli	r3,r17,18
    5fac:	19c01f04 	addi	r7,r3,124
    5fb0:	39cb883a 	add	r5,r7,r7
    5fb4:	003e8d06 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    5fb8:	ad400404 	addi	r21,r21,16
    5fbc:	003f1d06 	br	5c34 <__alt_mem_Flash_flash_data+0xf4005c34>
    5fc0:	01001504 	movi	r4,84
    5fc4:	20801c36 	bltu	r4,r2,6038 <_malloc_r+0x75c>
    5fc8:	3804d33a 	srli	r2,r7,12
    5fcc:	11001b84 	addi	r4,r2,110
    5fd0:	210b883a 	add	r5,r4,r4
    5fd4:	003f8006 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    5fd8:	3083ffcc 	andi	r2,r6,4095
    5fdc:	103f241e 	bne	r2,zero,5c70 <__alt_mem_Flash_flash_data+0xf4005c70>
    5fe0:	99000217 	ldw	r4,8(r19)
    5fe4:	ad85883a 	add	r2,r21,r22
    5fe8:	10800054 	ori	r2,r2,1
    5fec:	20800115 	stw	r2,4(r4)
    5ff0:	003f4a06 	br	5d1c <__alt_mem_Flash_flash_data+0xf4005d1c>
    5ff4:	01403f04 	movi	r5,252
    5ff8:	01c01f84 	movi	r7,126
    5ffc:	003e7b06 	br	59ec <__alt_mem_Flash_flash_data+0xf40059ec>
    6000:	00c00044 	movi	r3,1
    6004:	002b883a 	mov	r21,zero
    6008:	003f3006 	br	5ccc <__alt_mem_Flash_flash_data+0xf4005ccc>
    600c:	008000b4 	movhi	r2,2
    6010:	10b10504 	addi	r2,r2,-15340
    6014:	15000015 	stw	r20,0(r2)
    6018:	003f1b06 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    601c:	9009883a 	mov	r4,r18
    6020:	81400204 	addi	r5,r16,8
    6024:	0004d0c0 	call	4d0c <_free_r>
    6028:	008000b4 	movhi	r2,2
    602c:	10b9d304 	addi	r2,r2,-6324
    6030:	10c00017 	ldw	r3,0(r2)
    6034:	003f3906 	br	5d1c <__alt_mem_Flash_flash_data+0xf4005d1c>
    6038:	01005504 	movi	r4,340
    603c:	20800436 	bltu	r4,r2,6050 <_malloc_r+0x774>
    6040:	3804d3fa 	srli	r2,r7,15
    6044:	11001dc4 	addi	r4,r2,119
    6048:	210b883a 	add	r5,r4,r4
    604c:	003f6206 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    6050:	01015504 	movi	r4,1364
    6054:	20800436 	bltu	r4,r2,6068 <_malloc_r+0x78c>
    6058:	3804d4ba 	srli	r2,r7,18
    605c:	11001f04 	addi	r4,r2,124
    6060:	210b883a 	add	r5,r4,r4
    6064:	003f5c06 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    6068:	01403f04 	movi	r5,252
    606c:	01001f84 	movi	r4,126
    6070:	003f5906 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    6074:	98800117 	ldw	r2,4(r19)
    6078:	003fa906 	br	5f20 <__alt_mem_Flash_flash_data+0xf4005f20>
    607c:	6007883a 	mov	r3,r12
    6080:	003ea206 	br	5b0c <__alt_mem_Flash_flash_data+0xf4005b0c>

00006084 <memchr>:
    6084:	208000cc 	andi	r2,r4,3
    6088:	280f883a 	mov	r7,r5
    608c:	10003526 	beq	r2,zero,6164 <memchr+0xe0>
    6090:	30bfffc4 	addi	r2,r6,-1
    6094:	30001b26 	beq	r6,zero,6104 <memchr+0x80>
    6098:	21800003 	ldbu	r6,0(r4)
    609c:	28c03fcc 	andi	r3,r5,255
    60a0:	30c01a26 	beq	r6,r3,610c <memchr+0x88>
    60a4:	180d883a 	mov	r6,r3
    60a8:	00000406 	br	60bc <memchr+0x38>
    60ac:	10001526 	beq	r2,zero,6104 <memchr+0x80>
    60b0:	20c00003 	ldbu	r3,0(r4)
    60b4:	10bfffc4 	addi	r2,r2,-1
    60b8:	19801426 	beq	r3,r6,610c <memchr+0x88>
    60bc:	21000044 	addi	r4,r4,1
    60c0:	20c000cc 	andi	r3,r4,3
    60c4:	183ff91e 	bne	r3,zero,60ac <__alt_mem_Flash_flash_data+0xf40060ac>
    60c8:	024000c4 	movi	r9,3
    60cc:	48801136 	bltu	r9,r2,6114 <memchr+0x90>
    60d0:	10000c26 	beq	r2,zero,6104 <memchr+0x80>
    60d4:	20c00003 	ldbu	r3,0(r4)
    60d8:	29403fcc 	andi	r5,r5,255
    60dc:	19400b26 	beq	r3,r5,610c <memchr+0x88>
    60e0:	20c00044 	addi	r3,r4,1
    60e4:	2085883a 	add	r2,r4,r2
    60e8:	39803fcc 	andi	r6,r7,255
    60ec:	00000306 	br	60fc <memchr+0x78>
    60f0:	18c00044 	addi	r3,r3,1
    60f4:	197fffc3 	ldbu	r5,-1(r3)
    60f8:	29800426 	beq	r5,r6,610c <memchr+0x88>
    60fc:	1809883a 	mov	r4,r3
    6100:	18bffb1e 	bne	r3,r2,60f0 <__alt_mem_Flash_flash_data+0xf40060f0>
    6104:	0005883a 	mov	r2,zero
    6108:	f800283a 	ret
    610c:	2005883a 	mov	r2,r4
    6110:	f800283a 	ret
    6114:	28c03fcc 	andi	r3,r5,255
    6118:	1810923a 	slli	r8,r3,8
    611c:	02ffbff4 	movhi	r11,65279
    6120:	02a02074 	movhi	r10,32897
    6124:	40c6b03a 	or	r3,r8,r3
    6128:	1810943a 	slli	r8,r3,16
    612c:	5affbfc4 	addi	r11,r11,-257
    6130:	52a02004 	addi	r10,r10,-32640
    6134:	40d0b03a 	or	r8,r8,r3
    6138:	20c00017 	ldw	r3,0(r4)
    613c:	40c6f03a 	xor	r3,r8,r3
    6140:	1acd883a 	add	r6,r3,r11
    6144:	00c6303a 	nor	r3,zero,r3
    6148:	30c6703a 	and	r3,r6,r3
    614c:	1a86703a 	and	r3,r3,r10
    6150:	183fdf1e 	bne	r3,zero,60d0 <__alt_mem_Flash_flash_data+0xf40060d0>
    6154:	10bfff04 	addi	r2,r2,-4
    6158:	21000104 	addi	r4,r4,4
    615c:	48bff636 	bltu	r9,r2,6138 <__alt_mem_Flash_flash_data+0xf4006138>
    6160:	003fdb06 	br	60d0 <__alt_mem_Flash_flash_data+0xf40060d0>
    6164:	3005883a 	mov	r2,r6
    6168:	003fd706 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>

0000616c <memcpy>:
    616c:	deffff04 	addi	sp,sp,-4
    6170:	dc000015 	stw	r16,0(sp)
    6174:	00c003c4 	movi	r3,15
    6178:	2005883a 	mov	r2,r4
    617c:	1980432e 	bgeu	r3,r6,628c <memcpy+0x120>
    6180:	2146b03a 	or	r3,r4,r5
    6184:	18c000cc 	andi	r3,r3,3
    6188:	1800421e 	bne	r3,zero,6294 <memcpy+0x128>
    618c:	343ffc04 	addi	r16,r6,-16
    6190:	8020d13a 	srli	r16,r16,4
    6194:	28c00104 	addi	r3,r5,4
    6198:	23400104 	addi	r13,r4,4
    619c:	801e913a 	slli	r15,r16,4
    61a0:	2b000204 	addi	r12,r5,8
    61a4:	22c00204 	addi	r11,r4,8
    61a8:	7bc00504 	addi	r15,r15,20
    61ac:	2a800304 	addi	r10,r5,12
    61b0:	22400304 	addi	r9,r4,12
    61b4:	2bdf883a 	add	r15,r5,r15
    61b8:	2811883a 	mov	r8,r5
    61bc:	200f883a 	mov	r7,r4
    61c0:	41000017 	ldw	r4,0(r8)
    61c4:	39c00404 	addi	r7,r7,16
    61c8:	18c00404 	addi	r3,r3,16
    61cc:	393ffc15 	stw	r4,-16(r7)
    61d0:	1bbffc17 	ldw	r14,-16(r3)
    61d4:	6b400404 	addi	r13,r13,16
    61d8:	5ac00404 	addi	r11,r11,16
    61dc:	6bbffc15 	stw	r14,-16(r13)
    61e0:	63800017 	ldw	r14,0(r12)
    61e4:	4a400404 	addi	r9,r9,16
    61e8:	42000404 	addi	r8,r8,16
    61ec:	5bbffc15 	stw	r14,-16(r11)
    61f0:	53800017 	ldw	r14,0(r10)
    61f4:	63000404 	addi	r12,r12,16
    61f8:	52800404 	addi	r10,r10,16
    61fc:	4bbffc15 	stw	r14,-16(r9)
    6200:	1bffef1e 	bne	r3,r15,61c0 <__alt_mem_Flash_flash_data+0xf40061c0>
    6204:	81c00044 	addi	r7,r16,1
    6208:	380e913a 	slli	r7,r7,4
    620c:	310003cc 	andi	r4,r6,15
    6210:	02c000c4 	movi	r11,3
    6214:	11c7883a 	add	r3,r2,r7
    6218:	29cb883a 	add	r5,r5,r7
    621c:	59001f2e 	bgeu	r11,r4,629c <memcpy+0x130>
    6220:	1813883a 	mov	r9,r3
    6224:	2811883a 	mov	r8,r5
    6228:	200f883a 	mov	r7,r4
    622c:	42800017 	ldw	r10,0(r8)
    6230:	4a400104 	addi	r9,r9,4
    6234:	39ffff04 	addi	r7,r7,-4
    6238:	4abfff15 	stw	r10,-4(r9)
    623c:	42000104 	addi	r8,r8,4
    6240:	59fffa36 	bltu	r11,r7,622c <__alt_mem_Flash_flash_data+0xf400622c>
    6244:	213fff04 	addi	r4,r4,-4
    6248:	2008d0ba 	srli	r4,r4,2
    624c:	318000cc 	andi	r6,r6,3
    6250:	21000044 	addi	r4,r4,1
    6254:	2109883a 	add	r4,r4,r4
    6258:	2109883a 	add	r4,r4,r4
    625c:	1907883a 	add	r3,r3,r4
    6260:	290b883a 	add	r5,r5,r4
    6264:	30000626 	beq	r6,zero,6280 <memcpy+0x114>
    6268:	198d883a 	add	r6,r3,r6
    626c:	29c00003 	ldbu	r7,0(r5)
    6270:	18c00044 	addi	r3,r3,1
    6274:	29400044 	addi	r5,r5,1
    6278:	19ffffc5 	stb	r7,-1(r3)
    627c:	19bffb1e 	bne	r3,r6,626c <__alt_mem_Flash_flash_data+0xf400626c>
    6280:	dc000017 	ldw	r16,0(sp)
    6284:	dec00104 	addi	sp,sp,4
    6288:	f800283a 	ret
    628c:	2007883a 	mov	r3,r4
    6290:	003ff406 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    6294:	2007883a 	mov	r3,r4
    6298:	003ff306 	br	6268 <__alt_mem_Flash_flash_data+0xf4006268>
    629c:	200d883a 	mov	r6,r4
    62a0:	003ff006 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>

000062a4 <memmove>:
    62a4:	2005883a 	mov	r2,r4
    62a8:	29000b2e 	bgeu	r5,r4,62d8 <memmove+0x34>
    62ac:	298f883a 	add	r7,r5,r6
    62b0:	21c0092e 	bgeu	r4,r7,62d8 <memmove+0x34>
    62b4:	2187883a 	add	r3,r4,r6
    62b8:	198bc83a 	sub	r5,r3,r6
    62bc:	30004b26 	beq	r6,zero,63ec <memmove+0x148>
    62c0:	39ffffc4 	addi	r7,r7,-1
    62c4:	39000003 	ldbu	r4,0(r7)
    62c8:	18ffffc4 	addi	r3,r3,-1
    62cc:	19000005 	stb	r4,0(r3)
    62d0:	197ffb1e 	bne	r3,r5,62c0 <__alt_mem_Flash_flash_data+0xf40062c0>
    62d4:	f800283a 	ret
    62d8:	00c003c4 	movi	r3,15
    62dc:	1980412e 	bgeu	r3,r6,63e4 <memmove+0x140>
    62e0:	1146b03a 	or	r3,r2,r5
    62e4:	18c000cc 	andi	r3,r3,3
    62e8:	1800411e 	bne	r3,zero,63f0 <memmove+0x14c>
    62ec:	33fffc04 	addi	r15,r6,-16
    62f0:	781ed13a 	srli	r15,r15,4
    62f4:	28c00104 	addi	r3,r5,4
    62f8:	13400104 	addi	r13,r2,4
    62fc:	781c913a 	slli	r14,r15,4
    6300:	2b000204 	addi	r12,r5,8
    6304:	12c00204 	addi	r11,r2,8
    6308:	73800504 	addi	r14,r14,20
    630c:	2a800304 	addi	r10,r5,12
    6310:	12400304 	addi	r9,r2,12
    6314:	2b9d883a 	add	r14,r5,r14
    6318:	2811883a 	mov	r8,r5
    631c:	100f883a 	mov	r7,r2
    6320:	41000017 	ldw	r4,0(r8)
    6324:	39c00404 	addi	r7,r7,16
    6328:	18c00404 	addi	r3,r3,16
    632c:	393ffc15 	stw	r4,-16(r7)
    6330:	193ffc17 	ldw	r4,-16(r3)
    6334:	6b400404 	addi	r13,r13,16
    6338:	5ac00404 	addi	r11,r11,16
    633c:	693ffc15 	stw	r4,-16(r13)
    6340:	61000017 	ldw	r4,0(r12)
    6344:	4a400404 	addi	r9,r9,16
    6348:	42000404 	addi	r8,r8,16
    634c:	593ffc15 	stw	r4,-16(r11)
    6350:	51000017 	ldw	r4,0(r10)
    6354:	63000404 	addi	r12,r12,16
    6358:	52800404 	addi	r10,r10,16
    635c:	493ffc15 	stw	r4,-16(r9)
    6360:	1bbfef1e 	bne	r3,r14,6320 <__alt_mem_Flash_flash_data+0xf4006320>
    6364:	79000044 	addi	r4,r15,1
    6368:	2008913a 	slli	r4,r4,4
    636c:	328003cc 	andi	r10,r6,15
    6370:	02c000c4 	movi	r11,3
    6374:	1107883a 	add	r3,r2,r4
    6378:	290b883a 	add	r5,r5,r4
    637c:	5a801e2e 	bgeu	r11,r10,63f8 <memmove+0x154>
    6380:	1813883a 	mov	r9,r3
    6384:	2811883a 	mov	r8,r5
    6388:	500f883a 	mov	r7,r10
    638c:	41000017 	ldw	r4,0(r8)
    6390:	4a400104 	addi	r9,r9,4
    6394:	39ffff04 	addi	r7,r7,-4
    6398:	493fff15 	stw	r4,-4(r9)
    639c:	42000104 	addi	r8,r8,4
    63a0:	59fffa36 	bltu	r11,r7,638c <__alt_mem_Flash_flash_data+0xf400638c>
    63a4:	513fff04 	addi	r4,r10,-4
    63a8:	2008d0ba 	srli	r4,r4,2
    63ac:	318000cc 	andi	r6,r6,3
    63b0:	21000044 	addi	r4,r4,1
    63b4:	2109883a 	add	r4,r4,r4
    63b8:	2109883a 	add	r4,r4,r4
    63bc:	1907883a 	add	r3,r3,r4
    63c0:	290b883a 	add	r5,r5,r4
    63c4:	30000926 	beq	r6,zero,63ec <memmove+0x148>
    63c8:	198d883a 	add	r6,r3,r6
    63cc:	29c00003 	ldbu	r7,0(r5)
    63d0:	18c00044 	addi	r3,r3,1
    63d4:	29400044 	addi	r5,r5,1
    63d8:	19ffffc5 	stb	r7,-1(r3)
    63dc:	19bffb1e 	bne	r3,r6,63cc <__alt_mem_Flash_flash_data+0xf40063cc>
    63e0:	f800283a 	ret
    63e4:	1007883a 	mov	r3,r2
    63e8:	003ff606 	br	63c4 <__alt_mem_Flash_flash_data+0xf40063c4>
    63ec:	f800283a 	ret
    63f0:	1007883a 	mov	r3,r2
    63f4:	003ff406 	br	63c8 <__alt_mem_Flash_flash_data+0xf40063c8>
    63f8:	500d883a 	mov	r6,r10
    63fc:	003ff106 	br	63c4 <__alt_mem_Flash_flash_data+0xf40063c4>

00006400 <memset>:
    6400:	20c000cc 	andi	r3,r4,3
    6404:	2005883a 	mov	r2,r4
    6408:	18004326 	beq	r3,zero,6518 <memset+0x118>
    640c:	31ffffc4 	addi	r7,r6,-1
    6410:	30004026 	beq	r6,zero,6514 <memset+0x114>
    6414:	2813883a 	mov	r9,r5
    6418:	200d883a 	mov	r6,r4
    641c:	2007883a 	mov	r3,r4
    6420:	00000406 	br	6434 <memset+0x34>
    6424:	3a3fffc4 	addi	r8,r7,-1
    6428:	31800044 	addi	r6,r6,1
    642c:	38003926 	beq	r7,zero,6514 <memset+0x114>
    6430:	400f883a 	mov	r7,r8
    6434:	18c00044 	addi	r3,r3,1
    6438:	32400005 	stb	r9,0(r6)
    643c:	1a0000cc 	andi	r8,r3,3
    6440:	403ff81e 	bne	r8,zero,6424 <__alt_mem_Flash_flash_data+0xf4006424>
    6444:	010000c4 	movi	r4,3
    6448:	21c02d2e 	bgeu	r4,r7,6500 <memset+0x100>
    644c:	29803fcc 	andi	r6,r5,255
    6450:	3008923a 	slli	r4,r6,8
    6454:	218cb03a 	or	r6,r4,r6
    6458:	3008943a 	slli	r4,r6,16
    645c:	218cb03a 	or	r6,r4,r6
    6460:	010003c4 	movi	r4,15
    6464:	21c0182e 	bgeu	r4,r7,64c8 <memset+0xc8>
    6468:	3b3ffc04 	addi	r12,r7,-16
    646c:	6018d13a 	srli	r12,r12,4
    6470:	1a000104 	addi	r8,r3,4
    6474:	1ac00204 	addi	r11,r3,8
    6478:	6008913a 	slli	r4,r12,4
    647c:	1a800304 	addi	r10,r3,12
    6480:	1813883a 	mov	r9,r3
    6484:	21000504 	addi	r4,r4,20
    6488:	1909883a 	add	r4,r3,r4
    648c:	49800015 	stw	r6,0(r9)
    6490:	41800015 	stw	r6,0(r8)
    6494:	59800015 	stw	r6,0(r11)
    6498:	51800015 	stw	r6,0(r10)
    649c:	42000404 	addi	r8,r8,16
    64a0:	4a400404 	addi	r9,r9,16
    64a4:	5ac00404 	addi	r11,r11,16
    64a8:	52800404 	addi	r10,r10,16
    64ac:	413ff71e 	bne	r8,r4,648c <__alt_mem_Flash_flash_data+0xf400648c>
    64b0:	63000044 	addi	r12,r12,1
    64b4:	6018913a 	slli	r12,r12,4
    64b8:	39c003cc 	andi	r7,r7,15
    64bc:	010000c4 	movi	r4,3
    64c0:	1b07883a 	add	r3,r3,r12
    64c4:	21c00e2e 	bgeu	r4,r7,6500 <memset+0x100>
    64c8:	1813883a 	mov	r9,r3
    64cc:	3811883a 	mov	r8,r7
    64d0:	010000c4 	movi	r4,3
    64d4:	49800015 	stw	r6,0(r9)
    64d8:	423fff04 	addi	r8,r8,-4
    64dc:	4a400104 	addi	r9,r9,4
    64e0:	223ffc36 	bltu	r4,r8,64d4 <__alt_mem_Flash_flash_data+0xf40064d4>
    64e4:	393fff04 	addi	r4,r7,-4
    64e8:	2008d0ba 	srli	r4,r4,2
    64ec:	39c000cc 	andi	r7,r7,3
    64f0:	21000044 	addi	r4,r4,1
    64f4:	2109883a 	add	r4,r4,r4
    64f8:	2109883a 	add	r4,r4,r4
    64fc:	1907883a 	add	r3,r3,r4
    6500:	38000426 	beq	r7,zero,6514 <memset+0x114>
    6504:	19cf883a 	add	r7,r3,r7
    6508:	19400005 	stb	r5,0(r3)
    650c:	18c00044 	addi	r3,r3,1
    6510:	19fffd1e 	bne	r3,r7,6508 <__alt_mem_Flash_flash_data+0xf4006508>
    6514:	f800283a 	ret
    6518:	2007883a 	mov	r3,r4
    651c:	300f883a 	mov	r7,r6
    6520:	003fc806 	br	6444 <__alt_mem_Flash_flash_data+0xf4006444>

00006524 <_Balloc>:
    6524:	20801317 	ldw	r2,76(r4)
    6528:	defffc04 	addi	sp,sp,-16
    652c:	dc400115 	stw	r17,4(sp)
    6530:	dc000015 	stw	r16,0(sp)
    6534:	dfc00315 	stw	ra,12(sp)
    6538:	dc800215 	stw	r18,8(sp)
    653c:	2023883a 	mov	r17,r4
    6540:	2821883a 	mov	r16,r5
    6544:	10000f26 	beq	r2,zero,6584 <_Balloc+0x60>
    6548:	8407883a 	add	r3,r16,r16
    654c:	18c7883a 	add	r3,r3,r3
    6550:	10c7883a 	add	r3,r2,r3
    6554:	18800017 	ldw	r2,0(r3)
    6558:	10001126 	beq	r2,zero,65a0 <_Balloc+0x7c>
    655c:	11000017 	ldw	r4,0(r2)
    6560:	19000015 	stw	r4,0(r3)
    6564:	10000415 	stw	zero,16(r2)
    6568:	10000315 	stw	zero,12(r2)
    656c:	dfc00317 	ldw	ra,12(sp)
    6570:	dc800217 	ldw	r18,8(sp)
    6574:	dc400117 	ldw	r17,4(sp)
    6578:	dc000017 	ldw	r16,0(sp)
    657c:	dec00404 	addi	sp,sp,16
    6580:	f800283a 	ret
    6584:	01400104 	movi	r5,4
    6588:	01800844 	movi	r6,33
    658c:	00094640 	call	9464 <_calloc_r>
    6590:	88801315 	stw	r2,76(r17)
    6594:	103fec1e 	bne	r2,zero,6548 <__alt_mem_Flash_flash_data+0xf4006548>
    6598:	0005883a 	mov	r2,zero
    659c:	003ff306 	br	656c <__alt_mem_Flash_flash_data+0xf400656c>
    65a0:	01400044 	movi	r5,1
    65a4:	2c24983a 	sll	r18,r5,r16
    65a8:	8809883a 	mov	r4,r17
    65ac:	91800144 	addi	r6,r18,5
    65b0:	318d883a 	add	r6,r6,r6
    65b4:	318d883a 	add	r6,r6,r6
    65b8:	00094640 	call	9464 <_calloc_r>
    65bc:	103ff626 	beq	r2,zero,6598 <__alt_mem_Flash_flash_data+0xf4006598>
    65c0:	14000115 	stw	r16,4(r2)
    65c4:	14800215 	stw	r18,8(r2)
    65c8:	003fe606 	br	6564 <__alt_mem_Flash_flash_data+0xf4006564>

000065cc <_Bfree>:
    65cc:	28000826 	beq	r5,zero,65f0 <_Bfree+0x24>
    65d0:	28c00117 	ldw	r3,4(r5)
    65d4:	20801317 	ldw	r2,76(r4)
    65d8:	18c7883a 	add	r3,r3,r3
    65dc:	18c7883a 	add	r3,r3,r3
    65e0:	10c5883a 	add	r2,r2,r3
    65e4:	10c00017 	ldw	r3,0(r2)
    65e8:	28c00015 	stw	r3,0(r5)
    65ec:	11400015 	stw	r5,0(r2)
    65f0:	f800283a 	ret

000065f4 <__multadd>:
    65f4:	defffa04 	addi	sp,sp,-24
    65f8:	dc000115 	stw	r16,4(sp)
    65fc:	2c000417 	ldw	r16,16(r5)
    6600:	dc800315 	stw	r18,12(sp)
    6604:	dc400215 	stw	r17,8(sp)
    6608:	dfc00515 	stw	ra,20(sp)
    660c:	dcc00415 	stw	r19,16(sp)
    6610:	2823883a 	mov	r17,r5
    6614:	2025883a 	mov	r18,r4
    6618:	2a400504 	addi	r9,r5,20
    661c:	0015883a 	mov	r10,zero
    6620:	4a000017 	ldw	r8,0(r9)
    6624:	4a400104 	addi	r9,r9,4
    6628:	52800044 	addi	r10,r10,1
    662c:	40ffffcc 	andi	r3,r8,65535
    6630:	1987383a 	mul	r3,r3,r6
    6634:	4010d43a 	srli	r8,r8,16
    6638:	19cf883a 	add	r7,r3,r7
    663c:	4191383a 	mul	r8,r8,r6
    6640:	3816d43a 	srli	r11,r7,16
    6644:	38ffffcc 	andi	r3,r7,65535
    6648:	5a0f883a 	add	r7,r11,r8
    664c:	3810943a 	slli	r8,r7,16
    6650:	380ed43a 	srli	r7,r7,16
    6654:	40c7883a 	add	r3,r8,r3
    6658:	48ffff15 	stw	r3,-4(r9)
    665c:	543ff016 	blt	r10,r16,6620 <__alt_mem_Flash_flash_data+0xf4006620>
    6660:	38000926 	beq	r7,zero,6688 <__multadd+0x94>
    6664:	88800217 	ldw	r2,8(r17)
    6668:	80800f0e 	bge	r16,r2,66a8 <__multadd+0xb4>
    666c:	80800144 	addi	r2,r16,5
    6670:	1085883a 	add	r2,r2,r2
    6674:	1085883a 	add	r2,r2,r2
    6678:	8885883a 	add	r2,r17,r2
    667c:	11c00015 	stw	r7,0(r2)
    6680:	84000044 	addi	r16,r16,1
    6684:	8c000415 	stw	r16,16(r17)
    6688:	8805883a 	mov	r2,r17
    668c:	dfc00517 	ldw	ra,20(sp)
    6690:	dcc00417 	ldw	r19,16(sp)
    6694:	dc800317 	ldw	r18,12(sp)
    6698:	dc400217 	ldw	r17,8(sp)
    669c:	dc000117 	ldw	r16,4(sp)
    66a0:	dec00604 	addi	sp,sp,24
    66a4:	f800283a 	ret
    66a8:	89400117 	ldw	r5,4(r17)
    66ac:	9009883a 	mov	r4,r18
    66b0:	d9c00015 	stw	r7,0(sp)
    66b4:	29400044 	addi	r5,r5,1
    66b8:	00065240 	call	6524 <_Balloc>
    66bc:	89800417 	ldw	r6,16(r17)
    66c0:	11000304 	addi	r4,r2,12
    66c4:	89400304 	addi	r5,r17,12
    66c8:	31800084 	addi	r6,r6,2
    66cc:	318d883a 	add	r6,r6,r6
    66d0:	318d883a 	add	r6,r6,r6
    66d4:	1027883a 	mov	r19,r2
    66d8:	000616c0 	call	616c <memcpy>
    66dc:	d9c00017 	ldw	r7,0(sp)
    66e0:	88000a26 	beq	r17,zero,670c <__multadd+0x118>
    66e4:	89000117 	ldw	r4,4(r17)
    66e8:	90c01317 	ldw	r3,76(r18)
    66ec:	2109883a 	add	r4,r4,r4
    66f0:	2109883a 	add	r4,r4,r4
    66f4:	1907883a 	add	r3,r3,r4
    66f8:	18800017 	ldw	r2,0(r3)
    66fc:	88800015 	stw	r2,0(r17)
    6700:	1c400015 	stw	r17,0(r3)
    6704:	9823883a 	mov	r17,r19
    6708:	003fd806 	br	666c <__alt_mem_Flash_flash_data+0xf400666c>
    670c:	9823883a 	mov	r17,r19
    6710:	003fd606 	br	666c <__alt_mem_Flash_flash_data+0xf400666c>

00006714 <__s2b>:
    6714:	defff904 	addi	sp,sp,-28
    6718:	dc400115 	stw	r17,4(sp)
    671c:	dc000015 	stw	r16,0(sp)
    6720:	2023883a 	mov	r17,r4
    6724:	2821883a 	mov	r16,r5
    6728:	39000204 	addi	r4,r7,8
    672c:	01400244 	movi	r5,9
    6730:	dcc00315 	stw	r19,12(sp)
    6734:	dc800215 	stw	r18,8(sp)
    6738:	dfc00615 	stw	ra,24(sp)
    673c:	dd400515 	stw	r21,20(sp)
    6740:	dd000415 	stw	r20,16(sp)
    6744:	3825883a 	mov	r18,r7
    6748:	3027883a 	mov	r19,r6
    674c:	000a7140 	call	a714 <__divsi3>
    6750:	00c00044 	movi	r3,1
    6754:	000b883a 	mov	r5,zero
    6758:	1880030e 	bge	r3,r2,6768 <__s2b+0x54>
    675c:	18c7883a 	add	r3,r3,r3
    6760:	29400044 	addi	r5,r5,1
    6764:	18bffd16 	blt	r3,r2,675c <__alt_mem_Flash_flash_data+0xf400675c>
    6768:	8809883a 	mov	r4,r17
    676c:	00065240 	call	6524 <_Balloc>
    6770:	d8c00717 	ldw	r3,28(sp)
    6774:	10c00515 	stw	r3,20(r2)
    6778:	00c00044 	movi	r3,1
    677c:	10c00415 	stw	r3,16(r2)
    6780:	00c00244 	movi	r3,9
    6784:	1cc0210e 	bge	r3,r19,680c <__s2b+0xf8>
    6788:	80eb883a 	add	r21,r16,r3
    678c:	a829883a 	mov	r20,r21
    6790:	84e1883a 	add	r16,r16,r19
    6794:	a1c00007 	ldb	r7,0(r20)
    6798:	8809883a 	mov	r4,r17
    679c:	a5000044 	addi	r20,r20,1
    67a0:	100b883a 	mov	r5,r2
    67a4:	01800284 	movi	r6,10
    67a8:	39fff404 	addi	r7,r7,-48
    67ac:	00065f40 	call	65f4 <__multadd>
    67b0:	a43ff81e 	bne	r20,r16,6794 <__alt_mem_Flash_flash_data+0xf4006794>
    67b4:	ace1883a 	add	r16,r21,r19
    67b8:	843ffe04 	addi	r16,r16,-8
    67bc:	9c800a0e 	bge	r19,r18,67e8 <__s2b+0xd4>
    67c0:	94e5c83a 	sub	r18,r18,r19
    67c4:	84a5883a 	add	r18,r16,r18
    67c8:	81c00007 	ldb	r7,0(r16)
    67cc:	8809883a 	mov	r4,r17
    67d0:	84000044 	addi	r16,r16,1
    67d4:	100b883a 	mov	r5,r2
    67d8:	01800284 	movi	r6,10
    67dc:	39fff404 	addi	r7,r7,-48
    67e0:	00065f40 	call	65f4 <__multadd>
    67e4:	84bff81e 	bne	r16,r18,67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    67e8:	dfc00617 	ldw	ra,24(sp)
    67ec:	dd400517 	ldw	r21,20(sp)
    67f0:	dd000417 	ldw	r20,16(sp)
    67f4:	dcc00317 	ldw	r19,12(sp)
    67f8:	dc800217 	ldw	r18,8(sp)
    67fc:	dc400117 	ldw	r17,4(sp)
    6800:	dc000017 	ldw	r16,0(sp)
    6804:	dec00704 	addi	sp,sp,28
    6808:	f800283a 	ret
    680c:	84000284 	addi	r16,r16,10
    6810:	1827883a 	mov	r19,r3
    6814:	003fe906 	br	67bc <__alt_mem_Flash_flash_data+0xf40067bc>

00006818 <__hi0bits>:
    6818:	20bfffec 	andhi	r2,r4,65535
    681c:	1000141e 	bne	r2,zero,6870 <__hi0bits+0x58>
    6820:	2008943a 	slli	r4,r4,16
    6824:	00800404 	movi	r2,16
    6828:	20ffc02c 	andhi	r3,r4,65280
    682c:	1800021e 	bne	r3,zero,6838 <__hi0bits+0x20>
    6830:	2008923a 	slli	r4,r4,8
    6834:	10800204 	addi	r2,r2,8
    6838:	20fc002c 	andhi	r3,r4,61440
    683c:	1800021e 	bne	r3,zero,6848 <__hi0bits+0x30>
    6840:	2008913a 	slli	r4,r4,4
    6844:	10800104 	addi	r2,r2,4
    6848:	20f0002c 	andhi	r3,r4,49152
    684c:	1800031e 	bne	r3,zero,685c <__hi0bits+0x44>
    6850:	2109883a 	add	r4,r4,r4
    6854:	10800084 	addi	r2,r2,2
    6858:	2109883a 	add	r4,r4,r4
    685c:	20000316 	blt	r4,zero,686c <__hi0bits+0x54>
    6860:	2110002c 	andhi	r4,r4,16384
    6864:	2000041e 	bne	r4,zero,6878 <__hi0bits+0x60>
    6868:	00800804 	movi	r2,32
    686c:	f800283a 	ret
    6870:	0005883a 	mov	r2,zero
    6874:	003fec06 	br	6828 <__alt_mem_Flash_flash_data+0xf4006828>
    6878:	10800044 	addi	r2,r2,1
    687c:	f800283a 	ret

00006880 <__lo0bits>:
    6880:	20c00017 	ldw	r3,0(r4)
    6884:	188001cc 	andi	r2,r3,7
    6888:	10000826 	beq	r2,zero,68ac <__lo0bits+0x2c>
    688c:	1880004c 	andi	r2,r3,1
    6890:	1000211e 	bne	r2,zero,6918 <__lo0bits+0x98>
    6894:	1880008c 	andi	r2,r3,2
    6898:	1000211e 	bne	r2,zero,6920 <__lo0bits+0xa0>
    689c:	1806d0ba 	srli	r3,r3,2
    68a0:	00800084 	movi	r2,2
    68a4:	20c00015 	stw	r3,0(r4)
    68a8:	f800283a 	ret
    68ac:	18bfffcc 	andi	r2,r3,65535
    68b0:	10001326 	beq	r2,zero,6900 <__lo0bits+0x80>
    68b4:	0005883a 	mov	r2,zero
    68b8:	19403fcc 	andi	r5,r3,255
    68bc:	2800021e 	bne	r5,zero,68c8 <__lo0bits+0x48>
    68c0:	1806d23a 	srli	r3,r3,8
    68c4:	10800204 	addi	r2,r2,8
    68c8:	194003cc 	andi	r5,r3,15
    68cc:	2800021e 	bne	r5,zero,68d8 <__lo0bits+0x58>
    68d0:	1806d13a 	srli	r3,r3,4
    68d4:	10800104 	addi	r2,r2,4
    68d8:	194000cc 	andi	r5,r3,3
    68dc:	2800021e 	bne	r5,zero,68e8 <__lo0bits+0x68>
    68e0:	1806d0ba 	srli	r3,r3,2
    68e4:	10800084 	addi	r2,r2,2
    68e8:	1940004c 	andi	r5,r3,1
    68ec:	2800081e 	bne	r5,zero,6910 <__lo0bits+0x90>
    68f0:	1806d07a 	srli	r3,r3,1
    68f4:	1800051e 	bne	r3,zero,690c <__lo0bits+0x8c>
    68f8:	00800804 	movi	r2,32
    68fc:	f800283a 	ret
    6900:	1806d43a 	srli	r3,r3,16
    6904:	00800404 	movi	r2,16
    6908:	003feb06 	br	68b8 <__alt_mem_Flash_flash_data+0xf40068b8>
    690c:	10800044 	addi	r2,r2,1
    6910:	20c00015 	stw	r3,0(r4)
    6914:	f800283a 	ret
    6918:	0005883a 	mov	r2,zero
    691c:	f800283a 	ret
    6920:	1806d07a 	srli	r3,r3,1
    6924:	00800044 	movi	r2,1
    6928:	20c00015 	stw	r3,0(r4)
    692c:	f800283a 	ret

00006930 <__i2b>:
    6930:	defffd04 	addi	sp,sp,-12
    6934:	dc000015 	stw	r16,0(sp)
    6938:	04000044 	movi	r16,1
    693c:	dc400115 	stw	r17,4(sp)
    6940:	2823883a 	mov	r17,r5
    6944:	800b883a 	mov	r5,r16
    6948:	dfc00215 	stw	ra,8(sp)
    694c:	00065240 	call	6524 <_Balloc>
    6950:	14400515 	stw	r17,20(r2)
    6954:	14000415 	stw	r16,16(r2)
    6958:	dfc00217 	ldw	ra,8(sp)
    695c:	dc400117 	ldw	r17,4(sp)
    6960:	dc000017 	ldw	r16,0(sp)
    6964:	dec00304 	addi	sp,sp,12
    6968:	f800283a 	ret

0000696c <__multiply>:
    696c:	defffa04 	addi	sp,sp,-24
    6970:	dcc00315 	stw	r19,12(sp)
    6974:	dc800215 	stw	r18,8(sp)
    6978:	2cc00417 	ldw	r19,16(r5)
    697c:	34800417 	ldw	r18,16(r6)
    6980:	dd000415 	stw	r20,16(sp)
    6984:	dc400115 	stw	r17,4(sp)
    6988:	dfc00515 	stw	ra,20(sp)
    698c:	dc000015 	stw	r16,0(sp)
    6990:	2829883a 	mov	r20,r5
    6994:	3023883a 	mov	r17,r6
    6998:	9c807016 	blt	r19,r18,6b5c <__multiply+0x1f0>
    699c:	9005883a 	mov	r2,r18
    69a0:	9825883a 	mov	r18,r19
    69a4:	1027883a 	mov	r19,r2
    69a8:	a0800217 	ldw	r2,8(r20)
    69ac:	94e1883a 	add	r16,r18,r19
    69b0:	a1400117 	ldw	r5,4(r20)
    69b4:	1400010e 	bge	r2,r16,69bc <__multiply+0x50>
    69b8:	29400044 	addi	r5,r5,1
    69bc:	00065240 	call	6524 <_Balloc>
    69c0:	8417883a 	add	r11,r16,r16
    69c4:	13000504 	addi	r12,r2,20
    69c8:	5ad7883a 	add	r11,r11,r11
    69cc:	62d7883a 	add	r11,r12,r11
    69d0:	6007883a 	mov	r3,r12
    69d4:	62c0032e 	bgeu	r12,r11,69e4 <__multiply+0x78>
    69d8:	18000015 	stw	zero,0(r3)
    69dc:	18c00104 	addi	r3,r3,4
    69e0:	1afffd36 	bltu	r3,r11,69d8 <__alt_mem_Flash_flash_data+0xf40069d8>
    69e4:	9ce7883a 	add	r19,r19,r19
    69e8:	94a5883a 	add	r18,r18,r18
    69ec:	89800504 	addi	r6,r17,20
    69f0:	9ce7883a 	add	r19,r19,r19
    69f4:	a3800504 	addi	r14,r20,20
    69f8:	94a5883a 	add	r18,r18,r18
    69fc:	34db883a 	add	r13,r6,r19
    6a00:	7495883a 	add	r10,r14,r18
    6a04:	3340422e 	bgeu	r6,r13,6b10 <__multiply+0x1a4>
    6a08:	34400017 	ldw	r17,0(r6)
    6a0c:	8cbfffcc 	andi	r18,r17,65535
    6a10:	90001b26 	beq	r18,zero,6a80 <__multiply+0x114>
    6a14:	6013883a 	mov	r9,r12
    6a18:	7023883a 	mov	r17,r14
    6a1c:	0011883a 	mov	r8,zero
    6a20:	88c00017 	ldw	r3,0(r17)
    6a24:	4bc00017 	ldw	r15,0(r9)
    6a28:	8c400104 	addi	r17,r17,4
    6a2c:	19ffffcc 	andi	r7,r3,65535
    6a30:	3c8f383a 	mul	r7,r7,r18
    6a34:	1808d43a 	srli	r4,r3,16
    6a38:	797fffcc 	andi	r5,r15,65535
    6a3c:	29cb883a 	add	r5,r5,r7
    6a40:	2a0b883a 	add	r5,r5,r8
    6a44:	2489383a 	mul	r4,r4,r18
    6a48:	7806d43a 	srli	r3,r15,16
    6a4c:	2810d43a 	srli	r8,r5,16
    6a50:	297fffcc 	andi	r5,r5,65535
    6a54:	1907883a 	add	r3,r3,r4
    6a58:	1a07883a 	add	r3,r3,r8
    6a5c:	1808943a 	slli	r4,r3,16
    6a60:	480f883a 	mov	r7,r9
    6a64:	1810d43a 	srli	r8,r3,16
    6a68:	214ab03a 	or	r5,r4,r5
    6a6c:	49400015 	stw	r5,0(r9)
    6a70:	4a400104 	addi	r9,r9,4
    6a74:	8abfea36 	bltu	r17,r10,6a20 <__alt_mem_Flash_flash_data+0xf4006a20>
    6a78:	3a000115 	stw	r8,4(r7)
    6a7c:	34400017 	ldw	r17,0(r6)
    6a80:	8822d43a 	srli	r17,r17,16
    6a84:	88001f26 	beq	r17,zero,6b04 <__multiply+0x198>
    6a88:	60c00017 	ldw	r3,0(r12)
    6a8c:	7013883a 	mov	r9,r14
    6a90:	601f883a 	mov	r15,r12
    6a94:	1811883a 	mov	r8,r3
    6a98:	6027883a 	mov	r19,r12
    6a9c:	000f883a 	mov	r7,zero
    6aa0:	00000106 	br	6aa8 <__multiply+0x13c>
    6aa4:	9027883a 	mov	r19,r18
    6aa8:	4940000b 	ldhu	r5,0(r9)
    6aac:	4010d43a 	srli	r8,r8,16
    6ab0:	193fffcc 	andi	r4,r3,65535
    6ab4:	2c4b383a 	mul	r5,r5,r17
    6ab8:	7bc00104 	addi	r15,r15,4
    6abc:	4a400104 	addi	r9,r9,4
    6ac0:	2a0b883a 	add	r5,r5,r8
    6ac4:	29cb883a 	add	r5,r5,r7
    6ac8:	2806943a 	slli	r3,r5,16
    6acc:	9c800104 	addi	r18,r19,4
    6ad0:	280ad43a 	srli	r5,r5,16
    6ad4:	1908b03a 	or	r4,r3,r4
    6ad8:	793fff15 	stw	r4,-4(r15)
    6adc:	48ffff17 	ldw	r3,-4(r9)
    6ae0:	92000017 	ldw	r8,0(r18)
    6ae4:	1806d43a 	srli	r3,r3,16
    6ae8:	413fffcc 	andi	r4,r8,65535
    6aec:	1c47383a 	mul	r3,r3,r17
    6af0:	1907883a 	add	r3,r3,r4
    6af4:	1947883a 	add	r3,r3,r5
    6af8:	180ed43a 	srli	r7,r3,16
    6afc:	4abfe936 	bltu	r9,r10,6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    6b00:	98c00115 	stw	r3,4(r19)
    6b04:	31800104 	addi	r6,r6,4
    6b08:	63000104 	addi	r12,r12,4
    6b0c:	337fbe36 	bltu	r6,r13,6a08 <__alt_mem_Flash_flash_data+0xf4006a08>
    6b10:	0400090e 	bge	zero,r16,6b38 <__multiply+0x1cc>
    6b14:	58ffff17 	ldw	r3,-4(r11)
    6b18:	5affff04 	addi	r11,r11,-4
    6b1c:	18000326 	beq	r3,zero,6b2c <__multiply+0x1c0>
    6b20:	00000506 	br	6b38 <__multiply+0x1cc>
    6b24:	58c00017 	ldw	r3,0(r11)
    6b28:	1800031e 	bne	r3,zero,6b38 <__multiply+0x1cc>
    6b2c:	843fffc4 	addi	r16,r16,-1
    6b30:	5affff04 	addi	r11,r11,-4
    6b34:	803ffb1e 	bne	r16,zero,6b24 <__alt_mem_Flash_flash_data+0xf4006b24>
    6b38:	14000415 	stw	r16,16(r2)
    6b3c:	dfc00517 	ldw	ra,20(sp)
    6b40:	dd000417 	ldw	r20,16(sp)
    6b44:	dcc00317 	ldw	r19,12(sp)
    6b48:	dc800217 	ldw	r18,8(sp)
    6b4c:	dc400117 	ldw	r17,4(sp)
    6b50:	dc000017 	ldw	r16,0(sp)
    6b54:	dec00604 	addi	sp,sp,24
    6b58:	f800283a 	ret
    6b5c:	3029883a 	mov	r20,r6
    6b60:	2823883a 	mov	r17,r5
    6b64:	003f9006 	br	69a8 <__alt_mem_Flash_flash_data+0xf40069a8>

00006b68 <__pow5mult>:
    6b68:	defffa04 	addi	sp,sp,-24
    6b6c:	dcc00315 	stw	r19,12(sp)
    6b70:	dc800215 	stw	r18,8(sp)
    6b74:	dc000015 	stw	r16,0(sp)
    6b78:	dfc00515 	stw	ra,20(sp)
    6b7c:	dd000415 	stw	r20,16(sp)
    6b80:	dc400115 	stw	r17,4(sp)
    6b84:	308000cc 	andi	r2,r6,3
    6b88:	3021883a 	mov	r16,r6
    6b8c:	2027883a 	mov	r19,r4
    6b90:	2825883a 	mov	r18,r5
    6b94:	10002e1e 	bne	r2,zero,6c50 <__pow5mult+0xe8>
    6b98:	8021d0ba 	srai	r16,r16,2
    6b9c:	80001a26 	beq	r16,zero,6c08 <__pow5mult+0xa0>
    6ba0:	9c401217 	ldw	r17,72(r19)
    6ba4:	8800061e 	bne	r17,zero,6bc0 <__pow5mult+0x58>
    6ba8:	00003406 	br	6c7c <__pow5mult+0x114>
    6bac:	8021d07a 	srai	r16,r16,1
    6bb0:	80001526 	beq	r16,zero,6c08 <__pow5mult+0xa0>
    6bb4:	88800017 	ldw	r2,0(r17)
    6bb8:	10001c26 	beq	r2,zero,6c2c <__pow5mult+0xc4>
    6bbc:	1023883a 	mov	r17,r2
    6bc0:	80c0004c 	andi	r3,r16,1
    6bc4:	183ff926 	beq	r3,zero,6bac <__alt_mem_Flash_flash_data+0xf4006bac>
    6bc8:	900b883a 	mov	r5,r18
    6bcc:	880d883a 	mov	r6,r17
    6bd0:	9809883a 	mov	r4,r19
    6bd4:	000696c0 	call	696c <__multiply>
    6bd8:	90001b26 	beq	r18,zero,6c48 <__pow5mult+0xe0>
    6bdc:	91c00117 	ldw	r7,4(r18)
    6be0:	98c01317 	ldw	r3,76(r19)
    6be4:	8021d07a 	srai	r16,r16,1
    6be8:	39cf883a 	add	r7,r7,r7
    6bec:	39cf883a 	add	r7,r7,r7
    6bf0:	19c7883a 	add	r3,r3,r7
    6bf4:	19000017 	ldw	r4,0(r3)
    6bf8:	91000015 	stw	r4,0(r18)
    6bfc:	1c800015 	stw	r18,0(r3)
    6c00:	1025883a 	mov	r18,r2
    6c04:	803feb1e 	bne	r16,zero,6bb4 <__alt_mem_Flash_flash_data+0xf4006bb4>
    6c08:	9005883a 	mov	r2,r18
    6c0c:	dfc00517 	ldw	ra,20(sp)
    6c10:	dd000417 	ldw	r20,16(sp)
    6c14:	dcc00317 	ldw	r19,12(sp)
    6c18:	dc800217 	ldw	r18,8(sp)
    6c1c:	dc400117 	ldw	r17,4(sp)
    6c20:	dc000017 	ldw	r16,0(sp)
    6c24:	dec00604 	addi	sp,sp,24
    6c28:	f800283a 	ret
    6c2c:	9809883a 	mov	r4,r19
    6c30:	880b883a 	mov	r5,r17
    6c34:	880d883a 	mov	r6,r17
    6c38:	000696c0 	call	696c <__multiply>
    6c3c:	88800015 	stw	r2,0(r17)
    6c40:	10000015 	stw	zero,0(r2)
    6c44:	003fdd06 	br	6bbc <__alt_mem_Flash_flash_data+0xf4006bbc>
    6c48:	1025883a 	mov	r18,r2
    6c4c:	003fd706 	br	6bac <__alt_mem_Flash_flash_data+0xf4006bac>
    6c50:	10bfffc4 	addi	r2,r2,-1
    6c54:	1085883a 	add	r2,r2,r2
    6c58:	00c000b4 	movhi	r3,2
    6c5c:	18e6e204 	addi	r3,r3,-25720
    6c60:	1085883a 	add	r2,r2,r2
    6c64:	1885883a 	add	r2,r3,r2
    6c68:	11800017 	ldw	r6,0(r2)
    6c6c:	000f883a 	mov	r7,zero
    6c70:	00065f40 	call	65f4 <__multadd>
    6c74:	1025883a 	mov	r18,r2
    6c78:	003fc706 	br	6b98 <__alt_mem_Flash_flash_data+0xf4006b98>
    6c7c:	05000044 	movi	r20,1
    6c80:	9809883a 	mov	r4,r19
    6c84:	a00b883a 	mov	r5,r20
    6c88:	00065240 	call	6524 <_Balloc>
    6c8c:	1023883a 	mov	r17,r2
    6c90:	00809c44 	movi	r2,625
    6c94:	88800515 	stw	r2,20(r17)
    6c98:	8d000415 	stw	r20,16(r17)
    6c9c:	9c401215 	stw	r17,72(r19)
    6ca0:	88000015 	stw	zero,0(r17)
    6ca4:	003fc606 	br	6bc0 <__alt_mem_Flash_flash_data+0xf4006bc0>

00006ca8 <__lshift>:
    6ca8:	defff904 	addi	sp,sp,-28
    6cac:	dd000415 	stw	r20,16(sp)
    6cb0:	dcc00315 	stw	r19,12(sp)
    6cb4:	3029d17a 	srai	r20,r6,5
    6cb8:	2cc00417 	ldw	r19,16(r5)
    6cbc:	28800217 	ldw	r2,8(r5)
    6cc0:	dd400515 	stw	r21,20(sp)
    6cc4:	a4e7883a 	add	r19,r20,r19
    6cc8:	dc800215 	stw	r18,8(sp)
    6ccc:	dc400115 	stw	r17,4(sp)
    6cd0:	dc000015 	stw	r16,0(sp)
    6cd4:	dfc00615 	stw	ra,24(sp)
    6cd8:	9c000044 	addi	r16,r19,1
    6cdc:	2823883a 	mov	r17,r5
    6ce0:	302b883a 	mov	r21,r6
    6ce4:	2025883a 	mov	r18,r4
    6ce8:	29400117 	ldw	r5,4(r5)
    6cec:	1400030e 	bge	r2,r16,6cfc <__lshift+0x54>
    6cf0:	1085883a 	add	r2,r2,r2
    6cf4:	29400044 	addi	r5,r5,1
    6cf8:	143ffd16 	blt	r2,r16,6cf0 <__alt_mem_Flash_flash_data+0xf4006cf0>
    6cfc:	9009883a 	mov	r4,r18
    6d00:	00065240 	call	6524 <_Balloc>
    6d04:	11c00504 	addi	r7,r2,20
    6d08:	0500090e 	bge	zero,r20,6d30 <__lshift+0x88>
    6d0c:	3811883a 	mov	r8,r7
    6d10:	0007883a 	mov	r3,zero
    6d14:	40000015 	stw	zero,0(r8)
    6d18:	18c00044 	addi	r3,r3,1
    6d1c:	42000104 	addi	r8,r8,4
    6d20:	1d3ffc1e 	bne	r3,r20,6d14 <__alt_mem_Flash_flash_data+0xf4006d14>
    6d24:	18c7883a 	add	r3,r3,r3
    6d28:	18c7883a 	add	r3,r3,r3
    6d2c:	38cf883a 	add	r7,r7,r3
    6d30:	89000417 	ldw	r4,16(r17)
    6d34:	88c00504 	addi	r3,r17,20
    6d38:	a98007cc 	andi	r6,r21,31
    6d3c:	2109883a 	add	r4,r4,r4
    6d40:	2109883a 	add	r4,r4,r4
    6d44:	1909883a 	add	r4,r3,r4
    6d48:	30002326 	beq	r6,zero,6dd8 <__lshift+0x130>
    6d4c:	01400804 	movi	r5,32
    6d50:	298bc83a 	sub	r5,r5,r6
    6d54:	0013883a 	mov	r9,zero
    6d58:	1a000017 	ldw	r8,0(r3)
    6d5c:	3815883a 	mov	r10,r7
    6d60:	39c00104 	addi	r7,r7,4
    6d64:	4190983a 	sll	r8,r8,r6
    6d68:	18c00104 	addi	r3,r3,4
    6d6c:	4a10b03a 	or	r8,r9,r8
    6d70:	3a3fff15 	stw	r8,-4(r7)
    6d74:	1a3fff17 	ldw	r8,-4(r3)
    6d78:	4152d83a 	srl	r9,r8,r5
    6d7c:	193ff636 	bltu	r3,r4,6d58 <__alt_mem_Flash_flash_data+0xf4006d58>
    6d80:	52400115 	stw	r9,4(r10)
    6d84:	48001a1e 	bne	r9,zero,6df0 <__lshift+0x148>
    6d88:	843fffc4 	addi	r16,r16,-1
    6d8c:	14000415 	stw	r16,16(r2)
    6d90:	88000826 	beq	r17,zero,6db4 <__lshift+0x10c>
    6d94:	89000117 	ldw	r4,4(r17)
    6d98:	90c01317 	ldw	r3,76(r18)
    6d9c:	2109883a 	add	r4,r4,r4
    6da0:	2109883a 	add	r4,r4,r4
    6da4:	1907883a 	add	r3,r3,r4
    6da8:	19000017 	ldw	r4,0(r3)
    6dac:	89000015 	stw	r4,0(r17)
    6db0:	1c400015 	stw	r17,0(r3)
    6db4:	dfc00617 	ldw	ra,24(sp)
    6db8:	dd400517 	ldw	r21,20(sp)
    6dbc:	dd000417 	ldw	r20,16(sp)
    6dc0:	dcc00317 	ldw	r19,12(sp)
    6dc4:	dc800217 	ldw	r18,8(sp)
    6dc8:	dc400117 	ldw	r17,4(sp)
    6dcc:	dc000017 	ldw	r16,0(sp)
    6dd0:	dec00704 	addi	sp,sp,28
    6dd4:	f800283a 	ret
    6dd8:	19400017 	ldw	r5,0(r3)
    6ddc:	39c00104 	addi	r7,r7,4
    6de0:	18c00104 	addi	r3,r3,4
    6de4:	397fff15 	stw	r5,-4(r7)
    6de8:	193ffb36 	bltu	r3,r4,6dd8 <__alt_mem_Flash_flash_data+0xf4006dd8>
    6dec:	003fe606 	br	6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6df0:	9c000084 	addi	r16,r19,2
    6df4:	003fe406 	br	6d88 <__alt_mem_Flash_flash_data+0xf4006d88>

00006df8 <__mcmp>:
    6df8:	20800417 	ldw	r2,16(r4)
    6dfc:	28c00417 	ldw	r3,16(r5)
    6e00:	10c5c83a 	sub	r2,r2,r3
    6e04:	1000111e 	bne	r2,zero,6e4c <__mcmp+0x54>
    6e08:	18c7883a 	add	r3,r3,r3
    6e0c:	18c7883a 	add	r3,r3,r3
    6e10:	21000504 	addi	r4,r4,20
    6e14:	29400504 	addi	r5,r5,20
    6e18:	20c5883a 	add	r2,r4,r3
    6e1c:	28cb883a 	add	r5,r5,r3
    6e20:	00000106 	br	6e28 <__mcmp+0x30>
    6e24:	20800a2e 	bgeu	r4,r2,6e50 <__mcmp+0x58>
    6e28:	10bfff04 	addi	r2,r2,-4
    6e2c:	297fff04 	addi	r5,r5,-4
    6e30:	11800017 	ldw	r6,0(r2)
    6e34:	28c00017 	ldw	r3,0(r5)
    6e38:	30fffa26 	beq	r6,r3,6e24 <__alt_mem_Flash_flash_data+0xf4006e24>
    6e3c:	30c00236 	bltu	r6,r3,6e48 <__mcmp+0x50>
    6e40:	00800044 	movi	r2,1
    6e44:	f800283a 	ret
    6e48:	00bfffc4 	movi	r2,-1
    6e4c:	f800283a 	ret
    6e50:	0005883a 	mov	r2,zero
    6e54:	f800283a 	ret

00006e58 <__mdiff>:
    6e58:	defffb04 	addi	sp,sp,-20
    6e5c:	dc000015 	stw	r16,0(sp)
    6e60:	2821883a 	mov	r16,r5
    6e64:	dcc00315 	stw	r19,12(sp)
    6e68:	300b883a 	mov	r5,r6
    6e6c:	2027883a 	mov	r19,r4
    6e70:	8009883a 	mov	r4,r16
    6e74:	dc800215 	stw	r18,8(sp)
    6e78:	dfc00415 	stw	ra,16(sp)
    6e7c:	dc400115 	stw	r17,4(sp)
    6e80:	3025883a 	mov	r18,r6
    6e84:	0006df80 	call	6df8 <__mcmp>
    6e88:	10005226 	beq	r2,zero,6fd4 <__mdiff+0x17c>
    6e8c:	10004c16 	blt	r2,zero,6fc0 <__mdiff+0x168>
    6e90:	0023883a 	mov	r17,zero
    6e94:	81400117 	ldw	r5,4(r16)
    6e98:	9809883a 	mov	r4,r19
    6e9c:	00065240 	call	6524 <_Balloc>
    6ea0:	83400417 	ldw	r13,16(r16)
    6ea4:	93800417 	ldw	r14,16(r18)
    6ea8:	81000504 	addi	r4,r16,20
    6eac:	6b59883a 	add	r12,r13,r13
    6eb0:	739d883a 	add	r14,r14,r14
    6eb4:	6319883a 	add	r12,r12,r12
    6eb8:	91800504 	addi	r6,r18,20
    6ebc:	739d883a 	add	r14,r14,r14
    6ec0:	14400315 	stw	r17,12(r2)
    6ec4:	2319883a 	add	r12,r4,r12
    6ec8:	339d883a 	add	r14,r6,r14
    6ecc:	12400504 	addi	r9,r2,20
    6ed0:	0007883a 	mov	r3,zero
    6ed4:	22000017 	ldw	r8,0(r4)
    6ed8:	32800017 	ldw	r10,0(r6)
    6edc:	4ac00104 	addi	r11,r9,4
    6ee0:	41ffffcc 	andi	r7,r8,65535
    6ee4:	38c7883a 	add	r3,r7,r3
    6ee8:	51ffffcc 	andi	r7,r10,65535
    6eec:	19cfc83a 	sub	r7,r3,r7
    6ef0:	4010d43a 	srli	r8,r8,16
    6ef4:	5014d43a 	srli	r10,r10,16
    6ef8:	3807d43a 	srai	r3,r7,16
    6efc:	39ffffcc 	andi	r7,r7,65535
    6f00:	4291c83a 	sub	r8,r8,r10
    6f04:	40c7883a 	add	r3,r8,r3
    6f08:	1810943a 	slli	r8,r3,16
    6f0c:	31800104 	addi	r6,r6,4
    6f10:	21000104 	addi	r4,r4,4
    6f14:	41ceb03a 	or	r7,r8,r7
    6f18:	49c00015 	stw	r7,0(r9)
    6f1c:	1807d43a 	srai	r3,r3,16
    6f20:	580b883a 	mov	r5,r11
    6f24:	5813883a 	mov	r9,r11
    6f28:	33bfea36 	bltu	r6,r14,6ed4 <__alt_mem_Flash_flash_data+0xf4006ed4>
    6f2c:	2011883a 	mov	r8,r4
    6f30:	2300152e 	bgeu	r4,r12,6f88 <__mdiff+0x130>
    6f34:	21400017 	ldw	r5,0(r4)
    6f38:	4a400104 	addi	r9,r9,4
    6f3c:	21000104 	addi	r4,r4,4
    6f40:	29ffffcc 	andi	r7,r5,65535
    6f44:	38c7883a 	add	r3,r7,r3
    6f48:	280ad43a 	srli	r5,r5,16
    6f4c:	180dd43a 	srai	r6,r3,16
    6f50:	19ffffcc 	andi	r7,r3,65535
    6f54:	3147883a 	add	r3,r6,r5
    6f58:	180a943a 	slli	r5,r3,16
    6f5c:	1807d43a 	srai	r3,r3,16
    6f60:	29ceb03a 	or	r7,r5,r7
    6f64:	49ffff15 	stw	r7,-4(r9)
    6f68:	233ff236 	bltu	r4,r12,6f34 <__alt_mem_Flash_flash_data+0xf4006f34>
    6f6c:	0206303a 	nor	r3,zero,r8
    6f70:	1b07883a 	add	r3,r3,r12
    6f74:	1806d0ba 	srli	r3,r3,2
    6f78:	18c00044 	addi	r3,r3,1
    6f7c:	18c7883a 	add	r3,r3,r3
    6f80:	18c7883a 	add	r3,r3,r3
    6f84:	58cb883a 	add	r5,r11,r3
    6f88:	28ffff04 	addi	r3,r5,-4
    6f8c:	3800041e 	bne	r7,zero,6fa0 <__mdiff+0x148>
    6f90:	18ffff04 	addi	r3,r3,-4
    6f94:	19000017 	ldw	r4,0(r3)
    6f98:	6b7fffc4 	addi	r13,r13,-1
    6f9c:	203ffc26 	beq	r4,zero,6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    6fa0:	13400415 	stw	r13,16(r2)
    6fa4:	dfc00417 	ldw	ra,16(sp)
    6fa8:	dcc00317 	ldw	r19,12(sp)
    6fac:	dc800217 	ldw	r18,8(sp)
    6fb0:	dc400117 	ldw	r17,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00504 	addi	sp,sp,20
    6fbc:	f800283a 	ret
    6fc0:	8005883a 	mov	r2,r16
    6fc4:	04400044 	movi	r17,1
    6fc8:	9021883a 	mov	r16,r18
    6fcc:	1025883a 	mov	r18,r2
    6fd0:	003fb006 	br	6e94 <__alt_mem_Flash_flash_data+0xf4006e94>
    6fd4:	9809883a 	mov	r4,r19
    6fd8:	000b883a 	mov	r5,zero
    6fdc:	00065240 	call	6524 <_Balloc>
    6fe0:	00c00044 	movi	r3,1
    6fe4:	10c00415 	stw	r3,16(r2)
    6fe8:	10000515 	stw	zero,20(r2)
    6fec:	003fed06 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>

00006ff0 <__ulp>:
    6ff0:	295ffc2c 	andhi	r5,r5,32752
    6ff4:	00bf3034 	movhi	r2,64704
    6ff8:	2887883a 	add	r3,r5,r2
    6ffc:	00c0020e 	bge	zero,r3,7008 <__ulp+0x18>
    7000:	0005883a 	mov	r2,zero
    7004:	f800283a 	ret
    7008:	00c7c83a 	sub	r3,zero,r3
    700c:	180bd53a 	srai	r5,r3,20
    7010:	008004c4 	movi	r2,19
    7014:	11400a0e 	bge	r2,r5,7040 <__ulp+0x50>
    7018:	00800c84 	movi	r2,50
    701c:	0007883a 	mov	r3,zero
    7020:	11400516 	blt	r2,r5,7038 <__ulp+0x48>
    7024:	00800cc4 	movi	r2,51
    7028:	114bc83a 	sub	r5,r2,r5
    702c:	00800044 	movi	r2,1
    7030:	1144983a 	sll	r2,r2,r5
    7034:	f800283a 	ret
    7038:	00800044 	movi	r2,1
    703c:	f800283a 	ret
    7040:	00800234 	movhi	r2,8
    7044:	1147d83a 	sra	r3,r2,r5
    7048:	0005883a 	mov	r2,zero
    704c:	f800283a 	ret

00007050 <__b2d>:
    7050:	defffa04 	addi	sp,sp,-24
    7054:	dc000015 	stw	r16,0(sp)
    7058:	24000417 	ldw	r16,16(r4)
    705c:	dc400115 	stw	r17,4(sp)
    7060:	24400504 	addi	r17,r4,20
    7064:	8421883a 	add	r16,r16,r16
    7068:	8421883a 	add	r16,r16,r16
    706c:	8c21883a 	add	r16,r17,r16
    7070:	dc800215 	stw	r18,8(sp)
    7074:	84bfff17 	ldw	r18,-4(r16)
    7078:	dd000415 	stw	r20,16(sp)
    707c:	dcc00315 	stw	r19,12(sp)
    7080:	9009883a 	mov	r4,r18
    7084:	2829883a 	mov	r20,r5
    7088:	dfc00515 	stw	ra,20(sp)
    708c:	00068180 	call	6818 <__hi0bits>
    7090:	00c00804 	movi	r3,32
    7094:	1887c83a 	sub	r3,r3,r2
    7098:	a0c00015 	stw	r3,0(r20)
    709c:	00c00284 	movi	r3,10
    70a0:	84ffff04 	addi	r19,r16,-4
    70a4:	18801216 	blt	r3,r2,70f0 <__b2d+0xa0>
    70a8:	014002c4 	movi	r5,11
    70ac:	2889c83a 	sub	r4,r5,r2
    70b0:	9106d83a 	srl	r3,r18,r4
    70b4:	18cffc34 	orhi	r3,r3,16368
    70b8:	8cc0282e 	bgeu	r17,r19,715c <__b2d+0x10c>
    70bc:	817ffe17 	ldw	r5,-8(r16)
    70c0:	290ad83a 	srl	r5,r5,r4
    70c4:	10800544 	addi	r2,r2,21
    70c8:	9084983a 	sll	r2,r18,r2
    70cc:	2884b03a 	or	r2,r5,r2
    70d0:	dfc00517 	ldw	ra,20(sp)
    70d4:	dd000417 	ldw	r20,16(sp)
    70d8:	dcc00317 	ldw	r19,12(sp)
    70dc:	dc800217 	ldw	r18,8(sp)
    70e0:	dc400117 	ldw	r17,4(sp)
    70e4:	dc000017 	ldw	r16,0(sp)
    70e8:	dec00604 	addi	sp,sp,24
    70ec:	f800283a 	ret
    70f0:	113ffd44 	addi	r4,r2,-11
    70f4:	8cc00f2e 	bgeu	r17,r19,7134 <__b2d+0xe4>
    70f8:	81bffe04 	addi	r6,r16,-8
    70fc:	817ffe17 	ldw	r5,-8(r16)
    7100:	20001326 	beq	r4,zero,7150 <__b2d+0x100>
    7104:	00c00ac4 	movi	r3,43
    7108:	1885c83a 	sub	r2,r3,r2
    710c:	2886d83a 	srl	r3,r5,r2
    7110:	9124983a 	sll	r18,r18,r4
    7114:	90e4b03a 	or	r18,r18,r3
    7118:	90cffc34 	orhi	r3,r18,16368
    711c:	8980112e 	bgeu	r17,r6,7164 <__b2d+0x114>
    7120:	81bffd17 	ldw	r6,-12(r16)
    7124:	308cd83a 	srl	r6,r6,r2
    7128:	2904983a 	sll	r2,r5,r4
    712c:	1184b03a 	or	r2,r2,r6
    7130:	003fe706 	br	70d0 <__alt_mem_Flash_flash_data+0xf40070d0>
    7134:	20000526 	beq	r4,zero,714c <__b2d+0xfc>
    7138:	9124983a 	sll	r18,r18,r4
    713c:	000d883a 	mov	r6,zero
    7140:	000b883a 	mov	r5,zero
    7144:	90cffc34 	orhi	r3,r18,16368
    7148:	003ff706 	br	7128 <__alt_mem_Flash_flash_data+0xf4007128>
    714c:	000b883a 	mov	r5,zero
    7150:	90cffc34 	orhi	r3,r18,16368
    7154:	2805883a 	mov	r2,r5
    7158:	003fdd06 	br	70d0 <__alt_mem_Flash_flash_data+0xf40070d0>
    715c:	000b883a 	mov	r5,zero
    7160:	003fd806 	br	70c4 <__alt_mem_Flash_flash_data+0xf40070c4>
    7164:	000d883a 	mov	r6,zero
    7168:	003fef06 	br	7128 <__alt_mem_Flash_flash_data+0xf4007128>

0000716c <__d2b>:
    716c:	defff704 	addi	sp,sp,-36
    7170:	dc000215 	stw	r16,8(sp)
    7174:	3021883a 	mov	r16,r6
    7178:	dc400315 	stw	r17,12(sp)
    717c:	8022907a 	slli	r17,r16,1
    7180:	dd400715 	stw	r21,28(sp)
    7184:	282b883a 	mov	r21,r5
    7188:	01400044 	movi	r5,1
    718c:	dd000615 	stw	r20,24(sp)
    7190:	dcc00515 	stw	r19,20(sp)
    7194:	dc800415 	stw	r18,16(sp)
    7198:	dfc00815 	stw	ra,32(sp)
    719c:	3829883a 	mov	r20,r7
    71a0:	dc800917 	ldw	r18,36(sp)
    71a4:	8822d57a 	srli	r17,r17,21
    71a8:	00065240 	call	6524 <_Balloc>
    71ac:	1027883a 	mov	r19,r2
    71b0:	00800434 	movhi	r2,16
    71b4:	10bfffc4 	addi	r2,r2,-1
    71b8:	808c703a 	and	r6,r16,r2
    71bc:	88000126 	beq	r17,zero,71c4 <__d2b+0x58>
    71c0:	31800434 	orhi	r6,r6,16
    71c4:	d9800015 	stw	r6,0(sp)
    71c8:	a8001f26 	beq	r21,zero,7248 <__d2b+0xdc>
    71cc:	d9000104 	addi	r4,sp,4
    71d0:	dd400115 	stw	r21,4(sp)
    71d4:	00068800 	call	6880 <__lo0bits>
    71d8:	d8c00017 	ldw	r3,0(sp)
    71dc:	1000291e 	bne	r2,zero,7284 <__d2b+0x118>
    71e0:	d9000117 	ldw	r4,4(sp)
    71e4:	99000515 	stw	r4,20(r19)
    71e8:	1820c03a 	cmpne	r16,r3,zero
    71ec:	84000044 	addi	r16,r16,1
    71f0:	98c00615 	stw	r3,24(r19)
    71f4:	9c000415 	stw	r16,16(r19)
    71f8:	88001b1e 	bne	r17,zero,7268 <__d2b+0xfc>
    71fc:	800690ba 	slli	r3,r16,2
    7200:	10bef384 	addi	r2,r2,-1074
    7204:	a0800015 	stw	r2,0(r20)
    7208:	98c5883a 	add	r2,r19,r3
    720c:	11000417 	ldw	r4,16(r2)
    7210:	8020917a 	slli	r16,r16,5
    7214:	00068180 	call	6818 <__hi0bits>
    7218:	8085c83a 	sub	r2,r16,r2
    721c:	90800015 	stw	r2,0(r18)
    7220:	9805883a 	mov	r2,r19
    7224:	dfc00817 	ldw	ra,32(sp)
    7228:	dd400717 	ldw	r21,28(sp)
    722c:	dd000617 	ldw	r20,24(sp)
    7230:	dcc00517 	ldw	r19,20(sp)
    7234:	dc800417 	ldw	r18,16(sp)
    7238:	dc400317 	ldw	r17,12(sp)
    723c:	dc000217 	ldw	r16,8(sp)
    7240:	dec00904 	addi	sp,sp,36
    7244:	f800283a 	ret
    7248:	d809883a 	mov	r4,sp
    724c:	00068800 	call	6880 <__lo0bits>
    7250:	d8c00017 	ldw	r3,0(sp)
    7254:	04000044 	movi	r16,1
    7258:	9c000415 	stw	r16,16(r19)
    725c:	98c00515 	stw	r3,20(r19)
    7260:	10800804 	addi	r2,r2,32
    7264:	883fe526 	beq	r17,zero,71fc <__alt_mem_Flash_flash_data+0xf40071fc>
    7268:	8c7ef344 	addi	r17,r17,-1075
    726c:	88a3883a 	add	r17,r17,r2
    7270:	00c00d44 	movi	r3,53
    7274:	a4400015 	stw	r17,0(r20)
    7278:	1885c83a 	sub	r2,r3,r2
    727c:	90800015 	stw	r2,0(r18)
    7280:	003fe706 	br	7220 <__alt_mem_Flash_flash_data+0xf4007220>
    7284:	01000804 	movi	r4,32
    7288:	2089c83a 	sub	r4,r4,r2
    728c:	1908983a 	sll	r4,r3,r4
    7290:	d9400117 	ldw	r5,4(sp)
    7294:	1886d83a 	srl	r3,r3,r2
    7298:	2148b03a 	or	r4,r4,r5
    729c:	99000515 	stw	r4,20(r19)
    72a0:	d8c00015 	stw	r3,0(sp)
    72a4:	003fd006 	br	71e8 <__alt_mem_Flash_flash_data+0xf40071e8>

000072a8 <__ratio>:
    72a8:	defff904 	addi	sp,sp,-28
    72ac:	dc400315 	stw	r17,12(sp)
    72b0:	2823883a 	mov	r17,r5
    72b4:	d9400104 	addi	r5,sp,4
    72b8:	dfc00615 	stw	ra,24(sp)
    72bc:	dcc00515 	stw	r19,20(sp)
    72c0:	dc800415 	stw	r18,16(sp)
    72c4:	2027883a 	mov	r19,r4
    72c8:	dc000215 	stw	r16,8(sp)
    72cc:	00070500 	call	7050 <__b2d>
    72d0:	8809883a 	mov	r4,r17
    72d4:	d80b883a 	mov	r5,sp
    72d8:	1025883a 	mov	r18,r2
    72dc:	1821883a 	mov	r16,r3
    72e0:	00070500 	call	7050 <__b2d>
    72e4:	8a400417 	ldw	r9,16(r17)
    72e8:	9a000417 	ldw	r8,16(r19)
    72ec:	100d883a 	mov	r6,r2
    72f0:	d8800017 	ldw	r2,0(sp)
    72f4:	4251c83a 	sub	r8,r8,r9
    72f8:	4012917a 	slli	r9,r8,5
    72fc:	da000117 	ldw	r8,4(sp)
    7300:	4091c83a 	sub	r8,r8,r2
    7304:	4251883a 	add	r8,r8,r9
    7308:	02000d0e 	bge	zero,r8,7340 <__ratio+0x98>
    730c:	4010953a 	slli	r8,r8,20
    7310:	4421883a 	add	r16,r8,r16
    7314:	9009883a 	mov	r4,r18
    7318:	800b883a 	mov	r5,r16
    731c:	180f883a 	mov	r7,r3
    7320:	000b0700 	call	b070 <__divdf3>
    7324:	dfc00617 	ldw	ra,24(sp)
    7328:	dcc00517 	ldw	r19,20(sp)
    732c:	dc800417 	ldw	r18,16(sp)
    7330:	dc400317 	ldw	r17,12(sp)
    7334:	dc000217 	ldw	r16,8(sp)
    7338:	dec00704 	addi	sp,sp,28
    733c:	f800283a 	ret
    7340:	4010953a 	slli	r8,r8,20
    7344:	1a07c83a 	sub	r3,r3,r8
    7348:	003ff206 	br	7314 <__alt_mem_Flash_flash_data+0xf4007314>

0000734c <_mprec_log10>:
    734c:	defffe04 	addi	sp,sp,-8
    7350:	dc000015 	stw	r16,0(sp)
    7354:	dfc00115 	stw	ra,4(sp)
    7358:	008005c4 	movi	r2,23
    735c:	2021883a 	mov	r16,r4
    7360:	11000d0e 	bge	r2,r4,7398 <_mprec_log10+0x4c>
    7364:	0005883a 	mov	r2,zero
    7368:	00cffc34 	movhi	r3,16368
    736c:	843fffc4 	addi	r16,r16,-1
    7370:	1009883a 	mov	r4,r2
    7374:	180b883a 	mov	r5,r3
    7378:	000d883a 	mov	r6,zero
    737c:	01d00934 	movhi	r7,16420
    7380:	000bb800 	call	bb80 <__muldf3>
    7384:	803ff91e 	bne	r16,zero,736c <__alt_mem_Flash_flash_data+0xf400736c>
    7388:	dfc00117 	ldw	ra,4(sp)
    738c:	dc000017 	ldw	r16,0(sp)
    7390:	dec00204 	addi	sp,sp,8
    7394:	f800283a 	ret
    7398:	202090fa 	slli	r16,r4,3
    739c:	008000b4 	movhi	r2,2
    73a0:	10a6f904 	addi	r2,r2,-25628
    73a4:	1421883a 	add	r16,r2,r16
    73a8:	80800017 	ldw	r2,0(r16)
    73ac:	80c00117 	ldw	r3,4(r16)
    73b0:	dfc00117 	ldw	ra,4(sp)
    73b4:	dc000017 	ldw	r16,0(sp)
    73b8:	dec00204 	addi	sp,sp,8
    73bc:	f800283a 	ret

000073c0 <__copybits>:
    73c0:	297fffc4 	addi	r5,r5,-1
    73c4:	280fd17a 	srai	r7,r5,5
    73c8:	30c00417 	ldw	r3,16(r6)
    73cc:	30800504 	addi	r2,r6,20
    73d0:	39c00044 	addi	r7,r7,1
    73d4:	18c7883a 	add	r3,r3,r3
    73d8:	39cf883a 	add	r7,r7,r7
    73dc:	18c7883a 	add	r3,r3,r3
    73e0:	39cf883a 	add	r7,r7,r7
    73e4:	10c7883a 	add	r3,r2,r3
    73e8:	21cf883a 	add	r7,r4,r7
    73ec:	10c00d2e 	bgeu	r2,r3,7424 <__copybits+0x64>
    73f0:	200b883a 	mov	r5,r4
    73f4:	12000017 	ldw	r8,0(r2)
    73f8:	29400104 	addi	r5,r5,4
    73fc:	10800104 	addi	r2,r2,4
    7400:	2a3fff15 	stw	r8,-4(r5)
    7404:	10fffb36 	bltu	r2,r3,73f4 <__alt_mem_Flash_flash_data+0xf40073f4>
    7408:	1985c83a 	sub	r2,r3,r6
    740c:	10bffac4 	addi	r2,r2,-21
    7410:	1004d0ba 	srli	r2,r2,2
    7414:	10800044 	addi	r2,r2,1
    7418:	1085883a 	add	r2,r2,r2
    741c:	1085883a 	add	r2,r2,r2
    7420:	2089883a 	add	r4,r4,r2
    7424:	21c0032e 	bgeu	r4,r7,7434 <__copybits+0x74>
    7428:	20000015 	stw	zero,0(r4)
    742c:	21000104 	addi	r4,r4,4
    7430:	21fffd36 	bltu	r4,r7,7428 <__alt_mem_Flash_flash_data+0xf4007428>
    7434:	f800283a 	ret

00007438 <__any_on>:
    7438:	20c00417 	ldw	r3,16(r4)
    743c:	2805d17a 	srai	r2,r5,5
    7440:	21000504 	addi	r4,r4,20
    7444:	18800d0e 	bge	r3,r2,747c <__any_on+0x44>
    7448:	18c7883a 	add	r3,r3,r3
    744c:	18c7883a 	add	r3,r3,r3
    7450:	20c7883a 	add	r3,r4,r3
    7454:	20c0192e 	bgeu	r4,r3,74bc <__any_on+0x84>
    7458:	18bfff17 	ldw	r2,-4(r3)
    745c:	18ffff04 	addi	r3,r3,-4
    7460:	1000041e 	bne	r2,zero,7474 <__any_on+0x3c>
    7464:	20c0142e 	bgeu	r4,r3,74b8 <__any_on+0x80>
    7468:	18ffff04 	addi	r3,r3,-4
    746c:	19400017 	ldw	r5,0(r3)
    7470:	283ffc26 	beq	r5,zero,7464 <__alt_mem_Flash_flash_data+0xf4007464>
    7474:	00800044 	movi	r2,1
    7478:	f800283a 	ret
    747c:	10c00a0e 	bge	r2,r3,74a8 <__any_on+0x70>
    7480:	1085883a 	add	r2,r2,r2
    7484:	1085883a 	add	r2,r2,r2
    7488:	294007cc 	andi	r5,r5,31
    748c:	2087883a 	add	r3,r4,r2
    7490:	283ff026 	beq	r5,zero,7454 <__alt_mem_Flash_flash_data+0xf4007454>
    7494:	19800017 	ldw	r6,0(r3)
    7498:	3144d83a 	srl	r2,r6,r5
    749c:	114a983a 	sll	r5,r2,r5
    74a0:	29bff41e 	bne	r5,r6,7474 <__alt_mem_Flash_flash_data+0xf4007474>
    74a4:	003feb06 	br	7454 <__alt_mem_Flash_flash_data+0xf4007454>
    74a8:	1085883a 	add	r2,r2,r2
    74ac:	1085883a 	add	r2,r2,r2
    74b0:	2087883a 	add	r3,r4,r2
    74b4:	003fe706 	br	7454 <__alt_mem_Flash_flash_data+0xf4007454>
    74b8:	f800283a 	ret
    74bc:	0005883a 	mov	r2,zero
    74c0:	f800283a 	ret

000074c4 <_putc_r>:
    74c4:	defffc04 	addi	sp,sp,-16
    74c8:	dc000215 	stw	r16,8(sp)
    74cc:	dfc00315 	stw	ra,12(sp)
    74d0:	2021883a 	mov	r16,r4
    74d4:	20000226 	beq	r4,zero,74e0 <_putc_r+0x1c>
    74d8:	20800e17 	ldw	r2,56(r4)
    74dc:	10001b26 	beq	r2,zero,754c <_putc_r+0x88>
    74e0:	30800217 	ldw	r2,8(r6)
    74e4:	10bfffc4 	addi	r2,r2,-1
    74e8:	30800215 	stw	r2,8(r6)
    74ec:	10000a16 	blt	r2,zero,7518 <_putc_r+0x54>
    74f0:	30800017 	ldw	r2,0(r6)
    74f4:	11400005 	stb	r5,0(r2)
    74f8:	30800017 	ldw	r2,0(r6)
    74fc:	10c00044 	addi	r3,r2,1
    7500:	30c00015 	stw	r3,0(r6)
    7504:	10800003 	ldbu	r2,0(r2)
    7508:	dfc00317 	ldw	ra,12(sp)
    750c:	dc000217 	ldw	r16,8(sp)
    7510:	dec00404 	addi	sp,sp,16
    7514:	f800283a 	ret
    7518:	30c00617 	ldw	r3,24(r6)
    751c:	10c00616 	blt	r2,r3,7538 <_putc_r+0x74>
    7520:	30800017 	ldw	r2,0(r6)
    7524:	00c00284 	movi	r3,10
    7528:	11400005 	stb	r5,0(r2)
    752c:	30800017 	ldw	r2,0(r6)
    7530:	11400003 	ldbu	r5,0(r2)
    7534:	28fff11e 	bne	r5,r3,74fc <__alt_mem_Flash_flash_data+0xf40074fc>
    7538:	8009883a 	mov	r4,r16
    753c:	dfc00317 	ldw	ra,12(sp)
    7540:	dc000217 	ldw	r16,8(sp)
    7544:	dec00404 	addi	sp,sp,16
    7548:	00092601 	jmpi	9260 <__swbuf_r>
    754c:	d9400015 	stw	r5,0(sp)
    7550:	d9800115 	stw	r6,4(sp)
    7554:	0004b980 	call	4b98 <__sinit>
    7558:	d9800117 	ldw	r6,4(sp)
    755c:	d9400017 	ldw	r5,0(sp)
    7560:	003fdf06 	br	74e0 <__alt_mem_Flash_flash_data+0xf40074e0>

00007564 <putc>:
    7564:	008000b4 	movhi	r2,2
    7568:	defffc04 	addi	sp,sp,-16
    756c:	10b10304 	addi	r2,r2,-15348
    7570:	dc400115 	stw	r17,4(sp)
    7574:	14400017 	ldw	r17,0(r2)
    7578:	dc800215 	stw	r18,8(sp)
    757c:	dc000015 	stw	r16,0(sp)
    7580:	dfc00315 	stw	ra,12(sp)
    7584:	2025883a 	mov	r18,r4
    7588:	2821883a 	mov	r16,r5
    758c:	88000226 	beq	r17,zero,7598 <putc+0x34>
    7590:	88800e17 	ldw	r2,56(r17)
    7594:	10001a26 	beq	r2,zero,7600 <putc+0x9c>
    7598:	80800217 	ldw	r2,8(r16)
    759c:	10bfffc4 	addi	r2,r2,-1
    75a0:	80800215 	stw	r2,8(r16)
    75a4:	10000c16 	blt	r2,zero,75d8 <putc+0x74>
    75a8:	80800017 	ldw	r2,0(r16)
    75ac:	14800005 	stb	r18,0(r2)
    75b0:	80800017 	ldw	r2,0(r16)
    75b4:	10c00044 	addi	r3,r2,1
    75b8:	80c00015 	stw	r3,0(r16)
    75bc:	10800003 	ldbu	r2,0(r2)
    75c0:	dfc00317 	ldw	ra,12(sp)
    75c4:	dc800217 	ldw	r18,8(sp)
    75c8:	dc400117 	ldw	r17,4(sp)
    75cc:	dc000017 	ldw	r16,0(sp)
    75d0:	dec00404 	addi	sp,sp,16
    75d4:	f800283a 	ret
    75d8:	80c00617 	ldw	r3,24(r16)
    75dc:	10c00b16 	blt	r2,r3,760c <putc+0xa8>
    75e0:	80800017 	ldw	r2,0(r16)
    75e4:	00c00284 	movi	r3,10
    75e8:	14800005 	stb	r18,0(r2)
    75ec:	80800017 	ldw	r2,0(r16)
    75f0:	11400003 	ldbu	r5,0(r2)
    75f4:	28ffef1e 	bne	r5,r3,75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    75f8:	8809883a 	mov	r4,r17
    75fc:	00000506 	br	7614 <putc+0xb0>
    7600:	8809883a 	mov	r4,r17
    7604:	0004b980 	call	4b98 <__sinit>
    7608:	003fe306 	br	7598 <__alt_mem_Flash_flash_data+0xf4007598>
    760c:	8809883a 	mov	r4,r17
    7610:	900b883a 	mov	r5,r18
    7614:	800d883a 	mov	r6,r16
    7618:	dfc00317 	ldw	ra,12(sp)
    761c:	dc800217 	ldw	r18,8(sp)
    7620:	dc400117 	ldw	r17,4(sp)
    7624:	dc000017 	ldw	r16,0(sp)
    7628:	dec00404 	addi	sp,sp,16
    762c:	00092601 	jmpi	9260 <__swbuf_r>

00007630 <_realloc_r>:
    7630:	defff604 	addi	sp,sp,-40
    7634:	dd000415 	stw	r20,16(sp)
    7638:	dc400115 	stw	r17,4(sp)
    763c:	dfc00915 	stw	ra,36(sp)
    7640:	df000815 	stw	fp,32(sp)
    7644:	ddc00715 	stw	r23,28(sp)
    7648:	dd800615 	stw	r22,24(sp)
    764c:	dd400515 	stw	r21,20(sp)
    7650:	dcc00315 	stw	r19,12(sp)
    7654:	dc800215 	stw	r18,8(sp)
    7658:	dc000015 	stw	r16,0(sp)
    765c:	2829883a 	mov	r20,r5
    7660:	3023883a 	mov	r17,r6
    7664:	2800ad26 	beq	r5,zero,791c <_realloc_r+0x2ec>
    7668:	2025883a 	mov	r18,r4
    766c:	000d8b00 	call	d8b0 <__malloc_lock>
    7670:	a0ffff17 	ldw	r3,-4(r20)
    7674:	043fff04 	movi	r16,-4
    7678:	890002c4 	addi	r4,r17,11
    767c:	01c00584 	movi	r7,22
    7680:	a57ffe04 	addi	r21,r20,-8
    7684:	1c20703a 	and	r16,r3,r16
    7688:	39001d2e 	bgeu	r7,r4,7700 <_realloc_r+0xd0>
    768c:	05bffe04 	movi	r22,-8
    7690:	25ac703a 	and	r22,r4,r22
    7694:	b00f883a 	mov	r7,r22
    7698:	b0006516 	blt	r22,zero,7830 <_realloc_r+0x200>
    769c:	b4406436 	bltu	r22,r17,7830 <_realloc_r+0x200>
    76a0:	81c01a0e 	bge	r16,r7,770c <_realloc_r+0xdc>
    76a4:	070000b4 	movhi	fp,2
    76a8:	e729e404 	addi	fp,fp,-22640
    76ac:	e1400217 	ldw	r5,8(fp)
    76b0:	ac11883a 	add	r8,r21,r16
    76b4:	2a006226 	beq	r5,r8,7840 <_realloc_r+0x210>
    76b8:	41800117 	ldw	r6,4(r8)
    76bc:	027fff84 	movi	r9,-2
    76c0:	3252703a 	and	r9,r6,r9
    76c4:	4253883a 	add	r9,r8,r9
    76c8:	49000117 	ldw	r4,4(r9)
    76cc:	2100004c 	andi	r4,r4,1
    76d0:	2000281e 	bne	r4,zero,7774 <_realloc_r+0x144>
    76d4:	00bfff04 	movi	r2,-4
    76d8:	3084703a 	and	r2,r6,r2
    76dc:	1409883a 	add	r4,r2,r16
    76e0:	21c05e16 	blt	r4,r7,785c <_realloc_r+0x22c>
    76e4:	40800317 	ldw	r2,12(r8)
    76e8:	41400217 	ldw	r5,8(r8)
    76ec:	a023883a 	mov	r17,r20
    76f0:	2021883a 	mov	r16,r4
    76f4:	28800315 	stw	r2,12(r5)
    76f8:	11400215 	stw	r5,8(r2)
    76fc:	00000406 	br	7710 <_realloc_r+0xe0>
    7700:	01c00404 	movi	r7,16
    7704:	382d883a 	mov	r22,r7
    7708:	003fe406 	br	769c <__alt_mem_Flash_flash_data+0xf400769c>
    770c:	a023883a 	mov	r17,r20
    7710:	858fc83a 	sub	r7,r16,r22
    7714:	008003c4 	movi	r2,15
    7718:	18c0004c 	andi	r3,r3,1
    771c:	11c07236 	bltu	r2,r7,78e8 <_realloc_r+0x2b8>
    7720:	1c06b03a 	or	r3,r3,r16
    7724:	a8c00115 	stw	r3,4(r21)
    7728:	ac21883a 	add	r16,r21,r16
    772c:	80800117 	ldw	r2,4(r16)
    7730:	10800054 	ori	r2,r2,1
    7734:	80800115 	stw	r2,4(r16)
    7738:	9009883a 	mov	r4,r18
    773c:	000d9d00 	call	d9d0 <__malloc_unlock>
    7740:	8805883a 	mov	r2,r17
    7744:	dfc00917 	ldw	ra,36(sp)
    7748:	df000817 	ldw	fp,32(sp)
    774c:	ddc00717 	ldw	r23,28(sp)
    7750:	dd800617 	ldw	r22,24(sp)
    7754:	dd400517 	ldw	r21,20(sp)
    7758:	dd000417 	ldw	r20,16(sp)
    775c:	dcc00317 	ldw	r19,12(sp)
    7760:	dc800217 	ldw	r18,8(sp)
    7764:	dc400117 	ldw	r17,4(sp)
    7768:	dc000017 	ldw	r16,0(sp)
    776c:	dec00a04 	addi	sp,sp,40
    7770:	f800283a 	ret
    7774:	18c0004c 	andi	r3,r3,1
    7778:	1800081e 	bne	r3,zero,779c <_realloc_r+0x16c>
    777c:	a4fffe17 	ldw	r19,-8(r20)
    7780:	00bfff04 	movi	r2,-4
    7784:	ace7c83a 	sub	r19,r21,r19
    7788:	98c00117 	ldw	r3,4(r19)
    778c:	1886703a 	and	r3,r3,r2
    7790:	98000226 	beq	r19,zero,779c <_realloc_r+0x16c>
    7794:	1c2f883a 	add	r23,r3,r16
    7798:	b9c06d0e 	bge	r23,r7,7950 <_realloc_r+0x320>
    779c:	880b883a 	mov	r5,r17
    77a0:	9009883a 	mov	r4,r18
    77a4:	00058dc0 	call	58dc <_malloc_r>
    77a8:	1023883a 	mov	r17,r2
    77ac:	1000ef26 	beq	r2,zero,7b6c <_realloc_r+0x53c>
    77b0:	a0ffff17 	ldw	r3,-4(r20)
    77b4:	113ffe04 	addi	r4,r2,-8
    77b8:	00bfff84 	movi	r2,-2
    77bc:	1884703a 	and	r2,r3,r2
    77c0:	a885883a 	add	r2,r21,r2
    77c4:	2080bf26 	beq	r4,r2,7ac4 <_realloc_r+0x494>
    77c8:	81bfff04 	addi	r6,r16,-4
    77cc:	00800904 	movi	r2,36
    77d0:	11808936 	bltu	r2,r6,79f8 <_realloc_r+0x3c8>
    77d4:	00c004c4 	movi	r3,19
    77d8:	19806c2e 	bgeu	r3,r6,798c <_realloc_r+0x35c>
    77dc:	a0c00017 	ldw	r3,0(r20)
    77e0:	88c00015 	stw	r3,0(r17)
    77e4:	a0c00117 	ldw	r3,4(r20)
    77e8:	88c00115 	stw	r3,4(r17)
    77ec:	00c006c4 	movi	r3,27
    77f0:	1980ac36 	bltu	r3,r6,7aa4 <_realloc_r+0x474>
    77f4:	88800204 	addi	r2,r17,8
    77f8:	a0c00204 	addi	r3,r20,8
    77fc:	19000017 	ldw	r4,0(r3)
    7800:	11000015 	stw	r4,0(r2)
    7804:	19000117 	ldw	r4,4(r3)
    7808:	11000115 	stw	r4,4(r2)
    780c:	18c00217 	ldw	r3,8(r3)
    7810:	10c00215 	stw	r3,8(r2)
    7814:	a00b883a 	mov	r5,r20
    7818:	9009883a 	mov	r4,r18
    781c:	0004d0c0 	call	4d0c <_free_r>
    7820:	9009883a 	mov	r4,r18
    7824:	000d9d00 	call	d9d0 <__malloc_unlock>
    7828:	8805883a 	mov	r2,r17
    782c:	003fc506 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7830:	00800304 	movi	r2,12
    7834:	90800015 	stw	r2,0(r18)
    7838:	0005883a 	mov	r2,zero
    783c:	003fc106 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7840:	29800117 	ldw	r6,4(r5)
    7844:	00bfff04 	movi	r2,-4
    7848:	b1000404 	addi	r4,r22,16
    784c:	3084703a 	and	r2,r6,r2
    7850:	140d883a 	add	r6,r2,r16
    7854:	31005b0e 	bge	r6,r4,79c4 <_realloc_r+0x394>
    7858:	2811883a 	mov	r8,r5
    785c:	18c0004c 	andi	r3,r3,1
    7860:	183fce1e 	bne	r3,zero,779c <__alt_mem_Flash_flash_data+0xf400779c>
    7864:	a4fffe17 	ldw	r19,-8(r20)
    7868:	00ffff04 	movi	r3,-4
    786c:	ace7c83a 	sub	r19,r21,r19
    7870:	99000117 	ldw	r4,4(r19)
    7874:	20c6703a 	and	r3,r4,r3
    7878:	403fc526 	beq	r8,zero,7790 <__alt_mem_Flash_flash_data+0xf4007790>
    787c:	1c2f883a 	add	r23,r3,r16
    7880:	b8af883a 	add	r23,r23,r2
    7884:	41406026 	beq	r8,r5,7a08 <_realloc_r+0x3d8>
    7888:	b9ffc116 	blt	r23,r7,7790 <__alt_mem_Flash_flash_data+0xf4007790>
    788c:	40c00217 	ldw	r3,8(r8)
    7890:	40800317 	ldw	r2,12(r8)
    7894:	81bfff04 	addi	r6,r16,-4
    7898:	01000904 	movi	r4,36
    789c:	18800315 	stw	r2,12(r3)
    78a0:	10c00215 	stw	r3,8(r2)
    78a4:	99400217 	ldw	r5,8(r19)
    78a8:	98c00317 	ldw	r3,12(r19)
    78ac:	9c400204 	addi	r17,r19,8
    78b0:	28c00315 	stw	r3,12(r5)
    78b4:	19400215 	stw	r5,8(r3)
    78b8:	21802d36 	bltu	r4,r6,7970 <_realloc_r+0x340>
    78bc:	008004c4 	movi	r2,19
    78c0:	1180352e 	bgeu	r2,r6,7998 <_realloc_r+0x368>
    78c4:	a0800017 	ldw	r2,0(r20)
    78c8:	98800215 	stw	r2,8(r19)
    78cc:	a0800117 	ldw	r2,4(r20)
    78d0:	98800315 	stw	r2,12(r19)
    78d4:	008006c4 	movi	r2,27
    78d8:	11808036 	bltu	r2,r6,7adc <_realloc_r+0x4ac>
    78dc:	98c00404 	addi	r3,r19,16
    78e0:	a5000204 	addi	r20,r20,8
    78e4:	00002d06 	br	799c <_realloc_r+0x36c>
    78e8:	1d86b03a 	or	r3,r3,r22
    78ec:	ad8b883a 	add	r5,r21,r22
    78f0:	a8c00115 	stw	r3,4(r21)
    78f4:	38800054 	ori	r2,r7,1
    78f8:	28800115 	stw	r2,4(r5)
    78fc:	29cf883a 	add	r7,r5,r7
    7900:	38800117 	ldw	r2,4(r7)
    7904:	9009883a 	mov	r4,r18
    7908:	29400204 	addi	r5,r5,8
    790c:	10800054 	ori	r2,r2,1
    7910:	38800115 	stw	r2,4(r7)
    7914:	0004d0c0 	call	4d0c <_free_r>
    7918:	003f8706 	br	7738 <__alt_mem_Flash_flash_data+0xf4007738>
    791c:	300b883a 	mov	r5,r6
    7920:	dfc00917 	ldw	ra,36(sp)
    7924:	df000817 	ldw	fp,32(sp)
    7928:	ddc00717 	ldw	r23,28(sp)
    792c:	dd800617 	ldw	r22,24(sp)
    7930:	dd400517 	ldw	r21,20(sp)
    7934:	dd000417 	ldw	r20,16(sp)
    7938:	dcc00317 	ldw	r19,12(sp)
    793c:	dc800217 	ldw	r18,8(sp)
    7940:	dc400117 	ldw	r17,4(sp)
    7944:	dc000017 	ldw	r16,0(sp)
    7948:	dec00a04 	addi	sp,sp,40
    794c:	00058dc1 	jmpi	58dc <_malloc_r>
    7950:	98800317 	ldw	r2,12(r19)
    7954:	98c00217 	ldw	r3,8(r19)
    7958:	81bfff04 	addi	r6,r16,-4
    795c:	01000904 	movi	r4,36
    7960:	18800315 	stw	r2,12(r3)
    7964:	10c00215 	stw	r3,8(r2)
    7968:	9c400204 	addi	r17,r19,8
    796c:	21bfd32e 	bgeu	r4,r6,78bc <__alt_mem_Flash_flash_data+0xf40078bc>
    7970:	8809883a 	mov	r4,r17
    7974:	a00b883a 	mov	r5,r20
    7978:	00062a40 	call	62a4 <memmove>
    797c:	98c00117 	ldw	r3,4(r19)
    7980:	b821883a 	mov	r16,r23
    7984:	982b883a 	mov	r21,r19
    7988:	003f6106 	br	7710 <__alt_mem_Flash_flash_data+0xf4007710>
    798c:	8805883a 	mov	r2,r17
    7990:	a007883a 	mov	r3,r20
    7994:	003f9906 	br	77fc <__alt_mem_Flash_flash_data+0xf40077fc>
    7998:	8807883a 	mov	r3,r17
    799c:	a0800017 	ldw	r2,0(r20)
    79a0:	b821883a 	mov	r16,r23
    79a4:	982b883a 	mov	r21,r19
    79a8:	18800015 	stw	r2,0(r3)
    79ac:	a0800117 	ldw	r2,4(r20)
    79b0:	18800115 	stw	r2,4(r3)
    79b4:	a0800217 	ldw	r2,8(r20)
    79b8:	18800215 	stw	r2,8(r3)
    79bc:	98c00117 	ldw	r3,4(r19)
    79c0:	003f5306 	br	7710 <__alt_mem_Flash_flash_data+0xf4007710>
    79c4:	adab883a 	add	r21,r21,r22
    79c8:	3585c83a 	sub	r2,r6,r22
    79cc:	e5400215 	stw	r21,8(fp)
    79d0:	10800054 	ori	r2,r2,1
    79d4:	a8800115 	stw	r2,4(r21)
    79d8:	a0bfff17 	ldw	r2,-4(r20)
    79dc:	9009883a 	mov	r4,r18
    79e0:	1080004c 	andi	r2,r2,1
    79e4:	b0acb03a 	or	r22,r22,r2
    79e8:	a5bfff15 	stw	r22,-4(r20)
    79ec:	000d9d00 	call	d9d0 <__malloc_unlock>
    79f0:	a005883a 	mov	r2,r20
    79f4:	003f5306 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    79f8:	8809883a 	mov	r4,r17
    79fc:	a00b883a 	mov	r5,r20
    7a00:	00062a40 	call	62a4 <memmove>
    7a04:	003f8306 	br	7814 <__alt_mem_Flash_flash_data+0xf4007814>
    7a08:	b0800404 	addi	r2,r22,16
    7a0c:	b8bf6016 	blt	r23,r2,7790 <__alt_mem_Flash_flash_data+0xf4007790>
    7a10:	98800317 	ldw	r2,12(r19)
    7a14:	98c00217 	ldw	r3,8(r19)
    7a18:	81bfff04 	addi	r6,r16,-4
    7a1c:	01000904 	movi	r4,36
    7a20:	18800315 	stw	r2,12(r3)
    7a24:	10c00215 	stw	r3,8(r2)
    7a28:	9c400204 	addi	r17,r19,8
    7a2c:	21804336 	bltu	r4,r6,7b3c <_realloc_r+0x50c>
    7a30:	008004c4 	movi	r2,19
    7a34:	11803f2e 	bgeu	r2,r6,7b34 <_realloc_r+0x504>
    7a38:	a0800017 	ldw	r2,0(r20)
    7a3c:	98800215 	stw	r2,8(r19)
    7a40:	a0800117 	ldw	r2,4(r20)
    7a44:	98800315 	stw	r2,12(r19)
    7a48:	008006c4 	movi	r2,27
    7a4c:	11803f36 	bltu	r2,r6,7b4c <_realloc_r+0x51c>
    7a50:	98800404 	addi	r2,r19,16
    7a54:	a5000204 	addi	r20,r20,8
    7a58:	a0c00017 	ldw	r3,0(r20)
    7a5c:	10c00015 	stw	r3,0(r2)
    7a60:	a0c00117 	ldw	r3,4(r20)
    7a64:	10c00115 	stw	r3,4(r2)
    7a68:	a0c00217 	ldw	r3,8(r20)
    7a6c:	10c00215 	stw	r3,8(r2)
    7a70:	9d87883a 	add	r3,r19,r22
    7a74:	bd85c83a 	sub	r2,r23,r22
    7a78:	e0c00215 	stw	r3,8(fp)
    7a7c:	10800054 	ori	r2,r2,1
    7a80:	18800115 	stw	r2,4(r3)
    7a84:	98800117 	ldw	r2,4(r19)
    7a88:	9009883a 	mov	r4,r18
    7a8c:	1080004c 	andi	r2,r2,1
    7a90:	b0acb03a 	or	r22,r22,r2
    7a94:	9d800115 	stw	r22,4(r19)
    7a98:	000d9d00 	call	d9d0 <__malloc_unlock>
    7a9c:	8805883a 	mov	r2,r17
    7aa0:	003f2806 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7aa4:	a0c00217 	ldw	r3,8(r20)
    7aa8:	88c00215 	stw	r3,8(r17)
    7aac:	a0c00317 	ldw	r3,12(r20)
    7ab0:	88c00315 	stw	r3,12(r17)
    7ab4:	30801126 	beq	r6,r2,7afc <_realloc_r+0x4cc>
    7ab8:	88800404 	addi	r2,r17,16
    7abc:	a0c00404 	addi	r3,r20,16
    7ac0:	003f4e06 	br	77fc <__alt_mem_Flash_flash_data+0xf40077fc>
    7ac4:	893fff17 	ldw	r4,-4(r17)
    7ac8:	00bfff04 	movi	r2,-4
    7acc:	a023883a 	mov	r17,r20
    7ad0:	2084703a 	and	r2,r4,r2
    7ad4:	80a1883a 	add	r16,r16,r2
    7ad8:	003f0d06 	br	7710 <__alt_mem_Flash_flash_data+0xf4007710>
    7adc:	a0800217 	ldw	r2,8(r20)
    7ae0:	98800415 	stw	r2,16(r19)
    7ae4:	a0800317 	ldw	r2,12(r20)
    7ae8:	98800515 	stw	r2,20(r19)
    7aec:	31000a26 	beq	r6,r4,7b18 <_realloc_r+0x4e8>
    7af0:	98c00604 	addi	r3,r19,24
    7af4:	a5000404 	addi	r20,r20,16
    7af8:	003fa806 	br	799c <__alt_mem_Flash_flash_data+0xf400799c>
    7afc:	a1000417 	ldw	r4,16(r20)
    7b00:	88800604 	addi	r2,r17,24
    7b04:	a0c00604 	addi	r3,r20,24
    7b08:	89000415 	stw	r4,16(r17)
    7b0c:	a1000517 	ldw	r4,20(r20)
    7b10:	89000515 	stw	r4,20(r17)
    7b14:	003f3906 	br	77fc <__alt_mem_Flash_flash_data+0xf40077fc>
    7b18:	a0800417 	ldw	r2,16(r20)
    7b1c:	a5000604 	addi	r20,r20,24
    7b20:	98c00804 	addi	r3,r19,32
    7b24:	98800615 	stw	r2,24(r19)
    7b28:	a0bfff17 	ldw	r2,-4(r20)
    7b2c:	98800715 	stw	r2,28(r19)
    7b30:	003f9a06 	br	799c <__alt_mem_Flash_flash_data+0xf400799c>
    7b34:	8805883a 	mov	r2,r17
    7b38:	003fc706 	br	7a58 <__alt_mem_Flash_flash_data+0xf4007a58>
    7b3c:	8809883a 	mov	r4,r17
    7b40:	a00b883a 	mov	r5,r20
    7b44:	00062a40 	call	62a4 <memmove>
    7b48:	003fc906 	br	7a70 <__alt_mem_Flash_flash_data+0xf4007a70>
    7b4c:	a0800217 	ldw	r2,8(r20)
    7b50:	98800415 	stw	r2,16(r19)
    7b54:	a0800317 	ldw	r2,12(r20)
    7b58:	98800515 	stw	r2,20(r19)
    7b5c:	31000726 	beq	r6,r4,7b7c <_realloc_r+0x54c>
    7b60:	98800604 	addi	r2,r19,24
    7b64:	a5000404 	addi	r20,r20,16
    7b68:	003fbb06 	br	7a58 <__alt_mem_Flash_flash_data+0xf4007a58>
    7b6c:	9009883a 	mov	r4,r18
    7b70:	000d9d00 	call	d9d0 <__malloc_unlock>
    7b74:	0005883a 	mov	r2,zero
    7b78:	003ef206 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>
    7b7c:	a0c00417 	ldw	r3,16(r20)
    7b80:	a5000604 	addi	r20,r20,24
    7b84:	98800804 	addi	r2,r19,32
    7b88:	98c00615 	stw	r3,24(r19)
    7b8c:	a0ffff17 	ldw	r3,-4(r20)
    7b90:	98c00715 	stw	r3,28(r19)
    7b94:	003fb006 	br	7a58 <__alt_mem_Flash_flash_data+0xf4007a58>

00007b98 <__fpclassifyd>:
    7b98:	00a00034 	movhi	r2,32768
    7b9c:	10bfffc4 	addi	r2,r2,-1
    7ba0:	2884703a 	and	r2,r5,r2
    7ba4:	10000726 	beq	r2,zero,7bc4 <__fpclassifyd+0x2c>
    7ba8:	00fffc34 	movhi	r3,65520
    7bac:	019ff834 	movhi	r6,32736
    7bb0:	28c7883a 	add	r3,r5,r3
    7bb4:	31bfffc4 	addi	r6,r6,-1
    7bb8:	30c00536 	bltu	r6,r3,7bd0 <__fpclassifyd+0x38>
    7bbc:	00800104 	movi	r2,4
    7bc0:	f800283a 	ret
    7bc4:	2000021e 	bne	r4,zero,7bd0 <__fpclassifyd+0x38>
    7bc8:	00800084 	movi	r2,2
    7bcc:	f800283a 	ret
    7bd0:	00dffc34 	movhi	r3,32752
    7bd4:	019ff834 	movhi	r6,32736
    7bd8:	28cb883a 	add	r5,r5,r3
    7bdc:	31bfffc4 	addi	r6,r6,-1
    7be0:	317ff62e 	bgeu	r6,r5,7bbc <__alt_mem_Flash_flash_data+0xf4007bbc>
    7be4:	01400434 	movhi	r5,16
    7be8:	297fffc4 	addi	r5,r5,-1
    7bec:	28800236 	bltu	r5,r2,7bf8 <__fpclassifyd+0x60>
    7bf0:	008000c4 	movi	r2,3
    7bf4:	f800283a 	ret
    7bf8:	10c00226 	beq	r2,r3,7c04 <__fpclassifyd+0x6c>
    7bfc:	0005883a 	mov	r2,zero
    7c00:	f800283a 	ret
    7c04:	2005003a 	cmpeq	r2,r4,zero
    7c08:	f800283a 	ret

00007c0c <_sbrk_r>:
    7c0c:	defffd04 	addi	sp,sp,-12
    7c10:	dc000015 	stw	r16,0(sp)
    7c14:	040000b4 	movhi	r16,2
    7c18:	dc400115 	stw	r17,4(sp)
    7c1c:	8439b104 	addi	r16,r16,-6460
    7c20:	2023883a 	mov	r17,r4
    7c24:	2809883a 	mov	r4,r5
    7c28:	dfc00215 	stw	ra,8(sp)
    7c2c:	80000015 	stw	zero,0(r16)
    7c30:	000d59c0 	call	d59c <sbrk>
    7c34:	00ffffc4 	movi	r3,-1
    7c38:	10c00526 	beq	r2,r3,7c50 <_sbrk_r+0x44>
    7c3c:	dfc00217 	ldw	ra,8(sp)
    7c40:	dc400117 	ldw	r17,4(sp)
    7c44:	dc000017 	ldw	r16,0(sp)
    7c48:	dec00304 	addi	sp,sp,12
    7c4c:	f800283a 	ret
    7c50:	80c00017 	ldw	r3,0(r16)
    7c54:	183ff926 	beq	r3,zero,7c3c <__alt_mem_Flash_flash_data+0xf4007c3c>
    7c58:	88c00015 	stw	r3,0(r17)
    7c5c:	003ff706 	br	7c3c <__alt_mem_Flash_flash_data+0xf4007c3c>

00007c60 <__sread>:
    7c60:	defffe04 	addi	sp,sp,-8
    7c64:	dc000015 	stw	r16,0(sp)
    7c68:	2821883a 	mov	r16,r5
    7c6c:	2940038f 	ldh	r5,14(r5)
    7c70:	dfc00115 	stw	ra,4(sp)
    7c74:	00099140 	call	9914 <_read_r>
    7c78:	10000716 	blt	r2,zero,7c98 <__sread+0x38>
    7c7c:	80c01417 	ldw	r3,80(r16)
    7c80:	1887883a 	add	r3,r3,r2
    7c84:	80c01415 	stw	r3,80(r16)
    7c88:	dfc00117 	ldw	ra,4(sp)
    7c8c:	dc000017 	ldw	r16,0(sp)
    7c90:	dec00204 	addi	sp,sp,8
    7c94:	f800283a 	ret
    7c98:	80c0030b 	ldhu	r3,12(r16)
    7c9c:	18fbffcc 	andi	r3,r3,61439
    7ca0:	80c0030d 	sth	r3,12(r16)
    7ca4:	dfc00117 	ldw	ra,4(sp)
    7ca8:	dc000017 	ldw	r16,0(sp)
    7cac:	dec00204 	addi	sp,sp,8
    7cb0:	f800283a 	ret

00007cb4 <__seofread>:
    7cb4:	0005883a 	mov	r2,zero
    7cb8:	f800283a 	ret

00007cbc <__swrite>:
    7cbc:	2880030b 	ldhu	r2,12(r5)
    7cc0:	defffb04 	addi	sp,sp,-20
    7cc4:	dcc00315 	stw	r19,12(sp)
    7cc8:	dc800215 	stw	r18,8(sp)
    7ccc:	dc400115 	stw	r17,4(sp)
    7cd0:	dc000015 	stw	r16,0(sp)
    7cd4:	dfc00415 	stw	ra,16(sp)
    7cd8:	10c0400c 	andi	r3,r2,256
    7cdc:	2821883a 	mov	r16,r5
    7ce0:	2027883a 	mov	r19,r4
    7ce4:	3025883a 	mov	r18,r6
    7ce8:	3823883a 	mov	r17,r7
    7cec:	18000526 	beq	r3,zero,7d04 <__swrite+0x48>
    7cf0:	2940038f 	ldh	r5,14(r5)
    7cf4:	000d883a 	mov	r6,zero
    7cf8:	01c00084 	movi	r7,2
    7cfc:	00098b80 	call	98b8 <_lseek_r>
    7d00:	8080030b 	ldhu	r2,12(r16)
    7d04:	8140038f 	ldh	r5,14(r16)
    7d08:	10bbffcc 	andi	r2,r2,61439
    7d0c:	9809883a 	mov	r4,r19
    7d10:	900d883a 	mov	r6,r18
    7d14:	880f883a 	mov	r7,r17
    7d18:	8080030d 	sth	r2,12(r16)
    7d1c:	dfc00417 	ldw	ra,16(sp)
    7d20:	dcc00317 	ldw	r19,12(sp)
    7d24:	dc800217 	ldw	r18,8(sp)
    7d28:	dc400117 	ldw	r17,4(sp)
    7d2c:	dc000017 	ldw	r16,0(sp)
    7d30:	dec00504 	addi	sp,sp,20
    7d34:	00093b41 	jmpi	93b4 <_write_r>

00007d38 <__sseek>:
    7d38:	defffe04 	addi	sp,sp,-8
    7d3c:	dc000015 	stw	r16,0(sp)
    7d40:	2821883a 	mov	r16,r5
    7d44:	2940038f 	ldh	r5,14(r5)
    7d48:	dfc00115 	stw	ra,4(sp)
    7d4c:	00098b80 	call	98b8 <_lseek_r>
    7d50:	00ffffc4 	movi	r3,-1
    7d54:	10c00826 	beq	r2,r3,7d78 <__sseek+0x40>
    7d58:	80c0030b 	ldhu	r3,12(r16)
    7d5c:	80801415 	stw	r2,80(r16)
    7d60:	18c40014 	ori	r3,r3,4096
    7d64:	80c0030d 	sth	r3,12(r16)
    7d68:	dfc00117 	ldw	ra,4(sp)
    7d6c:	dc000017 	ldw	r16,0(sp)
    7d70:	dec00204 	addi	sp,sp,8
    7d74:	f800283a 	ret
    7d78:	80c0030b 	ldhu	r3,12(r16)
    7d7c:	18fbffcc 	andi	r3,r3,61439
    7d80:	80c0030d 	sth	r3,12(r16)
    7d84:	dfc00117 	ldw	ra,4(sp)
    7d88:	dc000017 	ldw	r16,0(sp)
    7d8c:	dec00204 	addi	sp,sp,8
    7d90:	f800283a 	ret

00007d94 <__sclose>:
    7d94:	2940038f 	ldh	r5,14(r5)
    7d98:	00094101 	jmpi	9410 <_close_r>

00007d9c <__sprint_r.part.0>:
    7d9c:	28801917 	ldw	r2,100(r5)
    7da0:	defff604 	addi	sp,sp,-40
    7da4:	dd400515 	stw	r21,20(sp)
    7da8:	dcc00315 	stw	r19,12(sp)
    7dac:	dfc00915 	stw	ra,36(sp)
    7db0:	df000815 	stw	fp,32(sp)
    7db4:	ddc00715 	stw	r23,28(sp)
    7db8:	dd800615 	stw	r22,24(sp)
    7dbc:	dd000415 	stw	r20,16(sp)
    7dc0:	dc800215 	stw	r18,8(sp)
    7dc4:	dc400115 	stw	r17,4(sp)
    7dc8:	dc000015 	stw	r16,0(sp)
    7dcc:	1088000c 	andi	r2,r2,8192
    7dd0:	2827883a 	mov	r19,r5
    7dd4:	302b883a 	mov	r21,r6
    7dd8:	10002d26 	beq	r2,zero,7e90 <__sprint_r.part.0+0xf4>
    7ddc:	30800217 	ldw	r2,8(r6)
    7de0:	35800017 	ldw	r22,0(r6)
    7de4:	10002826 	beq	r2,zero,7e88 <__sprint_r.part.0+0xec>
    7de8:	2029883a 	mov	r20,r4
    7dec:	b5c00104 	addi	r23,r22,4
    7df0:	04bfffc4 	movi	r18,-1
    7df4:	bc400017 	ldw	r17,0(r23)
    7df8:	b4000017 	ldw	r16,0(r22)
    7dfc:	0039883a 	mov	fp,zero
    7e00:	8822d0ba 	srli	r17,r17,2
    7e04:	04400316 	blt	zero,r17,7e14 <__sprint_r.part.0+0x78>
    7e08:	00001806 	br	7e6c <__sprint_r.part.0+0xd0>
    7e0c:	84000104 	addi	r16,r16,4
    7e10:	8f001526 	beq	r17,fp,7e68 <__sprint_r.part.0+0xcc>
    7e14:	81400017 	ldw	r5,0(r16)
    7e18:	a009883a 	mov	r4,r20
    7e1c:	980d883a 	mov	r6,r19
    7e20:	000962c0 	call	962c <_fputwc_r>
    7e24:	e7000044 	addi	fp,fp,1
    7e28:	14bff81e 	bne	r2,r18,7e0c <__alt_mem_Flash_flash_data+0xf4007e0c>
    7e2c:	9005883a 	mov	r2,r18
    7e30:	a8000215 	stw	zero,8(r21)
    7e34:	a8000115 	stw	zero,4(r21)
    7e38:	dfc00917 	ldw	ra,36(sp)
    7e3c:	df000817 	ldw	fp,32(sp)
    7e40:	ddc00717 	ldw	r23,28(sp)
    7e44:	dd800617 	ldw	r22,24(sp)
    7e48:	dd400517 	ldw	r21,20(sp)
    7e4c:	dd000417 	ldw	r20,16(sp)
    7e50:	dcc00317 	ldw	r19,12(sp)
    7e54:	dc800217 	ldw	r18,8(sp)
    7e58:	dc400117 	ldw	r17,4(sp)
    7e5c:	dc000017 	ldw	r16,0(sp)
    7e60:	dec00a04 	addi	sp,sp,40
    7e64:	f800283a 	ret
    7e68:	a8800217 	ldw	r2,8(r21)
    7e6c:	8c63883a 	add	r17,r17,r17
    7e70:	8c63883a 	add	r17,r17,r17
    7e74:	1445c83a 	sub	r2,r2,r17
    7e78:	a8800215 	stw	r2,8(r21)
    7e7c:	b5800204 	addi	r22,r22,8
    7e80:	bdc00204 	addi	r23,r23,8
    7e84:	103fdb1e 	bne	r2,zero,7df4 <__alt_mem_Flash_flash_data+0xf4007df4>
    7e88:	0005883a 	mov	r2,zero
    7e8c:	003fe806 	br	7e30 <__alt_mem_Flash_flash_data+0xf4007e30>
    7e90:	0004ffc0 	call	4ffc <__sfvwrite_r>
    7e94:	003fe606 	br	7e30 <__alt_mem_Flash_flash_data+0xf4007e30>

00007e98 <__sprint_r>:
    7e98:	30c00217 	ldw	r3,8(r6)
    7e9c:	18000126 	beq	r3,zero,7ea4 <__sprint_r+0xc>
    7ea0:	0007d9c1 	jmpi	7d9c <__sprint_r.part.0>
    7ea4:	30000115 	stw	zero,4(r6)
    7ea8:	0005883a 	mov	r2,zero
    7eac:	f800283a 	ret

00007eb0 <___vfiprintf_internal_r>:
    7eb0:	deffca04 	addi	sp,sp,-216
    7eb4:	dd803215 	stw	r22,200(sp)
    7eb8:	dd403115 	stw	r21,196(sp)
    7ebc:	dfc03515 	stw	ra,212(sp)
    7ec0:	df003415 	stw	fp,208(sp)
    7ec4:	ddc03315 	stw	r23,204(sp)
    7ec8:	dd003015 	stw	r20,192(sp)
    7ecc:	dcc02f15 	stw	r19,188(sp)
    7ed0:	dc802e15 	stw	r18,184(sp)
    7ed4:	dc402d15 	stw	r17,180(sp)
    7ed8:	dc002c15 	stw	r16,176(sp)
    7edc:	d9002015 	stw	r4,128(sp)
    7ee0:	d9c02215 	stw	r7,136(sp)
    7ee4:	282b883a 	mov	r21,r5
    7ee8:	302d883a 	mov	r22,r6
    7eec:	20000226 	beq	r4,zero,7ef8 <___vfiprintf_internal_r+0x48>
    7ef0:	20800e17 	ldw	r2,56(r4)
    7ef4:	1001b126 	beq	r2,zero,85bc <___vfiprintf_internal_r+0x70c>
    7ef8:	a880030b 	ldhu	r2,12(r21)
    7efc:	10c8000c 	andi	r3,r2,8192
    7f00:	1800061e 	bne	r3,zero,7f1c <___vfiprintf_internal_r+0x6c>
    7f04:	a9001917 	ldw	r4,100(r21)
    7f08:	00f7ffc4 	movi	r3,-8193
    7f0c:	10880014 	ori	r2,r2,8192
    7f10:	20c6703a 	and	r3,r4,r3
    7f14:	a880030d 	sth	r2,12(r21)
    7f18:	a8c01915 	stw	r3,100(r21)
    7f1c:	10c0020c 	andi	r3,r2,8
    7f20:	18018926 	beq	r3,zero,8548 <___vfiprintf_internal_r+0x698>
    7f24:	a8c00417 	ldw	r3,16(r21)
    7f28:	18018726 	beq	r3,zero,8548 <___vfiprintf_internal_r+0x698>
    7f2c:	1080068c 	andi	r2,r2,26
    7f30:	00c00284 	movi	r3,10
    7f34:	10c18c26 	beq	r2,r3,8568 <___vfiprintf_internal_r+0x6b8>
    7f38:	d8801a04 	addi	r2,sp,104
    7f3c:	d8c019c4 	addi	r3,sp,103
    7f40:	070000b4 	movhi	fp,2
    7f44:	05c000b4 	movhi	r23,2
    7f48:	10c9c83a 	sub	r4,r2,r3
    7f4c:	e7272f04 	addi	fp,fp,-25412
    7f50:	bde72b04 	addi	r23,r23,-25428
    7f54:	d8801e15 	stw	r2,120(sp)
    7f58:	d8c01f15 	stw	r3,124(sp)
    7f5c:	dec01a15 	stw	sp,104(sp)
    7f60:	d8001c15 	stw	zero,112(sp)
    7f64:	d8001b15 	stw	zero,108(sp)
    7f68:	d8002615 	stw	zero,152(sp)
    7f6c:	d8002315 	stw	zero,140(sp)
    7f70:	d9002715 	stw	r4,156(sp)
    7f74:	d811883a 	mov	r8,sp
    7f78:	dd402115 	stw	r21,132(sp)
    7f7c:	b021883a 	mov	r16,r22
    7f80:	80800007 	ldb	r2,0(r16)
    7f84:	10037226 	beq	r2,zero,8d50 <___vfiprintf_internal_r+0xea0>
    7f88:	01000944 	movi	r4,37
    7f8c:	11037026 	beq	r2,r4,8d50 <___vfiprintf_internal_r+0xea0>
    7f90:	8005883a 	mov	r2,r16
    7f94:	00000106 	br	7f9c <___vfiprintf_internal_r+0xec>
    7f98:	19000326 	beq	r3,r4,7fa8 <___vfiprintf_internal_r+0xf8>
    7f9c:	10800044 	addi	r2,r2,1
    7fa0:	10c00007 	ldb	r3,0(r2)
    7fa4:	183ffc1e 	bne	r3,zero,7f98 <__alt_mem_Flash_flash_data+0xf4007f98>
    7fa8:	1425c83a 	sub	r18,r2,r16
    7fac:	1023883a 	mov	r17,r2
    7fb0:	90001026 	beq	r18,zero,7ff4 <___vfiprintf_internal_r+0x144>
    7fb4:	d8c01c17 	ldw	r3,112(sp)
    7fb8:	d8801b17 	ldw	r2,108(sp)
    7fbc:	44000015 	stw	r16,0(r8)
    7fc0:	90c7883a 	add	r3,r18,r3
    7fc4:	10800044 	addi	r2,r2,1
    7fc8:	44800115 	stw	r18,4(r8)
    7fcc:	d8c01c15 	stw	r3,112(sp)
    7fd0:	d8801b15 	stw	r2,108(sp)
    7fd4:	010001c4 	movi	r4,7
    7fd8:	2080750e 	bge	r4,r2,81b0 <___vfiprintf_internal_r+0x300>
    7fdc:	18036f1e 	bne	r3,zero,8d9c <___vfiprintf_internal_r+0xeec>
    7fe0:	d8802317 	ldw	r2,140(sp)
    7fe4:	d8001b15 	stw	zero,108(sp)
    7fe8:	d811883a 	mov	r8,sp
    7fec:	1485883a 	add	r2,r2,r18
    7ff0:	d8802315 	stw	r2,140(sp)
    7ff4:	88800007 	ldb	r2,0(r17)
    7ff8:	10041026 	beq	r2,zero,903c <___vfiprintf_internal_r+0x118c>
    7ffc:	88c00047 	ldb	r3,1(r17)
    8000:	88800044 	addi	r2,r17,1
    8004:	d8001d85 	stb	zero,118(sp)
    8008:	000f883a 	mov	r7,zero
    800c:	027fffc4 	movi	r9,-1
    8010:	0025883a 	mov	r18,zero
    8014:	002b883a 	mov	r21,zero
    8018:	01401604 	movi	r5,88
    801c:	01800244 	movi	r6,9
    8020:	03400a84 	movi	r13,42
    8024:	03001b04 	movi	r12,108
    8028:	14000044 	addi	r16,r2,1
    802c:	18bff804 	addi	r2,r3,-32
    8030:	28825536 	bltu	r5,r2,8988 <___vfiprintf_internal_r+0xad8>
    8034:	100490ba 	slli	r2,r2,2
    8038:	01000074 	movhi	r4,1
    803c:	21201304 	addi	r4,r4,-32692
    8040:	1105883a 	add	r2,r2,r4
    8044:	10800017 	ldw	r2,0(r2)
    8048:	1000683a 	jmp	r2
    804c:	0000874c 	andi	zero,zero,541
    8050:	00008988 	cmpgei	zero,zero,550
    8054:	00008988 	cmpgei	zero,zero,550
    8058:	0000876c 	andhi	zero,zero,541
    805c:	00008988 	cmpgei	zero,zero,550
    8060:	00008988 	cmpgei	zero,zero,550
    8064:	00008988 	cmpgei	zero,zero,550
    8068:	00008988 	cmpgei	zero,zero,550
    806c:	00008988 	cmpgei	zero,zero,550
    8070:	00008988 	cmpgei	zero,zero,550
    8074:	0000877c 	xorhi	zero,zero,541
    8078:	0000879c 	xori	zero,zero,542
    807c:	00008988 	cmpgei	zero,zero,550
    8080:	000085c4 	movi	zero,535
    8084:	000086b0 	cmpltui	zero,zero,538
    8088:	00008988 	cmpgei	zero,zero,550
    808c:	00008630 	cmpltui	zero,zero,536
    8090:	00008640 	call	864 <binaryToChar+0x48>
    8094:	00008640 	call	864 <binaryToChar+0x48>
    8098:	00008640 	call	864 <binaryToChar+0x48>
    809c:	00008640 	call	864 <binaryToChar+0x48>
    80a0:	00008640 	call	864 <binaryToChar+0x48>
    80a4:	00008640 	call	864 <binaryToChar+0x48>
    80a8:	00008640 	call	864 <binaryToChar+0x48>
    80ac:	00008640 	call	864 <binaryToChar+0x48>
    80b0:	00008640 	call	864 <binaryToChar+0x48>
    80b4:	00008988 	cmpgei	zero,zero,550
    80b8:	00008988 	cmpgei	zero,zero,550
    80bc:	00008988 	cmpgei	zero,zero,550
    80c0:	00008988 	cmpgei	zero,zero,550
    80c4:	00008988 	cmpgei	zero,zero,550
    80c8:	00008988 	cmpgei	zero,zero,550
    80cc:	00008988 	cmpgei	zero,zero,550
    80d0:	00008988 	cmpgei	zero,zero,550
    80d4:	00008988 	cmpgei	zero,zero,550
    80d8:	00008988 	cmpgei	zero,zero,550
    80dc:	0000866c 	andhi	zero,zero,537
    80e0:	00008988 	cmpgei	zero,zero,550
    80e4:	00008988 	cmpgei	zero,zero,550
    80e8:	00008988 	cmpgei	zero,zero,550
    80ec:	00008988 	cmpgei	zero,zero,550
    80f0:	00008988 	cmpgei	zero,zero,550
    80f4:	00008988 	cmpgei	zero,zero,550
    80f8:	00008988 	cmpgei	zero,zero,550
    80fc:	00008988 	cmpgei	zero,zero,550
    8100:	00008988 	cmpgei	zero,zero,550
    8104:	00008988 	cmpgei	zero,zero,550
    8108:	000081f8 	rdprs	zero,zero,519
    810c:	00008988 	cmpgei	zero,zero,550
    8110:	00008988 	cmpgei	zero,zero,550
    8114:	00008988 	cmpgei	zero,zero,550
    8118:	00008988 	cmpgei	zero,zero,550
    811c:	00008988 	cmpgei	zero,zero,550
    8120:	000081c4 	movi	zero,519
    8124:	00008988 	cmpgei	zero,zero,550
    8128:	00008988 	cmpgei	zero,zero,550
    812c:	0000880c 	andi	zero,zero,544
    8130:	00008988 	cmpgei	zero,zero,550
    8134:	00008988 	cmpgei	zero,zero,550
    8138:	00008988 	cmpgei	zero,zero,550
    813c:	00008988 	cmpgei	zero,zero,550
    8140:	00008988 	cmpgei	zero,zero,550
    8144:	00008988 	cmpgei	zero,zero,550
    8148:	00008988 	cmpgei	zero,zero,550
    814c:	00008988 	cmpgei	zero,zero,550
    8150:	00008988 	cmpgei	zero,zero,550
    8154:	00008988 	cmpgei	zero,zero,550
    8158:	000087ac 	andhi	zero,zero,542
    815c:	000087d8 	cmpnei	zero,zero,543
    8160:	00008988 	cmpgei	zero,zero,550
    8164:	00008988 	cmpgei	zero,zero,550
    8168:	00008988 	cmpgei	zero,zero,550
    816c:	000088b4 	movhi	zero,546
    8170:	000087d8 	cmpnei	zero,zero,543
    8174:	00008988 	cmpgei	zero,zero,550
    8178:	00008988 	cmpgei	zero,zero,550
    817c:	000088c4 	movi	zero,547
    8180:	00008988 	cmpgei	zero,zero,550
    8184:	000086f0 	cmpltui	zero,zero,539
    8188:	000081fc 	xorhi	zero,zero,519
    818c:	000088d8 	cmpnei	zero,zero,547
    8190:	00008918 	cmpnei	zero,zero,548
    8194:	00008988 	cmpgei	zero,zero,550
    8198:	00008860 	cmpeqi	zero,zero,545
    819c:	00008988 	cmpgei	zero,zero,550
    81a0:	000081c8 	cmpgei	zero,zero,519
    81a4:	00008988 	cmpgei	zero,zero,550
    81a8:	00008988 	cmpgei	zero,zero,550
    81ac:	00008928 	cmpgeui	zero,zero,548
    81b0:	42000204 	addi	r8,r8,8
    81b4:	d8802317 	ldw	r2,140(sp)
    81b8:	1485883a 	add	r2,r2,r18
    81bc:	d8802315 	stw	r2,140(sp)
    81c0:	003f8c06 	br	7ff4 <__alt_mem_Flash_flash_data+0xf4007ff4>
    81c4:	ad400414 	ori	r21,r21,16
    81c8:	a880080c 	andi	r2,r21,32
    81cc:	1001e61e 	bne	r2,zero,8968 <___vfiprintf_internal_r+0xab8>
    81d0:	a880040c 	andi	r2,r21,16
    81d4:	10034726 	beq	r2,zero,8ef4 <___vfiprintf_internal_r+0x1044>
    81d8:	d8802217 	ldw	r2,136(sp)
    81dc:	001b883a 	mov	r13,zero
    81e0:	15800017 	ldw	r22,0(r2)
    81e4:	10800104 	addi	r2,r2,4
    81e8:	d8802215 	stw	r2,136(sp)
    81ec:	b009883a 	mov	r4,r22
    81f0:	00800044 	movi	r2,1
    81f4:	00000c06 	br	8228 <___vfiprintf_internal_r+0x378>
    81f8:	ad400414 	ori	r21,r21,16
    81fc:	a880080c 	andi	r2,r21,32
    8200:	1001491e 	bne	r2,zero,8728 <___vfiprintf_internal_r+0x878>
    8204:	a880040c 	andi	r2,r21,16
    8208:	10032d26 	beq	r2,zero,8ec0 <___vfiprintf_internal_r+0x1010>
    820c:	d9002217 	ldw	r4,136(sp)
    8210:	001b883a 	mov	r13,zero
    8214:	0005883a 	mov	r2,zero
    8218:	25800017 	ldw	r22,0(r4)
    821c:	21000104 	addi	r4,r4,4
    8220:	d9002215 	stw	r4,136(sp)
    8224:	b009883a 	mov	r4,r22
    8228:	d8001d85 	stb	zero,118(sp)
    822c:	4827883a 	mov	r19,r9
    8230:	001d883a 	mov	r14,zero
    8234:	48000216 	blt	r9,zero,8240 <___vfiprintf_internal_r+0x390>
    8238:	00ffdfc4 	movi	r3,-129
    823c:	a8ea703a 	and	r21,r21,r3
    8240:	2002071e 	bne	r4,zero,8a60 <___vfiprintf_internal_r+0xbb0>
    8244:	4802ad26 	beq	r9,zero,8cfc <___vfiprintf_internal_r+0xe4c>
    8248:	10803fcc 	andi	r2,r2,255
    824c:	00c00044 	movi	r3,1
    8250:	10c22b26 	beq	r2,r3,8b00 <___vfiprintf_internal_r+0xc50>
    8254:	00c00084 	movi	r3,2
    8258:	dd001a04 	addi	r20,sp,104
    825c:	10c0dd1e 	bne	r2,r3,85d4 <___vfiprintf_internal_r+0x724>
    8260:	d9002617 	ldw	r4,152(sp)
    8264:	b08003cc 	andi	r2,r22,15
    8268:	6806973a 	slli	r3,r13,28
    826c:	2085883a 	add	r2,r4,r2
    8270:	b02cd13a 	srli	r22,r22,4
    8274:	10800003 	ldbu	r2,0(r2)
    8278:	681ad13a 	srli	r13,r13,4
    827c:	a53fffc4 	addi	r20,r20,-1
    8280:	1dacb03a 	or	r22,r3,r22
    8284:	a0800005 	stb	r2,0(r20)
    8288:	b344b03a 	or	r2,r22,r13
    828c:	103ff51e 	bne	r2,zero,8264 <__alt_mem_Flash_flash_data+0xf4008264>
    8290:	d9001e17 	ldw	r4,120(sp)
    8294:	2527c83a 	sub	r19,r4,r20
    8298:	9823883a 	mov	r17,r19
    829c:	9a40010e 	bge	r19,r9,82a4 <___vfiprintf_internal_r+0x3f4>
    82a0:	4823883a 	mov	r17,r9
    82a4:	73803fcc 	andi	r14,r14,255
    82a8:	7380201c 	xori	r14,r14,128
    82ac:	73bfe004 	addi	r14,r14,-128
    82b0:	70000126 	beq	r14,zero,82b8 <___vfiprintf_internal_r+0x408>
    82b4:	8c400044 	addi	r17,r17,1
    82b8:	ab40008c 	andi	r13,r21,2
    82bc:	68000126 	beq	r13,zero,82c4 <___vfiprintf_internal_r+0x414>
    82c0:	8c400084 	addi	r17,r17,2
    82c4:	ad80210c 	andi	r22,r21,132
    82c8:	b001c51e 	bne	r22,zero,89e0 <___vfiprintf_internal_r+0xb30>
    82cc:	9447c83a 	sub	r3,r18,r17
    82d0:	00c1c30e 	bge	zero,r3,89e0 <___vfiprintf_internal_r+0xb30>
    82d4:	01c00404 	movi	r7,16
    82d8:	d8801c17 	ldw	r2,112(sp)
    82dc:	38c37b0e 	bge	r7,r3,90cc <___vfiprintf_internal_r+0x121c>
    82e0:	010000b4 	movhi	r4,2
    82e4:	21272f04 	addi	r4,r4,-25412
    82e8:	dc002915 	stw	r16,164(sp)
    82ec:	d9801b17 	ldw	r6,108(sp)
    82f0:	d9002415 	stw	r4,144(sp)
    82f4:	03c001c4 	movi	r15,7
    82f8:	da402515 	stw	r9,148(sp)
    82fc:	db402815 	stw	r13,160(sp)
    8300:	1821883a 	mov	r16,r3
    8304:	00000506 	br	831c <___vfiprintf_internal_r+0x46c>
    8308:	31400084 	addi	r5,r6,2
    830c:	42000204 	addi	r8,r8,8
    8310:	200d883a 	mov	r6,r4
    8314:	843ffc04 	addi	r16,r16,-16
    8318:	3c000d0e 	bge	r7,r16,8350 <___vfiprintf_internal_r+0x4a0>
    831c:	10800404 	addi	r2,r2,16
    8320:	31000044 	addi	r4,r6,1
    8324:	47000015 	stw	fp,0(r8)
    8328:	41c00115 	stw	r7,4(r8)
    832c:	d8801c15 	stw	r2,112(sp)
    8330:	d9001b15 	stw	r4,108(sp)
    8334:	793ff40e 	bge	r15,r4,8308 <__alt_mem_Flash_flash_data+0xf4008308>
    8338:	10019b1e 	bne	r2,zero,89a8 <___vfiprintf_internal_r+0xaf8>
    833c:	843ffc04 	addi	r16,r16,-16
    8340:	000d883a 	mov	r6,zero
    8344:	01400044 	movi	r5,1
    8348:	d811883a 	mov	r8,sp
    834c:	3c3ff316 	blt	r7,r16,831c <__alt_mem_Flash_flash_data+0xf400831c>
    8350:	8007883a 	mov	r3,r16
    8354:	da402517 	ldw	r9,148(sp)
    8358:	db402817 	ldw	r13,160(sp)
    835c:	dc002917 	ldw	r16,164(sp)
    8360:	d9002417 	ldw	r4,144(sp)
    8364:	1885883a 	add	r2,r3,r2
    8368:	40c00115 	stw	r3,4(r8)
    836c:	41000015 	stw	r4,0(r8)
    8370:	d8801c15 	stw	r2,112(sp)
    8374:	d9401b15 	stw	r5,108(sp)
    8378:	00c001c4 	movi	r3,7
    837c:	19426a16 	blt	r3,r5,8d28 <___vfiprintf_internal_r+0xe78>
    8380:	d8c01d87 	ldb	r3,118(sp)
    8384:	42000204 	addi	r8,r8,8
    8388:	29000044 	addi	r4,r5,1
    838c:	1801991e 	bne	r3,zero,89f4 <___vfiprintf_internal_r+0xb44>
    8390:	68000c26 	beq	r13,zero,83c4 <___vfiprintf_internal_r+0x514>
    8394:	d8c01d04 	addi	r3,sp,116
    8398:	10800084 	addi	r2,r2,2
    839c:	40c00015 	stw	r3,0(r8)
    83a0:	00c00084 	movi	r3,2
    83a4:	40c00115 	stw	r3,4(r8)
    83a8:	d8801c15 	stw	r2,112(sp)
    83ac:	d9001b15 	stw	r4,108(sp)
    83b0:	00c001c4 	movi	r3,7
    83b4:	19024c16 	blt	r3,r4,8ce8 <___vfiprintf_internal_r+0xe38>
    83b8:	200b883a 	mov	r5,r4
    83bc:	42000204 	addi	r8,r8,8
    83c0:	21000044 	addi	r4,r4,1
    83c4:	00c02004 	movi	r3,128
    83c8:	b0c20126 	beq	r22,r3,8bd0 <___vfiprintf_internal_r+0xd20>
    83cc:	4cedc83a 	sub	r22,r9,r19
    83d0:	0580230e 	bge	zero,r22,8460 <___vfiprintf_internal_r+0x5b0>
    83d4:	01c00404 	movi	r7,16
    83d8:	3d83140e 	bge	r7,r22,902c <___vfiprintf_internal_r+0x117c>
    83dc:	010000b4 	movhi	r4,2
    83e0:	21272b04 	addi	r4,r4,-25428
    83e4:	d9002415 	stw	r4,144(sp)
    83e8:	034001c4 	movi	r13,7
    83ec:	00000506 	br	8404 <___vfiprintf_internal_r+0x554>
    83f0:	29000084 	addi	r4,r5,2
    83f4:	42000204 	addi	r8,r8,8
    83f8:	180b883a 	mov	r5,r3
    83fc:	b5bffc04 	addi	r22,r22,-16
    8400:	3d800d0e 	bge	r7,r22,8438 <___vfiprintf_internal_r+0x588>
    8404:	10800404 	addi	r2,r2,16
    8408:	28c00044 	addi	r3,r5,1
    840c:	45c00015 	stw	r23,0(r8)
    8410:	41c00115 	stw	r7,4(r8)
    8414:	d8801c15 	stw	r2,112(sp)
    8418:	d8c01b15 	stw	r3,108(sp)
    841c:	68fff40e 	bge	r13,r3,83f0 <__alt_mem_Flash_flash_data+0xf40083f0>
    8420:	1001811e 	bne	r2,zero,8a28 <___vfiprintf_internal_r+0xb78>
    8424:	b5bffc04 	addi	r22,r22,-16
    8428:	01000044 	movi	r4,1
    842c:	000b883a 	mov	r5,zero
    8430:	d811883a 	mov	r8,sp
    8434:	3dbff316 	blt	r7,r22,8404 <__alt_mem_Flash_flash_data+0xf4008404>
    8438:	d8c02417 	ldw	r3,144(sp)
    843c:	1585883a 	add	r2,r2,r22
    8440:	45800115 	stw	r22,4(r8)
    8444:	40c00015 	stw	r3,0(r8)
    8448:	d8801c15 	stw	r2,112(sp)
    844c:	d9001b15 	stw	r4,108(sp)
    8450:	00c001c4 	movi	r3,7
    8454:	1901d016 	blt	r3,r4,8b98 <___vfiprintf_internal_r+0xce8>
    8458:	42000204 	addi	r8,r8,8
    845c:	21000044 	addi	r4,r4,1
    8460:	14c5883a 	add	r2,r2,r19
    8464:	45000015 	stw	r20,0(r8)
    8468:	44c00115 	stw	r19,4(r8)
    846c:	d8801c15 	stw	r2,112(sp)
    8470:	d9001b15 	stw	r4,108(sp)
    8474:	00c001c4 	movi	r3,7
    8478:	1901cf0e 	bge	r3,r4,8bb8 <___vfiprintf_internal_r+0xd08>
    847c:	1002361e 	bne	r2,zero,8d58 <___vfiprintf_internal_r+0xea8>
    8480:	d8001b15 	stw	zero,108(sp)
    8484:	aac0010c 	andi	r11,r21,4
    8488:	58002826 	beq	r11,zero,852c <___vfiprintf_internal_r+0x67c>
    848c:	9467c83a 	sub	r19,r18,r17
    8490:	d811883a 	mov	r8,sp
    8494:	04c3340e 	bge	zero,r19,9168 <___vfiprintf_internal_r+0x12b8>
    8498:	01c00404 	movi	r7,16
    849c:	3cc31b0e 	bge	r7,r19,910c <___vfiprintf_internal_r+0x125c>
    84a0:	00c000b4 	movhi	r3,2
    84a4:	18e72f04 	addi	r3,r3,-25412
    84a8:	d9001b17 	ldw	r4,108(sp)
    84ac:	d8c02415 	stw	r3,144(sp)
    84b0:	382b883a 	mov	r21,r7
    84b4:	050001c4 	movi	r20,7
    84b8:	dd802017 	ldw	r22,128(sp)
    84bc:	00000506 	br	84d4 <___vfiprintf_internal_r+0x624>
    84c0:	21400084 	addi	r5,r4,2
    84c4:	42000204 	addi	r8,r8,8
    84c8:	1809883a 	mov	r4,r3
    84cc:	9cfffc04 	addi	r19,r19,-16
    84d0:	acc00d0e 	bge	r21,r19,8508 <___vfiprintf_internal_r+0x658>
    84d4:	10800404 	addi	r2,r2,16
    84d8:	20c00044 	addi	r3,r4,1
    84dc:	47000015 	stw	fp,0(r8)
    84e0:	45400115 	stw	r21,4(r8)
    84e4:	d8801c15 	stw	r2,112(sp)
    84e8:	d8c01b15 	stw	r3,108(sp)
    84ec:	a0fff40e 	bge	r20,r3,84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    84f0:	10019f1e 	bne	r2,zero,8b70 <___vfiprintf_internal_r+0xcc0>
    84f4:	9cfffc04 	addi	r19,r19,-16
    84f8:	01400044 	movi	r5,1
    84fc:	0009883a 	mov	r4,zero
    8500:	d811883a 	mov	r8,sp
    8504:	acfff316 	blt	r21,r19,84d4 <__alt_mem_Flash_flash_data+0xf40084d4>
    8508:	d8c02417 	ldw	r3,144(sp)
    850c:	14c5883a 	add	r2,r2,r19
    8510:	44c00115 	stw	r19,4(r8)
    8514:	40c00015 	stw	r3,0(r8)
    8518:	d8801c15 	stw	r2,112(sp)
    851c:	d9401b15 	stw	r5,108(sp)
    8520:	00c001c4 	movi	r3,7
    8524:	1941810e 	bge	r3,r5,8b2c <___vfiprintf_internal_r+0xc7c>
    8528:	10017a1e 	bne	r2,zero,8b14 <___vfiprintf_internal_r+0xc64>
    852c:	8c82a416 	blt	r17,r18,8fc0 <___vfiprintf_internal_r+0x1110>
    8530:	d9002317 	ldw	r4,140(sp)
    8534:	2449883a 	add	r4,r4,r17
    8538:	d9002315 	stw	r4,140(sp)
    853c:	d8001b15 	stw	zero,108(sp)
    8540:	d811883a 	mov	r8,sp
    8544:	003e8e06 	br	7f80 <__alt_mem_Flash_flash_data+0xf4007f80>
    8548:	d9002017 	ldw	r4,128(sp)
    854c:	a80b883a 	mov	r5,r21
    8550:	0002b380 	call	2b38 <__swsetup_r>
    8554:	10000c1e 	bne	r2,zero,8588 <___vfiprintf_internal_r+0x6d8>
    8558:	a880030b 	ldhu	r2,12(r21)
    855c:	00c00284 	movi	r3,10
    8560:	1080068c 	andi	r2,r2,26
    8564:	10fe741e 	bne	r2,r3,7f38 <__alt_mem_Flash_flash_data+0xf4007f38>
    8568:	a880038f 	ldh	r2,14(r21)
    856c:	103e7216 	blt	r2,zero,7f38 <__alt_mem_Flash_flash_data+0xf4007f38>
    8570:	d9002017 	ldw	r4,128(sp)
    8574:	d9c02217 	ldw	r7,136(sp)
    8578:	a80b883a 	mov	r5,r21
    857c:	b00d883a 	mov	r6,r22
    8580:	00091a40 	call	91a4 <__sbprintf>
    8584:	00000106 	br	858c <___vfiprintf_internal_r+0x6dc>
    8588:	00bfffc4 	movi	r2,-1
    858c:	dfc03517 	ldw	ra,212(sp)
    8590:	df003417 	ldw	fp,208(sp)
    8594:	ddc03317 	ldw	r23,204(sp)
    8598:	dd803217 	ldw	r22,200(sp)
    859c:	dd403117 	ldw	r21,196(sp)
    85a0:	dd003017 	ldw	r20,192(sp)
    85a4:	dcc02f17 	ldw	r19,188(sp)
    85a8:	dc802e17 	ldw	r18,184(sp)
    85ac:	dc402d17 	ldw	r17,180(sp)
    85b0:	dc002c17 	ldw	r16,176(sp)
    85b4:	dec03604 	addi	sp,sp,216
    85b8:	f800283a 	ret
    85bc:	0004b980 	call	4b98 <__sinit>
    85c0:	003e4d06 	br	7ef8 <__alt_mem_Flash_flash_data+0xf4007ef8>
    85c4:	8005883a 	mov	r2,r16
    85c8:	ad400114 	ori	r21,r21,4
    85cc:	80c00007 	ldb	r3,0(r16)
    85d0:	003e9506 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    85d4:	b006d0fa 	srli	r3,r22,3
    85d8:	6808977a 	slli	r4,r13,29
    85dc:	681ad0fa 	srli	r13,r13,3
    85e0:	b58001cc 	andi	r22,r22,7
    85e4:	b0800c04 	addi	r2,r22,48
    85e8:	a53fffc4 	addi	r20,r20,-1
    85ec:	20ecb03a 	or	r22,r4,r3
    85f0:	a0800005 	stb	r2,0(r20)
    85f4:	b346b03a 	or	r3,r22,r13
    85f8:	183ff61e 	bne	r3,zero,85d4 <__alt_mem_Flash_flash_data+0xf40085d4>
    85fc:	a8c0004c 	andi	r3,r21,1
    8600:	a009883a 	mov	r4,r20
    8604:	18013b26 	beq	r3,zero,8af4 <___vfiprintf_internal_r+0xc44>
    8608:	10803fcc 	andi	r2,r2,255
    860c:	1080201c 	xori	r2,r2,128
    8610:	10bfe004 	addi	r2,r2,-128
    8614:	00c00c04 	movi	r3,48
    8618:	10ff1d26 	beq	r2,r3,8290 <__alt_mem_Flash_flash_data+0xf4008290>
    861c:	d8801e17 	ldw	r2,120(sp)
    8620:	a53fffc4 	addi	r20,r20,-1
    8624:	20ffffc5 	stb	r3,-1(r4)
    8628:	1527c83a 	sub	r19,r2,r20
    862c:	003f1a06 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    8630:	ad402014 	ori	r21,r21,128
    8634:	8005883a 	mov	r2,r16
    8638:	80c00007 	ldb	r3,0(r16)
    863c:	003e7a06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    8640:	8005883a 	mov	r2,r16
    8644:	0025883a 	mov	r18,zero
    8648:	193ff404 	addi	r4,r3,-48
    864c:	10c00007 	ldb	r3,0(r2)
    8650:	948002a4 	muli	r18,r18,10
    8654:	84000044 	addi	r16,r16,1
    8658:	8005883a 	mov	r2,r16
    865c:	9125883a 	add	r18,r18,r4
    8660:	193ff404 	addi	r4,r3,-48
    8664:	313ff92e 	bgeu	r6,r4,864c <__alt_mem_Flash_flash_data+0xf400864c>
    8668:	003e7006 	br	802c <__alt_mem_Flash_flash_data+0xf400802c>
    866c:	ad400414 	ori	r21,r21,16
    8670:	d9c01d85 	stb	r7,118(sp)
    8674:	a880080c 	andi	r2,r21,32
    8678:	d8c02217 	ldw	r3,136(sp)
    867c:	10005a26 	beq	r2,zero,87e8 <___vfiprintf_internal_r+0x938>
    8680:	d9002217 	ldw	r4,136(sp)
    8684:	18800117 	ldw	r2,4(r3)
    8688:	1d800017 	ldw	r22,0(r3)
    868c:	21000204 	addi	r4,r4,8
    8690:	d9002215 	stw	r4,136(sp)
    8694:	101b883a 	mov	r13,r2
    8698:	1001f416 	blt	r2,zero,8e6c <___vfiprintf_internal_r+0xfbc>
    869c:	db801d83 	ldbu	r14,118(sp)
    86a0:	4827883a 	mov	r19,r9
    86a4:	00800044 	movi	r2,1
    86a8:	b348b03a 	or	r4,r22,r13
    86ac:	003ee106 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>
    86b0:	80c00007 	ldb	r3,0(r16)
    86b4:	80800044 	addi	r2,r16,1
    86b8:	1b42a326 	beq	r3,r13,9148 <___vfiprintf_internal_r+0x1298>
    86bc:	193ff404 	addi	r4,r3,-48
    86c0:	1021883a 	mov	r16,r2
    86c4:	0013883a 	mov	r9,zero
    86c8:	313e5836 	bltu	r6,r4,802c <__alt_mem_Flash_flash_data+0xf400802c>
    86cc:	80c00007 	ldb	r3,0(r16)
    86d0:	4a4002a4 	muli	r9,r9,10
    86d4:	84000044 	addi	r16,r16,1
    86d8:	2253883a 	add	r9,r4,r9
    86dc:	193ff404 	addi	r4,r3,-48
    86e0:	313ffa2e 	bgeu	r6,r4,86cc <__alt_mem_Flash_flash_data+0xf40086cc>
    86e4:	483e510e 	bge	r9,zero,802c <__alt_mem_Flash_flash_data+0xf400802c>
    86e8:	027fffc4 	movi	r9,-1
    86ec:	003e4f06 	br	802c <__alt_mem_Flash_flash_data+0xf400802c>
    86f0:	d9c01d85 	stb	r7,118(sp)
    86f4:	a880080c 	andi	r2,r21,32
    86f8:	10020826 	beq	r2,zero,8f1c <___vfiprintf_internal_r+0x106c>
    86fc:	d8c02217 	ldw	r3,136(sp)
    8700:	d9002317 	ldw	r4,140(sp)
    8704:	18800017 	ldw	r2,0(r3)
    8708:	2007d7fa 	srai	r3,r4,31
    870c:	d9002217 	ldw	r4,136(sp)
    8710:	10c00115 	stw	r3,4(r2)
    8714:	21000104 	addi	r4,r4,4
    8718:	d9002215 	stw	r4,136(sp)
    871c:	d9002317 	ldw	r4,140(sp)
    8720:	11000015 	stw	r4,0(r2)
    8724:	003e1606 	br	7f80 <__alt_mem_Flash_flash_data+0xf4007f80>
    8728:	d8802217 	ldw	r2,136(sp)
    872c:	d8c02217 	ldw	r3,136(sp)
    8730:	15800017 	ldw	r22,0(r2)
    8734:	13400117 	ldw	r13,4(r2)
    8738:	18c00204 	addi	r3,r3,8
    873c:	0005883a 	mov	r2,zero
    8740:	d8c02215 	stw	r3,136(sp)
    8744:	b348b03a 	or	r4,r22,r13
    8748:	003eb706 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    874c:	38803fcc 	andi	r2,r7,255
    8750:	1080201c 	xori	r2,r2,128
    8754:	10bfe004 	addi	r2,r2,-128
    8758:	1001e31e 	bne	r2,zero,8ee8 <___vfiprintf_internal_r+0x1038>
    875c:	8005883a 	mov	r2,r16
    8760:	01c00804 	movi	r7,32
    8764:	80c00007 	ldb	r3,0(r16)
    8768:	003e2f06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    876c:	ad400054 	ori	r21,r21,1
    8770:	8005883a 	mov	r2,r16
    8774:	80c00007 	ldb	r3,0(r16)
    8778:	003e2b06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    877c:	d8c02217 	ldw	r3,136(sp)
    8780:	1c800017 	ldw	r18,0(r3)
    8784:	18c00104 	addi	r3,r3,4
    8788:	90023816 	blt	r18,zero,906c <___vfiprintf_internal_r+0x11bc>
    878c:	d8c02215 	stw	r3,136(sp)
    8790:	8005883a 	mov	r2,r16
    8794:	80c00007 	ldb	r3,0(r16)
    8798:	003e2306 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    879c:	8005883a 	mov	r2,r16
    87a0:	01c00ac4 	movi	r7,43
    87a4:	80c00007 	ldb	r3,0(r16)
    87a8:	003e1f06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    87ac:	d8c02217 	ldw	r3,136(sp)
    87b0:	04400044 	movi	r17,1
    87b4:	d8001d85 	stb	zero,118(sp)
    87b8:	18800017 	ldw	r2,0(r3)
    87bc:	18c00104 	addi	r3,r3,4
    87c0:	d8c02215 	stw	r3,136(sp)
    87c4:	d8801005 	stb	r2,64(sp)
    87c8:	8827883a 	mov	r19,r17
    87cc:	dd001004 	addi	r20,sp,64
    87d0:	0013883a 	mov	r9,zero
    87d4:	003eb806 	br	82b8 <__alt_mem_Flash_flash_data+0xf40082b8>
    87d8:	d9c01d85 	stb	r7,118(sp)
    87dc:	a880080c 	andi	r2,r21,32
    87e0:	d8c02217 	ldw	r3,136(sp)
    87e4:	103fa61e 	bne	r2,zero,8680 <__alt_mem_Flash_flash_data+0xf4008680>
    87e8:	a880040c 	andi	r2,r21,16
    87ec:	1001dd26 	beq	r2,zero,8f64 <___vfiprintf_internal_r+0x10b4>
    87f0:	1d800017 	ldw	r22,0(r3)
    87f4:	d8802217 	ldw	r2,136(sp)
    87f8:	b01bd7fa 	srai	r13,r22,31
    87fc:	10800104 	addi	r2,r2,4
    8800:	d8802215 	stw	r2,136(sp)
    8804:	6805883a 	mov	r2,r13
    8808:	003fa306 	br	8698 <__alt_mem_Flash_flash_data+0xf4008698>
    880c:	008000b4 	movhi	r2,2
    8810:	10a6c504 	addi	r2,r2,-25836
    8814:	d8802615 	stw	r2,152(sp)
    8818:	d9c01d85 	stb	r7,118(sp)
    881c:	a880080c 	andi	r2,r21,32
    8820:	10004726 	beq	r2,zero,8940 <___vfiprintf_internal_r+0xa90>
    8824:	d9002217 	ldw	r4,136(sp)
    8828:	25800017 	ldw	r22,0(r4)
    882c:	23400117 	ldw	r13,4(r4)
    8830:	21000204 	addi	r4,r4,8
    8834:	d9002215 	stw	r4,136(sp)
    8838:	a880004c 	andi	r2,r21,1
    883c:	10014e26 	beq	r2,zero,8d78 <___vfiprintf_internal_r+0xec8>
    8840:	b348b03a 	or	r4,r22,r13
    8844:	20019c26 	beq	r4,zero,8eb8 <___vfiprintf_internal_r+0x1008>
    8848:	00800c04 	movi	r2,48
    884c:	d8801d05 	stb	r2,116(sp)
    8850:	d8c01d45 	stb	r3,117(sp)
    8854:	ad400094 	ori	r21,r21,2
    8858:	00800084 	movi	r2,2
    885c:	003e7206 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8860:	d8c02217 	ldw	r3,136(sp)
    8864:	d8001d85 	stb	zero,118(sp)
    8868:	1d000017 	ldw	r20,0(r3)
    886c:	1d800104 	addi	r22,r3,4
    8870:	a0021c26 	beq	r20,zero,90e4 <___vfiprintf_internal_r+0x1234>
    8874:	a009883a 	mov	r4,r20
    8878:	48020016 	blt	r9,zero,907c <___vfiprintf_internal_r+0x11cc>
    887c:	480d883a 	mov	r6,r9
    8880:	000b883a 	mov	r5,zero
    8884:	da002a15 	stw	r8,168(sp)
    8888:	da402b15 	stw	r9,172(sp)
    888c:	00060840 	call	6084 <memchr>
    8890:	da002a17 	ldw	r8,168(sp)
    8894:	da402b17 	ldw	r9,172(sp)
    8898:	10022226 	beq	r2,zero,9124 <___vfiprintf_internal_r+0x1274>
    889c:	1527c83a 	sub	r19,r2,r20
    88a0:	4cc1c916 	blt	r9,r19,8fc8 <___vfiprintf_internal_r+0x1118>
    88a4:	db801d83 	ldbu	r14,118(sp)
    88a8:	dd802215 	stw	r22,136(sp)
    88ac:	0013883a 	mov	r9,zero
    88b0:	003e7906 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    88b4:	ad401014 	ori	r21,r21,64
    88b8:	8005883a 	mov	r2,r16
    88bc:	80c00007 	ldb	r3,0(r16)
    88c0:	003dd906 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    88c4:	80c00007 	ldb	r3,0(r16)
    88c8:	8005883a 	mov	r2,r16
    88cc:	1b01e326 	beq	r3,r12,905c <___vfiprintf_internal_r+0x11ac>
    88d0:	ad400414 	ori	r21,r21,16
    88d4:	003dd406 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    88d8:	d9002217 	ldw	r4,136(sp)
    88dc:	00800c04 	movi	r2,48
    88e0:	d8801d05 	stb	r2,116(sp)
    88e4:	25800017 	ldw	r22,0(r4)
    88e8:	00801e04 	movi	r2,120
    88ec:	d8801d45 	stb	r2,117(sp)
    88f0:	008000b4 	movhi	r2,2
    88f4:	21000104 	addi	r4,r4,4
    88f8:	10a6ca04 	addi	r2,r2,-25816
    88fc:	d9002215 	stw	r4,136(sp)
    8900:	d8802615 	stw	r2,152(sp)
    8904:	001b883a 	mov	r13,zero
    8908:	ad400094 	ori	r21,r21,2
    890c:	00800084 	movi	r2,2
    8910:	b009883a 	mov	r4,r22
    8914:	003e4406 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8918:	ad400814 	ori	r21,r21,32
    891c:	8005883a 	mov	r2,r16
    8920:	80c00007 	ldb	r3,0(r16)
    8924:	003dc006 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    8928:	008000b4 	movhi	r2,2
    892c:	10a6ca04 	addi	r2,r2,-25816
    8930:	d8802615 	stw	r2,152(sp)
    8934:	d9c01d85 	stb	r7,118(sp)
    8938:	a880080c 	andi	r2,r21,32
    893c:	103fb91e 	bne	r2,zero,8824 <__alt_mem_Flash_flash_data+0xf4008824>
    8940:	a880040c 	andi	r2,r21,16
    8944:	10010f1e 	bne	r2,zero,8d84 <___vfiprintf_internal_r+0xed4>
    8948:	a880100c 	andi	r2,r21,64
    894c:	10010d26 	beq	r2,zero,8d84 <___vfiprintf_internal_r+0xed4>
    8950:	d9002217 	ldw	r4,136(sp)
    8954:	001b883a 	mov	r13,zero
    8958:	2580000b 	ldhu	r22,0(r4)
    895c:	21000104 	addi	r4,r4,4
    8960:	d9002215 	stw	r4,136(sp)
    8964:	003fb406 	br	8838 <__alt_mem_Flash_flash_data+0xf4008838>
    8968:	d9002217 	ldw	r4,136(sp)
    896c:	00800044 	movi	r2,1
    8970:	25800017 	ldw	r22,0(r4)
    8974:	23400117 	ldw	r13,4(r4)
    8978:	21000204 	addi	r4,r4,8
    897c:	d9002215 	stw	r4,136(sp)
    8980:	b348b03a 	or	r4,r22,r13
    8984:	003e2806 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8988:	d9c01d85 	stb	r7,118(sp)
    898c:	1801ab26 	beq	r3,zero,903c <___vfiprintf_internal_r+0x118c>
    8990:	04400044 	movi	r17,1
    8994:	d8c01005 	stb	r3,64(sp)
    8998:	d8001d85 	stb	zero,118(sp)
    899c:	8827883a 	mov	r19,r17
    89a0:	dd001004 	addi	r20,sp,64
    89a4:	003f8a06 	br	87d0 <__alt_mem_Flash_flash_data+0xf40087d0>
    89a8:	d9002017 	ldw	r4,128(sp)
    89ac:	d9402117 	ldw	r5,132(sp)
    89b0:	d9801a04 	addi	r6,sp,104
    89b4:	d9c02b15 	stw	r7,172(sp)
    89b8:	dbc02a15 	stw	r15,168(sp)
    89bc:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    89c0:	d9c02b17 	ldw	r7,172(sp)
    89c4:	dbc02a17 	ldw	r15,168(sp)
    89c8:	1000631e 	bne	r2,zero,8b58 <___vfiprintf_internal_r+0xca8>
    89cc:	d9801b17 	ldw	r6,108(sp)
    89d0:	d8801c17 	ldw	r2,112(sp)
    89d4:	d811883a 	mov	r8,sp
    89d8:	31400044 	addi	r5,r6,1
    89dc:	003e4d06 	br	8314 <__alt_mem_Flash_flash_data+0xf4008314>
    89e0:	d9401b17 	ldw	r5,108(sp)
    89e4:	d8801c17 	ldw	r2,112(sp)
    89e8:	29000044 	addi	r4,r5,1
    89ec:	d8c01d87 	ldb	r3,118(sp)
    89f0:	183e6726 	beq	r3,zero,8390 <__alt_mem_Flash_flash_data+0xf4008390>
    89f4:	00c00044 	movi	r3,1
    89f8:	d9401d84 	addi	r5,sp,118
    89fc:	10c5883a 	add	r2,r2,r3
    8a00:	41400015 	stw	r5,0(r8)
    8a04:	40c00115 	stw	r3,4(r8)
    8a08:	d8801c15 	stw	r2,112(sp)
    8a0c:	d9001b15 	stw	r4,108(sp)
    8a10:	014001c4 	movi	r5,7
    8a14:	2900ab16 	blt	r5,r4,8cc4 <___vfiprintf_internal_r+0xe14>
    8a18:	200b883a 	mov	r5,r4
    8a1c:	42000204 	addi	r8,r8,8
    8a20:	21000044 	addi	r4,r4,1
    8a24:	003e5a06 	br	8390 <__alt_mem_Flash_flash_data+0xf4008390>
    8a28:	d9002017 	ldw	r4,128(sp)
    8a2c:	d9402117 	ldw	r5,132(sp)
    8a30:	d9801a04 	addi	r6,sp,104
    8a34:	d9c02b15 	stw	r7,172(sp)
    8a38:	db402a15 	stw	r13,168(sp)
    8a3c:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8a40:	d9c02b17 	ldw	r7,172(sp)
    8a44:	db402a17 	ldw	r13,168(sp)
    8a48:	1000431e 	bne	r2,zero,8b58 <___vfiprintf_internal_r+0xca8>
    8a4c:	d9401b17 	ldw	r5,108(sp)
    8a50:	d8801c17 	ldw	r2,112(sp)
    8a54:	d811883a 	mov	r8,sp
    8a58:	29000044 	addi	r4,r5,1
    8a5c:	003e6706 	br	83fc <__alt_mem_Flash_flash_data+0xf40083fc>
    8a60:	10803fcc 	andi	r2,r2,255
    8a64:	00c00044 	movi	r3,1
    8a68:	10fdfa1e 	bne	r2,r3,8254 <__alt_mem_Flash_flash_data+0xf4008254>
    8a6c:	6800021e 	bne	r13,zero,8a78 <___vfiprintf_internal_r+0xbc8>
    8a70:	00800244 	movi	r2,9
    8a74:	1580222e 	bgeu	r2,r22,8b00 <___vfiprintf_internal_r+0xc50>
    8a78:	dc802415 	stw	r18,144(sp)
    8a7c:	dc002515 	stw	r16,148(sp)
    8a80:	dc401a04 	addi	r17,sp,104
    8a84:	b021883a 	mov	r16,r22
    8a88:	4827883a 	mov	r19,r9
    8a8c:	4029883a 	mov	r20,r8
    8a90:	702d883a 	mov	r22,r14
    8a94:	6825883a 	mov	r18,r13
    8a98:	8009883a 	mov	r4,r16
    8a9c:	900b883a 	mov	r5,r18
    8aa0:	01800284 	movi	r6,10
    8aa4:	000f883a 	mov	r7,zero
    8aa8:	000a1180 	call	a118 <__umoddi3>
    8aac:	10800c04 	addi	r2,r2,48
    8ab0:	8c7fffc4 	addi	r17,r17,-1
    8ab4:	8009883a 	mov	r4,r16
    8ab8:	900b883a 	mov	r5,r18
    8abc:	01800284 	movi	r6,10
    8ac0:	000f883a 	mov	r7,zero
    8ac4:	88800005 	stb	r2,0(r17)
    8ac8:	0009b580 	call	9b58 <__udivdi3>
    8acc:	1021883a 	mov	r16,r2
    8ad0:	10c4b03a 	or	r2,r2,r3
    8ad4:	1825883a 	mov	r18,r3
    8ad8:	103fef1e 	bne	r2,zero,8a98 <__alt_mem_Flash_flash_data+0xf4008a98>
    8adc:	dc802417 	ldw	r18,144(sp)
    8ae0:	dc002517 	ldw	r16,148(sp)
    8ae4:	a011883a 	mov	r8,r20
    8ae8:	9813883a 	mov	r9,r19
    8aec:	b01d883a 	mov	r14,r22
    8af0:	8829883a 	mov	r20,r17
    8af4:	d8c01e17 	ldw	r3,120(sp)
    8af8:	1d27c83a 	sub	r19,r3,r20
    8afc:	003de606 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    8b00:	b5800c04 	addi	r22,r22,48
    8b04:	dd8019c5 	stb	r22,103(sp)
    8b08:	dcc02717 	ldw	r19,156(sp)
    8b0c:	dd0019c4 	addi	r20,sp,103
    8b10:	003de106 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    8b14:	d9002017 	ldw	r4,128(sp)
    8b18:	d9402117 	ldw	r5,132(sp)
    8b1c:	d9801a04 	addi	r6,sp,104
    8b20:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8b24:	10000c1e 	bne	r2,zero,8b58 <___vfiprintf_internal_r+0xca8>
    8b28:	d8801c17 	ldw	r2,112(sp)
    8b2c:	8c80010e 	bge	r17,r18,8b34 <___vfiprintf_internal_r+0xc84>
    8b30:	9023883a 	mov	r17,r18
    8b34:	d8c02317 	ldw	r3,140(sp)
    8b38:	1c47883a 	add	r3,r3,r17
    8b3c:	d8c02315 	stw	r3,140(sp)
    8b40:	103e7e26 	beq	r2,zero,853c <__alt_mem_Flash_flash_data+0xf400853c>
    8b44:	d9002017 	ldw	r4,128(sp)
    8b48:	d9402117 	ldw	r5,132(sp)
    8b4c:	d9801a04 	addi	r6,sp,104
    8b50:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8b54:	103e7926 	beq	r2,zero,853c <__alt_mem_Flash_flash_data+0xf400853c>
    8b58:	dd402117 	ldw	r21,132(sp)
    8b5c:	a880030b 	ldhu	r2,12(r21)
    8b60:	1080100c 	andi	r2,r2,64
    8b64:	103e881e 	bne	r2,zero,8588 <__alt_mem_Flash_flash_data+0xf4008588>
    8b68:	d8802317 	ldw	r2,140(sp)
    8b6c:	003e8706 	br	858c <__alt_mem_Flash_flash_data+0xf400858c>
    8b70:	d9402117 	ldw	r5,132(sp)
    8b74:	b009883a 	mov	r4,r22
    8b78:	d9801a04 	addi	r6,sp,104
    8b7c:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8b80:	103ff51e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8b84:	d9001b17 	ldw	r4,108(sp)
    8b88:	d8801c17 	ldw	r2,112(sp)
    8b8c:	d811883a 	mov	r8,sp
    8b90:	21400044 	addi	r5,r4,1
    8b94:	003e4d06 	br	84cc <__alt_mem_Flash_flash_data+0xf40084cc>
    8b98:	1000aa1e 	bne	r2,zero,8e44 <___vfiprintf_internal_r+0xf94>
    8b9c:	00c00044 	movi	r3,1
    8ba0:	9805883a 	mov	r2,r19
    8ba4:	dd000015 	stw	r20,0(sp)
    8ba8:	dcc00115 	stw	r19,4(sp)
    8bac:	dcc01c15 	stw	r19,112(sp)
    8bb0:	d8c01b15 	stw	r3,108(sp)
    8bb4:	d811883a 	mov	r8,sp
    8bb8:	42000204 	addi	r8,r8,8
    8bbc:	aac0010c 	andi	r11,r21,4
    8bc0:	583fda26 	beq	r11,zero,8b2c <__alt_mem_Flash_flash_data+0xf4008b2c>
    8bc4:	9467c83a 	sub	r19,r18,r17
    8bc8:	04fe3316 	blt	zero,r19,8498 <__alt_mem_Flash_flash_data+0xf4008498>
    8bcc:	003fd706 	br	8b2c <__alt_mem_Flash_flash_data+0xf4008b2c>
    8bd0:	946dc83a 	sub	r22,r18,r17
    8bd4:	05bdfd0e 	bge	zero,r22,83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    8bd8:	00c000b4 	movhi	r3,2
    8bdc:	18e72b04 	addi	r3,r3,-25428
    8be0:	01c00404 	movi	r7,16
    8be4:	d8c02415 	stw	r3,144(sp)
    8be8:	3d81530e 	bge	r7,r22,9138 <___vfiprintf_internal_r+0x1288>
    8bec:	8007883a 	mov	r3,r16
    8bf0:	034001c4 	movi	r13,7
    8bf4:	b021883a 	mov	r16,r22
    8bf8:	da402515 	stw	r9,148(sp)
    8bfc:	182d883a 	mov	r22,r3
    8c00:	00000506 	br	8c18 <___vfiprintf_internal_r+0xd68>
    8c04:	29800084 	addi	r6,r5,2
    8c08:	42000204 	addi	r8,r8,8
    8c0c:	180b883a 	mov	r5,r3
    8c10:	843ffc04 	addi	r16,r16,-16
    8c14:	3c000d0e 	bge	r7,r16,8c4c <___vfiprintf_internal_r+0xd9c>
    8c18:	10800404 	addi	r2,r2,16
    8c1c:	28c00044 	addi	r3,r5,1
    8c20:	45c00015 	stw	r23,0(r8)
    8c24:	41c00115 	stw	r7,4(r8)
    8c28:	d8801c15 	stw	r2,112(sp)
    8c2c:	d8c01b15 	stw	r3,108(sp)
    8c30:	68fff40e 	bge	r13,r3,8c04 <__alt_mem_Flash_flash_data+0xf4008c04>
    8c34:	1000151e 	bne	r2,zero,8c8c <___vfiprintf_internal_r+0xddc>
    8c38:	843ffc04 	addi	r16,r16,-16
    8c3c:	01800044 	movi	r6,1
    8c40:	000b883a 	mov	r5,zero
    8c44:	d811883a 	mov	r8,sp
    8c48:	3c3ff316 	blt	r7,r16,8c18 <__alt_mem_Flash_flash_data+0xf4008c18>
    8c4c:	da402517 	ldw	r9,148(sp)
    8c50:	b007883a 	mov	r3,r22
    8c54:	802d883a 	mov	r22,r16
    8c58:	1821883a 	mov	r16,r3
    8c5c:	d8c02417 	ldw	r3,144(sp)
    8c60:	1585883a 	add	r2,r2,r22
    8c64:	45800115 	stw	r22,4(r8)
    8c68:	40c00015 	stw	r3,0(r8)
    8c6c:	d8801c15 	stw	r2,112(sp)
    8c70:	d9801b15 	stw	r6,108(sp)
    8c74:	00c001c4 	movi	r3,7
    8c78:	19806d16 	blt	r3,r6,8e30 <___vfiprintf_internal_r+0xf80>
    8c7c:	42000204 	addi	r8,r8,8
    8c80:	31000044 	addi	r4,r6,1
    8c84:	300b883a 	mov	r5,r6
    8c88:	003dd006 	br	83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    8c8c:	d9002017 	ldw	r4,128(sp)
    8c90:	d9402117 	ldw	r5,132(sp)
    8c94:	d9801a04 	addi	r6,sp,104
    8c98:	d9c02b15 	stw	r7,172(sp)
    8c9c:	db402a15 	stw	r13,168(sp)
    8ca0:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8ca4:	d9c02b17 	ldw	r7,172(sp)
    8ca8:	db402a17 	ldw	r13,168(sp)
    8cac:	103faa1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8cb0:	d9401b17 	ldw	r5,108(sp)
    8cb4:	d8801c17 	ldw	r2,112(sp)
    8cb8:	d811883a 	mov	r8,sp
    8cbc:	29800044 	addi	r6,r5,1
    8cc0:	003fd306 	br	8c10 <__alt_mem_Flash_flash_data+0xf4008c10>
    8cc4:	1000401e 	bne	r2,zero,8dc8 <___vfiprintf_internal_r+0xf18>
    8cc8:	68003b26 	beq	r13,zero,8db8 <___vfiprintf_internal_r+0xf08>
    8ccc:	d9001d04 	addi	r4,sp,116
    8cd0:	00800084 	movi	r2,2
    8cd4:	d9000015 	stw	r4,0(sp)
    8cd8:	d8800115 	stw	r2,4(sp)
    8cdc:	1809883a 	mov	r4,r3
    8ce0:	d811883a 	mov	r8,sp
    8ce4:	003db406 	br	83b8 <__alt_mem_Flash_flash_data+0xf40083b8>
    8ce8:	1000451e 	bne	r2,zero,8e00 <___vfiprintf_internal_r+0xf50>
    8cec:	01000044 	movi	r4,1
    8cf0:	000b883a 	mov	r5,zero
    8cf4:	d811883a 	mov	r8,sp
    8cf8:	003db206 	br	83c4 <__alt_mem_Flash_flash_data+0xf40083c4>
    8cfc:	10803fcc 	andi	r2,r2,255
    8d00:	1000071e 	bne	r2,zero,8d20 <___vfiprintf_internal_r+0xe70>
    8d04:	a880004c 	andi	r2,r21,1
    8d08:	10000526 	beq	r2,zero,8d20 <___vfiprintf_internal_r+0xe70>
    8d0c:	00800c04 	movi	r2,48
    8d10:	d88019c5 	stb	r2,103(sp)
    8d14:	dcc02717 	ldw	r19,156(sp)
    8d18:	dd0019c4 	addi	r20,sp,103
    8d1c:	003d5e06 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    8d20:	dd001a04 	addi	r20,sp,104
    8d24:	003d5c06 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    8d28:	1000971e 	bne	r2,zero,8f88 <___vfiprintf_internal_r+0x10d8>
    8d2c:	d8c01d87 	ldb	r3,118(sp)
    8d30:	18005826 	beq	r3,zero,8e94 <___vfiprintf_internal_r+0xfe4>
    8d34:	00800044 	movi	r2,1
    8d38:	d8c01d84 	addi	r3,sp,118
    8d3c:	1009883a 	mov	r4,r2
    8d40:	d8c00015 	stw	r3,0(sp)
    8d44:	d8800115 	stw	r2,4(sp)
    8d48:	d811883a 	mov	r8,sp
    8d4c:	003f3206 	br	8a18 <__alt_mem_Flash_flash_data+0xf4008a18>
    8d50:	8023883a 	mov	r17,r16
    8d54:	003ca706 	br	7ff4 <__alt_mem_Flash_flash_data+0xf4007ff4>
    8d58:	d9002017 	ldw	r4,128(sp)
    8d5c:	d9402117 	ldw	r5,132(sp)
    8d60:	d9801a04 	addi	r6,sp,104
    8d64:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8d68:	103f7b1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8d6c:	d8801c17 	ldw	r2,112(sp)
    8d70:	d811883a 	mov	r8,sp
    8d74:	003f9106 	br	8bbc <__alt_mem_Flash_flash_data+0xf4008bbc>
    8d78:	00800084 	movi	r2,2
    8d7c:	b348b03a 	or	r4,r22,r13
    8d80:	003d2906 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8d84:	d8802217 	ldw	r2,136(sp)
    8d88:	001b883a 	mov	r13,zero
    8d8c:	15800017 	ldw	r22,0(r2)
    8d90:	10800104 	addi	r2,r2,4
    8d94:	d8802215 	stw	r2,136(sp)
    8d98:	003ea706 	br	8838 <__alt_mem_Flash_flash_data+0xf4008838>
    8d9c:	d9002017 	ldw	r4,128(sp)
    8da0:	d9402117 	ldw	r5,132(sp)
    8da4:	d9801a04 	addi	r6,sp,104
    8da8:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8dac:	103f6a1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8db0:	d811883a 	mov	r8,sp
    8db4:	003cff06 	br	81b4 <__alt_mem_Flash_flash_data+0xf40081b4>
    8db8:	000b883a 	mov	r5,zero
    8dbc:	1809883a 	mov	r4,r3
    8dc0:	d811883a 	mov	r8,sp
    8dc4:	003d7f06 	br	83c4 <__alt_mem_Flash_flash_data+0xf40083c4>
    8dc8:	d9002017 	ldw	r4,128(sp)
    8dcc:	d9402117 	ldw	r5,132(sp)
    8dd0:	d9801a04 	addi	r6,sp,104
    8dd4:	da402b15 	stw	r9,172(sp)
    8dd8:	db402a15 	stw	r13,168(sp)
    8ddc:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8de0:	da402b17 	ldw	r9,172(sp)
    8de4:	db402a17 	ldw	r13,168(sp)
    8de8:	103f5b1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8dec:	d9401b17 	ldw	r5,108(sp)
    8df0:	d8801c17 	ldw	r2,112(sp)
    8df4:	d811883a 	mov	r8,sp
    8df8:	29000044 	addi	r4,r5,1
    8dfc:	003d6406 	br	8390 <__alt_mem_Flash_flash_data+0xf4008390>
    8e00:	d9002017 	ldw	r4,128(sp)
    8e04:	d9402117 	ldw	r5,132(sp)
    8e08:	d9801a04 	addi	r6,sp,104
    8e0c:	da402b15 	stw	r9,172(sp)
    8e10:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8e14:	da402b17 	ldw	r9,172(sp)
    8e18:	103f4f1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8e1c:	d9401b17 	ldw	r5,108(sp)
    8e20:	d8801c17 	ldw	r2,112(sp)
    8e24:	d811883a 	mov	r8,sp
    8e28:	29000044 	addi	r4,r5,1
    8e2c:	003d6506 	br	83c4 <__alt_mem_Flash_flash_data+0xf40083c4>
    8e30:	10009a1e 	bne	r2,zero,909c <___vfiprintf_internal_r+0x11ec>
    8e34:	01000044 	movi	r4,1
    8e38:	000b883a 	mov	r5,zero
    8e3c:	d811883a 	mov	r8,sp
    8e40:	003d6206 	br	83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    8e44:	d9002017 	ldw	r4,128(sp)
    8e48:	d9402117 	ldw	r5,132(sp)
    8e4c:	d9801a04 	addi	r6,sp,104
    8e50:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8e54:	103f401e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8e58:	d9001b17 	ldw	r4,108(sp)
    8e5c:	d8801c17 	ldw	r2,112(sp)
    8e60:	d811883a 	mov	r8,sp
    8e64:	21000044 	addi	r4,r4,1
    8e68:	003d7d06 	br	8460 <__alt_mem_Flash_flash_data+0xf4008460>
    8e6c:	05adc83a 	sub	r22,zero,r22
    8e70:	b004c03a 	cmpne	r2,r22,zero
    8e74:	035bc83a 	sub	r13,zero,r13
    8e78:	689bc83a 	sub	r13,r13,r2
    8e7c:	03800b44 	movi	r14,45
    8e80:	db801d85 	stb	r14,118(sp)
    8e84:	4827883a 	mov	r19,r9
    8e88:	00800044 	movi	r2,1
    8e8c:	b348b03a 	or	r4,r22,r13
    8e90:	003ce806 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>
    8e94:	000b883a 	mov	r5,zero
    8e98:	01000044 	movi	r4,1
    8e9c:	d811883a 	mov	r8,sp
    8ea0:	683d4826 	beq	r13,zero,83c4 <__alt_mem_Flash_flash_data+0xf40083c4>
    8ea4:	00800084 	movi	r2,2
    8ea8:	d8c01d04 	addi	r3,sp,116
    8eac:	d8c00015 	stw	r3,0(sp)
    8eb0:	d8800115 	stw	r2,4(sp)
    8eb4:	003d4006 	br	83b8 <__alt_mem_Flash_flash_data+0xf40083b8>
    8eb8:	00800084 	movi	r2,2
    8ebc:	003cda06 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8ec0:	a880100c 	andi	r2,r21,64
    8ec4:	10004226 	beq	r2,zero,8fd0 <___vfiprintf_internal_r+0x1120>
    8ec8:	d8802217 	ldw	r2,136(sp)
    8ecc:	001b883a 	mov	r13,zero
    8ed0:	1580000b 	ldhu	r22,0(r2)
    8ed4:	10800104 	addi	r2,r2,4
    8ed8:	d8802215 	stw	r2,136(sp)
    8edc:	b009883a 	mov	r4,r22
    8ee0:	0005883a 	mov	r2,zero
    8ee4:	003cd006 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8ee8:	80c00007 	ldb	r3,0(r16)
    8eec:	8005883a 	mov	r2,r16
    8ef0:	003c4d06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    8ef4:	a880100c 	andi	r2,r21,64
    8ef8:	10004426 	beq	r2,zero,900c <___vfiprintf_internal_r+0x115c>
    8efc:	d8c02217 	ldw	r3,136(sp)
    8f00:	001b883a 	mov	r13,zero
    8f04:	00800044 	movi	r2,1
    8f08:	1d80000b 	ldhu	r22,0(r3)
    8f0c:	18c00104 	addi	r3,r3,4
    8f10:	d8c02215 	stw	r3,136(sp)
    8f14:	b009883a 	mov	r4,r22
    8f18:	003cc306 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8f1c:	a880040c 	andi	r2,r21,16
    8f20:	1000091e 	bne	r2,zero,8f48 <___vfiprintf_internal_r+0x1098>
    8f24:	aac0100c 	andi	r11,r21,64
    8f28:	58000726 	beq	r11,zero,8f48 <___vfiprintf_internal_r+0x1098>
    8f2c:	d8c02217 	ldw	r3,136(sp)
    8f30:	d9002317 	ldw	r4,140(sp)
    8f34:	18800017 	ldw	r2,0(r3)
    8f38:	18c00104 	addi	r3,r3,4
    8f3c:	d8c02215 	stw	r3,136(sp)
    8f40:	1100000d 	sth	r4,0(r2)
    8f44:	003c0e06 	br	7f80 <__alt_mem_Flash_flash_data+0xf4007f80>
    8f48:	d8c02217 	ldw	r3,136(sp)
    8f4c:	d9002317 	ldw	r4,140(sp)
    8f50:	18800017 	ldw	r2,0(r3)
    8f54:	18c00104 	addi	r3,r3,4
    8f58:	d8c02215 	stw	r3,136(sp)
    8f5c:	11000015 	stw	r4,0(r2)
    8f60:	003c0706 	br	7f80 <__alt_mem_Flash_flash_data+0xf4007f80>
    8f64:	a880100c 	andi	r2,r21,64
    8f68:	10002126 	beq	r2,zero,8ff0 <___vfiprintf_internal_r+0x1140>
    8f6c:	1d80000f 	ldh	r22,0(r3)
    8f70:	d8c02217 	ldw	r3,136(sp)
    8f74:	b01bd7fa 	srai	r13,r22,31
    8f78:	18c00104 	addi	r3,r3,4
    8f7c:	d8c02215 	stw	r3,136(sp)
    8f80:	6805883a 	mov	r2,r13
    8f84:	003dc406 	br	8698 <__alt_mem_Flash_flash_data+0xf4008698>
    8f88:	d9002017 	ldw	r4,128(sp)
    8f8c:	d9402117 	ldw	r5,132(sp)
    8f90:	d9801a04 	addi	r6,sp,104
    8f94:	da402b15 	stw	r9,172(sp)
    8f98:	db402a15 	stw	r13,168(sp)
    8f9c:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    8fa0:	da402b17 	ldw	r9,172(sp)
    8fa4:	db402a17 	ldw	r13,168(sp)
    8fa8:	103eeb1e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8fac:	d9401b17 	ldw	r5,108(sp)
    8fb0:	d8801c17 	ldw	r2,112(sp)
    8fb4:	d811883a 	mov	r8,sp
    8fb8:	29000044 	addi	r4,r5,1
    8fbc:	003e8b06 	br	89ec <__alt_mem_Flash_flash_data+0xf40089ec>
    8fc0:	9023883a 	mov	r17,r18
    8fc4:	003d5a06 	br	8530 <__alt_mem_Flash_flash_data+0xf4008530>
    8fc8:	4827883a 	mov	r19,r9
    8fcc:	003e3506 	br	88a4 <__alt_mem_Flash_flash_data+0xf40088a4>
    8fd0:	d8c02217 	ldw	r3,136(sp)
    8fd4:	001b883a 	mov	r13,zero
    8fd8:	0005883a 	mov	r2,zero
    8fdc:	1d800017 	ldw	r22,0(r3)
    8fe0:	18c00104 	addi	r3,r3,4
    8fe4:	d8c02215 	stw	r3,136(sp)
    8fe8:	b009883a 	mov	r4,r22
    8fec:	003c8e06 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8ff0:	1d800017 	ldw	r22,0(r3)
    8ff4:	d9002217 	ldw	r4,136(sp)
    8ff8:	b01bd7fa 	srai	r13,r22,31
    8ffc:	21000104 	addi	r4,r4,4
    9000:	d9002215 	stw	r4,136(sp)
    9004:	6805883a 	mov	r2,r13
    9008:	003da306 	br	8698 <__alt_mem_Flash_flash_data+0xf4008698>
    900c:	d9002217 	ldw	r4,136(sp)
    9010:	001b883a 	mov	r13,zero
    9014:	00800044 	movi	r2,1
    9018:	25800017 	ldw	r22,0(r4)
    901c:	21000104 	addi	r4,r4,4
    9020:	d9002215 	stw	r4,136(sp)
    9024:	b009883a 	mov	r4,r22
    9028:	003c7f06 	br	8228 <__alt_mem_Flash_flash_data+0xf4008228>
    902c:	00c000b4 	movhi	r3,2
    9030:	18e72b04 	addi	r3,r3,-25428
    9034:	d8c02415 	stw	r3,144(sp)
    9038:	003cff06 	br	8438 <__alt_mem_Flash_flash_data+0xf4008438>
    903c:	d8801c17 	ldw	r2,112(sp)
    9040:	dd402117 	ldw	r21,132(sp)
    9044:	103ec526 	beq	r2,zero,8b5c <__alt_mem_Flash_flash_data+0xf4008b5c>
    9048:	d9002017 	ldw	r4,128(sp)
    904c:	a80b883a 	mov	r5,r21
    9050:	d9801a04 	addi	r6,sp,104
    9054:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    9058:	003ec006 	br	8b5c <__alt_mem_Flash_flash_data+0xf4008b5c>
    905c:	80800044 	addi	r2,r16,1
    9060:	ad400814 	ori	r21,r21,32
    9064:	80c00047 	ldb	r3,1(r16)
    9068:	003bef06 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    906c:	04a5c83a 	sub	r18,zero,r18
    9070:	8005883a 	mov	r2,r16
    9074:	d8c02215 	stw	r3,136(sp)
    9078:	003d5306 	br	85c8 <__alt_mem_Flash_flash_data+0xf40085c8>
    907c:	da002a15 	stw	r8,168(sp)
    9080:	0000a700 	call	a70 <strlen>
    9084:	1027883a 	mov	r19,r2
    9088:	db801d83 	ldbu	r14,118(sp)
    908c:	dd802215 	stw	r22,136(sp)
    9090:	0013883a 	mov	r9,zero
    9094:	da002a17 	ldw	r8,168(sp)
    9098:	003c7f06 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    909c:	d9002017 	ldw	r4,128(sp)
    90a0:	d9402117 	ldw	r5,132(sp)
    90a4:	d9801a04 	addi	r6,sp,104
    90a8:	da402b15 	stw	r9,172(sp)
    90ac:	0007d9c0 	call	7d9c <__sprint_r.part.0>
    90b0:	da402b17 	ldw	r9,172(sp)
    90b4:	103ea81e 	bne	r2,zero,8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    90b8:	d9401b17 	ldw	r5,108(sp)
    90bc:	d8801c17 	ldw	r2,112(sp)
    90c0:	d811883a 	mov	r8,sp
    90c4:	29000044 	addi	r4,r5,1
    90c8:	003cc006 	br	83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    90cc:	d9401b17 	ldw	r5,108(sp)
    90d0:	010000b4 	movhi	r4,2
    90d4:	21272f04 	addi	r4,r4,-25412
    90d8:	d9002415 	stw	r4,144(sp)
    90dc:	29400044 	addi	r5,r5,1
    90e0:	003c9f06 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    90e4:	00800184 	movi	r2,6
    90e8:	1240012e 	bgeu	r2,r9,90f0 <___vfiprintf_internal_r+0x1240>
    90ec:	1013883a 	mov	r9,r2
    90f0:	4827883a 	mov	r19,r9
    90f4:	4823883a 	mov	r17,r9
    90f8:	48001116 	blt	r9,zero,9140 <___vfiprintf_internal_r+0x1290>
    90fc:	050000b4 	movhi	r20,2
    9100:	dd802215 	stw	r22,136(sp)
    9104:	a526cf04 	addi	r20,r20,-25796
    9108:	003db106 	br	87d0 <__alt_mem_Flash_flash_data+0xf40087d0>
    910c:	d9401b17 	ldw	r5,108(sp)
    9110:	010000b4 	movhi	r4,2
    9114:	21272f04 	addi	r4,r4,-25412
    9118:	d9002415 	stw	r4,144(sp)
    911c:	29400044 	addi	r5,r5,1
    9120:	003cf906 	br	8508 <__alt_mem_Flash_flash_data+0xf4008508>
    9124:	4827883a 	mov	r19,r9
    9128:	db801d83 	ldbu	r14,118(sp)
    912c:	dd802215 	stw	r22,136(sp)
    9130:	0013883a 	mov	r9,zero
    9134:	003c5806 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    9138:	200d883a 	mov	r6,r4
    913c:	003ec706 	br	8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    9140:	0023883a 	mov	r17,zero
    9144:	003fed06 	br	90fc <__alt_mem_Flash_flash_data+0xf40090fc>
    9148:	d9002217 	ldw	r4,136(sp)
    914c:	22400017 	ldw	r9,0(r4)
    9150:	20c00104 	addi	r3,r4,4
    9154:	d8c02215 	stw	r3,136(sp)
    9158:	483fc20e 	bge	r9,zero,9064 <__alt_mem_Flash_flash_data+0xf4009064>
    915c:	027fffc4 	movi	r9,-1
    9160:	80c00047 	ldb	r3,1(r16)
    9164:	003bb006 	br	8028 <__alt_mem_Flash_flash_data+0xf4008028>
    9168:	8c80010e 	bge	r17,r18,9170 <___vfiprintf_internal_r+0x12c0>
    916c:	9023883a 	mov	r17,r18
    9170:	d8802317 	ldw	r2,140(sp)
    9174:	1445883a 	add	r2,r2,r17
    9178:	d8802315 	stw	r2,140(sp)
    917c:	003cef06 	br	853c <__alt_mem_Flash_flash_data+0xf400853c>

00009180 <__vfiprintf_internal>:
    9180:	2007883a 	mov	r3,r4
    9184:	010000b4 	movhi	r4,2
    9188:	21310304 	addi	r4,r4,-15348
    918c:	21000017 	ldw	r4,0(r4)
    9190:	2805883a 	mov	r2,r5
    9194:	300f883a 	mov	r7,r6
    9198:	180b883a 	mov	r5,r3
    919c:	100d883a 	mov	r6,r2
    91a0:	0007eb01 	jmpi	7eb0 <___vfiprintf_internal_r>

000091a4 <__sbprintf>:
    91a4:	2880030b 	ldhu	r2,12(r5)
    91a8:	2ac01917 	ldw	r11,100(r5)
    91ac:	2a80038b 	ldhu	r10,14(r5)
    91b0:	2a400717 	ldw	r9,28(r5)
    91b4:	2a000917 	ldw	r8,36(r5)
    91b8:	defee204 	addi	sp,sp,-1144
    91bc:	00c10004 	movi	r3,1024
    91c0:	dc011a15 	stw	r16,1128(sp)
    91c4:	10bfff4c 	andi	r2,r2,65533
    91c8:	2821883a 	mov	r16,r5
    91cc:	d8cb883a 	add	r5,sp,r3
    91d0:	dc811c15 	stw	r18,1136(sp)
    91d4:	dc411b15 	stw	r17,1132(sp)
    91d8:	dfc11d15 	stw	ra,1140(sp)
    91dc:	2025883a 	mov	r18,r4
    91e0:	d881030d 	sth	r2,1036(sp)
    91e4:	dac11915 	stw	r11,1124(sp)
    91e8:	da81038d 	sth	r10,1038(sp)
    91ec:	da410715 	stw	r9,1052(sp)
    91f0:	da010915 	stw	r8,1060(sp)
    91f4:	dec10015 	stw	sp,1024(sp)
    91f8:	dec10415 	stw	sp,1040(sp)
    91fc:	d8c10215 	stw	r3,1032(sp)
    9200:	d8c10515 	stw	r3,1044(sp)
    9204:	d8010615 	stw	zero,1048(sp)
    9208:	0007eb00 	call	7eb0 <___vfiprintf_internal_r>
    920c:	1023883a 	mov	r17,r2
    9210:	10000416 	blt	r2,zero,9224 <__sbprintf+0x80>
    9214:	9009883a 	mov	r4,r18
    9218:	d9410004 	addi	r5,sp,1024
    921c:	00047bc0 	call	47bc <_fflush_r>
    9220:	10000d1e 	bne	r2,zero,9258 <__sbprintf+0xb4>
    9224:	d8c1030b 	ldhu	r3,1036(sp)
    9228:	18c0100c 	andi	r3,r3,64
    922c:	18000326 	beq	r3,zero,923c <__sbprintf+0x98>
    9230:	8080030b 	ldhu	r2,12(r16)
    9234:	10801014 	ori	r2,r2,64
    9238:	8080030d 	sth	r2,12(r16)
    923c:	8805883a 	mov	r2,r17
    9240:	dfc11d17 	ldw	ra,1140(sp)
    9244:	dc811c17 	ldw	r18,1136(sp)
    9248:	dc411b17 	ldw	r17,1132(sp)
    924c:	dc011a17 	ldw	r16,1128(sp)
    9250:	dec11e04 	addi	sp,sp,1144
    9254:	f800283a 	ret
    9258:	047fffc4 	movi	r17,-1
    925c:	003ff106 	br	9224 <__alt_mem_Flash_flash_data+0xf4009224>

00009260 <__swbuf_r>:
    9260:	defffc04 	addi	sp,sp,-16
    9264:	dc800215 	stw	r18,8(sp)
    9268:	dc400115 	stw	r17,4(sp)
    926c:	dc000015 	stw	r16,0(sp)
    9270:	dfc00315 	stw	ra,12(sp)
    9274:	2025883a 	mov	r18,r4
    9278:	2823883a 	mov	r17,r5
    927c:	3021883a 	mov	r16,r6
    9280:	20000226 	beq	r4,zero,928c <__swbuf_r+0x2c>
    9284:	20800e17 	ldw	r2,56(r4)
    9288:	10004126 	beq	r2,zero,9390 <__swbuf_r+0x130>
    928c:	80c00617 	ldw	r3,24(r16)
    9290:	8180030b 	ldhu	r6,12(r16)
    9294:	80c00215 	stw	r3,8(r16)
    9298:	30c0020c 	andi	r3,r6,8
    929c:	18003526 	beq	r3,zero,9374 <__swbuf_r+0x114>
    92a0:	80c00417 	ldw	r3,16(r16)
    92a4:	18003326 	beq	r3,zero,9374 <__swbuf_r+0x114>
    92a8:	3088000c 	andi	r2,r6,8192
    92ac:	8c403fcc 	andi	r17,r17,255
    92b0:	10001726 	beq	r2,zero,9310 <__swbuf_r+0xb0>
    92b4:	80800017 	ldw	r2,0(r16)
    92b8:	81000517 	ldw	r4,20(r16)
    92bc:	10c7c83a 	sub	r3,r2,r3
    92c0:	19001d0e 	bge	r3,r4,9338 <__swbuf_r+0xd8>
    92c4:	18c00044 	addi	r3,r3,1
    92c8:	81400217 	ldw	r5,8(r16)
    92cc:	11000044 	addi	r4,r2,1
    92d0:	81000015 	stw	r4,0(r16)
    92d4:	297fffc4 	addi	r5,r5,-1
    92d8:	81400215 	stw	r5,8(r16)
    92dc:	14400005 	stb	r17,0(r2)
    92e0:	80800517 	ldw	r2,20(r16)
    92e4:	10c01d26 	beq	r2,r3,935c <__swbuf_r+0xfc>
    92e8:	8080030b 	ldhu	r2,12(r16)
    92ec:	1080004c 	andi	r2,r2,1
    92f0:	1000181e 	bne	r2,zero,9354 <__swbuf_r+0xf4>
    92f4:	8805883a 	mov	r2,r17
    92f8:	dfc00317 	ldw	ra,12(sp)
    92fc:	dc800217 	ldw	r18,8(sp)
    9300:	dc400117 	ldw	r17,4(sp)
    9304:	dc000017 	ldw	r16,0(sp)
    9308:	dec00404 	addi	sp,sp,16
    930c:	f800283a 	ret
    9310:	81001917 	ldw	r4,100(r16)
    9314:	00b7ffc4 	movi	r2,-8193
    9318:	31880014 	ori	r6,r6,8192
    931c:	2084703a 	and	r2,r4,r2
    9320:	80801915 	stw	r2,100(r16)
    9324:	80800017 	ldw	r2,0(r16)
    9328:	81000517 	ldw	r4,20(r16)
    932c:	8180030d 	sth	r6,12(r16)
    9330:	10c7c83a 	sub	r3,r2,r3
    9334:	193fe316 	blt	r3,r4,92c4 <__alt_mem_Flash_flash_data+0xf40092c4>
    9338:	9009883a 	mov	r4,r18
    933c:	800b883a 	mov	r5,r16
    9340:	00047bc0 	call	47bc <_fflush_r>
    9344:	1000091e 	bne	r2,zero,936c <__swbuf_r+0x10c>
    9348:	80800017 	ldw	r2,0(r16)
    934c:	00c00044 	movi	r3,1
    9350:	003fdd06 	br	92c8 <__alt_mem_Flash_flash_data+0xf40092c8>
    9354:	00800284 	movi	r2,10
    9358:	88bfe61e 	bne	r17,r2,92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    935c:	9009883a 	mov	r4,r18
    9360:	800b883a 	mov	r5,r16
    9364:	00047bc0 	call	47bc <_fflush_r>
    9368:	103fe226 	beq	r2,zero,92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    936c:	00bfffc4 	movi	r2,-1
    9370:	003fe106 	br	92f8 <__alt_mem_Flash_flash_data+0xf40092f8>
    9374:	9009883a 	mov	r4,r18
    9378:	800b883a 	mov	r5,r16
    937c:	0002b380 	call	2b38 <__swsetup_r>
    9380:	103ffa1e 	bne	r2,zero,936c <__alt_mem_Flash_flash_data+0xf400936c>
    9384:	8180030b 	ldhu	r6,12(r16)
    9388:	80c00417 	ldw	r3,16(r16)
    938c:	003fc606 	br	92a8 <__alt_mem_Flash_flash_data+0xf40092a8>
    9390:	0004b980 	call	4b98 <__sinit>
    9394:	003fbd06 	br	928c <__alt_mem_Flash_flash_data+0xf400928c>

00009398 <__swbuf>:
    9398:	00c000b4 	movhi	r3,2
    939c:	18f10304 	addi	r3,r3,-15348
    93a0:	2005883a 	mov	r2,r4
    93a4:	19000017 	ldw	r4,0(r3)
    93a8:	280d883a 	mov	r6,r5
    93ac:	100b883a 	mov	r5,r2
    93b0:	00092601 	jmpi	9260 <__swbuf_r>

000093b4 <_write_r>:
    93b4:	defffd04 	addi	sp,sp,-12
    93b8:	dc000015 	stw	r16,0(sp)
    93bc:	040000b4 	movhi	r16,2
    93c0:	dc400115 	stw	r17,4(sp)
    93c4:	8439b104 	addi	r16,r16,-6460
    93c8:	2023883a 	mov	r17,r4
    93cc:	2809883a 	mov	r4,r5
    93d0:	300b883a 	mov	r5,r6
    93d4:	380d883a 	mov	r6,r7
    93d8:	dfc00215 	stw	ra,8(sp)
    93dc:	80000015 	stw	zero,0(r16)
    93e0:	000d69c0 	call	d69c <write>
    93e4:	00ffffc4 	movi	r3,-1
    93e8:	10c00526 	beq	r2,r3,9400 <_write_r+0x4c>
    93ec:	dfc00217 	ldw	ra,8(sp)
    93f0:	dc400117 	ldw	r17,4(sp)
    93f4:	dc000017 	ldw	r16,0(sp)
    93f8:	dec00304 	addi	sp,sp,12
    93fc:	f800283a 	ret
    9400:	80c00017 	ldw	r3,0(r16)
    9404:	183ff926 	beq	r3,zero,93ec <__alt_mem_Flash_flash_data+0xf40093ec>
    9408:	88c00015 	stw	r3,0(r17)
    940c:	003ff706 	br	93ec <__alt_mem_Flash_flash_data+0xf40093ec>

00009410 <_close_r>:
    9410:	defffd04 	addi	sp,sp,-12
    9414:	dc000015 	stw	r16,0(sp)
    9418:	040000b4 	movhi	r16,2
    941c:	dc400115 	stw	r17,4(sp)
    9420:	8439b104 	addi	r16,r16,-6460
    9424:	2023883a 	mov	r17,r4
    9428:	2809883a 	mov	r4,r5
    942c:	dfc00215 	stw	ra,8(sp)
    9430:	80000015 	stw	zero,0(r16)
    9434:	000ce240 	call	ce24 <close>
    9438:	00ffffc4 	movi	r3,-1
    943c:	10c00526 	beq	r2,r3,9454 <_close_r+0x44>
    9440:	dfc00217 	ldw	ra,8(sp)
    9444:	dc400117 	ldw	r17,4(sp)
    9448:	dc000017 	ldw	r16,0(sp)
    944c:	dec00304 	addi	sp,sp,12
    9450:	f800283a 	ret
    9454:	80c00017 	ldw	r3,0(r16)
    9458:	183ff926 	beq	r3,zero,9440 <__alt_mem_Flash_flash_data+0xf4009440>
    945c:	88c00015 	stw	r3,0(r17)
    9460:	003ff706 	br	9440 <__alt_mem_Flash_flash_data+0xf4009440>

00009464 <_calloc_r>:
    9464:	298b383a 	mul	r5,r5,r6
    9468:	defffe04 	addi	sp,sp,-8
    946c:	dc000015 	stw	r16,0(sp)
    9470:	dfc00115 	stw	ra,4(sp)
    9474:	00058dc0 	call	58dc <_malloc_r>
    9478:	1021883a 	mov	r16,r2
    947c:	10002826 	beq	r2,zero,9520 <_calloc_r+0xbc>
    9480:	11bfff17 	ldw	r6,-4(r2)
    9484:	00bfff04 	movi	r2,-4
    9488:	00c00904 	movi	r3,36
    948c:	308c703a 	and	r6,r6,r2
    9490:	308d883a 	add	r6,r6,r2
    9494:	19801436 	bltu	r3,r6,94e8 <_calloc_r+0x84>
    9498:	008004c4 	movi	r2,19
    949c:	11800936 	bltu	r2,r6,94c4 <_calloc_r+0x60>
    94a0:	8005883a 	mov	r2,r16
    94a4:	10000015 	stw	zero,0(r2)
    94a8:	10000115 	stw	zero,4(r2)
    94ac:	10000215 	stw	zero,8(r2)
    94b0:	8005883a 	mov	r2,r16
    94b4:	dfc00117 	ldw	ra,4(sp)
    94b8:	dc000017 	ldw	r16,0(sp)
    94bc:	dec00204 	addi	sp,sp,8
    94c0:	f800283a 	ret
    94c4:	80000015 	stw	zero,0(r16)
    94c8:	80000115 	stw	zero,4(r16)
    94cc:	008006c4 	movi	r2,27
    94d0:	11800d2e 	bgeu	r2,r6,9508 <_calloc_r+0xa4>
    94d4:	80000215 	stw	zero,8(r16)
    94d8:	80000315 	stw	zero,12(r16)
    94dc:	30c00c26 	beq	r6,r3,9510 <_calloc_r+0xac>
    94e0:	80800404 	addi	r2,r16,16
    94e4:	003fef06 	br	94a4 <__alt_mem_Flash_flash_data+0xf40094a4>
    94e8:	8009883a 	mov	r4,r16
    94ec:	000b883a 	mov	r5,zero
    94f0:	00064000 	call	6400 <memset>
    94f4:	8005883a 	mov	r2,r16
    94f8:	dfc00117 	ldw	ra,4(sp)
    94fc:	dc000017 	ldw	r16,0(sp)
    9500:	dec00204 	addi	sp,sp,8
    9504:	f800283a 	ret
    9508:	80800204 	addi	r2,r16,8
    950c:	003fe506 	br	94a4 <__alt_mem_Flash_flash_data+0xf40094a4>
    9510:	80000415 	stw	zero,16(r16)
    9514:	80800604 	addi	r2,r16,24
    9518:	80000515 	stw	zero,20(r16)
    951c:	003fe106 	br	94a4 <__alt_mem_Flash_flash_data+0xf40094a4>
    9520:	0005883a 	mov	r2,zero
    9524:	003fe306 	br	94b4 <__alt_mem_Flash_flash_data+0xf40094b4>

00009528 <_fclose_r>:
    9528:	28003926 	beq	r5,zero,9610 <_fclose_r+0xe8>
    952c:	defffc04 	addi	sp,sp,-16
    9530:	dc400115 	stw	r17,4(sp)
    9534:	dc000015 	stw	r16,0(sp)
    9538:	dfc00315 	stw	ra,12(sp)
    953c:	dc800215 	stw	r18,8(sp)
    9540:	2023883a 	mov	r17,r4
    9544:	2821883a 	mov	r16,r5
    9548:	20000226 	beq	r4,zero,9554 <_fclose_r+0x2c>
    954c:	20800e17 	ldw	r2,56(r4)
    9550:	10002726 	beq	r2,zero,95f0 <_fclose_r+0xc8>
    9554:	8080030f 	ldh	r2,12(r16)
    9558:	1000071e 	bne	r2,zero,9578 <_fclose_r+0x50>
    955c:	0005883a 	mov	r2,zero
    9560:	dfc00317 	ldw	ra,12(sp)
    9564:	dc800217 	ldw	r18,8(sp)
    9568:	dc400117 	ldw	r17,4(sp)
    956c:	dc000017 	ldw	r16,0(sp)
    9570:	dec00404 	addi	sp,sp,16
    9574:	f800283a 	ret
    9578:	8809883a 	mov	r4,r17
    957c:	800b883a 	mov	r5,r16
    9580:	00045b40 	call	45b4 <__sflush_r>
    9584:	1025883a 	mov	r18,r2
    9588:	80800b17 	ldw	r2,44(r16)
    958c:	10000426 	beq	r2,zero,95a0 <_fclose_r+0x78>
    9590:	81400717 	ldw	r5,28(r16)
    9594:	8809883a 	mov	r4,r17
    9598:	103ee83a 	callr	r2
    959c:	10001616 	blt	r2,zero,95f8 <_fclose_r+0xd0>
    95a0:	8080030b 	ldhu	r2,12(r16)
    95a4:	1080200c 	andi	r2,r2,128
    95a8:	1000151e 	bne	r2,zero,9600 <_fclose_r+0xd8>
    95ac:	81400c17 	ldw	r5,48(r16)
    95b0:	28000526 	beq	r5,zero,95c8 <_fclose_r+0xa0>
    95b4:	80801004 	addi	r2,r16,64
    95b8:	28800226 	beq	r5,r2,95c4 <_fclose_r+0x9c>
    95bc:	8809883a 	mov	r4,r17
    95c0:	0004d0c0 	call	4d0c <_free_r>
    95c4:	80000c15 	stw	zero,48(r16)
    95c8:	81401117 	ldw	r5,68(r16)
    95cc:	28000326 	beq	r5,zero,95dc <_fclose_r+0xb4>
    95d0:	8809883a 	mov	r4,r17
    95d4:	0004d0c0 	call	4d0c <_free_r>
    95d8:	80001115 	stw	zero,68(r16)
    95dc:	0004ba80 	call	4ba8 <__sfp_lock_acquire>
    95e0:	8000030d 	sth	zero,12(r16)
    95e4:	0004bac0 	call	4bac <__sfp_lock_release>
    95e8:	9005883a 	mov	r2,r18
    95ec:	003fdc06 	br	9560 <__alt_mem_Flash_flash_data+0xf4009560>
    95f0:	0004b980 	call	4b98 <__sinit>
    95f4:	003fd706 	br	9554 <__alt_mem_Flash_flash_data+0xf4009554>
    95f8:	04bfffc4 	movi	r18,-1
    95fc:	003fe806 	br	95a0 <__alt_mem_Flash_flash_data+0xf40095a0>
    9600:	81400417 	ldw	r5,16(r16)
    9604:	8809883a 	mov	r4,r17
    9608:	0004d0c0 	call	4d0c <_free_r>
    960c:	003fe706 	br	95ac <__alt_mem_Flash_flash_data+0xf40095ac>
    9610:	0005883a 	mov	r2,zero
    9614:	f800283a 	ret

00009618 <fclose>:
    9618:	008000b4 	movhi	r2,2
    961c:	10b10304 	addi	r2,r2,-15348
    9620:	200b883a 	mov	r5,r4
    9624:	11000017 	ldw	r4,0(r2)
    9628:	00095281 	jmpi	9528 <_fclose_r>

0000962c <_fputwc_r>:
    962c:	3080030b 	ldhu	r2,12(r6)
    9630:	defff804 	addi	sp,sp,-32
    9634:	dcc00415 	stw	r19,16(sp)
    9638:	dc800315 	stw	r18,12(sp)
    963c:	dc000115 	stw	r16,4(sp)
    9640:	dfc00715 	stw	ra,28(sp)
    9644:	dd400615 	stw	r21,24(sp)
    9648:	dd000515 	stw	r20,20(sp)
    964c:	dc400215 	stw	r17,8(sp)
    9650:	10c8000c 	andi	r3,r2,8192
    9654:	3021883a 	mov	r16,r6
    9658:	2027883a 	mov	r19,r4
    965c:	2825883a 	mov	r18,r5
    9660:	1800051e 	bne	r3,zero,9678 <_fputwc_r+0x4c>
    9664:	30c01917 	ldw	r3,100(r6)
    9668:	10880014 	ori	r2,r2,8192
    966c:	3080030d 	sth	r2,12(r6)
    9670:	18880014 	ori	r2,r3,8192
    9674:	30801915 	stw	r2,100(r6)
    9678:	00056cc0 	call	56cc <__locale_mb_cur_max>
    967c:	00c00044 	movi	r3,1
    9680:	10c03e26 	beq	r2,r3,977c <_fputwc_r+0x150>
    9684:	9809883a 	mov	r4,r19
    9688:	d80b883a 	mov	r5,sp
    968c:	900d883a 	mov	r6,r18
    9690:	81c01704 	addi	r7,r16,92
    9694:	00099700 	call	9970 <_wcrtomb_r>
    9698:	1029883a 	mov	r20,r2
    969c:	00bfffc4 	movi	r2,-1
    96a0:	a0802026 	beq	r20,r2,9724 <_fputwc_r+0xf8>
    96a4:	d9400003 	ldbu	r5,0(sp)
    96a8:	a0001c26 	beq	r20,zero,971c <_fputwc_r+0xf0>
    96ac:	0023883a 	mov	r17,zero
    96b0:	05400284 	movi	r21,10
    96b4:	00000906 	br	96dc <_fputwc_r+0xb0>
    96b8:	80800017 	ldw	r2,0(r16)
    96bc:	11400005 	stb	r5,0(r2)
    96c0:	80c00017 	ldw	r3,0(r16)
    96c4:	18c00044 	addi	r3,r3,1
    96c8:	80c00015 	stw	r3,0(r16)
    96cc:	8c400044 	addi	r17,r17,1
    96d0:	dc45883a 	add	r2,sp,r17
    96d4:	8d00112e 	bgeu	r17,r20,971c <_fputwc_r+0xf0>
    96d8:	11400003 	ldbu	r5,0(r2)
    96dc:	80c00217 	ldw	r3,8(r16)
    96e0:	18ffffc4 	addi	r3,r3,-1
    96e4:	80c00215 	stw	r3,8(r16)
    96e8:	183ff30e 	bge	r3,zero,96b8 <__alt_mem_Flash_flash_data+0xf40096b8>
    96ec:	80800617 	ldw	r2,24(r16)
    96f0:	18801916 	blt	r3,r2,9758 <_fputwc_r+0x12c>
    96f4:	80800017 	ldw	r2,0(r16)
    96f8:	11400005 	stb	r5,0(r2)
    96fc:	80800017 	ldw	r2,0(r16)
    9700:	10c00003 	ldbu	r3,0(r2)
    9704:	10800044 	addi	r2,r2,1
    9708:	1d402326 	beq	r3,r21,9798 <_fputwc_r+0x16c>
    970c:	80800015 	stw	r2,0(r16)
    9710:	8c400044 	addi	r17,r17,1
    9714:	dc45883a 	add	r2,sp,r17
    9718:	8d3fef36 	bltu	r17,r20,96d8 <__alt_mem_Flash_flash_data+0xf40096d8>
    971c:	9005883a 	mov	r2,r18
    9720:	00000406 	br	9734 <_fputwc_r+0x108>
    9724:	80c0030b 	ldhu	r3,12(r16)
    9728:	a005883a 	mov	r2,r20
    972c:	18c01014 	ori	r3,r3,64
    9730:	80c0030d 	sth	r3,12(r16)
    9734:	dfc00717 	ldw	ra,28(sp)
    9738:	dd400617 	ldw	r21,24(sp)
    973c:	dd000517 	ldw	r20,20(sp)
    9740:	dcc00417 	ldw	r19,16(sp)
    9744:	dc800317 	ldw	r18,12(sp)
    9748:	dc400217 	ldw	r17,8(sp)
    974c:	dc000117 	ldw	r16,4(sp)
    9750:	dec00804 	addi	sp,sp,32
    9754:	f800283a 	ret
    9758:	9809883a 	mov	r4,r19
    975c:	29403fcc 	andi	r5,r5,255
    9760:	800d883a 	mov	r6,r16
    9764:	00092600 	call	9260 <__swbuf_r>
    9768:	10bfffe0 	cmpeqi	r2,r2,-1
    976c:	10803fcc 	andi	r2,r2,255
    9770:	103fd626 	beq	r2,zero,96cc <__alt_mem_Flash_flash_data+0xf40096cc>
    9774:	00bfffc4 	movi	r2,-1
    9778:	003fee06 	br	9734 <__alt_mem_Flash_flash_data+0xf4009734>
    977c:	90ffffc4 	addi	r3,r18,-1
    9780:	01003f84 	movi	r4,254
    9784:	20ffbf36 	bltu	r4,r3,9684 <__alt_mem_Flash_flash_data+0xf4009684>
    9788:	900b883a 	mov	r5,r18
    978c:	dc800005 	stb	r18,0(sp)
    9790:	1029883a 	mov	r20,r2
    9794:	003fc506 	br	96ac <__alt_mem_Flash_flash_data+0xf40096ac>
    9798:	9809883a 	mov	r4,r19
    979c:	a80b883a 	mov	r5,r21
    97a0:	800d883a 	mov	r6,r16
    97a4:	00092600 	call	9260 <__swbuf_r>
    97a8:	10bfffe0 	cmpeqi	r2,r2,-1
    97ac:	003fef06 	br	976c <__alt_mem_Flash_flash_data+0xf400976c>

000097b0 <fputwc>:
    97b0:	008000b4 	movhi	r2,2
    97b4:	defffc04 	addi	sp,sp,-16
    97b8:	10b10304 	addi	r2,r2,-15348
    97bc:	dc000115 	stw	r16,4(sp)
    97c0:	14000017 	ldw	r16,0(r2)
    97c4:	dc400215 	stw	r17,8(sp)
    97c8:	dfc00315 	stw	ra,12(sp)
    97cc:	2023883a 	mov	r17,r4
    97d0:	280d883a 	mov	r6,r5
    97d4:	80000626 	beq	r16,zero,97f0 <fputwc+0x40>
    97d8:	80800e17 	ldw	r2,56(r16)
    97dc:	1000041e 	bne	r2,zero,97f0 <fputwc+0x40>
    97e0:	8009883a 	mov	r4,r16
    97e4:	d9400015 	stw	r5,0(sp)
    97e8:	0004b980 	call	4b98 <__sinit>
    97ec:	d9800017 	ldw	r6,0(sp)
    97f0:	8009883a 	mov	r4,r16
    97f4:	880b883a 	mov	r5,r17
    97f8:	dfc00317 	ldw	ra,12(sp)
    97fc:	dc400217 	ldw	r17,8(sp)
    9800:	dc000117 	ldw	r16,4(sp)
    9804:	dec00404 	addi	sp,sp,16
    9808:	000962c1 	jmpi	962c <_fputwc_r>

0000980c <_fstat_r>:
    980c:	defffd04 	addi	sp,sp,-12
    9810:	dc000015 	stw	r16,0(sp)
    9814:	040000b4 	movhi	r16,2
    9818:	dc400115 	stw	r17,4(sp)
    981c:	8439b104 	addi	r16,r16,-6460
    9820:	2023883a 	mov	r17,r4
    9824:	2809883a 	mov	r4,r5
    9828:	300b883a 	mov	r5,r6
    982c:	dfc00215 	stw	ra,8(sp)
    9830:	80000015 	stw	zero,0(r16)
    9834:	000cf700 	call	cf70 <fstat>
    9838:	00ffffc4 	movi	r3,-1
    983c:	10c00526 	beq	r2,r3,9854 <_fstat_r+0x48>
    9840:	dfc00217 	ldw	ra,8(sp)
    9844:	dc400117 	ldw	r17,4(sp)
    9848:	dc000017 	ldw	r16,0(sp)
    984c:	dec00304 	addi	sp,sp,12
    9850:	f800283a 	ret
    9854:	80c00017 	ldw	r3,0(r16)
    9858:	183ff926 	beq	r3,zero,9840 <__alt_mem_Flash_flash_data+0xf4009840>
    985c:	88c00015 	stw	r3,0(r17)
    9860:	003ff706 	br	9840 <__alt_mem_Flash_flash_data+0xf4009840>

00009864 <_isatty_r>:
    9864:	defffd04 	addi	sp,sp,-12
    9868:	dc000015 	stw	r16,0(sp)
    986c:	040000b4 	movhi	r16,2
    9870:	dc400115 	stw	r17,4(sp)
    9874:	8439b104 	addi	r16,r16,-6460
    9878:	2023883a 	mov	r17,r4
    987c:	2809883a 	mov	r4,r5
    9880:	dfc00215 	stw	ra,8(sp)
    9884:	80000015 	stw	zero,0(r16)
    9888:	000d0700 	call	d070 <isatty>
    988c:	00ffffc4 	movi	r3,-1
    9890:	10c00526 	beq	r2,r3,98a8 <_isatty_r+0x44>
    9894:	dfc00217 	ldw	ra,8(sp)
    9898:	dc400117 	ldw	r17,4(sp)
    989c:	dc000017 	ldw	r16,0(sp)
    98a0:	dec00304 	addi	sp,sp,12
    98a4:	f800283a 	ret
    98a8:	80c00017 	ldw	r3,0(r16)
    98ac:	183ff926 	beq	r3,zero,9894 <__alt_mem_Flash_flash_data+0xf4009894>
    98b0:	88c00015 	stw	r3,0(r17)
    98b4:	003ff706 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>

000098b8 <_lseek_r>:
    98b8:	defffd04 	addi	sp,sp,-12
    98bc:	dc000015 	stw	r16,0(sp)
    98c0:	040000b4 	movhi	r16,2
    98c4:	dc400115 	stw	r17,4(sp)
    98c8:	8439b104 	addi	r16,r16,-6460
    98cc:	2023883a 	mov	r17,r4
    98d0:	2809883a 	mov	r4,r5
    98d4:	300b883a 	mov	r5,r6
    98d8:	380d883a 	mov	r6,r7
    98dc:	dfc00215 	stw	ra,8(sp)
    98e0:	80000015 	stw	zero,0(r16)
    98e4:	000d2480 	call	d248 <lseek>
    98e8:	00ffffc4 	movi	r3,-1
    98ec:	10c00526 	beq	r2,r3,9904 <_lseek_r+0x4c>
    98f0:	dfc00217 	ldw	ra,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	80c00017 	ldw	r3,0(r16)
    9908:	183ff926 	beq	r3,zero,98f0 <__alt_mem_Flash_flash_data+0xf40098f0>
    990c:	88c00015 	stw	r3,0(r17)
    9910:	003ff706 	br	98f0 <__alt_mem_Flash_flash_data+0xf40098f0>

00009914 <_read_r>:
    9914:	defffd04 	addi	sp,sp,-12
    9918:	dc000015 	stw	r16,0(sp)
    991c:	040000b4 	movhi	r16,2
    9920:	dc400115 	stw	r17,4(sp)
    9924:	8439b104 	addi	r16,r16,-6460
    9928:	2023883a 	mov	r17,r4
    992c:	2809883a 	mov	r4,r5
    9930:	300b883a 	mov	r5,r6
    9934:	380d883a 	mov	r6,r7
    9938:	dfc00215 	stw	ra,8(sp)
    993c:	80000015 	stw	zero,0(r16)
    9940:	000d4400 	call	d440 <read>
    9944:	00ffffc4 	movi	r3,-1
    9948:	10c00526 	beq	r2,r3,9960 <_read_r+0x4c>
    994c:	dfc00217 	ldw	ra,8(sp)
    9950:	dc400117 	ldw	r17,4(sp)
    9954:	dc000017 	ldw	r16,0(sp)
    9958:	dec00304 	addi	sp,sp,12
    995c:	f800283a 	ret
    9960:	80c00017 	ldw	r3,0(r16)
    9964:	183ff926 	beq	r3,zero,994c <__alt_mem_Flash_flash_data+0xf400994c>
    9968:	88c00015 	stw	r3,0(r17)
    996c:	003ff706 	br	994c <__alt_mem_Flash_flash_data+0xf400994c>

00009970 <_wcrtomb_r>:
    9970:	defff604 	addi	sp,sp,-40
    9974:	008000b4 	movhi	r2,2
    9978:	dc800815 	stw	r18,32(sp)
    997c:	dc400715 	stw	r17,28(sp)
    9980:	dc000615 	stw	r16,24(sp)
    9984:	10b10704 	addi	r2,r2,-15332
    9988:	dfc00915 	stw	ra,36(sp)
    998c:	2021883a 	mov	r16,r4
    9990:	3823883a 	mov	r17,r7
    9994:	14800017 	ldw	r18,0(r2)
    9998:	28001426 	beq	r5,zero,99ec <_wcrtomb_r+0x7c>
    999c:	d9400415 	stw	r5,16(sp)
    99a0:	d9800515 	stw	r6,20(sp)
    99a4:	00056c00 	call	56c0 <__locale_charset>
    99a8:	d9400417 	ldw	r5,16(sp)
    99ac:	d9800517 	ldw	r6,20(sp)
    99b0:	8009883a 	mov	r4,r16
    99b4:	dc400015 	stw	r17,0(sp)
    99b8:	100f883a 	mov	r7,r2
    99bc:	903ee83a 	callr	r18
    99c0:	00ffffc4 	movi	r3,-1
    99c4:	10c0031e 	bne	r2,r3,99d4 <_wcrtomb_r+0x64>
    99c8:	88000015 	stw	zero,0(r17)
    99cc:	00c02284 	movi	r3,138
    99d0:	80c00015 	stw	r3,0(r16)
    99d4:	dfc00917 	ldw	ra,36(sp)
    99d8:	dc800817 	ldw	r18,32(sp)
    99dc:	dc400717 	ldw	r17,28(sp)
    99e0:	dc000617 	ldw	r16,24(sp)
    99e4:	dec00a04 	addi	sp,sp,40
    99e8:	f800283a 	ret
    99ec:	00056c00 	call	56c0 <__locale_charset>
    99f0:	8009883a 	mov	r4,r16
    99f4:	dc400015 	stw	r17,0(sp)
    99f8:	d9400104 	addi	r5,sp,4
    99fc:	000d883a 	mov	r6,zero
    9a00:	100f883a 	mov	r7,r2
    9a04:	903ee83a 	callr	r18
    9a08:	003fed06 	br	99c0 <__alt_mem_Flash_flash_data+0xf40099c0>

00009a0c <wcrtomb>:
    9a0c:	defff604 	addi	sp,sp,-40
    9a10:	008000b4 	movhi	r2,2
    9a14:	dc800615 	stw	r18,24(sp)
    9a18:	dc400515 	stw	r17,20(sp)
    9a1c:	dc000415 	stw	r16,16(sp)
    9a20:	10b10304 	addi	r2,r2,-15348
    9a24:	dfc00915 	stw	ra,36(sp)
    9a28:	dd000815 	stw	r20,32(sp)
    9a2c:	dcc00715 	stw	r19,28(sp)
    9a30:	2021883a 	mov	r16,r4
    9a34:	3025883a 	mov	r18,r6
    9a38:	14400017 	ldw	r17,0(r2)
    9a3c:	20001826 	beq	r4,zero,9aa0 <wcrtomb+0x94>
    9a40:	008000b4 	movhi	r2,2
    9a44:	10b10704 	addi	r2,r2,-15332
    9a48:	15000017 	ldw	r20,0(r2)
    9a4c:	2827883a 	mov	r19,r5
    9a50:	00056c00 	call	56c0 <__locale_charset>
    9a54:	8809883a 	mov	r4,r17
    9a58:	dc800015 	stw	r18,0(sp)
    9a5c:	800b883a 	mov	r5,r16
    9a60:	980d883a 	mov	r6,r19
    9a64:	100f883a 	mov	r7,r2
    9a68:	a03ee83a 	callr	r20
    9a6c:	00ffffc4 	movi	r3,-1
    9a70:	10c0031e 	bne	r2,r3,9a80 <wcrtomb+0x74>
    9a74:	90000015 	stw	zero,0(r18)
    9a78:	00c02284 	movi	r3,138
    9a7c:	88c00015 	stw	r3,0(r17)
    9a80:	dfc00917 	ldw	ra,36(sp)
    9a84:	dd000817 	ldw	r20,32(sp)
    9a88:	dcc00717 	ldw	r19,28(sp)
    9a8c:	dc800617 	ldw	r18,24(sp)
    9a90:	dc400517 	ldw	r17,20(sp)
    9a94:	dc000417 	ldw	r16,16(sp)
    9a98:	dec00a04 	addi	sp,sp,40
    9a9c:	f800283a 	ret
    9aa0:	008000b4 	movhi	r2,2
    9aa4:	10b10704 	addi	r2,r2,-15332
    9aa8:	14000017 	ldw	r16,0(r2)
    9aac:	00056c00 	call	56c0 <__locale_charset>
    9ab0:	8809883a 	mov	r4,r17
    9ab4:	dc800015 	stw	r18,0(sp)
    9ab8:	d9400104 	addi	r5,sp,4
    9abc:	000d883a 	mov	r6,zero
    9ac0:	100f883a 	mov	r7,r2
    9ac4:	803ee83a 	callr	r16
    9ac8:	003fe806 	br	9a6c <__alt_mem_Flash_flash_data+0xf4009a6c>

00009acc <__ascii_wctomb>:
    9acc:	28000526 	beq	r5,zero,9ae4 <__ascii_wctomb+0x18>
    9ad0:	00803fc4 	movi	r2,255
    9ad4:	11800536 	bltu	r2,r6,9aec <__ascii_wctomb+0x20>
    9ad8:	29800005 	stb	r6,0(r5)
    9adc:	00800044 	movi	r2,1
    9ae0:	f800283a 	ret
    9ae4:	0005883a 	mov	r2,zero
    9ae8:	f800283a 	ret
    9aec:	00802284 	movi	r2,138
    9af0:	20800015 	stw	r2,0(r4)
    9af4:	00bfffc4 	movi	r2,-1
    9af8:	f800283a 	ret

00009afc <_wctomb_r>:
    9afc:	008000b4 	movhi	r2,2
    9b00:	defff904 	addi	sp,sp,-28
    9b04:	10b10704 	addi	r2,r2,-15332
    9b08:	dfc00615 	stw	ra,24(sp)
    9b0c:	dc400515 	stw	r17,20(sp)
    9b10:	dc000415 	stw	r16,16(sp)
    9b14:	3823883a 	mov	r17,r7
    9b18:	14000017 	ldw	r16,0(r2)
    9b1c:	d9000115 	stw	r4,4(sp)
    9b20:	d9400215 	stw	r5,8(sp)
    9b24:	d9800315 	stw	r6,12(sp)
    9b28:	00056c00 	call	56c0 <__locale_charset>
    9b2c:	d9000117 	ldw	r4,4(sp)
    9b30:	d9400217 	ldw	r5,8(sp)
    9b34:	d9800317 	ldw	r6,12(sp)
    9b38:	dc400015 	stw	r17,0(sp)
    9b3c:	100f883a 	mov	r7,r2
    9b40:	803ee83a 	callr	r16
    9b44:	dfc00617 	ldw	ra,24(sp)
    9b48:	dc400517 	ldw	r17,20(sp)
    9b4c:	dc000417 	ldw	r16,16(sp)
    9b50:	dec00704 	addi	sp,sp,28
    9b54:	f800283a 	ret

00009b58 <__udivdi3>:
    9b58:	defff504 	addi	sp,sp,-44
    9b5c:	dcc00415 	stw	r19,16(sp)
    9b60:	dc000115 	stw	r16,4(sp)
    9b64:	dfc00a15 	stw	ra,40(sp)
    9b68:	df000915 	stw	fp,36(sp)
    9b6c:	ddc00815 	stw	r23,32(sp)
    9b70:	dd800715 	stw	r22,28(sp)
    9b74:	dd400615 	stw	r21,24(sp)
    9b78:	dd000515 	stw	r20,20(sp)
    9b7c:	dc800315 	stw	r18,12(sp)
    9b80:	dc400215 	stw	r17,8(sp)
    9b84:	2027883a 	mov	r19,r4
    9b88:	2821883a 	mov	r16,r5
    9b8c:	3800421e 	bne	r7,zero,9c98 <__udivdi3+0x140>
    9b90:	3025883a 	mov	r18,r6
    9b94:	2023883a 	mov	r17,r4
    9b98:	2980542e 	bgeu	r5,r6,9cec <__udivdi3+0x194>
    9b9c:	00bfffd4 	movui	r2,65535
    9ba0:	282d883a 	mov	r22,r5
    9ba4:	1180a836 	bltu	r2,r6,9e48 <__udivdi3+0x2f0>
    9ba8:	00803fc4 	movi	r2,255
    9bac:	1181422e 	bgeu	r2,r6,a0b8 <__udivdi3+0x560>
    9bb0:	00800204 	movi	r2,8
    9bb4:	1007883a 	mov	r3,r2
    9bb8:	3084d83a 	srl	r2,r6,r2
    9bbc:	010000b4 	movhi	r4,2
    9bc0:	21273304 	addi	r4,r4,-25396
    9bc4:	2085883a 	add	r2,r4,r2
    9bc8:	10800003 	ldbu	r2,0(r2)
    9bcc:	10c7883a 	add	r3,r2,r3
    9bd0:	00800804 	movi	r2,32
    9bd4:	10c5c83a 	sub	r2,r2,r3
    9bd8:	10000526 	beq	r2,zero,9bf0 <__udivdi3+0x98>
    9bdc:	80a0983a 	sll	r16,r16,r2
    9be0:	98c6d83a 	srl	r3,r19,r3
    9be4:	30a4983a 	sll	r18,r6,r2
    9be8:	98a2983a 	sll	r17,r19,r2
    9bec:	80ecb03a 	or	r22,r16,r3
    9bf0:	902ad43a 	srli	r21,r18,16
    9bf4:	b009883a 	mov	r4,r22
    9bf8:	953fffcc 	andi	r20,r18,65535
    9bfc:	a80b883a 	mov	r5,r21
    9c00:	000a7cc0 	call	a7cc <__umodsi3>
    9c04:	b009883a 	mov	r4,r22
    9c08:	a80b883a 	mov	r5,r21
    9c0c:	1027883a 	mov	r19,r2
    9c10:	000a7c40 	call	a7c4 <__udivsi3>
    9c14:	1021883a 	mov	r16,r2
    9c18:	8806d43a 	srli	r3,r17,16
    9c1c:	9804943a 	slli	r2,r19,16
    9c20:	8527383a 	mul	r19,r16,r20
    9c24:	10c4b03a 	or	r2,r2,r3
    9c28:	14c0052e 	bgeu	r2,r19,9c40 <__udivdi3+0xe8>
    9c2c:	1485883a 	add	r2,r2,r18
    9c30:	80ffffc4 	addi	r3,r16,-1
    9c34:	14800136 	bltu	r2,r18,9c3c <__udivdi3+0xe4>
    9c38:	14c13436 	bltu	r2,r19,a10c <__udivdi3+0x5b4>
    9c3c:	1821883a 	mov	r16,r3
    9c40:	14e7c83a 	sub	r19,r2,r19
    9c44:	9809883a 	mov	r4,r19
    9c48:	a80b883a 	mov	r5,r21
    9c4c:	000a7cc0 	call	a7cc <__umodsi3>
    9c50:	102d883a 	mov	r22,r2
    9c54:	9809883a 	mov	r4,r19
    9c58:	a80b883a 	mov	r5,r21
    9c5c:	000a7c40 	call	a7c4 <__udivsi3>
    9c60:	b02c943a 	slli	r22,r22,16
    9c64:	1529383a 	mul	r20,r2,r20
    9c68:	8c7fffcc 	andi	r17,r17,65535
    9c6c:	b462b03a 	or	r17,r22,r17
    9c70:	8d00052e 	bgeu	r17,r20,9c88 <__udivdi3+0x130>
    9c74:	8ca3883a 	add	r17,r17,r18
    9c78:	10ffffc4 	addi	r3,r2,-1
    9c7c:	8c80f636 	bltu	r17,r18,a058 <__udivdi3+0x500>
    9c80:	8d00f52e 	bgeu	r17,r20,a058 <__udivdi3+0x500>
    9c84:	10bfff84 	addi	r2,r2,-2
    9c88:	8020943a 	slli	r16,r16,16
    9c8c:	0007883a 	mov	r3,zero
    9c90:	1404b03a 	or	r2,r2,r16
    9c94:	00005b06 	br	9e04 <__udivdi3+0x2ac>
    9c98:	29c05836 	bltu	r5,r7,9dfc <__udivdi3+0x2a4>
    9c9c:	00bfffd4 	movui	r2,65535
    9ca0:	11c0642e 	bgeu	r2,r7,9e34 <__udivdi3+0x2dc>
    9ca4:	00804034 	movhi	r2,256
    9ca8:	10bfffc4 	addi	r2,r2,-1
    9cac:	11c0f32e 	bgeu	r2,r7,a07c <__udivdi3+0x524>
    9cb0:	00c00604 	movi	r3,24
    9cb4:	180b883a 	mov	r5,r3
    9cb8:	38c6d83a 	srl	r3,r7,r3
    9cbc:	008000b4 	movhi	r2,2
    9cc0:	10a73304 	addi	r2,r2,-25396
    9cc4:	10c7883a 	add	r3,r2,r3
    9cc8:	18c00003 	ldbu	r3,0(r3)
    9ccc:	01000804 	movi	r4,32
    9cd0:	1947883a 	add	r3,r3,r5
    9cd4:	20e5c83a 	sub	r18,r4,r3
    9cd8:	9000661e 	bne	r18,zero,9e74 <__udivdi3+0x31c>
    9cdc:	3c00f936 	bltu	r7,r16,a0c4 <__udivdi3+0x56c>
    9ce0:	9985403a 	cmpgeu	r2,r19,r6
    9ce4:	0007883a 	mov	r3,zero
    9ce8:	00004606 	br	9e04 <__udivdi3+0x2ac>
    9cec:	3000041e 	bne	r6,zero,9d00 <__udivdi3+0x1a8>
    9cf0:	01000044 	movi	r4,1
    9cf4:	000b883a 	mov	r5,zero
    9cf8:	000a7c40 	call	a7c4 <__udivsi3>
    9cfc:	1025883a 	mov	r18,r2
    9d00:	00bfffd4 	movui	r2,65535
    9d04:	1480562e 	bgeu	r2,r18,9e60 <__udivdi3+0x308>
    9d08:	00804034 	movhi	r2,256
    9d0c:	10bfffc4 	addi	r2,r2,-1
    9d10:	1480e32e 	bgeu	r2,r18,a0a0 <__udivdi3+0x548>
    9d14:	00800604 	movi	r2,24
    9d18:	1007883a 	mov	r3,r2
    9d1c:	9084d83a 	srl	r2,r18,r2
    9d20:	010000b4 	movhi	r4,2
    9d24:	21273304 	addi	r4,r4,-25396
    9d28:	2085883a 	add	r2,r4,r2
    9d2c:	10800003 	ldbu	r2,0(r2)
    9d30:	10c5883a 	add	r2,r2,r3
    9d34:	00c00804 	movi	r3,32
    9d38:	1887c83a 	sub	r3,r3,r2
    9d3c:	1800911e 	bne	r3,zero,9f84 <__udivdi3+0x42c>
    9d40:	9028d43a 	srli	r20,r18,16
    9d44:	84a1c83a 	sub	r16,r16,r18
    9d48:	957fffcc 	andi	r21,r18,65535
    9d4c:	00c00044 	movi	r3,1
    9d50:	8009883a 	mov	r4,r16
    9d54:	a00b883a 	mov	r5,r20
    9d58:	d8c00015 	stw	r3,0(sp)
    9d5c:	000a7cc0 	call	a7cc <__umodsi3>
    9d60:	8009883a 	mov	r4,r16
    9d64:	a00b883a 	mov	r5,r20
    9d68:	1027883a 	mov	r19,r2
    9d6c:	000a7c40 	call	a7c4 <__udivsi3>
    9d70:	1021883a 	mov	r16,r2
    9d74:	880cd43a 	srli	r6,r17,16
    9d78:	9804943a 	slli	r2,r19,16
    9d7c:	8567383a 	mul	r19,r16,r21
    9d80:	d8c00017 	ldw	r3,0(sp)
    9d84:	1188b03a 	or	r4,r2,r6
    9d88:	24c0052e 	bgeu	r4,r19,9da0 <__udivdi3+0x248>
    9d8c:	2489883a 	add	r4,r4,r18
    9d90:	80bfffc4 	addi	r2,r16,-1
    9d94:	24800136 	bltu	r4,r18,9d9c <__udivdi3+0x244>
    9d98:	24c0d936 	bltu	r4,r19,a100 <__udivdi3+0x5a8>
    9d9c:	1021883a 	mov	r16,r2
    9da0:	24e7c83a 	sub	r19,r4,r19
    9da4:	9809883a 	mov	r4,r19
    9da8:	a00b883a 	mov	r5,r20
    9dac:	d8c00015 	stw	r3,0(sp)
    9db0:	000a7cc0 	call	a7cc <__umodsi3>
    9db4:	102d883a 	mov	r22,r2
    9db8:	9809883a 	mov	r4,r19
    9dbc:	a00b883a 	mov	r5,r20
    9dc0:	000a7c40 	call	a7c4 <__udivsi3>
    9dc4:	b02c943a 	slli	r22,r22,16
    9dc8:	156b383a 	mul	r21,r2,r21
    9dcc:	8c7fffcc 	andi	r17,r17,65535
    9dd0:	b462b03a 	or	r17,r22,r17
    9dd4:	d8c00017 	ldw	r3,0(sp)
    9dd8:	8d40052e 	bgeu	r17,r21,9df0 <__udivdi3+0x298>
    9ddc:	8ca3883a 	add	r17,r17,r18
    9de0:	113fffc4 	addi	r4,r2,-1
    9de4:	8c809a36 	bltu	r17,r18,a050 <__udivdi3+0x4f8>
    9de8:	8d40992e 	bgeu	r17,r21,a050 <__udivdi3+0x4f8>
    9dec:	10bfff84 	addi	r2,r2,-2
    9df0:	8020943a 	slli	r16,r16,16
    9df4:	1404b03a 	or	r2,r2,r16
    9df8:	00000206 	br	9e04 <__udivdi3+0x2ac>
    9dfc:	0007883a 	mov	r3,zero
    9e00:	0005883a 	mov	r2,zero
    9e04:	dfc00a17 	ldw	ra,40(sp)
    9e08:	df000917 	ldw	fp,36(sp)
    9e0c:	ddc00817 	ldw	r23,32(sp)
    9e10:	dd800717 	ldw	r22,28(sp)
    9e14:	dd400617 	ldw	r21,24(sp)
    9e18:	dd000517 	ldw	r20,20(sp)
    9e1c:	dcc00417 	ldw	r19,16(sp)
    9e20:	dc800317 	ldw	r18,12(sp)
    9e24:	dc400217 	ldw	r17,8(sp)
    9e28:	dc000117 	ldw	r16,4(sp)
    9e2c:	dec00b04 	addi	sp,sp,44
    9e30:	f800283a 	ret
    9e34:	00803fc4 	movi	r2,255
    9e38:	11c0932e 	bgeu	r2,r7,a088 <__udivdi3+0x530>
    9e3c:	00c00204 	movi	r3,8
    9e40:	180b883a 	mov	r5,r3
    9e44:	003f9c06 	br	9cb8 <__alt_mem_Flash_flash_data+0xf4009cb8>
    9e48:	00804034 	movhi	r2,256
    9e4c:	10bfffc4 	addi	r2,r2,-1
    9e50:	1180902e 	bgeu	r2,r6,a094 <__udivdi3+0x53c>
    9e54:	00800604 	movi	r2,24
    9e58:	1007883a 	mov	r3,r2
    9e5c:	003f5606 	br	9bb8 <__alt_mem_Flash_flash_data+0xf4009bb8>
    9e60:	00803fc4 	movi	r2,255
    9e64:	1480912e 	bgeu	r2,r18,a0ac <__udivdi3+0x554>
    9e68:	00800204 	movi	r2,8
    9e6c:	1007883a 	mov	r3,r2
    9e70:	003faa06 	br	9d1c <__alt_mem_Flash_flash_data+0xf4009d1c>
    9e74:	30eed83a 	srl	r23,r6,r3
    9e78:	3c8e983a 	sll	r7,r7,r18
    9e7c:	80f8d83a 	srl	fp,r16,r3
    9e80:	98c6d83a 	srl	r3,r19,r3
    9e84:	3deeb03a 	or	r23,r7,r23
    9e88:	b828d43a 	srli	r20,r23,16
    9e8c:	84a0983a 	sll	r16,r16,r18
    9e90:	e009883a 	mov	r4,fp
    9e94:	a00b883a 	mov	r5,r20
    9e98:	80e2b03a 	or	r17,r16,r3
    9e9c:	34aa983a 	sll	r21,r6,r18
    9ea0:	000a7cc0 	call	a7cc <__umodsi3>
    9ea4:	e009883a 	mov	r4,fp
    9ea8:	a00b883a 	mov	r5,r20
    9eac:	102d883a 	mov	r22,r2
    9eb0:	000a7c40 	call	a7c4 <__udivsi3>
    9eb4:	1021883a 	mov	r16,r2
    9eb8:	bf3fffcc 	andi	fp,r23,65535
    9ebc:	b004943a 	slli	r2,r22,16
    9ec0:	8808d43a 	srli	r4,r17,16
    9ec4:	872d383a 	mul	r22,r16,fp
    9ec8:	1104b03a 	or	r2,r2,r4
    9ecc:	1580042e 	bgeu	r2,r22,9ee0 <__udivdi3+0x388>
    9ed0:	15c5883a 	add	r2,r2,r23
    9ed4:	80ffffc4 	addi	r3,r16,-1
    9ed8:	15c0812e 	bgeu	r2,r23,a0e0 <__udivdi3+0x588>
    9edc:	1821883a 	mov	r16,r3
    9ee0:	15adc83a 	sub	r22,r2,r22
    9ee4:	b009883a 	mov	r4,r22
    9ee8:	a00b883a 	mov	r5,r20
    9eec:	000a7cc0 	call	a7cc <__umodsi3>
    9ef0:	a00b883a 	mov	r5,r20
    9ef4:	b009883a 	mov	r4,r22
    9ef8:	d8800015 	stw	r2,0(sp)
    9efc:	000a7c40 	call	a7c4 <__udivsi3>
    9f00:	d8c00017 	ldw	r3,0(sp)
    9f04:	170b383a 	mul	r5,r2,fp
    9f08:	8c7fffcc 	andi	r17,r17,65535
    9f0c:	1806943a 	slli	r3,r3,16
    9f10:	1c46b03a 	or	r3,r3,r17
    9f14:	1940042e 	bgeu	r3,r5,9f28 <__udivdi3+0x3d0>
    9f18:	1dc7883a 	add	r3,r3,r23
    9f1c:	113fffc4 	addi	r4,r2,-1
    9f20:	1dc06b2e 	bgeu	r3,r23,a0d0 <__udivdi3+0x578>
    9f24:	2005883a 	mov	r2,r4
    9f28:	8020943a 	slli	r16,r16,16
    9f2c:	a9ffffcc 	andi	r7,r21,65535
    9f30:	a82ad43a 	srli	r21,r21,16
    9f34:	1404b03a 	or	r2,r2,r16
    9f38:	113fffcc 	andi	r4,r2,65535
    9f3c:	100cd43a 	srli	r6,r2,16
    9f40:	21d3383a 	mul	r9,r4,r7
    9f44:	2549383a 	mul	r4,r4,r21
    9f48:	31cf383a 	mul	r7,r6,r7
    9f4c:	4810d43a 	srli	r8,r9,16
    9f50:	1947c83a 	sub	r3,r3,r5
    9f54:	3909883a 	add	r4,r7,r4
    9f58:	2209883a 	add	r4,r4,r8
    9f5c:	354d383a 	mul	r6,r6,r21
    9f60:	21c0022e 	bgeu	r4,r7,9f6c <__udivdi3+0x414>
    9f64:	01400074 	movhi	r5,1
    9f68:	314d883a 	add	r6,r6,r5
    9f6c:	202ad43a 	srli	r21,r4,16
    9f70:	354d883a 	add	r6,r6,r21
    9f74:	19803f36 	bltu	r3,r6,a074 <__udivdi3+0x51c>
    9f78:	19803926 	beq	r3,r6,a060 <__udivdi3+0x508>
    9f7c:	0007883a 	mov	r3,zero
    9f80:	003fa006 	br	9e04 <__alt_mem_Flash_flash_data+0xf4009e04>
    9f84:	90e4983a 	sll	r18,r18,r3
    9f88:	80aad83a 	srl	r21,r16,r2
    9f8c:	80e0983a 	sll	r16,r16,r3
    9f90:	9028d43a 	srli	r20,r18,16
    9f94:	9884d83a 	srl	r2,r19,r2
    9f98:	a809883a 	mov	r4,r21
    9f9c:	a00b883a 	mov	r5,r20
    9fa0:	80acb03a 	or	r22,r16,r2
    9fa4:	98e2983a 	sll	r17,r19,r3
    9fa8:	000a7cc0 	call	a7cc <__umodsi3>
    9fac:	a809883a 	mov	r4,r21
    9fb0:	a00b883a 	mov	r5,r20
    9fb4:	1021883a 	mov	r16,r2
    9fb8:	000a7c40 	call	a7c4 <__udivsi3>
    9fbc:	957fffcc 	andi	r21,r18,65535
    9fc0:	8020943a 	slli	r16,r16,16
    9fc4:	b00ad43a 	srli	r5,r22,16
    9fc8:	1567383a 	mul	r19,r2,r21
    9fcc:	102f883a 	mov	r23,r2
    9fd0:	8148b03a 	or	r4,r16,r5
    9fd4:	24c0062e 	bgeu	r4,r19,9ff0 <__udivdi3+0x498>
    9fd8:	2489883a 	add	r4,r4,r18
    9fdc:	10bfffc4 	addi	r2,r2,-1
    9fe0:	24804536 	bltu	r4,r18,a0f8 <__udivdi3+0x5a0>
    9fe4:	24c0442e 	bgeu	r4,r19,a0f8 <__udivdi3+0x5a0>
    9fe8:	bdffff84 	addi	r23,r23,-2
    9fec:	2489883a 	add	r4,r4,r18
    9ff0:	24e7c83a 	sub	r19,r4,r19
    9ff4:	9809883a 	mov	r4,r19
    9ff8:	a00b883a 	mov	r5,r20
    9ffc:	000a7cc0 	call	a7cc <__umodsi3>
    a000:	1021883a 	mov	r16,r2
    a004:	9809883a 	mov	r4,r19
    a008:	a00b883a 	mov	r5,r20
    a00c:	000a7c40 	call	a7c4 <__udivsi3>
    a010:	8020943a 	slli	r16,r16,16
    a014:	1007883a 	mov	r3,r2
    a018:	1545383a 	mul	r2,r2,r21
    a01c:	b13fffcc 	andi	r4,r22,65535
    a020:	8108b03a 	or	r4,r16,r4
    a024:	2080062e 	bgeu	r4,r2,a040 <__udivdi3+0x4e8>
    a028:	2489883a 	add	r4,r4,r18
    a02c:	197fffc4 	addi	r5,r3,-1
    a030:	24802f36 	bltu	r4,r18,a0f0 <__udivdi3+0x598>
    a034:	20802e2e 	bgeu	r4,r2,a0f0 <__udivdi3+0x598>
    a038:	18ffff84 	addi	r3,r3,-2
    a03c:	2489883a 	add	r4,r4,r18
    a040:	b82e943a 	slli	r23,r23,16
    a044:	20a1c83a 	sub	r16,r4,r2
    a048:	1dc6b03a 	or	r3,r3,r23
    a04c:	003f4006 	br	9d50 <__alt_mem_Flash_flash_data+0xf4009d50>
    a050:	2005883a 	mov	r2,r4
    a054:	003f6606 	br	9df0 <__alt_mem_Flash_flash_data+0xf4009df0>
    a058:	1805883a 	mov	r2,r3
    a05c:	003f0a06 	br	9c88 <__alt_mem_Flash_flash_data+0xf4009c88>
    a060:	2006943a 	slli	r3,r4,16
    a064:	9c88983a 	sll	r4,r19,r18
    a068:	4a7fffcc 	andi	r9,r9,65535
    a06c:	1a47883a 	add	r3,r3,r9
    a070:	20ffc22e 	bgeu	r4,r3,9f7c <__alt_mem_Flash_flash_data+0xf4009f7c>
    a074:	10bfffc4 	addi	r2,r2,-1
    a078:	003fc006 	br	9f7c <__alt_mem_Flash_flash_data+0xf4009f7c>
    a07c:	00c00404 	movi	r3,16
    a080:	180b883a 	mov	r5,r3
    a084:	003f0c06 	br	9cb8 <__alt_mem_Flash_flash_data+0xf4009cb8>
    a088:	0007883a 	mov	r3,zero
    a08c:	000b883a 	mov	r5,zero
    a090:	003f0906 	br	9cb8 <__alt_mem_Flash_flash_data+0xf4009cb8>
    a094:	00800404 	movi	r2,16
    a098:	1007883a 	mov	r3,r2
    a09c:	003ec606 	br	9bb8 <__alt_mem_Flash_flash_data+0xf4009bb8>
    a0a0:	00800404 	movi	r2,16
    a0a4:	1007883a 	mov	r3,r2
    a0a8:	003f1c06 	br	9d1c <__alt_mem_Flash_flash_data+0xf4009d1c>
    a0ac:	0005883a 	mov	r2,zero
    a0b0:	0007883a 	mov	r3,zero
    a0b4:	003f1906 	br	9d1c <__alt_mem_Flash_flash_data+0xf4009d1c>
    a0b8:	0005883a 	mov	r2,zero
    a0bc:	0007883a 	mov	r3,zero
    a0c0:	003ebd06 	br	9bb8 <__alt_mem_Flash_flash_data+0xf4009bb8>
    a0c4:	0007883a 	mov	r3,zero
    a0c8:	00800044 	movi	r2,1
    a0cc:	003f4d06 	br	9e04 <__alt_mem_Flash_flash_data+0xf4009e04>
    a0d0:	197f942e 	bgeu	r3,r5,9f24 <__alt_mem_Flash_flash_data+0xf4009f24>
    a0d4:	10bfff84 	addi	r2,r2,-2
    a0d8:	1dc7883a 	add	r3,r3,r23
    a0dc:	003f9206 	br	9f28 <__alt_mem_Flash_flash_data+0xf4009f28>
    a0e0:	15bf7e2e 	bgeu	r2,r22,9edc <__alt_mem_Flash_flash_data+0xf4009edc>
    a0e4:	843fff84 	addi	r16,r16,-2
    a0e8:	15c5883a 	add	r2,r2,r23
    a0ec:	003f7c06 	br	9ee0 <__alt_mem_Flash_flash_data+0xf4009ee0>
    a0f0:	2807883a 	mov	r3,r5
    a0f4:	003fd206 	br	a040 <__alt_mem_Flash_flash_data+0xf400a040>
    a0f8:	102f883a 	mov	r23,r2
    a0fc:	003fbc06 	br	9ff0 <__alt_mem_Flash_flash_data+0xf4009ff0>
    a100:	843fff84 	addi	r16,r16,-2
    a104:	2489883a 	add	r4,r4,r18
    a108:	003f2506 	br	9da0 <__alt_mem_Flash_flash_data+0xf4009da0>
    a10c:	843fff84 	addi	r16,r16,-2
    a110:	1485883a 	add	r2,r2,r18
    a114:	003eca06 	br	9c40 <__alt_mem_Flash_flash_data+0xf4009c40>

0000a118 <__umoddi3>:
    a118:	defff404 	addi	sp,sp,-48
    a11c:	ddc00915 	stw	r23,36(sp)
    a120:	dc400315 	stw	r17,12(sp)
    a124:	dc000215 	stw	r16,8(sp)
    a128:	dfc00b15 	stw	ra,44(sp)
    a12c:	df000a15 	stw	fp,40(sp)
    a130:	dd800815 	stw	r22,32(sp)
    a134:	dd400715 	stw	r21,28(sp)
    a138:	dd000615 	stw	r20,24(sp)
    a13c:	dcc00515 	stw	r19,20(sp)
    a140:	dc800415 	stw	r18,16(sp)
    a144:	2021883a 	mov	r16,r4
    a148:	2823883a 	mov	r17,r5
    a14c:	282f883a 	mov	r23,r5
    a150:	3800381e 	bne	r7,zero,a234 <__umoddi3+0x11c>
    a154:	3027883a 	mov	r19,r6
    a158:	2029883a 	mov	r20,r4
    a15c:	29804e2e 	bgeu	r5,r6,a298 <__umoddi3+0x180>
    a160:	00bfffd4 	movui	r2,65535
    a164:	11809c36 	bltu	r2,r6,a3d8 <__umoddi3+0x2c0>
    a168:	00803fc4 	movi	r2,255
    a16c:	11813b2e 	bgeu	r2,r6,a65c <__umoddi3+0x544>
    a170:	01400204 	movi	r5,8
    a174:	2805883a 	mov	r2,r5
    a178:	314ad83a 	srl	r5,r6,r5
    a17c:	00c000b4 	movhi	r3,2
    a180:	18e73304 	addi	r3,r3,-25396
    a184:	194b883a 	add	r5,r3,r5
    a188:	29000003 	ldbu	r4,0(r5)
    a18c:	2089883a 	add	r4,r4,r2
    a190:	00800804 	movi	r2,32
    a194:	1105c83a 	sub	r2,r2,r4
    a198:	1000ec26 	beq	r2,zero,a54c <__umoddi3+0x434>
    a19c:	88a2983a 	sll	r17,r17,r2
    a1a0:	8108d83a 	srl	r4,r16,r4
    a1a4:	30a6983a 	sll	r19,r6,r2
    a1a8:	80a8983a 	sll	r20,r16,r2
    a1ac:	1025883a 	mov	r18,r2
    a1b0:	892eb03a 	or	r23,r17,r4
    a1b4:	982cd43a 	srli	r22,r19,16
    a1b8:	b809883a 	mov	r4,r23
    a1bc:	9d7fffcc 	andi	r21,r19,65535
    a1c0:	b00b883a 	mov	r5,r22
    a1c4:	000a7cc0 	call	a7cc <__umodsi3>
    a1c8:	b809883a 	mov	r4,r23
    a1cc:	b00b883a 	mov	r5,r22
    a1d0:	1021883a 	mov	r16,r2
    a1d4:	000a7c40 	call	a7c4 <__udivsi3>
    a1d8:	8020943a 	slli	r16,r16,16
    a1dc:	a00cd43a 	srli	r6,r20,16
    a1e0:	1545383a 	mul	r2,r2,r21
    a1e4:	8188b03a 	or	r4,r16,r6
    a1e8:	2080042e 	bgeu	r4,r2,a1fc <__umoddi3+0xe4>
    a1ec:	24c9883a 	add	r4,r4,r19
    a1f0:	24c00236 	bltu	r4,r19,a1fc <__umoddi3+0xe4>
    a1f4:	2080012e 	bgeu	r4,r2,a1fc <__umoddi3+0xe4>
    a1f8:	24c9883a 	add	r4,r4,r19
    a1fc:	20a3c83a 	sub	r17,r4,r2
    a200:	8809883a 	mov	r4,r17
    a204:	b00b883a 	mov	r5,r22
    a208:	000a7cc0 	call	a7cc <__umodsi3>
    a20c:	8809883a 	mov	r4,r17
    a210:	b00b883a 	mov	r5,r22
    a214:	1021883a 	mov	r16,r2
    a218:	000a7c40 	call	a7c4 <__udivsi3>
    a21c:	8006943a 	slli	r3,r16,16
    a220:	1545383a 	mul	r2,r2,r21
    a224:	a13fffcc 	andi	r4,r20,65535
    a228:	1906b03a 	or	r3,r3,r4
    a22c:	1880532e 	bgeu	r3,r2,a37c <__umoddi3+0x264>
    a230:	00004e06 	br	a36c <__umoddi3+0x254>
    a234:	29c05536 	bltu	r5,r7,a38c <__umoddi3+0x274>
    a238:	00bfffd4 	movui	r2,65535
    a23c:	11c0612e 	bgeu	r2,r7,a3c4 <__umoddi3+0x2ac>
    a240:	00804034 	movhi	r2,256
    a244:	10bfffc4 	addi	r2,r2,-1
    a248:	11c0f82e 	bgeu	r2,r7,a62c <__umoddi3+0x514>
    a24c:	01400604 	movi	r5,24
    a250:	282b883a 	mov	r21,r5
    a254:	394ad83a 	srl	r5,r7,r5
    a258:	00c000b4 	movhi	r3,2
    a25c:	18e73304 	addi	r3,r3,-25396
    a260:	194b883a 	add	r5,r3,r5
    a264:	28800003 	ldbu	r2,0(r5)
    a268:	00c00804 	movi	r3,32
    a26c:	156b883a 	add	r21,r2,r21
    a270:	1d69c83a 	sub	r20,r3,r21
    a274:	a000631e 	bne	r20,zero,a404 <__umoddi3+0x2ec>
    a278:	3c400136 	bltu	r7,r17,a280 <__umoddi3+0x168>
    a27c:	81810436 	bltu	r16,r6,a690 <__umoddi3+0x578>
    a280:	8185c83a 	sub	r2,r16,r6
    a284:	89e3c83a 	sub	r17,r17,r7
    a288:	8087803a 	cmpltu	r3,r16,r2
    a28c:	88efc83a 	sub	r23,r17,r3
    a290:	b807883a 	mov	r3,r23
    a294:	00003f06 	br	a394 <__umoddi3+0x27c>
    a298:	3000041e 	bne	r6,zero,a2ac <__umoddi3+0x194>
    a29c:	01000044 	movi	r4,1
    a2a0:	000b883a 	mov	r5,zero
    a2a4:	000a7c40 	call	a7c4 <__udivsi3>
    a2a8:	1027883a 	mov	r19,r2
    a2ac:	00bfffd4 	movui	r2,65535
    a2b0:	14c04f2e 	bgeu	r2,r19,a3f0 <__umoddi3+0x2d8>
    a2b4:	00804034 	movhi	r2,256
    a2b8:	10bfffc4 	addi	r2,r2,-1
    a2bc:	14c0e42e 	bgeu	r2,r19,a650 <__umoddi3+0x538>
    a2c0:	00800604 	movi	r2,24
    a2c4:	1007883a 	mov	r3,r2
    a2c8:	9884d83a 	srl	r2,r19,r2
    a2cc:	010000b4 	movhi	r4,2
    a2d0:	21273304 	addi	r4,r4,-25396
    a2d4:	2085883a 	add	r2,r4,r2
    a2d8:	11000003 	ldbu	r4,0(r2)
    a2dc:	00800804 	movi	r2,32
    a2e0:	20c7883a 	add	r3,r4,r3
    a2e4:	10c5c83a 	sub	r2,r2,r3
    a2e8:	10009a1e 	bne	r2,zero,a554 <__umoddi3+0x43c>
    a2ec:	982cd43a 	srli	r22,r19,16
    a2f0:	8ce3c83a 	sub	r17,r17,r19
    a2f4:	9c3fffcc 	andi	r16,r19,65535
    a2f8:	0025883a 	mov	r18,zero
    a2fc:	8809883a 	mov	r4,r17
    a300:	b00b883a 	mov	r5,r22
    a304:	000a7cc0 	call	a7cc <__umodsi3>
    a308:	8809883a 	mov	r4,r17
    a30c:	b00b883a 	mov	r5,r22
    a310:	102b883a 	mov	r21,r2
    a314:	000a7c40 	call	a7c4 <__udivsi3>
    a318:	a806943a 	slli	r3,r21,16
    a31c:	a008d43a 	srli	r4,r20,16
    a320:	1405383a 	mul	r2,r2,r16
    a324:	190cb03a 	or	r6,r3,r4
    a328:	3080032e 	bgeu	r6,r2,a338 <__umoddi3+0x220>
    a32c:	34cd883a 	add	r6,r6,r19
    a330:	34c00136 	bltu	r6,r19,a338 <__umoddi3+0x220>
    a334:	3080d436 	bltu	r6,r2,a688 <__umoddi3+0x570>
    a338:	30abc83a 	sub	r21,r6,r2
    a33c:	a809883a 	mov	r4,r21
    a340:	b00b883a 	mov	r5,r22
    a344:	000a7cc0 	call	a7cc <__umodsi3>
    a348:	1023883a 	mov	r17,r2
    a34c:	a809883a 	mov	r4,r21
    a350:	b00b883a 	mov	r5,r22
    a354:	000a7c40 	call	a7c4 <__udivsi3>
    a358:	8822943a 	slli	r17,r17,16
    a35c:	1405383a 	mul	r2,r2,r16
    a360:	a13fffcc 	andi	r4,r20,65535
    a364:	8906b03a 	or	r3,r17,r4
    a368:	1880042e 	bgeu	r3,r2,a37c <__umoddi3+0x264>
    a36c:	1cc7883a 	add	r3,r3,r19
    a370:	1cc00236 	bltu	r3,r19,a37c <__umoddi3+0x264>
    a374:	1880012e 	bgeu	r3,r2,a37c <__umoddi3+0x264>
    a378:	1cc7883a 	add	r3,r3,r19
    a37c:	1887c83a 	sub	r3,r3,r2
    a380:	1c84d83a 	srl	r2,r3,r18
    a384:	0007883a 	mov	r3,zero
    a388:	00000206 	br	a394 <__umoddi3+0x27c>
    a38c:	2005883a 	mov	r2,r4
    a390:	2807883a 	mov	r3,r5
    a394:	dfc00b17 	ldw	ra,44(sp)
    a398:	df000a17 	ldw	fp,40(sp)
    a39c:	ddc00917 	ldw	r23,36(sp)
    a3a0:	dd800817 	ldw	r22,32(sp)
    a3a4:	dd400717 	ldw	r21,28(sp)
    a3a8:	dd000617 	ldw	r20,24(sp)
    a3ac:	dcc00517 	ldw	r19,20(sp)
    a3b0:	dc800417 	ldw	r18,16(sp)
    a3b4:	dc400317 	ldw	r17,12(sp)
    a3b8:	dc000217 	ldw	r16,8(sp)
    a3bc:	dec00c04 	addi	sp,sp,48
    a3c0:	f800283a 	ret
    a3c4:	00803fc4 	movi	r2,255
    a3c8:	11c0952e 	bgeu	r2,r7,a620 <__umoddi3+0x508>
    a3cc:	01400204 	movi	r5,8
    a3d0:	282b883a 	mov	r21,r5
    a3d4:	003f9f06 	br	a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a3d8:	00804034 	movhi	r2,256
    a3dc:	10bfffc4 	addi	r2,r2,-1
    a3e0:	1180952e 	bgeu	r2,r6,a638 <__umoddi3+0x520>
    a3e4:	01400604 	movi	r5,24
    a3e8:	2805883a 	mov	r2,r5
    a3ec:	003f6206 	br	a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a3f0:	00803fc4 	movi	r2,255
    a3f4:	14c0932e 	bgeu	r2,r19,a644 <__umoddi3+0x52c>
    a3f8:	00800204 	movi	r2,8
    a3fc:	1007883a 	mov	r3,r2
    a400:	003fb106 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    a404:	3548d83a 	srl	r4,r6,r21
    a408:	3d0e983a 	sll	r7,r7,r20
    a40c:	8d10983a 	sll	r8,r17,r20
    a410:	8d6cd83a 	srl	r22,r17,r21
    a414:	3922b03a 	or	r17,r7,r4
    a418:	882ed43a 	srli	r23,r17,16
    a41c:	8564d83a 	srl	r18,r16,r21
    a420:	b009883a 	mov	r4,r22
    a424:	b80b883a 	mov	r5,r23
    a428:	44a4b03a 	or	r18,r8,r18
    a42c:	3526983a 	sll	r19,r6,r20
    a430:	000a7cc0 	call	a7cc <__umodsi3>
    a434:	b009883a 	mov	r4,r22
    a438:	b80b883a 	mov	r5,r23
    a43c:	1039883a 	mov	fp,r2
    a440:	000a7c40 	call	a7c4 <__udivsi3>
    a444:	102d883a 	mov	r22,r2
    a448:	8a3fffcc 	andi	r8,r17,65535
    a44c:	e004943a 	slli	r2,fp,16
    a450:	900cd43a 	srli	r6,r18,16
    a454:	b239383a 	mul	fp,r22,r8
    a458:	8520983a 	sll	r16,r16,r20
    a45c:	118ab03a 	or	r5,r2,r6
    a460:	2f00042e 	bgeu	r5,fp,a474 <__umoddi3+0x35c>
    a464:	2c4b883a 	add	r5,r5,r17
    a468:	b0bfffc4 	addi	r2,r22,-1
    a46c:	2c40822e 	bgeu	r5,r17,a678 <__umoddi3+0x560>
    a470:	102d883a 	mov	r22,r2
    a474:	2f39c83a 	sub	fp,r5,fp
    a478:	e009883a 	mov	r4,fp
    a47c:	b80b883a 	mov	r5,r23
    a480:	da000115 	stw	r8,4(sp)
    a484:	000a7cc0 	call	a7cc <__umodsi3>
    a488:	e009883a 	mov	r4,fp
    a48c:	b80b883a 	mov	r5,r23
    a490:	d8800015 	stw	r2,0(sp)
    a494:	000a7c40 	call	a7c4 <__udivsi3>
    a498:	d9800017 	ldw	r6,0(sp)
    a49c:	da000117 	ldw	r8,4(sp)
    a4a0:	94bfffcc 	andi	r18,r18,65535
    a4a4:	300c943a 	slli	r6,r6,16
    a4a8:	1209383a 	mul	r4,r2,r8
    a4ac:	3490b03a 	or	r8,r6,r18
    a4b0:	4100042e 	bgeu	r8,r4,a4c4 <__umoddi3+0x3ac>
    a4b4:	4451883a 	add	r8,r8,r17
    a4b8:	10ffffc4 	addi	r3,r2,-1
    a4bc:	44406a2e 	bgeu	r8,r17,a668 <__umoddi3+0x550>
    a4c0:	1805883a 	mov	r2,r3
    a4c4:	b012943a 	slli	r9,r22,16
    a4c8:	9abfffcc 	andi	r10,r19,65535
    a4cc:	980ed43a 	srli	r7,r19,16
    a4d0:	124ab03a 	or	r5,r2,r9
    a4d4:	2a7fffcc 	andi	r9,r5,65535
    a4d8:	280ad43a 	srli	r5,r5,16
    a4dc:	4a8d383a 	mul	r6,r9,r10
    a4e0:	49d3383a 	mul	r9,r9,r7
    a4e4:	2a95383a 	mul	r10,r5,r10
    a4e8:	3004d43a 	srli	r2,r6,16
    a4ec:	4111c83a 	sub	r8,r8,r4
    a4f0:	5253883a 	add	r9,r10,r9
    a4f4:	4893883a 	add	r9,r9,r2
    a4f8:	29cb383a 	mul	r5,r5,r7
    a4fc:	4a80022e 	bgeu	r9,r10,a508 <__umoddi3+0x3f0>
    a500:	00800074 	movhi	r2,1
    a504:	288b883a 	add	r5,r5,r2
    a508:	4808d43a 	srli	r4,r9,16
    a50c:	4812943a 	slli	r9,r9,16
    a510:	31bfffcc 	andi	r6,r6,65535
    a514:	290b883a 	add	r5,r5,r4
    a518:	498d883a 	add	r6,r9,r6
    a51c:	41403a36 	bltu	r8,r5,a608 <__umoddi3+0x4f0>
    a520:	41405d26 	beq	r8,r5,a698 <__umoddi3+0x580>
    a524:	4149c83a 	sub	r4,r8,r5
    a528:	300f883a 	mov	r7,r6
    a52c:	81cfc83a 	sub	r7,r16,r7
    a530:	81c7803a 	cmpltu	r3,r16,r7
    a534:	20c7c83a 	sub	r3,r4,r3
    a538:	1d44983a 	sll	r2,r3,r21
    a53c:	3d0ed83a 	srl	r7,r7,r20
    a540:	1d06d83a 	srl	r3,r3,r20
    a544:	11c4b03a 	or	r2,r2,r7
    a548:	003f9206 	br	a394 <__alt_mem_Flash_flash_data+0xf400a394>
    a54c:	0025883a 	mov	r18,zero
    a550:	003f1806 	br	a1b4 <__alt_mem_Flash_flash_data+0xf400a1b4>
    a554:	98a6983a 	sll	r19,r19,r2
    a558:	88e8d83a 	srl	r20,r17,r3
    a55c:	80c6d83a 	srl	r3,r16,r3
    a560:	982cd43a 	srli	r22,r19,16
    a564:	88a2983a 	sll	r17,r17,r2
    a568:	a009883a 	mov	r4,r20
    a56c:	b00b883a 	mov	r5,r22
    a570:	88eab03a 	or	r21,r17,r3
    a574:	1025883a 	mov	r18,r2
    a578:	000a7cc0 	call	a7cc <__umodsi3>
    a57c:	a009883a 	mov	r4,r20
    a580:	b00b883a 	mov	r5,r22
    a584:	1023883a 	mov	r17,r2
    a588:	000a7c40 	call	a7c4 <__udivsi3>
    a58c:	9f3fffcc 	andi	fp,r19,65535
    a590:	8822943a 	slli	r17,r17,16
    a594:	a80ad43a 	srli	r5,r21,16
    a598:	1705383a 	mul	r2,r2,fp
    a59c:	84a8983a 	sll	r20,r16,r18
    a5a0:	8948b03a 	or	r4,r17,r5
    a5a4:	2080042e 	bgeu	r4,r2,a5b8 <__umoddi3+0x4a0>
    a5a8:	24c9883a 	add	r4,r4,r19
    a5ac:	24c00236 	bltu	r4,r19,a5b8 <__umoddi3+0x4a0>
    a5b0:	2080012e 	bgeu	r4,r2,a5b8 <__umoddi3+0x4a0>
    a5b4:	24c9883a 	add	r4,r4,r19
    a5b8:	20afc83a 	sub	r23,r4,r2
    a5bc:	b809883a 	mov	r4,r23
    a5c0:	b00b883a 	mov	r5,r22
    a5c4:	000a7cc0 	call	a7cc <__umodsi3>
    a5c8:	1023883a 	mov	r17,r2
    a5cc:	b809883a 	mov	r4,r23
    a5d0:	b00b883a 	mov	r5,r22
    a5d4:	000a7c40 	call	a7c4 <__udivsi3>
    a5d8:	8822943a 	slli	r17,r17,16
    a5dc:	1705383a 	mul	r2,r2,fp
    a5e0:	a93fffcc 	andi	r4,r21,65535
    a5e4:	8908b03a 	or	r4,r17,r4
    a5e8:	2080042e 	bgeu	r4,r2,a5fc <__umoddi3+0x4e4>
    a5ec:	24c9883a 	add	r4,r4,r19
    a5f0:	24c00236 	bltu	r4,r19,a5fc <__umoddi3+0x4e4>
    a5f4:	2080012e 	bgeu	r4,r2,a5fc <__umoddi3+0x4e4>
    a5f8:	24c9883a 	add	r4,r4,r19
    a5fc:	20a3c83a 	sub	r17,r4,r2
    a600:	e021883a 	mov	r16,fp
    a604:	003f3d06 	br	a2fc <__alt_mem_Flash_flash_data+0xf400a2fc>
    a608:	34cfc83a 	sub	r7,r6,r19
    a60c:	2c4bc83a 	sub	r5,r5,r17
    a610:	31cd803a 	cmpltu	r6,r6,r7
    a614:	298dc83a 	sub	r6,r5,r6
    a618:	4189c83a 	sub	r4,r8,r6
    a61c:	003fc306 	br	a52c <__alt_mem_Flash_flash_data+0xf400a52c>
    a620:	000b883a 	mov	r5,zero
    a624:	002b883a 	mov	r21,zero
    a628:	003f0a06 	br	a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a62c:	01400404 	movi	r5,16
    a630:	282b883a 	mov	r21,r5
    a634:	003f0706 	br	a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a638:	01400404 	movi	r5,16
    a63c:	2805883a 	mov	r2,r5
    a640:	003ecd06 	br	a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a644:	0005883a 	mov	r2,zero
    a648:	0007883a 	mov	r3,zero
    a64c:	003f1e06 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    a650:	00800404 	movi	r2,16
    a654:	1007883a 	mov	r3,r2
    a658:	003f1b06 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    a65c:	000b883a 	mov	r5,zero
    a660:	0005883a 	mov	r2,zero
    a664:	003ec406 	br	a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a668:	413f952e 	bgeu	r8,r4,a4c0 <__alt_mem_Flash_flash_data+0xf400a4c0>
    a66c:	10bfff84 	addi	r2,r2,-2
    a670:	4451883a 	add	r8,r8,r17
    a674:	003f9306 	br	a4c4 <__alt_mem_Flash_flash_data+0xf400a4c4>
    a678:	2f3f7d2e 	bgeu	r5,fp,a470 <__alt_mem_Flash_flash_data+0xf400a470>
    a67c:	b5bfff84 	addi	r22,r22,-2
    a680:	2c4b883a 	add	r5,r5,r17
    a684:	003f7b06 	br	a474 <__alt_mem_Flash_flash_data+0xf400a474>
    a688:	34cd883a 	add	r6,r6,r19
    a68c:	003f2a06 	br	a338 <__alt_mem_Flash_flash_data+0xf400a338>
    a690:	8005883a 	mov	r2,r16
    a694:	003efe06 	br	a290 <__alt_mem_Flash_flash_data+0xf400a290>
    a698:	81bfdb36 	bltu	r16,r6,a608 <__alt_mem_Flash_flash_data+0xf400a608>
    a69c:	300f883a 	mov	r7,r6
    a6a0:	0009883a 	mov	r4,zero
    a6a4:	003fa106 	br	a52c <__alt_mem_Flash_flash_data+0xf400a52c>

0000a6a8 <udivmodsi4>:
    a6a8:	2900182e 	bgeu	r5,r4,a70c <udivmodsi4+0x64>
    a6ac:	28001716 	blt	r5,zero,a70c <udivmodsi4+0x64>
    a6b0:	00800804 	movi	r2,32
    a6b4:	00c00044 	movi	r3,1
    a6b8:	00000206 	br	a6c4 <udivmodsi4+0x1c>
    a6bc:	10001126 	beq	r2,zero,a704 <udivmodsi4+0x5c>
    a6c0:	28000516 	blt	r5,zero,a6d8 <udivmodsi4+0x30>
    a6c4:	294b883a 	add	r5,r5,r5
    a6c8:	10bfffc4 	addi	r2,r2,-1
    a6cc:	18c7883a 	add	r3,r3,r3
    a6d0:	293ffa36 	bltu	r5,r4,a6bc <__alt_mem_Flash_flash_data+0xf400a6bc>
    a6d4:	18000b26 	beq	r3,zero,a704 <udivmodsi4+0x5c>
    a6d8:	0005883a 	mov	r2,zero
    a6dc:	21400236 	bltu	r4,r5,a6e8 <udivmodsi4+0x40>
    a6e0:	2149c83a 	sub	r4,r4,r5
    a6e4:	10c4b03a 	or	r2,r2,r3
    a6e8:	1806d07a 	srli	r3,r3,1
    a6ec:	280ad07a 	srli	r5,r5,1
    a6f0:	183ffa1e 	bne	r3,zero,a6dc <__alt_mem_Flash_flash_data+0xf400a6dc>
    a6f4:	3000011e 	bne	r6,zero,a6fc <udivmodsi4+0x54>
    a6f8:	f800283a 	ret
    a6fc:	2005883a 	mov	r2,r4
    a700:	f800283a 	ret
    a704:	0005883a 	mov	r2,zero
    a708:	003ffa06 	br	a6f4 <__alt_mem_Flash_flash_data+0xf400a6f4>
    a70c:	00c00044 	movi	r3,1
    a710:	003ff106 	br	a6d8 <__alt_mem_Flash_flash_data+0xf400a6d8>

0000a714 <__divsi3>:
    a714:	defffe04 	addi	sp,sp,-8
    a718:	dfc00115 	stw	ra,4(sp)
    a71c:	dc000015 	stw	r16,0(sp)
    a720:	20000b16 	blt	r4,zero,a750 <__divsi3+0x3c>
    a724:	0021883a 	mov	r16,zero
    a728:	28000c16 	blt	r5,zero,a75c <__divsi3+0x48>
    a72c:	000d883a 	mov	r6,zero
    a730:	000a6a80 	call	a6a8 <udivmodsi4>
    a734:	0407c83a 	sub	r3,zero,r16
    a738:	1884f03a 	xor	r2,r3,r2
    a73c:	1405883a 	add	r2,r2,r16
    a740:	dfc00117 	ldw	ra,4(sp)
    a744:	dc000017 	ldw	r16,0(sp)
    a748:	dec00204 	addi	sp,sp,8
    a74c:	f800283a 	ret
    a750:	0109c83a 	sub	r4,zero,r4
    a754:	04000044 	movi	r16,1
    a758:	283ff40e 	bge	r5,zero,a72c <__alt_mem_Flash_flash_data+0xf400a72c>
    a75c:	014bc83a 	sub	r5,zero,r5
    a760:	8400005c 	xori	r16,r16,1
    a764:	003ff106 	br	a72c <__alt_mem_Flash_flash_data+0xf400a72c>

0000a768 <__modsi3>:
    a768:	defffd04 	addi	sp,sp,-12
    a76c:	dfc00215 	stw	ra,8(sp)
    a770:	dc400115 	stw	r17,4(sp)
    a774:	dc000015 	stw	r16,0(sp)
    a778:	20000c16 	blt	r4,zero,a7ac <__modsi3+0x44>
    a77c:	0023883a 	mov	r17,zero
    a780:	0021883a 	mov	r16,zero
    a784:	28000d16 	blt	r5,zero,a7bc <__modsi3+0x54>
    a788:	01800044 	movi	r6,1
    a78c:	000a6a80 	call	a6a8 <udivmodsi4>
    a790:	1404f03a 	xor	r2,r2,r16
    a794:	8885883a 	add	r2,r17,r2
    a798:	dfc00217 	ldw	ra,8(sp)
    a79c:	dc400117 	ldw	r17,4(sp)
    a7a0:	dc000017 	ldw	r16,0(sp)
    a7a4:	dec00304 	addi	sp,sp,12
    a7a8:	f800283a 	ret
    a7ac:	0109c83a 	sub	r4,zero,r4
    a7b0:	04400044 	movi	r17,1
    a7b4:	043fffc4 	movi	r16,-1
    a7b8:	283ff30e 	bge	r5,zero,a788 <__alt_mem_Flash_flash_data+0xf400a788>
    a7bc:	014bc83a 	sub	r5,zero,r5
    a7c0:	003ff106 	br	a788 <__alt_mem_Flash_flash_data+0xf400a788>

0000a7c4 <__udivsi3>:
    a7c4:	000d883a 	mov	r6,zero
    a7c8:	000a6a81 	jmpi	a6a8 <udivmodsi4>

0000a7cc <__umodsi3>:
    a7cc:	01800044 	movi	r6,1
    a7d0:	000a6a81 	jmpi	a6a8 <udivmodsi4>

0000a7d4 <__adddf3>:
    a7d4:	02000434 	movhi	r8,16
    a7d8:	423fffc4 	addi	r8,r8,-1
    a7dc:	defffb04 	addi	sp,sp,-20
    a7e0:	2a12703a 	and	r9,r5,r8
    a7e4:	2806d7fa 	srli	r3,r5,31
    a7e8:	3a10703a 	and	r8,r7,r8
    a7ec:	3804d53a 	srli	r2,r7,20
    a7f0:	3014d77a 	srli	r10,r6,29
    a7f4:	dc000015 	stw	r16,0(sp)
    a7f8:	481290fa 	slli	r9,r9,3
    a7fc:	2820d53a 	srli	r16,r5,20
    a800:	401090fa 	slli	r8,r8,3
    a804:	200ad77a 	srli	r5,r4,29
    a808:	380ed7fa 	srli	r7,r7,31
    a80c:	dc800215 	stw	r18,8(sp)
    a810:	dc400115 	stw	r17,4(sp)
    a814:	dfc00415 	stw	ra,16(sp)
    a818:	dcc00315 	stw	r19,12(sp)
    a81c:	1c803fcc 	andi	r18,r3,255
    a820:	8401ffcc 	andi	r16,r16,2047
    a824:	494ab03a 	or	r5,r9,r5
    a828:	202290fa 	slli	r17,r4,3
    a82c:	1081ffcc 	andi	r2,r2,2047
    a830:	4290b03a 	or	r8,r8,r10
    a834:	300c90fa 	slli	r6,r6,3
    a838:	91c07026 	beq	r18,r7,a9fc <__adddf3+0x228>
    a83c:	8087c83a 	sub	r3,r16,r2
    a840:	00c0b30e 	bge	zero,r3,ab10 <__adddf3+0x33c>
    a844:	10002a1e 	bne	r2,zero,a8f0 <__adddf3+0x11c>
    a848:	4184b03a 	or	r2,r8,r6
    a84c:	1000991e 	bne	r2,zero,aab4 <__adddf3+0x2e0>
    a850:	888001cc 	andi	r2,r17,7
    a854:	10005b26 	beq	r2,zero,a9c4 <__adddf3+0x1f0>
    a858:	88c003cc 	andi	r3,r17,15
    a85c:	00800104 	movi	r2,4
    a860:	18805826 	beq	r3,r2,a9c4 <__adddf3+0x1f0>
    a864:	89800104 	addi	r6,r17,4
    a868:	3463803a 	cmpltu	r17,r6,r17
    a86c:	2c4b883a 	add	r5,r5,r17
    a870:	2880202c 	andhi	r2,r5,128
    a874:	9007883a 	mov	r3,r18
    a878:	3023883a 	mov	r17,r6
    a87c:	10005426 	beq	r2,zero,a9d0 <__adddf3+0x1fc>
    a880:	84000044 	addi	r16,r16,1
    a884:	0081ffc4 	movi	r2,2047
    a888:	8080c126 	beq	r16,r2,ab90 <__adddf3+0x3bc>
    a88c:	013fe034 	movhi	r4,65408
    a890:	213fffc4 	addi	r4,r4,-1
    a894:	290a703a 	and	r5,r5,r4
    a898:	2804977a 	slli	r2,r5,29
    a89c:	280a927a 	slli	r5,r5,9
    a8a0:	8822d0fa 	srli	r17,r17,3
    a8a4:	8401ffcc 	andi	r16,r16,2047
    a8a8:	2808d33a 	srli	r4,r5,12
    a8ac:	1444b03a 	or	r2,r2,r17
    a8b0:	8401ffcc 	andi	r16,r16,2047
    a8b4:	800a953a 	slli	r5,r16,20
    a8b8:	18c03fcc 	andi	r3,r3,255
    a8bc:	04000434 	movhi	r16,16
    a8c0:	180697fa 	slli	r3,r3,31
    a8c4:	843fffc4 	addi	r16,r16,-1
    a8c8:	2420703a 	and	r16,r4,r16
    a8cc:	8160b03a 	or	r16,r16,r5
    a8d0:	80c6b03a 	or	r3,r16,r3
    a8d4:	dfc00417 	ldw	ra,16(sp)
    a8d8:	dcc00317 	ldw	r19,12(sp)
    a8dc:	dc800217 	ldw	r18,8(sp)
    a8e0:	dc400117 	ldw	r17,4(sp)
    a8e4:	dc000017 	ldw	r16,0(sp)
    a8e8:	dec00504 	addi	sp,sp,20
    a8ec:	f800283a 	ret
    a8f0:	0081ffc4 	movi	r2,2047
    a8f4:	80bfd626 	beq	r16,r2,a850 <__alt_mem_Flash_flash_data+0xf400a850>
    a8f8:	42002034 	orhi	r8,r8,128
    a8fc:	00800e04 	movi	r2,56
    a900:	10c0a616 	blt	r2,r3,ab9c <__adddf3+0x3c8>
    a904:	008007c4 	movi	r2,31
    a908:	10c0c916 	blt	r2,r3,ac30 <__adddf3+0x45c>
    a90c:	00800804 	movi	r2,32
    a910:	10c5c83a 	sub	r2,r2,r3
    a914:	408e983a 	sll	r7,r8,r2
    a918:	30c8d83a 	srl	r4,r6,r3
    a91c:	3084983a 	sll	r2,r6,r2
    a920:	40c6d83a 	srl	r3,r8,r3
    a924:	390cb03a 	or	r6,r7,r4
    a928:	1004c03a 	cmpne	r2,r2,zero
    a92c:	308cb03a 	or	r6,r6,r2
    a930:	898dc83a 	sub	r6,r17,r6
    a934:	89a3803a 	cmpltu	r17,r17,r6
    a938:	28cbc83a 	sub	r5,r5,r3
    a93c:	2c4bc83a 	sub	r5,r5,r17
    a940:	3023883a 	mov	r17,r6
    a944:	2880202c 	andhi	r2,r5,128
    a948:	10006d26 	beq	r2,zero,ab00 <__adddf3+0x32c>
    a94c:	04c02034 	movhi	r19,128
    a950:	9cffffc4 	addi	r19,r19,-1
    a954:	2ce6703a 	and	r19,r5,r19
    a958:	98007e26 	beq	r19,zero,ab54 <__adddf3+0x380>
    a95c:	9809883a 	mov	r4,r19
    a960:	000cd700 	call	cd70 <__clzsi2>
    a964:	10fffe04 	addi	r3,r2,-8
    a968:	010007c4 	movi	r4,31
    a96c:	20c07f16 	blt	r4,r3,ab6c <__adddf3+0x398>
    a970:	01400a04 	movi	r5,40
    a974:	2885c83a 	sub	r2,r5,r2
    a978:	888ad83a 	srl	r5,r17,r2
    a97c:	98e6983a 	sll	r19,r19,r3
    a980:	88e2983a 	sll	r17,r17,r3
    a984:	2ce6b03a 	or	r19,r5,r19
    a988:	1c007c16 	blt	r3,r16,ab7c <__adddf3+0x3a8>
    a98c:	1c21c83a 	sub	r16,r3,r16
    a990:	81400044 	addi	r5,r16,1
    a994:	00c007c4 	movi	r3,31
    a998:	19409816 	blt	r3,r5,abfc <__adddf3+0x428>
    a99c:	1c21c83a 	sub	r16,r3,r16
    a9a0:	8c08983a 	sll	r4,r17,r16
    a9a4:	8946d83a 	srl	r3,r17,r5
    a9a8:	9c20983a 	sll	r16,r19,r16
    a9ac:	2008c03a 	cmpne	r4,r4,zero
    a9b0:	994ad83a 	srl	r5,r19,r5
    a9b4:	1c06b03a 	or	r3,r3,r16
    a9b8:	1922b03a 	or	r17,r3,r4
    a9bc:	0021883a 	mov	r16,zero
    a9c0:	003fa306 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    a9c4:	2880202c 	andhi	r2,r5,128
    a9c8:	9007883a 	mov	r3,r18
    a9cc:	103fac1e 	bne	r2,zero,a880 <__alt_mem_Flash_flash_data+0xf400a880>
    a9d0:	2804977a 	slli	r2,r5,29
    a9d4:	8822d0fa 	srli	r17,r17,3
    a9d8:	0101ffc4 	movi	r4,2047
    a9dc:	280ad0fa 	srli	r5,r5,3
    a9e0:	1444b03a 	or	r2,r2,r17
    a9e4:	81002c26 	beq	r16,r4,aa98 <__adddf3+0x2c4>
    a9e8:	8120703a 	and	r16,r16,r4
    a9ec:	01000434 	movhi	r4,16
    a9f0:	213fffc4 	addi	r4,r4,-1
    a9f4:	2908703a 	and	r4,r5,r4
    a9f8:	003fad06 	br	a8b0 <__alt_mem_Flash_flash_data+0xf400a8b0>
    a9fc:	8089c83a 	sub	r4,r16,r2
    aa00:	01006a0e 	bge	zero,r4,abac <__adddf3+0x3d8>
    aa04:	10003326 	beq	r2,zero,aad4 <__adddf3+0x300>
    aa08:	0081ffc4 	movi	r2,2047
    aa0c:	80bf9026 	beq	r16,r2,a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aa10:	42002034 	orhi	r8,r8,128
    aa14:	00800e04 	movi	r2,56
    aa18:	1100b116 	blt	r2,r4,ace0 <__adddf3+0x50c>
    aa1c:	008007c4 	movi	r2,31
    aa20:	1100e216 	blt	r2,r4,adac <__adddf3+0x5d8>
    aa24:	00800804 	movi	r2,32
    aa28:	1105c83a 	sub	r2,r2,r4
    aa2c:	4092983a 	sll	r9,r8,r2
    aa30:	310ed83a 	srl	r7,r6,r4
    aa34:	3084983a 	sll	r2,r6,r2
    aa38:	4110d83a 	srl	r8,r8,r4
    aa3c:	49ccb03a 	or	r6,r9,r7
    aa40:	1004c03a 	cmpne	r2,r2,zero
    aa44:	308cb03a 	or	r6,r6,r2
    aa48:	344d883a 	add	r6,r6,r17
    aa4c:	3463803a 	cmpltu	r17,r6,r17
    aa50:	414b883a 	add	r5,r8,r5
    aa54:	2c4b883a 	add	r5,r5,r17
    aa58:	3023883a 	mov	r17,r6
    aa5c:	2880202c 	andhi	r2,r5,128
    aa60:	10002726 	beq	r2,zero,ab00 <__adddf3+0x32c>
    aa64:	84000044 	addi	r16,r16,1
    aa68:	0081ffc4 	movi	r2,2047
    aa6c:	8080ae26 	beq	r16,r2,ad28 <__adddf3+0x554>
    aa70:	00bfe034 	movhi	r2,65408
    aa74:	10bfffc4 	addi	r2,r2,-1
    aa78:	288a703a 	and	r5,r5,r2
    aa7c:	880cd07a 	srli	r6,r17,1
    aa80:	280897fa 	slli	r4,r5,31
    aa84:	88c0004c 	andi	r3,r17,1
    aa88:	30e2b03a 	or	r17,r6,r3
    aa8c:	280ad07a 	srli	r5,r5,1
    aa90:	8922b03a 	or	r17,r17,r4
    aa94:	003f6e06 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aa98:	1148b03a 	or	r4,r2,r5
    aa9c:	20003c26 	beq	r4,zero,ab90 <__adddf3+0x3bc>
    aaa0:	29000234 	orhi	r4,r5,8
    aaa4:	01400434 	movhi	r5,16
    aaa8:	297fffc4 	addi	r5,r5,-1
    aaac:	2148703a 	and	r4,r4,r5
    aab0:	003f7f06 	br	a8b0 <__alt_mem_Flash_flash_data+0xf400a8b0>
    aab4:	18ffffc4 	addi	r3,r3,-1
    aab8:	18004d1e 	bne	r3,zero,abf0 <__adddf3+0x41c>
    aabc:	898dc83a 	sub	r6,r17,r6
    aac0:	89a3803a 	cmpltu	r17,r17,r6
    aac4:	2a0bc83a 	sub	r5,r5,r8
    aac8:	2c4bc83a 	sub	r5,r5,r17
    aacc:	3023883a 	mov	r17,r6
    aad0:	003f9c06 	br	a944 <__alt_mem_Flash_flash_data+0xf400a944>
    aad4:	4184b03a 	or	r2,r8,r6
    aad8:	103f5d26 	beq	r2,zero,a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aadc:	213fffc4 	addi	r4,r4,-1
    aae0:	203fd926 	beq	r4,zero,aa48 <__alt_mem_Flash_flash_data+0xf400aa48>
    aae4:	0081ffc4 	movi	r2,2047
    aae8:	80bfca1e 	bne	r16,r2,aa14 <__alt_mem_Flash_flash_data+0xf400aa14>
    aaec:	003f5806 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aaf0:	10c8b03a 	or	r4,r2,r3
    aaf4:	20008b26 	beq	r4,zero,ad24 <__adddf3+0x550>
    aaf8:	100b883a 	mov	r5,r2
    aafc:	1823883a 	mov	r17,r3
    ab00:	888001cc 	andi	r2,r17,7
    ab04:	103f541e 	bne	r2,zero,a858 <__alt_mem_Flash_flash_data+0xf400a858>
    ab08:	9007883a 	mov	r3,r18
    ab0c:	003fb006 	br	a9d0 <__alt_mem_Flash_flash_data+0xf400a9d0>
    ab10:	1800531e 	bne	r3,zero,ac60 <__adddf3+0x48c>
    ab14:	80800044 	addi	r2,r16,1
    ab18:	1081ffcc 	andi	r2,r2,2047
    ab1c:	00c00044 	movi	r3,1
    ab20:	1880990e 	bge	r3,r2,ad88 <__adddf3+0x5b4>
    ab24:	8985c83a 	sub	r2,r17,r6
    ab28:	8887803a 	cmpltu	r3,r17,r2
    ab2c:	2a27c83a 	sub	r19,r5,r8
    ab30:	98e7c83a 	sub	r19,r19,r3
    ab34:	98c0202c 	andhi	r3,r19,128
    ab38:	18006226 	beq	r3,zero,acc4 <__adddf3+0x4f0>
    ab3c:	3463c83a 	sub	r17,r6,r17
    ab40:	4151c83a 	sub	r8,r8,r5
    ab44:	344d803a 	cmpltu	r6,r6,r17
    ab48:	41a7c83a 	sub	r19,r8,r6
    ab4c:	3825883a 	mov	r18,r7
    ab50:	983f821e 	bne	r19,zero,a95c <__alt_mem_Flash_flash_data+0xf400a95c>
    ab54:	8809883a 	mov	r4,r17
    ab58:	000cd700 	call	cd70 <__clzsi2>
    ab5c:	10800804 	addi	r2,r2,32
    ab60:	10fffe04 	addi	r3,r2,-8
    ab64:	010007c4 	movi	r4,31
    ab68:	20ff810e 	bge	r4,r3,a970 <__alt_mem_Flash_flash_data+0xf400a970>
    ab6c:	14fff604 	addi	r19,r2,-40
    ab70:	8ce6983a 	sll	r19,r17,r19
    ab74:	0023883a 	mov	r17,zero
    ab78:	1c3f840e 	bge	r3,r16,a98c <__alt_mem_Flash_flash_data+0xf400a98c>
    ab7c:	017fe034 	movhi	r5,65408
    ab80:	297fffc4 	addi	r5,r5,-1
    ab84:	80e1c83a 	sub	r16,r16,r3
    ab88:	994a703a 	and	r5,r19,r5
    ab8c:	003f3006 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    ab90:	0009883a 	mov	r4,zero
    ab94:	0005883a 	mov	r2,zero
    ab98:	003f4506 	br	a8b0 <__alt_mem_Flash_flash_data+0xf400a8b0>
    ab9c:	418cb03a 	or	r6,r8,r6
    aba0:	300cc03a 	cmpne	r6,r6,zero
    aba4:	0007883a 	mov	r3,zero
    aba8:	003f6106 	br	a930 <__alt_mem_Flash_flash_data+0xf400a930>
    abac:	2000921e 	bne	r4,zero,adf8 <__adddf3+0x624>
    abb0:	80800044 	addi	r2,r16,1
    abb4:	11c1ffcc 	andi	r7,r2,2047
    abb8:	01000044 	movi	r4,1
    abbc:	21c0610e 	bge	r4,r7,ad44 <__adddf3+0x570>
    abc0:	0101ffc4 	movi	r4,2047
    abc4:	1100a326 	beq	r2,r4,ae54 <__adddf3+0x680>
    abc8:	344d883a 	add	r6,r6,r17
    abcc:	3463803a 	cmpltu	r17,r6,r17
    abd0:	414b883a 	add	r5,r8,r5
    abd4:	2c4b883a 	add	r5,r5,r17
    abd8:	282297fa 	slli	r17,r5,31
    abdc:	300cd07a 	srli	r6,r6,1
    abe0:	280ad07a 	srli	r5,r5,1
    abe4:	1021883a 	mov	r16,r2
    abe8:	89a2b03a 	or	r17,r17,r6
    abec:	003f1806 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    abf0:	0081ffc4 	movi	r2,2047
    abf4:	80bf411e 	bne	r16,r2,a8fc <__alt_mem_Flash_flash_data+0xf400a8fc>
    abf8:	003f1506 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    abfc:	80bff844 	addi	r2,r16,-31
    ac00:	00c00804 	movi	r3,32
    ac04:	9884d83a 	srl	r2,r19,r2
    ac08:	28c04a26 	beq	r5,r3,ad34 <__adddf3+0x560>
    ac0c:	00c00fc4 	movi	r3,63
    ac10:	1c21c83a 	sub	r16,r3,r16
    ac14:	9c26983a 	sll	r19,r19,r16
    ac18:	9c62b03a 	or	r17,r19,r17
    ac1c:	8822c03a 	cmpne	r17,r17,zero
    ac20:	88a2b03a 	or	r17,r17,r2
    ac24:	000b883a 	mov	r5,zero
    ac28:	0021883a 	mov	r16,zero
    ac2c:	003fb406 	br	ab00 <__alt_mem_Flash_flash_data+0xf400ab00>
    ac30:	18bff804 	addi	r2,r3,-32
    ac34:	01000804 	movi	r4,32
    ac38:	4084d83a 	srl	r2,r8,r2
    ac3c:	19003f26 	beq	r3,r4,ad3c <__adddf3+0x568>
    ac40:	01001004 	movi	r4,64
    ac44:	20c7c83a 	sub	r3,r4,r3
    ac48:	40d0983a 	sll	r8,r8,r3
    ac4c:	418cb03a 	or	r6,r8,r6
    ac50:	300cc03a 	cmpne	r6,r6,zero
    ac54:	308cb03a 	or	r6,r6,r2
    ac58:	0007883a 	mov	r3,zero
    ac5c:	003f3406 	br	a930 <__alt_mem_Flash_flash_data+0xf400a930>
    ac60:	80002326 	beq	r16,zero,acf0 <__adddf3+0x51c>
    ac64:	0101ffc4 	movi	r4,2047
    ac68:	11005e26 	beq	r2,r4,ade4 <__adddf3+0x610>
    ac6c:	00c7c83a 	sub	r3,zero,r3
    ac70:	29402034 	orhi	r5,r5,128
    ac74:	01000e04 	movi	r4,56
    ac78:	20c07216 	blt	r4,r3,ae44 <__adddf3+0x670>
    ac7c:	010007c4 	movi	r4,31
    ac80:	20c0ce16 	blt	r4,r3,afbc <__adddf3+0x7e8>
    ac84:	01000804 	movi	r4,32
    ac88:	20c9c83a 	sub	r4,r4,r3
    ac8c:	2914983a 	sll	r10,r5,r4
    ac90:	88d2d83a 	srl	r9,r17,r3
    ac94:	8908983a 	sll	r4,r17,r4
    ac98:	28c6d83a 	srl	r3,r5,r3
    ac9c:	5262b03a 	or	r17,r10,r9
    aca0:	2008c03a 	cmpne	r4,r4,zero
    aca4:	8922b03a 	or	r17,r17,r4
    aca8:	3463c83a 	sub	r17,r6,r17
    acac:	40c7c83a 	sub	r3,r8,r3
    acb0:	344d803a 	cmpltu	r6,r6,r17
    acb4:	198bc83a 	sub	r5,r3,r6
    acb8:	1021883a 	mov	r16,r2
    acbc:	3825883a 	mov	r18,r7
    acc0:	003f2006 	br	a944 <__alt_mem_Flash_flash_data+0xf400a944>
    acc4:	9886b03a 	or	r3,r19,r2
    acc8:	1800141e 	bne	r3,zero,ad1c <__adddf3+0x548>
    accc:	0007883a 	mov	r3,zero
    acd0:	000b883a 	mov	r5,zero
    acd4:	0023883a 	mov	r17,zero
    acd8:	0021883a 	mov	r16,zero
    acdc:	003f3c06 	br	a9d0 <__alt_mem_Flash_flash_data+0xf400a9d0>
    ace0:	418cb03a 	or	r6,r8,r6
    ace4:	300cc03a 	cmpne	r6,r6,zero
    ace8:	0011883a 	mov	r8,zero
    acec:	003f5606 	br	aa48 <__alt_mem_Flash_flash_data+0xf400aa48>
    acf0:	2c48b03a 	or	r4,r5,r17
    acf4:	20003b26 	beq	r4,zero,ade4 <__adddf3+0x610>
    acf8:	00c6303a 	nor	r3,zero,r3
    acfc:	1800371e 	bne	r3,zero,addc <__adddf3+0x608>
    ad00:	3463c83a 	sub	r17,r6,r17
    ad04:	414bc83a 	sub	r5,r8,r5
    ad08:	344d803a 	cmpltu	r6,r6,r17
    ad0c:	298bc83a 	sub	r5,r5,r6
    ad10:	1021883a 	mov	r16,r2
    ad14:	3825883a 	mov	r18,r7
    ad18:	003f0a06 	br	a944 <__alt_mem_Flash_flash_data+0xf400a944>
    ad1c:	1023883a 	mov	r17,r2
    ad20:	003f0d06 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    ad24:	0007883a 	mov	r3,zero
    ad28:	000b883a 	mov	r5,zero
    ad2c:	0023883a 	mov	r17,zero
    ad30:	003f2706 	br	a9d0 <__alt_mem_Flash_flash_data+0xf400a9d0>
    ad34:	0027883a 	mov	r19,zero
    ad38:	003fb706 	br	ac18 <__alt_mem_Flash_flash_data+0xf400ac18>
    ad3c:	0011883a 	mov	r8,zero
    ad40:	003fc206 	br	ac4c <__alt_mem_Flash_flash_data+0xf400ac4c>
    ad44:	2c44b03a 	or	r2,r5,r17
    ad48:	8000871e 	bne	r16,zero,af68 <__adddf3+0x794>
    ad4c:	1000b126 	beq	r2,zero,b014 <__adddf3+0x840>
    ad50:	4184b03a 	or	r2,r8,r6
    ad54:	103ebe26 	beq	r2,zero,a850 <__alt_mem_Flash_flash_data+0xf400a850>
    ad58:	3445883a 	add	r2,r6,r17
    ad5c:	1463803a 	cmpltu	r17,r2,r17
    ad60:	414b883a 	add	r5,r8,r5
    ad64:	2c4b883a 	add	r5,r5,r17
    ad68:	28c0202c 	andhi	r3,r5,128
    ad6c:	1023883a 	mov	r17,r2
    ad70:	183f6326 	beq	r3,zero,ab00 <__alt_mem_Flash_flash_data+0xf400ab00>
    ad74:	00bfe034 	movhi	r2,65408
    ad78:	10bfffc4 	addi	r2,r2,-1
    ad7c:	2021883a 	mov	r16,r4
    ad80:	288a703a 	and	r5,r5,r2
    ad84:	003eb206 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    ad88:	2c44b03a 	or	r2,r5,r17
    ad8c:	8000251e 	bne	r16,zero,ae24 <__adddf3+0x650>
    ad90:	10004b1e 	bne	r2,zero,aec0 <__adddf3+0x6ec>
    ad94:	4184b03a 	or	r2,r8,r6
    ad98:	103fe226 	beq	r2,zero,ad24 <__alt_mem_Flash_flash_data+0xf400ad24>
    ad9c:	400b883a 	mov	r5,r8
    ada0:	3023883a 	mov	r17,r6
    ada4:	3825883a 	mov	r18,r7
    ada8:	003ea906 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    adac:	20bff804 	addi	r2,r4,-32
    adb0:	01c00804 	movi	r7,32
    adb4:	4084d83a 	srl	r2,r8,r2
    adb8:	21c07e26 	beq	r4,r7,afb4 <__adddf3+0x7e0>
    adbc:	01c01004 	movi	r7,64
    adc0:	3909c83a 	sub	r4,r7,r4
    adc4:	4110983a 	sll	r8,r8,r4
    adc8:	418cb03a 	or	r6,r8,r6
    adcc:	300cc03a 	cmpne	r6,r6,zero
    add0:	308cb03a 	or	r6,r6,r2
    add4:	0011883a 	mov	r8,zero
    add8:	003f1b06 	br	aa48 <__alt_mem_Flash_flash_data+0xf400aa48>
    addc:	0101ffc4 	movi	r4,2047
    ade0:	113fa41e 	bne	r2,r4,ac74 <__alt_mem_Flash_flash_data+0xf400ac74>
    ade4:	400b883a 	mov	r5,r8
    ade8:	3023883a 	mov	r17,r6
    adec:	1021883a 	mov	r16,r2
    adf0:	3825883a 	mov	r18,r7
    adf4:	003e9606 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    adf8:	80001a1e 	bne	r16,zero,ae64 <__adddf3+0x690>
    adfc:	2c4eb03a 	or	r7,r5,r17
    ae00:	38005526 	beq	r7,zero,af58 <__adddf3+0x784>
    ae04:	0108303a 	nor	r4,zero,r4
    ae08:	2000511e 	bne	r4,zero,af50 <__adddf3+0x77c>
    ae0c:	89a3883a 	add	r17,r17,r6
    ae10:	414b883a 	add	r5,r8,r5
    ae14:	898d803a 	cmpltu	r6,r17,r6
    ae18:	298b883a 	add	r5,r5,r6
    ae1c:	1021883a 	mov	r16,r2
    ae20:	003f0e06 	br	aa5c <__alt_mem_Flash_flash_data+0xf400aa5c>
    ae24:	1000341e 	bne	r2,zero,aef8 <__adddf3+0x724>
    ae28:	4184b03a 	or	r2,r8,r6
    ae2c:	10006f26 	beq	r2,zero,afec <__adddf3+0x818>
    ae30:	400b883a 	mov	r5,r8
    ae34:	3023883a 	mov	r17,r6
    ae38:	3825883a 	mov	r18,r7
    ae3c:	0401ffc4 	movi	r16,2047
    ae40:	003e8306 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    ae44:	2c62b03a 	or	r17,r5,r17
    ae48:	8822c03a 	cmpne	r17,r17,zero
    ae4c:	0007883a 	mov	r3,zero
    ae50:	003f9506 	br	aca8 <__alt_mem_Flash_flash_data+0xf400aca8>
    ae54:	1021883a 	mov	r16,r2
    ae58:	000b883a 	mov	r5,zero
    ae5c:	0023883a 	mov	r17,zero
    ae60:	003edb06 	br	a9d0 <__alt_mem_Flash_flash_data+0xf400a9d0>
    ae64:	01c1ffc4 	movi	r7,2047
    ae68:	11c03b26 	beq	r2,r7,af58 <__adddf3+0x784>
    ae6c:	0109c83a 	sub	r4,zero,r4
    ae70:	29402034 	orhi	r5,r5,128
    ae74:	01c00e04 	movi	r7,56
    ae78:	39006216 	blt	r7,r4,b004 <__adddf3+0x830>
    ae7c:	01c007c4 	movi	r7,31
    ae80:	39006b16 	blt	r7,r4,b030 <__adddf3+0x85c>
    ae84:	01c00804 	movi	r7,32
    ae88:	390fc83a 	sub	r7,r7,r4
    ae8c:	29d4983a 	sll	r10,r5,r7
    ae90:	8912d83a 	srl	r9,r17,r4
    ae94:	89ce983a 	sll	r7,r17,r7
    ae98:	2908d83a 	srl	r4,r5,r4
    ae9c:	5262b03a 	or	r17,r10,r9
    aea0:	380ac03a 	cmpne	r5,r7,zero
    aea4:	8962b03a 	or	r17,r17,r5
    aea8:	89a3883a 	add	r17,r17,r6
    aeac:	2211883a 	add	r8,r4,r8
    aeb0:	898d803a 	cmpltu	r6,r17,r6
    aeb4:	418b883a 	add	r5,r8,r6
    aeb8:	1021883a 	mov	r16,r2
    aebc:	003ee706 	br	aa5c <__alt_mem_Flash_flash_data+0xf400aa5c>
    aec0:	4184b03a 	or	r2,r8,r6
    aec4:	103e6226 	beq	r2,zero,a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aec8:	8987c83a 	sub	r3,r17,r6
    aecc:	88c9803a 	cmpltu	r4,r17,r3
    aed0:	2a05c83a 	sub	r2,r5,r8
    aed4:	1105c83a 	sub	r2,r2,r4
    aed8:	1100202c 	andhi	r4,r2,128
    aedc:	203f0426 	beq	r4,zero,aaf0 <__alt_mem_Flash_flash_data+0xf400aaf0>
    aee0:	3463c83a 	sub	r17,r6,r17
    aee4:	414bc83a 	sub	r5,r8,r5
    aee8:	344d803a 	cmpltu	r6,r6,r17
    aeec:	298bc83a 	sub	r5,r5,r6
    aef0:	3825883a 	mov	r18,r7
    aef4:	003e5606 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    aef8:	4184b03a 	or	r2,r8,r6
    aefc:	10002b26 	beq	r2,zero,afac <__adddf3+0x7d8>
    af00:	2804d0fa 	srli	r2,r5,3
    af04:	8822d0fa 	srli	r17,r17,3
    af08:	280a977a 	slli	r5,r5,29
    af0c:	10c0022c 	andhi	r3,r2,8
    af10:	2c62b03a 	or	r17,r5,r17
    af14:	18000826 	beq	r3,zero,af38 <__adddf3+0x764>
    af18:	4008d0fa 	srli	r4,r8,3
    af1c:	20c0022c 	andhi	r3,r4,8
    af20:	1800051e 	bne	r3,zero,af38 <__adddf3+0x764>
    af24:	300cd0fa 	srli	r6,r6,3
    af28:	4010977a 	slli	r8,r8,29
    af2c:	2005883a 	mov	r2,r4
    af30:	3825883a 	mov	r18,r7
    af34:	41a2b03a 	or	r17,r8,r6
    af38:	880ad77a 	srli	r5,r17,29
    af3c:	100490fa 	slli	r2,r2,3
    af40:	882290fa 	slli	r17,r17,3
    af44:	0401ffc4 	movi	r16,2047
    af48:	288ab03a 	or	r5,r5,r2
    af4c:	003e4006 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    af50:	01c1ffc4 	movi	r7,2047
    af54:	11ffc71e 	bne	r2,r7,ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    af58:	400b883a 	mov	r5,r8
    af5c:	3023883a 	mov	r17,r6
    af60:	1021883a 	mov	r16,r2
    af64:	003e3a06 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    af68:	10002d26 	beq	r2,zero,b020 <__adddf3+0x84c>
    af6c:	4184b03a 	or	r2,r8,r6
    af70:	10000e26 	beq	r2,zero,afac <__adddf3+0x7d8>
    af74:	2804d0fa 	srli	r2,r5,3
    af78:	8822d0fa 	srli	r17,r17,3
    af7c:	280a977a 	slli	r5,r5,29
    af80:	10c0022c 	andhi	r3,r2,8
    af84:	2c62b03a 	or	r17,r5,r17
    af88:	183feb26 	beq	r3,zero,af38 <__alt_mem_Flash_flash_data+0xf400af38>
    af8c:	4008d0fa 	srli	r4,r8,3
    af90:	20c0022c 	andhi	r3,r4,8
    af94:	183fe81e 	bne	r3,zero,af38 <__alt_mem_Flash_flash_data+0xf400af38>
    af98:	300cd0fa 	srli	r6,r6,3
    af9c:	4010977a 	slli	r8,r8,29
    afa0:	2005883a 	mov	r2,r4
    afa4:	41a2b03a 	or	r17,r8,r6
    afa8:	003fe306 	br	af38 <__alt_mem_Flash_flash_data+0xf400af38>
    afac:	0401ffc4 	movi	r16,2047
    afb0:	003e2706 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    afb4:	0011883a 	mov	r8,zero
    afb8:	003f8306 	br	adc8 <__alt_mem_Flash_flash_data+0xf400adc8>
    afbc:	193ff804 	addi	r4,r3,-32
    afc0:	02400804 	movi	r9,32
    afc4:	2908d83a 	srl	r4,r5,r4
    afc8:	1a402526 	beq	r3,r9,b060 <__adddf3+0x88c>
    afcc:	02401004 	movi	r9,64
    afd0:	48c7c83a 	sub	r3,r9,r3
    afd4:	28ca983a 	sll	r5,r5,r3
    afd8:	2c62b03a 	or	r17,r5,r17
    afdc:	8822c03a 	cmpne	r17,r17,zero
    afe0:	8922b03a 	or	r17,r17,r4
    afe4:	0007883a 	mov	r3,zero
    afe8:	003f2f06 	br	aca8 <__alt_mem_Flash_flash_data+0xf400aca8>
    afec:	01402034 	movhi	r5,128
    aff0:	0007883a 	mov	r3,zero
    aff4:	297fffc4 	addi	r5,r5,-1
    aff8:	047ffe04 	movi	r17,-8
    affc:	0401ffc4 	movi	r16,2047
    b000:	003e7306 	br	a9d0 <__alt_mem_Flash_flash_data+0xf400a9d0>
    b004:	2c62b03a 	or	r17,r5,r17
    b008:	8822c03a 	cmpne	r17,r17,zero
    b00c:	0009883a 	mov	r4,zero
    b010:	003fa506 	br	aea8 <__alt_mem_Flash_flash_data+0xf400aea8>
    b014:	400b883a 	mov	r5,r8
    b018:	3023883a 	mov	r17,r6
    b01c:	003e0c06 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    b020:	400b883a 	mov	r5,r8
    b024:	3023883a 	mov	r17,r6
    b028:	0401ffc4 	movi	r16,2047
    b02c:	003e0806 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    b030:	21fff804 	addi	r7,r4,-32
    b034:	02400804 	movi	r9,32
    b038:	29ced83a 	srl	r7,r5,r7
    b03c:	22400a26 	beq	r4,r9,b068 <__adddf3+0x894>
    b040:	02401004 	movi	r9,64
    b044:	4909c83a 	sub	r4,r9,r4
    b048:	290a983a 	sll	r5,r5,r4
    b04c:	2c62b03a 	or	r17,r5,r17
    b050:	8822c03a 	cmpne	r17,r17,zero
    b054:	89e2b03a 	or	r17,r17,r7
    b058:	0009883a 	mov	r4,zero
    b05c:	003f9206 	br	aea8 <__alt_mem_Flash_flash_data+0xf400aea8>
    b060:	000b883a 	mov	r5,zero
    b064:	003fdc06 	br	afd8 <__alt_mem_Flash_flash_data+0xf400afd8>
    b068:	000b883a 	mov	r5,zero
    b06c:	003ff706 	br	b04c <__alt_mem_Flash_flash_data+0xf400b04c>

0000b070 <__divdf3>:
    b070:	defff204 	addi	sp,sp,-56
    b074:	dd000815 	stw	r20,32(sp)
    b078:	2828d53a 	srli	r20,r5,20
    b07c:	dd800a15 	stw	r22,40(sp)
    b080:	282cd7fa 	srli	r22,r5,31
    b084:	dc000415 	stw	r16,16(sp)
    b088:	04000434 	movhi	r16,16
    b08c:	df000c15 	stw	fp,48(sp)
    b090:	dcc00715 	stw	r19,28(sp)
    b094:	dc800615 	stw	r18,24(sp)
    b098:	dc400515 	stw	r17,20(sp)
    b09c:	843fffc4 	addi	r16,r16,-1
    b0a0:	dfc00d15 	stw	ra,52(sp)
    b0a4:	ddc00b15 	stw	r23,44(sp)
    b0a8:	dd400915 	stw	r21,36(sp)
    b0ac:	a501ffcc 	andi	r20,r20,2047
    b0b0:	2025883a 	mov	r18,r4
    b0b4:	2027883a 	mov	r19,r4
    b0b8:	2c22703a 	and	r17,r5,r16
    b0bc:	b7003fcc 	andi	fp,r22,255
    b0c0:	a0005e26 	beq	r20,zero,b23c <__divdf3+0x1cc>
    b0c4:	0081ffc4 	movi	r2,2047
    b0c8:	a0803526 	beq	r20,r2,b1a0 <__divdf3+0x130>
    b0cc:	8c000434 	orhi	r16,r17,16
    b0d0:	2004d77a 	srli	r2,r4,29
    b0d4:	802090fa 	slli	r16,r16,3
    b0d8:	202690fa 	slli	r19,r4,3
    b0dc:	a53f0044 	addi	r20,r20,-1023
    b0e0:	80a2b03a 	or	r17,r16,r2
    b0e4:	0025883a 	mov	r18,zero
    b0e8:	0011883a 	mov	r8,zero
    b0ec:	380ad53a 	srli	r5,r7,20
    b0f0:	382ed7fa 	srli	r23,r7,31
    b0f4:	04000434 	movhi	r16,16
    b0f8:	843fffc4 	addi	r16,r16,-1
    b0fc:	2941ffcc 	andi	r5,r5,2047
    b100:	302b883a 	mov	r21,r6
    b104:	3c20703a 	and	r16,r7,r16
    b108:	ba403fcc 	andi	r9,r23,255
    b10c:	28006726 	beq	r5,zero,b2ac <__divdf3+0x23c>
    b110:	0081ffc4 	movi	r2,2047
    b114:	28805f26 	beq	r5,r2,b294 <__divdf3+0x224>
    b118:	84000434 	orhi	r16,r16,16
    b11c:	3004d77a 	srli	r2,r6,29
    b120:	802090fa 	slli	r16,r16,3
    b124:	302a90fa 	slli	r21,r6,3
    b128:	297f0044 	addi	r5,r5,-1023
    b12c:	80a0b03a 	or	r16,r16,r2
    b130:	000f883a 	mov	r7,zero
    b134:	3c86b03a 	or	r3,r7,r18
    b138:	180690ba 	slli	r3,r3,2
    b13c:	00800074 	movhi	r2,1
    b140:	10ac5804 	addi	r2,r2,-20128
    b144:	1887883a 	add	r3,r3,r2
    b148:	18c00017 	ldw	r3,0(r3)
    b14c:	b5c8f03a 	xor	r4,r22,r23
    b150:	200d883a 	mov	r6,r4
    b154:	24803fcc 	andi	r18,r4,255
    b158:	a169c83a 	sub	r20,r20,r5
    b15c:	1800683a 	jmp	r3
    b160:	0000b3a8 	cmpgeui	zero,zero,718
    b164:	0000b1d8 	cmpnei	zero,zero,711
    b168:	0000b36c 	andhi	zero,zero,717
    b16c:	0000b1bc 	xorhi	zero,zero,710
    b170:	0000b36c 	andhi	zero,zero,717
    b174:	0000b340 	call	b34 <___vfprintf_internal_r+0x2c>
    b178:	0000b36c 	andhi	zero,zero,717
    b17c:	0000b1bc 	xorhi	zero,zero,710
    b180:	0000b1d8 	cmpnei	zero,zero,711
    b184:	0000b1d8 	cmpnei	zero,zero,711
    b188:	0000b340 	call	b34 <___vfprintf_internal_r+0x2c>
    b18c:	0000b1bc 	xorhi	zero,zero,710
    b190:	0000b1cc 	andi	zero,zero,711
    b194:	0000b1cc 	andi	zero,zero,711
    b198:	0000b1cc 	andi	zero,zero,711
    b19c:	0000b37c 	xorhi	zero,zero,717
    b1a0:	8904b03a 	or	r2,r17,r4
    b1a4:	1000631e 	bne	r2,zero,b334 <__divdf3+0x2c4>
    b1a8:	04800204 	movi	r18,8
    b1ac:	0023883a 	mov	r17,zero
    b1b0:	0027883a 	mov	r19,zero
    b1b4:	02000084 	movi	r8,2
    b1b8:	003fcc06 	br	b0ec <__alt_mem_Flash_flash_data+0xf400b0ec>
    b1bc:	8023883a 	mov	r17,r16
    b1c0:	a827883a 	mov	r19,r21
    b1c4:	4839883a 	mov	fp,r9
    b1c8:	3811883a 	mov	r8,r7
    b1cc:	00800084 	movi	r2,2
    b1d0:	40812a1e 	bne	r8,r2,b67c <__divdf3+0x60c>
    b1d4:	e025883a 	mov	r18,fp
    b1d8:	9180004c 	andi	r6,r18,1
    b1dc:	0101ffc4 	movi	r4,2047
    b1e0:	000b883a 	mov	r5,zero
    b1e4:	0027883a 	mov	r19,zero
    b1e8:	2008953a 	slli	r4,r4,20
    b1ec:	30c03fcc 	andi	r3,r6,255
    b1f0:	04000434 	movhi	r16,16
    b1f4:	180697fa 	slli	r3,r3,31
    b1f8:	843fffc4 	addi	r16,r16,-1
    b1fc:	2c20703a 	and	r16,r5,r16
    b200:	8120b03a 	or	r16,r16,r4
    b204:	80c6b03a 	or	r3,r16,r3
    b208:	9805883a 	mov	r2,r19
    b20c:	dfc00d17 	ldw	ra,52(sp)
    b210:	df000c17 	ldw	fp,48(sp)
    b214:	ddc00b17 	ldw	r23,44(sp)
    b218:	dd800a17 	ldw	r22,40(sp)
    b21c:	dd400917 	ldw	r21,36(sp)
    b220:	dd000817 	ldw	r20,32(sp)
    b224:	dcc00717 	ldw	r19,28(sp)
    b228:	dc800617 	ldw	r18,24(sp)
    b22c:	dc400517 	ldw	r17,20(sp)
    b230:	dc000417 	ldw	r16,16(sp)
    b234:	dec00e04 	addi	sp,sp,56
    b238:	f800283a 	ret
    b23c:	8904b03a 	or	r2,r17,r4
    b240:	10003726 	beq	r2,zero,b320 <__divdf3+0x2b0>
    b244:	88011c26 	beq	r17,zero,b6b8 <__divdf3+0x648>
    b248:	8809883a 	mov	r4,r17
    b24c:	d9800315 	stw	r6,12(sp)
    b250:	d9c00115 	stw	r7,4(sp)
    b254:	000cd700 	call	cd70 <__clzsi2>
    b258:	d9800317 	ldw	r6,12(sp)
    b25c:	d9c00117 	ldw	r7,4(sp)
    b260:	1007883a 	mov	r3,r2
    b264:	01000a04 	movi	r4,40
    b268:	1cfffe04 	addi	r19,r3,-8
    b26c:	20c9c83a 	sub	r4,r4,r3
    b270:	8cca983a 	sll	r5,r17,r19
    b274:	9108d83a 	srl	r4,r18,r4
    b278:	94e6983a 	sll	r19,r18,r19
    b27c:	2162b03a 	or	r17,r4,r5
    b280:	053f0344 	movi	r20,-1011
    b284:	a0e9c83a 	sub	r20,r20,r3
    b288:	0025883a 	mov	r18,zero
    b28c:	0011883a 	mov	r8,zero
    b290:	003f9606 	br	b0ec <__alt_mem_Flash_flash_data+0xf400b0ec>
    b294:	8184b03a 	or	r2,r16,r6
    b298:	10001f1e 	bne	r2,zero,b318 <__divdf3+0x2a8>
    b29c:	0021883a 	mov	r16,zero
    b2a0:	002b883a 	mov	r21,zero
    b2a4:	01c00084 	movi	r7,2
    b2a8:	003fa206 	br	b134 <__alt_mem_Flash_flash_data+0xf400b134>
    b2ac:	8184b03a 	or	r2,r16,r6
    b2b0:	10001526 	beq	r2,zero,b308 <__divdf3+0x298>
    b2b4:	80010c26 	beq	r16,zero,b6e8 <__divdf3+0x678>
    b2b8:	8009883a 	mov	r4,r16
    b2bc:	d9800315 	stw	r6,12(sp)
    b2c0:	da000215 	stw	r8,8(sp)
    b2c4:	da400015 	stw	r9,0(sp)
    b2c8:	000cd700 	call	cd70 <__clzsi2>
    b2cc:	d9800317 	ldw	r6,12(sp)
    b2d0:	da000217 	ldw	r8,8(sp)
    b2d4:	da400017 	ldw	r9,0(sp)
    b2d8:	1007883a 	mov	r3,r2
    b2dc:	01000a04 	movi	r4,40
    b2e0:	1d7ffe04 	addi	r21,r3,-8
    b2e4:	20c9c83a 	sub	r4,r4,r3
    b2e8:	8560983a 	sll	r16,r16,r21
    b2ec:	3108d83a 	srl	r4,r6,r4
    b2f0:	356a983a 	sll	r21,r6,r21
    b2f4:	2420b03a 	or	r16,r4,r16
    b2f8:	017f0344 	movi	r5,-1011
    b2fc:	28cbc83a 	sub	r5,r5,r3
    b300:	000f883a 	mov	r7,zero
    b304:	003f8b06 	br	b134 <__alt_mem_Flash_flash_data+0xf400b134>
    b308:	0021883a 	mov	r16,zero
    b30c:	002b883a 	mov	r21,zero
    b310:	01c00044 	movi	r7,1
    b314:	003f8706 	br	b134 <__alt_mem_Flash_flash_data+0xf400b134>
    b318:	01c000c4 	movi	r7,3
    b31c:	003f8506 	br	b134 <__alt_mem_Flash_flash_data+0xf400b134>
    b320:	04800104 	movi	r18,4
    b324:	0023883a 	mov	r17,zero
    b328:	0027883a 	mov	r19,zero
    b32c:	02000044 	movi	r8,1
    b330:	003f6e06 	br	b0ec <__alt_mem_Flash_flash_data+0xf400b0ec>
    b334:	04800304 	movi	r18,12
    b338:	020000c4 	movi	r8,3
    b33c:	003f6b06 	br	b0ec <__alt_mem_Flash_flash_data+0xf400b0ec>
    b340:	01400434 	movhi	r5,16
    b344:	000d883a 	mov	r6,zero
    b348:	297fffc4 	addi	r5,r5,-1
    b34c:	04ffffc4 	movi	r19,-1
    b350:	0101ffc4 	movi	r4,2047
    b354:	003fa406 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b358:	043f0084 	movi	r16,-1022
    b35c:	8521c83a 	sub	r16,r16,r20
    b360:	00800e04 	movi	r2,56
    b364:	1401200e 	bge	r2,r16,b7e8 <__divdf3+0x778>
    b368:	9180004c 	andi	r6,r18,1
    b36c:	0009883a 	mov	r4,zero
    b370:	000b883a 	mov	r5,zero
    b374:	0027883a 	mov	r19,zero
    b378:	003f9b06 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b37c:	8880022c 	andhi	r2,r17,8
    b380:	1000c726 	beq	r2,zero,b6a0 <__divdf3+0x630>
    b384:	8080022c 	andhi	r2,r16,8
    b388:	1000c51e 	bne	r2,zero,b6a0 <__divdf3+0x630>
    b38c:	00800434 	movhi	r2,16
    b390:	81400234 	orhi	r5,r16,8
    b394:	10bfffc4 	addi	r2,r2,-1
    b398:	b80d883a 	mov	r6,r23
    b39c:	288a703a 	and	r5,r5,r2
    b3a0:	a827883a 	mov	r19,r21
    b3a4:	003fea06 	br	b350 <__alt_mem_Flash_flash_data+0xf400b350>
    b3a8:	8440ea36 	bltu	r16,r17,b754 <__divdf3+0x6e4>
    b3ac:	8c00e826 	beq	r17,r16,b750 <__divdf3+0x6e0>
    b3b0:	a53fffc4 	addi	r20,r20,-1
    b3b4:	882d883a 	mov	r22,r17
    b3b8:	000d883a 	mov	r6,zero
    b3bc:	a804d63a 	srli	r2,r21,24
    b3c0:	8020923a 	slli	r16,r16,8
    b3c4:	b009883a 	mov	r4,r22
    b3c8:	d9800315 	stw	r6,12(sp)
    b3cc:	1420b03a 	or	r16,r2,r16
    b3d0:	802ed43a 	srli	r23,r16,16
    b3d4:	873fffcc 	andi	fp,r16,65535
    b3d8:	a82a923a 	slli	r21,r21,8
    b3dc:	b80b883a 	mov	r5,r23
    b3e0:	000a7c40 	call	a7c4 <__udivsi3>
    b3e4:	b009883a 	mov	r4,r22
    b3e8:	b80b883a 	mov	r5,r23
    b3ec:	1023883a 	mov	r17,r2
    b3f0:	000a7cc0 	call	a7cc <__umodsi3>
    b3f4:	1004943a 	slli	r2,r2,16
    b3f8:	9808d43a 	srli	r4,r19,16
    b3fc:	8f2d383a 	mul	r22,r17,fp
    b400:	d9800317 	ldw	r6,12(sp)
    b404:	1106b03a 	or	r3,r2,r4
    b408:	1d80062e 	bgeu	r3,r22,b424 <__divdf3+0x3b4>
    b40c:	1c07883a 	add	r3,r3,r16
    b410:	88bfffc4 	addi	r2,r17,-1
    b414:	1c00dc36 	bltu	r3,r16,b788 <__divdf3+0x718>
    b418:	1d80db2e 	bgeu	r3,r22,b788 <__divdf3+0x718>
    b41c:	8c7fff84 	addi	r17,r17,-2
    b420:	1c07883a 	add	r3,r3,r16
    b424:	1dadc83a 	sub	r22,r3,r22
    b428:	b009883a 	mov	r4,r22
    b42c:	b80b883a 	mov	r5,r23
    b430:	d9800315 	stw	r6,12(sp)
    b434:	000a7c40 	call	a7c4 <__udivsi3>
    b438:	b009883a 	mov	r4,r22
    b43c:	b80b883a 	mov	r5,r23
    b440:	d8800015 	stw	r2,0(sp)
    b444:	000a7cc0 	call	a7cc <__umodsi3>
    b448:	da400017 	ldw	r9,0(sp)
    b44c:	1004943a 	slli	r2,r2,16
    b450:	9cffffcc 	andi	r19,r19,65535
    b454:	4f07383a 	mul	r3,r9,fp
    b458:	14c8b03a 	or	r4,r2,r19
    b45c:	d9800317 	ldw	r6,12(sp)
    b460:	20c0062e 	bgeu	r4,r3,b47c <__divdf3+0x40c>
    b464:	2409883a 	add	r4,r4,r16
    b468:	48bfffc4 	addi	r2,r9,-1
    b46c:	2400c436 	bltu	r4,r16,b780 <__divdf3+0x710>
    b470:	20c0c32e 	bgeu	r4,r3,b780 <__divdf3+0x710>
    b474:	4a7fff84 	addi	r9,r9,-2
    b478:	2409883a 	add	r4,r4,r16
    b47c:	8822943a 	slli	r17,r17,16
    b480:	a80ed43a 	srli	r7,r21,16
    b484:	aa3fffcc 	andi	r8,r21,65535
    b488:	4c62b03a 	or	r17,r9,r17
    b48c:	8816d43a 	srli	r11,r17,16
    b490:	897fffcc 	andi	r5,r17,65535
    b494:	2a15383a 	mul	r10,r5,r8
    b498:	5a19383a 	mul	r12,r11,r8
    b49c:	29cb383a 	mul	r5,r5,r7
    b4a0:	5012d43a 	srli	r9,r10,16
    b4a4:	20c5c83a 	sub	r2,r4,r3
    b4a8:	614b883a 	add	r5,r12,r5
    b4ac:	2a4b883a 	add	r5,r5,r9
    b4b0:	59c7383a 	mul	r3,r11,r7
    b4b4:	2b00022e 	bgeu	r5,r12,b4c0 <__divdf3+0x450>
    b4b8:	01000074 	movhi	r4,1
    b4bc:	1907883a 	add	r3,r3,r4
    b4c0:	2808d43a 	srli	r4,r5,16
    b4c4:	280a943a 	slli	r5,r5,16
    b4c8:	54ffffcc 	andi	r19,r10,65535
    b4cc:	1907883a 	add	r3,r3,r4
    b4d0:	2ccb883a 	add	r5,r5,r19
    b4d4:	10c09336 	bltu	r2,r3,b724 <__divdf3+0x6b4>
    b4d8:	10c0ad26 	beq	r2,r3,b790 <__divdf3+0x720>
    b4dc:	10c7c83a 	sub	r3,r2,r3
    b4e0:	3167c83a 	sub	r19,r6,r5
    b4e4:	34ed803a 	cmpltu	r22,r6,r19
    b4e8:	1dadc83a 	sub	r22,r3,r22
    b4ec:	b400b226 	beq	r22,r16,b7b8 <__divdf3+0x748>
    b4f0:	b009883a 	mov	r4,r22
    b4f4:	b80b883a 	mov	r5,r23
    b4f8:	d9c00115 	stw	r7,4(sp)
    b4fc:	da000215 	stw	r8,8(sp)
    b500:	000a7c40 	call	a7c4 <__udivsi3>
    b504:	b009883a 	mov	r4,r22
    b508:	b80b883a 	mov	r5,r23
    b50c:	d8800315 	stw	r2,12(sp)
    b510:	000a7cc0 	call	a7cc <__umodsi3>
    b514:	d9800317 	ldw	r6,12(sp)
    b518:	1004943a 	slli	r2,r2,16
    b51c:	9808d43a 	srli	r4,r19,16
    b520:	372d383a 	mul	r22,r6,fp
    b524:	d9c00117 	ldw	r7,4(sp)
    b528:	1106b03a 	or	r3,r2,r4
    b52c:	da000217 	ldw	r8,8(sp)
    b530:	1d80062e 	bgeu	r3,r22,b54c <__divdf3+0x4dc>
    b534:	1c07883a 	add	r3,r3,r16
    b538:	30bfffc4 	addi	r2,r6,-1
    b53c:	1c00a036 	bltu	r3,r16,b7c0 <__divdf3+0x750>
    b540:	1d809f2e 	bgeu	r3,r22,b7c0 <__divdf3+0x750>
    b544:	31bfff84 	addi	r6,r6,-2
    b548:	1c07883a 	add	r3,r3,r16
    b54c:	1dadc83a 	sub	r22,r3,r22
    b550:	b009883a 	mov	r4,r22
    b554:	b80b883a 	mov	r5,r23
    b558:	d9800315 	stw	r6,12(sp)
    b55c:	d9c00115 	stw	r7,4(sp)
    b560:	da000215 	stw	r8,8(sp)
    b564:	000a7c40 	call	a7c4 <__udivsi3>
    b568:	b009883a 	mov	r4,r22
    b56c:	b80b883a 	mov	r5,r23
    b570:	d8800015 	stw	r2,0(sp)
    b574:	000a7cc0 	call	a7cc <__umodsi3>
    b578:	da400017 	ldw	r9,0(sp)
    b57c:	1004943a 	slli	r2,r2,16
    b580:	993fffcc 	andi	r4,r19,65535
    b584:	4f39383a 	mul	fp,r9,fp
    b588:	1106b03a 	or	r3,r2,r4
    b58c:	d9800317 	ldw	r6,12(sp)
    b590:	d9c00117 	ldw	r7,4(sp)
    b594:	da000217 	ldw	r8,8(sp)
    b598:	1f00062e 	bgeu	r3,fp,b5b4 <__divdf3+0x544>
    b59c:	1c07883a 	add	r3,r3,r16
    b5a0:	48bfffc4 	addi	r2,r9,-1
    b5a4:	1c008836 	bltu	r3,r16,b7c8 <__divdf3+0x758>
    b5a8:	1f00872e 	bgeu	r3,fp,b7c8 <__divdf3+0x758>
    b5ac:	4a7fff84 	addi	r9,r9,-2
    b5b0:	1c07883a 	add	r3,r3,r16
    b5b4:	3008943a 	slli	r4,r6,16
    b5b8:	1f07c83a 	sub	r3,r3,fp
    b5bc:	4926b03a 	or	r19,r9,r4
    b5c0:	993fffcc 	andi	r4,r19,65535
    b5c4:	980cd43a 	srli	r6,r19,16
    b5c8:	220b383a 	mul	r5,r4,r8
    b5cc:	21c5383a 	mul	r2,r4,r7
    b5d0:	3211383a 	mul	r8,r6,r8
    b5d4:	2808d43a 	srli	r4,r5,16
    b5d8:	31cf383a 	mul	r7,r6,r7
    b5dc:	4085883a 	add	r2,r8,r2
    b5e0:	1105883a 	add	r2,r2,r4
    b5e4:	1200022e 	bgeu	r2,r8,b5f0 <__divdf3+0x580>
    b5e8:	01000074 	movhi	r4,1
    b5ec:	390f883a 	add	r7,r7,r4
    b5f0:	1008d43a 	srli	r4,r2,16
    b5f4:	1004943a 	slli	r2,r2,16
    b5f8:	297fffcc 	andi	r5,r5,65535
    b5fc:	390f883a 	add	r7,r7,r4
    b600:	1145883a 	add	r2,r2,r5
    b604:	19c06536 	bltu	r3,r7,b79c <__divdf3+0x72c>
    b608:	19c09f26 	beq	r3,r7,b888 <__divdf3+0x818>
    b60c:	9cc00054 	ori	r19,r19,1
    b610:	a100ffc4 	addi	r4,r20,1023
    b614:	013f500e 	bge	zero,r4,b358 <__alt_mem_Flash_flash_data+0xf400b358>
    b618:	988001cc 	andi	r2,r19,7
    b61c:	10000726 	beq	r2,zero,b63c <__divdf3+0x5cc>
    b620:	98c003cc 	andi	r3,r19,15
    b624:	00800104 	movi	r2,4
    b628:	18800426 	beq	r3,r2,b63c <__divdf3+0x5cc>
    b62c:	9885883a 	add	r2,r19,r2
    b630:	14e1803a 	cmpltu	r16,r2,r19
    b634:	8c23883a 	add	r17,r17,r16
    b638:	1027883a 	mov	r19,r2
    b63c:	8880402c 	andhi	r2,r17,256
    b640:	10000426 	beq	r2,zero,b654 <__divdf3+0x5e4>
    b644:	00bfc034 	movhi	r2,65280
    b648:	10bfffc4 	addi	r2,r2,-1
    b64c:	a1010004 	addi	r4,r20,1024
    b650:	88a2703a 	and	r17,r17,r2
    b654:	0081ff84 	movi	r2,2046
    b658:	113edf16 	blt	r2,r4,b1d8 <__alt_mem_Flash_flash_data+0xf400b1d8>
    b65c:	9826d0fa 	srli	r19,r19,3
    b660:	8804977a 	slli	r2,r17,29
    b664:	8820927a 	slli	r16,r17,9
    b668:	2101ffcc 	andi	r4,r4,2047
    b66c:	14e6b03a 	or	r19,r2,r19
    b670:	800ad33a 	srli	r5,r16,12
    b674:	9180004c 	andi	r6,r18,1
    b678:	003edb06 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b67c:	008000c4 	movi	r2,3
    b680:	4080a826 	beq	r8,r2,b924 <__divdf3+0x8b4>
    b684:	00800044 	movi	r2,1
    b688:	4080551e 	bne	r8,r2,b7e0 <__divdf3+0x770>
    b68c:	e00d883a 	mov	r6,fp
    b690:	0009883a 	mov	r4,zero
    b694:	000b883a 	mov	r5,zero
    b698:	0027883a 	mov	r19,zero
    b69c:	003ed206 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b6a0:	00800434 	movhi	r2,16
    b6a4:	89400234 	orhi	r5,r17,8
    b6a8:	10bfffc4 	addi	r2,r2,-1
    b6ac:	b00d883a 	mov	r6,r22
    b6b0:	288a703a 	and	r5,r5,r2
    b6b4:	003f2606 	br	b350 <__alt_mem_Flash_flash_data+0xf400b350>
    b6b8:	d9800315 	stw	r6,12(sp)
    b6bc:	d9c00115 	stw	r7,4(sp)
    b6c0:	000cd700 	call	cd70 <__clzsi2>
    b6c4:	10c00804 	addi	r3,r2,32
    b6c8:	010009c4 	movi	r4,39
    b6cc:	d9800317 	ldw	r6,12(sp)
    b6d0:	d9c00117 	ldw	r7,4(sp)
    b6d4:	20fee30e 	bge	r4,r3,b264 <__alt_mem_Flash_flash_data+0xf400b264>
    b6d8:	117ffe04 	addi	r5,r2,-8
    b6dc:	9162983a 	sll	r17,r18,r5
    b6e0:	0027883a 	mov	r19,zero
    b6e4:	003ee606 	br	b280 <__alt_mem_Flash_flash_data+0xf400b280>
    b6e8:	3009883a 	mov	r4,r6
    b6ec:	d9800315 	stw	r6,12(sp)
    b6f0:	da000215 	stw	r8,8(sp)
    b6f4:	da400015 	stw	r9,0(sp)
    b6f8:	000cd700 	call	cd70 <__clzsi2>
    b6fc:	10c00804 	addi	r3,r2,32
    b700:	010009c4 	movi	r4,39
    b704:	d9800317 	ldw	r6,12(sp)
    b708:	da000217 	ldw	r8,8(sp)
    b70c:	da400017 	ldw	r9,0(sp)
    b710:	20fef20e 	bge	r4,r3,b2dc <__alt_mem_Flash_flash_data+0xf400b2dc>
    b714:	10bffe04 	addi	r2,r2,-8
    b718:	a8a0983a 	sll	r16,r21,r2
    b71c:	002b883a 	mov	r21,zero
    b720:	003ef506 	br	b2f8 <__alt_mem_Flash_flash_data+0xf400b2f8>
    b724:	354d883a 	add	r6,r6,r21
    b728:	3549803a 	cmpltu	r4,r6,r21
    b72c:	2409883a 	add	r4,r4,r16
    b730:	2089883a 	add	r4,r4,r2
    b734:	88bfffc4 	addi	r2,r17,-1
    b738:	81000c2e 	bgeu	r16,r4,b76c <__divdf3+0x6fc>
    b73c:	20c04436 	bltu	r4,r3,b850 <__divdf3+0x7e0>
    b740:	19006f26 	beq	r3,r4,b900 <__divdf3+0x890>
    b744:	20c7c83a 	sub	r3,r4,r3
    b748:	1023883a 	mov	r17,r2
    b74c:	003f6406 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    b750:	9d7f1736 	bltu	r19,r21,b3b0 <__alt_mem_Flash_flash_data+0xf400b3b0>
    b754:	9806d07a 	srli	r3,r19,1
    b758:	880497fa 	slli	r2,r17,31
    b75c:	980c97fa 	slli	r6,r19,31
    b760:	882cd07a 	srli	r22,r17,1
    b764:	18a6b03a 	or	r19,r3,r2
    b768:	003f1406 	br	b3bc <__alt_mem_Flash_flash_data+0xf400b3bc>
    b76c:	243ff51e 	bne	r4,r16,b744 <__alt_mem_Flash_flash_data+0xf400b744>
    b770:	357ff22e 	bgeu	r6,r21,b73c <__alt_mem_Flash_flash_data+0xf400b73c>
    b774:	80c7c83a 	sub	r3,r16,r3
    b778:	1023883a 	mov	r17,r2
    b77c:	003f5806 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    b780:	1013883a 	mov	r9,r2
    b784:	003f3d06 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    b788:	1023883a 	mov	r17,r2
    b78c:	003f2506 	br	b424 <__alt_mem_Flash_flash_data+0xf400b424>
    b790:	317fe436 	bltu	r6,r5,b724 <__alt_mem_Flash_flash_data+0xf400b724>
    b794:	0007883a 	mov	r3,zero
    b798:	003f5106 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    b79c:	1c07883a 	add	r3,r3,r16
    b7a0:	993fffc4 	addi	r4,r19,-1
    b7a4:	1c000a2e 	bgeu	r3,r16,b7d0 <__divdf3+0x760>
    b7a8:	2027883a 	mov	r19,r4
    b7ac:	19ff971e 	bne	r3,r7,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b7b0:	a8bf961e 	bne	r21,r2,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b7b4:	003f9606 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    b7b8:	04ffffc4 	movi	r19,-1
    b7bc:	003f9406 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    b7c0:	100d883a 	mov	r6,r2
    b7c4:	003f6106 	br	b54c <__alt_mem_Flash_flash_data+0xf400b54c>
    b7c8:	1013883a 	mov	r9,r2
    b7cc:	003f7906 	br	b5b4 <__alt_mem_Flash_flash_data+0xf400b5b4>
    b7d0:	19c02636 	bltu	r3,r7,b86c <__divdf3+0x7fc>
    b7d4:	38c04d26 	beq	r7,r3,b90c <__divdf3+0x89c>
    b7d8:	2027883a 	mov	r19,r4
    b7dc:	003f8b06 	br	b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b7e0:	e025883a 	mov	r18,fp
    b7e4:	003f8a06 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    b7e8:	008007c4 	movi	r2,31
    b7ec:	14002a16 	blt	r2,r16,b898 <__divdf3+0x828>
    b7f0:	a5010784 	addi	r20,r20,1054
    b7f4:	8d04983a 	sll	r2,r17,r20
    b7f8:	9c06d83a 	srl	r3,r19,r16
    b7fc:	9d28983a 	sll	r20,r19,r20
    b800:	8c20d83a 	srl	r16,r17,r16
    b804:	1886b03a 	or	r3,r3,r2
    b808:	a004c03a 	cmpne	r2,r20,zero
    b80c:	1884b03a 	or	r2,r3,r2
    b810:	10c001cc 	andi	r3,r2,7
    b814:	18000726 	beq	r3,zero,b834 <__divdf3+0x7c4>
    b818:	110003cc 	andi	r4,r2,15
    b81c:	00c00104 	movi	r3,4
    b820:	20c00426 	beq	r4,r3,b834 <__divdf3+0x7c4>
    b824:	10c00104 	addi	r3,r2,4
    b828:	1885803a 	cmpltu	r2,r3,r2
    b82c:	80a1883a 	add	r16,r16,r2
    b830:	1805883a 	mov	r2,r3
    b834:	80c0202c 	andhi	r3,r16,128
    b838:	18002d26 	beq	r3,zero,b8f0 <__divdf3+0x880>
    b83c:	9180004c 	andi	r6,r18,1
    b840:	01000044 	movi	r4,1
    b844:	000b883a 	mov	r5,zero
    b848:	0027883a 	mov	r19,zero
    b84c:	003e6606 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b850:	354d883a 	add	r6,r6,r21
    b854:	356d803a 	cmpltu	r22,r6,r21
    b858:	b42d883a 	add	r22,r22,r16
    b85c:	b12d883a 	add	r22,r22,r4
    b860:	8c7fff84 	addi	r17,r17,-2
    b864:	b0c7c83a 	sub	r3,r22,r3
    b868:	003f1d06 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    b86c:	ad4b883a 	add	r5,r21,r21
    b870:	2d6b803a 	cmpltu	r21,r5,r21
    b874:	ac2b883a 	add	r21,r21,r16
    b878:	1d47883a 	add	r3,r3,r21
    b87c:	993fff84 	addi	r4,r19,-2
    b880:	282b883a 	mov	r21,r5
    b884:	003fc806 	br	b7a8 <__alt_mem_Flash_flash_data+0xf400b7a8>
    b888:	103fc41e 	bne	r2,zero,b79c <__alt_mem_Flash_flash_data+0xf400b79c>
    b88c:	002b883a 	mov	r21,zero
    b890:	a8bf5e1e 	bne	r21,r2,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b894:	003f5e06 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    b898:	00bef884 	movi	r2,-1054
    b89c:	1505c83a 	sub	r2,r2,r20
    b8a0:	00c00804 	movi	r3,32
    b8a4:	8884d83a 	srl	r2,r17,r2
    b8a8:	80c01c26 	beq	r16,r3,b91c <__divdf3+0x8ac>
    b8ac:	a0c10f84 	addi	r3,r20,1086
    b8b0:	88c6983a 	sll	r3,r17,r3
    b8b4:	1cc6b03a 	or	r3,r3,r19
    b8b8:	1806c03a 	cmpne	r3,r3,zero
    b8bc:	1884b03a 	or	r2,r3,r2
    b8c0:	140001cc 	andi	r16,r2,7
    b8c4:	8000061e 	bne	r16,zero,b8e0 <__divdf3+0x870>
    b8c8:	000b883a 	mov	r5,zero
    b8cc:	1004d0fa 	srli	r2,r2,3
    b8d0:	9180004c 	andi	r6,r18,1
    b8d4:	0009883a 	mov	r4,zero
    b8d8:	1426b03a 	or	r19,r2,r16
    b8dc:	003e4206 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>
    b8e0:	110003cc 	andi	r4,r2,15
    b8e4:	00c00104 	movi	r3,4
    b8e8:	0021883a 	mov	r16,zero
    b8ec:	20ffcd1e 	bne	r4,r3,b824 <__alt_mem_Flash_flash_data+0xf400b824>
    b8f0:	800a927a 	slli	r5,r16,9
    b8f4:	8020977a 	slli	r16,r16,29
    b8f8:	280ad33a 	srli	r5,r5,12
    b8fc:	003ff306 	br	b8cc <__alt_mem_Flash_flash_data+0xf400b8cc>
    b900:	317fd336 	bltu	r6,r5,b850 <__alt_mem_Flash_flash_data+0xf400b850>
    b904:	1023883a 	mov	r17,r2
    b908:	003fa206 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b90c:	a8bfd736 	bltu	r21,r2,b86c <__alt_mem_Flash_flash_data+0xf400b86c>
    b910:	2027883a 	mov	r19,r4
    b914:	a8bf3d1e 	bne	r21,r2,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b918:	003f3d06 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    b91c:	0007883a 	mov	r3,zero
    b920:	003fe406 	br	b8b4 <__alt_mem_Flash_flash_data+0xf400b8b4>
    b924:	00800434 	movhi	r2,16
    b928:	89400234 	orhi	r5,r17,8
    b92c:	10bfffc4 	addi	r2,r2,-1
    b930:	e00d883a 	mov	r6,fp
    b934:	288a703a 	and	r5,r5,r2
    b938:	003e8506 	br	b350 <__alt_mem_Flash_flash_data+0xf400b350>

0000b93c <__eqdf2>:
    b93c:	2804d53a 	srli	r2,r5,20
    b940:	3806d53a 	srli	r3,r7,20
    b944:	02000434 	movhi	r8,16
    b948:	423fffc4 	addi	r8,r8,-1
    b94c:	1081ffcc 	andi	r2,r2,2047
    b950:	0241ffc4 	movi	r9,2047
    b954:	2a14703a 	and	r10,r5,r8
    b958:	18c1ffcc 	andi	r3,r3,2047
    b95c:	3a10703a 	and	r8,r7,r8
    b960:	280ad7fa 	srli	r5,r5,31
    b964:	380ed7fa 	srli	r7,r7,31
    b968:	12400f26 	beq	r2,r9,b9a8 <__eqdf2+0x6c>
    b96c:	0241ffc4 	movi	r9,2047
    b970:	1a400326 	beq	r3,r9,b980 <__eqdf2+0x44>
    b974:	10c00526 	beq	r2,r3,b98c <__eqdf2+0x50>
    b978:	00800044 	movi	r2,1
    b97c:	f800283a 	ret
    b980:	4192b03a 	or	r9,r8,r6
    b984:	483ffc1e 	bne	r9,zero,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    b988:	10fffb1e 	bne	r2,r3,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    b98c:	523ffa1e 	bne	r10,r8,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    b990:	21bff91e 	bne	r4,r6,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    b994:	29c00826 	beq	r5,r7,b9b8 <__eqdf2+0x7c>
    b998:	103ff71e 	bne	r2,zero,b978 <__alt_mem_Flash_flash_data+0xf400b978>
    b99c:	5104b03a 	or	r2,r10,r4
    b9a0:	1004c03a 	cmpne	r2,r2,zero
    b9a4:	f800283a 	ret
    b9a8:	5112b03a 	or	r9,r10,r4
    b9ac:	483fef26 	beq	r9,zero,b96c <__alt_mem_Flash_flash_data+0xf400b96c>
    b9b0:	00800044 	movi	r2,1
    b9b4:	f800283a 	ret
    b9b8:	0005883a 	mov	r2,zero
    b9bc:	f800283a 	ret

0000b9c0 <__gedf2>:
    b9c0:	2804d53a 	srli	r2,r5,20
    b9c4:	3806d53a 	srli	r3,r7,20
    b9c8:	02000434 	movhi	r8,16
    b9cc:	423fffc4 	addi	r8,r8,-1
    b9d0:	0241ffc4 	movi	r9,2047
    b9d4:	1081ffcc 	andi	r2,r2,2047
    b9d8:	2a14703a 	and	r10,r5,r8
    b9dc:	1a46703a 	and	r3,r3,r9
    b9e0:	3a10703a 	and	r8,r7,r8
    b9e4:	280ad7fa 	srli	r5,r5,31
    b9e8:	380ed7fa 	srli	r7,r7,31
    b9ec:	12400b26 	beq	r2,r9,ba1c <__gedf2+0x5c>
    b9f0:	1a401626 	beq	r3,r9,ba4c <__gedf2+0x8c>
    b9f4:	10000c1e 	bne	r2,zero,ba28 <__gedf2+0x68>
    b9f8:	5112b03a 	or	r9,r10,r4
    b9fc:	4813003a 	cmpeq	r9,r9,zero
    ba00:	4817883a 	mov	r11,r9
    ba04:	18000c1e 	bne	r3,zero,ba38 <__gedf2+0x78>
    ba08:	4198b03a 	or	r12,r8,r6
    ba0c:	60000a1e 	bne	r12,zero,ba38 <__gedf2+0x78>
    ba10:	48001326 	beq	r9,zero,ba60 <__gedf2+0xa0>
    ba14:	0005883a 	mov	r2,zero
    ba18:	f800283a 	ret
    ba1c:	5112b03a 	or	r9,r10,r4
    ba20:	4800191e 	bne	r9,zero,ba88 <__gedf2+0xc8>
    ba24:	18800926 	beq	r3,r2,ba4c <__gedf2+0x8c>
    ba28:	18000b1e 	bne	r3,zero,ba58 <__gedf2+0x98>
    ba2c:	4192b03a 	or	r9,r8,r6
    ba30:	0017883a 	mov	r11,zero
    ba34:	48000a26 	beq	r9,zero,ba60 <__gedf2+0xa0>
    ba38:	39c03fcc 	andi	r7,r7,255
    ba3c:	58000726 	beq	r11,zero,ba5c <__gedf2+0x9c>
    ba40:	3800081e 	bne	r7,zero,ba64 <__gedf2+0xa4>
    ba44:	00bfffc4 	movi	r2,-1
    ba48:	f800283a 	ret
    ba4c:	4192b03a 	or	r9,r8,r6
    ba50:	48000d1e 	bne	r9,zero,ba88 <__gedf2+0xc8>
    ba54:	103fe826 	beq	r2,zero,b9f8 <__alt_mem_Flash_flash_data+0xf400b9f8>
    ba58:	39c03fcc 	andi	r7,r7,255
    ba5c:	29c00326 	beq	r5,r7,ba6c <__gedf2+0xac>
    ba60:	283ff81e 	bne	r5,zero,ba44 <__alt_mem_Flash_flash_data+0xf400ba44>
    ba64:	00800044 	movi	r2,1
    ba68:	f800283a 	ret
    ba6c:	18bffc16 	blt	r3,r2,ba60 <__alt_mem_Flash_flash_data+0xf400ba60>
    ba70:	10c00316 	blt	r2,r3,ba80 <__gedf2+0xc0>
    ba74:	42bffa36 	bltu	r8,r10,ba60 <__alt_mem_Flash_flash_data+0xf400ba60>
    ba78:	52000526 	beq	r10,r8,ba90 <__gedf2+0xd0>
    ba7c:	523fe52e 	bgeu	r10,r8,ba14 <__alt_mem_Flash_flash_data+0xf400ba14>
    ba80:	283ff026 	beq	r5,zero,ba44 <__alt_mem_Flash_flash_data+0xf400ba44>
    ba84:	003ff706 	br	ba64 <__alt_mem_Flash_flash_data+0xf400ba64>
    ba88:	00bfff84 	movi	r2,-2
    ba8c:	f800283a 	ret
    ba90:	313ff336 	bltu	r6,r4,ba60 <__alt_mem_Flash_flash_data+0xf400ba60>
    ba94:	21bfdf2e 	bgeu	r4,r6,ba14 <__alt_mem_Flash_flash_data+0xf400ba14>
    ba98:	283fea26 	beq	r5,zero,ba44 <__alt_mem_Flash_flash_data+0xf400ba44>
    ba9c:	003ff106 	br	ba64 <__alt_mem_Flash_flash_data+0xf400ba64>

0000baa0 <__ledf2>:
    baa0:	2804d53a 	srli	r2,r5,20
    baa4:	3810d53a 	srli	r8,r7,20
    baa8:	00c00434 	movhi	r3,16
    baac:	18ffffc4 	addi	r3,r3,-1
    bab0:	0241ffc4 	movi	r9,2047
    bab4:	1081ffcc 	andi	r2,r2,2047
    bab8:	28d4703a 	and	r10,r5,r3
    babc:	4250703a 	and	r8,r8,r9
    bac0:	38c6703a 	and	r3,r7,r3
    bac4:	280ad7fa 	srli	r5,r5,31
    bac8:	380ed7fa 	srli	r7,r7,31
    bacc:	12400b26 	beq	r2,r9,bafc <__ledf2+0x5c>
    bad0:	42401926 	beq	r8,r9,bb38 <__ledf2+0x98>
    bad4:	10000c1e 	bne	r2,zero,bb08 <__ledf2+0x68>
    bad8:	5112b03a 	or	r9,r10,r4
    badc:	4813003a 	cmpeq	r9,r9,zero
    bae0:	4817883a 	mov	r11,r9
    bae4:	40000f26 	beq	r8,zero,bb24 <__ledf2+0x84>
    bae8:	39c03fcc 	andi	r7,r7,255
    baec:	58001826 	beq	r11,zero,bb50 <__ledf2+0xb0>
    baf0:	38000a1e 	bne	r7,zero,bb1c <__ledf2+0x7c>
    baf4:	00bfffc4 	movi	r2,-1
    baf8:	f800283a 	ret
    bafc:	5112b03a 	or	r9,r10,r4
    bb00:	48000f1e 	bne	r9,zero,bb40 <__ledf2+0xa0>
    bb04:	40800c26 	beq	r8,r2,bb38 <__ledf2+0x98>
    bb08:	4000101e 	bne	r8,zero,bb4c <__ledf2+0xac>
    bb0c:	1992b03a 	or	r9,r3,r6
    bb10:	0017883a 	mov	r11,zero
    bb14:	483ff41e 	bne	r9,zero,bae8 <__alt_mem_Flash_flash_data+0xf400bae8>
    bb18:	283ff61e 	bne	r5,zero,baf4 <__alt_mem_Flash_flash_data+0xf400baf4>
    bb1c:	00800044 	movi	r2,1
    bb20:	f800283a 	ret
    bb24:	1998b03a 	or	r12,r3,r6
    bb28:	603fef1e 	bne	r12,zero,bae8 <__alt_mem_Flash_flash_data+0xf400bae8>
    bb2c:	483ffa26 	beq	r9,zero,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb30:	0005883a 	mov	r2,zero
    bb34:	f800283a 	ret
    bb38:	1992b03a 	or	r9,r3,r6
    bb3c:	48000226 	beq	r9,zero,bb48 <__ledf2+0xa8>
    bb40:	00800084 	movi	r2,2
    bb44:	f800283a 	ret
    bb48:	103fe326 	beq	r2,zero,bad8 <__alt_mem_Flash_flash_data+0xf400bad8>
    bb4c:	39c03fcc 	andi	r7,r7,255
    bb50:	29fff11e 	bne	r5,r7,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb54:	40bff016 	blt	r8,r2,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb58:	12000316 	blt	r2,r8,bb68 <__ledf2+0xc8>
    bb5c:	1abfee36 	bltu	r3,r10,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb60:	50c00326 	beq	r10,r3,bb70 <__ledf2+0xd0>
    bb64:	50fff22e 	bgeu	r10,r3,bb30 <__alt_mem_Flash_flash_data+0xf400bb30>
    bb68:	283fe226 	beq	r5,zero,baf4 <__alt_mem_Flash_flash_data+0xf400baf4>
    bb6c:	003feb06 	br	bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb70:	313fe936 	bltu	r6,r4,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb74:	21bfee2e 	bgeu	r4,r6,bb30 <__alt_mem_Flash_flash_data+0xf400bb30>
    bb78:	283fde26 	beq	r5,zero,baf4 <__alt_mem_Flash_flash_data+0xf400baf4>
    bb7c:	003fe706 	br	bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>

0000bb80 <__muldf3>:
    bb80:	defff204 	addi	sp,sp,-56
    bb84:	2804d53a 	srli	r2,r5,20
    bb88:	dd800a15 	stw	r22,40(sp)
    bb8c:	282cd7fa 	srli	r22,r5,31
    bb90:	dc000415 	stw	r16,16(sp)
    bb94:	04000434 	movhi	r16,16
    bb98:	df000c15 	stw	fp,48(sp)
    bb9c:	dd000815 	stw	r20,32(sp)
    bba0:	dcc00715 	stw	r19,28(sp)
    bba4:	dc800615 	stw	r18,24(sp)
    bba8:	dc400515 	stw	r17,20(sp)
    bbac:	843fffc4 	addi	r16,r16,-1
    bbb0:	dfc00d15 	stw	ra,52(sp)
    bbb4:	ddc00b15 	stw	r23,44(sp)
    bbb8:	dd400915 	stw	r21,36(sp)
    bbbc:	1501ffcc 	andi	r20,r2,2047
    bbc0:	2023883a 	mov	r17,r4
    bbc4:	2025883a 	mov	r18,r4
    bbc8:	2c20703a 	and	r16,r5,r16
    bbcc:	b027883a 	mov	r19,r22
    bbd0:	b7003fcc 	andi	fp,r22,255
    bbd4:	a0005926 	beq	r20,zero,bd3c <__muldf3+0x1bc>
    bbd8:	0081ffc4 	movi	r2,2047
    bbdc:	a0803426 	beq	r20,r2,bcb0 <__muldf3+0x130>
    bbe0:	84000434 	orhi	r16,r16,16
    bbe4:	2004d77a 	srli	r2,r4,29
    bbe8:	802090fa 	slli	r16,r16,3
    bbec:	202490fa 	slli	r18,r4,3
    bbf0:	a53f0044 	addi	r20,r20,-1023
    bbf4:	80a0b03a 	or	r16,r16,r2
    bbf8:	002b883a 	mov	r21,zero
    bbfc:	0015883a 	mov	r10,zero
    bc00:	3812d53a 	srli	r9,r7,20
    bc04:	3806d7fa 	srli	r3,r7,31
    bc08:	02000434 	movhi	r8,16
    bc0c:	423fffc4 	addi	r8,r8,-1
    bc10:	4941ffcc 	andi	r5,r9,2047
    bc14:	302f883a 	mov	r23,r6
    bc18:	3a22703a 	and	r17,r7,r8
    bc1c:	1ac03fcc 	andi	r11,r3,255
    bc20:	28006226 	beq	r5,zero,bdac <__muldf3+0x22c>
    bc24:	0081ffc4 	movi	r2,2047
    bc28:	28805a26 	beq	r5,r2,bd94 <__muldf3+0x214>
    bc2c:	8a000434 	orhi	r8,r17,16
    bc30:	3004d77a 	srli	r2,r6,29
    bc34:	401090fa 	slli	r8,r8,3
    bc38:	302e90fa 	slli	r23,r6,3
    bc3c:	297f0044 	addi	r5,r5,-1023
    bc40:	40a2b03a 	or	r17,r8,r2
    bc44:	0013883a 	mov	r9,zero
    bc48:	4d4cb03a 	or	r6,r9,r21
    bc4c:	300c90ba 	slli	r6,r6,2
    bc50:	02000074 	movhi	r8,1
    bc54:	422f1c04 	addi	r8,r8,-17296
    bc58:	320d883a 	add	r6,r6,r8
    bc5c:	31800017 	ldw	r6,0(r6)
    bc60:	a14b883a 	add	r5,r20,r5
    bc64:	1dacf03a 	xor	r22,r3,r22
    bc68:	2b000044 	addi	r12,r5,1
    bc6c:	3000683a 	jmp	r6
    bc70:	0000beac 	andhi	zero,zero,762
    bc74:	0000be98 	cmpnei	zero,zero,762
    bc78:	0000be98 	cmpnei	zero,zero,762
    bc7c:	0000be84 	movi	zero,762
    bc80:	0000bccc 	andi	zero,zero,755
    bc84:	0000bccc 	andi	zero,zero,755
    bc88:	0000be6c 	andhi	zero,zero,761
    bc8c:	0000be84 	movi	zero,762
    bc90:	0000bccc 	andi	zero,zero,755
    bc94:	0000be6c 	andhi	zero,zero,761
    bc98:	0000bccc 	andi	zero,zero,755
    bc9c:	0000be84 	movi	zero,762
    bca0:	0000bcd0 	cmplti	zero,zero,755
    bca4:	0000bcd0 	cmplti	zero,zero,755
    bca8:	0000bcd0 	cmplti	zero,zero,755
    bcac:	0000c0a8 	cmpgeui	zero,zero,770
    bcb0:	8104b03a 	or	r2,r16,r4
    bcb4:	10006a1e 	bne	r2,zero,be60 <__muldf3+0x2e0>
    bcb8:	05400204 	movi	r21,8
    bcbc:	0021883a 	mov	r16,zero
    bcc0:	0025883a 	mov	r18,zero
    bcc4:	02800084 	movi	r10,2
    bcc8:	003fcd06 	br	bc00 <__alt_mem_Flash_flash_data+0xf400bc00>
    bccc:	b039883a 	mov	fp,r22
    bcd0:	00800084 	movi	r2,2
    bcd4:	50804e1e 	bne	r10,r2,be10 <__muldf3+0x290>
    bcd8:	e4c0004c 	andi	r19,fp,1
    bcdc:	0101ffc4 	movi	r4,2047
    bce0:	0021883a 	mov	r16,zero
    bce4:	0025883a 	mov	r18,zero
    bce8:	2008953a 	slli	r4,r4,20
    bcec:	98c03fcc 	andi	r3,r19,255
    bcf0:	01400434 	movhi	r5,16
    bcf4:	297fffc4 	addi	r5,r5,-1
    bcf8:	180697fa 	slli	r3,r3,31
    bcfc:	8160703a 	and	r16,r16,r5
    bd00:	8120b03a 	or	r16,r16,r4
    bd04:	80c6b03a 	or	r3,r16,r3
    bd08:	9005883a 	mov	r2,r18
    bd0c:	dfc00d17 	ldw	ra,52(sp)
    bd10:	df000c17 	ldw	fp,48(sp)
    bd14:	ddc00b17 	ldw	r23,44(sp)
    bd18:	dd800a17 	ldw	r22,40(sp)
    bd1c:	dd400917 	ldw	r21,36(sp)
    bd20:	dd000817 	ldw	r20,32(sp)
    bd24:	dcc00717 	ldw	r19,28(sp)
    bd28:	dc800617 	ldw	r18,24(sp)
    bd2c:	dc400517 	ldw	r17,20(sp)
    bd30:	dc000417 	ldw	r16,16(sp)
    bd34:	dec00e04 	addi	sp,sp,56
    bd38:	f800283a 	ret
    bd3c:	8104b03a 	or	r2,r16,r4
    bd40:	10004226 	beq	r2,zero,be4c <__muldf3+0x2cc>
    bd44:	8000f926 	beq	r16,zero,c12c <__muldf3+0x5ac>
    bd48:	8009883a 	mov	r4,r16
    bd4c:	d9800315 	stw	r6,12(sp)
    bd50:	d9c00015 	stw	r7,0(sp)
    bd54:	000cd700 	call	cd70 <__clzsi2>
    bd58:	d9800317 	ldw	r6,12(sp)
    bd5c:	d9c00017 	ldw	r7,0(sp)
    bd60:	1007883a 	mov	r3,r2
    bd64:	01000a04 	movi	r4,40
    bd68:	18bffe04 	addi	r2,r3,-8
    bd6c:	20c9c83a 	sub	r4,r4,r3
    bd70:	80a0983a 	sll	r16,r16,r2
    bd74:	8908d83a 	srl	r4,r17,r4
    bd78:	88a4983a 	sll	r18,r17,r2
    bd7c:	2420b03a 	or	r16,r4,r16
    bd80:	017f0344 	movi	r5,-1011
    bd84:	28e9c83a 	sub	r20,r5,r3
    bd88:	002b883a 	mov	r21,zero
    bd8c:	0015883a 	mov	r10,zero
    bd90:	003f9b06 	br	bc00 <__alt_mem_Flash_flash_data+0xf400bc00>
    bd94:	8984b03a 	or	r2,r17,r6
    bd98:	10002a1e 	bne	r2,zero,be44 <__muldf3+0x2c4>
    bd9c:	0023883a 	mov	r17,zero
    bda0:	002f883a 	mov	r23,zero
    bda4:	02400084 	movi	r9,2
    bda8:	003fa706 	br	bc48 <__alt_mem_Flash_flash_data+0xf400bc48>
    bdac:	8984b03a 	or	r2,r17,r6
    bdb0:	10002026 	beq	r2,zero,be34 <__muldf3+0x2b4>
    bdb4:	8800cc26 	beq	r17,zero,c0e8 <__muldf3+0x568>
    bdb8:	8809883a 	mov	r4,r17
    bdbc:	d8c00215 	stw	r3,8(sp)
    bdc0:	d9800315 	stw	r6,12(sp)
    bdc4:	da800015 	stw	r10,0(sp)
    bdc8:	dac00115 	stw	r11,4(sp)
    bdcc:	000cd700 	call	cd70 <__clzsi2>
    bdd0:	d8c00217 	ldw	r3,8(sp)
    bdd4:	d9800317 	ldw	r6,12(sp)
    bdd8:	da800017 	ldw	r10,0(sp)
    bddc:	dac00117 	ldw	r11,4(sp)
    bde0:	1009883a 	mov	r4,r2
    bde4:	01400a04 	movi	r5,40
    bde8:	25fffe04 	addi	r23,r4,-8
    bdec:	290bc83a 	sub	r5,r5,r4
    bdf0:	8dd0983a 	sll	r8,r17,r23
    bdf4:	314ad83a 	srl	r5,r6,r5
    bdf8:	35ee983a 	sll	r23,r6,r23
    bdfc:	2a22b03a 	or	r17,r5,r8
    be00:	017f0344 	movi	r5,-1011
    be04:	290bc83a 	sub	r5,r5,r4
    be08:	0013883a 	mov	r9,zero
    be0c:	003f8e06 	br	bc48 <__alt_mem_Flash_flash_data+0xf400bc48>
    be10:	008000c4 	movi	r2,3
    be14:	50811d26 	beq	r10,r2,c28c <__muldf3+0x70c>
    be18:	00800044 	movi	r2,1
    be1c:	5080e01e 	bne	r10,r2,c1a0 <__muldf3+0x620>
    be20:	e0a6703a 	and	r19,fp,r2
    be24:	0009883a 	mov	r4,zero
    be28:	0021883a 	mov	r16,zero
    be2c:	0025883a 	mov	r18,zero
    be30:	003fad06 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    be34:	0023883a 	mov	r17,zero
    be38:	002f883a 	mov	r23,zero
    be3c:	02400044 	movi	r9,1
    be40:	003f8106 	br	bc48 <__alt_mem_Flash_flash_data+0xf400bc48>
    be44:	024000c4 	movi	r9,3
    be48:	003f7f06 	br	bc48 <__alt_mem_Flash_flash_data+0xf400bc48>
    be4c:	05400104 	movi	r21,4
    be50:	0021883a 	mov	r16,zero
    be54:	0025883a 	mov	r18,zero
    be58:	02800044 	movi	r10,1
    be5c:	003f6806 	br	bc00 <__alt_mem_Flash_flash_data+0xf400bc00>
    be60:	05400304 	movi	r21,12
    be64:	028000c4 	movi	r10,3
    be68:	003f6506 	br	bc00 <__alt_mem_Flash_flash_data+0xf400bc00>
    be6c:	04000434 	movhi	r16,16
    be70:	0027883a 	mov	r19,zero
    be74:	843fffc4 	addi	r16,r16,-1
    be78:	04bfffc4 	movi	r18,-1
    be7c:	0101ffc4 	movi	r4,2047
    be80:	003f9906 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    be84:	8821883a 	mov	r16,r17
    be88:	b825883a 	mov	r18,r23
    be8c:	5839883a 	mov	fp,r11
    be90:	4815883a 	mov	r10,r9
    be94:	003f8e06 	br	bcd0 <__alt_mem_Flash_flash_data+0xf400bcd0>
    be98:	8821883a 	mov	r16,r17
    be9c:	b825883a 	mov	r18,r23
    bea0:	b039883a 	mov	fp,r22
    bea4:	4815883a 	mov	r10,r9
    bea8:	003f8906 	br	bcd0 <__alt_mem_Flash_flash_data+0xf400bcd0>
    beac:	b80cd43a 	srli	r6,r23,16
    beb0:	9006d43a 	srli	r3,r18,16
    beb4:	90bfffcc 	andi	r2,r18,65535
    beb8:	bdffffcc 	andi	r23,r23,65535
    bebc:	b891383a 	mul	r8,r23,r2
    bec0:	b8c9383a 	mul	r4,r23,r3
    bec4:	309b383a 	mul	r13,r6,r2
    bec8:	400ed43a 	srli	r7,r8,16
    becc:	30df383a 	mul	r15,r6,r3
    bed0:	235b883a 	add	r13,r4,r13
    bed4:	69db883a 	add	r13,r13,r7
    bed8:	6900022e 	bgeu	r13,r4,bee4 <__muldf3+0x364>
    bedc:	01000074 	movhi	r4,1
    bee0:	791f883a 	add	r15,r15,r4
    bee4:	8828d43a 	srli	r20,r17,16
    bee8:	8c7fffcc 	andi	r17,r17,65535
    beec:	888f383a 	mul	r7,r17,r2
    bef0:	88d3383a 	mul	r9,r17,r3
    bef4:	a0a5383a 	mul	r18,r20,r2
    bef8:	3816d43a 	srli	r11,r7,16
    befc:	6814943a 	slli	r10,r13,16
    bf00:	4ca5883a 	add	r18,r9,r18
    bf04:	423fffcc 	andi	r8,r8,65535
    bf08:	92e5883a 	add	r18,r18,r11
    bf0c:	6808d43a 	srli	r4,r13,16
    bf10:	5215883a 	add	r10,r10,r8
    bf14:	a0c7383a 	mul	r3,r20,r3
    bf18:	9240022e 	bgeu	r18,r9,bf24 <__muldf3+0x3a4>
    bf1c:	00800074 	movhi	r2,1
    bf20:	1887883a 	add	r3,r3,r2
    bf24:	802ad43a 	srli	r21,r16,16
    bf28:	80bfffcc 	andi	r2,r16,65535
    bf2c:	b893383a 	mul	r9,r23,r2
    bf30:	3091383a 	mul	r8,r6,r2
    bf34:	bd6f383a 	mul	r23,r23,r21
    bf38:	9026943a 	slli	r19,r18,16
    bf3c:	481ad43a 	srli	r13,r9,16
    bf40:	9024d43a 	srli	r18,r18,16
    bf44:	39ffffcc 	andi	r7,r7,65535
    bf48:	ba11883a 	add	r8,r23,r8
    bf4c:	99e7883a 	add	r19,r19,r7
    bf50:	4351883a 	add	r8,r8,r13
    bf54:	1c97883a 	add	r11,r3,r18
    bf58:	354d383a 	mul	r6,r6,r21
    bf5c:	9925883a 	add	r18,r19,r4
    bf60:	45c0022e 	bgeu	r8,r23,bf6c <__muldf3+0x3ec>
    bf64:	00c00074 	movhi	r3,1
    bf68:	30cd883a 	add	r6,r6,r3
    bf6c:	8889383a 	mul	r4,r17,r2
    bf70:	8d63383a 	mul	r17,r17,r21
    bf74:	a085383a 	mul	r2,r20,r2
    bf78:	200ed43a 	srli	r7,r4,16
    bf7c:	401cd43a 	srli	r14,r8,16
    bf80:	401a943a 	slli	r13,r8,16
    bf84:	8885883a 	add	r2,r17,r2
    bf88:	4a3fffcc 	andi	r8,r9,65535
    bf8c:	11c5883a 	add	r2,r2,r7
    bf90:	339d883a 	add	r14,r6,r14
    bf94:	6a11883a 	add	r8,r13,r8
    bf98:	a561383a 	mul	r16,r20,r21
    bf9c:	1440022e 	bgeu	r2,r17,bfa8 <__muldf3+0x428>
    bfa0:	00c00074 	movhi	r3,1
    bfa4:	80e1883a 	add	r16,r16,r3
    bfa8:	1006943a 	slli	r3,r2,16
    bfac:	213fffcc 	andi	r4,r4,65535
    bfb0:	93db883a 	add	r13,r18,r15
    bfb4:	1909883a 	add	r4,r3,r4
    bfb8:	22c7883a 	add	r3,r4,r11
    bfbc:	6cd3803a 	cmpltu	r9,r13,r19
    bfc0:	6a09883a 	add	r4,r13,r8
    bfc4:	1a5b883a 	add	r13,r3,r9
    bfc8:	2211803a 	cmpltu	r8,r4,r8
    bfcc:	734d883a 	add	r6,r14,r13
    bfd0:	100ed43a 	srli	r7,r2,16
    bfd4:	6a53803a 	cmpltu	r9,r13,r9
    bfd8:	3205883a 	add	r2,r6,r8
    bfdc:	1ac7803a 	cmpltu	r3,r3,r11
    bfe0:	1211803a 	cmpltu	r8,r2,r8
    bfe4:	48c6b03a 	or	r3,r9,r3
    bfe8:	338d803a 	cmpltu	r6,r6,r14
    bfec:	19c7883a 	add	r3,r3,r7
    bff0:	418cb03a 	or	r6,r8,r6
    bff4:	1987883a 	add	r3,r3,r6
    bff8:	2024927a 	slli	r18,r4,9
    bffc:	1c07883a 	add	r3,r3,r16
    c000:	1806927a 	slli	r3,r3,9
    c004:	1020d5fa 	srli	r16,r2,23
    c008:	2008d5fa 	srli	r4,r4,23
    c00c:	9294b03a 	or	r10,r18,r10
    c010:	1004927a 	slli	r2,r2,9
    c014:	5024c03a 	cmpne	r18,r10,zero
    c018:	1c20b03a 	or	r16,r3,r16
    c01c:	9108b03a 	or	r4,r18,r4
    c020:	80c0402c 	andhi	r3,r16,256
    c024:	20a4b03a 	or	r18,r4,r2
    c028:	18000726 	beq	r3,zero,c048 <__muldf3+0x4c8>
    c02c:	9006d07a 	srli	r3,r18,1
    c030:	800897fa 	slli	r4,r16,31
    c034:	9080004c 	andi	r2,r18,1
    c038:	8020d07a 	srli	r16,r16,1
    c03c:	10c4b03a 	or	r2,r2,r3
    c040:	1124b03a 	or	r18,r2,r4
    c044:	600b883a 	mov	r5,r12
    c048:	2900ffc4 	addi	r4,r5,1023
    c04c:	01004b0e 	bge	zero,r4,c17c <__muldf3+0x5fc>
    c050:	908001cc 	andi	r2,r18,7
    c054:	10000726 	beq	r2,zero,c074 <__muldf3+0x4f4>
    c058:	90c003cc 	andi	r3,r18,15
    c05c:	00800104 	movi	r2,4
    c060:	18800426 	beq	r3,r2,c074 <__muldf3+0x4f4>
    c064:	9087883a 	add	r3,r18,r2
    c068:	1c85803a 	cmpltu	r2,r3,r18
    c06c:	80a1883a 	add	r16,r16,r2
    c070:	1825883a 	mov	r18,r3
    c074:	8080402c 	andhi	r2,r16,256
    c078:	10000426 	beq	r2,zero,c08c <__muldf3+0x50c>
    c07c:	00bfc034 	movhi	r2,65280
    c080:	10bfffc4 	addi	r2,r2,-1
    c084:	29010004 	addi	r4,r5,1024
    c088:	80a0703a 	and	r16,r16,r2
    c08c:	0081ff84 	movi	r2,2046
    c090:	1100320e 	bge	r2,r4,c15c <__muldf3+0x5dc>
    c094:	b4c0004c 	andi	r19,r22,1
    c098:	0101ffc4 	movi	r4,2047
    c09c:	0021883a 	mov	r16,zero
    c0a0:	0025883a 	mov	r18,zero
    c0a4:	003f1006 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    c0a8:	8080022c 	andhi	r2,r16,8
    c0ac:	10000926 	beq	r2,zero,c0d4 <__muldf3+0x554>
    c0b0:	8880022c 	andhi	r2,r17,8
    c0b4:	1000071e 	bne	r2,zero,c0d4 <__muldf3+0x554>
    c0b8:	00800434 	movhi	r2,16
    c0bc:	8c000234 	orhi	r16,r17,8
    c0c0:	10bfffc4 	addi	r2,r2,-1
    c0c4:	1827883a 	mov	r19,r3
    c0c8:	80a0703a 	and	r16,r16,r2
    c0cc:	b825883a 	mov	r18,r23
    c0d0:	003f6a06 	br	be7c <__alt_mem_Flash_flash_data+0xf400be7c>
    c0d4:	00800434 	movhi	r2,16
    c0d8:	84000234 	orhi	r16,r16,8
    c0dc:	10bfffc4 	addi	r2,r2,-1
    c0e0:	80a0703a 	and	r16,r16,r2
    c0e4:	003f6506 	br	be7c <__alt_mem_Flash_flash_data+0xf400be7c>
    c0e8:	3009883a 	mov	r4,r6
    c0ec:	d8c00215 	stw	r3,8(sp)
    c0f0:	d9800315 	stw	r6,12(sp)
    c0f4:	da800015 	stw	r10,0(sp)
    c0f8:	dac00115 	stw	r11,4(sp)
    c0fc:	000cd700 	call	cd70 <__clzsi2>
    c100:	11000804 	addi	r4,r2,32
    c104:	014009c4 	movi	r5,39
    c108:	d8c00217 	ldw	r3,8(sp)
    c10c:	d9800317 	ldw	r6,12(sp)
    c110:	da800017 	ldw	r10,0(sp)
    c114:	dac00117 	ldw	r11,4(sp)
    c118:	293f320e 	bge	r5,r4,bde4 <__alt_mem_Flash_flash_data+0xf400bde4>
    c11c:	10bffe04 	addi	r2,r2,-8
    c120:	b8a2983a 	sll	r17,r23,r2
    c124:	002f883a 	mov	r23,zero
    c128:	003f3506 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    c12c:	d9800315 	stw	r6,12(sp)
    c130:	d9c00015 	stw	r7,0(sp)
    c134:	000cd700 	call	cd70 <__clzsi2>
    c138:	10c00804 	addi	r3,r2,32
    c13c:	010009c4 	movi	r4,39
    c140:	d9800317 	ldw	r6,12(sp)
    c144:	d9c00017 	ldw	r7,0(sp)
    c148:	20ff060e 	bge	r4,r3,bd64 <__alt_mem_Flash_flash_data+0xf400bd64>
    c14c:	10bffe04 	addi	r2,r2,-8
    c150:	88a0983a 	sll	r16,r17,r2
    c154:	0025883a 	mov	r18,zero
    c158:	003f0906 	br	bd80 <__alt_mem_Flash_flash_data+0xf400bd80>
    c15c:	9004d0fa 	srli	r2,r18,3
    c160:	8024977a 	slli	r18,r16,29
    c164:	8020927a 	slli	r16,r16,9
    c168:	2101ffcc 	andi	r4,r4,2047
    c16c:	90a4b03a 	or	r18,r18,r2
    c170:	8020d33a 	srli	r16,r16,12
    c174:	b4c0004c 	andi	r19,r22,1
    c178:	003edb06 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    c17c:	00ff0084 	movi	r3,-1022
    c180:	1947c83a 	sub	r3,r3,r5
    c184:	00800e04 	movi	r2,56
    c188:	10c0080e 	bge	r2,r3,c1ac <__muldf3+0x62c>
    c18c:	b4c0004c 	andi	r19,r22,1
    c190:	0009883a 	mov	r4,zero
    c194:	0021883a 	mov	r16,zero
    c198:	0025883a 	mov	r18,zero
    c19c:	003ed206 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    c1a0:	600b883a 	mov	r5,r12
    c1a4:	e02d883a 	mov	r22,fp
    c1a8:	003fa706 	br	c048 <__alt_mem_Flash_flash_data+0xf400c048>
    c1ac:	008007c4 	movi	r2,31
    c1b0:	10c01816 	blt	r2,r3,c214 <__muldf3+0x694>
    c1b4:	29410784 	addi	r5,r5,1054
    c1b8:	8144983a 	sll	r2,r16,r5
    c1bc:	90c8d83a 	srl	r4,r18,r3
    c1c0:	914a983a 	sll	r5,r18,r5
    c1c4:	80c6d83a 	srl	r3,r16,r3
    c1c8:	2088b03a 	or	r4,r4,r2
    c1cc:	2804c03a 	cmpne	r2,r5,zero
    c1d0:	2084b03a 	or	r2,r4,r2
    c1d4:	110001cc 	andi	r4,r2,7
    c1d8:	20000726 	beq	r4,zero,c1f8 <__muldf3+0x678>
    c1dc:	114003cc 	andi	r5,r2,15
    c1e0:	01000104 	movi	r4,4
    c1e4:	29000426 	beq	r5,r4,c1f8 <__muldf3+0x678>
    c1e8:	11000104 	addi	r4,r2,4
    c1ec:	2085803a 	cmpltu	r2,r4,r2
    c1f0:	1887883a 	add	r3,r3,r2
    c1f4:	2005883a 	mov	r2,r4
    c1f8:	1900202c 	andhi	r4,r3,128
    c1fc:	20001826 	beq	r4,zero,c260 <__muldf3+0x6e0>
    c200:	b4c0004c 	andi	r19,r22,1
    c204:	01000044 	movi	r4,1
    c208:	0021883a 	mov	r16,zero
    c20c:	0025883a 	mov	r18,zero
    c210:	003eb506 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    c214:	00bef884 	movi	r2,-1054
    c218:	1145c83a 	sub	r2,r2,r5
    c21c:	8088d83a 	srl	r4,r16,r2
    c220:	00800804 	movi	r2,32
    c224:	18801726 	beq	r3,r2,c284 <__muldf3+0x704>
    c228:	28810f84 	addi	r2,r5,1086
    c22c:	8084983a 	sll	r2,r16,r2
    c230:	1484b03a 	or	r2,r2,r18
    c234:	1004c03a 	cmpne	r2,r2,zero
    c238:	1104b03a 	or	r2,r2,r4
    c23c:	10c001cc 	andi	r3,r2,7
    c240:	18000b1e 	bne	r3,zero,c270 <__muldf3+0x6f0>
    c244:	0021883a 	mov	r16,zero
    c248:	1004d0fa 	srli	r2,r2,3
    c24c:	b4c0004c 	andi	r19,r22,1
    c250:	0009883a 	mov	r4,zero
    c254:	10e4b03a 	or	r18,r2,r3
    c258:	003ea306 	br	bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    c25c:	0007883a 	mov	r3,zero
    c260:	1820927a 	slli	r16,r3,9
    c264:	1806977a 	slli	r3,r3,29
    c268:	8020d33a 	srli	r16,r16,12
    c26c:	003ff606 	br	c248 <__alt_mem_Flash_flash_data+0xf400c248>
    c270:	110003cc 	andi	r4,r2,15
    c274:	00c00104 	movi	r3,4
    c278:	20fff826 	beq	r4,r3,c25c <__alt_mem_Flash_flash_data+0xf400c25c>
    c27c:	0007883a 	mov	r3,zero
    c280:	003fd906 	br	c1e8 <__alt_mem_Flash_flash_data+0xf400c1e8>
    c284:	0005883a 	mov	r2,zero
    c288:	003fe906 	br	c230 <__alt_mem_Flash_flash_data+0xf400c230>
    c28c:	00800434 	movhi	r2,16
    c290:	84000234 	orhi	r16,r16,8
    c294:	10bfffc4 	addi	r2,r2,-1
    c298:	e4c0004c 	andi	r19,fp,1
    c29c:	80a0703a 	and	r16,r16,r2
    c2a0:	003ef606 	br	be7c <__alt_mem_Flash_flash_data+0xf400be7c>

0000c2a4 <__subdf3>:
    c2a4:	00c00434 	movhi	r3,16
    c2a8:	18ffffc4 	addi	r3,r3,-1
    c2ac:	defffb04 	addi	sp,sp,-20
    c2b0:	28d2703a 	and	r9,r5,r3
    c2b4:	3814d53a 	srli	r10,r7,20
    c2b8:	38c6703a 	and	r3,r7,r3
    c2bc:	3004d77a 	srli	r2,r6,29
    c2c0:	dc800215 	stw	r18,8(sp)
    c2c4:	dc000015 	stw	r16,0(sp)
    c2c8:	2824d7fa 	srli	r18,r5,31
    c2cc:	2820d53a 	srli	r16,r5,20
    c2d0:	481290fa 	slli	r9,r9,3
    c2d4:	200ad77a 	srli	r5,r4,29
    c2d8:	180690fa 	slli	r3,r3,3
    c2dc:	dc400115 	stw	r17,4(sp)
    c2e0:	dfc00415 	stw	ra,16(sp)
    c2e4:	202290fa 	slli	r17,r4,3
    c2e8:	dcc00315 	stw	r19,12(sp)
    c2ec:	5281ffcc 	andi	r10,r10,2047
    c2f0:	0101ffc4 	movi	r4,2047
    c2f4:	9011883a 	mov	r8,r18
    c2f8:	8401ffcc 	andi	r16,r16,2047
    c2fc:	94803fcc 	andi	r18,r18,255
    c300:	494ab03a 	or	r5,r9,r5
    c304:	380ed7fa 	srli	r7,r7,31
    c308:	1886b03a 	or	r3,r3,r2
    c30c:	300c90fa 	slli	r6,r6,3
    c310:	51009026 	beq	r10,r4,c554 <__subdf3+0x2b0>
    c314:	39c0005c 	xori	r7,r7,1
    c318:	8285c83a 	sub	r2,r16,r10
    c31c:	91c06f26 	beq	r18,r7,c4dc <__subdf3+0x238>
    c320:	0080b10e 	bge	zero,r2,c5e8 <__subdf3+0x344>
    c324:	50002a1e 	bne	r10,zero,c3d0 <__subdf3+0x12c>
    c328:	1988b03a 	or	r4,r3,r6
    c32c:	2000941e 	bne	r4,zero,c580 <__subdf3+0x2dc>
    c330:	888001cc 	andi	r2,r17,7
    c334:	10005b26 	beq	r2,zero,c4a4 <__subdf3+0x200>
    c338:	88c003cc 	andi	r3,r17,15
    c33c:	00800104 	movi	r2,4
    c340:	18805826 	beq	r3,r2,c4a4 <__subdf3+0x200>
    c344:	88c00104 	addi	r3,r17,4
    c348:	1c63803a 	cmpltu	r17,r3,r17
    c34c:	2c4b883a 	add	r5,r5,r17
    c350:	2880202c 	andhi	r2,r5,128
    c354:	9200004c 	andi	r8,r18,1
    c358:	1823883a 	mov	r17,r3
    c35c:	10005426 	beq	r2,zero,c4b0 <__subdf3+0x20c>
    c360:	84000044 	addi	r16,r16,1
    c364:	0081ffc4 	movi	r2,2047
    c368:	8080bf26 	beq	r16,r2,c668 <__subdf3+0x3c4>
    c36c:	013fe034 	movhi	r4,65408
    c370:	213fffc4 	addi	r4,r4,-1
    c374:	290a703a 	and	r5,r5,r4
    c378:	2804977a 	slli	r2,r5,29
    c37c:	280a927a 	slli	r5,r5,9
    c380:	8822d0fa 	srli	r17,r17,3
    c384:	8401ffcc 	andi	r16,r16,2047
    c388:	2808d33a 	srli	r4,r5,12
    c38c:	1444b03a 	or	r2,r2,r17
    c390:	8401ffcc 	andi	r16,r16,2047
    c394:	800a953a 	slli	r5,r16,20
    c398:	40c03fcc 	andi	r3,r8,255
    c39c:	04000434 	movhi	r16,16
    c3a0:	180697fa 	slli	r3,r3,31
    c3a4:	843fffc4 	addi	r16,r16,-1
    c3a8:	2420703a 	and	r16,r4,r16
    c3ac:	8160b03a 	or	r16,r16,r5
    c3b0:	80c6b03a 	or	r3,r16,r3
    c3b4:	dfc00417 	ldw	ra,16(sp)
    c3b8:	dcc00317 	ldw	r19,12(sp)
    c3bc:	dc800217 	ldw	r18,8(sp)
    c3c0:	dc400117 	ldw	r17,4(sp)
    c3c4:	dc000017 	ldw	r16,0(sp)
    c3c8:	dec00504 	addi	sp,sp,20
    c3cc:	f800283a 	ret
    c3d0:	0101ffc4 	movi	r4,2047
    c3d4:	813fd626 	beq	r16,r4,c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c3d8:	18c02034 	orhi	r3,r3,128
    c3dc:	01000e04 	movi	r4,56
    c3e0:	2080a416 	blt	r4,r2,c674 <__subdf3+0x3d0>
    c3e4:	010007c4 	movi	r4,31
    c3e8:	2080c716 	blt	r4,r2,c708 <__subdf3+0x464>
    c3ec:	01000804 	movi	r4,32
    c3f0:	2089c83a 	sub	r4,r4,r2
    c3f4:	1910983a 	sll	r8,r3,r4
    c3f8:	308ed83a 	srl	r7,r6,r2
    c3fc:	3108983a 	sll	r4,r6,r4
    c400:	1884d83a 	srl	r2,r3,r2
    c404:	41ccb03a 	or	r6,r8,r7
    c408:	2008c03a 	cmpne	r4,r4,zero
    c40c:	310cb03a 	or	r6,r6,r4
    c410:	898dc83a 	sub	r6,r17,r6
    c414:	89a3803a 	cmpltu	r17,r17,r6
    c418:	288bc83a 	sub	r5,r5,r2
    c41c:	2c4bc83a 	sub	r5,r5,r17
    c420:	3023883a 	mov	r17,r6
    c424:	2880202c 	andhi	r2,r5,128
    c428:	10006b26 	beq	r2,zero,c5d8 <__subdf3+0x334>
    c42c:	04c02034 	movhi	r19,128
    c430:	9cffffc4 	addi	r19,r19,-1
    c434:	2ce6703a 	and	r19,r5,r19
    c438:	98007c26 	beq	r19,zero,c62c <__subdf3+0x388>
    c43c:	9809883a 	mov	r4,r19
    c440:	000cd700 	call	cd70 <__clzsi2>
    c444:	10fffe04 	addi	r3,r2,-8
    c448:	010007c4 	movi	r4,31
    c44c:	20c07d16 	blt	r4,r3,c644 <__subdf3+0x3a0>
    c450:	01400a04 	movi	r5,40
    c454:	2885c83a 	sub	r2,r5,r2
    c458:	888ad83a 	srl	r5,r17,r2
    c45c:	98e6983a 	sll	r19,r19,r3
    c460:	88e2983a 	sll	r17,r17,r3
    c464:	2ce6b03a 	or	r19,r5,r19
    c468:	1c007a16 	blt	r3,r16,c654 <__subdf3+0x3b0>
    c46c:	1c21c83a 	sub	r16,r3,r16
    c470:	81400044 	addi	r5,r16,1
    c474:	00c007c4 	movi	r3,31
    c478:	19409616 	blt	r3,r5,c6d4 <__subdf3+0x430>
    c47c:	1c21c83a 	sub	r16,r3,r16
    c480:	8c08983a 	sll	r4,r17,r16
    c484:	8946d83a 	srl	r3,r17,r5
    c488:	9c20983a 	sll	r16,r19,r16
    c48c:	2008c03a 	cmpne	r4,r4,zero
    c490:	994ad83a 	srl	r5,r19,r5
    c494:	1c06b03a 	or	r3,r3,r16
    c498:	1922b03a 	or	r17,r3,r4
    c49c:	0021883a 	mov	r16,zero
    c4a0:	003fa306 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c4a4:	2880202c 	andhi	r2,r5,128
    c4a8:	9200004c 	andi	r8,r18,1
    c4ac:	103fac1e 	bne	r2,zero,c360 <__alt_mem_Flash_flash_data+0xf400c360>
    c4b0:	2804977a 	slli	r2,r5,29
    c4b4:	8822d0fa 	srli	r17,r17,3
    c4b8:	00c1ffc4 	movi	r3,2047
    c4bc:	280ad0fa 	srli	r5,r5,3
    c4c0:	1444b03a 	or	r2,r2,r17
    c4c4:	80c02726 	beq	r16,r3,c564 <__subdf3+0x2c0>
    c4c8:	01000434 	movhi	r4,16
    c4cc:	213fffc4 	addi	r4,r4,-1
    c4d0:	80e0703a 	and	r16,r16,r3
    c4d4:	2908703a 	and	r4,r5,r4
    c4d8:	003fad06 	br	c390 <__alt_mem_Flash_flash_data+0xf400c390>
    c4dc:	0080690e 	bge	zero,r2,c684 <__subdf3+0x3e0>
    c4e0:	50002f26 	beq	r10,zero,c5a0 <__subdf3+0x2fc>
    c4e4:	0101ffc4 	movi	r4,2047
    c4e8:	813f9126 	beq	r16,r4,c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c4ec:	18c02034 	orhi	r3,r3,128
    c4f0:	01000e04 	movi	r4,56
    c4f4:	2080b00e 	bge	r4,r2,c7b8 <__subdf3+0x514>
    c4f8:	198cb03a 	or	r6,r3,r6
    c4fc:	300ec03a 	cmpne	r7,r6,zero
    c500:	0005883a 	mov	r2,zero
    c504:	3c4f883a 	add	r7,r7,r17
    c508:	3c63803a 	cmpltu	r17,r7,r17
    c50c:	114b883a 	add	r5,r2,r5
    c510:	2c4b883a 	add	r5,r5,r17
    c514:	3823883a 	mov	r17,r7
    c518:	2880202c 	andhi	r2,r5,128
    c51c:	10002e26 	beq	r2,zero,c5d8 <__subdf3+0x334>
    c520:	84000044 	addi	r16,r16,1
    c524:	0081ffc4 	movi	r2,2047
    c528:	8080de26 	beq	r16,r2,c8a4 <__subdf3+0x600>
    c52c:	00bfe034 	movhi	r2,65408
    c530:	10bfffc4 	addi	r2,r2,-1
    c534:	288a703a 	and	r5,r5,r2
    c538:	880cd07a 	srli	r6,r17,1
    c53c:	280897fa 	slli	r4,r5,31
    c540:	88c0004c 	andi	r3,r17,1
    c544:	30e2b03a 	or	r17,r6,r3
    c548:	280ad07a 	srli	r5,r5,1
    c54c:	8922b03a 	or	r17,r17,r4
    c550:	003f7706 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c554:	1984b03a 	or	r2,r3,r6
    c558:	103f6e26 	beq	r2,zero,c314 <__alt_mem_Flash_flash_data+0xf400c314>
    c55c:	39c03fcc 	andi	r7,r7,255
    c560:	003f6d06 	br	c318 <__alt_mem_Flash_flash_data+0xf400c318>
    c564:	1146b03a 	or	r3,r2,r5
    c568:	18003f26 	beq	r3,zero,c668 <__subdf3+0x3c4>
    c56c:	00c00434 	movhi	r3,16
    c570:	29000234 	orhi	r4,r5,8
    c574:	18ffffc4 	addi	r3,r3,-1
    c578:	20c8703a 	and	r4,r4,r3
    c57c:	003f8406 	br	c390 <__alt_mem_Flash_flash_data+0xf400c390>
    c580:	10bfffc4 	addi	r2,r2,-1
    c584:	1000501e 	bne	r2,zero,c6c8 <__subdf3+0x424>
    c588:	898fc83a 	sub	r7,r17,r6
    c58c:	89e3803a 	cmpltu	r17,r17,r7
    c590:	28cbc83a 	sub	r5,r5,r3
    c594:	2c4bc83a 	sub	r5,r5,r17
    c598:	3823883a 	mov	r17,r7
    c59c:	003fa106 	br	c424 <__alt_mem_Flash_flash_data+0xf400c424>
    c5a0:	1988b03a 	or	r4,r3,r6
    c5a4:	203f6226 	beq	r4,zero,c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c5a8:	10bfffc4 	addi	r2,r2,-1
    c5ac:	10009b1e 	bne	r2,zero,c81c <__subdf3+0x578>
    c5b0:	344d883a 	add	r6,r6,r17
    c5b4:	3463803a 	cmpltu	r17,r6,r17
    c5b8:	194b883a 	add	r5,r3,r5
    c5bc:	2c4b883a 	add	r5,r5,r17
    c5c0:	3023883a 	mov	r17,r6
    c5c4:	003fd406 	br	c518 <__alt_mem_Flash_flash_data+0xf400c518>
    c5c8:	1106b03a 	or	r3,r2,r4
    c5cc:	1800b426 	beq	r3,zero,c8a0 <__subdf3+0x5fc>
    c5d0:	100b883a 	mov	r5,r2
    c5d4:	2023883a 	mov	r17,r4
    c5d8:	888001cc 	andi	r2,r17,7
    c5dc:	103f561e 	bne	r2,zero,c338 <__alt_mem_Flash_flash_data+0xf400c338>
    c5e0:	9200004c 	andi	r8,r18,1
    c5e4:	003fb206 	br	c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    c5e8:	1000531e 	bne	r2,zero,c738 <__subdf3+0x494>
    c5ec:	80800044 	addi	r2,r16,1
    c5f0:	1081ffcc 	andi	r2,r2,2047
    c5f4:	01000044 	movi	r4,1
    c5f8:	2080a00e 	bge	r4,r2,c87c <__subdf3+0x5d8>
    c5fc:	8985c83a 	sub	r2,r17,r6
    c600:	8889803a 	cmpltu	r4,r17,r2
    c604:	28e7c83a 	sub	r19,r5,r3
    c608:	9927c83a 	sub	r19,r19,r4
    c60c:	9900202c 	andhi	r4,r19,128
    c610:	20006226 	beq	r4,zero,c79c <__subdf3+0x4f8>
    c614:	3463c83a 	sub	r17,r6,r17
    c618:	194bc83a 	sub	r5,r3,r5
    c61c:	344d803a 	cmpltu	r6,r6,r17
    c620:	29a7c83a 	sub	r19,r5,r6
    c624:	3825883a 	mov	r18,r7
    c628:	983f841e 	bne	r19,zero,c43c <__alt_mem_Flash_flash_data+0xf400c43c>
    c62c:	8809883a 	mov	r4,r17
    c630:	000cd700 	call	cd70 <__clzsi2>
    c634:	10800804 	addi	r2,r2,32
    c638:	10fffe04 	addi	r3,r2,-8
    c63c:	010007c4 	movi	r4,31
    c640:	20ff830e 	bge	r4,r3,c450 <__alt_mem_Flash_flash_data+0xf400c450>
    c644:	14fff604 	addi	r19,r2,-40
    c648:	8ce6983a 	sll	r19,r17,r19
    c64c:	0023883a 	mov	r17,zero
    c650:	1c3f860e 	bge	r3,r16,c46c <__alt_mem_Flash_flash_data+0xf400c46c>
    c654:	017fe034 	movhi	r5,65408
    c658:	297fffc4 	addi	r5,r5,-1
    c65c:	80e1c83a 	sub	r16,r16,r3
    c660:	994a703a 	and	r5,r19,r5
    c664:	003f3206 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c668:	0009883a 	mov	r4,zero
    c66c:	0005883a 	mov	r2,zero
    c670:	003f4706 	br	c390 <__alt_mem_Flash_flash_data+0xf400c390>
    c674:	198cb03a 	or	r6,r3,r6
    c678:	300cc03a 	cmpne	r6,r6,zero
    c67c:	0005883a 	mov	r2,zero
    c680:	003f6306 	br	c410 <__alt_mem_Flash_flash_data+0xf400c410>
    c684:	10009d1e 	bne	r2,zero,c8fc <__subdf3+0x658>
    c688:	81c00044 	addi	r7,r16,1
    c68c:	3881ffcc 	andi	r2,r7,2047
    c690:	02400044 	movi	r9,1
    c694:	4880680e 	bge	r9,r2,c838 <__subdf3+0x594>
    c698:	0081ffc4 	movi	r2,2047
    c69c:	3880ae26 	beq	r7,r2,c958 <__subdf3+0x6b4>
    c6a0:	344d883a 	add	r6,r6,r17
    c6a4:	3463803a 	cmpltu	r17,r6,r17
    c6a8:	194b883a 	add	r5,r3,r5
    c6ac:	2c4b883a 	add	r5,r5,r17
    c6b0:	282297fa 	slli	r17,r5,31
    c6b4:	300cd07a 	srli	r6,r6,1
    c6b8:	280ad07a 	srli	r5,r5,1
    c6bc:	3821883a 	mov	r16,r7
    c6c0:	89a2b03a 	or	r17,r17,r6
    c6c4:	003f1a06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c6c8:	0101ffc4 	movi	r4,2047
    c6cc:	813f431e 	bne	r16,r4,c3dc <__alt_mem_Flash_flash_data+0xf400c3dc>
    c6d0:	003f1706 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c6d4:	80bff844 	addi	r2,r16,-31
    c6d8:	00c00804 	movi	r3,32
    c6dc:	9884d83a 	srl	r2,r19,r2
    c6e0:	28c05126 	beq	r5,r3,c828 <__subdf3+0x584>
    c6e4:	00c00fc4 	movi	r3,63
    c6e8:	1c21c83a 	sub	r16,r3,r16
    c6ec:	9c26983a 	sll	r19,r19,r16
    c6f0:	9c62b03a 	or	r17,r19,r17
    c6f4:	8822c03a 	cmpne	r17,r17,zero
    c6f8:	88a2b03a 	or	r17,r17,r2
    c6fc:	000b883a 	mov	r5,zero
    c700:	0021883a 	mov	r16,zero
    c704:	003fb406 	br	c5d8 <__alt_mem_Flash_flash_data+0xf400c5d8>
    c708:	113ff804 	addi	r4,r2,-32
    c70c:	01c00804 	movi	r7,32
    c710:	1908d83a 	srl	r4,r3,r4
    c714:	11c04626 	beq	r2,r7,c830 <__subdf3+0x58c>
    c718:	01c01004 	movi	r7,64
    c71c:	3885c83a 	sub	r2,r7,r2
    c720:	1884983a 	sll	r2,r3,r2
    c724:	118cb03a 	or	r6,r2,r6
    c728:	300cc03a 	cmpne	r6,r6,zero
    c72c:	310cb03a 	or	r6,r6,r4
    c730:	0005883a 	mov	r2,zero
    c734:	003f3606 	br	c410 <__alt_mem_Flash_flash_data+0xf400c410>
    c738:	80002b26 	beq	r16,zero,c7e8 <__subdf3+0x544>
    c73c:	0101ffc4 	movi	r4,2047
    c740:	51006926 	beq	r10,r4,c8e8 <__subdf3+0x644>
    c744:	0085c83a 	sub	r2,zero,r2
    c748:	29402034 	orhi	r5,r5,128
    c74c:	01000e04 	movi	r4,56
    c750:	20807d16 	blt	r4,r2,c948 <__subdf3+0x6a4>
    c754:	010007c4 	movi	r4,31
    c758:	2080d916 	blt	r4,r2,cac0 <__subdf3+0x81c>
    c75c:	01000804 	movi	r4,32
    c760:	2089c83a 	sub	r4,r4,r2
    c764:	2912983a 	sll	r9,r5,r4
    c768:	8890d83a 	srl	r8,r17,r2
    c76c:	8908983a 	sll	r4,r17,r4
    c770:	2884d83a 	srl	r2,r5,r2
    c774:	4a22b03a 	or	r17,r9,r8
    c778:	2008c03a 	cmpne	r4,r4,zero
    c77c:	8922b03a 	or	r17,r17,r4
    c780:	3463c83a 	sub	r17,r6,r17
    c784:	1885c83a 	sub	r2,r3,r2
    c788:	344d803a 	cmpltu	r6,r6,r17
    c78c:	118bc83a 	sub	r5,r2,r6
    c790:	5021883a 	mov	r16,r10
    c794:	3825883a 	mov	r18,r7
    c798:	003f2206 	br	c424 <__alt_mem_Flash_flash_data+0xf400c424>
    c79c:	9886b03a 	or	r3,r19,r2
    c7a0:	18001c1e 	bne	r3,zero,c814 <__subdf3+0x570>
    c7a4:	0011883a 	mov	r8,zero
    c7a8:	000b883a 	mov	r5,zero
    c7ac:	0023883a 	mov	r17,zero
    c7b0:	0021883a 	mov	r16,zero
    c7b4:	003f3e06 	br	c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    c7b8:	010007c4 	movi	r4,31
    c7bc:	20803c16 	blt	r4,r2,c8b0 <__subdf3+0x60c>
    c7c0:	01000804 	movi	r4,32
    c7c4:	2089c83a 	sub	r4,r4,r2
    c7c8:	1912983a 	sll	r9,r3,r4
    c7cc:	308ed83a 	srl	r7,r6,r2
    c7d0:	3108983a 	sll	r4,r6,r4
    c7d4:	1884d83a 	srl	r2,r3,r2
    c7d8:	49ceb03a 	or	r7,r9,r7
    c7dc:	2008c03a 	cmpne	r4,r4,zero
    c7e0:	390eb03a 	or	r7,r7,r4
    c7e4:	003f4706 	br	c504 <__alt_mem_Flash_flash_data+0xf400c504>
    c7e8:	2c48b03a 	or	r4,r5,r17
    c7ec:	20003e26 	beq	r4,zero,c8e8 <__subdf3+0x644>
    c7f0:	0084303a 	nor	r2,zero,r2
    c7f4:	10003a1e 	bne	r2,zero,c8e0 <__subdf3+0x63c>
    c7f8:	3463c83a 	sub	r17,r6,r17
    c7fc:	194bc83a 	sub	r5,r3,r5
    c800:	344d803a 	cmpltu	r6,r6,r17
    c804:	298bc83a 	sub	r5,r5,r6
    c808:	5021883a 	mov	r16,r10
    c80c:	3825883a 	mov	r18,r7
    c810:	003f0406 	br	c424 <__alt_mem_Flash_flash_data+0xf400c424>
    c814:	1023883a 	mov	r17,r2
    c818:	003f0706 	br	c438 <__alt_mem_Flash_flash_data+0xf400c438>
    c81c:	0101ffc4 	movi	r4,2047
    c820:	813f331e 	bne	r16,r4,c4f0 <__alt_mem_Flash_flash_data+0xf400c4f0>
    c824:	003ec206 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c828:	0027883a 	mov	r19,zero
    c82c:	003fb006 	br	c6f0 <__alt_mem_Flash_flash_data+0xf400c6f0>
    c830:	0005883a 	mov	r2,zero
    c834:	003fbb06 	br	c724 <__alt_mem_Flash_flash_data+0xf400c724>
    c838:	2c44b03a 	or	r2,r5,r17
    c83c:	80008b1e 	bne	r16,zero,ca6c <__subdf3+0x7c8>
    c840:	1000b526 	beq	r2,zero,cb18 <__subdf3+0x874>
    c844:	1984b03a 	or	r2,r3,r6
    c848:	103eb926 	beq	r2,zero,c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c84c:	3449883a 	add	r4,r6,r17
    c850:	2463803a 	cmpltu	r17,r4,r17
    c854:	194b883a 	add	r5,r3,r5
    c858:	2c4b883a 	add	r5,r5,r17
    c85c:	2880202c 	andhi	r2,r5,128
    c860:	2023883a 	mov	r17,r4
    c864:	103f5c26 	beq	r2,zero,c5d8 <__alt_mem_Flash_flash_data+0xf400c5d8>
    c868:	00bfe034 	movhi	r2,65408
    c86c:	10bfffc4 	addi	r2,r2,-1
    c870:	4821883a 	mov	r16,r9
    c874:	288a703a 	and	r5,r5,r2
    c878:	003ead06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c87c:	2c44b03a 	or	r2,r5,r17
    c880:	8000291e 	bne	r16,zero,c928 <__subdf3+0x684>
    c884:	10004f1e 	bne	r2,zero,c9c4 <__subdf3+0x720>
    c888:	1984b03a 	or	r2,r3,r6
    c88c:	10000426 	beq	r2,zero,c8a0 <__subdf3+0x5fc>
    c890:	180b883a 	mov	r5,r3
    c894:	3023883a 	mov	r17,r6
    c898:	3825883a 	mov	r18,r7
    c89c:	003ea406 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c8a0:	0011883a 	mov	r8,zero
    c8a4:	000b883a 	mov	r5,zero
    c8a8:	0023883a 	mov	r17,zero
    c8ac:	003f0006 	br	c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    c8b0:	11fff804 	addi	r7,r2,-32
    c8b4:	19c8d83a 	srl	r4,r3,r7
    c8b8:	01c00804 	movi	r7,32
    c8bc:	11c07e26 	beq	r2,r7,cab8 <__subdf3+0x814>
    c8c0:	01c01004 	movi	r7,64
    c8c4:	3885c83a 	sub	r2,r7,r2
    c8c8:	1884983a 	sll	r2,r3,r2
    c8cc:	118cb03a 	or	r6,r2,r6
    c8d0:	300ec03a 	cmpne	r7,r6,zero
    c8d4:	390eb03a 	or	r7,r7,r4
    c8d8:	0005883a 	mov	r2,zero
    c8dc:	003f0906 	br	c504 <__alt_mem_Flash_flash_data+0xf400c504>
    c8e0:	0101ffc4 	movi	r4,2047
    c8e4:	513f991e 	bne	r10,r4,c74c <__alt_mem_Flash_flash_data+0xf400c74c>
    c8e8:	180b883a 	mov	r5,r3
    c8ec:	3023883a 	mov	r17,r6
    c8f0:	5021883a 	mov	r16,r10
    c8f4:	3825883a 	mov	r18,r7
    c8f8:	003e8d06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c8fc:	80001a1e 	bne	r16,zero,c968 <__subdf3+0x6c4>
    c900:	2c48b03a 	or	r4,r5,r17
    c904:	20005526 	beq	r4,zero,ca5c <__subdf3+0x7b8>
    c908:	0084303a 	nor	r2,zero,r2
    c90c:	1000511e 	bne	r2,zero,ca54 <__subdf3+0x7b0>
    c910:	89a3883a 	add	r17,r17,r6
    c914:	194b883a 	add	r5,r3,r5
    c918:	898d803a 	cmpltu	r6,r17,r6
    c91c:	298b883a 	add	r5,r5,r6
    c920:	5021883a 	mov	r16,r10
    c924:	003efc06 	br	c518 <__alt_mem_Flash_flash_data+0xf400c518>
    c928:	1000341e 	bne	r2,zero,c9fc <__subdf3+0x758>
    c92c:	1984b03a 	or	r2,r3,r6
    c930:	10006f26 	beq	r2,zero,caf0 <__subdf3+0x84c>
    c934:	180b883a 	mov	r5,r3
    c938:	3023883a 	mov	r17,r6
    c93c:	3825883a 	mov	r18,r7
    c940:	0401ffc4 	movi	r16,2047
    c944:	003e7a06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c948:	2c62b03a 	or	r17,r5,r17
    c94c:	8822c03a 	cmpne	r17,r17,zero
    c950:	0005883a 	mov	r2,zero
    c954:	003f8a06 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    c958:	3821883a 	mov	r16,r7
    c95c:	000b883a 	mov	r5,zero
    c960:	0023883a 	mov	r17,zero
    c964:	003ed206 	br	c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    c968:	0101ffc4 	movi	r4,2047
    c96c:	51003b26 	beq	r10,r4,ca5c <__subdf3+0x7b8>
    c970:	0085c83a 	sub	r2,zero,r2
    c974:	29402034 	orhi	r5,r5,128
    c978:	01000e04 	movi	r4,56
    c97c:	20806216 	blt	r4,r2,cb08 <__subdf3+0x864>
    c980:	010007c4 	movi	r4,31
    c984:	20806b16 	blt	r4,r2,cb34 <__subdf3+0x890>
    c988:	01000804 	movi	r4,32
    c98c:	2089c83a 	sub	r4,r4,r2
    c990:	2912983a 	sll	r9,r5,r4
    c994:	888ed83a 	srl	r7,r17,r2
    c998:	8908983a 	sll	r4,r17,r4
    c99c:	2884d83a 	srl	r2,r5,r2
    c9a0:	49e2b03a 	or	r17,r9,r7
    c9a4:	2008c03a 	cmpne	r4,r4,zero
    c9a8:	8922b03a 	or	r17,r17,r4
    c9ac:	89a3883a 	add	r17,r17,r6
    c9b0:	10c5883a 	add	r2,r2,r3
    c9b4:	898d803a 	cmpltu	r6,r17,r6
    c9b8:	118b883a 	add	r5,r2,r6
    c9bc:	5021883a 	mov	r16,r10
    c9c0:	003ed506 	br	c518 <__alt_mem_Flash_flash_data+0xf400c518>
    c9c4:	1984b03a 	or	r2,r3,r6
    c9c8:	103e5926 	beq	r2,zero,c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c9cc:	8989c83a 	sub	r4,r17,r6
    c9d0:	8911803a 	cmpltu	r8,r17,r4
    c9d4:	28c5c83a 	sub	r2,r5,r3
    c9d8:	1205c83a 	sub	r2,r2,r8
    c9dc:	1200202c 	andhi	r8,r2,128
    c9e0:	403ef926 	beq	r8,zero,c5c8 <__alt_mem_Flash_flash_data+0xf400c5c8>
    c9e4:	3463c83a 	sub	r17,r6,r17
    c9e8:	194bc83a 	sub	r5,r3,r5
    c9ec:	344d803a 	cmpltu	r6,r6,r17
    c9f0:	298bc83a 	sub	r5,r5,r6
    c9f4:	3825883a 	mov	r18,r7
    c9f8:	003e4d06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    c9fc:	1984b03a 	or	r2,r3,r6
    ca00:	10002b26 	beq	r2,zero,cab0 <__subdf3+0x80c>
    ca04:	2808d0fa 	srli	r4,r5,3
    ca08:	8822d0fa 	srli	r17,r17,3
    ca0c:	280a977a 	slli	r5,r5,29
    ca10:	2080022c 	andhi	r2,r4,8
    ca14:	2c62b03a 	or	r17,r5,r17
    ca18:	10000826 	beq	r2,zero,ca3c <__subdf3+0x798>
    ca1c:	1810d0fa 	srli	r8,r3,3
    ca20:	4080022c 	andhi	r2,r8,8
    ca24:	1000051e 	bne	r2,zero,ca3c <__subdf3+0x798>
    ca28:	300cd0fa 	srli	r6,r6,3
    ca2c:	1804977a 	slli	r2,r3,29
    ca30:	4009883a 	mov	r4,r8
    ca34:	3825883a 	mov	r18,r7
    ca38:	11a2b03a 	or	r17,r2,r6
    ca3c:	880ad77a 	srli	r5,r17,29
    ca40:	200890fa 	slli	r4,r4,3
    ca44:	882290fa 	slli	r17,r17,3
    ca48:	0401ffc4 	movi	r16,2047
    ca4c:	290ab03a 	or	r5,r5,r4
    ca50:	003e3706 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    ca54:	0101ffc4 	movi	r4,2047
    ca58:	513fc71e 	bne	r10,r4,c978 <__alt_mem_Flash_flash_data+0xf400c978>
    ca5c:	180b883a 	mov	r5,r3
    ca60:	3023883a 	mov	r17,r6
    ca64:	5021883a 	mov	r16,r10
    ca68:	003e3106 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    ca6c:	10002d26 	beq	r2,zero,cb24 <__subdf3+0x880>
    ca70:	1984b03a 	or	r2,r3,r6
    ca74:	10000e26 	beq	r2,zero,cab0 <__subdf3+0x80c>
    ca78:	2808d0fa 	srli	r4,r5,3
    ca7c:	8822d0fa 	srli	r17,r17,3
    ca80:	280a977a 	slli	r5,r5,29
    ca84:	2080022c 	andhi	r2,r4,8
    ca88:	2c62b03a 	or	r17,r5,r17
    ca8c:	103feb26 	beq	r2,zero,ca3c <__alt_mem_Flash_flash_data+0xf400ca3c>
    ca90:	180ed0fa 	srli	r7,r3,3
    ca94:	3880022c 	andhi	r2,r7,8
    ca98:	103fe81e 	bne	r2,zero,ca3c <__alt_mem_Flash_flash_data+0xf400ca3c>
    ca9c:	300cd0fa 	srli	r6,r6,3
    caa0:	1804977a 	slli	r2,r3,29
    caa4:	3809883a 	mov	r4,r7
    caa8:	11a2b03a 	or	r17,r2,r6
    caac:	003fe306 	br	ca3c <__alt_mem_Flash_flash_data+0xf400ca3c>
    cab0:	0401ffc4 	movi	r16,2047
    cab4:	003e1e06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    cab8:	0005883a 	mov	r2,zero
    cabc:	003f8306 	br	c8cc <__alt_mem_Flash_flash_data+0xf400c8cc>
    cac0:	113ff804 	addi	r4,r2,-32
    cac4:	02000804 	movi	r8,32
    cac8:	2908d83a 	srl	r4,r5,r4
    cacc:	12002526 	beq	r2,r8,cb64 <__subdf3+0x8c0>
    cad0:	02001004 	movi	r8,64
    cad4:	4085c83a 	sub	r2,r8,r2
    cad8:	288a983a 	sll	r5,r5,r2
    cadc:	2c62b03a 	or	r17,r5,r17
    cae0:	8822c03a 	cmpne	r17,r17,zero
    cae4:	8922b03a 	or	r17,r17,r4
    cae8:	0005883a 	mov	r2,zero
    caec:	003f2406 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    caf0:	01402034 	movhi	r5,128
    caf4:	0011883a 	mov	r8,zero
    caf8:	297fffc4 	addi	r5,r5,-1
    cafc:	047ffe04 	movi	r17,-8
    cb00:	0401ffc4 	movi	r16,2047
    cb04:	003e6a06 	br	c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    cb08:	2c62b03a 	or	r17,r5,r17
    cb0c:	8822c03a 	cmpne	r17,r17,zero
    cb10:	0005883a 	mov	r2,zero
    cb14:	003fa506 	br	c9ac <__alt_mem_Flash_flash_data+0xf400c9ac>
    cb18:	180b883a 	mov	r5,r3
    cb1c:	3023883a 	mov	r17,r6
    cb20:	003e0306 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    cb24:	180b883a 	mov	r5,r3
    cb28:	3023883a 	mov	r17,r6
    cb2c:	0401ffc4 	movi	r16,2047
    cb30:	003dff06 	br	c330 <__alt_mem_Flash_flash_data+0xf400c330>
    cb34:	113ff804 	addi	r4,r2,-32
    cb38:	01c00804 	movi	r7,32
    cb3c:	2908d83a 	srl	r4,r5,r4
    cb40:	11c00a26 	beq	r2,r7,cb6c <__subdf3+0x8c8>
    cb44:	01c01004 	movi	r7,64
    cb48:	3885c83a 	sub	r2,r7,r2
    cb4c:	288a983a 	sll	r5,r5,r2
    cb50:	2c62b03a 	or	r17,r5,r17
    cb54:	8822c03a 	cmpne	r17,r17,zero
    cb58:	8922b03a 	or	r17,r17,r4
    cb5c:	0005883a 	mov	r2,zero
    cb60:	003f9206 	br	c9ac <__alt_mem_Flash_flash_data+0xf400c9ac>
    cb64:	000b883a 	mov	r5,zero
    cb68:	003fdc06 	br	cadc <__alt_mem_Flash_flash_data+0xf400cadc>
    cb6c:	000b883a 	mov	r5,zero
    cb70:	003ff706 	br	cb50 <__alt_mem_Flash_flash_data+0xf400cb50>

0000cb74 <__fixdfsi>:
    cb74:	2806d53a 	srli	r3,r5,20
    cb78:	00800434 	movhi	r2,16
    cb7c:	10bfffc4 	addi	r2,r2,-1
    cb80:	18c1ffcc 	andi	r3,r3,2047
    cb84:	0180ff84 	movi	r6,1022
    cb88:	2884703a 	and	r2,r5,r2
    cb8c:	280ad7fa 	srli	r5,r5,31
    cb90:	30c0130e 	bge	r6,r3,cbe0 <__fixdfsi+0x6c>
    cb94:	01810744 	movi	r6,1053
    cb98:	30c00d16 	blt	r6,r3,cbd0 <__fixdfsi+0x5c>
    cb9c:	01810cc4 	movi	r6,1075
    cba0:	30cdc83a 	sub	r6,r6,r3
    cba4:	01c007c4 	movi	r7,31
    cba8:	10800434 	orhi	r2,r2,16
    cbac:	39800e0e 	bge	r7,r6,cbe8 <__fixdfsi+0x74>
    cbb0:	010104c4 	movi	r4,1043
    cbb4:	20c7c83a 	sub	r3,r4,r3
    cbb8:	10c6d83a 	srl	r3,r2,r3
    cbbc:	29403fcc 	andi	r5,r5,255
    cbc0:	0145c83a 	sub	r2,zero,r5
    cbc4:	1884f03a 	xor	r2,r3,r2
    cbc8:	1145883a 	add	r2,r2,r5
    cbcc:	f800283a 	ret
    cbd0:	00a00034 	movhi	r2,32768
    cbd4:	10bfffc4 	addi	r2,r2,-1
    cbd8:	2885883a 	add	r2,r5,r2
    cbdc:	f800283a 	ret
    cbe0:	0005883a 	mov	r2,zero
    cbe4:	f800283a 	ret
    cbe8:	18fefb44 	addi	r3,r3,-1043
    cbec:	2188d83a 	srl	r4,r4,r6
    cbf0:	10c6983a 	sll	r3,r2,r3
    cbf4:	20c6b03a 	or	r3,r4,r3
    cbf8:	003ff006 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>

0000cbfc <__floatsidf>:
    cbfc:	defffd04 	addi	sp,sp,-12
    cc00:	dc400115 	stw	r17,4(sp)
    cc04:	dfc00215 	stw	ra,8(sp)
    cc08:	dc000015 	stw	r16,0(sp)
    cc0c:	2023883a 	mov	r17,r4
    cc10:	20001426 	beq	r4,zero,cc64 <__floatsidf+0x68>
    cc14:	2020d7fa 	srli	r16,r4,31
    cc18:	80000126 	beq	r16,zero,cc20 <__floatsidf+0x24>
    cc1c:	0123c83a 	sub	r17,zero,r4
    cc20:	8809883a 	mov	r4,r17
    cc24:	000cd700 	call	cd70 <__clzsi2>
    cc28:	01410784 	movi	r5,1054
    cc2c:	00c00284 	movi	r3,10
    cc30:	288bc83a 	sub	r5,r5,r2
    cc34:	18801c16 	blt	r3,r2,cca8 <__floatsidf+0xac>
    cc38:	00c002c4 	movi	r3,11
    cc3c:	1887c83a 	sub	r3,r3,r2
    cc40:	88c8d83a 	srl	r4,r17,r3
    cc44:	00c00434 	movhi	r3,16
    cc48:	18ffffc4 	addi	r3,r3,-1
    cc4c:	10800544 	addi	r2,r2,21
    cc50:	20c8703a 	and	r4,r4,r3
    cc54:	8884983a 	sll	r2,r17,r2
    cc58:	28c1ffcc 	andi	r3,r5,2047
    cc5c:	800d883a 	mov	r6,r16
    cc60:	00000406 	br	cc74 <__floatsidf+0x78>
    cc64:	000d883a 	mov	r6,zero
    cc68:	0007883a 	mov	r3,zero
    cc6c:	0009883a 	mov	r4,zero
    cc70:	0005883a 	mov	r2,zero
    cc74:	180a953a 	slli	r5,r3,20
    cc78:	31803fcc 	andi	r6,r6,255
    cc7c:	00c00434 	movhi	r3,16
    cc80:	300c97fa 	slli	r6,r6,31
    cc84:	18ffffc4 	addi	r3,r3,-1
    cc88:	20c6703a 	and	r3,r4,r3
    cc8c:	1946b03a 	or	r3,r3,r5
    cc90:	1986b03a 	or	r3,r3,r6
    cc94:	dfc00217 	ldw	ra,8(sp)
    cc98:	dc400117 	ldw	r17,4(sp)
    cc9c:	dc000017 	ldw	r16,0(sp)
    cca0:	dec00304 	addi	sp,sp,12
    cca4:	f800283a 	ret
    cca8:	10fffd44 	addi	r3,r2,-11
    ccac:	88c8983a 	sll	r4,r17,r3
    ccb0:	00800434 	movhi	r2,16
    ccb4:	10bfffc4 	addi	r2,r2,-1
    ccb8:	2088703a 	and	r4,r4,r2
    ccbc:	28c1ffcc 	andi	r3,r5,2047
    ccc0:	800d883a 	mov	r6,r16
    ccc4:	0005883a 	mov	r2,zero
    ccc8:	003fea06 	br	cc74 <__alt_mem_Flash_flash_data+0xf400cc74>

0000cccc <__floatunsidf>:
    cccc:	defffe04 	addi	sp,sp,-8
    ccd0:	dc000015 	stw	r16,0(sp)
    ccd4:	dfc00115 	stw	ra,4(sp)
    ccd8:	2021883a 	mov	r16,r4
    ccdc:	20001026 	beq	r4,zero,cd20 <__floatunsidf+0x54>
    cce0:	000cd700 	call	cd70 <__clzsi2>
    cce4:	01410784 	movi	r5,1054
    cce8:	100d883a 	mov	r6,r2
    ccec:	288bc83a 	sub	r5,r5,r2
    ccf0:	00800284 	movi	r2,10
    ccf4:	11801616 	blt	r2,r6,cd50 <__floatunsidf+0x84>
    ccf8:	008002c4 	movi	r2,11
    ccfc:	1185c83a 	sub	r2,r2,r6
    cd00:	8084d83a 	srl	r2,r16,r2
    cd04:	00c00434 	movhi	r3,16
    cd08:	31c00544 	addi	r7,r6,21
    cd0c:	18ffffc4 	addi	r3,r3,-1
    cd10:	81e0983a 	sll	r16,r16,r7
    cd14:	10cc703a 	and	r6,r2,r3
    cd18:	2941ffcc 	andi	r5,r5,2047
    cd1c:	00000206 	br	cd28 <__floatunsidf+0x5c>
    cd20:	000b883a 	mov	r5,zero
    cd24:	000d883a 	mov	r6,zero
    cd28:	280a953a 	slli	r5,r5,20
    cd2c:	00c00434 	movhi	r3,16
    cd30:	18ffffc4 	addi	r3,r3,-1
    cd34:	30c6703a 	and	r3,r6,r3
    cd38:	8005883a 	mov	r2,r16
    cd3c:	1946b03a 	or	r3,r3,r5
    cd40:	dfc00117 	ldw	ra,4(sp)
    cd44:	dc000017 	ldw	r16,0(sp)
    cd48:	dec00204 	addi	sp,sp,8
    cd4c:	f800283a 	ret
    cd50:	31bffd44 	addi	r6,r6,-11
    cd54:	818c983a 	sll	r6,r16,r6
    cd58:	00800434 	movhi	r2,16
    cd5c:	10bfffc4 	addi	r2,r2,-1
    cd60:	2941ffcc 	andi	r5,r5,2047
    cd64:	0021883a 	mov	r16,zero
    cd68:	308c703a 	and	r6,r6,r2
    cd6c:	003fee06 	br	cd28 <__alt_mem_Flash_flash_data+0xf400cd28>

0000cd70 <__clzsi2>:
    cd70:	00bfffd4 	movui	r2,65535
    cd74:	11000b36 	bltu	r2,r4,cda4 <__clzsi2+0x34>
    cd78:	00803fc4 	movi	r2,255
    cd7c:	1100122e 	bgeu	r2,r4,cdc8 <__clzsi2+0x58>
    cd80:	00c00204 	movi	r3,8
    cd84:	01400604 	movi	r5,24
    cd88:	20c8d83a 	srl	r4,r4,r3
    cd8c:	008000b4 	movhi	r2,2
    cd90:	10a73304 	addi	r2,r2,-25396
    cd94:	1109883a 	add	r4,r2,r4
    cd98:	20800003 	ldbu	r2,0(r4)
    cd9c:	2885c83a 	sub	r2,r5,r2
    cda0:	f800283a 	ret
    cda4:	00804034 	movhi	r2,256
    cda8:	10bfffc4 	addi	r2,r2,-1
    cdac:	11000336 	bltu	r2,r4,cdbc <__clzsi2+0x4c>
    cdb0:	00c00404 	movi	r3,16
    cdb4:	180b883a 	mov	r5,r3
    cdb8:	003ff306 	br	cd88 <__alt_mem_Flash_flash_data+0xf400cd88>
    cdbc:	00c00604 	movi	r3,24
    cdc0:	01400204 	movi	r5,8
    cdc4:	003ff006 	br	cd88 <__alt_mem_Flash_flash_data+0xf400cd88>
    cdc8:	0007883a 	mov	r3,zero
    cdcc:	01400804 	movi	r5,32
    cdd0:	003fed06 	br	cd88 <__alt_mem_Flash_flash_data+0xf400cd88>

0000cdd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdd4:	defffe04 	addi	sp,sp,-8
    cdd8:	dfc00115 	stw	ra,4(sp)
    cddc:	df000015 	stw	fp,0(sp)
    cde0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cde4:	008000b4 	movhi	r2,2
    cde8:	10b10d04 	addi	r2,r2,-15308
    cdec:	10800017 	ldw	r2,0(r2)
    cdf0:	10000526 	beq	r2,zero,ce08 <alt_get_errno+0x34>
    cdf4:	008000b4 	movhi	r2,2
    cdf8:	10b10d04 	addi	r2,r2,-15308
    cdfc:	10800017 	ldw	r2,0(r2)
    ce00:	103ee83a 	callr	r2
    ce04:	00000206 	br	ce10 <alt_get_errno+0x3c>
    ce08:	008000b4 	movhi	r2,2
    ce0c:	10b9b104 	addi	r2,r2,-6460
}
    ce10:	e037883a 	mov	sp,fp
    ce14:	dfc00117 	ldw	ra,4(sp)
    ce18:	df000017 	ldw	fp,0(sp)
    ce1c:	dec00204 	addi	sp,sp,8
    ce20:	f800283a 	ret

0000ce24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ce24:	defffb04 	addi	sp,sp,-20
    ce28:	dfc00415 	stw	ra,16(sp)
    ce2c:	df000315 	stw	fp,12(sp)
    ce30:	df000304 	addi	fp,sp,12
    ce34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ce38:	e0bfff17 	ldw	r2,-4(fp)
    ce3c:	10000616 	blt	r2,zero,ce58 <close+0x34>
    ce40:	e0bfff17 	ldw	r2,-4(fp)
    ce44:	10c00324 	muli	r3,r2,12
    ce48:	008000b4 	movhi	r2,2
    ce4c:	10aaf004 	addi	r2,r2,-21568
    ce50:	1885883a 	add	r2,r3,r2
    ce54:	00000106 	br	ce5c <close+0x38>
    ce58:	0005883a 	mov	r2,zero
    ce5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ce60:	e0bffd17 	ldw	r2,-12(fp)
    ce64:	10001926 	beq	r2,zero,cecc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ce68:	e0bffd17 	ldw	r2,-12(fp)
    ce6c:	10800017 	ldw	r2,0(r2)
    ce70:	10800417 	ldw	r2,16(r2)
    ce74:	10000626 	beq	r2,zero,ce90 <close+0x6c>
    ce78:	e0bffd17 	ldw	r2,-12(fp)
    ce7c:	10800017 	ldw	r2,0(r2)
    ce80:	10800417 	ldw	r2,16(r2)
    ce84:	e13ffd17 	ldw	r4,-12(fp)
    ce88:	103ee83a 	callr	r2
    ce8c:	00000106 	br	ce94 <close+0x70>
    ce90:	0005883a 	mov	r2,zero
    ce94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ce98:	e13fff17 	ldw	r4,-4(fp)
    ce9c:	000d53c0 	call	d53c <alt_release_fd>
    if (rval < 0)
    cea0:	e0bffe17 	ldw	r2,-8(fp)
    cea4:	1000070e 	bge	r2,zero,cec4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cea8:	000cdd40 	call	cdd4 <alt_get_errno>
    ceac:	1007883a 	mov	r3,r2
    ceb0:	e0bffe17 	ldw	r2,-8(fp)
    ceb4:	0085c83a 	sub	r2,zero,r2
    ceb8:	18800015 	stw	r2,0(r3)
      return -1;
    cebc:	00bfffc4 	movi	r2,-1
    cec0:	00000706 	br	cee0 <close+0xbc>
    }
    return 0;
    cec4:	0005883a 	mov	r2,zero
    cec8:	00000506 	br	cee0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cecc:	000cdd40 	call	cdd4 <alt_get_errno>
    ced0:	1007883a 	mov	r3,r2
    ced4:	00801444 	movi	r2,81
    ced8:	18800015 	stw	r2,0(r3)
    return -1;
    cedc:	00bfffc4 	movi	r2,-1
  }
}
    cee0:	e037883a 	mov	sp,fp
    cee4:	dfc00117 	ldw	ra,4(sp)
    cee8:	df000017 	ldw	fp,0(sp)
    ceec:	dec00204 	addi	sp,sp,8
    cef0:	f800283a 	ret

0000cef4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cef4:	defffc04 	addi	sp,sp,-16
    cef8:	df000315 	stw	fp,12(sp)
    cefc:	df000304 	addi	fp,sp,12
    cf00:	e13ffd15 	stw	r4,-12(fp)
    cf04:	e17ffe15 	stw	r5,-8(fp)
    cf08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cf0c:	e0bfff17 	ldw	r2,-4(fp)
}
    cf10:	e037883a 	mov	sp,fp
    cf14:	df000017 	ldw	fp,0(sp)
    cf18:	dec00104 	addi	sp,sp,4
    cf1c:	f800283a 	ret

0000cf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf20:	defffe04 	addi	sp,sp,-8
    cf24:	dfc00115 	stw	ra,4(sp)
    cf28:	df000015 	stw	fp,0(sp)
    cf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf30:	008000b4 	movhi	r2,2
    cf34:	10b10d04 	addi	r2,r2,-15308
    cf38:	10800017 	ldw	r2,0(r2)
    cf3c:	10000526 	beq	r2,zero,cf54 <alt_get_errno+0x34>
    cf40:	008000b4 	movhi	r2,2
    cf44:	10b10d04 	addi	r2,r2,-15308
    cf48:	10800017 	ldw	r2,0(r2)
    cf4c:	103ee83a 	callr	r2
    cf50:	00000206 	br	cf5c <alt_get_errno+0x3c>
    cf54:	008000b4 	movhi	r2,2
    cf58:	10b9b104 	addi	r2,r2,-6460
}
    cf5c:	e037883a 	mov	sp,fp
    cf60:	dfc00117 	ldw	ra,4(sp)
    cf64:	df000017 	ldw	fp,0(sp)
    cf68:	dec00204 	addi	sp,sp,8
    cf6c:	f800283a 	ret

0000cf70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cf70:	defffb04 	addi	sp,sp,-20
    cf74:	dfc00415 	stw	ra,16(sp)
    cf78:	df000315 	stw	fp,12(sp)
    cf7c:	df000304 	addi	fp,sp,12
    cf80:	e13ffe15 	stw	r4,-8(fp)
    cf84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf88:	e0bffe17 	ldw	r2,-8(fp)
    cf8c:	10000616 	blt	r2,zero,cfa8 <fstat+0x38>
    cf90:	e0bffe17 	ldw	r2,-8(fp)
    cf94:	10c00324 	muli	r3,r2,12
    cf98:	008000b4 	movhi	r2,2
    cf9c:	10aaf004 	addi	r2,r2,-21568
    cfa0:	1885883a 	add	r2,r3,r2
    cfa4:	00000106 	br	cfac <fstat+0x3c>
    cfa8:	0005883a 	mov	r2,zero
    cfac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cfb0:	e0bffd17 	ldw	r2,-12(fp)
    cfb4:	10001026 	beq	r2,zero,cff8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cfb8:	e0bffd17 	ldw	r2,-12(fp)
    cfbc:	10800017 	ldw	r2,0(r2)
    cfc0:	10800817 	ldw	r2,32(r2)
    cfc4:	10000726 	beq	r2,zero,cfe4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cfc8:	e0bffd17 	ldw	r2,-12(fp)
    cfcc:	10800017 	ldw	r2,0(r2)
    cfd0:	10800817 	ldw	r2,32(r2)
    cfd4:	e13ffd17 	ldw	r4,-12(fp)
    cfd8:	e17fff17 	ldw	r5,-4(fp)
    cfdc:	103ee83a 	callr	r2
    cfe0:	00000a06 	br	d00c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cfe4:	e0bfff17 	ldw	r2,-4(fp)
    cfe8:	00c80004 	movi	r3,8192
    cfec:	10c00115 	stw	r3,4(r2)
      return 0;
    cff0:	0005883a 	mov	r2,zero
    cff4:	00000506 	br	d00c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cff8:	000cf200 	call	cf20 <alt_get_errno>
    cffc:	1007883a 	mov	r3,r2
    d000:	00801444 	movi	r2,81
    d004:	18800015 	stw	r2,0(r3)
    return -1;
    d008:	00bfffc4 	movi	r2,-1
  }
}
    d00c:	e037883a 	mov	sp,fp
    d010:	dfc00117 	ldw	ra,4(sp)
    d014:	df000017 	ldw	fp,0(sp)
    d018:	dec00204 	addi	sp,sp,8
    d01c:	f800283a 	ret

0000d020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d020:	defffe04 	addi	sp,sp,-8
    d024:	dfc00115 	stw	ra,4(sp)
    d028:	df000015 	stw	fp,0(sp)
    d02c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d030:	008000b4 	movhi	r2,2
    d034:	10b10d04 	addi	r2,r2,-15308
    d038:	10800017 	ldw	r2,0(r2)
    d03c:	10000526 	beq	r2,zero,d054 <alt_get_errno+0x34>
    d040:	008000b4 	movhi	r2,2
    d044:	10b10d04 	addi	r2,r2,-15308
    d048:	10800017 	ldw	r2,0(r2)
    d04c:	103ee83a 	callr	r2
    d050:	00000206 	br	d05c <alt_get_errno+0x3c>
    d054:	008000b4 	movhi	r2,2
    d058:	10b9b104 	addi	r2,r2,-6460
}
    d05c:	e037883a 	mov	sp,fp
    d060:	dfc00117 	ldw	ra,4(sp)
    d064:	df000017 	ldw	fp,0(sp)
    d068:	dec00204 	addi	sp,sp,8
    d06c:	f800283a 	ret

0000d070 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d070:	deffed04 	addi	sp,sp,-76
    d074:	dfc01215 	stw	ra,72(sp)
    d078:	df001115 	stw	fp,68(sp)
    d07c:	df001104 	addi	fp,sp,68
    d080:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d084:	e0bfff17 	ldw	r2,-4(fp)
    d088:	10000616 	blt	r2,zero,d0a4 <isatty+0x34>
    d08c:	e0bfff17 	ldw	r2,-4(fp)
    d090:	10c00324 	muli	r3,r2,12
    d094:	008000b4 	movhi	r2,2
    d098:	10aaf004 	addi	r2,r2,-21568
    d09c:	1885883a 	add	r2,r3,r2
    d0a0:	00000106 	br	d0a8 <isatty+0x38>
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d0ac:	e0bfef17 	ldw	r2,-68(fp)
    d0b0:	10000e26 	beq	r2,zero,d0ec <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d0b4:	e0bfef17 	ldw	r2,-68(fp)
    d0b8:	10800017 	ldw	r2,0(r2)
    d0bc:	10800817 	ldw	r2,32(r2)
    d0c0:	1000021e 	bne	r2,zero,d0cc <isatty+0x5c>
    {
      return 1;
    d0c4:	00800044 	movi	r2,1
    d0c8:	00000d06 	br	d100 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d0cc:	e0bff004 	addi	r2,fp,-64
    d0d0:	e13fff17 	ldw	r4,-4(fp)
    d0d4:	100b883a 	mov	r5,r2
    d0d8:	000cf700 	call	cf70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d0dc:	e0bff117 	ldw	r2,-60(fp)
    d0e0:	10880020 	cmpeqi	r2,r2,8192
    d0e4:	10803fcc 	andi	r2,r2,255
    d0e8:	00000506 	br	d100 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d0ec:	000d0200 	call	d020 <alt_get_errno>
    d0f0:	1007883a 	mov	r3,r2
    d0f4:	00801444 	movi	r2,81
    d0f8:	18800015 	stw	r2,0(r3)
    return 0;
    d0fc:	0005883a 	mov	r2,zero
  }
}
    d100:	e037883a 	mov	sp,fp
    d104:	dfc00117 	ldw	ra,4(sp)
    d108:	df000017 	ldw	fp,0(sp)
    d10c:	dec00204 	addi	sp,sp,8
    d110:	f800283a 	ret

0000d114 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d114:	defffc04 	addi	sp,sp,-16
    d118:	df000315 	stw	fp,12(sp)
    d11c:	df000304 	addi	fp,sp,12
    d120:	e13ffd15 	stw	r4,-12(fp)
    d124:	e17ffe15 	stw	r5,-8(fp)
    d128:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d12c:	e0fffe17 	ldw	r3,-8(fp)
    d130:	e0bffd17 	ldw	r2,-12(fp)
    d134:	18800c26 	beq	r3,r2,d168 <alt_load_section+0x54>
  {
    while( to != end )
    d138:	00000806 	br	d15c <alt_load_section+0x48>
    {
      *to++ = *from++;
    d13c:	e0bffe17 	ldw	r2,-8(fp)
    d140:	10c00104 	addi	r3,r2,4
    d144:	e0fffe15 	stw	r3,-8(fp)
    d148:	e0fffd17 	ldw	r3,-12(fp)
    d14c:	19000104 	addi	r4,r3,4
    d150:	e13ffd15 	stw	r4,-12(fp)
    d154:	18c00017 	ldw	r3,0(r3)
    d158:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d15c:	e0fffe17 	ldw	r3,-8(fp)
    d160:	e0bfff17 	ldw	r2,-4(fp)
    d164:	18bff51e 	bne	r3,r2,d13c <__alt_mem_Flash_flash_data+0xf400d13c>
    {
      *to++ = *from++;
    }
  }
}
    d168:	e037883a 	mov	sp,fp
    d16c:	df000017 	ldw	fp,0(sp)
    d170:	dec00104 	addi	sp,sp,4
    d174:	f800283a 	ret

0000d178 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d178:	defffe04 	addi	sp,sp,-8
    d17c:	dfc00115 	stw	ra,4(sp)
    d180:	df000015 	stw	fp,0(sp)
    d184:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d188:	010000b4 	movhi	r4,2
    d18c:	21313104 	addi	r4,r4,-15164
    d190:	014000b4 	movhi	r5,2
    d194:	2968bd04 	addi	r5,r5,-23820
    d198:	018000b4 	movhi	r6,2
    d19c:	31b13104 	addi	r6,r6,-15164
    d1a0:	000d1140 	call	d114 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d1a4:	01000034 	movhi	r4,0
    d1a8:	21000804 	addi	r4,r4,32
    d1ac:	01400034 	movhi	r5,0
    d1b0:	29400804 	addi	r5,r5,32
    d1b4:	01800034 	movhi	r6,0
    d1b8:	31809104 	addi	r6,r6,580
    d1bc:	000d1140 	call	d114 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d1c0:	010000b4 	movhi	r4,2
    d1c4:	2126af04 	addi	r4,r4,-25924
    d1c8:	014000b4 	movhi	r5,2
    d1cc:	2966af04 	addi	r5,r5,-25924
    d1d0:	018000b4 	movhi	r6,2
    d1d4:	31a8bd04 	addi	r6,r6,-23820
    d1d8:	000d1140 	call	d114 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d1dc:	00186740 	call	18674 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d1e0:	00188cc0 	call	188cc <alt_icache_flush_all>
}
    d1e4:	e037883a 	mov	sp,fp
    d1e8:	dfc00117 	ldw	ra,4(sp)
    d1ec:	df000017 	ldw	fp,0(sp)
    d1f0:	dec00204 	addi	sp,sp,8
    d1f4:	f800283a 	ret

0000d1f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1f8:	defffe04 	addi	sp,sp,-8
    d1fc:	dfc00115 	stw	ra,4(sp)
    d200:	df000015 	stw	fp,0(sp)
    d204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d208:	008000b4 	movhi	r2,2
    d20c:	10b10d04 	addi	r2,r2,-15308
    d210:	10800017 	ldw	r2,0(r2)
    d214:	10000526 	beq	r2,zero,d22c <alt_get_errno+0x34>
    d218:	008000b4 	movhi	r2,2
    d21c:	10b10d04 	addi	r2,r2,-15308
    d220:	10800017 	ldw	r2,0(r2)
    d224:	103ee83a 	callr	r2
    d228:	00000206 	br	d234 <alt_get_errno+0x3c>
    d22c:	008000b4 	movhi	r2,2
    d230:	10b9b104 	addi	r2,r2,-6460
}
    d234:	e037883a 	mov	sp,fp
    d238:	dfc00117 	ldw	ra,4(sp)
    d23c:	df000017 	ldw	fp,0(sp)
    d240:	dec00204 	addi	sp,sp,8
    d244:	f800283a 	ret

0000d248 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d248:	defff904 	addi	sp,sp,-28
    d24c:	dfc00615 	stw	ra,24(sp)
    d250:	df000515 	stw	fp,20(sp)
    d254:	df000504 	addi	fp,sp,20
    d258:	e13ffd15 	stw	r4,-12(fp)
    d25c:	e17ffe15 	stw	r5,-8(fp)
    d260:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d264:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d268:	e0bffd17 	ldw	r2,-12(fp)
    d26c:	10000616 	blt	r2,zero,d288 <lseek+0x40>
    d270:	e0bffd17 	ldw	r2,-12(fp)
    d274:	10c00324 	muli	r3,r2,12
    d278:	008000b4 	movhi	r2,2
    d27c:	10aaf004 	addi	r2,r2,-21568
    d280:	1885883a 	add	r2,r3,r2
    d284:	00000106 	br	d28c <lseek+0x44>
    d288:	0005883a 	mov	r2,zero
    d28c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d290:	e0bffc17 	ldw	r2,-16(fp)
    d294:	10001026 	beq	r2,zero,d2d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d298:	e0bffc17 	ldw	r2,-16(fp)
    d29c:	10800017 	ldw	r2,0(r2)
    d2a0:	10800717 	ldw	r2,28(r2)
    d2a4:	10000926 	beq	r2,zero,d2cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d2a8:	e0bffc17 	ldw	r2,-16(fp)
    d2ac:	10800017 	ldw	r2,0(r2)
    d2b0:	10800717 	ldw	r2,28(r2)
    d2b4:	e13ffc17 	ldw	r4,-16(fp)
    d2b8:	e17ffe17 	ldw	r5,-8(fp)
    d2bc:	e1bfff17 	ldw	r6,-4(fp)
    d2c0:	103ee83a 	callr	r2
    d2c4:	e0bffb15 	stw	r2,-20(fp)
    d2c8:	00000506 	br	d2e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d2cc:	00bfde84 	movi	r2,-134
    d2d0:	e0bffb15 	stw	r2,-20(fp)
    d2d4:	00000206 	br	d2e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d2d8:	00bfebc4 	movi	r2,-81
    d2dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d2e0:	e0bffb17 	ldw	r2,-20(fp)
    d2e4:	1000070e 	bge	r2,zero,d304 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d2e8:	000d1f80 	call	d1f8 <alt_get_errno>
    d2ec:	1007883a 	mov	r3,r2
    d2f0:	e0bffb17 	ldw	r2,-20(fp)
    d2f4:	0085c83a 	sub	r2,zero,r2
    d2f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    d2fc:	00bfffc4 	movi	r2,-1
    d300:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d304:	e0bffb17 	ldw	r2,-20(fp)
}
    d308:	e037883a 	mov	sp,fp
    d30c:	dfc00117 	ldw	ra,4(sp)
    d310:	df000017 	ldw	fp,0(sp)
    d314:	dec00204 	addi	sp,sp,8
    d318:	f800283a 	ret

0000d31c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d31c:	defff904 	addi	sp,sp,-28
    d320:	dfc00615 	stw	ra,24(sp)
    d324:	df000515 	stw	fp,20(sp)
    d328:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d32c:	0009883a 	mov	r4,zero
    d330:	00157680 	call	15768 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d334:	000e30c0 	call	e30c <OSInit>
    d338:	01000044 	movi	r4,1
    d33c:	0012e7c0 	call	12e7c <OSSemCreate>
    d340:	1007883a 	mov	r3,r2
    d344:	008000b4 	movhi	r2,2
    d348:	10b9b704 	addi	r2,r2,-6436
    d34c:	10c00015 	stw	r3,0(r2)
    d350:	01000044 	movi	r4,1
    d354:	0012e7c0 	call	12e7c <OSSemCreate>
    d358:	1007883a 	mov	r3,r2
    d35c:	008000b4 	movhi	r2,2
    d360:	10b9b904 	addi	r2,r2,-6428
    d364:	10c00015 	stw	r3,0(r2)
    d368:	008000b4 	movhi	r2,2
    d36c:	10b9b204 	addi	r2,r2,-6456
    d370:	e0bffc15 	stw	r2,-16(fp)
    d374:	00800044 	movi	r2,1
    d378:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d37c:	e0bffd0b 	ldhu	r2,-12(fp)
    d380:	1009883a 	mov	r4,r2
    d384:	0012e7c0 	call	12e7c <OSSemCreate>
    d388:	1007883a 	mov	r3,r2
    d38c:	e0bffc17 	ldw	r2,-16(fp)
    d390:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d394:	001579c0 	call	1579c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d398:	010000b4 	movhi	r4,2
    d39c:	21277604 	addi	r4,r4,-25128
    d3a0:	014000b4 	movhi	r5,2
    d3a4:	29677604 	addi	r5,r5,-25128
    d3a8:	018000b4 	movhi	r6,2
    d3ac:	31a77604 	addi	r6,r6,-25128
    d3b0:	00189bc0 	call	189bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d3b4:	00187840 	call	18784 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d3b8:	010000b4 	movhi	r4,2
    d3bc:	2121f804 	addi	r4,r4,-30752
    d3c0:	00196800 	call	19680 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d3c4:	d128b417 	ldw	r4,-23856(gp)
    d3c8:	d0e8b517 	ldw	r3,-23852(gp)
    d3cc:	d0a8b617 	ldw	r2,-23848(gp)
    d3d0:	180b883a 	mov	r5,r3
    d3d4:	100d883a 	mov	r6,r2
    d3d8:	000036c0 	call	36c <main>
    d3dc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d3e0:	01000044 	movi	r4,1
    d3e4:	000ce240 	call	ce24 <close>
  exit (result);
    d3e8:	e13ffb17 	ldw	r4,-20(fp)
    d3ec:	00196940 	call	19694 <exit>

0000d3f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3f0:	defffe04 	addi	sp,sp,-8
    d3f4:	dfc00115 	stw	ra,4(sp)
    d3f8:	df000015 	stw	fp,0(sp)
    d3fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d400:	008000b4 	movhi	r2,2
    d404:	10b10d04 	addi	r2,r2,-15308
    d408:	10800017 	ldw	r2,0(r2)
    d40c:	10000526 	beq	r2,zero,d424 <alt_get_errno+0x34>
    d410:	008000b4 	movhi	r2,2
    d414:	10b10d04 	addi	r2,r2,-15308
    d418:	10800017 	ldw	r2,0(r2)
    d41c:	103ee83a 	callr	r2
    d420:	00000206 	br	d42c <alt_get_errno+0x3c>
    d424:	008000b4 	movhi	r2,2
    d428:	10b9b104 	addi	r2,r2,-6460
}
    d42c:	e037883a 	mov	sp,fp
    d430:	dfc00117 	ldw	ra,4(sp)
    d434:	df000017 	ldw	fp,0(sp)
    d438:	dec00204 	addi	sp,sp,8
    d43c:	f800283a 	ret

0000d440 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d440:	defff904 	addi	sp,sp,-28
    d444:	dfc00615 	stw	ra,24(sp)
    d448:	df000515 	stw	fp,20(sp)
    d44c:	df000504 	addi	fp,sp,20
    d450:	e13ffd15 	stw	r4,-12(fp)
    d454:	e17ffe15 	stw	r5,-8(fp)
    d458:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d45c:	e0bffd17 	ldw	r2,-12(fp)
    d460:	10000616 	blt	r2,zero,d47c <read+0x3c>
    d464:	e0bffd17 	ldw	r2,-12(fp)
    d468:	10c00324 	muli	r3,r2,12
    d46c:	008000b4 	movhi	r2,2
    d470:	10aaf004 	addi	r2,r2,-21568
    d474:	1885883a 	add	r2,r3,r2
    d478:	00000106 	br	d480 <read+0x40>
    d47c:	0005883a 	mov	r2,zero
    d480:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d484:	e0bffb17 	ldw	r2,-20(fp)
    d488:	10002226 	beq	r2,zero,d514 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d48c:	e0bffb17 	ldw	r2,-20(fp)
    d490:	10800217 	ldw	r2,8(r2)
    d494:	108000cc 	andi	r2,r2,3
    d498:	10800060 	cmpeqi	r2,r2,1
    d49c:	1000181e 	bne	r2,zero,d500 <read+0xc0>
        (fd->dev->read))
    d4a0:	e0bffb17 	ldw	r2,-20(fp)
    d4a4:	10800017 	ldw	r2,0(r2)
    d4a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d4ac:	10001426 	beq	r2,zero,d500 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d4b0:	e0bffb17 	ldw	r2,-20(fp)
    d4b4:	10800017 	ldw	r2,0(r2)
    d4b8:	10800517 	ldw	r2,20(r2)
    d4bc:	e0ffff17 	ldw	r3,-4(fp)
    d4c0:	e13ffb17 	ldw	r4,-20(fp)
    d4c4:	e17ffe17 	ldw	r5,-8(fp)
    d4c8:	180d883a 	mov	r6,r3
    d4cc:	103ee83a 	callr	r2
    d4d0:	e0bffc15 	stw	r2,-16(fp)
    d4d4:	e0bffc17 	ldw	r2,-16(fp)
    d4d8:	1000070e 	bge	r2,zero,d4f8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d4dc:	000d3f00 	call	d3f0 <alt_get_errno>
    d4e0:	1007883a 	mov	r3,r2
    d4e4:	e0bffc17 	ldw	r2,-16(fp)
    d4e8:	0085c83a 	sub	r2,zero,r2
    d4ec:	18800015 	stw	r2,0(r3)
          return -1;
    d4f0:	00bfffc4 	movi	r2,-1
    d4f4:	00000c06 	br	d528 <read+0xe8>
        }
        return rval;
    d4f8:	e0bffc17 	ldw	r2,-16(fp)
    d4fc:	00000a06 	br	d528 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d500:	000d3f00 	call	d3f0 <alt_get_errno>
    d504:	1007883a 	mov	r3,r2
    d508:	00800344 	movi	r2,13
    d50c:	18800015 	stw	r2,0(r3)
    d510:	00000406 	br	d524 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d514:	000d3f00 	call	d3f0 <alt_get_errno>
    d518:	1007883a 	mov	r3,r2
    d51c:	00801444 	movi	r2,81
    d520:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d524:	00bfffc4 	movi	r2,-1
}
    d528:	e037883a 	mov	sp,fp
    d52c:	dfc00117 	ldw	ra,4(sp)
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00204 	addi	sp,sp,8
    d538:	f800283a 	ret

0000d53c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d53c:	defffe04 	addi	sp,sp,-8
    d540:	df000115 	stw	fp,4(sp)
    d544:	df000104 	addi	fp,sp,4
    d548:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d54c:	e0bfff17 	ldw	r2,-4(fp)
    d550:	108000d0 	cmplti	r2,r2,3
    d554:	10000d1e 	bne	r2,zero,d58c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d558:	008000b4 	movhi	r2,2
    d55c:	10aaf004 	addi	r2,r2,-21568
    d560:	e0ffff17 	ldw	r3,-4(fp)
    d564:	18c00324 	muli	r3,r3,12
    d568:	18c00204 	addi	r3,r3,8
    d56c:	10c5883a 	add	r2,r2,r3
    d570:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d574:	008000b4 	movhi	r2,2
    d578:	10aaf004 	addi	r2,r2,-21568
    d57c:	e0ffff17 	ldw	r3,-4(fp)
    d580:	18c00324 	muli	r3,r3,12
    d584:	10c5883a 	add	r2,r2,r3
    d588:	10000015 	stw	zero,0(r2)
  }
}
    d58c:	e037883a 	mov	sp,fp
    d590:	df000017 	ldw	fp,0(sp)
    d594:	dec00104 	addi	sp,sp,4
    d598:	f800283a 	ret

0000d59c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d59c:	defff904 	addi	sp,sp,-28
    d5a0:	df000615 	stw	fp,24(sp)
    d5a4:	df000604 	addi	fp,sp,24
    d5a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5ac:	0005303a 	rdctl	r2,status
    d5b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5b4:	e0fffc17 	ldw	r3,-16(fp)
    d5b8:	00bfff84 	movi	r2,-2
    d5bc:	1884703a 	and	r2,r3,r2
    d5c0:	1001703a 	wrctl	status,r2
  
  return context;
    d5c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d5c8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d5cc:	d0a00f17 	ldw	r2,-32708(gp)
    d5d0:	10c000c4 	addi	r3,r2,3
    d5d4:	00bfff04 	movi	r2,-4
    d5d8:	1884703a 	and	r2,r3,r2
    d5dc:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d5e0:	d0e00f17 	ldw	r3,-32708(gp)
    d5e4:	e0bfff17 	ldw	r2,-4(fp)
    d5e8:	1887883a 	add	r3,r3,r2
    d5ec:	00810034 	movhi	r2,1024
    d5f0:	10800004 	addi	r2,r2,0
    d5f4:	10c0062e 	bgeu	r2,r3,d610 <sbrk+0x74>
    d5f8:	e0bffa17 	ldw	r2,-24(fp)
    d5fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d600:	e0bffd17 	ldw	r2,-12(fp)
    d604:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d608:	00bfffc4 	movi	r2,-1
    d60c:	00000b06 	br	d63c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d610:	d0a00f17 	ldw	r2,-32708(gp)
    d614:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d618:	d0e00f17 	ldw	r3,-32708(gp)
    d61c:	e0bfff17 	ldw	r2,-4(fp)
    d620:	1885883a 	add	r2,r3,r2
    d624:	d0a00f15 	stw	r2,-32708(gp)
    d628:	e0bffa17 	ldw	r2,-24(fp)
    d62c:	e0bffe15 	stw	r2,-8(fp)
    d630:	e0bffe17 	ldw	r2,-8(fp)
    d634:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d638:	e0bffb17 	ldw	r2,-20(fp)
} 
    d63c:	e037883a 	mov	sp,fp
    d640:	df000017 	ldw	fp,0(sp)
    d644:	dec00104 	addi	sp,sp,4
    d648:	f800283a 	ret

0000d64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d64c:	defffe04 	addi	sp,sp,-8
    d650:	dfc00115 	stw	ra,4(sp)
    d654:	df000015 	stw	fp,0(sp)
    d658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d65c:	008000b4 	movhi	r2,2
    d660:	10b10d04 	addi	r2,r2,-15308
    d664:	10800017 	ldw	r2,0(r2)
    d668:	10000526 	beq	r2,zero,d680 <alt_get_errno+0x34>
    d66c:	008000b4 	movhi	r2,2
    d670:	10b10d04 	addi	r2,r2,-15308
    d674:	10800017 	ldw	r2,0(r2)
    d678:	103ee83a 	callr	r2
    d67c:	00000206 	br	d688 <alt_get_errno+0x3c>
    d680:	008000b4 	movhi	r2,2
    d684:	10b9b104 	addi	r2,r2,-6460
}
    d688:	e037883a 	mov	sp,fp
    d68c:	dfc00117 	ldw	ra,4(sp)
    d690:	df000017 	ldw	fp,0(sp)
    d694:	dec00204 	addi	sp,sp,8
    d698:	f800283a 	ret

0000d69c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d69c:	defff904 	addi	sp,sp,-28
    d6a0:	dfc00615 	stw	ra,24(sp)
    d6a4:	df000515 	stw	fp,20(sp)
    d6a8:	df000504 	addi	fp,sp,20
    d6ac:	e13ffd15 	stw	r4,-12(fp)
    d6b0:	e17ffe15 	stw	r5,-8(fp)
    d6b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d6b8:	e0bffd17 	ldw	r2,-12(fp)
    d6bc:	10000616 	blt	r2,zero,d6d8 <write+0x3c>
    d6c0:	e0bffd17 	ldw	r2,-12(fp)
    d6c4:	10c00324 	muli	r3,r2,12
    d6c8:	008000b4 	movhi	r2,2
    d6cc:	10aaf004 	addi	r2,r2,-21568
    d6d0:	1885883a 	add	r2,r3,r2
    d6d4:	00000106 	br	d6dc <write+0x40>
    d6d8:	0005883a 	mov	r2,zero
    d6dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d6e0:	e0bffb17 	ldw	r2,-20(fp)
    d6e4:	10002126 	beq	r2,zero,d76c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d6e8:	e0bffb17 	ldw	r2,-20(fp)
    d6ec:	10800217 	ldw	r2,8(r2)
    d6f0:	108000cc 	andi	r2,r2,3
    d6f4:	10001826 	beq	r2,zero,d758 <write+0xbc>
    d6f8:	e0bffb17 	ldw	r2,-20(fp)
    d6fc:	10800017 	ldw	r2,0(r2)
    d700:	10800617 	ldw	r2,24(r2)
    d704:	10001426 	beq	r2,zero,d758 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d708:	e0bffb17 	ldw	r2,-20(fp)
    d70c:	10800017 	ldw	r2,0(r2)
    d710:	10800617 	ldw	r2,24(r2)
    d714:	e0ffff17 	ldw	r3,-4(fp)
    d718:	e13ffb17 	ldw	r4,-20(fp)
    d71c:	e17ffe17 	ldw	r5,-8(fp)
    d720:	180d883a 	mov	r6,r3
    d724:	103ee83a 	callr	r2
    d728:	e0bffc15 	stw	r2,-16(fp)
    d72c:	e0bffc17 	ldw	r2,-16(fp)
    d730:	1000070e 	bge	r2,zero,d750 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d734:	000d64c0 	call	d64c <alt_get_errno>
    d738:	1007883a 	mov	r3,r2
    d73c:	e0bffc17 	ldw	r2,-16(fp)
    d740:	0085c83a 	sub	r2,zero,r2
    d744:	18800015 	stw	r2,0(r3)
        return -1;
    d748:	00bfffc4 	movi	r2,-1
    d74c:	00000c06 	br	d780 <write+0xe4>
      }
      return rval;
    d750:	e0bffc17 	ldw	r2,-16(fp)
    d754:	00000a06 	br	d780 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d758:	000d64c0 	call	d64c <alt_get_errno>
    d75c:	1007883a 	mov	r3,r2
    d760:	00800344 	movi	r2,13
    d764:	18800015 	stw	r2,0(r3)
    d768:	00000406 	br	d77c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d76c:	000d64c0 	call	d64c <alt_get_errno>
    d770:	1007883a 	mov	r3,r2
    d774:	00801444 	movi	r2,81
    d778:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d77c:	00bfffc4 	movi	r2,-1
}
    d780:	e037883a 	mov	sp,fp
    d784:	dfc00117 	ldw	ra,4(sp)
    d788:	df000017 	ldw	fp,0(sp)
    d78c:	dec00204 	addi	sp,sp,8
    d790:	f800283a 	ret

0000d794 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d794:	deffdf04 	addi	sp,sp,-132
    d798:	dfc02015 	stw	ra,128(sp)
    d79c:	df001f15 	stw	fp,124(sp)
    d7a0:	df001f04 	addi	fp,sp,124
    d7a4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d7a8:	e0bfe204 	addi	r2,fp,-120
    d7ac:	01003fc4 	movi	r4,255
    d7b0:	100b883a 	mov	r5,r2
    d7b4:	00150300 	call	15030 <OSTaskQuery>
    d7b8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d7bc:	e0bffe83 	ldbu	r2,-6(fp)
    d7c0:	10803fcc 	andi	r2,r2,255
    d7c4:	10000126 	beq	r2,zero,d7cc <__env_lock+0x38>
    return;
    d7c8:	00001d06 	br	d840 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    d7cc:	e0bfee83 	ldbu	r2,-70(fp)
    d7d0:	10803fcc 	andi	r2,r2,255
    d7d4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d7d8:	d0e8b817 	ldw	r3,-23840(gp)
    d7dc:	e0bffd04 	addi	r2,fp,-12
    d7e0:	1809883a 	mov	r4,r3
    d7e4:	100b883a 	mov	r5,r2
    d7e8:	00136c80 	call	136c8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d7ec:	e0bffe43 	ldbu	r2,-7(fp)
    d7f0:	10803fcc 	andi	r2,r2,255
    d7f4:	10000726 	beq	r2,zero,d814 <__env_lock+0x80>
    d7f8:	d0a01017 	ldw	r2,-32704(gp)
    d7fc:	e0ffe117 	ldw	r3,-124(fp)
    d800:	1880041e 	bne	r3,r2,d814 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    d804:	d0a8b717 	ldw	r2,-23844(gp)
    d808:	10800044 	addi	r2,r2,1
    d80c:	d0a8b715 	stw	r2,-23844(gp)
    d810:	00000a06 	br	d83c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d814:	d0e8b817 	ldw	r3,-23840(gp)
    d818:	e0bffe84 	addi	r2,fp,-6
    d81c:	1809883a 	mov	r4,r3
    d820:	000b883a 	mov	r5,zero
    d824:	100d883a 	mov	r6,r2
    d828:	00131e40 	call	131e4 <OSSemPend>
    locks  = 1;
    d82c:	00800044 	movi	r2,1
    d830:	d0a8b715 	stw	r2,-23844(gp)
    lockid = id;
    d834:	e0bfe117 	ldw	r2,-124(fp)
    d838:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d83c:	0001883a 	nop
}
    d840:	e037883a 	mov	sp,fp
    d844:	dfc00117 	ldw	ra,4(sp)
    d848:	df000017 	ldw	fp,0(sp)
    d84c:	dec00204 	addi	sp,sp,8
    d850:	f800283a 	ret

0000d854 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d854:	defffd04 	addi	sp,sp,-12
    d858:	dfc00215 	stw	ra,8(sp)
    d85c:	df000115 	stw	fp,4(sp)
    d860:	df000104 	addi	fp,sp,4
    d864:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    d868:	d0a8b717 	ldw	r2,-23844(gp)
    d86c:	1000011e 	bne	r2,zero,d874 <__env_unlock+0x20>
    return;
    d870:	00000a06 	br	d89c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    d874:	d0a8b717 	ldw	r2,-23844(gp)
    d878:	10bfffc4 	addi	r2,r2,-1
    d87c:	d0a8b715 	stw	r2,-23844(gp)
    d880:	d0a8b717 	ldw	r2,-23844(gp)
    d884:	1000051e 	bne	r2,zero,d89c <__env_unlock+0x48>
  {
    lockid = -1;
    d888:	00bfffc4 	movi	r2,-1
    d88c:	d0a01015 	stw	r2,-32704(gp)
    OSSemPost( alt_envsem );
    d890:	d0a8b817 	ldw	r2,-23840(gp)
    d894:	1009883a 	mov	r4,r2
    d898:	00135b80 	call	135b8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	dfc00117 	ldw	ra,4(sp)
    d8a4:	df000017 	ldw	fp,0(sp)
    d8a8:	dec00204 	addi	sp,sp,8
    d8ac:	f800283a 	ret

0000d8b0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    d8b0:	deffdb04 	addi	sp,sp,-148
    d8b4:	dfc02415 	stw	ra,144(sp)
    d8b8:	df002315 	stw	fp,140(sp)
    d8bc:	df002304 	addi	fp,sp,140
    d8c0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d8c4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    d8c8:	008000b4 	movhi	r2,2
    d8cc:	10b9ba44 	addi	r2,r2,-6423
    d8d0:	10800003 	ldbu	r2,0(r2)
    d8d4:	10803fcc 	andi	r2,r2,255
    d8d8:	10800060 	cmpeqi	r2,r2,1
    d8dc:	1000011e 	bne	r2,zero,d8e4 <__malloc_lock+0x34>
      return;
    d8e0:	00003606 	br	d9bc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d8e4:	e0bfe204 	addi	r2,fp,-120
    d8e8:	01003fc4 	movi	r4,255
    d8ec:	100b883a 	mov	r5,r2
    d8f0:	00150300 	call	15030 <OSTaskQuery>
    d8f4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d8f8:	e0bffe83 	ldbu	r2,-6(fp)
    d8fc:	10803fcc 	andi	r2,r2,255
    d900:	10000126 	beq	r2,zero,d908 <__malloc_lock+0x58>
    return;
    d904:	00002d06 	br	d9bc <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    d908:	e0bfee83 	ldbu	r2,-70(fp)
    d90c:	10803fcc 	andi	r2,r2,255
    d910:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    d914:	d0e8ba17 	ldw	r3,-23832(gp)
    d918:	e0bffd04 	addi	r2,fp,-12
    d91c:	1809883a 	mov	r4,r3
    d920:	100b883a 	mov	r5,r2
    d924:	00136c80 	call	136c8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d928:	0005303a 	rdctl	r2,status
    d92c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d930:	e0ffdf17 	ldw	r3,-132(fp)
    d934:	00bfff84 	movi	r2,-2
    d938:	1884703a 	and	r2,r3,r2
    d93c:	1001703a 	wrctl	status,r2
  
  return context;
    d940:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    d944:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    d948:	e0bffd0b 	ldhu	r2,-12(fp)
    d94c:	10bfffcc 	andi	r2,r2,65535
    d950:	10000b1e 	bne	r2,zero,d980 <__malloc_lock+0xd0>
    d954:	d0a01117 	ldw	r2,-32700(gp)
    d958:	e0ffde17 	ldw	r3,-136(fp)
    d95c:	1880081e 	bne	r3,r2,d980 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    d960:	d0a8b917 	ldw	r2,-23836(gp)
    d964:	10800044 	addi	r2,r2,1
    d968:	d0a8b915 	stw	r2,-23836(gp)
    d96c:	e0bfdd17 	ldw	r2,-140(fp)
    d970:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d974:	e0bfe017 	ldw	r2,-128(fp)
    d978:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    d97c:	00000e06 	br	d9b8 <__malloc_lock+0x108>
    d980:	e0bfdd17 	ldw	r2,-140(fp)
    d984:	e0bfe115 	stw	r2,-124(fp)
    d988:	e0bfe117 	ldw	r2,-124(fp)
    d98c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    d990:	d0e8ba17 	ldw	r3,-23832(gp)
    d994:	e0bffe84 	addi	r2,fp,-6
    d998:	1809883a 	mov	r4,r3
    d99c:	000b883a 	mov	r5,zero
    d9a0:	100d883a 	mov	r6,r2
    d9a4:	00131e40 	call	131e4 <OSSemPend>
    locks  = 1;
    d9a8:	00800044 	movi	r2,1
    d9ac:	d0a8b915 	stw	r2,-23836(gp)
    lockid = id;
    d9b0:	e0bfde17 	ldw	r2,-136(fp)
    d9b4:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d9b8:	0001883a 	nop
}
    d9bc:	e037883a 	mov	sp,fp
    d9c0:	dfc00117 	ldw	ra,4(sp)
    d9c4:	df000017 	ldw	fp,0(sp)
    d9c8:	dec00204 	addi	sp,sp,8
    d9cc:	f800283a 	ret

0000d9d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d9d0:	defff804 	addi	sp,sp,-32
    d9d4:	dfc00715 	stw	ra,28(sp)
    d9d8:	df000615 	stw	fp,24(sp)
    d9dc:	df000604 	addi	fp,sp,24
    d9e0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d9e4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    d9e8:	008000b4 	movhi	r2,2
    d9ec:	10b9ba44 	addi	r2,r2,-6423
    d9f0:	10800003 	ldbu	r2,0(r2)
    d9f4:	10803fcc 	andi	r2,r2,255
    d9f8:	10800060 	cmpeqi	r2,r2,1
    d9fc:	1000011e 	bne	r2,zero,da04 <__malloc_unlock+0x34>
      return;
    da00:	00002206 	br	da8c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da04:	0005303a 	rdctl	r2,status
    da08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da0c:	e0fffb17 	ldw	r3,-20(fp)
    da10:	00bfff84 	movi	r2,-2
    da14:	1884703a 	and	r2,r3,r2
    da18:	1001703a 	wrctl	status,r2
  
  return context;
    da1c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    da20:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    da24:	d0a8b917 	ldw	r2,-23836(gp)
    da28:	1000051e 	bne	r2,zero,da40 <__malloc_unlock+0x70>
    da2c:	e0bffa17 	ldw	r2,-24(fp)
    da30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da34:	e0bffc17 	ldw	r2,-16(fp)
    da38:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    da3c:	00001306 	br	da8c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    da40:	d0a8b917 	ldw	r2,-23836(gp)
    da44:	10bfffc4 	addi	r2,r2,-1
    da48:	d0a8b915 	stw	r2,-23836(gp)
    da4c:	d0a8b917 	ldw	r2,-23836(gp)
    da50:	10000a1e 	bne	r2,zero,da7c <__malloc_unlock+0xac>
  {
    lockid = -1;
    da54:	00bfffc4 	movi	r2,-1
    da58:	d0a01115 	stw	r2,-32700(gp)
    da5c:	e0bffa17 	ldw	r2,-24(fp)
    da60:	e0bffd15 	stw	r2,-12(fp)
    da64:	e0bffd17 	ldw	r2,-12(fp)
    da68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    da6c:	d0a8ba17 	ldw	r2,-23832(gp)
    da70:	1009883a 	mov	r4,r2
    da74:	00135b80 	call	135b8 <OSSemPost>
    da78:	00000406 	br	da8c <__malloc_unlock+0xbc>
    da7c:	e0bffa17 	ldw	r2,-24(fp)
    da80:	e0bffe15 	stw	r2,-8(fp)
    da84:	e0bffe17 	ldw	r2,-8(fp)
    da88:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    da8c:	e037883a 	mov	sp,fp
    da90:	dfc00117 	ldw	ra,4(sp)
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00204 	addi	sp,sp,8
    da9c:	f800283a 	ret

0000daa0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    daa0:	defff704 	addi	sp,sp,-36
    daa4:	dfc00815 	stw	ra,32(sp)
    daa8:	df000715 	stw	fp,28(sp)
    daac:	df000704 	addi	fp,sp,28
    dab0:	e13ffd15 	stw	r4,-12(fp)
    dab4:	e17ffe15 	stw	r5,-8(fp)
    dab8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dabc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dac0:	e0bfff17 	ldw	r2,-4(fp)
    dac4:	1000021e 	bne	r2,zero,dad0 <OSEventNameGet+0x30>
        return (0);
    dac8:	0005883a 	mov	r2,zero
    dacc:	00003706 	br	dbac <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dad0:	e0bffd17 	ldw	r2,-12(fp)
    dad4:	1000051e 	bne	r2,zero,daec <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    dad8:	e0bfff17 	ldw	r2,-4(fp)
    dadc:	00c00104 	movi	r3,4
    dae0:	10c00005 	stb	r3,0(r2)
        return (0);
    dae4:	0005883a 	mov	r2,zero
    dae8:	00003006 	br	dbac <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    daec:	e0bffe17 	ldw	r2,-8(fp)
    daf0:	1000051e 	bne	r2,zero,db08 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    daf4:	e0bfff17 	ldw	r2,-4(fp)
    daf8:	00c00304 	movi	r3,12
    dafc:	10c00005 	stb	r3,0(r2)
        return (0);
    db00:	0005883a 	mov	r2,zero
    db04:	00002906 	br	dbac <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    db08:	d0a8c903 	ldbu	r2,-23772(gp)
    db0c:	10803fcc 	andi	r2,r2,255
    db10:	10000526 	beq	r2,zero,db28 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    db14:	e0bfff17 	ldw	r2,-4(fp)
    db18:	00c00444 	movi	r3,17
    db1c:	10c00005 	stb	r3,0(r2)
        return (0);
    db20:	0005883a 	mov	r2,zero
    db24:	00002106 	br	dbac <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    db28:	e0bffd17 	ldw	r2,-12(fp)
    db2c:	10800003 	ldbu	r2,0(r2)
    db30:	10803fcc 	andi	r2,r2,255
    db34:	10bfffc4 	addi	r2,r2,-1
    db38:	10800128 	cmpgeui	r2,r2,4
    db3c:	10000526 	beq	r2,zero,db54 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    db40:	e0bfff17 	ldw	r2,-4(fp)
    db44:	00c00044 	movi	r3,1
    db48:	10c00005 	stb	r3,0(r2)
             return (0);
    db4c:	0005883a 	mov	r2,zero
    db50:	00001606 	br	dbac <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    db54:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db58:	0005303a 	rdctl	r2,status
    db5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db60:	e0fffb17 	ldw	r3,-20(fp)
    db64:	00bfff84 	movi	r2,-2
    db68:	1884703a 	and	r2,r3,r2
    db6c:	1001703a 	wrctl	status,r2
  
  return context;
    db70:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    db74:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    db78:	e0bffd17 	ldw	r2,-12(fp)
    db7c:	10800384 	addi	r2,r2,14
    db80:	e13ffe17 	ldw	r4,-8(fp)
    db84:	100b883a 	mov	r5,r2
    db88:	000f4f40 	call	f4f4 <OS_StrCopy>
    db8c:	e0bffa05 	stb	r2,-24(fp)
    db90:	e0bff917 	ldw	r2,-28(fp)
    db94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db98:	e0bffc17 	ldw	r2,-16(fp)
    db9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dba0:	e0bfff17 	ldw	r2,-4(fp)
    dba4:	10000005 	stb	zero,0(r2)
    return (len);
    dba8:	e0bffa03 	ldbu	r2,-24(fp)
}
    dbac:	e037883a 	mov	sp,fp
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dbc0:	defff604 	addi	sp,sp,-40
    dbc4:	dfc00915 	stw	ra,36(sp)
    dbc8:	df000815 	stw	fp,32(sp)
    dbcc:	df000804 	addi	fp,sp,32
    dbd0:	e13ffd15 	stw	r4,-12(fp)
    dbd4:	e17ffe15 	stw	r5,-8(fp)
    dbd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dbdc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dbe0:	e0bfff17 	ldw	r2,-4(fp)
    dbe4:	1000011e 	bne	r2,zero,dbec <OSEventNameSet+0x2c>
        return;
    dbe8:	00003f06 	br	dce8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dbec:	e0bffd17 	ldw	r2,-12(fp)
    dbf0:	1000041e 	bne	r2,zero,dc04 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    dbf4:	e0bfff17 	ldw	r2,-4(fp)
    dbf8:	00c00104 	movi	r3,4
    dbfc:	10c00005 	stb	r3,0(r2)
        return;
    dc00:	00003906 	br	dce8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dc04:	e0bffe17 	ldw	r2,-8(fp)
    dc08:	1000041e 	bne	r2,zero,dc1c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    dc0c:	e0bfff17 	ldw	r2,-4(fp)
    dc10:	00c00304 	movi	r3,12
    dc14:	10c00005 	stb	r3,0(r2)
        return;
    dc18:	00003306 	br	dce8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    dc1c:	d0a8c903 	ldbu	r2,-23772(gp)
    dc20:	10803fcc 	andi	r2,r2,255
    dc24:	10000426 	beq	r2,zero,dc38 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    dc28:	e0bfff17 	ldw	r2,-4(fp)
    dc2c:	00c00484 	movi	r3,18
    dc30:	10c00005 	stb	r3,0(r2)
        return;
    dc34:	00002c06 	br	dce8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    dc38:	e0bffd17 	ldw	r2,-12(fp)
    dc3c:	10800003 	ldbu	r2,0(r2)
    dc40:	10803fcc 	andi	r2,r2,255
    dc44:	10bfffc4 	addi	r2,r2,-1
    dc48:	10800128 	cmpgeui	r2,r2,4
    dc4c:	10000426 	beq	r2,zero,dc60 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    dc50:	e0bfff17 	ldw	r2,-4(fp)
    dc54:	00c00044 	movi	r3,1
    dc58:	10c00005 	stb	r3,0(r2)
             return;
    dc5c:	00002206 	br	dce8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dc60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc64:	0005303a 	rdctl	r2,status
    dc68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc6c:	e0fffa17 	ldw	r3,-24(fp)
    dc70:	00bfff84 	movi	r2,-2
    dc74:	1884703a 	and	r2,r3,r2
    dc78:	1001703a 	wrctl	status,r2
  
  return context;
    dc7c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    dc80:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    dc84:	e13ffe17 	ldw	r4,-8(fp)
    dc88:	000f5680 	call	f568 <OS_StrLen>
    dc8c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    dc90:	e0bff903 	ldbu	r2,-28(fp)
    dc94:	10800830 	cmpltui	r2,r2,32
    dc98:	1000081e 	bne	r2,zero,dcbc <OSEventNameSet+0xfc>
    dc9c:	e0bff817 	ldw	r2,-32(fp)
    dca0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dca4:	e0bffb17 	ldw	r2,-20(fp)
    dca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    dcac:	e0bfff17 	ldw	r2,-4(fp)
    dcb0:	00c002c4 	movi	r3,11
    dcb4:	10c00005 	stb	r3,0(r2)
        return;
    dcb8:	00000b06 	br	dce8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    dcbc:	e0bffd17 	ldw	r2,-12(fp)
    dcc0:	10800384 	addi	r2,r2,14
    dcc4:	1009883a 	mov	r4,r2
    dcc8:	e17ffe17 	ldw	r5,-8(fp)
    dccc:	000f4f40 	call	f4f4 <OS_StrCopy>
    dcd0:	e0bff817 	ldw	r2,-32(fp)
    dcd4:	e0bffc15 	stw	r2,-16(fp)
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dce0:	e0bfff17 	ldw	r2,-4(fp)
    dce4:	10000005 	stb	zero,0(r2)
}
    dce8:	e037883a 	mov	sp,fp
    dcec:	dfc00117 	ldw	ra,4(sp)
    dcf0:	df000017 	ldw	fp,0(sp)
    dcf4:	dec00204 	addi	sp,sp,8
    dcf8:	f800283a 	ret

0000dcfc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    dcfc:	deffed04 	addi	sp,sp,-76
    dd00:	dfc01215 	stw	ra,72(sp)
    dd04:	df001115 	stw	fp,68(sp)
    dd08:	df001104 	addi	fp,sp,68
    dd0c:	e13ffc15 	stw	r4,-16(fp)
    dd10:	e17ffd15 	stw	r5,-12(fp)
    dd14:	e1bffe15 	stw	r6,-8(fp)
    dd18:	3805883a 	mov	r2,r7
    dd1c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    dd20:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    dd24:	e0800217 	ldw	r2,8(fp)
    dd28:	1000021e 	bne	r2,zero,dd34 <OSEventPendMulti+0x38>
        return (0);
    dd2c:	0005883a 	mov	r2,zero
    dd30:	00017106 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    dd34:	e0bffc17 	ldw	r2,-16(fp)
    dd38:	1000051e 	bne	r2,zero,dd50 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    dd3c:	e0800217 	ldw	r2,8(fp)
    dd40:	00c00104 	movi	r3,4
    dd44:	10c00005 	stb	r3,0(r2)
        return (0);
    dd48:	0005883a 	mov	r2,zero
    dd4c:	00016a06 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    dd50:	e0bffd17 	ldw	r2,-12(fp)
    dd54:	1000051e 	bne	r2,zero,dd6c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    dd58:	e0800217 	ldw	r2,8(fp)
    dd5c:	00c00104 	movi	r3,4
    dd60:	10c00005 	stb	r3,0(r2)
        return (0);
    dd64:	0005883a 	mov	r2,zero
    dd68:	00016306 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    dd6c:	e0bffe17 	ldw	r2,-8(fp)
    dd70:	1000051e 	bne	r2,zero,dd88 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    dd74:	e0800217 	ldw	r2,8(fp)
    dd78:	00c00104 	movi	r3,4
    dd7c:	10c00005 	stb	r3,0(r2)
        return (0);
    dd80:	0005883a 	mov	r2,zero
    dd84:	00015c06 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    dd88:	e0bffd17 	ldw	r2,-12(fp)
    dd8c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    dd90:	e0bffc17 	ldw	r2,-16(fp)
    dd94:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    dd98:	e0bfef17 	ldw	r2,-68(fp)
    dd9c:	10800017 	ldw	r2,0(r2)
    dda0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    dda4:	00001906 	br	de0c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    dda8:	e0bff017 	ldw	r2,-64(fp)
    ddac:	10800003 	ldbu	r2,0(r2)
    ddb0:	10803fcc 	andi	r2,r2,255
    ddb4:	10c000a0 	cmpeqi	r3,r2,2
    ddb8:	1800091e 	bne	r3,zero,dde0 <OSEventPendMulti+0xe4>
    ddbc:	10c000e0 	cmpeqi	r3,r2,3
    ddc0:	1800091e 	bne	r3,zero,dde8 <OSEventPendMulti+0xec>
    ddc4:	10800060 	cmpeqi	r2,r2,1
    ddc8:	1000091e 	bne	r2,zero,ddf0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    ddcc:	e0800217 	ldw	r2,8(fp)
    ddd0:	00c00044 	movi	r3,1
    ddd4:	10c00005 	stb	r3,0(r2)
                 return (0);
    ddd8:	0005883a 	mov	r2,zero
    dddc:	00014606 	br	e2f8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    dde0:	0001883a 	nop
    dde4:	00000306 	br	ddf4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    dde8:	0001883a 	nop
    ddec:	00000106 	br	ddf4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    ddf0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    ddf4:	e0bfef17 	ldw	r2,-68(fp)
    ddf8:	10800104 	addi	r2,r2,4
    ddfc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    de00:	e0bfef17 	ldw	r2,-68(fp)
    de04:	10800017 	ldw	r2,0(r2)
    de08:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    de0c:	e0bff017 	ldw	r2,-64(fp)
    de10:	103fe51e 	bne	r2,zero,dda8 <__alt_mem_Flash_flash_data+0xf400dda8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    de14:	d0a8c903 	ldbu	r2,-23772(gp)
    de18:	10803fcc 	andi	r2,r2,255
    de1c:	10000526 	beq	r2,zero,de34 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    de20:	e0800217 	ldw	r2,8(fp)
    de24:	00c00084 	movi	r3,2
    de28:	10c00005 	stb	r3,0(r2)
        return (0);
    de2c:	0005883a 	mov	r2,zero
    de30:	00013106 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    de34:	d0a8bb03 	ldbu	r2,-23828(gp)
    de38:	10803fcc 	andi	r2,r2,255
    de3c:	10000526 	beq	r2,zero,de54 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    de40:	e0800217 	ldw	r2,8(fp)
    de44:	00c00344 	movi	r3,13
    de48:	10c00005 	stb	r3,0(r2)
        return (0);
    de4c:	0005883a 	mov	r2,zero
    de50:	00012906 	br	e2f8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de54:	0005303a 	rdctl	r2,status
    de58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de5c:	e0fff517 	ldw	r3,-44(fp)
    de60:	00bfff84 	movi	r2,-2
    de64:	1884703a 	and	r2,r3,r2
    de68:	1001703a 	wrctl	status,r2
  
  return context;
    de6c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    de70:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    de74:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    de78:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    de7c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    de80:	e0bffc17 	ldw	r2,-16(fp)
    de84:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    de88:	e0bfef17 	ldw	r2,-68(fp)
    de8c:	10800017 	ldw	r2,0(r2)
    de90:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    de94:	00008106 	br	e09c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    de98:	e0bff017 	ldw	r2,-64(fp)
    de9c:	10800003 	ldbu	r2,0(r2)
    dea0:	10803fcc 	andi	r2,r2,255
    dea4:	10c000a0 	cmpeqi	r3,r2,2
    dea8:	18003c1e 	bne	r3,zero,df9c <OSEventPendMulti+0x2a0>
    deac:	10c000e0 	cmpeqi	r3,r2,3
    deb0:	1800031e 	bne	r3,zero,dec0 <OSEventPendMulti+0x1c4>
    deb4:	10800060 	cmpeqi	r2,r2,1
    deb8:	10001e1e 	bne	r2,zero,df34 <OSEventPendMulti+0x238>
    debc:	00006606 	br	e058 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    dec0:	e0bff017 	ldw	r2,-64(fp)
    dec4:	1080020b 	ldhu	r2,8(r2)
    dec8:	10bfffcc 	andi	r2,r2,65535
    decc:	10001526 	beq	r2,zero,df24 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    ded0:	e0bff017 	ldw	r2,-64(fp)
    ded4:	1080020b 	ldhu	r2,8(r2)
    ded8:	10bfffc4 	addi	r2,r2,-1
    dedc:	1007883a 	mov	r3,r2
    dee0:	e0bff017 	ldw	r2,-64(fp)
    dee4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    dee8:	e0bffd17 	ldw	r2,-12(fp)
    deec:	10c00104 	addi	r3,r2,4
    def0:	e0fffd15 	stw	r3,-12(fp)
    def4:	e0fff017 	ldw	r3,-64(fp)
    def8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    defc:	00800044 	movi	r2,1
    df00:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    df04:	e0bffe17 	ldw	r2,-8(fp)
    df08:	10c00104 	addi	r3,r2,4
    df0c:	e0fffe15 	stw	r3,-8(fp)
    df10:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    df14:	e0bff18b 	ldhu	r2,-58(fp)
    df18:	10800044 	addi	r2,r2,1
    df1c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    df20:	00005806 	br	e084 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    df24:	e0bff203 	ldbu	r2,-56(fp)
    df28:	10800054 	ori	r2,r2,1
    df2c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    df30:	00005406 	br	e084 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    df34:	e0bff017 	ldw	r2,-64(fp)
    df38:	10800117 	ldw	r2,4(r2)
    df3c:	10001326 	beq	r2,zero,df8c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    df40:	e0bffe17 	ldw	r2,-8(fp)
    df44:	10c00104 	addi	r3,r2,4
    df48:	e0fffe15 	stw	r3,-8(fp)
    df4c:	e0fff017 	ldw	r3,-64(fp)
    df50:	18c00117 	ldw	r3,4(r3)
    df54:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    df58:	e0bff017 	ldw	r2,-64(fp)
    df5c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    df60:	e0bffd17 	ldw	r2,-12(fp)
    df64:	10c00104 	addi	r3,r2,4
    df68:	e0fffd15 	stw	r3,-12(fp)
    df6c:	e0fff017 	ldw	r3,-64(fp)
    df70:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    df74:	00800044 	movi	r2,1
    df78:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    df7c:	e0bff18b 	ldhu	r2,-58(fp)
    df80:	10800044 	addi	r2,r2,1
    df84:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    df88:	00003e06 	br	e084 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    df8c:	e0bff203 	ldbu	r2,-56(fp)
    df90:	10800094 	ori	r2,r2,2
    df94:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    df98:	00003a06 	br	e084 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    df9c:	e0bff017 	ldw	r2,-64(fp)
    dfa0:	10800117 	ldw	r2,4(r2)
    dfa4:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    dfa8:	e0bff417 	ldw	r2,-48(fp)
    dfac:	1080058b 	ldhu	r2,22(r2)
    dfb0:	10bfffcc 	andi	r2,r2,65535
    dfb4:	10002426 	beq	r2,zero,e048 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    dfb8:	e0bffe17 	ldw	r2,-8(fp)
    dfbc:	10c00104 	addi	r3,r2,4
    dfc0:	e0fffe15 	stw	r3,-8(fp)
    dfc4:	e0fff417 	ldw	r3,-48(fp)
    dfc8:	18c00417 	ldw	r3,16(r3)
    dfcc:	19400104 	addi	r5,r3,4
    dfd0:	e13ff417 	ldw	r4,-48(fp)
    dfd4:	21400415 	stw	r5,16(r4)
    dfd8:	18c00017 	ldw	r3,0(r3)
    dfdc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    dfe0:	e0bff417 	ldw	r2,-48(fp)
    dfe4:	10c00417 	ldw	r3,16(r2)
    dfe8:	e0bff417 	ldw	r2,-48(fp)
    dfec:	10800217 	ldw	r2,8(r2)
    dff0:	1880041e 	bne	r3,r2,e004 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    dff4:	e0bff417 	ldw	r2,-48(fp)
    dff8:	10c00117 	ldw	r3,4(r2)
    dffc:	e0bff417 	ldw	r2,-48(fp)
    e000:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e004:	e0bff417 	ldw	r2,-48(fp)
    e008:	1080058b 	ldhu	r2,22(r2)
    e00c:	10bfffc4 	addi	r2,r2,-1
    e010:	1007883a 	mov	r3,r2
    e014:	e0bff417 	ldw	r2,-48(fp)
    e018:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e01c:	e0bffd17 	ldw	r2,-12(fp)
    e020:	10c00104 	addi	r3,r2,4
    e024:	e0fffd15 	stw	r3,-12(fp)
    e028:	e0fff017 	ldw	r3,-64(fp)
    e02c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e030:	00800044 	movi	r2,1
    e034:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e038:	e0bff18b 	ldhu	r2,-58(fp)
    e03c:	10800044 	addi	r2,r2,1
    e040:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e044:	00000f06 	br	e084 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e048:	e0bff203 	ldbu	r2,-56(fp)
    e04c:	10800114 	ori	r2,r2,4
    e050:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e054:	00000b06 	br	e084 <OSEventPendMulti+0x388>
    e058:	e0bff317 	ldw	r2,-52(fp)
    e05c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e060:	e0bff617 	ldw	r2,-40(fp)
    e064:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e068:	e0bffd17 	ldw	r2,-12(fp)
    e06c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e070:	e0800217 	ldw	r2,8(fp)
    e074:	00c00044 	movi	r3,1
    e078:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e07c:	e0bff18b 	ldhu	r2,-58(fp)
    e080:	00009d06 	br	e2f8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e084:	e0bfef17 	ldw	r2,-68(fp)
    e088:	10800104 	addi	r2,r2,4
    e08c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e090:	e0bfef17 	ldw	r2,-68(fp)
    e094:	10800017 	ldw	r2,0(r2)
    e098:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e09c:	e0bff017 	ldw	r2,-64(fp)
    e0a0:	103f7d1e 	bne	r2,zero,de98 <__alt_mem_Flash_flash_data+0xf400de98>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e0a4:	e0bff103 	ldbu	r2,-60(fp)
    e0a8:	10800058 	cmpnei	r2,r2,1
    e0ac:	10000a1e 	bne	r2,zero,e0d8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e0b0:	e0bffd17 	ldw	r2,-12(fp)
    e0b4:	10000015 	stw	zero,0(r2)
    e0b8:	e0bff317 	ldw	r2,-52(fp)
    e0bc:	e0bff715 	stw	r2,-36(fp)
    e0c0:	e0bff717 	ldw	r2,-36(fp)
    e0c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e0c8:	e0800217 	ldw	r2,8(fp)
    e0cc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e0d0:	e0bff18b 	ldhu	r2,-58(fp)
    e0d4:	00008806 	br	e2f8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e0d8:	d0a8ca17 	ldw	r2,-23768(gp)
    e0dc:	d0e8ca17 	ldw	r3,-23768(gp)
    e0e0:	19000c03 	ldbu	r4,48(r3)
    e0e4:	e0fff203 	ldbu	r3,-56(fp)
    e0e8:	20c6b03a 	or	r3,r4,r3
    e0ec:	1809883a 	mov	r4,r3
    e0f0:	00ffe004 	movi	r3,-128
    e0f4:	20c6b03a 	or	r3,r4,r3
    e0f8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e0fc:	d0a8ca17 	ldw	r2,-23768(gp)
    e100:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e104:	d0a8ca17 	ldw	r2,-23768(gp)
    e108:	e0ffff0b 	ldhu	r3,-4(fp)
    e10c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e110:	e13ffc17 	ldw	r4,-16(fp)
    e114:	000ec440 	call	ec44 <OS_EventTaskWaitMulti>
    e118:	e0bff317 	ldw	r2,-52(fp)
    e11c:	e0bff815 	stw	r2,-32(fp)
    e120:	e0bff817 	ldw	r2,-32(fp)
    e124:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e128:	000f3b80 	call	f3b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e12c:	0005303a 	rdctl	r2,status
    e130:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e134:	e0fff917 	ldw	r3,-28(fp)
    e138:	00bfff84 	movi	r2,-2
    e13c:	1884703a 	and	r2,r3,r2
    e140:	1001703a 	wrctl	status,r2
  
  return context;
    e144:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    e148:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e14c:	d0a8ca17 	ldw	r2,-23768(gp)
    e150:	10800c43 	ldbu	r2,49(r2)
    e154:	10803fcc 	andi	r2,r2,255
    e158:	10000226 	beq	r2,zero,e164 <OSEventPendMulti+0x468>
    e15c:	108000a0 	cmpeqi	r2,r2,2
    e160:	10001826 	beq	r2,zero,e1c4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e164:	d0a8ca17 	ldw	r2,-23768(gp)
    e168:	10800717 	ldw	r2,28(r2)
    e16c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e170:	e0bff017 	ldw	r2,-64(fp)
    e174:	10000b26 	beq	r2,zero,e1a4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e178:	e0bffd17 	ldw	r2,-12(fp)
    e17c:	10c00104 	addi	r3,r2,4
    e180:	e0fffd15 	stw	r3,-12(fp)
    e184:	e0fff017 	ldw	r3,-64(fp)
    e188:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e18c:	e0bffd17 	ldw	r2,-12(fp)
    e190:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e194:	e0bff18b 	ldhu	r2,-58(fp)
    e198:	10800044 	addi	r2,r2,1
    e19c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e1a0:	00000d06 	br	e1d8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e1a4:	d0a8ca17 	ldw	r2,-23768(gp)
    e1a8:	00c00044 	movi	r3,1
    e1ac:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e1b0:	d0a8ca17 	ldw	r2,-23768(gp)
    e1b4:	1009883a 	mov	r4,r2
    e1b8:	e17ffc17 	ldw	r5,-16(fp)
    e1bc:	000ee440 	call	ee44 <OS_EventTaskRemoveMulti>
             }
			 break;
    e1c0:	00000506 	br	e1d8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e1c4:	d0a8ca17 	ldw	r2,-23768(gp)
    e1c8:	1009883a 	mov	r4,r2
    e1cc:	e17ffc17 	ldw	r5,-16(fp)
    e1d0:	000ee440 	call	ee44 <OS_EventTaskRemoveMulti>
             break;
    e1d4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e1d8:	d0a8ca17 	ldw	r2,-23768(gp)
    e1dc:	10800c43 	ldbu	r2,49(r2)
    e1e0:	10803fcc 	andi	r2,r2,255
    e1e4:	10000326 	beq	r2,zero,e1f4 <OSEventPendMulti+0x4f8>
    e1e8:	108000a0 	cmpeqi	r2,r2,2
    e1ec:	1000231e 	bne	r2,zero,e27c <OSEventPendMulti+0x580>
    e1f0:	00002a06 	br	e29c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e1f4:	e0bff017 	ldw	r2,-64(fp)
    e1f8:	10800003 	ldbu	r2,0(r2)
    e1fc:	10803fcc 	andi	r2,r2,255
    e200:	0080100e 	bge	zero,r2,e244 <OSEventPendMulti+0x548>
    e204:	10c000d0 	cmplti	r3,r2,3
    e208:	1800071e 	bne	r3,zero,e228 <OSEventPendMulti+0x52c>
    e20c:	108000e0 	cmpeqi	r2,r2,3
    e210:	10000c26 	beq	r2,zero,e244 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e214:	e0bffe17 	ldw	r2,-8(fp)
    e218:	10c00104 	addi	r3,r2,4
    e21c:	e0fffe15 	stw	r3,-8(fp)
    e220:	10000015 	stw	zero,0(r2)
                      break;
    e224:	00001206 	br	e270 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e228:	e0bffe17 	ldw	r2,-8(fp)
    e22c:	10c00104 	addi	r3,r2,4
    e230:	e0fffe15 	stw	r3,-8(fp)
    e234:	d0e8ca17 	ldw	r3,-23768(gp)
    e238:	18c00917 	ldw	r3,36(r3)
    e23c:	10c00015 	stw	r3,0(r2)
                      break;
    e240:	00000b06 	br	e270 <OSEventPendMulti+0x574>
    e244:	e0bff317 	ldw	r2,-52(fp)
    e248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e24c:	e0bffa17 	ldw	r2,-24(fp)
    e250:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e254:	e0bffd17 	ldw	r2,-12(fp)
    e258:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e25c:	e0800217 	ldw	r2,8(fp)
    e260:	00c00044 	movi	r3,1
    e264:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e268:	e0bff18b 	ldhu	r2,-58(fp)
    e26c:	00002206 	br	e2f8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e270:	e0800217 	ldw	r2,8(fp)
    e274:	10000005 	stb	zero,0(r2)
             break;
    e278:	00001006 	br	e2bc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e27c:	e0bffe17 	ldw	r2,-8(fp)
    e280:	10c00104 	addi	r3,r2,4
    e284:	e0fffe15 	stw	r3,-8(fp)
    e288:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e28c:	e0800217 	ldw	r2,8(fp)
    e290:	00c00384 	movi	r3,14
    e294:	10c00005 	stb	r3,0(r2)
             break;
    e298:	00000806 	br	e2bc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	10c00104 	addi	r3,r2,4
    e2a4:	e0fffe15 	stw	r3,-8(fp)
    e2a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e2ac:	e0800217 	ldw	r2,8(fp)
    e2b0:	00c00284 	movi	r3,10
    e2b4:	10c00005 	stb	r3,0(r2)
             break;
    e2b8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e2bc:	d0a8ca17 	ldw	r2,-23768(gp)
    e2c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e2c4:	d0a8ca17 	ldw	r2,-23768(gp)
    e2c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e2cc:	d0a8ca17 	ldw	r2,-23768(gp)
    e2d0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e2d4:	d0a8ca17 	ldw	r2,-23768(gp)
    e2d8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e2dc:	d0a8ca17 	ldw	r2,-23768(gp)
    e2e0:	10000915 	stw	zero,36(r2)
    e2e4:	e0bff317 	ldw	r2,-52(fp)
    e2e8:	e0bffb15 	stw	r2,-20(fp)
    e2ec:	e0bffb17 	ldw	r2,-20(fp)
    e2f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e2f4:	e0bff18b 	ldhu	r2,-58(fp)
}
    e2f8:	e037883a 	mov	sp,fp
    e2fc:	dfc00117 	ldw	ra,4(sp)
    e300:	df000017 	ldw	fp,0(sp)
    e304:	dec00204 	addi	sp,sp,8
    e308:	f800283a 	ret

0000e30c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e30c:	defffe04 	addi	sp,sp,-8
    e310:	dfc00115 	stw	ra,4(sp)
    e314:	df000015 	stw	fp,0(sp)
    e318:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e31c:	00192d40 	call	192d4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e320:	000f0800 	call	f080 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e324:	000f0c40 	call	f0c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e328:	000f2240 	call	f224 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e32c:	000efa40 	call	efa4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e330:	00111a40 	call	111a4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e334:	0011aec0 	call	11aec <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e338:	0012d200 	call	12d20 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e33c:	000f12c0 	call	f12c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e340:	000f1a80 	call	f1a8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e344:	00192f00 	call	192f0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e348:	000fa900 	call	fa90 <OSDebugInit>
#endif
}
    e34c:	e037883a 	mov	sp,fp
    e350:	dfc00117 	ldw	ra,4(sp)
    e354:	df000017 	ldw	fp,0(sp)
    e358:	dec00204 	addi	sp,sp,8
    e35c:	f800283a 	ret

0000e360 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e360:	defffc04 	addi	sp,sp,-16
    e364:	df000315 	stw	fp,12(sp)
    e368:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e36c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    e370:	d0a8bb43 	ldbu	r2,-23827(gp)
    e374:	10803fcc 	andi	r2,r2,255
    e378:	10800058 	cmpnei	r2,r2,1
    e37c:	1000131e 	bne	r2,zero,e3cc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e380:	0005303a 	rdctl	r2,status
    e384:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e388:	e0fffe17 	ldw	r3,-8(fp)
    e38c:	00bfff84 	movi	r2,-2
    e390:	1884703a 	and	r2,r3,r2
    e394:	1001703a 	wrctl	status,r2
  
  return context;
    e398:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e39c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    e3a0:	d0a8c903 	ldbu	r2,-23772(gp)
    e3a4:	10803fcc 	andi	r2,r2,255
    e3a8:	10803fe0 	cmpeqi	r2,r2,255
    e3ac:	1000031e 	bne	r2,zero,e3bc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e3b0:	d0a8c903 	ldbu	r2,-23772(gp)
    e3b4:	10800044 	addi	r2,r2,1
    e3b8:	d0a8c905 	stb	r2,-23772(gp)
    e3bc:	e0bffd17 	ldw	r2,-12(fp)
    e3c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3c4:	e0bfff17 	ldw	r2,-4(fp)
    e3c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    e3cc:	e037883a 	mov	sp,fp
    e3d0:	df000017 	ldw	fp,0(sp)
    e3d4:	dec00104 	addi	sp,sp,4
    e3d8:	f800283a 	ret

0000e3dc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e3dc:	defffb04 	addi	sp,sp,-20
    e3e0:	dfc00415 	stw	ra,16(sp)
    e3e4:	df000315 	stw	fp,12(sp)
    e3e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e3ec:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e3f0:	d0a8bb43 	ldbu	r2,-23827(gp)
    e3f4:	10803fcc 	andi	r2,r2,255
    e3f8:	10800058 	cmpnei	r2,r2,1
    e3fc:	10002f1e 	bne	r2,zero,e4bc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e400:	0005303a 	rdctl	r2,status
    e404:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e408:	e0fffe17 	ldw	r3,-8(fp)
    e40c:	00bfff84 	movi	r2,-2
    e410:	1884703a 	and	r2,r3,r2
    e414:	1001703a 	wrctl	status,r2
  
  return context;
    e418:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e41c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e420:	d0a8c903 	ldbu	r2,-23772(gp)
    e424:	10803fcc 	andi	r2,r2,255
    e428:	10000326 	beq	r2,zero,e438 <OSIntExit+0x5c>
            OSIntNesting--;
    e42c:	d0a8c903 	ldbu	r2,-23772(gp)
    e430:	10bfffc4 	addi	r2,r2,-1
    e434:	d0a8c905 	stb	r2,-23772(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e438:	d0a8c903 	ldbu	r2,-23772(gp)
    e43c:	10803fcc 	andi	r2,r2,255
    e440:	10001a1e 	bne	r2,zero,e4ac <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e444:	d0a8bb03 	ldbu	r2,-23828(gp)
    e448:	10803fcc 	andi	r2,r2,255
    e44c:	1000171e 	bne	r2,zero,e4ac <OSIntExit+0xd0>
                OS_SchedNew();
    e450:	000f4840 	call	f484 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e454:	d0e8bd03 	ldbu	r3,-23820(gp)
    e458:	d0a8bd43 	ldbu	r2,-23819(gp)
    e45c:	18c03fcc 	andi	r3,r3,255
    e460:	10803fcc 	andi	r2,r2,255
    e464:	18801126 	beq	r3,r2,e4ac <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e468:	d0a8bd03 	ldbu	r2,-23820(gp)
    e46c:	10c03fcc 	andi	r3,r2,255
    e470:	008000b4 	movhi	r2,2
    e474:	10965b04 	addi	r2,r2,22892
    e478:	18c7883a 	add	r3,r3,r3
    e47c:	18c7883a 	add	r3,r3,r3
    e480:	10c5883a 	add	r2,r2,r3
    e484:	10800017 	ldw	r2,0(r2)
    e488:	d0a8c515 	stw	r2,-23788(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e48c:	d0a8c517 	ldw	r2,-23788(gp)
    e490:	10c00e17 	ldw	r3,56(r2)
    e494:	18c00044 	addi	r3,r3,1
    e498:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e49c:	d0a8c017 	ldw	r2,-23808(gp)
    e4a0:	10800044 	addi	r2,r2,1
    e4a4:	d0a8c015 	stw	r2,-23808(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e4a8:	00190140 	call	19014 <OSCtxSw>
    e4ac:	e0bffd17 	ldw	r2,-12(fp)
    e4b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4b4:	e0bfff17 	ldw	r2,-4(fp)
    e4b8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e4bc:	e037883a 	mov	sp,fp
    e4c0:	dfc00117 	ldw	ra,4(sp)
    e4c4:	df000017 	ldw	fp,0(sp)
    e4c8:	dec00204 	addi	sp,sp,8
    e4cc:	f800283a 	ret

0000e4d0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e4d0:	defffc04 	addi	sp,sp,-16
    e4d4:	df000315 	stw	fp,12(sp)
    e4d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e4dc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e4e0:	d0a8bb43 	ldbu	r2,-23827(gp)
    e4e4:	10803fcc 	andi	r2,r2,255
    e4e8:	10800058 	cmpnei	r2,r2,1
    e4ec:	1000161e 	bne	r2,zero,e548 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e4f0:	0005303a 	rdctl	r2,status
    e4f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4f8:	e0fffe17 	ldw	r3,-8(fp)
    e4fc:	00bfff84 	movi	r2,-2
    e500:	1884703a 	and	r2,r3,r2
    e504:	1001703a 	wrctl	status,r2
  
  return context;
    e508:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e50c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e510:	d0a8c903 	ldbu	r2,-23772(gp)
    e514:	10803fcc 	andi	r2,r2,255
    e518:	1000071e 	bne	r2,zero,e538 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e51c:	d0a8bb03 	ldbu	r2,-23828(gp)
    e520:	10803fcc 	andi	r2,r2,255
    e524:	10803fe0 	cmpeqi	r2,r2,255
    e528:	1000031e 	bne	r2,zero,e538 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e52c:	d0a8bb03 	ldbu	r2,-23828(gp)
    e530:	10800044 	addi	r2,r2,1
    e534:	d0a8bb05 	stb	r2,-23828(gp)
    e538:	e0bffd17 	ldw	r2,-12(fp)
    e53c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e540:	e0bfff17 	ldw	r2,-4(fp)
    e544:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e548:	e037883a 	mov	sp,fp
    e54c:	df000017 	ldw	fp,0(sp)
    e550:	dec00104 	addi	sp,sp,4
    e554:	f800283a 	ret

0000e558 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e558:	defff804 	addi	sp,sp,-32
    e55c:	dfc00715 	stw	ra,28(sp)
    e560:	df000615 	stw	fp,24(sp)
    e564:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e568:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e56c:	d0a8bb43 	ldbu	r2,-23827(gp)
    e570:	10803fcc 	andi	r2,r2,255
    e574:	10800058 	cmpnei	r2,r2,1
    e578:	1000281e 	bne	r2,zero,e61c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e57c:	0005303a 	rdctl	r2,status
    e580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e584:	e0fffb17 	ldw	r3,-20(fp)
    e588:	00bfff84 	movi	r2,-2
    e58c:	1884703a 	and	r2,r3,r2
    e590:	1001703a 	wrctl	status,r2
  
  return context;
    e594:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    e598:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e59c:	d0a8bb03 	ldbu	r2,-23828(gp)
    e5a0:	10803fcc 	andi	r2,r2,255
    e5a4:	10001926 	beq	r2,zero,e60c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e5a8:	d0a8bb03 	ldbu	r2,-23828(gp)
    e5ac:	10bfffc4 	addi	r2,r2,-1
    e5b0:	d0a8bb05 	stb	r2,-23828(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e5b4:	d0a8bb03 	ldbu	r2,-23828(gp)
    e5b8:	10803fcc 	andi	r2,r2,255
    e5bc:	10000e1e 	bne	r2,zero,e5f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e5c0:	d0a8c903 	ldbu	r2,-23772(gp)
    e5c4:	10803fcc 	andi	r2,r2,255
    e5c8:	1000061e 	bne	r2,zero,e5e4 <OSSchedUnlock+0x8c>
    e5cc:	e0bffa17 	ldw	r2,-24(fp)
    e5d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5d4:	e0bffc17 	ldw	r2,-16(fp)
    e5d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e5dc:	000f3b80 	call	f3b8 <OS_Sched>
    e5e0:	00000e06 	br	e61c <OSSchedUnlock+0xc4>
    e5e4:	e0bffa17 	ldw	r2,-24(fp)
    e5e8:	e0bffd15 	stw	r2,-12(fp)
    e5ec:	e0bffd17 	ldw	r2,-12(fp)
    e5f0:	1001703a 	wrctl	status,r2
    e5f4:	00000906 	br	e61c <OSSchedUnlock+0xc4>
    e5f8:	e0bffa17 	ldw	r2,-24(fp)
    e5fc:	e0bffe15 	stw	r2,-8(fp)
    e600:	e0bffe17 	ldw	r2,-8(fp)
    e604:	1001703a 	wrctl	status,r2
    e608:	00000406 	br	e61c <OSSchedUnlock+0xc4>
    e60c:	e0bffa17 	ldw	r2,-24(fp)
    e610:	e0bfff15 	stw	r2,-4(fp)
    e614:	e0bfff17 	ldw	r2,-4(fp)
    e618:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e61c:	e037883a 	mov	sp,fp
    e620:	dfc00117 	ldw	ra,4(sp)
    e624:	df000017 	ldw	fp,0(sp)
    e628:	dec00204 	addi	sp,sp,8
    e62c:	f800283a 	ret

0000e630 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e630:	defffe04 	addi	sp,sp,-8
    e634:	dfc00115 	stw	ra,4(sp)
    e638:	df000015 	stw	fp,0(sp)
    e63c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e640:	d0a8bb43 	ldbu	r2,-23827(gp)
    e644:	10803fcc 	andi	r2,r2,255
    e648:	10000f1e 	bne	r2,zero,e688 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e64c:	000f4840 	call	f484 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e650:	d0a8bd03 	ldbu	r2,-23820(gp)
    e654:	d0a8bd45 	stb	r2,-23819(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e658:	d0a8bd03 	ldbu	r2,-23820(gp)
    e65c:	10c03fcc 	andi	r3,r2,255
    e660:	008000b4 	movhi	r2,2
    e664:	10965b04 	addi	r2,r2,22892
    e668:	18c7883a 	add	r3,r3,r3
    e66c:	18c7883a 	add	r3,r3,r3
    e670:	10c5883a 	add	r2,r2,r3
    e674:	10800017 	ldw	r2,0(r2)
    e678:	d0a8c515 	stw	r2,-23788(gp)
        OSTCBCur      = OSTCBHighRdy;
    e67c:	d0a8c517 	ldw	r2,-23788(gp)
    e680:	d0a8ca15 	stw	r2,-23768(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e684:	00190a00 	call	190a0 <OSStartHighRdy>
    }
}
    e688:	e037883a 	mov	sp,fp
    e68c:	dfc00117 	ldw	ra,4(sp)
    e690:	df000017 	ldw	fp,0(sp)
    e694:	dec00204 	addi	sp,sp,8
    e698:	f800283a 	ret

0000e69c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e69c:	defff904 	addi	sp,sp,-28
    e6a0:	dfc00615 	stw	ra,24(sp)
    e6a4:	df000515 	stw	fp,20(sp)
    e6a8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e6ac:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e6b0:	01000084 	movi	r4,2
    e6b4:	00151c80 	call	151c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6b8:	0005303a 	rdctl	r2,status
    e6bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6c0:	e0fffc17 	ldw	r3,-16(fp)
    e6c4:	00bfff84 	movi	r2,-2
    e6c8:	1884703a 	and	r2,r3,r2
    e6cc:	1001703a 	wrctl	status,r2
  
  return context;
    e6d0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e6d4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e6d8:	d028bc15 	stw	zero,-23824(gp)
    e6dc:	e0bffb17 	ldw	r2,-20(fp)
    e6e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6e4:	e0bffd17 	ldw	r2,-12(fp)
    e6e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e6ec:	0009883a 	mov	r4,zero
    e6f0:	00151c80 	call	151c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6f4:	0005303a 	rdctl	r2,status
    e6f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6fc:	e0fffe17 	ldw	r3,-8(fp)
    e700:	00bfff84 	movi	r2,-2
    e704:	1884703a 	and	r2,r3,r2
    e708:	1001703a 	wrctl	status,r2
  
  return context;
    e70c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e710:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e714:	d0a8bc17 	ldw	r2,-23824(gp)
    e718:	d0a8c115 	stw	r2,-23804(gp)
    OSStatRdy    = OS_TRUE;
    e71c:	00800044 	movi	r2,1
    e720:	d0a8cd05 	stb	r2,-23756(gp)
    e724:	e0bffb17 	ldw	r2,-20(fp)
    e728:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e72c:	e0bfff17 	ldw	r2,-4(fp)
    e730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e734:	e037883a 	mov	sp,fp
    e738:	dfc00117 	ldw	ra,4(sp)
    e73c:	df000017 	ldw	fp,0(sp)
    e740:	dec00204 	addi	sp,sp,8
    e744:	f800283a 	ret

0000e748 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e748:	defff704 	addi	sp,sp,-36
    e74c:	dfc00815 	stw	ra,32(sp)
    e750:	df000715 	stw	fp,28(sp)
    e754:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e758:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e75c:	00192b80 	call	192b8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e760:	0005303a 	rdctl	r2,status
    e764:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e768:	e0fffc17 	ldw	r3,-16(fp)
    e76c:	00bfff84 	movi	r2,-2
    e770:	1884703a 	and	r2,r3,r2
    e774:	1001703a 	wrctl	status,r2
  
  return context;
    e778:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e77c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e780:	d0a8cb17 	ldw	r2,-23764(gp)
    e784:	10800044 	addi	r2,r2,1
    e788:	d0a8cb15 	stw	r2,-23764(gp)
    e78c:	e0bffb17 	ldw	r2,-20(fp)
    e790:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e794:	e0bffd17 	ldw	r2,-12(fp)
    e798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e79c:	d0a8bb43 	ldbu	r2,-23827(gp)
    e7a0:	10803fcc 	andi	r2,r2,255
    e7a4:	10800058 	cmpnei	r2,r2,1
    e7a8:	1000691e 	bne	r2,zero,e950 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e7ac:	d0a8bf03 	ldbu	r2,-23812(gp)
    e7b0:	10803fcc 	andi	r2,r2,255
    e7b4:	10c00060 	cmpeqi	r3,r2,1
    e7b8:	1800061e 	bne	r3,zero,e7d4 <OSTimeTick+0x8c>
    e7bc:	10c000a0 	cmpeqi	r3,r2,2
    e7c0:	1800061e 	bne	r3,zero,e7dc <OSTimeTick+0x94>
    e7c4:	10000a1e 	bne	r2,zero,e7f0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e7c8:	00800044 	movi	r2,1
    e7cc:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e7d0:	00000b06 	br	e800 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e7d4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e7d8:	00000906 	br	e800 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e7dc:	00800044 	movi	r2,1
    e7e0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e7e4:	00800044 	movi	r2,1
    e7e8:	d0a8bf05 	stb	r2,-23812(gp)
                 break;
    e7ec:	00000406 	br	e800 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e7f0:	00800044 	movi	r2,1
    e7f4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e7f8:	d028bf05 	stb	zero,-23812(gp)
                 break;
    e7fc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e800:	e0bffa03 	ldbu	r2,-24(fp)
    e804:	1000011e 	bne	r2,zero,e80c <OSTimeTick+0xc4>
            return;
    e808:	00005106 	br	e950 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e80c:	d0a8be17 	ldw	r2,-23816(gp)
    e810:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e814:	00004906 	br	e93c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e818:	0005303a 	rdctl	r2,status
    e81c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e820:	e0fffe17 	ldw	r3,-8(fp)
    e824:	00bfff84 	movi	r2,-2
    e828:	1884703a 	and	r2,r3,r2
    e82c:	1001703a 	wrctl	status,r2
  
  return context;
    e830:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    e834:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e838:	e0bff917 	ldw	r2,-28(fp)
    e83c:	10800b8b 	ldhu	r2,46(r2)
    e840:	10bfffcc 	andi	r2,r2,65535
    e844:	10003626 	beq	r2,zero,e920 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e848:	e0bff917 	ldw	r2,-28(fp)
    e84c:	10800b8b 	ldhu	r2,46(r2)
    e850:	10bfffc4 	addi	r2,r2,-1
    e854:	1007883a 	mov	r3,r2
    e858:	e0bff917 	ldw	r2,-28(fp)
    e85c:	10c00b8d 	sth	r3,46(r2)
    e860:	e0bff917 	ldw	r2,-28(fp)
    e864:	10800b8b 	ldhu	r2,46(r2)
    e868:	10bfffcc 	andi	r2,r2,65535
    e86c:	10002c1e 	bne	r2,zero,e920 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    e870:	e0bff917 	ldw	r2,-28(fp)
    e874:	10800c03 	ldbu	r2,48(r2)
    e878:	10803fcc 	andi	r2,r2,255
    e87c:	10800dcc 	andi	r2,r2,55
    e880:	10000b26 	beq	r2,zero,e8b0 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    e884:	e0bff917 	ldw	r2,-28(fp)
    e888:	10c00c03 	ldbu	r3,48(r2)
    e88c:	00bff204 	movi	r2,-56
    e890:	1884703a 	and	r2,r3,r2
    e894:	1007883a 	mov	r3,r2
    e898:	e0bff917 	ldw	r2,-28(fp)
    e89c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    e8a0:	e0bff917 	ldw	r2,-28(fp)
    e8a4:	00c00044 	movi	r3,1
    e8a8:	10c00c45 	stb	r3,49(r2)
    e8ac:	00000206 	br	e8b8 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    e8b0:	e0bff917 	ldw	r2,-28(fp)
    e8b4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    e8b8:	e0bff917 	ldw	r2,-28(fp)
    e8bc:	10800c03 	ldbu	r2,48(r2)
    e8c0:	10803fcc 	andi	r2,r2,255
    e8c4:	1080020c 	andi	r2,r2,8
    e8c8:	1000151e 	bne	r2,zero,e920 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    e8cc:	e0bff917 	ldw	r2,-28(fp)
    e8d0:	10c00d83 	ldbu	r3,54(r2)
    e8d4:	d0a8c703 	ldbu	r2,-23780(gp)
    e8d8:	1884b03a 	or	r2,r3,r2
    e8dc:	d0a8c705 	stb	r2,-23780(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    e8e0:	e0bff917 	ldw	r2,-28(fp)
    e8e4:	10800d03 	ldbu	r2,52(r2)
    e8e8:	10c03fcc 	andi	r3,r2,255
    e8ec:	e0bff917 	ldw	r2,-28(fp)
    e8f0:	10800d03 	ldbu	r2,52(r2)
    e8f4:	11003fcc 	andi	r4,r2,255
    e8f8:	d0a8c744 	addi	r2,gp,-23779
    e8fc:	2085883a 	add	r2,r4,r2
    e900:	11000003 	ldbu	r4,0(r2)
    e904:	e0bff917 	ldw	r2,-28(fp)
    e908:	10800d43 	ldbu	r2,53(r2)
    e90c:	2084b03a 	or	r2,r4,r2
    e910:	1009883a 	mov	r4,r2
    e914:	d0a8c744 	addi	r2,gp,-23779
    e918:	1885883a 	add	r2,r3,r2
    e91c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    e920:	e0bff917 	ldw	r2,-28(fp)
    e924:	10800517 	ldw	r2,20(r2)
    e928:	e0bff915 	stw	r2,-28(fp)
    e92c:	e0bffb17 	ldw	r2,-20(fp)
    e930:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e934:	e0bfff17 	ldw	r2,-4(fp)
    e938:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e93c:	e0bff917 	ldw	r2,-28(fp)
    e940:	10800c83 	ldbu	r2,50(r2)
    e944:	10803fcc 	andi	r2,r2,255
    e948:	10800518 	cmpnei	r2,r2,20
    e94c:	103fb21e 	bne	r2,zero,e818 <__alt_mem_Flash_flash_data+0xf400e818>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    e950:	e037883a 	mov	sp,fp
    e954:	dfc00117 	ldw	ra,4(sp)
    e958:	df000017 	ldw	fp,0(sp)
    e95c:	dec00204 	addi	sp,sp,8
    e960:	f800283a 	ret

0000e964 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    e964:	deffff04 	addi	sp,sp,-4
    e968:	df000015 	stw	fp,0(sp)
    e96c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    e970:	00804784 	movi	r2,286
}
    e974:	e037883a 	mov	sp,fp
    e978:	df000017 	ldw	fp,0(sp)
    e97c:	dec00104 	addi	sp,sp,4
    e980:	f800283a 	ret

0000e984 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    e984:	deffff04 	addi	sp,sp,-4
    e988:	df000015 	stw	fp,0(sp)
    e98c:	d839883a 	mov	fp,sp
}
    e990:	e037883a 	mov	sp,fp
    e994:	df000017 	ldw	fp,0(sp)
    e998:	dec00104 	addi	sp,sp,4
    e99c:	f800283a 	ret

0000e9a0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    e9a0:	defff804 	addi	sp,sp,-32
    e9a4:	dfc00715 	stw	ra,28(sp)
    e9a8:	df000615 	stw	fp,24(sp)
    e9ac:	df000604 	addi	fp,sp,24
    e9b0:	e13ffc15 	stw	r4,-16(fp)
    e9b4:	e17ffd15 	stw	r5,-12(fp)
    e9b8:	3007883a 	mov	r3,r6
    e9bc:	3805883a 	mov	r2,r7
    e9c0:	e0fffe05 	stb	r3,-8(fp)
    e9c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    e9c8:	e0bffc17 	ldw	r2,-16(fp)
    e9cc:	10800283 	ldbu	r2,10(r2)
    e9d0:	10c03fcc 	andi	r3,r2,255
    e9d4:	008000b4 	movhi	r2,2
    e9d8:	10a77a04 	addi	r2,r2,-25112
    e9dc:	10c5883a 	add	r2,r2,r3
    e9e0:	10800003 	ldbu	r2,0(r2)
    e9e4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    e9e8:	e0bffa03 	ldbu	r2,-24(fp)
    e9ec:	e0fffc17 	ldw	r3,-16(fp)
    e9f0:	1885883a 	add	r2,r3,r2
    e9f4:	10800204 	addi	r2,r2,8
    e9f8:	108000c3 	ldbu	r2,3(r2)
    e9fc:	10c03fcc 	andi	r3,r2,255
    ea00:	008000b4 	movhi	r2,2
    ea04:	10a77a04 	addi	r2,r2,-25112
    ea08:	10c5883a 	add	r2,r2,r3
    ea0c:	10800003 	ldbu	r2,0(r2)
    ea10:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ea14:	e0bffa03 	ldbu	r2,-24(fp)
    ea18:	100490fa 	slli	r2,r2,3
    ea1c:	1007883a 	mov	r3,r2
    ea20:	e0bffa43 	ldbu	r2,-23(fp)
    ea24:	1885883a 	add	r2,r3,r2
    ea28:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ea2c:	e0fffa83 	ldbu	r3,-22(fp)
    ea30:	008000b4 	movhi	r2,2
    ea34:	10965b04 	addi	r2,r2,22892
    ea38:	18c7883a 	add	r3,r3,r3
    ea3c:	18c7883a 	add	r3,r3,r3
    ea40:	10c5883a 	add	r2,r2,r3
    ea44:	10800017 	ldw	r2,0(r2)
    ea48:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ea4c:	e0bffb17 	ldw	r2,-20(fp)
    ea50:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ea54:	e0bffb17 	ldw	r2,-20(fp)
    ea58:	e0fffd17 	ldw	r3,-12(fp)
    ea5c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ea60:	e0bffb17 	ldw	r2,-20(fp)
    ea64:	10800c03 	ldbu	r2,48(r2)
    ea68:	1007883a 	mov	r3,r2
    ea6c:	e0bffe03 	ldbu	r2,-8(fp)
    ea70:	0084303a 	nor	r2,zero,r2
    ea74:	1884703a 	and	r2,r3,r2
    ea78:	1007883a 	mov	r3,r2
    ea7c:	e0bffb17 	ldw	r2,-20(fp)
    ea80:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ea84:	e0bffb17 	ldw	r2,-20(fp)
    ea88:	e0ffff03 	ldbu	r3,-4(fp)
    ea8c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ea90:	e0bffb17 	ldw	r2,-20(fp)
    ea94:	10800c03 	ldbu	r2,48(r2)
    ea98:	10803fcc 	andi	r2,r2,255
    ea9c:	1080020c 	andi	r2,r2,8
    eaa0:	1000111e 	bne	r2,zero,eae8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    eaa4:	e0bffb17 	ldw	r2,-20(fp)
    eaa8:	10c00d83 	ldbu	r3,54(r2)
    eaac:	d0a8c703 	ldbu	r2,-23780(gp)
    eab0:	1884b03a 	or	r2,r3,r2
    eab4:	d0a8c705 	stb	r2,-23780(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    eab8:	e0fffa03 	ldbu	r3,-24(fp)
    eabc:	e13ffa03 	ldbu	r4,-24(fp)
    eac0:	d0a8c744 	addi	r2,gp,-23779
    eac4:	2085883a 	add	r2,r4,r2
    eac8:	11000003 	ldbu	r4,0(r2)
    eacc:	e0bffb17 	ldw	r2,-20(fp)
    ead0:	10800d43 	ldbu	r2,53(r2)
    ead4:	2084b03a 	or	r2,r4,r2
    ead8:	1009883a 	mov	r4,r2
    eadc:	d0a8c744 	addi	r2,gp,-23779
    eae0:	1885883a 	add	r2,r3,r2
    eae4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    eae8:	e13ffb17 	ldw	r4,-20(fp)
    eaec:	e17ffc17 	ldw	r5,-16(fp)
    eaf0:	000ed900 	call	ed90 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    eaf4:	e0bffb17 	ldw	r2,-20(fp)
    eaf8:	10800817 	ldw	r2,32(r2)
    eafc:	10000826 	beq	r2,zero,eb20 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    eb00:	e0bffb17 	ldw	r2,-20(fp)
    eb04:	10800817 	ldw	r2,32(r2)
    eb08:	e13ffb17 	ldw	r4,-20(fp)
    eb0c:	100b883a 	mov	r5,r2
    eb10:	000ee440 	call	ee44 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    eb14:	e0bffb17 	ldw	r2,-20(fp)
    eb18:	e0fffc17 	ldw	r3,-16(fp)
    eb1c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    eb20:	e0bffa83 	ldbu	r2,-22(fp)
}
    eb24:	e037883a 	mov	sp,fp
    eb28:	dfc00117 	ldw	ra,4(sp)
    eb2c:	df000017 	ldw	fp,0(sp)
    eb30:	dec00204 	addi	sp,sp,8
    eb34:	f800283a 	ret

0000eb38 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    eb38:	defffd04 	addi	sp,sp,-12
    eb3c:	df000215 	stw	fp,8(sp)
    eb40:	df000204 	addi	fp,sp,8
    eb44:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    eb48:	d0a8ca17 	ldw	r2,-23768(gp)
    eb4c:	e0ffff17 	ldw	r3,-4(fp)
    eb50:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    eb54:	d0a8ca17 	ldw	r2,-23768(gp)
    eb58:	10800d03 	ldbu	r2,52(r2)
    eb5c:	10803fcc 	andi	r2,r2,255
    eb60:	d0e8ca17 	ldw	r3,-23768(gp)
    eb64:	18c00d03 	ldbu	r3,52(r3)
    eb68:	18c03fcc 	andi	r3,r3,255
    eb6c:	e13fff17 	ldw	r4,-4(fp)
    eb70:	20c7883a 	add	r3,r4,r3
    eb74:	18c00204 	addi	r3,r3,8
    eb78:	190000c3 	ldbu	r4,3(r3)
    eb7c:	d0e8ca17 	ldw	r3,-23768(gp)
    eb80:	18c00d43 	ldbu	r3,53(r3)
    eb84:	20c6b03a 	or	r3,r4,r3
    eb88:	1809883a 	mov	r4,r3
    eb8c:	e0ffff17 	ldw	r3,-4(fp)
    eb90:	1885883a 	add	r2,r3,r2
    eb94:	10800204 	addi	r2,r2,8
    eb98:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    eb9c:	e0bfff17 	ldw	r2,-4(fp)
    eba0:	10c00283 	ldbu	r3,10(r2)
    eba4:	d0a8ca17 	ldw	r2,-23768(gp)
    eba8:	10800d83 	ldbu	r2,54(r2)
    ebac:	1884b03a 	or	r2,r3,r2
    ebb0:	1007883a 	mov	r3,r2
    ebb4:	e0bfff17 	ldw	r2,-4(fp)
    ebb8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ebbc:	d0a8ca17 	ldw	r2,-23768(gp)
    ebc0:	10800d03 	ldbu	r2,52(r2)
    ebc4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ebc8:	e0fffe03 	ldbu	r3,-8(fp)
    ebcc:	e13ffe03 	ldbu	r4,-8(fp)
    ebd0:	d0a8c744 	addi	r2,gp,-23779
    ebd4:	2085883a 	add	r2,r4,r2
    ebd8:	10800003 	ldbu	r2,0(r2)
    ebdc:	1009883a 	mov	r4,r2
    ebe0:	d0a8ca17 	ldw	r2,-23768(gp)
    ebe4:	10800d43 	ldbu	r2,53(r2)
    ebe8:	0084303a 	nor	r2,zero,r2
    ebec:	2084703a 	and	r2,r4,r2
    ebf0:	1009883a 	mov	r4,r2
    ebf4:	d0a8c744 	addi	r2,gp,-23779
    ebf8:	1885883a 	add	r2,r3,r2
    ebfc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ec00:	e0fffe03 	ldbu	r3,-8(fp)
    ec04:	d0a8c744 	addi	r2,gp,-23779
    ec08:	1885883a 	add	r2,r3,r2
    ec0c:	10800003 	ldbu	r2,0(r2)
    ec10:	10803fcc 	andi	r2,r2,255
    ec14:	1000071e 	bne	r2,zero,ec34 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ec18:	d0a8ca17 	ldw	r2,-23768(gp)
    ec1c:	10800d83 	ldbu	r2,54(r2)
    ec20:	0084303a 	nor	r2,zero,r2
    ec24:	1007883a 	mov	r3,r2
    ec28:	d0a8c703 	ldbu	r2,-23780(gp)
    ec2c:	1884703a 	and	r2,r3,r2
    ec30:	d0a8c705 	stb	r2,-23780(gp)
    }
}
    ec34:	e037883a 	mov	sp,fp
    ec38:	df000017 	ldw	fp,0(sp)
    ec3c:	dec00104 	addi	sp,sp,4
    ec40:	f800283a 	ret

0000ec44 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ec44:	defffb04 	addi	sp,sp,-20
    ec48:	df000415 	stw	fp,16(sp)
    ec4c:	df000404 	addi	fp,sp,16
    ec50:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    ec54:	d0a8ca17 	ldw	r2,-23768(gp)
    ec58:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ec5c:	d0a8ca17 	ldw	r2,-23768(gp)
    ec60:	e0ffff17 	ldw	r3,-4(fp)
    ec64:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ec68:	e0bfff17 	ldw	r2,-4(fp)
    ec6c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ec70:	e0bffc17 	ldw	r2,-16(fp)
    ec74:	10800017 	ldw	r2,0(r2)
    ec78:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ec7c:	00002006 	br	ed00 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ec80:	d0a8ca17 	ldw	r2,-23768(gp)
    ec84:	10800d03 	ldbu	r2,52(r2)
    ec88:	10803fcc 	andi	r2,r2,255
    ec8c:	d0e8ca17 	ldw	r3,-23768(gp)
    ec90:	18c00d03 	ldbu	r3,52(r3)
    ec94:	18c03fcc 	andi	r3,r3,255
    ec98:	e13ffd17 	ldw	r4,-12(fp)
    ec9c:	20c7883a 	add	r3,r4,r3
    eca0:	18c00204 	addi	r3,r3,8
    eca4:	190000c3 	ldbu	r4,3(r3)
    eca8:	d0e8ca17 	ldw	r3,-23768(gp)
    ecac:	18c00d43 	ldbu	r3,53(r3)
    ecb0:	20c6b03a 	or	r3,r4,r3
    ecb4:	1809883a 	mov	r4,r3
    ecb8:	e0fffd17 	ldw	r3,-12(fp)
    ecbc:	1885883a 	add	r2,r3,r2
    ecc0:	10800204 	addi	r2,r2,8
    ecc4:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ecc8:	e0bffd17 	ldw	r2,-12(fp)
    eccc:	10c00283 	ldbu	r3,10(r2)
    ecd0:	d0a8ca17 	ldw	r2,-23768(gp)
    ecd4:	10800d83 	ldbu	r2,54(r2)
    ecd8:	1884b03a 	or	r2,r3,r2
    ecdc:	1007883a 	mov	r3,r2
    ece0:	e0bffd17 	ldw	r2,-12(fp)
    ece4:	10c00285 	stb	r3,10(r2)
        pevents++;
    ece8:	e0bffc17 	ldw	r2,-16(fp)
    ecec:	10800104 	addi	r2,r2,4
    ecf0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    ecf4:	e0bffc17 	ldw	r2,-16(fp)
    ecf8:	10800017 	ldw	r2,0(r2)
    ecfc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ed00:	e0bffd17 	ldw	r2,-12(fp)
    ed04:	103fde1e 	bne	r2,zero,ec80 <__alt_mem_Flash_flash_data+0xf400ec80>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ed08:	d0a8ca17 	ldw	r2,-23768(gp)
    ed0c:	10800d03 	ldbu	r2,52(r2)
    ed10:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ed14:	e0fffe03 	ldbu	r3,-8(fp)
    ed18:	e13ffe03 	ldbu	r4,-8(fp)
    ed1c:	d0a8c744 	addi	r2,gp,-23779
    ed20:	2085883a 	add	r2,r4,r2
    ed24:	10800003 	ldbu	r2,0(r2)
    ed28:	1009883a 	mov	r4,r2
    ed2c:	d0a8ca17 	ldw	r2,-23768(gp)
    ed30:	10800d43 	ldbu	r2,53(r2)
    ed34:	0084303a 	nor	r2,zero,r2
    ed38:	2084703a 	and	r2,r4,r2
    ed3c:	1009883a 	mov	r4,r2
    ed40:	d0a8c744 	addi	r2,gp,-23779
    ed44:	1885883a 	add	r2,r3,r2
    ed48:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ed4c:	e0fffe03 	ldbu	r3,-8(fp)
    ed50:	d0a8c744 	addi	r2,gp,-23779
    ed54:	1885883a 	add	r2,r3,r2
    ed58:	10800003 	ldbu	r2,0(r2)
    ed5c:	10803fcc 	andi	r2,r2,255
    ed60:	1000071e 	bne	r2,zero,ed80 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ed64:	d0a8ca17 	ldw	r2,-23768(gp)
    ed68:	10800d83 	ldbu	r2,54(r2)
    ed6c:	0084303a 	nor	r2,zero,r2
    ed70:	1007883a 	mov	r3,r2
    ed74:	d0a8c703 	ldbu	r2,-23780(gp)
    ed78:	1884703a 	and	r2,r3,r2
    ed7c:	d0a8c705 	stb	r2,-23780(gp)
    }
}
    ed80:	e037883a 	mov	sp,fp
    ed84:	df000017 	ldw	fp,0(sp)
    ed88:	dec00104 	addi	sp,sp,4
    ed8c:	f800283a 	ret

0000ed90 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    ed90:	defffc04 	addi	sp,sp,-16
    ed94:	df000315 	stw	fp,12(sp)
    ed98:	df000304 	addi	fp,sp,12
    ed9c:	e13ffe15 	stw	r4,-8(fp)
    eda0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    eda4:	e0bffe17 	ldw	r2,-8(fp)
    eda8:	10800d03 	ldbu	r2,52(r2)
    edac:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    edb0:	e0bffd03 	ldbu	r2,-12(fp)
    edb4:	e0fffd03 	ldbu	r3,-12(fp)
    edb8:	e13fff17 	ldw	r4,-4(fp)
    edbc:	20c7883a 	add	r3,r4,r3
    edc0:	18c00204 	addi	r3,r3,8
    edc4:	18c000c3 	ldbu	r3,3(r3)
    edc8:	1809883a 	mov	r4,r3
    edcc:	e0fffe17 	ldw	r3,-8(fp)
    edd0:	18c00d43 	ldbu	r3,53(r3)
    edd4:	00c6303a 	nor	r3,zero,r3
    edd8:	20c6703a 	and	r3,r4,r3
    eddc:	1809883a 	mov	r4,r3
    ede0:	e0ffff17 	ldw	r3,-4(fp)
    ede4:	1885883a 	add	r2,r3,r2
    ede8:	10800204 	addi	r2,r2,8
    edec:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    edf0:	e0bffd03 	ldbu	r2,-12(fp)
    edf4:	e0ffff17 	ldw	r3,-4(fp)
    edf8:	1885883a 	add	r2,r3,r2
    edfc:	10800204 	addi	r2,r2,8
    ee00:	108000c3 	ldbu	r2,3(r2)
    ee04:	10803fcc 	andi	r2,r2,255
    ee08:	10000a1e 	bne	r2,zero,ee34 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
    ee10:	10800283 	ldbu	r2,10(r2)
    ee14:	1007883a 	mov	r3,r2
    ee18:	e0bffe17 	ldw	r2,-8(fp)
    ee1c:	10800d83 	ldbu	r2,54(r2)
    ee20:	0084303a 	nor	r2,zero,r2
    ee24:	1884703a 	and	r2,r3,r2
    ee28:	1007883a 	mov	r3,r2
    ee2c:	e0bfff17 	ldw	r2,-4(fp)
    ee30:	10c00285 	stb	r3,10(r2)
    }
}
    ee34:	e037883a 	mov	sp,fp
    ee38:	df000017 	ldw	fp,0(sp)
    ee3c:	dec00104 	addi	sp,sp,4
    ee40:	f800283a 	ret

0000ee44 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    ee44:	defffa04 	addi	sp,sp,-24
    ee48:	df000515 	stw	fp,20(sp)
    ee4c:	df000504 	addi	fp,sp,20
    ee50:	e13ffe15 	stw	r4,-8(fp)
    ee54:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    ee58:	e0bffe17 	ldw	r2,-8(fp)
    ee5c:	10800d03 	ldbu	r2,52(r2)
    ee60:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    ee64:	e0bffe17 	ldw	r2,-8(fp)
    ee68:	10800d83 	ldbu	r2,54(r2)
    ee6c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    ee70:	e0bffe17 	ldw	r2,-8(fp)
    ee74:	10800d43 	ldbu	r2,53(r2)
    ee78:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    ee7c:	e0bfff17 	ldw	r2,-4(fp)
    ee80:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    ee84:	e0bffb17 	ldw	r2,-20(fp)
    ee88:	10800017 	ldw	r2,0(r2)
    ee8c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    ee90:	00002506 	br	ef28 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    ee94:	e0bffd03 	ldbu	r2,-12(fp)
    ee98:	e0fffd03 	ldbu	r3,-12(fp)
    ee9c:	e13ffc17 	ldw	r4,-16(fp)
    eea0:	20c7883a 	add	r3,r4,r3
    eea4:	18c00204 	addi	r3,r3,8
    eea8:	18c000c3 	ldbu	r3,3(r3)
    eeac:	1809883a 	mov	r4,r3
    eeb0:	e0fffd83 	ldbu	r3,-10(fp)
    eeb4:	00c6303a 	nor	r3,zero,r3
    eeb8:	20c6703a 	and	r3,r4,r3
    eebc:	1809883a 	mov	r4,r3
    eec0:	e0fffc17 	ldw	r3,-16(fp)
    eec4:	1885883a 	add	r2,r3,r2
    eec8:	10800204 	addi	r2,r2,8
    eecc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    eed0:	e0bffd03 	ldbu	r2,-12(fp)
    eed4:	e0fffc17 	ldw	r3,-16(fp)
    eed8:	1885883a 	add	r2,r3,r2
    eedc:	10800204 	addi	r2,r2,8
    eee0:	108000c3 	ldbu	r2,3(r2)
    eee4:	10803fcc 	andi	r2,r2,255
    eee8:	1000091e 	bne	r2,zero,ef10 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    eeec:	e0bffc17 	ldw	r2,-16(fp)
    eef0:	10800283 	ldbu	r2,10(r2)
    eef4:	1007883a 	mov	r3,r2
    eef8:	e0bffd43 	ldbu	r2,-11(fp)
    eefc:	0084303a 	nor	r2,zero,r2
    ef00:	1884703a 	and	r2,r3,r2
    ef04:	1007883a 	mov	r3,r2
    ef08:	e0bffc17 	ldw	r2,-16(fp)
    ef0c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    ef10:	e0bffb17 	ldw	r2,-20(fp)
    ef14:	10800104 	addi	r2,r2,4
    ef18:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    ef1c:	e0bffb17 	ldw	r2,-20(fp)
    ef20:	10800017 	ldw	r2,0(r2)
    ef24:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	103fd91e 	bne	r2,zero,ee94 <__alt_mem_Flash_flash_data+0xf400ee94>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    ef30:	e037883a 	mov	sp,fp
    ef34:	df000017 	ldw	fp,0(sp)
    ef38:	dec00104 	addi	sp,sp,4
    ef3c:	f800283a 	ret

0000ef40 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    ef40:	defffc04 	addi	sp,sp,-16
    ef44:	df000315 	stw	fp,12(sp)
    ef48:	df000304 	addi	fp,sp,12
    ef4c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ef50:	e0bfff17 	ldw	r2,-4(fp)
    ef54:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    ef58:	e0bfff17 	ldw	r2,-4(fp)
    ef5c:	108002c4 	addi	r2,r2,11
    ef60:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    ef64:	e03ffe05 	stb	zero,-8(fp)
    ef68:	00000706 	br	ef88 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    ef6c:	e0bffd17 	ldw	r2,-12(fp)
    ef70:	10c00044 	addi	r3,r2,1
    ef74:	e0fffd15 	stw	r3,-12(fp)
    ef78:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    ef7c:	e0bffe03 	ldbu	r2,-8(fp)
    ef80:	10800044 	addi	r2,r2,1
    ef84:	e0bffe05 	stb	r2,-8(fp)
    ef88:	e0bffe03 	ldbu	r2,-8(fp)
    ef8c:	108000f0 	cmpltui	r2,r2,3
    ef90:	103ff61e 	bne	r2,zero,ef6c <__alt_mem_Flash_flash_data+0xf400ef6c>
        *ptbl++ = 0;
    }
}
    ef94:	e037883a 	mov	sp,fp
    ef98:	df000017 	ldw	fp,0(sp)
    ef9c:	dec00104 	addi	sp,sp,4
    efa0:	f800283a 	ret

0000efa4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    efa4:	defffb04 	addi	sp,sp,-20
    efa8:	dfc00415 	stw	ra,16(sp)
    efac:	df000315 	stw	fp,12(sp)
    efb0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    efb4:	010000b4 	movhi	r4,2
    efb8:	21124704 	addi	r4,r4,18716
    efbc:	0142d004 	movi	r5,2880
    efc0:	000f3040 	call	f304 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    efc4:	008000b4 	movhi	r2,2
    efc8:	10924704 	addi	r2,r2,18716
    efcc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    efd0:	008000b4 	movhi	r2,2
    efd4:	10925304 	addi	r2,r2,18764
    efd8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    efdc:	e03ffd0d 	sth	zero,-12(fp)
    efe0:	00001306 	br	f030 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    efe4:	e0bffe17 	ldw	r2,-8(fp)
    efe8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    efec:	e0bffe17 	ldw	r2,-8(fp)
    eff0:	e0ffff17 	ldw	r3,-4(fp)
    eff4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    eff8:	e0bffe17 	ldw	r2,-8(fp)
    effc:	00c00fc4 	movi	r3,63
    f000:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f004:	e0bffe17 	ldw	r2,-8(fp)
    f008:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f00c:	e0bffe17 	ldw	r2,-8(fp)
    f010:	10800c04 	addi	r2,r2,48
    f014:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f018:	e0bfff17 	ldw	r2,-4(fp)
    f01c:	10800c04 	addi	r2,r2,48
    f020:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f024:	e0bffd0b 	ldhu	r2,-12(fp)
    f028:	10800044 	addi	r2,r2,1
    f02c:	e0bffd0d 	sth	r2,-12(fp)
    f030:	e0bffd0b 	ldhu	r2,-12(fp)
    f034:	10800ef0 	cmpltui	r2,r2,59
    f038:	103fea1e 	bne	r2,zero,efe4 <__alt_mem_Flash_flash_data+0xf400efe4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f03c:	e0bffe17 	ldw	r2,-8(fp)
    f040:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f044:	e0bffe17 	ldw	r2,-8(fp)
    f048:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f04c:	e0bffe17 	ldw	r2,-8(fp)
    f050:	00c00fc4 	movi	r3,63
    f054:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f058:	e0bffe17 	ldw	r2,-8(fp)
    f05c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f060:	008000b4 	movhi	r2,2
    f064:	10924704 	addi	r2,r2,18716
    f068:	d0a8c815 	stw	r2,-23776(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f06c:	e037883a 	mov	sp,fp
    f070:	dfc00117 	ldw	ra,4(sp)
    f074:	df000017 	ldw	fp,0(sp)
    f078:	dec00204 	addi	sp,sp,8
    f07c:	f800283a 	ret

0000f080 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f080:	deffff04 	addi	sp,sp,-4
    f084:	df000015 	stw	fp,0(sp)
    f088:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f08c:	d028cb15 	stw	zero,-23764(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f090:	d028c905 	stb	zero,-23772(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f094:	d028bb05 	stb	zero,-23828(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f098:	d028c345 	stb	zero,-23795(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f09c:	d028bb45 	stb	zero,-23827(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f0a0:	d028c015 	stw	zero,-23808(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f0a4:	d028bc15 	stw	zero,-23824(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f0a8:	d028ce15 	stw	zero,-23752(gp)
    OSIdleCtrMax  = 0L;
    f0ac:	d028c115 	stw	zero,-23804(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f0b0:	d028cd05 	stb	zero,-23756(gp)
#endif
}
    f0b4:	e037883a 	mov	sp,fp
    f0b8:	df000017 	ldw	fp,0(sp)
    f0bc:	dec00104 	addi	sp,sp,4
    f0c0:	f800283a 	ret

0000f0c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f0c4:	defffd04 	addi	sp,sp,-12
    f0c8:	df000215 	stw	fp,8(sp)
    f0cc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f0d0:	d028c705 	stb	zero,-23780(gp)
    prdytbl       = &OSRdyTbl[0];
    f0d4:	d0a8c744 	addi	r2,gp,-23779
    f0d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f0dc:	e03ffe05 	stb	zero,-8(fp)
    f0e0:	00000706 	br	f100 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f0e4:	e0bfff17 	ldw	r2,-4(fp)
    f0e8:	10c00044 	addi	r3,r2,1
    f0ec:	e0ffff15 	stw	r3,-4(fp)
    f0f0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f0f4:	e0bffe03 	ldbu	r2,-8(fp)
    f0f8:	10800044 	addi	r2,r2,1
    f0fc:	e0bffe05 	stb	r2,-8(fp)
    f100:	e0bffe03 	ldbu	r2,-8(fp)
    f104:	108000f0 	cmpltui	r2,r2,3
    f108:	103ff61e 	bne	r2,zero,f0e4 <__alt_mem_Flash_flash_data+0xf400f0e4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f10c:	d028bd45 	stb	zero,-23819(gp)
    OSPrioHighRdy = 0;
    f110:	d028bd05 	stb	zero,-23820(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f114:	d028c515 	stw	zero,-23788(gp)
    OSTCBCur      = (OS_TCB *)0;
    f118:	d028ca15 	stw	zero,-23768(gp)
}
    f11c:	e037883a 	mov	sp,fp
    f120:	df000017 	ldw	fp,0(sp)
    f124:	dec00104 	addi	sp,sp,4
    f128:	f800283a 	ret

0000f12c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f12c:	defff804 	addi	sp,sp,-32
    f130:	dfc00715 	stw	ra,28(sp)
    f134:	df000615 	stw	fp,24(sp)
    f138:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f13c:	00bfffd4 	movui	r2,65535
    f140:	d8800015 	stw	r2,0(sp)
    f144:	008000b4 	movhi	r2,2
    f148:	10904704 	addi	r2,r2,16668
    f14c:	d8800115 	stw	r2,4(sp)
    f150:	00808004 	movi	r2,512
    f154:	d8800215 	stw	r2,8(sp)
    f158:	d8000315 	stw	zero,12(sp)
    f15c:	008000c4 	movi	r2,3
    f160:	d8800415 	stw	r2,16(sp)
    f164:	01000074 	movhi	r4,1
    f168:	213d6f04 	addi	r4,r4,-2628
    f16c:	000b883a 	mov	r5,zero
    f170:	018000b4 	movhi	r6,2
    f174:	31924604 	addi	r6,r6,18712
    f178:	01c00504 	movi	r7,20
    f17c:	0013fd00 	call	13fd0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f180:	01000504 	movi	r4,20
    f184:	014000b4 	movhi	r5,2
    f188:	2967ba04 	addi	r5,r5,-24856
    f18c:	e1bfff04 	addi	r6,fp,-4
    f190:	001489c0 	call	1489c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f194:	e037883a 	mov	sp,fp
    f198:	dfc00117 	ldw	ra,4(sp)
    f19c:	df000017 	ldw	fp,0(sp)
    f1a0:	dec00204 	addi	sp,sp,8
    f1a4:	f800283a 	ret

0000f1a8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f1a8:	defff804 	addi	sp,sp,-32
    f1ac:	dfc00715 	stw	ra,28(sp)
    f1b0:	df000615 	stw	fp,24(sp)
    f1b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f1b8:	00bfff94 	movui	r2,65534
    f1bc:	d8800015 	stw	r2,0(sp)
    f1c0:	008000b4 	movhi	r2,2
    f1c4:	108dcf04 	addi	r2,r2,14140
    f1c8:	d8800115 	stw	r2,4(sp)
    f1cc:	00808004 	movi	r2,512
    f1d0:	d8800215 	stw	r2,8(sp)
    f1d4:	d8000315 	stw	zero,12(sp)
    f1d8:	008000c4 	movi	r2,3
    f1dc:	d8800415 	stw	r2,16(sp)
    f1e0:	01000074 	movhi	r4,1
    f1e4:	213d8604 	addi	r4,r4,-2536
    f1e8:	000b883a 	mov	r5,zero
    f1ec:	018000b4 	movhi	r6,2
    f1f0:	318fce04 	addi	r6,r6,16184
    f1f4:	01c004c4 	movi	r7,19
    f1f8:	0013fd00 	call	13fd0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f1fc:	010004c4 	movi	r4,19
    f200:	014000b4 	movhi	r5,2
    f204:	2967be04 	addi	r5,r5,-24840
    f208:	e1bfff04 	addi	r6,fp,-4
    f20c:	001489c0 	call	1489c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f210:	e037883a 	mov	sp,fp
    f214:	dfc00117 	ldw	ra,4(sp)
    f218:	df000017 	ldw	fp,0(sp)
    f21c:	dec00204 	addi	sp,sp,8
    f220:	f800283a 	ret

0000f224 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f224:	defffb04 	addi	sp,sp,-20
    f228:	dfc00415 	stw	ra,16(sp)
    f22c:	df000315 	stw	fp,12(sp)
    f230:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f234:	010000b4 	movhi	r4,2
    f238:	21151704 	addi	r4,r4,21596
    f23c:	01414404 	movi	r5,1296
    f240:	000f3040 	call	f304 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f244:	010000b4 	movhi	r4,2
    f248:	21165b04 	addi	r4,r4,22892
    f24c:	01401504 	movi	r5,84
    f250:	000f3040 	call	f304 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f254:	008000b4 	movhi	r2,2
    f258:	10951704 	addi	r2,r2,21596
    f25c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f260:	008000b4 	movhi	r2,2
    f264:	10953204 	addi	r2,r2,21704
    f268:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f26c:	e03ffd05 	stb	zero,-12(fp)
    f270:	00001106 	br	f2b8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f274:	e0bffe17 	ldw	r2,-8(fp)
    f278:	e0ffff17 	ldw	r3,-4(fp)
    f27c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f280:	e0bffe17 	ldw	r2,-8(fp)
    f284:	00c00fc4 	movi	r3,63
    f288:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f28c:	e0bffe17 	ldw	r2,-8(fp)
    f290:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f294:	e0bffe17 	ldw	r2,-8(fp)
    f298:	10801b04 	addi	r2,r2,108
    f29c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f2a0:	e0bfff17 	ldw	r2,-4(fp)
    f2a4:	10801b04 	addi	r2,r2,108
    f2a8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f2ac:	e0bffd03 	ldbu	r2,-12(fp)
    f2b0:	10800044 	addi	r2,r2,1
    f2b4:	e0bffd05 	stb	r2,-12(fp)
    f2b8:	e0bffd03 	ldbu	r2,-12(fp)
    f2bc:	108002f0 	cmpltui	r2,r2,11
    f2c0:	103fec1e 	bne	r2,zero,f274 <__alt_mem_Flash_flash_data+0xf400f274>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f2c4:	e0bffe17 	ldw	r2,-8(fp)
    f2c8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f2cc:	e0bffe17 	ldw	r2,-8(fp)
    f2d0:	00c00fc4 	movi	r3,63
    f2d4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f2d8:	e0bffe17 	ldw	r2,-8(fp)
    f2dc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f2e0:	d028be15 	stw	zero,-23816(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f2e4:	008000b4 	movhi	r2,2
    f2e8:	10951704 	addi	r2,r2,21596
    f2ec:	d0a8c215 	stw	r2,-23800(gp)
}
    f2f0:	e037883a 	mov	sp,fp
    f2f4:	dfc00117 	ldw	ra,4(sp)
    f2f8:	df000017 	ldw	fp,0(sp)
    f2fc:	dec00204 	addi	sp,sp,8
    f300:	f800283a 	ret

0000f304 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f304:	defffd04 	addi	sp,sp,-12
    f308:	df000215 	stw	fp,8(sp)
    f30c:	df000204 	addi	fp,sp,8
    f310:	e13ffe15 	stw	r4,-8(fp)
    f314:	2805883a 	mov	r2,r5
    f318:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f31c:	00000706 	br	f33c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f320:	e0bffe17 	ldw	r2,-8(fp)
    f324:	10c00044 	addi	r3,r2,1
    f328:	e0fffe15 	stw	r3,-8(fp)
    f32c:	10000005 	stb	zero,0(r2)
        size--;
    f330:	e0bfff0b 	ldhu	r2,-4(fp)
    f334:	10bfffc4 	addi	r2,r2,-1
    f338:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f33c:	e0bfff0b 	ldhu	r2,-4(fp)
    f340:	103ff71e 	bne	r2,zero,f320 <__alt_mem_Flash_flash_data+0xf400f320>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f344:	e037883a 	mov	sp,fp
    f348:	df000017 	ldw	fp,0(sp)
    f34c:	dec00104 	addi	sp,sp,4
    f350:	f800283a 	ret

0000f354 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f354:	defffc04 	addi	sp,sp,-16
    f358:	df000315 	stw	fp,12(sp)
    f35c:	df000304 	addi	fp,sp,12
    f360:	e13ffd15 	stw	r4,-12(fp)
    f364:	e17ffe15 	stw	r5,-8(fp)
    f368:	3005883a 	mov	r2,r6
    f36c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f370:	00000b06 	br	f3a0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10c00044 	addi	r3,r2,1
    f37c:	e0fffd15 	stw	r3,-12(fp)
    f380:	e0fffe17 	ldw	r3,-8(fp)
    f384:	19000044 	addi	r4,r3,1
    f388:	e13ffe15 	stw	r4,-8(fp)
    f38c:	18c00003 	ldbu	r3,0(r3)
    f390:	10c00005 	stb	r3,0(r2)
        size--;
    f394:	e0bfff0b 	ldhu	r2,-4(fp)
    f398:	10bfffc4 	addi	r2,r2,-1
    f39c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f3a0:	e0bfff0b 	ldhu	r2,-4(fp)
    f3a4:	103ff31e 	bne	r2,zero,f374 <__alt_mem_Flash_flash_data+0xf400f374>
        *pdest++ = *psrc++;
        size--;
    }
}
    f3a8:	e037883a 	mov	sp,fp
    f3ac:	df000017 	ldw	fp,0(sp)
    f3b0:	dec00104 	addi	sp,sp,4
    f3b4:	f800283a 	ret

0000f3b8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f3b8:	defffb04 	addi	sp,sp,-20
    f3bc:	dfc00415 	stw	ra,16(sp)
    f3c0:	df000315 	stw	fp,12(sp)
    f3c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f3c8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3cc:	0005303a 	rdctl	r2,status
    f3d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3d4:	e0fffe17 	ldw	r3,-8(fp)
    f3d8:	00bfff84 	movi	r2,-2
    f3dc:	1884703a 	and	r2,r3,r2
    f3e0:	1001703a 	wrctl	status,r2
  
  return context;
    f3e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    f3e8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f3ec:	d0a8c903 	ldbu	r2,-23772(gp)
    f3f0:	10803fcc 	andi	r2,r2,255
    f3f4:	10001a1e 	bne	r2,zero,f460 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f3f8:	d0a8bb03 	ldbu	r2,-23828(gp)
    f3fc:	10803fcc 	andi	r2,r2,255
    f400:	1000171e 	bne	r2,zero,f460 <OS_Sched+0xa8>
            OS_SchedNew();
    f404:	000f4840 	call	f484 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f408:	d0e8bd03 	ldbu	r3,-23820(gp)
    f40c:	d0a8bd43 	ldbu	r2,-23819(gp)
    f410:	18c03fcc 	andi	r3,r3,255
    f414:	10803fcc 	andi	r2,r2,255
    f418:	18801126 	beq	r3,r2,f460 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f41c:	d0a8bd03 	ldbu	r2,-23820(gp)
    f420:	10c03fcc 	andi	r3,r2,255
    f424:	008000b4 	movhi	r2,2
    f428:	10965b04 	addi	r2,r2,22892
    f42c:	18c7883a 	add	r3,r3,r3
    f430:	18c7883a 	add	r3,r3,r3
    f434:	10c5883a 	add	r2,r2,r3
    f438:	10800017 	ldw	r2,0(r2)
    f43c:	d0a8c515 	stw	r2,-23788(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f440:	d0a8c517 	ldw	r2,-23788(gp)
    f444:	10c00e17 	ldw	r3,56(r2)
    f448:	18c00044 	addi	r3,r3,1
    f44c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f450:	d0a8c017 	ldw	r2,-23808(gp)
    f454:	10800044 	addi	r2,r2,1
    f458:	d0a8c015 	stw	r2,-23808(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f45c:	00190140 	call	19014 <OSCtxSw>
    f460:	e0bffd17 	ldw	r2,-12(fp)
    f464:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f468:	e0bfff17 	ldw	r2,-4(fp)
    f46c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f470:	e037883a 	mov	sp,fp
    f474:	dfc00117 	ldw	ra,4(sp)
    f478:	df000017 	ldw	fp,0(sp)
    f47c:	dec00204 	addi	sp,sp,8
    f480:	f800283a 	ret

0000f484 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f484:	defffe04 	addi	sp,sp,-8
    f488:	df000115 	stw	fp,4(sp)
    f48c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f490:	d0a8c703 	ldbu	r2,-23780(gp)
    f494:	10c03fcc 	andi	r3,r2,255
    f498:	008000b4 	movhi	r2,2
    f49c:	10a77a04 	addi	r2,r2,-25112
    f4a0:	10c5883a 	add	r2,r2,r3
    f4a4:	10800003 	ldbu	r2,0(r2)
    f4a8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f4ac:	e0bfff03 	ldbu	r2,-4(fp)
    f4b0:	100490fa 	slli	r2,r2,3
    f4b4:	1009883a 	mov	r4,r2
    f4b8:	e0ffff03 	ldbu	r3,-4(fp)
    f4bc:	d0a8c744 	addi	r2,gp,-23779
    f4c0:	1885883a 	add	r2,r3,r2
    f4c4:	10800003 	ldbu	r2,0(r2)
    f4c8:	10c03fcc 	andi	r3,r2,255
    f4cc:	008000b4 	movhi	r2,2
    f4d0:	10a77a04 	addi	r2,r2,-25112
    f4d4:	10c5883a 	add	r2,r2,r3
    f4d8:	10800003 	ldbu	r2,0(r2)
    f4dc:	2085883a 	add	r2,r4,r2
    f4e0:	d0a8bd05 	stb	r2,-23820(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f4e4:	e037883a 	mov	sp,fp
    f4e8:	df000017 	ldw	fp,0(sp)
    f4ec:	dec00104 	addi	sp,sp,4
    f4f0:	f800283a 	ret

0000f4f4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f4f4:	defffc04 	addi	sp,sp,-16
    f4f8:	df000315 	stw	fp,12(sp)
    f4fc:	df000304 	addi	fp,sp,12
    f500:	e13ffe15 	stw	r4,-8(fp)
    f504:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f508:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f50c:	00000b06 	br	f53c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f510:	e0bffe17 	ldw	r2,-8(fp)
    f514:	10c00044 	addi	r3,r2,1
    f518:	e0fffe15 	stw	r3,-8(fp)
    f51c:	e0ffff17 	ldw	r3,-4(fp)
    f520:	19000044 	addi	r4,r3,1
    f524:	e13fff15 	stw	r4,-4(fp)
    f528:	18c00003 	ldbu	r3,0(r3)
    f52c:	10c00005 	stb	r3,0(r2)
        len++;
    f530:	e0bffd03 	ldbu	r2,-12(fp)
    f534:	10800044 	addi	r2,r2,1
    f538:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f53c:	e0bfff17 	ldw	r2,-4(fp)
    f540:	10800003 	ldbu	r2,0(r2)
    f544:	10803fcc 	andi	r2,r2,255
    f548:	103ff11e 	bne	r2,zero,f510 <__alt_mem_Flash_flash_data+0xf400f510>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	10000005 	stb	zero,0(r2)
    return (len);
    f554:	e0bffd03 	ldbu	r2,-12(fp)
}
    f558:	e037883a 	mov	sp,fp
    f55c:	df000017 	ldw	fp,0(sp)
    f560:	dec00104 	addi	sp,sp,4
    f564:	f800283a 	ret

0000f568 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f568:	defffd04 	addi	sp,sp,-12
    f56c:	df000215 	stw	fp,8(sp)
    f570:	df000204 	addi	fp,sp,8
    f574:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f578:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f57c:	00000606 	br	f598 <OS_StrLen+0x30>
        psrc++;
    f580:	e0bfff17 	ldw	r2,-4(fp)
    f584:	10800044 	addi	r2,r2,1
    f588:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f58c:	e0bffe03 	ldbu	r2,-8(fp)
    f590:	10800044 	addi	r2,r2,1
    f594:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f598:	e0bfff17 	ldw	r2,-4(fp)
    f59c:	10800003 	ldbu	r2,0(r2)
    f5a0:	10803fcc 	andi	r2,r2,255
    f5a4:	103ff61e 	bne	r2,zero,f580 <__alt_mem_Flash_flash_data+0xf400f580>
        psrc++;
        len++;
    }
    return (len);
    f5a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    f5ac:	e037883a 	mov	sp,fp
    f5b0:	df000017 	ldw	fp,0(sp)
    f5b4:	dec00104 	addi	sp,sp,4
    f5b8:	f800283a 	ret

0000f5bc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f5bc:	defffa04 	addi	sp,sp,-24
    f5c0:	dfc00515 	stw	ra,20(sp)
    f5c4:	df000415 	stw	fp,16(sp)
    f5c8:	df000404 	addi	fp,sp,16
    f5cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f5d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5d4:	0005303a 	rdctl	r2,status
    f5d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5dc:	e0fffd17 	ldw	r3,-12(fp)
    f5e0:	00bfff84 	movi	r2,-2
    f5e4:	1884703a 	and	r2,r3,r2
    f5e8:	1001703a 	wrctl	status,r2
  
  return context;
    f5ec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f5f0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f5f4:	d0a8bc17 	ldw	r2,-23824(gp)
    f5f8:	10800044 	addi	r2,r2,1
    f5fc:	d0a8bc15 	stw	r2,-23824(gp)
    f600:	e0bffc17 	ldw	r2,-16(fp)
    f604:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f608:	e0bffe17 	ldw	r2,-8(fp)
    f60c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f610:	001930c0 	call	1930c <OSTaskIdleHook>
    }
    f614:	003fef06 	br	f5d4 <__alt_mem_Flash_flash_data+0xf400f5d4>

0000f618 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f618:	defff804 	addi	sp,sp,-32
    f61c:	dfc00715 	stw	ra,28(sp)
    f620:	df000615 	stw	fp,24(sp)
    f624:	dc400515 	stw	r17,20(sp)
    f628:	dc000415 	stw	r16,16(sp)
    f62c:	df000604 	addi	fp,sp,24
    f630:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f634:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f638:	00000206 	br	f644 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f63c:	01000044 	movi	r4,1
    f640:	00151c80 	call	151c8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f644:	d0a8cd03 	ldbu	r2,-23756(gp)
    f648:	10803fcc 	andi	r2,r2,255
    f64c:	103ffb26 	beq	r2,zero,f63c <__alt_mem_Flash_flash_data+0xf400f63c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f650:	d0e8c117 	ldw	r3,-23804(gp)
    f654:	00947b34 	movhi	r2,20972
    f658:	10a147c4 	addi	r2,r2,-31457
    f65c:	1888383a 	mulxuu	r4,r3,r2
    f660:	1885383a 	mul	r2,r3,r2
    f664:	1021883a 	mov	r16,r2
    f668:	2023883a 	mov	r17,r4
    f66c:	8804d17a 	srli	r2,r17,5
    f670:	d0a8c115 	stw	r2,-23804(gp)
    if (OSIdleCtrMax == 0L) {
    f674:	d0a8c117 	ldw	r2,-23804(gp)
    f678:	1000031e 	bne	r2,zero,f688 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    f67c:	d028c305 	stb	zero,-23796(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f680:	01003fc4 	movi	r4,255
    f684:	0014e1c0 	call	14e1c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f688:	0005303a 	rdctl	r2,status
    f68c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f690:	e0fffb17 	ldw	r3,-20(fp)
    f694:	00bfff84 	movi	r2,-2
    f698:	1884703a 	and	r2,r3,r2
    f69c:	1001703a 	wrctl	status,r2
  
  return context;
    f6a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f6a4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f6a8:	d0a8bc17 	ldw	r2,-23824(gp)
    f6ac:	d0a8ce15 	stw	r2,-23752(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f6b0:	d028bc15 	stw	zero,-23824(gp)
    f6b4:	e0bffa17 	ldw	r2,-24(fp)
    f6b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6bc:	e0bffc17 	ldw	r2,-16(fp)
    f6c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f6c4:	d0e8ce17 	ldw	r3,-23752(gp)
    f6c8:	d0a8c117 	ldw	r2,-23804(gp)
    f6cc:	1885203a 	divu	r2,r3,r2
    f6d0:	1007883a 	mov	r3,r2
    f6d4:	00801904 	movi	r2,100
    f6d8:	10c5c83a 	sub	r2,r2,r3
    f6dc:	d0a8c305 	stb	r2,-23796(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f6e0:	001929c0 	call	1929c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f6e4:	000f6f40 	call	f6f4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f6e8:	0009883a 	mov	r4,zero
    f6ec:	00151c80 	call	151c8 <OSTimeDly>
    }
    f6f0:	003fe506 	br	f688 <__alt_mem_Flash_flash_data+0xf400f688>

0000f6f4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f6f4:	defffa04 	addi	sp,sp,-24
    f6f8:	dfc00515 	stw	ra,20(sp)
    f6fc:	df000415 	stw	fp,16(sp)
    f700:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f704:	e03ffc05 	stb	zero,-16(fp)
    f708:	00002406 	br	f79c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f70c:	e0fffc03 	ldbu	r3,-16(fp)
    f710:	e0bffe04 	addi	r2,fp,-8
    f714:	1809883a 	mov	r4,r3
    f718:	100b883a 	mov	r5,r2
    f71c:	0014c540 	call	14c54 <OSTaskStkChk>
    f720:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f724:	e0bffc43 	ldbu	r2,-15(fp)
    f728:	1000191e 	bne	r2,zero,f790 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f72c:	e0fffc03 	ldbu	r3,-16(fp)
    f730:	008000b4 	movhi	r2,2
    f734:	10965b04 	addi	r2,r2,22892
    f738:	18c7883a 	add	r3,r3,r3
    f73c:	18c7883a 	add	r3,r3,r3
    f740:	10c5883a 	add	r2,r2,r3
    f744:	10800017 	ldw	r2,0(r2)
    f748:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f74c:	e0bffd17 	ldw	r2,-12(fp)
    f750:	10000f26 	beq	r2,zero,f790 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f754:	e0bffd17 	ldw	r2,-12(fp)
    f758:	10800060 	cmpeqi	r2,r2,1
    f75c:	10000c1e 	bne	r2,zero,f790 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f760:	e0bffd17 	ldw	r2,-12(fp)
    f764:	10c00217 	ldw	r3,8(r2)
    f768:	e0bffd17 	ldw	r2,-12(fp)
    f76c:	10800317 	ldw	r2,12(r2)
    f770:	1085883a 	add	r2,r2,r2
    f774:	1085883a 	add	r2,r2,r2
    f778:	1887883a 	add	r3,r3,r2
    f77c:	e0bffd17 	ldw	r2,-12(fp)
    f780:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f784:	e0ffff17 	ldw	r3,-4(fp)
    f788:	e0bffd17 	ldw	r2,-12(fp)
    f78c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f790:	e0bffc03 	ldbu	r2,-16(fp)
    f794:	10800044 	addi	r2,r2,1
    f798:	e0bffc05 	stb	r2,-16(fp)
    f79c:	e0bffc03 	ldbu	r2,-16(fp)
    f7a0:	10800570 	cmpltui	r2,r2,21
    f7a4:	103fd91e 	bne	r2,zero,f70c <__alt_mem_Flash_flash_data+0xf400f70c>
#endif
                }
            }
        }
    }
}
    f7a8:	e037883a 	mov	sp,fp
    f7ac:	dfc00117 	ldw	ra,4(sp)
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00204 	addi	sp,sp,8
    f7b8:	f800283a 	ret

0000f7bc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f7bc:	defff204 	addi	sp,sp,-56
    f7c0:	dfc00d15 	stw	ra,52(sp)
    f7c4:	df000c15 	stw	fp,48(sp)
    f7c8:	df000c04 	addi	fp,sp,48
    f7cc:	e17ffc15 	stw	r5,-16(fp)
    f7d0:	e1bffd15 	stw	r6,-12(fp)
    f7d4:	3807883a 	mov	r3,r7
    f7d8:	e0800417 	ldw	r2,16(fp)
    f7dc:	e13ffb05 	stb	r4,-20(fp)
    f7e0:	e0fffe0d 	sth	r3,-8(fp)
    f7e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f7e8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7ec:	0005303a 	rdctl	r2,status
    f7f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7f4:	e0fff617 	ldw	r3,-40(fp)
    f7f8:	00bfff84 	movi	r2,-2
    f7fc:	1884703a 	and	r2,r3,r2
    f800:	1001703a 	wrctl	status,r2
  
  return context;
    f804:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    f808:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    f80c:	d0a8c217 	ldw	r2,-23800(gp)
    f810:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    f814:	e0bff517 	ldw	r2,-44(fp)
    f818:	10009326 	beq	r2,zero,fa68 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    f81c:	e0bff517 	ldw	r2,-44(fp)
    f820:	10800517 	ldw	r2,20(r2)
    f824:	d0a8c215 	stw	r2,-23800(gp)
    f828:	e0bff417 	ldw	r2,-48(fp)
    f82c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f830:	e0bff717 	ldw	r2,-36(fp)
    f834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    f838:	e0bff517 	ldw	r2,-44(fp)
    f83c:	e0fffc17 	ldw	r3,-16(fp)
    f840:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    f844:	e0bff517 	ldw	r2,-44(fp)
    f848:	e0fffb03 	ldbu	r3,-20(fp)
    f84c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    f850:	e0bff517 	ldw	r2,-44(fp)
    f854:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    f858:	e0bff517 	ldw	r2,-44(fp)
    f85c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    f860:	e0bff517 	ldw	r2,-44(fp)
    f864:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    f868:	e0bff517 	ldw	r2,-44(fp)
    f86c:	e0c00317 	ldw	r3,12(fp)
    f870:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    f874:	e0bff517 	ldw	r2,-44(fp)
    f878:	e0c00217 	ldw	r3,8(fp)
    f87c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    f880:	e0bff517 	ldw	r2,-44(fp)
    f884:	e0fffd17 	ldw	r3,-12(fp)
    f888:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    f88c:	e0bff517 	ldw	r2,-44(fp)
    f890:	e0ffff0b 	ldhu	r3,-4(fp)
    f894:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    f898:	e0bff517 	ldw	r2,-44(fp)
    f89c:	e0fffe0b 	ldhu	r3,-8(fp)
    f8a0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    f8a4:	e0bff517 	ldw	r2,-44(fp)
    f8a8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    f8ac:	e0bffb03 	ldbu	r2,-20(fp)
    f8b0:	1004d0fa 	srli	r2,r2,3
    f8b4:	1007883a 	mov	r3,r2
    f8b8:	e0bff517 	ldw	r2,-44(fp)
    f8bc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    f8c0:	e0bffb03 	ldbu	r2,-20(fp)
    f8c4:	108001cc 	andi	r2,r2,7
    f8c8:	1007883a 	mov	r3,r2
    f8cc:	e0bff517 	ldw	r2,-44(fp)
    f8d0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    f8d4:	e0bff517 	ldw	r2,-44(fp)
    f8d8:	10800d03 	ldbu	r2,52(r2)
    f8dc:	10803fcc 	andi	r2,r2,255
    f8e0:	00c00044 	movi	r3,1
    f8e4:	1884983a 	sll	r2,r3,r2
    f8e8:	1007883a 	mov	r3,r2
    f8ec:	e0bff517 	ldw	r2,-44(fp)
    f8f0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    f8f4:	e0bff517 	ldw	r2,-44(fp)
    f8f8:	10800cc3 	ldbu	r2,51(r2)
    f8fc:	10803fcc 	andi	r2,r2,255
    f900:	00c00044 	movi	r3,1
    f904:	1884983a 	sll	r2,r3,r2
    f908:	1007883a 	mov	r3,r2
    f90c:	e0bff517 	ldw	r2,-44(fp)
    f910:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    f914:	e0bff517 	ldw	r2,-44(fp)
    f918:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    f91c:	e0bff517 	ldw	r2,-44(fp)
    f920:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    f924:	e0bff517 	ldw	r2,-44(fp)
    f928:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    f92c:	e0bff517 	ldw	r2,-44(fp)
    f930:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    f934:	e0bff517 	ldw	r2,-44(fp)
    f938:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    f93c:	e0bff517 	ldw	r2,-44(fp)
    f940:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    f944:	e0bff517 	ldw	r2,-44(fp)
    f948:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    f94c:	e0bff517 	ldw	r2,-44(fp)
    f950:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    f954:	e0bff517 	ldw	r2,-44(fp)
    f958:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    f95c:	e0bff517 	ldw	r2,-44(fp)
    f960:	00c00fc4 	movi	r3,63
    f964:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    f968:	e0bff517 	ldw	r2,-44(fp)
    f96c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    f970:	e13ff517 	ldw	r4,-44(fp)
    f974:	00193280 	call	19328 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    f978:	e13ff517 	ldw	r4,-44(fp)
    f97c:	00192400 	call	19240 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f980:	0005303a 	rdctl	r2,status
    f984:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f988:	e0fff817 	ldw	r3,-32(fp)
    f98c:	00bfff84 	movi	r2,-2
    f990:	1884703a 	and	r2,r3,r2
    f994:	1001703a 	wrctl	status,r2
  
  return context;
    f998:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    f99c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    f9a0:	e0fffb03 	ldbu	r3,-20(fp)
    f9a4:	008000b4 	movhi	r2,2
    f9a8:	10965b04 	addi	r2,r2,22892
    f9ac:	18c7883a 	add	r3,r3,r3
    f9b0:	18c7883a 	add	r3,r3,r3
    f9b4:	10c5883a 	add	r2,r2,r3
    f9b8:	e0fff517 	ldw	r3,-44(fp)
    f9bc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    f9c0:	d0e8be17 	ldw	r3,-23816(gp)
    f9c4:	e0bff517 	ldw	r2,-44(fp)
    f9c8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    f9cc:	e0bff517 	ldw	r2,-44(fp)
    f9d0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    f9d4:	d0a8be17 	ldw	r2,-23816(gp)
    f9d8:	10000326 	beq	r2,zero,f9e8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    f9dc:	d0a8be17 	ldw	r2,-23816(gp)
    f9e0:	e0fff517 	ldw	r3,-44(fp)
    f9e4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    f9e8:	e0bff517 	ldw	r2,-44(fp)
    f9ec:	d0a8be15 	stw	r2,-23816(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    f9f0:	e0bff517 	ldw	r2,-44(fp)
    f9f4:	10c00d83 	ldbu	r3,54(r2)
    f9f8:	d0a8c703 	ldbu	r2,-23780(gp)
    f9fc:	1884b03a 	or	r2,r3,r2
    fa00:	d0a8c705 	stb	r2,-23780(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fa04:	e0bff517 	ldw	r2,-44(fp)
    fa08:	10800d03 	ldbu	r2,52(r2)
    fa0c:	10c03fcc 	andi	r3,r2,255
    fa10:	e0bff517 	ldw	r2,-44(fp)
    fa14:	10800d03 	ldbu	r2,52(r2)
    fa18:	11003fcc 	andi	r4,r2,255
    fa1c:	d0a8c744 	addi	r2,gp,-23779
    fa20:	2085883a 	add	r2,r4,r2
    fa24:	11000003 	ldbu	r4,0(r2)
    fa28:	e0bff517 	ldw	r2,-44(fp)
    fa2c:	10800d43 	ldbu	r2,53(r2)
    fa30:	2084b03a 	or	r2,r4,r2
    fa34:	1009883a 	mov	r4,r2
    fa38:	d0a8c744 	addi	r2,gp,-23779
    fa3c:	1885883a 	add	r2,r3,r2
    fa40:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fa44:	d0a8c343 	ldbu	r2,-23795(gp)
    fa48:	10800044 	addi	r2,r2,1
    fa4c:	d0a8c345 	stb	r2,-23795(gp)
    fa50:	e0bff417 	ldw	r2,-48(fp)
    fa54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa58:	e0bff917 	ldw	r2,-28(fp)
    fa5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fa60:	0005883a 	mov	r2,zero
    fa64:	00000506 	br	fa7c <OS_TCBInit+0x2c0>
    fa68:	e0bff417 	ldw	r2,-48(fp)
    fa6c:	e0bffa15 	stw	r2,-24(fp)
    fa70:	e0bffa17 	ldw	r2,-24(fp)
    fa74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    fa78:	00801084 	movi	r2,66
}
    fa7c:	e037883a 	mov	sp,fp
    fa80:	dfc00117 	ldw	ra,4(sp)
    fa84:	df000017 	ldw	fp,0(sp)
    fa88:	dec00204 	addi	sp,sp,8
    fa8c:	f800283a 	ret

0000fa90 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    fa90:	defffe04 	addi	sp,sp,-8
    fa94:	df000115 	stw	fp,4(sp)
    fa98:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    fa9c:	d0a01204 	addi	r2,gp,-32696
    faa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    faa4:	d0a01304 	addi	r2,gp,-32692
    faa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    faac:	d0a01484 	addi	r2,gp,-32686
    fab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    fab4:	d0a01504 	addi	r2,gp,-32684
    fab8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    fabc:	d0a01404 	addi	r2,gp,-32688
    fac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    fac4:	d0a01584 	addi	r2,gp,-32682
    fac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    facc:	d0a01604 	addi	r2,gp,-32680
    fad0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    fad4:	d0a01684 	addi	r2,gp,-32678
    fad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    fadc:	d0a01704 	addi	r2,gp,-32676
    fae0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    fae4:	d0a01784 	addi	r2,gp,-32674
    fae8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    faec:	d0a01804 	addi	r2,gp,-32672
    faf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    faf4:	d0a01884 	addi	r2,gp,-32670
    faf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    fafc:	d0a01904 	addi	r2,gp,-32668
    fb00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    fb04:	d0a01984 	addi	r2,gp,-32666
    fb08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    fb0c:	d0a01a04 	addi	r2,gp,-32664
    fb10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    fb14:	d0a01a84 	addi	r2,gp,-32662
    fb18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    fb1c:	d0a01b04 	addi	r2,gp,-32660
    fb20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    fb24:	d0a01b84 	addi	r2,gp,-32658
    fb28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    fb2c:	d0a01c04 	addi	r2,gp,-32656
    fb30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    fb34:	d0a01c84 	addi	r2,gp,-32654
    fb38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    fb3c:	d0a01d04 	addi	r2,gp,-32652
    fb40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    fb44:	d0a01d84 	addi	r2,gp,-32650
    fb48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    fb4c:	d0a01e04 	addi	r2,gp,-32648
    fb50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    fb54:	d0a01e84 	addi	r2,gp,-32646
    fb58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    fb5c:	d0a01f04 	addi	r2,gp,-32644
    fb60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    fb64:	d0a01f84 	addi	r2,gp,-32642
    fb68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    fb6c:	d0a02004 	addi	r2,gp,-32640
    fb70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    fb74:	d0a02084 	addi	r2,gp,-32638
    fb78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fb7c:	d0a02104 	addi	r2,gp,-32636
    fb80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fb84:	d0a02184 	addi	r2,gp,-32634
    fb88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    fb8c:	d0a02204 	addi	r2,gp,-32632
    fb90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    fb94:	d0a02284 	addi	r2,gp,-32630
    fb98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    fb9c:	d0a02304 	addi	r2,gp,-32628
    fba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    fba4:	d0a02384 	addi	r2,gp,-32626
    fba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    fbac:	d0a02404 	addi	r2,gp,-32624
    fbb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    fbb4:	d0a02484 	addi	r2,gp,-32622
    fbb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    fbbc:	d0a02504 	addi	r2,gp,-32620
    fbc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    fbc4:	d0a02584 	addi	r2,gp,-32618
    fbc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    fbcc:	d0a02604 	addi	r2,gp,-32616
    fbd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    fbd4:	d0a02684 	addi	r2,gp,-32614
    fbd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    fbdc:	d0a02704 	addi	r2,gp,-32612
    fbe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    fbe4:	d0a02784 	addi	r2,gp,-32610
    fbe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    fbec:	d0a02804 	addi	r2,gp,-32608
    fbf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    fbf4:	d0a02884 	addi	r2,gp,-32606
    fbf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    fbfc:	d0a02904 	addi	r2,gp,-32604
    fc00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    fc04:	d0a02e04 	addi	r2,gp,-32584
    fc08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    fc0c:	e037883a 	mov	sp,fp
    fc10:	df000017 	ldw	fp,0(sp)
    fc14:	dec00104 	addi	sp,sp,4
    fc18:	f800283a 	ret

0000fc1c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    fc1c:	defff204 	addi	sp,sp,-56
    fc20:	df000d15 	stw	fp,52(sp)
    fc24:	df000d04 	addi	fp,sp,52
    fc28:	e13ffc15 	stw	r4,-16(fp)
    fc2c:	2807883a 	mov	r3,r5
    fc30:	3005883a 	mov	r2,r6
    fc34:	e1ffff15 	stw	r7,-4(fp)
    fc38:	e0fffd0d 	sth	r3,-12(fp)
    fc3c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fc40:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fc44:	e0bfff17 	ldw	r2,-4(fp)
    fc48:	1000021e 	bne	r2,zero,fc54 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    fc4c:	0005883a 	mov	r2,zero
    fc50:	0000b006 	br	ff14 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fc54:	e0bffc17 	ldw	r2,-16(fp)
    fc58:	1000051e 	bne	r2,zero,fc70 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fc5c:	e0bfff17 	ldw	r2,-4(fp)
    fc60:	00c01b84 	movi	r3,110
    fc64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fc68:	0005883a 	mov	r2,zero
    fc6c:	0000a906 	br	ff14 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	10800003 	ldbu	r2,0(r2)
    fc78:	10803fcc 	andi	r2,r2,255
    fc7c:	10800160 	cmpeqi	r2,r2,5
    fc80:	1000051e 	bne	r2,zero,fc98 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    fc84:	e0bfff17 	ldw	r2,-4(fp)
    fc88:	00c00044 	movi	r3,1
    fc8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fc90:	0005883a 	mov	r2,zero
    fc94:	00009f06 	br	ff14 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fc98:	e0fffe03 	ldbu	r3,-8(fp)
    fc9c:	00bfe004 	movi	r2,-128
    fca0:	1884703a 	and	r2,r3,r2
    fca4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    fca8:	e0bff503 	ldbu	r2,-44(fp)
    fcac:	10000626 	beq	r2,zero,fcc8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    fcb0:	e0bffe03 	ldbu	r2,-8(fp)
    fcb4:	10801fcc 	andi	r2,r2,127
    fcb8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    fcbc:	00800044 	movi	r2,1
    fcc0:	e0bff385 	stb	r2,-50(fp)
    fcc4:	00000106 	br	fccc <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    fcc8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    fccc:	e0bfff17 	ldw	r2,-4(fp)
    fcd0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcd4:	0005303a 	rdctl	r2,status
    fcd8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcdc:	e0fff617 	ldw	r3,-40(fp)
    fce0:	00bfff84 	movi	r2,-2
    fce4:	1884703a 	and	r2,r3,r2
    fce8:	1001703a 	wrctl	status,r2
  
  return context;
    fcec:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    fcf0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    fcf4:	e0bffe03 	ldbu	r2,-8(fp)
    fcf8:	10c00060 	cmpeqi	r3,r2,1
    fcfc:	18005f1e 	bne	r3,zero,fe7c <OSFlagAccept+0x260>
    fd00:	10c00088 	cmpgei	r3,r2,2
    fd04:	1800021e 	bne	r3,zero,fd10 <OSFlagAccept+0xf4>
    fd08:	10003f26 	beq	r2,zero,fe08 <OSFlagAccept+0x1ec>
    fd0c:	00007706 	br	feec <OSFlagAccept+0x2d0>
    fd10:	10c000a0 	cmpeqi	r3,r2,2
    fd14:	1800031e 	bne	r3,zero,fd24 <OSFlagAccept+0x108>
    fd18:	108000e0 	cmpeqi	r2,r2,3
    fd1c:	10001e1e 	bne	r2,zero,fd98 <OSFlagAccept+0x17c>
    fd20:	00007206 	br	feec <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10c0020b 	ldhu	r3,8(r2)
    fd2c:	e0bffd0b 	ldhu	r2,-12(fp)
    fd30:	1884703a 	and	r2,r3,r2
    fd34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fd38:	e0fff30b 	ldhu	r3,-52(fp)
    fd3c:	e0bffd0b 	ldhu	r2,-12(fp)
    fd40:	18800d1e 	bne	r3,r2,fd78 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fd44:	e0bff383 	ldbu	r2,-50(fp)
    fd48:	10800058 	cmpnei	r2,r2,1
    fd4c:	10000d1e 	bne	r2,zero,fd84 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    fd50:	e0bffc17 	ldw	r2,-16(fp)
    fd54:	1080020b 	ldhu	r2,8(r2)
    fd58:	1007883a 	mov	r3,r2
    fd5c:	e0bff30b 	ldhu	r2,-52(fp)
    fd60:	0084303a 	nor	r2,zero,r2
    fd64:	1884703a 	and	r2,r3,r2
    fd68:	1007883a 	mov	r3,r2
    fd6c:	e0bffc17 	ldw	r2,-16(fp)
    fd70:	10c0020d 	sth	r3,8(r2)
    fd74:	00000306 	br	fd84 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fd78:	e0bfff17 	ldw	r2,-4(fp)
    fd7c:	00c01c04 	movi	r3,112
    fd80:	10c00005 	stb	r3,0(r2)
    fd84:	e0bff417 	ldw	r2,-48(fp)
    fd88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd8c:	e0bff717 	ldw	r2,-36(fp)
    fd90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fd94:	00005e06 	br	ff10 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10c0020b 	ldhu	r3,8(r2)
    fda0:	e0bffd0b 	ldhu	r2,-12(fp)
    fda4:	1884703a 	and	r2,r3,r2
    fda8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    fdac:	e0bff30b 	ldhu	r2,-52(fp)
    fdb0:	10000d26 	beq	r2,zero,fde8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fdb4:	e0bff383 	ldbu	r2,-50(fp)
    fdb8:	10800058 	cmpnei	r2,r2,1
    fdbc:	10000d1e 	bne	r2,zero,fdf4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    fdc0:	e0bffc17 	ldw	r2,-16(fp)
    fdc4:	1080020b 	ldhu	r2,8(r2)
    fdc8:	1007883a 	mov	r3,r2
    fdcc:	e0bff30b 	ldhu	r2,-52(fp)
    fdd0:	0084303a 	nor	r2,zero,r2
    fdd4:	1884703a 	and	r2,r3,r2
    fdd8:	1007883a 	mov	r3,r2
    fddc:	e0bffc17 	ldw	r2,-16(fp)
    fde0:	10c0020d 	sth	r3,8(r2)
    fde4:	00000306 	br	fdf4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fde8:	e0bfff17 	ldw	r2,-4(fp)
    fdec:	00c01c04 	movi	r3,112
    fdf0:	10c00005 	stb	r3,0(r2)
    fdf4:	e0bff417 	ldw	r2,-48(fp)
    fdf8:	e0bff815 	stw	r2,-32(fp)
    fdfc:	e0bff817 	ldw	r2,-32(fp)
    fe00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fe04:	00004206 	br	ff10 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    fe08:	e0bffc17 	ldw	r2,-16(fp)
    fe0c:	1080020b 	ldhu	r2,8(r2)
    fe10:	0084303a 	nor	r2,zero,r2
    fe14:	1007883a 	mov	r3,r2
    fe18:	e0bffd0b 	ldhu	r2,-12(fp)
    fe1c:	1884703a 	and	r2,r3,r2
    fe20:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fe24:	e0fff30b 	ldhu	r3,-52(fp)
    fe28:	e0bffd0b 	ldhu	r2,-12(fp)
    fe2c:	18800b1e 	bne	r3,r2,fe5c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fe30:	e0bff383 	ldbu	r2,-50(fp)
    fe34:	10800058 	cmpnei	r2,r2,1
    fe38:	10000b1e 	bne	r2,zero,fe68 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    fe3c:	e0bffc17 	ldw	r2,-16(fp)
    fe40:	10c0020b 	ldhu	r3,8(r2)
    fe44:	e0bff30b 	ldhu	r2,-52(fp)
    fe48:	1884b03a 	or	r2,r3,r2
    fe4c:	1007883a 	mov	r3,r2
    fe50:	e0bffc17 	ldw	r2,-16(fp)
    fe54:	10c0020d 	sth	r3,8(r2)
    fe58:	00000306 	br	fe68 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fe5c:	e0bfff17 	ldw	r2,-4(fp)
    fe60:	00c01c04 	movi	r3,112
    fe64:	10c00005 	stb	r3,0(r2)
    fe68:	e0bff417 	ldw	r2,-48(fp)
    fe6c:	e0bff915 	stw	r2,-28(fp)
    fe70:	e0bff917 	ldw	r2,-28(fp)
    fe74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fe78:	00002506 	br	ff10 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    fe7c:	e0bffc17 	ldw	r2,-16(fp)
    fe80:	1080020b 	ldhu	r2,8(r2)
    fe84:	0084303a 	nor	r2,zero,r2
    fe88:	1007883a 	mov	r3,r2
    fe8c:	e0bffd0b 	ldhu	r2,-12(fp)
    fe90:	1884703a 	and	r2,r3,r2
    fe94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    fe98:	e0bff30b 	ldhu	r2,-52(fp)
    fe9c:	10000b26 	beq	r2,zero,fecc <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fea0:	e0bff383 	ldbu	r2,-50(fp)
    fea4:	10800058 	cmpnei	r2,r2,1
    fea8:	10000b1e 	bne	r2,zero,fed8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10c0020b 	ldhu	r3,8(r2)
    feb4:	e0bff30b 	ldhu	r2,-52(fp)
    feb8:	1884b03a 	or	r2,r3,r2
    febc:	1007883a 	mov	r3,r2
    fec0:	e0bffc17 	ldw	r2,-16(fp)
    fec4:	10c0020d 	sth	r3,8(r2)
    fec8:	00000306 	br	fed8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fecc:	e0bfff17 	ldw	r2,-4(fp)
    fed0:	00c01c04 	movi	r3,112
    fed4:	10c00005 	stb	r3,0(r2)
    fed8:	e0bff417 	ldw	r2,-48(fp)
    fedc:	e0bffa15 	stw	r2,-24(fp)
    fee0:	e0bffa17 	ldw	r2,-24(fp)
    fee4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fee8:	00000906 	br	ff10 <OSFlagAccept+0x2f4>
    feec:	e0bff417 	ldw	r2,-48(fp)
    fef0:	e0bffb15 	stw	r2,-20(fp)
    fef4:	e0bffb17 	ldw	r2,-20(fp)
    fef8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    fefc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    ff00:	e0bfff17 	ldw	r2,-4(fp)
    ff04:	00c01bc4 	movi	r3,111
    ff08:	10c00005 	stb	r3,0(r2)
             break;
    ff0c:	0001883a 	nop
    }
    return (flags_rdy);
    ff10:	e0bff30b 	ldhu	r2,-52(fp)
}
    ff14:	e037883a 	mov	sp,fp
    ff18:	df000017 	ldw	fp,0(sp)
    ff1c:	dec00104 	addi	sp,sp,4
    ff20:	f800283a 	ret

0000ff24 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    ff24:	defff804 	addi	sp,sp,-32
    ff28:	df000715 	stw	fp,28(sp)
    ff2c:	df000704 	addi	fp,sp,28
    ff30:	2005883a 	mov	r2,r4
    ff34:	e17fff15 	stw	r5,-4(fp)
    ff38:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    ff3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    ff40:	e0bfff17 	ldw	r2,-4(fp)
    ff44:	1000021e 	bne	r2,zero,ff50 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    ff48:	0005883a 	mov	r2,zero
    ff4c:	00003b06 	br	1003c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    ff50:	008000b4 	movhi	r2,2
    ff54:	10b9c804 	addi	r2,r2,-6368
    ff58:	10800003 	ldbu	r2,0(r2)
    ff5c:	10803fcc 	andi	r2,r2,255
    ff60:	10000526 	beq	r2,zero,ff78 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    ff64:	e0bfff17 	ldw	r2,-4(fp)
    ff68:	00c00404 	movi	r3,16
    ff6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    ff70:	0005883a 	mov	r2,zero
    ff74:	00003106 	br	1003c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff78:	0005303a 	rdctl	r2,status
    ff7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff80:	e0fffb17 	ldw	r3,-20(fp)
    ff84:	00bfff84 	movi	r2,-2
    ff88:	1884703a 	and	r2,r3,r2
    ff8c:	1001703a 	wrctl	status,r2
  
  return context;
    ff90:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    ff94:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    ff98:	008000b4 	movhi	r2,2
    ff9c:	10b9cb04 	addi	r2,r2,-6356
    ffa0:	10800017 	ldw	r2,0(r2)
    ffa4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    ffa8:	e0bffa17 	ldw	r2,-24(fp)
    ffac:	10001b26 	beq	r2,zero,1001c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    ffb0:	008000b4 	movhi	r2,2
    ffb4:	10b9cb04 	addi	r2,r2,-6356
    ffb8:	10800017 	ldw	r2,0(r2)
    ffbc:	10c00117 	ldw	r3,4(r2)
    ffc0:	008000b4 	movhi	r2,2
    ffc4:	10b9cb04 	addi	r2,r2,-6356
    ffc8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    ffcc:	e0bffa17 	ldw	r2,-24(fp)
    ffd0:	00c00144 	movi	r3,5
    ffd4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    ffd8:	e0bffa17 	ldw	r2,-24(fp)
    ffdc:	e0fffe0b 	ldhu	r3,-8(fp)
    ffe0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    ffe4:	e0bffa17 	ldw	r2,-24(fp)
    ffe8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    ffec:	e0bffa17 	ldw	r2,-24(fp)
    fff0:	00c00fc4 	movi	r3,63
    fff4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    fff8:	e0bffa17 	ldw	r2,-24(fp)
    fffc:	100002c5 	stb	zero,11(r2)
   10000:	e0bff917 	ldw	r2,-28(fp)
   10004:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10010:	e0bfff17 	ldw	r2,-4(fp)
   10014:	10000005 	stb	zero,0(r2)
   10018:	00000706 	br	10038 <OSFlagCreate+0x114>
   1001c:	e0bff917 	ldw	r2,-28(fp)
   10020:	e0bffd15 	stw	r2,-12(fp)
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1002c:	e0bfff17 	ldw	r2,-4(fp)
   10030:	00c01c84 	movi	r3,114
   10034:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10038:	e0bffa17 	ldw	r2,-24(fp)
}
   1003c:	e037883a 	mov	sp,fp
   10040:	df000017 	ldw	fp,0(sp)
   10044:	dec00104 	addi	sp,sp,4
   10048:	f800283a 	ret

0001004c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1004c:	defff204 	addi	sp,sp,-56
   10050:	dfc00d15 	stw	ra,52(sp)
   10054:	df000c15 	stw	fp,48(sp)
   10058:	df000c04 	addi	fp,sp,48
   1005c:	e13ffd15 	stw	r4,-12(fp)
   10060:	2805883a 	mov	r2,r5
   10064:	e1bfff15 	stw	r6,-4(fp)
   10068:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1006c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10070:	e0bfff17 	ldw	r2,-4(fp)
   10074:	1000021e 	bne	r2,zero,10080 <OSFlagDel+0x34>
        return (pgrp);
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	00008a06 	br	102a8 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10080:	e0bffd17 	ldw	r2,-12(fp)
   10084:	1000051e 	bne	r2,zero,1009c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10088:	e0bfff17 	ldw	r2,-4(fp)
   1008c:	00c01b84 	movi	r3,110
   10090:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10094:	e0bffd17 	ldw	r2,-12(fp)
   10098:	00008306 	br	102a8 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1009c:	008000b4 	movhi	r2,2
   100a0:	10b9c804 	addi	r2,r2,-6368
   100a4:	10800003 	ldbu	r2,0(r2)
   100a8:	10803fcc 	andi	r2,r2,255
   100ac:	10000526 	beq	r2,zero,100c4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   100b0:	e0bfff17 	ldw	r2,-4(fp)
   100b4:	00c003c4 	movi	r3,15
   100b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	00007906 	br	102a8 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   100c4:	e0bffd17 	ldw	r2,-12(fp)
   100c8:	10800003 	ldbu	r2,0(r2)
   100cc:	10803fcc 	andi	r2,r2,255
   100d0:	10800160 	cmpeqi	r2,r2,5
   100d4:	1000051e 	bne	r2,zero,100ec <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   100d8:	e0bfff17 	ldw	r2,-4(fp)
   100dc:	00c00044 	movi	r3,1
   100e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   100e4:	e0bffd17 	ldw	r2,-12(fp)
   100e8:	00006f06 	br	102a8 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100ec:	0005303a 	rdctl	r2,status
   100f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100f4:	e0fff817 	ldw	r3,-32(fp)
   100f8:	00bfff84 	movi	r2,-2
   100fc:	1884703a 	and	r2,r3,r2
   10100:	1001703a 	wrctl	status,r2
  
  return context;
   10104:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   10108:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1010c:	e0bffd17 	ldw	r2,-12(fp)
   10110:	10800117 	ldw	r2,4(r2)
   10114:	10000326 	beq	r2,zero,10124 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10118:	00800044 	movi	r2,1
   1011c:	e0bff405 	stb	r2,-48(fp)
   10120:	00000106 	br	10128 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10124:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10128:	e0bffe03 	ldbu	r2,-8(fp)
   1012c:	10000326 	beq	r2,zero,1013c <OSFlagDel+0xf0>
   10130:	10800060 	cmpeqi	r2,r2,1
   10134:	1000271e 	bne	r2,zero,101d4 <OSFlagDel+0x188>
   10138:	00005006 	br	1027c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1013c:	e0bff403 	ldbu	r2,-48(fp)
   10140:	10001a1e 	bne	r2,zero,101ac <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00fc4 	movi	r3,63
   1014c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10158:	e0bffd17 	ldw	r2,-12(fp)
   1015c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10160:	008000b4 	movhi	r2,2
   10164:	10b9cb04 	addi	r2,r2,-6356
   10168:	10c00017 	ldw	r3,0(r2)
   1016c:	e0bffd17 	ldw	r2,-12(fp)
   10170:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10174:	e0bffd17 	ldw	r2,-12(fp)
   10178:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1017c:	008000b4 	movhi	r2,2
   10180:	10b9cb04 	addi	r2,r2,-6356
   10184:	e0fffd17 	ldw	r3,-12(fp)
   10188:	10c00015 	stw	r3,0(r2)
   1018c:	e0bff717 	ldw	r2,-36(fp)
   10190:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10194:	e0bff917 	ldw	r2,-28(fp)
   10198:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1019c:	e0bfff17 	ldw	r2,-4(fp)
   101a0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   101a4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   101a8:	00003e06 	br	102a4 <OSFlagDel+0x258>
   101ac:	e0bff717 	ldw	r2,-36(fp)
   101b0:	e0bffa15 	stw	r2,-24(fp)
   101b4:	e0bffa17 	ldw	r2,-24(fp)
   101b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   101bc:	e0bfff17 	ldw	r2,-4(fp)
   101c0:	00c01244 	movi	r3,73
   101c4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   101d0:	00003406 	br	102a4 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   101d4:	e0bffd17 	ldw	r2,-12(fp)
   101d8:	10800117 	ldw	r2,4(r2)
   101dc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   101e0:	00000606 	br	101fc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   101e4:	e13ff517 	ldw	r4,-44(fp)
   101e8:	000b883a 	mov	r5,zero
   101ec:	00112880 	call	11288 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   101f0:	e0bff517 	ldw	r2,-44(fp)
   101f4:	10800017 	ldw	r2,0(r2)
   101f8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   101fc:	e0bff517 	ldw	r2,-44(fp)
   10200:	103ff81e 	bne	r2,zero,101e4 <__alt_mem_Flash_flash_data+0xf40101e4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10204:	e0bffd17 	ldw	r2,-12(fp)
   10208:	00c00fc4 	movi	r3,63
   1020c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10210:	e0bffd17 	ldw	r2,-12(fp)
   10214:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10218:	e0bffd17 	ldw	r2,-12(fp)
   1021c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10220:	008000b4 	movhi	r2,2
   10224:	10b9cb04 	addi	r2,r2,-6356
   10228:	10c00017 	ldw	r3,0(r2)
   1022c:	e0bffd17 	ldw	r2,-12(fp)
   10230:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10234:	e0bffd17 	ldw	r2,-12(fp)
   10238:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1023c:	008000b4 	movhi	r2,2
   10240:	10b9cb04 	addi	r2,r2,-6356
   10244:	e0fffd17 	ldw	r3,-12(fp)
   10248:	10c00015 	stw	r3,0(r2)
   1024c:	e0bff717 	ldw	r2,-36(fp)
   10250:	e0bffb15 	stw	r2,-20(fp)
   10254:	e0bffb17 	ldw	r2,-20(fp)
   10258:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1025c:	e0bff403 	ldbu	r2,-48(fp)
   10260:	10800058 	cmpnei	r2,r2,1
   10264:	1000011e 	bne	r2,zero,1026c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10268:	000f3b80 	call	f3b8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1026c:	e0bfff17 	ldw	r2,-4(fp)
   10270:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10274:	e03ff615 	stw	zero,-40(fp)
             break;
   10278:	00000a06 	br	102a4 <OSFlagDel+0x258>
   1027c:	e0bff717 	ldw	r2,-36(fp)
   10280:	e0bffc15 	stw	r2,-16(fp)
   10284:	e0bffc17 	ldw	r2,-16(fp)
   10288:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	00c001c4 	movi	r3,7
   10294:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10298:	e0bffd17 	ldw	r2,-12(fp)
   1029c:	e0bff615 	stw	r2,-40(fp)
             break;
   102a0:	0001883a 	nop
    }
    return (pgrp_return);
   102a4:	e0bff617 	ldw	r2,-40(fp)
}
   102a8:	e037883a 	mov	sp,fp
   102ac:	dfc00117 	ldw	ra,4(sp)
   102b0:	df000017 	ldw	fp,0(sp)
   102b4:	dec00204 	addi	sp,sp,8
   102b8:	f800283a 	ret

000102bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   102bc:	defff604 	addi	sp,sp,-40
   102c0:	dfc00915 	stw	ra,36(sp)
   102c4:	df000815 	stw	fp,32(sp)
   102c8:	df000804 	addi	fp,sp,32
   102cc:	e13ffd15 	stw	r4,-12(fp)
   102d0:	e17ffe15 	stw	r5,-8(fp)
   102d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   102d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   102dc:	e0bfff17 	ldw	r2,-4(fp)
   102e0:	1000021e 	bne	r2,zero,102ec <OSFlagNameGet+0x30>
        return (0);
   102e4:	0005883a 	mov	r2,zero
   102e8:	00003b06 	br	103d8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   102ec:	e0bffd17 	ldw	r2,-12(fp)
   102f0:	1000051e 	bne	r2,zero,10308 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	00c01b84 	movi	r3,110
   102fc:	10c00005 	stb	r3,0(r2)
        return (0);
   10300:	0005883a 	mov	r2,zero
   10304:	00003406 	br	103d8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10308:	e0bffe17 	ldw	r2,-8(fp)
   1030c:	1000051e 	bne	r2,zero,10324 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	00c00304 	movi	r3,12
   10318:	10c00005 	stb	r3,0(r2)
        return (0);
   1031c:	0005883a 	mov	r2,zero
   10320:	00002d06 	br	103d8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10324:	008000b4 	movhi	r2,2
   10328:	10b9c804 	addi	r2,r2,-6368
   1032c:	10800003 	ldbu	r2,0(r2)
   10330:	10803fcc 	andi	r2,r2,255
   10334:	10000526 	beq	r2,zero,1034c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   10338:	e0bfff17 	ldw	r2,-4(fp)
   1033c:	00c00444 	movi	r3,17
   10340:	10c00005 	stb	r3,0(r2)
        return (0);
   10344:	0005883a 	mov	r2,zero
   10348:	00002306 	br	103d8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1034c:	0005303a 	rdctl	r2,status
   10350:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10354:	e0fffa17 	ldw	r3,-24(fp)
   10358:	00bfff84 	movi	r2,-2
   1035c:	1884703a 	and	r2,r3,r2
   10360:	1001703a 	wrctl	status,r2
  
  return context;
   10364:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10368:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1036c:	e0bffd17 	ldw	r2,-12(fp)
   10370:	10800003 	ldbu	r2,0(r2)
   10374:	10803fcc 	andi	r2,r2,255
   10378:	10800160 	cmpeqi	r2,r2,5
   1037c:	1000091e 	bne	r2,zero,103a4 <OSFlagNameGet+0xe8>
   10380:	e0bff817 	ldw	r2,-32(fp)
   10384:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10388:	e0bffb17 	ldw	r2,-20(fp)
   1038c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10390:	e0bfff17 	ldw	r2,-4(fp)
   10394:	00c00044 	movi	r3,1
   10398:	10c00005 	stb	r3,0(r2)
        return (0);
   1039c:	0005883a 	mov	r2,zero
   103a0:	00000d06 	br	103d8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   103a4:	e0bffd17 	ldw	r2,-12(fp)
   103a8:	10800284 	addi	r2,r2,10
   103ac:	e13ffe17 	ldw	r4,-8(fp)
   103b0:	100b883a 	mov	r5,r2
   103b4:	000f4f40 	call	f4f4 <OS_StrCopy>
   103b8:	e0bff905 	stb	r2,-28(fp)
   103bc:	e0bff817 	ldw	r2,-32(fp)
   103c0:	e0bffc15 	stw	r2,-16(fp)
   103c4:	e0bffc17 	ldw	r2,-16(fp)
   103c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   103cc:	e0bfff17 	ldw	r2,-4(fp)
   103d0:	10000005 	stb	zero,0(r2)
    return (len);
   103d4:	e0bff903 	ldbu	r2,-28(fp)
}
   103d8:	e037883a 	mov	sp,fp
   103dc:	dfc00117 	ldw	ra,4(sp)
   103e0:	df000017 	ldw	fp,0(sp)
   103e4:	dec00204 	addi	sp,sp,8
   103e8:	f800283a 	ret

000103ec <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   103ec:	defff504 	addi	sp,sp,-44
   103f0:	dfc00a15 	stw	ra,40(sp)
   103f4:	df000915 	stw	fp,36(sp)
   103f8:	df000904 	addi	fp,sp,36
   103fc:	e13ffd15 	stw	r4,-12(fp)
   10400:	e17ffe15 	stw	r5,-8(fp)
   10404:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10408:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1040c:	e0bfff17 	ldw	r2,-4(fp)
   10410:	1000011e 	bne	r2,zero,10418 <OSFlagNameSet+0x2c>
        return;
   10414:	00004406 	br	10528 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10418:	e0bffd17 	ldw	r2,-12(fp)
   1041c:	1000041e 	bne	r2,zero,10430 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10420:	e0bfff17 	ldw	r2,-4(fp)
   10424:	00c01b84 	movi	r3,110
   10428:	10c00005 	stb	r3,0(r2)
        return;
   1042c:	00003e06 	br	10528 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10430:	e0bffe17 	ldw	r2,-8(fp)
   10434:	1000041e 	bne	r2,zero,10448 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10438:	e0bfff17 	ldw	r2,-4(fp)
   1043c:	00c00304 	movi	r3,12
   10440:	10c00005 	stb	r3,0(r2)
        return;
   10444:	00003806 	br	10528 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10448:	008000b4 	movhi	r2,2
   1044c:	10b9c804 	addi	r2,r2,-6368
   10450:	10800003 	ldbu	r2,0(r2)
   10454:	10803fcc 	andi	r2,r2,255
   10458:	10000426 	beq	r2,zero,1046c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1045c:	e0bfff17 	ldw	r2,-4(fp)
   10460:	00c00484 	movi	r3,18
   10464:	10c00005 	stb	r3,0(r2)
        return;
   10468:	00002f06 	br	10528 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1046c:	0005303a 	rdctl	r2,status
   10470:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10474:	e0fff917 	ldw	r3,-28(fp)
   10478:	00bfff84 	movi	r2,-2
   1047c:	1884703a 	and	r2,r3,r2
   10480:	1001703a 	wrctl	status,r2
  
  return context;
   10484:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   10488:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1048c:	e0bffd17 	ldw	r2,-12(fp)
   10490:	10800003 	ldbu	r2,0(r2)
   10494:	10803fcc 	andi	r2,r2,255
   10498:	10800160 	cmpeqi	r2,r2,5
   1049c:	1000081e 	bne	r2,zero,104c0 <OSFlagNameSet+0xd4>
   104a0:	e0bff717 	ldw	r2,-36(fp)
   104a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104a8:	e0bffa17 	ldw	r2,-24(fp)
   104ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   104b0:	e0bfff17 	ldw	r2,-4(fp)
   104b4:	00c00044 	movi	r3,1
   104b8:	10c00005 	stb	r3,0(r2)
        return;
   104bc:	00001a06 	br	10528 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   104c0:	e13ffe17 	ldw	r4,-8(fp)
   104c4:	000f5680 	call	f568 <OS_StrLen>
   104c8:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   104cc:	e0bff803 	ldbu	r2,-32(fp)
   104d0:	10800830 	cmpltui	r2,r2,32
   104d4:	1000081e 	bne	r2,zero,104f8 <OSFlagNameSet+0x10c>
   104d8:	e0bff717 	ldw	r2,-36(fp)
   104dc:	e0bffb15 	stw	r2,-20(fp)
   104e0:	e0bffb17 	ldw	r2,-20(fp)
   104e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	00c01cc4 	movi	r3,115
   104f0:	10c00005 	stb	r3,0(r2)
        return;
   104f4:	00000c06 	br	10528 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   104f8:	e0bffd17 	ldw	r2,-12(fp)
   104fc:	10800284 	addi	r2,r2,10
   10500:	1009883a 	mov	r4,r2
   10504:	e17ffe17 	ldw	r5,-8(fp)
   10508:	000f4f40 	call	f4f4 <OS_StrCopy>
   1050c:	e0bff717 	ldw	r2,-36(fp)
   10510:	e0bffc15 	stw	r2,-16(fp)
   10514:	e0bffc17 	ldw	r2,-16(fp)
   10518:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1051c:	e0bfff17 	ldw	r2,-4(fp)
   10520:	10000005 	stb	zero,0(r2)
    return;
   10524:	0001883a 	nop
}
   10528:	e037883a 	mov	sp,fp
   1052c:	dfc00117 	ldw	ra,4(sp)
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00204 	addi	sp,sp,8
   10538:	f800283a 	ret

0001053c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1053c:	deffe204 	addi	sp,sp,-120
   10540:	dfc01d15 	stw	ra,116(sp)
   10544:	df001c15 	stw	fp,112(sp)
   10548:	df001c04 	addi	fp,sp,112
   1054c:	e13ffc15 	stw	r4,-16(fp)
   10550:	2809883a 	mov	r4,r5
   10554:	3007883a 	mov	r3,r6
   10558:	3805883a 	mov	r2,r7
   1055c:	e13ffd0d 	sth	r4,-12(fp)
   10560:	e0fffe05 	stb	r3,-8(fp)
   10564:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10568:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1056c:	e0800217 	ldw	r2,8(fp)
   10570:	1000021e 	bne	r2,zero,1057c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10574:	0005883a 	mov	r2,zero
   10578:	00016706 	br	10b18 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1057c:	e0bffc17 	ldw	r2,-16(fp)
   10580:	1000051e 	bne	r2,zero,10598 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10584:	e0800217 	ldw	r2,8(fp)
   10588:	00c01b84 	movi	r3,110
   1058c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10590:	0005883a 	mov	r2,zero
   10594:	00016006 	br	10b18 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10598:	008000b4 	movhi	r2,2
   1059c:	10b9c804 	addi	r2,r2,-6368
   105a0:	10800003 	ldbu	r2,0(r2)
   105a4:	10803fcc 	andi	r2,r2,255
   105a8:	10000526 	beq	r2,zero,105c0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   105ac:	e0800217 	ldw	r2,8(fp)
   105b0:	00c00084 	movi	r3,2
   105b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   105b8:	0005883a 	mov	r2,zero
   105bc:	00015606 	br	10b18 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   105c0:	008000b4 	movhi	r2,2
   105c4:	10b9ba04 	addi	r2,r2,-6424
   105c8:	10800003 	ldbu	r2,0(r2)
   105cc:	10803fcc 	andi	r2,r2,255
   105d0:	10000526 	beq	r2,zero,105e8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   105d4:	e0800217 	ldw	r2,8(fp)
   105d8:	00c00344 	movi	r3,13
   105dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   105e0:	0005883a 	mov	r2,zero
   105e4:	00014c06 	br	10b18 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10800003 	ldbu	r2,0(r2)
   105f0:	10803fcc 	andi	r2,r2,255
   105f4:	10800160 	cmpeqi	r2,r2,5
   105f8:	1000051e 	bne	r2,zero,10610 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   105fc:	e0800217 	ldw	r2,8(fp)
   10600:	00c00044 	movi	r3,1
   10604:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10608:	0005883a 	mov	r2,zero
   1060c:	00014206 	br	10b18 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10610:	e0fffe03 	ldbu	r3,-8(fp)
   10614:	00bfe004 	movi	r2,-128
   10618:	1884703a 	and	r2,r3,r2
   1061c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10620:	e0bfe703 	ldbu	r2,-100(fp)
   10624:	10000626 	beq	r2,zero,10640 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10628:	e0bffe03 	ldbu	r2,-8(fp)
   1062c:	10801fcc 	andi	r2,r2,127
   10630:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10634:	00800044 	movi	r2,1
   10638:	e0bfe505 	stb	r2,-108(fp)
   1063c:	00000106 	br	10644 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   10640:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10644:	0005303a 	rdctl	r2,status
   10648:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1064c:	e0ffe917 	ldw	r3,-92(fp)
   10650:	00bfff84 	movi	r2,-2
   10654:	1884703a 	and	r2,r3,r2
   10658:	1001703a 	wrctl	status,r2
  
  return context;
   1065c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10660:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   10664:	e0bffe03 	ldbu	r2,-8(fp)
   10668:	10c00060 	cmpeqi	r3,r2,1
   1066c:	1800921e 	bne	r3,zero,108b8 <OSFlagPend+0x37c>
   10670:	10c00088 	cmpgei	r3,r2,2
   10674:	1800021e 	bne	r3,zero,10680 <OSFlagPend+0x144>
   10678:	10006126 	beq	r2,zero,10800 <OSFlagPend+0x2c4>
   1067c:	0000bb06 	br	1096c <OSFlagPend+0x430>
   10680:	10c000a0 	cmpeqi	r3,r2,2
   10684:	1800031e 	bne	r3,zero,10694 <OSFlagPend+0x158>
   10688:	108000e0 	cmpeqi	r2,r2,3
   1068c:	10002f1e 	bne	r2,zero,1074c <OSFlagPend+0x210>
   10690:	0000b606 	br	1096c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10694:	e0bffc17 	ldw	r2,-16(fp)
   10698:	10c0020b 	ldhu	r3,8(r2)
   1069c:	e0bffd0b 	ldhu	r2,-12(fp)
   106a0:	1884703a 	and	r2,r3,r2
   106a4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   106a8:	e0ffe78b 	ldhu	r3,-98(fp)
   106ac:	e0bffd0b 	ldhu	r2,-12(fp)
   106b0:	1880191e 	bne	r3,r2,10718 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   106b4:	e0bfe503 	ldbu	r2,-108(fp)
   106b8:	10800058 	cmpnei	r2,r2,1
   106bc:	1000091e 	bne	r2,zero,106e4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   106c0:	e0bffc17 	ldw	r2,-16(fp)
   106c4:	1080020b 	ldhu	r2,8(r2)
   106c8:	1007883a 	mov	r3,r2
   106cc:	e0bfe78b 	ldhu	r2,-98(fp)
   106d0:	0084303a 	nor	r2,zero,r2
   106d4:	1884703a 	and	r2,r3,r2
   106d8:	1007883a 	mov	r3,r2
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   106e4:	008000b4 	movhi	r2,2
   106e8:	10b9c904 	addi	r2,r2,-6364
   106ec:	10800017 	ldw	r2,0(r2)
   106f0:	e0ffe78b 	ldhu	r3,-98(fp)
   106f4:	10c00b0d 	sth	r3,44(r2)
   106f8:	e0bfe617 	ldw	r2,-104(fp)
   106fc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10700:	e0bfea17 	ldw	r2,-88(fp)
   10704:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10708:	e0800217 	ldw	r2,8(fp)
   1070c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10710:	e0bfe78b 	ldhu	r2,-98(fp)
   10714:	00010006 	br	10b18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10718:	e1bffd0b 	ldhu	r6,-12(fp)
   1071c:	e0fffe03 	ldbu	r3,-8(fp)
   10720:	e0bfff0b 	ldhu	r2,-4(fp)
   10724:	e17ff704 	addi	r5,fp,-36
   10728:	d8800015 	stw	r2,0(sp)
   1072c:	e13ffc17 	ldw	r4,-16(fp)
   10730:	180f883a 	mov	r7,r3
   10734:	0010fe00 	call	10fe0 <OS_FlagBlock>
   10738:	e0bfe617 	ldw	r2,-104(fp)
   1073c:	e0bfeb15 	stw	r2,-84(fp)
   10740:	e0bfeb17 	ldw	r2,-84(fp)
   10744:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10748:	00009206 	br	10994 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1074c:	e0bffc17 	ldw	r2,-16(fp)
   10750:	10c0020b 	ldhu	r3,8(r2)
   10754:	e0bffd0b 	ldhu	r2,-12(fp)
   10758:	1884703a 	and	r2,r3,r2
   1075c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10760:	e0bfe78b 	ldhu	r2,-98(fp)
   10764:	10001926 	beq	r2,zero,107cc <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10768:	e0bfe503 	ldbu	r2,-108(fp)
   1076c:	10800058 	cmpnei	r2,r2,1
   10770:	1000091e 	bne	r2,zero,10798 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10774:	e0bffc17 	ldw	r2,-16(fp)
   10778:	1080020b 	ldhu	r2,8(r2)
   1077c:	1007883a 	mov	r3,r2
   10780:	e0bfe78b 	ldhu	r2,-98(fp)
   10784:	0084303a 	nor	r2,zero,r2
   10788:	1884703a 	and	r2,r3,r2
   1078c:	1007883a 	mov	r3,r2
   10790:	e0bffc17 	ldw	r2,-16(fp)
   10794:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10798:	008000b4 	movhi	r2,2
   1079c:	10b9c904 	addi	r2,r2,-6364
   107a0:	10800017 	ldw	r2,0(r2)
   107a4:	e0ffe78b 	ldhu	r3,-98(fp)
   107a8:	10c00b0d 	sth	r3,44(r2)
   107ac:	e0bfe617 	ldw	r2,-104(fp)
   107b0:	e0bfec15 	stw	r2,-80(fp)
   107b4:	e0bfec17 	ldw	r2,-80(fp)
   107b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   107bc:	e0800217 	ldw	r2,8(fp)
   107c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   107c4:	e0bfe78b 	ldhu	r2,-98(fp)
   107c8:	0000d306 	br	10b18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   107cc:	e1bffd0b 	ldhu	r6,-12(fp)
   107d0:	e0fffe03 	ldbu	r3,-8(fp)
   107d4:	e0bfff0b 	ldhu	r2,-4(fp)
   107d8:	e17ff704 	addi	r5,fp,-36
   107dc:	d8800015 	stw	r2,0(sp)
   107e0:	e13ffc17 	ldw	r4,-16(fp)
   107e4:	180f883a 	mov	r7,r3
   107e8:	0010fe00 	call	10fe0 <OS_FlagBlock>
   107ec:	e0bfe617 	ldw	r2,-104(fp)
   107f0:	e0bfed15 	stw	r2,-76(fp)
   107f4:	e0bfed17 	ldw	r2,-76(fp)
   107f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   107fc:	00006506 	br	10994 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10800:	e0bffc17 	ldw	r2,-16(fp)
   10804:	1080020b 	ldhu	r2,8(r2)
   10808:	0084303a 	nor	r2,zero,r2
   1080c:	1007883a 	mov	r3,r2
   10810:	e0bffd0b 	ldhu	r2,-12(fp)
   10814:	1884703a 	and	r2,r3,r2
   10818:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1081c:	e0ffe78b 	ldhu	r3,-98(fp)
   10820:	e0bffd0b 	ldhu	r2,-12(fp)
   10824:	1880171e 	bne	r3,r2,10884 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10828:	e0bfe503 	ldbu	r2,-108(fp)
   1082c:	10800058 	cmpnei	r2,r2,1
   10830:	1000071e 	bne	r2,zero,10850 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10834:	e0bffc17 	ldw	r2,-16(fp)
   10838:	10c0020b 	ldhu	r3,8(r2)
   1083c:	e0bfe78b 	ldhu	r2,-98(fp)
   10840:	1884b03a 	or	r2,r3,r2
   10844:	1007883a 	mov	r3,r2
   10848:	e0bffc17 	ldw	r2,-16(fp)
   1084c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10850:	008000b4 	movhi	r2,2
   10854:	10b9c904 	addi	r2,r2,-6364
   10858:	10800017 	ldw	r2,0(r2)
   1085c:	e0ffe78b 	ldhu	r3,-98(fp)
   10860:	10c00b0d 	sth	r3,44(r2)
   10864:	e0bfe617 	ldw	r2,-104(fp)
   10868:	e0bfee15 	stw	r2,-72(fp)
   1086c:	e0bfee17 	ldw	r2,-72(fp)
   10870:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10874:	e0800217 	ldw	r2,8(fp)
   10878:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1087c:	e0bfe78b 	ldhu	r2,-98(fp)
   10880:	0000a506 	br	10b18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10884:	e1bffd0b 	ldhu	r6,-12(fp)
   10888:	e0fffe03 	ldbu	r3,-8(fp)
   1088c:	e0bfff0b 	ldhu	r2,-4(fp)
   10890:	e17ff704 	addi	r5,fp,-36
   10894:	d8800015 	stw	r2,0(sp)
   10898:	e13ffc17 	ldw	r4,-16(fp)
   1089c:	180f883a 	mov	r7,r3
   108a0:	0010fe00 	call	10fe0 <OS_FlagBlock>
   108a4:	e0bfe617 	ldw	r2,-104(fp)
   108a8:	e0bfef15 	stw	r2,-68(fp)
   108ac:	e0bfef17 	ldw	r2,-68(fp)
   108b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   108b4:	00003706 	br	10994 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   108b8:	e0bffc17 	ldw	r2,-16(fp)
   108bc:	1080020b 	ldhu	r2,8(r2)
   108c0:	0084303a 	nor	r2,zero,r2
   108c4:	1007883a 	mov	r3,r2
   108c8:	e0bffd0b 	ldhu	r2,-12(fp)
   108cc:	1884703a 	and	r2,r3,r2
   108d0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   108d4:	e0bfe78b 	ldhu	r2,-98(fp)
   108d8:	10001726 	beq	r2,zero,10938 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   108dc:	e0bfe503 	ldbu	r2,-108(fp)
   108e0:	10800058 	cmpnei	r2,r2,1
   108e4:	1000071e 	bne	r2,zero,10904 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	10c0020b 	ldhu	r3,8(r2)
   108f0:	e0bfe78b 	ldhu	r2,-98(fp)
   108f4:	1884b03a 	or	r2,r3,r2
   108f8:	1007883a 	mov	r3,r2
   108fc:	e0bffc17 	ldw	r2,-16(fp)
   10900:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10904:	008000b4 	movhi	r2,2
   10908:	10b9c904 	addi	r2,r2,-6364
   1090c:	10800017 	ldw	r2,0(r2)
   10910:	e0ffe78b 	ldhu	r3,-98(fp)
   10914:	10c00b0d 	sth	r3,44(r2)
   10918:	e0bfe617 	ldw	r2,-104(fp)
   1091c:	e0bff015 	stw	r2,-64(fp)
   10920:	e0bff017 	ldw	r2,-64(fp)
   10924:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10928:	e0800217 	ldw	r2,8(fp)
   1092c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10930:	e0bfe78b 	ldhu	r2,-98(fp)
   10934:	00007806 	br	10b18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10938:	e1bffd0b 	ldhu	r6,-12(fp)
   1093c:	e0fffe03 	ldbu	r3,-8(fp)
   10940:	e0bfff0b 	ldhu	r2,-4(fp)
   10944:	e17ff704 	addi	r5,fp,-36
   10948:	d8800015 	stw	r2,0(sp)
   1094c:	e13ffc17 	ldw	r4,-16(fp)
   10950:	180f883a 	mov	r7,r3
   10954:	0010fe00 	call	10fe0 <OS_FlagBlock>
   10958:	e0bfe617 	ldw	r2,-104(fp)
   1095c:	e0bff115 	stw	r2,-60(fp)
   10960:	e0bff117 	ldw	r2,-60(fp)
   10964:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10968:	00000a06 	br	10994 <OSFlagPend+0x458>
   1096c:	e0bfe617 	ldw	r2,-104(fp)
   10970:	e0bff215 	stw	r2,-56(fp)
   10974:	e0bff217 	ldw	r2,-56(fp)
   10978:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1097c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10980:	e0800217 	ldw	r2,8(fp)
   10984:	00c01bc4 	movi	r3,111
   10988:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1098c:	e0bfe78b 	ldhu	r2,-98(fp)
   10990:	00006106 	br	10b18 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10994:	000f3b80 	call	f3b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10998:	0005303a 	rdctl	r2,status
   1099c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109a0:	e0fff317 	ldw	r3,-52(fp)
   109a4:	00bfff84 	movi	r2,-2
   109a8:	1884703a 	and	r2,r3,r2
   109ac:	1001703a 	wrctl	status,r2
  
  return context;
   109b0:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   109b4:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   109b8:	008000b4 	movhi	r2,2
   109bc:	10b9c904 	addi	r2,r2,-6364
   109c0:	10800017 	ldw	r2,0(r2)
   109c4:	10800c43 	ldbu	r2,49(r2)
   109c8:	10803fcc 	andi	r2,r2,255
   109cc:	10002226 	beq	r2,zero,10a58 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   109d0:	008000b4 	movhi	r2,2
   109d4:	10b9c904 	addi	r2,r2,-6364
   109d8:	10800017 	ldw	r2,0(r2)
   109dc:	10800c43 	ldbu	r2,49(r2)
   109e0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   109e4:	008000b4 	movhi	r2,2
   109e8:	10b9c904 	addi	r2,r2,-6364
   109ec:	10800017 	ldw	r2,0(r2)
   109f0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   109f4:	e0bff704 	addi	r2,fp,-36
   109f8:	1009883a 	mov	r4,r2
   109fc:	00113980 	call	11398 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10a00:	008000b4 	movhi	r2,2
   10a04:	10b9c904 	addi	r2,r2,-6364
   10a08:	10800017 	ldw	r2,0(r2)
   10a0c:	10000c05 	stb	zero,48(r2)
   10a10:	e0bfe617 	ldw	r2,-104(fp)
   10a14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a18:	e0bff417 	ldw	r2,-48(fp)
   10a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10a20:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   10a24:	e0bfe803 	ldbu	r2,-96(fp)
   10a28:	108000a0 	cmpeqi	r2,r2,2
   10a2c:	10000426 	beq	r2,zero,10a40 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10a30:	e0800217 	ldw	r2,8(fp)
   10a34:	00c00384 	movi	r3,14
   10a38:	10c00005 	stb	r3,0(r2)
                 break;
   10a3c:	00000406 	br	10a50 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10a40:	e0800217 	ldw	r2,8(fp)
   10a44:	00c00284 	movi	r3,10
   10a48:	10c00005 	stb	r3,0(r2)
                 break;
   10a4c:	0001883a 	nop
        }
        return (flags_rdy);
   10a50:	e0bfe78b 	ldhu	r2,-98(fp)
   10a54:	00003006 	br	10b18 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10a58:	008000b4 	movhi	r2,2
   10a5c:	10b9c904 	addi	r2,r2,-6364
   10a60:	10800017 	ldw	r2,0(r2)
   10a64:	10800b0b 	ldhu	r2,44(r2)
   10a68:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10a6c:	e0bfe503 	ldbu	r2,-108(fp)
   10a70:	10800058 	cmpnei	r2,r2,1
   10a74:	1000211e 	bne	r2,zero,10afc <OSFlagPend+0x5c0>
        switch (wait_type) {
   10a78:	e0bffe03 	ldbu	r2,-8(fp)
   10a7c:	10001616 	blt	r2,zero,10ad8 <OSFlagPend+0x59c>
   10a80:	10c00090 	cmplti	r3,r2,2
   10a84:	18000c1e 	bne	r3,zero,10ab8 <OSFlagPend+0x57c>
   10a88:	10800108 	cmpgei	r2,r2,4
   10a8c:	1000121e 	bne	r2,zero,10ad8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10a90:	e0bffc17 	ldw	r2,-16(fp)
   10a94:	1080020b 	ldhu	r2,8(r2)
   10a98:	1007883a 	mov	r3,r2
   10a9c:	e0bfe78b 	ldhu	r2,-98(fp)
   10aa0:	0084303a 	nor	r2,zero,r2
   10aa4:	1884703a 	and	r2,r3,r2
   10aa8:	1007883a 	mov	r3,r2
   10aac:	e0bffc17 	ldw	r2,-16(fp)
   10ab0:	10c0020d 	sth	r3,8(r2)
                 break;
   10ab4:	00001106 	br	10afc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10ab8:	e0bffc17 	ldw	r2,-16(fp)
   10abc:	10c0020b 	ldhu	r3,8(r2)
   10ac0:	e0bfe78b 	ldhu	r2,-98(fp)
   10ac4:	1884b03a 	or	r2,r3,r2
   10ac8:	1007883a 	mov	r3,r2
   10acc:	e0bffc17 	ldw	r2,-16(fp)
   10ad0:	10c0020d 	sth	r3,8(r2)
                 break;
   10ad4:	00000906 	br	10afc <OSFlagPend+0x5c0>
   10ad8:	e0bfe617 	ldw	r2,-104(fp)
   10adc:	e0bff515 	stw	r2,-44(fp)
   10ae0:	e0bff517 	ldw	r2,-44(fp)
   10ae4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10ae8:	e0800217 	ldw	r2,8(fp)
   10aec:	00c01bc4 	movi	r3,111
   10af0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10af4:	0005883a 	mov	r2,zero
   10af8:	00000706 	br	10b18 <OSFlagPend+0x5dc>
   10afc:	e0bfe617 	ldw	r2,-104(fp)
   10b00:	e0bff615 	stw	r2,-40(fp)
   10b04:	e0bff617 	ldw	r2,-40(fp)
   10b08:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10b0c:	e0800217 	ldw	r2,8(fp)
   10b10:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10b14:	e0bfe78b 	ldhu	r2,-98(fp)
}
   10b18:	e037883a 	mov	sp,fp
   10b1c:	dfc00117 	ldw	ra,4(sp)
   10b20:	df000017 	ldw	fp,0(sp)
   10b24:	dec00204 	addi	sp,sp,8
   10b28:	f800283a 	ret

00010b2c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10b2c:	defffb04 	addi	sp,sp,-20
   10b30:	df000415 	stw	fp,16(sp)
   10b34:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10b38:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b3c:	0005303a 	rdctl	r2,status
   10b40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b44:	e0fffe17 	ldw	r3,-8(fp)
   10b48:	00bfff84 	movi	r2,-2
   10b4c:	1884703a 	and	r2,r3,r2
   10b50:	1001703a 	wrctl	status,r2
  
  return context;
   10b54:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10b58:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10b5c:	008000b4 	movhi	r2,2
   10b60:	10b9c904 	addi	r2,r2,-6364
   10b64:	10800017 	ldw	r2,0(r2)
   10b68:	10800b0b 	ldhu	r2,44(r2)
   10b6c:	e0bffd0d 	sth	r2,-12(fp)
   10b70:	e0bffc17 	ldw	r2,-16(fp)
   10b74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10b80:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10b84:	e037883a 	mov	sp,fp
   10b88:	df000017 	ldw	fp,0(sp)
   10b8c:	dec00104 	addi	sp,sp,4
   10b90:	f800283a 	ret

00010b94 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10b94:	deffef04 	addi	sp,sp,-68
   10b98:	dfc01015 	stw	ra,64(sp)
   10b9c:	df000f15 	stw	fp,60(sp)
   10ba0:	df000f04 	addi	fp,sp,60
   10ba4:	e13ffc15 	stw	r4,-16(fp)
   10ba8:	2807883a 	mov	r3,r5
   10bac:	3005883a 	mov	r2,r6
   10bb0:	e1ffff15 	stw	r7,-4(fp)
   10bb4:	e0fffd0d 	sth	r3,-12(fp)
   10bb8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10bbc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10bc0:	e0bfff17 	ldw	r2,-4(fp)
   10bc4:	1000021e 	bne	r2,zero,10bd0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10bc8:	0005883a 	mov	r2,zero
   10bcc:	0000ce06 	br	10f08 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10bd0:	e0bffc17 	ldw	r2,-16(fp)
   10bd4:	1000051e 	bne	r2,zero,10bec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10bd8:	e0bfff17 	ldw	r2,-4(fp)
   10bdc:	00c01b84 	movi	r3,110
   10be0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10be4:	0005883a 	mov	r2,zero
   10be8:	0000c706 	br	10f08 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10bec:	e0bffc17 	ldw	r2,-16(fp)
   10bf0:	10800003 	ldbu	r2,0(r2)
   10bf4:	10803fcc 	andi	r2,r2,255
   10bf8:	10800160 	cmpeqi	r2,r2,5
   10bfc:	1000051e 	bne	r2,zero,10c14 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10c00:	e0bfff17 	ldw	r2,-4(fp)
   10c04:	00c00044 	movi	r3,1
   10c08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10c0c:	0005883a 	mov	r2,zero
   10c10:	0000bd06 	br	10f08 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c14:	0005303a 	rdctl	r2,status
   10c18:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c1c:	e0fff617 	ldw	r3,-40(fp)
   10c20:	00bfff84 	movi	r2,-2
   10c24:	1884703a 	and	r2,r3,r2
   10c28:	1001703a 	wrctl	status,r2
  
  return context;
   10c2c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10c30:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10c34:	e0bffe03 	ldbu	r2,-8(fp)
   10c38:	10000326 	beq	r2,zero,10c48 <OSFlagPost+0xb4>
   10c3c:	10800060 	cmpeqi	r2,r2,1
   10c40:	10000b1e 	bne	r2,zero,10c70 <OSFlagPost+0xdc>
   10c44:	00001206 	br	10c90 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10c48:	e0bffc17 	ldw	r2,-16(fp)
   10c4c:	1080020b 	ldhu	r2,8(r2)
   10c50:	1007883a 	mov	r3,r2
   10c54:	e0bffd0b 	ldhu	r2,-12(fp)
   10c58:	0084303a 	nor	r2,zero,r2
   10c5c:	1884703a 	and	r2,r3,r2
   10c60:	1007883a 	mov	r3,r2
   10c64:	e0bffc17 	ldw	r2,-16(fp)
   10c68:	10c0020d 	sth	r3,8(r2)
             break;
   10c6c:	00001106 	br	10cb4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	10c0020b 	ldhu	r3,8(r2)
   10c78:	e0bffd0b 	ldhu	r2,-12(fp)
   10c7c:	1884b03a 	or	r2,r3,r2
   10c80:	1007883a 	mov	r3,r2
   10c84:	e0bffc17 	ldw	r2,-16(fp)
   10c88:	10c0020d 	sth	r3,8(r2)
             break;
   10c8c:	00000906 	br	10cb4 <OSFlagPost+0x120>
   10c90:	e0bff317 	ldw	r2,-52(fp)
   10c94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c98:	e0bff717 	ldw	r2,-36(fp)
   10c9c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10ca0:	e0bfff17 	ldw	r2,-4(fp)
   10ca4:	00c01c44 	movi	r3,113
   10ca8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10cac:	0005883a 	mov	r2,zero
   10cb0:	00009506 	br	10f08 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10cb4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10cb8:	e0bffc17 	ldw	r2,-16(fp)
   10cbc:	10800117 	ldw	r2,4(r2)
   10cc0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10cc4:	00007406 	br	10e98 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   10cc8:	e0bff117 	ldw	r2,-60(fp)
   10ccc:	10800483 	ldbu	r2,18(r2)
   10cd0:	10803fcc 	andi	r2,r2,255
   10cd4:	10c00060 	cmpeqi	r3,r2,1
   10cd8:	18004d1e 	bne	r3,zero,10e10 <OSFlagPost+0x27c>
   10cdc:	10c00088 	cmpgei	r3,r2,2
   10ce0:	1800021e 	bne	r3,zero,10cec <OSFlagPost+0x158>
   10ce4:	10003126 	beq	r2,zero,10dac <OSFlagPost+0x218>
   10ce8:	00005f06 	br	10e68 <OSFlagPost+0x2d4>
   10cec:	10c000a0 	cmpeqi	r3,r2,2
   10cf0:	1800031e 	bne	r3,zero,10d00 <OSFlagPost+0x16c>
   10cf4:	108000e0 	cmpeqi	r2,r2,3
   10cf8:	1000181e 	bne	r2,zero,10d5c <OSFlagPost+0x1c8>
   10cfc:	00005a06 	br	10e68 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10d00:	e0bffc17 	ldw	r2,-16(fp)
   10d04:	10c0020b 	ldhu	r3,8(r2)
   10d08:	e0bff117 	ldw	r2,-60(fp)
   10d0c:	1080040b 	ldhu	r2,16(r2)
   10d10:	1884703a 	and	r2,r3,r2
   10d14:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10d18:	e0bff117 	ldw	r2,-60(fp)
   10d1c:	1080040b 	ldhu	r2,16(r2)
   10d20:	10ffffcc 	andi	r3,r2,65535
   10d24:	e0bff40b 	ldhu	r2,-48(fp)
   10d28:	18800b1e 	bne	r3,r2,10d58 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10d2c:	e0bff40b 	ldhu	r2,-48(fp)
   10d30:	e13ff117 	ldw	r4,-60(fp)
   10d34:	100b883a 	mov	r5,r2
   10d38:	00112880 	call	11288 <OS_FlagTaskRdy>
   10d3c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10d40:	e0bff483 	ldbu	r2,-46(fp)
   10d44:	10800058 	cmpnei	r2,r2,1
   10d48:	1000031e 	bne	r2,zero,10d58 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10d4c:	00800044 	movi	r2,1
   10d50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10d54:	00004d06 	br	10e8c <OSFlagPost+0x2f8>
   10d58:	00004c06 	br	10e8c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10d5c:	e0bffc17 	ldw	r2,-16(fp)
   10d60:	10c0020b 	ldhu	r3,8(r2)
   10d64:	e0bff117 	ldw	r2,-60(fp)
   10d68:	1080040b 	ldhu	r2,16(r2)
   10d6c:	1884703a 	and	r2,r3,r2
   10d70:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10d74:	e0bff40b 	ldhu	r2,-48(fp)
   10d78:	10000b26 	beq	r2,zero,10da8 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10d7c:	e0bff40b 	ldhu	r2,-48(fp)
   10d80:	e13ff117 	ldw	r4,-60(fp)
   10d84:	100b883a 	mov	r5,r2
   10d88:	00112880 	call	11288 <OS_FlagTaskRdy>
   10d8c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10d90:	e0bff483 	ldbu	r2,-46(fp)
   10d94:	10800058 	cmpnei	r2,r2,1
   10d98:	1000031e 	bne	r2,zero,10da8 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10d9c:	00800044 	movi	r2,1
   10da0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10da4:	00003906 	br	10e8c <OSFlagPost+0x2f8>
   10da8:	00003806 	br	10e8c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10dac:	e0bffc17 	ldw	r2,-16(fp)
   10db0:	1080020b 	ldhu	r2,8(r2)
   10db4:	0084303a 	nor	r2,zero,r2
   10db8:	1007883a 	mov	r3,r2
   10dbc:	e0bff117 	ldw	r2,-60(fp)
   10dc0:	1080040b 	ldhu	r2,16(r2)
   10dc4:	1884703a 	and	r2,r3,r2
   10dc8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10dcc:	e0bff117 	ldw	r2,-60(fp)
   10dd0:	1080040b 	ldhu	r2,16(r2)
   10dd4:	10ffffcc 	andi	r3,r2,65535
   10dd8:	e0bff40b 	ldhu	r2,-48(fp)
   10ddc:	18800b1e 	bne	r3,r2,10e0c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10de0:	e0bff40b 	ldhu	r2,-48(fp)
   10de4:	e13ff117 	ldw	r4,-60(fp)
   10de8:	100b883a 	mov	r5,r2
   10dec:	00112880 	call	11288 <OS_FlagTaskRdy>
   10df0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10df4:	e0bff483 	ldbu	r2,-46(fp)
   10df8:	10800058 	cmpnei	r2,r2,1
   10dfc:	1000031e 	bne	r2,zero,10e0c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10e00:	00800044 	movi	r2,1
   10e04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10e08:	00002006 	br	10e8c <OSFlagPost+0x2f8>
   10e0c:	00001f06 	br	10e8c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10e10:	e0bffc17 	ldw	r2,-16(fp)
   10e14:	1080020b 	ldhu	r2,8(r2)
   10e18:	0084303a 	nor	r2,zero,r2
   10e1c:	1007883a 	mov	r3,r2
   10e20:	e0bff117 	ldw	r2,-60(fp)
   10e24:	1080040b 	ldhu	r2,16(r2)
   10e28:	1884703a 	and	r2,r3,r2
   10e2c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10e30:	e0bff40b 	ldhu	r2,-48(fp)
   10e34:	10000b26 	beq	r2,zero,10e64 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10e38:	e0bff40b 	ldhu	r2,-48(fp)
   10e3c:	e13ff117 	ldw	r4,-60(fp)
   10e40:	100b883a 	mov	r5,r2
   10e44:	00112880 	call	11288 <OS_FlagTaskRdy>
   10e48:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10e4c:	e0bff483 	ldbu	r2,-46(fp)
   10e50:	10800058 	cmpnei	r2,r2,1
   10e54:	1000031e 	bne	r2,zero,10e64 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10e58:	00800044 	movi	r2,1
   10e5c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10e60:	00000a06 	br	10e8c <OSFlagPost+0x2f8>
   10e64:	00000906 	br	10e8c <OSFlagPost+0x2f8>
   10e68:	e0bff317 	ldw	r2,-52(fp)
   10e6c:	e0bff815 	stw	r2,-32(fp)
   10e70:	e0bff817 	ldw	r2,-32(fp)
   10e74:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10e78:	e0bfff17 	ldw	r2,-4(fp)
   10e7c:	00c01bc4 	movi	r3,111
   10e80:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10e84:	0005883a 	mov	r2,zero
   10e88:	00001f06 	br	10f08 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   10e8c:	e0bff117 	ldw	r2,-60(fp)
   10e90:	10800017 	ldw	r2,0(r2)
   10e94:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10e98:	e0bff117 	ldw	r2,-60(fp)
   10e9c:	103f8a1e 	bne	r2,zero,10cc8 <__alt_mem_Flash_flash_data+0xf4010cc8>
   10ea0:	e0bff317 	ldw	r2,-52(fp)
   10ea4:	e0bff915 	stw	r2,-28(fp)
   10ea8:	e0bff917 	ldw	r2,-28(fp)
   10eac:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   10eb0:	e0bff203 	ldbu	r2,-56(fp)
   10eb4:	10800058 	cmpnei	r2,r2,1
   10eb8:	1000011e 	bne	r2,zero,10ec0 <OSFlagPost+0x32c>
        OS_Sched();
   10ebc:	000f3b80 	call	f3b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ec0:	0005303a 	rdctl	r2,status
   10ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ec8:	e0fffa17 	ldw	r3,-24(fp)
   10ecc:	00bfff84 	movi	r2,-2
   10ed0:	1884703a 	and	r2,r3,r2
   10ed4:	1001703a 	wrctl	status,r2
  
  return context;
   10ed8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10edc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   10ee0:	e0bffc17 	ldw	r2,-16(fp)
   10ee4:	1080020b 	ldhu	r2,8(r2)
   10ee8:	e0bff50d 	sth	r2,-44(fp)
   10eec:	e0bff317 	ldw	r2,-52(fp)
   10ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ef4:	e0bffb17 	ldw	r2,-20(fp)
   10ef8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   10efc:	e0bfff17 	ldw	r2,-4(fp)
   10f00:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   10f04:	e0bff50b 	ldhu	r2,-44(fp)
}
   10f08:	e037883a 	mov	sp,fp
   10f0c:	dfc00117 	ldw	ra,4(sp)
   10f10:	df000017 	ldw	fp,0(sp)
   10f14:	dec00204 	addi	sp,sp,8
   10f18:	f800283a 	ret

00010f1c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   10f1c:	defff904 	addi	sp,sp,-28
   10f20:	df000615 	stw	fp,24(sp)
   10f24:	df000604 	addi	fp,sp,24
   10f28:	e13ffe15 	stw	r4,-8(fp)
   10f2c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   10f30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   10f34:	e0bfff17 	ldw	r2,-4(fp)
   10f38:	1000021e 	bne	r2,zero,10f44 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   10f3c:	0005883a 	mov	r2,zero
   10f40:	00002306 	br	10fd0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	1000051e 	bne	r2,zero,10f60 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	00c01b84 	movi	r3,110
   10f54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10f58:	0005883a 	mov	r2,zero
   10f5c:	00001c06 	br	10fd0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	10800003 	ldbu	r2,0(r2)
   10f68:	10803fcc 	andi	r2,r2,255
   10f6c:	10800160 	cmpeqi	r2,r2,5
   10f70:	1000051e 	bne	r2,zero,10f88 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   10f74:	e0bfff17 	ldw	r2,-4(fp)
   10f78:	00c00044 	movi	r3,1
   10f7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10f80:	0005883a 	mov	r2,zero
   10f84:	00001206 	br	10fd0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f88:	0005303a 	rdctl	r2,status
   10f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f90:	e0fffc17 	ldw	r3,-16(fp)
   10f94:	00bfff84 	movi	r2,-2
   10f98:	1884703a 	and	r2,r3,r2
   10f9c:	1001703a 	wrctl	status,r2
  
  return context;
   10fa0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10fa4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   10fa8:	e0bffe17 	ldw	r2,-8(fp)
   10fac:	1080020b 	ldhu	r2,8(r2)
   10fb0:	e0bffb0d 	sth	r2,-20(fp)
   10fb4:	e0bffa17 	ldw	r2,-24(fp)
   10fb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fbc:	e0bffd17 	ldw	r2,-12(fp)
   10fc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10fc4:	e0bfff17 	ldw	r2,-4(fp)
   10fc8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   10fcc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   10fd0:	e037883a 	mov	sp,fp
   10fd4:	df000017 	ldw	fp,0(sp)
   10fd8:	dec00104 	addi	sp,sp,4
   10fdc:	f800283a 	ret

00010fe0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   10fe0:	defff804 	addi	sp,sp,-32
   10fe4:	df000715 	stw	fp,28(sp)
   10fe8:	df000704 	addi	fp,sp,28
   10fec:	e13ffb15 	stw	r4,-20(fp)
   10ff0:	e17ffc15 	stw	r5,-16(fp)
   10ff4:	3009883a 	mov	r4,r6
   10ff8:	3807883a 	mov	r3,r7
   10ffc:	e0800117 	ldw	r2,4(fp)
   11000:	e13ffd0d 	sth	r4,-12(fp)
   11004:	e0fffe05 	stb	r3,-8(fp)
   11008:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1100c:	008000b4 	movhi	r2,2
   11010:	10b9c904 	addi	r2,r2,-6364
   11014:	10c00017 	ldw	r3,0(r2)
   11018:	008000b4 	movhi	r2,2
   1101c:	10b9c904 	addi	r2,r2,-6364
   11020:	10800017 	ldw	r2,0(r2)
   11024:	10800c03 	ldbu	r2,48(r2)
   11028:	10800814 	ori	r2,r2,32
   1102c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11030:	008000b4 	movhi	r2,2
   11034:	10b9c904 	addi	r2,r2,-6364
   11038:	10800017 	ldw	r2,0(r2)
   1103c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11040:	008000b4 	movhi	r2,2
   11044:	10b9c904 	addi	r2,r2,-6364
   11048:	10800017 	ldw	r2,0(r2)
   1104c:	e0ffff0b 	ldhu	r3,-4(fp)
   11050:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11054:	008000b4 	movhi	r2,2
   11058:	10b9c904 	addi	r2,r2,-6364
   1105c:	10800017 	ldw	r2,0(r2)
   11060:	e0fffc17 	ldw	r3,-16(fp)
   11064:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11068:	e0bffc17 	ldw	r2,-16(fp)
   1106c:	e0fffd0b 	ldhu	r3,-12(fp)
   11070:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11074:	e0bffc17 	ldw	r2,-16(fp)
   11078:	e0fffe03 	ldbu	r3,-8(fp)
   1107c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11080:	008000b4 	movhi	r2,2
   11084:	10b9c904 	addi	r2,r2,-6364
   11088:	10c00017 	ldw	r3,0(r2)
   1108c:	e0bffc17 	ldw	r2,-16(fp)
   11090:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11094:	e0bffb17 	ldw	r2,-20(fp)
   11098:	10c00117 	ldw	r3,4(r2)
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   110a4:	e0bffc17 	ldw	r2,-16(fp)
   110a8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   110ac:	e0bffc17 	ldw	r2,-16(fp)
   110b0:	e0fffb17 	ldw	r3,-20(fp)
   110b4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   110b8:	e0bffb17 	ldw	r2,-20(fp)
   110bc:	10800117 	ldw	r2,4(r2)
   110c0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   110c4:	e0bff917 	ldw	r2,-28(fp)
   110c8:	10000326 	beq	r2,zero,110d8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   110cc:	e0bff917 	ldw	r2,-28(fp)
   110d0:	e0fffc17 	ldw	r3,-16(fp)
   110d4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   110d8:	e0bffb17 	ldw	r2,-20(fp)
   110dc:	e0fffc17 	ldw	r3,-16(fp)
   110e0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   110e4:	008000b4 	movhi	r2,2
   110e8:	10b9c904 	addi	r2,r2,-6364
   110ec:	10800017 	ldw	r2,0(r2)
   110f0:	10800d03 	ldbu	r2,52(r2)
   110f4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   110f8:	e0fffa03 	ldbu	r3,-24(fp)
   110fc:	e13ffa03 	ldbu	r4,-24(fp)
   11100:	008000b4 	movhi	r2,2
   11104:	10b9c644 	addi	r2,r2,-6375
   11108:	1105883a 	add	r2,r2,r4
   1110c:	10800003 	ldbu	r2,0(r2)
   11110:	1009883a 	mov	r4,r2
   11114:	008000b4 	movhi	r2,2
   11118:	10b9c904 	addi	r2,r2,-6364
   1111c:	10800017 	ldw	r2,0(r2)
   11120:	10800d43 	ldbu	r2,53(r2)
   11124:	0084303a 	nor	r2,zero,r2
   11128:	2084703a 	and	r2,r4,r2
   1112c:	1009883a 	mov	r4,r2
   11130:	008000b4 	movhi	r2,2
   11134:	10b9c644 	addi	r2,r2,-6375
   11138:	10c5883a 	add	r2,r2,r3
   1113c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11140:	e0fffa03 	ldbu	r3,-24(fp)
   11144:	008000b4 	movhi	r2,2
   11148:	10b9c644 	addi	r2,r2,-6375
   1114c:	10c5883a 	add	r2,r2,r3
   11150:	10800003 	ldbu	r2,0(r2)
   11154:	10803fcc 	andi	r2,r2,255
   11158:	10000e1e 	bne	r2,zero,11194 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1115c:	008000b4 	movhi	r2,2
   11160:	10b9c904 	addi	r2,r2,-6364
   11164:	10800017 	ldw	r2,0(r2)
   11168:	10800d83 	ldbu	r2,54(r2)
   1116c:	0084303a 	nor	r2,zero,r2
   11170:	1007883a 	mov	r3,r2
   11174:	008000b4 	movhi	r2,2
   11178:	10b9c604 	addi	r2,r2,-6376
   1117c:	10800003 	ldbu	r2,0(r2)
   11180:	1884703a 	and	r2,r3,r2
   11184:	1007883a 	mov	r3,r2
   11188:	008000b4 	movhi	r2,2
   1118c:	10b9c604 	addi	r2,r2,-6376
   11190:	10c00005 	stb	r3,0(r2)
    }
}
   11194:	e037883a 	mov	sp,fp
   11198:	df000017 	ldw	fp,0(sp)
   1119c:	dec00104 	addi	sp,sp,4
   111a0:	f800283a 	ret

000111a4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   111a4:	defffb04 	addi	sp,sp,-20
   111a8:	dfc00415 	stw	ra,16(sp)
   111ac:	df000315 	stw	fp,12(sp)
   111b0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   111b4:	010000b4 	movhi	r4,2
   111b8:	2109e704 	addi	r4,r4,10140
   111bc:	0140dc04 	movi	r5,880
   111c0:	000f3040 	call	f304 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   111c4:	008000b4 	movhi	r2,2
   111c8:	1089e704 	addi	r2,r2,10140
   111cc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   111d0:	008000b4 	movhi	r2,2
   111d4:	1089f204 	addi	r2,r2,10184
   111d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   111dc:	e03ffd0d 	sth	zero,-12(fp)
   111e0:	00001306 	br	11230 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   111e4:	e0bffe17 	ldw	r2,-8(fp)
   111e8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   111ec:	e0bffe17 	ldw	r2,-8(fp)
   111f0:	e0ffff17 	ldw	r3,-4(fp)
   111f4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   111f8:	e0bffe17 	ldw	r2,-8(fp)
   111fc:	00c00fc4 	movi	r3,63
   11200:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11204:	e0bffe17 	ldw	r2,-8(fp)
   11208:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1120c:	e0bffe17 	ldw	r2,-8(fp)
   11210:	10800b04 	addi	r2,r2,44
   11214:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11218:	e0bfff17 	ldw	r2,-4(fp)
   1121c:	10800b04 	addi	r2,r2,44
   11220:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11224:	e0bffd0b 	ldhu	r2,-12(fp)
   11228:	10800044 	addi	r2,r2,1
   1122c:	e0bffd0d 	sth	r2,-12(fp)
   11230:	e0bffd0b 	ldhu	r2,-12(fp)
   11234:	108004f0 	cmpltui	r2,r2,19
   11238:	103fea1e 	bne	r2,zero,111e4 <__alt_mem_Flash_flash_data+0xf40111e4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1123c:	e0bffe17 	ldw	r2,-8(fp)
   11240:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1124c:	e0bffe17 	ldw	r2,-8(fp)
   11250:	00c00fc4 	movi	r3,63
   11254:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11258:	e0bffe17 	ldw	r2,-8(fp)
   1125c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11260:	008000b4 	movhi	r2,2
   11264:	10b9cb04 	addi	r2,r2,-6356
   11268:	00c000b4 	movhi	r3,2
   1126c:	18c9e704 	addi	r3,r3,10140
   11270:	10c00015 	stw	r3,0(r2)
#endif
}
   11274:	e037883a 	mov	sp,fp
   11278:	dfc00117 	ldw	ra,4(sp)
   1127c:	df000017 	ldw	fp,0(sp)
   11280:	dec00204 	addi	sp,sp,8
   11284:	f800283a 	ret

00011288 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11288:	defffa04 	addi	sp,sp,-24
   1128c:	dfc00515 	stw	ra,20(sp)
   11290:	df000415 	stw	fp,16(sp)
   11294:	df000404 	addi	fp,sp,16
   11298:	e13ffe15 	stw	r4,-8(fp)
   1129c:	2805883a 	mov	r2,r5
   112a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   112a4:	e0bffe17 	ldw	r2,-8(fp)
   112a8:	10800217 	ldw	r2,8(r2)
   112ac:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   112b0:	e0bffd17 	ldw	r2,-12(fp)
   112b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   112b8:	e0bffd17 	ldw	r2,-12(fp)
   112bc:	e0ffff0b 	ldhu	r3,-4(fp)
   112c0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   112c4:	e0bffd17 	ldw	r2,-12(fp)
   112c8:	10c00c03 	ldbu	r3,48(r2)
   112cc:	00bff7c4 	movi	r2,-33
   112d0:	1884703a 	and	r2,r3,r2
   112d4:	1007883a 	mov	r3,r2
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   112e0:	e0bffd17 	ldw	r2,-12(fp)
   112e4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   112e8:	e0bffd17 	ldw	r2,-12(fp)
   112ec:	10800c03 	ldbu	r2,48(r2)
   112f0:	10803fcc 	andi	r2,r2,255
   112f4:	10001f1e 	bne	r2,zero,11374 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   112f8:	e0bffd17 	ldw	r2,-12(fp)
   112fc:	10c00d83 	ldbu	r3,54(r2)
   11300:	008000b4 	movhi	r2,2
   11304:	10b9c604 	addi	r2,r2,-6376
   11308:	10800003 	ldbu	r2,0(r2)
   1130c:	1884b03a 	or	r2,r3,r2
   11310:	1007883a 	mov	r3,r2
   11314:	008000b4 	movhi	r2,2
   11318:	10b9c604 	addi	r2,r2,-6376
   1131c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11320:	e0bffd17 	ldw	r2,-12(fp)
   11324:	10800d03 	ldbu	r2,52(r2)
   11328:	10c03fcc 	andi	r3,r2,255
   1132c:	e0bffd17 	ldw	r2,-12(fp)
   11330:	10800d03 	ldbu	r2,52(r2)
   11334:	11003fcc 	andi	r4,r2,255
   11338:	008000b4 	movhi	r2,2
   1133c:	10b9c644 	addi	r2,r2,-6375
   11340:	1105883a 	add	r2,r2,r4
   11344:	11000003 	ldbu	r4,0(r2)
   11348:	e0bffd17 	ldw	r2,-12(fp)
   1134c:	10800d43 	ldbu	r2,53(r2)
   11350:	2084b03a 	or	r2,r4,r2
   11354:	1009883a 	mov	r4,r2
   11358:	008000b4 	movhi	r2,2
   1135c:	10b9c644 	addi	r2,r2,-6375
   11360:	10c5883a 	add	r2,r2,r3
   11364:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11368:	00800044 	movi	r2,1
   1136c:	e0bffc05 	stb	r2,-16(fp)
   11370:	00000106 	br	11378 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   11374:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11378:	e13ffe17 	ldw	r4,-8(fp)
   1137c:	00113980 	call	11398 <OS_FlagUnlink>
    return (sched);
   11380:	e0bffc03 	ldbu	r2,-16(fp)
}
   11384:	e037883a 	mov	sp,fp
   11388:	dfc00117 	ldw	ra,4(sp)
   1138c:	df000017 	ldw	fp,0(sp)
   11390:	dec00204 	addi	sp,sp,8
   11394:	f800283a 	ret

00011398 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11398:	defffa04 	addi	sp,sp,-24
   1139c:	df000515 	stw	fp,20(sp)
   113a0:	df000504 	addi	fp,sp,20
   113a4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   113a8:	e0bfff17 	ldw	r2,-4(fp)
   113ac:	10800117 	ldw	r2,4(r2)
   113b0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   113b4:	e0bfff17 	ldw	r2,-4(fp)
   113b8:	10800017 	ldw	r2,0(r2)
   113bc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   113c0:	e0bffb17 	ldw	r2,-20(fp)
   113c4:	10000b1e 	bne	r2,zero,113f4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   113c8:	e0bfff17 	ldw	r2,-4(fp)
   113cc:	10800317 	ldw	r2,12(r2)
   113d0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   113d4:	e0bffd17 	ldw	r2,-12(fp)
   113d8:	e0fffc17 	ldw	r3,-16(fp)
   113dc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	10000b26 	beq	r2,zero,11414 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   113e8:	e0bffc17 	ldw	r2,-16(fp)
   113ec:	10000115 	stw	zero,4(r2)
   113f0:	00000806 	br	11414 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   113f4:	e0bffb17 	ldw	r2,-20(fp)
   113f8:	e0fffc17 	ldw	r3,-16(fp)
   113fc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11400:	e0bffc17 	ldw	r2,-16(fp)
   11404:	10000326 	beq	r2,zero,11414 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11408:	e0bffc17 	ldw	r2,-16(fp)
   1140c:	e0fffb17 	ldw	r3,-20(fp)
   11410:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11414:	e0bfff17 	ldw	r2,-4(fp)
   11418:	10800217 	ldw	r2,8(r2)
   1141c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11420:	e0bffe17 	ldw	r2,-8(fp)
   11424:	10000a15 	stw	zero,40(r2)
#endif
}
   11428:	e037883a 	mov	sp,fp
   1142c:	df000017 	ldw	fp,0(sp)
   11430:	dec00104 	addi	sp,sp,4
   11434:	f800283a 	ret

00011438 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11438:	defff404 	addi	sp,sp,-48
   1143c:	df000b15 	stw	fp,44(sp)
   11440:	df000b04 	addi	fp,sp,44
   11444:	e13ffc15 	stw	r4,-16(fp)
   11448:	e17ffd15 	stw	r5,-12(fp)
   1144c:	e1bffe15 	stw	r6,-8(fp)
   11450:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11454:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11458:	e0bfff17 	ldw	r2,-4(fp)
   1145c:	1000021e 	bne	r2,zero,11468 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11460:	0005883a 	mov	r2,zero
   11464:	00006d06 	br	1161c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11468:	e0bffc17 	ldw	r2,-16(fp)
   1146c:	1000051e 	bne	r2,zero,11484 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	00c01884 	movi	r3,98
   11478:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1147c:	0005883a 	mov	r2,zero
   11480:	00006606 	br	1161c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11484:	e0bffc17 	ldw	r2,-16(fp)
   11488:	108000cc 	andi	r2,r2,3
   1148c:	10000526 	beq	r2,zero,114a4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11490:	e0bfff17 	ldw	r2,-4(fp)
   11494:	00c01884 	movi	r3,98
   11498:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1149c:	0005883a 	mov	r2,zero
   114a0:	00005e06 	br	1161c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   114a4:	e0bffd17 	ldw	r2,-12(fp)
   114a8:	108000a8 	cmpgeui	r2,r2,2
   114ac:	1000051e 	bne	r2,zero,114c4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   114b0:	e0bfff17 	ldw	r2,-4(fp)
   114b4:	00c016c4 	movi	r3,91
   114b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   114bc:	0005883a 	mov	r2,zero
   114c0:	00005606 	br	1161c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   114c4:	e0bffe17 	ldw	r2,-8(fp)
   114c8:	10800128 	cmpgeui	r2,r2,4
   114cc:	1000051e 	bne	r2,zero,114e4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   114d0:	e0bfff17 	ldw	r2,-4(fp)
   114d4:	00c01704 	movi	r3,92
   114d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   114dc:	0005883a 	mov	r2,zero
   114e0:	00004e06 	br	1161c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114e4:	0005303a 	rdctl	r2,status
   114e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114ec:	e0fffa17 	ldw	r3,-24(fp)
   114f0:	00bfff84 	movi	r2,-2
   114f4:	1884703a 	and	r2,r3,r2
   114f8:	1001703a 	wrctl	status,r2
  
  return context;
   114fc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11500:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11504:	008000b4 	movhi	r2,2
   11508:	10b9c304 	addi	r2,r2,-6388
   1150c:	10800017 	ldw	r2,0(r2)
   11510:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11514:	008000b4 	movhi	r2,2
   11518:	10b9c304 	addi	r2,r2,-6388
   1151c:	10800017 	ldw	r2,0(r2)
   11520:	10000726 	beq	r2,zero,11540 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11524:	008000b4 	movhi	r2,2
   11528:	10b9c304 	addi	r2,r2,-6388
   1152c:	10800017 	ldw	r2,0(r2)
   11530:	10c00117 	ldw	r3,4(r2)
   11534:	008000b4 	movhi	r2,2
   11538:	10b9c304 	addi	r2,r2,-6388
   1153c:	10c00015 	stw	r3,0(r2)
   11540:	e0bff817 	ldw	r2,-32(fp)
   11544:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11548:	e0bffb17 	ldw	r2,-20(fp)
   1154c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11550:	e0bff917 	ldw	r2,-28(fp)
   11554:	1000051e 	bne	r2,zero,1156c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   11558:	e0bfff17 	ldw	r2,-4(fp)
   1155c:	00c01684 	movi	r3,90
   11560:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11564:	0005883a 	mov	r2,zero
   11568:	00002c06 	br	1161c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1156c:	e0bffc17 	ldw	r2,-16(fp)
   11570:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11574:	e0fffc17 	ldw	r3,-16(fp)
   11578:	e0bffe17 	ldw	r2,-8(fp)
   1157c:	1885883a 	add	r2,r3,r2
   11580:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11584:	e03ff715 	stw	zero,-36(fp)
   11588:	00000c06 	br	115bc <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1158c:	e0bff617 	ldw	r2,-40(fp)
   11590:	e0fff517 	ldw	r3,-44(fp)
   11594:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11598:	e0bff517 	ldw	r2,-44(fp)
   1159c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   115a0:	e0fff517 	ldw	r3,-44(fp)
   115a4:	e0bffe17 	ldw	r2,-8(fp)
   115a8:	1885883a 	add	r2,r3,r2
   115ac:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   115b0:	e0bff717 	ldw	r2,-36(fp)
   115b4:	10800044 	addi	r2,r2,1
   115b8:	e0bff715 	stw	r2,-36(fp)
   115bc:	e0bffd17 	ldw	r2,-12(fp)
   115c0:	10bfffc4 	addi	r2,r2,-1
   115c4:	e0fff717 	ldw	r3,-36(fp)
   115c8:	18bff036 	bltu	r3,r2,1158c <__alt_mem_Flash_flash_data+0xf401158c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   115cc:	e0bff617 	ldw	r2,-40(fp)
   115d0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   115d4:	e0bff917 	ldw	r2,-28(fp)
   115d8:	e0fffc17 	ldw	r3,-16(fp)
   115dc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   115e0:	e0bff917 	ldw	r2,-28(fp)
   115e4:	e0fffc17 	ldw	r3,-16(fp)
   115e8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   115ec:	e0bff917 	ldw	r2,-28(fp)
   115f0:	e0fffd17 	ldw	r3,-12(fp)
   115f4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   115f8:	e0bff917 	ldw	r2,-28(fp)
   115fc:	e0fffd17 	ldw	r3,-12(fp)
   11600:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11604:	e0bff917 	ldw	r2,-28(fp)
   11608:	e0fffe17 	ldw	r3,-8(fp)
   1160c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11610:	e0bfff17 	ldw	r2,-4(fp)
   11614:	10000005 	stb	zero,0(r2)
    return (pmem);
   11618:	e0bff917 	ldw	r2,-28(fp)
}
   1161c:	e037883a 	mov	sp,fp
   11620:	df000017 	ldw	fp,0(sp)
   11624:	dec00104 	addi	sp,sp,4
   11628:	f800283a 	ret

0001162c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1162c:	defff804 	addi	sp,sp,-32
   11630:	df000715 	stw	fp,28(sp)
   11634:	df000704 	addi	fp,sp,28
   11638:	e13ffe15 	stw	r4,-8(fp)
   1163c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11640:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11644:	e0bfff17 	ldw	r2,-4(fp)
   11648:	1000021e 	bne	r2,zero,11654 <OSMemGet+0x28>
        return ((void *)0);
   1164c:	0005883a 	mov	r2,zero
   11650:	00002e06 	br	1170c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11654:	e0bffe17 	ldw	r2,-8(fp)
   11658:	1000051e 	bne	r2,zero,11670 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1165c:	e0bfff17 	ldw	r2,-4(fp)
   11660:	00c01804 	movi	r3,96
   11664:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11668:	0005883a 	mov	r2,zero
   1166c:	00002706 	br	1170c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11670:	0005303a 	rdctl	r2,status
   11674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11678:	e0fffb17 	ldw	r3,-20(fp)
   1167c:	00bfff84 	movi	r2,-2
   11680:	1884703a 	and	r2,r3,r2
   11684:	1001703a 	wrctl	status,r2
  
  return context;
   11688:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1168c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11690:	e0bffe17 	ldw	r2,-8(fp)
   11694:	10800417 	ldw	r2,16(r2)
   11698:	10001426 	beq	r2,zero,116ec <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1169c:	e0bffe17 	ldw	r2,-8(fp)
   116a0:	10800117 	ldw	r2,4(r2)
   116a4:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   116a8:	e0bffa17 	ldw	r2,-24(fp)
   116ac:	10c00017 	ldw	r3,0(r2)
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   116b8:	e0bffe17 	ldw	r2,-8(fp)
   116bc:	10800417 	ldw	r2,16(r2)
   116c0:	10ffffc4 	addi	r3,r2,-1
   116c4:	e0bffe17 	ldw	r2,-8(fp)
   116c8:	10c00415 	stw	r3,16(r2)
   116cc:	e0bff917 	ldw	r2,-28(fp)
   116d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   116dc:	e0bfff17 	ldw	r2,-4(fp)
   116e0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   116e4:	e0bffa17 	ldw	r2,-24(fp)
   116e8:	00000806 	br	1170c <OSMemGet+0xe0>
   116ec:	e0bff917 	ldw	r2,-28(fp)
   116f0:	e0bffd15 	stw	r2,-12(fp)
   116f4:	e0bffd17 	ldw	r2,-12(fp)
   116f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   116fc:	e0bfff17 	ldw	r2,-4(fp)
   11700:	00c01744 	movi	r3,93
   11704:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11708:	0005883a 	mov	r2,zero
}
   1170c:	e037883a 	mov	sp,fp
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00104 	addi	sp,sp,4
   11718:	f800283a 	ret

0001171c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1171c:	defff704 	addi	sp,sp,-36
   11720:	dfc00815 	stw	ra,32(sp)
   11724:	df000715 	stw	fp,28(sp)
   11728:	df000704 	addi	fp,sp,28
   1172c:	e13ffd15 	stw	r4,-12(fp)
   11730:	e17ffe15 	stw	r5,-8(fp)
   11734:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11738:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1173c:	e0bfff17 	ldw	r2,-4(fp)
   11740:	1000021e 	bne	r2,zero,1174c <OSMemNameGet+0x30>
        return (0);
   11744:	0005883a 	mov	r2,zero
   11748:	00002d06 	br	11800 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1174c:	e0bffd17 	ldw	r2,-12(fp)
   11750:	1000051e 	bne	r2,zero,11768 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11754:	e0bfff17 	ldw	r2,-4(fp)
   11758:	00c01804 	movi	r3,96
   1175c:	10c00005 	stb	r3,0(r2)
        return (0);
   11760:	0005883a 	mov	r2,zero
   11764:	00002606 	br	11800 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11768:	e0bffe17 	ldw	r2,-8(fp)
   1176c:	1000051e 	bne	r2,zero,11784 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11770:	e0bfff17 	ldw	r2,-4(fp)
   11774:	00c00304 	movi	r3,12
   11778:	10c00005 	stb	r3,0(r2)
        return (0);
   1177c:	0005883a 	mov	r2,zero
   11780:	00001f06 	br	11800 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11784:	008000b4 	movhi	r2,2
   11788:	10b9c804 	addi	r2,r2,-6368
   1178c:	10800003 	ldbu	r2,0(r2)
   11790:	10803fcc 	andi	r2,r2,255
   11794:	10000526 	beq	r2,zero,117ac <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11798:	e0bfff17 	ldw	r2,-4(fp)
   1179c:	00c00444 	movi	r3,17
   117a0:	10c00005 	stb	r3,0(r2)
        return (0);
   117a4:	0005883a 	mov	r2,zero
   117a8:	00001506 	br	11800 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117ac:	0005303a 	rdctl	r2,status
   117b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117b4:	e0fffb17 	ldw	r3,-20(fp)
   117b8:	00bfff84 	movi	r2,-2
   117bc:	1884703a 	and	r2,r3,r2
   117c0:	1001703a 	wrctl	status,r2
  
  return context;
   117c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   117c8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	10800504 	addi	r2,r2,20
   117d4:	e13ffe17 	ldw	r4,-8(fp)
   117d8:	100b883a 	mov	r5,r2
   117dc:	000f4f40 	call	f4f4 <OS_StrCopy>
   117e0:	e0bffa05 	stb	r2,-24(fp)
   117e4:	e0bff917 	ldw	r2,-28(fp)
   117e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   117f4:	e0bfff17 	ldw	r2,-4(fp)
   117f8:	10000005 	stb	zero,0(r2)
    return (len);
   117fc:	e0bffa03 	ldbu	r2,-24(fp)
}
   11800:	e037883a 	mov	sp,fp
   11804:	dfc00117 	ldw	ra,4(sp)
   11808:	df000017 	ldw	fp,0(sp)
   1180c:	dec00204 	addi	sp,sp,8
   11810:	f800283a 	ret

00011814 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11814:	defff604 	addi	sp,sp,-40
   11818:	dfc00915 	stw	ra,36(sp)
   1181c:	df000815 	stw	fp,32(sp)
   11820:	df000804 	addi	fp,sp,32
   11824:	e13ffd15 	stw	r4,-12(fp)
   11828:	e17ffe15 	stw	r5,-8(fp)
   1182c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11830:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11834:	e0bfff17 	ldw	r2,-4(fp)
   11838:	1000011e 	bne	r2,zero,11840 <OSMemNameSet+0x2c>
        return;
   1183c:	00003606 	br	11918 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11840:	e0bffd17 	ldw	r2,-12(fp)
   11844:	1000041e 	bne	r2,zero,11858 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11848:	e0bfff17 	ldw	r2,-4(fp)
   1184c:	00c01804 	movi	r3,96
   11850:	10c00005 	stb	r3,0(r2)
        return;
   11854:	00003006 	br	11918 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11858:	e0bffe17 	ldw	r2,-8(fp)
   1185c:	1000041e 	bne	r2,zero,11870 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11860:	e0bfff17 	ldw	r2,-4(fp)
   11864:	00c00304 	movi	r3,12
   11868:	10c00005 	stb	r3,0(r2)
        return;
   1186c:	00002a06 	br	11918 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11870:	008000b4 	movhi	r2,2
   11874:	10b9c804 	addi	r2,r2,-6368
   11878:	10800003 	ldbu	r2,0(r2)
   1187c:	10803fcc 	andi	r2,r2,255
   11880:	10000426 	beq	r2,zero,11894 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   11884:	e0bfff17 	ldw	r2,-4(fp)
   11888:	00c00484 	movi	r3,18
   1188c:	10c00005 	stb	r3,0(r2)
        return;
   11890:	00002106 	br	11918 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11894:	0005303a 	rdctl	r2,status
   11898:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1189c:	e0fffa17 	ldw	r3,-24(fp)
   118a0:	00bfff84 	movi	r2,-2
   118a4:	1884703a 	and	r2,r3,r2
   118a8:	1001703a 	wrctl	status,r2
  
  return context;
   118ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   118b0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   118b4:	e13ffe17 	ldw	r4,-8(fp)
   118b8:	000f5680 	call	f568 <OS_StrLen>
   118bc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   118c0:	e0bff903 	ldbu	r2,-28(fp)
   118c4:	10800830 	cmpltui	r2,r2,32
   118c8:	1000081e 	bne	r2,zero,118ec <OSMemNameSet+0xd8>
   118cc:	e0bff817 	ldw	r2,-32(fp)
   118d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118d4:	e0bffb17 	ldw	r2,-20(fp)
   118d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   118dc:	e0bfff17 	ldw	r2,-4(fp)
   118e0:	00c018c4 	movi	r3,99
   118e4:	10c00005 	stb	r3,0(r2)
        return;
   118e8:	00000b06 	br	11918 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   118ec:	e0bffd17 	ldw	r2,-12(fp)
   118f0:	10800504 	addi	r2,r2,20
   118f4:	1009883a 	mov	r4,r2
   118f8:	e17ffe17 	ldw	r5,-8(fp)
   118fc:	000f4f40 	call	f4f4 <OS_StrCopy>
   11900:	e0bff817 	ldw	r2,-32(fp)
   11904:	e0bffc15 	stw	r2,-16(fp)
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11910:	e0bfff17 	ldw	r2,-4(fp)
   11914:	10000005 	stb	zero,0(r2)
}
   11918:	e037883a 	mov	sp,fp
   1191c:	dfc00117 	ldw	ra,4(sp)
   11920:	df000017 	ldw	fp,0(sp)
   11924:	dec00204 	addi	sp,sp,8
   11928:	f800283a 	ret

0001192c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1192c:	defff904 	addi	sp,sp,-28
   11930:	df000615 	stw	fp,24(sp)
   11934:	df000604 	addi	fp,sp,24
   11938:	e13ffe15 	stw	r4,-8(fp)
   1193c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11940:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11944:	e0bffe17 	ldw	r2,-8(fp)
   11948:	1000021e 	bne	r2,zero,11954 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1194c:	00801804 	movi	r2,96
   11950:	00002806 	br	119f4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	1000021e 	bne	r2,zero,11964 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1195c:	008017c4 	movi	r2,95
   11960:	00002406 	br	119f4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11964:	0005303a 	rdctl	r2,status
   11968:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1196c:	e0fffb17 	ldw	r3,-20(fp)
   11970:	00bfff84 	movi	r2,-2
   11974:	1884703a 	and	r2,r3,r2
   11978:	1001703a 	wrctl	status,r2
  
  return context;
   1197c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11980:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11984:	e0bffe17 	ldw	r2,-8(fp)
   11988:	10c00417 	ldw	r3,16(r2)
   1198c:	e0bffe17 	ldw	r2,-8(fp)
   11990:	10800317 	ldw	r2,12(r2)
   11994:	18800636 	bltu	r3,r2,119b0 <OSMemPut+0x84>
   11998:	e0bffa17 	ldw	r2,-24(fp)
   1199c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119a0:	e0bffc17 	ldw	r2,-16(fp)
   119a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   119a8:	00801784 	movi	r2,94
   119ac:	00001106 	br	119f4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   119b0:	e0bffe17 	ldw	r2,-8(fp)
   119b4:	10c00117 	ldw	r3,4(r2)
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   119c0:	e0bffe17 	ldw	r2,-8(fp)
   119c4:	e0ffff17 	ldw	r3,-4(fp)
   119c8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   119cc:	e0bffe17 	ldw	r2,-8(fp)
   119d0:	10800417 	ldw	r2,16(r2)
   119d4:	10c00044 	addi	r3,r2,1
   119d8:	e0bffe17 	ldw	r2,-8(fp)
   119dc:	10c00415 	stw	r3,16(r2)
   119e0:	e0bffa17 	ldw	r2,-24(fp)
   119e4:	e0bffd15 	stw	r2,-12(fp)
   119e8:	e0bffd17 	ldw	r2,-12(fp)
   119ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   119f0:	0005883a 	mov	r2,zero
}
   119f4:	e037883a 	mov	sp,fp
   119f8:	df000017 	ldw	fp,0(sp)
   119fc:	dec00104 	addi	sp,sp,4
   11a00:	f800283a 	ret

00011a04 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11a04:	defffa04 	addi	sp,sp,-24
   11a08:	df000515 	stw	fp,20(sp)
   11a0c:	df000504 	addi	fp,sp,20
   11a10:	e13ffe15 	stw	r4,-8(fp)
   11a14:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11a18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11a1c:	e0bffe17 	ldw	r2,-8(fp)
   11a20:	1000021e 	bne	r2,zero,11a2c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11a24:	00801804 	movi	r2,96
   11a28:	00002c06 	br	11adc <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11a2c:	e0bfff17 	ldw	r2,-4(fp)
   11a30:	1000021e 	bne	r2,zero,11a3c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11a34:	00801844 	movi	r2,97
   11a38:	00002806 	br	11adc <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a3c:	0005303a 	rdctl	r2,status
   11a40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a44:	e0fffc17 	ldw	r3,-16(fp)
   11a48:	00bfff84 	movi	r2,-2
   11a4c:	1884703a 	and	r2,r3,r2
   11a50:	1001703a 	wrctl	status,r2
  
  return context;
   11a54:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11a58:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11a5c:	e0bffe17 	ldw	r2,-8(fp)
   11a60:	10c00017 	ldw	r3,0(r2)
   11a64:	e0bfff17 	ldw	r2,-4(fp)
   11a68:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11a6c:	e0bffe17 	ldw	r2,-8(fp)
   11a70:	10c00117 	ldw	r3,4(r2)
   11a74:	e0bfff17 	ldw	r2,-4(fp)
   11a78:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11a7c:	e0bffe17 	ldw	r2,-8(fp)
   11a80:	10c00217 	ldw	r3,8(r2)
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11a8c:	e0bffe17 	ldw	r2,-8(fp)
   11a90:	10c00317 	ldw	r3,12(r2)
   11a94:	e0bfff17 	ldw	r2,-4(fp)
   11a98:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11a9c:	e0bffe17 	ldw	r2,-8(fp)
   11aa0:	10c00417 	ldw	r3,16(r2)
   11aa4:	e0bfff17 	ldw	r2,-4(fp)
   11aa8:	10c00415 	stw	r3,16(r2)
   11aac:	e0bffb17 	ldw	r2,-20(fp)
   11ab0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ab4:	e0bffd17 	ldw	r2,-12(fp)
   11ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11abc:	e0bfff17 	ldw	r2,-4(fp)
   11ac0:	10c00317 	ldw	r3,12(r2)
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
   11ac8:	10800417 	ldw	r2,16(r2)
   11acc:	1887c83a 	sub	r3,r3,r2
   11ad0:	e0bfff17 	ldw	r2,-4(fp)
   11ad4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11ad8:	0005883a 	mov	r2,zero
}
   11adc:	e037883a 	mov	sp,fp
   11ae0:	df000017 	ldw	fp,0(sp)
   11ae4:	dec00104 	addi	sp,sp,4
   11ae8:	f800283a 	ret

00011aec <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11aec:	defffc04 	addi	sp,sp,-16
   11af0:	dfc00315 	stw	ra,12(sp)
   11af4:	df000215 	stw	fp,8(sp)
   11af8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11afc:	010000b4 	movhi	r4,2
   11b00:	210ac304 	addi	r4,r4,11020
   11b04:	01430c04 	movi	r5,3120
   11b08:	000f3040 	call	f304 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11b0c:	008000b4 	movhi	r2,2
   11b10:	108ac304 	addi	r2,r2,11020
   11b14:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11b18:	e03fff0d 	sth	zero,-4(fp)
   11b1c:	00001306 	br	11b6c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11b20:	e0bfff0b 	ldhu	r2,-4(fp)
   11b24:	10800044 	addi	r2,r2,1
   11b28:	10c00d24 	muli	r3,r2,52
   11b2c:	008000b4 	movhi	r2,2
   11b30:	108ac304 	addi	r2,r2,11020
   11b34:	1887883a 	add	r3,r3,r2
   11b38:	e0bffe17 	ldw	r2,-8(fp)
   11b3c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11b40:	e0bffe17 	ldw	r2,-8(fp)
   11b44:	00c00fc4 	movi	r3,63
   11b48:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11b4c:	e0bffe17 	ldw	r2,-8(fp)
   11b50:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11b54:	e0bffe17 	ldw	r2,-8(fp)
   11b58:	10800d04 	addi	r2,r2,52
   11b5c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11b60:	e0bfff0b 	ldhu	r2,-4(fp)
   11b64:	10800044 	addi	r2,r2,1
   11b68:	e0bfff0d 	sth	r2,-4(fp)
   11b6c:	e0bfff0b 	ldhu	r2,-4(fp)
   11b70:	10800ef0 	cmpltui	r2,r2,59
   11b74:	103fea1e 	bne	r2,zero,11b20 <__alt_mem_Flash_flash_data+0xf4011b20>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11b78:	e0bffe17 	ldw	r2,-8(fp)
   11b7c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11b80:	e0bffe17 	ldw	r2,-8(fp)
   11b84:	00c00fc4 	movi	r3,63
   11b88:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11b8c:	e0bffe17 	ldw	r2,-8(fp)
   11b90:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11b94:	008000b4 	movhi	r2,2
   11b98:	10b9c304 	addi	r2,r2,-6388
   11b9c:	00c000b4 	movhi	r3,2
   11ba0:	18cac304 	addi	r3,r3,11020
   11ba4:	10c00015 	stw	r3,0(r2)
#endif
}
   11ba8:	e037883a 	mov	sp,fp
   11bac:	dfc00117 	ldw	ra,4(sp)
   11bb0:	df000017 	ldw	fp,0(sp)
   11bb4:	dec00204 	addi	sp,sp,8
   11bb8:	f800283a 	ret

00011bbc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11bbc:	defff804 	addi	sp,sp,-32
   11bc0:	df000715 	stw	fp,28(sp)
   11bc4:	df000704 	addi	fp,sp,28
   11bc8:	e13ffe15 	stw	r4,-8(fp)
   11bcc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11bd0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11bd4:	e0bfff17 	ldw	r2,-4(fp)
   11bd8:	1000021e 	bne	r2,zero,11be4 <OSQAccept+0x28>
        return ((void *)0);
   11bdc:	0005883a 	mov	r2,zero
   11be0:	00004206 	br	11cec <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11be4:	e0bffe17 	ldw	r2,-8(fp)
   11be8:	1000051e 	bne	r2,zero,11c00 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11bec:	e0bfff17 	ldw	r2,-4(fp)
   11bf0:	00c00104 	movi	r3,4
   11bf4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11bf8:	0005883a 	mov	r2,zero
   11bfc:	00003b06 	br	11cec <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11c00:	e0bffe17 	ldw	r2,-8(fp)
   11c04:	10800003 	ldbu	r2,0(r2)
   11c08:	10803fcc 	andi	r2,r2,255
   11c0c:	108000a0 	cmpeqi	r2,r2,2
   11c10:	1000051e 	bne	r2,zero,11c28 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11c14:	e0bfff17 	ldw	r2,-4(fp)
   11c18:	00c00044 	movi	r3,1
   11c1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11c20:	0005883a 	mov	r2,zero
   11c24:	00003106 	br	11cec <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c28:	0005303a 	rdctl	r2,status
   11c2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c30:	e0fffc17 	ldw	r3,-16(fp)
   11c34:	00bfff84 	movi	r2,-2
   11c38:	1884703a 	and	r2,r3,r2
   11c3c:	1001703a 	wrctl	status,r2
  
  return context;
   11c40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11c44:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11c48:	e0bffe17 	ldw	r2,-8(fp)
   11c4c:	10800117 	ldw	r2,4(r2)
   11c50:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11c54:	e0bffb17 	ldw	r2,-20(fp)
   11c58:	1080058b 	ldhu	r2,22(r2)
   11c5c:	10bfffcc 	andi	r2,r2,65535
   11c60:	10001926 	beq	r2,zero,11cc8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11c64:	e0bffb17 	ldw	r2,-20(fp)
   11c68:	10800417 	ldw	r2,16(r2)
   11c6c:	11000104 	addi	r4,r2,4
   11c70:	e0fffb17 	ldw	r3,-20(fp)
   11c74:	19000415 	stw	r4,16(r3)
   11c78:	10800017 	ldw	r2,0(r2)
   11c7c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11c80:	e0bffb17 	ldw	r2,-20(fp)
   11c84:	1080058b 	ldhu	r2,22(r2)
   11c88:	10bfffc4 	addi	r2,r2,-1
   11c8c:	1007883a 	mov	r3,r2
   11c90:	e0bffb17 	ldw	r2,-20(fp)
   11c94:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11c98:	e0bffb17 	ldw	r2,-20(fp)
   11c9c:	10c00417 	ldw	r3,16(r2)
   11ca0:	e0bffb17 	ldw	r2,-20(fp)
   11ca4:	10800217 	ldw	r2,8(r2)
   11ca8:	1880041e 	bne	r3,r2,11cbc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11cac:	e0bffb17 	ldw	r2,-20(fp)
   11cb0:	10c00117 	ldw	r3,4(r2)
   11cb4:	e0bffb17 	ldw	r2,-20(fp)
   11cb8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11cbc:	e0bfff17 	ldw	r2,-4(fp)
   11cc0:	10000005 	stb	zero,0(r2)
   11cc4:	00000406 	br	11cd8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
   11ccc:	00c007c4 	movi	r3,31
   11cd0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11cd4:	e03ff915 	stw	zero,-28(fp)
   11cd8:	e0bffa17 	ldw	r2,-24(fp)
   11cdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11ce8:	e0bff917 	ldw	r2,-28(fp)
}
   11cec:	e037883a 	mov	sp,fp
   11cf0:	df000017 	ldw	fp,0(sp)
   11cf4:	dec00104 	addi	sp,sp,4
   11cf8:	f800283a 	ret

00011cfc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11cfc:	defff404 	addi	sp,sp,-48
   11d00:	dfc00b15 	stw	ra,44(sp)
   11d04:	df000a15 	stw	fp,40(sp)
   11d08:	df000a04 	addi	fp,sp,40
   11d0c:	e13ffe15 	stw	r4,-8(fp)
   11d10:	2805883a 	mov	r2,r5
   11d14:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11d18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11d1c:	008000b4 	movhi	r2,2
   11d20:	10b9c804 	addi	r2,r2,-6368
   11d24:	10800003 	ldbu	r2,0(r2)
   11d28:	10803fcc 	andi	r2,r2,255
   11d2c:	10000226 	beq	r2,zero,11d38 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11d30:	0005883a 	mov	r2,zero
   11d34:	00006b06 	br	11ee4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d38:	0005303a 	rdctl	r2,status
   11d3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d40:	e0fff917 	ldw	r3,-28(fp)
   11d44:	00bfff84 	movi	r2,-2
   11d48:	1884703a 	and	r2,r3,r2
   11d4c:	1001703a 	wrctl	status,r2
  
  return context;
   11d50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11d54:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11d58:	008000b4 	movhi	r2,2
   11d5c:	10b9c704 	addi	r2,r2,-6372
   11d60:	10800017 	ldw	r2,0(r2)
   11d64:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11d68:	008000b4 	movhi	r2,2
   11d6c:	10b9c704 	addi	r2,r2,-6372
   11d70:	10800017 	ldw	r2,0(r2)
   11d74:	10000726 	beq	r2,zero,11d94 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11d78:	008000b4 	movhi	r2,2
   11d7c:	10b9c704 	addi	r2,r2,-6372
   11d80:	10800017 	ldw	r2,0(r2)
   11d84:	10c00117 	ldw	r3,4(r2)
   11d88:	008000b4 	movhi	r2,2
   11d8c:	10b9c704 	addi	r2,r2,-6372
   11d90:	10c00015 	stw	r3,0(r2)
   11d94:	e0bff717 	ldw	r2,-36(fp)
   11d98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d9c:	e0bffa17 	ldw	r2,-24(fp)
   11da0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11da4:	e0bff617 	ldw	r2,-40(fp)
   11da8:	10004d26 	beq	r2,zero,11ee0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11dac:	0005303a 	rdctl	r2,status
   11db0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11db4:	e0fffb17 	ldw	r3,-20(fp)
   11db8:	00bfff84 	movi	r2,-2
   11dbc:	1884703a 	and	r2,r3,r2
   11dc0:	1001703a 	wrctl	status,r2
  
  return context;
   11dc4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11dc8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11dcc:	008000b4 	movhi	r2,2
   11dd0:	10b9c504 	addi	r2,r2,-6380
   11dd4:	10800017 	ldw	r2,0(r2)
   11dd8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11ddc:	e0bff817 	ldw	r2,-32(fp)
   11de0:	10003126 	beq	r2,zero,11ea8 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11de4:	008000b4 	movhi	r2,2
   11de8:	10b9c504 	addi	r2,r2,-6380
   11dec:	10800017 	ldw	r2,0(r2)
   11df0:	10c00017 	ldw	r3,0(r2)
   11df4:	008000b4 	movhi	r2,2
   11df8:	10b9c504 	addi	r2,r2,-6380
   11dfc:	10c00015 	stw	r3,0(r2)
   11e00:	e0bff717 	ldw	r2,-36(fp)
   11e04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e08:	e0bffc17 	ldw	r2,-16(fp)
   11e0c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   11e10:	e0bff817 	ldw	r2,-32(fp)
   11e14:	e0fffe17 	ldw	r3,-8(fp)
   11e18:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11e1c:	e0bfff0b 	ldhu	r2,-4(fp)
   11e20:	1085883a 	add	r2,r2,r2
   11e24:	1085883a 	add	r2,r2,r2
   11e28:	1007883a 	mov	r3,r2
   11e2c:	e0bffe17 	ldw	r2,-8(fp)
   11e30:	10c7883a 	add	r3,r2,r3
   11e34:	e0bff817 	ldw	r2,-32(fp)
   11e38:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   11e3c:	e0bff817 	ldw	r2,-32(fp)
   11e40:	e0fffe17 	ldw	r3,-8(fp)
   11e44:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   11e48:	e0bff817 	ldw	r2,-32(fp)
   11e4c:	e0fffe17 	ldw	r3,-8(fp)
   11e50:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   11e54:	e0bff817 	ldw	r2,-32(fp)
   11e58:	e0ffff0b 	ldhu	r3,-4(fp)
   11e5c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   11e60:	e0bff817 	ldw	r2,-32(fp)
   11e64:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   11e68:	e0bff617 	ldw	r2,-40(fp)
   11e6c:	00c00084 	movi	r3,2
   11e70:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   11e74:	e0bff617 	ldw	r2,-40(fp)
   11e78:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   11e7c:	e0bff617 	ldw	r2,-40(fp)
   11e80:	e0fff817 	ldw	r3,-32(fp)
   11e84:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   11e88:	e0bff617 	ldw	r2,-40(fp)
   11e8c:	00c00fc4 	movi	r3,63
   11e90:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11e94:	e0bff617 	ldw	r2,-40(fp)
   11e98:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11e9c:	e13ff617 	ldw	r4,-40(fp)
   11ea0:	000ef400 	call	ef40 <OS_EventWaitListInit>
   11ea4:	00000e06 	br	11ee0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11ea8:	008000b4 	movhi	r2,2
   11eac:	10b9c704 	addi	r2,r2,-6372
   11eb0:	10c00017 	ldw	r3,0(r2)
   11eb4:	e0bff617 	ldw	r2,-40(fp)
   11eb8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11ebc:	008000b4 	movhi	r2,2
   11ec0:	10b9c704 	addi	r2,r2,-6372
   11ec4:	e0fff617 	ldw	r3,-40(fp)
   11ec8:	10c00015 	stw	r3,0(r2)
   11ecc:	e0bff717 	ldw	r2,-36(fp)
   11ed0:	e0bffd15 	stw	r2,-12(fp)
   11ed4:	e0bffd17 	ldw	r2,-12(fp)
   11ed8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11edc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   11ee0:	e0bff617 	ldw	r2,-40(fp)
}
   11ee4:	e037883a 	mov	sp,fp
   11ee8:	dfc00117 	ldw	ra,4(sp)
   11eec:	df000017 	ldw	fp,0(sp)
   11ef0:	dec00204 	addi	sp,sp,8
   11ef4:	f800283a 	ret

00011ef8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11ef8:	defff204 	addi	sp,sp,-56
   11efc:	dfc00d15 	stw	ra,52(sp)
   11f00:	df000c15 	stw	fp,48(sp)
   11f04:	df000c04 	addi	fp,sp,48
   11f08:	e13ffd15 	stw	r4,-12(fp)
   11f0c:	2805883a 	mov	r2,r5
   11f10:	e1bfff15 	stw	r6,-4(fp)
   11f14:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11f18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11f1c:	e0bfff17 	ldw	r2,-4(fp)
   11f20:	1000021e 	bne	r2,zero,11f2c <OSQDel+0x34>
        return (pevent);
   11f24:	e0bffd17 	ldw	r2,-12(fp)
   11f28:	0000a006 	br	121ac <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11f2c:	e0bffd17 	ldw	r2,-12(fp)
   11f30:	1000051e 	bne	r2,zero,11f48 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11f34:	e0bfff17 	ldw	r2,-4(fp)
   11f38:	00c00104 	movi	r3,4
   11f3c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	00009906 	br	121ac <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11f48:	e0bffd17 	ldw	r2,-12(fp)
   11f4c:	10800003 	ldbu	r2,0(r2)
   11f50:	10803fcc 	andi	r2,r2,255
   11f54:	108000a0 	cmpeqi	r2,r2,2
   11f58:	1000051e 	bne	r2,zero,11f70 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11f5c:	e0bfff17 	ldw	r2,-4(fp)
   11f60:	00c00044 	movi	r3,1
   11f64:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11f68:	e0bffd17 	ldw	r2,-12(fp)
   11f6c:	00008f06 	br	121ac <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11f70:	008000b4 	movhi	r2,2
   11f74:	10b9c804 	addi	r2,r2,-6368
   11f78:	10800003 	ldbu	r2,0(r2)
   11f7c:	10803fcc 	andi	r2,r2,255
   11f80:	10000526 	beq	r2,zero,11f98 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11f84:	e0bfff17 	ldw	r2,-4(fp)
   11f88:	00c003c4 	movi	r3,15
   11f8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11f90:	e0bffd17 	ldw	r2,-12(fp)
   11f94:	00008506 	br	121ac <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f98:	0005303a 	rdctl	r2,status
   11f9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fa0:	e0fff817 	ldw	r3,-32(fp)
   11fa4:	00bfff84 	movi	r2,-2
   11fa8:	1884703a 	and	r2,r3,r2
   11fac:	1001703a 	wrctl	status,r2
  
  return context;
   11fb0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11fb4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   11fb8:	e0bffd17 	ldw	r2,-12(fp)
   11fbc:	10800283 	ldbu	r2,10(r2)
   11fc0:	10803fcc 	andi	r2,r2,255
   11fc4:	10000326 	beq	r2,zero,11fd4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11fc8:	00800044 	movi	r2,1
   11fcc:	e0bff405 	stb	r2,-48(fp)
   11fd0:	00000106 	br	11fd8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11fd4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11fd8:	e0bffe03 	ldbu	r2,-8(fp)
   11fdc:	10000326 	beq	r2,zero,11fec <OSQDel+0xf4>
   11fe0:	10800060 	cmpeqi	r2,r2,1
   11fe4:	1000381e 	bne	r2,zero,120c8 <OSQDel+0x1d0>
   11fe8:	00006506 	br	12180 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   11fec:	e0bff403 	ldbu	r2,-48(fp)
   11ff0:	1000261e 	bne	r2,zero,1208c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11ff4:	e0bffd17 	ldw	r2,-12(fp)
   11ff8:	00c00fc4 	movi	r3,63
   11ffc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12000:	e0bffd17 	ldw	r2,-12(fp)
   12004:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12008:	e0bffd17 	ldw	r2,-12(fp)
   1200c:	10800117 	ldw	r2,4(r2)
   12010:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   12014:	008000b4 	movhi	r2,2
   12018:	10b9c504 	addi	r2,r2,-6380
   1201c:	10c00017 	ldw	r3,0(r2)
   12020:	e0bff717 	ldw	r2,-36(fp)
   12024:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12028:	008000b4 	movhi	r2,2
   1202c:	10b9c504 	addi	r2,r2,-6380
   12030:	e0fff717 	ldw	r3,-36(fp)
   12034:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12038:	e0bffd17 	ldw	r2,-12(fp)
   1203c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12040:	008000b4 	movhi	r2,2
   12044:	10b9c704 	addi	r2,r2,-6372
   12048:	10c00017 	ldw	r3,0(r2)
   1204c:	e0bffd17 	ldw	r2,-12(fp)
   12050:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12054:	e0bffd17 	ldw	r2,-12(fp)
   12058:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1205c:	008000b4 	movhi	r2,2
   12060:	10b9c704 	addi	r2,r2,-6372
   12064:	e0fffd17 	ldw	r3,-12(fp)
   12068:	10c00015 	stw	r3,0(r2)
   1206c:	e0bff617 	ldw	r2,-40(fp)
   12070:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12074:	e0bff917 	ldw	r2,-28(fp)
   12078:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1207c:	e0bfff17 	ldw	r2,-4(fp)
   12080:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12084:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12088:	00004706 	br	121a8 <OSQDel+0x2b0>
   1208c:	e0bff617 	ldw	r2,-40(fp)
   12090:	e0bffa15 	stw	r2,-24(fp)
   12094:	e0bffa17 	ldw	r2,-24(fp)
   12098:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1209c:	e0bfff17 	ldw	r2,-4(fp)
   120a0:	00c01244 	movi	r3,73
   120a4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   120a8:	e0bffd17 	ldw	r2,-12(fp)
   120ac:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   120b0:	00003d06 	br	121a8 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   120b4:	e13ffd17 	ldw	r4,-12(fp)
   120b8:	000b883a 	mov	r5,zero
   120bc:	01800104 	movi	r6,4
   120c0:	000f883a 	mov	r7,zero
   120c4:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   120c8:	e0bffd17 	ldw	r2,-12(fp)
   120cc:	10800283 	ldbu	r2,10(r2)
   120d0:	10803fcc 	andi	r2,r2,255
   120d4:	103ff71e 	bne	r2,zero,120b4 <__alt_mem_Flash_flash_data+0xf40120b4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   120d8:	e0bffd17 	ldw	r2,-12(fp)
   120dc:	00c00fc4 	movi	r3,63
   120e0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   120e4:	e0bffd17 	ldw	r2,-12(fp)
   120e8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   120ec:	e0bffd17 	ldw	r2,-12(fp)
   120f0:	10800117 	ldw	r2,4(r2)
   120f4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   120f8:	008000b4 	movhi	r2,2
   120fc:	10b9c504 	addi	r2,r2,-6380
   12100:	10c00017 	ldw	r3,0(r2)
   12104:	e0bff717 	ldw	r2,-36(fp)
   12108:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1210c:	008000b4 	movhi	r2,2
   12110:	10b9c504 	addi	r2,r2,-6380
   12114:	e0fff717 	ldw	r3,-36(fp)
   12118:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1211c:	e0bffd17 	ldw	r2,-12(fp)
   12120:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12124:	008000b4 	movhi	r2,2
   12128:	10b9c704 	addi	r2,r2,-6372
   1212c:	10c00017 	ldw	r3,0(r2)
   12130:	e0bffd17 	ldw	r2,-12(fp)
   12134:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12138:	e0bffd17 	ldw	r2,-12(fp)
   1213c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12140:	008000b4 	movhi	r2,2
   12144:	10b9c704 	addi	r2,r2,-6372
   12148:	e0fffd17 	ldw	r3,-12(fp)
   1214c:	10c00015 	stw	r3,0(r2)
   12150:	e0bff617 	ldw	r2,-40(fp)
   12154:	e0bffb15 	stw	r2,-20(fp)
   12158:	e0bffb17 	ldw	r2,-20(fp)
   1215c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12160:	e0bff403 	ldbu	r2,-48(fp)
   12164:	10800058 	cmpnei	r2,r2,1
   12168:	1000011e 	bne	r2,zero,12170 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1216c:	000f3b80 	call	f3b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12170:	e0bfff17 	ldw	r2,-4(fp)
   12174:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12178:	e03ff515 	stw	zero,-44(fp)
             break;
   1217c:	00000a06 	br	121a8 <OSQDel+0x2b0>
   12180:	e0bff617 	ldw	r2,-40(fp)
   12184:	e0bffc15 	stw	r2,-16(fp)
   12188:	e0bffc17 	ldw	r2,-16(fp)
   1218c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12190:	e0bfff17 	ldw	r2,-4(fp)
   12194:	00c001c4 	movi	r3,7
   12198:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1219c:	e0bffd17 	ldw	r2,-12(fp)
   121a0:	e0bff515 	stw	r2,-44(fp)
             break;
   121a4:	0001883a 	nop
    }
    return (pevent_return);
   121a8:	e0bff517 	ldw	r2,-44(fp)
}
   121ac:	e037883a 	mov	sp,fp
   121b0:	dfc00117 	ldw	ra,4(sp)
   121b4:	df000017 	ldw	fp,0(sp)
   121b8:	dec00204 	addi	sp,sp,8
   121bc:	f800283a 	ret

000121c0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   121c0:	defffa04 	addi	sp,sp,-24
   121c4:	df000515 	stw	fp,20(sp)
   121c8:	df000504 	addi	fp,sp,20
   121cc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   121d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   121d4:	e0bfff17 	ldw	r2,-4(fp)
   121d8:	1000021e 	bne	r2,zero,121e4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   121dc:	00800104 	movi	r2,4
   121e0:	00002106 	br	12268 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   121e4:	e0bfff17 	ldw	r2,-4(fp)
   121e8:	10800003 	ldbu	r2,0(r2)
   121ec:	10803fcc 	andi	r2,r2,255
   121f0:	108000a0 	cmpeqi	r2,r2,2
   121f4:	1000021e 	bne	r2,zero,12200 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   121f8:	00800044 	movi	r2,1
   121fc:	00001a06 	br	12268 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12200:	0005303a 	rdctl	r2,status
   12204:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12208:	e0fffd17 	ldw	r3,-12(fp)
   1220c:	00bfff84 	movi	r2,-2
   12210:	1884703a 	and	r2,r3,r2
   12214:	1001703a 	wrctl	status,r2
  
  return context;
   12218:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1221c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12220:	e0bfff17 	ldw	r2,-4(fp)
   12224:	10800117 	ldw	r2,4(r2)
   12228:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1222c:	e0bffc17 	ldw	r2,-16(fp)
   12230:	10c00117 	ldw	r3,4(r2)
   12234:	e0bffc17 	ldw	r2,-16(fp)
   12238:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1223c:	e0bffc17 	ldw	r2,-16(fp)
   12240:	10c00117 	ldw	r3,4(r2)
   12244:	e0bffc17 	ldw	r2,-16(fp)
   12248:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1224c:	e0bffc17 	ldw	r2,-16(fp)
   12250:	1000058d 	sth	zero,22(r2)
   12254:	e0bffb17 	ldw	r2,-20(fp)
   12258:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1225c:	e0bffe17 	ldw	r2,-8(fp)
   12260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12264:	0005883a 	mov	r2,zero
}
   12268:	e037883a 	mov	sp,fp
   1226c:	df000017 	ldw	fp,0(sp)
   12270:	dec00104 	addi	sp,sp,4
   12274:	f800283a 	ret

00012278 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12278:	defff304 	addi	sp,sp,-52
   1227c:	dfc00c15 	stw	ra,48(sp)
   12280:	df000b15 	stw	fp,44(sp)
   12284:	df000b04 	addi	fp,sp,44
   12288:	e13ffd15 	stw	r4,-12(fp)
   1228c:	2805883a 	mov	r2,r5
   12290:	e1bfff15 	stw	r6,-4(fp)
   12294:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12298:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1229c:	e0bfff17 	ldw	r2,-4(fp)
   122a0:	1000021e 	bne	r2,zero,122ac <OSQPend+0x34>
        return ((void *)0);
   122a4:	0005883a 	mov	r2,zero
   122a8:	0000ad06 	br	12560 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   122ac:	e0bffd17 	ldw	r2,-12(fp)
   122b0:	1000051e 	bne	r2,zero,122c8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   122b4:	e0bfff17 	ldw	r2,-4(fp)
   122b8:	00c00104 	movi	r3,4
   122bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   122c0:	0005883a 	mov	r2,zero
   122c4:	0000a606 	br	12560 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10800003 	ldbu	r2,0(r2)
   122d0:	10803fcc 	andi	r2,r2,255
   122d4:	108000a0 	cmpeqi	r2,r2,2
   122d8:	1000051e 	bne	r2,zero,122f0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   122dc:	e0bfff17 	ldw	r2,-4(fp)
   122e0:	00c00044 	movi	r3,1
   122e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   122e8:	0005883a 	mov	r2,zero
   122ec:	00009c06 	br	12560 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   122f0:	008000b4 	movhi	r2,2
   122f4:	10b9c804 	addi	r2,r2,-6368
   122f8:	10800003 	ldbu	r2,0(r2)
   122fc:	10803fcc 	andi	r2,r2,255
   12300:	10000526 	beq	r2,zero,12318 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12304:	e0bfff17 	ldw	r2,-4(fp)
   12308:	00c00084 	movi	r3,2
   1230c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12310:	0005883a 	mov	r2,zero
   12314:	00009206 	br	12560 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12318:	008000b4 	movhi	r2,2
   1231c:	10b9ba04 	addi	r2,r2,-6424
   12320:	10800003 	ldbu	r2,0(r2)
   12324:	10803fcc 	andi	r2,r2,255
   12328:	10000526 	beq	r2,zero,12340 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1232c:	e0bfff17 	ldw	r2,-4(fp)
   12330:	00c00344 	movi	r3,13
   12334:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12338:	0005883a 	mov	r2,zero
   1233c:	00008806 	br	12560 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12340:	0005303a 	rdctl	r2,status
   12344:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12348:	e0fff817 	ldw	r3,-32(fp)
   1234c:	00bfff84 	movi	r2,-2
   12350:	1884703a 	and	r2,r3,r2
   12354:	1001703a 	wrctl	status,r2
  
  return context;
   12358:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1235c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12360:	e0bffd17 	ldw	r2,-12(fp)
   12364:	10800117 	ldw	r2,4(r2)
   12368:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1236c:	e0bff717 	ldw	r2,-36(fp)
   12370:	1080058b 	ldhu	r2,22(r2)
   12374:	10bfffcc 	andi	r2,r2,65535
   12378:	10001e26 	beq	r2,zero,123f4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1237c:	e0bff717 	ldw	r2,-36(fp)
   12380:	10800417 	ldw	r2,16(r2)
   12384:	11000104 	addi	r4,r2,4
   12388:	e0fff717 	ldw	r3,-36(fp)
   1238c:	19000415 	stw	r4,16(r3)
   12390:	10800017 	ldw	r2,0(r2)
   12394:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12398:	e0bff717 	ldw	r2,-36(fp)
   1239c:	1080058b 	ldhu	r2,22(r2)
   123a0:	10bfffc4 	addi	r2,r2,-1
   123a4:	1007883a 	mov	r3,r2
   123a8:	e0bff717 	ldw	r2,-36(fp)
   123ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   123b0:	e0bff717 	ldw	r2,-36(fp)
   123b4:	10c00417 	ldw	r3,16(r2)
   123b8:	e0bff717 	ldw	r2,-36(fp)
   123bc:	10800217 	ldw	r2,8(r2)
   123c0:	1880041e 	bne	r3,r2,123d4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   123c4:	e0bff717 	ldw	r2,-36(fp)
   123c8:	10c00117 	ldw	r3,4(r2)
   123cc:	e0bff717 	ldw	r2,-36(fp)
   123d0:	10c00415 	stw	r3,16(r2)
   123d4:	e0bff617 	ldw	r2,-40(fp)
   123d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123dc:	e0bff917 	ldw	r2,-28(fp)
   123e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   123e4:	e0bfff17 	ldw	r2,-4(fp)
   123e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   123ec:	e0bff517 	ldw	r2,-44(fp)
   123f0:	00005b06 	br	12560 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   123f4:	008000b4 	movhi	r2,2
   123f8:	10b9c904 	addi	r2,r2,-6364
   123fc:	10c00017 	ldw	r3,0(r2)
   12400:	008000b4 	movhi	r2,2
   12404:	10b9c904 	addi	r2,r2,-6364
   12408:	10800017 	ldw	r2,0(r2)
   1240c:	10800c03 	ldbu	r2,48(r2)
   12410:	10800114 	ori	r2,r2,4
   12414:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12418:	008000b4 	movhi	r2,2
   1241c:	10b9c904 	addi	r2,r2,-6364
   12420:	10800017 	ldw	r2,0(r2)
   12424:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12428:	008000b4 	movhi	r2,2
   1242c:	10b9c904 	addi	r2,r2,-6364
   12430:	10800017 	ldw	r2,0(r2)
   12434:	e0fffe0b 	ldhu	r3,-8(fp)
   12438:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1243c:	e13ffd17 	ldw	r4,-12(fp)
   12440:	000eb380 	call	eb38 <OS_EventTaskWait>
   12444:	e0bff617 	ldw	r2,-40(fp)
   12448:	e0bffa15 	stw	r2,-24(fp)
   1244c:	e0bffa17 	ldw	r2,-24(fp)
   12450:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12454:	000f3b80 	call	f3b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12458:	0005303a 	rdctl	r2,status
   1245c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12460:	e0fffb17 	ldw	r3,-20(fp)
   12464:	00bfff84 	movi	r2,-2
   12468:	1884703a 	and	r2,r3,r2
   1246c:	1001703a 	wrctl	status,r2
  
  return context;
   12470:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12474:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12478:	008000b4 	movhi	r2,2
   1247c:	10b9c904 	addi	r2,r2,-6364
   12480:	10800017 	ldw	r2,0(r2)
   12484:	10800c43 	ldbu	r2,49(r2)
   12488:	10803fcc 	andi	r2,r2,255
   1248c:	10000326 	beq	r2,zero,1249c <OSQPend+0x224>
   12490:	108000a0 	cmpeqi	r2,r2,2
   12494:	1000091e 	bne	r2,zero,124bc <OSQPend+0x244>
   12498:	00000d06 	br	124d0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1249c:	008000b4 	movhi	r2,2
   124a0:	10b9c904 	addi	r2,r2,-6364
   124a4:	10800017 	ldw	r2,0(r2)
   124a8:	10800917 	ldw	r2,36(r2)
   124ac:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   124b0:	e0bfff17 	ldw	r2,-4(fp)
   124b4:	10000005 	stb	zero,0(r2)
             break;
   124b8:	00001006 	br	124fc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   124bc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   124c0:	e0bfff17 	ldw	r2,-4(fp)
   124c4:	00c00384 	movi	r3,14
   124c8:	10c00005 	stb	r3,0(r2)
             break;
   124cc:	00000b06 	br	124fc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   124d0:	008000b4 	movhi	r2,2
   124d4:	10b9c904 	addi	r2,r2,-6364
   124d8:	10800017 	ldw	r2,0(r2)
   124dc:	1009883a 	mov	r4,r2
   124e0:	e17ffd17 	ldw	r5,-12(fp)
   124e4:	000ed900 	call	ed90 <OS_EventTaskRemove>
             pmsg = (void *)0;
   124e8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   124ec:	e0bfff17 	ldw	r2,-4(fp)
   124f0:	00c00284 	movi	r3,10
   124f4:	10c00005 	stb	r3,0(r2)
             break;
   124f8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   124fc:	008000b4 	movhi	r2,2
   12500:	10b9c904 	addi	r2,r2,-6364
   12504:	10800017 	ldw	r2,0(r2)
   12508:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1250c:	008000b4 	movhi	r2,2
   12510:	10b9c904 	addi	r2,r2,-6364
   12514:	10800017 	ldw	r2,0(r2)
   12518:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1251c:	008000b4 	movhi	r2,2
   12520:	10b9c904 	addi	r2,r2,-6364
   12524:	10800017 	ldw	r2,0(r2)
   12528:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1252c:	008000b4 	movhi	r2,2
   12530:	10b9c904 	addi	r2,r2,-6364
   12534:	10800017 	ldw	r2,0(r2)
   12538:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1253c:	008000b4 	movhi	r2,2
   12540:	10b9c904 	addi	r2,r2,-6364
   12544:	10800017 	ldw	r2,0(r2)
   12548:	10000915 	stw	zero,36(r2)
   1254c:	e0bff617 	ldw	r2,-40(fp)
   12550:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12554:	e0bffc17 	ldw	r2,-16(fp)
   12558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1255c:	e0bff517 	ldw	r2,-44(fp)
}
   12560:	e037883a 	mov	sp,fp
   12564:	dfc00117 	ldw	ra,4(sp)
   12568:	df000017 	ldw	fp,0(sp)
   1256c:	dec00204 	addi	sp,sp,8
   12570:	f800283a 	ret

00012574 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12574:	defff604 	addi	sp,sp,-40
   12578:	dfc00915 	stw	ra,36(sp)
   1257c:	df000815 	stw	fp,32(sp)
   12580:	df000804 	addi	fp,sp,32
   12584:	e13ffd15 	stw	r4,-12(fp)
   12588:	2805883a 	mov	r2,r5
   1258c:	e1bfff15 	stw	r6,-4(fp)
   12590:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12594:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12598:	e0bfff17 	ldw	r2,-4(fp)
   1259c:	1000021e 	bne	r2,zero,125a8 <OSQPendAbort+0x34>
        return (0);
   125a0:	0005883a 	mov	r2,zero
   125a4:	00004906 	br	126cc <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   125a8:	e0bffd17 	ldw	r2,-12(fp)
   125ac:	1000051e 	bne	r2,zero,125c4 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   125b0:	e0bfff17 	ldw	r2,-4(fp)
   125b4:	00c00104 	movi	r3,4
   125b8:	10c00005 	stb	r3,0(r2)
        return (0);
   125bc:	0005883a 	mov	r2,zero
   125c0:	00004206 	br	126cc <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   125c4:	e0bffd17 	ldw	r2,-12(fp)
   125c8:	10800003 	ldbu	r2,0(r2)
   125cc:	10803fcc 	andi	r2,r2,255
   125d0:	108000a0 	cmpeqi	r2,r2,2
   125d4:	1000051e 	bne	r2,zero,125ec <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   125d8:	e0bfff17 	ldw	r2,-4(fp)
   125dc:	00c00044 	movi	r3,1
   125e0:	10c00005 	stb	r3,0(r2)
        return (0);
   125e4:	0005883a 	mov	r2,zero
   125e8:	00003806 	br	126cc <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125ec:	0005303a 	rdctl	r2,status
   125f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125f4:	e0fffa17 	ldw	r3,-24(fp)
   125f8:	00bfff84 	movi	r2,-2
   125fc:	1884703a 	and	r2,r3,r2
   12600:	1001703a 	wrctl	status,r2
  
  return context;
   12604:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12608:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1260c:	e0bffd17 	ldw	r2,-12(fp)
   12610:	10800283 	ldbu	r2,10(r2)
   12614:	10803fcc 	andi	r2,r2,255
   12618:	10002526 	beq	r2,zero,126b0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1261c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12620:	e0bffe03 	ldbu	r2,-8(fp)
   12624:	10800060 	cmpeqi	r2,r2,1
   12628:	10000e26 	beq	r2,zero,12664 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1262c:	00000806 	br	12650 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12630:	e13ffd17 	ldw	r4,-12(fp)
   12634:	000b883a 	mov	r5,zero
   12638:	01800104 	movi	r6,4
   1263c:	01c00084 	movi	r7,2
   12640:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   12644:	e0bff803 	ldbu	r2,-32(fp)
   12648:	10800044 	addi	r2,r2,1
   1264c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12650:	e0bffd17 	ldw	r2,-12(fp)
   12654:	10800283 	ldbu	r2,10(r2)
   12658:	10803fcc 	andi	r2,r2,255
   1265c:	103ff41e 	bne	r2,zero,12630 <__alt_mem_Flash_flash_data+0xf4012630>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12660:	00000906 	br	12688 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12664:	e13ffd17 	ldw	r4,-12(fp)
   12668:	000b883a 	mov	r5,zero
   1266c:	01800104 	movi	r6,4
   12670:	01c00084 	movi	r7,2
   12674:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   12678:	e0bff803 	ldbu	r2,-32(fp)
   1267c:	10800044 	addi	r2,r2,1
   12680:	e0bff805 	stb	r2,-32(fp)
                 break;
   12684:	0001883a 	nop
   12688:	e0bff917 	ldw	r2,-28(fp)
   1268c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12690:	e0bffb17 	ldw	r2,-20(fp)
   12694:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12698:	000f3b80 	call	f3b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1269c:	e0bfff17 	ldw	r2,-4(fp)
   126a0:	00c00384 	movi	r3,14
   126a4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   126a8:	e0bff803 	ldbu	r2,-32(fp)
   126ac:	00000706 	br	126cc <OSQPendAbort+0x158>
   126b0:	e0bff917 	ldw	r2,-28(fp)
   126b4:	e0bffc15 	stw	r2,-16(fp)
   126b8:	e0bffc17 	ldw	r2,-16(fp)
   126bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   126c0:	e0bfff17 	ldw	r2,-4(fp)
   126c4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   126c8:	0005883a 	mov	r2,zero
}
   126cc:	e037883a 	mov	sp,fp
   126d0:	dfc00117 	ldw	ra,4(sp)
   126d4:	df000017 	ldw	fp,0(sp)
   126d8:	dec00204 	addi	sp,sp,8
   126dc:	f800283a 	ret

000126e0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   126e0:	defff604 	addi	sp,sp,-40
   126e4:	dfc00915 	stw	ra,36(sp)
   126e8:	df000815 	stw	fp,32(sp)
   126ec:	df000804 	addi	fp,sp,32
   126f0:	e13ffe15 	stw	r4,-8(fp)
   126f4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   126f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   126fc:	e0bffe17 	ldw	r2,-8(fp)
   12700:	1000021e 	bne	r2,zero,1270c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12704:	00800104 	movi	r2,4
   12708:	00004a06 	br	12834 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1270c:	e0bffe17 	ldw	r2,-8(fp)
   12710:	10800003 	ldbu	r2,0(r2)
   12714:	10803fcc 	andi	r2,r2,255
   12718:	108000a0 	cmpeqi	r2,r2,2
   1271c:	1000021e 	bne	r2,zero,12728 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12720:	00800044 	movi	r2,1
   12724:	00004306 	br	12834 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12728:	0005303a 	rdctl	r2,status
   1272c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12730:	e0fffa17 	ldw	r3,-24(fp)
   12734:	00bfff84 	movi	r2,-2
   12738:	1884703a 	and	r2,r3,r2
   1273c:	1001703a 	wrctl	status,r2
  
  return context;
   12740:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12744:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12748:	e0bffe17 	ldw	r2,-8(fp)
   1274c:	10800283 	ldbu	r2,10(r2)
   12750:	10803fcc 	andi	r2,r2,255
   12754:	10000c26 	beq	r2,zero,12788 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12758:	e13ffe17 	ldw	r4,-8(fp)
   1275c:	e17fff17 	ldw	r5,-4(fp)
   12760:	01800104 	movi	r6,4
   12764:	000f883a 	mov	r7,zero
   12768:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
   1276c:	e0bff817 	ldw	r2,-32(fp)
   12770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12774:	e0bffb17 	ldw	r2,-20(fp)
   12778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1277c:	000f3b80 	call	f3b8 <OS_Sched>
        return (OS_ERR_NONE);
   12780:	0005883a 	mov	r2,zero
   12784:	00002b06 	br	12834 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12788:	e0bffe17 	ldw	r2,-8(fp)
   1278c:	10800117 	ldw	r2,4(r2)
   12790:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12794:	e0bff917 	ldw	r2,-28(fp)
   12798:	10c0058b 	ldhu	r3,22(r2)
   1279c:	e0bff917 	ldw	r2,-28(fp)
   127a0:	1080050b 	ldhu	r2,20(r2)
   127a4:	18ffffcc 	andi	r3,r3,65535
   127a8:	10bfffcc 	andi	r2,r2,65535
   127ac:	18800636 	bltu	r3,r2,127c8 <OSQPost+0xe8>
   127b0:	e0bff817 	ldw	r2,-32(fp)
   127b4:	e0bffc15 	stw	r2,-16(fp)
   127b8:	e0bffc17 	ldw	r2,-16(fp)
   127bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   127c0:	00800784 	movi	r2,30
   127c4:	00001b06 	br	12834 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   127c8:	e0bff917 	ldw	r2,-28(fp)
   127cc:	10800317 	ldw	r2,12(r2)
   127d0:	11000104 	addi	r4,r2,4
   127d4:	e0fff917 	ldw	r3,-28(fp)
   127d8:	19000315 	stw	r4,12(r3)
   127dc:	e0ffff17 	ldw	r3,-4(fp)
   127e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   127e4:	e0bff917 	ldw	r2,-28(fp)
   127e8:	1080058b 	ldhu	r2,22(r2)
   127ec:	10800044 	addi	r2,r2,1
   127f0:	1007883a 	mov	r3,r2
   127f4:	e0bff917 	ldw	r2,-28(fp)
   127f8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   127fc:	e0bff917 	ldw	r2,-28(fp)
   12800:	10c00317 	ldw	r3,12(r2)
   12804:	e0bff917 	ldw	r2,-28(fp)
   12808:	10800217 	ldw	r2,8(r2)
   1280c:	1880041e 	bne	r3,r2,12820 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12810:	e0bff917 	ldw	r2,-28(fp)
   12814:	10c00117 	ldw	r3,4(r2)
   12818:	e0bff917 	ldw	r2,-28(fp)
   1281c:	10c00315 	stw	r3,12(r2)
   12820:	e0bff817 	ldw	r2,-32(fp)
   12824:	e0bffd15 	stw	r2,-12(fp)
   12828:	e0bffd17 	ldw	r2,-12(fp)
   1282c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12830:	0005883a 	mov	r2,zero
}
   12834:	e037883a 	mov	sp,fp
   12838:	dfc00117 	ldw	ra,4(sp)
   1283c:	df000017 	ldw	fp,0(sp)
   12840:	dec00204 	addi	sp,sp,8
   12844:	f800283a 	ret

00012848 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12848:	defff604 	addi	sp,sp,-40
   1284c:	dfc00915 	stw	ra,36(sp)
   12850:	df000815 	stw	fp,32(sp)
   12854:	df000804 	addi	fp,sp,32
   12858:	e13ffe15 	stw	r4,-8(fp)
   1285c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12860:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12864:	e0bffe17 	ldw	r2,-8(fp)
   12868:	1000021e 	bne	r2,zero,12874 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1286c:	00800104 	movi	r2,4
   12870:	00004c06 	br	129a4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12874:	e0bffe17 	ldw	r2,-8(fp)
   12878:	10800003 	ldbu	r2,0(r2)
   1287c:	10803fcc 	andi	r2,r2,255
   12880:	108000a0 	cmpeqi	r2,r2,2
   12884:	1000021e 	bne	r2,zero,12890 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12888:	00800044 	movi	r2,1
   1288c:	00004506 	br	129a4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12890:	0005303a 	rdctl	r2,status
   12894:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12898:	e0fffa17 	ldw	r3,-24(fp)
   1289c:	00bfff84 	movi	r2,-2
   128a0:	1884703a 	and	r2,r3,r2
   128a4:	1001703a 	wrctl	status,r2
  
  return context;
   128a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   128ac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   128b0:	e0bffe17 	ldw	r2,-8(fp)
   128b4:	10800283 	ldbu	r2,10(r2)
   128b8:	10803fcc 	andi	r2,r2,255
   128bc:	10000c26 	beq	r2,zero,128f0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   128c0:	e13ffe17 	ldw	r4,-8(fp)
   128c4:	e17fff17 	ldw	r5,-4(fp)
   128c8:	01800104 	movi	r6,4
   128cc:	000f883a 	mov	r7,zero
   128d0:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
   128d4:	e0bff817 	ldw	r2,-32(fp)
   128d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128dc:	e0bffb17 	ldw	r2,-20(fp)
   128e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   128e4:	000f3b80 	call	f3b8 <OS_Sched>
        return (OS_ERR_NONE);
   128e8:	0005883a 	mov	r2,zero
   128ec:	00002d06 	br	129a4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   128f0:	e0bffe17 	ldw	r2,-8(fp)
   128f4:	10800117 	ldw	r2,4(r2)
   128f8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   128fc:	e0bff917 	ldw	r2,-28(fp)
   12900:	10c0058b 	ldhu	r3,22(r2)
   12904:	e0bff917 	ldw	r2,-28(fp)
   12908:	1080050b 	ldhu	r2,20(r2)
   1290c:	18ffffcc 	andi	r3,r3,65535
   12910:	10bfffcc 	andi	r2,r2,65535
   12914:	18800636 	bltu	r3,r2,12930 <OSQPostFront+0xe8>
   12918:	e0bff817 	ldw	r2,-32(fp)
   1291c:	e0bffc15 	stw	r2,-16(fp)
   12920:	e0bffc17 	ldw	r2,-16(fp)
   12924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12928:	00800784 	movi	r2,30
   1292c:	00001d06 	br	129a4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12930:	e0bff917 	ldw	r2,-28(fp)
   12934:	10c00417 	ldw	r3,16(r2)
   12938:	e0bff917 	ldw	r2,-28(fp)
   1293c:	10800117 	ldw	r2,4(r2)
   12940:	1880041e 	bne	r3,r2,12954 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12944:	e0bff917 	ldw	r2,-28(fp)
   12948:	10c00217 	ldw	r3,8(r2)
   1294c:	e0bff917 	ldw	r2,-28(fp)
   12950:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12954:	e0bff917 	ldw	r2,-28(fp)
   12958:	10800417 	ldw	r2,16(r2)
   1295c:	10ffff04 	addi	r3,r2,-4
   12960:	e0bff917 	ldw	r2,-28(fp)
   12964:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12968:	e0bff917 	ldw	r2,-28(fp)
   1296c:	10800417 	ldw	r2,16(r2)
   12970:	e0ffff17 	ldw	r3,-4(fp)
   12974:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12978:	e0bff917 	ldw	r2,-28(fp)
   1297c:	1080058b 	ldhu	r2,22(r2)
   12980:	10800044 	addi	r2,r2,1
   12984:	1007883a 	mov	r3,r2
   12988:	e0bff917 	ldw	r2,-28(fp)
   1298c:	10c0058d 	sth	r3,22(r2)
   12990:	e0bff817 	ldw	r2,-32(fp)
   12994:	e0bffd15 	stw	r2,-12(fp)
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   129a0:	0005883a 	mov	r2,zero
}
   129a4:	e037883a 	mov	sp,fp
   129a8:	dfc00117 	ldw	ra,4(sp)
   129ac:	df000017 	ldw	fp,0(sp)
   129b0:	dec00204 	addi	sp,sp,8
   129b4:	f800283a 	ret

000129b8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   129b8:	defff504 	addi	sp,sp,-44
   129bc:	dfc00a15 	stw	ra,40(sp)
   129c0:	df000915 	stw	fp,36(sp)
   129c4:	df000904 	addi	fp,sp,36
   129c8:	e13ffd15 	stw	r4,-12(fp)
   129cc:	e17ffe15 	stw	r5,-8(fp)
   129d0:	3005883a 	mov	r2,r6
   129d4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   129d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   129dc:	e0bffd17 	ldw	r2,-12(fp)
   129e0:	1000021e 	bne	r2,zero,129ec <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   129e4:	00800104 	movi	r2,4
   129e8:	00007106 	br	12bb0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   129ec:	e0bffd17 	ldw	r2,-12(fp)
   129f0:	10800003 	ldbu	r2,0(r2)
   129f4:	10803fcc 	andi	r2,r2,255
   129f8:	108000a0 	cmpeqi	r2,r2,2
   129fc:	1000021e 	bne	r2,zero,12a08 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12a00:	00800044 	movi	r2,1
   12a04:	00006a06 	br	12bb0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a08:	0005303a 	rdctl	r2,status
   12a0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a10:	e0fff917 	ldw	r3,-28(fp)
   12a14:	00bfff84 	movi	r2,-2
   12a18:	1884703a 	and	r2,r3,r2
   12a1c:	1001703a 	wrctl	status,r2
  
  return context;
   12a20:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12a24:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12a28:	e0bffd17 	ldw	r2,-12(fp)
   12a2c:	10800283 	ldbu	r2,10(r2)
   12a30:	10803fcc 	andi	r2,r2,255
   12a34:	10001d26 	beq	r2,zero,12aac <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12a38:	e0bfff03 	ldbu	r2,-4(fp)
   12a3c:	1080004c 	andi	r2,r2,1
   12a40:	10000b26 	beq	r2,zero,12a70 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12a44:	00000506 	br	12a5c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12a48:	e13ffd17 	ldw	r4,-12(fp)
   12a4c:	e17ffe17 	ldw	r5,-8(fp)
   12a50:	01800104 	movi	r6,4
   12a54:	000f883a 	mov	r7,zero
   12a58:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12a5c:	e0bffd17 	ldw	r2,-12(fp)
   12a60:	10800283 	ldbu	r2,10(r2)
   12a64:	10803fcc 	andi	r2,r2,255
   12a68:	103ff71e 	bne	r2,zero,12a48 <__alt_mem_Flash_flash_data+0xf4012a48>
   12a6c:	00000506 	br	12a84 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12a70:	e13ffd17 	ldw	r4,-12(fp)
   12a74:	e17ffe17 	ldw	r5,-8(fp)
   12a78:	01800104 	movi	r6,4
   12a7c:	000f883a 	mov	r7,zero
   12a80:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
   12a84:	e0bff717 	ldw	r2,-36(fp)
   12a88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a8c:	e0bffa17 	ldw	r2,-24(fp)
   12a90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12a94:	e0bfff03 	ldbu	r2,-4(fp)
   12a98:	1080010c 	andi	r2,r2,4
   12a9c:	1000011e 	bne	r2,zero,12aa4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12aa0:	000f3b80 	call	f3b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12aa4:	0005883a 	mov	r2,zero
   12aa8:	00004106 	br	12bb0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12aac:	e0bffd17 	ldw	r2,-12(fp)
   12ab0:	10800117 	ldw	r2,4(r2)
   12ab4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12ab8:	e0bff817 	ldw	r2,-32(fp)
   12abc:	10c0058b 	ldhu	r3,22(r2)
   12ac0:	e0bff817 	ldw	r2,-32(fp)
   12ac4:	1080050b 	ldhu	r2,20(r2)
   12ac8:	18ffffcc 	andi	r3,r3,65535
   12acc:	10bfffcc 	andi	r2,r2,65535
   12ad0:	18800636 	bltu	r3,r2,12aec <OSQPostOpt+0x134>
   12ad4:	e0bff717 	ldw	r2,-36(fp)
   12ad8:	e0bffb15 	stw	r2,-20(fp)
   12adc:	e0bffb17 	ldw	r2,-20(fp)
   12ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12ae4:	00800784 	movi	r2,30
   12ae8:	00003106 	br	12bb0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12aec:	e0bfff03 	ldbu	r2,-4(fp)
   12af0:	1080008c 	andi	r2,r2,2
   12af4:	10001326 	beq	r2,zero,12b44 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12af8:	e0bff817 	ldw	r2,-32(fp)
   12afc:	10c00417 	ldw	r3,16(r2)
   12b00:	e0bff817 	ldw	r2,-32(fp)
   12b04:	10800117 	ldw	r2,4(r2)
   12b08:	1880041e 	bne	r3,r2,12b1c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12b0c:	e0bff817 	ldw	r2,-32(fp)
   12b10:	10c00217 	ldw	r3,8(r2)
   12b14:	e0bff817 	ldw	r2,-32(fp)
   12b18:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12b1c:	e0bff817 	ldw	r2,-32(fp)
   12b20:	10800417 	ldw	r2,16(r2)
   12b24:	10ffff04 	addi	r3,r2,-4
   12b28:	e0bff817 	ldw	r2,-32(fp)
   12b2c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12b30:	e0bff817 	ldw	r2,-32(fp)
   12b34:	10800417 	ldw	r2,16(r2)
   12b38:	e0fffe17 	ldw	r3,-8(fp)
   12b3c:	10c00015 	stw	r3,0(r2)
   12b40:	00001006 	br	12b84 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12b44:	e0bff817 	ldw	r2,-32(fp)
   12b48:	10800317 	ldw	r2,12(r2)
   12b4c:	11000104 	addi	r4,r2,4
   12b50:	e0fff817 	ldw	r3,-32(fp)
   12b54:	19000315 	stw	r4,12(r3)
   12b58:	e0fffe17 	ldw	r3,-8(fp)
   12b5c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12b60:	e0bff817 	ldw	r2,-32(fp)
   12b64:	10c00317 	ldw	r3,12(r2)
   12b68:	e0bff817 	ldw	r2,-32(fp)
   12b6c:	10800217 	ldw	r2,8(r2)
   12b70:	1880041e 	bne	r3,r2,12b84 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12b74:	e0bff817 	ldw	r2,-32(fp)
   12b78:	10c00117 	ldw	r3,4(r2)
   12b7c:	e0bff817 	ldw	r2,-32(fp)
   12b80:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12b84:	e0bff817 	ldw	r2,-32(fp)
   12b88:	1080058b 	ldhu	r2,22(r2)
   12b8c:	10800044 	addi	r2,r2,1
   12b90:	1007883a 	mov	r3,r2
   12b94:	e0bff817 	ldw	r2,-32(fp)
   12b98:	10c0058d 	sth	r3,22(r2)
   12b9c:	e0bff717 	ldw	r2,-36(fp)
   12ba0:	e0bffc15 	stw	r2,-16(fp)
   12ba4:	e0bffc17 	ldw	r2,-16(fp)
   12ba8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12bac:	0005883a 	mov	r2,zero
}
   12bb0:	e037883a 	mov	sp,fp
   12bb4:	dfc00117 	ldw	ra,4(sp)
   12bb8:	df000017 	ldw	fp,0(sp)
   12bbc:	dec00204 	addi	sp,sp,8
   12bc0:	f800283a 	ret

00012bc4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12bc4:	defff604 	addi	sp,sp,-40
   12bc8:	df000915 	stw	fp,36(sp)
   12bcc:	df000904 	addi	fp,sp,36
   12bd0:	e13ffe15 	stw	r4,-8(fp)
   12bd4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12bd8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12bdc:	e0bffe17 	ldw	r2,-8(fp)
   12be0:	1000021e 	bne	r2,zero,12bec <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12be4:	00800104 	movi	r2,4
   12be8:	00004906 	br	12d10 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12bec:	e0bfff17 	ldw	r2,-4(fp)
   12bf0:	1000021e 	bne	r2,zero,12bfc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12bf4:	00800244 	movi	r2,9
   12bf8:	00004506 	br	12d10 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12bfc:	e0bffe17 	ldw	r2,-8(fp)
   12c00:	10800003 	ldbu	r2,0(r2)
   12c04:	10803fcc 	andi	r2,r2,255
   12c08:	108000a0 	cmpeqi	r2,r2,2
   12c0c:	1000021e 	bne	r2,zero,12c18 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12c10:	00800044 	movi	r2,1
   12c14:	00003e06 	br	12d10 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c18:	0005303a 	rdctl	r2,status
   12c1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c20:	e0fffc17 	ldw	r3,-16(fp)
   12c24:	00bfff84 	movi	r2,-2
   12c28:	1884703a 	and	r2,r3,r2
   12c2c:	1001703a 	wrctl	status,r2
  
  return context;
   12c30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12c34:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12c38:	e0bffe17 	ldw	r2,-8(fp)
   12c3c:	10c00283 	ldbu	r3,10(r2)
   12c40:	e0bfff17 	ldw	r2,-4(fp)
   12c44:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12c48:	e0bffe17 	ldw	r2,-8(fp)
   12c4c:	108002c4 	addi	r2,r2,11
   12c50:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12c54:	e0bfff17 	ldw	r2,-4(fp)
   12c58:	10800204 	addi	r2,r2,8
   12c5c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12c60:	e03ff705 	stb	zero,-36(fp)
   12c64:	00000b06 	br	12c94 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12c68:	e0bff917 	ldw	r2,-28(fp)
   12c6c:	10c00044 	addi	r3,r2,1
   12c70:	e0fff915 	stw	r3,-28(fp)
   12c74:	e0fff817 	ldw	r3,-32(fp)
   12c78:	19000044 	addi	r4,r3,1
   12c7c:	e13ff815 	stw	r4,-32(fp)
   12c80:	18c00003 	ldbu	r3,0(r3)
   12c84:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12c88:	e0bff703 	ldbu	r2,-36(fp)
   12c8c:	10800044 	addi	r2,r2,1
   12c90:	e0bff705 	stb	r2,-36(fp)
   12c94:	e0bff703 	ldbu	r2,-36(fp)
   12c98:	108000f0 	cmpltui	r2,r2,3
   12c9c:	103ff21e 	bne	r2,zero,12c68 <__alt_mem_Flash_flash_data+0xf4012c68>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12ca0:	e0bffe17 	ldw	r2,-8(fp)
   12ca4:	10800117 	ldw	r2,4(r2)
   12ca8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   12cac:	e0bffb17 	ldw	r2,-20(fp)
   12cb0:	1080058b 	ldhu	r2,22(r2)
   12cb4:	10bfffcc 	andi	r2,r2,65535
   12cb8:	10000626 	beq	r2,zero,12cd4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12cbc:	e0bffb17 	ldw	r2,-20(fp)
   12cc0:	10800417 	ldw	r2,16(r2)
   12cc4:	10c00017 	ldw	r3,0(r2)
   12cc8:	e0bfff17 	ldw	r2,-4(fp)
   12ccc:	10c00015 	stw	r3,0(r2)
   12cd0:	00000206 	br	12cdc <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12cd4:	e0bfff17 	ldw	r2,-4(fp)
   12cd8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12cdc:	e0bffb17 	ldw	r2,-20(fp)
   12ce0:	10c0058b 	ldhu	r3,22(r2)
   12ce4:	e0bfff17 	ldw	r2,-4(fp)
   12ce8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12cec:	e0bffb17 	ldw	r2,-20(fp)
   12cf0:	10c0050b 	ldhu	r3,20(r2)
   12cf4:	e0bfff17 	ldw	r2,-4(fp)
   12cf8:	10c0018d 	sth	r3,6(r2)
   12cfc:	e0bffa17 	ldw	r2,-24(fp)
   12d00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d04:	e0bffd17 	ldw	r2,-12(fp)
   12d08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12d0c:	0005883a 	mov	r2,zero
}
   12d10:	e037883a 	mov	sp,fp
   12d14:	df000017 	ldw	fp,0(sp)
   12d18:	dec00104 	addi	sp,sp,4
   12d1c:	f800283a 	ret

00012d20 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12d20:	defffb04 	addi	sp,sp,-20
   12d24:	dfc00415 	stw	ra,16(sp)
   12d28:	df000315 	stw	fp,12(sp)
   12d2c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12d30:	010000b4 	movhi	r4,2
   12d34:	210fcf04 	addi	r4,r4,16188
   12d38:	01407804 	movi	r5,480
   12d3c:	000f3040 	call	f304 <OS_MemClr>
    pq1 = &OSQTbl[0];
   12d40:	008000b4 	movhi	r2,2
   12d44:	108fcf04 	addi	r2,r2,16188
   12d48:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12d4c:	008000b4 	movhi	r2,2
   12d50:	108fd504 	addi	r2,r2,16212
   12d54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12d58:	e03ffd0d 	sth	zero,-12(fp)
   12d5c:	00000c06 	br	12d90 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12d60:	e0bffe17 	ldw	r2,-8(fp)
   12d64:	e0ffff17 	ldw	r3,-4(fp)
   12d68:	10c00015 	stw	r3,0(r2)
        pq1++;
   12d6c:	e0bffe17 	ldw	r2,-8(fp)
   12d70:	10800604 	addi	r2,r2,24
   12d74:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12d78:	e0bfff17 	ldw	r2,-4(fp)
   12d7c:	10800604 	addi	r2,r2,24
   12d80:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12d84:	e0bffd0b 	ldhu	r2,-12(fp)
   12d88:	10800044 	addi	r2,r2,1
   12d8c:	e0bffd0d 	sth	r2,-12(fp)
   12d90:	e0bffd0b 	ldhu	r2,-12(fp)
   12d94:	108004f0 	cmpltui	r2,r2,19
   12d98:	103ff11e 	bne	r2,zero,12d60 <__alt_mem_Flash_flash_data+0xf4012d60>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12d9c:	e0bffe17 	ldw	r2,-8(fp)
   12da0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12da4:	008000b4 	movhi	r2,2
   12da8:	10b9c504 	addi	r2,r2,-6380
   12dac:	00c000b4 	movhi	r3,2
   12db0:	18cfcf04 	addi	r3,r3,16188
   12db4:	10c00015 	stw	r3,0(r2)
#endif
}
   12db8:	e037883a 	mov	sp,fp
   12dbc:	dfc00117 	ldw	ra,4(sp)
   12dc0:	df000017 	ldw	fp,0(sp)
   12dc4:	dec00204 	addi	sp,sp,8
   12dc8:	f800283a 	ret

00012dcc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12dcc:	defffa04 	addi	sp,sp,-24
   12dd0:	df000515 	stw	fp,20(sp)
   12dd4:	df000504 	addi	fp,sp,20
   12dd8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ddc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12de0:	e0bfff17 	ldw	r2,-4(fp)
   12de4:	1000021e 	bne	r2,zero,12df0 <OSSemAccept+0x24>
        return (0);
   12de8:	0005883a 	mov	r2,zero
   12dec:	00001f06 	br	12e6c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12df0:	e0bfff17 	ldw	r2,-4(fp)
   12df4:	10800003 	ldbu	r2,0(r2)
   12df8:	10803fcc 	andi	r2,r2,255
   12dfc:	108000e0 	cmpeqi	r2,r2,3
   12e00:	1000021e 	bne	r2,zero,12e0c <OSSemAccept+0x40>
        return (0);
   12e04:	0005883a 	mov	r2,zero
   12e08:	00001806 	br	12e6c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e0c:	0005303a 	rdctl	r2,status
   12e10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e14:	e0fffd17 	ldw	r3,-12(fp)
   12e18:	00bfff84 	movi	r2,-2
   12e1c:	1884703a 	and	r2,r3,r2
   12e20:	1001703a 	wrctl	status,r2
  
  return context;
   12e24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12e28:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12e2c:	e0bfff17 	ldw	r2,-4(fp)
   12e30:	1080020b 	ldhu	r2,8(r2)
   12e34:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   12e38:	e0bffc0b 	ldhu	r2,-16(fp)
   12e3c:	10000626 	beq	r2,zero,12e58 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   12e40:	e0bfff17 	ldw	r2,-4(fp)
   12e44:	1080020b 	ldhu	r2,8(r2)
   12e48:	10bfffc4 	addi	r2,r2,-1
   12e4c:	1007883a 	mov	r3,r2
   12e50:	e0bfff17 	ldw	r2,-4(fp)
   12e54:	10c0020d 	sth	r3,8(r2)
   12e58:	e0bffb17 	ldw	r2,-20(fp)
   12e5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e60:	e0bffe17 	ldw	r2,-8(fp)
   12e64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   12e68:	e0bffc0b 	ldhu	r2,-16(fp)
}
   12e6c:	e037883a 	mov	sp,fp
   12e70:	df000017 	ldw	fp,0(sp)
   12e74:	dec00104 	addi	sp,sp,4
   12e78:	f800283a 	ret

00012e7c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   12e7c:	defff904 	addi	sp,sp,-28
   12e80:	dfc00615 	stw	ra,24(sp)
   12e84:	df000515 	stw	fp,20(sp)
   12e88:	df000504 	addi	fp,sp,20
   12e8c:	2005883a 	mov	r2,r4
   12e90:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12e94:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12e98:	008000b4 	movhi	r2,2
   12e9c:	10b9c804 	addi	r2,r2,-6368
   12ea0:	10800003 	ldbu	r2,0(r2)
   12ea4:	10803fcc 	andi	r2,r2,255
   12ea8:	10000226 	beq	r2,zero,12eb4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12eac:	0005883a 	mov	r2,zero
   12eb0:	00002d06 	br	12f68 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12eb4:	0005303a 	rdctl	r2,status
   12eb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ebc:	e0fffd17 	ldw	r3,-12(fp)
   12ec0:	00bfff84 	movi	r2,-2
   12ec4:	1884703a 	and	r2,r3,r2
   12ec8:	1001703a 	wrctl	status,r2
  
  return context;
   12ecc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12ed0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12ed4:	008000b4 	movhi	r2,2
   12ed8:	10b9c704 	addi	r2,r2,-6372
   12edc:	10800017 	ldw	r2,0(r2)
   12ee0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12ee4:	008000b4 	movhi	r2,2
   12ee8:	10b9c704 	addi	r2,r2,-6372
   12eec:	10800017 	ldw	r2,0(r2)
   12ef0:	10000726 	beq	r2,zero,12f10 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12ef4:	008000b4 	movhi	r2,2
   12ef8:	10b9c704 	addi	r2,r2,-6372
   12efc:	10800017 	ldw	r2,0(r2)
   12f00:	10c00117 	ldw	r3,4(r2)
   12f04:	008000b4 	movhi	r2,2
   12f08:	10b9c704 	addi	r2,r2,-6372
   12f0c:	10c00015 	stw	r3,0(r2)
   12f10:	e0bffb17 	ldw	r2,-20(fp)
   12f14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f18:	e0bffe17 	ldw	r2,-8(fp)
   12f1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   12f20:	e0bffc17 	ldw	r2,-16(fp)
   12f24:	10000f26 	beq	r2,zero,12f64 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	00c000c4 	movi	r3,3
   12f30:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   12f34:	e0bffc17 	ldw	r2,-16(fp)
   12f38:	e0ffff0b 	ldhu	r3,-4(fp)
   12f3c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   12f40:	e0bffc17 	ldw	r2,-16(fp)
   12f44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   12f48:	e0bffc17 	ldw	r2,-16(fp)
   12f4c:	00c00fc4 	movi	r3,63
   12f50:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12f54:	e0bffc17 	ldw	r2,-16(fp)
   12f58:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   12f5c:	e13ffc17 	ldw	r4,-16(fp)
   12f60:	000ef400 	call	ef40 <OS_EventWaitListInit>
    }
    return (pevent);
   12f64:	e0bffc17 	ldw	r2,-16(fp)
}
   12f68:	e037883a 	mov	sp,fp
   12f6c:	dfc00117 	ldw	ra,4(sp)
   12f70:	df000017 	ldw	fp,0(sp)
   12f74:	dec00204 	addi	sp,sp,8
   12f78:	f800283a 	ret

00012f7c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12f7c:	defff304 	addi	sp,sp,-52
   12f80:	dfc00c15 	stw	ra,48(sp)
   12f84:	df000b15 	stw	fp,44(sp)
   12f88:	df000b04 	addi	fp,sp,44
   12f8c:	e13ffd15 	stw	r4,-12(fp)
   12f90:	2805883a 	mov	r2,r5
   12f94:	e1bfff15 	stw	r6,-4(fp)
   12f98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12f9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12fa0:	e0bfff17 	ldw	r2,-4(fp)
   12fa4:	1000021e 	bne	r2,zero,12fb0 <OSSemDel+0x34>
        return (pevent);
   12fa8:	e0bffd17 	ldw	r2,-12(fp)
   12fac:	00008806 	br	131d0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12fb0:	e0bffd17 	ldw	r2,-12(fp)
   12fb4:	1000051e 	bne	r2,zero,12fcc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12fb8:	e0bfff17 	ldw	r2,-4(fp)
   12fbc:	00c00104 	movi	r3,4
   12fc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12fc4:	e0bffd17 	ldw	r2,-12(fp)
   12fc8:	00008106 	br	131d0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12fcc:	e0bffd17 	ldw	r2,-12(fp)
   12fd0:	10800003 	ldbu	r2,0(r2)
   12fd4:	10803fcc 	andi	r2,r2,255
   12fd8:	108000e0 	cmpeqi	r2,r2,3
   12fdc:	1000051e 	bne	r2,zero,12ff4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12fe0:	e0bfff17 	ldw	r2,-4(fp)
   12fe4:	00c00044 	movi	r3,1
   12fe8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12fec:	e0bffd17 	ldw	r2,-12(fp)
   12ff0:	00007706 	br	131d0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12ff4:	008000b4 	movhi	r2,2
   12ff8:	10b9c804 	addi	r2,r2,-6368
   12ffc:	10800003 	ldbu	r2,0(r2)
   13000:	10803fcc 	andi	r2,r2,255
   13004:	10000526 	beq	r2,zero,1301c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13008:	e0bfff17 	ldw	r2,-4(fp)
   1300c:	00c003c4 	movi	r3,15
   13010:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13014:	e0bffd17 	ldw	r2,-12(fp)
   13018:	00006d06 	br	131d0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1301c:	0005303a 	rdctl	r2,status
   13020:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13024:	e0fff817 	ldw	r3,-32(fp)
   13028:	00bfff84 	movi	r2,-2
   1302c:	1884703a 	and	r2,r3,r2
   13030:	1001703a 	wrctl	status,r2
  
  return context;
   13034:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13038:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1303c:	e0bffd17 	ldw	r2,-12(fp)
   13040:	10800283 	ldbu	r2,10(r2)
   13044:	10803fcc 	andi	r2,r2,255
   13048:	10000326 	beq	r2,zero,13058 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1304c:	00800044 	movi	r2,1
   13050:	e0bff505 	stb	r2,-44(fp)
   13054:	00000106 	br	1305c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13058:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1305c:	e0bffe03 	ldbu	r2,-8(fp)
   13060:	10000326 	beq	r2,zero,13070 <OSSemDel+0xf4>
   13064:	10800060 	cmpeqi	r2,r2,1
   13068:	10002c1e 	bne	r2,zero,1311c <OSSemDel+0x1a0>
   1306c:	00004d06 	br	131a4 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13070:	e0bff503 	ldbu	r2,-44(fp)
   13074:	10001a1e 	bne	r2,zero,130e0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13078:	e0bffd17 	ldw	r2,-12(fp)
   1307c:	00c00fc4 	movi	r3,63
   13080:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13084:	e0bffd17 	ldw	r2,-12(fp)
   13088:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1308c:	e0bffd17 	ldw	r2,-12(fp)
   13090:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13094:	008000b4 	movhi	r2,2
   13098:	10b9c704 	addi	r2,r2,-6372
   1309c:	10c00017 	ldw	r3,0(r2)
   130a0:	e0bffd17 	ldw	r2,-12(fp)
   130a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   130a8:	e0bffd17 	ldw	r2,-12(fp)
   130ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   130b0:	008000b4 	movhi	r2,2
   130b4:	10b9c704 	addi	r2,r2,-6372
   130b8:	e0fffd17 	ldw	r3,-12(fp)
   130bc:	10c00015 	stw	r3,0(r2)
   130c0:	e0bff717 	ldw	r2,-36(fp)
   130c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130c8:	e0bff917 	ldw	r2,-28(fp)
   130cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   130d0:	e0bfff17 	ldw	r2,-4(fp)
   130d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   130d8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   130dc:	00003b06 	br	131cc <OSSemDel+0x250>
   130e0:	e0bff717 	ldw	r2,-36(fp)
   130e4:	e0bffa15 	stw	r2,-24(fp)
   130e8:	e0bffa17 	ldw	r2,-24(fp)
   130ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   130f0:	e0bfff17 	ldw	r2,-4(fp)
   130f4:	00c01244 	movi	r3,73
   130f8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   130fc:	e0bffd17 	ldw	r2,-12(fp)
   13100:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13104:	00003106 	br	131cc <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13108:	e13ffd17 	ldw	r4,-12(fp)
   1310c:	000b883a 	mov	r5,zero
   13110:	01800044 	movi	r6,1
   13114:	000f883a 	mov	r7,zero
   13118:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1311c:	e0bffd17 	ldw	r2,-12(fp)
   13120:	10800283 	ldbu	r2,10(r2)
   13124:	10803fcc 	andi	r2,r2,255
   13128:	103ff71e 	bne	r2,zero,13108 <__alt_mem_Flash_flash_data+0xf4013108>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1312c:	e0bffd17 	ldw	r2,-12(fp)
   13130:	00c00fc4 	movi	r3,63
   13134:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13138:	e0bffd17 	ldw	r2,-12(fp)
   1313c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13140:	e0bffd17 	ldw	r2,-12(fp)
   13144:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13148:	008000b4 	movhi	r2,2
   1314c:	10b9c704 	addi	r2,r2,-6372
   13150:	10c00017 	ldw	r3,0(r2)
   13154:	e0bffd17 	ldw	r2,-12(fp)
   13158:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1315c:	e0bffd17 	ldw	r2,-12(fp)
   13160:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13164:	008000b4 	movhi	r2,2
   13168:	10b9c704 	addi	r2,r2,-6372
   1316c:	e0fffd17 	ldw	r3,-12(fp)
   13170:	10c00015 	stw	r3,0(r2)
   13174:	e0bff717 	ldw	r2,-36(fp)
   13178:	e0bffb15 	stw	r2,-20(fp)
   1317c:	e0bffb17 	ldw	r2,-20(fp)
   13180:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13184:	e0bff503 	ldbu	r2,-44(fp)
   13188:	10800058 	cmpnei	r2,r2,1
   1318c:	1000011e 	bne	r2,zero,13194 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13190:	000f3b80 	call	f3b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13194:	e0bfff17 	ldw	r2,-4(fp)
   13198:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1319c:	e03ff615 	stw	zero,-40(fp)
             break;
   131a0:	00000a06 	br	131cc <OSSemDel+0x250>
   131a4:	e0bff717 	ldw	r2,-36(fp)
   131a8:	e0bffc15 	stw	r2,-16(fp)
   131ac:	e0bffc17 	ldw	r2,-16(fp)
   131b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   131b4:	e0bfff17 	ldw	r2,-4(fp)
   131b8:	00c001c4 	movi	r3,7
   131bc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   131c0:	e0bffd17 	ldw	r2,-12(fp)
   131c4:	e0bff615 	stw	r2,-40(fp)
             break;
   131c8:	0001883a 	nop
    }
    return (pevent_return);
   131cc:	e0bff617 	ldw	r2,-40(fp)
}
   131d0:	e037883a 	mov	sp,fp
   131d4:	dfc00117 	ldw	ra,4(sp)
   131d8:	df000017 	ldw	fp,0(sp)
   131dc:	dec00204 	addi	sp,sp,8
   131e0:	f800283a 	ret

000131e4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   131e4:	defff504 	addi	sp,sp,-44
   131e8:	dfc00a15 	stw	ra,40(sp)
   131ec:	df000915 	stw	fp,36(sp)
   131f0:	df000904 	addi	fp,sp,36
   131f4:	e13ffd15 	stw	r4,-12(fp)
   131f8:	2805883a 	mov	r2,r5
   131fc:	e1bfff15 	stw	r6,-4(fp)
   13200:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13204:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13208:	e0bfff17 	ldw	r2,-4(fp)
   1320c:	1000011e 	bne	r2,zero,13214 <OSSemPend+0x30>
        return;
   13210:	00008906 	br	13438 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	1000041e 	bne	r2,zero,1322c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1321c:	e0bfff17 	ldw	r2,-4(fp)
   13220:	00c00104 	movi	r3,4
   13224:	10c00005 	stb	r3,0(r2)
        return;
   13228:	00008306 	br	13438 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1322c:	e0bffd17 	ldw	r2,-12(fp)
   13230:	10800003 	ldbu	r2,0(r2)
   13234:	10803fcc 	andi	r2,r2,255
   13238:	108000e0 	cmpeqi	r2,r2,3
   1323c:	1000041e 	bne	r2,zero,13250 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	00c00044 	movi	r3,1
   13248:	10c00005 	stb	r3,0(r2)
        return;
   1324c:	00007a06 	br	13438 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13250:	008000b4 	movhi	r2,2
   13254:	10b9c804 	addi	r2,r2,-6368
   13258:	10800003 	ldbu	r2,0(r2)
   1325c:	10803fcc 	andi	r2,r2,255
   13260:	10000426 	beq	r2,zero,13274 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13264:	e0bfff17 	ldw	r2,-4(fp)
   13268:	00c00084 	movi	r3,2
   1326c:	10c00005 	stb	r3,0(r2)
        return;
   13270:	00007106 	br	13438 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13274:	008000b4 	movhi	r2,2
   13278:	10b9ba04 	addi	r2,r2,-6424
   1327c:	10800003 	ldbu	r2,0(r2)
   13280:	10803fcc 	andi	r2,r2,255
   13284:	10000426 	beq	r2,zero,13298 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13288:	e0bfff17 	ldw	r2,-4(fp)
   1328c:	00c00344 	movi	r3,13
   13290:	10c00005 	stb	r3,0(r2)
        return;
   13294:	00006806 	br	13438 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13298:	0005303a 	rdctl	r2,status
   1329c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132a0:	e0fff817 	ldw	r3,-32(fp)
   132a4:	00bfff84 	movi	r2,-2
   132a8:	1884703a 	and	r2,r3,r2
   132ac:	1001703a 	wrctl	status,r2
  
  return context;
   132b0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   132b4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	1080020b 	ldhu	r2,8(r2)
   132c0:	10bfffcc 	andi	r2,r2,65535
   132c4:	10000d26 	beq	r2,zero,132fc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   132c8:	e0bffd17 	ldw	r2,-12(fp)
   132cc:	1080020b 	ldhu	r2,8(r2)
   132d0:	10bfffc4 	addi	r2,r2,-1
   132d4:	1007883a 	mov	r3,r2
   132d8:	e0bffd17 	ldw	r2,-12(fp)
   132dc:	10c0020d 	sth	r3,8(r2)
   132e0:	e0bff717 	ldw	r2,-36(fp)
   132e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132e8:	e0bff917 	ldw	r2,-28(fp)
   132ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	10000005 	stb	zero,0(r2)
        return;
   132f8:	00004f06 	br	13438 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   132fc:	008000b4 	movhi	r2,2
   13300:	10b9c904 	addi	r2,r2,-6364
   13304:	10c00017 	ldw	r3,0(r2)
   13308:	008000b4 	movhi	r2,2
   1330c:	10b9c904 	addi	r2,r2,-6364
   13310:	10800017 	ldw	r2,0(r2)
   13314:	10800c03 	ldbu	r2,48(r2)
   13318:	10800054 	ori	r2,r2,1
   1331c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13320:	008000b4 	movhi	r2,2
   13324:	10b9c904 	addi	r2,r2,-6364
   13328:	10800017 	ldw	r2,0(r2)
   1332c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13330:	008000b4 	movhi	r2,2
   13334:	10b9c904 	addi	r2,r2,-6364
   13338:	10800017 	ldw	r2,0(r2)
   1333c:	e0fffe0b 	ldhu	r3,-8(fp)
   13340:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13344:	e13ffd17 	ldw	r4,-12(fp)
   13348:	000eb380 	call	eb38 <OS_EventTaskWait>
   1334c:	e0bff717 	ldw	r2,-36(fp)
   13350:	e0bffa15 	stw	r2,-24(fp)
   13354:	e0bffa17 	ldw	r2,-24(fp)
   13358:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1335c:	000f3b80 	call	f3b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13360:	0005303a 	rdctl	r2,status
   13364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13368:	e0fffb17 	ldw	r3,-20(fp)
   1336c:	00bfff84 	movi	r2,-2
   13370:	1884703a 	and	r2,r3,r2
   13374:	1001703a 	wrctl	status,r2
  
  return context;
   13378:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1337c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13380:	008000b4 	movhi	r2,2
   13384:	10b9c904 	addi	r2,r2,-6364
   13388:	10800017 	ldw	r2,0(r2)
   1338c:	10800c43 	ldbu	r2,49(r2)
   13390:	10803fcc 	andi	r2,r2,255
   13394:	10000326 	beq	r2,zero,133a4 <OSSemPend+0x1c0>
   13398:	108000a0 	cmpeqi	r2,r2,2
   1339c:	1000041e 	bne	r2,zero,133b0 <OSSemPend+0x1cc>
   133a0:	00000706 	br	133c0 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   133a4:	e0bfff17 	ldw	r2,-4(fp)
   133a8:	10000005 	stb	zero,0(r2)
             break;
   133ac:	00000e06 	br	133e8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   133b0:	e0bfff17 	ldw	r2,-4(fp)
   133b4:	00c00384 	movi	r3,14
   133b8:	10c00005 	stb	r3,0(r2)
             break;
   133bc:	00000a06 	br	133e8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   133c0:	008000b4 	movhi	r2,2
   133c4:	10b9c904 	addi	r2,r2,-6364
   133c8:	10800017 	ldw	r2,0(r2)
   133cc:	1009883a 	mov	r4,r2
   133d0:	e17ffd17 	ldw	r5,-12(fp)
   133d4:	000ed900 	call	ed90 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   133d8:	e0bfff17 	ldw	r2,-4(fp)
   133dc:	00c00284 	movi	r3,10
   133e0:	10c00005 	stb	r3,0(r2)
             break;
   133e4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   133e8:	008000b4 	movhi	r2,2
   133ec:	10b9c904 	addi	r2,r2,-6364
   133f0:	10800017 	ldw	r2,0(r2)
   133f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   133f8:	008000b4 	movhi	r2,2
   133fc:	10b9c904 	addi	r2,r2,-6364
   13400:	10800017 	ldw	r2,0(r2)
   13404:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13408:	008000b4 	movhi	r2,2
   1340c:	10b9c904 	addi	r2,r2,-6364
   13410:	10800017 	ldw	r2,0(r2)
   13414:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13418:	008000b4 	movhi	r2,2
   1341c:	10b9c904 	addi	r2,r2,-6364
   13420:	10800017 	ldw	r2,0(r2)
   13424:	10000815 	stw	zero,32(r2)
   13428:	e0bff717 	ldw	r2,-36(fp)
   1342c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13430:	e0bffc17 	ldw	r2,-16(fp)
   13434:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   13438:	e037883a 	mov	sp,fp
   1343c:	dfc00117 	ldw	ra,4(sp)
   13440:	df000017 	ldw	fp,0(sp)
   13444:	dec00204 	addi	sp,sp,8
   13448:	f800283a 	ret

0001344c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1344c:	defff604 	addi	sp,sp,-40
   13450:	dfc00915 	stw	ra,36(sp)
   13454:	df000815 	stw	fp,32(sp)
   13458:	df000804 	addi	fp,sp,32
   1345c:	e13ffd15 	stw	r4,-12(fp)
   13460:	2805883a 	mov	r2,r5
   13464:	e1bfff15 	stw	r6,-4(fp)
   13468:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1346c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13470:	e0bfff17 	ldw	r2,-4(fp)
   13474:	1000021e 	bne	r2,zero,13480 <OSSemPendAbort+0x34>
        return (0);
   13478:	0005883a 	mov	r2,zero
   1347c:	00004906 	br	135a4 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13480:	e0bffd17 	ldw	r2,-12(fp)
   13484:	1000051e 	bne	r2,zero,1349c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13488:	e0bfff17 	ldw	r2,-4(fp)
   1348c:	00c00104 	movi	r3,4
   13490:	10c00005 	stb	r3,0(r2)
        return (0);
   13494:	0005883a 	mov	r2,zero
   13498:	00004206 	br	135a4 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1349c:	e0bffd17 	ldw	r2,-12(fp)
   134a0:	10800003 	ldbu	r2,0(r2)
   134a4:	10803fcc 	andi	r2,r2,255
   134a8:	108000e0 	cmpeqi	r2,r2,3
   134ac:	1000051e 	bne	r2,zero,134c4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   134b0:	e0bfff17 	ldw	r2,-4(fp)
   134b4:	00c00044 	movi	r3,1
   134b8:	10c00005 	stb	r3,0(r2)
        return (0);
   134bc:	0005883a 	mov	r2,zero
   134c0:	00003806 	br	135a4 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134c4:	0005303a 	rdctl	r2,status
   134c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134cc:	e0fffa17 	ldw	r3,-24(fp)
   134d0:	00bfff84 	movi	r2,-2
   134d4:	1884703a 	and	r2,r3,r2
   134d8:	1001703a 	wrctl	status,r2
  
  return context;
   134dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   134e0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   134e4:	e0bffd17 	ldw	r2,-12(fp)
   134e8:	10800283 	ldbu	r2,10(r2)
   134ec:	10803fcc 	andi	r2,r2,255
   134f0:	10002526 	beq	r2,zero,13588 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   134f4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   134f8:	e0bffe03 	ldbu	r2,-8(fp)
   134fc:	10800060 	cmpeqi	r2,r2,1
   13500:	10000e26 	beq	r2,zero,1353c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13504:	00000806 	br	13528 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13508:	e13ffd17 	ldw	r4,-12(fp)
   1350c:	000b883a 	mov	r5,zero
   13510:	01800044 	movi	r6,1
   13514:	01c00084 	movi	r7,2
   13518:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   1351c:	e0bff803 	ldbu	r2,-32(fp)
   13520:	10800044 	addi	r2,r2,1
   13524:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13528:	e0bffd17 	ldw	r2,-12(fp)
   1352c:	10800283 	ldbu	r2,10(r2)
   13530:	10803fcc 	andi	r2,r2,255
   13534:	103ff41e 	bne	r2,zero,13508 <__alt_mem_Flash_flash_data+0xf4013508>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13538:	00000906 	br	13560 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1353c:	e13ffd17 	ldw	r4,-12(fp)
   13540:	000b883a 	mov	r5,zero
   13544:	01800044 	movi	r6,1
   13548:	01c00084 	movi	r7,2
   1354c:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   13550:	e0bff803 	ldbu	r2,-32(fp)
   13554:	10800044 	addi	r2,r2,1
   13558:	e0bff805 	stb	r2,-32(fp)
                 break;
   1355c:	0001883a 	nop
   13560:	e0bff917 	ldw	r2,-28(fp)
   13564:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13568:	e0bffb17 	ldw	r2,-20(fp)
   1356c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13570:	000f3b80 	call	f3b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13574:	e0bfff17 	ldw	r2,-4(fp)
   13578:	00c00384 	movi	r3,14
   1357c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13580:	e0bff803 	ldbu	r2,-32(fp)
   13584:	00000706 	br	135a4 <OSSemPendAbort+0x158>
   13588:	e0bff917 	ldw	r2,-28(fp)
   1358c:	e0bffc15 	stw	r2,-16(fp)
   13590:	e0bffc17 	ldw	r2,-16(fp)
   13594:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13598:	e0bfff17 	ldw	r2,-4(fp)
   1359c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   135a0:	0005883a 	mov	r2,zero
}
   135a4:	e037883a 	mov	sp,fp
   135a8:	dfc00117 	ldw	ra,4(sp)
   135ac:	df000017 	ldw	fp,0(sp)
   135b0:	dec00204 	addi	sp,sp,8
   135b4:	f800283a 	ret

000135b8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   135b8:	defff804 	addi	sp,sp,-32
   135bc:	dfc00715 	stw	ra,28(sp)
   135c0:	df000615 	stw	fp,24(sp)
   135c4:	df000604 	addi	fp,sp,24
   135c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   135cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   135d0:	e0bfff17 	ldw	r2,-4(fp)
   135d4:	1000021e 	bne	r2,zero,135e0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   135d8:	00800104 	movi	r2,4
   135dc:	00003506 	br	136b4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   135e0:	e0bfff17 	ldw	r2,-4(fp)
   135e4:	10800003 	ldbu	r2,0(r2)
   135e8:	10803fcc 	andi	r2,r2,255
   135ec:	108000e0 	cmpeqi	r2,r2,3
   135f0:	1000021e 	bne	r2,zero,135fc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   135f4:	00800044 	movi	r2,1
   135f8:	00002e06 	br	136b4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135fc:	0005303a 	rdctl	r2,status
   13600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13604:	e0fffb17 	ldw	r3,-20(fp)
   13608:	00bfff84 	movi	r2,-2
   1360c:	1884703a 	and	r2,r3,r2
   13610:	1001703a 	wrctl	status,r2
  
  return context;
   13614:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13618:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1361c:	e0bfff17 	ldw	r2,-4(fp)
   13620:	10800283 	ldbu	r2,10(r2)
   13624:	10803fcc 	andi	r2,r2,255
   13628:	10000c26 	beq	r2,zero,1365c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1362c:	e13fff17 	ldw	r4,-4(fp)
   13630:	000b883a 	mov	r5,zero
   13634:	01800044 	movi	r6,1
   13638:	000f883a 	mov	r7,zero
   1363c:	000e9a00 	call	e9a0 <OS_EventTaskRdy>
   13640:	e0bffa17 	ldw	r2,-24(fp)
   13644:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13648:	e0bffc17 	ldw	r2,-16(fp)
   1364c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13650:	000f3b80 	call	f3b8 <OS_Sched>
        return (OS_ERR_NONE);
   13654:	0005883a 	mov	r2,zero
   13658:	00001606 	br	136b4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1365c:	e0bfff17 	ldw	r2,-4(fp)
   13660:	1080020b 	ldhu	r2,8(r2)
   13664:	10ffffcc 	andi	r3,r2,65535
   13668:	00bfffd4 	movui	r2,65535
   1366c:	18800c26 	beq	r3,r2,136a0 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13670:	e0bfff17 	ldw	r2,-4(fp)
   13674:	1080020b 	ldhu	r2,8(r2)
   13678:	10800044 	addi	r2,r2,1
   1367c:	1007883a 	mov	r3,r2
   13680:	e0bfff17 	ldw	r2,-4(fp)
   13684:	10c0020d 	sth	r3,8(r2)
   13688:	e0bffa17 	ldw	r2,-24(fp)
   1368c:	e0bffd15 	stw	r2,-12(fp)
   13690:	e0bffd17 	ldw	r2,-12(fp)
   13694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13698:	0005883a 	mov	r2,zero
   1369c:	00000506 	br	136b4 <OSSemPost+0xfc>
   136a0:	e0bffa17 	ldw	r2,-24(fp)
   136a4:	e0bffe15 	stw	r2,-8(fp)
   136a8:	e0bffe17 	ldw	r2,-8(fp)
   136ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   136b0:	00800c84 	movi	r2,50
}
   136b4:	e037883a 	mov	sp,fp
   136b8:	dfc00117 	ldw	ra,4(sp)
   136bc:	df000017 	ldw	fp,0(sp)
   136c0:	dec00204 	addi	sp,sp,8
   136c4:	f800283a 	ret

000136c8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   136c8:	defff704 	addi	sp,sp,-36
   136cc:	df000815 	stw	fp,32(sp)
   136d0:	df000804 	addi	fp,sp,32
   136d4:	e13ffe15 	stw	r4,-8(fp)
   136d8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   136dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   136e0:	e0bffe17 	ldw	r2,-8(fp)
   136e4:	1000021e 	bne	r2,zero,136f0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   136e8:	00800104 	movi	r2,4
   136ec:	00003606 	br	137c8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   136f0:	e0bfff17 	ldw	r2,-4(fp)
   136f4:	1000021e 	bne	r2,zero,13700 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   136f8:	00800244 	movi	r2,9
   136fc:	00003206 	br	137c8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13700:	e0bffe17 	ldw	r2,-8(fp)
   13704:	10800003 	ldbu	r2,0(r2)
   13708:	10803fcc 	andi	r2,r2,255
   1370c:	108000e0 	cmpeqi	r2,r2,3
   13710:	1000021e 	bne	r2,zero,1371c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13714:	00800044 	movi	r2,1
   13718:	00002b06 	br	137c8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1371c:	0005303a 	rdctl	r2,status
   13720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13724:	e0fffc17 	ldw	r3,-16(fp)
   13728:	00bfff84 	movi	r2,-2
   1372c:	1884703a 	and	r2,r3,r2
   13730:	1001703a 	wrctl	status,r2
  
  return context;
   13734:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13738:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1373c:	e0bffe17 	ldw	r2,-8(fp)
   13740:	10c00283 	ldbu	r3,10(r2)
   13744:	e0bfff17 	ldw	r2,-4(fp)
   13748:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	108002c4 	addi	r2,r2,11
   13754:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13758:	e0bfff17 	ldw	r2,-4(fp)
   1375c:	10800084 	addi	r2,r2,2
   13760:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13764:	e03ffa05 	stb	zero,-24(fp)
   13768:	00000b06 	br	13798 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1376c:	e0bff917 	ldw	r2,-28(fp)
   13770:	10c00044 	addi	r3,r2,1
   13774:	e0fff915 	stw	r3,-28(fp)
   13778:	e0fff817 	ldw	r3,-32(fp)
   1377c:	19000044 	addi	r4,r3,1
   13780:	e13ff815 	stw	r4,-32(fp)
   13784:	18c00003 	ldbu	r3,0(r3)
   13788:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1378c:	e0bffa03 	ldbu	r2,-24(fp)
   13790:	10800044 	addi	r2,r2,1
   13794:	e0bffa05 	stb	r2,-24(fp)
   13798:	e0bffa03 	ldbu	r2,-24(fp)
   1379c:	108000f0 	cmpltui	r2,r2,3
   137a0:	103ff21e 	bne	r2,zero,1376c <__alt_mem_Flash_flash_data+0xf401376c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   137a4:	e0bffe17 	ldw	r2,-8(fp)
   137a8:	10c0020b 	ldhu	r3,8(r2)
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	10c0000d 	sth	r3,0(r2)
   137b4:	e0bffb17 	ldw	r2,-20(fp)
   137b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137bc:	e0bffd17 	ldw	r2,-12(fp)
   137c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   137c4:	0005883a 	mov	r2,zero
}
   137c8:	e037883a 	mov	sp,fp
   137cc:	df000017 	ldw	fp,0(sp)
   137d0:	dec00104 	addi	sp,sp,4
   137d4:	f800283a 	ret

000137d8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   137d8:	defff904 	addi	sp,sp,-28
   137dc:	df000615 	stw	fp,24(sp)
   137e0:	df000604 	addi	fp,sp,24
   137e4:	e13ffd15 	stw	r4,-12(fp)
   137e8:	2805883a 	mov	r2,r5
   137ec:	e1bfff15 	stw	r6,-4(fp)
   137f0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   137f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   137f8:	e0bfff17 	ldw	r2,-4(fp)
   137fc:	1000011e 	bne	r2,zero,13804 <OSSemSet+0x2c>
        return;
   13800:	00003006 	br	138c4 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13804:	e0bffd17 	ldw	r2,-12(fp)
   13808:	1000041e 	bne	r2,zero,1381c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1380c:	e0bfff17 	ldw	r2,-4(fp)
   13810:	00c00104 	movi	r3,4
   13814:	10c00005 	stb	r3,0(r2)
        return;
   13818:	00002a06 	br	138c4 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1381c:	e0bffd17 	ldw	r2,-12(fp)
   13820:	10800003 	ldbu	r2,0(r2)
   13824:	10803fcc 	andi	r2,r2,255
   13828:	108000e0 	cmpeqi	r2,r2,3
   1382c:	1000041e 	bne	r2,zero,13840 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13830:	e0bfff17 	ldw	r2,-4(fp)
   13834:	00c00044 	movi	r3,1
   13838:	10c00005 	stb	r3,0(r2)
        return;
   1383c:	00002106 	br	138c4 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13840:	0005303a 	rdctl	r2,status
   13844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13848:	e0fffb17 	ldw	r3,-20(fp)
   1384c:	00bfff84 	movi	r2,-2
   13850:	1884703a 	and	r2,r3,r2
   13854:	1001703a 	wrctl	status,r2
  
  return context;
   13858:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1385c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13860:	e0bfff17 	ldw	r2,-4(fp)
   13864:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	1080020b 	ldhu	r2,8(r2)
   13870:	10bfffcc 	andi	r2,r2,65535
   13874:	10000426 	beq	r2,zero,13888 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13878:	e0bffd17 	ldw	r2,-12(fp)
   1387c:	e0fffe0b 	ldhu	r3,-8(fp)
   13880:	10c0020d 	sth	r3,8(r2)
   13884:	00000b06 	br	138b4 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13888:	e0bffd17 	ldw	r2,-12(fp)
   1388c:	10800283 	ldbu	r2,10(r2)
   13890:	10803fcc 	andi	r2,r2,255
   13894:	1000041e 	bne	r2,zero,138a8 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13898:	e0bffd17 	ldw	r2,-12(fp)
   1389c:	e0fffe0b 	ldhu	r3,-8(fp)
   138a0:	10c0020d 	sth	r3,8(r2)
   138a4:	00000306 	br	138b4 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   138a8:	e0bfff17 	ldw	r2,-4(fp)
   138ac:	00c01244 	movi	r3,73
   138b0:	10c00005 	stb	r3,0(r2)
   138b4:	e0bffa17 	ldw	r2,-24(fp)
   138b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138bc:	e0bffc17 	ldw	r2,-16(fp)
   138c0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   138c4:	e037883a 	mov	sp,fp
   138c8:	df000017 	ldw	fp,0(sp)
   138cc:	dec00104 	addi	sp,sp,4
   138d0:	f800283a 	ret

000138d4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   138d4:	defff104 	addi	sp,sp,-60
   138d8:	dfc00e15 	stw	ra,56(sp)
   138dc:	df000d15 	stw	fp,52(sp)
   138e0:	df000d04 	addi	fp,sp,52
   138e4:	2007883a 	mov	r3,r4
   138e8:	2805883a 	mov	r2,r5
   138ec:	e0fffe05 	stb	r3,-8(fp)
   138f0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   138f4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   138f8:	e0bffe03 	ldbu	r2,-8(fp)
   138fc:	10800530 	cmpltui	r2,r2,20
   13900:	1000051e 	bne	r2,zero,13918 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13904:	e0bffe03 	ldbu	r2,-8(fp)
   13908:	10803fe0 	cmpeqi	r2,r2,255
   1390c:	1000021e 	bne	r2,zero,13918 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13910:	00800a84 	movi	r2,42
   13914:	00013a06 	br	13e00 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13918:	e0bfff03 	ldbu	r2,-4(fp)
   1391c:	10800530 	cmpltui	r2,r2,20
   13920:	1000021e 	bne	r2,zero,1392c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13924:	00800a84 	movi	r2,42
   13928:	00013506 	br	13e00 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1392c:	0005303a 	rdctl	r2,status
   13930:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13934:	e0fff917 	ldw	r3,-28(fp)
   13938:	00bfff84 	movi	r2,-2
   1393c:	1884703a 	and	r2,r3,r2
   13940:	1001703a 	wrctl	status,r2
  
  return context;
   13944:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13948:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1394c:	e0ffff03 	ldbu	r3,-4(fp)
   13950:	008000b4 	movhi	r2,2
   13954:	10965b04 	addi	r2,r2,22892
   13958:	18c7883a 	add	r3,r3,r3
   1395c:	18c7883a 	add	r3,r3,r3
   13960:	10c5883a 	add	r2,r2,r3
   13964:	10800017 	ldw	r2,0(r2)
   13968:	10000626 	beq	r2,zero,13984 <OSTaskChangePrio+0xb0>
   1396c:	e0bff517 	ldw	r2,-44(fp)
   13970:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13974:	e0bffa17 	ldw	r2,-24(fp)
   13978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1397c:	00800a04 	movi	r2,40
   13980:	00011f06 	br	13e00 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13984:	e0bffe03 	ldbu	r2,-8(fp)
   13988:	10803fd8 	cmpnei	r2,r2,255
   1398c:	1000051e 	bne	r2,zero,139a4 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13990:	008000b4 	movhi	r2,2
   13994:	10b9c904 	addi	r2,r2,-6364
   13998:	10800017 	ldw	r2,0(r2)
   1399c:	10800c83 	ldbu	r2,50(r2)
   139a0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   139a4:	e0fffe03 	ldbu	r3,-8(fp)
   139a8:	008000b4 	movhi	r2,2
   139ac:	10965b04 	addi	r2,r2,22892
   139b0:	18c7883a 	add	r3,r3,r3
   139b4:	18c7883a 	add	r3,r3,r3
   139b8:	10c5883a 	add	r2,r2,r3
   139bc:	10800017 	ldw	r2,0(r2)
   139c0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   139c4:	e0bff617 	ldw	r2,-40(fp)
   139c8:	1000061e 	bne	r2,zero,139e4 <OSTaskChangePrio+0x110>
   139cc:	e0bff517 	ldw	r2,-44(fp)
   139d0:	e0bffb15 	stw	r2,-20(fp)
   139d4:	e0bffb17 	ldw	r2,-20(fp)
   139d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   139dc:	00800a44 	movi	r2,41
   139e0:	00010706 	br	13e00 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   139e4:	e0bff617 	ldw	r2,-40(fp)
   139e8:	10800058 	cmpnei	r2,r2,1
   139ec:	1000061e 	bne	r2,zero,13a08 <OSTaskChangePrio+0x134>
   139f0:	e0bff517 	ldw	r2,-44(fp)
   139f4:	e0bffc15 	stw	r2,-16(fp)
   139f8:	e0bffc17 	ldw	r2,-16(fp)
   139fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13a00:	008010c4 	movi	r2,67
   13a04:	0000fe06 	br	13e00 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13a08:	e0bfff03 	ldbu	r2,-4(fp)
   13a0c:	1004d0fa 	srli	r2,r2,3
   13a10:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13a14:	e0bfff03 	ldbu	r2,-4(fp)
   13a18:	108001cc 	andi	r2,r2,7
   13a1c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   13a20:	e0bff703 	ldbu	r2,-36(fp)
   13a24:	00c00044 	movi	r3,1
   13a28:	1884983a 	sll	r2,r3,r2
   13a2c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13a30:	e0bff743 	ldbu	r2,-35(fp)
   13a34:	00c00044 	movi	r3,1
   13a38:	1884983a 	sll	r2,r3,r2
   13a3c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13a40:	e0fffe03 	ldbu	r3,-8(fp)
   13a44:	008000b4 	movhi	r2,2
   13a48:	10965b04 	addi	r2,r2,22892
   13a4c:	18c7883a 	add	r3,r3,r3
   13a50:	18c7883a 	add	r3,r3,r3
   13a54:	10c5883a 	add	r2,r2,r3
   13a58:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13a5c:	e0ffff03 	ldbu	r3,-4(fp)
   13a60:	008000b4 	movhi	r2,2
   13a64:	10965b04 	addi	r2,r2,22892
   13a68:	18c7883a 	add	r3,r3,r3
   13a6c:	18c7883a 	add	r3,r3,r3
   13a70:	10c5883a 	add	r2,r2,r3
   13a74:	e0fff617 	ldw	r3,-40(fp)
   13a78:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13a7c:	e0bff617 	ldw	r2,-40(fp)
   13a80:	10800d03 	ldbu	r2,52(r2)
   13a84:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13a88:	e0bff617 	ldw	r2,-40(fp)
   13a8c:	10800d83 	ldbu	r2,54(r2)
   13a90:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13a94:	e0bff617 	ldw	r2,-40(fp)
   13a98:	10800d43 	ldbu	r2,53(r2)
   13a9c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13aa0:	e0fff803 	ldbu	r3,-32(fp)
   13aa4:	008000b4 	movhi	r2,2
   13aa8:	10b9c644 	addi	r2,r2,-6375
   13aac:	10c5883a 	add	r2,r2,r3
   13ab0:	10c00003 	ldbu	r3,0(r2)
   13ab4:	e0bff883 	ldbu	r2,-30(fp)
   13ab8:	1884703a 	and	r2,r3,r2
   13abc:	10803fcc 	andi	r2,r2,255
   13ac0:	10003726 	beq	r2,zero,13ba0 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13ac4:	e0fff803 	ldbu	r3,-32(fp)
   13ac8:	e13ff803 	ldbu	r4,-32(fp)
   13acc:	008000b4 	movhi	r2,2
   13ad0:	10b9c644 	addi	r2,r2,-6375
   13ad4:	1105883a 	add	r2,r2,r4
   13ad8:	10800003 	ldbu	r2,0(r2)
   13adc:	1009883a 	mov	r4,r2
   13ae0:	e0bff883 	ldbu	r2,-30(fp)
   13ae4:	0084303a 	nor	r2,zero,r2
   13ae8:	2084703a 	and	r2,r4,r2
   13aec:	1009883a 	mov	r4,r2
   13af0:	008000b4 	movhi	r2,2
   13af4:	10b9c644 	addi	r2,r2,-6375
   13af8:	10c5883a 	add	r2,r2,r3
   13afc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13b00:	e0fff803 	ldbu	r3,-32(fp)
   13b04:	008000b4 	movhi	r2,2
   13b08:	10b9c644 	addi	r2,r2,-6375
   13b0c:	10c5883a 	add	r2,r2,r3
   13b10:	10800003 	ldbu	r2,0(r2)
   13b14:	10803fcc 	andi	r2,r2,255
   13b18:	10000b1e 	bne	r2,zero,13b48 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   13b1c:	e0bff843 	ldbu	r2,-31(fp)
   13b20:	0084303a 	nor	r2,zero,r2
   13b24:	1007883a 	mov	r3,r2
   13b28:	008000b4 	movhi	r2,2
   13b2c:	10b9c604 	addi	r2,r2,-6376
   13b30:	10800003 	ldbu	r2,0(r2)
   13b34:	1884703a 	and	r2,r3,r2
   13b38:	1007883a 	mov	r3,r2
   13b3c:	008000b4 	movhi	r2,2
   13b40:	10b9c604 	addi	r2,r2,-6376
   13b44:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13b48:	008000b4 	movhi	r2,2
   13b4c:	10b9c604 	addi	r2,r2,-6376
   13b50:	10c00003 	ldbu	r3,0(r2)
   13b54:	e0bff783 	ldbu	r2,-34(fp)
   13b58:	1884b03a 	or	r2,r3,r2
   13b5c:	1007883a 	mov	r3,r2
   13b60:	008000b4 	movhi	r2,2
   13b64:	10b9c604 	addi	r2,r2,-6376
   13b68:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   13b6c:	e0fff703 	ldbu	r3,-36(fp)
   13b70:	e13ff703 	ldbu	r4,-36(fp)
   13b74:	008000b4 	movhi	r2,2
   13b78:	10b9c644 	addi	r2,r2,-6375
   13b7c:	1105883a 	add	r2,r2,r4
   13b80:	11000003 	ldbu	r4,0(r2)
   13b84:	e0bff7c3 	ldbu	r2,-33(fp)
   13b88:	2084b03a 	or	r2,r4,r2
   13b8c:	1009883a 	mov	r4,r2
   13b90:	008000b4 	movhi	r2,2
   13b94:	10b9c644 	addi	r2,r2,-6375
   13b98:	10c5883a 	add	r2,r2,r3
   13b9c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13ba0:	e0bff617 	ldw	r2,-40(fp)
   13ba4:	10800717 	ldw	r2,28(r2)
   13ba8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13bac:	e0bff317 	ldw	r2,-52(fp)
   13bb0:	10003326 	beq	r2,zero,13c80 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13bb4:	e0bff803 	ldbu	r2,-32(fp)
   13bb8:	e0fff803 	ldbu	r3,-32(fp)
   13bbc:	e13ff317 	ldw	r4,-52(fp)
   13bc0:	20c7883a 	add	r3,r4,r3
   13bc4:	18c00204 	addi	r3,r3,8
   13bc8:	18c000c3 	ldbu	r3,3(r3)
   13bcc:	1809883a 	mov	r4,r3
   13bd0:	e0fff883 	ldbu	r3,-30(fp)
   13bd4:	00c6303a 	nor	r3,zero,r3
   13bd8:	20c6703a 	and	r3,r4,r3
   13bdc:	1809883a 	mov	r4,r3
   13be0:	e0fff317 	ldw	r3,-52(fp)
   13be4:	1885883a 	add	r2,r3,r2
   13be8:	10800204 	addi	r2,r2,8
   13bec:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13bf0:	e0bff803 	ldbu	r2,-32(fp)
   13bf4:	e0fff317 	ldw	r3,-52(fp)
   13bf8:	1885883a 	add	r2,r3,r2
   13bfc:	10800204 	addi	r2,r2,8
   13c00:	108000c3 	ldbu	r2,3(r2)
   13c04:	10803fcc 	andi	r2,r2,255
   13c08:	1000091e 	bne	r2,zero,13c30 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   13c0c:	e0bff317 	ldw	r2,-52(fp)
   13c10:	10800283 	ldbu	r2,10(r2)
   13c14:	1007883a 	mov	r3,r2
   13c18:	e0bff843 	ldbu	r2,-31(fp)
   13c1c:	0084303a 	nor	r2,zero,r2
   13c20:	1884703a 	and	r2,r3,r2
   13c24:	1007883a 	mov	r3,r2
   13c28:	e0bff317 	ldw	r2,-52(fp)
   13c2c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13c30:	e0bff317 	ldw	r2,-52(fp)
   13c34:	10c00283 	ldbu	r3,10(r2)
   13c38:	e0bff783 	ldbu	r2,-34(fp)
   13c3c:	1884b03a 	or	r2,r3,r2
   13c40:	1007883a 	mov	r3,r2
   13c44:	e0bff317 	ldw	r2,-52(fp)
   13c48:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13c4c:	e0bff703 	ldbu	r2,-36(fp)
   13c50:	e0fff703 	ldbu	r3,-36(fp)
   13c54:	e13ff317 	ldw	r4,-52(fp)
   13c58:	20c7883a 	add	r3,r4,r3
   13c5c:	18c00204 	addi	r3,r3,8
   13c60:	190000c3 	ldbu	r4,3(r3)
   13c64:	e0fff7c3 	ldbu	r3,-33(fp)
   13c68:	20c6b03a 	or	r3,r4,r3
   13c6c:	1809883a 	mov	r4,r3
   13c70:	e0fff317 	ldw	r3,-52(fp)
   13c74:	1885883a 	add	r2,r3,r2
   13c78:	10800204 	addi	r2,r2,8
   13c7c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13c80:	e0bff617 	ldw	r2,-40(fp)
   13c84:	10800817 	ldw	r2,32(r2)
   13c88:	10004226 	beq	r2,zero,13d94 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13c8c:	e0bff617 	ldw	r2,-40(fp)
   13c90:	10800817 	ldw	r2,32(r2)
   13c94:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13c98:	e0bff417 	ldw	r2,-48(fp)
   13c9c:	10800017 	ldw	r2,0(r2)
   13ca0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13ca4:	00003906 	br	13d8c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13ca8:	e0bff803 	ldbu	r2,-32(fp)
   13cac:	e0fff803 	ldbu	r3,-32(fp)
   13cb0:	e13ff317 	ldw	r4,-52(fp)
   13cb4:	20c7883a 	add	r3,r4,r3
   13cb8:	18c00204 	addi	r3,r3,8
   13cbc:	18c000c3 	ldbu	r3,3(r3)
   13cc0:	1809883a 	mov	r4,r3
   13cc4:	e0fff883 	ldbu	r3,-30(fp)
   13cc8:	00c6303a 	nor	r3,zero,r3
   13ccc:	20c6703a 	and	r3,r4,r3
   13cd0:	1809883a 	mov	r4,r3
   13cd4:	e0fff317 	ldw	r3,-52(fp)
   13cd8:	1885883a 	add	r2,r3,r2
   13cdc:	10800204 	addi	r2,r2,8
   13ce0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13ce4:	e0bff803 	ldbu	r2,-32(fp)
   13ce8:	e0fff317 	ldw	r3,-52(fp)
   13cec:	1885883a 	add	r2,r3,r2
   13cf0:	10800204 	addi	r2,r2,8
   13cf4:	108000c3 	ldbu	r2,3(r2)
   13cf8:	10803fcc 	andi	r2,r2,255
   13cfc:	1000091e 	bne	r2,zero,13d24 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   13d00:	e0bff317 	ldw	r2,-52(fp)
   13d04:	10800283 	ldbu	r2,10(r2)
   13d08:	1007883a 	mov	r3,r2
   13d0c:	e0bff843 	ldbu	r2,-31(fp)
   13d10:	0084303a 	nor	r2,zero,r2
   13d14:	1884703a 	and	r2,r3,r2
   13d18:	1007883a 	mov	r3,r2
   13d1c:	e0bff317 	ldw	r2,-52(fp)
   13d20:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13d24:	e0bff317 	ldw	r2,-52(fp)
   13d28:	10c00283 	ldbu	r3,10(r2)
   13d2c:	e0bff783 	ldbu	r2,-34(fp)
   13d30:	1884b03a 	or	r2,r3,r2
   13d34:	1007883a 	mov	r3,r2
   13d38:	e0bff317 	ldw	r2,-52(fp)
   13d3c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13d40:	e0bff703 	ldbu	r2,-36(fp)
   13d44:	e0fff703 	ldbu	r3,-36(fp)
   13d48:	e13ff317 	ldw	r4,-52(fp)
   13d4c:	20c7883a 	add	r3,r4,r3
   13d50:	18c00204 	addi	r3,r3,8
   13d54:	190000c3 	ldbu	r4,3(r3)
   13d58:	e0fff7c3 	ldbu	r3,-33(fp)
   13d5c:	20c6b03a 	or	r3,r4,r3
   13d60:	1809883a 	mov	r4,r3
   13d64:	e0fff317 	ldw	r3,-52(fp)
   13d68:	1885883a 	add	r2,r3,r2
   13d6c:	10800204 	addi	r2,r2,8
   13d70:	110000c5 	stb	r4,3(r2)
            pevents++;
   13d74:	e0bff417 	ldw	r2,-48(fp)
   13d78:	10800104 	addi	r2,r2,4
   13d7c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13d80:	e0bff417 	ldw	r2,-48(fp)
   13d84:	10800017 	ldw	r2,0(r2)
   13d88:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13d8c:	e0bff317 	ldw	r2,-52(fp)
   13d90:	103fc51e 	bne	r2,zero,13ca8 <__alt_mem_Flash_flash_data+0xf4013ca8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13d94:	e0bff617 	ldw	r2,-40(fp)
   13d98:	e0ffff03 	ldbu	r3,-4(fp)
   13d9c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13da0:	e0bff617 	ldw	r2,-40(fp)
   13da4:	e0fff703 	ldbu	r3,-36(fp)
   13da8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13dac:	e0bff617 	ldw	r2,-40(fp)
   13db0:	e0fff743 	ldbu	r3,-35(fp)
   13db4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13db8:	e0bff617 	ldw	r2,-40(fp)
   13dbc:	e0fff783 	ldbu	r3,-34(fp)
   13dc0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13dc4:	e0bff617 	ldw	r2,-40(fp)
   13dc8:	e0fff7c3 	ldbu	r3,-33(fp)
   13dcc:	10c00d45 	stb	r3,53(r2)
   13dd0:	e0bff517 	ldw	r2,-44(fp)
   13dd4:	e0bffd15 	stw	r2,-12(fp)
   13dd8:	e0bffd17 	ldw	r2,-12(fp)
   13ddc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13de0:	008000b4 	movhi	r2,2
   13de4:	10b9ba44 	addi	r2,r2,-6423
   13de8:	10800003 	ldbu	r2,0(r2)
   13dec:	10803fcc 	andi	r2,r2,255
   13df0:	10800058 	cmpnei	r2,r2,1
   13df4:	1000011e 	bne	r2,zero,13dfc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   13df8:	000f3b80 	call	f3b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13dfc:	0005883a 	mov	r2,zero
}
   13e00:	e037883a 	mov	sp,fp
   13e04:	dfc00117 	ldw	ra,4(sp)
   13e08:	df000017 	ldw	fp,0(sp)
   13e0c:	dec00204 	addi	sp,sp,8
   13e10:	f800283a 	ret

00013e14 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13e14:	deffee04 	addi	sp,sp,-72
   13e18:	dfc01115 	stw	ra,68(sp)
   13e1c:	df001015 	stw	fp,64(sp)
   13e20:	df001004 	addi	fp,sp,64
   13e24:	e13ffc15 	stw	r4,-16(fp)
   13e28:	e17ffd15 	stw	r5,-12(fp)
   13e2c:	e1bffe15 	stw	r6,-8(fp)
   13e30:	3805883a 	mov	r2,r7
   13e34:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13e38:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13e3c:	e0bfff03 	ldbu	r2,-4(fp)
   13e40:	10800570 	cmpltui	r2,r2,21
   13e44:	1000021e 	bne	r2,zero,13e50 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   13e48:	00800a84 	movi	r2,42
   13e4c:	00005b06 	br	13fbc <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e50:	0005303a 	rdctl	r2,status
   13e54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e58:	e0fff617 	ldw	r3,-40(fp)
   13e5c:	00bfff84 	movi	r2,-2
   13e60:	1884703a 	and	r2,r3,r2
   13e64:	1001703a 	wrctl	status,r2
  
  return context;
   13e68:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13e6c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13e70:	008000b4 	movhi	r2,2
   13e74:	10b9c804 	addi	r2,r2,-6368
   13e78:	10800003 	ldbu	r2,0(r2)
   13e7c:	10803fcc 	andi	r2,r2,255
   13e80:	10000626 	beq	r2,zero,13e9c <OSTaskCreate+0x88>
   13e84:	e0bff317 	ldw	r2,-52(fp)
   13e88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e8c:	e0bff717 	ldw	r2,-36(fp)
   13e90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13e94:	00800f04 	movi	r2,60
   13e98:	00004806 	br	13fbc <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13e9c:	e0ffff03 	ldbu	r3,-4(fp)
   13ea0:	008000b4 	movhi	r2,2
   13ea4:	10965b04 	addi	r2,r2,22892
   13ea8:	18c7883a 	add	r3,r3,r3
   13eac:	18c7883a 	add	r3,r3,r3
   13eb0:	10c5883a 	add	r2,r2,r3
   13eb4:	10800017 	ldw	r2,0(r2)
   13eb8:	10003b1e 	bne	r2,zero,13fa8 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13ebc:	e0ffff03 	ldbu	r3,-4(fp)
   13ec0:	008000b4 	movhi	r2,2
   13ec4:	10965b04 	addi	r2,r2,22892
   13ec8:	18c7883a 	add	r3,r3,r3
   13ecc:	18c7883a 	add	r3,r3,r3
   13ed0:	10c5883a 	add	r2,r2,r3
   13ed4:	00c00044 	movi	r3,1
   13ed8:	10c00015 	stw	r3,0(r2)
   13edc:	e0bff317 	ldw	r2,-52(fp)
   13ee0:	e0bff815 	stw	r2,-32(fp)
   13ee4:	e0bff817 	ldw	r2,-32(fp)
   13ee8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13eec:	e13ffc17 	ldw	r4,-16(fp)
   13ef0:	e17ffd17 	ldw	r5,-12(fp)
   13ef4:	e1bffe17 	ldw	r6,-8(fp)
   13ef8:	000f883a 	mov	r7,zero
   13efc:	00190e40 	call	190e4 <OSTaskStkInit>
   13f00:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13f04:	e0bfff03 	ldbu	r2,-4(fp)
   13f08:	d8000015 	stw	zero,0(sp)
   13f0c:	d8000115 	stw	zero,4(sp)
   13f10:	d8000215 	stw	zero,8(sp)
   13f14:	1009883a 	mov	r4,r2
   13f18:	e17ff417 	ldw	r5,-48(fp)
   13f1c:	000d883a 	mov	r6,zero
   13f20:	000f883a 	mov	r7,zero
   13f24:	000f7bc0 	call	f7bc <OS_TCBInit>
   13f28:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   13f2c:	e0bff503 	ldbu	r2,-44(fp)
   13f30:	1000081e 	bne	r2,zero,13f54 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   13f34:	008000b4 	movhi	r2,2
   13f38:	10b9ba44 	addi	r2,r2,-6423
   13f3c:	10800003 	ldbu	r2,0(r2)
   13f40:	10803fcc 	andi	r2,r2,255
   13f44:	10800058 	cmpnei	r2,r2,1
   13f48:	1000151e 	bne	r2,zero,13fa0 <OSTaskCreate+0x18c>
                OS_Sched();
   13f4c:	000f3b80 	call	f3b8 <OS_Sched>
   13f50:	00001306 	br	13fa0 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f54:	0005303a 	rdctl	r2,status
   13f58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f5c:	e0fff917 	ldw	r3,-28(fp)
   13f60:	00bfff84 	movi	r2,-2
   13f64:	1884703a 	and	r2,r3,r2
   13f68:	1001703a 	wrctl	status,r2
  
  return context;
   13f6c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13f70:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   13f74:	e0ffff03 	ldbu	r3,-4(fp)
   13f78:	008000b4 	movhi	r2,2
   13f7c:	10965b04 	addi	r2,r2,22892
   13f80:	18c7883a 	add	r3,r3,r3
   13f84:	18c7883a 	add	r3,r3,r3
   13f88:	10c5883a 	add	r2,r2,r3
   13f8c:	10000015 	stw	zero,0(r2)
   13f90:	e0bff317 	ldw	r2,-52(fp)
   13f94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f98:	e0bffa17 	ldw	r2,-24(fp)
   13f9c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13fa0:	e0bff503 	ldbu	r2,-44(fp)
   13fa4:	00000506 	br	13fbc <OSTaskCreate+0x1a8>
   13fa8:	e0bff317 	ldw	r2,-52(fp)
   13fac:	e0bffb15 	stw	r2,-20(fp)
   13fb0:	e0bffb17 	ldw	r2,-20(fp)
   13fb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13fb8:	00800a04 	movi	r2,40
}
   13fbc:	e037883a 	mov	sp,fp
   13fc0:	dfc00117 	ldw	ra,4(sp)
   13fc4:	df000017 	ldw	fp,0(sp)
   13fc8:	dec00204 	addi	sp,sp,8
   13fcc:	f800283a 	ret

00013fd0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   13fd0:	deffec04 	addi	sp,sp,-80
   13fd4:	dfc01315 	stw	ra,76(sp)
   13fd8:	df001215 	stw	fp,72(sp)
   13fdc:	df001204 	addi	fp,sp,72
   13fe0:	e13ffa15 	stw	r4,-24(fp)
   13fe4:	e17ffb15 	stw	r5,-20(fp)
   13fe8:	e1bffc15 	stw	r6,-16(fp)
   13fec:	3809883a 	mov	r4,r7
   13ff0:	e0c00217 	ldw	r3,8(fp)
   13ff4:	e0800617 	ldw	r2,24(fp)
   13ff8:	e13ffd05 	stb	r4,-12(fp)
   13ffc:	e0fffe0d 	sth	r3,-8(fp)
   14000:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14004:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14008:	e0bffd03 	ldbu	r2,-12(fp)
   1400c:	10800570 	cmpltui	r2,r2,21
   14010:	1000021e 	bne	r2,zero,1401c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   14014:	00800a84 	movi	r2,42
   14018:	00006306 	br	141a8 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1401c:	0005303a 	rdctl	r2,status
   14020:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14024:	e0fff417 	ldw	r3,-48(fp)
   14028:	00bfff84 	movi	r2,-2
   1402c:	1884703a 	and	r2,r3,r2
   14030:	1001703a 	wrctl	status,r2
  
  return context;
   14034:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14038:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1403c:	008000b4 	movhi	r2,2
   14040:	10b9c804 	addi	r2,r2,-6368
   14044:	10800003 	ldbu	r2,0(r2)
   14048:	10803fcc 	andi	r2,r2,255
   1404c:	10000626 	beq	r2,zero,14068 <OSTaskCreateExt+0x98>
   14050:	e0bff117 	ldw	r2,-60(fp)
   14054:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14058:	e0bff517 	ldw	r2,-44(fp)
   1405c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14060:	00800f04 	movi	r2,60
   14064:	00005006 	br	141a8 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14068:	e0fffd03 	ldbu	r3,-12(fp)
   1406c:	008000b4 	movhi	r2,2
   14070:	10965b04 	addi	r2,r2,22892
   14074:	18c7883a 	add	r3,r3,r3
   14078:	18c7883a 	add	r3,r3,r3
   1407c:	10c5883a 	add	r2,r2,r3
   14080:	10800017 	ldw	r2,0(r2)
   14084:	1000431e 	bne	r2,zero,14194 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14088:	e0fffd03 	ldbu	r3,-12(fp)
   1408c:	008000b4 	movhi	r2,2
   14090:	10965b04 	addi	r2,r2,22892
   14094:	18c7883a 	add	r3,r3,r3
   14098:	18c7883a 	add	r3,r3,r3
   1409c:	10c5883a 	add	r2,r2,r3
   140a0:	00c00044 	movi	r3,1
   140a4:	10c00015 	stw	r3,0(r2)
   140a8:	e0bff117 	ldw	r2,-60(fp)
   140ac:	e0bff615 	stw	r2,-40(fp)
   140b0:	e0bff617 	ldw	r2,-40(fp)
   140b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   140b8:	e0bfff0b 	ldhu	r2,-4(fp)
   140bc:	e1000317 	ldw	r4,12(fp)
   140c0:	e1400417 	ldw	r5,16(fp)
   140c4:	100d883a 	mov	r6,r2
   140c8:	001515c0 	call	1515c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   140cc:	e0bfff0b 	ldhu	r2,-4(fp)
   140d0:	e13ffa17 	ldw	r4,-24(fp)
   140d4:	e17ffb17 	ldw	r5,-20(fp)
   140d8:	e1bffc17 	ldw	r6,-16(fp)
   140dc:	100f883a 	mov	r7,r2
   140e0:	00190e40 	call	190e4 <OSTaskStkInit>
   140e4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   140e8:	e13ffd03 	ldbu	r4,-12(fp)
   140ec:	e1fffe0b 	ldhu	r7,-8(fp)
   140f0:	e0bfff0b 	ldhu	r2,-4(fp)
   140f4:	e0c00417 	ldw	r3,16(fp)
   140f8:	d8c00015 	stw	r3,0(sp)
   140fc:	e0c00517 	ldw	r3,20(fp)
   14100:	d8c00115 	stw	r3,4(sp)
   14104:	d8800215 	stw	r2,8(sp)
   14108:	e17ff217 	ldw	r5,-56(fp)
   1410c:	e1800317 	ldw	r6,12(fp)
   14110:	000f7bc0 	call	f7bc <OS_TCBInit>
   14114:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   14118:	e0bff303 	ldbu	r2,-52(fp)
   1411c:	1000081e 	bne	r2,zero,14140 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   14120:	008000b4 	movhi	r2,2
   14124:	10b9ba44 	addi	r2,r2,-6423
   14128:	10800003 	ldbu	r2,0(r2)
   1412c:	10803fcc 	andi	r2,r2,255
   14130:	10800058 	cmpnei	r2,r2,1
   14134:	1000151e 	bne	r2,zero,1418c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   14138:	000f3b80 	call	f3b8 <OS_Sched>
   1413c:	00001306 	br	1418c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14140:	0005303a 	rdctl	r2,status
   14144:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14148:	e0fff717 	ldw	r3,-36(fp)
   1414c:	00bfff84 	movi	r2,-2
   14150:	1884703a 	and	r2,r3,r2
   14154:	1001703a 	wrctl	status,r2
  
  return context;
   14158:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1415c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14160:	e0fffd03 	ldbu	r3,-12(fp)
   14164:	008000b4 	movhi	r2,2
   14168:	10965b04 	addi	r2,r2,22892
   1416c:	18c7883a 	add	r3,r3,r3
   14170:	18c7883a 	add	r3,r3,r3
   14174:	10c5883a 	add	r2,r2,r3
   14178:	10000015 	stw	zero,0(r2)
   1417c:	e0bff117 	ldw	r2,-60(fp)
   14180:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14184:	e0bff817 	ldw	r2,-32(fp)
   14188:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1418c:	e0bff303 	ldbu	r2,-52(fp)
   14190:	00000506 	br	141a8 <OSTaskCreateExt+0x1d8>
   14194:	e0bff117 	ldw	r2,-60(fp)
   14198:	e0bff915 	stw	r2,-28(fp)
   1419c:	e0bff917 	ldw	r2,-28(fp)
   141a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   141a4:	00800a04 	movi	r2,40
}
   141a8:	e037883a 	mov	sp,fp
   141ac:	dfc00117 	ldw	ra,4(sp)
   141b0:	df000017 	ldw	fp,0(sp)
   141b4:	dec00204 	addi	sp,sp,8
   141b8:	f800283a 	ret

000141bc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   141bc:	defff404 	addi	sp,sp,-48
   141c0:	dfc00b15 	stw	ra,44(sp)
   141c4:	df000a15 	stw	fp,40(sp)
   141c8:	df000a04 	addi	fp,sp,40
   141cc:	2005883a 	mov	r2,r4
   141d0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   141d4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   141d8:	008000b4 	movhi	r2,2
   141dc:	10b9c804 	addi	r2,r2,-6368
   141e0:	10800003 	ldbu	r2,0(r2)
   141e4:	10803fcc 	andi	r2,r2,255
   141e8:	10000226 	beq	r2,zero,141f4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   141ec:	00801004 	movi	r2,64
   141f0:	0000e506 	br	14588 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   141f4:	e0bfff03 	ldbu	r2,-4(fp)
   141f8:	10800518 	cmpnei	r2,r2,20
   141fc:	1000021e 	bne	r2,zero,14208 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   14200:	00800f84 	movi	r2,62
   14204:	0000e006 	br	14588 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   14208:	e0bfff03 	ldbu	r2,-4(fp)
   1420c:	10800530 	cmpltui	r2,r2,20
   14210:	1000051e 	bne	r2,zero,14228 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   14214:	e0bfff03 	ldbu	r2,-4(fp)
   14218:	10803fe0 	cmpeqi	r2,r2,255
   1421c:	1000021e 	bne	r2,zero,14228 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   14220:	00800a84 	movi	r2,42
   14224:	0000d806 	br	14588 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14228:	0005303a 	rdctl	r2,status
   1422c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14230:	e0fff917 	ldw	r3,-28(fp)
   14234:	00bfff84 	movi	r2,-2
   14238:	1884703a 	and	r2,r3,r2
   1423c:	1001703a 	wrctl	status,r2
  
  return context;
   14240:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14244:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14248:	e0bfff03 	ldbu	r2,-4(fp)
   1424c:	10803fd8 	cmpnei	r2,r2,255
   14250:	1000051e 	bne	r2,zero,14268 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14254:	008000b4 	movhi	r2,2
   14258:	10b9c904 	addi	r2,r2,-6364
   1425c:	10800017 	ldw	r2,0(r2)
   14260:	10800c83 	ldbu	r2,50(r2)
   14264:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14268:	e0ffff03 	ldbu	r3,-4(fp)
   1426c:	008000b4 	movhi	r2,2
   14270:	10965b04 	addi	r2,r2,22892
   14274:	18c7883a 	add	r3,r3,r3
   14278:	18c7883a 	add	r3,r3,r3
   1427c:	10c5883a 	add	r2,r2,r3
   14280:	10800017 	ldw	r2,0(r2)
   14284:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14288:	e0bff717 	ldw	r2,-36(fp)
   1428c:	1000061e 	bne	r2,zero,142a8 <OSTaskDel+0xec>
   14290:	e0bff617 	ldw	r2,-40(fp)
   14294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14298:	e0bffa17 	ldw	r2,-24(fp)
   1429c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   142a0:	008010c4 	movi	r2,67
   142a4:	0000b806 	br	14588 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   142a8:	e0bff717 	ldw	r2,-36(fp)
   142ac:	10800058 	cmpnei	r2,r2,1
   142b0:	1000061e 	bne	r2,zero,142cc <OSTaskDel+0x110>
   142b4:	e0bff617 	ldw	r2,-40(fp)
   142b8:	e0bffb15 	stw	r2,-20(fp)
   142bc:	e0bffb17 	ldw	r2,-20(fp)
   142c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   142c4:	00800f44 	movi	r2,61
   142c8:	0000af06 	br	14588 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   142cc:	e0bff717 	ldw	r2,-36(fp)
   142d0:	10800d03 	ldbu	r2,52(r2)
   142d4:	10c03fcc 	andi	r3,r2,255
   142d8:	e0bff717 	ldw	r2,-36(fp)
   142dc:	10800d03 	ldbu	r2,52(r2)
   142e0:	11003fcc 	andi	r4,r2,255
   142e4:	008000b4 	movhi	r2,2
   142e8:	10b9c644 	addi	r2,r2,-6375
   142ec:	1105883a 	add	r2,r2,r4
   142f0:	10800003 	ldbu	r2,0(r2)
   142f4:	1009883a 	mov	r4,r2
   142f8:	e0bff717 	ldw	r2,-36(fp)
   142fc:	10800d43 	ldbu	r2,53(r2)
   14300:	0084303a 	nor	r2,zero,r2
   14304:	2084703a 	and	r2,r4,r2
   14308:	1009883a 	mov	r4,r2
   1430c:	008000b4 	movhi	r2,2
   14310:	10b9c644 	addi	r2,r2,-6375
   14314:	10c5883a 	add	r2,r2,r3
   14318:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1431c:	e0bff717 	ldw	r2,-36(fp)
   14320:	10800d03 	ldbu	r2,52(r2)
   14324:	10c03fcc 	andi	r3,r2,255
   14328:	008000b4 	movhi	r2,2
   1432c:	10b9c644 	addi	r2,r2,-6375
   14330:	10c5883a 	add	r2,r2,r3
   14334:	10800003 	ldbu	r2,0(r2)
   14338:	10803fcc 	andi	r2,r2,255
   1433c:	10000c1e 	bne	r2,zero,14370 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14340:	e0bff717 	ldw	r2,-36(fp)
   14344:	10800d83 	ldbu	r2,54(r2)
   14348:	0084303a 	nor	r2,zero,r2
   1434c:	1007883a 	mov	r3,r2
   14350:	008000b4 	movhi	r2,2
   14354:	10b9c604 	addi	r2,r2,-6376
   14358:	10800003 	ldbu	r2,0(r2)
   1435c:	1884703a 	and	r2,r3,r2
   14360:	1007883a 	mov	r3,r2
   14364:	008000b4 	movhi	r2,2
   14368:	10b9c604 	addi	r2,r2,-6376
   1436c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14370:	e0bff717 	ldw	r2,-36(fp)
   14374:	10800717 	ldw	r2,28(r2)
   14378:	10000526 	beq	r2,zero,14390 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1437c:	e0bff717 	ldw	r2,-36(fp)
   14380:	10800717 	ldw	r2,28(r2)
   14384:	e13ff717 	ldw	r4,-36(fp)
   14388:	100b883a 	mov	r5,r2
   1438c:	000ed900 	call	ed90 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14390:	e0bff717 	ldw	r2,-36(fp)
   14394:	10800817 	ldw	r2,32(r2)
   14398:	10000526 	beq	r2,zero,143b0 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1439c:	e0bff717 	ldw	r2,-36(fp)
   143a0:	10800817 	ldw	r2,32(r2)
   143a4:	e13ff717 	ldw	r4,-36(fp)
   143a8:	100b883a 	mov	r5,r2
   143ac:	000ee440 	call	ee44 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   143b0:	e0bff717 	ldw	r2,-36(fp)
   143b4:	10800a17 	ldw	r2,40(r2)
   143b8:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   143bc:	e0bff817 	ldw	r2,-32(fp)
   143c0:	10000226 	beq	r2,zero,143cc <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   143c4:	e13ff817 	ldw	r4,-32(fp)
   143c8:	00113980 	call	11398 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   143cc:	e0bff717 	ldw	r2,-36(fp)
   143d0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   143d4:	e0bff717 	ldw	r2,-36(fp)
   143d8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   143dc:	e0bff717 	ldw	r2,-36(fp)
   143e0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   143e4:	008000b4 	movhi	r2,2
   143e8:	10b9ba04 	addi	r2,r2,-6424
   143ec:	10800003 	ldbu	r2,0(r2)
   143f0:	10803fcc 	andi	r2,r2,255
   143f4:	10803fe0 	cmpeqi	r2,r2,255
   143f8:	1000081e 	bne	r2,zero,1441c <OSTaskDel+0x260>
        OSLockNesting++;
   143fc:	008000b4 	movhi	r2,2
   14400:	10b9ba04 	addi	r2,r2,-6424
   14404:	10800003 	ldbu	r2,0(r2)
   14408:	10800044 	addi	r2,r2,1
   1440c:	1007883a 	mov	r3,r2
   14410:	008000b4 	movhi	r2,2
   14414:	10b9ba04 	addi	r2,r2,-6424
   14418:	10c00005 	stb	r3,0(r2)
   1441c:	e0bff617 	ldw	r2,-40(fp)
   14420:	e0bffc15 	stw	r2,-16(fp)
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1442c:	000e9840 	call	e984 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14430:	0005303a 	rdctl	r2,status
   14434:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14438:	e0fffd17 	ldw	r3,-12(fp)
   1443c:	00bfff84 	movi	r2,-2
   14440:	1884703a 	and	r2,r3,r2
   14444:	1001703a 	wrctl	status,r2
  
  return context;
   14448:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1444c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14450:	008000b4 	movhi	r2,2
   14454:	10b9ba04 	addi	r2,r2,-6424
   14458:	10800003 	ldbu	r2,0(r2)
   1445c:	10803fcc 	andi	r2,r2,255
   14460:	10000826 	beq	r2,zero,14484 <OSTaskDel+0x2c8>
        OSLockNesting--;
   14464:	008000b4 	movhi	r2,2
   14468:	10b9ba04 	addi	r2,r2,-6424
   1446c:	10800003 	ldbu	r2,0(r2)
   14470:	10bfffc4 	addi	r2,r2,-1
   14474:	1007883a 	mov	r3,r2
   14478:	008000b4 	movhi	r2,2
   1447c:	10b9ba04 	addi	r2,r2,-6424
   14480:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14484:	e13ff717 	ldw	r4,-36(fp)
   14488:	00192600 	call	19260 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1448c:	008000b4 	movhi	r2,2
   14490:	10b9c244 	addi	r2,r2,-6391
   14494:	10800003 	ldbu	r2,0(r2)
   14498:	10bfffc4 	addi	r2,r2,-1
   1449c:	1007883a 	mov	r3,r2
   144a0:	008000b4 	movhi	r2,2
   144a4:	10b9c244 	addi	r2,r2,-6391
   144a8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   144ac:	e0ffff03 	ldbu	r3,-4(fp)
   144b0:	008000b4 	movhi	r2,2
   144b4:	10965b04 	addi	r2,r2,22892
   144b8:	18c7883a 	add	r3,r3,r3
   144bc:	18c7883a 	add	r3,r3,r3
   144c0:	10c5883a 	add	r2,r2,r3
   144c4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   144c8:	e0bff717 	ldw	r2,-36(fp)
   144cc:	10800617 	ldw	r2,24(r2)
   144d0:	1000091e 	bne	r2,zero,144f8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   144d4:	e0bff717 	ldw	r2,-36(fp)
   144d8:	10800517 	ldw	r2,20(r2)
   144dc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   144e0:	e0bff717 	ldw	r2,-36(fp)
   144e4:	10c00517 	ldw	r3,20(r2)
   144e8:	008000b4 	movhi	r2,2
   144ec:	10b9bd04 	addi	r2,r2,-6412
   144f0:	10c00015 	stw	r3,0(r2)
   144f4:	00000a06 	br	14520 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   144f8:	e0bff717 	ldw	r2,-36(fp)
   144fc:	10800617 	ldw	r2,24(r2)
   14500:	e0fff717 	ldw	r3,-36(fp)
   14504:	18c00517 	ldw	r3,20(r3)
   14508:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1450c:	e0bff717 	ldw	r2,-36(fp)
   14510:	10800517 	ldw	r2,20(r2)
   14514:	e0fff717 	ldw	r3,-36(fp)
   14518:	18c00617 	ldw	r3,24(r3)
   1451c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14520:	008000b4 	movhi	r2,2
   14524:	10b9c104 	addi	r2,r2,-6396
   14528:	10c00017 	ldw	r3,0(r2)
   1452c:	e0bff717 	ldw	r2,-36(fp)
   14530:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14534:	008000b4 	movhi	r2,2
   14538:	10b9c104 	addi	r2,r2,-6396
   1453c:	e0fff717 	ldw	r3,-36(fp)
   14540:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14544:	e0bff717 	ldw	r2,-36(fp)
   14548:	00c00fc4 	movi	r3,63
   1454c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14550:	e0bff717 	ldw	r2,-36(fp)
   14554:	10001345 	stb	zero,77(r2)
   14558:	e0bff617 	ldw	r2,-40(fp)
   1455c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14560:	e0bffe17 	ldw	r2,-8(fp)
   14564:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14568:	008000b4 	movhi	r2,2
   1456c:	10b9ba44 	addi	r2,r2,-6423
   14570:	10800003 	ldbu	r2,0(r2)
   14574:	10803fcc 	andi	r2,r2,255
   14578:	10800058 	cmpnei	r2,r2,1
   1457c:	1000011e 	bne	r2,zero,14584 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   14580:	000f3b80 	call	f3b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14584:	0005883a 	mov	r2,zero
}
   14588:	e037883a 	mov	sp,fp
   1458c:	dfc00117 	ldw	ra,4(sp)
   14590:	df000017 	ldw	fp,0(sp)
   14594:	dec00204 	addi	sp,sp,8
   14598:	f800283a 	ret

0001459c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1459c:	defff504 	addi	sp,sp,-44
   145a0:	df000a15 	stw	fp,40(sp)
   145a4:	df000a04 	addi	fp,sp,40
   145a8:	2005883a 	mov	r2,r4
   145ac:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   145b0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   145b4:	e0bfff03 	ldbu	r2,-4(fp)
   145b8:	10800518 	cmpnei	r2,r2,20
   145bc:	1000021e 	bne	r2,zero,145c8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   145c0:	00800f84 	movi	r2,62
   145c4:	00004706 	br	146e4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   145c8:	e0bfff03 	ldbu	r2,-4(fp)
   145cc:	10800530 	cmpltui	r2,r2,20
   145d0:	1000051e 	bne	r2,zero,145e8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   145d4:	e0bfff03 	ldbu	r2,-4(fp)
   145d8:	10803fe0 	cmpeqi	r2,r2,255
   145dc:	1000021e 	bne	r2,zero,145e8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   145e0:	00800a84 	movi	r2,42
   145e4:	00003f06 	br	146e4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   145e8:	e0bfff03 	ldbu	r2,-4(fp)
   145ec:	10803fd8 	cmpnei	r2,r2,255
   145f0:	1000131e 	bne	r2,zero,14640 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145f4:	0005303a 	rdctl	r2,status
   145f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145fc:	e0fff917 	ldw	r3,-28(fp)
   14600:	00bfff84 	movi	r2,-2
   14604:	1884703a 	and	r2,r3,r2
   14608:	1001703a 	wrctl	status,r2
  
  return context;
   1460c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14610:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14614:	008000b4 	movhi	r2,2
   14618:	10b9c904 	addi	r2,r2,-6364
   1461c:	10800017 	ldw	r2,0(r2)
   14620:	10800dc3 	ldbu	r2,55(r2)
   14624:	e0bff705 	stb	r2,-36(fp)
   14628:	e0bff617 	ldw	r2,-40(fp)
   1462c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14630:	e0bffa17 	ldw	r2,-24(fp)
   14634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14638:	e0bff703 	ldbu	r2,-36(fp)
   1463c:	00002906 	br	146e4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14640:	0005303a 	rdctl	r2,status
   14644:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14648:	e0fffb17 	ldw	r3,-20(fp)
   1464c:	00bfff84 	movi	r2,-2
   14650:	1884703a 	and	r2,r3,r2
   14654:	1001703a 	wrctl	status,r2
  
  return context;
   14658:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1465c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14660:	e0ffff03 	ldbu	r3,-4(fp)
   14664:	008000b4 	movhi	r2,2
   14668:	10965b04 	addi	r2,r2,22892
   1466c:	18c7883a 	add	r3,r3,r3
   14670:	18c7883a 	add	r3,r3,r3
   14674:	10c5883a 	add	r2,r2,r3
   14678:	10800017 	ldw	r2,0(r2)
   1467c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14680:	e0bff817 	ldw	r2,-32(fp)
   14684:	1000061e 	bne	r2,zero,146a0 <OSTaskDelReq+0x104>
   14688:	e0bff617 	ldw	r2,-40(fp)
   1468c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14690:	e0bffc17 	ldw	r2,-16(fp)
   14694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14698:	008010c4 	movi	r2,67
   1469c:	00001106 	br	146e4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   146a0:	e0bff817 	ldw	r2,-32(fp)
   146a4:	10800058 	cmpnei	r2,r2,1
   146a8:	1000061e 	bne	r2,zero,146c4 <OSTaskDelReq+0x128>
   146ac:	e0bff617 	ldw	r2,-40(fp)
   146b0:	e0bffd15 	stw	r2,-12(fp)
   146b4:	e0bffd17 	ldw	r2,-12(fp)
   146b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   146bc:	00800f44 	movi	r2,61
   146c0:	00000806 	br	146e4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   146c4:	e0bff817 	ldw	r2,-32(fp)
   146c8:	00c00fc4 	movi	r3,63
   146cc:	10c00dc5 	stb	r3,55(r2)
   146d0:	e0bff617 	ldw	r2,-40(fp)
   146d4:	e0bffe15 	stw	r2,-8(fp)
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   146e0:	0005883a 	mov	r2,zero
}
   146e4:	e037883a 	mov	sp,fp
   146e8:	df000017 	ldw	fp,0(sp)
   146ec:	dec00104 	addi	sp,sp,4
   146f0:	f800283a 	ret

000146f4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   146f4:	defff404 	addi	sp,sp,-48
   146f8:	dfc00b15 	stw	ra,44(sp)
   146fc:	df000a15 	stw	fp,40(sp)
   14700:	df000a04 	addi	fp,sp,40
   14704:	2005883a 	mov	r2,r4
   14708:	e17ffe15 	stw	r5,-8(fp)
   1470c:	e1bfff15 	stw	r6,-4(fp)
   14710:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14714:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14718:	e0bfff17 	ldw	r2,-4(fp)
   1471c:	1000021e 	bne	r2,zero,14728 <OSTaskNameGet+0x34>
        return (0);
   14720:	0005883a 	mov	r2,zero
   14724:	00005806 	br	14888 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14728:	e0bffd03 	ldbu	r2,-12(fp)
   1472c:	10800570 	cmpltui	r2,r2,21
   14730:	1000081e 	bne	r2,zero,14754 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14734:	e0bffd03 	ldbu	r2,-12(fp)
   14738:	10803fe0 	cmpeqi	r2,r2,255
   1473c:	1000051e 	bne	r2,zero,14754 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14740:	e0bfff17 	ldw	r2,-4(fp)
   14744:	00c00a84 	movi	r3,42
   14748:	10c00005 	stb	r3,0(r2)
            return (0);
   1474c:	0005883a 	mov	r2,zero
   14750:	00004d06 	br	14888 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14754:	e0bffe17 	ldw	r2,-8(fp)
   14758:	1000051e 	bne	r2,zero,14770 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1475c:	e0bfff17 	ldw	r2,-4(fp)
   14760:	00c00304 	movi	r3,12
   14764:	10c00005 	stb	r3,0(r2)
        return (0);
   14768:	0005883a 	mov	r2,zero
   1476c:	00004606 	br	14888 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14770:	008000b4 	movhi	r2,2
   14774:	10b9c804 	addi	r2,r2,-6368
   14778:	10800003 	ldbu	r2,0(r2)
   1477c:	10803fcc 	andi	r2,r2,255
   14780:	10000526 	beq	r2,zero,14798 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   14784:	e0bfff17 	ldw	r2,-4(fp)
   14788:	00c00444 	movi	r3,17
   1478c:	10c00005 	stb	r3,0(r2)
        return (0);
   14790:	0005883a 	mov	r2,zero
   14794:	00003c06 	br	14888 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14798:	0005303a 	rdctl	r2,status
   1479c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147a0:	e0fff917 	ldw	r3,-28(fp)
   147a4:	00bfff84 	movi	r2,-2
   147a8:	1884703a 	and	r2,r3,r2
   147ac:	1001703a 	wrctl	status,r2
  
  return context;
   147b0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   147b4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   147b8:	e0bffd03 	ldbu	r2,-12(fp)
   147bc:	10803fd8 	cmpnei	r2,r2,255
   147c0:	1000051e 	bne	r2,zero,147d8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   147c4:	008000b4 	movhi	r2,2
   147c8:	10b9c904 	addi	r2,r2,-6364
   147cc:	10800017 	ldw	r2,0(r2)
   147d0:	10800c83 	ldbu	r2,50(r2)
   147d4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   147d8:	e0fffd03 	ldbu	r3,-12(fp)
   147dc:	008000b4 	movhi	r2,2
   147e0:	10965b04 	addi	r2,r2,22892
   147e4:	18c7883a 	add	r3,r3,r3
   147e8:	18c7883a 	add	r3,r3,r3
   147ec:	10c5883a 	add	r2,r2,r3
   147f0:	10800017 	ldw	r2,0(r2)
   147f4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   147f8:	e0bff717 	ldw	r2,-36(fp)
   147fc:	1000091e 	bne	r2,zero,14824 <OSTaskNameGet+0x130>
   14800:	e0bff617 	ldw	r2,-40(fp)
   14804:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14808:	e0bffa17 	ldw	r2,-24(fp)
   1480c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14810:	e0bfff17 	ldw	r2,-4(fp)
   14814:	00c010c4 	movi	r3,67
   14818:	10c00005 	stb	r3,0(r2)
        return (0);
   1481c:	0005883a 	mov	r2,zero
   14820:	00001906 	br	14888 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14824:	e0bff717 	ldw	r2,-36(fp)
   14828:	10800058 	cmpnei	r2,r2,1
   1482c:	1000091e 	bne	r2,zero,14854 <OSTaskNameGet+0x160>
   14830:	e0bff617 	ldw	r2,-40(fp)
   14834:	e0bffb15 	stw	r2,-20(fp)
   14838:	e0bffb17 	ldw	r2,-20(fp)
   1483c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14840:	e0bfff17 	ldw	r2,-4(fp)
   14844:	00c010c4 	movi	r3,67
   14848:	10c00005 	stb	r3,0(r2)
        return (0);
   1484c:	0005883a 	mov	r2,zero
   14850:	00000d06 	br	14888 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14854:	e0bff717 	ldw	r2,-36(fp)
   14858:	10801304 	addi	r2,r2,76
   1485c:	e13ffe17 	ldw	r4,-8(fp)
   14860:	100b883a 	mov	r5,r2
   14864:	000f4f40 	call	f4f4 <OS_StrCopy>
   14868:	e0bff805 	stb	r2,-32(fp)
   1486c:	e0bff617 	ldw	r2,-40(fp)
   14870:	e0bffc15 	stw	r2,-16(fp)
   14874:	e0bffc17 	ldw	r2,-16(fp)
   14878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1487c:	e0bfff17 	ldw	r2,-4(fp)
   14880:	10000005 	stb	zero,0(r2)
    return (len);
   14884:	e0bff803 	ldbu	r2,-32(fp)
}
   14888:	e037883a 	mov	sp,fp
   1488c:	dfc00117 	ldw	ra,4(sp)
   14890:	df000017 	ldw	fp,0(sp)
   14894:	dec00204 	addi	sp,sp,8
   14898:	f800283a 	ret

0001489c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1489c:	defff304 	addi	sp,sp,-52
   148a0:	dfc00c15 	stw	ra,48(sp)
   148a4:	df000b15 	stw	fp,44(sp)
   148a8:	df000b04 	addi	fp,sp,44
   148ac:	2005883a 	mov	r2,r4
   148b0:	e17ffe15 	stw	r5,-8(fp)
   148b4:	e1bfff15 	stw	r6,-4(fp)
   148b8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   148bc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   148c0:	e0bfff17 	ldw	r2,-4(fp)
   148c4:	1000011e 	bne	r2,zero,148cc <OSTaskNameSet+0x30>
        return;
   148c8:	00005f06 	br	14a48 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   148cc:	e0bffd03 	ldbu	r2,-12(fp)
   148d0:	10800570 	cmpltui	r2,r2,21
   148d4:	1000071e 	bne	r2,zero,148f4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   148d8:	e0bffd03 	ldbu	r2,-12(fp)
   148dc:	10803fe0 	cmpeqi	r2,r2,255
   148e0:	1000041e 	bne	r2,zero,148f4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	00c00a84 	movi	r3,42
   148ec:	10c00005 	stb	r3,0(r2)
            return;
   148f0:	00005506 	br	14a48 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   148f4:	e0bffe17 	ldw	r2,-8(fp)
   148f8:	1000041e 	bne	r2,zero,1490c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   148fc:	e0bfff17 	ldw	r2,-4(fp)
   14900:	00c00304 	movi	r3,12
   14904:	10c00005 	stb	r3,0(r2)
        return;
   14908:	00004f06 	br	14a48 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1490c:	008000b4 	movhi	r2,2
   14910:	10b9c804 	addi	r2,r2,-6368
   14914:	10800003 	ldbu	r2,0(r2)
   14918:	10803fcc 	andi	r2,r2,255
   1491c:	10000426 	beq	r2,zero,14930 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   14920:	e0bfff17 	ldw	r2,-4(fp)
   14924:	00c00484 	movi	r3,18
   14928:	10c00005 	stb	r3,0(r2)
        return;
   1492c:	00004606 	br	14a48 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14930:	0005303a 	rdctl	r2,status
   14934:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14938:	e0fff817 	ldw	r3,-32(fp)
   1493c:	00bfff84 	movi	r2,-2
   14940:	1884703a 	and	r2,r3,r2
   14944:	1001703a 	wrctl	status,r2
  
  return context;
   14948:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1494c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14950:	e0bffd03 	ldbu	r2,-12(fp)
   14954:	10803fd8 	cmpnei	r2,r2,255
   14958:	1000051e 	bne	r2,zero,14970 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1495c:	008000b4 	movhi	r2,2
   14960:	10b9c904 	addi	r2,r2,-6364
   14964:	10800017 	ldw	r2,0(r2)
   14968:	10800c83 	ldbu	r2,50(r2)
   1496c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14970:	e0fffd03 	ldbu	r3,-12(fp)
   14974:	008000b4 	movhi	r2,2
   14978:	10965b04 	addi	r2,r2,22892
   1497c:	18c7883a 	add	r3,r3,r3
   14980:	18c7883a 	add	r3,r3,r3
   14984:	10c5883a 	add	r2,r2,r3
   14988:	10800017 	ldw	r2,0(r2)
   1498c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14990:	e0bff617 	ldw	r2,-40(fp)
   14994:	1000081e 	bne	r2,zero,149b8 <OSTaskNameSet+0x11c>
   14998:	e0bff517 	ldw	r2,-44(fp)
   1499c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149a0:	e0bff917 	ldw	r2,-28(fp)
   149a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   149a8:	e0bfff17 	ldw	r2,-4(fp)
   149ac:	00c010c4 	movi	r3,67
   149b0:	10c00005 	stb	r3,0(r2)
        return;
   149b4:	00002406 	br	14a48 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   149b8:	e0bff617 	ldw	r2,-40(fp)
   149bc:	10800058 	cmpnei	r2,r2,1
   149c0:	1000081e 	bne	r2,zero,149e4 <OSTaskNameSet+0x148>
   149c4:	e0bff517 	ldw	r2,-44(fp)
   149c8:	e0bffa15 	stw	r2,-24(fp)
   149cc:	e0bffa17 	ldw	r2,-24(fp)
   149d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   149d4:	e0bfff17 	ldw	r2,-4(fp)
   149d8:	00c010c4 	movi	r3,67
   149dc:	10c00005 	stb	r3,0(r2)
        return;
   149e0:	00001906 	br	14a48 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   149e4:	e13ffe17 	ldw	r4,-8(fp)
   149e8:	000f5680 	call	f568 <OS_StrLen>
   149ec:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   149f0:	e0bff703 	ldbu	r2,-36(fp)
   149f4:	10800830 	cmpltui	r2,r2,32
   149f8:	1000081e 	bne	r2,zero,14a1c <OSTaskNameSet+0x180>
   149fc:	e0bff517 	ldw	r2,-44(fp)
   14a00:	e0bffb15 	stw	r2,-20(fp)
   14a04:	e0bffb17 	ldw	r2,-20(fp)
   14a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14a0c:	e0bfff17 	ldw	r2,-4(fp)
   14a10:	00c01044 	movi	r3,65
   14a14:	10c00005 	stb	r3,0(r2)
        return;
   14a18:	00000b06 	br	14a48 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14a1c:	e0bff617 	ldw	r2,-40(fp)
   14a20:	10801304 	addi	r2,r2,76
   14a24:	1009883a 	mov	r4,r2
   14a28:	e17ffe17 	ldw	r5,-8(fp)
   14a2c:	000f4f40 	call	f4f4 <OS_StrCopy>
   14a30:	e0bff517 	ldw	r2,-44(fp)
   14a34:	e0bffc15 	stw	r2,-16(fp)
   14a38:	e0bffc17 	ldw	r2,-16(fp)
   14a3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	10000005 	stb	zero,0(r2)
}
   14a48:	e037883a 	mov	sp,fp
   14a4c:	dfc00117 	ldw	ra,4(sp)
   14a50:	df000017 	ldw	fp,0(sp)
   14a54:	dec00204 	addi	sp,sp,8
   14a58:	f800283a 	ret

00014a5c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14a5c:	defff404 	addi	sp,sp,-48
   14a60:	dfc00b15 	stw	ra,44(sp)
   14a64:	df000a15 	stw	fp,40(sp)
   14a68:	df000a04 	addi	fp,sp,40
   14a6c:	2005883a 	mov	r2,r4
   14a70:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14a74:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14a78:	e0bfff03 	ldbu	r2,-4(fp)
   14a7c:	10800530 	cmpltui	r2,r2,20
   14a80:	1000021e 	bne	r2,zero,14a8c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14a84:	00800a84 	movi	r2,42
   14a88:	00006d06 	br	14c40 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a8c:	0005303a 	rdctl	r2,status
   14a90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a94:	e0fff817 	ldw	r3,-32(fp)
   14a98:	00bfff84 	movi	r2,-2
   14a9c:	1884703a 	and	r2,r3,r2
   14aa0:	1001703a 	wrctl	status,r2
  
  return context;
   14aa4:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14aa8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14aac:	e0ffff03 	ldbu	r3,-4(fp)
   14ab0:	008000b4 	movhi	r2,2
   14ab4:	10965b04 	addi	r2,r2,22892
   14ab8:	18c7883a 	add	r3,r3,r3
   14abc:	18c7883a 	add	r3,r3,r3
   14ac0:	10c5883a 	add	r2,r2,r3
   14ac4:	10800017 	ldw	r2,0(r2)
   14ac8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14acc:	e0bff717 	ldw	r2,-36(fp)
   14ad0:	1000061e 	bne	r2,zero,14aec <OSTaskResume+0x90>
   14ad4:	e0bff617 	ldw	r2,-40(fp)
   14ad8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14adc:	e0bff917 	ldw	r2,-28(fp)
   14ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14ae4:	00801184 	movi	r2,70
   14ae8:	00005506 	br	14c40 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14aec:	e0bff717 	ldw	r2,-36(fp)
   14af0:	10800058 	cmpnei	r2,r2,1
   14af4:	1000061e 	bne	r2,zero,14b10 <OSTaskResume+0xb4>
   14af8:	e0bff617 	ldw	r2,-40(fp)
   14afc:	e0bffa15 	stw	r2,-24(fp)
   14b00:	e0bffa17 	ldw	r2,-24(fp)
   14b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14b08:	008010c4 	movi	r2,67
   14b0c:	00004c06 	br	14c40 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14b10:	e0bff717 	ldw	r2,-36(fp)
   14b14:	10800c03 	ldbu	r2,48(r2)
   14b18:	10803fcc 	andi	r2,r2,255
   14b1c:	1080020c 	andi	r2,r2,8
   14b20:	10004226 	beq	r2,zero,14c2c <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14b24:	e0bff717 	ldw	r2,-36(fp)
   14b28:	10c00c03 	ldbu	r3,48(r2)
   14b2c:	00bffdc4 	movi	r2,-9
   14b30:	1884703a 	and	r2,r3,r2
   14b34:	1007883a 	mov	r3,r2
   14b38:	e0bff717 	ldw	r2,-36(fp)
   14b3c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14b40:	e0bff717 	ldw	r2,-36(fp)
   14b44:	10800c03 	ldbu	r2,48(r2)
   14b48:	10803fcc 	andi	r2,r2,255
   14b4c:	1000311e 	bne	r2,zero,14c14 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   14b50:	e0bff717 	ldw	r2,-36(fp)
   14b54:	10800b8b 	ldhu	r2,46(r2)
   14b58:	10bfffcc 	andi	r2,r2,65535
   14b5c:	1000281e 	bne	r2,zero,14c00 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14b60:	e0bff717 	ldw	r2,-36(fp)
   14b64:	10c00d83 	ldbu	r3,54(r2)
   14b68:	008000b4 	movhi	r2,2
   14b6c:	10b9c604 	addi	r2,r2,-6376
   14b70:	10800003 	ldbu	r2,0(r2)
   14b74:	1884b03a 	or	r2,r3,r2
   14b78:	1007883a 	mov	r3,r2
   14b7c:	008000b4 	movhi	r2,2
   14b80:	10b9c604 	addi	r2,r2,-6376
   14b84:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14b88:	e0bff717 	ldw	r2,-36(fp)
   14b8c:	10800d03 	ldbu	r2,52(r2)
   14b90:	10c03fcc 	andi	r3,r2,255
   14b94:	e0bff717 	ldw	r2,-36(fp)
   14b98:	10800d03 	ldbu	r2,52(r2)
   14b9c:	11003fcc 	andi	r4,r2,255
   14ba0:	008000b4 	movhi	r2,2
   14ba4:	10b9c644 	addi	r2,r2,-6375
   14ba8:	1105883a 	add	r2,r2,r4
   14bac:	11000003 	ldbu	r4,0(r2)
   14bb0:	e0bff717 	ldw	r2,-36(fp)
   14bb4:	10800d43 	ldbu	r2,53(r2)
   14bb8:	2084b03a 	or	r2,r4,r2
   14bbc:	1009883a 	mov	r4,r2
   14bc0:	008000b4 	movhi	r2,2
   14bc4:	10b9c644 	addi	r2,r2,-6375
   14bc8:	10c5883a 	add	r2,r2,r3
   14bcc:	11000005 	stb	r4,0(r2)
   14bd0:	e0bff617 	ldw	r2,-40(fp)
   14bd4:	e0bffb15 	stw	r2,-20(fp)
   14bd8:	e0bffb17 	ldw	r2,-20(fp)
   14bdc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14be0:	008000b4 	movhi	r2,2
   14be4:	10b9ba44 	addi	r2,r2,-6423
   14be8:	10800003 	ldbu	r2,0(r2)
   14bec:	10803fcc 	andi	r2,r2,255
   14bf0:	10800058 	cmpnei	r2,r2,1
   14bf4:	10000b1e 	bne	r2,zero,14c24 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   14bf8:	000f3b80 	call	f3b8 <OS_Sched>
   14bfc:	00000906 	br	14c24 <OSTaskResume+0x1c8>
   14c00:	e0bff617 	ldw	r2,-40(fp)
   14c04:	e0bffc15 	stw	r2,-16(fp)
   14c08:	e0bffc17 	ldw	r2,-16(fp)
   14c0c:	1001703a 	wrctl	status,r2
   14c10:	00000406 	br	14c24 <OSTaskResume+0x1c8>
   14c14:	e0bff617 	ldw	r2,-40(fp)
   14c18:	e0bffd15 	stw	r2,-12(fp)
   14c1c:	e0bffd17 	ldw	r2,-12(fp)
   14c20:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14c24:	0005883a 	mov	r2,zero
   14c28:	00000506 	br	14c40 <OSTaskResume+0x1e4>
   14c2c:	e0bff617 	ldw	r2,-40(fp)
   14c30:	e0bffe15 	stw	r2,-8(fp)
   14c34:	e0bffe17 	ldw	r2,-8(fp)
   14c38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14c3c:	00801104 	movi	r2,68
}
   14c40:	e037883a 	mov	sp,fp
   14c44:	dfc00117 	ldw	ra,4(sp)
   14c48:	df000017 	ldw	fp,0(sp)
   14c4c:	dec00204 	addi	sp,sp,8
   14c50:	f800283a 	ret

00014c54 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14c54:	defff304 	addi	sp,sp,-52
   14c58:	df000c15 	stw	fp,48(sp)
   14c5c:	df000c04 	addi	fp,sp,48
   14c60:	2005883a 	mov	r2,r4
   14c64:	e17fff15 	stw	r5,-4(fp)
   14c68:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14c6c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14c70:	e0bffe03 	ldbu	r2,-8(fp)
   14c74:	10800570 	cmpltui	r2,r2,21
   14c78:	1000051e 	bne	r2,zero,14c90 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14c7c:	e0bffe03 	ldbu	r2,-8(fp)
   14c80:	10803fe0 	cmpeqi	r2,r2,255
   14c84:	1000021e 	bne	r2,zero,14c90 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14c88:	00800a84 	movi	r2,42
   14c8c:	00005f06 	br	14e0c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14c90:	e0bfff17 	ldw	r2,-4(fp)
   14c94:	1000021e 	bne	r2,zero,14ca0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14c98:	00800244 	movi	r2,9
   14c9c:	00005b06 	br	14e0c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14ca0:	e0bfff17 	ldw	r2,-4(fp)
   14ca4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14ca8:	e0bfff17 	ldw	r2,-4(fp)
   14cac:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cb0:	0005303a 	rdctl	r2,status
   14cb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cb8:	e0fff917 	ldw	r3,-28(fp)
   14cbc:	00bfff84 	movi	r2,-2
   14cc0:	1884703a 	and	r2,r3,r2
   14cc4:	1001703a 	wrctl	status,r2
  
  return context;
   14cc8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14ccc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14cd0:	e0bffe03 	ldbu	r2,-8(fp)
   14cd4:	10803fd8 	cmpnei	r2,r2,255
   14cd8:	1000051e 	bne	r2,zero,14cf0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14cdc:	008000b4 	movhi	r2,2
   14ce0:	10b9c904 	addi	r2,r2,-6364
   14ce4:	10800017 	ldw	r2,0(r2)
   14ce8:	10800c83 	ldbu	r2,50(r2)
   14cec:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14cf0:	e0fffe03 	ldbu	r3,-8(fp)
   14cf4:	008000b4 	movhi	r2,2
   14cf8:	10965b04 	addi	r2,r2,22892
   14cfc:	18c7883a 	add	r3,r3,r3
   14d00:	18c7883a 	add	r3,r3,r3
   14d04:	10c5883a 	add	r2,r2,r3
   14d08:	10800017 	ldw	r2,0(r2)
   14d0c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14d10:	e0bff717 	ldw	r2,-36(fp)
   14d14:	1000061e 	bne	r2,zero,14d30 <OSTaskStkChk+0xdc>
   14d18:	e0bff617 	ldw	r2,-40(fp)
   14d1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d20:	e0bffa17 	ldw	r2,-24(fp)
   14d24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14d28:	008010c4 	movi	r2,67
   14d2c:	00003706 	br	14e0c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14d30:	e0bff717 	ldw	r2,-36(fp)
   14d34:	10800058 	cmpnei	r2,r2,1
   14d38:	1000061e 	bne	r2,zero,14d54 <OSTaskStkChk+0x100>
   14d3c:	e0bff617 	ldw	r2,-40(fp)
   14d40:	e0bffb15 	stw	r2,-20(fp)
   14d44:	e0bffb17 	ldw	r2,-20(fp)
   14d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14d4c:	008010c4 	movi	r2,67
   14d50:	00002e06 	br	14e0c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14d54:	e0bff717 	ldw	r2,-36(fp)
   14d58:	1080040b 	ldhu	r2,16(r2)
   14d5c:	10bfffcc 	andi	r2,r2,65535
   14d60:	1080004c 	andi	r2,r2,1
   14d64:	1000061e 	bne	r2,zero,14d80 <OSTaskStkChk+0x12c>
   14d68:	e0bff617 	ldw	r2,-40(fp)
   14d6c:	e0bffc15 	stw	r2,-16(fp)
   14d70:	e0bffc17 	ldw	r2,-16(fp)
   14d74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14d78:	00801144 	movi	r2,69
   14d7c:	00002306 	br	14e0c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   14d80:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14d84:	e0bff717 	ldw	r2,-36(fp)
   14d88:	10800317 	ldw	r2,12(r2)
   14d8c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14d90:	e0bff717 	ldw	r2,-36(fp)
   14d94:	10800217 	ldw	r2,8(r2)
   14d98:	e0bff415 	stw	r2,-48(fp)
   14d9c:	e0bff617 	ldw	r2,-40(fp)
   14da0:	e0bffd15 	stw	r2,-12(fp)
   14da4:	e0bffd17 	ldw	r2,-12(fp)
   14da8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14dac:	00000306 	br	14dbc <OSTaskStkChk+0x168>
        nfree++;
   14db0:	e0bff517 	ldw	r2,-44(fp)
   14db4:	10800044 	addi	r2,r2,1
   14db8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14dbc:	e0bff417 	ldw	r2,-48(fp)
   14dc0:	10c00104 	addi	r3,r2,4
   14dc4:	e0fff415 	stw	r3,-48(fp)
   14dc8:	10800017 	ldw	r2,0(r2)
   14dcc:	103ff826 	beq	r2,zero,14db0 <__alt_mem_Flash_flash_data+0xf4014db0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14dd0:	e0bff517 	ldw	r2,-44(fp)
   14dd4:	1085883a 	add	r2,r2,r2
   14dd8:	1085883a 	add	r2,r2,r2
   14ddc:	1007883a 	mov	r3,r2
   14de0:	e0bfff17 	ldw	r2,-4(fp)
   14de4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14de8:	e0fff817 	ldw	r3,-32(fp)
   14dec:	e0bff517 	ldw	r2,-44(fp)
   14df0:	1885c83a 	sub	r2,r3,r2
   14df4:	1085883a 	add	r2,r2,r2
   14df8:	1085883a 	add	r2,r2,r2
   14dfc:	1007883a 	mov	r3,r2
   14e00:	e0bfff17 	ldw	r2,-4(fp)
   14e04:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14e08:	0005883a 	mov	r2,zero
}
   14e0c:	e037883a 	mov	sp,fp
   14e10:	df000017 	ldw	fp,0(sp)
   14e14:	dec00104 	addi	sp,sp,4
   14e18:	f800283a 	ret

00014e1c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14e1c:	defff504 	addi	sp,sp,-44
   14e20:	dfc00a15 	stw	ra,40(sp)
   14e24:	df000915 	stw	fp,36(sp)
   14e28:	df000904 	addi	fp,sp,36
   14e2c:	2005883a 	mov	r2,r4
   14e30:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14e38:	e0bfff03 	ldbu	r2,-4(fp)
   14e3c:	10800518 	cmpnei	r2,r2,20
   14e40:	1000021e 	bne	r2,zero,14e4c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   14e44:	008011c4 	movi	r2,71
   14e48:	00007406 	br	1501c <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14e4c:	e0bfff03 	ldbu	r2,-4(fp)
   14e50:	10800530 	cmpltui	r2,r2,20
   14e54:	1000051e 	bne	r2,zero,14e6c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14e58:	e0bfff03 	ldbu	r2,-4(fp)
   14e5c:	10803fe0 	cmpeqi	r2,r2,255
   14e60:	1000021e 	bne	r2,zero,14e6c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   14e64:	00800a84 	movi	r2,42
   14e68:	00006c06 	br	1501c <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e6c:	0005303a 	rdctl	r2,status
   14e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e74:	e0fffb17 	ldw	r3,-20(fp)
   14e78:	00bfff84 	movi	r2,-2
   14e7c:	1884703a 	and	r2,r3,r2
   14e80:	1001703a 	wrctl	status,r2
  
  return context;
   14e84:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14e88:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14e8c:	e0bfff03 	ldbu	r2,-4(fp)
   14e90:	10803fd8 	cmpnei	r2,r2,255
   14e94:	1000081e 	bne	r2,zero,14eb8 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14e98:	008000b4 	movhi	r2,2
   14e9c:	10b9c904 	addi	r2,r2,-6364
   14ea0:	10800017 	ldw	r2,0(r2)
   14ea4:	10800c83 	ldbu	r2,50(r2)
   14ea8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14eac:	00800044 	movi	r2,1
   14eb0:	e0bff705 	stb	r2,-36(fp)
   14eb4:	00000b06 	br	14ee4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14eb8:	008000b4 	movhi	r2,2
   14ebc:	10b9c904 	addi	r2,r2,-6364
   14ec0:	10800017 	ldw	r2,0(r2)
   14ec4:	10800c83 	ldbu	r2,50(r2)
   14ec8:	10c03fcc 	andi	r3,r2,255
   14ecc:	e0bfff03 	ldbu	r2,-4(fp)
   14ed0:	1880031e 	bne	r3,r2,14ee0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   14ed4:	00800044 	movi	r2,1
   14ed8:	e0bff705 	stb	r2,-36(fp)
   14edc:	00000106 	br	14ee4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   14ee0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ee4:	e0ffff03 	ldbu	r3,-4(fp)
   14ee8:	008000b4 	movhi	r2,2
   14eec:	10965b04 	addi	r2,r2,22892
   14ef0:	18c7883a 	add	r3,r3,r3
   14ef4:	18c7883a 	add	r3,r3,r3
   14ef8:	10c5883a 	add	r2,r2,r3
   14efc:	10800017 	ldw	r2,0(r2)
   14f00:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   14f04:	e0bff917 	ldw	r2,-28(fp)
   14f08:	1000061e 	bne	r2,zero,14f24 <OSTaskSuspend+0x108>
   14f0c:	e0bff817 	ldw	r2,-32(fp)
   14f10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f14:	e0bffc17 	ldw	r2,-16(fp)
   14f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14f1c:	00801204 	movi	r2,72
   14f20:	00003e06 	br	1501c <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14f24:	e0bff917 	ldw	r2,-28(fp)
   14f28:	10800058 	cmpnei	r2,r2,1
   14f2c:	1000061e 	bne	r2,zero,14f48 <OSTaskSuspend+0x12c>
   14f30:	e0bff817 	ldw	r2,-32(fp)
   14f34:	e0bffd15 	stw	r2,-12(fp)
   14f38:	e0bffd17 	ldw	r2,-12(fp)
   14f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14f40:	008010c4 	movi	r2,67
   14f44:	00003506 	br	1501c <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   14f48:	e0bff917 	ldw	r2,-28(fp)
   14f4c:	10800d03 	ldbu	r2,52(r2)
   14f50:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   14f54:	e0fffa03 	ldbu	r3,-24(fp)
   14f58:	e13ffa03 	ldbu	r4,-24(fp)
   14f5c:	008000b4 	movhi	r2,2
   14f60:	10b9c644 	addi	r2,r2,-6375
   14f64:	1105883a 	add	r2,r2,r4
   14f68:	10800003 	ldbu	r2,0(r2)
   14f6c:	1009883a 	mov	r4,r2
   14f70:	e0bff917 	ldw	r2,-28(fp)
   14f74:	10800d43 	ldbu	r2,53(r2)
   14f78:	0084303a 	nor	r2,zero,r2
   14f7c:	2084703a 	and	r2,r4,r2
   14f80:	1009883a 	mov	r4,r2
   14f84:	008000b4 	movhi	r2,2
   14f88:	10b9c644 	addi	r2,r2,-6375
   14f8c:	10c5883a 	add	r2,r2,r3
   14f90:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14f94:	e0fffa03 	ldbu	r3,-24(fp)
   14f98:	008000b4 	movhi	r2,2
   14f9c:	10b9c644 	addi	r2,r2,-6375
   14fa0:	10c5883a 	add	r2,r2,r3
   14fa4:	10800003 	ldbu	r2,0(r2)
   14fa8:	10803fcc 	andi	r2,r2,255
   14fac:	10000c1e 	bne	r2,zero,14fe0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14fb0:	e0bff917 	ldw	r2,-28(fp)
   14fb4:	10800d83 	ldbu	r2,54(r2)
   14fb8:	0084303a 	nor	r2,zero,r2
   14fbc:	1007883a 	mov	r3,r2
   14fc0:	008000b4 	movhi	r2,2
   14fc4:	10b9c604 	addi	r2,r2,-6376
   14fc8:	10800003 	ldbu	r2,0(r2)
   14fcc:	1884703a 	and	r2,r3,r2
   14fd0:	1007883a 	mov	r3,r2
   14fd4:	008000b4 	movhi	r2,2
   14fd8:	10b9c604 	addi	r2,r2,-6376
   14fdc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   14fe0:	e0bff917 	ldw	r2,-28(fp)
   14fe4:	10800c03 	ldbu	r2,48(r2)
   14fe8:	10800214 	ori	r2,r2,8
   14fec:	1007883a 	mov	r3,r2
   14ff0:	e0bff917 	ldw	r2,-28(fp)
   14ff4:	10c00c05 	stb	r3,48(r2)
   14ff8:	e0bff817 	ldw	r2,-32(fp)
   14ffc:	e0bffe15 	stw	r2,-8(fp)
   15000:	e0bffe17 	ldw	r2,-8(fp)
   15004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   15008:	e0bff703 	ldbu	r2,-36(fp)
   1500c:	10800058 	cmpnei	r2,r2,1
   15010:	1000011e 	bne	r2,zero,15018 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   15014:	000f3b80 	call	f3b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15018:	0005883a 	mov	r2,zero
}
   1501c:	e037883a 	mov	sp,fp
   15020:	dfc00117 	ldw	ra,4(sp)
   15024:	df000017 	ldw	fp,0(sp)
   15028:	dec00204 	addi	sp,sp,8
   1502c:	f800283a 	ret

00015030 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15030:	defff604 	addi	sp,sp,-40
   15034:	dfc00915 	stw	ra,36(sp)
   15038:	df000815 	stw	fp,32(sp)
   1503c:	df000804 	addi	fp,sp,32
   15040:	2005883a 	mov	r2,r4
   15044:	e17fff15 	stw	r5,-4(fp)
   15048:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1504c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   15050:	e0bffe03 	ldbu	r2,-8(fp)
   15054:	10800570 	cmpltui	r2,r2,21
   15058:	1000051e 	bne	r2,zero,15070 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1505c:	e0bffe03 	ldbu	r2,-8(fp)
   15060:	10803fe0 	cmpeqi	r2,r2,255
   15064:	1000021e 	bne	r2,zero,15070 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   15068:	00800a84 	movi	r2,42
   1506c:	00003606 	br	15148 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15070:	e0bfff17 	ldw	r2,-4(fp)
   15074:	1000021e 	bne	r2,zero,15080 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   15078:	00800244 	movi	r2,9
   1507c:	00003206 	br	15148 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15080:	0005303a 	rdctl	r2,status
   15084:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15088:	e0fffa17 	ldw	r3,-24(fp)
   1508c:	00bfff84 	movi	r2,-2
   15090:	1884703a 	and	r2,r3,r2
   15094:	1001703a 	wrctl	status,r2
  
  return context;
   15098:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1509c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   150a0:	e0bffe03 	ldbu	r2,-8(fp)
   150a4:	10803fd8 	cmpnei	r2,r2,255
   150a8:	1000051e 	bne	r2,zero,150c0 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   150ac:	008000b4 	movhi	r2,2
   150b0:	10b9c904 	addi	r2,r2,-6364
   150b4:	10800017 	ldw	r2,0(r2)
   150b8:	10800c83 	ldbu	r2,50(r2)
   150bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   150c0:	e0fffe03 	ldbu	r3,-8(fp)
   150c4:	008000b4 	movhi	r2,2
   150c8:	10965b04 	addi	r2,r2,22892
   150cc:	18c7883a 	add	r3,r3,r3
   150d0:	18c7883a 	add	r3,r3,r3
   150d4:	10c5883a 	add	r2,r2,r3
   150d8:	10800017 	ldw	r2,0(r2)
   150dc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   150e0:	e0bff917 	ldw	r2,-28(fp)
   150e4:	1000061e 	bne	r2,zero,15100 <OSTaskQuery+0xd0>
   150e8:	e0bff817 	ldw	r2,-32(fp)
   150ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150f0:	e0bffb17 	ldw	r2,-20(fp)
   150f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   150f8:	00800a44 	movi	r2,41
   150fc:	00001206 	br	15148 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15100:	e0bff917 	ldw	r2,-28(fp)
   15104:	10800058 	cmpnei	r2,r2,1
   15108:	1000061e 	bne	r2,zero,15124 <OSTaskQuery+0xf4>
   1510c:	e0bff817 	ldw	r2,-32(fp)
   15110:	e0bffc15 	stw	r2,-16(fp)
   15114:	e0bffc17 	ldw	r2,-16(fp)
   15118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1511c:	008010c4 	movi	r2,67
   15120:	00000906 	br	15148 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   15124:	e13fff17 	ldw	r4,-4(fp)
   15128:	e17ff917 	ldw	r5,-28(fp)
   1512c:	01801b04 	movi	r6,108
   15130:	000f3540 	call	f354 <OS_MemCopy>
   15134:	e0bff817 	ldw	r2,-32(fp)
   15138:	e0bffd15 	stw	r2,-12(fp)
   1513c:	e0bffd17 	ldw	r2,-12(fp)
   15140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15144:	0005883a 	mov	r2,zero
}
   15148:	e037883a 	mov	sp,fp
   1514c:	dfc00117 	ldw	ra,4(sp)
   15150:	df000017 	ldw	fp,0(sp)
   15154:	dec00204 	addi	sp,sp,8
   15158:	f800283a 	ret

0001515c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1515c:	defffc04 	addi	sp,sp,-16
   15160:	df000315 	stw	fp,12(sp)
   15164:	df000304 	addi	fp,sp,12
   15168:	e13ffd15 	stw	r4,-12(fp)
   1516c:	e17ffe15 	stw	r5,-8(fp)
   15170:	3005883a 	mov	r2,r6
   15174:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15178:	e0bfff0b 	ldhu	r2,-4(fp)
   1517c:	1080004c 	andi	r2,r2,1
   15180:	10000d26 	beq	r2,zero,151b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15184:	e0bfff0b 	ldhu	r2,-4(fp)
   15188:	1080008c 	andi	r2,r2,2
   1518c:	10000a26 	beq	r2,zero,151b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15190:	00000706 	br	151b0 <OS_TaskStkClr+0x54>
                size--;
   15194:	e0bffe17 	ldw	r2,-8(fp)
   15198:	10bfffc4 	addi	r2,r2,-1
   1519c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   151a0:	e0bffd17 	ldw	r2,-12(fp)
   151a4:	10c00104 	addi	r3,r2,4
   151a8:	e0fffd15 	stw	r3,-12(fp)
   151ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   151b0:	e0bffe17 	ldw	r2,-8(fp)
   151b4:	103ff71e 	bne	r2,zero,15194 <__alt_mem_Flash_flash_data+0xf4015194>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   151b8:	e037883a 	mov	sp,fp
   151bc:	df000017 	ldw	fp,0(sp)
   151c0:	dec00104 	addi	sp,sp,4
   151c4:	f800283a 	ret

000151c8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   151c8:	defff904 	addi	sp,sp,-28
   151cc:	dfc00615 	stw	ra,24(sp)
   151d0:	df000515 	stw	fp,20(sp)
   151d4:	df000504 	addi	fp,sp,20
   151d8:	2005883a 	mov	r2,r4
   151dc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   151e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   151e4:	008000b4 	movhi	r2,2
   151e8:	10b9c804 	addi	r2,r2,-6368
   151ec:	10800003 	ldbu	r2,0(r2)
   151f0:	10803fcc 	andi	r2,r2,255
   151f4:	10000126 	beq	r2,zero,151fc <OSTimeDly+0x34>
        return;
   151f8:	00004006 	br	152fc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   151fc:	e0bfff0b 	ldhu	r2,-4(fp)
   15200:	10003e26 	beq	r2,zero,152fc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15204:	0005303a 	rdctl	r2,status
   15208:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1520c:	e0fffd17 	ldw	r3,-12(fp)
   15210:	00bfff84 	movi	r2,-2
   15214:	1884703a 	and	r2,r3,r2
   15218:	1001703a 	wrctl	status,r2
  
  return context;
   1521c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   15220:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15224:	008000b4 	movhi	r2,2
   15228:	10b9c904 	addi	r2,r2,-6364
   1522c:	10800017 	ldw	r2,0(r2)
   15230:	10800d03 	ldbu	r2,52(r2)
   15234:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15238:	e0fffc03 	ldbu	r3,-16(fp)
   1523c:	e13ffc03 	ldbu	r4,-16(fp)
   15240:	008000b4 	movhi	r2,2
   15244:	10b9c644 	addi	r2,r2,-6375
   15248:	1105883a 	add	r2,r2,r4
   1524c:	10800003 	ldbu	r2,0(r2)
   15250:	1009883a 	mov	r4,r2
   15254:	008000b4 	movhi	r2,2
   15258:	10b9c904 	addi	r2,r2,-6364
   1525c:	10800017 	ldw	r2,0(r2)
   15260:	10800d43 	ldbu	r2,53(r2)
   15264:	0084303a 	nor	r2,zero,r2
   15268:	2084703a 	and	r2,r4,r2
   1526c:	1009883a 	mov	r4,r2
   15270:	008000b4 	movhi	r2,2
   15274:	10b9c644 	addi	r2,r2,-6375
   15278:	10c5883a 	add	r2,r2,r3
   1527c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15280:	e0fffc03 	ldbu	r3,-16(fp)
   15284:	008000b4 	movhi	r2,2
   15288:	10b9c644 	addi	r2,r2,-6375
   1528c:	10c5883a 	add	r2,r2,r3
   15290:	10800003 	ldbu	r2,0(r2)
   15294:	10803fcc 	andi	r2,r2,255
   15298:	10000e1e 	bne	r2,zero,152d4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1529c:	008000b4 	movhi	r2,2
   152a0:	10b9c904 	addi	r2,r2,-6364
   152a4:	10800017 	ldw	r2,0(r2)
   152a8:	10800d83 	ldbu	r2,54(r2)
   152ac:	0084303a 	nor	r2,zero,r2
   152b0:	1007883a 	mov	r3,r2
   152b4:	008000b4 	movhi	r2,2
   152b8:	10b9c604 	addi	r2,r2,-6376
   152bc:	10800003 	ldbu	r2,0(r2)
   152c0:	1884703a 	and	r2,r3,r2
   152c4:	1007883a 	mov	r3,r2
   152c8:	008000b4 	movhi	r2,2
   152cc:	10b9c604 	addi	r2,r2,-6376
   152d0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   152d4:	008000b4 	movhi	r2,2
   152d8:	10b9c904 	addi	r2,r2,-6364
   152dc:	10800017 	ldw	r2,0(r2)
   152e0:	e0ffff0b 	ldhu	r3,-4(fp)
   152e4:	10c00b8d 	sth	r3,46(r2)
   152e8:	e0bffb17 	ldw	r2,-20(fp)
   152ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152f0:	e0bffe17 	ldw	r2,-8(fp)
   152f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   152f8:	000f3b80 	call	f3b8 <OS_Sched>
    }
}
   152fc:	e037883a 	mov	sp,fp
   15300:	dfc00117 	ldw	ra,4(sp)
   15304:	df000017 	ldw	fp,0(sp)
   15308:	dec00204 	addi	sp,sp,8
   1530c:	f800283a 	ret

00015310 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15310:	defff804 	addi	sp,sp,-32
   15314:	dfc00715 	stw	ra,28(sp)
   15318:	df000615 	stw	fp,24(sp)
   1531c:	df000604 	addi	fp,sp,24
   15320:	2015883a 	mov	r10,r4
   15324:	2809883a 	mov	r4,r5
   15328:	3007883a 	mov	r3,r6
   1532c:	3805883a 	mov	r2,r7
   15330:	e2bffc05 	stb	r10,-16(fp)
   15334:	e13ffd05 	stb	r4,-12(fp)
   15338:	e0fffe05 	stb	r3,-8(fp)
   1533c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15340:	008000b4 	movhi	r2,2
   15344:	10b9c804 	addi	r2,r2,-6368
   15348:	10800003 	ldbu	r2,0(r2)
   1534c:	10803fcc 	andi	r2,r2,255
   15350:	10000226 	beq	r2,zero,1535c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   15354:	00801544 	movi	r2,85
   15358:	00004206 	br	15464 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1535c:	e0bffc03 	ldbu	r2,-16(fp)
   15360:	1000081e 	bne	r2,zero,15384 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   15364:	e0bffd03 	ldbu	r2,-12(fp)
   15368:	1000061e 	bne	r2,zero,15384 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1536c:	e0bffe03 	ldbu	r2,-8(fp)
   15370:	1000041e 	bne	r2,zero,15384 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   15374:	e0bfff0b 	ldhu	r2,-4(fp)
   15378:	1000021e 	bne	r2,zero,15384 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1537c:	00801504 	movi	r2,84
   15380:	00003806 	br	15464 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   15384:	e0bffd03 	ldbu	r2,-12(fp)
   15388:	10800f30 	cmpltui	r2,r2,60
   1538c:	1000021e 	bne	r2,zero,15398 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15390:	00801444 	movi	r2,81
   15394:	00003306 	br	15464 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   15398:	e0bffe03 	ldbu	r2,-8(fp)
   1539c:	10800f30 	cmpltui	r2,r2,60
   153a0:	1000021e 	bne	r2,zero,153ac <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   153a4:	00801484 	movi	r2,82
   153a8:	00002e06 	br	15464 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   153ac:	e0bfff0b 	ldhu	r2,-4(fp)
   153b0:	1080fa30 	cmpltui	r2,r2,1000
   153b4:	1000021e 	bne	r2,zero,153c0 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   153b8:	008014c4 	movi	r2,83
   153bc:	00002906 	br	15464 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   153c0:	e0bffc03 	ldbu	r2,-16(fp)
   153c4:	10c38424 	muli	r3,r2,3600
   153c8:	e0bffd03 	ldbu	r2,-12(fp)
   153cc:	10800f24 	muli	r2,r2,60
   153d0:	1887883a 	add	r3,r3,r2
   153d4:	e0bffe03 	ldbu	r2,-8(fp)
   153d8:	1885883a 	add	r2,r3,r2
   153dc:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   153e0:	e0bfff0b 	ldhu	r2,-4(fp)
   153e4:	10800f84 	addi	r2,r2,62
   153e8:	100690fa 	slli	r3,r2,3
   153ec:	008418b4 	movhi	r2,4194
   153f0:	109374c4 	addi	r2,r2,19923
   153f4:	188a383a 	mulxuu	r5,r3,r2
   153f8:	1885383a 	mul	r2,r3,r2
   153fc:	1011883a 	mov	r8,r2
   15400:	2813883a 	mov	r9,r5
   15404:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15408:	2085883a 	add	r2,r4,r2
   1540c:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15410:	e0bffb17 	ldw	r2,-20(fp)
   15414:	1004d43a 	srli	r2,r2,16
   15418:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1541c:	e0bffb17 	ldw	r2,-20(fp)
   15420:	10bfffcc 	andi	r2,r2,65535
   15424:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   15428:	e0bffb17 	ldw	r2,-20(fp)
   1542c:	10bfffcc 	andi	r2,r2,65535
   15430:	1009883a 	mov	r4,r2
   15434:	00151c80 	call	151c8 <OSTimeDly>
    while (loops > 0) {
   15438:	00000706 	br	15458 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1543c:	01200014 	movui	r4,32768
   15440:	00151c80 	call	151c8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15444:	01200014 	movui	r4,32768
   15448:	00151c80 	call	151c8 <OSTimeDly>
        loops--;
   1544c:	e0bffa0b 	ldhu	r2,-24(fp)
   15450:	10bfffc4 	addi	r2,r2,-1
   15454:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15458:	e0bffa0b 	ldhu	r2,-24(fp)
   1545c:	103ff71e 	bne	r2,zero,1543c <__alt_mem_Flash_flash_data+0xf401543c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15460:	0005883a 	mov	r2,zero
}
   15464:	e037883a 	mov	sp,fp
   15468:	dfc00117 	ldw	ra,4(sp)
   1546c:	df000017 	ldw	fp,0(sp)
   15470:	dec00204 	addi	sp,sp,8
   15474:	f800283a 	ret

00015478 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15478:	defff504 	addi	sp,sp,-44
   1547c:	dfc00a15 	stw	ra,40(sp)
   15480:	df000915 	stw	fp,36(sp)
   15484:	df000904 	addi	fp,sp,36
   15488:	2005883a 	mov	r2,r4
   1548c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15490:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15494:	e0bfff03 	ldbu	r2,-4(fp)
   15498:	10800530 	cmpltui	r2,r2,20
   1549c:	1000021e 	bne	r2,zero,154a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   154a0:	00800a84 	movi	r2,42
   154a4:	00006b06 	br	15654 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154a8:	0005303a 	rdctl	r2,status
   154ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154b0:	e0fff917 	ldw	r3,-28(fp)
   154b4:	00bfff84 	movi	r2,-2
   154b8:	1884703a 	and	r2,r3,r2
   154bc:	1001703a 	wrctl	status,r2
  
  return context;
   154c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   154c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   154c8:	e0ffff03 	ldbu	r3,-4(fp)
   154cc:	008000b4 	movhi	r2,2
   154d0:	10965b04 	addi	r2,r2,22892
   154d4:	18c7883a 	add	r3,r3,r3
   154d8:	18c7883a 	add	r3,r3,r3
   154dc:	10c5883a 	add	r2,r2,r3
   154e0:	10800017 	ldw	r2,0(r2)
   154e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   154e8:	e0bff817 	ldw	r2,-32(fp)
   154ec:	1000061e 	bne	r2,zero,15508 <OSTimeDlyResume+0x90>
   154f0:	e0bff717 	ldw	r2,-36(fp)
   154f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154f8:	e0bffa17 	ldw	r2,-24(fp)
   154fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15500:	008010c4 	movi	r2,67
   15504:	00005306 	br	15654 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15508:	e0bff817 	ldw	r2,-32(fp)
   1550c:	10800058 	cmpnei	r2,r2,1
   15510:	1000061e 	bne	r2,zero,1552c <OSTimeDlyResume+0xb4>
   15514:	e0bff717 	ldw	r2,-36(fp)
   15518:	e0bffb15 	stw	r2,-20(fp)
   1551c:	e0bffb17 	ldw	r2,-20(fp)
   15520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15524:	008010c4 	movi	r2,67
   15528:	00004a06 	br	15654 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1552c:	e0bff817 	ldw	r2,-32(fp)
   15530:	10800b8b 	ldhu	r2,46(r2)
   15534:	10bfffcc 	andi	r2,r2,65535
   15538:	1000061e 	bne	r2,zero,15554 <OSTimeDlyResume+0xdc>
   1553c:	e0bff717 	ldw	r2,-36(fp)
   15540:	e0bffc15 	stw	r2,-16(fp)
   15544:	e0bffc17 	ldw	r2,-16(fp)
   15548:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1554c:	00801404 	movi	r2,80
   15550:	00004006 	br	15654 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15554:	e0bff817 	ldw	r2,-32(fp)
   15558:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1555c:	e0bff817 	ldw	r2,-32(fp)
   15560:	10800c03 	ldbu	r2,48(r2)
   15564:	10803fcc 	andi	r2,r2,255
   15568:	10800dcc 	andi	r2,r2,55
   1556c:	10000b26 	beq	r2,zero,1559c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15570:	e0bff817 	ldw	r2,-32(fp)
   15574:	10c00c03 	ldbu	r3,48(r2)
   15578:	00bff204 	movi	r2,-56
   1557c:	1884703a 	and	r2,r3,r2
   15580:	1007883a 	mov	r3,r2
   15584:	e0bff817 	ldw	r2,-32(fp)
   15588:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1558c:	e0bff817 	ldw	r2,-32(fp)
   15590:	00c00044 	movi	r3,1
   15594:	10c00c45 	stb	r3,49(r2)
   15598:	00000206 	br	155a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1559c:	e0bff817 	ldw	r2,-32(fp)
   155a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   155a4:	e0bff817 	ldw	r2,-32(fp)
   155a8:	10800c03 	ldbu	r2,48(r2)
   155ac:	10803fcc 	andi	r2,r2,255
   155b0:	1080020c 	andi	r2,r2,8
   155b4:	1000221e 	bne	r2,zero,15640 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   155b8:	e0bff817 	ldw	r2,-32(fp)
   155bc:	10c00d83 	ldbu	r3,54(r2)
   155c0:	008000b4 	movhi	r2,2
   155c4:	10b9c604 	addi	r2,r2,-6376
   155c8:	10800003 	ldbu	r2,0(r2)
   155cc:	1884b03a 	or	r2,r3,r2
   155d0:	1007883a 	mov	r3,r2
   155d4:	008000b4 	movhi	r2,2
   155d8:	10b9c604 	addi	r2,r2,-6376
   155dc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   155e0:	e0bff817 	ldw	r2,-32(fp)
   155e4:	10800d03 	ldbu	r2,52(r2)
   155e8:	10c03fcc 	andi	r3,r2,255
   155ec:	e0bff817 	ldw	r2,-32(fp)
   155f0:	10800d03 	ldbu	r2,52(r2)
   155f4:	11003fcc 	andi	r4,r2,255
   155f8:	008000b4 	movhi	r2,2
   155fc:	10b9c644 	addi	r2,r2,-6375
   15600:	1105883a 	add	r2,r2,r4
   15604:	11000003 	ldbu	r4,0(r2)
   15608:	e0bff817 	ldw	r2,-32(fp)
   1560c:	10800d43 	ldbu	r2,53(r2)
   15610:	2084b03a 	or	r2,r4,r2
   15614:	1009883a 	mov	r4,r2
   15618:	008000b4 	movhi	r2,2
   1561c:	10b9c644 	addi	r2,r2,-6375
   15620:	10c5883a 	add	r2,r2,r3
   15624:	11000005 	stb	r4,0(r2)
   15628:	e0bff717 	ldw	r2,-36(fp)
   1562c:	e0bffd15 	stw	r2,-12(fp)
   15630:	e0bffd17 	ldw	r2,-12(fp)
   15634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15638:	000f3b80 	call	f3b8 <OS_Sched>
   1563c:	00000406 	br	15650 <OSTimeDlyResume+0x1d8>
   15640:	e0bff717 	ldw	r2,-36(fp)
   15644:	e0bffe15 	stw	r2,-8(fp)
   15648:	e0bffe17 	ldw	r2,-8(fp)
   1564c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15650:	0005883a 	mov	r2,zero
}
   15654:	e037883a 	mov	sp,fp
   15658:	dfc00117 	ldw	ra,4(sp)
   1565c:	df000017 	ldw	fp,0(sp)
   15660:	dec00204 	addi	sp,sp,8
   15664:	f800283a 	ret

00015668 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15668:	defffb04 	addi	sp,sp,-20
   1566c:	df000415 	stw	fp,16(sp)
   15670:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15674:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15678:	0005303a 	rdctl	r2,status
   1567c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15680:	e0fffe17 	ldw	r3,-8(fp)
   15684:	00bfff84 	movi	r2,-2
   15688:	1884703a 	and	r2,r3,r2
   1568c:	1001703a 	wrctl	status,r2
  
  return context;
   15690:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15694:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15698:	008000b4 	movhi	r2,2
   1569c:	10b9ca04 	addi	r2,r2,-6360
   156a0:	10800017 	ldw	r2,0(r2)
   156a4:	e0bffd15 	stw	r2,-12(fp)
   156a8:	e0bffc17 	ldw	r2,-16(fp)
   156ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   156b8:	e0bffd17 	ldw	r2,-12(fp)
}
   156bc:	e037883a 	mov	sp,fp
   156c0:	df000017 	ldw	fp,0(sp)
   156c4:	dec00104 	addi	sp,sp,4
   156c8:	f800283a 	ret

000156cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   156cc:	defffb04 	addi	sp,sp,-20
   156d0:	df000415 	stw	fp,16(sp)
   156d4:	df000404 	addi	fp,sp,16
   156d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156e0:	0005303a 	rdctl	r2,status
   156e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156e8:	e0fffd17 	ldw	r3,-12(fp)
   156ec:	00bfff84 	movi	r2,-2
   156f0:	1884703a 	and	r2,r3,r2
   156f4:	1001703a 	wrctl	status,r2
  
  return context;
   156f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   156fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15700:	008000b4 	movhi	r2,2
   15704:	10b9ca04 	addi	r2,r2,-6360
   15708:	e0ffff17 	ldw	r3,-4(fp)
   1570c:	10c00015 	stw	r3,0(r2)
   15710:	e0bffc17 	ldw	r2,-16(fp)
   15714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15718:	e0bffe17 	ldw	r2,-8(fp)
   1571c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15720:	e037883a 	mov	sp,fp
   15724:	df000017 	ldw	fp,0(sp)
   15728:	dec00104 	addi	sp,sp,4
   1572c:	f800283a 	ret

00015730 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15730:	defffd04 	addi	sp,sp,-12
   15734:	dfc00215 	stw	ra,8(sp)
   15738:	df000115 	stw	fp,4(sp)
   1573c:	df000104 	addi	fp,sp,4
   15740:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15744:	e13fff17 	ldw	r4,-4(fp)
   15748:	014000b4 	movhi	r5,2
   1574c:	29710a04 	addi	r5,r5,-15320
   15750:	00186e00 	call	186e0 <alt_dev_llist_insert>
}
   15754:	e037883a 	mov	sp,fp
   15758:	dfc00117 	ldw	ra,4(sp)
   1575c:	df000017 	ldw	fp,0(sp)
   15760:	dec00204 	addi	sp,sp,8
   15764:	f800283a 	ret

00015768 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15768:	defffd04 	addi	sp,sp,-12
   1576c:	dfc00215 	stw	ra,8(sp)
   15770:	df000115 	stw	fp,4(sp)
   15774:	df000104 	addi	fp,sp,4
   15778:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1577c:	0018ff40 	call	18ff4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15780:	00800044 	movi	r2,1
   15784:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15788:	e037883a 	mov	sp,fp
   1578c:	dfc00117 	ldw	ra,4(sp)
   15790:	df000017 	ldw	fp,0(sp)
   15794:	dec00204 	addi	sp,sp,8
   15798:	f800283a 	ret

0001579c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1579c:	defffd04 	addi	sp,sp,-12
   157a0:	dfc00215 	stw	ra,8(sp)
   157a4:	df000115 	stw	fp,4(sp)
   157a8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   157ac:	01040034 	movhi	r4,4096
   157b0:	21080004 	addi	r4,r4,8192
   157b4:	000b883a 	mov	r5,zero
   157b8:	000d883a 	mov	r6,zero
   157bc:	01c00204 	movi	r7,8
   157c0:	00169100 	call	16910 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   157c4:	010000b4 	movhi	r4,2
   157c8:	212b5a04 	addi	r4,r4,-21144
   157cc:	000b883a 	mov	r5,zero
   157d0:	01800204 	movi	r6,8
   157d4:	0015cd80 	call	15cd8 <altera_avalon_jtag_uart_init>
   157d8:	010000b4 	movhi	r4,2
   157dc:	212b5004 	addi	r4,r4,-21184
   157e0:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   157e4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   157e8:	010000b4 	movhi	r4,2
   157ec:	212f6b04 	addi	r4,r4,-16980
   157f0:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   157f4:	010000b4 	movhi	r4,2
   157f8:	212f7704 	addi	r4,r4,-16932
   157fc:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15800:	010000b4 	movhi	r4,2
   15804:	212f8304 	addi	r4,r4,-16884
   15808:	0016a400 	call	16a40 <alt_up_character_lcd_init>
   1580c:	010000b4 	movhi	r4,2
   15810:	212f8304 	addi	r4,r4,-16884
   15814:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15818:	010000b4 	movhi	r4,2
   1581c:	212f8e04 	addi	r4,r4,-16840
   15820:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   15824:	010000b4 	movhi	r4,2
   15828:	212f9904 	addi	r4,r4,-16796
   1582c:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   15830:	010000b4 	movhi	r4,2
   15834:	212fa404 	addi	r4,r4,-16752
   15838:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1583c:	010000b4 	movhi	r4,2
   15840:	212faf04 	addi	r4,r4,-16708
   15844:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   15848:	010000b4 	movhi	r4,2
   1584c:	212fba04 	addi	r4,r4,-16664
   15850:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   15854:	010000b4 	movhi	r4,2
   15858:	212fc504 	addi	r4,r4,-16620
   1585c:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   15860:	010000b4 	movhi	r4,2
   15864:	212fd004 	addi	r4,r4,-16576
   15868:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1586c:	010000b4 	movhi	r4,2
   15870:	212fdb04 	addi	r4,r4,-16532
   15874:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15878:	010000b4 	movhi	r4,2
   1587c:	212fe604 	addi	r4,r4,-16488
   15880:	00173580 	call	17358 <alt_up_ps2_init>
   15884:	010000b4 	movhi	r4,2
   15888:	212fe604 	addi	r4,r4,-16488
   1588c:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15890:	010000b4 	movhi	r4,2
   15894:	212ff404 	addi	r4,r4,-16432
   15898:	00173580 	call	17358 <alt_up_ps2_init>
   1589c:	010000b4 	movhi	r4,2
   158a0:	212ff404 	addi	r4,r4,-16432
   158a4:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   158a8:	010000b4 	movhi	r4,2
   158ac:	21300204 	addi	r4,r4,-16376
   158b0:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   158b4:	010000b4 	movhi	r4,2
   158b8:	21300d04 	addi	r4,r4,-16332
   158bc:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   158c0:	008000b4 	movhi	r2,2
   158c4:	10b01a04 	addi	r2,r2,-16280
   158c8:	10800a17 	ldw	r2,40(r2)
   158cc:	10800104 	addi	r2,r2,4
   158d0:	10800017 	ldw	r2,0(r2)
   158d4:	10ffffcc 	andi	r3,r2,65535
   158d8:	008000b4 	movhi	r2,2
   158dc:	10b01a04 	addi	r2,r2,-16280
   158e0:	10c00c15 	stw	r3,48(r2)
   158e4:	008000b4 	movhi	r2,2
   158e8:	10b01a04 	addi	r2,r2,-16280
   158ec:	10800a17 	ldw	r2,40(r2)
   158f0:	10800104 	addi	r2,r2,4
   158f4:	10800017 	ldw	r2,0(r2)
   158f8:	1006d43a 	srli	r3,r2,16
   158fc:	008000b4 	movhi	r2,2
   15900:	10b01a04 	addi	r2,r2,-16280
   15904:	10c00d15 	stw	r3,52(r2)
   15908:	008000b4 	movhi	r2,2
   1590c:	10b01a04 	addi	r2,r2,-16280
   15910:	10800c17 	ldw	r2,48(r2)
   15914:	10801068 	cmpgeui	r2,r2,65
   15918:	1000081e 	bne	r2,zero,1593c <alt_sys_init+0x1a0>
   1591c:	008000b4 	movhi	r2,2
   15920:	10b01a04 	addi	r2,r2,-16280
   15924:	00c00fc4 	movi	r3,63
   15928:	10c00f15 	stw	r3,60(r2)
   1592c:	008000b4 	movhi	r2,2
   15930:	10b01a04 	addi	r2,r2,-16280
   15934:	00c00184 	movi	r3,6
   15938:	10c01015 	stw	r3,64(r2)
   1593c:	008000b4 	movhi	r2,2
   15940:	10b01a04 	addi	r2,r2,-16280
   15944:	10800d17 	ldw	r2,52(r2)
   15948:	10800868 	cmpgeui	r2,r2,33
   1594c:	1000041e 	bne	r2,zero,15960 <alt_sys_init+0x1c4>
   15950:	008000b4 	movhi	r2,2
   15954:	10b01a04 	addi	r2,r2,-16280
   15958:	00c007c4 	movi	r3,31
   1595c:	10c01115 	stw	r3,68(r2)
   15960:	010000b4 	movhi	r4,2
   15964:	21301a04 	addi	r4,r4,-16280
   15968:	0017c700 	call	17c70 <alt_up_char_buffer_init>
   1596c:	010000b4 	movhi	r4,2
   15970:	21301a04 	addi	r4,r4,-16280
   15974:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15978:	008000b4 	movhi	r2,2
   1597c:	10b02c04 	addi	r2,r2,-16208
   15980:	10800a17 	ldw	r2,40(r2)
   15984:	10800017 	ldw	r2,0(r2)
   15988:	1007883a 	mov	r3,r2
   1598c:	008000b4 	movhi	r2,2
   15990:	10b02c04 	addi	r2,r2,-16208
   15994:	10c00b15 	stw	r3,44(r2)
   15998:	008000b4 	movhi	r2,2
   1599c:	10b02c04 	addi	r2,r2,-16208
   159a0:	10800a17 	ldw	r2,40(r2)
   159a4:	10800104 	addi	r2,r2,4
   159a8:	10800017 	ldw	r2,0(r2)
   159ac:	1007883a 	mov	r3,r2
   159b0:	008000b4 	movhi	r2,2
   159b4:	10b02c04 	addi	r2,r2,-16208
   159b8:	10c00c15 	stw	r3,48(r2)
   159bc:	008000b4 	movhi	r2,2
   159c0:	10b02c04 	addi	r2,r2,-16208
   159c4:	10800a17 	ldw	r2,40(r2)
   159c8:	10800204 	addi	r2,r2,8
   159cc:	10800017 	ldw	r2,0(r2)
   159d0:	10ffffcc 	andi	r3,r2,65535
   159d4:	008000b4 	movhi	r2,2
   159d8:	10b02c04 	addi	r2,r2,-16208
   159dc:	10c00f15 	stw	r3,60(r2)
   159e0:	008000b4 	movhi	r2,2
   159e4:	10b02c04 	addi	r2,r2,-16208
   159e8:	10800a17 	ldw	r2,40(r2)
   159ec:	10800204 	addi	r2,r2,8
   159f0:	10800017 	ldw	r2,0(r2)
   159f4:	1006d43a 	srli	r3,r2,16
   159f8:	008000b4 	movhi	r2,2
   159fc:	10b02c04 	addi	r2,r2,-16208
   15a00:	10c01015 	stw	r3,64(r2)
   15a04:	008000b4 	movhi	r2,2
   15a08:	10b02c04 	addi	r2,r2,-16208
   15a0c:	10800a17 	ldw	r2,40(r2)
   15a10:	10800304 	addi	r2,r2,12
   15a14:	10800017 	ldw	r2,0(r2)
   15a18:	1005d07a 	srai	r2,r2,1
   15a1c:	10c0004c 	andi	r3,r2,1
   15a20:	008000b4 	movhi	r2,2
   15a24:	10b02c04 	addi	r2,r2,-16208
   15a28:	10c00d15 	stw	r3,52(r2)
   15a2c:	008000b4 	movhi	r2,2
   15a30:	10b02c04 	addi	r2,r2,-16208
   15a34:	10800a17 	ldw	r2,40(r2)
   15a38:	10800304 	addi	r2,r2,12
   15a3c:	10800017 	ldw	r2,0(r2)
   15a40:	1005d13a 	srai	r2,r2,4
   15a44:	10c003cc 	andi	r3,r2,15
   15a48:	008000b4 	movhi	r2,2
   15a4c:	10b02c04 	addi	r2,r2,-16208
   15a50:	10c00e15 	stw	r3,56(r2)
   15a54:	008000b4 	movhi	r2,2
   15a58:	10b02c04 	addi	r2,r2,-16208
   15a5c:	10800a17 	ldw	r2,40(r2)
   15a60:	10800304 	addi	r2,r2,12
   15a64:	10800017 	ldw	r2,0(r2)
   15a68:	1005d43a 	srai	r2,r2,16
   15a6c:	e0bfff05 	stb	r2,-4(fp)
   15a70:	008000b4 	movhi	r2,2
   15a74:	10b02c04 	addi	r2,r2,-16208
   15a78:	10800a17 	ldw	r2,40(r2)
   15a7c:	10800304 	addi	r2,r2,12
   15a80:	10800017 	ldw	r2,0(r2)
   15a84:	1004d63a 	srli	r2,r2,24
   15a88:	e0bfff45 	stb	r2,-3(fp)
   15a8c:	008000b4 	movhi	r2,2
   15a90:	10b02c04 	addi	r2,r2,-16208
   15a94:	10800e17 	ldw	r2,56(r2)
   15a98:	10800058 	cmpnei	r2,r2,1
   15a9c:	1000041e 	bne	r2,zero,15ab0 <alt_sys_init+0x314>
   15aa0:	008000b4 	movhi	r2,2
   15aa4:	10b02c04 	addi	r2,r2,-16208
   15aa8:	10001115 	stw	zero,68(r2)
   15aac:	00000e06 	br	15ae8 <alt_sys_init+0x34c>
   15ab0:	008000b4 	movhi	r2,2
   15ab4:	10b02c04 	addi	r2,r2,-16208
   15ab8:	10800e17 	ldw	r2,56(r2)
   15abc:	10800098 	cmpnei	r2,r2,2
   15ac0:	1000051e 	bne	r2,zero,15ad8 <alt_sys_init+0x33c>
   15ac4:	008000b4 	movhi	r2,2
   15ac8:	10b02c04 	addi	r2,r2,-16208
   15acc:	00c00044 	movi	r3,1
   15ad0:	10c01115 	stw	r3,68(r2)
   15ad4:	00000406 	br	15ae8 <alt_sys_init+0x34c>
   15ad8:	008000b4 	movhi	r2,2
   15adc:	10b02c04 	addi	r2,r2,-16208
   15ae0:	00c00084 	movi	r3,2
   15ae4:	10c01115 	stw	r3,68(r2)
   15ae8:	e0bfff03 	ldbu	r2,-4(fp)
   15aec:	00c00804 	movi	r3,32
   15af0:	1885c83a 	sub	r2,r3,r2
   15af4:	00ffffc4 	movi	r3,-1
   15af8:	1886d83a 	srl	r3,r3,r2
   15afc:	008000b4 	movhi	r2,2
   15b00:	10b02c04 	addi	r2,r2,-16208
   15b04:	10c01215 	stw	r3,72(r2)
   15b08:	e0ffff03 	ldbu	r3,-4(fp)
   15b0c:	008000b4 	movhi	r2,2
   15b10:	10b02c04 	addi	r2,r2,-16208
   15b14:	10801117 	ldw	r2,68(r2)
   15b18:	1887883a 	add	r3,r3,r2
   15b1c:	008000b4 	movhi	r2,2
   15b20:	10b02c04 	addi	r2,r2,-16208
   15b24:	10c01315 	stw	r3,76(r2)
   15b28:	e0bfff43 	ldbu	r2,-3(fp)
   15b2c:	00c00804 	movi	r3,32
   15b30:	1885c83a 	sub	r2,r3,r2
   15b34:	00ffffc4 	movi	r3,-1
   15b38:	1886d83a 	srl	r3,r3,r2
   15b3c:	008000b4 	movhi	r2,2
   15b40:	10b02c04 	addi	r2,r2,-16208
   15b44:	10c01415 	stw	r3,80(r2)
   15b48:	010000b4 	movhi	r4,2
   15b4c:	21302c04 	addi	r4,r4,-16208
   15b50:	00157300 	call	15730 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   15b54:	010000b4 	movhi	r4,2
   15b58:	21304104 	addi	r4,r4,-16124
   15b5c:	00157300 	call	15730 <alt_dev_reg>
}
   15b60:	e037883a 	mov	sp,fp
   15b64:	dfc00117 	ldw	ra,4(sp)
   15b68:	df000017 	ldw	fp,0(sp)
   15b6c:	dec00204 	addi	sp,sp,8
   15b70:	f800283a 	ret

00015b74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15b74:	defffa04 	addi	sp,sp,-24
   15b78:	dfc00515 	stw	ra,20(sp)
   15b7c:	df000415 	stw	fp,16(sp)
   15b80:	df000404 	addi	fp,sp,16
   15b84:	e13ffd15 	stw	r4,-12(fp)
   15b88:	e17ffe15 	stw	r5,-8(fp)
   15b8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15b90:	e0bffd17 	ldw	r2,-12(fp)
   15b94:	10800017 	ldw	r2,0(r2)
   15b98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15b9c:	e0bffc17 	ldw	r2,-16(fp)
   15ba0:	10c00a04 	addi	r3,r2,40
   15ba4:	e0bffd17 	ldw	r2,-12(fp)
   15ba8:	10800217 	ldw	r2,8(r2)
   15bac:	1809883a 	mov	r4,r3
   15bb0:	e17ffe17 	ldw	r5,-8(fp)
   15bb4:	e1bfff17 	ldw	r6,-4(fp)
   15bb8:	100f883a 	mov	r7,r2
   15bbc:	00163240 	call	16324 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15bc0:	e037883a 	mov	sp,fp
   15bc4:	dfc00117 	ldw	ra,4(sp)
   15bc8:	df000017 	ldw	fp,0(sp)
   15bcc:	dec00204 	addi	sp,sp,8
   15bd0:	f800283a 	ret

00015bd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15bd4:	defffa04 	addi	sp,sp,-24
   15bd8:	dfc00515 	stw	ra,20(sp)
   15bdc:	df000415 	stw	fp,16(sp)
   15be0:	df000404 	addi	fp,sp,16
   15be4:	e13ffd15 	stw	r4,-12(fp)
   15be8:	e17ffe15 	stw	r5,-8(fp)
   15bec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15bf0:	e0bffd17 	ldw	r2,-12(fp)
   15bf4:	10800017 	ldw	r2,0(r2)
   15bf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15bfc:	e0bffc17 	ldw	r2,-16(fp)
   15c00:	10c00a04 	addi	r3,r2,40
   15c04:	e0bffd17 	ldw	r2,-12(fp)
   15c08:	10800217 	ldw	r2,8(r2)
   15c0c:	1809883a 	mov	r4,r3
   15c10:	e17ffe17 	ldw	r5,-8(fp)
   15c14:	e1bfff17 	ldw	r6,-4(fp)
   15c18:	100f883a 	mov	r7,r2
   15c1c:	00165d80 	call	165d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15c20:	e037883a 	mov	sp,fp
   15c24:	dfc00117 	ldw	ra,4(sp)
   15c28:	df000017 	ldw	fp,0(sp)
   15c2c:	dec00204 	addi	sp,sp,8
   15c30:	f800283a 	ret

00015c34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15c34:	defffc04 	addi	sp,sp,-16
   15c38:	dfc00315 	stw	ra,12(sp)
   15c3c:	df000215 	stw	fp,8(sp)
   15c40:	df000204 	addi	fp,sp,8
   15c44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15c48:	e0bfff17 	ldw	r2,-4(fp)
   15c4c:	10800017 	ldw	r2,0(r2)
   15c50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15c54:	e0bffe17 	ldw	r2,-8(fp)
   15c58:	10c00a04 	addi	r3,r2,40
   15c5c:	e0bfff17 	ldw	r2,-4(fp)
   15c60:	10800217 	ldw	r2,8(r2)
   15c64:	1809883a 	mov	r4,r3
   15c68:	100b883a 	mov	r5,r2
   15c6c:	00161d00 	call	161d0 <altera_avalon_jtag_uart_close>
}
   15c70:	e037883a 	mov	sp,fp
   15c74:	dfc00117 	ldw	ra,4(sp)
   15c78:	df000017 	ldw	fp,0(sp)
   15c7c:	dec00204 	addi	sp,sp,8
   15c80:	f800283a 	ret

00015c84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15c84:	defffa04 	addi	sp,sp,-24
   15c88:	dfc00515 	stw	ra,20(sp)
   15c8c:	df000415 	stw	fp,16(sp)
   15c90:	df000404 	addi	fp,sp,16
   15c94:	e13ffd15 	stw	r4,-12(fp)
   15c98:	e17ffe15 	stw	r5,-8(fp)
   15c9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15ca0:	e0bffd17 	ldw	r2,-12(fp)
   15ca4:	10800017 	ldw	r2,0(r2)
   15ca8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15cac:	e0bffc17 	ldw	r2,-16(fp)
   15cb0:	10800a04 	addi	r2,r2,40
   15cb4:	1009883a 	mov	r4,r2
   15cb8:	e17ffe17 	ldw	r5,-8(fp)
   15cbc:	e1bfff17 	ldw	r6,-4(fp)
   15cc0:	00162380 	call	16238 <altera_avalon_jtag_uart_ioctl>
}
   15cc4:	e037883a 	mov	sp,fp
   15cc8:	dfc00117 	ldw	ra,4(sp)
   15ccc:	df000017 	ldw	fp,0(sp)
   15cd0:	dec00204 	addi	sp,sp,8
   15cd4:	f800283a 	ret

00015cd8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15cd8:	defff104 	addi	sp,sp,-60
   15cdc:	dfc00e15 	stw	ra,56(sp)
   15ce0:	df000d15 	stw	fp,52(sp)
   15ce4:	df000d04 	addi	fp,sp,52
   15ce8:	e13ff915 	stw	r4,-28(fp)
   15cec:	e17ffa15 	stw	r5,-24(fp)
   15cf0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15cf4:	e0bff917 	ldw	r2,-28(fp)
   15cf8:	10800c04 	addi	r2,r2,48
   15cfc:	e0bff315 	stw	r2,-52(fp)
   15d00:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15d04:	e0fff40b 	ldhu	r3,-48(fp)
   15d08:	e0bff884 	addi	r2,fp,-30
   15d0c:	1809883a 	mov	r4,r3
   15d10:	100b883a 	mov	r5,r2
   15d14:	000ff240 	call	ff24 <OSFlagCreate>
   15d18:	1007883a 	mov	r3,r2
   15d1c:	e0bff317 	ldw	r2,-52(fp)
   15d20:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15d24:	e0bff917 	ldw	r2,-28(fp)
   15d28:	10800a04 	addi	r2,r2,40
   15d2c:	e0bff515 	stw	r2,-44(fp)
   15d30:	00800044 	movi	r2,1
   15d34:	e0bff60d 	sth	r2,-40(fp)
   15d38:	e0bff60b 	ldhu	r2,-40(fp)
   15d3c:	1009883a 	mov	r4,r2
   15d40:	0012e7c0 	call	12e7c <OSSemCreate>
   15d44:	1007883a 	mov	r3,r2
   15d48:	e0bff517 	ldw	r2,-44(fp)
   15d4c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15d50:	e0bff917 	ldw	r2,-28(fp)
   15d54:	10800b04 	addi	r2,r2,44
   15d58:	e0bff715 	stw	r2,-36(fp)
   15d5c:	00800044 	movi	r2,1
   15d60:	e0bff80d 	sth	r2,-32(fp)
   15d64:	e0bff80b 	ldhu	r2,-32(fp)
   15d68:	1009883a 	mov	r4,r2
   15d6c:	0012e7c0 	call	12e7c <OSSemCreate>
   15d70:	1007883a 	mov	r3,r2
   15d74:	e0bff717 	ldw	r2,-36(fp)
   15d78:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15d7c:	e0bff917 	ldw	r2,-28(fp)
   15d80:	00c00044 	movi	r3,1
   15d84:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15d88:	e0bff917 	ldw	r2,-28(fp)
   15d8c:	10800017 	ldw	r2,0(r2)
   15d90:	10800104 	addi	r2,r2,4
   15d94:	1007883a 	mov	r3,r2
   15d98:	e0bff917 	ldw	r2,-28(fp)
   15d9c:	10800817 	ldw	r2,32(r2)
   15da0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15da4:	e0bffb17 	ldw	r2,-20(fp)
   15da8:	1009883a 	mov	r4,r2
   15dac:	e17ff917 	ldw	r5,-28(fp)
   15db0:	01800074 	movhi	r6,1
   15db4:	31978604 	addi	r6,r6,24088
   15db8:	0018a340 	call	18a34 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15dbc:	e0bff917 	ldw	r2,-28(fp)
   15dc0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15dc4:	e0bff917 	ldw	r2,-28(fp)
   15dc8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15dcc:	008000b4 	movhi	r2,2
   15dd0:	10b9d004 	addi	r2,r2,-6336
   15dd4:	10800017 	ldw	r2,0(r2)
   15dd8:	1809883a 	mov	r4,r3
   15ddc:	100b883a 	mov	r5,r2
   15de0:	01800074 	movhi	r6,1
   15de4:	31983004 	addi	r6,r6,24768
   15de8:	e1fff917 	ldw	r7,-28(fp)
   15dec:	00185340 	call	18534 <alt_alarm_start>
   15df0:	1000040e 	bge	r2,zero,15e04 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15df4:	e0fff917 	ldw	r3,-28(fp)
   15df8:	00a00034 	movhi	r2,32768
   15dfc:	10bfffc4 	addi	r2,r2,-1
   15e00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15e04:	e037883a 	mov	sp,fp
   15e08:	dfc00117 	ldw	ra,4(sp)
   15e0c:	df000017 	ldw	fp,0(sp)
   15e10:	dec00204 	addi	sp,sp,8
   15e14:	f800283a 	ret

00015e18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15e18:	defff104 	addi	sp,sp,-60
   15e1c:	dfc00e15 	stw	ra,56(sp)
   15e20:	df000d15 	stw	fp,52(sp)
   15e24:	df000d04 	addi	fp,sp,52
   15e28:	e13ffe15 	stw	r4,-8(fp)
   15e2c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15e30:	e0bffe17 	ldw	r2,-8(fp)
   15e34:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   15e38:	e0bff517 	ldw	r2,-44(fp)
   15e3c:	10800017 	ldw	r2,0(r2)
   15e40:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15e44:	e0bff617 	ldw	r2,-40(fp)
   15e48:	10800104 	addi	r2,r2,4
   15e4c:	10800037 	ldwio	r2,0(r2)
   15e50:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15e54:	e0bff717 	ldw	r2,-36(fp)
   15e58:	1080c00c 	andi	r2,r2,768
   15e5c:	1000011e 	bne	r2,zero,15e64 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   15e60:	00009206 	br	160ac <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15e64:	e0bff717 	ldw	r2,-36(fp)
   15e68:	1080400c 	andi	r2,r2,256
   15e6c:	10004726 	beq	r2,zero,15f8c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15e70:	00800074 	movhi	r2,1
   15e74:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15e78:	e0bff517 	ldw	r2,-44(fp)
   15e7c:	10800d17 	ldw	r2,52(r2)
   15e80:	10800044 	addi	r2,r2,1
   15e84:	1081ffcc 	andi	r2,r2,2047
   15e88:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   15e8c:	e0bff517 	ldw	r2,-44(fp)
   15e90:	10c00e17 	ldw	r3,56(r2)
   15e94:	e0bff817 	ldw	r2,-32(fp)
   15e98:	1880011e 	bne	r3,r2,15ea0 <altera_avalon_jtag_uart_irq+0x88>
          break;
   15e9c:	00002906 	br	15f44 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15ea0:	e0bff617 	ldw	r2,-40(fp)
   15ea4:	10800037 	ldwio	r2,0(r2)
   15ea8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15eac:	e0bff317 	ldw	r2,-52(fp)
   15eb0:	10a0000c 	andi	r2,r2,32768
   15eb4:	1000011e 	bne	r2,zero,15ebc <altera_avalon_jtag_uart_irq+0xa4>
          break;
   15eb8:	00002206 	br	15f44 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15ebc:	e0bff517 	ldw	r2,-44(fp)
   15ec0:	10800d17 	ldw	r2,52(r2)
   15ec4:	e0fff317 	ldw	r3,-52(fp)
   15ec8:	1809883a 	mov	r4,r3
   15ecc:	e0fff517 	ldw	r3,-44(fp)
   15ed0:	1885883a 	add	r2,r3,r2
   15ed4:	10801104 	addi	r2,r2,68
   15ed8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15edc:	e0bff517 	ldw	r2,-44(fp)
   15ee0:	10800d17 	ldw	r2,52(r2)
   15ee4:	10800044 	addi	r2,r2,1
   15ee8:	10c1ffcc 	andi	r3,r2,2047
   15eec:	e0bff517 	ldw	r2,-44(fp)
   15ef0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15ef4:	e0bff517 	ldw	r2,-44(fp)
   15ef8:	10800c17 	ldw	r2,48(r2)
   15efc:	e0bff915 	stw	r2,-28(fp)
   15f00:	00800044 	movi	r2,1
   15f04:	e0bffa0d 	sth	r2,-24(fp)
   15f08:	00800044 	movi	r2,1
   15f0c:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15f10:	008000b4 	movhi	r2,2
   15f14:	10b9ba44 	addi	r2,r2,-6423
   15f18:	10800003 	ldbu	r2,0(r2)
   15f1c:	10803fcc 	andi	r2,r2,255
   15f20:	103fd526 	beq	r2,zero,15e78 <__alt_mem_Flash_flash_data+0xf4015e78>
  {
    OSFlagPost (group, flags, opt, &err);
   15f24:	e17ffa0b 	ldhu	r5,-24(fp)
   15f28:	e0fffa83 	ldbu	r3,-22(fp)
   15f2c:	e0bffcc4 	addi	r2,fp,-13
   15f30:	e13ff917 	ldw	r4,-28(fp)
   15f34:	180d883a 	mov	r6,r3
   15f38:	100f883a 	mov	r7,r2
   15f3c:	0010b940 	call	10b94 <OSFlagPost>
      }
   15f40:	003fcd06 	br	15e78 <__alt_mem_Flash_flash_data+0xf4015e78>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15f44:	e0bff317 	ldw	r2,-52(fp)
   15f48:	10bfffec 	andhi	r2,r2,65535
   15f4c:	10000f26 	beq	r2,zero,15f8c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15f50:	e0bff517 	ldw	r2,-44(fp)
   15f54:	10c00817 	ldw	r3,32(r2)
   15f58:	00bfff84 	movi	r2,-2
   15f5c:	1886703a 	and	r3,r3,r2
   15f60:	e0bff517 	ldw	r2,-44(fp)
   15f64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15f68:	e0bff617 	ldw	r2,-40(fp)
   15f6c:	10800104 	addi	r2,r2,4
   15f70:	1007883a 	mov	r3,r2
   15f74:	e0bff517 	ldw	r2,-44(fp)
   15f78:	10800817 	ldw	r2,32(r2)
   15f7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15f80:	e0bff617 	ldw	r2,-40(fp)
   15f84:	10800104 	addi	r2,r2,4
   15f88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15f8c:	e0bff717 	ldw	r2,-36(fp)
   15f90:	1080800c 	andi	r2,r2,512
   15f94:	10004426 	beq	r2,zero,160a8 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15f98:	e0bff717 	ldw	r2,-36(fp)
   15f9c:	1004d43a 	srli	r2,r2,16
   15fa0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15fa4:	00002706 	br	16044 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15fa8:	e0bff617 	ldw	r2,-40(fp)
   15fac:	e0fff517 	ldw	r3,-44(fp)
   15fb0:	18c01017 	ldw	r3,64(r3)
   15fb4:	e13ff517 	ldw	r4,-44(fp)
   15fb8:	20c7883a 	add	r3,r4,r3
   15fbc:	18c21104 	addi	r3,r3,2116
   15fc0:	18c00003 	ldbu	r3,0(r3)
   15fc4:	18c03fcc 	andi	r3,r3,255
   15fc8:	18c0201c 	xori	r3,r3,128
   15fcc:	18ffe004 	addi	r3,r3,-128
   15fd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15fd4:	e0bff517 	ldw	r2,-44(fp)
   15fd8:	10801017 	ldw	r2,64(r2)
   15fdc:	10800044 	addi	r2,r2,1
   15fe0:	10c1ffcc 	andi	r3,r2,2047
   15fe4:	e0bff517 	ldw	r2,-44(fp)
   15fe8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15fec:	e0bff517 	ldw	r2,-44(fp)
   15ff0:	10800c17 	ldw	r2,48(r2)
   15ff4:	e0bffb15 	stw	r2,-20(fp)
   15ff8:	00800084 	movi	r2,2
   15ffc:	e0bffc0d 	sth	r2,-16(fp)
   16000:	00800044 	movi	r2,1
   16004:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16008:	008000b4 	movhi	r2,2
   1600c:	10b9ba44 	addi	r2,r2,-6423
   16010:	10800003 	ldbu	r2,0(r2)
   16014:	10803fcc 	andi	r2,r2,255
   16018:	10000726 	beq	r2,zero,16038 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1601c:	e17ffc0b 	ldhu	r5,-16(fp)
   16020:	e0fffc83 	ldbu	r3,-14(fp)
   16024:	e0bffd04 	addi	r2,fp,-12
   16028:	e13ffb17 	ldw	r4,-20(fp)
   1602c:	180d883a 	mov	r6,r3
   16030:	100f883a 	mov	r7,r2
   16034:	0010b940 	call	10b94 <OSFlagPost>

        space--;
   16038:	e0bff417 	ldw	r2,-48(fp)
   1603c:	10bfffc4 	addi	r2,r2,-1
   16040:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16044:	e0bff417 	ldw	r2,-48(fp)
   16048:	10000526 	beq	r2,zero,16060 <altera_avalon_jtag_uart_irq+0x248>
   1604c:	e0bff517 	ldw	r2,-44(fp)
   16050:	10c01017 	ldw	r3,64(r2)
   16054:	e0bff517 	ldw	r2,-44(fp)
   16058:	10800f17 	ldw	r2,60(r2)
   1605c:	18bfd21e 	bne	r3,r2,15fa8 <__alt_mem_Flash_flash_data+0xf4015fa8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16060:	e0bff417 	ldw	r2,-48(fp)
   16064:	10001026 	beq	r2,zero,160a8 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16068:	e0bff517 	ldw	r2,-44(fp)
   1606c:	10c00817 	ldw	r3,32(r2)
   16070:	00bfff44 	movi	r2,-3
   16074:	1886703a 	and	r3,r3,r2
   16078:	e0bff517 	ldw	r2,-44(fp)
   1607c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16080:	e0bff517 	ldw	r2,-44(fp)
   16084:	10800017 	ldw	r2,0(r2)
   16088:	10800104 	addi	r2,r2,4
   1608c:	1007883a 	mov	r3,r2
   16090:	e0bff517 	ldw	r2,-44(fp)
   16094:	10800817 	ldw	r2,32(r2)
   16098:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1609c:	e0bff617 	ldw	r2,-40(fp)
   160a0:	10800104 	addi	r2,r2,4
   160a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   160a8:	003f6606 	br	15e44 <__alt_mem_Flash_flash_data+0xf4015e44>
}
   160ac:	e037883a 	mov	sp,fp
   160b0:	dfc00117 	ldw	ra,4(sp)
   160b4:	df000017 	ldw	fp,0(sp)
   160b8:	dec00204 	addi	sp,sp,8
   160bc:	f800283a 	ret

000160c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   160c0:	defff904 	addi	sp,sp,-28
   160c4:	dfc00615 	stw	ra,24(sp)
   160c8:	df000515 	stw	fp,20(sp)
   160cc:	df000504 	addi	fp,sp,20
   160d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   160d4:	e0bfff17 	ldw	r2,-4(fp)
   160d8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   160dc:	e0bffb17 	ldw	r2,-20(fp)
   160e0:	10800017 	ldw	r2,0(r2)
   160e4:	10800104 	addi	r2,r2,4
   160e8:	10800037 	ldwio	r2,0(r2)
   160ec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   160f0:	e0bffc17 	ldw	r2,-16(fp)
   160f4:	1081000c 	andi	r2,r2,1024
   160f8:	10000b26 	beq	r2,zero,16128 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   160fc:	e0bffb17 	ldw	r2,-20(fp)
   16100:	10800017 	ldw	r2,0(r2)
   16104:	10800104 	addi	r2,r2,4
   16108:	1007883a 	mov	r3,r2
   1610c:	e0bffb17 	ldw	r2,-20(fp)
   16110:	10800817 	ldw	r2,32(r2)
   16114:	10810014 	ori	r2,r2,1024
   16118:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1611c:	e0bffb17 	ldw	r2,-20(fp)
   16120:	10000915 	stw	zero,36(r2)
   16124:	00002206 	br	161b0 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16128:	e0bffb17 	ldw	r2,-20(fp)
   1612c:	10c00917 	ldw	r3,36(r2)
   16130:	00a00034 	movhi	r2,32768
   16134:	10bfff04 	addi	r2,r2,-4
   16138:	10c01d36 	bltu	r2,r3,161b0 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1613c:	e0bffb17 	ldw	r2,-20(fp)
   16140:	10800917 	ldw	r2,36(r2)
   16144:	10c00044 	addi	r3,r2,1
   16148:	e0bffb17 	ldw	r2,-20(fp)
   1614c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16150:	e0bffb17 	ldw	r2,-20(fp)
   16154:	10c00917 	ldw	r3,36(r2)
   16158:	e0bffb17 	ldw	r2,-20(fp)
   1615c:	10800117 	ldw	r2,4(r2)
   16160:	18801336 	bltu	r3,r2,161b0 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16164:	e0bffb17 	ldw	r2,-20(fp)
   16168:	10800c17 	ldw	r2,48(r2)
   1616c:	e0bffd15 	stw	r2,-12(fp)
   16170:	00800104 	movi	r2,4
   16174:	e0bffe0d 	sth	r2,-8(fp)
   16178:	00800044 	movi	r2,1
   1617c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16180:	008000b4 	movhi	r2,2
   16184:	10b9ba44 	addi	r2,r2,-6423
   16188:	10800003 	ldbu	r2,0(r2)
   1618c:	10803fcc 	andi	r2,r2,255
   16190:	10000726 	beq	r2,zero,161b0 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   16194:	e17ffe0b 	ldhu	r5,-8(fp)
   16198:	e0fffe83 	ldbu	r3,-6(fp)
   1619c:	e0bffec4 	addi	r2,fp,-5
   161a0:	e13ffd17 	ldw	r4,-12(fp)
   161a4:	180d883a 	mov	r6,r3
   161a8:	100f883a 	mov	r7,r2
   161ac:	0010b940 	call	10b94 <OSFlagPost>
   161b0:	008000b4 	movhi	r2,2
   161b4:	10b9d004 	addi	r2,r2,-6336
   161b8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   161bc:	e037883a 	mov	sp,fp
   161c0:	dfc00117 	ldw	ra,4(sp)
   161c4:	df000017 	ldw	fp,0(sp)
   161c8:	dec00204 	addi	sp,sp,8
   161cc:	f800283a 	ret

000161d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   161d0:	defffd04 	addi	sp,sp,-12
   161d4:	df000215 	stw	fp,8(sp)
   161d8:	df000204 	addi	fp,sp,8
   161dc:	e13ffe15 	stw	r4,-8(fp)
   161e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   161e4:	00000506 	br	161fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   161e8:	e0bfff17 	ldw	r2,-4(fp)
   161ec:	1090000c 	andi	r2,r2,16384
   161f0:	10000226 	beq	r2,zero,161fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   161f4:	00bffd44 	movi	r2,-11
   161f8:	00000b06 	br	16228 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   161fc:	e0bffe17 	ldw	r2,-8(fp)
   16200:	10c01017 	ldw	r3,64(r2)
   16204:	e0bffe17 	ldw	r2,-8(fp)
   16208:	10800f17 	ldw	r2,60(r2)
   1620c:	18800526 	beq	r3,r2,16224 <altera_avalon_jtag_uart_close+0x54>
   16210:	e0bffe17 	ldw	r2,-8(fp)
   16214:	10c00917 	ldw	r3,36(r2)
   16218:	e0bffe17 	ldw	r2,-8(fp)
   1621c:	10800117 	ldw	r2,4(r2)
   16220:	18bff136 	bltu	r3,r2,161e8 <__alt_mem_Flash_flash_data+0xf40161e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16224:	0005883a 	mov	r2,zero
}
   16228:	e037883a 	mov	sp,fp
   1622c:	df000017 	ldw	fp,0(sp)
   16230:	dec00104 	addi	sp,sp,4
   16234:	f800283a 	ret

00016238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16238:	defffa04 	addi	sp,sp,-24
   1623c:	df000515 	stw	fp,20(sp)
   16240:	df000504 	addi	fp,sp,20
   16244:	e13ffd15 	stw	r4,-12(fp)
   16248:	e17ffe15 	stw	r5,-8(fp)
   1624c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16250:	00bff9c4 	movi	r2,-25
   16254:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   16258:	e0bffe17 	ldw	r2,-8(fp)
   1625c:	10da8060 	cmpeqi	r3,r2,27137
   16260:	1800031e 	bne	r3,zero,16270 <altera_avalon_jtag_uart_ioctl+0x38>
   16264:	109a80a0 	cmpeqi	r2,r2,27138
   16268:	1000191e 	bne	r2,zero,162d0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1626c:	00002806 	br	16310 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16270:	e0bffd17 	ldw	r2,-12(fp)
   16274:	10c00117 	ldw	r3,4(r2)
   16278:	00a00034 	movhi	r2,32768
   1627c:	10bfffc4 	addi	r2,r2,-1
   16280:	18801226 	beq	r3,r2,162cc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   16284:	e0bfff17 	ldw	r2,-4(fp)
   16288:	10800017 	ldw	r2,0(r2)
   1628c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16290:	e0bffc17 	ldw	r2,-16(fp)
   16294:	10800090 	cmplti	r2,r2,2
   16298:	1000061e 	bne	r2,zero,162b4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1629c:	e0fffc17 	ldw	r3,-16(fp)
   162a0:	00a00034 	movhi	r2,32768
   162a4:	10bfffc4 	addi	r2,r2,-1
   162a8:	18800226 	beq	r3,r2,162b4 <altera_avalon_jtag_uart_ioctl+0x7c>
   162ac:	e0bffc17 	ldw	r2,-16(fp)
   162b0:	00000206 	br	162bc <altera_avalon_jtag_uart_ioctl+0x84>
   162b4:	00a00034 	movhi	r2,32768
   162b8:	10bfff84 	addi	r2,r2,-2
   162bc:	e0fffd17 	ldw	r3,-12(fp)
   162c0:	18800115 	stw	r2,4(r3)
      rc = 0;
   162c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   162c8:	00001106 	br	16310 <altera_avalon_jtag_uart_ioctl+0xd8>
   162cc:	00001006 	br	16310 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   162d0:	e0bffd17 	ldw	r2,-12(fp)
   162d4:	10c00117 	ldw	r3,4(r2)
   162d8:	00a00034 	movhi	r2,32768
   162dc:	10bfffc4 	addi	r2,r2,-1
   162e0:	18800a26 	beq	r3,r2,1630c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   162e4:	e0bffd17 	ldw	r2,-12(fp)
   162e8:	10c00917 	ldw	r3,36(r2)
   162ec:	e0bffd17 	ldw	r2,-12(fp)
   162f0:	10800117 	ldw	r2,4(r2)
   162f4:	1885803a 	cmpltu	r2,r3,r2
   162f8:	10c03fcc 	andi	r3,r2,255
   162fc:	e0bfff17 	ldw	r2,-4(fp)
   16300:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16304:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16308:	00000006 	br	1630c <altera_avalon_jtag_uart_ioctl+0xd4>
   1630c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16310:	e0bffb17 	ldw	r2,-20(fp)
}
   16314:	e037883a 	mov	sp,fp
   16318:	df000017 	ldw	fp,0(sp)
   1631c:	dec00104 	addi	sp,sp,4
   16320:	f800283a 	ret

00016324 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16324:	deffec04 	addi	sp,sp,-80
   16328:	dfc01315 	stw	ra,76(sp)
   1632c:	df001215 	stw	fp,72(sp)
   16330:	df001204 	addi	fp,sp,72
   16334:	e13ffc15 	stw	r4,-16(fp)
   16338:	e17ffd15 	stw	r5,-12(fp)
   1633c:	e1bffe15 	stw	r6,-8(fp)
   16340:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16344:	e0bffd17 	ldw	r2,-12(fp)
   16348:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1634c:	e0bffc17 	ldw	r2,-16(fp)
   16350:	10800a17 	ldw	r2,40(r2)
   16354:	e0bff415 	stw	r2,-48(fp)
   16358:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1635c:	e0fff50b 	ldhu	r3,-44(fp)
   16360:	e0bffb04 	addi	r2,fp,-20
   16364:	e13ff417 	ldw	r4,-48(fp)
   16368:	180b883a 	mov	r5,r3
   1636c:	100d883a 	mov	r6,r2
   16370:	00131e40 	call	131e4 <OSSemPend>

  while (space > 0)
   16374:	00006506 	br	1650c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16378:	e0bffc17 	ldw	r2,-16(fp)
   1637c:	10800d17 	ldw	r2,52(r2)
   16380:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   16384:	e0bffc17 	ldw	r2,-16(fp)
   16388:	10800e17 	ldw	r2,56(r2)
   1638c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   16390:	e0fff117 	ldw	r3,-60(fp)
   16394:	e0bff217 	ldw	r2,-56(fp)
   16398:	18800536 	bltu	r3,r2,163b0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1639c:	e0fff117 	ldw	r3,-60(fp)
   163a0:	e0bff217 	ldw	r2,-56(fp)
   163a4:	1885c83a 	sub	r2,r3,r2
   163a8:	e0bff015 	stw	r2,-64(fp)
   163ac:	00000406 	br	163c0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   163b0:	00c20004 	movi	r3,2048
   163b4:	e0bff217 	ldw	r2,-56(fp)
   163b8:	1885c83a 	sub	r2,r3,r2
   163bc:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   163c0:	e0bff017 	ldw	r2,-64(fp)
   163c4:	1000011e 	bne	r2,zero,163cc <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   163c8:	00001d06 	br	16440 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   163cc:	e0fffe17 	ldw	r3,-8(fp)
   163d0:	e0bff017 	ldw	r2,-64(fp)
   163d4:	1880022e 	bgeu	r3,r2,163e0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   163d8:	e0bffe17 	ldw	r2,-8(fp)
   163dc:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   163e0:	e0bff217 	ldw	r2,-56(fp)
   163e4:	10801104 	addi	r2,r2,68
   163e8:	e0fffc17 	ldw	r3,-16(fp)
   163ec:	1885883a 	add	r2,r3,r2
   163f0:	e13fef17 	ldw	r4,-68(fp)
   163f4:	100b883a 	mov	r5,r2
   163f8:	e1bff017 	ldw	r6,-64(fp)
   163fc:	000616c0 	call	616c <memcpy>
      ptr   += n;
   16400:	e0ffef17 	ldw	r3,-68(fp)
   16404:	e0bff017 	ldw	r2,-64(fp)
   16408:	1885883a 	add	r2,r3,r2
   1640c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   16410:	e0fffe17 	ldw	r3,-8(fp)
   16414:	e0bff017 	ldw	r2,-64(fp)
   16418:	1885c83a 	sub	r2,r3,r2
   1641c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16420:	e0fff217 	ldw	r3,-56(fp)
   16424:	e0bff017 	ldw	r2,-64(fp)
   16428:	1885883a 	add	r2,r3,r2
   1642c:	10c1ffcc 	andi	r3,r2,2047
   16430:	e0bffc17 	ldw	r2,-16(fp)
   16434:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16438:	e0bffe17 	ldw	r2,-8(fp)
   1643c:	00bfce16 	blt	zero,r2,16378 <__alt_mem_Flash_flash_data+0xf4016378>

    /* If we read any data then return it */
    if (ptr != buffer)
   16440:	e0ffef17 	ldw	r3,-68(fp)
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	18800126 	beq	r3,r2,16450 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1644c:	00003106 	br	16514 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16450:	e0bfff17 	ldw	r2,-4(fp)
   16454:	1090000c 	andi	r2,r2,16384
   16458:	10000126 	beq	r2,zero,16460 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1645c:	00002d06 	br	16514 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16460:	008000b4 	movhi	r2,2
   16464:	10b9ba44 	addi	r2,r2,-6423
   16468:	10800003 	ldbu	r2,0(r2)
   1646c:	10803fcc 	andi	r2,r2,255
   16470:	10800058 	cmpnei	r2,r2,1
   16474:	1000161e 	bne	r2,zero,164d0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16478:	e0bffc17 	ldw	r2,-16(fp)
   1647c:	10800c17 	ldw	r2,48(r2)
   16480:	e0bff615 	stw	r2,-40(fp)
   16484:	00800144 	movi	r2,5
   16488:	e0bff70d 	sth	r2,-36(fp)
   1648c:	00bfe0c4 	movi	r2,-125
   16490:	e0bff785 	stb	r2,-34(fp)
   16494:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16498:	008000b4 	movhi	r2,2
   1649c:	10b9ba44 	addi	r2,r2,-6423
   164a0:	10800003 	ldbu	r2,0(r2)
   164a4:	10803fcc 	andi	r2,r2,255
   164a8:	10001326 	beq	r2,zero,164f8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   164ac:	e17ff70b 	ldhu	r5,-36(fp)
   164b0:	e1bff783 	ldbu	r6,-34(fp)
   164b4:	e0fff80b 	ldhu	r3,-32(fp)
   164b8:	e0bffb44 	addi	r2,fp,-19
   164bc:	d8800015 	stw	r2,0(sp)
   164c0:	e13ff617 	ldw	r4,-40(fp)
   164c4:	180f883a 	mov	r7,r3
   164c8:	001053c0 	call	1053c <OSFlagPend>
   164cc:	00000a06 	br	164f8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   164d0:	0001883a 	nop
   164d4:	e0bffc17 	ldw	r2,-16(fp)
   164d8:	10c00d17 	ldw	r3,52(r2)
   164dc:	e0bff117 	ldw	r2,-60(fp)
   164e0:	1880051e 	bne	r3,r2,164f8 <altera_avalon_jtag_uart_read+0x1d4>
   164e4:	e0bffc17 	ldw	r2,-16(fp)
   164e8:	10c00917 	ldw	r3,36(r2)
   164ec:	e0bffc17 	ldw	r2,-16(fp)
   164f0:	10800117 	ldw	r2,4(r2)
   164f4:	18bff736 	bltu	r3,r2,164d4 <__alt_mem_Flash_flash_data+0xf40164d4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   164f8:	e0bffc17 	ldw	r2,-16(fp)
   164fc:	10c00d17 	ldw	r3,52(r2)
   16500:	e0bff117 	ldw	r2,-60(fp)
   16504:	1880011e 	bne	r3,r2,1650c <altera_avalon_jtag_uart_read+0x1e8>
      break;
   16508:	00000206 	br	16514 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1650c:	e0bffe17 	ldw	r2,-8(fp)
   16510:	00bf9916 	blt	zero,r2,16378 <__alt_mem_Flash_flash_data+0xf4016378>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16514:	e0bffc17 	ldw	r2,-16(fp)
   16518:	10800a17 	ldw	r2,40(r2)
   1651c:	1009883a 	mov	r4,r2
   16520:	00135b80 	call	135b8 <OSSemPost>

  if (ptr != buffer)
   16524:	e0ffef17 	ldw	r3,-68(fp)
   16528:	e0bffd17 	ldw	r2,-12(fp)
   1652c:	18801826 	beq	r3,r2,16590 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16530:	0005303a 	rdctl	r2,status
   16534:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16538:	e0fff917 	ldw	r3,-28(fp)
   1653c:	00bfff84 	movi	r2,-2
   16540:	1884703a 	and	r2,r3,r2
   16544:	1001703a 	wrctl	status,r2
  
  return context;
   16548:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1654c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16550:	e0bffc17 	ldw	r2,-16(fp)
   16554:	10800817 	ldw	r2,32(r2)
   16558:	10c00054 	ori	r3,r2,1
   1655c:	e0bffc17 	ldw	r2,-16(fp)
   16560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16564:	e0bffc17 	ldw	r2,-16(fp)
   16568:	10800017 	ldw	r2,0(r2)
   1656c:	10800104 	addi	r2,r2,4
   16570:	1007883a 	mov	r3,r2
   16574:	e0bffc17 	ldw	r2,-16(fp)
   16578:	10800817 	ldw	r2,32(r2)
   1657c:	18800035 	stwio	r2,0(r3)
   16580:	e0bff317 	ldw	r2,-52(fp)
   16584:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16588:	e0bffa17 	ldw	r2,-24(fp)
   1658c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16590:	e0ffef17 	ldw	r3,-68(fp)
   16594:	e0bffd17 	ldw	r2,-12(fp)
   16598:	18800426 	beq	r3,r2,165ac <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1659c:	e0ffef17 	ldw	r3,-68(fp)
   165a0:	e0bffd17 	ldw	r2,-12(fp)
   165a4:	1885c83a 	sub	r2,r3,r2
   165a8:	00000606 	br	165c4 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   165ac:	e0bfff17 	ldw	r2,-4(fp)
   165b0:	1090000c 	andi	r2,r2,16384
   165b4:	10000226 	beq	r2,zero,165c0 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   165b8:	00bffd44 	movi	r2,-11
   165bc:	00000106 	br	165c4 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   165c0:	00bffec4 	movi	r2,-5
}
   165c4:	e037883a 	mov	sp,fp
   165c8:	dfc00117 	ldw	ra,4(sp)
   165cc:	df000017 	ldw	fp,0(sp)
   165d0:	dec00204 	addi	sp,sp,8
   165d4:	f800283a 	ret

000165d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   165d8:	deffed04 	addi	sp,sp,-76
   165dc:	dfc01215 	stw	ra,72(sp)
   165e0:	df001115 	stw	fp,68(sp)
   165e4:	df001104 	addi	fp,sp,68
   165e8:	e13ffc15 	stw	r4,-16(fp)
   165ec:	e17ffd15 	stw	r5,-12(fp)
   165f0:	e1bffe15 	stw	r6,-8(fp)
   165f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   165f8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   165fc:	e0bffd17 	ldw	r2,-12(fp)
   16600:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10800b17 	ldw	r2,44(r2)
   1660c:	e0bff515 	stw	r2,-44(fp)
   16610:	e03ff60d 	sth	zero,-40(fp)
   16614:	e0fff60b 	ldhu	r3,-40(fp)
   16618:	e0bffbc4 	addi	r2,fp,-17
   1661c:	e13ff517 	ldw	r4,-44(fp)
   16620:	180b883a 	mov	r5,r3
   16624:	100d883a 	mov	r6,r2
   16628:	00131e40 	call	131e4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1662c:	00003806 	br	16710 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16630:	e0bffc17 	ldw	r2,-16(fp)
   16634:	10800f17 	ldw	r2,60(r2)
   16638:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1663c:	e0bffc17 	ldw	r2,-16(fp)
   16640:	10801017 	ldw	r2,64(r2)
   16644:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16648:	e0fff317 	ldw	r3,-52(fp)
   1664c:	e0bff017 	ldw	r2,-64(fp)
   16650:	1880062e 	bgeu	r3,r2,1666c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16654:	e0fff017 	ldw	r3,-64(fp)
   16658:	e0bff317 	ldw	r2,-52(fp)
   1665c:	1885c83a 	sub	r2,r3,r2
   16660:	10bfffc4 	addi	r2,r2,-1
   16664:	e0bff115 	stw	r2,-60(fp)
   16668:	00000b06 	br	16698 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1666c:	e0bff017 	ldw	r2,-64(fp)
   16670:	10000526 	beq	r2,zero,16688 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16674:	00c20004 	movi	r3,2048
   16678:	e0bff317 	ldw	r2,-52(fp)
   1667c:	1885c83a 	sub	r2,r3,r2
   16680:	e0bff115 	stw	r2,-60(fp)
   16684:	00000406 	br	16698 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16688:	00c1ffc4 	movi	r3,2047
   1668c:	e0bff317 	ldw	r2,-52(fp)
   16690:	1885c83a 	sub	r2,r3,r2
   16694:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16698:	e0bff117 	ldw	r2,-60(fp)
   1669c:	1000011e 	bne	r2,zero,166a4 <altera_avalon_jtag_uart_write+0xcc>
        break;
   166a0:	00001d06 	br	16718 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   166a4:	e0fffe17 	ldw	r3,-8(fp)
   166a8:	e0bff117 	ldw	r2,-60(fp)
   166ac:	1880022e 	bgeu	r3,r2,166b8 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   166b0:	e0bffe17 	ldw	r2,-8(fp)
   166b4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   166b8:	e0bff317 	ldw	r2,-52(fp)
   166bc:	10821104 	addi	r2,r2,2116
   166c0:	e0fffc17 	ldw	r3,-16(fp)
   166c4:	1885883a 	add	r2,r3,r2
   166c8:	1009883a 	mov	r4,r2
   166cc:	e17ffd17 	ldw	r5,-12(fp)
   166d0:	e1bff117 	ldw	r6,-60(fp)
   166d4:	000616c0 	call	616c <memcpy>
      ptr   += n;
   166d8:	e0fffd17 	ldw	r3,-12(fp)
   166dc:	e0bff117 	ldw	r2,-60(fp)
   166e0:	1885883a 	add	r2,r3,r2
   166e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   166e8:	e0fffe17 	ldw	r3,-8(fp)
   166ec:	e0bff117 	ldw	r2,-60(fp)
   166f0:	1885c83a 	sub	r2,r3,r2
   166f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   166f8:	e0fff317 	ldw	r3,-52(fp)
   166fc:	e0bff117 	ldw	r2,-60(fp)
   16700:	1885883a 	add	r2,r3,r2
   16704:	10c1ffcc 	andi	r3,r2,2047
   16708:	e0bffc17 	ldw	r2,-16(fp)
   1670c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16710:	e0bffe17 	ldw	r2,-8(fp)
   16714:	00bfc616 	blt	zero,r2,16630 <__alt_mem_Flash_flash_data+0xf4016630>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16718:	0005303a 	rdctl	r2,status
   1671c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16720:	e0fff717 	ldw	r3,-36(fp)
   16724:	00bfff84 	movi	r2,-2
   16728:	1884703a 	and	r2,r3,r2
   1672c:	1001703a 	wrctl	status,r2
  
  return context;
   16730:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16734:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16738:	e0bffc17 	ldw	r2,-16(fp)
   1673c:	10800817 	ldw	r2,32(r2)
   16740:	10c00094 	ori	r3,r2,2
   16744:	e0bffc17 	ldw	r2,-16(fp)
   16748:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1674c:	e0bffc17 	ldw	r2,-16(fp)
   16750:	10800017 	ldw	r2,0(r2)
   16754:	10800104 	addi	r2,r2,4
   16758:	1007883a 	mov	r3,r2
   1675c:	e0bffc17 	ldw	r2,-16(fp)
   16760:	10800817 	ldw	r2,32(r2)
   16764:	18800035 	stwio	r2,0(r3)
   16768:	e0bff417 	ldw	r2,-48(fp)
   1676c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16770:	e0bff817 	ldw	r2,-32(fp)
   16774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16778:	e0bffe17 	ldw	r2,-8(fp)
   1677c:	00802e0e 	bge	zero,r2,16838 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   16780:	e0bfff17 	ldw	r2,-4(fp)
   16784:	1090000c 	andi	r2,r2,16384
   16788:	10000126 	beq	r2,zero,16790 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1678c:	00002c06 	br	16840 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16790:	008000b4 	movhi	r2,2
   16794:	10b9ba44 	addi	r2,r2,-6423
   16798:	10800003 	ldbu	r2,0(r2)
   1679c:	10803fcc 	andi	r2,r2,255
   167a0:	10800058 	cmpnei	r2,r2,1
   167a4:	1000161e 	bne	r2,zero,16800 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   167a8:	e0bffc17 	ldw	r2,-16(fp)
   167ac:	10800c17 	ldw	r2,48(r2)
   167b0:	e0bff915 	stw	r2,-28(fp)
   167b4:	00800184 	movi	r2,6
   167b8:	e0bffa0d 	sth	r2,-24(fp)
   167bc:	00bfe0c4 	movi	r2,-125
   167c0:	e0bffa85 	stb	r2,-22(fp)
   167c4:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   167c8:	008000b4 	movhi	r2,2
   167cc:	10b9ba44 	addi	r2,r2,-6423
   167d0:	10800003 	ldbu	r2,0(r2)
   167d4:	10803fcc 	andi	r2,r2,255
   167d8:	10001326 	beq	r2,zero,16828 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   167dc:	e17ffa0b 	ldhu	r5,-24(fp)
   167e0:	e1bffa83 	ldbu	r6,-22(fp)
   167e4:	e0fffb0b 	ldhu	r3,-20(fp)
   167e8:	e0bffb84 	addi	r2,fp,-18
   167ec:	d8800015 	stw	r2,0(sp)
   167f0:	e13ff917 	ldw	r4,-28(fp)
   167f4:	180f883a 	mov	r7,r3
   167f8:	001053c0 	call	1053c <OSFlagPend>
   167fc:	00000a06 	br	16828 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16800:	0001883a 	nop
   16804:	e0bffc17 	ldw	r2,-16(fp)
   16808:	10c01017 	ldw	r3,64(r2)
   1680c:	e0bff017 	ldw	r2,-64(fp)
   16810:	1880051e 	bne	r3,r2,16828 <altera_avalon_jtag_uart_write+0x250>
   16814:	e0bffc17 	ldw	r2,-16(fp)
   16818:	10c00917 	ldw	r3,36(r2)
   1681c:	e0bffc17 	ldw	r2,-16(fp)
   16820:	10800117 	ldw	r2,4(r2)
   16824:	18bff736 	bltu	r3,r2,16804 <__alt_mem_Flash_flash_data+0xf4016804>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16828:	e0bffc17 	ldw	r2,-16(fp)
   1682c:	10800917 	ldw	r2,36(r2)
   16830:	10000126 	beq	r2,zero,16838 <altera_avalon_jtag_uart_write+0x260>
         break;
   16834:	00000206 	br	16840 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   16838:	e0bffe17 	ldw	r2,-8(fp)
   1683c:	00bf7b16 	blt	zero,r2,1662c <__alt_mem_Flash_flash_data+0xf401662c>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16840:	e0bffc17 	ldw	r2,-16(fp)
   16844:	10800b17 	ldw	r2,44(r2)
   16848:	1009883a 	mov	r4,r2
   1684c:	00135b80 	call	135b8 <OSSemPost>

  if (ptr != start)
   16850:	e0fffd17 	ldw	r3,-12(fp)
   16854:	e0bff217 	ldw	r2,-56(fp)
   16858:	18800426 	beq	r3,r2,1686c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1685c:	e0fffd17 	ldw	r3,-12(fp)
   16860:	e0bff217 	ldw	r2,-56(fp)
   16864:	1885c83a 	sub	r2,r3,r2
   16868:	00000606 	br	16884 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1686c:	e0bfff17 	ldw	r2,-4(fp)
   16870:	1090000c 	andi	r2,r2,16384
   16874:	10000226 	beq	r2,zero,16880 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   16878:	00bffd44 	movi	r2,-11
   1687c:	00000106 	br	16884 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16880:	00bffec4 	movi	r2,-5
}
   16884:	e037883a 	mov	sp,fp
   16888:	dfc00117 	ldw	ra,4(sp)
   1688c:	df000017 	ldw	fp,0(sp)
   16890:	dec00204 	addi	sp,sp,8
   16894:	f800283a 	ret

00016898 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16898:	defff904 	addi	sp,sp,-28
   1689c:	dfc00615 	stw	ra,24(sp)
   168a0:	df000515 	stw	fp,20(sp)
   168a4:	df000504 	addi	fp,sp,20
   168a8:	e13ffe15 	stw	r4,-8(fp)
   168ac:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   168b0:	0007883a 	mov	r3,zero
   168b4:	e0bffe17 	ldw	r2,-8(fp)
   168b8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   168bc:	e0bffe17 	ldw	r2,-8(fp)
   168c0:	10800104 	addi	r2,r2,4
   168c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168c8:	0005303a 	rdctl	r2,status
   168cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168d0:	e0fffc17 	ldw	r3,-16(fp)
   168d4:	00bfff84 	movi	r2,-2
   168d8:	1884703a 	and	r2,r3,r2
   168dc:	1001703a 	wrctl	status,r2
  
  return context;
   168e0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   168e4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   168e8:	0018ef00 	call	18ef0 <alt_tick>
   168ec:	e0bffb17 	ldw	r2,-20(fp)
   168f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168f4:	e0bffd17 	ldw	r2,-12(fp)
   168f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   168fc:	e037883a 	mov	sp,fp
   16900:	dfc00117 	ldw	ra,4(sp)
   16904:	df000017 	ldw	fp,0(sp)
   16908:	dec00204 	addi	sp,sp,8
   1690c:	f800283a 	ret

00016910 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16910:	defff904 	addi	sp,sp,-28
   16914:	dfc00615 	stw	ra,24(sp)
   16918:	df000515 	stw	fp,20(sp)
   1691c:	df000504 	addi	fp,sp,20
   16920:	e13ffc15 	stw	r4,-16(fp)
   16924:	e17ffd15 	stw	r5,-12(fp)
   16928:	e1bffe15 	stw	r6,-8(fp)
   1692c:	e1ffff15 	stw	r7,-4(fp)
   16930:	e0bfff17 	ldw	r2,-4(fp)
   16934:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16938:	008000b4 	movhi	r2,2
   1693c:	10b9d004 	addi	r2,r2,-6336
   16940:	10800017 	ldw	r2,0(r2)
   16944:	1000041e 	bne	r2,zero,16958 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   16948:	008000b4 	movhi	r2,2
   1694c:	10b9d004 	addi	r2,r2,-6336
   16950:	e0fffb17 	ldw	r3,-20(fp)
   16954:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16958:	e0bffc17 	ldw	r2,-16(fp)
   1695c:	10800104 	addi	r2,r2,4
   16960:	00c001c4 	movi	r3,7
   16964:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   16968:	e13ffe17 	ldw	r4,-8(fp)
   1696c:	e17ffc17 	ldw	r5,-16(fp)
   16970:	01800074 	movhi	r6,1
   16974:	319a2604 	addi	r6,r6,26776
   16978:	0018a340 	call	18a34 <alt_irq_register>
#endif  
}
   1697c:	e037883a 	mov	sp,fp
   16980:	dfc00117 	ldw	ra,4(sp)
   16984:	df000017 	ldw	fp,0(sp)
   16988:	dec00204 	addi	sp,sp,8
   1698c:	f800283a 	ret

00016990 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16990:	defffc04 	addi	sp,sp,-16
   16994:	df000315 	stw	fp,12(sp)
   16998:	df000304 	addi	fp,sp,12
   1699c:	e13ffe15 	stw	r4,-8(fp)
   169a0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   169a4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   169a8:	e0bfff17 	ldw	r2,-4(fp)
   169ac:	1000061e 	bne	r2,zero,169c8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   169b0:	e0bffe17 	ldw	r2,-8(fp)
   169b4:	1007883a 	mov	r3,r2
   169b8:	e0bffd03 	ldbu	r2,-12(fp)
   169bc:	1884b03a 	or	r2,r3,r2
   169c0:	e0bffd05 	stb	r2,-12(fp)
   169c4:	00000806 	br	169e8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   169c8:	e0bffe17 	ldw	r2,-8(fp)
   169cc:	1007883a 	mov	r3,r2
   169d0:	e0bffd03 	ldbu	r2,-12(fp)
   169d4:	1884b03a 	or	r2,r3,r2
   169d8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   169dc:	e0bffd03 	ldbu	r2,-12(fp)
   169e0:	10801014 	ori	r2,r2,64
   169e4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   169e8:	e0fffd03 	ldbu	r3,-12(fp)
   169ec:	00bfe004 	movi	r2,-128
   169f0:	1884b03a 	or	r2,r3,r2
}
   169f4:	e037883a 	mov	sp,fp
   169f8:	df000017 	ldw	fp,0(sp)
   169fc:	dec00104 	addi	sp,sp,4
   16a00:	f800283a 	ret

00016a04 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16a04:	defffd04 	addi	sp,sp,-12
   16a08:	df000215 	stw	fp,8(sp)
   16a0c:	df000204 	addi	fp,sp,8
   16a10:	e13ffe15 	stw	r4,-8(fp)
   16a14:	2805883a 	mov	r2,r5
   16a18:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	10800a17 	ldw	r2,40(r2)
   16a24:	1007883a 	mov	r3,r2
   16a28:	e0bfff03 	ldbu	r2,-4(fp)
   16a2c:	18800025 	stbio	r2,0(r3)
}
   16a30:	e037883a 	mov	sp,fp
   16a34:	df000017 	ldw	fp,0(sp)
   16a38:	dec00104 	addi	sp,sp,4
   16a3c:	f800283a 	ret

00016a40 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   16a40:	defffe04 	addi	sp,sp,-8
   16a44:	df000115 	stw	fp,4(sp)
   16a48:	df000104 	addi	fp,sp,4
   16a4c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   16a50:	e0bfff17 	ldw	r2,-4(fp)
   16a54:	10800a17 	ldw	r2,40(r2)
   16a58:	1007883a 	mov	r3,r2
   16a5c:	00800044 	movi	r2,1
   16a60:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   16a64:	e037883a 	mov	sp,fp
   16a68:	df000017 	ldw	fp,0(sp)
   16a6c:	dec00104 	addi	sp,sp,4
   16a70:	f800283a 	ret

00016a74 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   16a74:	defffc04 	addi	sp,sp,-16
   16a78:	dfc00315 	stw	ra,12(sp)
   16a7c:	df000215 	stw	fp,8(sp)
   16a80:	df000204 	addi	fp,sp,8
   16a84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   16a88:	e13fff17 	ldw	r4,-4(fp)
   16a8c:	014000b4 	movhi	r5,2
   16a90:	29710a04 	addi	r5,r5,-15320
   16a94:	001883c0 	call	1883c <alt_find_dev>
   16a98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16a9c:	e0bffe17 	ldw	r2,-8(fp)
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	dfc00117 	ldw	ra,4(sp)
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00204 	addi	sp,sp,8
   16ab0:	f800283a 	ret

00016ab4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16ab4:	defffb04 	addi	sp,sp,-20
   16ab8:	df000415 	stw	fp,16(sp)
   16abc:	df000404 	addi	fp,sp,16
   16ac0:	e13ffd15 	stw	r4,-12(fp)
   16ac4:	e17ffe15 	stw	r5,-8(fp)
   16ac8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16acc:	e03ffc15 	stw	zero,-16(fp)
   16ad0:	00000f06 	br	16b10 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16ad4:	e0bffd17 	ldw	r2,-12(fp)
   16ad8:	10800a17 	ldw	r2,40(r2)
   16adc:	10800044 	addi	r2,r2,1
   16ae0:	1009883a 	mov	r4,r2
   16ae4:	e0fffe17 	ldw	r3,-8(fp)
   16ae8:	e0bffc17 	ldw	r2,-16(fp)
   16aec:	1885883a 	add	r2,r3,r2
   16af0:	10800003 	ldbu	r2,0(r2)
   16af4:	10803fcc 	andi	r2,r2,255
   16af8:	1080201c 	xori	r2,r2,128
   16afc:	10bfe004 	addi	r2,r2,-128
   16b00:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16b04:	e0bffc17 	ldw	r2,-16(fp)
   16b08:	10800044 	addi	r2,r2,1
   16b0c:	e0bffc15 	stw	r2,-16(fp)
   16b10:	e0fffc17 	ldw	r3,-16(fp)
   16b14:	e0bfff17 	ldw	r2,-4(fp)
   16b18:	18bfee36 	bltu	r3,r2,16ad4 <__alt_mem_Flash_flash_data+0xf4016ad4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   16b1c:	e037883a 	mov	sp,fp
   16b20:	df000017 	ldw	fp,0(sp)
   16b24:	dec00104 	addi	sp,sp,4
   16b28:	f800283a 	ret

00016b2c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   16b2c:	defffd04 	addi	sp,sp,-12
   16b30:	df000215 	stw	fp,8(sp)
   16b34:	df000204 	addi	fp,sp,8
   16b38:	e13ffe15 	stw	r4,-8(fp)
   16b3c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   16b40:	00000d06 	br	16b78 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   16b44:	e0bffe17 	ldw	r2,-8(fp)
   16b48:	10800a17 	ldw	r2,40(r2)
   16b4c:	10800044 	addi	r2,r2,1
   16b50:	1007883a 	mov	r3,r2
   16b54:	e0bfff17 	ldw	r2,-4(fp)
   16b58:	10800003 	ldbu	r2,0(r2)
   16b5c:	10803fcc 	andi	r2,r2,255
   16b60:	1080201c 	xori	r2,r2,128
   16b64:	10bfe004 	addi	r2,r2,-128
   16b68:	18800025 	stbio	r2,0(r3)
		++ptr;
   16b6c:	e0bfff17 	ldw	r2,-4(fp)
   16b70:	10800044 	addi	r2,r2,1
   16b74:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   16b78:	e0bfff17 	ldw	r2,-4(fp)
   16b7c:	10800003 	ldbu	r2,0(r2)
   16b80:	10803fcc 	andi	r2,r2,255
   16b84:	1080201c 	xori	r2,r2,128
   16b88:	10bfe004 	addi	r2,r2,-128
   16b8c:	103fed1e 	bne	r2,zero,16b44 <__alt_mem_Flash_flash_data+0xf4016b44>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   16b90:	e037883a 	mov	sp,fp
   16b94:	df000017 	ldw	fp,0(sp)
   16b98:	dec00104 	addi	sp,sp,4
   16b9c:	f800283a 	ret

00016ba0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16ba0:	defffb04 	addi	sp,sp,-20
   16ba4:	dfc00415 	stw	ra,16(sp)
   16ba8:	df000315 	stw	fp,12(sp)
   16bac:	df000304 	addi	fp,sp,12
   16bb0:	e13ffd15 	stw	r4,-12(fp)
   16bb4:	e17ffe15 	stw	r5,-8(fp)
   16bb8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16bbc:	e0bffd17 	ldw	r2,-12(fp)
   16bc0:	10c00017 	ldw	r3,0(r2)
   16bc4:	e0bfff17 	ldw	r2,-4(fp)
   16bc8:	1809883a 	mov	r4,r3
   16bcc:	e17ffe17 	ldw	r5,-8(fp)
   16bd0:	100d883a 	mov	r6,r2
   16bd4:	0016ab40 	call	16ab4 <alt_up_character_lcd_write>
	return 0;
   16bd8:	0005883a 	mov	r2,zero
}
   16bdc:	e037883a 	mov	sp,fp
   16be0:	dfc00117 	ldw	ra,4(sp)
   16be4:	df000017 	ldw	fp,0(sp)
   16be8:	dec00204 	addi	sp,sp,8
   16bec:	f800283a 	ret

00016bf0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16bf0:	defffa04 	addi	sp,sp,-24
   16bf4:	dfc00515 	stw	ra,20(sp)
   16bf8:	df000415 	stw	fp,16(sp)
   16bfc:	df000404 	addi	fp,sp,16
   16c00:	e13ffd15 	stw	r4,-12(fp)
   16c04:	e17ffe15 	stw	r5,-8(fp)
   16c08:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16c0c:	e0bffe17 	ldw	r2,-8(fp)
   16c10:	10800a28 	cmpgeui	r2,r2,40
   16c14:	1000031e 	bne	r2,zero,16c24 <alt_up_character_lcd_set_cursor_pos+0x34>
   16c18:	e0bfff17 	ldw	r2,-4(fp)
   16c1c:	108000b0 	cmpltui	r2,r2,2
   16c20:	1000021e 	bne	r2,zero,16c2c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   16c24:	00bfffc4 	movi	r2,-1
   16c28:	00000906 	br	16c50 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16c2c:	e13ffe17 	ldw	r4,-8(fp)
   16c30:	e17fff17 	ldw	r5,-4(fp)
   16c34:	00169900 	call	16990 <get_DDRAM_addr>
   16c38:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   16c3c:	e0bffc03 	ldbu	r2,-16(fp)
   16c40:	e13ffd17 	ldw	r4,-12(fp)
   16c44:	100b883a 	mov	r5,r2
   16c48:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
	return 0;
   16c4c:	0005883a 	mov	r2,zero
}
   16c50:	e037883a 	mov	sp,fp
   16c54:	dfc00117 	ldw	ra,4(sp)
   16c58:	df000017 	ldw	fp,0(sp)
   16c5c:	dec00204 	addi	sp,sp,8
   16c60:	f800283a 	ret

00016c64 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16c64:	defffb04 	addi	sp,sp,-20
   16c68:	dfc00415 	stw	ra,16(sp)
   16c6c:	df000315 	stw	fp,12(sp)
   16c70:	df000304 	addi	fp,sp,12
   16c74:	e13ffe15 	stw	r4,-8(fp)
   16c78:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16c7c:	e0bfff17 	ldw	r2,-4(fp)
   16c80:	1000011e 	bne	r2,zero,16c88 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   16c84:	00001406 	br	16cd8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16c88:	e0bfff17 	ldw	r2,-4(fp)
   16c8c:	0080020e 	bge	zero,r2,16c98 <alt_up_character_lcd_shift_cursor+0x34>
   16c90:	00800504 	movi	r2,20
   16c94:	00000106 	br	16c9c <alt_up_character_lcd_shift_cursor+0x38>
   16c98:	00800404 	movi	r2,16
   16c9c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16ca0:	e0bfff17 	ldw	r2,-4(fp)
   16ca4:	1000010e 	bge	r2,zero,16cac <alt_up_character_lcd_shift_cursor+0x48>
   16ca8:	0085c83a 	sub	r2,zero,r2
   16cac:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16cb0:	00000406 	br	16cc4 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16cb4:	e0bffd43 	ldbu	r2,-11(fp)
   16cb8:	e13ffe17 	ldw	r4,-8(fp)
   16cbc:	100b883a 	mov	r5,r2
   16cc0:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16cc4:	e0bffd03 	ldbu	r2,-12(fp)
   16cc8:	10ffffc4 	addi	r3,r2,-1
   16ccc:	e0fffd05 	stb	r3,-12(fp)
   16cd0:	10803fcc 	andi	r2,r2,255
   16cd4:	103ff71e 	bne	r2,zero,16cb4 <__alt_mem_Flash_flash_data+0xf4016cb4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16cd8:	e037883a 	mov	sp,fp
   16cdc:	dfc00117 	ldw	ra,4(sp)
   16ce0:	df000017 	ldw	fp,0(sp)
   16ce4:	dec00204 	addi	sp,sp,8
   16ce8:	f800283a 	ret

00016cec <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16cec:	defffb04 	addi	sp,sp,-20
   16cf0:	dfc00415 	stw	ra,16(sp)
   16cf4:	df000315 	stw	fp,12(sp)
   16cf8:	df000304 	addi	fp,sp,12
   16cfc:	e13ffe15 	stw	r4,-8(fp)
   16d00:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16d04:	e0bfff17 	ldw	r2,-4(fp)
   16d08:	1000011e 	bne	r2,zero,16d10 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   16d0c:	00001406 	br	16d60 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16d10:	e0bfff17 	ldw	r2,-4(fp)
   16d14:	0080020e 	bge	zero,r2,16d20 <alt_up_character_lcd_shift_display+0x34>
   16d18:	00800704 	movi	r2,28
   16d1c:	00000106 	br	16d24 <alt_up_character_lcd_shift_display+0x38>
   16d20:	00800604 	movi	r2,24
   16d24:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16d28:	e0bfff17 	ldw	r2,-4(fp)
   16d2c:	1000010e 	bge	r2,zero,16d34 <alt_up_character_lcd_shift_display+0x48>
   16d30:	0085c83a 	sub	r2,zero,r2
   16d34:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16d38:	00000406 	br	16d4c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16d3c:	e0bffd43 	ldbu	r2,-11(fp)
   16d40:	e13ffe17 	ldw	r4,-8(fp)
   16d44:	100b883a 	mov	r5,r2
   16d48:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16d4c:	e0bffd03 	ldbu	r2,-12(fp)
   16d50:	10ffffc4 	addi	r3,r2,-1
   16d54:	e0fffd05 	stb	r3,-12(fp)
   16d58:	10803fcc 	andi	r2,r2,255
   16d5c:	103ff71e 	bne	r2,zero,16d3c <__alt_mem_Flash_flash_data+0xf4016d3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16d60:	e037883a 	mov	sp,fp
   16d64:	dfc00117 	ldw	ra,4(sp)
   16d68:	df000017 	ldw	fp,0(sp)
   16d6c:	dec00204 	addi	sp,sp,8
   16d70:	f800283a 	ret

00016d74 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   16d74:	defffa04 	addi	sp,sp,-24
   16d78:	dfc00515 	stw	ra,20(sp)
   16d7c:	df000415 	stw	fp,16(sp)
   16d80:	df000404 	addi	fp,sp,16
   16d84:	e13ffd15 	stw	r4,-12(fp)
   16d88:	e17ffe15 	stw	r5,-8(fp)
   16d8c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16d90:	e0bffe17 	ldw	r2,-8(fp)
   16d94:	10800a28 	cmpgeui	r2,r2,40
   16d98:	1000031e 	bne	r2,zero,16da8 <alt_up_character_lcd_erase_pos+0x34>
   16d9c:	e0bfff17 	ldw	r2,-4(fp)
   16da0:	108000b0 	cmpltui	r2,r2,2
   16da4:	1000021e 	bne	r2,zero,16db0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16da8:	00bfffc4 	movi	r2,-1
   16dac:	00000f06 	br	16dec <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16db0:	e13ffe17 	ldw	r4,-8(fp)
   16db4:	e17fff17 	ldw	r5,-4(fp)
   16db8:	00169900 	call	16990 <get_DDRAM_addr>
   16dbc:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16dc0:	e0bffc03 	ldbu	r2,-16(fp)
   16dc4:	e13ffd17 	ldw	r4,-12(fp)
   16dc8:	100b883a 	mov	r5,r2
   16dcc:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16dd0:	e0bffd17 	ldw	r2,-12(fp)
   16dd4:	10800a17 	ldw	r2,40(r2)
   16dd8:	10800044 	addi	r2,r2,1
   16ddc:	1007883a 	mov	r3,r2
   16de0:	00800084 	movi	r2,2
   16de4:	18800025 	stbio	r2,0(r3)
	return 0;
   16de8:	0005883a 	mov	r2,zero
}
   16dec:	e037883a 	mov	sp,fp
   16df0:	dfc00117 	ldw	ra,4(sp)
   16df4:	df000017 	ldw	fp,0(sp)
   16df8:	dec00204 	addi	sp,sp,8
   16dfc:	f800283a 	ret

00016e00 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   16e00:	defffd04 	addi	sp,sp,-12
   16e04:	dfc00215 	stw	ra,8(sp)
   16e08:	df000115 	stw	fp,4(sp)
   16e0c:	df000104 	addi	fp,sp,4
   16e10:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   16e14:	e13fff17 	ldw	r4,-4(fp)
   16e18:	01400304 	movi	r5,12
   16e1c:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
}
   16e20:	e037883a 	mov	sp,fp
   16e24:	dfc00117 	ldw	ra,4(sp)
   16e28:	df000017 	ldw	fp,0(sp)
   16e2c:	dec00204 	addi	sp,sp,8
   16e30:	f800283a 	ret

00016e34 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   16e34:	defffd04 	addi	sp,sp,-12
   16e38:	dfc00215 	stw	ra,8(sp)
   16e3c:	df000115 	stw	fp,4(sp)
   16e40:	df000104 	addi	fp,sp,4
   16e44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   16e48:	e13fff17 	ldw	r4,-4(fp)
   16e4c:	014003c4 	movi	r5,15
   16e50:	0016a040 	call	16a04 <alt_up_character_lcd_send_cmd>
}
   16e54:	e037883a 	mov	sp,fp
   16e58:	dfc00117 	ldw	ra,4(sp)
   16e5c:	df000017 	ldw	fp,0(sp)
   16e60:	dec00204 	addi	sp,sp,8
   16e64:	f800283a 	ret

00016e68 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   16e68:	defffd04 	addi	sp,sp,-12
   16e6c:	df000215 	stw	fp,8(sp)
   16e70:	df000204 	addi	fp,sp,8
   16e74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16e78:	e0bfff17 	ldw	r2,-4(fp)
   16e7c:	10800a17 	ldw	r2,40(r2)
   16e80:	10800104 	addi	r2,r2,4
   16e84:	10800037 	ldwio	r2,0(r2)
   16e88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   16e8c:	e0bffe17 	ldw	r2,-8(fp)
   16e90:	10800054 	ori	r2,r2,1
   16e94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16e98:	e0bfff17 	ldw	r2,-4(fp)
   16e9c:	10800a17 	ldw	r2,40(r2)
   16ea0:	10800104 	addi	r2,r2,4
   16ea4:	1007883a 	mov	r3,r2
   16ea8:	e0bffe17 	ldw	r2,-8(fp)
   16eac:	18800035 	stwio	r2,0(r3)
}
   16eb0:	e037883a 	mov	sp,fp
   16eb4:	df000017 	ldw	fp,0(sp)
   16eb8:	dec00104 	addi	sp,sp,4
   16ebc:	f800283a 	ret

00016ec0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   16ec0:	defffd04 	addi	sp,sp,-12
   16ec4:	df000215 	stw	fp,8(sp)
   16ec8:	df000204 	addi	fp,sp,8
   16ecc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16ed0:	e0bfff17 	ldw	r2,-4(fp)
   16ed4:	10800a17 	ldw	r2,40(r2)
   16ed8:	10800104 	addi	r2,r2,4
   16edc:	10800037 	ldwio	r2,0(r2)
   16ee0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   16ee4:	e0fffe17 	ldw	r3,-8(fp)
   16ee8:	00bfff84 	movi	r2,-2
   16eec:	1884703a 	and	r2,r3,r2
   16ef0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16ef4:	e0bfff17 	ldw	r2,-4(fp)
   16ef8:	10800a17 	ldw	r2,40(r2)
   16efc:	10800104 	addi	r2,r2,4
   16f00:	1007883a 	mov	r3,r2
   16f04:	e0bffe17 	ldw	r2,-8(fp)
   16f08:	18800035 	stwio	r2,0(r3)
}
   16f0c:	e037883a 	mov	sp,fp
   16f10:	df000017 	ldw	fp,0(sp)
   16f14:	dec00104 	addi	sp,sp,4
   16f18:	f800283a 	ret

00016f1c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   16f1c:	defffd04 	addi	sp,sp,-12
   16f20:	df000215 	stw	fp,8(sp)
   16f24:	df000204 	addi	fp,sp,8
   16f28:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   16f2c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   16f30:	e0bfff17 	ldw	r2,-4(fp)
   16f34:	10800a17 	ldw	r2,40(r2)
   16f38:	10800084 	addi	r2,r2,2
   16f3c:	1080002b 	ldhuio	r2,0(r2)
   16f40:	10bfffcc 	andi	r2,r2,65535
   16f44:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   16f48:	e0bffe0b 	ldhu	r2,-8(fp)
}
   16f4c:	e037883a 	mov	sp,fp
   16f50:	df000017 	ldw	fp,0(sp)
   16f54:	dec00104 	addi	sp,sp,4
   16f58:	f800283a 	ret

00016f5c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   16f5c:	defffd04 	addi	sp,sp,-12
   16f60:	df000215 	stw	fp,8(sp)
   16f64:	df000204 	addi	fp,sp,8
   16f68:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   16f6c:	e0bfff17 	ldw	r2,-4(fp)
   16f70:	10800a17 	ldw	r2,40(r2)
   16f74:	10800104 	addi	r2,r2,4
   16f78:	10800037 	ldwio	r2,0(r2)
   16f7c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   16f80:	e0bffe17 	ldw	r2,-8(fp)
   16f84:	1004d43a 	srli	r2,r2,16
}
   16f88:	e037883a 	mov	sp,fp
   16f8c:	df000017 	ldw	fp,0(sp)
   16f90:	dec00104 	addi	sp,sp,4
   16f94:	f800283a 	ret

00016f98 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   16f98:	defffd04 	addi	sp,sp,-12
   16f9c:	df000215 	stw	fp,8(sp)
   16fa0:	df000204 	addi	fp,sp,8
   16fa4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   16fa8:	e0bfff17 	ldw	r2,-4(fp)
   16fac:	1080800c 	andi	r2,r2,512
   16fb0:	1004d27a 	srli	r2,r2,9
   16fb4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   16fb8:	e0bffe17 	ldw	r2,-8(fp)
   16fbc:	10000226 	beq	r2,zero,16fc8 <alt_up_irda_check_parity+0x30>
   16fc0:	00bfffc4 	movi	r2,-1
   16fc4:	00000106 	br	16fcc <alt_up_irda_check_parity+0x34>
   16fc8:	0005883a 	mov	r2,zero
}
   16fcc:	e037883a 	mov	sp,fp
   16fd0:	df000017 	ldw	fp,0(sp)
   16fd4:	dec00104 	addi	sp,sp,4
   16fd8:	f800283a 	ret

00016fdc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   16fdc:	defffd04 	addi	sp,sp,-12
   16fe0:	df000215 	stw	fp,8(sp)
   16fe4:	df000204 	addi	fp,sp,8
   16fe8:	e13ffe15 	stw	r4,-8(fp)
   16fec:	2805883a 	mov	r2,r5
   16ff0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   16ff4:	e0bffe17 	ldw	r2,-8(fp)
   16ff8:	10800a17 	ldw	r2,40(r2)
   16ffc:	1007883a 	mov	r3,r2
   17000:	e0bfff03 	ldbu	r2,-4(fp)
   17004:	18800035 	stwio	r2,0(r3)
	return 0;
   17008:	0005883a 	mov	r2,zero
}
   1700c:	e037883a 	mov	sp,fp
   17010:	df000017 	ldw	fp,0(sp)
   17014:	dec00104 	addi	sp,sp,4
   17018:	f800283a 	ret

0001701c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1701c:	defffa04 	addi	sp,sp,-24
   17020:	dfc00515 	stw	ra,20(sp)
   17024:	df000415 	stw	fp,16(sp)
   17028:	df000404 	addi	fp,sp,16
   1702c:	e13ffd15 	stw	r4,-12(fp)
   17030:	e17ffe15 	stw	r5,-8(fp)
   17034:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   17038:	e0bffd17 	ldw	r2,-12(fp)
   1703c:	10800a17 	ldw	r2,40(r2)
   17040:	10800037 	ldwio	r2,0(r2)
   17044:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   17048:	e0bffc17 	ldw	r2,-16(fp)
   1704c:	1007883a 	mov	r3,r2
   17050:	e0bffe17 	ldw	r2,-8(fp)
   17054:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   17058:	e13ffc17 	ldw	r4,-16(fp)
   1705c:	0016f980 	call	16f98 <alt_up_irda_check_parity>
   17060:	1007883a 	mov	r3,r2
   17064:	e0bfff17 	ldw	r2,-4(fp)
   17068:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1706c:	e0bffc17 	ldw	r2,-16(fp)
   17070:	10a0000c 	andi	r2,r2,32768
   17074:	1004d3fa 	srli	r2,r2,15
   17078:	10bfffc4 	addi	r2,r2,-1
}
   1707c:	e037883a 	mov	sp,fp
   17080:	dfc00117 	ldw	ra,4(sp)
   17084:	df000017 	ldw	fp,0(sp)
   17088:	dec00204 	addi	sp,sp,8
   1708c:	f800283a 	ret

00017090 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17090:	defff804 	addi	sp,sp,-32
   17094:	dfc00715 	stw	ra,28(sp)
   17098:	df000615 	stw	fp,24(sp)
   1709c:	df000604 	addi	fp,sp,24
   170a0:	e13ffd15 	stw	r4,-12(fp)
   170a4:	e17ffe15 	stw	r5,-8(fp)
   170a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   170ac:	e0bffd17 	ldw	r2,-12(fp)
   170b0:	10800017 	ldw	r2,0(r2)
   170b4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   170b8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   170bc:	00000e06 	br	170f8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   170c0:	e0bffe17 	ldw	r2,-8(fp)
   170c4:	10c00044 	addi	r3,r2,1
   170c8:	e0fffe15 	stw	r3,-8(fp)
   170cc:	e0fffc04 	addi	r3,fp,-16
   170d0:	e13ffb17 	ldw	r4,-20(fp)
   170d4:	100b883a 	mov	r5,r2
   170d8:	180d883a 	mov	r6,r3
   170dc:	001701c0 	call	1701c <alt_up_irda_read_data>
   170e0:	1000041e 	bne	r2,zero,170f4 <alt_up_irda_read_fd+0x64>
			count++;
   170e4:	e0bffa17 	ldw	r2,-24(fp)
   170e8:	10800044 	addi	r2,r2,1
   170ec:	e0bffa15 	stw	r2,-24(fp)
   170f0:	00000106 	br	170f8 <alt_up_irda_read_fd+0x68>
		else
			break;
   170f4:	00000406 	br	17108 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   170f8:	e0bfff17 	ldw	r2,-4(fp)
   170fc:	10ffffc4 	addi	r3,r2,-1
   17100:	e0ffff15 	stw	r3,-4(fp)
   17104:	103fee1e 	bne	r2,zero,170c0 <__alt_mem_Flash_flash_data+0xf40170c0>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   17108:	e0bffa17 	ldw	r2,-24(fp)
}
   1710c:	e037883a 	mov	sp,fp
   17110:	dfc00117 	ldw	ra,4(sp)
   17114:	df000017 	ldw	fp,0(sp)
   17118:	dec00204 	addi	sp,sp,8
   1711c:	f800283a 	ret

00017120 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17120:	defff904 	addi	sp,sp,-28
   17124:	dfc00615 	stw	ra,24(sp)
   17128:	df000515 	stw	fp,20(sp)
   1712c:	df000504 	addi	fp,sp,20
   17130:	e13ffd15 	stw	r4,-12(fp)
   17134:	e17ffe15 	stw	r5,-8(fp)
   17138:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1713c:	e0bffd17 	ldw	r2,-12(fp)
   17140:	10800017 	ldw	r2,0(r2)
   17144:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17148:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1714c:	00000e06 	br	17188 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   17150:	e0bffe17 	ldw	r2,-8(fp)
   17154:	10c00044 	addi	r3,r2,1
   17158:	e0fffe15 	stw	r3,-8(fp)
   1715c:	10800003 	ldbu	r2,0(r2)
   17160:	10803fcc 	andi	r2,r2,255
   17164:	e13ffc17 	ldw	r4,-16(fp)
   17168:	100b883a 	mov	r5,r2
   1716c:	0016fdc0 	call	16fdc <alt_up_irda_write_data>
   17170:	1000041e 	bne	r2,zero,17184 <alt_up_irda_write_fd+0x64>
			count++;
   17174:	e0bffb17 	ldw	r2,-20(fp)
   17178:	10800044 	addi	r2,r2,1
   1717c:	e0bffb15 	stw	r2,-20(fp)
   17180:	00000106 	br	17188 <alt_up_irda_write_fd+0x68>
		else
			break;
   17184:	00000406 	br	17198 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17188:	e0bfff17 	ldw	r2,-4(fp)
   1718c:	10ffffc4 	addi	r3,r2,-1
   17190:	e0ffff15 	stw	r3,-4(fp)
   17194:	103fee1e 	bne	r2,zero,17150 <__alt_mem_Flash_flash_data+0xf4017150>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   17198:	e0bffb17 	ldw	r2,-20(fp)
}
   1719c:	e037883a 	mov	sp,fp
   171a0:	dfc00117 	ldw	ra,4(sp)
   171a4:	df000017 	ldw	fp,0(sp)
   171a8:	dec00204 	addi	sp,sp,8
   171ac:	f800283a 	ret

000171b0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   171b0:	defffc04 	addi	sp,sp,-16
   171b4:	dfc00315 	stw	ra,12(sp)
   171b8:	df000215 	stw	fp,8(sp)
   171bc:	df000204 	addi	fp,sp,8
   171c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   171c4:	e13fff17 	ldw	r4,-4(fp)
   171c8:	014000b4 	movhi	r5,2
   171cc:	29710a04 	addi	r5,r5,-15320
   171d0:	001883c0 	call	1883c <alt_find_dev>
   171d4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   171d8:	e0bffe17 	ldw	r2,-8(fp)
}
   171dc:	e037883a 	mov	sp,fp
   171e0:	dfc00117 	ldw	ra,4(sp)
   171e4:	df000017 	ldw	fp,0(sp)
   171e8:	dec00204 	addi	sp,sp,8
   171ec:	f800283a 	ret

000171f0 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   171f0:	defffc04 	addi	sp,sp,-16
   171f4:	dfc00315 	stw	ra,12(sp)
   171f8:	df000215 	stw	fp,8(sp)
   171fc:	df000204 	addi	fp,sp,8
   17200:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   17204:	e13fff17 	ldw	r4,-4(fp)
   17208:	014000b4 	movhi	r5,2
   1720c:	29710a04 	addi	r5,r5,-15320
   17210:	001883c0 	call	1883c <alt_find_dev>
   17214:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17218:	e0bffe17 	ldw	r2,-8(fp)
}
   1721c:	e037883a 	mov	sp,fp
   17220:	dfc00117 	ldw	ra,4(sp)
   17224:	df000017 	ldw	fp,0(sp)
   17228:	dec00204 	addi	sp,sp,8
   1722c:	f800283a 	ret

00017230 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   17230:	defffd04 	addi	sp,sp,-12
   17234:	df000215 	stw	fp,8(sp)
   17238:	df000204 	addi	fp,sp,8
   1723c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   17240:	e0bfff17 	ldw	r2,-4(fp)
   17244:	1080400c 	andi	r2,r2,256
   17248:	1004d23a 	srli	r2,r2,8
   1724c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   17250:	e0bffe03 	ldbu	r2,-8(fp)
}
   17254:	e037883a 	mov	sp,fp
   17258:	df000017 	ldw	fp,0(sp)
   1725c:	dec00104 	addi	sp,sp,4
   17260:	f800283a 	ret

00017264 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   17264:	defffd04 	addi	sp,sp,-12
   17268:	df000215 	stw	fp,8(sp)
   1726c:	df000204 	addi	fp,sp,8
   17270:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   17274:	e0bfff17 	ldw	r2,-4(fp)
   17278:	1080004c 	andi	r2,r2,1
   1727c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17280:	e0bffe03 	ldbu	r2,-8(fp)
}
   17284:	e037883a 	mov	sp,fp
   17288:	df000017 	ldw	fp,0(sp)
   1728c:	dec00104 	addi	sp,sp,4
   17290:	f800283a 	ret

00017294 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   17294:	defffd04 	addi	sp,sp,-12
   17298:	df000215 	stw	fp,8(sp)
   1729c:	df000204 	addi	fp,sp,8
   172a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   172a4:	e0bfff17 	ldw	r2,-4(fp)
   172a8:	1081000c 	andi	r2,r2,1024
   172ac:	1004d2ba 	srli	r2,r2,10
   172b0:	e0bffe05 	stb	r2,-8(fp)
	return re;
   172b4:	e0bffe03 	ldbu	r2,-8(fp)
}
   172b8:	e037883a 	mov	sp,fp
   172bc:	df000017 	ldw	fp,0(sp)
   172c0:	dec00104 	addi	sp,sp,4
   172c4:	f800283a 	ret

000172c8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   172c8:	defffd04 	addi	sp,sp,-12
   172cc:	df000215 	stw	fp,8(sp)
   172d0:	df000204 	addi	fp,sp,8
   172d4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   172d8:	e0bfff17 	ldw	r2,-4(fp)
   172dc:	1004d43a 	srli	r2,r2,16
   172e0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   172e4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   172e8:	e037883a 	mov	sp,fp
   172ec:	df000017 	ldw	fp,0(sp)
   172f0:	dec00104 	addi	sp,sp,4
   172f4:	f800283a 	ret

000172f8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   172f8:	defffd04 	addi	sp,sp,-12
   172fc:	df000215 	stw	fp,8(sp)
   17300:	df000204 	addi	fp,sp,8
   17304:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17308:	e0bfff17 	ldw	r2,-4(fp)
   1730c:	10a0000c 	andi	r2,r2,32768
   17310:	1004d3fa 	srli	r2,r2,15
   17314:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17318:	e0bffe03 	ldbu	r2,-8(fp)
}
   1731c:	e037883a 	mov	sp,fp
   17320:	df000017 	ldw	fp,0(sp)
   17324:	dec00104 	addi	sp,sp,4
   17328:	f800283a 	ret

0001732c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1732c:	defffd04 	addi	sp,sp,-12
   17330:	df000215 	stw	fp,8(sp)
   17334:	df000204 	addi	fp,sp,8
   17338:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1733c:	e0bfff17 	ldw	r2,-4(fp)
   17340:	e0bffe05 	stb	r2,-8(fp)
	return data;
   17344:	e0bffe03 	ldbu	r2,-8(fp)
}
   17348:	e037883a 	mov	sp,fp
   1734c:	df000017 	ldw	fp,0(sp)
   17350:	dec00104 	addi	sp,sp,4
   17354:	f800283a 	ret

00017358 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   17358:	defffb04 	addi	sp,sp,-20
   1735c:	dfc00415 	stw	ra,16(sp)
   17360:	df000315 	stw	fp,12(sp)
   17364:	df000304 	addi	fp,sp,12
   17368:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1736c:	e13fff17 	ldw	r4,-4(fp)
   17370:	01403fc4 	movi	r5,255
   17374:	00175b40 	call	175b4 <alt_up_ps2_write_data_byte_with_ack>
   17378:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1737c:	e0bffd17 	ldw	r2,-12(fp)
   17380:	1000211e 	bne	r2,zero,17408 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17384:	e0bffe04 	addi	r2,fp,-8
   17388:	e13fff17 	ldw	r4,-4(fp)
   1738c:	100b883a 	mov	r5,r2
   17390:	00176180 	call	17618 <alt_up_ps2_read_data_byte_timeout>
   17394:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17398:	e0bffd17 	ldw	r2,-12(fp)
   1739c:	10001a1e 	bne	r2,zero,17408 <alt_up_ps2_init+0xb0>
   173a0:	e0bffe03 	ldbu	r2,-8(fp)
   173a4:	10803fcc 	andi	r2,r2,255
   173a8:	10802a98 	cmpnei	r2,r2,170
   173ac:	1000161e 	bne	r2,zero,17408 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   173b0:	e0bffe04 	addi	r2,fp,-8
   173b4:	e13fff17 	ldw	r4,-4(fp)
   173b8:	100b883a 	mov	r5,r2
   173bc:	00176180 	call	17618 <alt_up_ps2_read_data_byte_timeout>
   173c0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   173c4:	e0bffd17 	ldw	r2,-12(fp)
   173c8:	10bfe318 	cmpnei	r2,r2,-116
   173cc:	1000041e 	bne	r2,zero,173e0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   173d0:	e0bfff17 	ldw	r2,-4(fp)
   173d4:	00c00044 	movi	r3,1
   173d8:	10c00d15 	stw	r3,52(r2)
   173dc:	00000a06 	br	17408 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   173e0:	e0bffd17 	ldw	r2,-12(fp)
   173e4:	1000081e 	bne	r2,zero,17408 <alt_up_ps2_init+0xb0>
   173e8:	e0bffe03 	ldbu	r2,-8(fp)
   173ec:	10803fcc 	andi	r2,r2,255
   173f0:	1000051e 	bne	r2,zero,17408 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   173f4:	e0bfff17 	ldw	r2,-4(fp)
   173f8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   173fc:	e13fff17 	ldw	r4,-4(fp)
   17400:	01403d04 	movi	r5,244
   17404:	00174d00 	call	174d0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17408:	e037883a 	mov	sp,fp
   1740c:	dfc00117 	ldw	ra,4(sp)
   17410:	df000017 	ldw	fp,0(sp)
   17414:	dec00204 	addi	sp,sp,8
   17418:	f800283a 	ret

0001741c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1741c:	defffd04 	addi	sp,sp,-12
   17420:	df000215 	stw	fp,8(sp)
   17424:	df000204 	addi	fp,sp,8
   17428:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1742c:	e0bfff17 	ldw	r2,-4(fp)
   17430:	10800a17 	ldw	r2,40(r2)
   17434:	10800104 	addi	r2,r2,4
   17438:	10800037 	ldwio	r2,0(r2)
   1743c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17440:	e0bffe17 	ldw	r2,-8(fp)
   17444:	10800054 	ori	r2,r2,1
   17448:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1744c:	e0bfff17 	ldw	r2,-4(fp)
   17450:	10800a17 	ldw	r2,40(r2)
   17454:	10800104 	addi	r2,r2,4
   17458:	1007883a 	mov	r3,r2
   1745c:	e0bffe17 	ldw	r2,-8(fp)
   17460:	18800035 	stwio	r2,0(r3)
}
   17464:	e037883a 	mov	sp,fp
   17468:	df000017 	ldw	fp,0(sp)
   1746c:	dec00104 	addi	sp,sp,4
   17470:	f800283a 	ret

00017474 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17474:	defffd04 	addi	sp,sp,-12
   17478:	df000215 	stw	fp,8(sp)
   1747c:	df000204 	addi	fp,sp,8
   17480:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17484:	e0bfff17 	ldw	r2,-4(fp)
   17488:	10800a17 	ldw	r2,40(r2)
   1748c:	10800104 	addi	r2,r2,4
   17490:	10800037 	ldwio	r2,0(r2)
   17494:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17498:	e0fffe17 	ldw	r3,-8(fp)
   1749c:	00bfff84 	movi	r2,-2
   174a0:	1884703a 	and	r2,r3,r2
   174a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   174a8:	e0bfff17 	ldw	r2,-4(fp)
   174ac:	10800a17 	ldw	r2,40(r2)
   174b0:	10800104 	addi	r2,r2,4
   174b4:	1007883a 	mov	r3,r2
   174b8:	e0bffe17 	ldw	r2,-8(fp)
   174bc:	18800035 	stwio	r2,0(r3)
}
   174c0:	e037883a 	mov	sp,fp
   174c4:	df000017 	ldw	fp,0(sp)
   174c8:	dec00104 	addi	sp,sp,4
   174cc:	f800283a 	ret

000174d0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   174d0:	defffb04 	addi	sp,sp,-20
   174d4:	dfc00415 	stw	ra,16(sp)
   174d8:	df000315 	stw	fp,12(sp)
   174dc:	df000304 	addi	fp,sp,12
   174e0:	e13ffe15 	stw	r4,-8(fp)
   174e4:	2805883a 	mov	r2,r5
   174e8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   174ec:	e0bffe17 	ldw	r2,-8(fp)
   174f0:	10800a17 	ldw	r2,40(r2)
   174f4:	1007883a 	mov	r3,r2
   174f8:	e0bfff03 	ldbu	r2,-4(fp)
   174fc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17500:	e0bffe17 	ldw	r2,-8(fp)
   17504:	10800a17 	ldw	r2,40(r2)
   17508:	10800104 	addi	r2,r2,4
   1750c:	10800037 	ldwio	r2,0(r2)
   17510:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17514:	e13ffd17 	ldw	r4,-12(fp)
   17518:	00172940 	call	17294 <read_CE_bit>
   1751c:	10803fcc 	andi	r2,r2,255
   17520:	10000226 	beq	r2,zero,1752c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17524:	00bffec4 	movi	r2,-5
   17528:	00000106 	br	17530 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1752c:	0005883a 	mov	r2,zero
}
   17530:	e037883a 	mov	sp,fp
   17534:	dfc00117 	ldw	ra,4(sp)
   17538:	df000017 	ldw	fp,0(sp)
   1753c:	dec00204 	addi	sp,sp,8
   17540:	f800283a 	ret

00017544 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   17544:	defffc04 	addi	sp,sp,-16
   17548:	dfc00315 	stw	ra,12(sp)
   1754c:	df000215 	stw	fp,8(sp)
   17550:	df000204 	addi	fp,sp,8
   17554:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   17558:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1755c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   17560:	e0bffe44 	addi	r2,fp,-7
   17564:	e13fff17 	ldw	r4,-4(fp)
   17568:	100b883a 	mov	r5,r2
   1756c:	00176180 	call	17618 <alt_up_ps2_read_data_byte_timeout>
   17570:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   17574:	e0bffe03 	ldbu	r2,-8(fp)
   17578:	1000061e 	bne	r2,zero,17594 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1757c:	e0bffe43 	ldbu	r2,-7(fp)
   17580:	10803fcc 	andi	r2,r2,255
   17584:	10803e98 	cmpnei	r2,r2,250
   17588:	1000041e 	bne	r2,zero,1759c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1758c:	0005883a 	mov	r2,zero
   17590:	00000306 	br	175a0 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   17594:	e0bffe03 	ldbu	r2,-8(fp)
   17598:	00000106 	br	175a0 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1759c:	003ff006 	br	17560 <__alt_mem_Flash_flash_data+0xf4017560>
	return -ETIMEDOUT;
}
   175a0:	e037883a 	mov	sp,fp
   175a4:	dfc00117 	ldw	ra,4(sp)
   175a8:	df000017 	ldw	fp,0(sp)
   175ac:	dec00204 	addi	sp,sp,8
   175b0:	f800283a 	ret

000175b4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   175b4:	defffa04 	addi	sp,sp,-24
   175b8:	dfc00515 	stw	ra,20(sp)
   175bc:	df000415 	stw	fp,16(sp)
   175c0:	df000404 	addi	fp,sp,16
   175c4:	e13ffe15 	stw	r4,-8(fp)
   175c8:	2805883a 	mov	r2,r5
   175cc:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   175d0:	e0bfff03 	ldbu	r2,-4(fp)
   175d4:	e13ffe17 	ldw	r4,-8(fp)
   175d8:	100b883a 	mov	r5,r2
   175dc:	00174d00 	call	174d0 <alt_up_ps2_write_data_byte>
   175e0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   175e4:	e0bffc17 	ldw	r2,-16(fp)
   175e8:	10000226 	beq	r2,zero,175f4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   175ec:	e0bffc17 	ldw	r2,-16(fp)
   175f0:	00000406 	br	17604 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   175f4:	e13ffe17 	ldw	r4,-8(fp)
   175f8:	00175440 	call	17544 <alt_up_ps2_wait_for_ack>
   175fc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17600:	e0bffd17 	ldw	r2,-12(fp)
}
   17604:	e037883a 	mov	sp,fp
   17608:	dfc00117 	ldw	ra,4(sp)
   1760c:	df000017 	ldw	fp,0(sp)
   17610:	dec00204 	addi	sp,sp,8
   17614:	f800283a 	ret

00017618 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17618:	defffa04 	addi	sp,sp,-24
   1761c:	dfc00515 	stw	ra,20(sp)
   17620:	df000415 	stw	fp,16(sp)
   17624:	df000404 	addi	fp,sp,16
   17628:	e13ffe15 	stw	r4,-8(fp)
   1762c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17630:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17634:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   17638:	e0bffc17 	ldw	r2,-16(fp)
   1763c:	10800044 	addi	r2,r2,1
   17640:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17644:	e0bffe17 	ldw	r2,-8(fp)
   17648:	10800a17 	ldw	r2,40(r2)
   1764c:	10800037 	ldwio	r2,0(r2)
   17650:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   17654:	e13ffd17 	ldw	r4,-12(fp)
   17658:	00172f80 	call	172f8 <read_data_valid>
   1765c:	10803fcc 	andi	r2,r2,255
   17660:	10000726 	beq	r2,zero,17680 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17664:	e13ffd17 	ldw	r4,-12(fp)
   17668:	001732c0 	call	1732c <read_data_byte>
   1766c:	1007883a 	mov	r3,r2
   17670:	e0bfff17 	ldw	r2,-4(fp)
   17674:	10c00005 	stb	r3,0(r2)
			return 0;
   17678:	0005883a 	mov	r2,zero
   1767c:	00000a06 	br	176a8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17680:	e0bffe17 	ldw	r2,-8(fp)
   17684:	10800c17 	ldw	r2,48(r2)
   17688:	10000626 	beq	r2,zero,176a4 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1768c:	e0bffe17 	ldw	r2,-8(fp)
   17690:	10c00c17 	ldw	r3,48(r2)
   17694:	e0bffc17 	ldw	r2,-16(fp)
   17698:	1880022e 	bgeu	r3,r2,176a4 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1769c:	00bfe304 	movi	r2,-116
   176a0:	00000106 	br	176a8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   176a4:	003fe406 	br	17638 <__alt_mem_Flash_flash_data+0xf4017638>
}
   176a8:	e037883a 	mov	sp,fp
   176ac:	dfc00117 	ldw	ra,4(sp)
   176b0:	df000017 	ldw	fp,0(sp)
   176b4:	dec00204 	addi	sp,sp,8
   176b8:	f800283a 	ret

000176bc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   176bc:	defffb04 	addi	sp,sp,-20
   176c0:	dfc00415 	stw	ra,16(sp)
   176c4:	df000315 	stw	fp,12(sp)
   176c8:	df000304 	addi	fp,sp,12
   176cc:	e13ffe15 	stw	r4,-8(fp)
   176d0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   176d4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   176d8:	e0bffe17 	ldw	r2,-8(fp)
   176dc:	10800a17 	ldw	r2,40(r2)
   176e0:	10800037 	ldwio	r2,0(r2)
   176e4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   176e8:	e13ffd17 	ldw	r4,-12(fp)
   176ec:	00172f80 	call	172f8 <read_data_valid>
   176f0:	10803fcc 	andi	r2,r2,255
   176f4:	10000726 	beq	r2,zero,17714 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   176f8:	e13ffd17 	ldw	r4,-12(fp)
   176fc:	001732c0 	call	1732c <read_data_byte>
   17700:	1007883a 	mov	r3,r2
   17704:	e0bfff17 	ldw	r2,-4(fp)
   17708:	10c00005 	stb	r3,0(r2)
		return 0;
   1770c:	0005883a 	mov	r2,zero
   17710:	00000106 	br	17718 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17714:	00bfffc4 	movi	r2,-1
}
   17718:	e037883a 	mov	sp,fp
   1771c:	dfc00117 	ldw	ra,4(sp)
   17720:	df000017 	ldw	fp,0(sp)
   17724:	dec00204 	addi	sp,sp,8
   17728:	f800283a 	ret

0001772c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1772c:	defffb04 	addi	sp,sp,-20
   17730:	dfc00415 	stw	ra,16(sp)
   17734:	df000315 	stw	fp,12(sp)
   17738:	df000304 	addi	fp,sp,12
   1773c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17740:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17744:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17748:	e0bfff17 	ldw	r2,-4(fp)
   1774c:	10800a17 	ldw	r2,40(r2)
   17750:	10800037 	ldwio	r2,0(r2)
   17754:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   17758:	e13ffe17 	ldw	r4,-8(fp)
   1775c:	00172c80 	call	172c8 <read_num_bytes_available>
   17760:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17764:	e0bffd0b 	ldhu	r2,-12(fp)
   17768:	103ff71e 	bne	r2,zero,17748 <__alt_mem_Flash_flash_data+0xf4017748>
}
   1776c:	e037883a 	mov	sp,fp
   17770:	dfc00117 	ldw	ra,4(sp)
   17774:	df000017 	ldw	fp,0(sp)
   17778:	dec00204 	addi	sp,sp,8
   1777c:	f800283a 	ret

00017780 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17780:	defff804 	addi	sp,sp,-32
   17784:	dfc00715 	stw	ra,28(sp)
   17788:	df000615 	stw	fp,24(sp)
   1778c:	df000604 	addi	fp,sp,24
   17790:	e13ffd15 	stw	r4,-12(fp)
   17794:	e17ffe15 	stw	r5,-8(fp)
   17798:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1779c:	e0bffd17 	ldw	r2,-12(fp)
   177a0:	10800017 	ldw	r2,0(r2)
   177a4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   177a8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   177ac:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   177b0:	e0fffc17 	ldw	r3,-16(fp)
   177b4:	e0bfff17 	ldw	r2,-4(fp)
   177b8:	18bffd16 	blt	r3,r2,177b0 <__alt_mem_Flash_flash_data+0xf40177b0>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   177bc:	e0bffe17 	ldw	r2,-8(fp)
   177c0:	10c00044 	addi	r3,r2,1
   177c4:	e0fffe15 	stw	r3,-8(fp)
   177c8:	e13ffa17 	ldw	r4,-24(fp)
   177cc:	100b883a 	mov	r5,r2
   177d0:	00176180 	call	17618 <alt_up_ps2_read_data_byte_timeout>
   177d4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   177d8:	e0bffb17 	ldw	r2,-20(fp)
   177dc:	10000226 	beq	r2,zero,177e8 <alt_up_ps2_read_fd+0x68>
			return count;
   177e0:	e0bffc17 	ldw	r2,-16(fp)
   177e4:	00000406 	br	177f8 <alt_up_ps2_read_fd+0x78>
		count++;
   177e8:	e0bffc17 	ldw	r2,-16(fp)
   177ec:	10800044 	addi	r2,r2,1
   177f0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   177f4:	e0bffc17 	ldw	r2,-16(fp)
}
   177f8:	e037883a 	mov	sp,fp
   177fc:	dfc00117 	ldw	ra,4(sp)
   17800:	df000017 	ldw	fp,0(sp)
   17804:	dec00204 	addi	sp,sp,8
   17808:	f800283a 	ret

0001780c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1780c:	defff804 	addi	sp,sp,-32
   17810:	dfc00715 	stw	ra,28(sp)
   17814:	df000615 	stw	fp,24(sp)
   17818:	df000604 	addi	fp,sp,24
   1781c:	e13ffd15 	stw	r4,-12(fp)
   17820:	e17ffe15 	stw	r5,-8(fp)
   17824:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17828:	e0bffd17 	ldw	r2,-12(fp)
   1782c:	10800017 	ldw	r2,0(r2)
   17830:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17834:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   17838:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1783c:	00001006 	br	17880 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17840:	e0bffe17 	ldw	r2,-8(fp)
   17844:	10c00044 	addi	r3,r2,1
   17848:	e0fffe15 	stw	r3,-8(fp)
   1784c:	10800003 	ldbu	r2,0(r2)
   17850:	10803fcc 	andi	r2,r2,255
   17854:	e13ffb17 	ldw	r4,-20(fp)
   17858:	100b883a 	mov	r5,r2
   1785c:	00174d00 	call	174d0 <alt_up_ps2_write_data_byte>
   17860:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17864:	e0bffc17 	ldw	r2,-16(fp)
   17868:	10000226 	beq	r2,zero,17874 <alt_up_ps2_write_fd+0x68>
			return count;
   1786c:	e0bffa17 	ldw	r2,-24(fp)
   17870:	00000706 	br	17890 <alt_up_ps2_write_fd+0x84>
		count++;
   17874:	e0bffa17 	ldw	r2,-24(fp)
   17878:	10800044 	addi	r2,r2,1
   1787c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   17880:	e0fffa17 	ldw	r3,-24(fp)
   17884:	e0bfff17 	ldw	r2,-4(fp)
   17888:	18bfed16 	blt	r3,r2,17840 <__alt_mem_Flash_flash_data+0xf4017840>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1788c:	e0bffa17 	ldw	r2,-24(fp)
}
   17890:	e037883a 	mov	sp,fp
   17894:	dfc00117 	ldw	ra,4(sp)
   17898:	df000017 	ldw	fp,0(sp)
   1789c:	dec00204 	addi	sp,sp,8
   178a0:	f800283a 	ret

000178a4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   178a4:	defffc04 	addi	sp,sp,-16
   178a8:	dfc00315 	stw	ra,12(sp)
   178ac:	df000215 	stw	fp,8(sp)
   178b0:	df000204 	addi	fp,sp,8
   178b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   178b8:	e13fff17 	ldw	r4,-4(fp)
   178bc:	014000b4 	movhi	r5,2
   178c0:	29710a04 	addi	r5,r5,-15320
   178c4:	001883c0 	call	1883c <alt_find_dev>
   178c8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   178cc:	e0bffe17 	ldw	r2,-8(fp)
}
   178d0:	e037883a 	mov	sp,fp
   178d4:	dfc00117 	ldw	ra,4(sp)
   178d8:	df000017 	ldw	fp,0(sp)
   178dc:	dec00204 	addi	sp,sp,8
   178e0:	f800283a 	ret

000178e4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   178e4:	defffd04 	addi	sp,sp,-12
   178e8:	df000215 	stw	fp,8(sp)
   178ec:	df000204 	addi	fp,sp,8
   178f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   178f4:	e0bfff17 	ldw	r2,-4(fp)
   178f8:	10800a17 	ldw	r2,40(r2)
   178fc:	10800104 	addi	r2,r2,4
   17900:	10800037 	ldwio	r2,0(r2)
   17904:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   17908:	e0bffe17 	ldw	r2,-8(fp)
   1790c:	10800054 	ori	r2,r2,1
   17910:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17914:	e0bfff17 	ldw	r2,-4(fp)
   17918:	10800a17 	ldw	r2,40(r2)
   1791c:	10800104 	addi	r2,r2,4
   17920:	1007883a 	mov	r3,r2
   17924:	e0bffe17 	ldw	r2,-8(fp)
   17928:	18800035 	stwio	r2,0(r3)
}
   1792c:	e037883a 	mov	sp,fp
   17930:	df000017 	ldw	fp,0(sp)
   17934:	dec00104 	addi	sp,sp,4
   17938:	f800283a 	ret

0001793c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1793c:	defffd04 	addi	sp,sp,-12
   17940:	df000215 	stw	fp,8(sp)
   17944:	df000204 	addi	fp,sp,8
   17948:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1794c:	e0bfff17 	ldw	r2,-4(fp)
   17950:	10800a17 	ldw	r2,40(r2)
   17954:	10800104 	addi	r2,r2,4
   17958:	10800037 	ldwio	r2,0(r2)
   1795c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   17960:	e0fffe17 	ldw	r3,-8(fp)
   17964:	00bfff84 	movi	r2,-2
   17968:	1884703a 	and	r2,r3,r2
   1796c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17970:	e0bfff17 	ldw	r2,-4(fp)
   17974:	10800a17 	ldw	r2,40(r2)
   17978:	10800104 	addi	r2,r2,4
   1797c:	1007883a 	mov	r3,r2
   17980:	e0bffe17 	ldw	r2,-8(fp)
   17984:	18800035 	stwio	r2,0(r3)
}
   17988:	e037883a 	mov	sp,fp
   1798c:	df000017 	ldw	fp,0(sp)
   17990:	dec00104 	addi	sp,sp,4
   17994:	f800283a 	ret

00017998 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   17998:	defffd04 	addi	sp,sp,-12
   1799c:	df000215 	stw	fp,8(sp)
   179a0:	df000204 	addi	fp,sp,8
   179a4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   179a8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   179ac:	e0bfff17 	ldw	r2,-4(fp)
   179b0:	10800a17 	ldw	r2,40(r2)
   179b4:	10800084 	addi	r2,r2,2
   179b8:	1080002b 	ldhuio	r2,0(r2)
   179bc:	10bfffcc 	andi	r2,r2,65535
   179c0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   179c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   179c8:	e037883a 	mov	sp,fp
   179cc:	df000017 	ldw	fp,0(sp)
   179d0:	dec00104 	addi	sp,sp,4
   179d4:	f800283a 	ret

000179d8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   179d8:	defffd04 	addi	sp,sp,-12
   179dc:	df000215 	stw	fp,8(sp)
   179e0:	df000204 	addi	fp,sp,8
   179e4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   179e8:	e0bfff17 	ldw	r2,-4(fp)
   179ec:	10800a17 	ldw	r2,40(r2)
   179f0:	10800104 	addi	r2,r2,4
   179f4:	10800037 	ldwio	r2,0(r2)
   179f8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   179fc:	e0bffe17 	ldw	r2,-8(fp)
   17a00:	1004d43a 	srli	r2,r2,16
}
   17a04:	e037883a 	mov	sp,fp
   17a08:	df000017 	ldw	fp,0(sp)
   17a0c:	dec00104 	addi	sp,sp,4
   17a10:	f800283a 	ret

00017a14 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17a14:	defffd04 	addi	sp,sp,-12
   17a18:	df000215 	stw	fp,8(sp)
   17a1c:	df000204 	addi	fp,sp,8
   17a20:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17a24:	e0bfff17 	ldw	r2,-4(fp)
   17a28:	1080800c 	andi	r2,r2,512
   17a2c:	1004d27a 	srli	r2,r2,9
   17a30:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17a34:	e0bffe17 	ldw	r2,-8(fp)
   17a38:	10000226 	beq	r2,zero,17a44 <alt_up_rs232_check_parity+0x30>
   17a3c:	00bfffc4 	movi	r2,-1
   17a40:	00000106 	br	17a48 <alt_up_rs232_check_parity+0x34>
   17a44:	0005883a 	mov	r2,zero
}
   17a48:	e037883a 	mov	sp,fp
   17a4c:	df000017 	ldw	fp,0(sp)
   17a50:	dec00104 	addi	sp,sp,4
   17a54:	f800283a 	ret

00017a58 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   17a58:	defffd04 	addi	sp,sp,-12
   17a5c:	df000215 	stw	fp,8(sp)
   17a60:	df000204 	addi	fp,sp,8
   17a64:	e13ffe15 	stw	r4,-8(fp)
   17a68:	2805883a 	mov	r2,r5
   17a6c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   17a70:	e0bffe17 	ldw	r2,-8(fp)
   17a74:	10800a17 	ldw	r2,40(r2)
   17a78:	1007883a 	mov	r3,r2
   17a7c:	e0bfff03 	ldbu	r2,-4(fp)
   17a80:	18800035 	stwio	r2,0(r3)
	return 0;
   17a84:	0005883a 	mov	r2,zero
}
   17a88:	e037883a 	mov	sp,fp
   17a8c:	df000017 	ldw	fp,0(sp)
   17a90:	dec00104 	addi	sp,sp,4
   17a94:	f800283a 	ret

00017a98 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   17a98:	defffa04 	addi	sp,sp,-24
   17a9c:	dfc00515 	stw	ra,20(sp)
   17aa0:	df000415 	stw	fp,16(sp)
   17aa4:	df000404 	addi	fp,sp,16
   17aa8:	e13ffd15 	stw	r4,-12(fp)
   17aac:	e17ffe15 	stw	r5,-8(fp)
   17ab0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17ab4:	e0bffd17 	ldw	r2,-12(fp)
   17ab8:	10800a17 	ldw	r2,40(r2)
   17abc:	10800037 	ldwio	r2,0(r2)
   17ac0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17ac4:	e0bffc17 	ldw	r2,-16(fp)
   17ac8:	1007883a 	mov	r3,r2
   17acc:	e0bffe17 	ldw	r2,-8(fp)
   17ad0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17ad4:	e13ffc17 	ldw	r4,-16(fp)
   17ad8:	0017a140 	call	17a14 <alt_up_rs232_check_parity>
   17adc:	1007883a 	mov	r3,r2
   17ae0:	e0bfff17 	ldw	r2,-4(fp)
   17ae4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   17ae8:	e0bffc17 	ldw	r2,-16(fp)
   17aec:	10a0000c 	andi	r2,r2,32768
   17af0:	1004d3fa 	srli	r2,r2,15
   17af4:	10bfffc4 	addi	r2,r2,-1
}
   17af8:	e037883a 	mov	sp,fp
   17afc:	dfc00117 	ldw	ra,4(sp)
   17b00:	df000017 	ldw	fp,0(sp)
   17b04:	dec00204 	addi	sp,sp,8
   17b08:	f800283a 	ret

00017b0c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17b0c:	defff804 	addi	sp,sp,-32
   17b10:	dfc00715 	stw	ra,28(sp)
   17b14:	df000615 	stw	fp,24(sp)
   17b18:	df000604 	addi	fp,sp,24
   17b1c:	e13ffd15 	stw	r4,-12(fp)
   17b20:	e17ffe15 	stw	r5,-8(fp)
   17b24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17b28:	e0bffd17 	ldw	r2,-12(fp)
   17b2c:	10800017 	ldw	r2,0(r2)
   17b30:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17b34:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17b38:	00000e06 	br	17b74 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   17b3c:	e0bffe17 	ldw	r2,-8(fp)
   17b40:	10c00044 	addi	r3,r2,1
   17b44:	e0fffe15 	stw	r3,-8(fp)
   17b48:	e0fffc04 	addi	r3,fp,-16
   17b4c:	e13ffb17 	ldw	r4,-20(fp)
   17b50:	100b883a 	mov	r5,r2
   17b54:	180d883a 	mov	r6,r3
   17b58:	0017a980 	call	17a98 <alt_up_rs232_read_data>
   17b5c:	1000041e 	bne	r2,zero,17b70 <alt_up_rs232_read_fd+0x64>
			count++;
   17b60:	e0bffa17 	ldw	r2,-24(fp)
   17b64:	10800044 	addi	r2,r2,1
   17b68:	e0bffa15 	stw	r2,-24(fp)
   17b6c:	00000106 	br	17b74 <alt_up_rs232_read_fd+0x68>
		else
			break;
   17b70:	00000406 	br	17b84 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17b74:	e0bfff17 	ldw	r2,-4(fp)
   17b78:	10ffffc4 	addi	r3,r2,-1
   17b7c:	e0ffff15 	stw	r3,-4(fp)
   17b80:	103fee1e 	bne	r2,zero,17b3c <__alt_mem_Flash_flash_data+0xf4017b3c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   17b84:	e0bffa17 	ldw	r2,-24(fp)
}
   17b88:	e037883a 	mov	sp,fp
   17b8c:	dfc00117 	ldw	ra,4(sp)
   17b90:	df000017 	ldw	fp,0(sp)
   17b94:	dec00204 	addi	sp,sp,8
   17b98:	f800283a 	ret

00017b9c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17b9c:	defff904 	addi	sp,sp,-28
   17ba0:	dfc00615 	stw	ra,24(sp)
   17ba4:	df000515 	stw	fp,20(sp)
   17ba8:	df000504 	addi	fp,sp,20
   17bac:	e13ffd15 	stw	r4,-12(fp)
   17bb0:	e17ffe15 	stw	r5,-8(fp)
   17bb4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17bb8:	e0bffd17 	ldw	r2,-12(fp)
   17bbc:	10800017 	ldw	r2,0(r2)
   17bc0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17bc4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   17bc8:	00000f06 	br	17c08 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   17bcc:	e0bffe17 	ldw	r2,-8(fp)
   17bd0:	10800003 	ldbu	r2,0(r2)
   17bd4:	10803fcc 	andi	r2,r2,255
   17bd8:	e13ffc17 	ldw	r4,-16(fp)
   17bdc:	100b883a 	mov	r5,r2
   17be0:	0017a580 	call	17a58 <alt_up_rs232_write_data>
   17be4:	1000071e 	bne	r2,zero,17c04 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   17be8:	e0bffb17 	ldw	r2,-20(fp)
   17bec:	10800044 	addi	r2,r2,1
   17bf0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   17bf4:	e0bffe17 	ldw	r2,-8(fp)
   17bf8:	10800044 	addi	r2,r2,1
   17bfc:	e0bffe15 	stw	r2,-8(fp)
   17c00:	00000106 	br	17c08 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   17c04:	00000406 	br	17c18 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   17c08:	e0bfff17 	ldw	r2,-4(fp)
   17c0c:	10ffffc4 	addi	r3,r2,-1
   17c10:	e0ffff15 	stw	r3,-4(fp)
   17c14:	103fed1e 	bne	r2,zero,17bcc <__alt_mem_Flash_flash_data+0xf4017bcc>
			ptr++;
		}
		else
			break;
	}
	return count;
   17c18:	e0bffb17 	ldw	r2,-20(fp)
}
   17c1c:	e037883a 	mov	sp,fp
   17c20:	dfc00117 	ldw	ra,4(sp)
   17c24:	df000017 	ldw	fp,0(sp)
   17c28:	dec00204 	addi	sp,sp,8
   17c2c:	f800283a 	ret

00017c30 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   17c30:	defffc04 	addi	sp,sp,-16
   17c34:	dfc00315 	stw	ra,12(sp)
   17c38:	df000215 	stw	fp,8(sp)
   17c3c:	df000204 	addi	fp,sp,8
   17c40:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   17c44:	e13fff17 	ldw	r4,-4(fp)
   17c48:	014000b4 	movhi	r5,2
   17c4c:	29710a04 	addi	r5,r5,-15320
   17c50:	001883c0 	call	1883c <alt_find_dev>
   17c54:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17c58:	e0bffe17 	ldw	r2,-8(fp)
}
   17c5c:	e037883a 	mov	sp,fp
   17c60:	dfc00117 	ldw	ra,4(sp)
   17c64:	df000017 	ldw	fp,0(sp)
   17c68:	dec00204 	addi	sp,sp,8
   17c6c:	f800283a 	ret

00017c70 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   17c70:	defffc04 	addi	sp,sp,-16
   17c74:	dfc00315 	stw	ra,12(sp)
   17c78:	df000215 	stw	fp,8(sp)
   17c7c:	df000204 	addi	fp,sp,8
   17c80:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   17c84:	e0bfff17 	ldw	r2,-4(fp)
   17c88:	10800217 	ldw	r2,8(r2)
   17c8c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   17c90:	00000b06 	br	17cc0 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   17c94:	e13ffe17 	ldw	r4,-8(fp)
   17c98:	014000b4 	movhi	r5,2
   17c9c:	29682604 	addi	r5,r5,-24424
   17ca0:	00009cc0 	call	9cc <strcmp>
   17ca4:	1000031e 	bne	r2,zero,17cb4 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   17ca8:	e0bffe17 	ldw	r2,-8(fp)
   17cac:	10000005 	stb	zero,0(r2)
			break;
   17cb0:	00000906 	br	17cd8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   17cb4:	e0bffe17 	ldw	r2,-8(fp)
   17cb8:	10800044 	addi	r2,r2,1
   17cbc:	e0bffe15 	stw	r2,-8(fp)
   17cc0:	e0bffe17 	ldw	r2,-8(fp)
   17cc4:	10800003 	ldbu	r2,0(r2)
   17cc8:	10803fcc 	andi	r2,r2,255
   17ccc:	1080201c 	xori	r2,r2,128
   17cd0:	10bfe004 	addi	r2,r2,-128
   17cd4:	103fef1e 	bne	r2,zero,17c94 <__alt_mem_Flash_flash_data+0xf4017c94>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   17cd8:	0001883a 	nop
}
   17cdc:	e037883a 	mov	sp,fp
   17ce0:	dfc00117 	ldw	ra,4(sp)
   17ce4:	df000017 	ldw	fp,0(sp)
   17ce8:	dec00204 	addi	sp,sp,8
   17cec:	f800283a 	ret

00017cf0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   17cf0:	defffc04 	addi	sp,sp,-16
   17cf4:	dfc00315 	stw	ra,12(sp)
   17cf8:	df000215 	stw	fp,8(sp)
   17cfc:	df000204 	addi	fp,sp,8
   17d00:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   17d04:	e13fff17 	ldw	r4,-4(fp)
   17d08:	014000b4 	movhi	r5,2
   17d0c:	29710a04 	addi	r5,r5,-15320
   17d10:	001883c0 	call	1883c <alt_find_dev>
   17d14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17d18:	e0bffe17 	ldw	r2,-8(fp)
}
   17d1c:	e037883a 	mov	sp,fp
   17d20:	dfc00117 	ldw	ra,4(sp)
   17d24:	df000017 	ldw	fp,0(sp)
   17d28:	dec00204 	addi	sp,sp,8
   17d2c:	f800283a 	ret

00017d30 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   17d30:	defffa04 	addi	sp,sp,-24
   17d34:	df000515 	stw	fp,20(sp)
   17d38:	df000504 	addi	fp,sp,20
   17d3c:	e13ffc15 	stw	r4,-16(fp)
   17d40:	2805883a 	mov	r2,r5
   17d44:	e1bffe15 	stw	r6,-8(fp)
   17d48:	e1ffff15 	stw	r7,-4(fp)
   17d4c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17d50:	e0bffc17 	ldw	r2,-16(fp)
   17d54:	10800c17 	ldw	r2,48(r2)
   17d58:	e0fffe17 	ldw	r3,-8(fp)
   17d5c:	1880042e 	bgeu	r3,r2,17d70 <alt_up_char_buffer_draw+0x40>
   17d60:	e0bffc17 	ldw	r2,-16(fp)
   17d64:	10800d17 	ldw	r2,52(r2)
   17d68:	e0ffff17 	ldw	r3,-4(fp)
   17d6c:	18800236 	bltu	r3,r2,17d78 <alt_up_char_buffer_draw+0x48>
		return -1;
   17d70:	00bfffc4 	movi	r2,-1
   17d74:	00001d06 	br	17dec <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   17d78:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   17d7c:	e0bffc17 	ldw	r2,-16(fp)
   17d80:	10c00f17 	ldw	r3,60(r2)
   17d84:	e0bffe17 	ldw	r2,-8(fp)
   17d88:	1884703a 	and	r2,r3,r2
   17d8c:	e0fffc17 	ldw	r3,-16(fp)
   17d90:	18c00e17 	ldw	r3,56(r3)
   17d94:	10c4983a 	sll	r2,r2,r3
   17d98:	e0fffb17 	ldw	r3,-20(fp)
   17d9c:	1884b03a 	or	r2,r3,r2
   17da0:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   17da4:	e0bffc17 	ldw	r2,-16(fp)
   17da8:	10c01117 	ldw	r3,68(r2)
   17dac:	e0bfff17 	ldw	r2,-4(fp)
   17db0:	1884703a 	and	r2,r3,r2
   17db4:	e0fffc17 	ldw	r3,-16(fp)
   17db8:	18c01017 	ldw	r3,64(r3)
   17dbc:	10c4983a 	sll	r2,r2,r3
   17dc0:	e0fffb17 	ldw	r3,-20(fp)
   17dc4:	1884b03a 	or	r2,r3,r2
   17dc8:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   17dcc:	e0bffc17 	ldw	r2,-16(fp)
   17dd0:	10c00b17 	ldw	r3,44(r2)
   17dd4:	e0bffb17 	ldw	r2,-20(fp)
   17dd8:	1885883a 	add	r2,r3,r2
   17ddc:	1007883a 	mov	r3,r2
   17de0:	e0bffd03 	ldbu	r2,-12(fp)
   17de4:	18800025 	stbio	r2,0(r3)

	return 0;
   17de8:	0005883a 	mov	r2,zero
}
   17dec:	e037883a 	mov	sp,fp
   17df0:	df000017 	ldw	fp,0(sp)
   17df4:	dec00104 	addi	sp,sp,4
   17df8:	f800283a 	ret

00017dfc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   17dfc:	defffa04 	addi	sp,sp,-24
   17e00:	df000515 	stw	fp,20(sp)
   17e04:	df000504 	addi	fp,sp,20
   17e08:	e13ffc15 	stw	r4,-16(fp)
   17e0c:	e17ffd15 	stw	r5,-12(fp)
   17e10:	e1bffe15 	stw	r6,-8(fp)
   17e14:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17e18:	e0bffc17 	ldw	r2,-16(fp)
   17e1c:	10800c17 	ldw	r2,48(r2)
   17e20:	e0fffe17 	ldw	r3,-8(fp)
   17e24:	1880042e 	bgeu	r3,r2,17e38 <alt_up_char_buffer_string+0x3c>
   17e28:	e0bffc17 	ldw	r2,-16(fp)
   17e2c:	10800d17 	ldw	r2,52(r2)
   17e30:	e0ffff17 	ldw	r3,-4(fp)
   17e34:	18800236 	bltu	r3,r2,17e40 <alt_up_char_buffer_string+0x44>
		return -1;
   17e38:	00bfffc4 	movi	r2,-1
   17e3c:	00002b06 	br	17eec <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   17e40:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   17e44:	e0bffc17 	ldw	r2,-16(fp)
   17e48:	10801017 	ldw	r2,64(r2)
   17e4c:	1007883a 	mov	r3,r2
   17e50:	e0bfff17 	ldw	r2,-4(fp)
   17e54:	10c6983a 	sll	r3,r2,r3
   17e58:	e0bffe17 	ldw	r2,-8(fp)
   17e5c:	1885883a 	add	r2,r3,r2
   17e60:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   17e64:	00001a06 	br	17ed0 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   17e68:	e0bffc17 	ldw	r2,-16(fp)
   17e6c:	10c00b17 	ldw	r3,44(r2)
   17e70:	e0bffb17 	ldw	r2,-20(fp)
   17e74:	1885883a 	add	r2,r3,r2
   17e78:	1007883a 	mov	r3,r2
   17e7c:	e0bffd17 	ldw	r2,-12(fp)
   17e80:	10800003 	ldbu	r2,0(r2)
   17e84:	10803fcc 	andi	r2,r2,255
   17e88:	1080201c 	xori	r2,r2,128
   17e8c:	10bfe004 	addi	r2,r2,-128
   17e90:	18800025 	stbio	r2,0(r3)
		++ptr;
   17e94:	e0bffd17 	ldw	r2,-12(fp)
   17e98:	10800044 	addi	r2,r2,1
   17e9c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   17ea0:	e0bffe17 	ldw	r2,-8(fp)
   17ea4:	10800044 	addi	r2,r2,1
   17ea8:	e0bffe15 	stw	r2,-8(fp)
   17eac:	e0bffc17 	ldw	r2,-16(fp)
   17eb0:	10800c17 	ldw	r2,48(r2)
   17eb4:	e0fffe17 	ldw	r3,-8(fp)
   17eb8:	18800236 	bltu	r3,r2,17ec4 <alt_up_char_buffer_string+0xc8>
			return -1;
   17ebc:	00bfffc4 	movi	r2,-1
   17ec0:	00000a06 	br	17eec <alt_up_char_buffer_string+0xf0>
		++offset;
   17ec4:	e0bffb17 	ldw	r2,-20(fp)
   17ec8:	10800044 	addi	r2,r2,1
   17ecc:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   17ed0:	e0bffd17 	ldw	r2,-12(fp)
   17ed4:	10800003 	ldbu	r2,0(r2)
   17ed8:	10803fcc 	andi	r2,r2,255
   17edc:	1080201c 	xori	r2,r2,128
   17ee0:	10bfe004 	addi	r2,r2,-128
   17ee4:	103fe01e 	bne	r2,zero,17e68 <__alt_mem_Flash_flash_data+0xf4017e68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   17ee8:	0005883a 	mov	r2,zero
}
   17eec:	e037883a 	mov	sp,fp
   17ef0:	df000017 	ldw	fp,0(sp)
   17ef4:	dec00104 	addi	sp,sp,4
   17ef8:	f800283a 	ret

00017efc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   17efc:	defffe04 	addi	sp,sp,-8
   17f00:	df000115 	stw	fp,4(sp)
   17f04:	df000104 	addi	fp,sp,4
   17f08:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   17f0c:	e0bfff17 	ldw	r2,-4(fp)
   17f10:	10800a17 	ldw	r2,40(r2)
   17f14:	10800084 	addi	r2,r2,2
   17f18:	1007883a 	mov	r3,r2
   17f1c:	00800044 	movi	r2,1
   17f20:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   17f24:	0001883a 	nop
   17f28:	e0bfff17 	ldw	r2,-4(fp)
   17f2c:	10800a17 	ldw	r2,40(r2)
   17f30:	10800084 	addi	r2,r2,2
   17f34:	10800023 	ldbuio	r2,0(r2)
   17f38:	10803fcc 	andi	r2,r2,255
   17f3c:	1080004c 	andi	r2,r2,1
   17f40:	103ff91e 	bne	r2,zero,17f28 <__alt_mem_Flash_flash_data+0xf4017f28>
	return 0;
   17f44:	0005883a 	mov	r2,zero
}
   17f48:	e037883a 	mov	sp,fp
   17f4c:	df000017 	ldw	fp,0(sp)
   17f50:	dec00104 	addi	sp,sp,4
   17f54:	f800283a 	ret

00017f58 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   17f58:	defffd04 	addi	sp,sp,-12
   17f5c:	df000215 	stw	fp,8(sp)
   17f60:	df000204 	addi	fp,sp,8
   17f64:	2005883a 	mov	r2,r4
   17f68:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17f6c:	e03ffe15 	stw	zero,-8(fp)
   17f70:	00000d06 	br	17fa8 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   17f74:	008000b4 	movhi	r2,2
   17f78:	10b0e504 	addi	r2,r2,-15468
   17f7c:	e0fffe17 	ldw	r3,-8(fp)
   17f80:	10c5883a 	add	r2,r2,r3
   17f84:	10800003 	ldbu	r2,0(r2)
   17f88:	10c03fcc 	andi	r3,r2,255
   17f8c:	e0bfff03 	ldbu	r2,-4(fp)
   17f90:	1880021e 	bne	r3,r2,17f9c <get_multi_byte_make_code_index+0x44>
			return i;
   17f94:	e0bffe17 	ldw	r2,-8(fp)
   17f98:	00000706 	br	17fb8 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17f9c:	e0bffe17 	ldw	r2,-8(fp)
   17fa0:	10800044 	addi	r2,r2,1
   17fa4:	e0bffe15 	stw	r2,-8(fp)
   17fa8:	e0bffe17 	ldw	r2,-8(fp)
   17fac:	108019b0 	cmpltui	r2,r2,102
   17fb0:	103ff01e 	bne	r2,zero,17f74 <__alt_mem_Flash_flash_data+0xf4017f74>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   17fb4:	00801984 	movi	r2,102
}
   17fb8:	e037883a 	mov	sp,fp
   17fbc:	df000017 	ldw	fp,0(sp)
   17fc0:	dec00104 	addi	sp,sp,4
   17fc4:	f800283a 	ret

00017fc8 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   17fc8:	defffd04 	addi	sp,sp,-12
   17fcc:	df000215 	stw	fp,8(sp)
   17fd0:	df000204 	addi	fp,sp,8
   17fd4:	2005883a 	mov	r2,r4
   17fd8:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   17fdc:	e03ffe15 	stw	zero,-8(fp)
   17fe0:	00000d06 	br	18018 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   17fe4:	008000b4 	movhi	r2,2
   17fe8:	10b0cb84 	addi	r2,r2,-15570
   17fec:	e0fffe17 	ldw	r3,-8(fp)
   17ff0:	10c5883a 	add	r2,r2,r3
   17ff4:	10800003 	ldbu	r2,0(r2)
   17ff8:	10c03fcc 	andi	r3,r2,255
   17ffc:	e0bfff03 	ldbu	r2,-4(fp)
   18000:	1880021e 	bne	r3,r2,1800c <get_single_byte_make_code_index+0x44>
			return i;
   18004:	e0bffe17 	ldw	r2,-8(fp)
   18008:	00000706 	br	18028 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1800c:	e0bffe17 	ldw	r2,-8(fp)
   18010:	10800044 	addi	r2,r2,1
   18014:	e0bffe15 	stw	r2,-8(fp)
   18018:	e0bffe17 	ldw	r2,-8(fp)
   1801c:	108019b0 	cmpltui	r2,r2,102
   18020:	103ff01e 	bne	r2,zero,17fe4 <__alt_mem_Flash_flash_data+0xf4017fe4>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   18024:	00801984 	movi	r2,102
}
   18028:	e037883a 	mov	sp,fp
   1802c:	df000017 	ldw	fp,0(sp)
   18030:	dec00104 	addi	sp,sp,4
   18034:	f800283a 	ret

00018038 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   18038:	defff804 	addi	sp,sp,-32
   1803c:	dfc00715 	stw	ra,28(sp)
   18040:	df000615 	stw	fp,24(sp)
   18044:	df000604 	addi	fp,sp,24
   18048:	e13ffc15 	stw	r4,-16(fp)
   1804c:	2805883a 	mov	r2,r5
   18050:	e1bffe15 	stw	r6,-8(fp)
   18054:	e1ffff15 	stw	r7,-4(fp)
   18058:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   1805c:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   18060:	00801984 	movi	r2,102
   18064:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   18068:	e0800217 	ldw	r2,8(fp)
   1806c:	10000005 	stb	zero,0(r2)
	switch (state)
   18070:	e0bffc17 	ldw	r2,-16(fp)
   18074:	10c00060 	cmpeqi	r3,r2,1
   18078:	18003a1e 	bne	r3,zero,18164 <get_next_state+0x12c>
   1807c:	0080052e 	bgeu	zero,r2,18094 <get_next_state+0x5c>
   18080:	10c000a0 	cmpeqi	r3,r2,2
   18084:	18004c1e 	bne	r3,zero,181b8 <get_next_state+0x180>
   18088:	108000e0 	cmpeqi	r2,r2,3
   1808c:	10005f1e 	bne	r2,zero,1820c <get_next_state+0x1d4>
   18090:	00007306 	br	18260 <get_next_state+0x228>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   18094:	e0bffd03 	ldbu	r2,-12(fp)
   18098:	10803818 	cmpnei	r2,r2,224
   1809c:	1000031e 	bne	r2,zero,180ac <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   180a0:	00800044 	movi	r2,1
   180a4:	e0bffa15 	stw	r2,-24(fp)
   180a8:	00002d06 	br	18160 <get_next_state+0x128>
			}
			else if (byte == 0xF0)
   180ac:	e0bffd03 	ldbu	r2,-12(fp)
   180b0:	10803c18 	cmpnei	r2,r2,240
   180b4:	1000031e 	bne	r2,zero,180c4 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   180b8:	00800084 	movi	r2,2
   180bc:	e0bffa15 	stw	r2,-24(fp)
   180c0:	00002706 	br	18160 <get_next_state+0x128>
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   180c4:	e0bffd03 	ldbu	r2,-12(fp)
   180c8:	1009883a 	mov	r4,r2
   180cc:	0017fc80 	call	17fc8 <get_single_byte_make_code_index>
   180d0:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   180d4:	e0bffb17 	ldw	r2,-20(fp)
   180d8:	10800a30 	cmpltui	r2,r2,40
   180dc:	1000061e 	bne	r2,zero,180f8 <get_next_state+0xc0>
   180e0:	e0bffb17 	ldw	r2,-20(fp)
   180e4:	10801120 	cmpeqi	r2,r2,68
   180e8:	1000031e 	bne	r2,zero,180f8 <get_next_state+0xc0>
   180ec:	e0bffb17 	ldw	r2,-20(fp)
   180f0:	10801430 	cmpltui	r2,r2,80
   180f4:	1000111e 	bne	r2,zero,1813c <get_next_state+0x104>
   180f8:	e0bffb17 	ldw	r2,-20(fp)
   180fc:	108019a0 	cmpeqi	r2,r2,102
   18100:	10000e1e 	bne	r2,zero,1813c <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   18104:	e0bffe17 	ldw	r2,-8(fp)
   18108:	00c00044 	movi	r3,1
   1810c:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   18110:	008000b4 	movhi	r2,2
   18114:	10b0b204 	addi	r2,r2,-15672
   18118:	e0fffb17 	ldw	r3,-20(fp)
   1811c:	10c5883a 	add	r2,r2,r3
   18120:	10c00003 	ldbu	r3,0(r2)
   18124:	e0800217 	ldw	r2,8(fp)
   18128:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   1812c:	e0bfff17 	ldw	r2,-4(fp)
   18130:	e0fffd03 	ldbu	r3,-12(fp)
   18134:	10c00005 	stb	r3,0(r2)
   18138:	00000606 	br	18154 <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   1813c:	e0bffe17 	ldw	r2,-8(fp)
   18140:	00c00084 	movi	r3,2
   18144:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   18148:	e0bfff17 	ldw	r2,-4(fp)
   1814c:	e0fffd03 	ldbu	r3,-12(fp)
   18150:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   18154:	00800104 	movi	r2,4
   18158:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1815c:	00004406 	br	18270 <get_next_state+0x238>
   18160:	00004306 	br	18270 <get_next_state+0x238>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   18164:	e0bffd03 	ldbu	r2,-12(fp)
   18168:	10803c20 	cmpeqi	r2,r2,240
   1816c:	10000c1e 	bne	r2,zero,181a0 <get_next_state+0x168>
   18170:	e0bffd03 	ldbu	r2,-12(fp)
   18174:	10803820 	cmpeqi	r2,r2,224
   18178:	1000091e 	bne	r2,zero,181a0 <get_next_state+0x168>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   1817c:	e0bffe17 	ldw	r2,-8(fp)
   18180:	00c000c4 	movi	r3,3
   18184:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   18188:	e0bfff17 	ldw	r2,-4(fp)
   1818c:	e0fffd03 	ldbu	r3,-12(fp)
   18190:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   18194:	00800104 	movi	r2,4
   18198:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   1819c:	00003406 	br	18270 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   181a0:	e0bffe17 	ldw	r2,-8(fp)
   181a4:	00c00104 	movi	r3,4
   181a8:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   181ac:	008000c4 	movi	r2,3
   181b0:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   181b4:	00002e06 	br	18270 <get_next_state+0x238>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   181b8:	e0bffd03 	ldbu	r2,-12(fp)
   181bc:	10803c20 	cmpeqi	r2,r2,240
   181c0:	10000c1e 	bne	r2,zero,181f4 <get_next_state+0x1bc>
   181c4:	e0bffd03 	ldbu	r2,-12(fp)
   181c8:	10803820 	cmpeqi	r2,r2,224
   181cc:	1000091e 	bne	r2,zero,181f4 <get_next_state+0x1bc>
			{
				*decode_mode = KB_BREAK_CODE;
   181d0:	e0bffe17 	ldw	r2,-8(fp)
   181d4:	00c00104 	movi	r3,4
   181d8:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   181dc:	e0bfff17 	ldw	r2,-4(fp)
   181e0:	e0fffd03 	ldbu	r3,-12(fp)
   181e4:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   181e8:	00800104 	movi	r2,4
   181ec:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   181f0:	00001f06 	br	18270 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   181f4:	00800084 	movi	r2,2
   181f8:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   181fc:	e0bffe17 	ldw	r2,-8(fp)
   18200:	00c00104 	movi	r3,4
   18204:	10c00015 	stw	r3,0(r2)
			}
			break;
   18208:	00001906 	br	18270 <get_next_state+0x238>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1820c:	e0bffd03 	ldbu	r2,-12(fp)
   18210:	10803c20 	cmpeqi	r2,r2,240
   18214:	10000c1e 	bne	r2,zero,18248 <get_next_state+0x210>
   18218:	e0bffd03 	ldbu	r2,-12(fp)
   1821c:	10803820 	cmpeqi	r2,r2,224
   18220:	1000091e 	bne	r2,zero,18248 <get_next_state+0x210>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   18224:	e0bffe17 	ldw	r2,-8(fp)
   18228:	00c00144 	movi	r3,5
   1822c:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   18230:	e0bfff17 	ldw	r2,-4(fp)
   18234:	e0fffd03 	ldbu	r3,-12(fp)
   18238:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1823c:	00800104 	movi	r2,4
   18240:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   18244:	00000a06 	br	18270 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   18248:	008000c4 	movi	r2,3
   1824c:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   18250:	e0bffe17 	ldw	r2,-8(fp)
   18254:	00c00144 	movi	r3,5
   18258:	10c00015 	stw	r3,0(r2)
			}
			break;
   1825c:	00000406 	br	18270 <get_next_state+0x238>
		default:
			*decode_mode = KB_INVALID_CODE;
   18260:	e0bffe17 	ldw	r2,-8(fp)
   18264:	00c00184 	movi	r3,6
   18268:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   1826c:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   18270:	e0bffa17 	ldw	r2,-24(fp)
}
   18274:	e037883a 	mov	sp,fp
   18278:	dfc00117 	ldw	ra,4(sp)
   1827c:	df000017 	ldw	fp,0(sp)
   18280:	dec00204 	addi	sp,sp,8
   18284:	f800283a 	ret

00018288 <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   18288:	defff704 	addi	sp,sp,-36
   1828c:	dfc00815 	stw	ra,32(sp)
   18290:	df000715 	stw	fp,28(sp)
   18294:	df000704 	addi	fp,sp,28
   18298:	e13ffc15 	stw	r4,-16(fp)
   1829c:	e17ffd15 	stw	r5,-12(fp)
   182a0:	e1bffe15 	stw	r6,-8(fp)
   182a4:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   182a8:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   182ac:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   182b0:	e0bffd17 	ldw	r2,-12(fp)
   182b4:	00c00184 	movi	r3,6
   182b8:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   182bc:	e0bffb04 	addi	r2,fp,-20
   182c0:	e13ffc17 	ldw	r4,-16(fp)
   182c4:	100b883a 	mov	r5,r2
   182c8:	00176bc0 	call	176bc <alt_up_ps2_read_data_byte>
   182cc:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   182d0:	e0bffa17 	ldw	r2,-24(fp)
   182d4:	10000626 	beq	r2,zero,182f0 <decode_scancode+0x68>
			if (state == STATE_INIT)
   182d8:	d0a8cf17 	ldw	r2,-23748(gp)
   182dc:	1000021e 	bne	r2,zero,182e8 <decode_scancode+0x60>
				return status_read;
   182e0:	e0bffa17 	ldw	r2,-24(fp)
   182e4:	00001106 	br	1832c <decode_scancode+0xa4>
			else
				return -2;
   182e8:	00bfff84 	movi	r2,-2
   182ec:	00000f06 	br	1832c <decode_scancode+0xa4>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   182f0:	d128cf17 	ldw	r4,-23748(gp)
   182f4:	e0bffb03 	ldbu	r2,-20(fp)
   182f8:	10c03fcc 	andi	r3,r2,255
   182fc:	e0bfff17 	ldw	r2,-4(fp)
   18300:	d8800015 	stw	r2,0(sp)
   18304:	180b883a 	mov	r5,r3
   18308:	e1bffd17 	ldw	r6,-12(fp)
   1830c:	e1fffe17 	ldw	r7,-8(fp)
   18310:	00180380 	call	18038 <get_next_state>
   18314:	d0a8cf15 	stw	r2,-23748(gp)
	} while ( state != STATE_DONE );
   18318:	d0a8cf17 	ldw	r2,-23748(gp)
   1831c:	10800118 	cmpnei	r2,r2,4
   18320:	103fe61e 	bne	r2,zero,182bc <__alt_mem_Flash_flash_data+0xf40182bc>

	state = STATE_INIT;
   18324:	d028cf15 	stw	zero,-23748(gp)

	return 0;
   18328:	0005883a 	mov	r2,zero
}
   1832c:	e037883a 	mov	sp,fp
   18330:	dfc00117 	ldw	ra,4(sp)
   18334:	df000017 	ldw	fp,0(sp)
   18338:	dec00204 	addi	sp,sp,8
   1833c:	f800283a 	ret

00018340 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   18340:	defffb04 	addi	sp,sp,-20
   18344:	dfc00415 	stw	ra,16(sp)
   18348:	df000315 	stw	fp,12(sp)
   1834c:	df000304 	addi	fp,sp,12
   18350:	e13ffe15 	stw	r4,-8(fp)
   18354:	2805883a 	mov	r2,r5
   18358:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0x01);
   1835c:	e13ffe17 	ldw	r4,-8(fp)
   18360:	01400044 	movi	r5,1
   18364:	00175b40 	call	175b4 <alt_up_ps2_write_data_byte_with_ack>
   18368:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   1836c:	e0bffd17 	ldw	r2,-12(fp)
   18370:	1000061e 	bne	r2,zero,1838c <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   18374:	e0bfff03 	ldbu	r2,-4(fp)
   18378:	108007cc 	andi	r2,r2,31
   1837c:	e13ffe17 	ldw	r4,-8(fp)
   18380:	100b883a 	mov	r5,r2
   18384:	00175b40 	call	175b4 <alt_up_ps2_write_data_byte_with_ack>
   18388:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   1838c:	e0bffd17 	ldw	r2,-12(fp)
}
   18390:	e037883a 	mov	sp,fp
   18394:	dfc00117 	ldw	ra,4(sp)
   18398:	df000017 	ldw	fp,0(sp)
   1839c:	dec00204 	addi	sp,sp,8
   183a0:	f800283a 	ret

000183a4 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   183a4:	defffa04 	addi	sp,sp,-24
   183a8:	dfc00515 	stw	ra,20(sp)
   183ac:	df000415 	stw	fp,16(sp)
   183b0:	df000404 	addi	fp,sp,16
   183b4:	e13ffd15 	stw	r4,-12(fp)
   183b8:	2805883a 	mov	r2,r5
   183bc:	e1bfff15 	stw	r6,-4(fp)
   183c0:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   183c4:	e0bffd17 	ldw	r2,-12(fp)
   183c8:	10c000a0 	cmpeqi	r3,r2,2
   183cc:	1800131e 	bne	r3,zero,1841c <translate_make_code+0x78>
   183d0:	10c000e0 	cmpeqi	r3,r2,3
   183d4:	1800201e 	bne	r3,zero,18458 <translate_make_code+0xb4>
   183d8:	10800060 	cmpeqi	r2,r2,1
   183dc:	10002d26 	beq	r2,zero,18494 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   183e0:	e0bffe03 	ldbu	r2,-8(fp)
   183e4:	1009883a 	mov	r4,r2
   183e8:	0017fc80 	call	17fc8 <get_single_byte_make_code_index>
   183ec:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   183f0:	008000b4 	movhi	r2,2
   183f4:	10b04c04 	addi	r2,r2,-16080
   183f8:	e0fffc17 	ldw	r3,-16(fp)
   183fc:	18c7883a 	add	r3,r3,r3
   18400:	18c7883a 	add	r3,r3,r3
   18404:	10c5883a 	add	r2,r2,r3
   18408:	10800017 	ldw	r2,0(r2)
   1840c:	e13fff17 	ldw	r4,-4(fp)
   18410:	100b883a 	mov	r5,r2
   18414:	00197480 	call	19748 <strcpy>
			break;
   18418:	00002206 	br	184a4 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1841c:	e0bffe03 	ldbu	r2,-8(fp)
   18420:	1009883a 	mov	r4,r2
   18424:	0017fc80 	call	17fc8 <get_single_byte_make_code_index>
   18428:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1842c:	008000b4 	movhi	r2,2
   18430:	10b04c04 	addi	r2,r2,-16080
   18434:	e0fffc17 	ldw	r3,-16(fp)
   18438:	18c7883a 	add	r3,r3,r3
   1843c:	18c7883a 	add	r3,r3,r3
   18440:	10c5883a 	add	r2,r2,r3
   18444:	10800017 	ldw	r2,0(r2)
   18448:	e13fff17 	ldw	r4,-4(fp)
   1844c:	100b883a 	mov	r5,r2
   18450:	00197480 	call	19748 <strcpy>
			break;
   18454:	00001306 	br	184a4 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   18458:	e0bffe03 	ldbu	r2,-8(fp)
   1845c:	1009883a 	mov	r4,r2
   18460:	0017f580 	call	17f58 <get_multi_byte_make_code_index>
   18464:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   18468:	008000b4 	movhi	r2,2
   1846c:	10b04c04 	addi	r2,r2,-16080
   18470:	e0fffc17 	ldw	r3,-16(fp)
   18474:	18c7883a 	add	r3,r3,r3
   18478:	18c7883a 	add	r3,r3,r3
   1847c:	10c5883a 	add	r2,r2,r3
   18480:	10800017 	ldw	r2,0(r2)
   18484:	e13fff17 	ldw	r4,-4(fp)
   18488:	100b883a 	mov	r5,r2
   1848c:	00197480 	call	19748 <strcpy>
			break;
   18490:	00000406 	br	184a4 <translate_make_code+0x100>
		default:
			str = "";
   18494:	008000b4 	movhi	r2,2
   18498:	10a8bb04 	addi	r2,r2,-23828
   1849c:	e0bfff15 	stw	r2,-4(fp)
			break;
   184a0:	0001883a 	nop
	}
}
   184a4:	e037883a 	mov	sp,fp
   184a8:	dfc00117 	ldw	ra,4(sp)
   184ac:	df000017 	ldw	fp,0(sp)
   184b0:	dec00204 	addi	sp,sp,8
   184b4:	f800283a 	ret

000184b8 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   184b8:	defffb04 	addi	sp,sp,-20
   184bc:	dfc00415 	stw	ra,16(sp)
   184c0:	df000315 	stw	fp,12(sp)
   184c4:	df000304 	addi	fp,sp,12
   184c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   184cc:	e13fff17 	ldw	r4,-4(fp)
   184d0:	01403fc4 	movi	r5,255
   184d4:	00175b40 	call	175b4 <alt_up_ps2_write_data_byte_with_ack>
   184d8:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   184dc:	e0bffd17 	ldw	r2,-12(fp)
   184e0:	10000e1e 	bne	r2,zero,1851c <reset_keyboard+0x64>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   184e4:	e0bffe04 	addi	r2,fp,-8
   184e8:	e13fff17 	ldw	r4,-4(fp)
   184ec:	100b883a 	mov	r5,r2
   184f0:	00176bc0 	call	176bc <alt_up_ps2_read_data_byte>
   184f4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   184f8:	e0bffd17 	ldw	r2,-12(fp)
   184fc:	1000051e 	bne	r2,zero,18514 <reset_keyboard+0x5c>
   18500:	e0bffe03 	ldbu	r2,-8(fp)
   18504:	10803fcc 	andi	r2,r2,255
   18508:	10802a98 	cmpnei	r2,r2,170
   1850c:	1000011e 	bne	r2,zero,18514 <reset_keyboard+0x5c>
   18510:	00000206 	br	1851c <reset_keyboard+0x64>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   18514:	00bfffc4 	movi	r2,-1
   18518:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   1851c:	e0bffd17 	ldw	r2,-12(fp)
}
   18520:	e037883a 	mov	sp,fp
   18524:	dfc00117 	ldw	ra,4(sp)
   18528:	df000017 	ldw	fp,0(sp)
   1852c:	dec00204 	addi	sp,sp,8
   18530:	f800283a 	ret

00018534 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   18534:	defff504 	addi	sp,sp,-44
   18538:	df000a15 	stw	fp,40(sp)
   1853c:	df000a04 	addi	fp,sp,40
   18540:	e13ffc15 	stw	r4,-16(fp)
   18544:	e17ffd15 	stw	r5,-12(fp)
   18548:	e1bffe15 	stw	r6,-8(fp)
   1854c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18550:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18554:	008000b4 	movhi	r2,2
   18558:	10b9d004 	addi	r2,r2,-6336
   1855c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   18560:	10003f26 	beq	r2,zero,18660 <alt_alarm_start+0x12c>
  {
    if (alarm)
   18564:	e0bffc17 	ldw	r2,-16(fp)
   18568:	10003b26 	beq	r2,zero,18658 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1856c:	e0bffc17 	ldw	r2,-16(fp)
   18570:	e0fffe17 	ldw	r3,-8(fp)
   18574:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18578:	e0bffc17 	ldw	r2,-16(fp)
   1857c:	e0ffff17 	ldw	r3,-4(fp)
   18580:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18584:	0005303a 	rdctl	r2,status
   18588:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1858c:	e0fff817 	ldw	r3,-32(fp)
   18590:	00bfff84 	movi	r2,-2
   18594:	1884703a 	and	r2,r3,r2
   18598:	1001703a 	wrctl	status,r2
  
  return context;
   1859c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   185a0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   185a4:	008000b4 	movhi	r2,2
   185a8:	10b9d104 	addi	r2,r2,-6332
   185ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   185b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   185b4:	e0fffd17 	ldw	r3,-12(fp)
   185b8:	e0bff617 	ldw	r2,-40(fp)
   185bc:	1885883a 	add	r2,r3,r2
   185c0:	10c00044 	addi	r3,r2,1
   185c4:	e0bffc17 	ldw	r2,-16(fp)
   185c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   185cc:	e0bffc17 	ldw	r2,-16(fp)
   185d0:	10c00217 	ldw	r3,8(r2)
   185d4:	e0bff617 	ldw	r2,-40(fp)
   185d8:	1880042e 	bgeu	r3,r2,185ec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   185dc:	e0bffc17 	ldw	r2,-16(fp)
   185e0:	00c00044 	movi	r3,1
   185e4:	10c00405 	stb	r3,16(r2)
   185e8:	00000206 	br	185f4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   185ec:	e0bffc17 	ldw	r2,-16(fp)
   185f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   185f4:	e0fffc17 	ldw	r3,-16(fp)
   185f8:	008000b4 	movhi	r2,2
   185fc:	10b12f04 	addi	r2,r2,-15172
   18600:	e0bff915 	stw	r2,-28(fp)
   18604:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18608:	e0bffa17 	ldw	r2,-24(fp)
   1860c:	e0fff917 	ldw	r3,-28(fp)
   18610:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18614:	e0bff917 	ldw	r2,-28(fp)
   18618:	10c00017 	ldw	r3,0(r2)
   1861c:	e0bffa17 	ldw	r2,-24(fp)
   18620:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18624:	e0bff917 	ldw	r2,-28(fp)
   18628:	10800017 	ldw	r2,0(r2)
   1862c:	e0fffa17 	ldw	r3,-24(fp)
   18630:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18634:	e0bff917 	ldw	r2,-28(fp)
   18638:	e0fffa17 	ldw	r3,-24(fp)
   1863c:	10c00015 	stw	r3,0(r2)
   18640:	e0bff717 	ldw	r2,-36(fp)
   18644:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18648:	e0bffb17 	ldw	r2,-20(fp)
   1864c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18650:	0005883a 	mov	r2,zero
   18654:	00000306 	br	18664 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   18658:	00bffa84 	movi	r2,-22
   1865c:	00000106 	br	18664 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   18660:	00bfde84 	movi	r2,-134
  }
}
   18664:	e037883a 	mov	sp,fp
   18668:	df000017 	ldw	fp,0(sp)
   1866c:	dec00104 	addi	sp,sp,4
   18670:	f800283a 	ret

00018674 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18674:	deffff04 	addi	sp,sp,-4
   18678:	df000015 	stw	fp,0(sp)
   1867c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18680:	e037883a 	mov	sp,fp
   18684:	df000017 	ldw	fp,0(sp)
   18688:	dec00104 	addi	sp,sp,4
   1868c:	f800283a 	ret

00018690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18690:	defffe04 	addi	sp,sp,-8
   18694:	dfc00115 	stw	ra,4(sp)
   18698:	df000015 	stw	fp,0(sp)
   1869c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   186a0:	008000b4 	movhi	r2,2
   186a4:	10b10d04 	addi	r2,r2,-15308
   186a8:	10800017 	ldw	r2,0(r2)
   186ac:	10000526 	beq	r2,zero,186c4 <alt_get_errno+0x34>
   186b0:	008000b4 	movhi	r2,2
   186b4:	10b10d04 	addi	r2,r2,-15308
   186b8:	10800017 	ldw	r2,0(r2)
   186bc:	103ee83a 	callr	r2
   186c0:	00000206 	br	186cc <alt_get_errno+0x3c>
   186c4:	008000b4 	movhi	r2,2
   186c8:	10b9b104 	addi	r2,r2,-6460
}
   186cc:	e037883a 	mov	sp,fp
   186d0:	dfc00117 	ldw	ra,4(sp)
   186d4:	df000017 	ldw	fp,0(sp)
   186d8:	dec00204 	addi	sp,sp,8
   186dc:	f800283a 	ret

000186e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   186e0:	defffa04 	addi	sp,sp,-24
   186e4:	dfc00515 	stw	ra,20(sp)
   186e8:	df000415 	stw	fp,16(sp)
   186ec:	df000404 	addi	fp,sp,16
   186f0:	e13ffe15 	stw	r4,-8(fp)
   186f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   186f8:	e0bffe17 	ldw	r2,-8(fp)
   186fc:	10000326 	beq	r2,zero,1870c <alt_dev_llist_insert+0x2c>
   18700:	e0bffe17 	ldw	r2,-8(fp)
   18704:	10800217 	ldw	r2,8(r2)
   18708:	1000061e 	bne	r2,zero,18724 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1870c:	00186900 	call	18690 <alt_get_errno>
   18710:	1007883a 	mov	r3,r2
   18714:	00800584 	movi	r2,22
   18718:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1871c:	00bffa84 	movi	r2,-22
   18720:	00001306 	br	18770 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18724:	e0bffe17 	ldw	r2,-8(fp)
   18728:	e0ffff17 	ldw	r3,-4(fp)
   1872c:	e0fffc15 	stw	r3,-16(fp)
   18730:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18734:	e0bffd17 	ldw	r2,-12(fp)
   18738:	e0fffc17 	ldw	r3,-16(fp)
   1873c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18740:	e0bffc17 	ldw	r2,-16(fp)
   18744:	10c00017 	ldw	r3,0(r2)
   18748:	e0bffd17 	ldw	r2,-12(fp)
   1874c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18750:	e0bffc17 	ldw	r2,-16(fp)
   18754:	10800017 	ldw	r2,0(r2)
   18758:	e0fffd17 	ldw	r3,-12(fp)
   1875c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18760:	e0bffc17 	ldw	r2,-16(fp)
   18764:	e0fffd17 	ldw	r3,-12(fp)
   18768:	10c00015 	stw	r3,0(r2)

  return 0;  
   1876c:	0005883a 	mov	r2,zero
}
   18770:	e037883a 	mov	sp,fp
   18774:	dfc00117 	ldw	ra,4(sp)
   18778:	df000017 	ldw	fp,0(sp)
   1877c:	dec00204 	addi	sp,sp,8
   18780:	f800283a 	ret

00018784 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   18784:	defffd04 	addi	sp,sp,-12
   18788:	dfc00215 	stw	ra,8(sp)
   1878c:	df000115 	stw	fp,4(sp)
   18790:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18794:	008000b4 	movhi	r2,2
   18798:	10a6ae04 	addi	r2,r2,-25928
   1879c:	e0bfff15 	stw	r2,-4(fp)
   187a0:	00000606 	br	187bc <_do_ctors+0x38>
        (*ctor) (); 
   187a4:	e0bfff17 	ldw	r2,-4(fp)
   187a8:	10800017 	ldw	r2,0(r2)
   187ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   187b0:	e0bfff17 	ldw	r2,-4(fp)
   187b4:	10bfff04 	addi	r2,r2,-4
   187b8:	e0bfff15 	stw	r2,-4(fp)
   187bc:	e0ffff17 	ldw	r3,-4(fp)
   187c0:	008000b4 	movhi	r2,2
   187c4:	10a6af04 	addi	r2,r2,-25924
   187c8:	18bff62e 	bgeu	r3,r2,187a4 <__alt_mem_Flash_flash_data+0xf40187a4>
        (*ctor) (); 
}
   187cc:	e037883a 	mov	sp,fp
   187d0:	dfc00117 	ldw	ra,4(sp)
   187d4:	df000017 	ldw	fp,0(sp)
   187d8:	dec00204 	addi	sp,sp,8
   187dc:	f800283a 	ret

000187e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   187e0:	defffd04 	addi	sp,sp,-12
   187e4:	dfc00215 	stw	ra,8(sp)
   187e8:	df000115 	stw	fp,4(sp)
   187ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   187f0:	008000b4 	movhi	r2,2
   187f4:	10a6ae04 	addi	r2,r2,-25928
   187f8:	e0bfff15 	stw	r2,-4(fp)
   187fc:	00000606 	br	18818 <_do_dtors+0x38>
        (*dtor) (); 
   18800:	e0bfff17 	ldw	r2,-4(fp)
   18804:	10800017 	ldw	r2,0(r2)
   18808:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1880c:	e0bfff17 	ldw	r2,-4(fp)
   18810:	10bfff04 	addi	r2,r2,-4
   18814:	e0bfff15 	stw	r2,-4(fp)
   18818:	e0ffff17 	ldw	r3,-4(fp)
   1881c:	008000b4 	movhi	r2,2
   18820:	10a6af04 	addi	r2,r2,-25924
   18824:	18bff62e 	bgeu	r3,r2,18800 <__alt_mem_Flash_flash_data+0xf4018800>
        (*dtor) (); 
}
   18828:	e037883a 	mov	sp,fp
   1882c:	dfc00117 	ldw	ra,4(sp)
   18830:	df000017 	ldw	fp,0(sp)
   18834:	dec00204 	addi	sp,sp,8
   18838:	f800283a 	ret

0001883c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1883c:	defffa04 	addi	sp,sp,-24
   18840:	dfc00515 	stw	ra,20(sp)
   18844:	df000415 	stw	fp,16(sp)
   18848:	df000404 	addi	fp,sp,16
   1884c:	e13ffe15 	stw	r4,-8(fp)
   18850:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18854:	e0bfff17 	ldw	r2,-4(fp)
   18858:	10800017 	ldw	r2,0(r2)
   1885c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18860:	e13ffe17 	ldw	r4,-8(fp)
   18864:	0000a700 	call	a70 <strlen>
   18868:	10800044 	addi	r2,r2,1
   1886c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18870:	00000d06 	br	188a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18874:	e0bffc17 	ldw	r2,-16(fp)
   18878:	10c00217 	ldw	r3,8(r2)
   1887c:	e0bffd17 	ldw	r2,-12(fp)
   18880:	1809883a 	mov	r4,r3
   18884:	e17ffe17 	ldw	r5,-8(fp)
   18888:	100d883a 	mov	r6,r2
   1888c:	00196cc0 	call	196cc <memcmp>
   18890:	1000021e 	bne	r2,zero,1889c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18894:	e0bffc17 	ldw	r2,-16(fp)
   18898:	00000706 	br	188b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1889c:	e0bffc17 	ldw	r2,-16(fp)
   188a0:	10800017 	ldw	r2,0(r2)
   188a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   188a8:	e0fffc17 	ldw	r3,-16(fp)
   188ac:	e0bfff17 	ldw	r2,-4(fp)
   188b0:	18bff01e 	bne	r3,r2,18874 <__alt_mem_Flash_flash_data+0xf4018874>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   188b4:	0005883a 	mov	r2,zero
}
   188b8:	e037883a 	mov	sp,fp
   188bc:	dfc00117 	ldw	ra,4(sp)
   188c0:	df000017 	ldw	fp,0(sp)
   188c4:	dec00204 	addi	sp,sp,8
   188c8:	f800283a 	ret

000188cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   188cc:	defffe04 	addi	sp,sp,-8
   188d0:	dfc00115 	stw	ra,4(sp)
   188d4:	df000015 	stw	fp,0(sp)
   188d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   188dc:	0009883a 	mov	r4,zero
   188e0:	01440004 	movi	r5,4096
   188e4:	00195580 	call	19558 <alt_icache_flush>
#endif
}
   188e8:	e037883a 	mov	sp,fp
   188ec:	dfc00117 	ldw	ra,4(sp)
   188f0:	df000017 	ldw	fp,0(sp)
   188f4:	dec00204 	addi	sp,sp,8
   188f8:	f800283a 	ret

000188fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   188fc:	defff904 	addi	sp,sp,-28
   18900:	dfc00615 	stw	ra,24(sp)
   18904:	df000515 	stw	fp,20(sp)
   18908:	df000504 	addi	fp,sp,20
   1890c:	e13ffc15 	stw	r4,-16(fp)
   18910:	e17ffd15 	stw	r5,-12(fp)
   18914:	e1bffe15 	stw	r6,-8(fp)
   18918:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1891c:	e13ffd17 	ldw	r4,-12(fp)
   18920:	e17ffe17 	ldw	r5,-8(fp)
   18924:	e1bfff17 	ldw	r6,-4(fp)
   18928:	0018d000 	call	18d00 <open>
   1892c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   18930:	e0bffb17 	ldw	r2,-20(fp)
   18934:	10001c16 	blt	r2,zero,189a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   18938:	008000b4 	movhi	r2,2
   1893c:	10aaf004 	addi	r2,r2,-21568
   18940:	e0fffb17 	ldw	r3,-20(fp)
   18944:	18c00324 	muli	r3,r3,12
   18948:	10c5883a 	add	r2,r2,r3
   1894c:	10c00017 	ldw	r3,0(r2)
   18950:	e0bffc17 	ldw	r2,-16(fp)
   18954:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18958:	008000b4 	movhi	r2,2
   1895c:	10aaf004 	addi	r2,r2,-21568
   18960:	e0fffb17 	ldw	r3,-20(fp)
   18964:	18c00324 	muli	r3,r3,12
   18968:	18c00104 	addi	r3,r3,4
   1896c:	10c5883a 	add	r2,r2,r3
   18970:	10c00017 	ldw	r3,0(r2)
   18974:	e0bffc17 	ldw	r2,-16(fp)
   18978:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1897c:	008000b4 	movhi	r2,2
   18980:	10aaf004 	addi	r2,r2,-21568
   18984:	e0fffb17 	ldw	r3,-20(fp)
   18988:	18c00324 	muli	r3,r3,12
   1898c:	18c00204 	addi	r3,r3,8
   18990:	10c5883a 	add	r2,r2,r3
   18994:	10c00017 	ldw	r3,0(r2)
   18998:	e0bffc17 	ldw	r2,-16(fp)
   1899c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   189a0:	e13ffb17 	ldw	r4,-20(fp)
   189a4:	000d53c0 	call	d53c <alt_release_fd>
  }
} 
   189a8:	e037883a 	mov	sp,fp
   189ac:	dfc00117 	ldw	ra,4(sp)
   189b0:	df000017 	ldw	fp,0(sp)
   189b4:	dec00204 	addi	sp,sp,8
   189b8:	f800283a 	ret

000189bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   189bc:	defffb04 	addi	sp,sp,-20
   189c0:	dfc00415 	stw	ra,16(sp)
   189c4:	df000315 	stw	fp,12(sp)
   189c8:	df000304 	addi	fp,sp,12
   189cc:	e13ffd15 	stw	r4,-12(fp)
   189d0:	e17ffe15 	stw	r5,-8(fp)
   189d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   189d8:	010000b4 	movhi	r4,2
   189dc:	212af304 	addi	r4,r4,-21556
   189e0:	e17ffd17 	ldw	r5,-12(fp)
   189e4:	01800044 	movi	r6,1
   189e8:	01c07fc4 	movi	r7,511
   189ec:	00188fc0 	call	188fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   189f0:	010000b4 	movhi	r4,2
   189f4:	212af004 	addi	r4,r4,-21568
   189f8:	e17ffe17 	ldw	r5,-8(fp)
   189fc:	000d883a 	mov	r6,zero
   18a00:	01c07fc4 	movi	r7,511
   18a04:	00188fc0 	call	188fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18a08:	010000b4 	movhi	r4,2
   18a0c:	212af604 	addi	r4,r4,-21544
   18a10:	e17fff17 	ldw	r5,-4(fp)
   18a14:	01800044 	movi	r6,1
   18a18:	01c07fc4 	movi	r7,511
   18a1c:	00188fc0 	call	188fc <alt_open_fd>
}  
   18a20:	e037883a 	mov	sp,fp
   18a24:	dfc00117 	ldw	ra,4(sp)
   18a28:	df000017 	ldw	fp,0(sp)
   18a2c:	dec00204 	addi	sp,sp,8
   18a30:	f800283a 	ret

00018a34 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   18a34:	defff004 	addi	sp,sp,-64
   18a38:	df000f15 	stw	fp,60(sp)
   18a3c:	df000f04 	addi	fp,sp,60
   18a40:	e13ffd15 	stw	r4,-12(fp)
   18a44:	e17ffe15 	stw	r5,-8(fp)
   18a48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18a4c:	00bffa84 	movi	r2,-22
   18a50:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18a54:	e0bffd17 	ldw	r2,-12(fp)
   18a58:	10800828 	cmpgeui	r2,r2,32
   18a5c:	10005c1e 	bne	r2,zero,18bd0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a60:	0005303a 	rdctl	r2,status
   18a64:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a68:	e0fff317 	ldw	r3,-52(fp)
   18a6c:	00bfff84 	movi	r2,-2
   18a70:	1884703a 	and	r2,r3,r2
   18a74:	1001703a 	wrctl	status,r2
  
  return context;
   18a78:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   18a7c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   18a80:	008000b4 	movhi	r2,2
   18a84:	10967004 	addi	r2,r2,22976
   18a88:	e0fffd17 	ldw	r3,-12(fp)
   18a8c:	180690fa 	slli	r3,r3,3
   18a90:	10c5883a 	add	r2,r2,r3
   18a94:	e0ffff17 	ldw	r3,-4(fp)
   18a98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18a9c:	008000b4 	movhi	r2,2
   18aa0:	10967004 	addi	r2,r2,22976
   18aa4:	e0fffd17 	ldw	r3,-12(fp)
   18aa8:	180690fa 	slli	r3,r3,3
   18aac:	18c00104 	addi	r3,r3,4
   18ab0:	10c5883a 	add	r2,r2,r3
   18ab4:	e0fffe17 	ldw	r3,-8(fp)
   18ab8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18abc:	e0bfff17 	ldw	r2,-4(fp)
   18ac0:	10001f26 	beq	r2,zero,18b40 <alt_irq_register+0x10c>
   18ac4:	e0bffd17 	ldw	r2,-12(fp)
   18ac8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18acc:	0005303a 	rdctl	r2,status
   18ad0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ad4:	e0fff517 	ldw	r3,-44(fp)
   18ad8:	00bfff84 	movi	r2,-2
   18adc:	1884703a 	and	r2,r3,r2
   18ae0:	1001703a 	wrctl	status,r2
  
  return context;
   18ae4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18ae8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   18aec:	e0bff417 	ldw	r2,-48(fp)
   18af0:	00c00044 	movi	r3,1
   18af4:	1884983a 	sll	r2,r3,r2
   18af8:	1007883a 	mov	r3,r2
   18afc:	008000b4 	movhi	r2,2
   18b00:	10b9cf04 	addi	r2,r2,-6340
   18b04:	10800017 	ldw	r2,0(r2)
   18b08:	1886b03a 	or	r3,r3,r2
   18b0c:	008000b4 	movhi	r2,2
   18b10:	10b9cf04 	addi	r2,r2,-6340
   18b14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18b18:	008000b4 	movhi	r2,2
   18b1c:	10b9cf04 	addi	r2,r2,-6340
   18b20:	10800017 	ldw	r2,0(r2)
   18b24:	100170fa 	wrctl	ienable,r2
   18b28:	e0bff617 	ldw	r2,-40(fp)
   18b2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b30:	e0bff717 	ldw	r2,-36(fp)
   18b34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18b38:	0005883a 	mov	r2,zero
   18b3c:	00001f06 	br	18bbc <alt_irq_register+0x188>
   18b40:	e0bffd17 	ldw	r2,-12(fp)
   18b44:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b48:	0005303a 	rdctl	r2,status
   18b4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b50:	e0fff917 	ldw	r3,-28(fp)
   18b54:	00bfff84 	movi	r2,-2
   18b58:	1884703a 	and	r2,r3,r2
   18b5c:	1001703a 	wrctl	status,r2
  
  return context;
   18b60:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18b64:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   18b68:	e0bff817 	ldw	r2,-32(fp)
   18b6c:	00c00044 	movi	r3,1
   18b70:	1884983a 	sll	r2,r3,r2
   18b74:	0084303a 	nor	r2,zero,r2
   18b78:	1007883a 	mov	r3,r2
   18b7c:	008000b4 	movhi	r2,2
   18b80:	10b9cf04 	addi	r2,r2,-6340
   18b84:	10800017 	ldw	r2,0(r2)
   18b88:	1886703a 	and	r3,r3,r2
   18b8c:	008000b4 	movhi	r2,2
   18b90:	10b9cf04 	addi	r2,r2,-6340
   18b94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18b98:	008000b4 	movhi	r2,2
   18b9c:	10b9cf04 	addi	r2,r2,-6340
   18ba0:	10800017 	ldw	r2,0(r2)
   18ba4:	100170fa 	wrctl	ienable,r2
   18ba8:	e0bffa17 	ldw	r2,-24(fp)
   18bac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bb0:	e0bffb17 	ldw	r2,-20(fp)
   18bb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18bb8:	0005883a 	mov	r2,zero
   18bbc:	e0bff115 	stw	r2,-60(fp)
   18bc0:	e0bff217 	ldw	r2,-56(fp)
   18bc4:	e0bffc15 	stw	r2,-16(fp)
   18bc8:	e0bffc17 	ldw	r2,-16(fp)
   18bcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18bd0:	e0bff117 	ldw	r2,-60(fp)
}
   18bd4:	e037883a 	mov	sp,fp
   18bd8:	df000017 	ldw	fp,0(sp)
   18bdc:	dec00104 	addi	sp,sp,4
   18be0:	f800283a 	ret

00018be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18be4:	defffe04 	addi	sp,sp,-8
   18be8:	dfc00115 	stw	ra,4(sp)
   18bec:	df000015 	stw	fp,0(sp)
   18bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18bf4:	008000b4 	movhi	r2,2
   18bf8:	10b10d04 	addi	r2,r2,-15308
   18bfc:	10800017 	ldw	r2,0(r2)
   18c00:	10000526 	beq	r2,zero,18c18 <alt_get_errno+0x34>
   18c04:	008000b4 	movhi	r2,2
   18c08:	10b10d04 	addi	r2,r2,-15308
   18c0c:	10800017 	ldw	r2,0(r2)
   18c10:	103ee83a 	callr	r2
   18c14:	00000206 	br	18c20 <alt_get_errno+0x3c>
   18c18:	008000b4 	movhi	r2,2
   18c1c:	10b9b104 	addi	r2,r2,-6460
}
   18c20:	e037883a 	mov	sp,fp
   18c24:	dfc00117 	ldw	ra,4(sp)
   18c28:	df000017 	ldw	fp,0(sp)
   18c2c:	dec00204 	addi	sp,sp,8
   18c30:	f800283a 	ret

00018c34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18c34:	defffd04 	addi	sp,sp,-12
   18c38:	df000215 	stw	fp,8(sp)
   18c3c:	df000204 	addi	fp,sp,8
   18c40:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18c44:	e0bfff17 	ldw	r2,-4(fp)
   18c48:	10800217 	ldw	r2,8(r2)
   18c4c:	10d00034 	orhi	r3,r2,16384
   18c50:	e0bfff17 	ldw	r2,-4(fp)
   18c54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18c58:	e03ffe15 	stw	zero,-8(fp)
   18c5c:	00001d06 	br	18cd4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18c60:	008000b4 	movhi	r2,2
   18c64:	10aaf004 	addi	r2,r2,-21568
   18c68:	e0fffe17 	ldw	r3,-8(fp)
   18c6c:	18c00324 	muli	r3,r3,12
   18c70:	10c5883a 	add	r2,r2,r3
   18c74:	10c00017 	ldw	r3,0(r2)
   18c78:	e0bfff17 	ldw	r2,-4(fp)
   18c7c:	10800017 	ldw	r2,0(r2)
   18c80:	1880111e 	bne	r3,r2,18cc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18c84:	008000b4 	movhi	r2,2
   18c88:	10aaf004 	addi	r2,r2,-21568
   18c8c:	e0fffe17 	ldw	r3,-8(fp)
   18c90:	18c00324 	muli	r3,r3,12
   18c94:	18c00204 	addi	r3,r3,8
   18c98:	10c5883a 	add	r2,r2,r3
   18c9c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18ca0:	1000090e 	bge	r2,zero,18cc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18ca4:	e0bffe17 	ldw	r2,-8(fp)
   18ca8:	10c00324 	muli	r3,r2,12
   18cac:	008000b4 	movhi	r2,2
   18cb0:	10aaf004 	addi	r2,r2,-21568
   18cb4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18cb8:	e0bfff17 	ldw	r2,-4(fp)
   18cbc:	18800226 	beq	r3,r2,18cc8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18cc0:	00bffcc4 	movi	r2,-13
   18cc4:	00000a06 	br	18cf0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18cc8:	e0bffe17 	ldw	r2,-8(fp)
   18ccc:	10800044 	addi	r2,r2,1
   18cd0:	e0bffe15 	stw	r2,-8(fp)
   18cd4:	008000b4 	movhi	r2,2
   18cd8:	10b10c04 	addi	r2,r2,-15312
   18cdc:	10800017 	ldw	r2,0(r2)
   18ce0:	1007883a 	mov	r3,r2
   18ce4:	e0bffe17 	ldw	r2,-8(fp)
   18ce8:	18bfdd2e 	bgeu	r3,r2,18c60 <__alt_mem_Flash_flash_data+0xf4018c60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18cec:	0005883a 	mov	r2,zero
}
   18cf0:	e037883a 	mov	sp,fp
   18cf4:	df000017 	ldw	fp,0(sp)
   18cf8:	dec00104 	addi	sp,sp,4
   18cfc:	f800283a 	ret

00018d00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18d00:	defff604 	addi	sp,sp,-40
   18d04:	dfc00915 	stw	ra,36(sp)
   18d08:	df000815 	stw	fp,32(sp)
   18d0c:	df000804 	addi	fp,sp,32
   18d10:	e13ffd15 	stw	r4,-12(fp)
   18d14:	e17ffe15 	stw	r5,-8(fp)
   18d18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18d1c:	00bfffc4 	movi	r2,-1
   18d20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18d24:	00bffb44 	movi	r2,-19
   18d28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18d2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18d30:	e13ffd17 	ldw	r4,-12(fp)
   18d34:	014000b4 	movhi	r5,2
   18d38:	29710a04 	addi	r5,r5,-15320
   18d3c:	001883c0 	call	1883c <alt_find_dev>
   18d40:	e0bff815 	stw	r2,-32(fp)
   18d44:	e0bff817 	ldw	r2,-32(fp)
   18d48:	1000051e 	bne	r2,zero,18d60 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18d4c:	e13ffd17 	ldw	r4,-12(fp)
   18d50:	00193480 	call	19348 <alt_find_file>
   18d54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18d58:	00800044 	movi	r2,1
   18d5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18d60:	e0bff817 	ldw	r2,-32(fp)
   18d64:	10002926 	beq	r2,zero,18e0c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   18d68:	e13ff817 	ldw	r4,-32(fp)
   18d6c:	001945c0 	call	1945c <alt_get_fd>
   18d70:	e0bff915 	stw	r2,-28(fp)
   18d74:	e0bff917 	ldw	r2,-28(fp)
   18d78:	1000030e 	bge	r2,zero,18d88 <open+0x88>
    {
      status = index;
   18d7c:	e0bff917 	ldw	r2,-28(fp)
   18d80:	e0bffa15 	stw	r2,-24(fp)
   18d84:	00002306 	br	18e14 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   18d88:	e0bff917 	ldw	r2,-28(fp)
   18d8c:	10c00324 	muli	r3,r2,12
   18d90:	008000b4 	movhi	r2,2
   18d94:	10aaf004 	addi	r2,r2,-21568
   18d98:	1885883a 	add	r2,r3,r2
   18d9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18da0:	e0fffe17 	ldw	r3,-8(fp)
   18da4:	00900034 	movhi	r2,16384
   18da8:	10bfffc4 	addi	r2,r2,-1
   18dac:	1886703a 	and	r3,r3,r2
   18db0:	e0bffc17 	ldw	r2,-16(fp)
   18db4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18db8:	e0bffb17 	ldw	r2,-20(fp)
   18dbc:	1000051e 	bne	r2,zero,18dd4 <open+0xd4>
   18dc0:	e13ffc17 	ldw	r4,-16(fp)
   18dc4:	0018c340 	call	18c34 <alt_file_locked>
   18dc8:	e0bffa15 	stw	r2,-24(fp)
   18dcc:	e0bffa17 	ldw	r2,-24(fp)
   18dd0:	10001016 	blt	r2,zero,18e14 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18dd4:	e0bff817 	ldw	r2,-32(fp)
   18dd8:	10800317 	ldw	r2,12(r2)
   18ddc:	10000826 	beq	r2,zero,18e00 <open+0x100>
   18de0:	e0bff817 	ldw	r2,-32(fp)
   18de4:	10800317 	ldw	r2,12(r2)
   18de8:	e13ffc17 	ldw	r4,-16(fp)
   18dec:	e17ffd17 	ldw	r5,-12(fp)
   18df0:	e1bffe17 	ldw	r6,-8(fp)
   18df4:	e1ffff17 	ldw	r7,-4(fp)
   18df8:	103ee83a 	callr	r2
   18dfc:	00000106 	br	18e04 <open+0x104>
   18e00:	0005883a 	mov	r2,zero
   18e04:	e0bffa15 	stw	r2,-24(fp)
   18e08:	00000206 	br	18e14 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18e0c:	00bffb44 	movi	r2,-19
   18e10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18e14:	e0bffa17 	ldw	r2,-24(fp)
   18e18:	1000090e 	bge	r2,zero,18e40 <open+0x140>
  {
    alt_release_fd (index);  
   18e1c:	e13ff917 	ldw	r4,-28(fp)
   18e20:	000d53c0 	call	d53c <alt_release_fd>
    ALT_ERRNO = -status;
   18e24:	0018be40 	call	18be4 <alt_get_errno>
   18e28:	1007883a 	mov	r3,r2
   18e2c:	e0bffa17 	ldw	r2,-24(fp)
   18e30:	0085c83a 	sub	r2,zero,r2
   18e34:	18800015 	stw	r2,0(r3)
    return -1;
   18e38:	00bfffc4 	movi	r2,-1
   18e3c:	00000106 	br	18e44 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   18e40:	e0bff917 	ldw	r2,-28(fp)
}
   18e44:	e037883a 	mov	sp,fp
   18e48:	dfc00117 	ldw	ra,4(sp)
   18e4c:	df000017 	ldw	fp,0(sp)
   18e50:	dec00204 	addi	sp,sp,8
   18e54:	f800283a 	ret

00018e58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18e58:	defffa04 	addi	sp,sp,-24
   18e5c:	df000515 	stw	fp,20(sp)
   18e60:	df000504 	addi	fp,sp,20
   18e64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e68:	0005303a 	rdctl	r2,status
   18e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e70:	e0fffc17 	ldw	r3,-16(fp)
   18e74:	00bfff84 	movi	r2,-2
   18e78:	1884703a 	and	r2,r3,r2
   18e7c:	1001703a 	wrctl	status,r2
  
  return context;
   18e80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18e84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18e88:	e0bfff17 	ldw	r2,-4(fp)
   18e8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18e90:	e0bffd17 	ldw	r2,-12(fp)
   18e94:	10800017 	ldw	r2,0(r2)
   18e98:	e0fffd17 	ldw	r3,-12(fp)
   18e9c:	18c00117 	ldw	r3,4(r3)
   18ea0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18ea4:	e0bffd17 	ldw	r2,-12(fp)
   18ea8:	10800117 	ldw	r2,4(r2)
   18eac:	e0fffd17 	ldw	r3,-12(fp)
   18eb0:	18c00017 	ldw	r3,0(r3)
   18eb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18eb8:	e0bffd17 	ldw	r2,-12(fp)
   18ebc:	e0fffd17 	ldw	r3,-12(fp)
   18ec0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18ec4:	e0bffd17 	ldw	r2,-12(fp)
   18ec8:	e0fffd17 	ldw	r3,-12(fp)
   18ecc:	10c00015 	stw	r3,0(r2)
   18ed0:	e0bffb17 	ldw	r2,-20(fp)
   18ed4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ed8:	e0bffe17 	ldw	r2,-8(fp)
   18edc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18ee0:	e037883a 	mov	sp,fp
   18ee4:	df000017 	ldw	fp,0(sp)
   18ee8:	dec00104 	addi	sp,sp,4
   18eec:	f800283a 	ret

00018ef0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18ef0:	defffb04 	addi	sp,sp,-20
   18ef4:	dfc00415 	stw	ra,16(sp)
   18ef8:	df000315 	stw	fp,12(sp)
   18efc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18f00:	d0a03017 	ldw	r2,-32576(gp)
   18f04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18f08:	d0a8d217 	ldw	r2,-23736(gp)
   18f0c:	10800044 	addi	r2,r2,1
   18f10:	d0a8d215 	stw	r2,-23736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18f14:	00002e06 	br	18fd0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18f18:	e0bffd17 	ldw	r2,-12(fp)
   18f1c:	10800017 	ldw	r2,0(r2)
   18f20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18f24:	e0bffd17 	ldw	r2,-12(fp)
   18f28:	10800403 	ldbu	r2,16(r2)
   18f2c:	10803fcc 	andi	r2,r2,255
   18f30:	10000426 	beq	r2,zero,18f44 <alt_tick+0x54>
   18f34:	d0a8d217 	ldw	r2,-23736(gp)
   18f38:	1000021e 	bne	r2,zero,18f44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18f3c:	e0bffd17 	ldw	r2,-12(fp)
   18f40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18f44:	e0bffd17 	ldw	r2,-12(fp)
   18f48:	10800217 	ldw	r2,8(r2)
   18f4c:	d0e8d217 	ldw	r3,-23736(gp)
   18f50:	18801d36 	bltu	r3,r2,18fc8 <alt_tick+0xd8>
   18f54:	e0bffd17 	ldw	r2,-12(fp)
   18f58:	10800403 	ldbu	r2,16(r2)
   18f5c:	10803fcc 	andi	r2,r2,255
   18f60:	1000191e 	bne	r2,zero,18fc8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18f64:	e0bffd17 	ldw	r2,-12(fp)
   18f68:	10800317 	ldw	r2,12(r2)
   18f6c:	e0fffd17 	ldw	r3,-12(fp)
   18f70:	18c00517 	ldw	r3,20(r3)
   18f74:	1809883a 	mov	r4,r3
   18f78:	103ee83a 	callr	r2
   18f7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18f80:	e0bfff17 	ldw	r2,-4(fp)
   18f84:	1000031e 	bne	r2,zero,18f94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18f88:	e13ffd17 	ldw	r4,-12(fp)
   18f8c:	0018e580 	call	18e58 <alt_alarm_stop>
   18f90:	00000d06 	br	18fc8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18f94:	e0bffd17 	ldw	r2,-12(fp)
   18f98:	10c00217 	ldw	r3,8(r2)
   18f9c:	e0bfff17 	ldw	r2,-4(fp)
   18fa0:	1887883a 	add	r3,r3,r2
   18fa4:	e0bffd17 	ldw	r2,-12(fp)
   18fa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18fac:	e0bffd17 	ldw	r2,-12(fp)
   18fb0:	10c00217 	ldw	r3,8(r2)
   18fb4:	d0a8d217 	ldw	r2,-23736(gp)
   18fb8:	1880032e 	bgeu	r3,r2,18fc8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18fbc:	e0bffd17 	ldw	r2,-12(fp)
   18fc0:	00c00044 	movi	r3,1
   18fc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18fc8:	e0bffe17 	ldw	r2,-8(fp)
   18fcc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18fd0:	e0fffd17 	ldw	r3,-12(fp)
   18fd4:	d0a03004 	addi	r2,gp,-32576
   18fd8:	18bfcf1e 	bne	r3,r2,18f18 <__alt_mem_Flash_flash_data+0xf4018f18>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18fdc:	000e7480 	call	e748 <OSTimeTick>
}
   18fe0:	e037883a 	mov	sp,fp
   18fe4:	dfc00117 	ldw	ra,4(sp)
   18fe8:	df000017 	ldw	fp,0(sp)
   18fec:	dec00204 	addi	sp,sp,8
   18ff0:	f800283a 	ret

00018ff4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18ff4:	deffff04 	addi	sp,sp,-4
   18ff8:	df000015 	stw	fp,0(sp)
   18ffc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   19000:	000170fa 	wrctl	ienable,zero
}
   19004:	e037883a 	mov	sp,fp
   19008:	df000017 	ldw	fp,0(sp)
   1900c:	dec00104 	addi	sp,sp,4
   19010:	f800283a 	ret

00019014 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   19014:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   19018:	d0e00417 	ldw	r3,-32752(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1901c:	d128ca17 	ldw	r4,-23768(gp)

      stw ra,  0(sp)
   19020:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   19024:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   19028:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1902c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   19030:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   19034:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   19038:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1903c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   19040:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   19044:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   19048:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1904c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19050:	00192800 	call	19280 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   19054:	d128c517 	ldw	r4,-23788(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   19058:	d168bd07 	ldb	r5,-23820(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1905c:	d128ca15 	stw	r4,-23768(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   19060:	d168bd45 	stb	r5,-23819(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   19064:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   19068:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1906c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   19070:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   19074:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   19078:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1907c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   19080:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   19084:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   19088:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1908c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   19090:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   19094:	d0e00415 	stw	r3,-32752(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   19098:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1909c:	f800283a 	ret

000190a0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   190a0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   190a4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   190a8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   190ac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   190b0:	00192800 	call	19280 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   190b4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   190b8:	d4a8bb45 	stb	r18,-23827(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   190bc:	003fe506 	br	19054 <__alt_mem_Flash_flash_data+0xf4019054>

000190c0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   190c0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   190c4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   190c8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   190cc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   190d0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   190d4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   190d8:	dec00204 	addi	sp,sp,8

      callr r2
   190dc:	103ee83a 	callr	r2

      nop
   190e0:	0001883a 	nop

000190e4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   190e4:	defff704 	addi	sp,sp,-36
   190e8:	dfc00815 	stw	ra,32(sp)
   190ec:	df000715 	stw	fp,28(sp)
   190f0:	df000704 	addi	fp,sp,28
   190f4:	e13ffc15 	stw	r4,-16(fp)
   190f8:	e17ffd15 	stw	r5,-12(fp)
   190fc:	e1bffe15 	stw	r6,-8(fp)
   19100:	3805883a 	mov	r2,r7
   19104:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   19108:	e0fffe17 	ldw	r3,-8(fp)
   1910c:	00bfff04 	movi	r2,-4
   19110:	1884703a 	and	r2,r3,r2
   19114:	10bef704 	addi	r2,r2,-1060
   19118:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1911c:	e13ff917 	ldw	r4,-28(fp)
   19120:	000b883a 	mov	r5,zero
   19124:	01810904 	movi	r6,1060
   19128:	00064000 	call	6400 <memset>
   1912c:	e0bff917 	ldw	r2,-28(fp)
   19130:	10c0bb04 	addi	r3,r2,748
   19134:	e0bff917 	ldw	r2,-28(fp)
   19138:	10c00115 	stw	r3,4(r2)
   1913c:	e0bff917 	ldw	r2,-28(fp)
   19140:	10c0d504 	addi	r3,r2,852
   19144:	e0bff917 	ldw	r2,-28(fp)
   19148:	10c00215 	stw	r3,8(r2)
   1914c:	e0bff917 	ldw	r2,-28(fp)
   19150:	10c0ef04 	addi	r3,r2,956
   19154:	e0bff917 	ldw	r2,-28(fp)
   19158:	10c00315 	stw	r3,12(r2)
   1915c:	e0fff917 	ldw	r3,-28(fp)
   19160:	008000b4 	movhi	r2,2
   19164:	10a8bc04 	addi	r2,r2,-23824
   19168:	18800d15 	stw	r2,52(r3)
   1916c:	e0bff917 	ldw	r2,-28(fp)
   19170:	00c00044 	movi	r3,1
   19174:	10c02915 	stw	r3,164(r2)
   19178:	10002a15 	stw	zero,168(r2)
   1917c:	e0bff917 	ldw	r2,-28(fp)
   19180:	00ccc384 	movi	r3,13070
   19184:	10c02b0d 	sth	r3,172(r2)
   19188:	e0bff917 	ldw	r2,-28(fp)
   1918c:	00eaf344 	movi	r3,-21555
   19190:	10c02b8d 	sth	r3,174(r2)
   19194:	e0bff917 	ldw	r2,-28(fp)
   19198:	00c48d04 	movi	r3,4660
   1919c:	10c02c0d 	sth	r3,176(r2)
   191a0:	e0bff917 	ldw	r2,-28(fp)
   191a4:	00f99b44 	movi	r3,-6547
   191a8:	10c02c8d 	sth	r3,178(r2)
   191ac:	e0bff917 	ldw	r2,-28(fp)
   191b0:	00f7bb04 	movi	r3,-8468
   191b4:	10c02d0d 	sth	r3,180(r2)
   191b8:	e0bff917 	ldw	r2,-28(fp)
   191bc:	00c00144 	movi	r3,5
   191c0:	10c02d8d 	sth	r3,182(r2)
   191c4:	e0bff917 	ldw	r2,-28(fp)
   191c8:	00c002c4 	movi	r3,11
   191cc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   191d0:	e0bff917 	ldw	r2,-28(fp)
   191d4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   191d8:	e0bffa17 	ldw	r2,-24(fp)
   191dc:	10bff304 	addi	r2,r2,-52
   191e0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   191e4:	e0bffb17 	ldw	r2,-20(fp)
   191e8:	10800c04 	addi	r2,r2,48
   191ec:	e0fffc17 	ldw	r3,-16(fp)
   191f0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   191f4:	e0bffb17 	ldw	r2,-20(fp)
   191f8:	10800b04 	addi	r2,r2,44
   191fc:	e0fffd17 	ldw	r3,-12(fp)
   19200:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   19204:	e0bffb17 	ldw	r2,-20(fp)
   19208:	10800a04 	addi	r2,r2,40
   1920c:	e0fff917 	ldw	r3,-28(fp)
   19210:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   19214:	008000b4 	movhi	r2,2
   19218:	10a43004 	addi	r2,r2,-28480
   1921c:	10c00104 	addi	r3,r2,4
   19220:	e0bffb17 	ldw	r2,-20(fp)
   19224:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   19228:	e0bffb17 	ldw	r2,-20(fp)
}
   1922c:	e037883a 	mov	sp,fp
   19230:	dfc00117 	ldw	ra,4(sp)
   19234:	df000017 	ldw	fp,0(sp)
   19238:	dec00204 	addi	sp,sp,8
   1923c:	f800283a 	ret

00019240 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   19240:	defffe04 	addi	sp,sp,-8
   19244:	df000115 	stw	fp,4(sp)
   19248:	df000104 	addi	fp,sp,4
   1924c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   19250:	e037883a 	mov	sp,fp
   19254:	df000017 	ldw	fp,0(sp)
   19258:	dec00104 	addi	sp,sp,4
   1925c:	f800283a 	ret

00019260 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   19260:	defffe04 	addi	sp,sp,-8
   19264:	df000115 	stw	fp,4(sp)
   19268:	df000104 	addi	fp,sp,4
   1926c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   19270:	e037883a 	mov	sp,fp
   19274:	df000017 	ldw	fp,0(sp)
   19278:	dec00104 	addi	sp,sp,4
   1927c:	f800283a 	ret

00019280 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   19280:	deffff04 	addi	sp,sp,-4
   19284:	df000015 	stw	fp,0(sp)
   19288:	d839883a 	mov	fp,sp
}
   1928c:	e037883a 	mov	sp,fp
   19290:	df000017 	ldw	fp,0(sp)
   19294:	dec00104 	addi	sp,sp,4
   19298:	f800283a 	ret

0001929c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1929c:	deffff04 	addi	sp,sp,-4
   192a0:	df000015 	stw	fp,0(sp)
   192a4:	d839883a 	mov	fp,sp
}
   192a8:	e037883a 	mov	sp,fp
   192ac:	df000017 	ldw	fp,0(sp)
   192b0:	dec00104 	addi	sp,sp,4
   192b4:	f800283a 	ret

000192b8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   192b8:	deffff04 	addi	sp,sp,-4
   192bc:	df000015 	stw	fp,0(sp)
   192c0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   192c4:	e037883a 	mov	sp,fp
   192c8:	df000017 	ldw	fp,0(sp)
   192cc:	dec00104 	addi	sp,sp,4
   192d0:	f800283a 	ret

000192d4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   192d4:	deffff04 	addi	sp,sp,-4
   192d8:	df000015 	stw	fp,0(sp)
   192dc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   192e0:	e037883a 	mov	sp,fp
   192e4:	df000017 	ldw	fp,0(sp)
   192e8:	dec00104 	addi	sp,sp,4
   192ec:	f800283a 	ret

000192f0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   192f0:	deffff04 	addi	sp,sp,-4
   192f4:	df000015 	stw	fp,0(sp)
   192f8:	d839883a 	mov	fp,sp
}
   192fc:	e037883a 	mov	sp,fp
   19300:	df000017 	ldw	fp,0(sp)
   19304:	dec00104 	addi	sp,sp,4
   19308:	f800283a 	ret

0001930c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1930c:	deffff04 	addi	sp,sp,-4
   19310:	df000015 	stw	fp,0(sp)
   19314:	d839883a 	mov	fp,sp
}
   19318:	e037883a 	mov	sp,fp
   1931c:	df000017 	ldw	fp,0(sp)
   19320:	dec00104 	addi	sp,sp,4
   19324:	f800283a 	ret

00019328 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   19328:	defffe04 	addi	sp,sp,-8
   1932c:	df000115 	stw	fp,4(sp)
   19330:	df000104 	addi	fp,sp,4
   19334:	e13fff15 	stw	r4,-4(fp)
}
   19338:	e037883a 	mov	sp,fp
   1933c:	df000017 	ldw	fp,0(sp)
   19340:	dec00104 	addi	sp,sp,4
   19344:	f800283a 	ret

00019348 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   19348:	defffb04 	addi	sp,sp,-20
   1934c:	dfc00415 	stw	ra,16(sp)
   19350:	df000315 	stw	fp,12(sp)
   19354:	df000304 	addi	fp,sp,12
   19358:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1935c:	008000b4 	movhi	r2,2
   19360:	10b10804 	addi	r2,r2,-15328
   19364:	10800017 	ldw	r2,0(r2)
   19368:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1936c:	00003106 	br	19434 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   19370:	e0bffd17 	ldw	r2,-12(fp)
   19374:	10800217 	ldw	r2,8(r2)
   19378:	1009883a 	mov	r4,r2
   1937c:	0000a700 	call	a70 <strlen>
   19380:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   19384:	e0bffd17 	ldw	r2,-12(fp)
   19388:	10c00217 	ldw	r3,8(r2)
   1938c:	e0bffe17 	ldw	r2,-8(fp)
   19390:	10bfffc4 	addi	r2,r2,-1
   19394:	1885883a 	add	r2,r3,r2
   19398:	10800003 	ldbu	r2,0(r2)
   1939c:	10803fcc 	andi	r2,r2,255
   193a0:	1080201c 	xori	r2,r2,128
   193a4:	10bfe004 	addi	r2,r2,-128
   193a8:	10800bd8 	cmpnei	r2,r2,47
   193ac:	1000031e 	bne	r2,zero,193bc <alt_find_file+0x74>
    {
      len -= 1;
   193b0:	e0bffe17 	ldw	r2,-8(fp)
   193b4:	10bfffc4 	addi	r2,r2,-1
   193b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   193bc:	e0bffe17 	ldw	r2,-8(fp)
   193c0:	e0ffff17 	ldw	r3,-4(fp)
   193c4:	1885883a 	add	r2,r3,r2
   193c8:	10800003 	ldbu	r2,0(r2)
   193cc:	10803fcc 	andi	r2,r2,255
   193d0:	1080201c 	xori	r2,r2,128
   193d4:	10bfe004 	addi	r2,r2,-128
   193d8:	10800be0 	cmpeqi	r2,r2,47
   193dc:	1000081e 	bne	r2,zero,19400 <alt_find_file+0xb8>
   193e0:	e0bffe17 	ldw	r2,-8(fp)
   193e4:	e0ffff17 	ldw	r3,-4(fp)
   193e8:	1885883a 	add	r2,r3,r2
   193ec:	10800003 	ldbu	r2,0(r2)
   193f0:	10803fcc 	andi	r2,r2,255
   193f4:	1080201c 	xori	r2,r2,128
   193f8:	10bfe004 	addi	r2,r2,-128
   193fc:	10000a1e 	bne	r2,zero,19428 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   19400:	e0bffd17 	ldw	r2,-12(fp)
   19404:	10c00217 	ldw	r3,8(r2)
   19408:	e0bffe17 	ldw	r2,-8(fp)
   1940c:	1809883a 	mov	r4,r3
   19410:	e17fff17 	ldw	r5,-4(fp)
   19414:	100d883a 	mov	r6,r2
   19418:	00196cc0 	call	196cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1941c:	1000021e 	bne	r2,zero,19428 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19420:	e0bffd17 	ldw	r2,-12(fp)
   19424:	00000806 	br	19448 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   19428:	e0bffd17 	ldw	r2,-12(fp)
   1942c:	10800017 	ldw	r2,0(r2)
   19430:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19434:	e0fffd17 	ldw	r3,-12(fp)
   19438:	008000b4 	movhi	r2,2
   1943c:	10b10804 	addi	r2,r2,-15328
   19440:	18bfcb1e 	bne	r3,r2,19370 <__alt_mem_Flash_flash_data+0xf4019370>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19444:	0005883a 	mov	r2,zero
}
   19448:	e037883a 	mov	sp,fp
   1944c:	dfc00117 	ldw	ra,4(sp)
   19450:	df000017 	ldw	fp,0(sp)
   19454:	dec00204 	addi	sp,sp,8
   19458:	f800283a 	ret

0001945c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1945c:	defff904 	addi	sp,sp,-28
   19460:	dfc00615 	stw	ra,24(sp)
   19464:	df000515 	stw	fp,20(sp)
   19468:	df000504 	addi	fp,sp,20
   1946c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19470:	00bffa04 	movi	r2,-24
   19474:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19478:	008000b4 	movhi	r2,2
   1947c:	10b9b204 	addi	r2,r2,-6456
   19480:	10800017 	ldw	r2,0(r2)
   19484:	e0bffd15 	stw	r2,-12(fp)
   19488:	e03ffe0d 	sth	zero,-8(fp)
   1948c:	e0fffe0b 	ldhu	r3,-8(fp)
   19490:	e0bffe84 	addi	r2,fp,-6
   19494:	e13ffd17 	ldw	r4,-12(fp)
   19498:	180b883a 	mov	r5,r3
   1949c:	100d883a 	mov	r6,r2
   194a0:	00131e40 	call	131e4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   194a4:	e03ffb15 	stw	zero,-20(fp)
   194a8:	00001d06 	br	19520 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   194ac:	008000b4 	movhi	r2,2
   194b0:	10aaf004 	addi	r2,r2,-21568
   194b4:	e0fffb17 	ldw	r3,-20(fp)
   194b8:	18c00324 	muli	r3,r3,12
   194bc:	10c5883a 	add	r2,r2,r3
   194c0:	10800017 	ldw	r2,0(r2)
   194c4:	1000131e 	bne	r2,zero,19514 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   194c8:	008000b4 	movhi	r2,2
   194cc:	10aaf004 	addi	r2,r2,-21568
   194d0:	e0fffb17 	ldw	r3,-20(fp)
   194d4:	18c00324 	muli	r3,r3,12
   194d8:	10c5883a 	add	r2,r2,r3
   194dc:	e0ffff17 	ldw	r3,-4(fp)
   194e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   194e4:	008000b4 	movhi	r2,2
   194e8:	10b10c04 	addi	r2,r2,-15312
   194ec:	10c00017 	ldw	r3,0(r2)
   194f0:	e0bffb17 	ldw	r2,-20(fp)
   194f4:	1880040e 	bge	r3,r2,19508 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   194f8:	008000b4 	movhi	r2,2
   194fc:	10b10c04 	addi	r2,r2,-15312
   19500:	e0fffb17 	ldw	r3,-20(fp)
   19504:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   19508:	e0bffb17 	ldw	r2,-20(fp)
   1950c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19510:	00000606 	br	1952c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19514:	e0bffb17 	ldw	r2,-20(fp)
   19518:	10800044 	addi	r2,r2,1
   1951c:	e0bffb15 	stw	r2,-20(fp)
   19520:	e0bffb17 	ldw	r2,-20(fp)
   19524:	10800810 	cmplti	r2,r2,32
   19528:	103fe01e 	bne	r2,zero,194ac <__alt_mem_Flash_flash_data+0xf40194ac>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1952c:	008000b4 	movhi	r2,2
   19530:	10b9b204 	addi	r2,r2,-6456
   19534:	10800017 	ldw	r2,0(r2)
   19538:	1009883a 	mov	r4,r2
   1953c:	00135b80 	call	135b8 <OSSemPost>

  return rc;
   19540:	e0bffc17 	ldw	r2,-16(fp)
}
   19544:	e037883a 	mov	sp,fp
   19548:	dfc00117 	ldw	ra,4(sp)
   1954c:	df000017 	ldw	fp,0(sp)
   19550:	dec00204 	addi	sp,sp,8
   19554:	f800283a 	ret

00019558 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19558:	defffb04 	addi	sp,sp,-20
   1955c:	df000415 	stw	fp,16(sp)
   19560:	df000404 	addi	fp,sp,16
   19564:	e13ffe15 	stw	r4,-8(fp)
   19568:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1956c:	e0bfff17 	ldw	r2,-4(fp)
   19570:	10840070 	cmpltui	r2,r2,4097
   19574:	1000021e 	bne	r2,zero,19580 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   19578:	00840004 	movi	r2,4096
   1957c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19580:	e0fffe17 	ldw	r3,-8(fp)
   19584:	e0bfff17 	ldw	r2,-4(fp)
   19588:	1885883a 	add	r2,r3,r2
   1958c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19590:	e0bffe17 	ldw	r2,-8(fp)
   19594:	e0bffc15 	stw	r2,-16(fp)
   19598:	00000506 	br	195b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1959c:	e0bffc17 	ldw	r2,-16(fp)
   195a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   195a4:	e0bffc17 	ldw	r2,-16(fp)
   195a8:	10800804 	addi	r2,r2,32
   195ac:	e0bffc15 	stw	r2,-16(fp)
   195b0:	e0fffc17 	ldw	r3,-16(fp)
   195b4:	e0bffd17 	ldw	r2,-12(fp)
   195b8:	18bff836 	bltu	r3,r2,1959c <__alt_mem_Flash_flash_data+0xf401959c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   195bc:	e0bffe17 	ldw	r2,-8(fp)
   195c0:	108007cc 	andi	r2,r2,31
   195c4:	10000226 	beq	r2,zero,195d0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   195c8:	e0bffc17 	ldw	r2,-16(fp)
   195cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   195d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   195d4:	e037883a 	mov	sp,fp
   195d8:	df000017 	ldw	fp,0(sp)
   195dc:	dec00104 	addi	sp,sp,4
   195e0:	f800283a 	ret

000195e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   195e4:	defffe04 	addi	sp,sp,-8
   195e8:	df000115 	stw	fp,4(sp)
   195ec:	df000104 	addi	fp,sp,4
   195f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   195f4:	e0bfff17 	ldw	r2,-4(fp)
   195f8:	10bffe84 	addi	r2,r2,-6
   195fc:	10c00428 	cmpgeui	r3,r2,16
   19600:	18001a1e 	bne	r3,zero,1966c <alt_exception_cause_generated_bad_addr+0x88>
   19604:	100690ba 	slli	r3,r2,2
   19608:	008000b4 	movhi	r2,2
   1960c:	10a58704 	addi	r2,r2,-27108
   19610:	1885883a 	add	r2,r3,r2
   19614:	10800017 	ldw	r2,0(r2)
   19618:	1000683a 	jmp	r2
   1961c:	0001965c 	xori	zero,zero,1625
   19620:	0001965c 	xori	zero,zero,1625
   19624:	0001966c 	andhi	zero,zero,1625
   19628:	0001966c 	andhi	zero,zero,1625
   1962c:	0001966c 	andhi	zero,zero,1625
   19630:	0001965c 	xori	zero,zero,1625
   19634:	00019664 	muli	zero,zero,1625
   19638:	0001966c 	andhi	zero,zero,1625
   1963c:	0001965c 	xori	zero,zero,1625
   19640:	0001965c 	xori	zero,zero,1625
   19644:	0001966c 	andhi	zero,zero,1625
   19648:	0001965c 	xori	zero,zero,1625
   1964c:	00019664 	muli	zero,zero,1625
   19650:	0001966c 	andhi	zero,zero,1625
   19654:	0001966c 	andhi	zero,zero,1625
   19658:	0001965c 	xori	zero,zero,1625
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1965c:	00800044 	movi	r2,1
   19660:	00000306 	br	19670 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19664:	0005883a 	mov	r2,zero
   19668:	00000106 	br	19670 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1966c:	0005883a 	mov	r2,zero
  }
}
   19670:	e037883a 	mov	sp,fp
   19674:	df000017 	ldw	fp,0(sp)
   19678:	dec00104 	addi	sp,sp,4
   1967c:	f800283a 	ret

00019680 <atexit>:
   19680:	200b883a 	mov	r5,r4
   19684:	000d883a 	mov	r6,zero
   19688:	0009883a 	mov	r4,zero
   1968c:	000f883a 	mov	r7,zero
   19690:	00197d81 	jmpi	197d8 <__register_exitproc>

00019694 <exit>:
   19694:	defffe04 	addi	sp,sp,-8
   19698:	000b883a 	mov	r5,zero
   1969c:	dc000015 	stw	r16,0(sp)
   196a0:	dfc00115 	stw	ra,4(sp)
   196a4:	2021883a 	mov	r16,r4
   196a8:	00198ec0 	call	198ec <__call_exitprocs>
   196ac:	008000b4 	movhi	r2,2
   196b0:	10b10204 	addi	r2,r2,-15352
   196b4:	11000017 	ldw	r4,0(r2)
   196b8:	20800f17 	ldw	r2,60(r4)
   196bc:	10000126 	beq	r2,zero,196c4 <exit+0x30>
   196c0:	103ee83a 	callr	r2
   196c4:	8009883a 	mov	r4,r16
   196c8:	0019a800 	call	19a80 <_exit>

000196cc <memcmp>:
   196cc:	01c000c4 	movi	r7,3
   196d0:	3980192e 	bgeu	r7,r6,19738 <memcmp+0x6c>
   196d4:	2144b03a 	or	r2,r4,r5
   196d8:	11c4703a 	and	r2,r2,r7
   196dc:	10000f26 	beq	r2,zero,1971c <memcmp+0x50>
   196e0:	20800003 	ldbu	r2,0(r4)
   196e4:	28c00003 	ldbu	r3,0(r5)
   196e8:	10c0151e 	bne	r2,r3,19740 <memcmp+0x74>
   196ec:	31bfff84 	addi	r6,r6,-2
   196f0:	01ffffc4 	movi	r7,-1
   196f4:	00000406 	br	19708 <memcmp+0x3c>
   196f8:	20800003 	ldbu	r2,0(r4)
   196fc:	28c00003 	ldbu	r3,0(r5)
   19700:	31bfffc4 	addi	r6,r6,-1
   19704:	10c00e1e 	bne	r2,r3,19740 <memcmp+0x74>
   19708:	21000044 	addi	r4,r4,1
   1970c:	29400044 	addi	r5,r5,1
   19710:	31fff91e 	bne	r6,r7,196f8 <__alt_mem_Flash_flash_data+0xf40196f8>
   19714:	0005883a 	mov	r2,zero
   19718:	f800283a 	ret
   1971c:	20c00017 	ldw	r3,0(r4)
   19720:	28800017 	ldw	r2,0(r5)
   19724:	1880041e 	bne	r3,r2,19738 <memcmp+0x6c>
   19728:	31bfff04 	addi	r6,r6,-4
   1972c:	21000104 	addi	r4,r4,4
   19730:	29400104 	addi	r5,r5,4
   19734:	39bff936 	bltu	r7,r6,1971c <__alt_mem_Flash_flash_data+0xf401971c>
   19738:	303fe91e 	bne	r6,zero,196e0 <__alt_mem_Flash_flash_data+0xf40196e0>
   1973c:	003ff506 	br	19714 <__alt_mem_Flash_flash_data+0xf4019714>
   19740:	10c5c83a 	sub	r2,r2,r3
   19744:	f800283a 	ret

00019748 <strcpy>:
   19748:	2906b03a 	or	r3,r5,r4
   1974c:	18c000cc 	andi	r3,r3,3
   19750:	2005883a 	mov	r2,r4
   19754:	1800161e 	bne	r3,zero,197b0 <strcpy+0x68>
   19758:	29c00017 	ldw	r7,0(r5)
   1975c:	02ffbff4 	movhi	r11,65279
   19760:	5affbfc4 	addi	r11,r11,-257
   19764:	02a02074 	movhi	r10,32897
   19768:	01c8303a 	nor	r4,zero,r7
   1976c:	3ac7883a 	add	r3,r7,r11
   19770:	52a02004 	addi	r10,r10,-32640
   19774:	20c6703a 	and	r3,r4,r3
   19778:	1a86703a 	and	r3,r3,r10
   1977c:	18000c1e 	bne	r3,zero,197b0 <strcpy+0x68>
   19780:	1011883a 	mov	r8,r2
   19784:	41c00015 	stw	r7,0(r8)
   19788:	29400104 	addi	r5,r5,4
   1978c:	29c00017 	ldw	r7,0(r5)
   19790:	41800104 	addi	r6,r8,4
   19794:	3011883a 	mov	r8,r6
   19798:	01d2303a 	nor	r9,zero,r7
   1979c:	3ac7883a 	add	r3,r7,r11
   197a0:	48c6703a 	and	r3,r9,r3
   197a4:	1a86703a 	and	r3,r3,r10
   197a8:	183ff626 	beq	r3,zero,19784 <__alt_mem_Flash_flash_data+0xf4019784>
   197ac:	00000106 	br	197b4 <strcpy+0x6c>
   197b0:	100d883a 	mov	r6,r2
   197b4:	28c00003 	ldbu	r3,0(r5)
   197b8:	31800044 	addi	r6,r6,1
   197bc:	29400044 	addi	r5,r5,1
   197c0:	30ffffc5 	stb	r3,-1(r6)
   197c4:	18c03fcc 	andi	r3,r3,255
   197c8:	18c0201c 	xori	r3,r3,128
   197cc:	18ffe004 	addi	r3,r3,-128
   197d0:	183ff81e 	bne	r3,zero,197b4 <__alt_mem_Flash_flash_data+0xf40197b4>
   197d4:	f800283a 	ret

000197d8 <__register_exitproc>:
   197d8:	008000b4 	movhi	r2,2
   197dc:	defffa04 	addi	sp,sp,-24
   197e0:	10b10204 	addi	r2,r2,-15352
   197e4:	dc000315 	stw	r16,12(sp)
   197e8:	14000017 	ldw	r16,0(r2)
   197ec:	dc400415 	stw	r17,16(sp)
   197f0:	dfc00515 	stw	ra,20(sp)
   197f4:	80805217 	ldw	r2,328(r16)
   197f8:	2023883a 	mov	r17,r4
   197fc:	10003626 	beq	r2,zero,198d8 <__register_exitproc+0x100>
   19800:	10c00117 	ldw	r3,4(r2)
   19804:	010007c4 	movi	r4,31
   19808:	20c00e16 	blt	r4,r3,19844 <__register_exitproc+0x6c>
   1980c:	1a400044 	addi	r9,r3,1
   19810:	8800211e 	bne	r17,zero,19898 <__register_exitproc+0xc0>
   19814:	18c00084 	addi	r3,r3,2
   19818:	18c7883a 	add	r3,r3,r3
   1981c:	18c7883a 	add	r3,r3,r3
   19820:	12400115 	stw	r9,4(r2)
   19824:	10c7883a 	add	r3,r2,r3
   19828:	19400015 	stw	r5,0(r3)
   1982c:	0005883a 	mov	r2,zero
   19830:	dfc00517 	ldw	ra,20(sp)
   19834:	dc400417 	ldw	r17,16(sp)
   19838:	dc000317 	ldw	r16,12(sp)
   1983c:	dec00604 	addi	sp,sp,24
   19840:	f800283a 	ret
   19844:	00800034 	movhi	r2,0
   19848:	10800004 	addi	r2,r2,0
   1984c:	10002526 	beq	r2,zero,198e4 <__register_exitproc+0x10c>
   19850:	01006404 	movi	r4,400
   19854:	d9400015 	stw	r5,0(sp)
   19858:	d9800115 	stw	r6,4(sp)
   1985c:	d9c00215 	stw	r7,8(sp)
   19860:	00000000 	call	0 <__reset>
   19864:	d9400017 	ldw	r5,0(sp)
   19868:	d9800117 	ldw	r6,4(sp)
   1986c:	d9c00217 	ldw	r7,8(sp)
   19870:	10001c26 	beq	r2,zero,198e4 <__register_exitproc+0x10c>
   19874:	80c05217 	ldw	r3,328(r16)
   19878:	10000115 	stw	zero,4(r2)
   1987c:	02400044 	movi	r9,1
   19880:	10c00015 	stw	r3,0(r2)
   19884:	80805215 	stw	r2,328(r16)
   19888:	10006215 	stw	zero,392(r2)
   1988c:	10006315 	stw	zero,396(r2)
   19890:	0007883a 	mov	r3,zero
   19894:	883fdf26 	beq	r17,zero,19814 <__alt_mem_Flash_flash_data+0xf4019814>
   19898:	18d1883a 	add	r8,r3,r3
   1989c:	4211883a 	add	r8,r8,r8
   198a0:	1211883a 	add	r8,r2,r8
   198a4:	41802215 	stw	r6,136(r8)
   198a8:	01000044 	movi	r4,1
   198ac:	11806217 	ldw	r6,392(r2)
   198b0:	20c8983a 	sll	r4,r4,r3
   198b4:	310cb03a 	or	r6,r6,r4
   198b8:	11806215 	stw	r6,392(r2)
   198bc:	41c04215 	stw	r7,264(r8)
   198c0:	01800084 	movi	r6,2
   198c4:	89bfd31e 	bne	r17,r6,19814 <__alt_mem_Flash_flash_data+0xf4019814>
   198c8:	11806317 	ldw	r6,396(r2)
   198cc:	3108b03a 	or	r4,r6,r4
   198d0:	11006315 	stw	r4,396(r2)
   198d4:	003fcf06 	br	19814 <__alt_mem_Flash_flash_data+0xf4019814>
   198d8:	80805304 	addi	r2,r16,332
   198dc:	80805215 	stw	r2,328(r16)
   198e0:	003fc706 	br	19800 <__alt_mem_Flash_flash_data+0xf4019800>
   198e4:	00bfffc4 	movi	r2,-1
   198e8:	003fd106 	br	19830 <__alt_mem_Flash_flash_data+0xf4019830>

000198ec <__call_exitprocs>:
   198ec:	008000b4 	movhi	r2,2
   198f0:	10b10204 	addi	r2,r2,-15352
   198f4:	10800017 	ldw	r2,0(r2)
   198f8:	defff404 	addi	sp,sp,-48
   198fc:	dd800815 	stw	r22,32(sp)
   19900:	d8800015 	stw	r2,0(sp)
   19904:	10805204 	addi	r2,r2,328
   19908:	dd000615 	stw	r20,24(sp)
   1990c:	dc800415 	stw	r18,16(sp)
   19910:	dfc00b15 	stw	ra,44(sp)
   19914:	df000a15 	stw	fp,40(sp)
   19918:	ddc00915 	stw	r23,36(sp)
   1991c:	dd400715 	stw	r21,28(sp)
   19920:	dcc00515 	stw	r19,20(sp)
   19924:	dc400315 	stw	r17,12(sp)
   19928:	dc000215 	stw	r16,8(sp)
   1992c:	2025883a 	mov	r18,r4
   19930:	2829883a 	mov	r20,r5
   19934:	d8800115 	stw	r2,4(sp)
   19938:	05bfffc4 	movi	r22,-1
   1993c:	d8800017 	ldw	r2,0(sp)
   19940:	14c05217 	ldw	r19,328(r2)
   19944:	98001d26 	beq	r19,zero,199bc <__call_exitprocs+0xd0>
   19948:	dd400117 	ldw	r21,4(sp)
   1994c:	98800117 	ldw	r2,4(r19)
   19950:	173fffc4 	addi	fp,r2,-1
   19954:	e0000d16 	blt	fp,zero,1998c <__call_exitprocs+0xa0>
   19958:	14000044 	addi	r16,r2,1
   1995c:	8421883a 	add	r16,r16,r16
   19960:	8421883a 	add	r16,r16,r16
   19964:	84402004 	addi	r17,r16,128
   19968:	9c63883a 	add	r17,r19,r17
   1996c:	9c21883a 	add	r16,r19,r16
   19970:	a0001e26 	beq	r20,zero,199ec <__call_exitprocs+0x100>
   19974:	80804017 	ldw	r2,256(r16)
   19978:	15001c26 	beq	r2,r20,199ec <__call_exitprocs+0x100>
   1997c:	e73fffc4 	addi	fp,fp,-1
   19980:	843fff04 	addi	r16,r16,-4
   19984:	8c7fff04 	addi	r17,r17,-4
   19988:	e5bff91e 	bne	fp,r22,19970 <__alt_mem_Flash_flash_data+0xf4019970>
   1998c:	00800034 	movhi	r2,0
   19990:	10800004 	addi	r2,r2,0
   19994:	10000926 	beq	r2,zero,199bc <__call_exitprocs+0xd0>
   19998:	98800117 	ldw	r2,4(r19)
   1999c:	1000311e 	bne	r2,zero,19a64 <__call_exitprocs+0x178>
   199a0:	98800017 	ldw	r2,0(r19)
   199a4:	10003426 	beq	r2,zero,19a78 <__call_exitprocs+0x18c>
   199a8:	9809883a 	mov	r4,r19
   199ac:	a8800015 	stw	r2,0(r21)
   199b0:	00000000 	call	0 <__reset>
   199b4:	acc00017 	ldw	r19,0(r21)
   199b8:	983fe41e 	bne	r19,zero,1994c <__alt_mem_Flash_flash_data+0xf401994c>
   199bc:	dfc00b17 	ldw	ra,44(sp)
   199c0:	df000a17 	ldw	fp,40(sp)
   199c4:	ddc00917 	ldw	r23,36(sp)
   199c8:	dd800817 	ldw	r22,32(sp)
   199cc:	dd400717 	ldw	r21,28(sp)
   199d0:	dd000617 	ldw	r20,24(sp)
   199d4:	dcc00517 	ldw	r19,20(sp)
   199d8:	dc800417 	ldw	r18,16(sp)
   199dc:	dc400317 	ldw	r17,12(sp)
   199e0:	dc000217 	ldw	r16,8(sp)
   199e4:	dec00c04 	addi	sp,sp,48
   199e8:	f800283a 	ret
   199ec:	98800117 	ldw	r2,4(r19)
   199f0:	80c00017 	ldw	r3,0(r16)
   199f4:	10bfffc4 	addi	r2,r2,-1
   199f8:	17001526 	beq	r2,fp,19a50 <__call_exitprocs+0x164>
   199fc:	80000015 	stw	zero,0(r16)
   19a00:	183fde26 	beq	r3,zero,1997c <__alt_mem_Flash_flash_data+0xf401997c>
   19a04:	00800044 	movi	r2,1
   19a08:	1708983a 	sll	r4,r2,fp
   19a0c:	98806217 	ldw	r2,392(r19)
   19a10:	9dc00117 	ldw	r23,4(r19)
   19a14:	2084703a 	and	r2,r4,r2
   19a18:	1000061e 	bne	r2,zero,19a34 <__call_exitprocs+0x148>
   19a1c:	183ee83a 	callr	r3
   19a20:	98800117 	ldw	r2,4(r19)
   19a24:	15ffc51e 	bne	r2,r23,1993c <__alt_mem_Flash_flash_data+0xf401993c>
   19a28:	a8800017 	ldw	r2,0(r21)
   19a2c:	14ffd326 	beq	r2,r19,1997c <__alt_mem_Flash_flash_data+0xf401997c>
   19a30:	003fc206 	br	1993c <__alt_mem_Flash_flash_data+0xf401993c>
   19a34:	98806317 	ldw	r2,396(r19)
   19a38:	2084703a 	and	r2,r4,r2
   19a3c:	1000061e 	bne	r2,zero,19a58 <__call_exitprocs+0x16c>
   19a40:	89400017 	ldw	r5,0(r17)
   19a44:	9009883a 	mov	r4,r18
   19a48:	183ee83a 	callr	r3
   19a4c:	003ff406 	br	19a20 <__alt_mem_Flash_flash_data+0xf4019a20>
   19a50:	9f000115 	stw	fp,4(r19)
   19a54:	003fea06 	br	19a00 <__alt_mem_Flash_flash_data+0xf4019a00>
   19a58:	89000017 	ldw	r4,0(r17)
   19a5c:	183ee83a 	callr	r3
   19a60:	003fef06 	br	19a20 <__alt_mem_Flash_flash_data+0xf4019a20>
   19a64:	98800017 	ldw	r2,0(r19)
   19a68:	982b883a 	mov	r21,r19
   19a6c:	1027883a 	mov	r19,r2
   19a70:	983fb61e 	bne	r19,zero,1994c <__alt_mem_Flash_flash_data+0xf401994c>
   19a74:	003fd106 	br	199bc <__alt_mem_Flash_flash_data+0xf40199bc>
   19a78:	0005883a 	mov	r2,zero
   19a7c:	003ffa06 	br	19a68 <__alt_mem_Flash_flash_data+0xf4019a68>

00019a80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19a80:	defffd04 	addi	sp,sp,-12
   19a84:	df000215 	stw	fp,8(sp)
   19a88:	df000204 	addi	fp,sp,8
   19a8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19a90:	008000b4 	movhi	r2,2
   19a94:	10b9ba44 	addi	r2,r2,-6423
   19a98:	10000005 	stb	zero,0(r2)
   19a9c:	e0bfff17 	ldw	r2,-4(fp)
   19aa0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19aa4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19aa8:	10000226 	beq	r2,zero,19ab4 <_exit+0x34>
    ALT_SIM_FAIL();
   19aac:	002af070 	cmpltui	zero,zero,43969
   19ab0:	00000106 	br	19ab8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   19ab4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19ab8:	003fff06 	br	19ab8 <__alt_mem_Flash_flash_data+0xf4019ab8>
