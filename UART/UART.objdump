
UART.elf:     file format elf32-littlenios2
UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cc48 memsz 0x0001cc48 flags r-x
    LOAD off    0x0001dc68 vaddr 0x0001cc68 paddr 0x0001ebb8 align 2**12
         filesz 0x00001f50 memsz 0x00001f50 flags rw-
    LOAD off    0x00020b08 vaddr 0x00020b08 paddr 0x00020b08 align 2**12
         filesz 0x00000000 memsz 0x00007410 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c2f8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000072c  0001c53c  0001c53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f50  0001cc68  0001ebb8  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007410  00020b08  00020b08  00020b08  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00027f18  00027f18  0001fbb8  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001fbb8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001fbb8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  0001fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00032552  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b9c1  00000000  00000000  00053252  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f8ca  00000000  00000000  0005ec13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ac8  00000000  00000000  0006e4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000052ca  00000000  00000000  00071fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  00077272  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000923e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  00092400  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00099586  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009958c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00099591  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00099592  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00099593  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00099597  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009959b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009959f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000995a8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000995b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000995ba  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000995c5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001959ba  00000000  00000000  000995da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001c53c l    d  .rodata	00000000 .rodata
0001cc68 l    d  .rwdata	00000000 .rwdata
00020b08 l    d  .bss	00000000 .bss
00027f18 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c696 l     O .rodata	00000010 zeroes.4240
0001c6a6 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001c6b6 l     O .rodata	00000010 zeroes.4255
00004c1c l     F .text	000000bc __sbprintf
0001c6c6 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004e2c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000069e8 l     F .text	00000008 __fp_lock
000069f0 l     F .text	00000008 __fp_unlock
00006a04 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001cc68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001d0ac l     O .rwdata	00000020 lc_ctype_charset
0001d08c l     O .rwdata	00000020 lc_message_charset
0001d0cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001c6f8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c81c l     O .rodata	00000010 zeroes.4184
0001c82c l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000aeb0 l     F .text	000000fc __sprint_r.part.0
0001c84c l     O .rodata	00000010 blanks.4199
0001c83c l     O .rodata	00000010 zeroes.4200
0000c2b8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d7bc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000fee8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010008 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010034 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010134 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010228 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001030c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00010504 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001eb2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010760 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001eb30 l     O .rwdata	00000004 lockid
00020b34 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001eb34 l     O .rwdata	00000004 lockid
00020b3c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00012194 l     F .text	00000044 OS_InitMisc
000121d8 l     F .text	00000068 OS_InitRdyList
00012338 l     F .text	000000e0 OS_InitTCBList
000120b8 l     F .text	000000dc OS_InitEventList
00012240 l     F .text	0000007c OS_InitTaskIdle
000122bc l     F .text	0000007c OS_InitTaskStat
00012598 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001439c l     F .text	00000110 OS_FlagTaskRdy
000140f4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00018844 l     F .text	00000038 alt_dev_reg
0001d6b4 l     O .rwdata	0000106c JTAG_UART
0001e720 l     O .rwdata	00000030 AV_Config
0001e750 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001e780 l     O .rwdata	0000002c Char_LCD_16x2
0001e7ac l     O .rwdata	0000002c IrDA
0001e7d8 l     O .rwdata	0000002c Expansion_JP5
0001e804 l     O .rwdata	0000002c Green_LEDs
0001e830 l     O .rwdata	0000002c HEX3_HEX0
0001e85c l     O .rwdata	0000002c HEX7_HEX4
0001e888 l     O .rwdata	0000002c Pushbuttons
0001e8b4 l     O .rwdata	0000002c Red_LEDs
0001e8e0 l     O .rwdata	0000002c Slider_Switches
0001e90c l     O .rwdata	00000038 PS2_Port
0001e944 l     O .rwdata	00000038 PS2_Port_Dual
0001e97c l     O .rwdata	0000002c rs232_0
0001e9a8 l     O .rwdata	0000002c rs232_1
0001e9d4 l     O .rwdata	0000002c Serial_Port
0001ea00 l     O .rwdata	00000034 USB
0001ea34 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001ea7c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001ead0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018f44 l     F .text	000002a8 altera_avalon_jtag_uart_irq
000191ec l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000199c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b1a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b40c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b6f4 l     F .text	00000050 alt_get_errno
0001b744 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020ba0 g     O .bss	00000004 alt_instruction_exception_handler
000093c8 g     F .text	00000074 _mprec_log10
0001eb82 g     O .rwdata	00000002 OSTaskNameSize
000094b4 g     F .text	0000008c __any_on
0000c824 g     F .text	00000054 _isatty_r
0001c704 g     O .rodata	00000028 __mprec_tinytens
00010430 g     F .text	000000d4 alt_main
00000a5c g     F .text	000000a8 _puts_r
00027e18 g     O .bss	00000100 alt_irq
0001a560 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000c878 g     F .text	0000005c _lseek_r
00014c00 g     F .text	000000d0 OS_MemInit
0001ebb8 g       *ABS*	00000000 __flash_rwdata_start
000187e0 g     F .text	00000064 OSTimeSet
00019b30 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000ea50 g     F .text	00000084 .hidden __eqdf2
00010e10 g     F .text	00000610 OSEventPendMulti
00027f18 g       *ABS*	00000000 __alt_heap_start
0001bd50 g     F .text	00000020 OSTaskCreateHook
00020bf4 g     O .bss	00002000 task1_stk
00000a20 g     F .text	0000003c printf
0001eb5a g     O .rwdata	00000002 OSMboxEn
00011474 g     F .text	0000007c OSIntEnter
0000ca84 g     F .text	0000009c _wcrtomb_r
00009c48 g     F .text	0000005c __sseek
00006d38 g     F .text	00000010 __sinit
0001aee8 g     F .text	00000100 alt_up_char_buffer_string
0000c930 g     F .text	00000138 __swbuf_r
0001a380 g     F .text	00000034 read_CE_bit
0001eb6a g     O .rwdata	00000002 OSQEn
000077e4 g     F .text	0000007c _setlocale_r
00006ba0 g     F .text	00000068 __sfmoreglue
00010ae4 g     F .text	000000d0 __malloc_unlock
0001bdac g     F .text	0000001c OSTaskStatHook
0001a704 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001abf8 g     F .text	00000090 alt_up_rs232_read_fd
00020b44 g     O .bss	00000001 OSLockNesting
0001eba8 g     O .rwdata	00000002 OSDataSize
00020b45 g     O .bss	00000001 OSRunning
0001ae1c g     F .text	000000cc alt_up_char_buffer_draw
00008444 g     F .text	0000015c memmove
0001bde4 g     F .text	0000001c OSInitHookBegin
0001eba0 g     O .rwdata	00000002 OSTmrSize
00006d20 g     F .text	00000018 _cleanup
000085a0 g     F .text	000000a8 _Balloc
00020b48 g     O .bss	00000004 OSIdleCtr
0000ead4 g     F .text	000000e0 .hidden __gtdf2
0001bb04 g     F .text	00000020 altera_nios2_gen2_irq_init
0001bbd0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00019abc g     F .text	00000074 get_DDRAM_addr
000128d0 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001eba6 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001eb46 g     O .rwdata	00000002 OSEventSize
00020b4c g     O .bss	00000001 OSPrioHighRdy
0000c7cc g     F .text	00000058 _fstat_r
0001bd70 g     F .text	00000020 OSTaskDelHook
00020b20 g     O .bss	00000004 errno
00009bc4 g     F .text	00000008 __seofread
0001bbb0 g       .text	00000000 OSStartHighRdy
000170e4 g     F .text	000001ec OSTaskCreateExt
00009e78 g     F .text	00001038 ___svfiprintf_internal_r
00013c40 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001eb86 g     O .rwdata	00000002 OSTaskStatStkSize
00012d30 g     F .text	00000308 OSFlagAccept
000152d4 g     F .text	000000b8 OSQFlush
00014cd0 g     F .text	00000140 OSQAccept
00020b2c g     O .bss	00000004 alt_argv
00026afc g       *ABS*	00000000 _gp
00016f28 g     F .text	000001bc OSTaskCreate
000169e8 g     F .text	00000540 OSTaskChangePrio
00020b40 g     O .bss	00000004 alt_heapsem
00012ba4 g     F .text	0000018c OSDebugInit
000172d0 g     F .text	000003e0 OSTaskDel
0001d534 g     O .rwdata	00000180 alt_fd_list
00024bf4 g     O .bss	00000370 OSFlagTbl
00011ea4 g     F .text	000000b4 OS_EventTaskRemove
0001b34c g     F .text	00000090 alt_find_dev
0000830c g     F .text	00000138 memcpy
0001eb70 g     O .rwdata	00000002 OSRdyTblSize
00019ccc g     F .text	00000050 alt_up_character_lcd_write_fd
0001afe8 g     F .text	0000005c alt_up_char_buffer_clear
000069f8 g     F .text	0000000c _cleanup_r
0000fd10 g     F .text	000000d0 .hidden __floatsidf
0001b4cc g     F .text	00000078 alt_io_redirect
0000ebb4 g     F .text	000000e0 .hidden __ltdf2
0001c53c g       *ABS*	00000000 __DTOR_END__
0001a24c g     F .text	00000090 alt_up_irda_write_fd
0001ab84 g     F .text	00000074 alt_up_rs232_read_data
00000b04 g     F .text	00000014 puts
0001c0f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010bb4 g     F .text	00000120 OSEventNameGet
0001eb54 g     O .rwdata	00000002 OSFlagMax
00009aa8 g     F .text	00000074 __fpclassifyd
00009324 g     F .text	000000a4 __ratio
000114f0 g     F .text	000000f4 OSIntExit
0000c294 g     F .text	00000024 __vfiprintf_internal
0001eb8e g     O .rwdata	00000002 OSTCBSize
00020b4d g     O .bss	00000001 OSPrioCur
0001a048 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00019450 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000009f4 g     F .text	0000002c _printf_r
0000d8d8 g     F .text	00000008 .hidden __udivsi3
00010184 g     F .text	000000a4 isatty
0001eb74 g     O .rwdata	00000002 OSStkWidth
0001c754 g     O .rodata	000000c8 __mprec_tens
0001eb68 g     O .rwdata	00000002 OSPtrSize
00007860 g     F .text	0000000c __locale_charset
0001eb48 g     O .rwdata	00000002 OSEventTblSize
00019fec g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001bb24 g       .text	00000000 OSCtxSw
0001c068 g     F .text	0000008c alt_icache_flush
00020b1c g     O .bss	00000004 __malloc_top_pad
00020b50 g     O .bss	00000004 OSTCBList
00020b24 g     O .bss	00000004 alt_fd_list_lock
0001eb04 g     O .rwdata	00000004 __mb_cur_max
00007890 g     F .text	0000000c _localeconv_r
000089ac g     F .text	0000003c __i2b
0000719c g     F .text	000004c0 __sfvwrite_r
00024f64 g     O .bss	00000c30 OSMemTbl
00020b54 g     O .bss	00000001 OSTickStepState
00009b1c g     F .text	00000054 _sbrk_r
0001eb6c g     O .rwdata	00000002 OSQMax
00025b94 g     O .bss	00000800 OSTaskStatStk
00014830 g     F .text	000000f8 OSMemNameGet
0001eb4c g     O .rwdata	00000002 OSFlagEn
0000c8d4 g     F .text	0000005c _read_r
0001eb92 g     O .rwdata	00000002 OSTimeTickHookEn
00020ba4 g     O .bss	00000028 command
000157f4 g     F .text	00000168 OSQPost
000144ac g     F .text	000000a0 OS_FlagUnlink
0001eb24 g     O .rwdata	00000004 alt_max_fd
0001ab00 g     F .text	00000044 alt_up_rs232_check_parity
00012468 g     F .text	00000064 OS_MemCopy
000124cc g     F .text	000000cc OS_Sched
0000c4e8 g     F .text	000000f0 _fclose_r
00014740 g     F .text	000000f0 OSMemGet
000179b0 g     F .text	000001c0 OSTaskNameSet
0001a3b4 g     F .text	00000030 read_num_bytes_available
000069b8 g     F .text	00000030 fflush
00020b18 g     O .bss	00000004 __malloc_max_sbrked_mem
00020b58 g     O .bss	00000004 OSCtxSwCtr
0001bdc8 g     F .text	0000001c OSTimeTickHook
0001b544 g     F .text	000001b0 alt_irq_register
0001eb56 g     O .rwdata	00000002 OSFlagNameSize
0001a31c g     F .text	00000034 read_RI_bit
00011f58 g     F .text	000000fc OS_EventTaskRemoveMulti
0000d8e8 g     F .text	0000089c .hidden __adddf3
00011d58 g     F .text	0000014c OS_EventTaskWaitMulti
000090cc g     F .text	0000011c __b2d
0001eb6e g     O .rwdata	00000002 OSQSize
0000d22c g     F .text	00000590 .hidden __umoddi3
0001035c g     F .text	000000d4 lseek
000162f8 g     F .text	00000268 OSSemPend
0001eafc g     O .rwdata	00000004 _global_impure_ptr
00009540 g     F .text	00000568 _realloc_r
0001eb58 g     O .rwdata	00000002 OSLowestPrio
00027f18 g       *ABS*	00000000 __bss_end
0001be38 g     F .text	00000020 OSTCBInitHook
0001eb9e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001ba00 g     F .text	00000104 alt_tick
0000cc6c g     F .text	000005c0 .hidden __udivdi3
0000c5ec g     F .text	00000184 _fputwc_r
0001eb40 g     O .rwdata	00000002 OSEventEn
0001c72c g     O .rodata	00000028 __mprec_bigtens
00008790 g     F .text	00000104 __s2b
0001eb9a g     O .rwdata	00000002 OSTmrCfgNameSize
0000fde0 g     F .text	000000a4 .hidden __floatunsidf
00008e74 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001a418 g     F .text	0000002c read_data_byte
00006d58 g     F .text	00000018 __fp_lock_all
00000344 g     F .text	00000080 sendCommand
000142b8 g     F .text	000000e4 OS_FlagInit
0001b968 g     F .text	00000098 alt_alarm_stop
0001a350 g     F .text	00000030 read_RE_bit
0001eb7c g     O .rwdata	00000002 OSTaskIdleStkSize
00020b94 g     O .bss	00000004 alt_irq_active
00015ee0 g     F .text	000000b0 OSSemAccept
00014a40 g     F .text	000000d8 OSMemPut
0001454c g     F .text	000001f4 OSMemCreate
00020b5c g     O .bss	00000004 OSIdleCtrMax
0001a088 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001d50c g     O .rwdata	00000028 alt_dev_null
0001eb90 g     O .rwdata	00000002 OSTicksPerSec
00019f60 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001bb24 g       .text	00000000 OSIntCtxSw
0001a5bc g     F .text	00000074 alt_up_ps2_write_data_byte
0001b184 g     F .text	0000001c alt_dcache_flush_all
00008894 g     F .text	00000068 __hi0bits
0000fc88 g     F .text	00000088 .hidden __fixdfsi
00020b60 g     O .bss	00000004 OSTCBFreeList
0001ebb8 g       *ABS*	00000000 __ram_rwdata_end
00016560 g     F .text	0000016c OSSemPendAbort
0001eb1c g     O .rwdata	00000008 alt_dev_list
000107b0 g     F .text	000000f8 write
0001eb94 g     O .rwdata	00000002 OSVersionNbr
0001cc68 g       *ABS*	00000000 __ram_rodata_end
00010084 g     F .text	000000b0 fstat
0001ac88 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ebb4 g     F .text	000000e0 .hidden __ledf2
0001eb3c g     O .rwdata	00000004 OSEndiannessTest
00008be4 g     F .text	00000140 __pow5mult
0000afc4 g     F .text	000012d0 ___vfiprintf_internal_r
00020b10 g     O .bss	00000004 __nlocale_changed
0000d8e0 g     F .text	00000008 .hidden __umodsi3
000002f8 g     F .text	0000004c putChar
0001eb4e g     O .rwdata	00000002 OSFlagGrpSize
00027f18 g       *ABS*	00000000 end
0001a8f8 g     F .text	00000098 alt_up_ps2_write_fd
0001a0c4 g     F .text	00000044 alt_up_irda_check_parity
0001ad5c g     F .text	00000080 alt_up_char_buffer_init
00018e04 g     F .text	00000140 altera_avalon_jtag_uart_init
0001272c g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001c53c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00019a3c g     F .text	00000080 alt_avalon_timer_sc_init
0000fe84 g     F .text	00000064 .hidden __clzsi2
00019704 g     F .text	000002c0 altera_avalon_jtag_uart_write
00006d48 g     F .text	00000004 __sfp_lock_acquire
00008224 g     F .text	000000e8 memchr
00012418 g     F .text	00000050 OS_MemClr
00019be0 g     F .text	00000078 alt_up_character_lcd_write
00002ca8 g     F .text	00001f50 ___vfprintf_internal_r
0001bbf4 g     F .text	0000015c OSTaskStkInit
000004ec g     F .text	0000030c task1
00000b18 g     F .text	00000058 _sprintf_r
00006eac g     F .text	000002f0 _free_r
0000786c g     F .text	00000010 __locale_mb_cur_max
00011ab4 g     F .text	00000198 OS_EventTaskRdy
0001c36c g     F .text	00000194 __call_exitprocs
00020b64 g     O .bss	00000001 OSCPUUsage
00020b0c g     O .bss	00000004 __mlocale_changed
0001eb08 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000007f8 g     F .text	0000002c task2
00020b98 g     O .bss	00000004 _alt_tick_rate
0001538c g     F .text	000002fc OSQPend
000182dc g     F .text	00000148 OSTimeDly
00008d24 g     F .text	00000150 __lshift
000003c4 g     F .text	00000128 getCommand
00020b9c g     O .bss	00000004 _alt_nticks
00010554 g     F .text	000000fc read
000188b0 g     F .text	000003f0 alt_sys_init
00019e18 g     F .text	00000088 alt_up_character_lcd_shift_display
00009cac g     F .text	000001cc __ssprint_r
0001c258 g     F .text	00000114 __register_exitproc
00020b65 g     O .bss	00000001 OSTaskCtr
0001a818 g     F .text	00000054 alt_up_ps2_clear_fifo
0001aac4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00018424 g     F .text	00000168 OSTimeDlyHMSM
000089e8 g     F .text	000001fc __multiply
00019ea0 g     F .text	0000008c alt_up_character_lcd_erase_pos
000192fc g     F .text	00000068 altera_avalon_jtag_uart_close
0001cc68 g       *ABS*	00000000 __ram_rwdata_start
0001c53c g       *ABS*	00000000 __ram_rodata_start
00020bcc g     O .bss	00000028 __malloc_current_mallinfo
0001eb42 g     O .rwdata	00000002 OSEventMax
000091e8 g     F .text	0000013c __d2b
000166cc g     F .text	00000110 OSSemPost
0001166c g     F .text	000000d8 OSSchedUnlock
00018ca0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001bf6c g     F .text	000000fc alt_get_fd
00020b68 g     O .bss	00000004 OSMemFreeList
000117b0 g     F .text	000000ac OSStatInit
00014030 g     F .text	000000c4 OSFlagQuery
0001eb78 g     O .rwdata	00000002 OSTaskCreateExtEn
0000c3d0 g     F .text	00000054 _close_r
0001c1dc g     F .text	0000007c memcmp
00011a98 g     F .text	0000001c OS_Dummy
00018d60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00027f18 g       *ABS*	00000000 __alt_stack_base
00018db0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00019f94 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00004cd8 g     F .text	00000154 __swsetup_r
00026394 g     O .bss	000001e0 OSQTbl
0000e184 g     F .text	000008cc .hidden __divdf3
00006c08 g     F .text	00000118 __sfp
0000943c g     F .text	00000078 __copybits
0001d104 g     O .rwdata	00000408 __malloc_av_
00006d54 g     F .text	00000004 __sinit_lock_release
00020b6c g     O .bss	00000004 OSTCBHighRdy
0000ec94 g     F .text	00000724 .hidden __muldf3
00009b70 g     F .text	00000054 __sread
00020b70 g     O .bss	00000004 OSQFreeList
0001aa28 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001be58 g     F .text	00000114 alt_find_file
0001b1f0 g     F .text	000000a4 alt_dev_llist_insert
000109c4 g     F .text	00000120 __malloc_lock
000106b0 g     F .text	000000b0 sbrk
00000d18 g     F .text	00001f90 ___svfprintf_internal_r
00010cd4 g     F .text	0000013c OSEventNameSet
0000695c g     F .text	0000005c _fflush_r
0000c424 g     F .text	000000c4 _calloc_r
00020b74 g     O .bss	00000001 OSRdyGrp
00020b08 g       *ABS*	00000000 __bss_start
000008d0 g     F .text	00000124 memset
00000824 g     F .text	000000ac main
00020b30 g     O .bss	00000004 alt_envp
00020b14 g     O .bss	00000004 __malloc_max_total_mem
0001addc g     F .text	00000040 alt_up_char_buffer_open_dev
00018d00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ca68 g     F .text	0000001c __swbuf
0001c978 g     O .rodata	00000100 OSUnMapTbl
0001eb72 g     O .rwdata	00000002 OSSemEn
00019d90 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00013ca8 g     F .text	00000388 OSFlagPost
00009ca4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c5d8 g     F .text	00000014 fclose
00011c4c g     F .text	0000010c OS_EventTaskWait
00022bf4 g     O .bss	00002000 task2_stk
0001a7a8 g     F .text	00000070 alt_up_ps2_read_data_byte
00012808 g     F .text	000000c8 OS_TaskStatStkChk
000176b0 g     F .text	00000158 OSTaskDelReq
0000502c g     F .text	00001728 _dtoa_r
00007a7c g     F .text	000007a8 _malloc_r
0000cbe0 g     F .text	00000030 __ascii_wctomb
0001eb28 g     O .rwdata	00000004 alt_errno
00011744 g     F .text	0000006c OSStart
00010968 g     F .text	0000005c __env_unlock
0000765c g     F .text	000000c4 _fwalk
00017b70 g     F .text	000001f8 OSTaskResume
00014b18 g     F .text	000000e8 OSMemQuery
0001eb84 g     O .rwdata	00000002 OSTaskStatEn
0001a108 g     F .text	00000040 alt_up_irda_write_data
0001eb5e g     O .rwdata	00000002 OSMemMax
0001595c g     F .text	00000170 OSQPostFront
0001a990 g     F .text	00000040 alt_up_ps2_open_dev
0000d828 g     F .text	00000054 .hidden __divsi3
00020b75 g     O .bss	00000003 OSRdyTbl
0001eb38 g     O .rwdata	00000002 OSDebugEn
00019ba0 g     F .text	00000040 alt_up_character_lcd_open_dev
00006d88 g     F .text	00000124 _malloc_trim_r
0001a508 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001c53c g       *ABS*	00000000 __CTOR_END__
0001eb50 g     O .rwdata	00000002 OSFlagNodeSize
0001eb98 g     O .rwdata	00000002 OSTmrCfgMax
00019b6c g     F .text	00000034 alt_up_character_lcd_init
00000bdc g     F .text	000000a4 strcmp
00014e10 g     F .text	000001fc OSQCreate
00017808 g     F .text	000001a8 OSTaskNameGet
0001c53c g       *ABS*	00000000 __flash_rodata_start
00015acc g     F .text	0000020c OSQPostOpt
0001185c g     F .text	0000021c OSTimeTick
0001eb80 g     O .rwdata	00000002 OSTaskMax
0001c53c g       *ABS*	00000000 __DTOR_LIST__
00015f90 g     F .text	00000100 OSSemCreate
0001eba4 g     O .rwdata	00000002 OSTmrWheelSize
0001ad1c g     F .text	00000040 alt_up_rs232_open_dev
0000ea50 g     F .text	00000084 .hidden __nedf2
0001eb7a g     O .rwdata	00000002 OSTaskDelEn
000167dc g     F .text	00000110 OSSemQuery
0001500c g     F .text	000002c8 OSQDel
00015688 g     F .text	0000016c OSQPendAbort
0001887c g     F .text	00000034 alt_irq_init
00010650 g     F .text	00000060 alt_release_fd
0001a3e4 g     F .text	00000034 read_data_valid
00000b70 g     F .text	0000006c sprintf
00019f2c g     F .text	00000034 alt_up_character_lcd_cursor_off
0001c85c g     O .rodata	00000100 .hidden __clz_tab
00020b08 g     O .bss	00000004 _PathLocale
0001a6a0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001c190 g     F .text	00000014 atexit
0000c374 g     F .text	0000005c _write_r
000115e4 g     F .text	00000088 OSSchedLock
0000789c g     F .text	0000001c setlocale
00013038 g     F .text	00000128 OSFlagCreate
0001eb00 g     O .rwdata	00000004 _impure_ptr
00020b28 g     O .bss	00000004 alt_argc
00006754 g     F .text	00000208 __sflush_r
0001b2f0 g     F .text	0000005c _do_dtors
00007888 g     F .text	00000008 __locale_cjk_lang
0001eb4a g     O .rwdata	00000002 OSEventMultiEn
00013160 g     F .text	00000270 OSFlagDel
00020b78 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000906c g     F .text	00000060 __ulp
00013650 g     F .text	000005f0 OSFlagPend
0001eb96 g     O .rwdata	00000002 OSTmrEn
00006d70 g     F .text	00000018 __fp_unlock_all
0001eb14 g     O .rwdata	00000008 alt_fs_list
00012608 g     F .text	00000074 OS_StrCopy
0001a9d0 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001ab44 g     F .text	00000040 alt_up_rs232_write_data
0001eb60 g     O .rwdata	00000002 OSMemNameSize
0001be00 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001eb8c g     O .rwdata	00000002 OSTCBPrioTblMax
000078b8 g     F .text	0000000c localeconv
0001eb88 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001eb5c g     O .rwdata	00000002 OSMemEn
0001eb66 g     O .rwdata	00000002 OSMutexEn
0001ebb8 g       *ABS*	00000000 _edata
00027f18 g       *ABS*	00000000 _end
00020b7c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00019364 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001858c g     F .text	000001f0 OSTimeDlyResume
00013500 g     F .text	00000150 OSFlagNameSet
00017d68 g     F .text	000001c8 OSTaskStkChk
0001eb62 g     O .rwdata	00000002 OSMemSize
00009bcc g     F .text	0000007c __swrite
0001eb0c g     O .rwdata	00000004 __malloc_trim_threshold
0000787c g     F .text	0000000c __locale_msgcharset
00020b80 g     O .bss	00000004 OSTCBCur
0001c1a4 g     F .text	00000038 exit
0001a148 g     F .text	00000074 alt_up_irda_read_data
0001eb64 g     O .rwdata	00000002 OSMemTblSize
00007720 g     F .text	000000c4 _fwalk_reent
0001a444 g     F .text	000000c4 alt_up_ps2_init
00008ed4 g     F .text	00000198 __mdiff
0000d87c g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006d4c g     F .text	00000004 __sfp_lock_release
00011420 g     F .text	00000054 OSInit
00018144 g     F .text	0000012c OSTaskQuery
00019c58 g     F .text	00000074 alt_up_character_lcd_string
00015e34 g     F .text	000000ac OS_QInit
0001267c g     F .text	00000054 OS_StrLen
0001a2dc g     F .text	00000040 alt_up_irda_open_dev
00014928 g     F .text	00000118 OSMemNameSet
00000280 g     F .text	00000078 getChar
0001eb7e g     O .rwdata	00000002 OSTaskProfileEn
00020b84 g     O .bss	00000004 OSTime
00026574 g     O .bss	00000800 OSTaskIdleStk
0001c500 g     F .text	0000003c _exit
0001b044 g     F .text	00000140 alt_alarm_start
000133d0 g     F .text	00000130 OSFlagNameGet
0001877c g     F .text	00000064 OSTimeGet
000078c4 g     F .text	000001b8 __smakebuf_r
0001a630 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000c80 g     F .text	00000098 strlen
0001bd90 g     F .text	0000001c OSTaskSwHook
0001b810 g     F .text	00000158 open
00026d74 g     O .bss	00000b40 OSEventTbl
0000ead4 g     F .text	000000e0 .hidden __gedf2
000278b4 g     O .bss	00000510 OSTCBTbl
000168ec g     F .text	000000fc OSSemSet
0001eb10 g     O .rwdata	00000004 __wctomb
0000afac g     F .text	00000018 __sprint_r
0001b3dc g     F .text	00000030 alt_icache_flush_all
00019d1c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001ebac g     O .rwdata	00000004 alt_priority_mask
00016090 g     F .text	00000268 OSSemDel
00020b88 g     O .bss	00000004 OSFlagFreeList
0001eb44 g     O .rwdata	00000002 OSEventNameSize
00004bf8 g     F .text	00000024 __vfprintf_internal
00020b8c g     O .bss	00000001 OSStatRdy
00027dc4 g     O .bss	00000054 OSTCBPrioTbl
0000cc10 g     F .text	0000005c _wctomb_r
000108a8 g     F .text	000000c0 __env_lock
0001a86c g     F .text	0000008c alt_up_ps2_read_fd
0001eb8a g     O .rwdata	00000002 OSTaskSwHookEn
0000f3b8 g     F .text	000008d0 .hidden __subdf3
0001a1bc g     F .text	00000090 alt_up_irda_read_fd
000088fc g     F .text	000000b0 __lo0bits
0001ebb0 g     O .rwdata	00000008 alt_alarm_list
0001eb52 g     O .rwdata	00000002 OSFlagWidth
0001b294 g     F .text	0000005c _do_ctors
0001aa84 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000cb20 g     F .text	000000c0 wcrtomb
0000ff38 g     F .text	000000d0 close
00020b38 g     O .bss	00000004 alt_envsem
00020b90 g     O .bss	00000004 OSIdleCtrRun
00011a78 g     F .text	00000020 OSVersion
0001eb9c g     O .rwdata	00000002 OSTmrCfgWheelSize
0001028c g     F .text	00000080 alt_load
00018270 g     F .text	0000006c OS_TaskStkClr
0001eb76 g     O .rwdata	00000002 OSTaskCreateEn
00012054 g     F .text	00000064 OS_EventWaitListInit
0000c770 g     F .text	0000005c fputwc
0001be1c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00006d50 g     F .text	00000004 __sinit_lock_acquire
00008670 g     F .text	00000120 __multadd
00017f30 g     F .text	00000214 OSTaskSuspend
00008648 g     F .text	00000028 _Bfree
000126d0 g     F .text	0000005c OS_TaskIdle
0001eba2 g     O .rwdata	00000002 OSTmrTblSize
00015cd8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00114740 	call	11474 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109f8604 	addi	r2,r2,32280
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109f8604 	addi	r2,r2,32280
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00114f00 	call	114f0 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82917 	ldw	r2,-24412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82917 	ldw	r2,-24412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d69abf14 	ori	gp,gp,27388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	1082c214 	ori	r2,r2,2824

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18dfc614 	ori	r3,r3,32536

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	001028c0 	call	1028c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00104300 	call	10430 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <getChar>:
#define UART_1 0x08200000
#define UART_0 0x08200008

char command[40] = "";

char getChar(volatile int *UART_ID) {
     280:	defffc04 	addi	sp,sp,-16
     284:	df000315 	stw	fp,12(sp)
     288:	df000304 	addi	fp,sp,12
     28c:	e13fff15 	stw	r4,-4(fp)
	int data;
	data = *(UART_ID); // read the RS232_UART data register
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	10800017 	ldw	r2,0(r2)
     298:	e0bffd15 	stw	r2,-12(fp)
	if (data & 0x00008000) { // check RVALID to see if there is new data
     29c:	e0bffd17 	ldw	r2,-12(fp)
     2a0:	10a0000c 	andi	r2,r2,32768
     2a4:	10000f26 	beq	r2,zero,2e4 <getChar+0x64>
		char character = data & 0xFF;
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	e0bffe05 	stb	r2,-8(fp)
		if (((character >= 'a') && (character <= 'z')) || (character == '/')) {
     2b0:	e0bffe07 	ldb	r2,-8(fp)
     2b4:	10801850 	cmplti	r2,r2,97
     2b8:	1000031e 	bne	r2,zero,2c8 <getChar+0x48>
     2bc:	e0bffe07 	ldb	r2,-8(fp)
     2c0:	10801ed0 	cmplti	r2,r2,123
     2c4:	1000031e 	bne	r2,zero,2d4 <getChar+0x54>
     2c8:	e0bffe07 	ldb	r2,-8(fp)
     2cc:	10800bd8 	cmpnei	r2,r2,47
     2d0:	1000021e 	bne	r2,zero,2dc <getChar+0x5c>
			return character;
     2d4:	e0bffe03 	ldbu	r2,-8(fp)
     2d8:	00000306 	br	2e8 <getChar+0x68>
		}
	} else {
		return '\0';
	}
	return '\0';
     2dc:	0005883a 	mov	r2,zero
     2e0:	00000106 	br	2e8 <getChar+0x68>
		char character = data & 0xFF;
		if (((character >= 'a') && (character <= 'z')) || (character == '/')) {
			return character;
		}
	} else {
		return '\0';
     2e4:	0005883a 	mov	r2,zero
	}
	return '\0';
}
     2e8:	e037883a 	mov	sp,fp
     2ec:	df000017 	ldw	fp,0(sp)
     2f0:	dec00104 	addi	sp,sp,4
     2f4:	f800283a 	ret

000002f8 <putChar>:

void putChar(volatile int *UART_ID, char c) {
     2f8:	defffc04 	addi	sp,sp,-16
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
     304:	e13ffe15 	stw	r4,-8(fp)
     308:	2805883a 	mov	r2,r5
     30c:	e0bfff05 	stb	r2,-4(fp)
	int control;
	control = *(UART_ID + 4); // read the RS232_UART control register
     310:	e0bffe17 	ldw	r2,-8(fp)
     314:	10800417 	ldw	r2,16(r2)
     318:	e0bffd15 	stw	r2,-12(fp)
	if (control & 0x00FF0000) { // if space, write character, else ignore
     31c:	e0bffd17 	ldw	r2,-12(fp)
     320:	10803fec 	andhi	r2,r2,255
     324:	10000326 	beq	r2,zero,334 <putChar+0x3c>
		*(UART_ID) = c;
     328:	e0ffff07 	ldb	r3,-4(fp)
     32c:	e0bffe17 	ldw	r2,-8(fp)
     330:	10c00015 	stw	r3,0(r2)
	}
}
     334:	e037883a 	mov	sp,fp
     338:	df000017 	ldw	fp,0(sp)
     33c:	dec00104 	addi	sp,sp,4
     340:	f800283a 	ret

00000344 <sendCommand>:

void sendCommand(volatile int *UART_ID, char string[]) {
     344:	defffa04 	addi	sp,sp,-24
     348:	dfc00515 	stw	ra,20(sp)
     34c:	df000415 	stw	fp,16(sp)
     350:	dc000315 	stw	r16,12(sp)
     354:	df000404 	addi	fp,sp,16
     358:	e13ffd15 	stw	r4,-12(fp)
     35c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++) {
     360:	e03ffc15 	stw	zero,-16(fp)
     364:	00000d06 	br	39c <sendCommand+0x58>
		putChar(UART_ID, string[i]);
     368:	e0bffc17 	ldw	r2,-16(fp)
     36c:	e0fffe17 	ldw	r3,-8(fp)
     370:	1885883a 	add	r2,r3,r2
     374:	10800003 	ldbu	r2,0(r2)
     378:	10803fcc 	andi	r2,r2,255
     37c:	1080201c 	xori	r2,r2,128
     380:	10bfe004 	addi	r2,r2,-128
     384:	e13ffd17 	ldw	r4,-12(fp)
     388:	100b883a 	mov	r5,r2
     38c:	00002f80 	call	2f8 <putChar>
	}
}

void sendCommand(volatile int *UART_ID, char string[]) {
	int i;
	for (i = 0; i < strlen(string); i++) {
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10800044 	addi	r2,r2,1
     398:	e0bffc15 	stw	r2,-16(fp)
     39c:	e43ffc17 	ldw	r16,-16(fp)
     3a0:	e13ffe17 	ldw	r4,-8(fp)
     3a4:	0000c800 	call	c80 <strlen>
     3a8:	80bfef36 	bltu	r16,r2,368 <__alt_mem_Flash_flash_data+0xf4000368>
		putChar(UART_ID, string[i]);
	}
}
     3ac:	e6ffff04 	addi	sp,fp,-4
     3b0:	dfc00217 	ldw	ra,8(sp)
     3b4:	df000117 	ldw	fp,4(sp)
     3b8:	dc000017 	ldw	r16,0(sp)
     3bc:	dec00304 	addi	sp,sp,12
     3c0:	f800283a 	ret

000003c4 <getCommand>:

void getCommand(volatile int *UART_ID) {
     3c4:	defffc04 	addi	sp,sp,-16
     3c8:	dfc00315 	stw	ra,12(sp)
     3cc:	df000215 	stw	fp,8(sp)
     3d0:	df000204 	addi	fp,sp,8
     3d4:	e13fff15 	stw	r4,-4(fp)
	memset(command, 0, strlen(command));
     3d8:	010000b4 	movhi	r4,2
     3dc:	2102e904 	addi	r4,r4,2980
     3e0:	0000c800 	call	c80 <strlen>
     3e4:	010000b4 	movhi	r4,2
     3e8:	2102e904 	addi	r4,r4,2980
     3ec:	000b883a 	mov	r5,zero
     3f0:	100d883a 	mov	r6,r2
     3f4:	00008d00 	call	8d0 <memset>
	command[0] = '\0';
     3f8:	008000b4 	movhi	r2,2
     3fc:	1082e904 	addi	r2,r2,2980
     400:	10000005 	stb	zero,0(r2)
	INT8U finished = 0;
     404:	e03ffe05 	stb	zero,-8(fp)
	INT8U characterCount = 0;
     408:	e03ffe45 	stb	zero,-7(fp)
	char currentChar = '\0';
     40c:	e03ffe85 	stb	zero,-6(fp)

	while (!finished) {
     410:	00001c06 	br	484 <getCommand+0xc0>
		currentChar = getChar(UART_ID);
     414:	e13fff17 	ldw	r4,-4(fp)
     418:	00002800 	call	280 <getChar>
     41c:	e0bffe85 	stb	r2,-6(fp)
		if (currentChar != '\0') {
     420:	e0bffe87 	ldb	r2,-6(fp)
     424:	10001626 	beq	r2,zero,480 <getCommand+0xbc>
			if ((currentChar >= 'a') || (currentChar = '/')) {
     428:	e0bffe87 	ldb	r2,-6(fp)
     42c:	10801848 	cmpgei	r2,r2,97
     430:	1000021e 	bne	r2,zero,43c <getCommand+0x78>
     434:	00800bc4 	movi	r2,47
     438:	e0bffe85 	stb	r2,-6(fp)
				if (currentChar == '/') {
     43c:	e0bffe87 	ldb	r2,-6(fp)
     440:	10800bd8 	cmpnei	r2,r2,47
     444:	1000051e 	bne	r2,zero,45c <getCommand+0x98>
					if (characterCount > 0) {
     448:	e0bffe43 	ldbu	r2,-7(fp)
     44c:	10000c26 	beq	r2,zero,480 <getCommand+0xbc>
						finished = 1;
     450:	00800044 	movi	r2,1
     454:	e0bffe05 	stb	r2,-8(fp)
     458:	00000906 	br	480 <getCommand+0xbc>
					}
				} else {
					command[characterCount] = currentChar;
     45c:	e0fffe43 	ldbu	r3,-7(fp)
     460:	008000b4 	movhi	r2,2
     464:	1082e904 	addi	r2,r2,2980
     468:	10c5883a 	add	r2,r2,r3
     46c:	e0fffe83 	ldbu	r3,-6(fp)
     470:	10c00005 	stb	r3,0(r2)
					characterCount++;
     474:	e0bffe43 	ldbu	r2,-7(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bffe45 	stb	r2,-7(fp)
				}
			}
		}
		currentChar = '\0';
     480:	e03ffe85 	stb	zero,-6(fp)
	command[0] = '\0';
	INT8U finished = 0;
	INT8U characterCount = 0;
	char currentChar = '\0';

	while (!finished) {
     484:	e0bffe03 	ldbu	r2,-8(fp)
     488:	103fe226 	beq	r2,zero,414 <__alt_mem_Flash_flash_data+0xf4000414>
				}
			}
		}
		currentChar = '\0';
	}
	command[characterCount] = '\0';
     48c:	e0fffe43 	ldbu	r3,-7(fp)
     490:	008000b4 	movhi	r2,2
     494:	1082e904 	addi	r2,r2,2980
     498:	10c5883a 	add	r2,r2,r3
     49c:	10000005 	stb	zero,0(r2)
	command[0] = command[strlen(command) - 1];
     4a0:	010000b4 	movhi	r4,2
     4a4:	2102e904 	addi	r4,r4,2980
     4a8:	0000c800 	call	c80 <strlen>
     4ac:	10ffffc4 	addi	r3,r2,-1
     4b0:	008000b4 	movhi	r2,2
     4b4:	1082e904 	addi	r2,r2,2980
     4b8:	10c5883a 	add	r2,r2,r3
     4bc:	10c00003 	ldbu	r3,0(r2)
     4c0:	008000b4 	movhi	r2,2
     4c4:	1082e904 	addi	r2,r2,2980
     4c8:	10c00005 	stb	r3,0(r2)
	command[1] = '\0';
     4cc:	008000b4 	movhi	r2,2
     4d0:	1082e904 	addi	r2,r2,2980
     4d4:	10000045 	stb	zero,1(r2)
}
     4d8:	e037883a 	mov	sp,fp
     4dc:	dfc00117 	ldw	ra,4(sp)
     4e0:	df000017 	ldw	fp,0(sp)
     4e4:	dec00204 	addi	sp,sp,8
     4e8:	f800283a 	ret

000004ec <task1>:

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata) {
     4ec:	defff604 	addi	sp,sp,-40
     4f0:	dfc00915 	stw	ra,36(sp)
     4f4:	df000815 	stw	fp,32(sp)
     4f8:	df000804 	addi	fp,sp,32
     4fc:	e13fff15 	stw	r4,-4(fp)
	INT8U characterCount = 0;
     500:	e03ff805 	stb	zero,-32(fp)
	while (1) {
		OSTimeDlyHMSM(0, 0, 3, 0);
     504:	0009883a 	mov	r4,zero
     508:	000b883a 	mov	r5,zero
     50c:	018000c4 	movi	r6,3
     510:	000f883a 	mov	r7,zero
     514:	00184240 	call	18424 <OSTimeDlyHMSM>
		volatile int uartComponent = UART_0;
     518:	00820834 	movhi	r2,2080
     51c:	10800204 	addi	r2,r2,8
     520:	e0bff915 	stw	r2,-28(fp)
//    printf("Hello from task1\n");

		printf("Send\n");
     524:	010000b4 	movhi	r4,2
     528:	21314f04 	addi	r4,r4,-15044
     52c:	0000b040 	call	b04 <puts>
		char string[20];
		sendCommand(uartComponent, "getPluggedLetter a/");
     530:	e0bff917 	ldw	r2,-28(fp)
     534:	1009883a 	mov	r4,r2
     538:	014000b4 	movhi	r5,2
     53c:	29715104 	addi	r5,r5,-15036
     540:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     544:	e0bff917 	ldw	r2,-28(fp)
     548:	1009883a 	mov	r4,r2
     54c:	00003c40 	call	3c4 <getCommand>
		printf("Na plugboard: %s\n", command);
     550:	010000b4 	movhi	r4,2
     554:	21315604 	addi	r4,r4,-15016
     558:	014000b4 	movhi	r5,2
     55c:	2942e904 	addi	r5,r5,2980
     560:	0000a200 	call	a20 <printf>

		sprintf(string, "getLetter 1%c/", command[0]);
     564:	008000b4 	movhi	r2,2
     568:	1082e904 	addi	r2,r2,2980
     56c:	10800003 	ldbu	r2,0(r2)
     570:	10803fcc 	andi	r2,r2,255
     574:	1080201c 	xori	r2,r2,128
     578:	10bfe004 	addi	r2,r2,-128
     57c:	e0fffa04 	addi	r3,fp,-24
     580:	1809883a 	mov	r4,r3
     584:	014000b4 	movhi	r5,2
     588:	29715b04 	addi	r5,r5,-14996
     58c:	100d883a 	mov	r6,r2
     590:	0000b700 	call	b70 <sprintf>
		sendCommand(uartComponent, string);
     594:	e0bff917 	ldw	r2,-28(fp)
     598:	1007883a 	mov	r3,r2
     59c:	e0bffa04 	addi	r2,fp,-24
     5a0:	1809883a 	mov	r4,r3
     5a4:	100b883a 	mov	r5,r2
     5a8:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     5ac:	e0bff917 	ldw	r2,-28(fp)
     5b0:	1009883a 	mov	r4,r2
     5b4:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor een: %s\n", command);
     5b8:	010000b4 	movhi	r4,2
     5bc:	21315f04 	addi	r4,r4,-14980
     5c0:	014000b4 	movhi	r5,2
     5c4:	2942e904 	addi	r5,r5,2980
     5c8:	0000a200 	call	a20 <printf>

		sprintf(string, "getLetter 2%c/", command[0]);
     5cc:	008000b4 	movhi	r2,2
     5d0:	1082e904 	addi	r2,r2,2980
     5d4:	10800003 	ldbu	r2,0(r2)
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	1080201c 	xori	r2,r2,128
     5e0:	10bfe004 	addi	r2,r2,-128
     5e4:	e0fffa04 	addi	r3,fp,-24
     5e8:	1809883a 	mov	r4,r3
     5ec:	014000b4 	movhi	r5,2
     5f0:	29716404 	addi	r5,r5,-14960
     5f4:	100d883a 	mov	r6,r2
     5f8:	0000b700 	call	b70 <sprintf>
		sendCommand(uartComponent, string);
     5fc:	e0bff917 	ldw	r2,-28(fp)
     600:	1007883a 	mov	r3,r2
     604:	e0bffa04 	addi	r2,fp,-24
     608:	1809883a 	mov	r4,r3
     60c:	100b883a 	mov	r5,r2
     610:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     614:	e0bff917 	ldw	r2,-28(fp)
     618:	1009883a 	mov	r4,r2
     61c:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor twee: %s\n", command);
     620:	010000b4 	movhi	r4,2
     624:	21316804 	addi	r4,r4,-14944
     628:	014000b4 	movhi	r5,2
     62c:	2942e904 	addi	r5,r5,2980
     630:	0000a200 	call	a20 <printf>

		sprintf(string, "getLetter 3%c/", command[0]);
     634:	008000b4 	movhi	r2,2
     638:	1082e904 	addi	r2,r2,2980
     63c:	10800003 	ldbu	r2,0(r2)
     640:	10803fcc 	andi	r2,r2,255
     644:	1080201c 	xori	r2,r2,128
     648:	10bfe004 	addi	r2,r2,-128
     64c:	e0fffa04 	addi	r3,fp,-24
     650:	1809883a 	mov	r4,r3
     654:	014000b4 	movhi	r5,2
     658:	29716d04 	addi	r5,r5,-14924
     65c:	100d883a 	mov	r6,r2
     660:	0000b700 	call	b70 <sprintf>
		sendCommand(uartComponent, string);
     664:	e0bff917 	ldw	r2,-28(fp)
     668:	1007883a 	mov	r3,r2
     66c:	e0bffa04 	addi	r2,fp,-24
     670:	1809883a 	mov	r4,r3
     674:	100b883a 	mov	r5,r2
     678:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     67c:	e0bff917 	ldw	r2,-28(fp)
     680:	1009883a 	mov	r4,r2
     684:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor drie: %s\n", command);
     688:	010000b4 	movhi	r4,2
     68c:	21317104 	addi	r4,r4,-14908
     690:	014000b4 	movhi	r5,2
     694:	2942e904 	addi	r5,r5,2980
     698:	0000a200 	call	a20 <printf>

		sprintf(string, "getLetter 4%c/", command[0]);
     69c:	008000b4 	movhi	r2,2
     6a0:	1082e904 	addi	r2,r2,2980
     6a4:	10800003 	ldbu	r2,0(r2)
     6a8:	10803fcc 	andi	r2,r2,255
     6ac:	1080201c 	xori	r2,r2,128
     6b0:	10bfe004 	addi	r2,r2,-128
     6b4:	e0fffa04 	addi	r3,fp,-24
     6b8:	1809883a 	mov	r4,r3
     6bc:	014000b4 	movhi	r5,2
     6c0:	29717604 	addi	r5,r5,-14888
     6c4:	100d883a 	mov	r6,r2
     6c8:	0000b700 	call	b70 <sprintf>
		sendCommand(uartComponent, string);
     6cc:	e0bff917 	ldw	r2,-28(fp)
     6d0:	1007883a 	mov	r3,r2
     6d4:	e0bffa04 	addi	r2,fp,-24
     6d8:	1809883a 	mov	r4,r3
     6dc:	100b883a 	mov	r5,r2
     6e0:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     6e4:	e0bff917 	ldw	r2,-28(fp)
     6e8:	1009883a 	mov	r4,r2
     6ec:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor vier: %s\n", command);
     6f0:	010000b4 	movhi	r4,2
     6f4:	21317a04 	addi	r4,r4,-14872
     6f8:	014000b4 	movhi	r5,2
     6fc:	2942e904 	addi	r5,r5,2980
     700:	0000a200 	call	a20 <printf>

		sprintf(string, "getReflector %c/", command[0]);
     704:	008000b4 	movhi	r2,2
     708:	1082e904 	addi	r2,r2,2980
     70c:	10800003 	ldbu	r2,0(r2)
     710:	10803fcc 	andi	r2,r2,255
     714:	1080201c 	xori	r2,r2,128
     718:	10bfe004 	addi	r2,r2,-128
     71c:	e0fffa04 	addi	r3,fp,-24
     720:	1809883a 	mov	r4,r3
     724:	014000b4 	movhi	r5,2
     728:	29717f04 	addi	r5,r5,-14852
     72c:	100d883a 	mov	r6,r2
     730:	0000b700 	call	b70 <sprintf>
		sendCommand(uartComponent, string);
     734:	e0bff917 	ldw	r2,-28(fp)
     738:	1007883a 	mov	r3,r2
     73c:	e0bffa04 	addi	r2,fp,-24
     740:	1809883a 	mov	r4,r3
     744:	100b883a 	mov	r5,r2
     748:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     74c:	e0bff917 	ldw	r2,-28(fp)
     750:	1009883a 	mov	r4,r2
     754:	00003c40 	call	3c4 <getCommand>
		printf("Na de reflector: %s\n", command);
     758:	010000b4 	movhi	r4,2
     75c:	21318404 	addi	r4,r4,-14832
     760:	014000b4 	movhi	r5,2
     764:	2942e904 	addi	r5,r5,2980
     768:	0000a200 	call	a20 <printf>

		//printf("Commando: %s\n", command);
		if (strcmp(command, "hallo") == 0) {
     76c:	010000b4 	movhi	r4,2
     770:	2102e904 	addi	r4,r4,2980
     774:	014000b4 	movhi	r5,2
     778:	29718a04 	addi	r5,r5,-14808
     77c:	0000bdc0 	call	bdc <strcmp>
     780:	1000121e 	bne	r2,zero,7cc <task1+0x2e0>
			sendCommand(uartComponent, "test/");
     784:	e0bff917 	ldw	r2,-28(fp)
     788:	1009883a 	mov	r4,r2
     78c:	014000b4 	movhi	r5,2
     790:	29718c04 	addi	r5,r5,-14800
     794:	00003440 	call	344 <sendCommand>

			memset(command, 0, strlen(command));
     798:	010000b4 	movhi	r4,2
     79c:	2102e904 	addi	r4,r4,2980
     7a0:	0000c800 	call	c80 <strlen>
     7a4:	010000b4 	movhi	r4,2
     7a8:	2102e904 	addi	r4,r4,2980
     7ac:	000b883a 	mov	r5,zero
     7b0:	100d883a 	mov	r6,r2
     7b4:	00008d00 	call	8d0 <memset>
			command[0] = '\0';
     7b8:	008000b4 	movhi	r2,2
     7bc:	1082e904 	addi	r2,r2,2980
     7c0:	10000005 	stb	zero,0(r2)
			characterCount = 0;
     7c4:	e03ff805 	stb	zero,-32(fp)
     7c8:	00000a06 	br	7f4 <task1+0x308>
		} else if (strlen(command) == 1) {
     7cc:	010000b4 	movhi	r4,2
     7d0:	2102e904 	addi	r4,r4,2980
     7d4:	0000c800 	call	c80 <strlen>
     7d8:	10800058 	cmpnei	r2,r2,1
     7dc:	1000051e 	bne	r2,zero,7f4 <task1+0x308>
			printf("Result Commando: %s\n", command);
     7e0:	010000b4 	movhi	r4,2
     7e4:	21318e04 	addi	r4,r4,-14792
     7e8:	014000b4 	movhi	r5,2
     7ec:	2942e904 	addi	r5,r5,2980
     7f0:	0000a200 	call	a20 <printf>
		}

	}
     7f4:	003f4306 	br	504 <__alt_mem_Flash_flash_data+0xf4000504>

000007f8 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata) {
     7f8:	defffd04 	addi	sp,sp,-12
     7fc:	dfc00215 	stw	ra,8(sp)
     800:	df000115 	stw	fp,4(sp)
     804:	df000104 	addi	fp,sp,4
     808:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		//printf("Hello from task2\n");
		OSTimeDlyHMSM(0, 0, 3, 0);
     80c:	0009883a 	mov	r4,zero
     810:	000b883a 	mov	r5,zero
     814:	018000c4 	movi	r6,3
     818:	000f883a 	mov	r7,zero
     81c:	00184240 	call	18424 <OSTimeDlyHMSM>
	}
     820:	003ffa06 	br	80c <__alt_mem_Flash_flash_data+0xf400080c>

00000824 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void) {
     824:	defff904 	addi	sp,sp,-28
     828:	dfc00615 	stw	ra,24(sp)
     82c:	df000515 	stw	fp,20(sp)
     830:	df000504 	addi	fp,sp,20

	OSTaskCreateExt(task1,
     834:	00800044 	movi	r2,1
     838:	d8800015 	stw	r2,0(sp)
     83c:	008000b4 	movhi	r2,2
     840:	1082fd04 	addi	r2,r2,3060
     844:	d8800115 	stw	r2,4(sp)
     848:	00820004 	movi	r2,2048
     84c:	d8800215 	stw	r2,8(sp)
     850:	d8000315 	stw	zero,12(sp)
     854:	d8000415 	stw	zero,16(sp)
     858:	01000034 	movhi	r4,0
     85c:	21013b04 	addi	r4,r4,1260
     860:	000b883a 	mov	r5,zero
     864:	018000b4 	movhi	r6,2
     868:	318afc04 	addi	r6,r6,11248
     86c:	01c00044 	movi	r7,1
     870:	00170e40 	call	170e4 <OSTaskCreateExt>
	TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSTaskCreateExt(task2,
     874:	00800084 	movi	r2,2
     878:	d8800015 	stw	r2,0(sp)
     87c:	008000b4 	movhi	r2,2
     880:	108afd04 	addi	r2,r2,11252
     884:	d8800115 	stw	r2,4(sp)
     888:	00820004 	movi	r2,2048
     88c:	d8800215 	stw	r2,8(sp)
     890:	d8000315 	stw	zero,12(sp)
     894:	d8000415 	stw	zero,16(sp)
     898:	01000034 	movhi	r4,0
     89c:	2101fe04 	addi	r4,r4,2040
     8a0:	000b883a 	mov	r5,zero
     8a4:	018000b4 	movhi	r6,2
     8a8:	3192fc04 	addi	r6,r6,19440
     8ac:	01c00084 	movi	r7,2
     8b0:	00170e40 	call	170e4 <OSTaskCreateExt>
	NULL, (void *) &task2_stk[TASK_STACKSIZE - 1],
	TASK2_PRIORITY,
	TASK2_PRIORITY, task2_stk,
	TASK_STACKSIZE,
	NULL, 0);
	OSStart();
     8b4:	00117440 	call	11744 <OSStart>
	return 0;
     8b8:	0005883a 	mov	r2,zero
}
     8bc:	e037883a 	mov	sp,fp
     8c0:	dfc00117 	ldw	ra,4(sp)
     8c4:	df000017 	ldw	fp,0(sp)
     8c8:	dec00204 	addi	sp,sp,8
     8cc:	f800283a 	ret

000008d0 <memset>:
     8d0:	20c000cc 	andi	r3,r4,3
     8d4:	2005883a 	mov	r2,r4
     8d8:	18004326 	beq	r3,zero,9e8 <memset+0x118>
     8dc:	31ffffc4 	addi	r7,r6,-1
     8e0:	30004026 	beq	r6,zero,9e4 <memset+0x114>
     8e4:	2813883a 	mov	r9,r5
     8e8:	200d883a 	mov	r6,r4
     8ec:	2007883a 	mov	r3,r4
     8f0:	00000406 	br	904 <memset+0x34>
     8f4:	3a3fffc4 	addi	r8,r7,-1
     8f8:	31800044 	addi	r6,r6,1
     8fc:	38003926 	beq	r7,zero,9e4 <memset+0x114>
     900:	400f883a 	mov	r7,r8
     904:	18c00044 	addi	r3,r3,1
     908:	32400005 	stb	r9,0(r6)
     90c:	1a0000cc 	andi	r8,r3,3
     910:	403ff81e 	bne	r8,zero,8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
     914:	010000c4 	movi	r4,3
     918:	21c02d2e 	bgeu	r4,r7,9d0 <memset+0x100>
     91c:	29803fcc 	andi	r6,r5,255
     920:	3008923a 	slli	r4,r6,8
     924:	218cb03a 	or	r6,r4,r6
     928:	3008943a 	slli	r4,r6,16
     92c:	218cb03a 	or	r6,r4,r6
     930:	010003c4 	movi	r4,15
     934:	21c0182e 	bgeu	r4,r7,998 <memset+0xc8>
     938:	3b3ffc04 	addi	r12,r7,-16
     93c:	6018d13a 	srli	r12,r12,4
     940:	1a000104 	addi	r8,r3,4
     944:	1ac00204 	addi	r11,r3,8
     948:	6008913a 	slli	r4,r12,4
     94c:	1a800304 	addi	r10,r3,12
     950:	1813883a 	mov	r9,r3
     954:	21000504 	addi	r4,r4,20
     958:	1909883a 	add	r4,r3,r4
     95c:	49800015 	stw	r6,0(r9)
     960:	41800015 	stw	r6,0(r8)
     964:	59800015 	stw	r6,0(r11)
     968:	51800015 	stw	r6,0(r10)
     96c:	42000404 	addi	r8,r8,16
     970:	4a400404 	addi	r9,r9,16
     974:	5ac00404 	addi	r11,r11,16
     978:	52800404 	addi	r10,r10,16
     97c:	413ff71e 	bne	r8,r4,95c <__alt_mem_Flash_flash_data+0xf400095c>
     980:	63000044 	addi	r12,r12,1
     984:	6018913a 	slli	r12,r12,4
     988:	39c003cc 	andi	r7,r7,15
     98c:	010000c4 	movi	r4,3
     990:	1b07883a 	add	r3,r3,r12
     994:	21c00e2e 	bgeu	r4,r7,9d0 <memset+0x100>
     998:	1813883a 	mov	r9,r3
     99c:	3811883a 	mov	r8,r7
     9a0:	010000c4 	movi	r4,3
     9a4:	49800015 	stw	r6,0(r9)
     9a8:	423fff04 	addi	r8,r8,-4
     9ac:	4a400104 	addi	r9,r9,4
     9b0:	223ffc36 	bltu	r4,r8,9a4 <__alt_mem_Flash_flash_data+0xf40009a4>
     9b4:	393fff04 	addi	r4,r7,-4
     9b8:	2008d0ba 	srli	r4,r4,2
     9bc:	39c000cc 	andi	r7,r7,3
     9c0:	21000044 	addi	r4,r4,1
     9c4:	2109883a 	add	r4,r4,r4
     9c8:	2109883a 	add	r4,r4,r4
     9cc:	1907883a 	add	r3,r3,r4
     9d0:	38000426 	beq	r7,zero,9e4 <memset+0x114>
     9d4:	19cf883a 	add	r7,r3,r7
     9d8:	19400005 	stb	r5,0(r3)
     9dc:	18c00044 	addi	r3,r3,1
     9e0:	19fffd1e 	bne	r3,r7,9d8 <__alt_mem_Flash_flash_data+0xf40009d8>
     9e4:	f800283a 	ret
     9e8:	2007883a 	mov	r3,r4
     9ec:	300f883a 	mov	r7,r6
     9f0:	003fc806 	br	914 <__alt_mem_Flash_flash_data+0xf4000914>

000009f4 <_printf_r>:
     9f4:	defffd04 	addi	sp,sp,-12
     9f8:	dfc00015 	stw	ra,0(sp)
     9fc:	d9800115 	stw	r6,4(sp)
     a00:	d9c00215 	stw	r7,8(sp)
     a04:	280d883a 	mov	r6,r5
     a08:	21400217 	ldw	r5,8(r4)
     a0c:	d9c00104 	addi	r7,sp,4
     a10:	0002ca80 	call	2ca8 <___vfprintf_internal_r>
     a14:	dfc00017 	ldw	ra,0(sp)
     a18:	dec00304 	addi	sp,sp,12
     a1c:	f800283a 	ret

00000a20 <printf>:
     a20:	defffc04 	addi	sp,sp,-16
     a24:	dfc00015 	stw	ra,0(sp)
     a28:	d9400115 	stw	r5,4(sp)
     a2c:	d9800215 	stw	r6,8(sp)
     a30:	d9c00315 	stw	r7,12(sp)
     a34:	008000b4 	movhi	r2,2
     a38:	10bac004 	addi	r2,r2,-5376
     a3c:	10800017 	ldw	r2,0(r2)
     a40:	200b883a 	mov	r5,r4
     a44:	d9800104 	addi	r6,sp,4
     a48:	11000217 	ldw	r4,8(r2)
     a4c:	0004bf80 	call	4bf8 <__vfprintf_internal>
     a50:	dfc00017 	ldw	ra,0(sp)
     a54:	dec00404 	addi	sp,sp,16
     a58:	f800283a 	ret

00000a5c <_puts_r>:
     a5c:	defff604 	addi	sp,sp,-40
     a60:	dc000715 	stw	r16,28(sp)
     a64:	2021883a 	mov	r16,r4
     a68:	2809883a 	mov	r4,r5
     a6c:	dc400815 	stw	r17,32(sp)
     a70:	dfc00915 	stw	ra,36(sp)
     a74:	2823883a 	mov	r17,r5
     a78:	0000c800 	call	c80 <strlen>
     a7c:	81400217 	ldw	r5,8(r16)
     a80:	11000044 	addi	r4,r2,1
     a84:	d8800115 	stw	r2,4(sp)
     a88:	008000b4 	movhi	r2,2
     a8c:	2980030b 	ldhu	r6,12(r5)
     a90:	10b19404 	addi	r2,r2,-14768
     a94:	d8800215 	stw	r2,8(sp)
     a98:	00800044 	movi	r2,1
     a9c:	d8800315 	stw	r2,12(sp)
     aa0:	00800084 	movi	r2,2
     aa4:	d8800515 	stw	r2,20(sp)
     aa8:	dc400015 	stw	r17,0(sp)
     aac:	d9000615 	stw	r4,24(sp)
     ab0:	dec00415 	stw	sp,16(sp)
     ab4:	3088000c 	andi	r2,r6,8192
     ab8:	1000061e 	bne	r2,zero,ad4 <_puts_r+0x78>
     abc:	29001917 	ldw	r4,100(r5)
     ac0:	00b7ffc4 	movi	r2,-8193
     ac4:	31880014 	ori	r6,r6,8192
     ac8:	2084703a 	and	r2,r4,r2
     acc:	2980030d 	sth	r6,12(r5)
     ad0:	28801915 	stw	r2,100(r5)
     ad4:	8009883a 	mov	r4,r16
     ad8:	d9800404 	addi	r6,sp,16
     adc:	000719c0 	call	719c <__sfvwrite_r>
     ae0:	1000061e 	bne	r2,zero,afc <_puts_r+0xa0>
     ae4:	00800284 	movi	r2,10
     ae8:	dfc00917 	ldw	ra,36(sp)
     aec:	dc400817 	ldw	r17,32(sp)
     af0:	dc000717 	ldw	r16,28(sp)
     af4:	dec00a04 	addi	sp,sp,40
     af8:	f800283a 	ret
     afc:	00bfffc4 	movi	r2,-1
     b00:	003ff906 	br	ae8 <__alt_mem_Flash_flash_data+0xf4000ae8>

00000b04 <puts>:
     b04:	008000b4 	movhi	r2,2
     b08:	10bac004 	addi	r2,r2,-5376
     b0c:	200b883a 	mov	r5,r4
     b10:	11000017 	ldw	r4,0(r2)
     b14:	0000a5c1 	jmpi	a5c <_puts_r>

00000b18 <_sprintf_r>:
     b18:	deffe404 	addi	sp,sp,-112
     b1c:	2807883a 	mov	r3,r5
     b20:	dfc01a15 	stw	ra,104(sp)
     b24:	d9c01b15 	stw	r7,108(sp)
     b28:	00a00034 	movhi	r2,32768
     b2c:	10bfffc4 	addi	r2,r2,-1
     b30:	02008204 	movi	r8,520
     b34:	d8800215 	stw	r2,8(sp)
     b38:	d8800515 	stw	r2,20(sp)
     b3c:	d80b883a 	mov	r5,sp
     b40:	d9c01b04 	addi	r7,sp,108
     b44:	00bfffc4 	movi	r2,-1
     b48:	d8c00015 	stw	r3,0(sp)
     b4c:	d8c00415 	stw	r3,16(sp)
     b50:	da00030d 	sth	r8,12(sp)
     b54:	d880038d 	sth	r2,14(sp)
     b58:	0000d180 	call	d18 <___svfprintf_internal_r>
     b5c:	d8c00017 	ldw	r3,0(sp)
     b60:	18000005 	stb	zero,0(r3)
     b64:	dfc01a17 	ldw	ra,104(sp)
     b68:	dec01c04 	addi	sp,sp,112
     b6c:	f800283a 	ret

00000b70 <sprintf>:
     b70:	deffe304 	addi	sp,sp,-116
     b74:	2007883a 	mov	r3,r4
     b78:	dfc01a15 	stw	ra,104(sp)
     b7c:	d9801b15 	stw	r6,108(sp)
     b80:	d9c01c15 	stw	r7,112(sp)
     b84:	010000b4 	movhi	r4,2
     b88:	213ac004 	addi	r4,r4,-5376
     b8c:	21000017 	ldw	r4,0(r4)
     b90:	00a00034 	movhi	r2,32768
     b94:	10bfffc4 	addi	r2,r2,-1
     b98:	280d883a 	mov	r6,r5
     b9c:	02008204 	movi	r8,520
     ba0:	d8800215 	stw	r2,8(sp)
     ba4:	d8800515 	stw	r2,20(sp)
     ba8:	d80b883a 	mov	r5,sp
     bac:	d9c01b04 	addi	r7,sp,108
     bb0:	00bfffc4 	movi	r2,-1
     bb4:	d8c00015 	stw	r3,0(sp)
     bb8:	d8c00415 	stw	r3,16(sp)
     bbc:	da00030d 	sth	r8,12(sp)
     bc0:	d880038d 	sth	r2,14(sp)
     bc4:	0000d180 	call	d18 <___svfprintf_internal_r>
     bc8:	d8c00017 	ldw	r3,0(sp)
     bcc:	18000005 	stb	zero,0(r3)
     bd0:	dfc01a17 	ldw	ra,104(sp)
     bd4:	dec01d04 	addi	sp,sp,116
     bd8:	f800283a 	ret

00000bdc <strcmp>:
     bdc:	2144b03a 	or	r2,r4,r5
     be0:	108000cc 	andi	r2,r2,3
     be4:	1000171e 	bne	r2,zero,c44 <strcmp+0x68>
     be8:	20800017 	ldw	r2,0(r4)
     bec:	28c00017 	ldw	r3,0(r5)
     bf0:	10c0141e 	bne	r2,r3,c44 <strcmp+0x68>
     bf4:	027fbff4 	movhi	r9,65279
     bf8:	4a7fbfc4 	addi	r9,r9,-257
     bfc:	0086303a 	nor	r3,zero,r2
     c00:	02202074 	movhi	r8,32897
     c04:	1245883a 	add	r2,r2,r9
     c08:	42202004 	addi	r8,r8,-32640
     c0c:	10c4703a 	and	r2,r2,r3
     c10:	1204703a 	and	r2,r2,r8
     c14:	10000226 	beq	r2,zero,c20 <strcmp+0x44>
     c18:	00001706 	br	c78 <strcmp+0x9c>
     c1c:	1000161e 	bne	r2,zero,c78 <strcmp+0x9c>
     c20:	21000104 	addi	r4,r4,4
     c24:	20c00017 	ldw	r3,0(r4)
     c28:	29400104 	addi	r5,r5,4
     c2c:	29800017 	ldw	r6,0(r5)
     c30:	1a4f883a 	add	r7,r3,r9
     c34:	00c4303a 	nor	r2,zero,r3
     c38:	3884703a 	and	r2,r7,r2
     c3c:	1204703a 	and	r2,r2,r8
     c40:	19bff626 	beq	r3,r6,c1c <__alt_mem_Flash_flash_data+0xf4000c1c>
     c44:	20800007 	ldb	r2,0(r4)
     c48:	1000051e 	bne	r2,zero,c60 <strcmp+0x84>
     c4c:	00000606 	br	c68 <strcmp+0x8c>
     c50:	21000044 	addi	r4,r4,1
     c54:	20800007 	ldb	r2,0(r4)
     c58:	29400044 	addi	r5,r5,1
     c5c:	10000226 	beq	r2,zero,c68 <strcmp+0x8c>
     c60:	28c00007 	ldb	r3,0(r5)
     c64:	10fffa26 	beq	r2,r3,c50 <__alt_mem_Flash_flash_data+0xf4000c50>
     c68:	20800003 	ldbu	r2,0(r4)
     c6c:	28c00003 	ldbu	r3,0(r5)
     c70:	10c5c83a 	sub	r2,r2,r3
     c74:	f800283a 	ret
     c78:	0005883a 	mov	r2,zero
     c7c:	f800283a 	ret

00000c80 <strlen>:
     c80:	208000cc 	andi	r2,r4,3
     c84:	10002026 	beq	r2,zero,d08 <strlen+0x88>
     c88:	20800007 	ldb	r2,0(r4)
     c8c:	10002026 	beq	r2,zero,d10 <strlen+0x90>
     c90:	2005883a 	mov	r2,r4
     c94:	00000206 	br	ca0 <strlen+0x20>
     c98:	10c00007 	ldb	r3,0(r2)
     c9c:	18001826 	beq	r3,zero,d00 <strlen+0x80>
     ca0:	10800044 	addi	r2,r2,1
     ca4:	10c000cc 	andi	r3,r2,3
     ca8:	183ffb1e 	bne	r3,zero,c98 <__alt_mem_Flash_flash_data+0xf4000c98>
     cac:	10c00017 	ldw	r3,0(r2)
     cb0:	01ffbff4 	movhi	r7,65279
     cb4:	39ffbfc4 	addi	r7,r7,-257
     cb8:	00ca303a 	nor	r5,zero,r3
     cbc:	01a02074 	movhi	r6,32897
     cc0:	19c7883a 	add	r3,r3,r7
     cc4:	31a02004 	addi	r6,r6,-32640
     cc8:	1946703a 	and	r3,r3,r5
     ccc:	1986703a 	and	r3,r3,r6
     cd0:	1800091e 	bne	r3,zero,cf8 <strlen+0x78>
     cd4:	10800104 	addi	r2,r2,4
     cd8:	10c00017 	ldw	r3,0(r2)
     cdc:	19cb883a 	add	r5,r3,r7
     ce0:	00c6303a 	nor	r3,zero,r3
     ce4:	28c6703a 	and	r3,r5,r3
     ce8:	1986703a 	and	r3,r3,r6
     cec:	183ff926 	beq	r3,zero,cd4 <__alt_mem_Flash_flash_data+0xf4000cd4>
     cf0:	00000106 	br	cf8 <strlen+0x78>
     cf4:	10800044 	addi	r2,r2,1
     cf8:	10c00007 	ldb	r3,0(r2)
     cfc:	183ffd1e 	bne	r3,zero,cf4 <__alt_mem_Flash_flash_data+0xf4000cf4>
     d00:	1105c83a 	sub	r2,r2,r4
     d04:	f800283a 	ret
     d08:	2005883a 	mov	r2,r4
     d0c:	003fe706 	br	cac <__alt_mem_Flash_flash_data+0xf4000cac>
     d10:	0005883a 	mov	r2,zero
     d14:	f800283a 	ret

00000d18 <___svfprintf_internal_r>:
     d18:	deffb504 	addi	sp,sp,-300
     d1c:	dfc04a15 	stw	ra,296(sp)
     d20:	ddc04815 	stw	r23,288(sp)
     d24:	d9002f15 	stw	r4,188(sp)
     d28:	282f883a 	mov	r23,r5
     d2c:	d9802915 	stw	r6,164(sp)
     d30:	d9c02d15 	stw	r7,180(sp)
     d34:	df004915 	stw	fp,292(sp)
     d38:	dd804715 	stw	r22,284(sp)
     d3c:	dd404615 	stw	r21,280(sp)
     d40:	dd004515 	stw	r20,276(sp)
     d44:	dcc04415 	stw	r19,272(sp)
     d48:	dc804315 	stw	r18,268(sp)
     d4c:	dc404215 	stw	r17,264(sp)
     d50:	dc004115 	stw	r16,260(sp)
     d54:	00078900 	call	7890 <_localeconv_r>
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	1009883a 	mov	r4,r2
     d60:	d8803515 	stw	r2,212(sp)
     d64:	0000c800 	call	c80 <strlen>
     d68:	d8803915 	stw	r2,228(sp)
     d6c:	b880030b 	ldhu	r2,12(r23)
     d70:	1080200c 	andi	r2,r2,128
     d74:	10000226 	beq	r2,zero,d80 <___svfprintf_internal_r+0x68>
     d78:	b8800417 	ldw	r2,16(r23)
     d7c:	10065f26 	beq	r2,zero,26fc <___svfprintf_internal_r+0x19e4>
     d80:	db001dc4 	addi	r12,sp,119
     d84:	dd801e04 	addi	r22,sp,120
     d88:	d8800404 	addi	r2,sp,16
     d8c:	050000b4 	movhi	r20,2
     d90:	b317c83a 	sub	r11,r22,r12
     d94:	a531a584 	addi	r20,r20,-14698
     d98:	db002815 	stw	r12,160(sp)
     d9c:	d8801e15 	stw	r2,120(sp)
     da0:	d8002015 	stw	zero,128(sp)
     da4:	d8001f15 	stw	zero,124(sp)
     da8:	d8003315 	stw	zero,204(sp)
     dac:	d8003715 	stw	zero,220(sp)
     db0:	d8003815 	stw	zero,224(sp)
     db4:	1011883a 	mov	r8,r2
     db8:	d8003b15 	stw	zero,236(sp)
     dbc:	d8003a15 	stw	zero,232(sp)
     dc0:	d8003015 	stw	zero,192(sp)
     dc4:	dac03d15 	stw	r11,244(sp)
     dc8:	db002917 	ldw	r12,164(sp)
     dcc:	60800007 	ldb	r2,0(r12)
     dd0:	1000ab26 	beq	r2,zero,1080 <___svfprintf_internal_r+0x368>
     dd4:	00c00944 	movi	r3,37
     dd8:	10c0a926 	beq	r2,r3,1080 <___svfprintf_internal_r+0x368>
     ddc:	6021883a 	mov	r16,r12
     de0:	00000106 	br	de8 <___svfprintf_internal_r+0xd0>
     de4:	10c08426 	beq	r2,r3,ff8 <___svfprintf_internal_r+0x2e0>
     de8:	84000044 	addi	r16,r16,1
     dec:	80800007 	ldb	r2,0(r16)
     df0:	103ffc1e 	bne	r2,zero,de4 <__alt_mem_Flash_flash_data+0xf4000de4>
     df4:	dac02917 	ldw	r11,164(sp)
     df8:	82e3c83a 	sub	r17,r16,r11
     dfc:	88000f26 	beq	r17,zero,e3c <___svfprintf_internal_r+0x124>
     e00:	d8c02017 	ldw	r3,128(sp)
     e04:	d8801f17 	ldw	r2,124(sp)
     e08:	dac02917 	ldw	r11,164(sp)
     e0c:	1c47883a 	add	r3,r3,r17
     e10:	10800044 	addi	r2,r2,1
     e14:	d8c02015 	stw	r3,128(sp)
     e18:	42c00015 	stw	r11,0(r8)
     e1c:	44400115 	stw	r17,4(r8)
     e20:	d8801f15 	stw	r2,124(sp)
     e24:	00c001c4 	movi	r3,7
     e28:	18807616 	blt	r3,r2,1004 <___svfprintf_internal_r+0x2ec>
     e2c:	42000204 	addi	r8,r8,8
     e30:	db003017 	ldw	r12,192(sp)
     e34:	6459883a 	add	r12,r12,r17
     e38:	db003015 	stw	r12,192(sp)
     e3c:	80800007 	ldb	r2,0(r16)
     e40:	10007726 	beq	r2,zero,1020 <___svfprintf_internal_r+0x308>
     e44:	80800044 	addi	r2,r16,1
     e48:	84000047 	ldb	r16,1(r16)
     e4c:	d8002785 	stb	zero,158(sp)
     e50:	000d883a 	mov	r6,zero
     e54:	027fffc4 	movi	r9,-1
     e58:	d8002e15 	stw	zero,184(sp)
     e5c:	0023883a 	mov	r17,zero
     e60:	01001604 	movi	r4,88
     e64:	01400244 	movi	r5,9
     e68:	02800a84 	movi	r10,42
     e6c:	01c01b04 	movi	r7,108
     e70:	10c00044 	addi	r3,r2,1
     e74:	80bff804 	addi	r2,r16,-32
     e78:	2082e636 	bltu	r4,r2,1a14 <___svfprintf_internal_r+0xcfc>
     e7c:	100490ba 	slli	r2,r2,2
     e80:	02c00034 	movhi	r11,0
     e84:	5ac3a504 	addi	r11,r11,3732
     e88:	12c5883a 	add	r2,r2,r11
     e8c:	10800017 	ldw	r2,0(r2)
     e90:	1000683a 	jmp	r2
     e94:	000017f4 	movhi	zero,95
     e98:	00001a14 	movui	zero,104
     e9c:	00001a14 	movui	zero,104
     ea0:	00001814 	movui	zero,96
     ea4:	00001a14 	movui	zero,104
     ea8:	00001a14 	movui	zero,104
     eac:	00001a14 	movui	zero,104
     eb0:	00001a14 	movui	zero,104
     eb4:	00001a14 	movui	zero,104
     eb8:	00001a14 	movui	zero,104
     ebc:	00001824 	muli	zero,zero,96
     ec0:	00001850 	cmplti	zero,zero,97
     ec4:	00001a14 	movui	zero,104
     ec8:	00001088 	cmpgei	zero,zero,66
     ecc:	00001098 	cmpnei	zero,zero,66
     ed0:	00001a14 	movui	zero,104
     ed4:	000010d8 	cmpnei	zero,zero,67
     ed8:	000016b8 	rdprs	zero,zero,90
     edc:	000016b8 	rdprs	zero,zero,90
     ee0:	000016b8 	rdprs	zero,zero,90
     ee4:	000016b8 	rdprs	zero,zero,90
     ee8:	000016b8 	rdprs	zero,zero,90
     eec:	000016b8 	rdprs	zero,zero,90
     ef0:	000016b8 	rdprs	zero,zero,90
     ef4:	000016b8 	rdprs	zero,zero,90
     ef8:	000016b8 	rdprs	zero,zero,90
     efc:	00001a14 	movui	zero,104
     f00:	00001a14 	movui	zero,104
     f04:	00001a14 	movui	zero,104
     f08:	00001a14 	movui	zero,104
     f0c:	00001a14 	movui	zero,104
     f10:	00001a14 	movui	zero,104
     f14:	00001a14 	movui	zero,104
     f18:	00001a14 	movui	zero,104
     f1c:	00001a14 	movui	zero,104
     f20:	00001a14 	movui	zero,104
     f24:	000010e8 	cmpgeui	zero,zero,67
     f28:	00001568 	cmpgeui	zero,zero,85
     f2c:	00001a14 	movui	zero,104
     f30:	00001568 	cmpgeui	zero,zero,85
     f34:	00001a14 	movui	zero,104
     f38:	00001a14 	movui	zero,104
     f3c:	00001a14 	movui	zero,104
     f40:	00001a14 	movui	zero,104
     f44:	0000160c 	andi	zero,zero,88
     f48:	00001a14 	movui	zero,104
     f4c:	00001a14 	movui	zero,104
     f50:	000019a8 	cmpgeui	zero,zero,102
     f54:	00001a14 	movui	zero,104
     f58:	00001a14 	movui	zero,104
     f5c:	00001a14 	movui	zero,104
     f60:	00001a14 	movui	zero,104
     f64:	00001a14 	movui	zero,104
     f68:	0000161c 	xori	zero,zero,88
     f6c:	00001a14 	movui	zero,104
     f70:	00001a14 	movui	zero,104
     f74:	0000165c 	xori	zero,zero,89
     f78:	00001a14 	movui	zero,104
     f7c:	00001a14 	movui	zero,104
     f80:	00001a14 	movui	zero,104
     f84:	00001a14 	movui	zero,104
     f88:	00001a14 	movui	zero,104
     f8c:	00001a14 	movui	zero,104
     f90:	00001a14 	movui	zero,104
     f94:	00001a14 	movui	zero,104
     f98:	00001a14 	movui	zero,104
     f9c:	00001a14 	movui	zero,104
     fa0:	00001900 	call	190 <alt_irq_handler+0x94>
     fa4:	00001940 	call	194 <alt_irq_handler+0x98>
     fa8:	00001568 	cmpgeui	zero,zero,85
     fac:	00001568 	cmpgeui	zero,zero,85
     fb0:	00001568 	cmpgeui	zero,zero,85
     fb4:	00001860 	cmpeqi	zero,zero,97
     fb8:	00001940 	call	194 <alt_irq_handler+0x98>
     fbc:	00001a14 	movui	zero,104
     fc0:	00001a14 	movui	zero,104
     fc4:	00001870 	cmpltui	zero,zero,97
     fc8:	00001a14 	movui	zero,104
     fcc:	00001884 	movi	zero,98
     fd0:	000019d8 	cmpnei	zero,zero,103
     fd4:	000018b8 	rdprs	zero,zero,98
     fd8:	000016ec 	andhi	zero,zero,91
     fdc:	00001a14 	movui	zero,104
     fe0:	000016fc 	xorhi	zero,zero,91
     fe4:	00001a14 	movui	zero,104
     fe8:	00001774 	movhi	zero,93
     fec:	00001a14 	movui	zero,104
     ff0:	00001a14 	movui	zero,104
     ff4:	000017b4 	movhi	zero,94
     ff8:	db002917 	ldw	r12,164(sp)
     ffc:	8323c83a 	sub	r17,r16,r12
    1000:	003f7e06 	br	dfc <__alt_mem_Flash_flash_data+0xf4000dfc>
    1004:	d9002f17 	ldw	r4,188(sp)
    1008:	b80b883a 	mov	r5,r23
    100c:	b00d883a 	mov	r6,r22
    1010:	0009cac0 	call	9cac <__ssprint_r>
    1014:	1000081e 	bne	r2,zero,1038 <___svfprintf_internal_r+0x320>
    1018:	da000404 	addi	r8,sp,16
    101c:	003f8406 	br	e30 <__alt_mem_Flash_flash_data+0xf4000e30>
    1020:	d8802017 	ldw	r2,128(sp)
    1024:	10000426 	beq	r2,zero,1038 <___svfprintf_internal_r+0x320>
    1028:	d9002f17 	ldw	r4,188(sp)
    102c:	b80b883a 	mov	r5,r23
    1030:	d9801e04 	addi	r6,sp,120
    1034:	0009cac0 	call	9cac <__ssprint_r>
    1038:	b880030b 	ldhu	r2,12(r23)
    103c:	1080100c 	andi	r2,r2,64
    1040:	10000d1e 	bne	r2,zero,1078 <___svfprintf_internal_r+0x360>
    1044:	d8803017 	ldw	r2,192(sp)
    1048:	dfc04a17 	ldw	ra,296(sp)
    104c:	df004917 	ldw	fp,292(sp)
    1050:	ddc04817 	ldw	r23,288(sp)
    1054:	dd804717 	ldw	r22,284(sp)
    1058:	dd404617 	ldw	r21,280(sp)
    105c:	dd004517 	ldw	r20,276(sp)
    1060:	dcc04417 	ldw	r19,272(sp)
    1064:	dc804317 	ldw	r18,268(sp)
    1068:	dc404217 	ldw	r17,264(sp)
    106c:	dc004117 	ldw	r16,260(sp)
    1070:	dec04b04 	addi	sp,sp,300
    1074:	f800283a 	ret
    1078:	00bfffc4 	movi	r2,-1
    107c:	003ff206 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1080:	dc002917 	ldw	r16,164(sp)
    1084:	003f6d06 	br	e3c <__alt_mem_Flash_flash_data+0xf4000e3c>
    1088:	1805883a 	mov	r2,r3
    108c:	8c400114 	ori	r17,r17,4
    1090:	1c000007 	ldb	r16,0(r3)
    1094:	003f7606 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1098:	1c000007 	ldb	r16,0(r3)
    109c:	18800044 	addi	r2,r3,1
    10a0:	8286e726 	beq	r16,r10,2c40 <___svfprintf_internal_r+0x1f28>
    10a4:	82fff404 	addi	r11,r16,-48
    10a8:	1007883a 	mov	r3,r2
    10ac:	0013883a 	mov	r9,zero
    10b0:	2aff7036 	bltu	r5,r11,e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    10b4:	1c000007 	ldb	r16,0(r3)
    10b8:	4a4002a4 	muli	r9,r9,10
    10bc:	18c00044 	addi	r3,r3,1
    10c0:	5a53883a 	add	r9,r11,r9
    10c4:	82fff404 	addi	r11,r16,-48
    10c8:	2afffa2e 	bgeu	r5,r11,10b4 <__alt_mem_Flash_flash_data+0xf40010b4>
    10cc:	483f690e 	bge	r9,zero,e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    10d0:	027fffc4 	movi	r9,-1
    10d4:	003f6706 	br	e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    10d8:	8c402014 	ori	r17,r17,128
    10dc:	1805883a 	mov	r2,r3
    10e0:	1c000007 	ldb	r16,0(r3)
    10e4:	003f6206 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    10e8:	8c400414 	ori	r17,r17,16
    10ec:	d8c02915 	stw	r3,164(sp)
    10f0:	d9802785 	stb	r6,158(sp)
    10f4:	8880080c 	andi	r2,r17,32
    10f8:	d8c02d17 	ldw	r3,180(sp)
    10fc:	10021526 	beq	r2,zero,1954 <___svfprintf_internal_r+0xc3c>
    1100:	db002d17 	ldw	r12,180(sp)
    1104:	18800117 	ldw	r2,4(r3)
    1108:	1cc00017 	ldw	r19,0(r3)
    110c:	63000204 	addi	r12,r12,8
    1110:	db002d15 	stw	r12,180(sp)
    1114:	1039883a 	mov	fp,r2
    1118:	10021916 	blt	r2,zero,1980 <___svfprintf_internal_r+0xc68>
    111c:	dd402783 	ldbu	r21,158(sp)
    1120:	da403215 	stw	r9,200(sp)
    1124:	00800044 	movi	r2,1
    1128:	9f06b03a 	or	r3,r19,fp
    112c:	48000216 	blt	r9,zero,1138 <___svfprintf_internal_r+0x420>
    1130:	013fdfc4 	movi	r4,-129
    1134:	8922703a 	and	r17,r17,r4
    1138:	1802461e 	bne	r3,zero,1a54 <___svfprintf_internal_r+0xd3c>
    113c:	48035426 	beq	r9,zero,1e90 <___svfprintf_internal_r+0x1178>
    1140:	10803fcc 	andi	r2,r2,255
    1144:	00c00044 	movi	r3,1
    1148:	10c26726 	beq	r2,r3,1ae8 <___svfprintf_internal_r+0xdd0>
    114c:	00c00084 	movi	r3,2
    1150:	10c2ea26 	beq	r2,r3,1cfc <___svfprintf_internal_r+0xfe4>
    1154:	b007883a 	mov	r3,r22
    1158:	9808d0fa 	srli	r4,r19,3
    115c:	e00a977a 	slli	r5,fp,29
    1160:	e038d0fa 	srli	fp,fp,3
    1164:	9cc001cc 	andi	r19,r19,7
    1168:	98800c04 	addi	r2,r19,48
    116c:	18ffffc4 	addi	r3,r3,-1
    1170:	2926b03a 	or	r19,r5,r4
    1174:	18800005 	stb	r2,0(r3)
    1178:	9f08b03a 	or	r4,r19,fp
    117c:	203ff61e 	bne	r4,zero,1158 <__alt_mem_Flash_flash_data+0xf4001158>
    1180:	8900004c 	andi	r4,r17,1
    1184:	d8c03115 	stw	r3,196(sp)
    1188:	2002ea26 	beq	r4,zero,1d34 <___svfprintf_internal_r+0x101c>
    118c:	10803fcc 	andi	r2,r2,255
    1190:	1080201c 	xori	r2,r2,128
    1194:	10bfe004 	addi	r2,r2,-128
    1198:	01000c04 	movi	r4,48
    119c:	11057526 	beq	r2,r4,2774 <___svfprintf_internal_r+0x1a5c>
    11a0:	dac03117 	ldw	r11,196(sp)
    11a4:	193fffc5 	stb	r4,-1(r3)
    11a8:	5affffc4 	addi	r11,r11,-1
    11ac:	dac03115 	stw	r11,196(sp)
    11b0:	b2e5c83a 	sub	r18,r22,r11
    11b4:	9005883a 	mov	r2,r18
    11b8:	9240010e 	bge	r18,r9,11c0 <___svfprintf_internal_r+0x4a8>
    11bc:	4805883a 	mov	r2,r9
    11c0:	d8802a15 	stw	r2,168(sp)
    11c4:	d8003415 	stw	zero,208(sp)
    11c8:	a8803fcc 	andi	r2,r21,255
    11cc:	1080201c 	xori	r2,r2,128
    11d0:	10bfe004 	addi	r2,r2,-128
    11d4:	10000326 	beq	r2,zero,11e4 <___svfprintf_internal_r+0x4cc>
    11d8:	d8c02a17 	ldw	r3,168(sp)
    11dc:	18c00044 	addi	r3,r3,1
    11e0:	d8c02a15 	stw	r3,168(sp)
    11e4:	8ac0008c 	andi	r11,r17,2
    11e8:	dac02b15 	stw	r11,172(sp)
    11ec:	58000326 	beq	r11,zero,11fc <___svfprintf_internal_r+0x4e4>
    11f0:	db002a17 	ldw	r12,168(sp)
    11f4:	63000084 	addi	r12,r12,2
    11f8:	db002a15 	stw	r12,168(sp)
    11fc:	88c0210c 	andi	r3,r17,132
    1200:	d8c02c15 	stw	r3,176(sp)
    1204:	1802111e 	bne	r3,zero,1a4c <___svfprintf_internal_r+0xd34>
    1208:	dac02e17 	ldw	r11,184(sp)
    120c:	db002a17 	ldw	r12,168(sp)
    1210:	5b39c83a 	sub	fp,r11,r12
    1214:	07020d0e 	bge	zero,fp,1a4c <___svfprintf_internal_r+0xd34>
    1218:	02400404 	movi	r9,16
    121c:	d8c02017 	ldw	r3,128(sp)
    1220:	d8801f17 	ldw	r2,124(sp)
    1224:	4f058c0e 	bge	r9,fp,2858 <___svfprintf_internal_r+0x1b40>
    1228:	014000b4 	movhi	r5,2
    122c:	e009883a 	mov	r4,fp
    1230:	2971a984 	addi	r5,r5,-14682
    1234:	dc003c15 	stw	r16,240(sp)
    1238:	9039883a 	mov	fp,r18
    123c:	d9403615 	stw	r5,216(sp)
    1240:	8825883a 	mov	r18,r17
    1244:	482b883a 	mov	r21,r9
    1248:	04c001c4 	movi	r19,7
    124c:	dc002f17 	ldw	r16,188(sp)
    1250:	2023883a 	mov	r17,r4
    1254:	00000306 	br	1264 <___svfprintf_internal_r+0x54c>
    1258:	8c7ffc04 	addi	r17,r17,-16
    125c:	42000204 	addi	r8,r8,8
    1260:	ac40130e 	bge	r21,r17,12b0 <___svfprintf_internal_r+0x598>
    1264:	02c000b4 	movhi	r11,2
    1268:	18c00404 	addi	r3,r3,16
    126c:	10800044 	addi	r2,r2,1
    1270:	5af1a984 	addi	r11,r11,-14682
    1274:	42c00015 	stw	r11,0(r8)
    1278:	45400115 	stw	r21,4(r8)
    127c:	d8c02015 	stw	r3,128(sp)
    1280:	d8801f15 	stw	r2,124(sp)
    1284:	98bff40e 	bge	r19,r2,1258 <__alt_mem_Flash_flash_data+0xf4001258>
    1288:	8009883a 	mov	r4,r16
    128c:	b80b883a 	mov	r5,r23
    1290:	b00d883a 	mov	r6,r22
    1294:	0009cac0 	call	9cac <__ssprint_r>
    1298:	103f671e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    129c:	8c7ffc04 	addi	r17,r17,-16
    12a0:	d8c02017 	ldw	r3,128(sp)
    12a4:	d8801f17 	ldw	r2,124(sp)
    12a8:	da000404 	addi	r8,sp,16
    12ac:	ac7fed16 	blt	r21,r17,1264 <__alt_mem_Flash_flash_data+0xf4001264>
    12b0:	dc003c17 	ldw	r16,240(sp)
    12b4:	8809883a 	mov	r4,r17
    12b8:	9023883a 	mov	r17,r18
    12bc:	e025883a 	mov	r18,fp
    12c0:	2039883a 	mov	fp,r4
    12c4:	db003617 	ldw	r12,216(sp)
    12c8:	e0c7883a 	add	r3,fp,r3
    12cc:	10800044 	addi	r2,r2,1
    12d0:	43000015 	stw	r12,0(r8)
    12d4:	47000115 	stw	fp,4(r8)
    12d8:	d8c02015 	stw	r3,128(sp)
    12dc:	d8801f15 	stw	r2,124(sp)
    12e0:	010001c4 	movi	r4,7
    12e4:	20834416 	blt	r4,r2,1ff8 <___svfprintf_internal_r+0x12e0>
    12e8:	d8802787 	ldb	r2,158(sp)
    12ec:	42000204 	addi	r8,r8,8
    12f0:	10000c26 	beq	r2,zero,1324 <___svfprintf_internal_r+0x60c>
    12f4:	d8801f17 	ldw	r2,124(sp)
    12f8:	d9002784 	addi	r4,sp,158
    12fc:	18c00044 	addi	r3,r3,1
    1300:	10800044 	addi	r2,r2,1
    1304:	41000015 	stw	r4,0(r8)
    1308:	01000044 	movi	r4,1
    130c:	41000115 	stw	r4,4(r8)
    1310:	d8c02015 	stw	r3,128(sp)
    1314:	d8801f15 	stw	r2,124(sp)
    1318:	010001c4 	movi	r4,7
    131c:	2082f616 	blt	r4,r2,1ef8 <___svfprintf_internal_r+0x11e0>
    1320:	42000204 	addi	r8,r8,8
    1324:	dac02b17 	ldw	r11,172(sp)
    1328:	58000c26 	beq	r11,zero,135c <___svfprintf_internal_r+0x644>
    132c:	d8801f17 	ldw	r2,124(sp)
    1330:	d9002704 	addi	r4,sp,156
    1334:	18c00084 	addi	r3,r3,2
    1338:	10800044 	addi	r2,r2,1
    133c:	41000015 	stw	r4,0(r8)
    1340:	01000084 	movi	r4,2
    1344:	41000115 	stw	r4,4(r8)
    1348:	d8c02015 	stw	r3,128(sp)
    134c:	d8801f15 	stw	r2,124(sp)
    1350:	010001c4 	movi	r4,7
    1354:	2082e016 	blt	r4,r2,1ed8 <___svfprintf_internal_r+0x11c0>
    1358:	42000204 	addi	r8,r8,8
    135c:	db002c17 	ldw	r12,176(sp)
    1360:	00802004 	movi	r2,128
    1364:	60822f26 	beq	r12,r2,1c24 <___svfprintf_internal_r+0xf0c>
    1368:	db003217 	ldw	r12,200(sp)
    136c:	64abc83a 	sub	r21,r12,r18
    1370:	0540310e 	bge	zero,r21,1438 <___svfprintf_internal_r+0x720>
    1374:	07000404 	movi	fp,16
    1378:	d8801f17 	ldw	r2,124(sp)
    137c:	e544270e 	bge	fp,r21,241c <___svfprintf_internal_r+0x1704>
    1380:	014000b4 	movhi	r5,2
    1384:	a809883a 	mov	r4,r21
    1388:	2971a584 	addi	r5,r5,-14698
    138c:	dc002c15 	stw	r16,176(sp)
    1390:	902b883a 	mov	r21,r18
    1394:	d9402b15 	stw	r5,172(sp)
    1398:	8825883a 	mov	r18,r17
    139c:	04c001c4 	movi	r19,7
    13a0:	dc002f17 	ldw	r16,188(sp)
    13a4:	2023883a 	mov	r17,r4
    13a8:	00000306 	br	13b8 <___svfprintf_internal_r+0x6a0>
    13ac:	8c7ffc04 	addi	r17,r17,-16
    13b0:	42000204 	addi	r8,r8,8
    13b4:	e440110e 	bge	fp,r17,13fc <___svfprintf_internal_r+0x6e4>
    13b8:	18c00404 	addi	r3,r3,16
    13bc:	10800044 	addi	r2,r2,1
    13c0:	45000015 	stw	r20,0(r8)
    13c4:	47000115 	stw	fp,4(r8)
    13c8:	d8c02015 	stw	r3,128(sp)
    13cc:	d8801f15 	stw	r2,124(sp)
    13d0:	98bff60e 	bge	r19,r2,13ac <__alt_mem_Flash_flash_data+0xf40013ac>
    13d4:	8009883a 	mov	r4,r16
    13d8:	b80b883a 	mov	r5,r23
    13dc:	b00d883a 	mov	r6,r22
    13e0:	0009cac0 	call	9cac <__ssprint_r>
    13e4:	103f141e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    13e8:	8c7ffc04 	addi	r17,r17,-16
    13ec:	d8c02017 	ldw	r3,128(sp)
    13f0:	d8801f17 	ldw	r2,124(sp)
    13f4:	da000404 	addi	r8,sp,16
    13f8:	e47fef16 	blt	fp,r17,13b8 <__alt_mem_Flash_flash_data+0xf40013b8>
    13fc:	dc002c17 	ldw	r16,176(sp)
    1400:	8809883a 	mov	r4,r17
    1404:	9023883a 	mov	r17,r18
    1408:	a825883a 	mov	r18,r21
    140c:	202b883a 	mov	r21,r4
    1410:	dac02b17 	ldw	r11,172(sp)
    1414:	1d47883a 	add	r3,r3,r21
    1418:	10800044 	addi	r2,r2,1
    141c:	42c00015 	stw	r11,0(r8)
    1420:	45400115 	stw	r21,4(r8)
    1424:	d8c02015 	stw	r3,128(sp)
    1428:	d8801f15 	stw	r2,124(sp)
    142c:	010001c4 	movi	r4,7
    1430:	2082a116 	blt	r4,r2,1eb8 <___svfprintf_internal_r+0x11a0>
    1434:	42000204 	addi	r8,r8,8
    1438:	8880400c 	andi	r2,r17,256
    143c:	1001b01e 	bne	r2,zero,1b00 <___svfprintf_internal_r+0xde8>
    1440:	d8801f17 	ldw	r2,124(sp)
    1444:	db003117 	ldw	r12,196(sp)
    1448:	1c87883a 	add	r3,r3,r18
    144c:	10800044 	addi	r2,r2,1
    1450:	43000015 	stw	r12,0(r8)
    1454:	44800115 	stw	r18,4(r8)
    1458:	d8c02015 	stw	r3,128(sp)
    145c:	d8801f15 	stw	r2,124(sp)
    1460:	010001c4 	movi	r4,7
    1464:	20828216 	blt	r4,r2,1e70 <___svfprintf_internal_r+0x1158>
    1468:	42000204 	addi	r8,r8,8
    146c:	8c40010c 	andi	r17,r17,4
    1470:	88003226 	beq	r17,zero,153c <___svfprintf_internal_r+0x824>
    1474:	db002e17 	ldw	r12,184(sp)
    1478:	dac02a17 	ldw	r11,168(sp)
    147c:	62e1c83a 	sub	r16,r12,r11
    1480:	04002e0e 	bge	zero,r16,153c <___svfprintf_internal_r+0x824>
    1484:	04400404 	movi	r17,16
    1488:	d8801f17 	ldw	r2,124(sp)
    148c:	8c05330e 	bge	r17,r16,295c <___svfprintf_internal_r+0x1c44>
    1490:	010000b4 	movhi	r4,2
    1494:	2131a984 	addi	r4,r4,-14682
    1498:	d9003615 	stw	r4,216(sp)
    149c:	048001c4 	movi	r18,7
    14a0:	dcc02f17 	ldw	r19,188(sp)
    14a4:	00000306 	br	14b4 <___svfprintf_internal_r+0x79c>
    14a8:	843ffc04 	addi	r16,r16,-16
    14ac:	42000204 	addi	r8,r8,8
    14b0:	8c00130e 	bge	r17,r16,1500 <___svfprintf_internal_r+0x7e8>
    14b4:	014000b4 	movhi	r5,2
    14b8:	18c00404 	addi	r3,r3,16
    14bc:	10800044 	addi	r2,r2,1
    14c0:	2971a984 	addi	r5,r5,-14682
    14c4:	41400015 	stw	r5,0(r8)
    14c8:	44400115 	stw	r17,4(r8)
    14cc:	d8c02015 	stw	r3,128(sp)
    14d0:	d8801f15 	stw	r2,124(sp)
    14d4:	90bff40e 	bge	r18,r2,14a8 <__alt_mem_Flash_flash_data+0xf40014a8>
    14d8:	9809883a 	mov	r4,r19
    14dc:	b80b883a 	mov	r5,r23
    14e0:	b00d883a 	mov	r6,r22
    14e4:	0009cac0 	call	9cac <__ssprint_r>
    14e8:	103ed31e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    14ec:	843ffc04 	addi	r16,r16,-16
    14f0:	d8c02017 	ldw	r3,128(sp)
    14f4:	d8801f17 	ldw	r2,124(sp)
    14f8:	da000404 	addi	r8,sp,16
    14fc:	8c3fed16 	blt	r17,r16,14b4 <__alt_mem_Flash_flash_data+0xf40014b4>
    1500:	dac03617 	ldw	r11,216(sp)
    1504:	1c07883a 	add	r3,r3,r16
    1508:	10800044 	addi	r2,r2,1
    150c:	42c00015 	stw	r11,0(r8)
    1510:	44000115 	stw	r16,4(r8)
    1514:	d8c02015 	stw	r3,128(sp)
    1518:	d8801f15 	stw	r2,124(sp)
    151c:	010001c4 	movi	r4,7
    1520:	2080060e 	bge	r4,r2,153c <___svfprintf_internal_r+0x824>
    1524:	d9002f17 	ldw	r4,188(sp)
    1528:	b80b883a 	mov	r5,r23
    152c:	b00d883a 	mov	r6,r22
    1530:	0009cac0 	call	9cac <__ssprint_r>
    1534:	103ec01e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1538:	d8c02017 	ldw	r3,128(sp)
    153c:	d8802a17 	ldw	r2,168(sp)
    1540:	db002e17 	ldw	r12,184(sp)
    1544:	1300010e 	bge	r2,r12,154c <___svfprintf_internal_r+0x834>
    1548:	6005883a 	mov	r2,r12
    154c:	dac03017 	ldw	r11,192(sp)
    1550:	5897883a 	add	r11,r11,r2
    1554:	dac03015 	stw	r11,192(sp)
    1558:	1802331e 	bne	r3,zero,1e28 <___svfprintf_internal_r+0x1110>
    155c:	d8001f15 	stw	zero,124(sp)
    1560:	da000404 	addi	r8,sp,16
    1564:	003e1806 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    1568:	db002d17 	ldw	r12,180(sp)
    156c:	dac02d17 	ldw	r11,180(sp)
    1570:	d8c02915 	stw	r3,164(sp)
    1574:	63000017 	ldw	r12,0(r12)
    1578:	5ac00117 	ldw	r11,4(r11)
    157c:	d9802785 	stb	r6,158(sp)
    1580:	6009883a 	mov	r4,r12
    1584:	580b883a 	mov	r5,r11
    1588:	db003715 	stw	r12,220(sp)
    158c:	da004015 	stw	r8,256(sp)
    1590:	da403f15 	stw	r9,252(sp)
    1594:	dac03815 	stw	r11,224(sp)
    1598:	0009aa80 	call	9aa8 <__fpclassifyd>
    159c:	db002d17 	ldw	r12,180(sp)
    15a0:	04800044 	movi	r18,1
    15a4:	da004017 	ldw	r8,256(sp)
    15a8:	64c00204 	addi	r19,r12,8
    15ac:	da403f17 	ldw	r9,252(sp)
    15b0:	d9003717 	ldw	r4,220(sp)
    15b4:	d9403817 	ldw	r5,224(sp)
    15b8:	1483561e 	bne	r2,r18,2314 <___svfprintf_internal_r+0x15fc>
    15bc:	000d883a 	mov	r6,zero
    15c0:	000f883a 	mov	r7,zero
    15c4:	000ebb40 	call	ebb4 <__ledf2>
    15c8:	da004017 	ldw	r8,256(sp)
    15cc:	1004ee16 	blt	r2,zero,2988 <___svfprintf_internal_r+0x1c70>
    15d0:	dd402783 	ldbu	r21,158(sp)
    15d4:	008011c4 	movi	r2,71
    15d8:	1404440e 	bge	r2,r16,26ec <___svfprintf_internal_r+0x19d4>
    15dc:	00c000b4 	movhi	r3,2
    15e0:	18f19604 	addi	r3,r3,-14760
    15e4:	d8c03115 	stw	r3,196(sp)
    15e8:	02c000c4 	movi	r11,3
    15ec:	00bfdfc4 	movi	r2,-129
    15f0:	dac02a15 	stw	r11,168(sp)
    15f4:	88a2703a 	and	r17,r17,r2
    15f8:	dcc02d15 	stw	r19,180(sp)
    15fc:	5825883a 	mov	r18,r11
    1600:	d8003215 	stw	zero,200(sp)
    1604:	d8003415 	stw	zero,208(sp)
    1608:	003eef06 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    160c:	8c400214 	ori	r17,r17,8
    1610:	1805883a 	mov	r2,r3
    1614:	1c000007 	ldb	r16,0(r3)
    1618:	003e1506 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    161c:	8c400414 	ori	r17,r17,16
    1620:	d8c02915 	stw	r3,164(sp)
    1624:	88c0080c 	andi	r3,r17,32
    1628:	d8802d17 	ldw	r2,180(sp)
    162c:	18005526 	beq	r3,zero,1784 <___svfprintf_internal_r+0xa6c>
    1630:	dac02d17 	ldw	r11,180(sp)
    1634:	14c00017 	ldw	r19,0(r2)
    1638:	17000117 	ldw	fp,4(r2)
    163c:	5ac00204 	addi	r11,r11,8
    1640:	dac02d15 	stw	r11,180(sp)
    1644:	00800044 	movi	r2,1
    1648:	9f06b03a 	or	r3,r19,fp
    164c:	d8002785 	stb	zero,158(sp)
    1650:	da403215 	stw	r9,200(sp)
    1654:	002b883a 	mov	r21,zero
    1658:	003eb406 	br	112c <__alt_mem_Flash_flash_data+0xf400112c>
    165c:	030000b4 	movhi	r12,2
    1660:	63319904 	addi	r12,r12,-14748
    1664:	d8c02915 	stw	r3,164(sp)
    1668:	d9802785 	stb	r6,158(sp)
    166c:	db003b15 	stw	r12,236(sp)
    1670:	88c0080c 	andi	r3,r17,32
    1674:	d8802d17 	ldw	r2,180(sp)
    1678:	18005626 	beq	r3,zero,17d4 <___svfprintf_internal_r+0xabc>
    167c:	dac02d17 	ldw	r11,180(sp)
    1680:	14c00017 	ldw	r19,0(r2)
    1684:	17000117 	ldw	fp,4(r2)
    1688:	5ac00204 	addi	r11,r11,8
    168c:	dac02d15 	stw	r11,180(sp)
    1690:	8880004c 	andi	r2,r17,1
    1694:	10029326 	beq	r2,zero,20e4 <___svfprintf_internal_r+0x13cc>
    1698:	9f06b03a 	or	r3,r19,fp
    169c:	18033526 	beq	r3,zero,2374 <___svfprintf_internal_r+0x165c>
    16a0:	00800c04 	movi	r2,48
    16a4:	d8802705 	stb	r2,156(sp)
    16a8:	dc002745 	stb	r16,157(sp)
    16ac:	8c400094 	ori	r17,r17,2
    16b0:	00800084 	movi	r2,2
    16b4:	003fe506 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    16b8:	1805883a 	mov	r2,r3
    16bc:	d8002e15 	stw	zero,184(sp)
    16c0:	82fff404 	addi	r11,r16,-48
    16c4:	0019883a 	mov	r12,zero
    16c8:	14000007 	ldb	r16,0(r2)
    16cc:	630002a4 	muli	r12,r12,10
    16d0:	18c00044 	addi	r3,r3,1
    16d4:	1805883a 	mov	r2,r3
    16d8:	62d9883a 	add	r12,r12,r11
    16dc:	82fff404 	addi	r11,r16,-48
    16e0:	2afff92e 	bgeu	r5,r11,16c8 <__alt_mem_Flash_flash_data+0xf40016c8>
    16e4:	db002e15 	stw	r12,184(sp)
    16e8:	003de206 	br	e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    16ec:	8c400814 	ori	r17,r17,32
    16f0:	1805883a 	mov	r2,r3
    16f4:	1c000007 	ldb	r16,0(r3)
    16f8:	003ddd06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    16fc:	dac02d17 	ldw	r11,180(sp)
    1700:	db002d17 	ldw	r12,180(sp)
    1704:	d8c02915 	stw	r3,164(sp)
    1708:	5ac00017 	ldw	r11,0(r11)
    170c:	d8002785 	stb	zero,158(sp)
    1710:	64c00104 	addi	r19,r12,4
    1714:	dac03115 	stw	r11,196(sp)
    1718:	58048126 	beq	r11,zero,2920 <___svfprintf_internal_r+0x1c08>
    171c:	d9003117 	ldw	r4,196(sp)
    1720:	48041716 	blt	r9,zero,2780 <___svfprintf_internal_r+0x1a68>
    1724:	480d883a 	mov	r6,r9
    1728:	000b883a 	mov	r5,zero
    172c:	da004015 	stw	r8,256(sp)
    1730:	da403f15 	stw	r9,252(sp)
    1734:	00082240 	call	8224 <memchr>
    1738:	da004017 	ldw	r8,256(sp)
    173c:	da403f17 	ldw	r9,252(sp)
    1740:	1004db26 	beq	r2,zero,2ab0 <___svfprintf_internal_r+0x1d98>
    1744:	d8c03117 	ldw	r3,196(sp)
    1748:	10e5c83a 	sub	r18,r2,r3
    174c:	4c80010e 	bge	r9,r18,1754 <___svfprintf_internal_r+0xa3c>
    1750:	4825883a 	mov	r18,r9
    1754:	9005883a 	mov	r2,r18
    1758:	90040e16 	blt	r18,zero,2794 <___svfprintf_internal_r+0x1a7c>
    175c:	dd402783 	ldbu	r21,158(sp)
    1760:	d8802a15 	stw	r2,168(sp)
    1764:	dcc02d15 	stw	r19,180(sp)
    1768:	d8003215 	stw	zero,200(sp)
    176c:	d8003415 	stw	zero,208(sp)
    1770:	003e9506 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    1774:	d8c02915 	stw	r3,164(sp)
    1778:	88c0080c 	andi	r3,r17,32
    177c:	d8802d17 	ldw	r2,180(sp)
    1780:	183fab1e 	bne	r3,zero,1630 <__alt_mem_Flash_flash_data+0xf4001630>
    1784:	88c0040c 	andi	r3,r17,16
    1788:	1802681e 	bne	r3,zero,212c <___svfprintf_internal_r+0x1414>
    178c:	88c0100c 	andi	r3,r17,64
    1790:	18026626 	beq	r3,zero,212c <___svfprintf_internal_r+0x1414>
    1794:	dac02d17 	ldw	r11,180(sp)
    1798:	14c0000b 	ldhu	r19,0(r2)
    179c:	0039883a 	mov	fp,zero
    17a0:	5ac00104 	addi	r11,r11,4
    17a4:	dac02d15 	stw	r11,180(sp)
    17a8:	00800044 	movi	r2,1
    17ac:	9807883a 	mov	r3,r19
    17b0:	003fa606 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    17b4:	008000b4 	movhi	r2,2
    17b8:	10b19e04 	addi	r2,r2,-14728
    17bc:	d8c02915 	stw	r3,164(sp)
    17c0:	d8803b15 	stw	r2,236(sp)
    17c4:	d9802785 	stb	r6,158(sp)
    17c8:	88c0080c 	andi	r3,r17,32
    17cc:	d8802d17 	ldw	r2,180(sp)
    17d0:	183faa1e 	bne	r3,zero,167c <__alt_mem_Flash_flash_data+0xf400167c>
    17d4:	88c0040c 	andi	r3,r17,16
    17d8:	1802e826 	beq	r3,zero,237c <___svfprintf_internal_r+0x1664>
    17dc:	db002d17 	ldw	r12,180(sp)
    17e0:	14c00017 	ldw	r19,0(r2)
    17e4:	0039883a 	mov	fp,zero
    17e8:	63000104 	addi	r12,r12,4
    17ec:	db002d15 	stw	r12,180(sp)
    17f0:	003fa706 	br	1690 <__alt_mem_Flash_flash_data+0xf4001690>
    17f4:	30803fcc 	andi	r2,r6,255
    17f8:	1080201c 	xori	r2,r2,128
    17fc:	10bfe004 	addi	r2,r2,-128
    1800:	1002d91e 	bne	r2,zero,2368 <___svfprintf_internal_r+0x1650>
    1804:	1805883a 	mov	r2,r3
    1808:	01800804 	movi	r6,32
    180c:	1c000007 	ldb	r16,0(r3)
    1810:	003d9706 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1814:	8c400054 	ori	r17,r17,1
    1818:	1805883a 	mov	r2,r3
    181c:	1c000007 	ldb	r16,0(r3)
    1820:	003d9306 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1824:	dac02d17 	ldw	r11,180(sp)
    1828:	db002d17 	ldw	r12,180(sp)
    182c:	5ac00017 	ldw	r11,0(r11)
    1830:	dac02e15 	stw	r11,184(sp)
    1834:	62c00104 	addi	r11,r12,4
    1838:	db002e17 	ldw	r12,184(sp)
    183c:	60033e16 	blt	r12,zero,2538 <___svfprintf_internal_r+0x1820>
    1840:	dac02d15 	stw	r11,180(sp)
    1844:	1805883a 	mov	r2,r3
    1848:	1c000007 	ldb	r16,0(r3)
    184c:	003d8806 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1850:	1805883a 	mov	r2,r3
    1854:	01800ac4 	movi	r6,43
    1858:	1c000007 	ldb	r16,0(r3)
    185c:	003d8406 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1860:	8c401014 	ori	r17,r17,64
    1864:	1805883a 	mov	r2,r3
    1868:	1c000007 	ldb	r16,0(r3)
    186c:	003d8006 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1870:	1c000007 	ldb	r16,0(r3)
    1874:	81c33626 	beq	r16,r7,2550 <___svfprintf_internal_r+0x1838>
    1878:	8c400414 	ori	r17,r17,16
    187c:	1805883a 	mov	r2,r3
    1880:	003d7b06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1884:	d8c02915 	stw	r3,164(sp)
    1888:	d9802785 	stb	r6,158(sp)
    188c:	8880080c 	andi	r2,r17,32
    1890:	1002c226 	beq	r2,zero,239c <___svfprintf_internal_r+0x1684>
    1894:	db002d17 	ldw	r12,180(sp)
    1898:	dac03017 	ldw	r11,192(sp)
    189c:	60800017 	ldw	r2,0(r12)
    18a0:	5807d7fa 	srai	r3,r11,31
    18a4:	63000104 	addi	r12,r12,4
    18a8:	db002d15 	stw	r12,180(sp)
    18ac:	12c00015 	stw	r11,0(r2)
    18b0:	10c00115 	stw	r3,4(r2)
    18b4:	003d4406 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    18b8:	db002d17 	ldw	r12,180(sp)
    18bc:	00800c04 	movi	r2,48
    18c0:	d8802705 	stb	r2,156(sp)
    18c4:	64c00017 	ldw	r19,0(r12)
    18c8:	00801e04 	movi	r2,120
    18cc:	d8802745 	stb	r2,157(sp)
    18d0:	008000b4 	movhi	r2,2
    18d4:	10b19e04 	addi	r2,r2,-14728
    18d8:	63000104 	addi	r12,r12,4
    18dc:	d8c02915 	stw	r3,164(sp)
    18e0:	d8803b15 	stw	r2,236(sp)
    18e4:	0039883a 	mov	fp,zero
    18e8:	8c400094 	ori	r17,r17,2
    18ec:	db002d15 	stw	r12,180(sp)
    18f0:	00800084 	movi	r2,2
    18f4:	04001e04 	movi	r16,120
    18f8:	9807883a 	mov	r3,r19
    18fc:	003f5306 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    1900:	db002d17 	ldw	r12,180(sp)
    1904:	d8c02915 	stw	r3,164(sp)
    1908:	dac01404 	addi	r11,sp,80
    190c:	60800017 	ldw	r2,0(r12)
    1910:	00c00044 	movi	r3,1
    1914:	63000104 	addi	r12,r12,4
    1918:	d8801405 	stb	r2,80(sp)
    191c:	d8c02a15 	stw	r3,168(sp)
    1920:	d8002785 	stb	zero,158(sp)
    1924:	db002d15 	stw	r12,180(sp)
    1928:	1825883a 	mov	r18,r3
    192c:	d8003215 	stw	zero,200(sp)
    1930:	d8003415 	stw	zero,208(sp)
    1934:	dac03115 	stw	r11,196(sp)
    1938:	0005883a 	mov	r2,zero
    193c:	003e2906 	br	11e4 <__alt_mem_Flash_flash_data+0xf40011e4>
    1940:	d8c02915 	stw	r3,164(sp)
    1944:	d9802785 	stb	r6,158(sp)
    1948:	8880080c 	andi	r2,r17,32
    194c:	d8c02d17 	ldw	r3,180(sp)
    1950:	103deb1e 	bne	r2,zero,1100 <__alt_mem_Flash_flash_data+0xf4001100>
    1954:	8880040c 	andi	r2,r17,16
    1958:	1001e51e 	bne	r2,zero,20f0 <___svfprintf_internal_r+0x13d8>
    195c:	8880100c 	andi	r2,r17,64
    1960:	1001e326 	beq	r2,zero,20f0 <___svfprintf_internal_r+0x13d8>
    1964:	1cc0000f 	ldh	r19,0(r3)
    1968:	db002d17 	ldw	r12,180(sp)
    196c:	9839d7fa 	srai	fp,r19,31
    1970:	63000104 	addi	r12,r12,4
    1974:	db002d15 	stw	r12,180(sp)
    1978:	e005883a 	mov	r2,fp
    197c:	103de70e 	bge	r2,zero,111c <__alt_mem_Flash_flash_data+0xf400111c>
    1980:	04e7c83a 	sub	r19,zero,r19
    1984:	9804c03a 	cmpne	r2,r19,zero
    1988:	0739c83a 	sub	fp,zero,fp
    198c:	e0b9c83a 	sub	fp,fp,r2
    1990:	05400b44 	movi	r21,45
    1994:	dd402785 	stb	r21,158(sp)
    1998:	da403215 	stw	r9,200(sp)
    199c:	00800044 	movi	r2,1
    19a0:	9f06b03a 	or	r3,r19,fp
    19a4:	003de106 	br	112c <__alt_mem_Flash_flash_data+0xf400112c>
    19a8:	8c400414 	ori	r17,r17,16
    19ac:	d8c02915 	stw	r3,164(sp)
    19b0:	8880080c 	andi	r2,r17,32
    19b4:	10000b26 	beq	r2,zero,19e4 <___svfprintf_internal_r+0xccc>
    19b8:	db002d17 	ldw	r12,180(sp)
    19bc:	0005883a 	mov	r2,zero
    19c0:	64c00017 	ldw	r19,0(r12)
    19c4:	67000117 	ldw	fp,4(r12)
    19c8:	63000204 	addi	r12,r12,8
    19cc:	db002d15 	stw	r12,180(sp)
    19d0:	9f06b03a 	or	r3,r19,fp
    19d4:	003f1d06 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    19d8:	d8c02915 	stw	r3,164(sp)
    19dc:	8880080c 	andi	r2,r17,32
    19e0:	103ff51e 	bne	r2,zero,19b8 <__alt_mem_Flash_flash_data+0xf40019b8>
    19e4:	8880040c 	andi	r2,r17,16
    19e8:	1001c81e 	bne	r2,zero,210c <___svfprintf_internal_r+0x13f4>
    19ec:	8880100c 	andi	r2,r17,64
    19f0:	1001c626 	beq	r2,zero,210c <___svfprintf_internal_r+0x13f4>
    19f4:	db002d17 	ldw	r12,180(sp)
    19f8:	0039883a 	mov	fp,zero
    19fc:	0005883a 	mov	r2,zero
    1a00:	64c0000b 	ldhu	r19,0(r12)
    1a04:	63000104 	addi	r12,r12,4
    1a08:	db002d15 	stw	r12,180(sp)
    1a0c:	9807883a 	mov	r3,r19
    1a10:	003f0e06 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    1a14:	d8c02915 	stw	r3,164(sp)
    1a18:	d9802785 	stb	r6,158(sp)
    1a1c:	803d8026 	beq	r16,zero,1020 <__alt_mem_Flash_flash_data+0xf4001020>
    1a20:	02c00044 	movi	r11,1
    1a24:	db001404 	addi	r12,sp,80
    1a28:	dac02a15 	stw	r11,168(sp)
    1a2c:	dc001405 	stb	r16,80(sp)
    1a30:	d8002785 	stb	zero,158(sp)
    1a34:	5825883a 	mov	r18,r11
    1a38:	d8003215 	stw	zero,200(sp)
    1a3c:	d8003415 	stw	zero,208(sp)
    1a40:	db003115 	stw	r12,196(sp)
    1a44:	0005883a 	mov	r2,zero
    1a48:	003de606 	br	11e4 <__alt_mem_Flash_flash_data+0xf40011e4>
    1a4c:	d8c02017 	ldw	r3,128(sp)
    1a50:	003e2706 	br	12f0 <__alt_mem_Flash_flash_data+0xf40012f0>
    1a54:	10803fcc 	andi	r2,r2,255
    1a58:	00c00044 	movi	r3,1
    1a5c:	10fdbb1e 	bne	r2,r3,114c <__alt_mem_Flash_flash_data+0xf400114c>
    1a60:	e000021e 	bne	fp,zero,1a6c <___svfprintf_internal_r+0xd54>
    1a64:	00800244 	movi	r2,9
    1a68:	14c01f2e 	bgeu	r2,r19,1ae8 <___svfprintf_internal_r+0xdd0>
    1a6c:	dc002a15 	stw	r16,168(sp)
    1a70:	dc402b15 	stw	r17,172(sp)
    1a74:	9821883a 	mov	r16,r19
    1a78:	e023883a 	mov	r17,fp
    1a7c:	b025883a 	mov	r18,r22
    1a80:	4827883a 	mov	r19,r9
    1a84:	4039883a 	mov	fp,r8
    1a88:	8009883a 	mov	r4,r16
    1a8c:	880b883a 	mov	r5,r17
    1a90:	01800284 	movi	r6,10
    1a94:	000f883a 	mov	r7,zero
    1a98:	000d22c0 	call	d22c <__umoddi3>
    1a9c:	10800c04 	addi	r2,r2,48
    1aa0:	94bfffc4 	addi	r18,r18,-1
    1aa4:	8009883a 	mov	r4,r16
    1aa8:	880b883a 	mov	r5,r17
    1aac:	01800284 	movi	r6,10
    1ab0:	000f883a 	mov	r7,zero
    1ab4:	90800005 	stb	r2,0(r18)
    1ab8:	000cc6c0 	call	cc6c <__udivdi3>
    1abc:	1021883a 	mov	r16,r2
    1ac0:	10c4b03a 	or	r2,r2,r3
    1ac4:	1823883a 	mov	r17,r3
    1ac8:	103fef1e 	bne	r2,zero,1a88 <__alt_mem_Flash_flash_data+0xf4001a88>
    1acc:	dc803115 	stw	r18,196(sp)
    1ad0:	dc002a17 	ldw	r16,168(sp)
    1ad4:	dc402b17 	ldw	r17,172(sp)
    1ad8:	9813883a 	mov	r9,r19
    1adc:	e011883a 	mov	r8,fp
    1ae0:	b4a5c83a 	sub	r18,r22,r18
    1ae4:	003db306 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    1ae8:	9cc00c04 	addi	r19,r19,48
    1aec:	db001dc4 	addi	r12,sp,119
    1af0:	dcc01dc5 	stb	r19,119(sp)
    1af4:	dc803d17 	ldw	r18,244(sp)
    1af8:	db003115 	stw	r12,196(sp)
    1afc:	003dad06 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    1b00:	00801944 	movi	r2,101
    1b04:	14008d0e 	bge	r2,r16,1d3c <___svfprintf_internal_r+0x1024>
    1b08:	d9003717 	ldw	r4,220(sp)
    1b0c:	d9403817 	ldw	r5,224(sp)
    1b10:	000d883a 	mov	r6,zero
    1b14:	000f883a 	mov	r7,zero
    1b18:	d8c03e15 	stw	r3,248(sp)
    1b1c:	da004015 	stw	r8,256(sp)
    1b20:	000ea500 	call	ea50 <__eqdf2>
    1b24:	d8c03e17 	ldw	r3,248(sp)
    1b28:	da004017 	ldw	r8,256(sp)
    1b2c:	1000fd1e 	bne	r2,zero,1f24 <___svfprintf_internal_r+0x120c>
    1b30:	d8801f17 	ldw	r2,124(sp)
    1b34:	010000b4 	movhi	r4,2
    1b38:	2131a504 	addi	r4,r4,-14700
    1b3c:	18c00044 	addi	r3,r3,1
    1b40:	10800044 	addi	r2,r2,1
    1b44:	41000015 	stw	r4,0(r8)
    1b48:	01000044 	movi	r4,1
    1b4c:	41000115 	stw	r4,4(r8)
    1b50:	d8c02015 	stw	r3,128(sp)
    1b54:	d8801f15 	stw	r2,124(sp)
    1b58:	010001c4 	movi	r4,7
    1b5c:	20823316 	blt	r4,r2,242c <___svfprintf_internal_r+0x1714>
    1b60:	42000204 	addi	r8,r8,8
    1b64:	d8802617 	ldw	r2,152(sp)
    1b68:	dac03317 	ldw	r11,204(sp)
    1b6c:	12c00216 	blt	r2,r11,1b78 <___svfprintf_internal_r+0xe60>
    1b70:	8880004c 	andi	r2,r17,1
    1b74:	103e3d26 	beq	r2,zero,146c <__alt_mem_Flash_flash_data+0xf400146c>
    1b78:	db003917 	ldw	r12,228(sp)
    1b7c:	d8801f17 	ldw	r2,124(sp)
    1b80:	dac03517 	ldw	r11,212(sp)
    1b84:	1b07883a 	add	r3,r3,r12
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	42c00015 	stw	r11,0(r8)
    1b90:	43000115 	stw	r12,4(r8)
    1b94:	d8c02015 	stw	r3,128(sp)
    1b98:	d8801f15 	stw	r2,124(sp)
    1b9c:	010001c4 	movi	r4,7
    1ba0:	20826f16 	blt	r4,r2,2560 <___svfprintf_internal_r+0x1848>
    1ba4:	42000204 	addi	r8,r8,8
    1ba8:	db003317 	ldw	r12,204(sp)
    1bac:	643fffc4 	addi	r16,r12,-1
    1bb0:	043e2e0e 	bge	zero,r16,146c <__alt_mem_Flash_flash_data+0xf400146c>
    1bb4:	04800404 	movi	r18,16
    1bb8:	d8801f17 	ldw	r2,124(sp)
    1bbc:	9400a00e 	bge	r18,r16,1e40 <___svfprintf_internal_r+0x1128>
    1bc0:	014000b4 	movhi	r5,2
    1bc4:	2971a584 	addi	r5,r5,-14698
    1bc8:	d9402b15 	stw	r5,172(sp)
    1bcc:	054001c4 	movi	r21,7
    1bd0:	dcc02f17 	ldw	r19,188(sp)
    1bd4:	00000306 	br	1be4 <___svfprintf_internal_r+0xecc>
    1bd8:	42000204 	addi	r8,r8,8
    1bdc:	843ffc04 	addi	r16,r16,-16
    1be0:	94009a0e 	bge	r18,r16,1e4c <___svfprintf_internal_r+0x1134>
    1be4:	18c00404 	addi	r3,r3,16
    1be8:	10800044 	addi	r2,r2,1
    1bec:	45000015 	stw	r20,0(r8)
    1bf0:	44800115 	stw	r18,4(r8)
    1bf4:	d8c02015 	stw	r3,128(sp)
    1bf8:	d8801f15 	stw	r2,124(sp)
    1bfc:	a8bff60e 	bge	r21,r2,1bd8 <__alt_mem_Flash_flash_data+0xf4001bd8>
    1c00:	9809883a 	mov	r4,r19
    1c04:	b80b883a 	mov	r5,r23
    1c08:	b00d883a 	mov	r6,r22
    1c0c:	0009cac0 	call	9cac <__ssprint_r>
    1c10:	103d091e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1c14:	d8c02017 	ldw	r3,128(sp)
    1c18:	d8801f17 	ldw	r2,124(sp)
    1c1c:	da000404 	addi	r8,sp,16
    1c20:	003fee06 	br	1bdc <__alt_mem_Flash_flash_data+0xf4001bdc>
    1c24:	dac02e17 	ldw	r11,184(sp)
    1c28:	db002a17 	ldw	r12,168(sp)
    1c2c:	5b2bc83a 	sub	r21,r11,r12
    1c30:	057dcd0e 	bge	zero,r21,1368 <__alt_mem_Flash_flash_data+0xf4001368>
    1c34:	07000404 	movi	fp,16
    1c38:	d8801f17 	ldw	r2,124(sp)
    1c3c:	e5435d0e 	bge	fp,r21,29b4 <___svfprintf_internal_r+0x1c9c>
    1c40:	014000b4 	movhi	r5,2
    1c44:	a809883a 	mov	r4,r21
    1c48:	2971a584 	addi	r5,r5,-14698
    1c4c:	dc002c15 	stw	r16,176(sp)
    1c50:	902b883a 	mov	r21,r18
    1c54:	d9402b15 	stw	r5,172(sp)
    1c58:	8825883a 	mov	r18,r17
    1c5c:	04c001c4 	movi	r19,7
    1c60:	dc002f17 	ldw	r16,188(sp)
    1c64:	2023883a 	mov	r17,r4
    1c68:	00000306 	br	1c78 <___svfprintf_internal_r+0xf60>
    1c6c:	8c7ffc04 	addi	r17,r17,-16
    1c70:	42000204 	addi	r8,r8,8
    1c74:	e440110e 	bge	fp,r17,1cbc <___svfprintf_internal_r+0xfa4>
    1c78:	18c00404 	addi	r3,r3,16
    1c7c:	10800044 	addi	r2,r2,1
    1c80:	45000015 	stw	r20,0(r8)
    1c84:	47000115 	stw	fp,4(r8)
    1c88:	d8c02015 	stw	r3,128(sp)
    1c8c:	d8801f15 	stw	r2,124(sp)
    1c90:	98bff60e 	bge	r19,r2,1c6c <__alt_mem_Flash_flash_data+0xf4001c6c>
    1c94:	8009883a 	mov	r4,r16
    1c98:	b80b883a 	mov	r5,r23
    1c9c:	b00d883a 	mov	r6,r22
    1ca0:	0009cac0 	call	9cac <__ssprint_r>
    1ca4:	103ce41e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1ca8:	8c7ffc04 	addi	r17,r17,-16
    1cac:	d8c02017 	ldw	r3,128(sp)
    1cb0:	d8801f17 	ldw	r2,124(sp)
    1cb4:	da000404 	addi	r8,sp,16
    1cb8:	e47fef16 	blt	fp,r17,1c78 <__alt_mem_Flash_flash_data+0xf4001c78>
    1cbc:	dc002c17 	ldw	r16,176(sp)
    1cc0:	8809883a 	mov	r4,r17
    1cc4:	9023883a 	mov	r17,r18
    1cc8:	a825883a 	mov	r18,r21
    1ccc:	202b883a 	mov	r21,r4
    1cd0:	dac02b17 	ldw	r11,172(sp)
    1cd4:	1d47883a 	add	r3,r3,r21
    1cd8:	10800044 	addi	r2,r2,1
    1cdc:	42c00015 	stw	r11,0(r8)
    1ce0:	45400115 	stw	r21,4(r8)
    1ce4:	d8c02015 	stw	r3,128(sp)
    1ce8:	d8801f15 	stw	r2,124(sp)
    1cec:	010001c4 	movi	r4,7
    1cf0:	20818016 	blt	r4,r2,22f4 <___svfprintf_internal_r+0x15dc>
    1cf4:	42000204 	addi	r8,r8,8
    1cf8:	003d9b06 	br	1368 <__alt_mem_Flash_flash_data+0xf4001368>
    1cfc:	d9403b17 	ldw	r5,236(sp)
    1d00:	b007883a 	mov	r3,r22
    1d04:	988003cc 	andi	r2,r19,15
    1d08:	e008973a 	slli	r4,fp,28
    1d0c:	2885883a 	add	r2,r5,r2
    1d10:	9826d13a 	srli	r19,r19,4
    1d14:	10800003 	ldbu	r2,0(r2)
    1d18:	e038d13a 	srli	fp,fp,4
    1d1c:	18ffffc4 	addi	r3,r3,-1
    1d20:	24e6b03a 	or	r19,r4,r19
    1d24:	18800005 	stb	r2,0(r3)
    1d28:	9f04b03a 	or	r2,r19,fp
    1d2c:	103ff51e 	bne	r2,zero,1d04 <__alt_mem_Flash_flash_data+0xf4001d04>
    1d30:	d8c03115 	stw	r3,196(sp)
    1d34:	b0e5c83a 	sub	r18,r22,r3
    1d38:	003d1e06 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    1d3c:	db003317 	ldw	r12,204(sp)
    1d40:	00800044 	movi	r2,1
    1d44:	18c00044 	addi	r3,r3,1
    1d48:	13014b0e 	bge	r2,r12,2278 <___svfprintf_internal_r+0x1560>
    1d4c:	dc001f17 	ldw	r16,124(sp)
    1d50:	dac03117 	ldw	r11,196(sp)
    1d54:	00800044 	movi	r2,1
    1d58:	84000044 	addi	r16,r16,1
    1d5c:	40800115 	stw	r2,4(r8)
    1d60:	42c00015 	stw	r11,0(r8)
    1d64:	d8c02015 	stw	r3,128(sp)
    1d68:	dc001f15 	stw	r16,124(sp)
    1d6c:	008001c4 	movi	r2,7
    1d70:	14014e16 	blt	r2,r16,22ac <___svfprintf_internal_r+0x1594>
    1d74:	42000204 	addi	r8,r8,8
    1d78:	db003917 	ldw	r12,228(sp)
    1d7c:	dac03517 	ldw	r11,212(sp)
    1d80:	84000044 	addi	r16,r16,1
    1d84:	1b07883a 	add	r3,r3,r12
    1d88:	42c00015 	stw	r11,0(r8)
    1d8c:	43000115 	stw	r12,4(r8)
    1d90:	d8c02015 	stw	r3,128(sp)
    1d94:	dc001f15 	stw	r16,124(sp)
    1d98:	008001c4 	movi	r2,7
    1d9c:	14014c16 	blt	r2,r16,22d0 <___svfprintf_internal_r+0x15b8>
    1da0:	44800204 	addi	r18,r8,8
    1da4:	d9003717 	ldw	r4,220(sp)
    1da8:	d9403817 	ldw	r5,224(sp)
    1dac:	000d883a 	mov	r6,zero
    1db0:	000f883a 	mov	r7,zero
    1db4:	d8c03e15 	stw	r3,248(sp)
    1db8:	000ea500 	call	ea50 <__eqdf2>
    1dbc:	d8c03e17 	ldw	r3,248(sp)
    1dc0:	db003317 	ldw	r12,204(sp)
    1dc4:	10009526 	beq	r2,zero,201c <___svfprintf_internal_r+0x1304>
    1dc8:	dac03117 	ldw	r11,196(sp)
    1dcc:	60bfffc4 	addi	r2,r12,-1
    1dd0:	1887883a 	add	r3,r3,r2
    1dd4:	59000044 	addi	r4,r11,1
    1dd8:	84000044 	addi	r16,r16,1
    1ddc:	90800115 	stw	r2,4(r18)
    1de0:	91000015 	stw	r4,0(r18)
    1de4:	d8c02015 	stw	r3,128(sp)
    1de8:	dc001f15 	stw	r16,124(sp)
    1dec:	008001c4 	movi	r2,7
    1df0:	1400b316 	blt	r2,r16,20c0 <___svfprintf_internal_r+0x13a8>
    1df4:	94800204 	addi	r18,r18,8
    1df8:	dac03a17 	ldw	r11,232(sp)
    1dfc:	dd4022c4 	addi	r21,sp,139
    1e00:	84000044 	addi	r16,r16,1
    1e04:	1ac7883a 	add	r3,r3,r11
    1e08:	95400015 	stw	r21,0(r18)
    1e0c:	92c00115 	stw	r11,4(r18)
    1e10:	d8c02015 	stw	r3,128(sp)
    1e14:	dc001f15 	stw	r16,124(sp)
    1e18:	008001c4 	movi	r2,7
    1e1c:	14001416 	blt	r2,r16,1e70 <___svfprintf_internal_r+0x1158>
    1e20:	92000204 	addi	r8,r18,8
    1e24:	003d9106 	br	146c <__alt_mem_Flash_flash_data+0xf400146c>
    1e28:	d9002f17 	ldw	r4,188(sp)
    1e2c:	b80b883a 	mov	r5,r23
    1e30:	b00d883a 	mov	r6,r22
    1e34:	0009cac0 	call	9cac <__ssprint_r>
    1e38:	103dc826 	beq	r2,zero,155c <__alt_mem_Flash_flash_data+0xf400155c>
    1e3c:	003c7e06 	br	1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1e40:	010000b4 	movhi	r4,2
    1e44:	2131a584 	addi	r4,r4,-14698
    1e48:	d9002b15 	stw	r4,172(sp)
    1e4c:	dac02b17 	ldw	r11,172(sp)
    1e50:	1c07883a 	add	r3,r3,r16
    1e54:	44000115 	stw	r16,4(r8)
    1e58:	42c00015 	stw	r11,0(r8)
    1e5c:	10800044 	addi	r2,r2,1
    1e60:	d8c02015 	stw	r3,128(sp)
    1e64:	d8801f15 	stw	r2,124(sp)
    1e68:	010001c4 	movi	r4,7
    1e6c:	20bd7e0e 	bge	r4,r2,1468 <__alt_mem_Flash_flash_data+0xf4001468>
    1e70:	d9002f17 	ldw	r4,188(sp)
    1e74:	b80b883a 	mov	r5,r23
    1e78:	b00d883a 	mov	r6,r22
    1e7c:	0009cac0 	call	9cac <__ssprint_r>
    1e80:	103c6d1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	da000404 	addi	r8,sp,16
    1e8c:	003d7706 	br	146c <__alt_mem_Flash_flash_data+0xf400146c>
    1e90:	10803fcc 	andi	r2,r2,255
    1e94:	1000201e 	bne	r2,zero,1f18 <___svfprintf_internal_r+0x1200>
    1e98:	8880004c 	andi	r2,r17,1
    1e9c:	10001e26 	beq	r2,zero,1f18 <___svfprintf_internal_r+0x1200>
    1ea0:	00800c04 	movi	r2,48
    1ea4:	d8c01dc4 	addi	r3,sp,119
    1ea8:	d8801dc5 	stb	r2,119(sp)
    1eac:	dc803d17 	ldw	r18,244(sp)
    1eb0:	d8c03115 	stw	r3,196(sp)
    1eb4:	003cbf06 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    1eb8:	d9002f17 	ldw	r4,188(sp)
    1ebc:	b80b883a 	mov	r5,r23
    1ec0:	b00d883a 	mov	r6,r22
    1ec4:	0009cac0 	call	9cac <__ssprint_r>
    1ec8:	103c5b1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1ecc:	d8c02017 	ldw	r3,128(sp)
    1ed0:	da000404 	addi	r8,sp,16
    1ed4:	003d5806 	br	1438 <__alt_mem_Flash_flash_data+0xf4001438>
    1ed8:	d9002f17 	ldw	r4,188(sp)
    1edc:	b80b883a 	mov	r5,r23
    1ee0:	b00d883a 	mov	r6,r22
    1ee4:	0009cac0 	call	9cac <__ssprint_r>
    1ee8:	103c531e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1eec:	d8c02017 	ldw	r3,128(sp)
    1ef0:	da000404 	addi	r8,sp,16
    1ef4:	003d1906 	br	135c <__alt_mem_Flash_flash_data+0xf400135c>
    1ef8:	d9002f17 	ldw	r4,188(sp)
    1efc:	b80b883a 	mov	r5,r23
    1f00:	b00d883a 	mov	r6,r22
    1f04:	0009cac0 	call	9cac <__ssprint_r>
    1f08:	103c4b1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1f0c:	d8c02017 	ldw	r3,128(sp)
    1f10:	da000404 	addi	r8,sp,16
    1f14:	003d0306 	br	1324 <__alt_mem_Flash_flash_data+0xf4001324>
    1f18:	0025883a 	mov	r18,zero
    1f1c:	dd803115 	stw	r22,196(sp)
    1f20:	003ca406 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    1f24:	dc002617 	ldw	r16,152(sp)
    1f28:	0401480e 	bge	zero,r16,244c <___svfprintf_internal_r+0x1734>
    1f2c:	db003117 	ldw	r12,196(sp)
    1f30:	dac03317 	ldw	r11,204(sp)
    1f34:	62e1883a 	add	r16,r12,r11
    1f38:	db003417 	ldw	r12,208(sp)
    1f3c:	5825883a 	mov	r18,r11
    1f40:	62c0010e 	bge	r12,r11,1f48 <___svfprintf_internal_r+0x1230>
    1f44:	6025883a 	mov	r18,r12
    1f48:	04800b0e 	bge	zero,r18,1f78 <___svfprintf_internal_r+0x1260>
    1f4c:	d8801f17 	ldw	r2,124(sp)
    1f50:	dac03117 	ldw	r11,196(sp)
    1f54:	1c87883a 	add	r3,r3,r18
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	42c00015 	stw	r11,0(r8)
    1f60:	44800115 	stw	r18,4(r8)
    1f64:	d8c02015 	stw	r3,128(sp)
    1f68:	d8801f15 	stw	r2,124(sp)
    1f6c:	010001c4 	movi	r4,7
    1f70:	20823f16 	blt	r4,r2,2870 <___svfprintf_internal_r+0x1b58>
    1f74:	42000204 	addi	r8,r8,8
    1f78:	90023b16 	blt	r18,zero,2868 <___svfprintf_internal_r+0x1b50>
    1f7c:	db003417 	ldw	r12,208(sp)
    1f80:	64a5c83a 	sub	r18,r12,r18
    1f84:	0480780e 	bge	zero,r18,2168 <___svfprintf_internal_r+0x1450>
    1f88:	05400404 	movi	r21,16
    1f8c:	d8801f17 	ldw	r2,124(sp)
    1f90:	ac81140e 	bge	r21,r18,23e4 <___svfprintf_internal_r+0x16cc>
    1f94:	014000b4 	movhi	r5,2
    1f98:	2971a584 	addi	r5,r5,-14698
    1f9c:	d9402b15 	stw	r5,172(sp)
    1fa0:	070001c4 	movi	fp,7
    1fa4:	dcc02f17 	ldw	r19,188(sp)
    1fa8:	00000306 	br	1fb8 <___svfprintf_internal_r+0x12a0>
    1fac:	42000204 	addi	r8,r8,8
    1fb0:	94bffc04 	addi	r18,r18,-16
    1fb4:	ac810e0e 	bge	r21,r18,23f0 <___svfprintf_internal_r+0x16d8>
    1fb8:	18c00404 	addi	r3,r3,16
    1fbc:	10800044 	addi	r2,r2,1
    1fc0:	45000015 	stw	r20,0(r8)
    1fc4:	45400115 	stw	r21,4(r8)
    1fc8:	d8c02015 	stw	r3,128(sp)
    1fcc:	d8801f15 	stw	r2,124(sp)
    1fd0:	e0bff60e 	bge	fp,r2,1fac <__alt_mem_Flash_flash_data+0xf4001fac>
    1fd4:	9809883a 	mov	r4,r19
    1fd8:	b80b883a 	mov	r5,r23
    1fdc:	b00d883a 	mov	r6,r22
    1fe0:	0009cac0 	call	9cac <__ssprint_r>
    1fe4:	103c141e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    1fe8:	d8c02017 	ldw	r3,128(sp)
    1fec:	d8801f17 	ldw	r2,124(sp)
    1ff0:	da000404 	addi	r8,sp,16
    1ff4:	003fee06 	br	1fb0 <__alt_mem_Flash_flash_data+0xf4001fb0>
    1ff8:	d9002f17 	ldw	r4,188(sp)
    1ffc:	b80b883a 	mov	r5,r23
    2000:	b00d883a 	mov	r6,r22
    2004:	0009cac0 	call	9cac <__ssprint_r>
    2008:	103c0b1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    200c:	d8c02017 	ldw	r3,128(sp)
    2010:	d8802787 	ldb	r2,158(sp)
    2014:	da000404 	addi	r8,sp,16
    2018:	003cb506 	br	12f0 <__alt_mem_Flash_flash_data+0xf40012f0>
    201c:	657fffc4 	addi	r21,r12,-1
    2020:	057f750e 	bge	zero,r21,1df8 <__alt_mem_Flash_flash_data+0xf4001df8>
    2024:	07000404 	movi	fp,16
    2028:	e542ed0e 	bge	fp,r21,2be0 <___svfprintf_internal_r+0x1ec8>
    202c:	010000b4 	movhi	r4,2
    2030:	2131a584 	addi	r4,r4,-14698
    2034:	d9002b15 	stw	r4,172(sp)
    2038:	01c001c4 	movi	r7,7
    203c:	dcc02f17 	ldw	r19,188(sp)
    2040:	00000306 	br	2050 <___svfprintf_internal_r+0x1338>
    2044:	ad7ffc04 	addi	r21,r21,-16
    2048:	94800204 	addi	r18,r18,8
    204c:	e540130e 	bge	fp,r21,209c <___svfprintf_internal_r+0x1384>
    2050:	18c00404 	addi	r3,r3,16
    2054:	84000044 	addi	r16,r16,1
    2058:	95000015 	stw	r20,0(r18)
    205c:	97000115 	stw	fp,4(r18)
    2060:	d8c02015 	stw	r3,128(sp)
    2064:	dc001f15 	stw	r16,124(sp)
    2068:	3c3ff60e 	bge	r7,r16,2044 <__alt_mem_Flash_flash_data+0xf4002044>
    206c:	9809883a 	mov	r4,r19
    2070:	b80b883a 	mov	r5,r23
    2074:	b00d883a 	mov	r6,r22
    2078:	d9c03e15 	stw	r7,248(sp)
    207c:	0009cac0 	call	9cac <__ssprint_r>
    2080:	d9c03e17 	ldw	r7,248(sp)
    2084:	103bec1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2088:	ad7ffc04 	addi	r21,r21,-16
    208c:	d8c02017 	ldw	r3,128(sp)
    2090:	dc001f17 	ldw	r16,124(sp)
    2094:	dc800404 	addi	r18,sp,16
    2098:	e57fed16 	blt	fp,r21,2050 <__alt_mem_Flash_flash_data+0xf4002050>
    209c:	dac02b17 	ldw	r11,172(sp)
    20a0:	1d47883a 	add	r3,r3,r21
    20a4:	84000044 	addi	r16,r16,1
    20a8:	92c00015 	stw	r11,0(r18)
    20ac:	95400115 	stw	r21,4(r18)
    20b0:	d8c02015 	stw	r3,128(sp)
    20b4:	dc001f15 	stw	r16,124(sp)
    20b8:	008001c4 	movi	r2,7
    20bc:	143f4d0e 	bge	r2,r16,1df4 <__alt_mem_Flash_flash_data+0xf4001df4>
    20c0:	d9002f17 	ldw	r4,188(sp)
    20c4:	b80b883a 	mov	r5,r23
    20c8:	b00d883a 	mov	r6,r22
    20cc:	0009cac0 	call	9cac <__ssprint_r>
    20d0:	103bd91e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    20d4:	d8c02017 	ldw	r3,128(sp)
    20d8:	dc001f17 	ldw	r16,124(sp)
    20dc:	dc800404 	addi	r18,sp,16
    20e0:	003f4506 	br	1df8 <__alt_mem_Flash_flash_data+0xf4001df8>
    20e4:	00800084 	movi	r2,2
    20e8:	9f06b03a 	or	r3,r19,fp
    20ec:	003d5706 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    20f0:	1cc00017 	ldw	r19,0(r3)
    20f4:	dac02d17 	ldw	r11,180(sp)
    20f8:	9839d7fa 	srai	fp,r19,31
    20fc:	5ac00104 	addi	r11,r11,4
    2100:	dac02d15 	stw	r11,180(sp)
    2104:	e005883a 	mov	r2,fp
    2108:	003c0306 	br	1118 <__alt_mem_Flash_flash_data+0xf4001118>
    210c:	dac02d17 	ldw	r11,180(sp)
    2110:	0039883a 	mov	fp,zero
    2114:	0005883a 	mov	r2,zero
    2118:	5cc00017 	ldw	r19,0(r11)
    211c:	5ac00104 	addi	r11,r11,4
    2120:	dac02d15 	stw	r11,180(sp)
    2124:	9807883a 	mov	r3,r19
    2128:	003d4806 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    212c:	db002d17 	ldw	r12,180(sp)
    2130:	14c00017 	ldw	r19,0(r2)
    2134:	0039883a 	mov	fp,zero
    2138:	63000104 	addi	r12,r12,4
    213c:	db002d15 	stw	r12,180(sp)
    2140:	00800044 	movi	r2,1
    2144:	9807883a 	mov	r3,r19
    2148:	003d4006 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    214c:	d9002f17 	ldw	r4,188(sp)
    2150:	b80b883a 	mov	r5,r23
    2154:	b00d883a 	mov	r6,r22
    2158:	0009cac0 	call	9cac <__ssprint_r>
    215c:	103bb61e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2160:	d8c02017 	ldw	r3,128(sp)
    2164:	da000404 	addi	r8,sp,16
    2168:	db003117 	ldw	r12,196(sp)
    216c:	dac03417 	ldw	r11,208(sp)
    2170:	d8802617 	ldw	r2,152(sp)
    2174:	62e5883a 	add	r18,r12,r11
    2178:	db003317 	ldw	r12,204(sp)
    217c:	13000216 	blt	r2,r12,2188 <___svfprintf_internal_r+0x1470>
    2180:	8900004c 	andi	r4,r17,1
    2184:	20000c26 	beq	r4,zero,21b8 <___svfprintf_internal_r+0x14a0>
    2188:	dac03917 	ldw	r11,228(sp)
    218c:	d9001f17 	ldw	r4,124(sp)
    2190:	db003517 	ldw	r12,212(sp)
    2194:	1ac7883a 	add	r3,r3,r11
    2198:	21000044 	addi	r4,r4,1
    219c:	43000015 	stw	r12,0(r8)
    21a0:	42c00115 	stw	r11,4(r8)
    21a4:	d8c02015 	stw	r3,128(sp)
    21a8:	d9001f15 	stw	r4,124(sp)
    21ac:	014001c4 	movi	r5,7
    21b0:	2901b716 	blt	r5,r4,2890 <___svfprintf_internal_r+0x1b78>
    21b4:	42000204 	addi	r8,r8,8
    21b8:	dac03317 	ldw	r11,204(sp)
    21bc:	8489c83a 	sub	r4,r16,r18
    21c0:	5885c83a 	sub	r2,r11,r2
    21c4:	1021883a 	mov	r16,r2
    21c8:	2080010e 	bge	r4,r2,21d0 <___svfprintf_internal_r+0x14b8>
    21cc:	2021883a 	mov	r16,r4
    21d0:	04000a0e 	bge	zero,r16,21fc <___svfprintf_internal_r+0x14e4>
    21d4:	d9001f17 	ldw	r4,124(sp)
    21d8:	1c07883a 	add	r3,r3,r16
    21dc:	44800015 	stw	r18,0(r8)
    21e0:	21000044 	addi	r4,r4,1
    21e4:	44000115 	stw	r16,4(r8)
    21e8:	d8c02015 	stw	r3,128(sp)
    21ec:	d9001f15 	stw	r4,124(sp)
    21f0:	014001c4 	movi	r5,7
    21f4:	2901bf16 	blt	r5,r4,28f4 <___svfprintf_internal_r+0x1bdc>
    21f8:	42000204 	addi	r8,r8,8
    21fc:	8001bb16 	blt	r16,zero,28ec <___svfprintf_internal_r+0x1bd4>
    2200:	1421c83a 	sub	r16,r2,r16
    2204:	043c990e 	bge	zero,r16,146c <__alt_mem_Flash_flash_data+0xf400146c>
    2208:	04800404 	movi	r18,16
    220c:	d8801f17 	ldw	r2,124(sp)
    2210:	943f0b0e 	bge	r18,r16,1e40 <__alt_mem_Flash_flash_data+0xf4001e40>
    2214:	014000b4 	movhi	r5,2
    2218:	2971a584 	addi	r5,r5,-14698
    221c:	d9402b15 	stw	r5,172(sp)
    2220:	054001c4 	movi	r21,7
    2224:	dcc02f17 	ldw	r19,188(sp)
    2228:	00000306 	br	2238 <___svfprintf_internal_r+0x1520>
    222c:	42000204 	addi	r8,r8,8
    2230:	843ffc04 	addi	r16,r16,-16
    2234:	943f050e 	bge	r18,r16,1e4c <__alt_mem_Flash_flash_data+0xf4001e4c>
    2238:	18c00404 	addi	r3,r3,16
    223c:	10800044 	addi	r2,r2,1
    2240:	45000015 	stw	r20,0(r8)
    2244:	44800115 	stw	r18,4(r8)
    2248:	d8c02015 	stw	r3,128(sp)
    224c:	d8801f15 	stw	r2,124(sp)
    2250:	a8bff60e 	bge	r21,r2,222c <__alt_mem_Flash_flash_data+0xf400222c>
    2254:	9809883a 	mov	r4,r19
    2258:	b80b883a 	mov	r5,r23
    225c:	b00d883a 	mov	r6,r22
    2260:	0009cac0 	call	9cac <__ssprint_r>
    2264:	103b741e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2268:	d8c02017 	ldw	r3,128(sp)
    226c:	d8801f17 	ldw	r2,124(sp)
    2270:	da000404 	addi	r8,sp,16
    2274:	003fee06 	br	2230 <__alt_mem_Flash_flash_data+0xf4002230>
    2278:	8888703a 	and	r4,r17,r2
    227c:	203eb31e 	bne	r4,zero,1d4c <__alt_mem_Flash_flash_data+0xf4001d4c>
    2280:	dc001f17 	ldw	r16,124(sp)
    2284:	db003117 	ldw	r12,196(sp)
    2288:	40800115 	stw	r2,4(r8)
    228c:	84000044 	addi	r16,r16,1
    2290:	43000015 	stw	r12,0(r8)
    2294:	d8c02015 	stw	r3,128(sp)
    2298:	dc001f15 	stw	r16,124(sp)
    229c:	008001c4 	movi	r2,7
    22a0:	143f8716 	blt	r2,r16,20c0 <__alt_mem_Flash_flash_data+0xf40020c0>
    22a4:	44800204 	addi	r18,r8,8
    22a8:	003ed306 	br	1df8 <__alt_mem_Flash_flash_data+0xf4001df8>
    22ac:	d9002f17 	ldw	r4,188(sp)
    22b0:	b80b883a 	mov	r5,r23
    22b4:	b00d883a 	mov	r6,r22
    22b8:	0009cac0 	call	9cac <__ssprint_r>
    22bc:	103b5e1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    22c0:	d8c02017 	ldw	r3,128(sp)
    22c4:	dc001f17 	ldw	r16,124(sp)
    22c8:	da000404 	addi	r8,sp,16
    22cc:	003eaa06 	br	1d78 <__alt_mem_Flash_flash_data+0xf4001d78>
    22d0:	d9002f17 	ldw	r4,188(sp)
    22d4:	b80b883a 	mov	r5,r23
    22d8:	b00d883a 	mov	r6,r22
    22dc:	0009cac0 	call	9cac <__ssprint_r>
    22e0:	103b551e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    22e4:	d8c02017 	ldw	r3,128(sp)
    22e8:	dc001f17 	ldw	r16,124(sp)
    22ec:	dc800404 	addi	r18,sp,16
    22f0:	003eac06 	br	1da4 <__alt_mem_Flash_flash_data+0xf4001da4>
    22f4:	d9002f17 	ldw	r4,188(sp)
    22f8:	b80b883a 	mov	r5,r23
    22fc:	b00d883a 	mov	r6,r22
    2300:	0009cac0 	call	9cac <__ssprint_r>
    2304:	103b4c1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2308:	d8c02017 	ldw	r3,128(sp)
    230c:	da000404 	addi	r8,sp,16
    2310:	003c1506 	br	1368 <__alt_mem_Flash_flash_data+0xf4001368>
    2314:	da004015 	stw	r8,256(sp)
    2318:	da403f15 	stw	r9,252(sp)
    231c:	0009aa80 	call	9aa8 <__fpclassifyd>
    2320:	da004017 	ldw	r8,256(sp)
    2324:	da403f17 	ldw	r9,252(sp)
    2328:	1000951e 	bne	r2,zero,2580 <___svfprintf_internal_r+0x1868>
    232c:	008011c4 	movi	r2,71
    2330:	1400fb16 	blt	r2,r16,2720 <___svfprintf_internal_r+0x1a08>
    2334:	030000b4 	movhi	r12,2
    2338:	63319704 	addi	r12,r12,-14756
    233c:	db003115 	stw	r12,196(sp)
    2340:	00c000c4 	movi	r3,3
    2344:	00bfdfc4 	movi	r2,-129
    2348:	d8c02a15 	stw	r3,168(sp)
    234c:	88a2703a 	and	r17,r17,r2
    2350:	dd402783 	ldbu	r21,158(sp)
    2354:	dcc02d15 	stw	r19,180(sp)
    2358:	1825883a 	mov	r18,r3
    235c:	d8003215 	stw	zero,200(sp)
    2360:	d8003415 	stw	zero,208(sp)
    2364:	003b9806 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    2368:	1c000007 	ldb	r16,0(r3)
    236c:	1805883a 	mov	r2,r3
    2370:	003abf06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    2374:	00800084 	movi	r2,2
    2378:	003cb406 	br	164c <__alt_mem_Flash_flash_data+0xf400164c>
    237c:	88c0100c 	andi	r3,r17,64
    2380:	1800f626 	beq	r3,zero,275c <___svfprintf_internal_r+0x1a44>
    2384:	dac02d17 	ldw	r11,180(sp)
    2388:	14c0000b 	ldhu	r19,0(r2)
    238c:	0039883a 	mov	fp,zero
    2390:	5ac00104 	addi	r11,r11,4
    2394:	dac02d15 	stw	r11,180(sp)
    2398:	003cbd06 	br	1690 <__alt_mem_Flash_flash_data+0xf4001690>
    239c:	8880040c 	andi	r2,r17,16
    23a0:	1000091e 	bne	r2,zero,23c8 <___svfprintf_internal_r+0x16b0>
    23a4:	8c40100c 	andi	r17,r17,64
    23a8:	88000726 	beq	r17,zero,23c8 <___svfprintf_internal_r+0x16b0>
    23ac:	db002d17 	ldw	r12,180(sp)
    23b0:	dac03017 	ldw	r11,192(sp)
    23b4:	60800017 	ldw	r2,0(r12)
    23b8:	63000104 	addi	r12,r12,4
    23bc:	db002d15 	stw	r12,180(sp)
    23c0:	12c0000d 	sth	r11,0(r2)
    23c4:	003a8006 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    23c8:	db002d17 	ldw	r12,180(sp)
    23cc:	dac03017 	ldw	r11,192(sp)
    23d0:	60800017 	ldw	r2,0(r12)
    23d4:	63000104 	addi	r12,r12,4
    23d8:	db002d15 	stw	r12,180(sp)
    23dc:	12c00015 	stw	r11,0(r2)
    23e0:	003a7906 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    23e4:	010000b4 	movhi	r4,2
    23e8:	2131a584 	addi	r4,r4,-14698
    23ec:	d9002b15 	stw	r4,172(sp)
    23f0:	dac02b17 	ldw	r11,172(sp)
    23f4:	1c87883a 	add	r3,r3,r18
    23f8:	10800044 	addi	r2,r2,1
    23fc:	42c00015 	stw	r11,0(r8)
    2400:	44800115 	stw	r18,4(r8)
    2404:	d8c02015 	stw	r3,128(sp)
    2408:	d8801f15 	stw	r2,124(sp)
    240c:	010001c4 	movi	r4,7
    2410:	20bf4e16 	blt	r4,r2,214c <__alt_mem_Flash_flash_data+0xf400214c>
    2414:	42000204 	addi	r8,r8,8
    2418:	003f5306 	br	2168 <__alt_mem_Flash_flash_data+0xf4002168>
    241c:	010000b4 	movhi	r4,2
    2420:	2131a584 	addi	r4,r4,-14698
    2424:	d9002b15 	stw	r4,172(sp)
    2428:	003bf906 	br	1410 <__alt_mem_Flash_flash_data+0xf4001410>
    242c:	d9002f17 	ldw	r4,188(sp)
    2430:	b80b883a 	mov	r5,r23
    2434:	b00d883a 	mov	r6,r22
    2438:	0009cac0 	call	9cac <__ssprint_r>
    243c:	103afe1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2440:	d8c02017 	ldw	r3,128(sp)
    2444:	da000404 	addi	r8,sp,16
    2448:	003dc606 	br	1b64 <__alt_mem_Flash_flash_data+0xf4001b64>
    244c:	d8801f17 	ldw	r2,124(sp)
    2450:	030000b4 	movhi	r12,2
    2454:	01000044 	movi	r4,1
    2458:	18c00044 	addi	r3,r3,1
    245c:	10800044 	addi	r2,r2,1
    2460:	6331a504 	addi	r12,r12,-14700
    2464:	41000115 	stw	r4,4(r8)
    2468:	43000015 	stw	r12,0(r8)
    246c:	d8c02015 	stw	r3,128(sp)
    2470:	d8801f15 	stw	r2,124(sp)
    2474:	010001c4 	movi	r4,7
    2478:	2080ad16 	blt	r4,r2,2730 <___svfprintf_internal_r+0x1a18>
    247c:	42000204 	addi	r8,r8,8
    2480:	8000041e 	bne	r16,zero,2494 <___svfprintf_internal_r+0x177c>
    2484:	dac03317 	ldw	r11,204(sp)
    2488:	5800021e 	bne	r11,zero,2494 <___svfprintf_internal_r+0x177c>
    248c:	8880004c 	andi	r2,r17,1
    2490:	103bf626 	beq	r2,zero,146c <__alt_mem_Flash_flash_data+0xf400146c>
    2494:	db003917 	ldw	r12,228(sp)
    2498:	d8801f17 	ldw	r2,124(sp)
    249c:	dac03517 	ldw	r11,212(sp)
    24a0:	1b07883a 	add	r3,r3,r12
    24a4:	10800044 	addi	r2,r2,1
    24a8:	42c00015 	stw	r11,0(r8)
    24ac:	43000115 	stw	r12,4(r8)
    24b0:	d8c02015 	stw	r3,128(sp)
    24b4:	d8801f15 	stw	r2,124(sp)
    24b8:	010001c4 	movi	r4,7
    24bc:	20818616 	blt	r4,r2,2ad8 <___svfprintf_internal_r+0x1dc0>
    24c0:	42000204 	addi	r8,r8,8
    24c4:	0421c83a 	sub	r16,zero,r16
    24c8:	0400bc0e 	bge	zero,r16,27bc <___svfprintf_internal_r+0x1aa4>
    24cc:	04800404 	movi	r18,16
    24d0:	9400f80e 	bge	r18,r16,28b4 <___svfprintf_internal_r+0x1b9c>
    24d4:	010000b4 	movhi	r4,2
    24d8:	2131a584 	addi	r4,r4,-14698
    24dc:	d9002b15 	stw	r4,172(sp)
    24e0:	054001c4 	movi	r21,7
    24e4:	dcc02f17 	ldw	r19,188(sp)
    24e8:	00000306 	br	24f8 <___svfprintf_internal_r+0x17e0>
    24ec:	42000204 	addi	r8,r8,8
    24f0:	843ffc04 	addi	r16,r16,-16
    24f4:	9400f20e 	bge	r18,r16,28c0 <___svfprintf_internal_r+0x1ba8>
    24f8:	18c00404 	addi	r3,r3,16
    24fc:	10800044 	addi	r2,r2,1
    2500:	45000015 	stw	r20,0(r8)
    2504:	44800115 	stw	r18,4(r8)
    2508:	d8c02015 	stw	r3,128(sp)
    250c:	d8801f15 	stw	r2,124(sp)
    2510:	a8bff60e 	bge	r21,r2,24ec <__alt_mem_Flash_flash_data+0xf40024ec>
    2514:	9809883a 	mov	r4,r19
    2518:	b80b883a 	mov	r5,r23
    251c:	b00d883a 	mov	r6,r22
    2520:	0009cac0 	call	9cac <__ssprint_r>
    2524:	103ac41e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2528:	d8c02017 	ldw	r3,128(sp)
    252c:	d8801f17 	ldw	r2,124(sp)
    2530:	da000404 	addi	r8,sp,16
    2534:	003fee06 	br	24f0 <__alt_mem_Flash_flash_data+0xf40024f0>
    2538:	db002e17 	ldw	r12,184(sp)
    253c:	1805883a 	mov	r2,r3
    2540:	dac02d15 	stw	r11,180(sp)
    2544:	0319c83a 	sub	r12,zero,r12
    2548:	db002e15 	stw	r12,184(sp)
    254c:	003acf06 	br	108c <__alt_mem_Flash_flash_data+0xf400108c>
    2550:	18800044 	addi	r2,r3,1
    2554:	8c400814 	ori	r17,r17,32
    2558:	1c000047 	ldb	r16,1(r3)
    255c:	003a4406 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    2560:	d9002f17 	ldw	r4,188(sp)
    2564:	b80b883a 	mov	r5,r23
    2568:	b00d883a 	mov	r6,r22
    256c:	0009cac0 	call	9cac <__ssprint_r>
    2570:	103ab11e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2574:	d8c02017 	ldw	r3,128(sp)
    2578:	da000404 	addi	r8,sp,16
    257c:	003d8a06 	br	1ba8 <__alt_mem_Flash_flash_data+0xf4001ba8>
    2580:	057ff7c4 	movi	r21,-33
    2584:	00bfffc4 	movi	r2,-1
    2588:	856a703a 	and	r21,r16,r21
    258c:	48807126 	beq	r9,r2,2754 <___svfprintf_internal_r+0x1a3c>
    2590:	008011c4 	movi	r2,71
    2594:	a8814d26 	beq	r21,r2,2acc <___svfprintf_internal_r+0x1db4>
    2598:	db003817 	ldw	r12,224(sp)
    259c:	8ac04014 	ori	r11,r17,256
    25a0:	dac02d15 	stw	r11,180(sp)
    25a4:	60015616 	blt	r12,zero,2b00 <___svfprintf_internal_r+0x1de8>
    25a8:	dc803817 	ldw	r18,224(sp)
    25ac:	d8002a05 	stb	zero,168(sp)
    25b0:	00801984 	movi	r2,102
    25b4:	80808c26 	beq	r16,r2,27e8 <___svfprintf_internal_r+0x1ad0>
    25b8:	00801184 	movi	r2,70
    25bc:	80808a26 	beq	r16,r2,27e8 <___svfprintf_internal_r+0x1ad0>
    25c0:	00801144 	movi	r2,69
    25c4:	a8815226 	beq	r21,r2,2b10 <___svfprintf_internal_r+0x1df8>
    25c8:	4839883a 	mov	fp,r9
    25cc:	d8802604 	addi	r2,sp,152
    25d0:	d8800115 	stw	r2,4(sp)
    25d4:	d9002f17 	ldw	r4,188(sp)
    25d8:	d8802504 	addi	r2,sp,148
    25dc:	d9403717 	ldw	r5,220(sp)
    25e0:	d8800215 	stw	r2,8(sp)
    25e4:	d8802104 	addi	r2,sp,132
    25e8:	df000015 	stw	fp,0(sp)
    25ec:	d8800315 	stw	r2,12(sp)
    25f0:	900d883a 	mov	r6,r18
    25f4:	01c00084 	movi	r7,2
    25f8:	da004015 	stw	r8,256(sp)
    25fc:	da403f15 	stw	r9,252(sp)
    2600:	000502c0 	call	502c <_dtoa_r>
    2604:	d8803115 	stw	r2,196(sp)
    2608:	008019c4 	movi	r2,103
    260c:	da004017 	ldw	r8,256(sp)
    2610:	da403f17 	ldw	r9,252(sp)
    2614:	80800226 	beq	r16,r2,2620 <___svfprintf_internal_r+0x1908>
    2618:	008011c4 	movi	r2,71
    261c:	8080841e 	bne	r16,r2,2830 <___svfprintf_internal_r+0x1b18>
    2620:	8880004c 	andi	r2,r17,1
    2624:	10014f26 	beq	r2,zero,2b64 <___svfprintf_internal_r+0x1e4c>
    2628:	db003117 	ldw	r12,196(sp)
    262c:	6715883a 	add	r10,r12,fp
    2630:	d9003717 	ldw	r4,220(sp)
    2634:	900b883a 	mov	r5,r18
    2638:	000d883a 	mov	r6,zero
    263c:	000f883a 	mov	r7,zero
    2640:	da004015 	stw	r8,256(sp)
    2644:	da403f15 	stw	r9,252(sp)
    2648:	da803e15 	stw	r10,248(sp)
    264c:	000ea500 	call	ea50 <__eqdf2>
    2650:	da004017 	ldw	r8,256(sp)
    2654:	da403f17 	ldw	r9,252(sp)
    2658:	da803e17 	ldw	r10,248(sp)
    265c:	1000d926 	beq	r2,zero,29c4 <___svfprintf_internal_r+0x1cac>
    2660:	d8802117 	ldw	r2,132(sp)
    2664:	1280062e 	bgeu	r2,r10,2680 <___svfprintf_internal_r+0x1968>
    2668:	01000c04 	movi	r4,48
    266c:	10c00044 	addi	r3,r2,1
    2670:	d8c02115 	stw	r3,132(sp)
    2674:	11000005 	stb	r4,0(r2)
    2678:	d8802117 	ldw	r2,132(sp)
    267c:	12bffb36 	bltu	r2,r10,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2680:	db003117 	ldw	r12,196(sp)
    2684:	1305c83a 	sub	r2,r2,r12
    2688:	d8803315 	stw	r2,204(sp)
    268c:	008011c4 	movi	r2,71
    2690:	a880b626 	beq	r21,r2,296c <___svfprintf_internal_r+0x1c54>
    2694:	00801944 	movi	r2,101
    2698:	14017c0e 	bge	r2,r16,2c8c <___svfprintf_internal_r+0x1f74>
    269c:	00801984 	movi	r2,102
    26a0:	80812626 	beq	r16,r2,2b3c <___svfprintf_internal_r+0x1e24>
    26a4:	db002617 	ldw	r12,152(sp)
    26a8:	db003415 	stw	r12,208(sp)
    26ac:	db003417 	ldw	r12,208(sp)
    26b0:	dac03317 	ldw	r11,204(sp)
    26b4:	62c11816 	blt	r12,r11,2b18 <___svfprintf_internal_r+0x1e00>
    26b8:	8c40004c 	andi	r17,r17,1
    26bc:	88013b1e 	bne	r17,zero,2bac <___svfprintf_internal_r+0x1e94>
    26c0:	6005883a 	mov	r2,r12
    26c4:	60012516 	blt	r12,zero,2b5c <___svfprintf_internal_r+0x1e44>
    26c8:	dc803417 	ldw	r18,208(sp)
    26cc:	df002a07 	ldb	fp,168(sp)
    26d0:	e000b01e 	bne	fp,zero,2994 <___svfprintf_internal_r+0x1c7c>
    26d4:	dc402d17 	ldw	r17,180(sp)
    26d8:	dd402783 	ldbu	r21,158(sp)
    26dc:	d8802a15 	stw	r2,168(sp)
    26e0:	dcc02d15 	stw	r19,180(sp)
    26e4:	d8003215 	stw	zero,200(sp)
    26e8:	003ab706 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    26ec:	008000b4 	movhi	r2,2
    26f0:	10b19504 	addi	r2,r2,-14764
    26f4:	d8803115 	stw	r2,196(sp)
    26f8:	003bbb06 	br	15e8 <__alt_mem_Flash_flash_data+0xf40015e8>
    26fc:	d9002f17 	ldw	r4,188(sp)
    2700:	04001004 	movi	r16,64
    2704:	800b883a 	mov	r5,r16
    2708:	0007a7c0 	call	7a7c <_malloc_r>
    270c:	b8800015 	stw	r2,0(r23)
    2710:	b8800415 	stw	r2,16(r23)
    2714:	10015f26 	beq	r2,zero,2c94 <___svfprintf_internal_r+0x1f7c>
    2718:	bc000515 	stw	r16,20(r23)
    271c:	00399806 	br	d80 <__alt_mem_Flash_flash_data+0xf4000d80>
    2720:	008000b4 	movhi	r2,2
    2724:	10b19804 	addi	r2,r2,-14752
    2728:	d8803115 	stw	r2,196(sp)
    272c:	003f0406 	br	2340 <__alt_mem_Flash_flash_data+0xf4002340>
    2730:	d9002f17 	ldw	r4,188(sp)
    2734:	b80b883a 	mov	r5,r23
    2738:	b00d883a 	mov	r6,r22
    273c:	0009cac0 	call	9cac <__ssprint_r>
    2740:	103a3d1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2744:	dc002617 	ldw	r16,152(sp)
    2748:	d8c02017 	ldw	r3,128(sp)
    274c:	da000404 	addi	r8,sp,16
    2750:	003f4b06 	br	2480 <__alt_mem_Flash_flash_data+0xf4002480>
    2754:	02400184 	movi	r9,6
    2758:	003f8f06 	br	2598 <__alt_mem_Flash_flash_data+0xf4002598>
    275c:	db002d17 	ldw	r12,180(sp)
    2760:	14c00017 	ldw	r19,0(r2)
    2764:	0039883a 	mov	fp,zero
    2768:	63000104 	addi	r12,r12,4
    276c:	db002d15 	stw	r12,180(sp)
    2770:	003bc706 	br	1690 <__alt_mem_Flash_flash_data+0xf4001690>
    2774:	d8c03117 	ldw	r3,196(sp)
    2778:	b0e5c83a 	sub	r18,r22,r3
    277c:	003a8d06 	br	11b4 <__alt_mem_Flash_flash_data+0xf40011b4>
    2780:	da004015 	stw	r8,256(sp)
    2784:	0000c800 	call	c80 <strlen>
    2788:	1025883a 	mov	r18,r2
    278c:	da004017 	ldw	r8,256(sp)
    2790:	903bf20e 	bge	r18,zero,175c <__alt_mem_Flash_flash_data+0xf400175c>
    2794:	0005883a 	mov	r2,zero
    2798:	003bf006 	br	175c <__alt_mem_Flash_flash_data+0xf400175c>
    279c:	d9002f17 	ldw	r4,188(sp)
    27a0:	b80b883a 	mov	r5,r23
    27a4:	b00d883a 	mov	r6,r22
    27a8:	0009cac0 	call	9cac <__ssprint_r>
    27ac:	103a221e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    27b0:	d8c02017 	ldw	r3,128(sp)
    27b4:	d8801f17 	ldw	r2,124(sp)
    27b8:	da000404 	addi	r8,sp,16
    27bc:	db003317 	ldw	r12,204(sp)
    27c0:	dac03117 	ldw	r11,196(sp)
    27c4:	10800044 	addi	r2,r2,1
    27c8:	1b07883a 	add	r3,r3,r12
    27cc:	42c00015 	stw	r11,0(r8)
    27d0:	43000115 	stw	r12,4(r8)
    27d4:	d8c02015 	stw	r3,128(sp)
    27d8:	d8801f15 	stw	r2,124(sp)
    27dc:	010001c4 	movi	r4,7
    27e0:	20bb210e 	bge	r4,r2,1468 <__alt_mem_Flash_flash_data+0xf4001468>
    27e4:	003da206 	br	1e70 <__alt_mem_Flash_flash_data+0xf4001e70>
    27e8:	d8802604 	addi	r2,sp,152
    27ec:	d8800115 	stw	r2,4(sp)
    27f0:	d9002f17 	ldw	r4,188(sp)
    27f4:	d8802504 	addi	r2,sp,148
    27f8:	d9403717 	ldw	r5,220(sp)
    27fc:	d8800215 	stw	r2,8(sp)
    2800:	d8802104 	addi	r2,sp,132
    2804:	da400015 	stw	r9,0(sp)
    2808:	d8800315 	stw	r2,12(sp)
    280c:	900d883a 	mov	r6,r18
    2810:	01c000c4 	movi	r7,3
    2814:	da004015 	stw	r8,256(sp)
    2818:	da403f15 	stw	r9,252(sp)
    281c:	000502c0 	call	502c <_dtoa_r>
    2820:	da403f17 	ldw	r9,252(sp)
    2824:	da004017 	ldw	r8,256(sp)
    2828:	d8803115 	stw	r2,196(sp)
    282c:	4839883a 	mov	fp,r9
    2830:	dac03117 	ldw	r11,196(sp)
    2834:	00801184 	movi	r2,70
    2838:	5f15883a 	add	r10,r11,fp
    283c:	a8bf7c1e 	bne	r21,r2,2630 <__alt_mem_Flash_flash_data+0xf4002630>
    2840:	59000007 	ldb	r4,0(r11)
    2844:	00800c04 	movi	r2,48
    2848:	2080c826 	beq	r4,r2,2b6c <___svfprintf_internal_r+0x1e54>
    284c:	d8c02617 	ldw	r3,152(sp)
    2850:	50d5883a 	add	r10,r10,r3
    2854:	003f7606 	br	2630 <__alt_mem_Flash_flash_data+0xf4002630>
    2858:	010000b4 	movhi	r4,2
    285c:	2131a984 	addi	r4,r4,-14682
    2860:	d9003615 	stw	r4,216(sp)
    2864:	003a9706 	br	12c4 <__alt_mem_Flash_flash_data+0xf40012c4>
    2868:	0025883a 	mov	r18,zero
    286c:	003dc306 	br	1f7c <__alt_mem_Flash_flash_data+0xf4001f7c>
    2870:	d9002f17 	ldw	r4,188(sp)
    2874:	b80b883a 	mov	r5,r23
    2878:	b00d883a 	mov	r6,r22
    287c:	0009cac0 	call	9cac <__ssprint_r>
    2880:	1039ed1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2884:	d8c02017 	ldw	r3,128(sp)
    2888:	da000404 	addi	r8,sp,16
    288c:	003dba06 	br	1f78 <__alt_mem_Flash_flash_data+0xf4001f78>
    2890:	d9002f17 	ldw	r4,188(sp)
    2894:	b80b883a 	mov	r5,r23
    2898:	b00d883a 	mov	r6,r22
    289c:	0009cac0 	call	9cac <__ssprint_r>
    28a0:	1039e51e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    28a4:	d8802617 	ldw	r2,152(sp)
    28a8:	d8c02017 	ldw	r3,128(sp)
    28ac:	da000404 	addi	r8,sp,16
    28b0:	003e4106 	br	21b8 <__alt_mem_Flash_flash_data+0xf40021b8>
    28b4:	030000b4 	movhi	r12,2
    28b8:	6331a584 	addi	r12,r12,-14698
    28bc:	db002b15 	stw	r12,172(sp)
    28c0:	dac02b17 	ldw	r11,172(sp)
    28c4:	1c07883a 	add	r3,r3,r16
    28c8:	10800044 	addi	r2,r2,1
    28cc:	42c00015 	stw	r11,0(r8)
    28d0:	44000115 	stw	r16,4(r8)
    28d4:	d8c02015 	stw	r3,128(sp)
    28d8:	d8801f15 	stw	r2,124(sp)
    28dc:	010001c4 	movi	r4,7
    28e0:	20bfae16 	blt	r4,r2,279c <__alt_mem_Flash_flash_data+0xf400279c>
    28e4:	42000204 	addi	r8,r8,8
    28e8:	003fb406 	br	27bc <__alt_mem_Flash_flash_data+0xf40027bc>
    28ec:	0021883a 	mov	r16,zero
    28f0:	003e4306 	br	2200 <__alt_mem_Flash_flash_data+0xf4002200>
    28f4:	d9002f17 	ldw	r4,188(sp)
    28f8:	b80b883a 	mov	r5,r23
    28fc:	b00d883a 	mov	r6,r22
    2900:	0009cac0 	call	9cac <__ssprint_r>
    2904:	1039cc1e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2908:	d8802617 	ldw	r2,152(sp)
    290c:	db003317 	ldw	r12,204(sp)
    2910:	d8c02017 	ldw	r3,128(sp)
    2914:	da000404 	addi	r8,sp,16
    2918:	6085c83a 	sub	r2,r12,r2
    291c:	003e3706 	br	21fc <__alt_mem_Flash_flash_data+0xf40021fc>
    2920:	00800184 	movi	r2,6
    2924:	1240012e 	bgeu	r2,r9,292c <___svfprintf_internal_r+0x1c14>
    2928:	1013883a 	mov	r9,r2
    292c:	4825883a 	mov	r18,r9
    2930:	4805883a 	mov	r2,r9
    2934:	4800a216 	blt	r9,zero,2bc0 <___svfprintf_internal_r+0x1ea8>
    2938:	d8802a15 	stw	r2,168(sp)
    293c:	008000b4 	movhi	r2,2
    2940:	10b1a304 	addi	r2,r2,-14708
    2944:	d8803115 	stw	r2,196(sp)
    2948:	dcc02d15 	stw	r19,180(sp)
    294c:	d8003215 	stw	zero,200(sp)
    2950:	d8003415 	stw	zero,208(sp)
    2954:	0005883a 	mov	r2,zero
    2958:	003a2206 	br	11e4 <__alt_mem_Flash_flash_data+0xf40011e4>
    295c:	030000b4 	movhi	r12,2
    2960:	6331a984 	addi	r12,r12,-14682
    2964:	db003615 	stw	r12,216(sp)
    2968:	003ae506 	br	1500 <__alt_mem_Flash_flash_data+0xf4001500>
    296c:	d8c02617 	ldw	r3,152(sp)
    2970:	00bfff44 	movi	r2,-3
    2974:	18801516 	blt	r3,r2,29cc <___svfprintf_internal_r+0x1cb4>
    2978:	48c01416 	blt	r9,r3,29cc <___svfprintf_internal_r+0x1cb4>
    297c:	d8c03415 	stw	r3,208(sp)
    2980:	040019c4 	movi	r16,103
    2984:	003f4906 	br	26ac <__alt_mem_Flash_flash_data+0xf40026ac>
    2988:	05400b44 	movi	r21,45
    298c:	dd402785 	stb	r21,158(sp)
    2990:	003b1006 	br	15d4 <__alt_mem_Flash_flash_data+0xf40015d4>
    2994:	00c00b44 	movi	r3,45
    2998:	d8802a15 	stw	r2,168(sp)
    299c:	dc402d17 	ldw	r17,180(sp)
    29a0:	d8c02785 	stb	r3,158(sp)
    29a4:	dcc02d15 	stw	r19,180(sp)
    29a8:	d8003215 	stw	zero,200(sp)
    29ac:	00800b44 	movi	r2,45
    29b0:	003a0906 	br	11d8 <__alt_mem_Flash_flash_data+0xf40011d8>
    29b4:	010000b4 	movhi	r4,2
    29b8:	2131a584 	addi	r4,r4,-14698
    29bc:	d9002b15 	stw	r4,172(sp)
    29c0:	003cc306 	br	1cd0 <__alt_mem_Flash_flash_data+0xf4001cd0>
    29c4:	5005883a 	mov	r2,r10
    29c8:	003f2d06 	br	2680 <__alt_mem_Flash_flash_data+0xf4002680>
    29cc:	843fff84 	addi	r16,r16,-2
    29d0:	1f3fffc4 	addi	fp,r3,-1
    29d4:	df002615 	stw	fp,152(sp)
    29d8:	dc0022c5 	stb	r16,139(sp)
    29dc:	e000a016 	blt	fp,zero,2c60 <___svfprintf_internal_r+0x1f48>
    29e0:	00800ac4 	movi	r2,43
    29e4:	d8802305 	stb	r2,140(sp)
    29e8:	00800244 	movi	r2,9
    29ec:	1700800e 	bge	r2,fp,2bf0 <___svfprintf_internal_r+0x1ed8>
    29f0:	dd4022c4 	addi	r21,sp,139
    29f4:	dc002b15 	stw	r16,172(sp)
    29f8:	4025883a 	mov	r18,r8
    29fc:	a821883a 	mov	r16,r21
    2a00:	e009883a 	mov	r4,fp
    2a04:	01400284 	movi	r5,10
    2a08:	000d87c0 	call	d87c <__modsi3>
    2a0c:	10800c04 	addi	r2,r2,48
    2a10:	843fffc4 	addi	r16,r16,-1
    2a14:	e009883a 	mov	r4,fp
    2a18:	01400284 	movi	r5,10
    2a1c:	80800005 	stb	r2,0(r16)
    2a20:	000d8280 	call	d828 <__divsi3>
    2a24:	1039883a 	mov	fp,r2
    2a28:	00800244 	movi	r2,9
    2a2c:	173ff416 	blt	r2,fp,2a00 <__alt_mem_Flash_flash_data+0xf4002a00>
    2a30:	9011883a 	mov	r8,r18
    2a34:	e0800c04 	addi	r2,fp,48
    2a38:	8025883a 	mov	r18,r16
    2a3c:	913fffc4 	addi	r4,r18,-1
    2a40:	90bfffc5 	stb	r2,-1(r18)
    2a44:	dc002b17 	ldw	r16,172(sp)
    2a48:	25408e2e 	bgeu	r4,r21,2c84 <___svfprintf_internal_r+0x1f6c>
    2a4c:	d9402384 	addi	r5,sp,142
    2a50:	2c8bc83a 	sub	r5,r5,r18
    2a54:	d8c02344 	addi	r3,sp,141
    2a58:	a94b883a 	add	r5,r21,r5
    2a5c:	00000106 	br	2a64 <___svfprintf_internal_r+0x1d4c>
    2a60:	20800003 	ldbu	r2,0(r4)
    2a64:	18800005 	stb	r2,0(r3)
    2a68:	18c00044 	addi	r3,r3,1
    2a6c:	21000044 	addi	r4,r4,1
    2a70:	197ffb1e 	bne	r3,r5,2a60 <__alt_mem_Flash_flash_data+0xf4002a60>
    2a74:	d8802304 	addi	r2,sp,140
    2a78:	1485c83a 	sub	r2,r2,r18
    2a7c:	d8c02344 	addi	r3,sp,141
    2a80:	1885883a 	add	r2,r3,r2
    2a84:	dac03317 	ldw	r11,204(sp)
    2a88:	156bc83a 	sub	r21,r2,r21
    2a8c:	dd403a15 	stw	r21,232(sp)
    2a90:	00800044 	movi	r2,1
    2a94:	5d65883a 	add	r18,r11,r21
    2a98:	12c0770e 	bge	r2,r11,2c78 <___svfprintf_internal_r+0x1f60>
    2a9c:	94800044 	addi	r18,r18,1
    2aa0:	9005883a 	mov	r2,r18
    2aa4:	90007216 	blt	r18,zero,2c70 <___svfprintf_internal_r+0x1f58>
    2aa8:	d8003415 	stw	zero,208(sp)
    2aac:	003f0706 	br	26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2ab0:	da402a15 	stw	r9,168(sp)
    2ab4:	dd402783 	ldbu	r21,158(sp)
    2ab8:	4825883a 	mov	r18,r9
    2abc:	dcc02d15 	stw	r19,180(sp)
    2ac0:	d8003215 	stw	zero,200(sp)
    2ac4:	d8003415 	stw	zero,208(sp)
    2ac8:	0039bf06 	br	11c8 <__alt_mem_Flash_flash_data+0xf40011c8>
    2acc:	483eb21e 	bne	r9,zero,2598 <__alt_mem_Flash_flash_data+0xf4002598>
    2ad0:	9013883a 	mov	r9,r18
    2ad4:	003eb006 	br	2598 <__alt_mem_Flash_flash_data+0xf4002598>
    2ad8:	d9002f17 	ldw	r4,188(sp)
    2adc:	b80b883a 	mov	r5,r23
    2ae0:	b00d883a 	mov	r6,r22
    2ae4:	0009cac0 	call	9cac <__ssprint_r>
    2ae8:	1039531e 	bne	r2,zero,1038 <__alt_mem_Flash_flash_data+0xf4001038>
    2aec:	dc002617 	ldw	r16,152(sp)
    2af0:	d8c02017 	ldw	r3,128(sp)
    2af4:	d8801f17 	ldw	r2,124(sp)
    2af8:	da000404 	addi	r8,sp,16
    2afc:	003e7106 	br	24c4 <__alt_mem_Flash_flash_data+0xf40024c4>
    2b00:	00c00b44 	movi	r3,45
    2b04:	64a0003c 	xorhi	r18,r12,32768
    2b08:	d8c02a05 	stb	r3,168(sp)
    2b0c:	003ea806 	br	25b0 <__alt_mem_Flash_flash_data+0xf40025b0>
    2b10:	4f000044 	addi	fp,r9,1
    2b14:	003ead06 	br	25cc <__alt_mem_Flash_flash_data+0xf40025cc>
    2b18:	d8c03417 	ldw	r3,208(sp)
    2b1c:	00c0410e 	bge	zero,r3,2c24 <___svfprintf_internal_r+0x1f0c>
    2b20:	04800044 	movi	r18,1
    2b24:	dac03317 	ldw	r11,204(sp)
    2b28:	92e5883a 	add	r18,r18,r11
    2b2c:	9005883a 	mov	r2,r18
    2b30:	903ee60e 	bge	r18,zero,26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2b34:	0005883a 	mov	r2,zero
    2b38:	003ee406 	br	26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2b3c:	d8c02617 	ldw	r3,152(sp)
    2b40:	d8c03415 	stw	r3,208(sp)
    2b44:	00c0310e 	bge	zero,r3,2c0c <___svfprintf_internal_r+0x1ef4>
    2b48:	48001f1e 	bne	r9,zero,2bc8 <___svfprintf_internal_r+0x1eb0>
    2b4c:	8c40004c 	andi	r17,r17,1
    2b50:	88001d1e 	bne	r17,zero,2bc8 <___svfprintf_internal_r+0x1eb0>
    2b54:	1805883a 	mov	r2,r3
    2b58:	183edb0e 	bge	r3,zero,26c8 <__alt_mem_Flash_flash_data+0xf40026c8>
    2b5c:	0005883a 	mov	r2,zero
    2b60:	003ed906 	br	26c8 <__alt_mem_Flash_flash_data+0xf40026c8>
    2b64:	d8802117 	ldw	r2,132(sp)
    2b68:	003ec506 	br	2680 <__alt_mem_Flash_flash_data+0xf4002680>
    2b6c:	d9003717 	ldw	r4,220(sp)
    2b70:	900b883a 	mov	r5,r18
    2b74:	000d883a 	mov	r6,zero
    2b78:	000f883a 	mov	r7,zero
    2b7c:	da004015 	stw	r8,256(sp)
    2b80:	da403f15 	stw	r9,252(sp)
    2b84:	da803e15 	stw	r10,248(sp)
    2b88:	000ea500 	call	ea50 <__eqdf2>
    2b8c:	da004017 	ldw	r8,256(sp)
    2b90:	da403f17 	ldw	r9,252(sp)
    2b94:	da803e17 	ldw	r10,248(sp)
    2b98:	103f2c26 	beq	r2,zero,284c <__alt_mem_Flash_flash_data+0xf400284c>
    2b9c:	00800044 	movi	r2,1
    2ba0:	1707c83a 	sub	r3,r2,fp
    2ba4:	d8c02615 	stw	r3,152(sp)
    2ba8:	003f2906 	br	2850 <__alt_mem_Flash_flash_data+0xf4002850>
    2bac:	db003417 	ldw	r12,208(sp)
    2bb0:	64800044 	addi	r18,r12,1
    2bb4:	9005883a 	mov	r2,r18
    2bb8:	903ec40e 	bge	r18,zero,26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2bbc:	003fdd06 	br	2b34 <__alt_mem_Flash_flash_data+0xf4002b34>
    2bc0:	0005883a 	mov	r2,zero
    2bc4:	003f5c06 	br	2938 <__alt_mem_Flash_flash_data+0xf4002938>
    2bc8:	dac03417 	ldw	r11,208(sp)
    2bcc:	4a400044 	addi	r9,r9,1
    2bd0:	5a65883a 	add	r18,r11,r9
    2bd4:	9005883a 	mov	r2,r18
    2bd8:	903ebc0e 	bge	r18,zero,26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2bdc:	003fd506 	br	2b34 <__alt_mem_Flash_flash_data+0xf4002b34>
    2be0:	008000b4 	movhi	r2,2
    2be4:	10b1a584 	addi	r2,r2,-14698
    2be8:	d8802b15 	stw	r2,172(sp)
    2bec:	003d2b06 	br	209c <__alt_mem_Flash_flash_data+0xf400209c>
    2bf0:	00800c04 	movi	r2,48
    2bf4:	e0c00c04 	addi	r3,fp,48
    2bf8:	d8802345 	stb	r2,141(sp)
    2bfc:	d8c02385 	stb	r3,142(sp)
    2c00:	d88023c4 	addi	r2,sp,143
    2c04:	dd4022c4 	addi	r21,sp,139
    2c08:	003f9e06 	br	2a84 <__alt_mem_Flash_flash_data+0xf4002a84>
    2c0c:	4800081e 	bne	r9,zero,2c30 <___svfprintf_internal_r+0x1f18>
    2c10:	8c40004c 	andi	r17,r17,1
    2c14:	8800061e 	bne	r17,zero,2c30 <___svfprintf_internal_r+0x1f18>
    2c18:	00800044 	movi	r2,1
    2c1c:	1025883a 	mov	r18,r2
    2c20:	003eaa06 	br	26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2c24:	04800084 	movi	r18,2
    2c28:	90e5c83a 	sub	r18,r18,r3
    2c2c:	003fbd06 	br	2b24 <__alt_mem_Flash_flash_data+0xf4002b24>
    2c30:	4c800084 	addi	r18,r9,2
    2c34:	9005883a 	mov	r2,r18
    2c38:	903ea40e 	bge	r18,zero,26cc <__alt_mem_Flash_flash_data+0xf40026cc>
    2c3c:	003fbd06 	br	2b34 <__alt_mem_Flash_flash_data+0xf4002b34>
    2c40:	dac02d17 	ldw	r11,180(sp)
    2c44:	5a400017 	ldw	r9,0(r11)
    2c48:	5ac00104 	addi	r11,r11,4
    2c4c:	dac02d15 	stw	r11,180(sp)
    2c50:	483e410e 	bge	r9,zero,2558 <__alt_mem_Flash_flash_data+0xf4002558>
    2c54:	027fffc4 	movi	r9,-1
    2c58:	1c000047 	ldb	r16,1(r3)
    2c5c:	00388406 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    2c60:	00800b44 	movi	r2,45
    2c64:	0739c83a 	sub	fp,zero,fp
    2c68:	d8802305 	stb	r2,140(sp)
    2c6c:	003f5e06 	br	29e8 <__alt_mem_Flash_flash_data+0xf40029e8>
    2c70:	0005883a 	mov	r2,zero
    2c74:	003f8c06 	br	2aa8 <__alt_mem_Flash_flash_data+0xf4002aa8>
    2c78:	88a2703a 	and	r17,r17,r2
    2c7c:	883f8826 	beq	r17,zero,2aa0 <__alt_mem_Flash_flash_data+0xf4002aa0>
    2c80:	003f8606 	br	2a9c <__alt_mem_Flash_flash_data+0xf4002a9c>
    2c84:	d8802344 	addi	r2,sp,141
    2c88:	003f7e06 	br	2a84 <__alt_mem_Flash_flash_data+0xf4002a84>
    2c8c:	d8c02617 	ldw	r3,152(sp)
    2c90:	003f4f06 	br	29d0 <__alt_mem_Flash_flash_data+0xf40029d0>
    2c94:	dac02f17 	ldw	r11,188(sp)
    2c98:	00800304 	movi	r2,12
    2c9c:	58800015 	stw	r2,0(r11)
    2ca0:	00bfffc4 	movi	r2,-1
    2ca4:	0038e806 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>

00002ca8 <___vfprintf_internal_r>:
    2ca8:	deffb604 	addi	sp,sp,-296
    2cac:	dfc04915 	stw	ra,292(sp)
    2cb0:	ddc04715 	stw	r23,284(sp)
    2cb4:	dd804615 	stw	r22,280(sp)
    2cb8:	282f883a 	mov	r23,r5
    2cbc:	202d883a 	mov	r22,r4
    2cc0:	d9802a15 	stw	r6,168(sp)
    2cc4:	d9c02d15 	stw	r7,180(sp)
    2cc8:	df004815 	stw	fp,288(sp)
    2ccc:	dd404515 	stw	r21,276(sp)
    2cd0:	dd004415 	stw	r20,272(sp)
    2cd4:	dcc04315 	stw	r19,268(sp)
    2cd8:	dc804215 	stw	r18,264(sp)
    2cdc:	dc404115 	stw	r17,260(sp)
    2ce0:	dc004015 	stw	r16,256(sp)
    2ce4:	00078900 	call	7890 <_localeconv_r>
    2ce8:	10800017 	ldw	r2,0(r2)
    2cec:	1009883a 	mov	r4,r2
    2cf0:	d8803515 	stw	r2,212(sp)
    2cf4:	0000c800 	call	c80 <strlen>
    2cf8:	d8803815 	stw	r2,224(sp)
    2cfc:	b0000226 	beq	r22,zero,2d08 <___vfprintf_internal_r+0x60>
    2d00:	b0800e17 	ldw	r2,56(r22)
    2d04:	1000e126 	beq	r2,zero,308c <___vfprintf_internal_r+0x3e4>
    2d08:	b880030b 	ldhu	r2,12(r23)
    2d0c:	10c8000c 	andi	r3,r2,8192
    2d10:	1800061e 	bne	r3,zero,2d2c <___vfprintf_internal_r+0x84>
    2d14:	b9001917 	ldw	r4,100(r23)
    2d18:	00f7ffc4 	movi	r3,-8193
    2d1c:	10880014 	ori	r2,r2,8192
    2d20:	20c6703a 	and	r3,r4,r3
    2d24:	b880030d 	sth	r2,12(r23)
    2d28:	b8c01915 	stw	r3,100(r23)
    2d2c:	10c0020c 	andi	r3,r2,8
    2d30:	1800a726 	beq	r3,zero,2fd0 <___vfprintf_internal_r+0x328>
    2d34:	b8c00417 	ldw	r3,16(r23)
    2d38:	1800a526 	beq	r3,zero,2fd0 <___vfprintf_internal_r+0x328>
    2d3c:	1080068c 	andi	r2,r2,26
    2d40:	00c00284 	movi	r3,10
    2d44:	10c0aa26 	beq	r2,r3,2ff0 <___vfprintf_internal_r+0x348>
    2d48:	dac01e04 	addi	r11,sp,120
    2d4c:	db001dc4 	addi	r12,sp,119
    2d50:	d8800404 	addi	r2,sp,16
    2d54:	050000b4 	movhi	r20,2
    2d58:	dac02815 	stw	r11,160(sp)
    2d5c:	5b17c83a 	sub	r11,r11,r12
    2d60:	a531ad84 	addi	r20,r20,-14666
    2d64:	db002915 	stw	r12,164(sp)
    2d68:	d8801e15 	stw	r2,120(sp)
    2d6c:	d8002015 	stw	zero,128(sp)
    2d70:	d8001f15 	stw	zero,124(sp)
    2d74:	d8003315 	stw	zero,204(sp)
    2d78:	d8003715 	stw	zero,220(sp)
    2d7c:	d8003915 	stw	zero,228(sp)
    2d80:	1011883a 	mov	r8,r2
    2d84:	d8003b15 	stw	zero,236(sp)
    2d88:	d8003a15 	stw	zero,232(sp)
    2d8c:	d8002f15 	stw	zero,188(sp)
    2d90:	dac03c15 	stw	r11,240(sp)
    2d94:	db002a17 	ldw	r12,168(sp)
    2d98:	60800007 	ldb	r2,0(r12)
    2d9c:	1000be26 	beq	r2,zero,3098 <___vfprintf_internal_r+0x3f0>
    2da0:	00c00944 	movi	r3,37
    2da4:	10c0bc26 	beq	r2,r3,3098 <___vfprintf_internal_r+0x3f0>
    2da8:	6021883a 	mov	r16,r12
    2dac:	00000106 	br	2db4 <___vfprintf_internal_r+0x10c>
    2db0:	10c08426 	beq	r2,r3,2fc4 <___vfprintf_internal_r+0x31c>
    2db4:	84000044 	addi	r16,r16,1
    2db8:	80800007 	ldb	r2,0(r16)
    2dbc:	103ffc1e 	bne	r2,zero,2db0 <__alt_mem_Flash_flash_data+0xf4002db0>
    2dc0:	dac02a17 	ldw	r11,168(sp)
    2dc4:	82e3c83a 	sub	r17,r16,r11
    2dc8:	88000f26 	beq	r17,zero,2e08 <___vfprintf_internal_r+0x160>
    2dcc:	d8c02017 	ldw	r3,128(sp)
    2dd0:	d8801f17 	ldw	r2,124(sp)
    2dd4:	dac02a17 	ldw	r11,168(sp)
    2dd8:	1c47883a 	add	r3,r3,r17
    2ddc:	10800044 	addi	r2,r2,1
    2de0:	d8c02015 	stw	r3,128(sp)
    2de4:	42c00015 	stw	r11,0(r8)
    2de8:	44400115 	stw	r17,4(r8)
    2dec:	d8801f15 	stw	r2,124(sp)
    2df0:	00c001c4 	movi	r3,7
    2df4:	18809316 	blt	r3,r2,3044 <___vfprintf_internal_r+0x39c>
    2df8:	42000204 	addi	r8,r8,8
    2dfc:	db002f17 	ldw	r12,188(sp)
    2e00:	6459883a 	add	r12,r12,r17
    2e04:	db002f15 	stw	r12,188(sp)
    2e08:	80800007 	ldb	r2,0(r16)
    2e0c:	10009426 	beq	r2,zero,3060 <___vfprintf_internal_r+0x3b8>
    2e10:	80800044 	addi	r2,r16,1
    2e14:	84000047 	ldb	r16,1(r16)
    2e18:	d8002785 	stb	zero,158(sp)
    2e1c:	000d883a 	mov	r6,zero
    2e20:	027fffc4 	movi	r9,-1
    2e24:	d8002e15 	stw	zero,184(sp)
    2e28:	0023883a 	mov	r17,zero
    2e2c:	01001604 	movi	r4,88
    2e30:	01400244 	movi	r5,9
    2e34:	02800a84 	movi	r10,42
    2e38:	01c01b04 	movi	r7,108
    2e3c:	10c00044 	addi	r3,r2,1
    2e40:	80bff804 	addi	r2,r16,-32
    2e44:	2082cd36 	bltu	r4,r2,397c <___vfprintf_internal_r+0xcd4>
    2e48:	100490ba 	slli	r2,r2,2
    2e4c:	02c00034 	movhi	r11,0
    2e50:	5acb9804 	addi	r11,r11,11872
    2e54:	12c5883a 	add	r2,r2,r11
    2e58:	10800017 	ldw	r2,0(r2)
    2e5c:	1000683a 	jmp	r2
    2e60:	00003794 	movui	zero,222
    2e64:	0000397c 	xorhi	zero,zero,229
    2e68:	0000397c 	xorhi	zero,zero,229
    2e6c:	000038e4 	muli	zero,zero,227
    2e70:	0000397c 	xorhi	zero,zero,229
    2e74:	0000397c 	xorhi	zero,zero,229
    2e78:	0000397c 	xorhi	zero,zero,229
    2e7c:	0000397c 	xorhi	zero,zero,229
    2e80:	0000397c 	xorhi	zero,zero,229
    2e84:	0000397c 	xorhi	zero,zero,229
    2e88:	000037b4 	movhi	zero,222
    2e8c:	000037e0 	cmpeqi	zero,zero,223
    2e90:	0000397c 	xorhi	zero,zero,229
    2e94:	000030a0 	cmpeqi	zero,zero,194
    2e98:	000030b0 	cmpltui	zero,zero,194
    2e9c:	0000397c 	xorhi	zero,zero,229
    2ea0:	000030f0 	cmpltui	zero,zero,195
    2ea4:	00003100 	call	310 <putChar+0x18>
    2ea8:	00003100 	call	310 <putChar+0x18>
    2eac:	00003100 	call	310 <putChar+0x18>
    2eb0:	00003100 	call	310 <putChar+0x18>
    2eb4:	00003100 	call	310 <putChar+0x18>
    2eb8:	00003100 	call	310 <putChar+0x18>
    2ebc:	00003100 	call	310 <putChar+0x18>
    2ec0:	00003100 	call	310 <putChar+0x18>
    2ec4:	00003100 	call	310 <putChar+0x18>
    2ec8:	0000397c 	xorhi	zero,zero,229
    2ecc:	0000397c 	xorhi	zero,zero,229
    2ed0:	0000397c 	xorhi	zero,zero,229
    2ed4:	0000397c 	xorhi	zero,zero,229
    2ed8:	0000397c 	xorhi	zero,zero,229
    2edc:	0000397c 	xorhi	zero,zero,229
    2ee0:	0000397c 	xorhi	zero,zero,229
    2ee4:	0000397c 	xorhi	zero,zero,229
    2ee8:	0000397c 	xorhi	zero,zero,229
    2eec:	0000397c 	xorhi	zero,zero,229
    2ef0:	00003134 	movhi	zero,196
    2ef4:	000035a4 	muli	zero,zero,214
    2ef8:	0000397c 	xorhi	zero,zero,229
    2efc:	000035a4 	muli	zero,zero,214
    2f00:	0000397c 	xorhi	zero,zero,229
    2f04:	0000397c 	xorhi	zero,zero,229
    2f08:	0000397c 	xorhi	zero,zero,229
    2f0c:	0000397c 	xorhi	zero,zero,229
    2f10:	00003690 	cmplti	zero,zero,218
    2f14:	0000397c 	xorhi	zero,zero,229
    2f18:	0000397c 	xorhi	zero,zero,229
    2f1c:	00003538 	rdprs	zero,zero,212
    2f20:	0000397c 	xorhi	zero,zero,229
    2f24:	0000397c 	xorhi	zero,zero,229
    2f28:	0000397c 	xorhi	zero,zero,229
    2f2c:	0000397c 	xorhi	zero,zero,229
    2f30:	0000397c 	xorhi	zero,zero,229
    2f34:	00003574 	movhi	zero,213
    2f38:	0000397c 	xorhi	zero,zero,229
    2f3c:	0000397c 	xorhi	zero,zero,229
    2f40:	00003738 	rdprs	zero,zero,220
    2f44:	0000397c 	xorhi	zero,zero,229
    2f48:	0000397c 	xorhi	zero,zero,229
    2f4c:	0000397c 	xorhi	zero,zero,229
    2f50:	0000397c 	xorhi	zero,zero,229
    2f54:	0000397c 	xorhi	zero,zero,229
    2f58:	0000397c 	xorhi	zero,zero,229
    2f5c:	0000397c 	xorhi	zero,zero,229
    2f60:	0000397c 	xorhi	zero,zero,229
    2f64:	0000397c 	xorhi	zero,zero,229
    2f68:	0000397c 	xorhi	zero,zero,229
    2f6c:	000037f0 	cmpltui	zero,zero,223
    2f70:	000036a0 	cmpeqi	zero,zero,218
    2f74:	000035a4 	muli	zero,zero,214
    2f78:	000035a4 	muli	zero,zero,214
    2f7c:	000035a4 	muli	zero,zero,214
    2f80:	000036e0 	cmpeqi	zero,zero,219
    2f84:	000036a0 	cmpeqi	zero,zero,218
    2f88:	0000397c 	xorhi	zero,zero,229
    2f8c:	0000397c 	xorhi	zero,zero,229
    2f90:	000036f0 	cmpltui	zero,zero,219
    2f94:	0000397c 	xorhi	zero,zero,229
    2f98:	00003704 	movi	zero,220
    2f9c:	00003940 	call	394 <sendCommand+0x50>
    2fa0:	00003648 	cmpgei	zero,zero,217
    2fa4:	000038f4 	movhi	zero,227
    2fa8:	0000397c 	xorhi	zero,zero,229
    2fac:	00003830 	cmpltui	zero,zero,224
    2fb0:	0000397c 	xorhi	zero,zero,229
    2fb4:	00003904 	movi	zero,228
    2fb8:	0000397c 	xorhi	zero,zero,229
    2fbc:	0000397c 	xorhi	zero,zero,229
    2fc0:	000038a4 	muli	zero,zero,226
    2fc4:	db002a17 	ldw	r12,168(sp)
    2fc8:	8323c83a 	sub	r17,r16,r12
    2fcc:	003f7e06 	br	2dc8 <__alt_mem_Flash_flash_data+0xf4002dc8>
    2fd0:	b009883a 	mov	r4,r22
    2fd4:	b80b883a 	mov	r5,r23
    2fd8:	0004cd80 	call	4cd8 <__swsetup_r>
    2fdc:	10000c1e 	bne	r2,zero,3010 <___vfprintf_internal_r+0x368>
    2fe0:	b880030b 	ldhu	r2,12(r23)
    2fe4:	00c00284 	movi	r3,10
    2fe8:	1080068c 	andi	r2,r2,26
    2fec:	10ff561e 	bne	r2,r3,2d48 <__alt_mem_Flash_flash_data+0xf4002d48>
    2ff0:	b880038f 	ldh	r2,14(r23)
    2ff4:	103f5416 	blt	r2,zero,2d48 <__alt_mem_Flash_flash_data+0xf4002d48>
    2ff8:	d9802a17 	ldw	r6,168(sp)
    2ffc:	d9c02d17 	ldw	r7,180(sp)
    3000:	b009883a 	mov	r4,r22
    3004:	b80b883a 	mov	r5,r23
    3008:	0004c1c0 	call	4c1c <__sbprintf>
    300c:	00000106 	br	3014 <___vfprintf_internal_r+0x36c>
    3010:	00bfffc4 	movi	r2,-1
    3014:	dfc04917 	ldw	ra,292(sp)
    3018:	df004817 	ldw	fp,288(sp)
    301c:	ddc04717 	ldw	r23,284(sp)
    3020:	dd804617 	ldw	r22,280(sp)
    3024:	dd404517 	ldw	r21,276(sp)
    3028:	dd004417 	ldw	r20,272(sp)
    302c:	dcc04317 	ldw	r19,268(sp)
    3030:	dc804217 	ldw	r18,264(sp)
    3034:	dc404117 	ldw	r17,260(sp)
    3038:	dc004017 	ldw	r16,256(sp)
    303c:	dec04a04 	addi	sp,sp,296
    3040:	f800283a 	ret
    3044:	b009883a 	mov	r4,r22
    3048:	b80b883a 	mov	r5,r23
    304c:	d9801e04 	addi	r6,sp,120
    3050:	000afac0 	call	afac <__sprint_r>
    3054:	1000081e 	bne	r2,zero,3078 <___vfprintf_internal_r+0x3d0>
    3058:	da000404 	addi	r8,sp,16
    305c:	003f6706 	br	2dfc <__alt_mem_Flash_flash_data+0xf4002dfc>
    3060:	d8802017 	ldw	r2,128(sp)
    3064:	10000426 	beq	r2,zero,3078 <___vfprintf_internal_r+0x3d0>
    3068:	b009883a 	mov	r4,r22
    306c:	b80b883a 	mov	r5,r23
    3070:	d9801e04 	addi	r6,sp,120
    3074:	000afac0 	call	afac <__sprint_r>
    3078:	b880030b 	ldhu	r2,12(r23)
    307c:	1080100c 	andi	r2,r2,64
    3080:	103fe31e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3084:	d8802f17 	ldw	r2,188(sp)
    3088:	003fe206 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    308c:	b009883a 	mov	r4,r22
    3090:	0006d380 	call	6d38 <__sinit>
    3094:	003f1c06 	br	2d08 <__alt_mem_Flash_flash_data+0xf4002d08>
    3098:	dc002a17 	ldw	r16,168(sp)
    309c:	003f5a06 	br	2e08 <__alt_mem_Flash_flash_data+0xf4002e08>
    30a0:	1805883a 	mov	r2,r3
    30a4:	8c400114 	ori	r17,r17,4
    30a8:	1c000007 	ldb	r16,0(r3)
    30ac:	003f6306 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    30b0:	1c000007 	ldb	r16,0(r3)
    30b4:	18800044 	addi	r2,r3,1
    30b8:	8286ad26 	beq	r16,r10,4b70 <___vfprintf_internal_r+0x1ec8>
    30bc:	82fff404 	addi	r11,r16,-48
    30c0:	1007883a 	mov	r3,r2
    30c4:	0013883a 	mov	r9,zero
    30c8:	2aff5d36 	bltu	r5,r11,2e40 <__alt_mem_Flash_flash_data+0xf4002e40>
    30cc:	1c000007 	ldb	r16,0(r3)
    30d0:	4a4002a4 	muli	r9,r9,10
    30d4:	18c00044 	addi	r3,r3,1
    30d8:	5a53883a 	add	r9,r11,r9
    30dc:	82fff404 	addi	r11,r16,-48
    30e0:	2afffa2e 	bgeu	r5,r11,30cc <__alt_mem_Flash_flash_data+0xf40030cc>
    30e4:	483f560e 	bge	r9,zero,2e40 <__alt_mem_Flash_flash_data+0xf4002e40>
    30e8:	027fffc4 	movi	r9,-1
    30ec:	003f5406 	br	2e40 <__alt_mem_Flash_flash_data+0xf4002e40>
    30f0:	8c402014 	ori	r17,r17,128
    30f4:	1805883a 	mov	r2,r3
    30f8:	1c000007 	ldb	r16,0(r3)
    30fc:	003f4f06 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    3100:	1805883a 	mov	r2,r3
    3104:	d8002e15 	stw	zero,184(sp)
    3108:	82fff404 	addi	r11,r16,-48
    310c:	0019883a 	mov	r12,zero
    3110:	14000007 	ldb	r16,0(r2)
    3114:	630002a4 	muli	r12,r12,10
    3118:	18c00044 	addi	r3,r3,1
    311c:	1805883a 	mov	r2,r3
    3120:	62d9883a 	add	r12,r12,r11
    3124:	82fff404 	addi	r11,r16,-48
    3128:	2afff92e 	bgeu	r5,r11,3110 <__alt_mem_Flash_flash_data+0xf4003110>
    312c:	db002e15 	stw	r12,184(sp)
    3130:	003f4306 	br	2e40 <__alt_mem_Flash_flash_data+0xf4002e40>
    3134:	8c400414 	ori	r17,r17,16
    3138:	d8c02a15 	stw	r3,168(sp)
    313c:	d9802785 	stb	r6,158(sp)
    3140:	8880080c 	andi	r2,r17,32
    3144:	d8c02d17 	ldw	r3,180(sp)
    3148:	10015a26 	beq	r2,zero,36b4 <___vfprintf_internal_r+0xa0c>
    314c:	db002d17 	ldw	r12,180(sp)
    3150:	18800117 	ldw	r2,4(r3)
    3154:	1cc00017 	ldw	r19,0(r3)
    3158:	63000204 	addi	r12,r12,8
    315c:	db002d15 	stw	r12,180(sp)
    3160:	1039883a 	mov	fp,r2
    3164:	10044516 	blt	r2,zero,427c <___vfprintf_internal_r+0x15d4>
    3168:	dd402783 	ldbu	r21,158(sp)
    316c:	da403215 	stw	r9,200(sp)
    3170:	00800044 	movi	r2,1
    3174:	9f06b03a 	or	r3,r19,fp
    3178:	48000216 	blt	r9,zero,3184 <___vfprintf_internal_r+0x4dc>
    317c:	013fdfc4 	movi	r4,-129
    3180:	8922703a 	and	r17,r17,r4
    3184:	1802071e 	bne	r3,zero,39a4 <___vfprintf_internal_r+0xcfc>
    3188:	4802fa26 	beq	r9,zero,3d74 <___vfprintf_internal_r+0x10cc>
    318c:	10803fcc 	andi	r2,r2,255
    3190:	00c00044 	movi	r3,1
    3194:	10c22926 	beq	r2,r3,3a3c <___vfprintf_internal_r+0xd94>
    3198:	00c00084 	movi	r3,2
    319c:	10c31726 	beq	r2,r3,3dfc <___vfprintf_internal_r+0x1154>
    31a0:	d8c01e04 	addi	r3,sp,120
    31a4:	9808d0fa 	srli	r4,r19,3
    31a8:	e00a977a 	slli	r5,fp,29
    31ac:	e038d0fa 	srli	fp,fp,3
    31b0:	9cc001cc 	andi	r19,r19,7
    31b4:	98800c04 	addi	r2,r19,48
    31b8:	18ffffc4 	addi	r3,r3,-1
    31bc:	2926b03a 	or	r19,r5,r4
    31c0:	18800005 	stb	r2,0(r3)
    31c4:	9f08b03a 	or	r4,r19,fp
    31c8:	203ff61e 	bne	r4,zero,31a4 <__alt_mem_Flash_flash_data+0xf40031a4>
    31cc:	8900004c 	andi	r4,r17,1
    31d0:	d8c03115 	stw	r3,196(sp)
    31d4:	2003931e 	bne	r4,zero,4024 <___vfprintf_internal_r+0x137c>
    31d8:	dac02817 	ldw	r11,160(sp)
    31dc:	58e5c83a 	sub	r18,r11,r3
    31e0:	9005883a 	mov	r2,r18
    31e4:	9240010e 	bge	r18,r9,31ec <___vfprintf_internal_r+0x544>
    31e8:	4805883a 	mov	r2,r9
    31ec:	d8802b15 	stw	r2,172(sp)
    31f0:	d8003415 	stw	zero,208(sp)
    31f4:	a8803fcc 	andi	r2,r21,255
    31f8:	1080201c 	xori	r2,r2,128
    31fc:	10bfe004 	addi	r2,r2,-128
    3200:	10000326 	beq	r2,zero,3210 <___vfprintf_internal_r+0x568>
    3204:	db002b17 	ldw	r12,172(sp)
    3208:	63000044 	addi	r12,r12,1
    320c:	db002b15 	stw	r12,172(sp)
    3210:	88c0008c 	andi	r3,r17,2
    3214:	d8c02c15 	stw	r3,176(sp)
    3218:	18000326 	beq	r3,zero,3228 <___vfprintf_internal_r+0x580>
    321c:	dac02b17 	ldw	r11,172(sp)
    3220:	5ac00084 	addi	r11,r11,2
    3224:	dac02b15 	stw	r11,172(sp)
    3228:	8b00210c 	andi	r12,r17,132
    322c:	db003015 	stw	r12,192(sp)
    3230:	6001da1e 	bne	r12,zero,399c <___vfprintf_internal_r+0xcf4>
    3234:	dac02e17 	ldw	r11,184(sp)
    3238:	db002b17 	ldw	r12,172(sp)
    323c:	5b39c83a 	sub	fp,r11,r12
    3240:	0701d60e 	bge	zero,fp,399c <___vfprintf_internal_r+0xcf4>
    3244:	02400404 	movi	r9,16
    3248:	d8c02017 	ldw	r3,128(sp)
    324c:	d8801f17 	ldw	r2,124(sp)
    3250:	4f053c0e 	bge	r9,fp,4744 <___vfprintf_internal_r+0x1a9c>
    3254:	014000b4 	movhi	r5,2
    3258:	2971b184 	addi	r5,r5,-14650
    325c:	d9403615 	stw	r5,216(sp)
    3260:	482b883a 	mov	r21,r9
    3264:	04c001c4 	movi	r19,7
    3268:	00000306 	br	3278 <___vfprintf_internal_r+0x5d0>
    326c:	e73ffc04 	addi	fp,fp,-16
    3270:	42000204 	addi	r8,r8,8
    3274:	af00130e 	bge	r21,fp,32c4 <___vfprintf_internal_r+0x61c>
    3278:	02c000b4 	movhi	r11,2
    327c:	18c00404 	addi	r3,r3,16
    3280:	10800044 	addi	r2,r2,1
    3284:	5af1b184 	addi	r11,r11,-14650
    3288:	42c00015 	stw	r11,0(r8)
    328c:	45400115 	stw	r21,4(r8)
    3290:	d8c02015 	stw	r3,128(sp)
    3294:	d8801f15 	stw	r2,124(sp)
    3298:	98bff40e 	bge	r19,r2,326c <__alt_mem_Flash_flash_data+0xf400326c>
    329c:	b009883a 	mov	r4,r22
    32a0:	b80b883a 	mov	r5,r23
    32a4:	d9801e04 	addi	r6,sp,120
    32a8:	000afac0 	call	afac <__sprint_r>
    32ac:	103f721e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    32b0:	e73ffc04 	addi	fp,fp,-16
    32b4:	d8c02017 	ldw	r3,128(sp)
    32b8:	d8801f17 	ldw	r2,124(sp)
    32bc:	da000404 	addi	r8,sp,16
    32c0:	af3fed16 	blt	r21,fp,3278 <__alt_mem_Flash_flash_data+0xf4003278>
    32c4:	db003617 	ldw	r12,216(sp)
    32c8:	e0c7883a 	add	r3,fp,r3
    32cc:	10800044 	addi	r2,r2,1
    32d0:	43000015 	stw	r12,0(r8)
    32d4:	47000115 	stw	fp,4(r8)
    32d8:	d8c02015 	stw	r3,128(sp)
    32dc:	d8801f15 	stw	r2,124(sp)
    32e0:	010001c4 	movi	r4,7
    32e4:	20830e16 	blt	r4,r2,3f20 <___vfprintf_internal_r+0x1278>
    32e8:	d8802787 	ldb	r2,158(sp)
    32ec:	42000204 	addi	r8,r8,8
    32f0:	10000c26 	beq	r2,zero,3324 <___vfprintf_internal_r+0x67c>
    32f4:	d8801f17 	ldw	r2,124(sp)
    32f8:	d9002784 	addi	r4,sp,158
    32fc:	18c00044 	addi	r3,r3,1
    3300:	10800044 	addi	r2,r2,1
    3304:	41000015 	stw	r4,0(r8)
    3308:	01000044 	movi	r4,1
    330c:	41000115 	stw	r4,4(r8)
    3310:	d8c02015 	stw	r3,128(sp)
    3314:	d8801f15 	stw	r2,124(sp)
    3318:	010001c4 	movi	r4,7
    331c:	2082a716 	blt	r4,r2,3dbc <___vfprintf_internal_r+0x1114>
    3320:	42000204 	addi	r8,r8,8
    3324:	dac02c17 	ldw	r11,176(sp)
    3328:	58000c26 	beq	r11,zero,335c <___vfprintf_internal_r+0x6b4>
    332c:	d8801f17 	ldw	r2,124(sp)
    3330:	d9002704 	addi	r4,sp,156
    3334:	18c00084 	addi	r3,r3,2
    3338:	10800044 	addi	r2,r2,1
    333c:	41000015 	stw	r4,0(r8)
    3340:	01000084 	movi	r4,2
    3344:	41000115 	stw	r4,4(r8)
    3348:	d8c02015 	stw	r3,128(sp)
    334c:	d8801f15 	stw	r2,124(sp)
    3350:	010001c4 	movi	r4,7
    3354:	2082a116 	blt	r4,r2,3ddc <___vfprintf_internal_r+0x1134>
    3358:	42000204 	addi	r8,r8,8
    335c:	db003017 	ldw	r12,192(sp)
    3360:	00802004 	movi	r2,128
    3364:	60820326 	beq	r12,r2,3b74 <___vfprintf_internal_r+0xecc>
    3368:	db003217 	ldw	r12,200(sp)
    336c:	64abc83a 	sub	r21,r12,r18
    3370:	0540260e 	bge	zero,r21,340c <___vfprintf_internal_r+0x764>
    3374:	07000404 	movi	fp,16
    3378:	d8801f17 	ldw	r2,124(sp)
    337c:	e544570e 	bge	fp,r21,44dc <___vfprintf_internal_r+0x1834>
    3380:	014000b4 	movhi	r5,2
    3384:	2971ad84 	addi	r5,r5,-14666
    3388:	d9402c15 	stw	r5,176(sp)
    338c:	04c001c4 	movi	r19,7
    3390:	00000306 	br	33a0 <___vfprintf_internal_r+0x6f8>
    3394:	ad7ffc04 	addi	r21,r21,-16
    3398:	42000204 	addi	r8,r8,8
    339c:	e540110e 	bge	fp,r21,33e4 <___vfprintf_internal_r+0x73c>
    33a0:	18c00404 	addi	r3,r3,16
    33a4:	10800044 	addi	r2,r2,1
    33a8:	45000015 	stw	r20,0(r8)
    33ac:	47000115 	stw	fp,4(r8)
    33b0:	d8c02015 	stw	r3,128(sp)
    33b4:	d8801f15 	stw	r2,124(sp)
    33b8:	98bff60e 	bge	r19,r2,3394 <__alt_mem_Flash_flash_data+0xf4003394>
    33bc:	b009883a 	mov	r4,r22
    33c0:	b80b883a 	mov	r5,r23
    33c4:	d9801e04 	addi	r6,sp,120
    33c8:	000afac0 	call	afac <__sprint_r>
    33cc:	103f2a1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    33d0:	ad7ffc04 	addi	r21,r21,-16
    33d4:	d8c02017 	ldw	r3,128(sp)
    33d8:	d8801f17 	ldw	r2,124(sp)
    33dc:	da000404 	addi	r8,sp,16
    33e0:	e57fef16 	blt	fp,r21,33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    33e4:	dac02c17 	ldw	r11,176(sp)
    33e8:	1d47883a 	add	r3,r3,r21
    33ec:	10800044 	addi	r2,r2,1
    33f0:	42c00015 	stw	r11,0(r8)
    33f4:	45400115 	stw	r21,4(r8)
    33f8:	d8c02015 	stw	r3,128(sp)
    33fc:	d8801f15 	stw	r2,124(sp)
    3400:	010001c4 	movi	r4,7
    3404:	20826516 	blt	r4,r2,3d9c <___vfprintf_internal_r+0x10f4>
    3408:	42000204 	addi	r8,r8,8
    340c:	8880400c 	andi	r2,r17,256
    3410:	1001901e 	bne	r2,zero,3a54 <___vfprintf_internal_r+0xdac>
    3414:	d8801f17 	ldw	r2,124(sp)
    3418:	db003117 	ldw	r12,196(sp)
    341c:	1c87883a 	add	r3,r3,r18
    3420:	10800044 	addi	r2,r2,1
    3424:	43000015 	stw	r12,0(r8)
    3428:	44800115 	stw	r18,4(r8)
    342c:	d8c02015 	stw	r3,128(sp)
    3430:	d8801f15 	stw	r2,124(sp)
    3434:	010001c4 	movi	r4,7
    3438:	20824016 	blt	r4,r2,3d3c <___vfprintf_internal_r+0x1094>
    343c:	42000204 	addi	r8,r8,8
    3440:	8c40010c 	andi	r17,r17,4
    3444:	88003126 	beq	r17,zero,350c <___vfprintf_internal_r+0x864>
    3448:	db002e17 	ldw	r12,184(sp)
    344c:	dac02b17 	ldw	r11,172(sp)
    3450:	62e1c83a 	sub	r16,r12,r11
    3454:	04002d0e 	bge	zero,r16,350c <___vfprintf_internal_r+0x864>
    3458:	04400404 	movi	r17,16
    345c:	d8801f17 	ldw	r2,124(sp)
    3460:	8c05150e 	bge	r17,r16,48b8 <___vfprintf_internal_r+0x1c10>
    3464:	010000b4 	movhi	r4,2
    3468:	2131b184 	addi	r4,r4,-14650
    346c:	d9003615 	stw	r4,216(sp)
    3470:	048001c4 	movi	r18,7
    3474:	00000306 	br	3484 <___vfprintf_internal_r+0x7dc>
    3478:	843ffc04 	addi	r16,r16,-16
    347c:	42000204 	addi	r8,r8,8
    3480:	8c00130e 	bge	r17,r16,34d0 <___vfprintf_internal_r+0x828>
    3484:	014000b4 	movhi	r5,2
    3488:	18c00404 	addi	r3,r3,16
    348c:	10800044 	addi	r2,r2,1
    3490:	2971b184 	addi	r5,r5,-14650
    3494:	41400015 	stw	r5,0(r8)
    3498:	44400115 	stw	r17,4(r8)
    349c:	d8c02015 	stw	r3,128(sp)
    34a0:	d8801f15 	stw	r2,124(sp)
    34a4:	90bff40e 	bge	r18,r2,3478 <__alt_mem_Flash_flash_data+0xf4003478>
    34a8:	b009883a 	mov	r4,r22
    34ac:	b80b883a 	mov	r5,r23
    34b0:	d9801e04 	addi	r6,sp,120
    34b4:	000afac0 	call	afac <__sprint_r>
    34b8:	103eef1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    34bc:	843ffc04 	addi	r16,r16,-16
    34c0:	d8c02017 	ldw	r3,128(sp)
    34c4:	d8801f17 	ldw	r2,124(sp)
    34c8:	da000404 	addi	r8,sp,16
    34cc:	8c3fed16 	blt	r17,r16,3484 <__alt_mem_Flash_flash_data+0xf4003484>
    34d0:	dac03617 	ldw	r11,216(sp)
    34d4:	1c07883a 	add	r3,r3,r16
    34d8:	10800044 	addi	r2,r2,1
    34dc:	42c00015 	stw	r11,0(r8)
    34e0:	44000115 	stw	r16,4(r8)
    34e4:	d8c02015 	stw	r3,128(sp)
    34e8:	d8801f15 	stw	r2,124(sp)
    34ec:	010001c4 	movi	r4,7
    34f0:	2080060e 	bge	r4,r2,350c <___vfprintf_internal_r+0x864>
    34f4:	b009883a 	mov	r4,r22
    34f8:	b80b883a 	mov	r5,r23
    34fc:	d9801e04 	addi	r6,sp,120
    3500:	000afac0 	call	afac <__sprint_r>
    3504:	103edc1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3508:	d8c02017 	ldw	r3,128(sp)
    350c:	d8802b17 	ldw	r2,172(sp)
    3510:	db002e17 	ldw	r12,184(sp)
    3514:	1300010e 	bge	r2,r12,351c <___vfprintf_internal_r+0x874>
    3518:	6005883a 	mov	r2,r12
    351c:	dac02f17 	ldw	r11,188(sp)
    3520:	5897883a 	add	r11,r11,r2
    3524:	dac02f15 	stw	r11,188(sp)
    3528:	18020c1e 	bne	r3,zero,3d5c <___vfprintf_internal_r+0x10b4>
    352c:	d8001f15 	stw	zero,124(sp)
    3530:	da000404 	addi	r8,sp,16
    3534:	003e1706 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    3538:	8c400414 	ori	r17,r17,16
    353c:	d8c02a15 	stw	r3,168(sp)
    3540:	8880080c 	andi	r2,r17,32
    3544:	10010126 	beq	r2,zero,394c <___vfprintf_internal_r+0xca4>
    3548:	db002d17 	ldw	r12,180(sp)
    354c:	0005883a 	mov	r2,zero
    3550:	64c00017 	ldw	r19,0(r12)
    3554:	67000117 	ldw	fp,4(r12)
    3558:	63000204 	addi	r12,r12,8
    355c:	db002d15 	stw	r12,180(sp)
    3560:	9f06b03a 	or	r3,r19,fp
    3564:	d8002785 	stb	zero,158(sp)
    3568:	da403215 	stw	r9,200(sp)
    356c:	002b883a 	mov	r21,zero
    3570:	003f0106 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3574:	8c400414 	ori	r17,r17,16
    3578:	d8c02a15 	stw	r3,168(sp)
    357c:	8880080c 	andi	r2,r17,32
    3580:	1000e326 	beq	r2,zero,3910 <___vfprintf_internal_r+0xc68>
    3584:	dac02d17 	ldw	r11,180(sp)
    3588:	00800044 	movi	r2,1
    358c:	5cc00017 	ldw	r19,0(r11)
    3590:	5f000117 	ldw	fp,4(r11)
    3594:	5ac00204 	addi	r11,r11,8
    3598:	dac02d15 	stw	r11,180(sp)
    359c:	9f06b03a 	or	r3,r19,fp
    35a0:	003ff006 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    35a4:	db002d17 	ldw	r12,180(sp)
    35a8:	dac02d17 	ldw	r11,180(sp)
    35ac:	d8c02a15 	stw	r3,168(sp)
    35b0:	63000017 	ldw	r12,0(r12)
    35b4:	5ac00117 	ldw	r11,4(r11)
    35b8:	d9802785 	stb	r6,158(sp)
    35bc:	6009883a 	mov	r4,r12
    35c0:	580b883a 	mov	r5,r11
    35c4:	db003715 	stw	r12,220(sp)
    35c8:	da003f15 	stw	r8,252(sp)
    35cc:	da403e15 	stw	r9,248(sp)
    35d0:	dac03915 	stw	r11,228(sp)
    35d4:	0009aa80 	call	9aa8 <__fpclassifyd>
    35d8:	db002d17 	ldw	r12,180(sp)
    35dc:	04800044 	movi	r18,1
    35e0:	da003f17 	ldw	r8,252(sp)
    35e4:	64c00204 	addi	r19,r12,8
    35e8:	da403e17 	ldw	r9,248(sp)
    35ec:	d9003717 	ldw	r4,220(sp)
    35f0:	d9403917 	ldw	r5,228(sp)
    35f4:	14832b1e 	bne	r2,r18,42a4 <___vfprintf_internal_r+0x15fc>
    35f8:	000d883a 	mov	r6,zero
    35fc:	000f883a 	mov	r7,zero
    3600:	000ebb40 	call	ebb4 <__ledf2>
    3604:	da003f17 	ldw	r8,252(sp)
    3608:	1004b716 	blt	r2,zero,48e8 <___vfprintf_internal_r+0x1c40>
    360c:	dd402783 	ldbu	r21,158(sp)
    3610:	008011c4 	movi	r2,71
    3614:	14040e0e 	bge	r2,r16,4650 <___vfprintf_internal_r+0x19a8>
    3618:	00c000b4 	movhi	r3,2
    361c:	18f19604 	addi	r3,r3,-14760
    3620:	d8c03115 	stw	r3,196(sp)
    3624:	02c000c4 	movi	r11,3
    3628:	00bfdfc4 	movi	r2,-129
    362c:	dac02b15 	stw	r11,172(sp)
    3630:	88a2703a 	and	r17,r17,r2
    3634:	dcc02d15 	stw	r19,180(sp)
    3638:	5825883a 	mov	r18,r11
    363c:	d8003215 	stw	zero,200(sp)
    3640:	d8003415 	stw	zero,208(sp)
    3644:	003eeb06 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    3648:	db002d17 	ldw	r12,180(sp)
    364c:	00800c04 	movi	r2,48
    3650:	d8802705 	stb	r2,156(sp)
    3654:	64c00017 	ldw	r19,0(r12)
    3658:	00801e04 	movi	r2,120
    365c:	d8802745 	stb	r2,157(sp)
    3660:	008000b4 	movhi	r2,2
    3664:	10b19e04 	addi	r2,r2,-14728
    3668:	63000104 	addi	r12,r12,4
    366c:	d8c02a15 	stw	r3,168(sp)
    3670:	d8803b15 	stw	r2,236(sp)
    3674:	0039883a 	mov	fp,zero
    3678:	8c400094 	ori	r17,r17,2
    367c:	db002d15 	stw	r12,180(sp)
    3680:	00800084 	movi	r2,2
    3684:	04001e04 	movi	r16,120
    3688:	9807883a 	mov	r3,r19
    368c:	003fb506 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    3690:	8c400214 	ori	r17,r17,8
    3694:	1805883a 	mov	r2,r3
    3698:	1c000007 	ldb	r16,0(r3)
    369c:	003de706 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    36a0:	d8c02a15 	stw	r3,168(sp)
    36a4:	d9802785 	stb	r6,158(sp)
    36a8:	8880080c 	andi	r2,r17,32
    36ac:	d8c02d17 	ldw	r3,180(sp)
    36b0:	103ea61e 	bne	r2,zero,314c <__alt_mem_Flash_flash_data+0xf400314c>
    36b4:	8880040c 	andi	r2,r17,16
    36b8:	1002221e 	bne	r2,zero,3f44 <___vfprintf_internal_r+0x129c>
    36bc:	8880100c 	andi	r2,r17,64
    36c0:	10022026 	beq	r2,zero,3f44 <___vfprintf_internal_r+0x129c>
    36c4:	1cc0000f 	ldh	r19,0(r3)
    36c8:	db002d17 	ldw	r12,180(sp)
    36cc:	9839d7fa 	srai	fp,r19,31
    36d0:	63000104 	addi	r12,r12,4
    36d4:	db002d15 	stw	r12,180(sp)
    36d8:	e005883a 	mov	r2,fp
    36dc:	003ea106 	br	3164 <__alt_mem_Flash_flash_data+0xf4003164>
    36e0:	8c401014 	ori	r17,r17,64
    36e4:	1805883a 	mov	r2,r3
    36e8:	1c000007 	ldb	r16,0(r3)
    36ec:	003dd306 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    36f0:	1c000007 	ldb	r16,0(r3)
    36f4:	81c3e926 	beq	r16,r7,469c <___vfprintf_internal_r+0x19f4>
    36f8:	8c400414 	ori	r17,r17,16
    36fc:	1805883a 	mov	r2,r3
    3700:	003dce06 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    3704:	d8c02a15 	stw	r3,168(sp)
    3708:	d9802785 	stb	r6,158(sp)
    370c:	8880080c 	andi	r2,r17,32
    3710:	10034726 	beq	r2,zero,4430 <___vfprintf_internal_r+0x1788>
    3714:	db002d17 	ldw	r12,180(sp)
    3718:	dac02f17 	ldw	r11,188(sp)
    371c:	60800017 	ldw	r2,0(r12)
    3720:	5807d7fa 	srai	r3,r11,31
    3724:	63000104 	addi	r12,r12,4
    3728:	db002d15 	stw	r12,180(sp)
    372c:	12c00015 	stw	r11,0(r2)
    3730:	10c00115 	stw	r3,4(r2)
    3734:	003d9706 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    3738:	030000b4 	movhi	r12,2
    373c:	63319904 	addi	r12,r12,-14748
    3740:	d8c02a15 	stw	r3,168(sp)
    3744:	d9802785 	stb	r6,158(sp)
    3748:	db003b15 	stw	r12,236(sp)
    374c:	88c0080c 	andi	r3,r17,32
    3750:	d8802d17 	ldw	r2,180(sp)
    3754:	18005b26 	beq	r3,zero,38c4 <___vfprintf_internal_r+0xc1c>
    3758:	dac02d17 	ldw	r11,180(sp)
    375c:	14c00017 	ldw	r19,0(r2)
    3760:	17000117 	ldw	fp,4(r2)
    3764:	5ac00204 	addi	r11,r11,8
    3768:	dac02d15 	stw	r11,180(sp)
    376c:	8880004c 	andi	r2,r17,1
    3770:	10022926 	beq	r2,zero,4018 <___vfprintf_internal_r+0x1370>
    3774:	9f06b03a 	or	r3,r19,fp
    3778:	18032b26 	beq	r3,zero,4428 <___vfprintf_internal_r+0x1780>
    377c:	00800c04 	movi	r2,48
    3780:	d8802705 	stb	r2,156(sp)
    3784:	dc002745 	stb	r16,157(sp)
    3788:	8c400094 	ori	r17,r17,2
    378c:	00800084 	movi	r2,2
    3790:	003f7406 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    3794:	30803fcc 	andi	r2,r6,255
    3798:	1080201c 	xori	r2,r2,128
    379c:	10bfe004 	addi	r2,r2,-128
    37a0:	1003351e 	bne	r2,zero,4478 <___vfprintf_internal_r+0x17d0>
    37a4:	1805883a 	mov	r2,r3
    37a8:	01800804 	movi	r6,32
    37ac:	1c000007 	ldb	r16,0(r3)
    37b0:	003da206 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    37b4:	dac02d17 	ldw	r11,180(sp)
    37b8:	db002d17 	ldw	r12,180(sp)
    37bc:	5ac00017 	ldw	r11,0(r11)
    37c0:	dac02e15 	stw	r11,184(sp)
    37c4:	62c00104 	addi	r11,r12,4
    37c8:	db002e17 	ldw	r12,184(sp)
    37cc:	6003ad16 	blt	r12,zero,4684 <___vfprintf_internal_r+0x19dc>
    37d0:	dac02d15 	stw	r11,180(sp)
    37d4:	1805883a 	mov	r2,r3
    37d8:	1c000007 	ldb	r16,0(r3)
    37dc:	003d9706 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    37e0:	1805883a 	mov	r2,r3
    37e4:	01800ac4 	movi	r6,43
    37e8:	1c000007 	ldb	r16,0(r3)
    37ec:	003d9306 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    37f0:	db002d17 	ldw	r12,180(sp)
    37f4:	d8c02a15 	stw	r3,168(sp)
    37f8:	00c00044 	movi	r3,1
    37fc:	60800017 	ldw	r2,0(r12)
    3800:	63000104 	addi	r12,r12,4
    3804:	d8c02b15 	stw	r3,172(sp)
    3808:	d8002785 	stb	zero,158(sp)
    380c:	d8801405 	stb	r2,80(sp)
    3810:	db002d15 	stw	r12,180(sp)
    3814:	dac01404 	addi	r11,sp,80
    3818:	1825883a 	mov	r18,r3
    381c:	d8003215 	stw	zero,200(sp)
    3820:	d8003415 	stw	zero,208(sp)
    3824:	dac03115 	stw	r11,196(sp)
    3828:	0005883a 	mov	r2,zero
    382c:	003e7806 	br	3210 <__alt_mem_Flash_flash_data+0xf4003210>
    3830:	dac02d17 	ldw	r11,180(sp)
    3834:	db002d17 	ldw	r12,180(sp)
    3838:	d8c02a15 	stw	r3,168(sp)
    383c:	5ac00017 	ldw	r11,0(r11)
    3840:	d8002785 	stb	zero,158(sp)
    3844:	64c00104 	addi	r19,r12,4
    3848:	dac03115 	stw	r11,196(sp)
    384c:	5803fe26 	beq	r11,zero,4848 <___vfprintf_internal_r+0x1ba0>
    3850:	d9003117 	ldw	r4,196(sp)
    3854:	4803b416 	blt	r9,zero,4728 <___vfprintf_internal_r+0x1a80>
    3858:	480d883a 	mov	r6,r9
    385c:	000b883a 	mov	r5,zero
    3860:	da003f15 	stw	r8,252(sp)
    3864:	da403e15 	stw	r9,248(sp)
    3868:	00082240 	call	8224 <memchr>
    386c:	da003f17 	ldw	r8,252(sp)
    3870:	da403e17 	ldw	r9,248(sp)
    3874:	10043026 	beq	r2,zero,4938 <___vfprintf_internal_r+0x1c90>
    3878:	d8c03117 	ldw	r3,196(sp)
    387c:	10e5c83a 	sub	r18,r2,r3
    3880:	4c836b16 	blt	r9,r18,4630 <___vfprintf_internal_r+0x1988>
    3884:	9005883a 	mov	r2,r18
    3888:	9003ac16 	blt	r18,zero,473c <___vfprintf_internal_r+0x1a94>
    388c:	dd402783 	ldbu	r21,158(sp)
    3890:	d8802b15 	stw	r2,172(sp)
    3894:	dcc02d15 	stw	r19,180(sp)
    3898:	d8003215 	stw	zero,200(sp)
    389c:	d8003415 	stw	zero,208(sp)
    38a0:	003e5406 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    38a4:	008000b4 	movhi	r2,2
    38a8:	10b19e04 	addi	r2,r2,-14728
    38ac:	d8c02a15 	stw	r3,168(sp)
    38b0:	d8803b15 	stw	r2,236(sp)
    38b4:	d9802785 	stb	r6,158(sp)
    38b8:	88c0080c 	andi	r3,r17,32
    38bc:	d8802d17 	ldw	r2,180(sp)
    38c0:	183fa51e 	bne	r3,zero,3758 <__alt_mem_Flash_flash_data+0xf4003758>
    38c4:	88c0040c 	andi	r3,r17,16
    38c8:	1802ee26 	beq	r3,zero,4484 <___vfprintf_internal_r+0x17dc>
    38cc:	db002d17 	ldw	r12,180(sp)
    38d0:	14c00017 	ldw	r19,0(r2)
    38d4:	0039883a 	mov	fp,zero
    38d8:	63000104 	addi	r12,r12,4
    38dc:	db002d15 	stw	r12,180(sp)
    38e0:	003fa206 	br	376c <__alt_mem_Flash_flash_data+0xf400376c>
    38e4:	8c400054 	ori	r17,r17,1
    38e8:	1805883a 	mov	r2,r3
    38ec:	1c000007 	ldb	r16,0(r3)
    38f0:	003d5206 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    38f4:	8c400814 	ori	r17,r17,32
    38f8:	1805883a 	mov	r2,r3
    38fc:	1c000007 	ldb	r16,0(r3)
    3900:	003d4e06 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    3904:	d8c02a15 	stw	r3,168(sp)
    3908:	8880080c 	andi	r2,r17,32
    390c:	103f1d1e 	bne	r2,zero,3584 <__alt_mem_Flash_flash_data+0xf4003584>
    3910:	8880040c 	andi	r2,r17,16
    3914:	1001b81e 	bne	r2,zero,3ff8 <___vfprintf_internal_r+0x1350>
    3918:	8880100c 	andi	r2,r17,64
    391c:	1001b626 	beq	r2,zero,3ff8 <___vfprintf_internal_r+0x1350>
    3920:	dac02d17 	ldw	r11,180(sp)
    3924:	0039883a 	mov	fp,zero
    3928:	00800044 	movi	r2,1
    392c:	5cc0000b 	ldhu	r19,0(r11)
    3930:	5ac00104 	addi	r11,r11,4
    3934:	dac02d15 	stw	r11,180(sp)
    3938:	9807883a 	mov	r3,r19
    393c:	003f0906 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    3940:	d8c02a15 	stw	r3,168(sp)
    3944:	8880080c 	andi	r2,r17,32
    3948:	103eff1e 	bne	r2,zero,3548 <__alt_mem_Flash_flash_data+0xf4003548>
    394c:	8880040c 	andi	r2,r17,16
    3950:	1001a11e 	bne	r2,zero,3fd8 <___vfprintf_internal_r+0x1330>
    3954:	8880100c 	andi	r2,r17,64
    3958:	10019f26 	beq	r2,zero,3fd8 <___vfprintf_internal_r+0x1330>
    395c:	db002d17 	ldw	r12,180(sp)
    3960:	0039883a 	mov	fp,zero
    3964:	0005883a 	mov	r2,zero
    3968:	64c0000b 	ldhu	r19,0(r12)
    396c:	63000104 	addi	r12,r12,4
    3970:	db002d15 	stw	r12,180(sp)
    3974:	9807883a 	mov	r3,r19
    3978:	003efa06 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    397c:	d8c02a15 	stw	r3,168(sp)
    3980:	d9802785 	stb	r6,158(sp)
    3984:	803db626 	beq	r16,zero,3060 <__alt_mem_Flash_flash_data+0xf4003060>
    3988:	00c00044 	movi	r3,1
    398c:	d8c02b15 	stw	r3,172(sp)
    3990:	dc001405 	stb	r16,80(sp)
    3994:	d8002785 	stb	zero,158(sp)
    3998:	003f9e06 	br	3814 <__alt_mem_Flash_flash_data+0xf4003814>
    399c:	d8c02017 	ldw	r3,128(sp)
    39a0:	003e5306 	br	32f0 <__alt_mem_Flash_flash_data+0xf40032f0>
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	00c00044 	movi	r3,1
    39ac:	10fdfa1e 	bne	r2,r3,3198 <__alt_mem_Flash_flash_data+0xf4003198>
    39b0:	e000021e 	bne	fp,zero,39bc <___vfprintf_internal_r+0xd14>
    39b4:	00800244 	movi	r2,9
    39b8:	14c0202e 	bgeu	r2,r19,3a3c <___vfprintf_internal_r+0xd94>
    39bc:	dc002b15 	stw	r16,172(sp)
    39c0:	dc402c15 	stw	r17,176(sp)
    39c4:	9821883a 	mov	r16,r19
    39c8:	e023883a 	mov	r17,fp
    39cc:	dc801e04 	addi	r18,sp,120
    39d0:	4827883a 	mov	r19,r9
    39d4:	4039883a 	mov	fp,r8
    39d8:	8009883a 	mov	r4,r16
    39dc:	880b883a 	mov	r5,r17
    39e0:	01800284 	movi	r6,10
    39e4:	000f883a 	mov	r7,zero
    39e8:	000d22c0 	call	d22c <__umoddi3>
    39ec:	10800c04 	addi	r2,r2,48
    39f0:	94bfffc4 	addi	r18,r18,-1
    39f4:	8009883a 	mov	r4,r16
    39f8:	880b883a 	mov	r5,r17
    39fc:	01800284 	movi	r6,10
    3a00:	000f883a 	mov	r7,zero
    3a04:	90800005 	stb	r2,0(r18)
    3a08:	000cc6c0 	call	cc6c <__udivdi3>
    3a0c:	1021883a 	mov	r16,r2
    3a10:	10c4b03a 	or	r2,r2,r3
    3a14:	1823883a 	mov	r17,r3
    3a18:	103fef1e 	bne	r2,zero,39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    3a1c:	dac02817 	ldw	r11,160(sp)
    3a20:	dc803115 	stw	r18,196(sp)
    3a24:	dc002b17 	ldw	r16,172(sp)
    3a28:	dc402c17 	ldw	r17,176(sp)
    3a2c:	9813883a 	mov	r9,r19
    3a30:	e011883a 	mov	r8,fp
    3a34:	5ca5c83a 	sub	r18,r11,r18
    3a38:	003de906 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    3a3c:	9cc00c04 	addi	r19,r19,48
    3a40:	d8c01dc4 	addi	r3,sp,119
    3a44:	dcc01dc5 	stb	r19,119(sp)
    3a48:	dc803c17 	ldw	r18,240(sp)
    3a4c:	d8c03115 	stw	r3,196(sp)
    3a50:	003de306 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    3a54:	00801944 	movi	r2,101
    3a58:	1400710e 	bge	r2,r16,3c20 <___vfprintf_internal_r+0xf78>
    3a5c:	d9003717 	ldw	r4,220(sp)
    3a60:	d9403917 	ldw	r5,228(sp)
    3a64:	000d883a 	mov	r6,zero
    3a68:	000f883a 	mov	r7,zero
    3a6c:	d8c03d15 	stw	r3,244(sp)
    3a70:	da003f15 	stw	r8,252(sp)
    3a74:	000ea500 	call	ea50 <__eqdf2>
    3a78:	d8c03d17 	ldw	r3,244(sp)
    3a7c:	da003f17 	ldw	r8,252(sp)
    3a80:	1000ef1e 	bne	r2,zero,3e40 <___vfprintf_internal_r+0x1198>
    3a84:	d8801f17 	ldw	r2,124(sp)
    3a88:	010000b4 	movhi	r4,2
    3a8c:	2131a504 	addi	r4,r4,-14700
    3a90:	18c00044 	addi	r3,r3,1
    3a94:	10800044 	addi	r2,r2,1
    3a98:	41000015 	stw	r4,0(r8)
    3a9c:	01000044 	movi	r4,1
    3aa0:	41000115 	stw	r4,4(r8)
    3aa4:	d8c02015 	stw	r3,128(sp)
    3aa8:	d8801f15 	stw	r2,124(sp)
    3aac:	010001c4 	movi	r4,7
    3ab0:	20828e16 	blt	r4,r2,44ec <___vfprintf_internal_r+0x1844>
    3ab4:	42000204 	addi	r8,r8,8
    3ab8:	d8802617 	ldw	r2,152(sp)
    3abc:	dac03317 	ldw	r11,204(sp)
    3ac0:	12c00216 	blt	r2,r11,3acc <___vfprintf_internal_r+0xe24>
    3ac4:	8880004c 	andi	r2,r17,1
    3ac8:	103e5d26 	beq	r2,zero,3440 <__alt_mem_Flash_flash_data+0xf4003440>
    3acc:	db003817 	ldw	r12,224(sp)
    3ad0:	d8801f17 	ldw	r2,124(sp)
    3ad4:	dac03517 	ldw	r11,212(sp)
    3ad8:	1b07883a 	add	r3,r3,r12
    3adc:	10800044 	addi	r2,r2,1
    3ae0:	42c00015 	stw	r11,0(r8)
    3ae4:	43000115 	stw	r12,4(r8)
    3ae8:	d8c02015 	stw	r3,128(sp)
    3aec:	d8801f15 	stw	r2,124(sp)
    3af0:	010001c4 	movi	r4,7
    3af4:	2082ed16 	blt	r4,r2,46ac <___vfprintf_internal_r+0x1a04>
    3af8:	42000204 	addi	r8,r8,8
    3afc:	db003317 	ldw	r12,204(sp)
    3b00:	643fffc4 	addi	r16,r12,-1
    3b04:	043e4e0e 	bge	zero,r16,3440 <__alt_mem_Flash_flash_data+0xf4003440>
    3b08:	04800404 	movi	r18,16
    3b0c:	d8801f17 	ldw	r2,124(sp)
    3b10:	94007e0e 	bge	r18,r16,3d0c <___vfprintf_internal_r+0x1064>
    3b14:	014000b4 	movhi	r5,2
    3b18:	2971ad84 	addi	r5,r5,-14666
    3b1c:	d9402c15 	stw	r5,176(sp)
    3b20:	054001c4 	movi	r21,7
    3b24:	00000306 	br	3b34 <___vfprintf_internal_r+0xe8c>
    3b28:	42000204 	addi	r8,r8,8
    3b2c:	843ffc04 	addi	r16,r16,-16
    3b30:	9400790e 	bge	r18,r16,3d18 <___vfprintf_internal_r+0x1070>
    3b34:	18c00404 	addi	r3,r3,16
    3b38:	10800044 	addi	r2,r2,1
    3b3c:	45000015 	stw	r20,0(r8)
    3b40:	44800115 	stw	r18,4(r8)
    3b44:	d8c02015 	stw	r3,128(sp)
    3b48:	d8801f15 	stw	r2,124(sp)
    3b4c:	a8bff60e 	bge	r21,r2,3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3b50:	b009883a 	mov	r4,r22
    3b54:	b80b883a 	mov	r5,r23
    3b58:	d9801e04 	addi	r6,sp,120
    3b5c:	000afac0 	call	afac <__sprint_r>
    3b60:	103d451e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3b64:	d8c02017 	ldw	r3,128(sp)
    3b68:	d8801f17 	ldw	r2,124(sp)
    3b6c:	da000404 	addi	r8,sp,16
    3b70:	003fee06 	br	3b2c <__alt_mem_Flash_flash_data+0xf4003b2c>
    3b74:	dac02e17 	ldw	r11,184(sp)
    3b78:	db002b17 	ldw	r12,172(sp)
    3b7c:	5b2bc83a 	sub	r21,r11,r12
    3b80:	057df90e 	bge	zero,r21,3368 <__alt_mem_Flash_flash_data+0xf4003368>
    3b84:	07000404 	movi	fp,16
    3b88:	d8801f17 	ldw	r2,124(sp)
    3b8c:	e543640e 	bge	fp,r21,4920 <___vfprintf_internal_r+0x1c78>
    3b90:	014000b4 	movhi	r5,2
    3b94:	2971ad84 	addi	r5,r5,-14666
    3b98:	d9402c15 	stw	r5,176(sp)
    3b9c:	04c001c4 	movi	r19,7
    3ba0:	00000306 	br	3bb0 <___vfprintf_internal_r+0xf08>
    3ba4:	ad7ffc04 	addi	r21,r21,-16
    3ba8:	42000204 	addi	r8,r8,8
    3bac:	e540110e 	bge	fp,r21,3bf4 <___vfprintf_internal_r+0xf4c>
    3bb0:	18c00404 	addi	r3,r3,16
    3bb4:	10800044 	addi	r2,r2,1
    3bb8:	45000015 	stw	r20,0(r8)
    3bbc:	47000115 	stw	fp,4(r8)
    3bc0:	d8c02015 	stw	r3,128(sp)
    3bc4:	d8801f15 	stw	r2,124(sp)
    3bc8:	98bff60e 	bge	r19,r2,3ba4 <__alt_mem_Flash_flash_data+0xf4003ba4>
    3bcc:	b009883a 	mov	r4,r22
    3bd0:	b80b883a 	mov	r5,r23
    3bd4:	d9801e04 	addi	r6,sp,120
    3bd8:	000afac0 	call	afac <__sprint_r>
    3bdc:	103d261e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3be0:	ad7ffc04 	addi	r21,r21,-16
    3be4:	d8c02017 	ldw	r3,128(sp)
    3be8:	d8801f17 	ldw	r2,124(sp)
    3bec:	da000404 	addi	r8,sp,16
    3bf0:	e57fef16 	blt	fp,r21,3bb0 <__alt_mem_Flash_flash_data+0xf4003bb0>
    3bf4:	dac02c17 	ldw	r11,176(sp)
    3bf8:	1d47883a 	add	r3,r3,r21
    3bfc:	10800044 	addi	r2,r2,1
    3c00:	42c00015 	stw	r11,0(r8)
    3c04:	45400115 	stw	r21,4(r8)
    3c08:	d8c02015 	stw	r3,128(sp)
    3c0c:	d8801f15 	stw	r2,124(sp)
    3c10:	010001c4 	movi	r4,7
    3c14:	20819116 	blt	r4,r2,425c <___vfprintf_internal_r+0x15b4>
    3c18:	42000204 	addi	r8,r8,8
    3c1c:	003dd206 	br	3368 <__alt_mem_Flash_flash_data+0xf4003368>
    3c20:	db003317 	ldw	r12,204(sp)
    3c24:	00800044 	movi	r2,1
    3c28:	18c00044 	addi	r3,r3,1
    3c2c:	1301530e 	bge	r2,r12,417c <___vfprintf_internal_r+0x14d4>
    3c30:	dc001f17 	ldw	r16,124(sp)
    3c34:	dac03117 	ldw	r11,196(sp)
    3c38:	00800044 	movi	r2,1
    3c3c:	84000044 	addi	r16,r16,1
    3c40:	40800115 	stw	r2,4(r8)
    3c44:	42c00015 	stw	r11,0(r8)
    3c48:	d8c02015 	stw	r3,128(sp)
    3c4c:	dc001f15 	stw	r16,124(sp)
    3c50:	008001c4 	movi	r2,7
    3c54:	14016b16 	blt	r2,r16,4204 <___vfprintf_internal_r+0x155c>
    3c58:	42000204 	addi	r8,r8,8
    3c5c:	db003817 	ldw	r12,224(sp)
    3c60:	dac03517 	ldw	r11,212(sp)
    3c64:	84000044 	addi	r16,r16,1
    3c68:	1b07883a 	add	r3,r3,r12
    3c6c:	42c00015 	stw	r11,0(r8)
    3c70:	43000115 	stw	r12,4(r8)
    3c74:	d8c02015 	stw	r3,128(sp)
    3c78:	dc001f15 	stw	r16,124(sp)
    3c7c:	008001c4 	movi	r2,7
    3c80:	14016916 	blt	r2,r16,4228 <___vfprintf_internal_r+0x1580>
    3c84:	44800204 	addi	r18,r8,8
    3c88:	d9003717 	ldw	r4,220(sp)
    3c8c:	d9403917 	ldw	r5,228(sp)
    3c90:	000d883a 	mov	r6,zero
    3c94:	000f883a 	mov	r7,zero
    3c98:	d8c03d15 	stw	r3,244(sp)
    3c9c:	000ea500 	call	ea50 <__eqdf2>
    3ca0:	d8c03d17 	ldw	r3,244(sp)
    3ca4:	db003317 	ldw	r12,204(sp)
    3ca8:	1000ad26 	beq	r2,zero,3f60 <___vfprintf_internal_r+0x12b8>
    3cac:	dac03117 	ldw	r11,196(sp)
    3cb0:	60bfffc4 	addi	r2,r12,-1
    3cb4:	1887883a 	add	r3,r3,r2
    3cb8:	59000044 	addi	r4,r11,1
    3cbc:	84000044 	addi	r16,r16,1
    3cc0:	90800115 	stw	r2,4(r18)
    3cc4:	91000015 	stw	r4,0(r18)
    3cc8:	d8c02015 	stw	r3,128(sp)
    3ccc:	dc001f15 	stw	r16,124(sp)
    3cd0:	008001c4 	movi	r2,7
    3cd4:	14014216 	blt	r2,r16,41e0 <___vfprintf_internal_r+0x1538>
    3cd8:	94800204 	addi	r18,r18,8
    3cdc:	dac03a17 	ldw	r11,232(sp)
    3ce0:	dd4022c4 	addi	r21,sp,139
    3ce4:	84000044 	addi	r16,r16,1
    3ce8:	1ac7883a 	add	r3,r3,r11
    3cec:	95400015 	stw	r21,0(r18)
    3cf0:	92c00115 	stw	r11,4(r18)
    3cf4:	d8c02015 	stw	r3,128(sp)
    3cf8:	dc001f15 	stw	r16,124(sp)
    3cfc:	008001c4 	movi	r2,7
    3d00:	14000e16 	blt	r2,r16,3d3c <___vfprintf_internal_r+0x1094>
    3d04:	92000204 	addi	r8,r18,8
    3d08:	003dcd06 	br	3440 <__alt_mem_Flash_flash_data+0xf4003440>
    3d0c:	010000b4 	movhi	r4,2
    3d10:	2131ad84 	addi	r4,r4,-14666
    3d14:	d9002c15 	stw	r4,176(sp)
    3d18:	dac02c17 	ldw	r11,176(sp)
    3d1c:	1c07883a 	add	r3,r3,r16
    3d20:	44000115 	stw	r16,4(r8)
    3d24:	42c00015 	stw	r11,0(r8)
    3d28:	10800044 	addi	r2,r2,1
    3d2c:	d8c02015 	stw	r3,128(sp)
    3d30:	d8801f15 	stw	r2,124(sp)
    3d34:	010001c4 	movi	r4,7
    3d38:	20bdc00e 	bge	r4,r2,343c <__alt_mem_Flash_flash_data+0xf400343c>
    3d3c:	b009883a 	mov	r4,r22
    3d40:	b80b883a 	mov	r5,r23
    3d44:	d9801e04 	addi	r6,sp,120
    3d48:	000afac0 	call	afac <__sprint_r>
    3d4c:	103cca1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3d50:	d8c02017 	ldw	r3,128(sp)
    3d54:	da000404 	addi	r8,sp,16
    3d58:	003db906 	br	3440 <__alt_mem_Flash_flash_data+0xf4003440>
    3d5c:	b009883a 	mov	r4,r22
    3d60:	b80b883a 	mov	r5,r23
    3d64:	d9801e04 	addi	r6,sp,120
    3d68:	000afac0 	call	afac <__sprint_r>
    3d6c:	103def26 	beq	r2,zero,352c <__alt_mem_Flash_flash_data+0xf400352c>
    3d70:	003cc106 	br	3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3d74:	10803fcc 	andi	r2,r2,255
    3d78:	1000651e 	bne	r2,zero,3f10 <___vfprintf_internal_r+0x1268>
    3d7c:	8880004c 	andi	r2,r17,1
    3d80:	10013226 	beq	r2,zero,424c <___vfprintf_internal_r+0x15a4>
    3d84:	00800c04 	movi	r2,48
    3d88:	d8c01dc4 	addi	r3,sp,119
    3d8c:	d8801dc5 	stb	r2,119(sp)
    3d90:	dc803c17 	ldw	r18,240(sp)
    3d94:	d8c03115 	stw	r3,196(sp)
    3d98:	003d1106 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    3d9c:	b009883a 	mov	r4,r22
    3da0:	b80b883a 	mov	r5,r23
    3da4:	d9801e04 	addi	r6,sp,120
    3da8:	000afac0 	call	afac <__sprint_r>
    3dac:	103cb21e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3db0:	d8c02017 	ldw	r3,128(sp)
    3db4:	da000404 	addi	r8,sp,16
    3db8:	003d9406 	br	340c <__alt_mem_Flash_flash_data+0xf400340c>
    3dbc:	b009883a 	mov	r4,r22
    3dc0:	b80b883a 	mov	r5,r23
    3dc4:	d9801e04 	addi	r6,sp,120
    3dc8:	000afac0 	call	afac <__sprint_r>
    3dcc:	103caa1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3dd0:	d8c02017 	ldw	r3,128(sp)
    3dd4:	da000404 	addi	r8,sp,16
    3dd8:	003d5206 	br	3324 <__alt_mem_Flash_flash_data+0xf4003324>
    3ddc:	b009883a 	mov	r4,r22
    3de0:	b80b883a 	mov	r5,r23
    3de4:	d9801e04 	addi	r6,sp,120
    3de8:	000afac0 	call	afac <__sprint_r>
    3dec:	103ca21e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3df0:	d8c02017 	ldw	r3,128(sp)
    3df4:	da000404 	addi	r8,sp,16
    3df8:	003d5806 	br	335c <__alt_mem_Flash_flash_data+0xf400335c>
    3dfc:	d9403b17 	ldw	r5,236(sp)
    3e00:	d8c01e04 	addi	r3,sp,120
    3e04:	988003cc 	andi	r2,r19,15
    3e08:	e008973a 	slli	r4,fp,28
    3e0c:	2885883a 	add	r2,r5,r2
    3e10:	9826d13a 	srli	r19,r19,4
    3e14:	10800003 	ldbu	r2,0(r2)
    3e18:	e038d13a 	srli	fp,fp,4
    3e1c:	18ffffc4 	addi	r3,r3,-1
    3e20:	24e6b03a 	or	r19,r4,r19
    3e24:	18800005 	stb	r2,0(r3)
    3e28:	9f04b03a 	or	r2,r19,fp
    3e2c:	103ff51e 	bne	r2,zero,3e04 <__alt_mem_Flash_flash_data+0xf4003e04>
    3e30:	db002817 	ldw	r12,160(sp)
    3e34:	d8c03115 	stw	r3,196(sp)
    3e38:	60e5c83a 	sub	r18,r12,r3
    3e3c:	003ce806 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    3e40:	dc002617 	ldw	r16,152(sp)
    3e44:	0401b10e 	bge	zero,r16,450c <___vfprintf_internal_r+0x1864>
    3e48:	db003117 	ldw	r12,196(sp)
    3e4c:	dac03317 	ldw	r11,204(sp)
    3e50:	62e1883a 	add	r16,r12,r11
    3e54:	db003417 	ldw	r12,208(sp)
    3e58:	5825883a 	mov	r18,r11
    3e5c:	62c0010e 	bge	r12,r11,3e64 <___vfprintf_internal_r+0x11bc>
    3e60:	6025883a 	mov	r18,r12
    3e64:	04800b0e 	bge	zero,r18,3e94 <___vfprintf_internal_r+0x11ec>
    3e68:	d8801f17 	ldw	r2,124(sp)
    3e6c:	dac03117 	ldw	r11,196(sp)
    3e70:	1c87883a 	add	r3,r3,r18
    3e74:	10800044 	addi	r2,r2,1
    3e78:	42c00015 	stw	r11,0(r8)
    3e7c:	44800115 	stw	r18,4(r8)
    3e80:	d8c02015 	stw	r3,128(sp)
    3e84:	d8801f15 	stw	r2,124(sp)
    3e88:	010001c4 	movi	r4,7
    3e8c:	20824f16 	blt	r4,r2,47cc <___vfprintf_internal_r+0x1b24>
    3e90:	42000204 	addi	r8,r8,8
    3e94:	90024b16 	blt	r18,zero,47c4 <___vfprintf_internal_r+0x1b1c>
    3e98:	db003417 	ldw	r12,208(sp)
    3e9c:	64a5c83a 	sub	r18,r12,r18
    3ea0:	0480730e 	bge	zero,r18,4070 <___vfprintf_internal_r+0x13c8>
    3ea4:	05400404 	movi	r21,16
    3ea8:	d8801f17 	ldw	r2,124(sp)
    3eac:	ac817d0e 	bge	r21,r18,44a4 <___vfprintf_internal_r+0x17fc>
    3eb0:	014000b4 	movhi	r5,2
    3eb4:	2971ad84 	addi	r5,r5,-14666
    3eb8:	d9402c15 	stw	r5,176(sp)
    3ebc:	070001c4 	movi	fp,7
    3ec0:	00000306 	br	3ed0 <___vfprintf_internal_r+0x1228>
    3ec4:	42000204 	addi	r8,r8,8
    3ec8:	94bffc04 	addi	r18,r18,-16
    3ecc:	ac81780e 	bge	r21,r18,44b0 <___vfprintf_internal_r+0x1808>
    3ed0:	18c00404 	addi	r3,r3,16
    3ed4:	10800044 	addi	r2,r2,1
    3ed8:	45000015 	stw	r20,0(r8)
    3edc:	45400115 	stw	r21,4(r8)
    3ee0:	d8c02015 	stw	r3,128(sp)
    3ee4:	d8801f15 	stw	r2,124(sp)
    3ee8:	e0bff60e 	bge	fp,r2,3ec4 <__alt_mem_Flash_flash_data+0xf4003ec4>
    3eec:	b009883a 	mov	r4,r22
    3ef0:	b80b883a 	mov	r5,r23
    3ef4:	d9801e04 	addi	r6,sp,120
    3ef8:	000afac0 	call	afac <__sprint_r>
    3efc:	103c5e1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3f00:	d8c02017 	ldw	r3,128(sp)
    3f04:	d8801f17 	ldw	r2,124(sp)
    3f08:	da000404 	addi	r8,sp,16
    3f0c:	003fee06 	br	3ec8 <__alt_mem_Flash_flash_data+0xf4003ec8>
    3f10:	dac01e04 	addi	r11,sp,120
    3f14:	0025883a 	mov	r18,zero
    3f18:	dac03115 	stw	r11,196(sp)
    3f1c:	003cb006 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    3f20:	b009883a 	mov	r4,r22
    3f24:	b80b883a 	mov	r5,r23
    3f28:	d9801e04 	addi	r6,sp,120
    3f2c:	000afac0 	call	afac <__sprint_r>
    3f30:	103c511e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3f34:	d8c02017 	ldw	r3,128(sp)
    3f38:	d8802787 	ldb	r2,158(sp)
    3f3c:	da000404 	addi	r8,sp,16
    3f40:	003ceb06 	br	32f0 <__alt_mem_Flash_flash_data+0xf40032f0>
    3f44:	1cc00017 	ldw	r19,0(r3)
    3f48:	dac02d17 	ldw	r11,180(sp)
    3f4c:	9839d7fa 	srai	fp,r19,31
    3f50:	5ac00104 	addi	r11,r11,4
    3f54:	dac02d15 	stw	r11,180(sp)
    3f58:	e005883a 	mov	r2,fp
    3f5c:	003c8106 	br	3164 <__alt_mem_Flash_flash_data+0xf4003164>
    3f60:	657fffc4 	addi	r21,r12,-1
    3f64:	057f5d0e 	bge	zero,r21,3cdc <__alt_mem_Flash_flash_data+0xf4003cdc>
    3f68:	07000404 	movi	fp,16
    3f6c:	e540900e 	bge	fp,r21,41b0 <___vfprintf_internal_r+0x1508>
    3f70:	010000b4 	movhi	r4,2
    3f74:	2131ad84 	addi	r4,r4,-14666
    3f78:	d9002c15 	stw	r4,176(sp)
    3f7c:	01c001c4 	movi	r7,7
    3f80:	00000306 	br	3f90 <___vfprintf_internal_r+0x12e8>
    3f84:	94800204 	addi	r18,r18,8
    3f88:	ad7ffc04 	addi	r21,r21,-16
    3f8c:	e5408b0e 	bge	fp,r21,41bc <___vfprintf_internal_r+0x1514>
    3f90:	18c00404 	addi	r3,r3,16
    3f94:	84000044 	addi	r16,r16,1
    3f98:	95000015 	stw	r20,0(r18)
    3f9c:	97000115 	stw	fp,4(r18)
    3fa0:	d8c02015 	stw	r3,128(sp)
    3fa4:	dc001f15 	stw	r16,124(sp)
    3fa8:	3c3ff60e 	bge	r7,r16,3f84 <__alt_mem_Flash_flash_data+0xf4003f84>
    3fac:	b009883a 	mov	r4,r22
    3fb0:	b80b883a 	mov	r5,r23
    3fb4:	d9801e04 	addi	r6,sp,120
    3fb8:	d9c03d15 	stw	r7,244(sp)
    3fbc:	000afac0 	call	afac <__sprint_r>
    3fc0:	d9c03d17 	ldw	r7,244(sp)
    3fc4:	103c2c1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    3fc8:	d8c02017 	ldw	r3,128(sp)
    3fcc:	dc001f17 	ldw	r16,124(sp)
    3fd0:	dc800404 	addi	r18,sp,16
    3fd4:	003fec06 	br	3f88 <__alt_mem_Flash_flash_data+0xf4003f88>
    3fd8:	dac02d17 	ldw	r11,180(sp)
    3fdc:	0039883a 	mov	fp,zero
    3fe0:	0005883a 	mov	r2,zero
    3fe4:	5cc00017 	ldw	r19,0(r11)
    3fe8:	5ac00104 	addi	r11,r11,4
    3fec:	dac02d15 	stw	r11,180(sp)
    3ff0:	9807883a 	mov	r3,r19
    3ff4:	003d5b06 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    3ff8:	db002d17 	ldw	r12,180(sp)
    3ffc:	0039883a 	mov	fp,zero
    4000:	00800044 	movi	r2,1
    4004:	64c00017 	ldw	r19,0(r12)
    4008:	63000104 	addi	r12,r12,4
    400c:	db002d15 	stw	r12,180(sp)
    4010:	9807883a 	mov	r3,r19
    4014:	003d5306 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    4018:	00800084 	movi	r2,2
    401c:	9f06b03a 	or	r3,r19,fp
    4020:	003d5006 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    4024:	10803fcc 	andi	r2,r2,255
    4028:	1080201c 	xori	r2,r2,128
    402c:	10bfe004 	addi	r2,r2,-128
    4030:	01000c04 	movi	r4,48
    4034:	1101a526 	beq	r2,r4,46cc <___vfprintf_internal_r+0x1a24>
    4038:	dac03117 	ldw	r11,196(sp)
    403c:	db002817 	ldw	r12,160(sp)
    4040:	193fffc5 	stb	r4,-1(r3)
    4044:	5affffc4 	addi	r11,r11,-1
    4048:	dac03115 	stw	r11,196(sp)
    404c:	62e5c83a 	sub	r18,r12,r11
    4050:	003c6306 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    4054:	b009883a 	mov	r4,r22
    4058:	b80b883a 	mov	r5,r23
    405c:	d9801e04 	addi	r6,sp,120
    4060:	000afac0 	call	afac <__sprint_r>
    4064:	103c041e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4068:	d8c02017 	ldw	r3,128(sp)
    406c:	da000404 	addi	r8,sp,16
    4070:	db003117 	ldw	r12,196(sp)
    4074:	dac03417 	ldw	r11,208(sp)
    4078:	d8802617 	ldw	r2,152(sp)
    407c:	62e5883a 	add	r18,r12,r11
    4080:	db003317 	ldw	r12,204(sp)
    4084:	13000216 	blt	r2,r12,4090 <___vfprintf_internal_r+0x13e8>
    4088:	8900004c 	andi	r4,r17,1
    408c:	20000c26 	beq	r4,zero,40c0 <___vfprintf_internal_r+0x1418>
    4090:	dac03817 	ldw	r11,224(sp)
    4094:	d9001f17 	ldw	r4,124(sp)
    4098:	db003517 	ldw	r12,212(sp)
    409c:	1ac7883a 	add	r3,r3,r11
    40a0:	21000044 	addi	r4,r4,1
    40a4:	43000015 	stw	r12,0(r8)
    40a8:	42c00115 	stw	r11,4(r8)
    40ac:	d8c02015 	stw	r3,128(sp)
    40b0:	d9001f15 	stw	r4,124(sp)
    40b4:	014001c4 	movi	r5,7
    40b8:	2901cc16 	blt	r5,r4,47ec <___vfprintf_internal_r+0x1b44>
    40bc:	42000204 	addi	r8,r8,8
    40c0:	dac03317 	ldw	r11,204(sp)
    40c4:	8489c83a 	sub	r4,r16,r18
    40c8:	5885c83a 	sub	r2,r11,r2
    40cc:	1021883a 	mov	r16,r2
    40d0:	2080010e 	bge	r4,r2,40d8 <___vfprintf_internal_r+0x1430>
    40d4:	2021883a 	mov	r16,r4
    40d8:	04000a0e 	bge	zero,r16,4104 <___vfprintf_internal_r+0x145c>
    40dc:	d9001f17 	ldw	r4,124(sp)
    40e0:	1c07883a 	add	r3,r3,r16
    40e4:	44800015 	stw	r18,0(r8)
    40e8:	21000044 	addi	r4,r4,1
    40ec:	44000115 	stw	r16,4(r8)
    40f0:	d8c02015 	stw	r3,128(sp)
    40f4:	d9001f15 	stw	r4,124(sp)
    40f8:	014001c4 	movi	r5,7
    40fc:	2901e316 	blt	r5,r4,488c <___vfprintf_internal_r+0x1be4>
    4100:	42000204 	addi	r8,r8,8
    4104:	8001df16 	blt	r16,zero,4884 <___vfprintf_internal_r+0x1bdc>
    4108:	1421c83a 	sub	r16,r2,r16
    410c:	043ccc0e 	bge	zero,r16,3440 <__alt_mem_Flash_flash_data+0xf4003440>
    4110:	04800404 	movi	r18,16
    4114:	d8801f17 	ldw	r2,124(sp)
    4118:	943efc0e 	bge	r18,r16,3d0c <__alt_mem_Flash_flash_data+0xf4003d0c>
    411c:	014000b4 	movhi	r5,2
    4120:	2971ad84 	addi	r5,r5,-14666
    4124:	d9402c15 	stw	r5,176(sp)
    4128:	054001c4 	movi	r21,7
    412c:	00000306 	br	413c <___vfprintf_internal_r+0x1494>
    4130:	42000204 	addi	r8,r8,8
    4134:	843ffc04 	addi	r16,r16,-16
    4138:	943ef70e 	bge	r18,r16,3d18 <__alt_mem_Flash_flash_data+0xf4003d18>
    413c:	18c00404 	addi	r3,r3,16
    4140:	10800044 	addi	r2,r2,1
    4144:	45000015 	stw	r20,0(r8)
    4148:	44800115 	stw	r18,4(r8)
    414c:	d8c02015 	stw	r3,128(sp)
    4150:	d8801f15 	stw	r2,124(sp)
    4154:	a8bff60e 	bge	r21,r2,4130 <__alt_mem_Flash_flash_data+0xf4004130>
    4158:	b009883a 	mov	r4,r22
    415c:	b80b883a 	mov	r5,r23
    4160:	d9801e04 	addi	r6,sp,120
    4164:	000afac0 	call	afac <__sprint_r>
    4168:	103bc31e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    416c:	d8c02017 	ldw	r3,128(sp)
    4170:	d8801f17 	ldw	r2,124(sp)
    4174:	da000404 	addi	r8,sp,16
    4178:	003fee06 	br	4134 <__alt_mem_Flash_flash_data+0xf4004134>
    417c:	8888703a 	and	r4,r17,r2
    4180:	203eab1e 	bne	r4,zero,3c30 <__alt_mem_Flash_flash_data+0xf4003c30>
    4184:	dc001f17 	ldw	r16,124(sp)
    4188:	db003117 	ldw	r12,196(sp)
    418c:	40800115 	stw	r2,4(r8)
    4190:	84000044 	addi	r16,r16,1
    4194:	43000015 	stw	r12,0(r8)
    4198:	d8c02015 	stw	r3,128(sp)
    419c:	dc001f15 	stw	r16,124(sp)
    41a0:	008001c4 	movi	r2,7
    41a4:	14000e16 	blt	r2,r16,41e0 <___vfprintf_internal_r+0x1538>
    41a8:	44800204 	addi	r18,r8,8
    41ac:	003ecb06 	br	3cdc <__alt_mem_Flash_flash_data+0xf4003cdc>
    41b0:	008000b4 	movhi	r2,2
    41b4:	10b1ad84 	addi	r2,r2,-14666
    41b8:	d8802c15 	stw	r2,176(sp)
    41bc:	dac02c17 	ldw	r11,176(sp)
    41c0:	1d47883a 	add	r3,r3,r21
    41c4:	84000044 	addi	r16,r16,1
    41c8:	92c00015 	stw	r11,0(r18)
    41cc:	95400115 	stw	r21,4(r18)
    41d0:	d8c02015 	stw	r3,128(sp)
    41d4:	dc001f15 	stw	r16,124(sp)
    41d8:	008001c4 	movi	r2,7
    41dc:	143ebe0e 	bge	r2,r16,3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    41e0:	b009883a 	mov	r4,r22
    41e4:	b80b883a 	mov	r5,r23
    41e8:	d9801e04 	addi	r6,sp,120
    41ec:	000afac0 	call	afac <__sprint_r>
    41f0:	103ba11e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    41f4:	d8c02017 	ldw	r3,128(sp)
    41f8:	dc001f17 	ldw	r16,124(sp)
    41fc:	dc800404 	addi	r18,sp,16
    4200:	003eb606 	br	3cdc <__alt_mem_Flash_flash_data+0xf4003cdc>
    4204:	b009883a 	mov	r4,r22
    4208:	b80b883a 	mov	r5,r23
    420c:	d9801e04 	addi	r6,sp,120
    4210:	000afac0 	call	afac <__sprint_r>
    4214:	103b981e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4218:	d8c02017 	ldw	r3,128(sp)
    421c:	dc001f17 	ldw	r16,124(sp)
    4220:	da000404 	addi	r8,sp,16
    4224:	003e8d06 	br	3c5c <__alt_mem_Flash_flash_data+0xf4003c5c>
    4228:	b009883a 	mov	r4,r22
    422c:	b80b883a 	mov	r5,r23
    4230:	d9801e04 	addi	r6,sp,120
    4234:	000afac0 	call	afac <__sprint_r>
    4238:	103b8f1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    423c:	d8c02017 	ldw	r3,128(sp)
    4240:	dc001f17 	ldw	r16,124(sp)
    4244:	dc800404 	addi	r18,sp,16
    4248:	003e8f06 	br	3c88 <__alt_mem_Flash_flash_data+0xf4003c88>
    424c:	db001e04 	addi	r12,sp,120
    4250:	0025883a 	mov	r18,zero
    4254:	db003115 	stw	r12,196(sp)
    4258:	003be106 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    425c:	b009883a 	mov	r4,r22
    4260:	b80b883a 	mov	r5,r23
    4264:	d9801e04 	addi	r6,sp,120
    4268:	000afac0 	call	afac <__sprint_r>
    426c:	103b821e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4270:	d8c02017 	ldw	r3,128(sp)
    4274:	da000404 	addi	r8,sp,16
    4278:	003c3b06 	br	3368 <__alt_mem_Flash_flash_data+0xf4003368>
    427c:	04e7c83a 	sub	r19,zero,r19
    4280:	9804c03a 	cmpne	r2,r19,zero
    4284:	0739c83a 	sub	fp,zero,fp
    4288:	e0b9c83a 	sub	fp,fp,r2
    428c:	05400b44 	movi	r21,45
    4290:	dd402785 	stb	r21,158(sp)
    4294:	da403215 	stw	r9,200(sp)
    4298:	00800044 	movi	r2,1
    429c:	9f06b03a 	or	r3,r19,fp
    42a0:	003bb506 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    42a4:	da003f15 	stw	r8,252(sp)
    42a8:	da403e15 	stw	r9,248(sp)
    42ac:	0009aa80 	call	9aa8 <__fpclassifyd>
    42b0:	da003f17 	ldw	r8,252(sp)
    42b4:	da403e17 	ldw	r9,248(sp)
    42b8:	1000ce26 	beq	r2,zero,45f4 <___vfprintf_internal_r+0x194c>
    42bc:	057ff7c4 	movi	r21,-33
    42c0:	00bfffc4 	movi	r2,-1
    42c4:	856a703a 	and	r21,r16,r21
    42c8:	4881e826 	beq	r9,r2,4a6c <___vfprintf_internal_r+0x1dc4>
    42cc:	008011c4 	movi	r2,71
    42d0:	a881e326 	beq	r21,r2,4a60 <___vfprintf_internal_r+0x1db8>
    42d4:	db003917 	ldw	r12,228(sp)
    42d8:	8ac04014 	ori	r11,r17,256
    42dc:	dac02d15 	stw	r11,180(sp)
    42e0:	6001ed16 	blt	r12,zero,4a98 <___vfprintf_internal_r+0x1df0>
    42e4:	dc803917 	ldw	r18,228(sp)
    42e8:	d8002b05 	stb	zero,172(sp)
    42ec:	00801984 	movi	r2,102
    42f0:	80811826 	beq	r16,r2,4754 <___vfprintf_internal_r+0x1aac>
    42f4:	00801184 	movi	r2,70
    42f8:	80811626 	beq	r16,r2,4754 <___vfprintf_internal_r+0x1aac>
    42fc:	00801144 	movi	r2,69
    4300:	a881e926 	beq	r21,r2,4aa8 <___vfprintf_internal_r+0x1e00>
    4304:	4839883a 	mov	fp,r9
    4308:	d8802604 	addi	r2,sp,152
    430c:	d8800115 	stw	r2,4(sp)
    4310:	d9403717 	ldw	r5,220(sp)
    4314:	d8802504 	addi	r2,sp,148
    4318:	d8800215 	stw	r2,8(sp)
    431c:	d8802104 	addi	r2,sp,132
    4320:	df000015 	stw	fp,0(sp)
    4324:	d8800315 	stw	r2,12(sp)
    4328:	b009883a 	mov	r4,r22
    432c:	900d883a 	mov	r6,r18
    4330:	01c00084 	movi	r7,2
    4334:	da003f15 	stw	r8,252(sp)
    4338:	da403e15 	stw	r9,248(sp)
    433c:	000502c0 	call	502c <_dtoa_r>
    4340:	d8803115 	stw	r2,196(sp)
    4344:	008019c4 	movi	r2,103
    4348:	da003f17 	ldw	r8,252(sp)
    434c:	da403e17 	ldw	r9,248(sp)
    4350:	80800226 	beq	r16,r2,435c <___vfprintf_internal_r+0x16b4>
    4354:	008011c4 	movi	r2,71
    4358:	8081101e 	bne	r16,r2,479c <___vfprintf_internal_r+0x1af4>
    435c:	8880004c 	andi	r2,r17,1
    4360:	1001dd26 	beq	r2,zero,4ad8 <___vfprintf_internal_r+0x1e30>
    4364:	db003117 	ldw	r12,196(sp)
    4368:	6715883a 	add	r10,r12,fp
    436c:	d9003717 	ldw	r4,220(sp)
    4370:	900b883a 	mov	r5,r18
    4374:	000d883a 	mov	r6,zero
    4378:	000f883a 	mov	r7,zero
    437c:	da003f15 	stw	r8,252(sp)
    4380:	da403e15 	stw	r9,248(sp)
    4384:	da803d15 	stw	r10,244(sp)
    4388:	000ea500 	call	ea50 <__eqdf2>
    438c:	da003f17 	ldw	r8,252(sp)
    4390:	da403e17 	ldw	r9,248(sp)
    4394:	da803d17 	ldw	r10,244(sp)
    4398:	10016526 	beq	r2,zero,4930 <___vfprintf_internal_r+0x1c88>
    439c:	d8802117 	ldw	r2,132(sp)
    43a0:	1280062e 	bgeu	r2,r10,43bc <___vfprintf_internal_r+0x1714>
    43a4:	01000c04 	movi	r4,48
    43a8:	10c00044 	addi	r3,r2,1
    43ac:	d8c02115 	stw	r3,132(sp)
    43b0:	11000005 	stb	r4,0(r2)
    43b4:	d8802117 	ldw	r2,132(sp)
    43b8:	12bffb36 	bltu	r2,r10,43a8 <__alt_mem_Flash_flash_data+0xf40043a8>
    43bc:	db003117 	ldw	r12,196(sp)
    43c0:	1305c83a 	sub	r2,r2,r12
    43c4:	d8803315 	stw	r2,204(sp)
    43c8:	008011c4 	movi	r2,71
    43cc:	a8814d26 	beq	r21,r2,4904 <___vfprintf_internal_r+0x1c5c>
    43d0:	00801944 	movi	r2,101
    43d4:	1402060e 	bge	r2,r16,4bf0 <___vfprintf_internal_r+0x1f48>
    43d8:	00801984 	movi	r2,102
    43dc:	8081b426 	beq	r16,r2,4ab0 <___vfprintf_internal_r+0x1e08>
    43e0:	db002617 	ldw	r12,152(sp)
    43e4:	db003415 	stw	r12,208(sp)
    43e8:	db003417 	ldw	r12,208(sp)
    43ec:	dac03317 	ldw	r11,204(sp)
    43f0:	62c1a016 	blt	r12,r11,4a74 <___vfprintf_internal_r+0x1dcc>
    43f4:	8c40004c 	andi	r17,r17,1
    43f8:	8801bf1e 	bne	r17,zero,4af8 <___vfprintf_internal_r+0x1e50>
    43fc:	6005883a 	mov	r2,r12
    4400:	6001b316 	blt	r12,zero,4ad0 <___vfprintf_internal_r+0x1e28>
    4404:	dc803417 	ldw	r18,208(sp)
    4408:	df002b07 	ldb	fp,172(sp)
    440c:	e0012e1e 	bne	fp,zero,48c8 <___vfprintf_internal_r+0x1c20>
    4410:	dc402d17 	ldw	r17,180(sp)
    4414:	dd402783 	ldbu	r21,158(sp)
    4418:	d8802b15 	stw	r2,172(sp)
    441c:	dcc02d15 	stw	r19,180(sp)
    4420:	d8003215 	stw	zero,200(sp)
    4424:	003b7306 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    4428:	00800084 	movi	r2,2
    442c:	003c4d06 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>
    4430:	8880040c 	andi	r2,r17,16
    4434:	1000091e 	bne	r2,zero,445c <___vfprintf_internal_r+0x17b4>
    4438:	8c40100c 	andi	r17,r17,64
    443c:	88000726 	beq	r17,zero,445c <___vfprintf_internal_r+0x17b4>
    4440:	db002d17 	ldw	r12,180(sp)
    4444:	dac02f17 	ldw	r11,188(sp)
    4448:	60800017 	ldw	r2,0(r12)
    444c:	63000104 	addi	r12,r12,4
    4450:	db002d15 	stw	r12,180(sp)
    4454:	12c0000d 	sth	r11,0(r2)
    4458:	003a4e06 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    445c:	db002d17 	ldw	r12,180(sp)
    4460:	dac02f17 	ldw	r11,188(sp)
    4464:	60800017 	ldw	r2,0(r12)
    4468:	63000104 	addi	r12,r12,4
    446c:	db002d15 	stw	r12,180(sp)
    4470:	12c00015 	stw	r11,0(r2)
    4474:	003a4706 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    4478:	1c000007 	ldb	r16,0(r3)
    447c:	1805883a 	mov	r2,r3
    4480:	003a6e06 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    4484:	88c0100c 	andi	r3,r17,64
    4488:	18006b26 	beq	r3,zero,4638 <___vfprintf_internal_r+0x1990>
    448c:	dac02d17 	ldw	r11,180(sp)
    4490:	14c0000b 	ldhu	r19,0(r2)
    4494:	0039883a 	mov	fp,zero
    4498:	5ac00104 	addi	r11,r11,4
    449c:	dac02d15 	stw	r11,180(sp)
    44a0:	003cb206 	br	376c <__alt_mem_Flash_flash_data+0xf400376c>
    44a4:	010000b4 	movhi	r4,2
    44a8:	2131ad84 	addi	r4,r4,-14666
    44ac:	d9002c15 	stw	r4,176(sp)
    44b0:	dac02c17 	ldw	r11,176(sp)
    44b4:	1c87883a 	add	r3,r3,r18
    44b8:	10800044 	addi	r2,r2,1
    44bc:	42c00015 	stw	r11,0(r8)
    44c0:	44800115 	stw	r18,4(r8)
    44c4:	d8c02015 	stw	r3,128(sp)
    44c8:	d8801f15 	stw	r2,124(sp)
    44cc:	010001c4 	movi	r4,7
    44d0:	20bee016 	blt	r4,r2,4054 <__alt_mem_Flash_flash_data+0xf4004054>
    44d4:	42000204 	addi	r8,r8,8
    44d8:	003ee506 	br	4070 <__alt_mem_Flash_flash_data+0xf4004070>
    44dc:	010000b4 	movhi	r4,2
    44e0:	2131ad84 	addi	r4,r4,-14666
    44e4:	d9002c15 	stw	r4,176(sp)
    44e8:	003bbe06 	br	33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    44ec:	b009883a 	mov	r4,r22
    44f0:	b80b883a 	mov	r5,r23
    44f4:	d9801e04 	addi	r6,sp,120
    44f8:	000afac0 	call	afac <__sprint_r>
    44fc:	103ade1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4500:	d8c02017 	ldw	r3,128(sp)
    4504:	da000404 	addi	r8,sp,16
    4508:	003d6b06 	br	3ab8 <__alt_mem_Flash_flash_data+0xf4003ab8>
    450c:	d8801f17 	ldw	r2,124(sp)
    4510:	030000b4 	movhi	r12,2
    4514:	01000044 	movi	r4,1
    4518:	18c00044 	addi	r3,r3,1
    451c:	10800044 	addi	r2,r2,1
    4520:	6331a504 	addi	r12,r12,-14700
    4524:	41000115 	stw	r4,4(r8)
    4528:	43000015 	stw	r12,0(r8)
    452c:	d8c02015 	stw	r3,128(sp)
    4530:	d8801f15 	stw	r2,124(sp)
    4534:	010001c4 	movi	r4,7
    4538:	20804916 	blt	r4,r2,4660 <___vfprintf_internal_r+0x19b8>
    453c:	42000204 	addi	r8,r8,8
    4540:	8000041e 	bne	r16,zero,4554 <___vfprintf_internal_r+0x18ac>
    4544:	dac03317 	ldw	r11,204(sp)
    4548:	5800021e 	bne	r11,zero,4554 <___vfprintf_internal_r+0x18ac>
    454c:	8880004c 	andi	r2,r17,1
    4550:	103bbb26 	beq	r2,zero,3440 <__alt_mem_Flash_flash_data+0xf4003440>
    4554:	db003817 	ldw	r12,224(sp)
    4558:	d8801f17 	ldw	r2,124(sp)
    455c:	dac03517 	ldw	r11,212(sp)
    4560:	1b07883a 	add	r3,r3,r12
    4564:	10800044 	addi	r2,r2,1
    4568:	42c00015 	stw	r11,0(r8)
    456c:	43000115 	stw	r12,4(r8)
    4570:	d8c02015 	stw	r3,128(sp)
    4574:	d8801f15 	stw	r2,124(sp)
    4578:	010001c4 	movi	r4,7
    457c:	20812e16 	blt	r4,r2,4a38 <___vfprintf_internal_r+0x1d90>
    4580:	42000204 	addi	r8,r8,8
    4584:	0421c83a 	sub	r16,zero,r16
    4588:	04005c0e 	bge	zero,r16,46fc <___vfprintf_internal_r+0x1a54>
    458c:	04800404 	movi	r18,16
    4590:	94009f0e 	bge	r18,r16,4810 <___vfprintf_internal_r+0x1b68>
    4594:	010000b4 	movhi	r4,2
    4598:	2131ad84 	addi	r4,r4,-14666
    459c:	d9002c15 	stw	r4,176(sp)
    45a0:	054001c4 	movi	r21,7
    45a4:	00000306 	br	45b4 <___vfprintf_internal_r+0x190c>
    45a8:	42000204 	addi	r8,r8,8
    45ac:	843ffc04 	addi	r16,r16,-16
    45b0:	94009a0e 	bge	r18,r16,481c <___vfprintf_internal_r+0x1b74>
    45b4:	18c00404 	addi	r3,r3,16
    45b8:	10800044 	addi	r2,r2,1
    45bc:	45000015 	stw	r20,0(r8)
    45c0:	44800115 	stw	r18,4(r8)
    45c4:	d8c02015 	stw	r3,128(sp)
    45c8:	d8801f15 	stw	r2,124(sp)
    45cc:	a8bff60e 	bge	r21,r2,45a8 <__alt_mem_Flash_flash_data+0xf40045a8>
    45d0:	b009883a 	mov	r4,r22
    45d4:	b80b883a 	mov	r5,r23
    45d8:	d9801e04 	addi	r6,sp,120
    45dc:	000afac0 	call	afac <__sprint_r>
    45e0:	103aa51e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    45e4:	d8c02017 	ldw	r3,128(sp)
    45e8:	d8801f17 	ldw	r2,124(sp)
    45ec:	da000404 	addi	r8,sp,16
    45f0:	003fee06 	br	45ac <__alt_mem_Flash_flash_data+0xf40045ac>
    45f4:	008011c4 	movi	r2,71
    45f8:	1400be16 	blt	r2,r16,48f4 <___vfprintf_internal_r+0x1c4c>
    45fc:	030000b4 	movhi	r12,2
    4600:	63319704 	addi	r12,r12,-14756
    4604:	db003115 	stw	r12,196(sp)
    4608:	00c000c4 	movi	r3,3
    460c:	00bfdfc4 	movi	r2,-129
    4610:	d8c02b15 	stw	r3,172(sp)
    4614:	88a2703a 	and	r17,r17,r2
    4618:	dd402783 	ldbu	r21,158(sp)
    461c:	dcc02d15 	stw	r19,180(sp)
    4620:	1825883a 	mov	r18,r3
    4624:	d8003215 	stw	zero,200(sp)
    4628:	d8003415 	stw	zero,208(sp)
    462c:	003af106 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    4630:	4825883a 	mov	r18,r9
    4634:	003c9306 	br	3884 <__alt_mem_Flash_flash_data+0xf4003884>
    4638:	db002d17 	ldw	r12,180(sp)
    463c:	14c00017 	ldw	r19,0(r2)
    4640:	0039883a 	mov	fp,zero
    4644:	63000104 	addi	r12,r12,4
    4648:	db002d15 	stw	r12,180(sp)
    464c:	003c4706 	br	376c <__alt_mem_Flash_flash_data+0xf400376c>
    4650:	008000b4 	movhi	r2,2
    4654:	10b19504 	addi	r2,r2,-14764
    4658:	d8803115 	stw	r2,196(sp)
    465c:	003bf106 	br	3624 <__alt_mem_Flash_flash_data+0xf4003624>
    4660:	b009883a 	mov	r4,r22
    4664:	b80b883a 	mov	r5,r23
    4668:	d9801e04 	addi	r6,sp,120
    466c:	000afac0 	call	afac <__sprint_r>
    4670:	103a811e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4674:	dc002617 	ldw	r16,152(sp)
    4678:	d8c02017 	ldw	r3,128(sp)
    467c:	da000404 	addi	r8,sp,16
    4680:	003faf06 	br	4540 <__alt_mem_Flash_flash_data+0xf4004540>
    4684:	db002e17 	ldw	r12,184(sp)
    4688:	1805883a 	mov	r2,r3
    468c:	dac02d15 	stw	r11,180(sp)
    4690:	0319c83a 	sub	r12,zero,r12
    4694:	db002e15 	stw	r12,184(sp)
    4698:	003a8206 	br	30a4 <__alt_mem_Flash_flash_data+0xf40030a4>
    469c:	18800044 	addi	r2,r3,1
    46a0:	8c400814 	ori	r17,r17,32
    46a4:	1c000047 	ldb	r16,1(r3)
    46a8:	0039e406 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    46ac:	b009883a 	mov	r4,r22
    46b0:	b80b883a 	mov	r5,r23
    46b4:	d9801e04 	addi	r6,sp,120
    46b8:	000afac0 	call	afac <__sprint_r>
    46bc:	103a6e1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    46c0:	d8c02017 	ldw	r3,128(sp)
    46c4:	da000404 	addi	r8,sp,16
    46c8:	003d0c06 	br	3afc <__alt_mem_Flash_flash_data+0xf4003afc>
    46cc:	db002817 	ldw	r12,160(sp)
    46d0:	d8c03117 	ldw	r3,196(sp)
    46d4:	60e5c83a 	sub	r18,r12,r3
    46d8:	003ac106 	br	31e0 <__alt_mem_Flash_flash_data+0xf40031e0>
    46dc:	b009883a 	mov	r4,r22
    46e0:	b80b883a 	mov	r5,r23
    46e4:	d9801e04 	addi	r6,sp,120
    46e8:	000afac0 	call	afac <__sprint_r>
    46ec:	103a621e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    46f0:	d8c02017 	ldw	r3,128(sp)
    46f4:	d8801f17 	ldw	r2,124(sp)
    46f8:	da000404 	addi	r8,sp,16
    46fc:	db003317 	ldw	r12,204(sp)
    4700:	dac03117 	ldw	r11,196(sp)
    4704:	10800044 	addi	r2,r2,1
    4708:	1b07883a 	add	r3,r3,r12
    470c:	42c00015 	stw	r11,0(r8)
    4710:	43000115 	stw	r12,4(r8)
    4714:	d8c02015 	stw	r3,128(sp)
    4718:	d8801f15 	stw	r2,124(sp)
    471c:	010001c4 	movi	r4,7
    4720:	20bb460e 	bge	r4,r2,343c <__alt_mem_Flash_flash_data+0xf400343c>
    4724:	003d8506 	br	3d3c <__alt_mem_Flash_flash_data+0xf4003d3c>
    4728:	da003f15 	stw	r8,252(sp)
    472c:	0000c800 	call	c80 <strlen>
    4730:	1025883a 	mov	r18,r2
    4734:	da003f17 	ldw	r8,252(sp)
    4738:	903c540e 	bge	r18,zero,388c <__alt_mem_Flash_flash_data+0xf400388c>
    473c:	0005883a 	mov	r2,zero
    4740:	003c5206 	br	388c <__alt_mem_Flash_flash_data+0xf400388c>
    4744:	010000b4 	movhi	r4,2
    4748:	2131b184 	addi	r4,r4,-14650
    474c:	d9003615 	stw	r4,216(sp)
    4750:	003adc06 	br	32c4 <__alt_mem_Flash_flash_data+0xf40032c4>
    4754:	d8802604 	addi	r2,sp,152
    4758:	d8800115 	stw	r2,4(sp)
    475c:	d9403717 	ldw	r5,220(sp)
    4760:	d8802504 	addi	r2,sp,148
    4764:	d8800215 	stw	r2,8(sp)
    4768:	d8802104 	addi	r2,sp,132
    476c:	da400015 	stw	r9,0(sp)
    4770:	d8800315 	stw	r2,12(sp)
    4774:	b009883a 	mov	r4,r22
    4778:	900d883a 	mov	r6,r18
    477c:	01c000c4 	movi	r7,3
    4780:	da003f15 	stw	r8,252(sp)
    4784:	da403e15 	stw	r9,248(sp)
    4788:	000502c0 	call	502c <_dtoa_r>
    478c:	da403e17 	ldw	r9,248(sp)
    4790:	da003f17 	ldw	r8,252(sp)
    4794:	d8803115 	stw	r2,196(sp)
    4798:	4839883a 	mov	fp,r9
    479c:	dac03117 	ldw	r11,196(sp)
    47a0:	00801184 	movi	r2,70
    47a4:	5f15883a 	add	r10,r11,fp
    47a8:	a8bef01e 	bne	r21,r2,436c <__alt_mem_Flash_flash_data+0xf400436c>
    47ac:	59000007 	ldb	r4,0(r11)
    47b0:	00800c04 	movi	r2,48
    47b4:	2080d526 	beq	r4,r2,4b0c <___vfprintf_internal_r+0x1e64>
    47b8:	d8c02617 	ldw	r3,152(sp)
    47bc:	50d5883a 	add	r10,r10,r3
    47c0:	003eea06 	br	436c <__alt_mem_Flash_flash_data+0xf400436c>
    47c4:	0025883a 	mov	r18,zero
    47c8:	003db306 	br	3e98 <__alt_mem_Flash_flash_data+0xf4003e98>
    47cc:	b009883a 	mov	r4,r22
    47d0:	b80b883a 	mov	r5,r23
    47d4:	d9801e04 	addi	r6,sp,120
    47d8:	000afac0 	call	afac <__sprint_r>
    47dc:	103a261e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    47e0:	d8c02017 	ldw	r3,128(sp)
    47e4:	da000404 	addi	r8,sp,16
    47e8:	003daa06 	br	3e94 <__alt_mem_Flash_flash_data+0xf4003e94>
    47ec:	b009883a 	mov	r4,r22
    47f0:	b80b883a 	mov	r5,r23
    47f4:	d9801e04 	addi	r6,sp,120
    47f8:	000afac0 	call	afac <__sprint_r>
    47fc:	103a1e1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4800:	d8802617 	ldw	r2,152(sp)
    4804:	d8c02017 	ldw	r3,128(sp)
    4808:	da000404 	addi	r8,sp,16
    480c:	003e2c06 	br	40c0 <__alt_mem_Flash_flash_data+0xf40040c0>
    4810:	030000b4 	movhi	r12,2
    4814:	6331ad84 	addi	r12,r12,-14666
    4818:	db002c15 	stw	r12,176(sp)
    481c:	dac02c17 	ldw	r11,176(sp)
    4820:	1c07883a 	add	r3,r3,r16
    4824:	10800044 	addi	r2,r2,1
    4828:	42c00015 	stw	r11,0(r8)
    482c:	44000115 	stw	r16,4(r8)
    4830:	d8c02015 	stw	r3,128(sp)
    4834:	d8801f15 	stw	r2,124(sp)
    4838:	010001c4 	movi	r4,7
    483c:	20bfa716 	blt	r4,r2,46dc <__alt_mem_Flash_flash_data+0xf40046dc>
    4840:	42000204 	addi	r8,r8,8
    4844:	003fad06 	br	46fc <__alt_mem_Flash_flash_data+0xf40046fc>
    4848:	00800184 	movi	r2,6
    484c:	1240012e 	bgeu	r2,r9,4854 <___vfprintf_internal_r+0x1bac>
    4850:	1013883a 	mov	r9,r2
    4854:	4825883a 	mov	r18,r9
    4858:	4805883a 	mov	r2,r9
    485c:	4800c216 	blt	r9,zero,4b68 <___vfprintf_internal_r+0x1ec0>
    4860:	d8802b15 	stw	r2,172(sp)
    4864:	008000b4 	movhi	r2,2
    4868:	10b1a304 	addi	r2,r2,-14708
    486c:	d8803115 	stw	r2,196(sp)
    4870:	dcc02d15 	stw	r19,180(sp)
    4874:	d8003215 	stw	zero,200(sp)
    4878:	d8003415 	stw	zero,208(sp)
    487c:	0005883a 	mov	r2,zero
    4880:	003a6306 	br	3210 <__alt_mem_Flash_flash_data+0xf4003210>
    4884:	0021883a 	mov	r16,zero
    4888:	003e1f06 	br	4108 <__alt_mem_Flash_flash_data+0xf4004108>
    488c:	b009883a 	mov	r4,r22
    4890:	b80b883a 	mov	r5,r23
    4894:	d9801e04 	addi	r6,sp,120
    4898:	000afac0 	call	afac <__sprint_r>
    489c:	1039f61e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    48a0:	d8802617 	ldw	r2,152(sp)
    48a4:	db003317 	ldw	r12,204(sp)
    48a8:	d8c02017 	ldw	r3,128(sp)
    48ac:	da000404 	addi	r8,sp,16
    48b0:	6085c83a 	sub	r2,r12,r2
    48b4:	003e1306 	br	4104 <__alt_mem_Flash_flash_data+0xf4004104>
    48b8:	030000b4 	movhi	r12,2
    48bc:	6331b184 	addi	r12,r12,-14650
    48c0:	db003615 	stw	r12,216(sp)
    48c4:	003b0206 	br	34d0 <__alt_mem_Flash_flash_data+0xf40034d0>
    48c8:	00c00b44 	movi	r3,45
    48cc:	d8802b15 	stw	r2,172(sp)
    48d0:	dc402d17 	ldw	r17,180(sp)
    48d4:	d8c02785 	stb	r3,158(sp)
    48d8:	dcc02d15 	stw	r19,180(sp)
    48dc:	d8003215 	stw	zero,200(sp)
    48e0:	00800b44 	movi	r2,45
    48e4:	003a4706 	br	3204 <__alt_mem_Flash_flash_data+0xf4003204>
    48e8:	05400b44 	movi	r21,45
    48ec:	dd402785 	stb	r21,158(sp)
    48f0:	003b4706 	br	3610 <__alt_mem_Flash_flash_data+0xf4003610>
    48f4:	008000b4 	movhi	r2,2
    48f8:	10b19804 	addi	r2,r2,-14752
    48fc:	d8803115 	stw	r2,196(sp)
    4900:	003f4106 	br	4608 <__alt_mem_Flash_flash_data+0xf4004608>
    4904:	d8c02617 	ldw	r3,152(sp)
    4908:	00bfff44 	movi	r2,-3
    490c:	18801116 	blt	r3,r2,4954 <___vfprintf_internal_r+0x1cac>
    4910:	48c01016 	blt	r9,r3,4954 <___vfprintf_internal_r+0x1cac>
    4914:	d8c03415 	stw	r3,208(sp)
    4918:	040019c4 	movi	r16,103
    491c:	003eb206 	br	43e8 <__alt_mem_Flash_flash_data+0xf40043e8>
    4920:	010000b4 	movhi	r4,2
    4924:	2131ad84 	addi	r4,r4,-14666
    4928:	d9002c15 	stw	r4,176(sp)
    492c:	003cb106 	br	3bf4 <__alt_mem_Flash_flash_data+0xf4003bf4>
    4930:	5005883a 	mov	r2,r10
    4934:	003ea106 	br	43bc <__alt_mem_Flash_flash_data+0xf40043bc>
    4938:	da402b15 	stw	r9,172(sp)
    493c:	dd402783 	ldbu	r21,158(sp)
    4940:	4825883a 	mov	r18,r9
    4944:	dcc02d15 	stw	r19,180(sp)
    4948:	d8003215 	stw	zero,200(sp)
    494c:	d8003415 	stw	zero,208(sp)
    4950:	003a2806 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    4954:	843fff84 	addi	r16,r16,-2
    4958:	1f3fffc4 	addi	fp,r3,-1
    495c:	df002615 	stw	fp,152(sp)
    4960:	dc0022c5 	stb	r16,139(sp)
    4964:	e0009816 	blt	fp,zero,4bc8 <___vfprintf_internal_r+0x1f20>
    4968:	00800ac4 	movi	r2,43
    496c:	d8802305 	stb	r2,140(sp)
    4970:	00800244 	movi	r2,9
    4974:	1700750e 	bge	r2,fp,4b4c <___vfprintf_internal_r+0x1ea4>
    4978:	dd4022c4 	addi	r21,sp,139
    497c:	dc002c15 	stw	r16,176(sp)
    4980:	4025883a 	mov	r18,r8
    4984:	a821883a 	mov	r16,r21
    4988:	e009883a 	mov	r4,fp
    498c:	01400284 	movi	r5,10
    4990:	000d87c0 	call	d87c <__modsi3>
    4994:	10800c04 	addi	r2,r2,48
    4998:	843fffc4 	addi	r16,r16,-1
    499c:	e009883a 	mov	r4,fp
    49a0:	01400284 	movi	r5,10
    49a4:	80800005 	stb	r2,0(r16)
    49a8:	000d8280 	call	d828 <__divsi3>
    49ac:	1039883a 	mov	fp,r2
    49b0:	00800244 	movi	r2,9
    49b4:	173ff416 	blt	r2,fp,4988 <__alt_mem_Flash_flash_data+0xf4004988>
    49b8:	9011883a 	mov	r8,r18
    49bc:	e0800c04 	addi	r2,fp,48
    49c0:	8025883a 	mov	r18,r16
    49c4:	913fffc4 	addi	r4,r18,-1
    49c8:	90bfffc5 	stb	r2,-1(r18)
    49cc:	dc002c17 	ldw	r16,176(sp)
    49d0:	2540852e 	bgeu	r4,r21,4be8 <___vfprintf_internal_r+0x1f40>
    49d4:	d9402384 	addi	r5,sp,142
    49d8:	2c8bc83a 	sub	r5,r5,r18
    49dc:	d8c02344 	addi	r3,sp,141
    49e0:	a94b883a 	add	r5,r21,r5
    49e4:	00000106 	br	49ec <___vfprintf_internal_r+0x1d44>
    49e8:	20800003 	ldbu	r2,0(r4)
    49ec:	18800005 	stb	r2,0(r3)
    49f0:	18c00044 	addi	r3,r3,1
    49f4:	21000044 	addi	r4,r4,1
    49f8:	197ffb1e 	bne	r3,r5,49e8 <__alt_mem_Flash_flash_data+0xf40049e8>
    49fc:	d8802304 	addi	r2,sp,140
    4a00:	1485c83a 	sub	r2,r2,r18
    4a04:	d8c02344 	addi	r3,sp,141
    4a08:	1885883a 	add	r2,r3,r2
    4a0c:	dac03317 	ldw	r11,204(sp)
    4a10:	156bc83a 	sub	r21,r2,r21
    4a14:	dd403a15 	stw	r21,232(sp)
    4a18:	00800044 	movi	r2,1
    4a1c:	5d65883a 	add	r18,r11,r21
    4a20:	12c0660e 	bge	r2,r11,4bbc <___vfprintf_internal_r+0x1f14>
    4a24:	94800044 	addi	r18,r18,1
    4a28:	9005883a 	mov	r2,r18
    4a2c:	90006116 	blt	r18,zero,4bb4 <___vfprintf_internal_r+0x1f0c>
    4a30:	d8003415 	stw	zero,208(sp)
    4a34:	003e7406 	br	4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4a38:	b009883a 	mov	r4,r22
    4a3c:	b80b883a 	mov	r5,r23
    4a40:	d9801e04 	addi	r6,sp,120
    4a44:	000afac0 	call	afac <__sprint_r>
    4a48:	10398b1e 	bne	r2,zero,3078 <__alt_mem_Flash_flash_data+0xf4003078>
    4a4c:	dc002617 	ldw	r16,152(sp)
    4a50:	d8c02017 	ldw	r3,128(sp)
    4a54:	d8801f17 	ldw	r2,124(sp)
    4a58:	da000404 	addi	r8,sp,16
    4a5c:	003ec906 	br	4584 <__alt_mem_Flash_flash_data+0xf4004584>
    4a60:	483e1c1e 	bne	r9,zero,42d4 <__alt_mem_Flash_flash_data+0xf40042d4>
    4a64:	9013883a 	mov	r9,r18
    4a68:	003e1a06 	br	42d4 <__alt_mem_Flash_flash_data+0xf40042d4>
    4a6c:	02400184 	movi	r9,6
    4a70:	003e1806 	br	42d4 <__alt_mem_Flash_flash_data+0xf40042d4>
    4a74:	d8c03417 	ldw	r3,208(sp)
    4a78:	00c04b0e 	bge	zero,r3,4ba8 <___vfprintf_internal_r+0x1f00>
    4a7c:	04800044 	movi	r18,1
    4a80:	dac03317 	ldw	r11,204(sp)
    4a84:	92e5883a 	add	r18,r18,r11
    4a88:	9005883a 	mov	r2,r18
    4a8c:	903e5e0e 	bge	r18,zero,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4a90:	0005883a 	mov	r2,zero
    4a94:	003e5c06 	br	4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4a98:	00c00b44 	movi	r3,45
    4a9c:	64a0003c 	xorhi	r18,r12,32768
    4aa0:	d8c02b05 	stb	r3,172(sp)
    4aa4:	003e1106 	br	42ec <__alt_mem_Flash_flash_data+0xf40042ec>
    4aa8:	4f000044 	addi	fp,r9,1
    4aac:	003e1606 	br	4308 <__alt_mem_Flash_flash_data+0xf4004308>
    4ab0:	d8c02617 	ldw	r3,152(sp)
    4ab4:	d8c03415 	stw	r3,208(sp)
    4ab8:	00c0350e 	bge	zero,r3,4b90 <___vfprintf_internal_r+0x1ee8>
    4abc:	4800081e 	bne	r9,zero,4ae0 <___vfprintf_internal_r+0x1e38>
    4ac0:	8c40004c 	andi	r17,r17,1
    4ac4:	8800061e 	bne	r17,zero,4ae0 <___vfprintf_internal_r+0x1e38>
    4ac8:	1805883a 	mov	r2,r3
    4acc:	183e4d0e 	bge	r3,zero,4404 <__alt_mem_Flash_flash_data+0xf4004404>
    4ad0:	0005883a 	mov	r2,zero
    4ad4:	003e4b06 	br	4404 <__alt_mem_Flash_flash_data+0xf4004404>
    4ad8:	d8802117 	ldw	r2,132(sp)
    4adc:	003e3706 	br	43bc <__alt_mem_Flash_flash_data+0xf40043bc>
    4ae0:	dac03417 	ldw	r11,208(sp)
    4ae4:	4a400044 	addi	r9,r9,1
    4ae8:	5a65883a 	add	r18,r11,r9
    4aec:	9005883a 	mov	r2,r18
    4af0:	903e450e 	bge	r18,zero,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4af4:	003fe606 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4af8:	db003417 	ldw	r12,208(sp)
    4afc:	64800044 	addi	r18,r12,1
    4b00:	9005883a 	mov	r2,r18
    4b04:	903e400e 	bge	r18,zero,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4b08:	003fe106 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4b0c:	d9003717 	ldw	r4,220(sp)
    4b10:	900b883a 	mov	r5,r18
    4b14:	000d883a 	mov	r6,zero
    4b18:	000f883a 	mov	r7,zero
    4b1c:	da003f15 	stw	r8,252(sp)
    4b20:	da403e15 	stw	r9,248(sp)
    4b24:	da803d15 	stw	r10,244(sp)
    4b28:	000ea500 	call	ea50 <__eqdf2>
    4b2c:	da003f17 	ldw	r8,252(sp)
    4b30:	da403e17 	ldw	r9,248(sp)
    4b34:	da803d17 	ldw	r10,244(sp)
    4b38:	103f1f26 	beq	r2,zero,47b8 <__alt_mem_Flash_flash_data+0xf40047b8>
    4b3c:	00800044 	movi	r2,1
    4b40:	1707c83a 	sub	r3,r2,fp
    4b44:	d8c02615 	stw	r3,152(sp)
    4b48:	003f1c06 	br	47bc <__alt_mem_Flash_flash_data+0xf40047bc>
    4b4c:	00800c04 	movi	r2,48
    4b50:	e0c00c04 	addi	r3,fp,48
    4b54:	d8802345 	stb	r2,141(sp)
    4b58:	d8c02385 	stb	r3,142(sp)
    4b5c:	d88023c4 	addi	r2,sp,143
    4b60:	dd4022c4 	addi	r21,sp,139
    4b64:	003fa906 	br	4a0c <__alt_mem_Flash_flash_data+0xf4004a0c>
    4b68:	0005883a 	mov	r2,zero
    4b6c:	003f3c06 	br	4860 <__alt_mem_Flash_flash_data+0xf4004860>
    4b70:	dac02d17 	ldw	r11,180(sp)
    4b74:	5a400017 	ldw	r9,0(r11)
    4b78:	5ac00104 	addi	r11,r11,4
    4b7c:	dac02d15 	stw	r11,180(sp)
    4b80:	483ec80e 	bge	r9,zero,46a4 <__alt_mem_Flash_flash_data+0xf40046a4>
    4b84:	027fffc4 	movi	r9,-1
    4b88:	1c000047 	ldb	r16,1(r3)
    4b8c:	0038ab06 	br	2e3c <__alt_mem_Flash_flash_data+0xf4002e3c>
    4b90:	4800111e 	bne	r9,zero,4bd8 <___vfprintf_internal_r+0x1f30>
    4b94:	8c40004c 	andi	r17,r17,1
    4b98:	88000f1e 	bne	r17,zero,4bd8 <___vfprintf_internal_r+0x1f30>
    4b9c:	00800044 	movi	r2,1
    4ba0:	1025883a 	mov	r18,r2
    4ba4:	003e1806 	br	4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4ba8:	04800084 	movi	r18,2
    4bac:	90e5c83a 	sub	r18,r18,r3
    4bb0:	003fb306 	br	4a80 <__alt_mem_Flash_flash_data+0xf4004a80>
    4bb4:	0005883a 	mov	r2,zero
    4bb8:	003f9d06 	br	4a30 <__alt_mem_Flash_flash_data+0xf4004a30>
    4bbc:	88a2703a 	and	r17,r17,r2
    4bc0:	883f9926 	beq	r17,zero,4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4bc4:	003f9706 	br	4a24 <__alt_mem_Flash_flash_data+0xf4004a24>
    4bc8:	00800b44 	movi	r2,45
    4bcc:	0739c83a 	sub	fp,zero,fp
    4bd0:	d8802305 	stb	r2,140(sp)
    4bd4:	003f6606 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    4bd8:	4c800084 	addi	r18,r9,2
    4bdc:	9005883a 	mov	r2,r18
    4be0:	903e090e 	bge	r18,zero,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4be4:	003faa06 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4be8:	d8802344 	addi	r2,sp,141
    4bec:	003f8706 	br	4a0c <__alt_mem_Flash_flash_data+0xf4004a0c>
    4bf0:	d8c02617 	ldw	r3,152(sp)
    4bf4:	003f5806 	br	4958 <__alt_mem_Flash_flash_data+0xf4004958>

00004bf8 <__vfprintf_internal>:
    4bf8:	2007883a 	mov	r3,r4
    4bfc:	010000b4 	movhi	r4,2
    4c00:	213ac004 	addi	r4,r4,-5376
    4c04:	21000017 	ldw	r4,0(r4)
    4c08:	2805883a 	mov	r2,r5
    4c0c:	300f883a 	mov	r7,r6
    4c10:	180b883a 	mov	r5,r3
    4c14:	100d883a 	mov	r6,r2
    4c18:	0002ca81 	jmpi	2ca8 <___vfprintf_internal_r>

00004c1c <__sbprintf>:
    4c1c:	2880030b 	ldhu	r2,12(r5)
    4c20:	2ac01917 	ldw	r11,100(r5)
    4c24:	2a80038b 	ldhu	r10,14(r5)
    4c28:	2a400717 	ldw	r9,28(r5)
    4c2c:	2a000917 	ldw	r8,36(r5)
    4c30:	defee204 	addi	sp,sp,-1144
    4c34:	00c10004 	movi	r3,1024
    4c38:	dc011a15 	stw	r16,1128(sp)
    4c3c:	10bfff4c 	andi	r2,r2,65533
    4c40:	2821883a 	mov	r16,r5
    4c44:	d8cb883a 	add	r5,sp,r3
    4c48:	dc811c15 	stw	r18,1136(sp)
    4c4c:	dc411b15 	stw	r17,1132(sp)
    4c50:	dfc11d15 	stw	ra,1140(sp)
    4c54:	2025883a 	mov	r18,r4
    4c58:	d881030d 	sth	r2,1036(sp)
    4c5c:	dac11915 	stw	r11,1124(sp)
    4c60:	da81038d 	sth	r10,1038(sp)
    4c64:	da410715 	stw	r9,1052(sp)
    4c68:	da010915 	stw	r8,1060(sp)
    4c6c:	dec10015 	stw	sp,1024(sp)
    4c70:	dec10415 	stw	sp,1040(sp)
    4c74:	d8c10215 	stw	r3,1032(sp)
    4c78:	d8c10515 	stw	r3,1044(sp)
    4c7c:	d8010615 	stw	zero,1048(sp)
    4c80:	0002ca80 	call	2ca8 <___vfprintf_internal_r>
    4c84:	1023883a 	mov	r17,r2
    4c88:	10000416 	blt	r2,zero,4c9c <__sbprintf+0x80>
    4c8c:	9009883a 	mov	r4,r18
    4c90:	d9410004 	addi	r5,sp,1024
    4c94:	000695c0 	call	695c <_fflush_r>
    4c98:	10000d1e 	bne	r2,zero,4cd0 <__sbprintf+0xb4>
    4c9c:	d8c1030b 	ldhu	r3,1036(sp)
    4ca0:	18c0100c 	andi	r3,r3,64
    4ca4:	18000326 	beq	r3,zero,4cb4 <__sbprintf+0x98>
    4ca8:	8080030b 	ldhu	r2,12(r16)
    4cac:	10801014 	ori	r2,r2,64
    4cb0:	8080030d 	sth	r2,12(r16)
    4cb4:	8805883a 	mov	r2,r17
    4cb8:	dfc11d17 	ldw	ra,1140(sp)
    4cbc:	dc811c17 	ldw	r18,1136(sp)
    4cc0:	dc411b17 	ldw	r17,1132(sp)
    4cc4:	dc011a17 	ldw	r16,1128(sp)
    4cc8:	dec11e04 	addi	sp,sp,1144
    4ccc:	f800283a 	ret
    4cd0:	047fffc4 	movi	r17,-1
    4cd4:	003ff106 	br	4c9c <__alt_mem_Flash_flash_data+0xf4004c9c>

00004cd8 <__swsetup_r>:
    4cd8:	008000b4 	movhi	r2,2
    4cdc:	defffd04 	addi	sp,sp,-12
    4ce0:	10bac004 	addi	r2,r2,-5376
    4ce4:	dc400115 	stw	r17,4(sp)
    4ce8:	2023883a 	mov	r17,r4
    4cec:	11000017 	ldw	r4,0(r2)
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	dfc00215 	stw	ra,8(sp)
    4cf8:	2821883a 	mov	r16,r5
    4cfc:	20000226 	beq	r4,zero,4d08 <__swsetup_r+0x30>
    4d00:	20c00e17 	ldw	r3,56(r4)
    4d04:	18003126 	beq	r3,zero,4dcc <__swsetup_r+0xf4>
    4d08:	8080030b 	ldhu	r2,12(r16)
    4d0c:	10c0020c 	andi	r3,r2,8
    4d10:	100d883a 	mov	r6,r2
    4d14:	18000f26 	beq	r3,zero,4d54 <__swsetup_r+0x7c>
    4d18:	80c00417 	ldw	r3,16(r16)
    4d1c:	18001526 	beq	r3,zero,4d74 <__swsetup_r+0x9c>
    4d20:	1100004c 	andi	r4,r2,1
    4d24:	20001c1e 	bne	r4,zero,4d98 <__swsetup_r+0xc0>
    4d28:	1080008c 	andi	r2,r2,2
    4d2c:	1000291e 	bne	r2,zero,4dd4 <__swsetup_r+0xfc>
    4d30:	80800517 	ldw	r2,20(r16)
    4d34:	80800215 	stw	r2,8(r16)
    4d38:	18001c26 	beq	r3,zero,4dac <__swsetup_r+0xd4>
    4d3c:	0005883a 	mov	r2,zero
    4d40:	dfc00217 	ldw	ra,8(sp)
    4d44:	dc400117 	ldw	r17,4(sp)
    4d48:	dc000017 	ldw	r16,0(sp)
    4d4c:	dec00304 	addi	sp,sp,12
    4d50:	f800283a 	ret
    4d54:	3080040c 	andi	r2,r6,16
    4d58:	10002e26 	beq	r2,zero,4e14 <__swsetup_r+0x13c>
    4d5c:	3080010c 	andi	r2,r6,4
    4d60:	10001e1e 	bne	r2,zero,4ddc <__swsetup_r+0x104>
    4d64:	80c00417 	ldw	r3,16(r16)
    4d68:	30800214 	ori	r2,r6,8
    4d6c:	8080030d 	sth	r2,12(r16)
    4d70:	183feb1e 	bne	r3,zero,4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    4d74:	1140a00c 	andi	r5,r2,640
    4d78:	01008004 	movi	r4,512
    4d7c:	293fe826 	beq	r5,r4,4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    4d80:	8809883a 	mov	r4,r17
    4d84:	800b883a 	mov	r5,r16
    4d88:	00078c40 	call	78c4 <__smakebuf_r>
    4d8c:	8080030b 	ldhu	r2,12(r16)
    4d90:	80c00417 	ldw	r3,16(r16)
    4d94:	003fe206 	br	4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    4d98:	80800517 	ldw	r2,20(r16)
    4d9c:	80000215 	stw	zero,8(r16)
    4da0:	0085c83a 	sub	r2,zero,r2
    4da4:	80800615 	stw	r2,24(r16)
    4da8:	183fe41e 	bne	r3,zero,4d3c <__alt_mem_Flash_flash_data+0xf4004d3c>
    4dac:	80c0030b 	ldhu	r3,12(r16)
    4db0:	0005883a 	mov	r2,zero
    4db4:	1900200c 	andi	r4,r3,128
    4db8:	203fe126 	beq	r4,zero,4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    4dbc:	18c01014 	ori	r3,r3,64
    4dc0:	80c0030d 	sth	r3,12(r16)
    4dc4:	00bfffc4 	movi	r2,-1
    4dc8:	003fdd06 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    4dcc:	0006d380 	call	6d38 <__sinit>
    4dd0:	003fcd06 	br	4d08 <__alt_mem_Flash_flash_data+0xf4004d08>
    4dd4:	0005883a 	mov	r2,zero
    4dd8:	003fd606 	br	4d34 <__alt_mem_Flash_flash_data+0xf4004d34>
    4ddc:	81400c17 	ldw	r5,48(r16)
    4de0:	28000626 	beq	r5,zero,4dfc <__swsetup_r+0x124>
    4de4:	80801004 	addi	r2,r16,64
    4de8:	28800326 	beq	r5,r2,4df8 <__swsetup_r+0x120>
    4dec:	8809883a 	mov	r4,r17
    4df0:	0006eac0 	call	6eac <_free_r>
    4df4:	8180030b 	ldhu	r6,12(r16)
    4df8:	80000c15 	stw	zero,48(r16)
    4dfc:	80c00417 	ldw	r3,16(r16)
    4e00:	00bff6c4 	movi	r2,-37
    4e04:	118c703a 	and	r6,r2,r6
    4e08:	80000115 	stw	zero,4(r16)
    4e0c:	80c00015 	stw	r3,0(r16)
    4e10:	003fd506 	br	4d68 <__alt_mem_Flash_flash_data+0xf4004d68>
    4e14:	00800244 	movi	r2,9
    4e18:	88800015 	stw	r2,0(r17)
    4e1c:	30801014 	ori	r2,r6,64
    4e20:	8080030d 	sth	r2,12(r16)
    4e24:	00bfffc4 	movi	r2,-1
    4e28:	003fc506 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>

00004e2c <quorem>:
    4e2c:	defff704 	addi	sp,sp,-36
    4e30:	dc800215 	stw	r18,8(sp)
    4e34:	20800417 	ldw	r2,16(r4)
    4e38:	2c800417 	ldw	r18,16(r5)
    4e3c:	dfc00815 	stw	ra,32(sp)
    4e40:	ddc00715 	stw	r23,28(sp)
    4e44:	dd800615 	stw	r22,24(sp)
    4e48:	dd400515 	stw	r21,20(sp)
    4e4c:	dd000415 	stw	r20,16(sp)
    4e50:	dcc00315 	stw	r19,12(sp)
    4e54:	dc400115 	stw	r17,4(sp)
    4e58:	dc000015 	stw	r16,0(sp)
    4e5c:	14807116 	blt	r2,r18,5024 <quorem+0x1f8>
    4e60:	94bfffc4 	addi	r18,r18,-1
    4e64:	94ad883a 	add	r22,r18,r18
    4e68:	b5ad883a 	add	r22,r22,r22
    4e6c:	2c400504 	addi	r17,r5,20
    4e70:	8da9883a 	add	r20,r17,r22
    4e74:	25400504 	addi	r21,r4,20
    4e78:	282f883a 	mov	r23,r5
    4e7c:	adad883a 	add	r22,r21,r22
    4e80:	a1400017 	ldw	r5,0(r20)
    4e84:	2021883a 	mov	r16,r4
    4e88:	b1000017 	ldw	r4,0(r22)
    4e8c:	29400044 	addi	r5,r5,1
    4e90:	000d8d80 	call	d8d8 <__udivsi3>
    4e94:	1027883a 	mov	r19,r2
    4e98:	10002c26 	beq	r2,zero,4f4c <quorem+0x120>
    4e9c:	a813883a 	mov	r9,r21
    4ea0:	8811883a 	mov	r8,r17
    4ea4:	0009883a 	mov	r4,zero
    4ea8:	000d883a 	mov	r6,zero
    4eac:	41c00017 	ldw	r7,0(r8)
    4eb0:	49400017 	ldw	r5,0(r9)
    4eb4:	42000104 	addi	r8,r8,4
    4eb8:	38bfffcc 	andi	r2,r7,65535
    4ebc:	14c5383a 	mul	r2,r2,r19
    4ec0:	380ed43a 	srli	r7,r7,16
    4ec4:	28ffffcc 	andi	r3,r5,65535
    4ec8:	2085883a 	add	r2,r4,r2
    4ecc:	1008d43a 	srli	r4,r2,16
    4ed0:	3ccf383a 	mul	r7,r7,r19
    4ed4:	198d883a 	add	r6,r3,r6
    4ed8:	10ffffcc 	andi	r3,r2,65535
    4edc:	30c7c83a 	sub	r3,r6,r3
    4ee0:	280ad43a 	srli	r5,r5,16
    4ee4:	21c9883a 	add	r4,r4,r7
    4ee8:	180dd43a 	srai	r6,r3,16
    4eec:	20bfffcc 	andi	r2,r4,65535
    4ef0:	288bc83a 	sub	r5,r5,r2
    4ef4:	298b883a 	add	r5,r5,r6
    4ef8:	280e943a 	slli	r7,r5,16
    4efc:	18ffffcc 	andi	r3,r3,65535
    4f00:	2008d43a 	srli	r4,r4,16
    4f04:	38ceb03a 	or	r7,r7,r3
    4f08:	49c00015 	stw	r7,0(r9)
    4f0c:	280dd43a 	srai	r6,r5,16
    4f10:	4a400104 	addi	r9,r9,4
    4f14:	a23fe52e 	bgeu	r20,r8,4eac <__alt_mem_Flash_flash_data+0xf4004eac>
    4f18:	b0800017 	ldw	r2,0(r22)
    4f1c:	10000b1e 	bne	r2,zero,4f4c <quorem+0x120>
    4f20:	b0bfff04 	addi	r2,r22,-4
    4f24:	a880082e 	bgeu	r21,r2,4f48 <quorem+0x11c>
    4f28:	b0ffff17 	ldw	r3,-4(r22)
    4f2c:	18000326 	beq	r3,zero,4f3c <quorem+0x110>
    4f30:	00000506 	br	4f48 <quorem+0x11c>
    4f34:	10c00017 	ldw	r3,0(r2)
    4f38:	1800031e 	bne	r3,zero,4f48 <quorem+0x11c>
    4f3c:	10bfff04 	addi	r2,r2,-4
    4f40:	94bfffc4 	addi	r18,r18,-1
    4f44:	a8bffb36 	bltu	r21,r2,4f34 <__alt_mem_Flash_flash_data+0xf4004f34>
    4f48:	84800415 	stw	r18,16(r16)
    4f4c:	8009883a 	mov	r4,r16
    4f50:	b80b883a 	mov	r5,r23
    4f54:	0008e740 	call	8e74 <__mcmp>
    4f58:	10002616 	blt	r2,zero,4ff4 <quorem+0x1c8>
    4f5c:	9cc00044 	addi	r19,r19,1
    4f60:	a80d883a 	mov	r6,r21
    4f64:	000b883a 	mov	r5,zero
    4f68:	31000017 	ldw	r4,0(r6)
    4f6c:	88800017 	ldw	r2,0(r17)
    4f70:	31800104 	addi	r6,r6,4
    4f74:	20ffffcc 	andi	r3,r4,65535
    4f78:	194b883a 	add	r5,r3,r5
    4f7c:	10ffffcc 	andi	r3,r2,65535
    4f80:	28c7c83a 	sub	r3,r5,r3
    4f84:	1004d43a 	srli	r2,r2,16
    4f88:	2008d43a 	srli	r4,r4,16
    4f8c:	180bd43a 	srai	r5,r3,16
    4f90:	18ffffcc 	andi	r3,r3,65535
    4f94:	2089c83a 	sub	r4,r4,r2
    4f98:	2149883a 	add	r4,r4,r5
    4f9c:	2004943a 	slli	r2,r4,16
    4fa0:	8c400104 	addi	r17,r17,4
    4fa4:	200bd43a 	srai	r5,r4,16
    4fa8:	10c6b03a 	or	r3,r2,r3
    4fac:	30ffff15 	stw	r3,-4(r6)
    4fb0:	a47fed2e 	bgeu	r20,r17,4f68 <__alt_mem_Flash_flash_data+0xf4004f68>
    4fb4:	9485883a 	add	r2,r18,r18
    4fb8:	1085883a 	add	r2,r2,r2
    4fbc:	a887883a 	add	r3,r21,r2
    4fc0:	18800017 	ldw	r2,0(r3)
    4fc4:	10000b1e 	bne	r2,zero,4ff4 <quorem+0x1c8>
    4fc8:	18bfff04 	addi	r2,r3,-4
    4fcc:	a880082e 	bgeu	r21,r2,4ff0 <quorem+0x1c4>
    4fd0:	18ffff17 	ldw	r3,-4(r3)
    4fd4:	18000326 	beq	r3,zero,4fe4 <quorem+0x1b8>
    4fd8:	00000506 	br	4ff0 <quorem+0x1c4>
    4fdc:	10c00017 	ldw	r3,0(r2)
    4fe0:	1800031e 	bne	r3,zero,4ff0 <quorem+0x1c4>
    4fe4:	10bfff04 	addi	r2,r2,-4
    4fe8:	94bfffc4 	addi	r18,r18,-1
    4fec:	a8bffb36 	bltu	r21,r2,4fdc <__alt_mem_Flash_flash_data+0xf4004fdc>
    4ff0:	84800415 	stw	r18,16(r16)
    4ff4:	9805883a 	mov	r2,r19
    4ff8:	dfc00817 	ldw	ra,32(sp)
    4ffc:	ddc00717 	ldw	r23,28(sp)
    5000:	dd800617 	ldw	r22,24(sp)
    5004:	dd400517 	ldw	r21,20(sp)
    5008:	dd000417 	ldw	r20,16(sp)
    500c:	dcc00317 	ldw	r19,12(sp)
    5010:	dc800217 	ldw	r18,8(sp)
    5014:	dc400117 	ldw	r17,4(sp)
    5018:	dc000017 	ldw	r16,0(sp)
    501c:	dec00904 	addi	sp,sp,36
    5020:	f800283a 	ret
    5024:	0005883a 	mov	r2,zero
    5028:	003ff306 	br	4ff8 <__alt_mem_Flash_flash_data+0xf4004ff8>

0000502c <_dtoa_r>:
    502c:	20801017 	ldw	r2,64(r4)
    5030:	deffde04 	addi	sp,sp,-136
    5034:	dd401d15 	stw	r21,116(sp)
    5038:	dcc01b15 	stw	r19,108(sp)
    503c:	dc801a15 	stw	r18,104(sp)
    5040:	dc401915 	stw	r17,100(sp)
    5044:	dc001815 	stw	r16,96(sp)
    5048:	dfc02115 	stw	ra,132(sp)
    504c:	df002015 	stw	fp,128(sp)
    5050:	ddc01f15 	stw	r23,124(sp)
    5054:	dd801e15 	stw	r22,120(sp)
    5058:	dd001c15 	stw	r20,112(sp)
    505c:	d9c00315 	stw	r7,12(sp)
    5060:	2021883a 	mov	r16,r4
    5064:	302b883a 	mov	r21,r6
    5068:	2825883a 	mov	r18,r5
    506c:	dc402417 	ldw	r17,144(sp)
    5070:	3027883a 	mov	r19,r6
    5074:	10000826 	beq	r2,zero,5098 <_dtoa_r+0x6c>
    5078:	21801117 	ldw	r6,68(r4)
    507c:	00c00044 	movi	r3,1
    5080:	100b883a 	mov	r5,r2
    5084:	1986983a 	sll	r3,r3,r6
    5088:	11800115 	stw	r6,4(r2)
    508c:	10c00215 	stw	r3,8(r2)
    5090:	00086480 	call	8648 <_Bfree>
    5094:	80001015 	stw	zero,64(r16)
    5098:	a8002d16 	blt	r21,zero,5150 <_dtoa_r+0x124>
    509c:	88000015 	stw	zero,0(r17)
    50a0:	a8dffc2c 	andhi	r3,r21,32752
    50a4:	009ffc34 	movhi	r2,32752
    50a8:	18801b26 	beq	r3,r2,5118 <_dtoa_r+0xec>
    50ac:	9009883a 	mov	r4,r18
    50b0:	980b883a 	mov	r5,r19
    50b4:	000d883a 	mov	r6,zero
    50b8:	000f883a 	mov	r7,zero
    50bc:	000ea500 	call	ea50 <__eqdf2>
    50c0:	10002a1e 	bne	r2,zero,516c <_dtoa_r+0x140>
    50c4:	d8c02317 	ldw	r3,140(sp)
    50c8:	d9002517 	ldw	r4,148(sp)
    50cc:	00800044 	movi	r2,1
    50d0:	18800015 	stw	r2,0(r3)
    50d4:	2001a226 	beq	r4,zero,5760 <_dtoa_r+0x734>
    50d8:	008000b4 	movhi	r2,2
    50dc:	10b1a544 	addi	r2,r2,-14699
    50e0:	20800015 	stw	r2,0(r4)
    50e4:	10bfffc4 	addi	r2,r2,-1
    50e8:	dfc02117 	ldw	ra,132(sp)
    50ec:	df002017 	ldw	fp,128(sp)
    50f0:	ddc01f17 	ldw	r23,124(sp)
    50f4:	dd801e17 	ldw	r22,120(sp)
    50f8:	dd401d17 	ldw	r21,116(sp)
    50fc:	dd001c17 	ldw	r20,112(sp)
    5100:	dcc01b17 	ldw	r19,108(sp)
    5104:	dc801a17 	ldw	r18,104(sp)
    5108:	dc401917 	ldw	r17,100(sp)
    510c:	dc001817 	ldw	r16,96(sp)
    5110:	dec02204 	addi	sp,sp,136
    5114:	f800283a 	ret
    5118:	d8c02317 	ldw	r3,140(sp)
    511c:	0089c3c4 	movi	r2,9999
    5120:	18800015 	stw	r2,0(r3)
    5124:	90017c26 	beq	r18,zero,5718 <_dtoa_r+0x6ec>
    5128:	008000b4 	movhi	r2,2
    512c:	10b1b904 	addi	r2,r2,-14620
    5130:	d9002517 	ldw	r4,148(sp)
    5134:	203fec26 	beq	r4,zero,50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    5138:	10c000c7 	ldb	r3,3(r2)
    513c:	18017d1e 	bne	r3,zero,5734 <_dtoa_r+0x708>
    5140:	10c000c4 	addi	r3,r2,3
    5144:	d9802517 	ldw	r6,148(sp)
    5148:	30c00015 	stw	r3,0(r6)
    514c:	003fe606 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    5150:	04e00034 	movhi	r19,32768
    5154:	9cffffc4 	addi	r19,r19,-1
    5158:	00800044 	movi	r2,1
    515c:	ace6703a 	and	r19,r21,r19
    5160:	88800015 	stw	r2,0(r17)
    5164:	982b883a 	mov	r21,r19
    5168:	003fcd06 	br	50a0 <__alt_mem_Flash_flash_data+0xf40050a0>
    516c:	d8800204 	addi	r2,sp,8
    5170:	a822d53a 	srli	r17,r21,20
    5174:	d8800015 	stw	r2,0(sp)
    5178:	8009883a 	mov	r4,r16
    517c:	900b883a 	mov	r5,r18
    5180:	980d883a 	mov	r6,r19
    5184:	d9c00104 	addi	r7,sp,4
    5188:	00091e80 	call	91e8 <__d2b>
    518c:	1039883a 	mov	fp,r2
    5190:	88016a1e 	bne	r17,zero,573c <_dtoa_r+0x710>
    5194:	dd000217 	ldw	r20,8(sp)
    5198:	dc400117 	ldw	r17,4(sp)
    519c:	00befbc4 	movi	r2,-1041
    51a0:	a463883a 	add	r17,r20,r17
    51a4:	8882ea16 	blt	r17,r2,5d50 <_dtoa_r+0xd24>
    51a8:	00bf0384 	movi	r2,-1010
    51ac:	1445c83a 	sub	r2,r2,r17
    51b0:	89010484 	addi	r4,r17,1042
    51b4:	a8aa983a 	sll	r21,r21,r2
    51b8:	9108d83a 	srl	r4,r18,r4
    51bc:	a908b03a 	or	r4,r21,r4
    51c0:	000fde00 	call	fde0 <__floatunsidf>
    51c4:	017f8434 	movhi	r5,65040
    51c8:	01800044 	movi	r6,1
    51cc:	1009883a 	mov	r4,r2
    51d0:	194b883a 	add	r5,r3,r5
    51d4:	8c7fffc4 	addi	r17,r17,-1
    51d8:	d9800f15 	stw	r6,60(sp)
    51dc:	000d883a 	mov	r6,zero
    51e0:	01cffe34 	movhi	r7,16376
    51e4:	000f3b80 	call	f3b8 <__subdf3>
    51e8:	0198dbf4 	movhi	r6,25455
    51ec:	01cff4f4 	movhi	r7,16339
    51f0:	1009883a 	mov	r4,r2
    51f4:	180b883a 	mov	r5,r3
    51f8:	3190d844 	addi	r6,r6,17249
    51fc:	39e1e9c4 	addi	r7,r7,-30809
    5200:	000ec940 	call	ec94 <__muldf3>
    5204:	01a2d874 	movhi	r6,35681
    5208:	01cff1f4 	movhi	r7,16327
    520c:	180b883a 	mov	r5,r3
    5210:	31b22cc4 	addi	r6,r6,-14157
    5214:	39e28a04 	addi	r7,r7,-30168
    5218:	1009883a 	mov	r4,r2
    521c:	000d8e80 	call	d8e8 <__adddf3>
    5220:	8809883a 	mov	r4,r17
    5224:	102d883a 	mov	r22,r2
    5228:	182b883a 	mov	r21,r3
    522c:	000fd100 	call	fd10 <__floatsidf>
    5230:	019427f4 	movhi	r6,20639
    5234:	01cff4f4 	movhi	r7,16339
    5238:	1009883a 	mov	r4,r2
    523c:	180b883a 	mov	r5,r3
    5240:	319e7ec4 	addi	r6,r6,31227
    5244:	39d104c4 	addi	r7,r7,17427
    5248:	000ec940 	call	ec94 <__muldf3>
    524c:	b009883a 	mov	r4,r22
    5250:	a80b883a 	mov	r5,r21
    5254:	100d883a 	mov	r6,r2
    5258:	180f883a 	mov	r7,r3
    525c:	000d8e80 	call	d8e8 <__adddf3>
    5260:	1009883a 	mov	r4,r2
    5264:	180b883a 	mov	r5,r3
    5268:	102d883a 	mov	r22,r2
    526c:	182b883a 	mov	r21,r3
    5270:	000fc880 	call	fc88 <__fixdfsi>
    5274:	b009883a 	mov	r4,r22
    5278:	a80b883a 	mov	r5,r21
    527c:	000d883a 	mov	r6,zero
    5280:	000f883a 	mov	r7,zero
    5284:	d8800515 	stw	r2,20(sp)
    5288:	000ebb40 	call	ebb4 <__ledf2>
    528c:	10023116 	blt	r2,zero,5b54 <_dtoa_r+0xb28>
    5290:	d8c00517 	ldw	r3,20(sp)
    5294:	00800584 	movi	r2,22
    5298:	10c21f36 	bltu	r2,r3,5b18 <_dtoa_r+0xaec>
    529c:	180490fa 	slli	r2,r3,3
    52a0:	00c000b4 	movhi	r3,2
    52a4:	18f1d504 	addi	r3,r3,-14508
    52a8:	1885883a 	add	r2,r3,r2
    52ac:	11000017 	ldw	r4,0(r2)
    52b0:	11400117 	ldw	r5,4(r2)
    52b4:	900d883a 	mov	r6,r18
    52b8:	980f883a 	mov	r7,r19
    52bc:	000ead40 	call	ead4 <__gedf2>
    52c0:	0082a70e 	bge	zero,r2,5d60 <_dtoa_r+0xd34>
    52c4:	d9000517 	ldw	r4,20(sp)
    52c8:	d8000d15 	stw	zero,52(sp)
    52cc:	213fffc4 	addi	r4,r4,-1
    52d0:	d9000515 	stw	r4,20(sp)
    52d4:	a463c83a 	sub	r17,r20,r17
    52d8:	8dbfffc4 	addi	r22,r17,-1
    52dc:	b0021916 	blt	r22,zero,5b44 <_dtoa_r+0xb18>
    52e0:	d8000815 	stw	zero,32(sp)
    52e4:	d8800517 	ldw	r2,20(sp)
    52e8:	10020e16 	blt	r2,zero,5b24 <_dtoa_r+0xaf8>
    52ec:	b0ad883a 	add	r22,r22,r2
    52f0:	d8800a15 	stw	r2,40(sp)
    52f4:	d8000915 	stw	zero,36(sp)
    52f8:	d8c00317 	ldw	r3,12(sp)
    52fc:	00800244 	movi	r2,9
    5300:	10c11a36 	bltu	r2,r3,576c <_dtoa_r+0x740>
    5304:	00800144 	movi	r2,5
    5308:	10c4fc0e 	bge	r2,r3,66fc <_dtoa_r+0x16d0>
    530c:	18ffff04 	addi	r3,r3,-4
    5310:	d8c00315 	stw	r3,12(sp)
    5314:	0029883a 	mov	r20,zero
    5318:	d9800317 	ldw	r6,12(sp)
    531c:	008000c4 	movi	r2,3
    5320:	3083bd26 	beq	r6,r2,6218 <_dtoa_r+0x11ec>
    5324:	1183670e 	bge	r2,r6,60c4 <_dtoa_r+0x1098>
    5328:	d8c00317 	ldw	r3,12(sp)
    532c:	00800104 	movi	r2,4
    5330:	1882e726 	beq	r3,r2,5ed0 <_dtoa_r+0xea4>
    5334:	00800144 	movi	r2,5
    5338:	1884f21e 	bne	r3,r2,6704 <_dtoa_r+0x16d8>
    533c:	00800044 	movi	r2,1
    5340:	d8800b15 	stw	r2,44(sp)
    5344:	d8c02217 	ldw	r3,136(sp)
    5348:	d9000517 	ldw	r4,20(sp)
    534c:	1907883a 	add	r3,r3,r4
    5350:	19800044 	addi	r6,r3,1
    5354:	d8c00c15 	stw	r3,48(sp)
    5358:	d9800615 	stw	r6,24(sp)
    535c:	0183c30e 	bge	zero,r6,626c <_dtoa_r+0x1240>
    5360:	d9800617 	ldw	r6,24(sp)
    5364:	3023883a 	mov	r17,r6
    5368:	80001115 	stw	zero,68(r16)
    536c:	008005c4 	movi	r2,23
    5370:	1184f62e 	bgeu	r2,r6,674c <_dtoa_r+0x1720>
    5374:	00c00044 	movi	r3,1
    5378:	00800104 	movi	r2,4
    537c:	1085883a 	add	r2,r2,r2
    5380:	11000504 	addi	r4,r2,20
    5384:	180b883a 	mov	r5,r3
    5388:	18c00044 	addi	r3,r3,1
    538c:	313ffb2e 	bgeu	r6,r4,537c <__alt_mem_Flash_flash_data+0xf400537c>
    5390:	81401115 	stw	r5,68(r16)
    5394:	8009883a 	mov	r4,r16
    5398:	00085a00 	call	85a0 <_Balloc>
    539c:	d8800715 	stw	r2,28(sp)
    53a0:	80801015 	stw	r2,64(r16)
    53a4:	00800384 	movi	r2,14
    53a8:	1440fd36 	bltu	r2,r17,57a0 <_dtoa_r+0x774>
    53ac:	a000fc26 	beq	r20,zero,57a0 <_dtoa_r+0x774>
    53b0:	d8800517 	ldw	r2,20(sp)
    53b4:	0083b90e 	bge	zero,r2,629c <_dtoa_r+0x1270>
    53b8:	d8c00517 	ldw	r3,20(sp)
    53bc:	108003cc 	andi	r2,r2,15
    53c0:	100490fa 	slli	r2,r2,3
    53c4:	182fd13a 	srai	r23,r3,4
    53c8:	00c000b4 	movhi	r3,2
    53cc:	18f1d504 	addi	r3,r3,-14508
    53d0:	1885883a 	add	r2,r3,r2
    53d4:	b8c0040c 	andi	r3,r23,16
    53d8:	12c00017 	ldw	r11,0(r2)
    53dc:	12800117 	ldw	r10,4(r2)
    53e0:	18039726 	beq	r3,zero,6240 <_dtoa_r+0x1214>
    53e4:	008000b4 	movhi	r2,2
    53e8:	10b1cb04 	addi	r2,r2,-14548
    53ec:	11800817 	ldw	r6,32(r2)
    53f0:	11c00917 	ldw	r7,36(r2)
    53f4:	9009883a 	mov	r4,r18
    53f8:	980b883a 	mov	r5,r19
    53fc:	da801615 	stw	r10,88(sp)
    5400:	dac01515 	stw	r11,84(sp)
    5404:	000e1840 	call	e184 <__divdf3>
    5408:	da801617 	ldw	r10,88(sp)
    540c:	dac01517 	ldw	r11,84(sp)
    5410:	bdc003cc 	andi	r23,r23,15
    5414:	044000c4 	movi	r17,3
    5418:	d8800e15 	stw	r2,56(sp)
    541c:	182b883a 	mov	r21,r3
    5420:	b8001126 	beq	r23,zero,5468 <_dtoa_r+0x43c>
    5424:	050000b4 	movhi	r20,2
    5428:	a531cb04 	addi	r20,r20,-14548
    542c:	5805883a 	mov	r2,r11
    5430:	5007883a 	mov	r3,r10
    5434:	b980004c 	andi	r6,r23,1
    5438:	1009883a 	mov	r4,r2
    543c:	b82fd07a 	srai	r23,r23,1
    5440:	180b883a 	mov	r5,r3
    5444:	30000426 	beq	r6,zero,5458 <_dtoa_r+0x42c>
    5448:	a1800017 	ldw	r6,0(r20)
    544c:	a1c00117 	ldw	r7,4(r20)
    5450:	8c400044 	addi	r17,r17,1
    5454:	000ec940 	call	ec94 <__muldf3>
    5458:	a5000204 	addi	r20,r20,8
    545c:	b83ff51e 	bne	r23,zero,5434 <__alt_mem_Flash_flash_data+0xf4005434>
    5460:	1017883a 	mov	r11,r2
    5464:	1815883a 	mov	r10,r3
    5468:	d9000e17 	ldw	r4,56(sp)
    546c:	a80b883a 	mov	r5,r21
    5470:	580d883a 	mov	r6,r11
    5474:	500f883a 	mov	r7,r10
    5478:	000e1840 	call	e184 <__divdf3>
    547c:	1029883a 	mov	r20,r2
    5480:	182b883a 	mov	r21,r3
    5484:	d9800d17 	ldw	r6,52(sp)
    5488:	30000626 	beq	r6,zero,54a4 <_dtoa_r+0x478>
    548c:	a009883a 	mov	r4,r20
    5490:	a80b883a 	mov	r5,r21
    5494:	000d883a 	mov	r6,zero
    5498:	01cffc34 	movhi	r7,16368
    549c:	000ebb40 	call	ebb4 <__ledf2>
    54a0:	10043216 	blt	r2,zero,656c <_dtoa_r+0x1540>
    54a4:	8809883a 	mov	r4,r17
    54a8:	000fd100 	call	fd10 <__floatsidf>
    54ac:	1009883a 	mov	r4,r2
    54b0:	180b883a 	mov	r5,r3
    54b4:	a00d883a 	mov	r6,r20
    54b8:	a80f883a 	mov	r7,r21
    54bc:	000ec940 	call	ec94 <__muldf3>
    54c0:	000d883a 	mov	r6,zero
    54c4:	1009883a 	mov	r4,r2
    54c8:	180b883a 	mov	r5,r3
    54cc:	01d00734 	movhi	r7,16412
    54d0:	000d8e80 	call	d8e8 <__adddf3>
    54d4:	1023883a 	mov	r17,r2
    54d8:	d9800617 	ldw	r6,24(sp)
    54dc:	00bf3034 	movhi	r2,64704
    54e0:	1885883a 	add	r2,r3,r2
    54e4:	d8800e15 	stw	r2,56(sp)
    54e8:	30032e26 	beq	r6,zero,61a4 <_dtoa_r+0x1178>
    54ec:	d8c00517 	ldw	r3,20(sp)
    54f0:	da800617 	ldw	r10,24(sp)
    54f4:	d8c01215 	stw	r3,72(sp)
    54f8:	d9000b17 	ldw	r4,44(sp)
    54fc:	2003b026 	beq	r4,zero,63c0 <_dtoa_r+0x1394>
    5500:	50bfffc4 	addi	r2,r10,-1
    5504:	100490fa 	slli	r2,r2,3
    5508:	00c000b4 	movhi	r3,2
    550c:	18f1d504 	addi	r3,r3,-14508
    5510:	1885883a 	add	r2,r3,r2
    5514:	11800017 	ldw	r6,0(r2)
    5518:	11c00117 	ldw	r7,4(r2)
    551c:	d8800717 	ldw	r2,28(sp)
    5520:	0009883a 	mov	r4,zero
    5524:	014ff834 	movhi	r5,16352
    5528:	da801615 	stw	r10,88(sp)
    552c:	15c00044 	addi	r23,r2,1
    5530:	000e1840 	call	e184 <__divdf3>
    5534:	d9c00e17 	ldw	r7,56(sp)
    5538:	880d883a 	mov	r6,r17
    553c:	1009883a 	mov	r4,r2
    5540:	180b883a 	mov	r5,r3
    5544:	000f3b80 	call	f3b8 <__subdf3>
    5548:	a80b883a 	mov	r5,r21
    554c:	a009883a 	mov	r4,r20
    5550:	d8c01015 	stw	r3,64(sp)
    5554:	d8800e15 	stw	r2,56(sp)
    5558:	000fc880 	call	fc88 <__fixdfsi>
    555c:	1009883a 	mov	r4,r2
    5560:	d8801715 	stw	r2,92(sp)
    5564:	000fd100 	call	fd10 <__floatsidf>
    5568:	a009883a 	mov	r4,r20
    556c:	a80b883a 	mov	r5,r21
    5570:	100d883a 	mov	r6,r2
    5574:	180f883a 	mov	r7,r3
    5578:	000f3b80 	call	f3b8 <__subdf3>
    557c:	da001717 	ldw	r8,92(sp)
    5580:	1829883a 	mov	r20,r3
    5584:	d8c00717 	ldw	r3,28(sp)
    5588:	d9000e17 	ldw	r4,56(sp)
    558c:	d9401017 	ldw	r5,64(sp)
    5590:	42000c04 	addi	r8,r8,48
    5594:	1023883a 	mov	r17,r2
    5598:	1a000005 	stb	r8,0(r3)
    559c:	880d883a 	mov	r6,r17
    55a0:	a00f883a 	mov	r7,r20
    55a4:	402b883a 	mov	r21,r8
    55a8:	000ead40 	call	ead4 <__gedf2>
    55ac:	00844516 	blt	zero,r2,66c4 <_dtoa_r+0x1698>
    55b0:	0009883a 	mov	r4,zero
    55b4:	014ffc34 	movhi	r5,16368
    55b8:	880d883a 	mov	r6,r17
    55bc:	a00f883a 	mov	r7,r20
    55c0:	000f3b80 	call	f3b8 <__subdf3>
    55c4:	d9000e17 	ldw	r4,56(sp)
    55c8:	d9401017 	ldw	r5,64(sp)
    55cc:	100d883a 	mov	r6,r2
    55d0:	180f883a 	mov	r7,r3
    55d4:	000ead40 	call	ead4 <__gedf2>
    55d8:	da801617 	ldw	r10,88(sp)
    55dc:	00843616 	blt	zero,r2,66b8 <_dtoa_r+0x168c>
    55e0:	00800044 	movi	r2,1
    55e4:	12806e0e 	bge	r2,r10,57a0 <_dtoa_r+0x774>
    55e8:	d9000717 	ldw	r4,28(sp)
    55ec:	dd801315 	stw	r22,76(sp)
    55f0:	dc001115 	stw	r16,68(sp)
    55f4:	2295883a 	add	r10,r4,r10
    55f8:	dcc01415 	stw	r19,80(sp)
    55fc:	502d883a 	mov	r22,r10
    5600:	dcc01017 	ldw	r19,64(sp)
    5604:	b821883a 	mov	r16,r23
    5608:	dc801015 	stw	r18,64(sp)
    560c:	dc800e17 	ldw	r18,56(sp)
    5610:	00000906 	br	5638 <_dtoa_r+0x60c>
    5614:	000f3b80 	call	f3b8 <__subdf3>
    5618:	1009883a 	mov	r4,r2
    561c:	180b883a 	mov	r5,r3
    5620:	900d883a 	mov	r6,r18
    5624:	980f883a 	mov	r7,r19
    5628:	000ebb40 	call	ebb4 <__ledf2>
    562c:	10040e16 	blt	r2,zero,6668 <_dtoa_r+0x163c>
    5630:	b821883a 	mov	r16,r23
    5634:	bd841026 	beq	r23,r22,6678 <_dtoa_r+0x164c>
    5638:	9009883a 	mov	r4,r18
    563c:	980b883a 	mov	r5,r19
    5640:	000d883a 	mov	r6,zero
    5644:	01d00934 	movhi	r7,16420
    5648:	000ec940 	call	ec94 <__muldf3>
    564c:	000d883a 	mov	r6,zero
    5650:	01d00934 	movhi	r7,16420
    5654:	8809883a 	mov	r4,r17
    5658:	a00b883a 	mov	r5,r20
    565c:	1025883a 	mov	r18,r2
    5660:	1827883a 	mov	r19,r3
    5664:	000ec940 	call	ec94 <__muldf3>
    5668:	180b883a 	mov	r5,r3
    566c:	1009883a 	mov	r4,r2
    5670:	1823883a 	mov	r17,r3
    5674:	1029883a 	mov	r20,r2
    5678:	000fc880 	call	fc88 <__fixdfsi>
    567c:	1009883a 	mov	r4,r2
    5680:	102b883a 	mov	r21,r2
    5684:	000fd100 	call	fd10 <__floatsidf>
    5688:	a009883a 	mov	r4,r20
    568c:	880b883a 	mov	r5,r17
    5690:	100d883a 	mov	r6,r2
    5694:	180f883a 	mov	r7,r3
    5698:	000f3b80 	call	f3b8 <__subdf3>
    569c:	ad400c04 	addi	r21,r21,48
    56a0:	1009883a 	mov	r4,r2
    56a4:	180b883a 	mov	r5,r3
    56a8:	900d883a 	mov	r6,r18
    56ac:	980f883a 	mov	r7,r19
    56b0:	85400005 	stb	r21,0(r16)
    56b4:	1023883a 	mov	r17,r2
    56b8:	1829883a 	mov	r20,r3
    56bc:	000ebb40 	call	ebb4 <__ledf2>
    56c0:	bdc00044 	addi	r23,r23,1
    56c4:	0009883a 	mov	r4,zero
    56c8:	014ffc34 	movhi	r5,16368
    56cc:	880d883a 	mov	r6,r17
    56d0:	a00f883a 	mov	r7,r20
    56d4:	103fcf0e 	bge	r2,zero,5614 <__alt_mem_Flash_flash_data+0xf4005614>
    56d8:	d9801217 	ldw	r6,72(sp)
    56dc:	dc001117 	ldw	r16,68(sp)
    56e0:	d9800515 	stw	r6,20(sp)
    56e4:	8009883a 	mov	r4,r16
    56e8:	e00b883a 	mov	r5,fp
    56ec:	00086480 	call	8648 <_Bfree>
    56f0:	d8c00517 	ldw	r3,20(sp)
    56f4:	d9002317 	ldw	r4,140(sp)
    56f8:	d9802517 	ldw	r6,148(sp)
    56fc:	b8000005 	stb	zero,0(r23)
    5700:	18800044 	addi	r2,r3,1
    5704:	20800015 	stw	r2,0(r4)
    5708:	30027226 	beq	r6,zero,60d4 <_dtoa_r+0x10a8>
    570c:	35c00015 	stw	r23,0(r6)
    5710:	d8800717 	ldw	r2,28(sp)
    5714:	003e7406 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    5718:	00800434 	movhi	r2,16
    571c:	10bfffc4 	addi	r2,r2,-1
    5720:	a8aa703a 	and	r21,r21,r2
    5724:	a83e801e 	bne	r21,zero,5128 <__alt_mem_Flash_flash_data+0xf4005128>
    5728:	008000b4 	movhi	r2,2
    572c:	10b1b604 	addi	r2,r2,-14632
    5730:	003e7f06 	br	5130 <__alt_mem_Flash_flash_data+0xf4005130>
    5734:	10c00204 	addi	r3,r2,8
    5738:	003e8206 	br	5144 <__alt_mem_Flash_flash_data+0xf4005144>
    573c:	01400434 	movhi	r5,16
    5740:	297fffc4 	addi	r5,r5,-1
    5744:	994a703a 	and	r5,r19,r5
    5748:	9009883a 	mov	r4,r18
    574c:	8c7f0044 	addi	r17,r17,-1023
    5750:	294ffc34 	orhi	r5,r5,16368
    5754:	dd000217 	ldw	r20,8(sp)
    5758:	d8000f15 	stw	zero,60(sp)
    575c:	003e9f06 	br	51dc <__alt_mem_Flash_flash_data+0xf40051dc>
    5760:	008000b4 	movhi	r2,2
    5764:	10b1a504 	addi	r2,r2,-14700
    5768:	003e5f06 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    576c:	80001115 	stw	zero,68(r16)
    5770:	8009883a 	mov	r4,r16
    5774:	000b883a 	mov	r5,zero
    5778:	00085a00 	call	85a0 <_Balloc>
    577c:	01bfffc4 	movi	r6,-1
    5780:	d8800715 	stw	r2,28(sp)
    5784:	80801015 	stw	r2,64(r16)
    5788:	00800044 	movi	r2,1
    578c:	d9800c15 	stw	r6,48(sp)
    5790:	d8800b15 	stw	r2,44(sp)
    5794:	d9800615 	stw	r6,24(sp)
    5798:	d8002215 	stw	zero,136(sp)
    579c:	d8000315 	stw	zero,12(sp)
    57a0:	d8800117 	ldw	r2,4(sp)
    57a4:	10008e16 	blt	r2,zero,59e0 <_dtoa_r+0x9b4>
    57a8:	d9000517 	ldw	r4,20(sp)
    57ac:	00c00384 	movi	r3,14
    57b0:	19008b16 	blt	r3,r4,59e0 <_dtoa_r+0x9b4>
    57b4:	200490fa 	slli	r2,r4,3
    57b8:	00c000b4 	movhi	r3,2
    57bc:	d9802217 	ldw	r6,136(sp)
    57c0:	18f1d504 	addi	r3,r3,-14508
    57c4:	1885883a 	add	r2,r3,r2
    57c8:	14400017 	ldw	r17,0(r2)
    57cc:	15000117 	ldw	r20,4(r2)
    57d0:	3001c716 	blt	r6,zero,5ef0 <_dtoa_r+0xec4>
    57d4:	880d883a 	mov	r6,r17
    57d8:	a00f883a 	mov	r7,r20
    57dc:	9009883a 	mov	r4,r18
    57e0:	980b883a 	mov	r5,r19
    57e4:	000e1840 	call	e184 <__divdf3>
    57e8:	180b883a 	mov	r5,r3
    57ec:	1009883a 	mov	r4,r2
    57f0:	000fc880 	call	fc88 <__fixdfsi>
    57f4:	1009883a 	mov	r4,r2
    57f8:	102d883a 	mov	r22,r2
    57fc:	000fd100 	call	fd10 <__floatsidf>
    5800:	1009883a 	mov	r4,r2
    5804:	180b883a 	mov	r5,r3
    5808:	880d883a 	mov	r6,r17
    580c:	a00f883a 	mov	r7,r20
    5810:	000ec940 	call	ec94 <__muldf3>
    5814:	9009883a 	mov	r4,r18
    5818:	980b883a 	mov	r5,r19
    581c:	100d883a 	mov	r6,r2
    5820:	180f883a 	mov	r7,r3
    5824:	000f3b80 	call	f3b8 <__subdf3>
    5828:	d9000717 	ldw	r4,28(sp)
    582c:	d9800617 	ldw	r6,24(sp)
    5830:	180b883a 	mov	r5,r3
    5834:	b0c00c04 	addi	r3,r22,48
    5838:	20c00005 	stb	r3,0(r4)
    583c:	25c00044 	addi	r23,r4,1
    5840:	01000044 	movi	r4,1
    5844:	1011883a 	mov	r8,r2
    5848:	2807883a 	mov	r3,r5
    584c:	31003d26 	beq	r6,r4,5944 <_dtoa_r+0x918>
    5850:	000d883a 	mov	r6,zero
    5854:	01d00934 	movhi	r7,16420
    5858:	1009883a 	mov	r4,r2
    585c:	000ec940 	call	ec94 <__muldf3>
    5860:	1009883a 	mov	r4,r2
    5864:	180b883a 	mov	r5,r3
    5868:	000d883a 	mov	r6,zero
    586c:	000f883a 	mov	r7,zero
    5870:	1027883a 	mov	r19,r2
    5874:	182b883a 	mov	r21,r3
    5878:	000ea500 	call	ea50 <__eqdf2>
    587c:	103f9926 	beq	r2,zero,56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5880:	d8c00617 	ldw	r3,24(sp)
    5884:	d9000717 	ldw	r4,28(sp)
    5888:	b825883a 	mov	r18,r23
    588c:	18bfffc4 	addi	r2,r3,-1
    5890:	20ad883a 	add	r22,r4,r2
    5894:	dc000315 	stw	r16,12(sp)
    5898:	00000a06 	br	58c4 <_dtoa_r+0x898>
    589c:	000ec940 	call	ec94 <__muldf3>
    58a0:	1009883a 	mov	r4,r2
    58a4:	180b883a 	mov	r5,r3
    58a8:	000d883a 	mov	r6,zero
    58ac:	000f883a 	mov	r7,zero
    58b0:	1027883a 	mov	r19,r2
    58b4:	182b883a 	mov	r21,r3
    58b8:	b825883a 	mov	r18,r23
    58bc:	000ea500 	call	ea50 <__eqdf2>
    58c0:	10022626 	beq	r2,zero,615c <_dtoa_r+0x1130>
    58c4:	880d883a 	mov	r6,r17
    58c8:	a00f883a 	mov	r7,r20
    58cc:	9809883a 	mov	r4,r19
    58d0:	a80b883a 	mov	r5,r21
    58d4:	000e1840 	call	e184 <__divdf3>
    58d8:	180b883a 	mov	r5,r3
    58dc:	1009883a 	mov	r4,r2
    58e0:	000fc880 	call	fc88 <__fixdfsi>
    58e4:	1009883a 	mov	r4,r2
    58e8:	1021883a 	mov	r16,r2
    58ec:	000fd100 	call	fd10 <__floatsidf>
    58f0:	1009883a 	mov	r4,r2
    58f4:	180b883a 	mov	r5,r3
    58f8:	880d883a 	mov	r6,r17
    58fc:	a00f883a 	mov	r7,r20
    5900:	000ec940 	call	ec94 <__muldf3>
    5904:	9809883a 	mov	r4,r19
    5908:	a80b883a 	mov	r5,r21
    590c:	100d883a 	mov	r6,r2
    5910:	180f883a 	mov	r7,r3
    5914:	000f3b80 	call	f3b8 <__subdf3>
    5918:	82000c04 	addi	r8,r16,48
    591c:	92000005 	stb	r8,0(r18)
    5920:	1009883a 	mov	r4,r2
    5924:	180b883a 	mov	r5,r3
    5928:	000d883a 	mov	r6,zero
    592c:	01d00934 	movhi	r7,16420
    5930:	1011883a 	mov	r8,r2
    5934:	bdc00044 	addi	r23,r23,1
    5938:	95bfd81e 	bne	r18,r22,589c <__alt_mem_Flash_flash_data+0xf400589c>
    593c:	802d883a 	mov	r22,r16
    5940:	dc000317 	ldw	r16,12(sp)
    5944:	4009883a 	mov	r4,r8
    5948:	180b883a 	mov	r5,r3
    594c:	400d883a 	mov	r6,r8
    5950:	180f883a 	mov	r7,r3
    5954:	000d8e80 	call	d8e8 <__adddf3>
    5958:	8809883a 	mov	r4,r17
    595c:	a00b883a 	mov	r5,r20
    5960:	100d883a 	mov	r6,r2
    5964:	180f883a 	mov	r7,r3
    5968:	1027883a 	mov	r19,r2
    596c:	1825883a 	mov	r18,r3
    5970:	000ebb40 	call	ebb4 <__ledf2>
    5974:	10000816 	blt	r2,zero,5998 <_dtoa_r+0x96c>
    5978:	8809883a 	mov	r4,r17
    597c:	a00b883a 	mov	r5,r20
    5980:	980d883a 	mov	r6,r19
    5984:	900f883a 	mov	r7,r18
    5988:	000ea500 	call	ea50 <__eqdf2>
    598c:	103f551e 	bne	r2,zero,56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5990:	b580004c 	andi	r22,r22,1
    5994:	b03f5326 	beq	r22,zero,56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5998:	bd7fffc3 	ldbu	r21,-1(r23)
    599c:	b8bfffc4 	addi	r2,r23,-1
    59a0:	1007883a 	mov	r3,r2
    59a4:	01400e44 	movi	r5,57
    59a8:	d9800717 	ldw	r6,28(sp)
    59ac:	00000506 	br	59c4 <_dtoa_r+0x998>
    59b0:	18ffffc4 	addi	r3,r3,-1
    59b4:	30825e26 	beq	r6,r2,6330 <_dtoa_r+0x1304>
    59b8:	1d400003 	ldbu	r21,0(r3)
    59bc:	102f883a 	mov	r23,r2
    59c0:	10bfffc4 	addi	r2,r2,-1
    59c4:	a9003fcc 	andi	r4,r21,255
    59c8:	2100201c 	xori	r4,r4,128
    59cc:	213fe004 	addi	r4,r4,-128
    59d0:	217ff726 	beq	r4,r5,59b0 <__alt_mem_Flash_flash_data+0xf40059b0>
    59d4:	aa000044 	addi	r8,r21,1
    59d8:	12000005 	stb	r8,0(r2)
    59dc:	003f4106 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    59e0:	d8c00b17 	ldw	r3,44(sp)
    59e4:	18006726 	beq	r3,zero,5b84 <_dtoa_r+0xb58>
    59e8:	d9000317 	ldw	r4,12(sp)
    59ec:	00c00044 	movi	r3,1
    59f0:	19016a0e 	bge	r3,r4,5f9c <_dtoa_r+0xf70>
    59f4:	d8800617 	ldw	r2,24(sp)
    59f8:	d8c00917 	ldw	r3,36(sp)
    59fc:	157fffc4 	addi	r21,r2,-1
    5a00:	1d420716 	blt	r3,r21,6220 <_dtoa_r+0x11f4>
    5a04:	1d6bc83a 	sub	r21,r3,r21
    5a08:	d8800617 	ldw	r2,24(sp)
    5a0c:	1002c716 	blt	r2,zero,652c <_dtoa_r+0x1500>
    5a10:	dd000817 	ldw	r20,32(sp)
    5a14:	d8800617 	ldw	r2,24(sp)
    5a18:	d9800817 	ldw	r6,32(sp)
    5a1c:	8009883a 	mov	r4,r16
    5a20:	01400044 	movi	r5,1
    5a24:	308d883a 	add	r6,r6,r2
    5a28:	d9800815 	stw	r6,32(sp)
    5a2c:	b0ad883a 	add	r22,r22,r2
    5a30:	00089ac0 	call	89ac <__i2b>
    5a34:	1023883a 	mov	r17,r2
    5a38:	a0000826 	beq	r20,zero,5a5c <_dtoa_r+0xa30>
    5a3c:	0580070e 	bge	zero,r22,5a5c <_dtoa_r+0xa30>
    5a40:	b005883a 	mov	r2,r22
    5a44:	a5812016 	blt	r20,r22,5ec8 <_dtoa_r+0xe9c>
    5a48:	d8c00817 	ldw	r3,32(sp)
    5a4c:	a0a9c83a 	sub	r20,r20,r2
    5a50:	b0adc83a 	sub	r22,r22,r2
    5a54:	1887c83a 	sub	r3,r3,r2
    5a58:	d8c00815 	stw	r3,32(sp)
    5a5c:	d9000917 	ldw	r4,36(sp)
    5a60:	0100140e 	bge	zero,r4,5ab4 <_dtoa_r+0xa88>
    5a64:	d9800b17 	ldw	r6,44(sp)
    5a68:	3001e526 	beq	r6,zero,6200 <_dtoa_r+0x11d4>
    5a6c:	05400e0e 	bge	zero,r21,5aa8 <_dtoa_r+0xa7c>
    5a70:	880b883a 	mov	r5,r17
    5a74:	8009883a 	mov	r4,r16
    5a78:	a80d883a 	mov	r6,r21
    5a7c:	0008be40 	call	8be4 <__pow5mult>
    5a80:	e00d883a 	mov	r6,fp
    5a84:	8009883a 	mov	r4,r16
    5a88:	100b883a 	mov	r5,r2
    5a8c:	1023883a 	mov	r17,r2
    5a90:	00089e80 	call	89e8 <__multiply>
    5a94:	102f883a 	mov	r23,r2
    5a98:	e00b883a 	mov	r5,fp
    5a9c:	8009883a 	mov	r4,r16
    5aa0:	00086480 	call	8648 <_Bfree>
    5aa4:	b839883a 	mov	fp,r23
    5aa8:	d8800917 	ldw	r2,36(sp)
    5aac:	154dc83a 	sub	r6,r2,r21
    5ab0:	3001281e 	bne	r6,zero,5f54 <_dtoa_r+0xf28>
    5ab4:	05c00044 	movi	r23,1
    5ab8:	8009883a 	mov	r4,r16
    5abc:	b80b883a 	mov	r5,r23
    5ac0:	00089ac0 	call	89ac <__i2b>
    5ac4:	d8c00a17 	ldw	r3,40(sp)
    5ac8:	102b883a 	mov	r21,r2
    5acc:	00c0310e 	bge	zero,r3,5b94 <_dtoa_r+0xb68>
    5ad0:	8009883a 	mov	r4,r16
    5ad4:	100b883a 	mov	r5,r2
    5ad8:	180d883a 	mov	r6,r3
    5adc:	0008be40 	call	8be4 <__pow5mult>
    5ae0:	d9000317 	ldw	r4,12(sp)
    5ae4:	102b883a 	mov	r21,r2
    5ae8:	b9011f0e 	bge	r23,r4,5f68 <_dtoa_r+0xf3c>
    5aec:	0027883a 	mov	r19,zero
    5af0:	a8800417 	ldw	r2,16(r21)
    5af4:	10800104 	addi	r2,r2,4
    5af8:	1085883a 	add	r2,r2,r2
    5afc:	1085883a 	add	r2,r2,r2
    5b00:	a885883a 	add	r2,r21,r2
    5b04:	11000017 	ldw	r4,0(r2)
    5b08:	00088940 	call	8894 <__hi0bits>
    5b0c:	00c00804 	movi	r3,32
    5b10:	1885c83a 	sub	r2,r3,r2
    5b14:	00002506 	br	5bac <_dtoa_r+0xb80>
    5b18:	01800044 	movi	r6,1
    5b1c:	d9800d15 	stw	r6,52(sp)
    5b20:	003dec06 	br	52d4 <__alt_mem_Flash_flash_data+0xf40052d4>
    5b24:	d8c00817 	ldw	r3,32(sp)
    5b28:	d9000517 	ldw	r4,20(sp)
    5b2c:	d8000a15 	stw	zero,40(sp)
    5b30:	1907c83a 	sub	r3,r3,r4
    5b34:	010dc83a 	sub	r6,zero,r4
    5b38:	d8c00815 	stw	r3,32(sp)
    5b3c:	d9800915 	stw	r6,36(sp)
    5b40:	003ded06 	br	52f8 <__alt_mem_Flash_flash_data+0xf40052f8>
    5b44:	05adc83a 	sub	r22,zero,r22
    5b48:	dd800815 	stw	r22,32(sp)
    5b4c:	002d883a 	mov	r22,zero
    5b50:	003de406 	br	52e4 <__alt_mem_Flash_flash_data+0xf40052e4>
    5b54:	d9000517 	ldw	r4,20(sp)
    5b58:	000fd100 	call	fd10 <__floatsidf>
    5b5c:	1009883a 	mov	r4,r2
    5b60:	180b883a 	mov	r5,r3
    5b64:	b00d883a 	mov	r6,r22
    5b68:	a80f883a 	mov	r7,r21
    5b6c:	000ea500 	call	ea50 <__eqdf2>
    5b70:	103dc726 	beq	r2,zero,5290 <__alt_mem_Flash_flash_data+0xf4005290>
    5b74:	d8800517 	ldw	r2,20(sp)
    5b78:	10bfffc4 	addi	r2,r2,-1
    5b7c:	d8800515 	stw	r2,20(sp)
    5b80:	003dc306 	br	5290 <__alt_mem_Flash_flash_data+0xf4005290>
    5b84:	dd400917 	ldw	r21,36(sp)
    5b88:	dd000817 	ldw	r20,32(sp)
    5b8c:	0023883a 	mov	r17,zero
    5b90:	003fa906 	br	5a38 <__alt_mem_Flash_flash_data+0xf4005a38>
    5b94:	d9800317 	ldw	r6,12(sp)
    5b98:	b981670e 	bge	r23,r6,6138 <_dtoa_r+0x110c>
    5b9c:	0027883a 	mov	r19,zero
    5ba0:	d8c00a17 	ldw	r3,40(sp)
    5ba4:	183fd21e 	bne	r3,zero,5af0 <__alt_mem_Flash_flash_data+0xf4005af0>
    5ba8:	00800044 	movi	r2,1
    5bac:	1585883a 	add	r2,r2,r22
    5bb0:	108007cc 	andi	r2,r2,31
    5bb4:	10005f26 	beq	r2,zero,5d34 <_dtoa_r+0xd08>
    5bb8:	00c00804 	movi	r3,32
    5bbc:	1887c83a 	sub	r3,r3,r2
    5bc0:	01000104 	movi	r4,4
    5bc4:	20c2dd0e 	bge	r4,r3,673c <_dtoa_r+0x1710>
    5bc8:	d9000817 	ldw	r4,32(sp)
    5bcc:	00c00704 	movi	r3,28
    5bd0:	1885c83a 	sub	r2,r3,r2
    5bd4:	2089883a 	add	r4,r4,r2
    5bd8:	d9000815 	stw	r4,32(sp)
    5bdc:	a0a9883a 	add	r20,r20,r2
    5be0:	b0ad883a 	add	r22,r22,r2
    5be4:	d8800817 	ldw	r2,32(sp)
    5be8:	0080050e 	bge	zero,r2,5c00 <_dtoa_r+0xbd4>
    5bec:	e00b883a 	mov	r5,fp
    5bf0:	8009883a 	mov	r4,r16
    5bf4:	100d883a 	mov	r6,r2
    5bf8:	0008d240 	call	8d24 <__lshift>
    5bfc:	1039883a 	mov	fp,r2
    5c00:	0580050e 	bge	zero,r22,5c18 <_dtoa_r+0xbec>
    5c04:	a80b883a 	mov	r5,r21
    5c08:	8009883a 	mov	r4,r16
    5c0c:	b00d883a 	mov	r6,r22
    5c10:	0008d240 	call	8d24 <__lshift>
    5c14:	102b883a 	mov	r21,r2
    5c18:	d8c00d17 	ldw	r3,52(sp)
    5c1c:	1801161e 	bne	r3,zero,6078 <_dtoa_r+0x104c>
    5c20:	d8c00617 	ldw	r3,24(sp)
    5c24:	00c12d0e 	bge	zero,r3,60dc <_dtoa_r+0x10b0>
    5c28:	d8c00b17 	ldw	r3,44(sp)
    5c2c:	1800571e 	bne	r3,zero,5d8c <_dtoa_r+0xd60>
    5c30:	dc800717 	ldw	r18,28(sp)
    5c34:	dcc00617 	ldw	r19,24(sp)
    5c38:	9029883a 	mov	r20,r18
    5c3c:	00000206 	br	5c48 <_dtoa_r+0xc1c>
    5c40:	00086700 	call	8670 <__multadd>
    5c44:	1039883a 	mov	fp,r2
    5c48:	e009883a 	mov	r4,fp
    5c4c:	a80b883a 	mov	r5,r21
    5c50:	0004e2c0 	call	4e2c <quorem>
    5c54:	10800c04 	addi	r2,r2,48
    5c58:	90800005 	stb	r2,0(r18)
    5c5c:	94800044 	addi	r18,r18,1
    5c60:	9507c83a 	sub	r3,r18,r20
    5c64:	8009883a 	mov	r4,r16
    5c68:	e00b883a 	mov	r5,fp
    5c6c:	01800284 	movi	r6,10
    5c70:	000f883a 	mov	r7,zero
    5c74:	1cfff216 	blt	r3,r19,5c40 <__alt_mem_Flash_flash_data+0xf4005c40>
    5c78:	1011883a 	mov	r8,r2
    5c7c:	d8800617 	ldw	r2,24(sp)
    5c80:	00822e0e 	bge	zero,r2,653c <_dtoa_r+0x1510>
    5c84:	d9000717 	ldw	r4,28(sp)
    5c88:	0025883a 	mov	r18,zero
    5c8c:	20af883a 	add	r23,r4,r2
    5c90:	e00b883a 	mov	r5,fp
    5c94:	01800044 	movi	r6,1
    5c98:	8009883a 	mov	r4,r16
    5c9c:	da001715 	stw	r8,92(sp)
    5ca0:	0008d240 	call	8d24 <__lshift>
    5ca4:	1009883a 	mov	r4,r2
    5ca8:	a80b883a 	mov	r5,r21
    5cac:	1039883a 	mov	fp,r2
    5cb0:	0008e740 	call	8e74 <__mcmp>
    5cb4:	da001717 	ldw	r8,92(sp)
    5cb8:	00816e0e 	bge	zero,r2,6274 <_dtoa_r+0x1248>
    5cbc:	b93fffc3 	ldbu	r4,-1(r23)
    5cc0:	b8bfffc4 	addi	r2,r23,-1
    5cc4:	1007883a 	mov	r3,r2
    5cc8:	01800e44 	movi	r6,57
    5ccc:	d9c00717 	ldw	r7,28(sp)
    5cd0:	00000506 	br	5ce8 <_dtoa_r+0xcbc>
    5cd4:	18ffffc4 	addi	r3,r3,-1
    5cd8:	38811926 	beq	r7,r2,6140 <_dtoa_r+0x1114>
    5cdc:	19000003 	ldbu	r4,0(r3)
    5ce0:	102f883a 	mov	r23,r2
    5ce4:	10bfffc4 	addi	r2,r2,-1
    5ce8:	21403fcc 	andi	r5,r4,255
    5cec:	2940201c 	xori	r5,r5,128
    5cf0:	297fe004 	addi	r5,r5,-128
    5cf4:	29bff726 	beq	r5,r6,5cd4 <__alt_mem_Flash_flash_data+0xf4005cd4>
    5cf8:	21000044 	addi	r4,r4,1
    5cfc:	11000005 	stb	r4,0(r2)
    5d00:	8009883a 	mov	r4,r16
    5d04:	a80b883a 	mov	r5,r21
    5d08:	00086480 	call	8648 <_Bfree>
    5d0c:	883e7526 	beq	r17,zero,56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5d10:	90000426 	beq	r18,zero,5d24 <_dtoa_r+0xcf8>
    5d14:	94400326 	beq	r18,r17,5d24 <_dtoa_r+0xcf8>
    5d18:	8009883a 	mov	r4,r16
    5d1c:	900b883a 	mov	r5,r18
    5d20:	00086480 	call	8648 <_Bfree>
    5d24:	8009883a 	mov	r4,r16
    5d28:	880b883a 	mov	r5,r17
    5d2c:	00086480 	call	8648 <_Bfree>
    5d30:	003e6c06 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5d34:	00800704 	movi	r2,28
    5d38:	d9800817 	ldw	r6,32(sp)
    5d3c:	a0a9883a 	add	r20,r20,r2
    5d40:	b0ad883a 	add	r22,r22,r2
    5d44:	308d883a 	add	r6,r6,r2
    5d48:	d9800815 	stw	r6,32(sp)
    5d4c:	003fa506 	br	5be4 <__alt_mem_Flash_flash_data+0xf4005be4>
    5d50:	013efb84 	movi	r4,-1042
    5d54:	246bc83a 	sub	r21,r4,r17
    5d58:	9548983a 	sll	r4,r18,r21
    5d5c:	003d1806 	br	51c0 <__alt_mem_Flash_flash_data+0xf40051c0>
    5d60:	d8000d15 	stw	zero,52(sp)
    5d64:	003d5b06 	br	52d4 <__alt_mem_Flash_flash_data+0xf40052d4>
    5d68:	880b883a 	mov	r5,r17
    5d6c:	8009883a 	mov	r4,r16
    5d70:	01800284 	movi	r6,10
    5d74:	000f883a 	mov	r7,zero
    5d78:	00086700 	call	8670 <__multadd>
    5d7c:	1023883a 	mov	r17,r2
    5d80:	d8800c17 	ldw	r2,48(sp)
    5d84:	0082550e 	bge	zero,r2,66dc <_dtoa_r+0x16b0>
    5d88:	d8800615 	stw	r2,24(sp)
    5d8c:	0500050e 	bge	zero,r20,5da4 <_dtoa_r+0xd78>
    5d90:	880b883a 	mov	r5,r17
    5d94:	8009883a 	mov	r4,r16
    5d98:	a00d883a 	mov	r6,r20
    5d9c:	0008d240 	call	8d24 <__lshift>
    5da0:	1023883a 	mov	r17,r2
    5da4:	98016a1e 	bne	r19,zero,6350 <_dtoa_r+0x1324>
    5da8:	8829883a 	mov	r20,r17
    5dac:	d9000617 	ldw	r4,24(sp)
    5db0:	dcc00717 	ldw	r19,28(sp)
    5db4:	9480004c 	andi	r18,r18,1
    5db8:	20bfffc4 	addi	r2,r4,-1
    5dbc:	9885883a 	add	r2,r19,r2
    5dc0:	d8800415 	stw	r2,16(sp)
    5dc4:	dc800615 	stw	r18,24(sp)
    5dc8:	e009883a 	mov	r4,fp
    5dcc:	a80b883a 	mov	r5,r21
    5dd0:	0004e2c0 	call	4e2c <quorem>
    5dd4:	e009883a 	mov	r4,fp
    5dd8:	880b883a 	mov	r5,r17
    5ddc:	102f883a 	mov	r23,r2
    5de0:	0008e740 	call	8e74 <__mcmp>
    5de4:	8009883a 	mov	r4,r16
    5de8:	a80b883a 	mov	r5,r21
    5dec:	a00d883a 	mov	r6,r20
    5df0:	102d883a 	mov	r22,r2
    5df4:	0008ed40 	call	8ed4 <__mdiff>
    5df8:	1007883a 	mov	r3,r2
    5dfc:	10800317 	ldw	r2,12(r2)
    5e00:	bc800c04 	addi	r18,r23,48
    5e04:	1000971e 	bne	r2,zero,6064 <_dtoa_r+0x1038>
    5e08:	180b883a 	mov	r5,r3
    5e0c:	e009883a 	mov	r4,fp
    5e10:	d8c01515 	stw	r3,84(sp)
    5e14:	0008e740 	call	8e74 <__mcmp>
    5e18:	d8c01517 	ldw	r3,84(sp)
    5e1c:	8009883a 	mov	r4,r16
    5e20:	d8801515 	stw	r2,84(sp)
    5e24:	180b883a 	mov	r5,r3
    5e28:	00086480 	call	8648 <_Bfree>
    5e2c:	d8801517 	ldw	r2,84(sp)
    5e30:	1000041e 	bne	r2,zero,5e44 <_dtoa_r+0xe18>
    5e34:	d9800317 	ldw	r6,12(sp)
    5e38:	3000021e 	bne	r6,zero,5e44 <_dtoa_r+0xe18>
    5e3c:	d8c00617 	ldw	r3,24(sp)
    5e40:	18007626 	beq	r3,zero,601c <_dtoa_r+0xff0>
    5e44:	b0005b16 	blt	r22,zero,5fb4 <_dtoa_r+0xf88>
    5e48:	b000041e 	bne	r22,zero,5e5c <_dtoa_r+0xe30>
    5e4c:	d9000317 	ldw	r4,12(sp)
    5e50:	2000021e 	bne	r4,zero,5e5c <_dtoa_r+0xe30>
    5e54:	d8c00617 	ldw	r3,24(sp)
    5e58:	18005626 	beq	r3,zero,5fb4 <_dtoa_r+0xf88>
    5e5c:	00814d16 	blt	zero,r2,6394 <_dtoa_r+0x1368>
    5e60:	d8c00417 	ldw	r3,16(sp)
    5e64:	9d800044 	addi	r22,r19,1
    5e68:	9c800005 	stb	r18,0(r19)
    5e6c:	b02f883a 	mov	r23,r22
    5e70:	98c14c26 	beq	r19,r3,63a4 <_dtoa_r+0x1378>
    5e74:	e00b883a 	mov	r5,fp
    5e78:	8009883a 	mov	r4,r16
    5e7c:	01800284 	movi	r6,10
    5e80:	000f883a 	mov	r7,zero
    5e84:	00086700 	call	8670 <__multadd>
    5e88:	1039883a 	mov	fp,r2
    5e8c:	8d006d26 	beq	r17,r20,6044 <_dtoa_r+0x1018>
    5e90:	880b883a 	mov	r5,r17
    5e94:	01800284 	movi	r6,10
    5e98:	000f883a 	mov	r7,zero
    5e9c:	8009883a 	mov	r4,r16
    5ea0:	00086700 	call	8670 <__multadd>
    5ea4:	a00b883a 	mov	r5,r20
    5ea8:	8009883a 	mov	r4,r16
    5eac:	01800284 	movi	r6,10
    5eb0:	000f883a 	mov	r7,zero
    5eb4:	1023883a 	mov	r17,r2
    5eb8:	00086700 	call	8670 <__multadd>
    5ebc:	1029883a 	mov	r20,r2
    5ec0:	b027883a 	mov	r19,r22
    5ec4:	003fc006 	br	5dc8 <__alt_mem_Flash_flash_data+0xf4005dc8>
    5ec8:	a005883a 	mov	r2,r20
    5ecc:	003ede06 	br	5a48 <__alt_mem_Flash_flash_data+0xf4005a48>
    5ed0:	01000044 	movi	r4,1
    5ed4:	d9000b15 	stw	r4,44(sp)
    5ed8:	d9802217 	ldw	r6,136(sp)
    5edc:	0180dc0e 	bge	zero,r6,6250 <_dtoa_r+0x1224>
    5ee0:	3023883a 	mov	r17,r6
    5ee4:	d9800c15 	stw	r6,48(sp)
    5ee8:	d9800615 	stw	r6,24(sp)
    5eec:	003d1e06 	br	5368 <__alt_mem_Flash_flash_data+0xf4005368>
    5ef0:	d8800617 	ldw	r2,24(sp)
    5ef4:	00be3716 	blt	zero,r2,57d4 <__alt_mem_Flash_flash_data+0xf40057d4>
    5ef8:	1000be1e 	bne	r2,zero,61f4 <_dtoa_r+0x11c8>
    5efc:	8809883a 	mov	r4,r17
    5f00:	a00b883a 	mov	r5,r20
    5f04:	000d883a 	mov	r6,zero
    5f08:	01d00534 	movhi	r7,16404
    5f0c:	000ec940 	call	ec94 <__muldf3>
    5f10:	1009883a 	mov	r4,r2
    5f14:	180b883a 	mov	r5,r3
    5f18:	900d883a 	mov	r6,r18
    5f1c:	980f883a 	mov	r7,r19
    5f20:	000ead40 	call	ead4 <__gedf2>
    5f24:	002b883a 	mov	r21,zero
    5f28:	0023883a 	mov	r17,zero
    5f2c:	10007a16 	blt	r2,zero,6118 <_dtoa_r+0x10ec>
    5f30:	d9002217 	ldw	r4,136(sp)
    5f34:	ddc00717 	ldw	r23,28(sp)
    5f38:	0108303a 	nor	r4,zero,r4
    5f3c:	d9000515 	stw	r4,20(sp)
    5f40:	8009883a 	mov	r4,r16
    5f44:	a80b883a 	mov	r5,r21
    5f48:	00086480 	call	8648 <_Bfree>
    5f4c:	883f751e 	bne	r17,zero,5d24 <__alt_mem_Flash_flash_data+0xf4005d24>
    5f50:	003de406 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5f54:	e00b883a 	mov	r5,fp
    5f58:	8009883a 	mov	r4,r16
    5f5c:	0008be40 	call	8be4 <__pow5mult>
    5f60:	1039883a 	mov	fp,r2
    5f64:	003ed306 	br	5ab4 <__alt_mem_Flash_flash_data+0xf4005ab4>
    5f68:	903ee01e 	bne	r18,zero,5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5f6c:	00800434 	movhi	r2,16
    5f70:	10bfffc4 	addi	r2,r2,-1
    5f74:	9884703a 	and	r2,r19,r2
    5f78:	103f081e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    5f7c:	9cdffc2c 	andhi	r19,r19,32752
    5f80:	983f0626 	beq	r19,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    5f84:	d8800817 	ldw	r2,32(sp)
    5f88:	b5800044 	addi	r22,r22,1
    5f8c:	04c00044 	movi	r19,1
    5f90:	10800044 	addi	r2,r2,1
    5f94:	d8800815 	stw	r2,32(sp)
    5f98:	003f0106 	br	5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5f9c:	d9800f17 	ldw	r6,60(sp)
    5fa0:	30016826 	beq	r6,zero,6544 <_dtoa_r+0x1518>
    5fa4:	10810cc4 	addi	r2,r2,1075
    5fa8:	dd400917 	ldw	r21,36(sp)
    5fac:	dd000817 	ldw	r20,32(sp)
    5fb0:	003e9906 	br	5a18 <__alt_mem_Flash_flash_data+0xf4005a18>
    5fb4:	9011883a 	mov	r8,r18
    5fb8:	4007883a 	mov	r3,r8
    5fbc:	e02d883a 	mov	r22,fp
    5fc0:	0080100e 	bge	zero,r2,6004 <_dtoa_r+0xfd8>
    5fc4:	01800044 	movi	r6,1
    5fc8:	8009883a 	mov	r4,r16
    5fcc:	e00b883a 	mov	r5,fp
    5fd0:	da001515 	stw	r8,84(sp)
    5fd4:	da001715 	stw	r8,92(sp)
    5fd8:	0008d240 	call	8d24 <__lshift>
    5fdc:	1009883a 	mov	r4,r2
    5fe0:	a80b883a 	mov	r5,r21
    5fe4:	102d883a 	mov	r22,r2
    5fe8:	0008e740 	call	8e74 <__mcmp>
    5fec:	d8c01517 	ldw	r3,84(sp)
    5ff0:	da001717 	ldw	r8,92(sp)
    5ff4:	0081a50e 	bge	zero,r2,668c <_dtoa_r+0x1660>
    5ff8:	00800e44 	movi	r2,57
    5ffc:	40817b26 	beq	r8,r2,65ec <_dtoa_r+0x15c0>
    6000:	40c00044 	addi	r3,r8,1
    6004:	8825883a 	mov	r18,r17
    6008:	9dc00044 	addi	r23,r19,1
    600c:	98c00005 	stb	r3,0(r19)
    6010:	a023883a 	mov	r17,r20
    6014:	b039883a 	mov	fp,r22
    6018:	003f3906 	br	5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    601c:	00800e44 	movi	r2,57
    6020:	9011883a 	mov	r8,r18
    6024:	90817226 	beq	r18,r2,65f0 <_dtoa_r+0x15c4>
    6028:	0580010e 	bge	zero,r22,6030 <_dtoa_r+0x1004>
    602c:	ba000c44 	addi	r8,r23,49
    6030:	8825883a 	mov	r18,r17
    6034:	9dc00044 	addi	r23,r19,1
    6038:	9a000005 	stb	r8,0(r19)
    603c:	a023883a 	mov	r17,r20
    6040:	003f2f06 	br	5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    6044:	880b883a 	mov	r5,r17
    6048:	8009883a 	mov	r4,r16
    604c:	01800284 	movi	r6,10
    6050:	000f883a 	mov	r7,zero
    6054:	00086700 	call	8670 <__multadd>
    6058:	1023883a 	mov	r17,r2
    605c:	1029883a 	mov	r20,r2
    6060:	003f9706 	br	5ec0 <__alt_mem_Flash_flash_data+0xf4005ec0>
    6064:	8009883a 	mov	r4,r16
    6068:	180b883a 	mov	r5,r3
    606c:	00086480 	call	8648 <_Bfree>
    6070:	00800044 	movi	r2,1
    6074:	003f7306 	br	5e44 <__alt_mem_Flash_flash_data+0xf4005e44>
    6078:	e009883a 	mov	r4,fp
    607c:	a80b883a 	mov	r5,r21
    6080:	0008e740 	call	8e74 <__mcmp>
    6084:	103ee60e 	bge	r2,zero,5c20 <__alt_mem_Flash_flash_data+0xf4005c20>
    6088:	8009883a 	mov	r4,r16
    608c:	e00b883a 	mov	r5,fp
    6090:	01800284 	movi	r6,10
    6094:	000f883a 	mov	r7,zero
    6098:	00086700 	call	8670 <__multadd>
    609c:	d9000517 	ldw	r4,20(sp)
    60a0:	d9800b17 	ldw	r6,44(sp)
    60a4:	1039883a 	mov	fp,r2
    60a8:	213fffc4 	addi	r4,r4,-1
    60ac:	d9000515 	stw	r4,20(sp)
    60b0:	303f2d1e 	bne	r6,zero,5d68 <__alt_mem_Flash_flash_data+0xf4005d68>
    60b4:	d9000c17 	ldw	r4,48(sp)
    60b8:	0101780e 	bge	zero,r4,669c <_dtoa_r+0x1670>
    60bc:	d9000615 	stw	r4,24(sp)
    60c0:	003edb06 	br	5c30 <__alt_mem_Flash_flash_data+0xf4005c30>
    60c4:	00800084 	movi	r2,2
    60c8:	30818e1e 	bne	r6,r2,6704 <_dtoa_r+0x16d8>
    60cc:	d8000b15 	stw	zero,44(sp)
    60d0:	003f8106 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    60d4:	d8800717 	ldw	r2,28(sp)
    60d8:	003c0306 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    60dc:	d9000317 	ldw	r4,12(sp)
    60e0:	00800084 	movi	r2,2
    60e4:	113ed00e 	bge	r2,r4,5c28 <__alt_mem_Flash_flash_data+0xf4005c28>
    60e8:	d8c00617 	ldw	r3,24(sp)
    60ec:	183f901e 	bne	r3,zero,5f30 <__alt_mem_Flash_flash_data+0xf4005f30>
    60f0:	a80b883a 	mov	r5,r21
    60f4:	8009883a 	mov	r4,r16
    60f8:	01800144 	movi	r6,5
    60fc:	000f883a 	mov	r7,zero
    6100:	00086700 	call	8670 <__multadd>
    6104:	e009883a 	mov	r4,fp
    6108:	100b883a 	mov	r5,r2
    610c:	102b883a 	mov	r21,r2
    6110:	0008e740 	call	8e74 <__mcmp>
    6114:	00bf860e 	bge	zero,r2,5f30 <__alt_mem_Flash_flash_data+0xf4005f30>
    6118:	d9800717 	ldw	r6,28(sp)
    611c:	00800c44 	movi	r2,49
    6120:	30800005 	stb	r2,0(r6)
    6124:	d8800517 	ldw	r2,20(sp)
    6128:	35c00044 	addi	r23,r6,1
    612c:	10800044 	addi	r2,r2,1
    6130:	d8800515 	stw	r2,20(sp)
    6134:	003f8206 	br	5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    6138:	903e981e 	bne	r18,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    613c:	003f8b06 	br	5f6c <__alt_mem_Flash_flash_data+0xf4005f6c>
    6140:	d9800517 	ldw	r6,20(sp)
    6144:	d8c00717 	ldw	r3,28(sp)
    6148:	00800c44 	movi	r2,49
    614c:	31800044 	addi	r6,r6,1
    6150:	d9800515 	stw	r6,20(sp)
    6154:	18800005 	stb	r2,0(r3)
    6158:	003ee906 	br	5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    615c:	dc000317 	ldw	r16,12(sp)
    6160:	003d6006 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    6164:	8809883a 	mov	r4,r17
    6168:	000fd100 	call	fd10 <__floatsidf>
    616c:	a009883a 	mov	r4,r20
    6170:	a80b883a 	mov	r5,r21
    6174:	100d883a 	mov	r6,r2
    6178:	180f883a 	mov	r7,r3
    617c:	000ec940 	call	ec94 <__muldf3>
    6180:	1009883a 	mov	r4,r2
    6184:	180b883a 	mov	r5,r3
    6188:	000d883a 	mov	r6,zero
    618c:	01d00734 	movhi	r7,16412
    6190:	000d8e80 	call	d8e8 <__adddf3>
    6194:	1023883a 	mov	r17,r2
    6198:	00bf3034 	movhi	r2,64704
    619c:	1885883a 	add	r2,r3,r2
    61a0:	d8800e15 	stw	r2,56(sp)
    61a4:	a009883a 	mov	r4,r20
    61a8:	a80b883a 	mov	r5,r21
    61ac:	000d883a 	mov	r6,zero
    61b0:	01d00534 	movhi	r7,16404
    61b4:	000f3b80 	call	f3b8 <__subdf3>
    61b8:	d9c00e17 	ldw	r7,56(sp)
    61bc:	1009883a 	mov	r4,r2
    61c0:	180b883a 	mov	r5,r3
    61c4:	880d883a 	mov	r6,r17
    61c8:	102b883a 	mov	r21,r2
    61cc:	1829883a 	mov	r20,r3
    61d0:	000ead40 	call	ead4 <__gedf2>
    61d4:	00807716 	blt	zero,r2,63b4 <_dtoa_r+0x1388>
    61d8:	d8800e17 	ldw	r2,56(sp)
    61dc:	a809883a 	mov	r4,r21
    61e0:	a00b883a 	mov	r5,r20
    61e4:	11e0003c 	xorhi	r7,r2,32768
    61e8:	880d883a 	mov	r6,r17
    61ec:	000ebb40 	call	ebb4 <__ledf2>
    61f0:	103d6b0e 	bge	r2,zero,57a0 <__alt_mem_Flash_flash_data+0xf40057a0>
    61f4:	002b883a 	mov	r21,zero
    61f8:	0023883a 	mov	r17,zero
    61fc:	003f4c06 	br	5f30 <__alt_mem_Flash_flash_data+0xf4005f30>
    6200:	d9800917 	ldw	r6,36(sp)
    6204:	e00b883a 	mov	r5,fp
    6208:	8009883a 	mov	r4,r16
    620c:	0008be40 	call	8be4 <__pow5mult>
    6210:	1039883a 	mov	fp,r2
    6214:	003e2706 	br	5ab4 <__alt_mem_Flash_flash_data+0xf4005ab4>
    6218:	d8000b15 	stw	zero,44(sp)
    621c:	003c4906 	br	5344 <__alt_mem_Flash_flash_data+0xf4005344>
    6220:	d9000917 	ldw	r4,36(sp)
    6224:	d9800a17 	ldw	r6,40(sp)
    6228:	dd400915 	stw	r21,36(sp)
    622c:	a905c83a 	sub	r2,r21,r4
    6230:	308d883a 	add	r6,r6,r2
    6234:	d9800a15 	stw	r6,40(sp)
    6238:	002b883a 	mov	r21,zero
    623c:	003df206 	br	5a08 <__alt_mem_Flash_flash_data+0xf4005a08>
    6240:	dc800e15 	stw	r18,56(sp)
    6244:	982b883a 	mov	r21,r19
    6248:	04400084 	movi	r17,2
    624c:	003c7406 	br	5420 <__alt_mem_Flash_flash_data+0xf4005420>
    6250:	04400044 	movi	r17,1
    6254:	dc400c15 	stw	r17,48(sp)
    6258:	dc400615 	stw	r17,24(sp)
    625c:	dc402215 	stw	r17,136(sp)
    6260:	80001115 	stw	zero,68(r16)
    6264:	000b883a 	mov	r5,zero
    6268:	003c4a06 	br	5394 <__alt_mem_Flash_flash_data+0xf4005394>
    626c:	3023883a 	mov	r17,r6
    6270:	003ffb06 	br	6260 <__alt_mem_Flash_flash_data+0xf4006260>
    6274:	1000021e 	bne	r2,zero,6280 <_dtoa_r+0x1254>
    6278:	4200004c 	andi	r8,r8,1
    627c:	403e8f1e 	bne	r8,zero,5cbc <__alt_mem_Flash_flash_data+0xf4005cbc>
    6280:	01000c04 	movi	r4,48
    6284:	00000106 	br	628c <_dtoa_r+0x1260>
    6288:	102f883a 	mov	r23,r2
    628c:	b8bfffc4 	addi	r2,r23,-1
    6290:	10c00007 	ldb	r3,0(r2)
    6294:	193ffc26 	beq	r3,r4,6288 <__alt_mem_Flash_flash_data+0xf4006288>
    6298:	003e9906 	br	5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    629c:	d9000517 	ldw	r4,20(sp)
    62a0:	012fc83a 	sub	r23,zero,r4
    62a4:	b800ad26 	beq	r23,zero,655c <_dtoa_r+0x1530>
    62a8:	b88003cc 	andi	r2,r23,15
    62ac:	100490fa 	slli	r2,r2,3
    62b0:	00c000b4 	movhi	r3,2
    62b4:	18f1d504 	addi	r3,r3,-14508
    62b8:	1885883a 	add	r2,r3,r2
    62bc:	11800017 	ldw	r6,0(r2)
    62c0:	11c00117 	ldw	r7,4(r2)
    62c4:	b82fd13a 	srai	r23,r23,4
    62c8:	9009883a 	mov	r4,r18
    62cc:	980b883a 	mov	r5,r19
    62d0:	000ec940 	call	ec94 <__muldf3>
    62d4:	1029883a 	mov	r20,r2
    62d8:	182b883a 	mov	r21,r3
    62dc:	b800f426 	beq	r23,zero,66b0 <_dtoa_r+0x1684>
    62e0:	020000b4 	movhi	r8,2
    62e4:	4231cb04 	addi	r8,r8,-14548
    62e8:	8029883a 	mov	r20,r16
    62ec:	04400084 	movi	r17,2
    62f0:	4021883a 	mov	r16,r8
    62f4:	b980004c 	andi	r6,r23,1
    62f8:	1009883a 	mov	r4,r2
    62fc:	b82fd07a 	srai	r23,r23,1
    6300:	180b883a 	mov	r5,r3
    6304:	30000426 	beq	r6,zero,6318 <_dtoa_r+0x12ec>
    6308:	81800017 	ldw	r6,0(r16)
    630c:	81c00117 	ldw	r7,4(r16)
    6310:	8c400044 	addi	r17,r17,1
    6314:	000ec940 	call	ec94 <__muldf3>
    6318:	84000204 	addi	r16,r16,8
    631c:	b83ff51e 	bne	r23,zero,62f4 <__alt_mem_Flash_flash_data+0xf40062f4>
    6320:	a021883a 	mov	r16,r20
    6324:	182b883a 	mov	r21,r3
    6328:	1029883a 	mov	r20,r2
    632c:	003c5506 	br	5484 <__alt_mem_Flash_flash_data+0xf4005484>
    6330:	d9800517 	ldw	r6,20(sp)
    6334:	d9000717 	ldw	r4,28(sp)
    6338:	00c00c04 	movi	r3,48
    633c:	31800044 	addi	r6,r6,1
    6340:	d9800515 	stw	r6,20(sp)
    6344:	20c00005 	stb	r3,0(r4)
    6348:	02000c44 	movi	r8,49
    634c:	003da206 	br	59d8 <__alt_mem_Flash_flash_data+0xf40059d8>
    6350:	89400117 	ldw	r5,4(r17)
    6354:	8009883a 	mov	r4,r16
    6358:	00085a00 	call	85a0 <_Balloc>
    635c:	89800417 	ldw	r6,16(r17)
    6360:	11000304 	addi	r4,r2,12
    6364:	89400304 	addi	r5,r17,12
    6368:	31800084 	addi	r6,r6,2
    636c:	318d883a 	add	r6,r6,r6
    6370:	318d883a 	add	r6,r6,r6
    6374:	1027883a 	mov	r19,r2
    6378:	000830c0 	call	830c <memcpy>
    637c:	8009883a 	mov	r4,r16
    6380:	980b883a 	mov	r5,r19
    6384:	01800044 	movi	r6,1
    6388:	0008d240 	call	8d24 <__lshift>
    638c:	1029883a 	mov	r20,r2
    6390:	003e8606 	br	5dac <__alt_mem_Flash_flash_data+0xf4005dac>
    6394:	00800e44 	movi	r2,57
    6398:	90809526 	beq	r18,r2,65f0 <_dtoa_r+0x15c4>
    639c:	92000044 	addi	r8,r18,1
    63a0:	003f2306 	br	6030 <__alt_mem_Flash_flash_data+0xf4006030>
    63a4:	9011883a 	mov	r8,r18
    63a8:	8825883a 	mov	r18,r17
    63ac:	a023883a 	mov	r17,r20
    63b0:	003e3706 	br	5c90 <__alt_mem_Flash_flash_data+0xf4005c90>
    63b4:	002b883a 	mov	r21,zero
    63b8:	0023883a 	mov	r17,zero
    63bc:	003f5606 	br	6118 <__alt_mem_Flash_flash_data+0xf4006118>
    63c0:	51bfffc4 	addi	r6,r10,-1
    63c4:	300490fa 	slli	r2,r6,3
    63c8:	00c000b4 	movhi	r3,2
    63cc:	18f1d504 	addi	r3,r3,-14508
    63d0:	1885883a 	add	r2,r3,r2
    63d4:	d9c00e17 	ldw	r7,56(sp)
    63d8:	11000017 	ldw	r4,0(r2)
    63dc:	11400117 	ldw	r5,4(r2)
    63e0:	d8800717 	ldw	r2,28(sp)
    63e4:	d9801015 	stw	r6,64(sp)
    63e8:	880d883a 	mov	r6,r17
    63ec:	da801615 	stw	r10,88(sp)
    63f0:	15c00044 	addi	r23,r2,1
    63f4:	000ec940 	call	ec94 <__muldf3>
    63f8:	a80b883a 	mov	r5,r21
    63fc:	a009883a 	mov	r4,r20
    6400:	d8c01115 	stw	r3,68(sp)
    6404:	d8800e15 	stw	r2,56(sp)
    6408:	000fc880 	call	fc88 <__fixdfsi>
    640c:	1009883a 	mov	r4,r2
    6410:	1023883a 	mov	r17,r2
    6414:	000fd100 	call	fd10 <__floatsidf>
    6418:	a009883a 	mov	r4,r20
    641c:	a80b883a 	mov	r5,r21
    6420:	100d883a 	mov	r6,r2
    6424:	180f883a 	mov	r7,r3
    6428:	000f3b80 	call	f3b8 <__subdf3>
    642c:	1813883a 	mov	r9,r3
    6430:	d8c00717 	ldw	r3,28(sp)
    6434:	8c400c04 	addi	r17,r17,48
    6438:	1011883a 	mov	r8,r2
    643c:	1c400005 	stb	r17,0(r3)
    6440:	da801617 	ldw	r10,88(sp)
    6444:	00800044 	movi	r2,1
    6448:	50802326 	beq	r10,r2,64d8 <_dtoa_r+0x14ac>
    644c:	d8800717 	ldw	r2,28(sp)
    6450:	b82b883a 	mov	r21,r23
    6454:	dc001315 	stw	r16,76(sp)
    6458:	12a9883a 	add	r20,r2,r10
    645c:	4807883a 	mov	r3,r9
    6460:	4005883a 	mov	r2,r8
    6464:	dc801415 	stw	r18,80(sp)
    6468:	000d883a 	mov	r6,zero
    646c:	01d00934 	movhi	r7,16420
    6470:	1009883a 	mov	r4,r2
    6474:	180b883a 	mov	r5,r3
    6478:	000ec940 	call	ec94 <__muldf3>
    647c:	180b883a 	mov	r5,r3
    6480:	1009883a 	mov	r4,r2
    6484:	1821883a 	mov	r16,r3
    6488:	1025883a 	mov	r18,r2
    648c:	000fc880 	call	fc88 <__fixdfsi>
    6490:	1009883a 	mov	r4,r2
    6494:	1023883a 	mov	r17,r2
    6498:	000fd100 	call	fd10 <__floatsidf>
    649c:	9009883a 	mov	r4,r18
    64a0:	800b883a 	mov	r5,r16
    64a4:	100d883a 	mov	r6,r2
    64a8:	180f883a 	mov	r7,r3
    64ac:	8c400c04 	addi	r17,r17,48
    64b0:	000f3b80 	call	f3b8 <__subdf3>
    64b4:	ad400044 	addi	r21,r21,1
    64b8:	ac7fffc5 	stb	r17,-1(r21)
    64bc:	ad3fea1e 	bne	r21,r20,6468 <__alt_mem_Flash_flash_data+0xf4006468>
    64c0:	1813883a 	mov	r9,r3
    64c4:	d8c01017 	ldw	r3,64(sp)
    64c8:	dc001317 	ldw	r16,76(sp)
    64cc:	dc801417 	ldw	r18,80(sp)
    64d0:	1011883a 	mov	r8,r2
    64d4:	b8ef883a 	add	r23,r23,r3
    64d8:	d9000e17 	ldw	r4,56(sp)
    64dc:	d9401117 	ldw	r5,68(sp)
    64e0:	000d883a 	mov	r6,zero
    64e4:	01cff834 	movhi	r7,16352
    64e8:	da001715 	stw	r8,92(sp)
    64ec:	da401515 	stw	r9,84(sp)
    64f0:	000d8e80 	call	d8e8 <__adddf3>
    64f4:	da001717 	ldw	r8,92(sp)
    64f8:	da401517 	ldw	r9,84(sp)
    64fc:	1009883a 	mov	r4,r2
    6500:	400d883a 	mov	r6,r8
    6504:	480f883a 	mov	r7,r9
    6508:	180b883a 	mov	r5,r3
    650c:	000ebb40 	call	ebb4 <__ledf2>
    6510:	da001717 	ldw	r8,92(sp)
    6514:	da401517 	ldw	r9,84(sp)
    6518:	10003b0e 	bge	r2,zero,6608 <_dtoa_r+0x15dc>
    651c:	d9001217 	ldw	r4,72(sp)
    6520:	bd7fffc3 	ldbu	r21,-1(r23)
    6524:	d9000515 	stw	r4,20(sp)
    6528:	003d1c06 	br	599c <__alt_mem_Flash_flash_data+0xf400599c>
    652c:	d8c00817 	ldw	r3,32(sp)
    6530:	18a9c83a 	sub	r20,r3,r2
    6534:	0005883a 	mov	r2,zero
    6538:	003d3706 	br	5a18 <__alt_mem_Flash_flash_data+0xf4005a18>
    653c:	00800044 	movi	r2,1
    6540:	003dd006 	br	5c84 <__alt_mem_Flash_flash_data+0xf4005c84>
    6544:	d8c00217 	ldw	r3,8(sp)
    6548:	00800d84 	movi	r2,54
    654c:	dd400917 	ldw	r21,36(sp)
    6550:	10c5c83a 	sub	r2,r2,r3
    6554:	dd000817 	ldw	r20,32(sp)
    6558:	003d2f06 	br	5a18 <__alt_mem_Flash_flash_data+0xf4005a18>
    655c:	9029883a 	mov	r20,r18
    6560:	982b883a 	mov	r21,r19
    6564:	04400084 	movi	r17,2
    6568:	003bc606 	br	5484 <__alt_mem_Flash_flash_data+0xf4005484>
    656c:	d8800617 	ldw	r2,24(sp)
    6570:	103efc26 	beq	r2,zero,6164 <__alt_mem_Flash_flash_data+0xf4006164>
    6574:	d8c00c17 	ldw	r3,48(sp)
    6578:	00fc890e 	bge	zero,r3,57a0 <__alt_mem_Flash_flash_data+0xf40057a0>
    657c:	a80b883a 	mov	r5,r21
    6580:	a009883a 	mov	r4,r20
    6584:	000d883a 	mov	r6,zero
    6588:	01d00934 	movhi	r7,16420
    658c:	000ec940 	call	ec94 <__muldf3>
    6590:	89000044 	addi	r4,r17,1
    6594:	1029883a 	mov	r20,r2
    6598:	182b883a 	mov	r21,r3
    659c:	000fd100 	call	fd10 <__floatsidf>
    65a0:	a009883a 	mov	r4,r20
    65a4:	a80b883a 	mov	r5,r21
    65a8:	100d883a 	mov	r6,r2
    65ac:	180f883a 	mov	r7,r3
    65b0:	000ec940 	call	ec94 <__muldf3>
    65b4:	1009883a 	mov	r4,r2
    65b8:	180b883a 	mov	r5,r3
    65bc:	000d883a 	mov	r6,zero
    65c0:	01d00734 	movhi	r7,16412
    65c4:	000d8e80 	call	d8e8 <__adddf3>
    65c8:	d9000517 	ldw	r4,20(sp)
    65cc:	1023883a 	mov	r17,r2
    65d0:	00bf3034 	movhi	r2,64704
    65d4:	213fffc4 	addi	r4,r4,-1
    65d8:	1885883a 	add	r2,r3,r2
    65dc:	d9001215 	stw	r4,72(sp)
    65e0:	d8800e15 	stw	r2,56(sp)
    65e4:	da800c17 	ldw	r10,48(sp)
    65e8:	003bc306 	br	54f8 <__alt_mem_Flash_flash_data+0xf40054f8>
    65ec:	b039883a 	mov	fp,r22
    65f0:	01000e44 	movi	r4,57
    65f4:	8825883a 	mov	r18,r17
    65f8:	9dc00044 	addi	r23,r19,1
    65fc:	99000005 	stb	r4,0(r19)
    6600:	a023883a 	mov	r17,r20
    6604:	003dae06 	br	5cc0 <__alt_mem_Flash_flash_data+0xf4005cc0>
    6608:	d9800e17 	ldw	r6,56(sp)
    660c:	d9c01117 	ldw	r7,68(sp)
    6610:	0009883a 	mov	r4,zero
    6614:	014ff834 	movhi	r5,16352
    6618:	da001715 	stw	r8,92(sp)
    661c:	da401515 	stw	r9,84(sp)
    6620:	000f3b80 	call	f3b8 <__subdf3>
    6624:	da001717 	ldw	r8,92(sp)
    6628:	da401517 	ldw	r9,84(sp)
    662c:	1009883a 	mov	r4,r2
    6630:	180b883a 	mov	r5,r3
    6634:	400d883a 	mov	r6,r8
    6638:	480f883a 	mov	r7,r9
    663c:	000ead40 	call	ead4 <__gedf2>
    6640:	00bc570e 	bge	zero,r2,57a0 <__alt_mem_Flash_flash_data+0xf40057a0>
    6644:	01000c04 	movi	r4,48
    6648:	00000106 	br	6650 <_dtoa_r+0x1624>
    664c:	102f883a 	mov	r23,r2
    6650:	b8bfffc4 	addi	r2,r23,-1
    6654:	10c00007 	ldb	r3,0(r2)
    6658:	193ffc26 	beq	r3,r4,664c <__alt_mem_Flash_flash_data+0xf400664c>
    665c:	d9801217 	ldw	r6,72(sp)
    6660:	d9800515 	stw	r6,20(sp)
    6664:	003c1f06 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    6668:	d8801217 	ldw	r2,72(sp)
    666c:	dc001117 	ldw	r16,68(sp)
    6670:	d8800515 	stw	r2,20(sp)
    6674:	003cc906 	br	599c <__alt_mem_Flash_flash_data+0xf400599c>
    6678:	dd801317 	ldw	r22,76(sp)
    667c:	dc001117 	ldw	r16,68(sp)
    6680:	dcc01417 	ldw	r19,80(sp)
    6684:	dc801017 	ldw	r18,64(sp)
    6688:	003c4506 	br	57a0 <__alt_mem_Flash_flash_data+0xf40057a0>
    668c:	103e5d1e 	bne	r2,zero,6004 <__alt_mem_Flash_flash_data+0xf4006004>
    6690:	4080004c 	andi	r2,r8,1
    6694:	103e5b26 	beq	r2,zero,6004 <__alt_mem_Flash_flash_data+0xf4006004>
    6698:	003e5706 	br	5ff8 <__alt_mem_Flash_flash_data+0xf4005ff8>
    669c:	d8c00317 	ldw	r3,12(sp)
    66a0:	00800084 	movi	r2,2
    66a4:	10c00a16 	blt	r2,r3,66d0 <_dtoa_r+0x16a4>
    66a8:	d9000c17 	ldw	r4,48(sp)
    66ac:	003e8306 	br	60bc <__alt_mem_Flash_flash_data+0xf40060bc>
    66b0:	04400084 	movi	r17,2
    66b4:	003b7306 	br	5484 <__alt_mem_Flash_flash_data+0xf4005484>
    66b8:	d9801217 	ldw	r6,72(sp)
    66bc:	d9800515 	stw	r6,20(sp)
    66c0:	003cb606 	br	599c <__alt_mem_Flash_flash_data+0xf400599c>
    66c4:	d9001217 	ldw	r4,72(sp)
    66c8:	d9000515 	stw	r4,20(sp)
    66cc:	003c0506 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    66d0:	d9800c17 	ldw	r6,48(sp)
    66d4:	d9800615 	stw	r6,24(sp)
    66d8:	003e8306 	br	60e8 <__alt_mem_Flash_flash_data+0xf40060e8>
    66dc:	d9800317 	ldw	r6,12(sp)
    66e0:	00800084 	movi	r2,2
    66e4:	11800216 	blt	r2,r6,66f0 <_dtoa_r+0x16c4>
    66e8:	d8800c17 	ldw	r2,48(sp)
    66ec:	003da606 	br	5d88 <__alt_mem_Flash_flash_data+0xf4005d88>
    66f0:	d8800c17 	ldw	r2,48(sp)
    66f4:	d8800615 	stw	r2,24(sp)
    66f8:	003e7b06 	br	60e8 <__alt_mem_Flash_flash_data+0xf40060e8>
    66fc:	05000044 	movi	r20,1
    6700:	003b0506 	br	5318 <__alt_mem_Flash_flash_data+0xf4005318>
    6704:	8009883a 	mov	r4,r16
    6708:	80001115 	stw	zero,68(r16)
    670c:	000b883a 	mov	r5,zero
    6710:	00085a00 	call	85a0 <_Balloc>
    6714:	d8800715 	stw	r2,28(sp)
    6718:	d8c00717 	ldw	r3,28(sp)
    671c:	00bfffc4 	movi	r2,-1
    6720:	01000044 	movi	r4,1
    6724:	d8800c15 	stw	r2,48(sp)
    6728:	80c01015 	stw	r3,64(r16)
    672c:	d9000b15 	stw	r4,44(sp)
    6730:	d8800615 	stw	r2,24(sp)
    6734:	d8002215 	stw	zero,136(sp)
    6738:	003c1906 	br	57a0 <__alt_mem_Flash_flash_data+0xf40057a0>
    673c:	193d2926 	beq	r3,r4,5be4 <__alt_mem_Flash_flash_data+0xf4005be4>
    6740:	00c00f04 	movi	r3,60
    6744:	1885c83a 	sub	r2,r3,r2
    6748:	003d7b06 	br	5d38 <__alt_mem_Flash_flash_data+0xf4005d38>
    674c:	000b883a 	mov	r5,zero
    6750:	003b1006 	br	5394 <__alt_mem_Flash_flash_data+0xf4005394>

00006754 <__sflush_r>:
    6754:	2880030b 	ldhu	r2,12(r5)
    6758:	defffb04 	addi	sp,sp,-20
    675c:	dcc00315 	stw	r19,12(sp)
    6760:	dc400115 	stw	r17,4(sp)
    6764:	dfc00415 	stw	ra,16(sp)
    6768:	dc800215 	stw	r18,8(sp)
    676c:	dc000015 	stw	r16,0(sp)
    6770:	10c0020c 	andi	r3,r2,8
    6774:	2823883a 	mov	r17,r5
    6778:	2027883a 	mov	r19,r4
    677c:	1800311e 	bne	r3,zero,6844 <__sflush_r+0xf0>
    6780:	28c00117 	ldw	r3,4(r5)
    6784:	10820014 	ori	r2,r2,2048
    6788:	2880030d 	sth	r2,12(r5)
    678c:	00c04b0e 	bge	zero,r3,68bc <__sflush_r+0x168>
    6790:	8a000a17 	ldw	r8,40(r17)
    6794:	40002326 	beq	r8,zero,6824 <__sflush_r+0xd0>
    6798:	9c000017 	ldw	r16,0(r19)
    679c:	10c4000c 	andi	r3,r2,4096
    67a0:	98000015 	stw	zero,0(r19)
    67a4:	18004826 	beq	r3,zero,68c8 <__sflush_r+0x174>
    67a8:	89801417 	ldw	r6,80(r17)
    67ac:	10c0010c 	andi	r3,r2,4
    67b0:	18000626 	beq	r3,zero,67cc <__sflush_r+0x78>
    67b4:	88c00117 	ldw	r3,4(r17)
    67b8:	88800c17 	ldw	r2,48(r17)
    67bc:	30cdc83a 	sub	r6,r6,r3
    67c0:	10000226 	beq	r2,zero,67cc <__sflush_r+0x78>
    67c4:	88800f17 	ldw	r2,60(r17)
    67c8:	308dc83a 	sub	r6,r6,r2
    67cc:	89400717 	ldw	r5,28(r17)
    67d0:	9809883a 	mov	r4,r19
    67d4:	000f883a 	mov	r7,zero
    67d8:	403ee83a 	callr	r8
    67dc:	00ffffc4 	movi	r3,-1
    67e0:	10c04426 	beq	r2,r3,68f4 <__sflush_r+0x1a0>
    67e4:	88c0030b 	ldhu	r3,12(r17)
    67e8:	89000417 	ldw	r4,16(r17)
    67ec:	88000115 	stw	zero,4(r17)
    67f0:	197dffcc 	andi	r5,r3,63487
    67f4:	8940030d 	sth	r5,12(r17)
    67f8:	89000015 	stw	r4,0(r17)
    67fc:	18c4000c 	andi	r3,r3,4096
    6800:	18002c1e 	bne	r3,zero,68b4 <__sflush_r+0x160>
    6804:	89400c17 	ldw	r5,48(r17)
    6808:	9c000015 	stw	r16,0(r19)
    680c:	28000526 	beq	r5,zero,6824 <__sflush_r+0xd0>
    6810:	88801004 	addi	r2,r17,64
    6814:	28800226 	beq	r5,r2,6820 <__sflush_r+0xcc>
    6818:	9809883a 	mov	r4,r19
    681c:	0006eac0 	call	6eac <_free_r>
    6820:	88000c15 	stw	zero,48(r17)
    6824:	0005883a 	mov	r2,zero
    6828:	dfc00417 	ldw	ra,16(sp)
    682c:	dcc00317 	ldw	r19,12(sp)
    6830:	dc800217 	ldw	r18,8(sp)
    6834:	dc400117 	ldw	r17,4(sp)
    6838:	dc000017 	ldw	r16,0(sp)
    683c:	dec00504 	addi	sp,sp,20
    6840:	f800283a 	ret
    6844:	2c800417 	ldw	r18,16(r5)
    6848:	903ff626 	beq	r18,zero,6824 <__alt_mem_Flash_flash_data+0xf4006824>
    684c:	2c000017 	ldw	r16,0(r5)
    6850:	108000cc 	andi	r2,r2,3
    6854:	2c800015 	stw	r18,0(r5)
    6858:	84a1c83a 	sub	r16,r16,r18
    685c:	1000131e 	bne	r2,zero,68ac <__sflush_r+0x158>
    6860:	28800517 	ldw	r2,20(r5)
    6864:	88800215 	stw	r2,8(r17)
    6868:	04000316 	blt	zero,r16,6878 <__sflush_r+0x124>
    686c:	003fed06 	br	6824 <__alt_mem_Flash_flash_data+0xf4006824>
    6870:	90a5883a 	add	r18,r18,r2
    6874:	043feb0e 	bge	zero,r16,6824 <__alt_mem_Flash_flash_data+0xf4006824>
    6878:	88800917 	ldw	r2,36(r17)
    687c:	89400717 	ldw	r5,28(r17)
    6880:	800f883a 	mov	r7,r16
    6884:	900d883a 	mov	r6,r18
    6888:	9809883a 	mov	r4,r19
    688c:	103ee83a 	callr	r2
    6890:	80a1c83a 	sub	r16,r16,r2
    6894:	00bff616 	blt	zero,r2,6870 <__alt_mem_Flash_flash_data+0xf4006870>
    6898:	88c0030b 	ldhu	r3,12(r17)
    689c:	00bfffc4 	movi	r2,-1
    68a0:	18c01014 	ori	r3,r3,64
    68a4:	88c0030d 	sth	r3,12(r17)
    68a8:	003fdf06 	br	6828 <__alt_mem_Flash_flash_data+0xf4006828>
    68ac:	0005883a 	mov	r2,zero
    68b0:	003fec06 	br	6864 <__alt_mem_Flash_flash_data+0xf4006864>
    68b4:	88801415 	stw	r2,80(r17)
    68b8:	003fd206 	br	6804 <__alt_mem_Flash_flash_data+0xf4006804>
    68bc:	28c00f17 	ldw	r3,60(r5)
    68c0:	00ffb316 	blt	zero,r3,6790 <__alt_mem_Flash_flash_data+0xf4006790>
    68c4:	003fd706 	br	6824 <__alt_mem_Flash_flash_data+0xf4006824>
    68c8:	89400717 	ldw	r5,28(r17)
    68cc:	000d883a 	mov	r6,zero
    68d0:	9809883a 	mov	r4,r19
    68d4:	01c00044 	movi	r7,1
    68d8:	403ee83a 	callr	r8
    68dc:	100d883a 	mov	r6,r2
    68e0:	00bfffc4 	movi	r2,-1
    68e4:	30801426 	beq	r6,r2,6938 <__sflush_r+0x1e4>
    68e8:	8880030b 	ldhu	r2,12(r17)
    68ec:	8a000a17 	ldw	r8,40(r17)
    68f0:	003fae06 	br	67ac <__alt_mem_Flash_flash_data+0xf40067ac>
    68f4:	98c00017 	ldw	r3,0(r19)
    68f8:	183fba26 	beq	r3,zero,67e4 <__alt_mem_Flash_flash_data+0xf40067e4>
    68fc:	01000744 	movi	r4,29
    6900:	19000626 	beq	r3,r4,691c <__sflush_r+0x1c8>
    6904:	01000584 	movi	r4,22
    6908:	19000426 	beq	r3,r4,691c <__sflush_r+0x1c8>
    690c:	88c0030b 	ldhu	r3,12(r17)
    6910:	18c01014 	ori	r3,r3,64
    6914:	88c0030d 	sth	r3,12(r17)
    6918:	003fc306 	br	6828 <__alt_mem_Flash_flash_data+0xf4006828>
    691c:	8880030b 	ldhu	r2,12(r17)
    6920:	88c00417 	ldw	r3,16(r17)
    6924:	88000115 	stw	zero,4(r17)
    6928:	10bdffcc 	andi	r2,r2,63487
    692c:	8880030d 	sth	r2,12(r17)
    6930:	88c00015 	stw	r3,0(r17)
    6934:	003fb306 	br	6804 <__alt_mem_Flash_flash_data+0xf4006804>
    6938:	98800017 	ldw	r2,0(r19)
    693c:	103fea26 	beq	r2,zero,68e8 <__alt_mem_Flash_flash_data+0xf40068e8>
    6940:	00c00744 	movi	r3,29
    6944:	10c00226 	beq	r2,r3,6950 <__sflush_r+0x1fc>
    6948:	00c00584 	movi	r3,22
    694c:	10ffd21e 	bne	r2,r3,6898 <__alt_mem_Flash_flash_data+0xf4006898>
    6950:	9c000015 	stw	r16,0(r19)
    6954:	0005883a 	mov	r2,zero
    6958:	003fb306 	br	6828 <__alt_mem_Flash_flash_data+0xf4006828>

0000695c <_fflush_r>:
    695c:	defffd04 	addi	sp,sp,-12
    6960:	dc000115 	stw	r16,4(sp)
    6964:	dfc00215 	stw	ra,8(sp)
    6968:	2021883a 	mov	r16,r4
    696c:	20000226 	beq	r4,zero,6978 <_fflush_r+0x1c>
    6970:	20800e17 	ldw	r2,56(r4)
    6974:	10000c26 	beq	r2,zero,69a8 <_fflush_r+0x4c>
    6978:	2880030f 	ldh	r2,12(r5)
    697c:	1000051e 	bne	r2,zero,6994 <_fflush_r+0x38>
    6980:	0005883a 	mov	r2,zero
    6984:	dfc00217 	ldw	ra,8(sp)
    6988:	dc000117 	ldw	r16,4(sp)
    698c:	dec00304 	addi	sp,sp,12
    6990:	f800283a 	ret
    6994:	8009883a 	mov	r4,r16
    6998:	dfc00217 	ldw	ra,8(sp)
    699c:	dc000117 	ldw	r16,4(sp)
    69a0:	dec00304 	addi	sp,sp,12
    69a4:	00067541 	jmpi	6754 <__sflush_r>
    69a8:	d9400015 	stw	r5,0(sp)
    69ac:	0006d380 	call	6d38 <__sinit>
    69b0:	d9400017 	ldw	r5,0(sp)
    69b4:	003ff006 	br	6978 <__alt_mem_Flash_flash_data+0xf4006978>

000069b8 <fflush>:
    69b8:	20000526 	beq	r4,zero,69d0 <fflush+0x18>
    69bc:	008000b4 	movhi	r2,2
    69c0:	10bac004 	addi	r2,r2,-5376
    69c4:	200b883a 	mov	r5,r4
    69c8:	11000017 	ldw	r4,0(r2)
    69cc:	000695c1 	jmpi	695c <_fflush_r>
    69d0:	008000b4 	movhi	r2,2
    69d4:	10babf04 	addi	r2,r2,-5380
    69d8:	11000017 	ldw	r4,0(r2)
    69dc:	01400034 	movhi	r5,0
    69e0:	295a5704 	addi	r5,r5,26972
    69e4:	00077201 	jmpi	7720 <_fwalk_reent>

000069e8 <__fp_lock>:
    69e8:	0005883a 	mov	r2,zero
    69ec:	f800283a 	ret

000069f0 <__fp_unlock>:
    69f0:	0005883a 	mov	r2,zero
    69f4:	f800283a 	ret

000069f8 <_cleanup_r>:
    69f8:	01400074 	movhi	r5,1
    69fc:	29713a04 	addi	r5,r5,-15128
    6a00:	00077201 	jmpi	7720 <_fwalk_reent>

00006a04 <__sinit.part.1>:
    6a04:	defff704 	addi	sp,sp,-36
    6a08:	00c00034 	movhi	r3,0
    6a0c:	dfc00815 	stw	ra,32(sp)
    6a10:	ddc00715 	stw	r23,28(sp)
    6a14:	dd800615 	stw	r22,24(sp)
    6a18:	dd400515 	stw	r21,20(sp)
    6a1c:	dd000415 	stw	r20,16(sp)
    6a20:	dcc00315 	stw	r19,12(sp)
    6a24:	dc800215 	stw	r18,8(sp)
    6a28:	dc400115 	stw	r17,4(sp)
    6a2c:	dc000015 	stw	r16,0(sp)
    6a30:	18da7e04 	addi	r3,r3,27128
    6a34:	24000117 	ldw	r16,4(r4)
    6a38:	20c00f15 	stw	r3,60(r4)
    6a3c:	2080bb04 	addi	r2,r4,748
    6a40:	00c000c4 	movi	r3,3
    6a44:	20c0b915 	stw	r3,740(r4)
    6a48:	2080ba15 	stw	r2,744(r4)
    6a4c:	2000b815 	stw	zero,736(r4)
    6a50:	05c00204 	movi	r23,8
    6a54:	00800104 	movi	r2,4
    6a58:	2025883a 	mov	r18,r4
    6a5c:	b80d883a 	mov	r6,r23
    6a60:	81001704 	addi	r4,r16,92
    6a64:	000b883a 	mov	r5,zero
    6a68:	80000015 	stw	zero,0(r16)
    6a6c:	80000115 	stw	zero,4(r16)
    6a70:	80000215 	stw	zero,8(r16)
    6a74:	8080030d 	sth	r2,12(r16)
    6a78:	80001915 	stw	zero,100(r16)
    6a7c:	8000038d 	sth	zero,14(r16)
    6a80:	80000415 	stw	zero,16(r16)
    6a84:	80000515 	stw	zero,20(r16)
    6a88:	80000615 	stw	zero,24(r16)
    6a8c:	00008d00 	call	8d0 <memset>
    6a90:	05800074 	movhi	r22,1
    6a94:	94400217 	ldw	r17,8(r18)
    6a98:	05400074 	movhi	r21,1
    6a9c:	05000074 	movhi	r20,1
    6aa0:	04c00074 	movhi	r19,1
    6aa4:	b5a6dc04 	addi	r22,r22,-25744
    6aa8:	ad66f304 	addi	r21,r21,-25652
    6aac:	a5271204 	addi	r20,r20,-25528
    6ab0:	9ce72904 	addi	r19,r19,-25436
    6ab4:	85800815 	stw	r22,32(r16)
    6ab8:	85400915 	stw	r21,36(r16)
    6abc:	85000a15 	stw	r20,40(r16)
    6ac0:	84c00b15 	stw	r19,44(r16)
    6ac4:	84000715 	stw	r16,28(r16)
    6ac8:	00800284 	movi	r2,10
    6acc:	8880030d 	sth	r2,12(r17)
    6ad0:	00800044 	movi	r2,1
    6ad4:	89001704 	addi	r4,r17,92
    6ad8:	b80d883a 	mov	r6,r23
    6adc:	000b883a 	mov	r5,zero
    6ae0:	88000015 	stw	zero,0(r17)
    6ae4:	88000115 	stw	zero,4(r17)
    6ae8:	88000215 	stw	zero,8(r17)
    6aec:	88001915 	stw	zero,100(r17)
    6af0:	8880038d 	sth	r2,14(r17)
    6af4:	88000415 	stw	zero,16(r17)
    6af8:	88000515 	stw	zero,20(r17)
    6afc:	88000615 	stw	zero,24(r17)
    6b00:	00008d00 	call	8d0 <memset>
    6b04:	94000317 	ldw	r16,12(r18)
    6b08:	00800484 	movi	r2,18
    6b0c:	8c400715 	stw	r17,28(r17)
    6b10:	8d800815 	stw	r22,32(r17)
    6b14:	8d400915 	stw	r21,36(r17)
    6b18:	8d000a15 	stw	r20,40(r17)
    6b1c:	8cc00b15 	stw	r19,44(r17)
    6b20:	8080030d 	sth	r2,12(r16)
    6b24:	00800084 	movi	r2,2
    6b28:	80000015 	stw	zero,0(r16)
    6b2c:	80000115 	stw	zero,4(r16)
    6b30:	80000215 	stw	zero,8(r16)
    6b34:	80001915 	stw	zero,100(r16)
    6b38:	8080038d 	sth	r2,14(r16)
    6b3c:	80000415 	stw	zero,16(r16)
    6b40:	80000515 	stw	zero,20(r16)
    6b44:	80000615 	stw	zero,24(r16)
    6b48:	81001704 	addi	r4,r16,92
    6b4c:	000b883a 	mov	r5,zero
    6b50:	b80d883a 	mov	r6,r23
    6b54:	00008d00 	call	8d0 <memset>
    6b58:	00800044 	movi	r2,1
    6b5c:	84000715 	stw	r16,28(r16)
    6b60:	85800815 	stw	r22,32(r16)
    6b64:	85400915 	stw	r21,36(r16)
    6b68:	85000a15 	stw	r20,40(r16)
    6b6c:	84c00b15 	stw	r19,44(r16)
    6b70:	90800e15 	stw	r2,56(r18)
    6b74:	dfc00817 	ldw	ra,32(sp)
    6b78:	ddc00717 	ldw	r23,28(sp)
    6b7c:	dd800617 	ldw	r22,24(sp)
    6b80:	dd400517 	ldw	r21,20(sp)
    6b84:	dd000417 	ldw	r20,16(sp)
    6b88:	dcc00317 	ldw	r19,12(sp)
    6b8c:	dc800217 	ldw	r18,8(sp)
    6b90:	dc400117 	ldw	r17,4(sp)
    6b94:	dc000017 	ldw	r16,0(sp)
    6b98:	dec00904 	addi	sp,sp,36
    6b9c:	f800283a 	ret

00006ba0 <__sfmoreglue>:
    6ba0:	defffc04 	addi	sp,sp,-16
    6ba4:	dc400115 	stw	r17,4(sp)
    6ba8:	2c7fffc4 	addi	r17,r5,-1
    6bac:	8c401a24 	muli	r17,r17,104
    6bb0:	dc800215 	stw	r18,8(sp)
    6bb4:	2825883a 	mov	r18,r5
    6bb8:	89401d04 	addi	r5,r17,116
    6bbc:	dc000015 	stw	r16,0(sp)
    6bc0:	dfc00315 	stw	ra,12(sp)
    6bc4:	0007a7c0 	call	7a7c <_malloc_r>
    6bc8:	1021883a 	mov	r16,r2
    6bcc:	10000726 	beq	r2,zero,6bec <__sfmoreglue+0x4c>
    6bd0:	11000304 	addi	r4,r2,12
    6bd4:	10000015 	stw	zero,0(r2)
    6bd8:	14800115 	stw	r18,4(r2)
    6bdc:	11000215 	stw	r4,8(r2)
    6be0:	000b883a 	mov	r5,zero
    6be4:	89801a04 	addi	r6,r17,104
    6be8:	00008d00 	call	8d0 <memset>
    6bec:	8005883a 	mov	r2,r16
    6bf0:	dfc00317 	ldw	ra,12(sp)
    6bf4:	dc800217 	ldw	r18,8(sp)
    6bf8:	dc400117 	ldw	r17,4(sp)
    6bfc:	dc000017 	ldw	r16,0(sp)
    6c00:	dec00404 	addi	sp,sp,16
    6c04:	f800283a 	ret

00006c08 <__sfp>:
    6c08:	008000b4 	movhi	r2,2
    6c0c:	defffb04 	addi	sp,sp,-20
    6c10:	10babf04 	addi	r2,r2,-5380
    6c14:	dc800215 	stw	r18,8(sp)
    6c18:	14800017 	ldw	r18,0(r2)
    6c1c:	dcc00315 	stw	r19,12(sp)
    6c20:	dfc00415 	stw	ra,16(sp)
    6c24:	90800e17 	ldw	r2,56(r18)
    6c28:	dc400115 	stw	r17,4(sp)
    6c2c:	dc000015 	stw	r16,0(sp)
    6c30:	2027883a 	mov	r19,r4
    6c34:	1000021e 	bne	r2,zero,6c40 <__sfp+0x38>
    6c38:	9009883a 	mov	r4,r18
    6c3c:	0006a040 	call	6a04 <__sinit.part.1>
    6c40:	9480b804 	addi	r18,r18,736
    6c44:	047fffc4 	movi	r17,-1
    6c48:	91400117 	ldw	r5,4(r18)
    6c4c:	94000217 	ldw	r16,8(r18)
    6c50:	297fffc4 	addi	r5,r5,-1
    6c54:	28000a16 	blt	r5,zero,6c80 <__sfp+0x78>
    6c58:	8080030f 	ldh	r2,12(r16)
    6c5c:	10000c26 	beq	r2,zero,6c90 <__sfp+0x88>
    6c60:	80c01d04 	addi	r3,r16,116
    6c64:	00000206 	br	6c70 <__sfp+0x68>
    6c68:	18bfe60f 	ldh	r2,-104(r3)
    6c6c:	10000826 	beq	r2,zero,6c90 <__sfp+0x88>
    6c70:	297fffc4 	addi	r5,r5,-1
    6c74:	1c3ffd04 	addi	r16,r3,-12
    6c78:	18c01a04 	addi	r3,r3,104
    6c7c:	2c7ffa1e 	bne	r5,r17,6c68 <__alt_mem_Flash_flash_data+0xf4006c68>
    6c80:	90800017 	ldw	r2,0(r18)
    6c84:	10001d26 	beq	r2,zero,6cfc <__sfp+0xf4>
    6c88:	1025883a 	mov	r18,r2
    6c8c:	003fee06 	br	6c48 <__alt_mem_Flash_flash_data+0xf4006c48>
    6c90:	00bfffc4 	movi	r2,-1
    6c94:	8080038d 	sth	r2,14(r16)
    6c98:	00800044 	movi	r2,1
    6c9c:	8080030d 	sth	r2,12(r16)
    6ca0:	80001915 	stw	zero,100(r16)
    6ca4:	80000015 	stw	zero,0(r16)
    6ca8:	80000215 	stw	zero,8(r16)
    6cac:	80000115 	stw	zero,4(r16)
    6cb0:	80000415 	stw	zero,16(r16)
    6cb4:	80000515 	stw	zero,20(r16)
    6cb8:	80000615 	stw	zero,24(r16)
    6cbc:	81001704 	addi	r4,r16,92
    6cc0:	000b883a 	mov	r5,zero
    6cc4:	01800204 	movi	r6,8
    6cc8:	00008d00 	call	8d0 <memset>
    6ccc:	8005883a 	mov	r2,r16
    6cd0:	80000c15 	stw	zero,48(r16)
    6cd4:	80000d15 	stw	zero,52(r16)
    6cd8:	80001115 	stw	zero,68(r16)
    6cdc:	80001215 	stw	zero,72(r16)
    6ce0:	dfc00417 	ldw	ra,16(sp)
    6ce4:	dcc00317 	ldw	r19,12(sp)
    6ce8:	dc800217 	ldw	r18,8(sp)
    6cec:	dc400117 	ldw	r17,4(sp)
    6cf0:	dc000017 	ldw	r16,0(sp)
    6cf4:	dec00504 	addi	sp,sp,20
    6cf8:	f800283a 	ret
    6cfc:	9809883a 	mov	r4,r19
    6d00:	01400104 	movi	r5,4
    6d04:	0006ba00 	call	6ba0 <__sfmoreglue>
    6d08:	90800015 	stw	r2,0(r18)
    6d0c:	103fde1e 	bne	r2,zero,6c88 <__alt_mem_Flash_flash_data+0xf4006c88>
    6d10:	00800304 	movi	r2,12
    6d14:	98800015 	stw	r2,0(r19)
    6d18:	0005883a 	mov	r2,zero
    6d1c:	003ff006 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>

00006d20 <_cleanup>:
    6d20:	008000b4 	movhi	r2,2
    6d24:	10babf04 	addi	r2,r2,-5380
    6d28:	11000017 	ldw	r4,0(r2)
    6d2c:	01400074 	movhi	r5,1
    6d30:	29713a04 	addi	r5,r5,-15128
    6d34:	00077201 	jmpi	7720 <_fwalk_reent>

00006d38 <__sinit>:
    6d38:	20800e17 	ldw	r2,56(r4)
    6d3c:	10000126 	beq	r2,zero,6d44 <__sinit+0xc>
    6d40:	f800283a 	ret
    6d44:	0006a041 	jmpi	6a04 <__sinit.part.1>

00006d48 <__sfp_lock_acquire>:
    6d48:	f800283a 	ret

00006d4c <__sfp_lock_release>:
    6d4c:	f800283a 	ret

00006d50 <__sinit_lock_acquire>:
    6d50:	f800283a 	ret

00006d54 <__sinit_lock_release>:
    6d54:	f800283a 	ret

00006d58 <__fp_lock_all>:
    6d58:	008000b4 	movhi	r2,2
    6d5c:	10bac004 	addi	r2,r2,-5376
    6d60:	11000017 	ldw	r4,0(r2)
    6d64:	01400034 	movhi	r5,0
    6d68:	295a7a04 	addi	r5,r5,27112
    6d6c:	000765c1 	jmpi	765c <_fwalk>

00006d70 <__fp_unlock_all>:
    6d70:	008000b4 	movhi	r2,2
    6d74:	10bac004 	addi	r2,r2,-5376
    6d78:	11000017 	ldw	r4,0(r2)
    6d7c:	01400034 	movhi	r5,0
    6d80:	295a7c04 	addi	r5,r5,27120
    6d84:	000765c1 	jmpi	765c <_fwalk>

00006d88 <_malloc_trim_r>:
    6d88:	defffb04 	addi	sp,sp,-20
    6d8c:	dcc00315 	stw	r19,12(sp)
    6d90:	04c000b4 	movhi	r19,2
    6d94:	dc800215 	stw	r18,8(sp)
    6d98:	dc400115 	stw	r17,4(sp)
    6d9c:	dc000015 	stw	r16,0(sp)
    6da0:	dfc00415 	stw	ra,16(sp)
    6da4:	2821883a 	mov	r16,r5
    6da8:	9cf44104 	addi	r19,r19,-12028
    6dac:	2025883a 	mov	r18,r4
    6db0:	00109c40 	call	109c4 <__malloc_lock>
    6db4:	98800217 	ldw	r2,8(r19)
    6db8:	14400117 	ldw	r17,4(r2)
    6dbc:	00bfff04 	movi	r2,-4
    6dc0:	88a2703a 	and	r17,r17,r2
    6dc4:	8c21c83a 	sub	r16,r17,r16
    6dc8:	8403fbc4 	addi	r16,r16,4079
    6dcc:	8020d33a 	srli	r16,r16,12
    6dd0:	0083ffc4 	movi	r2,4095
    6dd4:	843fffc4 	addi	r16,r16,-1
    6dd8:	8020933a 	slli	r16,r16,12
    6ddc:	1400060e 	bge	r2,r16,6df8 <_malloc_trim_r+0x70>
    6de0:	9009883a 	mov	r4,r18
    6de4:	000b883a 	mov	r5,zero
    6de8:	0009b1c0 	call	9b1c <_sbrk_r>
    6dec:	98c00217 	ldw	r3,8(r19)
    6df0:	1c47883a 	add	r3,r3,r17
    6df4:	10c00a26 	beq	r2,r3,6e20 <_malloc_trim_r+0x98>
    6df8:	9009883a 	mov	r4,r18
    6dfc:	0010ae40 	call	10ae4 <__malloc_unlock>
    6e00:	0005883a 	mov	r2,zero
    6e04:	dfc00417 	ldw	ra,16(sp)
    6e08:	dcc00317 	ldw	r19,12(sp)
    6e0c:	dc800217 	ldw	r18,8(sp)
    6e10:	dc400117 	ldw	r17,4(sp)
    6e14:	dc000017 	ldw	r16,0(sp)
    6e18:	dec00504 	addi	sp,sp,20
    6e1c:	f800283a 	ret
    6e20:	9009883a 	mov	r4,r18
    6e24:	040bc83a 	sub	r5,zero,r16
    6e28:	0009b1c0 	call	9b1c <_sbrk_r>
    6e2c:	00ffffc4 	movi	r3,-1
    6e30:	10c00d26 	beq	r2,r3,6e68 <_malloc_trim_r+0xe0>
    6e34:	00c000b4 	movhi	r3,2
    6e38:	18c2f304 	addi	r3,r3,3020
    6e3c:	18800017 	ldw	r2,0(r3)
    6e40:	99000217 	ldw	r4,8(r19)
    6e44:	8c23c83a 	sub	r17,r17,r16
    6e48:	8c400054 	ori	r17,r17,1
    6e4c:	1421c83a 	sub	r16,r2,r16
    6e50:	24400115 	stw	r17,4(r4)
    6e54:	9009883a 	mov	r4,r18
    6e58:	1c000015 	stw	r16,0(r3)
    6e5c:	0010ae40 	call	10ae4 <__malloc_unlock>
    6e60:	00800044 	movi	r2,1
    6e64:	003fe706 	br	6e04 <__alt_mem_Flash_flash_data+0xf4006e04>
    6e68:	9009883a 	mov	r4,r18
    6e6c:	000b883a 	mov	r5,zero
    6e70:	0009b1c0 	call	9b1c <_sbrk_r>
    6e74:	99000217 	ldw	r4,8(r19)
    6e78:	014003c4 	movi	r5,15
    6e7c:	1107c83a 	sub	r3,r2,r4
    6e80:	28ffdd0e 	bge	r5,r3,6df8 <__alt_mem_Flash_flash_data+0xf4006df8>
    6e84:	014000b4 	movhi	r5,2
    6e88:	297ac204 	addi	r5,r5,-5368
    6e8c:	29400017 	ldw	r5,0(r5)
    6e90:	18c00054 	ori	r3,r3,1
    6e94:	20c00115 	stw	r3,4(r4)
    6e98:	00c000b4 	movhi	r3,2
    6e9c:	1145c83a 	sub	r2,r2,r5
    6ea0:	18c2f304 	addi	r3,r3,3020
    6ea4:	18800015 	stw	r2,0(r3)
    6ea8:	003fd306 	br	6df8 <__alt_mem_Flash_flash_data+0xf4006df8>

00006eac <_free_r>:
    6eac:	28004c26 	beq	r5,zero,6fe0 <_free_r+0x134>
    6eb0:	defffd04 	addi	sp,sp,-12
    6eb4:	dc400115 	stw	r17,4(sp)
    6eb8:	dc000015 	stw	r16,0(sp)
    6ebc:	2023883a 	mov	r17,r4
    6ec0:	2821883a 	mov	r16,r5
    6ec4:	dfc00215 	stw	ra,8(sp)
    6ec8:	00109c40 	call	109c4 <__malloc_lock>
    6ecc:	813fff17 	ldw	r4,-4(r16)
    6ed0:	00bfff84 	movi	r2,-2
    6ed4:	024000b4 	movhi	r9,2
    6ed8:	81bffe04 	addi	r6,r16,-8
    6edc:	2084703a 	and	r2,r4,r2
    6ee0:	4a744104 	addi	r9,r9,-12028
    6ee4:	308b883a 	add	r5,r6,r2
    6ee8:	2a000117 	ldw	r8,4(r5)
    6eec:	49c00217 	ldw	r7,8(r9)
    6ef0:	00ffff04 	movi	r3,-4
    6ef4:	40c6703a 	and	r3,r8,r3
    6ef8:	39405326 	beq	r7,r5,7048 <_free_r+0x19c>
    6efc:	28c00115 	stw	r3,4(r5)
    6f00:	2100004c 	andi	r4,r4,1
    6f04:	2000091e 	bne	r4,zero,6f2c <_free_r+0x80>
    6f08:	81fffe17 	ldw	r7,-8(r16)
    6f0c:	4a000204 	addi	r8,r9,8
    6f10:	31cdc83a 	sub	r6,r6,r7
    6f14:	31000217 	ldw	r4,8(r6)
    6f18:	11c5883a 	add	r2,r2,r7
    6f1c:	22006126 	beq	r4,r8,70a4 <_free_r+0x1f8>
    6f20:	31c00317 	ldw	r7,12(r6)
    6f24:	21c00315 	stw	r7,12(r4)
    6f28:	39000215 	stw	r4,8(r7)
    6f2c:	28c9883a 	add	r4,r5,r3
    6f30:	21c00117 	ldw	r7,4(r4)
    6f34:	39c0004c 	andi	r7,r7,1
    6f38:	38000d1e 	bne	r7,zero,6f70 <_free_r+0xc4>
    6f3c:	29000217 	ldw	r4,8(r5)
    6f40:	10c5883a 	add	r2,r2,r3
    6f44:	00c000b4 	movhi	r3,2
    6f48:	18f44304 	addi	r3,r3,-12020
    6f4c:	20c07526 	beq	r4,r3,7124 <_free_r+0x278>
    6f50:	29c00317 	ldw	r7,12(r5)
    6f54:	11400054 	ori	r5,r2,1
    6f58:	3087883a 	add	r3,r6,r2
    6f5c:	21c00315 	stw	r7,12(r4)
    6f60:	39000215 	stw	r4,8(r7)
    6f64:	31400115 	stw	r5,4(r6)
    6f68:	18800015 	stw	r2,0(r3)
    6f6c:	00000406 	br	6f80 <_free_r+0xd4>
    6f70:	10c00054 	ori	r3,r2,1
    6f74:	30c00115 	stw	r3,4(r6)
    6f78:	3087883a 	add	r3,r6,r2
    6f7c:	18800015 	stw	r2,0(r3)
    6f80:	00c07fc4 	movi	r3,511
    6f84:	18801736 	bltu	r3,r2,6fe4 <_free_r+0x138>
    6f88:	1004d0fa 	srli	r2,r2,3
    6f8c:	01400044 	movi	r5,1
    6f90:	49000117 	ldw	r4,4(r9)
    6f94:	1087883a 	add	r3,r2,r2
    6f98:	18c7883a 	add	r3,r3,r3
    6f9c:	1005d0ba 	srai	r2,r2,2
    6fa0:	18c7883a 	add	r3,r3,r3
    6fa4:	1a47883a 	add	r3,r3,r9
    6fa8:	19c00217 	ldw	r7,8(r3)
    6fac:	2884983a 	sll	r2,r5,r2
    6fb0:	30c00315 	stw	r3,12(r6)
    6fb4:	31c00215 	stw	r7,8(r6)
    6fb8:	1104b03a 	or	r2,r2,r4
    6fbc:	19800215 	stw	r6,8(r3)
    6fc0:	48800115 	stw	r2,4(r9)
    6fc4:	39800315 	stw	r6,12(r7)
    6fc8:	8809883a 	mov	r4,r17
    6fcc:	dfc00217 	ldw	ra,8(sp)
    6fd0:	dc400117 	ldw	r17,4(sp)
    6fd4:	dc000017 	ldw	r16,0(sp)
    6fd8:	dec00304 	addi	sp,sp,12
    6fdc:	0010ae41 	jmpi	10ae4 <__malloc_unlock>
    6fe0:	f800283a 	ret
    6fe4:	1006d27a 	srli	r3,r2,9
    6fe8:	01000104 	movi	r4,4
    6fec:	20c04036 	bltu	r4,r3,70f0 <_free_r+0x244>
    6ff0:	1006d1ba 	srli	r3,r2,6
    6ff4:	19400e04 	addi	r5,r3,56
    6ff8:	2947883a 	add	r3,r5,r5
    6ffc:	18c7883a 	add	r3,r3,r3
    7000:	18c7883a 	add	r3,r3,r3
    7004:	1a49883a 	add	r4,r3,r9
    7008:	20c00217 	ldw	r3,8(r4)
    700c:	01c000b4 	movhi	r7,2
    7010:	39f44104 	addi	r7,r7,-12028
    7014:	19003b26 	beq	r3,r4,7104 <_free_r+0x258>
    7018:	01ffff04 	movi	r7,-4
    701c:	19400117 	ldw	r5,4(r3)
    7020:	29ca703a 	and	r5,r5,r7
    7024:	1140022e 	bgeu	r2,r5,7030 <_free_r+0x184>
    7028:	18c00217 	ldw	r3,8(r3)
    702c:	20fffb1e 	bne	r4,r3,701c <__alt_mem_Flash_flash_data+0xf400701c>
    7030:	18800317 	ldw	r2,12(r3)
    7034:	30800315 	stw	r2,12(r6)
    7038:	30c00215 	stw	r3,8(r6)
    703c:	11800215 	stw	r6,8(r2)
    7040:	19800315 	stw	r6,12(r3)
    7044:	003fe006 	br	6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    7048:	2100004c 	andi	r4,r4,1
    704c:	1885883a 	add	r2,r3,r2
    7050:	2000071e 	bne	r4,zero,7070 <_free_r+0x1c4>
    7054:	817ffe17 	ldw	r5,-8(r16)
    7058:	314dc83a 	sub	r6,r6,r5
    705c:	30c00317 	ldw	r3,12(r6)
    7060:	31000217 	ldw	r4,8(r6)
    7064:	1145883a 	add	r2,r2,r5
    7068:	20c00315 	stw	r3,12(r4)
    706c:	19000215 	stw	r4,8(r3)
    7070:	10c00054 	ori	r3,r2,1
    7074:	30c00115 	stw	r3,4(r6)
    7078:	00c000b4 	movhi	r3,2
    707c:	18fac304 	addi	r3,r3,-5364
    7080:	18c00017 	ldw	r3,0(r3)
    7084:	49800215 	stw	r6,8(r9)
    7088:	10ffcf36 	bltu	r2,r3,6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    708c:	008000b4 	movhi	r2,2
    7090:	1082c704 	addi	r2,r2,2844
    7094:	11400017 	ldw	r5,0(r2)
    7098:	8809883a 	mov	r4,r17
    709c:	0006d880 	call	6d88 <_malloc_trim_r>
    70a0:	003fc906 	br	6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    70a4:	28c9883a 	add	r4,r5,r3
    70a8:	21000117 	ldw	r4,4(r4)
    70ac:	2100004c 	andi	r4,r4,1
    70b0:	20000a1e 	bne	r4,zero,70dc <_free_r+0x230>
    70b4:	29000317 	ldw	r4,12(r5)
    70b8:	29400217 	ldw	r5,8(r5)
    70bc:	10c5883a 	add	r2,r2,r3
    70c0:	10c00054 	ori	r3,r2,1
    70c4:	29000315 	stw	r4,12(r5)
    70c8:	21400215 	stw	r5,8(r4)
    70cc:	30c00115 	stw	r3,4(r6)
    70d0:	308d883a 	add	r6,r6,r2
    70d4:	30800015 	stw	r2,0(r6)
    70d8:	003fbb06 	br	6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    70dc:	10c00054 	ori	r3,r2,1
    70e0:	30c00115 	stw	r3,4(r6)
    70e4:	308d883a 	add	r6,r6,r2
    70e8:	30800015 	stw	r2,0(r6)
    70ec:	003fb606 	br	6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    70f0:	01000504 	movi	r4,20
    70f4:	20c01436 	bltu	r4,r3,7148 <_free_r+0x29c>
    70f8:	194016c4 	addi	r5,r3,91
    70fc:	2947883a 	add	r3,r5,r5
    7100:	003fbe06 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7104:	280bd0ba 	srai	r5,r5,2
    7108:	00800044 	movi	r2,1
    710c:	39000117 	ldw	r4,4(r7)
    7110:	114a983a 	sll	r5,r2,r5
    7114:	1805883a 	mov	r2,r3
    7118:	2908b03a 	or	r4,r5,r4
    711c:	39000115 	stw	r4,4(r7)
    7120:	003fc406 	br	7034 <__alt_mem_Flash_flash_data+0xf4007034>
    7124:	49800515 	stw	r6,20(r9)
    7128:	49800415 	stw	r6,16(r9)
    712c:	10c00054 	ori	r3,r2,1
    7130:	31000315 	stw	r4,12(r6)
    7134:	31000215 	stw	r4,8(r6)
    7138:	30c00115 	stw	r3,4(r6)
    713c:	308d883a 	add	r6,r6,r2
    7140:	30800015 	stw	r2,0(r6)
    7144:	003fa006 	br	6fc8 <__alt_mem_Flash_flash_data+0xf4006fc8>
    7148:	01001504 	movi	r4,84
    714c:	20c00436 	bltu	r4,r3,7160 <_free_r+0x2b4>
    7150:	1006d33a 	srli	r3,r2,12
    7154:	19401b84 	addi	r5,r3,110
    7158:	2947883a 	add	r3,r5,r5
    715c:	003fa706 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7160:	01005504 	movi	r4,340
    7164:	20c00436 	bltu	r4,r3,7178 <_free_r+0x2cc>
    7168:	1006d3fa 	srli	r3,r2,15
    716c:	19401dc4 	addi	r5,r3,119
    7170:	2947883a 	add	r3,r5,r5
    7174:	003fa106 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7178:	01015504 	movi	r4,1364
    717c:	20c00436 	bltu	r4,r3,7190 <_free_r+0x2e4>
    7180:	1006d4ba 	srli	r3,r2,18
    7184:	19401f04 	addi	r5,r3,124
    7188:	2947883a 	add	r3,r5,r5
    718c:	003f9b06 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7190:	00c03f04 	movi	r3,252
    7194:	01401f84 	movi	r5,126
    7198:	003f9806 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>

0000719c <__sfvwrite_r>:
    719c:	30800217 	ldw	r2,8(r6)
    71a0:	10006726 	beq	r2,zero,7340 <__sfvwrite_r+0x1a4>
    71a4:	defff404 	addi	sp,sp,-48
    71a8:	dd000615 	stw	r20,24(sp)
    71ac:	2029883a 	mov	r20,r4
    71b0:	2900030b 	ldhu	r4,12(r5)
    71b4:	ddc00915 	stw	r23,36(sp)
    71b8:	dc000215 	stw	r16,8(sp)
    71bc:	dfc00b15 	stw	ra,44(sp)
    71c0:	df000a15 	stw	fp,40(sp)
    71c4:	dd800815 	stw	r22,32(sp)
    71c8:	dd400715 	stw	r21,28(sp)
    71cc:	dcc00515 	stw	r19,20(sp)
    71d0:	dc800415 	stw	r18,16(sp)
    71d4:	dc400315 	stw	r17,12(sp)
    71d8:	2080020c 	andi	r2,r4,8
    71dc:	2821883a 	mov	r16,r5
    71e0:	302f883a 	mov	r23,r6
    71e4:	10002726 	beq	r2,zero,7284 <__sfvwrite_r+0xe8>
    71e8:	28800417 	ldw	r2,16(r5)
    71ec:	10002526 	beq	r2,zero,7284 <__sfvwrite_r+0xe8>
    71f0:	2080008c 	andi	r2,r4,2
    71f4:	bc400017 	ldw	r17,0(r23)
    71f8:	10002a26 	beq	r2,zero,72a4 <__sfvwrite_r+0x108>
    71fc:	05600034 	movhi	r21,32768
    7200:	0027883a 	mov	r19,zero
    7204:	0025883a 	mov	r18,zero
    7208:	ad7f0004 	addi	r21,r21,-1024
    720c:	980d883a 	mov	r6,r19
    7210:	a009883a 	mov	r4,r20
    7214:	90004626 	beq	r18,zero,7330 <__sfvwrite_r+0x194>
    7218:	900f883a 	mov	r7,r18
    721c:	81400717 	ldw	r5,28(r16)
    7220:	ac80022e 	bgeu	r21,r18,722c <__sfvwrite_r+0x90>
    7224:	01e00034 	movhi	r7,32768
    7228:	39ff0004 	addi	r7,r7,-1024
    722c:	80800917 	ldw	r2,36(r16)
    7230:	103ee83a 	callr	r2
    7234:	0080520e 	bge	zero,r2,7380 <__sfvwrite_r+0x1e4>
    7238:	b8c00217 	ldw	r3,8(r23)
    723c:	98a7883a 	add	r19,r19,r2
    7240:	90a5c83a 	sub	r18,r18,r2
    7244:	1885c83a 	sub	r2,r3,r2
    7248:	b8800215 	stw	r2,8(r23)
    724c:	103fef1e 	bne	r2,zero,720c <__alt_mem_Flash_flash_data+0xf400720c>
    7250:	0005883a 	mov	r2,zero
    7254:	dfc00b17 	ldw	ra,44(sp)
    7258:	df000a17 	ldw	fp,40(sp)
    725c:	ddc00917 	ldw	r23,36(sp)
    7260:	dd800817 	ldw	r22,32(sp)
    7264:	dd400717 	ldw	r21,28(sp)
    7268:	dd000617 	ldw	r20,24(sp)
    726c:	dcc00517 	ldw	r19,20(sp)
    7270:	dc800417 	ldw	r18,16(sp)
    7274:	dc400317 	ldw	r17,12(sp)
    7278:	dc000217 	ldw	r16,8(sp)
    727c:	dec00c04 	addi	sp,sp,48
    7280:	f800283a 	ret
    7284:	a009883a 	mov	r4,r20
    7288:	800b883a 	mov	r5,r16
    728c:	0004cd80 	call	4cd8 <__swsetup_r>
    7290:	1000ec1e 	bne	r2,zero,7644 <__sfvwrite_r+0x4a8>
    7294:	8100030b 	ldhu	r4,12(r16)
    7298:	bc400017 	ldw	r17,0(r23)
    729c:	2080008c 	andi	r2,r4,2
    72a0:	103fd61e 	bne	r2,zero,71fc <__alt_mem_Flash_flash_data+0xf40071fc>
    72a4:	2080004c 	andi	r2,r4,1
    72a8:	10003a1e 	bne	r2,zero,7394 <__sfvwrite_r+0x1f8>
    72ac:	0039883a 	mov	fp,zero
    72b0:	0025883a 	mov	r18,zero
    72b4:	90001a26 	beq	r18,zero,7320 <__sfvwrite_r+0x184>
    72b8:	2080800c 	andi	r2,r4,512
    72bc:	85800217 	ldw	r22,8(r16)
    72c0:	10007626 	beq	r2,zero,749c <__sfvwrite_r+0x300>
    72c4:	b027883a 	mov	r19,r22
    72c8:	95809436 	bltu	r18,r22,751c <__sfvwrite_r+0x380>
    72cc:	2081200c 	andi	r2,r4,1152
    72d0:	10009f1e 	bne	r2,zero,7550 <__sfvwrite_r+0x3b4>
    72d4:	81000017 	ldw	r4,0(r16)
    72d8:	e00b883a 	mov	r5,fp
    72dc:	980d883a 	mov	r6,r19
    72e0:	00084440 	call	8444 <memmove>
    72e4:	81000217 	ldw	r4,8(r16)
    72e8:	81400017 	ldw	r5,0(r16)
    72ec:	9005883a 	mov	r2,r18
    72f0:	2587c83a 	sub	r3,r4,r22
    72f4:	2ce7883a 	add	r19,r5,r19
    72f8:	80c00215 	stw	r3,8(r16)
    72fc:	84c00015 	stw	r19,0(r16)
    7300:	b8c00217 	ldw	r3,8(r23)
    7304:	e0b9883a 	add	fp,fp,r2
    7308:	90a5c83a 	sub	r18,r18,r2
    730c:	1885c83a 	sub	r2,r3,r2
    7310:	b8800215 	stw	r2,8(r23)
    7314:	103fce26 	beq	r2,zero,7250 <__alt_mem_Flash_flash_data+0xf4007250>
    7318:	8100030b 	ldhu	r4,12(r16)
    731c:	903fe61e 	bne	r18,zero,72b8 <__alt_mem_Flash_flash_data+0xf40072b8>
    7320:	8f000017 	ldw	fp,0(r17)
    7324:	8c800117 	ldw	r18,4(r17)
    7328:	8c400204 	addi	r17,r17,8
    732c:	003fe106 	br	72b4 <__alt_mem_Flash_flash_data+0xf40072b4>
    7330:	8cc00017 	ldw	r19,0(r17)
    7334:	8c800117 	ldw	r18,4(r17)
    7338:	8c400204 	addi	r17,r17,8
    733c:	003fb306 	br	720c <__alt_mem_Flash_flash_data+0xf400720c>
    7340:	0005883a 	mov	r2,zero
    7344:	f800283a 	ret
    7348:	00a00034 	movhi	r2,32768
    734c:	10bfffc4 	addi	r2,r2,-1
    7350:	9009883a 	mov	r4,r18
    7354:	1480012e 	bgeu	r2,r18,735c <__sfvwrite_r+0x1c0>
    7358:	1009883a 	mov	r4,r2
    735c:	980b883a 	mov	r5,r19
    7360:	000d8280 	call	d828 <__divsi3>
    7364:	81400717 	ldw	r5,28(r16)
    7368:	80c00917 	ldw	r3,36(r16)
    736c:	988f383a 	mul	r7,r19,r2
    7370:	a009883a 	mov	r4,r20
    7374:	e00d883a 	mov	r6,fp
    7378:	183ee83a 	callr	r3
    737c:	00bfe016 	blt	zero,r2,7300 <__alt_mem_Flash_flash_data+0xf4007300>
    7380:	8080030b 	ldhu	r2,12(r16)
    7384:	10801014 	ori	r2,r2,64
    7388:	8080030d 	sth	r2,12(r16)
    738c:	00bfffc4 	movi	r2,-1
    7390:	003fb006 	br	7254 <__alt_mem_Flash_flash_data+0xf4007254>
    7394:	0027883a 	mov	r19,zero
    7398:	0011883a 	mov	r8,zero
    739c:	0039883a 	mov	fp,zero
    73a0:	0025883a 	mov	r18,zero
    73a4:	90001f26 	beq	r18,zero,7424 <__sfvwrite_r+0x288>
    73a8:	40006026 	beq	r8,zero,752c <__sfvwrite_r+0x390>
    73ac:	982b883a 	mov	r21,r19
    73b0:	94c0012e 	bgeu	r18,r19,73b8 <__sfvwrite_r+0x21c>
    73b4:	902b883a 	mov	r21,r18
    73b8:	81000017 	ldw	r4,0(r16)
    73bc:	80800417 	ldw	r2,16(r16)
    73c0:	a82d883a 	mov	r22,r21
    73c4:	81800217 	ldw	r6,8(r16)
    73c8:	81c00517 	ldw	r7,20(r16)
    73cc:	1100022e 	bgeu	r2,r4,73d8 <__sfvwrite_r+0x23c>
    73d0:	31c7883a 	add	r3,r6,r7
    73d4:	1d401816 	blt	r3,r21,7438 <__sfvwrite_r+0x29c>
    73d8:	a9c04416 	blt	r21,r7,74ec <__sfvwrite_r+0x350>
    73dc:	80800917 	ldw	r2,36(r16)
    73e0:	81400717 	ldw	r5,28(r16)
    73e4:	a009883a 	mov	r4,r20
    73e8:	da000115 	stw	r8,4(sp)
    73ec:	e00d883a 	mov	r6,fp
    73f0:	103ee83a 	callr	r2
    73f4:	102d883a 	mov	r22,r2
    73f8:	da000117 	ldw	r8,4(sp)
    73fc:	00bfe00e 	bge	zero,r2,7380 <__alt_mem_Flash_flash_data+0xf4007380>
    7400:	9da7c83a 	sub	r19,r19,r22
    7404:	98001f26 	beq	r19,zero,7484 <__sfvwrite_r+0x2e8>
    7408:	b8800217 	ldw	r2,8(r23)
    740c:	e5b9883a 	add	fp,fp,r22
    7410:	95a5c83a 	sub	r18,r18,r22
    7414:	15adc83a 	sub	r22,r2,r22
    7418:	bd800215 	stw	r22,8(r23)
    741c:	b03f8c26 	beq	r22,zero,7250 <__alt_mem_Flash_flash_data+0xf4007250>
    7420:	903fe11e 	bne	r18,zero,73a8 <__alt_mem_Flash_flash_data+0xf40073a8>
    7424:	8f000017 	ldw	fp,0(r17)
    7428:	8c800117 	ldw	r18,4(r17)
    742c:	0011883a 	mov	r8,zero
    7430:	8c400204 	addi	r17,r17,8
    7434:	003fdb06 	br	73a4 <__alt_mem_Flash_flash_data+0xf40073a4>
    7438:	180d883a 	mov	r6,r3
    743c:	e00b883a 	mov	r5,fp
    7440:	da000115 	stw	r8,4(sp)
    7444:	d8c00015 	stw	r3,0(sp)
    7448:	00084440 	call	8444 <memmove>
    744c:	d8c00017 	ldw	r3,0(sp)
    7450:	80800017 	ldw	r2,0(r16)
    7454:	a009883a 	mov	r4,r20
    7458:	800b883a 	mov	r5,r16
    745c:	10c5883a 	add	r2,r2,r3
    7460:	80800015 	stw	r2,0(r16)
    7464:	d8c00015 	stw	r3,0(sp)
    7468:	000695c0 	call	695c <_fflush_r>
    746c:	d8c00017 	ldw	r3,0(sp)
    7470:	da000117 	ldw	r8,4(sp)
    7474:	103fc21e 	bne	r2,zero,7380 <__alt_mem_Flash_flash_data+0xf4007380>
    7478:	182d883a 	mov	r22,r3
    747c:	9da7c83a 	sub	r19,r19,r22
    7480:	983fe11e 	bne	r19,zero,7408 <__alt_mem_Flash_flash_data+0xf4007408>
    7484:	a009883a 	mov	r4,r20
    7488:	800b883a 	mov	r5,r16
    748c:	000695c0 	call	695c <_fflush_r>
    7490:	103fbb1e 	bne	r2,zero,7380 <__alt_mem_Flash_flash_data+0xf4007380>
    7494:	0011883a 	mov	r8,zero
    7498:	003fdb06 	br	7408 <__alt_mem_Flash_flash_data+0xf4007408>
    749c:	81000017 	ldw	r4,0(r16)
    74a0:	80800417 	ldw	r2,16(r16)
    74a4:	11000236 	bltu	r2,r4,74b0 <__sfvwrite_r+0x314>
    74a8:	84c00517 	ldw	r19,20(r16)
    74ac:	94ffa62e 	bgeu	r18,r19,7348 <__alt_mem_Flash_flash_data+0xf4007348>
    74b0:	9027883a 	mov	r19,r18
    74b4:	b480012e 	bgeu	r22,r18,74bc <__sfvwrite_r+0x320>
    74b8:	b027883a 	mov	r19,r22
    74bc:	e00b883a 	mov	r5,fp
    74c0:	980d883a 	mov	r6,r19
    74c4:	00084440 	call	8444 <memmove>
    74c8:	80800217 	ldw	r2,8(r16)
    74cc:	80c00017 	ldw	r3,0(r16)
    74d0:	14c5c83a 	sub	r2,r2,r19
    74d4:	1cc7883a 	add	r3,r3,r19
    74d8:	80800215 	stw	r2,8(r16)
    74dc:	80c00015 	stw	r3,0(r16)
    74e0:	10004326 	beq	r2,zero,75f0 <__sfvwrite_r+0x454>
    74e4:	9805883a 	mov	r2,r19
    74e8:	003f8506 	br	7300 <__alt_mem_Flash_flash_data+0xf4007300>
    74ec:	a80d883a 	mov	r6,r21
    74f0:	e00b883a 	mov	r5,fp
    74f4:	da000115 	stw	r8,4(sp)
    74f8:	00084440 	call	8444 <memmove>
    74fc:	80800217 	ldw	r2,8(r16)
    7500:	80c00017 	ldw	r3,0(r16)
    7504:	da000117 	ldw	r8,4(sp)
    7508:	1545c83a 	sub	r2,r2,r21
    750c:	1d6b883a 	add	r21,r3,r21
    7510:	80800215 	stw	r2,8(r16)
    7514:	85400015 	stw	r21,0(r16)
    7518:	003fb906 	br	7400 <__alt_mem_Flash_flash_data+0xf4007400>
    751c:	81000017 	ldw	r4,0(r16)
    7520:	902d883a 	mov	r22,r18
    7524:	9027883a 	mov	r19,r18
    7528:	003f6b06 	br	72d8 <__alt_mem_Flash_flash_data+0xf40072d8>
    752c:	e009883a 	mov	r4,fp
    7530:	01400284 	movi	r5,10
    7534:	900d883a 	mov	r6,r18
    7538:	00082240 	call	8224 <memchr>
    753c:	10003e26 	beq	r2,zero,7638 <__sfvwrite_r+0x49c>
    7540:	10800044 	addi	r2,r2,1
    7544:	1727c83a 	sub	r19,r2,fp
    7548:	02000044 	movi	r8,1
    754c:	003f9706 	br	73ac <__alt_mem_Flash_flash_data+0xf40073ac>
    7550:	80800517 	ldw	r2,20(r16)
    7554:	81400417 	ldw	r5,16(r16)
    7558:	80c00017 	ldw	r3,0(r16)
    755c:	10a7883a 	add	r19,r2,r2
    7560:	9885883a 	add	r2,r19,r2
    7564:	1026d7fa 	srli	r19,r2,31
    7568:	196bc83a 	sub	r21,r3,r5
    756c:	a9800044 	addi	r6,r21,1
    7570:	9885883a 	add	r2,r19,r2
    7574:	1027d07a 	srai	r19,r2,1
    7578:	3485883a 	add	r2,r6,r18
    757c:	980d883a 	mov	r6,r19
    7580:	9880022e 	bgeu	r19,r2,758c <__sfvwrite_r+0x3f0>
    7584:	1027883a 	mov	r19,r2
    7588:	100d883a 	mov	r6,r2
    758c:	2101000c 	andi	r4,r4,1024
    7590:	20001c26 	beq	r4,zero,7604 <__sfvwrite_r+0x468>
    7594:	a009883a 	mov	r4,r20
    7598:	300b883a 	mov	r5,r6
    759c:	0007a7c0 	call	7a7c <_malloc_r>
    75a0:	102d883a 	mov	r22,r2
    75a4:	10002926 	beq	r2,zero,764c <__sfvwrite_r+0x4b0>
    75a8:	81400417 	ldw	r5,16(r16)
    75ac:	1009883a 	mov	r4,r2
    75b0:	a80d883a 	mov	r6,r21
    75b4:	000830c0 	call	830c <memcpy>
    75b8:	8080030b 	ldhu	r2,12(r16)
    75bc:	00fedfc4 	movi	r3,-1153
    75c0:	10c4703a 	and	r2,r2,r3
    75c4:	10802014 	ori	r2,r2,128
    75c8:	8080030d 	sth	r2,12(r16)
    75cc:	b549883a 	add	r4,r22,r21
    75d0:	9d4bc83a 	sub	r5,r19,r21
    75d4:	85800415 	stw	r22,16(r16)
    75d8:	84c00515 	stw	r19,20(r16)
    75dc:	81000015 	stw	r4,0(r16)
    75e0:	902d883a 	mov	r22,r18
    75e4:	81400215 	stw	r5,8(r16)
    75e8:	9027883a 	mov	r19,r18
    75ec:	003f3a06 	br	72d8 <__alt_mem_Flash_flash_data+0xf40072d8>
    75f0:	a009883a 	mov	r4,r20
    75f4:	800b883a 	mov	r5,r16
    75f8:	000695c0 	call	695c <_fflush_r>
    75fc:	103fb926 	beq	r2,zero,74e4 <__alt_mem_Flash_flash_data+0xf40074e4>
    7600:	003f5f06 	br	7380 <__alt_mem_Flash_flash_data+0xf4007380>
    7604:	a009883a 	mov	r4,r20
    7608:	00095400 	call	9540 <_realloc_r>
    760c:	102d883a 	mov	r22,r2
    7610:	103fee1e 	bne	r2,zero,75cc <__alt_mem_Flash_flash_data+0xf40075cc>
    7614:	81400417 	ldw	r5,16(r16)
    7618:	a009883a 	mov	r4,r20
    761c:	0006eac0 	call	6eac <_free_r>
    7620:	8080030b 	ldhu	r2,12(r16)
    7624:	00ffdfc4 	movi	r3,-129
    7628:	1884703a 	and	r2,r3,r2
    762c:	00c00304 	movi	r3,12
    7630:	a0c00015 	stw	r3,0(r20)
    7634:	003f5306 	br	7384 <__alt_mem_Flash_flash_data+0xf4007384>
    7638:	94c00044 	addi	r19,r18,1
    763c:	02000044 	movi	r8,1
    7640:	003f5a06 	br	73ac <__alt_mem_Flash_flash_data+0xf40073ac>
    7644:	00bfffc4 	movi	r2,-1
    7648:	003f0206 	br	7254 <__alt_mem_Flash_flash_data+0xf4007254>
    764c:	00800304 	movi	r2,12
    7650:	a0800015 	stw	r2,0(r20)
    7654:	8080030b 	ldhu	r2,12(r16)
    7658:	003f4a06 	br	7384 <__alt_mem_Flash_flash_data+0xf4007384>

0000765c <_fwalk>:
    765c:	defff704 	addi	sp,sp,-36
    7660:	dd000415 	stw	r20,16(sp)
    7664:	dfc00815 	stw	ra,32(sp)
    7668:	ddc00715 	stw	r23,28(sp)
    766c:	dd800615 	stw	r22,24(sp)
    7670:	dd400515 	stw	r21,20(sp)
    7674:	dcc00315 	stw	r19,12(sp)
    7678:	dc800215 	stw	r18,8(sp)
    767c:	dc400115 	stw	r17,4(sp)
    7680:	dc000015 	stw	r16,0(sp)
    7684:	2500b804 	addi	r20,r4,736
    7688:	a0002326 	beq	r20,zero,7718 <_fwalk+0xbc>
    768c:	282b883a 	mov	r21,r5
    7690:	002f883a 	mov	r23,zero
    7694:	05800044 	movi	r22,1
    7698:	04ffffc4 	movi	r19,-1
    769c:	a4400117 	ldw	r17,4(r20)
    76a0:	a4800217 	ldw	r18,8(r20)
    76a4:	8c7fffc4 	addi	r17,r17,-1
    76a8:	88000d16 	blt	r17,zero,76e0 <_fwalk+0x84>
    76ac:	94000304 	addi	r16,r18,12
    76b0:	94800384 	addi	r18,r18,14
    76b4:	80c0000b 	ldhu	r3,0(r16)
    76b8:	8c7fffc4 	addi	r17,r17,-1
    76bc:	813ffd04 	addi	r4,r16,-12
    76c0:	b0c0042e 	bgeu	r22,r3,76d4 <_fwalk+0x78>
    76c4:	90c0000f 	ldh	r3,0(r18)
    76c8:	1cc00226 	beq	r3,r19,76d4 <_fwalk+0x78>
    76cc:	a83ee83a 	callr	r21
    76d0:	b8aeb03a 	or	r23,r23,r2
    76d4:	84001a04 	addi	r16,r16,104
    76d8:	94801a04 	addi	r18,r18,104
    76dc:	8cfff51e 	bne	r17,r19,76b4 <__alt_mem_Flash_flash_data+0xf40076b4>
    76e0:	a5000017 	ldw	r20,0(r20)
    76e4:	a03fed1e 	bne	r20,zero,769c <__alt_mem_Flash_flash_data+0xf400769c>
    76e8:	b805883a 	mov	r2,r23
    76ec:	dfc00817 	ldw	ra,32(sp)
    76f0:	ddc00717 	ldw	r23,28(sp)
    76f4:	dd800617 	ldw	r22,24(sp)
    76f8:	dd400517 	ldw	r21,20(sp)
    76fc:	dd000417 	ldw	r20,16(sp)
    7700:	dcc00317 	ldw	r19,12(sp)
    7704:	dc800217 	ldw	r18,8(sp)
    7708:	dc400117 	ldw	r17,4(sp)
    770c:	dc000017 	ldw	r16,0(sp)
    7710:	dec00904 	addi	sp,sp,36
    7714:	f800283a 	ret
    7718:	002f883a 	mov	r23,zero
    771c:	003ff206 	br	76e8 <__alt_mem_Flash_flash_data+0xf40076e8>

00007720 <_fwalk_reent>:
    7720:	defff704 	addi	sp,sp,-36
    7724:	dd400515 	stw	r21,20(sp)
    7728:	dfc00815 	stw	ra,32(sp)
    772c:	ddc00715 	stw	r23,28(sp)
    7730:	dd800615 	stw	r22,24(sp)
    7734:	dd000415 	stw	r20,16(sp)
    7738:	dcc00315 	stw	r19,12(sp)
    773c:	dc800215 	stw	r18,8(sp)
    7740:	dc400115 	stw	r17,4(sp)
    7744:	dc000015 	stw	r16,0(sp)
    7748:	2540b804 	addi	r21,r4,736
    774c:	a8002326 	beq	r21,zero,77dc <_fwalk_reent+0xbc>
    7750:	2829883a 	mov	r20,r5
    7754:	202d883a 	mov	r22,r4
    7758:	002f883a 	mov	r23,zero
    775c:	04c00044 	movi	r19,1
    7760:	04bfffc4 	movi	r18,-1
    7764:	ac400117 	ldw	r17,4(r21)
    7768:	ac000217 	ldw	r16,8(r21)
    776c:	8c7fffc4 	addi	r17,r17,-1
    7770:	88000c16 	blt	r17,zero,77a4 <_fwalk_reent+0x84>
    7774:	84000304 	addi	r16,r16,12
    7778:	80c0000b 	ldhu	r3,0(r16)
    777c:	8c7fffc4 	addi	r17,r17,-1
    7780:	817ffd04 	addi	r5,r16,-12
    7784:	98c0052e 	bgeu	r19,r3,779c <_fwalk_reent+0x7c>
    7788:	80c0008f 	ldh	r3,2(r16)
    778c:	b009883a 	mov	r4,r22
    7790:	1c800226 	beq	r3,r18,779c <_fwalk_reent+0x7c>
    7794:	a03ee83a 	callr	r20
    7798:	b8aeb03a 	or	r23,r23,r2
    779c:	84001a04 	addi	r16,r16,104
    77a0:	8cbff51e 	bne	r17,r18,7778 <__alt_mem_Flash_flash_data+0xf4007778>
    77a4:	ad400017 	ldw	r21,0(r21)
    77a8:	a83fee1e 	bne	r21,zero,7764 <__alt_mem_Flash_flash_data+0xf4007764>
    77ac:	b805883a 	mov	r2,r23
    77b0:	dfc00817 	ldw	ra,32(sp)
    77b4:	ddc00717 	ldw	r23,28(sp)
    77b8:	dd800617 	ldw	r22,24(sp)
    77bc:	dd400517 	ldw	r21,20(sp)
    77c0:	dd000417 	ldw	r20,16(sp)
    77c4:	dcc00317 	ldw	r19,12(sp)
    77c8:	dc800217 	ldw	r18,8(sp)
    77cc:	dc400117 	ldw	r17,4(sp)
    77d0:	dc000017 	ldw	r16,0(sp)
    77d4:	dec00904 	addi	sp,sp,36
    77d8:	f800283a 	ret
    77dc:	002f883a 	mov	r23,zero
    77e0:	003ff206 	br	77ac <__alt_mem_Flash_flash_data+0xf40077ac>

000077e4 <_setlocale_r>:
    77e4:	30001b26 	beq	r6,zero,7854 <_setlocale_r+0x70>
    77e8:	014000b4 	movhi	r5,2
    77ec:	defffe04 	addi	sp,sp,-8
    77f0:	2971bb04 	addi	r5,r5,-14612
    77f4:	3009883a 	mov	r4,r6
    77f8:	dc000015 	stw	r16,0(sp)
    77fc:	dfc00115 	stw	ra,4(sp)
    7800:	3021883a 	mov	r16,r6
    7804:	0000bdc0 	call	bdc <strcmp>
    7808:	1000061e 	bne	r2,zero,7824 <_setlocale_r+0x40>
    780c:	008000b4 	movhi	r2,2
    7810:	10b1ba04 	addi	r2,r2,-14616
    7814:	dfc00117 	ldw	ra,4(sp)
    7818:	dc000017 	ldw	r16,0(sp)
    781c:	dec00204 	addi	sp,sp,8
    7820:	f800283a 	ret
    7824:	014000b4 	movhi	r5,2
    7828:	2971ba04 	addi	r5,r5,-14616
    782c:	8009883a 	mov	r4,r16
    7830:	0000bdc0 	call	bdc <strcmp>
    7834:	103ff526 	beq	r2,zero,780c <__alt_mem_Flash_flash_data+0xf400780c>
    7838:	014000b4 	movhi	r5,2
    783c:	29719d04 	addi	r5,r5,-14732
    7840:	8009883a 	mov	r4,r16
    7844:	0000bdc0 	call	bdc <strcmp>
    7848:	103ff026 	beq	r2,zero,780c <__alt_mem_Flash_flash_data+0xf400780c>
    784c:	0005883a 	mov	r2,zero
    7850:	003ff006 	br	7814 <__alt_mem_Flash_flash_data+0xf4007814>
    7854:	008000b4 	movhi	r2,2
    7858:	10b1ba04 	addi	r2,r2,-14616
    785c:	f800283a 	ret

00007860 <__locale_charset>:
    7860:	008000b4 	movhi	r2,2
    7864:	10b42b04 	addi	r2,r2,-12116
    7868:	f800283a 	ret

0000786c <__locale_mb_cur_max>:
    786c:	008000b4 	movhi	r2,2
    7870:	10bac104 	addi	r2,r2,-5372
    7874:	10800017 	ldw	r2,0(r2)
    7878:	f800283a 	ret

0000787c <__locale_msgcharset>:
    787c:	008000b4 	movhi	r2,2
    7880:	10b42304 	addi	r2,r2,-12148
    7884:	f800283a 	ret

00007888 <__locale_cjk_lang>:
    7888:	0005883a 	mov	r2,zero
    788c:	f800283a 	ret

00007890 <_localeconv_r>:
    7890:	008000b4 	movhi	r2,2
    7894:	10b43304 	addi	r2,r2,-12084
    7898:	f800283a 	ret

0000789c <setlocale>:
    789c:	00c000b4 	movhi	r3,2
    78a0:	18fac004 	addi	r3,r3,-5376
    78a4:	2005883a 	mov	r2,r4
    78a8:	19000017 	ldw	r4,0(r3)
    78ac:	280d883a 	mov	r6,r5
    78b0:	100b883a 	mov	r5,r2
    78b4:	00077e41 	jmpi	77e4 <_setlocale_r>

000078b8 <localeconv>:
    78b8:	008000b4 	movhi	r2,2
    78bc:	10b43304 	addi	r2,r2,-12084
    78c0:	f800283a 	ret

000078c4 <__smakebuf_r>:
    78c4:	2880030b 	ldhu	r2,12(r5)
    78c8:	10c0008c 	andi	r3,r2,2
    78cc:	1800401e 	bne	r3,zero,79d0 <__smakebuf_r+0x10c>
    78d0:	deffec04 	addi	sp,sp,-80
    78d4:	dc000f15 	stw	r16,60(sp)
    78d8:	2821883a 	mov	r16,r5
    78dc:	2940038f 	ldh	r5,14(r5)
    78e0:	dc401015 	stw	r17,64(sp)
    78e4:	dfc01315 	stw	ra,76(sp)
    78e8:	dcc01215 	stw	r19,72(sp)
    78ec:	dc801115 	stw	r18,68(sp)
    78f0:	2023883a 	mov	r17,r4
    78f4:	28001b16 	blt	r5,zero,7964 <__smakebuf_r+0xa0>
    78f8:	d80d883a 	mov	r6,sp
    78fc:	000c7cc0 	call	c7cc <_fstat_r>
    7900:	10001716 	blt	r2,zero,7960 <__smakebuf_r+0x9c>
    7904:	d8800117 	ldw	r2,4(sp)
    7908:	00e00014 	movui	r3,32768
    790c:	10bc000c 	andi	r2,r2,61440
    7910:	10c03726 	beq	r2,r3,79f0 <__smakebuf_r+0x12c>
    7914:	80c0030b 	ldhu	r3,12(r16)
    7918:	18c20014 	ori	r3,r3,2048
    791c:	80c0030d 	sth	r3,12(r16)
    7920:	00c80004 	movi	r3,8192
    7924:	10c03c1e 	bne	r2,r3,7a18 <__smakebuf_r+0x154>
    7928:	8140038f 	ldh	r5,14(r16)
    792c:	8809883a 	mov	r4,r17
    7930:	000c8240 	call	c824 <_isatty_r>
    7934:	10004e26 	beq	r2,zero,7a70 <__smakebuf_r+0x1ac>
    7938:	8080030b 	ldhu	r2,12(r16)
    793c:	04c00044 	movi	r19,1
    7940:	80c010c4 	addi	r3,r16,67
    7944:	14c4b03a 	or	r2,r2,r19
    7948:	8080030d 	sth	r2,12(r16)
    794c:	80c00015 	stw	r3,0(r16)
    7950:	80c00415 	stw	r3,16(r16)
    7954:	84c00515 	stw	r19,20(r16)
    7958:	04810004 	movi	r18,1024
    795c:	00000706 	br	797c <__smakebuf_r+0xb8>
    7960:	8080030b 	ldhu	r2,12(r16)
    7964:	10c0200c 	andi	r3,r2,128
    7968:	18001f1e 	bne	r3,zero,79e8 <__smakebuf_r+0x124>
    796c:	04810004 	movi	r18,1024
    7970:	10820014 	ori	r2,r2,2048
    7974:	8080030d 	sth	r2,12(r16)
    7978:	0027883a 	mov	r19,zero
    797c:	8809883a 	mov	r4,r17
    7980:	900b883a 	mov	r5,r18
    7984:	0007a7c0 	call	7a7c <_malloc_r>
    7988:	10002e26 	beq	r2,zero,7a44 <__smakebuf_r+0x180>
    798c:	80c0030b 	ldhu	r3,12(r16)
    7990:	01000034 	movhi	r4,0
    7994:	211a7e04 	addi	r4,r4,27128
    7998:	89000f15 	stw	r4,60(r17)
    799c:	18c02014 	ori	r3,r3,128
    79a0:	80c0030d 	sth	r3,12(r16)
    79a4:	80800015 	stw	r2,0(r16)
    79a8:	80800415 	stw	r2,16(r16)
    79ac:	84800515 	stw	r18,20(r16)
    79b0:	98001c1e 	bne	r19,zero,7a24 <__smakebuf_r+0x160>
    79b4:	dfc01317 	ldw	ra,76(sp)
    79b8:	dcc01217 	ldw	r19,72(sp)
    79bc:	dc801117 	ldw	r18,68(sp)
    79c0:	dc401017 	ldw	r17,64(sp)
    79c4:	dc000f17 	ldw	r16,60(sp)
    79c8:	dec01404 	addi	sp,sp,80
    79cc:	f800283a 	ret
    79d0:	288010c4 	addi	r2,r5,67
    79d4:	28800015 	stw	r2,0(r5)
    79d8:	28800415 	stw	r2,16(r5)
    79dc:	00800044 	movi	r2,1
    79e0:	28800515 	stw	r2,20(r5)
    79e4:	f800283a 	ret
    79e8:	04801004 	movi	r18,64
    79ec:	003fe006 	br	7970 <__alt_mem_Flash_flash_data+0xf4007970>
    79f0:	81000a17 	ldw	r4,40(r16)
    79f4:	00c00074 	movhi	r3,1
    79f8:	18e71204 	addi	r3,r3,-25528
    79fc:	20ffc51e 	bne	r4,r3,7914 <__alt_mem_Flash_flash_data+0xf4007914>
    7a00:	80c0030b 	ldhu	r3,12(r16)
    7a04:	01010004 	movi	r4,1024
    7a08:	81001315 	stw	r4,76(r16)
    7a0c:	1906b03a 	or	r3,r3,r4
    7a10:	80c0030d 	sth	r3,12(r16)
    7a14:	003fc206 	br	7920 <__alt_mem_Flash_flash_data+0xf4007920>
    7a18:	0027883a 	mov	r19,zero
    7a1c:	04810004 	movi	r18,1024
    7a20:	003fd606 	br	797c <__alt_mem_Flash_flash_data+0xf400797c>
    7a24:	8140038f 	ldh	r5,14(r16)
    7a28:	8809883a 	mov	r4,r17
    7a2c:	000c8240 	call	c824 <_isatty_r>
    7a30:	103fe026 	beq	r2,zero,79b4 <__alt_mem_Flash_flash_data+0xf40079b4>
    7a34:	8080030b 	ldhu	r2,12(r16)
    7a38:	10800054 	ori	r2,r2,1
    7a3c:	8080030d 	sth	r2,12(r16)
    7a40:	003fdc06 	br	79b4 <__alt_mem_Flash_flash_data+0xf40079b4>
    7a44:	8080030b 	ldhu	r2,12(r16)
    7a48:	10c0800c 	andi	r3,r2,512
    7a4c:	183fd91e 	bne	r3,zero,79b4 <__alt_mem_Flash_flash_data+0xf40079b4>
    7a50:	10800094 	ori	r2,r2,2
    7a54:	80c010c4 	addi	r3,r16,67
    7a58:	8080030d 	sth	r2,12(r16)
    7a5c:	00800044 	movi	r2,1
    7a60:	80c00015 	stw	r3,0(r16)
    7a64:	80c00415 	stw	r3,16(r16)
    7a68:	80800515 	stw	r2,20(r16)
    7a6c:	003fd106 	br	79b4 <__alt_mem_Flash_flash_data+0xf40079b4>
    7a70:	04c00044 	movi	r19,1
    7a74:	04810004 	movi	r18,1024
    7a78:	003fc006 	br	797c <__alt_mem_Flash_flash_data+0xf400797c>

00007a7c <_malloc_r>:
    7a7c:	defff504 	addi	sp,sp,-44
    7a80:	dc800315 	stw	r18,12(sp)
    7a84:	dfc00a15 	stw	ra,40(sp)
    7a88:	df000915 	stw	fp,36(sp)
    7a8c:	ddc00815 	stw	r23,32(sp)
    7a90:	dd800715 	stw	r22,28(sp)
    7a94:	dd400615 	stw	r21,24(sp)
    7a98:	dd000515 	stw	r20,20(sp)
    7a9c:	dcc00415 	stw	r19,16(sp)
    7aa0:	dc400215 	stw	r17,8(sp)
    7aa4:	dc000115 	stw	r16,4(sp)
    7aa8:	288002c4 	addi	r2,r5,11
    7aac:	00c00584 	movi	r3,22
    7ab0:	2025883a 	mov	r18,r4
    7ab4:	18802a2e 	bgeu	r3,r2,7b60 <_malloc_r+0xe4>
    7ab8:	047ffe04 	movi	r17,-8
    7abc:	1462703a 	and	r17,r2,r17
    7ac0:	88009e16 	blt	r17,zero,7d3c <_malloc_r+0x2c0>
    7ac4:	89409d36 	bltu	r17,r5,7d3c <_malloc_r+0x2c0>
    7ac8:	00109c40 	call	109c4 <__malloc_lock>
    7acc:	00807dc4 	movi	r2,503
    7ad0:	14402736 	bltu	r2,r17,7b70 <_malloc_r+0xf4>
    7ad4:	8806d0fa 	srli	r3,r17,3
    7ad8:	04c000b4 	movhi	r19,2
    7adc:	9cf44104 	addi	r19,r19,-12028
    7ae0:	18c5883a 	add	r2,r3,r3
    7ae4:	1085883a 	add	r2,r2,r2
    7ae8:	1085883a 	add	r2,r2,r2
    7aec:	9885883a 	add	r2,r19,r2
    7af0:	14000317 	ldw	r16,12(r2)
    7af4:	80814a26 	beq	r16,r2,8020 <_malloc_r+0x5a4>
    7af8:	80c00117 	ldw	r3,4(r16)
    7afc:	81000317 	ldw	r4,12(r16)
    7b00:	00bfff04 	movi	r2,-4
    7b04:	1884703a 	and	r2,r3,r2
    7b08:	81400217 	ldw	r5,8(r16)
    7b0c:	8085883a 	add	r2,r16,r2
    7b10:	10c00117 	ldw	r3,4(r2)
    7b14:	29000315 	stw	r4,12(r5)
    7b18:	21400215 	stw	r5,8(r4)
    7b1c:	18c00054 	ori	r3,r3,1
    7b20:	10c00115 	stw	r3,4(r2)
    7b24:	9009883a 	mov	r4,r18
    7b28:	0010ae40 	call	10ae4 <__malloc_unlock>
    7b2c:	80800204 	addi	r2,r16,8
    7b30:	dfc00a17 	ldw	ra,40(sp)
    7b34:	df000917 	ldw	fp,36(sp)
    7b38:	ddc00817 	ldw	r23,32(sp)
    7b3c:	dd800717 	ldw	r22,28(sp)
    7b40:	dd400617 	ldw	r21,24(sp)
    7b44:	dd000517 	ldw	r20,20(sp)
    7b48:	dcc00417 	ldw	r19,16(sp)
    7b4c:	dc800317 	ldw	r18,12(sp)
    7b50:	dc400217 	ldw	r17,8(sp)
    7b54:	dc000117 	ldw	r16,4(sp)
    7b58:	dec00b04 	addi	sp,sp,44
    7b5c:	f800283a 	ret
    7b60:	04400404 	movi	r17,16
    7b64:	89407536 	bltu	r17,r5,7d3c <_malloc_r+0x2c0>
    7b68:	00109c40 	call	109c4 <__malloc_lock>
    7b6c:	003fd906 	br	7ad4 <__alt_mem_Flash_flash_data+0xf4007ad4>
    7b70:	8806d27a 	srli	r3,r17,9
    7b74:	18007526 	beq	r3,zero,7d4c <_malloc_r+0x2d0>
    7b78:	00800104 	movi	r2,4
    7b7c:	10c0ef36 	bltu	r2,r3,7f3c <_malloc_r+0x4c0>
    7b80:	8806d1ba 	srli	r3,r17,6
    7b84:	19c00e04 	addi	r7,r3,56
    7b88:	39cb883a 	add	r5,r7,r7
    7b8c:	04c000b4 	movhi	r19,2
    7b90:	294b883a 	add	r5,r5,r5
    7b94:	9cf44104 	addi	r19,r19,-12028
    7b98:	294b883a 	add	r5,r5,r5
    7b9c:	994b883a 	add	r5,r19,r5
    7ba0:	2c000317 	ldw	r16,12(r5)
    7ba4:	2c000e26 	beq	r5,r16,7be0 <_malloc_r+0x164>
    7ba8:	80800117 	ldw	r2,4(r16)
    7bac:	01bfff04 	movi	r6,-4
    7bb0:	010003c4 	movi	r4,15
    7bb4:	1184703a 	and	r2,r2,r6
    7bb8:	1447c83a 	sub	r3,r2,r17
    7bbc:	20c00716 	blt	r4,r3,7bdc <_malloc_r+0x160>
    7bc0:	1800650e 	bge	r3,zero,7d58 <_malloc_r+0x2dc>
    7bc4:	84000317 	ldw	r16,12(r16)
    7bc8:	2c000526 	beq	r5,r16,7be0 <_malloc_r+0x164>
    7bcc:	80800117 	ldw	r2,4(r16)
    7bd0:	1184703a 	and	r2,r2,r6
    7bd4:	1447c83a 	sub	r3,r2,r17
    7bd8:	20fff90e 	bge	r4,r3,7bc0 <__alt_mem_Flash_flash_data+0xf4007bc0>
    7bdc:	39ffffc4 	addi	r7,r7,-1
    7be0:	38c00044 	addi	r3,r7,1
    7be4:	018000b4 	movhi	r6,2
    7be8:	9c000417 	ldw	r16,16(r19)
    7bec:	31b44104 	addi	r6,r6,-12028
    7bf0:	32400204 	addi	r9,r6,8
    7bf4:	82410326 	beq	r16,r9,8004 <_malloc_r+0x588>
    7bf8:	81000117 	ldw	r4,4(r16)
    7bfc:	00bfff04 	movi	r2,-4
    7c00:	208e703a 	and	r7,r4,r2
    7c04:	3c45c83a 	sub	r2,r7,r17
    7c08:	010003c4 	movi	r4,15
    7c0c:	2080ee16 	blt	r4,r2,7fc8 <_malloc_r+0x54c>
    7c10:	32400515 	stw	r9,20(r6)
    7c14:	32400415 	stw	r9,16(r6)
    7c18:	1000510e 	bge	r2,zero,7d60 <_malloc_r+0x2e4>
    7c1c:	00807fc4 	movi	r2,511
    7c20:	11c0ce36 	bltu	r2,r7,7f5c <_malloc_r+0x4e0>
    7c24:	3808d0fa 	srli	r4,r7,3
    7c28:	01c00044 	movi	r7,1
    7c2c:	30800117 	ldw	r2,4(r6)
    7c30:	210b883a 	add	r5,r4,r4
    7c34:	294b883a 	add	r5,r5,r5
    7c38:	2009d0ba 	srai	r4,r4,2
    7c3c:	294b883a 	add	r5,r5,r5
    7c40:	298b883a 	add	r5,r5,r6
    7c44:	2a000217 	ldw	r8,8(r5)
    7c48:	3908983a 	sll	r4,r7,r4
    7c4c:	81400315 	stw	r5,12(r16)
    7c50:	82000215 	stw	r8,8(r16)
    7c54:	2088b03a 	or	r4,r4,r2
    7c58:	2c000215 	stw	r16,8(r5)
    7c5c:	31000115 	stw	r4,4(r6)
    7c60:	44000315 	stw	r16,12(r8)
    7c64:	1805d0ba 	srai	r2,r3,2
    7c68:	01400044 	movi	r5,1
    7c6c:	288a983a 	sll	r5,r5,r2
    7c70:	21404336 	bltu	r4,r5,7d80 <_malloc_r+0x304>
    7c74:	2144703a 	and	r2,r4,r5
    7c78:	10000a1e 	bne	r2,zero,7ca4 <_malloc_r+0x228>
    7c7c:	00bfff04 	movi	r2,-4
    7c80:	294b883a 	add	r5,r5,r5
    7c84:	1886703a 	and	r3,r3,r2
    7c88:	2144703a 	and	r2,r4,r5
    7c8c:	18c00104 	addi	r3,r3,4
    7c90:	1000041e 	bne	r2,zero,7ca4 <_malloc_r+0x228>
    7c94:	294b883a 	add	r5,r5,r5
    7c98:	2144703a 	and	r2,r4,r5
    7c9c:	18c00104 	addi	r3,r3,4
    7ca0:	103ffc26 	beq	r2,zero,7c94 <__alt_mem_Flash_flash_data+0xf4007c94>
    7ca4:	023fff04 	movi	r8,-4
    7ca8:	01c003c4 	movi	r7,15
    7cac:	18c5883a 	add	r2,r3,r3
    7cb0:	1085883a 	add	r2,r2,r2
    7cb4:	1085883a 	add	r2,r2,r2
    7cb8:	9895883a 	add	r10,r19,r2
    7cbc:	52c00304 	addi	r11,r10,12
    7cc0:	1819883a 	mov	r12,r3
    7cc4:	5c000017 	ldw	r16,0(r11)
    7cc8:	59bffd04 	addi	r6,r11,-12
    7ccc:	8180041e 	bne	r16,r6,7ce0 <_malloc_r+0x264>
    7cd0:	0000ce06 	br	800c <_malloc_r+0x590>
    7cd4:	2000d70e 	bge	r4,zero,8034 <_malloc_r+0x5b8>
    7cd8:	84000317 	ldw	r16,12(r16)
    7cdc:	8180cb26 	beq	r16,r6,800c <_malloc_r+0x590>
    7ce0:	80800117 	ldw	r2,4(r16)
    7ce4:	1204703a 	and	r2,r2,r8
    7ce8:	1449c83a 	sub	r4,r2,r17
    7cec:	393ff90e 	bge	r7,r4,7cd4 <__alt_mem_Flash_flash_data+0xf4007cd4>
    7cf0:	80800317 	ldw	r2,12(r16)
    7cf4:	80c00217 	ldw	r3,8(r16)
    7cf8:	89400054 	ori	r5,r17,1
    7cfc:	81400115 	stw	r5,4(r16)
    7d00:	18800315 	stw	r2,12(r3)
    7d04:	10c00215 	stw	r3,8(r2)
    7d08:	8463883a 	add	r17,r16,r17
    7d0c:	9c400515 	stw	r17,20(r19)
    7d10:	9c400415 	stw	r17,16(r19)
    7d14:	20800054 	ori	r2,r4,1
    7d18:	88800115 	stw	r2,4(r17)
    7d1c:	8a400315 	stw	r9,12(r17)
    7d20:	8a400215 	stw	r9,8(r17)
    7d24:	8923883a 	add	r17,r17,r4
    7d28:	89000015 	stw	r4,0(r17)
    7d2c:	9009883a 	mov	r4,r18
    7d30:	0010ae40 	call	10ae4 <__malloc_unlock>
    7d34:	80800204 	addi	r2,r16,8
    7d38:	003f7d06 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7d3c:	00800304 	movi	r2,12
    7d40:	90800015 	stw	r2,0(r18)
    7d44:	0005883a 	mov	r2,zero
    7d48:	003f7906 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7d4c:	01401f84 	movi	r5,126
    7d50:	01c00fc4 	movi	r7,63
    7d54:	003f8d06 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7d58:	81000317 	ldw	r4,12(r16)
    7d5c:	003f6a06 	br	7b08 <__alt_mem_Flash_flash_data+0xf4007b08>
    7d60:	81c5883a 	add	r2,r16,r7
    7d64:	10c00117 	ldw	r3,4(r2)
    7d68:	9009883a 	mov	r4,r18
    7d6c:	18c00054 	ori	r3,r3,1
    7d70:	10c00115 	stw	r3,4(r2)
    7d74:	0010ae40 	call	10ae4 <__malloc_unlock>
    7d78:	80800204 	addi	r2,r16,8
    7d7c:	003f6c06 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7d80:	9c000217 	ldw	r16,8(r19)
    7d84:	00bfff04 	movi	r2,-4
    7d88:	85800117 	ldw	r22,4(r16)
    7d8c:	b0ac703a 	and	r22,r22,r2
    7d90:	b4400336 	bltu	r22,r17,7da0 <_malloc_r+0x324>
    7d94:	b445c83a 	sub	r2,r22,r17
    7d98:	00c003c4 	movi	r3,15
    7d9c:	18805d16 	blt	r3,r2,7f14 <_malloc_r+0x498>
    7da0:	05c000b4 	movhi	r23,2
    7da4:	008000b4 	movhi	r2,2
    7da8:	bdfac204 	addi	r23,r23,-5368
    7dac:	1082c704 	addi	r2,r2,2844
    7db0:	15400017 	ldw	r21,0(r2)
    7db4:	b9000017 	ldw	r4,0(r23)
    7db8:	00ffffc4 	movi	r3,-1
    7dbc:	858d883a 	add	r6,r16,r22
    7dc0:	8d6b883a 	add	r21,r17,r21
    7dc4:	20c0e426 	beq	r4,r3,8158 <_malloc_r+0x6dc>
    7dc8:	ad4403c4 	addi	r21,r21,4111
    7dcc:	00fc0004 	movi	r3,-4096
    7dd0:	a8ea703a 	and	r21,r21,r3
    7dd4:	9009883a 	mov	r4,r18
    7dd8:	a80b883a 	mov	r5,r21
    7ddc:	d9800015 	stw	r6,0(sp)
    7de0:	0009b1c0 	call	9b1c <_sbrk_r>
    7de4:	00ffffc4 	movi	r3,-1
    7de8:	1029883a 	mov	r20,r2
    7dec:	d9800017 	ldw	r6,0(sp)
    7df0:	10c0a426 	beq	r2,r3,8084 <_malloc_r+0x608>
    7df4:	1180a236 	bltu	r2,r6,8080 <_malloc_r+0x604>
    7df8:	070000b4 	movhi	fp,2
    7dfc:	e702f304 	addi	fp,fp,3020
    7e00:	e0c00017 	ldw	r3,0(fp)
    7e04:	a8c7883a 	add	r3,r21,r3
    7e08:	e0c00015 	stw	r3,0(fp)
    7e0c:	3500da26 	beq	r6,r20,8178 <_malloc_r+0x6fc>
    7e10:	b9000017 	ldw	r4,0(r23)
    7e14:	00bfffc4 	movi	r2,-1
    7e18:	2080e426 	beq	r4,r2,81ac <_malloc_r+0x730>
    7e1c:	a185c83a 	sub	r2,r20,r6
    7e20:	1885883a 	add	r2,r3,r2
    7e24:	e0800015 	stw	r2,0(fp)
    7e28:	a0c001cc 	andi	r3,r20,7
    7e2c:	1800b526 	beq	r3,zero,8104 <_malloc_r+0x688>
    7e30:	a0e9c83a 	sub	r20,r20,r3
    7e34:	00840204 	movi	r2,4104
    7e38:	a5000204 	addi	r20,r20,8
    7e3c:	10c7c83a 	sub	r3,r2,r3
    7e40:	a545883a 	add	r2,r20,r21
    7e44:	1083ffcc 	andi	r2,r2,4095
    7e48:	18abc83a 	sub	r21,r3,r2
    7e4c:	9009883a 	mov	r4,r18
    7e50:	a80b883a 	mov	r5,r21
    7e54:	0009b1c0 	call	9b1c <_sbrk_r>
    7e58:	00ffffc4 	movi	r3,-1
    7e5c:	10c0d026 	beq	r2,r3,81a0 <_malloc_r+0x724>
    7e60:	1507c83a 	sub	r3,r2,r20
    7e64:	a8c7883a 	add	r3,r21,r3
    7e68:	18c00054 	ori	r3,r3,1
    7e6c:	e0800017 	ldw	r2,0(fp)
    7e70:	9d000215 	stw	r20,8(r19)
    7e74:	a0c00115 	stw	r3,4(r20)
    7e78:	a887883a 	add	r3,r21,r2
    7e7c:	e0c00015 	stw	r3,0(fp)
    7e80:	84c00e26 	beq	r16,r19,7ebc <_malloc_r+0x440>
    7e84:	018003c4 	movi	r6,15
    7e88:	3580a02e 	bgeu	r6,r22,810c <_malloc_r+0x690>
    7e8c:	81400117 	ldw	r5,4(r16)
    7e90:	013ffe04 	movi	r4,-8
    7e94:	b0bffd04 	addi	r2,r22,-12
    7e98:	1104703a 	and	r2,r2,r4
    7e9c:	2900004c 	andi	r4,r5,1
    7ea0:	1108b03a 	or	r4,r2,r4
    7ea4:	81000115 	stw	r4,4(r16)
    7ea8:	01400144 	movi	r5,5
    7eac:	8089883a 	add	r4,r16,r2
    7eb0:	21400115 	stw	r5,4(r4)
    7eb4:	21400215 	stw	r5,8(r4)
    7eb8:	3080c036 	bltu	r6,r2,81bc <_malloc_r+0x740>
    7ebc:	008000b4 	movhi	r2,2
    7ec0:	1082c604 	addi	r2,r2,2840
    7ec4:	11000017 	ldw	r4,0(r2)
    7ec8:	20c0012e 	bgeu	r4,r3,7ed0 <_malloc_r+0x454>
    7ecc:	10c00015 	stw	r3,0(r2)
    7ed0:	008000b4 	movhi	r2,2
    7ed4:	1082c504 	addi	r2,r2,2836
    7ed8:	11000017 	ldw	r4,0(r2)
    7edc:	9c000217 	ldw	r16,8(r19)
    7ee0:	20c0012e 	bgeu	r4,r3,7ee8 <_malloc_r+0x46c>
    7ee4:	10c00015 	stw	r3,0(r2)
    7ee8:	80c00117 	ldw	r3,4(r16)
    7eec:	00bfff04 	movi	r2,-4
    7ef0:	1886703a 	and	r3,r3,r2
    7ef4:	1c45c83a 	sub	r2,r3,r17
    7ef8:	1c400236 	bltu	r3,r17,7f04 <_malloc_r+0x488>
    7efc:	00c003c4 	movi	r3,15
    7f00:	18800416 	blt	r3,r2,7f14 <_malloc_r+0x498>
    7f04:	9009883a 	mov	r4,r18
    7f08:	0010ae40 	call	10ae4 <__malloc_unlock>
    7f0c:	0005883a 	mov	r2,zero
    7f10:	003f0706 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7f14:	88c00054 	ori	r3,r17,1
    7f18:	80c00115 	stw	r3,4(r16)
    7f1c:	8463883a 	add	r17,r16,r17
    7f20:	10800054 	ori	r2,r2,1
    7f24:	9c400215 	stw	r17,8(r19)
    7f28:	88800115 	stw	r2,4(r17)
    7f2c:	9009883a 	mov	r4,r18
    7f30:	0010ae40 	call	10ae4 <__malloc_unlock>
    7f34:	80800204 	addi	r2,r16,8
    7f38:	003efd06 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7f3c:	00800504 	movi	r2,20
    7f40:	10c0482e 	bgeu	r2,r3,8064 <_malloc_r+0x5e8>
    7f44:	00801504 	movi	r2,84
    7f48:	10c06836 	bltu	r2,r3,80ec <_malloc_r+0x670>
    7f4c:	8806d33a 	srli	r3,r17,12
    7f50:	19c01b84 	addi	r7,r3,110
    7f54:	39cb883a 	add	r5,r7,r7
    7f58:	003f0c06 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7f5c:	3804d27a 	srli	r2,r7,9
    7f60:	01000104 	movi	r4,4
    7f64:	2080422e 	bgeu	r4,r2,8070 <_malloc_r+0x5f4>
    7f68:	01000504 	movi	r4,20
    7f6c:	20807c36 	bltu	r4,r2,8160 <_malloc_r+0x6e4>
    7f70:	110016c4 	addi	r4,r2,91
    7f74:	210b883a 	add	r5,r4,r4
    7f78:	294b883a 	add	r5,r5,r5
    7f7c:	294b883a 	add	r5,r5,r5
    7f80:	994b883a 	add	r5,r19,r5
    7f84:	28800217 	ldw	r2,8(r5)
    7f88:	020000b4 	movhi	r8,2
    7f8c:	42344104 	addi	r8,r8,-12028
    7f90:	11406326 	beq	r2,r5,8120 <_malloc_r+0x6a4>
    7f94:	01bfff04 	movi	r6,-4
    7f98:	11000117 	ldw	r4,4(r2)
    7f9c:	2188703a 	and	r4,r4,r6
    7fa0:	3900022e 	bgeu	r7,r4,7fac <_malloc_r+0x530>
    7fa4:	10800217 	ldw	r2,8(r2)
    7fa8:	28bffb1e 	bne	r5,r2,7f98 <__alt_mem_Flash_flash_data+0xf4007f98>
    7fac:	11800317 	ldw	r6,12(r2)
    7fb0:	99000117 	ldw	r4,4(r19)
    7fb4:	81800315 	stw	r6,12(r16)
    7fb8:	80800215 	stw	r2,8(r16)
    7fbc:	34000215 	stw	r16,8(r6)
    7fc0:	14000315 	stw	r16,12(r2)
    7fc4:	003f2706 	br	7c64 <__alt_mem_Flash_flash_data+0xf4007c64>
    7fc8:	88c00054 	ori	r3,r17,1
    7fcc:	80c00115 	stw	r3,4(r16)
    7fd0:	8463883a 	add	r17,r16,r17
    7fd4:	34400515 	stw	r17,20(r6)
    7fd8:	34400415 	stw	r17,16(r6)
    7fdc:	10c00054 	ori	r3,r2,1
    7fe0:	8a400315 	stw	r9,12(r17)
    7fe4:	8a400215 	stw	r9,8(r17)
    7fe8:	88c00115 	stw	r3,4(r17)
    7fec:	88a3883a 	add	r17,r17,r2
    7ff0:	88800015 	stw	r2,0(r17)
    7ff4:	9009883a 	mov	r4,r18
    7ff8:	0010ae40 	call	10ae4 <__malloc_unlock>
    7ffc:	80800204 	addi	r2,r16,8
    8000:	003ecb06 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    8004:	31000117 	ldw	r4,4(r6)
    8008:	003f1606 	br	7c64 <__alt_mem_Flash_flash_data+0xf4007c64>
    800c:	63000044 	addi	r12,r12,1
    8010:	608000cc 	andi	r2,r12,3
    8014:	5ac00204 	addi	r11,r11,8
    8018:	103f2a1e 	bne	r2,zero,7cc4 <__alt_mem_Flash_flash_data+0xf4007cc4>
    801c:	00002106 	br	80a4 <_malloc_r+0x628>
    8020:	80800204 	addi	r2,r16,8
    8024:	84000517 	ldw	r16,20(r16)
    8028:	143eb31e 	bne	r2,r16,7af8 <__alt_mem_Flash_flash_data+0xf4007af8>
    802c:	18c00084 	addi	r3,r3,2
    8030:	003eec06 	br	7be4 <__alt_mem_Flash_flash_data+0xf4007be4>
    8034:	8085883a 	add	r2,r16,r2
    8038:	10c00117 	ldw	r3,4(r2)
    803c:	81000317 	ldw	r4,12(r16)
    8040:	81400217 	ldw	r5,8(r16)
    8044:	18c00054 	ori	r3,r3,1
    8048:	10c00115 	stw	r3,4(r2)
    804c:	29000315 	stw	r4,12(r5)
    8050:	21400215 	stw	r5,8(r4)
    8054:	9009883a 	mov	r4,r18
    8058:	0010ae40 	call	10ae4 <__malloc_unlock>
    805c:	80800204 	addi	r2,r16,8
    8060:	003eb306 	br	7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    8064:	19c016c4 	addi	r7,r3,91
    8068:	39cb883a 	add	r5,r7,r7
    806c:	003ec706 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    8070:	3804d1ba 	srli	r2,r7,6
    8074:	11000e04 	addi	r4,r2,56
    8078:	210b883a 	add	r5,r4,r4
    807c:	003fbe06 	br	7f78 <__alt_mem_Flash_flash_data+0xf4007f78>
    8080:	84ff5d26 	beq	r16,r19,7df8 <__alt_mem_Flash_flash_data+0xf4007df8>
    8084:	9c000217 	ldw	r16,8(r19)
    8088:	00bfff04 	movi	r2,-4
    808c:	80c00117 	ldw	r3,4(r16)
    8090:	1886703a 	and	r3,r3,r2
    8094:	003f9706 	br	7ef4 <__alt_mem_Flash_flash_data+0xf4007ef4>
    8098:	52800017 	ldw	r10,0(r10)
    809c:	18ffffc4 	addi	r3,r3,-1
    80a0:	50805c1e 	bne	r10,r2,8214 <_malloc_r+0x798>
    80a4:	190000cc 	andi	r4,r3,3
    80a8:	50bffe04 	addi	r2,r10,-8
    80ac:	203ffa1e 	bne	r4,zero,8098 <__alt_mem_Flash_flash_data+0xf4008098>
    80b0:	98800117 	ldw	r2,4(r19)
    80b4:	0146303a 	nor	r3,zero,r5
    80b8:	1884703a 	and	r2,r3,r2
    80bc:	98800115 	stw	r2,4(r19)
    80c0:	294b883a 	add	r5,r5,r5
    80c4:	117f2e36 	bltu	r2,r5,7d80 <__alt_mem_Flash_flash_data+0xf4007d80>
    80c8:	283f2d26 	beq	r5,zero,7d80 <__alt_mem_Flash_flash_data+0xf4007d80>
    80cc:	1146703a 	and	r3,r2,r5
    80d0:	1800521e 	bne	r3,zero,821c <_malloc_r+0x7a0>
    80d4:	6007883a 	mov	r3,r12
    80d8:	294b883a 	add	r5,r5,r5
    80dc:	1148703a 	and	r4,r2,r5
    80e0:	18c00104 	addi	r3,r3,4
    80e4:	203ffc26 	beq	r4,zero,80d8 <__alt_mem_Flash_flash_data+0xf40080d8>
    80e8:	003ef006 	br	7cac <__alt_mem_Flash_flash_data+0xf4007cac>
    80ec:	00805504 	movi	r2,340
    80f0:	10c01336 	bltu	r2,r3,8140 <_malloc_r+0x6c4>
    80f4:	8806d3fa 	srli	r3,r17,15
    80f8:	19c01dc4 	addi	r7,r3,119
    80fc:	39cb883a 	add	r5,r7,r7
    8100:	003ea206 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    8104:	00c40004 	movi	r3,4096
    8108:	003f4d06 	br	7e40 <__alt_mem_Flash_flash_data+0xf4007e40>
    810c:	00800044 	movi	r2,1
    8110:	a0800115 	stw	r2,4(r20)
    8114:	a021883a 	mov	r16,r20
    8118:	0007883a 	mov	r3,zero
    811c:	003f7506 	br	7ef4 <__alt_mem_Flash_flash_data+0xf4007ef4>
    8120:	200bd0ba 	srai	r5,r4,2
    8124:	01800044 	movi	r6,1
    8128:	41000117 	ldw	r4,4(r8)
    812c:	314a983a 	sll	r5,r6,r5
    8130:	100d883a 	mov	r6,r2
    8134:	2908b03a 	or	r4,r5,r4
    8138:	41000115 	stw	r4,4(r8)
    813c:	003f9d06 	br	7fb4 <__alt_mem_Flash_flash_data+0xf4007fb4>
    8140:	00815504 	movi	r2,1364
    8144:	10c01336 	bltu	r2,r3,8194 <_malloc_r+0x718>
    8148:	8806d4ba 	srli	r3,r17,18
    814c:	19c01f04 	addi	r7,r3,124
    8150:	39cb883a 	add	r5,r7,r7
    8154:	003e8d06 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    8158:	ad400404 	addi	r21,r21,16
    815c:	003f1d06 	br	7dd4 <__alt_mem_Flash_flash_data+0xf4007dd4>
    8160:	01001504 	movi	r4,84
    8164:	20801c36 	bltu	r4,r2,81d8 <_malloc_r+0x75c>
    8168:	3804d33a 	srli	r2,r7,12
    816c:	11001b84 	addi	r4,r2,110
    8170:	210b883a 	add	r5,r4,r4
    8174:	003f8006 	br	7f78 <__alt_mem_Flash_flash_data+0xf4007f78>
    8178:	3083ffcc 	andi	r2,r6,4095
    817c:	103f241e 	bne	r2,zero,7e10 <__alt_mem_Flash_flash_data+0xf4007e10>
    8180:	99000217 	ldw	r4,8(r19)
    8184:	ad85883a 	add	r2,r21,r22
    8188:	10800054 	ori	r2,r2,1
    818c:	20800115 	stw	r2,4(r4)
    8190:	003f4a06 	br	7ebc <__alt_mem_Flash_flash_data+0xf4007ebc>
    8194:	01403f04 	movi	r5,252
    8198:	01c01f84 	movi	r7,126
    819c:	003e7b06 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    81a0:	00c00044 	movi	r3,1
    81a4:	002b883a 	mov	r21,zero
    81a8:	003f3006 	br	7e6c <__alt_mem_Flash_flash_data+0xf4007e6c>
    81ac:	008000b4 	movhi	r2,2
    81b0:	10bac204 	addi	r2,r2,-5368
    81b4:	15000015 	stw	r20,0(r2)
    81b8:	003f1b06 	br	7e28 <__alt_mem_Flash_flash_data+0xf4007e28>
    81bc:	9009883a 	mov	r4,r18
    81c0:	81400204 	addi	r5,r16,8
    81c4:	0006eac0 	call	6eac <_free_r>
    81c8:	008000b4 	movhi	r2,2
    81cc:	1082f304 	addi	r2,r2,3020
    81d0:	10c00017 	ldw	r3,0(r2)
    81d4:	003f3906 	br	7ebc <__alt_mem_Flash_flash_data+0xf4007ebc>
    81d8:	01005504 	movi	r4,340
    81dc:	20800436 	bltu	r4,r2,81f0 <_malloc_r+0x774>
    81e0:	3804d3fa 	srli	r2,r7,15
    81e4:	11001dc4 	addi	r4,r2,119
    81e8:	210b883a 	add	r5,r4,r4
    81ec:	003f6206 	br	7f78 <__alt_mem_Flash_flash_data+0xf4007f78>
    81f0:	01015504 	movi	r4,1364
    81f4:	20800436 	bltu	r4,r2,8208 <_malloc_r+0x78c>
    81f8:	3804d4ba 	srli	r2,r7,18
    81fc:	11001f04 	addi	r4,r2,124
    8200:	210b883a 	add	r5,r4,r4
    8204:	003f5c06 	br	7f78 <__alt_mem_Flash_flash_data+0xf4007f78>
    8208:	01403f04 	movi	r5,252
    820c:	01001f84 	movi	r4,126
    8210:	003f5906 	br	7f78 <__alt_mem_Flash_flash_data+0xf4007f78>
    8214:	98800117 	ldw	r2,4(r19)
    8218:	003fa906 	br	80c0 <__alt_mem_Flash_flash_data+0xf40080c0>
    821c:	6007883a 	mov	r3,r12
    8220:	003ea206 	br	7cac <__alt_mem_Flash_flash_data+0xf4007cac>

00008224 <memchr>:
    8224:	208000cc 	andi	r2,r4,3
    8228:	280f883a 	mov	r7,r5
    822c:	10003526 	beq	r2,zero,8304 <memchr+0xe0>
    8230:	30bfffc4 	addi	r2,r6,-1
    8234:	30001b26 	beq	r6,zero,82a4 <memchr+0x80>
    8238:	21800003 	ldbu	r6,0(r4)
    823c:	28c03fcc 	andi	r3,r5,255
    8240:	30c01a26 	beq	r6,r3,82ac <memchr+0x88>
    8244:	180d883a 	mov	r6,r3
    8248:	00000406 	br	825c <memchr+0x38>
    824c:	10001526 	beq	r2,zero,82a4 <memchr+0x80>
    8250:	20c00003 	ldbu	r3,0(r4)
    8254:	10bfffc4 	addi	r2,r2,-1
    8258:	19801426 	beq	r3,r6,82ac <memchr+0x88>
    825c:	21000044 	addi	r4,r4,1
    8260:	20c000cc 	andi	r3,r4,3
    8264:	183ff91e 	bne	r3,zero,824c <__alt_mem_Flash_flash_data+0xf400824c>
    8268:	024000c4 	movi	r9,3
    826c:	48801136 	bltu	r9,r2,82b4 <memchr+0x90>
    8270:	10000c26 	beq	r2,zero,82a4 <memchr+0x80>
    8274:	20c00003 	ldbu	r3,0(r4)
    8278:	29403fcc 	andi	r5,r5,255
    827c:	19400b26 	beq	r3,r5,82ac <memchr+0x88>
    8280:	20c00044 	addi	r3,r4,1
    8284:	2085883a 	add	r2,r4,r2
    8288:	39803fcc 	andi	r6,r7,255
    828c:	00000306 	br	829c <memchr+0x78>
    8290:	18c00044 	addi	r3,r3,1
    8294:	197fffc3 	ldbu	r5,-1(r3)
    8298:	29800426 	beq	r5,r6,82ac <memchr+0x88>
    829c:	1809883a 	mov	r4,r3
    82a0:	18bffb1e 	bne	r3,r2,8290 <__alt_mem_Flash_flash_data+0xf4008290>
    82a4:	0005883a 	mov	r2,zero
    82a8:	f800283a 	ret
    82ac:	2005883a 	mov	r2,r4
    82b0:	f800283a 	ret
    82b4:	28c03fcc 	andi	r3,r5,255
    82b8:	1810923a 	slli	r8,r3,8
    82bc:	02ffbff4 	movhi	r11,65279
    82c0:	02a02074 	movhi	r10,32897
    82c4:	40c6b03a 	or	r3,r8,r3
    82c8:	1810943a 	slli	r8,r3,16
    82cc:	5affbfc4 	addi	r11,r11,-257
    82d0:	52a02004 	addi	r10,r10,-32640
    82d4:	40d0b03a 	or	r8,r8,r3
    82d8:	20c00017 	ldw	r3,0(r4)
    82dc:	40c6f03a 	xor	r3,r8,r3
    82e0:	1acd883a 	add	r6,r3,r11
    82e4:	00c6303a 	nor	r3,zero,r3
    82e8:	30c6703a 	and	r3,r6,r3
    82ec:	1a86703a 	and	r3,r3,r10
    82f0:	183fdf1e 	bne	r3,zero,8270 <__alt_mem_Flash_flash_data+0xf4008270>
    82f4:	10bfff04 	addi	r2,r2,-4
    82f8:	21000104 	addi	r4,r4,4
    82fc:	48bff636 	bltu	r9,r2,82d8 <__alt_mem_Flash_flash_data+0xf40082d8>
    8300:	003fdb06 	br	8270 <__alt_mem_Flash_flash_data+0xf4008270>
    8304:	3005883a 	mov	r2,r6
    8308:	003fd706 	br	8268 <__alt_mem_Flash_flash_data+0xf4008268>

0000830c <memcpy>:
    830c:	deffff04 	addi	sp,sp,-4
    8310:	dc000015 	stw	r16,0(sp)
    8314:	00c003c4 	movi	r3,15
    8318:	2005883a 	mov	r2,r4
    831c:	1980432e 	bgeu	r3,r6,842c <memcpy+0x120>
    8320:	2146b03a 	or	r3,r4,r5
    8324:	18c000cc 	andi	r3,r3,3
    8328:	1800421e 	bne	r3,zero,8434 <memcpy+0x128>
    832c:	343ffc04 	addi	r16,r6,-16
    8330:	8020d13a 	srli	r16,r16,4
    8334:	28c00104 	addi	r3,r5,4
    8338:	23400104 	addi	r13,r4,4
    833c:	801e913a 	slli	r15,r16,4
    8340:	2b000204 	addi	r12,r5,8
    8344:	22c00204 	addi	r11,r4,8
    8348:	7bc00504 	addi	r15,r15,20
    834c:	2a800304 	addi	r10,r5,12
    8350:	22400304 	addi	r9,r4,12
    8354:	2bdf883a 	add	r15,r5,r15
    8358:	2811883a 	mov	r8,r5
    835c:	200f883a 	mov	r7,r4
    8360:	41000017 	ldw	r4,0(r8)
    8364:	39c00404 	addi	r7,r7,16
    8368:	18c00404 	addi	r3,r3,16
    836c:	393ffc15 	stw	r4,-16(r7)
    8370:	1bbffc17 	ldw	r14,-16(r3)
    8374:	6b400404 	addi	r13,r13,16
    8378:	5ac00404 	addi	r11,r11,16
    837c:	6bbffc15 	stw	r14,-16(r13)
    8380:	63800017 	ldw	r14,0(r12)
    8384:	4a400404 	addi	r9,r9,16
    8388:	42000404 	addi	r8,r8,16
    838c:	5bbffc15 	stw	r14,-16(r11)
    8390:	53800017 	ldw	r14,0(r10)
    8394:	63000404 	addi	r12,r12,16
    8398:	52800404 	addi	r10,r10,16
    839c:	4bbffc15 	stw	r14,-16(r9)
    83a0:	1bffef1e 	bne	r3,r15,8360 <__alt_mem_Flash_flash_data+0xf4008360>
    83a4:	81c00044 	addi	r7,r16,1
    83a8:	380e913a 	slli	r7,r7,4
    83ac:	310003cc 	andi	r4,r6,15
    83b0:	02c000c4 	movi	r11,3
    83b4:	11c7883a 	add	r3,r2,r7
    83b8:	29cb883a 	add	r5,r5,r7
    83bc:	59001f2e 	bgeu	r11,r4,843c <memcpy+0x130>
    83c0:	1813883a 	mov	r9,r3
    83c4:	2811883a 	mov	r8,r5
    83c8:	200f883a 	mov	r7,r4
    83cc:	42800017 	ldw	r10,0(r8)
    83d0:	4a400104 	addi	r9,r9,4
    83d4:	39ffff04 	addi	r7,r7,-4
    83d8:	4abfff15 	stw	r10,-4(r9)
    83dc:	42000104 	addi	r8,r8,4
    83e0:	59fffa36 	bltu	r11,r7,83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    83e4:	213fff04 	addi	r4,r4,-4
    83e8:	2008d0ba 	srli	r4,r4,2
    83ec:	318000cc 	andi	r6,r6,3
    83f0:	21000044 	addi	r4,r4,1
    83f4:	2109883a 	add	r4,r4,r4
    83f8:	2109883a 	add	r4,r4,r4
    83fc:	1907883a 	add	r3,r3,r4
    8400:	290b883a 	add	r5,r5,r4
    8404:	30000626 	beq	r6,zero,8420 <memcpy+0x114>
    8408:	198d883a 	add	r6,r3,r6
    840c:	29c00003 	ldbu	r7,0(r5)
    8410:	18c00044 	addi	r3,r3,1
    8414:	29400044 	addi	r5,r5,1
    8418:	19ffffc5 	stb	r7,-1(r3)
    841c:	19bffb1e 	bne	r3,r6,840c <__alt_mem_Flash_flash_data+0xf400840c>
    8420:	dc000017 	ldw	r16,0(sp)
    8424:	dec00104 	addi	sp,sp,4
    8428:	f800283a 	ret
    842c:	2007883a 	mov	r3,r4
    8430:	003ff406 	br	8404 <__alt_mem_Flash_flash_data+0xf4008404>
    8434:	2007883a 	mov	r3,r4
    8438:	003ff306 	br	8408 <__alt_mem_Flash_flash_data+0xf4008408>
    843c:	200d883a 	mov	r6,r4
    8440:	003ff006 	br	8404 <__alt_mem_Flash_flash_data+0xf4008404>

00008444 <memmove>:
    8444:	2005883a 	mov	r2,r4
    8448:	29000b2e 	bgeu	r5,r4,8478 <memmove+0x34>
    844c:	298f883a 	add	r7,r5,r6
    8450:	21c0092e 	bgeu	r4,r7,8478 <memmove+0x34>
    8454:	2187883a 	add	r3,r4,r6
    8458:	198bc83a 	sub	r5,r3,r6
    845c:	30004b26 	beq	r6,zero,858c <memmove+0x148>
    8460:	39ffffc4 	addi	r7,r7,-1
    8464:	39000003 	ldbu	r4,0(r7)
    8468:	18ffffc4 	addi	r3,r3,-1
    846c:	19000005 	stb	r4,0(r3)
    8470:	197ffb1e 	bne	r3,r5,8460 <__alt_mem_Flash_flash_data+0xf4008460>
    8474:	f800283a 	ret
    8478:	00c003c4 	movi	r3,15
    847c:	1980412e 	bgeu	r3,r6,8584 <memmove+0x140>
    8480:	1146b03a 	or	r3,r2,r5
    8484:	18c000cc 	andi	r3,r3,3
    8488:	1800411e 	bne	r3,zero,8590 <memmove+0x14c>
    848c:	33fffc04 	addi	r15,r6,-16
    8490:	781ed13a 	srli	r15,r15,4
    8494:	28c00104 	addi	r3,r5,4
    8498:	13400104 	addi	r13,r2,4
    849c:	781c913a 	slli	r14,r15,4
    84a0:	2b000204 	addi	r12,r5,8
    84a4:	12c00204 	addi	r11,r2,8
    84a8:	73800504 	addi	r14,r14,20
    84ac:	2a800304 	addi	r10,r5,12
    84b0:	12400304 	addi	r9,r2,12
    84b4:	2b9d883a 	add	r14,r5,r14
    84b8:	2811883a 	mov	r8,r5
    84bc:	100f883a 	mov	r7,r2
    84c0:	41000017 	ldw	r4,0(r8)
    84c4:	39c00404 	addi	r7,r7,16
    84c8:	18c00404 	addi	r3,r3,16
    84cc:	393ffc15 	stw	r4,-16(r7)
    84d0:	193ffc17 	ldw	r4,-16(r3)
    84d4:	6b400404 	addi	r13,r13,16
    84d8:	5ac00404 	addi	r11,r11,16
    84dc:	693ffc15 	stw	r4,-16(r13)
    84e0:	61000017 	ldw	r4,0(r12)
    84e4:	4a400404 	addi	r9,r9,16
    84e8:	42000404 	addi	r8,r8,16
    84ec:	593ffc15 	stw	r4,-16(r11)
    84f0:	51000017 	ldw	r4,0(r10)
    84f4:	63000404 	addi	r12,r12,16
    84f8:	52800404 	addi	r10,r10,16
    84fc:	493ffc15 	stw	r4,-16(r9)
    8500:	1bbfef1e 	bne	r3,r14,84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    8504:	79000044 	addi	r4,r15,1
    8508:	2008913a 	slli	r4,r4,4
    850c:	328003cc 	andi	r10,r6,15
    8510:	02c000c4 	movi	r11,3
    8514:	1107883a 	add	r3,r2,r4
    8518:	290b883a 	add	r5,r5,r4
    851c:	5a801e2e 	bgeu	r11,r10,8598 <memmove+0x154>
    8520:	1813883a 	mov	r9,r3
    8524:	2811883a 	mov	r8,r5
    8528:	500f883a 	mov	r7,r10
    852c:	41000017 	ldw	r4,0(r8)
    8530:	4a400104 	addi	r9,r9,4
    8534:	39ffff04 	addi	r7,r7,-4
    8538:	493fff15 	stw	r4,-4(r9)
    853c:	42000104 	addi	r8,r8,4
    8540:	59fffa36 	bltu	r11,r7,852c <__alt_mem_Flash_flash_data+0xf400852c>
    8544:	513fff04 	addi	r4,r10,-4
    8548:	2008d0ba 	srli	r4,r4,2
    854c:	318000cc 	andi	r6,r6,3
    8550:	21000044 	addi	r4,r4,1
    8554:	2109883a 	add	r4,r4,r4
    8558:	2109883a 	add	r4,r4,r4
    855c:	1907883a 	add	r3,r3,r4
    8560:	290b883a 	add	r5,r5,r4
    8564:	30000926 	beq	r6,zero,858c <memmove+0x148>
    8568:	198d883a 	add	r6,r3,r6
    856c:	29c00003 	ldbu	r7,0(r5)
    8570:	18c00044 	addi	r3,r3,1
    8574:	29400044 	addi	r5,r5,1
    8578:	19ffffc5 	stb	r7,-1(r3)
    857c:	19bffb1e 	bne	r3,r6,856c <__alt_mem_Flash_flash_data+0xf400856c>
    8580:	f800283a 	ret
    8584:	1007883a 	mov	r3,r2
    8588:	003ff606 	br	8564 <__alt_mem_Flash_flash_data+0xf4008564>
    858c:	f800283a 	ret
    8590:	1007883a 	mov	r3,r2
    8594:	003ff406 	br	8568 <__alt_mem_Flash_flash_data+0xf4008568>
    8598:	500d883a 	mov	r6,r10
    859c:	003ff106 	br	8564 <__alt_mem_Flash_flash_data+0xf4008564>

000085a0 <_Balloc>:
    85a0:	20801317 	ldw	r2,76(r4)
    85a4:	defffc04 	addi	sp,sp,-16
    85a8:	dc400115 	stw	r17,4(sp)
    85ac:	dc000015 	stw	r16,0(sp)
    85b0:	dfc00315 	stw	ra,12(sp)
    85b4:	dc800215 	stw	r18,8(sp)
    85b8:	2023883a 	mov	r17,r4
    85bc:	2821883a 	mov	r16,r5
    85c0:	10000f26 	beq	r2,zero,8600 <_Balloc+0x60>
    85c4:	8407883a 	add	r3,r16,r16
    85c8:	18c7883a 	add	r3,r3,r3
    85cc:	10c7883a 	add	r3,r2,r3
    85d0:	18800017 	ldw	r2,0(r3)
    85d4:	10001126 	beq	r2,zero,861c <_Balloc+0x7c>
    85d8:	11000017 	ldw	r4,0(r2)
    85dc:	19000015 	stw	r4,0(r3)
    85e0:	10000415 	stw	zero,16(r2)
    85e4:	10000315 	stw	zero,12(r2)
    85e8:	dfc00317 	ldw	ra,12(sp)
    85ec:	dc800217 	ldw	r18,8(sp)
    85f0:	dc400117 	ldw	r17,4(sp)
    85f4:	dc000017 	ldw	r16,0(sp)
    85f8:	dec00404 	addi	sp,sp,16
    85fc:	f800283a 	ret
    8600:	01400104 	movi	r5,4
    8604:	01800844 	movi	r6,33
    8608:	000c4240 	call	c424 <_calloc_r>
    860c:	88801315 	stw	r2,76(r17)
    8610:	103fec1e 	bne	r2,zero,85c4 <__alt_mem_Flash_flash_data+0xf40085c4>
    8614:	0005883a 	mov	r2,zero
    8618:	003ff306 	br	85e8 <__alt_mem_Flash_flash_data+0xf40085e8>
    861c:	01400044 	movi	r5,1
    8620:	2c24983a 	sll	r18,r5,r16
    8624:	8809883a 	mov	r4,r17
    8628:	91800144 	addi	r6,r18,5
    862c:	318d883a 	add	r6,r6,r6
    8630:	318d883a 	add	r6,r6,r6
    8634:	000c4240 	call	c424 <_calloc_r>
    8638:	103ff626 	beq	r2,zero,8614 <__alt_mem_Flash_flash_data+0xf4008614>
    863c:	14000115 	stw	r16,4(r2)
    8640:	14800215 	stw	r18,8(r2)
    8644:	003fe606 	br	85e0 <__alt_mem_Flash_flash_data+0xf40085e0>

00008648 <_Bfree>:
    8648:	28000826 	beq	r5,zero,866c <_Bfree+0x24>
    864c:	28c00117 	ldw	r3,4(r5)
    8650:	20801317 	ldw	r2,76(r4)
    8654:	18c7883a 	add	r3,r3,r3
    8658:	18c7883a 	add	r3,r3,r3
    865c:	10c5883a 	add	r2,r2,r3
    8660:	10c00017 	ldw	r3,0(r2)
    8664:	28c00015 	stw	r3,0(r5)
    8668:	11400015 	stw	r5,0(r2)
    866c:	f800283a 	ret

00008670 <__multadd>:
    8670:	defffa04 	addi	sp,sp,-24
    8674:	dc000115 	stw	r16,4(sp)
    8678:	2c000417 	ldw	r16,16(r5)
    867c:	dc800315 	stw	r18,12(sp)
    8680:	dc400215 	stw	r17,8(sp)
    8684:	dfc00515 	stw	ra,20(sp)
    8688:	dcc00415 	stw	r19,16(sp)
    868c:	2823883a 	mov	r17,r5
    8690:	2025883a 	mov	r18,r4
    8694:	2a400504 	addi	r9,r5,20
    8698:	0015883a 	mov	r10,zero
    869c:	4a000017 	ldw	r8,0(r9)
    86a0:	4a400104 	addi	r9,r9,4
    86a4:	52800044 	addi	r10,r10,1
    86a8:	40ffffcc 	andi	r3,r8,65535
    86ac:	1987383a 	mul	r3,r3,r6
    86b0:	4010d43a 	srli	r8,r8,16
    86b4:	19cf883a 	add	r7,r3,r7
    86b8:	4191383a 	mul	r8,r8,r6
    86bc:	3816d43a 	srli	r11,r7,16
    86c0:	38ffffcc 	andi	r3,r7,65535
    86c4:	5a0f883a 	add	r7,r11,r8
    86c8:	3810943a 	slli	r8,r7,16
    86cc:	380ed43a 	srli	r7,r7,16
    86d0:	40c7883a 	add	r3,r8,r3
    86d4:	48ffff15 	stw	r3,-4(r9)
    86d8:	543ff016 	blt	r10,r16,869c <__alt_mem_Flash_flash_data+0xf400869c>
    86dc:	38000926 	beq	r7,zero,8704 <__multadd+0x94>
    86e0:	88800217 	ldw	r2,8(r17)
    86e4:	80800f0e 	bge	r16,r2,8724 <__multadd+0xb4>
    86e8:	80800144 	addi	r2,r16,5
    86ec:	1085883a 	add	r2,r2,r2
    86f0:	1085883a 	add	r2,r2,r2
    86f4:	8885883a 	add	r2,r17,r2
    86f8:	11c00015 	stw	r7,0(r2)
    86fc:	84000044 	addi	r16,r16,1
    8700:	8c000415 	stw	r16,16(r17)
    8704:	8805883a 	mov	r2,r17
    8708:	dfc00517 	ldw	ra,20(sp)
    870c:	dcc00417 	ldw	r19,16(sp)
    8710:	dc800317 	ldw	r18,12(sp)
    8714:	dc400217 	ldw	r17,8(sp)
    8718:	dc000117 	ldw	r16,4(sp)
    871c:	dec00604 	addi	sp,sp,24
    8720:	f800283a 	ret
    8724:	89400117 	ldw	r5,4(r17)
    8728:	9009883a 	mov	r4,r18
    872c:	d9c00015 	stw	r7,0(sp)
    8730:	29400044 	addi	r5,r5,1
    8734:	00085a00 	call	85a0 <_Balloc>
    8738:	89800417 	ldw	r6,16(r17)
    873c:	11000304 	addi	r4,r2,12
    8740:	89400304 	addi	r5,r17,12
    8744:	31800084 	addi	r6,r6,2
    8748:	318d883a 	add	r6,r6,r6
    874c:	318d883a 	add	r6,r6,r6
    8750:	1027883a 	mov	r19,r2
    8754:	000830c0 	call	830c <memcpy>
    8758:	d9c00017 	ldw	r7,0(sp)
    875c:	88000a26 	beq	r17,zero,8788 <__multadd+0x118>
    8760:	89000117 	ldw	r4,4(r17)
    8764:	90c01317 	ldw	r3,76(r18)
    8768:	2109883a 	add	r4,r4,r4
    876c:	2109883a 	add	r4,r4,r4
    8770:	1907883a 	add	r3,r3,r4
    8774:	18800017 	ldw	r2,0(r3)
    8778:	88800015 	stw	r2,0(r17)
    877c:	1c400015 	stw	r17,0(r3)
    8780:	9823883a 	mov	r17,r19
    8784:	003fd806 	br	86e8 <__alt_mem_Flash_flash_data+0xf40086e8>
    8788:	9823883a 	mov	r17,r19
    878c:	003fd606 	br	86e8 <__alt_mem_Flash_flash_data+0xf40086e8>

00008790 <__s2b>:
    8790:	defff904 	addi	sp,sp,-28
    8794:	dc400115 	stw	r17,4(sp)
    8798:	dc000015 	stw	r16,0(sp)
    879c:	2023883a 	mov	r17,r4
    87a0:	2821883a 	mov	r16,r5
    87a4:	39000204 	addi	r4,r7,8
    87a8:	01400244 	movi	r5,9
    87ac:	dcc00315 	stw	r19,12(sp)
    87b0:	dc800215 	stw	r18,8(sp)
    87b4:	dfc00615 	stw	ra,24(sp)
    87b8:	dd400515 	stw	r21,20(sp)
    87bc:	dd000415 	stw	r20,16(sp)
    87c0:	3825883a 	mov	r18,r7
    87c4:	3027883a 	mov	r19,r6
    87c8:	000d8280 	call	d828 <__divsi3>
    87cc:	00c00044 	movi	r3,1
    87d0:	000b883a 	mov	r5,zero
    87d4:	1880030e 	bge	r3,r2,87e4 <__s2b+0x54>
    87d8:	18c7883a 	add	r3,r3,r3
    87dc:	29400044 	addi	r5,r5,1
    87e0:	18bffd16 	blt	r3,r2,87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    87e4:	8809883a 	mov	r4,r17
    87e8:	00085a00 	call	85a0 <_Balloc>
    87ec:	d8c00717 	ldw	r3,28(sp)
    87f0:	10c00515 	stw	r3,20(r2)
    87f4:	00c00044 	movi	r3,1
    87f8:	10c00415 	stw	r3,16(r2)
    87fc:	00c00244 	movi	r3,9
    8800:	1cc0210e 	bge	r3,r19,8888 <__s2b+0xf8>
    8804:	80eb883a 	add	r21,r16,r3
    8808:	a829883a 	mov	r20,r21
    880c:	84e1883a 	add	r16,r16,r19
    8810:	a1c00007 	ldb	r7,0(r20)
    8814:	8809883a 	mov	r4,r17
    8818:	a5000044 	addi	r20,r20,1
    881c:	100b883a 	mov	r5,r2
    8820:	01800284 	movi	r6,10
    8824:	39fff404 	addi	r7,r7,-48
    8828:	00086700 	call	8670 <__multadd>
    882c:	a43ff81e 	bne	r20,r16,8810 <__alt_mem_Flash_flash_data+0xf4008810>
    8830:	ace1883a 	add	r16,r21,r19
    8834:	843ffe04 	addi	r16,r16,-8
    8838:	9c800a0e 	bge	r19,r18,8864 <__s2b+0xd4>
    883c:	94e5c83a 	sub	r18,r18,r19
    8840:	84a5883a 	add	r18,r16,r18
    8844:	81c00007 	ldb	r7,0(r16)
    8848:	8809883a 	mov	r4,r17
    884c:	84000044 	addi	r16,r16,1
    8850:	100b883a 	mov	r5,r2
    8854:	01800284 	movi	r6,10
    8858:	39fff404 	addi	r7,r7,-48
    885c:	00086700 	call	8670 <__multadd>
    8860:	84bff81e 	bne	r16,r18,8844 <__alt_mem_Flash_flash_data+0xf4008844>
    8864:	dfc00617 	ldw	ra,24(sp)
    8868:	dd400517 	ldw	r21,20(sp)
    886c:	dd000417 	ldw	r20,16(sp)
    8870:	dcc00317 	ldw	r19,12(sp)
    8874:	dc800217 	ldw	r18,8(sp)
    8878:	dc400117 	ldw	r17,4(sp)
    887c:	dc000017 	ldw	r16,0(sp)
    8880:	dec00704 	addi	sp,sp,28
    8884:	f800283a 	ret
    8888:	84000284 	addi	r16,r16,10
    888c:	1827883a 	mov	r19,r3
    8890:	003fe906 	br	8838 <__alt_mem_Flash_flash_data+0xf4008838>

00008894 <__hi0bits>:
    8894:	20bfffec 	andhi	r2,r4,65535
    8898:	1000141e 	bne	r2,zero,88ec <__hi0bits+0x58>
    889c:	2008943a 	slli	r4,r4,16
    88a0:	00800404 	movi	r2,16
    88a4:	20ffc02c 	andhi	r3,r4,65280
    88a8:	1800021e 	bne	r3,zero,88b4 <__hi0bits+0x20>
    88ac:	2008923a 	slli	r4,r4,8
    88b0:	10800204 	addi	r2,r2,8
    88b4:	20fc002c 	andhi	r3,r4,61440
    88b8:	1800021e 	bne	r3,zero,88c4 <__hi0bits+0x30>
    88bc:	2008913a 	slli	r4,r4,4
    88c0:	10800104 	addi	r2,r2,4
    88c4:	20f0002c 	andhi	r3,r4,49152
    88c8:	1800031e 	bne	r3,zero,88d8 <__hi0bits+0x44>
    88cc:	2109883a 	add	r4,r4,r4
    88d0:	10800084 	addi	r2,r2,2
    88d4:	2109883a 	add	r4,r4,r4
    88d8:	20000316 	blt	r4,zero,88e8 <__hi0bits+0x54>
    88dc:	2110002c 	andhi	r4,r4,16384
    88e0:	2000041e 	bne	r4,zero,88f4 <__hi0bits+0x60>
    88e4:	00800804 	movi	r2,32
    88e8:	f800283a 	ret
    88ec:	0005883a 	mov	r2,zero
    88f0:	003fec06 	br	88a4 <__alt_mem_Flash_flash_data+0xf40088a4>
    88f4:	10800044 	addi	r2,r2,1
    88f8:	f800283a 	ret

000088fc <__lo0bits>:
    88fc:	20c00017 	ldw	r3,0(r4)
    8900:	188001cc 	andi	r2,r3,7
    8904:	10000826 	beq	r2,zero,8928 <__lo0bits+0x2c>
    8908:	1880004c 	andi	r2,r3,1
    890c:	1000211e 	bne	r2,zero,8994 <__lo0bits+0x98>
    8910:	1880008c 	andi	r2,r3,2
    8914:	1000211e 	bne	r2,zero,899c <__lo0bits+0xa0>
    8918:	1806d0ba 	srli	r3,r3,2
    891c:	00800084 	movi	r2,2
    8920:	20c00015 	stw	r3,0(r4)
    8924:	f800283a 	ret
    8928:	18bfffcc 	andi	r2,r3,65535
    892c:	10001326 	beq	r2,zero,897c <__lo0bits+0x80>
    8930:	0005883a 	mov	r2,zero
    8934:	19403fcc 	andi	r5,r3,255
    8938:	2800021e 	bne	r5,zero,8944 <__lo0bits+0x48>
    893c:	1806d23a 	srli	r3,r3,8
    8940:	10800204 	addi	r2,r2,8
    8944:	194003cc 	andi	r5,r3,15
    8948:	2800021e 	bne	r5,zero,8954 <__lo0bits+0x58>
    894c:	1806d13a 	srli	r3,r3,4
    8950:	10800104 	addi	r2,r2,4
    8954:	194000cc 	andi	r5,r3,3
    8958:	2800021e 	bne	r5,zero,8964 <__lo0bits+0x68>
    895c:	1806d0ba 	srli	r3,r3,2
    8960:	10800084 	addi	r2,r2,2
    8964:	1940004c 	andi	r5,r3,1
    8968:	2800081e 	bne	r5,zero,898c <__lo0bits+0x90>
    896c:	1806d07a 	srli	r3,r3,1
    8970:	1800051e 	bne	r3,zero,8988 <__lo0bits+0x8c>
    8974:	00800804 	movi	r2,32
    8978:	f800283a 	ret
    897c:	1806d43a 	srli	r3,r3,16
    8980:	00800404 	movi	r2,16
    8984:	003feb06 	br	8934 <__alt_mem_Flash_flash_data+0xf4008934>
    8988:	10800044 	addi	r2,r2,1
    898c:	20c00015 	stw	r3,0(r4)
    8990:	f800283a 	ret
    8994:	0005883a 	mov	r2,zero
    8998:	f800283a 	ret
    899c:	1806d07a 	srli	r3,r3,1
    89a0:	00800044 	movi	r2,1
    89a4:	20c00015 	stw	r3,0(r4)
    89a8:	f800283a 	ret

000089ac <__i2b>:
    89ac:	defffd04 	addi	sp,sp,-12
    89b0:	dc000015 	stw	r16,0(sp)
    89b4:	04000044 	movi	r16,1
    89b8:	dc400115 	stw	r17,4(sp)
    89bc:	2823883a 	mov	r17,r5
    89c0:	800b883a 	mov	r5,r16
    89c4:	dfc00215 	stw	ra,8(sp)
    89c8:	00085a00 	call	85a0 <_Balloc>
    89cc:	14400515 	stw	r17,20(r2)
    89d0:	14000415 	stw	r16,16(r2)
    89d4:	dfc00217 	ldw	ra,8(sp)
    89d8:	dc400117 	ldw	r17,4(sp)
    89dc:	dc000017 	ldw	r16,0(sp)
    89e0:	dec00304 	addi	sp,sp,12
    89e4:	f800283a 	ret

000089e8 <__multiply>:
    89e8:	defffa04 	addi	sp,sp,-24
    89ec:	dcc00315 	stw	r19,12(sp)
    89f0:	dc800215 	stw	r18,8(sp)
    89f4:	2cc00417 	ldw	r19,16(r5)
    89f8:	34800417 	ldw	r18,16(r6)
    89fc:	dd000415 	stw	r20,16(sp)
    8a00:	dc400115 	stw	r17,4(sp)
    8a04:	dfc00515 	stw	ra,20(sp)
    8a08:	dc000015 	stw	r16,0(sp)
    8a0c:	2829883a 	mov	r20,r5
    8a10:	3023883a 	mov	r17,r6
    8a14:	9c807016 	blt	r19,r18,8bd8 <__multiply+0x1f0>
    8a18:	9005883a 	mov	r2,r18
    8a1c:	9825883a 	mov	r18,r19
    8a20:	1027883a 	mov	r19,r2
    8a24:	a0800217 	ldw	r2,8(r20)
    8a28:	94e1883a 	add	r16,r18,r19
    8a2c:	a1400117 	ldw	r5,4(r20)
    8a30:	1400010e 	bge	r2,r16,8a38 <__multiply+0x50>
    8a34:	29400044 	addi	r5,r5,1
    8a38:	00085a00 	call	85a0 <_Balloc>
    8a3c:	8417883a 	add	r11,r16,r16
    8a40:	13000504 	addi	r12,r2,20
    8a44:	5ad7883a 	add	r11,r11,r11
    8a48:	62d7883a 	add	r11,r12,r11
    8a4c:	6007883a 	mov	r3,r12
    8a50:	62c0032e 	bgeu	r12,r11,8a60 <__multiply+0x78>
    8a54:	18000015 	stw	zero,0(r3)
    8a58:	18c00104 	addi	r3,r3,4
    8a5c:	1afffd36 	bltu	r3,r11,8a54 <__alt_mem_Flash_flash_data+0xf4008a54>
    8a60:	9ce7883a 	add	r19,r19,r19
    8a64:	94a5883a 	add	r18,r18,r18
    8a68:	89800504 	addi	r6,r17,20
    8a6c:	9ce7883a 	add	r19,r19,r19
    8a70:	a3800504 	addi	r14,r20,20
    8a74:	94a5883a 	add	r18,r18,r18
    8a78:	34db883a 	add	r13,r6,r19
    8a7c:	7495883a 	add	r10,r14,r18
    8a80:	3340422e 	bgeu	r6,r13,8b8c <__multiply+0x1a4>
    8a84:	34400017 	ldw	r17,0(r6)
    8a88:	8cbfffcc 	andi	r18,r17,65535
    8a8c:	90001b26 	beq	r18,zero,8afc <__multiply+0x114>
    8a90:	6013883a 	mov	r9,r12
    8a94:	7023883a 	mov	r17,r14
    8a98:	0011883a 	mov	r8,zero
    8a9c:	88c00017 	ldw	r3,0(r17)
    8aa0:	4bc00017 	ldw	r15,0(r9)
    8aa4:	8c400104 	addi	r17,r17,4
    8aa8:	19ffffcc 	andi	r7,r3,65535
    8aac:	3c8f383a 	mul	r7,r7,r18
    8ab0:	1808d43a 	srli	r4,r3,16
    8ab4:	797fffcc 	andi	r5,r15,65535
    8ab8:	29cb883a 	add	r5,r5,r7
    8abc:	2a0b883a 	add	r5,r5,r8
    8ac0:	2489383a 	mul	r4,r4,r18
    8ac4:	7806d43a 	srli	r3,r15,16
    8ac8:	2810d43a 	srli	r8,r5,16
    8acc:	297fffcc 	andi	r5,r5,65535
    8ad0:	1907883a 	add	r3,r3,r4
    8ad4:	1a07883a 	add	r3,r3,r8
    8ad8:	1808943a 	slli	r4,r3,16
    8adc:	480f883a 	mov	r7,r9
    8ae0:	1810d43a 	srli	r8,r3,16
    8ae4:	214ab03a 	or	r5,r4,r5
    8ae8:	49400015 	stw	r5,0(r9)
    8aec:	4a400104 	addi	r9,r9,4
    8af0:	8abfea36 	bltu	r17,r10,8a9c <__alt_mem_Flash_flash_data+0xf4008a9c>
    8af4:	3a000115 	stw	r8,4(r7)
    8af8:	34400017 	ldw	r17,0(r6)
    8afc:	8822d43a 	srli	r17,r17,16
    8b00:	88001f26 	beq	r17,zero,8b80 <__multiply+0x198>
    8b04:	60c00017 	ldw	r3,0(r12)
    8b08:	7013883a 	mov	r9,r14
    8b0c:	601f883a 	mov	r15,r12
    8b10:	1811883a 	mov	r8,r3
    8b14:	6027883a 	mov	r19,r12
    8b18:	000f883a 	mov	r7,zero
    8b1c:	00000106 	br	8b24 <__multiply+0x13c>
    8b20:	9027883a 	mov	r19,r18
    8b24:	4940000b 	ldhu	r5,0(r9)
    8b28:	4010d43a 	srli	r8,r8,16
    8b2c:	193fffcc 	andi	r4,r3,65535
    8b30:	2c4b383a 	mul	r5,r5,r17
    8b34:	7bc00104 	addi	r15,r15,4
    8b38:	4a400104 	addi	r9,r9,4
    8b3c:	2a0b883a 	add	r5,r5,r8
    8b40:	29cb883a 	add	r5,r5,r7
    8b44:	2806943a 	slli	r3,r5,16
    8b48:	9c800104 	addi	r18,r19,4
    8b4c:	280ad43a 	srli	r5,r5,16
    8b50:	1908b03a 	or	r4,r3,r4
    8b54:	793fff15 	stw	r4,-4(r15)
    8b58:	48ffff17 	ldw	r3,-4(r9)
    8b5c:	92000017 	ldw	r8,0(r18)
    8b60:	1806d43a 	srli	r3,r3,16
    8b64:	413fffcc 	andi	r4,r8,65535
    8b68:	1c47383a 	mul	r3,r3,r17
    8b6c:	1907883a 	add	r3,r3,r4
    8b70:	1947883a 	add	r3,r3,r5
    8b74:	180ed43a 	srli	r7,r3,16
    8b78:	4abfe936 	bltu	r9,r10,8b20 <__alt_mem_Flash_flash_data+0xf4008b20>
    8b7c:	98c00115 	stw	r3,4(r19)
    8b80:	31800104 	addi	r6,r6,4
    8b84:	63000104 	addi	r12,r12,4
    8b88:	337fbe36 	bltu	r6,r13,8a84 <__alt_mem_Flash_flash_data+0xf4008a84>
    8b8c:	0400090e 	bge	zero,r16,8bb4 <__multiply+0x1cc>
    8b90:	58ffff17 	ldw	r3,-4(r11)
    8b94:	5affff04 	addi	r11,r11,-4
    8b98:	18000326 	beq	r3,zero,8ba8 <__multiply+0x1c0>
    8b9c:	00000506 	br	8bb4 <__multiply+0x1cc>
    8ba0:	58c00017 	ldw	r3,0(r11)
    8ba4:	1800031e 	bne	r3,zero,8bb4 <__multiply+0x1cc>
    8ba8:	843fffc4 	addi	r16,r16,-1
    8bac:	5affff04 	addi	r11,r11,-4
    8bb0:	803ffb1e 	bne	r16,zero,8ba0 <__alt_mem_Flash_flash_data+0xf4008ba0>
    8bb4:	14000415 	stw	r16,16(r2)
    8bb8:	dfc00517 	ldw	ra,20(sp)
    8bbc:	dd000417 	ldw	r20,16(sp)
    8bc0:	dcc00317 	ldw	r19,12(sp)
    8bc4:	dc800217 	ldw	r18,8(sp)
    8bc8:	dc400117 	ldw	r17,4(sp)
    8bcc:	dc000017 	ldw	r16,0(sp)
    8bd0:	dec00604 	addi	sp,sp,24
    8bd4:	f800283a 	ret
    8bd8:	3029883a 	mov	r20,r6
    8bdc:	2823883a 	mov	r17,r5
    8be0:	003f9006 	br	8a24 <__alt_mem_Flash_flash_data+0xf4008a24>

00008be4 <__pow5mult>:
    8be4:	defffa04 	addi	sp,sp,-24
    8be8:	dcc00315 	stw	r19,12(sp)
    8bec:	dc800215 	stw	r18,8(sp)
    8bf0:	dc000015 	stw	r16,0(sp)
    8bf4:	dfc00515 	stw	ra,20(sp)
    8bf8:	dd000415 	stw	r20,16(sp)
    8bfc:	dc400115 	stw	r17,4(sp)
    8c00:	308000cc 	andi	r2,r6,3
    8c04:	3021883a 	mov	r16,r6
    8c08:	2027883a 	mov	r19,r4
    8c0c:	2825883a 	mov	r18,r5
    8c10:	10002e1e 	bne	r2,zero,8ccc <__pow5mult+0xe8>
    8c14:	8021d0ba 	srai	r16,r16,2
    8c18:	80001a26 	beq	r16,zero,8c84 <__pow5mult+0xa0>
    8c1c:	9c401217 	ldw	r17,72(r19)
    8c20:	8800061e 	bne	r17,zero,8c3c <__pow5mult+0x58>
    8c24:	00003406 	br	8cf8 <__pow5mult+0x114>
    8c28:	8021d07a 	srai	r16,r16,1
    8c2c:	80001526 	beq	r16,zero,8c84 <__pow5mult+0xa0>
    8c30:	88800017 	ldw	r2,0(r17)
    8c34:	10001c26 	beq	r2,zero,8ca8 <__pow5mult+0xc4>
    8c38:	1023883a 	mov	r17,r2
    8c3c:	80c0004c 	andi	r3,r16,1
    8c40:	183ff926 	beq	r3,zero,8c28 <__alt_mem_Flash_flash_data+0xf4008c28>
    8c44:	900b883a 	mov	r5,r18
    8c48:	880d883a 	mov	r6,r17
    8c4c:	9809883a 	mov	r4,r19
    8c50:	00089e80 	call	89e8 <__multiply>
    8c54:	90001b26 	beq	r18,zero,8cc4 <__pow5mult+0xe0>
    8c58:	91c00117 	ldw	r7,4(r18)
    8c5c:	98c01317 	ldw	r3,76(r19)
    8c60:	8021d07a 	srai	r16,r16,1
    8c64:	39cf883a 	add	r7,r7,r7
    8c68:	39cf883a 	add	r7,r7,r7
    8c6c:	19c7883a 	add	r3,r3,r7
    8c70:	19000017 	ldw	r4,0(r3)
    8c74:	91000015 	stw	r4,0(r18)
    8c78:	1c800015 	stw	r18,0(r3)
    8c7c:	1025883a 	mov	r18,r2
    8c80:	803feb1e 	bne	r16,zero,8c30 <__alt_mem_Flash_flash_data+0xf4008c30>
    8c84:	9005883a 	mov	r2,r18
    8c88:	dfc00517 	ldw	ra,20(sp)
    8c8c:	dd000417 	ldw	r20,16(sp)
    8c90:	dcc00317 	ldw	r19,12(sp)
    8c94:	dc800217 	ldw	r18,8(sp)
    8c98:	dc400117 	ldw	r17,4(sp)
    8c9c:	dc000017 	ldw	r16,0(sp)
    8ca0:	dec00604 	addi	sp,sp,24
    8ca4:	f800283a 	ret
    8ca8:	9809883a 	mov	r4,r19
    8cac:	880b883a 	mov	r5,r17
    8cb0:	880d883a 	mov	r6,r17
    8cb4:	00089e80 	call	89e8 <__multiply>
    8cb8:	88800015 	stw	r2,0(r17)
    8cbc:	10000015 	stw	zero,0(r2)
    8cc0:	003fdd06 	br	8c38 <__alt_mem_Flash_flash_data+0xf4008c38>
    8cc4:	1025883a 	mov	r18,r2
    8cc8:	003fd706 	br	8c28 <__alt_mem_Flash_flash_data+0xf4008c28>
    8ccc:	10bfffc4 	addi	r2,r2,-1
    8cd0:	1085883a 	add	r2,r2,r2
    8cd4:	00c000b4 	movhi	r3,2
    8cd8:	18f1be04 	addi	r3,r3,-14600
    8cdc:	1085883a 	add	r2,r2,r2
    8ce0:	1885883a 	add	r2,r3,r2
    8ce4:	11800017 	ldw	r6,0(r2)
    8ce8:	000f883a 	mov	r7,zero
    8cec:	00086700 	call	8670 <__multadd>
    8cf0:	1025883a 	mov	r18,r2
    8cf4:	003fc706 	br	8c14 <__alt_mem_Flash_flash_data+0xf4008c14>
    8cf8:	05000044 	movi	r20,1
    8cfc:	9809883a 	mov	r4,r19
    8d00:	a00b883a 	mov	r5,r20
    8d04:	00085a00 	call	85a0 <_Balloc>
    8d08:	1023883a 	mov	r17,r2
    8d0c:	00809c44 	movi	r2,625
    8d10:	88800515 	stw	r2,20(r17)
    8d14:	8d000415 	stw	r20,16(r17)
    8d18:	9c401215 	stw	r17,72(r19)
    8d1c:	88000015 	stw	zero,0(r17)
    8d20:	003fc606 	br	8c3c <__alt_mem_Flash_flash_data+0xf4008c3c>

00008d24 <__lshift>:
    8d24:	defff904 	addi	sp,sp,-28
    8d28:	dd000415 	stw	r20,16(sp)
    8d2c:	dcc00315 	stw	r19,12(sp)
    8d30:	3029d17a 	srai	r20,r6,5
    8d34:	2cc00417 	ldw	r19,16(r5)
    8d38:	28800217 	ldw	r2,8(r5)
    8d3c:	dd400515 	stw	r21,20(sp)
    8d40:	a4e7883a 	add	r19,r20,r19
    8d44:	dc800215 	stw	r18,8(sp)
    8d48:	dc400115 	stw	r17,4(sp)
    8d4c:	dc000015 	stw	r16,0(sp)
    8d50:	dfc00615 	stw	ra,24(sp)
    8d54:	9c000044 	addi	r16,r19,1
    8d58:	2823883a 	mov	r17,r5
    8d5c:	302b883a 	mov	r21,r6
    8d60:	2025883a 	mov	r18,r4
    8d64:	29400117 	ldw	r5,4(r5)
    8d68:	1400030e 	bge	r2,r16,8d78 <__lshift+0x54>
    8d6c:	1085883a 	add	r2,r2,r2
    8d70:	29400044 	addi	r5,r5,1
    8d74:	143ffd16 	blt	r2,r16,8d6c <__alt_mem_Flash_flash_data+0xf4008d6c>
    8d78:	9009883a 	mov	r4,r18
    8d7c:	00085a00 	call	85a0 <_Balloc>
    8d80:	11c00504 	addi	r7,r2,20
    8d84:	0500090e 	bge	zero,r20,8dac <__lshift+0x88>
    8d88:	3811883a 	mov	r8,r7
    8d8c:	0007883a 	mov	r3,zero
    8d90:	40000015 	stw	zero,0(r8)
    8d94:	18c00044 	addi	r3,r3,1
    8d98:	42000104 	addi	r8,r8,4
    8d9c:	1d3ffc1e 	bne	r3,r20,8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8da0:	18c7883a 	add	r3,r3,r3
    8da4:	18c7883a 	add	r3,r3,r3
    8da8:	38cf883a 	add	r7,r7,r3
    8dac:	89000417 	ldw	r4,16(r17)
    8db0:	88c00504 	addi	r3,r17,20
    8db4:	a98007cc 	andi	r6,r21,31
    8db8:	2109883a 	add	r4,r4,r4
    8dbc:	2109883a 	add	r4,r4,r4
    8dc0:	1909883a 	add	r4,r3,r4
    8dc4:	30002326 	beq	r6,zero,8e54 <__lshift+0x130>
    8dc8:	01400804 	movi	r5,32
    8dcc:	298bc83a 	sub	r5,r5,r6
    8dd0:	0013883a 	mov	r9,zero
    8dd4:	1a000017 	ldw	r8,0(r3)
    8dd8:	3815883a 	mov	r10,r7
    8ddc:	39c00104 	addi	r7,r7,4
    8de0:	4190983a 	sll	r8,r8,r6
    8de4:	18c00104 	addi	r3,r3,4
    8de8:	4a10b03a 	or	r8,r9,r8
    8dec:	3a3fff15 	stw	r8,-4(r7)
    8df0:	1a3fff17 	ldw	r8,-4(r3)
    8df4:	4152d83a 	srl	r9,r8,r5
    8df8:	193ff636 	bltu	r3,r4,8dd4 <__alt_mem_Flash_flash_data+0xf4008dd4>
    8dfc:	52400115 	stw	r9,4(r10)
    8e00:	48001a1e 	bne	r9,zero,8e6c <__lshift+0x148>
    8e04:	843fffc4 	addi	r16,r16,-1
    8e08:	14000415 	stw	r16,16(r2)
    8e0c:	88000826 	beq	r17,zero,8e30 <__lshift+0x10c>
    8e10:	89000117 	ldw	r4,4(r17)
    8e14:	90c01317 	ldw	r3,76(r18)
    8e18:	2109883a 	add	r4,r4,r4
    8e1c:	2109883a 	add	r4,r4,r4
    8e20:	1907883a 	add	r3,r3,r4
    8e24:	19000017 	ldw	r4,0(r3)
    8e28:	89000015 	stw	r4,0(r17)
    8e2c:	1c400015 	stw	r17,0(r3)
    8e30:	dfc00617 	ldw	ra,24(sp)
    8e34:	dd400517 	ldw	r21,20(sp)
    8e38:	dd000417 	ldw	r20,16(sp)
    8e3c:	dcc00317 	ldw	r19,12(sp)
    8e40:	dc800217 	ldw	r18,8(sp)
    8e44:	dc400117 	ldw	r17,4(sp)
    8e48:	dc000017 	ldw	r16,0(sp)
    8e4c:	dec00704 	addi	sp,sp,28
    8e50:	f800283a 	ret
    8e54:	19400017 	ldw	r5,0(r3)
    8e58:	39c00104 	addi	r7,r7,4
    8e5c:	18c00104 	addi	r3,r3,4
    8e60:	397fff15 	stw	r5,-4(r7)
    8e64:	193ffb36 	bltu	r3,r4,8e54 <__alt_mem_Flash_flash_data+0xf4008e54>
    8e68:	003fe606 	br	8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    8e6c:	9c000084 	addi	r16,r19,2
    8e70:	003fe406 	br	8e04 <__alt_mem_Flash_flash_data+0xf4008e04>

00008e74 <__mcmp>:
    8e74:	20800417 	ldw	r2,16(r4)
    8e78:	28c00417 	ldw	r3,16(r5)
    8e7c:	10c5c83a 	sub	r2,r2,r3
    8e80:	1000111e 	bne	r2,zero,8ec8 <__mcmp+0x54>
    8e84:	18c7883a 	add	r3,r3,r3
    8e88:	18c7883a 	add	r3,r3,r3
    8e8c:	21000504 	addi	r4,r4,20
    8e90:	29400504 	addi	r5,r5,20
    8e94:	20c5883a 	add	r2,r4,r3
    8e98:	28cb883a 	add	r5,r5,r3
    8e9c:	00000106 	br	8ea4 <__mcmp+0x30>
    8ea0:	20800a2e 	bgeu	r4,r2,8ecc <__mcmp+0x58>
    8ea4:	10bfff04 	addi	r2,r2,-4
    8ea8:	297fff04 	addi	r5,r5,-4
    8eac:	11800017 	ldw	r6,0(r2)
    8eb0:	28c00017 	ldw	r3,0(r5)
    8eb4:	30fffa26 	beq	r6,r3,8ea0 <__alt_mem_Flash_flash_data+0xf4008ea0>
    8eb8:	30c00236 	bltu	r6,r3,8ec4 <__mcmp+0x50>
    8ebc:	00800044 	movi	r2,1
    8ec0:	f800283a 	ret
    8ec4:	00bfffc4 	movi	r2,-1
    8ec8:	f800283a 	ret
    8ecc:	0005883a 	mov	r2,zero
    8ed0:	f800283a 	ret

00008ed4 <__mdiff>:
    8ed4:	defffb04 	addi	sp,sp,-20
    8ed8:	dc000015 	stw	r16,0(sp)
    8edc:	2821883a 	mov	r16,r5
    8ee0:	dcc00315 	stw	r19,12(sp)
    8ee4:	300b883a 	mov	r5,r6
    8ee8:	2027883a 	mov	r19,r4
    8eec:	8009883a 	mov	r4,r16
    8ef0:	dc800215 	stw	r18,8(sp)
    8ef4:	dfc00415 	stw	ra,16(sp)
    8ef8:	dc400115 	stw	r17,4(sp)
    8efc:	3025883a 	mov	r18,r6
    8f00:	0008e740 	call	8e74 <__mcmp>
    8f04:	10005226 	beq	r2,zero,9050 <__mdiff+0x17c>
    8f08:	10004c16 	blt	r2,zero,903c <__mdiff+0x168>
    8f0c:	0023883a 	mov	r17,zero
    8f10:	81400117 	ldw	r5,4(r16)
    8f14:	9809883a 	mov	r4,r19
    8f18:	00085a00 	call	85a0 <_Balloc>
    8f1c:	83400417 	ldw	r13,16(r16)
    8f20:	93800417 	ldw	r14,16(r18)
    8f24:	81000504 	addi	r4,r16,20
    8f28:	6b59883a 	add	r12,r13,r13
    8f2c:	739d883a 	add	r14,r14,r14
    8f30:	6319883a 	add	r12,r12,r12
    8f34:	91800504 	addi	r6,r18,20
    8f38:	739d883a 	add	r14,r14,r14
    8f3c:	14400315 	stw	r17,12(r2)
    8f40:	2319883a 	add	r12,r4,r12
    8f44:	339d883a 	add	r14,r6,r14
    8f48:	12400504 	addi	r9,r2,20
    8f4c:	0007883a 	mov	r3,zero
    8f50:	22000017 	ldw	r8,0(r4)
    8f54:	32800017 	ldw	r10,0(r6)
    8f58:	4ac00104 	addi	r11,r9,4
    8f5c:	41ffffcc 	andi	r7,r8,65535
    8f60:	38c7883a 	add	r3,r7,r3
    8f64:	51ffffcc 	andi	r7,r10,65535
    8f68:	19cfc83a 	sub	r7,r3,r7
    8f6c:	4010d43a 	srli	r8,r8,16
    8f70:	5014d43a 	srli	r10,r10,16
    8f74:	3807d43a 	srai	r3,r7,16
    8f78:	39ffffcc 	andi	r7,r7,65535
    8f7c:	4291c83a 	sub	r8,r8,r10
    8f80:	40c7883a 	add	r3,r8,r3
    8f84:	1810943a 	slli	r8,r3,16
    8f88:	31800104 	addi	r6,r6,4
    8f8c:	21000104 	addi	r4,r4,4
    8f90:	41ceb03a 	or	r7,r8,r7
    8f94:	49c00015 	stw	r7,0(r9)
    8f98:	1807d43a 	srai	r3,r3,16
    8f9c:	580b883a 	mov	r5,r11
    8fa0:	5813883a 	mov	r9,r11
    8fa4:	33bfea36 	bltu	r6,r14,8f50 <__alt_mem_Flash_flash_data+0xf4008f50>
    8fa8:	2011883a 	mov	r8,r4
    8fac:	2300152e 	bgeu	r4,r12,9004 <__mdiff+0x130>
    8fb0:	21400017 	ldw	r5,0(r4)
    8fb4:	4a400104 	addi	r9,r9,4
    8fb8:	21000104 	addi	r4,r4,4
    8fbc:	29ffffcc 	andi	r7,r5,65535
    8fc0:	38c7883a 	add	r3,r7,r3
    8fc4:	280ad43a 	srli	r5,r5,16
    8fc8:	180dd43a 	srai	r6,r3,16
    8fcc:	19ffffcc 	andi	r7,r3,65535
    8fd0:	3147883a 	add	r3,r6,r5
    8fd4:	180a943a 	slli	r5,r3,16
    8fd8:	1807d43a 	srai	r3,r3,16
    8fdc:	29ceb03a 	or	r7,r5,r7
    8fe0:	49ffff15 	stw	r7,-4(r9)
    8fe4:	233ff236 	bltu	r4,r12,8fb0 <__alt_mem_Flash_flash_data+0xf4008fb0>
    8fe8:	0206303a 	nor	r3,zero,r8
    8fec:	1b07883a 	add	r3,r3,r12
    8ff0:	1806d0ba 	srli	r3,r3,2
    8ff4:	18c00044 	addi	r3,r3,1
    8ff8:	18c7883a 	add	r3,r3,r3
    8ffc:	18c7883a 	add	r3,r3,r3
    9000:	58cb883a 	add	r5,r11,r3
    9004:	28ffff04 	addi	r3,r5,-4
    9008:	3800041e 	bne	r7,zero,901c <__mdiff+0x148>
    900c:	18ffff04 	addi	r3,r3,-4
    9010:	19000017 	ldw	r4,0(r3)
    9014:	6b7fffc4 	addi	r13,r13,-1
    9018:	203ffc26 	beq	r4,zero,900c <__alt_mem_Flash_flash_data+0xf400900c>
    901c:	13400415 	stw	r13,16(r2)
    9020:	dfc00417 	ldw	ra,16(sp)
    9024:	dcc00317 	ldw	r19,12(sp)
    9028:	dc800217 	ldw	r18,8(sp)
    902c:	dc400117 	ldw	r17,4(sp)
    9030:	dc000017 	ldw	r16,0(sp)
    9034:	dec00504 	addi	sp,sp,20
    9038:	f800283a 	ret
    903c:	8005883a 	mov	r2,r16
    9040:	04400044 	movi	r17,1
    9044:	9021883a 	mov	r16,r18
    9048:	1025883a 	mov	r18,r2
    904c:	003fb006 	br	8f10 <__alt_mem_Flash_flash_data+0xf4008f10>
    9050:	9809883a 	mov	r4,r19
    9054:	000b883a 	mov	r5,zero
    9058:	00085a00 	call	85a0 <_Balloc>
    905c:	00c00044 	movi	r3,1
    9060:	10c00415 	stw	r3,16(r2)
    9064:	10000515 	stw	zero,20(r2)
    9068:	003fed06 	br	9020 <__alt_mem_Flash_flash_data+0xf4009020>

0000906c <__ulp>:
    906c:	295ffc2c 	andhi	r5,r5,32752
    9070:	00bf3034 	movhi	r2,64704
    9074:	2887883a 	add	r3,r5,r2
    9078:	00c0020e 	bge	zero,r3,9084 <__ulp+0x18>
    907c:	0005883a 	mov	r2,zero
    9080:	f800283a 	ret
    9084:	00c7c83a 	sub	r3,zero,r3
    9088:	180bd53a 	srai	r5,r3,20
    908c:	008004c4 	movi	r2,19
    9090:	11400a0e 	bge	r2,r5,90bc <__ulp+0x50>
    9094:	00800c84 	movi	r2,50
    9098:	0007883a 	mov	r3,zero
    909c:	11400516 	blt	r2,r5,90b4 <__ulp+0x48>
    90a0:	00800cc4 	movi	r2,51
    90a4:	114bc83a 	sub	r5,r2,r5
    90a8:	00800044 	movi	r2,1
    90ac:	1144983a 	sll	r2,r2,r5
    90b0:	f800283a 	ret
    90b4:	00800044 	movi	r2,1
    90b8:	f800283a 	ret
    90bc:	00800234 	movhi	r2,8
    90c0:	1147d83a 	sra	r3,r2,r5
    90c4:	0005883a 	mov	r2,zero
    90c8:	f800283a 	ret

000090cc <__b2d>:
    90cc:	defffa04 	addi	sp,sp,-24
    90d0:	dc000015 	stw	r16,0(sp)
    90d4:	24000417 	ldw	r16,16(r4)
    90d8:	dc400115 	stw	r17,4(sp)
    90dc:	24400504 	addi	r17,r4,20
    90e0:	8421883a 	add	r16,r16,r16
    90e4:	8421883a 	add	r16,r16,r16
    90e8:	8c21883a 	add	r16,r17,r16
    90ec:	dc800215 	stw	r18,8(sp)
    90f0:	84bfff17 	ldw	r18,-4(r16)
    90f4:	dd000415 	stw	r20,16(sp)
    90f8:	dcc00315 	stw	r19,12(sp)
    90fc:	9009883a 	mov	r4,r18
    9100:	2829883a 	mov	r20,r5
    9104:	dfc00515 	stw	ra,20(sp)
    9108:	00088940 	call	8894 <__hi0bits>
    910c:	00c00804 	movi	r3,32
    9110:	1887c83a 	sub	r3,r3,r2
    9114:	a0c00015 	stw	r3,0(r20)
    9118:	00c00284 	movi	r3,10
    911c:	84ffff04 	addi	r19,r16,-4
    9120:	18801216 	blt	r3,r2,916c <__b2d+0xa0>
    9124:	014002c4 	movi	r5,11
    9128:	2889c83a 	sub	r4,r5,r2
    912c:	9106d83a 	srl	r3,r18,r4
    9130:	18cffc34 	orhi	r3,r3,16368
    9134:	8cc0282e 	bgeu	r17,r19,91d8 <__b2d+0x10c>
    9138:	817ffe17 	ldw	r5,-8(r16)
    913c:	290ad83a 	srl	r5,r5,r4
    9140:	10800544 	addi	r2,r2,21
    9144:	9084983a 	sll	r2,r18,r2
    9148:	2884b03a 	or	r2,r5,r2
    914c:	dfc00517 	ldw	ra,20(sp)
    9150:	dd000417 	ldw	r20,16(sp)
    9154:	dcc00317 	ldw	r19,12(sp)
    9158:	dc800217 	ldw	r18,8(sp)
    915c:	dc400117 	ldw	r17,4(sp)
    9160:	dc000017 	ldw	r16,0(sp)
    9164:	dec00604 	addi	sp,sp,24
    9168:	f800283a 	ret
    916c:	113ffd44 	addi	r4,r2,-11
    9170:	8cc00f2e 	bgeu	r17,r19,91b0 <__b2d+0xe4>
    9174:	81bffe04 	addi	r6,r16,-8
    9178:	817ffe17 	ldw	r5,-8(r16)
    917c:	20001326 	beq	r4,zero,91cc <__b2d+0x100>
    9180:	00c00ac4 	movi	r3,43
    9184:	1885c83a 	sub	r2,r3,r2
    9188:	2886d83a 	srl	r3,r5,r2
    918c:	9124983a 	sll	r18,r18,r4
    9190:	90e4b03a 	or	r18,r18,r3
    9194:	90cffc34 	orhi	r3,r18,16368
    9198:	8980112e 	bgeu	r17,r6,91e0 <__b2d+0x114>
    919c:	81bffd17 	ldw	r6,-12(r16)
    91a0:	308cd83a 	srl	r6,r6,r2
    91a4:	2904983a 	sll	r2,r5,r4
    91a8:	1184b03a 	or	r2,r2,r6
    91ac:	003fe706 	br	914c <__alt_mem_Flash_flash_data+0xf400914c>
    91b0:	20000526 	beq	r4,zero,91c8 <__b2d+0xfc>
    91b4:	9124983a 	sll	r18,r18,r4
    91b8:	000d883a 	mov	r6,zero
    91bc:	000b883a 	mov	r5,zero
    91c0:	90cffc34 	orhi	r3,r18,16368
    91c4:	003ff706 	br	91a4 <__alt_mem_Flash_flash_data+0xf40091a4>
    91c8:	000b883a 	mov	r5,zero
    91cc:	90cffc34 	orhi	r3,r18,16368
    91d0:	2805883a 	mov	r2,r5
    91d4:	003fdd06 	br	914c <__alt_mem_Flash_flash_data+0xf400914c>
    91d8:	000b883a 	mov	r5,zero
    91dc:	003fd806 	br	9140 <__alt_mem_Flash_flash_data+0xf4009140>
    91e0:	000d883a 	mov	r6,zero
    91e4:	003fef06 	br	91a4 <__alt_mem_Flash_flash_data+0xf40091a4>

000091e8 <__d2b>:
    91e8:	defff704 	addi	sp,sp,-36
    91ec:	dc000215 	stw	r16,8(sp)
    91f0:	3021883a 	mov	r16,r6
    91f4:	dc400315 	stw	r17,12(sp)
    91f8:	8022907a 	slli	r17,r16,1
    91fc:	dd400715 	stw	r21,28(sp)
    9200:	282b883a 	mov	r21,r5
    9204:	01400044 	movi	r5,1
    9208:	dd000615 	stw	r20,24(sp)
    920c:	dcc00515 	stw	r19,20(sp)
    9210:	dc800415 	stw	r18,16(sp)
    9214:	dfc00815 	stw	ra,32(sp)
    9218:	3829883a 	mov	r20,r7
    921c:	dc800917 	ldw	r18,36(sp)
    9220:	8822d57a 	srli	r17,r17,21
    9224:	00085a00 	call	85a0 <_Balloc>
    9228:	1027883a 	mov	r19,r2
    922c:	00800434 	movhi	r2,16
    9230:	10bfffc4 	addi	r2,r2,-1
    9234:	808c703a 	and	r6,r16,r2
    9238:	88000126 	beq	r17,zero,9240 <__d2b+0x58>
    923c:	31800434 	orhi	r6,r6,16
    9240:	d9800015 	stw	r6,0(sp)
    9244:	a8001f26 	beq	r21,zero,92c4 <__d2b+0xdc>
    9248:	d9000104 	addi	r4,sp,4
    924c:	dd400115 	stw	r21,4(sp)
    9250:	00088fc0 	call	88fc <__lo0bits>
    9254:	d8c00017 	ldw	r3,0(sp)
    9258:	1000291e 	bne	r2,zero,9300 <__d2b+0x118>
    925c:	d9000117 	ldw	r4,4(sp)
    9260:	99000515 	stw	r4,20(r19)
    9264:	1820c03a 	cmpne	r16,r3,zero
    9268:	84000044 	addi	r16,r16,1
    926c:	98c00615 	stw	r3,24(r19)
    9270:	9c000415 	stw	r16,16(r19)
    9274:	88001b1e 	bne	r17,zero,92e4 <__d2b+0xfc>
    9278:	800690ba 	slli	r3,r16,2
    927c:	10bef384 	addi	r2,r2,-1074
    9280:	a0800015 	stw	r2,0(r20)
    9284:	98c5883a 	add	r2,r19,r3
    9288:	11000417 	ldw	r4,16(r2)
    928c:	8020917a 	slli	r16,r16,5
    9290:	00088940 	call	8894 <__hi0bits>
    9294:	8085c83a 	sub	r2,r16,r2
    9298:	90800015 	stw	r2,0(r18)
    929c:	9805883a 	mov	r2,r19
    92a0:	dfc00817 	ldw	ra,32(sp)
    92a4:	dd400717 	ldw	r21,28(sp)
    92a8:	dd000617 	ldw	r20,24(sp)
    92ac:	dcc00517 	ldw	r19,20(sp)
    92b0:	dc800417 	ldw	r18,16(sp)
    92b4:	dc400317 	ldw	r17,12(sp)
    92b8:	dc000217 	ldw	r16,8(sp)
    92bc:	dec00904 	addi	sp,sp,36
    92c0:	f800283a 	ret
    92c4:	d809883a 	mov	r4,sp
    92c8:	00088fc0 	call	88fc <__lo0bits>
    92cc:	d8c00017 	ldw	r3,0(sp)
    92d0:	04000044 	movi	r16,1
    92d4:	9c000415 	stw	r16,16(r19)
    92d8:	98c00515 	stw	r3,20(r19)
    92dc:	10800804 	addi	r2,r2,32
    92e0:	883fe526 	beq	r17,zero,9278 <__alt_mem_Flash_flash_data+0xf4009278>
    92e4:	8c7ef344 	addi	r17,r17,-1075
    92e8:	88a3883a 	add	r17,r17,r2
    92ec:	00c00d44 	movi	r3,53
    92f0:	a4400015 	stw	r17,0(r20)
    92f4:	1885c83a 	sub	r2,r3,r2
    92f8:	90800015 	stw	r2,0(r18)
    92fc:	003fe706 	br	929c <__alt_mem_Flash_flash_data+0xf400929c>
    9300:	01000804 	movi	r4,32
    9304:	2089c83a 	sub	r4,r4,r2
    9308:	1908983a 	sll	r4,r3,r4
    930c:	d9400117 	ldw	r5,4(sp)
    9310:	1886d83a 	srl	r3,r3,r2
    9314:	2148b03a 	or	r4,r4,r5
    9318:	99000515 	stw	r4,20(r19)
    931c:	d8c00015 	stw	r3,0(sp)
    9320:	003fd006 	br	9264 <__alt_mem_Flash_flash_data+0xf4009264>

00009324 <__ratio>:
    9324:	defff904 	addi	sp,sp,-28
    9328:	dc400315 	stw	r17,12(sp)
    932c:	2823883a 	mov	r17,r5
    9330:	d9400104 	addi	r5,sp,4
    9334:	dfc00615 	stw	ra,24(sp)
    9338:	dcc00515 	stw	r19,20(sp)
    933c:	dc800415 	stw	r18,16(sp)
    9340:	2027883a 	mov	r19,r4
    9344:	dc000215 	stw	r16,8(sp)
    9348:	00090cc0 	call	90cc <__b2d>
    934c:	8809883a 	mov	r4,r17
    9350:	d80b883a 	mov	r5,sp
    9354:	1025883a 	mov	r18,r2
    9358:	1821883a 	mov	r16,r3
    935c:	00090cc0 	call	90cc <__b2d>
    9360:	8a400417 	ldw	r9,16(r17)
    9364:	9a000417 	ldw	r8,16(r19)
    9368:	100d883a 	mov	r6,r2
    936c:	d8800017 	ldw	r2,0(sp)
    9370:	4251c83a 	sub	r8,r8,r9
    9374:	4012917a 	slli	r9,r8,5
    9378:	da000117 	ldw	r8,4(sp)
    937c:	4091c83a 	sub	r8,r8,r2
    9380:	4251883a 	add	r8,r8,r9
    9384:	02000d0e 	bge	zero,r8,93bc <__ratio+0x98>
    9388:	4010953a 	slli	r8,r8,20
    938c:	4421883a 	add	r16,r8,r16
    9390:	9009883a 	mov	r4,r18
    9394:	800b883a 	mov	r5,r16
    9398:	180f883a 	mov	r7,r3
    939c:	000e1840 	call	e184 <__divdf3>
    93a0:	dfc00617 	ldw	ra,24(sp)
    93a4:	dcc00517 	ldw	r19,20(sp)
    93a8:	dc800417 	ldw	r18,16(sp)
    93ac:	dc400317 	ldw	r17,12(sp)
    93b0:	dc000217 	ldw	r16,8(sp)
    93b4:	dec00704 	addi	sp,sp,28
    93b8:	f800283a 	ret
    93bc:	4010953a 	slli	r8,r8,20
    93c0:	1a07c83a 	sub	r3,r3,r8
    93c4:	003ff206 	br	9390 <__alt_mem_Flash_flash_data+0xf4009390>

000093c8 <_mprec_log10>:
    93c8:	defffe04 	addi	sp,sp,-8
    93cc:	dc000015 	stw	r16,0(sp)
    93d0:	dfc00115 	stw	ra,4(sp)
    93d4:	008005c4 	movi	r2,23
    93d8:	2021883a 	mov	r16,r4
    93dc:	11000d0e 	bge	r2,r4,9414 <_mprec_log10+0x4c>
    93e0:	0005883a 	mov	r2,zero
    93e4:	00cffc34 	movhi	r3,16368
    93e8:	843fffc4 	addi	r16,r16,-1
    93ec:	1009883a 	mov	r4,r2
    93f0:	180b883a 	mov	r5,r3
    93f4:	000d883a 	mov	r6,zero
    93f8:	01d00934 	movhi	r7,16420
    93fc:	000ec940 	call	ec94 <__muldf3>
    9400:	803ff91e 	bne	r16,zero,93e8 <__alt_mem_Flash_flash_data+0xf40093e8>
    9404:	dfc00117 	ldw	ra,4(sp)
    9408:	dc000017 	ldw	r16,0(sp)
    940c:	dec00204 	addi	sp,sp,8
    9410:	f800283a 	ret
    9414:	202090fa 	slli	r16,r4,3
    9418:	008000b4 	movhi	r2,2
    941c:	10b1d504 	addi	r2,r2,-14508
    9420:	1421883a 	add	r16,r2,r16
    9424:	80800017 	ldw	r2,0(r16)
    9428:	80c00117 	ldw	r3,4(r16)
    942c:	dfc00117 	ldw	ra,4(sp)
    9430:	dc000017 	ldw	r16,0(sp)
    9434:	dec00204 	addi	sp,sp,8
    9438:	f800283a 	ret

0000943c <__copybits>:
    943c:	297fffc4 	addi	r5,r5,-1
    9440:	280fd17a 	srai	r7,r5,5
    9444:	30c00417 	ldw	r3,16(r6)
    9448:	30800504 	addi	r2,r6,20
    944c:	39c00044 	addi	r7,r7,1
    9450:	18c7883a 	add	r3,r3,r3
    9454:	39cf883a 	add	r7,r7,r7
    9458:	18c7883a 	add	r3,r3,r3
    945c:	39cf883a 	add	r7,r7,r7
    9460:	10c7883a 	add	r3,r2,r3
    9464:	21cf883a 	add	r7,r4,r7
    9468:	10c00d2e 	bgeu	r2,r3,94a0 <__copybits+0x64>
    946c:	200b883a 	mov	r5,r4
    9470:	12000017 	ldw	r8,0(r2)
    9474:	29400104 	addi	r5,r5,4
    9478:	10800104 	addi	r2,r2,4
    947c:	2a3fff15 	stw	r8,-4(r5)
    9480:	10fffb36 	bltu	r2,r3,9470 <__alt_mem_Flash_flash_data+0xf4009470>
    9484:	1985c83a 	sub	r2,r3,r6
    9488:	10bffac4 	addi	r2,r2,-21
    948c:	1004d0ba 	srli	r2,r2,2
    9490:	10800044 	addi	r2,r2,1
    9494:	1085883a 	add	r2,r2,r2
    9498:	1085883a 	add	r2,r2,r2
    949c:	2089883a 	add	r4,r4,r2
    94a0:	21c0032e 	bgeu	r4,r7,94b0 <__copybits+0x74>
    94a4:	20000015 	stw	zero,0(r4)
    94a8:	21000104 	addi	r4,r4,4
    94ac:	21fffd36 	bltu	r4,r7,94a4 <__alt_mem_Flash_flash_data+0xf40094a4>
    94b0:	f800283a 	ret

000094b4 <__any_on>:
    94b4:	20c00417 	ldw	r3,16(r4)
    94b8:	2805d17a 	srai	r2,r5,5
    94bc:	21000504 	addi	r4,r4,20
    94c0:	18800d0e 	bge	r3,r2,94f8 <__any_on+0x44>
    94c4:	18c7883a 	add	r3,r3,r3
    94c8:	18c7883a 	add	r3,r3,r3
    94cc:	20c7883a 	add	r3,r4,r3
    94d0:	20c0192e 	bgeu	r4,r3,9538 <__any_on+0x84>
    94d4:	18bfff17 	ldw	r2,-4(r3)
    94d8:	18ffff04 	addi	r3,r3,-4
    94dc:	1000041e 	bne	r2,zero,94f0 <__any_on+0x3c>
    94e0:	20c0142e 	bgeu	r4,r3,9534 <__any_on+0x80>
    94e4:	18ffff04 	addi	r3,r3,-4
    94e8:	19400017 	ldw	r5,0(r3)
    94ec:	283ffc26 	beq	r5,zero,94e0 <__alt_mem_Flash_flash_data+0xf40094e0>
    94f0:	00800044 	movi	r2,1
    94f4:	f800283a 	ret
    94f8:	10c00a0e 	bge	r2,r3,9524 <__any_on+0x70>
    94fc:	1085883a 	add	r2,r2,r2
    9500:	1085883a 	add	r2,r2,r2
    9504:	294007cc 	andi	r5,r5,31
    9508:	2087883a 	add	r3,r4,r2
    950c:	283ff026 	beq	r5,zero,94d0 <__alt_mem_Flash_flash_data+0xf40094d0>
    9510:	19800017 	ldw	r6,0(r3)
    9514:	3144d83a 	srl	r2,r6,r5
    9518:	114a983a 	sll	r5,r2,r5
    951c:	29bff41e 	bne	r5,r6,94f0 <__alt_mem_Flash_flash_data+0xf40094f0>
    9520:	003feb06 	br	94d0 <__alt_mem_Flash_flash_data+0xf40094d0>
    9524:	1085883a 	add	r2,r2,r2
    9528:	1085883a 	add	r2,r2,r2
    952c:	2087883a 	add	r3,r4,r2
    9530:	003fe706 	br	94d0 <__alt_mem_Flash_flash_data+0xf40094d0>
    9534:	f800283a 	ret
    9538:	0005883a 	mov	r2,zero
    953c:	f800283a 	ret

00009540 <_realloc_r>:
    9540:	defff604 	addi	sp,sp,-40
    9544:	dd000415 	stw	r20,16(sp)
    9548:	dc400115 	stw	r17,4(sp)
    954c:	dfc00915 	stw	ra,36(sp)
    9550:	df000815 	stw	fp,32(sp)
    9554:	ddc00715 	stw	r23,28(sp)
    9558:	dd800615 	stw	r22,24(sp)
    955c:	dd400515 	stw	r21,20(sp)
    9560:	dcc00315 	stw	r19,12(sp)
    9564:	dc800215 	stw	r18,8(sp)
    9568:	dc000015 	stw	r16,0(sp)
    956c:	2829883a 	mov	r20,r5
    9570:	3023883a 	mov	r17,r6
    9574:	2800ad26 	beq	r5,zero,982c <_realloc_r+0x2ec>
    9578:	2025883a 	mov	r18,r4
    957c:	00109c40 	call	109c4 <__malloc_lock>
    9580:	a0ffff17 	ldw	r3,-4(r20)
    9584:	043fff04 	movi	r16,-4
    9588:	890002c4 	addi	r4,r17,11
    958c:	01c00584 	movi	r7,22
    9590:	a57ffe04 	addi	r21,r20,-8
    9594:	1c20703a 	and	r16,r3,r16
    9598:	39001d2e 	bgeu	r7,r4,9610 <_realloc_r+0xd0>
    959c:	05bffe04 	movi	r22,-8
    95a0:	25ac703a 	and	r22,r4,r22
    95a4:	b00f883a 	mov	r7,r22
    95a8:	b0006516 	blt	r22,zero,9740 <_realloc_r+0x200>
    95ac:	b4406436 	bltu	r22,r17,9740 <_realloc_r+0x200>
    95b0:	81c01a0e 	bge	r16,r7,961c <_realloc_r+0xdc>
    95b4:	070000b4 	movhi	fp,2
    95b8:	e7344104 	addi	fp,fp,-12028
    95bc:	e1400217 	ldw	r5,8(fp)
    95c0:	ac11883a 	add	r8,r21,r16
    95c4:	2a006226 	beq	r5,r8,9750 <_realloc_r+0x210>
    95c8:	41800117 	ldw	r6,4(r8)
    95cc:	027fff84 	movi	r9,-2
    95d0:	3252703a 	and	r9,r6,r9
    95d4:	4253883a 	add	r9,r8,r9
    95d8:	49000117 	ldw	r4,4(r9)
    95dc:	2100004c 	andi	r4,r4,1
    95e0:	2000281e 	bne	r4,zero,9684 <_realloc_r+0x144>
    95e4:	00bfff04 	movi	r2,-4
    95e8:	3084703a 	and	r2,r6,r2
    95ec:	1409883a 	add	r4,r2,r16
    95f0:	21c05e16 	blt	r4,r7,976c <_realloc_r+0x22c>
    95f4:	40800317 	ldw	r2,12(r8)
    95f8:	41400217 	ldw	r5,8(r8)
    95fc:	a023883a 	mov	r17,r20
    9600:	2021883a 	mov	r16,r4
    9604:	28800315 	stw	r2,12(r5)
    9608:	11400215 	stw	r5,8(r2)
    960c:	00000406 	br	9620 <_realloc_r+0xe0>
    9610:	01c00404 	movi	r7,16
    9614:	382d883a 	mov	r22,r7
    9618:	003fe406 	br	95ac <__alt_mem_Flash_flash_data+0xf40095ac>
    961c:	a023883a 	mov	r17,r20
    9620:	858fc83a 	sub	r7,r16,r22
    9624:	008003c4 	movi	r2,15
    9628:	18c0004c 	andi	r3,r3,1
    962c:	11c07236 	bltu	r2,r7,97f8 <_realloc_r+0x2b8>
    9630:	1c06b03a 	or	r3,r3,r16
    9634:	a8c00115 	stw	r3,4(r21)
    9638:	ac21883a 	add	r16,r21,r16
    963c:	80800117 	ldw	r2,4(r16)
    9640:	10800054 	ori	r2,r2,1
    9644:	80800115 	stw	r2,4(r16)
    9648:	9009883a 	mov	r4,r18
    964c:	0010ae40 	call	10ae4 <__malloc_unlock>
    9650:	8805883a 	mov	r2,r17
    9654:	dfc00917 	ldw	ra,36(sp)
    9658:	df000817 	ldw	fp,32(sp)
    965c:	ddc00717 	ldw	r23,28(sp)
    9660:	dd800617 	ldw	r22,24(sp)
    9664:	dd400517 	ldw	r21,20(sp)
    9668:	dd000417 	ldw	r20,16(sp)
    966c:	dcc00317 	ldw	r19,12(sp)
    9670:	dc800217 	ldw	r18,8(sp)
    9674:	dc400117 	ldw	r17,4(sp)
    9678:	dc000017 	ldw	r16,0(sp)
    967c:	dec00a04 	addi	sp,sp,40
    9680:	f800283a 	ret
    9684:	18c0004c 	andi	r3,r3,1
    9688:	1800081e 	bne	r3,zero,96ac <_realloc_r+0x16c>
    968c:	a4fffe17 	ldw	r19,-8(r20)
    9690:	00bfff04 	movi	r2,-4
    9694:	ace7c83a 	sub	r19,r21,r19
    9698:	98c00117 	ldw	r3,4(r19)
    969c:	1886703a 	and	r3,r3,r2
    96a0:	98000226 	beq	r19,zero,96ac <_realloc_r+0x16c>
    96a4:	1c2f883a 	add	r23,r3,r16
    96a8:	b9c06d0e 	bge	r23,r7,9860 <_realloc_r+0x320>
    96ac:	880b883a 	mov	r5,r17
    96b0:	9009883a 	mov	r4,r18
    96b4:	0007a7c0 	call	7a7c <_malloc_r>
    96b8:	1023883a 	mov	r17,r2
    96bc:	1000ef26 	beq	r2,zero,9a7c <_realloc_r+0x53c>
    96c0:	a0ffff17 	ldw	r3,-4(r20)
    96c4:	113ffe04 	addi	r4,r2,-8
    96c8:	00bfff84 	movi	r2,-2
    96cc:	1884703a 	and	r2,r3,r2
    96d0:	a885883a 	add	r2,r21,r2
    96d4:	2080bf26 	beq	r4,r2,99d4 <_realloc_r+0x494>
    96d8:	81bfff04 	addi	r6,r16,-4
    96dc:	00800904 	movi	r2,36
    96e0:	11808936 	bltu	r2,r6,9908 <_realloc_r+0x3c8>
    96e4:	00c004c4 	movi	r3,19
    96e8:	19806c2e 	bgeu	r3,r6,989c <_realloc_r+0x35c>
    96ec:	a0c00017 	ldw	r3,0(r20)
    96f0:	88c00015 	stw	r3,0(r17)
    96f4:	a0c00117 	ldw	r3,4(r20)
    96f8:	88c00115 	stw	r3,4(r17)
    96fc:	00c006c4 	movi	r3,27
    9700:	1980ac36 	bltu	r3,r6,99b4 <_realloc_r+0x474>
    9704:	88800204 	addi	r2,r17,8
    9708:	a0c00204 	addi	r3,r20,8
    970c:	19000017 	ldw	r4,0(r3)
    9710:	11000015 	stw	r4,0(r2)
    9714:	19000117 	ldw	r4,4(r3)
    9718:	11000115 	stw	r4,4(r2)
    971c:	18c00217 	ldw	r3,8(r3)
    9720:	10c00215 	stw	r3,8(r2)
    9724:	a00b883a 	mov	r5,r20
    9728:	9009883a 	mov	r4,r18
    972c:	0006eac0 	call	6eac <_free_r>
    9730:	9009883a 	mov	r4,r18
    9734:	0010ae40 	call	10ae4 <__malloc_unlock>
    9738:	8805883a 	mov	r2,r17
    973c:	003fc506 	br	9654 <__alt_mem_Flash_flash_data+0xf4009654>
    9740:	00800304 	movi	r2,12
    9744:	90800015 	stw	r2,0(r18)
    9748:	0005883a 	mov	r2,zero
    974c:	003fc106 	br	9654 <__alt_mem_Flash_flash_data+0xf4009654>
    9750:	29800117 	ldw	r6,4(r5)
    9754:	00bfff04 	movi	r2,-4
    9758:	b1000404 	addi	r4,r22,16
    975c:	3084703a 	and	r2,r6,r2
    9760:	140d883a 	add	r6,r2,r16
    9764:	31005b0e 	bge	r6,r4,98d4 <_realloc_r+0x394>
    9768:	2811883a 	mov	r8,r5
    976c:	18c0004c 	andi	r3,r3,1
    9770:	183fce1e 	bne	r3,zero,96ac <__alt_mem_Flash_flash_data+0xf40096ac>
    9774:	a4fffe17 	ldw	r19,-8(r20)
    9778:	00ffff04 	movi	r3,-4
    977c:	ace7c83a 	sub	r19,r21,r19
    9780:	99000117 	ldw	r4,4(r19)
    9784:	20c6703a 	and	r3,r4,r3
    9788:	403fc526 	beq	r8,zero,96a0 <__alt_mem_Flash_flash_data+0xf40096a0>
    978c:	1c2f883a 	add	r23,r3,r16
    9790:	b8af883a 	add	r23,r23,r2
    9794:	41406026 	beq	r8,r5,9918 <_realloc_r+0x3d8>
    9798:	b9ffc116 	blt	r23,r7,96a0 <__alt_mem_Flash_flash_data+0xf40096a0>
    979c:	40c00217 	ldw	r3,8(r8)
    97a0:	40800317 	ldw	r2,12(r8)
    97a4:	81bfff04 	addi	r6,r16,-4
    97a8:	01000904 	movi	r4,36
    97ac:	18800315 	stw	r2,12(r3)
    97b0:	10c00215 	stw	r3,8(r2)
    97b4:	99400217 	ldw	r5,8(r19)
    97b8:	98c00317 	ldw	r3,12(r19)
    97bc:	9c400204 	addi	r17,r19,8
    97c0:	28c00315 	stw	r3,12(r5)
    97c4:	19400215 	stw	r5,8(r3)
    97c8:	21802d36 	bltu	r4,r6,9880 <_realloc_r+0x340>
    97cc:	008004c4 	movi	r2,19
    97d0:	1180352e 	bgeu	r2,r6,98a8 <_realloc_r+0x368>
    97d4:	a0800017 	ldw	r2,0(r20)
    97d8:	98800215 	stw	r2,8(r19)
    97dc:	a0800117 	ldw	r2,4(r20)
    97e0:	98800315 	stw	r2,12(r19)
    97e4:	008006c4 	movi	r2,27
    97e8:	11808036 	bltu	r2,r6,99ec <_realloc_r+0x4ac>
    97ec:	98c00404 	addi	r3,r19,16
    97f0:	a5000204 	addi	r20,r20,8
    97f4:	00002d06 	br	98ac <_realloc_r+0x36c>
    97f8:	1d86b03a 	or	r3,r3,r22
    97fc:	ad8b883a 	add	r5,r21,r22
    9800:	a8c00115 	stw	r3,4(r21)
    9804:	38800054 	ori	r2,r7,1
    9808:	28800115 	stw	r2,4(r5)
    980c:	29cf883a 	add	r7,r5,r7
    9810:	38800117 	ldw	r2,4(r7)
    9814:	9009883a 	mov	r4,r18
    9818:	29400204 	addi	r5,r5,8
    981c:	10800054 	ori	r2,r2,1
    9820:	38800115 	stw	r2,4(r7)
    9824:	0006eac0 	call	6eac <_free_r>
    9828:	003f8706 	br	9648 <__alt_mem_Flash_flash_data+0xf4009648>
    982c:	300b883a 	mov	r5,r6
    9830:	dfc00917 	ldw	ra,36(sp)
    9834:	df000817 	ldw	fp,32(sp)
    9838:	ddc00717 	ldw	r23,28(sp)
    983c:	dd800617 	ldw	r22,24(sp)
    9840:	dd400517 	ldw	r21,20(sp)
    9844:	dd000417 	ldw	r20,16(sp)
    9848:	dcc00317 	ldw	r19,12(sp)
    984c:	dc800217 	ldw	r18,8(sp)
    9850:	dc400117 	ldw	r17,4(sp)
    9854:	dc000017 	ldw	r16,0(sp)
    9858:	dec00a04 	addi	sp,sp,40
    985c:	0007a7c1 	jmpi	7a7c <_malloc_r>
    9860:	98800317 	ldw	r2,12(r19)
    9864:	98c00217 	ldw	r3,8(r19)
    9868:	81bfff04 	addi	r6,r16,-4
    986c:	01000904 	movi	r4,36
    9870:	18800315 	stw	r2,12(r3)
    9874:	10c00215 	stw	r3,8(r2)
    9878:	9c400204 	addi	r17,r19,8
    987c:	21bfd32e 	bgeu	r4,r6,97cc <__alt_mem_Flash_flash_data+0xf40097cc>
    9880:	8809883a 	mov	r4,r17
    9884:	a00b883a 	mov	r5,r20
    9888:	00084440 	call	8444 <memmove>
    988c:	98c00117 	ldw	r3,4(r19)
    9890:	b821883a 	mov	r16,r23
    9894:	982b883a 	mov	r21,r19
    9898:	003f6106 	br	9620 <__alt_mem_Flash_flash_data+0xf4009620>
    989c:	8805883a 	mov	r2,r17
    98a0:	a007883a 	mov	r3,r20
    98a4:	003f9906 	br	970c <__alt_mem_Flash_flash_data+0xf400970c>
    98a8:	8807883a 	mov	r3,r17
    98ac:	a0800017 	ldw	r2,0(r20)
    98b0:	b821883a 	mov	r16,r23
    98b4:	982b883a 	mov	r21,r19
    98b8:	18800015 	stw	r2,0(r3)
    98bc:	a0800117 	ldw	r2,4(r20)
    98c0:	18800115 	stw	r2,4(r3)
    98c4:	a0800217 	ldw	r2,8(r20)
    98c8:	18800215 	stw	r2,8(r3)
    98cc:	98c00117 	ldw	r3,4(r19)
    98d0:	003f5306 	br	9620 <__alt_mem_Flash_flash_data+0xf4009620>
    98d4:	adab883a 	add	r21,r21,r22
    98d8:	3585c83a 	sub	r2,r6,r22
    98dc:	e5400215 	stw	r21,8(fp)
    98e0:	10800054 	ori	r2,r2,1
    98e4:	a8800115 	stw	r2,4(r21)
    98e8:	a0bfff17 	ldw	r2,-4(r20)
    98ec:	9009883a 	mov	r4,r18
    98f0:	1080004c 	andi	r2,r2,1
    98f4:	b0acb03a 	or	r22,r22,r2
    98f8:	a5bfff15 	stw	r22,-4(r20)
    98fc:	0010ae40 	call	10ae4 <__malloc_unlock>
    9900:	a005883a 	mov	r2,r20
    9904:	003f5306 	br	9654 <__alt_mem_Flash_flash_data+0xf4009654>
    9908:	8809883a 	mov	r4,r17
    990c:	a00b883a 	mov	r5,r20
    9910:	00084440 	call	8444 <memmove>
    9914:	003f8306 	br	9724 <__alt_mem_Flash_flash_data+0xf4009724>
    9918:	b0800404 	addi	r2,r22,16
    991c:	b8bf6016 	blt	r23,r2,96a0 <__alt_mem_Flash_flash_data+0xf40096a0>
    9920:	98800317 	ldw	r2,12(r19)
    9924:	98c00217 	ldw	r3,8(r19)
    9928:	81bfff04 	addi	r6,r16,-4
    992c:	01000904 	movi	r4,36
    9930:	18800315 	stw	r2,12(r3)
    9934:	10c00215 	stw	r3,8(r2)
    9938:	9c400204 	addi	r17,r19,8
    993c:	21804336 	bltu	r4,r6,9a4c <_realloc_r+0x50c>
    9940:	008004c4 	movi	r2,19
    9944:	11803f2e 	bgeu	r2,r6,9a44 <_realloc_r+0x504>
    9948:	a0800017 	ldw	r2,0(r20)
    994c:	98800215 	stw	r2,8(r19)
    9950:	a0800117 	ldw	r2,4(r20)
    9954:	98800315 	stw	r2,12(r19)
    9958:	008006c4 	movi	r2,27
    995c:	11803f36 	bltu	r2,r6,9a5c <_realloc_r+0x51c>
    9960:	98800404 	addi	r2,r19,16
    9964:	a5000204 	addi	r20,r20,8
    9968:	a0c00017 	ldw	r3,0(r20)
    996c:	10c00015 	stw	r3,0(r2)
    9970:	a0c00117 	ldw	r3,4(r20)
    9974:	10c00115 	stw	r3,4(r2)
    9978:	a0c00217 	ldw	r3,8(r20)
    997c:	10c00215 	stw	r3,8(r2)
    9980:	9d87883a 	add	r3,r19,r22
    9984:	bd85c83a 	sub	r2,r23,r22
    9988:	e0c00215 	stw	r3,8(fp)
    998c:	10800054 	ori	r2,r2,1
    9990:	18800115 	stw	r2,4(r3)
    9994:	98800117 	ldw	r2,4(r19)
    9998:	9009883a 	mov	r4,r18
    999c:	1080004c 	andi	r2,r2,1
    99a0:	b0acb03a 	or	r22,r22,r2
    99a4:	9d800115 	stw	r22,4(r19)
    99a8:	0010ae40 	call	10ae4 <__malloc_unlock>
    99ac:	8805883a 	mov	r2,r17
    99b0:	003f2806 	br	9654 <__alt_mem_Flash_flash_data+0xf4009654>
    99b4:	a0c00217 	ldw	r3,8(r20)
    99b8:	88c00215 	stw	r3,8(r17)
    99bc:	a0c00317 	ldw	r3,12(r20)
    99c0:	88c00315 	stw	r3,12(r17)
    99c4:	30801126 	beq	r6,r2,9a0c <_realloc_r+0x4cc>
    99c8:	88800404 	addi	r2,r17,16
    99cc:	a0c00404 	addi	r3,r20,16
    99d0:	003f4e06 	br	970c <__alt_mem_Flash_flash_data+0xf400970c>
    99d4:	893fff17 	ldw	r4,-4(r17)
    99d8:	00bfff04 	movi	r2,-4
    99dc:	a023883a 	mov	r17,r20
    99e0:	2084703a 	and	r2,r4,r2
    99e4:	80a1883a 	add	r16,r16,r2
    99e8:	003f0d06 	br	9620 <__alt_mem_Flash_flash_data+0xf4009620>
    99ec:	a0800217 	ldw	r2,8(r20)
    99f0:	98800415 	stw	r2,16(r19)
    99f4:	a0800317 	ldw	r2,12(r20)
    99f8:	98800515 	stw	r2,20(r19)
    99fc:	31000a26 	beq	r6,r4,9a28 <_realloc_r+0x4e8>
    9a00:	98c00604 	addi	r3,r19,24
    9a04:	a5000404 	addi	r20,r20,16
    9a08:	003fa806 	br	98ac <__alt_mem_Flash_flash_data+0xf40098ac>
    9a0c:	a1000417 	ldw	r4,16(r20)
    9a10:	88800604 	addi	r2,r17,24
    9a14:	a0c00604 	addi	r3,r20,24
    9a18:	89000415 	stw	r4,16(r17)
    9a1c:	a1000517 	ldw	r4,20(r20)
    9a20:	89000515 	stw	r4,20(r17)
    9a24:	003f3906 	br	970c <__alt_mem_Flash_flash_data+0xf400970c>
    9a28:	a0800417 	ldw	r2,16(r20)
    9a2c:	a5000604 	addi	r20,r20,24
    9a30:	98c00804 	addi	r3,r19,32
    9a34:	98800615 	stw	r2,24(r19)
    9a38:	a0bfff17 	ldw	r2,-4(r20)
    9a3c:	98800715 	stw	r2,28(r19)
    9a40:	003f9a06 	br	98ac <__alt_mem_Flash_flash_data+0xf40098ac>
    9a44:	8805883a 	mov	r2,r17
    9a48:	003fc706 	br	9968 <__alt_mem_Flash_flash_data+0xf4009968>
    9a4c:	8809883a 	mov	r4,r17
    9a50:	a00b883a 	mov	r5,r20
    9a54:	00084440 	call	8444 <memmove>
    9a58:	003fc906 	br	9980 <__alt_mem_Flash_flash_data+0xf4009980>
    9a5c:	a0800217 	ldw	r2,8(r20)
    9a60:	98800415 	stw	r2,16(r19)
    9a64:	a0800317 	ldw	r2,12(r20)
    9a68:	98800515 	stw	r2,20(r19)
    9a6c:	31000726 	beq	r6,r4,9a8c <_realloc_r+0x54c>
    9a70:	98800604 	addi	r2,r19,24
    9a74:	a5000404 	addi	r20,r20,16
    9a78:	003fbb06 	br	9968 <__alt_mem_Flash_flash_data+0xf4009968>
    9a7c:	9009883a 	mov	r4,r18
    9a80:	0010ae40 	call	10ae4 <__malloc_unlock>
    9a84:	0005883a 	mov	r2,zero
    9a88:	003ef206 	br	9654 <__alt_mem_Flash_flash_data+0xf4009654>
    9a8c:	a0c00417 	ldw	r3,16(r20)
    9a90:	a5000604 	addi	r20,r20,24
    9a94:	98800804 	addi	r2,r19,32
    9a98:	98c00615 	stw	r3,24(r19)
    9a9c:	a0ffff17 	ldw	r3,-4(r20)
    9aa0:	98c00715 	stw	r3,28(r19)
    9aa4:	003fb006 	br	9968 <__alt_mem_Flash_flash_data+0xf4009968>

00009aa8 <__fpclassifyd>:
    9aa8:	00a00034 	movhi	r2,32768
    9aac:	10bfffc4 	addi	r2,r2,-1
    9ab0:	2884703a 	and	r2,r5,r2
    9ab4:	10000726 	beq	r2,zero,9ad4 <__fpclassifyd+0x2c>
    9ab8:	00fffc34 	movhi	r3,65520
    9abc:	019ff834 	movhi	r6,32736
    9ac0:	28c7883a 	add	r3,r5,r3
    9ac4:	31bfffc4 	addi	r6,r6,-1
    9ac8:	30c00536 	bltu	r6,r3,9ae0 <__fpclassifyd+0x38>
    9acc:	00800104 	movi	r2,4
    9ad0:	f800283a 	ret
    9ad4:	2000021e 	bne	r4,zero,9ae0 <__fpclassifyd+0x38>
    9ad8:	00800084 	movi	r2,2
    9adc:	f800283a 	ret
    9ae0:	00dffc34 	movhi	r3,32752
    9ae4:	019ff834 	movhi	r6,32736
    9ae8:	28cb883a 	add	r5,r5,r3
    9aec:	31bfffc4 	addi	r6,r6,-1
    9af0:	317ff62e 	bgeu	r6,r5,9acc <__alt_mem_Flash_flash_data+0xf4009acc>
    9af4:	01400434 	movhi	r5,16
    9af8:	297fffc4 	addi	r5,r5,-1
    9afc:	28800236 	bltu	r5,r2,9b08 <__fpclassifyd+0x60>
    9b00:	008000c4 	movi	r2,3
    9b04:	f800283a 	ret
    9b08:	10c00226 	beq	r2,r3,9b14 <__fpclassifyd+0x6c>
    9b0c:	0005883a 	mov	r2,zero
    9b10:	f800283a 	ret
    9b14:	2005003a 	cmpeq	r2,r4,zero
    9b18:	f800283a 	ret

00009b1c <_sbrk_r>:
    9b1c:	defffd04 	addi	sp,sp,-12
    9b20:	dc000015 	stw	r16,0(sp)
    9b24:	040000b4 	movhi	r16,2
    9b28:	dc400115 	stw	r17,4(sp)
    9b2c:	8402c804 	addi	r16,r16,2848
    9b30:	2023883a 	mov	r17,r4
    9b34:	2809883a 	mov	r4,r5
    9b38:	dfc00215 	stw	ra,8(sp)
    9b3c:	80000015 	stw	zero,0(r16)
    9b40:	00106b00 	call	106b0 <sbrk>
    9b44:	00ffffc4 	movi	r3,-1
    9b48:	10c00526 	beq	r2,r3,9b60 <_sbrk_r+0x44>
    9b4c:	dfc00217 	ldw	ra,8(sp)
    9b50:	dc400117 	ldw	r17,4(sp)
    9b54:	dc000017 	ldw	r16,0(sp)
    9b58:	dec00304 	addi	sp,sp,12
    9b5c:	f800283a 	ret
    9b60:	80c00017 	ldw	r3,0(r16)
    9b64:	183ff926 	beq	r3,zero,9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    9b68:	88c00015 	stw	r3,0(r17)
    9b6c:	003ff706 	br	9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>

00009b70 <__sread>:
    9b70:	defffe04 	addi	sp,sp,-8
    9b74:	dc000015 	stw	r16,0(sp)
    9b78:	2821883a 	mov	r16,r5
    9b7c:	2940038f 	ldh	r5,14(r5)
    9b80:	dfc00115 	stw	ra,4(sp)
    9b84:	000c8d40 	call	c8d4 <_read_r>
    9b88:	10000716 	blt	r2,zero,9ba8 <__sread+0x38>
    9b8c:	80c01417 	ldw	r3,80(r16)
    9b90:	1887883a 	add	r3,r3,r2
    9b94:	80c01415 	stw	r3,80(r16)
    9b98:	dfc00117 	ldw	ra,4(sp)
    9b9c:	dc000017 	ldw	r16,0(sp)
    9ba0:	dec00204 	addi	sp,sp,8
    9ba4:	f800283a 	ret
    9ba8:	80c0030b 	ldhu	r3,12(r16)
    9bac:	18fbffcc 	andi	r3,r3,61439
    9bb0:	80c0030d 	sth	r3,12(r16)
    9bb4:	dfc00117 	ldw	ra,4(sp)
    9bb8:	dc000017 	ldw	r16,0(sp)
    9bbc:	dec00204 	addi	sp,sp,8
    9bc0:	f800283a 	ret

00009bc4 <__seofread>:
    9bc4:	0005883a 	mov	r2,zero
    9bc8:	f800283a 	ret

00009bcc <__swrite>:
    9bcc:	2880030b 	ldhu	r2,12(r5)
    9bd0:	defffb04 	addi	sp,sp,-20
    9bd4:	dcc00315 	stw	r19,12(sp)
    9bd8:	dc800215 	stw	r18,8(sp)
    9bdc:	dc400115 	stw	r17,4(sp)
    9be0:	dc000015 	stw	r16,0(sp)
    9be4:	dfc00415 	stw	ra,16(sp)
    9be8:	10c0400c 	andi	r3,r2,256
    9bec:	2821883a 	mov	r16,r5
    9bf0:	2027883a 	mov	r19,r4
    9bf4:	3025883a 	mov	r18,r6
    9bf8:	3823883a 	mov	r17,r7
    9bfc:	18000526 	beq	r3,zero,9c14 <__swrite+0x48>
    9c00:	2940038f 	ldh	r5,14(r5)
    9c04:	000d883a 	mov	r6,zero
    9c08:	01c00084 	movi	r7,2
    9c0c:	000c8780 	call	c878 <_lseek_r>
    9c10:	8080030b 	ldhu	r2,12(r16)
    9c14:	8140038f 	ldh	r5,14(r16)
    9c18:	10bbffcc 	andi	r2,r2,61439
    9c1c:	9809883a 	mov	r4,r19
    9c20:	900d883a 	mov	r6,r18
    9c24:	880f883a 	mov	r7,r17
    9c28:	8080030d 	sth	r2,12(r16)
    9c2c:	dfc00417 	ldw	ra,16(sp)
    9c30:	dcc00317 	ldw	r19,12(sp)
    9c34:	dc800217 	ldw	r18,8(sp)
    9c38:	dc400117 	ldw	r17,4(sp)
    9c3c:	dc000017 	ldw	r16,0(sp)
    9c40:	dec00504 	addi	sp,sp,20
    9c44:	000c3741 	jmpi	c374 <_write_r>

00009c48 <__sseek>:
    9c48:	defffe04 	addi	sp,sp,-8
    9c4c:	dc000015 	stw	r16,0(sp)
    9c50:	2821883a 	mov	r16,r5
    9c54:	2940038f 	ldh	r5,14(r5)
    9c58:	dfc00115 	stw	ra,4(sp)
    9c5c:	000c8780 	call	c878 <_lseek_r>
    9c60:	00ffffc4 	movi	r3,-1
    9c64:	10c00826 	beq	r2,r3,9c88 <__sseek+0x40>
    9c68:	80c0030b 	ldhu	r3,12(r16)
    9c6c:	80801415 	stw	r2,80(r16)
    9c70:	18c40014 	ori	r3,r3,4096
    9c74:	80c0030d 	sth	r3,12(r16)
    9c78:	dfc00117 	ldw	ra,4(sp)
    9c7c:	dc000017 	ldw	r16,0(sp)
    9c80:	dec00204 	addi	sp,sp,8
    9c84:	f800283a 	ret
    9c88:	80c0030b 	ldhu	r3,12(r16)
    9c8c:	18fbffcc 	andi	r3,r3,61439
    9c90:	80c0030d 	sth	r3,12(r16)
    9c94:	dfc00117 	ldw	ra,4(sp)
    9c98:	dc000017 	ldw	r16,0(sp)
    9c9c:	dec00204 	addi	sp,sp,8
    9ca0:	f800283a 	ret

00009ca4 <__sclose>:
    9ca4:	2940038f 	ldh	r5,14(r5)
    9ca8:	000c3d01 	jmpi	c3d0 <_close_r>

00009cac <__ssprint_r>:
    9cac:	30800217 	ldw	r2,8(r6)
    9cb0:	defff604 	addi	sp,sp,-40
    9cb4:	ddc00715 	stw	r23,28(sp)
    9cb8:	dc800215 	stw	r18,8(sp)
    9cbc:	dfc00915 	stw	ra,36(sp)
    9cc0:	df000815 	stw	fp,32(sp)
    9cc4:	dd800615 	stw	r22,24(sp)
    9cc8:	dd400515 	stw	r21,20(sp)
    9ccc:	dd000415 	stw	r20,16(sp)
    9cd0:	dcc00315 	stw	r19,12(sp)
    9cd4:	dc400115 	stw	r17,4(sp)
    9cd8:	dc000015 	stw	r16,0(sp)
    9cdc:	3025883a 	mov	r18,r6
    9ce0:	35c00017 	ldw	r23,0(r6)
    9ce4:	10005626 	beq	r2,zero,9e40 <__ssprint_r+0x194>
    9ce8:	2027883a 	mov	r19,r4
    9cec:	28800217 	ldw	r2,8(r5)
    9cf0:	29000017 	ldw	r4,0(r5)
    9cf4:	2823883a 	mov	r17,r5
    9cf8:	0039883a 	mov	fp,zero
    9cfc:	0021883a 	mov	r16,zero
    9d00:	80003926 	beq	r16,zero,9de8 <__ssprint_r+0x13c>
    9d04:	102b883a 	mov	r21,r2
    9d08:	102d883a 	mov	r22,r2
    9d0c:	80803a36 	bltu	r16,r2,9df8 <__ssprint_r+0x14c>
    9d10:	88c0030b 	ldhu	r3,12(r17)
    9d14:	1881200c 	andi	r2,r3,1152
    9d18:	10002626 	beq	r2,zero,9db4 <__ssprint_r+0x108>
    9d1c:	88800517 	ldw	r2,20(r17)
    9d20:	89400417 	ldw	r5,16(r17)
    9d24:	81c00044 	addi	r7,r16,1
    9d28:	108d883a 	add	r6,r2,r2
    9d2c:	3085883a 	add	r2,r6,r2
    9d30:	100cd7fa 	srli	r6,r2,31
    9d34:	216dc83a 	sub	r22,r4,r5
    9d38:	3d89883a 	add	r4,r7,r22
    9d3c:	3085883a 	add	r2,r6,r2
    9d40:	102bd07a 	srai	r21,r2,1
    9d44:	a80d883a 	mov	r6,r21
    9d48:	a900022e 	bgeu	r21,r4,9d54 <__ssprint_r+0xa8>
    9d4c:	202b883a 	mov	r21,r4
    9d50:	200d883a 	mov	r6,r4
    9d54:	18c1000c 	andi	r3,r3,1024
    9d58:	9809883a 	mov	r4,r19
    9d5c:	18002926 	beq	r3,zero,9e04 <__ssprint_r+0x158>
    9d60:	300b883a 	mov	r5,r6
    9d64:	0007a7c0 	call	7a7c <_malloc_r>
    9d68:	1029883a 	mov	r20,r2
    9d6c:	10002b26 	beq	r2,zero,9e1c <__ssprint_r+0x170>
    9d70:	89400417 	ldw	r5,16(r17)
    9d74:	1009883a 	mov	r4,r2
    9d78:	b00d883a 	mov	r6,r22
    9d7c:	000830c0 	call	830c <memcpy>
    9d80:	8880030b 	ldhu	r2,12(r17)
    9d84:	00fedfc4 	movi	r3,-1153
    9d88:	10c4703a 	and	r2,r2,r3
    9d8c:	10802014 	ori	r2,r2,128
    9d90:	8880030d 	sth	r2,12(r17)
    9d94:	a589883a 	add	r4,r20,r22
    9d98:	adadc83a 	sub	r22,r21,r22
    9d9c:	8d400515 	stw	r21,20(r17)
    9da0:	8d800215 	stw	r22,8(r17)
    9da4:	8d000415 	stw	r20,16(r17)
    9da8:	89000015 	stw	r4,0(r17)
    9dac:	802b883a 	mov	r21,r16
    9db0:	802d883a 	mov	r22,r16
    9db4:	e00b883a 	mov	r5,fp
    9db8:	b00d883a 	mov	r6,r22
    9dbc:	00084440 	call	8444 <memmove>
    9dc0:	88800217 	ldw	r2,8(r17)
    9dc4:	89000017 	ldw	r4,0(r17)
    9dc8:	90c00217 	ldw	r3,8(r18)
    9dcc:	1545c83a 	sub	r2,r2,r21
    9dd0:	2589883a 	add	r4,r4,r22
    9dd4:	88800215 	stw	r2,8(r17)
    9dd8:	89000015 	stw	r4,0(r17)
    9ddc:	1c21c83a 	sub	r16,r3,r16
    9de0:	94000215 	stw	r16,8(r18)
    9de4:	80001626 	beq	r16,zero,9e40 <__ssprint_r+0x194>
    9de8:	bf000017 	ldw	fp,0(r23)
    9dec:	bc000117 	ldw	r16,4(r23)
    9df0:	bdc00204 	addi	r23,r23,8
    9df4:	003fc206 	br	9d00 <__alt_mem_Flash_flash_data+0xf4009d00>
    9df8:	802b883a 	mov	r21,r16
    9dfc:	802d883a 	mov	r22,r16
    9e00:	003fec06 	br	9db4 <__alt_mem_Flash_flash_data+0xf4009db4>
    9e04:	00095400 	call	9540 <_realloc_r>
    9e08:	1029883a 	mov	r20,r2
    9e0c:	103fe11e 	bne	r2,zero,9d94 <__alt_mem_Flash_flash_data+0xf4009d94>
    9e10:	89400417 	ldw	r5,16(r17)
    9e14:	9809883a 	mov	r4,r19
    9e18:	0006eac0 	call	6eac <_free_r>
    9e1c:	88c0030b 	ldhu	r3,12(r17)
    9e20:	00800304 	movi	r2,12
    9e24:	98800015 	stw	r2,0(r19)
    9e28:	18c01014 	ori	r3,r3,64
    9e2c:	88c0030d 	sth	r3,12(r17)
    9e30:	00bfffc4 	movi	r2,-1
    9e34:	90000215 	stw	zero,8(r18)
    9e38:	90000115 	stw	zero,4(r18)
    9e3c:	00000206 	br	9e48 <__ssprint_r+0x19c>
    9e40:	90000115 	stw	zero,4(r18)
    9e44:	0005883a 	mov	r2,zero
    9e48:	dfc00917 	ldw	ra,36(sp)
    9e4c:	df000817 	ldw	fp,32(sp)
    9e50:	ddc00717 	ldw	r23,28(sp)
    9e54:	dd800617 	ldw	r22,24(sp)
    9e58:	dd400517 	ldw	r21,20(sp)
    9e5c:	dd000417 	ldw	r20,16(sp)
    9e60:	dcc00317 	ldw	r19,12(sp)
    9e64:	dc800217 	ldw	r18,8(sp)
    9e68:	dc400117 	ldw	r17,4(sp)
    9e6c:	dc000017 	ldw	r16,0(sp)
    9e70:	dec00a04 	addi	sp,sp,40
    9e74:	f800283a 	ret

00009e78 <___svfiprintf_internal_r>:
    9e78:	2880030b 	ldhu	r2,12(r5)
    9e7c:	deffc904 	addi	sp,sp,-220
    9e80:	dd403215 	stw	r21,200(sp)
    9e84:	dfc03615 	stw	ra,216(sp)
    9e88:	df003515 	stw	fp,212(sp)
    9e8c:	ddc03415 	stw	r23,208(sp)
    9e90:	dd803315 	stw	r22,204(sp)
    9e94:	dd003115 	stw	r20,196(sp)
    9e98:	dcc03015 	stw	r19,192(sp)
    9e9c:	dc802f15 	stw	r18,188(sp)
    9ea0:	dc402e15 	stw	r17,184(sp)
    9ea4:	dc002d15 	stw	r16,180(sp)
    9ea8:	d9402715 	stw	r5,156(sp)
    9eac:	d9002915 	stw	r4,164(sp)
    9eb0:	1080200c 	andi	r2,r2,128
    9eb4:	d9c02315 	stw	r7,140(sp)
    9eb8:	302b883a 	mov	r21,r6
    9ebc:	10000226 	beq	r2,zero,9ec8 <___svfiprintf_internal_r+0x50>
    9ec0:	28800417 	ldw	r2,16(r5)
    9ec4:	1003ce26 	beq	r2,zero,ae00 <___svfiprintf_internal_r+0xf88>
    9ec8:	dac01a04 	addi	r11,sp,104
    9ecc:	da8019c4 	addi	r10,sp,103
    9ed0:	dc802917 	ldw	r18,164(sp)
    9ed4:	dd002717 	ldw	r20,156(sp)
    9ed8:	04c000b4 	movhi	r19,2
    9edc:	dac01e15 	stw	r11,120(sp)
    9ee0:	5a97c83a 	sub	r11,r11,r10
    9ee4:	9cf20704 	addi	r19,r19,-14308
    9ee8:	da801f15 	stw	r10,124(sp)
    9eec:	dec01a15 	stw	sp,104(sp)
    9ef0:	d8001c15 	stw	zero,112(sp)
    9ef4:	d8001b15 	stw	zero,108(sp)
    9ef8:	d811883a 	mov	r8,sp
    9efc:	d8002a15 	stw	zero,168(sp)
    9f00:	d8002415 	stw	zero,144(sp)
    9f04:	dac02b15 	stw	r11,172(sp)
    9f08:	a8800007 	ldb	r2,0(r21)
    9f0c:	10026a26 	beq	r2,zero,a8b8 <___svfiprintf_internal_r+0xa40>
    9f10:	01000944 	movi	r4,37
    9f14:	11026826 	beq	r2,r4,a8b8 <___svfiprintf_internal_r+0xa40>
    9f18:	a805883a 	mov	r2,r21
    9f1c:	00000106 	br	9f24 <___svfiprintf_internal_r+0xac>
    9f20:	19000326 	beq	r3,r4,9f30 <___svfiprintf_internal_r+0xb8>
    9f24:	10800044 	addi	r2,r2,1
    9f28:	10c00007 	ldb	r3,0(r2)
    9f2c:	183ffc1e 	bne	r3,zero,9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    9f30:	1561c83a 	sub	r16,r2,r21
    9f34:	102d883a 	mov	r22,r2
    9f38:	80000e26 	beq	r16,zero,9f74 <___svfiprintf_internal_r+0xfc>
    9f3c:	d8c01c17 	ldw	r3,112(sp)
    9f40:	d8801b17 	ldw	r2,108(sp)
    9f44:	45400015 	stw	r21,0(r8)
    9f48:	1c07883a 	add	r3,r3,r16
    9f4c:	10800044 	addi	r2,r2,1
    9f50:	d8c01c15 	stw	r3,112(sp)
    9f54:	44000115 	stw	r16,4(r8)
    9f58:	d8801b15 	stw	r2,108(sp)
    9f5c:	00c001c4 	movi	r3,7
    9f60:	1882d816 	blt	r3,r2,aac4 <___svfiprintf_internal_r+0xc4c>
    9f64:	42000204 	addi	r8,r8,8
    9f68:	da802417 	ldw	r10,144(sp)
    9f6c:	5415883a 	add	r10,r10,r16
    9f70:	da802415 	stw	r10,144(sp)
    9f74:	b0800007 	ldb	r2,0(r22)
    9f78:	10027526 	beq	r2,zero,a950 <___svfiprintf_internal_r+0xad8>
    9f7c:	b1000047 	ldb	r4,1(r22)
    9f80:	b5400044 	addi	r21,r22,1
    9f84:	d8001d85 	stb	zero,118(sp)
    9f88:	000d883a 	mov	r6,zero
    9f8c:	043fffc4 	movi	r16,-1
    9f90:	d8002115 	stw	zero,132(sp)
    9f94:	0023883a 	mov	r17,zero
    9f98:	00c01604 	movi	r3,88
    9f9c:	01400244 	movi	r5,9
    9fa0:	02400a84 	movi	r9,42
    9fa4:	01c01b04 	movi	r7,108
    9fa8:	ad400044 	addi	r21,r21,1
    9fac:	20bff804 	addi	r2,r4,-32
    9fb0:	18819736 	bltu	r3,r2,a610 <___svfiprintf_internal_r+0x798>
    9fb4:	100490ba 	slli	r2,r2,2
    9fb8:	02c00074 	movhi	r11,1
    9fbc:	5ae7f304 	addi	r11,r11,-24628
    9fc0:	12c5883a 	add	r2,r2,r11
    9fc4:	10800017 	ldw	r2,0(r2)
    9fc8:	1000683a 	jmp	r2
    9fcc:	0000a508 	cmpgei	zero,zero,660
    9fd0:	0000a610 	cmplti	zero,zero,664
    9fd4:	0000a610 	cmplti	zero,zero,664
    9fd8:	0000a4fc 	xorhi	zero,zero,659
    9fdc:	0000a610 	cmplti	zero,zero,664
    9fe0:	0000a610 	cmplti	zero,zero,664
    9fe4:	0000a610 	cmplti	zero,zero,664
    9fe8:	0000a610 	cmplti	zero,zero,664
    9fec:	0000a610 	cmplti	zero,zero,664
    9ff0:	0000a610 	cmplti	zero,zero,664
    9ff4:	0000a228 	cmpgeui	zero,zero,648
    9ff8:	0000a644 	movi	zero,665
    9ffc:	0000a610 	cmplti	zero,zero,664
    a000:	0000a250 	cmplti	zero,zero,649
    a004:	0000a650 	cmplti	zero,zero,665
    a008:	0000a610 	cmplti	zero,zero,664
    a00c:	0000a638 	rdprs	zero,zero,664
    a010:	0000a5d8 	cmpnei	zero,zero,663
    a014:	0000a5d8 	cmpnei	zero,zero,663
    a018:	0000a5d8 	cmpnei	zero,zero,663
    a01c:	0000a5d8 	cmpnei	zero,zero,663
    a020:	0000a5d8 	cmpnei	zero,zero,663
    a024:	0000a5d8 	cmpnei	zero,zero,663
    a028:	0000a5d8 	cmpnei	zero,zero,663
    a02c:	0000a5d8 	cmpnei	zero,zero,663
    a030:	0000a5d8 	cmpnei	zero,zero,663
    a034:	0000a610 	cmplti	zero,zero,664
    a038:	0000a610 	cmplti	zero,zero,664
    a03c:	0000a610 	cmplti	zero,zero,664
    a040:	0000a610 	cmplti	zero,zero,664
    a044:	0000a610 	cmplti	zero,zero,664
    a048:	0000a610 	cmplti	zero,zero,664
    a04c:	0000a610 	cmplti	zero,zero,664
    a050:	0000a610 	cmplti	zero,zero,664
    a054:	0000a610 	cmplti	zero,zero,664
    a058:	0000a610 	cmplti	zero,zero,664
    a05c:	0000a570 	cmpltui	zero,zero,661
    a060:	0000a610 	cmplti	zero,zero,664
    a064:	0000a610 	cmplti	zero,zero,664
    a068:	0000a610 	cmplti	zero,zero,664
    a06c:	0000a610 	cmplti	zero,zero,664
    a070:	0000a610 	cmplti	zero,zero,664
    a074:	0000a610 	cmplti	zero,zero,664
    a078:	0000a610 	cmplti	zero,zero,664
    a07c:	0000a610 	cmplti	zero,zero,664
    a080:	0000a610 	cmplti	zero,zero,664
    a084:	0000a610 	cmplti	zero,zero,664
    a088:	0000a1fc 	xorhi	zero,zero,647
    a08c:	0000a610 	cmplti	zero,zero,664
    a090:	0000a610 	cmplti	zero,zero,664
    a094:	0000a610 	cmplti	zero,zero,664
    a098:	0000a610 	cmplti	zero,zero,664
    a09c:	0000a610 	cmplti	zero,zero,664
    a0a0:	0000a130 	cmpltui	zero,zero,644
    a0a4:	0000a610 	cmplti	zero,zero,664
    a0a8:	0000a610 	cmplti	zero,zero,664
    a0ac:	0000a45c 	xori	zero,zero,657
    a0b0:	0000a610 	cmplti	zero,zero,664
    a0b4:	0000a610 	cmplti	zero,zero,664
    a0b8:	0000a610 	cmplti	zero,zero,664
    a0bc:	0000a610 	cmplti	zero,zero,664
    a0c0:	0000a610 	cmplti	zero,zero,664
    a0c4:	0000a610 	cmplti	zero,zero,664
    a0c8:	0000a610 	cmplti	zero,zero,664
    a0cc:	0000a610 	cmplti	zero,zero,664
    a0d0:	0000a610 	cmplti	zero,zero,664
    a0d4:	0000a610 	cmplti	zero,zero,664
    a0d8:	0000a348 	cmpgei	zero,zero,653
    a0dc:	0000a308 	cmpgei	zero,zero,652
    a0e0:	0000a610 	cmplti	zero,zero,664
    a0e4:	0000a610 	cmplti	zero,zero,664
    a0e8:	0000a610 	cmplti	zero,zero,664
    a0ec:	0000a4b8 	rdprs	zero,zero,658
    a0f0:	0000a308 	cmpgei	zero,zero,652
    a0f4:	0000a610 	cmplti	zero,zero,664
    a0f8:	0000a610 	cmplti	zero,zero,664
    a0fc:	0000a4a4 	muli	zero,zero,658
    a100:	0000a610 	cmplti	zero,zero,664
    a104:	0000a4c4 	movi	zero,659
    a108:	0000a200 	call	a20 <printf>
    a10c:	0000a2c4 	movi	zero,651
    a110:	0000a2b8 	rdprs	zero,zero,650
    a114:	0000a610 	cmplti	zero,zero,664
    a118:	0000a25c 	xori	zero,zero,649
    a11c:	0000a610 	cmplti	zero,zero,664
    a120:	0000a134 	movhi	zero,644
    a124:	0000a610 	cmplti	zero,zero,664
    a128:	0000a610 	cmplti	zero,zero,664
    a12c:	0000a524 	muli	zero,zero,660
    a130:	8c400414 	ori	r17,r17,16
    a134:	8880080c 	andi	r2,r17,32
    a138:	10029626 	beq	r2,zero,ab94 <___svfiprintf_internal_r+0xd1c>
    a13c:	da802317 	ldw	r10,140(sp)
    a140:	dac02317 	ldw	r11,140(sp)
    a144:	00800044 	movi	r2,1
    a148:	52400017 	ldw	r9,0(r10)
    a14c:	52800117 	ldw	r10,4(r10)
    a150:	5ac00204 	addi	r11,r11,8
    a154:	dac02315 	stw	r11,140(sp)
    a158:	4a86b03a 	or	r3,r9,r10
    a15c:	d8001d85 	stb	zero,118(sp)
    a160:	8039883a 	mov	fp,r16
    a164:	0017883a 	mov	r11,zero
    a168:	80000216 	blt	r16,zero,a174 <___svfiprintf_internal_r+0x2fc>
    a16c:	013fdfc4 	movi	r4,-129
    a170:	8922703a 	and	r17,r17,r4
    a174:	1801d21e 	bne	r3,zero,a8c0 <___svfiprintf_internal_r+0xa48>
    a178:	80024626 	beq	r16,zero,aa94 <___svfiprintf_internal_r+0xc1c>
    a17c:	10803fcc 	andi	r2,r2,255
    a180:	00c00044 	movi	r3,1
    a184:	10c2b426 	beq	r2,r3,ac58 <___svfiprintf_internal_r+0xde0>
    a188:	00c00084 	movi	r3,2
    a18c:	10c25d26 	beq	r2,r3,ab04 <___svfiprintf_internal_r+0xc8c>
    a190:	d8c01a04 	addi	r3,sp,104
    a194:	4808d0fa 	srli	r4,r9,3
    a198:	500a977a 	slli	r5,r10,29
    a19c:	5014d0fa 	srli	r10,r10,3
    a1a0:	4a4001cc 	andi	r9,r9,7
    a1a4:	48800c04 	addi	r2,r9,48
    a1a8:	18ffffc4 	addi	r3,r3,-1
    a1ac:	2912b03a 	or	r9,r5,r4
    a1b0:	18800005 	stb	r2,0(r3)
    a1b4:	4a88b03a 	or	r4,r9,r10
    a1b8:	203ff61e 	bne	r4,zero,a194 <__alt_mem_Flash_flash_data+0xf400a194>
    a1bc:	8900004c 	andi	r4,r17,1
    a1c0:	d8c02615 	stw	r3,152(sp)
    a1c4:	2002961e 	bne	r4,zero,ac20 <___svfiprintf_internal_r+0xda8>
    a1c8:	da801e17 	ldw	r10,120(sp)
    a1cc:	50f9c83a 	sub	fp,r10,r3
    a1d0:	df002015 	stw	fp,128(sp)
    a1d4:	e400010e 	bge	fp,r16,a1dc <___svfiprintf_internal_r+0x364>
    a1d8:	dc002015 	stw	r16,128(sp)
    a1dc:	5ac03fcc 	andi	r11,r11,255
    a1e0:	5ac0201c 	xori	r11,r11,128
    a1e4:	5affe004 	addi	r11,r11,-128
    a1e8:	58006326 	beq	r11,zero,a378 <___svfiprintf_internal_r+0x500>
    a1ec:	d8c02017 	ldw	r3,128(sp)
    a1f0:	18c00044 	addi	r3,r3,1
    a1f4:	d8c02015 	stw	r3,128(sp)
    a1f8:	00005f06 	br	a378 <___svfiprintf_internal_r+0x500>
    a1fc:	8c400414 	ori	r17,r17,16
    a200:	8880080c 	andi	r2,r17,32
    a204:	10027926 	beq	r2,zero,abec <___svfiprintf_internal_r+0xd74>
    a208:	dac02317 	ldw	r11,140(sp)
    a20c:	0005883a 	mov	r2,zero
    a210:	5a400017 	ldw	r9,0(r11)
    a214:	5a800117 	ldw	r10,4(r11)
    a218:	5ac00204 	addi	r11,r11,8
    a21c:	dac02315 	stw	r11,140(sp)
    a220:	4a86b03a 	or	r3,r9,r10
    a224:	003fcd06 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    a228:	da802317 	ldw	r10,140(sp)
    a22c:	dac02317 	ldw	r11,140(sp)
    a230:	52800017 	ldw	r10,0(r10)
    a234:	58800104 	addi	r2,r11,4
    a238:	da802115 	stw	r10,132(sp)
    a23c:	50028c0e 	bge	r10,zero,ac70 <___svfiprintf_internal_r+0xdf8>
    a240:	da802117 	ldw	r10,132(sp)
    a244:	d8802315 	stw	r2,140(sp)
    a248:	0295c83a 	sub	r10,zero,r10
    a24c:	da802115 	stw	r10,132(sp)
    a250:	8c400114 	ori	r17,r17,4
    a254:	a9000007 	ldb	r4,0(r21)
    a258:	003f5306 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a25c:	da802317 	ldw	r10,140(sp)
    a260:	dac02317 	ldw	r11,140(sp)
    a264:	d8001d85 	stb	zero,118(sp)
    a268:	52800017 	ldw	r10,0(r10)
    a26c:	5dc00104 	addi	r23,r11,4
    a270:	da802615 	stw	r10,152(sp)
    a274:	5002d626 	beq	r10,zero,add0 <___svfiprintf_internal_r+0xf58>
    a278:	d9002617 	ldw	r4,152(sp)
    a27c:	8002cc16 	blt	r16,zero,adb0 <___svfiprintf_internal_r+0xf38>
    a280:	000b883a 	mov	r5,zero
    a284:	800d883a 	mov	r6,r16
    a288:	da002c15 	stw	r8,176(sp)
    a28c:	00082240 	call	8224 <memchr>
    a290:	da002c17 	ldw	r8,176(sp)
    a294:	1002f026 	beq	r2,zero,ae58 <___svfiprintf_internal_r+0xfe0>
    a298:	d8c02617 	ldw	r3,152(sp)
    a29c:	10f9c83a 	sub	fp,r2,r3
    a2a0:	8700010e 	bge	r16,fp,a2a8 <___svfiprintf_internal_r+0x430>
    a2a4:	8039883a 	mov	fp,r16
    a2a8:	dac01d83 	ldbu	r11,118(sp)
    a2ac:	ddc02315 	stw	r23,140(sp)
    a2b0:	0021883a 	mov	r16,zero
    a2b4:	003fc606 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    a2b8:	8c400814 	ori	r17,r17,32
    a2bc:	a9000007 	ldb	r4,0(r21)
    a2c0:	003f3906 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a2c4:	da802317 	ldw	r10,140(sp)
    a2c8:	00800c04 	movi	r2,48
    a2cc:	dac02317 	ldw	r11,140(sp)
    a2d0:	52400017 	ldw	r9,0(r10)
    a2d4:	d8801d05 	stb	r2,116(sp)
    a2d8:	00801e04 	movi	r2,120
    a2dc:	d8801d45 	stb	r2,117(sp)
    a2e0:	008000b4 	movhi	r2,2
    a2e4:	10b19e04 	addi	r2,r2,-14728
    a2e8:	5ac00104 	addi	r11,r11,4
    a2ec:	d8802a15 	stw	r2,168(sp)
    a2f0:	0015883a 	mov	r10,zero
    a2f4:	8c400094 	ori	r17,r17,2
    a2f8:	dac02315 	stw	r11,140(sp)
    a2fc:	00800084 	movi	r2,2
    a300:	4807883a 	mov	r3,r9
    a304:	003f9506 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    a308:	d9801d85 	stb	r6,118(sp)
    a30c:	8880080c 	andi	r2,r17,32
    a310:	d8c02317 	ldw	r3,140(sp)
    a314:	10009b26 	beq	r2,zero,a584 <___svfiprintf_internal_r+0x70c>
    a318:	dac02317 	ldw	r11,140(sp)
    a31c:	18800117 	ldw	r2,4(r3)
    a320:	1a400017 	ldw	r9,0(r3)
    a324:	5ac00204 	addi	r11,r11,8
    a328:	dac02315 	stw	r11,140(sp)
    a32c:	1015883a 	mov	r10,r2
    a330:	10009f16 	blt	r2,zero,a5b0 <___svfiprintf_internal_r+0x738>
    a334:	dac01d83 	ldbu	r11,118(sp)
    a338:	8039883a 	mov	fp,r16
    a33c:	00800044 	movi	r2,1
    a340:	4a86b03a 	or	r3,r9,r10
    a344:	003f8806 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    a348:	dac02317 	ldw	r11,140(sp)
    a34c:	00c00044 	movi	r3,1
    a350:	da801004 	addi	r10,sp,64
    a354:	58800017 	ldw	r2,0(r11)
    a358:	5ac00104 	addi	r11,r11,4
    a35c:	d8c02015 	stw	r3,128(sp)
    a360:	d8001d85 	stb	zero,118(sp)
    a364:	d8801005 	stb	r2,64(sp)
    a368:	dac02315 	stw	r11,140(sp)
    a36c:	1839883a 	mov	fp,r3
    a370:	da802615 	stw	r10,152(sp)
    a374:	0021883a 	mov	r16,zero
    a378:	8a80008c 	andi	r10,r17,2
    a37c:	da802215 	stw	r10,136(sp)
    a380:	50000326 	beq	r10,zero,a390 <___svfiprintf_internal_r+0x518>
    a384:	dac02017 	ldw	r11,128(sp)
    a388:	5ac00084 	addi	r11,r11,2
    a38c:	dac02015 	stw	r11,128(sp)
    a390:	88c0210c 	andi	r3,r17,132
    a394:	d8c02515 	stw	r3,148(sp)
    a398:	1800bd1e 	bne	r3,zero,a690 <___svfiprintf_internal_r+0x818>
    a39c:	da802117 	ldw	r10,132(sp)
    a3a0:	dac02017 	ldw	r11,128(sp)
    a3a4:	52edc83a 	sub	r22,r10,r11
    a3a8:	0580b90e 	bge	zero,r22,a690 <___svfiprintf_internal_r+0x818>
    a3ac:	02400404 	movi	r9,16
    a3b0:	d8c01c17 	ldw	r3,112(sp)
    a3b4:	d8801b17 	ldw	r2,108(sp)
    a3b8:	4d829b0e 	bge	r9,r22,ae28 <___svfiprintf_internal_r+0xfb0>
    a3bc:	014000b4 	movhi	r5,2
    a3c0:	29720b04 	addi	r5,r5,-14292
    a3c4:	d9402815 	stw	r5,160(sp)
    a3c8:	05c001c4 	movi	r23,7
    a3cc:	00000306 	br	a3dc <___svfiprintf_internal_r+0x564>
    a3d0:	b5bffc04 	addi	r22,r22,-16
    a3d4:	42000204 	addi	r8,r8,8
    a3d8:	4d80150e 	bge	r9,r22,a430 <___svfiprintf_internal_r+0x5b8>
    a3dc:	028000b4 	movhi	r10,2
    a3e0:	18c00404 	addi	r3,r3,16
    a3e4:	10800044 	addi	r2,r2,1
    a3e8:	52b20b04 	addi	r10,r10,-14292
    a3ec:	42800015 	stw	r10,0(r8)
    a3f0:	42400115 	stw	r9,4(r8)
    a3f4:	d8c01c15 	stw	r3,112(sp)
    a3f8:	d8801b15 	stw	r2,108(sp)
    a3fc:	b8bff40e 	bge	r23,r2,a3d0 <__alt_mem_Flash_flash_data+0xf400a3d0>
    a400:	9009883a 	mov	r4,r18
    a404:	a00b883a 	mov	r5,r20
    a408:	d9801a04 	addi	r6,sp,104
    a40c:	da402c15 	stw	r9,176(sp)
    a410:	0009cac0 	call	9cac <__ssprint_r>
    a414:	da402c17 	ldw	r9,176(sp)
    a418:	1001531e 	bne	r2,zero,a968 <___svfiprintf_internal_r+0xaf0>
    a41c:	b5bffc04 	addi	r22,r22,-16
    a420:	d8c01c17 	ldw	r3,112(sp)
    a424:	d8801b17 	ldw	r2,108(sp)
    a428:	d811883a 	mov	r8,sp
    a42c:	4dbfeb16 	blt	r9,r22,a3dc <__alt_mem_Flash_flash_data+0xf400a3dc>
    a430:	dac02817 	ldw	r11,160(sp)
    a434:	b0c7883a 	add	r3,r22,r3
    a438:	10800044 	addi	r2,r2,1
    a43c:	42c00015 	stw	r11,0(r8)
    a440:	45800115 	stw	r22,4(r8)
    a444:	d8c01c15 	stw	r3,112(sp)
    a448:	d8801b15 	stw	r2,108(sp)
    a44c:	010001c4 	movi	r4,7
    a450:	2081dd16 	blt	r4,r2,abc8 <___svfiprintf_internal_r+0xd50>
    a454:	42000204 	addi	r8,r8,8
    a458:	00008f06 	br	a698 <___svfiprintf_internal_r+0x820>
    a45c:	008000b4 	movhi	r2,2
    a460:	10b19904 	addi	r2,r2,-14748
    a464:	d8802a15 	stw	r2,168(sp)
    a468:	d9801d85 	stb	r6,118(sp)
    a46c:	8880080c 	andi	r2,r17,32
    a470:	10003226 	beq	r2,zero,a53c <___svfiprintf_internal_r+0x6c4>
    a474:	da802317 	ldw	r10,140(sp)
    a478:	dac02317 	ldw	r11,140(sp)
    a47c:	52400017 	ldw	r9,0(r10)
    a480:	52800117 	ldw	r10,4(r10)
    a484:	5ac00204 	addi	r11,r11,8
    a488:	dac02315 	stw	r11,140(sp)
    a48c:	8880004c 	andi	r2,r17,1
    a490:	10003426 	beq	r2,zero,a564 <___svfiprintf_internal_r+0x6ec>
    a494:	4a86b03a 	or	r3,r9,r10
    a498:	1802231e 	bne	r3,zero,ad28 <___svfiprintf_internal_r+0xeb0>
    a49c:	00800084 	movi	r2,2
    a4a0:	003f2e06 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    a4a4:	a9000007 	ldb	r4,0(r21)
    a4a8:	a805883a 	mov	r2,r21
    a4ac:	21c22426 	beq	r4,r7,ad40 <___svfiprintf_internal_r+0xec8>
    a4b0:	8c400414 	ori	r17,r17,16
    a4b4:	003ebc06 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a4b8:	8c401014 	ori	r17,r17,64
    a4bc:	a9000007 	ldb	r4,0(r21)
    a4c0:	003eb906 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a4c4:	d9801d85 	stb	r6,118(sp)
    a4c8:	8880080c 	andi	r2,r17,32
    a4cc:	10020d1e 	bne	r2,zero,ad04 <___svfiprintf_internal_r+0xe8c>
    a4d0:	8880040c 	andi	r2,r17,16
    a4d4:	10021e1e 	bne	r2,zero,ad50 <___svfiprintf_internal_r+0xed8>
    a4d8:	8c40100c 	andi	r17,r17,64
    a4dc:	88021c26 	beq	r17,zero,ad50 <___svfiprintf_internal_r+0xed8>
    a4e0:	dac02317 	ldw	r11,140(sp)
    a4e4:	da802417 	ldw	r10,144(sp)
    a4e8:	58800017 	ldw	r2,0(r11)
    a4ec:	5ac00104 	addi	r11,r11,4
    a4f0:	dac02315 	stw	r11,140(sp)
    a4f4:	1280000d 	sth	r10,0(r2)
    a4f8:	003e8306 	br	9f08 <__alt_mem_Flash_flash_data+0xf4009f08>
    a4fc:	8c400054 	ori	r17,r17,1
    a500:	a9000007 	ldb	r4,0(r21)
    a504:	003ea806 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a508:	30803fcc 	andi	r2,r6,255
    a50c:	1080201c 	xori	r2,r2,128
    a510:	10bfe004 	addi	r2,r2,-128
    a514:	1001f91e 	bne	r2,zero,acfc <___svfiprintf_internal_r+0xe84>
    a518:	01800804 	movi	r6,32
    a51c:	a9000007 	ldb	r4,0(r21)
    a520:	003ea106 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a524:	008000b4 	movhi	r2,2
    a528:	10b19e04 	addi	r2,r2,-14728
    a52c:	d8802a15 	stw	r2,168(sp)
    a530:	d9801d85 	stb	r6,118(sp)
    a534:	8880080c 	andi	r2,r17,32
    a538:	103fce1e 	bne	r2,zero,a474 <__alt_mem_Flash_flash_data+0xf400a474>
    a53c:	8880040c 	andi	r2,r17,16
    a540:	1001e526 	beq	r2,zero,acd8 <___svfiprintf_internal_r+0xe60>
    a544:	da802317 	ldw	r10,140(sp)
    a548:	dac02317 	ldw	r11,140(sp)
    a54c:	52400017 	ldw	r9,0(r10)
    a550:	8880004c 	andi	r2,r17,1
    a554:	5ac00104 	addi	r11,r11,4
    a558:	dac02315 	stw	r11,140(sp)
    a55c:	0015883a 	mov	r10,zero
    a560:	103fcc1e 	bne	r2,zero,a494 <__alt_mem_Flash_flash_data+0xf400a494>
    a564:	00800084 	movi	r2,2
    a568:	4a86b03a 	or	r3,r9,r10
    a56c:	003efb06 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    a570:	8c400414 	ori	r17,r17,16
    a574:	d9801d85 	stb	r6,118(sp)
    a578:	8880080c 	andi	r2,r17,32
    a57c:	d8c02317 	ldw	r3,140(sp)
    a580:	103f651e 	bne	r2,zero,a318 <__alt_mem_Flash_flash_data+0xf400a318>
    a584:	8880040c 	andi	r2,r17,16
    a588:	1001c61e 	bne	r2,zero,aca4 <___svfiprintf_internal_r+0xe2c>
    a58c:	8880100c 	andi	r2,r17,64
    a590:	1001c426 	beq	r2,zero,aca4 <___svfiprintf_internal_r+0xe2c>
    a594:	1a40000f 	ldh	r9,0(r3)
    a598:	dac02317 	ldw	r11,140(sp)
    a59c:	4815d7fa 	srai	r10,r9,31
    a5a0:	5ac00104 	addi	r11,r11,4
    a5a4:	dac02315 	stw	r11,140(sp)
    a5a8:	5005883a 	mov	r2,r10
    a5ac:	103f610e 	bge	r2,zero,a334 <__alt_mem_Flash_flash_data+0xf400a334>
    a5b0:	0253c83a 	sub	r9,zero,r9
    a5b4:	4804c03a 	cmpne	r2,r9,zero
    a5b8:	0295c83a 	sub	r10,zero,r10
    a5bc:	5095c83a 	sub	r10,r10,r2
    a5c0:	02c00b44 	movi	r11,45
    a5c4:	dac01d85 	stb	r11,118(sp)
    a5c8:	8039883a 	mov	fp,r16
    a5cc:	00800044 	movi	r2,1
    a5d0:	4a86b03a 	or	r3,r9,r10
    a5d4:	003ee406 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    a5d8:	a815883a 	mov	r10,r21
    a5dc:	d8002115 	stw	zero,132(sp)
    a5e0:	20bff404 	addi	r2,r4,-48
    a5e4:	51000007 	ldb	r4,0(r10)
    a5e8:	da802117 	ldw	r10,132(sp)
    a5ec:	ad400044 	addi	r21,r21,1
    a5f0:	52c002a4 	muli	r11,r10,10
    a5f4:	a815883a 	mov	r10,r21
    a5f8:	5885883a 	add	r2,r11,r2
    a5fc:	d8802115 	stw	r2,132(sp)
    a600:	20bff404 	addi	r2,r4,-48
    a604:	28bff72e 	bgeu	r5,r2,a5e4 <__alt_mem_Flash_flash_data+0xf400a5e4>
    a608:	20bff804 	addi	r2,r4,-32
    a60c:	18be692e 	bgeu	r3,r2,9fb4 <__alt_mem_Flash_flash_data+0xf4009fb4>
    a610:	d9801d85 	stb	r6,118(sp)
    a614:	2000ce26 	beq	r4,zero,a950 <___svfiprintf_internal_r+0xad8>
    a618:	02800044 	movi	r10,1
    a61c:	dac01004 	addi	r11,sp,64
    a620:	da802015 	stw	r10,128(sp)
    a624:	d9001005 	stb	r4,64(sp)
    a628:	d8001d85 	stb	zero,118(sp)
    a62c:	5039883a 	mov	fp,r10
    a630:	dac02615 	stw	r11,152(sp)
    a634:	003f4f06 	br	a374 <__alt_mem_Flash_flash_data+0xf400a374>
    a638:	8c402014 	ori	r17,r17,128
    a63c:	a9000007 	ldb	r4,0(r21)
    a640:	003e5906 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a644:	01800ac4 	movi	r6,43
    a648:	a9000007 	ldb	r4,0(r21)
    a64c:	003e5606 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a650:	a9000007 	ldb	r4,0(r21)
    a654:	aa800044 	addi	r10,r21,1
    a658:	22420626 	beq	r4,r9,ae74 <___svfiprintf_internal_r+0xffc>
    a65c:	20bff404 	addi	r2,r4,-48
    a660:	502b883a 	mov	r21,r10
    a664:	0021883a 	mov	r16,zero
    a668:	28be5036 	bltu	r5,r2,9fac <__alt_mem_Flash_flash_data+0xf4009fac>
    a66c:	a9000007 	ldb	r4,0(r21)
    a670:	840002a4 	muli	r16,r16,10
    a674:	ad400044 	addi	r21,r21,1
    a678:	1421883a 	add	r16,r2,r16
    a67c:	20bff404 	addi	r2,r4,-48
    a680:	28bffa2e 	bgeu	r5,r2,a66c <__alt_mem_Flash_flash_data+0xf400a66c>
    a684:	803e490e 	bge	r16,zero,9fac <__alt_mem_Flash_flash_data+0xf4009fac>
    a688:	043fffc4 	movi	r16,-1
    a68c:	003e4706 	br	9fac <__alt_mem_Flash_flash_data+0xf4009fac>
    a690:	d8c01c17 	ldw	r3,112(sp)
    a694:	d8801b17 	ldw	r2,108(sp)
    a698:	d9001d87 	ldb	r4,118(sp)
    a69c:	20000b26 	beq	r4,zero,a6cc <___svfiprintf_internal_r+0x854>
    a6a0:	d9001d84 	addi	r4,sp,118
    a6a4:	18c00044 	addi	r3,r3,1
    a6a8:	10800044 	addi	r2,r2,1
    a6ac:	41000015 	stw	r4,0(r8)
    a6b0:	01000044 	movi	r4,1
    a6b4:	41000115 	stw	r4,4(r8)
    a6b8:	d8c01c15 	stw	r3,112(sp)
    a6bc:	d8801b15 	stw	r2,108(sp)
    a6c0:	010001c4 	movi	r4,7
    a6c4:	20811e16 	blt	r4,r2,ab40 <___svfiprintf_internal_r+0xcc8>
    a6c8:	42000204 	addi	r8,r8,8
    a6cc:	da802217 	ldw	r10,136(sp)
    a6d0:	50000b26 	beq	r10,zero,a700 <___svfiprintf_internal_r+0x888>
    a6d4:	d9001d04 	addi	r4,sp,116
    a6d8:	18c00084 	addi	r3,r3,2
    a6dc:	10800044 	addi	r2,r2,1
    a6e0:	41000015 	stw	r4,0(r8)
    a6e4:	01000084 	movi	r4,2
    a6e8:	41000115 	stw	r4,4(r8)
    a6ec:	d8c01c15 	stw	r3,112(sp)
    a6f0:	d8801b15 	stw	r2,108(sp)
    a6f4:	010001c4 	movi	r4,7
    a6f8:	20811a16 	blt	r4,r2,ab64 <___svfiprintf_internal_r+0xcec>
    a6fc:	42000204 	addi	r8,r8,8
    a700:	dac02517 	ldw	r11,148(sp)
    a704:	01002004 	movi	r4,128
    a708:	5900a826 	beq	r11,r4,a9ac <___svfiprintf_internal_r+0xb34>
    a70c:	8721c83a 	sub	r16,r16,fp
    a710:	0400260e 	bge	zero,r16,a7ac <___svfiprintf_internal_r+0x934>
    a714:	01c00404 	movi	r7,16
    a718:	3c019d0e 	bge	r7,r16,ad90 <___svfiprintf_internal_r+0xf18>
    a71c:	010000b4 	movhi	r4,2
    a720:	21320704 	addi	r4,r4,-14308
    a724:	d9002215 	stw	r4,136(sp)
    a728:	382f883a 	mov	r23,r7
    a72c:	058001c4 	movi	r22,7
    a730:	00000306 	br	a740 <___svfiprintf_internal_r+0x8c8>
    a734:	843ffc04 	addi	r16,r16,-16
    a738:	42000204 	addi	r8,r8,8
    a73c:	bc00110e 	bge	r23,r16,a784 <___svfiprintf_internal_r+0x90c>
    a740:	18c00404 	addi	r3,r3,16
    a744:	10800044 	addi	r2,r2,1
    a748:	44c00015 	stw	r19,0(r8)
    a74c:	45c00115 	stw	r23,4(r8)
    a750:	d8c01c15 	stw	r3,112(sp)
    a754:	d8801b15 	stw	r2,108(sp)
    a758:	b0bff60e 	bge	r22,r2,a734 <__alt_mem_Flash_flash_data+0xf400a734>
    a75c:	9009883a 	mov	r4,r18
    a760:	a00b883a 	mov	r5,r20
    a764:	d9801a04 	addi	r6,sp,104
    a768:	0009cac0 	call	9cac <__ssprint_r>
    a76c:	10007e1e 	bne	r2,zero,a968 <___svfiprintf_internal_r+0xaf0>
    a770:	843ffc04 	addi	r16,r16,-16
    a774:	d8c01c17 	ldw	r3,112(sp)
    a778:	d8801b17 	ldw	r2,108(sp)
    a77c:	d811883a 	mov	r8,sp
    a780:	bc3fef16 	blt	r23,r16,a740 <__alt_mem_Flash_flash_data+0xf400a740>
    a784:	da802217 	ldw	r10,136(sp)
    a788:	1c07883a 	add	r3,r3,r16
    a78c:	10800044 	addi	r2,r2,1
    a790:	42800015 	stw	r10,0(r8)
    a794:	44000115 	stw	r16,4(r8)
    a798:	d8c01c15 	stw	r3,112(sp)
    a79c:	d8801b15 	stw	r2,108(sp)
    a7a0:	010001c4 	movi	r4,7
    a7a4:	2080ce16 	blt	r4,r2,aae0 <___svfiprintf_internal_r+0xc68>
    a7a8:	42000204 	addi	r8,r8,8
    a7ac:	dac02617 	ldw	r11,152(sp)
    a7b0:	1f07883a 	add	r3,r3,fp
    a7b4:	10800044 	addi	r2,r2,1
    a7b8:	42c00015 	stw	r11,0(r8)
    a7bc:	47000115 	stw	fp,4(r8)
    a7c0:	d8c01c15 	stw	r3,112(sp)
    a7c4:	d8801b15 	stw	r2,108(sp)
    a7c8:	010001c4 	movi	r4,7
    a7cc:	2080a316 	blt	r4,r2,aa5c <___svfiprintf_internal_r+0xbe4>
    a7d0:	42000204 	addi	r8,r8,8
    a7d4:	8c40010c 	andi	r17,r17,4
    a7d8:	88002b26 	beq	r17,zero,a888 <___svfiprintf_internal_r+0xa10>
    a7dc:	da802117 	ldw	r10,132(sp)
    a7e0:	dac02017 	ldw	r11,128(sp)
    a7e4:	52e1c83a 	sub	r16,r10,r11
    a7e8:	0400270e 	bge	zero,r16,a888 <___svfiprintf_internal_r+0xa10>
    a7ec:	04400404 	movi	r17,16
    a7f0:	d8801b17 	ldw	r2,108(sp)
    a7f4:	8c01900e 	bge	r17,r16,ae38 <___svfiprintf_internal_r+0xfc0>
    a7f8:	014000b4 	movhi	r5,2
    a7fc:	29720b04 	addi	r5,r5,-14292
    a800:	d9402815 	stw	r5,160(sp)
    a804:	070001c4 	movi	fp,7
    a808:	00000306 	br	a818 <___svfiprintf_internal_r+0x9a0>
    a80c:	843ffc04 	addi	r16,r16,-16
    a810:	42000204 	addi	r8,r8,8
    a814:	8c00130e 	bge	r17,r16,a864 <___svfiprintf_internal_r+0x9ec>
    a818:	028000b4 	movhi	r10,2
    a81c:	18c00404 	addi	r3,r3,16
    a820:	10800044 	addi	r2,r2,1
    a824:	52b20b04 	addi	r10,r10,-14292
    a828:	42800015 	stw	r10,0(r8)
    a82c:	44400115 	stw	r17,4(r8)
    a830:	d8c01c15 	stw	r3,112(sp)
    a834:	d8801b15 	stw	r2,108(sp)
    a838:	e0bff40e 	bge	fp,r2,a80c <__alt_mem_Flash_flash_data+0xf400a80c>
    a83c:	9009883a 	mov	r4,r18
    a840:	a00b883a 	mov	r5,r20
    a844:	d9801a04 	addi	r6,sp,104
    a848:	0009cac0 	call	9cac <__ssprint_r>
    a84c:	1000461e 	bne	r2,zero,a968 <___svfiprintf_internal_r+0xaf0>
    a850:	843ffc04 	addi	r16,r16,-16
    a854:	d8c01c17 	ldw	r3,112(sp)
    a858:	d8801b17 	ldw	r2,108(sp)
    a85c:	d811883a 	mov	r8,sp
    a860:	8c3fed16 	blt	r17,r16,a818 <__alt_mem_Flash_flash_data+0xf400a818>
    a864:	dac02817 	ldw	r11,160(sp)
    a868:	1c07883a 	add	r3,r3,r16
    a86c:	10800044 	addi	r2,r2,1
    a870:	42c00015 	stw	r11,0(r8)
    a874:	44000115 	stw	r16,4(r8)
    a878:	d8c01c15 	stw	r3,112(sp)
    a87c:	d8801b15 	stw	r2,108(sp)
    a880:	010001c4 	movi	r4,7
    a884:	2080fd16 	blt	r4,r2,ac7c <___svfiprintf_internal_r+0xe04>
    a888:	dd802017 	ldw	r22,128(sp)
    a88c:	da802117 	ldw	r10,132(sp)
    a890:	b280010e 	bge	r22,r10,a898 <___svfiprintf_internal_r+0xa20>
    a894:	502d883a 	mov	r22,r10
    a898:	dac02417 	ldw	r11,144(sp)
    a89c:	5d97883a 	add	r11,r11,r22
    a8a0:	dac02415 	stw	r11,144(sp)
    a8a4:	1800751e 	bne	r3,zero,aa7c <___svfiprintf_internal_r+0xc04>
    a8a8:	a8800007 	ldb	r2,0(r21)
    a8ac:	d8001b15 	stw	zero,108(sp)
    a8b0:	d811883a 	mov	r8,sp
    a8b4:	103d961e 	bne	r2,zero,9f10 <__alt_mem_Flash_flash_data+0xf4009f10>
    a8b8:	a82d883a 	mov	r22,r21
    a8bc:	003dad06 	br	9f74 <__alt_mem_Flash_flash_data+0xf4009f74>
    a8c0:	10803fcc 	andi	r2,r2,255
    a8c4:	00c00044 	movi	r3,1
    a8c8:	10fe2f1e 	bne	r2,r3,a188 <__alt_mem_Flash_flash_data+0xf400a188>
    a8cc:	5000e026 	beq	r10,zero,ac50 <___svfiprintf_internal_r+0xdd8>
    a8d0:	dc002015 	stw	r16,128(sp)
    a8d4:	dc402215 	stw	r17,136(sp)
    a8d8:	dd801a04 	addi	r22,sp,104
    a8dc:	402f883a 	mov	r23,r8
    a8e0:	5839883a 	mov	fp,r11
    a8e4:	4821883a 	mov	r16,r9
    a8e8:	5023883a 	mov	r17,r10
    a8ec:	8009883a 	mov	r4,r16
    a8f0:	880b883a 	mov	r5,r17
    a8f4:	01800284 	movi	r6,10
    a8f8:	000f883a 	mov	r7,zero
    a8fc:	000d22c0 	call	d22c <__umoddi3>
    a900:	10800c04 	addi	r2,r2,48
    a904:	b5bfffc4 	addi	r22,r22,-1
    a908:	8009883a 	mov	r4,r16
    a90c:	880b883a 	mov	r5,r17
    a910:	01800284 	movi	r6,10
    a914:	000f883a 	mov	r7,zero
    a918:	b0800005 	stb	r2,0(r22)
    a91c:	000cc6c0 	call	cc6c <__udivdi3>
    a920:	1021883a 	mov	r16,r2
    a924:	10c4b03a 	or	r2,r2,r3
    a928:	1823883a 	mov	r17,r3
    a92c:	103fef1e 	bne	r2,zero,a8ec <__alt_mem_Flash_flash_data+0xf400a8ec>
    a930:	da801e17 	ldw	r10,120(sp)
    a934:	e017883a 	mov	r11,fp
    a938:	dc002017 	ldw	r16,128(sp)
    a93c:	dc402217 	ldw	r17,136(sp)
    a940:	b811883a 	mov	r8,r23
    a944:	dd802615 	stw	r22,152(sp)
    a948:	55b9c83a 	sub	fp,r10,r22
    a94c:	003e2006 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    a950:	d8801c17 	ldw	r2,112(sp)
    a954:	10000426 	beq	r2,zero,a968 <___svfiprintf_internal_r+0xaf0>
    a958:	d9002917 	ldw	r4,164(sp)
    a95c:	d9402717 	ldw	r5,156(sp)
    a960:	d9801a04 	addi	r6,sp,104
    a964:	0009cac0 	call	9cac <__ssprint_r>
    a968:	da802717 	ldw	r10,156(sp)
    a96c:	5080030b 	ldhu	r2,12(r10)
    a970:	1080100c 	andi	r2,r2,64
    a974:	1000511e 	bne	r2,zero,aabc <___svfiprintf_internal_r+0xc44>
    a978:	d8802417 	ldw	r2,144(sp)
    a97c:	dfc03617 	ldw	ra,216(sp)
    a980:	df003517 	ldw	fp,212(sp)
    a984:	ddc03417 	ldw	r23,208(sp)
    a988:	dd803317 	ldw	r22,204(sp)
    a98c:	dd403217 	ldw	r21,200(sp)
    a990:	dd003117 	ldw	r20,196(sp)
    a994:	dcc03017 	ldw	r19,192(sp)
    a998:	dc802f17 	ldw	r18,188(sp)
    a99c:	dc402e17 	ldw	r17,184(sp)
    a9a0:	dc002d17 	ldw	r16,180(sp)
    a9a4:	dec03704 	addi	sp,sp,220
    a9a8:	f800283a 	ret
    a9ac:	da802117 	ldw	r10,132(sp)
    a9b0:	dac02017 	ldw	r11,128(sp)
    a9b4:	52edc83a 	sub	r22,r10,r11
    a9b8:	05bf540e 	bge	zero,r22,a70c <__alt_mem_Flash_flash_data+0xf400a70c>
    a9bc:	02400404 	movi	r9,16
    a9c0:	4d81210e 	bge	r9,r22,ae48 <___svfiprintf_internal_r+0xfd0>
    a9c4:	014000b4 	movhi	r5,2
    a9c8:	29720704 	addi	r5,r5,-14308
    a9cc:	d9402215 	stw	r5,136(sp)
    a9d0:	05c001c4 	movi	r23,7
    a9d4:	00000306 	br	a9e4 <___svfiprintf_internal_r+0xb6c>
    a9d8:	b5bffc04 	addi	r22,r22,-16
    a9dc:	42000204 	addi	r8,r8,8
    a9e0:	4d80130e 	bge	r9,r22,aa30 <___svfiprintf_internal_r+0xbb8>
    a9e4:	18c00404 	addi	r3,r3,16
    a9e8:	10800044 	addi	r2,r2,1
    a9ec:	44c00015 	stw	r19,0(r8)
    a9f0:	42400115 	stw	r9,4(r8)
    a9f4:	d8c01c15 	stw	r3,112(sp)
    a9f8:	d8801b15 	stw	r2,108(sp)
    a9fc:	b8bff60e 	bge	r23,r2,a9d8 <__alt_mem_Flash_flash_data+0xf400a9d8>
    aa00:	9009883a 	mov	r4,r18
    aa04:	a00b883a 	mov	r5,r20
    aa08:	d9801a04 	addi	r6,sp,104
    aa0c:	da402c15 	stw	r9,176(sp)
    aa10:	0009cac0 	call	9cac <__ssprint_r>
    aa14:	da402c17 	ldw	r9,176(sp)
    aa18:	103fd31e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    aa1c:	b5bffc04 	addi	r22,r22,-16
    aa20:	d8c01c17 	ldw	r3,112(sp)
    aa24:	d8801b17 	ldw	r2,108(sp)
    aa28:	d811883a 	mov	r8,sp
    aa2c:	4dbfed16 	blt	r9,r22,a9e4 <__alt_mem_Flash_flash_data+0xf400a9e4>
    aa30:	da802217 	ldw	r10,136(sp)
    aa34:	1d87883a 	add	r3,r3,r22
    aa38:	10800044 	addi	r2,r2,1
    aa3c:	42800015 	stw	r10,0(r8)
    aa40:	45800115 	stw	r22,4(r8)
    aa44:	d8c01c15 	stw	r3,112(sp)
    aa48:	d8801b15 	stw	r2,108(sp)
    aa4c:	010001c4 	movi	r4,7
    aa50:	2080c616 	blt	r4,r2,ad6c <___svfiprintf_internal_r+0xef4>
    aa54:	42000204 	addi	r8,r8,8
    aa58:	003f2c06 	br	a70c <__alt_mem_Flash_flash_data+0xf400a70c>
    aa5c:	9009883a 	mov	r4,r18
    aa60:	a00b883a 	mov	r5,r20
    aa64:	d9801a04 	addi	r6,sp,104
    aa68:	0009cac0 	call	9cac <__ssprint_r>
    aa6c:	103fbe1e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    aa70:	d8c01c17 	ldw	r3,112(sp)
    aa74:	d811883a 	mov	r8,sp
    aa78:	003f5606 	br	a7d4 <__alt_mem_Flash_flash_data+0xf400a7d4>
    aa7c:	9009883a 	mov	r4,r18
    aa80:	a00b883a 	mov	r5,r20
    aa84:	d9801a04 	addi	r6,sp,104
    aa88:	0009cac0 	call	9cac <__ssprint_r>
    aa8c:	103f8626 	beq	r2,zero,a8a8 <__alt_mem_Flash_flash_data+0xf400a8a8>
    aa90:	003fb506 	br	a968 <__alt_mem_Flash_flash_data+0xf400a968>
    aa94:	10803fcc 	andi	r2,r2,255
    aa98:	10003b1e 	bne	r2,zero,ab88 <___svfiprintf_internal_r+0xd10>
    aa9c:	8880004c 	andi	r2,r17,1
    aaa0:	10007d26 	beq	r2,zero,ac98 <___svfiprintf_internal_r+0xe20>
    aaa4:	00800c04 	movi	r2,48
    aaa8:	d8c019c4 	addi	r3,sp,103
    aaac:	d88019c5 	stb	r2,103(sp)
    aab0:	df002b17 	ldw	fp,172(sp)
    aab4:	d8c02615 	stw	r3,152(sp)
    aab8:	003dc506 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    aabc:	00bfffc4 	movi	r2,-1
    aac0:	003fae06 	br	a97c <__alt_mem_Flash_flash_data+0xf400a97c>
    aac4:	9009883a 	mov	r4,r18
    aac8:	a00b883a 	mov	r5,r20
    aacc:	d9801a04 	addi	r6,sp,104
    aad0:	0009cac0 	call	9cac <__ssprint_r>
    aad4:	103fa41e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    aad8:	d811883a 	mov	r8,sp
    aadc:	003d2206 	br	9f68 <__alt_mem_Flash_flash_data+0xf4009f68>
    aae0:	9009883a 	mov	r4,r18
    aae4:	a00b883a 	mov	r5,r20
    aae8:	d9801a04 	addi	r6,sp,104
    aaec:	0009cac0 	call	9cac <__ssprint_r>
    aaf0:	103f9d1e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    aaf4:	d8c01c17 	ldw	r3,112(sp)
    aaf8:	d8801b17 	ldw	r2,108(sp)
    aafc:	d811883a 	mov	r8,sp
    ab00:	003f2a06 	br	a7ac <__alt_mem_Flash_flash_data+0xf400a7ac>
    ab04:	d9402a17 	ldw	r5,168(sp)
    ab08:	d8c01a04 	addi	r3,sp,104
    ab0c:	488003cc 	andi	r2,r9,15
    ab10:	5008973a 	slli	r4,r10,28
    ab14:	2885883a 	add	r2,r5,r2
    ab18:	4812d13a 	srli	r9,r9,4
    ab1c:	10800003 	ldbu	r2,0(r2)
    ab20:	5014d13a 	srli	r10,r10,4
    ab24:	18ffffc4 	addi	r3,r3,-1
    ab28:	2252b03a 	or	r9,r4,r9
    ab2c:	18800005 	stb	r2,0(r3)
    ab30:	4a84b03a 	or	r2,r9,r10
    ab34:	103ff51e 	bne	r2,zero,ab0c <__alt_mem_Flash_flash_data+0xf400ab0c>
    ab38:	d8c02615 	stw	r3,152(sp)
    ab3c:	003da206 	br	a1c8 <__alt_mem_Flash_flash_data+0xf400a1c8>
    ab40:	9009883a 	mov	r4,r18
    ab44:	a00b883a 	mov	r5,r20
    ab48:	d9801a04 	addi	r6,sp,104
    ab4c:	0009cac0 	call	9cac <__ssprint_r>
    ab50:	103f851e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    ab54:	d8c01c17 	ldw	r3,112(sp)
    ab58:	d8801b17 	ldw	r2,108(sp)
    ab5c:	d811883a 	mov	r8,sp
    ab60:	003eda06 	br	a6cc <__alt_mem_Flash_flash_data+0xf400a6cc>
    ab64:	9009883a 	mov	r4,r18
    ab68:	a00b883a 	mov	r5,r20
    ab6c:	d9801a04 	addi	r6,sp,104
    ab70:	0009cac0 	call	9cac <__ssprint_r>
    ab74:	103f7c1e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    ab78:	d8c01c17 	ldw	r3,112(sp)
    ab7c:	d8801b17 	ldw	r2,108(sp)
    ab80:	d811883a 	mov	r8,sp
    ab84:	003ede06 	br	a700 <__alt_mem_Flash_flash_data+0xf400a700>
    ab88:	da801a04 	addi	r10,sp,104
    ab8c:	da802615 	stw	r10,152(sp)
    ab90:	003d8f06 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    ab94:	8880040c 	andi	r2,r17,16
    ab98:	10004c1e 	bne	r2,zero,accc <___svfiprintf_internal_r+0xe54>
    ab9c:	8880100c 	andi	r2,r17,64
    aba0:	da802317 	ldw	r10,140(sp)
    aba4:	10004a26 	beq	r2,zero,acd0 <___svfiprintf_internal_r+0xe58>
    aba8:	5240000b 	ldhu	r9,0(r10)
    abac:	dac02317 	ldw	r11,140(sp)
    abb0:	0015883a 	mov	r10,zero
    abb4:	00800044 	movi	r2,1
    abb8:	5ac00104 	addi	r11,r11,4
    abbc:	dac02315 	stw	r11,140(sp)
    abc0:	4807883a 	mov	r3,r9
    abc4:	003d6506 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    abc8:	9009883a 	mov	r4,r18
    abcc:	a00b883a 	mov	r5,r20
    abd0:	d9801a04 	addi	r6,sp,104
    abd4:	0009cac0 	call	9cac <__ssprint_r>
    abd8:	103f631e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    abdc:	d8c01c17 	ldw	r3,112(sp)
    abe0:	d8801b17 	ldw	r2,108(sp)
    abe4:	d811883a 	mov	r8,sp
    abe8:	003eab06 	br	a698 <__alt_mem_Flash_flash_data+0xf400a698>
    abec:	8880040c 	andi	r2,r17,16
    abf0:	1000331e 	bne	r2,zero,acc0 <___svfiprintf_internal_r+0xe48>
    abf4:	8880100c 	andi	r2,r17,64
    abf8:	da802317 	ldw	r10,140(sp)
    abfc:	10003126 	beq	r2,zero,acc4 <___svfiprintf_internal_r+0xe4c>
    ac00:	5240000b 	ldhu	r9,0(r10)
    ac04:	dac02317 	ldw	r11,140(sp)
    ac08:	0015883a 	mov	r10,zero
    ac0c:	0005883a 	mov	r2,zero
    ac10:	5ac00104 	addi	r11,r11,4
    ac14:	dac02315 	stw	r11,140(sp)
    ac18:	4807883a 	mov	r3,r9
    ac1c:	003d4f06 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    ac20:	10803fcc 	andi	r2,r2,255
    ac24:	1080201c 	xori	r2,r2,128
    ac28:	10bfe004 	addi	r2,r2,-128
    ac2c:	01000c04 	movi	r4,48
    ac30:	11005b26 	beq	r2,r4,ada0 <___svfiprintf_internal_r+0xf28>
    ac34:	da802617 	ldw	r10,152(sp)
    ac38:	d8801e17 	ldw	r2,120(sp)
    ac3c:	193fffc5 	stb	r4,-1(r3)
    ac40:	52bfffc4 	addi	r10,r10,-1
    ac44:	da802615 	stw	r10,152(sp)
    ac48:	12b9c83a 	sub	fp,r2,r10
    ac4c:	003d6006 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    ac50:	00800244 	movi	r2,9
    ac54:	127f1e36 	bltu	r2,r9,a8d0 <__alt_mem_Flash_flash_data+0xf400a8d0>
    ac58:	4a400c04 	addi	r9,r9,48
    ac5c:	d8c019c4 	addi	r3,sp,103
    ac60:	da4019c5 	stb	r9,103(sp)
    ac64:	df002b17 	ldw	fp,172(sp)
    ac68:	d8c02615 	stw	r3,152(sp)
    ac6c:	003d5806 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    ac70:	d8802315 	stw	r2,140(sp)
    ac74:	a9000007 	ldb	r4,0(r21)
    ac78:	003ccb06 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    ac7c:	9009883a 	mov	r4,r18
    ac80:	a00b883a 	mov	r5,r20
    ac84:	d9801a04 	addi	r6,sp,104
    ac88:	0009cac0 	call	9cac <__ssprint_r>
    ac8c:	103f361e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    ac90:	d8c01c17 	ldw	r3,112(sp)
    ac94:	003efc06 	br	a888 <__alt_mem_Flash_flash_data+0xf400a888>
    ac98:	d8c01a04 	addi	r3,sp,104
    ac9c:	d8c02615 	stw	r3,152(sp)
    aca0:	003d4b06 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    aca4:	da802317 	ldw	r10,140(sp)
    aca8:	1a400017 	ldw	r9,0(r3)
    acac:	52800104 	addi	r10,r10,4
    acb0:	da802315 	stw	r10,140(sp)
    acb4:	4815d7fa 	srai	r10,r9,31
    acb8:	5005883a 	mov	r2,r10
    acbc:	003d9c06 	br	a330 <__alt_mem_Flash_flash_data+0xf400a330>
    acc0:	da802317 	ldw	r10,140(sp)
    acc4:	52400017 	ldw	r9,0(r10)
    acc8:	003fce06 	br	ac04 <__alt_mem_Flash_flash_data+0xf400ac04>
    accc:	da802317 	ldw	r10,140(sp)
    acd0:	52400017 	ldw	r9,0(r10)
    acd4:	003fb506 	br	abac <__alt_mem_Flash_flash_data+0xf400abac>
    acd8:	8880100c 	andi	r2,r17,64
    acdc:	da802317 	ldw	r10,140(sp)
    ace0:	103e1926 	beq	r2,zero,a548 <__alt_mem_Flash_flash_data+0xf400a548>
    ace4:	dac02317 	ldw	r11,140(sp)
    ace8:	5240000b 	ldhu	r9,0(r10)
    acec:	0015883a 	mov	r10,zero
    acf0:	5ac00104 	addi	r11,r11,4
    acf4:	dac02315 	stw	r11,140(sp)
    acf8:	003de406 	br	a48c <__alt_mem_Flash_flash_data+0xf400a48c>
    acfc:	a9000007 	ldb	r4,0(r21)
    ad00:	003ca906 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    ad04:	dac02317 	ldw	r11,140(sp)
    ad08:	da802417 	ldw	r10,144(sp)
    ad0c:	58800017 	ldw	r2,0(r11)
    ad10:	5007d7fa 	srai	r3,r10,31
    ad14:	5ac00104 	addi	r11,r11,4
    ad18:	dac02315 	stw	r11,140(sp)
    ad1c:	12800015 	stw	r10,0(r2)
    ad20:	10c00115 	stw	r3,4(r2)
    ad24:	003c7806 	br	9f08 <__alt_mem_Flash_flash_data+0xf4009f08>
    ad28:	00800c04 	movi	r2,48
    ad2c:	d8801d05 	stb	r2,116(sp)
    ad30:	d9001d45 	stb	r4,117(sp)
    ad34:	8c400094 	ori	r17,r17,2
    ad38:	00800084 	movi	r2,2
    ad3c:	003d0706 	br	a15c <__alt_mem_Flash_flash_data+0xf400a15c>
    ad40:	ad400044 	addi	r21,r21,1
    ad44:	8c400814 	ori	r17,r17,32
    ad48:	11000047 	ldb	r4,1(r2)
    ad4c:	003c9606 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    ad50:	dac02317 	ldw	r11,140(sp)
    ad54:	da802417 	ldw	r10,144(sp)
    ad58:	58800017 	ldw	r2,0(r11)
    ad5c:	5ac00104 	addi	r11,r11,4
    ad60:	dac02315 	stw	r11,140(sp)
    ad64:	12800015 	stw	r10,0(r2)
    ad68:	003c6706 	br	9f08 <__alt_mem_Flash_flash_data+0xf4009f08>
    ad6c:	9009883a 	mov	r4,r18
    ad70:	a00b883a 	mov	r5,r20
    ad74:	d9801a04 	addi	r6,sp,104
    ad78:	0009cac0 	call	9cac <__ssprint_r>
    ad7c:	103efa1e 	bne	r2,zero,a968 <__alt_mem_Flash_flash_data+0xf400a968>
    ad80:	d8c01c17 	ldw	r3,112(sp)
    ad84:	d8801b17 	ldw	r2,108(sp)
    ad88:	d811883a 	mov	r8,sp
    ad8c:	003e5f06 	br	a70c <__alt_mem_Flash_flash_data+0xf400a70c>
    ad90:	02c000b4 	movhi	r11,2
    ad94:	5af20704 	addi	r11,r11,-14308
    ad98:	dac02215 	stw	r11,136(sp)
    ad9c:	003e7906 	br	a784 <__alt_mem_Flash_flash_data+0xf400a784>
    ada0:	da801e17 	ldw	r10,120(sp)
    ada4:	d8c02617 	ldw	r3,152(sp)
    ada8:	50f9c83a 	sub	fp,r10,r3
    adac:	003d0806 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    adb0:	da002c15 	stw	r8,176(sp)
    adb4:	0000c800 	call	c80 <strlen>
    adb8:	1039883a 	mov	fp,r2
    adbc:	dac01d83 	ldbu	r11,118(sp)
    adc0:	ddc02315 	stw	r23,140(sp)
    adc4:	0021883a 	mov	r16,zero
    adc8:	da002c17 	ldw	r8,176(sp)
    adcc:	003d0006 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    add0:	00800184 	movi	r2,6
    add4:	1400012e 	bgeu	r2,r16,addc <___svfiprintf_internal_r+0xf64>
    add8:	1021883a 	mov	r16,r2
    addc:	8039883a 	mov	fp,r16
    ade0:	802d883a 	mov	r22,r16
    ade4:	80002116 	blt	r16,zero,ae6c <___svfiprintf_internal_r+0xff4>
    ade8:	008000b4 	movhi	r2,2
    adec:	10b1a304 	addi	r2,r2,-14708
    adf0:	dd802015 	stw	r22,128(sp)
    adf4:	ddc02315 	stw	r23,140(sp)
    adf8:	d8802615 	stw	r2,152(sp)
    adfc:	003d5d06 	br	a374 <__alt_mem_Flash_flash_data+0xf400a374>
    ae00:	04001004 	movi	r16,64
    ae04:	800b883a 	mov	r5,r16
    ae08:	0007a7c0 	call	7a7c <_malloc_r>
    ae0c:	da802717 	ldw	r10,156(sp)
    ae10:	50800015 	stw	r2,0(r10)
    ae14:	50800415 	stw	r2,16(r10)
    ae18:	10002026 	beq	r2,zero,ae9c <___svfiprintf_internal_r+0x1024>
    ae1c:	da802717 	ldw	r10,156(sp)
    ae20:	54000515 	stw	r16,20(r10)
    ae24:	003c2806 	br	9ec8 <__alt_mem_Flash_flash_data+0xf4009ec8>
    ae28:	010000b4 	movhi	r4,2
    ae2c:	21320b04 	addi	r4,r4,-14292
    ae30:	d9002815 	stw	r4,160(sp)
    ae34:	003d7e06 	br	a430 <__alt_mem_Flash_flash_data+0xf400a430>
    ae38:	010000b4 	movhi	r4,2
    ae3c:	21320b04 	addi	r4,r4,-14292
    ae40:	d9002815 	stw	r4,160(sp)
    ae44:	003e8706 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    ae48:	010000b4 	movhi	r4,2
    ae4c:	21320704 	addi	r4,r4,-14308
    ae50:	d9002215 	stw	r4,136(sp)
    ae54:	003ef606 	br	aa30 <__alt_mem_Flash_flash_data+0xf400aa30>
    ae58:	8039883a 	mov	fp,r16
    ae5c:	dac01d83 	ldbu	r11,118(sp)
    ae60:	ddc02315 	stw	r23,140(sp)
    ae64:	0021883a 	mov	r16,zero
    ae68:	003cd906 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    ae6c:	002d883a 	mov	r22,zero
    ae70:	003fdd06 	br	ade8 <__alt_mem_Flash_flash_data+0xf400ade8>
    ae74:	dac02317 	ldw	r11,140(sp)
    ae78:	a805883a 	mov	r2,r21
    ae7c:	502b883a 	mov	r21,r10
    ae80:	5c000017 	ldw	r16,0(r11)
    ae84:	59000104 	addi	r4,r11,4
    ae88:	d9002315 	stw	r4,140(sp)
    ae8c:	803fae0e 	bge	r16,zero,ad48 <__alt_mem_Flash_flash_data+0xf400ad48>
    ae90:	043fffc4 	movi	r16,-1
    ae94:	11000047 	ldb	r4,1(r2)
    ae98:	003c4306 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    ae9c:	dac02917 	ldw	r11,164(sp)
    aea0:	00800304 	movi	r2,12
    aea4:	58800015 	stw	r2,0(r11)
    aea8:	00bfffc4 	movi	r2,-1
    aeac:	003eb306 	br	a97c <__alt_mem_Flash_flash_data+0xf400a97c>

0000aeb0 <__sprint_r.part.0>:
    aeb0:	28801917 	ldw	r2,100(r5)
    aeb4:	defff604 	addi	sp,sp,-40
    aeb8:	dd400515 	stw	r21,20(sp)
    aebc:	dcc00315 	stw	r19,12(sp)
    aec0:	dfc00915 	stw	ra,36(sp)
    aec4:	df000815 	stw	fp,32(sp)
    aec8:	ddc00715 	stw	r23,28(sp)
    aecc:	dd800615 	stw	r22,24(sp)
    aed0:	dd000415 	stw	r20,16(sp)
    aed4:	dc800215 	stw	r18,8(sp)
    aed8:	dc400115 	stw	r17,4(sp)
    aedc:	dc000015 	stw	r16,0(sp)
    aee0:	1088000c 	andi	r2,r2,8192
    aee4:	2827883a 	mov	r19,r5
    aee8:	302b883a 	mov	r21,r6
    aeec:	10002d26 	beq	r2,zero,afa4 <__sprint_r.part.0+0xf4>
    aef0:	30800217 	ldw	r2,8(r6)
    aef4:	35800017 	ldw	r22,0(r6)
    aef8:	10002826 	beq	r2,zero,af9c <__sprint_r.part.0+0xec>
    aefc:	2029883a 	mov	r20,r4
    af00:	b5c00104 	addi	r23,r22,4
    af04:	04bfffc4 	movi	r18,-1
    af08:	bc400017 	ldw	r17,0(r23)
    af0c:	b4000017 	ldw	r16,0(r22)
    af10:	0039883a 	mov	fp,zero
    af14:	8822d0ba 	srli	r17,r17,2
    af18:	04400316 	blt	zero,r17,af28 <__sprint_r.part.0+0x78>
    af1c:	00001806 	br	af80 <__sprint_r.part.0+0xd0>
    af20:	84000104 	addi	r16,r16,4
    af24:	8f001526 	beq	r17,fp,af7c <__sprint_r.part.0+0xcc>
    af28:	81400017 	ldw	r5,0(r16)
    af2c:	a009883a 	mov	r4,r20
    af30:	980d883a 	mov	r6,r19
    af34:	000c5ec0 	call	c5ec <_fputwc_r>
    af38:	e7000044 	addi	fp,fp,1
    af3c:	14bff81e 	bne	r2,r18,af20 <__alt_mem_Flash_flash_data+0xf400af20>
    af40:	9005883a 	mov	r2,r18
    af44:	a8000215 	stw	zero,8(r21)
    af48:	a8000115 	stw	zero,4(r21)
    af4c:	dfc00917 	ldw	ra,36(sp)
    af50:	df000817 	ldw	fp,32(sp)
    af54:	ddc00717 	ldw	r23,28(sp)
    af58:	dd800617 	ldw	r22,24(sp)
    af5c:	dd400517 	ldw	r21,20(sp)
    af60:	dd000417 	ldw	r20,16(sp)
    af64:	dcc00317 	ldw	r19,12(sp)
    af68:	dc800217 	ldw	r18,8(sp)
    af6c:	dc400117 	ldw	r17,4(sp)
    af70:	dc000017 	ldw	r16,0(sp)
    af74:	dec00a04 	addi	sp,sp,40
    af78:	f800283a 	ret
    af7c:	a8800217 	ldw	r2,8(r21)
    af80:	8c63883a 	add	r17,r17,r17
    af84:	8c63883a 	add	r17,r17,r17
    af88:	1445c83a 	sub	r2,r2,r17
    af8c:	a8800215 	stw	r2,8(r21)
    af90:	b5800204 	addi	r22,r22,8
    af94:	bdc00204 	addi	r23,r23,8
    af98:	103fdb1e 	bne	r2,zero,af08 <__alt_mem_Flash_flash_data+0xf400af08>
    af9c:	0005883a 	mov	r2,zero
    afa0:	003fe806 	br	af44 <__alt_mem_Flash_flash_data+0xf400af44>
    afa4:	000719c0 	call	719c <__sfvwrite_r>
    afa8:	003fe606 	br	af44 <__alt_mem_Flash_flash_data+0xf400af44>

0000afac <__sprint_r>:
    afac:	30c00217 	ldw	r3,8(r6)
    afb0:	18000126 	beq	r3,zero,afb8 <__sprint_r+0xc>
    afb4:	000aeb01 	jmpi	aeb0 <__sprint_r.part.0>
    afb8:	30000115 	stw	zero,4(r6)
    afbc:	0005883a 	mov	r2,zero
    afc0:	f800283a 	ret

0000afc4 <___vfiprintf_internal_r>:
    afc4:	deffca04 	addi	sp,sp,-216
    afc8:	dd803215 	stw	r22,200(sp)
    afcc:	dd403115 	stw	r21,196(sp)
    afd0:	dfc03515 	stw	ra,212(sp)
    afd4:	df003415 	stw	fp,208(sp)
    afd8:	ddc03315 	stw	r23,204(sp)
    afdc:	dd003015 	stw	r20,192(sp)
    afe0:	dcc02f15 	stw	r19,188(sp)
    afe4:	dc802e15 	stw	r18,184(sp)
    afe8:	dc402d15 	stw	r17,180(sp)
    afec:	dc002c15 	stw	r16,176(sp)
    aff0:	d9002015 	stw	r4,128(sp)
    aff4:	d9c02215 	stw	r7,136(sp)
    aff8:	282b883a 	mov	r21,r5
    affc:	302d883a 	mov	r22,r6
    b000:	20000226 	beq	r4,zero,b00c <___vfiprintf_internal_r+0x48>
    b004:	20800e17 	ldw	r2,56(r4)
    b008:	1001b126 	beq	r2,zero,b6d0 <___vfiprintf_internal_r+0x70c>
    b00c:	a880030b 	ldhu	r2,12(r21)
    b010:	10c8000c 	andi	r3,r2,8192
    b014:	1800061e 	bne	r3,zero,b030 <___vfiprintf_internal_r+0x6c>
    b018:	a9001917 	ldw	r4,100(r21)
    b01c:	00f7ffc4 	movi	r3,-8193
    b020:	10880014 	ori	r2,r2,8192
    b024:	20c6703a 	and	r3,r4,r3
    b028:	a880030d 	sth	r2,12(r21)
    b02c:	a8c01915 	stw	r3,100(r21)
    b030:	10c0020c 	andi	r3,r2,8
    b034:	18018926 	beq	r3,zero,b65c <___vfiprintf_internal_r+0x698>
    b038:	a8c00417 	ldw	r3,16(r21)
    b03c:	18018726 	beq	r3,zero,b65c <___vfiprintf_internal_r+0x698>
    b040:	1080068c 	andi	r2,r2,26
    b044:	00c00284 	movi	r3,10
    b048:	10c18c26 	beq	r2,r3,b67c <___vfiprintf_internal_r+0x6b8>
    b04c:	d8801a04 	addi	r2,sp,104
    b050:	d8c019c4 	addi	r3,sp,103
    b054:	070000b4 	movhi	fp,2
    b058:	05c000b4 	movhi	r23,2
    b05c:	10c9c83a 	sub	r4,r2,r3
    b060:	e7321304 	addi	fp,fp,-14260
    b064:	bdf20f04 	addi	r23,r23,-14276
    b068:	d8801e15 	stw	r2,120(sp)
    b06c:	d8c01f15 	stw	r3,124(sp)
    b070:	dec01a15 	stw	sp,104(sp)
    b074:	d8001c15 	stw	zero,112(sp)
    b078:	d8001b15 	stw	zero,108(sp)
    b07c:	d8002615 	stw	zero,152(sp)
    b080:	d8002315 	stw	zero,140(sp)
    b084:	d9002715 	stw	r4,156(sp)
    b088:	d811883a 	mov	r8,sp
    b08c:	dd402115 	stw	r21,132(sp)
    b090:	b021883a 	mov	r16,r22
    b094:	80800007 	ldb	r2,0(r16)
    b098:	10037226 	beq	r2,zero,be64 <___vfiprintf_internal_r+0xea0>
    b09c:	01000944 	movi	r4,37
    b0a0:	11037026 	beq	r2,r4,be64 <___vfiprintf_internal_r+0xea0>
    b0a4:	8005883a 	mov	r2,r16
    b0a8:	00000106 	br	b0b0 <___vfiprintf_internal_r+0xec>
    b0ac:	19000326 	beq	r3,r4,b0bc <___vfiprintf_internal_r+0xf8>
    b0b0:	10800044 	addi	r2,r2,1
    b0b4:	10c00007 	ldb	r3,0(r2)
    b0b8:	183ffc1e 	bne	r3,zero,b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b0bc:	1425c83a 	sub	r18,r2,r16
    b0c0:	1023883a 	mov	r17,r2
    b0c4:	90001026 	beq	r18,zero,b108 <___vfiprintf_internal_r+0x144>
    b0c8:	d8c01c17 	ldw	r3,112(sp)
    b0cc:	d8801b17 	ldw	r2,108(sp)
    b0d0:	44000015 	stw	r16,0(r8)
    b0d4:	90c7883a 	add	r3,r18,r3
    b0d8:	10800044 	addi	r2,r2,1
    b0dc:	44800115 	stw	r18,4(r8)
    b0e0:	d8c01c15 	stw	r3,112(sp)
    b0e4:	d8801b15 	stw	r2,108(sp)
    b0e8:	010001c4 	movi	r4,7
    b0ec:	2080750e 	bge	r4,r2,b2c4 <___vfiprintf_internal_r+0x300>
    b0f0:	18036f1e 	bne	r3,zero,beb0 <___vfiprintf_internal_r+0xeec>
    b0f4:	d8802317 	ldw	r2,140(sp)
    b0f8:	d8001b15 	stw	zero,108(sp)
    b0fc:	d811883a 	mov	r8,sp
    b100:	1485883a 	add	r2,r2,r18
    b104:	d8802315 	stw	r2,140(sp)
    b108:	88800007 	ldb	r2,0(r17)
    b10c:	10041026 	beq	r2,zero,c150 <___vfiprintf_internal_r+0x118c>
    b110:	88c00047 	ldb	r3,1(r17)
    b114:	88800044 	addi	r2,r17,1
    b118:	d8001d85 	stb	zero,118(sp)
    b11c:	000f883a 	mov	r7,zero
    b120:	027fffc4 	movi	r9,-1
    b124:	0025883a 	mov	r18,zero
    b128:	002b883a 	mov	r21,zero
    b12c:	01401604 	movi	r5,88
    b130:	01800244 	movi	r6,9
    b134:	03400a84 	movi	r13,42
    b138:	03001b04 	movi	r12,108
    b13c:	14000044 	addi	r16,r2,1
    b140:	18bff804 	addi	r2,r3,-32
    b144:	28825536 	bltu	r5,r2,ba9c <___vfiprintf_internal_r+0xad8>
    b148:	100490ba 	slli	r2,r2,2
    b14c:	01000074 	movhi	r4,1
    b150:	212c5804 	addi	r4,r4,-20128
    b154:	1105883a 	add	r2,r2,r4
    b158:	10800017 	ldw	r2,0(r2)
    b15c:	1000683a 	jmp	r2
    b160:	0000b860 	cmpeqi	zero,zero,737
    b164:	0000ba9c 	xori	zero,zero,746
    b168:	0000ba9c 	xori	zero,zero,746
    b16c:	0000b880 	call	b88 <sprintf+0x18>
    b170:	0000ba9c 	xori	zero,zero,746
    b174:	0000ba9c 	xori	zero,zero,746
    b178:	0000ba9c 	xori	zero,zero,746
    b17c:	0000ba9c 	xori	zero,zero,746
    b180:	0000ba9c 	xori	zero,zero,746
    b184:	0000ba9c 	xori	zero,zero,746
    b188:	0000b890 	cmplti	zero,zero,738
    b18c:	0000b8b0 	cmpltui	zero,zero,738
    b190:	0000ba9c 	xori	zero,zero,746
    b194:	0000b6d8 	cmpnei	zero,zero,731
    b198:	0000b7c4 	movi	zero,735
    b19c:	0000ba9c 	xori	zero,zero,746
    b1a0:	0000b744 	movi	zero,733
    b1a4:	0000b754 	movui	zero,733
    b1a8:	0000b754 	movui	zero,733
    b1ac:	0000b754 	movui	zero,733
    b1b0:	0000b754 	movui	zero,733
    b1b4:	0000b754 	movui	zero,733
    b1b8:	0000b754 	movui	zero,733
    b1bc:	0000b754 	movui	zero,733
    b1c0:	0000b754 	movui	zero,733
    b1c4:	0000b754 	movui	zero,733
    b1c8:	0000ba9c 	xori	zero,zero,746
    b1cc:	0000ba9c 	xori	zero,zero,746
    b1d0:	0000ba9c 	xori	zero,zero,746
    b1d4:	0000ba9c 	xori	zero,zero,746
    b1d8:	0000ba9c 	xori	zero,zero,746
    b1dc:	0000ba9c 	xori	zero,zero,746
    b1e0:	0000ba9c 	xori	zero,zero,746
    b1e4:	0000ba9c 	xori	zero,zero,746
    b1e8:	0000ba9c 	xori	zero,zero,746
    b1ec:	0000ba9c 	xori	zero,zero,746
    b1f0:	0000b780 	call	b78 <sprintf+0x8>
    b1f4:	0000ba9c 	xori	zero,zero,746
    b1f8:	0000ba9c 	xori	zero,zero,746
    b1fc:	0000ba9c 	xori	zero,zero,746
    b200:	0000ba9c 	xori	zero,zero,746
    b204:	0000ba9c 	xori	zero,zero,746
    b208:	0000ba9c 	xori	zero,zero,746
    b20c:	0000ba9c 	xori	zero,zero,746
    b210:	0000ba9c 	xori	zero,zero,746
    b214:	0000ba9c 	xori	zero,zero,746
    b218:	0000ba9c 	xori	zero,zero,746
    b21c:	0000b30c 	andi	zero,zero,716
    b220:	0000ba9c 	xori	zero,zero,746
    b224:	0000ba9c 	xori	zero,zero,746
    b228:	0000ba9c 	xori	zero,zero,746
    b22c:	0000ba9c 	xori	zero,zero,746
    b230:	0000ba9c 	xori	zero,zero,746
    b234:	0000b2d8 	cmpnei	zero,zero,715
    b238:	0000ba9c 	xori	zero,zero,746
    b23c:	0000ba9c 	xori	zero,zero,746
    b240:	0000b920 	cmpeqi	zero,zero,740
    b244:	0000ba9c 	xori	zero,zero,746
    b248:	0000ba9c 	xori	zero,zero,746
    b24c:	0000ba9c 	xori	zero,zero,746
    b250:	0000ba9c 	xori	zero,zero,746
    b254:	0000ba9c 	xori	zero,zero,746
    b258:	0000ba9c 	xori	zero,zero,746
    b25c:	0000ba9c 	xori	zero,zero,746
    b260:	0000ba9c 	xori	zero,zero,746
    b264:	0000ba9c 	xori	zero,zero,746
    b268:	0000ba9c 	xori	zero,zero,746
    b26c:	0000b8c0 	call	b8c <sprintf+0x1c>
    b270:	0000b8ec 	andhi	zero,zero,739
    b274:	0000ba9c 	xori	zero,zero,746
    b278:	0000ba9c 	xori	zero,zero,746
    b27c:	0000ba9c 	xori	zero,zero,746
    b280:	0000b9c8 	cmpgei	zero,zero,743
    b284:	0000b8ec 	andhi	zero,zero,739
    b288:	0000ba9c 	xori	zero,zero,746
    b28c:	0000ba9c 	xori	zero,zero,746
    b290:	0000b9d8 	cmpnei	zero,zero,743
    b294:	0000ba9c 	xori	zero,zero,746
    b298:	0000b804 	movi	zero,736
    b29c:	0000b310 	cmplti	zero,zero,716
    b2a0:	0000b9ec 	andhi	zero,zero,743
    b2a4:	0000ba2c 	andhi	zero,zero,744
    b2a8:	0000ba9c 	xori	zero,zero,746
    b2ac:	0000b974 	movhi	zero,741
    b2b0:	0000ba9c 	xori	zero,zero,746
    b2b4:	0000b2dc 	xori	zero,zero,715
    b2b8:	0000ba9c 	xori	zero,zero,746
    b2bc:	0000ba9c 	xori	zero,zero,746
    b2c0:	0000ba3c 	xorhi	zero,zero,744
    b2c4:	42000204 	addi	r8,r8,8
    b2c8:	d8802317 	ldw	r2,140(sp)
    b2cc:	1485883a 	add	r2,r2,r18
    b2d0:	d8802315 	stw	r2,140(sp)
    b2d4:	003f8c06 	br	b108 <__alt_mem_Flash_flash_data+0xf400b108>
    b2d8:	ad400414 	ori	r21,r21,16
    b2dc:	a880080c 	andi	r2,r21,32
    b2e0:	1001e61e 	bne	r2,zero,ba7c <___vfiprintf_internal_r+0xab8>
    b2e4:	a880040c 	andi	r2,r21,16
    b2e8:	10034726 	beq	r2,zero,c008 <___vfiprintf_internal_r+0x1044>
    b2ec:	d8802217 	ldw	r2,136(sp)
    b2f0:	001b883a 	mov	r13,zero
    b2f4:	15800017 	ldw	r22,0(r2)
    b2f8:	10800104 	addi	r2,r2,4
    b2fc:	d8802215 	stw	r2,136(sp)
    b300:	b009883a 	mov	r4,r22
    b304:	00800044 	movi	r2,1
    b308:	00000c06 	br	b33c <___vfiprintf_internal_r+0x378>
    b30c:	ad400414 	ori	r21,r21,16
    b310:	a880080c 	andi	r2,r21,32
    b314:	1001491e 	bne	r2,zero,b83c <___vfiprintf_internal_r+0x878>
    b318:	a880040c 	andi	r2,r21,16
    b31c:	10032d26 	beq	r2,zero,bfd4 <___vfiprintf_internal_r+0x1010>
    b320:	d9002217 	ldw	r4,136(sp)
    b324:	001b883a 	mov	r13,zero
    b328:	0005883a 	mov	r2,zero
    b32c:	25800017 	ldw	r22,0(r4)
    b330:	21000104 	addi	r4,r4,4
    b334:	d9002215 	stw	r4,136(sp)
    b338:	b009883a 	mov	r4,r22
    b33c:	d8001d85 	stb	zero,118(sp)
    b340:	4827883a 	mov	r19,r9
    b344:	001d883a 	mov	r14,zero
    b348:	48000216 	blt	r9,zero,b354 <___vfiprintf_internal_r+0x390>
    b34c:	00ffdfc4 	movi	r3,-129
    b350:	a8ea703a 	and	r21,r21,r3
    b354:	2002071e 	bne	r4,zero,bb74 <___vfiprintf_internal_r+0xbb0>
    b358:	4802ad26 	beq	r9,zero,be10 <___vfiprintf_internal_r+0xe4c>
    b35c:	10803fcc 	andi	r2,r2,255
    b360:	00c00044 	movi	r3,1
    b364:	10c22b26 	beq	r2,r3,bc14 <___vfiprintf_internal_r+0xc50>
    b368:	00c00084 	movi	r3,2
    b36c:	dd001a04 	addi	r20,sp,104
    b370:	10c0dd1e 	bne	r2,r3,b6e8 <___vfiprintf_internal_r+0x724>
    b374:	d9002617 	ldw	r4,152(sp)
    b378:	b08003cc 	andi	r2,r22,15
    b37c:	6806973a 	slli	r3,r13,28
    b380:	2085883a 	add	r2,r4,r2
    b384:	b02cd13a 	srli	r22,r22,4
    b388:	10800003 	ldbu	r2,0(r2)
    b38c:	681ad13a 	srli	r13,r13,4
    b390:	a53fffc4 	addi	r20,r20,-1
    b394:	1dacb03a 	or	r22,r3,r22
    b398:	a0800005 	stb	r2,0(r20)
    b39c:	b344b03a 	or	r2,r22,r13
    b3a0:	103ff51e 	bne	r2,zero,b378 <__alt_mem_Flash_flash_data+0xf400b378>
    b3a4:	d9001e17 	ldw	r4,120(sp)
    b3a8:	2527c83a 	sub	r19,r4,r20
    b3ac:	9823883a 	mov	r17,r19
    b3b0:	9a40010e 	bge	r19,r9,b3b8 <___vfiprintf_internal_r+0x3f4>
    b3b4:	4823883a 	mov	r17,r9
    b3b8:	73803fcc 	andi	r14,r14,255
    b3bc:	7380201c 	xori	r14,r14,128
    b3c0:	73bfe004 	addi	r14,r14,-128
    b3c4:	70000126 	beq	r14,zero,b3cc <___vfiprintf_internal_r+0x408>
    b3c8:	8c400044 	addi	r17,r17,1
    b3cc:	ab40008c 	andi	r13,r21,2
    b3d0:	68000126 	beq	r13,zero,b3d8 <___vfiprintf_internal_r+0x414>
    b3d4:	8c400084 	addi	r17,r17,2
    b3d8:	ad80210c 	andi	r22,r21,132
    b3dc:	b001c51e 	bne	r22,zero,baf4 <___vfiprintf_internal_r+0xb30>
    b3e0:	9447c83a 	sub	r3,r18,r17
    b3e4:	00c1c30e 	bge	zero,r3,baf4 <___vfiprintf_internal_r+0xb30>
    b3e8:	01c00404 	movi	r7,16
    b3ec:	d8801c17 	ldw	r2,112(sp)
    b3f0:	38c37b0e 	bge	r7,r3,c1e0 <___vfiprintf_internal_r+0x121c>
    b3f4:	010000b4 	movhi	r4,2
    b3f8:	21321304 	addi	r4,r4,-14260
    b3fc:	dc002915 	stw	r16,164(sp)
    b400:	d9801b17 	ldw	r6,108(sp)
    b404:	d9002415 	stw	r4,144(sp)
    b408:	03c001c4 	movi	r15,7
    b40c:	da402515 	stw	r9,148(sp)
    b410:	db402815 	stw	r13,160(sp)
    b414:	1821883a 	mov	r16,r3
    b418:	00000506 	br	b430 <___vfiprintf_internal_r+0x46c>
    b41c:	31400084 	addi	r5,r6,2
    b420:	42000204 	addi	r8,r8,8
    b424:	200d883a 	mov	r6,r4
    b428:	843ffc04 	addi	r16,r16,-16
    b42c:	3c000d0e 	bge	r7,r16,b464 <___vfiprintf_internal_r+0x4a0>
    b430:	10800404 	addi	r2,r2,16
    b434:	31000044 	addi	r4,r6,1
    b438:	47000015 	stw	fp,0(r8)
    b43c:	41c00115 	stw	r7,4(r8)
    b440:	d8801c15 	stw	r2,112(sp)
    b444:	d9001b15 	stw	r4,108(sp)
    b448:	793ff40e 	bge	r15,r4,b41c <__alt_mem_Flash_flash_data+0xf400b41c>
    b44c:	10019b1e 	bne	r2,zero,babc <___vfiprintf_internal_r+0xaf8>
    b450:	843ffc04 	addi	r16,r16,-16
    b454:	000d883a 	mov	r6,zero
    b458:	01400044 	movi	r5,1
    b45c:	d811883a 	mov	r8,sp
    b460:	3c3ff316 	blt	r7,r16,b430 <__alt_mem_Flash_flash_data+0xf400b430>
    b464:	8007883a 	mov	r3,r16
    b468:	da402517 	ldw	r9,148(sp)
    b46c:	db402817 	ldw	r13,160(sp)
    b470:	dc002917 	ldw	r16,164(sp)
    b474:	d9002417 	ldw	r4,144(sp)
    b478:	1885883a 	add	r2,r3,r2
    b47c:	40c00115 	stw	r3,4(r8)
    b480:	41000015 	stw	r4,0(r8)
    b484:	d8801c15 	stw	r2,112(sp)
    b488:	d9401b15 	stw	r5,108(sp)
    b48c:	00c001c4 	movi	r3,7
    b490:	19426a16 	blt	r3,r5,be3c <___vfiprintf_internal_r+0xe78>
    b494:	d8c01d87 	ldb	r3,118(sp)
    b498:	42000204 	addi	r8,r8,8
    b49c:	29000044 	addi	r4,r5,1
    b4a0:	1801991e 	bne	r3,zero,bb08 <___vfiprintf_internal_r+0xb44>
    b4a4:	68000c26 	beq	r13,zero,b4d8 <___vfiprintf_internal_r+0x514>
    b4a8:	d8c01d04 	addi	r3,sp,116
    b4ac:	10800084 	addi	r2,r2,2
    b4b0:	40c00015 	stw	r3,0(r8)
    b4b4:	00c00084 	movi	r3,2
    b4b8:	40c00115 	stw	r3,4(r8)
    b4bc:	d8801c15 	stw	r2,112(sp)
    b4c0:	d9001b15 	stw	r4,108(sp)
    b4c4:	00c001c4 	movi	r3,7
    b4c8:	19024c16 	blt	r3,r4,bdfc <___vfiprintf_internal_r+0xe38>
    b4cc:	200b883a 	mov	r5,r4
    b4d0:	42000204 	addi	r8,r8,8
    b4d4:	21000044 	addi	r4,r4,1
    b4d8:	00c02004 	movi	r3,128
    b4dc:	b0c20126 	beq	r22,r3,bce4 <___vfiprintf_internal_r+0xd20>
    b4e0:	4cedc83a 	sub	r22,r9,r19
    b4e4:	0580230e 	bge	zero,r22,b574 <___vfiprintf_internal_r+0x5b0>
    b4e8:	01c00404 	movi	r7,16
    b4ec:	3d83140e 	bge	r7,r22,c140 <___vfiprintf_internal_r+0x117c>
    b4f0:	010000b4 	movhi	r4,2
    b4f4:	21320f04 	addi	r4,r4,-14276
    b4f8:	d9002415 	stw	r4,144(sp)
    b4fc:	034001c4 	movi	r13,7
    b500:	00000506 	br	b518 <___vfiprintf_internal_r+0x554>
    b504:	29000084 	addi	r4,r5,2
    b508:	42000204 	addi	r8,r8,8
    b50c:	180b883a 	mov	r5,r3
    b510:	b5bffc04 	addi	r22,r22,-16
    b514:	3d800d0e 	bge	r7,r22,b54c <___vfiprintf_internal_r+0x588>
    b518:	10800404 	addi	r2,r2,16
    b51c:	28c00044 	addi	r3,r5,1
    b520:	45c00015 	stw	r23,0(r8)
    b524:	41c00115 	stw	r7,4(r8)
    b528:	d8801c15 	stw	r2,112(sp)
    b52c:	d8c01b15 	stw	r3,108(sp)
    b530:	68fff40e 	bge	r13,r3,b504 <__alt_mem_Flash_flash_data+0xf400b504>
    b534:	1001811e 	bne	r2,zero,bb3c <___vfiprintf_internal_r+0xb78>
    b538:	b5bffc04 	addi	r22,r22,-16
    b53c:	01000044 	movi	r4,1
    b540:	000b883a 	mov	r5,zero
    b544:	d811883a 	mov	r8,sp
    b548:	3dbff316 	blt	r7,r22,b518 <__alt_mem_Flash_flash_data+0xf400b518>
    b54c:	d8c02417 	ldw	r3,144(sp)
    b550:	1585883a 	add	r2,r2,r22
    b554:	45800115 	stw	r22,4(r8)
    b558:	40c00015 	stw	r3,0(r8)
    b55c:	d8801c15 	stw	r2,112(sp)
    b560:	d9001b15 	stw	r4,108(sp)
    b564:	00c001c4 	movi	r3,7
    b568:	1901d016 	blt	r3,r4,bcac <___vfiprintf_internal_r+0xce8>
    b56c:	42000204 	addi	r8,r8,8
    b570:	21000044 	addi	r4,r4,1
    b574:	14c5883a 	add	r2,r2,r19
    b578:	45000015 	stw	r20,0(r8)
    b57c:	44c00115 	stw	r19,4(r8)
    b580:	d8801c15 	stw	r2,112(sp)
    b584:	d9001b15 	stw	r4,108(sp)
    b588:	00c001c4 	movi	r3,7
    b58c:	1901cf0e 	bge	r3,r4,bccc <___vfiprintf_internal_r+0xd08>
    b590:	1002361e 	bne	r2,zero,be6c <___vfiprintf_internal_r+0xea8>
    b594:	d8001b15 	stw	zero,108(sp)
    b598:	aac0010c 	andi	r11,r21,4
    b59c:	58002826 	beq	r11,zero,b640 <___vfiprintf_internal_r+0x67c>
    b5a0:	9467c83a 	sub	r19,r18,r17
    b5a4:	d811883a 	mov	r8,sp
    b5a8:	04c3340e 	bge	zero,r19,c27c <___vfiprintf_internal_r+0x12b8>
    b5ac:	01c00404 	movi	r7,16
    b5b0:	3cc31b0e 	bge	r7,r19,c220 <___vfiprintf_internal_r+0x125c>
    b5b4:	00c000b4 	movhi	r3,2
    b5b8:	18f21304 	addi	r3,r3,-14260
    b5bc:	d9001b17 	ldw	r4,108(sp)
    b5c0:	d8c02415 	stw	r3,144(sp)
    b5c4:	382b883a 	mov	r21,r7
    b5c8:	050001c4 	movi	r20,7
    b5cc:	dd802017 	ldw	r22,128(sp)
    b5d0:	00000506 	br	b5e8 <___vfiprintf_internal_r+0x624>
    b5d4:	21400084 	addi	r5,r4,2
    b5d8:	42000204 	addi	r8,r8,8
    b5dc:	1809883a 	mov	r4,r3
    b5e0:	9cfffc04 	addi	r19,r19,-16
    b5e4:	acc00d0e 	bge	r21,r19,b61c <___vfiprintf_internal_r+0x658>
    b5e8:	10800404 	addi	r2,r2,16
    b5ec:	20c00044 	addi	r3,r4,1
    b5f0:	47000015 	stw	fp,0(r8)
    b5f4:	45400115 	stw	r21,4(r8)
    b5f8:	d8801c15 	stw	r2,112(sp)
    b5fc:	d8c01b15 	stw	r3,108(sp)
    b600:	a0fff40e 	bge	r20,r3,b5d4 <__alt_mem_Flash_flash_data+0xf400b5d4>
    b604:	10019f1e 	bne	r2,zero,bc84 <___vfiprintf_internal_r+0xcc0>
    b608:	9cfffc04 	addi	r19,r19,-16
    b60c:	01400044 	movi	r5,1
    b610:	0009883a 	mov	r4,zero
    b614:	d811883a 	mov	r8,sp
    b618:	acfff316 	blt	r21,r19,b5e8 <__alt_mem_Flash_flash_data+0xf400b5e8>
    b61c:	d8c02417 	ldw	r3,144(sp)
    b620:	14c5883a 	add	r2,r2,r19
    b624:	44c00115 	stw	r19,4(r8)
    b628:	40c00015 	stw	r3,0(r8)
    b62c:	d8801c15 	stw	r2,112(sp)
    b630:	d9401b15 	stw	r5,108(sp)
    b634:	00c001c4 	movi	r3,7
    b638:	1941810e 	bge	r3,r5,bc40 <___vfiprintf_internal_r+0xc7c>
    b63c:	10017a1e 	bne	r2,zero,bc28 <___vfiprintf_internal_r+0xc64>
    b640:	8c82a416 	blt	r17,r18,c0d4 <___vfiprintf_internal_r+0x1110>
    b644:	d9002317 	ldw	r4,140(sp)
    b648:	2449883a 	add	r4,r4,r17
    b64c:	d9002315 	stw	r4,140(sp)
    b650:	d8001b15 	stw	zero,108(sp)
    b654:	d811883a 	mov	r8,sp
    b658:	003e8e06 	br	b094 <__alt_mem_Flash_flash_data+0xf400b094>
    b65c:	d9002017 	ldw	r4,128(sp)
    b660:	a80b883a 	mov	r5,r21
    b664:	0004cd80 	call	4cd8 <__swsetup_r>
    b668:	10000c1e 	bne	r2,zero,b69c <___vfiprintf_internal_r+0x6d8>
    b66c:	a880030b 	ldhu	r2,12(r21)
    b670:	00c00284 	movi	r3,10
    b674:	1080068c 	andi	r2,r2,26
    b678:	10fe741e 	bne	r2,r3,b04c <__alt_mem_Flash_flash_data+0xf400b04c>
    b67c:	a880038f 	ldh	r2,14(r21)
    b680:	103e7216 	blt	r2,zero,b04c <__alt_mem_Flash_flash_data+0xf400b04c>
    b684:	d9002017 	ldw	r4,128(sp)
    b688:	d9c02217 	ldw	r7,136(sp)
    b68c:	a80b883a 	mov	r5,r21
    b690:	b00d883a 	mov	r6,r22
    b694:	000c2b80 	call	c2b8 <__sbprintf>
    b698:	00000106 	br	b6a0 <___vfiprintf_internal_r+0x6dc>
    b69c:	00bfffc4 	movi	r2,-1
    b6a0:	dfc03517 	ldw	ra,212(sp)
    b6a4:	df003417 	ldw	fp,208(sp)
    b6a8:	ddc03317 	ldw	r23,204(sp)
    b6ac:	dd803217 	ldw	r22,200(sp)
    b6b0:	dd403117 	ldw	r21,196(sp)
    b6b4:	dd003017 	ldw	r20,192(sp)
    b6b8:	dcc02f17 	ldw	r19,188(sp)
    b6bc:	dc802e17 	ldw	r18,184(sp)
    b6c0:	dc402d17 	ldw	r17,180(sp)
    b6c4:	dc002c17 	ldw	r16,176(sp)
    b6c8:	dec03604 	addi	sp,sp,216
    b6cc:	f800283a 	ret
    b6d0:	0006d380 	call	6d38 <__sinit>
    b6d4:	003e4d06 	br	b00c <__alt_mem_Flash_flash_data+0xf400b00c>
    b6d8:	8005883a 	mov	r2,r16
    b6dc:	ad400114 	ori	r21,r21,4
    b6e0:	80c00007 	ldb	r3,0(r16)
    b6e4:	003e9506 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b6e8:	b006d0fa 	srli	r3,r22,3
    b6ec:	6808977a 	slli	r4,r13,29
    b6f0:	681ad0fa 	srli	r13,r13,3
    b6f4:	b58001cc 	andi	r22,r22,7
    b6f8:	b0800c04 	addi	r2,r22,48
    b6fc:	a53fffc4 	addi	r20,r20,-1
    b700:	20ecb03a 	or	r22,r4,r3
    b704:	a0800005 	stb	r2,0(r20)
    b708:	b346b03a 	or	r3,r22,r13
    b70c:	183ff61e 	bne	r3,zero,b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    b710:	a8c0004c 	andi	r3,r21,1
    b714:	a009883a 	mov	r4,r20
    b718:	18013b26 	beq	r3,zero,bc08 <___vfiprintf_internal_r+0xc44>
    b71c:	10803fcc 	andi	r2,r2,255
    b720:	1080201c 	xori	r2,r2,128
    b724:	10bfe004 	addi	r2,r2,-128
    b728:	00c00c04 	movi	r3,48
    b72c:	10ff1d26 	beq	r2,r3,b3a4 <__alt_mem_Flash_flash_data+0xf400b3a4>
    b730:	d8801e17 	ldw	r2,120(sp)
    b734:	a53fffc4 	addi	r20,r20,-1
    b738:	20ffffc5 	stb	r3,-1(r4)
    b73c:	1527c83a 	sub	r19,r2,r20
    b740:	003f1a06 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    b744:	ad402014 	ori	r21,r21,128
    b748:	8005883a 	mov	r2,r16
    b74c:	80c00007 	ldb	r3,0(r16)
    b750:	003e7a06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b754:	8005883a 	mov	r2,r16
    b758:	0025883a 	mov	r18,zero
    b75c:	193ff404 	addi	r4,r3,-48
    b760:	10c00007 	ldb	r3,0(r2)
    b764:	948002a4 	muli	r18,r18,10
    b768:	84000044 	addi	r16,r16,1
    b76c:	8005883a 	mov	r2,r16
    b770:	9125883a 	add	r18,r18,r4
    b774:	193ff404 	addi	r4,r3,-48
    b778:	313ff92e 	bgeu	r6,r4,b760 <__alt_mem_Flash_flash_data+0xf400b760>
    b77c:	003e7006 	br	b140 <__alt_mem_Flash_flash_data+0xf400b140>
    b780:	ad400414 	ori	r21,r21,16
    b784:	d9c01d85 	stb	r7,118(sp)
    b788:	a880080c 	andi	r2,r21,32
    b78c:	d8c02217 	ldw	r3,136(sp)
    b790:	10005a26 	beq	r2,zero,b8fc <___vfiprintf_internal_r+0x938>
    b794:	d9002217 	ldw	r4,136(sp)
    b798:	18800117 	ldw	r2,4(r3)
    b79c:	1d800017 	ldw	r22,0(r3)
    b7a0:	21000204 	addi	r4,r4,8
    b7a4:	d9002215 	stw	r4,136(sp)
    b7a8:	101b883a 	mov	r13,r2
    b7ac:	1001f416 	blt	r2,zero,bf80 <___vfiprintf_internal_r+0xfbc>
    b7b0:	db801d83 	ldbu	r14,118(sp)
    b7b4:	4827883a 	mov	r19,r9
    b7b8:	00800044 	movi	r2,1
    b7bc:	b348b03a 	or	r4,r22,r13
    b7c0:	003ee106 	br	b348 <__alt_mem_Flash_flash_data+0xf400b348>
    b7c4:	80c00007 	ldb	r3,0(r16)
    b7c8:	80800044 	addi	r2,r16,1
    b7cc:	1b42a326 	beq	r3,r13,c25c <___vfiprintf_internal_r+0x1298>
    b7d0:	193ff404 	addi	r4,r3,-48
    b7d4:	1021883a 	mov	r16,r2
    b7d8:	0013883a 	mov	r9,zero
    b7dc:	313e5836 	bltu	r6,r4,b140 <__alt_mem_Flash_flash_data+0xf400b140>
    b7e0:	80c00007 	ldb	r3,0(r16)
    b7e4:	4a4002a4 	muli	r9,r9,10
    b7e8:	84000044 	addi	r16,r16,1
    b7ec:	2253883a 	add	r9,r4,r9
    b7f0:	193ff404 	addi	r4,r3,-48
    b7f4:	313ffa2e 	bgeu	r6,r4,b7e0 <__alt_mem_Flash_flash_data+0xf400b7e0>
    b7f8:	483e510e 	bge	r9,zero,b140 <__alt_mem_Flash_flash_data+0xf400b140>
    b7fc:	027fffc4 	movi	r9,-1
    b800:	003e4f06 	br	b140 <__alt_mem_Flash_flash_data+0xf400b140>
    b804:	d9c01d85 	stb	r7,118(sp)
    b808:	a880080c 	andi	r2,r21,32
    b80c:	10020826 	beq	r2,zero,c030 <___vfiprintf_internal_r+0x106c>
    b810:	d8c02217 	ldw	r3,136(sp)
    b814:	d9002317 	ldw	r4,140(sp)
    b818:	18800017 	ldw	r2,0(r3)
    b81c:	2007d7fa 	srai	r3,r4,31
    b820:	d9002217 	ldw	r4,136(sp)
    b824:	10c00115 	stw	r3,4(r2)
    b828:	21000104 	addi	r4,r4,4
    b82c:	d9002215 	stw	r4,136(sp)
    b830:	d9002317 	ldw	r4,140(sp)
    b834:	11000015 	stw	r4,0(r2)
    b838:	003e1606 	br	b094 <__alt_mem_Flash_flash_data+0xf400b094>
    b83c:	d8802217 	ldw	r2,136(sp)
    b840:	d8c02217 	ldw	r3,136(sp)
    b844:	15800017 	ldw	r22,0(r2)
    b848:	13400117 	ldw	r13,4(r2)
    b84c:	18c00204 	addi	r3,r3,8
    b850:	0005883a 	mov	r2,zero
    b854:	d8c02215 	stw	r3,136(sp)
    b858:	b348b03a 	or	r4,r22,r13
    b85c:	003eb706 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b860:	38803fcc 	andi	r2,r7,255
    b864:	1080201c 	xori	r2,r2,128
    b868:	10bfe004 	addi	r2,r2,-128
    b86c:	1001e31e 	bne	r2,zero,bffc <___vfiprintf_internal_r+0x1038>
    b870:	8005883a 	mov	r2,r16
    b874:	01c00804 	movi	r7,32
    b878:	80c00007 	ldb	r3,0(r16)
    b87c:	003e2f06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b880:	ad400054 	ori	r21,r21,1
    b884:	8005883a 	mov	r2,r16
    b888:	80c00007 	ldb	r3,0(r16)
    b88c:	003e2b06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b890:	d8c02217 	ldw	r3,136(sp)
    b894:	1c800017 	ldw	r18,0(r3)
    b898:	18c00104 	addi	r3,r3,4
    b89c:	90023816 	blt	r18,zero,c180 <___vfiprintf_internal_r+0x11bc>
    b8a0:	d8c02215 	stw	r3,136(sp)
    b8a4:	8005883a 	mov	r2,r16
    b8a8:	80c00007 	ldb	r3,0(r16)
    b8ac:	003e2306 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b8b0:	8005883a 	mov	r2,r16
    b8b4:	01c00ac4 	movi	r7,43
    b8b8:	80c00007 	ldb	r3,0(r16)
    b8bc:	003e1f06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b8c0:	d8c02217 	ldw	r3,136(sp)
    b8c4:	04400044 	movi	r17,1
    b8c8:	d8001d85 	stb	zero,118(sp)
    b8cc:	18800017 	ldw	r2,0(r3)
    b8d0:	18c00104 	addi	r3,r3,4
    b8d4:	d8c02215 	stw	r3,136(sp)
    b8d8:	d8801005 	stb	r2,64(sp)
    b8dc:	8827883a 	mov	r19,r17
    b8e0:	dd001004 	addi	r20,sp,64
    b8e4:	0013883a 	mov	r9,zero
    b8e8:	003eb806 	br	b3cc <__alt_mem_Flash_flash_data+0xf400b3cc>
    b8ec:	d9c01d85 	stb	r7,118(sp)
    b8f0:	a880080c 	andi	r2,r21,32
    b8f4:	d8c02217 	ldw	r3,136(sp)
    b8f8:	103fa61e 	bne	r2,zero,b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b8fc:	a880040c 	andi	r2,r21,16
    b900:	1001dd26 	beq	r2,zero,c078 <___vfiprintf_internal_r+0x10b4>
    b904:	1d800017 	ldw	r22,0(r3)
    b908:	d8802217 	ldw	r2,136(sp)
    b90c:	b01bd7fa 	srai	r13,r22,31
    b910:	10800104 	addi	r2,r2,4
    b914:	d8802215 	stw	r2,136(sp)
    b918:	6805883a 	mov	r2,r13
    b91c:	003fa306 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>
    b920:	008000b4 	movhi	r2,2
    b924:	10b19904 	addi	r2,r2,-14748
    b928:	d8802615 	stw	r2,152(sp)
    b92c:	d9c01d85 	stb	r7,118(sp)
    b930:	a880080c 	andi	r2,r21,32
    b934:	10004726 	beq	r2,zero,ba54 <___vfiprintf_internal_r+0xa90>
    b938:	d9002217 	ldw	r4,136(sp)
    b93c:	25800017 	ldw	r22,0(r4)
    b940:	23400117 	ldw	r13,4(r4)
    b944:	21000204 	addi	r4,r4,8
    b948:	d9002215 	stw	r4,136(sp)
    b94c:	a880004c 	andi	r2,r21,1
    b950:	10014e26 	beq	r2,zero,be8c <___vfiprintf_internal_r+0xec8>
    b954:	b348b03a 	or	r4,r22,r13
    b958:	20019c26 	beq	r4,zero,bfcc <___vfiprintf_internal_r+0x1008>
    b95c:	00800c04 	movi	r2,48
    b960:	d8801d05 	stb	r2,116(sp)
    b964:	d8c01d45 	stb	r3,117(sp)
    b968:	ad400094 	ori	r21,r21,2
    b96c:	00800084 	movi	r2,2
    b970:	003e7206 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b974:	d8c02217 	ldw	r3,136(sp)
    b978:	d8001d85 	stb	zero,118(sp)
    b97c:	1d000017 	ldw	r20,0(r3)
    b980:	1d800104 	addi	r22,r3,4
    b984:	a0021c26 	beq	r20,zero,c1f8 <___vfiprintf_internal_r+0x1234>
    b988:	a009883a 	mov	r4,r20
    b98c:	48020016 	blt	r9,zero,c190 <___vfiprintf_internal_r+0x11cc>
    b990:	480d883a 	mov	r6,r9
    b994:	000b883a 	mov	r5,zero
    b998:	da002a15 	stw	r8,168(sp)
    b99c:	da402b15 	stw	r9,172(sp)
    b9a0:	00082240 	call	8224 <memchr>
    b9a4:	da002a17 	ldw	r8,168(sp)
    b9a8:	da402b17 	ldw	r9,172(sp)
    b9ac:	10022226 	beq	r2,zero,c238 <___vfiprintf_internal_r+0x1274>
    b9b0:	1527c83a 	sub	r19,r2,r20
    b9b4:	4cc1c916 	blt	r9,r19,c0dc <___vfiprintf_internal_r+0x1118>
    b9b8:	db801d83 	ldbu	r14,118(sp)
    b9bc:	dd802215 	stw	r22,136(sp)
    b9c0:	0013883a 	mov	r9,zero
    b9c4:	003e7906 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    b9c8:	ad401014 	ori	r21,r21,64
    b9cc:	8005883a 	mov	r2,r16
    b9d0:	80c00007 	ldb	r3,0(r16)
    b9d4:	003dd906 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b9d8:	80c00007 	ldb	r3,0(r16)
    b9dc:	8005883a 	mov	r2,r16
    b9e0:	1b01e326 	beq	r3,r12,c170 <___vfiprintf_internal_r+0x11ac>
    b9e4:	ad400414 	ori	r21,r21,16
    b9e8:	003dd406 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    b9ec:	d9002217 	ldw	r4,136(sp)
    b9f0:	00800c04 	movi	r2,48
    b9f4:	d8801d05 	stb	r2,116(sp)
    b9f8:	25800017 	ldw	r22,0(r4)
    b9fc:	00801e04 	movi	r2,120
    ba00:	d8801d45 	stb	r2,117(sp)
    ba04:	008000b4 	movhi	r2,2
    ba08:	21000104 	addi	r4,r4,4
    ba0c:	10b19e04 	addi	r2,r2,-14728
    ba10:	d9002215 	stw	r4,136(sp)
    ba14:	d8802615 	stw	r2,152(sp)
    ba18:	001b883a 	mov	r13,zero
    ba1c:	ad400094 	ori	r21,r21,2
    ba20:	00800084 	movi	r2,2
    ba24:	b009883a 	mov	r4,r22
    ba28:	003e4406 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    ba2c:	ad400814 	ori	r21,r21,32
    ba30:	8005883a 	mov	r2,r16
    ba34:	80c00007 	ldb	r3,0(r16)
    ba38:	003dc006 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    ba3c:	008000b4 	movhi	r2,2
    ba40:	10b19e04 	addi	r2,r2,-14728
    ba44:	d8802615 	stw	r2,152(sp)
    ba48:	d9c01d85 	stb	r7,118(sp)
    ba4c:	a880080c 	andi	r2,r21,32
    ba50:	103fb91e 	bne	r2,zero,b938 <__alt_mem_Flash_flash_data+0xf400b938>
    ba54:	a880040c 	andi	r2,r21,16
    ba58:	10010f1e 	bne	r2,zero,be98 <___vfiprintf_internal_r+0xed4>
    ba5c:	a880100c 	andi	r2,r21,64
    ba60:	10010d26 	beq	r2,zero,be98 <___vfiprintf_internal_r+0xed4>
    ba64:	d9002217 	ldw	r4,136(sp)
    ba68:	001b883a 	mov	r13,zero
    ba6c:	2580000b 	ldhu	r22,0(r4)
    ba70:	21000104 	addi	r4,r4,4
    ba74:	d9002215 	stw	r4,136(sp)
    ba78:	003fb406 	br	b94c <__alt_mem_Flash_flash_data+0xf400b94c>
    ba7c:	d9002217 	ldw	r4,136(sp)
    ba80:	00800044 	movi	r2,1
    ba84:	25800017 	ldw	r22,0(r4)
    ba88:	23400117 	ldw	r13,4(r4)
    ba8c:	21000204 	addi	r4,r4,8
    ba90:	d9002215 	stw	r4,136(sp)
    ba94:	b348b03a 	or	r4,r22,r13
    ba98:	003e2806 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    ba9c:	d9c01d85 	stb	r7,118(sp)
    baa0:	1801ab26 	beq	r3,zero,c150 <___vfiprintf_internal_r+0x118c>
    baa4:	04400044 	movi	r17,1
    baa8:	d8c01005 	stb	r3,64(sp)
    baac:	d8001d85 	stb	zero,118(sp)
    bab0:	8827883a 	mov	r19,r17
    bab4:	dd001004 	addi	r20,sp,64
    bab8:	003f8a06 	br	b8e4 <__alt_mem_Flash_flash_data+0xf400b8e4>
    babc:	d9002017 	ldw	r4,128(sp)
    bac0:	d9402117 	ldw	r5,132(sp)
    bac4:	d9801a04 	addi	r6,sp,104
    bac8:	d9c02b15 	stw	r7,172(sp)
    bacc:	dbc02a15 	stw	r15,168(sp)
    bad0:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bad4:	d9c02b17 	ldw	r7,172(sp)
    bad8:	dbc02a17 	ldw	r15,168(sp)
    badc:	1000631e 	bne	r2,zero,bc6c <___vfiprintf_internal_r+0xca8>
    bae0:	d9801b17 	ldw	r6,108(sp)
    bae4:	d8801c17 	ldw	r2,112(sp)
    bae8:	d811883a 	mov	r8,sp
    baec:	31400044 	addi	r5,r6,1
    baf0:	003e4d06 	br	b428 <__alt_mem_Flash_flash_data+0xf400b428>
    baf4:	d9401b17 	ldw	r5,108(sp)
    baf8:	d8801c17 	ldw	r2,112(sp)
    bafc:	29000044 	addi	r4,r5,1
    bb00:	d8c01d87 	ldb	r3,118(sp)
    bb04:	183e6726 	beq	r3,zero,b4a4 <__alt_mem_Flash_flash_data+0xf400b4a4>
    bb08:	00c00044 	movi	r3,1
    bb0c:	d9401d84 	addi	r5,sp,118
    bb10:	10c5883a 	add	r2,r2,r3
    bb14:	41400015 	stw	r5,0(r8)
    bb18:	40c00115 	stw	r3,4(r8)
    bb1c:	d8801c15 	stw	r2,112(sp)
    bb20:	d9001b15 	stw	r4,108(sp)
    bb24:	014001c4 	movi	r5,7
    bb28:	2900ab16 	blt	r5,r4,bdd8 <___vfiprintf_internal_r+0xe14>
    bb2c:	200b883a 	mov	r5,r4
    bb30:	42000204 	addi	r8,r8,8
    bb34:	21000044 	addi	r4,r4,1
    bb38:	003e5a06 	br	b4a4 <__alt_mem_Flash_flash_data+0xf400b4a4>
    bb3c:	d9002017 	ldw	r4,128(sp)
    bb40:	d9402117 	ldw	r5,132(sp)
    bb44:	d9801a04 	addi	r6,sp,104
    bb48:	d9c02b15 	stw	r7,172(sp)
    bb4c:	db402a15 	stw	r13,168(sp)
    bb50:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bb54:	d9c02b17 	ldw	r7,172(sp)
    bb58:	db402a17 	ldw	r13,168(sp)
    bb5c:	1000431e 	bne	r2,zero,bc6c <___vfiprintf_internal_r+0xca8>
    bb60:	d9401b17 	ldw	r5,108(sp)
    bb64:	d8801c17 	ldw	r2,112(sp)
    bb68:	d811883a 	mov	r8,sp
    bb6c:	29000044 	addi	r4,r5,1
    bb70:	003e6706 	br	b510 <__alt_mem_Flash_flash_data+0xf400b510>
    bb74:	10803fcc 	andi	r2,r2,255
    bb78:	00c00044 	movi	r3,1
    bb7c:	10fdfa1e 	bne	r2,r3,b368 <__alt_mem_Flash_flash_data+0xf400b368>
    bb80:	6800021e 	bne	r13,zero,bb8c <___vfiprintf_internal_r+0xbc8>
    bb84:	00800244 	movi	r2,9
    bb88:	1580222e 	bgeu	r2,r22,bc14 <___vfiprintf_internal_r+0xc50>
    bb8c:	dc802415 	stw	r18,144(sp)
    bb90:	dc002515 	stw	r16,148(sp)
    bb94:	dc401a04 	addi	r17,sp,104
    bb98:	b021883a 	mov	r16,r22
    bb9c:	4827883a 	mov	r19,r9
    bba0:	4029883a 	mov	r20,r8
    bba4:	702d883a 	mov	r22,r14
    bba8:	6825883a 	mov	r18,r13
    bbac:	8009883a 	mov	r4,r16
    bbb0:	900b883a 	mov	r5,r18
    bbb4:	01800284 	movi	r6,10
    bbb8:	000f883a 	mov	r7,zero
    bbbc:	000d22c0 	call	d22c <__umoddi3>
    bbc0:	10800c04 	addi	r2,r2,48
    bbc4:	8c7fffc4 	addi	r17,r17,-1
    bbc8:	8009883a 	mov	r4,r16
    bbcc:	900b883a 	mov	r5,r18
    bbd0:	01800284 	movi	r6,10
    bbd4:	000f883a 	mov	r7,zero
    bbd8:	88800005 	stb	r2,0(r17)
    bbdc:	000cc6c0 	call	cc6c <__udivdi3>
    bbe0:	1021883a 	mov	r16,r2
    bbe4:	10c4b03a 	or	r2,r2,r3
    bbe8:	1825883a 	mov	r18,r3
    bbec:	103fef1e 	bne	r2,zero,bbac <__alt_mem_Flash_flash_data+0xf400bbac>
    bbf0:	dc802417 	ldw	r18,144(sp)
    bbf4:	dc002517 	ldw	r16,148(sp)
    bbf8:	a011883a 	mov	r8,r20
    bbfc:	9813883a 	mov	r9,r19
    bc00:	b01d883a 	mov	r14,r22
    bc04:	8829883a 	mov	r20,r17
    bc08:	d8c01e17 	ldw	r3,120(sp)
    bc0c:	1d27c83a 	sub	r19,r3,r20
    bc10:	003de606 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    bc14:	b5800c04 	addi	r22,r22,48
    bc18:	dd8019c5 	stb	r22,103(sp)
    bc1c:	dcc02717 	ldw	r19,156(sp)
    bc20:	dd0019c4 	addi	r20,sp,103
    bc24:	003de106 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    bc28:	d9002017 	ldw	r4,128(sp)
    bc2c:	d9402117 	ldw	r5,132(sp)
    bc30:	d9801a04 	addi	r6,sp,104
    bc34:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bc38:	10000c1e 	bne	r2,zero,bc6c <___vfiprintf_internal_r+0xca8>
    bc3c:	d8801c17 	ldw	r2,112(sp)
    bc40:	8c80010e 	bge	r17,r18,bc48 <___vfiprintf_internal_r+0xc84>
    bc44:	9023883a 	mov	r17,r18
    bc48:	d8c02317 	ldw	r3,140(sp)
    bc4c:	1c47883a 	add	r3,r3,r17
    bc50:	d8c02315 	stw	r3,140(sp)
    bc54:	103e7e26 	beq	r2,zero,b650 <__alt_mem_Flash_flash_data+0xf400b650>
    bc58:	d9002017 	ldw	r4,128(sp)
    bc5c:	d9402117 	ldw	r5,132(sp)
    bc60:	d9801a04 	addi	r6,sp,104
    bc64:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bc68:	103e7926 	beq	r2,zero,b650 <__alt_mem_Flash_flash_data+0xf400b650>
    bc6c:	dd402117 	ldw	r21,132(sp)
    bc70:	a880030b 	ldhu	r2,12(r21)
    bc74:	1080100c 	andi	r2,r2,64
    bc78:	103e881e 	bne	r2,zero,b69c <__alt_mem_Flash_flash_data+0xf400b69c>
    bc7c:	d8802317 	ldw	r2,140(sp)
    bc80:	003e8706 	br	b6a0 <__alt_mem_Flash_flash_data+0xf400b6a0>
    bc84:	d9402117 	ldw	r5,132(sp)
    bc88:	b009883a 	mov	r4,r22
    bc8c:	d9801a04 	addi	r6,sp,104
    bc90:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bc94:	103ff51e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bc98:	d9001b17 	ldw	r4,108(sp)
    bc9c:	d8801c17 	ldw	r2,112(sp)
    bca0:	d811883a 	mov	r8,sp
    bca4:	21400044 	addi	r5,r4,1
    bca8:	003e4d06 	br	b5e0 <__alt_mem_Flash_flash_data+0xf400b5e0>
    bcac:	1000aa1e 	bne	r2,zero,bf58 <___vfiprintf_internal_r+0xf94>
    bcb0:	00c00044 	movi	r3,1
    bcb4:	9805883a 	mov	r2,r19
    bcb8:	dd000015 	stw	r20,0(sp)
    bcbc:	dcc00115 	stw	r19,4(sp)
    bcc0:	dcc01c15 	stw	r19,112(sp)
    bcc4:	d8c01b15 	stw	r3,108(sp)
    bcc8:	d811883a 	mov	r8,sp
    bccc:	42000204 	addi	r8,r8,8
    bcd0:	aac0010c 	andi	r11,r21,4
    bcd4:	583fda26 	beq	r11,zero,bc40 <__alt_mem_Flash_flash_data+0xf400bc40>
    bcd8:	9467c83a 	sub	r19,r18,r17
    bcdc:	04fe3316 	blt	zero,r19,b5ac <__alt_mem_Flash_flash_data+0xf400b5ac>
    bce0:	003fd706 	br	bc40 <__alt_mem_Flash_flash_data+0xf400bc40>
    bce4:	946dc83a 	sub	r22,r18,r17
    bce8:	05bdfd0e 	bge	zero,r22,b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    bcec:	00c000b4 	movhi	r3,2
    bcf0:	18f20f04 	addi	r3,r3,-14276
    bcf4:	01c00404 	movi	r7,16
    bcf8:	d8c02415 	stw	r3,144(sp)
    bcfc:	3d81530e 	bge	r7,r22,c24c <___vfiprintf_internal_r+0x1288>
    bd00:	8007883a 	mov	r3,r16
    bd04:	034001c4 	movi	r13,7
    bd08:	b021883a 	mov	r16,r22
    bd0c:	da402515 	stw	r9,148(sp)
    bd10:	182d883a 	mov	r22,r3
    bd14:	00000506 	br	bd2c <___vfiprintf_internal_r+0xd68>
    bd18:	29800084 	addi	r6,r5,2
    bd1c:	42000204 	addi	r8,r8,8
    bd20:	180b883a 	mov	r5,r3
    bd24:	843ffc04 	addi	r16,r16,-16
    bd28:	3c000d0e 	bge	r7,r16,bd60 <___vfiprintf_internal_r+0xd9c>
    bd2c:	10800404 	addi	r2,r2,16
    bd30:	28c00044 	addi	r3,r5,1
    bd34:	45c00015 	stw	r23,0(r8)
    bd38:	41c00115 	stw	r7,4(r8)
    bd3c:	d8801c15 	stw	r2,112(sp)
    bd40:	d8c01b15 	stw	r3,108(sp)
    bd44:	68fff40e 	bge	r13,r3,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd48:	1000151e 	bne	r2,zero,bda0 <___vfiprintf_internal_r+0xddc>
    bd4c:	843ffc04 	addi	r16,r16,-16
    bd50:	01800044 	movi	r6,1
    bd54:	000b883a 	mov	r5,zero
    bd58:	d811883a 	mov	r8,sp
    bd5c:	3c3ff316 	blt	r7,r16,bd2c <__alt_mem_Flash_flash_data+0xf400bd2c>
    bd60:	da402517 	ldw	r9,148(sp)
    bd64:	b007883a 	mov	r3,r22
    bd68:	802d883a 	mov	r22,r16
    bd6c:	1821883a 	mov	r16,r3
    bd70:	d8c02417 	ldw	r3,144(sp)
    bd74:	1585883a 	add	r2,r2,r22
    bd78:	45800115 	stw	r22,4(r8)
    bd7c:	40c00015 	stw	r3,0(r8)
    bd80:	d8801c15 	stw	r2,112(sp)
    bd84:	d9801b15 	stw	r6,108(sp)
    bd88:	00c001c4 	movi	r3,7
    bd8c:	19806d16 	blt	r3,r6,bf44 <___vfiprintf_internal_r+0xf80>
    bd90:	42000204 	addi	r8,r8,8
    bd94:	31000044 	addi	r4,r6,1
    bd98:	300b883a 	mov	r5,r6
    bd9c:	003dd006 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    bda0:	d9002017 	ldw	r4,128(sp)
    bda4:	d9402117 	ldw	r5,132(sp)
    bda8:	d9801a04 	addi	r6,sp,104
    bdac:	d9c02b15 	stw	r7,172(sp)
    bdb0:	db402a15 	stw	r13,168(sp)
    bdb4:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bdb8:	d9c02b17 	ldw	r7,172(sp)
    bdbc:	db402a17 	ldw	r13,168(sp)
    bdc0:	103faa1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bdc4:	d9401b17 	ldw	r5,108(sp)
    bdc8:	d8801c17 	ldw	r2,112(sp)
    bdcc:	d811883a 	mov	r8,sp
    bdd0:	29800044 	addi	r6,r5,1
    bdd4:	003fd306 	br	bd24 <__alt_mem_Flash_flash_data+0xf400bd24>
    bdd8:	1000401e 	bne	r2,zero,bedc <___vfiprintf_internal_r+0xf18>
    bddc:	68003b26 	beq	r13,zero,becc <___vfiprintf_internal_r+0xf08>
    bde0:	d9001d04 	addi	r4,sp,116
    bde4:	00800084 	movi	r2,2
    bde8:	d9000015 	stw	r4,0(sp)
    bdec:	d8800115 	stw	r2,4(sp)
    bdf0:	1809883a 	mov	r4,r3
    bdf4:	d811883a 	mov	r8,sp
    bdf8:	003db406 	br	b4cc <__alt_mem_Flash_flash_data+0xf400b4cc>
    bdfc:	1000451e 	bne	r2,zero,bf14 <___vfiprintf_internal_r+0xf50>
    be00:	01000044 	movi	r4,1
    be04:	000b883a 	mov	r5,zero
    be08:	d811883a 	mov	r8,sp
    be0c:	003db206 	br	b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>
    be10:	10803fcc 	andi	r2,r2,255
    be14:	1000071e 	bne	r2,zero,be34 <___vfiprintf_internal_r+0xe70>
    be18:	a880004c 	andi	r2,r21,1
    be1c:	10000526 	beq	r2,zero,be34 <___vfiprintf_internal_r+0xe70>
    be20:	00800c04 	movi	r2,48
    be24:	d88019c5 	stb	r2,103(sp)
    be28:	dcc02717 	ldw	r19,156(sp)
    be2c:	dd0019c4 	addi	r20,sp,103
    be30:	003d5e06 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    be34:	dd001a04 	addi	r20,sp,104
    be38:	003d5c06 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    be3c:	1000971e 	bne	r2,zero,c09c <___vfiprintf_internal_r+0x10d8>
    be40:	d8c01d87 	ldb	r3,118(sp)
    be44:	18005826 	beq	r3,zero,bfa8 <___vfiprintf_internal_r+0xfe4>
    be48:	00800044 	movi	r2,1
    be4c:	d8c01d84 	addi	r3,sp,118
    be50:	1009883a 	mov	r4,r2
    be54:	d8c00015 	stw	r3,0(sp)
    be58:	d8800115 	stw	r2,4(sp)
    be5c:	d811883a 	mov	r8,sp
    be60:	003f3206 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    be64:	8023883a 	mov	r17,r16
    be68:	003ca706 	br	b108 <__alt_mem_Flash_flash_data+0xf400b108>
    be6c:	d9002017 	ldw	r4,128(sp)
    be70:	d9402117 	ldw	r5,132(sp)
    be74:	d9801a04 	addi	r6,sp,104
    be78:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    be7c:	103f7b1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    be80:	d8801c17 	ldw	r2,112(sp)
    be84:	d811883a 	mov	r8,sp
    be88:	003f9106 	br	bcd0 <__alt_mem_Flash_flash_data+0xf400bcd0>
    be8c:	00800084 	movi	r2,2
    be90:	b348b03a 	or	r4,r22,r13
    be94:	003d2906 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    be98:	d8802217 	ldw	r2,136(sp)
    be9c:	001b883a 	mov	r13,zero
    bea0:	15800017 	ldw	r22,0(r2)
    bea4:	10800104 	addi	r2,r2,4
    bea8:	d8802215 	stw	r2,136(sp)
    beac:	003ea706 	br	b94c <__alt_mem_Flash_flash_data+0xf400b94c>
    beb0:	d9002017 	ldw	r4,128(sp)
    beb4:	d9402117 	ldw	r5,132(sp)
    beb8:	d9801a04 	addi	r6,sp,104
    bebc:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bec0:	103f6a1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bec4:	d811883a 	mov	r8,sp
    bec8:	003cff06 	br	b2c8 <__alt_mem_Flash_flash_data+0xf400b2c8>
    becc:	000b883a 	mov	r5,zero
    bed0:	1809883a 	mov	r4,r3
    bed4:	d811883a 	mov	r8,sp
    bed8:	003d7f06 	br	b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>
    bedc:	d9002017 	ldw	r4,128(sp)
    bee0:	d9402117 	ldw	r5,132(sp)
    bee4:	d9801a04 	addi	r6,sp,104
    bee8:	da402b15 	stw	r9,172(sp)
    beec:	db402a15 	stw	r13,168(sp)
    bef0:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bef4:	da402b17 	ldw	r9,172(sp)
    bef8:	db402a17 	ldw	r13,168(sp)
    befc:	103f5b1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bf00:	d9401b17 	ldw	r5,108(sp)
    bf04:	d8801c17 	ldw	r2,112(sp)
    bf08:	d811883a 	mov	r8,sp
    bf0c:	29000044 	addi	r4,r5,1
    bf10:	003d6406 	br	b4a4 <__alt_mem_Flash_flash_data+0xf400b4a4>
    bf14:	d9002017 	ldw	r4,128(sp)
    bf18:	d9402117 	ldw	r5,132(sp)
    bf1c:	d9801a04 	addi	r6,sp,104
    bf20:	da402b15 	stw	r9,172(sp)
    bf24:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bf28:	da402b17 	ldw	r9,172(sp)
    bf2c:	103f4f1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bf30:	d9401b17 	ldw	r5,108(sp)
    bf34:	d8801c17 	ldw	r2,112(sp)
    bf38:	d811883a 	mov	r8,sp
    bf3c:	29000044 	addi	r4,r5,1
    bf40:	003d6506 	br	b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>
    bf44:	10009a1e 	bne	r2,zero,c1b0 <___vfiprintf_internal_r+0x11ec>
    bf48:	01000044 	movi	r4,1
    bf4c:	000b883a 	mov	r5,zero
    bf50:	d811883a 	mov	r8,sp
    bf54:	003d6206 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    bf58:	d9002017 	ldw	r4,128(sp)
    bf5c:	d9402117 	ldw	r5,132(sp)
    bf60:	d9801a04 	addi	r6,sp,104
    bf64:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    bf68:	103f401e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    bf6c:	d9001b17 	ldw	r4,108(sp)
    bf70:	d8801c17 	ldw	r2,112(sp)
    bf74:	d811883a 	mov	r8,sp
    bf78:	21000044 	addi	r4,r4,1
    bf7c:	003d7d06 	br	b574 <__alt_mem_Flash_flash_data+0xf400b574>
    bf80:	05adc83a 	sub	r22,zero,r22
    bf84:	b004c03a 	cmpne	r2,r22,zero
    bf88:	035bc83a 	sub	r13,zero,r13
    bf8c:	689bc83a 	sub	r13,r13,r2
    bf90:	03800b44 	movi	r14,45
    bf94:	db801d85 	stb	r14,118(sp)
    bf98:	4827883a 	mov	r19,r9
    bf9c:	00800044 	movi	r2,1
    bfa0:	b348b03a 	or	r4,r22,r13
    bfa4:	003ce806 	br	b348 <__alt_mem_Flash_flash_data+0xf400b348>
    bfa8:	000b883a 	mov	r5,zero
    bfac:	01000044 	movi	r4,1
    bfb0:	d811883a 	mov	r8,sp
    bfb4:	683d4826 	beq	r13,zero,b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>
    bfb8:	00800084 	movi	r2,2
    bfbc:	d8c01d04 	addi	r3,sp,116
    bfc0:	d8c00015 	stw	r3,0(sp)
    bfc4:	d8800115 	stw	r2,4(sp)
    bfc8:	003d4006 	br	b4cc <__alt_mem_Flash_flash_data+0xf400b4cc>
    bfcc:	00800084 	movi	r2,2
    bfd0:	003cda06 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    bfd4:	a880100c 	andi	r2,r21,64
    bfd8:	10004226 	beq	r2,zero,c0e4 <___vfiprintf_internal_r+0x1120>
    bfdc:	d8802217 	ldw	r2,136(sp)
    bfe0:	001b883a 	mov	r13,zero
    bfe4:	1580000b 	ldhu	r22,0(r2)
    bfe8:	10800104 	addi	r2,r2,4
    bfec:	d8802215 	stw	r2,136(sp)
    bff0:	b009883a 	mov	r4,r22
    bff4:	0005883a 	mov	r2,zero
    bff8:	003cd006 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    bffc:	80c00007 	ldb	r3,0(r16)
    c000:	8005883a 	mov	r2,r16
    c004:	003c4d06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    c008:	a880100c 	andi	r2,r21,64
    c00c:	10004426 	beq	r2,zero,c120 <___vfiprintf_internal_r+0x115c>
    c010:	d8c02217 	ldw	r3,136(sp)
    c014:	001b883a 	mov	r13,zero
    c018:	00800044 	movi	r2,1
    c01c:	1d80000b 	ldhu	r22,0(r3)
    c020:	18c00104 	addi	r3,r3,4
    c024:	d8c02215 	stw	r3,136(sp)
    c028:	b009883a 	mov	r4,r22
    c02c:	003cc306 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    c030:	a880040c 	andi	r2,r21,16
    c034:	1000091e 	bne	r2,zero,c05c <___vfiprintf_internal_r+0x1098>
    c038:	aac0100c 	andi	r11,r21,64
    c03c:	58000726 	beq	r11,zero,c05c <___vfiprintf_internal_r+0x1098>
    c040:	d8c02217 	ldw	r3,136(sp)
    c044:	d9002317 	ldw	r4,140(sp)
    c048:	18800017 	ldw	r2,0(r3)
    c04c:	18c00104 	addi	r3,r3,4
    c050:	d8c02215 	stw	r3,136(sp)
    c054:	1100000d 	sth	r4,0(r2)
    c058:	003c0e06 	br	b094 <__alt_mem_Flash_flash_data+0xf400b094>
    c05c:	d8c02217 	ldw	r3,136(sp)
    c060:	d9002317 	ldw	r4,140(sp)
    c064:	18800017 	ldw	r2,0(r3)
    c068:	18c00104 	addi	r3,r3,4
    c06c:	d8c02215 	stw	r3,136(sp)
    c070:	11000015 	stw	r4,0(r2)
    c074:	003c0706 	br	b094 <__alt_mem_Flash_flash_data+0xf400b094>
    c078:	a880100c 	andi	r2,r21,64
    c07c:	10002126 	beq	r2,zero,c104 <___vfiprintf_internal_r+0x1140>
    c080:	1d80000f 	ldh	r22,0(r3)
    c084:	d8c02217 	ldw	r3,136(sp)
    c088:	b01bd7fa 	srai	r13,r22,31
    c08c:	18c00104 	addi	r3,r3,4
    c090:	d8c02215 	stw	r3,136(sp)
    c094:	6805883a 	mov	r2,r13
    c098:	003dc406 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>
    c09c:	d9002017 	ldw	r4,128(sp)
    c0a0:	d9402117 	ldw	r5,132(sp)
    c0a4:	d9801a04 	addi	r6,sp,104
    c0a8:	da402b15 	stw	r9,172(sp)
    c0ac:	db402a15 	stw	r13,168(sp)
    c0b0:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    c0b4:	da402b17 	ldw	r9,172(sp)
    c0b8:	db402a17 	ldw	r13,168(sp)
    c0bc:	103eeb1e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    c0c0:	d9401b17 	ldw	r5,108(sp)
    c0c4:	d8801c17 	ldw	r2,112(sp)
    c0c8:	d811883a 	mov	r8,sp
    c0cc:	29000044 	addi	r4,r5,1
    c0d0:	003e8b06 	br	bb00 <__alt_mem_Flash_flash_data+0xf400bb00>
    c0d4:	9023883a 	mov	r17,r18
    c0d8:	003d5a06 	br	b644 <__alt_mem_Flash_flash_data+0xf400b644>
    c0dc:	4827883a 	mov	r19,r9
    c0e0:	003e3506 	br	b9b8 <__alt_mem_Flash_flash_data+0xf400b9b8>
    c0e4:	d8c02217 	ldw	r3,136(sp)
    c0e8:	001b883a 	mov	r13,zero
    c0ec:	0005883a 	mov	r2,zero
    c0f0:	1d800017 	ldw	r22,0(r3)
    c0f4:	18c00104 	addi	r3,r3,4
    c0f8:	d8c02215 	stw	r3,136(sp)
    c0fc:	b009883a 	mov	r4,r22
    c100:	003c8e06 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    c104:	1d800017 	ldw	r22,0(r3)
    c108:	d9002217 	ldw	r4,136(sp)
    c10c:	b01bd7fa 	srai	r13,r22,31
    c110:	21000104 	addi	r4,r4,4
    c114:	d9002215 	stw	r4,136(sp)
    c118:	6805883a 	mov	r2,r13
    c11c:	003da306 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>
    c120:	d9002217 	ldw	r4,136(sp)
    c124:	001b883a 	mov	r13,zero
    c128:	00800044 	movi	r2,1
    c12c:	25800017 	ldw	r22,0(r4)
    c130:	21000104 	addi	r4,r4,4
    c134:	d9002215 	stw	r4,136(sp)
    c138:	b009883a 	mov	r4,r22
    c13c:	003c7f06 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    c140:	00c000b4 	movhi	r3,2
    c144:	18f20f04 	addi	r3,r3,-14276
    c148:	d8c02415 	stw	r3,144(sp)
    c14c:	003cff06 	br	b54c <__alt_mem_Flash_flash_data+0xf400b54c>
    c150:	d8801c17 	ldw	r2,112(sp)
    c154:	dd402117 	ldw	r21,132(sp)
    c158:	103ec526 	beq	r2,zero,bc70 <__alt_mem_Flash_flash_data+0xf400bc70>
    c15c:	d9002017 	ldw	r4,128(sp)
    c160:	a80b883a 	mov	r5,r21
    c164:	d9801a04 	addi	r6,sp,104
    c168:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    c16c:	003ec006 	br	bc70 <__alt_mem_Flash_flash_data+0xf400bc70>
    c170:	80800044 	addi	r2,r16,1
    c174:	ad400814 	ori	r21,r21,32
    c178:	80c00047 	ldb	r3,1(r16)
    c17c:	003bef06 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    c180:	04a5c83a 	sub	r18,zero,r18
    c184:	8005883a 	mov	r2,r16
    c188:	d8c02215 	stw	r3,136(sp)
    c18c:	003d5306 	br	b6dc <__alt_mem_Flash_flash_data+0xf400b6dc>
    c190:	da002a15 	stw	r8,168(sp)
    c194:	0000c800 	call	c80 <strlen>
    c198:	1027883a 	mov	r19,r2
    c19c:	db801d83 	ldbu	r14,118(sp)
    c1a0:	dd802215 	stw	r22,136(sp)
    c1a4:	0013883a 	mov	r9,zero
    c1a8:	da002a17 	ldw	r8,168(sp)
    c1ac:	003c7f06 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    c1b0:	d9002017 	ldw	r4,128(sp)
    c1b4:	d9402117 	ldw	r5,132(sp)
    c1b8:	d9801a04 	addi	r6,sp,104
    c1bc:	da402b15 	stw	r9,172(sp)
    c1c0:	000aeb00 	call	aeb0 <__sprint_r.part.0>
    c1c4:	da402b17 	ldw	r9,172(sp)
    c1c8:	103ea81e 	bne	r2,zero,bc6c <__alt_mem_Flash_flash_data+0xf400bc6c>
    c1cc:	d9401b17 	ldw	r5,108(sp)
    c1d0:	d8801c17 	ldw	r2,112(sp)
    c1d4:	d811883a 	mov	r8,sp
    c1d8:	29000044 	addi	r4,r5,1
    c1dc:	003cc006 	br	b4e0 <__alt_mem_Flash_flash_data+0xf400b4e0>
    c1e0:	d9401b17 	ldw	r5,108(sp)
    c1e4:	010000b4 	movhi	r4,2
    c1e8:	21321304 	addi	r4,r4,-14260
    c1ec:	d9002415 	stw	r4,144(sp)
    c1f0:	29400044 	addi	r5,r5,1
    c1f4:	003c9f06 	br	b474 <__alt_mem_Flash_flash_data+0xf400b474>
    c1f8:	00800184 	movi	r2,6
    c1fc:	1240012e 	bgeu	r2,r9,c204 <___vfiprintf_internal_r+0x1240>
    c200:	1013883a 	mov	r9,r2
    c204:	4827883a 	mov	r19,r9
    c208:	4823883a 	mov	r17,r9
    c20c:	48001116 	blt	r9,zero,c254 <___vfiprintf_internal_r+0x1290>
    c210:	050000b4 	movhi	r20,2
    c214:	dd802215 	stw	r22,136(sp)
    c218:	a531a304 	addi	r20,r20,-14708
    c21c:	003db106 	br	b8e4 <__alt_mem_Flash_flash_data+0xf400b8e4>
    c220:	d9401b17 	ldw	r5,108(sp)
    c224:	010000b4 	movhi	r4,2
    c228:	21321304 	addi	r4,r4,-14260
    c22c:	d9002415 	stw	r4,144(sp)
    c230:	29400044 	addi	r5,r5,1
    c234:	003cf906 	br	b61c <__alt_mem_Flash_flash_data+0xf400b61c>
    c238:	4827883a 	mov	r19,r9
    c23c:	db801d83 	ldbu	r14,118(sp)
    c240:	dd802215 	stw	r22,136(sp)
    c244:	0013883a 	mov	r9,zero
    c248:	003c5806 	br	b3ac <__alt_mem_Flash_flash_data+0xf400b3ac>
    c24c:	200d883a 	mov	r6,r4
    c250:	003ec706 	br	bd70 <__alt_mem_Flash_flash_data+0xf400bd70>
    c254:	0023883a 	mov	r17,zero
    c258:	003fed06 	br	c210 <__alt_mem_Flash_flash_data+0xf400c210>
    c25c:	d9002217 	ldw	r4,136(sp)
    c260:	22400017 	ldw	r9,0(r4)
    c264:	20c00104 	addi	r3,r4,4
    c268:	d8c02215 	stw	r3,136(sp)
    c26c:	483fc20e 	bge	r9,zero,c178 <__alt_mem_Flash_flash_data+0xf400c178>
    c270:	027fffc4 	movi	r9,-1
    c274:	80c00047 	ldb	r3,1(r16)
    c278:	003bb006 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>
    c27c:	8c80010e 	bge	r17,r18,c284 <___vfiprintf_internal_r+0x12c0>
    c280:	9023883a 	mov	r17,r18
    c284:	d8802317 	ldw	r2,140(sp)
    c288:	1445883a 	add	r2,r2,r17
    c28c:	d8802315 	stw	r2,140(sp)
    c290:	003cef06 	br	b650 <__alt_mem_Flash_flash_data+0xf400b650>

0000c294 <__vfiprintf_internal>:
    c294:	2007883a 	mov	r3,r4
    c298:	010000b4 	movhi	r4,2
    c29c:	213ac004 	addi	r4,r4,-5376
    c2a0:	21000017 	ldw	r4,0(r4)
    c2a4:	2805883a 	mov	r2,r5
    c2a8:	300f883a 	mov	r7,r6
    c2ac:	180b883a 	mov	r5,r3
    c2b0:	100d883a 	mov	r6,r2
    c2b4:	000afc41 	jmpi	afc4 <___vfiprintf_internal_r>

0000c2b8 <__sbprintf>:
    c2b8:	2880030b 	ldhu	r2,12(r5)
    c2bc:	2ac01917 	ldw	r11,100(r5)
    c2c0:	2a80038b 	ldhu	r10,14(r5)
    c2c4:	2a400717 	ldw	r9,28(r5)
    c2c8:	2a000917 	ldw	r8,36(r5)
    c2cc:	defee204 	addi	sp,sp,-1144
    c2d0:	00c10004 	movi	r3,1024
    c2d4:	dc011a15 	stw	r16,1128(sp)
    c2d8:	10bfff4c 	andi	r2,r2,65533
    c2dc:	2821883a 	mov	r16,r5
    c2e0:	d8cb883a 	add	r5,sp,r3
    c2e4:	dc811c15 	stw	r18,1136(sp)
    c2e8:	dc411b15 	stw	r17,1132(sp)
    c2ec:	dfc11d15 	stw	ra,1140(sp)
    c2f0:	2025883a 	mov	r18,r4
    c2f4:	d881030d 	sth	r2,1036(sp)
    c2f8:	dac11915 	stw	r11,1124(sp)
    c2fc:	da81038d 	sth	r10,1038(sp)
    c300:	da410715 	stw	r9,1052(sp)
    c304:	da010915 	stw	r8,1060(sp)
    c308:	dec10015 	stw	sp,1024(sp)
    c30c:	dec10415 	stw	sp,1040(sp)
    c310:	d8c10215 	stw	r3,1032(sp)
    c314:	d8c10515 	stw	r3,1044(sp)
    c318:	d8010615 	stw	zero,1048(sp)
    c31c:	000afc40 	call	afc4 <___vfiprintf_internal_r>
    c320:	1023883a 	mov	r17,r2
    c324:	10000416 	blt	r2,zero,c338 <__sbprintf+0x80>
    c328:	9009883a 	mov	r4,r18
    c32c:	d9410004 	addi	r5,sp,1024
    c330:	000695c0 	call	695c <_fflush_r>
    c334:	10000d1e 	bne	r2,zero,c36c <__sbprintf+0xb4>
    c338:	d8c1030b 	ldhu	r3,1036(sp)
    c33c:	18c0100c 	andi	r3,r3,64
    c340:	18000326 	beq	r3,zero,c350 <__sbprintf+0x98>
    c344:	8080030b 	ldhu	r2,12(r16)
    c348:	10801014 	ori	r2,r2,64
    c34c:	8080030d 	sth	r2,12(r16)
    c350:	8805883a 	mov	r2,r17
    c354:	dfc11d17 	ldw	ra,1140(sp)
    c358:	dc811c17 	ldw	r18,1136(sp)
    c35c:	dc411b17 	ldw	r17,1132(sp)
    c360:	dc011a17 	ldw	r16,1128(sp)
    c364:	dec11e04 	addi	sp,sp,1144
    c368:	f800283a 	ret
    c36c:	047fffc4 	movi	r17,-1
    c370:	003ff106 	br	c338 <__alt_mem_Flash_flash_data+0xf400c338>

0000c374 <_write_r>:
    c374:	defffd04 	addi	sp,sp,-12
    c378:	dc000015 	stw	r16,0(sp)
    c37c:	040000b4 	movhi	r16,2
    c380:	dc400115 	stw	r17,4(sp)
    c384:	8402c804 	addi	r16,r16,2848
    c388:	2023883a 	mov	r17,r4
    c38c:	2809883a 	mov	r4,r5
    c390:	300b883a 	mov	r5,r6
    c394:	380d883a 	mov	r6,r7
    c398:	dfc00215 	stw	ra,8(sp)
    c39c:	80000015 	stw	zero,0(r16)
    c3a0:	00107b00 	call	107b0 <write>
    c3a4:	00ffffc4 	movi	r3,-1
    c3a8:	10c00526 	beq	r2,r3,c3c0 <_write_r+0x4c>
    c3ac:	dfc00217 	ldw	ra,8(sp)
    c3b0:	dc400117 	ldw	r17,4(sp)
    c3b4:	dc000017 	ldw	r16,0(sp)
    c3b8:	dec00304 	addi	sp,sp,12
    c3bc:	f800283a 	ret
    c3c0:	80c00017 	ldw	r3,0(r16)
    c3c4:	183ff926 	beq	r3,zero,c3ac <__alt_mem_Flash_flash_data+0xf400c3ac>
    c3c8:	88c00015 	stw	r3,0(r17)
    c3cc:	003ff706 	br	c3ac <__alt_mem_Flash_flash_data+0xf400c3ac>

0000c3d0 <_close_r>:
    c3d0:	defffd04 	addi	sp,sp,-12
    c3d4:	dc000015 	stw	r16,0(sp)
    c3d8:	040000b4 	movhi	r16,2
    c3dc:	dc400115 	stw	r17,4(sp)
    c3e0:	8402c804 	addi	r16,r16,2848
    c3e4:	2023883a 	mov	r17,r4
    c3e8:	2809883a 	mov	r4,r5
    c3ec:	dfc00215 	stw	ra,8(sp)
    c3f0:	80000015 	stw	zero,0(r16)
    c3f4:	000ff380 	call	ff38 <close>
    c3f8:	00ffffc4 	movi	r3,-1
    c3fc:	10c00526 	beq	r2,r3,c414 <_close_r+0x44>
    c400:	dfc00217 	ldw	ra,8(sp)
    c404:	dc400117 	ldw	r17,4(sp)
    c408:	dc000017 	ldw	r16,0(sp)
    c40c:	dec00304 	addi	sp,sp,12
    c410:	f800283a 	ret
    c414:	80c00017 	ldw	r3,0(r16)
    c418:	183ff926 	beq	r3,zero,c400 <__alt_mem_Flash_flash_data+0xf400c400>
    c41c:	88c00015 	stw	r3,0(r17)
    c420:	003ff706 	br	c400 <__alt_mem_Flash_flash_data+0xf400c400>

0000c424 <_calloc_r>:
    c424:	298b383a 	mul	r5,r5,r6
    c428:	defffe04 	addi	sp,sp,-8
    c42c:	dc000015 	stw	r16,0(sp)
    c430:	dfc00115 	stw	ra,4(sp)
    c434:	0007a7c0 	call	7a7c <_malloc_r>
    c438:	1021883a 	mov	r16,r2
    c43c:	10002826 	beq	r2,zero,c4e0 <_calloc_r+0xbc>
    c440:	11bfff17 	ldw	r6,-4(r2)
    c444:	00bfff04 	movi	r2,-4
    c448:	00c00904 	movi	r3,36
    c44c:	308c703a 	and	r6,r6,r2
    c450:	308d883a 	add	r6,r6,r2
    c454:	19801436 	bltu	r3,r6,c4a8 <_calloc_r+0x84>
    c458:	008004c4 	movi	r2,19
    c45c:	11800936 	bltu	r2,r6,c484 <_calloc_r+0x60>
    c460:	8005883a 	mov	r2,r16
    c464:	10000015 	stw	zero,0(r2)
    c468:	10000115 	stw	zero,4(r2)
    c46c:	10000215 	stw	zero,8(r2)
    c470:	8005883a 	mov	r2,r16
    c474:	dfc00117 	ldw	ra,4(sp)
    c478:	dc000017 	ldw	r16,0(sp)
    c47c:	dec00204 	addi	sp,sp,8
    c480:	f800283a 	ret
    c484:	80000015 	stw	zero,0(r16)
    c488:	80000115 	stw	zero,4(r16)
    c48c:	008006c4 	movi	r2,27
    c490:	11800d2e 	bgeu	r2,r6,c4c8 <_calloc_r+0xa4>
    c494:	80000215 	stw	zero,8(r16)
    c498:	80000315 	stw	zero,12(r16)
    c49c:	30c00c26 	beq	r6,r3,c4d0 <_calloc_r+0xac>
    c4a0:	80800404 	addi	r2,r16,16
    c4a4:	003fef06 	br	c464 <__alt_mem_Flash_flash_data+0xf400c464>
    c4a8:	8009883a 	mov	r4,r16
    c4ac:	000b883a 	mov	r5,zero
    c4b0:	00008d00 	call	8d0 <memset>
    c4b4:	8005883a 	mov	r2,r16
    c4b8:	dfc00117 	ldw	ra,4(sp)
    c4bc:	dc000017 	ldw	r16,0(sp)
    c4c0:	dec00204 	addi	sp,sp,8
    c4c4:	f800283a 	ret
    c4c8:	80800204 	addi	r2,r16,8
    c4cc:	003fe506 	br	c464 <__alt_mem_Flash_flash_data+0xf400c464>
    c4d0:	80000415 	stw	zero,16(r16)
    c4d4:	80800604 	addi	r2,r16,24
    c4d8:	80000515 	stw	zero,20(r16)
    c4dc:	003fe106 	br	c464 <__alt_mem_Flash_flash_data+0xf400c464>
    c4e0:	0005883a 	mov	r2,zero
    c4e4:	003fe306 	br	c474 <__alt_mem_Flash_flash_data+0xf400c474>

0000c4e8 <_fclose_r>:
    c4e8:	28003926 	beq	r5,zero,c5d0 <_fclose_r+0xe8>
    c4ec:	defffc04 	addi	sp,sp,-16
    c4f0:	dc400115 	stw	r17,4(sp)
    c4f4:	dc000015 	stw	r16,0(sp)
    c4f8:	dfc00315 	stw	ra,12(sp)
    c4fc:	dc800215 	stw	r18,8(sp)
    c500:	2023883a 	mov	r17,r4
    c504:	2821883a 	mov	r16,r5
    c508:	20000226 	beq	r4,zero,c514 <_fclose_r+0x2c>
    c50c:	20800e17 	ldw	r2,56(r4)
    c510:	10002726 	beq	r2,zero,c5b0 <_fclose_r+0xc8>
    c514:	8080030f 	ldh	r2,12(r16)
    c518:	1000071e 	bne	r2,zero,c538 <_fclose_r+0x50>
    c51c:	0005883a 	mov	r2,zero
    c520:	dfc00317 	ldw	ra,12(sp)
    c524:	dc800217 	ldw	r18,8(sp)
    c528:	dc400117 	ldw	r17,4(sp)
    c52c:	dc000017 	ldw	r16,0(sp)
    c530:	dec00404 	addi	sp,sp,16
    c534:	f800283a 	ret
    c538:	8809883a 	mov	r4,r17
    c53c:	800b883a 	mov	r5,r16
    c540:	00067540 	call	6754 <__sflush_r>
    c544:	1025883a 	mov	r18,r2
    c548:	80800b17 	ldw	r2,44(r16)
    c54c:	10000426 	beq	r2,zero,c560 <_fclose_r+0x78>
    c550:	81400717 	ldw	r5,28(r16)
    c554:	8809883a 	mov	r4,r17
    c558:	103ee83a 	callr	r2
    c55c:	10001616 	blt	r2,zero,c5b8 <_fclose_r+0xd0>
    c560:	8080030b 	ldhu	r2,12(r16)
    c564:	1080200c 	andi	r2,r2,128
    c568:	1000151e 	bne	r2,zero,c5c0 <_fclose_r+0xd8>
    c56c:	81400c17 	ldw	r5,48(r16)
    c570:	28000526 	beq	r5,zero,c588 <_fclose_r+0xa0>
    c574:	80801004 	addi	r2,r16,64
    c578:	28800226 	beq	r5,r2,c584 <_fclose_r+0x9c>
    c57c:	8809883a 	mov	r4,r17
    c580:	0006eac0 	call	6eac <_free_r>
    c584:	80000c15 	stw	zero,48(r16)
    c588:	81401117 	ldw	r5,68(r16)
    c58c:	28000326 	beq	r5,zero,c59c <_fclose_r+0xb4>
    c590:	8809883a 	mov	r4,r17
    c594:	0006eac0 	call	6eac <_free_r>
    c598:	80001115 	stw	zero,68(r16)
    c59c:	0006d480 	call	6d48 <__sfp_lock_acquire>
    c5a0:	8000030d 	sth	zero,12(r16)
    c5a4:	0006d4c0 	call	6d4c <__sfp_lock_release>
    c5a8:	9005883a 	mov	r2,r18
    c5ac:	003fdc06 	br	c520 <__alt_mem_Flash_flash_data+0xf400c520>
    c5b0:	0006d380 	call	6d38 <__sinit>
    c5b4:	003fd706 	br	c514 <__alt_mem_Flash_flash_data+0xf400c514>
    c5b8:	04bfffc4 	movi	r18,-1
    c5bc:	003fe806 	br	c560 <__alt_mem_Flash_flash_data+0xf400c560>
    c5c0:	81400417 	ldw	r5,16(r16)
    c5c4:	8809883a 	mov	r4,r17
    c5c8:	0006eac0 	call	6eac <_free_r>
    c5cc:	003fe706 	br	c56c <__alt_mem_Flash_flash_data+0xf400c56c>
    c5d0:	0005883a 	mov	r2,zero
    c5d4:	f800283a 	ret

0000c5d8 <fclose>:
    c5d8:	008000b4 	movhi	r2,2
    c5dc:	10bac004 	addi	r2,r2,-5376
    c5e0:	200b883a 	mov	r5,r4
    c5e4:	11000017 	ldw	r4,0(r2)
    c5e8:	000c4e81 	jmpi	c4e8 <_fclose_r>

0000c5ec <_fputwc_r>:
    c5ec:	3080030b 	ldhu	r2,12(r6)
    c5f0:	defff804 	addi	sp,sp,-32
    c5f4:	dcc00415 	stw	r19,16(sp)
    c5f8:	dc800315 	stw	r18,12(sp)
    c5fc:	dc000115 	stw	r16,4(sp)
    c600:	dfc00715 	stw	ra,28(sp)
    c604:	dd400615 	stw	r21,24(sp)
    c608:	dd000515 	stw	r20,20(sp)
    c60c:	dc400215 	stw	r17,8(sp)
    c610:	10c8000c 	andi	r3,r2,8192
    c614:	3021883a 	mov	r16,r6
    c618:	2027883a 	mov	r19,r4
    c61c:	2825883a 	mov	r18,r5
    c620:	1800051e 	bne	r3,zero,c638 <_fputwc_r+0x4c>
    c624:	30c01917 	ldw	r3,100(r6)
    c628:	10880014 	ori	r2,r2,8192
    c62c:	3080030d 	sth	r2,12(r6)
    c630:	18880014 	ori	r2,r3,8192
    c634:	30801915 	stw	r2,100(r6)
    c638:	000786c0 	call	786c <__locale_mb_cur_max>
    c63c:	00c00044 	movi	r3,1
    c640:	10c03e26 	beq	r2,r3,c73c <_fputwc_r+0x150>
    c644:	9809883a 	mov	r4,r19
    c648:	d80b883a 	mov	r5,sp
    c64c:	900d883a 	mov	r6,r18
    c650:	81c01704 	addi	r7,r16,92
    c654:	000ca840 	call	ca84 <_wcrtomb_r>
    c658:	1029883a 	mov	r20,r2
    c65c:	00bfffc4 	movi	r2,-1
    c660:	a0802026 	beq	r20,r2,c6e4 <_fputwc_r+0xf8>
    c664:	d9400003 	ldbu	r5,0(sp)
    c668:	a0001c26 	beq	r20,zero,c6dc <_fputwc_r+0xf0>
    c66c:	0023883a 	mov	r17,zero
    c670:	05400284 	movi	r21,10
    c674:	00000906 	br	c69c <_fputwc_r+0xb0>
    c678:	80800017 	ldw	r2,0(r16)
    c67c:	11400005 	stb	r5,0(r2)
    c680:	80c00017 	ldw	r3,0(r16)
    c684:	18c00044 	addi	r3,r3,1
    c688:	80c00015 	stw	r3,0(r16)
    c68c:	8c400044 	addi	r17,r17,1
    c690:	dc45883a 	add	r2,sp,r17
    c694:	8d00112e 	bgeu	r17,r20,c6dc <_fputwc_r+0xf0>
    c698:	11400003 	ldbu	r5,0(r2)
    c69c:	80c00217 	ldw	r3,8(r16)
    c6a0:	18ffffc4 	addi	r3,r3,-1
    c6a4:	80c00215 	stw	r3,8(r16)
    c6a8:	183ff30e 	bge	r3,zero,c678 <__alt_mem_Flash_flash_data+0xf400c678>
    c6ac:	80800617 	ldw	r2,24(r16)
    c6b0:	18801916 	blt	r3,r2,c718 <_fputwc_r+0x12c>
    c6b4:	80800017 	ldw	r2,0(r16)
    c6b8:	11400005 	stb	r5,0(r2)
    c6bc:	80800017 	ldw	r2,0(r16)
    c6c0:	10c00003 	ldbu	r3,0(r2)
    c6c4:	10800044 	addi	r2,r2,1
    c6c8:	1d402326 	beq	r3,r21,c758 <_fputwc_r+0x16c>
    c6cc:	80800015 	stw	r2,0(r16)
    c6d0:	8c400044 	addi	r17,r17,1
    c6d4:	dc45883a 	add	r2,sp,r17
    c6d8:	8d3fef36 	bltu	r17,r20,c698 <__alt_mem_Flash_flash_data+0xf400c698>
    c6dc:	9005883a 	mov	r2,r18
    c6e0:	00000406 	br	c6f4 <_fputwc_r+0x108>
    c6e4:	80c0030b 	ldhu	r3,12(r16)
    c6e8:	a005883a 	mov	r2,r20
    c6ec:	18c01014 	ori	r3,r3,64
    c6f0:	80c0030d 	sth	r3,12(r16)
    c6f4:	dfc00717 	ldw	ra,28(sp)
    c6f8:	dd400617 	ldw	r21,24(sp)
    c6fc:	dd000517 	ldw	r20,20(sp)
    c700:	dcc00417 	ldw	r19,16(sp)
    c704:	dc800317 	ldw	r18,12(sp)
    c708:	dc400217 	ldw	r17,8(sp)
    c70c:	dc000117 	ldw	r16,4(sp)
    c710:	dec00804 	addi	sp,sp,32
    c714:	f800283a 	ret
    c718:	9809883a 	mov	r4,r19
    c71c:	29403fcc 	andi	r5,r5,255
    c720:	800d883a 	mov	r6,r16
    c724:	000c9300 	call	c930 <__swbuf_r>
    c728:	10bfffe0 	cmpeqi	r2,r2,-1
    c72c:	10803fcc 	andi	r2,r2,255
    c730:	103fd626 	beq	r2,zero,c68c <__alt_mem_Flash_flash_data+0xf400c68c>
    c734:	00bfffc4 	movi	r2,-1
    c738:	003fee06 	br	c6f4 <__alt_mem_Flash_flash_data+0xf400c6f4>
    c73c:	90ffffc4 	addi	r3,r18,-1
    c740:	01003f84 	movi	r4,254
    c744:	20ffbf36 	bltu	r4,r3,c644 <__alt_mem_Flash_flash_data+0xf400c644>
    c748:	900b883a 	mov	r5,r18
    c74c:	dc800005 	stb	r18,0(sp)
    c750:	1029883a 	mov	r20,r2
    c754:	003fc506 	br	c66c <__alt_mem_Flash_flash_data+0xf400c66c>
    c758:	9809883a 	mov	r4,r19
    c75c:	a80b883a 	mov	r5,r21
    c760:	800d883a 	mov	r6,r16
    c764:	000c9300 	call	c930 <__swbuf_r>
    c768:	10bfffe0 	cmpeqi	r2,r2,-1
    c76c:	003fef06 	br	c72c <__alt_mem_Flash_flash_data+0xf400c72c>

0000c770 <fputwc>:
    c770:	008000b4 	movhi	r2,2
    c774:	defffc04 	addi	sp,sp,-16
    c778:	10bac004 	addi	r2,r2,-5376
    c77c:	dc000115 	stw	r16,4(sp)
    c780:	14000017 	ldw	r16,0(r2)
    c784:	dc400215 	stw	r17,8(sp)
    c788:	dfc00315 	stw	ra,12(sp)
    c78c:	2023883a 	mov	r17,r4
    c790:	280d883a 	mov	r6,r5
    c794:	80000626 	beq	r16,zero,c7b0 <fputwc+0x40>
    c798:	80800e17 	ldw	r2,56(r16)
    c79c:	1000041e 	bne	r2,zero,c7b0 <fputwc+0x40>
    c7a0:	8009883a 	mov	r4,r16
    c7a4:	d9400015 	stw	r5,0(sp)
    c7a8:	0006d380 	call	6d38 <__sinit>
    c7ac:	d9800017 	ldw	r6,0(sp)
    c7b0:	8009883a 	mov	r4,r16
    c7b4:	880b883a 	mov	r5,r17
    c7b8:	dfc00317 	ldw	ra,12(sp)
    c7bc:	dc400217 	ldw	r17,8(sp)
    c7c0:	dc000117 	ldw	r16,4(sp)
    c7c4:	dec00404 	addi	sp,sp,16
    c7c8:	000c5ec1 	jmpi	c5ec <_fputwc_r>

0000c7cc <_fstat_r>:
    c7cc:	defffd04 	addi	sp,sp,-12
    c7d0:	dc000015 	stw	r16,0(sp)
    c7d4:	040000b4 	movhi	r16,2
    c7d8:	dc400115 	stw	r17,4(sp)
    c7dc:	8402c804 	addi	r16,r16,2848
    c7e0:	2023883a 	mov	r17,r4
    c7e4:	2809883a 	mov	r4,r5
    c7e8:	300b883a 	mov	r5,r6
    c7ec:	dfc00215 	stw	ra,8(sp)
    c7f0:	80000015 	stw	zero,0(r16)
    c7f4:	00100840 	call	10084 <fstat>
    c7f8:	00ffffc4 	movi	r3,-1
    c7fc:	10c00526 	beq	r2,r3,c814 <_fstat_r+0x48>
    c800:	dfc00217 	ldw	ra,8(sp)
    c804:	dc400117 	ldw	r17,4(sp)
    c808:	dc000017 	ldw	r16,0(sp)
    c80c:	dec00304 	addi	sp,sp,12
    c810:	f800283a 	ret
    c814:	80c00017 	ldw	r3,0(r16)
    c818:	183ff926 	beq	r3,zero,c800 <__alt_mem_Flash_flash_data+0xf400c800>
    c81c:	88c00015 	stw	r3,0(r17)
    c820:	003ff706 	br	c800 <__alt_mem_Flash_flash_data+0xf400c800>

0000c824 <_isatty_r>:
    c824:	defffd04 	addi	sp,sp,-12
    c828:	dc000015 	stw	r16,0(sp)
    c82c:	040000b4 	movhi	r16,2
    c830:	dc400115 	stw	r17,4(sp)
    c834:	8402c804 	addi	r16,r16,2848
    c838:	2023883a 	mov	r17,r4
    c83c:	2809883a 	mov	r4,r5
    c840:	dfc00215 	stw	ra,8(sp)
    c844:	80000015 	stw	zero,0(r16)
    c848:	00101840 	call	10184 <isatty>
    c84c:	00ffffc4 	movi	r3,-1
    c850:	10c00526 	beq	r2,r3,c868 <_isatty_r+0x44>
    c854:	dfc00217 	ldw	ra,8(sp)
    c858:	dc400117 	ldw	r17,4(sp)
    c85c:	dc000017 	ldw	r16,0(sp)
    c860:	dec00304 	addi	sp,sp,12
    c864:	f800283a 	ret
    c868:	80c00017 	ldw	r3,0(r16)
    c86c:	183ff926 	beq	r3,zero,c854 <__alt_mem_Flash_flash_data+0xf400c854>
    c870:	88c00015 	stw	r3,0(r17)
    c874:	003ff706 	br	c854 <__alt_mem_Flash_flash_data+0xf400c854>

0000c878 <_lseek_r>:
    c878:	defffd04 	addi	sp,sp,-12
    c87c:	dc000015 	stw	r16,0(sp)
    c880:	040000b4 	movhi	r16,2
    c884:	dc400115 	stw	r17,4(sp)
    c888:	8402c804 	addi	r16,r16,2848
    c88c:	2023883a 	mov	r17,r4
    c890:	2809883a 	mov	r4,r5
    c894:	300b883a 	mov	r5,r6
    c898:	380d883a 	mov	r6,r7
    c89c:	dfc00215 	stw	ra,8(sp)
    c8a0:	80000015 	stw	zero,0(r16)
    c8a4:	001035c0 	call	1035c <lseek>
    c8a8:	00ffffc4 	movi	r3,-1
    c8ac:	10c00526 	beq	r2,r3,c8c4 <_lseek_r+0x4c>
    c8b0:	dfc00217 	ldw	ra,8(sp)
    c8b4:	dc400117 	ldw	r17,4(sp)
    c8b8:	dc000017 	ldw	r16,0(sp)
    c8bc:	dec00304 	addi	sp,sp,12
    c8c0:	f800283a 	ret
    c8c4:	80c00017 	ldw	r3,0(r16)
    c8c8:	183ff926 	beq	r3,zero,c8b0 <__alt_mem_Flash_flash_data+0xf400c8b0>
    c8cc:	88c00015 	stw	r3,0(r17)
    c8d0:	003ff706 	br	c8b0 <__alt_mem_Flash_flash_data+0xf400c8b0>

0000c8d4 <_read_r>:
    c8d4:	defffd04 	addi	sp,sp,-12
    c8d8:	dc000015 	stw	r16,0(sp)
    c8dc:	040000b4 	movhi	r16,2
    c8e0:	dc400115 	stw	r17,4(sp)
    c8e4:	8402c804 	addi	r16,r16,2848
    c8e8:	2023883a 	mov	r17,r4
    c8ec:	2809883a 	mov	r4,r5
    c8f0:	300b883a 	mov	r5,r6
    c8f4:	380d883a 	mov	r6,r7
    c8f8:	dfc00215 	stw	ra,8(sp)
    c8fc:	80000015 	stw	zero,0(r16)
    c900:	00105540 	call	10554 <read>
    c904:	00ffffc4 	movi	r3,-1
    c908:	10c00526 	beq	r2,r3,c920 <_read_r+0x4c>
    c90c:	dfc00217 	ldw	ra,8(sp)
    c910:	dc400117 	ldw	r17,4(sp)
    c914:	dc000017 	ldw	r16,0(sp)
    c918:	dec00304 	addi	sp,sp,12
    c91c:	f800283a 	ret
    c920:	80c00017 	ldw	r3,0(r16)
    c924:	183ff926 	beq	r3,zero,c90c <__alt_mem_Flash_flash_data+0xf400c90c>
    c928:	88c00015 	stw	r3,0(r17)
    c92c:	003ff706 	br	c90c <__alt_mem_Flash_flash_data+0xf400c90c>

0000c930 <__swbuf_r>:
    c930:	defffc04 	addi	sp,sp,-16
    c934:	dc800215 	stw	r18,8(sp)
    c938:	dc400115 	stw	r17,4(sp)
    c93c:	dc000015 	stw	r16,0(sp)
    c940:	dfc00315 	stw	ra,12(sp)
    c944:	2025883a 	mov	r18,r4
    c948:	2823883a 	mov	r17,r5
    c94c:	3021883a 	mov	r16,r6
    c950:	20000226 	beq	r4,zero,c95c <__swbuf_r+0x2c>
    c954:	20800e17 	ldw	r2,56(r4)
    c958:	10004126 	beq	r2,zero,ca60 <__swbuf_r+0x130>
    c95c:	80c00617 	ldw	r3,24(r16)
    c960:	8180030b 	ldhu	r6,12(r16)
    c964:	80c00215 	stw	r3,8(r16)
    c968:	30c0020c 	andi	r3,r6,8
    c96c:	18003526 	beq	r3,zero,ca44 <__swbuf_r+0x114>
    c970:	80c00417 	ldw	r3,16(r16)
    c974:	18003326 	beq	r3,zero,ca44 <__swbuf_r+0x114>
    c978:	3088000c 	andi	r2,r6,8192
    c97c:	8c403fcc 	andi	r17,r17,255
    c980:	10001726 	beq	r2,zero,c9e0 <__swbuf_r+0xb0>
    c984:	80800017 	ldw	r2,0(r16)
    c988:	81000517 	ldw	r4,20(r16)
    c98c:	10c7c83a 	sub	r3,r2,r3
    c990:	19001d0e 	bge	r3,r4,ca08 <__swbuf_r+0xd8>
    c994:	18c00044 	addi	r3,r3,1
    c998:	81400217 	ldw	r5,8(r16)
    c99c:	11000044 	addi	r4,r2,1
    c9a0:	81000015 	stw	r4,0(r16)
    c9a4:	297fffc4 	addi	r5,r5,-1
    c9a8:	81400215 	stw	r5,8(r16)
    c9ac:	14400005 	stb	r17,0(r2)
    c9b0:	80800517 	ldw	r2,20(r16)
    c9b4:	10c01d26 	beq	r2,r3,ca2c <__swbuf_r+0xfc>
    c9b8:	8080030b 	ldhu	r2,12(r16)
    c9bc:	1080004c 	andi	r2,r2,1
    c9c0:	1000181e 	bne	r2,zero,ca24 <__swbuf_r+0xf4>
    c9c4:	8805883a 	mov	r2,r17
    c9c8:	dfc00317 	ldw	ra,12(sp)
    c9cc:	dc800217 	ldw	r18,8(sp)
    c9d0:	dc400117 	ldw	r17,4(sp)
    c9d4:	dc000017 	ldw	r16,0(sp)
    c9d8:	dec00404 	addi	sp,sp,16
    c9dc:	f800283a 	ret
    c9e0:	81001917 	ldw	r4,100(r16)
    c9e4:	00b7ffc4 	movi	r2,-8193
    c9e8:	31880014 	ori	r6,r6,8192
    c9ec:	2084703a 	and	r2,r4,r2
    c9f0:	80801915 	stw	r2,100(r16)
    c9f4:	80800017 	ldw	r2,0(r16)
    c9f8:	81000517 	ldw	r4,20(r16)
    c9fc:	8180030d 	sth	r6,12(r16)
    ca00:	10c7c83a 	sub	r3,r2,r3
    ca04:	193fe316 	blt	r3,r4,c994 <__alt_mem_Flash_flash_data+0xf400c994>
    ca08:	9009883a 	mov	r4,r18
    ca0c:	800b883a 	mov	r5,r16
    ca10:	000695c0 	call	695c <_fflush_r>
    ca14:	1000091e 	bne	r2,zero,ca3c <__swbuf_r+0x10c>
    ca18:	80800017 	ldw	r2,0(r16)
    ca1c:	00c00044 	movi	r3,1
    ca20:	003fdd06 	br	c998 <__alt_mem_Flash_flash_data+0xf400c998>
    ca24:	00800284 	movi	r2,10
    ca28:	88bfe61e 	bne	r17,r2,c9c4 <__alt_mem_Flash_flash_data+0xf400c9c4>
    ca2c:	9009883a 	mov	r4,r18
    ca30:	800b883a 	mov	r5,r16
    ca34:	000695c0 	call	695c <_fflush_r>
    ca38:	103fe226 	beq	r2,zero,c9c4 <__alt_mem_Flash_flash_data+0xf400c9c4>
    ca3c:	00bfffc4 	movi	r2,-1
    ca40:	003fe106 	br	c9c8 <__alt_mem_Flash_flash_data+0xf400c9c8>
    ca44:	9009883a 	mov	r4,r18
    ca48:	800b883a 	mov	r5,r16
    ca4c:	0004cd80 	call	4cd8 <__swsetup_r>
    ca50:	103ffa1e 	bne	r2,zero,ca3c <__alt_mem_Flash_flash_data+0xf400ca3c>
    ca54:	8180030b 	ldhu	r6,12(r16)
    ca58:	80c00417 	ldw	r3,16(r16)
    ca5c:	003fc606 	br	c978 <__alt_mem_Flash_flash_data+0xf400c978>
    ca60:	0006d380 	call	6d38 <__sinit>
    ca64:	003fbd06 	br	c95c <__alt_mem_Flash_flash_data+0xf400c95c>

0000ca68 <__swbuf>:
    ca68:	00c000b4 	movhi	r3,2
    ca6c:	18fac004 	addi	r3,r3,-5376
    ca70:	2005883a 	mov	r2,r4
    ca74:	19000017 	ldw	r4,0(r3)
    ca78:	280d883a 	mov	r6,r5
    ca7c:	100b883a 	mov	r5,r2
    ca80:	000c9301 	jmpi	c930 <__swbuf_r>

0000ca84 <_wcrtomb_r>:
    ca84:	defff604 	addi	sp,sp,-40
    ca88:	008000b4 	movhi	r2,2
    ca8c:	dc800815 	stw	r18,32(sp)
    ca90:	dc400715 	stw	r17,28(sp)
    ca94:	dc000615 	stw	r16,24(sp)
    ca98:	10bac404 	addi	r2,r2,-5360
    ca9c:	dfc00915 	stw	ra,36(sp)
    caa0:	2021883a 	mov	r16,r4
    caa4:	3823883a 	mov	r17,r7
    caa8:	14800017 	ldw	r18,0(r2)
    caac:	28001426 	beq	r5,zero,cb00 <_wcrtomb_r+0x7c>
    cab0:	d9400415 	stw	r5,16(sp)
    cab4:	d9800515 	stw	r6,20(sp)
    cab8:	00078600 	call	7860 <__locale_charset>
    cabc:	d9400417 	ldw	r5,16(sp)
    cac0:	d9800517 	ldw	r6,20(sp)
    cac4:	8009883a 	mov	r4,r16
    cac8:	dc400015 	stw	r17,0(sp)
    cacc:	100f883a 	mov	r7,r2
    cad0:	903ee83a 	callr	r18
    cad4:	00ffffc4 	movi	r3,-1
    cad8:	10c0031e 	bne	r2,r3,cae8 <_wcrtomb_r+0x64>
    cadc:	88000015 	stw	zero,0(r17)
    cae0:	00c02284 	movi	r3,138
    cae4:	80c00015 	stw	r3,0(r16)
    cae8:	dfc00917 	ldw	ra,36(sp)
    caec:	dc800817 	ldw	r18,32(sp)
    caf0:	dc400717 	ldw	r17,28(sp)
    caf4:	dc000617 	ldw	r16,24(sp)
    caf8:	dec00a04 	addi	sp,sp,40
    cafc:	f800283a 	ret
    cb00:	00078600 	call	7860 <__locale_charset>
    cb04:	8009883a 	mov	r4,r16
    cb08:	dc400015 	stw	r17,0(sp)
    cb0c:	d9400104 	addi	r5,sp,4
    cb10:	000d883a 	mov	r6,zero
    cb14:	100f883a 	mov	r7,r2
    cb18:	903ee83a 	callr	r18
    cb1c:	003fed06 	br	cad4 <__alt_mem_Flash_flash_data+0xf400cad4>

0000cb20 <wcrtomb>:
    cb20:	defff604 	addi	sp,sp,-40
    cb24:	008000b4 	movhi	r2,2
    cb28:	dc800615 	stw	r18,24(sp)
    cb2c:	dc400515 	stw	r17,20(sp)
    cb30:	dc000415 	stw	r16,16(sp)
    cb34:	10bac004 	addi	r2,r2,-5376
    cb38:	dfc00915 	stw	ra,36(sp)
    cb3c:	dd000815 	stw	r20,32(sp)
    cb40:	dcc00715 	stw	r19,28(sp)
    cb44:	2021883a 	mov	r16,r4
    cb48:	3025883a 	mov	r18,r6
    cb4c:	14400017 	ldw	r17,0(r2)
    cb50:	20001826 	beq	r4,zero,cbb4 <wcrtomb+0x94>
    cb54:	008000b4 	movhi	r2,2
    cb58:	10bac404 	addi	r2,r2,-5360
    cb5c:	15000017 	ldw	r20,0(r2)
    cb60:	2827883a 	mov	r19,r5
    cb64:	00078600 	call	7860 <__locale_charset>
    cb68:	8809883a 	mov	r4,r17
    cb6c:	dc800015 	stw	r18,0(sp)
    cb70:	800b883a 	mov	r5,r16
    cb74:	980d883a 	mov	r6,r19
    cb78:	100f883a 	mov	r7,r2
    cb7c:	a03ee83a 	callr	r20
    cb80:	00ffffc4 	movi	r3,-1
    cb84:	10c0031e 	bne	r2,r3,cb94 <wcrtomb+0x74>
    cb88:	90000015 	stw	zero,0(r18)
    cb8c:	00c02284 	movi	r3,138
    cb90:	88c00015 	stw	r3,0(r17)
    cb94:	dfc00917 	ldw	ra,36(sp)
    cb98:	dd000817 	ldw	r20,32(sp)
    cb9c:	dcc00717 	ldw	r19,28(sp)
    cba0:	dc800617 	ldw	r18,24(sp)
    cba4:	dc400517 	ldw	r17,20(sp)
    cba8:	dc000417 	ldw	r16,16(sp)
    cbac:	dec00a04 	addi	sp,sp,40
    cbb0:	f800283a 	ret
    cbb4:	008000b4 	movhi	r2,2
    cbb8:	10bac404 	addi	r2,r2,-5360
    cbbc:	14000017 	ldw	r16,0(r2)
    cbc0:	00078600 	call	7860 <__locale_charset>
    cbc4:	8809883a 	mov	r4,r17
    cbc8:	dc800015 	stw	r18,0(sp)
    cbcc:	d9400104 	addi	r5,sp,4
    cbd0:	000d883a 	mov	r6,zero
    cbd4:	100f883a 	mov	r7,r2
    cbd8:	803ee83a 	callr	r16
    cbdc:	003fe806 	br	cb80 <__alt_mem_Flash_flash_data+0xf400cb80>

0000cbe0 <__ascii_wctomb>:
    cbe0:	28000526 	beq	r5,zero,cbf8 <__ascii_wctomb+0x18>
    cbe4:	00803fc4 	movi	r2,255
    cbe8:	11800536 	bltu	r2,r6,cc00 <__ascii_wctomb+0x20>
    cbec:	29800005 	stb	r6,0(r5)
    cbf0:	00800044 	movi	r2,1
    cbf4:	f800283a 	ret
    cbf8:	0005883a 	mov	r2,zero
    cbfc:	f800283a 	ret
    cc00:	00802284 	movi	r2,138
    cc04:	20800015 	stw	r2,0(r4)
    cc08:	00bfffc4 	movi	r2,-1
    cc0c:	f800283a 	ret

0000cc10 <_wctomb_r>:
    cc10:	008000b4 	movhi	r2,2
    cc14:	defff904 	addi	sp,sp,-28
    cc18:	10bac404 	addi	r2,r2,-5360
    cc1c:	dfc00615 	stw	ra,24(sp)
    cc20:	dc400515 	stw	r17,20(sp)
    cc24:	dc000415 	stw	r16,16(sp)
    cc28:	3823883a 	mov	r17,r7
    cc2c:	14000017 	ldw	r16,0(r2)
    cc30:	d9000115 	stw	r4,4(sp)
    cc34:	d9400215 	stw	r5,8(sp)
    cc38:	d9800315 	stw	r6,12(sp)
    cc3c:	00078600 	call	7860 <__locale_charset>
    cc40:	d9000117 	ldw	r4,4(sp)
    cc44:	d9400217 	ldw	r5,8(sp)
    cc48:	d9800317 	ldw	r6,12(sp)
    cc4c:	dc400015 	stw	r17,0(sp)
    cc50:	100f883a 	mov	r7,r2
    cc54:	803ee83a 	callr	r16
    cc58:	dfc00617 	ldw	ra,24(sp)
    cc5c:	dc400517 	ldw	r17,20(sp)
    cc60:	dc000417 	ldw	r16,16(sp)
    cc64:	dec00704 	addi	sp,sp,28
    cc68:	f800283a 	ret

0000cc6c <__udivdi3>:
    cc6c:	defff504 	addi	sp,sp,-44
    cc70:	dcc00415 	stw	r19,16(sp)
    cc74:	dc000115 	stw	r16,4(sp)
    cc78:	dfc00a15 	stw	ra,40(sp)
    cc7c:	df000915 	stw	fp,36(sp)
    cc80:	ddc00815 	stw	r23,32(sp)
    cc84:	dd800715 	stw	r22,28(sp)
    cc88:	dd400615 	stw	r21,24(sp)
    cc8c:	dd000515 	stw	r20,20(sp)
    cc90:	dc800315 	stw	r18,12(sp)
    cc94:	dc400215 	stw	r17,8(sp)
    cc98:	2027883a 	mov	r19,r4
    cc9c:	2821883a 	mov	r16,r5
    cca0:	3800421e 	bne	r7,zero,cdac <__udivdi3+0x140>
    cca4:	3025883a 	mov	r18,r6
    cca8:	2023883a 	mov	r17,r4
    ccac:	2980542e 	bgeu	r5,r6,ce00 <__udivdi3+0x194>
    ccb0:	00bfffd4 	movui	r2,65535
    ccb4:	282d883a 	mov	r22,r5
    ccb8:	1180a836 	bltu	r2,r6,cf5c <__udivdi3+0x2f0>
    ccbc:	00803fc4 	movi	r2,255
    ccc0:	1181422e 	bgeu	r2,r6,d1cc <__udivdi3+0x560>
    ccc4:	00800204 	movi	r2,8
    ccc8:	1007883a 	mov	r3,r2
    cccc:	3084d83a 	srl	r2,r6,r2
    ccd0:	010000b4 	movhi	r4,2
    ccd4:	21321704 	addi	r4,r4,-14244
    ccd8:	2085883a 	add	r2,r4,r2
    ccdc:	10800003 	ldbu	r2,0(r2)
    cce0:	10c7883a 	add	r3,r2,r3
    cce4:	00800804 	movi	r2,32
    cce8:	10c5c83a 	sub	r2,r2,r3
    ccec:	10000526 	beq	r2,zero,cd04 <__udivdi3+0x98>
    ccf0:	80a0983a 	sll	r16,r16,r2
    ccf4:	98c6d83a 	srl	r3,r19,r3
    ccf8:	30a4983a 	sll	r18,r6,r2
    ccfc:	98a2983a 	sll	r17,r19,r2
    cd00:	80ecb03a 	or	r22,r16,r3
    cd04:	902ad43a 	srli	r21,r18,16
    cd08:	b009883a 	mov	r4,r22
    cd0c:	953fffcc 	andi	r20,r18,65535
    cd10:	a80b883a 	mov	r5,r21
    cd14:	000d8e00 	call	d8e0 <__umodsi3>
    cd18:	b009883a 	mov	r4,r22
    cd1c:	a80b883a 	mov	r5,r21
    cd20:	1027883a 	mov	r19,r2
    cd24:	000d8d80 	call	d8d8 <__udivsi3>
    cd28:	1021883a 	mov	r16,r2
    cd2c:	8806d43a 	srli	r3,r17,16
    cd30:	9804943a 	slli	r2,r19,16
    cd34:	8527383a 	mul	r19,r16,r20
    cd38:	10c4b03a 	or	r2,r2,r3
    cd3c:	14c0052e 	bgeu	r2,r19,cd54 <__udivdi3+0xe8>
    cd40:	1485883a 	add	r2,r2,r18
    cd44:	80ffffc4 	addi	r3,r16,-1
    cd48:	14800136 	bltu	r2,r18,cd50 <__udivdi3+0xe4>
    cd4c:	14c13436 	bltu	r2,r19,d220 <__udivdi3+0x5b4>
    cd50:	1821883a 	mov	r16,r3
    cd54:	14e7c83a 	sub	r19,r2,r19
    cd58:	9809883a 	mov	r4,r19
    cd5c:	a80b883a 	mov	r5,r21
    cd60:	000d8e00 	call	d8e0 <__umodsi3>
    cd64:	102d883a 	mov	r22,r2
    cd68:	9809883a 	mov	r4,r19
    cd6c:	a80b883a 	mov	r5,r21
    cd70:	000d8d80 	call	d8d8 <__udivsi3>
    cd74:	b02c943a 	slli	r22,r22,16
    cd78:	1529383a 	mul	r20,r2,r20
    cd7c:	8c7fffcc 	andi	r17,r17,65535
    cd80:	b462b03a 	or	r17,r22,r17
    cd84:	8d00052e 	bgeu	r17,r20,cd9c <__udivdi3+0x130>
    cd88:	8ca3883a 	add	r17,r17,r18
    cd8c:	10ffffc4 	addi	r3,r2,-1
    cd90:	8c80f636 	bltu	r17,r18,d16c <__udivdi3+0x500>
    cd94:	8d00f52e 	bgeu	r17,r20,d16c <__udivdi3+0x500>
    cd98:	10bfff84 	addi	r2,r2,-2
    cd9c:	8020943a 	slli	r16,r16,16
    cda0:	0007883a 	mov	r3,zero
    cda4:	1404b03a 	or	r2,r2,r16
    cda8:	00005b06 	br	cf18 <__udivdi3+0x2ac>
    cdac:	29c05836 	bltu	r5,r7,cf10 <__udivdi3+0x2a4>
    cdb0:	00bfffd4 	movui	r2,65535
    cdb4:	11c0642e 	bgeu	r2,r7,cf48 <__udivdi3+0x2dc>
    cdb8:	00804034 	movhi	r2,256
    cdbc:	10bfffc4 	addi	r2,r2,-1
    cdc0:	11c0f32e 	bgeu	r2,r7,d190 <__udivdi3+0x524>
    cdc4:	00c00604 	movi	r3,24
    cdc8:	180b883a 	mov	r5,r3
    cdcc:	38c6d83a 	srl	r3,r7,r3
    cdd0:	008000b4 	movhi	r2,2
    cdd4:	10b21704 	addi	r2,r2,-14244
    cdd8:	10c7883a 	add	r3,r2,r3
    cddc:	18c00003 	ldbu	r3,0(r3)
    cde0:	01000804 	movi	r4,32
    cde4:	1947883a 	add	r3,r3,r5
    cde8:	20e5c83a 	sub	r18,r4,r3
    cdec:	9000661e 	bne	r18,zero,cf88 <__udivdi3+0x31c>
    cdf0:	3c00f936 	bltu	r7,r16,d1d8 <__udivdi3+0x56c>
    cdf4:	9985403a 	cmpgeu	r2,r19,r6
    cdf8:	0007883a 	mov	r3,zero
    cdfc:	00004606 	br	cf18 <__udivdi3+0x2ac>
    ce00:	3000041e 	bne	r6,zero,ce14 <__udivdi3+0x1a8>
    ce04:	01000044 	movi	r4,1
    ce08:	000b883a 	mov	r5,zero
    ce0c:	000d8d80 	call	d8d8 <__udivsi3>
    ce10:	1025883a 	mov	r18,r2
    ce14:	00bfffd4 	movui	r2,65535
    ce18:	1480562e 	bgeu	r2,r18,cf74 <__udivdi3+0x308>
    ce1c:	00804034 	movhi	r2,256
    ce20:	10bfffc4 	addi	r2,r2,-1
    ce24:	1480e32e 	bgeu	r2,r18,d1b4 <__udivdi3+0x548>
    ce28:	00800604 	movi	r2,24
    ce2c:	1007883a 	mov	r3,r2
    ce30:	9084d83a 	srl	r2,r18,r2
    ce34:	010000b4 	movhi	r4,2
    ce38:	21321704 	addi	r4,r4,-14244
    ce3c:	2085883a 	add	r2,r4,r2
    ce40:	10800003 	ldbu	r2,0(r2)
    ce44:	10c5883a 	add	r2,r2,r3
    ce48:	00c00804 	movi	r3,32
    ce4c:	1887c83a 	sub	r3,r3,r2
    ce50:	1800911e 	bne	r3,zero,d098 <__udivdi3+0x42c>
    ce54:	9028d43a 	srli	r20,r18,16
    ce58:	84a1c83a 	sub	r16,r16,r18
    ce5c:	957fffcc 	andi	r21,r18,65535
    ce60:	00c00044 	movi	r3,1
    ce64:	8009883a 	mov	r4,r16
    ce68:	a00b883a 	mov	r5,r20
    ce6c:	d8c00015 	stw	r3,0(sp)
    ce70:	000d8e00 	call	d8e0 <__umodsi3>
    ce74:	8009883a 	mov	r4,r16
    ce78:	a00b883a 	mov	r5,r20
    ce7c:	1027883a 	mov	r19,r2
    ce80:	000d8d80 	call	d8d8 <__udivsi3>
    ce84:	1021883a 	mov	r16,r2
    ce88:	880cd43a 	srli	r6,r17,16
    ce8c:	9804943a 	slli	r2,r19,16
    ce90:	8567383a 	mul	r19,r16,r21
    ce94:	d8c00017 	ldw	r3,0(sp)
    ce98:	1188b03a 	or	r4,r2,r6
    ce9c:	24c0052e 	bgeu	r4,r19,ceb4 <__udivdi3+0x248>
    cea0:	2489883a 	add	r4,r4,r18
    cea4:	80bfffc4 	addi	r2,r16,-1
    cea8:	24800136 	bltu	r4,r18,ceb0 <__udivdi3+0x244>
    ceac:	24c0d936 	bltu	r4,r19,d214 <__udivdi3+0x5a8>
    ceb0:	1021883a 	mov	r16,r2
    ceb4:	24e7c83a 	sub	r19,r4,r19
    ceb8:	9809883a 	mov	r4,r19
    cebc:	a00b883a 	mov	r5,r20
    cec0:	d8c00015 	stw	r3,0(sp)
    cec4:	000d8e00 	call	d8e0 <__umodsi3>
    cec8:	102d883a 	mov	r22,r2
    cecc:	9809883a 	mov	r4,r19
    ced0:	a00b883a 	mov	r5,r20
    ced4:	000d8d80 	call	d8d8 <__udivsi3>
    ced8:	b02c943a 	slli	r22,r22,16
    cedc:	156b383a 	mul	r21,r2,r21
    cee0:	8c7fffcc 	andi	r17,r17,65535
    cee4:	b462b03a 	or	r17,r22,r17
    cee8:	d8c00017 	ldw	r3,0(sp)
    ceec:	8d40052e 	bgeu	r17,r21,cf04 <__udivdi3+0x298>
    cef0:	8ca3883a 	add	r17,r17,r18
    cef4:	113fffc4 	addi	r4,r2,-1
    cef8:	8c809a36 	bltu	r17,r18,d164 <__udivdi3+0x4f8>
    cefc:	8d40992e 	bgeu	r17,r21,d164 <__udivdi3+0x4f8>
    cf00:	10bfff84 	addi	r2,r2,-2
    cf04:	8020943a 	slli	r16,r16,16
    cf08:	1404b03a 	or	r2,r2,r16
    cf0c:	00000206 	br	cf18 <__udivdi3+0x2ac>
    cf10:	0007883a 	mov	r3,zero
    cf14:	0005883a 	mov	r2,zero
    cf18:	dfc00a17 	ldw	ra,40(sp)
    cf1c:	df000917 	ldw	fp,36(sp)
    cf20:	ddc00817 	ldw	r23,32(sp)
    cf24:	dd800717 	ldw	r22,28(sp)
    cf28:	dd400617 	ldw	r21,24(sp)
    cf2c:	dd000517 	ldw	r20,20(sp)
    cf30:	dcc00417 	ldw	r19,16(sp)
    cf34:	dc800317 	ldw	r18,12(sp)
    cf38:	dc400217 	ldw	r17,8(sp)
    cf3c:	dc000117 	ldw	r16,4(sp)
    cf40:	dec00b04 	addi	sp,sp,44
    cf44:	f800283a 	ret
    cf48:	00803fc4 	movi	r2,255
    cf4c:	11c0932e 	bgeu	r2,r7,d19c <__udivdi3+0x530>
    cf50:	00c00204 	movi	r3,8
    cf54:	180b883a 	mov	r5,r3
    cf58:	003f9c06 	br	cdcc <__alt_mem_Flash_flash_data+0xf400cdcc>
    cf5c:	00804034 	movhi	r2,256
    cf60:	10bfffc4 	addi	r2,r2,-1
    cf64:	1180902e 	bgeu	r2,r6,d1a8 <__udivdi3+0x53c>
    cf68:	00800604 	movi	r2,24
    cf6c:	1007883a 	mov	r3,r2
    cf70:	003f5606 	br	cccc <__alt_mem_Flash_flash_data+0xf400cccc>
    cf74:	00803fc4 	movi	r2,255
    cf78:	1480912e 	bgeu	r2,r18,d1c0 <__udivdi3+0x554>
    cf7c:	00800204 	movi	r2,8
    cf80:	1007883a 	mov	r3,r2
    cf84:	003faa06 	br	ce30 <__alt_mem_Flash_flash_data+0xf400ce30>
    cf88:	30eed83a 	srl	r23,r6,r3
    cf8c:	3c8e983a 	sll	r7,r7,r18
    cf90:	80f8d83a 	srl	fp,r16,r3
    cf94:	98c6d83a 	srl	r3,r19,r3
    cf98:	3deeb03a 	or	r23,r7,r23
    cf9c:	b828d43a 	srli	r20,r23,16
    cfa0:	84a0983a 	sll	r16,r16,r18
    cfa4:	e009883a 	mov	r4,fp
    cfa8:	a00b883a 	mov	r5,r20
    cfac:	80e2b03a 	or	r17,r16,r3
    cfb0:	34aa983a 	sll	r21,r6,r18
    cfb4:	000d8e00 	call	d8e0 <__umodsi3>
    cfb8:	e009883a 	mov	r4,fp
    cfbc:	a00b883a 	mov	r5,r20
    cfc0:	102d883a 	mov	r22,r2
    cfc4:	000d8d80 	call	d8d8 <__udivsi3>
    cfc8:	1021883a 	mov	r16,r2
    cfcc:	bf3fffcc 	andi	fp,r23,65535
    cfd0:	b004943a 	slli	r2,r22,16
    cfd4:	8808d43a 	srli	r4,r17,16
    cfd8:	872d383a 	mul	r22,r16,fp
    cfdc:	1104b03a 	or	r2,r2,r4
    cfe0:	1580042e 	bgeu	r2,r22,cff4 <__udivdi3+0x388>
    cfe4:	15c5883a 	add	r2,r2,r23
    cfe8:	80ffffc4 	addi	r3,r16,-1
    cfec:	15c0812e 	bgeu	r2,r23,d1f4 <__udivdi3+0x588>
    cff0:	1821883a 	mov	r16,r3
    cff4:	15adc83a 	sub	r22,r2,r22
    cff8:	b009883a 	mov	r4,r22
    cffc:	a00b883a 	mov	r5,r20
    d000:	000d8e00 	call	d8e0 <__umodsi3>
    d004:	a00b883a 	mov	r5,r20
    d008:	b009883a 	mov	r4,r22
    d00c:	d8800015 	stw	r2,0(sp)
    d010:	000d8d80 	call	d8d8 <__udivsi3>
    d014:	d8c00017 	ldw	r3,0(sp)
    d018:	170b383a 	mul	r5,r2,fp
    d01c:	8c7fffcc 	andi	r17,r17,65535
    d020:	1806943a 	slli	r3,r3,16
    d024:	1c46b03a 	or	r3,r3,r17
    d028:	1940042e 	bgeu	r3,r5,d03c <__udivdi3+0x3d0>
    d02c:	1dc7883a 	add	r3,r3,r23
    d030:	113fffc4 	addi	r4,r2,-1
    d034:	1dc06b2e 	bgeu	r3,r23,d1e4 <__udivdi3+0x578>
    d038:	2005883a 	mov	r2,r4
    d03c:	8020943a 	slli	r16,r16,16
    d040:	a9ffffcc 	andi	r7,r21,65535
    d044:	a82ad43a 	srli	r21,r21,16
    d048:	1404b03a 	or	r2,r2,r16
    d04c:	113fffcc 	andi	r4,r2,65535
    d050:	100cd43a 	srli	r6,r2,16
    d054:	21d3383a 	mul	r9,r4,r7
    d058:	2549383a 	mul	r4,r4,r21
    d05c:	31cf383a 	mul	r7,r6,r7
    d060:	4810d43a 	srli	r8,r9,16
    d064:	1947c83a 	sub	r3,r3,r5
    d068:	3909883a 	add	r4,r7,r4
    d06c:	2209883a 	add	r4,r4,r8
    d070:	354d383a 	mul	r6,r6,r21
    d074:	21c0022e 	bgeu	r4,r7,d080 <__udivdi3+0x414>
    d078:	01400074 	movhi	r5,1
    d07c:	314d883a 	add	r6,r6,r5
    d080:	202ad43a 	srli	r21,r4,16
    d084:	354d883a 	add	r6,r6,r21
    d088:	19803f36 	bltu	r3,r6,d188 <__udivdi3+0x51c>
    d08c:	19803926 	beq	r3,r6,d174 <__udivdi3+0x508>
    d090:	0007883a 	mov	r3,zero
    d094:	003fa006 	br	cf18 <__alt_mem_Flash_flash_data+0xf400cf18>
    d098:	90e4983a 	sll	r18,r18,r3
    d09c:	80aad83a 	srl	r21,r16,r2
    d0a0:	80e0983a 	sll	r16,r16,r3
    d0a4:	9028d43a 	srli	r20,r18,16
    d0a8:	9884d83a 	srl	r2,r19,r2
    d0ac:	a809883a 	mov	r4,r21
    d0b0:	a00b883a 	mov	r5,r20
    d0b4:	80acb03a 	or	r22,r16,r2
    d0b8:	98e2983a 	sll	r17,r19,r3
    d0bc:	000d8e00 	call	d8e0 <__umodsi3>
    d0c0:	a809883a 	mov	r4,r21
    d0c4:	a00b883a 	mov	r5,r20
    d0c8:	1021883a 	mov	r16,r2
    d0cc:	000d8d80 	call	d8d8 <__udivsi3>
    d0d0:	957fffcc 	andi	r21,r18,65535
    d0d4:	8020943a 	slli	r16,r16,16
    d0d8:	b00ad43a 	srli	r5,r22,16
    d0dc:	1567383a 	mul	r19,r2,r21
    d0e0:	102f883a 	mov	r23,r2
    d0e4:	8148b03a 	or	r4,r16,r5
    d0e8:	24c0062e 	bgeu	r4,r19,d104 <__udivdi3+0x498>
    d0ec:	2489883a 	add	r4,r4,r18
    d0f0:	10bfffc4 	addi	r2,r2,-1
    d0f4:	24804536 	bltu	r4,r18,d20c <__udivdi3+0x5a0>
    d0f8:	24c0442e 	bgeu	r4,r19,d20c <__udivdi3+0x5a0>
    d0fc:	bdffff84 	addi	r23,r23,-2
    d100:	2489883a 	add	r4,r4,r18
    d104:	24e7c83a 	sub	r19,r4,r19
    d108:	9809883a 	mov	r4,r19
    d10c:	a00b883a 	mov	r5,r20
    d110:	000d8e00 	call	d8e0 <__umodsi3>
    d114:	1021883a 	mov	r16,r2
    d118:	9809883a 	mov	r4,r19
    d11c:	a00b883a 	mov	r5,r20
    d120:	000d8d80 	call	d8d8 <__udivsi3>
    d124:	8020943a 	slli	r16,r16,16
    d128:	1007883a 	mov	r3,r2
    d12c:	1545383a 	mul	r2,r2,r21
    d130:	b13fffcc 	andi	r4,r22,65535
    d134:	8108b03a 	or	r4,r16,r4
    d138:	2080062e 	bgeu	r4,r2,d154 <__udivdi3+0x4e8>
    d13c:	2489883a 	add	r4,r4,r18
    d140:	197fffc4 	addi	r5,r3,-1
    d144:	24802f36 	bltu	r4,r18,d204 <__udivdi3+0x598>
    d148:	20802e2e 	bgeu	r4,r2,d204 <__udivdi3+0x598>
    d14c:	18ffff84 	addi	r3,r3,-2
    d150:	2489883a 	add	r4,r4,r18
    d154:	b82e943a 	slli	r23,r23,16
    d158:	20a1c83a 	sub	r16,r4,r2
    d15c:	1dc6b03a 	or	r3,r3,r23
    d160:	003f4006 	br	ce64 <__alt_mem_Flash_flash_data+0xf400ce64>
    d164:	2005883a 	mov	r2,r4
    d168:	003f6606 	br	cf04 <__alt_mem_Flash_flash_data+0xf400cf04>
    d16c:	1805883a 	mov	r2,r3
    d170:	003f0a06 	br	cd9c <__alt_mem_Flash_flash_data+0xf400cd9c>
    d174:	2006943a 	slli	r3,r4,16
    d178:	9c88983a 	sll	r4,r19,r18
    d17c:	4a7fffcc 	andi	r9,r9,65535
    d180:	1a47883a 	add	r3,r3,r9
    d184:	20ffc22e 	bgeu	r4,r3,d090 <__alt_mem_Flash_flash_data+0xf400d090>
    d188:	10bfffc4 	addi	r2,r2,-1
    d18c:	003fc006 	br	d090 <__alt_mem_Flash_flash_data+0xf400d090>
    d190:	00c00404 	movi	r3,16
    d194:	180b883a 	mov	r5,r3
    d198:	003f0c06 	br	cdcc <__alt_mem_Flash_flash_data+0xf400cdcc>
    d19c:	0007883a 	mov	r3,zero
    d1a0:	000b883a 	mov	r5,zero
    d1a4:	003f0906 	br	cdcc <__alt_mem_Flash_flash_data+0xf400cdcc>
    d1a8:	00800404 	movi	r2,16
    d1ac:	1007883a 	mov	r3,r2
    d1b0:	003ec606 	br	cccc <__alt_mem_Flash_flash_data+0xf400cccc>
    d1b4:	00800404 	movi	r2,16
    d1b8:	1007883a 	mov	r3,r2
    d1bc:	003f1c06 	br	ce30 <__alt_mem_Flash_flash_data+0xf400ce30>
    d1c0:	0005883a 	mov	r2,zero
    d1c4:	0007883a 	mov	r3,zero
    d1c8:	003f1906 	br	ce30 <__alt_mem_Flash_flash_data+0xf400ce30>
    d1cc:	0005883a 	mov	r2,zero
    d1d0:	0007883a 	mov	r3,zero
    d1d4:	003ebd06 	br	cccc <__alt_mem_Flash_flash_data+0xf400cccc>
    d1d8:	0007883a 	mov	r3,zero
    d1dc:	00800044 	movi	r2,1
    d1e0:	003f4d06 	br	cf18 <__alt_mem_Flash_flash_data+0xf400cf18>
    d1e4:	197f942e 	bgeu	r3,r5,d038 <__alt_mem_Flash_flash_data+0xf400d038>
    d1e8:	10bfff84 	addi	r2,r2,-2
    d1ec:	1dc7883a 	add	r3,r3,r23
    d1f0:	003f9206 	br	d03c <__alt_mem_Flash_flash_data+0xf400d03c>
    d1f4:	15bf7e2e 	bgeu	r2,r22,cff0 <__alt_mem_Flash_flash_data+0xf400cff0>
    d1f8:	843fff84 	addi	r16,r16,-2
    d1fc:	15c5883a 	add	r2,r2,r23
    d200:	003f7c06 	br	cff4 <__alt_mem_Flash_flash_data+0xf400cff4>
    d204:	2807883a 	mov	r3,r5
    d208:	003fd206 	br	d154 <__alt_mem_Flash_flash_data+0xf400d154>
    d20c:	102f883a 	mov	r23,r2
    d210:	003fbc06 	br	d104 <__alt_mem_Flash_flash_data+0xf400d104>
    d214:	843fff84 	addi	r16,r16,-2
    d218:	2489883a 	add	r4,r4,r18
    d21c:	003f2506 	br	ceb4 <__alt_mem_Flash_flash_data+0xf400ceb4>
    d220:	843fff84 	addi	r16,r16,-2
    d224:	1485883a 	add	r2,r2,r18
    d228:	003eca06 	br	cd54 <__alt_mem_Flash_flash_data+0xf400cd54>

0000d22c <__umoddi3>:
    d22c:	defff404 	addi	sp,sp,-48
    d230:	ddc00915 	stw	r23,36(sp)
    d234:	dc400315 	stw	r17,12(sp)
    d238:	dc000215 	stw	r16,8(sp)
    d23c:	dfc00b15 	stw	ra,44(sp)
    d240:	df000a15 	stw	fp,40(sp)
    d244:	dd800815 	stw	r22,32(sp)
    d248:	dd400715 	stw	r21,28(sp)
    d24c:	dd000615 	stw	r20,24(sp)
    d250:	dcc00515 	stw	r19,20(sp)
    d254:	dc800415 	stw	r18,16(sp)
    d258:	2021883a 	mov	r16,r4
    d25c:	2823883a 	mov	r17,r5
    d260:	282f883a 	mov	r23,r5
    d264:	3800381e 	bne	r7,zero,d348 <__umoddi3+0x11c>
    d268:	3027883a 	mov	r19,r6
    d26c:	2029883a 	mov	r20,r4
    d270:	29804e2e 	bgeu	r5,r6,d3ac <__umoddi3+0x180>
    d274:	00bfffd4 	movui	r2,65535
    d278:	11809c36 	bltu	r2,r6,d4ec <__umoddi3+0x2c0>
    d27c:	00803fc4 	movi	r2,255
    d280:	11813b2e 	bgeu	r2,r6,d770 <__umoddi3+0x544>
    d284:	01400204 	movi	r5,8
    d288:	2805883a 	mov	r2,r5
    d28c:	314ad83a 	srl	r5,r6,r5
    d290:	00c000b4 	movhi	r3,2
    d294:	18f21704 	addi	r3,r3,-14244
    d298:	194b883a 	add	r5,r3,r5
    d29c:	29000003 	ldbu	r4,0(r5)
    d2a0:	2089883a 	add	r4,r4,r2
    d2a4:	00800804 	movi	r2,32
    d2a8:	1105c83a 	sub	r2,r2,r4
    d2ac:	1000ec26 	beq	r2,zero,d660 <__umoddi3+0x434>
    d2b0:	88a2983a 	sll	r17,r17,r2
    d2b4:	8108d83a 	srl	r4,r16,r4
    d2b8:	30a6983a 	sll	r19,r6,r2
    d2bc:	80a8983a 	sll	r20,r16,r2
    d2c0:	1025883a 	mov	r18,r2
    d2c4:	892eb03a 	or	r23,r17,r4
    d2c8:	982cd43a 	srli	r22,r19,16
    d2cc:	b809883a 	mov	r4,r23
    d2d0:	9d7fffcc 	andi	r21,r19,65535
    d2d4:	b00b883a 	mov	r5,r22
    d2d8:	000d8e00 	call	d8e0 <__umodsi3>
    d2dc:	b809883a 	mov	r4,r23
    d2e0:	b00b883a 	mov	r5,r22
    d2e4:	1021883a 	mov	r16,r2
    d2e8:	000d8d80 	call	d8d8 <__udivsi3>
    d2ec:	8020943a 	slli	r16,r16,16
    d2f0:	a00cd43a 	srli	r6,r20,16
    d2f4:	1545383a 	mul	r2,r2,r21
    d2f8:	8188b03a 	or	r4,r16,r6
    d2fc:	2080042e 	bgeu	r4,r2,d310 <__umoddi3+0xe4>
    d300:	24c9883a 	add	r4,r4,r19
    d304:	24c00236 	bltu	r4,r19,d310 <__umoddi3+0xe4>
    d308:	2080012e 	bgeu	r4,r2,d310 <__umoddi3+0xe4>
    d30c:	24c9883a 	add	r4,r4,r19
    d310:	20a3c83a 	sub	r17,r4,r2
    d314:	8809883a 	mov	r4,r17
    d318:	b00b883a 	mov	r5,r22
    d31c:	000d8e00 	call	d8e0 <__umodsi3>
    d320:	8809883a 	mov	r4,r17
    d324:	b00b883a 	mov	r5,r22
    d328:	1021883a 	mov	r16,r2
    d32c:	000d8d80 	call	d8d8 <__udivsi3>
    d330:	8006943a 	slli	r3,r16,16
    d334:	1545383a 	mul	r2,r2,r21
    d338:	a13fffcc 	andi	r4,r20,65535
    d33c:	1906b03a 	or	r3,r3,r4
    d340:	1880532e 	bgeu	r3,r2,d490 <__umoddi3+0x264>
    d344:	00004e06 	br	d480 <__umoddi3+0x254>
    d348:	29c05536 	bltu	r5,r7,d4a0 <__umoddi3+0x274>
    d34c:	00bfffd4 	movui	r2,65535
    d350:	11c0612e 	bgeu	r2,r7,d4d8 <__umoddi3+0x2ac>
    d354:	00804034 	movhi	r2,256
    d358:	10bfffc4 	addi	r2,r2,-1
    d35c:	11c0f82e 	bgeu	r2,r7,d740 <__umoddi3+0x514>
    d360:	01400604 	movi	r5,24
    d364:	282b883a 	mov	r21,r5
    d368:	394ad83a 	srl	r5,r7,r5
    d36c:	00c000b4 	movhi	r3,2
    d370:	18f21704 	addi	r3,r3,-14244
    d374:	194b883a 	add	r5,r3,r5
    d378:	28800003 	ldbu	r2,0(r5)
    d37c:	00c00804 	movi	r3,32
    d380:	156b883a 	add	r21,r2,r21
    d384:	1d69c83a 	sub	r20,r3,r21
    d388:	a000631e 	bne	r20,zero,d518 <__umoddi3+0x2ec>
    d38c:	3c400136 	bltu	r7,r17,d394 <__umoddi3+0x168>
    d390:	81810436 	bltu	r16,r6,d7a4 <__umoddi3+0x578>
    d394:	8185c83a 	sub	r2,r16,r6
    d398:	89e3c83a 	sub	r17,r17,r7
    d39c:	8087803a 	cmpltu	r3,r16,r2
    d3a0:	88efc83a 	sub	r23,r17,r3
    d3a4:	b807883a 	mov	r3,r23
    d3a8:	00003f06 	br	d4a8 <__umoddi3+0x27c>
    d3ac:	3000041e 	bne	r6,zero,d3c0 <__umoddi3+0x194>
    d3b0:	01000044 	movi	r4,1
    d3b4:	000b883a 	mov	r5,zero
    d3b8:	000d8d80 	call	d8d8 <__udivsi3>
    d3bc:	1027883a 	mov	r19,r2
    d3c0:	00bfffd4 	movui	r2,65535
    d3c4:	14c04f2e 	bgeu	r2,r19,d504 <__umoddi3+0x2d8>
    d3c8:	00804034 	movhi	r2,256
    d3cc:	10bfffc4 	addi	r2,r2,-1
    d3d0:	14c0e42e 	bgeu	r2,r19,d764 <__umoddi3+0x538>
    d3d4:	00800604 	movi	r2,24
    d3d8:	1007883a 	mov	r3,r2
    d3dc:	9884d83a 	srl	r2,r19,r2
    d3e0:	010000b4 	movhi	r4,2
    d3e4:	21321704 	addi	r4,r4,-14244
    d3e8:	2085883a 	add	r2,r4,r2
    d3ec:	11000003 	ldbu	r4,0(r2)
    d3f0:	00800804 	movi	r2,32
    d3f4:	20c7883a 	add	r3,r4,r3
    d3f8:	10c5c83a 	sub	r2,r2,r3
    d3fc:	10009a1e 	bne	r2,zero,d668 <__umoddi3+0x43c>
    d400:	982cd43a 	srli	r22,r19,16
    d404:	8ce3c83a 	sub	r17,r17,r19
    d408:	9c3fffcc 	andi	r16,r19,65535
    d40c:	0025883a 	mov	r18,zero
    d410:	8809883a 	mov	r4,r17
    d414:	b00b883a 	mov	r5,r22
    d418:	000d8e00 	call	d8e0 <__umodsi3>
    d41c:	8809883a 	mov	r4,r17
    d420:	b00b883a 	mov	r5,r22
    d424:	102b883a 	mov	r21,r2
    d428:	000d8d80 	call	d8d8 <__udivsi3>
    d42c:	a806943a 	slli	r3,r21,16
    d430:	a008d43a 	srli	r4,r20,16
    d434:	1405383a 	mul	r2,r2,r16
    d438:	190cb03a 	or	r6,r3,r4
    d43c:	3080032e 	bgeu	r6,r2,d44c <__umoddi3+0x220>
    d440:	34cd883a 	add	r6,r6,r19
    d444:	34c00136 	bltu	r6,r19,d44c <__umoddi3+0x220>
    d448:	3080d436 	bltu	r6,r2,d79c <__umoddi3+0x570>
    d44c:	30abc83a 	sub	r21,r6,r2
    d450:	a809883a 	mov	r4,r21
    d454:	b00b883a 	mov	r5,r22
    d458:	000d8e00 	call	d8e0 <__umodsi3>
    d45c:	1023883a 	mov	r17,r2
    d460:	a809883a 	mov	r4,r21
    d464:	b00b883a 	mov	r5,r22
    d468:	000d8d80 	call	d8d8 <__udivsi3>
    d46c:	8822943a 	slli	r17,r17,16
    d470:	1405383a 	mul	r2,r2,r16
    d474:	a13fffcc 	andi	r4,r20,65535
    d478:	8906b03a 	or	r3,r17,r4
    d47c:	1880042e 	bgeu	r3,r2,d490 <__umoddi3+0x264>
    d480:	1cc7883a 	add	r3,r3,r19
    d484:	1cc00236 	bltu	r3,r19,d490 <__umoddi3+0x264>
    d488:	1880012e 	bgeu	r3,r2,d490 <__umoddi3+0x264>
    d48c:	1cc7883a 	add	r3,r3,r19
    d490:	1887c83a 	sub	r3,r3,r2
    d494:	1c84d83a 	srl	r2,r3,r18
    d498:	0007883a 	mov	r3,zero
    d49c:	00000206 	br	d4a8 <__umoddi3+0x27c>
    d4a0:	2005883a 	mov	r2,r4
    d4a4:	2807883a 	mov	r3,r5
    d4a8:	dfc00b17 	ldw	ra,44(sp)
    d4ac:	df000a17 	ldw	fp,40(sp)
    d4b0:	ddc00917 	ldw	r23,36(sp)
    d4b4:	dd800817 	ldw	r22,32(sp)
    d4b8:	dd400717 	ldw	r21,28(sp)
    d4bc:	dd000617 	ldw	r20,24(sp)
    d4c0:	dcc00517 	ldw	r19,20(sp)
    d4c4:	dc800417 	ldw	r18,16(sp)
    d4c8:	dc400317 	ldw	r17,12(sp)
    d4cc:	dc000217 	ldw	r16,8(sp)
    d4d0:	dec00c04 	addi	sp,sp,48
    d4d4:	f800283a 	ret
    d4d8:	00803fc4 	movi	r2,255
    d4dc:	11c0952e 	bgeu	r2,r7,d734 <__umoddi3+0x508>
    d4e0:	01400204 	movi	r5,8
    d4e4:	282b883a 	mov	r21,r5
    d4e8:	003f9f06 	br	d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d4ec:	00804034 	movhi	r2,256
    d4f0:	10bfffc4 	addi	r2,r2,-1
    d4f4:	1180952e 	bgeu	r2,r6,d74c <__umoddi3+0x520>
    d4f8:	01400604 	movi	r5,24
    d4fc:	2805883a 	mov	r2,r5
    d500:	003f6206 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d504:	00803fc4 	movi	r2,255
    d508:	14c0932e 	bgeu	r2,r19,d758 <__umoddi3+0x52c>
    d50c:	00800204 	movi	r2,8
    d510:	1007883a 	mov	r3,r2
    d514:	003fb106 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>
    d518:	3548d83a 	srl	r4,r6,r21
    d51c:	3d0e983a 	sll	r7,r7,r20
    d520:	8d10983a 	sll	r8,r17,r20
    d524:	8d6cd83a 	srl	r22,r17,r21
    d528:	3922b03a 	or	r17,r7,r4
    d52c:	882ed43a 	srli	r23,r17,16
    d530:	8564d83a 	srl	r18,r16,r21
    d534:	b009883a 	mov	r4,r22
    d538:	b80b883a 	mov	r5,r23
    d53c:	44a4b03a 	or	r18,r8,r18
    d540:	3526983a 	sll	r19,r6,r20
    d544:	000d8e00 	call	d8e0 <__umodsi3>
    d548:	b009883a 	mov	r4,r22
    d54c:	b80b883a 	mov	r5,r23
    d550:	1039883a 	mov	fp,r2
    d554:	000d8d80 	call	d8d8 <__udivsi3>
    d558:	102d883a 	mov	r22,r2
    d55c:	8a3fffcc 	andi	r8,r17,65535
    d560:	e004943a 	slli	r2,fp,16
    d564:	900cd43a 	srli	r6,r18,16
    d568:	b239383a 	mul	fp,r22,r8
    d56c:	8520983a 	sll	r16,r16,r20
    d570:	118ab03a 	or	r5,r2,r6
    d574:	2f00042e 	bgeu	r5,fp,d588 <__umoddi3+0x35c>
    d578:	2c4b883a 	add	r5,r5,r17
    d57c:	b0bfffc4 	addi	r2,r22,-1
    d580:	2c40822e 	bgeu	r5,r17,d78c <__umoddi3+0x560>
    d584:	102d883a 	mov	r22,r2
    d588:	2f39c83a 	sub	fp,r5,fp
    d58c:	e009883a 	mov	r4,fp
    d590:	b80b883a 	mov	r5,r23
    d594:	da000115 	stw	r8,4(sp)
    d598:	000d8e00 	call	d8e0 <__umodsi3>
    d59c:	e009883a 	mov	r4,fp
    d5a0:	b80b883a 	mov	r5,r23
    d5a4:	d8800015 	stw	r2,0(sp)
    d5a8:	000d8d80 	call	d8d8 <__udivsi3>
    d5ac:	d9800017 	ldw	r6,0(sp)
    d5b0:	da000117 	ldw	r8,4(sp)
    d5b4:	94bfffcc 	andi	r18,r18,65535
    d5b8:	300c943a 	slli	r6,r6,16
    d5bc:	1209383a 	mul	r4,r2,r8
    d5c0:	3490b03a 	or	r8,r6,r18
    d5c4:	4100042e 	bgeu	r8,r4,d5d8 <__umoddi3+0x3ac>
    d5c8:	4451883a 	add	r8,r8,r17
    d5cc:	10ffffc4 	addi	r3,r2,-1
    d5d0:	44406a2e 	bgeu	r8,r17,d77c <__umoddi3+0x550>
    d5d4:	1805883a 	mov	r2,r3
    d5d8:	b012943a 	slli	r9,r22,16
    d5dc:	9abfffcc 	andi	r10,r19,65535
    d5e0:	980ed43a 	srli	r7,r19,16
    d5e4:	124ab03a 	or	r5,r2,r9
    d5e8:	2a7fffcc 	andi	r9,r5,65535
    d5ec:	280ad43a 	srli	r5,r5,16
    d5f0:	4a8d383a 	mul	r6,r9,r10
    d5f4:	49d3383a 	mul	r9,r9,r7
    d5f8:	2a95383a 	mul	r10,r5,r10
    d5fc:	3004d43a 	srli	r2,r6,16
    d600:	4111c83a 	sub	r8,r8,r4
    d604:	5253883a 	add	r9,r10,r9
    d608:	4893883a 	add	r9,r9,r2
    d60c:	29cb383a 	mul	r5,r5,r7
    d610:	4a80022e 	bgeu	r9,r10,d61c <__umoddi3+0x3f0>
    d614:	00800074 	movhi	r2,1
    d618:	288b883a 	add	r5,r5,r2
    d61c:	4808d43a 	srli	r4,r9,16
    d620:	4812943a 	slli	r9,r9,16
    d624:	31bfffcc 	andi	r6,r6,65535
    d628:	290b883a 	add	r5,r5,r4
    d62c:	498d883a 	add	r6,r9,r6
    d630:	41403a36 	bltu	r8,r5,d71c <__umoddi3+0x4f0>
    d634:	41405d26 	beq	r8,r5,d7ac <__umoddi3+0x580>
    d638:	4149c83a 	sub	r4,r8,r5
    d63c:	300f883a 	mov	r7,r6
    d640:	81cfc83a 	sub	r7,r16,r7
    d644:	81c7803a 	cmpltu	r3,r16,r7
    d648:	20c7c83a 	sub	r3,r4,r3
    d64c:	1d44983a 	sll	r2,r3,r21
    d650:	3d0ed83a 	srl	r7,r7,r20
    d654:	1d06d83a 	srl	r3,r3,r20
    d658:	11c4b03a 	or	r2,r2,r7
    d65c:	003f9206 	br	d4a8 <__alt_mem_Flash_flash_data+0xf400d4a8>
    d660:	0025883a 	mov	r18,zero
    d664:	003f1806 	br	d2c8 <__alt_mem_Flash_flash_data+0xf400d2c8>
    d668:	98a6983a 	sll	r19,r19,r2
    d66c:	88e8d83a 	srl	r20,r17,r3
    d670:	80c6d83a 	srl	r3,r16,r3
    d674:	982cd43a 	srli	r22,r19,16
    d678:	88a2983a 	sll	r17,r17,r2
    d67c:	a009883a 	mov	r4,r20
    d680:	b00b883a 	mov	r5,r22
    d684:	88eab03a 	or	r21,r17,r3
    d688:	1025883a 	mov	r18,r2
    d68c:	000d8e00 	call	d8e0 <__umodsi3>
    d690:	a009883a 	mov	r4,r20
    d694:	b00b883a 	mov	r5,r22
    d698:	1023883a 	mov	r17,r2
    d69c:	000d8d80 	call	d8d8 <__udivsi3>
    d6a0:	9f3fffcc 	andi	fp,r19,65535
    d6a4:	8822943a 	slli	r17,r17,16
    d6a8:	a80ad43a 	srli	r5,r21,16
    d6ac:	1705383a 	mul	r2,r2,fp
    d6b0:	84a8983a 	sll	r20,r16,r18
    d6b4:	8948b03a 	or	r4,r17,r5
    d6b8:	2080042e 	bgeu	r4,r2,d6cc <__umoddi3+0x4a0>
    d6bc:	24c9883a 	add	r4,r4,r19
    d6c0:	24c00236 	bltu	r4,r19,d6cc <__umoddi3+0x4a0>
    d6c4:	2080012e 	bgeu	r4,r2,d6cc <__umoddi3+0x4a0>
    d6c8:	24c9883a 	add	r4,r4,r19
    d6cc:	20afc83a 	sub	r23,r4,r2
    d6d0:	b809883a 	mov	r4,r23
    d6d4:	b00b883a 	mov	r5,r22
    d6d8:	000d8e00 	call	d8e0 <__umodsi3>
    d6dc:	1023883a 	mov	r17,r2
    d6e0:	b809883a 	mov	r4,r23
    d6e4:	b00b883a 	mov	r5,r22
    d6e8:	000d8d80 	call	d8d8 <__udivsi3>
    d6ec:	8822943a 	slli	r17,r17,16
    d6f0:	1705383a 	mul	r2,r2,fp
    d6f4:	a93fffcc 	andi	r4,r21,65535
    d6f8:	8908b03a 	or	r4,r17,r4
    d6fc:	2080042e 	bgeu	r4,r2,d710 <__umoddi3+0x4e4>
    d700:	24c9883a 	add	r4,r4,r19
    d704:	24c00236 	bltu	r4,r19,d710 <__umoddi3+0x4e4>
    d708:	2080012e 	bgeu	r4,r2,d710 <__umoddi3+0x4e4>
    d70c:	24c9883a 	add	r4,r4,r19
    d710:	20a3c83a 	sub	r17,r4,r2
    d714:	e021883a 	mov	r16,fp
    d718:	003f3d06 	br	d410 <__alt_mem_Flash_flash_data+0xf400d410>
    d71c:	34cfc83a 	sub	r7,r6,r19
    d720:	2c4bc83a 	sub	r5,r5,r17
    d724:	31cd803a 	cmpltu	r6,r6,r7
    d728:	298dc83a 	sub	r6,r5,r6
    d72c:	4189c83a 	sub	r4,r8,r6
    d730:	003fc306 	br	d640 <__alt_mem_Flash_flash_data+0xf400d640>
    d734:	000b883a 	mov	r5,zero
    d738:	002b883a 	mov	r21,zero
    d73c:	003f0a06 	br	d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d740:	01400404 	movi	r5,16
    d744:	282b883a 	mov	r21,r5
    d748:	003f0706 	br	d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d74c:	01400404 	movi	r5,16
    d750:	2805883a 	mov	r2,r5
    d754:	003ecd06 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d758:	0005883a 	mov	r2,zero
    d75c:	0007883a 	mov	r3,zero
    d760:	003f1e06 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>
    d764:	00800404 	movi	r2,16
    d768:	1007883a 	mov	r3,r2
    d76c:	003f1b06 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>
    d770:	000b883a 	mov	r5,zero
    d774:	0005883a 	mov	r2,zero
    d778:	003ec406 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d77c:	413f952e 	bgeu	r8,r4,d5d4 <__alt_mem_Flash_flash_data+0xf400d5d4>
    d780:	10bfff84 	addi	r2,r2,-2
    d784:	4451883a 	add	r8,r8,r17
    d788:	003f9306 	br	d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    d78c:	2f3f7d2e 	bgeu	r5,fp,d584 <__alt_mem_Flash_flash_data+0xf400d584>
    d790:	b5bfff84 	addi	r22,r22,-2
    d794:	2c4b883a 	add	r5,r5,r17
    d798:	003f7b06 	br	d588 <__alt_mem_Flash_flash_data+0xf400d588>
    d79c:	34cd883a 	add	r6,r6,r19
    d7a0:	003f2a06 	br	d44c <__alt_mem_Flash_flash_data+0xf400d44c>
    d7a4:	8005883a 	mov	r2,r16
    d7a8:	003efe06 	br	d3a4 <__alt_mem_Flash_flash_data+0xf400d3a4>
    d7ac:	81bfdb36 	bltu	r16,r6,d71c <__alt_mem_Flash_flash_data+0xf400d71c>
    d7b0:	300f883a 	mov	r7,r6
    d7b4:	0009883a 	mov	r4,zero
    d7b8:	003fa106 	br	d640 <__alt_mem_Flash_flash_data+0xf400d640>

0000d7bc <udivmodsi4>:
    d7bc:	2900182e 	bgeu	r5,r4,d820 <udivmodsi4+0x64>
    d7c0:	28001716 	blt	r5,zero,d820 <udivmodsi4+0x64>
    d7c4:	00800804 	movi	r2,32
    d7c8:	00c00044 	movi	r3,1
    d7cc:	00000206 	br	d7d8 <udivmodsi4+0x1c>
    d7d0:	10001126 	beq	r2,zero,d818 <udivmodsi4+0x5c>
    d7d4:	28000516 	blt	r5,zero,d7ec <udivmodsi4+0x30>
    d7d8:	294b883a 	add	r5,r5,r5
    d7dc:	10bfffc4 	addi	r2,r2,-1
    d7e0:	18c7883a 	add	r3,r3,r3
    d7e4:	293ffa36 	bltu	r5,r4,d7d0 <__alt_mem_Flash_flash_data+0xf400d7d0>
    d7e8:	18000b26 	beq	r3,zero,d818 <udivmodsi4+0x5c>
    d7ec:	0005883a 	mov	r2,zero
    d7f0:	21400236 	bltu	r4,r5,d7fc <udivmodsi4+0x40>
    d7f4:	2149c83a 	sub	r4,r4,r5
    d7f8:	10c4b03a 	or	r2,r2,r3
    d7fc:	1806d07a 	srli	r3,r3,1
    d800:	280ad07a 	srli	r5,r5,1
    d804:	183ffa1e 	bne	r3,zero,d7f0 <__alt_mem_Flash_flash_data+0xf400d7f0>
    d808:	3000011e 	bne	r6,zero,d810 <udivmodsi4+0x54>
    d80c:	f800283a 	ret
    d810:	2005883a 	mov	r2,r4
    d814:	f800283a 	ret
    d818:	0005883a 	mov	r2,zero
    d81c:	003ffa06 	br	d808 <__alt_mem_Flash_flash_data+0xf400d808>
    d820:	00c00044 	movi	r3,1
    d824:	003ff106 	br	d7ec <__alt_mem_Flash_flash_data+0xf400d7ec>

0000d828 <__divsi3>:
    d828:	defffe04 	addi	sp,sp,-8
    d82c:	dfc00115 	stw	ra,4(sp)
    d830:	dc000015 	stw	r16,0(sp)
    d834:	20000b16 	blt	r4,zero,d864 <__divsi3+0x3c>
    d838:	0021883a 	mov	r16,zero
    d83c:	28000c16 	blt	r5,zero,d870 <__divsi3+0x48>
    d840:	000d883a 	mov	r6,zero
    d844:	000d7bc0 	call	d7bc <udivmodsi4>
    d848:	0407c83a 	sub	r3,zero,r16
    d84c:	1884f03a 	xor	r2,r3,r2
    d850:	1405883a 	add	r2,r2,r16
    d854:	dfc00117 	ldw	ra,4(sp)
    d858:	dc000017 	ldw	r16,0(sp)
    d85c:	dec00204 	addi	sp,sp,8
    d860:	f800283a 	ret
    d864:	0109c83a 	sub	r4,zero,r4
    d868:	04000044 	movi	r16,1
    d86c:	283ff40e 	bge	r5,zero,d840 <__alt_mem_Flash_flash_data+0xf400d840>
    d870:	014bc83a 	sub	r5,zero,r5
    d874:	8400005c 	xori	r16,r16,1
    d878:	003ff106 	br	d840 <__alt_mem_Flash_flash_data+0xf400d840>

0000d87c <__modsi3>:
    d87c:	defffd04 	addi	sp,sp,-12
    d880:	dfc00215 	stw	ra,8(sp)
    d884:	dc400115 	stw	r17,4(sp)
    d888:	dc000015 	stw	r16,0(sp)
    d88c:	20000c16 	blt	r4,zero,d8c0 <__modsi3+0x44>
    d890:	0023883a 	mov	r17,zero
    d894:	0021883a 	mov	r16,zero
    d898:	28000d16 	blt	r5,zero,d8d0 <__modsi3+0x54>
    d89c:	01800044 	movi	r6,1
    d8a0:	000d7bc0 	call	d7bc <udivmodsi4>
    d8a4:	1404f03a 	xor	r2,r2,r16
    d8a8:	8885883a 	add	r2,r17,r2
    d8ac:	dfc00217 	ldw	ra,8(sp)
    d8b0:	dc400117 	ldw	r17,4(sp)
    d8b4:	dc000017 	ldw	r16,0(sp)
    d8b8:	dec00304 	addi	sp,sp,12
    d8bc:	f800283a 	ret
    d8c0:	0109c83a 	sub	r4,zero,r4
    d8c4:	04400044 	movi	r17,1
    d8c8:	043fffc4 	movi	r16,-1
    d8cc:	283ff30e 	bge	r5,zero,d89c <__alt_mem_Flash_flash_data+0xf400d89c>
    d8d0:	014bc83a 	sub	r5,zero,r5
    d8d4:	003ff106 	br	d89c <__alt_mem_Flash_flash_data+0xf400d89c>

0000d8d8 <__udivsi3>:
    d8d8:	000d883a 	mov	r6,zero
    d8dc:	000d7bc1 	jmpi	d7bc <udivmodsi4>

0000d8e0 <__umodsi3>:
    d8e0:	01800044 	movi	r6,1
    d8e4:	000d7bc1 	jmpi	d7bc <udivmodsi4>

0000d8e8 <__adddf3>:
    d8e8:	02000434 	movhi	r8,16
    d8ec:	423fffc4 	addi	r8,r8,-1
    d8f0:	defffb04 	addi	sp,sp,-20
    d8f4:	2a12703a 	and	r9,r5,r8
    d8f8:	2806d7fa 	srli	r3,r5,31
    d8fc:	3a10703a 	and	r8,r7,r8
    d900:	3804d53a 	srli	r2,r7,20
    d904:	3014d77a 	srli	r10,r6,29
    d908:	dc000015 	stw	r16,0(sp)
    d90c:	481290fa 	slli	r9,r9,3
    d910:	2820d53a 	srli	r16,r5,20
    d914:	401090fa 	slli	r8,r8,3
    d918:	200ad77a 	srli	r5,r4,29
    d91c:	380ed7fa 	srli	r7,r7,31
    d920:	dc800215 	stw	r18,8(sp)
    d924:	dc400115 	stw	r17,4(sp)
    d928:	dfc00415 	stw	ra,16(sp)
    d92c:	dcc00315 	stw	r19,12(sp)
    d930:	1c803fcc 	andi	r18,r3,255
    d934:	8401ffcc 	andi	r16,r16,2047
    d938:	494ab03a 	or	r5,r9,r5
    d93c:	202290fa 	slli	r17,r4,3
    d940:	1081ffcc 	andi	r2,r2,2047
    d944:	4290b03a 	or	r8,r8,r10
    d948:	300c90fa 	slli	r6,r6,3
    d94c:	91c07026 	beq	r18,r7,db10 <__adddf3+0x228>
    d950:	8087c83a 	sub	r3,r16,r2
    d954:	00c0b30e 	bge	zero,r3,dc24 <__adddf3+0x33c>
    d958:	10002a1e 	bne	r2,zero,da04 <__adddf3+0x11c>
    d95c:	4184b03a 	or	r2,r8,r6
    d960:	1000991e 	bne	r2,zero,dbc8 <__adddf3+0x2e0>
    d964:	888001cc 	andi	r2,r17,7
    d968:	10005b26 	beq	r2,zero,dad8 <__adddf3+0x1f0>
    d96c:	88c003cc 	andi	r3,r17,15
    d970:	00800104 	movi	r2,4
    d974:	18805826 	beq	r3,r2,dad8 <__adddf3+0x1f0>
    d978:	89800104 	addi	r6,r17,4
    d97c:	3463803a 	cmpltu	r17,r6,r17
    d980:	2c4b883a 	add	r5,r5,r17
    d984:	2880202c 	andhi	r2,r5,128
    d988:	9007883a 	mov	r3,r18
    d98c:	3023883a 	mov	r17,r6
    d990:	10005426 	beq	r2,zero,dae4 <__adddf3+0x1fc>
    d994:	84000044 	addi	r16,r16,1
    d998:	0081ffc4 	movi	r2,2047
    d99c:	8080c126 	beq	r16,r2,dca4 <__adddf3+0x3bc>
    d9a0:	013fe034 	movhi	r4,65408
    d9a4:	213fffc4 	addi	r4,r4,-1
    d9a8:	290a703a 	and	r5,r5,r4
    d9ac:	2804977a 	slli	r2,r5,29
    d9b0:	280a927a 	slli	r5,r5,9
    d9b4:	8822d0fa 	srli	r17,r17,3
    d9b8:	8401ffcc 	andi	r16,r16,2047
    d9bc:	2808d33a 	srli	r4,r5,12
    d9c0:	1444b03a 	or	r2,r2,r17
    d9c4:	8401ffcc 	andi	r16,r16,2047
    d9c8:	800a953a 	slli	r5,r16,20
    d9cc:	18c03fcc 	andi	r3,r3,255
    d9d0:	04000434 	movhi	r16,16
    d9d4:	180697fa 	slli	r3,r3,31
    d9d8:	843fffc4 	addi	r16,r16,-1
    d9dc:	2420703a 	and	r16,r4,r16
    d9e0:	8160b03a 	or	r16,r16,r5
    d9e4:	80c6b03a 	or	r3,r16,r3
    d9e8:	dfc00417 	ldw	ra,16(sp)
    d9ec:	dcc00317 	ldw	r19,12(sp)
    d9f0:	dc800217 	ldw	r18,8(sp)
    d9f4:	dc400117 	ldw	r17,4(sp)
    d9f8:	dc000017 	ldw	r16,0(sp)
    d9fc:	dec00504 	addi	sp,sp,20
    da00:	f800283a 	ret
    da04:	0081ffc4 	movi	r2,2047
    da08:	80bfd626 	beq	r16,r2,d964 <__alt_mem_Flash_flash_data+0xf400d964>
    da0c:	42002034 	orhi	r8,r8,128
    da10:	00800e04 	movi	r2,56
    da14:	10c0a616 	blt	r2,r3,dcb0 <__adddf3+0x3c8>
    da18:	008007c4 	movi	r2,31
    da1c:	10c0c916 	blt	r2,r3,dd44 <__adddf3+0x45c>
    da20:	00800804 	movi	r2,32
    da24:	10c5c83a 	sub	r2,r2,r3
    da28:	408e983a 	sll	r7,r8,r2
    da2c:	30c8d83a 	srl	r4,r6,r3
    da30:	3084983a 	sll	r2,r6,r2
    da34:	40c6d83a 	srl	r3,r8,r3
    da38:	390cb03a 	or	r6,r7,r4
    da3c:	1004c03a 	cmpne	r2,r2,zero
    da40:	308cb03a 	or	r6,r6,r2
    da44:	898dc83a 	sub	r6,r17,r6
    da48:	89a3803a 	cmpltu	r17,r17,r6
    da4c:	28cbc83a 	sub	r5,r5,r3
    da50:	2c4bc83a 	sub	r5,r5,r17
    da54:	3023883a 	mov	r17,r6
    da58:	2880202c 	andhi	r2,r5,128
    da5c:	10006d26 	beq	r2,zero,dc14 <__adddf3+0x32c>
    da60:	04c02034 	movhi	r19,128
    da64:	9cffffc4 	addi	r19,r19,-1
    da68:	2ce6703a 	and	r19,r5,r19
    da6c:	98007e26 	beq	r19,zero,dc68 <__adddf3+0x380>
    da70:	9809883a 	mov	r4,r19
    da74:	000fe840 	call	fe84 <__clzsi2>
    da78:	10fffe04 	addi	r3,r2,-8
    da7c:	010007c4 	movi	r4,31
    da80:	20c07f16 	blt	r4,r3,dc80 <__adddf3+0x398>
    da84:	01400a04 	movi	r5,40
    da88:	2885c83a 	sub	r2,r5,r2
    da8c:	888ad83a 	srl	r5,r17,r2
    da90:	98e6983a 	sll	r19,r19,r3
    da94:	88e2983a 	sll	r17,r17,r3
    da98:	2ce6b03a 	or	r19,r5,r19
    da9c:	1c007c16 	blt	r3,r16,dc90 <__adddf3+0x3a8>
    daa0:	1c21c83a 	sub	r16,r3,r16
    daa4:	81400044 	addi	r5,r16,1
    daa8:	00c007c4 	movi	r3,31
    daac:	19409816 	blt	r3,r5,dd10 <__adddf3+0x428>
    dab0:	1c21c83a 	sub	r16,r3,r16
    dab4:	8c08983a 	sll	r4,r17,r16
    dab8:	8946d83a 	srl	r3,r17,r5
    dabc:	9c20983a 	sll	r16,r19,r16
    dac0:	2008c03a 	cmpne	r4,r4,zero
    dac4:	994ad83a 	srl	r5,r19,r5
    dac8:	1c06b03a 	or	r3,r3,r16
    dacc:	1922b03a 	or	r17,r3,r4
    dad0:	0021883a 	mov	r16,zero
    dad4:	003fa306 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dad8:	2880202c 	andhi	r2,r5,128
    dadc:	9007883a 	mov	r3,r18
    dae0:	103fac1e 	bne	r2,zero,d994 <__alt_mem_Flash_flash_data+0xf400d994>
    dae4:	2804977a 	slli	r2,r5,29
    dae8:	8822d0fa 	srli	r17,r17,3
    daec:	0101ffc4 	movi	r4,2047
    daf0:	280ad0fa 	srli	r5,r5,3
    daf4:	1444b03a 	or	r2,r2,r17
    daf8:	81002c26 	beq	r16,r4,dbac <__adddf3+0x2c4>
    dafc:	8120703a 	and	r16,r16,r4
    db00:	01000434 	movhi	r4,16
    db04:	213fffc4 	addi	r4,r4,-1
    db08:	2908703a 	and	r4,r5,r4
    db0c:	003fad06 	br	d9c4 <__alt_mem_Flash_flash_data+0xf400d9c4>
    db10:	8089c83a 	sub	r4,r16,r2
    db14:	01006a0e 	bge	zero,r4,dcc0 <__adddf3+0x3d8>
    db18:	10003326 	beq	r2,zero,dbe8 <__adddf3+0x300>
    db1c:	0081ffc4 	movi	r2,2047
    db20:	80bf9026 	beq	r16,r2,d964 <__alt_mem_Flash_flash_data+0xf400d964>
    db24:	42002034 	orhi	r8,r8,128
    db28:	00800e04 	movi	r2,56
    db2c:	1100b116 	blt	r2,r4,ddf4 <__adddf3+0x50c>
    db30:	008007c4 	movi	r2,31
    db34:	1100e216 	blt	r2,r4,dec0 <__adddf3+0x5d8>
    db38:	00800804 	movi	r2,32
    db3c:	1105c83a 	sub	r2,r2,r4
    db40:	4092983a 	sll	r9,r8,r2
    db44:	310ed83a 	srl	r7,r6,r4
    db48:	3084983a 	sll	r2,r6,r2
    db4c:	4110d83a 	srl	r8,r8,r4
    db50:	49ccb03a 	or	r6,r9,r7
    db54:	1004c03a 	cmpne	r2,r2,zero
    db58:	308cb03a 	or	r6,r6,r2
    db5c:	344d883a 	add	r6,r6,r17
    db60:	3463803a 	cmpltu	r17,r6,r17
    db64:	414b883a 	add	r5,r8,r5
    db68:	2c4b883a 	add	r5,r5,r17
    db6c:	3023883a 	mov	r17,r6
    db70:	2880202c 	andhi	r2,r5,128
    db74:	10002726 	beq	r2,zero,dc14 <__adddf3+0x32c>
    db78:	84000044 	addi	r16,r16,1
    db7c:	0081ffc4 	movi	r2,2047
    db80:	8080ae26 	beq	r16,r2,de3c <__adddf3+0x554>
    db84:	00bfe034 	movhi	r2,65408
    db88:	10bfffc4 	addi	r2,r2,-1
    db8c:	288a703a 	and	r5,r5,r2
    db90:	880cd07a 	srli	r6,r17,1
    db94:	280897fa 	slli	r4,r5,31
    db98:	88c0004c 	andi	r3,r17,1
    db9c:	30e2b03a 	or	r17,r6,r3
    dba0:	280ad07a 	srli	r5,r5,1
    dba4:	8922b03a 	or	r17,r17,r4
    dba8:	003f6e06 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dbac:	1148b03a 	or	r4,r2,r5
    dbb0:	20003c26 	beq	r4,zero,dca4 <__adddf3+0x3bc>
    dbb4:	29000234 	orhi	r4,r5,8
    dbb8:	01400434 	movhi	r5,16
    dbbc:	297fffc4 	addi	r5,r5,-1
    dbc0:	2148703a 	and	r4,r4,r5
    dbc4:	003f7f06 	br	d9c4 <__alt_mem_Flash_flash_data+0xf400d9c4>
    dbc8:	18ffffc4 	addi	r3,r3,-1
    dbcc:	18004d1e 	bne	r3,zero,dd04 <__adddf3+0x41c>
    dbd0:	898dc83a 	sub	r6,r17,r6
    dbd4:	89a3803a 	cmpltu	r17,r17,r6
    dbd8:	2a0bc83a 	sub	r5,r5,r8
    dbdc:	2c4bc83a 	sub	r5,r5,r17
    dbe0:	3023883a 	mov	r17,r6
    dbe4:	003f9c06 	br	da58 <__alt_mem_Flash_flash_data+0xf400da58>
    dbe8:	4184b03a 	or	r2,r8,r6
    dbec:	103f5d26 	beq	r2,zero,d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dbf0:	213fffc4 	addi	r4,r4,-1
    dbf4:	203fd926 	beq	r4,zero,db5c <__alt_mem_Flash_flash_data+0xf400db5c>
    dbf8:	0081ffc4 	movi	r2,2047
    dbfc:	80bfca1e 	bne	r16,r2,db28 <__alt_mem_Flash_flash_data+0xf400db28>
    dc00:	003f5806 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dc04:	10c8b03a 	or	r4,r2,r3
    dc08:	20008b26 	beq	r4,zero,de38 <__adddf3+0x550>
    dc0c:	100b883a 	mov	r5,r2
    dc10:	1823883a 	mov	r17,r3
    dc14:	888001cc 	andi	r2,r17,7
    dc18:	103f541e 	bne	r2,zero,d96c <__alt_mem_Flash_flash_data+0xf400d96c>
    dc1c:	9007883a 	mov	r3,r18
    dc20:	003fb006 	br	dae4 <__alt_mem_Flash_flash_data+0xf400dae4>
    dc24:	1800531e 	bne	r3,zero,dd74 <__adddf3+0x48c>
    dc28:	80800044 	addi	r2,r16,1
    dc2c:	1081ffcc 	andi	r2,r2,2047
    dc30:	00c00044 	movi	r3,1
    dc34:	1880990e 	bge	r3,r2,de9c <__adddf3+0x5b4>
    dc38:	8985c83a 	sub	r2,r17,r6
    dc3c:	8887803a 	cmpltu	r3,r17,r2
    dc40:	2a27c83a 	sub	r19,r5,r8
    dc44:	98e7c83a 	sub	r19,r19,r3
    dc48:	98c0202c 	andhi	r3,r19,128
    dc4c:	18006226 	beq	r3,zero,ddd8 <__adddf3+0x4f0>
    dc50:	3463c83a 	sub	r17,r6,r17
    dc54:	4151c83a 	sub	r8,r8,r5
    dc58:	344d803a 	cmpltu	r6,r6,r17
    dc5c:	41a7c83a 	sub	r19,r8,r6
    dc60:	3825883a 	mov	r18,r7
    dc64:	983f821e 	bne	r19,zero,da70 <__alt_mem_Flash_flash_data+0xf400da70>
    dc68:	8809883a 	mov	r4,r17
    dc6c:	000fe840 	call	fe84 <__clzsi2>
    dc70:	10800804 	addi	r2,r2,32
    dc74:	10fffe04 	addi	r3,r2,-8
    dc78:	010007c4 	movi	r4,31
    dc7c:	20ff810e 	bge	r4,r3,da84 <__alt_mem_Flash_flash_data+0xf400da84>
    dc80:	14fff604 	addi	r19,r2,-40
    dc84:	8ce6983a 	sll	r19,r17,r19
    dc88:	0023883a 	mov	r17,zero
    dc8c:	1c3f840e 	bge	r3,r16,daa0 <__alt_mem_Flash_flash_data+0xf400daa0>
    dc90:	017fe034 	movhi	r5,65408
    dc94:	297fffc4 	addi	r5,r5,-1
    dc98:	80e1c83a 	sub	r16,r16,r3
    dc9c:	994a703a 	and	r5,r19,r5
    dca0:	003f3006 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dca4:	0009883a 	mov	r4,zero
    dca8:	0005883a 	mov	r2,zero
    dcac:	003f4506 	br	d9c4 <__alt_mem_Flash_flash_data+0xf400d9c4>
    dcb0:	418cb03a 	or	r6,r8,r6
    dcb4:	300cc03a 	cmpne	r6,r6,zero
    dcb8:	0007883a 	mov	r3,zero
    dcbc:	003f6106 	br	da44 <__alt_mem_Flash_flash_data+0xf400da44>
    dcc0:	2000921e 	bne	r4,zero,df0c <__adddf3+0x624>
    dcc4:	80800044 	addi	r2,r16,1
    dcc8:	11c1ffcc 	andi	r7,r2,2047
    dccc:	01000044 	movi	r4,1
    dcd0:	21c0610e 	bge	r4,r7,de58 <__adddf3+0x570>
    dcd4:	0101ffc4 	movi	r4,2047
    dcd8:	1100a326 	beq	r2,r4,df68 <__adddf3+0x680>
    dcdc:	344d883a 	add	r6,r6,r17
    dce0:	3463803a 	cmpltu	r17,r6,r17
    dce4:	414b883a 	add	r5,r8,r5
    dce8:	2c4b883a 	add	r5,r5,r17
    dcec:	282297fa 	slli	r17,r5,31
    dcf0:	300cd07a 	srli	r6,r6,1
    dcf4:	280ad07a 	srli	r5,r5,1
    dcf8:	1021883a 	mov	r16,r2
    dcfc:	89a2b03a 	or	r17,r17,r6
    dd00:	003f1806 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dd04:	0081ffc4 	movi	r2,2047
    dd08:	80bf411e 	bne	r16,r2,da10 <__alt_mem_Flash_flash_data+0xf400da10>
    dd0c:	003f1506 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dd10:	80bff844 	addi	r2,r16,-31
    dd14:	00c00804 	movi	r3,32
    dd18:	9884d83a 	srl	r2,r19,r2
    dd1c:	28c04a26 	beq	r5,r3,de48 <__adddf3+0x560>
    dd20:	00c00fc4 	movi	r3,63
    dd24:	1c21c83a 	sub	r16,r3,r16
    dd28:	9c26983a 	sll	r19,r19,r16
    dd2c:	9c62b03a 	or	r17,r19,r17
    dd30:	8822c03a 	cmpne	r17,r17,zero
    dd34:	88a2b03a 	or	r17,r17,r2
    dd38:	000b883a 	mov	r5,zero
    dd3c:	0021883a 	mov	r16,zero
    dd40:	003fb406 	br	dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    dd44:	18bff804 	addi	r2,r3,-32
    dd48:	01000804 	movi	r4,32
    dd4c:	4084d83a 	srl	r2,r8,r2
    dd50:	19003f26 	beq	r3,r4,de50 <__adddf3+0x568>
    dd54:	01001004 	movi	r4,64
    dd58:	20c7c83a 	sub	r3,r4,r3
    dd5c:	40d0983a 	sll	r8,r8,r3
    dd60:	418cb03a 	or	r6,r8,r6
    dd64:	300cc03a 	cmpne	r6,r6,zero
    dd68:	308cb03a 	or	r6,r6,r2
    dd6c:	0007883a 	mov	r3,zero
    dd70:	003f3406 	br	da44 <__alt_mem_Flash_flash_data+0xf400da44>
    dd74:	80002326 	beq	r16,zero,de04 <__adddf3+0x51c>
    dd78:	0101ffc4 	movi	r4,2047
    dd7c:	11005e26 	beq	r2,r4,def8 <__adddf3+0x610>
    dd80:	00c7c83a 	sub	r3,zero,r3
    dd84:	29402034 	orhi	r5,r5,128
    dd88:	01000e04 	movi	r4,56
    dd8c:	20c07216 	blt	r4,r3,df58 <__adddf3+0x670>
    dd90:	010007c4 	movi	r4,31
    dd94:	20c0ce16 	blt	r4,r3,e0d0 <__adddf3+0x7e8>
    dd98:	01000804 	movi	r4,32
    dd9c:	20c9c83a 	sub	r4,r4,r3
    dda0:	2914983a 	sll	r10,r5,r4
    dda4:	88d2d83a 	srl	r9,r17,r3
    dda8:	8908983a 	sll	r4,r17,r4
    ddac:	28c6d83a 	srl	r3,r5,r3
    ddb0:	5262b03a 	or	r17,r10,r9
    ddb4:	2008c03a 	cmpne	r4,r4,zero
    ddb8:	8922b03a 	or	r17,r17,r4
    ddbc:	3463c83a 	sub	r17,r6,r17
    ddc0:	40c7c83a 	sub	r3,r8,r3
    ddc4:	344d803a 	cmpltu	r6,r6,r17
    ddc8:	198bc83a 	sub	r5,r3,r6
    ddcc:	1021883a 	mov	r16,r2
    ddd0:	3825883a 	mov	r18,r7
    ddd4:	003f2006 	br	da58 <__alt_mem_Flash_flash_data+0xf400da58>
    ddd8:	9886b03a 	or	r3,r19,r2
    dddc:	1800141e 	bne	r3,zero,de30 <__adddf3+0x548>
    dde0:	0007883a 	mov	r3,zero
    dde4:	000b883a 	mov	r5,zero
    dde8:	0023883a 	mov	r17,zero
    ddec:	0021883a 	mov	r16,zero
    ddf0:	003f3c06 	br	dae4 <__alt_mem_Flash_flash_data+0xf400dae4>
    ddf4:	418cb03a 	or	r6,r8,r6
    ddf8:	300cc03a 	cmpne	r6,r6,zero
    ddfc:	0011883a 	mov	r8,zero
    de00:	003f5606 	br	db5c <__alt_mem_Flash_flash_data+0xf400db5c>
    de04:	2c48b03a 	or	r4,r5,r17
    de08:	20003b26 	beq	r4,zero,def8 <__adddf3+0x610>
    de0c:	00c6303a 	nor	r3,zero,r3
    de10:	1800371e 	bne	r3,zero,def0 <__adddf3+0x608>
    de14:	3463c83a 	sub	r17,r6,r17
    de18:	414bc83a 	sub	r5,r8,r5
    de1c:	344d803a 	cmpltu	r6,r6,r17
    de20:	298bc83a 	sub	r5,r5,r6
    de24:	1021883a 	mov	r16,r2
    de28:	3825883a 	mov	r18,r7
    de2c:	003f0a06 	br	da58 <__alt_mem_Flash_flash_data+0xf400da58>
    de30:	1023883a 	mov	r17,r2
    de34:	003f0d06 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    de38:	0007883a 	mov	r3,zero
    de3c:	000b883a 	mov	r5,zero
    de40:	0023883a 	mov	r17,zero
    de44:	003f2706 	br	dae4 <__alt_mem_Flash_flash_data+0xf400dae4>
    de48:	0027883a 	mov	r19,zero
    de4c:	003fb706 	br	dd2c <__alt_mem_Flash_flash_data+0xf400dd2c>
    de50:	0011883a 	mov	r8,zero
    de54:	003fc206 	br	dd60 <__alt_mem_Flash_flash_data+0xf400dd60>
    de58:	2c44b03a 	or	r2,r5,r17
    de5c:	8000871e 	bne	r16,zero,e07c <__adddf3+0x794>
    de60:	1000b126 	beq	r2,zero,e128 <__adddf3+0x840>
    de64:	4184b03a 	or	r2,r8,r6
    de68:	103ebe26 	beq	r2,zero,d964 <__alt_mem_Flash_flash_data+0xf400d964>
    de6c:	3445883a 	add	r2,r6,r17
    de70:	1463803a 	cmpltu	r17,r2,r17
    de74:	414b883a 	add	r5,r8,r5
    de78:	2c4b883a 	add	r5,r5,r17
    de7c:	28c0202c 	andhi	r3,r5,128
    de80:	1023883a 	mov	r17,r2
    de84:	183f6326 	beq	r3,zero,dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    de88:	00bfe034 	movhi	r2,65408
    de8c:	10bfffc4 	addi	r2,r2,-1
    de90:	2021883a 	mov	r16,r4
    de94:	288a703a 	and	r5,r5,r2
    de98:	003eb206 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    de9c:	2c44b03a 	or	r2,r5,r17
    dea0:	8000251e 	bne	r16,zero,df38 <__adddf3+0x650>
    dea4:	10004b1e 	bne	r2,zero,dfd4 <__adddf3+0x6ec>
    dea8:	4184b03a 	or	r2,r8,r6
    deac:	103fe226 	beq	r2,zero,de38 <__alt_mem_Flash_flash_data+0xf400de38>
    deb0:	400b883a 	mov	r5,r8
    deb4:	3023883a 	mov	r17,r6
    deb8:	3825883a 	mov	r18,r7
    debc:	003ea906 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dec0:	20bff804 	addi	r2,r4,-32
    dec4:	01c00804 	movi	r7,32
    dec8:	4084d83a 	srl	r2,r8,r2
    decc:	21c07e26 	beq	r4,r7,e0c8 <__adddf3+0x7e0>
    ded0:	01c01004 	movi	r7,64
    ded4:	3909c83a 	sub	r4,r7,r4
    ded8:	4110983a 	sll	r8,r8,r4
    dedc:	418cb03a 	or	r6,r8,r6
    dee0:	300cc03a 	cmpne	r6,r6,zero
    dee4:	308cb03a 	or	r6,r6,r2
    dee8:	0011883a 	mov	r8,zero
    deec:	003f1b06 	br	db5c <__alt_mem_Flash_flash_data+0xf400db5c>
    def0:	0101ffc4 	movi	r4,2047
    def4:	113fa41e 	bne	r2,r4,dd88 <__alt_mem_Flash_flash_data+0xf400dd88>
    def8:	400b883a 	mov	r5,r8
    defc:	3023883a 	mov	r17,r6
    df00:	1021883a 	mov	r16,r2
    df04:	3825883a 	mov	r18,r7
    df08:	003e9606 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    df0c:	80001a1e 	bne	r16,zero,df78 <__adddf3+0x690>
    df10:	2c4eb03a 	or	r7,r5,r17
    df14:	38005526 	beq	r7,zero,e06c <__adddf3+0x784>
    df18:	0108303a 	nor	r4,zero,r4
    df1c:	2000511e 	bne	r4,zero,e064 <__adddf3+0x77c>
    df20:	89a3883a 	add	r17,r17,r6
    df24:	414b883a 	add	r5,r8,r5
    df28:	898d803a 	cmpltu	r6,r17,r6
    df2c:	298b883a 	add	r5,r5,r6
    df30:	1021883a 	mov	r16,r2
    df34:	003f0e06 	br	db70 <__alt_mem_Flash_flash_data+0xf400db70>
    df38:	1000341e 	bne	r2,zero,e00c <__adddf3+0x724>
    df3c:	4184b03a 	or	r2,r8,r6
    df40:	10006f26 	beq	r2,zero,e100 <__adddf3+0x818>
    df44:	400b883a 	mov	r5,r8
    df48:	3023883a 	mov	r17,r6
    df4c:	3825883a 	mov	r18,r7
    df50:	0401ffc4 	movi	r16,2047
    df54:	003e8306 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    df58:	2c62b03a 	or	r17,r5,r17
    df5c:	8822c03a 	cmpne	r17,r17,zero
    df60:	0007883a 	mov	r3,zero
    df64:	003f9506 	br	ddbc <__alt_mem_Flash_flash_data+0xf400ddbc>
    df68:	1021883a 	mov	r16,r2
    df6c:	000b883a 	mov	r5,zero
    df70:	0023883a 	mov	r17,zero
    df74:	003edb06 	br	dae4 <__alt_mem_Flash_flash_data+0xf400dae4>
    df78:	01c1ffc4 	movi	r7,2047
    df7c:	11c03b26 	beq	r2,r7,e06c <__adddf3+0x784>
    df80:	0109c83a 	sub	r4,zero,r4
    df84:	29402034 	orhi	r5,r5,128
    df88:	01c00e04 	movi	r7,56
    df8c:	39006216 	blt	r7,r4,e118 <__adddf3+0x830>
    df90:	01c007c4 	movi	r7,31
    df94:	39006b16 	blt	r7,r4,e144 <__adddf3+0x85c>
    df98:	01c00804 	movi	r7,32
    df9c:	390fc83a 	sub	r7,r7,r4
    dfa0:	29d4983a 	sll	r10,r5,r7
    dfa4:	8912d83a 	srl	r9,r17,r4
    dfa8:	89ce983a 	sll	r7,r17,r7
    dfac:	2908d83a 	srl	r4,r5,r4
    dfb0:	5262b03a 	or	r17,r10,r9
    dfb4:	380ac03a 	cmpne	r5,r7,zero
    dfb8:	8962b03a 	or	r17,r17,r5
    dfbc:	89a3883a 	add	r17,r17,r6
    dfc0:	2211883a 	add	r8,r4,r8
    dfc4:	898d803a 	cmpltu	r6,r17,r6
    dfc8:	418b883a 	add	r5,r8,r6
    dfcc:	1021883a 	mov	r16,r2
    dfd0:	003ee706 	br	db70 <__alt_mem_Flash_flash_data+0xf400db70>
    dfd4:	4184b03a 	or	r2,r8,r6
    dfd8:	103e6226 	beq	r2,zero,d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dfdc:	8987c83a 	sub	r3,r17,r6
    dfe0:	88c9803a 	cmpltu	r4,r17,r3
    dfe4:	2a05c83a 	sub	r2,r5,r8
    dfe8:	1105c83a 	sub	r2,r2,r4
    dfec:	1100202c 	andhi	r4,r2,128
    dff0:	203f0426 	beq	r4,zero,dc04 <__alt_mem_Flash_flash_data+0xf400dc04>
    dff4:	3463c83a 	sub	r17,r6,r17
    dff8:	414bc83a 	sub	r5,r8,r5
    dffc:	344d803a 	cmpltu	r6,r6,r17
    e000:	298bc83a 	sub	r5,r5,r6
    e004:	3825883a 	mov	r18,r7
    e008:	003e5606 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e00c:	4184b03a 	or	r2,r8,r6
    e010:	10002b26 	beq	r2,zero,e0c0 <__adddf3+0x7d8>
    e014:	2804d0fa 	srli	r2,r5,3
    e018:	8822d0fa 	srli	r17,r17,3
    e01c:	280a977a 	slli	r5,r5,29
    e020:	10c0022c 	andhi	r3,r2,8
    e024:	2c62b03a 	or	r17,r5,r17
    e028:	18000826 	beq	r3,zero,e04c <__adddf3+0x764>
    e02c:	4008d0fa 	srli	r4,r8,3
    e030:	20c0022c 	andhi	r3,r4,8
    e034:	1800051e 	bne	r3,zero,e04c <__adddf3+0x764>
    e038:	300cd0fa 	srli	r6,r6,3
    e03c:	4010977a 	slli	r8,r8,29
    e040:	2005883a 	mov	r2,r4
    e044:	3825883a 	mov	r18,r7
    e048:	41a2b03a 	or	r17,r8,r6
    e04c:	880ad77a 	srli	r5,r17,29
    e050:	100490fa 	slli	r2,r2,3
    e054:	882290fa 	slli	r17,r17,3
    e058:	0401ffc4 	movi	r16,2047
    e05c:	288ab03a 	or	r5,r5,r2
    e060:	003e4006 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e064:	01c1ffc4 	movi	r7,2047
    e068:	11ffc71e 	bne	r2,r7,df88 <__alt_mem_Flash_flash_data+0xf400df88>
    e06c:	400b883a 	mov	r5,r8
    e070:	3023883a 	mov	r17,r6
    e074:	1021883a 	mov	r16,r2
    e078:	003e3a06 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e07c:	10002d26 	beq	r2,zero,e134 <__adddf3+0x84c>
    e080:	4184b03a 	or	r2,r8,r6
    e084:	10000e26 	beq	r2,zero,e0c0 <__adddf3+0x7d8>
    e088:	2804d0fa 	srli	r2,r5,3
    e08c:	8822d0fa 	srli	r17,r17,3
    e090:	280a977a 	slli	r5,r5,29
    e094:	10c0022c 	andhi	r3,r2,8
    e098:	2c62b03a 	or	r17,r5,r17
    e09c:	183feb26 	beq	r3,zero,e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e0a0:	4008d0fa 	srli	r4,r8,3
    e0a4:	20c0022c 	andhi	r3,r4,8
    e0a8:	183fe81e 	bne	r3,zero,e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e0ac:	300cd0fa 	srli	r6,r6,3
    e0b0:	4010977a 	slli	r8,r8,29
    e0b4:	2005883a 	mov	r2,r4
    e0b8:	41a2b03a 	or	r17,r8,r6
    e0bc:	003fe306 	br	e04c <__alt_mem_Flash_flash_data+0xf400e04c>
    e0c0:	0401ffc4 	movi	r16,2047
    e0c4:	003e2706 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e0c8:	0011883a 	mov	r8,zero
    e0cc:	003f8306 	br	dedc <__alt_mem_Flash_flash_data+0xf400dedc>
    e0d0:	193ff804 	addi	r4,r3,-32
    e0d4:	02400804 	movi	r9,32
    e0d8:	2908d83a 	srl	r4,r5,r4
    e0dc:	1a402526 	beq	r3,r9,e174 <__adddf3+0x88c>
    e0e0:	02401004 	movi	r9,64
    e0e4:	48c7c83a 	sub	r3,r9,r3
    e0e8:	28ca983a 	sll	r5,r5,r3
    e0ec:	2c62b03a 	or	r17,r5,r17
    e0f0:	8822c03a 	cmpne	r17,r17,zero
    e0f4:	8922b03a 	or	r17,r17,r4
    e0f8:	0007883a 	mov	r3,zero
    e0fc:	003f2f06 	br	ddbc <__alt_mem_Flash_flash_data+0xf400ddbc>
    e100:	01402034 	movhi	r5,128
    e104:	0007883a 	mov	r3,zero
    e108:	297fffc4 	addi	r5,r5,-1
    e10c:	047ffe04 	movi	r17,-8
    e110:	0401ffc4 	movi	r16,2047
    e114:	003e7306 	br	dae4 <__alt_mem_Flash_flash_data+0xf400dae4>
    e118:	2c62b03a 	or	r17,r5,r17
    e11c:	8822c03a 	cmpne	r17,r17,zero
    e120:	0009883a 	mov	r4,zero
    e124:	003fa506 	br	dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    e128:	400b883a 	mov	r5,r8
    e12c:	3023883a 	mov	r17,r6
    e130:	003e0c06 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e134:	400b883a 	mov	r5,r8
    e138:	3023883a 	mov	r17,r6
    e13c:	0401ffc4 	movi	r16,2047
    e140:	003e0806 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    e144:	21fff804 	addi	r7,r4,-32
    e148:	02400804 	movi	r9,32
    e14c:	29ced83a 	srl	r7,r5,r7
    e150:	22400a26 	beq	r4,r9,e17c <__adddf3+0x894>
    e154:	02401004 	movi	r9,64
    e158:	4909c83a 	sub	r4,r9,r4
    e15c:	290a983a 	sll	r5,r5,r4
    e160:	2c62b03a 	or	r17,r5,r17
    e164:	8822c03a 	cmpne	r17,r17,zero
    e168:	89e2b03a 	or	r17,r17,r7
    e16c:	0009883a 	mov	r4,zero
    e170:	003f9206 	br	dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    e174:	000b883a 	mov	r5,zero
    e178:	003fdc06 	br	e0ec <__alt_mem_Flash_flash_data+0xf400e0ec>
    e17c:	000b883a 	mov	r5,zero
    e180:	003ff706 	br	e160 <__alt_mem_Flash_flash_data+0xf400e160>

0000e184 <__divdf3>:
    e184:	defff204 	addi	sp,sp,-56
    e188:	dd000815 	stw	r20,32(sp)
    e18c:	2828d53a 	srli	r20,r5,20
    e190:	dd800a15 	stw	r22,40(sp)
    e194:	282cd7fa 	srli	r22,r5,31
    e198:	dc000415 	stw	r16,16(sp)
    e19c:	04000434 	movhi	r16,16
    e1a0:	df000c15 	stw	fp,48(sp)
    e1a4:	dcc00715 	stw	r19,28(sp)
    e1a8:	dc800615 	stw	r18,24(sp)
    e1ac:	dc400515 	stw	r17,20(sp)
    e1b0:	843fffc4 	addi	r16,r16,-1
    e1b4:	dfc00d15 	stw	ra,52(sp)
    e1b8:	ddc00b15 	stw	r23,44(sp)
    e1bc:	dd400915 	stw	r21,36(sp)
    e1c0:	a501ffcc 	andi	r20,r20,2047
    e1c4:	2025883a 	mov	r18,r4
    e1c8:	2027883a 	mov	r19,r4
    e1cc:	2c22703a 	and	r17,r5,r16
    e1d0:	b7003fcc 	andi	fp,r22,255
    e1d4:	a0005e26 	beq	r20,zero,e350 <__divdf3+0x1cc>
    e1d8:	0081ffc4 	movi	r2,2047
    e1dc:	a0803526 	beq	r20,r2,e2b4 <__divdf3+0x130>
    e1e0:	8c000434 	orhi	r16,r17,16
    e1e4:	2004d77a 	srli	r2,r4,29
    e1e8:	802090fa 	slli	r16,r16,3
    e1ec:	202690fa 	slli	r19,r4,3
    e1f0:	a53f0044 	addi	r20,r20,-1023
    e1f4:	80a2b03a 	or	r17,r16,r2
    e1f8:	0025883a 	mov	r18,zero
    e1fc:	0011883a 	mov	r8,zero
    e200:	380ad53a 	srli	r5,r7,20
    e204:	382ed7fa 	srli	r23,r7,31
    e208:	04000434 	movhi	r16,16
    e20c:	843fffc4 	addi	r16,r16,-1
    e210:	2941ffcc 	andi	r5,r5,2047
    e214:	302b883a 	mov	r21,r6
    e218:	3c20703a 	and	r16,r7,r16
    e21c:	ba403fcc 	andi	r9,r23,255
    e220:	28006726 	beq	r5,zero,e3c0 <__divdf3+0x23c>
    e224:	0081ffc4 	movi	r2,2047
    e228:	28805f26 	beq	r5,r2,e3a8 <__divdf3+0x224>
    e22c:	84000434 	orhi	r16,r16,16
    e230:	3004d77a 	srli	r2,r6,29
    e234:	802090fa 	slli	r16,r16,3
    e238:	302a90fa 	slli	r21,r6,3
    e23c:	297f0044 	addi	r5,r5,-1023
    e240:	80a0b03a 	or	r16,r16,r2
    e244:	000f883a 	mov	r7,zero
    e248:	3c86b03a 	or	r3,r7,r18
    e24c:	180690ba 	slli	r3,r3,2
    e250:	00800074 	movhi	r2,1
    e254:	10b89d04 	addi	r2,r2,-7564
    e258:	1887883a 	add	r3,r3,r2
    e25c:	18c00017 	ldw	r3,0(r3)
    e260:	b5c8f03a 	xor	r4,r22,r23
    e264:	200d883a 	mov	r6,r4
    e268:	24803fcc 	andi	r18,r4,255
    e26c:	a169c83a 	sub	r20,r20,r5
    e270:	1800683a 	jmp	r3
    e274:	0000e4bc 	xorhi	zero,zero,914
    e278:	0000e2ec 	andhi	zero,zero,907
    e27c:	0000e480 	call	e48 <___svfprintf_internal_r+0x130>
    e280:	0000e2d0 	cmplti	zero,zero,907
    e284:	0000e480 	call	e48 <___svfprintf_internal_r+0x130>
    e288:	0000e454 	movui	zero,913
    e28c:	0000e480 	call	e48 <___svfprintf_internal_r+0x130>
    e290:	0000e2d0 	cmplti	zero,zero,907
    e294:	0000e2ec 	andhi	zero,zero,907
    e298:	0000e2ec 	andhi	zero,zero,907
    e29c:	0000e454 	movui	zero,913
    e2a0:	0000e2d0 	cmplti	zero,zero,907
    e2a4:	0000e2e0 	cmpeqi	zero,zero,907
    e2a8:	0000e2e0 	cmpeqi	zero,zero,907
    e2ac:	0000e2e0 	cmpeqi	zero,zero,907
    e2b0:	0000e490 	cmplti	zero,zero,914
    e2b4:	8904b03a 	or	r2,r17,r4
    e2b8:	1000631e 	bne	r2,zero,e448 <__divdf3+0x2c4>
    e2bc:	04800204 	movi	r18,8
    e2c0:	0023883a 	mov	r17,zero
    e2c4:	0027883a 	mov	r19,zero
    e2c8:	02000084 	movi	r8,2
    e2cc:	003fcc06 	br	e200 <__alt_mem_Flash_flash_data+0xf400e200>
    e2d0:	8023883a 	mov	r17,r16
    e2d4:	a827883a 	mov	r19,r21
    e2d8:	4839883a 	mov	fp,r9
    e2dc:	3811883a 	mov	r8,r7
    e2e0:	00800084 	movi	r2,2
    e2e4:	40812a1e 	bne	r8,r2,e790 <__divdf3+0x60c>
    e2e8:	e025883a 	mov	r18,fp
    e2ec:	9180004c 	andi	r6,r18,1
    e2f0:	0101ffc4 	movi	r4,2047
    e2f4:	000b883a 	mov	r5,zero
    e2f8:	0027883a 	mov	r19,zero
    e2fc:	2008953a 	slli	r4,r4,20
    e300:	30c03fcc 	andi	r3,r6,255
    e304:	04000434 	movhi	r16,16
    e308:	180697fa 	slli	r3,r3,31
    e30c:	843fffc4 	addi	r16,r16,-1
    e310:	2c20703a 	and	r16,r5,r16
    e314:	8120b03a 	or	r16,r16,r4
    e318:	80c6b03a 	or	r3,r16,r3
    e31c:	9805883a 	mov	r2,r19
    e320:	dfc00d17 	ldw	ra,52(sp)
    e324:	df000c17 	ldw	fp,48(sp)
    e328:	ddc00b17 	ldw	r23,44(sp)
    e32c:	dd800a17 	ldw	r22,40(sp)
    e330:	dd400917 	ldw	r21,36(sp)
    e334:	dd000817 	ldw	r20,32(sp)
    e338:	dcc00717 	ldw	r19,28(sp)
    e33c:	dc800617 	ldw	r18,24(sp)
    e340:	dc400517 	ldw	r17,20(sp)
    e344:	dc000417 	ldw	r16,16(sp)
    e348:	dec00e04 	addi	sp,sp,56
    e34c:	f800283a 	ret
    e350:	8904b03a 	or	r2,r17,r4
    e354:	10003726 	beq	r2,zero,e434 <__divdf3+0x2b0>
    e358:	88011c26 	beq	r17,zero,e7cc <__divdf3+0x648>
    e35c:	8809883a 	mov	r4,r17
    e360:	d9800315 	stw	r6,12(sp)
    e364:	d9c00115 	stw	r7,4(sp)
    e368:	000fe840 	call	fe84 <__clzsi2>
    e36c:	d9800317 	ldw	r6,12(sp)
    e370:	d9c00117 	ldw	r7,4(sp)
    e374:	1007883a 	mov	r3,r2
    e378:	01000a04 	movi	r4,40
    e37c:	1cfffe04 	addi	r19,r3,-8
    e380:	20c9c83a 	sub	r4,r4,r3
    e384:	8cca983a 	sll	r5,r17,r19
    e388:	9108d83a 	srl	r4,r18,r4
    e38c:	94e6983a 	sll	r19,r18,r19
    e390:	2162b03a 	or	r17,r4,r5
    e394:	053f0344 	movi	r20,-1011
    e398:	a0e9c83a 	sub	r20,r20,r3
    e39c:	0025883a 	mov	r18,zero
    e3a0:	0011883a 	mov	r8,zero
    e3a4:	003f9606 	br	e200 <__alt_mem_Flash_flash_data+0xf400e200>
    e3a8:	8184b03a 	or	r2,r16,r6
    e3ac:	10001f1e 	bne	r2,zero,e42c <__divdf3+0x2a8>
    e3b0:	0021883a 	mov	r16,zero
    e3b4:	002b883a 	mov	r21,zero
    e3b8:	01c00084 	movi	r7,2
    e3bc:	003fa206 	br	e248 <__alt_mem_Flash_flash_data+0xf400e248>
    e3c0:	8184b03a 	or	r2,r16,r6
    e3c4:	10001526 	beq	r2,zero,e41c <__divdf3+0x298>
    e3c8:	80010c26 	beq	r16,zero,e7fc <__divdf3+0x678>
    e3cc:	8009883a 	mov	r4,r16
    e3d0:	d9800315 	stw	r6,12(sp)
    e3d4:	da000215 	stw	r8,8(sp)
    e3d8:	da400015 	stw	r9,0(sp)
    e3dc:	000fe840 	call	fe84 <__clzsi2>
    e3e0:	d9800317 	ldw	r6,12(sp)
    e3e4:	da000217 	ldw	r8,8(sp)
    e3e8:	da400017 	ldw	r9,0(sp)
    e3ec:	1007883a 	mov	r3,r2
    e3f0:	01000a04 	movi	r4,40
    e3f4:	1d7ffe04 	addi	r21,r3,-8
    e3f8:	20c9c83a 	sub	r4,r4,r3
    e3fc:	8560983a 	sll	r16,r16,r21
    e400:	3108d83a 	srl	r4,r6,r4
    e404:	356a983a 	sll	r21,r6,r21
    e408:	2420b03a 	or	r16,r4,r16
    e40c:	017f0344 	movi	r5,-1011
    e410:	28cbc83a 	sub	r5,r5,r3
    e414:	000f883a 	mov	r7,zero
    e418:	003f8b06 	br	e248 <__alt_mem_Flash_flash_data+0xf400e248>
    e41c:	0021883a 	mov	r16,zero
    e420:	002b883a 	mov	r21,zero
    e424:	01c00044 	movi	r7,1
    e428:	003f8706 	br	e248 <__alt_mem_Flash_flash_data+0xf400e248>
    e42c:	01c000c4 	movi	r7,3
    e430:	003f8506 	br	e248 <__alt_mem_Flash_flash_data+0xf400e248>
    e434:	04800104 	movi	r18,4
    e438:	0023883a 	mov	r17,zero
    e43c:	0027883a 	mov	r19,zero
    e440:	02000044 	movi	r8,1
    e444:	003f6e06 	br	e200 <__alt_mem_Flash_flash_data+0xf400e200>
    e448:	04800304 	movi	r18,12
    e44c:	020000c4 	movi	r8,3
    e450:	003f6b06 	br	e200 <__alt_mem_Flash_flash_data+0xf400e200>
    e454:	01400434 	movhi	r5,16
    e458:	000d883a 	mov	r6,zero
    e45c:	297fffc4 	addi	r5,r5,-1
    e460:	04ffffc4 	movi	r19,-1
    e464:	0101ffc4 	movi	r4,2047
    e468:	003fa406 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e46c:	043f0084 	movi	r16,-1022
    e470:	8521c83a 	sub	r16,r16,r20
    e474:	00800e04 	movi	r2,56
    e478:	1401200e 	bge	r2,r16,e8fc <__divdf3+0x778>
    e47c:	9180004c 	andi	r6,r18,1
    e480:	0009883a 	mov	r4,zero
    e484:	000b883a 	mov	r5,zero
    e488:	0027883a 	mov	r19,zero
    e48c:	003f9b06 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e490:	8880022c 	andhi	r2,r17,8
    e494:	1000c726 	beq	r2,zero,e7b4 <__divdf3+0x630>
    e498:	8080022c 	andhi	r2,r16,8
    e49c:	1000c51e 	bne	r2,zero,e7b4 <__divdf3+0x630>
    e4a0:	00800434 	movhi	r2,16
    e4a4:	81400234 	orhi	r5,r16,8
    e4a8:	10bfffc4 	addi	r2,r2,-1
    e4ac:	b80d883a 	mov	r6,r23
    e4b0:	288a703a 	and	r5,r5,r2
    e4b4:	a827883a 	mov	r19,r21
    e4b8:	003fea06 	br	e464 <__alt_mem_Flash_flash_data+0xf400e464>
    e4bc:	8440ea36 	bltu	r16,r17,e868 <__divdf3+0x6e4>
    e4c0:	8c00e826 	beq	r17,r16,e864 <__divdf3+0x6e0>
    e4c4:	a53fffc4 	addi	r20,r20,-1
    e4c8:	882d883a 	mov	r22,r17
    e4cc:	000d883a 	mov	r6,zero
    e4d0:	a804d63a 	srli	r2,r21,24
    e4d4:	8020923a 	slli	r16,r16,8
    e4d8:	b009883a 	mov	r4,r22
    e4dc:	d9800315 	stw	r6,12(sp)
    e4e0:	1420b03a 	or	r16,r2,r16
    e4e4:	802ed43a 	srli	r23,r16,16
    e4e8:	873fffcc 	andi	fp,r16,65535
    e4ec:	a82a923a 	slli	r21,r21,8
    e4f0:	b80b883a 	mov	r5,r23
    e4f4:	000d8d80 	call	d8d8 <__udivsi3>
    e4f8:	b009883a 	mov	r4,r22
    e4fc:	b80b883a 	mov	r5,r23
    e500:	1023883a 	mov	r17,r2
    e504:	000d8e00 	call	d8e0 <__umodsi3>
    e508:	1004943a 	slli	r2,r2,16
    e50c:	9808d43a 	srli	r4,r19,16
    e510:	8f2d383a 	mul	r22,r17,fp
    e514:	d9800317 	ldw	r6,12(sp)
    e518:	1106b03a 	or	r3,r2,r4
    e51c:	1d80062e 	bgeu	r3,r22,e538 <__divdf3+0x3b4>
    e520:	1c07883a 	add	r3,r3,r16
    e524:	88bfffc4 	addi	r2,r17,-1
    e528:	1c00dc36 	bltu	r3,r16,e89c <__divdf3+0x718>
    e52c:	1d80db2e 	bgeu	r3,r22,e89c <__divdf3+0x718>
    e530:	8c7fff84 	addi	r17,r17,-2
    e534:	1c07883a 	add	r3,r3,r16
    e538:	1dadc83a 	sub	r22,r3,r22
    e53c:	b009883a 	mov	r4,r22
    e540:	b80b883a 	mov	r5,r23
    e544:	d9800315 	stw	r6,12(sp)
    e548:	000d8d80 	call	d8d8 <__udivsi3>
    e54c:	b009883a 	mov	r4,r22
    e550:	b80b883a 	mov	r5,r23
    e554:	d8800015 	stw	r2,0(sp)
    e558:	000d8e00 	call	d8e0 <__umodsi3>
    e55c:	da400017 	ldw	r9,0(sp)
    e560:	1004943a 	slli	r2,r2,16
    e564:	9cffffcc 	andi	r19,r19,65535
    e568:	4f07383a 	mul	r3,r9,fp
    e56c:	14c8b03a 	or	r4,r2,r19
    e570:	d9800317 	ldw	r6,12(sp)
    e574:	20c0062e 	bgeu	r4,r3,e590 <__divdf3+0x40c>
    e578:	2409883a 	add	r4,r4,r16
    e57c:	48bfffc4 	addi	r2,r9,-1
    e580:	2400c436 	bltu	r4,r16,e894 <__divdf3+0x710>
    e584:	20c0c32e 	bgeu	r4,r3,e894 <__divdf3+0x710>
    e588:	4a7fff84 	addi	r9,r9,-2
    e58c:	2409883a 	add	r4,r4,r16
    e590:	8822943a 	slli	r17,r17,16
    e594:	a80ed43a 	srli	r7,r21,16
    e598:	aa3fffcc 	andi	r8,r21,65535
    e59c:	4c62b03a 	or	r17,r9,r17
    e5a0:	8816d43a 	srli	r11,r17,16
    e5a4:	897fffcc 	andi	r5,r17,65535
    e5a8:	2a15383a 	mul	r10,r5,r8
    e5ac:	5a19383a 	mul	r12,r11,r8
    e5b0:	29cb383a 	mul	r5,r5,r7
    e5b4:	5012d43a 	srli	r9,r10,16
    e5b8:	20c5c83a 	sub	r2,r4,r3
    e5bc:	614b883a 	add	r5,r12,r5
    e5c0:	2a4b883a 	add	r5,r5,r9
    e5c4:	59c7383a 	mul	r3,r11,r7
    e5c8:	2b00022e 	bgeu	r5,r12,e5d4 <__divdf3+0x450>
    e5cc:	01000074 	movhi	r4,1
    e5d0:	1907883a 	add	r3,r3,r4
    e5d4:	2808d43a 	srli	r4,r5,16
    e5d8:	280a943a 	slli	r5,r5,16
    e5dc:	54ffffcc 	andi	r19,r10,65535
    e5e0:	1907883a 	add	r3,r3,r4
    e5e4:	2ccb883a 	add	r5,r5,r19
    e5e8:	10c09336 	bltu	r2,r3,e838 <__divdf3+0x6b4>
    e5ec:	10c0ad26 	beq	r2,r3,e8a4 <__divdf3+0x720>
    e5f0:	10c7c83a 	sub	r3,r2,r3
    e5f4:	3167c83a 	sub	r19,r6,r5
    e5f8:	34ed803a 	cmpltu	r22,r6,r19
    e5fc:	1dadc83a 	sub	r22,r3,r22
    e600:	b400b226 	beq	r22,r16,e8cc <__divdf3+0x748>
    e604:	b009883a 	mov	r4,r22
    e608:	b80b883a 	mov	r5,r23
    e60c:	d9c00115 	stw	r7,4(sp)
    e610:	da000215 	stw	r8,8(sp)
    e614:	000d8d80 	call	d8d8 <__udivsi3>
    e618:	b009883a 	mov	r4,r22
    e61c:	b80b883a 	mov	r5,r23
    e620:	d8800315 	stw	r2,12(sp)
    e624:	000d8e00 	call	d8e0 <__umodsi3>
    e628:	d9800317 	ldw	r6,12(sp)
    e62c:	1004943a 	slli	r2,r2,16
    e630:	9808d43a 	srli	r4,r19,16
    e634:	372d383a 	mul	r22,r6,fp
    e638:	d9c00117 	ldw	r7,4(sp)
    e63c:	1106b03a 	or	r3,r2,r4
    e640:	da000217 	ldw	r8,8(sp)
    e644:	1d80062e 	bgeu	r3,r22,e660 <__divdf3+0x4dc>
    e648:	1c07883a 	add	r3,r3,r16
    e64c:	30bfffc4 	addi	r2,r6,-1
    e650:	1c00a036 	bltu	r3,r16,e8d4 <__divdf3+0x750>
    e654:	1d809f2e 	bgeu	r3,r22,e8d4 <__divdf3+0x750>
    e658:	31bfff84 	addi	r6,r6,-2
    e65c:	1c07883a 	add	r3,r3,r16
    e660:	1dadc83a 	sub	r22,r3,r22
    e664:	b009883a 	mov	r4,r22
    e668:	b80b883a 	mov	r5,r23
    e66c:	d9800315 	stw	r6,12(sp)
    e670:	d9c00115 	stw	r7,4(sp)
    e674:	da000215 	stw	r8,8(sp)
    e678:	000d8d80 	call	d8d8 <__udivsi3>
    e67c:	b009883a 	mov	r4,r22
    e680:	b80b883a 	mov	r5,r23
    e684:	d8800015 	stw	r2,0(sp)
    e688:	000d8e00 	call	d8e0 <__umodsi3>
    e68c:	da400017 	ldw	r9,0(sp)
    e690:	1004943a 	slli	r2,r2,16
    e694:	993fffcc 	andi	r4,r19,65535
    e698:	4f39383a 	mul	fp,r9,fp
    e69c:	1106b03a 	or	r3,r2,r4
    e6a0:	d9800317 	ldw	r6,12(sp)
    e6a4:	d9c00117 	ldw	r7,4(sp)
    e6a8:	da000217 	ldw	r8,8(sp)
    e6ac:	1f00062e 	bgeu	r3,fp,e6c8 <__divdf3+0x544>
    e6b0:	1c07883a 	add	r3,r3,r16
    e6b4:	48bfffc4 	addi	r2,r9,-1
    e6b8:	1c008836 	bltu	r3,r16,e8dc <__divdf3+0x758>
    e6bc:	1f00872e 	bgeu	r3,fp,e8dc <__divdf3+0x758>
    e6c0:	4a7fff84 	addi	r9,r9,-2
    e6c4:	1c07883a 	add	r3,r3,r16
    e6c8:	3008943a 	slli	r4,r6,16
    e6cc:	1f07c83a 	sub	r3,r3,fp
    e6d0:	4926b03a 	or	r19,r9,r4
    e6d4:	993fffcc 	andi	r4,r19,65535
    e6d8:	980cd43a 	srli	r6,r19,16
    e6dc:	220b383a 	mul	r5,r4,r8
    e6e0:	21c5383a 	mul	r2,r4,r7
    e6e4:	3211383a 	mul	r8,r6,r8
    e6e8:	2808d43a 	srli	r4,r5,16
    e6ec:	31cf383a 	mul	r7,r6,r7
    e6f0:	4085883a 	add	r2,r8,r2
    e6f4:	1105883a 	add	r2,r2,r4
    e6f8:	1200022e 	bgeu	r2,r8,e704 <__divdf3+0x580>
    e6fc:	01000074 	movhi	r4,1
    e700:	390f883a 	add	r7,r7,r4
    e704:	1008d43a 	srli	r4,r2,16
    e708:	1004943a 	slli	r2,r2,16
    e70c:	297fffcc 	andi	r5,r5,65535
    e710:	390f883a 	add	r7,r7,r4
    e714:	1145883a 	add	r2,r2,r5
    e718:	19c06536 	bltu	r3,r7,e8b0 <__divdf3+0x72c>
    e71c:	19c09f26 	beq	r3,r7,e99c <__divdf3+0x818>
    e720:	9cc00054 	ori	r19,r19,1
    e724:	a100ffc4 	addi	r4,r20,1023
    e728:	013f500e 	bge	zero,r4,e46c <__alt_mem_Flash_flash_data+0xf400e46c>
    e72c:	988001cc 	andi	r2,r19,7
    e730:	10000726 	beq	r2,zero,e750 <__divdf3+0x5cc>
    e734:	98c003cc 	andi	r3,r19,15
    e738:	00800104 	movi	r2,4
    e73c:	18800426 	beq	r3,r2,e750 <__divdf3+0x5cc>
    e740:	9885883a 	add	r2,r19,r2
    e744:	14e1803a 	cmpltu	r16,r2,r19
    e748:	8c23883a 	add	r17,r17,r16
    e74c:	1027883a 	mov	r19,r2
    e750:	8880402c 	andhi	r2,r17,256
    e754:	10000426 	beq	r2,zero,e768 <__divdf3+0x5e4>
    e758:	00bfc034 	movhi	r2,65280
    e75c:	10bfffc4 	addi	r2,r2,-1
    e760:	a1010004 	addi	r4,r20,1024
    e764:	88a2703a 	and	r17,r17,r2
    e768:	0081ff84 	movi	r2,2046
    e76c:	113edf16 	blt	r2,r4,e2ec <__alt_mem_Flash_flash_data+0xf400e2ec>
    e770:	9826d0fa 	srli	r19,r19,3
    e774:	8804977a 	slli	r2,r17,29
    e778:	8820927a 	slli	r16,r17,9
    e77c:	2101ffcc 	andi	r4,r4,2047
    e780:	14e6b03a 	or	r19,r2,r19
    e784:	800ad33a 	srli	r5,r16,12
    e788:	9180004c 	andi	r6,r18,1
    e78c:	003edb06 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e790:	008000c4 	movi	r2,3
    e794:	4080a826 	beq	r8,r2,ea38 <__divdf3+0x8b4>
    e798:	00800044 	movi	r2,1
    e79c:	4080551e 	bne	r8,r2,e8f4 <__divdf3+0x770>
    e7a0:	e00d883a 	mov	r6,fp
    e7a4:	0009883a 	mov	r4,zero
    e7a8:	000b883a 	mov	r5,zero
    e7ac:	0027883a 	mov	r19,zero
    e7b0:	003ed206 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e7b4:	00800434 	movhi	r2,16
    e7b8:	89400234 	orhi	r5,r17,8
    e7bc:	10bfffc4 	addi	r2,r2,-1
    e7c0:	b00d883a 	mov	r6,r22
    e7c4:	288a703a 	and	r5,r5,r2
    e7c8:	003f2606 	br	e464 <__alt_mem_Flash_flash_data+0xf400e464>
    e7cc:	d9800315 	stw	r6,12(sp)
    e7d0:	d9c00115 	stw	r7,4(sp)
    e7d4:	000fe840 	call	fe84 <__clzsi2>
    e7d8:	10c00804 	addi	r3,r2,32
    e7dc:	010009c4 	movi	r4,39
    e7e0:	d9800317 	ldw	r6,12(sp)
    e7e4:	d9c00117 	ldw	r7,4(sp)
    e7e8:	20fee30e 	bge	r4,r3,e378 <__alt_mem_Flash_flash_data+0xf400e378>
    e7ec:	117ffe04 	addi	r5,r2,-8
    e7f0:	9162983a 	sll	r17,r18,r5
    e7f4:	0027883a 	mov	r19,zero
    e7f8:	003ee606 	br	e394 <__alt_mem_Flash_flash_data+0xf400e394>
    e7fc:	3009883a 	mov	r4,r6
    e800:	d9800315 	stw	r6,12(sp)
    e804:	da000215 	stw	r8,8(sp)
    e808:	da400015 	stw	r9,0(sp)
    e80c:	000fe840 	call	fe84 <__clzsi2>
    e810:	10c00804 	addi	r3,r2,32
    e814:	010009c4 	movi	r4,39
    e818:	d9800317 	ldw	r6,12(sp)
    e81c:	da000217 	ldw	r8,8(sp)
    e820:	da400017 	ldw	r9,0(sp)
    e824:	20fef20e 	bge	r4,r3,e3f0 <__alt_mem_Flash_flash_data+0xf400e3f0>
    e828:	10bffe04 	addi	r2,r2,-8
    e82c:	a8a0983a 	sll	r16,r21,r2
    e830:	002b883a 	mov	r21,zero
    e834:	003ef506 	br	e40c <__alt_mem_Flash_flash_data+0xf400e40c>
    e838:	354d883a 	add	r6,r6,r21
    e83c:	3549803a 	cmpltu	r4,r6,r21
    e840:	2409883a 	add	r4,r4,r16
    e844:	2089883a 	add	r4,r4,r2
    e848:	88bfffc4 	addi	r2,r17,-1
    e84c:	81000c2e 	bgeu	r16,r4,e880 <__divdf3+0x6fc>
    e850:	20c04436 	bltu	r4,r3,e964 <__divdf3+0x7e0>
    e854:	19006f26 	beq	r3,r4,ea14 <__divdf3+0x890>
    e858:	20c7c83a 	sub	r3,r4,r3
    e85c:	1023883a 	mov	r17,r2
    e860:	003f6406 	br	e5f4 <__alt_mem_Flash_flash_data+0xf400e5f4>
    e864:	9d7f1736 	bltu	r19,r21,e4c4 <__alt_mem_Flash_flash_data+0xf400e4c4>
    e868:	9806d07a 	srli	r3,r19,1
    e86c:	880497fa 	slli	r2,r17,31
    e870:	980c97fa 	slli	r6,r19,31
    e874:	882cd07a 	srli	r22,r17,1
    e878:	18a6b03a 	or	r19,r3,r2
    e87c:	003f1406 	br	e4d0 <__alt_mem_Flash_flash_data+0xf400e4d0>
    e880:	243ff51e 	bne	r4,r16,e858 <__alt_mem_Flash_flash_data+0xf400e858>
    e884:	357ff22e 	bgeu	r6,r21,e850 <__alt_mem_Flash_flash_data+0xf400e850>
    e888:	80c7c83a 	sub	r3,r16,r3
    e88c:	1023883a 	mov	r17,r2
    e890:	003f5806 	br	e5f4 <__alt_mem_Flash_flash_data+0xf400e5f4>
    e894:	1013883a 	mov	r9,r2
    e898:	003f3d06 	br	e590 <__alt_mem_Flash_flash_data+0xf400e590>
    e89c:	1023883a 	mov	r17,r2
    e8a0:	003f2506 	br	e538 <__alt_mem_Flash_flash_data+0xf400e538>
    e8a4:	317fe436 	bltu	r6,r5,e838 <__alt_mem_Flash_flash_data+0xf400e838>
    e8a8:	0007883a 	mov	r3,zero
    e8ac:	003f5106 	br	e5f4 <__alt_mem_Flash_flash_data+0xf400e5f4>
    e8b0:	1c07883a 	add	r3,r3,r16
    e8b4:	993fffc4 	addi	r4,r19,-1
    e8b8:	1c000a2e 	bgeu	r3,r16,e8e4 <__divdf3+0x760>
    e8bc:	2027883a 	mov	r19,r4
    e8c0:	19ff971e 	bne	r3,r7,e720 <__alt_mem_Flash_flash_data+0xf400e720>
    e8c4:	a8bf961e 	bne	r21,r2,e720 <__alt_mem_Flash_flash_data+0xf400e720>
    e8c8:	003f9606 	br	e724 <__alt_mem_Flash_flash_data+0xf400e724>
    e8cc:	04ffffc4 	movi	r19,-1
    e8d0:	003f9406 	br	e724 <__alt_mem_Flash_flash_data+0xf400e724>
    e8d4:	100d883a 	mov	r6,r2
    e8d8:	003f6106 	br	e660 <__alt_mem_Flash_flash_data+0xf400e660>
    e8dc:	1013883a 	mov	r9,r2
    e8e0:	003f7906 	br	e6c8 <__alt_mem_Flash_flash_data+0xf400e6c8>
    e8e4:	19c02636 	bltu	r3,r7,e980 <__divdf3+0x7fc>
    e8e8:	38c04d26 	beq	r7,r3,ea20 <__divdf3+0x89c>
    e8ec:	2027883a 	mov	r19,r4
    e8f0:	003f8b06 	br	e720 <__alt_mem_Flash_flash_data+0xf400e720>
    e8f4:	e025883a 	mov	r18,fp
    e8f8:	003f8a06 	br	e724 <__alt_mem_Flash_flash_data+0xf400e724>
    e8fc:	008007c4 	movi	r2,31
    e900:	14002a16 	blt	r2,r16,e9ac <__divdf3+0x828>
    e904:	a5010784 	addi	r20,r20,1054
    e908:	8d04983a 	sll	r2,r17,r20
    e90c:	9c06d83a 	srl	r3,r19,r16
    e910:	9d28983a 	sll	r20,r19,r20
    e914:	8c20d83a 	srl	r16,r17,r16
    e918:	1886b03a 	or	r3,r3,r2
    e91c:	a004c03a 	cmpne	r2,r20,zero
    e920:	1884b03a 	or	r2,r3,r2
    e924:	10c001cc 	andi	r3,r2,7
    e928:	18000726 	beq	r3,zero,e948 <__divdf3+0x7c4>
    e92c:	110003cc 	andi	r4,r2,15
    e930:	00c00104 	movi	r3,4
    e934:	20c00426 	beq	r4,r3,e948 <__divdf3+0x7c4>
    e938:	10c00104 	addi	r3,r2,4
    e93c:	1885803a 	cmpltu	r2,r3,r2
    e940:	80a1883a 	add	r16,r16,r2
    e944:	1805883a 	mov	r2,r3
    e948:	80c0202c 	andhi	r3,r16,128
    e94c:	18002d26 	beq	r3,zero,ea04 <__divdf3+0x880>
    e950:	9180004c 	andi	r6,r18,1
    e954:	01000044 	movi	r4,1
    e958:	000b883a 	mov	r5,zero
    e95c:	0027883a 	mov	r19,zero
    e960:	003e6606 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e964:	354d883a 	add	r6,r6,r21
    e968:	356d803a 	cmpltu	r22,r6,r21
    e96c:	b42d883a 	add	r22,r22,r16
    e970:	b12d883a 	add	r22,r22,r4
    e974:	8c7fff84 	addi	r17,r17,-2
    e978:	b0c7c83a 	sub	r3,r22,r3
    e97c:	003f1d06 	br	e5f4 <__alt_mem_Flash_flash_data+0xf400e5f4>
    e980:	ad4b883a 	add	r5,r21,r21
    e984:	2d6b803a 	cmpltu	r21,r5,r21
    e988:	ac2b883a 	add	r21,r21,r16
    e98c:	1d47883a 	add	r3,r3,r21
    e990:	993fff84 	addi	r4,r19,-2
    e994:	282b883a 	mov	r21,r5
    e998:	003fc806 	br	e8bc <__alt_mem_Flash_flash_data+0xf400e8bc>
    e99c:	103fc41e 	bne	r2,zero,e8b0 <__alt_mem_Flash_flash_data+0xf400e8b0>
    e9a0:	002b883a 	mov	r21,zero
    e9a4:	a8bf5e1e 	bne	r21,r2,e720 <__alt_mem_Flash_flash_data+0xf400e720>
    e9a8:	003f5e06 	br	e724 <__alt_mem_Flash_flash_data+0xf400e724>
    e9ac:	00bef884 	movi	r2,-1054
    e9b0:	1505c83a 	sub	r2,r2,r20
    e9b4:	00c00804 	movi	r3,32
    e9b8:	8884d83a 	srl	r2,r17,r2
    e9bc:	80c01c26 	beq	r16,r3,ea30 <__divdf3+0x8ac>
    e9c0:	a0c10f84 	addi	r3,r20,1086
    e9c4:	88c6983a 	sll	r3,r17,r3
    e9c8:	1cc6b03a 	or	r3,r3,r19
    e9cc:	1806c03a 	cmpne	r3,r3,zero
    e9d0:	1884b03a 	or	r2,r3,r2
    e9d4:	140001cc 	andi	r16,r2,7
    e9d8:	8000061e 	bne	r16,zero,e9f4 <__divdf3+0x870>
    e9dc:	000b883a 	mov	r5,zero
    e9e0:	1004d0fa 	srli	r2,r2,3
    e9e4:	9180004c 	andi	r6,r18,1
    e9e8:	0009883a 	mov	r4,zero
    e9ec:	1426b03a 	or	r19,r2,r16
    e9f0:	003e4206 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e9f4:	110003cc 	andi	r4,r2,15
    e9f8:	00c00104 	movi	r3,4
    e9fc:	0021883a 	mov	r16,zero
    ea00:	20ffcd1e 	bne	r4,r3,e938 <__alt_mem_Flash_flash_data+0xf400e938>
    ea04:	800a927a 	slli	r5,r16,9
    ea08:	8020977a 	slli	r16,r16,29
    ea0c:	280ad33a 	srli	r5,r5,12
    ea10:	003ff306 	br	e9e0 <__alt_mem_Flash_flash_data+0xf400e9e0>
    ea14:	317fd336 	bltu	r6,r5,e964 <__alt_mem_Flash_flash_data+0xf400e964>
    ea18:	1023883a 	mov	r17,r2
    ea1c:	003fa206 	br	e8a8 <__alt_mem_Flash_flash_data+0xf400e8a8>
    ea20:	a8bfd736 	bltu	r21,r2,e980 <__alt_mem_Flash_flash_data+0xf400e980>
    ea24:	2027883a 	mov	r19,r4
    ea28:	a8bf3d1e 	bne	r21,r2,e720 <__alt_mem_Flash_flash_data+0xf400e720>
    ea2c:	003f3d06 	br	e724 <__alt_mem_Flash_flash_data+0xf400e724>
    ea30:	0007883a 	mov	r3,zero
    ea34:	003fe406 	br	e9c8 <__alt_mem_Flash_flash_data+0xf400e9c8>
    ea38:	00800434 	movhi	r2,16
    ea3c:	89400234 	orhi	r5,r17,8
    ea40:	10bfffc4 	addi	r2,r2,-1
    ea44:	e00d883a 	mov	r6,fp
    ea48:	288a703a 	and	r5,r5,r2
    ea4c:	003e8506 	br	e464 <__alt_mem_Flash_flash_data+0xf400e464>

0000ea50 <__eqdf2>:
    ea50:	2804d53a 	srli	r2,r5,20
    ea54:	3806d53a 	srli	r3,r7,20
    ea58:	02000434 	movhi	r8,16
    ea5c:	423fffc4 	addi	r8,r8,-1
    ea60:	1081ffcc 	andi	r2,r2,2047
    ea64:	0241ffc4 	movi	r9,2047
    ea68:	2a14703a 	and	r10,r5,r8
    ea6c:	18c1ffcc 	andi	r3,r3,2047
    ea70:	3a10703a 	and	r8,r7,r8
    ea74:	280ad7fa 	srli	r5,r5,31
    ea78:	380ed7fa 	srli	r7,r7,31
    ea7c:	12400f26 	beq	r2,r9,eabc <__eqdf2+0x6c>
    ea80:	0241ffc4 	movi	r9,2047
    ea84:	1a400326 	beq	r3,r9,ea94 <__eqdf2+0x44>
    ea88:	10c00526 	beq	r2,r3,eaa0 <__eqdf2+0x50>
    ea8c:	00800044 	movi	r2,1
    ea90:	f800283a 	ret
    ea94:	4192b03a 	or	r9,r8,r6
    ea98:	483ffc1e 	bne	r9,zero,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    ea9c:	10fffb1e 	bne	r2,r3,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    eaa0:	523ffa1e 	bne	r10,r8,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    eaa4:	21bff91e 	bne	r4,r6,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    eaa8:	29c00826 	beq	r5,r7,eacc <__eqdf2+0x7c>
    eaac:	103ff71e 	bne	r2,zero,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    eab0:	5104b03a 	or	r2,r10,r4
    eab4:	1004c03a 	cmpne	r2,r2,zero
    eab8:	f800283a 	ret
    eabc:	5112b03a 	or	r9,r10,r4
    eac0:	483fef26 	beq	r9,zero,ea80 <__alt_mem_Flash_flash_data+0xf400ea80>
    eac4:	00800044 	movi	r2,1
    eac8:	f800283a 	ret
    eacc:	0005883a 	mov	r2,zero
    ead0:	f800283a 	ret

0000ead4 <__gedf2>:
    ead4:	2804d53a 	srli	r2,r5,20
    ead8:	3806d53a 	srli	r3,r7,20
    eadc:	02000434 	movhi	r8,16
    eae0:	423fffc4 	addi	r8,r8,-1
    eae4:	0241ffc4 	movi	r9,2047
    eae8:	1081ffcc 	andi	r2,r2,2047
    eaec:	2a14703a 	and	r10,r5,r8
    eaf0:	1a46703a 	and	r3,r3,r9
    eaf4:	3a10703a 	and	r8,r7,r8
    eaf8:	280ad7fa 	srli	r5,r5,31
    eafc:	380ed7fa 	srli	r7,r7,31
    eb00:	12400b26 	beq	r2,r9,eb30 <__gedf2+0x5c>
    eb04:	1a401626 	beq	r3,r9,eb60 <__gedf2+0x8c>
    eb08:	10000c1e 	bne	r2,zero,eb3c <__gedf2+0x68>
    eb0c:	5112b03a 	or	r9,r10,r4
    eb10:	4813003a 	cmpeq	r9,r9,zero
    eb14:	4817883a 	mov	r11,r9
    eb18:	18000c1e 	bne	r3,zero,eb4c <__gedf2+0x78>
    eb1c:	4198b03a 	or	r12,r8,r6
    eb20:	60000a1e 	bne	r12,zero,eb4c <__gedf2+0x78>
    eb24:	48001326 	beq	r9,zero,eb74 <__gedf2+0xa0>
    eb28:	0005883a 	mov	r2,zero
    eb2c:	f800283a 	ret
    eb30:	5112b03a 	or	r9,r10,r4
    eb34:	4800191e 	bne	r9,zero,eb9c <__gedf2+0xc8>
    eb38:	18800926 	beq	r3,r2,eb60 <__gedf2+0x8c>
    eb3c:	18000b1e 	bne	r3,zero,eb6c <__gedf2+0x98>
    eb40:	4192b03a 	or	r9,r8,r6
    eb44:	0017883a 	mov	r11,zero
    eb48:	48000a26 	beq	r9,zero,eb74 <__gedf2+0xa0>
    eb4c:	39c03fcc 	andi	r7,r7,255
    eb50:	58000726 	beq	r11,zero,eb70 <__gedf2+0x9c>
    eb54:	3800081e 	bne	r7,zero,eb78 <__gedf2+0xa4>
    eb58:	00bfffc4 	movi	r2,-1
    eb5c:	f800283a 	ret
    eb60:	4192b03a 	or	r9,r8,r6
    eb64:	48000d1e 	bne	r9,zero,eb9c <__gedf2+0xc8>
    eb68:	103fe826 	beq	r2,zero,eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    eb6c:	39c03fcc 	andi	r7,r7,255
    eb70:	29c00326 	beq	r5,r7,eb80 <__gedf2+0xac>
    eb74:	283ff81e 	bne	r5,zero,eb58 <__alt_mem_Flash_flash_data+0xf400eb58>
    eb78:	00800044 	movi	r2,1
    eb7c:	f800283a 	ret
    eb80:	18bffc16 	blt	r3,r2,eb74 <__alt_mem_Flash_flash_data+0xf400eb74>
    eb84:	10c00316 	blt	r2,r3,eb94 <__gedf2+0xc0>
    eb88:	42bffa36 	bltu	r8,r10,eb74 <__alt_mem_Flash_flash_data+0xf400eb74>
    eb8c:	52000526 	beq	r10,r8,eba4 <__gedf2+0xd0>
    eb90:	523fe52e 	bgeu	r10,r8,eb28 <__alt_mem_Flash_flash_data+0xf400eb28>
    eb94:	283ff026 	beq	r5,zero,eb58 <__alt_mem_Flash_flash_data+0xf400eb58>
    eb98:	003ff706 	br	eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    eb9c:	00bfff84 	movi	r2,-2
    eba0:	f800283a 	ret
    eba4:	313ff336 	bltu	r6,r4,eb74 <__alt_mem_Flash_flash_data+0xf400eb74>
    eba8:	21bfdf2e 	bgeu	r4,r6,eb28 <__alt_mem_Flash_flash_data+0xf400eb28>
    ebac:	283fea26 	beq	r5,zero,eb58 <__alt_mem_Flash_flash_data+0xf400eb58>
    ebb0:	003ff106 	br	eb78 <__alt_mem_Flash_flash_data+0xf400eb78>

0000ebb4 <__ledf2>:
    ebb4:	2804d53a 	srli	r2,r5,20
    ebb8:	3810d53a 	srli	r8,r7,20
    ebbc:	00c00434 	movhi	r3,16
    ebc0:	18ffffc4 	addi	r3,r3,-1
    ebc4:	0241ffc4 	movi	r9,2047
    ebc8:	1081ffcc 	andi	r2,r2,2047
    ebcc:	28d4703a 	and	r10,r5,r3
    ebd0:	4250703a 	and	r8,r8,r9
    ebd4:	38c6703a 	and	r3,r7,r3
    ebd8:	280ad7fa 	srli	r5,r5,31
    ebdc:	380ed7fa 	srli	r7,r7,31
    ebe0:	12400b26 	beq	r2,r9,ec10 <__ledf2+0x5c>
    ebe4:	42401926 	beq	r8,r9,ec4c <__ledf2+0x98>
    ebe8:	10000c1e 	bne	r2,zero,ec1c <__ledf2+0x68>
    ebec:	5112b03a 	or	r9,r10,r4
    ebf0:	4813003a 	cmpeq	r9,r9,zero
    ebf4:	4817883a 	mov	r11,r9
    ebf8:	40000f26 	beq	r8,zero,ec38 <__ledf2+0x84>
    ebfc:	39c03fcc 	andi	r7,r7,255
    ec00:	58001826 	beq	r11,zero,ec64 <__ledf2+0xb0>
    ec04:	38000a1e 	bne	r7,zero,ec30 <__ledf2+0x7c>
    ec08:	00bfffc4 	movi	r2,-1
    ec0c:	f800283a 	ret
    ec10:	5112b03a 	or	r9,r10,r4
    ec14:	48000f1e 	bne	r9,zero,ec54 <__ledf2+0xa0>
    ec18:	40800c26 	beq	r8,r2,ec4c <__ledf2+0x98>
    ec1c:	4000101e 	bne	r8,zero,ec60 <__ledf2+0xac>
    ec20:	1992b03a 	or	r9,r3,r6
    ec24:	0017883a 	mov	r11,zero
    ec28:	483ff41e 	bne	r9,zero,ebfc <__alt_mem_Flash_flash_data+0xf400ebfc>
    ec2c:	283ff61e 	bne	r5,zero,ec08 <__alt_mem_Flash_flash_data+0xf400ec08>
    ec30:	00800044 	movi	r2,1
    ec34:	f800283a 	ret
    ec38:	1998b03a 	or	r12,r3,r6
    ec3c:	603fef1e 	bne	r12,zero,ebfc <__alt_mem_Flash_flash_data+0xf400ebfc>
    ec40:	483ffa26 	beq	r9,zero,ec2c <__alt_mem_Flash_flash_data+0xf400ec2c>
    ec44:	0005883a 	mov	r2,zero
    ec48:	f800283a 	ret
    ec4c:	1992b03a 	or	r9,r3,r6
    ec50:	48000226 	beq	r9,zero,ec5c <__ledf2+0xa8>
    ec54:	00800084 	movi	r2,2
    ec58:	f800283a 	ret
    ec5c:	103fe326 	beq	r2,zero,ebec <__alt_mem_Flash_flash_data+0xf400ebec>
    ec60:	39c03fcc 	andi	r7,r7,255
    ec64:	29fff11e 	bne	r5,r7,ec2c <__alt_mem_Flash_flash_data+0xf400ec2c>
    ec68:	40bff016 	blt	r8,r2,ec2c <__alt_mem_Flash_flash_data+0xf400ec2c>
    ec6c:	12000316 	blt	r2,r8,ec7c <__ledf2+0xc8>
    ec70:	1abfee36 	bltu	r3,r10,ec2c <__alt_mem_Flash_flash_data+0xf400ec2c>
    ec74:	50c00326 	beq	r10,r3,ec84 <__ledf2+0xd0>
    ec78:	50fff22e 	bgeu	r10,r3,ec44 <__alt_mem_Flash_flash_data+0xf400ec44>
    ec7c:	283fe226 	beq	r5,zero,ec08 <__alt_mem_Flash_flash_data+0xf400ec08>
    ec80:	003feb06 	br	ec30 <__alt_mem_Flash_flash_data+0xf400ec30>
    ec84:	313fe936 	bltu	r6,r4,ec2c <__alt_mem_Flash_flash_data+0xf400ec2c>
    ec88:	21bfee2e 	bgeu	r4,r6,ec44 <__alt_mem_Flash_flash_data+0xf400ec44>
    ec8c:	283fde26 	beq	r5,zero,ec08 <__alt_mem_Flash_flash_data+0xf400ec08>
    ec90:	003fe706 	br	ec30 <__alt_mem_Flash_flash_data+0xf400ec30>

0000ec94 <__muldf3>:
    ec94:	defff204 	addi	sp,sp,-56
    ec98:	2804d53a 	srli	r2,r5,20
    ec9c:	dd800a15 	stw	r22,40(sp)
    eca0:	282cd7fa 	srli	r22,r5,31
    eca4:	dc000415 	stw	r16,16(sp)
    eca8:	04000434 	movhi	r16,16
    ecac:	df000c15 	stw	fp,48(sp)
    ecb0:	dd000815 	stw	r20,32(sp)
    ecb4:	dcc00715 	stw	r19,28(sp)
    ecb8:	dc800615 	stw	r18,24(sp)
    ecbc:	dc400515 	stw	r17,20(sp)
    ecc0:	843fffc4 	addi	r16,r16,-1
    ecc4:	dfc00d15 	stw	ra,52(sp)
    ecc8:	ddc00b15 	stw	r23,44(sp)
    eccc:	dd400915 	stw	r21,36(sp)
    ecd0:	1501ffcc 	andi	r20,r2,2047
    ecd4:	2023883a 	mov	r17,r4
    ecd8:	2025883a 	mov	r18,r4
    ecdc:	2c20703a 	and	r16,r5,r16
    ece0:	b027883a 	mov	r19,r22
    ece4:	b7003fcc 	andi	fp,r22,255
    ece8:	a0005926 	beq	r20,zero,ee50 <__muldf3+0x1bc>
    ecec:	0081ffc4 	movi	r2,2047
    ecf0:	a0803426 	beq	r20,r2,edc4 <__muldf3+0x130>
    ecf4:	84000434 	orhi	r16,r16,16
    ecf8:	2004d77a 	srli	r2,r4,29
    ecfc:	802090fa 	slli	r16,r16,3
    ed00:	202490fa 	slli	r18,r4,3
    ed04:	a53f0044 	addi	r20,r20,-1023
    ed08:	80a0b03a 	or	r16,r16,r2
    ed0c:	002b883a 	mov	r21,zero
    ed10:	0015883a 	mov	r10,zero
    ed14:	3812d53a 	srli	r9,r7,20
    ed18:	3806d7fa 	srli	r3,r7,31
    ed1c:	02000434 	movhi	r8,16
    ed20:	423fffc4 	addi	r8,r8,-1
    ed24:	4941ffcc 	andi	r5,r9,2047
    ed28:	302f883a 	mov	r23,r6
    ed2c:	3a22703a 	and	r17,r7,r8
    ed30:	1ac03fcc 	andi	r11,r3,255
    ed34:	28006226 	beq	r5,zero,eec0 <__muldf3+0x22c>
    ed38:	0081ffc4 	movi	r2,2047
    ed3c:	28805a26 	beq	r5,r2,eea8 <__muldf3+0x214>
    ed40:	8a000434 	orhi	r8,r17,16
    ed44:	3004d77a 	srli	r2,r6,29
    ed48:	401090fa 	slli	r8,r8,3
    ed4c:	302e90fa 	slli	r23,r6,3
    ed50:	297f0044 	addi	r5,r5,-1023
    ed54:	40a2b03a 	or	r17,r8,r2
    ed58:	0013883a 	mov	r9,zero
    ed5c:	4d4cb03a 	or	r6,r9,r21
    ed60:	300c90ba 	slli	r6,r6,2
    ed64:	02000074 	movhi	r8,1
    ed68:	423b6104 	addi	r8,r8,-4732
    ed6c:	320d883a 	add	r6,r6,r8
    ed70:	31800017 	ldw	r6,0(r6)
    ed74:	a14b883a 	add	r5,r20,r5
    ed78:	1dacf03a 	xor	r22,r3,r22
    ed7c:	2b000044 	addi	r12,r5,1
    ed80:	3000683a 	jmp	r6
    ed84:	0000efc0 	call	efc <___svfprintf_internal_r+0x1e4>
    ed88:	0000efac 	andhi	zero,zero,958
    ed8c:	0000efac 	andhi	zero,zero,958
    ed90:	0000ef98 	cmpnei	zero,zero,958
    ed94:	0000ede0 	cmpeqi	zero,zero,951
    ed98:	0000ede0 	cmpeqi	zero,zero,951
    ed9c:	0000ef80 	call	ef8 <___svfprintf_internal_r+0x1e0>
    eda0:	0000ef98 	cmpnei	zero,zero,958
    eda4:	0000ede0 	cmpeqi	zero,zero,951
    eda8:	0000ef80 	call	ef8 <___svfprintf_internal_r+0x1e0>
    edac:	0000ede0 	cmpeqi	zero,zero,951
    edb0:	0000ef98 	cmpnei	zero,zero,958
    edb4:	0000ede4 	muli	zero,zero,951
    edb8:	0000ede4 	muli	zero,zero,951
    edbc:	0000ede4 	muli	zero,zero,951
    edc0:	0000f1bc 	xorhi	zero,zero,966
    edc4:	8104b03a 	or	r2,r16,r4
    edc8:	10006a1e 	bne	r2,zero,ef74 <__muldf3+0x2e0>
    edcc:	05400204 	movi	r21,8
    edd0:	0021883a 	mov	r16,zero
    edd4:	0025883a 	mov	r18,zero
    edd8:	02800084 	movi	r10,2
    eddc:	003fcd06 	br	ed14 <__alt_mem_Flash_flash_data+0xf400ed14>
    ede0:	b039883a 	mov	fp,r22
    ede4:	00800084 	movi	r2,2
    ede8:	50804e1e 	bne	r10,r2,ef24 <__muldf3+0x290>
    edec:	e4c0004c 	andi	r19,fp,1
    edf0:	0101ffc4 	movi	r4,2047
    edf4:	0021883a 	mov	r16,zero
    edf8:	0025883a 	mov	r18,zero
    edfc:	2008953a 	slli	r4,r4,20
    ee00:	98c03fcc 	andi	r3,r19,255
    ee04:	01400434 	movhi	r5,16
    ee08:	297fffc4 	addi	r5,r5,-1
    ee0c:	180697fa 	slli	r3,r3,31
    ee10:	8160703a 	and	r16,r16,r5
    ee14:	8120b03a 	or	r16,r16,r4
    ee18:	80c6b03a 	or	r3,r16,r3
    ee1c:	9005883a 	mov	r2,r18
    ee20:	dfc00d17 	ldw	ra,52(sp)
    ee24:	df000c17 	ldw	fp,48(sp)
    ee28:	ddc00b17 	ldw	r23,44(sp)
    ee2c:	dd800a17 	ldw	r22,40(sp)
    ee30:	dd400917 	ldw	r21,36(sp)
    ee34:	dd000817 	ldw	r20,32(sp)
    ee38:	dcc00717 	ldw	r19,28(sp)
    ee3c:	dc800617 	ldw	r18,24(sp)
    ee40:	dc400517 	ldw	r17,20(sp)
    ee44:	dc000417 	ldw	r16,16(sp)
    ee48:	dec00e04 	addi	sp,sp,56
    ee4c:	f800283a 	ret
    ee50:	8104b03a 	or	r2,r16,r4
    ee54:	10004226 	beq	r2,zero,ef60 <__muldf3+0x2cc>
    ee58:	8000f926 	beq	r16,zero,f240 <__muldf3+0x5ac>
    ee5c:	8009883a 	mov	r4,r16
    ee60:	d9800315 	stw	r6,12(sp)
    ee64:	d9c00015 	stw	r7,0(sp)
    ee68:	000fe840 	call	fe84 <__clzsi2>
    ee6c:	d9800317 	ldw	r6,12(sp)
    ee70:	d9c00017 	ldw	r7,0(sp)
    ee74:	1007883a 	mov	r3,r2
    ee78:	01000a04 	movi	r4,40
    ee7c:	18bffe04 	addi	r2,r3,-8
    ee80:	20c9c83a 	sub	r4,r4,r3
    ee84:	80a0983a 	sll	r16,r16,r2
    ee88:	8908d83a 	srl	r4,r17,r4
    ee8c:	88a4983a 	sll	r18,r17,r2
    ee90:	2420b03a 	or	r16,r4,r16
    ee94:	017f0344 	movi	r5,-1011
    ee98:	28e9c83a 	sub	r20,r5,r3
    ee9c:	002b883a 	mov	r21,zero
    eea0:	0015883a 	mov	r10,zero
    eea4:	003f9b06 	br	ed14 <__alt_mem_Flash_flash_data+0xf400ed14>
    eea8:	8984b03a 	or	r2,r17,r6
    eeac:	10002a1e 	bne	r2,zero,ef58 <__muldf3+0x2c4>
    eeb0:	0023883a 	mov	r17,zero
    eeb4:	002f883a 	mov	r23,zero
    eeb8:	02400084 	movi	r9,2
    eebc:	003fa706 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    eec0:	8984b03a 	or	r2,r17,r6
    eec4:	10002026 	beq	r2,zero,ef48 <__muldf3+0x2b4>
    eec8:	8800cc26 	beq	r17,zero,f1fc <__muldf3+0x568>
    eecc:	8809883a 	mov	r4,r17
    eed0:	d8c00215 	stw	r3,8(sp)
    eed4:	d9800315 	stw	r6,12(sp)
    eed8:	da800015 	stw	r10,0(sp)
    eedc:	dac00115 	stw	r11,4(sp)
    eee0:	000fe840 	call	fe84 <__clzsi2>
    eee4:	d8c00217 	ldw	r3,8(sp)
    eee8:	d9800317 	ldw	r6,12(sp)
    eeec:	da800017 	ldw	r10,0(sp)
    eef0:	dac00117 	ldw	r11,4(sp)
    eef4:	1009883a 	mov	r4,r2
    eef8:	01400a04 	movi	r5,40
    eefc:	25fffe04 	addi	r23,r4,-8
    ef00:	290bc83a 	sub	r5,r5,r4
    ef04:	8dd0983a 	sll	r8,r17,r23
    ef08:	314ad83a 	srl	r5,r6,r5
    ef0c:	35ee983a 	sll	r23,r6,r23
    ef10:	2a22b03a 	or	r17,r5,r8
    ef14:	017f0344 	movi	r5,-1011
    ef18:	290bc83a 	sub	r5,r5,r4
    ef1c:	0013883a 	mov	r9,zero
    ef20:	003f8e06 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    ef24:	008000c4 	movi	r2,3
    ef28:	50811d26 	beq	r10,r2,f3a0 <__muldf3+0x70c>
    ef2c:	00800044 	movi	r2,1
    ef30:	5080e01e 	bne	r10,r2,f2b4 <__muldf3+0x620>
    ef34:	e0a6703a 	and	r19,fp,r2
    ef38:	0009883a 	mov	r4,zero
    ef3c:	0021883a 	mov	r16,zero
    ef40:	0025883a 	mov	r18,zero
    ef44:	003fad06 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    ef48:	0023883a 	mov	r17,zero
    ef4c:	002f883a 	mov	r23,zero
    ef50:	02400044 	movi	r9,1
    ef54:	003f8106 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    ef58:	024000c4 	movi	r9,3
    ef5c:	003f7f06 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    ef60:	05400104 	movi	r21,4
    ef64:	0021883a 	mov	r16,zero
    ef68:	0025883a 	mov	r18,zero
    ef6c:	02800044 	movi	r10,1
    ef70:	003f6806 	br	ed14 <__alt_mem_Flash_flash_data+0xf400ed14>
    ef74:	05400304 	movi	r21,12
    ef78:	028000c4 	movi	r10,3
    ef7c:	003f6506 	br	ed14 <__alt_mem_Flash_flash_data+0xf400ed14>
    ef80:	04000434 	movhi	r16,16
    ef84:	0027883a 	mov	r19,zero
    ef88:	843fffc4 	addi	r16,r16,-1
    ef8c:	04bfffc4 	movi	r18,-1
    ef90:	0101ffc4 	movi	r4,2047
    ef94:	003f9906 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    ef98:	8821883a 	mov	r16,r17
    ef9c:	b825883a 	mov	r18,r23
    efa0:	5839883a 	mov	fp,r11
    efa4:	4815883a 	mov	r10,r9
    efa8:	003f8e06 	br	ede4 <__alt_mem_Flash_flash_data+0xf400ede4>
    efac:	8821883a 	mov	r16,r17
    efb0:	b825883a 	mov	r18,r23
    efb4:	b039883a 	mov	fp,r22
    efb8:	4815883a 	mov	r10,r9
    efbc:	003f8906 	br	ede4 <__alt_mem_Flash_flash_data+0xf400ede4>
    efc0:	b80cd43a 	srli	r6,r23,16
    efc4:	9006d43a 	srli	r3,r18,16
    efc8:	90bfffcc 	andi	r2,r18,65535
    efcc:	bdffffcc 	andi	r23,r23,65535
    efd0:	b891383a 	mul	r8,r23,r2
    efd4:	b8c9383a 	mul	r4,r23,r3
    efd8:	309b383a 	mul	r13,r6,r2
    efdc:	400ed43a 	srli	r7,r8,16
    efe0:	30df383a 	mul	r15,r6,r3
    efe4:	235b883a 	add	r13,r4,r13
    efe8:	69db883a 	add	r13,r13,r7
    efec:	6900022e 	bgeu	r13,r4,eff8 <__muldf3+0x364>
    eff0:	01000074 	movhi	r4,1
    eff4:	791f883a 	add	r15,r15,r4
    eff8:	8828d43a 	srli	r20,r17,16
    effc:	8c7fffcc 	andi	r17,r17,65535
    f000:	888f383a 	mul	r7,r17,r2
    f004:	88d3383a 	mul	r9,r17,r3
    f008:	a0a5383a 	mul	r18,r20,r2
    f00c:	3816d43a 	srli	r11,r7,16
    f010:	6814943a 	slli	r10,r13,16
    f014:	4ca5883a 	add	r18,r9,r18
    f018:	423fffcc 	andi	r8,r8,65535
    f01c:	92e5883a 	add	r18,r18,r11
    f020:	6808d43a 	srli	r4,r13,16
    f024:	5215883a 	add	r10,r10,r8
    f028:	a0c7383a 	mul	r3,r20,r3
    f02c:	9240022e 	bgeu	r18,r9,f038 <__muldf3+0x3a4>
    f030:	00800074 	movhi	r2,1
    f034:	1887883a 	add	r3,r3,r2
    f038:	802ad43a 	srli	r21,r16,16
    f03c:	80bfffcc 	andi	r2,r16,65535
    f040:	b893383a 	mul	r9,r23,r2
    f044:	3091383a 	mul	r8,r6,r2
    f048:	bd6f383a 	mul	r23,r23,r21
    f04c:	9026943a 	slli	r19,r18,16
    f050:	481ad43a 	srli	r13,r9,16
    f054:	9024d43a 	srli	r18,r18,16
    f058:	39ffffcc 	andi	r7,r7,65535
    f05c:	ba11883a 	add	r8,r23,r8
    f060:	99e7883a 	add	r19,r19,r7
    f064:	4351883a 	add	r8,r8,r13
    f068:	1c97883a 	add	r11,r3,r18
    f06c:	354d383a 	mul	r6,r6,r21
    f070:	9925883a 	add	r18,r19,r4
    f074:	45c0022e 	bgeu	r8,r23,f080 <__muldf3+0x3ec>
    f078:	00c00074 	movhi	r3,1
    f07c:	30cd883a 	add	r6,r6,r3
    f080:	8889383a 	mul	r4,r17,r2
    f084:	8d63383a 	mul	r17,r17,r21
    f088:	a085383a 	mul	r2,r20,r2
    f08c:	200ed43a 	srli	r7,r4,16
    f090:	401cd43a 	srli	r14,r8,16
    f094:	401a943a 	slli	r13,r8,16
    f098:	8885883a 	add	r2,r17,r2
    f09c:	4a3fffcc 	andi	r8,r9,65535
    f0a0:	11c5883a 	add	r2,r2,r7
    f0a4:	339d883a 	add	r14,r6,r14
    f0a8:	6a11883a 	add	r8,r13,r8
    f0ac:	a561383a 	mul	r16,r20,r21
    f0b0:	1440022e 	bgeu	r2,r17,f0bc <__muldf3+0x428>
    f0b4:	00c00074 	movhi	r3,1
    f0b8:	80e1883a 	add	r16,r16,r3
    f0bc:	1006943a 	slli	r3,r2,16
    f0c0:	213fffcc 	andi	r4,r4,65535
    f0c4:	93db883a 	add	r13,r18,r15
    f0c8:	1909883a 	add	r4,r3,r4
    f0cc:	22c7883a 	add	r3,r4,r11
    f0d0:	6cd3803a 	cmpltu	r9,r13,r19
    f0d4:	6a09883a 	add	r4,r13,r8
    f0d8:	1a5b883a 	add	r13,r3,r9
    f0dc:	2211803a 	cmpltu	r8,r4,r8
    f0e0:	734d883a 	add	r6,r14,r13
    f0e4:	100ed43a 	srli	r7,r2,16
    f0e8:	6a53803a 	cmpltu	r9,r13,r9
    f0ec:	3205883a 	add	r2,r6,r8
    f0f0:	1ac7803a 	cmpltu	r3,r3,r11
    f0f4:	1211803a 	cmpltu	r8,r2,r8
    f0f8:	48c6b03a 	or	r3,r9,r3
    f0fc:	338d803a 	cmpltu	r6,r6,r14
    f100:	19c7883a 	add	r3,r3,r7
    f104:	418cb03a 	or	r6,r8,r6
    f108:	1987883a 	add	r3,r3,r6
    f10c:	2024927a 	slli	r18,r4,9
    f110:	1c07883a 	add	r3,r3,r16
    f114:	1806927a 	slli	r3,r3,9
    f118:	1020d5fa 	srli	r16,r2,23
    f11c:	2008d5fa 	srli	r4,r4,23
    f120:	9294b03a 	or	r10,r18,r10
    f124:	1004927a 	slli	r2,r2,9
    f128:	5024c03a 	cmpne	r18,r10,zero
    f12c:	1c20b03a 	or	r16,r3,r16
    f130:	9108b03a 	or	r4,r18,r4
    f134:	80c0402c 	andhi	r3,r16,256
    f138:	20a4b03a 	or	r18,r4,r2
    f13c:	18000726 	beq	r3,zero,f15c <__muldf3+0x4c8>
    f140:	9006d07a 	srli	r3,r18,1
    f144:	800897fa 	slli	r4,r16,31
    f148:	9080004c 	andi	r2,r18,1
    f14c:	8020d07a 	srli	r16,r16,1
    f150:	10c4b03a 	or	r2,r2,r3
    f154:	1124b03a 	or	r18,r2,r4
    f158:	600b883a 	mov	r5,r12
    f15c:	2900ffc4 	addi	r4,r5,1023
    f160:	01004b0e 	bge	zero,r4,f290 <__muldf3+0x5fc>
    f164:	908001cc 	andi	r2,r18,7
    f168:	10000726 	beq	r2,zero,f188 <__muldf3+0x4f4>
    f16c:	90c003cc 	andi	r3,r18,15
    f170:	00800104 	movi	r2,4
    f174:	18800426 	beq	r3,r2,f188 <__muldf3+0x4f4>
    f178:	9087883a 	add	r3,r18,r2
    f17c:	1c85803a 	cmpltu	r2,r3,r18
    f180:	80a1883a 	add	r16,r16,r2
    f184:	1825883a 	mov	r18,r3
    f188:	8080402c 	andhi	r2,r16,256
    f18c:	10000426 	beq	r2,zero,f1a0 <__muldf3+0x50c>
    f190:	00bfc034 	movhi	r2,65280
    f194:	10bfffc4 	addi	r2,r2,-1
    f198:	29010004 	addi	r4,r5,1024
    f19c:	80a0703a 	and	r16,r16,r2
    f1a0:	0081ff84 	movi	r2,2046
    f1a4:	1100320e 	bge	r2,r4,f270 <__muldf3+0x5dc>
    f1a8:	b4c0004c 	andi	r19,r22,1
    f1ac:	0101ffc4 	movi	r4,2047
    f1b0:	0021883a 	mov	r16,zero
    f1b4:	0025883a 	mov	r18,zero
    f1b8:	003f1006 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    f1bc:	8080022c 	andhi	r2,r16,8
    f1c0:	10000926 	beq	r2,zero,f1e8 <__muldf3+0x554>
    f1c4:	8880022c 	andhi	r2,r17,8
    f1c8:	1000071e 	bne	r2,zero,f1e8 <__muldf3+0x554>
    f1cc:	00800434 	movhi	r2,16
    f1d0:	8c000234 	orhi	r16,r17,8
    f1d4:	10bfffc4 	addi	r2,r2,-1
    f1d8:	1827883a 	mov	r19,r3
    f1dc:	80a0703a 	and	r16,r16,r2
    f1e0:	b825883a 	mov	r18,r23
    f1e4:	003f6a06 	br	ef90 <__alt_mem_Flash_flash_data+0xf400ef90>
    f1e8:	00800434 	movhi	r2,16
    f1ec:	84000234 	orhi	r16,r16,8
    f1f0:	10bfffc4 	addi	r2,r2,-1
    f1f4:	80a0703a 	and	r16,r16,r2
    f1f8:	003f6506 	br	ef90 <__alt_mem_Flash_flash_data+0xf400ef90>
    f1fc:	3009883a 	mov	r4,r6
    f200:	d8c00215 	stw	r3,8(sp)
    f204:	d9800315 	stw	r6,12(sp)
    f208:	da800015 	stw	r10,0(sp)
    f20c:	dac00115 	stw	r11,4(sp)
    f210:	000fe840 	call	fe84 <__clzsi2>
    f214:	11000804 	addi	r4,r2,32
    f218:	014009c4 	movi	r5,39
    f21c:	d8c00217 	ldw	r3,8(sp)
    f220:	d9800317 	ldw	r6,12(sp)
    f224:	da800017 	ldw	r10,0(sp)
    f228:	dac00117 	ldw	r11,4(sp)
    f22c:	293f320e 	bge	r5,r4,eef8 <__alt_mem_Flash_flash_data+0xf400eef8>
    f230:	10bffe04 	addi	r2,r2,-8
    f234:	b8a2983a 	sll	r17,r23,r2
    f238:	002f883a 	mov	r23,zero
    f23c:	003f3506 	br	ef14 <__alt_mem_Flash_flash_data+0xf400ef14>
    f240:	d9800315 	stw	r6,12(sp)
    f244:	d9c00015 	stw	r7,0(sp)
    f248:	000fe840 	call	fe84 <__clzsi2>
    f24c:	10c00804 	addi	r3,r2,32
    f250:	010009c4 	movi	r4,39
    f254:	d9800317 	ldw	r6,12(sp)
    f258:	d9c00017 	ldw	r7,0(sp)
    f25c:	20ff060e 	bge	r4,r3,ee78 <__alt_mem_Flash_flash_data+0xf400ee78>
    f260:	10bffe04 	addi	r2,r2,-8
    f264:	88a0983a 	sll	r16,r17,r2
    f268:	0025883a 	mov	r18,zero
    f26c:	003f0906 	br	ee94 <__alt_mem_Flash_flash_data+0xf400ee94>
    f270:	9004d0fa 	srli	r2,r18,3
    f274:	8024977a 	slli	r18,r16,29
    f278:	8020927a 	slli	r16,r16,9
    f27c:	2101ffcc 	andi	r4,r4,2047
    f280:	90a4b03a 	or	r18,r18,r2
    f284:	8020d33a 	srli	r16,r16,12
    f288:	b4c0004c 	andi	r19,r22,1
    f28c:	003edb06 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    f290:	00ff0084 	movi	r3,-1022
    f294:	1947c83a 	sub	r3,r3,r5
    f298:	00800e04 	movi	r2,56
    f29c:	10c0080e 	bge	r2,r3,f2c0 <__muldf3+0x62c>
    f2a0:	b4c0004c 	andi	r19,r22,1
    f2a4:	0009883a 	mov	r4,zero
    f2a8:	0021883a 	mov	r16,zero
    f2ac:	0025883a 	mov	r18,zero
    f2b0:	003ed206 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    f2b4:	600b883a 	mov	r5,r12
    f2b8:	e02d883a 	mov	r22,fp
    f2bc:	003fa706 	br	f15c <__alt_mem_Flash_flash_data+0xf400f15c>
    f2c0:	008007c4 	movi	r2,31
    f2c4:	10c01816 	blt	r2,r3,f328 <__muldf3+0x694>
    f2c8:	29410784 	addi	r5,r5,1054
    f2cc:	8144983a 	sll	r2,r16,r5
    f2d0:	90c8d83a 	srl	r4,r18,r3
    f2d4:	914a983a 	sll	r5,r18,r5
    f2d8:	80c6d83a 	srl	r3,r16,r3
    f2dc:	2088b03a 	or	r4,r4,r2
    f2e0:	2804c03a 	cmpne	r2,r5,zero
    f2e4:	2084b03a 	or	r2,r4,r2
    f2e8:	110001cc 	andi	r4,r2,7
    f2ec:	20000726 	beq	r4,zero,f30c <__muldf3+0x678>
    f2f0:	114003cc 	andi	r5,r2,15
    f2f4:	01000104 	movi	r4,4
    f2f8:	29000426 	beq	r5,r4,f30c <__muldf3+0x678>
    f2fc:	11000104 	addi	r4,r2,4
    f300:	2085803a 	cmpltu	r2,r4,r2
    f304:	1887883a 	add	r3,r3,r2
    f308:	2005883a 	mov	r2,r4
    f30c:	1900202c 	andhi	r4,r3,128
    f310:	20001826 	beq	r4,zero,f374 <__muldf3+0x6e0>
    f314:	b4c0004c 	andi	r19,r22,1
    f318:	01000044 	movi	r4,1
    f31c:	0021883a 	mov	r16,zero
    f320:	0025883a 	mov	r18,zero
    f324:	003eb506 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    f328:	00bef884 	movi	r2,-1054
    f32c:	1145c83a 	sub	r2,r2,r5
    f330:	8088d83a 	srl	r4,r16,r2
    f334:	00800804 	movi	r2,32
    f338:	18801726 	beq	r3,r2,f398 <__muldf3+0x704>
    f33c:	28810f84 	addi	r2,r5,1086
    f340:	8084983a 	sll	r2,r16,r2
    f344:	1484b03a 	or	r2,r2,r18
    f348:	1004c03a 	cmpne	r2,r2,zero
    f34c:	1104b03a 	or	r2,r2,r4
    f350:	10c001cc 	andi	r3,r2,7
    f354:	18000b1e 	bne	r3,zero,f384 <__muldf3+0x6f0>
    f358:	0021883a 	mov	r16,zero
    f35c:	1004d0fa 	srli	r2,r2,3
    f360:	b4c0004c 	andi	r19,r22,1
    f364:	0009883a 	mov	r4,zero
    f368:	10e4b03a 	or	r18,r2,r3
    f36c:	003ea306 	br	edfc <__alt_mem_Flash_flash_data+0xf400edfc>
    f370:	0007883a 	mov	r3,zero
    f374:	1820927a 	slli	r16,r3,9
    f378:	1806977a 	slli	r3,r3,29
    f37c:	8020d33a 	srli	r16,r16,12
    f380:	003ff606 	br	f35c <__alt_mem_Flash_flash_data+0xf400f35c>
    f384:	110003cc 	andi	r4,r2,15
    f388:	00c00104 	movi	r3,4
    f38c:	20fff826 	beq	r4,r3,f370 <__alt_mem_Flash_flash_data+0xf400f370>
    f390:	0007883a 	mov	r3,zero
    f394:	003fd906 	br	f2fc <__alt_mem_Flash_flash_data+0xf400f2fc>
    f398:	0005883a 	mov	r2,zero
    f39c:	003fe906 	br	f344 <__alt_mem_Flash_flash_data+0xf400f344>
    f3a0:	00800434 	movhi	r2,16
    f3a4:	84000234 	orhi	r16,r16,8
    f3a8:	10bfffc4 	addi	r2,r2,-1
    f3ac:	e4c0004c 	andi	r19,fp,1
    f3b0:	80a0703a 	and	r16,r16,r2
    f3b4:	003ef606 	br	ef90 <__alt_mem_Flash_flash_data+0xf400ef90>

0000f3b8 <__subdf3>:
    f3b8:	00c00434 	movhi	r3,16
    f3bc:	18ffffc4 	addi	r3,r3,-1
    f3c0:	defffb04 	addi	sp,sp,-20
    f3c4:	28d2703a 	and	r9,r5,r3
    f3c8:	3814d53a 	srli	r10,r7,20
    f3cc:	38c6703a 	and	r3,r7,r3
    f3d0:	3004d77a 	srli	r2,r6,29
    f3d4:	dc800215 	stw	r18,8(sp)
    f3d8:	dc000015 	stw	r16,0(sp)
    f3dc:	2824d7fa 	srli	r18,r5,31
    f3e0:	2820d53a 	srli	r16,r5,20
    f3e4:	481290fa 	slli	r9,r9,3
    f3e8:	200ad77a 	srli	r5,r4,29
    f3ec:	180690fa 	slli	r3,r3,3
    f3f0:	dc400115 	stw	r17,4(sp)
    f3f4:	dfc00415 	stw	ra,16(sp)
    f3f8:	202290fa 	slli	r17,r4,3
    f3fc:	dcc00315 	stw	r19,12(sp)
    f400:	5281ffcc 	andi	r10,r10,2047
    f404:	0101ffc4 	movi	r4,2047
    f408:	9011883a 	mov	r8,r18
    f40c:	8401ffcc 	andi	r16,r16,2047
    f410:	94803fcc 	andi	r18,r18,255
    f414:	494ab03a 	or	r5,r9,r5
    f418:	380ed7fa 	srli	r7,r7,31
    f41c:	1886b03a 	or	r3,r3,r2
    f420:	300c90fa 	slli	r6,r6,3
    f424:	51009026 	beq	r10,r4,f668 <__subdf3+0x2b0>
    f428:	39c0005c 	xori	r7,r7,1
    f42c:	8285c83a 	sub	r2,r16,r10
    f430:	91c06f26 	beq	r18,r7,f5f0 <__subdf3+0x238>
    f434:	0080b10e 	bge	zero,r2,f6fc <__subdf3+0x344>
    f438:	50002a1e 	bne	r10,zero,f4e4 <__subdf3+0x12c>
    f43c:	1988b03a 	or	r4,r3,r6
    f440:	2000941e 	bne	r4,zero,f694 <__subdf3+0x2dc>
    f444:	888001cc 	andi	r2,r17,7
    f448:	10005b26 	beq	r2,zero,f5b8 <__subdf3+0x200>
    f44c:	88c003cc 	andi	r3,r17,15
    f450:	00800104 	movi	r2,4
    f454:	18805826 	beq	r3,r2,f5b8 <__subdf3+0x200>
    f458:	88c00104 	addi	r3,r17,4
    f45c:	1c63803a 	cmpltu	r17,r3,r17
    f460:	2c4b883a 	add	r5,r5,r17
    f464:	2880202c 	andhi	r2,r5,128
    f468:	9200004c 	andi	r8,r18,1
    f46c:	1823883a 	mov	r17,r3
    f470:	10005426 	beq	r2,zero,f5c4 <__subdf3+0x20c>
    f474:	84000044 	addi	r16,r16,1
    f478:	0081ffc4 	movi	r2,2047
    f47c:	8080bf26 	beq	r16,r2,f77c <__subdf3+0x3c4>
    f480:	013fe034 	movhi	r4,65408
    f484:	213fffc4 	addi	r4,r4,-1
    f488:	290a703a 	and	r5,r5,r4
    f48c:	2804977a 	slli	r2,r5,29
    f490:	280a927a 	slli	r5,r5,9
    f494:	8822d0fa 	srli	r17,r17,3
    f498:	8401ffcc 	andi	r16,r16,2047
    f49c:	2808d33a 	srli	r4,r5,12
    f4a0:	1444b03a 	or	r2,r2,r17
    f4a4:	8401ffcc 	andi	r16,r16,2047
    f4a8:	800a953a 	slli	r5,r16,20
    f4ac:	40c03fcc 	andi	r3,r8,255
    f4b0:	04000434 	movhi	r16,16
    f4b4:	180697fa 	slli	r3,r3,31
    f4b8:	843fffc4 	addi	r16,r16,-1
    f4bc:	2420703a 	and	r16,r4,r16
    f4c0:	8160b03a 	or	r16,r16,r5
    f4c4:	80c6b03a 	or	r3,r16,r3
    f4c8:	dfc00417 	ldw	ra,16(sp)
    f4cc:	dcc00317 	ldw	r19,12(sp)
    f4d0:	dc800217 	ldw	r18,8(sp)
    f4d4:	dc400117 	ldw	r17,4(sp)
    f4d8:	dc000017 	ldw	r16,0(sp)
    f4dc:	dec00504 	addi	sp,sp,20
    f4e0:	f800283a 	ret
    f4e4:	0101ffc4 	movi	r4,2047
    f4e8:	813fd626 	beq	r16,r4,f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f4ec:	18c02034 	orhi	r3,r3,128
    f4f0:	01000e04 	movi	r4,56
    f4f4:	2080a416 	blt	r4,r2,f788 <__subdf3+0x3d0>
    f4f8:	010007c4 	movi	r4,31
    f4fc:	2080c716 	blt	r4,r2,f81c <__subdf3+0x464>
    f500:	01000804 	movi	r4,32
    f504:	2089c83a 	sub	r4,r4,r2
    f508:	1910983a 	sll	r8,r3,r4
    f50c:	308ed83a 	srl	r7,r6,r2
    f510:	3108983a 	sll	r4,r6,r4
    f514:	1884d83a 	srl	r2,r3,r2
    f518:	41ccb03a 	or	r6,r8,r7
    f51c:	2008c03a 	cmpne	r4,r4,zero
    f520:	310cb03a 	or	r6,r6,r4
    f524:	898dc83a 	sub	r6,r17,r6
    f528:	89a3803a 	cmpltu	r17,r17,r6
    f52c:	288bc83a 	sub	r5,r5,r2
    f530:	2c4bc83a 	sub	r5,r5,r17
    f534:	3023883a 	mov	r17,r6
    f538:	2880202c 	andhi	r2,r5,128
    f53c:	10006b26 	beq	r2,zero,f6ec <__subdf3+0x334>
    f540:	04c02034 	movhi	r19,128
    f544:	9cffffc4 	addi	r19,r19,-1
    f548:	2ce6703a 	and	r19,r5,r19
    f54c:	98007c26 	beq	r19,zero,f740 <__subdf3+0x388>
    f550:	9809883a 	mov	r4,r19
    f554:	000fe840 	call	fe84 <__clzsi2>
    f558:	10fffe04 	addi	r3,r2,-8
    f55c:	010007c4 	movi	r4,31
    f560:	20c07d16 	blt	r4,r3,f758 <__subdf3+0x3a0>
    f564:	01400a04 	movi	r5,40
    f568:	2885c83a 	sub	r2,r5,r2
    f56c:	888ad83a 	srl	r5,r17,r2
    f570:	98e6983a 	sll	r19,r19,r3
    f574:	88e2983a 	sll	r17,r17,r3
    f578:	2ce6b03a 	or	r19,r5,r19
    f57c:	1c007a16 	blt	r3,r16,f768 <__subdf3+0x3b0>
    f580:	1c21c83a 	sub	r16,r3,r16
    f584:	81400044 	addi	r5,r16,1
    f588:	00c007c4 	movi	r3,31
    f58c:	19409616 	blt	r3,r5,f7e8 <__subdf3+0x430>
    f590:	1c21c83a 	sub	r16,r3,r16
    f594:	8c08983a 	sll	r4,r17,r16
    f598:	8946d83a 	srl	r3,r17,r5
    f59c:	9c20983a 	sll	r16,r19,r16
    f5a0:	2008c03a 	cmpne	r4,r4,zero
    f5a4:	994ad83a 	srl	r5,r19,r5
    f5a8:	1c06b03a 	or	r3,r3,r16
    f5ac:	1922b03a 	or	r17,r3,r4
    f5b0:	0021883a 	mov	r16,zero
    f5b4:	003fa306 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f5b8:	2880202c 	andhi	r2,r5,128
    f5bc:	9200004c 	andi	r8,r18,1
    f5c0:	103fac1e 	bne	r2,zero,f474 <__alt_mem_Flash_flash_data+0xf400f474>
    f5c4:	2804977a 	slli	r2,r5,29
    f5c8:	8822d0fa 	srli	r17,r17,3
    f5cc:	00c1ffc4 	movi	r3,2047
    f5d0:	280ad0fa 	srli	r5,r5,3
    f5d4:	1444b03a 	or	r2,r2,r17
    f5d8:	80c02726 	beq	r16,r3,f678 <__subdf3+0x2c0>
    f5dc:	01000434 	movhi	r4,16
    f5e0:	213fffc4 	addi	r4,r4,-1
    f5e4:	80e0703a 	and	r16,r16,r3
    f5e8:	2908703a 	and	r4,r5,r4
    f5ec:	003fad06 	br	f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f5f0:	0080690e 	bge	zero,r2,f798 <__subdf3+0x3e0>
    f5f4:	50002f26 	beq	r10,zero,f6b4 <__subdf3+0x2fc>
    f5f8:	0101ffc4 	movi	r4,2047
    f5fc:	813f9126 	beq	r16,r4,f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f600:	18c02034 	orhi	r3,r3,128
    f604:	01000e04 	movi	r4,56
    f608:	2080b00e 	bge	r4,r2,f8cc <__subdf3+0x514>
    f60c:	198cb03a 	or	r6,r3,r6
    f610:	300ec03a 	cmpne	r7,r6,zero
    f614:	0005883a 	mov	r2,zero
    f618:	3c4f883a 	add	r7,r7,r17
    f61c:	3c63803a 	cmpltu	r17,r7,r17
    f620:	114b883a 	add	r5,r2,r5
    f624:	2c4b883a 	add	r5,r5,r17
    f628:	3823883a 	mov	r17,r7
    f62c:	2880202c 	andhi	r2,r5,128
    f630:	10002e26 	beq	r2,zero,f6ec <__subdf3+0x334>
    f634:	84000044 	addi	r16,r16,1
    f638:	0081ffc4 	movi	r2,2047
    f63c:	8080de26 	beq	r16,r2,f9b8 <__subdf3+0x600>
    f640:	00bfe034 	movhi	r2,65408
    f644:	10bfffc4 	addi	r2,r2,-1
    f648:	288a703a 	and	r5,r5,r2
    f64c:	880cd07a 	srli	r6,r17,1
    f650:	280897fa 	slli	r4,r5,31
    f654:	88c0004c 	andi	r3,r17,1
    f658:	30e2b03a 	or	r17,r6,r3
    f65c:	280ad07a 	srli	r5,r5,1
    f660:	8922b03a 	or	r17,r17,r4
    f664:	003f7706 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f668:	1984b03a 	or	r2,r3,r6
    f66c:	103f6e26 	beq	r2,zero,f428 <__alt_mem_Flash_flash_data+0xf400f428>
    f670:	39c03fcc 	andi	r7,r7,255
    f674:	003f6d06 	br	f42c <__alt_mem_Flash_flash_data+0xf400f42c>
    f678:	1146b03a 	or	r3,r2,r5
    f67c:	18003f26 	beq	r3,zero,f77c <__subdf3+0x3c4>
    f680:	00c00434 	movhi	r3,16
    f684:	29000234 	orhi	r4,r5,8
    f688:	18ffffc4 	addi	r3,r3,-1
    f68c:	20c8703a 	and	r4,r4,r3
    f690:	003f8406 	br	f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f694:	10bfffc4 	addi	r2,r2,-1
    f698:	1000501e 	bne	r2,zero,f7dc <__subdf3+0x424>
    f69c:	898fc83a 	sub	r7,r17,r6
    f6a0:	89e3803a 	cmpltu	r17,r17,r7
    f6a4:	28cbc83a 	sub	r5,r5,r3
    f6a8:	2c4bc83a 	sub	r5,r5,r17
    f6ac:	3823883a 	mov	r17,r7
    f6b0:	003fa106 	br	f538 <__alt_mem_Flash_flash_data+0xf400f538>
    f6b4:	1988b03a 	or	r4,r3,r6
    f6b8:	203f6226 	beq	r4,zero,f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f6bc:	10bfffc4 	addi	r2,r2,-1
    f6c0:	10009b1e 	bne	r2,zero,f930 <__subdf3+0x578>
    f6c4:	344d883a 	add	r6,r6,r17
    f6c8:	3463803a 	cmpltu	r17,r6,r17
    f6cc:	194b883a 	add	r5,r3,r5
    f6d0:	2c4b883a 	add	r5,r5,r17
    f6d4:	3023883a 	mov	r17,r6
    f6d8:	003fd406 	br	f62c <__alt_mem_Flash_flash_data+0xf400f62c>
    f6dc:	1106b03a 	or	r3,r2,r4
    f6e0:	1800b426 	beq	r3,zero,f9b4 <__subdf3+0x5fc>
    f6e4:	100b883a 	mov	r5,r2
    f6e8:	2023883a 	mov	r17,r4
    f6ec:	888001cc 	andi	r2,r17,7
    f6f0:	103f561e 	bne	r2,zero,f44c <__alt_mem_Flash_flash_data+0xf400f44c>
    f6f4:	9200004c 	andi	r8,r18,1
    f6f8:	003fb206 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f6fc:	1000531e 	bne	r2,zero,f84c <__subdf3+0x494>
    f700:	80800044 	addi	r2,r16,1
    f704:	1081ffcc 	andi	r2,r2,2047
    f708:	01000044 	movi	r4,1
    f70c:	2080a00e 	bge	r4,r2,f990 <__subdf3+0x5d8>
    f710:	8985c83a 	sub	r2,r17,r6
    f714:	8889803a 	cmpltu	r4,r17,r2
    f718:	28e7c83a 	sub	r19,r5,r3
    f71c:	9927c83a 	sub	r19,r19,r4
    f720:	9900202c 	andhi	r4,r19,128
    f724:	20006226 	beq	r4,zero,f8b0 <__subdf3+0x4f8>
    f728:	3463c83a 	sub	r17,r6,r17
    f72c:	194bc83a 	sub	r5,r3,r5
    f730:	344d803a 	cmpltu	r6,r6,r17
    f734:	29a7c83a 	sub	r19,r5,r6
    f738:	3825883a 	mov	r18,r7
    f73c:	983f841e 	bne	r19,zero,f550 <__alt_mem_Flash_flash_data+0xf400f550>
    f740:	8809883a 	mov	r4,r17
    f744:	000fe840 	call	fe84 <__clzsi2>
    f748:	10800804 	addi	r2,r2,32
    f74c:	10fffe04 	addi	r3,r2,-8
    f750:	010007c4 	movi	r4,31
    f754:	20ff830e 	bge	r4,r3,f564 <__alt_mem_Flash_flash_data+0xf400f564>
    f758:	14fff604 	addi	r19,r2,-40
    f75c:	8ce6983a 	sll	r19,r17,r19
    f760:	0023883a 	mov	r17,zero
    f764:	1c3f860e 	bge	r3,r16,f580 <__alt_mem_Flash_flash_data+0xf400f580>
    f768:	017fe034 	movhi	r5,65408
    f76c:	297fffc4 	addi	r5,r5,-1
    f770:	80e1c83a 	sub	r16,r16,r3
    f774:	994a703a 	and	r5,r19,r5
    f778:	003f3206 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f77c:	0009883a 	mov	r4,zero
    f780:	0005883a 	mov	r2,zero
    f784:	003f4706 	br	f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f788:	198cb03a 	or	r6,r3,r6
    f78c:	300cc03a 	cmpne	r6,r6,zero
    f790:	0005883a 	mov	r2,zero
    f794:	003f6306 	br	f524 <__alt_mem_Flash_flash_data+0xf400f524>
    f798:	10009d1e 	bne	r2,zero,fa10 <__subdf3+0x658>
    f79c:	81c00044 	addi	r7,r16,1
    f7a0:	3881ffcc 	andi	r2,r7,2047
    f7a4:	02400044 	movi	r9,1
    f7a8:	4880680e 	bge	r9,r2,f94c <__subdf3+0x594>
    f7ac:	0081ffc4 	movi	r2,2047
    f7b0:	3880ae26 	beq	r7,r2,fa6c <__subdf3+0x6b4>
    f7b4:	344d883a 	add	r6,r6,r17
    f7b8:	3463803a 	cmpltu	r17,r6,r17
    f7bc:	194b883a 	add	r5,r3,r5
    f7c0:	2c4b883a 	add	r5,r5,r17
    f7c4:	282297fa 	slli	r17,r5,31
    f7c8:	300cd07a 	srli	r6,r6,1
    f7cc:	280ad07a 	srli	r5,r5,1
    f7d0:	3821883a 	mov	r16,r7
    f7d4:	89a2b03a 	or	r17,r17,r6
    f7d8:	003f1a06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f7dc:	0101ffc4 	movi	r4,2047
    f7e0:	813f431e 	bne	r16,r4,f4f0 <__alt_mem_Flash_flash_data+0xf400f4f0>
    f7e4:	003f1706 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f7e8:	80bff844 	addi	r2,r16,-31
    f7ec:	00c00804 	movi	r3,32
    f7f0:	9884d83a 	srl	r2,r19,r2
    f7f4:	28c05126 	beq	r5,r3,f93c <__subdf3+0x584>
    f7f8:	00c00fc4 	movi	r3,63
    f7fc:	1c21c83a 	sub	r16,r3,r16
    f800:	9c26983a 	sll	r19,r19,r16
    f804:	9c62b03a 	or	r17,r19,r17
    f808:	8822c03a 	cmpne	r17,r17,zero
    f80c:	88a2b03a 	or	r17,r17,r2
    f810:	000b883a 	mov	r5,zero
    f814:	0021883a 	mov	r16,zero
    f818:	003fb406 	br	f6ec <__alt_mem_Flash_flash_data+0xf400f6ec>
    f81c:	113ff804 	addi	r4,r2,-32
    f820:	01c00804 	movi	r7,32
    f824:	1908d83a 	srl	r4,r3,r4
    f828:	11c04626 	beq	r2,r7,f944 <__subdf3+0x58c>
    f82c:	01c01004 	movi	r7,64
    f830:	3885c83a 	sub	r2,r7,r2
    f834:	1884983a 	sll	r2,r3,r2
    f838:	118cb03a 	or	r6,r2,r6
    f83c:	300cc03a 	cmpne	r6,r6,zero
    f840:	310cb03a 	or	r6,r6,r4
    f844:	0005883a 	mov	r2,zero
    f848:	003f3606 	br	f524 <__alt_mem_Flash_flash_data+0xf400f524>
    f84c:	80002b26 	beq	r16,zero,f8fc <__subdf3+0x544>
    f850:	0101ffc4 	movi	r4,2047
    f854:	51006926 	beq	r10,r4,f9fc <__subdf3+0x644>
    f858:	0085c83a 	sub	r2,zero,r2
    f85c:	29402034 	orhi	r5,r5,128
    f860:	01000e04 	movi	r4,56
    f864:	20807d16 	blt	r4,r2,fa5c <__subdf3+0x6a4>
    f868:	010007c4 	movi	r4,31
    f86c:	2080d916 	blt	r4,r2,fbd4 <__subdf3+0x81c>
    f870:	01000804 	movi	r4,32
    f874:	2089c83a 	sub	r4,r4,r2
    f878:	2912983a 	sll	r9,r5,r4
    f87c:	8890d83a 	srl	r8,r17,r2
    f880:	8908983a 	sll	r4,r17,r4
    f884:	2884d83a 	srl	r2,r5,r2
    f888:	4a22b03a 	or	r17,r9,r8
    f88c:	2008c03a 	cmpne	r4,r4,zero
    f890:	8922b03a 	or	r17,r17,r4
    f894:	3463c83a 	sub	r17,r6,r17
    f898:	1885c83a 	sub	r2,r3,r2
    f89c:	344d803a 	cmpltu	r6,r6,r17
    f8a0:	118bc83a 	sub	r5,r2,r6
    f8a4:	5021883a 	mov	r16,r10
    f8a8:	3825883a 	mov	r18,r7
    f8ac:	003f2206 	br	f538 <__alt_mem_Flash_flash_data+0xf400f538>
    f8b0:	9886b03a 	or	r3,r19,r2
    f8b4:	18001c1e 	bne	r3,zero,f928 <__subdf3+0x570>
    f8b8:	0011883a 	mov	r8,zero
    f8bc:	000b883a 	mov	r5,zero
    f8c0:	0023883a 	mov	r17,zero
    f8c4:	0021883a 	mov	r16,zero
    f8c8:	003f3e06 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f8cc:	010007c4 	movi	r4,31
    f8d0:	20803c16 	blt	r4,r2,f9c4 <__subdf3+0x60c>
    f8d4:	01000804 	movi	r4,32
    f8d8:	2089c83a 	sub	r4,r4,r2
    f8dc:	1912983a 	sll	r9,r3,r4
    f8e0:	308ed83a 	srl	r7,r6,r2
    f8e4:	3108983a 	sll	r4,r6,r4
    f8e8:	1884d83a 	srl	r2,r3,r2
    f8ec:	49ceb03a 	or	r7,r9,r7
    f8f0:	2008c03a 	cmpne	r4,r4,zero
    f8f4:	390eb03a 	or	r7,r7,r4
    f8f8:	003f4706 	br	f618 <__alt_mem_Flash_flash_data+0xf400f618>
    f8fc:	2c48b03a 	or	r4,r5,r17
    f900:	20003e26 	beq	r4,zero,f9fc <__subdf3+0x644>
    f904:	0084303a 	nor	r2,zero,r2
    f908:	10003a1e 	bne	r2,zero,f9f4 <__subdf3+0x63c>
    f90c:	3463c83a 	sub	r17,r6,r17
    f910:	194bc83a 	sub	r5,r3,r5
    f914:	344d803a 	cmpltu	r6,r6,r17
    f918:	298bc83a 	sub	r5,r5,r6
    f91c:	5021883a 	mov	r16,r10
    f920:	3825883a 	mov	r18,r7
    f924:	003f0406 	br	f538 <__alt_mem_Flash_flash_data+0xf400f538>
    f928:	1023883a 	mov	r17,r2
    f92c:	003f0706 	br	f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f930:	0101ffc4 	movi	r4,2047
    f934:	813f331e 	bne	r16,r4,f604 <__alt_mem_Flash_flash_data+0xf400f604>
    f938:	003ec206 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f93c:	0027883a 	mov	r19,zero
    f940:	003fb006 	br	f804 <__alt_mem_Flash_flash_data+0xf400f804>
    f944:	0005883a 	mov	r2,zero
    f948:	003fbb06 	br	f838 <__alt_mem_Flash_flash_data+0xf400f838>
    f94c:	2c44b03a 	or	r2,r5,r17
    f950:	80008b1e 	bne	r16,zero,fb80 <__subdf3+0x7c8>
    f954:	1000b526 	beq	r2,zero,fc2c <__subdf3+0x874>
    f958:	1984b03a 	or	r2,r3,r6
    f95c:	103eb926 	beq	r2,zero,f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f960:	3449883a 	add	r4,r6,r17
    f964:	2463803a 	cmpltu	r17,r4,r17
    f968:	194b883a 	add	r5,r3,r5
    f96c:	2c4b883a 	add	r5,r5,r17
    f970:	2880202c 	andhi	r2,r5,128
    f974:	2023883a 	mov	r17,r4
    f978:	103f5c26 	beq	r2,zero,f6ec <__alt_mem_Flash_flash_data+0xf400f6ec>
    f97c:	00bfe034 	movhi	r2,65408
    f980:	10bfffc4 	addi	r2,r2,-1
    f984:	4821883a 	mov	r16,r9
    f988:	288a703a 	and	r5,r5,r2
    f98c:	003ead06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f990:	2c44b03a 	or	r2,r5,r17
    f994:	8000291e 	bne	r16,zero,fa3c <__subdf3+0x684>
    f998:	10004f1e 	bne	r2,zero,fad8 <__subdf3+0x720>
    f99c:	1984b03a 	or	r2,r3,r6
    f9a0:	10000426 	beq	r2,zero,f9b4 <__subdf3+0x5fc>
    f9a4:	180b883a 	mov	r5,r3
    f9a8:	3023883a 	mov	r17,r6
    f9ac:	3825883a 	mov	r18,r7
    f9b0:	003ea406 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    f9b4:	0011883a 	mov	r8,zero
    f9b8:	000b883a 	mov	r5,zero
    f9bc:	0023883a 	mov	r17,zero
    f9c0:	003f0006 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f9c4:	11fff804 	addi	r7,r2,-32
    f9c8:	19c8d83a 	srl	r4,r3,r7
    f9cc:	01c00804 	movi	r7,32
    f9d0:	11c07e26 	beq	r2,r7,fbcc <__subdf3+0x814>
    f9d4:	01c01004 	movi	r7,64
    f9d8:	3885c83a 	sub	r2,r7,r2
    f9dc:	1884983a 	sll	r2,r3,r2
    f9e0:	118cb03a 	or	r6,r2,r6
    f9e4:	300ec03a 	cmpne	r7,r6,zero
    f9e8:	390eb03a 	or	r7,r7,r4
    f9ec:	0005883a 	mov	r2,zero
    f9f0:	003f0906 	br	f618 <__alt_mem_Flash_flash_data+0xf400f618>
    f9f4:	0101ffc4 	movi	r4,2047
    f9f8:	513f991e 	bne	r10,r4,f860 <__alt_mem_Flash_flash_data+0xf400f860>
    f9fc:	180b883a 	mov	r5,r3
    fa00:	3023883a 	mov	r17,r6
    fa04:	5021883a 	mov	r16,r10
    fa08:	3825883a 	mov	r18,r7
    fa0c:	003e8d06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fa10:	80001a1e 	bne	r16,zero,fa7c <__subdf3+0x6c4>
    fa14:	2c48b03a 	or	r4,r5,r17
    fa18:	20005526 	beq	r4,zero,fb70 <__subdf3+0x7b8>
    fa1c:	0084303a 	nor	r2,zero,r2
    fa20:	1000511e 	bne	r2,zero,fb68 <__subdf3+0x7b0>
    fa24:	89a3883a 	add	r17,r17,r6
    fa28:	194b883a 	add	r5,r3,r5
    fa2c:	898d803a 	cmpltu	r6,r17,r6
    fa30:	298b883a 	add	r5,r5,r6
    fa34:	5021883a 	mov	r16,r10
    fa38:	003efc06 	br	f62c <__alt_mem_Flash_flash_data+0xf400f62c>
    fa3c:	1000341e 	bne	r2,zero,fb10 <__subdf3+0x758>
    fa40:	1984b03a 	or	r2,r3,r6
    fa44:	10006f26 	beq	r2,zero,fc04 <__subdf3+0x84c>
    fa48:	180b883a 	mov	r5,r3
    fa4c:	3023883a 	mov	r17,r6
    fa50:	3825883a 	mov	r18,r7
    fa54:	0401ffc4 	movi	r16,2047
    fa58:	003e7a06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fa5c:	2c62b03a 	or	r17,r5,r17
    fa60:	8822c03a 	cmpne	r17,r17,zero
    fa64:	0005883a 	mov	r2,zero
    fa68:	003f8a06 	br	f894 <__alt_mem_Flash_flash_data+0xf400f894>
    fa6c:	3821883a 	mov	r16,r7
    fa70:	000b883a 	mov	r5,zero
    fa74:	0023883a 	mov	r17,zero
    fa78:	003ed206 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    fa7c:	0101ffc4 	movi	r4,2047
    fa80:	51003b26 	beq	r10,r4,fb70 <__subdf3+0x7b8>
    fa84:	0085c83a 	sub	r2,zero,r2
    fa88:	29402034 	orhi	r5,r5,128
    fa8c:	01000e04 	movi	r4,56
    fa90:	20806216 	blt	r4,r2,fc1c <__subdf3+0x864>
    fa94:	010007c4 	movi	r4,31
    fa98:	20806b16 	blt	r4,r2,fc48 <__subdf3+0x890>
    fa9c:	01000804 	movi	r4,32
    faa0:	2089c83a 	sub	r4,r4,r2
    faa4:	2912983a 	sll	r9,r5,r4
    faa8:	888ed83a 	srl	r7,r17,r2
    faac:	8908983a 	sll	r4,r17,r4
    fab0:	2884d83a 	srl	r2,r5,r2
    fab4:	49e2b03a 	or	r17,r9,r7
    fab8:	2008c03a 	cmpne	r4,r4,zero
    fabc:	8922b03a 	or	r17,r17,r4
    fac0:	89a3883a 	add	r17,r17,r6
    fac4:	10c5883a 	add	r2,r2,r3
    fac8:	898d803a 	cmpltu	r6,r17,r6
    facc:	118b883a 	add	r5,r2,r6
    fad0:	5021883a 	mov	r16,r10
    fad4:	003ed506 	br	f62c <__alt_mem_Flash_flash_data+0xf400f62c>
    fad8:	1984b03a 	or	r2,r3,r6
    fadc:	103e5926 	beq	r2,zero,f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fae0:	8989c83a 	sub	r4,r17,r6
    fae4:	8911803a 	cmpltu	r8,r17,r4
    fae8:	28c5c83a 	sub	r2,r5,r3
    faec:	1205c83a 	sub	r2,r2,r8
    faf0:	1200202c 	andhi	r8,r2,128
    faf4:	403ef926 	beq	r8,zero,f6dc <__alt_mem_Flash_flash_data+0xf400f6dc>
    faf8:	3463c83a 	sub	r17,r6,r17
    fafc:	194bc83a 	sub	r5,r3,r5
    fb00:	344d803a 	cmpltu	r6,r6,r17
    fb04:	298bc83a 	sub	r5,r5,r6
    fb08:	3825883a 	mov	r18,r7
    fb0c:	003e4d06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fb10:	1984b03a 	or	r2,r3,r6
    fb14:	10002b26 	beq	r2,zero,fbc4 <__subdf3+0x80c>
    fb18:	2808d0fa 	srli	r4,r5,3
    fb1c:	8822d0fa 	srli	r17,r17,3
    fb20:	280a977a 	slli	r5,r5,29
    fb24:	2080022c 	andhi	r2,r4,8
    fb28:	2c62b03a 	or	r17,r5,r17
    fb2c:	10000826 	beq	r2,zero,fb50 <__subdf3+0x798>
    fb30:	1810d0fa 	srli	r8,r3,3
    fb34:	4080022c 	andhi	r2,r8,8
    fb38:	1000051e 	bne	r2,zero,fb50 <__subdf3+0x798>
    fb3c:	300cd0fa 	srli	r6,r6,3
    fb40:	1804977a 	slli	r2,r3,29
    fb44:	4009883a 	mov	r4,r8
    fb48:	3825883a 	mov	r18,r7
    fb4c:	11a2b03a 	or	r17,r2,r6
    fb50:	880ad77a 	srli	r5,r17,29
    fb54:	200890fa 	slli	r4,r4,3
    fb58:	882290fa 	slli	r17,r17,3
    fb5c:	0401ffc4 	movi	r16,2047
    fb60:	290ab03a 	or	r5,r5,r4
    fb64:	003e3706 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fb68:	0101ffc4 	movi	r4,2047
    fb6c:	513fc71e 	bne	r10,r4,fa8c <__alt_mem_Flash_flash_data+0xf400fa8c>
    fb70:	180b883a 	mov	r5,r3
    fb74:	3023883a 	mov	r17,r6
    fb78:	5021883a 	mov	r16,r10
    fb7c:	003e3106 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fb80:	10002d26 	beq	r2,zero,fc38 <__subdf3+0x880>
    fb84:	1984b03a 	or	r2,r3,r6
    fb88:	10000e26 	beq	r2,zero,fbc4 <__subdf3+0x80c>
    fb8c:	2808d0fa 	srli	r4,r5,3
    fb90:	8822d0fa 	srli	r17,r17,3
    fb94:	280a977a 	slli	r5,r5,29
    fb98:	2080022c 	andhi	r2,r4,8
    fb9c:	2c62b03a 	or	r17,r5,r17
    fba0:	103feb26 	beq	r2,zero,fb50 <__alt_mem_Flash_flash_data+0xf400fb50>
    fba4:	180ed0fa 	srli	r7,r3,3
    fba8:	3880022c 	andhi	r2,r7,8
    fbac:	103fe81e 	bne	r2,zero,fb50 <__alt_mem_Flash_flash_data+0xf400fb50>
    fbb0:	300cd0fa 	srli	r6,r6,3
    fbb4:	1804977a 	slli	r2,r3,29
    fbb8:	3809883a 	mov	r4,r7
    fbbc:	11a2b03a 	or	r17,r2,r6
    fbc0:	003fe306 	br	fb50 <__alt_mem_Flash_flash_data+0xf400fb50>
    fbc4:	0401ffc4 	movi	r16,2047
    fbc8:	003e1e06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fbcc:	0005883a 	mov	r2,zero
    fbd0:	003f8306 	br	f9e0 <__alt_mem_Flash_flash_data+0xf400f9e0>
    fbd4:	113ff804 	addi	r4,r2,-32
    fbd8:	02000804 	movi	r8,32
    fbdc:	2908d83a 	srl	r4,r5,r4
    fbe0:	12002526 	beq	r2,r8,fc78 <__subdf3+0x8c0>
    fbe4:	02001004 	movi	r8,64
    fbe8:	4085c83a 	sub	r2,r8,r2
    fbec:	288a983a 	sll	r5,r5,r2
    fbf0:	2c62b03a 	or	r17,r5,r17
    fbf4:	8822c03a 	cmpne	r17,r17,zero
    fbf8:	8922b03a 	or	r17,r17,r4
    fbfc:	0005883a 	mov	r2,zero
    fc00:	003f2406 	br	f894 <__alt_mem_Flash_flash_data+0xf400f894>
    fc04:	01402034 	movhi	r5,128
    fc08:	0011883a 	mov	r8,zero
    fc0c:	297fffc4 	addi	r5,r5,-1
    fc10:	047ffe04 	movi	r17,-8
    fc14:	0401ffc4 	movi	r16,2047
    fc18:	003e6a06 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    fc1c:	2c62b03a 	or	r17,r5,r17
    fc20:	8822c03a 	cmpne	r17,r17,zero
    fc24:	0005883a 	mov	r2,zero
    fc28:	003fa506 	br	fac0 <__alt_mem_Flash_flash_data+0xf400fac0>
    fc2c:	180b883a 	mov	r5,r3
    fc30:	3023883a 	mov	r17,r6
    fc34:	003e0306 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fc38:	180b883a 	mov	r5,r3
    fc3c:	3023883a 	mov	r17,r6
    fc40:	0401ffc4 	movi	r16,2047
    fc44:	003dff06 	br	f444 <__alt_mem_Flash_flash_data+0xf400f444>
    fc48:	113ff804 	addi	r4,r2,-32
    fc4c:	01c00804 	movi	r7,32
    fc50:	2908d83a 	srl	r4,r5,r4
    fc54:	11c00a26 	beq	r2,r7,fc80 <__subdf3+0x8c8>
    fc58:	01c01004 	movi	r7,64
    fc5c:	3885c83a 	sub	r2,r7,r2
    fc60:	288a983a 	sll	r5,r5,r2
    fc64:	2c62b03a 	or	r17,r5,r17
    fc68:	8822c03a 	cmpne	r17,r17,zero
    fc6c:	8922b03a 	or	r17,r17,r4
    fc70:	0005883a 	mov	r2,zero
    fc74:	003f9206 	br	fac0 <__alt_mem_Flash_flash_data+0xf400fac0>
    fc78:	000b883a 	mov	r5,zero
    fc7c:	003fdc06 	br	fbf0 <__alt_mem_Flash_flash_data+0xf400fbf0>
    fc80:	000b883a 	mov	r5,zero
    fc84:	003ff706 	br	fc64 <__alt_mem_Flash_flash_data+0xf400fc64>

0000fc88 <__fixdfsi>:
    fc88:	2806d53a 	srli	r3,r5,20
    fc8c:	00800434 	movhi	r2,16
    fc90:	10bfffc4 	addi	r2,r2,-1
    fc94:	18c1ffcc 	andi	r3,r3,2047
    fc98:	0180ff84 	movi	r6,1022
    fc9c:	2884703a 	and	r2,r5,r2
    fca0:	280ad7fa 	srli	r5,r5,31
    fca4:	30c0130e 	bge	r6,r3,fcf4 <__fixdfsi+0x6c>
    fca8:	01810744 	movi	r6,1053
    fcac:	30c00d16 	blt	r6,r3,fce4 <__fixdfsi+0x5c>
    fcb0:	01810cc4 	movi	r6,1075
    fcb4:	30cdc83a 	sub	r6,r6,r3
    fcb8:	01c007c4 	movi	r7,31
    fcbc:	10800434 	orhi	r2,r2,16
    fcc0:	39800e0e 	bge	r7,r6,fcfc <__fixdfsi+0x74>
    fcc4:	010104c4 	movi	r4,1043
    fcc8:	20c7c83a 	sub	r3,r4,r3
    fccc:	10c6d83a 	srl	r3,r2,r3
    fcd0:	29403fcc 	andi	r5,r5,255
    fcd4:	0145c83a 	sub	r2,zero,r5
    fcd8:	1884f03a 	xor	r2,r3,r2
    fcdc:	1145883a 	add	r2,r2,r5
    fce0:	f800283a 	ret
    fce4:	00a00034 	movhi	r2,32768
    fce8:	10bfffc4 	addi	r2,r2,-1
    fcec:	2885883a 	add	r2,r5,r2
    fcf0:	f800283a 	ret
    fcf4:	0005883a 	mov	r2,zero
    fcf8:	f800283a 	ret
    fcfc:	18fefb44 	addi	r3,r3,-1043
    fd00:	2188d83a 	srl	r4,r4,r6
    fd04:	10c6983a 	sll	r3,r2,r3
    fd08:	20c6b03a 	or	r3,r4,r3
    fd0c:	003ff006 	br	fcd0 <__alt_mem_Flash_flash_data+0xf400fcd0>

0000fd10 <__floatsidf>:
    fd10:	defffd04 	addi	sp,sp,-12
    fd14:	dc400115 	stw	r17,4(sp)
    fd18:	dfc00215 	stw	ra,8(sp)
    fd1c:	dc000015 	stw	r16,0(sp)
    fd20:	2023883a 	mov	r17,r4
    fd24:	20001426 	beq	r4,zero,fd78 <__floatsidf+0x68>
    fd28:	2020d7fa 	srli	r16,r4,31
    fd2c:	80000126 	beq	r16,zero,fd34 <__floatsidf+0x24>
    fd30:	0123c83a 	sub	r17,zero,r4
    fd34:	8809883a 	mov	r4,r17
    fd38:	000fe840 	call	fe84 <__clzsi2>
    fd3c:	01410784 	movi	r5,1054
    fd40:	00c00284 	movi	r3,10
    fd44:	288bc83a 	sub	r5,r5,r2
    fd48:	18801c16 	blt	r3,r2,fdbc <__floatsidf+0xac>
    fd4c:	00c002c4 	movi	r3,11
    fd50:	1887c83a 	sub	r3,r3,r2
    fd54:	88c8d83a 	srl	r4,r17,r3
    fd58:	00c00434 	movhi	r3,16
    fd5c:	18ffffc4 	addi	r3,r3,-1
    fd60:	10800544 	addi	r2,r2,21
    fd64:	20c8703a 	and	r4,r4,r3
    fd68:	8884983a 	sll	r2,r17,r2
    fd6c:	28c1ffcc 	andi	r3,r5,2047
    fd70:	800d883a 	mov	r6,r16
    fd74:	00000406 	br	fd88 <__floatsidf+0x78>
    fd78:	000d883a 	mov	r6,zero
    fd7c:	0007883a 	mov	r3,zero
    fd80:	0009883a 	mov	r4,zero
    fd84:	0005883a 	mov	r2,zero
    fd88:	180a953a 	slli	r5,r3,20
    fd8c:	31803fcc 	andi	r6,r6,255
    fd90:	00c00434 	movhi	r3,16
    fd94:	300c97fa 	slli	r6,r6,31
    fd98:	18ffffc4 	addi	r3,r3,-1
    fd9c:	20c6703a 	and	r3,r4,r3
    fda0:	1946b03a 	or	r3,r3,r5
    fda4:	1986b03a 	or	r3,r3,r6
    fda8:	dfc00217 	ldw	ra,8(sp)
    fdac:	dc400117 	ldw	r17,4(sp)
    fdb0:	dc000017 	ldw	r16,0(sp)
    fdb4:	dec00304 	addi	sp,sp,12
    fdb8:	f800283a 	ret
    fdbc:	10fffd44 	addi	r3,r2,-11
    fdc0:	88c8983a 	sll	r4,r17,r3
    fdc4:	00800434 	movhi	r2,16
    fdc8:	10bfffc4 	addi	r2,r2,-1
    fdcc:	2088703a 	and	r4,r4,r2
    fdd0:	28c1ffcc 	andi	r3,r5,2047
    fdd4:	800d883a 	mov	r6,r16
    fdd8:	0005883a 	mov	r2,zero
    fddc:	003fea06 	br	fd88 <__alt_mem_Flash_flash_data+0xf400fd88>

0000fde0 <__floatunsidf>:
    fde0:	defffe04 	addi	sp,sp,-8
    fde4:	dc000015 	stw	r16,0(sp)
    fde8:	dfc00115 	stw	ra,4(sp)
    fdec:	2021883a 	mov	r16,r4
    fdf0:	20001026 	beq	r4,zero,fe34 <__floatunsidf+0x54>
    fdf4:	000fe840 	call	fe84 <__clzsi2>
    fdf8:	01410784 	movi	r5,1054
    fdfc:	100d883a 	mov	r6,r2
    fe00:	288bc83a 	sub	r5,r5,r2
    fe04:	00800284 	movi	r2,10
    fe08:	11801616 	blt	r2,r6,fe64 <__floatunsidf+0x84>
    fe0c:	008002c4 	movi	r2,11
    fe10:	1185c83a 	sub	r2,r2,r6
    fe14:	8084d83a 	srl	r2,r16,r2
    fe18:	00c00434 	movhi	r3,16
    fe1c:	31c00544 	addi	r7,r6,21
    fe20:	18ffffc4 	addi	r3,r3,-1
    fe24:	81e0983a 	sll	r16,r16,r7
    fe28:	10cc703a 	and	r6,r2,r3
    fe2c:	2941ffcc 	andi	r5,r5,2047
    fe30:	00000206 	br	fe3c <__floatunsidf+0x5c>
    fe34:	000b883a 	mov	r5,zero
    fe38:	000d883a 	mov	r6,zero
    fe3c:	280a953a 	slli	r5,r5,20
    fe40:	00c00434 	movhi	r3,16
    fe44:	18ffffc4 	addi	r3,r3,-1
    fe48:	30c6703a 	and	r3,r6,r3
    fe4c:	8005883a 	mov	r2,r16
    fe50:	1946b03a 	or	r3,r3,r5
    fe54:	dfc00117 	ldw	ra,4(sp)
    fe58:	dc000017 	ldw	r16,0(sp)
    fe5c:	dec00204 	addi	sp,sp,8
    fe60:	f800283a 	ret
    fe64:	31bffd44 	addi	r6,r6,-11
    fe68:	818c983a 	sll	r6,r16,r6
    fe6c:	00800434 	movhi	r2,16
    fe70:	10bfffc4 	addi	r2,r2,-1
    fe74:	2941ffcc 	andi	r5,r5,2047
    fe78:	0021883a 	mov	r16,zero
    fe7c:	308c703a 	and	r6,r6,r2
    fe80:	003fee06 	br	fe3c <__alt_mem_Flash_flash_data+0xf400fe3c>

0000fe84 <__clzsi2>:
    fe84:	00bfffd4 	movui	r2,65535
    fe88:	11000b36 	bltu	r2,r4,feb8 <__clzsi2+0x34>
    fe8c:	00803fc4 	movi	r2,255
    fe90:	1100122e 	bgeu	r2,r4,fedc <__clzsi2+0x58>
    fe94:	00c00204 	movi	r3,8
    fe98:	01400604 	movi	r5,24
    fe9c:	20c8d83a 	srl	r4,r4,r3
    fea0:	008000b4 	movhi	r2,2
    fea4:	10b21704 	addi	r2,r2,-14244
    fea8:	1109883a 	add	r4,r2,r4
    feac:	20800003 	ldbu	r2,0(r4)
    feb0:	2885c83a 	sub	r2,r5,r2
    feb4:	f800283a 	ret
    feb8:	00804034 	movhi	r2,256
    febc:	10bfffc4 	addi	r2,r2,-1
    fec0:	11000336 	bltu	r2,r4,fed0 <__clzsi2+0x4c>
    fec4:	00c00404 	movi	r3,16
    fec8:	180b883a 	mov	r5,r3
    fecc:	003ff306 	br	fe9c <__alt_mem_Flash_flash_data+0xf400fe9c>
    fed0:	00c00604 	movi	r3,24
    fed4:	01400204 	movi	r5,8
    fed8:	003ff006 	br	fe9c <__alt_mem_Flash_flash_data+0xf400fe9c>
    fedc:	0007883a 	mov	r3,zero
    fee0:	01400804 	movi	r5,32
    fee4:	003fed06 	br	fe9c <__alt_mem_Flash_flash_data+0xf400fe9c>

0000fee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fee8:	defffe04 	addi	sp,sp,-8
    feec:	dfc00115 	stw	ra,4(sp)
    fef0:	df000015 	stw	fp,0(sp)
    fef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fef8:	008000b4 	movhi	r2,2
    fefc:	10baca04 	addi	r2,r2,-5336
    ff00:	10800017 	ldw	r2,0(r2)
    ff04:	10000526 	beq	r2,zero,ff1c <alt_get_errno+0x34>
    ff08:	008000b4 	movhi	r2,2
    ff0c:	10baca04 	addi	r2,r2,-5336
    ff10:	10800017 	ldw	r2,0(r2)
    ff14:	103ee83a 	callr	r2
    ff18:	00000206 	br	ff24 <alt_get_errno+0x3c>
    ff1c:	008000b4 	movhi	r2,2
    ff20:	1082c804 	addi	r2,r2,2848
}
    ff24:	e037883a 	mov	sp,fp
    ff28:	dfc00117 	ldw	ra,4(sp)
    ff2c:	df000017 	ldw	fp,0(sp)
    ff30:	dec00204 	addi	sp,sp,8
    ff34:	f800283a 	ret

0000ff38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ff38:	defffb04 	addi	sp,sp,-20
    ff3c:	dfc00415 	stw	ra,16(sp)
    ff40:	df000315 	stw	fp,12(sp)
    ff44:	df000304 	addi	fp,sp,12
    ff48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ff4c:	e0bfff17 	ldw	r2,-4(fp)
    ff50:	10000616 	blt	r2,zero,ff6c <close+0x34>
    ff54:	e0bfff17 	ldw	r2,-4(fp)
    ff58:	10c00324 	muli	r3,r2,12
    ff5c:	008000b4 	movhi	r2,2
    ff60:	10b54d04 	addi	r2,r2,-10956
    ff64:	1885883a 	add	r2,r3,r2
    ff68:	00000106 	br	ff70 <close+0x38>
    ff6c:	0005883a 	mov	r2,zero
    ff70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ff74:	e0bffd17 	ldw	r2,-12(fp)
    ff78:	10001926 	beq	r2,zero,ffe0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ff7c:	e0bffd17 	ldw	r2,-12(fp)
    ff80:	10800017 	ldw	r2,0(r2)
    ff84:	10800417 	ldw	r2,16(r2)
    ff88:	10000626 	beq	r2,zero,ffa4 <close+0x6c>
    ff8c:	e0bffd17 	ldw	r2,-12(fp)
    ff90:	10800017 	ldw	r2,0(r2)
    ff94:	10800417 	ldw	r2,16(r2)
    ff98:	e13ffd17 	ldw	r4,-12(fp)
    ff9c:	103ee83a 	callr	r2
    ffa0:	00000106 	br	ffa8 <close+0x70>
    ffa4:	0005883a 	mov	r2,zero
    ffa8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ffac:	e13fff17 	ldw	r4,-4(fp)
    ffb0:	00106500 	call	10650 <alt_release_fd>
    if (rval < 0)
    ffb4:	e0bffe17 	ldw	r2,-8(fp)
    ffb8:	1000070e 	bge	r2,zero,ffd8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ffbc:	000fee80 	call	fee8 <alt_get_errno>
    ffc0:	1007883a 	mov	r3,r2
    ffc4:	e0bffe17 	ldw	r2,-8(fp)
    ffc8:	0085c83a 	sub	r2,zero,r2
    ffcc:	18800015 	stw	r2,0(r3)
      return -1;
    ffd0:	00bfffc4 	movi	r2,-1
    ffd4:	00000706 	br	fff4 <close+0xbc>
    }
    return 0;
    ffd8:	0005883a 	mov	r2,zero
    ffdc:	00000506 	br	fff4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ffe0:	000fee80 	call	fee8 <alt_get_errno>
    ffe4:	1007883a 	mov	r3,r2
    ffe8:	00801444 	movi	r2,81
    ffec:	18800015 	stw	r2,0(r3)
    return -1;
    fff0:	00bfffc4 	movi	r2,-1
  }
}
    fff4:	e037883a 	mov	sp,fp
    fff8:	dfc00117 	ldw	ra,4(sp)
    fffc:	df000017 	ldw	fp,0(sp)
   10000:	dec00204 	addi	sp,sp,8
   10004:	f800283a 	ret

00010008 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10008:	defffc04 	addi	sp,sp,-16
   1000c:	df000315 	stw	fp,12(sp)
   10010:	df000304 	addi	fp,sp,12
   10014:	e13ffd15 	stw	r4,-12(fp)
   10018:	e17ffe15 	stw	r5,-8(fp)
   1001c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10020:	e0bfff17 	ldw	r2,-4(fp)
}
   10024:	e037883a 	mov	sp,fp
   10028:	df000017 	ldw	fp,0(sp)
   1002c:	dec00104 	addi	sp,sp,4
   10030:	f800283a 	ret

00010034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10034:	defffe04 	addi	sp,sp,-8
   10038:	dfc00115 	stw	ra,4(sp)
   1003c:	df000015 	stw	fp,0(sp)
   10040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10044:	008000b4 	movhi	r2,2
   10048:	10baca04 	addi	r2,r2,-5336
   1004c:	10800017 	ldw	r2,0(r2)
   10050:	10000526 	beq	r2,zero,10068 <alt_get_errno+0x34>
   10054:	008000b4 	movhi	r2,2
   10058:	10baca04 	addi	r2,r2,-5336
   1005c:	10800017 	ldw	r2,0(r2)
   10060:	103ee83a 	callr	r2
   10064:	00000206 	br	10070 <alt_get_errno+0x3c>
   10068:	008000b4 	movhi	r2,2
   1006c:	1082c804 	addi	r2,r2,2848
}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   10084:	defffb04 	addi	sp,sp,-20
   10088:	dfc00415 	stw	ra,16(sp)
   1008c:	df000315 	stw	fp,12(sp)
   10090:	df000304 	addi	fp,sp,12
   10094:	e13ffe15 	stw	r4,-8(fp)
   10098:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1009c:	e0bffe17 	ldw	r2,-8(fp)
   100a0:	10000616 	blt	r2,zero,100bc <fstat+0x38>
   100a4:	e0bffe17 	ldw	r2,-8(fp)
   100a8:	10c00324 	muli	r3,r2,12
   100ac:	008000b4 	movhi	r2,2
   100b0:	10b54d04 	addi	r2,r2,-10956
   100b4:	1885883a 	add	r2,r3,r2
   100b8:	00000106 	br	100c0 <fstat+0x3c>
   100bc:	0005883a 	mov	r2,zero
   100c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   100c4:	e0bffd17 	ldw	r2,-12(fp)
   100c8:	10001026 	beq	r2,zero,1010c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   100cc:	e0bffd17 	ldw	r2,-12(fp)
   100d0:	10800017 	ldw	r2,0(r2)
   100d4:	10800817 	ldw	r2,32(r2)
   100d8:	10000726 	beq	r2,zero,100f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   100dc:	e0bffd17 	ldw	r2,-12(fp)
   100e0:	10800017 	ldw	r2,0(r2)
   100e4:	10800817 	ldw	r2,32(r2)
   100e8:	e13ffd17 	ldw	r4,-12(fp)
   100ec:	e17fff17 	ldw	r5,-4(fp)
   100f0:	103ee83a 	callr	r2
   100f4:	00000a06 	br	10120 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   100f8:	e0bfff17 	ldw	r2,-4(fp)
   100fc:	00c80004 	movi	r3,8192
   10100:	10c00115 	stw	r3,4(r2)
      return 0;
   10104:	0005883a 	mov	r2,zero
   10108:	00000506 	br	10120 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1010c:	00100340 	call	10034 <alt_get_errno>
   10110:	1007883a 	mov	r3,r2
   10114:	00801444 	movi	r2,81
   10118:	18800015 	stw	r2,0(r3)
    return -1;
   1011c:	00bfffc4 	movi	r2,-1
  }
}
   10120:	e037883a 	mov	sp,fp
   10124:	dfc00117 	ldw	ra,4(sp)
   10128:	df000017 	ldw	fp,0(sp)
   1012c:	dec00204 	addi	sp,sp,8
   10130:	f800283a 	ret

00010134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10134:	defffe04 	addi	sp,sp,-8
   10138:	dfc00115 	stw	ra,4(sp)
   1013c:	df000015 	stw	fp,0(sp)
   10140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10144:	008000b4 	movhi	r2,2
   10148:	10baca04 	addi	r2,r2,-5336
   1014c:	10800017 	ldw	r2,0(r2)
   10150:	10000526 	beq	r2,zero,10168 <alt_get_errno+0x34>
   10154:	008000b4 	movhi	r2,2
   10158:	10baca04 	addi	r2,r2,-5336
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	103ee83a 	callr	r2
   10164:	00000206 	br	10170 <alt_get_errno+0x3c>
   10168:	008000b4 	movhi	r2,2
   1016c:	1082c804 	addi	r2,r2,2848
}
   10170:	e037883a 	mov	sp,fp
   10174:	dfc00117 	ldw	ra,4(sp)
   10178:	df000017 	ldw	fp,0(sp)
   1017c:	dec00204 	addi	sp,sp,8
   10180:	f800283a 	ret

00010184 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10184:	deffed04 	addi	sp,sp,-76
   10188:	dfc01215 	stw	ra,72(sp)
   1018c:	df001115 	stw	fp,68(sp)
   10190:	df001104 	addi	fp,sp,68
   10194:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10198:	e0bfff17 	ldw	r2,-4(fp)
   1019c:	10000616 	blt	r2,zero,101b8 <isatty+0x34>
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	10c00324 	muli	r3,r2,12
   101a8:	008000b4 	movhi	r2,2
   101ac:	10b54d04 	addi	r2,r2,-10956
   101b0:	1885883a 	add	r2,r3,r2
   101b4:	00000106 	br	101bc <isatty+0x38>
   101b8:	0005883a 	mov	r2,zero
   101bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   101c0:	e0bfef17 	ldw	r2,-68(fp)
   101c4:	10000e26 	beq	r2,zero,10200 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   101c8:	e0bfef17 	ldw	r2,-68(fp)
   101cc:	10800017 	ldw	r2,0(r2)
   101d0:	10800817 	ldw	r2,32(r2)
   101d4:	1000021e 	bne	r2,zero,101e0 <isatty+0x5c>
    {
      return 1;
   101d8:	00800044 	movi	r2,1
   101dc:	00000d06 	br	10214 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   101e0:	e0bff004 	addi	r2,fp,-64
   101e4:	e13fff17 	ldw	r4,-4(fp)
   101e8:	100b883a 	mov	r5,r2
   101ec:	00100840 	call	10084 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   101f0:	e0bff117 	ldw	r2,-60(fp)
   101f4:	10880020 	cmpeqi	r2,r2,8192
   101f8:	10803fcc 	andi	r2,r2,255
   101fc:	00000506 	br	10214 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10200:	00101340 	call	10134 <alt_get_errno>
   10204:	1007883a 	mov	r3,r2
   10208:	00801444 	movi	r2,81
   1020c:	18800015 	stw	r2,0(r3)
    return 0;
   10210:	0005883a 	mov	r2,zero
  }
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

00010228 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10228:	defffc04 	addi	sp,sp,-16
   1022c:	df000315 	stw	fp,12(sp)
   10230:	df000304 	addi	fp,sp,12
   10234:	e13ffd15 	stw	r4,-12(fp)
   10238:	e17ffe15 	stw	r5,-8(fp)
   1023c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10240:	e0fffe17 	ldw	r3,-8(fp)
   10244:	e0bffd17 	ldw	r2,-12(fp)
   10248:	18800c26 	beq	r3,r2,1027c <alt_load_section+0x54>
  {
    while( to != end )
   1024c:	00000806 	br	10270 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10250:	e0bffe17 	ldw	r2,-8(fp)
   10254:	10c00104 	addi	r3,r2,4
   10258:	e0fffe15 	stw	r3,-8(fp)
   1025c:	e0fffd17 	ldw	r3,-12(fp)
   10260:	19000104 	addi	r4,r3,4
   10264:	e13ffd15 	stw	r4,-12(fp)
   10268:	18c00017 	ldw	r3,0(r3)
   1026c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10270:	e0fffe17 	ldw	r3,-8(fp)
   10274:	e0bfff17 	ldw	r2,-4(fp)
   10278:	18bff51e 	bne	r3,r2,10250 <__alt_mem_Flash_flash_data+0xf4010250>
    {
      *to++ = *from++;
    }
  }
}
   1027c:	e037883a 	mov	sp,fp
   10280:	df000017 	ldw	fp,0(sp)
   10284:	dec00104 	addi	sp,sp,4
   10288:	f800283a 	ret

0001028c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1028c:	defffe04 	addi	sp,sp,-8
   10290:	dfc00115 	stw	ra,4(sp)
   10294:	df000015 	stw	fp,0(sp)
   10298:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1029c:	010000b4 	movhi	r4,2
   102a0:	213aee04 	addi	r4,r4,-5192
   102a4:	014000b4 	movhi	r5,2
   102a8:	29731a04 	addi	r5,r5,-13208
   102ac:	018000b4 	movhi	r6,2
   102b0:	31baee04 	addi	r6,r6,-5192
   102b4:	00102280 	call	10228 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   102b8:	01000034 	movhi	r4,0
   102bc:	21000804 	addi	r4,r4,32
   102c0:	01400034 	movhi	r5,0
   102c4:	29400804 	addi	r5,r5,32
   102c8:	01800034 	movhi	r6,0
   102cc:	31809104 	addi	r6,r6,580
   102d0:	00102280 	call	10228 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   102d4:	010000b4 	movhi	r4,2
   102d8:	21314f04 	addi	r4,r4,-15044
   102dc:	014000b4 	movhi	r5,2
   102e0:	29714f04 	addi	r5,r5,-15044
   102e4:	018000b4 	movhi	r6,2
   102e8:	31b31a04 	addi	r6,r6,-13208
   102ec:	00102280 	call	10228 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   102f0:	001b1840 	call	1b184 <alt_dcache_flush_all>
  alt_icache_flush_all();
   102f4:	001b3dc0 	call	1b3dc <alt_icache_flush_all>
}
   102f8:	e037883a 	mov	sp,fp
   102fc:	dfc00117 	ldw	ra,4(sp)
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1030c:	defffe04 	addi	sp,sp,-8
   10310:	dfc00115 	stw	ra,4(sp)
   10314:	df000015 	stw	fp,0(sp)
   10318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1031c:	008000b4 	movhi	r2,2
   10320:	10baca04 	addi	r2,r2,-5336
   10324:	10800017 	ldw	r2,0(r2)
   10328:	10000526 	beq	r2,zero,10340 <alt_get_errno+0x34>
   1032c:	008000b4 	movhi	r2,2
   10330:	10baca04 	addi	r2,r2,-5336
   10334:	10800017 	ldw	r2,0(r2)
   10338:	103ee83a 	callr	r2
   1033c:	00000206 	br	10348 <alt_get_errno+0x3c>
   10340:	008000b4 	movhi	r2,2
   10344:	1082c804 	addi	r2,r2,2848
}
   10348:	e037883a 	mov	sp,fp
   1034c:	dfc00117 	ldw	ra,4(sp)
   10350:	df000017 	ldw	fp,0(sp)
   10354:	dec00204 	addi	sp,sp,8
   10358:	f800283a 	ret

0001035c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1035c:	defff904 	addi	sp,sp,-28
   10360:	dfc00615 	stw	ra,24(sp)
   10364:	df000515 	stw	fp,20(sp)
   10368:	df000504 	addi	fp,sp,20
   1036c:	e13ffd15 	stw	r4,-12(fp)
   10370:	e17ffe15 	stw	r5,-8(fp)
   10374:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10378:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1037c:	e0bffd17 	ldw	r2,-12(fp)
   10380:	10000616 	blt	r2,zero,1039c <lseek+0x40>
   10384:	e0bffd17 	ldw	r2,-12(fp)
   10388:	10c00324 	muli	r3,r2,12
   1038c:	008000b4 	movhi	r2,2
   10390:	10b54d04 	addi	r2,r2,-10956
   10394:	1885883a 	add	r2,r3,r2
   10398:	00000106 	br	103a0 <lseek+0x44>
   1039c:	0005883a 	mov	r2,zero
   103a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   103a4:	e0bffc17 	ldw	r2,-16(fp)
   103a8:	10001026 	beq	r2,zero,103ec <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   103ac:	e0bffc17 	ldw	r2,-16(fp)
   103b0:	10800017 	ldw	r2,0(r2)
   103b4:	10800717 	ldw	r2,28(r2)
   103b8:	10000926 	beq	r2,zero,103e0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   103bc:	e0bffc17 	ldw	r2,-16(fp)
   103c0:	10800017 	ldw	r2,0(r2)
   103c4:	10800717 	ldw	r2,28(r2)
   103c8:	e13ffc17 	ldw	r4,-16(fp)
   103cc:	e17ffe17 	ldw	r5,-8(fp)
   103d0:	e1bfff17 	ldw	r6,-4(fp)
   103d4:	103ee83a 	callr	r2
   103d8:	e0bffb15 	stw	r2,-20(fp)
   103dc:	00000506 	br	103f4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   103e0:	00bfde84 	movi	r2,-134
   103e4:	e0bffb15 	stw	r2,-20(fp)
   103e8:	00000206 	br	103f4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   103ec:	00bfebc4 	movi	r2,-81
   103f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   103f4:	e0bffb17 	ldw	r2,-20(fp)
   103f8:	1000070e 	bge	r2,zero,10418 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   103fc:	001030c0 	call	1030c <alt_get_errno>
   10400:	1007883a 	mov	r3,r2
   10404:	e0bffb17 	ldw	r2,-20(fp)
   10408:	0085c83a 	sub	r2,zero,r2
   1040c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10410:	00bfffc4 	movi	r2,-1
   10414:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10418:	e0bffb17 	ldw	r2,-20(fp)
}
   1041c:	e037883a 	mov	sp,fp
   10420:	dfc00117 	ldw	ra,4(sp)
   10424:	df000017 	ldw	fp,0(sp)
   10428:	dec00204 	addi	sp,sp,8
   1042c:	f800283a 	ret

00010430 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10430:	defff904 	addi	sp,sp,-28
   10434:	dfc00615 	stw	ra,24(sp)
   10438:	df000515 	stw	fp,20(sp)
   1043c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10440:	0009883a 	mov	r4,zero
   10444:	001887c0 	call	1887c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10448:	00114200 	call	11420 <OSInit>
   1044c:	01000044 	movi	r4,1
   10450:	0015f900 	call	15f90 <OSSemCreate>
   10454:	1007883a 	mov	r3,r2
   10458:	008000b4 	movhi	r2,2
   1045c:	1082ce04 	addi	r2,r2,2872
   10460:	10c00015 	stw	r3,0(r2)
   10464:	01000044 	movi	r4,1
   10468:	0015f900 	call	15f90 <OSSemCreate>
   1046c:	1007883a 	mov	r3,r2
   10470:	008000b4 	movhi	r2,2
   10474:	1082d004 	addi	r2,r2,2880
   10478:	10c00015 	stw	r3,0(r2)
   1047c:	008000b4 	movhi	r2,2
   10480:	1082c904 	addi	r2,r2,2852
   10484:	e0bffc15 	stw	r2,-16(fp)
   10488:	00800044 	movi	r2,1
   1048c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10490:	e0bffd0b 	ldhu	r2,-12(fp)
   10494:	1009883a 	mov	r4,r2
   10498:	0015f900 	call	15f90 <OSSemCreate>
   1049c:	1007883a 	mov	r3,r2
   104a0:	e0bffc17 	ldw	r2,-16(fp)
   104a4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104a8:	00188b00 	call	188b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   104ac:	010000b4 	movhi	r4,2
   104b0:	21325a04 	addi	r4,r4,-13976
   104b4:	014000b4 	movhi	r5,2
   104b8:	29725a04 	addi	r5,r5,-13976
   104bc:	018000b4 	movhi	r6,2
   104c0:	31b25a04 	addi	r6,r6,-13976
   104c4:	001b4cc0 	call	1b4cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   104c8:	001b2940 	call	1b294 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   104cc:	010000b4 	movhi	r4,2
   104d0:	212cbc04 	addi	r4,r4,-19728
   104d4:	001c1900 	call	1c190 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   104d8:	d1280b17 	ldw	r4,-24532(gp)
   104dc:	d0e80c17 	ldw	r3,-24528(gp)
   104e0:	d0a80d17 	ldw	r2,-24524(gp)
   104e4:	180b883a 	mov	r5,r3
   104e8:	100d883a 	mov	r6,r2
   104ec:	00008240 	call	824 <main>
   104f0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   104f4:	01000044 	movi	r4,1
   104f8:	000ff380 	call	ff38 <close>
  exit (result);
   104fc:	e13ffb17 	ldw	r4,-20(fp)
   10500:	001c1a40 	call	1c1a4 <exit>

00010504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10504:	defffe04 	addi	sp,sp,-8
   10508:	dfc00115 	stw	ra,4(sp)
   1050c:	df000015 	stw	fp,0(sp)
   10510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10514:	008000b4 	movhi	r2,2
   10518:	10baca04 	addi	r2,r2,-5336
   1051c:	10800017 	ldw	r2,0(r2)
   10520:	10000526 	beq	r2,zero,10538 <alt_get_errno+0x34>
   10524:	008000b4 	movhi	r2,2
   10528:	10baca04 	addi	r2,r2,-5336
   1052c:	10800017 	ldw	r2,0(r2)
   10530:	103ee83a 	callr	r2
   10534:	00000206 	br	10540 <alt_get_errno+0x3c>
   10538:	008000b4 	movhi	r2,2
   1053c:	1082c804 	addi	r2,r2,2848
}
   10540:	e037883a 	mov	sp,fp
   10544:	dfc00117 	ldw	ra,4(sp)
   10548:	df000017 	ldw	fp,0(sp)
   1054c:	dec00204 	addi	sp,sp,8
   10550:	f800283a 	ret

00010554 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10554:	defff904 	addi	sp,sp,-28
   10558:	dfc00615 	stw	ra,24(sp)
   1055c:	df000515 	stw	fp,20(sp)
   10560:	df000504 	addi	fp,sp,20
   10564:	e13ffd15 	stw	r4,-12(fp)
   10568:	e17ffe15 	stw	r5,-8(fp)
   1056c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10570:	e0bffd17 	ldw	r2,-12(fp)
   10574:	10000616 	blt	r2,zero,10590 <read+0x3c>
   10578:	e0bffd17 	ldw	r2,-12(fp)
   1057c:	10c00324 	muli	r3,r2,12
   10580:	008000b4 	movhi	r2,2
   10584:	10b54d04 	addi	r2,r2,-10956
   10588:	1885883a 	add	r2,r3,r2
   1058c:	00000106 	br	10594 <read+0x40>
   10590:	0005883a 	mov	r2,zero
   10594:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10598:	e0bffb17 	ldw	r2,-20(fp)
   1059c:	10002226 	beq	r2,zero,10628 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   105a0:	e0bffb17 	ldw	r2,-20(fp)
   105a4:	10800217 	ldw	r2,8(r2)
   105a8:	108000cc 	andi	r2,r2,3
   105ac:	10800060 	cmpeqi	r2,r2,1
   105b0:	1000181e 	bne	r2,zero,10614 <read+0xc0>
        (fd->dev->read))
   105b4:	e0bffb17 	ldw	r2,-20(fp)
   105b8:	10800017 	ldw	r2,0(r2)
   105bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   105c0:	10001426 	beq	r2,zero,10614 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   105c4:	e0bffb17 	ldw	r2,-20(fp)
   105c8:	10800017 	ldw	r2,0(r2)
   105cc:	10800517 	ldw	r2,20(r2)
   105d0:	e0ffff17 	ldw	r3,-4(fp)
   105d4:	e13ffb17 	ldw	r4,-20(fp)
   105d8:	e17ffe17 	ldw	r5,-8(fp)
   105dc:	180d883a 	mov	r6,r3
   105e0:	103ee83a 	callr	r2
   105e4:	e0bffc15 	stw	r2,-16(fp)
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	1000070e 	bge	r2,zero,1060c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   105f0:	00105040 	call	10504 <alt_get_errno>
   105f4:	1007883a 	mov	r3,r2
   105f8:	e0bffc17 	ldw	r2,-16(fp)
   105fc:	0085c83a 	sub	r2,zero,r2
   10600:	18800015 	stw	r2,0(r3)
          return -1;
   10604:	00bfffc4 	movi	r2,-1
   10608:	00000c06 	br	1063c <read+0xe8>
        }
        return rval;
   1060c:	e0bffc17 	ldw	r2,-16(fp)
   10610:	00000a06 	br	1063c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10614:	00105040 	call	10504 <alt_get_errno>
   10618:	1007883a 	mov	r3,r2
   1061c:	00800344 	movi	r2,13
   10620:	18800015 	stw	r2,0(r3)
   10624:	00000406 	br	10638 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10628:	00105040 	call	10504 <alt_get_errno>
   1062c:	1007883a 	mov	r3,r2
   10630:	00801444 	movi	r2,81
   10634:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10638:	00bfffc4 	movi	r2,-1
}
   1063c:	e037883a 	mov	sp,fp
   10640:	dfc00117 	ldw	ra,4(sp)
   10644:	df000017 	ldw	fp,0(sp)
   10648:	dec00204 	addi	sp,sp,8
   1064c:	f800283a 	ret

00010650 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10650:	defffe04 	addi	sp,sp,-8
   10654:	df000115 	stw	fp,4(sp)
   10658:	df000104 	addi	fp,sp,4
   1065c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	108000d0 	cmplti	r2,r2,3
   10668:	10000d1e 	bne	r2,zero,106a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1066c:	008000b4 	movhi	r2,2
   10670:	10b54d04 	addi	r2,r2,-10956
   10674:	e0ffff17 	ldw	r3,-4(fp)
   10678:	18c00324 	muli	r3,r3,12
   1067c:	18c00204 	addi	r3,r3,8
   10680:	10c5883a 	add	r2,r2,r3
   10684:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10688:	008000b4 	movhi	r2,2
   1068c:	10b54d04 	addi	r2,r2,-10956
   10690:	e0ffff17 	ldw	r3,-4(fp)
   10694:	18c00324 	muli	r3,r3,12
   10698:	10c5883a 	add	r2,r2,r3
   1069c:	10000015 	stw	zero,0(r2)
  }
}
   106a0:	e037883a 	mov	sp,fp
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00104 	addi	sp,sp,4
   106ac:	f800283a 	ret

000106b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   106b0:	defff904 	addi	sp,sp,-28
   106b4:	df000615 	stw	fp,24(sp)
   106b8:	df000604 	addi	fp,sp,24
   106bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106c0:	0005303a 	rdctl	r2,status
   106c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106c8:	e0fffc17 	ldw	r3,-16(fp)
   106cc:	00bfff84 	movi	r2,-2
   106d0:	1884703a 	and	r2,r3,r2
   106d4:	1001703a 	wrctl	status,r2
  
  return context;
   106d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   106dc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   106e0:	d0a00c17 	ldw	r2,-32720(gp)
   106e4:	10c000c4 	addi	r3,r2,3
   106e8:	00bfff04 	movi	r2,-4
   106ec:	1884703a 	and	r2,r3,r2
   106f0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   106f4:	d0e00c17 	ldw	r3,-32720(gp)
   106f8:	e0bfff17 	ldw	r2,-4(fp)
   106fc:	1887883a 	add	r3,r3,r2
   10700:	00810034 	movhi	r2,1024
   10704:	10800004 	addi	r2,r2,0
   10708:	10c0062e 	bgeu	r2,r3,10724 <sbrk+0x74>
   1070c:	e0bffa17 	ldw	r2,-24(fp)
   10710:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1071c:	00bfffc4 	movi	r2,-1
   10720:	00000b06 	br	10750 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10724:	d0a00c17 	ldw	r2,-32720(gp)
   10728:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1072c:	d0e00c17 	ldw	r3,-32720(gp)
   10730:	e0bfff17 	ldw	r2,-4(fp)
   10734:	1885883a 	add	r2,r3,r2
   10738:	d0a00c15 	stw	r2,-32720(gp)
   1073c:	e0bffa17 	ldw	r2,-24(fp)
   10740:	e0bffe15 	stw	r2,-8(fp)
   10744:	e0bffe17 	ldw	r2,-8(fp)
   10748:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1074c:	e0bffb17 	ldw	r2,-20(fp)
} 
   10750:	e037883a 	mov	sp,fp
   10754:	df000017 	ldw	fp,0(sp)
   10758:	dec00104 	addi	sp,sp,4
   1075c:	f800283a 	ret

00010760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10760:	defffe04 	addi	sp,sp,-8
   10764:	dfc00115 	stw	ra,4(sp)
   10768:	df000015 	stw	fp,0(sp)
   1076c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10770:	008000b4 	movhi	r2,2
   10774:	10baca04 	addi	r2,r2,-5336
   10778:	10800017 	ldw	r2,0(r2)
   1077c:	10000526 	beq	r2,zero,10794 <alt_get_errno+0x34>
   10780:	008000b4 	movhi	r2,2
   10784:	10baca04 	addi	r2,r2,-5336
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	103ee83a 	callr	r2
   10790:	00000206 	br	1079c <alt_get_errno+0x3c>
   10794:	008000b4 	movhi	r2,2
   10798:	1082c804 	addi	r2,r2,2848
}
   1079c:	e037883a 	mov	sp,fp
   107a0:	dfc00117 	ldw	ra,4(sp)
   107a4:	df000017 	ldw	fp,0(sp)
   107a8:	dec00204 	addi	sp,sp,8
   107ac:	f800283a 	ret

000107b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   107b0:	defff904 	addi	sp,sp,-28
   107b4:	dfc00615 	stw	ra,24(sp)
   107b8:	df000515 	stw	fp,20(sp)
   107bc:	df000504 	addi	fp,sp,20
   107c0:	e13ffd15 	stw	r4,-12(fp)
   107c4:	e17ffe15 	stw	r5,-8(fp)
   107c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   107cc:	e0bffd17 	ldw	r2,-12(fp)
   107d0:	10000616 	blt	r2,zero,107ec <write+0x3c>
   107d4:	e0bffd17 	ldw	r2,-12(fp)
   107d8:	10c00324 	muli	r3,r2,12
   107dc:	008000b4 	movhi	r2,2
   107e0:	10b54d04 	addi	r2,r2,-10956
   107e4:	1885883a 	add	r2,r3,r2
   107e8:	00000106 	br	107f0 <write+0x40>
   107ec:	0005883a 	mov	r2,zero
   107f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   107f4:	e0bffb17 	ldw	r2,-20(fp)
   107f8:	10002126 	beq	r2,zero,10880 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   107fc:	e0bffb17 	ldw	r2,-20(fp)
   10800:	10800217 	ldw	r2,8(r2)
   10804:	108000cc 	andi	r2,r2,3
   10808:	10001826 	beq	r2,zero,1086c <write+0xbc>
   1080c:	e0bffb17 	ldw	r2,-20(fp)
   10810:	10800017 	ldw	r2,0(r2)
   10814:	10800617 	ldw	r2,24(r2)
   10818:	10001426 	beq	r2,zero,1086c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1081c:	e0bffb17 	ldw	r2,-20(fp)
   10820:	10800017 	ldw	r2,0(r2)
   10824:	10800617 	ldw	r2,24(r2)
   10828:	e0ffff17 	ldw	r3,-4(fp)
   1082c:	e13ffb17 	ldw	r4,-20(fp)
   10830:	e17ffe17 	ldw	r5,-8(fp)
   10834:	180d883a 	mov	r6,r3
   10838:	103ee83a 	callr	r2
   1083c:	e0bffc15 	stw	r2,-16(fp)
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	1000070e 	bge	r2,zero,10864 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   10848:	00107600 	call	10760 <alt_get_errno>
   1084c:	1007883a 	mov	r3,r2
   10850:	e0bffc17 	ldw	r2,-16(fp)
   10854:	0085c83a 	sub	r2,zero,r2
   10858:	18800015 	stw	r2,0(r3)
        return -1;
   1085c:	00bfffc4 	movi	r2,-1
   10860:	00000c06 	br	10894 <write+0xe4>
      }
      return rval;
   10864:	e0bffc17 	ldw	r2,-16(fp)
   10868:	00000a06 	br	10894 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1086c:	00107600 	call	10760 <alt_get_errno>
   10870:	1007883a 	mov	r3,r2
   10874:	00800344 	movi	r2,13
   10878:	18800015 	stw	r2,0(r3)
   1087c:	00000406 	br	10890 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10880:	00107600 	call	10760 <alt_get_errno>
   10884:	1007883a 	mov	r3,r2
   10888:	00801444 	movi	r2,81
   1088c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10890:	00bfffc4 	movi	r2,-1
}
   10894:	e037883a 	mov	sp,fp
   10898:	dfc00117 	ldw	ra,4(sp)
   1089c:	df000017 	ldw	fp,0(sp)
   108a0:	dec00204 	addi	sp,sp,8
   108a4:	f800283a 	ret

000108a8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   108a8:	deffdf04 	addi	sp,sp,-132
   108ac:	dfc02015 	stw	ra,128(sp)
   108b0:	df001f15 	stw	fp,124(sp)
   108b4:	df001f04 	addi	fp,sp,124
   108b8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   108bc:	e0bfe204 	addi	r2,fp,-120
   108c0:	01003fc4 	movi	r4,255
   108c4:	100b883a 	mov	r5,r2
   108c8:	00181440 	call	18144 <OSTaskQuery>
   108cc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   108d0:	e0bffe83 	ldbu	r2,-6(fp)
   108d4:	10803fcc 	andi	r2,r2,255
   108d8:	10000126 	beq	r2,zero,108e0 <__env_lock+0x38>
    return;
   108dc:	00001d06 	br	10954 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   108e0:	e0bfee83 	ldbu	r2,-70(fp)
   108e4:	10803fcc 	andi	r2,r2,255
   108e8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   108ec:	d0e80f17 	ldw	r3,-24516(gp)
   108f0:	e0bffd04 	addi	r2,fp,-12
   108f4:	1809883a 	mov	r4,r3
   108f8:	100b883a 	mov	r5,r2
   108fc:	00167dc0 	call	167dc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   10900:	e0bffe43 	ldbu	r2,-7(fp)
   10904:	10803fcc 	andi	r2,r2,255
   10908:	10000726 	beq	r2,zero,10928 <__env_lock+0x80>
   1090c:	d0a00d17 	ldw	r2,-32716(gp)
   10910:	e0ffe117 	ldw	r3,-124(fp)
   10914:	1880041e 	bne	r3,r2,10928 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   10918:	d0a80e17 	ldw	r2,-24520(gp)
   1091c:	10800044 	addi	r2,r2,1
   10920:	d0a80e15 	stw	r2,-24520(gp)
   10924:	00000a06 	br	10950 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   10928:	d0e80f17 	ldw	r3,-24516(gp)
   1092c:	e0bffe84 	addi	r2,fp,-6
   10930:	1809883a 	mov	r4,r3
   10934:	000b883a 	mov	r5,zero
   10938:	100d883a 	mov	r6,r2
   1093c:	00162f80 	call	162f8 <OSSemPend>
    locks  = 1;
   10940:	00800044 	movi	r2,1
   10944:	d0a80e15 	stw	r2,-24520(gp)
    lockid = id;
   10948:	e0bfe117 	ldw	r2,-124(fp)
   1094c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10950:	0001883a 	nop
}
   10954:	e037883a 	mov	sp,fp
   10958:	dfc00117 	ldw	ra,4(sp)
   1095c:	df000017 	ldw	fp,0(sp)
   10960:	dec00204 	addi	sp,sp,8
   10964:	f800283a 	ret

00010968 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   10968:	defffd04 	addi	sp,sp,-12
   1096c:	dfc00215 	stw	ra,8(sp)
   10970:	df000115 	stw	fp,4(sp)
   10974:	df000104 	addi	fp,sp,4
   10978:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   1097c:	d0a80e17 	ldw	r2,-24520(gp)
   10980:	1000011e 	bne	r2,zero,10988 <__env_unlock+0x20>
    return;
   10984:	00000a06 	br	109b0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   10988:	d0a80e17 	ldw	r2,-24520(gp)
   1098c:	10bfffc4 	addi	r2,r2,-1
   10990:	d0a80e15 	stw	r2,-24520(gp)
   10994:	d0a80e17 	ldw	r2,-24520(gp)
   10998:	1000051e 	bne	r2,zero,109b0 <__env_unlock+0x48>
  {
    lockid = -1;
   1099c:	00bfffc4 	movi	r2,-1
   109a0:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   109a4:	d0a80f17 	ldw	r2,-24516(gp)
   109a8:	1009883a 	mov	r4,r2
   109ac:	00166cc0 	call	166cc <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   109b0:	e037883a 	mov	sp,fp
   109b4:	dfc00117 	ldw	ra,4(sp)
   109b8:	df000017 	ldw	fp,0(sp)
   109bc:	dec00204 	addi	sp,sp,8
   109c0:	f800283a 	ret

000109c4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   109c4:	deffdb04 	addi	sp,sp,-148
   109c8:	dfc02415 	stw	ra,144(sp)
   109cc:	df002315 	stw	fp,140(sp)
   109d0:	df002304 	addi	fp,sp,140
   109d4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   109d8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   109dc:	008000b4 	movhi	r2,2
   109e0:	1082d144 	addi	r2,r2,2885
   109e4:	10800003 	ldbu	r2,0(r2)
   109e8:	10803fcc 	andi	r2,r2,255
   109ec:	10800060 	cmpeqi	r2,r2,1
   109f0:	1000011e 	bne	r2,zero,109f8 <__malloc_lock+0x34>
      return;
   109f4:	00003606 	br	10ad0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   109f8:	e0bfe204 	addi	r2,fp,-120
   109fc:	01003fc4 	movi	r4,255
   10a00:	100b883a 	mov	r5,r2
   10a04:	00181440 	call	18144 <OSTaskQuery>
   10a08:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10a0c:	e0bffe83 	ldbu	r2,-6(fp)
   10a10:	10803fcc 	andi	r2,r2,255
   10a14:	10000126 	beq	r2,zero,10a1c <__malloc_lock+0x58>
    return;
   10a18:	00002d06 	br	10ad0 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   10a1c:	e0bfee83 	ldbu	r2,-70(fp)
   10a20:	10803fcc 	andi	r2,r2,255
   10a24:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   10a28:	d0e81117 	ldw	r3,-24508(gp)
   10a2c:	e0bffd04 	addi	r2,fp,-12
   10a30:	1809883a 	mov	r4,r3
   10a34:	100b883a 	mov	r5,r2
   10a38:	00167dc0 	call	167dc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a3c:	0005303a 	rdctl	r2,status
   10a40:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a44:	e0ffdf17 	ldw	r3,-132(fp)
   10a48:	00bfff84 	movi	r2,-2
   10a4c:	1884703a 	and	r2,r3,r2
   10a50:	1001703a 	wrctl	status,r2
  
  return context;
   10a54:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   10a58:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   10a5c:	e0bffd0b 	ldhu	r2,-12(fp)
   10a60:	10bfffcc 	andi	r2,r2,65535
   10a64:	10000b1e 	bne	r2,zero,10a94 <__malloc_lock+0xd0>
   10a68:	d0a00e17 	ldw	r2,-32712(gp)
   10a6c:	e0ffde17 	ldw	r3,-136(fp)
   10a70:	1880081e 	bne	r3,r2,10a94 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   10a74:	d0a81017 	ldw	r2,-24512(gp)
   10a78:	10800044 	addi	r2,r2,1
   10a7c:	d0a81015 	stw	r2,-24512(gp)
   10a80:	e0bfdd17 	ldw	r2,-140(fp)
   10a84:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a88:	e0bfe017 	ldw	r2,-128(fp)
   10a8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   10a90:	00000e06 	br	10acc <__malloc_lock+0x108>
   10a94:	e0bfdd17 	ldw	r2,-140(fp)
   10a98:	e0bfe115 	stw	r2,-124(fp)
   10a9c:	e0bfe117 	ldw	r2,-124(fp)
   10aa0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   10aa4:	d0e81117 	ldw	r3,-24508(gp)
   10aa8:	e0bffe84 	addi	r2,fp,-6
   10aac:	1809883a 	mov	r4,r3
   10ab0:	000b883a 	mov	r5,zero
   10ab4:	100d883a 	mov	r6,r2
   10ab8:	00162f80 	call	162f8 <OSSemPend>
    locks  = 1;
   10abc:	00800044 	movi	r2,1
   10ac0:	d0a81015 	stw	r2,-24512(gp)
    lockid = id;
   10ac4:	e0bfde17 	ldw	r2,-136(fp)
   10ac8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10acc:	0001883a 	nop
}
   10ad0:	e037883a 	mov	sp,fp
   10ad4:	dfc00117 	ldw	ra,4(sp)
   10ad8:	df000017 	ldw	fp,0(sp)
   10adc:	dec00204 	addi	sp,sp,8
   10ae0:	f800283a 	ret

00010ae4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10ae4:	defff804 	addi	sp,sp,-32
   10ae8:	dfc00715 	stw	ra,28(sp)
   10aec:	df000615 	stw	fp,24(sp)
   10af0:	df000604 	addi	fp,sp,24
   10af4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10af8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10afc:	008000b4 	movhi	r2,2
   10b00:	1082d144 	addi	r2,r2,2885
   10b04:	10800003 	ldbu	r2,0(r2)
   10b08:	10803fcc 	andi	r2,r2,255
   10b0c:	10800060 	cmpeqi	r2,r2,1
   10b10:	1000011e 	bne	r2,zero,10b18 <__malloc_unlock+0x34>
      return;
   10b14:	00002206 	br	10ba0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b18:	0005303a 	rdctl	r2,status
   10b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b20:	e0fffb17 	ldw	r3,-20(fp)
   10b24:	00bfff84 	movi	r2,-2
   10b28:	1884703a 	and	r2,r3,r2
   10b2c:	1001703a 	wrctl	status,r2
  
  return context;
   10b30:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   10b34:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10b38:	d0a81017 	ldw	r2,-24512(gp)
   10b3c:	1000051e 	bne	r2,zero,10b54 <__malloc_unlock+0x70>
   10b40:	e0bffa17 	ldw	r2,-24(fp)
   10b44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b48:	e0bffc17 	ldw	r2,-16(fp)
   10b4c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10b50:	00001306 	br	10ba0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10b54:	d0a81017 	ldw	r2,-24512(gp)
   10b58:	10bfffc4 	addi	r2,r2,-1
   10b5c:	d0a81015 	stw	r2,-24512(gp)
   10b60:	d0a81017 	ldw	r2,-24512(gp)
   10b64:	10000a1e 	bne	r2,zero,10b90 <__malloc_unlock+0xac>
  {
    lockid = -1;
   10b68:	00bfffc4 	movi	r2,-1
   10b6c:	d0a00e15 	stw	r2,-32712(gp)
   10b70:	e0bffa17 	ldw	r2,-24(fp)
   10b74:	e0bffd15 	stw	r2,-12(fp)
   10b78:	e0bffd17 	ldw	r2,-12(fp)
   10b7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10b80:	d0a81117 	ldw	r2,-24508(gp)
   10b84:	1009883a 	mov	r4,r2
   10b88:	00166cc0 	call	166cc <OSSemPost>
   10b8c:	00000406 	br	10ba0 <__malloc_unlock+0xbc>
   10b90:	e0bffa17 	ldw	r2,-24(fp)
   10b94:	e0bffe15 	stw	r2,-8(fp)
   10b98:	e0bffe17 	ldw	r2,-8(fp)
   10b9c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10ba0:	e037883a 	mov	sp,fp
   10ba4:	dfc00117 	ldw	ra,4(sp)
   10ba8:	df000017 	ldw	fp,0(sp)
   10bac:	dec00204 	addi	sp,sp,8
   10bb0:	f800283a 	ret

00010bb4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10bb4:	defff704 	addi	sp,sp,-36
   10bb8:	dfc00815 	stw	ra,32(sp)
   10bbc:	df000715 	stw	fp,28(sp)
   10bc0:	df000704 	addi	fp,sp,28
   10bc4:	e13ffd15 	stw	r4,-12(fp)
   10bc8:	e17ffe15 	stw	r5,-8(fp)
   10bcc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10bd0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10bd4:	e0bfff17 	ldw	r2,-4(fp)
   10bd8:	1000021e 	bne	r2,zero,10be4 <OSEventNameGet+0x30>
        return (0);
   10bdc:	0005883a 	mov	r2,zero
   10be0:	00003706 	br	10cc0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10be4:	e0bffd17 	ldw	r2,-12(fp)
   10be8:	1000051e 	bne	r2,zero,10c00 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	00c00104 	movi	r3,4
   10bf4:	10c00005 	stb	r3,0(r2)
        return (0);
   10bf8:	0005883a 	mov	r2,zero
   10bfc:	00003006 	br	10cc0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	1000051e 	bne	r2,zero,10c1c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10c08:	e0bfff17 	ldw	r2,-4(fp)
   10c0c:	00c00304 	movi	r3,12
   10c10:	10c00005 	stb	r3,0(r2)
        return (0);
   10c14:	0005883a 	mov	r2,zero
   10c18:	00002906 	br	10cc0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10c1c:	d0a82003 	ldbu	r2,-24448(gp)
   10c20:	10803fcc 	andi	r2,r2,255
   10c24:	10000526 	beq	r2,zero,10c3c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10c28:	e0bfff17 	ldw	r2,-4(fp)
   10c2c:	00c00444 	movi	r3,17
   10c30:	10c00005 	stb	r3,0(r2)
        return (0);
   10c34:	0005883a 	mov	r2,zero
   10c38:	00002106 	br	10cc0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10c3c:	e0bffd17 	ldw	r2,-12(fp)
   10c40:	10800003 	ldbu	r2,0(r2)
   10c44:	10803fcc 	andi	r2,r2,255
   10c48:	10bfffc4 	addi	r2,r2,-1
   10c4c:	10800128 	cmpgeui	r2,r2,4
   10c50:	10000526 	beq	r2,zero,10c68 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10c54:	e0bfff17 	ldw	r2,-4(fp)
   10c58:	00c00044 	movi	r3,1
   10c5c:	10c00005 	stb	r3,0(r2)
             return (0);
   10c60:	0005883a 	mov	r2,zero
   10c64:	00001606 	br	10cc0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10c68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c6c:	0005303a 	rdctl	r2,status
   10c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c74:	e0fffb17 	ldw	r3,-20(fp)
   10c78:	00bfff84 	movi	r2,-2
   10c7c:	1884703a 	and	r2,r3,r2
   10c80:	1001703a 	wrctl	status,r2
  
  return context;
   10c84:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   10c88:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   10c8c:	e0bffd17 	ldw	r2,-12(fp)
   10c90:	10800384 	addi	r2,r2,14
   10c94:	e13ffe17 	ldw	r4,-8(fp)
   10c98:	100b883a 	mov	r5,r2
   10c9c:	00126080 	call	12608 <OS_StrCopy>
   10ca0:	e0bffa05 	stb	r2,-24(fp)
   10ca4:	e0bff917 	ldw	r2,-28(fp)
   10ca8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cac:	e0bffc17 	ldw	r2,-16(fp)
   10cb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10cb4:	e0bfff17 	ldw	r2,-4(fp)
   10cb8:	10000005 	stb	zero,0(r2)
    return (len);
   10cbc:	e0bffa03 	ldbu	r2,-24(fp)
}
   10cc0:	e037883a 	mov	sp,fp
   10cc4:	dfc00117 	ldw	ra,4(sp)
   10cc8:	df000017 	ldw	fp,0(sp)
   10ccc:	dec00204 	addi	sp,sp,8
   10cd0:	f800283a 	ret

00010cd4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10cd4:	defff604 	addi	sp,sp,-40
   10cd8:	dfc00915 	stw	ra,36(sp)
   10cdc:	df000815 	stw	fp,32(sp)
   10ce0:	df000804 	addi	fp,sp,32
   10ce4:	e13ffd15 	stw	r4,-12(fp)
   10ce8:	e17ffe15 	stw	r5,-8(fp)
   10cec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10cf0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10cf4:	e0bfff17 	ldw	r2,-4(fp)
   10cf8:	1000011e 	bne	r2,zero,10d00 <OSEventNameSet+0x2c>
        return;
   10cfc:	00003f06 	br	10dfc <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10d00:	e0bffd17 	ldw	r2,-12(fp)
   10d04:	1000041e 	bne	r2,zero,10d18 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   10d08:	e0bfff17 	ldw	r2,-4(fp)
   10d0c:	00c00104 	movi	r3,4
   10d10:	10c00005 	stb	r3,0(r2)
        return;
   10d14:	00003906 	br	10dfc <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10d18:	e0bffe17 	ldw	r2,-8(fp)
   10d1c:	1000041e 	bne	r2,zero,10d30 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10d20:	e0bfff17 	ldw	r2,-4(fp)
   10d24:	00c00304 	movi	r3,12
   10d28:	10c00005 	stb	r3,0(r2)
        return;
   10d2c:	00003306 	br	10dfc <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10d30:	d0a82003 	ldbu	r2,-24448(gp)
   10d34:	10803fcc 	andi	r2,r2,255
   10d38:	10000426 	beq	r2,zero,10d4c <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   10d3c:	e0bfff17 	ldw	r2,-4(fp)
   10d40:	00c00484 	movi	r3,18
   10d44:	10c00005 	stb	r3,0(r2)
        return;
   10d48:	00002c06 	br	10dfc <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   10d4c:	e0bffd17 	ldw	r2,-12(fp)
   10d50:	10800003 	ldbu	r2,0(r2)
   10d54:	10803fcc 	andi	r2,r2,255
   10d58:	10bfffc4 	addi	r2,r2,-1
   10d5c:	10800128 	cmpgeui	r2,r2,4
   10d60:	10000426 	beq	r2,zero,10d74 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10d64:	e0bfff17 	ldw	r2,-4(fp)
   10d68:	00c00044 	movi	r3,1
   10d6c:	10c00005 	stb	r3,0(r2)
             return;
   10d70:	00002206 	br	10dfc <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10d74:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d78:	0005303a 	rdctl	r2,status
   10d7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d80:	e0fffa17 	ldw	r3,-24(fp)
   10d84:	00bfff84 	movi	r2,-2
   10d88:	1884703a 	and	r2,r3,r2
   10d8c:	1001703a 	wrctl	status,r2
  
  return context;
   10d90:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   10d94:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   10d98:	e13ffe17 	ldw	r4,-8(fp)
   10d9c:	001267c0 	call	1267c <OS_StrLen>
   10da0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   10da4:	e0bff903 	ldbu	r2,-28(fp)
   10da8:	10800830 	cmpltui	r2,r2,32
   10dac:	1000081e 	bne	r2,zero,10dd0 <OSEventNameSet+0xfc>
   10db0:	e0bff817 	ldw	r2,-32(fp)
   10db4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	00c002c4 	movi	r3,11
   10dc8:	10c00005 	stb	r3,0(r2)
        return;
   10dcc:	00000b06 	br	10dfc <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   10dd0:	e0bffd17 	ldw	r2,-12(fp)
   10dd4:	10800384 	addi	r2,r2,14
   10dd8:	1009883a 	mov	r4,r2
   10ddc:	e17ffe17 	ldw	r5,-8(fp)
   10de0:	00126080 	call	12608 <OS_StrCopy>
   10de4:	e0bff817 	ldw	r2,-32(fp)
   10de8:	e0bffc15 	stw	r2,-16(fp)
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10df4:	e0bfff17 	ldw	r2,-4(fp)
   10df8:	10000005 	stb	zero,0(r2)
}
   10dfc:	e037883a 	mov	sp,fp
   10e00:	dfc00117 	ldw	ra,4(sp)
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00204 	addi	sp,sp,8
   10e0c:	f800283a 	ret

00010e10 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10e10:	deffed04 	addi	sp,sp,-76
   10e14:	dfc01215 	stw	ra,72(sp)
   10e18:	df001115 	stw	fp,68(sp)
   10e1c:	df001104 	addi	fp,sp,68
   10e20:	e13ffc15 	stw	r4,-16(fp)
   10e24:	e17ffd15 	stw	r5,-12(fp)
   10e28:	e1bffe15 	stw	r6,-8(fp)
   10e2c:	3805883a 	mov	r2,r7
   10e30:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   10e34:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10e38:	e0800217 	ldw	r2,8(fp)
   10e3c:	1000021e 	bne	r2,zero,10e48 <OSEventPendMulti+0x38>
        return (0);
   10e40:	0005883a 	mov	r2,zero
   10e44:	00017106 	br	1140c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	1000051e 	bne	r2,zero,10e64 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10e50:	e0800217 	ldw	r2,8(fp)
   10e54:	00c00104 	movi	r3,4
   10e58:	10c00005 	stb	r3,0(r2)
        return (0);
   10e5c:	0005883a 	mov	r2,zero
   10e60:	00016a06 	br	1140c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10e64:	e0bffd17 	ldw	r2,-12(fp)
   10e68:	1000051e 	bne	r2,zero,10e80 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10e6c:	e0800217 	ldw	r2,8(fp)
   10e70:	00c00104 	movi	r3,4
   10e74:	10c00005 	stb	r3,0(r2)
        return (0);
   10e78:	0005883a 	mov	r2,zero
   10e7c:	00016306 	br	1140c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   10e80:	e0bffe17 	ldw	r2,-8(fp)
   10e84:	1000051e 	bne	r2,zero,10e9c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   10e88:	e0800217 	ldw	r2,8(fp)
   10e8c:	00c00104 	movi	r3,4
   10e90:	10c00005 	stb	r3,0(r2)
        return (0);
   10e94:	0005883a 	mov	r2,zero
   10e98:	00015c06 	br	1140c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   10e9c:	e0bffd17 	ldw	r2,-12(fp)
   10ea0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   10eac:	e0bfef17 	ldw	r2,-68(fp)
   10eb0:	10800017 	ldw	r2,0(r2)
   10eb4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   10eb8:	00001906 	br	10f20 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   10ebc:	e0bff017 	ldw	r2,-64(fp)
   10ec0:	10800003 	ldbu	r2,0(r2)
   10ec4:	10803fcc 	andi	r2,r2,255
   10ec8:	10c000a0 	cmpeqi	r3,r2,2
   10ecc:	1800091e 	bne	r3,zero,10ef4 <OSEventPendMulti+0xe4>
   10ed0:	10c000e0 	cmpeqi	r3,r2,3
   10ed4:	1800091e 	bne	r3,zero,10efc <OSEventPendMulti+0xec>
   10ed8:	10800060 	cmpeqi	r2,r2,1
   10edc:	1000091e 	bne	r2,zero,10f04 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10ee0:	e0800217 	ldw	r2,8(fp)
   10ee4:	00c00044 	movi	r3,1
   10ee8:	10c00005 	stb	r3,0(r2)
                 return (0);
   10eec:	0005883a 	mov	r2,zero
   10ef0:	00014606 	br	1140c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10ef4:	0001883a 	nop
   10ef8:	00000306 	br	10f08 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10efc:	0001883a 	nop
   10f00:	00000106 	br	10f08 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   10f04:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10f08:	e0bfef17 	ldw	r2,-68(fp)
   10f0c:	10800104 	addi	r2,r2,4
   10f10:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10f14:	e0bfef17 	ldw	r2,-68(fp)
   10f18:	10800017 	ldw	r2,0(r2)
   10f1c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10f20:	e0bff017 	ldw	r2,-64(fp)
   10f24:	103fe51e 	bne	r2,zero,10ebc <__alt_mem_Flash_flash_data+0xf4010ebc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10f28:	d0a82003 	ldbu	r2,-24448(gp)
   10f2c:	10803fcc 	andi	r2,r2,255
   10f30:	10000526 	beq	r2,zero,10f48 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   10f34:	e0800217 	ldw	r2,8(fp)
   10f38:	00c00084 	movi	r3,2
   10f3c:	10c00005 	stb	r3,0(r2)
        return (0);
   10f40:	0005883a 	mov	r2,zero
   10f44:	00013106 	br	1140c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10f48:	d0a81203 	ldbu	r2,-24504(gp)
   10f4c:	10803fcc 	andi	r2,r2,255
   10f50:	10000526 	beq	r2,zero,10f68 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   10f54:	e0800217 	ldw	r2,8(fp)
   10f58:	00c00344 	movi	r3,13
   10f5c:	10c00005 	stb	r3,0(r2)
        return (0);
   10f60:	0005883a 	mov	r2,zero
   10f64:	00012906 	br	1140c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f68:	0005303a 	rdctl	r2,status
   10f6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f70:	e0fff517 	ldw	r3,-44(fp)
   10f74:	00bfff84 	movi	r2,-2
   10f78:	1884703a 	and	r2,r3,r2
   10f7c:	1001703a 	wrctl	status,r2
  
  return context;
   10f80:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   10f84:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   10f88:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   10f8c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   10f90:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   10f9c:	e0bfef17 	ldw	r2,-68(fp)
   10fa0:	10800017 	ldw	r2,0(r2)
   10fa4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   10fa8:	00008106 	br	111b0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   10fac:	e0bff017 	ldw	r2,-64(fp)
   10fb0:	10800003 	ldbu	r2,0(r2)
   10fb4:	10803fcc 	andi	r2,r2,255
   10fb8:	10c000a0 	cmpeqi	r3,r2,2
   10fbc:	18003c1e 	bne	r3,zero,110b0 <OSEventPendMulti+0x2a0>
   10fc0:	10c000e0 	cmpeqi	r3,r2,3
   10fc4:	1800031e 	bne	r3,zero,10fd4 <OSEventPendMulti+0x1c4>
   10fc8:	10800060 	cmpeqi	r2,r2,1
   10fcc:	10001e1e 	bne	r2,zero,11048 <OSEventPendMulti+0x238>
   10fd0:	00006606 	br	1116c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10fd4:	e0bff017 	ldw	r2,-64(fp)
   10fd8:	1080020b 	ldhu	r2,8(r2)
   10fdc:	10bfffcc 	andi	r2,r2,65535
   10fe0:	10001526 	beq	r2,zero,11038 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10fe4:	e0bff017 	ldw	r2,-64(fp)
   10fe8:	1080020b 	ldhu	r2,8(r2)
   10fec:	10bfffc4 	addi	r2,r2,-1
   10ff0:	1007883a 	mov	r3,r2
   10ff4:	e0bff017 	ldw	r2,-64(fp)
   10ff8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   10ffc:	e0bffd17 	ldw	r2,-12(fp)
   11000:	10c00104 	addi	r3,r2,4
   11004:	e0fffd15 	stw	r3,-12(fp)
   11008:	e0fff017 	ldw	r3,-64(fp)
   1100c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   11010:	00800044 	movi	r2,1
   11014:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   11018:	e0bffe17 	ldw	r2,-8(fp)
   1101c:	10c00104 	addi	r3,r2,4
   11020:	e0fffe15 	stw	r3,-8(fp)
   11024:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   11028:	e0bff18b 	ldhu	r2,-58(fp)
   1102c:	10800044 	addi	r2,r2,1
   11030:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   11034:	00005806 	br	11198 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   11038:	e0bff203 	ldbu	r2,-56(fp)
   1103c:	10800054 	ori	r2,r2,1
   11040:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11044:	00005406 	br	11198 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   11048:	e0bff017 	ldw	r2,-64(fp)
   1104c:	10800117 	ldw	r2,4(r2)
   11050:	10001326 	beq	r2,zero,110a0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   11054:	e0bffe17 	ldw	r2,-8(fp)
   11058:	10c00104 	addi	r3,r2,4
   1105c:	e0fffe15 	stw	r3,-8(fp)
   11060:	e0fff017 	ldw	r3,-64(fp)
   11064:	18c00117 	ldw	r3,4(r3)
   11068:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1106c:	e0bff017 	ldw	r2,-64(fp)
   11070:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   11074:	e0bffd17 	ldw	r2,-12(fp)
   11078:	10c00104 	addi	r3,r2,4
   1107c:	e0fffd15 	stw	r3,-12(fp)
   11080:	e0fff017 	ldw	r3,-64(fp)
   11084:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   11088:	00800044 	movi	r2,1
   1108c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11090:	e0bff18b 	ldhu	r2,-58(fp)
   11094:	10800044 	addi	r2,r2,1
   11098:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1109c:	00003e06 	br	11198 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   110a0:	e0bff203 	ldbu	r2,-56(fp)
   110a4:	10800094 	ori	r2,r2,2
   110a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   110ac:	00003a06 	br	11198 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   110b0:	e0bff017 	ldw	r2,-64(fp)
   110b4:	10800117 	ldw	r2,4(r2)
   110b8:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   110bc:	e0bff417 	ldw	r2,-48(fp)
   110c0:	1080058b 	ldhu	r2,22(r2)
   110c4:	10bfffcc 	andi	r2,r2,65535
   110c8:	10002426 	beq	r2,zero,1115c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   110cc:	e0bffe17 	ldw	r2,-8(fp)
   110d0:	10c00104 	addi	r3,r2,4
   110d4:	e0fffe15 	stw	r3,-8(fp)
   110d8:	e0fff417 	ldw	r3,-48(fp)
   110dc:	18c00417 	ldw	r3,16(r3)
   110e0:	19400104 	addi	r5,r3,4
   110e4:	e13ff417 	ldw	r4,-48(fp)
   110e8:	21400415 	stw	r5,16(r4)
   110ec:	18c00017 	ldw	r3,0(r3)
   110f0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   110f4:	e0bff417 	ldw	r2,-48(fp)
   110f8:	10c00417 	ldw	r3,16(r2)
   110fc:	e0bff417 	ldw	r2,-48(fp)
   11100:	10800217 	ldw	r2,8(r2)
   11104:	1880041e 	bne	r3,r2,11118 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   11108:	e0bff417 	ldw	r2,-48(fp)
   1110c:	10c00117 	ldw	r3,4(r2)
   11110:	e0bff417 	ldw	r2,-48(fp)
   11114:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   11118:	e0bff417 	ldw	r2,-48(fp)
   1111c:	1080058b 	ldhu	r2,22(r2)
   11120:	10bfffc4 	addi	r2,r2,-1
   11124:	1007883a 	mov	r3,r2
   11128:	e0bff417 	ldw	r2,-48(fp)
   1112c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   11130:	e0bffd17 	ldw	r2,-12(fp)
   11134:	10c00104 	addi	r3,r2,4
   11138:	e0fffd15 	stw	r3,-12(fp)
   1113c:	e0fff017 	ldw	r3,-64(fp)
   11140:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   11144:	00800044 	movi	r2,1
   11148:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1114c:	e0bff18b 	ldhu	r2,-58(fp)
   11150:	10800044 	addi	r2,r2,1
   11154:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   11158:	00000f06 	br	11198 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1115c:	e0bff203 	ldbu	r2,-56(fp)
   11160:	10800114 	ori	r2,r2,4
   11164:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11168:	00000b06 	br	11198 <OSEventPendMulti+0x388>
   1116c:	e0bff317 	ldw	r2,-52(fp)
   11170:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11174:	e0bff617 	ldw	r2,-40(fp)
   11178:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1117c:	e0bffd17 	ldw	r2,-12(fp)
   11180:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   11184:	e0800217 	ldw	r2,8(fp)
   11188:	00c00044 	movi	r3,1
   1118c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   11190:	e0bff18b 	ldhu	r2,-58(fp)
   11194:	00009d06 	br	1140c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   11198:	e0bfef17 	ldw	r2,-68(fp)
   1119c:	10800104 	addi	r2,r2,4
   111a0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   111a4:	e0bfef17 	ldw	r2,-68(fp)
   111a8:	10800017 	ldw	r2,0(r2)
   111ac:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   111b0:	e0bff017 	ldw	r2,-64(fp)
   111b4:	103f7d1e 	bne	r2,zero,10fac <__alt_mem_Flash_flash_data+0xf4010fac>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   111b8:	e0bff103 	ldbu	r2,-60(fp)
   111bc:	10800058 	cmpnei	r2,r2,1
   111c0:	10000a1e 	bne	r2,zero,111ec <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   111c4:	e0bffd17 	ldw	r2,-12(fp)
   111c8:	10000015 	stw	zero,0(r2)
   111cc:	e0bff317 	ldw	r2,-52(fp)
   111d0:	e0bff715 	stw	r2,-36(fp)
   111d4:	e0bff717 	ldw	r2,-36(fp)
   111d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   111dc:	e0800217 	ldw	r2,8(fp)
   111e0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   111e4:	e0bff18b 	ldhu	r2,-58(fp)
   111e8:	00008806 	br	1140c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   111ec:	d0a82117 	ldw	r2,-24444(gp)
   111f0:	d0e82117 	ldw	r3,-24444(gp)
   111f4:	19000c03 	ldbu	r4,48(r3)
   111f8:	e0fff203 	ldbu	r3,-56(fp)
   111fc:	20c6b03a 	or	r3,r4,r3
   11200:	1809883a 	mov	r4,r3
   11204:	00ffe004 	movi	r3,-128
   11208:	20c6b03a 	or	r3,r4,r3
   1120c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11210:	d0a82117 	ldw	r2,-24444(gp)
   11214:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   11218:	d0a82117 	ldw	r2,-24444(gp)
   1121c:	e0ffff0b 	ldhu	r3,-4(fp)
   11220:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   11224:	e13ffc17 	ldw	r4,-16(fp)
   11228:	0011d580 	call	11d58 <OS_EventTaskWaitMulti>
   1122c:	e0bff317 	ldw	r2,-52(fp)
   11230:	e0bff815 	stw	r2,-32(fp)
   11234:	e0bff817 	ldw	r2,-32(fp)
   11238:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1123c:	00124cc0 	call	124cc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11240:	0005303a 	rdctl	r2,status
   11244:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11248:	e0fff917 	ldw	r3,-28(fp)
   1124c:	00bfff84 	movi	r2,-2
   11250:	1884703a 	and	r2,r3,r2
   11254:	1001703a 	wrctl	status,r2
  
  return context;
   11258:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1125c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   11260:	d0a82117 	ldw	r2,-24444(gp)
   11264:	10800c43 	ldbu	r2,49(r2)
   11268:	10803fcc 	andi	r2,r2,255
   1126c:	10000226 	beq	r2,zero,11278 <OSEventPendMulti+0x468>
   11270:	108000a0 	cmpeqi	r2,r2,2
   11274:	10001826 	beq	r2,zero,112d8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   11278:	d0a82117 	ldw	r2,-24444(gp)
   1127c:	10800717 	ldw	r2,28(r2)
   11280:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   11284:	e0bff017 	ldw	r2,-64(fp)
   11288:	10000b26 	beq	r2,zero,112b8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1128c:	e0bffd17 	ldw	r2,-12(fp)
   11290:	10c00104 	addi	r3,r2,4
   11294:	e0fffd15 	stw	r3,-12(fp)
   11298:	e0fff017 	ldw	r3,-64(fp)
   1129c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   112a8:	e0bff18b 	ldhu	r2,-58(fp)
   112ac:	10800044 	addi	r2,r2,1
   112b0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   112b4:	00000d06 	br	112ec <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   112b8:	d0a82117 	ldw	r2,-24444(gp)
   112bc:	00c00044 	movi	r3,1
   112c0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   112c4:	d0a82117 	ldw	r2,-24444(gp)
   112c8:	1009883a 	mov	r4,r2
   112cc:	e17ffc17 	ldw	r5,-16(fp)
   112d0:	0011f580 	call	11f58 <OS_EventTaskRemoveMulti>
             }
			 break;
   112d4:	00000506 	br	112ec <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   112d8:	d0a82117 	ldw	r2,-24444(gp)
   112dc:	1009883a 	mov	r4,r2
   112e0:	e17ffc17 	ldw	r5,-16(fp)
   112e4:	0011f580 	call	11f58 <OS_EventTaskRemoveMulti>
             break;
   112e8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   112ec:	d0a82117 	ldw	r2,-24444(gp)
   112f0:	10800c43 	ldbu	r2,49(r2)
   112f4:	10803fcc 	andi	r2,r2,255
   112f8:	10000326 	beq	r2,zero,11308 <OSEventPendMulti+0x4f8>
   112fc:	108000a0 	cmpeqi	r2,r2,2
   11300:	1000231e 	bne	r2,zero,11390 <OSEventPendMulti+0x580>
   11304:	00002a06 	br	113b0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   11308:	e0bff017 	ldw	r2,-64(fp)
   1130c:	10800003 	ldbu	r2,0(r2)
   11310:	10803fcc 	andi	r2,r2,255
   11314:	0080100e 	bge	zero,r2,11358 <OSEventPendMulti+0x548>
   11318:	10c000d0 	cmplti	r3,r2,3
   1131c:	1800071e 	bne	r3,zero,1133c <OSEventPendMulti+0x52c>
   11320:	108000e0 	cmpeqi	r2,r2,3
   11324:	10000c26 	beq	r2,zero,11358 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   11328:	e0bffe17 	ldw	r2,-8(fp)
   1132c:	10c00104 	addi	r3,r2,4
   11330:	e0fffe15 	stw	r3,-8(fp)
   11334:	10000015 	stw	zero,0(r2)
                      break;
   11338:	00001206 	br	11384 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1133c:	e0bffe17 	ldw	r2,-8(fp)
   11340:	10c00104 	addi	r3,r2,4
   11344:	e0fffe15 	stw	r3,-8(fp)
   11348:	d0e82117 	ldw	r3,-24444(gp)
   1134c:	18c00917 	ldw	r3,36(r3)
   11350:	10c00015 	stw	r3,0(r2)
                      break;
   11354:	00000b06 	br	11384 <OSEventPendMulti+0x574>
   11358:	e0bff317 	ldw	r2,-52(fp)
   1135c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11360:	e0bffa17 	ldw	r2,-24(fp)
   11364:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   11368:	e0bffd17 	ldw	r2,-12(fp)
   1136c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   11370:	e0800217 	ldw	r2,8(fp)
   11374:	00c00044 	movi	r3,1
   11378:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1137c:	e0bff18b 	ldhu	r2,-58(fp)
   11380:	00002206 	br	1140c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   11384:	e0800217 	ldw	r2,8(fp)
   11388:	10000005 	stb	zero,0(r2)
             break;
   1138c:	00001006 	br	113d0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   11390:	e0bffe17 	ldw	r2,-8(fp)
   11394:	10c00104 	addi	r3,r2,4
   11398:	e0fffe15 	stw	r3,-8(fp)
   1139c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   113a0:	e0800217 	ldw	r2,8(fp)
   113a4:	00c00384 	movi	r3,14
   113a8:	10c00005 	stb	r3,0(r2)
             break;
   113ac:	00000806 	br	113d0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   113b0:	e0bffe17 	ldw	r2,-8(fp)
   113b4:	10c00104 	addi	r3,r2,4
   113b8:	e0fffe15 	stw	r3,-8(fp)
   113bc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   113c0:	e0800217 	ldw	r2,8(fp)
   113c4:	00c00284 	movi	r3,10
   113c8:	10c00005 	stb	r3,0(r2)
             break;
   113cc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   113d0:	d0a82117 	ldw	r2,-24444(gp)
   113d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   113d8:	d0a82117 	ldw	r2,-24444(gp)
   113dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   113e0:	d0a82117 	ldw	r2,-24444(gp)
   113e4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   113e8:	d0a82117 	ldw	r2,-24444(gp)
   113ec:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   113f0:	d0a82117 	ldw	r2,-24444(gp)
   113f4:	10000915 	stw	zero,36(r2)
   113f8:	e0bff317 	ldw	r2,-52(fp)
   113fc:	e0bffb15 	stw	r2,-20(fp)
   11400:	e0bffb17 	ldw	r2,-20(fp)
   11404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   11408:	e0bff18b 	ldhu	r2,-58(fp)
}
   1140c:	e037883a 	mov	sp,fp
   11410:	dfc00117 	ldw	ra,4(sp)
   11414:	df000017 	ldw	fp,0(sp)
   11418:	dec00204 	addi	sp,sp,8
   1141c:	f800283a 	ret

00011420 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   11420:	defffe04 	addi	sp,sp,-8
   11424:	dfc00115 	stw	ra,4(sp)
   11428:	df000015 	stw	fp,0(sp)
   1142c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   11430:	001bde40 	call	1bde4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   11434:	00121940 	call	12194 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   11438:	00121d80 	call	121d8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1143c:	00123380 	call	12338 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   11440:	00120b80 	call	120b8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   11444:	00142b80 	call	142b8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   11448:	0014c000 	call	14c00 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1144c:	0015e340 	call	15e34 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   11450:	00122400 	call	12240 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   11454:	00122bc0 	call	122bc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   11458:	001be000 	call	1be00 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1145c:	0012ba40 	call	12ba4 <OSDebugInit>
#endif
}
   11460:	e037883a 	mov	sp,fp
   11464:	dfc00117 	ldw	ra,4(sp)
   11468:	df000017 	ldw	fp,0(sp)
   1146c:	dec00204 	addi	sp,sp,8
   11470:	f800283a 	ret

00011474 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   11474:	defffc04 	addi	sp,sp,-16
   11478:	df000315 	stw	fp,12(sp)
   1147c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11480:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   11484:	d0a81243 	ldbu	r2,-24503(gp)
   11488:	10803fcc 	andi	r2,r2,255
   1148c:	10800058 	cmpnei	r2,r2,1
   11490:	1000131e 	bne	r2,zero,114e0 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11494:	0005303a 	rdctl	r2,status
   11498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1149c:	e0fffe17 	ldw	r3,-8(fp)
   114a0:	00bfff84 	movi	r2,-2
   114a4:	1884703a 	and	r2,r3,r2
   114a8:	1001703a 	wrctl	status,r2
  
  return context;
   114ac:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   114b0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   114b4:	d0a82003 	ldbu	r2,-24448(gp)
   114b8:	10803fcc 	andi	r2,r2,255
   114bc:	10803fe0 	cmpeqi	r2,r2,255
   114c0:	1000031e 	bne	r2,zero,114d0 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   114c4:	d0a82003 	ldbu	r2,-24448(gp)
   114c8:	10800044 	addi	r2,r2,1
   114cc:	d0a82005 	stb	r2,-24448(gp)
   114d0:	e0bffd17 	ldw	r2,-12(fp)
   114d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114d8:	e0bfff17 	ldw	r2,-4(fp)
   114dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   114f0:	defffb04 	addi	sp,sp,-20
   114f4:	dfc00415 	stw	ra,16(sp)
   114f8:	df000315 	stw	fp,12(sp)
   114fc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11500:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   11504:	d0a81243 	ldbu	r2,-24503(gp)
   11508:	10803fcc 	andi	r2,r2,255
   1150c:	10800058 	cmpnei	r2,r2,1
   11510:	10002f1e 	bne	r2,zero,115d0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11514:	0005303a 	rdctl	r2,status
   11518:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1151c:	e0fffe17 	ldw	r3,-8(fp)
   11520:	00bfff84 	movi	r2,-2
   11524:	1884703a 	and	r2,r3,r2
   11528:	1001703a 	wrctl	status,r2
  
  return context;
   1152c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11530:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   11534:	d0a82003 	ldbu	r2,-24448(gp)
   11538:	10803fcc 	andi	r2,r2,255
   1153c:	10000326 	beq	r2,zero,1154c <OSIntExit+0x5c>
            OSIntNesting--;
   11540:	d0a82003 	ldbu	r2,-24448(gp)
   11544:	10bfffc4 	addi	r2,r2,-1
   11548:	d0a82005 	stb	r2,-24448(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1154c:	d0a82003 	ldbu	r2,-24448(gp)
   11550:	10803fcc 	andi	r2,r2,255
   11554:	10001a1e 	bne	r2,zero,115c0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   11558:	d0a81203 	ldbu	r2,-24504(gp)
   1155c:	10803fcc 	andi	r2,r2,255
   11560:	1000171e 	bne	r2,zero,115c0 <OSIntExit+0xd0>
                OS_SchedNew();
   11564:	00125980 	call	12598 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   11568:	d0e81403 	ldbu	r3,-24496(gp)
   1156c:	d0a81443 	ldbu	r2,-24495(gp)
   11570:	18c03fcc 	andi	r3,r3,255
   11574:	10803fcc 	andi	r2,r2,255
   11578:	18801126 	beq	r3,r2,115c0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   1157c:	d0a81403 	ldbu	r2,-24496(gp)
   11580:	10c03fcc 	andi	r3,r2,255
   11584:	008000b4 	movhi	r2,2
   11588:	109f7104 	addi	r2,r2,32196
   1158c:	18c7883a 	add	r3,r3,r3
   11590:	18c7883a 	add	r3,r3,r3
   11594:	10c5883a 	add	r2,r2,r3
   11598:	10800017 	ldw	r2,0(r2)
   1159c:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   115a0:	d0a81c17 	ldw	r2,-24464(gp)
   115a4:	10c00e17 	ldw	r3,56(r2)
   115a8:	18c00044 	addi	r3,r3,1
   115ac:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   115b0:	d0a81717 	ldw	r2,-24484(gp)
   115b4:	10800044 	addi	r2,r2,1
   115b8:	d0a81715 	stw	r2,-24484(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   115bc:	001bb240 	call	1bb24 <OSCtxSw>
   115c0:	e0bffd17 	ldw	r2,-12(fp)
   115c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c8:	e0bfff17 	ldw	r2,-4(fp)
   115cc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   115d0:	e037883a 	mov	sp,fp
   115d4:	dfc00117 	ldw	ra,4(sp)
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00204 	addi	sp,sp,8
   115e0:	f800283a 	ret

000115e4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   115e4:	defffc04 	addi	sp,sp,-16
   115e8:	df000315 	stw	fp,12(sp)
   115ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   115f0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   115f4:	d0a81243 	ldbu	r2,-24503(gp)
   115f8:	10803fcc 	andi	r2,r2,255
   115fc:	10800058 	cmpnei	r2,r2,1
   11600:	1000161e 	bne	r2,zero,1165c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11604:	0005303a 	rdctl	r2,status
   11608:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1160c:	e0fffe17 	ldw	r3,-8(fp)
   11610:	00bfff84 	movi	r2,-2
   11614:	1884703a 	and	r2,r3,r2
   11618:	1001703a 	wrctl	status,r2
  
  return context;
   1161c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11620:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   11624:	d0a82003 	ldbu	r2,-24448(gp)
   11628:	10803fcc 	andi	r2,r2,255
   1162c:	1000071e 	bne	r2,zero,1164c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   11630:	d0a81203 	ldbu	r2,-24504(gp)
   11634:	10803fcc 	andi	r2,r2,255
   11638:	10803fe0 	cmpeqi	r2,r2,255
   1163c:	1000031e 	bne	r2,zero,1164c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   11640:	d0a81203 	ldbu	r2,-24504(gp)
   11644:	10800044 	addi	r2,r2,1
   11648:	d0a81205 	stb	r2,-24504(gp)
   1164c:	e0bffd17 	ldw	r2,-12(fp)
   11650:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1165c:	e037883a 	mov	sp,fp
   11660:	df000017 	ldw	fp,0(sp)
   11664:	dec00104 	addi	sp,sp,4
   11668:	f800283a 	ret

0001166c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   1166c:	defff804 	addi	sp,sp,-32
   11670:	dfc00715 	stw	ra,28(sp)
   11674:	df000615 	stw	fp,24(sp)
   11678:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1167c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   11680:	d0a81243 	ldbu	r2,-24503(gp)
   11684:	10803fcc 	andi	r2,r2,255
   11688:	10800058 	cmpnei	r2,r2,1
   1168c:	1000281e 	bne	r2,zero,11730 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11690:	0005303a 	rdctl	r2,status
   11694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11698:	e0fffb17 	ldw	r3,-20(fp)
   1169c:	00bfff84 	movi	r2,-2
   116a0:	1884703a 	and	r2,r3,r2
   116a4:	1001703a 	wrctl	status,r2
  
  return context;
   116a8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   116ac:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   116b0:	d0a81203 	ldbu	r2,-24504(gp)
   116b4:	10803fcc 	andi	r2,r2,255
   116b8:	10001926 	beq	r2,zero,11720 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   116bc:	d0a81203 	ldbu	r2,-24504(gp)
   116c0:	10bfffc4 	addi	r2,r2,-1
   116c4:	d0a81205 	stb	r2,-24504(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   116c8:	d0a81203 	ldbu	r2,-24504(gp)
   116cc:	10803fcc 	andi	r2,r2,255
   116d0:	10000e1e 	bne	r2,zero,1170c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   116d4:	d0a82003 	ldbu	r2,-24448(gp)
   116d8:	10803fcc 	andi	r2,r2,255
   116dc:	1000061e 	bne	r2,zero,116f8 <OSSchedUnlock+0x8c>
   116e0:	e0bffa17 	ldw	r2,-24(fp)
   116e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116e8:	e0bffc17 	ldw	r2,-16(fp)
   116ec:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   116f0:	00124cc0 	call	124cc <OS_Sched>
   116f4:	00000e06 	br	11730 <OSSchedUnlock+0xc4>
   116f8:	e0bffa17 	ldw	r2,-24(fp)
   116fc:	e0bffd15 	stw	r2,-12(fp)
   11700:	e0bffd17 	ldw	r2,-12(fp)
   11704:	1001703a 	wrctl	status,r2
   11708:	00000906 	br	11730 <OSSchedUnlock+0xc4>
   1170c:	e0bffa17 	ldw	r2,-24(fp)
   11710:	e0bffe15 	stw	r2,-8(fp)
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	1001703a 	wrctl	status,r2
   1171c:	00000406 	br	11730 <OSSchedUnlock+0xc4>
   11720:	e0bffa17 	ldw	r2,-24(fp)
   11724:	e0bfff15 	stw	r2,-4(fp)
   11728:	e0bfff17 	ldw	r2,-4(fp)
   1172c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   11730:	e037883a 	mov	sp,fp
   11734:	dfc00117 	ldw	ra,4(sp)
   11738:	df000017 	ldw	fp,0(sp)
   1173c:	dec00204 	addi	sp,sp,8
   11740:	f800283a 	ret

00011744 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   11744:	defffe04 	addi	sp,sp,-8
   11748:	dfc00115 	stw	ra,4(sp)
   1174c:	df000015 	stw	fp,0(sp)
   11750:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   11754:	d0a81243 	ldbu	r2,-24503(gp)
   11758:	10803fcc 	andi	r2,r2,255
   1175c:	10000f1e 	bne	r2,zero,1179c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   11760:	00125980 	call	12598 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   11764:	d0a81403 	ldbu	r2,-24496(gp)
   11768:	d0a81445 	stb	r2,-24495(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1176c:	d0a81403 	ldbu	r2,-24496(gp)
   11770:	10c03fcc 	andi	r3,r2,255
   11774:	008000b4 	movhi	r2,2
   11778:	109f7104 	addi	r2,r2,32196
   1177c:	18c7883a 	add	r3,r3,r3
   11780:	18c7883a 	add	r3,r3,r3
   11784:	10c5883a 	add	r2,r2,r3
   11788:	10800017 	ldw	r2,0(r2)
   1178c:	d0a81c15 	stw	r2,-24464(gp)
        OSTCBCur      = OSTCBHighRdy;
   11790:	d0a81c17 	ldw	r2,-24464(gp)
   11794:	d0a82115 	stw	r2,-24444(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   11798:	001bbb00 	call	1bbb0 <OSStartHighRdy>
    }
}
   1179c:	e037883a 	mov	sp,fp
   117a0:	dfc00117 	ldw	ra,4(sp)
   117a4:	df000017 	ldw	fp,0(sp)
   117a8:	dec00204 	addi	sp,sp,8
   117ac:	f800283a 	ret

000117b0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   117b0:	defff904 	addi	sp,sp,-28
   117b4:	dfc00615 	stw	ra,24(sp)
   117b8:	df000515 	stw	fp,20(sp)
   117bc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   117c0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   117c4:	01000084 	movi	r4,2
   117c8:	00182dc0 	call	182dc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117cc:	0005303a 	rdctl	r2,status
   117d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117d4:	e0fffc17 	ldw	r3,-16(fp)
   117d8:	00bfff84 	movi	r2,-2
   117dc:	1884703a 	and	r2,r3,r2
   117e0:	1001703a 	wrctl	status,r2
  
  return context;
   117e4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   117e8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   117ec:	d0281315 	stw	zero,-24500(gp)
   117f0:	e0bffb17 	ldw	r2,-20(fp)
   117f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117f8:	e0bffd17 	ldw	r2,-12(fp)
   117fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   11800:	0009883a 	mov	r4,zero
   11804:	00182dc0 	call	182dc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11808:	0005303a 	rdctl	r2,status
   1180c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11810:	e0fffe17 	ldw	r3,-8(fp)
   11814:	00bfff84 	movi	r2,-2
   11818:	1884703a 	and	r2,r3,r2
   1181c:	1001703a 	wrctl	status,r2
  
  return context;
   11820:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   11824:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   11828:	d0a81317 	ldw	r2,-24500(gp)
   1182c:	d0a81815 	stw	r2,-24480(gp)
    OSStatRdy    = OS_TRUE;
   11830:	00800044 	movi	r2,1
   11834:	d0a82405 	stb	r2,-24432(gp)
   11838:	e0bffb17 	ldw	r2,-20(fp)
   1183c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11840:	e0bfff17 	ldw	r2,-4(fp)
   11844:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   11848:	e037883a 	mov	sp,fp
   1184c:	dfc00117 	ldw	ra,4(sp)
   11850:	df000017 	ldw	fp,0(sp)
   11854:	dec00204 	addi	sp,sp,8
   11858:	f800283a 	ret

0001185c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1185c:	defff704 	addi	sp,sp,-36
   11860:	dfc00815 	stw	ra,32(sp)
   11864:	df000715 	stw	fp,28(sp)
   11868:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1186c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   11870:	001bdc80 	call	1bdc8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11874:	0005303a 	rdctl	r2,status
   11878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1187c:	e0fffc17 	ldw	r3,-16(fp)
   11880:	00bfff84 	movi	r2,-2
   11884:	1884703a 	and	r2,r3,r2
   11888:	1001703a 	wrctl	status,r2
  
  return context;
   1188c:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   11890:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   11894:	d0a82217 	ldw	r2,-24440(gp)
   11898:	10800044 	addi	r2,r2,1
   1189c:	d0a82215 	stw	r2,-24440(gp)
   118a0:	e0bffb17 	ldw	r2,-20(fp)
   118a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118a8:	e0bffd17 	ldw	r2,-12(fp)
   118ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   118b0:	d0a81243 	ldbu	r2,-24503(gp)
   118b4:	10803fcc 	andi	r2,r2,255
   118b8:	10800058 	cmpnei	r2,r2,1
   118bc:	1000691e 	bne	r2,zero,11a64 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   118c0:	d0a81603 	ldbu	r2,-24488(gp)
   118c4:	10803fcc 	andi	r2,r2,255
   118c8:	10c00060 	cmpeqi	r3,r2,1
   118cc:	1800061e 	bne	r3,zero,118e8 <OSTimeTick+0x8c>
   118d0:	10c000a0 	cmpeqi	r3,r2,2
   118d4:	1800061e 	bne	r3,zero,118f0 <OSTimeTick+0x94>
   118d8:	10000a1e 	bne	r2,zero,11904 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   118dc:	00800044 	movi	r2,1
   118e0:	e0bffa05 	stb	r2,-24(fp)
                 break;
   118e4:	00000b06 	br	11914 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   118e8:	e03ffa05 	stb	zero,-24(fp)
                 break;
   118ec:	00000906 	br	11914 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   118f0:	00800044 	movi	r2,1
   118f4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   118f8:	00800044 	movi	r2,1
   118fc:	d0a81605 	stb	r2,-24488(gp)
                 break;
   11900:	00000406 	br	11914 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   11904:	00800044 	movi	r2,1
   11908:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1190c:	d0281605 	stb	zero,-24488(gp)
                 break;
   11910:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   11914:	e0bffa03 	ldbu	r2,-24(fp)
   11918:	1000011e 	bne	r2,zero,11920 <OSTimeTick+0xc4>
            return;
   1191c:	00005106 	br	11a64 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   11920:	d0a81517 	ldw	r2,-24492(gp)
   11924:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11928:	00004906 	br	11a50 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1192c:	0005303a 	rdctl	r2,status
   11930:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11934:	e0fffe17 	ldw	r3,-8(fp)
   11938:	00bfff84 	movi	r2,-2
   1193c:	1884703a 	and	r2,r3,r2
   11940:	1001703a 	wrctl	status,r2
  
  return context;
   11944:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   11948:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1194c:	e0bff917 	ldw	r2,-28(fp)
   11950:	10800b8b 	ldhu	r2,46(r2)
   11954:	10bfffcc 	andi	r2,r2,65535
   11958:	10003626 	beq	r2,zero,11a34 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1195c:	e0bff917 	ldw	r2,-28(fp)
   11960:	10800b8b 	ldhu	r2,46(r2)
   11964:	10bfffc4 	addi	r2,r2,-1
   11968:	1007883a 	mov	r3,r2
   1196c:	e0bff917 	ldw	r2,-28(fp)
   11970:	10c00b8d 	sth	r3,46(r2)
   11974:	e0bff917 	ldw	r2,-28(fp)
   11978:	10800b8b 	ldhu	r2,46(r2)
   1197c:	10bfffcc 	andi	r2,r2,65535
   11980:	10002c1e 	bne	r2,zero,11a34 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   11984:	e0bff917 	ldw	r2,-28(fp)
   11988:	10800c03 	ldbu	r2,48(r2)
   1198c:	10803fcc 	andi	r2,r2,255
   11990:	10800dcc 	andi	r2,r2,55
   11994:	10000b26 	beq	r2,zero,119c4 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   11998:	e0bff917 	ldw	r2,-28(fp)
   1199c:	10c00c03 	ldbu	r3,48(r2)
   119a0:	00bff204 	movi	r2,-56
   119a4:	1884703a 	and	r2,r3,r2
   119a8:	1007883a 	mov	r3,r2
   119ac:	e0bff917 	ldw	r2,-28(fp)
   119b0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   119b4:	e0bff917 	ldw	r2,-28(fp)
   119b8:	00c00044 	movi	r3,1
   119bc:	10c00c45 	stb	r3,49(r2)
   119c0:	00000206 	br	119cc <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   119c4:	e0bff917 	ldw	r2,-28(fp)
   119c8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   119cc:	e0bff917 	ldw	r2,-28(fp)
   119d0:	10800c03 	ldbu	r2,48(r2)
   119d4:	10803fcc 	andi	r2,r2,255
   119d8:	1080020c 	andi	r2,r2,8
   119dc:	1000151e 	bne	r2,zero,11a34 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   119e0:	e0bff917 	ldw	r2,-28(fp)
   119e4:	10c00d83 	ldbu	r3,54(r2)
   119e8:	d0a81e03 	ldbu	r2,-24456(gp)
   119ec:	1884b03a 	or	r2,r3,r2
   119f0:	d0a81e05 	stb	r2,-24456(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   119f4:	e0bff917 	ldw	r2,-28(fp)
   119f8:	10800d03 	ldbu	r2,52(r2)
   119fc:	10c03fcc 	andi	r3,r2,255
   11a00:	e0bff917 	ldw	r2,-28(fp)
   11a04:	10800d03 	ldbu	r2,52(r2)
   11a08:	11003fcc 	andi	r4,r2,255
   11a0c:	d0a81e44 	addi	r2,gp,-24455
   11a10:	2085883a 	add	r2,r4,r2
   11a14:	11000003 	ldbu	r4,0(r2)
   11a18:	e0bff917 	ldw	r2,-28(fp)
   11a1c:	10800d43 	ldbu	r2,53(r2)
   11a20:	2084b03a 	or	r2,r4,r2
   11a24:	1009883a 	mov	r4,r2
   11a28:	d0a81e44 	addi	r2,gp,-24455
   11a2c:	1885883a 	add	r2,r3,r2
   11a30:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   11a34:	e0bff917 	ldw	r2,-28(fp)
   11a38:	10800517 	ldw	r2,20(r2)
   11a3c:	e0bff915 	stw	r2,-28(fp)
   11a40:	e0bffb17 	ldw	r2,-20(fp)
   11a44:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a48:	e0bfff17 	ldw	r2,-4(fp)
   11a4c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11a50:	e0bff917 	ldw	r2,-28(fp)
   11a54:	10800c83 	ldbu	r2,50(r2)
   11a58:	10803fcc 	andi	r2,r2,255
   11a5c:	10800518 	cmpnei	r2,r2,20
   11a60:	103fb21e 	bne	r2,zero,1192c <__alt_mem_Flash_flash_data+0xf401192c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   11a64:	e037883a 	mov	sp,fp
   11a68:	dfc00117 	ldw	ra,4(sp)
   11a6c:	df000017 	ldw	fp,0(sp)
   11a70:	dec00204 	addi	sp,sp,8
   11a74:	f800283a 	ret

00011a78 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   11a78:	deffff04 	addi	sp,sp,-4
   11a7c:	df000015 	stw	fp,0(sp)
   11a80:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   11a84:	00804784 	movi	r2,286
}
   11a88:	e037883a 	mov	sp,fp
   11a8c:	df000017 	ldw	fp,0(sp)
   11a90:	dec00104 	addi	sp,sp,4
   11a94:	f800283a 	ret

00011a98 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   11a98:	deffff04 	addi	sp,sp,-4
   11a9c:	df000015 	stw	fp,0(sp)
   11aa0:	d839883a 	mov	fp,sp
}
   11aa4:	e037883a 	mov	sp,fp
   11aa8:	df000017 	ldw	fp,0(sp)
   11aac:	dec00104 	addi	sp,sp,4
   11ab0:	f800283a 	ret

00011ab4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   11ab4:	defff804 	addi	sp,sp,-32
   11ab8:	dfc00715 	stw	ra,28(sp)
   11abc:	df000615 	stw	fp,24(sp)
   11ac0:	df000604 	addi	fp,sp,24
   11ac4:	e13ffc15 	stw	r4,-16(fp)
   11ac8:	e17ffd15 	stw	r5,-12(fp)
   11acc:	3007883a 	mov	r3,r6
   11ad0:	3805883a 	mov	r2,r7
   11ad4:	e0fffe05 	stb	r3,-8(fp)
   11ad8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11adc:	e0bffc17 	ldw	r2,-16(fp)
   11ae0:	10800283 	ldbu	r2,10(r2)
   11ae4:	10c03fcc 	andi	r3,r2,255
   11ae8:	008000b4 	movhi	r2,2
   11aec:	10b25e04 	addi	r2,r2,-13960
   11af0:	10c5883a 	add	r2,r2,r3
   11af4:	10800003 	ldbu	r2,0(r2)
   11af8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11afc:	e0bffa03 	ldbu	r2,-24(fp)
   11b00:	e0fffc17 	ldw	r3,-16(fp)
   11b04:	1885883a 	add	r2,r3,r2
   11b08:	10800204 	addi	r2,r2,8
   11b0c:	108000c3 	ldbu	r2,3(r2)
   11b10:	10c03fcc 	andi	r3,r2,255
   11b14:	008000b4 	movhi	r2,2
   11b18:	10b25e04 	addi	r2,r2,-13960
   11b1c:	10c5883a 	add	r2,r2,r3
   11b20:	10800003 	ldbu	r2,0(r2)
   11b24:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11b28:	e0bffa03 	ldbu	r2,-24(fp)
   11b2c:	100490fa 	slli	r2,r2,3
   11b30:	1007883a 	mov	r3,r2
   11b34:	e0bffa43 	ldbu	r2,-23(fp)
   11b38:	1885883a 	add	r2,r3,r2
   11b3c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11b40:	e0fffa83 	ldbu	r3,-22(fp)
   11b44:	008000b4 	movhi	r2,2
   11b48:	109f7104 	addi	r2,r2,32196
   11b4c:	18c7883a 	add	r3,r3,r3
   11b50:	18c7883a 	add	r3,r3,r3
   11b54:	10c5883a 	add	r2,r2,r3
   11b58:	10800017 	ldw	r2,0(r2)
   11b5c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11b60:	e0bffb17 	ldw	r2,-20(fp)
   11b64:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11b68:	e0bffb17 	ldw	r2,-20(fp)
   11b6c:	e0fffd17 	ldw	r3,-12(fp)
   11b70:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11b74:	e0bffb17 	ldw	r2,-20(fp)
   11b78:	10800c03 	ldbu	r2,48(r2)
   11b7c:	1007883a 	mov	r3,r2
   11b80:	e0bffe03 	ldbu	r2,-8(fp)
   11b84:	0084303a 	nor	r2,zero,r2
   11b88:	1884703a 	and	r2,r3,r2
   11b8c:	1007883a 	mov	r3,r2
   11b90:	e0bffb17 	ldw	r2,-20(fp)
   11b94:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11b98:	e0bffb17 	ldw	r2,-20(fp)
   11b9c:	e0ffff03 	ldbu	r3,-4(fp)
   11ba0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11ba4:	e0bffb17 	ldw	r2,-20(fp)
   11ba8:	10800c03 	ldbu	r2,48(r2)
   11bac:	10803fcc 	andi	r2,r2,255
   11bb0:	1080020c 	andi	r2,r2,8
   11bb4:	1000111e 	bne	r2,zero,11bfc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11bb8:	e0bffb17 	ldw	r2,-20(fp)
   11bbc:	10c00d83 	ldbu	r3,54(r2)
   11bc0:	d0a81e03 	ldbu	r2,-24456(gp)
   11bc4:	1884b03a 	or	r2,r3,r2
   11bc8:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11bcc:	e0fffa03 	ldbu	r3,-24(fp)
   11bd0:	e13ffa03 	ldbu	r4,-24(fp)
   11bd4:	d0a81e44 	addi	r2,gp,-24455
   11bd8:	2085883a 	add	r2,r4,r2
   11bdc:	11000003 	ldbu	r4,0(r2)
   11be0:	e0bffb17 	ldw	r2,-20(fp)
   11be4:	10800d43 	ldbu	r2,53(r2)
   11be8:	2084b03a 	or	r2,r4,r2
   11bec:	1009883a 	mov	r4,r2
   11bf0:	d0a81e44 	addi	r2,gp,-24455
   11bf4:	1885883a 	add	r2,r3,r2
   11bf8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11bfc:	e13ffb17 	ldw	r4,-20(fp)
   11c00:	e17ffc17 	ldw	r5,-16(fp)
   11c04:	0011ea40 	call	11ea4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11c08:	e0bffb17 	ldw	r2,-20(fp)
   11c0c:	10800817 	ldw	r2,32(r2)
   11c10:	10000826 	beq	r2,zero,11c34 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11c14:	e0bffb17 	ldw	r2,-20(fp)
   11c18:	10800817 	ldw	r2,32(r2)
   11c1c:	e13ffb17 	ldw	r4,-20(fp)
   11c20:	100b883a 	mov	r5,r2
   11c24:	0011f580 	call	11f58 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11c28:	e0bffb17 	ldw	r2,-20(fp)
   11c2c:	e0fffc17 	ldw	r3,-16(fp)
   11c30:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   11c34:	e0bffa83 	ldbu	r2,-22(fp)
}
   11c38:	e037883a 	mov	sp,fp
   11c3c:	dfc00117 	ldw	ra,4(sp)
   11c40:	df000017 	ldw	fp,0(sp)
   11c44:	dec00204 	addi	sp,sp,8
   11c48:	f800283a 	ret

00011c4c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   11c4c:	defffd04 	addi	sp,sp,-12
   11c50:	df000215 	stw	fp,8(sp)
   11c54:	df000204 	addi	fp,sp,8
   11c58:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   11c5c:	d0a82117 	ldw	r2,-24444(gp)
   11c60:	e0ffff17 	ldw	r3,-4(fp)
   11c64:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11c68:	d0a82117 	ldw	r2,-24444(gp)
   11c6c:	10800d03 	ldbu	r2,52(r2)
   11c70:	10803fcc 	andi	r2,r2,255
   11c74:	d0e82117 	ldw	r3,-24444(gp)
   11c78:	18c00d03 	ldbu	r3,52(r3)
   11c7c:	18c03fcc 	andi	r3,r3,255
   11c80:	e13fff17 	ldw	r4,-4(fp)
   11c84:	20c7883a 	add	r3,r4,r3
   11c88:	18c00204 	addi	r3,r3,8
   11c8c:	190000c3 	ldbu	r4,3(r3)
   11c90:	d0e82117 	ldw	r3,-24444(gp)
   11c94:	18c00d43 	ldbu	r3,53(r3)
   11c98:	20c6b03a 	or	r3,r4,r3
   11c9c:	1809883a 	mov	r4,r3
   11ca0:	e0ffff17 	ldw	r3,-4(fp)
   11ca4:	1885883a 	add	r2,r3,r2
   11ca8:	10800204 	addi	r2,r2,8
   11cac:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	10c00283 	ldbu	r3,10(r2)
   11cb8:	d0a82117 	ldw	r2,-24444(gp)
   11cbc:	10800d83 	ldbu	r2,54(r2)
   11cc0:	1884b03a 	or	r2,r3,r2
   11cc4:	1007883a 	mov	r3,r2
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
   11ccc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11cd0:	d0a82117 	ldw	r2,-24444(gp)
   11cd4:	10800d03 	ldbu	r2,52(r2)
   11cd8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11cdc:	e0fffe03 	ldbu	r3,-8(fp)
   11ce0:	e13ffe03 	ldbu	r4,-8(fp)
   11ce4:	d0a81e44 	addi	r2,gp,-24455
   11ce8:	2085883a 	add	r2,r4,r2
   11cec:	10800003 	ldbu	r2,0(r2)
   11cf0:	1009883a 	mov	r4,r2
   11cf4:	d0a82117 	ldw	r2,-24444(gp)
   11cf8:	10800d43 	ldbu	r2,53(r2)
   11cfc:	0084303a 	nor	r2,zero,r2
   11d00:	2084703a 	and	r2,r4,r2
   11d04:	1009883a 	mov	r4,r2
   11d08:	d0a81e44 	addi	r2,gp,-24455
   11d0c:	1885883a 	add	r2,r3,r2
   11d10:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11d14:	e0fffe03 	ldbu	r3,-8(fp)
   11d18:	d0a81e44 	addi	r2,gp,-24455
   11d1c:	1885883a 	add	r2,r3,r2
   11d20:	10800003 	ldbu	r2,0(r2)
   11d24:	10803fcc 	andi	r2,r2,255
   11d28:	1000071e 	bne	r2,zero,11d48 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11d2c:	d0a82117 	ldw	r2,-24444(gp)
   11d30:	10800d83 	ldbu	r2,54(r2)
   11d34:	0084303a 	nor	r2,zero,r2
   11d38:	1007883a 	mov	r3,r2
   11d3c:	d0a81e03 	ldbu	r2,-24456(gp)
   11d40:	1884703a 	and	r2,r3,r2
   11d44:	d0a81e05 	stb	r2,-24456(gp)
    }
}
   11d48:	e037883a 	mov	sp,fp
   11d4c:	df000017 	ldw	fp,0(sp)
   11d50:	dec00104 	addi	sp,sp,4
   11d54:	f800283a 	ret

00011d58 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   11d58:	defffb04 	addi	sp,sp,-20
   11d5c:	df000415 	stw	fp,16(sp)
   11d60:	df000404 	addi	fp,sp,16
   11d64:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   11d68:	d0a82117 	ldw	r2,-24444(gp)
   11d6c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11d70:	d0a82117 	ldw	r2,-24444(gp)
   11d74:	e0ffff17 	ldw	r3,-4(fp)
   11d78:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   11d7c:	e0bfff17 	ldw	r2,-4(fp)
   11d80:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   11d84:	e0bffc17 	ldw	r2,-16(fp)
   11d88:	10800017 	ldw	r2,0(r2)
   11d8c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11d90:	00002006 	br	11e14 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   11d94:	d0a82117 	ldw	r2,-24444(gp)
   11d98:	10800d03 	ldbu	r2,52(r2)
   11d9c:	10803fcc 	andi	r2,r2,255
   11da0:	d0e82117 	ldw	r3,-24444(gp)
   11da4:	18c00d03 	ldbu	r3,52(r3)
   11da8:	18c03fcc 	andi	r3,r3,255
   11dac:	e13ffd17 	ldw	r4,-12(fp)
   11db0:	20c7883a 	add	r3,r4,r3
   11db4:	18c00204 	addi	r3,r3,8
   11db8:	190000c3 	ldbu	r4,3(r3)
   11dbc:	d0e82117 	ldw	r3,-24444(gp)
   11dc0:	18c00d43 	ldbu	r3,53(r3)
   11dc4:	20c6b03a 	or	r3,r4,r3
   11dc8:	1809883a 	mov	r4,r3
   11dcc:	e0fffd17 	ldw	r3,-12(fp)
   11dd0:	1885883a 	add	r2,r3,r2
   11dd4:	10800204 	addi	r2,r2,8
   11dd8:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10c00283 	ldbu	r3,10(r2)
   11de4:	d0a82117 	ldw	r2,-24444(gp)
   11de8:	10800d83 	ldbu	r2,54(r2)
   11dec:	1884b03a 	or	r2,r3,r2
   11df0:	1007883a 	mov	r3,r2
   11df4:	e0bffd17 	ldw	r2,-12(fp)
   11df8:	10c00285 	stb	r3,10(r2)
        pevents++;
   11dfc:	e0bffc17 	ldw	r2,-16(fp)
   11e00:	10800104 	addi	r2,r2,4
   11e04:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11e08:	e0bffc17 	ldw	r2,-16(fp)
   11e0c:	10800017 	ldw	r2,0(r2)
   11e10:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11e14:	e0bffd17 	ldw	r2,-12(fp)
   11e18:	103fde1e 	bne	r2,zero,11d94 <__alt_mem_Flash_flash_data+0xf4011d94>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11e1c:	d0a82117 	ldw	r2,-24444(gp)
   11e20:	10800d03 	ldbu	r2,52(r2)
   11e24:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11e28:	e0fffe03 	ldbu	r3,-8(fp)
   11e2c:	e13ffe03 	ldbu	r4,-8(fp)
   11e30:	d0a81e44 	addi	r2,gp,-24455
   11e34:	2085883a 	add	r2,r4,r2
   11e38:	10800003 	ldbu	r2,0(r2)
   11e3c:	1009883a 	mov	r4,r2
   11e40:	d0a82117 	ldw	r2,-24444(gp)
   11e44:	10800d43 	ldbu	r2,53(r2)
   11e48:	0084303a 	nor	r2,zero,r2
   11e4c:	2084703a 	and	r2,r4,r2
   11e50:	1009883a 	mov	r4,r2
   11e54:	d0a81e44 	addi	r2,gp,-24455
   11e58:	1885883a 	add	r2,r3,r2
   11e5c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11e60:	e0fffe03 	ldbu	r3,-8(fp)
   11e64:	d0a81e44 	addi	r2,gp,-24455
   11e68:	1885883a 	add	r2,r3,r2
   11e6c:	10800003 	ldbu	r2,0(r2)
   11e70:	10803fcc 	andi	r2,r2,255
   11e74:	1000071e 	bne	r2,zero,11e94 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11e78:	d0a82117 	ldw	r2,-24444(gp)
   11e7c:	10800d83 	ldbu	r2,54(r2)
   11e80:	0084303a 	nor	r2,zero,r2
   11e84:	1007883a 	mov	r3,r2
   11e88:	d0a81e03 	ldbu	r2,-24456(gp)
   11e8c:	1884703a 	and	r2,r3,r2
   11e90:	d0a81e05 	stb	r2,-24456(gp)
    }
}
   11e94:	e037883a 	mov	sp,fp
   11e98:	df000017 	ldw	fp,0(sp)
   11e9c:	dec00104 	addi	sp,sp,4
   11ea0:	f800283a 	ret

00011ea4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   11ea4:	defffc04 	addi	sp,sp,-16
   11ea8:	df000315 	stw	fp,12(sp)
   11eac:	df000304 	addi	fp,sp,12
   11eb0:	e13ffe15 	stw	r4,-8(fp)
   11eb4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   11eb8:	e0bffe17 	ldw	r2,-8(fp)
   11ebc:	10800d03 	ldbu	r2,52(r2)
   11ec0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   11ec4:	e0bffd03 	ldbu	r2,-12(fp)
   11ec8:	e0fffd03 	ldbu	r3,-12(fp)
   11ecc:	e13fff17 	ldw	r4,-4(fp)
   11ed0:	20c7883a 	add	r3,r4,r3
   11ed4:	18c00204 	addi	r3,r3,8
   11ed8:	18c000c3 	ldbu	r3,3(r3)
   11edc:	1809883a 	mov	r4,r3
   11ee0:	e0fffe17 	ldw	r3,-8(fp)
   11ee4:	18c00d43 	ldbu	r3,53(r3)
   11ee8:	00c6303a 	nor	r3,zero,r3
   11eec:	20c6703a 	and	r3,r4,r3
   11ef0:	1809883a 	mov	r4,r3
   11ef4:	e0ffff17 	ldw	r3,-4(fp)
   11ef8:	1885883a 	add	r2,r3,r2
   11efc:	10800204 	addi	r2,r2,8
   11f00:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   11f04:	e0bffd03 	ldbu	r2,-12(fp)
   11f08:	e0ffff17 	ldw	r3,-4(fp)
   11f0c:	1885883a 	add	r2,r3,r2
   11f10:	10800204 	addi	r2,r2,8
   11f14:	108000c3 	ldbu	r2,3(r2)
   11f18:	10803fcc 	andi	r2,r2,255
   11f1c:	10000a1e 	bne	r2,zero,11f48 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11f20:	e0bfff17 	ldw	r2,-4(fp)
   11f24:	10800283 	ldbu	r2,10(r2)
   11f28:	1007883a 	mov	r3,r2
   11f2c:	e0bffe17 	ldw	r2,-8(fp)
   11f30:	10800d83 	ldbu	r2,54(r2)
   11f34:	0084303a 	nor	r2,zero,r2
   11f38:	1884703a 	and	r2,r3,r2
   11f3c:	1007883a 	mov	r3,r2
   11f40:	e0bfff17 	ldw	r2,-4(fp)
   11f44:	10c00285 	stb	r3,10(r2)
    }
}
   11f48:	e037883a 	mov	sp,fp
   11f4c:	df000017 	ldw	fp,0(sp)
   11f50:	dec00104 	addi	sp,sp,4
   11f54:	f800283a 	ret

00011f58 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11f58:	defffa04 	addi	sp,sp,-24
   11f5c:	df000515 	stw	fp,20(sp)
   11f60:	df000504 	addi	fp,sp,20
   11f64:	e13ffe15 	stw	r4,-8(fp)
   11f68:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11f6c:	e0bffe17 	ldw	r2,-8(fp)
   11f70:	10800d03 	ldbu	r2,52(r2)
   11f74:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   11f78:	e0bffe17 	ldw	r2,-8(fp)
   11f7c:	10800d83 	ldbu	r2,54(r2)
   11f80:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   11f84:	e0bffe17 	ldw	r2,-8(fp)
   11f88:	10800d43 	ldbu	r2,53(r2)
   11f8c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   11f90:	e0bfff17 	ldw	r2,-4(fp)
   11f94:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   11f98:	e0bffb17 	ldw	r2,-20(fp)
   11f9c:	10800017 	ldw	r2,0(r2)
   11fa0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11fa4:	00002506 	br	1203c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   11fa8:	e0bffd03 	ldbu	r2,-12(fp)
   11fac:	e0fffd03 	ldbu	r3,-12(fp)
   11fb0:	e13ffc17 	ldw	r4,-16(fp)
   11fb4:	20c7883a 	add	r3,r4,r3
   11fb8:	18c00204 	addi	r3,r3,8
   11fbc:	18c000c3 	ldbu	r3,3(r3)
   11fc0:	1809883a 	mov	r4,r3
   11fc4:	e0fffd83 	ldbu	r3,-10(fp)
   11fc8:	00c6303a 	nor	r3,zero,r3
   11fcc:	20c6703a 	and	r3,r4,r3
   11fd0:	1809883a 	mov	r4,r3
   11fd4:	e0fffc17 	ldw	r3,-16(fp)
   11fd8:	1885883a 	add	r2,r3,r2
   11fdc:	10800204 	addi	r2,r2,8
   11fe0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11fe4:	e0bffd03 	ldbu	r2,-12(fp)
   11fe8:	e0fffc17 	ldw	r3,-16(fp)
   11fec:	1885883a 	add	r2,r3,r2
   11ff0:	10800204 	addi	r2,r2,8
   11ff4:	108000c3 	ldbu	r2,3(r2)
   11ff8:	10803fcc 	andi	r2,r2,255
   11ffc:	1000091e 	bne	r2,zero,12024 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   12000:	e0bffc17 	ldw	r2,-16(fp)
   12004:	10800283 	ldbu	r2,10(r2)
   12008:	1007883a 	mov	r3,r2
   1200c:	e0bffd43 	ldbu	r2,-11(fp)
   12010:	0084303a 	nor	r2,zero,r2
   12014:	1884703a 	and	r2,r3,r2
   12018:	1007883a 	mov	r3,r2
   1201c:	e0bffc17 	ldw	r2,-16(fp)
   12020:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   12024:	e0bffb17 	ldw	r2,-20(fp)
   12028:	10800104 	addi	r2,r2,4
   1202c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   12030:	e0bffb17 	ldw	r2,-20(fp)
   12034:	10800017 	ldw	r2,0(r2)
   12038:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1203c:	e0bffc17 	ldw	r2,-16(fp)
   12040:	103fd91e 	bne	r2,zero,11fa8 <__alt_mem_Flash_flash_data+0xf4011fa8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   12044:	e037883a 	mov	sp,fp
   12048:	df000017 	ldw	fp,0(sp)
   1204c:	dec00104 	addi	sp,sp,4
   12050:	f800283a 	ret

00012054 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   12054:	defffc04 	addi	sp,sp,-16
   12058:	df000315 	stw	fp,12(sp)
   1205c:	df000304 	addi	fp,sp,12
   12060:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   12064:	e0bfff17 	ldw	r2,-4(fp)
   12068:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1206c:	e0bfff17 	ldw	r2,-4(fp)
   12070:	108002c4 	addi	r2,r2,11
   12074:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12078:	e03ffe05 	stb	zero,-8(fp)
   1207c:	00000706 	br	1209c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   12080:	e0bffd17 	ldw	r2,-12(fp)
   12084:	10c00044 	addi	r3,r2,1
   12088:	e0fffd15 	stw	r3,-12(fp)
   1208c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12090:	e0bffe03 	ldbu	r2,-8(fp)
   12094:	10800044 	addi	r2,r2,1
   12098:	e0bffe05 	stb	r2,-8(fp)
   1209c:	e0bffe03 	ldbu	r2,-8(fp)
   120a0:	108000f0 	cmpltui	r2,r2,3
   120a4:	103ff61e 	bne	r2,zero,12080 <__alt_mem_Flash_flash_data+0xf4012080>
        *ptbl++ = 0;
    }
}
   120a8:	e037883a 	mov	sp,fp
   120ac:	df000017 	ldw	fp,0(sp)
   120b0:	dec00104 	addi	sp,sp,4
   120b4:	f800283a 	ret

000120b8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   120b8:	defffb04 	addi	sp,sp,-20
   120bc:	dfc00415 	stw	ra,16(sp)
   120c0:	df000315 	stw	fp,12(sp)
   120c4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   120c8:	010000b4 	movhi	r4,2
   120cc:	211b5d04 	addi	r4,r4,28020
   120d0:	0142d004 	movi	r5,2880
   120d4:	00124180 	call	12418 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   120d8:	008000b4 	movhi	r2,2
   120dc:	109b5d04 	addi	r2,r2,28020
   120e0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   120e4:	008000b4 	movhi	r2,2
   120e8:	109b6904 	addi	r2,r2,28068
   120ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   120f0:	e03ffd0d 	sth	zero,-12(fp)
   120f4:	00001306 	br	12144 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   120f8:	e0bffe17 	ldw	r2,-8(fp)
   120fc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   12100:	e0bffe17 	ldw	r2,-8(fp)
   12104:	e0ffff17 	ldw	r3,-4(fp)
   12108:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1210c:	e0bffe17 	ldw	r2,-8(fp)
   12110:	00c00fc4 	movi	r3,63
   12114:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   12118:	e0bffe17 	ldw	r2,-8(fp)
   1211c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   12120:	e0bffe17 	ldw	r2,-8(fp)
   12124:	10800c04 	addi	r2,r2,48
   12128:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1212c:	e0bfff17 	ldw	r2,-4(fp)
   12130:	10800c04 	addi	r2,r2,48
   12134:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12138:	e0bffd0b 	ldhu	r2,-12(fp)
   1213c:	10800044 	addi	r2,r2,1
   12140:	e0bffd0d 	sth	r2,-12(fp)
   12144:	e0bffd0b 	ldhu	r2,-12(fp)
   12148:	10800ef0 	cmpltui	r2,r2,59
   1214c:	103fea1e 	bne	r2,zero,120f8 <__alt_mem_Flash_flash_data+0xf40120f8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   12150:	e0bffe17 	ldw	r2,-8(fp)
   12154:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   12158:	e0bffe17 	ldw	r2,-8(fp)
   1215c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   12160:	e0bffe17 	ldw	r2,-8(fp)
   12164:	00c00fc4 	movi	r3,63
   12168:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1216c:	e0bffe17 	ldw	r2,-8(fp)
   12170:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   12174:	008000b4 	movhi	r2,2
   12178:	109b5d04 	addi	r2,r2,28020
   1217c:	d0a81f15 	stw	r2,-24452(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   12180:	e037883a 	mov	sp,fp
   12184:	dfc00117 	ldw	ra,4(sp)
   12188:	df000017 	ldw	fp,0(sp)
   1218c:	dec00204 	addi	sp,sp,8
   12190:	f800283a 	ret

00012194 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   12194:	deffff04 	addi	sp,sp,-4
   12198:	df000015 	stw	fp,0(sp)
   1219c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   121a0:	d0282215 	stw	zero,-24440(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   121a4:	d0282005 	stb	zero,-24448(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   121a8:	d0281205 	stb	zero,-24504(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   121ac:	d0281a45 	stb	zero,-24471(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   121b0:	d0281245 	stb	zero,-24503(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   121b4:	d0281715 	stw	zero,-24484(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   121b8:	d0281315 	stw	zero,-24500(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   121bc:	d0282515 	stw	zero,-24428(gp)
    OSIdleCtrMax  = 0L;
   121c0:	d0281815 	stw	zero,-24480(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   121c4:	d0282405 	stb	zero,-24432(gp)
#endif
}
   121c8:	e037883a 	mov	sp,fp
   121cc:	df000017 	ldw	fp,0(sp)
   121d0:	dec00104 	addi	sp,sp,4
   121d4:	f800283a 	ret

000121d8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   121d8:	defffd04 	addi	sp,sp,-12
   121dc:	df000215 	stw	fp,8(sp)
   121e0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   121e4:	d0281e05 	stb	zero,-24456(gp)
    prdytbl       = &OSRdyTbl[0];
   121e8:	d0a81e44 	addi	r2,gp,-24455
   121ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   121f0:	e03ffe05 	stb	zero,-8(fp)
   121f4:	00000706 	br	12214 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   121f8:	e0bfff17 	ldw	r2,-4(fp)
   121fc:	10c00044 	addi	r3,r2,1
   12200:	e0ffff15 	stw	r3,-4(fp)
   12204:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12208:	e0bffe03 	ldbu	r2,-8(fp)
   1220c:	10800044 	addi	r2,r2,1
   12210:	e0bffe05 	stb	r2,-8(fp)
   12214:	e0bffe03 	ldbu	r2,-8(fp)
   12218:	108000f0 	cmpltui	r2,r2,3
   1221c:	103ff61e 	bne	r2,zero,121f8 <__alt_mem_Flash_flash_data+0xf40121f8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   12220:	d0281445 	stb	zero,-24495(gp)
    OSPrioHighRdy = 0;
   12224:	d0281405 	stb	zero,-24496(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   12228:	d0281c15 	stw	zero,-24464(gp)
    OSTCBCur      = (OS_TCB *)0;
   1222c:	d0282115 	stw	zero,-24444(gp)
}
   12230:	e037883a 	mov	sp,fp
   12234:	df000017 	ldw	fp,0(sp)
   12238:	dec00104 	addi	sp,sp,4
   1223c:	f800283a 	ret

00012240 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   12240:	defff804 	addi	sp,sp,-32
   12244:	dfc00715 	stw	ra,28(sp)
   12248:	df000615 	stw	fp,24(sp)
   1224c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   12250:	00bfffd4 	movui	r2,65535
   12254:	d8800015 	stw	r2,0(sp)
   12258:	008000b4 	movhi	r2,2
   1225c:	10995d04 	addi	r2,r2,25972
   12260:	d8800115 	stw	r2,4(sp)
   12264:	00808004 	movi	r2,512
   12268:	d8800215 	stw	r2,8(sp)
   1226c:	d8000315 	stw	zero,12(sp)
   12270:	008000c4 	movi	r2,3
   12274:	d8800415 	stw	r2,16(sp)
   12278:	01000074 	movhi	r4,1
   1227c:	2109b404 	addi	r4,r4,9936
   12280:	000b883a 	mov	r5,zero
   12284:	018000b4 	movhi	r6,2
   12288:	319b5c04 	addi	r6,r6,28016
   1228c:	01c00504 	movi	r7,20
   12290:	00170e40 	call	170e4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   12294:	01000504 	movi	r4,20
   12298:	014000b4 	movhi	r5,2
   1229c:	29729e04 	addi	r5,r5,-13704
   122a0:	e1bfff04 	addi	r6,fp,-4
   122a4:	00179b00 	call	179b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   122a8:	e037883a 	mov	sp,fp
   122ac:	dfc00117 	ldw	ra,4(sp)
   122b0:	df000017 	ldw	fp,0(sp)
   122b4:	dec00204 	addi	sp,sp,8
   122b8:	f800283a 	ret

000122bc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   122bc:	defff804 	addi	sp,sp,-32
   122c0:	dfc00715 	stw	ra,28(sp)
   122c4:	df000615 	stw	fp,24(sp)
   122c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   122cc:	00bfff94 	movui	r2,65534
   122d0:	d8800015 	stw	r2,0(sp)
   122d4:	008000b4 	movhi	r2,2
   122d8:	1096e504 	addi	r2,r2,23444
   122dc:	d8800115 	stw	r2,4(sp)
   122e0:	00808004 	movi	r2,512
   122e4:	d8800215 	stw	r2,8(sp)
   122e8:	d8000315 	stw	zero,12(sp)
   122ec:	008000c4 	movi	r2,3
   122f0:	d8800415 	stw	r2,16(sp)
   122f4:	01000074 	movhi	r4,1
   122f8:	2109cb04 	addi	r4,r4,10028
   122fc:	000b883a 	mov	r5,zero
   12300:	018000b4 	movhi	r6,2
   12304:	3198e404 	addi	r6,r6,25488
   12308:	01c004c4 	movi	r7,19
   1230c:	00170e40 	call	170e4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   12310:	010004c4 	movi	r4,19
   12314:	014000b4 	movhi	r5,2
   12318:	2972a204 	addi	r5,r5,-13688
   1231c:	e1bfff04 	addi	r6,fp,-4
   12320:	00179b00 	call	179b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   12324:	e037883a 	mov	sp,fp
   12328:	dfc00117 	ldw	ra,4(sp)
   1232c:	df000017 	ldw	fp,0(sp)
   12330:	dec00204 	addi	sp,sp,8
   12334:	f800283a 	ret

00012338 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   12338:	defffb04 	addi	sp,sp,-20
   1233c:	dfc00415 	stw	ra,16(sp)
   12340:	df000315 	stw	fp,12(sp)
   12344:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   12348:	010000b4 	movhi	r4,2
   1234c:	211e2d04 	addi	r4,r4,30900
   12350:	01414404 	movi	r5,1296
   12354:	00124180 	call	12418 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   12358:	010000b4 	movhi	r4,2
   1235c:	211f7104 	addi	r4,r4,32196
   12360:	01401504 	movi	r5,84
   12364:	00124180 	call	12418 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   12368:	008000b4 	movhi	r2,2
   1236c:	109e2d04 	addi	r2,r2,30900
   12370:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   12374:	008000b4 	movhi	r2,2
   12378:	109e4804 	addi	r2,r2,31008
   1237c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12380:	e03ffd05 	stb	zero,-12(fp)
   12384:	00001106 	br	123cc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   12388:	e0bffe17 	ldw	r2,-8(fp)
   1238c:	e0ffff17 	ldw	r3,-4(fp)
   12390:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   12394:	e0bffe17 	ldw	r2,-8(fp)
   12398:	00c00fc4 	movi	r3,63
   1239c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   123a0:	e0bffe17 	ldw	r2,-8(fp)
   123a4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   123a8:	e0bffe17 	ldw	r2,-8(fp)
   123ac:	10801b04 	addi	r2,r2,108
   123b0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   123b4:	e0bfff17 	ldw	r2,-4(fp)
   123b8:	10801b04 	addi	r2,r2,108
   123bc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   123c0:	e0bffd03 	ldbu	r2,-12(fp)
   123c4:	10800044 	addi	r2,r2,1
   123c8:	e0bffd05 	stb	r2,-12(fp)
   123cc:	e0bffd03 	ldbu	r2,-12(fp)
   123d0:	108002f0 	cmpltui	r2,r2,11
   123d4:	103fec1e 	bne	r2,zero,12388 <__alt_mem_Flash_flash_data+0xf4012388>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   123d8:	e0bffe17 	ldw	r2,-8(fp)
   123dc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   123e0:	e0bffe17 	ldw	r2,-8(fp)
   123e4:	00c00fc4 	movi	r3,63
   123e8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   123f4:	d0281515 	stw	zero,-24492(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   123f8:	008000b4 	movhi	r2,2
   123fc:	109e2d04 	addi	r2,r2,30900
   12400:	d0a81915 	stw	r2,-24476(gp)
}
   12404:	e037883a 	mov	sp,fp
   12408:	dfc00117 	ldw	ra,4(sp)
   1240c:	df000017 	ldw	fp,0(sp)
   12410:	dec00204 	addi	sp,sp,8
   12414:	f800283a 	ret

00012418 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   12418:	defffd04 	addi	sp,sp,-12
   1241c:	df000215 	stw	fp,8(sp)
   12420:	df000204 	addi	fp,sp,8
   12424:	e13ffe15 	stw	r4,-8(fp)
   12428:	2805883a 	mov	r2,r5
   1242c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   12430:	00000706 	br	12450 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   12434:	e0bffe17 	ldw	r2,-8(fp)
   12438:	10c00044 	addi	r3,r2,1
   1243c:	e0fffe15 	stw	r3,-8(fp)
   12440:	10000005 	stb	zero,0(r2)
        size--;
   12444:	e0bfff0b 	ldhu	r2,-4(fp)
   12448:	10bfffc4 	addi	r2,r2,-1
   1244c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   12450:	e0bfff0b 	ldhu	r2,-4(fp)
   12454:	103ff71e 	bne	r2,zero,12434 <__alt_mem_Flash_flash_data+0xf4012434>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   12458:	e037883a 	mov	sp,fp
   1245c:	df000017 	ldw	fp,0(sp)
   12460:	dec00104 	addi	sp,sp,4
   12464:	f800283a 	ret

00012468 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   12468:	defffc04 	addi	sp,sp,-16
   1246c:	df000315 	stw	fp,12(sp)
   12470:	df000304 	addi	fp,sp,12
   12474:	e13ffd15 	stw	r4,-12(fp)
   12478:	e17ffe15 	stw	r5,-8(fp)
   1247c:	3005883a 	mov	r2,r6
   12480:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   12484:	00000b06 	br	124b4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   12488:	e0bffd17 	ldw	r2,-12(fp)
   1248c:	10c00044 	addi	r3,r2,1
   12490:	e0fffd15 	stw	r3,-12(fp)
   12494:	e0fffe17 	ldw	r3,-8(fp)
   12498:	19000044 	addi	r4,r3,1
   1249c:	e13ffe15 	stw	r4,-8(fp)
   124a0:	18c00003 	ldbu	r3,0(r3)
   124a4:	10c00005 	stb	r3,0(r2)
        size--;
   124a8:	e0bfff0b 	ldhu	r2,-4(fp)
   124ac:	10bfffc4 	addi	r2,r2,-1
   124b0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   124b4:	e0bfff0b 	ldhu	r2,-4(fp)
   124b8:	103ff31e 	bne	r2,zero,12488 <__alt_mem_Flash_flash_data+0xf4012488>
        *pdest++ = *psrc++;
        size--;
    }
}
   124bc:	e037883a 	mov	sp,fp
   124c0:	df000017 	ldw	fp,0(sp)
   124c4:	dec00104 	addi	sp,sp,4
   124c8:	f800283a 	ret

000124cc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   124cc:	defffb04 	addi	sp,sp,-20
   124d0:	dfc00415 	stw	ra,16(sp)
   124d4:	df000315 	stw	fp,12(sp)
   124d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   124dc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124e0:	0005303a 	rdctl	r2,status
   124e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124e8:	e0fffe17 	ldw	r3,-8(fp)
   124ec:	00bfff84 	movi	r2,-2
   124f0:	1884703a 	and	r2,r3,r2
   124f4:	1001703a 	wrctl	status,r2
  
  return context;
   124f8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   124fc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   12500:	d0a82003 	ldbu	r2,-24448(gp)
   12504:	10803fcc 	andi	r2,r2,255
   12508:	10001a1e 	bne	r2,zero,12574 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1250c:	d0a81203 	ldbu	r2,-24504(gp)
   12510:	10803fcc 	andi	r2,r2,255
   12514:	1000171e 	bne	r2,zero,12574 <OS_Sched+0xa8>
            OS_SchedNew();
   12518:	00125980 	call	12598 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1251c:	d0e81403 	ldbu	r3,-24496(gp)
   12520:	d0a81443 	ldbu	r2,-24495(gp)
   12524:	18c03fcc 	andi	r3,r3,255
   12528:	10803fcc 	andi	r2,r2,255
   1252c:	18801126 	beq	r3,r2,12574 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   12530:	d0a81403 	ldbu	r2,-24496(gp)
   12534:	10c03fcc 	andi	r3,r2,255
   12538:	008000b4 	movhi	r2,2
   1253c:	109f7104 	addi	r2,r2,32196
   12540:	18c7883a 	add	r3,r3,r3
   12544:	18c7883a 	add	r3,r3,r3
   12548:	10c5883a 	add	r2,r2,r3
   1254c:	10800017 	ldw	r2,0(r2)
   12550:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   12554:	d0a81c17 	ldw	r2,-24464(gp)
   12558:	10c00e17 	ldw	r3,56(r2)
   1255c:	18c00044 	addi	r3,r3,1
   12560:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   12564:	d0a81717 	ldw	r2,-24484(gp)
   12568:	10800044 	addi	r2,r2,1
   1256c:	d0a81715 	stw	r2,-24484(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   12570:	001bb240 	call	1bb24 <OSCtxSw>
   12574:	e0bffd17 	ldw	r2,-12(fp)
   12578:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1257c:	e0bfff17 	ldw	r2,-4(fp)
   12580:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   12584:	e037883a 	mov	sp,fp
   12588:	dfc00117 	ldw	ra,4(sp)
   1258c:	df000017 	ldw	fp,0(sp)
   12590:	dec00204 	addi	sp,sp,8
   12594:	f800283a 	ret

00012598 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   12598:	defffe04 	addi	sp,sp,-8
   1259c:	df000115 	stw	fp,4(sp)
   125a0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   125a4:	d0a81e03 	ldbu	r2,-24456(gp)
   125a8:	10c03fcc 	andi	r3,r2,255
   125ac:	008000b4 	movhi	r2,2
   125b0:	10b25e04 	addi	r2,r2,-13960
   125b4:	10c5883a 	add	r2,r2,r3
   125b8:	10800003 	ldbu	r2,0(r2)
   125bc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   125c0:	e0bfff03 	ldbu	r2,-4(fp)
   125c4:	100490fa 	slli	r2,r2,3
   125c8:	1009883a 	mov	r4,r2
   125cc:	e0ffff03 	ldbu	r3,-4(fp)
   125d0:	d0a81e44 	addi	r2,gp,-24455
   125d4:	1885883a 	add	r2,r3,r2
   125d8:	10800003 	ldbu	r2,0(r2)
   125dc:	10c03fcc 	andi	r3,r2,255
   125e0:	008000b4 	movhi	r2,2
   125e4:	10b25e04 	addi	r2,r2,-13960
   125e8:	10c5883a 	add	r2,r2,r3
   125ec:	10800003 	ldbu	r2,0(r2)
   125f0:	2085883a 	add	r2,r4,r2
   125f4:	d0a81405 	stb	r2,-24496(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   125f8:	e037883a 	mov	sp,fp
   125fc:	df000017 	ldw	fp,0(sp)
   12600:	dec00104 	addi	sp,sp,4
   12604:	f800283a 	ret

00012608 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   12608:	defffc04 	addi	sp,sp,-16
   1260c:	df000315 	stw	fp,12(sp)
   12610:	df000304 	addi	fp,sp,12
   12614:	e13ffe15 	stw	r4,-8(fp)
   12618:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1261c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   12620:	00000b06 	br	12650 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   12624:	e0bffe17 	ldw	r2,-8(fp)
   12628:	10c00044 	addi	r3,r2,1
   1262c:	e0fffe15 	stw	r3,-8(fp)
   12630:	e0ffff17 	ldw	r3,-4(fp)
   12634:	19000044 	addi	r4,r3,1
   12638:	e13fff15 	stw	r4,-4(fp)
   1263c:	18c00003 	ldbu	r3,0(r3)
   12640:	10c00005 	stb	r3,0(r2)
        len++;
   12644:	e0bffd03 	ldbu	r2,-12(fp)
   12648:	10800044 	addi	r2,r2,1
   1264c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   12650:	e0bfff17 	ldw	r2,-4(fp)
   12654:	10800003 	ldbu	r2,0(r2)
   12658:	10803fcc 	andi	r2,r2,255
   1265c:	103ff11e 	bne	r2,zero,12624 <__alt_mem_Flash_flash_data+0xf4012624>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   12660:	e0bffe17 	ldw	r2,-8(fp)
   12664:	10000005 	stb	zero,0(r2)
    return (len);
   12668:	e0bffd03 	ldbu	r2,-12(fp)
}
   1266c:	e037883a 	mov	sp,fp
   12670:	df000017 	ldw	fp,0(sp)
   12674:	dec00104 	addi	sp,sp,4
   12678:	f800283a 	ret

0001267c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   1267c:	defffd04 	addi	sp,sp,-12
   12680:	df000215 	stw	fp,8(sp)
   12684:	df000204 	addi	fp,sp,8
   12688:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   1268c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   12690:	00000606 	br	126ac <OS_StrLen+0x30>
        psrc++;
   12694:	e0bfff17 	ldw	r2,-4(fp)
   12698:	10800044 	addi	r2,r2,1
   1269c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   126a0:	e0bffe03 	ldbu	r2,-8(fp)
   126a4:	10800044 	addi	r2,r2,1
   126a8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   126ac:	e0bfff17 	ldw	r2,-4(fp)
   126b0:	10800003 	ldbu	r2,0(r2)
   126b4:	10803fcc 	andi	r2,r2,255
   126b8:	103ff61e 	bne	r2,zero,12694 <__alt_mem_Flash_flash_data+0xf4012694>
        psrc++;
        len++;
    }
    return (len);
   126bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   126c0:	e037883a 	mov	sp,fp
   126c4:	df000017 	ldw	fp,0(sp)
   126c8:	dec00104 	addi	sp,sp,4
   126cc:	f800283a 	ret

000126d0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   126d0:	defffa04 	addi	sp,sp,-24
   126d4:	dfc00515 	stw	ra,20(sp)
   126d8:	df000415 	stw	fp,16(sp)
   126dc:	df000404 	addi	fp,sp,16
   126e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   126e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126e8:	0005303a 	rdctl	r2,status
   126ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126f0:	e0fffd17 	ldw	r3,-12(fp)
   126f4:	00bfff84 	movi	r2,-2
   126f8:	1884703a 	and	r2,r3,r2
   126fc:	1001703a 	wrctl	status,r2
  
  return context;
   12700:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   12704:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   12708:	d0a81317 	ldw	r2,-24500(gp)
   1270c:	10800044 	addi	r2,r2,1
   12710:	d0a81315 	stw	r2,-24500(gp)
   12714:	e0bffc17 	ldw	r2,-16(fp)
   12718:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1271c:	e0bffe17 	ldw	r2,-8(fp)
   12720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   12724:	001be1c0 	call	1be1c <OSTaskIdleHook>
    }
   12728:	003fef06 	br	126e8 <__alt_mem_Flash_flash_data+0xf40126e8>

0001272c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1272c:	defff804 	addi	sp,sp,-32
   12730:	dfc00715 	stw	ra,28(sp)
   12734:	df000615 	stw	fp,24(sp)
   12738:	dc400515 	stw	r17,20(sp)
   1273c:	dc000415 	stw	r16,16(sp)
   12740:	df000604 	addi	fp,sp,24
   12744:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12748:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1274c:	00000206 	br	12758 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   12750:	01000044 	movi	r4,1
   12754:	00182dc0 	call	182dc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   12758:	d0a82403 	ldbu	r2,-24432(gp)
   1275c:	10803fcc 	andi	r2,r2,255
   12760:	103ffb26 	beq	r2,zero,12750 <__alt_mem_Flash_flash_data+0xf4012750>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   12764:	d0e81817 	ldw	r3,-24480(gp)
   12768:	00947b34 	movhi	r2,20972
   1276c:	10a147c4 	addi	r2,r2,-31457
   12770:	1888383a 	mulxuu	r4,r3,r2
   12774:	1885383a 	mul	r2,r3,r2
   12778:	1021883a 	mov	r16,r2
   1277c:	2023883a 	mov	r17,r4
   12780:	8804d17a 	srli	r2,r17,5
   12784:	d0a81815 	stw	r2,-24480(gp)
    if (OSIdleCtrMax == 0L) {
   12788:	d0a81817 	ldw	r2,-24480(gp)
   1278c:	1000031e 	bne	r2,zero,1279c <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   12790:	d0281a05 	stb	zero,-24472(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   12794:	01003fc4 	movi	r4,255
   12798:	0017f300 	call	17f30 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1279c:	0005303a 	rdctl	r2,status
   127a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127a4:	e0fffb17 	ldw	r3,-20(fp)
   127a8:	00bfff84 	movi	r2,-2
   127ac:	1884703a 	and	r2,r3,r2
   127b0:	1001703a 	wrctl	status,r2
  
  return context;
   127b4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   127b8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   127bc:	d0a81317 	ldw	r2,-24500(gp)
   127c0:	d0a82515 	stw	r2,-24428(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   127c4:	d0281315 	stw	zero,-24500(gp)
   127c8:	e0bffa17 	ldw	r2,-24(fp)
   127cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127d0:	e0bffc17 	ldw	r2,-16(fp)
   127d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   127d8:	d0e82517 	ldw	r3,-24428(gp)
   127dc:	d0a81817 	ldw	r2,-24480(gp)
   127e0:	1885203a 	divu	r2,r3,r2
   127e4:	1007883a 	mov	r3,r2
   127e8:	00801904 	movi	r2,100
   127ec:	10c5c83a 	sub	r2,r2,r3
   127f0:	d0a81a05 	stb	r2,-24472(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   127f4:	001bdac0 	call	1bdac <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   127f8:	00128080 	call	12808 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   127fc:	0009883a 	mov	r4,zero
   12800:	00182dc0 	call	182dc <OSTimeDly>
    }
   12804:	003fe506 	br	1279c <__alt_mem_Flash_flash_data+0xf401279c>

00012808 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   12808:	defffa04 	addi	sp,sp,-24
   1280c:	dfc00515 	stw	ra,20(sp)
   12810:	df000415 	stw	fp,16(sp)
   12814:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12818:	e03ffc05 	stb	zero,-16(fp)
   1281c:	00002406 	br	128b0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   12820:	e0fffc03 	ldbu	r3,-16(fp)
   12824:	e0bffe04 	addi	r2,fp,-8
   12828:	1809883a 	mov	r4,r3
   1282c:	100b883a 	mov	r5,r2
   12830:	0017d680 	call	17d68 <OSTaskStkChk>
   12834:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   12838:	e0bffc43 	ldbu	r2,-15(fp)
   1283c:	1000191e 	bne	r2,zero,128a4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   12840:	e0fffc03 	ldbu	r3,-16(fp)
   12844:	008000b4 	movhi	r2,2
   12848:	109f7104 	addi	r2,r2,32196
   1284c:	18c7883a 	add	r3,r3,r3
   12850:	18c7883a 	add	r3,r3,r3
   12854:	10c5883a 	add	r2,r2,r3
   12858:	10800017 	ldw	r2,0(r2)
   1285c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   12860:	e0bffd17 	ldw	r2,-12(fp)
   12864:	10000f26 	beq	r2,zero,128a4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	10800060 	cmpeqi	r2,r2,1
   12870:	10000c1e 	bne	r2,zero,128a4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   12874:	e0bffd17 	ldw	r2,-12(fp)
   12878:	10c00217 	ldw	r3,8(r2)
   1287c:	e0bffd17 	ldw	r2,-12(fp)
   12880:	10800317 	ldw	r2,12(r2)
   12884:	1085883a 	add	r2,r2,r2
   12888:	1085883a 	add	r2,r2,r2
   1288c:	1887883a 	add	r3,r3,r2
   12890:	e0bffd17 	ldw	r2,-12(fp)
   12894:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   12898:	e0ffff17 	ldw	r3,-4(fp)
   1289c:	e0bffd17 	ldw	r2,-12(fp)
   128a0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   128a4:	e0bffc03 	ldbu	r2,-16(fp)
   128a8:	10800044 	addi	r2,r2,1
   128ac:	e0bffc05 	stb	r2,-16(fp)
   128b0:	e0bffc03 	ldbu	r2,-16(fp)
   128b4:	10800570 	cmpltui	r2,r2,21
   128b8:	103fd91e 	bne	r2,zero,12820 <__alt_mem_Flash_flash_data+0xf4012820>
#endif
                }
            }
        }
    }
}
   128bc:	e037883a 	mov	sp,fp
   128c0:	dfc00117 	ldw	ra,4(sp)
   128c4:	df000017 	ldw	fp,0(sp)
   128c8:	dec00204 	addi	sp,sp,8
   128cc:	f800283a 	ret

000128d0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   128d0:	defff204 	addi	sp,sp,-56
   128d4:	dfc00d15 	stw	ra,52(sp)
   128d8:	df000c15 	stw	fp,48(sp)
   128dc:	df000c04 	addi	fp,sp,48
   128e0:	e17ffc15 	stw	r5,-16(fp)
   128e4:	e1bffd15 	stw	r6,-12(fp)
   128e8:	3807883a 	mov	r3,r7
   128ec:	e0800417 	ldw	r2,16(fp)
   128f0:	e13ffb05 	stb	r4,-20(fp)
   128f4:	e0fffe0d 	sth	r3,-8(fp)
   128f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   128fc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12900:	0005303a 	rdctl	r2,status
   12904:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12908:	e0fff617 	ldw	r3,-40(fp)
   1290c:	00bfff84 	movi	r2,-2
   12910:	1884703a 	and	r2,r3,r2
   12914:	1001703a 	wrctl	status,r2
  
  return context;
   12918:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   1291c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   12920:	d0a81917 	ldw	r2,-24476(gp)
   12924:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   12928:	e0bff517 	ldw	r2,-44(fp)
   1292c:	10009326 	beq	r2,zero,12b7c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   12930:	e0bff517 	ldw	r2,-44(fp)
   12934:	10800517 	ldw	r2,20(r2)
   12938:	d0a81915 	stw	r2,-24476(gp)
   1293c:	e0bff417 	ldw	r2,-48(fp)
   12940:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12944:	e0bff717 	ldw	r2,-36(fp)
   12948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1294c:	e0bff517 	ldw	r2,-44(fp)
   12950:	e0fffc17 	ldw	r3,-16(fp)
   12954:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   12958:	e0bff517 	ldw	r2,-44(fp)
   1295c:	e0fffb03 	ldbu	r3,-20(fp)
   12960:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   12964:	e0bff517 	ldw	r2,-44(fp)
   12968:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1296c:	e0bff517 	ldw	r2,-44(fp)
   12970:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   12974:	e0bff517 	ldw	r2,-44(fp)
   12978:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   1297c:	e0bff517 	ldw	r2,-44(fp)
   12980:	e0c00317 	ldw	r3,12(fp)
   12984:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   12988:	e0bff517 	ldw	r2,-44(fp)
   1298c:	e0c00217 	ldw	r3,8(fp)
   12990:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   12994:	e0bff517 	ldw	r2,-44(fp)
   12998:	e0fffd17 	ldw	r3,-12(fp)
   1299c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   129a0:	e0bff517 	ldw	r2,-44(fp)
   129a4:	e0ffff0b 	ldhu	r3,-4(fp)
   129a8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   129ac:	e0bff517 	ldw	r2,-44(fp)
   129b0:	e0fffe0b 	ldhu	r3,-8(fp)
   129b4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   129b8:	e0bff517 	ldw	r2,-44(fp)
   129bc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   129c0:	e0bffb03 	ldbu	r2,-20(fp)
   129c4:	1004d0fa 	srli	r2,r2,3
   129c8:	1007883a 	mov	r3,r2
   129cc:	e0bff517 	ldw	r2,-44(fp)
   129d0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   129d4:	e0bffb03 	ldbu	r2,-20(fp)
   129d8:	108001cc 	andi	r2,r2,7
   129dc:	1007883a 	mov	r3,r2
   129e0:	e0bff517 	ldw	r2,-44(fp)
   129e4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   129e8:	e0bff517 	ldw	r2,-44(fp)
   129ec:	10800d03 	ldbu	r2,52(r2)
   129f0:	10803fcc 	andi	r2,r2,255
   129f4:	00c00044 	movi	r3,1
   129f8:	1884983a 	sll	r2,r3,r2
   129fc:	1007883a 	mov	r3,r2
   12a00:	e0bff517 	ldw	r2,-44(fp)
   12a04:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   12a08:	e0bff517 	ldw	r2,-44(fp)
   12a0c:	10800cc3 	ldbu	r2,51(r2)
   12a10:	10803fcc 	andi	r2,r2,255
   12a14:	00c00044 	movi	r3,1
   12a18:	1884983a 	sll	r2,r3,r2
   12a1c:	1007883a 	mov	r3,r2
   12a20:	e0bff517 	ldw	r2,-44(fp)
   12a24:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   12a28:	e0bff517 	ldw	r2,-44(fp)
   12a2c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   12a30:	e0bff517 	ldw	r2,-44(fp)
   12a34:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   12a38:	e0bff517 	ldw	r2,-44(fp)
   12a3c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   12a40:	e0bff517 	ldw	r2,-44(fp)
   12a44:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   12a48:	e0bff517 	ldw	r2,-44(fp)
   12a4c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   12a50:	e0bff517 	ldw	r2,-44(fp)
   12a54:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   12a58:	e0bff517 	ldw	r2,-44(fp)
   12a5c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   12a60:	e0bff517 	ldw	r2,-44(fp)
   12a64:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   12a68:	e0bff517 	ldw	r2,-44(fp)
   12a6c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   12a70:	e0bff517 	ldw	r2,-44(fp)
   12a74:	00c00fc4 	movi	r3,63
   12a78:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   12a7c:	e0bff517 	ldw	r2,-44(fp)
   12a80:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   12a84:	e13ff517 	ldw	r4,-44(fp)
   12a88:	001be380 	call	1be38 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   12a8c:	e13ff517 	ldw	r4,-44(fp)
   12a90:	001bd500 	call	1bd50 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a94:	0005303a 	rdctl	r2,status
   12a98:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a9c:	e0fff817 	ldw	r3,-32(fp)
   12aa0:	00bfff84 	movi	r2,-2
   12aa4:	1884703a 	and	r2,r3,r2
   12aa8:	1001703a 	wrctl	status,r2
  
  return context;
   12aac:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   12ab0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12ab4:	e0fffb03 	ldbu	r3,-20(fp)
   12ab8:	008000b4 	movhi	r2,2
   12abc:	109f7104 	addi	r2,r2,32196
   12ac0:	18c7883a 	add	r3,r3,r3
   12ac4:	18c7883a 	add	r3,r3,r3
   12ac8:	10c5883a 	add	r2,r2,r3
   12acc:	e0fff517 	ldw	r3,-44(fp)
   12ad0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12ad4:	d0e81517 	ldw	r3,-24492(gp)
   12ad8:	e0bff517 	ldw	r2,-44(fp)
   12adc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12ae0:	e0bff517 	ldw	r2,-44(fp)
   12ae4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12ae8:	d0a81517 	ldw	r2,-24492(gp)
   12aec:	10000326 	beq	r2,zero,12afc <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12af0:	d0a81517 	ldw	r2,-24492(gp)
   12af4:	e0fff517 	ldw	r3,-44(fp)
   12af8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12afc:	e0bff517 	ldw	r2,-44(fp)
   12b00:	d0a81515 	stw	r2,-24492(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12b04:	e0bff517 	ldw	r2,-44(fp)
   12b08:	10c00d83 	ldbu	r3,54(r2)
   12b0c:	d0a81e03 	ldbu	r2,-24456(gp)
   12b10:	1884b03a 	or	r2,r3,r2
   12b14:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12b18:	e0bff517 	ldw	r2,-44(fp)
   12b1c:	10800d03 	ldbu	r2,52(r2)
   12b20:	10c03fcc 	andi	r3,r2,255
   12b24:	e0bff517 	ldw	r2,-44(fp)
   12b28:	10800d03 	ldbu	r2,52(r2)
   12b2c:	11003fcc 	andi	r4,r2,255
   12b30:	d0a81e44 	addi	r2,gp,-24455
   12b34:	2085883a 	add	r2,r4,r2
   12b38:	11000003 	ldbu	r4,0(r2)
   12b3c:	e0bff517 	ldw	r2,-44(fp)
   12b40:	10800d43 	ldbu	r2,53(r2)
   12b44:	2084b03a 	or	r2,r4,r2
   12b48:	1009883a 	mov	r4,r2
   12b4c:	d0a81e44 	addi	r2,gp,-24455
   12b50:	1885883a 	add	r2,r3,r2
   12b54:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12b58:	d0a81a43 	ldbu	r2,-24471(gp)
   12b5c:	10800044 	addi	r2,r2,1
   12b60:	d0a81a45 	stb	r2,-24471(gp)
   12b64:	e0bff417 	ldw	r2,-48(fp)
   12b68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b6c:	e0bff917 	ldw	r2,-28(fp)
   12b70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12b74:	0005883a 	mov	r2,zero
   12b78:	00000506 	br	12b90 <OS_TCBInit+0x2c0>
   12b7c:	e0bff417 	ldw	r2,-48(fp)
   12b80:	e0bffa15 	stw	r2,-24(fp)
   12b84:	e0bffa17 	ldw	r2,-24(fp)
   12b88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12b8c:	00801084 	movi	r2,66
}
   12b90:	e037883a 	mov	sp,fp
   12b94:	dfc00117 	ldw	ra,4(sp)
   12b98:	df000017 	ldw	fp,0(sp)
   12b9c:	dec00204 	addi	sp,sp,8
   12ba0:	f800283a 	ret

00012ba4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12ba4:	defffe04 	addi	sp,sp,-8
   12ba8:	df000115 	stw	fp,4(sp)
   12bac:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12bb0:	d0a00f04 	addi	r2,gp,-32708
   12bb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12bb8:	d0a01004 	addi	r2,gp,-32704
   12bbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12bc0:	d0a01184 	addi	r2,gp,-32698
   12bc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12bc8:	d0a01204 	addi	r2,gp,-32696
   12bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12bd0:	d0a01104 	addi	r2,gp,-32700
   12bd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12bd8:	d0a01284 	addi	r2,gp,-32694
   12bdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12be0:	d0a01304 	addi	r2,gp,-32692
   12be4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12be8:	d0a01384 	addi	r2,gp,-32690
   12bec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12bf0:	d0a01404 	addi	r2,gp,-32688
   12bf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12bf8:	d0a01484 	addi	r2,gp,-32686
   12bfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12c00:	d0a01504 	addi	r2,gp,-32684
   12c04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12c08:	d0a01584 	addi	r2,gp,-32682
   12c0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12c10:	d0a01604 	addi	r2,gp,-32680
   12c14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12c18:	d0a01684 	addi	r2,gp,-32678
   12c1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12c20:	d0a01704 	addi	r2,gp,-32676
   12c24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12c28:	d0a01784 	addi	r2,gp,-32674
   12c2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12c30:	d0a01804 	addi	r2,gp,-32672
   12c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12c38:	d0a01884 	addi	r2,gp,-32670
   12c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   12c40:	d0a01904 	addi	r2,gp,-32668
   12c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12c48:	d0a01984 	addi	r2,gp,-32666
   12c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   12c50:	d0a01a04 	addi	r2,gp,-32664
   12c54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12c58:	d0a01a84 	addi	r2,gp,-32662
   12c5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   12c60:	d0a01b04 	addi	r2,gp,-32660
   12c64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12c68:	d0a01b84 	addi	r2,gp,-32658
   12c6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   12c70:	d0a01c04 	addi	r2,gp,-32656
   12c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   12c78:	d0a01c84 	addi	r2,gp,-32654
   12c7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   12c80:	d0a01d04 	addi	r2,gp,-32652
   12c84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   12c88:	d0a01d84 	addi	r2,gp,-32650
   12c8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   12c90:	d0a01e04 	addi	r2,gp,-32648
   12c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   12c98:	d0a01e84 	addi	r2,gp,-32646
   12c9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   12ca0:	d0a01f04 	addi	r2,gp,-32644
   12ca4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12ca8:	d0a01f84 	addi	r2,gp,-32642
   12cac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   12cb0:	d0a02004 	addi	r2,gp,-32640
   12cb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12cb8:	d0a02084 	addi	r2,gp,-32638
   12cbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   12cc0:	d0a02104 	addi	r2,gp,-32636
   12cc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12cc8:	d0a02184 	addi	r2,gp,-32634
   12ccc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   12cd0:	d0a02204 	addi	r2,gp,-32632
   12cd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12cd8:	d0a02284 	addi	r2,gp,-32630
   12cdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12ce0:	d0a02304 	addi	r2,gp,-32628
   12ce4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12ce8:	d0a02384 	addi	r2,gp,-32626
   12cec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12cf0:	d0a02404 	addi	r2,gp,-32624
   12cf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12cf8:	d0a02484 	addi	r2,gp,-32622
   12cfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12d00:	d0a02504 	addi	r2,gp,-32620
   12d04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12d08:	d0a02584 	addi	r2,gp,-32618
   12d0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12d10:	d0a02604 	addi	r2,gp,-32616
   12d14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12d18:	d0a02b04 	addi	r2,gp,-32596
   12d1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	df000017 	ldw	fp,0(sp)
   12d28:	dec00104 	addi	sp,sp,4
   12d2c:	f800283a 	ret

00012d30 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12d30:	defff204 	addi	sp,sp,-56
   12d34:	df000d15 	stw	fp,52(sp)
   12d38:	df000d04 	addi	fp,sp,52
   12d3c:	e13ffc15 	stw	r4,-16(fp)
   12d40:	2807883a 	mov	r3,r5
   12d44:	3005883a 	mov	r2,r6
   12d48:	e1ffff15 	stw	r7,-4(fp)
   12d4c:	e0fffd0d 	sth	r3,-12(fp)
   12d50:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12d54:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12d58:	e0bfff17 	ldw	r2,-4(fp)
   12d5c:	1000021e 	bne	r2,zero,12d68 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12d60:	0005883a 	mov	r2,zero
   12d64:	0000b006 	br	13028 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12d68:	e0bffc17 	ldw	r2,-16(fp)
   12d6c:	1000051e 	bne	r2,zero,12d84 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12d70:	e0bfff17 	ldw	r2,-4(fp)
   12d74:	00c01b84 	movi	r3,110
   12d78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12d7c:	0005883a 	mov	r2,zero
   12d80:	0000a906 	br	13028 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12d84:	e0bffc17 	ldw	r2,-16(fp)
   12d88:	10800003 	ldbu	r2,0(r2)
   12d8c:	10803fcc 	andi	r2,r2,255
   12d90:	10800160 	cmpeqi	r2,r2,5
   12d94:	1000051e 	bne	r2,zero,12dac <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   12d98:	e0bfff17 	ldw	r2,-4(fp)
   12d9c:	00c00044 	movi	r3,1
   12da0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12da4:	0005883a 	mov	r2,zero
   12da8:	00009f06 	br	13028 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12dac:	e0fffe03 	ldbu	r3,-8(fp)
   12db0:	00bfe004 	movi	r2,-128
   12db4:	1884703a 	and	r2,r3,r2
   12db8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   12dbc:	e0bff503 	ldbu	r2,-44(fp)
   12dc0:	10000626 	beq	r2,zero,12ddc <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12dc4:	e0bffe03 	ldbu	r2,-8(fp)
   12dc8:	10801fcc 	andi	r2,r2,127
   12dcc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12dd0:	00800044 	movi	r2,1
   12dd4:	e0bff385 	stb	r2,-50(fp)
   12dd8:	00000106 	br	12de0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12ddc:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12de0:	e0bfff17 	ldw	r2,-4(fp)
   12de4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12de8:	0005303a 	rdctl	r2,status
   12dec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12df0:	e0fff617 	ldw	r3,-40(fp)
   12df4:	00bfff84 	movi	r2,-2
   12df8:	1884703a 	and	r2,r3,r2
   12dfc:	1001703a 	wrctl	status,r2
  
  return context;
   12e00:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   12e04:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   12e08:	e0bffe03 	ldbu	r2,-8(fp)
   12e0c:	10c00060 	cmpeqi	r3,r2,1
   12e10:	18005f1e 	bne	r3,zero,12f90 <OSFlagAccept+0x260>
   12e14:	10c00088 	cmpgei	r3,r2,2
   12e18:	1800021e 	bne	r3,zero,12e24 <OSFlagAccept+0xf4>
   12e1c:	10003f26 	beq	r2,zero,12f1c <OSFlagAccept+0x1ec>
   12e20:	00007706 	br	13000 <OSFlagAccept+0x2d0>
   12e24:	10c000a0 	cmpeqi	r3,r2,2
   12e28:	1800031e 	bne	r3,zero,12e38 <OSFlagAccept+0x108>
   12e2c:	108000e0 	cmpeqi	r2,r2,3
   12e30:	10001e1e 	bne	r2,zero,12eac <OSFlagAccept+0x17c>
   12e34:	00007206 	br	13000 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12e38:	e0bffc17 	ldw	r2,-16(fp)
   12e3c:	10c0020b 	ldhu	r3,8(r2)
   12e40:	e0bffd0b 	ldhu	r2,-12(fp)
   12e44:	1884703a 	and	r2,r3,r2
   12e48:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12e4c:	e0fff30b 	ldhu	r3,-52(fp)
   12e50:	e0bffd0b 	ldhu	r2,-12(fp)
   12e54:	18800d1e 	bne	r3,r2,12e8c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e58:	e0bff383 	ldbu	r2,-50(fp)
   12e5c:	10800058 	cmpnei	r2,r2,1
   12e60:	10000d1e 	bne	r2,zero,12e98 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12e64:	e0bffc17 	ldw	r2,-16(fp)
   12e68:	1080020b 	ldhu	r2,8(r2)
   12e6c:	1007883a 	mov	r3,r2
   12e70:	e0bff30b 	ldhu	r2,-52(fp)
   12e74:	0084303a 	nor	r2,zero,r2
   12e78:	1884703a 	and	r2,r3,r2
   12e7c:	1007883a 	mov	r3,r2
   12e80:	e0bffc17 	ldw	r2,-16(fp)
   12e84:	10c0020d 	sth	r3,8(r2)
   12e88:	00000306 	br	12e98 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12e8c:	e0bfff17 	ldw	r2,-4(fp)
   12e90:	00c01c04 	movi	r3,112
   12e94:	10c00005 	stb	r3,0(r2)
   12e98:	e0bff417 	ldw	r2,-48(fp)
   12e9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ea0:	e0bff717 	ldw	r2,-36(fp)
   12ea4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12ea8:	00005e06 	br	13024 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12eac:	e0bffc17 	ldw	r2,-16(fp)
   12eb0:	10c0020b 	ldhu	r3,8(r2)
   12eb4:	e0bffd0b 	ldhu	r2,-12(fp)
   12eb8:	1884703a 	and	r2,r3,r2
   12ebc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12ec0:	e0bff30b 	ldhu	r2,-52(fp)
   12ec4:	10000d26 	beq	r2,zero,12efc <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12ec8:	e0bff383 	ldbu	r2,-50(fp)
   12ecc:	10800058 	cmpnei	r2,r2,1
   12ed0:	10000d1e 	bne	r2,zero,12f08 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12ed4:	e0bffc17 	ldw	r2,-16(fp)
   12ed8:	1080020b 	ldhu	r2,8(r2)
   12edc:	1007883a 	mov	r3,r2
   12ee0:	e0bff30b 	ldhu	r2,-52(fp)
   12ee4:	0084303a 	nor	r2,zero,r2
   12ee8:	1884703a 	and	r2,r3,r2
   12eec:	1007883a 	mov	r3,r2
   12ef0:	e0bffc17 	ldw	r2,-16(fp)
   12ef4:	10c0020d 	sth	r3,8(r2)
   12ef8:	00000306 	br	12f08 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12efc:	e0bfff17 	ldw	r2,-4(fp)
   12f00:	00c01c04 	movi	r3,112
   12f04:	10c00005 	stb	r3,0(r2)
   12f08:	e0bff417 	ldw	r2,-48(fp)
   12f0c:	e0bff815 	stw	r2,-32(fp)
   12f10:	e0bff817 	ldw	r2,-32(fp)
   12f14:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f18:	00004206 	br	13024 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12f1c:	e0bffc17 	ldw	r2,-16(fp)
   12f20:	1080020b 	ldhu	r2,8(r2)
   12f24:	0084303a 	nor	r2,zero,r2
   12f28:	1007883a 	mov	r3,r2
   12f2c:	e0bffd0b 	ldhu	r2,-12(fp)
   12f30:	1884703a 	and	r2,r3,r2
   12f34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12f38:	e0fff30b 	ldhu	r3,-52(fp)
   12f3c:	e0bffd0b 	ldhu	r2,-12(fp)
   12f40:	18800b1e 	bne	r3,r2,12f70 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12f44:	e0bff383 	ldbu	r2,-50(fp)
   12f48:	10800058 	cmpnei	r2,r2,1
   12f4c:	10000b1e 	bne	r2,zero,12f7c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12f50:	e0bffc17 	ldw	r2,-16(fp)
   12f54:	10c0020b 	ldhu	r3,8(r2)
   12f58:	e0bff30b 	ldhu	r2,-52(fp)
   12f5c:	1884b03a 	or	r2,r3,r2
   12f60:	1007883a 	mov	r3,r2
   12f64:	e0bffc17 	ldw	r2,-16(fp)
   12f68:	10c0020d 	sth	r3,8(r2)
   12f6c:	00000306 	br	12f7c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12f70:	e0bfff17 	ldw	r2,-4(fp)
   12f74:	00c01c04 	movi	r3,112
   12f78:	10c00005 	stb	r3,0(r2)
   12f7c:	e0bff417 	ldw	r2,-48(fp)
   12f80:	e0bff915 	stw	r2,-28(fp)
   12f84:	e0bff917 	ldw	r2,-28(fp)
   12f88:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f8c:	00002506 	br	13024 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12f90:	e0bffc17 	ldw	r2,-16(fp)
   12f94:	1080020b 	ldhu	r2,8(r2)
   12f98:	0084303a 	nor	r2,zero,r2
   12f9c:	1007883a 	mov	r3,r2
   12fa0:	e0bffd0b 	ldhu	r2,-12(fp)
   12fa4:	1884703a 	and	r2,r3,r2
   12fa8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12fac:	e0bff30b 	ldhu	r2,-52(fp)
   12fb0:	10000b26 	beq	r2,zero,12fe0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12fb4:	e0bff383 	ldbu	r2,-50(fp)
   12fb8:	10800058 	cmpnei	r2,r2,1
   12fbc:	10000b1e 	bne	r2,zero,12fec <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12fc0:	e0bffc17 	ldw	r2,-16(fp)
   12fc4:	10c0020b 	ldhu	r3,8(r2)
   12fc8:	e0bff30b 	ldhu	r2,-52(fp)
   12fcc:	1884b03a 	or	r2,r3,r2
   12fd0:	1007883a 	mov	r3,r2
   12fd4:	e0bffc17 	ldw	r2,-16(fp)
   12fd8:	10c0020d 	sth	r3,8(r2)
   12fdc:	00000306 	br	12fec <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12fe0:	e0bfff17 	ldw	r2,-4(fp)
   12fe4:	00c01c04 	movi	r3,112
   12fe8:	10c00005 	stb	r3,0(r2)
   12fec:	e0bff417 	ldw	r2,-48(fp)
   12ff0:	e0bffa15 	stw	r2,-24(fp)
   12ff4:	e0bffa17 	ldw	r2,-24(fp)
   12ff8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12ffc:	00000906 	br	13024 <OSFlagAccept+0x2f4>
   13000:	e0bff417 	ldw	r2,-48(fp)
   13004:	e0bffb15 	stw	r2,-20(fp)
   13008:	e0bffb17 	ldw	r2,-20(fp)
   1300c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13010:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   13014:	e0bfff17 	ldw	r2,-4(fp)
   13018:	00c01bc4 	movi	r3,111
   1301c:	10c00005 	stb	r3,0(r2)
             break;
   13020:	0001883a 	nop
    }
    return (flags_rdy);
   13024:	e0bff30b 	ldhu	r2,-52(fp)
}
   13028:	e037883a 	mov	sp,fp
   1302c:	df000017 	ldw	fp,0(sp)
   13030:	dec00104 	addi	sp,sp,4
   13034:	f800283a 	ret

00013038 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   13038:	defff804 	addi	sp,sp,-32
   1303c:	df000715 	stw	fp,28(sp)
   13040:	df000704 	addi	fp,sp,28
   13044:	2005883a 	mov	r2,r4
   13048:	e17fff15 	stw	r5,-4(fp)
   1304c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   13050:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   13054:	e0bfff17 	ldw	r2,-4(fp)
   13058:	1000021e 	bne	r2,zero,13064 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1305c:	0005883a 	mov	r2,zero
   13060:	00003b06 	br	13150 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   13064:	008000b4 	movhi	r2,2
   13068:	1082df04 	addi	r2,r2,2940
   1306c:	10800003 	ldbu	r2,0(r2)
   13070:	10803fcc 	andi	r2,r2,255
   13074:	10000526 	beq	r2,zero,1308c <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   13078:	e0bfff17 	ldw	r2,-4(fp)
   1307c:	00c00404 	movi	r3,16
   13080:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   13084:	0005883a 	mov	r2,zero
   13088:	00003106 	br	13150 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1308c:	0005303a 	rdctl	r2,status
   13090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13094:	e0fffb17 	ldw	r3,-20(fp)
   13098:	00bfff84 	movi	r2,-2
   1309c:	1884703a 	and	r2,r3,r2
   130a0:	1001703a 	wrctl	status,r2
  
  return context;
   130a4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   130a8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   130ac:	008000b4 	movhi	r2,2
   130b0:	1082e204 	addi	r2,r2,2952
   130b4:	10800017 	ldw	r2,0(r2)
   130b8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   130bc:	e0bffa17 	ldw	r2,-24(fp)
   130c0:	10001b26 	beq	r2,zero,13130 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   130c4:	008000b4 	movhi	r2,2
   130c8:	1082e204 	addi	r2,r2,2952
   130cc:	10800017 	ldw	r2,0(r2)
   130d0:	10c00117 	ldw	r3,4(r2)
   130d4:	008000b4 	movhi	r2,2
   130d8:	1082e204 	addi	r2,r2,2952
   130dc:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   130e0:	e0bffa17 	ldw	r2,-24(fp)
   130e4:	00c00144 	movi	r3,5
   130e8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   130ec:	e0bffa17 	ldw	r2,-24(fp)
   130f0:	e0fffe0b 	ldhu	r3,-8(fp)
   130f4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   130f8:	e0bffa17 	ldw	r2,-24(fp)
   130fc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   13100:	e0bffa17 	ldw	r2,-24(fp)
   13104:	00c00fc4 	movi	r3,63
   13108:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1310c:	e0bffa17 	ldw	r2,-24(fp)
   13110:	100002c5 	stb	zero,11(r2)
   13114:	e0bff917 	ldw	r2,-28(fp)
   13118:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1311c:	e0bffc17 	ldw	r2,-16(fp)
   13120:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   13124:	e0bfff17 	ldw	r2,-4(fp)
   13128:	10000005 	stb	zero,0(r2)
   1312c:	00000706 	br	1314c <OSFlagCreate+0x114>
   13130:	e0bff917 	ldw	r2,-28(fp)
   13134:	e0bffd15 	stw	r2,-12(fp)
   13138:	e0bffd17 	ldw	r2,-12(fp)
   1313c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   13140:	e0bfff17 	ldw	r2,-4(fp)
   13144:	00c01c84 	movi	r3,114
   13148:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1314c:	e0bffa17 	ldw	r2,-24(fp)
}
   13150:	e037883a 	mov	sp,fp
   13154:	df000017 	ldw	fp,0(sp)
   13158:	dec00104 	addi	sp,sp,4
   1315c:	f800283a 	ret

00013160 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   13160:	defff204 	addi	sp,sp,-56
   13164:	dfc00d15 	stw	ra,52(sp)
   13168:	df000c15 	stw	fp,48(sp)
   1316c:	df000c04 	addi	fp,sp,48
   13170:	e13ffd15 	stw	r4,-12(fp)
   13174:	2805883a 	mov	r2,r5
   13178:	e1bfff15 	stw	r6,-4(fp)
   1317c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13180:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13184:	e0bfff17 	ldw	r2,-4(fp)
   13188:	1000021e 	bne	r2,zero,13194 <OSFlagDel+0x34>
        return (pgrp);
   1318c:	e0bffd17 	ldw	r2,-12(fp)
   13190:	00008a06 	br	133bc <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13194:	e0bffd17 	ldw	r2,-12(fp)
   13198:	1000051e 	bne	r2,zero,131b0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1319c:	e0bfff17 	ldw	r2,-4(fp)
   131a0:	00c01b84 	movi	r3,110
   131a4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   131a8:	e0bffd17 	ldw	r2,-12(fp)
   131ac:	00008306 	br	133bc <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   131b0:	008000b4 	movhi	r2,2
   131b4:	1082df04 	addi	r2,r2,2940
   131b8:	10800003 	ldbu	r2,0(r2)
   131bc:	10803fcc 	andi	r2,r2,255
   131c0:	10000526 	beq	r2,zero,131d8 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   131c4:	e0bfff17 	ldw	r2,-4(fp)
   131c8:	00c003c4 	movi	r3,15
   131cc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   131d0:	e0bffd17 	ldw	r2,-12(fp)
   131d4:	00007906 	br	133bc <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   131d8:	e0bffd17 	ldw	r2,-12(fp)
   131dc:	10800003 	ldbu	r2,0(r2)
   131e0:	10803fcc 	andi	r2,r2,255
   131e4:	10800160 	cmpeqi	r2,r2,5
   131e8:	1000051e 	bne	r2,zero,13200 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   131ec:	e0bfff17 	ldw	r2,-4(fp)
   131f0:	00c00044 	movi	r3,1
   131f4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   131f8:	e0bffd17 	ldw	r2,-12(fp)
   131fc:	00006f06 	br	133bc <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13200:	0005303a 	rdctl	r2,status
   13204:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13208:	e0fff817 	ldw	r3,-32(fp)
   1320c:	00bfff84 	movi	r2,-2
   13210:	1884703a 	and	r2,r3,r2
   13214:	1001703a 	wrctl	status,r2
  
  return context;
   13218:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1321c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   13220:	e0bffd17 	ldw	r2,-12(fp)
   13224:	10800117 	ldw	r2,4(r2)
   13228:	10000326 	beq	r2,zero,13238 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1322c:	00800044 	movi	r2,1
   13230:	e0bff405 	stb	r2,-48(fp)
   13234:	00000106 	br	1323c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13238:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1323c:	e0bffe03 	ldbu	r2,-8(fp)
   13240:	10000326 	beq	r2,zero,13250 <OSFlagDel+0xf0>
   13244:	10800060 	cmpeqi	r2,r2,1
   13248:	1000271e 	bne	r2,zero,132e8 <OSFlagDel+0x188>
   1324c:	00005006 	br	13390 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   13250:	e0bff403 	ldbu	r2,-48(fp)
   13254:	10001a1e 	bne	r2,zero,132c0 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   13258:	e0bffd17 	ldw	r2,-12(fp)
   1325c:	00c00fc4 	movi	r3,63
   13260:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13264:	e0bffd17 	ldw	r2,-12(fp)
   13268:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1326c:	e0bffd17 	ldw	r2,-12(fp)
   13270:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   13274:	008000b4 	movhi	r2,2
   13278:	1082e204 	addi	r2,r2,2952
   1327c:	10c00017 	ldw	r3,0(r2)
   13280:	e0bffd17 	ldw	r2,-12(fp)
   13284:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13288:	e0bffd17 	ldw	r2,-12(fp)
   1328c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13290:	008000b4 	movhi	r2,2
   13294:	1082e204 	addi	r2,r2,2952
   13298:	e0fffd17 	ldw	r3,-12(fp)
   1329c:	10c00015 	stw	r3,0(r2)
   132a0:	e0bff717 	ldw	r2,-36(fp)
   132a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132a8:	e0bff917 	ldw	r2,-28(fp)
   132ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   132b8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   132bc:	00003e06 	br	133b8 <OSFlagDel+0x258>
   132c0:	e0bff717 	ldw	r2,-36(fp)
   132c4:	e0bffa15 	stw	r2,-24(fp)
   132c8:	e0bffa17 	ldw	r2,-24(fp)
   132cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   132d0:	e0bfff17 	ldw	r2,-4(fp)
   132d4:	00c01244 	movi	r3,73
   132d8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   132dc:	e0bffd17 	ldw	r2,-12(fp)
   132e0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   132e4:	00003406 	br	133b8 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	10800117 	ldw	r2,4(r2)
   132f0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   132f4:	00000606 	br	13310 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   132f8:	e13ff517 	ldw	r4,-44(fp)
   132fc:	000b883a 	mov	r5,zero
   13300:	001439c0 	call	1439c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13304:	e0bff517 	ldw	r2,-44(fp)
   13308:	10800017 	ldw	r2,0(r2)
   1330c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   13310:	e0bff517 	ldw	r2,-44(fp)
   13314:	103ff81e 	bne	r2,zero,132f8 <__alt_mem_Flash_flash_data+0xf40132f8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	00c00fc4 	movi	r3,63
   13320:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13324:	e0bffd17 	ldw	r2,-12(fp)
   13328:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1332c:	e0bffd17 	ldw	r2,-12(fp)
   13330:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   13334:	008000b4 	movhi	r2,2
   13338:	1082e204 	addi	r2,r2,2952
   1333c:	10c00017 	ldw	r3,0(r2)
   13340:	e0bffd17 	ldw	r2,-12(fp)
   13344:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13348:	e0bffd17 	ldw	r2,-12(fp)
   1334c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   13350:	008000b4 	movhi	r2,2
   13354:	1082e204 	addi	r2,r2,2952
   13358:	e0fffd17 	ldw	r3,-12(fp)
   1335c:	10c00015 	stw	r3,0(r2)
   13360:	e0bff717 	ldw	r2,-36(fp)
   13364:	e0bffb15 	stw	r2,-20(fp)
   13368:	e0bffb17 	ldw	r2,-20(fp)
   1336c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13370:	e0bff403 	ldbu	r2,-48(fp)
   13374:	10800058 	cmpnei	r2,r2,1
   13378:	1000011e 	bne	r2,zero,13380 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1337c:	00124cc0 	call	124cc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   13380:	e0bfff17 	ldw	r2,-4(fp)
   13384:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   13388:	e03ff615 	stw	zero,-40(fp)
             break;
   1338c:	00000a06 	br	133b8 <OSFlagDel+0x258>
   13390:	e0bff717 	ldw	r2,-36(fp)
   13394:	e0bffc15 	stw	r2,-16(fp)
   13398:	e0bffc17 	ldw	r2,-16(fp)
   1339c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	00c001c4 	movi	r3,7
   133a8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   133ac:	e0bffd17 	ldw	r2,-12(fp)
   133b0:	e0bff615 	stw	r2,-40(fp)
             break;
   133b4:	0001883a 	nop
    }
    return (pgrp_return);
   133b8:	e0bff617 	ldw	r2,-40(fp)
}
   133bc:	e037883a 	mov	sp,fp
   133c0:	dfc00117 	ldw	ra,4(sp)
   133c4:	df000017 	ldw	fp,0(sp)
   133c8:	dec00204 	addi	sp,sp,8
   133cc:	f800283a 	ret

000133d0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   133d0:	defff604 	addi	sp,sp,-40
   133d4:	dfc00915 	stw	ra,36(sp)
   133d8:	df000815 	stw	fp,32(sp)
   133dc:	df000804 	addi	fp,sp,32
   133e0:	e13ffd15 	stw	r4,-12(fp)
   133e4:	e17ffe15 	stw	r5,-8(fp)
   133e8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   133ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   133f0:	e0bfff17 	ldw	r2,-4(fp)
   133f4:	1000021e 	bne	r2,zero,13400 <OSFlagNameGet+0x30>
        return (0);
   133f8:	0005883a 	mov	r2,zero
   133fc:	00003b06 	br	134ec <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13400:	e0bffd17 	ldw	r2,-12(fp)
   13404:	1000051e 	bne	r2,zero,1341c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	00c01b84 	movi	r3,110
   13410:	10c00005 	stb	r3,0(r2)
        return (0);
   13414:	0005883a 	mov	r2,zero
   13418:	00003406 	br	134ec <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1341c:	e0bffe17 	ldw	r2,-8(fp)
   13420:	1000051e 	bne	r2,zero,13438 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13424:	e0bfff17 	ldw	r2,-4(fp)
   13428:	00c00304 	movi	r3,12
   1342c:	10c00005 	stb	r3,0(r2)
        return (0);
   13430:	0005883a 	mov	r2,zero
   13434:	00002d06 	br	134ec <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13438:	008000b4 	movhi	r2,2
   1343c:	1082df04 	addi	r2,r2,2940
   13440:	10800003 	ldbu	r2,0(r2)
   13444:	10803fcc 	andi	r2,r2,255
   13448:	10000526 	beq	r2,zero,13460 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	00c00444 	movi	r3,17
   13454:	10c00005 	stb	r3,0(r2)
        return (0);
   13458:	0005883a 	mov	r2,zero
   1345c:	00002306 	br	134ec <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13460:	0005303a 	rdctl	r2,status
   13464:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13468:	e0fffa17 	ldw	r3,-24(fp)
   1346c:	00bfff84 	movi	r2,-2
   13470:	1884703a 	and	r2,r3,r2
   13474:	1001703a 	wrctl	status,r2
  
  return context;
   13478:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1347c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13480:	e0bffd17 	ldw	r2,-12(fp)
   13484:	10800003 	ldbu	r2,0(r2)
   13488:	10803fcc 	andi	r2,r2,255
   1348c:	10800160 	cmpeqi	r2,r2,5
   13490:	1000091e 	bne	r2,zero,134b8 <OSFlagNameGet+0xe8>
   13494:	e0bff817 	ldw	r2,-32(fp)
   13498:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1349c:	e0bffb17 	ldw	r2,-20(fp)
   134a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   134a4:	e0bfff17 	ldw	r2,-4(fp)
   134a8:	00c00044 	movi	r3,1
   134ac:	10c00005 	stb	r3,0(r2)
        return (0);
   134b0:	0005883a 	mov	r2,zero
   134b4:	00000d06 	br	134ec <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   134b8:	e0bffd17 	ldw	r2,-12(fp)
   134bc:	10800284 	addi	r2,r2,10
   134c0:	e13ffe17 	ldw	r4,-8(fp)
   134c4:	100b883a 	mov	r5,r2
   134c8:	00126080 	call	12608 <OS_StrCopy>
   134cc:	e0bff905 	stb	r2,-28(fp)
   134d0:	e0bff817 	ldw	r2,-32(fp)
   134d4:	e0bffc15 	stw	r2,-16(fp)
   134d8:	e0bffc17 	ldw	r2,-16(fp)
   134dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   134e0:	e0bfff17 	ldw	r2,-4(fp)
   134e4:	10000005 	stb	zero,0(r2)
    return (len);
   134e8:	e0bff903 	ldbu	r2,-28(fp)
}
   134ec:	e037883a 	mov	sp,fp
   134f0:	dfc00117 	ldw	ra,4(sp)
   134f4:	df000017 	ldw	fp,0(sp)
   134f8:	dec00204 	addi	sp,sp,8
   134fc:	f800283a 	ret

00013500 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13500:	defff504 	addi	sp,sp,-44
   13504:	dfc00a15 	stw	ra,40(sp)
   13508:	df000915 	stw	fp,36(sp)
   1350c:	df000904 	addi	fp,sp,36
   13510:	e13ffd15 	stw	r4,-12(fp)
   13514:	e17ffe15 	stw	r5,-8(fp)
   13518:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1351c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13520:	e0bfff17 	ldw	r2,-4(fp)
   13524:	1000011e 	bne	r2,zero,1352c <OSFlagNameSet+0x2c>
        return;
   13528:	00004406 	br	1363c <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1352c:	e0bffd17 	ldw	r2,-12(fp)
   13530:	1000041e 	bne	r2,zero,13544 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13534:	e0bfff17 	ldw	r2,-4(fp)
   13538:	00c01b84 	movi	r3,110
   1353c:	10c00005 	stb	r3,0(r2)
        return;
   13540:	00003e06 	br	1363c <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13544:	e0bffe17 	ldw	r2,-8(fp)
   13548:	1000041e 	bne	r2,zero,1355c <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1354c:	e0bfff17 	ldw	r2,-4(fp)
   13550:	00c00304 	movi	r3,12
   13554:	10c00005 	stb	r3,0(r2)
        return;
   13558:	00003806 	br	1363c <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1355c:	008000b4 	movhi	r2,2
   13560:	1082df04 	addi	r2,r2,2940
   13564:	10800003 	ldbu	r2,0(r2)
   13568:	10803fcc 	andi	r2,r2,255
   1356c:	10000426 	beq	r2,zero,13580 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   13570:	e0bfff17 	ldw	r2,-4(fp)
   13574:	00c00484 	movi	r3,18
   13578:	10c00005 	stb	r3,0(r2)
        return;
   1357c:	00002f06 	br	1363c <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13580:	0005303a 	rdctl	r2,status
   13584:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13588:	e0fff917 	ldw	r3,-28(fp)
   1358c:	00bfff84 	movi	r2,-2
   13590:	1884703a 	and	r2,r3,r2
   13594:	1001703a 	wrctl	status,r2
  
  return context;
   13598:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1359c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   135a0:	e0bffd17 	ldw	r2,-12(fp)
   135a4:	10800003 	ldbu	r2,0(r2)
   135a8:	10803fcc 	andi	r2,r2,255
   135ac:	10800160 	cmpeqi	r2,r2,5
   135b0:	1000081e 	bne	r2,zero,135d4 <OSFlagNameSet+0xd4>
   135b4:	e0bff717 	ldw	r2,-36(fp)
   135b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135bc:	e0bffa17 	ldw	r2,-24(fp)
   135c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   135c4:	e0bfff17 	ldw	r2,-4(fp)
   135c8:	00c00044 	movi	r3,1
   135cc:	10c00005 	stb	r3,0(r2)
        return;
   135d0:	00001a06 	br	1363c <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   135d4:	e13ffe17 	ldw	r4,-8(fp)
   135d8:	001267c0 	call	1267c <OS_StrLen>
   135dc:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   135e0:	e0bff803 	ldbu	r2,-32(fp)
   135e4:	10800830 	cmpltui	r2,r2,32
   135e8:	1000081e 	bne	r2,zero,1360c <OSFlagNameSet+0x10c>
   135ec:	e0bff717 	ldw	r2,-36(fp)
   135f0:	e0bffb15 	stw	r2,-20(fp)
   135f4:	e0bffb17 	ldw	r2,-20(fp)
   135f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   135fc:	e0bfff17 	ldw	r2,-4(fp)
   13600:	00c01cc4 	movi	r3,115
   13604:	10c00005 	stb	r3,0(r2)
        return;
   13608:	00000c06 	br	1363c <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1360c:	e0bffd17 	ldw	r2,-12(fp)
   13610:	10800284 	addi	r2,r2,10
   13614:	1009883a 	mov	r4,r2
   13618:	e17ffe17 	ldw	r5,-8(fp)
   1361c:	00126080 	call	12608 <OS_StrCopy>
   13620:	e0bff717 	ldw	r2,-36(fp)
   13624:	e0bffc15 	stw	r2,-16(fp)
   13628:	e0bffc17 	ldw	r2,-16(fp)
   1362c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13630:	e0bfff17 	ldw	r2,-4(fp)
   13634:	10000005 	stb	zero,0(r2)
    return;
   13638:	0001883a 	nop
}
   1363c:	e037883a 	mov	sp,fp
   13640:	dfc00117 	ldw	ra,4(sp)
   13644:	df000017 	ldw	fp,0(sp)
   13648:	dec00204 	addi	sp,sp,8
   1364c:	f800283a 	ret

00013650 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   13650:	deffe204 	addi	sp,sp,-120
   13654:	dfc01d15 	stw	ra,116(sp)
   13658:	df001c15 	stw	fp,112(sp)
   1365c:	df001c04 	addi	fp,sp,112
   13660:	e13ffc15 	stw	r4,-16(fp)
   13664:	2809883a 	mov	r4,r5
   13668:	3007883a 	mov	r3,r6
   1366c:	3805883a 	mov	r2,r7
   13670:	e13ffd0d 	sth	r4,-12(fp)
   13674:	e0fffe05 	stb	r3,-8(fp)
   13678:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1367c:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13680:	e0800217 	ldw	r2,8(fp)
   13684:	1000021e 	bne	r2,zero,13690 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   13688:	0005883a 	mov	r2,zero
   1368c:	00016706 	br	13c2c <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13690:	e0bffc17 	ldw	r2,-16(fp)
   13694:	1000051e 	bne	r2,zero,136ac <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13698:	e0800217 	ldw	r2,8(fp)
   1369c:	00c01b84 	movi	r3,110
   136a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136a4:	0005883a 	mov	r2,zero
   136a8:	00016006 	br	13c2c <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   136ac:	008000b4 	movhi	r2,2
   136b0:	1082df04 	addi	r2,r2,2940
   136b4:	10800003 	ldbu	r2,0(r2)
   136b8:	10803fcc 	andi	r2,r2,255
   136bc:	10000526 	beq	r2,zero,136d4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   136c0:	e0800217 	ldw	r2,8(fp)
   136c4:	00c00084 	movi	r3,2
   136c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136cc:	0005883a 	mov	r2,zero
   136d0:	00015606 	br	13c2c <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   136d4:	008000b4 	movhi	r2,2
   136d8:	1082d104 	addi	r2,r2,2884
   136dc:	10800003 	ldbu	r2,0(r2)
   136e0:	10803fcc 	andi	r2,r2,255
   136e4:	10000526 	beq	r2,zero,136fc <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   136e8:	e0800217 	ldw	r2,8(fp)
   136ec:	00c00344 	movi	r3,13
   136f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136f4:	0005883a 	mov	r2,zero
   136f8:	00014c06 	br	13c2c <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   136fc:	e0bffc17 	ldw	r2,-16(fp)
   13700:	10800003 	ldbu	r2,0(r2)
   13704:	10803fcc 	andi	r2,r2,255
   13708:	10800160 	cmpeqi	r2,r2,5
   1370c:	1000051e 	bne	r2,zero,13724 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   13710:	e0800217 	ldw	r2,8(fp)
   13714:	00c00044 	movi	r3,1
   13718:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1371c:	0005883a 	mov	r2,zero
   13720:	00014206 	br	13c2c <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   13724:	e0fffe03 	ldbu	r3,-8(fp)
   13728:	00bfe004 	movi	r2,-128
   1372c:	1884703a 	and	r2,r3,r2
   13730:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   13734:	e0bfe703 	ldbu	r2,-100(fp)
   13738:	10000626 	beq	r2,zero,13754 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1373c:	e0bffe03 	ldbu	r2,-8(fp)
   13740:	10801fcc 	andi	r2,r2,127
   13744:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   13748:	00800044 	movi	r2,1
   1374c:	e0bfe505 	stb	r2,-108(fp)
   13750:	00000106 	br	13758 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   13754:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13758:	0005303a 	rdctl	r2,status
   1375c:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13760:	e0ffe917 	ldw	r3,-92(fp)
   13764:	00bfff84 	movi	r2,-2
   13768:	1884703a 	and	r2,r3,r2
   1376c:	1001703a 	wrctl	status,r2
  
  return context;
   13770:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13774:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   13778:	e0bffe03 	ldbu	r2,-8(fp)
   1377c:	10c00060 	cmpeqi	r3,r2,1
   13780:	1800921e 	bne	r3,zero,139cc <OSFlagPend+0x37c>
   13784:	10c00088 	cmpgei	r3,r2,2
   13788:	1800021e 	bne	r3,zero,13794 <OSFlagPend+0x144>
   1378c:	10006126 	beq	r2,zero,13914 <OSFlagPend+0x2c4>
   13790:	0000bb06 	br	13a80 <OSFlagPend+0x430>
   13794:	10c000a0 	cmpeqi	r3,r2,2
   13798:	1800031e 	bne	r3,zero,137a8 <OSFlagPend+0x158>
   1379c:	108000e0 	cmpeqi	r2,r2,3
   137a0:	10002f1e 	bne	r2,zero,13860 <OSFlagPend+0x210>
   137a4:	0000b606 	br	13a80 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   137a8:	e0bffc17 	ldw	r2,-16(fp)
   137ac:	10c0020b 	ldhu	r3,8(r2)
   137b0:	e0bffd0b 	ldhu	r2,-12(fp)
   137b4:	1884703a 	and	r2,r3,r2
   137b8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   137bc:	e0ffe78b 	ldhu	r3,-98(fp)
   137c0:	e0bffd0b 	ldhu	r2,-12(fp)
   137c4:	1880191e 	bne	r3,r2,1382c <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   137c8:	e0bfe503 	ldbu	r2,-108(fp)
   137cc:	10800058 	cmpnei	r2,r2,1
   137d0:	1000091e 	bne	r2,zero,137f8 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   137d4:	e0bffc17 	ldw	r2,-16(fp)
   137d8:	1080020b 	ldhu	r2,8(r2)
   137dc:	1007883a 	mov	r3,r2
   137e0:	e0bfe78b 	ldhu	r2,-98(fp)
   137e4:	0084303a 	nor	r2,zero,r2
   137e8:	1884703a 	and	r2,r3,r2
   137ec:	1007883a 	mov	r3,r2
   137f0:	e0bffc17 	ldw	r2,-16(fp)
   137f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   137f8:	008000b4 	movhi	r2,2
   137fc:	1082e004 	addi	r2,r2,2944
   13800:	10800017 	ldw	r2,0(r2)
   13804:	e0ffe78b 	ldhu	r3,-98(fp)
   13808:	10c00b0d 	sth	r3,44(r2)
   1380c:	e0bfe617 	ldw	r2,-104(fp)
   13810:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13814:	e0bfea17 	ldw	r2,-88(fp)
   13818:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1381c:	e0800217 	ldw	r2,8(fp)
   13820:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13824:	e0bfe78b 	ldhu	r2,-98(fp)
   13828:	00010006 	br	13c2c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1382c:	e1bffd0b 	ldhu	r6,-12(fp)
   13830:	e0fffe03 	ldbu	r3,-8(fp)
   13834:	e0bfff0b 	ldhu	r2,-4(fp)
   13838:	e17ff704 	addi	r5,fp,-36
   1383c:	d8800015 	stw	r2,0(sp)
   13840:	e13ffc17 	ldw	r4,-16(fp)
   13844:	180f883a 	mov	r7,r3
   13848:	00140f40 	call	140f4 <OS_FlagBlock>
   1384c:	e0bfe617 	ldw	r2,-104(fp)
   13850:	e0bfeb15 	stw	r2,-84(fp)
   13854:	e0bfeb17 	ldw	r2,-84(fp)
   13858:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1385c:	00009206 	br	13aa8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   13860:	e0bffc17 	ldw	r2,-16(fp)
   13864:	10c0020b 	ldhu	r3,8(r2)
   13868:	e0bffd0b 	ldhu	r2,-12(fp)
   1386c:	1884703a 	and	r2,r3,r2
   13870:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   13874:	e0bfe78b 	ldhu	r2,-98(fp)
   13878:	10001926 	beq	r2,zero,138e0 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1387c:	e0bfe503 	ldbu	r2,-108(fp)
   13880:	10800058 	cmpnei	r2,r2,1
   13884:	1000091e 	bne	r2,zero,138ac <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   13888:	e0bffc17 	ldw	r2,-16(fp)
   1388c:	1080020b 	ldhu	r2,8(r2)
   13890:	1007883a 	mov	r3,r2
   13894:	e0bfe78b 	ldhu	r2,-98(fp)
   13898:	0084303a 	nor	r2,zero,r2
   1389c:	1884703a 	and	r2,r3,r2
   138a0:	1007883a 	mov	r3,r2
   138a4:	e0bffc17 	ldw	r2,-16(fp)
   138a8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   138ac:	008000b4 	movhi	r2,2
   138b0:	1082e004 	addi	r2,r2,2944
   138b4:	10800017 	ldw	r2,0(r2)
   138b8:	e0ffe78b 	ldhu	r3,-98(fp)
   138bc:	10c00b0d 	sth	r3,44(r2)
   138c0:	e0bfe617 	ldw	r2,-104(fp)
   138c4:	e0bfec15 	stw	r2,-80(fp)
   138c8:	e0bfec17 	ldw	r2,-80(fp)
   138cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   138d0:	e0800217 	ldw	r2,8(fp)
   138d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   138d8:	e0bfe78b 	ldhu	r2,-98(fp)
   138dc:	0000d306 	br	13c2c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   138e0:	e1bffd0b 	ldhu	r6,-12(fp)
   138e4:	e0fffe03 	ldbu	r3,-8(fp)
   138e8:	e0bfff0b 	ldhu	r2,-4(fp)
   138ec:	e17ff704 	addi	r5,fp,-36
   138f0:	d8800015 	stw	r2,0(sp)
   138f4:	e13ffc17 	ldw	r4,-16(fp)
   138f8:	180f883a 	mov	r7,r3
   138fc:	00140f40 	call	140f4 <OS_FlagBlock>
   13900:	e0bfe617 	ldw	r2,-104(fp)
   13904:	e0bfed15 	stw	r2,-76(fp)
   13908:	e0bfed17 	ldw	r2,-76(fp)
   1390c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13910:	00006506 	br	13aa8 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   13914:	e0bffc17 	ldw	r2,-16(fp)
   13918:	1080020b 	ldhu	r2,8(r2)
   1391c:	0084303a 	nor	r2,zero,r2
   13920:	1007883a 	mov	r3,r2
   13924:	e0bffd0b 	ldhu	r2,-12(fp)
   13928:	1884703a 	and	r2,r3,r2
   1392c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13930:	e0ffe78b 	ldhu	r3,-98(fp)
   13934:	e0bffd0b 	ldhu	r2,-12(fp)
   13938:	1880171e 	bne	r3,r2,13998 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1393c:	e0bfe503 	ldbu	r2,-108(fp)
   13940:	10800058 	cmpnei	r2,r2,1
   13944:	1000071e 	bne	r2,zero,13964 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   13948:	e0bffc17 	ldw	r2,-16(fp)
   1394c:	10c0020b 	ldhu	r3,8(r2)
   13950:	e0bfe78b 	ldhu	r2,-98(fp)
   13954:	1884b03a 	or	r2,r3,r2
   13958:	1007883a 	mov	r3,r2
   1395c:	e0bffc17 	ldw	r2,-16(fp)
   13960:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13964:	008000b4 	movhi	r2,2
   13968:	1082e004 	addi	r2,r2,2944
   1396c:	10800017 	ldw	r2,0(r2)
   13970:	e0ffe78b 	ldhu	r3,-98(fp)
   13974:	10c00b0d 	sth	r3,44(r2)
   13978:	e0bfe617 	ldw	r2,-104(fp)
   1397c:	e0bfee15 	stw	r2,-72(fp)
   13980:	e0bfee17 	ldw	r2,-72(fp)
   13984:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13988:	e0800217 	ldw	r2,8(fp)
   1398c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13990:	e0bfe78b 	ldhu	r2,-98(fp)
   13994:	0000a506 	br	13c2c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13998:	e1bffd0b 	ldhu	r6,-12(fp)
   1399c:	e0fffe03 	ldbu	r3,-8(fp)
   139a0:	e0bfff0b 	ldhu	r2,-4(fp)
   139a4:	e17ff704 	addi	r5,fp,-36
   139a8:	d8800015 	stw	r2,0(sp)
   139ac:	e13ffc17 	ldw	r4,-16(fp)
   139b0:	180f883a 	mov	r7,r3
   139b4:	00140f40 	call	140f4 <OS_FlagBlock>
   139b8:	e0bfe617 	ldw	r2,-104(fp)
   139bc:	e0bfef15 	stw	r2,-68(fp)
   139c0:	e0bfef17 	ldw	r2,-68(fp)
   139c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   139c8:	00003706 	br	13aa8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   139cc:	e0bffc17 	ldw	r2,-16(fp)
   139d0:	1080020b 	ldhu	r2,8(r2)
   139d4:	0084303a 	nor	r2,zero,r2
   139d8:	1007883a 	mov	r3,r2
   139dc:	e0bffd0b 	ldhu	r2,-12(fp)
   139e0:	1884703a 	and	r2,r3,r2
   139e4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   139e8:	e0bfe78b 	ldhu	r2,-98(fp)
   139ec:	10001726 	beq	r2,zero,13a4c <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   139f0:	e0bfe503 	ldbu	r2,-108(fp)
   139f4:	10800058 	cmpnei	r2,r2,1
   139f8:	1000071e 	bne	r2,zero,13a18 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   139fc:	e0bffc17 	ldw	r2,-16(fp)
   13a00:	10c0020b 	ldhu	r3,8(r2)
   13a04:	e0bfe78b 	ldhu	r2,-98(fp)
   13a08:	1884b03a 	or	r2,r3,r2
   13a0c:	1007883a 	mov	r3,r2
   13a10:	e0bffc17 	ldw	r2,-16(fp)
   13a14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13a18:	008000b4 	movhi	r2,2
   13a1c:	1082e004 	addi	r2,r2,2944
   13a20:	10800017 	ldw	r2,0(r2)
   13a24:	e0ffe78b 	ldhu	r3,-98(fp)
   13a28:	10c00b0d 	sth	r3,44(r2)
   13a2c:	e0bfe617 	ldw	r2,-104(fp)
   13a30:	e0bff015 	stw	r2,-64(fp)
   13a34:	e0bff017 	ldw	r2,-64(fp)
   13a38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13a3c:	e0800217 	ldw	r2,8(fp)
   13a40:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13a44:	e0bfe78b 	ldhu	r2,-98(fp)
   13a48:	00007806 	br	13c2c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13a4c:	e1bffd0b 	ldhu	r6,-12(fp)
   13a50:	e0fffe03 	ldbu	r3,-8(fp)
   13a54:	e0bfff0b 	ldhu	r2,-4(fp)
   13a58:	e17ff704 	addi	r5,fp,-36
   13a5c:	d8800015 	stw	r2,0(sp)
   13a60:	e13ffc17 	ldw	r4,-16(fp)
   13a64:	180f883a 	mov	r7,r3
   13a68:	00140f40 	call	140f4 <OS_FlagBlock>
   13a6c:	e0bfe617 	ldw	r2,-104(fp)
   13a70:	e0bff115 	stw	r2,-60(fp)
   13a74:	e0bff117 	ldw	r2,-60(fp)
   13a78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13a7c:	00000a06 	br	13aa8 <OSFlagPend+0x458>
   13a80:	e0bfe617 	ldw	r2,-104(fp)
   13a84:	e0bff215 	stw	r2,-56(fp)
   13a88:	e0bff217 	ldw	r2,-56(fp)
   13a8c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13a90:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   13a94:	e0800217 	ldw	r2,8(fp)
   13a98:	00c01bc4 	movi	r3,111
   13a9c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   13aa0:	e0bfe78b 	ldhu	r2,-98(fp)
   13aa4:	00006106 	br	13c2c <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   13aa8:	00124cc0 	call	124cc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13aac:	0005303a 	rdctl	r2,status
   13ab0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ab4:	e0fff317 	ldw	r3,-52(fp)
   13ab8:	00bfff84 	movi	r2,-2
   13abc:	1884703a 	and	r2,r3,r2
   13ac0:	1001703a 	wrctl	status,r2
  
  return context;
   13ac4:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   13ac8:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   13acc:	008000b4 	movhi	r2,2
   13ad0:	1082e004 	addi	r2,r2,2944
   13ad4:	10800017 	ldw	r2,0(r2)
   13ad8:	10800c43 	ldbu	r2,49(r2)
   13adc:	10803fcc 	andi	r2,r2,255
   13ae0:	10002226 	beq	r2,zero,13b6c <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   13ae4:	008000b4 	movhi	r2,2
   13ae8:	1082e004 	addi	r2,r2,2944
   13aec:	10800017 	ldw	r2,0(r2)
   13af0:	10800c43 	ldbu	r2,49(r2)
   13af4:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13af8:	008000b4 	movhi	r2,2
   13afc:	1082e004 	addi	r2,r2,2944
   13b00:	10800017 	ldw	r2,0(r2)
   13b04:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13b08:	e0bff704 	addi	r2,fp,-36
   13b0c:	1009883a 	mov	r4,r2
   13b10:	00144ac0 	call	144ac <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   13b14:	008000b4 	movhi	r2,2
   13b18:	1082e004 	addi	r2,r2,2944
   13b1c:	10800017 	ldw	r2,0(r2)
   13b20:	10000c05 	stb	zero,48(r2)
   13b24:	e0bfe617 	ldw	r2,-104(fp)
   13b28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b2c:	e0bff417 	ldw	r2,-48(fp)
   13b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13b34:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   13b38:	e0bfe803 	ldbu	r2,-96(fp)
   13b3c:	108000a0 	cmpeqi	r2,r2,2
   13b40:	10000426 	beq	r2,zero,13b54 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13b44:	e0800217 	ldw	r2,8(fp)
   13b48:	00c00384 	movi	r3,14
   13b4c:	10c00005 	stb	r3,0(r2)
                 break;
   13b50:	00000406 	br	13b64 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13b54:	e0800217 	ldw	r2,8(fp)
   13b58:	00c00284 	movi	r3,10
   13b5c:	10c00005 	stb	r3,0(r2)
                 break;
   13b60:	0001883a 	nop
        }
        return (flags_rdy);
   13b64:	e0bfe78b 	ldhu	r2,-98(fp)
   13b68:	00003006 	br	13c2c <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13b6c:	008000b4 	movhi	r2,2
   13b70:	1082e004 	addi	r2,r2,2944
   13b74:	10800017 	ldw	r2,0(r2)
   13b78:	10800b0b 	ldhu	r2,44(r2)
   13b7c:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13b80:	e0bfe503 	ldbu	r2,-108(fp)
   13b84:	10800058 	cmpnei	r2,r2,1
   13b88:	1000211e 	bne	r2,zero,13c10 <OSFlagPend+0x5c0>
        switch (wait_type) {
   13b8c:	e0bffe03 	ldbu	r2,-8(fp)
   13b90:	10001616 	blt	r2,zero,13bec <OSFlagPend+0x59c>
   13b94:	10c00090 	cmplti	r3,r2,2
   13b98:	18000c1e 	bne	r3,zero,13bcc <OSFlagPend+0x57c>
   13b9c:	10800108 	cmpgei	r2,r2,4
   13ba0:	1000121e 	bne	r2,zero,13bec <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   13ba4:	e0bffc17 	ldw	r2,-16(fp)
   13ba8:	1080020b 	ldhu	r2,8(r2)
   13bac:	1007883a 	mov	r3,r2
   13bb0:	e0bfe78b 	ldhu	r2,-98(fp)
   13bb4:	0084303a 	nor	r2,zero,r2
   13bb8:	1884703a 	and	r2,r3,r2
   13bbc:	1007883a 	mov	r3,r2
   13bc0:	e0bffc17 	ldw	r2,-16(fp)
   13bc4:	10c0020d 	sth	r3,8(r2)
                 break;
   13bc8:	00001106 	br	13c10 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13bcc:	e0bffc17 	ldw	r2,-16(fp)
   13bd0:	10c0020b 	ldhu	r3,8(r2)
   13bd4:	e0bfe78b 	ldhu	r2,-98(fp)
   13bd8:	1884b03a 	or	r2,r3,r2
   13bdc:	1007883a 	mov	r3,r2
   13be0:	e0bffc17 	ldw	r2,-16(fp)
   13be4:	10c0020d 	sth	r3,8(r2)
                 break;
   13be8:	00000906 	br	13c10 <OSFlagPend+0x5c0>
   13bec:	e0bfe617 	ldw	r2,-104(fp)
   13bf0:	e0bff515 	stw	r2,-44(fp)
   13bf4:	e0bff517 	ldw	r2,-44(fp)
   13bf8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13bfc:	e0800217 	ldw	r2,8(fp)
   13c00:	00c01bc4 	movi	r3,111
   13c04:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13c08:	0005883a 	mov	r2,zero
   13c0c:	00000706 	br	13c2c <OSFlagPend+0x5dc>
   13c10:	e0bfe617 	ldw	r2,-104(fp)
   13c14:	e0bff615 	stw	r2,-40(fp)
   13c18:	e0bff617 	ldw	r2,-40(fp)
   13c1c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13c20:	e0800217 	ldw	r2,8(fp)
   13c24:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13c28:	e0bfe78b 	ldhu	r2,-98(fp)
}
   13c2c:	e037883a 	mov	sp,fp
   13c30:	dfc00117 	ldw	ra,4(sp)
   13c34:	df000017 	ldw	fp,0(sp)
   13c38:	dec00204 	addi	sp,sp,8
   13c3c:	f800283a 	ret

00013c40 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13c40:	defffb04 	addi	sp,sp,-20
   13c44:	df000415 	stw	fp,16(sp)
   13c48:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13c4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c50:	0005303a 	rdctl	r2,status
   13c54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c58:	e0fffe17 	ldw	r3,-8(fp)
   13c5c:	00bfff84 	movi	r2,-2
   13c60:	1884703a 	and	r2,r3,r2
   13c64:	1001703a 	wrctl	status,r2
  
  return context;
   13c68:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13c6c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13c70:	008000b4 	movhi	r2,2
   13c74:	1082e004 	addi	r2,r2,2944
   13c78:	10800017 	ldw	r2,0(r2)
   13c7c:	10800b0b 	ldhu	r2,44(r2)
   13c80:	e0bffd0d 	sth	r2,-12(fp)
   13c84:	e0bffc17 	ldw	r2,-16(fp)
   13c88:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c8c:	e0bfff17 	ldw	r2,-4(fp)
   13c90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   13c94:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13c98:	e037883a 	mov	sp,fp
   13c9c:	df000017 	ldw	fp,0(sp)
   13ca0:	dec00104 	addi	sp,sp,4
   13ca4:	f800283a 	ret

00013ca8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   13ca8:	deffef04 	addi	sp,sp,-68
   13cac:	dfc01015 	stw	ra,64(sp)
   13cb0:	df000f15 	stw	fp,60(sp)
   13cb4:	df000f04 	addi	fp,sp,60
   13cb8:	e13ffc15 	stw	r4,-16(fp)
   13cbc:	2807883a 	mov	r3,r5
   13cc0:	3005883a 	mov	r2,r6
   13cc4:	e1ffff15 	stw	r7,-4(fp)
   13cc8:	e0fffd0d 	sth	r3,-12(fp)
   13ccc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   13cd0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   13cd4:	e0bfff17 	ldw	r2,-4(fp)
   13cd8:	1000021e 	bne	r2,zero,13ce4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13cdc:	0005883a 	mov	r2,zero
   13ce0:	0000ce06 	br	1401c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   13ce4:	e0bffc17 	ldw	r2,-16(fp)
   13ce8:	1000051e 	bne	r2,zero,13d00 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13cec:	e0bfff17 	ldw	r2,-4(fp)
   13cf0:	00c01b84 	movi	r3,110
   13cf4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13cf8:	0005883a 	mov	r2,zero
   13cfc:	0000c706 	br	1401c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   13d00:	e0bffc17 	ldw	r2,-16(fp)
   13d04:	10800003 	ldbu	r2,0(r2)
   13d08:	10803fcc 	andi	r2,r2,255
   13d0c:	10800160 	cmpeqi	r2,r2,5
   13d10:	1000051e 	bne	r2,zero,13d28 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   13d14:	e0bfff17 	ldw	r2,-4(fp)
   13d18:	00c00044 	movi	r3,1
   13d1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13d20:	0005883a 	mov	r2,zero
   13d24:	0000bd06 	br	1401c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d28:	0005303a 	rdctl	r2,status
   13d2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d30:	e0fff617 	ldw	r3,-40(fp)
   13d34:	00bfff84 	movi	r2,-2
   13d38:	1884703a 	and	r2,r3,r2
   13d3c:	1001703a 	wrctl	status,r2
  
  return context;
   13d40:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13d44:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13d48:	e0bffe03 	ldbu	r2,-8(fp)
   13d4c:	10000326 	beq	r2,zero,13d5c <OSFlagPost+0xb4>
   13d50:	10800060 	cmpeqi	r2,r2,1
   13d54:	10000b1e 	bne	r2,zero,13d84 <OSFlagPost+0xdc>
   13d58:	00001206 	br	13da4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13d5c:	e0bffc17 	ldw	r2,-16(fp)
   13d60:	1080020b 	ldhu	r2,8(r2)
   13d64:	1007883a 	mov	r3,r2
   13d68:	e0bffd0b 	ldhu	r2,-12(fp)
   13d6c:	0084303a 	nor	r2,zero,r2
   13d70:	1884703a 	and	r2,r3,r2
   13d74:	1007883a 	mov	r3,r2
   13d78:	e0bffc17 	ldw	r2,-16(fp)
   13d7c:	10c0020d 	sth	r3,8(r2)
             break;
   13d80:	00001106 	br	13dc8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   13d84:	e0bffc17 	ldw	r2,-16(fp)
   13d88:	10c0020b 	ldhu	r3,8(r2)
   13d8c:	e0bffd0b 	ldhu	r2,-12(fp)
   13d90:	1884b03a 	or	r2,r3,r2
   13d94:	1007883a 	mov	r3,r2
   13d98:	e0bffc17 	ldw	r2,-16(fp)
   13d9c:	10c0020d 	sth	r3,8(r2)
             break;
   13da0:	00000906 	br	13dc8 <OSFlagPost+0x120>
   13da4:	e0bff317 	ldw	r2,-52(fp)
   13da8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dac:	e0bff717 	ldw	r2,-36(fp)
   13db0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   13db4:	e0bfff17 	ldw	r2,-4(fp)
   13db8:	00c01c44 	movi	r3,113
   13dbc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   13dc0:	0005883a 	mov	r2,zero
   13dc4:	00009506 	br	1401c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13dc8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13dcc:	e0bffc17 	ldw	r2,-16(fp)
   13dd0:	10800117 	ldw	r2,4(r2)
   13dd4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13dd8:	00007406 	br	13fac <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   13ddc:	e0bff117 	ldw	r2,-60(fp)
   13de0:	10800483 	ldbu	r2,18(r2)
   13de4:	10803fcc 	andi	r2,r2,255
   13de8:	10c00060 	cmpeqi	r3,r2,1
   13dec:	18004d1e 	bne	r3,zero,13f24 <OSFlagPost+0x27c>
   13df0:	10c00088 	cmpgei	r3,r2,2
   13df4:	1800021e 	bne	r3,zero,13e00 <OSFlagPost+0x158>
   13df8:	10003126 	beq	r2,zero,13ec0 <OSFlagPost+0x218>
   13dfc:	00005f06 	br	13f7c <OSFlagPost+0x2d4>
   13e00:	10c000a0 	cmpeqi	r3,r2,2
   13e04:	1800031e 	bne	r3,zero,13e14 <OSFlagPost+0x16c>
   13e08:	108000e0 	cmpeqi	r2,r2,3
   13e0c:	1000181e 	bne	r2,zero,13e70 <OSFlagPost+0x1c8>
   13e10:	00005a06 	br	13f7c <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e14:	e0bffc17 	ldw	r2,-16(fp)
   13e18:	10c0020b 	ldhu	r3,8(r2)
   13e1c:	e0bff117 	ldw	r2,-60(fp)
   13e20:	1080040b 	ldhu	r2,16(r2)
   13e24:	1884703a 	and	r2,r3,r2
   13e28:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13e2c:	e0bff117 	ldw	r2,-60(fp)
   13e30:	1080040b 	ldhu	r2,16(r2)
   13e34:	10ffffcc 	andi	r3,r2,65535
   13e38:	e0bff40b 	ldhu	r2,-48(fp)
   13e3c:	18800b1e 	bne	r3,r2,13e6c <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e40:	e0bff40b 	ldhu	r2,-48(fp)
   13e44:	e13ff117 	ldw	r4,-60(fp)
   13e48:	100b883a 	mov	r5,r2
   13e4c:	001439c0 	call	1439c <OS_FlagTaskRdy>
   13e50:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13e54:	e0bff483 	ldbu	r2,-46(fp)
   13e58:	10800058 	cmpnei	r2,r2,1
   13e5c:	1000031e 	bne	r2,zero,13e6c <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e60:	00800044 	movi	r2,1
   13e64:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e68:	00004d06 	br	13fa0 <OSFlagPost+0x2f8>
   13e6c:	00004c06 	br	13fa0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e70:	e0bffc17 	ldw	r2,-16(fp)
   13e74:	10c0020b 	ldhu	r3,8(r2)
   13e78:	e0bff117 	ldw	r2,-60(fp)
   13e7c:	1080040b 	ldhu	r2,16(r2)
   13e80:	1884703a 	and	r2,r3,r2
   13e84:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13e88:	e0bff40b 	ldhu	r2,-48(fp)
   13e8c:	10000b26 	beq	r2,zero,13ebc <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e90:	e0bff40b 	ldhu	r2,-48(fp)
   13e94:	e13ff117 	ldw	r4,-60(fp)
   13e98:	100b883a 	mov	r5,r2
   13e9c:	001439c0 	call	1439c <OS_FlagTaskRdy>
   13ea0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13ea4:	e0bff483 	ldbu	r2,-46(fp)
   13ea8:	10800058 	cmpnei	r2,r2,1
   13eac:	1000031e 	bne	r2,zero,13ebc <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13eb0:	00800044 	movi	r2,1
   13eb4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13eb8:	00003906 	br	13fa0 <OSFlagPost+0x2f8>
   13ebc:	00003806 	br	13fa0 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13ec0:	e0bffc17 	ldw	r2,-16(fp)
   13ec4:	1080020b 	ldhu	r2,8(r2)
   13ec8:	0084303a 	nor	r2,zero,r2
   13ecc:	1007883a 	mov	r3,r2
   13ed0:	e0bff117 	ldw	r2,-60(fp)
   13ed4:	1080040b 	ldhu	r2,16(r2)
   13ed8:	1884703a 	and	r2,r3,r2
   13edc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13ee0:	e0bff117 	ldw	r2,-60(fp)
   13ee4:	1080040b 	ldhu	r2,16(r2)
   13ee8:	10ffffcc 	andi	r3,r2,65535
   13eec:	e0bff40b 	ldhu	r2,-48(fp)
   13ef0:	18800b1e 	bne	r3,r2,13f20 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13ef4:	e0bff40b 	ldhu	r2,-48(fp)
   13ef8:	e13ff117 	ldw	r4,-60(fp)
   13efc:	100b883a 	mov	r5,r2
   13f00:	001439c0 	call	1439c <OS_FlagTaskRdy>
   13f04:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13f08:	e0bff483 	ldbu	r2,-46(fp)
   13f0c:	10800058 	cmpnei	r2,r2,1
   13f10:	1000031e 	bne	r2,zero,13f20 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13f14:	00800044 	movi	r2,1
   13f18:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13f1c:	00002006 	br	13fa0 <OSFlagPost+0x2f8>
   13f20:	00001f06 	br	13fa0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13f24:	e0bffc17 	ldw	r2,-16(fp)
   13f28:	1080020b 	ldhu	r2,8(r2)
   13f2c:	0084303a 	nor	r2,zero,r2
   13f30:	1007883a 	mov	r3,r2
   13f34:	e0bff117 	ldw	r2,-60(fp)
   13f38:	1080040b 	ldhu	r2,16(r2)
   13f3c:	1884703a 	and	r2,r3,r2
   13f40:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13f44:	e0bff40b 	ldhu	r2,-48(fp)
   13f48:	10000b26 	beq	r2,zero,13f78 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13f4c:	e0bff40b 	ldhu	r2,-48(fp)
   13f50:	e13ff117 	ldw	r4,-60(fp)
   13f54:	100b883a 	mov	r5,r2
   13f58:	001439c0 	call	1439c <OS_FlagTaskRdy>
   13f5c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13f60:	e0bff483 	ldbu	r2,-46(fp)
   13f64:	10800058 	cmpnei	r2,r2,1
   13f68:	1000031e 	bne	r2,zero,13f78 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13f6c:	00800044 	movi	r2,1
   13f70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13f74:	00000a06 	br	13fa0 <OSFlagPost+0x2f8>
   13f78:	00000906 	br	13fa0 <OSFlagPost+0x2f8>
   13f7c:	e0bff317 	ldw	r2,-52(fp)
   13f80:	e0bff815 	stw	r2,-32(fp)
   13f84:	e0bff817 	ldw	r2,-32(fp)
   13f88:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13f8c:	e0bfff17 	ldw	r2,-4(fp)
   13f90:	00c01bc4 	movi	r3,111
   13f94:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13f98:	0005883a 	mov	r2,zero
   13f9c:	00001f06 	br	1401c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   13fa0:	e0bff117 	ldw	r2,-60(fp)
   13fa4:	10800017 	ldw	r2,0(r2)
   13fa8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13fac:	e0bff117 	ldw	r2,-60(fp)
   13fb0:	103f8a1e 	bne	r2,zero,13ddc <__alt_mem_Flash_flash_data+0xf4013ddc>
   13fb4:	e0bff317 	ldw	r2,-52(fp)
   13fb8:	e0bff915 	stw	r2,-28(fp)
   13fbc:	e0bff917 	ldw	r2,-28(fp)
   13fc0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   13fc4:	e0bff203 	ldbu	r2,-56(fp)
   13fc8:	10800058 	cmpnei	r2,r2,1
   13fcc:	1000011e 	bne	r2,zero,13fd4 <OSFlagPost+0x32c>
        OS_Sched();
   13fd0:	00124cc0 	call	124cc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fd4:	0005303a 	rdctl	r2,status
   13fd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fdc:	e0fffa17 	ldw	r3,-24(fp)
   13fe0:	00bfff84 	movi	r2,-2
   13fe4:	1884703a 	and	r2,r3,r2
   13fe8:	1001703a 	wrctl	status,r2
  
  return context;
   13fec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13ff0:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   13ff4:	e0bffc17 	ldw	r2,-16(fp)
   13ff8:	1080020b 	ldhu	r2,8(r2)
   13ffc:	e0bff50d 	sth	r2,-44(fp)
   14000:	e0bff317 	ldw	r2,-52(fp)
   14004:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14008:	e0bffb17 	ldw	r2,-20(fp)
   1400c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   14010:	e0bfff17 	ldw	r2,-4(fp)
   14014:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   14018:	e0bff50b 	ldhu	r2,-44(fp)
}
   1401c:	e037883a 	mov	sp,fp
   14020:	dfc00117 	ldw	ra,4(sp)
   14024:	df000017 	ldw	fp,0(sp)
   14028:	dec00204 	addi	sp,sp,8
   1402c:	f800283a 	ret

00014030 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   14030:	defff904 	addi	sp,sp,-28
   14034:	df000615 	stw	fp,24(sp)
   14038:	df000604 	addi	fp,sp,24
   1403c:	e13ffe15 	stw	r4,-8(fp)
   14040:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   14044:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   14048:	e0bfff17 	ldw	r2,-4(fp)
   1404c:	1000021e 	bne	r2,zero,14058 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   14050:	0005883a 	mov	r2,zero
   14054:	00002306 	br	140e4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   14058:	e0bffe17 	ldw	r2,-8(fp)
   1405c:	1000051e 	bne	r2,zero,14074 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14060:	e0bfff17 	ldw	r2,-4(fp)
   14064:	00c01b84 	movi	r3,110
   14068:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1406c:	0005883a 	mov	r2,zero
   14070:	00001c06 	br	140e4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   14074:	e0bffe17 	ldw	r2,-8(fp)
   14078:	10800003 	ldbu	r2,0(r2)
   1407c:	10803fcc 	andi	r2,r2,255
   14080:	10800160 	cmpeqi	r2,r2,5
   14084:	1000051e 	bne	r2,zero,1409c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14088:	e0bfff17 	ldw	r2,-4(fp)
   1408c:	00c00044 	movi	r3,1
   14090:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14094:	0005883a 	mov	r2,zero
   14098:	00001206 	br	140e4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1409c:	0005303a 	rdctl	r2,status
   140a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140a4:	e0fffc17 	ldw	r3,-16(fp)
   140a8:	00bfff84 	movi	r2,-2
   140ac:	1884703a 	and	r2,r3,r2
   140b0:	1001703a 	wrctl	status,r2
  
  return context;
   140b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   140b8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   140bc:	e0bffe17 	ldw	r2,-8(fp)
   140c0:	1080020b 	ldhu	r2,8(r2)
   140c4:	e0bffb0d 	sth	r2,-20(fp)
   140c8:	e0bffa17 	ldw	r2,-24(fp)
   140cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140d0:	e0bffd17 	ldw	r2,-12(fp)
   140d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   140d8:	e0bfff17 	ldw	r2,-4(fp)
   140dc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   140e0:	e0bffb0b 	ldhu	r2,-20(fp)
}
   140e4:	e037883a 	mov	sp,fp
   140e8:	df000017 	ldw	fp,0(sp)
   140ec:	dec00104 	addi	sp,sp,4
   140f0:	f800283a 	ret

000140f4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   140f4:	defff804 	addi	sp,sp,-32
   140f8:	df000715 	stw	fp,28(sp)
   140fc:	df000704 	addi	fp,sp,28
   14100:	e13ffb15 	stw	r4,-20(fp)
   14104:	e17ffc15 	stw	r5,-16(fp)
   14108:	3009883a 	mov	r4,r6
   1410c:	3807883a 	mov	r3,r7
   14110:	e0800117 	ldw	r2,4(fp)
   14114:	e13ffd0d 	sth	r4,-12(fp)
   14118:	e0fffe05 	stb	r3,-8(fp)
   1411c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   14120:	008000b4 	movhi	r2,2
   14124:	1082e004 	addi	r2,r2,2944
   14128:	10c00017 	ldw	r3,0(r2)
   1412c:	008000b4 	movhi	r2,2
   14130:	1082e004 	addi	r2,r2,2944
   14134:	10800017 	ldw	r2,0(r2)
   14138:	10800c03 	ldbu	r2,48(r2)
   1413c:	10800814 	ori	r2,r2,32
   14140:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   14144:	008000b4 	movhi	r2,2
   14148:	1082e004 	addi	r2,r2,2944
   1414c:	10800017 	ldw	r2,0(r2)
   14150:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   14154:	008000b4 	movhi	r2,2
   14158:	1082e004 	addi	r2,r2,2944
   1415c:	10800017 	ldw	r2,0(r2)
   14160:	e0ffff0b 	ldhu	r3,-4(fp)
   14164:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   14168:	008000b4 	movhi	r2,2
   1416c:	1082e004 	addi	r2,r2,2944
   14170:	10800017 	ldw	r2,0(r2)
   14174:	e0fffc17 	ldw	r3,-16(fp)
   14178:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1417c:	e0bffc17 	ldw	r2,-16(fp)
   14180:	e0fffd0b 	ldhu	r3,-12(fp)
   14184:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   14188:	e0bffc17 	ldw	r2,-16(fp)
   1418c:	e0fffe03 	ldbu	r3,-8(fp)
   14190:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   14194:	008000b4 	movhi	r2,2
   14198:	1082e004 	addi	r2,r2,2944
   1419c:	10c00017 	ldw	r3,0(r2)
   141a0:	e0bffc17 	ldw	r2,-16(fp)
   141a4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   141a8:	e0bffb17 	ldw	r2,-20(fp)
   141ac:	10c00117 	ldw	r3,4(r2)
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   141b8:	e0bffc17 	ldw	r2,-16(fp)
   141bc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   141c0:	e0bffc17 	ldw	r2,-16(fp)
   141c4:	e0fffb17 	ldw	r3,-20(fp)
   141c8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   141cc:	e0bffb17 	ldw	r2,-20(fp)
   141d0:	10800117 	ldw	r2,4(r2)
   141d4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   141d8:	e0bff917 	ldw	r2,-28(fp)
   141dc:	10000326 	beq	r2,zero,141ec <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   141e0:	e0bff917 	ldw	r2,-28(fp)
   141e4:	e0fffc17 	ldw	r3,-16(fp)
   141e8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   141ec:	e0bffb17 	ldw	r2,-20(fp)
   141f0:	e0fffc17 	ldw	r3,-16(fp)
   141f4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   141f8:	008000b4 	movhi	r2,2
   141fc:	1082e004 	addi	r2,r2,2944
   14200:	10800017 	ldw	r2,0(r2)
   14204:	10800d03 	ldbu	r2,52(r2)
   14208:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1420c:	e0fffa03 	ldbu	r3,-24(fp)
   14210:	e13ffa03 	ldbu	r4,-24(fp)
   14214:	008000b4 	movhi	r2,2
   14218:	1082dd44 	addi	r2,r2,2933
   1421c:	1105883a 	add	r2,r2,r4
   14220:	10800003 	ldbu	r2,0(r2)
   14224:	1009883a 	mov	r4,r2
   14228:	008000b4 	movhi	r2,2
   1422c:	1082e004 	addi	r2,r2,2944
   14230:	10800017 	ldw	r2,0(r2)
   14234:	10800d43 	ldbu	r2,53(r2)
   14238:	0084303a 	nor	r2,zero,r2
   1423c:	2084703a 	and	r2,r4,r2
   14240:	1009883a 	mov	r4,r2
   14244:	008000b4 	movhi	r2,2
   14248:	1082dd44 	addi	r2,r2,2933
   1424c:	10c5883a 	add	r2,r2,r3
   14250:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   14254:	e0fffa03 	ldbu	r3,-24(fp)
   14258:	008000b4 	movhi	r2,2
   1425c:	1082dd44 	addi	r2,r2,2933
   14260:	10c5883a 	add	r2,r2,r3
   14264:	10800003 	ldbu	r2,0(r2)
   14268:	10803fcc 	andi	r2,r2,255
   1426c:	10000e1e 	bne	r2,zero,142a8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14270:	008000b4 	movhi	r2,2
   14274:	1082e004 	addi	r2,r2,2944
   14278:	10800017 	ldw	r2,0(r2)
   1427c:	10800d83 	ldbu	r2,54(r2)
   14280:	0084303a 	nor	r2,zero,r2
   14284:	1007883a 	mov	r3,r2
   14288:	008000b4 	movhi	r2,2
   1428c:	1082dd04 	addi	r2,r2,2932
   14290:	10800003 	ldbu	r2,0(r2)
   14294:	1884703a 	and	r2,r3,r2
   14298:	1007883a 	mov	r3,r2
   1429c:	008000b4 	movhi	r2,2
   142a0:	1082dd04 	addi	r2,r2,2932
   142a4:	10c00005 	stb	r3,0(r2)
    }
}
   142a8:	e037883a 	mov	sp,fp
   142ac:	df000017 	ldw	fp,0(sp)
   142b0:	dec00104 	addi	sp,sp,4
   142b4:	f800283a 	ret

000142b8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   142b8:	defffb04 	addi	sp,sp,-20
   142bc:	dfc00415 	stw	ra,16(sp)
   142c0:	df000315 	stw	fp,12(sp)
   142c4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   142c8:	010000b4 	movhi	r4,2
   142cc:	2112fd04 	addi	r4,r4,19444
   142d0:	0140dc04 	movi	r5,880
   142d4:	00124180 	call	12418 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   142d8:	008000b4 	movhi	r2,2
   142dc:	1092fd04 	addi	r2,r2,19444
   142e0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   142e4:	008000b4 	movhi	r2,2
   142e8:	10930804 	addi	r2,r2,19488
   142ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   142f0:	e03ffd0d 	sth	zero,-12(fp)
   142f4:	00001306 	br	14344 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   14300:	e0bffe17 	ldw	r2,-8(fp)
   14304:	e0ffff17 	ldw	r3,-4(fp)
   14308:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1430c:	e0bffe17 	ldw	r2,-8(fp)
   14310:	00c00fc4 	movi	r3,63
   14314:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14318:	e0bffe17 	ldw	r2,-8(fp)
   1431c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   14320:	e0bffe17 	ldw	r2,-8(fp)
   14324:	10800b04 	addi	r2,r2,44
   14328:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1432c:	e0bfff17 	ldw	r2,-4(fp)
   14330:	10800b04 	addi	r2,r2,44
   14334:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14338:	e0bffd0b 	ldhu	r2,-12(fp)
   1433c:	10800044 	addi	r2,r2,1
   14340:	e0bffd0d 	sth	r2,-12(fp)
   14344:	e0bffd0b 	ldhu	r2,-12(fp)
   14348:	108004f0 	cmpltui	r2,r2,19
   1434c:	103fea1e 	bne	r2,zero,142f8 <__alt_mem_Flash_flash_data+0xf40142f8>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14350:	e0bffe17 	ldw	r2,-8(fp)
   14354:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   14358:	e0bffe17 	ldw	r2,-8(fp)
   1435c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   14360:	e0bffe17 	ldw	r2,-8(fp)
   14364:	00c00fc4 	movi	r3,63
   14368:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1436c:	e0bffe17 	ldw	r2,-8(fp)
   14370:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   14374:	008000b4 	movhi	r2,2
   14378:	1082e204 	addi	r2,r2,2952
   1437c:	00c000b4 	movhi	r3,2
   14380:	18d2fd04 	addi	r3,r3,19444
   14384:	10c00015 	stw	r3,0(r2)
#endif
}
   14388:	e037883a 	mov	sp,fp
   1438c:	dfc00117 	ldw	ra,4(sp)
   14390:	df000017 	ldw	fp,0(sp)
   14394:	dec00204 	addi	sp,sp,8
   14398:	f800283a 	ret

0001439c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1439c:	defffa04 	addi	sp,sp,-24
   143a0:	dfc00515 	stw	ra,20(sp)
   143a4:	df000415 	stw	fp,16(sp)
   143a8:	df000404 	addi	fp,sp,16
   143ac:	e13ffe15 	stw	r4,-8(fp)
   143b0:	2805883a 	mov	r2,r5
   143b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   143b8:	e0bffe17 	ldw	r2,-8(fp)
   143bc:	10800217 	ldw	r2,8(r2)
   143c0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   143c4:	e0bffd17 	ldw	r2,-12(fp)
   143c8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   143cc:	e0bffd17 	ldw	r2,-12(fp)
   143d0:	e0ffff0b 	ldhu	r3,-4(fp)
   143d4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   143d8:	e0bffd17 	ldw	r2,-12(fp)
   143dc:	10c00c03 	ldbu	r3,48(r2)
   143e0:	00bff7c4 	movi	r2,-33
   143e4:	1884703a 	and	r2,r3,r2
   143e8:	1007883a 	mov	r3,r2
   143ec:	e0bffd17 	ldw	r2,-12(fp)
   143f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   143f4:	e0bffd17 	ldw	r2,-12(fp)
   143f8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   143fc:	e0bffd17 	ldw	r2,-12(fp)
   14400:	10800c03 	ldbu	r2,48(r2)
   14404:	10803fcc 	andi	r2,r2,255
   14408:	10001f1e 	bne	r2,zero,14488 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1440c:	e0bffd17 	ldw	r2,-12(fp)
   14410:	10c00d83 	ldbu	r3,54(r2)
   14414:	008000b4 	movhi	r2,2
   14418:	1082dd04 	addi	r2,r2,2932
   1441c:	10800003 	ldbu	r2,0(r2)
   14420:	1884b03a 	or	r2,r3,r2
   14424:	1007883a 	mov	r3,r2
   14428:	008000b4 	movhi	r2,2
   1442c:	1082dd04 	addi	r2,r2,2932
   14430:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14434:	e0bffd17 	ldw	r2,-12(fp)
   14438:	10800d03 	ldbu	r2,52(r2)
   1443c:	10c03fcc 	andi	r3,r2,255
   14440:	e0bffd17 	ldw	r2,-12(fp)
   14444:	10800d03 	ldbu	r2,52(r2)
   14448:	11003fcc 	andi	r4,r2,255
   1444c:	008000b4 	movhi	r2,2
   14450:	1082dd44 	addi	r2,r2,2933
   14454:	1105883a 	add	r2,r2,r4
   14458:	11000003 	ldbu	r4,0(r2)
   1445c:	e0bffd17 	ldw	r2,-12(fp)
   14460:	10800d43 	ldbu	r2,53(r2)
   14464:	2084b03a 	or	r2,r4,r2
   14468:	1009883a 	mov	r4,r2
   1446c:	008000b4 	movhi	r2,2
   14470:	1082dd44 	addi	r2,r2,2933
   14474:	10c5883a 	add	r2,r2,r3
   14478:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1447c:	00800044 	movi	r2,1
   14480:	e0bffc05 	stb	r2,-16(fp)
   14484:	00000106 	br	1448c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   14488:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1448c:	e13ffe17 	ldw	r4,-8(fp)
   14490:	00144ac0 	call	144ac <OS_FlagUnlink>
    return (sched);
   14494:	e0bffc03 	ldbu	r2,-16(fp)
}
   14498:	e037883a 	mov	sp,fp
   1449c:	dfc00117 	ldw	ra,4(sp)
   144a0:	df000017 	ldw	fp,0(sp)
   144a4:	dec00204 	addi	sp,sp,8
   144a8:	f800283a 	ret

000144ac <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   144ac:	defffa04 	addi	sp,sp,-24
   144b0:	df000515 	stw	fp,20(sp)
   144b4:	df000504 	addi	fp,sp,20
   144b8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   144bc:	e0bfff17 	ldw	r2,-4(fp)
   144c0:	10800117 	ldw	r2,4(r2)
   144c4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   144c8:	e0bfff17 	ldw	r2,-4(fp)
   144cc:	10800017 	ldw	r2,0(r2)
   144d0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   144d4:	e0bffb17 	ldw	r2,-20(fp)
   144d8:	10000b1e 	bne	r2,zero,14508 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   144dc:	e0bfff17 	ldw	r2,-4(fp)
   144e0:	10800317 	ldw	r2,12(r2)
   144e4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	e0fffc17 	ldw	r3,-16(fp)
   144f0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   144f4:	e0bffc17 	ldw	r2,-16(fp)
   144f8:	10000b26 	beq	r2,zero,14528 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   144fc:	e0bffc17 	ldw	r2,-16(fp)
   14500:	10000115 	stw	zero,4(r2)
   14504:	00000806 	br	14528 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   14508:	e0bffb17 	ldw	r2,-20(fp)
   1450c:	e0fffc17 	ldw	r3,-16(fp)
   14510:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   14514:	e0bffc17 	ldw	r2,-16(fp)
   14518:	10000326 	beq	r2,zero,14528 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1451c:	e0bffc17 	ldw	r2,-16(fp)
   14520:	e0fffb17 	ldw	r3,-20(fp)
   14524:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   14528:	e0bfff17 	ldw	r2,-4(fp)
   1452c:	10800217 	ldw	r2,8(r2)
   14530:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   14534:	e0bffe17 	ldw	r2,-8(fp)
   14538:	10000a15 	stw	zero,40(r2)
#endif
}
   1453c:	e037883a 	mov	sp,fp
   14540:	df000017 	ldw	fp,0(sp)
   14544:	dec00104 	addi	sp,sp,4
   14548:	f800283a 	ret

0001454c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1454c:	defff404 	addi	sp,sp,-48
   14550:	df000b15 	stw	fp,44(sp)
   14554:	df000b04 	addi	fp,sp,44
   14558:	e13ffc15 	stw	r4,-16(fp)
   1455c:	e17ffd15 	stw	r5,-12(fp)
   14560:	e1bffe15 	stw	r6,-8(fp)
   14564:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14568:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1456c:	e0bfff17 	ldw	r2,-4(fp)
   14570:	1000021e 	bne	r2,zero,1457c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   14574:	0005883a 	mov	r2,zero
   14578:	00006d06 	br	14730 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1457c:	e0bffc17 	ldw	r2,-16(fp)
   14580:	1000051e 	bne	r2,zero,14598 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   14584:	e0bfff17 	ldw	r2,-4(fp)
   14588:	00c01884 	movi	r3,98
   1458c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14590:	0005883a 	mov	r2,zero
   14594:	00006606 	br	14730 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   14598:	e0bffc17 	ldw	r2,-16(fp)
   1459c:	108000cc 	andi	r2,r2,3
   145a0:	10000526 	beq	r2,zero,145b8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   145a4:	e0bfff17 	ldw	r2,-4(fp)
   145a8:	00c01884 	movi	r3,98
   145ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   145b0:	0005883a 	mov	r2,zero
   145b4:	00005e06 	br	14730 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   145b8:	e0bffd17 	ldw	r2,-12(fp)
   145bc:	108000a8 	cmpgeui	r2,r2,2
   145c0:	1000051e 	bne	r2,zero,145d8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   145c4:	e0bfff17 	ldw	r2,-4(fp)
   145c8:	00c016c4 	movi	r3,91
   145cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   145d0:	0005883a 	mov	r2,zero
   145d4:	00005606 	br	14730 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   145d8:	e0bffe17 	ldw	r2,-8(fp)
   145dc:	10800128 	cmpgeui	r2,r2,4
   145e0:	1000051e 	bne	r2,zero,145f8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   145e4:	e0bfff17 	ldw	r2,-4(fp)
   145e8:	00c01704 	movi	r3,92
   145ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   145f0:	0005883a 	mov	r2,zero
   145f4:	00004e06 	br	14730 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145f8:	0005303a 	rdctl	r2,status
   145fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14600:	e0fffa17 	ldw	r3,-24(fp)
   14604:	00bfff84 	movi	r2,-2
   14608:	1884703a 	and	r2,r3,r2
   1460c:	1001703a 	wrctl	status,r2
  
  return context;
   14610:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14614:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   14618:	008000b4 	movhi	r2,2
   1461c:	1082da04 	addi	r2,r2,2920
   14620:	10800017 	ldw	r2,0(r2)
   14624:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   14628:	008000b4 	movhi	r2,2
   1462c:	1082da04 	addi	r2,r2,2920
   14630:	10800017 	ldw	r2,0(r2)
   14634:	10000726 	beq	r2,zero,14654 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   14638:	008000b4 	movhi	r2,2
   1463c:	1082da04 	addi	r2,r2,2920
   14640:	10800017 	ldw	r2,0(r2)
   14644:	10c00117 	ldw	r3,4(r2)
   14648:	008000b4 	movhi	r2,2
   1464c:	1082da04 	addi	r2,r2,2920
   14650:	10c00015 	stw	r3,0(r2)
   14654:	e0bff817 	ldw	r2,-32(fp)
   14658:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1465c:	e0bffb17 	ldw	r2,-20(fp)
   14660:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   14664:	e0bff917 	ldw	r2,-28(fp)
   14668:	1000051e 	bne	r2,zero,14680 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   1466c:	e0bfff17 	ldw	r2,-4(fp)
   14670:	00c01684 	movi	r3,90
   14674:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14678:	0005883a 	mov	r2,zero
   1467c:	00002c06 	br	14730 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   14680:	e0bffc17 	ldw	r2,-16(fp)
   14684:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   14688:	e0fffc17 	ldw	r3,-16(fp)
   1468c:	e0bffe17 	ldw	r2,-8(fp)
   14690:	1885883a 	add	r2,r3,r2
   14694:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   14698:	e03ff715 	stw	zero,-36(fp)
   1469c:	00000c06 	br	146d0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   146a0:	e0bff617 	ldw	r2,-40(fp)
   146a4:	e0fff517 	ldw	r3,-44(fp)
   146a8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   146ac:	e0bff517 	ldw	r2,-44(fp)
   146b0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   146b4:	e0fff517 	ldw	r3,-44(fp)
   146b8:	e0bffe17 	ldw	r2,-8(fp)
   146bc:	1885883a 	add	r2,r3,r2
   146c0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   146c4:	e0bff717 	ldw	r2,-36(fp)
   146c8:	10800044 	addi	r2,r2,1
   146cc:	e0bff715 	stw	r2,-36(fp)
   146d0:	e0bffd17 	ldw	r2,-12(fp)
   146d4:	10bfffc4 	addi	r2,r2,-1
   146d8:	e0fff717 	ldw	r3,-36(fp)
   146dc:	18bff036 	bltu	r3,r2,146a0 <__alt_mem_Flash_flash_data+0xf40146a0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   146e0:	e0bff617 	ldw	r2,-40(fp)
   146e4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   146e8:	e0bff917 	ldw	r2,-28(fp)
   146ec:	e0fffc17 	ldw	r3,-16(fp)
   146f0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   146f4:	e0bff917 	ldw	r2,-28(fp)
   146f8:	e0fffc17 	ldw	r3,-16(fp)
   146fc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   14700:	e0bff917 	ldw	r2,-28(fp)
   14704:	e0fffd17 	ldw	r3,-12(fp)
   14708:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1470c:	e0bff917 	ldw	r2,-28(fp)
   14710:	e0fffd17 	ldw	r3,-12(fp)
   14714:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   14718:	e0bff917 	ldw	r2,-28(fp)
   1471c:	e0fffe17 	ldw	r3,-8(fp)
   14720:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   14724:	e0bfff17 	ldw	r2,-4(fp)
   14728:	10000005 	stb	zero,0(r2)
    return (pmem);
   1472c:	e0bff917 	ldw	r2,-28(fp)
}
   14730:	e037883a 	mov	sp,fp
   14734:	df000017 	ldw	fp,0(sp)
   14738:	dec00104 	addi	sp,sp,4
   1473c:	f800283a 	ret

00014740 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   14740:	defff804 	addi	sp,sp,-32
   14744:	df000715 	stw	fp,28(sp)
   14748:	df000704 	addi	fp,sp,28
   1474c:	e13ffe15 	stw	r4,-8(fp)
   14750:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14754:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14758:	e0bfff17 	ldw	r2,-4(fp)
   1475c:	1000021e 	bne	r2,zero,14768 <OSMemGet+0x28>
        return ((void *)0);
   14760:	0005883a 	mov	r2,zero
   14764:	00002e06 	br	14820 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   14768:	e0bffe17 	ldw	r2,-8(fp)
   1476c:	1000051e 	bne	r2,zero,14784 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14770:	e0bfff17 	ldw	r2,-4(fp)
   14774:	00c01804 	movi	r3,96
   14778:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1477c:	0005883a 	mov	r2,zero
   14780:	00002706 	br	14820 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14784:	0005303a 	rdctl	r2,status
   14788:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1478c:	e0fffb17 	ldw	r3,-20(fp)
   14790:	00bfff84 	movi	r2,-2
   14794:	1884703a 	and	r2,r3,r2
   14798:	1001703a 	wrctl	status,r2
  
  return context;
   1479c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   147a0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   147a4:	e0bffe17 	ldw	r2,-8(fp)
   147a8:	10800417 	ldw	r2,16(r2)
   147ac:	10001426 	beq	r2,zero,14800 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   147b0:	e0bffe17 	ldw	r2,-8(fp)
   147b4:	10800117 	ldw	r2,4(r2)
   147b8:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   147bc:	e0bffa17 	ldw	r2,-24(fp)
   147c0:	10c00017 	ldw	r3,0(r2)
   147c4:	e0bffe17 	ldw	r2,-8(fp)
   147c8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   147cc:	e0bffe17 	ldw	r2,-8(fp)
   147d0:	10800417 	ldw	r2,16(r2)
   147d4:	10ffffc4 	addi	r3,r2,-1
   147d8:	e0bffe17 	ldw	r2,-8(fp)
   147dc:	10c00415 	stw	r3,16(r2)
   147e0:	e0bff917 	ldw	r2,-28(fp)
   147e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147e8:	e0bffc17 	ldw	r2,-16(fp)
   147ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   147f0:	e0bfff17 	ldw	r2,-4(fp)
   147f4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   147f8:	e0bffa17 	ldw	r2,-24(fp)
   147fc:	00000806 	br	14820 <OSMemGet+0xe0>
   14800:	e0bff917 	ldw	r2,-28(fp)
   14804:	e0bffd15 	stw	r2,-12(fp)
   14808:	e0bffd17 	ldw	r2,-12(fp)
   1480c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   14810:	e0bfff17 	ldw	r2,-4(fp)
   14814:	00c01744 	movi	r3,93
   14818:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1481c:	0005883a 	mov	r2,zero
}
   14820:	e037883a 	mov	sp,fp
   14824:	df000017 	ldw	fp,0(sp)
   14828:	dec00104 	addi	sp,sp,4
   1482c:	f800283a 	ret

00014830 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   14830:	defff704 	addi	sp,sp,-36
   14834:	dfc00815 	stw	ra,32(sp)
   14838:	df000715 	stw	fp,28(sp)
   1483c:	df000704 	addi	fp,sp,28
   14840:	e13ffd15 	stw	r4,-12(fp)
   14844:	e17ffe15 	stw	r5,-8(fp)
   14848:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1484c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14850:	e0bfff17 	ldw	r2,-4(fp)
   14854:	1000021e 	bne	r2,zero,14860 <OSMemNameGet+0x30>
        return (0);
   14858:	0005883a 	mov	r2,zero
   1485c:	00002d06 	br	14914 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14860:	e0bffd17 	ldw	r2,-12(fp)
   14864:	1000051e 	bne	r2,zero,1487c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14868:	e0bfff17 	ldw	r2,-4(fp)
   1486c:	00c01804 	movi	r3,96
   14870:	10c00005 	stb	r3,0(r2)
        return (0);
   14874:	0005883a 	mov	r2,zero
   14878:	00002606 	br	14914 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	1000051e 	bne	r2,zero,14898 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14884:	e0bfff17 	ldw	r2,-4(fp)
   14888:	00c00304 	movi	r3,12
   1488c:	10c00005 	stb	r3,0(r2)
        return (0);
   14890:	0005883a 	mov	r2,zero
   14894:	00001f06 	br	14914 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14898:	008000b4 	movhi	r2,2
   1489c:	1082df04 	addi	r2,r2,2940
   148a0:	10800003 	ldbu	r2,0(r2)
   148a4:	10803fcc 	andi	r2,r2,255
   148a8:	10000526 	beq	r2,zero,148c0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   148ac:	e0bfff17 	ldw	r2,-4(fp)
   148b0:	00c00444 	movi	r3,17
   148b4:	10c00005 	stb	r3,0(r2)
        return (0);
   148b8:	0005883a 	mov	r2,zero
   148bc:	00001506 	br	14914 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148c0:	0005303a 	rdctl	r2,status
   148c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148c8:	e0fffb17 	ldw	r3,-20(fp)
   148cc:	00bfff84 	movi	r2,-2
   148d0:	1884703a 	and	r2,r3,r2
   148d4:	1001703a 	wrctl	status,r2
  
  return context;
   148d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   148dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   148e0:	e0bffd17 	ldw	r2,-12(fp)
   148e4:	10800504 	addi	r2,r2,20
   148e8:	e13ffe17 	ldw	r4,-8(fp)
   148ec:	100b883a 	mov	r5,r2
   148f0:	00126080 	call	12608 <OS_StrCopy>
   148f4:	e0bffa05 	stb	r2,-24(fp)
   148f8:	e0bff917 	ldw	r2,-28(fp)
   148fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14900:	e0bffc17 	ldw	r2,-16(fp)
   14904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14908:	e0bfff17 	ldw	r2,-4(fp)
   1490c:	10000005 	stb	zero,0(r2)
    return (len);
   14910:	e0bffa03 	ldbu	r2,-24(fp)
}
   14914:	e037883a 	mov	sp,fp
   14918:	dfc00117 	ldw	ra,4(sp)
   1491c:	df000017 	ldw	fp,0(sp)
   14920:	dec00204 	addi	sp,sp,8
   14924:	f800283a 	ret

00014928 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   14928:	defff604 	addi	sp,sp,-40
   1492c:	dfc00915 	stw	ra,36(sp)
   14930:	df000815 	stw	fp,32(sp)
   14934:	df000804 	addi	fp,sp,32
   14938:	e13ffd15 	stw	r4,-12(fp)
   1493c:	e17ffe15 	stw	r5,-8(fp)
   14940:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14944:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14948:	e0bfff17 	ldw	r2,-4(fp)
   1494c:	1000011e 	bne	r2,zero,14954 <OSMemNameSet+0x2c>
        return;
   14950:	00003606 	br	14a2c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14954:	e0bffd17 	ldw	r2,-12(fp)
   14958:	1000041e 	bne	r2,zero,1496c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1495c:	e0bfff17 	ldw	r2,-4(fp)
   14960:	00c01804 	movi	r3,96
   14964:	10c00005 	stb	r3,0(r2)
        return;
   14968:	00003006 	br	14a2c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1496c:	e0bffe17 	ldw	r2,-8(fp)
   14970:	1000041e 	bne	r2,zero,14984 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14974:	e0bfff17 	ldw	r2,-4(fp)
   14978:	00c00304 	movi	r3,12
   1497c:	10c00005 	stb	r3,0(r2)
        return;
   14980:	00002a06 	br	14a2c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14984:	008000b4 	movhi	r2,2
   14988:	1082df04 	addi	r2,r2,2940
   1498c:	10800003 	ldbu	r2,0(r2)
   14990:	10803fcc 	andi	r2,r2,255
   14994:	10000426 	beq	r2,zero,149a8 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14998:	e0bfff17 	ldw	r2,-4(fp)
   1499c:	00c00484 	movi	r3,18
   149a0:	10c00005 	stb	r3,0(r2)
        return;
   149a4:	00002106 	br	14a2c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149a8:	0005303a 	rdctl	r2,status
   149ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149b0:	e0fffa17 	ldw	r3,-24(fp)
   149b4:	00bfff84 	movi	r2,-2
   149b8:	1884703a 	and	r2,r3,r2
   149bc:	1001703a 	wrctl	status,r2
  
  return context;
   149c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   149c4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   149c8:	e13ffe17 	ldw	r4,-8(fp)
   149cc:	001267c0 	call	1267c <OS_StrLen>
   149d0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   149d4:	e0bff903 	ldbu	r2,-28(fp)
   149d8:	10800830 	cmpltui	r2,r2,32
   149dc:	1000081e 	bne	r2,zero,14a00 <OSMemNameSet+0xd8>
   149e0:	e0bff817 	ldw	r2,-32(fp)
   149e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149e8:	e0bffb17 	ldw	r2,-20(fp)
   149ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   149f0:	e0bfff17 	ldw	r2,-4(fp)
   149f4:	00c018c4 	movi	r3,99
   149f8:	10c00005 	stb	r3,0(r2)
        return;
   149fc:	00000b06 	br	14a2c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   14a00:	e0bffd17 	ldw	r2,-12(fp)
   14a04:	10800504 	addi	r2,r2,20
   14a08:	1009883a 	mov	r4,r2
   14a0c:	e17ffe17 	ldw	r5,-8(fp)
   14a10:	00126080 	call	12608 <OS_StrCopy>
   14a14:	e0bff817 	ldw	r2,-32(fp)
   14a18:	e0bffc15 	stw	r2,-16(fp)
   14a1c:	e0bffc17 	ldw	r2,-16(fp)
   14a20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a24:	e0bfff17 	ldw	r2,-4(fp)
   14a28:	10000005 	stb	zero,0(r2)
}
   14a2c:	e037883a 	mov	sp,fp
   14a30:	dfc00117 	ldw	ra,4(sp)
   14a34:	df000017 	ldw	fp,0(sp)
   14a38:	dec00204 	addi	sp,sp,8
   14a3c:	f800283a 	ret

00014a40 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   14a40:	defff904 	addi	sp,sp,-28
   14a44:	df000615 	stw	fp,24(sp)
   14a48:	df000604 	addi	fp,sp,24
   14a4c:	e13ffe15 	stw	r4,-8(fp)
   14a50:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14a58:	e0bffe17 	ldw	r2,-8(fp)
   14a5c:	1000021e 	bne	r2,zero,14a68 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14a60:	00801804 	movi	r2,96
   14a64:	00002806 	br	14b08 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   14a68:	e0bfff17 	ldw	r2,-4(fp)
   14a6c:	1000021e 	bne	r2,zero,14a78 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   14a70:	008017c4 	movi	r2,95
   14a74:	00002406 	br	14b08 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a78:	0005303a 	rdctl	r2,status
   14a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a80:	e0fffb17 	ldw	r3,-20(fp)
   14a84:	00bfff84 	movi	r2,-2
   14a88:	1884703a 	and	r2,r3,r2
   14a8c:	1001703a 	wrctl	status,r2
  
  return context;
   14a90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a94:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14a98:	e0bffe17 	ldw	r2,-8(fp)
   14a9c:	10c00417 	ldw	r3,16(r2)
   14aa0:	e0bffe17 	ldw	r2,-8(fp)
   14aa4:	10800317 	ldw	r2,12(r2)
   14aa8:	18800636 	bltu	r3,r2,14ac4 <OSMemPut+0x84>
   14aac:	e0bffa17 	ldw	r2,-24(fp)
   14ab0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   14abc:	00801784 	movi	r2,94
   14ac0:	00001106 	br	14b08 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   14ac4:	e0bffe17 	ldw	r2,-8(fp)
   14ac8:	10c00117 	ldw	r3,4(r2)
   14acc:	e0bfff17 	ldw	r2,-4(fp)
   14ad0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   14ad4:	e0bffe17 	ldw	r2,-8(fp)
   14ad8:	e0ffff17 	ldw	r3,-4(fp)
   14adc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   14ae0:	e0bffe17 	ldw	r2,-8(fp)
   14ae4:	10800417 	ldw	r2,16(r2)
   14ae8:	10c00044 	addi	r3,r2,1
   14aec:	e0bffe17 	ldw	r2,-8(fp)
   14af0:	10c00415 	stw	r3,16(r2)
   14af4:	e0bffa17 	ldw	r2,-24(fp)
   14af8:	e0bffd15 	stw	r2,-12(fp)
   14afc:	e0bffd17 	ldw	r2,-12(fp)
   14b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14b04:	0005883a 	mov	r2,zero
}
   14b08:	e037883a 	mov	sp,fp
   14b0c:	df000017 	ldw	fp,0(sp)
   14b10:	dec00104 	addi	sp,sp,4
   14b14:	f800283a 	ret

00014b18 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14b18:	defffa04 	addi	sp,sp,-24
   14b1c:	df000515 	stw	fp,20(sp)
   14b20:	df000504 	addi	fp,sp,20
   14b24:	e13ffe15 	stw	r4,-8(fp)
   14b28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14b2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14b30:	e0bffe17 	ldw	r2,-8(fp)
   14b34:	1000021e 	bne	r2,zero,14b40 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14b38:	00801804 	movi	r2,96
   14b3c:	00002c06 	br	14bf0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	1000021e 	bne	r2,zero,14b50 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14b48:	00801844 	movi	r2,97
   14b4c:	00002806 	br	14bf0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b50:	0005303a 	rdctl	r2,status
   14b54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b58:	e0fffc17 	ldw	r3,-16(fp)
   14b5c:	00bfff84 	movi	r2,-2
   14b60:	1884703a 	and	r2,r3,r2
   14b64:	1001703a 	wrctl	status,r2
  
  return context;
   14b68:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b6c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14b70:	e0bffe17 	ldw	r2,-8(fp)
   14b74:	10c00017 	ldw	r3,0(r2)
   14b78:	e0bfff17 	ldw	r2,-4(fp)
   14b7c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14b80:	e0bffe17 	ldw	r2,-8(fp)
   14b84:	10c00117 	ldw	r3,4(r2)
   14b88:	e0bfff17 	ldw	r2,-4(fp)
   14b8c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14b90:	e0bffe17 	ldw	r2,-8(fp)
   14b94:	10c00217 	ldw	r3,8(r2)
   14b98:	e0bfff17 	ldw	r2,-4(fp)
   14b9c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14ba0:	e0bffe17 	ldw	r2,-8(fp)
   14ba4:	10c00317 	ldw	r3,12(r2)
   14ba8:	e0bfff17 	ldw	r2,-4(fp)
   14bac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	10c00417 	ldw	r3,16(r2)
   14bb8:	e0bfff17 	ldw	r2,-4(fp)
   14bbc:	10c00415 	stw	r3,16(r2)
   14bc0:	e0bffb17 	ldw	r2,-20(fp)
   14bc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bc8:	e0bffd17 	ldw	r2,-12(fp)
   14bcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14bd0:	e0bfff17 	ldw	r2,-4(fp)
   14bd4:	10c00317 	ldw	r3,12(r2)
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	10800417 	ldw	r2,16(r2)
   14be0:	1887c83a 	sub	r3,r3,r2
   14be4:	e0bfff17 	ldw	r2,-4(fp)
   14be8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14bec:	0005883a 	mov	r2,zero
}
   14bf0:	e037883a 	mov	sp,fp
   14bf4:	df000017 	ldw	fp,0(sp)
   14bf8:	dec00104 	addi	sp,sp,4
   14bfc:	f800283a 	ret

00014c00 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14c00:	defffc04 	addi	sp,sp,-16
   14c04:	dfc00315 	stw	ra,12(sp)
   14c08:	df000215 	stw	fp,8(sp)
   14c0c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14c10:	010000b4 	movhi	r4,2
   14c14:	2113d904 	addi	r4,r4,20324
   14c18:	01430c04 	movi	r5,3120
   14c1c:	00124180 	call	12418 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14c20:	008000b4 	movhi	r2,2
   14c24:	1093d904 	addi	r2,r2,20324
   14c28:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14c2c:	e03fff0d 	sth	zero,-4(fp)
   14c30:	00001306 	br	14c80 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14c34:	e0bfff0b 	ldhu	r2,-4(fp)
   14c38:	10800044 	addi	r2,r2,1
   14c3c:	10c00d24 	muli	r3,r2,52
   14c40:	008000b4 	movhi	r2,2
   14c44:	1093d904 	addi	r2,r2,20324
   14c48:	1887883a 	add	r3,r3,r2
   14c4c:	e0bffe17 	ldw	r2,-8(fp)
   14c50:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	00c00fc4 	movi	r3,63
   14c5c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14c60:	e0bffe17 	ldw	r2,-8(fp)
   14c64:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	10800d04 	addi	r2,r2,52
   14c70:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14c74:	e0bfff0b 	ldhu	r2,-4(fp)
   14c78:	10800044 	addi	r2,r2,1
   14c7c:	e0bfff0d 	sth	r2,-4(fp)
   14c80:	e0bfff0b 	ldhu	r2,-4(fp)
   14c84:	10800ef0 	cmpltui	r2,r2,59
   14c88:	103fea1e 	bne	r2,zero,14c34 <__alt_mem_Flash_flash_data+0xf4014c34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14c8c:	e0bffe17 	ldw	r2,-8(fp)
   14c90:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14c94:	e0bffe17 	ldw	r2,-8(fp)
   14c98:	00c00fc4 	movi	r3,63
   14c9c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   14ca0:	e0bffe17 	ldw	r2,-8(fp)
   14ca4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14ca8:	008000b4 	movhi	r2,2
   14cac:	1082da04 	addi	r2,r2,2920
   14cb0:	00c000b4 	movhi	r3,2
   14cb4:	18d3d904 	addi	r3,r3,20324
   14cb8:	10c00015 	stw	r3,0(r2)
#endif
}
   14cbc:	e037883a 	mov	sp,fp
   14cc0:	dfc00117 	ldw	ra,4(sp)
   14cc4:	df000017 	ldw	fp,0(sp)
   14cc8:	dec00204 	addi	sp,sp,8
   14ccc:	f800283a 	ret

00014cd0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14cd0:	defff804 	addi	sp,sp,-32
   14cd4:	df000715 	stw	fp,28(sp)
   14cd8:	df000704 	addi	fp,sp,28
   14cdc:	e13ffe15 	stw	r4,-8(fp)
   14ce0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14ce4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14ce8:	e0bfff17 	ldw	r2,-4(fp)
   14cec:	1000021e 	bne	r2,zero,14cf8 <OSQAccept+0x28>
        return ((void *)0);
   14cf0:	0005883a 	mov	r2,zero
   14cf4:	00004206 	br	14e00 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14cf8:	e0bffe17 	ldw	r2,-8(fp)
   14cfc:	1000051e 	bne	r2,zero,14d14 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14d00:	e0bfff17 	ldw	r2,-4(fp)
   14d04:	00c00104 	movi	r3,4
   14d08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14d0c:	0005883a 	mov	r2,zero
   14d10:	00003b06 	br	14e00 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14d14:	e0bffe17 	ldw	r2,-8(fp)
   14d18:	10800003 	ldbu	r2,0(r2)
   14d1c:	10803fcc 	andi	r2,r2,255
   14d20:	108000a0 	cmpeqi	r2,r2,2
   14d24:	1000051e 	bne	r2,zero,14d3c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14d28:	e0bfff17 	ldw	r2,-4(fp)
   14d2c:	00c00044 	movi	r3,1
   14d30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14d34:	0005883a 	mov	r2,zero
   14d38:	00003106 	br	14e00 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d3c:	0005303a 	rdctl	r2,status
   14d40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d44:	e0fffc17 	ldw	r3,-16(fp)
   14d48:	00bfff84 	movi	r2,-2
   14d4c:	1884703a 	and	r2,r3,r2
   14d50:	1001703a 	wrctl	status,r2
  
  return context;
   14d54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14d58:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14d5c:	e0bffe17 	ldw	r2,-8(fp)
   14d60:	10800117 	ldw	r2,4(r2)
   14d64:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14d68:	e0bffb17 	ldw	r2,-20(fp)
   14d6c:	1080058b 	ldhu	r2,22(r2)
   14d70:	10bfffcc 	andi	r2,r2,65535
   14d74:	10001926 	beq	r2,zero,14ddc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14d78:	e0bffb17 	ldw	r2,-20(fp)
   14d7c:	10800417 	ldw	r2,16(r2)
   14d80:	11000104 	addi	r4,r2,4
   14d84:	e0fffb17 	ldw	r3,-20(fp)
   14d88:	19000415 	stw	r4,16(r3)
   14d8c:	10800017 	ldw	r2,0(r2)
   14d90:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14d94:	e0bffb17 	ldw	r2,-20(fp)
   14d98:	1080058b 	ldhu	r2,22(r2)
   14d9c:	10bfffc4 	addi	r2,r2,-1
   14da0:	1007883a 	mov	r3,r2
   14da4:	e0bffb17 	ldw	r2,-20(fp)
   14da8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14dac:	e0bffb17 	ldw	r2,-20(fp)
   14db0:	10c00417 	ldw	r3,16(r2)
   14db4:	e0bffb17 	ldw	r2,-20(fp)
   14db8:	10800217 	ldw	r2,8(r2)
   14dbc:	1880041e 	bne	r3,r2,14dd0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14dc0:	e0bffb17 	ldw	r2,-20(fp)
   14dc4:	10c00117 	ldw	r3,4(r2)
   14dc8:	e0bffb17 	ldw	r2,-20(fp)
   14dcc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14dd0:	e0bfff17 	ldw	r2,-4(fp)
   14dd4:	10000005 	stb	zero,0(r2)
   14dd8:	00000406 	br	14dec <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14ddc:	e0bfff17 	ldw	r2,-4(fp)
   14de0:	00c007c4 	movi	r3,31
   14de4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14de8:	e03ff915 	stw	zero,-28(fp)
   14dec:	e0bffa17 	ldw	r2,-24(fp)
   14df0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14df4:	e0bffd17 	ldw	r2,-12(fp)
   14df8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14dfc:	e0bff917 	ldw	r2,-28(fp)
}
   14e00:	e037883a 	mov	sp,fp
   14e04:	df000017 	ldw	fp,0(sp)
   14e08:	dec00104 	addi	sp,sp,4
   14e0c:	f800283a 	ret

00014e10 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14e10:	defff404 	addi	sp,sp,-48
   14e14:	dfc00b15 	stw	ra,44(sp)
   14e18:	df000a15 	stw	fp,40(sp)
   14e1c:	df000a04 	addi	fp,sp,40
   14e20:	e13ffe15 	stw	r4,-8(fp)
   14e24:	2805883a 	mov	r2,r5
   14e28:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e2c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14e30:	008000b4 	movhi	r2,2
   14e34:	1082df04 	addi	r2,r2,2940
   14e38:	10800003 	ldbu	r2,0(r2)
   14e3c:	10803fcc 	andi	r2,r2,255
   14e40:	10000226 	beq	r2,zero,14e4c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14e44:	0005883a 	mov	r2,zero
   14e48:	00006b06 	br	14ff8 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e4c:	0005303a 	rdctl	r2,status
   14e50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e54:	e0fff917 	ldw	r3,-28(fp)
   14e58:	00bfff84 	movi	r2,-2
   14e5c:	1884703a 	and	r2,r3,r2
   14e60:	1001703a 	wrctl	status,r2
  
  return context;
   14e64:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14e68:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14e6c:	008000b4 	movhi	r2,2
   14e70:	1082de04 	addi	r2,r2,2936
   14e74:	10800017 	ldw	r2,0(r2)
   14e78:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14e7c:	008000b4 	movhi	r2,2
   14e80:	1082de04 	addi	r2,r2,2936
   14e84:	10800017 	ldw	r2,0(r2)
   14e88:	10000726 	beq	r2,zero,14ea8 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14e8c:	008000b4 	movhi	r2,2
   14e90:	1082de04 	addi	r2,r2,2936
   14e94:	10800017 	ldw	r2,0(r2)
   14e98:	10c00117 	ldw	r3,4(r2)
   14e9c:	008000b4 	movhi	r2,2
   14ea0:	1082de04 	addi	r2,r2,2936
   14ea4:	10c00015 	stw	r3,0(r2)
   14ea8:	e0bff717 	ldw	r2,-36(fp)
   14eac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14eb0:	e0bffa17 	ldw	r2,-24(fp)
   14eb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14eb8:	e0bff617 	ldw	r2,-40(fp)
   14ebc:	10004d26 	beq	r2,zero,14ff4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ec0:	0005303a 	rdctl	r2,status
   14ec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ec8:	e0fffb17 	ldw	r3,-20(fp)
   14ecc:	00bfff84 	movi	r2,-2
   14ed0:	1884703a 	and	r2,r3,r2
   14ed4:	1001703a 	wrctl	status,r2
  
  return context;
   14ed8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14edc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14ee0:	008000b4 	movhi	r2,2
   14ee4:	1082dc04 	addi	r2,r2,2928
   14ee8:	10800017 	ldw	r2,0(r2)
   14eec:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14ef0:	e0bff817 	ldw	r2,-32(fp)
   14ef4:	10003126 	beq	r2,zero,14fbc <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14ef8:	008000b4 	movhi	r2,2
   14efc:	1082dc04 	addi	r2,r2,2928
   14f00:	10800017 	ldw	r2,0(r2)
   14f04:	10c00017 	ldw	r3,0(r2)
   14f08:	008000b4 	movhi	r2,2
   14f0c:	1082dc04 	addi	r2,r2,2928
   14f10:	10c00015 	stw	r3,0(r2)
   14f14:	e0bff717 	ldw	r2,-36(fp)
   14f18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f1c:	e0bffc17 	ldw	r2,-16(fp)
   14f20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14f24:	e0bff817 	ldw	r2,-32(fp)
   14f28:	e0fffe17 	ldw	r3,-8(fp)
   14f2c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14f30:	e0bfff0b 	ldhu	r2,-4(fp)
   14f34:	1085883a 	add	r2,r2,r2
   14f38:	1085883a 	add	r2,r2,r2
   14f3c:	1007883a 	mov	r3,r2
   14f40:	e0bffe17 	ldw	r2,-8(fp)
   14f44:	10c7883a 	add	r3,r2,r3
   14f48:	e0bff817 	ldw	r2,-32(fp)
   14f4c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14f50:	e0bff817 	ldw	r2,-32(fp)
   14f54:	e0fffe17 	ldw	r3,-8(fp)
   14f58:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14f5c:	e0bff817 	ldw	r2,-32(fp)
   14f60:	e0fffe17 	ldw	r3,-8(fp)
   14f64:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14f68:	e0bff817 	ldw	r2,-32(fp)
   14f6c:	e0ffff0b 	ldhu	r3,-4(fp)
   14f70:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14f74:	e0bff817 	ldw	r2,-32(fp)
   14f78:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   14f7c:	e0bff617 	ldw	r2,-40(fp)
   14f80:	00c00084 	movi	r3,2
   14f84:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14f88:	e0bff617 	ldw	r2,-40(fp)
   14f8c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   14f90:	e0bff617 	ldw	r2,-40(fp)
   14f94:	e0fff817 	ldw	r3,-32(fp)
   14f98:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   14f9c:	e0bff617 	ldw	r2,-40(fp)
   14fa0:	00c00fc4 	movi	r3,63
   14fa4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14fa8:	e0bff617 	ldw	r2,-40(fp)
   14fac:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14fb0:	e13ff617 	ldw	r4,-40(fp)
   14fb4:	00120540 	call	12054 <OS_EventWaitListInit>
   14fb8:	00000e06 	br	14ff4 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   14fbc:	008000b4 	movhi	r2,2
   14fc0:	1082de04 	addi	r2,r2,2936
   14fc4:	10c00017 	ldw	r3,0(r2)
   14fc8:	e0bff617 	ldw	r2,-40(fp)
   14fcc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14fd0:	008000b4 	movhi	r2,2
   14fd4:	1082de04 	addi	r2,r2,2936
   14fd8:	e0fff617 	ldw	r3,-40(fp)
   14fdc:	10c00015 	stw	r3,0(r2)
   14fe0:	e0bff717 	ldw	r2,-36(fp)
   14fe4:	e0bffd15 	stw	r2,-12(fp)
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   14ff0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   14ff4:	e0bff617 	ldw	r2,-40(fp)
}
   14ff8:	e037883a 	mov	sp,fp
   14ffc:	dfc00117 	ldw	ra,4(sp)
   15000:	df000017 	ldw	fp,0(sp)
   15004:	dec00204 	addi	sp,sp,8
   15008:	f800283a 	ret

0001500c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1500c:	defff204 	addi	sp,sp,-56
   15010:	dfc00d15 	stw	ra,52(sp)
   15014:	df000c15 	stw	fp,48(sp)
   15018:	df000c04 	addi	fp,sp,48
   1501c:	e13ffd15 	stw	r4,-12(fp)
   15020:	2805883a 	mov	r2,r5
   15024:	e1bfff15 	stw	r6,-4(fp)
   15028:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1502c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15030:	e0bfff17 	ldw	r2,-4(fp)
   15034:	1000021e 	bne	r2,zero,15040 <OSQDel+0x34>
        return (pevent);
   15038:	e0bffd17 	ldw	r2,-12(fp)
   1503c:	0000a006 	br	152c0 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15040:	e0bffd17 	ldw	r2,-12(fp)
   15044:	1000051e 	bne	r2,zero,1505c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15048:	e0bfff17 	ldw	r2,-4(fp)
   1504c:	00c00104 	movi	r3,4
   15050:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15054:	e0bffd17 	ldw	r2,-12(fp)
   15058:	00009906 	br	152c0 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1505c:	e0bffd17 	ldw	r2,-12(fp)
   15060:	10800003 	ldbu	r2,0(r2)
   15064:	10803fcc 	andi	r2,r2,255
   15068:	108000a0 	cmpeqi	r2,r2,2
   1506c:	1000051e 	bne	r2,zero,15084 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15070:	e0bfff17 	ldw	r2,-4(fp)
   15074:	00c00044 	movi	r3,1
   15078:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1507c:	e0bffd17 	ldw	r2,-12(fp)
   15080:	00008f06 	br	152c0 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15084:	008000b4 	movhi	r2,2
   15088:	1082df04 	addi	r2,r2,2940
   1508c:	10800003 	ldbu	r2,0(r2)
   15090:	10803fcc 	andi	r2,r2,255
   15094:	10000526 	beq	r2,zero,150ac <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15098:	e0bfff17 	ldw	r2,-4(fp)
   1509c:	00c003c4 	movi	r3,15
   150a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   150a4:	e0bffd17 	ldw	r2,-12(fp)
   150a8:	00008506 	br	152c0 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150ac:	0005303a 	rdctl	r2,status
   150b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150b4:	e0fff817 	ldw	r3,-32(fp)
   150b8:	00bfff84 	movi	r2,-2
   150bc:	1884703a 	and	r2,r3,r2
   150c0:	1001703a 	wrctl	status,r2
  
  return context;
   150c4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   150c8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   150cc:	e0bffd17 	ldw	r2,-12(fp)
   150d0:	10800283 	ldbu	r2,10(r2)
   150d4:	10803fcc 	andi	r2,r2,255
   150d8:	10000326 	beq	r2,zero,150e8 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   150dc:	00800044 	movi	r2,1
   150e0:	e0bff405 	stb	r2,-48(fp)
   150e4:	00000106 	br	150ec <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   150e8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   150ec:	e0bffe03 	ldbu	r2,-8(fp)
   150f0:	10000326 	beq	r2,zero,15100 <OSQDel+0xf4>
   150f4:	10800060 	cmpeqi	r2,r2,1
   150f8:	1000381e 	bne	r2,zero,151dc <OSQDel+0x1d0>
   150fc:	00006506 	br	15294 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   15100:	e0bff403 	ldbu	r2,-48(fp)
   15104:	1000261e 	bne	r2,zero,151a0 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15108:	e0bffd17 	ldw	r2,-12(fp)
   1510c:	00c00fc4 	movi	r3,63
   15110:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15114:	e0bffd17 	ldw	r2,-12(fp)
   15118:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1511c:	e0bffd17 	ldw	r2,-12(fp)
   15120:	10800117 	ldw	r2,4(r2)
   15124:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   15128:	008000b4 	movhi	r2,2
   1512c:	1082dc04 	addi	r2,r2,2928
   15130:	10c00017 	ldw	r3,0(r2)
   15134:	e0bff717 	ldw	r2,-36(fp)
   15138:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1513c:	008000b4 	movhi	r2,2
   15140:	1082dc04 	addi	r2,r2,2928
   15144:	e0fff717 	ldw	r3,-36(fp)
   15148:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1514c:	e0bffd17 	ldw	r2,-12(fp)
   15150:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15154:	008000b4 	movhi	r2,2
   15158:	1082de04 	addi	r2,r2,2936
   1515c:	10c00017 	ldw	r3,0(r2)
   15160:	e0bffd17 	ldw	r2,-12(fp)
   15164:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15168:	e0bffd17 	ldw	r2,-12(fp)
   1516c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15170:	008000b4 	movhi	r2,2
   15174:	1082de04 	addi	r2,r2,2936
   15178:	e0fffd17 	ldw	r3,-12(fp)
   1517c:	10c00015 	stw	r3,0(r2)
   15180:	e0bff617 	ldw	r2,-40(fp)
   15184:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15188:	e0bff917 	ldw	r2,-28(fp)
   1518c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15190:	e0bfff17 	ldw	r2,-4(fp)
   15194:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15198:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1519c:	00004706 	br	152bc <OSQDel+0x2b0>
   151a0:	e0bff617 	ldw	r2,-40(fp)
   151a4:	e0bffa15 	stw	r2,-24(fp)
   151a8:	e0bffa17 	ldw	r2,-24(fp)
   151ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   151b0:	e0bfff17 	ldw	r2,-4(fp)
   151b4:	00c01244 	movi	r3,73
   151b8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   151bc:	e0bffd17 	ldw	r2,-12(fp)
   151c0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   151c4:	00003d06 	br	152bc <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   151c8:	e13ffd17 	ldw	r4,-12(fp)
   151cc:	000b883a 	mov	r5,zero
   151d0:	01800104 	movi	r6,4
   151d4:	000f883a 	mov	r7,zero
   151d8:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   151dc:	e0bffd17 	ldw	r2,-12(fp)
   151e0:	10800283 	ldbu	r2,10(r2)
   151e4:	10803fcc 	andi	r2,r2,255
   151e8:	103ff71e 	bne	r2,zero,151c8 <__alt_mem_Flash_flash_data+0xf40151c8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	00c00fc4 	movi	r3,63
   151f4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   151f8:	e0bffd17 	ldw	r2,-12(fp)
   151fc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   15200:	e0bffd17 	ldw	r2,-12(fp)
   15204:	10800117 	ldw	r2,4(r2)
   15208:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   1520c:	008000b4 	movhi	r2,2
   15210:	1082dc04 	addi	r2,r2,2928
   15214:	10c00017 	ldw	r3,0(r2)
   15218:	e0bff717 	ldw	r2,-36(fp)
   1521c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   15220:	008000b4 	movhi	r2,2
   15224:	1082dc04 	addi	r2,r2,2928
   15228:	e0fff717 	ldw	r3,-36(fp)
   1522c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15230:	e0bffd17 	ldw	r2,-12(fp)
   15234:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15238:	008000b4 	movhi	r2,2
   1523c:	1082de04 	addi	r2,r2,2936
   15240:	10c00017 	ldw	r3,0(r2)
   15244:	e0bffd17 	ldw	r2,-12(fp)
   15248:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1524c:	e0bffd17 	ldw	r2,-12(fp)
   15250:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15254:	008000b4 	movhi	r2,2
   15258:	1082de04 	addi	r2,r2,2936
   1525c:	e0fffd17 	ldw	r3,-12(fp)
   15260:	10c00015 	stw	r3,0(r2)
   15264:	e0bff617 	ldw	r2,-40(fp)
   15268:	e0bffb15 	stw	r2,-20(fp)
   1526c:	e0bffb17 	ldw	r2,-20(fp)
   15270:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15274:	e0bff403 	ldbu	r2,-48(fp)
   15278:	10800058 	cmpnei	r2,r2,1
   1527c:	1000011e 	bne	r2,zero,15284 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15280:	00124cc0 	call	124cc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15284:	e0bfff17 	ldw	r2,-4(fp)
   15288:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1528c:	e03ff515 	stw	zero,-44(fp)
             break;
   15290:	00000a06 	br	152bc <OSQDel+0x2b0>
   15294:	e0bff617 	ldw	r2,-40(fp)
   15298:	e0bffc15 	stw	r2,-16(fp)
   1529c:	e0bffc17 	ldw	r2,-16(fp)
   152a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   152a4:	e0bfff17 	ldw	r2,-4(fp)
   152a8:	00c001c4 	movi	r3,7
   152ac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	e0bff515 	stw	r2,-44(fp)
             break;
   152b8:	0001883a 	nop
    }
    return (pevent_return);
   152bc:	e0bff517 	ldw	r2,-44(fp)
}
   152c0:	e037883a 	mov	sp,fp
   152c4:	dfc00117 	ldw	ra,4(sp)
   152c8:	df000017 	ldw	fp,0(sp)
   152cc:	dec00204 	addi	sp,sp,8
   152d0:	f800283a 	ret

000152d4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   152d4:	defffa04 	addi	sp,sp,-24
   152d8:	df000515 	stw	fp,20(sp)
   152dc:	df000504 	addi	fp,sp,20
   152e0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   152e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   152e8:	e0bfff17 	ldw	r2,-4(fp)
   152ec:	1000021e 	bne	r2,zero,152f8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   152f0:	00800104 	movi	r2,4
   152f4:	00002106 	br	1537c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   152f8:	e0bfff17 	ldw	r2,-4(fp)
   152fc:	10800003 	ldbu	r2,0(r2)
   15300:	10803fcc 	andi	r2,r2,255
   15304:	108000a0 	cmpeqi	r2,r2,2
   15308:	1000021e 	bne	r2,zero,15314 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1530c:	00800044 	movi	r2,1
   15310:	00001a06 	br	1537c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15314:	0005303a 	rdctl	r2,status
   15318:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1531c:	e0fffd17 	ldw	r3,-12(fp)
   15320:	00bfff84 	movi	r2,-2
   15324:	1884703a 	and	r2,r3,r2
   15328:	1001703a 	wrctl	status,r2
  
  return context;
   1532c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15330:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   15334:	e0bfff17 	ldw	r2,-4(fp)
   15338:	10800117 	ldw	r2,4(r2)
   1533c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   15340:	e0bffc17 	ldw	r2,-16(fp)
   15344:	10c00117 	ldw	r3,4(r2)
   15348:	e0bffc17 	ldw	r2,-16(fp)
   1534c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   15350:	e0bffc17 	ldw	r2,-16(fp)
   15354:	10c00117 	ldw	r3,4(r2)
   15358:	e0bffc17 	ldw	r2,-16(fp)
   1535c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   15360:	e0bffc17 	ldw	r2,-16(fp)
   15364:	1000058d 	sth	zero,22(r2)
   15368:	e0bffb17 	ldw	r2,-20(fp)
   1536c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15370:	e0bffe17 	ldw	r2,-8(fp)
   15374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15378:	0005883a 	mov	r2,zero
}
   1537c:	e037883a 	mov	sp,fp
   15380:	df000017 	ldw	fp,0(sp)
   15384:	dec00104 	addi	sp,sp,4
   15388:	f800283a 	ret

0001538c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1538c:	defff304 	addi	sp,sp,-52
   15390:	dfc00c15 	stw	ra,48(sp)
   15394:	df000b15 	stw	fp,44(sp)
   15398:	df000b04 	addi	fp,sp,44
   1539c:	e13ffd15 	stw	r4,-12(fp)
   153a0:	2805883a 	mov	r2,r5
   153a4:	e1bfff15 	stw	r6,-4(fp)
   153a8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   153ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   153b0:	e0bfff17 	ldw	r2,-4(fp)
   153b4:	1000021e 	bne	r2,zero,153c0 <OSQPend+0x34>
        return ((void *)0);
   153b8:	0005883a 	mov	r2,zero
   153bc:	0000ad06 	br	15674 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   153c0:	e0bffd17 	ldw	r2,-12(fp)
   153c4:	1000051e 	bne	r2,zero,153dc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   153c8:	e0bfff17 	ldw	r2,-4(fp)
   153cc:	00c00104 	movi	r3,4
   153d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   153d4:	0005883a 	mov	r2,zero
   153d8:	0000a606 	br	15674 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   153dc:	e0bffd17 	ldw	r2,-12(fp)
   153e0:	10800003 	ldbu	r2,0(r2)
   153e4:	10803fcc 	andi	r2,r2,255
   153e8:	108000a0 	cmpeqi	r2,r2,2
   153ec:	1000051e 	bne	r2,zero,15404 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   153f0:	e0bfff17 	ldw	r2,-4(fp)
   153f4:	00c00044 	movi	r3,1
   153f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   153fc:	0005883a 	mov	r2,zero
   15400:	00009c06 	br	15674 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15404:	008000b4 	movhi	r2,2
   15408:	1082df04 	addi	r2,r2,2940
   1540c:	10800003 	ldbu	r2,0(r2)
   15410:	10803fcc 	andi	r2,r2,255
   15414:	10000526 	beq	r2,zero,1542c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   15418:	e0bfff17 	ldw	r2,-4(fp)
   1541c:	00c00084 	movi	r3,2
   15420:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15424:	0005883a 	mov	r2,zero
   15428:	00009206 	br	15674 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1542c:	008000b4 	movhi	r2,2
   15430:	1082d104 	addi	r2,r2,2884
   15434:	10800003 	ldbu	r2,0(r2)
   15438:	10803fcc 	andi	r2,r2,255
   1543c:	10000526 	beq	r2,zero,15454 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   15440:	e0bfff17 	ldw	r2,-4(fp)
   15444:	00c00344 	movi	r3,13
   15448:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1544c:	0005883a 	mov	r2,zero
   15450:	00008806 	br	15674 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15454:	0005303a 	rdctl	r2,status
   15458:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1545c:	e0fff817 	ldw	r3,-32(fp)
   15460:	00bfff84 	movi	r2,-2
   15464:	1884703a 	and	r2,r3,r2
   15468:	1001703a 	wrctl	status,r2
  
  return context;
   1546c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15470:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   15474:	e0bffd17 	ldw	r2,-12(fp)
   15478:	10800117 	ldw	r2,4(r2)
   1547c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   15480:	e0bff717 	ldw	r2,-36(fp)
   15484:	1080058b 	ldhu	r2,22(r2)
   15488:	10bfffcc 	andi	r2,r2,65535
   1548c:	10001e26 	beq	r2,zero,15508 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15490:	e0bff717 	ldw	r2,-36(fp)
   15494:	10800417 	ldw	r2,16(r2)
   15498:	11000104 	addi	r4,r2,4
   1549c:	e0fff717 	ldw	r3,-36(fp)
   154a0:	19000415 	stw	r4,16(r3)
   154a4:	10800017 	ldw	r2,0(r2)
   154a8:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   154ac:	e0bff717 	ldw	r2,-36(fp)
   154b0:	1080058b 	ldhu	r2,22(r2)
   154b4:	10bfffc4 	addi	r2,r2,-1
   154b8:	1007883a 	mov	r3,r2
   154bc:	e0bff717 	ldw	r2,-36(fp)
   154c0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   154c4:	e0bff717 	ldw	r2,-36(fp)
   154c8:	10c00417 	ldw	r3,16(r2)
   154cc:	e0bff717 	ldw	r2,-36(fp)
   154d0:	10800217 	ldw	r2,8(r2)
   154d4:	1880041e 	bne	r3,r2,154e8 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   154d8:	e0bff717 	ldw	r2,-36(fp)
   154dc:	10c00117 	ldw	r3,4(r2)
   154e0:	e0bff717 	ldw	r2,-36(fp)
   154e4:	10c00415 	stw	r3,16(r2)
   154e8:	e0bff617 	ldw	r2,-40(fp)
   154ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154f0:	e0bff917 	ldw	r2,-28(fp)
   154f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   154f8:	e0bfff17 	ldw	r2,-4(fp)
   154fc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   15500:	e0bff517 	ldw	r2,-44(fp)
   15504:	00005b06 	br	15674 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   15508:	008000b4 	movhi	r2,2
   1550c:	1082e004 	addi	r2,r2,2944
   15510:	10c00017 	ldw	r3,0(r2)
   15514:	008000b4 	movhi	r2,2
   15518:	1082e004 	addi	r2,r2,2944
   1551c:	10800017 	ldw	r2,0(r2)
   15520:	10800c03 	ldbu	r2,48(r2)
   15524:	10800114 	ori	r2,r2,4
   15528:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1552c:	008000b4 	movhi	r2,2
   15530:	1082e004 	addi	r2,r2,2944
   15534:	10800017 	ldw	r2,0(r2)
   15538:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1553c:	008000b4 	movhi	r2,2
   15540:	1082e004 	addi	r2,r2,2944
   15544:	10800017 	ldw	r2,0(r2)
   15548:	e0fffe0b 	ldhu	r3,-8(fp)
   1554c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   15550:	e13ffd17 	ldw	r4,-12(fp)
   15554:	0011c4c0 	call	11c4c <OS_EventTaskWait>
   15558:	e0bff617 	ldw	r2,-40(fp)
   1555c:	e0bffa15 	stw	r2,-24(fp)
   15560:	e0bffa17 	ldw	r2,-24(fp)
   15564:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   15568:	00124cc0 	call	124cc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1556c:	0005303a 	rdctl	r2,status
   15570:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15574:	e0fffb17 	ldw	r3,-20(fp)
   15578:	00bfff84 	movi	r2,-2
   1557c:	1884703a 	and	r2,r3,r2
   15580:	1001703a 	wrctl	status,r2
  
  return context;
   15584:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15588:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1558c:	008000b4 	movhi	r2,2
   15590:	1082e004 	addi	r2,r2,2944
   15594:	10800017 	ldw	r2,0(r2)
   15598:	10800c43 	ldbu	r2,49(r2)
   1559c:	10803fcc 	andi	r2,r2,255
   155a0:	10000326 	beq	r2,zero,155b0 <OSQPend+0x224>
   155a4:	108000a0 	cmpeqi	r2,r2,2
   155a8:	1000091e 	bne	r2,zero,155d0 <OSQPend+0x244>
   155ac:	00000d06 	br	155e4 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   155b0:	008000b4 	movhi	r2,2
   155b4:	1082e004 	addi	r2,r2,2944
   155b8:	10800017 	ldw	r2,0(r2)
   155bc:	10800917 	ldw	r2,36(r2)
   155c0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	10000005 	stb	zero,0(r2)
             break;
   155cc:	00001006 	br	15610 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   155d0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   155d4:	e0bfff17 	ldw	r2,-4(fp)
   155d8:	00c00384 	movi	r3,14
   155dc:	10c00005 	stb	r3,0(r2)
             break;
   155e0:	00000b06 	br	15610 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   155e4:	008000b4 	movhi	r2,2
   155e8:	1082e004 	addi	r2,r2,2944
   155ec:	10800017 	ldw	r2,0(r2)
   155f0:	1009883a 	mov	r4,r2
   155f4:	e17ffd17 	ldw	r5,-12(fp)
   155f8:	0011ea40 	call	11ea4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   155fc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15600:	e0bfff17 	ldw	r2,-4(fp)
   15604:	00c00284 	movi	r3,10
   15608:	10c00005 	stb	r3,0(r2)
             break;
   1560c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15610:	008000b4 	movhi	r2,2
   15614:	1082e004 	addi	r2,r2,2944
   15618:	10800017 	ldw	r2,0(r2)
   1561c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15620:	008000b4 	movhi	r2,2
   15624:	1082e004 	addi	r2,r2,2944
   15628:	10800017 	ldw	r2,0(r2)
   1562c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15630:	008000b4 	movhi	r2,2
   15634:	1082e004 	addi	r2,r2,2944
   15638:	10800017 	ldw	r2,0(r2)
   1563c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15640:	008000b4 	movhi	r2,2
   15644:	1082e004 	addi	r2,r2,2944
   15648:	10800017 	ldw	r2,0(r2)
   1564c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   15650:	008000b4 	movhi	r2,2
   15654:	1082e004 	addi	r2,r2,2944
   15658:	10800017 	ldw	r2,0(r2)
   1565c:	10000915 	stw	zero,36(r2)
   15660:	e0bff617 	ldw	r2,-40(fp)
   15664:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15668:	e0bffc17 	ldw	r2,-16(fp)
   1566c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15670:	e0bff517 	ldw	r2,-44(fp)
}
   15674:	e037883a 	mov	sp,fp
   15678:	dfc00117 	ldw	ra,4(sp)
   1567c:	df000017 	ldw	fp,0(sp)
   15680:	dec00204 	addi	sp,sp,8
   15684:	f800283a 	ret

00015688 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15688:	defff604 	addi	sp,sp,-40
   1568c:	dfc00915 	stw	ra,36(sp)
   15690:	df000815 	stw	fp,32(sp)
   15694:	df000804 	addi	fp,sp,32
   15698:	e13ffd15 	stw	r4,-12(fp)
   1569c:	2805883a 	mov	r2,r5
   156a0:	e1bfff15 	stw	r6,-4(fp)
   156a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   156a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   156ac:	e0bfff17 	ldw	r2,-4(fp)
   156b0:	1000021e 	bne	r2,zero,156bc <OSQPendAbort+0x34>
        return (0);
   156b4:	0005883a 	mov	r2,zero
   156b8:	00004906 	br	157e0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   156bc:	e0bffd17 	ldw	r2,-12(fp)
   156c0:	1000051e 	bne	r2,zero,156d8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   156c4:	e0bfff17 	ldw	r2,-4(fp)
   156c8:	00c00104 	movi	r3,4
   156cc:	10c00005 	stb	r3,0(r2)
        return (0);
   156d0:	0005883a 	mov	r2,zero
   156d4:	00004206 	br	157e0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   156d8:	e0bffd17 	ldw	r2,-12(fp)
   156dc:	10800003 	ldbu	r2,0(r2)
   156e0:	10803fcc 	andi	r2,r2,255
   156e4:	108000a0 	cmpeqi	r2,r2,2
   156e8:	1000051e 	bne	r2,zero,15700 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   156ec:	e0bfff17 	ldw	r2,-4(fp)
   156f0:	00c00044 	movi	r3,1
   156f4:	10c00005 	stb	r3,0(r2)
        return (0);
   156f8:	0005883a 	mov	r2,zero
   156fc:	00003806 	br	157e0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15700:	0005303a 	rdctl	r2,status
   15704:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15708:	e0fffa17 	ldw	r3,-24(fp)
   1570c:	00bfff84 	movi	r2,-2
   15710:	1884703a 	and	r2,r3,r2
   15714:	1001703a 	wrctl	status,r2
  
  return context;
   15718:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1571c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   15720:	e0bffd17 	ldw	r2,-12(fp)
   15724:	10800283 	ldbu	r2,10(r2)
   15728:	10803fcc 	andi	r2,r2,255
   1572c:	10002526 	beq	r2,zero,157c4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   15730:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   15734:	e0bffe03 	ldbu	r2,-8(fp)
   15738:	10800060 	cmpeqi	r2,r2,1
   1573c:	10000e26 	beq	r2,zero,15778 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15740:	00000806 	br	15764 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15744:	e13ffd17 	ldw	r4,-12(fp)
   15748:	000b883a 	mov	r5,zero
   1574c:	01800104 	movi	r6,4
   15750:	01c00084 	movi	r7,2
   15754:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                     nbr_tasks++;
   15758:	e0bff803 	ldbu	r2,-32(fp)
   1575c:	10800044 	addi	r2,r2,1
   15760:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15764:	e0bffd17 	ldw	r2,-12(fp)
   15768:	10800283 	ldbu	r2,10(r2)
   1576c:	10803fcc 	andi	r2,r2,255
   15770:	103ff41e 	bne	r2,zero,15744 <__alt_mem_Flash_flash_data+0xf4015744>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15774:	00000906 	br	1579c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15778:	e13ffd17 	ldw	r4,-12(fp)
   1577c:	000b883a 	mov	r5,zero
   15780:	01800104 	movi	r6,4
   15784:	01c00084 	movi	r7,2
   15788:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1578c:	e0bff803 	ldbu	r2,-32(fp)
   15790:	10800044 	addi	r2,r2,1
   15794:	e0bff805 	stb	r2,-32(fp)
                 break;
   15798:	0001883a 	nop
   1579c:	e0bff917 	ldw	r2,-28(fp)
   157a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157a4:	e0bffb17 	ldw	r2,-20(fp)
   157a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   157ac:	00124cc0 	call	124cc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   157b0:	e0bfff17 	ldw	r2,-4(fp)
   157b4:	00c00384 	movi	r3,14
   157b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   157bc:	e0bff803 	ldbu	r2,-32(fp)
   157c0:	00000706 	br	157e0 <OSQPendAbort+0x158>
   157c4:	e0bff917 	ldw	r2,-28(fp)
   157c8:	e0bffc15 	stw	r2,-16(fp)
   157cc:	e0bffc17 	ldw	r2,-16(fp)
   157d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   157d4:	e0bfff17 	ldw	r2,-4(fp)
   157d8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   157dc:	0005883a 	mov	r2,zero
}
   157e0:	e037883a 	mov	sp,fp
   157e4:	dfc00117 	ldw	ra,4(sp)
   157e8:	df000017 	ldw	fp,0(sp)
   157ec:	dec00204 	addi	sp,sp,8
   157f0:	f800283a 	ret

000157f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   157f4:	defff604 	addi	sp,sp,-40
   157f8:	dfc00915 	stw	ra,36(sp)
   157fc:	df000815 	stw	fp,32(sp)
   15800:	df000804 	addi	fp,sp,32
   15804:	e13ffe15 	stw	r4,-8(fp)
   15808:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1580c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15810:	e0bffe17 	ldw	r2,-8(fp)
   15814:	1000021e 	bne	r2,zero,15820 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15818:	00800104 	movi	r2,4
   1581c:	00004a06 	br	15948 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15820:	e0bffe17 	ldw	r2,-8(fp)
   15824:	10800003 	ldbu	r2,0(r2)
   15828:	10803fcc 	andi	r2,r2,255
   1582c:	108000a0 	cmpeqi	r2,r2,2
   15830:	1000021e 	bne	r2,zero,1583c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   15834:	00800044 	movi	r2,1
   15838:	00004306 	br	15948 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1583c:	0005303a 	rdctl	r2,status
   15840:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15844:	e0fffa17 	ldw	r3,-24(fp)
   15848:	00bfff84 	movi	r2,-2
   1584c:	1884703a 	and	r2,r3,r2
   15850:	1001703a 	wrctl	status,r2
  
  return context;
   15854:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15858:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1585c:	e0bffe17 	ldw	r2,-8(fp)
   15860:	10800283 	ldbu	r2,10(r2)
   15864:	10803fcc 	andi	r2,r2,255
   15868:	10000c26 	beq	r2,zero,1589c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1586c:	e13ffe17 	ldw	r4,-8(fp)
   15870:	e17fff17 	ldw	r5,-4(fp)
   15874:	01800104 	movi	r6,4
   15878:	000f883a 	mov	r7,zero
   1587c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   15880:	e0bff817 	ldw	r2,-32(fp)
   15884:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15888:	e0bffb17 	ldw	r2,-20(fp)
   1588c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15890:	00124cc0 	call	124cc <OS_Sched>
        return (OS_ERR_NONE);
   15894:	0005883a 	mov	r2,zero
   15898:	00002b06 	br	15948 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1589c:	e0bffe17 	ldw	r2,-8(fp)
   158a0:	10800117 	ldw	r2,4(r2)
   158a4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   158a8:	e0bff917 	ldw	r2,-28(fp)
   158ac:	10c0058b 	ldhu	r3,22(r2)
   158b0:	e0bff917 	ldw	r2,-28(fp)
   158b4:	1080050b 	ldhu	r2,20(r2)
   158b8:	18ffffcc 	andi	r3,r3,65535
   158bc:	10bfffcc 	andi	r2,r2,65535
   158c0:	18800636 	bltu	r3,r2,158dc <OSQPost+0xe8>
   158c4:	e0bff817 	ldw	r2,-32(fp)
   158c8:	e0bffc15 	stw	r2,-16(fp)
   158cc:	e0bffc17 	ldw	r2,-16(fp)
   158d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   158d4:	00800784 	movi	r2,30
   158d8:	00001b06 	br	15948 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   158dc:	e0bff917 	ldw	r2,-28(fp)
   158e0:	10800317 	ldw	r2,12(r2)
   158e4:	11000104 	addi	r4,r2,4
   158e8:	e0fff917 	ldw	r3,-28(fp)
   158ec:	19000315 	stw	r4,12(r3)
   158f0:	e0ffff17 	ldw	r3,-4(fp)
   158f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   158f8:	e0bff917 	ldw	r2,-28(fp)
   158fc:	1080058b 	ldhu	r2,22(r2)
   15900:	10800044 	addi	r2,r2,1
   15904:	1007883a 	mov	r3,r2
   15908:	e0bff917 	ldw	r2,-28(fp)
   1590c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   15910:	e0bff917 	ldw	r2,-28(fp)
   15914:	10c00317 	ldw	r3,12(r2)
   15918:	e0bff917 	ldw	r2,-28(fp)
   1591c:	10800217 	ldw	r2,8(r2)
   15920:	1880041e 	bne	r3,r2,15934 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   15924:	e0bff917 	ldw	r2,-28(fp)
   15928:	10c00117 	ldw	r3,4(r2)
   1592c:	e0bff917 	ldw	r2,-28(fp)
   15930:	10c00315 	stw	r3,12(r2)
   15934:	e0bff817 	ldw	r2,-32(fp)
   15938:	e0bffd15 	stw	r2,-12(fp)
   1593c:	e0bffd17 	ldw	r2,-12(fp)
   15940:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15944:	0005883a 	mov	r2,zero
}
   15948:	e037883a 	mov	sp,fp
   1594c:	dfc00117 	ldw	ra,4(sp)
   15950:	df000017 	ldw	fp,0(sp)
   15954:	dec00204 	addi	sp,sp,8
   15958:	f800283a 	ret

0001595c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1595c:	defff604 	addi	sp,sp,-40
   15960:	dfc00915 	stw	ra,36(sp)
   15964:	df000815 	stw	fp,32(sp)
   15968:	df000804 	addi	fp,sp,32
   1596c:	e13ffe15 	stw	r4,-8(fp)
   15970:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15974:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15978:	e0bffe17 	ldw	r2,-8(fp)
   1597c:	1000021e 	bne	r2,zero,15988 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15980:	00800104 	movi	r2,4
   15984:	00004c06 	br	15ab8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15988:	e0bffe17 	ldw	r2,-8(fp)
   1598c:	10800003 	ldbu	r2,0(r2)
   15990:	10803fcc 	andi	r2,r2,255
   15994:	108000a0 	cmpeqi	r2,r2,2
   15998:	1000021e 	bne	r2,zero,159a4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1599c:	00800044 	movi	r2,1
   159a0:	00004506 	br	15ab8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159a4:	0005303a 	rdctl	r2,status
   159a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159ac:	e0fffa17 	ldw	r3,-24(fp)
   159b0:	00bfff84 	movi	r2,-2
   159b4:	1884703a 	and	r2,r3,r2
   159b8:	1001703a 	wrctl	status,r2
  
  return context;
   159bc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   159c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   159c4:	e0bffe17 	ldw	r2,-8(fp)
   159c8:	10800283 	ldbu	r2,10(r2)
   159cc:	10803fcc 	andi	r2,r2,255
   159d0:	10000c26 	beq	r2,zero,15a04 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   159d4:	e13ffe17 	ldw	r4,-8(fp)
   159d8:	e17fff17 	ldw	r5,-4(fp)
   159dc:	01800104 	movi	r6,4
   159e0:	000f883a 	mov	r7,zero
   159e4:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   159e8:	e0bff817 	ldw	r2,-32(fp)
   159ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159f0:	e0bffb17 	ldw	r2,-20(fp)
   159f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   159f8:	00124cc0 	call	124cc <OS_Sched>
        return (OS_ERR_NONE);
   159fc:	0005883a 	mov	r2,zero
   15a00:	00002d06 	br	15ab8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15a04:	e0bffe17 	ldw	r2,-8(fp)
   15a08:	10800117 	ldw	r2,4(r2)
   15a0c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15a10:	e0bff917 	ldw	r2,-28(fp)
   15a14:	10c0058b 	ldhu	r3,22(r2)
   15a18:	e0bff917 	ldw	r2,-28(fp)
   15a1c:	1080050b 	ldhu	r2,20(r2)
   15a20:	18ffffcc 	andi	r3,r3,65535
   15a24:	10bfffcc 	andi	r2,r2,65535
   15a28:	18800636 	bltu	r3,r2,15a44 <OSQPostFront+0xe8>
   15a2c:	e0bff817 	ldw	r2,-32(fp)
   15a30:	e0bffc15 	stw	r2,-16(fp)
   15a34:	e0bffc17 	ldw	r2,-16(fp)
   15a38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15a3c:	00800784 	movi	r2,30
   15a40:	00001d06 	br	15ab8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   15a44:	e0bff917 	ldw	r2,-28(fp)
   15a48:	10c00417 	ldw	r3,16(r2)
   15a4c:	e0bff917 	ldw	r2,-28(fp)
   15a50:	10800117 	ldw	r2,4(r2)
   15a54:	1880041e 	bne	r3,r2,15a68 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   15a58:	e0bff917 	ldw	r2,-28(fp)
   15a5c:	10c00217 	ldw	r3,8(r2)
   15a60:	e0bff917 	ldw	r2,-28(fp)
   15a64:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15a68:	e0bff917 	ldw	r2,-28(fp)
   15a6c:	10800417 	ldw	r2,16(r2)
   15a70:	10ffff04 	addi	r3,r2,-4
   15a74:	e0bff917 	ldw	r2,-28(fp)
   15a78:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   15a7c:	e0bff917 	ldw	r2,-28(fp)
   15a80:	10800417 	ldw	r2,16(r2)
   15a84:	e0ffff17 	ldw	r3,-4(fp)
   15a88:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15a8c:	e0bff917 	ldw	r2,-28(fp)
   15a90:	1080058b 	ldhu	r2,22(r2)
   15a94:	10800044 	addi	r2,r2,1
   15a98:	1007883a 	mov	r3,r2
   15a9c:	e0bff917 	ldw	r2,-28(fp)
   15aa0:	10c0058d 	sth	r3,22(r2)
   15aa4:	e0bff817 	ldw	r2,-32(fp)
   15aa8:	e0bffd15 	stw	r2,-12(fp)
   15aac:	e0bffd17 	ldw	r2,-12(fp)
   15ab0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15ab4:	0005883a 	mov	r2,zero
}
   15ab8:	e037883a 	mov	sp,fp
   15abc:	dfc00117 	ldw	ra,4(sp)
   15ac0:	df000017 	ldw	fp,0(sp)
   15ac4:	dec00204 	addi	sp,sp,8
   15ac8:	f800283a 	ret

00015acc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15acc:	defff504 	addi	sp,sp,-44
   15ad0:	dfc00a15 	stw	ra,40(sp)
   15ad4:	df000915 	stw	fp,36(sp)
   15ad8:	df000904 	addi	fp,sp,36
   15adc:	e13ffd15 	stw	r4,-12(fp)
   15ae0:	e17ffe15 	stw	r5,-8(fp)
   15ae4:	3005883a 	mov	r2,r6
   15ae8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15aec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15af0:	e0bffd17 	ldw	r2,-12(fp)
   15af4:	1000021e 	bne	r2,zero,15b00 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15af8:	00800104 	movi	r2,4
   15afc:	00007106 	br	15cc4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15b00:	e0bffd17 	ldw	r2,-12(fp)
   15b04:	10800003 	ldbu	r2,0(r2)
   15b08:	10803fcc 	andi	r2,r2,255
   15b0c:	108000a0 	cmpeqi	r2,r2,2
   15b10:	1000021e 	bne	r2,zero,15b1c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15b14:	00800044 	movi	r2,1
   15b18:	00006a06 	br	15cc4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b1c:	0005303a 	rdctl	r2,status
   15b20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b24:	e0fff917 	ldw	r3,-28(fp)
   15b28:	00bfff84 	movi	r2,-2
   15b2c:	1884703a 	and	r2,r3,r2
   15b30:	1001703a 	wrctl	status,r2
  
  return context;
   15b34:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15b38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   15b3c:	e0bffd17 	ldw	r2,-12(fp)
   15b40:	10800283 	ldbu	r2,10(r2)
   15b44:	10803fcc 	andi	r2,r2,255
   15b48:	10001d26 	beq	r2,zero,15bc0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   15b4c:	e0bfff03 	ldbu	r2,-4(fp)
   15b50:	1080004c 	andi	r2,r2,1
   15b54:	10000b26 	beq	r2,zero,15b84 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15b58:	00000506 	br	15b70 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15b5c:	e13ffd17 	ldw	r4,-12(fp)
   15b60:	e17ffe17 	ldw	r5,-8(fp)
   15b64:	01800104 	movi	r6,4
   15b68:	000f883a 	mov	r7,zero
   15b6c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15b70:	e0bffd17 	ldw	r2,-12(fp)
   15b74:	10800283 	ldbu	r2,10(r2)
   15b78:	10803fcc 	andi	r2,r2,255
   15b7c:	103ff71e 	bne	r2,zero,15b5c <__alt_mem_Flash_flash_data+0xf4015b5c>
   15b80:	00000506 	br	15b98 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15b84:	e13ffd17 	ldw	r4,-12(fp)
   15b88:	e17ffe17 	ldw	r5,-8(fp)
   15b8c:	01800104 	movi	r6,4
   15b90:	000f883a 	mov	r7,zero
   15b94:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   15b98:	e0bff717 	ldw	r2,-36(fp)
   15b9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ba0:	e0bffa17 	ldw	r2,-24(fp)
   15ba4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15ba8:	e0bfff03 	ldbu	r2,-4(fp)
   15bac:	1080010c 	andi	r2,r2,4
   15bb0:	1000011e 	bne	r2,zero,15bb8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   15bb4:	00124cc0 	call	124cc <OS_Sched>
        }
        return (OS_ERR_NONE);
   15bb8:	0005883a 	mov	r2,zero
   15bbc:	00004106 	br	15cc4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	10800117 	ldw	r2,4(r2)
   15bc8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15bcc:	e0bff817 	ldw	r2,-32(fp)
   15bd0:	10c0058b 	ldhu	r3,22(r2)
   15bd4:	e0bff817 	ldw	r2,-32(fp)
   15bd8:	1080050b 	ldhu	r2,20(r2)
   15bdc:	18ffffcc 	andi	r3,r3,65535
   15be0:	10bfffcc 	andi	r2,r2,65535
   15be4:	18800636 	bltu	r3,r2,15c00 <OSQPostOpt+0x134>
   15be8:	e0bff717 	ldw	r2,-36(fp)
   15bec:	e0bffb15 	stw	r2,-20(fp)
   15bf0:	e0bffb17 	ldw	r2,-20(fp)
   15bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15bf8:	00800784 	movi	r2,30
   15bfc:	00003106 	br	15cc4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15c00:	e0bfff03 	ldbu	r2,-4(fp)
   15c04:	1080008c 	andi	r2,r2,2
   15c08:	10001326 	beq	r2,zero,15c58 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15c0c:	e0bff817 	ldw	r2,-32(fp)
   15c10:	10c00417 	ldw	r3,16(r2)
   15c14:	e0bff817 	ldw	r2,-32(fp)
   15c18:	10800117 	ldw	r2,4(r2)
   15c1c:	1880041e 	bne	r3,r2,15c30 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   15c20:	e0bff817 	ldw	r2,-32(fp)
   15c24:	10c00217 	ldw	r3,8(r2)
   15c28:	e0bff817 	ldw	r2,-32(fp)
   15c2c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   15c30:	e0bff817 	ldw	r2,-32(fp)
   15c34:	10800417 	ldw	r2,16(r2)
   15c38:	10ffff04 	addi	r3,r2,-4
   15c3c:	e0bff817 	ldw	r2,-32(fp)
   15c40:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   15c44:	e0bff817 	ldw	r2,-32(fp)
   15c48:	10800417 	ldw	r2,16(r2)
   15c4c:	e0fffe17 	ldw	r3,-8(fp)
   15c50:	10c00015 	stw	r3,0(r2)
   15c54:	00001006 	br	15c98 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15c58:	e0bff817 	ldw	r2,-32(fp)
   15c5c:	10800317 	ldw	r2,12(r2)
   15c60:	11000104 	addi	r4,r2,4
   15c64:	e0fff817 	ldw	r3,-32(fp)
   15c68:	19000315 	stw	r4,12(r3)
   15c6c:	e0fffe17 	ldw	r3,-8(fp)
   15c70:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15c74:	e0bff817 	ldw	r2,-32(fp)
   15c78:	10c00317 	ldw	r3,12(r2)
   15c7c:	e0bff817 	ldw	r2,-32(fp)
   15c80:	10800217 	ldw	r2,8(r2)
   15c84:	1880041e 	bne	r3,r2,15c98 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   15c88:	e0bff817 	ldw	r2,-32(fp)
   15c8c:	10c00117 	ldw	r3,4(r2)
   15c90:	e0bff817 	ldw	r2,-32(fp)
   15c94:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15c98:	e0bff817 	ldw	r2,-32(fp)
   15c9c:	1080058b 	ldhu	r2,22(r2)
   15ca0:	10800044 	addi	r2,r2,1
   15ca4:	1007883a 	mov	r3,r2
   15ca8:	e0bff817 	ldw	r2,-32(fp)
   15cac:	10c0058d 	sth	r3,22(r2)
   15cb0:	e0bff717 	ldw	r2,-36(fp)
   15cb4:	e0bffc15 	stw	r2,-16(fp)
   15cb8:	e0bffc17 	ldw	r2,-16(fp)
   15cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15cc0:	0005883a 	mov	r2,zero
}
   15cc4:	e037883a 	mov	sp,fp
   15cc8:	dfc00117 	ldw	ra,4(sp)
   15ccc:	df000017 	ldw	fp,0(sp)
   15cd0:	dec00204 	addi	sp,sp,8
   15cd4:	f800283a 	ret

00015cd8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15cd8:	defff604 	addi	sp,sp,-40
   15cdc:	df000915 	stw	fp,36(sp)
   15ce0:	df000904 	addi	fp,sp,36
   15ce4:	e13ffe15 	stw	r4,-8(fp)
   15ce8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15cec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15cf0:	e0bffe17 	ldw	r2,-8(fp)
   15cf4:	1000021e 	bne	r2,zero,15d00 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15cf8:	00800104 	movi	r2,4
   15cfc:	00004906 	br	15e24 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15d00:	e0bfff17 	ldw	r2,-4(fp)
   15d04:	1000021e 	bne	r2,zero,15d10 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15d08:	00800244 	movi	r2,9
   15d0c:	00004506 	br	15e24 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15d10:	e0bffe17 	ldw	r2,-8(fp)
   15d14:	10800003 	ldbu	r2,0(r2)
   15d18:	10803fcc 	andi	r2,r2,255
   15d1c:	108000a0 	cmpeqi	r2,r2,2
   15d20:	1000021e 	bne	r2,zero,15d2c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15d24:	00800044 	movi	r2,1
   15d28:	00003e06 	br	15e24 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d2c:	0005303a 	rdctl	r2,status
   15d30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d34:	e0fffc17 	ldw	r3,-16(fp)
   15d38:	00bfff84 	movi	r2,-2
   15d3c:	1884703a 	and	r2,r3,r2
   15d40:	1001703a 	wrctl	status,r2
  
  return context;
   15d44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15d48:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15d4c:	e0bffe17 	ldw	r2,-8(fp)
   15d50:	10c00283 	ldbu	r3,10(r2)
   15d54:	e0bfff17 	ldw	r2,-4(fp)
   15d58:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15d5c:	e0bffe17 	ldw	r2,-8(fp)
   15d60:	108002c4 	addi	r2,r2,11
   15d64:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15d68:	e0bfff17 	ldw	r2,-4(fp)
   15d6c:	10800204 	addi	r2,r2,8
   15d70:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d74:	e03ff705 	stb	zero,-36(fp)
   15d78:	00000b06 	br	15da8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   15d7c:	e0bff917 	ldw	r2,-28(fp)
   15d80:	10c00044 	addi	r3,r2,1
   15d84:	e0fff915 	stw	r3,-28(fp)
   15d88:	e0fff817 	ldw	r3,-32(fp)
   15d8c:	19000044 	addi	r4,r3,1
   15d90:	e13ff815 	stw	r4,-32(fp)
   15d94:	18c00003 	ldbu	r3,0(r3)
   15d98:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d9c:	e0bff703 	ldbu	r2,-36(fp)
   15da0:	10800044 	addi	r2,r2,1
   15da4:	e0bff705 	stb	r2,-36(fp)
   15da8:	e0bff703 	ldbu	r2,-36(fp)
   15dac:	108000f0 	cmpltui	r2,r2,3
   15db0:	103ff21e 	bne	r2,zero,15d7c <__alt_mem_Flash_flash_data+0xf4015d7c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15db4:	e0bffe17 	ldw	r2,-8(fp)
   15db8:	10800117 	ldw	r2,4(r2)
   15dbc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   15dc0:	e0bffb17 	ldw	r2,-20(fp)
   15dc4:	1080058b 	ldhu	r2,22(r2)
   15dc8:	10bfffcc 	andi	r2,r2,65535
   15dcc:	10000626 	beq	r2,zero,15de8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15dd0:	e0bffb17 	ldw	r2,-20(fp)
   15dd4:	10800417 	ldw	r2,16(r2)
   15dd8:	10c00017 	ldw	r3,0(r2)
   15ddc:	e0bfff17 	ldw	r2,-4(fp)
   15de0:	10c00015 	stw	r3,0(r2)
   15de4:	00000206 	br	15df0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15de8:	e0bfff17 	ldw	r2,-4(fp)
   15dec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15df0:	e0bffb17 	ldw	r2,-20(fp)
   15df4:	10c0058b 	ldhu	r3,22(r2)
   15df8:	e0bfff17 	ldw	r2,-4(fp)
   15dfc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15e00:	e0bffb17 	ldw	r2,-20(fp)
   15e04:	10c0050b 	ldhu	r3,20(r2)
   15e08:	e0bfff17 	ldw	r2,-4(fp)
   15e0c:	10c0018d 	sth	r3,6(r2)
   15e10:	e0bffa17 	ldw	r2,-24(fp)
   15e14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e18:	e0bffd17 	ldw	r2,-12(fp)
   15e1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15e20:	0005883a 	mov	r2,zero
}
   15e24:	e037883a 	mov	sp,fp
   15e28:	df000017 	ldw	fp,0(sp)
   15e2c:	dec00104 	addi	sp,sp,4
   15e30:	f800283a 	ret

00015e34 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15e34:	defffb04 	addi	sp,sp,-20
   15e38:	dfc00415 	stw	ra,16(sp)
   15e3c:	df000315 	stw	fp,12(sp)
   15e40:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15e44:	010000b4 	movhi	r4,2
   15e48:	2118e504 	addi	r4,r4,25492
   15e4c:	01407804 	movi	r5,480
   15e50:	00124180 	call	12418 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15e54:	008000b4 	movhi	r2,2
   15e58:	1098e504 	addi	r2,r2,25492
   15e5c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15e60:	008000b4 	movhi	r2,2
   15e64:	1098eb04 	addi	r2,r2,25516
   15e68:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15e6c:	e03ffd0d 	sth	zero,-12(fp)
   15e70:	00000c06 	br	15ea4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15e74:	e0bffe17 	ldw	r2,-8(fp)
   15e78:	e0ffff17 	ldw	r3,-4(fp)
   15e7c:	10c00015 	stw	r3,0(r2)
        pq1++;
   15e80:	e0bffe17 	ldw	r2,-8(fp)
   15e84:	10800604 	addi	r2,r2,24
   15e88:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15e8c:	e0bfff17 	ldw	r2,-4(fp)
   15e90:	10800604 	addi	r2,r2,24
   15e94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15e98:	e0bffd0b 	ldhu	r2,-12(fp)
   15e9c:	10800044 	addi	r2,r2,1
   15ea0:	e0bffd0d 	sth	r2,-12(fp)
   15ea4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ea8:	108004f0 	cmpltui	r2,r2,19
   15eac:	103ff11e 	bne	r2,zero,15e74 <__alt_mem_Flash_flash_data+0xf4015e74>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15eb0:	e0bffe17 	ldw	r2,-8(fp)
   15eb4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15eb8:	008000b4 	movhi	r2,2
   15ebc:	1082dc04 	addi	r2,r2,2928
   15ec0:	00c000b4 	movhi	r3,2
   15ec4:	18d8e504 	addi	r3,r3,25492
   15ec8:	10c00015 	stw	r3,0(r2)
#endif
}
   15ecc:	e037883a 	mov	sp,fp
   15ed0:	dfc00117 	ldw	ra,4(sp)
   15ed4:	df000017 	ldw	fp,0(sp)
   15ed8:	dec00204 	addi	sp,sp,8
   15edc:	f800283a 	ret

00015ee0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15ee0:	defffa04 	addi	sp,sp,-24
   15ee4:	df000515 	stw	fp,20(sp)
   15ee8:	df000504 	addi	fp,sp,20
   15eec:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15ef0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15ef4:	e0bfff17 	ldw	r2,-4(fp)
   15ef8:	1000021e 	bne	r2,zero,15f04 <OSSemAccept+0x24>
        return (0);
   15efc:	0005883a 	mov	r2,zero
   15f00:	00001f06 	br	15f80 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15f04:	e0bfff17 	ldw	r2,-4(fp)
   15f08:	10800003 	ldbu	r2,0(r2)
   15f0c:	10803fcc 	andi	r2,r2,255
   15f10:	108000e0 	cmpeqi	r2,r2,3
   15f14:	1000021e 	bne	r2,zero,15f20 <OSSemAccept+0x40>
        return (0);
   15f18:	0005883a 	mov	r2,zero
   15f1c:	00001806 	br	15f80 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f20:	0005303a 	rdctl	r2,status
   15f24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f28:	e0fffd17 	ldw	r3,-12(fp)
   15f2c:	00bfff84 	movi	r2,-2
   15f30:	1884703a 	and	r2,r3,r2
   15f34:	1001703a 	wrctl	status,r2
  
  return context;
   15f38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15f3c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15f40:	e0bfff17 	ldw	r2,-4(fp)
   15f44:	1080020b 	ldhu	r2,8(r2)
   15f48:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   15f4c:	e0bffc0b 	ldhu	r2,-16(fp)
   15f50:	10000626 	beq	r2,zero,15f6c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15f54:	e0bfff17 	ldw	r2,-4(fp)
   15f58:	1080020b 	ldhu	r2,8(r2)
   15f5c:	10bfffc4 	addi	r2,r2,-1
   15f60:	1007883a 	mov	r3,r2
   15f64:	e0bfff17 	ldw	r2,-4(fp)
   15f68:	10c0020d 	sth	r3,8(r2)
   15f6c:	e0bffb17 	ldw	r2,-20(fp)
   15f70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f74:	e0bffe17 	ldw	r2,-8(fp)
   15f78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15f7c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   15f80:	e037883a 	mov	sp,fp
   15f84:	df000017 	ldw	fp,0(sp)
   15f88:	dec00104 	addi	sp,sp,4
   15f8c:	f800283a 	ret

00015f90 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15f90:	defff904 	addi	sp,sp,-28
   15f94:	dfc00615 	stw	ra,24(sp)
   15f98:	df000515 	stw	fp,20(sp)
   15f9c:	df000504 	addi	fp,sp,20
   15fa0:	2005883a 	mov	r2,r4
   15fa4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15fa8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15fac:	008000b4 	movhi	r2,2
   15fb0:	1082df04 	addi	r2,r2,2940
   15fb4:	10800003 	ldbu	r2,0(r2)
   15fb8:	10803fcc 	andi	r2,r2,255
   15fbc:	10000226 	beq	r2,zero,15fc8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15fc0:	0005883a 	mov	r2,zero
   15fc4:	00002d06 	br	1607c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15fc8:	0005303a 	rdctl	r2,status
   15fcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fd0:	e0fffd17 	ldw	r3,-12(fp)
   15fd4:	00bfff84 	movi	r2,-2
   15fd8:	1884703a 	and	r2,r3,r2
   15fdc:	1001703a 	wrctl	status,r2
  
  return context;
   15fe0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15fe4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15fe8:	008000b4 	movhi	r2,2
   15fec:	1082de04 	addi	r2,r2,2936
   15ff0:	10800017 	ldw	r2,0(r2)
   15ff4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15ff8:	008000b4 	movhi	r2,2
   15ffc:	1082de04 	addi	r2,r2,2936
   16000:	10800017 	ldw	r2,0(r2)
   16004:	10000726 	beq	r2,zero,16024 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16008:	008000b4 	movhi	r2,2
   1600c:	1082de04 	addi	r2,r2,2936
   16010:	10800017 	ldw	r2,0(r2)
   16014:	10c00117 	ldw	r3,4(r2)
   16018:	008000b4 	movhi	r2,2
   1601c:	1082de04 	addi	r2,r2,2936
   16020:	10c00015 	stw	r3,0(r2)
   16024:	e0bffb17 	ldw	r2,-20(fp)
   16028:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1602c:	e0bffe17 	ldw	r2,-8(fp)
   16030:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   16034:	e0bffc17 	ldw	r2,-16(fp)
   16038:	10000f26 	beq	r2,zero,16078 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1603c:	e0bffc17 	ldw	r2,-16(fp)
   16040:	00c000c4 	movi	r3,3
   16044:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   16048:	e0bffc17 	ldw	r2,-16(fp)
   1604c:	e0ffff0b 	ldhu	r3,-4(fp)
   16050:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   16054:	e0bffc17 	ldw	r2,-16(fp)
   16058:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1605c:	e0bffc17 	ldw	r2,-16(fp)
   16060:	00c00fc4 	movi	r3,63
   16064:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16068:	e0bffc17 	ldw	r2,-16(fp)
   1606c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   16070:	e13ffc17 	ldw	r4,-16(fp)
   16074:	00120540 	call	12054 <OS_EventWaitListInit>
    }
    return (pevent);
   16078:	e0bffc17 	ldw	r2,-16(fp)
}
   1607c:	e037883a 	mov	sp,fp
   16080:	dfc00117 	ldw	ra,4(sp)
   16084:	df000017 	ldw	fp,0(sp)
   16088:	dec00204 	addi	sp,sp,8
   1608c:	f800283a 	ret

00016090 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16090:	defff304 	addi	sp,sp,-52
   16094:	dfc00c15 	stw	ra,48(sp)
   16098:	df000b15 	stw	fp,44(sp)
   1609c:	df000b04 	addi	fp,sp,44
   160a0:	e13ffd15 	stw	r4,-12(fp)
   160a4:	2805883a 	mov	r2,r5
   160a8:	e1bfff15 	stw	r6,-4(fp)
   160ac:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   160b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   160b4:	e0bfff17 	ldw	r2,-4(fp)
   160b8:	1000021e 	bne	r2,zero,160c4 <OSSemDel+0x34>
        return (pevent);
   160bc:	e0bffd17 	ldw	r2,-12(fp)
   160c0:	00008806 	br	162e4 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   160c4:	e0bffd17 	ldw	r2,-12(fp)
   160c8:	1000051e 	bne	r2,zero,160e0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   160cc:	e0bfff17 	ldw	r2,-4(fp)
   160d0:	00c00104 	movi	r3,4
   160d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   160d8:	e0bffd17 	ldw	r2,-12(fp)
   160dc:	00008106 	br	162e4 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   160e0:	e0bffd17 	ldw	r2,-12(fp)
   160e4:	10800003 	ldbu	r2,0(r2)
   160e8:	10803fcc 	andi	r2,r2,255
   160ec:	108000e0 	cmpeqi	r2,r2,3
   160f0:	1000051e 	bne	r2,zero,16108 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   160f4:	e0bfff17 	ldw	r2,-4(fp)
   160f8:	00c00044 	movi	r3,1
   160fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16100:	e0bffd17 	ldw	r2,-12(fp)
   16104:	00007706 	br	162e4 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16108:	008000b4 	movhi	r2,2
   1610c:	1082df04 	addi	r2,r2,2940
   16110:	10800003 	ldbu	r2,0(r2)
   16114:	10803fcc 	andi	r2,r2,255
   16118:	10000526 	beq	r2,zero,16130 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1611c:	e0bfff17 	ldw	r2,-4(fp)
   16120:	00c003c4 	movi	r3,15
   16124:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16128:	e0bffd17 	ldw	r2,-12(fp)
   1612c:	00006d06 	br	162e4 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16130:	0005303a 	rdctl	r2,status
   16134:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16138:	e0fff817 	ldw	r3,-32(fp)
   1613c:	00bfff84 	movi	r2,-2
   16140:	1884703a 	and	r2,r3,r2
   16144:	1001703a 	wrctl	status,r2
  
  return context;
   16148:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1614c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   16150:	e0bffd17 	ldw	r2,-12(fp)
   16154:	10800283 	ldbu	r2,10(r2)
   16158:	10803fcc 	andi	r2,r2,255
   1615c:	10000326 	beq	r2,zero,1616c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16160:	00800044 	movi	r2,1
   16164:	e0bff505 	stb	r2,-44(fp)
   16168:	00000106 	br	16170 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1616c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16170:	e0bffe03 	ldbu	r2,-8(fp)
   16174:	10000326 	beq	r2,zero,16184 <OSSemDel+0xf4>
   16178:	10800060 	cmpeqi	r2,r2,1
   1617c:	10002c1e 	bne	r2,zero,16230 <OSSemDel+0x1a0>
   16180:	00004d06 	br	162b8 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   16184:	e0bff503 	ldbu	r2,-44(fp)
   16188:	10001a1e 	bne	r2,zero,161f4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1618c:	e0bffd17 	ldw	r2,-12(fp)
   16190:	00c00fc4 	movi	r3,63
   16194:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16198:	e0bffd17 	ldw	r2,-12(fp)
   1619c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   161a0:	e0bffd17 	ldw	r2,-12(fp)
   161a4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   161a8:	008000b4 	movhi	r2,2
   161ac:	1082de04 	addi	r2,r2,2936
   161b0:	10c00017 	ldw	r3,0(r2)
   161b4:	e0bffd17 	ldw	r2,-12(fp)
   161b8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   161bc:	e0bffd17 	ldw	r2,-12(fp)
   161c0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   161c4:	008000b4 	movhi	r2,2
   161c8:	1082de04 	addi	r2,r2,2936
   161cc:	e0fffd17 	ldw	r3,-12(fp)
   161d0:	10c00015 	stw	r3,0(r2)
   161d4:	e0bff717 	ldw	r2,-36(fp)
   161d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161dc:	e0bff917 	ldw	r2,-28(fp)
   161e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   161e4:	e0bfff17 	ldw	r2,-4(fp)
   161e8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   161ec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   161f0:	00003b06 	br	162e0 <OSSemDel+0x250>
   161f4:	e0bff717 	ldw	r2,-36(fp)
   161f8:	e0bffa15 	stw	r2,-24(fp)
   161fc:	e0bffa17 	ldw	r2,-24(fp)
   16200:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   16204:	e0bfff17 	ldw	r2,-4(fp)
   16208:	00c01244 	movi	r3,73
   1620c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   16210:	e0bffd17 	ldw	r2,-12(fp)
   16214:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16218:	00003106 	br	162e0 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1621c:	e13ffd17 	ldw	r4,-12(fp)
   16220:	000b883a 	mov	r5,zero
   16224:	01800044 	movi	r6,1
   16228:	000f883a 	mov	r7,zero
   1622c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   16230:	e0bffd17 	ldw	r2,-12(fp)
   16234:	10800283 	ldbu	r2,10(r2)
   16238:	10803fcc 	andi	r2,r2,255
   1623c:	103ff71e 	bne	r2,zero,1621c <__alt_mem_Flash_flash_data+0xf401621c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16240:	e0bffd17 	ldw	r2,-12(fp)
   16244:	00c00fc4 	movi	r3,63
   16248:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1624c:	e0bffd17 	ldw	r2,-12(fp)
   16250:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16254:	e0bffd17 	ldw	r2,-12(fp)
   16258:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1625c:	008000b4 	movhi	r2,2
   16260:	1082de04 	addi	r2,r2,2936
   16264:	10c00017 	ldw	r3,0(r2)
   16268:	e0bffd17 	ldw	r2,-12(fp)
   1626c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16270:	e0bffd17 	ldw	r2,-12(fp)
   16274:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16278:	008000b4 	movhi	r2,2
   1627c:	1082de04 	addi	r2,r2,2936
   16280:	e0fffd17 	ldw	r3,-12(fp)
   16284:	10c00015 	stw	r3,0(r2)
   16288:	e0bff717 	ldw	r2,-36(fp)
   1628c:	e0bffb15 	stw	r2,-20(fp)
   16290:	e0bffb17 	ldw	r2,-20(fp)
   16294:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16298:	e0bff503 	ldbu	r2,-44(fp)
   1629c:	10800058 	cmpnei	r2,r2,1
   162a0:	1000011e 	bne	r2,zero,162a8 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   162a4:	00124cc0 	call	124cc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   162a8:	e0bfff17 	ldw	r2,-4(fp)
   162ac:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   162b0:	e03ff615 	stw	zero,-40(fp)
             break;
   162b4:	00000a06 	br	162e0 <OSSemDel+0x250>
   162b8:	e0bff717 	ldw	r2,-36(fp)
   162bc:	e0bffc15 	stw	r2,-16(fp)
   162c0:	e0bffc17 	ldw	r2,-16(fp)
   162c4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   162c8:	e0bfff17 	ldw	r2,-4(fp)
   162cc:	00c001c4 	movi	r3,7
   162d0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   162d4:	e0bffd17 	ldw	r2,-12(fp)
   162d8:	e0bff615 	stw	r2,-40(fp)
             break;
   162dc:	0001883a 	nop
    }
    return (pevent_return);
   162e0:	e0bff617 	ldw	r2,-40(fp)
}
   162e4:	e037883a 	mov	sp,fp
   162e8:	dfc00117 	ldw	ra,4(sp)
   162ec:	df000017 	ldw	fp,0(sp)
   162f0:	dec00204 	addi	sp,sp,8
   162f4:	f800283a 	ret

000162f8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   162f8:	defff504 	addi	sp,sp,-44
   162fc:	dfc00a15 	stw	ra,40(sp)
   16300:	df000915 	stw	fp,36(sp)
   16304:	df000904 	addi	fp,sp,36
   16308:	e13ffd15 	stw	r4,-12(fp)
   1630c:	2805883a 	mov	r2,r5
   16310:	e1bfff15 	stw	r6,-4(fp)
   16314:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16318:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1631c:	e0bfff17 	ldw	r2,-4(fp)
   16320:	1000011e 	bne	r2,zero,16328 <OSSemPend+0x30>
        return;
   16324:	00008906 	br	1654c <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16328:	e0bffd17 	ldw	r2,-12(fp)
   1632c:	1000041e 	bne	r2,zero,16340 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   16330:	e0bfff17 	ldw	r2,-4(fp)
   16334:	00c00104 	movi	r3,4
   16338:	10c00005 	stb	r3,0(r2)
        return;
   1633c:	00008306 	br	1654c <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16340:	e0bffd17 	ldw	r2,-12(fp)
   16344:	10800003 	ldbu	r2,0(r2)
   16348:	10803fcc 	andi	r2,r2,255
   1634c:	108000e0 	cmpeqi	r2,r2,3
   16350:	1000041e 	bne	r2,zero,16364 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16354:	e0bfff17 	ldw	r2,-4(fp)
   16358:	00c00044 	movi	r3,1
   1635c:	10c00005 	stb	r3,0(r2)
        return;
   16360:	00007a06 	br	1654c <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   16364:	008000b4 	movhi	r2,2
   16368:	1082df04 	addi	r2,r2,2940
   1636c:	10800003 	ldbu	r2,0(r2)
   16370:	10803fcc 	andi	r2,r2,255
   16374:	10000426 	beq	r2,zero,16388 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16378:	e0bfff17 	ldw	r2,-4(fp)
   1637c:	00c00084 	movi	r3,2
   16380:	10c00005 	stb	r3,0(r2)
        return;
   16384:	00007106 	br	1654c <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16388:	008000b4 	movhi	r2,2
   1638c:	1082d104 	addi	r2,r2,2884
   16390:	10800003 	ldbu	r2,0(r2)
   16394:	10803fcc 	andi	r2,r2,255
   16398:	10000426 	beq	r2,zero,163ac <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1639c:	e0bfff17 	ldw	r2,-4(fp)
   163a0:	00c00344 	movi	r3,13
   163a4:	10c00005 	stb	r3,0(r2)
        return;
   163a8:	00006806 	br	1654c <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163ac:	0005303a 	rdctl	r2,status
   163b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163b4:	e0fff817 	ldw	r3,-32(fp)
   163b8:	00bfff84 	movi	r2,-2
   163bc:	1884703a 	and	r2,r3,r2
   163c0:	1001703a 	wrctl	status,r2
  
  return context;
   163c4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   163c8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   163cc:	e0bffd17 	ldw	r2,-12(fp)
   163d0:	1080020b 	ldhu	r2,8(r2)
   163d4:	10bfffcc 	andi	r2,r2,65535
   163d8:	10000d26 	beq	r2,zero,16410 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   163dc:	e0bffd17 	ldw	r2,-12(fp)
   163e0:	1080020b 	ldhu	r2,8(r2)
   163e4:	10bfffc4 	addi	r2,r2,-1
   163e8:	1007883a 	mov	r3,r2
   163ec:	e0bffd17 	ldw	r2,-12(fp)
   163f0:	10c0020d 	sth	r3,8(r2)
   163f4:	e0bff717 	ldw	r2,-36(fp)
   163f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163fc:	e0bff917 	ldw	r2,-28(fp)
   16400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   16404:	e0bfff17 	ldw	r2,-4(fp)
   16408:	10000005 	stb	zero,0(r2)
        return;
   1640c:	00004f06 	br	1654c <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   16410:	008000b4 	movhi	r2,2
   16414:	1082e004 	addi	r2,r2,2944
   16418:	10c00017 	ldw	r3,0(r2)
   1641c:	008000b4 	movhi	r2,2
   16420:	1082e004 	addi	r2,r2,2944
   16424:	10800017 	ldw	r2,0(r2)
   16428:	10800c03 	ldbu	r2,48(r2)
   1642c:	10800054 	ori	r2,r2,1
   16430:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16434:	008000b4 	movhi	r2,2
   16438:	1082e004 	addi	r2,r2,2944
   1643c:	10800017 	ldw	r2,0(r2)
   16440:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   16444:	008000b4 	movhi	r2,2
   16448:	1082e004 	addi	r2,r2,2944
   1644c:	10800017 	ldw	r2,0(r2)
   16450:	e0fffe0b 	ldhu	r3,-8(fp)
   16454:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   16458:	e13ffd17 	ldw	r4,-12(fp)
   1645c:	0011c4c0 	call	11c4c <OS_EventTaskWait>
   16460:	e0bff717 	ldw	r2,-36(fp)
   16464:	e0bffa15 	stw	r2,-24(fp)
   16468:	e0bffa17 	ldw	r2,-24(fp)
   1646c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   16470:	00124cc0 	call	124cc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16474:	0005303a 	rdctl	r2,status
   16478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1647c:	e0fffb17 	ldw	r3,-20(fp)
   16480:	00bfff84 	movi	r2,-2
   16484:	1884703a 	and	r2,r3,r2
   16488:	1001703a 	wrctl	status,r2
  
  return context;
   1648c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16490:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16494:	008000b4 	movhi	r2,2
   16498:	1082e004 	addi	r2,r2,2944
   1649c:	10800017 	ldw	r2,0(r2)
   164a0:	10800c43 	ldbu	r2,49(r2)
   164a4:	10803fcc 	andi	r2,r2,255
   164a8:	10000326 	beq	r2,zero,164b8 <OSSemPend+0x1c0>
   164ac:	108000a0 	cmpeqi	r2,r2,2
   164b0:	1000041e 	bne	r2,zero,164c4 <OSSemPend+0x1cc>
   164b4:	00000706 	br	164d4 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   164b8:	e0bfff17 	ldw	r2,-4(fp)
   164bc:	10000005 	stb	zero,0(r2)
             break;
   164c0:	00000e06 	br	164fc <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   164c4:	e0bfff17 	ldw	r2,-4(fp)
   164c8:	00c00384 	movi	r3,14
   164cc:	10c00005 	stb	r3,0(r2)
             break;
   164d0:	00000a06 	br	164fc <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   164d4:	008000b4 	movhi	r2,2
   164d8:	1082e004 	addi	r2,r2,2944
   164dc:	10800017 	ldw	r2,0(r2)
   164e0:	1009883a 	mov	r4,r2
   164e4:	e17ffd17 	ldw	r5,-12(fp)
   164e8:	0011ea40 	call	11ea4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   164ec:	e0bfff17 	ldw	r2,-4(fp)
   164f0:	00c00284 	movi	r3,10
   164f4:	10c00005 	stb	r3,0(r2)
             break;
   164f8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   164fc:	008000b4 	movhi	r2,2
   16500:	1082e004 	addi	r2,r2,2944
   16504:	10800017 	ldw	r2,0(r2)
   16508:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1650c:	008000b4 	movhi	r2,2
   16510:	1082e004 	addi	r2,r2,2944
   16514:	10800017 	ldw	r2,0(r2)
   16518:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1651c:	008000b4 	movhi	r2,2
   16520:	1082e004 	addi	r2,r2,2944
   16524:	10800017 	ldw	r2,0(r2)
   16528:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1652c:	008000b4 	movhi	r2,2
   16530:	1082e004 	addi	r2,r2,2944
   16534:	10800017 	ldw	r2,0(r2)
   16538:	10000815 	stw	zero,32(r2)
   1653c:	e0bff717 	ldw	r2,-36(fp)
   16540:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16544:	e0bffc17 	ldw	r2,-16(fp)
   16548:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1654c:	e037883a 	mov	sp,fp
   16550:	dfc00117 	ldw	ra,4(sp)
   16554:	df000017 	ldw	fp,0(sp)
   16558:	dec00204 	addi	sp,sp,8
   1655c:	f800283a 	ret

00016560 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16560:	defff604 	addi	sp,sp,-40
   16564:	dfc00915 	stw	ra,36(sp)
   16568:	df000815 	stw	fp,32(sp)
   1656c:	df000804 	addi	fp,sp,32
   16570:	e13ffd15 	stw	r4,-12(fp)
   16574:	2805883a 	mov	r2,r5
   16578:	e1bfff15 	stw	r6,-4(fp)
   1657c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16580:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16584:	e0bfff17 	ldw	r2,-4(fp)
   16588:	1000021e 	bne	r2,zero,16594 <OSSemPendAbort+0x34>
        return (0);
   1658c:	0005883a 	mov	r2,zero
   16590:	00004906 	br	166b8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16594:	e0bffd17 	ldw	r2,-12(fp)
   16598:	1000051e 	bne	r2,zero,165b0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1659c:	e0bfff17 	ldw	r2,-4(fp)
   165a0:	00c00104 	movi	r3,4
   165a4:	10c00005 	stb	r3,0(r2)
        return (0);
   165a8:	0005883a 	mov	r2,zero
   165ac:	00004206 	br	166b8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   165b0:	e0bffd17 	ldw	r2,-12(fp)
   165b4:	10800003 	ldbu	r2,0(r2)
   165b8:	10803fcc 	andi	r2,r2,255
   165bc:	108000e0 	cmpeqi	r2,r2,3
   165c0:	1000051e 	bne	r2,zero,165d8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   165c4:	e0bfff17 	ldw	r2,-4(fp)
   165c8:	00c00044 	movi	r3,1
   165cc:	10c00005 	stb	r3,0(r2)
        return (0);
   165d0:	0005883a 	mov	r2,zero
   165d4:	00003806 	br	166b8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   165d8:	0005303a 	rdctl	r2,status
   165dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   165e0:	e0fffa17 	ldw	r3,-24(fp)
   165e4:	00bfff84 	movi	r2,-2
   165e8:	1884703a 	and	r2,r3,r2
   165ec:	1001703a 	wrctl	status,r2
  
  return context;
   165f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   165f4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   165f8:	e0bffd17 	ldw	r2,-12(fp)
   165fc:	10800283 	ldbu	r2,10(r2)
   16600:	10803fcc 	andi	r2,r2,255
   16604:	10002526 	beq	r2,zero,1669c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   16608:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1660c:	e0bffe03 	ldbu	r2,-8(fp)
   16610:	10800060 	cmpeqi	r2,r2,1
   16614:	10000e26 	beq	r2,zero,16650 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   16618:	00000806 	br	1663c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1661c:	e13ffd17 	ldw	r4,-12(fp)
   16620:	000b883a 	mov	r5,zero
   16624:	01800044 	movi	r6,1
   16628:	01c00084 	movi	r7,2
   1662c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                     nbr_tasks++;
   16630:	e0bff803 	ldbu	r2,-32(fp)
   16634:	10800044 	addi	r2,r2,1
   16638:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	10800283 	ldbu	r2,10(r2)
   16644:	10803fcc 	andi	r2,r2,255
   16648:	103ff41e 	bne	r2,zero,1661c <__alt_mem_Flash_flash_data+0xf401661c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1664c:	00000906 	br	16674 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   16650:	e13ffd17 	ldw	r4,-12(fp)
   16654:	000b883a 	mov	r5,zero
   16658:	01800044 	movi	r6,1
   1665c:	01c00084 	movi	r7,2
   16660:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 nbr_tasks++;
   16664:	e0bff803 	ldbu	r2,-32(fp)
   16668:	10800044 	addi	r2,r2,1
   1666c:	e0bff805 	stb	r2,-32(fp)
                 break;
   16670:	0001883a 	nop
   16674:	e0bff917 	ldw	r2,-28(fp)
   16678:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1667c:	e0bffb17 	ldw	r2,-20(fp)
   16680:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16684:	00124cc0 	call	124cc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   16688:	e0bfff17 	ldw	r2,-4(fp)
   1668c:	00c00384 	movi	r3,14
   16690:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16694:	e0bff803 	ldbu	r2,-32(fp)
   16698:	00000706 	br	166b8 <OSSemPendAbort+0x158>
   1669c:	e0bff917 	ldw	r2,-28(fp)
   166a0:	e0bffc15 	stw	r2,-16(fp)
   166a4:	e0bffc17 	ldw	r2,-16(fp)
   166a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   166ac:	e0bfff17 	ldw	r2,-4(fp)
   166b0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   166b4:	0005883a 	mov	r2,zero
}
   166b8:	e037883a 	mov	sp,fp
   166bc:	dfc00117 	ldw	ra,4(sp)
   166c0:	df000017 	ldw	fp,0(sp)
   166c4:	dec00204 	addi	sp,sp,8
   166c8:	f800283a 	ret

000166cc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   166cc:	defff804 	addi	sp,sp,-32
   166d0:	dfc00715 	stw	ra,28(sp)
   166d4:	df000615 	stw	fp,24(sp)
   166d8:	df000604 	addi	fp,sp,24
   166dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   166e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   166e4:	e0bfff17 	ldw	r2,-4(fp)
   166e8:	1000021e 	bne	r2,zero,166f4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   166ec:	00800104 	movi	r2,4
   166f0:	00003506 	br	167c8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   166f4:	e0bfff17 	ldw	r2,-4(fp)
   166f8:	10800003 	ldbu	r2,0(r2)
   166fc:	10803fcc 	andi	r2,r2,255
   16700:	108000e0 	cmpeqi	r2,r2,3
   16704:	1000021e 	bne	r2,zero,16710 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   16708:	00800044 	movi	r2,1
   1670c:	00002e06 	br	167c8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16710:	0005303a 	rdctl	r2,status
   16714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16718:	e0fffb17 	ldw	r3,-20(fp)
   1671c:	00bfff84 	movi	r2,-2
   16720:	1884703a 	and	r2,r3,r2
   16724:	1001703a 	wrctl	status,r2
  
  return context;
   16728:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1672c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   16730:	e0bfff17 	ldw	r2,-4(fp)
   16734:	10800283 	ldbu	r2,10(r2)
   16738:	10803fcc 	andi	r2,r2,255
   1673c:	10000c26 	beq	r2,zero,16770 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   16740:	e13fff17 	ldw	r4,-4(fp)
   16744:	000b883a 	mov	r5,zero
   16748:	01800044 	movi	r6,1
   1674c:	000f883a 	mov	r7,zero
   16750:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   16754:	e0bffa17 	ldw	r2,-24(fp)
   16758:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1675c:	e0bffc17 	ldw	r2,-16(fp)
   16760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16764:	00124cc0 	call	124cc <OS_Sched>
        return (OS_ERR_NONE);
   16768:	0005883a 	mov	r2,zero
   1676c:	00001606 	br	167c8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   16770:	e0bfff17 	ldw	r2,-4(fp)
   16774:	1080020b 	ldhu	r2,8(r2)
   16778:	10ffffcc 	andi	r3,r2,65535
   1677c:	00bfffd4 	movui	r2,65535
   16780:	18800c26 	beq	r3,r2,167b4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   16784:	e0bfff17 	ldw	r2,-4(fp)
   16788:	1080020b 	ldhu	r2,8(r2)
   1678c:	10800044 	addi	r2,r2,1
   16790:	1007883a 	mov	r3,r2
   16794:	e0bfff17 	ldw	r2,-4(fp)
   16798:	10c0020d 	sth	r3,8(r2)
   1679c:	e0bffa17 	ldw	r2,-24(fp)
   167a0:	e0bffd15 	stw	r2,-12(fp)
   167a4:	e0bffd17 	ldw	r2,-12(fp)
   167a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   167ac:	0005883a 	mov	r2,zero
   167b0:	00000506 	br	167c8 <OSSemPost+0xfc>
   167b4:	e0bffa17 	ldw	r2,-24(fp)
   167b8:	e0bffe15 	stw	r2,-8(fp)
   167bc:	e0bffe17 	ldw	r2,-8(fp)
   167c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   167c4:	00800c84 	movi	r2,50
}
   167c8:	e037883a 	mov	sp,fp
   167cc:	dfc00117 	ldw	ra,4(sp)
   167d0:	df000017 	ldw	fp,0(sp)
   167d4:	dec00204 	addi	sp,sp,8
   167d8:	f800283a 	ret

000167dc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   167dc:	defff704 	addi	sp,sp,-36
   167e0:	df000815 	stw	fp,32(sp)
   167e4:	df000804 	addi	fp,sp,32
   167e8:	e13ffe15 	stw	r4,-8(fp)
   167ec:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   167f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   167f4:	e0bffe17 	ldw	r2,-8(fp)
   167f8:	1000021e 	bne	r2,zero,16804 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   167fc:	00800104 	movi	r2,4
   16800:	00003606 	br	168dc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   16804:	e0bfff17 	ldw	r2,-4(fp)
   16808:	1000021e 	bne	r2,zero,16814 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1680c:	00800244 	movi	r2,9
   16810:	00003206 	br	168dc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16814:	e0bffe17 	ldw	r2,-8(fp)
   16818:	10800003 	ldbu	r2,0(r2)
   1681c:	10803fcc 	andi	r2,r2,255
   16820:	108000e0 	cmpeqi	r2,r2,3
   16824:	1000021e 	bne	r2,zero,16830 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16828:	00800044 	movi	r2,1
   1682c:	00002b06 	br	168dc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16830:	0005303a 	rdctl	r2,status
   16834:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16838:	e0fffc17 	ldw	r3,-16(fp)
   1683c:	00bfff84 	movi	r2,-2
   16840:	1884703a 	and	r2,r3,r2
   16844:	1001703a 	wrctl	status,r2
  
  return context;
   16848:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1684c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   16850:	e0bffe17 	ldw	r2,-8(fp)
   16854:	10c00283 	ldbu	r3,10(r2)
   16858:	e0bfff17 	ldw	r2,-4(fp)
   1685c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   16860:	e0bffe17 	ldw	r2,-8(fp)
   16864:	108002c4 	addi	r2,r2,11
   16868:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1686c:	e0bfff17 	ldw	r2,-4(fp)
   16870:	10800084 	addi	r2,r2,2
   16874:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16878:	e03ffa05 	stb	zero,-24(fp)
   1687c:	00000b06 	br	168ac <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   16880:	e0bff917 	ldw	r2,-28(fp)
   16884:	10c00044 	addi	r3,r2,1
   16888:	e0fff915 	stw	r3,-28(fp)
   1688c:	e0fff817 	ldw	r3,-32(fp)
   16890:	19000044 	addi	r4,r3,1
   16894:	e13ff815 	stw	r4,-32(fp)
   16898:	18c00003 	ldbu	r3,0(r3)
   1689c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   168a0:	e0bffa03 	ldbu	r2,-24(fp)
   168a4:	10800044 	addi	r2,r2,1
   168a8:	e0bffa05 	stb	r2,-24(fp)
   168ac:	e0bffa03 	ldbu	r2,-24(fp)
   168b0:	108000f0 	cmpltui	r2,r2,3
   168b4:	103ff21e 	bne	r2,zero,16880 <__alt_mem_Flash_flash_data+0xf4016880>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   168b8:	e0bffe17 	ldw	r2,-8(fp)
   168bc:	10c0020b 	ldhu	r3,8(r2)
   168c0:	e0bfff17 	ldw	r2,-4(fp)
   168c4:	10c0000d 	sth	r3,0(r2)
   168c8:	e0bffb17 	ldw	r2,-20(fp)
   168cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168d0:	e0bffd17 	ldw	r2,-12(fp)
   168d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   168d8:	0005883a 	mov	r2,zero
}
   168dc:	e037883a 	mov	sp,fp
   168e0:	df000017 	ldw	fp,0(sp)
   168e4:	dec00104 	addi	sp,sp,4
   168e8:	f800283a 	ret

000168ec <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   168ec:	defff904 	addi	sp,sp,-28
   168f0:	df000615 	stw	fp,24(sp)
   168f4:	df000604 	addi	fp,sp,24
   168f8:	e13ffd15 	stw	r4,-12(fp)
   168fc:	2805883a 	mov	r2,r5
   16900:	e1bfff15 	stw	r6,-4(fp)
   16904:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16908:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1690c:	e0bfff17 	ldw	r2,-4(fp)
   16910:	1000011e 	bne	r2,zero,16918 <OSSemSet+0x2c>
        return;
   16914:	00003006 	br	169d8 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16918:	e0bffd17 	ldw	r2,-12(fp)
   1691c:	1000041e 	bne	r2,zero,16930 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16920:	e0bfff17 	ldw	r2,-4(fp)
   16924:	00c00104 	movi	r3,4
   16928:	10c00005 	stb	r3,0(r2)
        return;
   1692c:	00002a06 	br	169d8 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16930:	e0bffd17 	ldw	r2,-12(fp)
   16934:	10800003 	ldbu	r2,0(r2)
   16938:	10803fcc 	andi	r2,r2,255
   1693c:	108000e0 	cmpeqi	r2,r2,3
   16940:	1000041e 	bne	r2,zero,16954 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   16944:	e0bfff17 	ldw	r2,-4(fp)
   16948:	00c00044 	movi	r3,1
   1694c:	10c00005 	stb	r3,0(r2)
        return;
   16950:	00002106 	br	169d8 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16954:	0005303a 	rdctl	r2,status
   16958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1695c:	e0fffb17 	ldw	r3,-20(fp)
   16960:	00bfff84 	movi	r2,-2
   16964:	1884703a 	and	r2,r3,r2
   16968:	1001703a 	wrctl	status,r2
  
  return context;
   1696c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16970:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   16974:	e0bfff17 	ldw	r2,-4(fp)
   16978:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1697c:	e0bffd17 	ldw	r2,-12(fp)
   16980:	1080020b 	ldhu	r2,8(r2)
   16984:	10bfffcc 	andi	r2,r2,65535
   16988:	10000426 	beq	r2,zero,1699c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1698c:	e0bffd17 	ldw	r2,-12(fp)
   16990:	e0fffe0b 	ldhu	r3,-8(fp)
   16994:	10c0020d 	sth	r3,8(r2)
   16998:	00000b06 	br	169c8 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1699c:	e0bffd17 	ldw	r2,-12(fp)
   169a0:	10800283 	ldbu	r2,10(r2)
   169a4:	10803fcc 	andi	r2,r2,255
   169a8:	1000041e 	bne	r2,zero,169bc <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   169ac:	e0bffd17 	ldw	r2,-12(fp)
   169b0:	e0fffe0b 	ldhu	r3,-8(fp)
   169b4:	10c0020d 	sth	r3,8(r2)
   169b8:	00000306 	br	169c8 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   169bc:	e0bfff17 	ldw	r2,-4(fp)
   169c0:	00c01244 	movi	r3,73
   169c4:	10c00005 	stb	r3,0(r2)
   169c8:	e0bffa17 	ldw	r2,-24(fp)
   169cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169d0:	e0bffc17 	ldw	r2,-16(fp)
   169d4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   169d8:	e037883a 	mov	sp,fp
   169dc:	df000017 	ldw	fp,0(sp)
   169e0:	dec00104 	addi	sp,sp,4
   169e4:	f800283a 	ret

000169e8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   169e8:	defff104 	addi	sp,sp,-60
   169ec:	dfc00e15 	stw	ra,56(sp)
   169f0:	df000d15 	stw	fp,52(sp)
   169f4:	df000d04 	addi	fp,sp,52
   169f8:	2007883a 	mov	r3,r4
   169fc:	2805883a 	mov	r2,r5
   16a00:	e0fffe05 	stb	r3,-8(fp)
   16a04:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   16a08:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   16a0c:	e0bffe03 	ldbu	r2,-8(fp)
   16a10:	10800530 	cmpltui	r2,r2,20
   16a14:	1000051e 	bne	r2,zero,16a2c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   16a18:	e0bffe03 	ldbu	r2,-8(fp)
   16a1c:	10803fe0 	cmpeqi	r2,r2,255
   16a20:	1000021e 	bne	r2,zero,16a2c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   16a24:	00800a84 	movi	r2,42
   16a28:	00013a06 	br	16f14 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   16a2c:	e0bfff03 	ldbu	r2,-4(fp)
   16a30:	10800530 	cmpltui	r2,r2,20
   16a34:	1000021e 	bne	r2,zero,16a40 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   16a38:	00800a84 	movi	r2,42
   16a3c:	00013506 	br	16f14 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a40:	0005303a 	rdctl	r2,status
   16a44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a48:	e0fff917 	ldw	r3,-28(fp)
   16a4c:	00bfff84 	movi	r2,-2
   16a50:	1884703a 	and	r2,r3,r2
   16a54:	1001703a 	wrctl	status,r2
  
  return context;
   16a58:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16a5c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   16a60:	e0ffff03 	ldbu	r3,-4(fp)
   16a64:	008000b4 	movhi	r2,2
   16a68:	109f7104 	addi	r2,r2,32196
   16a6c:	18c7883a 	add	r3,r3,r3
   16a70:	18c7883a 	add	r3,r3,r3
   16a74:	10c5883a 	add	r2,r2,r3
   16a78:	10800017 	ldw	r2,0(r2)
   16a7c:	10000626 	beq	r2,zero,16a98 <OSTaskChangePrio+0xb0>
   16a80:	e0bff517 	ldw	r2,-44(fp)
   16a84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a88:	e0bffa17 	ldw	r2,-24(fp)
   16a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   16a90:	00800a04 	movi	r2,40
   16a94:	00011f06 	br	16f14 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   16a98:	e0bffe03 	ldbu	r2,-8(fp)
   16a9c:	10803fd8 	cmpnei	r2,r2,255
   16aa0:	1000051e 	bne	r2,zero,16ab8 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   16aa4:	008000b4 	movhi	r2,2
   16aa8:	1082e004 	addi	r2,r2,2944
   16aac:	10800017 	ldw	r2,0(r2)
   16ab0:	10800c83 	ldbu	r2,50(r2)
   16ab4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16ab8:	e0fffe03 	ldbu	r3,-8(fp)
   16abc:	008000b4 	movhi	r2,2
   16ac0:	109f7104 	addi	r2,r2,32196
   16ac4:	18c7883a 	add	r3,r3,r3
   16ac8:	18c7883a 	add	r3,r3,r3
   16acc:	10c5883a 	add	r2,r2,r3
   16ad0:	10800017 	ldw	r2,0(r2)
   16ad4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16ad8:	e0bff617 	ldw	r2,-40(fp)
   16adc:	1000061e 	bne	r2,zero,16af8 <OSTaskChangePrio+0x110>
   16ae0:	e0bff517 	ldw	r2,-44(fp)
   16ae4:	e0bffb15 	stw	r2,-20(fp)
   16ae8:	e0bffb17 	ldw	r2,-20(fp)
   16aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16af0:	00800a44 	movi	r2,41
   16af4:	00010706 	br	16f14 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16af8:	e0bff617 	ldw	r2,-40(fp)
   16afc:	10800058 	cmpnei	r2,r2,1
   16b00:	1000061e 	bne	r2,zero,16b1c <OSTaskChangePrio+0x134>
   16b04:	e0bff517 	ldw	r2,-44(fp)
   16b08:	e0bffc15 	stw	r2,-16(fp)
   16b0c:	e0bffc17 	ldw	r2,-16(fp)
   16b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16b14:	008010c4 	movi	r2,67
   16b18:	0000fe06 	br	16f14 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16b1c:	e0bfff03 	ldbu	r2,-4(fp)
   16b20:	1004d0fa 	srli	r2,r2,3
   16b24:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16b28:	e0bfff03 	ldbu	r2,-4(fp)
   16b2c:	108001cc 	andi	r2,r2,7
   16b30:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   16b34:	e0bff703 	ldbu	r2,-36(fp)
   16b38:	00c00044 	movi	r3,1
   16b3c:	1884983a 	sll	r2,r3,r2
   16b40:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16b44:	e0bff743 	ldbu	r2,-35(fp)
   16b48:	00c00044 	movi	r3,1
   16b4c:	1884983a 	sll	r2,r3,r2
   16b50:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   16b54:	e0fffe03 	ldbu	r3,-8(fp)
   16b58:	008000b4 	movhi	r2,2
   16b5c:	109f7104 	addi	r2,r2,32196
   16b60:	18c7883a 	add	r3,r3,r3
   16b64:	18c7883a 	add	r3,r3,r3
   16b68:	10c5883a 	add	r2,r2,r3
   16b6c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   16b70:	e0ffff03 	ldbu	r3,-4(fp)
   16b74:	008000b4 	movhi	r2,2
   16b78:	109f7104 	addi	r2,r2,32196
   16b7c:	18c7883a 	add	r3,r3,r3
   16b80:	18c7883a 	add	r3,r3,r3
   16b84:	10c5883a 	add	r2,r2,r3
   16b88:	e0fff617 	ldw	r3,-40(fp)
   16b8c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   16b90:	e0bff617 	ldw	r2,-40(fp)
   16b94:	10800d03 	ldbu	r2,52(r2)
   16b98:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   16b9c:	e0bff617 	ldw	r2,-40(fp)
   16ba0:	10800d83 	ldbu	r2,54(r2)
   16ba4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   16ba8:	e0bff617 	ldw	r2,-40(fp)
   16bac:	10800d43 	ldbu	r2,53(r2)
   16bb0:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16bb4:	e0fff803 	ldbu	r3,-32(fp)
   16bb8:	008000b4 	movhi	r2,2
   16bbc:	1082dd44 	addi	r2,r2,2933
   16bc0:	10c5883a 	add	r2,r2,r3
   16bc4:	10c00003 	ldbu	r3,0(r2)
   16bc8:	e0bff883 	ldbu	r2,-30(fp)
   16bcc:	1884703a 	and	r2,r3,r2
   16bd0:	10803fcc 	andi	r2,r2,255
   16bd4:	10003726 	beq	r2,zero,16cb4 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   16bd8:	e0fff803 	ldbu	r3,-32(fp)
   16bdc:	e13ff803 	ldbu	r4,-32(fp)
   16be0:	008000b4 	movhi	r2,2
   16be4:	1082dd44 	addi	r2,r2,2933
   16be8:	1105883a 	add	r2,r2,r4
   16bec:	10800003 	ldbu	r2,0(r2)
   16bf0:	1009883a 	mov	r4,r2
   16bf4:	e0bff883 	ldbu	r2,-30(fp)
   16bf8:	0084303a 	nor	r2,zero,r2
   16bfc:	2084703a 	and	r2,r4,r2
   16c00:	1009883a 	mov	r4,r2
   16c04:	008000b4 	movhi	r2,2
   16c08:	1082dd44 	addi	r2,r2,2933
   16c0c:	10c5883a 	add	r2,r2,r3
   16c10:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16c14:	e0fff803 	ldbu	r3,-32(fp)
   16c18:	008000b4 	movhi	r2,2
   16c1c:	1082dd44 	addi	r2,r2,2933
   16c20:	10c5883a 	add	r2,r2,r3
   16c24:	10800003 	ldbu	r2,0(r2)
   16c28:	10803fcc 	andi	r2,r2,255
   16c2c:	10000b1e 	bne	r2,zero,16c5c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   16c30:	e0bff843 	ldbu	r2,-31(fp)
   16c34:	0084303a 	nor	r2,zero,r2
   16c38:	1007883a 	mov	r3,r2
   16c3c:	008000b4 	movhi	r2,2
   16c40:	1082dd04 	addi	r2,r2,2932
   16c44:	10800003 	ldbu	r2,0(r2)
   16c48:	1884703a 	and	r2,r3,r2
   16c4c:	1007883a 	mov	r3,r2
   16c50:	008000b4 	movhi	r2,2
   16c54:	1082dd04 	addi	r2,r2,2932
   16c58:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16c5c:	008000b4 	movhi	r2,2
   16c60:	1082dd04 	addi	r2,r2,2932
   16c64:	10c00003 	ldbu	r3,0(r2)
   16c68:	e0bff783 	ldbu	r2,-34(fp)
   16c6c:	1884b03a 	or	r2,r3,r2
   16c70:	1007883a 	mov	r3,r2
   16c74:	008000b4 	movhi	r2,2
   16c78:	1082dd04 	addi	r2,r2,2932
   16c7c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   16c80:	e0fff703 	ldbu	r3,-36(fp)
   16c84:	e13ff703 	ldbu	r4,-36(fp)
   16c88:	008000b4 	movhi	r2,2
   16c8c:	1082dd44 	addi	r2,r2,2933
   16c90:	1105883a 	add	r2,r2,r4
   16c94:	11000003 	ldbu	r4,0(r2)
   16c98:	e0bff7c3 	ldbu	r2,-33(fp)
   16c9c:	2084b03a 	or	r2,r4,r2
   16ca0:	1009883a 	mov	r4,r2
   16ca4:	008000b4 	movhi	r2,2
   16ca8:	1082dd44 	addi	r2,r2,2933
   16cac:	10c5883a 	add	r2,r2,r3
   16cb0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   16cb4:	e0bff617 	ldw	r2,-40(fp)
   16cb8:	10800717 	ldw	r2,28(r2)
   16cbc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   16cc0:	e0bff317 	ldw	r2,-52(fp)
   16cc4:	10003326 	beq	r2,zero,16d94 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   16cc8:	e0bff803 	ldbu	r2,-32(fp)
   16ccc:	e0fff803 	ldbu	r3,-32(fp)
   16cd0:	e13ff317 	ldw	r4,-52(fp)
   16cd4:	20c7883a 	add	r3,r4,r3
   16cd8:	18c00204 	addi	r3,r3,8
   16cdc:	18c000c3 	ldbu	r3,3(r3)
   16ce0:	1809883a 	mov	r4,r3
   16ce4:	e0fff883 	ldbu	r3,-30(fp)
   16ce8:	00c6303a 	nor	r3,zero,r3
   16cec:	20c6703a 	and	r3,r4,r3
   16cf0:	1809883a 	mov	r4,r3
   16cf4:	e0fff317 	ldw	r3,-52(fp)
   16cf8:	1885883a 	add	r2,r3,r2
   16cfc:	10800204 	addi	r2,r2,8
   16d00:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   16d04:	e0bff803 	ldbu	r2,-32(fp)
   16d08:	e0fff317 	ldw	r3,-52(fp)
   16d0c:	1885883a 	add	r2,r3,r2
   16d10:	10800204 	addi	r2,r2,8
   16d14:	108000c3 	ldbu	r2,3(r2)
   16d18:	10803fcc 	andi	r2,r2,255
   16d1c:	1000091e 	bne	r2,zero,16d44 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   16d20:	e0bff317 	ldw	r2,-52(fp)
   16d24:	10800283 	ldbu	r2,10(r2)
   16d28:	1007883a 	mov	r3,r2
   16d2c:	e0bff843 	ldbu	r2,-31(fp)
   16d30:	0084303a 	nor	r2,zero,r2
   16d34:	1884703a 	and	r2,r3,r2
   16d38:	1007883a 	mov	r3,r2
   16d3c:	e0bff317 	ldw	r2,-52(fp)
   16d40:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16d44:	e0bff317 	ldw	r2,-52(fp)
   16d48:	10c00283 	ldbu	r3,10(r2)
   16d4c:	e0bff783 	ldbu	r2,-34(fp)
   16d50:	1884b03a 	or	r2,r3,r2
   16d54:	1007883a 	mov	r3,r2
   16d58:	e0bff317 	ldw	r2,-52(fp)
   16d5c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16d60:	e0bff703 	ldbu	r2,-36(fp)
   16d64:	e0fff703 	ldbu	r3,-36(fp)
   16d68:	e13ff317 	ldw	r4,-52(fp)
   16d6c:	20c7883a 	add	r3,r4,r3
   16d70:	18c00204 	addi	r3,r3,8
   16d74:	190000c3 	ldbu	r4,3(r3)
   16d78:	e0fff7c3 	ldbu	r3,-33(fp)
   16d7c:	20c6b03a 	or	r3,r4,r3
   16d80:	1809883a 	mov	r4,r3
   16d84:	e0fff317 	ldw	r3,-52(fp)
   16d88:	1885883a 	add	r2,r3,r2
   16d8c:	10800204 	addi	r2,r2,8
   16d90:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   16d94:	e0bff617 	ldw	r2,-40(fp)
   16d98:	10800817 	ldw	r2,32(r2)
   16d9c:	10004226 	beq	r2,zero,16ea8 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16da0:	e0bff617 	ldw	r2,-40(fp)
   16da4:	10800817 	ldw	r2,32(r2)
   16da8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   16dac:	e0bff417 	ldw	r2,-48(fp)
   16db0:	10800017 	ldw	r2,0(r2)
   16db4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   16db8:	00003906 	br	16ea0 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16dbc:	e0bff803 	ldbu	r2,-32(fp)
   16dc0:	e0fff803 	ldbu	r3,-32(fp)
   16dc4:	e13ff317 	ldw	r4,-52(fp)
   16dc8:	20c7883a 	add	r3,r4,r3
   16dcc:	18c00204 	addi	r3,r3,8
   16dd0:	18c000c3 	ldbu	r3,3(r3)
   16dd4:	1809883a 	mov	r4,r3
   16dd8:	e0fff883 	ldbu	r3,-30(fp)
   16ddc:	00c6303a 	nor	r3,zero,r3
   16de0:	20c6703a 	and	r3,r4,r3
   16de4:	1809883a 	mov	r4,r3
   16de8:	e0fff317 	ldw	r3,-52(fp)
   16dec:	1885883a 	add	r2,r3,r2
   16df0:	10800204 	addi	r2,r2,8
   16df4:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16df8:	e0bff803 	ldbu	r2,-32(fp)
   16dfc:	e0fff317 	ldw	r3,-52(fp)
   16e00:	1885883a 	add	r2,r3,r2
   16e04:	10800204 	addi	r2,r2,8
   16e08:	108000c3 	ldbu	r2,3(r2)
   16e0c:	10803fcc 	andi	r2,r2,255
   16e10:	1000091e 	bne	r2,zero,16e38 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   16e14:	e0bff317 	ldw	r2,-52(fp)
   16e18:	10800283 	ldbu	r2,10(r2)
   16e1c:	1007883a 	mov	r3,r2
   16e20:	e0bff843 	ldbu	r2,-31(fp)
   16e24:	0084303a 	nor	r2,zero,r2
   16e28:	1884703a 	and	r2,r3,r2
   16e2c:	1007883a 	mov	r3,r2
   16e30:	e0bff317 	ldw	r2,-52(fp)
   16e34:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16e38:	e0bff317 	ldw	r2,-52(fp)
   16e3c:	10c00283 	ldbu	r3,10(r2)
   16e40:	e0bff783 	ldbu	r2,-34(fp)
   16e44:	1884b03a 	or	r2,r3,r2
   16e48:	1007883a 	mov	r3,r2
   16e4c:	e0bff317 	ldw	r2,-52(fp)
   16e50:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16e54:	e0bff703 	ldbu	r2,-36(fp)
   16e58:	e0fff703 	ldbu	r3,-36(fp)
   16e5c:	e13ff317 	ldw	r4,-52(fp)
   16e60:	20c7883a 	add	r3,r4,r3
   16e64:	18c00204 	addi	r3,r3,8
   16e68:	190000c3 	ldbu	r4,3(r3)
   16e6c:	e0fff7c3 	ldbu	r3,-33(fp)
   16e70:	20c6b03a 	or	r3,r4,r3
   16e74:	1809883a 	mov	r4,r3
   16e78:	e0fff317 	ldw	r3,-52(fp)
   16e7c:	1885883a 	add	r2,r3,r2
   16e80:	10800204 	addi	r2,r2,8
   16e84:	110000c5 	stb	r4,3(r2)
            pevents++;
   16e88:	e0bff417 	ldw	r2,-48(fp)
   16e8c:	10800104 	addi	r2,r2,4
   16e90:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16e94:	e0bff417 	ldw	r2,-48(fp)
   16e98:	10800017 	ldw	r2,0(r2)
   16e9c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   16ea0:	e0bff317 	ldw	r2,-52(fp)
   16ea4:	103fc51e 	bne	r2,zero,16dbc <__alt_mem_Flash_flash_data+0xf4016dbc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16ea8:	e0bff617 	ldw	r2,-40(fp)
   16eac:	e0ffff03 	ldbu	r3,-4(fp)
   16eb0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16eb4:	e0bff617 	ldw	r2,-40(fp)
   16eb8:	e0fff703 	ldbu	r3,-36(fp)
   16ebc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16ec0:	e0bff617 	ldw	r2,-40(fp)
   16ec4:	e0fff743 	ldbu	r3,-35(fp)
   16ec8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16ecc:	e0bff617 	ldw	r2,-40(fp)
   16ed0:	e0fff783 	ldbu	r3,-34(fp)
   16ed4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16ed8:	e0bff617 	ldw	r2,-40(fp)
   16edc:	e0fff7c3 	ldbu	r3,-33(fp)
   16ee0:	10c00d45 	stb	r3,53(r2)
   16ee4:	e0bff517 	ldw	r2,-44(fp)
   16ee8:	e0bffd15 	stw	r2,-12(fp)
   16eec:	e0bffd17 	ldw	r2,-12(fp)
   16ef0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16ef4:	008000b4 	movhi	r2,2
   16ef8:	1082d144 	addi	r2,r2,2885
   16efc:	10800003 	ldbu	r2,0(r2)
   16f00:	10803fcc 	andi	r2,r2,255
   16f04:	10800058 	cmpnei	r2,r2,1
   16f08:	1000011e 	bne	r2,zero,16f10 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   16f0c:	00124cc0 	call	124cc <OS_Sched>
    }
    return (OS_ERR_NONE);
   16f10:	0005883a 	mov	r2,zero
}
   16f14:	e037883a 	mov	sp,fp
   16f18:	dfc00117 	ldw	ra,4(sp)
   16f1c:	df000017 	ldw	fp,0(sp)
   16f20:	dec00204 	addi	sp,sp,8
   16f24:	f800283a 	ret

00016f28 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16f28:	deffee04 	addi	sp,sp,-72
   16f2c:	dfc01115 	stw	ra,68(sp)
   16f30:	df001015 	stw	fp,64(sp)
   16f34:	df001004 	addi	fp,sp,64
   16f38:	e13ffc15 	stw	r4,-16(fp)
   16f3c:	e17ffd15 	stw	r5,-12(fp)
   16f40:	e1bffe15 	stw	r6,-8(fp)
   16f44:	3805883a 	mov	r2,r7
   16f48:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16f4c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16f50:	e0bfff03 	ldbu	r2,-4(fp)
   16f54:	10800570 	cmpltui	r2,r2,21
   16f58:	1000021e 	bne	r2,zero,16f64 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16f5c:	00800a84 	movi	r2,42
   16f60:	00005b06 	br	170d0 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f64:	0005303a 	rdctl	r2,status
   16f68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f6c:	e0fff617 	ldw	r3,-40(fp)
   16f70:	00bfff84 	movi	r2,-2
   16f74:	1884703a 	and	r2,r3,r2
   16f78:	1001703a 	wrctl	status,r2
  
  return context;
   16f7c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16f80:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16f84:	008000b4 	movhi	r2,2
   16f88:	1082df04 	addi	r2,r2,2940
   16f8c:	10800003 	ldbu	r2,0(r2)
   16f90:	10803fcc 	andi	r2,r2,255
   16f94:	10000626 	beq	r2,zero,16fb0 <OSTaskCreate+0x88>
   16f98:	e0bff317 	ldw	r2,-52(fp)
   16f9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fa0:	e0bff717 	ldw	r2,-36(fp)
   16fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16fa8:	00800f04 	movi	r2,60
   16fac:	00004806 	br	170d0 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16fb0:	e0ffff03 	ldbu	r3,-4(fp)
   16fb4:	008000b4 	movhi	r2,2
   16fb8:	109f7104 	addi	r2,r2,32196
   16fbc:	18c7883a 	add	r3,r3,r3
   16fc0:	18c7883a 	add	r3,r3,r3
   16fc4:	10c5883a 	add	r2,r2,r3
   16fc8:	10800017 	ldw	r2,0(r2)
   16fcc:	10003b1e 	bne	r2,zero,170bc <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16fd0:	e0ffff03 	ldbu	r3,-4(fp)
   16fd4:	008000b4 	movhi	r2,2
   16fd8:	109f7104 	addi	r2,r2,32196
   16fdc:	18c7883a 	add	r3,r3,r3
   16fe0:	18c7883a 	add	r3,r3,r3
   16fe4:	10c5883a 	add	r2,r2,r3
   16fe8:	00c00044 	movi	r3,1
   16fec:	10c00015 	stw	r3,0(r2)
   16ff0:	e0bff317 	ldw	r2,-52(fp)
   16ff4:	e0bff815 	stw	r2,-32(fp)
   16ff8:	e0bff817 	ldw	r2,-32(fp)
   16ffc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   17000:	e13ffc17 	ldw	r4,-16(fp)
   17004:	e17ffd17 	ldw	r5,-12(fp)
   17008:	e1bffe17 	ldw	r6,-8(fp)
   1700c:	000f883a 	mov	r7,zero
   17010:	001bbf40 	call	1bbf4 <OSTaskStkInit>
   17014:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   17018:	e0bfff03 	ldbu	r2,-4(fp)
   1701c:	d8000015 	stw	zero,0(sp)
   17020:	d8000115 	stw	zero,4(sp)
   17024:	d8000215 	stw	zero,8(sp)
   17028:	1009883a 	mov	r4,r2
   1702c:	e17ff417 	ldw	r5,-48(fp)
   17030:	000d883a 	mov	r6,zero
   17034:	000f883a 	mov	r7,zero
   17038:	00128d00 	call	128d0 <OS_TCBInit>
   1703c:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   17040:	e0bff503 	ldbu	r2,-44(fp)
   17044:	1000081e 	bne	r2,zero,17068 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   17048:	008000b4 	movhi	r2,2
   1704c:	1082d144 	addi	r2,r2,2885
   17050:	10800003 	ldbu	r2,0(r2)
   17054:	10803fcc 	andi	r2,r2,255
   17058:	10800058 	cmpnei	r2,r2,1
   1705c:	1000151e 	bne	r2,zero,170b4 <OSTaskCreate+0x18c>
                OS_Sched();
   17060:	00124cc0 	call	124cc <OS_Sched>
   17064:	00001306 	br	170b4 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17068:	0005303a 	rdctl	r2,status
   1706c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17070:	e0fff917 	ldw	r3,-28(fp)
   17074:	00bfff84 	movi	r2,-2
   17078:	1884703a 	and	r2,r3,r2
   1707c:	1001703a 	wrctl	status,r2
  
  return context;
   17080:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17084:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   17088:	e0ffff03 	ldbu	r3,-4(fp)
   1708c:	008000b4 	movhi	r2,2
   17090:	109f7104 	addi	r2,r2,32196
   17094:	18c7883a 	add	r3,r3,r3
   17098:	18c7883a 	add	r3,r3,r3
   1709c:	10c5883a 	add	r2,r2,r3
   170a0:	10000015 	stw	zero,0(r2)
   170a4:	e0bff317 	ldw	r2,-52(fp)
   170a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170ac:	e0bffa17 	ldw	r2,-24(fp)
   170b0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   170b4:	e0bff503 	ldbu	r2,-44(fp)
   170b8:	00000506 	br	170d0 <OSTaskCreate+0x1a8>
   170bc:	e0bff317 	ldw	r2,-52(fp)
   170c0:	e0bffb15 	stw	r2,-20(fp)
   170c4:	e0bffb17 	ldw	r2,-20(fp)
   170c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   170cc:	00800a04 	movi	r2,40
}
   170d0:	e037883a 	mov	sp,fp
   170d4:	dfc00117 	ldw	ra,4(sp)
   170d8:	df000017 	ldw	fp,0(sp)
   170dc:	dec00204 	addi	sp,sp,8
   170e0:	f800283a 	ret

000170e4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   170e4:	deffec04 	addi	sp,sp,-80
   170e8:	dfc01315 	stw	ra,76(sp)
   170ec:	df001215 	stw	fp,72(sp)
   170f0:	df001204 	addi	fp,sp,72
   170f4:	e13ffa15 	stw	r4,-24(fp)
   170f8:	e17ffb15 	stw	r5,-20(fp)
   170fc:	e1bffc15 	stw	r6,-16(fp)
   17100:	3809883a 	mov	r4,r7
   17104:	e0c00217 	ldw	r3,8(fp)
   17108:	e0800617 	ldw	r2,24(fp)
   1710c:	e13ffd05 	stb	r4,-12(fp)
   17110:	e0fffe0d 	sth	r3,-8(fp)
   17114:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   17118:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1711c:	e0bffd03 	ldbu	r2,-12(fp)
   17120:	10800570 	cmpltui	r2,r2,21
   17124:	1000021e 	bne	r2,zero,17130 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   17128:	00800a84 	movi	r2,42
   1712c:	00006306 	br	172bc <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17130:	0005303a 	rdctl	r2,status
   17134:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17138:	e0fff417 	ldw	r3,-48(fp)
   1713c:	00bfff84 	movi	r2,-2
   17140:	1884703a 	and	r2,r3,r2
   17144:	1001703a 	wrctl	status,r2
  
  return context;
   17148:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1714c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   17150:	008000b4 	movhi	r2,2
   17154:	1082df04 	addi	r2,r2,2940
   17158:	10800003 	ldbu	r2,0(r2)
   1715c:	10803fcc 	andi	r2,r2,255
   17160:	10000626 	beq	r2,zero,1717c <OSTaskCreateExt+0x98>
   17164:	e0bff117 	ldw	r2,-60(fp)
   17168:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1716c:	e0bff517 	ldw	r2,-44(fp)
   17170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   17174:	00800f04 	movi	r2,60
   17178:	00005006 	br	172bc <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1717c:	e0fffd03 	ldbu	r3,-12(fp)
   17180:	008000b4 	movhi	r2,2
   17184:	109f7104 	addi	r2,r2,32196
   17188:	18c7883a 	add	r3,r3,r3
   1718c:	18c7883a 	add	r3,r3,r3
   17190:	10c5883a 	add	r2,r2,r3
   17194:	10800017 	ldw	r2,0(r2)
   17198:	1000431e 	bne	r2,zero,172a8 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1719c:	e0fffd03 	ldbu	r3,-12(fp)
   171a0:	008000b4 	movhi	r2,2
   171a4:	109f7104 	addi	r2,r2,32196
   171a8:	18c7883a 	add	r3,r3,r3
   171ac:	18c7883a 	add	r3,r3,r3
   171b0:	10c5883a 	add	r2,r2,r3
   171b4:	00c00044 	movi	r3,1
   171b8:	10c00015 	stw	r3,0(r2)
   171bc:	e0bff117 	ldw	r2,-60(fp)
   171c0:	e0bff615 	stw	r2,-40(fp)
   171c4:	e0bff617 	ldw	r2,-40(fp)
   171c8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   171cc:	e0bfff0b 	ldhu	r2,-4(fp)
   171d0:	e1000317 	ldw	r4,12(fp)
   171d4:	e1400417 	ldw	r5,16(fp)
   171d8:	100d883a 	mov	r6,r2
   171dc:	00182700 	call	18270 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   171e0:	e0bfff0b 	ldhu	r2,-4(fp)
   171e4:	e13ffa17 	ldw	r4,-24(fp)
   171e8:	e17ffb17 	ldw	r5,-20(fp)
   171ec:	e1bffc17 	ldw	r6,-16(fp)
   171f0:	100f883a 	mov	r7,r2
   171f4:	001bbf40 	call	1bbf4 <OSTaskStkInit>
   171f8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   171fc:	e13ffd03 	ldbu	r4,-12(fp)
   17200:	e1fffe0b 	ldhu	r7,-8(fp)
   17204:	e0bfff0b 	ldhu	r2,-4(fp)
   17208:	e0c00417 	ldw	r3,16(fp)
   1720c:	d8c00015 	stw	r3,0(sp)
   17210:	e0c00517 	ldw	r3,20(fp)
   17214:	d8c00115 	stw	r3,4(sp)
   17218:	d8800215 	stw	r2,8(sp)
   1721c:	e17ff217 	ldw	r5,-56(fp)
   17220:	e1800317 	ldw	r6,12(fp)
   17224:	00128d00 	call	128d0 <OS_TCBInit>
   17228:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1722c:	e0bff303 	ldbu	r2,-52(fp)
   17230:	1000081e 	bne	r2,zero,17254 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   17234:	008000b4 	movhi	r2,2
   17238:	1082d144 	addi	r2,r2,2885
   1723c:	10800003 	ldbu	r2,0(r2)
   17240:	10803fcc 	andi	r2,r2,255
   17244:	10800058 	cmpnei	r2,r2,1
   17248:	1000151e 	bne	r2,zero,172a0 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1724c:	00124cc0 	call	124cc <OS_Sched>
   17250:	00001306 	br	172a0 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17254:	0005303a 	rdctl	r2,status
   17258:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1725c:	e0fff717 	ldw	r3,-36(fp)
   17260:	00bfff84 	movi	r2,-2
   17264:	1884703a 	and	r2,r3,r2
   17268:	1001703a 	wrctl	status,r2
  
  return context;
   1726c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17270:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   17274:	e0fffd03 	ldbu	r3,-12(fp)
   17278:	008000b4 	movhi	r2,2
   1727c:	109f7104 	addi	r2,r2,32196
   17280:	18c7883a 	add	r3,r3,r3
   17284:	18c7883a 	add	r3,r3,r3
   17288:	10c5883a 	add	r2,r2,r3
   1728c:	10000015 	stw	zero,0(r2)
   17290:	e0bff117 	ldw	r2,-60(fp)
   17294:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17298:	e0bff817 	ldw	r2,-32(fp)
   1729c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   172a0:	e0bff303 	ldbu	r2,-52(fp)
   172a4:	00000506 	br	172bc <OSTaskCreateExt+0x1d8>
   172a8:	e0bff117 	ldw	r2,-60(fp)
   172ac:	e0bff915 	stw	r2,-28(fp)
   172b0:	e0bff917 	ldw	r2,-28(fp)
   172b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   172b8:	00800a04 	movi	r2,40
}
   172bc:	e037883a 	mov	sp,fp
   172c0:	dfc00117 	ldw	ra,4(sp)
   172c4:	df000017 	ldw	fp,0(sp)
   172c8:	dec00204 	addi	sp,sp,8
   172cc:	f800283a 	ret

000172d0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   172d0:	defff404 	addi	sp,sp,-48
   172d4:	dfc00b15 	stw	ra,44(sp)
   172d8:	df000a15 	stw	fp,40(sp)
   172dc:	df000a04 	addi	fp,sp,40
   172e0:	2005883a 	mov	r2,r4
   172e4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   172e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   172ec:	008000b4 	movhi	r2,2
   172f0:	1082df04 	addi	r2,r2,2940
   172f4:	10800003 	ldbu	r2,0(r2)
   172f8:	10803fcc 	andi	r2,r2,255
   172fc:	10000226 	beq	r2,zero,17308 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   17300:	00801004 	movi	r2,64
   17304:	0000e506 	br	1769c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   17308:	e0bfff03 	ldbu	r2,-4(fp)
   1730c:	10800518 	cmpnei	r2,r2,20
   17310:	1000021e 	bne	r2,zero,1731c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   17314:	00800f84 	movi	r2,62
   17318:	0000e006 	br	1769c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1731c:	e0bfff03 	ldbu	r2,-4(fp)
   17320:	10800530 	cmpltui	r2,r2,20
   17324:	1000051e 	bne	r2,zero,1733c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   17328:	e0bfff03 	ldbu	r2,-4(fp)
   1732c:	10803fe0 	cmpeqi	r2,r2,255
   17330:	1000021e 	bne	r2,zero,1733c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   17334:	00800a84 	movi	r2,42
   17338:	0000d806 	br	1769c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1733c:	0005303a 	rdctl	r2,status
   17340:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17344:	e0fff917 	ldw	r3,-28(fp)
   17348:	00bfff84 	movi	r2,-2
   1734c:	1884703a 	and	r2,r3,r2
   17350:	1001703a 	wrctl	status,r2
  
  return context;
   17354:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   17358:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1735c:	e0bfff03 	ldbu	r2,-4(fp)
   17360:	10803fd8 	cmpnei	r2,r2,255
   17364:	1000051e 	bne	r2,zero,1737c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   17368:	008000b4 	movhi	r2,2
   1736c:	1082e004 	addi	r2,r2,2944
   17370:	10800017 	ldw	r2,0(r2)
   17374:	10800c83 	ldbu	r2,50(r2)
   17378:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1737c:	e0ffff03 	ldbu	r3,-4(fp)
   17380:	008000b4 	movhi	r2,2
   17384:	109f7104 	addi	r2,r2,32196
   17388:	18c7883a 	add	r3,r3,r3
   1738c:	18c7883a 	add	r3,r3,r3
   17390:	10c5883a 	add	r2,r2,r3
   17394:	10800017 	ldw	r2,0(r2)
   17398:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1739c:	e0bff717 	ldw	r2,-36(fp)
   173a0:	1000061e 	bne	r2,zero,173bc <OSTaskDel+0xec>
   173a4:	e0bff617 	ldw	r2,-40(fp)
   173a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173ac:	e0bffa17 	ldw	r2,-24(fp)
   173b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   173b4:	008010c4 	movi	r2,67
   173b8:	0000b806 	br	1769c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   173bc:	e0bff717 	ldw	r2,-36(fp)
   173c0:	10800058 	cmpnei	r2,r2,1
   173c4:	1000061e 	bne	r2,zero,173e0 <OSTaskDel+0x110>
   173c8:	e0bff617 	ldw	r2,-40(fp)
   173cc:	e0bffb15 	stw	r2,-20(fp)
   173d0:	e0bffb17 	ldw	r2,-20(fp)
   173d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   173d8:	00800f44 	movi	r2,61
   173dc:	0000af06 	br	1769c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   173e0:	e0bff717 	ldw	r2,-36(fp)
   173e4:	10800d03 	ldbu	r2,52(r2)
   173e8:	10c03fcc 	andi	r3,r2,255
   173ec:	e0bff717 	ldw	r2,-36(fp)
   173f0:	10800d03 	ldbu	r2,52(r2)
   173f4:	11003fcc 	andi	r4,r2,255
   173f8:	008000b4 	movhi	r2,2
   173fc:	1082dd44 	addi	r2,r2,2933
   17400:	1105883a 	add	r2,r2,r4
   17404:	10800003 	ldbu	r2,0(r2)
   17408:	1009883a 	mov	r4,r2
   1740c:	e0bff717 	ldw	r2,-36(fp)
   17410:	10800d43 	ldbu	r2,53(r2)
   17414:	0084303a 	nor	r2,zero,r2
   17418:	2084703a 	and	r2,r4,r2
   1741c:	1009883a 	mov	r4,r2
   17420:	008000b4 	movhi	r2,2
   17424:	1082dd44 	addi	r2,r2,2933
   17428:	10c5883a 	add	r2,r2,r3
   1742c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   17430:	e0bff717 	ldw	r2,-36(fp)
   17434:	10800d03 	ldbu	r2,52(r2)
   17438:	10c03fcc 	andi	r3,r2,255
   1743c:	008000b4 	movhi	r2,2
   17440:	1082dd44 	addi	r2,r2,2933
   17444:	10c5883a 	add	r2,r2,r3
   17448:	10800003 	ldbu	r2,0(r2)
   1744c:	10803fcc 	andi	r2,r2,255
   17450:	10000c1e 	bne	r2,zero,17484 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   17454:	e0bff717 	ldw	r2,-36(fp)
   17458:	10800d83 	ldbu	r2,54(r2)
   1745c:	0084303a 	nor	r2,zero,r2
   17460:	1007883a 	mov	r3,r2
   17464:	008000b4 	movhi	r2,2
   17468:	1082dd04 	addi	r2,r2,2932
   1746c:	10800003 	ldbu	r2,0(r2)
   17470:	1884703a 	and	r2,r3,r2
   17474:	1007883a 	mov	r3,r2
   17478:	008000b4 	movhi	r2,2
   1747c:	1082dd04 	addi	r2,r2,2932
   17480:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   17484:	e0bff717 	ldw	r2,-36(fp)
   17488:	10800717 	ldw	r2,28(r2)
   1748c:	10000526 	beq	r2,zero,174a4 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   17490:	e0bff717 	ldw	r2,-36(fp)
   17494:	10800717 	ldw	r2,28(r2)
   17498:	e13ff717 	ldw	r4,-36(fp)
   1749c:	100b883a 	mov	r5,r2
   174a0:	0011ea40 	call	11ea4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   174a4:	e0bff717 	ldw	r2,-36(fp)
   174a8:	10800817 	ldw	r2,32(r2)
   174ac:	10000526 	beq	r2,zero,174c4 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   174b0:	e0bff717 	ldw	r2,-36(fp)
   174b4:	10800817 	ldw	r2,32(r2)
   174b8:	e13ff717 	ldw	r4,-36(fp)
   174bc:	100b883a 	mov	r5,r2
   174c0:	0011f580 	call	11f58 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   174c4:	e0bff717 	ldw	r2,-36(fp)
   174c8:	10800a17 	ldw	r2,40(r2)
   174cc:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   174d0:	e0bff817 	ldw	r2,-32(fp)
   174d4:	10000226 	beq	r2,zero,174e0 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   174d8:	e13ff817 	ldw	r4,-32(fp)
   174dc:	00144ac0 	call	144ac <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   174e0:	e0bff717 	ldw	r2,-36(fp)
   174e4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   174e8:	e0bff717 	ldw	r2,-36(fp)
   174ec:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   174f0:	e0bff717 	ldw	r2,-36(fp)
   174f4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   174f8:	008000b4 	movhi	r2,2
   174fc:	1082d104 	addi	r2,r2,2884
   17500:	10800003 	ldbu	r2,0(r2)
   17504:	10803fcc 	andi	r2,r2,255
   17508:	10803fe0 	cmpeqi	r2,r2,255
   1750c:	1000081e 	bne	r2,zero,17530 <OSTaskDel+0x260>
        OSLockNesting++;
   17510:	008000b4 	movhi	r2,2
   17514:	1082d104 	addi	r2,r2,2884
   17518:	10800003 	ldbu	r2,0(r2)
   1751c:	10800044 	addi	r2,r2,1
   17520:	1007883a 	mov	r3,r2
   17524:	008000b4 	movhi	r2,2
   17528:	1082d104 	addi	r2,r2,2884
   1752c:	10c00005 	stb	r3,0(r2)
   17530:	e0bff617 	ldw	r2,-40(fp)
   17534:	e0bffc15 	stw	r2,-16(fp)
   17538:	e0bffc17 	ldw	r2,-16(fp)
   1753c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   17540:	0011a980 	call	11a98 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17544:	0005303a 	rdctl	r2,status
   17548:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1754c:	e0fffd17 	ldw	r3,-12(fp)
   17550:	00bfff84 	movi	r2,-2
   17554:	1884703a 	and	r2,r3,r2
   17558:	1001703a 	wrctl	status,r2
  
  return context;
   1755c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   17560:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   17564:	008000b4 	movhi	r2,2
   17568:	1082d104 	addi	r2,r2,2884
   1756c:	10800003 	ldbu	r2,0(r2)
   17570:	10803fcc 	andi	r2,r2,255
   17574:	10000826 	beq	r2,zero,17598 <OSTaskDel+0x2c8>
        OSLockNesting--;
   17578:	008000b4 	movhi	r2,2
   1757c:	1082d104 	addi	r2,r2,2884
   17580:	10800003 	ldbu	r2,0(r2)
   17584:	10bfffc4 	addi	r2,r2,-1
   17588:	1007883a 	mov	r3,r2
   1758c:	008000b4 	movhi	r2,2
   17590:	1082d104 	addi	r2,r2,2884
   17594:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   17598:	e13ff717 	ldw	r4,-36(fp)
   1759c:	001bd700 	call	1bd70 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   175a0:	008000b4 	movhi	r2,2
   175a4:	1082d944 	addi	r2,r2,2917
   175a8:	10800003 	ldbu	r2,0(r2)
   175ac:	10bfffc4 	addi	r2,r2,-1
   175b0:	1007883a 	mov	r3,r2
   175b4:	008000b4 	movhi	r2,2
   175b8:	1082d944 	addi	r2,r2,2917
   175bc:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   175c0:	e0ffff03 	ldbu	r3,-4(fp)
   175c4:	008000b4 	movhi	r2,2
   175c8:	109f7104 	addi	r2,r2,32196
   175cc:	18c7883a 	add	r3,r3,r3
   175d0:	18c7883a 	add	r3,r3,r3
   175d4:	10c5883a 	add	r2,r2,r3
   175d8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   175dc:	e0bff717 	ldw	r2,-36(fp)
   175e0:	10800617 	ldw	r2,24(r2)
   175e4:	1000091e 	bne	r2,zero,1760c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   175e8:	e0bff717 	ldw	r2,-36(fp)
   175ec:	10800517 	ldw	r2,20(r2)
   175f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   175f4:	e0bff717 	ldw	r2,-36(fp)
   175f8:	10c00517 	ldw	r3,20(r2)
   175fc:	008000b4 	movhi	r2,2
   17600:	1082d404 	addi	r2,r2,2896
   17604:	10c00015 	stw	r3,0(r2)
   17608:	00000a06 	br	17634 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1760c:	e0bff717 	ldw	r2,-36(fp)
   17610:	10800617 	ldw	r2,24(r2)
   17614:	e0fff717 	ldw	r3,-36(fp)
   17618:	18c00517 	ldw	r3,20(r3)
   1761c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   17620:	e0bff717 	ldw	r2,-36(fp)
   17624:	10800517 	ldw	r2,20(r2)
   17628:	e0fff717 	ldw	r3,-36(fp)
   1762c:	18c00617 	ldw	r3,24(r3)
   17630:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   17634:	008000b4 	movhi	r2,2
   17638:	1082d804 	addi	r2,r2,2912
   1763c:	10c00017 	ldw	r3,0(r2)
   17640:	e0bff717 	ldw	r2,-36(fp)
   17644:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   17648:	008000b4 	movhi	r2,2
   1764c:	1082d804 	addi	r2,r2,2912
   17650:	e0fff717 	ldw	r3,-36(fp)
   17654:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   17658:	e0bff717 	ldw	r2,-36(fp)
   1765c:	00c00fc4 	movi	r3,63
   17660:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   17664:	e0bff717 	ldw	r2,-36(fp)
   17668:	10001345 	stb	zero,77(r2)
   1766c:	e0bff617 	ldw	r2,-40(fp)
   17670:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17674:	e0bffe17 	ldw	r2,-8(fp)
   17678:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1767c:	008000b4 	movhi	r2,2
   17680:	1082d144 	addi	r2,r2,2885
   17684:	10800003 	ldbu	r2,0(r2)
   17688:	10803fcc 	andi	r2,r2,255
   1768c:	10800058 	cmpnei	r2,r2,1
   17690:	1000011e 	bne	r2,zero,17698 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   17694:	00124cc0 	call	124cc <OS_Sched>
    }
    return (OS_ERR_NONE);
   17698:	0005883a 	mov	r2,zero
}
   1769c:	e037883a 	mov	sp,fp
   176a0:	dfc00117 	ldw	ra,4(sp)
   176a4:	df000017 	ldw	fp,0(sp)
   176a8:	dec00204 	addi	sp,sp,8
   176ac:	f800283a 	ret

000176b0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   176b0:	defff504 	addi	sp,sp,-44
   176b4:	df000a15 	stw	fp,40(sp)
   176b8:	df000a04 	addi	fp,sp,40
   176bc:	2005883a 	mov	r2,r4
   176c0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   176c4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   176c8:	e0bfff03 	ldbu	r2,-4(fp)
   176cc:	10800518 	cmpnei	r2,r2,20
   176d0:	1000021e 	bne	r2,zero,176dc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   176d4:	00800f84 	movi	r2,62
   176d8:	00004706 	br	177f8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   176dc:	e0bfff03 	ldbu	r2,-4(fp)
   176e0:	10800530 	cmpltui	r2,r2,20
   176e4:	1000051e 	bne	r2,zero,176fc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   176e8:	e0bfff03 	ldbu	r2,-4(fp)
   176ec:	10803fe0 	cmpeqi	r2,r2,255
   176f0:	1000021e 	bne	r2,zero,176fc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   176f4:	00800a84 	movi	r2,42
   176f8:	00003f06 	br	177f8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   176fc:	e0bfff03 	ldbu	r2,-4(fp)
   17700:	10803fd8 	cmpnei	r2,r2,255
   17704:	1000131e 	bne	r2,zero,17754 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17708:	0005303a 	rdctl	r2,status
   1770c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17710:	e0fff917 	ldw	r3,-28(fp)
   17714:	00bfff84 	movi	r2,-2
   17718:	1884703a 	and	r2,r3,r2
   1771c:	1001703a 	wrctl	status,r2
  
  return context;
   17720:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   17724:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   17728:	008000b4 	movhi	r2,2
   1772c:	1082e004 	addi	r2,r2,2944
   17730:	10800017 	ldw	r2,0(r2)
   17734:	10800dc3 	ldbu	r2,55(r2)
   17738:	e0bff705 	stb	r2,-36(fp)
   1773c:	e0bff617 	ldw	r2,-40(fp)
   17740:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17744:	e0bffa17 	ldw	r2,-24(fp)
   17748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1774c:	e0bff703 	ldbu	r2,-36(fp)
   17750:	00002906 	br	177f8 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17754:	0005303a 	rdctl	r2,status
   17758:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1775c:	e0fffb17 	ldw	r3,-20(fp)
   17760:	00bfff84 	movi	r2,-2
   17764:	1884703a 	and	r2,r3,r2
   17768:	1001703a 	wrctl	status,r2
  
  return context;
   1776c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17770:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17774:	e0ffff03 	ldbu	r3,-4(fp)
   17778:	008000b4 	movhi	r2,2
   1777c:	109f7104 	addi	r2,r2,32196
   17780:	18c7883a 	add	r3,r3,r3
   17784:	18c7883a 	add	r3,r3,r3
   17788:	10c5883a 	add	r2,r2,r3
   1778c:	10800017 	ldw	r2,0(r2)
   17790:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   17794:	e0bff817 	ldw	r2,-32(fp)
   17798:	1000061e 	bne	r2,zero,177b4 <OSTaskDelReq+0x104>
   1779c:	e0bff617 	ldw	r2,-40(fp)
   177a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177a4:	e0bffc17 	ldw	r2,-16(fp)
   177a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   177ac:	008010c4 	movi	r2,67
   177b0:	00001106 	br	177f8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   177b4:	e0bff817 	ldw	r2,-32(fp)
   177b8:	10800058 	cmpnei	r2,r2,1
   177bc:	1000061e 	bne	r2,zero,177d8 <OSTaskDelReq+0x128>
   177c0:	e0bff617 	ldw	r2,-40(fp)
   177c4:	e0bffd15 	stw	r2,-12(fp)
   177c8:	e0bffd17 	ldw	r2,-12(fp)
   177cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   177d0:	00800f44 	movi	r2,61
   177d4:	00000806 	br	177f8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   177d8:	e0bff817 	ldw	r2,-32(fp)
   177dc:	00c00fc4 	movi	r3,63
   177e0:	10c00dc5 	stb	r3,55(r2)
   177e4:	e0bff617 	ldw	r2,-40(fp)
   177e8:	e0bffe15 	stw	r2,-8(fp)
   177ec:	e0bffe17 	ldw	r2,-8(fp)
   177f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   177f4:	0005883a 	mov	r2,zero
}
   177f8:	e037883a 	mov	sp,fp
   177fc:	df000017 	ldw	fp,0(sp)
   17800:	dec00104 	addi	sp,sp,4
   17804:	f800283a 	ret

00017808 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17808:	defff404 	addi	sp,sp,-48
   1780c:	dfc00b15 	stw	ra,44(sp)
   17810:	df000a15 	stw	fp,40(sp)
   17814:	df000a04 	addi	fp,sp,40
   17818:	2005883a 	mov	r2,r4
   1781c:	e17ffe15 	stw	r5,-8(fp)
   17820:	e1bfff15 	stw	r6,-4(fp)
   17824:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   17828:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1782c:	e0bfff17 	ldw	r2,-4(fp)
   17830:	1000021e 	bne	r2,zero,1783c <OSTaskNameGet+0x34>
        return (0);
   17834:	0005883a 	mov	r2,zero
   17838:	00005806 	br	1799c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1783c:	e0bffd03 	ldbu	r2,-12(fp)
   17840:	10800570 	cmpltui	r2,r2,21
   17844:	1000081e 	bne	r2,zero,17868 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   17848:	e0bffd03 	ldbu	r2,-12(fp)
   1784c:	10803fe0 	cmpeqi	r2,r2,255
   17850:	1000051e 	bne	r2,zero,17868 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   17854:	e0bfff17 	ldw	r2,-4(fp)
   17858:	00c00a84 	movi	r3,42
   1785c:	10c00005 	stb	r3,0(r2)
            return (0);
   17860:	0005883a 	mov	r2,zero
   17864:	00004d06 	br	1799c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   17868:	e0bffe17 	ldw	r2,-8(fp)
   1786c:	1000051e 	bne	r2,zero,17884 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	00c00304 	movi	r3,12
   17878:	10c00005 	stb	r3,0(r2)
        return (0);
   1787c:	0005883a 	mov	r2,zero
   17880:	00004606 	br	1799c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   17884:	008000b4 	movhi	r2,2
   17888:	1082df04 	addi	r2,r2,2940
   1788c:	10800003 	ldbu	r2,0(r2)
   17890:	10803fcc 	andi	r2,r2,255
   17894:	10000526 	beq	r2,zero,178ac <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   17898:	e0bfff17 	ldw	r2,-4(fp)
   1789c:	00c00444 	movi	r3,17
   178a0:	10c00005 	stb	r3,0(r2)
        return (0);
   178a4:	0005883a 	mov	r2,zero
   178a8:	00003c06 	br	1799c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178ac:	0005303a 	rdctl	r2,status
   178b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178b4:	e0fff917 	ldw	r3,-28(fp)
   178b8:	00bfff84 	movi	r2,-2
   178bc:	1884703a 	and	r2,r3,r2
   178c0:	1001703a 	wrctl	status,r2
  
  return context;
   178c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   178c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   178cc:	e0bffd03 	ldbu	r2,-12(fp)
   178d0:	10803fd8 	cmpnei	r2,r2,255
   178d4:	1000051e 	bne	r2,zero,178ec <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   178d8:	008000b4 	movhi	r2,2
   178dc:	1082e004 	addi	r2,r2,2944
   178e0:	10800017 	ldw	r2,0(r2)
   178e4:	10800c83 	ldbu	r2,50(r2)
   178e8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   178ec:	e0fffd03 	ldbu	r3,-12(fp)
   178f0:	008000b4 	movhi	r2,2
   178f4:	109f7104 	addi	r2,r2,32196
   178f8:	18c7883a 	add	r3,r3,r3
   178fc:	18c7883a 	add	r3,r3,r3
   17900:	10c5883a 	add	r2,r2,r3
   17904:	10800017 	ldw	r2,0(r2)
   17908:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1790c:	e0bff717 	ldw	r2,-36(fp)
   17910:	1000091e 	bne	r2,zero,17938 <OSTaskNameGet+0x130>
   17914:	e0bff617 	ldw	r2,-40(fp)
   17918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1791c:	e0bffa17 	ldw	r2,-24(fp)
   17920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17924:	e0bfff17 	ldw	r2,-4(fp)
   17928:	00c010c4 	movi	r3,67
   1792c:	10c00005 	stb	r3,0(r2)
        return (0);
   17930:	0005883a 	mov	r2,zero
   17934:	00001906 	br	1799c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   17938:	e0bff717 	ldw	r2,-36(fp)
   1793c:	10800058 	cmpnei	r2,r2,1
   17940:	1000091e 	bne	r2,zero,17968 <OSTaskNameGet+0x160>
   17944:	e0bff617 	ldw	r2,-40(fp)
   17948:	e0bffb15 	stw	r2,-20(fp)
   1794c:	e0bffb17 	ldw	r2,-20(fp)
   17950:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17954:	e0bfff17 	ldw	r2,-4(fp)
   17958:	00c010c4 	movi	r3,67
   1795c:	10c00005 	stb	r3,0(r2)
        return (0);
   17960:	0005883a 	mov	r2,zero
   17964:	00000d06 	br	1799c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   17968:	e0bff717 	ldw	r2,-36(fp)
   1796c:	10801304 	addi	r2,r2,76
   17970:	e13ffe17 	ldw	r4,-8(fp)
   17974:	100b883a 	mov	r5,r2
   17978:	00126080 	call	12608 <OS_StrCopy>
   1797c:	e0bff805 	stb	r2,-32(fp)
   17980:	e0bff617 	ldw	r2,-40(fp)
   17984:	e0bffc15 	stw	r2,-16(fp)
   17988:	e0bffc17 	ldw	r2,-16(fp)
   1798c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17990:	e0bfff17 	ldw	r2,-4(fp)
   17994:	10000005 	stb	zero,0(r2)
    return (len);
   17998:	e0bff803 	ldbu	r2,-32(fp)
}
   1799c:	e037883a 	mov	sp,fp
   179a0:	dfc00117 	ldw	ra,4(sp)
   179a4:	df000017 	ldw	fp,0(sp)
   179a8:	dec00204 	addi	sp,sp,8
   179ac:	f800283a 	ret

000179b0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   179b0:	defff304 	addi	sp,sp,-52
   179b4:	dfc00c15 	stw	ra,48(sp)
   179b8:	df000b15 	stw	fp,44(sp)
   179bc:	df000b04 	addi	fp,sp,44
   179c0:	2005883a 	mov	r2,r4
   179c4:	e17ffe15 	stw	r5,-8(fp)
   179c8:	e1bfff15 	stw	r6,-4(fp)
   179cc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   179d0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   179d4:	e0bfff17 	ldw	r2,-4(fp)
   179d8:	1000011e 	bne	r2,zero,179e0 <OSTaskNameSet+0x30>
        return;
   179dc:	00005f06 	br	17b5c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   179e0:	e0bffd03 	ldbu	r2,-12(fp)
   179e4:	10800570 	cmpltui	r2,r2,21
   179e8:	1000071e 	bne	r2,zero,17a08 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   179ec:	e0bffd03 	ldbu	r2,-12(fp)
   179f0:	10803fe0 	cmpeqi	r2,r2,255
   179f4:	1000041e 	bne	r2,zero,17a08 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   179f8:	e0bfff17 	ldw	r2,-4(fp)
   179fc:	00c00a84 	movi	r3,42
   17a00:	10c00005 	stb	r3,0(r2)
            return;
   17a04:	00005506 	br	17b5c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   17a08:	e0bffe17 	ldw	r2,-8(fp)
   17a0c:	1000041e 	bne	r2,zero,17a20 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   17a10:	e0bfff17 	ldw	r2,-4(fp)
   17a14:	00c00304 	movi	r3,12
   17a18:	10c00005 	stb	r3,0(r2)
        return;
   17a1c:	00004f06 	br	17b5c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   17a20:	008000b4 	movhi	r2,2
   17a24:	1082df04 	addi	r2,r2,2940
   17a28:	10800003 	ldbu	r2,0(r2)
   17a2c:	10803fcc 	andi	r2,r2,255
   17a30:	10000426 	beq	r2,zero,17a44 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   17a34:	e0bfff17 	ldw	r2,-4(fp)
   17a38:	00c00484 	movi	r3,18
   17a3c:	10c00005 	stb	r3,0(r2)
        return;
   17a40:	00004606 	br	17b5c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a44:	0005303a 	rdctl	r2,status
   17a48:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a4c:	e0fff817 	ldw	r3,-32(fp)
   17a50:	00bfff84 	movi	r2,-2
   17a54:	1884703a 	and	r2,r3,r2
   17a58:	1001703a 	wrctl	status,r2
  
  return context;
   17a5c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17a60:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   17a64:	e0bffd03 	ldbu	r2,-12(fp)
   17a68:	10803fd8 	cmpnei	r2,r2,255
   17a6c:	1000051e 	bne	r2,zero,17a84 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   17a70:	008000b4 	movhi	r2,2
   17a74:	1082e004 	addi	r2,r2,2944
   17a78:	10800017 	ldw	r2,0(r2)
   17a7c:	10800c83 	ldbu	r2,50(r2)
   17a80:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17a84:	e0fffd03 	ldbu	r3,-12(fp)
   17a88:	008000b4 	movhi	r2,2
   17a8c:	109f7104 	addi	r2,r2,32196
   17a90:	18c7883a 	add	r3,r3,r3
   17a94:	18c7883a 	add	r3,r3,r3
   17a98:	10c5883a 	add	r2,r2,r3
   17a9c:	10800017 	ldw	r2,0(r2)
   17aa0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   17aa4:	e0bff617 	ldw	r2,-40(fp)
   17aa8:	1000081e 	bne	r2,zero,17acc <OSTaskNameSet+0x11c>
   17aac:	e0bff517 	ldw	r2,-44(fp)
   17ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ab4:	e0bff917 	ldw	r2,-28(fp)
   17ab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17abc:	e0bfff17 	ldw	r2,-4(fp)
   17ac0:	00c010c4 	movi	r3,67
   17ac4:	10c00005 	stb	r3,0(r2)
        return;
   17ac8:	00002406 	br	17b5c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   17acc:	e0bff617 	ldw	r2,-40(fp)
   17ad0:	10800058 	cmpnei	r2,r2,1
   17ad4:	1000081e 	bne	r2,zero,17af8 <OSTaskNameSet+0x148>
   17ad8:	e0bff517 	ldw	r2,-44(fp)
   17adc:	e0bffa15 	stw	r2,-24(fp)
   17ae0:	e0bffa17 	ldw	r2,-24(fp)
   17ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17ae8:	e0bfff17 	ldw	r2,-4(fp)
   17aec:	00c010c4 	movi	r3,67
   17af0:	10c00005 	stb	r3,0(r2)
        return;
   17af4:	00001906 	br	17b5c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   17af8:	e13ffe17 	ldw	r4,-8(fp)
   17afc:	001267c0 	call	1267c <OS_StrLen>
   17b00:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17b04:	e0bff703 	ldbu	r2,-36(fp)
   17b08:	10800830 	cmpltui	r2,r2,32
   17b0c:	1000081e 	bne	r2,zero,17b30 <OSTaskNameSet+0x180>
   17b10:	e0bff517 	ldw	r2,-44(fp)
   17b14:	e0bffb15 	stw	r2,-20(fp)
   17b18:	e0bffb17 	ldw	r2,-20(fp)
   17b1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17b20:	e0bfff17 	ldw	r2,-4(fp)
   17b24:	00c01044 	movi	r3,65
   17b28:	10c00005 	stb	r3,0(r2)
        return;
   17b2c:	00000b06 	br	17b5c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17b30:	e0bff617 	ldw	r2,-40(fp)
   17b34:	10801304 	addi	r2,r2,76
   17b38:	1009883a 	mov	r4,r2
   17b3c:	e17ffe17 	ldw	r5,-8(fp)
   17b40:	00126080 	call	12608 <OS_StrCopy>
   17b44:	e0bff517 	ldw	r2,-44(fp)
   17b48:	e0bffc15 	stw	r2,-16(fp)
   17b4c:	e0bffc17 	ldw	r2,-16(fp)
   17b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17b54:	e0bfff17 	ldw	r2,-4(fp)
   17b58:	10000005 	stb	zero,0(r2)
}
   17b5c:	e037883a 	mov	sp,fp
   17b60:	dfc00117 	ldw	ra,4(sp)
   17b64:	df000017 	ldw	fp,0(sp)
   17b68:	dec00204 	addi	sp,sp,8
   17b6c:	f800283a 	ret

00017b70 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17b70:	defff404 	addi	sp,sp,-48
   17b74:	dfc00b15 	stw	ra,44(sp)
   17b78:	df000a15 	stw	fp,40(sp)
   17b7c:	df000a04 	addi	fp,sp,40
   17b80:	2005883a 	mov	r2,r4
   17b84:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17b88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   17b8c:	e0bfff03 	ldbu	r2,-4(fp)
   17b90:	10800530 	cmpltui	r2,r2,20
   17b94:	1000021e 	bne	r2,zero,17ba0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17b98:	00800a84 	movi	r2,42
   17b9c:	00006d06 	br	17d54 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ba0:	0005303a 	rdctl	r2,status
   17ba4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ba8:	e0fff817 	ldw	r3,-32(fp)
   17bac:	00bfff84 	movi	r2,-2
   17bb0:	1884703a 	and	r2,r3,r2
   17bb4:	1001703a 	wrctl	status,r2
  
  return context;
   17bb8:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17bbc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17bc0:	e0ffff03 	ldbu	r3,-4(fp)
   17bc4:	008000b4 	movhi	r2,2
   17bc8:	109f7104 	addi	r2,r2,32196
   17bcc:	18c7883a 	add	r3,r3,r3
   17bd0:	18c7883a 	add	r3,r3,r3
   17bd4:	10c5883a 	add	r2,r2,r3
   17bd8:	10800017 	ldw	r2,0(r2)
   17bdc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   17be0:	e0bff717 	ldw	r2,-36(fp)
   17be4:	1000061e 	bne	r2,zero,17c00 <OSTaskResume+0x90>
   17be8:	e0bff617 	ldw	r2,-40(fp)
   17bec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17bf0:	e0bff917 	ldw	r2,-28(fp)
   17bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17bf8:	00801184 	movi	r2,70
   17bfc:	00005506 	br	17d54 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   17c00:	e0bff717 	ldw	r2,-36(fp)
   17c04:	10800058 	cmpnei	r2,r2,1
   17c08:	1000061e 	bne	r2,zero,17c24 <OSTaskResume+0xb4>
   17c0c:	e0bff617 	ldw	r2,-40(fp)
   17c10:	e0bffa15 	stw	r2,-24(fp)
   17c14:	e0bffa17 	ldw	r2,-24(fp)
   17c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17c1c:	008010c4 	movi	r2,67
   17c20:	00004c06 	br	17d54 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17c24:	e0bff717 	ldw	r2,-36(fp)
   17c28:	10800c03 	ldbu	r2,48(r2)
   17c2c:	10803fcc 	andi	r2,r2,255
   17c30:	1080020c 	andi	r2,r2,8
   17c34:	10004226 	beq	r2,zero,17d40 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17c38:	e0bff717 	ldw	r2,-36(fp)
   17c3c:	10c00c03 	ldbu	r3,48(r2)
   17c40:	00bffdc4 	movi	r2,-9
   17c44:	1884703a 	and	r2,r3,r2
   17c48:	1007883a 	mov	r3,r2
   17c4c:	e0bff717 	ldw	r2,-36(fp)
   17c50:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17c54:	e0bff717 	ldw	r2,-36(fp)
   17c58:	10800c03 	ldbu	r2,48(r2)
   17c5c:	10803fcc 	andi	r2,r2,255
   17c60:	1000311e 	bne	r2,zero,17d28 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   17c64:	e0bff717 	ldw	r2,-36(fp)
   17c68:	10800b8b 	ldhu	r2,46(r2)
   17c6c:	10bfffcc 	andi	r2,r2,65535
   17c70:	1000281e 	bne	r2,zero,17d14 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   17c74:	e0bff717 	ldw	r2,-36(fp)
   17c78:	10c00d83 	ldbu	r3,54(r2)
   17c7c:	008000b4 	movhi	r2,2
   17c80:	1082dd04 	addi	r2,r2,2932
   17c84:	10800003 	ldbu	r2,0(r2)
   17c88:	1884b03a 	or	r2,r3,r2
   17c8c:	1007883a 	mov	r3,r2
   17c90:	008000b4 	movhi	r2,2
   17c94:	1082dd04 	addi	r2,r2,2932
   17c98:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17c9c:	e0bff717 	ldw	r2,-36(fp)
   17ca0:	10800d03 	ldbu	r2,52(r2)
   17ca4:	10c03fcc 	andi	r3,r2,255
   17ca8:	e0bff717 	ldw	r2,-36(fp)
   17cac:	10800d03 	ldbu	r2,52(r2)
   17cb0:	11003fcc 	andi	r4,r2,255
   17cb4:	008000b4 	movhi	r2,2
   17cb8:	1082dd44 	addi	r2,r2,2933
   17cbc:	1105883a 	add	r2,r2,r4
   17cc0:	11000003 	ldbu	r4,0(r2)
   17cc4:	e0bff717 	ldw	r2,-36(fp)
   17cc8:	10800d43 	ldbu	r2,53(r2)
   17ccc:	2084b03a 	or	r2,r4,r2
   17cd0:	1009883a 	mov	r4,r2
   17cd4:	008000b4 	movhi	r2,2
   17cd8:	1082dd44 	addi	r2,r2,2933
   17cdc:	10c5883a 	add	r2,r2,r3
   17ce0:	11000005 	stb	r4,0(r2)
   17ce4:	e0bff617 	ldw	r2,-40(fp)
   17ce8:	e0bffb15 	stw	r2,-20(fp)
   17cec:	e0bffb17 	ldw	r2,-20(fp)
   17cf0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   17cf4:	008000b4 	movhi	r2,2
   17cf8:	1082d144 	addi	r2,r2,2885
   17cfc:	10800003 	ldbu	r2,0(r2)
   17d00:	10803fcc 	andi	r2,r2,255
   17d04:	10800058 	cmpnei	r2,r2,1
   17d08:	10000b1e 	bne	r2,zero,17d38 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   17d0c:	00124cc0 	call	124cc <OS_Sched>
   17d10:	00000906 	br	17d38 <OSTaskResume+0x1c8>
   17d14:	e0bff617 	ldw	r2,-40(fp)
   17d18:	e0bffc15 	stw	r2,-16(fp)
   17d1c:	e0bffc17 	ldw	r2,-16(fp)
   17d20:	1001703a 	wrctl	status,r2
   17d24:	00000406 	br	17d38 <OSTaskResume+0x1c8>
   17d28:	e0bff617 	ldw	r2,-40(fp)
   17d2c:	e0bffd15 	stw	r2,-12(fp)
   17d30:	e0bffd17 	ldw	r2,-12(fp)
   17d34:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   17d38:	0005883a 	mov	r2,zero
   17d3c:	00000506 	br	17d54 <OSTaskResume+0x1e4>
   17d40:	e0bff617 	ldw	r2,-40(fp)
   17d44:	e0bffe15 	stw	r2,-8(fp)
   17d48:	e0bffe17 	ldw	r2,-8(fp)
   17d4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17d50:	00801104 	movi	r2,68
}
   17d54:	e037883a 	mov	sp,fp
   17d58:	dfc00117 	ldw	ra,4(sp)
   17d5c:	df000017 	ldw	fp,0(sp)
   17d60:	dec00204 	addi	sp,sp,8
   17d64:	f800283a 	ret

00017d68 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17d68:	defff304 	addi	sp,sp,-52
   17d6c:	df000c15 	stw	fp,48(sp)
   17d70:	df000c04 	addi	fp,sp,48
   17d74:	2005883a 	mov	r2,r4
   17d78:	e17fff15 	stw	r5,-4(fp)
   17d7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17d80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   17d84:	e0bffe03 	ldbu	r2,-8(fp)
   17d88:	10800570 	cmpltui	r2,r2,21
   17d8c:	1000051e 	bne	r2,zero,17da4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17d90:	e0bffe03 	ldbu	r2,-8(fp)
   17d94:	10803fe0 	cmpeqi	r2,r2,255
   17d98:	1000021e 	bne	r2,zero,17da4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   17d9c:	00800a84 	movi	r2,42
   17da0:	00005f06 	br	17f20 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   17da4:	e0bfff17 	ldw	r2,-4(fp)
   17da8:	1000021e 	bne	r2,zero,17db4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   17dac:	00800244 	movi	r2,9
   17db0:	00005b06 	br	17f20 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   17db4:	e0bfff17 	ldw	r2,-4(fp)
   17db8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   17dbc:	e0bfff17 	ldw	r2,-4(fp)
   17dc0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dc4:	0005303a 	rdctl	r2,status
   17dc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17dcc:	e0fff917 	ldw	r3,-28(fp)
   17dd0:	00bfff84 	movi	r2,-2
   17dd4:	1884703a 	and	r2,r3,r2
   17dd8:	1001703a 	wrctl	status,r2
  
  return context;
   17ddc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17de0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   17de4:	e0bffe03 	ldbu	r2,-8(fp)
   17de8:	10803fd8 	cmpnei	r2,r2,255
   17dec:	1000051e 	bne	r2,zero,17e04 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17df0:	008000b4 	movhi	r2,2
   17df4:	1082e004 	addi	r2,r2,2944
   17df8:	10800017 	ldw	r2,0(r2)
   17dfc:	10800c83 	ldbu	r2,50(r2)
   17e00:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17e04:	e0fffe03 	ldbu	r3,-8(fp)
   17e08:	008000b4 	movhi	r2,2
   17e0c:	109f7104 	addi	r2,r2,32196
   17e10:	18c7883a 	add	r3,r3,r3
   17e14:	18c7883a 	add	r3,r3,r3
   17e18:	10c5883a 	add	r2,r2,r3
   17e1c:	10800017 	ldw	r2,0(r2)
   17e20:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   17e24:	e0bff717 	ldw	r2,-36(fp)
   17e28:	1000061e 	bne	r2,zero,17e44 <OSTaskStkChk+0xdc>
   17e2c:	e0bff617 	ldw	r2,-40(fp)
   17e30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e34:	e0bffa17 	ldw	r2,-24(fp)
   17e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17e3c:	008010c4 	movi	r2,67
   17e40:	00003706 	br	17f20 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17e44:	e0bff717 	ldw	r2,-36(fp)
   17e48:	10800058 	cmpnei	r2,r2,1
   17e4c:	1000061e 	bne	r2,zero,17e68 <OSTaskStkChk+0x100>
   17e50:	e0bff617 	ldw	r2,-40(fp)
   17e54:	e0bffb15 	stw	r2,-20(fp)
   17e58:	e0bffb17 	ldw	r2,-20(fp)
   17e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17e60:	008010c4 	movi	r2,67
   17e64:	00002e06 	br	17f20 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17e68:	e0bff717 	ldw	r2,-36(fp)
   17e6c:	1080040b 	ldhu	r2,16(r2)
   17e70:	10bfffcc 	andi	r2,r2,65535
   17e74:	1080004c 	andi	r2,r2,1
   17e78:	1000061e 	bne	r2,zero,17e94 <OSTaskStkChk+0x12c>
   17e7c:	e0bff617 	ldw	r2,-40(fp)
   17e80:	e0bffc15 	stw	r2,-16(fp)
   17e84:	e0bffc17 	ldw	r2,-16(fp)
   17e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17e8c:	00801144 	movi	r2,69
   17e90:	00002306 	br	17f20 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   17e94:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   17e98:	e0bff717 	ldw	r2,-36(fp)
   17e9c:	10800317 	ldw	r2,12(r2)
   17ea0:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17ea4:	e0bff717 	ldw	r2,-36(fp)
   17ea8:	10800217 	ldw	r2,8(r2)
   17eac:	e0bff415 	stw	r2,-48(fp)
   17eb0:	e0bff617 	ldw	r2,-40(fp)
   17eb4:	e0bffd15 	stw	r2,-12(fp)
   17eb8:	e0bffd17 	ldw	r2,-12(fp)
   17ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17ec0:	00000306 	br	17ed0 <OSTaskStkChk+0x168>
        nfree++;
   17ec4:	e0bff517 	ldw	r2,-44(fp)
   17ec8:	10800044 	addi	r2,r2,1
   17ecc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17ed0:	e0bff417 	ldw	r2,-48(fp)
   17ed4:	10c00104 	addi	r3,r2,4
   17ed8:	e0fff415 	stw	r3,-48(fp)
   17edc:	10800017 	ldw	r2,0(r2)
   17ee0:	103ff826 	beq	r2,zero,17ec4 <__alt_mem_Flash_flash_data+0xf4017ec4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17ee4:	e0bff517 	ldw	r2,-44(fp)
   17ee8:	1085883a 	add	r2,r2,r2
   17eec:	1085883a 	add	r2,r2,r2
   17ef0:	1007883a 	mov	r3,r2
   17ef4:	e0bfff17 	ldw	r2,-4(fp)
   17ef8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17efc:	e0fff817 	ldw	r3,-32(fp)
   17f00:	e0bff517 	ldw	r2,-44(fp)
   17f04:	1885c83a 	sub	r2,r3,r2
   17f08:	1085883a 	add	r2,r2,r2
   17f0c:	1085883a 	add	r2,r2,r2
   17f10:	1007883a 	mov	r3,r2
   17f14:	e0bfff17 	ldw	r2,-4(fp)
   17f18:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17f1c:	0005883a 	mov	r2,zero
}
   17f20:	e037883a 	mov	sp,fp
   17f24:	df000017 	ldw	fp,0(sp)
   17f28:	dec00104 	addi	sp,sp,4
   17f2c:	f800283a 	ret

00017f30 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17f30:	defff504 	addi	sp,sp,-44
   17f34:	dfc00a15 	stw	ra,40(sp)
   17f38:	df000915 	stw	fp,36(sp)
   17f3c:	df000904 	addi	fp,sp,36
   17f40:	2005883a 	mov	r2,r4
   17f44:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17f48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17f4c:	e0bfff03 	ldbu	r2,-4(fp)
   17f50:	10800518 	cmpnei	r2,r2,20
   17f54:	1000021e 	bne	r2,zero,17f60 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17f58:	008011c4 	movi	r2,71
   17f5c:	00007406 	br	18130 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17f60:	e0bfff03 	ldbu	r2,-4(fp)
   17f64:	10800530 	cmpltui	r2,r2,20
   17f68:	1000051e 	bne	r2,zero,17f80 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17f6c:	e0bfff03 	ldbu	r2,-4(fp)
   17f70:	10803fe0 	cmpeqi	r2,r2,255
   17f74:	1000021e 	bne	r2,zero,17f80 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17f78:	00800a84 	movi	r2,42
   17f7c:	00006c06 	br	18130 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f80:	0005303a 	rdctl	r2,status
   17f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f88:	e0fffb17 	ldw	r3,-20(fp)
   17f8c:	00bfff84 	movi	r2,-2
   17f90:	1884703a 	and	r2,r3,r2
   17f94:	1001703a 	wrctl	status,r2
  
  return context;
   17f98:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   17f9c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17fa0:	e0bfff03 	ldbu	r2,-4(fp)
   17fa4:	10803fd8 	cmpnei	r2,r2,255
   17fa8:	1000081e 	bne	r2,zero,17fcc <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17fac:	008000b4 	movhi	r2,2
   17fb0:	1082e004 	addi	r2,r2,2944
   17fb4:	10800017 	ldw	r2,0(r2)
   17fb8:	10800c83 	ldbu	r2,50(r2)
   17fbc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17fc0:	00800044 	movi	r2,1
   17fc4:	e0bff705 	stb	r2,-36(fp)
   17fc8:	00000b06 	br	17ff8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   17fcc:	008000b4 	movhi	r2,2
   17fd0:	1082e004 	addi	r2,r2,2944
   17fd4:	10800017 	ldw	r2,0(r2)
   17fd8:	10800c83 	ldbu	r2,50(r2)
   17fdc:	10c03fcc 	andi	r3,r2,255
   17fe0:	e0bfff03 	ldbu	r2,-4(fp)
   17fe4:	1880031e 	bne	r3,r2,17ff4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   17fe8:	00800044 	movi	r2,1
   17fec:	e0bff705 	stb	r2,-36(fp)
   17ff0:	00000106 	br	17ff8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17ff4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17ff8:	e0ffff03 	ldbu	r3,-4(fp)
   17ffc:	008000b4 	movhi	r2,2
   18000:	109f7104 	addi	r2,r2,32196
   18004:	18c7883a 	add	r3,r3,r3
   18008:	18c7883a 	add	r3,r3,r3
   1800c:	10c5883a 	add	r2,r2,r3
   18010:	10800017 	ldw	r2,0(r2)
   18014:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   18018:	e0bff917 	ldw	r2,-28(fp)
   1801c:	1000061e 	bne	r2,zero,18038 <OSTaskSuspend+0x108>
   18020:	e0bff817 	ldw	r2,-32(fp)
   18024:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18028:	e0bffc17 	ldw	r2,-16(fp)
   1802c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   18030:	00801204 	movi	r2,72
   18034:	00003e06 	br	18130 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   18038:	e0bff917 	ldw	r2,-28(fp)
   1803c:	10800058 	cmpnei	r2,r2,1
   18040:	1000061e 	bne	r2,zero,1805c <OSTaskSuspend+0x12c>
   18044:	e0bff817 	ldw	r2,-32(fp)
   18048:	e0bffd15 	stw	r2,-12(fp)
   1804c:	e0bffd17 	ldw	r2,-12(fp)
   18050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18054:	008010c4 	movi	r2,67
   18058:	00003506 	br	18130 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1805c:	e0bff917 	ldw	r2,-28(fp)
   18060:	10800d03 	ldbu	r2,52(r2)
   18064:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   18068:	e0fffa03 	ldbu	r3,-24(fp)
   1806c:	e13ffa03 	ldbu	r4,-24(fp)
   18070:	008000b4 	movhi	r2,2
   18074:	1082dd44 	addi	r2,r2,2933
   18078:	1105883a 	add	r2,r2,r4
   1807c:	10800003 	ldbu	r2,0(r2)
   18080:	1009883a 	mov	r4,r2
   18084:	e0bff917 	ldw	r2,-28(fp)
   18088:	10800d43 	ldbu	r2,53(r2)
   1808c:	0084303a 	nor	r2,zero,r2
   18090:	2084703a 	and	r2,r4,r2
   18094:	1009883a 	mov	r4,r2
   18098:	008000b4 	movhi	r2,2
   1809c:	1082dd44 	addi	r2,r2,2933
   180a0:	10c5883a 	add	r2,r2,r3
   180a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   180a8:	e0fffa03 	ldbu	r3,-24(fp)
   180ac:	008000b4 	movhi	r2,2
   180b0:	1082dd44 	addi	r2,r2,2933
   180b4:	10c5883a 	add	r2,r2,r3
   180b8:	10800003 	ldbu	r2,0(r2)
   180bc:	10803fcc 	andi	r2,r2,255
   180c0:	10000c1e 	bne	r2,zero,180f4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   180c4:	e0bff917 	ldw	r2,-28(fp)
   180c8:	10800d83 	ldbu	r2,54(r2)
   180cc:	0084303a 	nor	r2,zero,r2
   180d0:	1007883a 	mov	r3,r2
   180d4:	008000b4 	movhi	r2,2
   180d8:	1082dd04 	addi	r2,r2,2932
   180dc:	10800003 	ldbu	r2,0(r2)
   180e0:	1884703a 	and	r2,r3,r2
   180e4:	1007883a 	mov	r3,r2
   180e8:	008000b4 	movhi	r2,2
   180ec:	1082dd04 	addi	r2,r2,2932
   180f0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   180f4:	e0bff917 	ldw	r2,-28(fp)
   180f8:	10800c03 	ldbu	r2,48(r2)
   180fc:	10800214 	ori	r2,r2,8
   18100:	1007883a 	mov	r3,r2
   18104:	e0bff917 	ldw	r2,-28(fp)
   18108:	10c00c05 	stb	r3,48(r2)
   1810c:	e0bff817 	ldw	r2,-32(fp)
   18110:	e0bffe15 	stw	r2,-8(fp)
   18114:	e0bffe17 	ldw	r2,-8(fp)
   18118:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1811c:	e0bff703 	ldbu	r2,-36(fp)
   18120:	10800058 	cmpnei	r2,r2,1
   18124:	1000011e 	bne	r2,zero,1812c <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   18128:	00124cc0 	call	124cc <OS_Sched>
    }
    return (OS_ERR_NONE);
   1812c:	0005883a 	mov	r2,zero
}
   18130:	e037883a 	mov	sp,fp
   18134:	dfc00117 	ldw	ra,4(sp)
   18138:	df000017 	ldw	fp,0(sp)
   1813c:	dec00204 	addi	sp,sp,8
   18140:	f800283a 	ret

00018144 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   18144:	defff604 	addi	sp,sp,-40
   18148:	dfc00915 	stw	ra,36(sp)
   1814c:	df000815 	stw	fp,32(sp)
   18150:	df000804 	addi	fp,sp,32
   18154:	2005883a 	mov	r2,r4
   18158:	e17fff15 	stw	r5,-4(fp)
   1815c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18160:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   18164:	e0bffe03 	ldbu	r2,-8(fp)
   18168:	10800570 	cmpltui	r2,r2,21
   1816c:	1000051e 	bne	r2,zero,18184 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   18170:	e0bffe03 	ldbu	r2,-8(fp)
   18174:	10803fe0 	cmpeqi	r2,r2,255
   18178:	1000021e 	bne	r2,zero,18184 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1817c:	00800a84 	movi	r2,42
   18180:	00003606 	br	1825c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   18184:	e0bfff17 	ldw	r2,-4(fp)
   18188:	1000021e 	bne	r2,zero,18194 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1818c:	00800244 	movi	r2,9
   18190:	00003206 	br	1825c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18194:	0005303a 	rdctl	r2,status
   18198:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1819c:	e0fffa17 	ldw	r3,-24(fp)
   181a0:	00bfff84 	movi	r2,-2
   181a4:	1884703a 	and	r2,r3,r2
   181a8:	1001703a 	wrctl	status,r2
  
  return context;
   181ac:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   181b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   181b4:	e0bffe03 	ldbu	r2,-8(fp)
   181b8:	10803fd8 	cmpnei	r2,r2,255
   181bc:	1000051e 	bne	r2,zero,181d4 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   181c0:	008000b4 	movhi	r2,2
   181c4:	1082e004 	addi	r2,r2,2944
   181c8:	10800017 	ldw	r2,0(r2)
   181cc:	10800c83 	ldbu	r2,50(r2)
   181d0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   181d4:	e0fffe03 	ldbu	r3,-8(fp)
   181d8:	008000b4 	movhi	r2,2
   181dc:	109f7104 	addi	r2,r2,32196
   181e0:	18c7883a 	add	r3,r3,r3
   181e4:	18c7883a 	add	r3,r3,r3
   181e8:	10c5883a 	add	r2,r2,r3
   181ec:	10800017 	ldw	r2,0(r2)
   181f0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   181f4:	e0bff917 	ldw	r2,-28(fp)
   181f8:	1000061e 	bne	r2,zero,18214 <OSTaskQuery+0xd0>
   181fc:	e0bff817 	ldw	r2,-32(fp)
   18200:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18204:	e0bffb17 	ldw	r2,-20(fp)
   18208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1820c:	00800a44 	movi	r2,41
   18210:	00001206 	br	1825c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   18214:	e0bff917 	ldw	r2,-28(fp)
   18218:	10800058 	cmpnei	r2,r2,1
   1821c:	1000061e 	bne	r2,zero,18238 <OSTaskQuery+0xf4>
   18220:	e0bff817 	ldw	r2,-32(fp)
   18224:	e0bffc15 	stw	r2,-16(fp)
   18228:	e0bffc17 	ldw	r2,-16(fp)
   1822c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18230:	008010c4 	movi	r2,67
   18234:	00000906 	br	1825c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   18238:	e13fff17 	ldw	r4,-4(fp)
   1823c:	e17ff917 	ldw	r5,-28(fp)
   18240:	01801b04 	movi	r6,108
   18244:	00124680 	call	12468 <OS_MemCopy>
   18248:	e0bff817 	ldw	r2,-32(fp)
   1824c:	e0bffd15 	stw	r2,-12(fp)
   18250:	e0bffd17 	ldw	r2,-12(fp)
   18254:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18258:	0005883a 	mov	r2,zero
}
   1825c:	e037883a 	mov	sp,fp
   18260:	dfc00117 	ldw	ra,4(sp)
   18264:	df000017 	ldw	fp,0(sp)
   18268:	dec00204 	addi	sp,sp,8
   1826c:	f800283a 	ret

00018270 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   18270:	defffc04 	addi	sp,sp,-16
   18274:	df000315 	stw	fp,12(sp)
   18278:	df000304 	addi	fp,sp,12
   1827c:	e13ffd15 	stw	r4,-12(fp)
   18280:	e17ffe15 	stw	r5,-8(fp)
   18284:	3005883a 	mov	r2,r6
   18288:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1828c:	e0bfff0b 	ldhu	r2,-4(fp)
   18290:	1080004c 	andi	r2,r2,1
   18294:	10000d26 	beq	r2,zero,182cc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   18298:	e0bfff0b 	ldhu	r2,-4(fp)
   1829c:	1080008c 	andi	r2,r2,2
   182a0:	10000a26 	beq	r2,zero,182cc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   182a4:	00000706 	br	182c4 <OS_TaskStkClr+0x54>
                size--;
   182a8:	e0bffe17 	ldw	r2,-8(fp)
   182ac:	10bfffc4 	addi	r2,r2,-1
   182b0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   182b4:	e0bffd17 	ldw	r2,-12(fp)
   182b8:	10c00104 	addi	r3,r2,4
   182bc:	e0fffd15 	stw	r3,-12(fp)
   182c0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   182c4:	e0bffe17 	ldw	r2,-8(fp)
   182c8:	103ff71e 	bne	r2,zero,182a8 <__alt_mem_Flash_flash_data+0xf40182a8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   182cc:	e037883a 	mov	sp,fp
   182d0:	df000017 	ldw	fp,0(sp)
   182d4:	dec00104 	addi	sp,sp,4
   182d8:	f800283a 	ret

000182dc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   182dc:	defff904 	addi	sp,sp,-28
   182e0:	dfc00615 	stw	ra,24(sp)
   182e4:	df000515 	stw	fp,20(sp)
   182e8:	df000504 	addi	fp,sp,20
   182ec:	2005883a 	mov	r2,r4
   182f0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   182f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   182f8:	008000b4 	movhi	r2,2
   182fc:	1082df04 	addi	r2,r2,2940
   18300:	10800003 	ldbu	r2,0(r2)
   18304:	10803fcc 	andi	r2,r2,255
   18308:	10000126 	beq	r2,zero,18310 <OSTimeDly+0x34>
        return;
   1830c:	00004006 	br	18410 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   18310:	e0bfff0b 	ldhu	r2,-4(fp)
   18314:	10003e26 	beq	r2,zero,18410 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18318:	0005303a 	rdctl	r2,status
   1831c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18320:	e0fffd17 	ldw	r3,-12(fp)
   18324:	00bfff84 	movi	r2,-2
   18328:	1884703a 	and	r2,r3,r2
   1832c:	1001703a 	wrctl	status,r2
  
  return context;
   18330:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   18334:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   18338:	008000b4 	movhi	r2,2
   1833c:	1082e004 	addi	r2,r2,2944
   18340:	10800017 	ldw	r2,0(r2)
   18344:	10800d03 	ldbu	r2,52(r2)
   18348:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1834c:	e0fffc03 	ldbu	r3,-16(fp)
   18350:	e13ffc03 	ldbu	r4,-16(fp)
   18354:	008000b4 	movhi	r2,2
   18358:	1082dd44 	addi	r2,r2,2933
   1835c:	1105883a 	add	r2,r2,r4
   18360:	10800003 	ldbu	r2,0(r2)
   18364:	1009883a 	mov	r4,r2
   18368:	008000b4 	movhi	r2,2
   1836c:	1082e004 	addi	r2,r2,2944
   18370:	10800017 	ldw	r2,0(r2)
   18374:	10800d43 	ldbu	r2,53(r2)
   18378:	0084303a 	nor	r2,zero,r2
   1837c:	2084703a 	and	r2,r4,r2
   18380:	1009883a 	mov	r4,r2
   18384:	008000b4 	movhi	r2,2
   18388:	1082dd44 	addi	r2,r2,2933
   1838c:	10c5883a 	add	r2,r2,r3
   18390:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   18394:	e0fffc03 	ldbu	r3,-16(fp)
   18398:	008000b4 	movhi	r2,2
   1839c:	1082dd44 	addi	r2,r2,2933
   183a0:	10c5883a 	add	r2,r2,r3
   183a4:	10800003 	ldbu	r2,0(r2)
   183a8:	10803fcc 	andi	r2,r2,255
   183ac:	10000e1e 	bne	r2,zero,183e8 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   183b0:	008000b4 	movhi	r2,2
   183b4:	1082e004 	addi	r2,r2,2944
   183b8:	10800017 	ldw	r2,0(r2)
   183bc:	10800d83 	ldbu	r2,54(r2)
   183c0:	0084303a 	nor	r2,zero,r2
   183c4:	1007883a 	mov	r3,r2
   183c8:	008000b4 	movhi	r2,2
   183cc:	1082dd04 	addi	r2,r2,2932
   183d0:	10800003 	ldbu	r2,0(r2)
   183d4:	1884703a 	and	r2,r3,r2
   183d8:	1007883a 	mov	r3,r2
   183dc:	008000b4 	movhi	r2,2
   183e0:	1082dd04 	addi	r2,r2,2932
   183e4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   183e8:	008000b4 	movhi	r2,2
   183ec:	1082e004 	addi	r2,r2,2944
   183f0:	10800017 	ldw	r2,0(r2)
   183f4:	e0ffff0b 	ldhu	r3,-4(fp)
   183f8:	10c00b8d 	sth	r3,46(r2)
   183fc:	e0bffb17 	ldw	r2,-20(fp)
   18400:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18404:	e0bffe17 	ldw	r2,-8(fp)
   18408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1840c:	00124cc0 	call	124cc <OS_Sched>
    }
}
   18410:	e037883a 	mov	sp,fp
   18414:	dfc00117 	ldw	ra,4(sp)
   18418:	df000017 	ldw	fp,0(sp)
   1841c:	dec00204 	addi	sp,sp,8
   18420:	f800283a 	ret

00018424 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   18424:	defff804 	addi	sp,sp,-32
   18428:	dfc00715 	stw	ra,28(sp)
   1842c:	df000615 	stw	fp,24(sp)
   18430:	df000604 	addi	fp,sp,24
   18434:	2015883a 	mov	r10,r4
   18438:	2809883a 	mov	r4,r5
   1843c:	3007883a 	mov	r3,r6
   18440:	3805883a 	mov	r2,r7
   18444:	e2bffc05 	stb	r10,-16(fp)
   18448:	e13ffd05 	stb	r4,-12(fp)
   1844c:	e0fffe05 	stb	r3,-8(fp)
   18450:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18454:	008000b4 	movhi	r2,2
   18458:	1082df04 	addi	r2,r2,2940
   1845c:	10800003 	ldbu	r2,0(r2)
   18460:	10803fcc 	andi	r2,r2,255
   18464:	10000226 	beq	r2,zero,18470 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   18468:	00801544 	movi	r2,85
   1846c:	00004206 	br	18578 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   18470:	e0bffc03 	ldbu	r2,-16(fp)
   18474:	1000081e 	bne	r2,zero,18498 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   18478:	e0bffd03 	ldbu	r2,-12(fp)
   1847c:	1000061e 	bne	r2,zero,18498 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   18480:	e0bffe03 	ldbu	r2,-8(fp)
   18484:	1000041e 	bne	r2,zero,18498 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   18488:	e0bfff0b 	ldhu	r2,-4(fp)
   1848c:	1000021e 	bne	r2,zero,18498 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   18490:	00801504 	movi	r2,84
   18494:	00003806 	br	18578 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   18498:	e0bffd03 	ldbu	r2,-12(fp)
   1849c:	10800f30 	cmpltui	r2,r2,60
   184a0:	1000021e 	bne	r2,zero,184ac <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   184a4:	00801444 	movi	r2,81
   184a8:	00003306 	br	18578 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   184ac:	e0bffe03 	ldbu	r2,-8(fp)
   184b0:	10800f30 	cmpltui	r2,r2,60
   184b4:	1000021e 	bne	r2,zero,184c0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   184b8:	00801484 	movi	r2,82
   184bc:	00002e06 	br	18578 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   184c0:	e0bfff0b 	ldhu	r2,-4(fp)
   184c4:	1080fa30 	cmpltui	r2,r2,1000
   184c8:	1000021e 	bne	r2,zero,184d4 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   184cc:	008014c4 	movi	r2,83
   184d0:	00002906 	br	18578 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   184d4:	e0bffc03 	ldbu	r2,-16(fp)
   184d8:	10c38424 	muli	r3,r2,3600
   184dc:	e0bffd03 	ldbu	r2,-12(fp)
   184e0:	10800f24 	muli	r2,r2,60
   184e4:	1887883a 	add	r3,r3,r2
   184e8:	e0bffe03 	ldbu	r2,-8(fp)
   184ec:	1885883a 	add	r2,r3,r2
   184f0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   184f4:	e0bfff0b 	ldhu	r2,-4(fp)
   184f8:	10800f84 	addi	r2,r2,62
   184fc:	100690fa 	slli	r3,r2,3
   18500:	008418b4 	movhi	r2,4194
   18504:	109374c4 	addi	r2,r2,19923
   18508:	188a383a 	mulxuu	r5,r3,r2
   1850c:	1885383a 	mul	r2,r3,r2
   18510:	1011883a 	mov	r8,r2
   18514:	2813883a 	mov	r9,r5
   18518:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1851c:	2085883a 	add	r2,r4,r2
   18520:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   18524:	e0bffb17 	ldw	r2,-20(fp)
   18528:	1004d43a 	srli	r2,r2,16
   1852c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   18530:	e0bffb17 	ldw	r2,-20(fp)
   18534:	10bfffcc 	andi	r2,r2,65535
   18538:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1853c:	e0bffb17 	ldw	r2,-20(fp)
   18540:	10bfffcc 	andi	r2,r2,65535
   18544:	1009883a 	mov	r4,r2
   18548:	00182dc0 	call	182dc <OSTimeDly>
    while (loops > 0) {
   1854c:	00000706 	br	1856c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   18550:	01200014 	movui	r4,32768
   18554:	00182dc0 	call	182dc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   18558:	01200014 	movui	r4,32768
   1855c:	00182dc0 	call	182dc <OSTimeDly>
        loops--;
   18560:	e0bffa0b 	ldhu	r2,-24(fp)
   18564:	10bfffc4 	addi	r2,r2,-1
   18568:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1856c:	e0bffa0b 	ldhu	r2,-24(fp)
   18570:	103ff71e 	bne	r2,zero,18550 <__alt_mem_Flash_flash_data+0xf4018550>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   18574:	0005883a 	mov	r2,zero
}
   18578:	e037883a 	mov	sp,fp
   1857c:	dfc00117 	ldw	ra,4(sp)
   18580:	df000017 	ldw	fp,0(sp)
   18584:	dec00204 	addi	sp,sp,8
   18588:	f800283a 	ret

0001858c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1858c:	defff504 	addi	sp,sp,-44
   18590:	dfc00a15 	stw	ra,40(sp)
   18594:	df000915 	stw	fp,36(sp)
   18598:	df000904 	addi	fp,sp,36
   1859c:	2005883a 	mov	r2,r4
   185a0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   185a4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   185a8:	e0bfff03 	ldbu	r2,-4(fp)
   185ac:	10800530 	cmpltui	r2,r2,20
   185b0:	1000021e 	bne	r2,zero,185bc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   185b4:	00800a84 	movi	r2,42
   185b8:	00006b06 	br	18768 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185bc:	0005303a 	rdctl	r2,status
   185c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185c4:	e0fff917 	ldw	r3,-28(fp)
   185c8:	00bfff84 	movi	r2,-2
   185cc:	1884703a 	and	r2,r3,r2
   185d0:	1001703a 	wrctl	status,r2
  
  return context;
   185d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   185d8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   185dc:	e0ffff03 	ldbu	r3,-4(fp)
   185e0:	008000b4 	movhi	r2,2
   185e4:	109f7104 	addi	r2,r2,32196
   185e8:	18c7883a 	add	r3,r3,r3
   185ec:	18c7883a 	add	r3,r3,r3
   185f0:	10c5883a 	add	r2,r2,r3
   185f4:	10800017 	ldw	r2,0(r2)
   185f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   185fc:	e0bff817 	ldw	r2,-32(fp)
   18600:	1000061e 	bne	r2,zero,1861c <OSTimeDlyResume+0x90>
   18604:	e0bff717 	ldw	r2,-36(fp)
   18608:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1860c:	e0bffa17 	ldw	r2,-24(fp)
   18610:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   18614:	008010c4 	movi	r2,67
   18618:	00005306 	br	18768 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1861c:	e0bff817 	ldw	r2,-32(fp)
   18620:	10800058 	cmpnei	r2,r2,1
   18624:	1000061e 	bne	r2,zero,18640 <OSTimeDlyResume+0xb4>
   18628:	e0bff717 	ldw	r2,-36(fp)
   1862c:	e0bffb15 	stw	r2,-20(fp)
   18630:	e0bffb17 	ldw	r2,-20(fp)
   18634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   18638:	008010c4 	movi	r2,67
   1863c:	00004a06 	br	18768 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   18640:	e0bff817 	ldw	r2,-32(fp)
   18644:	10800b8b 	ldhu	r2,46(r2)
   18648:	10bfffcc 	andi	r2,r2,65535
   1864c:	1000061e 	bne	r2,zero,18668 <OSTimeDlyResume+0xdc>
   18650:	e0bff717 	ldw	r2,-36(fp)
   18654:	e0bffc15 	stw	r2,-16(fp)
   18658:	e0bffc17 	ldw	r2,-16(fp)
   1865c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   18660:	00801404 	movi	r2,80
   18664:	00004006 	br	18768 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   18668:	e0bff817 	ldw	r2,-32(fp)
   1866c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18670:	e0bff817 	ldw	r2,-32(fp)
   18674:	10800c03 	ldbu	r2,48(r2)
   18678:	10803fcc 	andi	r2,r2,255
   1867c:	10800dcc 	andi	r2,r2,55
   18680:	10000b26 	beq	r2,zero,186b0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   18684:	e0bff817 	ldw	r2,-32(fp)
   18688:	10c00c03 	ldbu	r3,48(r2)
   1868c:	00bff204 	movi	r2,-56
   18690:	1884703a 	and	r2,r3,r2
   18694:	1007883a 	mov	r3,r2
   18698:	e0bff817 	ldw	r2,-32(fp)
   1869c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   186a0:	e0bff817 	ldw	r2,-32(fp)
   186a4:	00c00044 	movi	r3,1
   186a8:	10c00c45 	stb	r3,49(r2)
   186ac:	00000206 	br	186b8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   186b0:	e0bff817 	ldw	r2,-32(fp)
   186b4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   186b8:	e0bff817 	ldw	r2,-32(fp)
   186bc:	10800c03 	ldbu	r2,48(r2)
   186c0:	10803fcc 	andi	r2,r2,255
   186c4:	1080020c 	andi	r2,r2,8
   186c8:	1000221e 	bne	r2,zero,18754 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   186cc:	e0bff817 	ldw	r2,-32(fp)
   186d0:	10c00d83 	ldbu	r3,54(r2)
   186d4:	008000b4 	movhi	r2,2
   186d8:	1082dd04 	addi	r2,r2,2932
   186dc:	10800003 	ldbu	r2,0(r2)
   186e0:	1884b03a 	or	r2,r3,r2
   186e4:	1007883a 	mov	r3,r2
   186e8:	008000b4 	movhi	r2,2
   186ec:	1082dd04 	addi	r2,r2,2932
   186f0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   186f4:	e0bff817 	ldw	r2,-32(fp)
   186f8:	10800d03 	ldbu	r2,52(r2)
   186fc:	10c03fcc 	andi	r3,r2,255
   18700:	e0bff817 	ldw	r2,-32(fp)
   18704:	10800d03 	ldbu	r2,52(r2)
   18708:	11003fcc 	andi	r4,r2,255
   1870c:	008000b4 	movhi	r2,2
   18710:	1082dd44 	addi	r2,r2,2933
   18714:	1105883a 	add	r2,r2,r4
   18718:	11000003 	ldbu	r4,0(r2)
   1871c:	e0bff817 	ldw	r2,-32(fp)
   18720:	10800d43 	ldbu	r2,53(r2)
   18724:	2084b03a 	or	r2,r4,r2
   18728:	1009883a 	mov	r4,r2
   1872c:	008000b4 	movhi	r2,2
   18730:	1082dd44 	addi	r2,r2,2933
   18734:	10c5883a 	add	r2,r2,r3
   18738:	11000005 	stb	r4,0(r2)
   1873c:	e0bff717 	ldw	r2,-36(fp)
   18740:	e0bffd15 	stw	r2,-12(fp)
   18744:	e0bffd17 	ldw	r2,-12(fp)
   18748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1874c:	00124cc0 	call	124cc <OS_Sched>
   18750:	00000406 	br	18764 <OSTimeDlyResume+0x1d8>
   18754:	e0bff717 	ldw	r2,-36(fp)
   18758:	e0bffe15 	stw	r2,-8(fp)
   1875c:	e0bffe17 	ldw	r2,-8(fp)
   18760:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   18764:	0005883a 	mov	r2,zero
}
   18768:	e037883a 	mov	sp,fp
   1876c:	dfc00117 	ldw	ra,4(sp)
   18770:	df000017 	ldw	fp,0(sp)
   18774:	dec00204 	addi	sp,sp,8
   18778:	f800283a 	ret

0001877c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1877c:	defffb04 	addi	sp,sp,-20
   18780:	df000415 	stw	fp,16(sp)
   18784:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18788:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1878c:	0005303a 	rdctl	r2,status
   18790:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18794:	e0fffe17 	ldw	r3,-8(fp)
   18798:	00bfff84 	movi	r2,-2
   1879c:	1884703a 	and	r2,r3,r2
   187a0:	1001703a 	wrctl	status,r2
  
  return context;
   187a4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   187a8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   187ac:	008000b4 	movhi	r2,2
   187b0:	1082e104 	addi	r2,r2,2948
   187b4:	10800017 	ldw	r2,0(r2)
   187b8:	e0bffd15 	stw	r2,-12(fp)
   187bc:	e0bffc17 	ldw	r2,-16(fp)
   187c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187c4:	e0bfff17 	ldw	r2,-4(fp)
   187c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   187cc:	e0bffd17 	ldw	r2,-12(fp)
}
   187d0:	e037883a 	mov	sp,fp
   187d4:	df000017 	ldw	fp,0(sp)
   187d8:	dec00104 	addi	sp,sp,4
   187dc:	f800283a 	ret

000187e0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   187e0:	defffb04 	addi	sp,sp,-20
   187e4:	df000415 	stw	fp,16(sp)
   187e8:	df000404 	addi	fp,sp,16
   187ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   187f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187f4:	0005303a 	rdctl	r2,status
   187f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187fc:	e0fffd17 	ldw	r3,-12(fp)
   18800:	00bfff84 	movi	r2,-2
   18804:	1884703a 	and	r2,r3,r2
   18808:	1001703a 	wrctl	status,r2
  
  return context;
   1880c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   18810:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   18814:	008000b4 	movhi	r2,2
   18818:	1082e104 	addi	r2,r2,2948
   1881c:	e0ffff17 	ldw	r3,-4(fp)
   18820:	10c00015 	stw	r3,0(r2)
   18824:	e0bffc17 	ldw	r2,-16(fp)
   18828:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1882c:	e0bffe17 	ldw	r2,-8(fp)
   18830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   18834:	e037883a 	mov	sp,fp
   18838:	df000017 	ldw	fp,0(sp)
   1883c:	dec00104 	addi	sp,sp,4
   18840:	f800283a 	ret

00018844 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   18844:	defffd04 	addi	sp,sp,-12
   18848:	dfc00215 	stw	ra,8(sp)
   1884c:	df000115 	stw	fp,4(sp)
   18850:	df000104 	addi	fp,sp,4
   18854:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   18858:	e13fff17 	ldw	r4,-4(fp)
   1885c:	014000b4 	movhi	r5,2
   18860:	297ac704 	addi	r5,r5,-5348
   18864:	001b1f00 	call	1b1f0 <alt_dev_llist_insert>
}
   18868:	e037883a 	mov	sp,fp
   1886c:	dfc00117 	ldw	ra,4(sp)
   18870:	df000017 	ldw	fp,0(sp)
   18874:	dec00204 	addi	sp,sp,8
   18878:	f800283a 	ret

0001887c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1887c:	defffd04 	addi	sp,sp,-12
   18880:	dfc00215 	stw	ra,8(sp)
   18884:	df000115 	stw	fp,4(sp)
   18888:	df000104 	addi	fp,sp,4
   1888c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   18890:	001bb040 	call	1bb04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   18894:	00800044 	movi	r2,1
   18898:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1889c:	e037883a 	mov	sp,fp
   188a0:	dfc00117 	ldw	ra,4(sp)
   188a4:	df000017 	ldw	fp,0(sp)
   188a8:	dec00204 	addi	sp,sp,8
   188ac:	f800283a 	ret

000188b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   188b0:	defffd04 	addi	sp,sp,-12
   188b4:	dfc00215 	stw	ra,8(sp)
   188b8:	df000115 	stw	fp,4(sp)
   188bc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   188c0:	01040034 	movhi	r4,4096
   188c4:	21080004 	addi	r4,r4,8192
   188c8:	000b883a 	mov	r5,zero
   188cc:	000d883a 	mov	r6,zero
   188d0:	01c00204 	movi	r7,8
   188d4:	0019a3c0 	call	19a3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   188d8:	010000b4 	movhi	r4,2
   188dc:	2135b704 	addi	r4,r4,-10532
   188e0:	000b883a 	mov	r5,zero
   188e4:	01800204 	movi	r6,8
   188e8:	0018e040 	call	18e04 <altera_avalon_jtag_uart_init>
   188ec:	010000b4 	movhi	r4,2
   188f0:	2135ad04 	addi	r4,r4,-10572
   188f4:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   188f8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   188fc:	010000b4 	movhi	r4,2
   18900:	2139c804 	addi	r4,r4,-6368
   18904:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   18908:	010000b4 	movhi	r4,2
   1890c:	2139d404 	addi	r4,r4,-6320
   18910:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   18914:	010000b4 	movhi	r4,2
   18918:	2139e004 	addi	r4,r4,-6272
   1891c:	0019b6c0 	call	19b6c <alt_up_character_lcd_init>
   18920:	010000b4 	movhi	r4,2
   18924:	2139e004 	addi	r4,r4,-6272
   18928:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1892c:	010000b4 	movhi	r4,2
   18930:	2139eb04 	addi	r4,r4,-6228
   18934:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   18938:	010000b4 	movhi	r4,2
   1893c:	2139f604 	addi	r4,r4,-6184
   18940:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   18944:	010000b4 	movhi	r4,2
   18948:	213a0104 	addi	r4,r4,-6140
   1894c:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   18950:	010000b4 	movhi	r4,2
   18954:	213a0c04 	addi	r4,r4,-6096
   18958:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1895c:	010000b4 	movhi	r4,2
   18960:	213a1704 	addi	r4,r4,-6052
   18964:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   18968:	010000b4 	movhi	r4,2
   1896c:	213a2204 	addi	r4,r4,-6008
   18970:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   18974:	010000b4 	movhi	r4,2
   18978:	213a2d04 	addi	r4,r4,-5964
   1897c:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   18980:	010000b4 	movhi	r4,2
   18984:	213a3804 	addi	r4,r4,-5920
   18988:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1898c:	010000b4 	movhi	r4,2
   18990:	213a4304 	addi	r4,r4,-5876
   18994:	001a4440 	call	1a444 <alt_up_ps2_init>
   18998:	010000b4 	movhi	r4,2
   1899c:	213a4304 	addi	r4,r4,-5876
   189a0:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   189a4:	010000b4 	movhi	r4,2
   189a8:	213a5104 	addi	r4,r4,-5820
   189ac:	001a4440 	call	1a444 <alt_up_ps2_init>
   189b0:	010000b4 	movhi	r4,2
   189b4:	213a5104 	addi	r4,r4,-5820
   189b8:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
   189bc:	010000b4 	movhi	r4,2
   189c0:	213a5f04 	addi	r4,r4,-5764
   189c4:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_1, rs232_1);
   189c8:	010000b4 	movhi	r4,2
   189cc:	213a6a04 	addi	r4,r4,-5720
   189d0:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   189d4:	010000b4 	movhi	r4,2
   189d8:	213a7504 	addi	r4,r4,-5676
   189dc:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   189e0:	010000b4 	movhi	r4,2
   189e4:	213a8004 	addi	r4,r4,-5632
   189e8:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   189ec:	008000b4 	movhi	r2,2
   189f0:	10ba8d04 	addi	r2,r2,-5580
   189f4:	10800a17 	ldw	r2,40(r2)
   189f8:	10800104 	addi	r2,r2,4
   189fc:	10800017 	ldw	r2,0(r2)
   18a00:	10ffffcc 	andi	r3,r2,65535
   18a04:	008000b4 	movhi	r2,2
   18a08:	10ba8d04 	addi	r2,r2,-5580
   18a0c:	10c00c15 	stw	r3,48(r2)
   18a10:	008000b4 	movhi	r2,2
   18a14:	10ba8d04 	addi	r2,r2,-5580
   18a18:	10800a17 	ldw	r2,40(r2)
   18a1c:	10800104 	addi	r2,r2,4
   18a20:	10800017 	ldw	r2,0(r2)
   18a24:	1006d43a 	srli	r3,r2,16
   18a28:	008000b4 	movhi	r2,2
   18a2c:	10ba8d04 	addi	r2,r2,-5580
   18a30:	10c00d15 	stw	r3,52(r2)
   18a34:	008000b4 	movhi	r2,2
   18a38:	10ba8d04 	addi	r2,r2,-5580
   18a3c:	10800c17 	ldw	r2,48(r2)
   18a40:	10801068 	cmpgeui	r2,r2,65
   18a44:	1000081e 	bne	r2,zero,18a68 <alt_sys_init+0x1b8>
   18a48:	008000b4 	movhi	r2,2
   18a4c:	10ba8d04 	addi	r2,r2,-5580
   18a50:	00c00fc4 	movi	r3,63
   18a54:	10c00f15 	stw	r3,60(r2)
   18a58:	008000b4 	movhi	r2,2
   18a5c:	10ba8d04 	addi	r2,r2,-5580
   18a60:	00c00184 	movi	r3,6
   18a64:	10c01015 	stw	r3,64(r2)
   18a68:	008000b4 	movhi	r2,2
   18a6c:	10ba8d04 	addi	r2,r2,-5580
   18a70:	10800d17 	ldw	r2,52(r2)
   18a74:	10800868 	cmpgeui	r2,r2,33
   18a78:	1000041e 	bne	r2,zero,18a8c <alt_sys_init+0x1dc>
   18a7c:	008000b4 	movhi	r2,2
   18a80:	10ba8d04 	addi	r2,r2,-5580
   18a84:	00c007c4 	movi	r3,31
   18a88:	10c01115 	stw	r3,68(r2)
   18a8c:	010000b4 	movhi	r4,2
   18a90:	213a8d04 	addi	r4,r4,-5580
   18a94:	001ad5c0 	call	1ad5c <alt_up_char_buffer_init>
   18a98:	010000b4 	movhi	r4,2
   18a9c:	213a8d04 	addi	r4,r4,-5580
   18aa0:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   18aa4:	008000b4 	movhi	r2,2
   18aa8:	10ba9f04 	addi	r2,r2,-5508
   18aac:	10800a17 	ldw	r2,40(r2)
   18ab0:	10800017 	ldw	r2,0(r2)
   18ab4:	1007883a 	mov	r3,r2
   18ab8:	008000b4 	movhi	r2,2
   18abc:	10ba9f04 	addi	r2,r2,-5508
   18ac0:	10c00b15 	stw	r3,44(r2)
   18ac4:	008000b4 	movhi	r2,2
   18ac8:	10ba9f04 	addi	r2,r2,-5508
   18acc:	10800a17 	ldw	r2,40(r2)
   18ad0:	10800104 	addi	r2,r2,4
   18ad4:	10800017 	ldw	r2,0(r2)
   18ad8:	1007883a 	mov	r3,r2
   18adc:	008000b4 	movhi	r2,2
   18ae0:	10ba9f04 	addi	r2,r2,-5508
   18ae4:	10c00c15 	stw	r3,48(r2)
   18ae8:	008000b4 	movhi	r2,2
   18aec:	10ba9f04 	addi	r2,r2,-5508
   18af0:	10800a17 	ldw	r2,40(r2)
   18af4:	10800204 	addi	r2,r2,8
   18af8:	10800017 	ldw	r2,0(r2)
   18afc:	10ffffcc 	andi	r3,r2,65535
   18b00:	008000b4 	movhi	r2,2
   18b04:	10ba9f04 	addi	r2,r2,-5508
   18b08:	10c00f15 	stw	r3,60(r2)
   18b0c:	008000b4 	movhi	r2,2
   18b10:	10ba9f04 	addi	r2,r2,-5508
   18b14:	10800a17 	ldw	r2,40(r2)
   18b18:	10800204 	addi	r2,r2,8
   18b1c:	10800017 	ldw	r2,0(r2)
   18b20:	1006d43a 	srli	r3,r2,16
   18b24:	008000b4 	movhi	r2,2
   18b28:	10ba9f04 	addi	r2,r2,-5508
   18b2c:	10c01015 	stw	r3,64(r2)
   18b30:	008000b4 	movhi	r2,2
   18b34:	10ba9f04 	addi	r2,r2,-5508
   18b38:	10800a17 	ldw	r2,40(r2)
   18b3c:	10800304 	addi	r2,r2,12
   18b40:	10800017 	ldw	r2,0(r2)
   18b44:	1005d07a 	srai	r2,r2,1
   18b48:	10c0004c 	andi	r3,r2,1
   18b4c:	008000b4 	movhi	r2,2
   18b50:	10ba9f04 	addi	r2,r2,-5508
   18b54:	10c00d15 	stw	r3,52(r2)
   18b58:	008000b4 	movhi	r2,2
   18b5c:	10ba9f04 	addi	r2,r2,-5508
   18b60:	10800a17 	ldw	r2,40(r2)
   18b64:	10800304 	addi	r2,r2,12
   18b68:	10800017 	ldw	r2,0(r2)
   18b6c:	1005d13a 	srai	r2,r2,4
   18b70:	10c003cc 	andi	r3,r2,15
   18b74:	008000b4 	movhi	r2,2
   18b78:	10ba9f04 	addi	r2,r2,-5508
   18b7c:	10c00e15 	stw	r3,56(r2)
   18b80:	008000b4 	movhi	r2,2
   18b84:	10ba9f04 	addi	r2,r2,-5508
   18b88:	10800a17 	ldw	r2,40(r2)
   18b8c:	10800304 	addi	r2,r2,12
   18b90:	10800017 	ldw	r2,0(r2)
   18b94:	1005d43a 	srai	r2,r2,16
   18b98:	e0bfff05 	stb	r2,-4(fp)
   18b9c:	008000b4 	movhi	r2,2
   18ba0:	10ba9f04 	addi	r2,r2,-5508
   18ba4:	10800a17 	ldw	r2,40(r2)
   18ba8:	10800304 	addi	r2,r2,12
   18bac:	10800017 	ldw	r2,0(r2)
   18bb0:	1004d63a 	srli	r2,r2,24
   18bb4:	e0bfff45 	stb	r2,-3(fp)
   18bb8:	008000b4 	movhi	r2,2
   18bbc:	10ba9f04 	addi	r2,r2,-5508
   18bc0:	10800e17 	ldw	r2,56(r2)
   18bc4:	10800058 	cmpnei	r2,r2,1
   18bc8:	1000041e 	bne	r2,zero,18bdc <alt_sys_init+0x32c>
   18bcc:	008000b4 	movhi	r2,2
   18bd0:	10ba9f04 	addi	r2,r2,-5508
   18bd4:	10001115 	stw	zero,68(r2)
   18bd8:	00000e06 	br	18c14 <alt_sys_init+0x364>
   18bdc:	008000b4 	movhi	r2,2
   18be0:	10ba9f04 	addi	r2,r2,-5508
   18be4:	10800e17 	ldw	r2,56(r2)
   18be8:	10800098 	cmpnei	r2,r2,2
   18bec:	1000051e 	bne	r2,zero,18c04 <alt_sys_init+0x354>
   18bf0:	008000b4 	movhi	r2,2
   18bf4:	10ba9f04 	addi	r2,r2,-5508
   18bf8:	00c00044 	movi	r3,1
   18bfc:	10c01115 	stw	r3,68(r2)
   18c00:	00000406 	br	18c14 <alt_sys_init+0x364>
   18c04:	008000b4 	movhi	r2,2
   18c08:	10ba9f04 	addi	r2,r2,-5508
   18c0c:	00c00084 	movi	r3,2
   18c10:	10c01115 	stw	r3,68(r2)
   18c14:	e0bfff03 	ldbu	r2,-4(fp)
   18c18:	00c00804 	movi	r3,32
   18c1c:	1885c83a 	sub	r2,r3,r2
   18c20:	00ffffc4 	movi	r3,-1
   18c24:	1886d83a 	srl	r3,r3,r2
   18c28:	008000b4 	movhi	r2,2
   18c2c:	10ba9f04 	addi	r2,r2,-5508
   18c30:	10c01215 	stw	r3,72(r2)
   18c34:	e0ffff03 	ldbu	r3,-4(fp)
   18c38:	008000b4 	movhi	r2,2
   18c3c:	10ba9f04 	addi	r2,r2,-5508
   18c40:	10801117 	ldw	r2,68(r2)
   18c44:	1887883a 	add	r3,r3,r2
   18c48:	008000b4 	movhi	r2,2
   18c4c:	10ba9f04 	addi	r2,r2,-5508
   18c50:	10c01315 	stw	r3,76(r2)
   18c54:	e0bfff43 	ldbu	r2,-3(fp)
   18c58:	00c00804 	movi	r3,32
   18c5c:	1885c83a 	sub	r2,r3,r2
   18c60:	00ffffc4 	movi	r3,-1
   18c64:	1886d83a 	srl	r3,r3,r2
   18c68:	008000b4 	movhi	r2,2
   18c6c:	10ba9f04 	addi	r2,r2,-5508
   18c70:	10c01415 	stw	r3,80(r2)
   18c74:	010000b4 	movhi	r4,2
   18c78:	213a9f04 	addi	r4,r4,-5508
   18c7c:	00188440 	call	18844 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18c80:	010000b4 	movhi	r4,2
   18c84:	213ab404 	addi	r4,r4,-5424
   18c88:	00188440 	call	18844 <alt_dev_reg>
}
   18c8c:	e037883a 	mov	sp,fp
   18c90:	dfc00117 	ldw	ra,4(sp)
   18c94:	df000017 	ldw	fp,0(sp)
   18c98:	dec00204 	addi	sp,sp,8
   18c9c:	f800283a 	ret

00018ca0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   18ca0:	defffa04 	addi	sp,sp,-24
   18ca4:	dfc00515 	stw	ra,20(sp)
   18ca8:	df000415 	stw	fp,16(sp)
   18cac:	df000404 	addi	fp,sp,16
   18cb0:	e13ffd15 	stw	r4,-12(fp)
   18cb4:	e17ffe15 	stw	r5,-8(fp)
   18cb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18cbc:	e0bffd17 	ldw	r2,-12(fp)
   18cc0:	10800017 	ldw	r2,0(r2)
   18cc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   18cc8:	e0bffc17 	ldw	r2,-16(fp)
   18ccc:	10c00a04 	addi	r3,r2,40
   18cd0:	e0bffd17 	ldw	r2,-12(fp)
   18cd4:	10800217 	ldw	r2,8(r2)
   18cd8:	1809883a 	mov	r4,r3
   18cdc:	e17ffe17 	ldw	r5,-8(fp)
   18ce0:	e1bfff17 	ldw	r6,-4(fp)
   18ce4:	100f883a 	mov	r7,r2
   18ce8:	00194500 	call	19450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   18cec:	e037883a 	mov	sp,fp
   18cf0:	dfc00117 	ldw	ra,4(sp)
   18cf4:	df000017 	ldw	fp,0(sp)
   18cf8:	dec00204 	addi	sp,sp,8
   18cfc:	f800283a 	ret

00018d00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   18d00:	defffa04 	addi	sp,sp,-24
   18d04:	dfc00515 	stw	ra,20(sp)
   18d08:	df000415 	stw	fp,16(sp)
   18d0c:	df000404 	addi	fp,sp,16
   18d10:	e13ffd15 	stw	r4,-12(fp)
   18d14:	e17ffe15 	stw	r5,-8(fp)
   18d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18d1c:	e0bffd17 	ldw	r2,-12(fp)
   18d20:	10800017 	ldw	r2,0(r2)
   18d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18d28:	e0bffc17 	ldw	r2,-16(fp)
   18d2c:	10c00a04 	addi	r3,r2,40
   18d30:	e0bffd17 	ldw	r2,-12(fp)
   18d34:	10800217 	ldw	r2,8(r2)
   18d38:	1809883a 	mov	r4,r3
   18d3c:	e17ffe17 	ldw	r5,-8(fp)
   18d40:	e1bfff17 	ldw	r6,-4(fp)
   18d44:	100f883a 	mov	r7,r2
   18d48:	00197040 	call	19704 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18d4c:	e037883a 	mov	sp,fp
   18d50:	dfc00117 	ldw	ra,4(sp)
   18d54:	df000017 	ldw	fp,0(sp)
   18d58:	dec00204 	addi	sp,sp,8
   18d5c:	f800283a 	ret

00018d60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   18d60:	defffc04 	addi	sp,sp,-16
   18d64:	dfc00315 	stw	ra,12(sp)
   18d68:	df000215 	stw	fp,8(sp)
   18d6c:	df000204 	addi	fp,sp,8
   18d70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18d74:	e0bfff17 	ldw	r2,-4(fp)
   18d78:	10800017 	ldw	r2,0(r2)
   18d7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   18d80:	e0bffe17 	ldw	r2,-8(fp)
   18d84:	10c00a04 	addi	r3,r2,40
   18d88:	e0bfff17 	ldw	r2,-4(fp)
   18d8c:	10800217 	ldw	r2,8(r2)
   18d90:	1809883a 	mov	r4,r3
   18d94:	100b883a 	mov	r5,r2
   18d98:	00192fc0 	call	192fc <altera_avalon_jtag_uart_close>
}
   18d9c:	e037883a 	mov	sp,fp
   18da0:	dfc00117 	ldw	ra,4(sp)
   18da4:	df000017 	ldw	fp,0(sp)
   18da8:	dec00204 	addi	sp,sp,8
   18dac:	f800283a 	ret

00018db0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   18db0:	defffa04 	addi	sp,sp,-24
   18db4:	dfc00515 	stw	ra,20(sp)
   18db8:	df000415 	stw	fp,16(sp)
   18dbc:	df000404 	addi	fp,sp,16
   18dc0:	e13ffd15 	stw	r4,-12(fp)
   18dc4:	e17ffe15 	stw	r5,-8(fp)
   18dc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   18dcc:	e0bffd17 	ldw	r2,-12(fp)
   18dd0:	10800017 	ldw	r2,0(r2)
   18dd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   18dd8:	e0bffc17 	ldw	r2,-16(fp)
   18ddc:	10800a04 	addi	r2,r2,40
   18de0:	1009883a 	mov	r4,r2
   18de4:	e17ffe17 	ldw	r5,-8(fp)
   18de8:	e1bfff17 	ldw	r6,-4(fp)
   18dec:	00193640 	call	19364 <altera_avalon_jtag_uart_ioctl>
}
   18df0:	e037883a 	mov	sp,fp
   18df4:	dfc00117 	ldw	ra,4(sp)
   18df8:	df000017 	ldw	fp,0(sp)
   18dfc:	dec00204 	addi	sp,sp,8
   18e00:	f800283a 	ret

00018e04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18e04:	defff104 	addi	sp,sp,-60
   18e08:	dfc00e15 	stw	ra,56(sp)
   18e0c:	df000d15 	stw	fp,52(sp)
   18e10:	df000d04 	addi	fp,sp,52
   18e14:	e13ff915 	stw	r4,-28(fp)
   18e18:	e17ffa15 	stw	r5,-24(fp)
   18e1c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   18e20:	e0bff917 	ldw	r2,-28(fp)
   18e24:	10800c04 	addi	r2,r2,48
   18e28:	e0bff315 	stw	r2,-52(fp)
   18e2c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   18e30:	e0fff40b 	ldhu	r3,-48(fp)
   18e34:	e0bff884 	addi	r2,fp,-30
   18e38:	1809883a 	mov	r4,r3
   18e3c:	100b883a 	mov	r5,r2
   18e40:	00130380 	call	13038 <OSFlagCreate>
   18e44:	1007883a 	mov	r3,r2
   18e48:	e0bff317 	ldw	r2,-52(fp)
   18e4c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   18e50:	e0bff917 	ldw	r2,-28(fp)
   18e54:	10800a04 	addi	r2,r2,40
   18e58:	e0bff515 	stw	r2,-44(fp)
   18e5c:	00800044 	movi	r2,1
   18e60:	e0bff60d 	sth	r2,-40(fp)
   18e64:	e0bff60b 	ldhu	r2,-40(fp)
   18e68:	1009883a 	mov	r4,r2
   18e6c:	0015f900 	call	15f90 <OSSemCreate>
   18e70:	1007883a 	mov	r3,r2
   18e74:	e0bff517 	ldw	r2,-44(fp)
   18e78:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   18e7c:	e0bff917 	ldw	r2,-28(fp)
   18e80:	10800b04 	addi	r2,r2,44
   18e84:	e0bff715 	stw	r2,-36(fp)
   18e88:	00800044 	movi	r2,1
   18e8c:	e0bff80d 	sth	r2,-32(fp)
   18e90:	e0bff80b 	ldhu	r2,-32(fp)
   18e94:	1009883a 	mov	r4,r2
   18e98:	0015f900 	call	15f90 <OSSemCreate>
   18e9c:	1007883a 	mov	r3,r2
   18ea0:	e0bff717 	ldw	r2,-36(fp)
   18ea4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18ea8:	e0bff917 	ldw	r2,-28(fp)
   18eac:	00c00044 	movi	r3,1
   18eb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   18eb4:	e0bff917 	ldw	r2,-28(fp)
   18eb8:	10800017 	ldw	r2,0(r2)
   18ebc:	10800104 	addi	r2,r2,4
   18ec0:	1007883a 	mov	r3,r2
   18ec4:	e0bff917 	ldw	r2,-28(fp)
   18ec8:	10800817 	ldw	r2,32(r2)
   18ecc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   18ed0:	e0bffb17 	ldw	r2,-20(fp)
   18ed4:	1009883a 	mov	r4,r2
   18ed8:	e17ff917 	ldw	r5,-28(fp)
   18edc:	018000b4 	movhi	r6,2
   18ee0:	31a3d104 	addi	r6,r6,-28860
   18ee4:	001b5440 	call	1b544 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   18ee8:	e0bff917 	ldw	r2,-28(fp)
   18eec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   18ef0:	e0bff917 	ldw	r2,-28(fp)
   18ef4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18ef8:	008000b4 	movhi	r2,2
   18efc:	1082e604 	addi	r2,r2,2968
   18f00:	10800017 	ldw	r2,0(r2)
   18f04:	1809883a 	mov	r4,r3
   18f08:	100b883a 	mov	r5,r2
   18f0c:	018000b4 	movhi	r6,2
   18f10:	31a47b04 	addi	r6,r6,-28180
   18f14:	e1fff917 	ldw	r7,-28(fp)
   18f18:	001b0440 	call	1b044 <alt_alarm_start>
   18f1c:	1000040e 	bge	r2,zero,18f30 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   18f20:	e0fff917 	ldw	r3,-28(fp)
   18f24:	00a00034 	movhi	r2,32768
   18f28:	10bfffc4 	addi	r2,r2,-1
   18f2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   18f30:	e037883a 	mov	sp,fp
   18f34:	dfc00117 	ldw	ra,4(sp)
   18f38:	df000017 	ldw	fp,0(sp)
   18f3c:	dec00204 	addi	sp,sp,8
   18f40:	f800283a 	ret

00018f44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   18f44:	defff104 	addi	sp,sp,-60
   18f48:	dfc00e15 	stw	ra,56(sp)
   18f4c:	df000d15 	stw	fp,52(sp)
   18f50:	df000d04 	addi	fp,sp,52
   18f54:	e13ffe15 	stw	r4,-8(fp)
   18f58:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18f5c:	e0bffe17 	ldw	r2,-8(fp)
   18f60:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   18f64:	e0bff517 	ldw	r2,-44(fp)
   18f68:	10800017 	ldw	r2,0(r2)
   18f6c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18f70:	e0bff617 	ldw	r2,-40(fp)
   18f74:	10800104 	addi	r2,r2,4
   18f78:	10800037 	ldwio	r2,0(r2)
   18f7c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   18f80:	e0bff717 	ldw	r2,-36(fp)
   18f84:	1080c00c 	andi	r2,r2,768
   18f88:	1000011e 	bne	r2,zero,18f90 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   18f8c:	00009206 	br	191d8 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18f90:	e0bff717 	ldw	r2,-36(fp)
   18f94:	1080400c 	andi	r2,r2,256
   18f98:	10004726 	beq	r2,zero,190b8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   18f9c:	00800074 	movhi	r2,1
   18fa0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18fa4:	e0bff517 	ldw	r2,-44(fp)
   18fa8:	10800d17 	ldw	r2,52(r2)
   18fac:	10800044 	addi	r2,r2,1
   18fb0:	1081ffcc 	andi	r2,r2,2047
   18fb4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   18fb8:	e0bff517 	ldw	r2,-44(fp)
   18fbc:	10c00e17 	ldw	r3,56(r2)
   18fc0:	e0bff817 	ldw	r2,-32(fp)
   18fc4:	1880011e 	bne	r3,r2,18fcc <altera_avalon_jtag_uart_irq+0x88>
          break;
   18fc8:	00002906 	br	19070 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   18fcc:	e0bff617 	ldw	r2,-40(fp)
   18fd0:	10800037 	ldwio	r2,0(r2)
   18fd4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   18fd8:	e0bff317 	ldw	r2,-52(fp)
   18fdc:	10a0000c 	andi	r2,r2,32768
   18fe0:	1000011e 	bne	r2,zero,18fe8 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   18fe4:	00002206 	br	19070 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   18fe8:	e0bff517 	ldw	r2,-44(fp)
   18fec:	10800d17 	ldw	r2,52(r2)
   18ff0:	e0fff317 	ldw	r3,-52(fp)
   18ff4:	1809883a 	mov	r4,r3
   18ff8:	e0fff517 	ldw	r3,-44(fp)
   18ffc:	1885883a 	add	r2,r3,r2
   19000:	10801104 	addi	r2,r2,68
   19004:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19008:	e0bff517 	ldw	r2,-44(fp)
   1900c:	10800d17 	ldw	r2,52(r2)
   19010:	10800044 	addi	r2,r2,1
   19014:	10c1ffcc 	andi	r3,r2,2047
   19018:	e0bff517 	ldw	r2,-44(fp)
   1901c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   19020:	e0bff517 	ldw	r2,-44(fp)
   19024:	10800c17 	ldw	r2,48(r2)
   19028:	e0bff915 	stw	r2,-28(fp)
   1902c:	00800044 	movi	r2,1
   19030:	e0bffa0d 	sth	r2,-24(fp)
   19034:	00800044 	movi	r2,1
   19038:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1903c:	008000b4 	movhi	r2,2
   19040:	1082d144 	addi	r2,r2,2885
   19044:	10800003 	ldbu	r2,0(r2)
   19048:	10803fcc 	andi	r2,r2,255
   1904c:	103fd526 	beq	r2,zero,18fa4 <__alt_mem_Flash_flash_data+0xf4018fa4>
  {
    OSFlagPost (group, flags, opt, &err);
   19050:	e17ffa0b 	ldhu	r5,-24(fp)
   19054:	e0fffa83 	ldbu	r3,-22(fp)
   19058:	e0bffcc4 	addi	r2,fp,-13
   1905c:	e13ff917 	ldw	r4,-28(fp)
   19060:	180d883a 	mov	r6,r3
   19064:	100f883a 	mov	r7,r2
   19068:	0013ca80 	call	13ca8 <OSFlagPost>
      }
   1906c:	003fcd06 	br	18fa4 <__alt_mem_Flash_flash_data+0xf4018fa4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   19070:	e0bff317 	ldw	r2,-52(fp)
   19074:	10bfffec 	andhi	r2,r2,65535
   19078:	10000f26 	beq	r2,zero,190b8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1907c:	e0bff517 	ldw	r2,-44(fp)
   19080:	10c00817 	ldw	r3,32(r2)
   19084:	00bfff84 	movi	r2,-2
   19088:	1886703a 	and	r3,r3,r2
   1908c:	e0bff517 	ldw	r2,-44(fp)
   19090:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   19094:	e0bff617 	ldw	r2,-40(fp)
   19098:	10800104 	addi	r2,r2,4
   1909c:	1007883a 	mov	r3,r2
   190a0:	e0bff517 	ldw	r2,-44(fp)
   190a4:	10800817 	ldw	r2,32(r2)
   190a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   190ac:	e0bff617 	ldw	r2,-40(fp)
   190b0:	10800104 	addi	r2,r2,4
   190b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   190b8:	e0bff717 	ldw	r2,-36(fp)
   190bc:	1080800c 	andi	r2,r2,512
   190c0:	10004426 	beq	r2,zero,191d4 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   190c4:	e0bff717 	ldw	r2,-36(fp)
   190c8:	1004d43a 	srli	r2,r2,16
   190cc:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   190d0:	00002706 	br	19170 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   190d4:	e0bff617 	ldw	r2,-40(fp)
   190d8:	e0fff517 	ldw	r3,-44(fp)
   190dc:	18c01017 	ldw	r3,64(r3)
   190e0:	e13ff517 	ldw	r4,-44(fp)
   190e4:	20c7883a 	add	r3,r4,r3
   190e8:	18c21104 	addi	r3,r3,2116
   190ec:	18c00003 	ldbu	r3,0(r3)
   190f0:	18c03fcc 	andi	r3,r3,255
   190f4:	18c0201c 	xori	r3,r3,128
   190f8:	18ffe004 	addi	r3,r3,-128
   190fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19100:	e0bff517 	ldw	r2,-44(fp)
   19104:	10801017 	ldw	r2,64(r2)
   19108:	10800044 	addi	r2,r2,1
   1910c:	10c1ffcc 	andi	r3,r2,2047
   19110:	e0bff517 	ldw	r2,-44(fp)
   19114:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   19118:	e0bff517 	ldw	r2,-44(fp)
   1911c:	10800c17 	ldw	r2,48(r2)
   19120:	e0bffb15 	stw	r2,-20(fp)
   19124:	00800084 	movi	r2,2
   19128:	e0bffc0d 	sth	r2,-16(fp)
   1912c:	00800044 	movi	r2,1
   19130:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   19134:	008000b4 	movhi	r2,2
   19138:	1082d144 	addi	r2,r2,2885
   1913c:	10800003 	ldbu	r2,0(r2)
   19140:	10803fcc 	andi	r2,r2,255
   19144:	10000726 	beq	r2,zero,19164 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   19148:	e17ffc0b 	ldhu	r5,-16(fp)
   1914c:	e0fffc83 	ldbu	r3,-14(fp)
   19150:	e0bffd04 	addi	r2,fp,-12
   19154:	e13ffb17 	ldw	r4,-20(fp)
   19158:	180d883a 	mov	r6,r3
   1915c:	100f883a 	mov	r7,r2
   19160:	0013ca80 	call	13ca8 <OSFlagPost>

        space--;
   19164:	e0bff417 	ldw	r2,-48(fp)
   19168:	10bfffc4 	addi	r2,r2,-1
   1916c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   19170:	e0bff417 	ldw	r2,-48(fp)
   19174:	10000526 	beq	r2,zero,1918c <altera_avalon_jtag_uart_irq+0x248>
   19178:	e0bff517 	ldw	r2,-44(fp)
   1917c:	10c01017 	ldw	r3,64(r2)
   19180:	e0bff517 	ldw	r2,-44(fp)
   19184:	10800f17 	ldw	r2,60(r2)
   19188:	18bfd21e 	bne	r3,r2,190d4 <__alt_mem_Flash_flash_data+0xf40190d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1918c:	e0bff417 	ldw	r2,-48(fp)
   19190:	10001026 	beq	r2,zero,191d4 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   19194:	e0bff517 	ldw	r2,-44(fp)
   19198:	10c00817 	ldw	r3,32(r2)
   1919c:	00bfff44 	movi	r2,-3
   191a0:	1886703a 	and	r3,r3,r2
   191a4:	e0bff517 	ldw	r2,-44(fp)
   191a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   191ac:	e0bff517 	ldw	r2,-44(fp)
   191b0:	10800017 	ldw	r2,0(r2)
   191b4:	10800104 	addi	r2,r2,4
   191b8:	1007883a 	mov	r3,r2
   191bc:	e0bff517 	ldw	r2,-44(fp)
   191c0:	10800817 	ldw	r2,32(r2)
   191c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   191c8:	e0bff617 	ldw	r2,-40(fp)
   191cc:	10800104 	addi	r2,r2,4
   191d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   191d4:	003f6606 	br	18f70 <__alt_mem_Flash_flash_data+0xf4018f70>
}
   191d8:	e037883a 	mov	sp,fp
   191dc:	dfc00117 	ldw	ra,4(sp)
   191e0:	df000017 	ldw	fp,0(sp)
   191e4:	dec00204 	addi	sp,sp,8
   191e8:	f800283a 	ret

000191ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   191ec:	defff904 	addi	sp,sp,-28
   191f0:	dfc00615 	stw	ra,24(sp)
   191f4:	df000515 	stw	fp,20(sp)
   191f8:	df000504 	addi	fp,sp,20
   191fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   19200:	e0bfff17 	ldw	r2,-4(fp)
   19204:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   19208:	e0bffb17 	ldw	r2,-20(fp)
   1920c:	10800017 	ldw	r2,0(r2)
   19210:	10800104 	addi	r2,r2,4
   19214:	10800037 	ldwio	r2,0(r2)
   19218:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1921c:	e0bffc17 	ldw	r2,-16(fp)
   19220:	1081000c 	andi	r2,r2,1024
   19224:	10000b26 	beq	r2,zero,19254 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   19228:	e0bffb17 	ldw	r2,-20(fp)
   1922c:	10800017 	ldw	r2,0(r2)
   19230:	10800104 	addi	r2,r2,4
   19234:	1007883a 	mov	r3,r2
   19238:	e0bffb17 	ldw	r2,-20(fp)
   1923c:	10800817 	ldw	r2,32(r2)
   19240:	10810014 	ori	r2,r2,1024
   19244:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   19248:	e0bffb17 	ldw	r2,-20(fp)
   1924c:	10000915 	stw	zero,36(r2)
   19250:	00002206 	br	192dc <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   19254:	e0bffb17 	ldw	r2,-20(fp)
   19258:	10c00917 	ldw	r3,36(r2)
   1925c:	00a00034 	movhi	r2,32768
   19260:	10bfff04 	addi	r2,r2,-4
   19264:	10c01d36 	bltu	r2,r3,192dc <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   19268:	e0bffb17 	ldw	r2,-20(fp)
   1926c:	10800917 	ldw	r2,36(r2)
   19270:	10c00044 	addi	r3,r2,1
   19274:	e0bffb17 	ldw	r2,-20(fp)
   19278:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1927c:	e0bffb17 	ldw	r2,-20(fp)
   19280:	10c00917 	ldw	r3,36(r2)
   19284:	e0bffb17 	ldw	r2,-20(fp)
   19288:	10800117 	ldw	r2,4(r2)
   1928c:	18801336 	bltu	r3,r2,192dc <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   19290:	e0bffb17 	ldw	r2,-20(fp)
   19294:	10800c17 	ldw	r2,48(r2)
   19298:	e0bffd15 	stw	r2,-12(fp)
   1929c:	00800104 	movi	r2,4
   192a0:	e0bffe0d 	sth	r2,-8(fp)
   192a4:	00800044 	movi	r2,1
   192a8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   192ac:	008000b4 	movhi	r2,2
   192b0:	1082d144 	addi	r2,r2,2885
   192b4:	10800003 	ldbu	r2,0(r2)
   192b8:	10803fcc 	andi	r2,r2,255
   192bc:	10000726 	beq	r2,zero,192dc <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   192c0:	e17ffe0b 	ldhu	r5,-8(fp)
   192c4:	e0fffe83 	ldbu	r3,-6(fp)
   192c8:	e0bffec4 	addi	r2,fp,-5
   192cc:	e13ffd17 	ldw	r4,-12(fp)
   192d0:	180d883a 	mov	r6,r3
   192d4:	100f883a 	mov	r7,r2
   192d8:	0013ca80 	call	13ca8 <OSFlagPost>
   192dc:	008000b4 	movhi	r2,2
   192e0:	1082e604 	addi	r2,r2,2968
   192e4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   192e8:	e037883a 	mov	sp,fp
   192ec:	dfc00117 	ldw	ra,4(sp)
   192f0:	df000017 	ldw	fp,0(sp)
   192f4:	dec00204 	addi	sp,sp,8
   192f8:	f800283a 	ret

000192fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   192fc:	defffd04 	addi	sp,sp,-12
   19300:	df000215 	stw	fp,8(sp)
   19304:	df000204 	addi	fp,sp,8
   19308:	e13ffe15 	stw	r4,-8(fp)
   1930c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   19310:	00000506 	br	19328 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   19314:	e0bfff17 	ldw	r2,-4(fp)
   19318:	1090000c 	andi	r2,r2,16384
   1931c:	10000226 	beq	r2,zero,19328 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   19320:	00bffd44 	movi	r2,-11
   19324:	00000b06 	br	19354 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   19328:	e0bffe17 	ldw	r2,-8(fp)
   1932c:	10c01017 	ldw	r3,64(r2)
   19330:	e0bffe17 	ldw	r2,-8(fp)
   19334:	10800f17 	ldw	r2,60(r2)
   19338:	18800526 	beq	r3,r2,19350 <altera_avalon_jtag_uart_close+0x54>
   1933c:	e0bffe17 	ldw	r2,-8(fp)
   19340:	10c00917 	ldw	r3,36(r2)
   19344:	e0bffe17 	ldw	r2,-8(fp)
   19348:	10800117 	ldw	r2,4(r2)
   1934c:	18bff136 	bltu	r3,r2,19314 <__alt_mem_Flash_flash_data+0xf4019314>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   19350:	0005883a 	mov	r2,zero
}
   19354:	e037883a 	mov	sp,fp
   19358:	df000017 	ldw	fp,0(sp)
   1935c:	dec00104 	addi	sp,sp,4
   19360:	f800283a 	ret

00019364 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   19364:	defffa04 	addi	sp,sp,-24
   19368:	df000515 	stw	fp,20(sp)
   1936c:	df000504 	addi	fp,sp,20
   19370:	e13ffd15 	stw	r4,-12(fp)
   19374:	e17ffe15 	stw	r5,-8(fp)
   19378:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1937c:	00bff9c4 	movi	r2,-25
   19380:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   19384:	e0bffe17 	ldw	r2,-8(fp)
   19388:	10da8060 	cmpeqi	r3,r2,27137
   1938c:	1800031e 	bne	r3,zero,1939c <altera_avalon_jtag_uart_ioctl+0x38>
   19390:	109a80a0 	cmpeqi	r2,r2,27138
   19394:	1000191e 	bne	r2,zero,193fc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   19398:	00002806 	br	1943c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1939c:	e0bffd17 	ldw	r2,-12(fp)
   193a0:	10c00117 	ldw	r3,4(r2)
   193a4:	00a00034 	movhi	r2,32768
   193a8:	10bfffc4 	addi	r2,r2,-1
   193ac:	18801226 	beq	r3,r2,193f8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   193b0:	e0bfff17 	ldw	r2,-4(fp)
   193b4:	10800017 	ldw	r2,0(r2)
   193b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   193bc:	e0bffc17 	ldw	r2,-16(fp)
   193c0:	10800090 	cmplti	r2,r2,2
   193c4:	1000061e 	bne	r2,zero,193e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   193c8:	e0fffc17 	ldw	r3,-16(fp)
   193cc:	00a00034 	movhi	r2,32768
   193d0:	10bfffc4 	addi	r2,r2,-1
   193d4:	18800226 	beq	r3,r2,193e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   193d8:	e0bffc17 	ldw	r2,-16(fp)
   193dc:	00000206 	br	193e8 <altera_avalon_jtag_uart_ioctl+0x84>
   193e0:	00a00034 	movhi	r2,32768
   193e4:	10bfff84 	addi	r2,r2,-2
   193e8:	e0fffd17 	ldw	r3,-12(fp)
   193ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   193f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   193f4:	00001106 	br	1943c <altera_avalon_jtag_uart_ioctl+0xd8>
   193f8:	00001006 	br	1943c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   193fc:	e0bffd17 	ldw	r2,-12(fp)
   19400:	10c00117 	ldw	r3,4(r2)
   19404:	00a00034 	movhi	r2,32768
   19408:	10bfffc4 	addi	r2,r2,-1
   1940c:	18800a26 	beq	r3,r2,19438 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   19410:	e0bffd17 	ldw	r2,-12(fp)
   19414:	10c00917 	ldw	r3,36(r2)
   19418:	e0bffd17 	ldw	r2,-12(fp)
   1941c:	10800117 	ldw	r2,4(r2)
   19420:	1885803a 	cmpltu	r2,r3,r2
   19424:	10c03fcc 	andi	r3,r2,255
   19428:	e0bfff17 	ldw	r2,-4(fp)
   1942c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   19430:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   19434:	00000006 	br	19438 <altera_avalon_jtag_uart_ioctl+0xd4>
   19438:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1943c:	e0bffb17 	ldw	r2,-20(fp)
}
   19440:	e037883a 	mov	sp,fp
   19444:	df000017 	ldw	fp,0(sp)
   19448:	dec00104 	addi	sp,sp,4
   1944c:	f800283a 	ret

00019450 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   19450:	deffec04 	addi	sp,sp,-80
   19454:	dfc01315 	stw	ra,76(sp)
   19458:	df001215 	stw	fp,72(sp)
   1945c:	df001204 	addi	fp,sp,72
   19460:	e13ffc15 	stw	r4,-16(fp)
   19464:	e17ffd15 	stw	r5,-12(fp)
   19468:	e1bffe15 	stw	r6,-8(fp)
   1946c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   19470:	e0bffd17 	ldw	r2,-12(fp)
   19474:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   19478:	e0bffc17 	ldw	r2,-16(fp)
   1947c:	10800a17 	ldw	r2,40(r2)
   19480:	e0bff415 	stw	r2,-48(fp)
   19484:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   19488:	e0fff50b 	ldhu	r3,-44(fp)
   1948c:	e0bffb04 	addi	r2,fp,-20
   19490:	e13ff417 	ldw	r4,-48(fp)
   19494:	180b883a 	mov	r5,r3
   19498:	100d883a 	mov	r6,r2
   1949c:	00162f80 	call	162f8 <OSSemPend>

  while (space > 0)
   194a0:	00006506 	br	19638 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   194a4:	e0bffc17 	ldw	r2,-16(fp)
   194a8:	10800d17 	ldw	r2,52(r2)
   194ac:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   194b0:	e0bffc17 	ldw	r2,-16(fp)
   194b4:	10800e17 	ldw	r2,56(r2)
   194b8:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   194bc:	e0fff117 	ldw	r3,-60(fp)
   194c0:	e0bff217 	ldw	r2,-56(fp)
   194c4:	18800536 	bltu	r3,r2,194dc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   194c8:	e0fff117 	ldw	r3,-60(fp)
   194cc:	e0bff217 	ldw	r2,-56(fp)
   194d0:	1885c83a 	sub	r2,r3,r2
   194d4:	e0bff015 	stw	r2,-64(fp)
   194d8:	00000406 	br	194ec <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   194dc:	00c20004 	movi	r3,2048
   194e0:	e0bff217 	ldw	r2,-56(fp)
   194e4:	1885c83a 	sub	r2,r3,r2
   194e8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   194ec:	e0bff017 	ldw	r2,-64(fp)
   194f0:	1000011e 	bne	r2,zero,194f8 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   194f4:	00001d06 	br	1956c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   194f8:	e0fffe17 	ldw	r3,-8(fp)
   194fc:	e0bff017 	ldw	r2,-64(fp)
   19500:	1880022e 	bgeu	r3,r2,1950c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   19504:	e0bffe17 	ldw	r2,-8(fp)
   19508:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1950c:	e0bff217 	ldw	r2,-56(fp)
   19510:	10801104 	addi	r2,r2,68
   19514:	e0fffc17 	ldw	r3,-16(fp)
   19518:	1885883a 	add	r2,r3,r2
   1951c:	e13fef17 	ldw	r4,-68(fp)
   19520:	100b883a 	mov	r5,r2
   19524:	e1bff017 	ldw	r6,-64(fp)
   19528:	000830c0 	call	830c <memcpy>
      ptr   += n;
   1952c:	e0ffef17 	ldw	r3,-68(fp)
   19530:	e0bff017 	ldw	r2,-64(fp)
   19534:	1885883a 	add	r2,r3,r2
   19538:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1953c:	e0fffe17 	ldw	r3,-8(fp)
   19540:	e0bff017 	ldw	r2,-64(fp)
   19544:	1885c83a 	sub	r2,r3,r2
   19548:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1954c:	e0fff217 	ldw	r3,-56(fp)
   19550:	e0bff017 	ldw	r2,-64(fp)
   19554:	1885883a 	add	r2,r3,r2
   19558:	10c1ffcc 	andi	r3,r2,2047
   1955c:	e0bffc17 	ldw	r2,-16(fp)
   19560:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   19564:	e0bffe17 	ldw	r2,-8(fp)
   19568:	00bfce16 	blt	zero,r2,194a4 <__alt_mem_Flash_flash_data+0xf40194a4>

    /* If we read any data then return it */
    if (ptr != buffer)
   1956c:	e0ffef17 	ldw	r3,-68(fp)
   19570:	e0bffd17 	ldw	r2,-12(fp)
   19574:	18800126 	beq	r3,r2,1957c <altera_avalon_jtag_uart_read+0x12c>
      break;
   19578:	00003106 	br	19640 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1957c:	e0bfff17 	ldw	r2,-4(fp)
   19580:	1090000c 	andi	r2,r2,16384
   19584:	10000126 	beq	r2,zero,1958c <altera_avalon_jtag_uart_read+0x13c>
      break;
   19588:	00002d06 	br	19640 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1958c:	008000b4 	movhi	r2,2
   19590:	1082d144 	addi	r2,r2,2885
   19594:	10800003 	ldbu	r2,0(r2)
   19598:	10803fcc 	andi	r2,r2,255
   1959c:	10800058 	cmpnei	r2,r2,1
   195a0:	1000161e 	bne	r2,zero,195fc <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   195a4:	e0bffc17 	ldw	r2,-16(fp)
   195a8:	10800c17 	ldw	r2,48(r2)
   195ac:	e0bff615 	stw	r2,-40(fp)
   195b0:	00800144 	movi	r2,5
   195b4:	e0bff70d 	sth	r2,-36(fp)
   195b8:	00bfe0c4 	movi	r2,-125
   195bc:	e0bff785 	stb	r2,-34(fp)
   195c0:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   195c4:	008000b4 	movhi	r2,2
   195c8:	1082d144 	addi	r2,r2,2885
   195cc:	10800003 	ldbu	r2,0(r2)
   195d0:	10803fcc 	andi	r2,r2,255
   195d4:	10001326 	beq	r2,zero,19624 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   195d8:	e17ff70b 	ldhu	r5,-36(fp)
   195dc:	e1bff783 	ldbu	r6,-34(fp)
   195e0:	e0fff80b 	ldhu	r3,-32(fp)
   195e4:	e0bffb44 	addi	r2,fp,-19
   195e8:	d8800015 	stw	r2,0(sp)
   195ec:	e13ff617 	ldw	r4,-40(fp)
   195f0:	180f883a 	mov	r7,r3
   195f4:	00136500 	call	13650 <OSFlagPend>
   195f8:	00000a06 	br	19624 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   195fc:	0001883a 	nop
   19600:	e0bffc17 	ldw	r2,-16(fp)
   19604:	10c00d17 	ldw	r3,52(r2)
   19608:	e0bff117 	ldw	r2,-60(fp)
   1960c:	1880051e 	bne	r3,r2,19624 <altera_avalon_jtag_uart_read+0x1d4>
   19610:	e0bffc17 	ldw	r2,-16(fp)
   19614:	10c00917 	ldw	r3,36(r2)
   19618:	e0bffc17 	ldw	r2,-16(fp)
   1961c:	10800117 	ldw	r2,4(r2)
   19620:	18bff736 	bltu	r3,r2,19600 <__alt_mem_Flash_flash_data+0xf4019600>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   19624:	e0bffc17 	ldw	r2,-16(fp)
   19628:	10c00d17 	ldw	r3,52(r2)
   1962c:	e0bff117 	ldw	r2,-60(fp)
   19630:	1880011e 	bne	r3,r2,19638 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   19634:	00000206 	br	19640 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   19638:	e0bffe17 	ldw	r2,-8(fp)
   1963c:	00bf9916 	blt	zero,r2,194a4 <__alt_mem_Flash_flash_data+0xf40194a4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   19640:	e0bffc17 	ldw	r2,-16(fp)
   19644:	10800a17 	ldw	r2,40(r2)
   19648:	1009883a 	mov	r4,r2
   1964c:	00166cc0 	call	166cc <OSSemPost>

  if (ptr != buffer)
   19650:	e0ffef17 	ldw	r3,-68(fp)
   19654:	e0bffd17 	ldw	r2,-12(fp)
   19658:	18801826 	beq	r3,r2,196bc <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1965c:	0005303a 	rdctl	r2,status
   19660:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19664:	e0fff917 	ldw	r3,-28(fp)
   19668:	00bfff84 	movi	r2,-2
   1966c:	1884703a 	and	r2,r3,r2
   19670:	1001703a 	wrctl	status,r2
  
  return context;
   19674:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   19678:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1967c:	e0bffc17 	ldw	r2,-16(fp)
   19680:	10800817 	ldw	r2,32(r2)
   19684:	10c00054 	ori	r3,r2,1
   19688:	e0bffc17 	ldw	r2,-16(fp)
   1968c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19690:	e0bffc17 	ldw	r2,-16(fp)
   19694:	10800017 	ldw	r2,0(r2)
   19698:	10800104 	addi	r2,r2,4
   1969c:	1007883a 	mov	r3,r2
   196a0:	e0bffc17 	ldw	r2,-16(fp)
   196a4:	10800817 	ldw	r2,32(r2)
   196a8:	18800035 	stwio	r2,0(r3)
   196ac:	e0bff317 	ldw	r2,-52(fp)
   196b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   196b4:	e0bffa17 	ldw	r2,-24(fp)
   196b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   196bc:	e0ffef17 	ldw	r3,-68(fp)
   196c0:	e0bffd17 	ldw	r2,-12(fp)
   196c4:	18800426 	beq	r3,r2,196d8 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   196c8:	e0ffef17 	ldw	r3,-68(fp)
   196cc:	e0bffd17 	ldw	r2,-12(fp)
   196d0:	1885c83a 	sub	r2,r3,r2
   196d4:	00000606 	br	196f0 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   196d8:	e0bfff17 	ldw	r2,-4(fp)
   196dc:	1090000c 	andi	r2,r2,16384
   196e0:	10000226 	beq	r2,zero,196ec <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   196e4:	00bffd44 	movi	r2,-11
   196e8:	00000106 	br	196f0 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   196ec:	00bffec4 	movi	r2,-5
}
   196f0:	e037883a 	mov	sp,fp
   196f4:	dfc00117 	ldw	ra,4(sp)
   196f8:	df000017 	ldw	fp,0(sp)
   196fc:	dec00204 	addi	sp,sp,8
   19700:	f800283a 	ret

00019704 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   19704:	deffed04 	addi	sp,sp,-76
   19708:	dfc01215 	stw	ra,72(sp)
   1970c:	df001115 	stw	fp,68(sp)
   19710:	df001104 	addi	fp,sp,68
   19714:	e13ffc15 	stw	r4,-16(fp)
   19718:	e17ffd15 	stw	r5,-12(fp)
   1971c:	e1bffe15 	stw	r6,-8(fp)
   19720:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   19724:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   19728:	e0bffd17 	ldw	r2,-12(fp)
   1972c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   19730:	e0bffc17 	ldw	r2,-16(fp)
   19734:	10800b17 	ldw	r2,44(r2)
   19738:	e0bff515 	stw	r2,-44(fp)
   1973c:	e03ff60d 	sth	zero,-40(fp)
   19740:	e0fff60b 	ldhu	r3,-40(fp)
   19744:	e0bffbc4 	addi	r2,fp,-17
   19748:	e13ff517 	ldw	r4,-44(fp)
   1974c:	180b883a 	mov	r5,r3
   19750:	100d883a 	mov	r6,r2
   19754:	00162f80 	call	162f8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   19758:	00003806 	br	1983c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1975c:	e0bffc17 	ldw	r2,-16(fp)
   19760:	10800f17 	ldw	r2,60(r2)
   19764:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   19768:	e0bffc17 	ldw	r2,-16(fp)
   1976c:	10801017 	ldw	r2,64(r2)
   19770:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   19774:	e0fff317 	ldw	r3,-52(fp)
   19778:	e0bff017 	ldw	r2,-64(fp)
   1977c:	1880062e 	bgeu	r3,r2,19798 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   19780:	e0fff017 	ldw	r3,-64(fp)
   19784:	e0bff317 	ldw	r2,-52(fp)
   19788:	1885c83a 	sub	r2,r3,r2
   1978c:	10bfffc4 	addi	r2,r2,-1
   19790:	e0bff115 	stw	r2,-60(fp)
   19794:	00000b06 	br	197c4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   19798:	e0bff017 	ldw	r2,-64(fp)
   1979c:	10000526 	beq	r2,zero,197b4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   197a0:	00c20004 	movi	r3,2048
   197a4:	e0bff317 	ldw	r2,-52(fp)
   197a8:	1885c83a 	sub	r2,r3,r2
   197ac:	e0bff115 	stw	r2,-60(fp)
   197b0:	00000406 	br	197c4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   197b4:	00c1ffc4 	movi	r3,2047
   197b8:	e0bff317 	ldw	r2,-52(fp)
   197bc:	1885c83a 	sub	r2,r3,r2
   197c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   197c4:	e0bff117 	ldw	r2,-60(fp)
   197c8:	1000011e 	bne	r2,zero,197d0 <altera_avalon_jtag_uart_write+0xcc>
        break;
   197cc:	00001d06 	br	19844 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   197d0:	e0fffe17 	ldw	r3,-8(fp)
   197d4:	e0bff117 	ldw	r2,-60(fp)
   197d8:	1880022e 	bgeu	r3,r2,197e4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   197dc:	e0bffe17 	ldw	r2,-8(fp)
   197e0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   197e4:	e0bff317 	ldw	r2,-52(fp)
   197e8:	10821104 	addi	r2,r2,2116
   197ec:	e0fffc17 	ldw	r3,-16(fp)
   197f0:	1885883a 	add	r2,r3,r2
   197f4:	1009883a 	mov	r4,r2
   197f8:	e17ffd17 	ldw	r5,-12(fp)
   197fc:	e1bff117 	ldw	r6,-60(fp)
   19800:	000830c0 	call	830c <memcpy>
      ptr   += n;
   19804:	e0fffd17 	ldw	r3,-12(fp)
   19808:	e0bff117 	ldw	r2,-60(fp)
   1980c:	1885883a 	add	r2,r3,r2
   19810:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   19814:	e0fffe17 	ldw	r3,-8(fp)
   19818:	e0bff117 	ldw	r2,-60(fp)
   1981c:	1885c83a 	sub	r2,r3,r2
   19820:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19824:	e0fff317 	ldw	r3,-52(fp)
   19828:	e0bff117 	ldw	r2,-60(fp)
   1982c:	1885883a 	add	r2,r3,r2
   19830:	10c1ffcc 	andi	r3,r2,2047
   19834:	e0bffc17 	ldw	r2,-16(fp)
   19838:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1983c:	e0bffe17 	ldw	r2,-8(fp)
   19840:	00bfc616 	blt	zero,r2,1975c <__alt_mem_Flash_flash_data+0xf401975c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19844:	0005303a 	rdctl	r2,status
   19848:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1984c:	e0fff717 	ldw	r3,-36(fp)
   19850:	00bfff84 	movi	r2,-2
   19854:	1884703a 	and	r2,r3,r2
   19858:	1001703a 	wrctl	status,r2
  
  return context;
   1985c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   19860:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   19864:	e0bffc17 	ldw	r2,-16(fp)
   19868:	10800817 	ldw	r2,32(r2)
   1986c:	10c00094 	ori	r3,r2,2
   19870:	e0bffc17 	ldw	r2,-16(fp)
   19874:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19878:	e0bffc17 	ldw	r2,-16(fp)
   1987c:	10800017 	ldw	r2,0(r2)
   19880:	10800104 	addi	r2,r2,4
   19884:	1007883a 	mov	r3,r2
   19888:	e0bffc17 	ldw	r2,-16(fp)
   1988c:	10800817 	ldw	r2,32(r2)
   19890:	18800035 	stwio	r2,0(r3)
   19894:	e0bff417 	ldw	r2,-48(fp)
   19898:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1989c:	e0bff817 	ldw	r2,-32(fp)
   198a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   198a4:	e0bffe17 	ldw	r2,-8(fp)
   198a8:	00802e0e 	bge	zero,r2,19964 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   198ac:	e0bfff17 	ldw	r2,-4(fp)
   198b0:	1090000c 	andi	r2,r2,16384
   198b4:	10000126 	beq	r2,zero,198bc <altera_avalon_jtag_uart_write+0x1b8>
        break;
   198b8:	00002c06 	br	1996c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   198bc:	008000b4 	movhi	r2,2
   198c0:	1082d144 	addi	r2,r2,2885
   198c4:	10800003 	ldbu	r2,0(r2)
   198c8:	10803fcc 	andi	r2,r2,255
   198cc:	10800058 	cmpnei	r2,r2,1
   198d0:	1000161e 	bne	r2,zero,1992c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   198d4:	e0bffc17 	ldw	r2,-16(fp)
   198d8:	10800c17 	ldw	r2,48(r2)
   198dc:	e0bff915 	stw	r2,-28(fp)
   198e0:	00800184 	movi	r2,6
   198e4:	e0bffa0d 	sth	r2,-24(fp)
   198e8:	00bfe0c4 	movi	r2,-125
   198ec:	e0bffa85 	stb	r2,-22(fp)
   198f0:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   198f4:	008000b4 	movhi	r2,2
   198f8:	1082d144 	addi	r2,r2,2885
   198fc:	10800003 	ldbu	r2,0(r2)
   19900:	10803fcc 	andi	r2,r2,255
   19904:	10001326 	beq	r2,zero,19954 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   19908:	e17ffa0b 	ldhu	r5,-24(fp)
   1990c:	e1bffa83 	ldbu	r6,-22(fp)
   19910:	e0fffb0b 	ldhu	r3,-20(fp)
   19914:	e0bffb84 	addi	r2,fp,-18
   19918:	d8800015 	stw	r2,0(sp)
   1991c:	e13ff917 	ldw	r4,-28(fp)
   19920:	180f883a 	mov	r7,r3
   19924:	00136500 	call	13650 <OSFlagPend>
   19928:	00000a06 	br	19954 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1992c:	0001883a 	nop
   19930:	e0bffc17 	ldw	r2,-16(fp)
   19934:	10c01017 	ldw	r3,64(r2)
   19938:	e0bff017 	ldw	r2,-64(fp)
   1993c:	1880051e 	bne	r3,r2,19954 <altera_avalon_jtag_uart_write+0x250>
   19940:	e0bffc17 	ldw	r2,-16(fp)
   19944:	10c00917 	ldw	r3,36(r2)
   19948:	e0bffc17 	ldw	r2,-16(fp)
   1994c:	10800117 	ldw	r2,4(r2)
   19950:	18bff736 	bltu	r3,r2,19930 <__alt_mem_Flash_flash_data+0xf4019930>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   19954:	e0bffc17 	ldw	r2,-16(fp)
   19958:	10800917 	ldw	r2,36(r2)
   1995c:	10000126 	beq	r2,zero,19964 <altera_avalon_jtag_uart_write+0x260>
         break;
   19960:	00000206 	br	1996c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   19964:	e0bffe17 	ldw	r2,-8(fp)
   19968:	00bf7b16 	blt	zero,r2,19758 <__alt_mem_Flash_flash_data+0xf4019758>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1996c:	e0bffc17 	ldw	r2,-16(fp)
   19970:	10800b17 	ldw	r2,44(r2)
   19974:	1009883a 	mov	r4,r2
   19978:	00166cc0 	call	166cc <OSSemPost>

  if (ptr != start)
   1997c:	e0fffd17 	ldw	r3,-12(fp)
   19980:	e0bff217 	ldw	r2,-56(fp)
   19984:	18800426 	beq	r3,r2,19998 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   19988:	e0fffd17 	ldw	r3,-12(fp)
   1998c:	e0bff217 	ldw	r2,-56(fp)
   19990:	1885c83a 	sub	r2,r3,r2
   19994:	00000606 	br	199b0 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   19998:	e0bfff17 	ldw	r2,-4(fp)
   1999c:	1090000c 	andi	r2,r2,16384
   199a0:	10000226 	beq	r2,zero,199ac <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   199a4:	00bffd44 	movi	r2,-11
   199a8:	00000106 	br	199b0 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   199ac:	00bffec4 	movi	r2,-5
}
   199b0:	e037883a 	mov	sp,fp
   199b4:	dfc00117 	ldw	ra,4(sp)
   199b8:	df000017 	ldw	fp,0(sp)
   199bc:	dec00204 	addi	sp,sp,8
   199c0:	f800283a 	ret

000199c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   199c4:	defff904 	addi	sp,sp,-28
   199c8:	dfc00615 	stw	ra,24(sp)
   199cc:	df000515 	stw	fp,20(sp)
   199d0:	df000504 	addi	fp,sp,20
   199d4:	e13ffe15 	stw	r4,-8(fp)
   199d8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   199dc:	0007883a 	mov	r3,zero
   199e0:	e0bffe17 	ldw	r2,-8(fp)
   199e4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   199e8:	e0bffe17 	ldw	r2,-8(fp)
   199ec:	10800104 	addi	r2,r2,4
   199f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199f4:	0005303a 	rdctl	r2,status
   199f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   199fc:	e0fffc17 	ldw	r3,-16(fp)
   19a00:	00bfff84 	movi	r2,-2
   19a04:	1884703a 	and	r2,r3,r2
   19a08:	1001703a 	wrctl	status,r2
  
  return context;
   19a0c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   19a10:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   19a14:	001ba000 	call	1ba00 <alt_tick>
   19a18:	e0bffb17 	ldw	r2,-20(fp)
   19a1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a20:	e0bffd17 	ldw	r2,-12(fp)
   19a24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   19a28:	e037883a 	mov	sp,fp
   19a2c:	dfc00117 	ldw	ra,4(sp)
   19a30:	df000017 	ldw	fp,0(sp)
   19a34:	dec00204 	addi	sp,sp,8
   19a38:	f800283a 	ret

00019a3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   19a3c:	defff904 	addi	sp,sp,-28
   19a40:	dfc00615 	stw	ra,24(sp)
   19a44:	df000515 	stw	fp,20(sp)
   19a48:	df000504 	addi	fp,sp,20
   19a4c:	e13ffc15 	stw	r4,-16(fp)
   19a50:	e17ffd15 	stw	r5,-12(fp)
   19a54:	e1bffe15 	stw	r6,-8(fp)
   19a58:	e1ffff15 	stw	r7,-4(fp)
   19a5c:	e0bfff17 	ldw	r2,-4(fp)
   19a60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   19a64:	008000b4 	movhi	r2,2
   19a68:	1082e604 	addi	r2,r2,2968
   19a6c:	10800017 	ldw	r2,0(r2)
   19a70:	1000041e 	bne	r2,zero,19a84 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   19a74:	008000b4 	movhi	r2,2
   19a78:	1082e604 	addi	r2,r2,2968
   19a7c:	e0fffb17 	ldw	r3,-20(fp)
   19a80:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   19a84:	e0bffc17 	ldw	r2,-16(fp)
   19a88:	10800104 	addi	r2,r2,4
   19a8c:	00c001c4 	movi	r3,7
   19a90:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   19a94:	e13ffe17 	ldw	r4,-8(fp)
   19a98:	e17ffc17 	ldw	r5,-16(fp)
   19a9c:	018000b4 	movhi	r6,2
   19aa0:	31a67104 	addi	r6,r6,-26172
   19aa4:	001b5440 	call	1b544 <alt_irq_register>
#endif  
}
   19aa8:	e037883a 	mov	sp,fp
   19aac:	dfc00117 	ldw	ra,4(sp)
   19ab0:	df000017 	ldw	fp,0(sp)
   19ab4:	dec00204 	addi	sp,sp,8
   19ab8:	f800283a 	ret

00019abc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   19abc:	defffc04 	addi	sp,sp,-16
   19ac0:	df000315 	stw	fp,12(sp)
   19ac4:	df000304 	addi	fp,sp,12
   19ac8:	e13ffe15 	stw	r4,-8(fp)
   19acc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   19ad0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   19ad4:	e0bfff17 	ldw	r2,-4(fp)
   19ad8:	1000061e 	bne	r2,zero,19af4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   19adc:	e0bffe17 	ldw	r2,-8(fp)
   19ae0:	1007883a 	mov	r3,r2
   19ae4:	e0bffd03 	ldbu	r2,-12(fp)
   19ae8:	1884b03a 	or	r2,r3,r2
   19aec:	e0bffd05 	stb	r2,-12(fp)
   19af0:	00000806 	br	19b14 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   19af4:	e0bffe17 	ldw	r2,-8(fp)
   19af8:	1007883a 	mov	r3,r2
   19afc:	e0bffd03 	ldbu	r2,-12(fp)
   19b00:	1884b03a 	or	r2,r3,r2
   19b04:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   19b08:	e0bffd03 	ldbu	r2,-12(fp)
   19b0c:	10801014 	ori	r2,r2,64
   19b10:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   19b14:	e0fffd03 	ldbu	r3,-12(fp)
   19b18:	00bfe004 	movi	r2,-128
   19b1c:	1884b03a 	or	r2,r3,r2
}
   19b20:	e037883a 	mov	sp,fp
   19b24:	df000017 	ldw	fp,0(sp)
   19b28:	dec00104 	addi	sp,sp,4
   19b2c:	f800283a 	ret

00019b30 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   19b30:	defffd04 	addi	sp,sp,-12
   19b34:	df000215 	stw	fp,8(sp)
   19b38:	df000204 	addi	fp,sp,8
   19b3c:	e13ffe15 	stw	r4,-8(fp)
   19b40:	2805883a 	mov	r2,r5
   19b44:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   19b48:	e0bffe17 	ldw	r2,-8(fp)
   19b4c:	10800a17 	ldw	r2,40(r2)
   19b50:	1007883a 	mov	r3,r2
   19b54:	e0bfff03 	ldbu	r2,-4(fp)
   19b58:	18800025 	stbio	r2,0(r3)
}
   19b5c:	e037883a 	mov	sp,fp
   19b60:	df000017 	ldw	fp,0(sp)
   19b64:	dec00104 	addi	sp,sp,4
   19b68:	f800283a 	ret

00019b6c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   19b6c:	defffe04 	addi	sp,sp,-8
   19b70:	df000115 	stw	fp,4(sp)
   19b74:	df000104 	addi	fp,sp,4
   19b78:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   19b7c:	e0bfff17 	ldw	r2,-4(fp)
   19b80:	10800a17 	ldw	r2,40(r2)
   19b84:	1007883a 	mov	r3,r2
   19b88:	00800044 	movi	r2,1
   19b8c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   19b90:	e037883a 	mov	sp,fp
   19b94:	df000017 	ldw	fp,0(sp)
   19b98:	dec00104 	addi	sp,sp,4
   19b9c:	f800283a 	ret

00019ba0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   19ba0:	defffc04 	addi	sp,sp,-16
   19ba4:	dfc00315 	stw	ra,12(sp)
   19ba8:	df000215 	stw	fp,8(sp)
   19bac:	df000204 	addi	fp,sp,8
   19bb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   19bb4:	e13fff17 	ldw	r4,-4(fp)
   19bb8:	014000b4 	movhi	r5,2
   19bbc:	297ac704 	addi	r5,r5,-5348
   19bc0:	001b34c0 	call	1b34c <alt_find_dev>
   19bc4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19bc8:	e0bffe17 	ldw	r2,-8(fp)
}
   19bcc:	e037883a 	mov	sp,fp
   19bd0:	dfc00117 	ldw	ra,4(sp)
   19bd4:	df000017 	ldw	fp,0(sp)
   19bd8:	dec00204 	addi	sp,sp,8
   19bdc:	f800283a 	ret

00019be0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   19be0:	defffb04 	addi	sp,sp,-20
   19be4:	df000415 	stw	fp,16(sp)
   19be8:	df000404 	addi	fp,sp,16
   19bec:	e13ffd15 	stw	r4,-12(fp)
   19bf0:	e17ffe15 	stw	r5,-8(fp)
   19bf4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19bf8:	e03ffc15 	stw	zero,-16(fp)
   19bfc:	00000f06 	br	19c3c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   19c00:	e0bffd17 	ldw	r2,-12(fp)
   19c04:	10800a17 	ldw	r2,40(r2)
   19c08:	10800044 	addi	r2,r2,1
   19c0c:	1009883a 	mov	r4,r2
   19c10:	e0fffe17 	ldw	r3,-8(fp)
   19c14:	e0bffc17 	ldw	r2,-16(fp)
   19c18:	1885883a 	add	r2,r3,r2
   19c1c:	10800003 	ldbu	r2,0(r2)
   19c20:	10803fcc 	andi	r2,r2,255
   19c24:	1080201c 	xori	r2,r2,128
   19c28:	10bfe004 	addi	r2,r2,-128
   19c2c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   19c30:	e0bffc17 	ldw	r2,-16(fp)
   19c34:	10800044 	addi	r2,r2,1
   19c38:	e0bffc15 	stw	r2,-16(fp)
   19c3c:	e0fffc17 	ldw	r3,-16(fp)
   19c40:	e0bfff17 	ldw	r2,-4(fp)
   19c44:	18bfee36 	bltu	r3,r2,19c00 <__alt_mem_Flash_flash_data+0xf4019c00>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   19c48:	e037883a 	mov	sp,fp
   19c4c:	df000017 	ldw	fp,0(sp)
   19c50:	dec00104 	addi	sp,sp,4
   19c54:	f800283a 	ret

00019c58 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   19c58:	defffd04 	addi	sp,sp,-12
   19c5c:	df000215 	stw	fp,8(sp)
   19c60:	df000204 	addi	fp,sp,8
   19c64:	e13ffe15 	stw	r4,-8(fp)
   19c68:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   19c6c:	00000d06 	br	19ca4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   19c70:	e0bffe17 	ldw	r2,-8(fp)
   19c74:	10800a17 	ldw	r2,40(r2)
   19c78:	10800044 	addi	r2,r2,1
   19c7c:	1007883a 	mov	r3,r2
   19c80:	e0bfff17 	ldw	r2,-4(fp)
   19c84:	10800003 	ldbu	r2,0(r2)
   19c88:	10803fcc 	andi	r2,r2,255
   19c8c:	1080201c 	xori	r2,r2,128
   19c90:	10bfe004 	addi	r2,r2,-128
   19c94:	18800025 	stbio	r2,0(r3)
		++ptr;
   19c98:	e0bfff17 	ldw	r2,-4(fp)
   19c9c:	10800044 	addi	r2,r2,1
   19ca0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   19ca4:	e0bfff17 	ldw	r2,-4(fp)
   19ca8:	10800003 	ldbu	r2,0(r2)
   19cac:	10803fcc 	andi	r2,r2,255
   19cb0:	1080201c 	xori	r2,r2,128
   19cb4:	10bfe004 	addi	r2,r2,-128
   19cb8:	103fed1e 	bne	r2,zero,19c70 <__alt_mem_Flash_flash_data+0xf4019c70>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   19cbc:	e037883a 	mov	sp,fp
   19cc0:	df000017 	ldw	fp,0(sp)
   19cc4:	dec00104 	addi	sp,sp,4
   19cc8:	f800283a 	ret

00019ccc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   19ccc:	defffb04 	addi	sp,sp,-20
   19cd0:	dfc00415 	stw	ra,16(sp)
   19cd4:	df000315 	stw	fp,12(sp)
   19cd8:	df000304 	addi	fp,sp,12
   19cdc:	e13ffd15 	stw	r4,-12(fp)
   19ce0:	e17ffe15 	stw	r5,-8(fp)
   19ce4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   19ce8:	e0bffd17 	ldw	r2,-12(fp)
   19cec:	10c00017 	ldw	r3,0(r2)
   19cf0:	e0bfff17 	ldw	r2,-4(fp)
   19cf4:	1809883a 	mov	r4,r3
   19cf8:	e17ffe17 	ldw	r5,-8(fp)
   19cfc:	100d883a 	mov	r6,r2
   19d00:	0019be00 	call	19be0 <alt_up_character_lcd_write>
	return 0;
   19d04:	0005883a 	mov	r2,zero
}
   19d08:	e037883a 	mov	sp,fp
   19d0c:	dfc00117 	ldw	ra,4(sp)
   19d10:	df000017 	ldw	fp,0(sp)
   19d14:	dec00204 	addi	sp,sp,8
   19d18:	f800283a 	ret

00019d1c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   19d1c:	defffa04 	addi	sp,sp,-24
   19d20:	dfc00515 	stw	ra,20(sp)
   19d24:	df000415 	stw	fp,16(sp)
   19d28:	df000404 	addi	fp,sp,16
   19d2c:	e13ffd15 	stw	r4,-12(fp)
   19d30:	e17ffe15 	stw	r5,-8(fp)
   19d34:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   19d38:	e0bffe17 	ldw	r2,-8(fp)
   19d3c:	10800a28 	cmpgeui	r2,r2,40
   19d40:	1000031e 	bne	r2,zero,19d50 <alt_up_character_lcd_set_cursor_pos+0x34>
   19d44:	e0bfff17 	ldw	r2,-4(fp)
   19d48:	108000b0 	cmpltui	r2,r2,2
   19d4c:	1000021e 	bne	r2,zero,19d58 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   19d50:	00bfffc4 	movi	r2,-1
   19d54:	00000906 	br	19d7c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19d58:	e13ffe17 	ldw	r4,-8(fp)
   19d5c:	e17fff17 	ldw	r5,-4(fp)
   19d60:	0019abc0 	call	19abc <get_DDRAM_addr>
   19d64:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   19d68:	e0bffc03 	ldbu	r2,-16(fp)
   19d6c:	e13ffd17 	ldw	r4,-12(fp)
   19d70:	100b883a 	mov	r5,r2
   19d74:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
	return 0;
   19d78:	0005883a 	mov	r2,zero
}
   19d7c:	e037883a 	mov	sp,fp
   19d80:	dfc00117 	ldw	ra,4(sp)
   19d84:	df000017 	ldw	fp,0(sp)
   19d88:	dec00204 	addi	sp,sp,8
   19d8c:	f800283a 	ret

00019d90 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19d90:	defffb04 	addi	sp,sp,-20
   19d94:	dfc00415 	stw	ra,16(sp)
   19d98:	df000315 	stw	fp,12(sp)
   19d9c:	df000304 	addi	fp,sp,12
   19da0:	e13ffe15 	stw	r4,-8(fp)
   19da4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19da8:	e0bfff17 	ldw	r2,-4(fp)
   19dac:	1000011e 	bne	r2,zero,19db4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   19db0:	00001406 	br	19e04 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19db4:	e0bfff17 	ldw	r2,-4(fp)
   19db8:	0080020e 	bge	zero,r2,19dc4 <alt_up_character_lcd_shift_cursor+0x34>
   19dbc:	00800504 	movi	r2,20
   19dc0:	00000106 	br	19dc8 <alt_up_character_lcd_shift_cursor+0x38>
   19dc4:	00800404 	movi	r2,16
   19dc8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19dcc:	e0bfff17 	ldw	r2,-4(fp)
   19dd0:	1000010e 	bge	r2,zero,19dd8 <alt_up_character_lcd_shift_cursor+0x48>
   19dd4:	0085c83a 	sub	r2,zero,r2
   19dd8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19ddc:	00000406 	br	19df0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19de0:	e0bffd43 	ldbu	r2,-11(fp)
   19de4:	e13ffe17 	ldw	r4,-8(fp)
   19de8:	100b883a 	mov	r5,r2
   19dec:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19df0:	e0bffd03 	ldbu	r2,-12(fp)
   19df4:	10ffffc4 	addi	r3,r2,-1
   19df8:	e0fffd05 	stb	r3,-12(fp)
   19dfc:	10803fcc 	andi	r2,r2,255
   19e00:	103ff71e 	bne	r2,zero,19de0 <__alt_mem_Flash_flash_data+0xf4019de0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19e04:	e037883a 	mov	sp,fp
   19e08:	dfc00117 	ldw	ra,4(sp)
   19e0c:	df000017 	ldw	fp,0(sp)
   19e10:	dec00204 	addi	sp,sp,8
   19e14:	f800283a 	ret

00019e18 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19e18:	defffb04 	addi	sp,sp,-20
   19e1c:	dfc00415 	stw	ra,16(sp)
   19e20:	df000315 	stw	fp,12(sp)
   19e24:	df000304 	addi	fp,sp,12
   19e28:	e13ffe15 	stw	r4,-8(fp)
   19e2c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19e30:	e0bfff17 	ldw	r2,-4(fp)
   19e34:	1000011e 	bne	r2,zero,19e3c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   19e38:	00001406 	br	19e8c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	0080020e 	bge	zero,r2,19e4c <alt_up_character_lcd_shift_display+0x34>
   19e44:	00800704 	movi	r2,28
   19e48:	00000106 	br	19e50 <alt_up_character_lcd_shift_display+0x38>
   19e4c:	00800604 	movi	r2,24
   19e50:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19e54:	e0bfff17 	ldw	r2,-4(fp)
   19e58:	1000010e 	bge	r2,zero,19e60 <alt_up_character_lcd_shift_display+0x48>
   19e5c:	0085c83a 	sub	r2,zero,r2
   19e60:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19e64:	00000406 	br	19e78 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19e68:	e0bffd43 	ldbu	r2,-11(fp)
   19e6c:	e13ffe17 	ldw	r4,-8(fp)
   19e70:	100b883a 	mov	r5,r2
   19e74:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19e78:	e0bffd03 	ldbu	r2,-12(fp)
   19e7c:	10ffffc4 	addi	r3,r2,-1
   19e80:	e0fffd05 	stb	r3,-12(fp)
   19e84:	10803fcc 	andi	r2,r2,255
   19e88:	103ff71e 	bne	r2,zero,19e68 <__alt_mem_Flash_flash_data+0xf4019e68>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19e8c:	e037883a 	mov	sp,fp
   19e90:	dfc00117 	ldw	ra,4(sp)
   19e94:	df000017 	ldw	fp,0(sp)
   19e98:	dec00204 	addi	sp,sp,8
   19e9c:	f800283a 	ret

00019ea0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   19ea0:	defffa04 	addi	sp,sp,-24
   19ea4:	dfc00515 	stw	ra,20(sp)
   19ea8:	df000415 	stw	fp,16(sp)
   19eac:	df000404 	addi	fp,sp,16
   19eb0:	e13ffd15 	stw	r4,-12(fp)
   19eb4:	e17ffe15 	stw	r5,-8(fp)
   19eb8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   19ebc:	e0bffe17 	ldw	r2,-8(fp)
   19ec0:	10800a28 	cmpgeui	r2,r2,40
   19ec4:	1000031e 	bne	r2,zero,19ed4 <alt_up_character_lcd_erase_pos+0x34>
   19ec8:	e0bfff17 	ldw	r2,-4(fp)
   19ecc:	108000b0 	cmpltui	r2,r2,2
   19ed0:	1000021e 	bne	r2,zero,19edc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   19ed4:	00bfffc4 	movi	r2,-1
   19ed8:	00000f06 	br	19f18 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19edc:	e13ffe17 	ldw	r4,-8(fp)
   19ee0:	e17fff17 	ldw	r5,-4(fp)
   19ee4:	0019abc0 	call	19abc <get_DDRAM_addr>
   19ee8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   19eec:	e0bffc03 	ldbu	r2,-16(fp)
   19ef0:	e13ffd17 	ldw	r4,-12(fp)
   19ef4:	100b883a 	mov	r5,r2
   19ef8:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   19efc:	e0bffd17 	ldw	r2,-12(fp)
   19f00:	10800a17 	ldw	r2,40(r2)
   19f04:	10800044 	addi	r2,r2,1
   19f08:	1007883a 	mov	r3,r2
   19f0c:	00800084 	movi	r2,2
   19f10:	18800025 	stbio	r2,0(r3)
	return 0;
   19f14:	0005883a 	mov	r2,zero
}
   19f18:	e037883a 	mov	sp,fp
   19f1c:	dfc00117 	ldw	ra,4(sp)
   19f20:	df000017 	ldw	fp,0(sp)
   19f24:	dec00204 	addi	sp,sp,8
   19f28:	f800283a 	ret

00019f2c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   19f2c:	defffd04 	addi	sp,sp,-12
   19f30:	dfc00215 	stw	ra,8(sp)
   19f34:	df000115 	stw	fp,4(sp)
   19f38:	df000104 	addi	fp,sp,4
   19f3c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   19f40:	e13fff17 	ldw	r4,-4(fp)
   19f44:	01400304 	movi	r5,12
   19f48:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
}
   19f4c:	e037883a 	mov	sp,fp
   19f50:	dfc00117 	ldw	ra,4(sp)
   19f54:	df000017 	ldw	fp,0(sp)
   19f58:	dec00204 	addi	sp,sp,8
   19f5c:	f800283a 	ret

00019f60 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   19f60:	defffd04 	addi	sp,sp,-12
   19f64:	dfc00215 	stw	ra,8(sp)
   19f68:	df000115 	stw	fp,4(sp)
   19f6c:	df000104 	addi	fp,sp,4
   19f70:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   19f74:	e13fff17 	ldw	r4,-4(fp)
   19f78:	014003c4 	movi	r5,15
   19f7c:	0019b300 	call	19b30 <alt_up_character_lcd_send_cmd>
}
   19f80:	e037883a 	mov	sp,fp
   19f84:	dfc00117 	ldw	ra,4(sp)
   19f88:	df000017 	ldw	fp,0(sp)
   19f8c:	dec00204 	addi	sp,sp,8
   19f90:	f800283a 	ret

00019f94 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   19f94:	defffd04 	addi	sp,sp,-12
   19f98:	df000215 	stw	fp,8(sp)
   19f9c:	df000204 	addi	fp,sp,8
   19fa0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19fa4:	e0bfff17 	ldw	r2,-4(fp)
   19fa8:	10800a17 	ldw	r2,40(r2)
   19fac:	10800104 	addi	r2,r2,4
   19fb0:	10800037 	ldwio	r2,0(r2)
   19fb4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   19fb8:	e0bffe17 	ldw	r2,-8(fp)
   19fbc:	10800054 	ori	r2,r2,1
   19fc0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   19fc4:	e0bfff17 	ldw	r2,-4(fp)
   19fc8:	10800a17 	ldw	r2,40(r2)
   19fcc:	10800104 	addi	r2,r2,4
   19fd0:	1007883a 	mov	r3,r2
   19fd4:	e0bffe17 	ldw	r2,-8(fp)
   19fd8:	18800035 	stwio	r2,0(r3)
}
   19fdc:	e037883a 	mov	sp,fp
   19fe0:	df000017 	ldw	fp,0(sp)
   19fe4:	dec00104 	addi	sp,sp,4
   19fe8:	f800283a 	ret

00019fec <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   19fec:	defffd04 	addi	sp,sp,-12
   19ff0:	df000215 	stw	fp,8(sp)
   19ff4:	df000204 	addi	fp,sp,8
   19ff8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19ffc:	e0bfff17 	ldw	r2,-4(fp)
   1a000:	10800a17 	ldw	r2,40(r2)
   1a004:	10800104 	addi	r2,r2,4
   1a008:	10800037 	ldwio	r2,0(r2)
   1a00c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1a010:	e0fffe17 	ldw	r3,-8(fp)
   1a014:	00bfff84 	movi	r2,-2
   1a018:	1884703a 	and	r2,r3,r2
   1a01c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1a020:	e0bfff17 	ldw	r2,-4(fp)
   1a024:	10800a17 	ldw	r2,40(r2)
   1a028:	10800104 	addi	r2,r2,4
   1a02c:	1007883a 	mov	r3,r2
   1a030:	e0bffe17 	ldw	r2,-8(fp)
   1a034:	18800035 	stwio	r2,0(r3)
}
   1a038:	e037883a 	mov	sp,fp
   1a03c:	df000017 	ldw	fp,0(sp)
   1a040:	dec00104 	addi	sp,sp,4
   1a044:	f800283a 	ret

0001a048 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1a048:	defffd04 	addi	sp,sp,-12
   1a04c:	df000215 	stw	fp,8(sp)
   1a050:	df000204 	addi	fp,sp,8
   1a054:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1a058:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1a05c:	e0bfff17 	ldw	r2,-4(fp)
   1a060:	10800a17 	ldw	r2,40(r2)
   1a064:	10800084 	addi	r2,r2,2
   1a068:	1080002b 	ldhuio	r2,0(r2)
   1a06c:	10bfffcc 	andi	r2,r2,65535
   1a070:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1a074:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a078:	e037883a 	mov	sp,fp
   1a07c:	df000017 	ldw	fp,0(sp)
   1a080:	dec00104 	addi	sp,sp,4
   1a084:	f800283a 	ret

0001a088 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1a088:	defffd04 	addi	sp,sp,-12
   1a08c:	df000215 	stw	fp,8(sp)
   1a090:	df000204 	addi	fp,sp,8
   1a094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1a098:	e0bfff17 	ldw	r2,-4(fp)
   1a09c:	10800a17 	ldw	r2,40(r2)
   1a0a0:	10800104 	addi	r2,r2,4
   1a0a4:	10800037 	ldwio	r2,0(r2)
   1a0a8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1a0ac:	e0bffe17 	ldw	r2,-8(fp)
   1a0b0:	1004d43a 	srli	r2,r2,16
}
   1a0b4:	e037883a 	mov	sp,fp
   1a0b8:	df000017 	ldw	fp,0(sp)
   1a0bc:	dec00104 	addi	sp,sp,4
   1a0c0:	f800283a 	ret

0001a0c4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1a0c4:	defffd04 	addi	sp,sp,-12
   1a0c8:	df000215 	stw	fp,8(sp)
   1a0cc:	df000204 	addi	fp,sp,8
   1a0d0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1a0d4:	e0bfff17 	ldw	r2,-4(fp)
   1a0d8:	1080800c 	andi	r2,r2,512
   1a0dc:	1004d27a 	srli	r2,r2,9
   1a0e0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1a0e4:	e0bffe17 	ldw	r2,-8(fp)
   1a0e8:	10000226 	beq	r2,zero,1a0f4 <alt_up_irda_check_parity+0x30>
   1a0ec:	00bfffc4 	movi	r2,-1
   1a0f0:	00000106 	br	1a0f8 <alt_up_irda_check_parity+0x34>
   1a0f4:	0005883a 	mov	r2,zero
}
   1a0f8:	e037883a 	mov	sp,fp
   1a0fc:	df000017 	ldw	fp,0(sp)
   1a100:	dec00104 	addi	sp,sp,4
   1a104:	f800283a 	ret

0001a108 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1a108:	defffd04 	addi	sp,sp,-12
   1a10c:	df000215 	stw	fp,8(sp)
   1a110:	df000204 	addi	fp,sp,8
   1a114:	e13ffe15 	stw	r4,-8(fp)
   1a118:	2805883a 	mov	r2,r5
   1a11c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1a120:	e0bffe17 	ldw	r2,-8(fp)
   1a124:	10800a17 	ldw	r2,40(r2)
   1a128:	1007883a 	mov	r3,r2
   1a12c:	e0bfff03 	ldbu	r2,-4(fp)
   1a130:	18800035 	stwio	r2,0(r3)
	return 0;
   1a134:	0005883a 	mov	r2,zero
}
   1a138:	e037883a 	mov	sp,fp
   1a13c:	df000017 	ldw	fp,0(sp)
   1a140:	dec00104 	addi	sp,sp,4
   1a144:	f800283a 	ret

0001a148 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1a148:	defffa04 	addi	sp,sp,-24
   1a14c:	dfc00515 	stw	ra,20(sp)
   1a150:	df000415 	stw	fp,16(sp)
   1a154:	df000404 	addi	fp,sp,16
   1a158:	e13ffd15 	stw	r4,-12(fp)
   1a15c:	e17ffe15 	stw	r5,-8(fp)
   1a160:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1a164:	e0bffd17 	ldw	r2,-12(fp)
   1a168:	10800a17 	ldw	r2,40(r2)
   1a16c:	10800037 	ldwio	r2,0(r2)
   1a170:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1a174:	e0bffc17 	ldw	r2,-16(fp)
   1a178:	1007883a 	mov	r3,r2
   1a17c:	e0bffe17 	ldw	r2,-8(fp)
   1a180:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1a184:	e13ffc17 	ldw	r4,-16(fp)
   1a188:	001a0c40 	call	1a0c4 <alt_up_irda_check_parity>
   1a18c:	1007883a 	mov	r3,r2
   1a190:	e0bfff17 	ldw	r2,-4(fp)
   1a194:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1a198:	e0bffc17 	ldw	r2,-16(fp)
   1a19c:	10a0000c 	andi	r2,r2,32768
   1a1a0:	1004d3fa 	srli	r2,r2,15
   1a1a4:	10bfffc4 	addi	r2,r2,-1
}
   1a1a8:	e037883a 	mov	sp,fp
   1a1ac:	dfc00117 	ldw	ra,4(sp)
   1a1b0:	df000017 	ldw	fp,0(sp)
   1a1b4:	dec00204 	addi	sp,sp,8
   1a1b8:	f800283a 	ret

0001a1bc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a1bc:	defff804 	addi	sp,sp,-32
   1a1c0:	dfc00715 	stw	ra,28(sp)
   1a1c4:	df000615 	stw	fp,24(sp)
   1a1c8:	df000604 	addi	fp,sp,24
   1a1cc:	e13ffd15 	stw	r4,-12(fp)
   1a1d0:	e17ffe15 	stw	r5,-8(fp)
   1a1d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a1d8:	e0bffd17 	ldw	r2,-12(fp)
   1a1dc:	10800017 	ldw	r2,0(r2)
   1a1e0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1a1e4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1a1e8:	00000e06 	br	1a224 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1a1ec:	e0bffe17 	ldw	r2,-8(fp)
   1a1f0:	10c00044 	addi	r3,r2,1
   1a1f4:	e0fffe15 	stw	r3,-8(fp)
   1a1f8:	e0fffc04 	addi	r3,fp,-16
   1a1fc:	e13ffb17 	ldw	r4,-20(fp)
   1a200:	100b883a 	mov	r5,r2
   1a204:	180d883a 	mov	r6,r3
   1a208:	001a1480 	call	1a148 <alt_up_irda_read_data>
   1a20c:	1000041e 	bne	r2,zero,1a220 <alt_up_irda_read_fd+0x64>
			count++;
   1a210:	e0bffa17 	ldw	r2,-24(fp)
   1a214:	10800044 	addi	r2,r2,1
   1a218:	e0bffa15 	stw	r2,-24(fp)
   1a21c:	00000106 	br	1a224 <alt_up_irda_read_fd+0x68>
		else
			break;
   1a220:	00000406 	br	1a234 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1a224:	e0bfff17 	ldw	r2,-4(fp)
   1a228:	10ffffc4 	addi	r3,r2,-1
   1a22c:	e0ffff15 	stw	r3,-4(fp)
   1a230:	103fee1e 	bne	r2,zero,1a1ec <__alt_mem_Flash_flash_data+0xf401a1ec>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1a234:	e0bffa17 	ldw	r2,-24(fp)
}
   1a238:	e037883a 	mov	sp,fp
   1a23c:	dfc00117 	ldw	ra,4(sp)
   1a240:	df000017 	ldw	fp,0(sp)
   1a244:	dec00204 	addi	sp,sp,8
   1a248:	f800283a 	ret

0001a24c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a24c:	defff904 	addi	sp,sp,-28
   1a250:	dfc00615 	stw	ra,24(sp)
   1a254:	df000515 	stw	fp,20(sp)
   1a258:	df000504 	addi	fp,sp,20
   1a25c:	e13ffd15 	stw	r4,-12(fp)
   1a260:	e17ffe15 	stw	r5,-8(fp)
   1a264:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a268:	e0bffd17 	ldw	r2,-12(fp)
   1a26c:	10800017 	ldw	r2,0(r2)
   1a270:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1a274:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1a278:	00000e06 	br	1a2b4 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1a27c:	e0bffe17 	ldw	r2,-8(fp)
   1a280:	10c00044 	addi	r3,r2,1
   1a284:	e0fffe15 	stw	r3,-8(fp)
   1a288:	10800003 	ldbu	r2,0(r2)
   1a28c:	10803fcc 	andi	r2,r2,255
   1a290:	e13ffc17 	ldw	r4,-16(fp)
   1a294:	100b883a 	mov	r5,r2
   1a298:	001a1080 	call	1a108 <alt_up_irda_write_data>
   1a29c:	1000041e 	bne	r2,zero,1a2b0 <alt_up_irda_write_fd+0x64>
			count++;
   1a2a0:	e0bffb17 	ldw	r2,-20(fp)
   1a2a4:	10800044 	addi	r2,r2,1
   1a2a8:	e0bffb15 	stw	r2,-20(fp)
   1a2ac:	00000106 	br	1a2b4 <alt_up_irda_write_fd+0x68>
		else
			break;
   1a2b0:	00000406 	br	1a2c4 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1a2b4:	e0bfff17 	ldw	r2,-4(fp)
   1a2b8:	10ffffc4 	addi	r3,r2,-1
   1a2bc:	e0ffff15 	stw	r3,-4(fp)
   1a2c0:	103fee1e 	bne	r2,zero,1a27c <__alt_mem_Flash_flash_data+0xf401a27c>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1a2c4:	e0bffb17 	ldw	r2,-20(fp)
}
   1a2c8:	e037883a 	mov	sp,fp
   1a2cc:	dfc00117 	ldw	ra,4(sp)
   1a2d0:	df000017 	ldw	fp,0(sp)
   1a2d4:	dec00204 	addi	sp,sp,8
   1a2d8:	f800283a 	ret

0001a2dc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1a2dc:	defffc04 	addi	sp,sp,-16
   1a2e0:	dfc00315 	stw	ra,12(sp)
   1a2e4:	df000215 	stw	fp,8(sp)
   1a2e8:	df000204 	addi	fp,sp,8
   1a2ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1a2f0:	e13fff17 	ldw	r4,-4(fp)
   1a2f4:	014000b4 	movhi	r5,2
   1a2f8:	297ac704 	addi	r5,r5,-5348
   1a2fc:	001b34c0 	call	1b34c <alt_find_dev>
   1a300:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a304:	e0bffe17 	ldw	r2,-8(fp)
}
   1a308:	e037883a 	mov	sp,fp
   1a30c:	dfc00117 	ldw	ra,4(sp)
   1a310:	df000017 	ldw	fp,0(sp)
   1a314:	dec00204 	addi	sp,sp,8
   1a318:	f800283a 	ret

0001a31c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1a31c:	defffd04 	addi	sp,sp,-12
   1a320:	df000215 	stw	fp,8(sp)
   1a324:	df000204 	addi	fp,sp,8
   1a328:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1a32c:	e0bfff17 	ldw	r2,-4(fp)
   1a330:	1080400c 	andi	r2,r2,256
   1a334:	1004d23a 	srli	r2,r2,8
   1a338:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1a33c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a340:	e037883a 	mov	sp,fp
   1a344:	df000017 	ldw	fp,0(sp)
   1a348:	dec00104 	addi	sp,sp,4
   1a34c:	f800283a 	ret

0001a350 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1a350:	defffd04 	addi	sp,sp,-12
   1a354:	df000215 	stw	fp,8(sp)
   1a358:	df000204 	addi	fp,sp,8
   1a35c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1a360:	e0bfff17 	ldw	r2,-4(fp)
   1a364:	1080004c 	andi	r2,r2,1
   1a368:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a36c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a370:	e037883a 	mov	sp,fp
   1a374:	df000017 	ldw	fp,0(sp)
   1a378:	dec00104 	addi	sp,sp,4
   1a37c:	f800283a 	ret

0001a380 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1a380:	defffd04 	addi	sp,sp,-12
   1a384:	df000215 	stw	fp,8(sp)
   1a388:	df000204 	addi	fp,sp,8
   1a38c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1a390:	e0bfff17 	ldw	r2,-4(fp)
   1a394:	1081000c 	andi	r2,r2,1024
   1a398:	1004d2ba 	srli	r2,r2,10
   1a39c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a3a0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a3a4:	e037883a 	mov	sp,fp
   1a3a8:	df000017 	ldw	fp,0(sp)
   1a3ac:	dec00104 	addi	sp,sp,4
   1a3b0:	f800283a 	ret

0001a3b4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1a3b4:	defffd04 	addi	sp,sp,-12
   1a3b8:	df000215 	stw	fp,8(sp)
   1a3bc:	df000204 	addi	fp,sp,8
   1a3c0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1a3c4:	e0bfff17 	ldw	r2,-4(fp)
   1a3c8:	1004d43a 	srli	r2,r2,16
   1a3cc:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1a3d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a3d4:	e037883a 	mov	sp,fp
   1a3d8:	df000017 	ldw	fp,0(sp)
   1a3dc:	dec00104 	addi	sp,sp,4
   1a3e0:	f800283a 	ret

0001a3e4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1a3e4:	defffd04 	addi	sp,sp,-12
   1a3e8:	df000215 	stw	fp,8(sp)
   1a3ec:	df000204 	addi	fp,sp,8
   1a3f0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1a3f4:	e0bfff17 	ldw	r2,-4(fp)
   1a3f8:	10a0000c 	andi	r2,r2,32768
   1a3fc:	1004d3fa 	srli	r2,r2,15
   1a400:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1a404:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a408:	e037883a 	mov	sp,fp
   1a40c:	df000017 	ldw	fp,0(sp)
   1a410:	dec00104 	addi	sp,sp,4
   1a414:	f800283a 	ret

0001a418 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1a418:	defffd04 	addi	sp,sp,-12
   1a41c:	df000215 	stw	fp,8(sp)
   1a420:	df000204 	addi	fp,sp,8
   1a424:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1a428:	e0bfff17 	ldw	r2,-4(fp)
   1a42c:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1a430:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a434:	e037883a 	mov	sp,fp
   1a438:	df000017 	ldw	fp,0(sp)
   1a43c:	dec00104 	addi	sp,sp,4
   1a440:	f800283a 	ret

0001a444 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1a444:	defffb04 	addi	sp,sp,-20
   1a448:	dfc00415 	stw	ra,16(sp)
   1a44c:	df000315 	stw	fp,12(sp)
   1a450:	df000304 	addi	fp,sp,12
   1a454:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1a458:	e13fff17 	ldw	r4,-4(fp)
   1a45c:	01403fc4 	movi	r5,255
   1a460:	001a6a00 	call	1a6a0 <alt_up_ps2_write_data_byte_with_ack>
   1a464:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1a468:	e0bffd17 	ldw	r2,-12(fp)
   1a46c:	1000211e 	bne	r2,zero,1a4f4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a470:	e0bffe04 	addi	r2,fp,-8
   1a474:	e13fff17 	ldw	r4,-4(fp)
   1a478:	100b883a 	mov	r5,r2
   1a47c:	001a7040 	call	1a704 <alt_up_ps2_read_data_byte_timeout>
   1a480:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1a484:	e0bffd17 	ldw	r2,-12(fp)
   1a488:	10001a1e 	bne	r2,zero,1a4f4 <alt_up_ps2_init+0xb0>
   1a48c:	e0bffe03 	ldbu	r2,-8(fp)
   1a490:	10803fcc 	andi	r2,r2,255
   1a494:	10802a98 	cmpnei	r2,r2,170
   1a498:	1000161e 	bne	r2,zero,1a4f4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a49c:	e0bffe04 	addi	r2,fp,-8
   1a4a0:	e13fff17 	ldw	r4,-4(fp)
   1a4a4:	100b883a 	mov	r5,r2
   1a4a8:	001a7040 	call	1a704 <alt_up_ps2_read_data_byte_timeout>
   1a4ac:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1a4b0:	e0bffd17 	ldw	r2,-12(fp)
   1a4b4:	10bfe318 	cmpnei	r2,r2,-116
   1a4b8:	1000041e 	bne	r2,zero,1a4cc <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1a4bc:	e0bfff17 	ldw	r2,-4(fp)
   1a4c0:	00c00044 	movi	r3,1
   1a4c4:	10c00d15 	stw	r3,52(r2)
   1a4c8:	00000a06 	br	1a4f4 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1a4cc:	e0bffd17 	ldw	r2,-12(fp)
   1a4d0:	1000081e 	bne	r2,zero,1a4f4 <alt_up_ps2_init+0xb0>
   1a4d4:	e0bffe03 	ldbu	r2,-8(fp)
   1a4d8:	10803fcc 	andi	r2,r2,255
   1a4dc:	1000051e 	bne	r2,zero,1a4f4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1a4e0:	e0bfff17 	ldw	r2,-4(fp)
   1a4e4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1a4e8:	e13fff17 	ldw	r4,-4(fp)
   1a4ec:	01403d04 	movi	r5,244
   1a4f0:	001a5bc0 	call	1a5bc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1a4f4:	e037883a 	mov	sp,fp
   1a4f8:	dfc00117 	ldw	ra,4(sp)
   1a4fc:	df000017 	ldw	fp,0(sp)
   1a500:	dec00204 	addi	sp,sp,8
   1a504:	f800283a 	ret

0001a508 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a508:	defffd04 	addi	sp,sp,-12
   1a50c:	df000215 	stw	fp,8(sp)
   1a510:	df000204 	addi	fp,sp,8
   1a514:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a518:	e0bfff17 	ldw	r2,-4(fp)
   1a51c:	10800a17 	ldw	r2,40(r2)
   1a520:	10800104 	addi	r2,r2,4
   1a524:	10800037 	ldwio	r2,0(r2)
   1a528:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a52c:	e0bffe17 	ldw	r2,-8(fp)
   1a530:	10800054 	ori	r2,r2,1
   1a534:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a538:	e0bfff17 	ldw	r2,-4(fp)
   1a53c:	10800a17 	ldw	r2,40(r2)
   1a540:	10800104 	addi	r2,r2,4
   1a544:	1007883a 	mov	r3,r2
   1a548:	e0bffe17 	ldw	r2,-8(fp)
   1a54c:	18800035 	stwio	r2,0(r3)
}
   1a550:	e037883a 	mov	sp,fp
   1a554:	df000017 	ldw	fp,0(sp)
   1a558:	dec00104 	addi	sp,sp,4
   1a55c:	f800283a 	ret

0001a560 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a560:	defffd04 	addi	sp,sp,-12
   1a564:	df000215 	stw	fp,8(sp)
   1a568:	df000204 	addi	fp,sp,8
   1a56c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a570:	e0bfff17 	ldw	r2,-4(fp)
   1a574:	10800a17 	ldw	r2,40(r2)
   1a578:	10800104 	addi	r2,r2,4
   1a57c:	10800037 	ldwio	r2,0(r2)
   1a580:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a584:	e0fffe17 	ldw	r3,-8(fp)
   1a588:	00bfff84 	movi	r2,-2
   1a58c:	1884703a 	and	r2,r3,r2
   1a590:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a594:	e0bfff17 	ldw	r2,-4(fp)
   1a598:	10800a17 	ldw	r2,40(r2)
   1a59c:	10800104 	addi	r2,r2,4
   1a5a0:	1007883a 	mov	r3,r2
   1a5a4:	e0bffe17 	ldw	r2,-8(fp)
   1a5a8:	18800035 	stwio	r2,0(r3)
}
   1a5ac:	e037883a 	mov	sp,fp
   1a5b0:	df000017 	ldw	fp,0(sp)
   1a5b4:	dec00104 	addi	sp,sp,4
   1a5b8:	f800283a 	ret

0001a5bc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a5bc:	defffb04 	addi	sp,sp,-20
   1a5c0:	dfc00415 	stw	ra,16(sp)
   1a5c4:	df000315 	stw	fp,12(sp)
   1a5c8:	df000304 	addi	fp,sp,12
   1a5cc:	e13ffe15 	stw	r4,-8(fp)
   1a5d0:	2805883a 	mov	r2,r5
   1a5d4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1a5d8:	e0bffe17 	ldw	r2,-8(fp)
   1a5dc:	10800a17 	ldw	r2,40(r2)
   1a5e0:	1007883a 	mov	r3,r2
   1a5e4:	e0bfff03 	ldbu	r2,-4(fp)
   1a5e8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1a5ec:	e0bffe17 	ldw	r2,-8(fp)
   1a5f0:	10800a17 	ldw	r2,40(r2)
   1a5f4:	10800104 	addi	r2,r2,4
   1a5f8:	10800037 	ldwio	r2,0(r2)
   1a5fc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1a600:	e13ffd17 	ldw	r4,-12(fp)
   1a604:	001a3800 	call	1a380 <read_CE_bit>
   1a608:	10803fcc 	andi	r2,r2,255
   1a60c:	10000226 	beq	r2,zero,1a618 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1a610:	00bffec4 	movi	r2,-5
   1a614:	00000106 	br	1a61c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1a618:	0005883a 	mov	r2,zero
}
   1a61c:	e037883a 	mov	sp,fp
   1a620:	dfc00117 	ldw	ra,4(sp)
   1a624:	df000017 	ldw	fp,0(sp)
   1a628:	dec00204 	addi	sp,sp,8
   1a62c:	f800283a 	ret

0001a630 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1a630:	defffc04 	addi	sp,sp,-16
   1a634:	dfc00315 	stw	ra,12(sp)
   1a638:	df000215 	stw	fp,8(sp)
   1a63c:	df000204 	addi	fp,sp,8
   1a640:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1a644:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1a648:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1a64c:	e0bffe44 	addi	r2,fp,-7
   1a650:	e13fff17 	ldw	r4,-4(fp)
   1a654:	100b883a 	mov	r5,r2
   1a658:	001a7040 	call	1a704 <alt_up_ps2_read_data_byte_timeout>
   1a65c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1a660:	e0bffe03 	ldbu	r2,-8(fp)
   1a664:	1000061e 	bne	r2,zero,1a680 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1a668:	e0bffe43 	ldbu	r2,-7(fp)
   1a66c:	10803fcc 	andi	r2,r2,255
   1a670:	10803e98 	cmpnei	r2,r2,250
   1a674:	1000041e 	bne	r2,zero,1a688 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1a678:	0005883a 	mov	r2,zero
   1a67c:	00000306 	br	1a68c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1a680:	e0bffe03 	ldbu	r2,-8(fp)
   1a684:	00000106 	br	1a68c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1a688:	003ff006 	br	1a64c <__alt_mem_Flash_flash_data+0xf401a64c>
	return -ETIMEDOUT;
}
   1a68c:	e037883a 	mov	sp,fp
   1a690:	dfc00117 	ldw	ra,4(sp)
   1a694:	df000017 	ldw	fp,0(sp)
   1a698:	dec00204 	addi	sp,sp,8
   1a69c:	f800283a 	ret

0001a6a0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a6a0:	defffa04 	addi	sp,sp,-24
   1a6a4:	dfc00515 	stw	ra,20(sp)
   1a6a8:	df000415 	stw	fp,16(sp)
   1a6ac:	df000404 	addi	fp,sp,16
   1a6b0:	e13ffe15 	stw	r4,-8(fp)
   1a6b4:	2805883a 	mov	r2,r5
   1a6b8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1a6bc:	e0bfff03 	ldbu	r2,-4(fp)
   1a6c0:	e13ffe17 	ldw	r4,-8(fp)
   1a6c4:	100b883a 	mov	r5,r2
   1a6c8:	001a5bc0 	call	1a5bc <alt_up_ps2_write_data_byte>
   1a6cc:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1a6d0:	e0bffc17 	ldw	r2,-16(fp)
   1a6d4:	10000226 	beq	r2,zero,1a6e0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1a6d8:	e0bffc17 	ldw	r2,-16(fp)
   1a6dc:	00000406 	br	1a6f0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1a6e0:	e13ffe17 	ldw	r4,-8(fp)
   1a6e4:	001a6300 	call	1a630 <alt_up_ps2_wait_for_ack>
   1a6e8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1a6ec:	e0bffd17 	ldw	r2,-12(fp)
}
   1a6f0:	e037883a 	mov	sp,fp
   1a6f4:	dfc00117 	ldw	ra,4(sp)
   1a6f8:	df000017 	ldw	fp,0(sp)
   1a6fc:	dec00204 	addi	sp,sp,8
   1a700:	f800283a 	ret

0001a704 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a704:	defffa04 	addi	sp,sp,-24
   1a708:	dfc00515 	stw	ra,20(sp)
   1a70c:	df000415 	stw	fp,16(sp)
   1a710:	df000404 	addi	fp,sp,16
   1a714:	e13ffe15 	stw	r4,-8(fp)
   1a718:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a71c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1a720:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1a724:	e0bffc17 	ldw	r2,-16(fp)
   1a728:	10800044 	addi	r2,r2,1
   1a72c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a730:	e0bffe17 	ldw	r2,-8(fp)
   1a734:	10800a17 	ldw	r2,40(r2)
   1a738:	10800037 	ldwio	r2,0(r2)
   1a73c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1a740:	e13ffd17 	ldw	r4,-12(fp)
   1a744:	001a3e40 	call	1a3e4 <read_data_valid>
   1a748:	10803fcc 	andi	r2,r2,255
   1a74c:	10000726 	beq	r2,zero,1a76c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1a750:	e13ffd17 	ldw	r4,-12(fp)
   1a754:	001a4180 	call	1a418 <read_data_byte>
   1a758:	1007883a 	mov	r3,r2
   1a75c:	e0bfff17 	ldw	r2,-4(fp)
   1a760:	10c00005 	stb	r3,0(r2)
			return 0;
   1a764:	0005883a 	mov	r2,zero
   1a768:	00000a06 	br	1a794 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1a76c:	e0bffe17 	ldw	r2,-8(fp)
   1a770:	10800c17 	ldw	r2,48(r2)
   1a774:	10000626 	beq	r2,zero,1a790 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1a778:	e0bffe17 	ldw	r2,-8(fp)
   1a77c:	10c00c17 	ldw	r3,48(r2)
   1a780:	e0bffc17 	ldw	r2,-16(fp)
   1a784:	1880022e 	bgeu	r3,r2,1a790 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1a788:	00bfe304 	movi	r2,-116
   1a78c:	00000106 	br	1a794 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1a790:	003fe406 	br	1a724 <__alt_mem_Flash_flash_data+0xf401a724>
}
   1a794:	e037883a 	mov	sp,fp
   1a798:	dfc00117 	ldw	ra,4(sp)
   1a79c:	df000017 	ldw	fp,0(sp)
   1a7a0:	dec00204 	addi	sp,sp,8
   1a7a4:	f800283a 	ret

0001a7a8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a7a8:	defffb04 	addi	sp,sp,-20
   1a7ac:	dfc00415 	stw	ra,16(sp)
   1a7b0:	df000315 	stw	fp,12(sp)
   1a7b4:	df000304 	addi	fp,sp,12
   1a7b8:	e13ffe15 	stw	r4,-8(fp)
   1a7bc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a7c0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a7c4:	e0bffe17 	ldw	r2,-8(fp)
   1a7c8:	10800a17 	ldw	r2,40(r2)
   1a7cc:	10800037 	ldwio	r2,0(r2)
   1a7d0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1a7d4:	e13ffd17 	ldw	r4,-12(fp)
   1a7d8:	001a3e40 	call	1a3e4 <read_data_valid>
   1a7dc:	10803fcc 	andi	r2,r2,255
   1a7e0:	10000726 	beq	r2,zero,1a800 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1a7e4:	e13ffd17 	ldw	r4,-12(fp)
   1a7e8:	001a4180 	call	1a418 <read_data_byte>
   1a7ec:	1007883a 	mov	r3,r2
   1a7f0:	e0bfff17 	ldw	r2,-4(fp)
   1a7f4:	10c00005 	stb	r3,0(r2)
		return 0;
   1a7f8:	0005883a 	mov	r2,zero
   1a7fc:	00000106 	br	1a804 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1a800:	00bfffc4 	movi	r2,-1
}
   1a804:	e037883a 	mov	sp,fp
   1a808:	dfc00117 	ldw	ra,4(sp)
   1a80c:	df000017 	ldw	fp,0(sp)
   1a810:	dec00204 	addi	sp,sp,8
   1a814:	f800283a 	ret

0001a818 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1a818:	defffb04 	addi	sp,sp,-20
   1a81c:	dfc00415 	stw	ra,16(sp)
   1a820:	df000315 	stw	fp,12(sp)
   1a824:	df000304 	addi	fp,sp,12
   1a828:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1a82c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1a830:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a834:	e0bfff17 	ldw	r2,-4(fp)
   1a838:	10800a17 	ldw	r2,40(r2)
   1a83c:	10800037 	ldwio	r2,0(r2)
   1a840:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1a844:	e13ffe17 	ldw	r4,-8(fp)
   1a848:	001a3b40 	call	1a3b4 <read_num_bytes_available>
   1a84c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1a850:	e0bffd0b 	ldhu	r2,-12(fp)
   1a854:	103ff71e 	bne	r2,zero,1a834 <__alt_mem_Flash_flash_data+0xf401a834>
}
   1a858:	e037883a 	mov	sp,fp
   1a85c:	dfc00117 	ldw	ra,4(sp)
   1a860:	df000017 	ldw	fp,0(sp)
   1a864:	dec00204 	addi	sp,sp,8
   1a868:	f800283a 	ret

0001a86c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a86c:	defff804 	addi	sp,sp,-32
   1a870:	dfc00715 	stw	ra,28(sp)
   1a874:	df000615 	stw	fp,24(sp)
   1a878:	df000604 	addi	fp,sp,24
   1a87c:	e13ffd15 	stw	r4,-12(fp)
   1a880:	e17ffe15 	stw	r5,-8(fp)
   1a884:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a888:	e0bffd17 	ldw	r2,-12(fp)
   1a88c:	10800017 	ldw	r2,0(r2)
   1a890:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1a894:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1a898:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1a89c:	e0fffc17 	ldw	r3,-16(fp)
   1a8a0:	e0bfff17 	ldw	r2,-4(fp)
   1a8a4:	18bffd16 	blt	r3,r2,1a89c <__alt_mem_Flash_flash_data+0xf401a89c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1a8a8:	e0bffe17 	ldw	r2,-8(fp)
   1a8ac:	10c00044 	addi	r3,r2,1
   1a8b0:	e0fffe15 	stw	r3,-8(fp)
   1a8b4:	e13ffa17 	ldw	r4,-24(fp)
   1a8b8:	100b883a 	mov	r5,r2
   1a8bc:	001a7040 	call	1a704 <alt_up_ps2_read_data_byte_timeout>
   1a8c0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1a8c4:	e0bffb17 	ldw	r2,-20(fp)
   1a8c8:	10000226 	beq	r2,zero,1a8d4 <alt_up_ps2_read_fd+0x68>
			return count;
   1a8cc:	e0bffc17 	ldw	r2,-16(fp)
   1a8d0:	00000406 	br	1a8e4 <alt_up_ps2_read_fd+0x78>
		count++;
   1a8d4:	e0bffc17 	ldw	r2,-16(fp)
   1a8d8:	10800044 	addi	r2,r2,1
   1a8dc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1a8e0:	e0bffc17 	ldw	r2,-16(fp)
}
   1a8e4:	e037883a 	mov	sp,fp
   1a8e8:	dfc00117 	ldw	ra,4(sp)
   1a8ec:	df000017 	ldw	fp,0(sp)
   1a8f0:	dec00204 	addi	sp,sp,8
   1a8f4:	f800283a 	ret

0001a8f8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a8f8:	defff804 	addi	sp,sp,-32
   1a8fc:	dfc00715 	stw	ra,28(sp)
   1a900:	df000615 	stw	fp,24(sp)
   1a904:	df000604 	addi	fp,sp,24
   1a908:	e13ffd15 	stw	r4,-12(fp)
   1a90c:	e17ffe15 	stw	r5,-8(fp)
   1a910:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a914:	e0bffd17 	ldw	r2,-12(fp)
   1a918:	10800017 	ldw	r2,0(r2)
   1a91c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1a920:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1a924:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1a928:	00001006 	br	1a96c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1a92c:	e0bffe17 	ldw	r2,-8(fp)
   1a930:	10c00044 	addi	r3,r2,1
   1a934:	e0fffe15 	stw	r3,-8(fp)
   1a938:	10800003 	ldbu	r2,0(r2)
   1a93c:	10803fcc 	andi	r2,r2,255
   1a940:	e13ffb17 	ldw	r4,-20(fp)
   1a944:	100b883a 	mov	r5,r2
   1a948:	001a5bc0 	call	1a5bc <alt_up_ps2_write_data_byte>
   1a94c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1a950:	e0bffc17 	ldw	r2,-16(fp)
   1a954:	10000226 	beq	r2,zero,1a960 <alt_up_ps2_write_fd+0x68>
			return count;
   1a958:	e0bffa17 	ldw	r2,-24(fp)
   1a95c:	00000706 	br	1a97c <alt_up_ps2_write_fd+0x84>
		count++;
   1a960:	e0bffa17 	ldw	r2,-24(fp)
   1a964:	10800044 	addi	r2,r2,1
   1a968:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1a96c:	e0fffa17 	ldw	r3,-24(fp)
   1a970:	e0bfff17 	ldw	r2,-4(fp)
   1a974:	18bfed16 	blt	r3,r2,1a92c <__alt_mem_Flash_flash_data+0xf401a92c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1a978:	e0bffa17 	ldw	r2,-24(fp)
}
   1a97c:	e037883a 	mov	sp,fp
   1a980:	dfc00117 	ldw	ra,4(sp)
   1a984:	df000017 	ldw	fp,0(sp)
   1a988:	dec00204 	addi	sp,sp,8
   1a98c:	f800283a 	ret

0001a990 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1a990:	defffc04 	addi	sp,sp,-16
   1a994:	dfc00315 	stw	ra,12(sp)
   1a998:	df000215 	stw	fp,8(sp)
   1a99c:	df000204 	addi	fp,sp,8
   1a9a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1a9a4:	e13fff17 	ldw	r4,-4(fp)
   1a9a8:	014000b4 	movhi	r5,2
   1a9ac:	297ac704 	addi	r5,r5,-5348
   1a9b0:	001b34c0 	call	1b34c <alt_find_dev>
   1a9b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a9b8:	e0bffe17 	ldw	r2,-8(fp)
}
   1a9bc:	e037883a 	mov	sp,fp
   1a9c0:	dfc00117 	ldw	ra,4(sp)
   1a9c4:	df000017 	ldw	fp,0(sp)
   1a9c8:	dec00204 	addi	sp,sp,8
   1a9cc:	f800283a 	ret

0001a9d0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1a9d0:	defffd04 	addi	sp,sp,-12
   1a9d4:	df000215 	stw	fp,8(sp)
   1a9d8:	df000204 	addi	fp,sp,8
   1a9dc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a9e0:	e0bfff17 	ldw	r2,-4(fp)
   1a9e4:	10800a17 	ldw	r2,40(r2)
   1a9e8:	10800104 	addi	r2,r2,4
   1a9ec:	10800037 	ldwio	r2,0(r2)
   1a9f0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1a9f4:	e0bffe17 	ldw	r2,-8(fp)
   1a9f8:	10800054 	ori	r2,r2,1
   1a9fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1aa00:	e0bfff17 	ldw	r2,-4(fp)
   1aa04:	10800a17 	ldw	r2,40(r2)
   1aa08:	10800104 	addi	r2,r2,4
   1aa0c:	1007883a 	mov	r3,r2
   1aa10:	e0bffe17 	ldw	r2,-8(fp)
   1aa14:	18800035 	stwio	r2,0(r3)
}
   1aa18:	e037883a 	mov	sp,fp
   1aa1c:	df000017 	ldw	fp,0(sp)
   1aa20:	dec00104 	addi	sp,sp,4
   1aa24:	f800283a 	ret

0001aa28 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1aa28:	defffd04 	addi	sp,sp,-12
   1aa2c:	df000215 	stw	fp,8(sp)
   1aa30:	df000204 	addi	fp,sp,8
   1aa34:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1aa38:	e0bfff17 	ldw	r2,-4(fp)
   1aa3c:	10800a17 	ldw	r2,40(r2)
   1aa40:	10800104 	addi	r2,r2,4
   1aa44:	10800037 	ldwio	r2,0(r2)
   1aa48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1aa4c:	e0fffe17 	ldw	r3,-8(fp)
   1aa50:	00bfff84 	movi	r2,-2
   1aa54:	1884703a 	and	r2,r3,r2
   1aa58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1aa5c:	e0bfff17 	ldw	r2,-4(fp)
   1aa60:	10800a17 	ldw	r2,40(r2)
   1aa64:	10800104 	addi	r2,r2,4
   1aa68:	1007883a 	mov	r3,r2
   1aa6c:	e0bffe17 	ldw	r2,-8(fp)
   1aa70:	18800035 	stwio	r2,0(r3)
}
   1aa74:	e037883a 	mov	sp,fp
   1aa78:	df000017 	ldw	fp,0(sp)
   1aa7c:	dec00104 	addi	sp,sp,4
   1aa80:	f800283a 	ret

0001aa84 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1aa84:	defffd04 	addi	sp,sp,-12
   1aa88:	df000215 	stw	fp,8(sp)
   1aa8c:	df000204 	addi	fp,sp,8
   1aa90:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1aa94:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1aa98:	e0bfff17 	ldw	r2,-4(fp)
   1aa9c:	10800a17 	ldw	r2,40(r2)
   1aaa0:	10800084 	addi	r2,r2,2
   1aaa4:	1080002b 	ldhuio	r2,0(r2)
   1aaa8:	10bfffcc 	andi	r2,r2,65535
   1aaac:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1aab0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1aab4:	e037883a 	mov	sp,fp
   1aab8:	df000017 	ldw	fp,0(sp)
   1aabc:	dec00104 	addi	sp,sp,4
   1aac0:	f800283a 	ret

0001aac4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1aac4:	defffd04 	addi	sp,sp,-12
   1aac8:	df000215 	stw	fp,8(sp)
   1aacc:	df000204 	addi	fp,sp,8
   1aad0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1aad4:	e0bfff17 	ldw	r2,-4(fp)
   1aad8:	10800a17 	ldw	r2,40(r2)
   1aadc:	10800104 	addi	r2,r2,4
   1aae0:	10800037 	ldwio	r2,0(r2)
   1aae4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1aae8:	e0bffe17 	ldw	r2,-8(fp)
   1aaec:	1004d43a 	srli	r2,r2,16
}
   1aaf0:	e037883a 	mov	sp,fp
   1aaf4:	df000017 	ldw	fp,0(sp)
   1aaf8:	dec00104 	addi	sp,sp,4
   1aafc:	f800283a 	ret

0001ab00 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1ab00:	defffd04 	addi	sp,sp,-12
   1ab04:	df000215 	stw	fp,8(sp)
   1ab08:	df000204 	addi	fp,sp,8
   1ab0c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1ab10:	e0bfff17 	ldw	r2,-4(fp)
   1ab14:	1080800c 	andi	r2,r2,512
   1ab18:	1004d27a 	srli	r2,r2,9
   1ab1c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1ab20:	e0bffe17 	ldw	r2,-8(fp)
   1ab24:	10000226 	beq	r2,zero,1ab30 <alt_up_rs232_check_parity+0x30>
   1ab28:	00bfffc4 	movi	r2,-1
   1ab2c:	00000106 	br	1ab34 <alt_up_rs232_check_parity+0x34>
   1ab30:	0005883a 	mov	r2,zero
}
   1ab34:	e037883a 	mov	sp,fp
   1ab38:	df000017 	ldw	fp,0(sp)
   1ab3c:	dec00104 	addi	sp,sp,4
   1ab40:	f800283a 	ret

0001ab44 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1ab44:	defffd04 	addi	sp,sp,-12
   1ab48:	df000215 	stw	fp,8(sp)
   1ab4c:	df000204 	addi	fp,sp,8
   1ab50:	e13ffe15 	stw	r4,-8(fp)
   1ab54:	2805883a 	mov	r2,r5
   1ab58:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1ab5c:	e0bffe17 	ldw	r2,-8(fp)
   1ab60:	10800a17 	ldw	r2,40(r2)
   1ab64:	1007883a 	mov	r3,r2
   1ab68:	e0bfff03 	ldbu	r2,-4(fp)
   1ab6c:	18800035 	stwio	r2,0(r3)
	return 0;
   1ab70:	0005883a 	mov	r2,zero
}
   1ab74:	e037883a 	mov	sp,fp
   1ab78:	df000017 	ldw	fp,0(sp)
   1ab7c:	dec00104 	addi	sp,sp,4
   1ab80:	f800283a 	ret

0001ab84 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ab84:	defffa04 	addi	sp,sp,-24
   1ab88:	dfc00515 	stw	ra,20(sp)
   1ab8c:	df000415 	stw	fp,16(sp)
   1ab90:	df000404 	addi	fp,sp,16
   1ab94:	e13ffd15 	stw	r4,-12(fp)
   1ab98:	e17ffe15 	stw	r5,-8(fp)
   1ab9c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1aba0:	e0bffd17 	ldw	r2,-12(fp)
   1aba4:	10800a17 	ldw	r2,40(r2)
   1aba8:	10800037 	ldwio	r2,0(r2)
   1abac:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1abb0:	e0bffc17 	ldw	r2,-16(fp)
   1abb4:	1007883a 	mov	r3,r2
   1abb8:	e0bffe17 	ldw	r2,-8(fp)
   1abbc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1abc0:	e13ffc17 	ldw	r4,-16(fp)
   1abc4:	001ab000 	call	1ab00 <alt_up_rs232_check_parity>
   1abc8:	1007883a 	mov	r3,r2
   1abcc:	e0bfff17 	ldw	r2,-4(fp)
   1abd0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1abd4:	e0bffc17 	ldw	r2,-16(fp)
   1abd8:	10a0000c 	andi	r2,r2,32768
   1abdc:	1004d3fa 	srli	r2,r2,15
   1abe0:	10bfffc4 	addi	r2,r2,-1
}
   1abe4:	e037883a 	mov	sp,fp
   1abe8:	dfc00117 	ldw	ra,4(sp)
   1abec:	df000017 	ldw	fp,0(sp)
   1abf0:	dec00204 	addi	sp,sp,8
   1abf4:	f800283a 	ret

0001abf8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1abf8:	defff804 	addi	sp,sp,-32
   1abfc:	dfc00715 	stw	ra,28(sp)
   1ac00:	df000615 	stw	fp,24(sp)
   1ac04:	df000604 	addi	fp,sp,24
   1ac08:	e13ffd15 	stw	r4,-12(fp)
   1ac0c:	e17ffe15 	stw	r5,-8(fp)
   1ac10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ac14:	e0bffd17 	ldw	r2,-12(fp)
   1ac18:	10800017 	ldw	r2,0(r2)
   1ac1c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1ac20:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1ac24:	00000e06 	br	1ac60 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1ac28:	e0bffe17 	ldw	r2,-8(fp)
   1ac2c:	10c00044 	addi	r3,r2,1
   1ac30:	e0fffe15 	stw	r3,-8(fp)
   1ac34:	e0fffc04 	addi	r3,fp,-16
   1ac38:	e13ffb17 	ldw	r4,-20(fp)
   1ac3c:	100b883a 	mov	r5,r2
   1ac40:	180d883a 	mov	r6,r3
   1ac44:	001ab840 	call	1ab84 <alt_up_rs232_read_data>
   1ac48:	1000041e 	bne	r2,zero,1ac5c <alt_up_rs232_read_fd+0x64>
			count++;
   1ac4c:	e0bffa17 	ldw	r2,-24(fp)
   1ac50:	10800044 	addi	r2,r2,1
   1ac54:	e0bffa15 	stw	r2,-24(fp)
   1ac58:	00000106 	br	1ac60 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1ac5c:	00000406 	br	1ac70 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ac60:	e0bfff17 	ldw	r2,-4(fp)
   1ac64:	10ffffc4 	addi	r3,r2,-1
   1ac68:	e0ffff15 	stw	r3,-4(fp)
   1ac6c:	103fee1e 	bne	r2,zero,1ac28 <__alt_mem_Flash_flash_data+0xf401ac28>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ac70:	e0bffa17 	ldw	r2,-24(fp)
}
   1ac74:	e037883a 	mov	sp,fp
   1ac78:	dfc00117 	ldw	ra,4(sp)
   1ac7c:	df000017 	ldw	fp,0(sp)
   1ac80:	dec00204 	addi	sp,sp,8
   1ac84:	f800283a 	ret

0001ac88 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ac88:	defff904 	addi	sp,sp,-28
   1ac8c:	dfc00615 	stw	ra,24(sp)
   1ac90:	df000515 	stw	fp,20(sp)
   1ac94:	df000504 	addi	fp,sp,20
   1ac98:	e13ffd15 	stw	r4,-12(fp)
   1ac9c:	e17ffe15 	stw	r5,-8(fp)
   1aca0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1aca4:	e0bffd17 	ldw	r2,-12(fp)
   1aca8:	10800017 	ldw	r2,0(r2)
   1acac:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1acb0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1acb4:	00000f06 	br	1acf4 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1acb8:	e0bffe17 	ldw	r2,-8(fp)
   1acbc:	10800003 	ldbu	r2,0(r2)
   1acc0:	10803fcc 	andi	r2,r2,255
   1acc4:	e13ffc17 	ldw	r4,-16(fp)
   1acc8:	100b883a 	mov	r5,r2
   1accc:	001ab440 	call	1ab44 <alt_up_rs232_write_data>
   1acd0:	1000071e 	bne	r2,zero,1acf0 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1acd4:	e0bffb17 	ldw	r2,-20(fp)
   1acd8:	10800044 	addi	r2,r2,1
   1acdc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1ace0:	e0bffe17 	ldw	r2,-8(fp)
   1ace4:	10800044 	addi	r2,r2,1
   1ace8:	e0bffe15 	stw	r2,-8(fp)
   1acec:	00000106 	br	1acf4 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1acf0:	00000406 	br	1ad04 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1acf4:	e0bfff17 	ldw	r2,-4(fp)
   1acf8:	10ffffc4 	addi	r3,r2,-1
   1acfc:	e0ffff15 	stw	r3,-4(fp)
   1ad00:	103fed1e 	bne	r2,zero,1acb8 <__alt_mem_Flash_flash_data+0xf401acb8>
			ptr++;
		}
		else
			break;
	}
	return count;
   1ad04:	e0bffb17 	ldw	r2,-20(fp)
}
   1ad08:	e037883a 	mov	sp,fp
   1ad0c:	dfc00117 	ldw	ra,4(sp)
   1ad10:	df000017 	ldw	fp,0(sp)
   1ad14:	dec00204 	addi	sp,sp,8
   1ad18:	f800283a 	ret

0001ad1c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1ad1c:	defffc04 	addi	sp,sp,-16
   1ad20:	dfc00315 	stw	ra,12(sp)
   1ad24:	df000215 	stw	fp,8(sp)
   1ad28:	df000204 	addi	fp,sp,8
   1ad2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1ad30:	e13fff17 	ldw	r4,-4(fp)
   1ad34:	014000b4 	movhi	r5,2
   1ad38:	297ac704 	addi	r5,r5,-5348
   1ad3c:	001b34c0 	call	1b34c <alt_find_dev>
   1ad40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ad44:	e0bffe17 	ldw	r2,-8(fp)
}
   1ad48:	e037883a 	mov	sp,fp
   1ad4c:	dfc00117 	ldw	ra,4(sp)
   1ad50:	df000017 	ldw	fp,0(sp)
   1ad54:	dec00204 	addi	sp,sp,8
   1ad58:	f800283a 	ret

0001ad5c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1ad5c:	defffc04 	addi	sp,sp,-16
   1ad60:	dfc00315 	stw	ra,12(sp)
   1ad64:	df000215 	stw	fp,8(sp)
   1ad68:	df000204 	addi	fp,sp,8
   1ad6c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1ad70:	e0bfff17 	ldw	r2,-4(fp)
   1ad74:	10800217 	ldw	r2,8(r2)
   1ad78:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1ad7c:	00000b06 	br	1adac <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1ad80:	e13ffe17 	ldw	r4,-8(fp)
   1ad84:	014000b4 	movhi	r5,2
   1ad88:	29731204 	addi	r5,r5,-13240
   1ad8c:	0000bdc0 	call	bdc <strcmp>
   1ad90:	1000031e 	bne	r2,zero,1ada0 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1ad94:	e0bffe17 	ldw	r2,-8(fp)
   1ad98:	10000005 	stb	zero,0(r2)
			break;
   1ad9c:	00000906 	br	1adc4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1ada0:	e0bffe17 	ldw	r2,-8(fp)
   1ada4:	10800044 	addi	r2,r2,1
   1ada8:	e0bffe15 	stw	r2,-8(fp)
   1adac:	e0bffe17 	ldw	r2,-8(fp)
   1adb0:	10800003 	ldbu	r2,0(r2)
   1adb4:	10803fcc 	andi	r2,r2,255
   1adb8:	1080201c 	xori	r2,r2,128
   1adbc:	10bfe004 	addi	r2,r2,-128
   1adc0:	103fef1e 	bne	r2,zero,1ad80 <__alt_mem_Flash_flash_data+0xf401ad80>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1adc4:	0001883a 	nop
}
   1adc8:	e037883a 	mov	sp,fp
   1adcc:	dfc00117 	ldw	ra,4(sp)
   1add0:	df000017 	ldw	fp,0(sp)
   1add4:	dec00204 	addi	sp,sp,8
   1add8:	f800283a 	ret

0001addc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1addc:	defffc04 	addi	sp,sp,-16
   1ade0:	dfc00315 	stw	ra,12(sp)
   1ade4:	df000215 	stw	fp,8(sp)
   1ade8:	df000204 	addi	fp,sp,8
   1adec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1adf0:	e13fff17 	ldw	r4,-4(fp)
   1adf4:	014000b4 	movhi	r5,2
   1adf8:	297ac704 	addi	r5,r5,-5348
   1adfc:	001b34c0 	call	1b34c <alt_find_dev>
   1ae00:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ae04:	e0bffe17 	ldw	r2,-8(fp)
}
   1ae08:	e037883a 	mov	sp,fp
   1ae0c:	dfc00117 	ldw	ra,4(sp)
   1ae10:	df000017 	ldw	fp,0(sp)
   1ae14:	dec00204 	addi	sp,sp,8
   1ae18:	f800283a 	ret

0001ae1c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1ae1c:	defffa04 	addi	sp,sp,-24
   1ae20:	df000515 	stw	fp,20(sp)
   1ae24:	df000504 	addi	fp,sp,20
   1ae28:	e13ffc15 	stw	r4,-16(fp)
   1ae2c:	2805883a 	mov	r2,r5
   1ae30:	e1bffe15 	stw	r6,-8(fp)
   1ae34:	e1ffff15 	stw	r7,-4(fp)
   1ae38:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1ae3c:	e0bffc17 	ldw	r2,-16(fp)
   1ae40:	10800c17 	ldw	r2,48(r2)
   1ae44:	e0fffe17 	ldw	r3,-8(fp)
   1ae48:	1880042e 	bgeu	r3,r2,1ae5c <alt_up_char_buffer_draw+0x40>
   1ae4c:	e0bffc17 	ldw	r2,-16(fp)
   1ae50:	10800d17 	ldw	r2,52(r2)
   1ae54:	e0ffff17 	ldw	r3,-4(fp)
   1ae58:	18800236 	bltu	r3,r2,1ae64 <alt_up_char_buffer_draw+0x48>
		return -1;
   1ae5c:	00bfffc4 	movi	r2,-1
   1ae60:	00001d06 	br	1aed8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1ae64:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1ae68:	e0bffc17 	ldw	r2,-16(fp)
   1ae6c:	10c00f17 	ldw	r3,60(r2)
   1ae70:	e0bffe17 	ldw	r2,-8(fp)
   1ae74:	1884703a 	and	r2,r3,r2
   1ae78:	e0fffc17 	ldw	r3,-16(fp)
   1ae7c:	18c00e17 	ldw	r3,56(r3)
   1ae80:	10c4983a 	sll	r2,r2,r3
   1ae84:	e0fffb17 	ldw	r3,-20(fp)
   1ae88:	1884b03a 	or	r2,r3,r2
   1ae8c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1ae90:	e0bffc17 	ldw	r2,-16(fp)
   1ae94:	10c01117 	ldw	r3,68(r2)
   1ae98:	e0bfff17 	ldw	r2,-4(fp)
   1ae9c:	1884703a 	and	r2,r3,r2
   1aea0:	e0fffc17 	ldw	r3,-16(fp)
   1aea4:	18c01017 	ldw	r3,64(r3)
   1aea8:	10c4983a 	sll	r2,r2,r3
   1aeac:	e0fffb17 	ldw	r3,-20(fp)
   1aeb0:	1884b03a 	or	r2,r3,r2
   1aeb4:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1aeb8:	e0bffc17 	ldw	r2,-16(fp)
   1aebc:	10c00b17 	ldw	r3,44(r2)
   1aec0:	e0bffb17 	ldw	r2,-20(fp)
   1aec4:	1885883a 	add	r2,r3,r2
   1aec8:	1007883a 	mov	r3,r2
   1aecc:	e0bffd03 	ldbu	r2,-12(fp)
   1aed0:	18800025 	stbio	r2,0(r3)

	return 0;
   1aed4:	0005883a 	mov	r2,zero
}
   1aed8:	e037883a 	mov	sp,fp
   1aedc:	df000017 	ldw	fp,0(sp)
   1aee0:	dec00104 	addi	sp,sp,4
   1aee4:	f800283a 	ret

0001aee8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1aee8:	defffa04 	addi	sp,sp,-24
   1aeec:	df000515 	stw	fp,20(sp)
   1aef0:	df000504 	addi	fp,sp,20
   1aef4:	e13ffc15 	stw	r4,-16(fp)
   1aef8:	e17ffd15 	stw	r5,-12(fp)
   1aefc:	e1bffe15 	stw	r6,-8(fp)
   1af00:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1af04:	e0bffc17 	ldw	r2,-16(fp)
   1af08:	10800c17 	ldw	r2,48(r2)
   1af0c:	e0fffe17 	ldw	r3,-8(fp)
   1af10:	1880042e 	bgeu	r3,r2,1af24 <alt_up_char_buffer_string+0x3c>
   1af14:	e0bffc17 	ldw	r2,-16(fp)
   1af18:	10800d17 	ldw	r2,52(r2)
   1af1c:	e0ffff17 	ldw	r3,-4(fp)
   1af20:	18800236 	bltu	r3,r2,1af2c <alt_up_char_buffer_string+0x44>
		return -1;
   1af24:	00bfffc4 	movi	r2,-1
   1af28:	00002b06 	br	1afd8 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1af2c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1af30:	e0bffc17 	ldw	r2,-16(fp)
   1af34:	10801017 	ldw	r2,64(r2)
   1af38:	1007883a 	mov	r3,r2
   1af3c:	e0bfff17 	ldw	r2,-4(fp)
   1af40:	10c6983a 	sll	r3,r2,r3
   1af44:	e0bffe17 	ldw	r2,-8(fp)
   1af48:	1885883a 	add	r2,r3,r2
   1af4c:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1af50:	00001a06 	br	1afbc <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1af54:	e0bffc17 	ldw	r2,-16(fp)
   1af58:	10c00b17 	ldw	r3,44(r2)
   1af5c:	e0bffb17 	ldw	r2,-20(fp)
   1af60:	1885883a 	add	r2,r3,r2
   1af64:	1007883a 	mov	r3,r2
   1af68:	e0bffd17 	ldw	r2,-12(fp)
   1af6c:	10800003 	ldbu	r2,0(r2)
   1af70:	10803fcc 	andi	r2,r2,255
   1af74:	1080201c 	xori	r2,r2,128
   1af78:	10bfe004 	addi	r2,r2,-128
   1af7c:	18800025 	stbio	r2,0(r3)
		++ptr;
   1af80:	e0bffd17 	ldw	r2,-12(fp)
   1af84:	10800044 	addi	r2,r2,1
   1af88:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1af8c:	e0bffe17 	ldw	r2,-8(fp)
   1af90:	10800044 	addi	r2,r2,1
   1af94:	e0bffe15 	stw	r2,-8(fp)
   1af98:	e0bffc17 	ldw	r2,-16(fp)
   1af9c:	10800c17 	ldw	r2,48(r2)
   1afa0:	e0fffe17 	ldw	r3,-8(fp)
   1afa4:	18800236 	bltu	r3,r2,1afb0 <alt_up_char_buffer_string+0xc8>
			return -1;
   1afa8:	00bfffc4 	movi	r2,-1
   1afac:	00000a06 	br	1afd8 <alt_up_char_buffer_string+0xf0>
		++offset;
   1afb0:	e0bffb17 	ldw	r2,-20(fp)
   1afb4:	10800044 	addi	r2,r2,1
   1afb8:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1afbc:	e0bffd17 	ldw	r2,-12(fp)
   1afc0:	10800003 	ldbu	r2,0(r2)
   1afc4:	10803fcc 	andi	r2,r2,255
   1afc8:	1080201c 	xori	r2,r2,128
   1afcc:	10bfe004 	addi	r2,r2,-128
   1afd0:	103fe01e 	bne	r2,zero,1af54 <__alt_mem_Flash_flash_data+0xf401af54>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1afd4:	0005883a 	mov	r2,zero
}
   1afd8:	e037883a 	mov	sp,fp
   1afdc:	df000017 	ldw	fp,0(sp)
   1afe0:	dec00104 	addi	sp,sp,4
   1afe4:	f800283a 	ret

0001afe8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1afe8:	defffe04 	addi	sp,sp,-8
   1afec:	df000115 	stw	fp,4(sp)
   1aff0:	df000104 	addi	fp,sp,4
   1aff4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1aff8:	e0bfff17 	ldw	r2,-4(fp)
   1affc:	10800a17 	ldw	r2,40(r2)
   1b000:	10800084 	addi	r2,r2,2
   1b004:	1007883a 	mov	r3,r2
   1b008:	00800044 	movi	r2,1
   1b00c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1b010:	0001883a 	nop
   1b014:	e0bfff17 	ldw	r2,-4(fp)
   1b018:	10800a17 	ldw	r2,40(r2)
   1b01c:	10800084 	addi	r2,r2,2
   1b020:	10800023 	ldbuio	r2,0(r2)
   1b024:	10803fcc 	andi	r2,r2,255
   1b028:	1080004c 	andi	r2,r2,1
   1b02c:	103ff91e 	bne	r2,zero,1b014 <__alt_mem_Flash_flash_data+0xf401b014>
	return 0;
   1b030:	0005883a 	mov	r2,zero
}
   1b034:	e037883a 	mov	sp,fp
   1b038:	df000017 	ldw	fp,0(sp)
   1b03c:	dec00104 	addi	sp,sp,4
   1b040:	f800283a 	ret

0001b044 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b044:	defff504 	addi	sp,sp,-44
   1b048:	df000a15 	stw	fp,40(sp)
   1b04c:	df000a04 	addi	fp,sp,40
   1b050:	e13ffc15 	stw	r4,-16(fp)
   1b054:	e17ffd15 	stw	r5,-12(fp)
   1b058:	e1bffe15 	stw	r6,-8(fp)
   1b05c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b060:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b064:	008000b4 	movhi	r2,2
   1b068:	1082e604 	addi	r2,r2,2968
   1b06c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b070:	10003f26 	beq	r2,zero,1b170 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b074:	e0bffc17 	ldw	r2,-16(fp)
   1b078:	10003b26 	beq	r2,zero,1b168 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b07c:	e0bffc17 	ldw	r2,-16(fp)
   1b080:	e0fffe17 	ldw	r3,-8(fp)
   1b084:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b088:	e0bffc17 	ldw	r2,-16(fp)
   1b08c:	e0ffff17 	ldw	r3,-4(fp)
   1b090:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b094:	0005303a 	rdctl	r2,status
   1b098:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b09c:	e0fff817 	ldw	r3,-32(fp)
   1b0a0:	00bfff84 	movi	r2,-2
   1b0a4:	1884703a 	and	r2,r3,r2
   1b0a8:	1001703a 	wrctl	status,r2
  
  return context;
   1b0ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b0b0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b0b4:	008000b4 	movhi	r2,2
   1b0b8:	1082e704 	addi	r2,r2,2972
   1b0bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b0c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b0c4:	e0fffd17 	ldw	r3,-12(fp)
   1b0c8:	e0bff617 	ldw	r2,-40(fp)
   1b0cc:	1885883a 	add	r2,r3,r2
   1b0d0:	10c00044 	addi	r3,r2,1
   1b0d4:	e0bffc17 	ldw	r2,-16(fp)
   1b0d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b0dc:	e0bffc17 	ldw	r2,-16(fp)
   1b0e0:	10c00217 	ldw	r3,8(r2)
   1b0e4:	e0bff617 	ldw	r2,-40(fp)
   1b0e8:	1880042e 	bgeu	r3,r2,1b0fc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b0ec:	e0bffc17 	ldw	r2,-16(fp)
   1b0f0:	00c00044 	movi	r3,1
   1b0f4:	10c00405 	stb	r3,16(r2)
   1b0f8:	00000206 	br	1b104 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b0fc:	e0bffc17 	ldw	r2,-16(fp)
   1b100:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b104:	e0fffc17 	ldw	r3,-16(fp)
   1b108:	008000b4 	movhi	r2,2
   1b10c:	10baec04 	addi	r2,r2,-5200
   1b110:	e0bff915 	stw	r2,-28(fp)
   1b114:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b118:	e0bffa17 	ldw	r2,-24(fp)
   1b11c:	e0fff917 	ldw	r3,-28(fp)
   1b120:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b124:	e0bff917 	ldw	r2,-28(fp)
   1b128:	10c00017 	ldw	r3,0(r2)
   1b12c:	e0bffa17 	ldw	r2,-24(fp)
   1b130:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b134:	e0bff917 	ldw	r2,-28(fp)
   1b138:	10800017 	ldw	r2,0(r2)
   1b13c:	e0fffa17 	ldw	r3,-24(fp)
   1b140:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b144:	e0bff917 	ldw	r2,-28(fp)
   1b148:	e0fffa17 	ldw	r3,-24(fp)
   1b14c:	10c00015 	stw	r3,0(r2)
   1b150:	e0bff717 	ldw	r2,-36(fp)
   1b154:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b158:	e0bffb17 	ldw	r2,-20(fp)
   1b15c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b160:	0005883a 	mov	r2,zero
   1b164:	00000306 	br	1b174 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b168:	00bffa84 	movi	r2,-22
   1b16c:	00000106 	br	1b174 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b170:	00bfde84 	movi	r2,-134
  }
}
   1b174:	e037883a 	mov	sp,fp
   1b178:	df000017 	ldw	fp,0(sp)
   1b17c:	dec00104 	addi	sp,sp,4
   1b180:	f800283a 	ret

0001b184 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b184:	deffff04 	addi	sp,sp,-4
   1b188:	df000015 	stw	fp,0(sp)
   1b18c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b190:	e037883a 	mov	sp,fp
   1b194:	df000017 	ldw	fp,0(sp)
   1b198:	dec00104 	addi	sp,sp,4
   1b19c:	f800283a 	ret

0001b1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b1a0:	defffe04 	addi	sp,sp,-8
   1b1a4:	dfc00115 	stw	ra,4(sp)
   1b1a8:	df000015 	stw	fp,0(sp)
   1b1ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b1b0:	008000b4 	movhi	r2,2
   1b1b4:	10baca04 	addi	r2,r2,-5336
   1b1b8:	10800017 	ldw	r2,0(r2)
   1b1bc:	10000526 	beq	r2,zero,1b1d4 <alt_get_errno+0x34>
   1b1c0:	008000b4 	movhi	r2,2
   1b1c4:	10baca04 	addi	r2,r2,-5336
   1b1c8:	10800017 	ldw	r2,0(r2)
   1b1cc:	103ee83a 	callr	r2
   1b1d0:	00000206 	br	1b1dc <alt_get_errno+0x3c>
   1b1d4:	008000b4 	movhi	r2,2
   1b1d8:	1082c804 	addi	r2,r2,2848
}
   1b1dc:	e037883a 	mov	sp,fp
   1b1e0:	dfc00117 	ldw	ra,4(sp)
   1b1e4:	df000017 	ldw	fp,0(sp)
   1b1e8:	dec00204 	addi	sp,sp,8
   1b1ec:	f800283a 	ret

0001b1f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b1f0:	defffa04 	addi	sp,sp,-24
   1b1f4:	dfc00515 	stw	ra,20(sp)
   1b1f8:	df000415 	stw	fp,16(sp)
   1b1fc:	df000404 	addi	fp,sp,16
   1b200:	e13ffe15 	stw	r4,-8(fp)
   1b204:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b208:	e0bffe17 	ldw	r2,-8(fp)
   1b20c:	10000326 	beq	r2,zero,1b21c <alt_dev_llist_insert+0x2c>
   1b210:	e0bffe17 	ldw	r2,-8(fp)
   1b214:	10800217 	ldw	r2,8(r2)
   1b218:	1000061e 	bne	r2,zero,1b234 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1b21c:	001b1a00 	call	1b1a0 <alt_get_errno>
   1b220:	1007883a 	mov	r3,r2
   1b224:	00800584 	movi	r2,22
   1b228:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b22c:	00bffa84 	movi	r2,-22
   1b230:	00001306 	br	1b280 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b234:	e0bffe17 	ldw	r2,-8(fp)
   1b238:	e0ffff17 	ldw	r3,-4(fp)
   1b23c:	e0fffc15 	stw	r3,-16(fp)
   1b240:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b244:	e0bffd17 	ldw	r2,-12(fp)
   1b248:	e0fffc17 	ldw	r3,-16(fp)
   1b24c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b250:	e0bffc17 	ldw	r2,-16(fp)
   1b254:	10c00017 	ldw	r3,0(r2)
   1b258:	e0bffd17 	ldw	r2,-12(fp)
   1b25c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b260:	e0bffc17 	ldw	r2,-16(fp)
   1b264:	10800017 	ldw	r2,0(r2)
   1b268:	e0fffd17 	ldw	r3,-12(fp)
   1b26c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b270:	e0bffc17 	ldw	r2,-16(fp)
   1b274:	e0fffd17 	ldw	r3,-12(fp)
   1b278:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b27c:	0005883a 	mov	r2,zero
}
   1b280:	e037883a 	mov	sp,fp
   1b284:	dfc00117 	ldw	ra,4(sp)
   1b288:	df000017 	ldw	fp,0(sp)
   1b28c:	dec00204 	addi	sp,sp,8
   1b290:	f800283a 	ret

0001b294 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b294:	defffd04 	addi	sp,sp,-12
   1b298:	dfc00215 	stw	ra,8(sp)
   1b29c:	df000115 	stw	fp,4(sp)
   1b2a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b2a4:	008000b4 	movhi	r2,2
   1b2a8:	10b14e04 	addi	r2,r2,-15048
   1b2ac:	e0bfff15 	stw	r2,-4(fp)
   1b2b0:	00000606 	br	1b2cc <_do_ctors+0x38>
        (*ctor) (); 
   1b2b4:	e0bfff17 	ldw	r2,-4(fp)
   1b2b8:	10800017 	ldw	r2,0(r2)
   1b2bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b2c0:	e0bfff17 	ldw	r2,-4(fp)
   1b2c4:	10bfff04 	addi	r2,r2,-4
   1b2c8:	e0bfff15 	stw	r2,-4(fp)
   1b2cc:	e0ffff17 	ldw	r3,-4(fp)
   1b2d0:	008000b4 	movhi	r2,2
   1b2d4:	10b14f04 	addi	r2,r2,-15044
   1b2d8:	18bff62e 	bgeu	r3,r2,1b2b4 <__alt_mem_Flash_flash_data+0xf401b2b4>
        (*ctor) (); 
}
   1b2dc:	e037883a 	mov	sp,fp
   1b2e0:	dfc00117 	ldw	ra,4(sp)
   1b2e4:	df000017 	ldw	fp,0(sp)
   1b2e8:	dec00204 	addi	sp,sp,8
   1b2ec:	f800283a 	ret

0001b2f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b2f0:	defffd04 	addi	sp,sp,-12
   1b2f4:	dfc00215 	stw	ra,8(sp)
   1b2f8:	df000115 	stw	fp,4(sp)
   1b2fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b300:	008000b4 	movhi	r2,2
   1b304:	10b14e04 	addi	r2,r2,-15048
   1b308:	e0bfff15 	stw	r2,-4(fp)
   1b30c:	00000606 	br	1b328 <_do_dtors+0x38>
        (*dtor) (); 
   1b310:	e0bfff17 	ldw	r2,-4(fp)
   1b314:	10800017 	ldw	r2,0(r2)
   1b318:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b31c:	e0bfff17 	ldw	r2,-4(fp)
   1b320:	10bfff04 	addi	r2,r2,-4
   1b324:	e0bfff15 	stw	r2,-4(fp)
   1b328:	e0ffff17 	ldw	r3,-4(fp)
   1b32c:	008000b4 	movhi	r2,2
   1b330:	10b14f04 	addi	r2,r2,-15044
   1b334:	18bff62e 	bgeu	r3,r2,1b310 <__alt_mem_Flash_flash_data+0xf401b310>
        (*dtor) (); 
}
   1b338:	e037883a 	mov	sp,fp
   1b33c:	dfc00117 	ldw	ra,4(sp)
   1b340:	df000017 	ldw	fp,0(sp)
   1b344:	dec00204 	addi	sp,sp,8
   1b348:	f800283a 	ret

0001b34c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1b34c:	defffa04 	addi	sp,sp,-24
   1b350:	dfc00515 	stw	ra,20(sp)
   1b354:	df000415 	stw	fp,16(sp)
   1b358:	df000404 	addi	fp,sp,16
   1b35c:	e13ffe15 	stw	r4,-8(fp)
   1b360:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1b364:	e0bfff17 	ldw	r2,-4(fp)
   1b368:	10800017 	ldw	r2,0(r2)
   1b36c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1b370:	e13ffe17 	ldw	r4,-8(fp)
   1b374:	0000c800 	call	c80 <strlen>
   1b378:	10800044 	addi	r2,r2,1
   1b37c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b380:	00000d06 	br	1b3b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1b384:	e0bffc17 	ldw	r2,-16(fp)
   1b388:	10c00217 	ldw	r3,8(r2)
   1b38c:	e0bffd17 	ldw	r2,-12(fp)
   1b390:	1809883a 	mov	r4,r3
   1b394:	e17ffe17 	ldw	r5,-8(fp)
   1b398:	100d883a 	mov	r6,r2
   1b39c:	001c1dc0 	call	1c1dc <memcmp>
   1b3a0:	1000021e 	bne	r2,zero,1b3ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1b3a4:	e0bffc17 	ldw	r2,-16(fp)
   1b3a8:	00000706 	br	1b3c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1b3ac:	e0bffc17 	ldw	r2,-16(fp)
   1b3b0:	10800017 	ldw	r2,0(r2)
   1b3b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b3b8:	e0fffc17 	ldw	r3,-16(fp)
   1b3bc:	e0bfff17 	ldw	r2,-4(fp)
   1b3c0:	18bff01e 	bne	r3,r2,1b384 <__alt_mem_Flash_flash_data+0xf401b384>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1b3c4:	0005883a 	mov	r2,zero
}
   1b3c8:	e037883a 	mov	sp,fp
   1b3cc:	dfc00117 	ldw	ra,4(sp)
   1b3d0:	df000017 	ldw	fp,0(sp)
   1b3d4:	dec00204 	addi	sp,sp,8
   1b3d8:	f800283a 	ret

0001b3dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b3dc:	defffe04 	addi	sp,sp,-8
   1b3e0:	dfc00115 	stw	ra,4(sp)
   1b3e4:	df000015 	stw	fp,0(sp)
   1b3e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b3ec:	0009883a 	mov	r4,zero
   1b3f0:	01440004 	movi	r5,4096
   1b3f4:	001c0680 	call	1c068 <alt_icache_flush>
#endif
}
   1b3f8:	e037883a 	mov	sp,fp
   1b3fc:	dfc00117 	ldw	ra,4(sp)
   1b400:	df000017 	ldw	fp,0(sp)
   1b404:	dec00204 	addi	sp,sp,8
   1b408:	f800283a 	ret

0001b40c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b40c:	defff904 	addi	sp,sp,-28
   1b410:	dfc00615 	stw	ra,24(sp)
   1b414:	df000515 	stw	fp,20(sp)
   1b418:	df000504 	addi	fp,sp,20
   1b41c:	e13ffc15 	stw	r4,-16(fp)
   1b420:	e17ffd15 	stw	r5,-12(fp)
   1b424:	e1bffe15 	stw	r6,-8(fp)
   1b428:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1b42c:	e13ffd17 	ldw	r4,-12(fp)
   1b430:	e17ffe17 	ldw	r5,-8(fp)
   1b434:	e1bfff17 	ldw	r6,-4(fp)
   1b438:	001b8100 	call	1b810 <open>
   1b43c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1b440:	e0bffb17 	ldw	r2,-20(fp)
   1b444:	10001c16 	blt	r2,zero,1b4b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b448:	008000b4 	movhi	r2,2
   1b44c:	10b54d04 	addi	r2,r2,-10956
   1b450:	e0fffb17 	ldw	r3,-20(fp)
   1b454:	18c00324 	muli	r3,r3,12
   1b458:	10c5883a 	add	r2,r2,r3
   1b45c:	10c00017 	ldw	r3,0(r2)
   1b460:	e0bffc17 	ldw	r2,-16(fp)
   1b464:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b468:	008000b4 	movhi	r2,2
   1b46c:	10b54d04 	addi	r2,r2,-10956
   1b470:	e0fffb17 	ldw	r3,-20(fp)
   1b474:	18c00324 	muli	r3,r3,12
   1b478:	18c00104 	addi	r3,r3,4
   1b47c:	10c5883a 	add	r2,r2,r3
   1b480:	10c00017 	ldw	r3,0(r2)
   1b484:	e0bffc17 	ldw	r2,-16(fp)
   1b488:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b48c:	008000b4 	movhi	r2,2
   1b490:	10b54d04 	addi	r2,r2,-10956
   1b494:	e0fffb17 	ldw	r3,-20(fp)
   1b498:	18c00324 	muli	r3,r3,12
   1b49c:	18c00204 	addi	r3,r3,8
   1b4a0:	10c5883a 	add	r2,r2,r3
   1b4a4:	10c00017 	ldw	r3,0(r2)
   1b4a8:	e0bffc17 	ldw	r2,-16(fp)
   1b4ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b4b0:	e13ffb17 	ldw	r4,-20(fp)
   1b4b4:	00106500 	call	10650 <alt_release_fd>
  }
} 
   1b4b8:	e037883a 	mov	sp,fp
   1b4bc:	dfc00117 	ldw	ra,4(sp)
   1b4c0:	df000017 	ldw	fp,0(sp)
   1b4c4:	dec00204 	addi	sp,sp,8
   1b4c8:	f800283a 	ret

0001b4cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b4cc:	defffb04 	addi	sp,sp,-20
   1b4d0:	dfc00415 	stw	ra,16(sp)
   1b4d4:	df000315 	stw	fp,12(sp)
   1b4d8:	df000304 	addi	fp,sp,12
   1b4dc:	e13ffd15 	stw	r4,-12(fp)
   1b4e0:	e17ffe15 	stw	r5,-8(fp)
   1b4e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b4e8:	010000b4 	movhi	r4,2
   1b4ec:	21355004 	addi	r4,r4,-10944
   1b4f0:	e17ffd17 	ldw	r5,-12(fp)
   1b4f4:	01800044 	movi	r6,1
   1b4f8:	01c07fc4 	movi	r7,511
   1b4fc:	001b40c0 	call	1b40c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b500:	010000b4 	movhi	r4,2
   1b504:	21354d04 	addi	r4,r4,-10956
   1b508:	e17ffe17 	ldw	r5,-8(fp)
   1b50c:	000d883a 	mov	r6,zero
   1b510:	01c07fc4 	movi	r7,511
   1b514:	001b40c0 	call	1b40c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b518:	010000b4 	movhi	r4,2
   1b51c:	21355304 	addi	r4,r4,-10932
   1b520:	e17fff17 	ldw	r5,-4(fp)
   1b524:	01800044 	movi	r6,1
   1b528:	01c07fc4 	movi	r7,511
   1b52c:	001b40c0 	call	1b40c <alt_open_fd>
}  
   1b530:	e037883a 	mov	sp,fp
   1b534:	dfc00117 	ldw	ra,4(sp)
   1b538:	df000017 	ldw	fp,0(sp)
   1b53c:	dec00204 	addi	sp,sp,8
   1b540:	f800283a 	ret

0001b544 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1b544:	defff004 	addi	sp,sp,-64
   1b548:	df000f15 	stw	fp,60(sp)
   1b54c:	df000f04 	addi	fp,sp,60
   1b550:	e13ffd15 	stw	r4,-12(fp)
   1b554:	e17ffe15 	stw	r5,-8(fp)
   1b558:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1b55c:	00bffa84 	movi	r2,-22
   1b560:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b564:	e0bffd17 	ldw	r2,-12(fp)
   1b568:	10800828 	cmpgeui	r2,r2,32
   1b56c:	10005c1e 	bne	r2,zero,1b6e0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b570:	0005303a 	rdctl	r2,status
   1b574:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b578:	e0fff317 	ldw	r3,-52(fp)
   1b57c:	00bfff84 	movi	r2,-2
   1b580:	1884703a 	and	r2,r3,r2
   1b584:	1001703a 	wrctl	status,r2
  
  return context;
   1b588:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1b58c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1b590:	008000b4 	movhi	r2,2
   1b594:	109f8604 	addi	r2,r2,32280
   1b598:	e0fffd17 	ldw	r3,-12(fp)
   1b59c:	180690fa 	slli	r3,r3,3
   1b5a0:	10c5883a 	add	r2,r2,r3
   1b5a4:	e0ffff17 	ldw	r3,-4(fp)
   1b5a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1b5ac:	008000b4 	movhi	r2,2
   1b5b0:	109f8604 	addi	r2,r2,32280
   1b5b4:	e0fffd17 	ldw	r3,-12(fp)
   1b5b8:	180690fa 	slli	r3,r3,3
   1b5bc:	18c00104 	addi	r3,r3,4
   1b5c0:	10c5883a 	add	r2,r2,r3
   1b5c4:	e0fffe17 	ldw	r3,-8(fp)
   1b5c8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1b5cc:	e0bfff17 	ldw	r2,-4(fp)
   1b5d0:	10001f26 	beq	r2,zero,1b650 <alt_irq_register+0x10c>
   1b5d4:	e0bffd17 	ldw	r2,-12(fp)
   1b5d8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b5dc:	0005303a 	rdctl	r2,status
   1b5e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b5e4:	e0fff517 	ldw	r3,-44(fp)
   1b5e8:	00bfff84 	movi	r2,-2
   1b5ec:	1884703a 	and	r2,r3,r2
   1b5f0:	1001703a 	wrctl	status,r2
  
  return context;
   1b5f4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b5f8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1b5fc:	e0bff417 	ldw	r2,-48(fp)
   1b600:	00c00044 	movi	r3,1
   1b604:	1884983a 	sll	r2,r3,r2
   1b608:	1007883a 	mov	r3,r2
   1b60c:	008000b4 	movhi	r2,2
   1b610:	1082e504 	addi	r2,r2,2964
   1b614:	10800017 	ldw	r2,0(r2)
   1b618:	1886b03a 	or	r3,r3,r2
   1b61c:	008000b4 	movhi	r2,2
   1b620:	1082e504 	addi	r2,r2,2964
   1b624:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b628:	008000b4 	movhi	r2,2
   1b62c:	1082e504 	addi	r2,r2,2964
   1b630:	10800017 	ldw	r2,0(r2)
   1b634:	100170fa 	wrctl	ienable,r2
   1b638:	e0bff617 	ldw	r2,-40(fp)
   1b63c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b640:	e0bff717 	ldw	r2,-36(fp)
   1b644:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b648:	0005883a 	mov	r2,zero
   1b64c:	00001f06 	br	1b6cc <alt_irq_register+0x188>
   1b650:	e0bffd17 	ldw	r2,-12(fp)
   1b654:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b658:	0005303a 	rdctl	r2,status
   1b65c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b660:	e0fff917 	ldw	r3,-28(fp)
   1b664:	00bfff84 	movi	r2,-2
   1b668:	1884703a 	and	r2,r3,r2
   1b66c:	1001703a 	wrctl	status,r2
  
  return context;
   1b670:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b674:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1b678:	e0bff817 	ldw	r2,-32(fp)
   1b67c:	00c00044 	movi	r3,1
   1b680:	1884983a 	sll	r2,r3,r2
   1b684:	0084303a 	nor	r2,zero,r2
   1b688:	1007883a 	mov	r3,r2
   1b68c:	008000b4 	movhi	r2,2
   1b690:	1082e504 	addi	r2,r2,2964
   1b694:	10800017 	ldw	r2,0(r2)
   1b698:	1886703a 	and	r3,r3,r2
   1b69c:	008000b4 	movhi	r2,2
   1b6a0:	1082e504 	addi	r2,r2,2964
   1b6a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b6a8:	008000b4 	movhi	r2,2
   1b6ac:	1082e504 	addi	r2,r2,2964
   1b6b0:	10800017 	ldw	r2,0(r2)
   1b6b4:	100170fa 	wrctl	ienable,r2
   1b6b8:	e0bffa17 	ldw	r2,-24(fp)
   1b6bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6c0:	e0bffb17 	ldw	r2,-20(fp)
   1b6c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b6c8:	0005883a 	mov	r2,zero
   1b6cc:	e0bff115 	stw	r2,-60(fp)
   1b6d0:	e0bff217 	ldw	r2,-56(fp)
   1b6d4:	e0bffc15 	stw	r2,-16(fp)
   1b6d8:	e0bffc17 	ldw	r2,-16(fp)
   1b6dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1b6e0:	e0bff117 	ldw	r2,-60(fp)
}
   1b6e4:	e037883a 	mov	sp,fp
   1b6e8:	df000017 	ldw	fp,0(sp)
   1b6ec:	dec00104 	addi	sp,sp,4
   1b6f0:	f800283a 	ret

0001b6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b6f4:	defffe04 	addi	sp,sp,-8
   1b6f8:	dfc00115 	stw	ra,4(sp)
   1b6fc:	df000015 	stw	fp,0(sp)
   1b700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b704:	008000b4 	movhi	r2,2
   1b708:	10baca04 	addi	r2,r2,-5336
   1b70c:	10800017 	ldw	r2,0(r2)
   1b710:	10000526 	beq	r2,zero,1b728 <alt_get_errno+0x34>
   1b714:	008000b4 	movhi	r2,2
   1b718:	10baca04 	addi	r2,r2,-5336
   1b71c:	10800017 	ldw	r2,0(r2)
   1b720:	103ee83a 	callr	r2
   1b724:	00000206 	br	1b730 <alt_get_errno+0x3c>
   1b728:	008000b4 	movhi	r2,2
   1b72c:	1082c804 	addi	r2,r2,2848
}
   1b730:	e037883a 	mov	sp,fp
   1b734:	dfc00117 	ldw	ra,4(sp)
   1b738:	df000017 	ldw	fp,0(sp)
   1b73c:	dec00204 	addi	sp,sp,8
   1b740:	f800283a 	ret

0001b744 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b744:	defffd04 	addi	sp,sp,-12
   1b748:	df000215 	stw	fp,8(sp)
   1b74c:	df000204 	addi	fp,sp,8
   1b750:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b754:	e0bfff17 	ldw	r2,-4(fp)
   1b758:	10800217 	ldw	r2,8(r2)
   1b75c:	10d00034 	orhi	r3,r2,16384
   1b760:	e0bfff17 	ldw	r2,-4(fp)
   1b764:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b768:	e03ffe15 	stw	zero,-8(fp)
   1b76c:	00001d06 	br	1b7e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b770:	008000b4 	movhi	r2,2
   1b774:	10b54d04 	addi	r2,r2,-10956
   1b778:	e0fffe17 	ldw	r3,-8(fp)
   1b77c:	18c00324 	muli	r3,r3,12
   1b780:	10c5883a 	add	r2,r2,r3
   1b784:	10c00017 	ldw	r3,0(r2)
   1b788:	e0bfff17 	ldw	r2,-4(fp)
   1b78c:	10800017 	ldw	r2,0(r2)
   1b790:	1880111e 	bne	r3,r2,1b7d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b794:	008000b4 	movhi	r2,2
   1b798:	10b54d04 	addi	r2,r2,-10956
   1b79c:	e0fffe17 	ldw	r3,-8(fp)
   1b7a0:	18c00324 	muli	r3,r3,12
   1b7a4:	18c00204 	addi	r3,r3,8
   1b7a8:	10c5883a 	add	r2,r2,r3
   1b7ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b7b0:	1000090e 	bge	r2,zero,1b7d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b7b4:	e0bffe17 	ldw	r2,-8(fp)
   1b7b8:	10c00324 	muli	r3,r2,12
   1b7bc:	008000b4 	movhi	r2,2
   1b7c0:	10b54d04 	addi	r2,r2,-10956
   1b7c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b7c8:	e0bfff17 	ldw	r2,-4(fp)
   1b7cc:	18800226 	beq	r3,r2,1b7d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b7d0:	00bffcc4 	movi	r2,-13
   1b7d4:	00000a06 	br	1b800 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b7d8:	e0bffe17 	ldw	r2,-8(fp)
   1b7dc:	10800044 	addi	r2,r2,1
   1b7e0:	e0bffe15 	stw	r2,-8(fp)
   1b7e4:	008000b4 	movhi	r2,2
   1b7e8:	10bac904 	addi	r2,r2,-5340
   1b7ec:	10800017 	ldw	r2,0(r2)
   1b7f0:	1007883a 	mov	r3,r2
   1b7f4:	e0bffe17 	ldw	r2,-8(fp)
   1b7f8:	18bfdd2e 	bgeu	r3,r2,1b770 <__alt_mem_Flash_flash_data+0xf401b770>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b7fc:	0005883a 	mov	r2,zero
}
   1b800:	e037883a 	mov	sp,fp
   1b804:	df000017 	ldw	fp,0(sp)
   1b808:	dec00104 	addi	sp,sp,4
   1b80c:	f800283a 	ret

0001b810 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b810:	defff604 	addi	sp,sp,-40
   1b814:	dfc00915 	stw	ra,36(sp)
   1b818:	df000815 	stw	fp,32(sp)
   1b81c:	df000804 	addi	fp,sp,32
   1b820:	e13ffd15 	stw	r4,-12(fp)
   1b824:	e17ffe15 	stw	r5,-8(fp)
   1b828:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b82c:	00bfffc4 	movi	r2,-1
   1b830:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b834:	00bffb44 	movi	r2,-19
   1b838:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b83c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b840:	e13ffd17 	ldw	r4,-12(fp)
   1b844:	014000b4 	movhi	r5,2
   1b848:	297ac704 	addi	r5,r5,-5348
   1b84c:	001b34c0 	call	1b34c <alt_find_dev>
   1b850:	e0bff815 	stw	r2,-32(fp)
   1b854:	e0bff817 	ldw	r2,-32(fp)
   1b858:	1000051e 	bne	r2,zero,1b870 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b85c:	e13ffd17 	ldw	r4,-12(fp)
   1b860:	001be580 	call	1be58 <alt_find_file>
   1b864:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b868:	00800044 	movi	r2,1
   1b86c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b870:	e0bff817 	ldw	r2,-32(fp)
   1b874:	10002926 	beq	r2,zero,1b91c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b878:	e13ff817 	ldw	r4,-32(fp)
   1b87c:	001bf6c0 	call	1bf6c <alt_get_fd>
   1b880:	e0bff915 	stw	r2,-28(fp)
   1b884:	e0bff917 	ldw	r2,-28(fp)
   1b888:	1000030e 	bge	r2,zero,1b898 <open+0x88>
    {
      status = index;
   1b88c:	e0bff917 	ldw	r2,-28(fp)
   1b890:	e0bffa15 	stw	r2,-24(fp)
   1b894:	00002306 	br	1b924 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b898:	e0bff917 	ldw	r2,-28(fp)
   1b89c:	10c00324 	muli	r3,r2,12
   1b8a0:	008000b4 	movhi	r2,2
   1b8a4:	10b54d04 	addi	r2,r2,-10956
   1b8a8:	1885883a 	add	r2,r3,r2
   1b8ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b8b0:	e0fffe17 	ldw	r3,-8(fp)
   1b8b4:	00900034 	movhi	r2,16384
   1b8b8:	10bfffc4 	addi	r2,r2,-1
   1b8bc:	1886703a 	and	r3,r3,r2
   1b8c0:	e0bffc17 	ldw	r2,-16(fp)
   1b8c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b8c8:	e0bffb17 	ldw	r2,-20(fp)
   1b8cc:	1000051e 	bne	r2,zero,1b8e4 <open+0xd4>
   1b8d0:	e13ffc17 	ldw	r4,-16(fp)
   1b8d4:	001b7440 	call	1b744 <alt_file_locked>
   1b8d8:	e0bffa15 	stw	r2,-24(fp)
   1b8dc:	e0bffa17 	ldw	r2,-24(fp)
   1b8e0:	10001016 	blt	r2,zero,1b924 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b8e4:	e0bff817 	ldw	r2,-32(fp)
   1b8e8:	10800317 	ldw	r2,12(r2)
   1b8ec:	10000826 	beq	r2,zero,1b910 <open+0x100>
   1b8f0:	e0bff817 	ldw	r2,-32(fp)
   1b8f4:	10800317 	ldw	r2,12(r2)
   1b8f8:	e13ffc17 	ldw	r4,-16(fp)
   1b8fc:	e17ffd17 	ldw	r5,-12(fp)
   1b900:	e1bffe17 	ldw	r6,-8(fp)
   1b904:	e1ffff17 	ldw	r7,-4(fp)
   1b908:	103ee83a 	callr	r2
   1b90c:	00000106 	br	1b914 <open+0x104>
   1b910:	0005883a 	mov	r2,zero
   1b914:	e0bffa15 	stw	r2,-24(fp)
   1b918:	00000206 	br	1b924 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b91c:	00bffb44 	movi	r2,-19
   1b920:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b924:	e0bffa17 	ldw	r2,-24(fp)
   1b928:	1000090e 	bge	r2,zero,1b950 <open+0x140>
  {
    alt_release_fd (index);  
   1b92c:	e13ff917 	ldw	r4,-28(fp)
   1b930:	00106500 	call	10650 <alt_release_fd>
    ALT_ERRNO = -status;
   1b934:	001b6f40 	call	1b6f4 <alt_get_errno>
   1b938:	1007883a 	mov	r3,r2
   1b93c:	e0bffa17 	ldw	r2,-24(fp)
   1b940:	0085c83a 	sub	r2,zero,r2
   1b944:	18800015 	stw	r2,0(r3)
    return -1;
   1b948:	00bfffc4 	movi	r2,-1
   1b94c:	00000106 	br	1b954 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1b950:	e0bff917 	ldw	r2,-28(fp)
}
   1b954:	e037883a 	mov	sp,fp
   1b958:	dfc00117 	ldw	ra,4(sp)
   1b95c:	df000017 	ldw	fp,0(sp)
   1b960:	dec00204 	addi	sp,sp,8
   1b964:	f800283a 	ret

0001b968 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b968:	defffa04 	addi	sp,sp,-24
   1b96c:	df000515 	stw	fp,20(sp)
   1b970:	df000504 	addi	fp,sp,20
   1b974:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b978:	0005303a 	rdctl	r2,status
   1b97c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b980:	e0fffc17 	ldw	r3,-16(fp)
   1b984:	00bfff84 	movi	r2,-2
   1b988:	1884703a 	and	r2,r3,r2
   1b98c:	1001703a 	wrctl	status,r2
  
  return context;
   1b990:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b994:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b998:	e0bfff17 	ldw	r2,-4(fp)
   1b99c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1b9a0:	e0bffd17 	ldw	r2,-12(fp)
   1b9a4:	10800017 	ldw	r2,0(r2)
   1b9a8:	e0fffd17 	ldw	r3,-12(fp)
   1b9ac:	18c00117 	ldw	r3,4(r3)
   1b9b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1b9b4:	e0bffd17 	ldw	r2,-12(fp)
   1b9b8:	10800117 	ldw	r2,4(r2)
   1b9bc:	e0fffd17 	ldw	r3,-12(fp)
   1b9c0:	18c00017 	ldw	r3,0(r3)
   1b9c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1b9c8:	e0bffd17 	ldw	r2,-12(fp)
   1b9cc:	e0fffd17 	ldw	r3,-12(fp)
   1b9d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1b9d4:	e0bffd17 	ldw	r2,-12(fp)
   1b9d8:	e0fffd17 	ldw	r3,-12(fp)
   1b9dc:	10c00015 	stw	r3,0(r2)
   1b9e0:	e0bffb17 	ldw	r2,-20(fp)
   1b9e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b9e8:	e0bffe17 	ldw	r2,-8(fp)
   1b9ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1b9f0:	e037883a 	mov	sp,fp
   1b9f4:	df000017 	ldw	fp,0(sp)
   1b9f8:	dec00104 	addi	sp,sp,4
   1b9fc:	f800283a 	ret

0001ba00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ba00:	defffb04 	addi	sp,sp,-20
   1ba04:	dfc00415 	stw	ra,16(sp)
   1ba08:	df000315 	stw	fp,12(sp)
   1ba0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ba10:	d0a02d17 	ldw	r2,-32588(gp)
   1ba14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ba18:	d0a82817 	ldw	r2,-24416(gp)
   1ba1c:	10800044 	addi	r2,r2,1
   1ba20:	d0a82815 	stw	r2,-24416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ba24:	00002e06 	br	1bae0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ba28:	e0bffd17 	ldw	r2,-12(fp)
   1ba2c:	10800017 	ldw	r2,0(r2)
   1ba30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ba34:	e0bffd17 	ldw	r2,-12(fp)
   1ba38:	10800403 	ldbu	r2,16(r2)
   1ba3c:	10803fcc 	andi	r2,r2,255
   1ba40:	10000426 	beq	r2,zero,1ba54 <alt_tick+0x54>
   1ba44:	d0a82817 	ldw	r2,-24416(gp)
   1ba48:	1000021e 	bne	r2,zero,1ba54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ba4c:	e0bffd17 	ldw	r2,-12(fp)
   1ba50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ba54:	e0bffd17 	ldw	r2,-12(fp)
   1ba58:	10800217 	ldw	r2,8(r2)
   1ba5c:	d0e82817 	ldw	r3,-24416(gp)
   1ba60:	18801d36 	bltu	r3,r2,1bad8 <alt_tick+0xd8>
   1ba64:	e0bffd17 	ldw	r2,-12(fp)
   1ba68:	10800403 	ldbu	r2,16(r2)
   1ba6c:	10803fcc 	andi	r2,r2,255
   1ba70:	1000191e 	bne	r2,zero,1bad8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ba74:	e0bffd17 	ldw	r2,-12(fp)
   1ba78:	10800317 	ldw	r2,12(r2)
   1ba7c:	e0fffd17 	ldw	r3,-12(fp)
   1ba80:	18c00517 	ldw	r3,20(r3)
   1ba84:	1809883a 	mov	r4,r3
   1ba88:	103ee83a 	callr	r2
   1ba8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ba90:	e0bfff17 	ldw	r2,-4(fp)
   1ba94:	1000031e 	bne	r2,zero,1baa4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ba98:	e13ffd17 	ldw	r4,-12(fp)
   1ba9c:	001b9680 	call	1b968 <alt_alarm_stop>
   1baa0:	00000d06 	br	1bad8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1baa4:	e0bffd17 	ldw	r2,-12(fp)
   1baa8:	10c00217 	ldw	r3,8(r2)
   1baac:	e0bfff17 	ldw	r2,-4(fp)
   1bab0:	1887883a 	add	r3,r3,r2
   1bab4:	e0bffd17 	ldw	r2,-12(fp)
   1bab8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1babc:	e0bffd17 	ldw	r2,-12(fp)
   1bac0:	10c00217 	ldw	r3,8(r2)
   1bac4:	d0a82817 	ldw	r2,-24416(gp)
   1bac8:	1880032e 	bgeu	r3,r2,1bad8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1bacc:	e0bffd17 	ldw	r2,-12(fp)
   1bad0:	00c00044 	movi	r3,1
   1bad4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1bad8:	e0bffe17 	ldw	r2,-8(fp)
   1badc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bae0:	e0fffd17 	ldw	r3,-12(fp)
   1bae4:	d0a02d04 	addi	r2,gp,-32588
   1bae8:	18bfcf1e 	bne	r3,r2,1ba28 <__alt_mem_Flash_flash_data+0xf401ba28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1baec:	001185c0 	call	1185c <OSTimeTick>
}
   1baf0:	e037883a 	mov	sp,fp
   1baf4:	dfc00117 	ldw	ra,4(sp)
   1baf8:	df000017 	ldw	fp,0(sp)
   1bafc:	dec00204 	addi	sp,sp,8
   1bb00:	f800283a 	ret

0001bb04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1bb04:	deffff04 	addi	sp,sp,-4
   1bb08:	df000015 	stw	fp,0(sp)
   1bb0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1bb10:	000170fa 	wrctl	ienable,zero
}
   1bb14:	e037883a 	mov	sp,fp
   1bb18:	df000017 	ldw	fp,0(sp)
   1bb1c:	dec00104 	addi	sp,sp,4
   1bb20:	f800283a 	ret

0001bb24 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1bb24:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1bb28:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1bb2c:	d1282117 	ldw	r4,-24444(gp)

      stw ra,  0(sp)
   1bb30:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1bb34:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1bb38:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1bb3c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1bb40:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1bb44:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1bb48:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1bb4c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1bb50:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1bb54:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1bb58:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1bb5c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bb60:	001bd900 	call	1bd90 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1bb64:	d1281c17 	ldw	r4,-24464(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1bb68:	d1681407 	ldb	r5,-24496(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1bb6c:	d1282115 	stw	r4,-24444(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1bb70:	d1681445 	stb	r5,-24495(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1bb74:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1bb78:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1bb7c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1bb80:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1bb84:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1bb88:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1bb8c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1bb90:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1bb94:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1bb98:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1bb9c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1bba0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1bba4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1bba8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1bbac:	f800283a 	ret

0001bbb0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1bbb0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1bbb4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1bbb8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1bbbc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bbc0:	001bd900 	call	1bd90 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1bbc4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1bbc8:	d4a81245 	stb	r18,-24503(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1bbcc:	003fe506 	br	1bb64 <__alt_mem_Flash_flash_data+0xf401bb64>

0001bbd0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1bbd0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1bbd4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1bbd8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1bbdc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1bbe0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1bbe4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1bbe8:	dec00204 	addi	sp,sp,8

      callr r2
   1bbec:	103ee83a 	callr	r2

      nop
   1bbf0:	0001883a 	nop

0001bbf4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1bbf4:	defff704 	addi	sp,sp,-36
   1bbf8:	dfc00815 	stw	ra,32(sp)
   1bbfc:	df000715 	stw	fp,28(sp)
   1bc00:	df000704 	addi	fp,sp,28
   1bc04:	e13ffc15 	stw	r4,-16(fp)
   1bc08:	e17ffd15 	stw	r5,-12(fp)
   1bc0c:	e1bffe15 	stw	r6,-8(fp)
   1bc10:	3805883a 	mov	r2,r7
   1bc14:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1bc18:	e0fffe17 	ldw	r3,-8(fp)
   1bc1c:	00bfff04 	movi	r2,-4
   1bc20:	1884703a 	and	r2,r3,r2
   1bc24:	10bef704 	addi	r2,r2,-1060
   1bc28:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1bc2c:	e13ff917 	ldw	r4,-28(fp)
   1bc30:	000b883a 	mov	r5,zero
   1bc34:	01810904 	movi	r6,1060
   1bc38:	00008d00 	call	8d0 <memset>
   1bc3c:	e0bff917 	ldw	r2,-28(fp)
   1bc40:	10c0bb04 	addi	r3,r2,748
   1bc44:	e0bff917 	ldw	r2,-28(fp)
   1bc48:	10c00115 	stw	r3,4(r2)
   1bc4c:	e0bff917 	ldw	r2,-28(fp)
   1bc50:	10c0d504 	addi	r3,r2,852
   1bc54:	e0bff917 	ldw	r2,-28(fp)
   1bc58:	10c00215 	stw	r3,8(r2)
   1bc5c:	e0bff917 	ldw	r2,-28(fp)
   1bc60:	10c0ef04 	addi	r3,r2,956
   1bc64:	e0bff917 	ldw	r2,-28(fp)
   1bc68:	10c00315 	stw	r3,12(r2)
   1bc6c:	e0fff917 	ldw	r3,-28(fp)
   1bc70:	008000b4 	movhi	r2,2
   1bc74:	10b31904 	addi	r2,r2,-13212
   1bc78:	18800d15 	stw	r2,52(r3)
   1bc7c:	e0bff917 	ldw	r2,-28(fp)
   1bc80:	00c00044 	movi	r3,1
   1bc84:	10c02915 	stw	r3,164(r2)
   1bc88:	10002a15 	stw	zero,168(r2)
   1bc8c:	e0bff917 	ldw	r2,-28(fp)
   1bc90:	00ccc384 	movi	r3,13070
   1bc94:	10c02b0d 	sth	r3,172(r2)
   1bc98:	e0bff917 	ldw	r2,-28(fp)
   1bc9c:	00eaf344 	movi	r3,-21555
   1bca0:	10c02b8d 	sth	r3,174(r2)
   1bca4:	e0bff917 	ldw	r2,-28(fp)
   1bca8:	00c48d04 	movi	r3,4660
   1bcac:	10c02c0d 	sth	r3,176(r2)
   1bcb0:	e0bff917 	ldw	r2,-28(fp)
   1bcb4:	00f99b44 	movi	r3,-6547
   1bcb8:	10c02c8d 	sth	r3,178(r2)
   1bcbc:	e0bff917 	ldw	r2,-28(fp)
   1bcc0:	00f7bb04 	movi	r3,-8468
   1bcc4:	10c02d0d 	sth	r3,180(r2)
   1bcc8:	e0bff917 	ldw	r2,-28(fp)
   1bccc:	00c00144 	movi	r3,5
   1bcd0:	10c02d8d 	sth	r3,182(r2)
   1bcd4:	e0bff917 	ldw	r2,-28(fp)
   1bcd8:	00c002c4 	movi	r3,11
   1bcdc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1bce0:	e0bff917 	ldw	r2,-28(fp)
   1bce4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1bce8:	e0bffa17 	ldw	r2,-24(fp)
   1bcec:	10bff304 	addi	r2,r2,-52
   1bcf0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1bcf4:	e0bffb17 	ldw	r2,-20(fp)
   1bcf8:	10800c04 	addi	r2,r2,48
   1bcfc:	e0fffc17 	ldw	r3,-16(fp)
   1bd00:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1bd04:	e0bffb17 	ldw	r2,-20(fp)
   1bd08:	10800b04 	addi	r2,r2,44
   1bd0c:	e0fffd17 	ldw	r3,-12(fp)
   1bd10:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1bd14:	e0bffb17 	ldw	r2,-20(fp)
   1bd18:	10800a04 	addi	r2,r2,40
   1bd1c:	e0fff917 	ldw	r3,-28(fp)
   1bd20:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1bd24:	008000b4 	movhi	r2,2
   1bd28:	10aef404 	addi	r2,r2,-17456
   1bd2c:	10c00104 	addi	r3,r2,4
   1bd30:	e0bffb17 	ldw	r2,-20(fp)
   1bd34:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1bd38:	e0bffb17 	ldw	r2,-20(fp)
}
   1bd3c:	e037883a 	mov	sp,fp
   1bd40:	dfc00117 	ldw	ra,4(sp)
   1bd44:	df000017 	ldw	fp,0(sp)
   1bd48:	dec00204 	addi	sp,sp,8
   1bd4c:	f800283a 	ret

0001bd50 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1bd50:	defffe04 	addi	sp,sp,-8
   1bd54:	df000115 	stw	fp,4(sp)
   1bd58:	df000104 	addi	fp,sp,4
   1bd5c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1bd60:	e037883a 	mov	sp,fp
   1bd64:	df000017 	ldw	fp,0(sp)
   1bd68:	dec00104 	addi	sp,sp,4
   1bd6c:	f800283a 	ret

0001bd70 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1bd70:	defffe04 	addi	sp,sp,-8
   1bd74:	df000115 	stw	fp,4(sp)
   1bd78:	df000104 	addi	fp,sp,4
   1bd7c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1bd80:	e037883a 	mov	sp,fp
   1bd84:	df000017 	ldw	fp,0(sp)
   1bd88:	dec00104 	addi	sp,sp,4
   1bd8c:	f800283a 	ret

0001bd90 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1bd90:	deffff04 	addi	sp,sp,-4
   1bd94:	df000015 	stw	fp,0(sp)
   1bd98:	d839883a 	mov	fp,sp
}
   1bd9c:	e037883a 	mov	sp,fp
   1bda0:	df000017 	ldw	fp,0(sp)
   1bda4:	dec00104 	addi	sp,sp,4
   1bda8:	f800283a 	ret

0001bdac <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1bdac:	deffff04 	addi	sp,sp,-4
   1bdb0:	df000015 	stw	fp,0(sp)
   1bdb4:	d839883a 	mov	fp,sp
}
   1bdb8:	e037883a 	mov	sp,fp
   1bdbc:	df000017 	ldw	fp,0(sp)
   1bdc0:	dec00104 	addi	sp,sp,4
   1bdc4:	f800283a 	ret

0001bdc8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1bdc8:	deffff04 	addi	sp,sp,-4
   1bdcc:	df000015 	stw	fp,0(sp)
   1bdd0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1bdd4:	e037883a 	mov	sp,fp
   1bdd8:	df000017 	ldw	fp,0(sp)
   1bddc:	dec00104 	addi	sp,sp,4
   1bde0:	f800283a 	ret

0001bde4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1bde4:	deffff04 	addi	sp,sp,-4
   1bde8:	df000015 	stw	fp,0(sp)
   1bdec:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1bdf0:	e037883a 	mov	sp,fp
   1bdf4:	df000017 	ldw	fp,0(sp)
   1bdf8:	dec00104 	addi	sp,sp,4
   1bdfc:	f800283a 	ret

0001be00 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1be00:	deffff04 	addi	sp,sp,-4
   1be04:	df000015 	stw	fp,0(sp)
   1be08:	d839883a 	mov	fp,sp
}
   1be0c:	e037883a 	mov	sp,fp
   1be10:	df000017 	ldw	fp,0(sp)
   1be14:	dec00104 	addi	sp,sp,4
   1be18:	f800283a 	ret

0001be1c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1be1c:	deffff04 	addi	sp,sp,-4
   1be20:	df000015 	stw	fp,0(sp)
   1be24:	d839883a 	mov	fp,sp
}
   1be28:	e037883a 	mov	sp,fp
   1be2c:	df000017 	ldw	fp,0(sp)
   1be30:	dec00104 	addi	sp,sp,4
   1be34:	f800283a 	ret

0001be38 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1be38:	defffe04 	addi	sp,sp,-8
   1be3c:	df000115 	stw	fp,4(sp)
   1be40:	df000104 	addi	fp,sp,4
   1be44:	e13fff15 	stw	r4,-4(fp)
}
   1be48:	e037883a 	mov	sp,fp
   1be4c:	df000017 	ldw	fp,0(sp)
   1be50:	dec00104 	addi	sp,sp,4
   1be54:	f800283a 	ret

0001be58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1be58:	defffb04 	addi	sp,sp,-20
   1be5c:	dfc00415 	stw	ra,16(sp)
   1be60:	df000315 	stw	fp,12(sp)
   1be64:	df000304 	addi	fp,sp,12
   1be68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1be6c:	008000b4 	movhi	r2,2
   1be70:	10bac504 	addi	r2,r2,-5356
   1be74:	10800017 	ldw	r2,0(r2)
   1be78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1be7c:	00003106 	br	1bf44 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1be80:	e0bffd17 	ldw	r2,-12(fp)
   1be84:	10800217 	ldw	r2,8(r2)
   1be88:	1009883a 	mov	r4,r2
   1be8c:	0000c800 	call	c80 <strlen>
   1be90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1be94:	e0bffd17 	ldw	r2,-12(fp)
   1be98:	10c00217 	ldw	r3,8(r2)
   1be9c:	e0bffe17 	ldw	r2,-8(fp)
   1bea0:	10bfffc4 	addi	r2,r2,-1
   1bea4:	1885883a 	add	r2,r3,r2
   1bea8:	10800003 	ldbu	r2,0(r2)
   1beac:	10803fcc 	andi	r2,r2,255
   1beb0:	1080201c 	xori	r2,r2,128
   1beb4:	10bfe004 	addi	r2,r2,-128
   1beb8:	10800bd8 	cmpnei	r2,r2,47
   1bebc:	1000031e 	bne	r2,zero,1becc <alt_find_file+0x74>
    {
      len -= 1;
   1bec0:	e0bffe17 	ldw	r2,-8(fp)
   1bec4:	10bfffc4 	addi	r2,r2,-1
   1bec8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1becc:	e0bffe17 	ldw	r2,-8(fp)
   1bed0:	e0ffff17 	ldw	r3,-4(fp)
   1bed4:	1885883a 	add	r2,r3,r2
   1bed8:	10800003 	ldbu	r2,0(r2)
   1bedc:	10803fcc 	andi	r2,r2,255
   1bee0:	1080201c 	xori	r2,r2,128
   1bee4:	10bfe004 	addi	r2,r2,-128
   1bee8:	10800be0 	cmpeqi	r2,r2,47
   1beec:	1000081e 	bne	r2,zero,1bf10 <alt_find_file+0xb8>
   1bef0:	e0bffe17 	ldw	r2,-8(fp)
   1bef4:	e0ffff17 	ldw	r3,-4(fp)
   1bef8:	1885883a 	add	r2,r3,r2
   1befc:	10800003 	ldbu	r2,0(r2)
   1bf00:	10803fcc 	andi	r2,r2,255
   1bf04:	1080201c 	xori	r2,r2,128
   1bf08:	10bfe004 	addi	r2,r2,-128
   1bf0c:	10000a1e 	bne	r2,zero,1bf38 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1bf10:	e0bffd17 	ldw	r2,-12(fp)
   1bf14:	10c00217 	ldw	r3,8(r2)
   1bf18:	e0bffe17 	ldw	r2,-8(fp)
   1bf1c:	1809883a 	mov	r4,r3
   1bf20:	e17fff17 	ldw	r5,-4(fp)
   1bf24:	100d883a 	mov	r6,r2
   1bf28:	001c1dc0 	call	1c1dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bf2c:	1000021e 	bne	r2,zero,1bf38 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bf30:	e0bffd17 	ldw	r2,-12(fp)
   1bf34:	00000806 	br	1bf58 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1bf38:	e0bffd17 	ldw	r2,-12(fp)
   1bf3c:	10800017 	ldw	r2,0(r2)
   1bf40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bf44:	e0fffd17 	ldw	r3,-12(fp)
   1bf48:	008000b4 	movhi	r2,2
   1bf4c:	10bac504 	addi	r2,r2,-5356
   1bf50:	18bfcb1e 	bne	r3,r2,1be80 <__alt_mem_Flash_flash_data+0xf401be80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1bf54:	0005883a 	mov	r2,zero
}
   1bf58:	e037883a 	mov	sp,fp
   1bf5c:	dfc00117 	ldw	ra,4(sp)
   1bf60:	df000017 	ldw	fp,0(sp)
   1bf64:	dec00204 	addi	sp,sp,8
   1bf68:	f800283a 	ret

0001bf6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1bf6c:	defff904 	addi	sp,sp,-28
   1bf70:	dfc00615 	stw	ra,24(sp)
   1bf74:	df000515 	stw	fp,20(sp)
   1bf78:	df000504 	addi	fp,sp,20
   1bf7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1bf80:	00bffa04 	movi	r2,-24
   1bf84:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1bf88:	008000b4 	movhi	r2,2
   1bf8c:	1082c904 	addi	r2,r2,2852
   1bf90:	10800017 	ldw	r2,0(r2)
   1bf94:	e0bffd15 	stw	r2,-12(fp)
   1bf98:	e03ffe0d 	sth	zero,-8(fp)
   1bf9c:	e0fffe0b 	ldhu	r3,-8(fp)
   1bfa0:	e0bffe84 	addi	r2,fp,-6
   1bfa4:	e13ffd17 	ldw	r4,-12(fp)
   1bfa8:	180b883a 	mov	r5,r3
   1bfac:	100d883a 	mov	r6,r2
   1bfb0:	00162f80 	call	162f8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bfb4:	e03ffb15 	stw	zero,-20(fp)
   1bfb8:	00001d06 	br	1c030 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1bfbc:	008000b4 	movhi	r2,2
   1bfc0:	10b54d04 	addi	r2,r2,-10956
   1bfc4:	e0fffb17 	ldw	r3,-20(fp)
   1bfc8:	18c00324 	muli	r3,r3,12
   1bfcc:	10c5883a 	add	r2,r2,r3
   1bfd0:	10800017 	ldw	r2,0(r2)
   1bfd4:	1000131e 	bne	r2,zero,1c024 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1bfd8:	008000b4 	movhi	r2,2
   1bfdc:	10b54d04 	addi	r2,r2,-10956
   1bfe0:	e0fffb17 	ldw	r3,-20(fp)
   1bfe4:	18c00324 	muli	r3,r3,12
   1bfe8:	10c5883a 	add	r2,r2,r3
   1bfec:	e0ffff17 	ldw	r3,-4(fp)
   1bff0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1bff4:	008000b4 	movhi	r2,2
   1bff8:	10bac904 	addi	r2,r2,-5340
   1bffc:	10c00017 	ldw	r3,0(r2)
   1c000:	e0bffb17 	ldw	r2,-20(fp)
   1c004:	1880040e 	bge	r3,r2,1c018 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1c008:	008000b4 	movhi	r2,2
   1c00c:	10bac904 	addi	r2,r2,-5340
   1c010:	e0fffb17 	ldw	r3,-20(fp)
   1c014:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1c018:	e0bffb17 	ldw	r2,-20(fp)
   1c01c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1c020:	00000606 	br	1c03c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c024:	e0bffb17 	ldw	r2,-20(fp)
   1c028:	10800044 	addi	r2,r2,1
   1c02c:	e0bffb15 	stw	r2,-20(fp)
   1c030:	e0bffb17 	ldw	r2,-20(fp)
   1c034:	10800810 	cmplti	r2,r2,32
   1c038:	103fe01e 	bne	r2,zero,1bfbc <__alt_mem_Flash_flash_data+0xf401bfbc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1c03c:	008000b4 	movhi	r2,2
   1c040:	1082c904 	addi	r2,r2,2852
   1c044:	10800017 	ldw	r2,0(r2)
   1c048:	1009883a 	mov	r4,r2
   1c04c:	00166cc0 	call	166cc <OSSemPost>

  return rc;
   1c050:	e0bffc17 	ldw	r2,-16(fp)
}
   1c054:	e037883a 	mov	sp,fp
   1c058:	dfc00117 	ldw	ra,4(sp)
   1c05c:	df000017 	ldw	fp,0(sp)
   1c060:	dec00204 	addi	sp,sp,8
   1c064:	f800283a 	ret

0001c068 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c068:	defffb04 	addi	sp,sp,-20
   1c06c:	df000415 	stw	fp,16(sp)
   1c070:	df000404 	addi	fp,sp,16
   1c074:	e13ffe15 	stw	r4,-8(fp)
   1c078:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c07c:	e0bfff17 	ldw	r2,-4(fp)
   1c080:	10840070 	cmpltui	r2,r2,4097
   1c084:	1000021e 	bne	r2,zero,1c090 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c088:	00840004 	movi	r2,4096
   1c08c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c090:	e0fffe17 	ldw	r3,-8(fp)
   1c094:	e0bfff17 	ldw	r2,-4(fp)
   1c098:	1885883a 	add	r2,r3,r2
   1c09c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c0a0:	e0bffe17 	ldw	r2,-8(fp)
   1c0a4:	e0bffc15 	stw	r2,-16(fp)
   1c0a8:	00000506 	br	1c0c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c0ac:	e0bffc17 	ldw	r2,-16(fp)
   1c0b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c0b4:	e0bffc17 	ldw	r2,-16(fp)
   1c0b8:	10800804 	addi	r2,r2,32
   1c0bc:	e0bffc15 	stw	r2,-16(fp)
   1c0c0:	e0fffc17 	ldw	r3,-16(fp)
   1c0c4:	e0bffd17 	ldw	r2,-12(fp)
   1c0c8:	18bff836 	bltu	r3,r2,1c0ac <__alt_mem_Flash_flash_data+0xf401c0ac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c0cc:	e0bffe17 	ldw	r2,-8(fp)
   1c0d0:	108007cc 	andi	r2,r2,31
   1c0d4:	10000226 	beq	r2,zero,1c0e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c0d8:	e0bffc17 	ldw	r2,-16(fp)
   1c0dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c0e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c0e4:	e037883a 	mov	sp,fp
   1c0e8:	df000017 	ldw	fp,0(sp)
   1c0ec:	dec00104 	addi	sp,sp,4
   1c0f0:	f800283a 	ret

0001c0f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1c0f4:	defffe04 	addi	sp,sp,-8
   1c0f8:	df000115 	stw	fp,4(sp)
   1c0fc:	df000104 	addi	fp,sp,4
   1c100:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1c104:	e0bfff17 	ldw	r2,-4(fp)
   1c108:	10bffe84 	addi	r2,r2,-6
   1c10c:	10c00428 	cmpgeui	r3,r2,16
   1c110:	18001a1e 	bne	r3,zero,1c17c <alt_exception_cause_generated_bad_addr+0x88>
   1c114:	100690ba 	slli	r3,r2,2
   1c118:	008000b4 	movhi	r2,2
   1c11c:	10b04b04 	addi	r2,r2,-16084
   1c120:	1885883a 	add	r2,r3,r2
   1c124:	10800017 	ldw	r2,0(r2)
   1c128:	1000683a 	jmp	r2
   1c12c:	0001c16c 	andhi	zero,zero,1797
   1c130:	0001c16c 	andhi	zero,zero,1797
   1c134:	0001c17c 	xorhi	zero,zero,1797
   1c138:	0001c17c 	xorhi	zero,zero,1797
   1c13c:	0001c17c 	xorhi	zero,zero,1797
   1c140:	0001c16c 	andhi	zero,zero,1797
   1c144:	0001c174 	movhi	zero,1797
   1c148:	0001c17c 	xorhi	zero,zero,1797
   1c14c:	0001c16c 	andhi	zero,zero,1797
   1c150:	0001c16c 	andhi	zero,zero,1797
   1c154:	0001c17c 	xorhi	zero,zero,1797
   1c158:	0001c16c 	andhi	zero,zero,1797
   1c15c:	0001c174 	movhi	zero,1797
   1c160:	0001c17c 	xorhi	zero,zero,1797
   1c164:	0001c17c 	xorhi	zero,zero,1797
   1c168:	0001c16c 	andhi	zero,zero,1797
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1c16c:	00800044 	movi	r2,1
   1c170:	00000306 	br	1c180 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1c174:	0005883a 	mov	r2,zero
   1c178:	00000106 	br	1c180 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1c17c:	0005883a 	mov	r2,zero
  }
}
   1c180:	e037883a 	mov	sp,fp
   1c184:	df000017 	ldw	fp,0(sp)
   1c188:	dec00104 	addi	sp,sp,4
   1c18c:	f800283a 	ret

0001c190 <atexit>:
   1c190:	200b883a 	mov	r5,r4
   1c194:	000d883a 	mov	r6,zero
   1c198:	0009883a 	mov	r4,zero
   1c19c:	000f883a 	mov	r7,zero
   1c1a0:	001c2581 	jmpi	1c258 <__register_exitproc>

0001c1a4 <exit>:
   1c1a4:	defffe04 	addi	sp,sp,-8
   1c1a8:	000b883a 	mov	r5,zero
   1c1ac:	dc000015 	stw	r16,0(sp)
   1c1b0:	dfc00115 	stw	ra,4(sp)
   1c1b4:	2021883a 	mov	r16,r4
   1c1b8:	001c36c0 	call	1c36c <__call_exitprocs>
   1c1bc:	008000b4 	movhi	r2,2
   1c1c0:	10babf04 	addi	r2,r2,-5380
   1c1c4:	11000017 	ldw	r4,0(r2)
   1c1c8:	20800f17 	ldw	r2,60(r4)
   1c1cc:	10000126 	beq	r2,zero,1c1d4 <exit+0x30>
   1c1d0:	103ee83a 	callr	r2
   1c1d4:	8009883a 	mov	r4,r16
   1c1d8:	001c5000 	call	1c500 <_exit>

0001c1dc <memcmp>:
   1c1dc:	01c000c4 	movi	r7,3
   1c1e0:	3980192e 	bgeu	r7,r6,1c248 <memcmp+0x6c>
   1c1e4:	2144b03a 	or	r2,r4,r5
   1c1e8:	11c4703a 	and	r2,r2,r7
   1c1ec:	10000f26 	beq	r2,zero,1c22c <memcmp+0x50>
   1c1f0:	20800003 	ldbu	r2,0(r4)
   1c1f4:	28c00003 	ldbu	r3,0(r5)
   1c1f8:	10c0151e 	bne	r2,r3,1c250 <memcmp+0x74>
   1c1fc:	31bfff84 	addi	r6,r6,-2
   1c200:	01ffffc4 	movi	r7,-1
   1c204:	00000406 	br	1c218 <memcmp+0x3c>
   1c208:	20800003 	ldbu	r2,0(r4)
   1c20c:	28c00003 	ldbu	r3,0(r5)
   1c210:	31bfffc4 	addi	r6,r6,-1
   1c214:	10c00e1e 	bne	r2,r3,1c250 <memcmp+0x74>
   1c218:	21000044 	addi	r4,r4,1
   1c21c:	29400044 	addi	r5,r5,1
   1c220:	31fff91e 	bne	r6,r7,1c208 <__alt_mem_Flash_flash_data+0xf401c208>
   1c224:	0005883a 	mov	r2,zero
   1c228:	f800283a 	ret
   1c22c:	20c00017 	ldw	r3,0(r4)
   1c230:	28800017 	ldw	r2,0(r5)
   1c234:	1880041e 	bne	r3,r2,1c248 <memcmp+0x6c>
   1c238:	31bfff04 	addi	r6,r6,-4
   1c23c:	21000104 	addi	r4,r4,4
   1c240:	29400104 	addi	r5,r5,4
   1c244:	39bff936 	bltu	r7,r6,1c22c <__alt_mem_Flash_flash_data+0xf401c22c>
   1c248:	303fe91e 	bne	r6,zero,1c1f0 <__alt_mem_Flash_flash_data+0xf401c1f0>
   1c24c:	003ff506 	br	1c224 <__alt_mem_Flash_flash_data+0xf401c224>
   1c250:	10c5c83a 	sub	r2,r2,r3
   1c254:	f800283a 	ret

0001c258 <__register_exitproc>:
   1c258:	008000b4 	movhi	r2,2
   1c25c:	defffa04 	addi	sp,sp,-24
   1c260:	10babf04 	addi	r2,r2,-5380
   1c264:	dc000315 	stw	r16,12(sp)
   1c268:	14000017 	ldw	r16,0(r2)
   1c26c:	dc400415 	stw	r17,16(sp)
   1c270:	dfc00515 	stw	ra,20(sp)
   1c274:	80805217 	ldw	r2,328(r16)
   1c278:	2023883a 	mov	r17,r4
   1c27c:	10003626 	beq	r2,zero,1c358 <__register_exitproc+0x100>
   1c280:	10c00117 	ldw	r3,4(r2)
   1c284:	010007c4 	movi	r4,31
   1c288:	20c00e16 	blt	r4,r3,1c2c4 <__register_exitproc+0x6c>
   1c28c:	1a400044 	addi	r9,r3,1
   1c290:	8800211e 	bne	r17,zero,1c318 <__register_exitproc+0xc0>
   1c294:	18c00084 	addi	r3,r3,2
   1c298:	18c7883a 	add	r3,r3,r3
   1c29c:	18c7883a 	add	r3,r3,r3
   1c2a0:	12400115 	stw	r9,4(r2)
   1c2a4:	10c7883a 	add	r3,r2,r3
   1c2a8:	19400015 	stw	r5,0(r3)
   1c2ac:	0005883a 	mov	r2,zero
   1c2b0:	dfc00517 	ldw	ra,20(sp)
   1c2b4:	dc400417 	ldw	r17,16(sp)
   1c2b8:	dc000317 	ldw	r16,12(sp)
   1c2bc:	dec00604 	addi	sp,sp,24
   1c2c0:	f800283a 	ret
   1c2c4:	00800034 	movhi	r2,0
   1c2c8:	10800004 	addi	r2,r2,0
   1c2cc:	10002526 	beq	r2,zero,1c364 <__register_exitproc+0x10c>
   1c2d0:	01006404 	movi	r4,400
   1c2d4:	d9400015 	stw	r5,0(sp)
   1c2d8:	d9800115 	stw	r6,4(sp)
   1c2dc:	d9c00215 	stw	r7,8(sp)
   1c2e0:	00000000 	call	0 <__reset>
   1c2e4:	d9400017 	ldw	r5,0(sp)
   1c2e8:	d9800117 	ldw	r6,4(sp)
   1c2ec:	d9c00217 	ldw	r7,8(sp)
   1c2f0:	10001c26 	beq	r2,zero,1c364 <__register_exitproc+0x10c>
   1c2f4:	80c05217 	ldw	r3,328(r16)
   1c2f8:	10000115 	stw	zero,4(r2)
   1c2fc:	02400044 	movi	r9,1
   1c300:	10c00015 	stw	r3,0(r2)
   1c304:	80805215 	stw	r2,328(r16)
   1c308:	10006215 	stw	zero,392(r2)
   1c30c:	10006315 	stw	zero,396(r2)
   1c310:	0007883a 	mov	r3,zero
   1c314:	883fdf26 	beq	r17,zero,1c294 <__alt_mem_Flash_flash_data+0xf401c294>
   1c318:	18d1883a 	add	r8,r3,r3
   1c31c:	4211883a 	add	r8,r8,r8
   1c320:	1211883a 	add	r8,r2,r8
   1c324:	41802215 	stw	r6,136(r8)
   1c328:	01000044 	movi	r4,1
   1c32c:	11806217 	ldw	r6,392(r2)
   1c330:	20c8983a 	sll	r4,r4,r3
   1c334:	310cb03a 	or	r6,r6,r4
   1c338:	11806215 	stw	r6,392(r2)
   1c33c:	41c04215 	stw	r7,264(r8)
   1c340:	01800084 	movi	r6,2
   1c344:	89bfd31e 	bne	r17,r6,1c294 <__alt_mem_Flash_flash_data+0xf401c294>
   1c348:	11806317 	ldw	r6,396(r2)
   1c34c:	3108b03a 	or	r4,r6,r4
   1c350:	11006315 	stw	r4,396(r2)
   1c354:	003fcf06 	br	1c294 <__alt_mem_Flash_flash_data+0xf401c294>
   1c358:	80805304 	addi	r2,r16,332
   1c35c:	80805215 	stw	r2,328(r16)
   1c360:	003fc706 	br	1c280 <__alt_mem_Flash_flash_data+0xf401c280>
   1c364:	00bfffc4 	movi	r2,-1
   1c368:	003fd106 	br	1c2b0 <__alt_mem_Flash_flash_data+0xf401c2b0>

0001c36c <__call_exitprocs>:
   1c36c:	008000b4 	movhi	r2,2
   1c370:	10babf04 	addi	r2,r2,-5380
   1c374:	10800017 	ldw	r2,0(r2)
   1c378:	defff404 	addi	sp,sp,-48
   1c37c:	dd800815 	stw	r22,32(sp)
   1c380:	d8800015 	stw	r2,0(sp)
   1c384:	10805204 	addi	r2,r2,328
   1c388:	dd000615 	stw	r20,24(sp)
   1c38c:	dc800415 	stw	r18,16(sp)
   1c390:	dfc00b15 	stw	ra,44(sp)
   1c394:	df000a15 	stw	fp,40(sp)
   1c398:	ddc00915 	stw	r23,36(sp)
   1c39c:	dd400715 	stw	r21,28(sp)
   1c3a0:	dcc00515 	stw	r19,20(sp)
   1c3a4:	dc400315 	stw	r17,12(sp)
   1c3a8:	dc000215 	stw	r16,8(sp)
   1c3ac:	2025883a 	mov	r18,r4
   1c3b0:	2829883a 	mov	r20,r5
   1c3b4:	d8800115 	stw	r2,4(sp)
   1c3b8:	05bfffc4 	movi	r22,-1
   1c3bc:	d8800017 	ldw	r2,0(sp)
   1c3c0:	14c05217 	ldw	r19,328(r2)
   1c3c4:	98001d26 	beq	r19,zero,1c43c <__call_exitprocs+0xd0>
   1c3c8:	dd400117 	ldw	r21,4(sp)
   1c3cc:	98800117 	ldw	r2,4(r19)
   1c3d0:	173fffc4 	addi	fp,r2,-1
   1c3d4:	e0000d16 	blt	fp,zero,1c40c <__call_exitprocs+0xa0>
   1c3d8:	14000044 	addi	r16,r2,1
   1c3dc:	8421883a 	add	r16,r16,r16
   1c3e0:	8421883a 	add	r16,r16,r16
   1c3e4:	84402004 	addi	r17,r16,128
   1c3e8:	9c63883a 	add	r17,r19,r17
   1c3ec:	9c21883a 	add	r16,r19,r16
   1c3f0:	a0001e26 	beq	r20,zero,1c46c <__call_exitprocs+0x100>
   1c3f4:	80804017 	ldw	r2,256(r16)
   1c3f8:	15001c26 	beq	r2,r20,1c46c <__call_exitprocs+0x100>
   1c3fc:	e73fffc4 	addi	fp,fp,-1
   1c400:	843fff04 	addi	r16,r16,-4
   1c404:	8c7fff04 	addi	r17,r17,-4
   1c408:	e5bff91e 	bne	fp,r22,1c3f0 <__alt_mem_Flash_flash_data+0xf401c3f0>
   1c40c:	00800034 	movhi	r2,0
   1c410:	10800004 	addi	r2,r2,0
   1c414:	10000926 	beq	r2,zero,1c43c <__call_exitprocs+0xd0>
   1c418:	98800117 	ldw	r2,4(r19)
   1c41c:	1000311e 	bne	r2,zero,1c4e4 <__call_exitprocs+0x178>
   1c420:	98800017 	ldw	r2,0(r19)
   1c424:	10003426 	beq	r2,zero,1c4f8 <__call_exitprocs+0x18c>
   1c428:	9809883a 	mov	r4,r19
   1c42c:	a8800015 	stw	r2,0(r21)
   1c430:	00000000 	call	0 <__reset>
   1c434:	acc00017 	ldw	r19,0(r21)
   1c438:	983fe41e 	bne	r19,zero,1c3cc <__alt_mem_Flash_flash_data+0xf401c3cc>
   1c43c:	dfc00b17 	ldw	ra,44(sp)
   1c440:	df000a17 	ldw	fp,40(sp)
   1c444:	ddc00917 	ldw	r23,36(sp)
   1c448:	dd800817 	ldw	r22,32(sp)
   1c44c:	dd400717 	ldw	r21,28(sp)
   1c450:	dd000617 	ldw	r20,24(sp)
   1c454:	dcc00517 	ldw	r19,20(sp)
   1c458:	dc800417 	ldw	r18,16(sp)
   1c45c:	dc400317 	ldw	r17,12(sp)
   1c460:	dc000217 	ldw	r16,8(sp)
   1c464:	dec00c04 	addi	sp,sp,48
   1c468:	f800283a 	ret
   1c46c:	98800117 	ldw	r2,4(r19)
   1c470:	80c00017 	ldw	r3,0(r16)
   1c474:	10bfffc4 	addi	r2,r2,-1
   1c478:	17001526 	beq	r2,fp,1c4d0 <__call_exitprocs+0x164>
   1c47c:	80000015 	stw	zero,0(r16)
   1c480:	183fde26 	beq	r3,zero,1c3fc <__alt_mem_Flash_flash_data+0xf401c3fc>
   1c484:	00800044 	movi	r2,1
   1c488:	1708983a 	sll	r4,r2,fp
   1c48c:	98806217 	ldw	r2,392(r19)
   1c490:	9dc00117 	ldw	r23,4(r19)
   1c494:	2084703a 	and	r2,r4,r2
   1c498:	1000061e 	bne	r2,zero,1c4b4 <__call_exitprocs+0x148>
   1c49c:	183ee83a 	callr	r3
   1c4a0:	98800117 	ldw	r2,4(r19)
   1c4a4:	15ffc51e 	bne	r2,r23,1c3bc <__alt_mem_Flash_flash_data+0xf401c3bc>
   1c4a8:	a8800017 	ldw	r2,0(r21)
   1c4ac:	14ffd326 	beq	r2,r19,1c3fc <__alt_mem_Flash_flash_data+0xf401c3fc>
   1c4b0:	003fc206 	br	1c3bc <__alt_mem_Flash_flash_data+0xf401c3bc>
   1c4b4:	98806317 	ldw	r2,396(r19)
   1c4b8:	2084703a 	and	r2,r4,r2
   1c4bc:	1000061e 	bne	r2,zero,1c4d8 <__call_exitprocs+0x16c>
   1c4c0:	89400017 	ldw	r5,0(r17)
   1c4c4:	9009883a 	mov	r4,r18
   1c4c8:	183ee83a 	callr	r3
   1c4cc:	003ff406 	br	1c4a0 <__alt_mem_Flash_flash_data+0xf401c4a0>
   1c4d0:	9f000115 	stw	fp,4(r19)
   1c4d4:	003fea06 	br	1c480 <__alt_mem_Flash_flash_data+0xf401c480>
   1c4d8:	89000017 	ldw	r4,0(r17)
   1c4dc:	183ee83a 	callr	r3
   1c4e0:	003fef06 	br	1c4a0 <__alt_mem_Flash_flash_data+0xf401c4a0>
   1c4e4:	98800017 	ldw	r2,0(r19)
   1c4e8:	982b883a 	mov	r21,r19
   1c4ec:	1027883a 	mov	r19,r2
   1c4f0:	983fb61e 	bne	r19,zero,1c3cc <__alt_mem_Flash_flash_data+0xf401c3cc>
   1c4f4:	003fd106 	br	1c43c <__alt_mem_Flash_flash_data+0xf401c43c>
   1c4f8:	0005883a 	mov	r2,zero
   1c4fc:	003ffa06 	br	1c4e8 <__alt_mem_Flash_flash_data+0xf401c4e8>

0001c500 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c500:	defffd04 	addi	sp,sp,-12
   1c504:	df000215 	stw	fp,8(sp)
   1c508:	df000204 	addi	fp,sp,8
   1c50c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c510:	008000b4 	movhi	r2,2
   1c514:	1082d144 	addi	r2,r2,2885
   1c518:	10000005 	stb	zero,0(r2)
   1c51c:	e0bfff17 	ldw	r2,-4(fp)
   1c520:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1c524:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c528:	10000226 	beq	r2,zero,1c534 <_exit+0x34>
    ALT_SIM_FAIL();
   1c52c:	002af070 	cmpltui	zero,zero,43969
   1c530:	00000106 	br	1c538 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c534:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c538:	003fff06 	br	1c538 <__alt_mem_Flash_flash_data+0xf401c538>
