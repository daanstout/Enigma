
UART.elf:     file format elf32-littlenios2
UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f3c0 memsz 0x0001f3c0 flags r-x
    LOAD off    0x000203e0 vaddr 0x0001f3e0 paddr 0x00021608 align 2**12
         filesz 0x00002228 memsz 0x00002228 flags rw-
    LOAD off    0x00022830 vaddr 0x00023830 paddr 0x00023830 align 2**12
         filesz 0x00000000 memsz 0x0000d604 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e754  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a48  0001e998  0001e998  0001f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002228  0001f3e0  00021608  000203e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d604  00023830  00023830  00022830  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00030e34  00030e34  00022608  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00022608  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022608  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001158  00000000  00000000  00022630  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000333c8  00000000  00000000  00023788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bca2  00000000  00000000  00056b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fedb  00000000  00000000  000627f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003f30  00000000  00000000  000726d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005760  00000000  00000000  00076600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b175  00000000  00000000  0007bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00096ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001988  00000000  00000000  00096ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0009e83b  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009e841  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009e846  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009e847  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009e848  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009e84c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009e850  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009e854  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0009e85d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009e866  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0009e86f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  0009e87a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0018e939  00000000  00000000  0009e88f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001e998 l    d  .rodata	00000000 .rodata
0001f3e0 l    d  .rwdata	00000000 .rwdata
00023830 l    d  .bss	00000000 .bss
00030e34 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ebe2 l     O .rodata	00000010 zeroes.4240
0001ebf2 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001ec02 l     O .rodata	00000010 zeroes.4255
00005f20 l     F .text	000000bc __sbprintf
0001ec12 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006130 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007cec l     F .text	00000008 __fp_lock
00007cf4 l     F .text	00000008 __fp_unlock
00007d08 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001f3f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001f838 l     O .rwdata	00000020 lc_ctype_charset
0001f818 l     O .rwdata	00000020 lc_message_charset
0001f858 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0001ec44 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ed68 l     O .rodata	00000010 zeroes.4184
0001ed78 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000b630 l     F .text	000000fc __sprint_r.part.0
0001ed98 l     O .rodata	00000010 blanks.4199
0001ed88 l     O .rodata	00000010 zeroes.4200
0000ca38 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000eac0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000111ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001130c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011338 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011438 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001152c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011610 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00011808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002157c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00011a64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00021580 l     O .rwdata	00000004 lockid
000238b0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00021584 l     O .rwdata	00000004 lockid
000238b8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00013498 l     F .text	00000044 OS_InitMisc
000134dc l     F .text	00000068 OS_InitRdyList
0001363c l     F .text	000000e0 OS_InitTCBList
000133bc l     F .text	000000dc OS_InitEventList
00013544 l     F .text	0000007c OS_InitTaskIdle
000135c0 l     F .text	0000007c OS_InitTaskStat
0001389c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000156a0 l     F .text	00000110 OS_FlagTaskRdy
000153f8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a6d0 l     F .text	00000038 alt_dev_reg
0001fe40 l     O .rwdata	0000106c JTAG_UART
00020eac l     O .rwdata	00000030 AV_Config
00020edc l     O .rwdata	00000030 Audio_Subsystem_Audio
00020f0c l     O .rwdata	0000002c Char_LCD_16x2
00020f38 l     O .rwdata	0000002c IrDA
00020f64 l     O .rwdata	0000002c Expansion_JP5
00020f90 l     O .rwdata	0000002c Green_LEDs
00020fbc l     O .rwdata	0000002c HEX3_HEX0
00020fe8 l     O .rwdata	0000002c HEX7_HEX4
00021014 l     O .rwdata	0000002c Pushbuttons
00021040 l     O .rwdata	0000002c Red_LEDs
0002106c l     O .rwdata	0000002c Slider_Switches
00021098 l     O .rwdata	00000038 PS2_Port
000210d0 l     O .rwdata	00000038 PS2_Port_Dual
00021108 l     O .rwdata	0000002c rs232_0
00021134 l     O .rwdata	0000002c Serial_Port
00021160 l     O .rwdata	00000034 USB
00021194 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000211dc l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00021230 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001adc4 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001b06c l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b844 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
00023910 l     O .bss	00000004 state.1996
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d5fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001d868 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001db50 l     F .text	00000050 alt_get_errno
0001dba0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00023920 g     O .bss	00000004 alt_instruction_exception_handler
0000a0b0 g     F .text	00000074 _mprec_log10
000215d2 g     O .rwdata	00000002 OSTaskNameSize
0000a19c g     F .text	0000008c __any_on
0000d464 g     F .text	00000054 _isatty_r
0001ec50 g     O .rodata	00000028 __mprec_tinytens
00011734 g     F .text	000000d4 alt_main
00001ef4 g     F .text	00000090 strcpy
00030d34 g     O .bss	00000100 alt_irq
0001c3e0 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000d4b8 g     F .text	0000005c _lseek_r
00023834 g     O .bss	00000004 x6
00016a8c g     F .text	000000d0 OS_MemInit
00021608 g       *ABS*	00000000 __flash_rwdata_start
0001a66c g     F .text	00000064 OSTimeSet
00023838 g     O .bss	00000001 rotorStand
0001b9b0 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000fd54 g     F .text	00000084 .hidden __eqdf2
00012114 g     F .text	00000610 OSEventPendMulti
00030e34 g       *ABS*	00000000 __alt_heap_start
0001e1ac g     F .text	00000020 OSTaskCreateHook
00023974 g     O .bss	00002000 task1_stk
00001d50 g     F .text	0000003c printf
000215aa g     O .rwdata	00000002 OSMboxEn
00012778 g     F .text	0000007c OSIntEnter
0000dd88 g     F .text	0000009c _wcrtomb_r
0000a3c8 g     F .text	0000005c __sseek
0000803c g     F .text	00000010 __sinit
0001cd68 g     F .text	00000100 alt_up_char_buffer_string
0000dc34 g     F .text	00000138 __swbuf_r
0001c200 g     F .text	00000034 read_CE_bit
000215ba g     O .rwdata	00000002 OSQEn
00008628 g     F .text	0000007c _setlocale_r
00007ea4 g     F .text	00000068 __sfmoreglue
00011de8 g     F .text	000000d0 __malloc_unlock
0001e208 g     F .text	0000001c OSTaskStatHook
0001c584 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001ca78 g     F .text	00000090 alt_up_rs232_read_fd
000238c0 g     O .bss	00000001 OSLockNesting
000215f8 g     O .rwdata	00000002 OSDataSize
000238c1 g     O .bss	00000001 OSRunning
0001cc9c g     F .text	000000cc alt_up_char_buffer_draw
0000d514 g     F .text	0000015c memmove
0001e240 g     F .text	0000001c OSInitHookBegin
0002125c g     O .rwdata	00000198 key_table
0002383c g     O .bss	00000004 byte1
000215f0 g     O .rwdata	00000002 OSTmrSize
00008024 g     F .text	00000018 _cleanup
00009288 g     F .text	000000a8 _Balloc
000238c4 g     O .bss	00000004 OSIdleCtr
0000fdd8 g     F .text	000000e0 .hidden __gtdf2
0001df60 g     F .text	00000020 altera_nios2_gen2_irq_init
0001e02c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001b93c g     F .text	00000074 get_DDRAM_addr
00013bd4 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000176c g     F .text	000000b8 setX
000215f6 g     O .rwdata	00000002 OSTmrWheelTblSize
0001cec4 g     F .text	00000070 get_multi_byte_make_code_index
00000020 g       *ABS*	00000000 __flash_exceptions_start
00021596 g     O .rwdata	00000002 OSEventSize
000238c8 g     O .bss	00000001 OSPrioHighRdy
0000cf4c g     F .text	00000058 _fstat_r
0001e1cc g     F .text	00000020 OSTaskDelHook
0002389c g     O .bss	00000004 errno
0000a344 g     F .text	00000008 __seofread
0001e00c g       .text	00000000 OSStartHighRdy
00018f70 g     F .text	000001ec OSTaskCreateExt
0000a5f8 g     F .text	00001038 ___svfiprintf_internal_r
00014f44 g     F .text	00000068 OSFlagPendGetFlagsRdy
000215d6 g     O .rwdata	00000002 OSTaskStatStkSize
00014034 g     F .text	00000308 OSFlagAccept
00017160 g     F .text	000000b8 OSQFlush
0001d2ac g     F .text	00000064 set_keyboard_rate
00016b5c g     F .text	00000140 OSQAccept
000238a8 g     O .bss	00000004 alt_argv
00029528 g       *ABS*	00000000 _gp
00023840 g     O .bss	00000004 ringinstelling
00018db4 g     F .text	000001bc OSTaskCreate
00018874 g     F .text	00000540 OSTaskChangePrio
000238bc g     O .bss	00000004 alt_heapsem
0001f3e0 g     O .rwdata	00000014 ringInstellingen
00023844 g     O .bss	00000004 PS2_data
00013ea8 g     F .text	0000018c OSDebugInit
0001915c g     F .text	000003e0 OSTaskDel
0001d424 g     F .text	0000007c reset_keyboard
0001fcc0 g     O .rwdata	00000180 alt_fd_list
0002db10 g     O .bss	00000370 OSFlagTbl
000131a8 g     F .text	000000b4 OS_EventTaskRemove
0001d7a8 g     F .text	00000090 alt_find_dev
00009150 g     F .text	00000138 memcpy
000215c0 g     O .rwdata	00000002 OSRdyTblSize
0001bb4c g     F .text	00000050 alt_up_character_lcd_write_fd
0001ce68 g     F .text	0000005c alt_up_char_buffer_clear
00007cfc g     F .text	0000000c _cleanup_r
00011014 g     F .text	000000d0 .hidden __floatsidf
0001d928 g     F .text	00000078 alt_io_redirect
0000feb8 g     F .text	000000e0 .hidden __ltdf2
0001e998 g       *ABS*	00000000 __DTOR_END__
0001c0cc g     F .text	00000090 alt_up_irda_write_fd
0001ca04 g     F .text	00000074 alt_up_rs232_read_data
0001e550 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011eb8 g     F .text	00000120 OSEventNameGet
000215a4 g     O .rwdata	00000002 OSFlagMax
0000a228 g     F .text	00000074 __fpclassifyd
0000a00c g     F .text	000000a4 __ratio
000127f4 g     F .text	000000f4 OSIntExit
0000ca14 g     F .text	00000024 __vfiprintf_internal
000215de g     O .rwdata	00000002 OSTCBSize
000238c9 g     O .bss	00000001 OSPrioCur
0001bec8 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001b2d0 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001d24 g     F .text	0000002c _printf_r
0000ebdc g     F .text	00000008 .hidden __udivsi3
00011488 g     F .text	000000a4 isatty
000215c4 g     O .rwdata	00000002 OSStkWidth
0001eca0 g     O .rodata	000000c8 __mprec_tens
000215b8 g     O .rwdata	00000002 OSPtrSize
000086a4 g     F .text	0000000c __locale_charset
00021598 g     O .rwdata	00000002 OSEventTblSize
0001be6c g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001df80 g       .text	00000000 OSCtxSw
0001e4c4 g     F .text	0000008c alt_icache_flush
00023898 g     O .bss	00000004 __malloc_top_pad
000238cc g     O .bss	00000004 OSTCBList
000238a0 g     O .bss	00000004 alt_fd_list_lock
00021554 g     O .rwdata	00000004 __mb_cur_max
000086d4 g     F .text	0000000c _localeconv_r
0000cfa4 g     F .text	000004c0 __sfvwrite_r
00009694 g     F .text	0000003c __i2b
0002de80 g     O .bss	00000c30 OSMemTbl
000238d0 g     O .bss	00000001 OSTickStepState
0000a29c g     F .text	00000054 _sbrk_r
00001420 g     F .text	0000034c select
000215bc g     O .rwdata	00000002 OSQMax
0002eab0 g     O .bss	00000800 OSTaskStatStk
000166bc g     F .text	000000f8 OSMemNameGet
0002159c g     O .rwdata	00000002 OSFlagEn
0000d670 g     F .text	0000005c _read_r
000215e2 g     O .rwdata	00000002 OSTimeTickHookEn
00023924 g     O .bss	00000028 command
000157b0 g     F .text	000000a0 OS_FlagUnlink
00017680 g     F .text	00000168 OSQPost
00021574 g     O .rwdata	00000004 alt_max_fd
0001c980 g     F .text	00000044 alt_up_rs232_check_parity
0001376c g     F .text	00000064 OS_MemCopy
000137d0 g     F .text	000000cc OS_Sched
0000cc68 g     F .text	000000f0 _fclose_r
00023848 g     O .bss	00000004 x5
000165cc g     F .text	000000f0 OSMemGet
000162c8 g     F .text	00000110 OSMboxQuery
0001983c g     F .text	000001c0 OSTaskNameSet
0001c234 g     F .text	00000030 read_num_bytes_available
00007cbc g     F .text	00000030 fflush
000213f4 g     O .rwdata	00000066 ascii_codes
00023894 g     O .bss	00000004 __malloc_max_sbrked_mem
000238d4 g     O .bss	00000004 OSCtxSwCtr
0001e224 g     F .text	0000001c OSTimeTickHook
0001d9a0 g     F .text	000001b0 alt_irq_register
000215a6 g     O .rwdata	00000002 OSFlagNameSize
0001c19c g     F .text	00000034 read_RI_bit
0001325c g     F .text	000000fc OS_EventTaskRemoveMulti
0000ebec g     F .text	0000089c .hidden __adddf3
00021540 g     O .rwdata	00000005 rotorStanden
0001305c g     F .text	0000014c OS_EventTaskWaitMulti
00009db4 g     F .text	0000011c __b2d
000215be g     O .rwdata	00000002 OSQSize
0000e530 g     F .text	00000590 .hidden __umoddi3
00011660 g     F .text	000000d4 lseek
00018184 g     F .text	00000268 OSSemPend
00000800 g     F .text	0000023c rotateTask
0002154c g     O .rwdata	00000004 _global_impure_ptr
0000d6cc g     F .text	00000568 _realloc_r
000215a8 g     O .rwdata	00000002 OSLowestPrio
00030e34 g       *ABS*	00000000 __bss_end
0001e294 g     F .text	00000020 OSTCBInitHook
0002384c g     O .bss	00000001 letter
000215ee g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001de5c g     F .text	00000104 alt_tick
0001605c g     F .text	00000110 OSMboxPost
0000df70 g     F .text	000005c0 .hidden __udivdi3
0000cd6c g     F .text	00000184 _fputwc_r
00021590 g     O .rwdata	00000002 OSEventEn
0001ec78 g     O .rodata	00000028 __mprec_bigtens
00009478 g     F .text	00000104 __s2b
000215ea g     O .rwdata	00000002 OSTmrCfgNameSize
000110e4 g     F .text	000000a4 .hidden __floatunsidf
00009b5c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001c298 g     F .text	0000002c read_data_byte
0000805c g     F .text	00000018 __fp_lock_all
0000035c g     F .text	0000007c sendCommand
000155bc g     F .text	000000e4 OS_FlagInit
0001ddc4 g     F .text	00000098 alt_alarm_stop
00025974 g     O .bss	00002000 rotateTask_stk
0001c1d0 g     F .text	00000030 read_RE_bit
000215cc g     O .rwdata	00000002 OSTaskIdleStkSize
00023914 g     O .bss	00000004 alt_irq_active
00017d6c g     F .text	000000b0 OSSemAccept
00000ee8 g     F .text	00000088 VGA_text
000168cc g     F .text	000000d8 OSMemPut
000163d8 g     F .text	000001f4 OSMemCreate
000238d8 g     O .bss	00000004 OSIdleCtrMax
0001bf08 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001fc98 g     O .rwdata	00000028 alt_dev_null
000215e0 g     O .rwdata	00000002 OSTicksPerSec
00023850 g     O .bss	00000004 x2
0002152c g     O .rwdata	00000004 character_buffer
0001bde0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001df80 g       .text	00000000 OSIntCtxSw
0001c43c g     F .text	00000074 alt_up_ps2_write_data_byte
0001d5e0 g     F .text	0000001c alt_dcache_flush_all
0000957c g     F .text	00000068 __hi0bits
00010f8c g     F .text	00000088 .hidden __fixdfsi
000238dc g     O .bss	00000004 OSTCBFreeList
00021608 g       *ABS*	00000000 __ram_rwdata_end
000183ec g     F .text	0000016c OSSemPendAbort
000214c0 g     O .rwdata	00000066 multi_byte_make_code
0002156c g     O .rwdata	00000008 alt_dev_list
00011ab4 g     F .text	000000f8 write
000215e4 g     O .rwdata	00000002 OSVersionNbr
0001f3e0 g       *ABS*	00000000 __ram_rodata_end
00011388 g     F .text	000000b0 fstat
0001cb08 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000feb8 g     F .text	000000e0 .hidden __ledf2
00000570 g     F .text	00000290 cryptTask
00027974 g     O .bss	0000008c letterLijst
0002158c g     O .rwdata	00000004 OSEndiannessTest
000098cc g     F .text	00000140 __pow5mult
0000b744 g     F .text	000012d0 ___vfiprintf_internal_r
0002388c g     O .bss	00000004 __nlocale_changed
0000ebe4 g     F .text	00000008 .hidden __umodsi3
00000310 g     F .text	0000004c putChar
0002159e g     O .rwdata	00000002 OSFlagGrpSize
00030e34 g       *ABS*	00000000 end
0001c778 g     F .text	00000098 alt_up_ps2_write_fd
0001bf44 g     F .text	00000044 alt_up_irda_check_parity
0001cbdc g     F .text	00000080 alt_up_char_buffer_init
0001ac84 g     F .text	00000140 altera_avalon_jtag_uart_init
00013a30 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001e998 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001b8bc g     F .text	00000080 alt_avalon_timer_sc_init
00011188 g     F .text	00000064 .hidden __clzsi2
0001b584 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000804c g     F .text	00000004 __sfp_lock_acquire
00009068 g     F .text	000000e8 memchr
0001371c g     F .text	00000050 OS_MemClr
0001ba60 g     F .text	00000078 alt_up_character_lcd_write
00003fac g     F .text	00001f50 ___vfprintf_internal_r
0001e050 g     F .text	0000015c OSTaskStkInit
00000a3c g     F .text	00000040 task1
00001d8c g     F .text	00000058 _sprintf_r
000081b0 g     F .text	000002f0 _free_r
000086b0 g     F .text	00000010 __locale_mb_cur_max
00012db8 g     F .text	00000198 OS_EventTaskRdy
0001e7c8 g     F .text	00000194 __call_exitprocs
000238e0 g     O .bss	00000001 OSCPUUsage
0001d310 g     F .text	00000114 translate_make_code
00023888 g     O .bss	00000004 __mlocale_changed
00021558 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00000a7c g     F .text	000000a0 task2
00023918 g     O .bss	00000004 _alt_tick_rate
00017218 g     F .text	000002fc OSQPend
0001a168 g     F .text	00000148 OSTimeDly
00009a0c g     F .text	00000150 __lshift
000003d8 g     F .text	00000140 getCommand
0002391c g     O .bss	00000004 _alt_nticks
00011858 g     F .text	000000fc read
0001a73c g     F .text	000003e4 alt_sys_init
0001bc98 g     F .text	00000088 alt_up_character_lcd_shift_display
0000a42c g     F .text	000001cc __ssprint_r
0001e6b4 g     F .text	00000114 __register_exitproc
000238e1 g     O .bss	00000001 OSTaskCtr
0001c698 g     F .text	00000054 alt_up_ps2_clear_fifo
0001c944 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000e40 g     F .text	000000a8 VGA_box
0001a2b0 g     F .text	00000168 OSTimeDlyHMSM
000096d0 g     F .text	000001fc __multiply
0001bd20 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001b17c g     F .text	00000068 altera_avalon_jtag_uart_close
0001f3e0 g       *ABS*	00000000 __ram_rwdata_start
0001e998 g       *ABS*	00000000 __ram_rodata_start
0002394c g     O .bss	00000028 __malloc_current_mallinfo
00021592 g     O .rwdata	00000002 OSEventMax
00009ed0 g     F .text	0000013c __d2b
00018558 g     F .text	00000110 OSSemPost
00012970 g     F .text	000000d8 OSSchedUnlock
0001ab20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001e3c8 g     F .text	000000fc alt_get_fd
000238e4 g     O .bss	00000004 OSMemFreeList
00012ab4 g     F .text	000000ac OSStatInit
00015334 g     F .text	000000c4 OSFlagQuery
000215c8 g     O .rwdata	00000002 OSTaskCreateExtEn
0000cb50 g     F .text	00000054 _close_r
0001d1f4 g     F .text	000000b8 decode_scancode
0001e638 g     F .text	0000007c memcmp
00012d9c g     F .text	0000001c OS_Dummy
0001abe0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00030e34 g       *ABS*	00000000 __alt_stack_base
0001ac30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001be14 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00005fdc g     F .text	00000154 __swsetup_r
0002f2b0 g     O .bss	000001e0 OSQTbl
0000f488 g     F .text	000008cc .hidden __divdf3
00007f0c g     F .text	00000118 __sfp
0000a124 g     F .text	00000078 __copybits
0001f890 g     O .rwdata	00000408 __malloc_av_
00008058 g     F .text	00000004 __sinit_lock_release
000238e8 g     O .bss	00000004 OSTCBHighRdy
0000ff98 g     F .text	00000724 .hidden __muldf3
0000a2f0 g     F .text	00000054 __sread
000238ec g     O .bss	00000004 OSQFreeList
0001c8a8 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001e2b4 g     F .text	00000114 alt_find_file
0001d64c g     F .text	000000a4 alt_dev_llist_insert
00011cc8 g     F .text	00000120 __malloc_lock
000119b4 g     F .text	000000b0 sbrk
0000201c g     F .text	00001f90 ___svfprintf_internal_r
00011fd8 g     F .text	0000013c OSEventNameSet
00007c60 g     F .text	0000005c _fflush_r
0000cba4 g     F .text	000000c4 _calloc_r
000238f0 g     O .bss	00000001 OSRdyGrp
0000187c g     F .text	00000074 PS2
00027a00 g     O .bss	000000a0 messages
00023854 g     O .bss	00000004 x4
00023830 g       *ABS*	00000000 __bss_start
00001c00 g     F .text	00000124 memset
00000bf8 g     F .text	00000248 main
0001cf34 g     F .text	00000070 get_single_byte_make_code_index
000238ac g     O .bss	00000004 alt_envp
00023890 g     O .bss	00000004 __malloc_max_total_mem
0001cc5c g     F .text	00000040 alt_up_char_buffer_open_dev
0001ab80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000dd6c g     F .text	0000001c __swbuf
0001eec4 g     O .rodata	00000100 OSUnMapTbl
000215c2 g     O .rwdata	00000002 OSSemEn
0001bc10 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00014fac g     F .text	00000388 OSFlagPost
0000a424 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000cd58 g     F .text	00000014 fclose
00012f50 g     F .text	0000010c OS_EventTaskWait
00027aa0 g     O .bss	00002000 task2_stk
0001c628 g     F .text	00000070 alt_up_ps2_read_data_byte
00023858 g     O .bss	00000004 messageBox
00013b0c g     F .text	000000c8 OS_TaskStatStkChk
0001953c g     F .text	00000158 OSTaskDelReq
00006330 g     F .text	00001728 _dtoa_r
000088c0 g     F .text	000007a8 _malloc_r
0000dee4 g     F .text	00000030 __ascii_wctomb
00021548 g     O .rwdata	00000004 y
00021578 g     O .rwdata	00000004 alt_errno
00012a48 g     F .text	0000006c OSStart
00029aa0 g     O .bss	00002000 task3_stk
0002385c g     O .bss	00000002 strTemp
00011c6c g     F .text	0000005c __env_unlock
000084a0 g     F .text	000000c4 _fwalk
000199fc g     F .text	000001f8 OSTaskResume
000169a4 g     F .text	000000e8 OSMemQuery
000215d4 g     O .rwdata	00000002 OSTaskStatEn
0001bf88 g     F .text	00000040 alt_up_irda_write_data
000215ae g     O .rwdata	00000002 OSMemMax
000177e8 g     F .text	00000170 OSQPostFront
0001c810 g     F .text	00000040 alt_up_ps2_open_dev
0000eb2c g     F .text	00000054 .hidden __divsi3
000018f0 g     F .text	000001d0 getKey
0002385e g     O .bss	00000002 d
000238f1 g     O .bss	00000003 OSRdyTbl
00021588 g     O .rwdata	00000002 OSDebugEn
0001ba20 g     F .text	00000040 alt_up_character_lcd_open_dev
0000808c g     F .text	00000124 _malloc_trim_r
0001c388 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001e998 g       *ABS*	00000000 __CTOR_END__
000215a0 g     O .rwdata	00000002 OSFlagNodeSize
000215e8 g     O .rwdata	00000002 OSTmrCfgMax
0001b9ec g     F .text	00000034 alt_up_character_lcd_init
00001e50 g     F .text	000000a4 strcmp
00016c9c g     F .text	000001fc OSQCreate
00019694 g     F .text	000001a8 OSTaskNameGet
0001e998 g       *ABS*	00000000 __flash_rodata_start
00017958 g     F .text	0000020c OSQPostOpt
00012b60 g     F .text	0000021c OSTimeTick
000215d0 g     O .rwdata	00000002 OSTaskMax
0001e998 g       *ABS*	00000000 __DTOR_LIST__
00017e1c g     F .text	00000100 OSSemCreate
000215f4 g     O .rwdata	00000002 OSTmrWheelSize
00023860 g     O .bss	00000004 sem_rotated
0001cb9c g     F .text	00000040 alt_up_rs232_open_dev
00001ac0 g     F .text	000000f0 printRinginstelling
00021538 g     O .rwdata	00000004 count
0000fd54 g     F .text	00000084 .hidden __nedf2
000215ca g     O .rwdata	00000002 OSTaskDelEn
00018668 g     F .text	00000110 OSSemQuery
00016e98 g     F .text	000002c8 OSQDel
00017514 g     F .text	0000016c OSQPendAbort
0001a708 g     F .text	00000034 alt_irq_init
00011954 g     F .text	00000060 alt_release_fd
00023864 g     O .bss	00000004 ControlBlock
0001c264 g     F .text	00000034 read_data_valid
00001de4 g     F .text	0000006c sprintf
0001bdac g     F .text	00000034 alt_up_character_lcd_cursor_off
0001eda8 g     O .rodata	00000100 .hidden __clz_tab
00023884 g     O .bss	00000004 _PathLocale
00021528 g     O .rwdata	00000004 PS2_ptr
00021530 g     O .rwdata	00000004 pixel_buffer
0001c520 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001e5ec g     F .text	00000014 atexit
00021534 g     O .rwdata	00000004 rotorNummer
0000caf4 g     F .text	0000005c _write_r
000128e8 g     F .text	00000088 OSSchedLock
000086e0 g     F .text	0000001c setlocale
0001433c g     F .text	00000128 OSFlagCreate
00021550 g     O .rwdata	00000004 _impure_ptr
000238a4 g     O .bss	00000004 alt_argc
00007a58 g     F .text	00000208 __sflush_r
00023868 g     O .bss	00000004 x3
0001d74c g     F .text	0000005c _do_dtors
000086cc g     F .text	00000008 __locale_cjk_lang
0002159a g     O .rwdata	00000002 OSEventMultiEn
00023830 g     O .bss	00000004 RAVAIL
0002386c g     O .bss	00000004 x1
0002baa0 g     O .bss	00000028 ascii
00014464 g     F .text	00000270 OSFlagDel
000238f4 g     O .bss	00000004 OSEventFreeList
00023870 g     O .bss	00000004 sem_enigma
00000020 g       .exceptions	00000000 alt_irq_entry
00015ef0 g     F .text	0000016c OSMboxPendAbort
0002bac8 g     O .bss	00002000 crypt_stk
00009d54 g     F .text	00000060 __ulp
00014954 g     F .text	000005f0 OSFlagPend
000215e6 g     O .rwdata	00000002 OSTmrEn
00008074 g     F .text	00000018 __fp_unlock_all
0002dac8 g     O .bss	00000046 cijferLijst
00000518 g     F .text	00000058 getLetter
00021564 g     O .rwdata	00000008 alt_fs_list
0001390c g     F .text	00000074 OS_StrCopy
0001c850 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001c9c4 g     F .text	00000040 alt_up_rs232_write_data
000215b0 g     O .rwdata	00000002 OSMemNameSize
0001e25c g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000215dc g     O .rwdata	00000002 OSTCBPrioTblMax
00023874 g     O .bss	00000002 arrowTemp
000086fc g     F .text	0000000c localeconv
000215d8 g     O .rwdata	00000002 OSTaskStatStkChkEn
000158e8 g     F .text	000000fc OSMboxCreate
000215ac g     O .rwdata	00000002 OSMemEn
000215b6 g     O .rwdata	00000002 OSMutexEn
00021608 g       *ABS*	00000000 _edata
00030e34 g       *ABS*	00000000 _end
000238f8 g     O .bss	00000001 OSIntNesting
00001bb0 g     F .text	00000050 printRotorStand
00000244 g       *ABS*	00000000 __ram_exceptions_end
00023878 g     O .bss	00000004 sem_hardware
0001b1e4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00000f70 g     F .text	00000254 typen
0001a418 g     F .text	000001f0 OSTimeDlyResume
0002153c g     O .rwdata	00000004 rij
00014804 g     F .text	00000150 OSFlagNameSet
00015c4c g     F .text	000002a4 OSMboxPend
00019bf4 g     F .text	000001c8 OSTaskStkChk
000011c4 g     F .text	0000025c changeRotor
000215b2 g     O .rwdata	00000002 OSMemSize
0000a34c g     F .text	0000007c __swrite
0002155c g     O .rwdata	00000004 __malloc_trim_threshold
000086c0 g     F .text	0000000c __locale_msgcharset
000238fc g     O .bss	00000004 OSTCBCur
0001e600 g     F .text	00000038 exit
0001bfc8 g     F .text	00000074 alt_up_irda_read_data
000215b4 g     O .rwdata	00000002 OSMemTblSize
00008564 g     F .text	000000c4 _fwalk_reent
0001c2c4 g     F .text	000000c4 alt_up_ps2_init
00009bbc g     F .text	00000198 __mdiff
0000eb80 g     F .text	0000005c .hidden __modsi3
00015850 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008050 g     F .text	00000004 __sfp_lock_release
00012724 g     F .text	00000054 OSInit
00019fd0 g     F .text	0000012c OSTaskQuery
0001bad8 g     F .text	00000074 alt_up_character_lcd_string
0002387c g     O .bss	00000002 e
00017cc0 g     F .text	000000ac OS_QInit
00013980 g     F .text	00000054 OS_StrLen
0001c15c g     F .text	00000040 alt_up_irda_open_dev
000167b4 g     F .text	00000118 OSMemNameSet
00000280 g     F .text	00000090 getChar
000215ce g     O .rwdata	00000002 OSTaskProfileEn
00023900 g     O .bss	00000004 OSTime
0002f490 g     O .bss	00000800 OSTaskIdleStk
0001e95c g     F .text	0000003c _exit
0001616c g     F .text	0000015c OSMboxPostOpt
0001d4a0 g     F .text	00000140 alt_alarm_start
000146d4 g     F .text	00000130 OSFlagNameGet
0001a608 g     F .text	00000064 OSTimeGet
0001cfa4 g     F .text	00000250 get_next_state
00008708 g     F .text	000001b8 __smakebuf_r
0001c4b0 g     F .text	00000070 alt_up_ps2_wait_for_ack
00001f84 g     F .text	00000098 strlen
0001e1ec g     F .text	0000001c OSTaskSwHook
0001dc6c g     F .text	00000158 open
0002fc90 g     O .bss	00000b40 OSEventTbl
0000fdd8 g     F .text	000000e0 .hidden __gedf2
000307d0 g     O .bss	00000510 OSTCBTbl
00018778 g     F .text	000000fc OSSemSet
00001824 g     F .text	00000058 clearScreen
00021560 g     O .rwdata	00000004 __wctomb
0000b72c g     F .text	00000018 __sprint_r
0001d838 g     F .text	00000030 alt_icache_flush_all
0001bb9c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000215fc g     O .rwdata	00000004 alt_priority_mask
00017f1c g     F .text	00000268 OSSemDel
00023904 g     O .bss	00000004 OSFlagFreeList
00000b1c g     F .text	000000dc task3
00021594 g     O .rwdata	00000002 OSEventNameSize
000159e4 g     F .text	00000268 OSMboxDel
00005efc g     F .text	00000024 __vfprintf_internal
00023908 g     O .bss	00000001 OSStatRdy
00030ce0 g     O .bss	00000054 OSTCBPrioTbl
0000df14 g     F .text	0000005c _wctomb_r
00011bac g     F .text	000000c0 __env_lock
0001c6ec g     F .text	0000008c alt_up_ps2_read_fd
000215da g     O .rwdata	00000002 OSTaskSwHookEn
000106bc g     F .text	000008d0 .hidden __subdf3
0001c03c g     F .text	00000090 alt_up_irda_read_fd
0002145a g     O .rwdata	00000066 single_byte_make_code
000095e4 g     F .text	000000b0 __lo0bits
00023880 g     O .bss	00000004 sem_rotate
00021600 g     O .rwdata	00000008 alt_alarm_list
000215a2 g     O .rwdata	00000002 OSFlagWidth
0001d6f0 g     F .text	0000005c _do_ctors
0001c904 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000de24 g     F .text	000000c0 wcrtomb
0001123c g     F .text	000000d0 close
000238b4 g     O .bss	00000004 alt_envsem
0002390c g     O .bss	00000004 OSIdleCtrRun
00012d7c g     F .text	00000020 OSVersion
000215ec g     O .rwdata	00000002 OSTmrCfgWheelSize
00011590 g     F .text	00000080 alt_load
0001a0fc g     F .text	0000006c OS_TaskStkClr
000215c6 g     O .rwdata	00000002 OSTaskCreateEn
00013358 g     F .text	00000064 OS_EventWaitListInit
0000cef0 g     F .text	0000005c fputwc
0001e278 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00008054 g     F .text	00000004 __sinit_lock_acquire
00009358 g     F .text	00000120 __multadd
00019dbc g     F .text	00000214 OSTaskSuspend
00009330 g     F .text	00000028 _Bfree
000139d4 g     F .text	0000005c OS_TaskIdle
000215f2 g     O .rwdata	00000002 OSTmrTblSize
00017b64 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00127780 	call	12778 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10834d04 	addi	r2,r2,3380
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10834d04 	addi	r2,r2,3380
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00127f40 	call	127f4 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a8fe17 	ldw	r2,-23560(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a8fe17 	ldw	r2,-23560(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a54a14 	ori	gp,gp,38184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	108e0c14 	ori	r2,r2,14384

    movhi r3, %hi(__bss_end)
     25c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     260:	18c38d14 	ori	r3,r3,3636

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00115900 	call	11590 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00117340 	call	11734 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <getChar>:
int ringInstellingen[5] = { 1, 1, 1, 1 };
char rotorStanden[5] = { 'a', 'a', 'a', 'a' };
int y = 5;
int x1, x2, x3, x4, x5, x6;

char getChar(volatile int *UART_ID) {
     280:	defffc04 	addi	sp,sp,-16
     284:	df000315 	stw	fp,12(sp)
     288:	df000304 	addi	fp,sp,12
     28c:	e13fff15 	stw	r4,-4(fp)
	int data;
	data = *(UART_ID); // read the RS232_UART data register
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	10800017 	ldw	r2,0(r2)
     298:	e0bffd15 	stw	r2,-12(fp)
	if (data & 0x00008000) { // check RVALID to see if there is new data
     29c:	e0bffd17 	ldw	r2,-12(fp)
     2a0:	10a0000c 	andi	r2,r2,32768
     2a4:	10001526 	beq	r2,zero,2fc <getChar+0x7c>
		char character = data & 0xFF;
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	e0bffe05 	stb	r2,-8(fp)
		if (((character >= 'a') && (character <= 'z')) || (character == '/')
     2b0:	e0bffe07 	ldb	r2,-8(fp)
     2b4:	10801850 	cmplti	r2,r2,97
     2b8:	1000031e 	bne	r2,zero,2c8 <getChar+0x48>
     2bc:	e0bffe07 	ldb	r2,-8(fp)
     2c0:	10801ed0 	cmplti	r2,r2,123
     2c4:	1000091e 	bne	r2,zero,2ec <getChar+0x6c>
     2c8:	e0bffe07 	ldb	r2,-8(fp)
     2cc:	10800be0 	cmpeqi	r2,r2,47
     2d0:	1000061e 	bne	r2,zero,2ec <getChar+0x6c>
				|| (character == '0') || (character == '1')) {
     2d4:	e0bffe07 	ldb	r2,-8(fp)
     2d8:	10800c20 	cmpeqi	r2,r2,48
     2dc:	1000031e 	bne	r2,zero,2ec <getChar+0x6c>
     2e0:	e0bffe07 	ldb	r2,-8(fp)
     2e4:	10800c58 	cmpnei	r2,r2,49
     2e8:	1000021e 	bne	r2,zero,2f4 <getChar+0x74>
			return character;
     2ec:	e0bffe03 	ldbu	r2,-8(fp)
     2f0:	00000306 	br	300 <getChar+0x80>
		}
	} else {
		return '\0';
	}
	return '\0';
     2f4:	0005883a 	mov	r2,zero
     2f8:	00000106 	br	300 <getChar+0x80>
		if (((character >= 'a') && (character <= 'z')) || (character == '/')
				|| (character == '0') || (character == '1')) {
			return character;
		}
	} else {
		return '\0';
     2fc:	0005883a 	mov	r2,zero
	}
	return '\0';
}
     300:	e037883a 	mov	sp,fp
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00104 	addi	sp,sp,4
     30c:	f800283a 	ret

00000310 <putChar>:

void putChar(volatile int *UART_ID, char c) {
     310:	defffc04 	addi	sp,sp,-16
     314:	df000315 	stw	fp,12(sp)
     318:	df000304 	addi	fp,sp,12
     31c:	e13ffe15 	stw	r4,-8(fp)
     320:	2805883a 	mov	r2,r5
     324:	e0bfff05 	stb	r2,-4(fp)
	int control;
	control = *(UART_ID + 4); // read the RS232_UART control register
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	10800417 	ldw	r2,16(r2)
     330:	e0bffd15 	stw	r2,-12(fp)
	if (control & 0x00FF0000) { // if space, write character, else ignore
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	10803fec 	andhi	r2,r2,255
     33c:	10000326 	beq	r2,zero,34c <putChar+0x3c>
		*(UART_ID) = c;
     340:	e0ffff07 	ldb	r3,-4(fp)
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	10c00015 	stw	r3,0(r2)
	}
}
     34c:	e037883a 	mov	sp,fp
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00104 	addi	sp,sp,4
     358:	f800283a 	ret

0000035c <sendCommand>:

void sendCommand(char string[]) {
     35c:	defffb04 	addi	sp,sp,-20
     360:	dfc00415 	stw	ra,16(sp)
     364:	df000315 	stw	fp,12(sp)
     368:	dc000215 	stw	r16,8(sp)
     36c:	df000304 	addi	fp,sp,12
     370:	e13ffe15 	stw	r4,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++) {
     374:	e03ffd15 	stw	zero,-12(fp)
     378:	00000d06 	br	3b0 <sendCommand+0x54>
		putChar(UART_0, string[i]);
     37c:	e0bffd17 	ldw	r2,-12(fp)
     380:	e0fffe17 	ldw	r3,-8(fp)
     384:	1885883a 	add	r2,r3,r2
     388:	10800003 	ldbu	r2,0(r2)
     38c:	10803fcc 	andi	r2,r2,255
     390:	1080201c 	xori	r2,r2,128
     394:	10bfe004 	addi	r2,r2,-128
     398:	01020834 	movhi	r4,2080
     39c:	100b883a 	mov	r5,r2
     3a0:	00003100 	call	310 <putChar>
	}
}

void sendCommand(char string[]) {
	int i;
	for (i = 0; i < strlen(string); i++) {
     3a4:	e0bffd17 	ldw	r2,-12(fp)
     3a8:	10800044 	addi	r2,r2,1
     3ac:	e0bffd15 	stw	r2,-12(fp)
     3b0:	e43ffd17 	ldw	r16,-12(fp)
     3b4:	e13ffe17 	ldw	r4,-8(fp)
     3b8:	0001f840 	call	1f84 <strlen>
     3bc:	80bfef36 	bltu	r16,r2,37c <__alt_mem_Flash_flash_data+0xf400037c>
		putChar(UART_0, string[i]);
	}
}
     3c0:	e6ffff04 	addi	sp,fp,-4
     3c4:	dfc00217 	ldw	ra,8(sp)
     3c8:	df000117 	ldw	fp,4(sp)
     3cc:	dc000017 	ldw	r16,0(sp)
     3d0:	dec00304 	addi	sp,sp,12
     3d4:	f800283a 	ret

000003d8 <getCommand>:

void getCommand() {
     3d8:	defffd04 	addi	sp,sp,-12
     3dc:	dfc00215 	stw	ra,8(sp)
     3e0:	df000115 	stw	fp,4(sp)
     3e4:	df000104 	addi	fp,sp,4
	memset(command, 0, strlen(command));
     3e8:	010000b4 	movhi	r4,2
     3ec:	210e4904 	addi	r4,r4,14628
     3f0:	0001f840 	call	1f84 <strlen>
     3f4:	010000b4 	movhi	r4,2
     3f8:	210e4904 	addi	r4,r4,14628
     3fc:	000b883a 	mov	r5,zero
     400:	100d883a 	mov	r6,r2
     404:	0001c000 	call	1c00 <memset>
	command[0] = '\0';
     408:	008000b4 	movhi	r2,2
     40c:	108e4904 	addi	r2,r2,14628
     410:	10000005 	stb	zero,0(r2)
	INT8U finished = 0;
     414:	e03fff05 	stb	zero,-4(fp)
	INT8U characterCount = 0;
     418:	e03fff45 	stb	zero,-3(fp)
	char currentChar = '\0';
     41c:	e03fff85 	stb	zero,-2(fp)

	while (!finished) {
     420:	00002306 	br	4b0 <getCommand+0xd8>
		currentChar = getChar(UART_0);
     424:	01020834 	movhi	r4,2080
     428:	00002800 	call	280 <getChar>
     42c:	e0bfff85 	stb	r2,-2(fp)
		if (currentChar != '\0') {
     430:	e0bfff87 	ldb	r2,-2(fp)
     434:	10001d26 	beq	r2,zero,4ac <getCommand+0xd4>
			if ((currentChar >= 'a') || (currentChar == '/')
     438:	e0bfff87 	ldb	r2,-2(fp)
     43c:	10801848 	cmpgei	r2,r2,97
     440:	1000091e 	bne	r2,zero,468 <getCommand+0x90>
     444:	e0bfff87 	ldb	r2,-2(fp)
     448:	10800be0 	cmpeqi	r2,r2,47
     44c:	1000061e 	bne	r2,zero,468 <getCommand+0x90>
					|| (currentChar == '1') || (currentChar == '0')) {
     450:	e0bfff87 	ldb	r2,-2(fp)
     454:	10800c60 	cmpeqi	r2,r2,49
     458:	1000031e 	bne	r2,zero,468 <getCommand+0x90>
     45c:	e0bfff87 	ldb	r2,-2(fp)
     460:	10800c18 	cmpnei	r2,r2,48
     464:	1000111e 	bne	r2,zero,4ac <getCommand+0xd4>
				if (currentChar == '/') {
     468:	e0bfff87 	ldb	r2,-2(fp)
     46c:	10800bd8 	cmpnei	r2,r2,47
     470:	1000051e 	bne	r2,zero,488 <getCommand+0xb0>
					if (characterCount > 0) {
     474:	e0bfff43 	ldbu	r2,-3(fp)
     478:	10000c26 	beq	r2,zero,4ac <getCommand+0xd4>
						finished = 1;
     47c:	00800044 	movi	r2,1
     480:	e0bfff05 	stb	r2,-4(fp)
     484:	00000906 	br	4ac <getCommand+0xd4>
					}
				} else {
					command[characterCount] = currentChar;
     488:	e0ffff43 	ldbu	r3,-3(fp)
     48c:	008000b4 	movhi	r2,2
     490:	108e4904 	addi	r2,r2,14628
     494:	10c5883a 	add	r2,r2,r3
     498:	e0ffff83 	ldbu	r3,-2(fp)
     49c:	10c00005 	stb	r3,0(r2)
					characterCount++;
     4a0:	e0bfff43 	ldbu	r2,-3(fp)
     4a4:	10800044 	addi	r2,r2,1
     4a8:	e0bfff45 	stb	r2,-3(fp)
				}
			}
		}
		currentChar = '\0';
     4ac:	e03fff85 	stb	zero,-2(fp)
	command[0] = '\0';
	INT8U finished = 0;
	INT8U characterCount = 0;
	char currentChar = '\0';

	while (!finished) {
     4b0:	e0bfff03 	ldbu	r2,-4(fp)
     4b4:	103fdb26 	beq	r2,zero,424 <__alt_mem_Flash_flash_data+0xf4000424>
				}
			}
		}
		currentChar = '\0';
	}
	command[characterCount] = '\0';
     4b8:	e0ffff43 	ldbu	r3,-3(fp)
     4bc:	008000b4 	movhi	r2,2
     4c0:	108e4904 	addi	r2,r2,14628
     4c4:	10c5883a 	add	r2,r2,r3
     4c8:	10000005 	stb	zero,0(r2)
	command[0] = command[strlen(command) - 1];
     4cc:	010000b4 	movhi	r4,2
     4d0:	210e4904 	addi	r4,r4,14628
     4d4:	0001f840 	call	1f84 <strlen>
     4d8:	10ffffc4 	addi	r3,r2,-1
     4dc:	008000b4 	movhi	r2,2
     4e0:	108e4904 	addi	r2,r2,14628
     4e4:	10c5883a 	add	r2,r2,r3
     4e8:	10c00003 	ldbu	r3,0(r2)
     4ec:	008000b4 	movhi	r2,2
     4f0:	108e4904 	addi	r2,r2,14628
     4f4:	10c00005 	stb	r3,0(r2)
	command[1] = '\0';
     4f8:	008000b4 	movhi	r2,2
     4fc:	108e4904 	addi	r2,r2,14628
     500:	10000045 	stb	zero,1(r2)
}
     504:	e037883a 	mov	sp,fp
     508:	dfc00117 	ldw	ra,4(sp)
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00204 	addi	sp,sp,8
     514:	f800283a 	ret

00000518 <getLetter>:

void getLetter(char string2[], char character) {
     518:	defff704 	addi	sp,sp,-36
     51c:	dfc00815 	stw	ra,32(sp)
     520:	df000715 	stw	fp,28(sp)
     524:	df000704 	addi	fp,sp,28
     528:	e13ffe15 	stw	r4,-8(fp)
     52c:	2805883a 	mov	r2,r5
     530:	e0bfff05 	stb	r2,-4(fp)
	char string[20];
	sprintf(string, "%s%c/", string2, character);
     534:	e0bfff07 	ldb	r2,-4(fp)
     538:	e13ff904 	addi	r4,fp,-28
     53c:	014000b4 	movhi	r5,2
     540:	297a6604 	addi	r5,r5,-5736
     544:	e1bffe17 	ldw	r6,-8(fp)
     548:	100f883a 	mov	r7,r2
     54c:	0001de40 	call	1de4 <sprintf>
	sendCommand(string);
     550:	e13ff904 	addi	r4,fp,-28
     554:	000035c0 	call	35c <sendCommand>
	getCommand();
     558:	00003d80 	call	3d8 <getCommand>
}
     55c:	e037883a 	mov	sp,fp
     560:	dfc00117 	ldw	ra,4(sp)
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret

00000570 <cryptTask>:

/* Prints "Hello World" and sleeps for three seconds */
void cryptTask(void* pdata) {
     570:	defff204 	addi	sp,sp,-56
     574:	dfc00d15 	stw	ra,52(sp)
     578:	df000c15 	stw	fp,48(sp)
     57c:	df000c04 	addi	fp,sp,48
     580:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while (1) {
		char input[20];
		OSTimeDlyHMSM(0, 0, 0, 50);
     584:	0009883a 	mov	r4,zero
     588:	000b883a 	mov	r5,zero
     58c:	000d883a 	mov	r6,zero
     590:	01c00c84 	movi	r7,50
     594:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>
		sprintf(input, "%s", OSMboxPend(messageBox, 0, &err));
     598:	d0a8cc17 	ldw	r2,-23760(gp)
     59c:	1009883a 	mov	r4,r2
     5a0:	000b883a 	mov	r5,zero
     5a4:	e1bff404 	addi	r6,fp,-48
     5a8:	0015c4c0 	call	15c4c <OSMboxPend>
     5ac:	1007883a 	mov	r3,r2
     5b0:	e0bff444 	addi	r2,fp,-47
     5b4:	1009883a 	mov	r4,r2
     5b8:	180b883a 	mov	r5,r3
     5bc:	0001ef40 	call	1ef4 <strcpy>


		if (input[0] != 0) {
     5c0:	e0bff443 	ldbu	r2,-47(fp)
     5c4:	10803fcc 	andi	r2,r2,255
     5c8:	1080201c 	xori	r2,r2,128
     5cc:	10bfe004 	addi	r2,r2,-128
     5d0:	10008a26 	beq	r2,zero,7fc <cryptTask+0x28c>
				if ((input[0] >= 'a') && (input[0] <= 'z')) {
     5d4:	e0bff443 	ldbu	r2,-47(fp)
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	1080201c 	xori	r2,r2,128
     5e0:	10bfe004 	addi	r2,r2,-128
     5e4:	10801850 	cmplti	r2,r2,97
     5e8:	1000841e 	bne	r2,zero,7fc <cryptTask+0x28c>
     5ec:	e0bff443 	ldbu	r2,-47(fp)
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	1080201c 	xori	r2,r2,128
     5f8:	10bfe004 	addi	r2,r2,-128
     5fc:	10801ec8 	cmpgei	r2,r2,123
     600:	10007e1e 	bne	r2,zero,7fc <cryptTask+0x28c>
					printf("Test: %s\n", input);
     604:	e0bff444 	addi	r2,fp,-47
     608:	010000b4 	movhi	r4,2
     60c:	213a6804 	addi	r4,r4,-5728
     610:	100b883a 	mov	r5,r2
     614:	0001d500 	call	1d50 <printf>
					// continues after the rotors have rotated
					OSSemPost(sem_rotate);
     618:	d0a8d617 	ldw	r2,-23720(gp)
     61c:	1009883a 	mov	r4,r2
     620:	00185580 	call	18558 <OSSemPost>
					OSTimeDlyHMSM(0, 0, 0, 100);
     624:	0009883a 	mov	r4,zero
     628:	000b883a 	mov	r5,zero
     62c:	000d883a 	mov	r6,zero
     630:	01c01904 	movi	r7,100
     634:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>
					OSSemPend(sem_rotated, 0, &err);
     638:	d0a8ce17 	ldw	r2,-23752(gp)
     63c:	1009883a 	mov	r4,r2
     640:	000b883a 	mov	r5,zero
     644:	e1bff404 	addi	r6,fp,-48
     648:	00181840 	call	18184 <OSSemPend>

					char string[20];
					getLetter("getPluggedLetter", input[0]);
     64c:	e0bff443 	ldbu	r2,-47(fp)
     650:	10803fcc 	andi	r2,r2,255
     654:	1080201c 	xori	r2,r2,128
     658:	10bfe004 	addi	r2,r2,-128
     65c:	010000b4 	movhi	r4,2
     660:	213a6b04 	addi	r4,r4,-5716
     664:	100b883a 	mov	r5,r2
     668:	00005180 	call	518 <getLetter>
					//printf("Na plugboard: %s\n", command);

					getLetter("getLetter 1", command[0]);
     66c:	008000b4 	movhi	r2,2
     670:	108e4904 	addi	r2,r2,14628
     674:	10800003 	ldbu	r2,0(r2)
     678:	10803fcc 	andi	r2,r2,255
     67c:	1080201c 	xori	r2,r2,128
     680:	10bfe004 	addi	r2,r2,-128
     684:	010000b4 	movhi	r4,2
     688:	213a7004 	addi	r4,r4,-5696
     68c:	100b883a 	mov	r5,r2
     690:	00005180 	call	518 <getLetter>
					//printf("Na rotor een: %s\n", command);

					getLetter("getLetter 2", command[0]);
     694:	008000b4 	movhi	r2,2
     698:	108e4904 	addi	r2,r2,14628
     69c:	10800003 	ldbu	r2,0(r2)
     6a0:	10803fcc 	andi	r2,r2,255
     6a4:	1080201c 	xori	r2,r2,128
     6a8:	10bfe004 	addi	r2,r2,-128
     6ac:	010000b4 	movhi	r4,2
     6b0:	213a7304 	addi	r4,r4,-5684
     6b4:	100b883a 	mov	r5,r2
     6b8:	00005180 	call	518 <getLetter>
					//printf("Na rotor twee: %s\n", command);

					getLetter("getLetter 3", command[0]);
     6bc:	008000b4 	movhi	r2,2
     6c0:	108e4904 	addi	r2,r2,14628
     6c4:	10800003 	ldbu	r2,0(r2)
     6c8:	10803fcc 	andi	r2,r2,255
     6cc:	1080201c 	xori	r2,r2,128
     6d0:	10bfe004 	addi	r2,r2,-128
     6d4:	010000b4 	movhi	r4,2
     6d8:	213a7604 	addi	r4,r4,-5672
     6dc:	100b883a 	mov	r5,r2
     6e0:	00005180 	call	518 <getLetter>
					//printf("Na rotor drie: %s\n", command);

					getLetter("getLetter 4", command[0]);
     6e4:	008000b4 	movhi	r2,2
     6e8:	108e4904 	addi	r2,r2,14628
     6ec:	10800003 	ldbu	r2,0(r2)
     6f0:	10803fcc 	andi	r2,r2,255
     6f4:	1080201c 	xori	r2,r2,128
     6f8:	10bfe004 	addi	r2,r2,-128
     6fc:	010000b4 	movhi	r4,2
     700:	213a7904 	addi	r4,r4,-5660
     704:	100b883a 	mov	r5,r2
     708:	00005180 	call	518 <getLetter>
					//printf("Na rotor vier: %s\n", command);

					getLetter("getReflector ", command[0]);
     70c:	008000b4 	movhi	r2,2
     710:	108e4904 	addi	r2,r2,14628
     714:	10800003 	ldbu	r2,0(r2)
     718:	10803fcc 	andi	r2,r2,255
     71c:	1080201c 	xori	r2,r2,128
     720:	10bfe004 	addi	r2,r2,-128
     724:	010000b4 	movhi	r4,2
     728:	213a7c04 	addi	r4,r4,-5648
     72c:	100b883a 	mov	r5,r2
     730:	00005180 	call	518 <getLetter>
					//printf("Na reflector: %s\n", command);

					getLetter("getReverseLetter 4", command[0]);
     734:	008000b4 	movhi	r2,2
     738:	108e4904 	addi	r2,r2,14628
     73c:	10800003 	ldbu	r2,0(r2)
     740:	10803fcc 	andi	r2,r2,255
     744:	1080201c 	xori	r2,r2,128
     748:	10bfe004 	addi	r2,r2,-128
     74c:	010000b4 	movhi	r4,2
     750:	213a8004 	addi	r4,r4,-5632
     754:	100b883a 	mov	r5,r2
     758:	00005180 	call	518 <getLetter>
					//printf("Na reverse vier: %s\n", command);

					getLetter("getReverseLetter 3", command[0]);
     75c:	008000b4 	movhi	r2,2
     760:	108e4904 	addi	r2,r2,14628
     764:	10800003 	ldbu	r2,0(r2)
     768:	10803fcc 	andi	r2,r2,255
     76c:	1080201c 	xori	r2,r2,128
     770:	10bfe004 	addi	r2,r2,-128
     774:	010000b4 	movhi	r4,2
     778:	213a8504 	addi	r4,r4,-5612
     77c:	100b883a 	mov	r5,r2
     780:	00005180 	call	518 <getLetter>
					//printf("Na reverse drie: %s\n", command);

					getLetter("getReverseLetter 2", command[0]);
     784:	008000b4 	movhi	r2,2
     788:	108e4904 	addi	r2,r2,14628
     78c:	10800003 	ldbu	r2,0(r2)
     790:	10803fcc 	andi	r2,r2,255
     794:	1080201c 	xori	r2,r2,128
     798:	10bfe004 	addi	r2,r2,-128
     79c:	010000b4 	movhi	r4,2
     7a0:	213a8a04 	addi	r4,r4,-5592
     7a4:	100b883a 	mov	r5,r2
     7a8:	00005180 	call	518 <getLetter>
					//printf("Na reverse twee: %s\n", command);

					getLetter("getReverseLetter 1", command[0]);
     7ac:	008000b4 	movhi	r2,2
     7b0:	108e4904 	addi	r2,r2,14628
     7b4:	10800003 	ldbu	r2,0(r2)
     7b8:	10803fcc 	andi	r2,r2,255
     7bc:	1080201c 	xori	r2,r2,128
     7c0:	10bfe004 	addi	r2,r2,-128
     7c4:	010000b4 	movhi	r4,2
     7c8:	213a8f04 	addi	r4,r4,-5572
     7cc:	100b883a 	mov	r5,r2
     7d0:	00005180 	call	518 <getLetter>
					//printf("Na reverse een: %s\n", command);

					getLetter("getPluggedLetter ", command[0]);
     7d4:	008000b4 	movhi	r2,2
     7d8:	108e4904 	addi	r2,r2,14628
     7dc:	10800003 	ldbu	r2,0(r2)
     7e0:	10803fcc 	andi	r2,r2,255
     7e4:	1080201c 	xori	r2,r2,128
     7e8:	10bfe004 	addi	r2,r2,-128
     7ec:	010000b4 	movhi	r4,2
     7f0:	213a9404 	addi	r4,r4,-5552
     7f4:	100b883a 	mov	r5,r2
     7f8:	00005180 	call	518 <getLetter>
					//printf("Na laatste plugboard: %s\n", command);
				}
		}
	}
     7fc:	003f6106 	br	584 <__alt_mem_Flash_flash_data+0xf4000584>

00000800 <rotateTask>:
}

void rotateTask(void * pdata) {
     800:	defffa04 	addi	sp,sp,-24
     804:	dfc00515 	stw	ra,20(sp)
     808:	df000415 	stw	fp,16(sp)
     80c:	df000404 	addi	fp,sp,16
     810:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U rotateOne = 0;
     814:	e03ffc05 	stb	zero,-16(fp)
	INT8U rotateTwo = 0;
     818:	e03ffc45 	stb	zero,-15(fp)

	while (1) {
		OSSemPend(sem_rotate, 0, &err);
     81c:	d0e8d617 	ldw	r3,-23720(gp)
     820:	e0bffe04 	addi	r2,fp,-8
     824:	1809883a 	mov	r4,r3
     828:	000b883a 	mov	r5,zero
     82c:	100d883a 	mov	r6,r2
     830:	00181840 	call	18184 <OSSemPend>

		sendCommand("getTriggered 1/");
     834:	010000b4 	movhi	r4,2
     838:	213a9904 	addi	r4,r4,-5532
     83c:	000035c0 	call	35c <sendCommand>
		getCommand();
     840:	00003d80 	call	3d8 <getCommand>
		printf("COMMAND: %s/");
     844:	010000b4 	movhi	r4,2
     848:	213a9d04 	addi	r4,r4,-5516
     84c:	0001d500 	call	1d50 <printf>

		if (command[0] == '1') {
     850:	008000b4 	movhi	r2,2
     854:	108e4904 	addi	r2,r2,14628
     858:	10800003 	ldbu	r2,0(r2)
     85c:	10803fcc 	andi	r2,r2,255
     860:	1080201c 	xori	r2,r2,128
     864:	10bfe004 	addi	r2,r2,-128
     868:	10800c58 	cmpnei	r2,r2,49
     86c:	1000051e 	bne	r2,zero,884 <rotateTask+0x84>
			rotateOne = 1;
     870:	00800044 	movi	r2,1
     874:	e0bffc05 	stb	r2,-16(fp)
			printf("TRIGGERED ROTOR 2");
     878:	010000b4 	movhi	r4,2
     87c:	213aa104 	addi	r4,r4,-5500
     880:	0001d500 	call	1d50 <printf>
		}

		sendCommand("getTriggered 2/");
     884:	010000b4 	movhi	r4,2
     888:	213aa604 	addi	r4,r4,-5480
     88c:	000035c0 	call	35c <sendCommand>
		getCommand();
     890:	00003d80 	call	3d8 <getCommand>

		if (command[0] == '1') {
     894:	008000b4 	movhi	r2,2
     898:	108e4904 	addi	r2,r2,14628
     89c:	10800003 	ldbu	r2,0(r2)
     8a0:	10803fcc 	andi	r2,r2,255
     8a4:	1080201c 	xori	r2,r2,128
     8a8:	10bfe004 	addi	r2,r2,-128
     8ac:	10800c58 	cmpnei	r2,r2,49
     8b0:	1000021e 	bne	r2,zero,8bc <rotateTask+0xbc>
			rotateTwo = 1;
     8b4:	00800044 	movi	r2,1
     8b8:	e0bffc45 	stb	r2,-15(fp)
		}

		if (rotateOne) {
     8bc:	e0bffc03 	ldbu	r2,-16(fp)
     8c0:	10001526 	beq	r2,zero,918 <rotateTask+0x118>
			sendCommand("rotateForward 2/");
     8c4:	010000b4 	movhi	r4,2
     8c8:	213aaa04 	addi	r4,r4,-5464
     8cc:	000035c0 	call	35c <sendCommand>
			rotateOne = 0;
     8d0:	e03ffc05 	stb	zero,-16(fp)

			rotorStanden[2]++;
     8d4:	d0a00684 	addi	r2,gp,-32742
     8d8:	10800003 	ldbu	r2,0(r2)
     8dc:	10800044 	addi	r2,r2,1
     8e0:	1007883a 	mov	r3,r2
     8e4:	d0a00684 	addi	r2,gp,-32742
     8e8:	10c00005 	stb	r3,0(r2)

			if (rotorStanden[2] > 'z') {
     8ec:	d0a00684 	addi	r2,gp,-32742
     8f0:	10800003 	ldbu	r2,0(r2)
     8f4:	10803fcc 	andi	r2,r2,255
     8f8:	1080201c 	xori	r2,r2,128
     8fc:	10bfe004 	addi	r2,r2,-128
     900:	10801ed0 	cmplti	r2,r2,123
     904:	10001a1e 	bne	r2,zero,970 <rotateTask+0x170>
				rotorStanden[2] = 'a';
     908:	d0a00684 	addi	r2,gp,-32742
     90c:	00c01844 	movi	r3,97
     910:	10c00005 	stb	r3,0(r2)
     914:	00001606 	br	970 <rotateTask+0x170>
			}

		} else if (rotateTwo) {
     918:	e0bffc43 	ldbu	r2,-15(fp)
     91c:	10001426 	beq	r2,zero,970 <rotateTask+0x170>
			sendCommand("rotateForward 3/");
     920:	010000b4 	movhi	r4,2
     924:	213aaf04 	addi	r4,r4,-5444
     928:	000035c0 	call	35c <sendCommand>
			rotateTwo = 0;
     92c:	e03ffc45 	stb	zero,-15(fp)
			rotorStanden[1]++;
     930:	d0a00644 	addi	r2,gp,-32743
     934:	10800003 	ldbu	r2,0(r2)
     938:	10800044 	addi	r2,r2,1
     93c:	1007883a 	mov	r3,r2
     940:	d0a00644 	addi	r2,gp,-32743
     944:	10c00005 	stb	r3,0(r2)

			if (rotorStanden[1] > 'z') {
     948:	d0a00644 	addi	r2,gp,-32743
     94c:	10800003 	ldbu	r2,0(r2)
     950:	10803fcc 	andi	r2,r2,255
     954:	1080201c 	xori	r2,r2,128
     958:	10bfe004 	addi	r2,r2,-128
     95c:	10801ed0 	cmplti	r2,r2,123
     960:	1000031e 	bne	r2,zero,970 <rotateTask+0x170>
				rotorStanden[1] = 'a';
     964:	d0a00644 	addi	r2,gp,-32743
     968:	00c01844 	movi	r3,97
     96c:	10c00005 	stb	r3,0(r2)
			}
		}

		sendCommand("rotateForward 1/");
     970:	010000b4 	movhi	r4,2
     974:	213ab404 	addi	r4,r4,-5424
     978:	000035c0 	call	35c <sendCommand>
		rotorStanden[3]++;
     97c:	d0a006c4 	addi	r2,gp,-32741
     980:	10800003 	ldbu	r2,0(r2)
     984:	10800044 	addi	r2,r2,1
     988:	1007883a 	mov	r3,r2
     98c:	d0a006c4 	addi	r2,gp,-32741
     990:	10c00005 	stb	r3,0(r2)

		if (rotorStanden[3] > 'z') {
     994:	d0a006c4 	addi	r2,gp,-32741
     998:	10800003 	ldbu	r2,0(r2)
     99c:	10803fcc 	andi	r2,r2,255
     9a0:	1080201c 	xori	r2,r2,128
     9a4:	10bfe004 	addi	r2,r2,-128
     9a8:	10801ed0 	cmplti	r2,r2,123
     9ac:	1000031e 	bne	r2,zero,9bc <rotateTask+0x1bc>
			rotorStanden[3] = 'a';
     9b0:	d0a006c4 	addi	r2,gp,-32741
     9b4:	00c01844 	movi	r3,97
     9b8:	10c00005 	stb	r3,0(r2)
		}

		// Updates the rotor positions on the screen
		char string[2];
		int i;
		for (i = 3; i > 1; i--) {
     9bc:	008000c4 	movi	r2,3
     9c0:	e0bffd15 	stw	r2,-12(fp)
     9c4:	00001606 	br	a20 <rotateTask+0x220>
			sprintf(string, "%c", rotorStanden[i]);
     9c8:	e0fffd17 	ldw	r3,-12(fp)
     9cc:	d0a00604 	addi	r2,gp,-32744
     9d0:	1885883a 	add	r2,r3,r2
     9d4:	10800003 	ldbu	r2,0(r2)
     9d8:	10803fcc 	andi	r2,r2,255
     9dc:	1080201c 	xori	r2,r2,128
     9e0:	10bfe004 	addi	r2,r2,-128
     9e4:	e0fffe44 	addi	r3,fp,-7
     9e8:	1809883a 	mov	r4,r3
     9ec:	014000b4 	movhi	r5,2
     9f0:	297ab904 	addi	r5,r5,-5404
     9f4:	100d883a 	mov	r6,r2
     9f8:	0001de40 	call	1de4 <sprintf>
			printRotorStand(string, i + 1);
     9fc:	e0bffd17 	ldw	r2,-12(fp)
     a00:	10800044 	addi	r2,r2,1
     a04:	e0fffe44 	addi	r3,fp,-7
     a08:	1809883a 	mov	r4,r3
     a0c:	100b883a 	mov	r5,r2
     a10:	0001bb00 	call	1bb0 <printRotorStand>
		}

		// Updates the rotor positions on the screen
		char string[2];
		int i;
		for (i = 3; i > 1; i--) {
     a14:	e0bffd17 	ldw	r2,-12(fp)
     a18:	10bfffc4 	addi	r2,r2,-1
     a1c:	e0bffd15 	stw	r2,-12(fp)
     a20:	e0bffd17 	ldw	r2,-12(fp)
     a24:	10800088 	cmpgei	r2,r2,2
     a28:	103fe71e 	bne	r2,zero,9c8 <__alt_mem_Flash_flash_data+0xf40009c8>
			sprintf(string, "%c", rotorStanden[i]);
			printRotorStand(string, i + 1);
		}

		OSSemPost(sem_rotated);
     a2c:	d0a8ce17 	ldw	r2,-23752(gp)
     a30:	1009883a 	mov	r4,r2
     a34:	00185580 	call	18558 <OSSemPost>
	}
     a38:	003f7806 	br	81c <__alt_mem_Flash_flash_data+0xf400081c>

00000a3c <task1>:
}

void task1(void* pdata) {
     a3c:	defffd04 	addi	sp,sp,-12
     a40:	dfc00215 	stw	ra,8(sp)
     a44:	df000115 	stw	fp,4(sp)
     a48:	df000104 	addi	fp,sp,4
     a4c:	e13fff15 	stw	r4,-4(fp)

	while (1) {
		PS2();
     a50:	000187c0 	call	187c <PS2>
		strTemp[0] = getKey();
     a54:	00018f00 	call	18f0 <getKey>
     a58:	d0a8cd05 	stb	r2,-23756(gp)
		strTemp[1] = '\0';
     a5c:	d0a8cd44 	addi	r2,gp,-23755
     a60:	10000005 	stb	zero,0(r2)
		OSTimeDlyHMSM(0, 0, 0, 100);
     a64:	0009883a 	mov	r4,zero
     a68:	000b883a 	mov	r5,zero
     a6c:	000d883a 	mov	r6,zero
     a70:	01c01904 	movi	r7,100
     a74:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>
	}
     a78:	003ff506 	br	a50 <__alt_mem_Flash_flash_data+0xf4000a50>

00000a7c <task2>:
}

void task2(void * pdata) {
     a7c:	defffd04 	addi	sp,sp,-12
     a80:	dfc00215 	stw	ra,8(sp)
     a84:	df000115 	stw	fp,4(sp)
     a88:	df000104 	addi	fp,sp,4
     a8c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	while (1) {
		//OSSemPend(sem_enigma, 0, &err);

		if (strTemp[0] == '\0') {
     a90:	d0a8cd03 	ldbu	r2,-23756(gp)
     a94:	10803fcc 	andi	r2,r2,255
     a98:	1080201c 	xori	r2,r2,128
     a9c:	10bfe004 	addi	r2,r2,-128
     aa0:	1000181e 	bne	r2,zero,b04 <task2+0x88>
			select(strTemp[0]);
     aa4:	d0a8cd03 	ldbu	r2,-23756(gp)
     aa8:	10803fcc 	andi	r2,r2,255
     aac:	1080201c 	xori	r2,r2,128
     ab0:	10bfe004 	addi	r2,r2,-128
     ab4:	1009883a 	mov	r4,r2
     ab8:	00014200 	call	1420 <select>
			printRinginstelling(d, rotorNummer);
     abc:	d0a00317 	ldw	r2,-32756(gp)
     ac0:	d128cd84 	addi	r4,gp,-23754
     ac4:	100b883a 	mov	r5,r2
     ac8:	0001ac00 	call	1ac0 <printRinginstelling>
			printRotorStand(e, rotorNummer);
     acc:	d0a00317 	ldw	r2,-32756(gp)
     ad0:	d128d504 	addi	r4,gp,-23724
     ad4:	100b883a 	mov	r5,r2
     ad8:	0001bb00 	call	1bb0 <printRotorStand>
			d[0] = '\0';
     adc:	d028cd85 	stb	zero,-23754(gp)
			e[0] = '\0';
     ae0:	d028d505 	stb	zero,-23724(gp)

			OSTimeDlyHMSM(0, 0, 0, 100);
     ae4:	0009883a 	mov	r4,zero
     ae8:	000b883a 	mov	r5,zero
     aec:	000d883a 	mov	r6,zero
     af0:	01c01904 	movi	r7,100
     af4:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>
			OSSemPost(sem_enigma);
     af8:	d0a8d217 	ldw	r2,-23736(gp)
     afc:	1009883a 	mov	r4,r2
     b00:	00185580 	call	18558 <OSSemPost>
		}
		OSTimeDlyHMSM(0, 0, 0, 50);
     b04:	0009883a 	mov	r4,zero
     b08:	000b883a 	mov	r5,zero
     b0c:	000d883a 	mov	r6,zero
     b10:	01c00c84 	movi	r7,50
     b14:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>

	}
     b18:	003fdd06 	br	a90 <__alt_mem_Flash_flash_data+0xf4000a90>

00000b1c <task3>:
}

void task3(void *pdata) {
     b1c:	defff404 	addi	sp,sp,-48
     b20:	dfc00b15 	stw	ra,44(sp)
     b24:	df000a15 	stw	fp,40(sp)
     b28:	dc000915 	stw	r16,36(sp)
     b2c:	df000a04 	addi	fp,sp,40
     b30:	e13ffe15 	stw	r4,-8(fp)
	INT8U err;

	while (1) {
		OSSemPend(sem_enigma, 0, &err);
     b34:	d0a8d217 	ldw	r2,-23736(gp)
     b38:	1009883a 	mov	r4,r2
     b3c:	000b883a 	mov	r5,zero
     b40:	e1bff604 	addi	r6,fp,-40
     b44:	00181840 	call	18184 <OSSemPend>
		if (strTemp[0] < '1' || strTemp[0] > '5') {
     b48:	d0a8cd03 	ldbu	r2,-23756(gp)
     b4c:	10803fcc 	andi	r2,r2,255
     b50:	1080201c 	xori	r2,r2,128
     b54:	10bfe004 	addi	r2,r2,-128
     b58:	10800c50 	cmplti	r2,r2,49
     b5c:	1000061e 	bne	r2,zero,b78 <task3+0x5c>
     b60:	d0a8cd03 	ldbu	r2,-23756(gp)
     b64:	10803fcc 	andi	r2,r2,255
     b68:	1080201c 	xori	r2,r2,128
     b6c:	10bfe004 	addi	r2,r2,-128
     b70:	10800d90 	cmplti	r2,r2,54
     b74:	10001a1e 	bne	r2,zero,be0 <task3+0xc4>
			char string[30];
			sprintf(string, "%s", strTemp);
     b78:	e0bff644 	addi	r2,fp,-39
     b7c:	1009883a 	mov	r4,r2
     b80:	d168cd04 	addi	r5,gp,-23756
     b84:	0001ef40 	call	1ef4 <strcpy>
			err = OSQPost(ControlBlock, string);
     b88:	d0e8cf17 	ldw	r3,-23748(gp)
     b8c:	e0bff644 	addi	r2,fp,-39
     b90:	1809883a 	mov	r4,r3
     b94:	100b883a 	mov	r5,r2
     b98:	00176800 	call	17680 <OSQPost>
     b9c:	e0bff605 	stb	r2,-40(fp)
			err = OSMboxPost(messageBox, OSQPend(ControlBlock, 0, &err));
     ba0:	d428cc17 	ldw	r16,-23760(gp)
     ba4:	d0a8cf17 	ldw	r2,-23748(gp)
     ba8:	1009883a 	mov	r4,r2
     bac:	000b883a 	mov	r5,zero
     bb0:	e1bff604 	addi	r6,fp,-40
     bb4:	00172180 	call	17218 <OSQPend>
     bb8:	8009883a 	mov	r4,r16
     bbc:	100b883a 	mov	r5,r2
     bc0:	001605c0 	call	1605c <OSMboxPost>
     bc4:	e0bff605 	stb	r2,-40(fp)
			typen(strTemp[0]);
     bc8:	d0a8cd03 	ldbu	r2,-23756(gp)
     bcc:	10803fcc 	andi	r2,r2,255
     bd0:	1080201c 	xori	r2,r2,128
     bd4:	10bfe004 	addi	r2,r2,-128
     bd8:	1009883a 	mov	r4,r2
     bdc:	0000f700 	call	f70 <typen>
		}

		//OSSemPost(sem_enigma);
		OSTimeDlyHMSM(0, 0, 0, 100);
     be0:	0009883a 	mov	r4,zero
     be4:	000b883a 	mov	r5,zero
     be8:	000d883a 	mov	r6,zero
     bec:	01c01904 	movi	r7,100
     bf0:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>
	}
     bf4:	003fcf06 	br	b34 <__alt_mem_Flash_flash_data+0xf4000b34>

00000bf8 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void) {
     bf8:	defffd04 	addi	sp,sp,-12
     bfc:	dfc00215 	stw	ra,8(sp)
     c00:	df000115 	stw	fp,4(sp)
     c04:	df000104 	addi	fp,sp,4

	OSInit();								// Initialize uCOS-II.
     c08:	00127240 	call	12724 <OSInit>

	sem_hardware = OSSemCreate(1);
     c0c:	01000044 	movi	r4,1
     c10:	0017e1c0 	call	17e1c <OSSemCreate>
     c14:	d0a8d415 	stw	r2,-23728(gp)
	sem_rotate = OSSemCreate(0);
     c18:	0009883a 	mov	r4,zero
     c1c:	0017e1c0 	call	17e1c <OSSemCreate>
     c20:	d0a8d615 	stw	r2,-23720(gp)
	sem_rotated = OSSemCreate(0);
     c24:	0009883a 	mov	r4,zero
     c28:	0017e1c0 	call	17e1c <OSSemCreate>
     c2c:	d0a8ce15 	stw	r2,-23752(gp)
	sem_enigma = OSSemCreate(1);
     c30:	01000044 	movi	r4,1
     c34:	0017e1c0 	call	17e1c <OSSemCreate>
     c38:	d0a8d215 	stw	r2,-23736(gp)

	ControlBlock = OSQCreate(&messages, 40);
     c3c:	010000b4 	movhi	r4,2
     c40:	211e8004 	addi	r4,r4,31232
     c44:	01400a04 	movi	r5,40
     c48:	0016c9c0 	call	16c9c <OSQCreate>
     c4c:	d0a8cf15 	stw	r2,-23748(gp)
	messageBox = OSMboxCreate(NULL);
     c50:	0009883a 	mov	r4,zero
     c54:	00158e80 	call	158e8 <OSMboxCreate>
     c58:	d0a8cc15 	stw	r2,-23760(gp)

	VGA_box(0, 0, 160, 240, 0);
     c5c:	d8000015 	stw	zero,0(sp)
     c60:	0009883a 	mov	r4,zero
     c64:	000b883a 	mov	r5,zero
     c68:	01802804 	movi	r6,160
     c6c:	01c03c04 	movi	r7,240
     c70:	0000e400 	call	e40 <VGA_box>
	VGA_box(161, 0, 320, 240, 0);
     c74:	d8000015 	stw	zero,0(sp)
     c78:	01002844 	movi	r4,161
     c7c:	000b883a 	mov	r5,zero
     c80:	01805004 	movi	r6,320
     c84:	01c03c04 	movi	r7,240
     c88:	0000e400 	call	e40 <VGA_box>

	VGA_box(20, 200, 60, 220, 0x8410);
     c8c:	00a10404 	movi	r2,-31728
     c90:	d8800015 	stw	r2,0(sp)
     c94:	01000504 	movi	r4,20
     c98:	01403204 	movi	r5,200
     c9c:	01800f04 	movi	r6,60
     ca0:	01c03704 	movi	r7,220
     ca4:	0000e400 	call	e40 <VGA_box>
	VGA_box(100, 180, 140, 220, 0x8410);
     ca8:	00a10404 	movi	r2,-31728
     cac:	d8800015 	stw	r2,0(sp)
     cb0:	01001904 	movi	r4,100
     cb4:	01402d04 	movi	r5,180
     cb8:	01802304 	movi	r6,140
     cbc:	01c03704 	movi	r7,220
     cc0:	0000e400 	call	e40 <VGA_box>
	VGA_box(180, 180, 220, 220, 0x8410);
     cc4:	00a10404 	movi	r2,-31728
     cc8:	d8800015 	stw	r2,0(sp)
     ccc:	01002d04 	movi	r4,180
     cd0:	01402d04 	movi	r5,180
     cd4:	01803704 	movi	r6,220
     cd8:	01c03704 	movi	r7,220
     cdc:	0000e400 	call	e40 <VGA_box>
	VGA_box(260, 180, 300, 220, 0x8410);
     ce0:	00a10404 	movi	r2,-31728
     ce4:	d8800015 	stw	r2,0(sp)
     ce8:	01004104 	movi	r4,260
     cec:	01402d04 	movi	r5,180
     cf0:	01804b04 	movi	r6,300
     cf4:	01c03704 	movi	r7,220
     cf8:	0000e400 	call	e40 <VGA_box>
	VGA_box(20, 180, 60, 200, 0xF800);
     cfc:	00be0004 	movi	r2,-2048
     d00:	d8800015 	stw	r2,0(sp)
     d04:	01000504 	movi	r4,20
     d08:	01402d04 	movi	r5,180
     d0c:	01800f04 	movi	r6,60
     d10:	01c03204 	movi	r7,200
     d14:	0000e400 	call	e40 <VGA_box>

	printRinginstelling("1", 1);
     d18:	010000b4 	movhi	r4,2
     d1c:	213aba04 	addi	r4,r4,-5400
     d20:	01400044 	movi	r5,1
     d24:	0001ac00 	call	1ac0 <printRinginstelling>
	printRinginstelling("1", 2);
     d28:	010000b4 	movhi	r4,2
     d2c:	213aba04 	addi	r4,r4,-5400
     d30:	01400084 	movi	r5,2
     d34:	0001ac00 	call	1ac0 <printRinginstelling>
	printRinginstelling("1", 3);
     d38:	010000b4 	movhi	r4,2
     d3c:	213aba04 	addi	r4,r4,-5400
     d40:	014000c4 	movi	r5,3
     d44:	0001ac00 	call	1ac0 <printRinginstelling>
	printRinginstelling("1", 4);
     d48:	010000b4 	movhi	r4,2
     d4c:	213aba04 	addi	r4,r4,-5400
     d50:	01400104 	movi	r5,4
     d54:	0001ac00 	call	1ac0 <printRinginstelling>

	printRotorStand("a", 1);
     d58:	010000b4 	movhi	r4,2
     d5c:	213abb04 	addi	r4,r4,-5396
     d60:	01400044 	movi	r5,1
     d64:	0001bb00 	call	1bb0 <printRotorStand>
	printRotorStand("a", 2);
     d68:	010000b4 	movhi	r4,2
     d6c:	213abb04 	addi	r4,r4,-5396
     d70:	01400084 	movi	r5,2
     d74:	0001bb00 	call	1bb0 <printRotorStand>
	printRotorStand("a", 3);
     d78:	010000b4 	movhi	r4,2
     d7c:	213abb04 	addi	r4,r4,-5396
     d80:	014000c4 	movi	r5,3
     d84:	0001bb00 	call	1bb0 <printRotorStand>
	printRotorStand("a", 4);
     d88:	010000b4 	movhi	r4,2
     d8c:	213abb04 	addi	r4,r4,-5396
     d90:	01400104 	movi	r5,4
     d94:	0001bb00 	call	1bb0 <printRotorStand>

	OSTaskCreate(task1, (void*) 0, &task1_stk[TASK_STACKSIZE - 1],
     d98:	01000034 	movhi	r4,0
     d9c:	21028f04 	addi	r4,r4,2620
     da0:	000b883a 	mov	r5,zero
     da4:	018000b4 	movhi	r6,2
     da8:	31965c04 	addi	r6,r6,22896
     dac:	01c00284 	movi	r7,10
     db0:	0018db40 	call	18db4 <OSTaskCreate>
	TASK1_PRIORITY);
	OSTaskCreate(task2, (void*) 0, &task2_stk[TASK_STACKSIZE - 1],
     db4:	01000034 	movhi	r4,0
     db8:	21029f04 	addi	r4,r4,2684
     dbc:	000b883a 	mov	r5,zero
     dc0:	018000f4 	movhi	r6,3
     dc4:	31a6a704 	addi	r6,r6,-25956
     dc8:	01c002c4 	movi	r7,11
     dcc:	0018db40 	call	18db4 <OSTaskCreate>
	TASK2_PRIORITY);
	OSTaskCreate(task3, (void*) 0, &task3_stk[TASK_STACKSIZE - 1],
     dd0:	01000034 	movhi	r4,0
     dd4:	2102c704 	addi	r4,r4,2844
     dd8:	000b883a 	mov	r5,zero
     ddc:	018000f4 	movhi	r6,3
     de0:	31aea704 	addi	r6,r6,-17764
     de4:	01c00204 	movi	r7,8
     de8:	0018db40 	call	18db4 <OSTaskCreate>
	TASK3_PRIORITY);
	OSTaskCreate(cryptTask, (void*) 0, &crypt_stk[TASK_STACKSIZE - 1], CRYPT_PRIORITY);
     dec:	01000034 	movhi	r4,0
     df0:	21015c04 	addi	r4,r4,1392
     df4:	000b883a 	mov	r5,zero
     df8:	018000f4 	movhi	r6,3
     dfc:	31b6b104 	addi	r6,r6,-9532
     e00:	01c00184 	movi	r7,6
     e04:	0018db40 	call	18db4 <OSTaskCreate>
	OSTaskCreate(rotateTask, (void*) 0, &rotateTask_stk[TASK_STACKSIZE - 1], ROTATETASK_PRIORITY);
     e08:	01000034 	movhi	r4,0
     e0c:	21020004 	addi	r4,r4,2048
     e10:	000b883a 	mov	r5,zero
     e14:	018000b4 	movhi	r6,2
     e18:	319e5c04 	addi	r6,r6,31088
     e1c:	01c001c4 	movi	r7,7
     e20:	0018db40 	call	18db4 <OSTaskCreate>

	OSStart();
     e24:	0012a480 	call	12a48 <OSStart>
	return 0;
     e28:	0005883a 	mov	r2,zero
}
     e2c:	e037883a 	mov	sp,fp
     e30:	dfc00117 	ldw	ra,4(sp)
     e34:	df000017 	ldw	fp,0(sp)
     e38:	dec00204 	addi	sp,sp,8
     e3c:	f800283a 	ret

00000e40 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) { //320x240
     e40:	defff704 	addi	sp,sp,-36
     e44:	df000815 	stw	fp,32(sp)
     e48:	df000804 	addi	fp,sp,32
     e4c:	e13ffb15 	stw	r4,-20(fp)
     e50:	e17ffc15 	stw	r5,-16(fp)
     e54:	e1bffd15 	stw	r6,-12(fp)
     e58:	e1fffe15 	stw	r7,-8(fp)
     e5c:	e0800117 	ldw	r2,4(fp)
     e60:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     e64:	e0bffc17 	ldw	r2,-16(fp)
     e68:	e0bff815 	stw	r2,-32(fp)
     e6c:	00001706 	br	ecc <VGA_box+0x8c>
		col = x1;
     e70:	e0bffb17 	ldw	r2,-20(fp)
     e74:	e0bff915 	stw	r2,-28(fp)
		while (col <= x2) {
     e78:	00000e06 	br	eb4 <VGA_box+0x74>
			offset = (row << 9) + col;
     e7c:	e0bff817 	ldw	r2,-32(fp)
     e80:	1006927a 	slli	r3,r2,9
     e84:	e0bff917 	ldw	r2,-28(fp)
     e88:	1885883a 	add	r2,r3,r2
     e8c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     e90:	d0e00217 	ldw	r3,-32760(gp)
     e94:	e0bffa17 	ldw	r2,-24(fp)
     e98:	1085883a 	add	r2,r2,r2
     e9c:	1885883a 	add	r2,r3,r2
     ea0:	e0ffff0b 	ldhu	r3,-4(fp)
     ea4:	10c0000d 	sth	r3,0(r2)
			++col;
     ea8:	e0bff917 	ldw	r2,-28(fp)
     eac:	10800044 	addi	r2,r2,1
     eb0:	e0bff915 	stw	r2,-28(fp)
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
		col = x1;
		while (col <= x2) {
     eb4:	e0bff917 	ldw	r2,-28(fp)
     eb8:	e0fffd17 	ldw	r3,-12(fp)
     ebc:	18bfef0e 	bge	r3,r2,e7c <__alt_mem_Flash_flash_data+0xf4000e7c>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) { //320x240
	int offset, row, col;
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     ec0:	e0bff817 	ldw	r2,-32(fp)
     ec4:	10800044 	addi	r2,r2,1
     ec8:	e0bff815 	stw	r2,-32(fp)
     ecc:	e0bff817 	ldw	r2,-32(fp)
     ed0:	e0fffe17 	ldw	r3,-8(fp)
     ed4:	18bfe60e 	bge	r3,r2,e70 <__alt_mem_Flash_flash_data+0xf4000e70>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     ed8:	e037883a 	mov	sp,fp
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00104 	addi	sp,sp,4
     ee4:	f800283a 	ret

00000ee8 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr) {
     ee8:	defffb04 	addi	sp,sp,-20
     eec:	df000415 	stw	fp,16(sp)
     ef0:	df000404 	addi	fp,sp,16
     ef4:	e13ffd15 	stw	r4,-12(fp)
     ef8:	e17ffe15 	stw	r5,-8(fp)
     efc:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     f00:	e0bffe17 	ldw	r2,-8(fp)
     f04:	100691fa 	slli	r3,r2,7
     f08:	e0bffd17 	ldw	r2,-12(fp)
     f0c:	1885883a 	add	r2,r3,r2
     f10:	e0bffc15 	stw	r2,-16(fp)
	while (*(text_ptr)) {
     f14:	00000c06 	br	f48 <VGA_text+0x60>

		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     f18:	d0e00117 	ldw	r3,-32764(gp)
     f1c:	e0bffc17 	ldw	r2,-16(fp)
     f20:	1885883a 	add	r2,r3,r2
     f24:	e0ffff17 	ldw	r3,-4(fp)
     f28:	18c00003 	ldbu	r3,0(r3)
     f2c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     f30:	e0bfff17 	ldw	r2,-4(fp)
     f34:	10800044 	addi	r2,r2,1
     f38:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     f3c:	e0bffc17 	ldw	r2,-16(fp)
     f40:	10800044 	addi	r2,r2,1
     f44:	e0bffc15 	stw	r2,-16(fp)
void VGA_text(int x, int y, char * text_ptr) {
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while (*(text_ptr)) {
     f48:	e0bfff17 	ldw	r2,-4(fp)
     f4c:	10800003 	ldbu	r2,0(r2)
     f50:	10803fcc 	andi	r2,r2,255
     f54:	1080201c 	xori	r2,r2,128
     f58:	10bfe004 	addi	r2,r2,-128
     f5c:	103fee1e 	bne	r2,zero,f18 <__alt_mem_Flash_flash_data+0xf4000f18>

		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     f60:	e037883a 	mov	sp,fp
     f64:	df000017 	ldw	fp,0(sp)
     f68:	dec00104 	addi	sp,sp,4
     f6c:	f800283a 	ret

00000f70 <typen>:

void typen(char c) {
     f70:	defffd04 	addi	sp,sp,-12
     f74:	dfc00215 	stw	ra,8(sp)
     f78:	df000115 	stw	fp,4(sp)
     f7c:	df000104 	addi	fp,sp,4
     f80:	2005883a 	mov	r2,r4
     f84:	e0bfff05 	stb	r2,-4(fp)
	strTemp[0] = c;
     f88:	e0bfff03 	ldbu	r2,-4(fp)
     f8c:	d0a8cd05 	stb	r2,-23756(gp)
	strTemp[1] = '\0';
     f90:	d0a8cd44 	addi	r2,gp,-23755
     f94:	10000005 	stb	zero,0(r2)

	if (count <= 5) {
     f98:	d0a00417 	ldw	r2,-32752(gp)
     f9c:	10800188 	cmpgei	r2,r2,6
     fa0:	1000031e 	bne	r2,zero,fb0 <typen+0x40>
		count = 5;
     fa4:	00800144 	movi	r2,5
     fa8:	d0a00415 	stw	r2,-32752(gp)
     fac:	00001406 	br	1000 <typen+0x90>
	} else if (count >= 35) {
     fb0:	d0a00417 	ldw	r2,-32752(gp)
     fb4:	108008d0 	cmplti	r2,r2,35
     fb8:	1000061e 	bne	r2,zero,fd4 <typen+0x64>
		count = 5;
     fbc:	00800144 	movi	r2,5
     fc0:	d0a00415 	stw	r2,-32752(gp)
		y++;
     fc4:	d0a00817 	ldw	r2,-32736(gp)
     fc8:	10800044 	addi	r2,r2,1
     fcc:	d0a00815 	stw	r2,-32736(gp)
     fd0:	00000b06 	br	1000 <typen+0x90>
	} else if (y <= 5) {
     fd4:	d0a00817 	ldw	r2,-32736(gp)
     fd8:	10800188 	cmpgei	r2,r2,6
     fdc:	1000031e 	bne	r2,zero,fec <typen+0x7c>
		y = 5;
     fe0:	00800144 	movi	r2,5
     fe4:	d0a00815 	stw	r2,-32736(gp)
     fe8:	00000506 	br	1000 <typen+0x90>
	} else if (y >= 40) {
     fec:	d0a00817 	ldw	r2,-32736(gp)
     ff0:	10800a10 	cmplti	r2,r2,40
     ff4:	1000021e 	bne	r2,zero,1000 <typen+0x90>
		y = 40;
     ff8:	00800a04 	movi	r2,40
     ffc:	d0a00815 	stw	r2,-32736(gp)
	}

	if (strTemp[0] == ESC) {
    1000:	d0a8cd03 	ldbu	r2,-23756(gp)
    1004:	10803fcc 	andi	r2,r2,255
    1008:	1080201c 	xori	r2,r2,128
    100c:	10bfe004 	addi	r2,r2,-128
    1010:	10800e18 	cmpnei	r2,r2,56
    1014:	1000061e 	bne	r2,zero,1030 <typen+0xc0>
		clearScreen();
    1018:	00018240 	call	1824 <clearScreen>
		count = 5;
    101c:	00800144 	movi	r2,5
    1020:	d0a00415 	stw	r2,-32752(gp)
		y = 5;
    1024:	00800144 	movi	r2,5
    1028:	d0a00815 	stw	r2,-32736(gp)
    102c:	00006006 	br	11b0 <typen+0x240>
	} else if (strTemp[0] == BKSP) {
    1030:	d0a8cd03 	ldbu	r2,-23756(gp)
    1034:	10803fcc 	andi	r2,r2,255
    1038:	1080201c 	xori	r2,r2,128
    103c:	10bfe004 	addi	r2,r2,-128
    1040:	10800dd8 	cmpnei	r2,r2,55
    1044:	10001e1e 	bne	r2,zero,10c0 <typen+0x150>
		if (count == 5 && y > 5) {
    1048:	d0a00417 	ldw	r2,-32752(gp)
    104c:	10800158 	cmpnei	r2,r2,5
    1050:	1000081e 	bne	r2,zero,1074 <typen+0x104>
    1054:	d0a00817 	ldw	r2,-32736(gp)
    1058:	10800190 	cmplti	r2,r2,6
    105c:	1000051e 	bne	r2,zero,1074 <typen+0x104>
			y--;
    1060:	d0a00817 	ldw	r2,-32736(gp)
    1064:	10bfffc4 	addi	r2,r2,-1
    1068:	d0a00815 	stw	r2,-32736(gp)
			count = 35;
    106c:	008008c4 	movi	r2,35
    1070:	d0a00415 	stw	r2,-32752(gp)
		}
		count--;
    1074:	d0a00417 	ldw	r2,-32752(gp)
    1078:	10bfffc4 	addi	r2,r2,-1
    107c:	d0a00415 	stw	r2,-32752(gp)
		VGA_text(count, y, " ");
    1080:	d0e00417 	ldw	r3,-32752(gp)
    1084:	d0a00817 	ldw	r2,-32736(gp)
    1088:	1809883a 	mov	r4,r3
    108c:	100b883a 	mov	r5,r2
    1090:	018000b4 	movhi	r6,2
    1094:	31babc04 	addi	r6,r6,-5392
    1098:	0000ee80 	call	ee8 <VGA_text>
		VGA_text(count + 40, y, " ");
    109c:	d0a00417 	ldw	r2,-32752(gp)
    10a0:	10c00a04 	addi	r3,r2,40
    10a4:	d0a00817 	ldw	r2,-32736(gp)
    10a8:	1809883a 	mov	r4,r3
    10ac:	100b883a 	mov	r5,r2
    10b0:	018000b4 	movhi	r6,2
    10b4:	31babc04 	addi	r6,r6,-5392
    10b8:	0000ee80 	call	ee8 <VGA_text>
    10bc:	00003c06 	br	11b0 <typen+0x240>
	} else if (strTemp[0] == SPACE) {
    10c0:	d0a8cd03 	ldbu	r2,-23756(gp)
    10c4:	10803fcc 	andi	r2,r2,255
    10c8:	1080201c 	xori	r2,r2,128
    10cc:	10bfe004 	addi	r2,r2,-128
    10d0:	10800d98 	cmpnei	r2,r2,54
    10d4:	1000131e 	bne	r2,zero,1124 <typen+0x1b4>
		VGA_text(count, y, " ");
    10d8:	d0e00417 	ldw	r3,-32752(gp)
    10dc:	d0a00817 	ldw	r2,-32736(gp)
    10e0:	1809883a 	mov	r4,r3
    10e4:	100b883a 	mov	r5,r2
    10e8:	018000b4 	movhi	r6,2
    10ec:	31babc04 	addi	r6,r6,-5392
    10f0:	0000ee80 	call	ee8 <VGA_text>
		VGA_text(count + 40, y, " ");
    10f4:	d0a00417 	ldw	r2,-32752(gp)
    10f8:	10c00a04 	addi	r3,r2,40
    10fc:	d0a00817 	ldw	r2,-32736(gp)
    1100:	1809883a 	mov	r4,r3
    1104:	100b883a 	mov	r5,r2
    1108:	018000b4 	movhi	r6,2
    110c:	31babc04 	addi	r6,r6,-5392
    1110:	0000ee80 	call	ee8 <VGA_text>
		count++;
    1114:	d0a00417 	ldw	r2,-32752(gp)
    1118:	10800044 	addi	r2,r2,1
    111c:	d0a00415 	stw	r2,-32752(gp)
    1120:	00002306 	br	11b0 <typen+0x240>
	} else if (strTemp[0] == ENTER) {
    1124:	d0a8cd03 	ldbu	r2,-23756(gp)
    1128:	10803fcc 	andi	r2,r2,255
    112c:	1080201c 	xori	r2,r2,128
    1130:	10bfe004 	addi	r2,r2,-128
    1134:	10800e58 	cmpnei	r2,r2,57
    1138:	1000061e 	bne	r2,zero,1154 <typen+0x1e4>
		count = 5;
    113c:	00800144 	movi	r2,5
    1140:	d0a00415 	stw	r2,-32752(gp)
		y++;
    1144:	d0a00817 	ldw	r2,-32736(gp)
    1148:	10800044 	addi	r2,r2,1
    114c:	d0a00815 	stw	r2,-32736(gp)
    1150:	00001706 	br	11b0 <typen+0x240>
	} else {
		if (strTemp[0] != 0) {
    1154:	d0a8cd03 	ldbu	r2,-23756(gp)
    1158:	10803fcc 	andi	r2,r2,255
    115c:	1080201c 	xori	r2,r2,128
    1160:	10bfe004 	addi	r2,r2,-128
    1164:	10001226 	beq	r2,zero,11b0 <typen+0x240>
			VGA_text(count, y, strTemp);
    1168:	d0e00417 	ldw	r3,-32752(gp)
    116c:	d0a00817 	ldw	r2,-32736(gp)
    1170:	1809883a 	mov	r4,r3
    1174:	100b883a 	mov	r5,r2
    1178:	d1a8cd04 	addi	r6,gp,-23756
    117c:	0000ee80 	call	ee8 <VGA_text>
			VGA_text(count + 40, y, command);
    1180:	d0a00417 	ldw	r2,-32752(gp)
    1184:	10c00a04 	addi	r3,r2,40
    1188:	d0a00817 	ldw	r2,-32736(gp)
    118c:	1809883a 	mov	r4,r3
    1190:	100b883a 	mov	r5,r2
    1194:	018000b4 	movhi	r6,2
    1198:	318e4904 	addi	r6,r6,14628
    119c:	0000ee80 	call	ee8 <VGA_text>
			strTemp[0] = 0;
    11a0:	d028cd05 	stb	zero,-23756(gp)
			count++;
    11a4:	d0a00417 	ldw	r2,-32752(gp)
    11a8:	10800044 	addi	r2,r2,1
    11ac:	d0a00415 	stw	r2,-32752(gp)
		}
	}
}
    11b0:	e037883a 	mov	sp,fp
    11b4:	dfc00117 	ldw	ra,4(sp)
    11b8:	df000017 	ldw	fp,0(sp)
    11bc:	dec00204 	addi	sp,sp,8
    11c0:	f800283a 	ret

000011c4 <changeRotor>:

void changeRotor(int rotorRij, int nummerRotor, char knop) {
    11c4:	defffc04 	addi	sp,sp,-16
    11c8:	df000315 	stw	fp,12(sp)
    11cc:	df000304 	addi	fp,sp,12
    11d0:	e13ffd15 	stw	r4,-12(fp)
    11d4:	e17ffe15 	stw	r5,-8(fp)
    11d8:	3005883a 	mov	r2,r6
    11dc:	e0bfff05 	stb	r2,-4(fp)
	if (knop == UP) {
    11e0:	e0bfff07 	ldb	r2,-4(fp)
    11e4:	10800c58 	cmpnei	r2,r2,49
    11e8:	1000441e 	bne	r2,zero,12fc <changeRotor+0x138>
		if (rotorRij == 2) {
    11ec:	e0bffd17 	ldw	r2,-12(fp)
    11f0:	10800098 	cmpnei	r2,r2,2
    11f4:	10001b1e 	bne	r2,zero,1264 <changeRotor+0xa0>
			rotorStanden[nummerRotor - 1]++;
    11f8:	e0bffe17 	ldw	r2,-8(fp)
    11fc:	10bfffc4 	addi	r2,r2,-1
    1200:	d0e00604 	addi	r3,gp,-32744
    1204:	10c7883a 	add	r3,r2,r3
    1208:	18c00003 	ldbu	r3,0(r3)
    120c:	18c00044 	addi	r3,r3,1
    1210:	1809883a 	mov	r4,r3
    1214:	d0e00604 	addi	r3,gp,-32744
    1218:	10c5883a 	add	r2,r2,r3
    121c:	11000005 	stb	r4,0(r2)
			if (rotorStanden[nummerRotor - 1] > 'z') {
    1220:	e0bffe17 	ldw	r2,-8(fp)
    1224:	10ffffc4 	addi	r3,r2,-1
    1228:	d0a00604 	addi	r2,gp,-32744
    122c:	1885883a 	add	r2,r3,r2
    1230:	10800003 	ldbu	r2,0(r2)
    1234:	10803fcc 	andi	r2,r2,255
    1238:	1080201c 	xori	r2,r2,128
    123c:	10bfe004 	addi	r2,r2,-128
    1240:	10801ed0 	cmplti	r2,r2,123
    1244:	1000721e 	bne	r2,zero,1410 <changeRotor+0x24c>
				rotorStanden[nummerRotor - 1] = 'a';
    1248:	e0bffe17 	ldw	r2,-8(fp)
    124c:	10ffffc4 	addi	r3,r2,-1
    1250:	d0a00604 	addi	r2,gp,-32744
    1254:	1885883a 	add	r2,r3,r2
    1258:	00c01844 	movi	r3,97
    125c:	10c00005 	stb	r3,0(r2)
    1260:	00006b06 	br	1410 <changeRotor+0x24c>
			}
		} else if (rotorRij == 1) {
    1264:	e0bffd17 	ldw	r2,-12(fp)
    1268:	10800058 	cmpnei	r2,r2,1
    126c:	1000681e 	bne	r2,zero,1410 <changeRotor+0x24c>
			ringInstellingen[nummerRotor - 1]++;
    1270:	e0bffe17 	ldw	r2,-8(fp)
    1274:	10bfffc4 	addi	r2,r2,-1
    1278:	00c000b4 	movhi	r3,2
    127c:	18fcf804 	addi	r3,r3,-3104
    1280:	1089883a 	add	r4,r2,r2
    1284:	2109883a 	add	r4,r4,r4
    1288:	1907883a 	add	r3,r3,r4
    128c:	18c00017 	ldw	r3,0(r3)
    1290:	19000044 	addi	r4,r3,1
    1294:	00c000b4 	movhi	r3,2
    1298:	18fcf804 	addi	r3,r3,-3104
    129c:	1085883a 	add	r2,r2,r2
    12a0:	1085883a 	add	r2,r2,r2
    12a4:	1885883a 	add	r2,r3,r2
    12a8:	11000015 	stw	r4,0(r2)
			if (ringInstellingen[nummerRotor - 1] > 26) {
    12ac:	e0bffe17 	ldw	r2,-8(fp)
    12b0:	10ffffc4 	addi	r3,r2,-1
    12b4:	008000b4 	movhi	r2,2
    12b8:	10bcf804 	addi	r2,r2,-3104
    12bc:	18c7883a 	add	r3,r3,r3
    12c0:	18c7883a 	add	r3,r3,r3
    12c4:	10c5883a 	add	r2,r2,r3
    12c8:	10800017 	ldw	r2,0(r2)
    12cc:	108006d0 	cmplti	r2,r2,27
    12d0:	10004f1e 	bne	r2,zero,1410 <changeRotor+0x24c>
				ringInstellingen[nummerRotor - 1] = 1;
    12d4:	e0bffe17 	ldw	r2,-8(fp)
    12d8:	10ffffc4 	addi	r3,r2,-1
    12dc:	008000b4 	movhi	r2,2
    12e0:	10bcf804 	addi	r2,r2,-3104
    12e4:	18c7883a 	add	r3,r3,r3
    12e8:	18c7883a 	add	r3,r3,r3
    12ec:	10c5883a 	add	r2,r2,r3
    12f0:	00c00044 	movi	r3,1
    12f4:	10c00015 	stw	r3,0(r2)
    12f8:	00004506 	br	1410 <changeRotor+0x24c>
			}
		}
	} else if (knop == DOWN) {
    12fc:	e0bfff07 	ldb	r2,-4(fp)
    1300:	10800d18 	cmpnei	r2,r2,52
    1304:	1000421e 	bne	r2,zero,1410 <changeRotor+0x24c>
		if (rotorRij == 2) {
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	10800098 	cmpnei	r2,r2,2
    1310:	10001b1e 	bne	r2,zero,1380 <changeRotor+0x1bc>
			rotorStanden[nummerRotor - 1]--;
    1314:	e0bffe17 	ldw	r2,-8(fp)
    1318:	10bfffc4 	addi	r2,r2,-1
    131c:	d0e00604 	addi	r3,gp,-32744
    1320:	10c7883a 	add	r3,r2,r3
    1324:	18c00003 	ldbu	r3,0(r3)
    1328:	18ffffc4 	addi	r3,r3,-1
    132c:	1809883a 	mov	r4,r3
    1330:	d0e00604 	addi	r3,gp,-32744
    1334:	10c5883a 	add	r2,r2,r3
    1338:	11000005 	stb	r4,0(r2)
			if (rotorStanden[nummerRotor - 1] < 'a') {
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10ffffc4 	addi	r3,r2,-1
    1344:	d0a00604 	addi	r2,gp,-32744
    1348:	1885883a 	add	r2,r3,r2
    134c:	10800003 	ldbu	r2,0(r2)
    1350:	10803fcc 	andi	r2,r2,255
    1354:	1080201c 	xori	r2,r2,128
    1358:	10bfe004 	addi	r2,r2,-128
    135c:	10801848 	cmpgei	r2,r2,97
    1360:	10002b1e 	bne	r2,zero,1410 <changeRotor+0x24c>
				rotorStanden[nummerRotor - 1] = 'z';
    1364:	e0bffe17 	ldw	r2,-8(fp)
    1368:	10ffffc4 	addi	r3,r2,-1
    136c:	d0a00604 	addi	r2,gp,-32744
    1370:	1885883a 	add	r2,r3,r2
    1374:	00c01e84 	movi	r3,122
    1378:	10c00005 	stb	r3,0(r2)
    137c:	00002406 	br	1410 <changeRotor+0x24c>
			}
		} else if (rotorRij == 1) {
    1380:	e0bffd17 	ldw	r2,-12(fp)
    1384:	10800058 	cmpnei	r2,r2,1
    1388:	1000211e 	bne	r2,zero,1410 <changeRotor+0x24c>
			ringInstellingen[nummerRotor - 1]--;
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10bfffc4 	addi	r2,r2,-1
    1394:	00c000b4 	movhi	r3,2
    1398:	18fcf804 	addi	r3,r3,-3104
    139c:	1089883a 	add	r4,r2,r2
    13a0:	2109883a 	add	r4,r4,r4
    13a4:	1907883a 	add	r3,r3,r4
    13a8:	18c00017 	ldw	r3,0(r3)
    13ac:	193fffc4 	addi	r4,r3,-1
    13b0:	00c000b4 	movhi	r3,2
    13b4:	18fcf804 	addi	r3,r3,-3104
    13b8:	1085883a 	add	r2,r2,r2
    13bc:	1085883a 	add	r2,r2,r2
    13c0:	1885883a 	add	r2,r3,r2
    13c4:	11000015 	stw	r4,0(r2)
			if (ringInstellingen[nummerRotor - 1] < 1) {
    13c8:	e0bffe17 	ldw	r2,-8(fp)
    13cc:	10ffffc4 	addi	r3,r2,-1
    13d0:	008000b4 	movhi	r2,2
    13d4:	10bcf804 	addi	r2,r2,-3104
    13d8:	18c7883a 	add	r3,r3,r3
    13dc:	18c7883a 	add	r3,r3,r3
    13e0:	10c5883a 	add	r2,r2,r3
    13e4:	10800017 	ldw	r2,0(r2)
    13e8:	00800916 	blt	zero,r2,1410 <changeRotor+0x24c>
				ringInstellingen[nummerRotor - 1] = 26;
    13ec:	e0bffe17 	ldw	r2,-8(fp)
    13f0:	10ffffc4 	addi	r3,r2,-1
    13f4:	008000b4 	movhi	r2,2
    13f8:	10bcf804 	addi	r2,r2,-3104
    13fc:	18c7883a 	add	r3,r3,r3
    1400:	18c7883a 	add	r3,r3,r3
    1404:	10c5883a 	add	r2,r2,r3
    1408:	00c00684 	movi	r3,26
    140c:	10c00015 	stw	r3,0(r2)
			}
		}
	}
}
    1410:	e037883a 	mov	sp,fp
    1414:	df000017 	ldw	fp,0(sp)
    1418:	dec00104 	addi	sp,sp,4
    141c:	f800283a 	ret

00001420 <select>:

void select(char c) {
    1420:	defffc04 	addi	sp,sp,-16
    1424:	dfc00315 	stw	ra,12(sp)
    1428:	df000215 	stw	fp,8(sp)
    142c:	df000204 	addi	fp,sp,8
    1430:	2005883a 	mov	r2,r4
    1434:	e0bfff05 	stb	r2,-4(fp)
	arrowTemp[0] = c;
    1438:	e0bfff03 	ldbu	r2,-4(fp)
    143c:	d0a8d305 	stb	r2,-23732(gp)
	arrowTemp[1] = '\0';
    1440:	d0a8d344 	addi	r2,gp,-23731
    1444:	10000005 	stb	zero,0(r2)

	if (rotorNummer > 4) {
    1448:	d0a00317 	ldw	r2,-32756(gp)
    144c:	10800150 	cmplti	r2,r2,5
    1450:	1000021e 	bne	r2,zero,145c <select+0x3c>
		rotorNummer = 4;
    1454:	00800104 	movi	r2,4
    1458:	d0a00315 	stw	r2,-32756(gp)
	}

	if (rotorNummer < 1) {
    145c:	d0a00317 	ldw	r2,-32756(gp)
    1460:	00800216 	blt	zero,r2,146c <select+0x4c>
		rotorNummer = 1;
    1464:	00800044 	movi	r2,1
    1468:	d0a00315 	stw	r2,-32756(gp)
	}

	if (arrowTemp[0] == TAB) {
    146c:	d0a8d303 	ldbu	r2,-23732(gp)
    1470:	10803fcc 	andi	r2,r2,255
    1474:	1080201c 	xori	r2,r2,128
    1478:	10bfe004 	addi	r2,r2,-128
    147c:	10800d58 	cmpnei	r2,r2,53
    1480:	1000291e 	bne	r2,zero,1528 <select+0x108>
		setX();
    1484:	000176c0 	call	176c <setX>
		if (rij == 1) {
    1488:	d0a00517 	ldw	r2,-32748(gp)
    148c:	10800058 	cmpnei	r2,r2,1
    1490:	1000131e 	bne	r2,zero,14e0 <select+0xc0>
			rij = 2;
    1494:	00800084 	movi	r2,2
    1498:	d0a00515 	stw	r2,-32748(gp)
			VGA_box(x1, 180, x2, 200, 0x8410);
    149c:	d128d117 	ldw	r4,-23740(gp)
    14a0:	d0e8ca17 	ldw	r3,-23768(gp)
    14a4:	00a10404 	movi	r2,-31728
    14a8:	d8800015 	stw	r2,0(sp)
    14ac:	01402d04 	movi	r5,180
    14b0:	180d883a 	mov	r6,r3
    14b4:	01c03204 	movi	r7,200
    14b8:	0000e400 	call	e40 <VGA_box>
			VGA_box(x1, 200, x2, 220, 0xF800);
    14bc:	d128d117 	ldw	r4,-23740(gp)
    14c0:	d0e8ca17 	ldw	r3,-23768(gp)
    14c4:	00be0004 	movi	r2,-2048
    14c8:	d8800015 	stw	r2,0(sp)
    14cc:	01403204 	movi	r5,200
    14d0:	180d883a 	mov	r6,r3
    14d4:	01c03704 	movi	r7,220
    14d8:	0000e400 	call	e40 <VGA_box>
    14dc:	00001206 	br	1528 <select+0x108>
		} else {
			rij = 1;
    14e0:	00800044 	movi	r2,1
    14e4:	d0a00515 	stw	r2,-32748(gp)
			VGA_box(x1, 180, x2, 200, 0xF800);
    14e8:	d128d117 	ldw	r4,-23740(gp)
    14ec:	d0e8ca17 	ldw	r3,-23768(gp)
    14f0:	00be0004 	movi	r2,-2048
    14f4:	d8800015 	stw	r2,0(sp)
    14f8:	01402d04 	movi	r5,180
    14fc:	180d883a 	mov	r6,r3
    1500:	01c03204 	movi	r7,200
    1504:	0000e400 	call	e40 <VGA_box>
			VGA_box(x1, 200, x2, 220, 0x8410);
    1508:	d128d117 	ldw	r4,-23740(gp)
    150c:	d0e8ca17 	ldw	r3,-23768(gp)
    1510:	00a10404 	movi	r2,-31728
    1514:	d8800015 	stw	r2,0(sp)
    1518:	01403204 	movi	r5,200
    151c:	180d883a 	mov	r6,r3
    1520:	01c03704 	movi	r7,220
    1524:	0000e400 	call	e40 <VGA_box>
		}
	}
	if (arrowTemp[0] == UP) {
    1528:	d0a8d303 	ldbu	r2,-23732(gp)
    152c:	10803fcc 	andi	r2,r2,255
    1530:	1080201c 	xori	r2,r2,128
    1534:	10bfe004 	addi	r2,r2,-128
    1538:	10800c58 	cmpnei	r2,r2,49
    153c:	1000071e 	bne	r2,zero,155c <select+0x13c>
		changeRotor(rij, rotorNummer, UP);
    1540:	d0e00517 	ldw	r3,-32748(gp)
    1544:	d0a00317 	ldw	r2,-32756(gp)
    1548:	1809883a 	mov	r4,r3
    154c:	100b883a 	mov	r5,r2
    1550:	01800c44 	movi	r6,49
    1554:	00011c40 	call	11c4 <changeRotor>
    1558:	00007f06 	br	1758 <select+0x338>
	} else if (arrowTemp[0] == DOWN) {
    155c:	d0a8d303 	ldbu	r2,-23732(gp)
    1560:	10803fcc 	andi	r2,r2,255
    1564:	1080201c 	xori	r2,r2,128
    1568:	10bfe004 	addi	r2,r2,-128
    156c:	10800d18 	cmpnei	r2,r2,52
    1570:	1000071e 	bne	r2,zero,1590 <select+0x170>
		changeRotor(rij, rotorNummer, DOWN);
    1574:	d0e00517 	ldw	r3,-32748(gp)
    1578:	d0a00317 	ldw	r2,-32756(gp)
    157c:	1809883a 	mov	r4,r3
    1580:	100b883a 	mov	r5,r2
    1584:	01800d04 	movi	r6,52
    1588:	00011c40 	call	11c4 <changeRotor>
    158c:	00007206 	br	1758 <select+0x338>
	} else if (arrowTemp[0] == LEFT) {
    1590:	d0a8d303 	ldbu	r2,-23732(gp)
    1594:	10803fcc 	andi	r2,r2,255
    1598:	1080201c 	xori	r2,r2,128
    159c:	10bfe004 	addi	r2,r2,-128
    15a0:	10800cd8 	cmpnei	r2,r2,51
    15a4:	1000321e 	bne	r2,zero,1670 <select+0x250>
		if (rotorNummer < 1) {
    15a8:	d0a00317 	ldw	r2,-32756(gp)
    15ac:	00800316 	blt	zero,r2,15bc <select+0x19c>
			rotorNummer = 1;
    15b0:	00800044 	movi	r2,1
    15b4:	d0a00315 	stw	r2,-32756(gp)
    15b8:	00006706 	br	1758 <select+0x338>
		} else if (rotorNummer >= 1) {
    15bc:	d0a00317 	ldw	r2,-32756(gp)
    15c0:	0080650e 	bge	zero,r2,1758 <select+0x338>
			rotorNummer--;
    15c4:	d0a00317 	ldw	r2,-32756(gp)
    15c8:	10bfffc4 	addi	r2,r2,-1
    15cc:	d0a00315 	stw	r2,-32756(gp)
			if (rotorNummer >= 1) {
    15d0:	d0a00317 	ldw	r2,-32756(gp)
    15d4:	0080600e 	bge	zero,r2,1758 <select+0x338>
				setX();
    15d8:	000176c0 	call	176c <setX>
				if (rij == 1) {
    15dc:	d0a00517 	ldw	r2,-32748(gp)
    15e0:	10800058 	cmpnei	r2,r2,1
    15e4:	1000111e 	bne	r2,zero,162c <select+0x20c>
					VGA_box(x1, 180, x2, 200, 0xF800);
    15e8:	d128d117 	ldw	r4,-23740(gp)
    15ec:	d0e8ca17 	ldw	r3,-23768(gp)
    15f0:	00be0004 	movi	r2,-2048
    15f4:	d8800015 	stw	r2,0(sp)
    15f8:	01402d04 	movi	r5,180
    15fc:	180d883a 	mov	r6,r3
    1600:	01c03204 	movi	r7,200
    1604:	0000e400 	call	e40 <VGA_box>
					VGA_box(x3, 180, x4, 200, 0x8410);
    1608:	d128d017 	ldw	r4,-23744(gp)
    160c:	d0e8cb17 	ldw	r3,-23764(gp)
    1610:	00a10404 	movi	r2,-31728
    1614:	d8800015 	stw	r2,0(sp)
    1618:	01402d04 	movi	r5,180
    161c:	180d883a 	mov	r6,r3
    1620:	01c03204 	movi	r7,200
    1624:	0000e400 	call	e40 <VGA_box>
    1628:	00004b06 	br	1758 <select+0x338>
				} else {
					VGA_box(x1, 200, x2, 220, 0xF800);
    162c:	d128d117 	ldw	r4,-23740(gp)
    1630:	d0e8ca17 	ldw	r3,-23768(gp)
    1634:	00be0004 	movi	r2,-2048
    1638:	d8800015 	stw	r2,0(sp)
    163c:	01403204 	movi	r5,200
    1640:	180d883a 	mov	r6,r3
    1644:	01c03704 	movi	r7,220
    1648:	0000e400 	call	e40 <VGA_box>
					VGA_box(x3, 200, x4, 220, 0x8410);
    164c:	d128d017 	ldw	r4,-23744(gp)
    1650:	d0e8cb17 	ldw	r3,-23764(gp)
    1654:	00a10404 	movi	r2,-31728
    1658:	d8800015 	stw	r2,0(sp)
    165c:	01403204 	movi	r5,200
    1660:	180d883a 	mov	r6,r3
    1664:	01c03704 	movi	r7,220
    1668:	0000e400 	call	e40 <VGA_box>
    166c:	00003a06 	br	1758 <select+0x338>
				}
			}
		}
	} else if (arrowTemp[0] == RIGHT) {
    1670:	d0a8d303 	ldbu	r2,-23732(gp)
    1674:	10803fcc 	andi	r2,r2,255
    1678:	1080201c 	xori	r2,r2,128
    167c:	10bfe004 	addi	r2,r2,-128
    1680:	10800c98 	cmpnei	r2,r2,50
    1684:	1000341e 	bne	r2,zero,1758 <select+0x338>
		if (rotorNummer > 4) {
    1688:	d0a00317 	ldw	r2,-32756(gp)
    168c:	10800150 	cmplti	r2,r2,5
    1690:	1000031e 	bne	r2,zero,16a0 <select+0x280>
			rotorNummer = 4;
    1694:	00800104 	movi	r2,4
    1698:	d0a00315 	stw	r2,-32756(gp)
    169c:	00002e06 	br	1758 <select+0x338>
		} else if (rotorNummer <= 4) {
    16a0:	d0a00317 	ldw	r2,-32756(gp)
    16a4:	10800148 	cmpgei	r2,r2,5
    16a8:	10002b1e 	bne	r2,zero,1758 <select+0x338>
			rotorNummer++;
    16ac:	d0a00317 	ldw	r2,-32756(gp)
    16b0:	10800044 	addi	r2,r2,1
    16b4:	d0a00315 	stw	r2,-32756(gp)
			if (rotorNummer < 5) {
    16b8:	d0a00317 	ldw	r2,-32756(gp)
    16bc:	10800148 	cmpgei	r2,r2,5
    16c0:	1000251e 	bne	r2,zero,1758 <select+0x338>
				setX();
    16c4:	000176c0 	call	176c <setX>
				if (rij == 1) {
    16c8:	d0a00517 	ldw	r2,-32748(gp)
    16cc:	10800058 	cmpnei	r2,r2,1
    16d0:	1000111e 	bne	r2,zero,1718 <select+0x2f8>
					VGA_box(x5, 180, x6, 200, 0x8410);
    16d4:	d128c817 	ldw	r4,-23776(gp)
    16d8:	d0e8c317 	ldw	r3,-23796(gp)
    16dc:	00a10404 	movi	r2,-31728
    16e0:	d8800015 	stw	r2,0(sp)
    16e4:	01402d04 	movi	r5,180
    16e8:	180d883a 	mov	r6,r3
    16ec:	01c03204 	movi	r7,200
    16f0:	0000e400 	call	e40 <VGA_box>
					VGA_box(x1, 180, x2, 200, 0xF800);
    16f4:	d128d117 	ldw	r4,-23740(gp)
    16f8:	d0e8ca17 	ldw	r3,-23768(gp)
    16fc:	00be0004 	movi	r2,-2048
    1700:	d8800015 	stw	r2,0(sp)
    1704:	01402d04 	movi	r5,180
    1708:	180d883a 	mov	r6,r3
    170c:	01c03204 	movi	r7,200
    1710:	0000e400 	call	e40 <VGA_box>
    1714:	00001006 	br	1758 <select+0x338>
				} else {
					VGA_box(x5, 200, x6, 220, 0x8410);
    1718:	d128c817 	ldw	r4,-23776(gp)
    171c:	d0e8c317 	ldw	r3,-23796(gp)
    1720:	00a10404 	movi	r2,-31728
    1724:	d8800015 	stw	r2,0(sp)
    1728:	01403204 	movi	r5,200
    172c:	180d883a 	mov	r6,r3
    1730:	01c03704 	movi	r7,220
    1734:	0000e400 	call	e40 <VGA_box>
					VGA_box(x1, 200, x2, 220, 0xF800);
    1738:	d128d117 	ldw	r4,-23740(gp)
    173c:	d0e8ca17 	ldw	r3,-23768(gp)
    1740:	00be0004 	movi	r2,-2048
    1744:	d8800015 	stw	r2,0(sp)
    1748:	01403204 	movi	r5,200
    174c:	180d883a 	mov	r6,r3
    1750:	01c03704 	movi	r7,220
    1754:	0000e400 	call	e40 <VGA_box>
				}
			}
		}
	}
}
    1758:	e037883a 	mov	sp,fp
    175c:	dfc00117 	ldw	ra,4(sp)
    1760:	df000017 	ldw	fp,0(sp)
    1764:	dec00204 	addi	sp,sp,8
    1768:	f800283a 	ret

0000176c <setX>:

void setX() {
    176c:	deffff04 	addi	sp,sp,-4
    1770:	df000015 	stw	fp,0(sp)
    1774:	d839883a 	mov	fp,sp
	x1 = (80 * rotorNummer) - 60;
    1778:	d0a00317 	ldw	r2,-32756(gp)
    177c:	10801424 	muli	r2,r2,80
    1780:	10bff104 	addi	r2,r2,-60
    1784:	d0a8d115 	stw	r2,-23740(gp)
	x2 = (40 * rotorNummer) + 20 + (40 * (rotorNummer - 1));
    1788:	d0a00317 	ldw	r2,-32756(gp)
    178c:	10800a24 	muli	r2,r2,40
    1790:	10c00504 	addi	r3,r2,20
    1794:	d0a00317 	ldw	r2,-32756(gp)
    1798:	10bfffc4 	addi	r2,r2,-1
    179c:	10800a24 	muli	r2,r2,40
    17a0:	1885883a 	add	r2,r3,r2
    17a4:	d0a8ca15 	stw	r2,-23768(gp)

	x3 = (80 * (rotorNummer + 1)) - 60;
    17a8:	d0a00317 	ldw	r2,-32756(gp)
    17ac:	10800044 	addi	r2,r2,1
    17b0:	10801424 	muli	r2,r2,80
    17b4:	10bff104 	addi	r2,r2,-60
    17b8:	d0a8d015 	stw	r2,-23744(gp)
	x4 = (40 * (rotorNummer + 1)) + 20 + (40 * rotorNummer);
    17bc:	d0a00317 	ldw	r2,-32756(gp)
    17c0:	10800044 	addi	r2,r2,1
    17c4:	10800a24 	muli	r2,r2,40
    17c8:	10c00504 	addi	r3,r2,20
    17cc:	d0a00317 	ldw	r2,-32756(gp)
    17d0:	10800a24 	muli	r2,r2,40
    17d4:	1885883a 	add	r2,r3,r2
    17d8:	d0a8cb15 	stw	r2,-23764(gp)

	x5 = (80 * (rotorNummer - 1)) - 60;
    17dc:	d0a00317 	ldw	r2,-32756(gp)
    17e0:	10bfffc4 	addi	r2,r2,-1
    17e4:	10801424 	muli	r2,r2,80
    17e8:	10bff104 	addi	r2,r2,-60
    17ec:	d0a8c815 	stw	r2,-23776(gp)
	x6 = (40 * (rotorNummer - 1)) + 20 + (40 * (rotorNummer - 2));
    17f0:	d0a00317 	ldw	r2,-32756(gp)
    17f4:	10bfffc4 	addi	r2,r2,-1
    17f8:	10800a24 	muli	r2,r2,40
    17fc:	10c00504 	addi	r3,r2,20
    1800:	d0a00317 	ldw	r2,-32756(gp)
    1804:	10bfff84 	addi	r2,r2,-2
    1808:	10800a24 	muli	r2,r2,40
    180c:	1885883a 	add	r2,r3,r2
    1810:	d0a8c315 	stw	r2,-23796(gp)
}
    1814:	e037883a 	mov	sp,fp
    1818:	df000017 	ldw	fp,0(sp)
    181c:	dec00104 	addi	sp,sp,4
    1820:	f800283a 	ret

00001824 <clearScreen>:

void clearScreen() {
    1824:	defffd04 	addi	sp,sp,-12
    1828:	dfc00215 	stw	ra,8(sp)
    182c:	df000115 	stw	fp,4(sp)
    1830:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i <= 44; i++) {
    1834:	e03fff15 	stw	zero,-4(fp)
    1838:	00000806 	br	185c <clearScreen+0x38>
		VGA_text(0, i,
    183c:	0009883a 	mov	r4,zero
    1840:	e17fff17 	ldw	r5,-4(fp)
    1844:	018000b4 	movhi	r6,2
    1848:	31babd04 	addi	r6,r6,-5388
    184c:	0000ee80 	call	ee8 <VGA_text>
	x6 = (40 * (rotorNummer - 1)) + 20 + (40 * (rotorNummer - 2));
}

void clearScreen() {
	int i;
	for (i = 0; i <= 44; i++) {
    1850:	e0bfff17 	ldw	r2,-4(fp)
    1854:	10800044 	addi	r2,r2,1
    1858:	e0bfff15 	stw	r2,-4(fp)
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	10800b50 	cmplti	r2,r2,45
    1864:	103ff51e 	bne	r2,zero,183c <__alt_mem_Flash_flash_data+0xf400183c>
		VGA_text(0, i,
				"                                                                                                        ");
	}
}
    1868:	e037883a 	mov	sp,fp
    186c:	dfc00117 	ldw	ra,4(sp)
    1870:	df000017 	ldw	fp,0(sp)
    1874:	dec00204 	addi	sp,sp,8
    1878:	f800283a 	ret

0000187c <PS2>:

void PS2() {
    187c:	defffe04 	addi	sp,sp,-8
    1880:	dfc00115 	stw	ra,4(sp)
    1884:	df000015 	stw	fp,0(sp)
    1888:	d839883a 	mov	fp,sp
	PS2_data = *(PS2_ptr);	// read the Data register in the PS/2 port
    188c:	d0a00017 	ldw	r2,-32768(gp)
    1890:	10800017 	ldw	r2,0(r2)
    1894:	d0a8c715 	stw	r2,-23780(gp)
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;	// extract the RAVAIL field
    1898:	d0a8c717 	ldw	r2,-23780(gp)
    189c:	1004d43a 	srli	r2,r2,16
    18a0:	d0a8c215 	stw	r2,-23800(gp)
	if (RAVAIL > 0) {
    18a4:	d0a8c217 	ldw	r2,-23800(gp)
    18a8:	00800c0e 	bge	zero,r2,18dc <PS2+0x60>

		byte1 = PS2_data & 0xFF;
    18ac:	d0a8c717 	ldw	r2,-23780(gp)
    18b0:	10803fcc 	andi	r2,r2,255
    18b4:	d0a8c515 	stw	r2,-23788(gp)
		*PS2_ptr &= 0x00000000;
    18b8:	d0a00017 	ldw	r2,-32768(gp)
    18bc:	10800017 	ldw	r2,0(r2)
    18c0:	d0a00017 	ldw	r2,-32768(gp)
    18c4:	10000015 	stw	zero,0(r2)

		OSTimeDlyHMSM(0, 0, 0, 10);
    18c8:	0009883a 	mov	r4,zero
    18cc:	000b883a 	mov	r5,zero
    18d0:	000d883a 	mov	r6,zero
    18d4:	01c00284 	movi	r7,10
    18d8:	001a2b00 	call	1a2b0 <OSTimeDlyHMSM>

	}
}
    18dc:	e037883a 	mov	sp,fp
    18e0:	dfc00117 	ldw	ra,4(sp)
    18e4:	df000017 	ldw	fp,0(sp)
    18e8:	dec00204 	addi	sp,sp,8
    18ec:	f800283a 	ret

000018f0 <getKey>:

char getKey() {
    18f0:	defffd04 	addi	sp,sp,-12
    18f4:	dfc00215 	stw	ra,8(sp)
    18f8:	df000115 	stw	fp,4(sp)
    18fc:	df000104 	addi	fp,sp,4
	if (byte1 != BREAKCODE && byte1 != 0xE0) {//checks if the received scancode is a BREAKCODE indicator, 0xF0
    1900:	d0a8c517 	ldw	r2,-23788(gp)
    1904:	10803c20 	cmpeqi	r2,r2,240
    1908:	10000b1e 	bne	r2,zero,1938 <getKey+0x48>
    190c:	d0a8c517 	ldw	r2,-23788(gp)
    1910:	10803820 	cmpeqi	r2,r2,224
    1914:	1000081e 	bne	r2,zero,1938 <getKey+0x48>
		translate_make_code(KB_ASCII_MAKE_CODE, (char *) byte1, &ascii);//if not, translates it to ascii
    1918:	d0a8c517 	ldw	r2,-23788(gp)
    191c:	10803fcc 	andi	r2,r2,255
    1920:	01000044 	movi	r4,1
    1924:	100b883a 	mov	r5,r2
    1928:	018000f4 	movhi	r6,3
    192c:	31aea804 	addi	r6,r6,-17760
    1930:	001d3100 	call	1d310 <translate_make_code>
		byte1 = 0;
    1934:	d028c515 	stw	zero,-23788(gp)
	}

	char tempo = ascii[0];
    1938:	008000f4 	movhi	r2,3
    193c:	10aea804 	addi	r2,r2,-17760
    1940:	10800017 	ldw	r2,0(r2)
    1944:	e0bfff05 	stb	r2,-4(fp)

	if (strcmp(ascii, "KP 8") == 0) {
    1948:	010000f4 	movhi	r4,3
    194c:	212ea804 	addi	r4,r4,-17760
    1950:	014000b4 	movhi	r5,2
    1954:	297ad804 	addi	r5,r5,-5280
    1958:	0001e500 	call	1e50 <strcmp>
    195c:	1000021e 	bne	r2,zero,1968 <getKey+0x78>
		return UP;
    1960:	00800c44 	movi	r2,49
    1964:	00005106 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 2") == 0) {
    1968:	010000f4 	movhi	r4,3
    196c:	212ea804 	addi	r4,r4,-17760
    1970:	014000b4 	movhi	r5,2
    1974:	297ada04 	addi	r5,r5,-5272
    1978:	0001e500 	call	1e50 <strcmp>
    197c:	1000021e 	bne	r2,zero,1988 <getKey+0x98>
		return DOWN;
    1980:	00800d04 	movi	r2,52
    1984:	00004906 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 6") == 0) {
    1988:	010000f4 	movhi	r4,3
    198c:	212ea804 	addi	r4,r4,-17760
    1990:	014000b4 	movhi	r5,2
    1994:	297adc04 	addi	r5,r5,-5264
    1998:	0001e500 	call	1e50 <strcmp>
    199c:	1000021e 	bne	r2,zero,19a8 <getKey+0xb8>
		return RIGHT;
    19a0:	00800c84 	movi	r2,50
    19a4:	00004106 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 4") == 0) {
    19a8:	010000f4 	movhi	r4,3
    19ac:	212ea804 	addi	r4,r4,-17760
    19b0:	014000b4 	movhi	r5,2
    19b4:	297ade04 	addi	r5,r5,-5256
    19b8:	0001e500 	call	1e50 <strcmp>
    19bc:	1000021e 	bne	r2,zero,19c8 <getKey+0xd8>
		return LEFT;
    19c0:	00800cc4 	movi	r2,51
    19c4:	00003906 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "ESC") == 0) {
    19c8:	010000f4 	movhi	r4,3
    19cc:	212ea804 	addi	r4,r4,-17760
    19d0:	014000b4 	movhi	r5,2
    19d4:	297ae004 	addi	r5,r5,-5248
    19d8:	0001e500 	call	1e50 <strcmp>
    19dc:	1000021e 	bne	r2,zero,19e8 <getKey+0xf8>
		return ESC;
    19e0:	00800e04 	movi	r2,56
    19e4:	00003106 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "BKSP") == 0) {
    19e8:	010000f4 	movhi	r4,3
    19ec:	212ea804 	addi	r4,r4,-17760
    19f0:	014000b4 	movhi	r5,2
    19f4:	297ae104 	addi	r5,r5,-5244
    19f8:	0001e500 	call	1e50 <strcmp>
    19fc:	1000021e 	bne	r2,zero,1a08 <getKey+0x118>
		return BKSP;
    1a00:	00800dc4 	movi	r2,55
    1a04:	00002906 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "SPACE") == 0) {
    1a08:	010000f4 	movhi	r4,3
    1a0c:	212ea804 	addi	r4,r4,-17760
    1a10:	014000b4 	movhi	r5,2
    1a14:	297ae304 	addi	r5,r5,-5236
    1a18:	0001e500 	call	1e50 <strcmp>
    1a1c:	1000021e 	bne	r2,zero,1a28 <getKey+0x138>
		return SPACE;
    1a20:	00800d84 	movi	r2,54
    1a24:	00002106 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "ENTER") == 0) {
    1a28:	010000f4 	movhi	r4,3
    1a2c:	212ea804 	addi	r4,r4,-17760
    1a30:	014000b4 	movhi	r5,2
    1a34:	297ae504 	addi	r5,r5,-5228
    1a38:	0001e500 	call	1e50 <strcmp>
    1a3c:	1000021e 	bne	r2,zero,1a48 <getKey+0x158>
		return ENTER;
    1a40:	00800e44 	movi	r2,57
    1a44:	00001906 	br	1aac <getKey+0x1bc>
	} else if (strcmp(ascii, "TAB") == 0) {
    1a48:	010000f4 	movhi	r4,3
    1a4c:	212ea804 	addi	r4,r4,-17760
    1a50:	014000b4 	movhi	r5,2
    1a54:	297ae704 	addi	r5,r5,-5220
    1a58:	0001e500 	call	1e50 <strcmp>
    1a5c:	1000021e 	bne	r2,zero,1a68 <getKey+0x178>
		return TAB;
    1a60:	00800d44 	movi	r2,53
    1a64:	00001106 	br	1aac <getKey+0x1bc>
	} else if ((tempo >= 'A' && tempo <= 'Z')) {//checks wether or not the received byte is a letter
    1a68:	e0bfff07 	ldb	r2,-4(fp)
    1a6c:	10801050 	cmplti	r2,r2,65
    1a70:	10000d1e 	bne	r2,zero,1aa8 <getKey+0x1b8>
    1a74:	e0bfff07 	ldb	r2,-4(fp)
    1a78:	108016c8 	cmpgei	r2,r2,91
    1a7c:	10000a1e 	bne	r2,zero,1aa8 <getKey+0x1b8>
		if (strlen(ascii) == 1) {
    1a80:	010000f4 	movhi	r4,3
    1a84:	212ea804 	addi	r4,r4,-17760
    1a88:	0001f840 	call	1f84 <strlen>
    1a8c:	10800058 	cmpnei	r2,r2,1
    1a90:	1000051e 	bne	r2,zero,1aa8 <getKey+0x1b8>
			tempo = tempo + 32;	//makes it a small letter instead of a capital
    1a94:	e0bfff03 	ldbu	r2,-4(fp)
    1a98:	10800804 	addi	r2,r2,32
    1a9c:	e0bfff05 	stb	r2,-4(fp)
			return tempo;							//returns the character
    1aa0:	e0bfff03 	ldbu	r2,-4(fp)
    1aa4:	00000106 	br	1aac <getKey+0x1bc>
		}
	}
	return 0;									// returns null
    1aa8:	0005883a 	mov	r2,zero
}
    1aac:	e037883a 	mov	sp,fp
    1ab0:	dfc00117 	ldw	ra,4(sp)
    1ab4:	df000017 	ldw	fp,0(sp)
    1ab8:	dec00204 	addi	sp,sp,8
    1abc:	f800283a 	ret

00001ac0 <printRinginstelling>:

void printRinginstelling(char c[2], int rotor) {
    1ac0:	defffb04 	addi	sp,sp,-20
    1ac4:	dfc00415 	stw	ra,16(sp)
    1ac8:	df000315 	stw	fp,12(sp)
    1acc:	df000304 	addi	fp,sp,12
    1ad0:	e13ffe15 	stw	r4,-8(fp)
    1ad4:	e17fff15 	stw	r5,-4(fp)
	int x1;
	x1 = (20 * (rotor - 1)) + 10;
    1ad8:	e0bfff17 	ldw	r2,-4(fp)
    1adc:	10bfffc4 	addi	r2,r2,-1
    1ae0:	10800524 	muli	r2,r2,20
    1ae4:	10800284 	addi	r2,r2,10
    1ae8:	e0bffd15 	stw	r2,-12(fp)
	VGA_text(x1, 51, c);
    1aec:	e13ffd17 	ldw	r4,-12(fp)
    1af0:	01400cc4 	movi	r5,51
    1af4:	e1bffe17 	ldw	r6,-8(fp)
    1af8:	0000ee80 	call	ee8 <VGA_text>
	if (ringInstellingen[0] < 10) {
    1afc:	008000b4 	movhi	r2,2
    1b00:	10bcf804 	addi	r2,r2,-3104
    1b04:	10800017 	ldw	r2,0(r2)
    1b08:	10800288 	cmpgei	r2,r2,10
    1b0c:	1000051e 	bne	r2,zero,1b24 <printRinginstelling+0x64>
		VGA_text(11, 51, " ");
    1b10:	010002c4 	movi	r4,11
    1b14:	01400cc4 	movi	r5,51
    1b18:	018000b4 	movhi	r6,2
    1b1c:	31babc04 	addi	r6,r6,-5392
    1b20:	0000ee80 	call	ee8 <VGA_text>
	}
	if (ringInstellingen[1] < 10) {
    1b24:	008000b4 	movhi	r2,2
    1b28:	10bcf804 	addi	r2,r2,-3104
    1b2c:	10800117 	ldw	r2,4(r2)
    1b30:	10800288 	cmpgei	r2,r2,10
    1b34:	1000051e 	bne	r2,zero,1b4c <printRinginstelling+0x8c>
		VGA_text(31, 51, " ");
    1b38:	010007c4 	movi	r4,31
    1b3c:	01400cc4 	movi	r5,51
    1b40:	018000b4 	movhi	r6,2
    1b44:	31babc04 	addi	r6,r6,-5392
    1b48:	0000ee80 	call	ee8 <VGA_text>
	}
	if (ringInstellingen[2] < 10) {
    1b4c:	008000b4 	movhi	r2,2
    1b50:	10bcf804 	addi	r2,r2,-3104
    1b54:	10800217 	ldw	r2,8(r2)
    1b58:	10800288 	cmpgei	r2,r2,10
    1b5c:	1000051e 	bne	r2,zero,1b74 <printRinginstelling+0xb4>
		VGA_text(51, 51, " ");
    1b60:	01000cc4 	movi	r4,51
    1b64:	01400cc4 	movi	r5,51
    1b68:	018000b4 	movhi	r6,2
    1b6c:	31babc04 	addi	r6,r6,-5392
    1b70:	0000ee80 	call	ee8 <VGA_text>
	}
	if (ringInstellingen[3] < 10) {
    1b74:	008000b4 	movhi	r2,2
    1b78:	10bcf804 	addi	r2,r2,-3104
    1b7c:	10800317 	ldw	r2,12(r2)
    1b80:	10800288 	cmpgei	r2,r2,10
    1b84:	1000051e 	bne	r2,zero,1b9c <printRinginstelling+0xdc>
		VGA_text(71, 51, " ");
    1b88:	010011c4 	movi	r4,71
    1b8c:	01400cc4 	movi	r5,51
    1b90:	018000b4 	movhi	r6,2
    1b94:	31babc04 	addi	r6,r6,-5392
    1b98:	0000ee80 	call	ee8 <VGA_text>
	}
}
    1b9c:	e037883a 	mov	sp,fp
    1ba0:	dfc00117 	ldw	ra,4(sp)
    1ba4:	df000017 	ldw	fp,0(sp)
    1ba8:	dec00204 	addi	sp,sp,8
    1bac:	f800283a 	ret

00001bb0 <printRotorStand>:

void printRotorStand(char c[2], int rotor) {
    1bb0:	defffb04 	addi	sp,sp,-20
    1bb4:	dfc00415 	stw	ra,16(sp)
    1bb8:	df000315 	stw	fp,12(sp)
    1bbc:	df000304 	addi	fp,sp,12
    1bc0:	e13ffe15 	stw	r4,-8(fp)
    1bc4:	e17fff15 	stw	r5,-4(fp)
	int x1;
	x1 = (20 * (rotor - 1)) + 10;
    1bc8:	e0bfff17 	ldw	r2,-4(fp)
    1bcc:	10bfffc4 	addi	r2,r2,-1
    1bd0:	10800524 	muli	r2,r2,20
    1bd4:	10800284 	addi	r2,r2,10
    1bd8:	e0bffd15 	stw	r2,-12(fp)
	VGA_text(x1, 45, c);
    1bdc:	e13ffd17 	ldw	r4,-12(fp)
    1be0:	01400b44 	movi	r5,45
    1be4:	e1bffe17 	ldw	r6,-8(fp)
    1be8:	0000ee80 	call	ee8 <VGA_text>
}
    1bec:	e037883a 	mov	sp,fp
    1bf0:	dfc00117 	ldw	ra,4(sp)
    1bf4:	df000017 	ldw	fp,0(sp)
    1bf8:	dec00204 	addi	sp,sp,8
    1bfc:	f800283a 	ret

00001c00 <memset>:
    1c00:	20c000cc 	andi	r3,r4,3
    1c04:	2005883a 	mov	r2,r4
    1c08:	18004326 	beq	r3,zero,1d18 <memset+0x118>
    1c0c:	31ffffc4 	addi	r7,r6,-1
    1c10:	30004026 	beq	r6,zero,1d14 <memset+0x114>
    1c14:	2813883a 	mov	r9,r5
    1c18:	200d883a 	mov	r6,r4
    1c1c:	2007883a 	mov	r3,r4
    1c20:	00000406 	br	1c34 <memset+0x34>
    1c24:	3a3fffc4 	addi	r8,r7,-1
    1c28:	31800044 	addi	r6,r6,1
    1c2c:	38003926 	beq	r7,zero,1d14 <memset+0x114>
    1c30:	400f883a 	mov	r7,r8
    1c34:	18c00044 	addi	r3,r3,1
    1c38:	32400005 	stb	r9,0(r6)
    1c3c:	1a0000cc 	andi	r8,r3,3
    1c40:	403ff81e 	bne	r8,zero,1c24 <__alt_mem_Flash_flash_data+0xf4001c24>
    1c44:	010000c4 	movi	r4,3
    1c48:	21c02d2e 	bgeu	r4,r7,1d00 <memset+0x100>
    1c4c:	29803fcc 	andi	r6,r5,255
    1c50:	3008923a 	slli	r4,r6,8
    1c54:	218cb03a 	or	r6,r4,r6
    1c58:	3008943a 	slli	r4,r6,16
    1c5c:	218cb03a 	or	r6,r4,r6
    1c60:	010003c4 	movi	r4,15
    1c64:	21c0182e 	bgeu	r4,r7,1cc8 <memset+0xc8>
    1c68:	3b3ffc04 	addi	r12,r7,-16
    1c6c:	6018d13a 	srli	r12,r12,4
    1c70:	1a000104 	addi	r8,r3,4
    1c74:	1ac00204 	addi	r11,r3,8
    1c78:	6008913a 	slli	r4,r12,4
    1c7c:	1a800304 	addi	r10,r3,12
    1c80:	1813883a 	mov	r9,r3
    1c84:	21000504 	addi	r4,r4,20
    1c88:	1909883a 	add	r4,r3,r4
    1c8c:	49800015 	stw	r6,0(r9)
    1c90:	41800015 	stw	r6,0(r8)
    1c94:	59800015 	stw	r6,0(r11)
    1c98:	51800015 	stw	r6,0(r10)
    1c9c:	42000404 	addi	r8,r8,16
    1ca0:	4a400404 	addi	r9,r9,16
    1ca4:	5ac00404 	addi	r11,r11,16
    1ca8:	52800404 	addi	r10,r10,16
    1cac:	413ff71e 	bne	r8,r4,1c8c <__alt_mem_Flash_flash_data+0xf4001c8c>
    1cb0:	63000044 	addi	r12,r12,1
    1cb4:	6018913a 	slli	r12,r12,4
    1cb8:	39c003cc 	andi	r7,r7,15
    1cbc:	010000c4 	movi	r4,3
    1cc0:	1b07883a 	add	r3,r3,r12
    1cc4:	21c00e2e 	bgeu	r4,r7,1d00 <memset+0x100>
    1cc8:	1813883a 	mov	r9,r3
    1ccc:	3811883a 	mov	r8,r7
    1cd0:	010000c4 	movi	r4,3
    1cd4:	49800015 	stw	r6,0(r9)
    1cd8:	423fff04 	addi	r8,r8,-4
    1cdc:	4a400104 	addi	r9,r9,4
    1ce0:	223ffc36 	bltu	r4,r8,1cd4 <__alt_mem_Flash_flash_data+0xf4001cd4>
    1ce4:	393fff04 	addi	r4,r7,-4
    1ce8:	2008d0ba 	srli	r4,r4,2
    1cec:	39c000cc 	andi	r7,r7,3
    1cf0:	21000044 	addi	r4,r4,1
    1cf4:	2109883a 	add	r4,r4,r4
    1cf8:	2109883a 	add	r4,r4,r4
    1cfc:	1907883a 	add	r3,r3,r4
    1d00:	38000426 	beq	r7,zero,1d14 <memset+0x114>
    1d04:	19cf883a 	add	r7,r3,r7
    1d08:	19400005 	stb	r5,0(r3)
    1d0c:	18c00044 	addi	r3,r3,1
    1d10:	19fffd1e 	bne	r3,r7,1d08 <__alt_mem_Flash_flash_data+0xf4001d08>
    1d14:	f800283a 	ret
    1d18:	2007883a 	mov	r3,r4
    1d1c:	300f883a 	mov	r7,r6
    1d20:	003fc806 	br	1c44 <__alt_mem_Flash_flash_data+0xf4001c44>

00001d24 <_printf_r>:
    1d24:	defffd04 	addi	sp,sp,-12
    1d28:	dfc00015 	stw	ra,0(sp)
    1d2c:	d9800115 	stw	r6,4(sp)
    1d30:	d9c00215 	stw	r7,8(sp)
    1d34:	280d883a 	mov	r6,r5
    1d38:	21400217 	ldw	r5,8(r4)
    1d3c:	d9c00104 	addi	r7,sp,4
    1d40:	0003fac0 	call	3fac <___vfprintf_internal_r>
    1d44:	dfc00017 	ldw	ra,0(sp)
    1d48:	dec00304 	addi	sp,sp,12
    1d4c:	f800283a 	ret

00001d50 <printf>:
    1d50:	defffc04 	addi	sp,sp,-16
    1d54:	dfc00015 	stw	ra,0(sp)
    1d58:	d9400115 	stw	r5,4(sp)
    1d5c:	d9800215 	stw	r6,8(sp)
    1d60:	d9c00315 	stw	r7,12(sp)
    1d64:	008000b4 	movhi	r2,2
    1d68:	10855404 	addi	r2,r2,5456
    1d6c:	10800017 	ldw	r2,0(r2)
    1d70:	200b883a 	mov	r5,r4
    1d74:	d9800104 	addi	r6,sp,4
    1d78:	11000217 	ldw	r4,8(r2)
    1d7c:	0005efc0 	call	5efc <__vfprintf_internal>
    1d80:	dfc00017 	ldw	ra,0(sp)
    1d84:	dec00404 	addi	sp,sp,16
    1d88:	f800283a 	ret

00001d8c <_sprintf_r>:
    1d8c:	deffe404 	addi	sp,sp,-112
    1d90:	2807883a 	mov	r3,r5
    1d94:	dfc01a15 	stw	ra,104(sp)
    1d98:	d9c01b15 	stw	r7,108(sp)
    1d9c:	00a00034 	movhi	r2,32768
    1da0:	10bfffc4 	addi	r2,r2,-1
    1da4:	02008204 	movi	r8,520
    1da8:	d8800215 	stw	r2,8(sp)
    1dac:	d8800515 	stw	r2,20(sp)
    1db0:	d80b883a 	mov	r5,sp
    1db4:	d9c01b04 	addi	r7,sp,108
    1db8:	00bfffc4 	movi	r2,-1
    1dbc:	d8c00015 	stw	r3,0(sp)
    1dc0:	d8c00415 	stw	r3,16(sp)
    1dc4:	da00030d 	sth	r8,12(sp)
    1dc8:	d880038d 	sth	r2,14(sp)
    1dcc:	000201c0 	call	201c <___svfprintf_internal_r>
    1dd0:	d8c00017 	ldw	r3,0(sp)
    1dd4:	18000005 	stb	zero,0(r3)
    1dd8:	dfc01a17 	ldw	ra,104(sp)
    1ddc:	dec01c04 	addi	sp,sp,112
    1de0:	f800283a 	ret

00001de4 <sprintf>:
    1de4:	deffe304 	addi	sp,sp,-116
    1de8:	2007883a 	mov	r3,r4
    1dec:	dfc01a15 	stw	ra,104(sp)
    1df0:	d9801b15 	stw	r6,108(sp)
    1df4:	d9c01c15 	stw	r7,112(sp)
    1df8:	010000b4 	movhi	r4,2
    1dfc:	21055404 	addi	r4,r4,5456
    1e00:	21000017 	ldw	r4,0(r4)
    1e04:	00a00034 	movhi	r2,32768
    1e08:	10bfffc4 	addi	r2,r2,-1
    1e0c:	280d883a 	mov	r6,r5
    1e10:	02008204 	movi	r8,520
    1e14:	d8800215 	stw	r2,8(sp)
    1e18:	d8800515 	stw	r2,20(sp)
    1e1c:	d80b883a 	mov	r5,sp
    1e20:	d9c01b04 	addi	r7,sp,108
    1e24:	00bfffc4 	movi	r2,-1
    1e28:	d8c00015 	stw	r3,0(sp)
    1e2c:	d8c00415 	stw	r3,16(sp)
    1e30:	da00030d 	sth	r8,12(sp)
    1e34:	d880038d 	sth	r2,14(sp)
    1e38:	000201c0 	call	201c <___svfprintf_internal_r>
    1e3c:	d8c00017 	ldw	r3,0(sp)
    1e40:	18000005 	stb	zero,0(r3)
    1e44:	dfc01a17 	ldw	ra,104(sp)
    1e48:	dec01d04 	addi	sp,sp,116
    1e4c:	f800283a 	ret

00001e50 <strcmp>:
    1e50:	2144b03a 	or	r2,r4,r5
    1e54:	108000cc 	andi	r2,r2,3
    1e58:	1000171e 	bne	r2,zero,1eb8 <strcmp+0x68>
    1e5c:	20800017 	ldw	r2,0(r4)
    1e60:	28c00017 	ldw	r3,0(r5)
    1e64:	10c0141e 	bne	r2,r3,1eb8 <strcmp+0x68>
    1e68:	027fbff4 	movhi	r9,65279
    1e6c:	4a7fbfc4 	addi	r9,r9,-257
    1e70:	0086303a 	nor	r3,zero,r2
    1e74:	02202074 	movhi	r8,32897
    1e78:	1245883a 	add	r2,r2,r9
    1e7c:	42202004 	addi	r8,r8,-32640
    1e80:	10c4703a 	and	r2,r2,r3
    1e84:	1204703a 	and	r2,r2,r8
    1e88:	10000226 	beq	r2,zero,1e94 <strcmp+0x44>
    1e8c:	00001706 	br	1eec <strcmp+0x9c>
    1e90:	1000161e 	bne	r2,zero,1eec <strcmp+0x9c>
    1e94:	21000104 	addi	r4,r4,4
    1e98:	20c00017 	ldw	r3,0(r4)
    1e9c:	29400104 	addi	r5,r5,4
    1ea0:	29800017 	ldw	r6,0(r5)
    1ea4:	1a4f883a 	add	r7,r3,r9
    1ea8:	00c4303a 	nor	r2,zero,r3
    1eac:	3884703a 	and	r2,r7,r2
    1eb0:	1204703a 	and	r2,r2,r8
    1eb4:	19bff626 	beq	r3,r6,1e90 <__alt_mem_Flash_flash_data+0xf4001e90>
    1eb8:	20800007 	ldb	r2,0(r4)
    1ebc:	1000051e 	bne	r2,zero,1ed4 <strcmp+0x84>
    1ec0:	00000606 	br	1edc <strcmp+0x8c>
    1ec4:	21000044 	addi	r4,r4,1
    1ec8:	20800007 	ldb	r2,0(r4)
    1ecc:	29400044 	addi	r5,r5,1
    1ed0:	10000226 	beq	r2,zero,1edc <strcmp+0x8c>
    1ed4:	28c00007 	ldb	r3,0(r5)
    1ed8:	10fffa26 	beq	r2,r3,1ec4 <__alt_mem_Flash_flash_data+0xf4001ec4>
    1edc:	20800003 	ldbu	r2,0(r4)
    1ee0:	28c00003 	ldbu	r3,0(r5)
    1ee4:	10c5c83a 	sub	r2,r2,r3
    1ee8:	f800283a 	ret
    1eec:	0005883a 	mov	r2,zero
    1ef0:	f800283a 	ret

00001ef4 <strcpy>:
    1ef4:	2906b03a 	or	r3,r5,r4
    1ef8:	18c000cc 	andi	r3,r3,3
    1efc:	2005883a 	mov	r2,r4
    1f00:	1800161e 	bne	r3,zero,1f5c <strcpy+0x68>
    1f04:	29c00017 	ldw	r7,0(r5)
    1f08:	02ffbff4 	movhi	r11,65279
    1f0c:	5affbfc4 	addi	r11,r11,-257
    1f10:	02a02074 	movhi	r10,32897
    1f14:	01c8303a 	nor	r4,zero,r7
    1f18:	3ac7883a 	add	r3,r7,r11
    1f1c:	52a02004 	addi	r10,r10,-32640
    1f20:	20c6703a 	and	r3,r4,r3
    1f24:	1a86703a 	and	r3,r3,r10
    1f28:	18000c1e 	bne	r3,zero,1f5c <strcpy+0x68>
    1f2c:	1011883a 	mov	r8,r2
    1f30:	41c00015 	stw	r7,0(r8)
    1f34:	29400104 	addi	r5,r5,4
    1f38:	29c00017 	ldw	r7,0(r5)
    1f3c:	41800104 	addi	r6,r8,4
    1f40:	3011883a 	mov	r8,r6
    1f44:	01d2303a 	nor	r9,zero,r7
    1f48:	3ac7883a 	add	r3,r7,r11
    1f4c:	48c6703a 	and	r3,r9,r3
    1f50:	1a86703a 	and	r3,r3,r10
    1f54:	183ff626 	beq	r3,zero,1f30 <__alt_mem_Flash_flash_data+0xf4001f30>
    1f58:	00000106 	br	1f60 <strcpy+0x6c>
    1f5c:	100d883a 	mov	r6,r2
    1f60:	28c00003 	ldbu	r3,0(r5)
    1f64:	31800044 	addi	r6,r6,1
    1f68:	29400044 	addi	r5,r5,1
    1f6c:	30ffffc5 	stb	r3,-1(r6)
    1f70:	18c03fcc 	andi	r3,r3,255
    1f74:	18c0201c 	xori	r3,r3,128
    1f78:	18ffe004 	addi	r3,r3,-128
    1f7c:	183ff81e 	bne	r3,zero,1f60 <__alt_mem_Flash_flash_data+0xf4001f60>
    1f80:	f800283a 	ret

00001f84 <strlen>:
    1f84:	208000cc 	andi	r2,r4,3
    1f88:	10002026 	beq	r2,zero,200c <strlen+0x88>
    1f8c:	20800007 	ldb	r2,0(r4)
    1f90:	10002026 	beq	r2,zero,2014 <strlen+0x90>
    1f94:	2005883a 	mov	r2,r4
    1f98:	00000206 	br	1fa4 <strlen+0x20>
    1f9c:	10c00007 	ldb	r3,0(r2)
    1fa0:	18001826 	beq	r3,zero,2004 <strlen+0x80>
    1fa4:	10800044 	addi	r2,r2,1
    1fa8:	10c000cc 	andi	r3,r2,3
    1fac:	183ffb1e 	bne	r3,zero,1f9c <__alt_mem_Flash_flash_data+0xf4001f9c>
    1fb0:	10c00017 	ldw	r3,0(r2)
    1fb4:	01ffbff4 	movhi	r7,65279
    1fb8:	39ffbfc4 	addi	r7,r7,-257
    1fbc:	00ca303a 	nor	r5,zero,r3
    1fc0:	01a02074 	movhi	r6,32897
    1fc4:	19c7883a 	add	r3,r3,r7
    1fc8:	31a02004 	addi	r6,r6,-32640
    1fcc:	1946703a 	and	r3,r3,r5
    1fd0:	1986703a 	and	r3,r3,r6
    1fd4:	1800091e 	bne	r3,zero,1ffc <strlen+0x78>
    1fd8:	10800104 	addi	r2,r2,4
    1fdc:	10c00017 	ldw	r3,0(r2)
    1fe0:	19cb883a 	add	r5,r3,r7
    1fe4:	00c6303a 	nor	r3,zero,r3
    1fe8:	28c6703a 	and	r3,r5,r3
    1fec:	1986703a 	and	r3,r3,r6
    1ff0:	183ff926 	beq	r3,zero,1fd8 <__alt_mem_Flash_flash_data+0xf4001fd8>
    1ff4:	00000106 	br	1ffc <strlen+0x78>
    1ff8:	10800044 	addi	r2,r2,1
    1ffc:	10c00007 	ldb	r3,0(r2)
    2000:	183ffd1e 	bne	r3,zero,1ff8 <__alt_mem_Flash_flash_data+0xf4001ff8>
    2004:	1105c83a 	sub	r2,r2,r4
    2008:	f800283a 	ret
    200c:	2005883a 	mov	r2,r4
    2010:	003fe706 	br	1fb0 <__alt_mem_Flash_flash_data+0xf4001fb0>
    2014:	0005883a 	mov	r2,zero
    2018:	f800283a 	ret

0000201c <___svfprintf_internal_r>:
    201c:	deffb504 	addi	sp,sp,-300
    2020:	dfc04a15 	stw	ra,296(sp)
    2024:	ddc04815 	stw	r23,288(sp)
    2028:	d9002f15 	stw	r4,188(sp)
    202c:	282f883a 	mov	r23,r5
    2030:	d9802915 	stw	r6,164(sp)
    2034:	d9c02d15 	stw	r7,180(sp)
    2038:	df004915 	stw	fp,292(sp)
    203c:	dd804715 	stw	r22,284(sp)
    2040:	dd404615 	stw	r21,280(sp)
    2044:	dd004515 	stw	r20,276(sp)
    2048:	dcc04415 	stw	r19,272(sp)
    204c:	dc804315 	stw	r18,268(sp)
    2050:	dc404215 	stw	r17,264(sp)
    2054:	dc004115 	stw	r16,260(sp)
    2058:	00086d40 	call	86d4 <_localeconv_r>
    205c:	10800017 	ldw	r2,0(r2)
    2060:	1009883a 	mov	r4,r2
    2064:	d8803515 	stw	r2,212(sp)
    2068:	0001f840 	call	1f84 <strlen>
    206c:	d8803915 	stw	r2,228(sp)
    2070:	b880030b 	ldhu	r2,12(r23)
    2074:	1080200c 	andi	r2,r2,128
    2078:	10000226 	beq	r2,zero,2084 <___svfprintf_internal_r+0x68>
    207c:	b8800417 	ldw	r2,16(r23)
    2080:	10065f26 	beq	r2,zero,3a00 <___svfprintf_internal_r+0x19e4>
    2084:	db001dc4 	addi	r12,sp,119
    2088:	dd801e04 	addi	r22,sp,120
    208c:	d8800404 	addi	r2,sp,16
    2090:	050000b4 	movhi	r20,2
    2094:	b317c83a 	sub	r11,r22,r12
    2098:	a53af884 	addi	r20,r20,-5150
    209c:	db002815 	stw	r12,160(sp)
    20a0:	d8801e15 	stw	r2,120(sp)
    20a4:	d8002015 	stw	zero,128(sp)
    20a8:	d8001f15 	stw	zero,124(sp)
    20ac:	d8003315 	stw	zero,204(sp)
    20b0:	d8003715 	stw	zero,220(sp)
    20b4:	d8003815 	stw	zero,224(sp)
    20b8:	1011883a 	mov	r8,r2
    20bc:	d8003b15 	stw	zero,236(sp)
    20c0:	d8003a15 	stw	zero,232(sp)
    20c4:	d8003015 	stw	zero,192(sp)
    20c8:	dac03d15 	stw	r11,244(sp)
    20cc:	db002917 	ldw	r12,164(sp)
    20d0:	60800007 	ldb	r2,0(r12)
    20d4:	1000ab26 	beq	r2,zero,2384 <___svfprintf_internal_r+0x368>
    20d8:	00c00944 	movi	r3,37
    20dc:	10c0a926 	beq	r2,r3,2384 <___svfprintf_internal_r+0x368>
    20e0:	6021883a 	mov	r16,r12
    20e4:	00000106 	br	20ec <___svfprintf_internal_r+0xd0>
    20e8:	10c08426 	beq	r2,r3,22fc <___svfprintf_internal_r+0x2e0>
    20ec:	84000044 	addi	r16,r16,1
    20f0:	80800007 	ldb	r2,0(r16)
    20f4:	103ffc1e 	bne	r2,zero,20e8 <__alt_mem_Flash_flash_data+0xf40020e8>
    20f8:	dac02917 	ldw	r11,164(sp)
    20fc:	82e3c83a 	sub	r17,r16,r11
    2100:	88000f26 	beq	r17,zero,2140 <___svfprintf_internal_r+0x124>
    2104:	d8c02017 	ldw	r3,128(sp)
    2108:	d8801f17 	ldw	r2,124(sp)
    210c:	dac02917 	ldw	r11,164(sp)
    2110:	1c47883a 	add	r3,r3,r17
    2114:	10800044 	addi	r2,r2,1
    2118:	d8c02015 	stw	r3,128(sp)
    211c:	42c00015 	stw	r11,0(r8)
    2120:	44400115 	stw	r17,4(r8)
    2124:	d8801f15 	stw	r2,124(sp)
    2128:	00c001c4 	movi	r3,7
    212c:	18807616 	blt	r3,r2,2308 <___svfprintf_internal_r+0x2ec>
    2130:	42000204 	addi	r8,r8,8
    2134:	db003017 	ldw	r12,192(sp)
    2138:	6459883a 	add	r12,r12,r17
    213c:	db003015 	stw	r12,192(sp)
    2140:	80800007 	ldb	r2,0(r16)
    2144:	10007726 	beq	r2,zero,2324 <___svfprintf_internal_r+0x308>
    2148:	80800044 	addi	r2,r16,1
    214c:	84000047 	ldb	r16,1(r16)
    2150:	d8002785 	stb	zero,158(sp)
    2154:	000d883a 	mov	r6,zero
    2158:	027fffc4 	movi	r9,-1
    215c:	d8002e15 	stw	zero,184(sp)
    2160:	0023883a 	mov	r17,zero
    2164:	01001604 	movi	r4,88
    2168:	01400244 	movi	r5,9
    216c:	02800a84 	movi	r10,42
    2170:	01c01b04 	movi	r7,108
    2174:	10c00044 	addi	r3,r2,1
    2178:	80bff804 	addi	r2,r16,-32
    217c:	2082e636 	bltu	r4,r2,2d18 <___svfprintf_internal_r+0xcfc>
    2180:	100490ba 	slli	r2,r2,2
    2184:	02c00034 	movhi	r11,0
    2188:	5ac86604 	addi	r11,r11,8600
    218c:	12c5883a 	add	r2,r2,r11
    2190:	10800017 	ldw	r2,0(r2)
    2194:	1000683a 	jmp	r2
    2198:	00002af8 	rdprs	zero,zero,171
    219c:	00002d18 	cmpnei	zero,zero,180
    21a0:	00002d18 	cmpnei	zero,zero,180
    21a4:	00002b18 	cmpnei	zero,zero,172
    21a8:	00002d18 	cmpnei	zero,zero,180
    21ac:	00002d18 	cmpnei	zero,zero,180
    21b0:	00002d18 	cmpnei	zero,zero,180
    21b4:	00002d18 	cmpnei	zero,zero,180
    21b8:	00002d18 	cmpnei	zero,zero,180
    21bc:	00002d18 	cmpnei	zero,zero,180
    21c0:	00002b28 	cmpgeui	zero,zero,172
    21c4:	00002b54 	movui	zero,173
    21c8:	00002d18 	cmpnei	zero,zero,180
    21cc:	0000238c 	andi	zero,zero,142
    21d0:	0000239c 	xori	zero,zero,142
    21d4:	00002d18 	cmpnei	zero,zero,180
    21d8:	000023dc 	xori	zero,zero,143
    21dc:	000029bc 	xorhi	zero,zero,166
    21e0:	000029bc 	xorhi	zero,zero,166
    21e4:	000029bc 	xorhi	zero,zero,166
    21e8:	000029bc 	xorhi	zero,zero,166
    21ec:	000029bc 	xorhi	zero,zero,166
    21f0:	000029bc 	xorhi	zero,zero,166
    21f4:	000029bc 	xorhi	zero,zero,166
    21f8:	000029bc 	xorhi	zero,zero,166
    21fc:	000029bc 	xorhi	zero,zero,166
    2200:	00002d18 	cmpnei	zero,zero,180
    2204:	00002d18 	cmpnei	zero,zero,180
    2208:	00002d18 	cmpnei	zero,zero,180
    220c:	00002d18 	cmpnei	zero,zero,180
    2210:	00002d18 	cmpnei	zero,zero,180
    2214:	00002d18 	cmpnei	zero,zero,180
    2218:	00002d18 	cmpnei	zero,zero,180
    221c:	00002d18 	cmpnei	zero,zero,180
    2220:	00002d18 	cmpnei	zero,zero,180
    2224:	00002d18 	cmpnei	zero,zero,180
    2228:	000023ec 	andhi	zero,zero,143
    222c:	0000286c 	andhi	zero,zero,161
    2230:	00002d18 	cmpnei	zero,zero,180
    2234:	0000286c 	andhi	zero,zero,161
    2238:	00002d18 	cmpnei	zero,zero,180
    223c:	00002d18 	cmpnei	zero,zero,180
    2240:	00002d18 	cmpnei	zero,zero,180
    2244:	00002d18 	cmpnei	zero,zero,180
    2248:	00002910 	cmplti	zero,zero,164
    224c:	00002d18 	cmpnei	zero,zero,180
    2250:	00002d18 	cmpnei	zero,zero,180
    2254:	00002cac 	andhi	zero,zero,178
    2258:	00002d18 	cmpnei	zero,zero,180
    225c:	00002d18 	cmpnei	zero,zero,180
    2260:	00002d18 	cmpnei	zero,zero,180
    2264:	00002d18 	cmpnei	zero,zero,180
    2268:	00002d18 	cmpnei	zero,zero,180
    226c:	00002920 	cmpeqi	zero,zero,164
    2270:	00002d18 	cmpnei	zero,zero,180
    2274:	00002d18 	cmpnei	zero,zero,180
    2278:	00002960 	cmpeqi	zero,zero,165
    227c:	00002d18 	cmpnei	zero,zero,180
    2280:	00002d18 	cmpnei	zero,zero,180
    2284:	00002d18 	cmpnei	zero,zero,180
    2288:	00002d18 	cmpnei	zero,zero,180
    228c:	00002d18 	cmpnei	zero,zero,180
    2290:	00002d18 	cmpnei	zero,zero,180
    2294:	00002d18 	cmpnei	zero,zero,180
    2298:	00002d18 	cmpnei	zero,zero,180
    229c:	00002d18 	cmpnei	zero,zero,180
    22a0:	00002d18 	cmpnei	zero,zero,180
    22a4:	00002c04 	movi	zero,176
    22a8:	00002c44 	movi	zero,177
    22ac:	0000286c 	andhi	zero,zero,161
    22b0:	0000286c 	andhi	zero,zero,161
    22b4:	0000286c 	andhi	zero,zero,161
    22b8:	00002b64 	muli	zero,zero,173
    22bc:	00002c44 	movi	zero,177
    22c0:	00002d18 	cmpnei	zero,zero,180
    22c4:	00002d18 	cmpnei	zero,zero,180
    22c8:	00002b74 	movhi	zero,173
    22cc:	00002d18 	cmpnei	zero,zero,180
    22d0:	00002b88 	cmpgei	zero,zero,174
    22d4:	00002cdc 	xori	zero,zero,179
    22d8:	00002bbc 	xorhi	zero,zero,174
    22dc:	000029f0 	cmpltui	zero,zero,167
    22e0:	00002d18 	cmpnei	zero,zero,180
    22e4:	00002a00 	call	2a0 <getChar+0x20>
    22e8:	00002d18 	cmpnei	zero,zero,180
    22ec:	00002a78 	rdprs	zero,zero,169
    22f0:	00002d18 	cmpnei	zero,zero,180
    22f4:	00002d18 	cmpnei	zero,zero,180
    22f8:	00002ab8 	rdprs	zero,zero,170
    22fc:	db002917 	ldw	r12,164(sp)
    2300:	8323c83a 	sub	r17,r16,r12
    2304:	003f7e06 	br	2100 <__alt_mem_Flash_flash_data+0xf4002100>
    2308:	d9002f17 	ldw	r4,188(sp)
    230c:	b80b883a 	mov	r5,r23
    2310:	b00d883a 	mov	r6,r22
    2314:	000a42c0 	call	a42c <__ssprint_r>
    2318:	1000081e 	bne	r2,zero,233c <___svfprintf_internal_r+0x320>
    231c:	da000404 	addi	r8,sp,16
    2320:	003f8406 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2324:	d8802017 	ldw	r2,128(sp)
    2328:	10000426 	beq	r2,zero,233c <___svfprintf_internal_r+0x320>
    232c:	d9002f17 	ldw	r4,188(sp)
    2330:	b80b883a 	mov	r5,r23
    2334:	d9801e04 	addi	r6,sp,120
    2338:	000a42c0 	call	a42c <__ssprint_r>
    233c:	b880030b 	ldhu	r2,12(r23)
    2340:	1080100c 	andi	r2,r2,64
    2344:	10000d1e 	bne	r2,zero,237c <___svfprintf_internal_r+0x360>
    2348:	d8803017 	ldw	r2,192(sp)
    234c:	dfc04a17 	ldw	ra,296(sp)
    2350:	df004917 	ldw	fp,292(sp)
    2354:	ddc04817 	ldw	r23,288(sp)
    2358:	dd804717 	ldw	r22,284(sp)
    235c:	dd404617 	ldw	r21,280(sp)
    2360:	dd004517 	ldw	r20,276(sp)
    2364:	dcc04417 	ldw	r19,272(sp)
    2368:	dc804317 	ldw	r18,268(sp)
    236c:	dc404217 	ldw	r17,264(sp)
    2370:	dc004117 	ldw	r16,260(sp)
    2374:	dec04b04 	addi	sp,sp,300
    2378:	f800283a 	ret
    237c:	00bfffc4 	movi	r2,-1
    2380:	003ff206 	br	234c <__alt_mem_Flash_flash_data+0xf400234c>
    2384:	dc002917 	ldw	r16,164(sp)
    2388:	003f6d06 	br	2140 <__alt_mem_Flash_flash_data+0xf4002140>
    238c:	1805883a 	mov	r2,r3
    2390:	8c400114 	ori	r17,r17,4
    2394:	1c000007 	ldb	r16,0(r3)
    2398:	003f7606 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    239c:	1c000007 	ldb	r16,0(r3)
    23a0:	18800044 	addi	r2,r3,1
    23a4:	8286e726 	beq	r16,r10,3f44 <___svfprintf_internal_r+0x1f28>
    23a8:	82fff404 	addi	r11,r16,-48
    23ac:	1007883a 	mov	r3,r2
    23b0:	0013883a 	mov	r9,zero
    23b4:	2aff7036 	bltu	r5,r11,2178 <__alt_mem_Flash_flash_data+0xf4002178>
    23b8:	1c000007 	ldb	r16,0(r3)
    23bc:	4a4002a4 	muli	r9,r9,10
    23c0:	18c00044 	addi	r3,r3,1
    23c4:	5a53883a 	add	r9,r11,r9
    23c8:	82fff404 	addi	r11,r16,-48
    23cc:	2afffa2e 	bgeu	r5,r11,23b8 <__alt_mem_Flash_flash_data+0xf40023b8>
    23d0:	483f690e 	bge	r9,zero,2178 <__alt_mem_Flash_flash_data+0xf4002178>
    23d4:	027fffc4 	movi	r9,-1
    23d8:	003f6706 	br	2178 <__alt_mem_Flash_flash_data+0xf4002178>
    23dc:	8c402014 	ori	r17,r17,128
    23e0:	1805883a 	mov	r2,r3
    23e4:	1c000007 	ldb	r16,0(r3)
    23e8:	003f6206 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    23ec:	8c400414 	ori	r17,r17,16
    23f0:	d8c02915 	stw	r3,164(sp)
    23f4:	d9802785 	stb	r6,158(sp)
    23f8:	8880080c 	andi	r2,r17,32
    23fc:	d8c02d17 	ldw	r3,180(sp)
    2400:	10021526 	beq	r2,zero,2c58 <___svfprintf_internal_r+0xc3c>
    2404:	db002d17 	ldw	r12,180(sp)
    2408:	18800117 	ldw	r2,4(r3)
    240c:	1cc00017 	ldw	r19,0(r3)
    2410:	63000204 	addi	r12,r12,8
    2414:	db002d15 	stw	r12,180(sp)
    2418:	1039883a 	mov	fp,r2
    241c:	10021916 	blt	r2,zero,2c84 <___svfprintf_internal_r+0xc68>
    2420:	dd402783 	ldbu	r21,158(sp)
    2424:	da403215 	stw	r9,200(sp)
    2428:	00800044 	movi	r2,1
    242c:	9f06b03a 	or	r3,r19,fp
    2430:	48000216 	blt	r9,zero,243c <___svfprintf_internal_r+0x420>
    2434:	013fdfc4 	movi	r4,-129
    2438:	8922703a 	and	r17,r17,r4
    243c:	1802461e 	bne	r3,zero,2d58 <___svfprintf_internal_r+0xd3c>
    2440:	48035426 	beq	r9,zero,3194 <___svfprintf_internal_r+0x1178>
    2444:	10803fcc 	andi	r2,r2,255
    2448:	00c00044 	movi	r3,1
    244c:	10c26726 	beq	r2,r3,2dec <___svfprintf_internal_r+0xdd0>
    2450:	00c00084 	movi	r3,2
    2454:	10c2ea26 	beq	r2,r3,3000 <___svfprintf_internal_r+0xfe4>
    2458:	b007883a 	mov	r3,r22
    245c:	9808d0fa 	srli	r4,r19,3
    2460:	e00a977a 	slli	r5,fp,29
    2464:	e038d0fa 	srli	fp,fp,3
    2468:	9cc001cc 	andi	r19,r19,7
    246c:	98800c04 	addi	r2,r19,48
    2470:	18ffffc4 	addi	r3,r3,-1
    2474:	2926b03a 	or	r19,r5,r4
    2478:	18800005 	stb	r2,0(r3)
    247c:	9f08b03a 	or	r4,r19,fp
    2480:	203ff61e 	bne	r4,zero,245c <__alt_mem_Flash_flash_data+0xf400245c>
    2484:	8900004c 	andi	r4,r17,1
    2488:	d8c03115 	stw	r3,196(sp)
    248c:	2002ea26 	beq	r4,zero,3038 <___svfprintf_internal_r+0x101c>
    2490:	10803fcc 	andi	r2,r2,255
    2494:	1080201c 	xori	r2,r2,128
    2498:	10bfe004 	addi	r2,r2,-128
    249c:	01000c04 	movi	r4,48
    24a0:	11057526 	beq	r2,r4,3a78 <___svfprintf_internal_r+0x1a5c>
    24a4:	dac03117 	ldw	r11,196(sp)
    24a8:	193fffc5 	stb	r4,-1(r3)
    24ac:	5affffc4 	addi	r11,r11,-1
    24b0:	dac03115 	stw	r11,196(sp)
    24b4:	b2e5c83a 	sub	r18,r22,r11
    24b8:	9005883a 	mov	r2,r18
    24bc:	9240010e 	bge	r18,r9,24c4 <___svfprintf_internal_r+0x4a8>
    24c0:	4805883a 	mov	r2,r9
    24c4:	d8802a15 	stw	r2,168(sp)
    24c8:	d8003415 	stw	zero,208(sp)
    24cc:	a8803fcc 	andi	r2,r21,255
    24d0:	1080201c 	xori	r2,r2,128
    24d4:	10bfe004 	addi	r2,r2,-128
    24d8:	10000326 	beq	r2,zero,24e8 <___svfprintf_internal_r+0x4cc>
    24dc:	d8c02a17 	ldw	r3,168(sp)
    24e0:	18c00044 	addi	r3,r3,1
    24e4:	d8c02a15 	stw	r3,168(sp)
    24e8:	8ac0008c 	andi	r11,r17,2
    24ec:	dac02b15 	stw	r11,172(sp)
    24f0:	58000326 	beq	r11,zero,2500 <___svfprintf_internal_r+0x4e4>
    24f4:	db002a17 	ldw	r12,168(sp)
    24f8:	63000084 	addi	r12,r12,2
    24fc:	db002a15 	stw	r12,168(sp)
    2500:	88c0210c 	andi	r3,r17,132
    2504:	d8c02c15 	stw	r3,176(sp)
    2508:	1802111e 	bne	r3,zero,2d50 <___svfprintf_internal_r+0xd34>
    250c:	dac02e17 	ldw	r11,184(sp)
    2510:	db002a17 	ldw	r12,168(sp)
    2514:	5b39c83a 	sub	fp,r11,r12
    2518:	07020d0e 	bge	zero,fp,2d50 <___svfprintf_internal_r+0xd34>
    251c:	02400404 	movi	r9,16
    2520:	d8c02017 	ldw	r3,128(sp)
    2524:	d8801f17 	ldw	r2,124(sp)
    2528:	4f058c0e 	bge	r9,fp,3b5c <___svfprintf_internal_r+0x1b40>
    252c:	014000b4 	movhi	r5,2
    2530:	e009883a 	mov	r4,fp
    2534:	297afc84 	addi	r5,r5,-5134
    2538:	dc003c15 	stw	r16,240(sp)
    253c:	9039883a 	mov	fp,r18
    2540:	d9403615 	stw	r5,216(sp)
    2544:	8825883a 	mov	r18,r17
    2548:	482b883a 	mov	r21,r9
    254c:	04c001c4 	movi	r19,7
    2550:	dc002f17 	ldw	r16,188(sp)
    2554:	2023883a 	mov	r17,r4
    2558:	00000306 	br	2568 <___svfprintf_internal_r+0x54c>
    255c:	8c7ffc04 	addi	r17,r17,-16
    2560:	42000204 	addi	r8,r8,8
    2564:	ac40130e 	bge	r21,r17,25b4 <___svfprintf_internal_r+0x598>
    2568:	02c000b4 	movhi	r11,2
    256c:	18c00404 	addi	r3,r3,16
    2570:	10800044 	addi	r2,r2,1
    2574:	5afafc84 	addi	r11,r11,-5134
    2578:	42c00015 	stw	r11,0(r8)
    257c:	45400115 	stw	r21,4(r8)
    2580:	d8c02015 	stw	r3,128(sp)
    2584:	d8801f15 	stw	r2,124(sp)
    2588:	98bff40e 	bge	r19,r2,255c <__alt_mem_Flash_flash_data+0xf400255c>
    258c:	8009883a 	mov	r4,r16
    2590:	b80b883a 	mov	r5,r23
    2594:	b00d883a 	mov	r6,r22
    2598:	000a42c0 	call	a42c <__ssprint_r>
    259c:	103f671e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    25a0:	8c7ffc04 	addi	r17,r17,-16
    25a4:	d8c02017 	ldw	r3,128(sp)
    25a8:	d8801f17 	ldw	r2,124(sp)
    25ac:	da000404 	addi	r8,sp,16
    25b0:	ac7fed16 	blt	r21,r17,2568 <__alt_mem_Flash_flash_data+0xf4002568>
    25b4:	dc003c17 	ldw	r16,240(sp)
    25b8:	8809883a 	mov	r4,r17
    25bc:	9023883a 	mov	r17,r18
    25c0:	e025883a 	mov	r18,fp
    25c4:	2039883a 	mov	fp,r4
    25c8:	db003617 	ldw	r12,216(sp)
    25cc:	e0c7883a 	add	r3,fp,r3
    25d0:	10800044 	addi	r2,r2,1
    25d4:	43000015 	stw	r12,0(r8)
    25d8:	47000115 	stw	fp,4(r8)
    25dc:	d8c02015 	stw	r3,128(sp)
    25e0:	d8801f15 	stw	r2,124(sp)
    25e4:	010001c4 	movi	r4,7
    25e8:	20834416 	blt	r4,r2,32fc <___svfprintf_internal_r+0x12e0>
    25ec:	d8802787 	ldb	r2,158(sp)
    25f0:	42000204 	addi	r8,r8,8
    25f4:	10000c26 	beq	r2,zero,2628 <___svfprintf_internal_r+0x60c>
    25f8:	d8801f17 	ldw	r2,124(sp)
    25fc:	d9002784 	addi	r4,sp,158
    2600:	18c00044 	addi	r3,r3,1
    2604:	10800044 	addi	r2,r2,1
    2608:	41000015 	stw	r4,0(r8)
    260c:	01000044 	movi	r4,1
    2610:	41000115 	stw	r4,4(r8)
    2614:	d8c02015 	stw	r3,128(sp)
    2618:	d8801f15 	stw	r2,124(sp)
    261c:	010001c4 	movi	r4,7
    2620:	2082f616 	blt	r4,r2,31fc <___svfprintf_internal_r+0x11e0>
    2624:	42000204 	addi	r8,r8,8
    2628:	dac02b17 	ldw	r11,172(sp)
    262c:	58000c26 	beq	r11,zero,2660 <___svfprintf_internal_r+0x644>
    2630:	d8801f17 	ldw	r2,124(sp)
    2634:	d9002704 	addi	r4,sp,156
    2638:	18c00084 	addi	r3,r3,2
    263c:	10800044 	addi	r2,r2,1
    2640:	41000015 	stw	r4,0(r8)
    2644:	01000084 	movi	r4,2
    2648:	41000115 	stw	r4,4(r8)
    264c:	d8c02015 	stw	r3,128(sp)
    2650:	d8801f15 	stw	r2,124(sp)
    2654:	010001c4 	movi	r4,7
    2658:	2082e016 	blt	r4,r2,31dc <___svfprintf_internal_r+0x11c0>
    265c:	42000204 	addi	r8,r8,8
    2660:	db002c17 	ldw	r12,176(sp)
    2664:	00802004 	movi	r2,128
    2668:	60822f26 	beq	r12,r2,2f28 <___svfprintf_internal_r+0xf0c>
    266c:	db003217 	ldw	r12,200(sp)
    2670:	64abc83a 	sub	r21,r12,r18
    2674:	0540310e 	bge	zero,r21,273c <___svfprintf_internal_r+0x720>
    2678:	07000404 	movi	fp,16
    267c:	d8801f17 	ldw	r2,124(sp)
    2680:	e544270e 	bge	fp,r21,3720 <___svfprintf_internal_r+0x1704>
    2684:	014000b4 	movhi	r5,2
    2688:	a809883a 	mov	r4,r21
    268c:	297af884 	addi	r5,r5,-5150
    2690:	dc002c15 	stw	r16,176(sp)
    2694:	902b883a 	mov	r21,r18
    2698:	d9402b15 	stw	r5,172(sp)
    269c:	8825883a 	mov	r18,r17
    26a0:	04c001c4 	movi	r19,7
    26a4:	dc002f17 	ldw	r16,188(sp)
    26a8:	2023883a 	mov	r17,r4
    26ac:	00000306 	br	26bc <___svfprintf_internal_r+0x6a0>
    26b0:	8c7ffc04 	addi	r17,r17,-16
    26b4:	42000204 	addi	r8,r8,8
    26b8:	e440110e 	bge	fp,r17,2700 <___svfprintf_internal_r+0x6e4>
    26bc:	18c00404 	addi	r3,r3,16
    26c0:	10800044 	addi	r2,r2,1
    26c4:	45000015 	stw	r20,0(r8)
    26c8:	47000115 	stw	fp,4(r8)
    26cc:	d8c02015 	stw	r3,128(sp)
    26d0:	d8801f15 	stw	r2,124(sp)
    26d4:	98bff60e 	bge	r19,r2,26b0 <__alt_mem_Flash_flash_data+0xf40026b0>
    26d8:	8009883a 	mov	r4,r16
    26dc:	b80b883a 	mov	r5,r23
    26e0:	b00d883a 	mov	r6,r22
    26e4:	000a42c0 	call	a42c <__ssprint_r>
    26e8:	103f141e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    26ec:	8c7ffc04 	addi	r17,r17,-16
    26f0:	d8c02017 	ldw	r3,128(sp)
    26f4:	d8801f17 	ldw	r2,124(sp)
    26f8:	da000404 	addi	r8,sp,16
    26fc:	e47fef16 	blt	fp,r17,26bc <__alt_mem_Flash_flash_data+0xf40026bc>
    2700:	dc002c17 	ldw	r16,176(sp)
    2704:	8809883a 	mov	r4,r17
    2708:	9023883a 	mov	r17,r18
    270c:	a825883a 	mov	r18,r21
    2710:	202b883a 	mov	r21,r4
    2714:	dac02b17 	ldw	r11,172(sp)
    2718:	1d47883a 	add	r3,r3,r21
    271c:	10800044 	addi	r2,r2,1
    2720:	42c00015 	stw	r11,0(r8)
    2724:	45400115 	stw	r21,4(r8)
    2728:	d8c02015 	stw	r3,128(sp)
    272c:	d8801f15 	stw	r2,124(sp)
    2730:	010001c4 	movi	r4,7
    2734:	2082a116 	blt	r4,r2,31bc <___svfprintf_internal_r+0x11a0>
    2738:	42000204 	addi	r8,r8,8
    273c:	8880400c 	andi	r2,r17,256
    2740:	1001b01e 	bne	r2,zero,2e04 <___svfprintf_internal_r+0xde8>
    2744:	d8801f17 	ldw	r2,124(sp)
    2748:	db003117 	ldw	r12,196(sp)
    274c:	1c87883a 	add	r3,r3,r18
    2750:	10800044 	addi	r2,r2,1
    2754:	43000015 	stw	r12,0(r8)
    2758:	44800115 	stw	r18,4(r8)
    275c:	d8c02015 	stw	r3,128(sp)
    2760:	d8801f15 	stw	r2,124(sp)
    2764:	010001c4 	movi	r4,7
    2768:	20828216 	blt	r4,r2,3174 <___svfprintf_internal_r+0x1158>
    276c:	42000204 	addi	r8,r8,8
    2770:	8c40010c 	andi	r17,r17,4
    2774:	88003226 	beq	r17,zero,2840 <___svfprintf_internal_r+0x824>
    2778:	db002e17 	ldw	r12,184(sp)
    277c:	dac02a17 	ldw	r11,168(sp)
    2780:	62e1c83a 	sub	r16,r12,r11
    2784:	04002e0e 	bge	zero,r16,2840 <___svfprintf_internal_r+0x824>
    2788:	04400404 	movi	r17,16
    278c:	d8801f17 	ldw	r2,124(sp)
    2790:	8c05330e 	bge	r17,r16,3c60 <___svfprintf_internal_r+0x1c44>
    2794:	010000b4 	movhi	r4,2
    2798:	213afc84 	addi	r4,r4,-5134
    279c:	d9003615 	stw	r4,216(sp)
    27a0:	048001c4 	movi	r18,7
    27a4:	dcc02f17 	ldw	r19,188(sp)
    27a8:	00000306 	br	27b8 <___svfprintf_internal_r+0x79c>
    27ac:	843ffc04 	addi	r16,r16,-16
    27b0:	42000204 	addi	r8,r8,8
    27b4:	8c00130e 	bge	r17,r16,2804 <___svfprintf_internal_r+0x7e8>
    27b8:	014000b4 	movhi	r5,2
    27bc:	18c00404 	addi	r3,r3,16
    27c0:	10800044 	addi	r2,r2,1
    27c4:	297afc84 	addi	r5,r5,-5134
    27c8:	41400015 	stw	r5,0(r8)
    27cc:	44400115 	stw	r17,4(r8)
    27d0:	d8c02015 	stw	r3,128(sp)
    27d4:	d8801f15 	stw	r2,124(sp)
    27d8:	90bff40e 	bge	r18,r2,27ac <__alt_mem_Flash_flash_data+0xf40027ac>
    27dc:	9809883a 	mov	r4,r19
    27e0:	b80b883a 	mov	r5,r23
    27e4:	b00d883a 	mov	r6,r22
    27e8:	000a42c0 	call	a42c <__ssprint_r>
    27ec:	103ed31e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    27f0:	843ffc04 	addi	r16,r16,-16
    27f4:	d8c02017 	ldw	r3,128(sp)
    27f8:	d8801f17 	ldw	r2,124(sp)
    27fc:	da000404 	addi	r8,sp,16
    2800:	8c3fed16 	blt	r17,r16,27b8 <__alt_mem_Flash_flash_data+0xf40027b8>
    2804:	dac03617 	ldw	r11,216(sp)
    2808:	1c07883a 	add	r3,r3,r16
    280c:	10800044 	addi	r2,r2,1
    2810:	42c00015 	stw	r11,0(r8)
    2814:	44000115 	stw	r16,4(r8)
    2818:	d8c02015 	stw	r3,128(sp)
    281c:	d8801f15 	stw	r2,124(sp)
    2820:	010001c4 	movi	r4,7
    2824:	2080060e 	bge	r4,r2,2840 <___svfprintf_internal_r+0x824>
    2828:	d9002f17 	ldw	r4,188(sp)
    282c:	b80b883a 	mov	r5,r23
    2830:	b00d883a 	mov	r6,r22
    2834:	000a42c0 	call	a42c <__ssprint_r>
    2838:	103ec01e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    283c:	d8c02017 	ldw	r3,128(sp)
    2840:	d8802a17 	ldw	r2,168(sp)
    2844:	db002e17 	ldw	r12,184(sp)
    2848:	1300010e 	bge	r2,r12,2850 <___svfprintf_internal_r+0x834>
    284c:	6005883a 	mov	r2,r12
    2850:	dac03017 	ldw	r11,192(sp)
    2854:	5897883a 	add	r11,r11,r2
    2858:	dac03015 	stw	r11,192(sp)
    285c:	1802331e 	bne	r3,zero,312c <___svfprintf_internal_r+0x1110>
    2860:	d8001f15 	stw	zero,124(sp)
    2864:	da000404 	addi	r8,sp,16
    2868:	003e1806 	br	20cc <__alt_mem_Flash_flash_data+0xf40020cc>
    286c:	db002d17 	ldw	r12,180(sp)
    2870:	dac02d17 	ldw	r11,180(sp)
    2874:	d8c02915 	stw	r3,164(sp)
    2878:	63000017 	ldw	r12,0(r12)
    287c:	5ac00117 	ldw	r11,4(r11)
    2880:	d9802785 	stb	r6,158(sp)
    2884:	6009883a 	mov	r4,r12
    2888:	580b883a 	mov	r5,r11
    288c:	db003715 	stw	r12,220(sp)
    2890:	da004015 	stw	r8,256(sp)
    2894:	da403f15 	stw	r9,252(sp)
    2898:	dac03815 	stw	r11,224(sp)
    289c:	000a2280 	call	a228 <__fpclassifyd>
    28a0:	db002d17 	ldw	r12,180(sp)
    28a4:	04800044 	movi	r18,1
    28a8:	da004017 	ldw	r8,256(sp)
    28ac:	64c00204 	addi	r19,r12,8
    28b0:	da403f17 	ldw	r9,252(sp)
    28b4:	d9003717 	ldw	r4,220(sp)
    28b8:	d9403817 	ldw	r5,224(sp)
    28bc:	1483561e 	bne	r2,r18,3618 <___svfprintf_internal_r+0x15fc>
    28c0:	000d883a 	mov	r6,zero
    28c4:	000f883a 	mov	r7,zero
    28c8:	000feb80 	call	feb8 <__ledf2>
    28cc:	da004017 	ldw	r8,256(sp)
    28d0:	1004ee16 	blt	r2,zero,3c8c <___svfprintf_internal_r+0x1c70>
    28d4:	dd402783 	ldbu	r21,158(sp)
    28d8:	008011c4 	movi	r2,71
    28dc:	1404440e 	bge	r2,r16,39f0 <___svfprintf_internal_r+0x19d4>
    28e0:	00c000b4 	movhi	r3,2
    28e4:	18fae904 	addi	r3,r3,-5212
    28e8:	d8c03115 	stw	r3,196(sp)
    28ec:	02c000c4 	movi	r11,3
    28f0:	00bfdfc4 	movi	r2,-129
    28f4:	dac02a15 	stw	r11,168(sp)
    28f8:	88a2703a 	and	r17,r17,r2
    28fc:	dcc02d15 	stw	r19,180(sp)
    2900:	5825883a 	mov	r18,r11
    2904:	d8003215 	stw	zero,200(sp)
    2908:	d8003415 	stw	zero,208(sp)
    290c:	003eef06 	br	24cc <__alt_mem_Flash_flash_data+0xf40024cc>
    2910:	8c400214 	ori	r17,r17,8
    2914:	1805883a 	mov	r2,r3
    2918:	1c000007 	ldb	r16,0(r3)
    291c:	003e1506 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2920:	8c400414 	ori	r17,r17,16
    2924:	d8c02915 	stw	r3,164(sp)
    2928:	88c0080c 	andi	r3,r17,32
    292c:	d8802d17 	ldw	r2,180(sp)
    2930:	18005526 	beq	r3,zero,2a88 <___svfprintf_internal_r+0xa6c>
    2934:	dac02d17 	ldw	r11,180(sp)
    2938:	14c00017 	ldw	r19,0(r2)
    293c:	17000117 	ldw	fp,4(r2)
    2940:	5ac00204 	addi	r11,r11,8
    2944:	dac02d15 	stw	r11,180(sp)
    2948:	00800044 	movi	r2,1
    294c:	9f06b03a 	or	r3,r19,fp
    2950:	d8002785 	stb	zero,158(sp)
    2954:	da403215 	stw	r9,200(sp)
    2958:	002b883a 	mov	r21,zero
    295c:	003eb406 	br	2430 <__alt_mem_Flash_flash_data+0xf4002430>
    2960:	030000b4 	movhi	r12,2
    2964:	633aec04 	addi	r12,r12,-5200
    2968:	d8c02915 	stw	r3,164(sp)
    296c:	d9802785 	stb	r6,158(sp)
    2970:	db003b15 	stw	r12,236(sp)
    2974:	88c0080c 	andi	r3,r17,32
    2978:	d8802d17 	ldw	r2,180(sp)
    297c:	18005626 	beq	r3,zero,2ad8 <___svfprintf_internal_r+0xabc>
    2980:	dac02d17 	ldw	r11,180(sp)
    2984:	14c00017 	ldw	r19,0(r2)
    2988:	17000117 	ldw	fp,4(r2)
    298c:	5ac00204 	addi	r11,r11,8
    2990:	dac02d15 	stw	r11,180(sp)
    2994:	8880004c 	andi	r2,r17,1
    2998:	10029326 	beq	r2,zero,33e8 <___svfprintf_internal_r+0x13cc>
    299c:	9f06b03a 	or	r3,r19,fp
    29a0:	18033526 	beq	r3,zero,3678 <___svfprintf_internal_r+0x165c>
    29a4:	00800c04 	movi	r2,48
    29a8:	d8802705 	stb	r2,156(sp)
    29ac:	dc002745 	stb	r16,157(sp)
    29b0:	8c400094 	ori	r17,r17,2
    29b4:	00800084 	movi	r2,2
    29b8:	003fe506 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    29bc:	1805883a 	mov	r2,r3
    29c0:	d8002e15 	stw	zero,184(sp)
    29c4:	82fff404 	addi	r11,r16,-48
    29c8:	0019883a 	mov	r12,zero
    29cc:	14000007 	ldb	r16,0(r2)
    29d0:	630002a4 	muli	r12,r12,10
    29d4:	18c00044 	addi	r3,r3,1
    29d8:	1805883a 	mov	r2,r3
    29dc:	62d9883a 	add	r12,r12,r11
    29e0:	82fff404 	addi	r11,r16,-48
    29e4:	2afff92e 	bgeu	r5,r11,29cc <__alt_mem_Flash_flash_data+0xf40029cc>
    29e8:	db002e15 	stw	r12,184(sp)
    29ec:	003de206 	br	2178 <__alt_mem_Flash_flash_data+0xf4002178>
    29f0:	8c400814 	ori	r17,r17,32
    29f4:	1805883a 	mov	r2,r3
    29f8:	1c000007 	ldb	r16,0(r3)
    29fc:	003ddd06 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2a00:	dac02d17 	ldw	r11,180(sp)
    2a04:	db002d17 	ldw	r12,180(sp)
    2a08:	d8c02915 	stw	r3,164(sp)
    2a0c:	5ac00017 	ldw	r11,0(r11)
    2a10:	d8002785 	stb	zero,158(sp)
    2a14:	64c00104 	addi	r19,r12,4
    2a18:	dac03115 	stw	r11,196(sp)
    2a1c:	58048126 	beq	r11,zero,3c24 <___svfprintf_internal_r+0x1c08>
    2a20:	d9003117 	ldw	r4,196(sp)
    2a24:	48041716 	blt	r9,zero,3a84 <___svfprintf_internal_r+0x1a68>
    2a28:	480d883a 	mov	r6,r9
    2a2c:	000b883a 	mov	r5,zero
    2a30:	da004015 	stw	r8,256(sp)
    2a34:	da403f15 	stw	r9,252(sp)
    2a38:	00090680 	call	9068 <memchr>
    2a3c:	da004017 	ldw	r8,256(sp)
    2a40:	da403f17 	ldw	r9,252(sp)
    2a44:	1004db26 	beq	r2,zero,3db4 <___svfprintf_internal_r+0x1d98>
    2a48:	d8c03117 	ldw	r3,196(sp)
    2a4c:	10e5c83a 	sub	r18,r2,r3
    2a50:	4c80010e 	bge	r9,r18,2a58 <___svfprintf_internal_r+0xa3c>
    2a54:	4825883a 	mov	r18,r9
    2a58:	9005883a 	mov	r2,r18
    2a5c:	90040e16 	blt	r18,zero,3a98 <___svfprintf_internal_r+0x1a7c>
    2a60:	dd402783 	ldbu	r21,158(sp)
    2a64:	d8802a15 	stw	r2,168(sp)
    2a68:	dcc02d15 	stw	r19,180(sp)
    2a6c:	d8003215 	stw	zero,200(sp)
    2a70:	d8003415 	stw	zero,208(sp)
    2a74:	003e9506 	br	24cc <__alt_mem_Flash_flash_data+0xf40024cc>
    2a78:	d8c02915 	stw	r3,164(sp)
    2a7c:	88c0080c 	andi	r3,r17,32
    2a80:	d8802d17 	ldw	r2,180(sp)
    2a84:	183fab1e 	bne	r3,zero,2934 <__alt_mem_Flash_flash_data+0xf4002934>
    2a88:	88c0040c 	andi	r3,r17,16
    2a8c:	1802681e 	bne	r3,zero,3430 <___svfprintf_internal_r+0x1414>
    2a90:	88c0100c 	andi	r3,r17,64
    2a94:	18026626 	beq	r3,zero,3430 <___svfprintf_internal_r+0x1414>
    2a98:	dac02d17 	ldw	r11,180(sp)
    2a9c:	14c0000b 	ldhu	r19,0(r2)
    2aa0:	0039883a 	mov	fp,zero
    2aa4:	5ac00104 	addi	r11,r11,4
    2aa8:	dac02d15 	stw	r11,180(sp)
    2aac:	00800044 	movi	r2,1
    2ab0:	9807883a 	mov	r3,r19
    2ab4:	003fa606 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    2ab8:	008000b4 	movhi	r2,2
    2abc:	10baf104 	addi	r2,r2,-5180
    2ac0:	d8c02915 	stw	r3,164(sp)
    2ac4:	d8803b15 	stw	r2,236(sp)
    2ac8:	d9802785 	stb	r6,158(sp)
    2acc:	88c0080c 	andi	r3,r17,32
    2ad0:	d8802d17 	ldw	r2,180(sp)
    2ad4:	183faa1e 	bne	r3,zero,2980 <__alt_mem_Flash_flash_data+0xf4002980>
    2ad8:	88c0040c 	andi	r3,r17,16
    2adc:	1802e826 	beq	r3,zero,3680 <___svfprintf_internal_r+0x1664>
    2ae0:	db002d17 	ldw	r12,180(sp)
    2ae4:	14c00017 	ldw	r19,0(r2)
    2ae8:	0039883a 	mov	fp,zero
    2aec:	63000104 	addi	r12,r12,4
    2af0:	db002d15 	stw	r12,180(sp)
    2af4:	003fa706 	br	2994 <__alt_mem_Flash_flash_data+0xf4002994>
    2af8:	30803fcc 	andi	r2,r6,255
    2afc:	1080201c 	xori	r2,r2,128
    2b00:	10bfe004 	addi	r2,r2,-128
    2b04:	1002d91e 	bne	r2,zero,366c <___svfprintf_internal_r+0x1650>
    2b08:	1805883a 	mov	r2,r3
    2b0c:	01800804 	movi	r6,32
    2b10:	1c000007 	ldb	r16,0(r3)
    2b14:	003d9706 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b18:	8c400054 	ori	r17,r17,1
    2b1c:	1805883a 	mov	r2,r3
    2b20:	1c000007 	ldb	r16,0(r3)
    2b24:	003d9306 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b28:	dac02d17 	ldw	r11,180(sp)
    2b2c:	db002d17 	ldw	r12,180(sp)
    2b30:	5ac00017 	ldw	r11,0(r11)
    2b34:	dac02e15 	stw	r11,184(sp)
    2b38:	62c00104 	addi	r11,r12,4
    2b3c:	db002e17 	ldw	r12,184(sp)
    2b40:	60033e16 	blt	r12,zero,383c <___svfprintf_internal_r+0x1820>
    2b44:	dac02d15 	stw	r11,180(sp)
    2b48:	1805883a 	mov	r2,r3
    2b4c:	1c000007 	ldb	r16,0(r3)
    2b50:	003d8806 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b54:	1805883a 	mov	r2,r3
    2b58:	01800ac4 	movi	r6,43
    2b5c:	1c000007 	ldb	r16,0(r3)
    2b60:	003d8406 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b64:	8c401014 	ori	r17,r17,64
    2b68:	1805883a 	mov	r2,r3
    2b6c:	1c000007 	ldb	r16,0(r3)
    2b70:	003d8006 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b74:	1c000007 	ldb	r16,0(r3)
    2b78:	81c33626 	beq	r16,r7,3854 <___svfprintf_internal_r+0x1838>
    2b7c:	8c400414 	ori	r17,r17,16
    2b80:	1805883a 	mov	r2,r3
    2b84:	003d7b06 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    2b88:	d8c02915 	stw	r3,164(sp)
    2b8c:	d9802785 	stb	r6,158(sp)
    2b90:	8880080c 	andi	r2,r17,32
    2b94:	1002c226 	beq	r2,zero,36a0 <___svfprintf_internal_r+0x1684>
    2b98:	db002d17 	ldw	r12,180(sp)
    2b9c:	dac03017 	ldw	r11,192(sp)
    2ba0:	60800017 	ldw	r2,0(r12)
    2ba4:	5807d7fa 	srai	r3,r11,31
    2ba8:	63000104 	addi	r12,r12,4
    2bac:	db002d15 	stw	r12,180(sp)
    2bb0:	12c00015 	stw	r11,0(r2)
    2bb4:	10c00115 	stw	r3,4(r2)
    2bb8:	003d4406 	br	20cc <__alt_mem_Flash_flash_data+0xf40020cc>
    2bbc:	db002d17 	ldw	r12,180(sp)
    2bc0:	00800c04 	movi	r2,48
    2bc4:	d8802705 	stb	r2,156(sp)
    2bc8:	64c00017 	ldw	r19,0(r12)
    2bcc:	00801e04 	movi	r2,120
    2bd0:	d8802745 	stb	r2,157(sp)
    2bd4:	008000b4 	movhi	r2,2
    2bd8:	10baf104 	addi	r2,r2,-5180
    2bdc:	63000104 	addi	r12,r12,4
    2be0:	d8c02915 	stw	r3,164(sp)
    2be4:	d8803b15 	stw	r2,236(sp)
    2be8:	0039883a 	mov	fp,zero
    2bec:	8c400094 	ori	r17,r17,2
    2bf0:	db002d15 	stw	r12,180(sp)
    2bf4:	00800084 	movi	r2,2
    2bf8:	04001e04 	movi	r16,120
    2bfc:	9807883a 	mov	r3,r19
    2c00:	003f5306 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    2c04:	db002d17 	ldw	r12,180(sp)
    2c08:	d8c02915 	stw	r3,164(sp)
    2c0c:	dac01404 	addi	r11,sp,80
    2c10:	60800017 	ldw	r2,0(r12)
    2c14:	00c00044 	movi	r3,1
    2c18:	63000104 	addi	r12,r12,4
    2c1c:	d8801405 	stb	r2,80(sp)
    2c20:	d8c02a15 	stw	r3,168(sp)
    2c24:	d8002785 	stb	zero,158(sp)
    2c28:	db002d15 	stw	r12,180(sp)
    2c2c:	1825883a 	mov	r18,r3
    2c30:	d8003215 	stw	zero,200(sp)
    2c34:	d8003415 	stw	zero,208(sp)
    2c38:	dac03115 	stw	r11,196(sp)
    2c3c:	0005883a 	mov	r2,zero
    2c40:	003e2906 	br	24e8 <__alt_mem_Flash_flash_data+0xf40024e8>
    2c44:	d8c02915 	stw	r3,164(sp)
    2c48:	d9802785 	stb	r6,158(sp)
    2c4c:	8880080c 	andi	r2,r17,32
    2c50:	d8c02d17 	ldw	r3,180(sp)
    2c54:	103deb1e 	bne	r2,zero,2404 <__alt_mem_Flash_flash_data+0xf4002404>
    2c58:	8880040c 	andi	r2,r17,16
    2c5c:	1001e51e 	bne	r2,zero,33f4 <___svfprintf_internal_r+0x13d8>
    2c60:	8880100c 	andi	r2,r17,64
    2c64:	1001e326 	beq	r2,zero,33f4 <___svfprintf_internal_r+0x13d8>
    2c68:	1cc0000f 	ldh	r19,0(r3)
    2c6c:	db002d17 	ldw	r12,180(sp)
    2c70:	9839d7fa 	srai	fp,r19,31
    2c74:	63000104 	addi	r12,r12,4
    2c78:	db002d15 	stw	r12,180(sp)
    2c7c:	e005883a 	mov	r2,fp
    2c80:	103de70e 	bge	r2,zero,2420 <__alt_mem_Flash_flash_data+0xf4002420>
    2c84:	04e7c83a 	sub	r19,zero,r19
    2c88:	9804c03a 	cmpne	r2,r19,zero
    2c8c:	0739c83a 	sub	fp,zero,fp
    2c90:	e0b9c83a 	sub	fp,fp,r2
    2c94:	05400b44 	movi	r21,45
    2c98:	dd402785 	stb	r21,158(sp)
    2c9c:	da403215 	stw	r9,200(sp)
    2ca0:	00800044 	movi	r2,1
    2ca4:	9f06b03a 	or	r3,r19,fp
    2ca8:	003de106 	br	2430 <__alt_mem_Flash_flash_data+0xf4002430>
    2cac:	8c400414 	ori	r17,r17,16
    2cb0:	d8c02915 	stw	r3,164(sp)
    2cb4:	8880080c 	andi	r2,r17,32
    2cb8:	10000b26 	beq	r2,zero,2ce8 <___svfprintf_internal_r+0xccc>
    2cbc:	db002d17 	ldw	r12,180(sp)
    2cc0:	0005883a 	mov	r2,zero
    2cc4:	64c00017 	ldw	r19,0(r12)
    2cc8:	67000117 	ldw	fp,4(r12)
    2ccc:	63000204 	addi	r12,r12,8
    2cd0:	db002d15 	stw	r12,180(sp)
    2cd4:	9f06b03a 	or	r3,r19,fp
    2cd8:	003f1d06 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    2cdc:	d8c02915 	stw	r3,164(sp)
    2ce0:	8880080c 	andi	r2,r17,32
    2ce4:	103ff51e 	bne	r2,zero,2cbc <__alt_mem_Flash_flash_data+0xf4002cbc>
    2ce8:	8880040c 	andi	r2,r17,16
    2cec:	1001c81e 	bne	r2,zero,3410 <___svfprintf_internal_r+0x13f4>
    2cf0:	8880100c 	andi	r2,r17,64
    2cf4:	1001c626 	beq	r2,zero,3410 <___svfprintf_internal_r+0x13f4>
    2cf8:	db002d17 	ldw	r12,180(sp)
    2cfc:	0039883a 	mov	fp,zero
    2d00:	0005883a 	mov	r2,zero
    2d04:	64c0000b 	ldhu	r19,0(r12)
    2d08:	63000104 	addi	r12,r12,4
    2d0c:	db002d15 	stw	r12,180(sp)
    2d10:	9807883a 	mov	r3,r19
    2d14:	003f0e06 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    2d18:	d8c02915 	stw	r3,164(sp)
    2d1c:	d9802785 	stb	r6,158(sp)
    2d20:	803d8026 	beq	r16,zero,2324 <__alt_mem_Flash_flash_data+0xf4002324>
    2d24:	02c00044 	movi	r11,1
    2d28:	db001404 	addi	r12,sp,80
    2d2c:	dac02a15 	stw	r11,168(sp)
    2d30:	dc001405 	stb	r16,80(sp)
    2d34:	d8002785 	stb	zero,158(sp)
    2d38:	5825883a 	mov	r18,r11
    2d3c:	d8003215 	stw	zero,200(sp)
    2d40:	d8003415 	stw	zero,208(sp)
    2d44:	db003115 	stw	r12,196(sp)
    2d48:	0005883a 	mov	r2,zero
    2d4c:	003de606 	br	24e8 <__alt_mem_Flash_flash_data+0xf40024e8>
    2d50:	d8c02017 	ldw	r3,128(sp)
    2d54:	003e2706 	br	25f4 <__alt_mem_Flash_flash_data+0xf40025f4>
    2d58:	10803fcc 	andi	r2,r2,255
    2d5c:	00c00044 	movi	r3,1
    2d60:	10fdbb1e 	bne	r2,r3,2450 <__alt_mem_Flash_flash_data+0xf4002450>
    2d64:	e000021e 	bne	fp,zero,2d70 <___svfprintf_internal_r+0xd54>
    2d68:	00800244 	movi	r2,9
    2d6c:	14c01f2e 	bgeu	r2,r19,2dec <___svfprintf_internal_r+0xdd0>
    2d70:	dc002a15 	stw	r16,168(sp)
    2d74:	dc402b15 	stw	r17,172(sp)
    2d78:	9821883a 	mov	r16,r19
    2d7c:	e023883a 	mov	r17,fp
    2d80:	b025883a 	mov	r18,r22
    2d84:	4827883a 	mov	r19,r9
    2d88:	4039883a 	mov	fp,r8
    2d8c:	8009883a 	mov	r4,r16
    2d90:	880b883a 	mov	r5,r17
    2d94:	01800284 	movi	r6,10
    2d98:	000f883a 	mov	r7,zero
    2d9c:	000e5300 	call	e530 <__umoddi3>
    2da0:	10800c04 	addi	r2,r2,48
    2da4:	94bfffc4 	addi	r18,r18,-1
    2da8:	8009883a 	mov	r4,r16
    2dac:	880b883a 	mov	r5,r17
    2db0:	01800284 	movi	r6,10
    2db4:	000f883a 	mov	r7,zero
    2db8:	90800005 	stb	r2,0(r18)
    2dbc:	000df700 	call	df70 <__udivdi3>
    2dc0:	1021883a 	mov	r16,r2
    2dc4:	10c4b03a 	or	r2,r2,r3
    2dc8:	1823883a 	mov	r17,r3
    2dcc:	103fef1e 	bne	r2,zero,2d8c <__alt_mem_Flash_flash_data+0xf4002d8c>
    2dd0:	dc803115 	stw	r18,196(sp)
    2dd4:	dc002a17 	ldw	r16,168(sp)
    2dd8:	dc402b17 	ldw	r17,172(sp)
    2ddc:	9813883a 	mov	r9,r19
    2de0:	e011883a 	mov	r8,fp
    2de4:	b4a5c83a 	sub	r18,r22,r18
    2de8:	003db306 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    2dec:	9cc00c04 	addi	r19,r19,48
    2df0:	db001dc4 	addi	r12,sp,119
    2df4:	dcc01dc5 	stb	r19,119(sp)
    2df8:	dc803d17 	ldw	r18,244(sp)
    2dfc:	db003115 	stw	r12,196(sp)
    2e00:	003dad06 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    2e04:	00801944 	movi	r2,101
    2e08:	14008d0e 	bge	r2,r16,3040 <___svfprintf_internal_r+0x1024>
    2e0c:	d9003717 	ldw	r4,220(sp)
    2e10:	d9403817 	ldw	r5,224(sp)
    2e14:	000d883a 	mov	r6,zero
    2e18:	000f883a 	mov	r7,zero
    2e1c:	d8c03e15 	stw	r3,248(sp)
    2e20:	da004015 	stw	r8,256(sp)
    2e24:	000fd540 	call	fd54 <__eqdf2>
    2e28:	d8c03e17 	ldw	r3,248(sp)
    2e2c:	da004017 	ldw	r8,256(sp)
    2e30:	1000fd1e 	bne	r2,zero,3228 <___svfprintf_internal_r+0x120c>
    2e34:	d8801f17 	ldw	r2,124(sp)
    2e38:	010000b4 	movhi	r4,2
    2e3c:	213af804 	addi	r4,r4,-5152
    2e40:	18c00044 	addi	r3,r3,1
    2e44:	10800044 	addi	r2,r2,1
    2e48:	41000015 	stw	r4,0(r8)
    2e4c:	01000044 	movi	r4,1
    2e50:	41000115 	stw	r4,4(r8)
    2e54:	d8c02015 	stw	r3,128(sp)
    2e58:	d8801f15 	stw	r2,124(sp)
    2e5c:	010001c4 	movi	r4,7
    2e60:	20823316 	blt	r4,r2,3730 <___svfprintf_internal_r+0x1714>
    2e64:	42000204 	addi	r8,r8,8
    2e68:	d8802617 	ldw	r2,152(sp)
    2e6c:	dac03317 	ldw	r11,204(sp)
    2e70:	12c00216 	blt	r2,r11,2e7c <___svfprintf_internal_r+0xe60>
    2e74:	8880004c 	andi	r2,r17,1
    2e78:	103e3d26 	beq	r2,zero,2770 <__alt_mem_Flash_flash_data+0xf4002770>
    2e7c:	db003917 	ldw	r12,228(sp)
    2e80:	d8801f17 	ldw	r2,124(sp)
    2e84:	dac03517 	ldw	r11,212(sp)
    2e88:	1b07883a 	add	r3,r3,r12
    2e8c:	10800044 	addi	r2,r2,1
    2e90:	42c00015 	stw	r11,0(r8)
    2e94:	43000115 	stw	r12,4(r8)
    2e98:	d8c02015 	stw	r3,128(sp)
    2e9c:	d8801f15 	stw	r2,124(sp)
    2ea0:	010001c4 	movi	r4,7
    2ea4:	20826f16 	blt	r4,r2,3864 <___svfprintf_internal_r+0x1848>
    2ea8:	42000204 	addi	r8,r8,8
    2eac:	db003317 	ldw	r12,204(sp)
    2eb0:	643fffc4 	addi	r16,r12,-1
    2eb4:	043e2e0e 	bge	zero,r16,2770 <__alt_mem_Flash_flash_data+0xf4002770>
    2eb8:	04800404 	movi	r18,16
    2ebc:	d8801f17 	ldw	r2,124(sp)
    2ec0:	9400a00e 	bge	r18,r16,3144 <___svfprintf_internal_r+0x1128>
    2ec4:	014000b4 	movhi	r5,2
    2ec8:	297af884 	addi	r5,r5,-5150
    2ecc:	d9402b15 	stw	r5,172(sp)
    2ed0:	054001c4 	movi	r21,7
    2ed4:	dcc02f17 	ldw	r19,188(sp)
    2ed8:	00000306 	br	2ee8 <___svfprintf_internal_r+0xecc>
    2edc:	42000204 	addi	r8,r8,8
    2ee0:	843ffc04 	addi	r16,r16,-16
    2ee4:	94009a0e 	bge	r18,r16,3150 <___svfprintf_internal_r+0x1134>
    2ee8:	18c00404 	addi	r3,r3,16
    2eec:	10800044 	addi	r2,r2,1
    2ef0:	45000015 	stw	r20,0(r8)
    2ef4:	44800115 	stw	r18,4(r8)
    2ef8:	d8c02015 	stw	r3,128(sp)
    2efc:	d8801f15 	stw	r2,124(sp)
    2f00:	a8bff60e 	bge	r21,r2,2edc <__alt_mem_Flash_flash_data+0xf4002edc>
    2f04:	9809883a 	mov	r4,r19
    2f08:	b80b883a 	mov	r5,r23
    2f0c:	b00d883a 	mov	r6,r22
    2f10:	000a42c0 	call	a42c <__ssprint_r>
    2f14:	103d091e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    2f18:	d8c02017 	ldw	r3,128(sp)
    2f1c:	d8801f17 	ldw	r2,124(sp)
    2f20:	da000404 	addi	r8,sp,16
    2f24:	003fee06 	br	2ee0 <__alt_mem_Flash_flash_data+0xf4002ee0>
    2f28:	dac02e17 	ldw	r11,184(sp)
    2f2c:	db002a17 	ldw	r12,168(sp)
    2f30:	5b2bc83a 	sub	r21,r11,r12
    2f34:	057dcd0e 	bge	zero,r21,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2f38:	07000404 	movi	fp,16
    2f3c:	d8801f17 	ldw	r2,124(sp)
    2f40:	e5435d0e 	bge	fp,r21,3cb8 <___svfprintf_internal_r+0x1c9c>
    2f44:	014000b4 	movhi	r5,2
    2f48:	a809883a 	mov	r4,r21
    2f4c:	297af884 	addi	r5,r5,-5150
    2f50:	dc002c15 	stw	r16,176(sp)
    2f54:	902b883a 	mov	r21,r18
    2f58:	d9402b15 	stw	r5,172(sp)
    2f5c:	8825883a 	mov	r18,r17
    2f60:	04c001c4 	movi	r19,7
    2f64:	dc002f17 	ldw	r16,188(sp)
    2f68:	2023883a 	mov	r17,r4
    2f6c:	00000306 	br	2f7c <___svfprintf_internal_r+0xf60>
    2f70:	8c7ffc04 	addi	r17,r17,-16
    2f74:	42000204 	addi	r8,r8,8
    2f78:	e440110e 	bge	fp,r17,2fc0 <___svfprintf_internal_r+0xfa4>
    2f7c:	18c00404 	addi	r3,r3,16
    2f80:	10800044 	addi	r2,r2,1
    2f84:	45000015 	stw	r20,0(r8)
    2f88:	47000115 	stw	fp,4(r8)
    2f8c:	d8c02015 	stw	r3,128(sp)
    2f90:	d8801f15 	stw	r2,124(sp)
    2f94:	98bff60e 	bge	r19,r2,2f70 <__alt_mem_Flash_flash_data+0xf4002f70>
    2f98:	8009883a 	mov	r4,r16
    2f9c:	b80b883a 	mov	r5,r23
    2fa0:	b00d883a 	mov	r6,r22
    2fa4:	000a42c0 	call	a42c <__ssprint_r>
    2fa8:	103ce41e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    2fac:	8c7ffc04 	addi	r17,r17,-16
    2fb0:	d8c02017 	ldw	r3,128(sp)
    2fb4:	d8801f17 	ldw	r2,124(sp)
    2fb8:	da000404 	addi	r8,sp,16
    2fbc:	e47fef16 	blt	fp,r17,2f7c <__alt_mem_Flash_flash_data+0xf4002f7c>
    2fc0:	dc002c17 	ldw	r16,176(sp)
    2fc4:	8809883a 	mov	r4,r17
    2fc8:	9023883a 	mov	r17,r18
    2fcc:	a825883a 	mov	r18,r21
    2fd0:	202b883a 	mov	r21,r4
    2fd4:	dac02b17 	ldw	r11,172(sp)
    2fd8:	1d47883a 	add	r3,r3,r21
    2fdc:	10800044 	addi	r2,r2,1
    2fe0:	42c00015 	stw	r11,0(r8)
    2fe4:	45400115 	stw	r21,4(r8)
    2fe8:	d8c02015 	stw	r3,128(sp)
    2fec:	d8801f15 	stw	r2,124(sp)
    2ff0:	010001c4 	movi	r4,7
    2ff4:	20818016 	blt	r4,r2,35f8 <___svfprintf_internal_r+0x15dc>
    2ff8:	42000204 	addi	r8,r8,8
    2ffc:	003d9b06 	br	266c <__alt_mem_Flash_flash_data+0xf400266c>
    3000:	d9403b17 	ldw	r5,236(sp)
    3004:	b007883a 	mov	r3,r22
    3008:	988003cc 	andi	r2,r19,15
    300c:	e008973a 	slli	r4,fp,28
    3010:	2885883a 	add	r2,r5,r2
    3014:	9826d13a 	srli	r19,r19,4
    3018:	10800003 	ldbu	r2,0(r2)
    301c:	e038d13a 	srli	fp,fp,4
    3020:	18ffffc4 	addi	r3,r3,-1
    3024:	24e6b03a 	or	r19,r4,r19
    3028:	18800005 	stb	r2,0(r3)
    302c:	9f04b03a 	or	r2,r19,fp
    3030:	103ff51e 	bne	r2,zero,3008 <__alt_mem_Flash_flash_data+0xf4003008>
    3034:	d8c03115 	stw	r3,196(sp)
    3038:	b0e5c83a 	sub	r18,r22,r3
    303c:	003d1e06 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    3040:	db003317 	ldw	r12,204(sp)
    3044:	00800044 	movi	r2,1
    3048:	18c00044 	addi	r3,r3,1
    304c:	13014b0e 	bge	r2,r12,357c <___svfprintf_internal_r+0x1560>
    3050:	dc001f17 	ldw	r16,124(sp)
    3054:	dac03117 	ldw	r11,196(sp)
    3058:	00800044 	movi	r2,1
    305c:	84000044 	addi	r16,r16,1
    3060:	40800115 	stw	r2,4(r8)
    3064:	42c00015 	stw	r11,0(r8)
    3068:	d8c02015 	stw	r3,128(sp)
    306c:	dc001f15 	stw	r16,124(sp)
    3070:	008001c4 	movi	r2,7
    3074:	14014e16 	blt	r2,r16,35b0 <___svfprintf_internal_r+0x1594>
    3078:	42000204 	addi	r8,r8,8
    307c:	db003917 	ldw	r12,228(sp)
    3080:	dac03517 	ldw	r11,212(sp)
    3084:	84000044 	addi	r16,r16,1
    3088:	1b07883a 	add	r3,r3,r12
    308c:	42c00015 	stw	r11,0(r8)
    3090:	43000115 	stw	r12,4(r8)
    3094:	d8c02015 	stw	r3,128(sp)
    3098:	dc001f15 	stw	r16,124(sp)
    309c:	008001c4 	movi	r2,7
    30a0:	14014c16 	blt	r2,r16,35d4 <___svfprintf_internal_r+0x15b8>
    30a4:	44800204 	addi	r18,r8,8
    30a8:	d9003717 	ldw	r4,220(sp)
    30ac:	d9403817 	ldw	r5,224(sp)
    30b0:	000d883a 	mov	r6,zero
    30b4:	000f883a 	mov	r7,zero
    30b8:	d8c03e15 	stw	r3,248(sp)
    30bc:	000fd540 	call	fd54 <__eqdf2>
    30c0:	d8c03e17 	ldw	r3,248(sp)
    30c4:	db003317 	ldw	r12,204(sp)
    30c8:	10009526 	beq	r2,zero,3320 <___svfprintf_internal_r+0x1304>
    30cc:	dac03117 	ldw	r11,196(sp)
    30d0:	60bfffc4 	addi	r2,r12,-1
    30d4:	1887883a 	add	r3,r3,r2
    30d8:	59000044 	addi	r4,r11,1
    30dc:	84000044 	addi	r16,r16,1
    30e0:	90800115 	stw	r2,4(r18)
    30e4:	91000015 	stw	r4,0(r18)
    30e8:	d8c02015 	stw	r3,128(sp)
    30ec:	dc001f15 	stw	r16,124(sp)
    30f0:	008001c4 	movi	r2,7
    30f4:	1400b316 	blt	r2,r16,33c4 <___svfprintf_internal_r+0x13a8>
    30f8:	94800204 	addi	r18,r18,8
    30fc:	dac03a17 	ldw	r11,232(sp)
    3100:	dd4022c4 	addi	r21,sp,139
    3104:	84000044 	addi	r16,r16,1
    3108:	1ac7883a 	add	r3,r3,r11
    310c:	95400015 	stw	r21,0(r18)
    3110:	92c00115 	stw	r11,4(r18)
    3114:	d8c02015 	stw	r3,128(sp)
    3118:	dc001f15 	stw	r16,124(sp)
    311c:	008001c4 	movi	r2,7
    3120:	14001416 	blt	r2,r16,3174 <___svfprintf_internal_r+0x1158>
    3124:	92000204 	addi	r8,r18,8
    3128:	003d9106 	br	2770 <__alt_mem_Flash_flash_data+0xf4002770>
    312c:	d9002f17 	ldw	r4,188(sp)
    3130:	b80b883a 	mov	r5,r23
    3134:	b00d883a 	mov	r6,r22
    3138:	000a42c0 	call	a42c <__ssprint_r>
    313c:	103dc826 	beq	r2,zero,2860 <__alt_mem_Flash_flash_data+0xf4002860>
    3140:	003c7e06 	br	233c <__alt_mem_Flash_flash_data+0xf400233c>
    3144:	010000b4 	movhi	r4,2
    3148:	213af884 	addi	r4,r4,-5150
    314c:	d9002b15 	stw	r4,172(sp)
    3150:	dac02b17 	ldw	r11,172(sp)
    3154:	1c07883a 	add	r3,r3,r16
    3158:	44000115 	stw	r16,4(r8)
    315c:	42c00015 	stw	r11,0(r8)
    3160:	10800044 	addi	r2,r2,1
    3164:	d8c02015 	stw	r3,128(sp)
    3168:	d8801f15 	stw	r2,124(sp)
    316c:	010001c4 	movi	r4,7
    3170:	20bd7e0e 	bge	r4,r2,276c <__alt_mem_Flash_flash_data+0xf400276c>
    3174:	d9002f17 	ldw	r4,188(sp)
    3178:	b80b883a 	mov	r5,r23
    317c:	b00d883a 	mov	r6,r22
    3180:	000a42c0 	call	a42c <__ssprint_r>
    3184:	103c6d1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3188:	d8c02017 	ldw	r3,128(sp)
    318c:	da000404 	addi	r8,sp,16
    3190:	003d7706 	br	2770 <__alt_mem_Flash_flash_data+0xf4002770>
    3194:	10803fcc 	andi	r2,r2,255
    3198:	1000201e 	bne	r2,zero,321c <___svfprintf_internal_r+0x1200>
    319c:	8880004c 	andi	r2,r17,1
    31a0:	10001e26 	beq	r2,zero,321c <___svfprintf_internal_r+0x1200>
    31a4:	00800c04 	movi	r2,48
    31a8:	d8c01dc4 	addi	r3,sp,119
    31ac:	d8801dc5 	stb	r2,119(sp)
    31b0:	dc803d17 	ldw	r18,244(sp)
    31b4:	d8c03115 	stw	r3,196(sp)
    31b8:	003cbf06 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    31bc:	d9002f17 	ldw	r4,188(sp)
    31c0:	b80b883a 	mov	r5,r23
    31c4:	b00d883a 	mov	r6,r22
    31c8:	000a42c0 	call	a42c <__ssprint_r>
    31cc:	103c5b1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    31d0:	d8c02017 	ldw	r3,128(sp)
    31d4:	da000404 	addi	r8,sp,16
    31d8:	003d5806 	br	273c <__alt_mem_Flash_flash_data+0xf400273c>
    31dc:	d9002f17 	ldw	r4,188(sp)
    31e0:	b80b883a 	mov	r5,r23
    31e4:	b00d883a 	mov	r6,r22
    31e8:	000a42c0 	call	a42c <__ssprint_r>
    31ec:	103c531e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    31f0:	d8c02017 	ldw	r3,128(sp)
    31f4:	da000404 	addi	r8,sp,16
    31f8:	003d1906 	br	2660 <__alt_mem_Flash_flash_data+0xf4002660>
    31fc:	d9002f17 	ldw	r4,188(sp)
    3200:	b80b883a 	mov	r5,r23
    3204:	b00d883a 	mov	r6,r22
    3208:	000a42c0 	call	a42c <__ssprint_r>
    320c:	103c4b1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3210:	d8c02017 	ldw	r3,128(sp)
    3214:	da000404 	addi	r8,sp,16
    3218:	003d0306 	br	2628 <__alt_mem_Flash_flash_data+0xf4002628>
    321c:	0025883a 	mov	r18,zero
    3220:	dd803115 	stw	r22,196(sp)
    3224:	003ca406 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    3228:	dc002617 	ldw	r16,152(sp)
    322c:	0401480e 	bge	zero,r16,3750 <___svfprintf_internal_r+0x1734>
    3230:	db003117 	ldw	r12,196(sp)
    3234:	dac03317 	ldw	r11,204(sp)
    3238:	62e1883a 	add	r16,r12,r11
    323c:	db003417 	ldw	r12,208(sp)
    3240:	5825883a 	mov	r18,r11
    3244:	62c0010e 	bge	r12,r11,324c <___svfprintf_internal_r+0x1230>
    3248:	6025883a 	mov	r18,r12
    324c:	04800b0e 	bge	zero,r18,327c <___svfprintf_internal_r+0x1260>
    3250:	d8801f17 	ldw	r2,124(sp)
    3254:	dac03117 	ldw	r11,196(sp)
    3258:	1c87883a 	add	r3,r3,r18
    325c:	10800044 	addi	r2,r2,1
    3260:	42c00015 	stw	r11,0(r8)
    3264:	44800115 	stw	r18,4(r8)
    3268:	d8c02015 	stw	r3,128(sp)
    326c:	d8801f15 	stw	r2,124(sp)
    3270:	010001c4 	movi	r4,7
    3274:	20823f16 	blt	r4,r2,3b74 <___svfprintf_internal_r+0x1b58>
    3278:	42000204 	addi	r8,r8,8
    327c:	90023b16 	blt	r18,zero,3b6c <___svfprintf_internal_r+0x1b50>
    3280:	db003417 	ldw	r12,208(sp)
    3284:	64a5c83a 	sub	r18,r12,r18
    3288:	0480780e 	bge	zero,r18,346c <___svfprintf_internal_r+0x1450>
    328c:	05400404 	movi	r21,16
    3290:	d8801f17 	ldw	r2,124(sp)
    3294:	ac81140e 	bge	r21,r18,36e8 <___svfprintf_internal_r+0x16cc>
    3298:	014000b4 	movhi	r5,2
    329c:	297af884 	addi	r5,r5,-5150
    32a0:	d9402b15 	stw	r5,172(sp)
    32a4:	070001c4 	movi	fp,7
    32a8:	dcc02f17 	ldw	r19,188(sp)
    32ac:	00000306 	br	32bc <___svfprintf_internal_r+0x12a0>
    32b0:	42000204 	addi	r8,r8,8
    32b4:	94bffc04 	addi	r18,r18,-16
    32b8:	ac810e0e 	bge	r21,r18,36f4 <___svfprintf_internal_r+0x16d8>
    32bc:	18c00404 	addi	r3,r3,16
    32c0:	10800044 	addi	r2,r2,1
    32c4:	45000015 	stw	r20,0(r8)
    32c8:	45400115 	stw	r21,4(r8)
    32cc:	d8c02015 	stw	r3,128(sp)
    32d0:	d8801f15 	stw	r2,124(sp)
    32d4:	e0bff60e 	bge	fp,r2,32b0 <__alt_mem_Flash_flash_data+0xf40032b0>
    32d8:	9809883a 	mov	r4,r19
    32dc:	b80b883a 	mov	r5,r23
    32e0:	b00d883a 	mov	r6,r22
    32e4:	000a42c0 	call	a42c <__ssprint_r>
    32e8:	103c141e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    32ec:	d8c02017 	ldw	r3,128(sp)
    32f0:	d8801f17 	ldw	r2,124(sp)
    32f4:	da000404 	addi	r8,sp,16
    32f8:	003fee06 	br	32b4 <__alt_mem_Flash_flash_data+0xf40032b4>
    32fc:	d9002f17 	ldw	r4,188(sp)
    3300:	b80b883a 	mov	r5,r23
    3304:	b00d883a 	mov	r6,r22
    3308:	000a42c0 	call	a42c <__ssprint_r>
    330c:	103c0b1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3310:	d8c02017 	ldw	r3,128(sp)
    3314:	d8802787 	ldb	r2,158(sp)
    3318:	da000404 	addi	r8,sp,16
    331c:	003cb506 	br	25f4 <__alt_mem_Flash_flash_data+0xf40025f4>
    3320:	657fffc4 	addi	r21,r12,-1
    3324:	057f750e 	bge	zero,r21,30fc <__alt_mem_Flash_flash_data+0xf40030fc>
    3328:	07000404 	movi	fp,16
    332c:	e542ed0e 	bge	fp,r21,3ee4 <___svfprintf_internal_r+0x1ec8>
    3330:	010000b4 	movhi	r4,2
    3334:	213af884 	addi	r4,r4,-5150
    3338:	d9002b15 	stw	r4,172(sp)
    333c:	01c001c4 	movi	r7,7
    3340:	dcc02f17 	ldw	r19,188(sp)
    3344:	00000306 	br	3354 <___svfprintf_internal_r+0x1338>
    3348:	ad7ffc04 	addi	r21,r21,-16
    334c:	94800204 	addi	r18,r18,8
    3350:	e540130e 	bge	fp,r21,33a0 <___svfprintf_internal_r+0x1384>
    3354:	18c00404 	addi	r3,r3,16
    3358:	84000044 	addi	r16,r16,1
    335c:	95000015 	stw	r20,0(r18)
    3360:	97000115 	stw	fp,4(r18)
    3364:	d8c02015 	stw	r3,128(sp)
    3368:	dc001f15 	stw	r16,124(sp)
    336c:	3c3ff60e 	bge	r7,r16,3348 <__alt_mem_Flash_flash_data+0xf4003348>
    3370:	9809883a 	mov	r4,r19
    3374:	b80b883a 	mov	r5,r23
    3378:	b00d883a 	mov	r6,r22
    337c:	d9c03e15 	stw	r7,248(sp)
    3380:	000a42c0 	call	a42c <__ssprint_r>
    3384:	d9c03e17 	ldw	r7,248(sp)
    3388:	103bec1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    338c:	ad7ffc04 	addi	r21,r21,-16
    3390:	d8c02017 	ldw	r3,128(sp)
    3394:	dc001f17 	ldw	r16,124(sp)
    3398:	dc800404 	addi	r18,sp,16
    339c:	e57fed16 	blt	fp,r21,3354 <__alt_mem_Flash_flash_data+0xf4003354>
    33a0:	dac02b17 	ldw	r11,172(sp)
    33a4:	1d47883a 	add	r3,r3,r21
    33a8:	84000044 	addi	r16,r16,1
    33ac:	92c00015 	stw	r11,0(r18)
    33b0:	95400115 	stw	r21,4(r18)
    33b4:	d8c02015 	stw	r3,128(sp)
    33b8:	dc001f15 	stw	r16,124(sp)
    33bc:	008001c4 	movi	r2,7
    33c0:	143f4d0e 	bge	r2,r16,30f8 <__alt_mem_Flash_flash_data+0xf40030f8>
    33c4:	d9002f17 	ldw	r4,188(sp)
    33c8:	b80b883a 	mov	r5,r23
    33cc:	b00d883a 	mov	r6,r22
    33d0:	000a42c0 	call	a42c <__ssprint_r>
    33d4:	103bd91e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    33d8:	d8c02017 	ldw	r3,128(sp)
    33dc:	dc001f17 	ldw	r16,124(sp)
    33e0:	dc800404 	addi	r18,sp,16
    33e4:	003f4506 	br	30fc <__alt_mem_Flash_flash_data+0xf40030fc>
    33e8:	00800084 	movi	r2,2
    33ec:	9f06b03a 	or	r3,r19,fp
    33f0:	003d5706 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    33f4:	1cc00017 	ldw	r19,0(r3)
    33f8:	dac02d17 	ldw	r11,180(sp)
    33fc:	9839d7fa 	srai	fp,r19,31
    3400:	5ac00104 	addi	r11,r11,4
    3404:	dac02d15 	stw	r11,180(sp)
    3408:	e005883a 	mov	r2,fp
    340c:	003c0306 	br	241c <__alt_mem_Flash_flash_data+0xf400241c>
    3410:	dac02d17 	ldw	r11,180(sp)
    3414:	0039883a 	mov	fp,zero
    3418:	0005883a 	mov	r2,zero
    341c:	5cc00017 	ldw	r19,0(r11)
    3420:	5ac00104 	addi	r11,r11,4
    3424:	dac02d15 	stw	r11,180(sp)
    3428:	9807883a 	mov	r3,r19
    342c:	003d4806 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    3430:	db002d17 	ldw	r12,180(sp)
    3434:	14c00017 	ldw	r19,0(r2)
    3438:	0039883a 	mov	fp,zero
    343c:	63000104 	addi	r12,r12,4
    3440:	db002d15 	stw	r12,180(sp)
    3444:	00800044 	movi	r2,1
    3448:	9807883a 	mov	r3,r19
    344c:	003d4006 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    3450:	d9002f17 	ldw	r4,188(sp)
    3454:	b80b883a 	mov	r5,r23
    3458:	b00d883a 	mov	r6,r22
    345c:	000a42c0 	call	a42c <__ssprint_r>
    3460:	103bb61e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3464:	d8c02017 	ldw	r3,128(sp)
    3468:	da000404 	addi	r8,sp,16
    346c:	db003117 	ldw	r12,196(sp)
    3470:	dac03417 	ldw	r11,208(sp)
    3474:	d8802617 	ldw	r2,152(sp)
    3478:	62e5883a 	add	r18,r12,r11
    347c:	db003317 	ldw	r12,204(sp)
    3480:	13000216 	blt	r2,r12,348c <___svfprintf_internal_r+0x1470>
    3484:	8900004c 	andi	r4,r17,1
    3488:	20000c26 	beq	r4,zero,34bc <___svfprintf_internal_r+0x14a0>
    348c:	dac03917 	ldw	r11,228(sp)
    3490:	d9001f17 	ldw	r4,124(sp)
    3494:	db003517 	ldw	r12,212(sp)
    3498:	1ac7883a 	add	r3,r3,r11
    349c:	21000044 	addi	r4,r4,1
    34a0:	43000015 	stw	r12,0(r8)
    34a4:	42c00115 	stw	r11,4(r8)
    34a8:	d8c02015 	stw	r3,128(sp)
    34ac:	d9001f15 	stw	r4,124(sp)
    34b0:	014001c4 	movi	r5,7
    34b4:	2901b716 	blt	r5,r4,3b94 <___svfprintf_internal_r+0x1b78>
    34b8:	42000204 	addi	r8,r8,8
    34bc:	dac03317 	ldw	r11,204(sp)
    34c0:	8489c83a 	sub	r4,r16,r18
    34c4:	5885c83a 	sub	r2,r11,r2
    34c8:	1021883a 	mov	r16,r2
    34cc:	2080010e 	bge	r4,r2,34d4 <___svfprintf_internal_r+0x14b8>
    34d0:	2021883a 	mov	r16,r4
    34d4:	04000a0e 	bge	zero,r16,3500 <___svfprintf_internal_r+0x14e4>
    34d8:	d9001f17 	ldw	r4,124(sp)
    34dc:	1c07883a 	add	r3,r3,r16
    34e0:	44800015 	stw	r18,0(r8)
    34e4:	21000044 	addi	r4,r4,1
    34e8:	44000115 	stw	r16,4(r8)
    34ec:	d8c02015 	stw	r3,128(sp)
    34f0:	d9001f15 	stw	r4,124(sp)
    34f4:	014001c4 	movi	r5,7
    34f8:	2901bf16 	blt	r5,r4,3bf8 <___svfprintf_internal_r+0x1bdc>
    34fc:	42000204 	addi	r8,r8,8
    3500:	8001bb16 	blt	r16,zero,3bf0 <___svfprintf_internal_r+0x1bd4>
    3504:	1421c83a 	sub	r16,r2,r16
    3508:	043c990e 	bge	zero,r16,2770 <__alt_mem_Flash_flash_data+0xf4002770>
    350c:	04800404 	movi	r18,16
    3510:	d8801f17 	ldw	r2,124(sp)
    3514:	943f0b0e 	bge	r18,r16,3144 <__alt_mem_Flash_flash_data+0xf4003144>
    3518:	014000b4 	movhi	r5,2
    351c:	297af884 	addi	r5,r5,-5150
    3520:	d9402b15 	stw	r5,172(sp)
    3524:	054001c4 	movi	r21,7
    3528:	dcc02f17 	ldw	r19,188(sp)
    352c:	00000306 	br	353c <___svfprintf_internal_r+0x1520>
    3530:	42000204 	addi	r8,r8,8
    3534:	843ffc04 	addi	r16,r16,-16
    3538:	943f050e 	bge	r18,r16,3150 <__alt_mem_Flash_flash_data+0xf4003150>
    353c:	18c00404 	addi	r3,r3,16
    3540:	10800044 	addi	r2,r2,1
    3544:	45000015 	stw	r20,0(r8)
    3548:	44800115 	stw	r18,4(r8)
    354c:	d8c02015 	stw	r3,128(sp)
    3550:	d8801f15 	stw	r2,124(sp)
    3554:	a8bff60e 	bge	r21,r2,3530 <__alt_mem_Flash_flash_data+0xf4003530>
    3558:	9809883a 	mov	r4,r19
    355c:	b80b883a 	mov	r5,r23
    3560:	b00d883a 	mov	r6,r22
    3564:	000a42c0 	call	a42c <__ssprint_r>
    3568:	103b741e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    356c:	d8c02017 	ldw	r3,128(sp)
    3570:	d8801f17 	ldw	r2,124(sp)
    3574:	da000404 	addi	r8,sp,16
    3578:	003fee06 	br	3534 <__alt_mem_Flash_flash_data+0xf4003534>
    357c:	8888703a 	and	r4,r17,r2
    3580:	203eb31e 	bne	r4,zero,3050 <__alt_mem_Flash_flash_data+0xf4003050>
    3584:	dc001f17 	ldw	r16,124(sp)
    3588:	db003117 	ldw	r12,196(sp)
    358c:	40800115 	stw	r2,4(r8)
    3590:	84000044 	addi	r16,r16,1
    3594:	43000015 	stw	r12,0(r8)
    3598:	d8c02015 	stw	r3,128(sp)
    359c:	dc001f15 	stw	r16,124(sp)
    35a0:	008001c4 	movi	r2,7
    35a4:	143f8716 	blt	r2,r16,33c4 <__alt_mem_Flash_flash_data+0xf40033c4>
    35a8:	44800204 	addi	r18,r8,8
    35ac:	003ed306 	br	30fc <__alt_mem_Flash_flash_data+0xf40030fc>
    35b0:	d9002f17 	ldw	r4,188(sp)
    35b4:	b80b883a 	mov	r5,r23
    35b8:	b00d883a 	mov	r6,r22
    35bc:	000a42c0 	call	a42c <__ssprint_r>
    35c0:	103b5e1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    35c4:	d8c02017 	ldw	r3,128(sp)
    35c8:	dc001f17 	ldw	r16,124(sp)
    35cc:	da000404 	addi	r8,sp,16
    35d0:	003eaa06 	br	307c <__alt_mem_Flash_flash_data+0xf400307c>
    35d4:	d9002f17 	ldw	r4,188(sp)
    35d8:	b80b883a 	mov	r5,r23
    35dc:	b00d883a 	mov	r6,r22
    35e0:	000a42c0 	call	a42c <__ssprint_r>
    35e4:	103b551e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    35e8:	d8c02017 	ldw	r3,128(sp)
    35ec:	dc001f17 	ldw	r16,124(sp)
    35f0:	dc800404 	addi	r18,sp,16
    35f4:	003eac06 	br	30a8 <__alt_mem_Flash_flash_data+0xf40030a8>
    35f8:	d9002f17 	ldw	r4,188(sp)
    35fc:	b80b883a 	mov	r5,r23
    3600:	b00d883a 	mov	r6,r22
    3604:	000a42c0 	call	a42c <__ssprint_r>
    3608:	103b4c1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    360c:	d8c02017 	ldw	r3,128(sp)
    3610:	da000404 	addi	r8,sp,16
    3614:	003c1506 	br	266c <__alt_mem_Flash_flash_data+0xf400266c>
    3618:	da004015 	stw	r8,256(sp)
    361c:	da403f15 	stw	r9,252(sp)
    3620:	000a2280 	call	a228 <__fpclassifyd>
    3624:	da004017 	ldw	r8,256(sp)
    3628:	da403f17 	ldw	r9,252(sp)
    362c:	1000951e 	bne	r2,zero,3884 <___svfprintf_internal_r+0x1868>
    3630:	008011c4 	movi	r2,71
    3634:	1400fb16 	blt	r2,r16,3a24 <___svfprintf_internal_r+0x1a08>
    3638:	030000b4 	movhi	r12,2
    363c:	633aea04 	addi	r12,r12,-5208
    3640:	db003115 	stw	r12,196(sp)
    3644:	00c000c4 	movi	r3,3
    3648:	00bfdfc4 	movi	r2,-129
    364c:	d8c02a15 	stw	r3,168(sp)
    3650:	88a2703a 	and	r17,r17,r2
    3654:	dd402783 	ldbu	r21,158(sp)
    3658:	dcc02d15 	stw	r19,180(sp)
    365c:	1825883a 	mov	r18,r3
    3660:	d8003215 	stw	zero,200(sp)
    3664:	d8003415 	stw	zero,208(sp)
    3668:	003b9806 	br	24cc <__alt_mem_Flash_flash_data+0xf40024cc>
    366c:	1c000007 	ldb	r16,0(r3)
    3670:	1805883a 	mov	r2,r3
    3674:	003abf06 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    3678:	00800084 	movi	r2,2
    367c:	003cb406 	br	2950 <__alt_mem_Flash_flash_data+0xf4002950>
    3680:	88c0100c 	andi	r3,r17,64
    3684:	1800f626 	beq	r3,zero,3a60 <___svfprintf_internal_r+0x1a44>
    3688:	dac02d17 	ldw	r11,180(sp)
    368c:	14c0000b 	ldhu	r19,0(r2)
    3690:	0039883a 	mov	fp,zero
    3694:	5ac00104 	addi	r11,r11,4
    3698:	dac02d15 	stw	r11,180(sp)
    369c:	003cbd06 	br	2994 <__alt_mem_Flash_flash_data+0xf4002994>
    36a0:	8880040c 	andi	r2,r17,16
    36a4:	1000091e 	bne	r2,zero,36cc <___svfprintf_internal_r+0x16b0>
    36a8:	8c40100c 	andi	r17,r17,64
    36ac:	88000726 	beq	r17,zero,36cc <___svfprintf_internal_r+0x16b0>
    36b0:	db002d17 	ldw	r12,180(sp)
    36b4:	dac03017 	ldw	r11,192(sp)
    36b8:	60800017 	ldw	r2,0(r12)
    36bc:	63000104 	addi	r12,r12,4
    36c0:	db002d15 	stw	r12,180(sp)
    36c4:	12c0000d 	sth	r11,0(r2)
    36c8:	003a8006 	br	20cc <__alt_mem_Flash_flash_data+0xf40020cc>
    36cc:	db002d17 	ldw	r12,180(sp)
    36d0:	dac03017 	ldw	r11,192(sp)
    36d4:	60800017 	ldw	r2,0(r12)
    36d8:	63000104 	addi	r12,r12,4
    36dc:	db002d15 	stw	r12,180(sp)
    36e0:	12c00015 	stw	r11,0(r2)
    36e4:	003a7906 	br	20cc <__alt_mem_Flash_flash_data+0xf40020cc>
    36e8:	010000b4 	movhi	r4,2
    36ec:	213af884 	addi	r4,r4,-5150
    36f0:	d9002b15 	stw	r4,172(sp)
    36f4:	dac02b17 	ldw	r11,172(sp)
    36f8:	1c87883a 	add	r3,r3,r18
    36fc:	10800044 	addi	r2,r2,1
    3700:	42c00015 	stw	r11,0(r8)
    3704:	44800115 	stw	r18,4(r8)
    3708:	d8c02015 	stw	r3,128(sp)
    370c:	d8801f15 	stw	r2,124(sp)
    3710:	010001c4 	movi	r4,7
    3714:	20bf4e16 	blt	r4,r2,3450 <__alt_mem_Flash_flash_data+0xf4003450>
    3718:	42000204 	addi	r8,r8,8
    371c:	003f5306 	br	346c <__alt_mem_Flash_flash_data+0xf400346c>
    3720:	010000b4 	movhi	r4,2
    3724:	213af884 	addi	r4,r4,-5150
    3728:	d9002b15 	stw	r4,172(sp)
    372c:	003bf906 	br	2714 <__alt_mem_Flash_flash_data+0xf4002714>
    3730:	d9002f17 	ldw	r4,188(sp)
    3734:	b80b883a 	mov	r5,r23
    3738:	b00d883a 	mov	r6,r22
    373c:	000a42c0 	call	a42c <__ssprint_r>
    3740:	103afe1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3744:	d8c02017 	ldw	r3,128(sp)
    3748:	da000404 	addi	r8,sp,16
    374c:	003dc606 	br	2e68 <__alt_mem_Flash_flash_data+0xf4002e68>
    3750:	d8801f17 	ldw	r2,124(sp)
    3754:	030000b4 	movhi	r12,2
    3758:	01000044 	movi	r4,1
    375c:	18c00044 	addi	r3,r3,1
    3760:	10800044 	addi	r2,r2,1
    3764:	633af804 	addi	r12,r12,-5152
    3768:	41000115 	stw	r4,4(r8)
    376c:	43000015 	stw	r12,0(r8)
    3770:	d8c02015 	stw	r3,128(sp)
    3774:	d8801f15 	stw	r2,124(sp)
    3778:	010001c4 	movi	r4,7
    377c:	2080ad16 	blt	r4,r2,3a34 <___svfprintf_internal_r+0x1a18>
    3780:	42000204 	addi	r8,r8,8
    3784:	8000041e 	bne	r16,zero,3798 <___svfprintf_internal_r+0x177c>
    3788:	dac03317 	ldw	r11,204(sp)
    378c:	5800021e 	bne	r11,zero,3798 <___svfprintf_internal_r+0x177c>
    3790:	8880004c 	andi	r2,r17,1
    3794:	103bf626 	beq	r2,zero,2770 <__alt_mem_Flash_flash_data+0xf4002770>
    3798:	db003917 	ldw	r12,228(sp)
    379c:	d8801f17 	ldw	r2,124(sp)
    37a0:	dac03517 	ldw	r11,212(sp)
    37a4:	1b07883a 	add	r3,r3,r12
    37a8:	10800044 	addi	r2,r2,1
    37ac:	42c00015 	stw	r11,0(r8)
    37b0:	43000115 	stw	r12,4(r8)
    37b4:	d8c02015 	stw	r3,128(sp)
    37b8:	d8801f15 	stw	r2,124(sp)
    37bc:	010001c4 	movi	r4,7
    37c0:	20818616 	blt	r4,r2,3ddc <___svfprintf_internal_r+0x1dc0>
    37c4:	42000204 	addi	r8,r8,8
    37c8:	0421c83a 	sub	r16,zero,r16
    37cc:	0400bc0e 	bge	zero,r16,3ac0 <___svfprintf_internal_r+0x1aa4>
    37d0:	04800404 	movi	r18,16
    37d4:	9400f80e 	bge	r18,r16,3bb8 <___svfprintf_internal_r+0x1b9c>
    37d8:	010000b4 	movhi	r4,2
    37dc:	213af884 	addi	r4,r4,-5150
    37e0:	d9002b15 	stw	r4,172(sp)
    37e4:	054001c4 	movi	r21,7
    37e8:	dcc02f17 	ldw	r19,188(sp)
    37ec:	00000306 	br	37fc <___svfprintf_internal_r+0x17e0>
    37f0:	42000204 	addi	r8,r8,8
    37f4:	843ffc04 	addi	r16,r16,-16
    37f8:	9400f20e 	bge	r18,r16,3bc4 <___svfprintf_internal_r+0x1ba8>
    37fc:	18c00404 	addi	r3,r3,16
    3800:	10800044 	addi	r2,r2,1
    3804:	45000015 	stw	r20,0(r8)
    3808:	44800115 	stw	r18,4(r8)
    380c:	d8c02015 	stw	r3,128(sp)
    3810:	d8801f15 	stw	r2,124(sp)
    3814:	a8bff60e 	bge	r21,r2,37f0 <__alt_mem_Flash_flash_data+0xf40037f0>
    3818:	9809883a 	mov	r4,r19
    381c:	b80b883a 	mov	r5,r23
    3820:	b00d883a 	mov	r6,r22
    3824:	000a42c0 	call	a42c <__ssprint_r>
    3828:	103ac41e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    382c:	d8c02017 	ldw	r3,128(sp)
    3830:	d8801f17 	ldw	r2,124(sp)
    3834:	da000404 	addi	r8,sp,16
    3838:	003fee06 	br	37f4 <__alt_mem_Flash_flash_data+0xf40037f4>
    383c:	db002e17 	ldw	r12,184(sp)
    3840:	1805883a 	mov	r2,r3
    3844:	dac02d15 	stw	r11,180(sp)
    3848:	0319c83a 	sub	r12,zero,r12
    384c:	db002e15 	stw	r12,184(sp)
    3850:	003acf06 	br	2390 <__alt_mem_Flash_flash_data+0xf4002390>
    3854:	18800044 	addi	r2,r3,1
    3858:	8c400814 	ori	r17,r17,32
    385c:	1c000047 	ldb	r16,1(r3)
    3860:	003a4406 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    3864:	d9002f17 	ldw	r4,188(sp)
    3868:	b80b883a 	mov	r5,r23
    386c:	b00d883a 	mov	r6,r22
    3870:	000a42c0 	call	a42c <__ssprint_r>
    3874:	103ab11e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3878:	d8c02017 	ldw	r3,128(sp)
    387c:	da000404 	addi	r8,sp,16
    3880:	003d8a06 	br	2eac <__alt_mem_Flash_flash_data+0xf4002eac>
    3884:	057ff7c4 	movi	r21,-33
    3888:	00bfffc4 	movi	r2,-1
    388c:	856a703a 	and	r21,r16,r21
    3890:	48807126 	beq	r9,r2,3a58 <___svfprintf_internal_r+0x1a3c>
    3894:	008011c4 	movi	r2,71
    3898:	a8814d26 	beq	r21,r2,3dd0 <___svfprintf_internal_r+0x1db4>
    389c:	db003817 	ldw	r12,224(sp)
    38a0:	8ac04014 	ori	r11,r17,256
    38a4:	dac02d15 	stw	r11,180(sp)
    38a8:	60015616 	blt	r12,zero,3e04 <___svfprintf_internal_r+0x1de8>
    38ac:	dc803817 	ldw	r18,224(sp)
    38b0:	d8002a05 	stb	zero,168(sp)
    38b4:	00801984 	movi	r2,102
    38b8:	80808c26 	beq	r16,r2,3aec <___svfprintf_internal_r+0x1ad0>
    38bc:	00801184 	movi	r2,70
    38c0:	80808a26 	beq	r16,r2,3aec <___svfprintf_internal_r+0x1ad0>
    38c4:	00801144 	movi	r2,69
    38c8:	a8815226 	beq	r21,r2,3e14 <___svfprintf_internal_r+0x1df8>
    38cc:	4839883a 	mov	fp,r9
    38d0:	d8802604 	addi	r2,sp,152
    38d4:	d8800115 	stw	r2,4(sp)
    38d8:	d9002f17 	ldw	r4,188(sp)
    38dc:	d8802504 	addi	r2,sp,148
    38e0:	d9403717 	ldw	r5,220(sp)
    38e4:	d8800215 	stw	r2,8(sp)
    38e8:	d8802104 	addi	r2,sp,132
    38ec:	df000015 	stw	fp,0(sp)
    38f0:	d8800315 	stw	r2,12(sp)
    38f4:	900d883a 	mov	r6,r18
    38f8:	01c00084 	movi	r7,2
    38fc:	da004015 	stw	r8,256(sp)
    3900:	da403f15 	stw	r9,252(sp)
    3904:	00063300 	call	6330 <_dtoa_r>
    3908:	d8803115 	stw	r2,196(sp)
    390c:	008019c4 	movi	r2,103
    3910:	da004017 	ldw	r8,256(sp)
    3914:	da403f17 	ldw	r9,252(sp)
    3918:	80800226 	beq	r16,r2,3924 <___svfprintf_internal_r+0x1908>
    391c:	008011c4 	movi	r2,71
    3920:	8080841e 	bne	r16,r2,3b34 <___svfprintf_internal_r+0x1b18>
    3924:	8880004c 	andi	r2,r17,1
    3928:	10014f26 	beq	r2,zero,3e68 <___svfprintf_internal_r+0x1e4c>
    392c:	db003117 	ldw	r12,196(sp)
    3930:	6715883a 	add	r10,r12,fp
    3934:	d9003717 	ldw	r4,220(sp)
    3938:	900b883a 	mov	r5,r18
    393c:	000d883a 	mov	r6,zero
    3940:	000f883a 	mov	r7,zero
    3944:	da004015 	stw	r8,256(sp)
    3948:	da403f15 	stw	r9,252(sp)
    394c:	da803e15 	stw	r10,248(sp)
    3950:	000fd540 	call	fd54 <__eqdf2>
    3954:	da004017 	ldw	r8,256(sp)
    3958:	da403f17 	ldw	r9,252(sp)
    395c:	da803e17 	ldw	r10,248(sp)
    3960:	1000d926 	beq	r2,zero,3cc8 <___svfprintf_internal_r+0x1cac>
    3964:	d8802117 	ldw	r2,132(sp)
    3968:	1280062e 	bgeu	r2,r10,3984 <___svfprintf_internal_r+0x1968>
    396c:	01000c04 	movi	r4,48
    3970:	10c00044 	addi	r3,r2,1
    3974:	d8c02115 	stw	r3,132(sp)
    3978:	11000005 	stb	r4,0(r2)
    397c:	d8802117 	ldw	r2,132(sp)
    3980:	12bffb36 	bltu	r2,r10,3970 <__alt_mem_Flash_flash_data+0xf4003970>
    3984:	db003117 	ldw	r12,196(sp)
    3988:	1305c83a 	sub	r2,r2,r12
    398c:	d8803315 	stw	r2,204(sp)
    3990:	008011c4 	movi	r2,71
    3994:	a880b626 	beq	r21,r2,3c70 <___svfprintf_internal_r+0x1c54>
    3998:	00801944 	movi	r2,101
    399c:	14017c0e 	bge	r2,r16,3f90 <___svfprintf_internal_r+0x1f74>
    39a0:	00801984 	movi	r2,102
    39a4:	80812626 	beq	r16,r2,3e40 <___svfprintf_internal_r+0x1e24>
    39a8:	db002617 	ldw	r12,152(sp)
    39ac:	db003415 	stw	r12,208(sp)
    39b0:	db003417 	ldw	r12,208(sp)
    39b4:	dac03317 	ldw	r11,204(sp)
    39b8:	62c11816 	blt	r12,r11,3e1c <___svfprintf_internal_r+0x1e00>
    39bc:	8c40004c 	andi	r17,r17,1
    39c0:	88013b1e 	bne	r17,zero,3eb0 <___svfprintf_internal_r+0x1e94>
    39c4:	6005883a 	mov	r2,r12
    39c8:	60012516 	blt	r12,zero,3e60 <___svfprintf_internal_r+0x1e44>
    39cc:	dc803417 	ldw	r18,208(sp)
    39d0:	df002a07 	ldb	fp,168(sp)
    39d4:	e000b01e 	bne	fp,zero,3c98 <___svfprintf_internal_r+0x1c7c>
    39d8:	dc402d17 	ldw	r17,180(sp)
    39dc:	dd402783 	ldbu	r21,158(sp)
    39e0:	d8802a15 	stw	r2,168(sp)
    39e4:	dcc02d15 	stw	r19,180(sp)
    39e8:	d8003215 	stw	zero,200(sp)
    39ec:	003ab706 	br	24cc <__alt_mem_Flash_flash_data+0xf40024cc>
    39f0:	008000b4 	movhi	r2,2
    39f4:	10bae804 	addi	r2,r2,-5216
    39f8:	d8803115 	stw	r2,196(sp)
    39fc:	003bbb06 	br	28ec <__alt_mem_Flash_flash_data+0xf40028ec>
    3a00:	d9002f17 	ldw	r4,188(sp)
    3a04:	04001004 	movi	r16,64
    3a08:	800b883a 	mov	r5,r16
    3a0c:	00088c00 	call	88c0 <_malloc_r>
    3a10:	b8800015 	stw	r2,0(r23)
    3a14:	b8800415 	stw	r2,16(r23)
    3a18:	10015f26 	beq	r2,zero,3f98 <___svfprintf_internal_r+0x1f7c>
    3a1c:	bc000515 	stw	r16,20(r23)
    3a20:	00399806 	br	2084 <__alt_mem_Flash_flash_data+0xf4002084>
    3a24:	008000b4 	movhi	r2,2
    3a28:	10baeb04 	addi	r2,r2,-5204
    3a2c:	d8803115 	stw	r2,196(sp)
    3a30:	003f0406 	br	3644 <__alt_mem_Flash_flash_data+0xf4003644>
    3a34:	d9002f17 	ldw	r4,188(sp)
    3a38:	b80b883a 	mov	r5,r23
    3a3c:	b00d883a 	mov	r6,r22
    3a40:	000a42c0 	call	a42c <__ssprint_r>
    3a44:	103a3d1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3a48:	dc002617 	ldw	r16,152(sp)
    3a4c:	d8c02017 	ldw	r3,128(sp)
    3a50:	da000404 	addi	r8,sp,16
    3a54:	003f4b06 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    3a58:	02400184 	movi	r9,6
    3a5c:	003f8f06 	br	389c <__alt_mem_Flash_flash_data+0xf400389c>
    3a60:	db002d17 	ldw	r12,180(sp)
    3a64:	14c00017 	ldw	r19,0(r2)
    3a68:	0039883a 	mov	fp,zero
    3a6c:	63000104 	addi	r12,r12,4
    3a70:	db002d15 	stw	r12,180(sp)
    3a74:	003bc706 	br	2994 <__alt_mem_Flash_flash_data+0xf4002994>
    3a78:	d8c03117 	ldw	r3,196(sp)
    3a7c:	b0e5c83a 	sub	r18,r22,r3
    3a80:	003a8d06 	br	24b8 <__alt_mem_Flash_flash_data+0xf40024b8>
    3a84:	da004015 	stw	r8,256(sp)
    3a88:	0001f840 	call	1f84 <strlen>
    3a8c:	1025883a 	mov	r18,r2
    3a90:	da004017 	ldw	r8,256(sp)
    3a94:	903bf20e 	bge	r18,zero,2a60 <__alt_mem_Flash_flash_data+0xf4002a60>
    3a98:	0005883a 	mov	r2,zero
    3a9c:	003bf006 	br	2a60 <__alt_mem_Flash_flash_data+0xf4002a60>
    3aa0:	d9002f17 	ldw	r4,188(sp)
    3aa4:	b80b883a 	mov	r5,r23
    3aa8:	b00d883a 	mov	r6,r22
    3aac:	000a42c0 	call	a42c <__ssprint_r>
    3ab0:	103a221e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3ab4:	d8c02017 	ldw	r3,128(sp)
    3ab8:	d8801f17 	ldw	r2,124(sp)
    3abc:	da000404 	addi	r8,sp,16
    3ac0:	db003317 	ldw	r12,204(sp)
    3ac4:	dac03117 	ldw	r11,196(sp)
    3ac8:	10800044 	addi	r2,r2,1
    3acc:	1b07883a 	add	r3,r3,r12
    3ad0:	42c00015 	stw	r11,0(r8)
    3ad4:	43000115 	stw	r12,4(r8)
    3ad8:	d8c02015 	stw	r3,128(sp)
    3adc:	d8801f15 	stw	r2,124(sp)
    3ae0:	010001c4 	movi	r4,7
    3ae4:	20bb210e 	bge	r4,r2,276c <__alt_mem_Flash_flash_data+0xf400276c>
    3ae8:	003da206 	br	3174 <__alt_mem_Flash_flash_data+0xf4003174>
    3aec:	d8802604 	addi	r2,sp,152
    3af0:	d8800115 	stw	r2,4(sp)
    3af4:	d9002f17 	ldw	r4,188(sp)
    3af8:	d8802504 	addi	r2,sp,148
    3afc:	d9403717 	ldw	r5,220(sp)
    3b00:	d8800215 	stw	r2,8(sp)
    3b04:	d8802104 	addi	r2,sp,132
    3b08:	da400015 	stw	r9,0(sp)
    3b0c:	d8800315 	stw	r2,12(sp)
    3b10:	900d883a 	mov	r6,r18
    3b14:	01c000c4 	movi	r7,3
    3b18:	da004015 	stw	r8,256(sp)
    3b1c:	da403f15 	stw	r9,252(sp)
    3b20:	00063300 	call	6330 <_dtoa_r>
    3b24:	da403f17 	ldw	r9,252(sp)
    3b28:	da004017 	ldw	r8,256(sp)
    3b2c:	d8803115 	stw	r2,196(sp)
    3b30:	4839883a 	mov	fp,r9
    3b34:	dac03117 	ldw	r11,196(sp)
    3b38:	00801184 	movi	r2,70
    3b3c:	5f15883a 	add	r10,r11,fp
    3b40:	a8bf7c1e 	bne	r21,r2,3934 <__alt_mem_Flash_flash_data+0xf4003934>
    3b44:	59000007 	ldb	r4,0(r11)
    3b48:	00800c04 	movi	r2,48
    3b4c:	2080c826 	beq	r4,r2,3e70 <___svfprintf_internal_r+0x1e54>
    3b50:	d8c02617 	ldw	r3,152(sp)
    3b54:	50d5883a 	add	r10,r10,r3
    3b58:	003f7606 	br	3934 <__alt_mem_Flash_flash_data+0xf4003934>
    3b5c:	010000b4 	movhi	r4,2
    3b60:	213afc84 	addi	r4,r4,-5134
    3b64:	d9003615 	stw	r4,216(sp)
    3b68:	003a9706 	br	25c8 <__alt_mem_Flash_flash_data+0xf40025c8>
    3b6c:	0025883a 	mov	r18,zero
    3b70:	003dc306 	br	3280 <__alt_mem_Flash_flash_data+0xf4003280>
    3b74:	d9002f17 	ldw	r4,188(sp)
    3b78:	b80b883a 	mov	r5,r23
    3b7c:	b00d883a 	mov	r6,r22
    3b80:	000a42c0 	call	a42c <__ssprint_r>
    3b84:	1039ed1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3b88:	d8c02017 	ldw	r3,128(sp)
    3b8c:	da000404 	addi	r8,sp,16
    3b90:	003dba06 	br	327c <__alt_mem_Flash_flash_data+0xf400327c>
    3b94:	d9002f17 	ldw	r4,188(sp)
    3b98:	b80b883a 	mov	r5,r23
    3b9c:	b00d883a 	mov	r6,r22
    3ba0:	000a42c0 	call	a42c <__ssprint_r>
    3ba4:	1039e51e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3ba8:	d8802617 	ldw	r2,152(sp)
    3bac:	d8c02017 	ldw	r3,128(sp)
    3bb0:	da000404 	addi	r8,sp,16
    3bb4:	003e4106 	br	34bc <__alt_mem_Flash_flash_data+0xf40034bc>
    3bb8:	030000b4 	movhi	r12,2
    3bbc:	633af884 	addi	r12,r12,-5150
    3bc0:	db002b15 	stw	r12,172(sp)
    3bc4:	dac02b17 	ldw	r11,172(sp)
    3bc8:	1c07883a 	add	r3,r3,r16
    3bcc:	10800044 	addi	r2,r2,1
    3bd0:	42c00015 	stw	r11,0(r8)
    3bd4:	44000115 	stw	r16,4(r8)
    3bd8:	d8c02015 	stw	r3,128(sp)
    3bdc:	d8801f15 	stw	r2,124(sp)
    3be0:	010001c4 	movi	r4,7
    3be4:	20bfae16 	blt	r4,r2,3aa0 <__alt_mem_Flash_flash_data+0xf4003aa0>
    3be8:	42000204 	addi	r8,r8,8
    3bec:	003fb406 	br	3ac0 <__alt_mem_Flash_flash_data+0xf4003ac0>
    3bf0:	0021883a 	mov	r16,zero
    3bf4:	003e4306 	br	3504 <__alt_mem_Flash_flash_data+0xf4003504>
    3bf8:	d9002f17 	ldw	r4,188(sp)
    3bfc:	b80b883a 	mov	r5,r23
    3c00:	b00d883a 	mov	r6,r22
    3c04:	000a42c0 	call	a42c <__ssprint_r>
    3c08:	1039cc1e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3c0c:	d8802617 	ldw	r2,152(sp)
    3c10:	db003317 	ldw	r12,204(sp)
    3c14:	d8c02017 	ldw	r3,128(sp)
    3c18:	da000404 	addi	r8,sp,16
    3c1c:	6085c83a 	sub	r2,r12,r2
    3c20:	003e3706 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3c24:	00800184 	movi	r2,6
    3c28:	1240012e 	bgeu	r2,r9,3c30 <___svfprintf_internal_r+0x1c14>
    3c2c:	1013883a 	mov	r9,r2
    3c30:	4825883a 	mov	r18,r9
    3c34:	4805883a 	mov	r2,r9
    3c38:	4800a216 	blt	r9,zero,3ec4 <___svfprintf_internal_r+0x1ea8>
    3c3c:	d8802a15 	stw	r2,168(sp)
    3c40:	008000b4 	movhi	r2,2
    3c44:	10baf604 	addi	r2,r2,-5160
    3c48:	d8803115 	stw	r2,196(sp)
    3c4c:	dcc02d15 	stw	r19,180(sp)
    3c50:	d8003215 	stw	zero,200(sp)
    3c54:	d8003415 	stw	zero,208(sp)
    3c58:	0005883a 	mov	r2,zero
    3c5c:	003a2206 	br	24e8 <__alt_mem_Flash_flash_data+0xf40024e8>
    3c60:	030000b4 	movhi	r12,2
    3c64:	633afc84 	addi	r12,r12,-5134
    3c68:	db003615 	stw	r12,216(sp)
    3c6c:	003ae506 	br	2804 <__alt_mem_Flash_flash_data+0xf4002804>
    3c70:	d8c02617 	ldw	r3,152(sp)
    3c74:	00bfff44 	movi	r2,-3
    3c78:	18801516 	blt	r3,r2,3cd0 <___svfprintf_internal_r+0x1cb4>
    3c7c:	48c01416 	blt	r9,r3,3cd0 <___svfprintf_internal_r+0x1cb4>
    3c80:	d8c03415 	stw	r3,208(sp)
    3c84:	040019c4 	movi	r16,103
    3c88:	003f4906 	br	39b0 <__alt_mem_Flash_flash_data+0xf40039b0>
    3c8c:	05400b44 	movi	r21,45
    3c90:	dd402785 	stb	r21,158(sp)
    3c94:	003b1006 	br	28d8 <__alt_mem_Flash_flash_data+0xf40028d8>
    3c98:	00c00b44 	movi	r3,45
    3c9c:	d8802a15 	stw	r2,168(sp)
    3ca0:	dc402d17 	ldw	r17,180(sp)
    3ca4:	d8c02785 	stb	r3,158(sp)
    3ca8:	dcc02d15 	stw	r19,180(sp)
    3cac:	d8003215 	stw	zero,200(sp)
    3cb0:	00800b44 	movi	r2,45
    3cb4:	003a0906 	br	24dc <__alt_mem_Flash_flash_data+0xf40024dc>
    3cb8:	010000b4 	movhi	r4,2
    3cbc:	213af884 	addi	r4,r4,-5150
    3cc0:	d9002b15 	stw	r4,172(sp)
    3cc4:	003cc306 	br	2fd4 <__alt_mem_Flash_flash_data+0xf4002fd4>
    3cc8:	5005883a 	mov	r2,r10
    3ccc:	003f2d06 	br	3984 <__alt_mem_Flash_flash_data+0xf4003984>
    3cd0:	843fff84 	addi	r16,r16,-2
    3cd4:	1f3fffc4 	addi	fp,r3,-1
    3cd8:	df002615 	stw	fp,152(sp)
    3cdc:	dc0022c5 	stb	r16,139(sp)
    3ce0:	e000a016 	blt	fp,zero,3f64 <___svfprintf_internal_r+0x1f48>
    3ce4:	00800ac4 	movi	r2,43
    3ce8:	d8802305 	stb	r2,140(sp)
    3cec:	00800244 	movi	r2,9
    3cf0:	1700800e 	bge	r2,fp,3ef4 <___svfprintf_internal_r+0x1ed8>
    3cf4:	dd4022c4 	addi	r21,sp,139
    3cf8:	dc002b15 	stw	r16,172(sp)
    3cfc:	4025883a 	mov	r18,r8
    3d00:	a821883a 	mov	r16,r21
    3d04:	e009883a 	mov	r4,fp
    3d08:	01400284 	movi	r5,10
    3d0c:	000eb800 	call	eb80 <__modsi3>
    3d10:	10800c04 	addi	r2,r2,48
    3d14:	843fffc4 	addi	r16,r16,-1
    3d18:	e009883a 	mov	r4,fp
    3d1c:	01400284 	movi	r5,10
    3d20:	80800005 	stb	r2,0(r16)
    3d24:	000eb2c0 	call	eb2c <__divsi3>
    3d28:	1039883a 	mov	fp,r2
    3d2c:	00800244 	movi	r2,9
    3d30:	173ff416 	blt	r2,fp,3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    3d34:	9011883a 	mov	r8,r18
    3d38:	e0800c04 	addi	r2,fp,48
    3d3c:	8025883a 	mov	r18,r16
    3d40:	913fffc4 	addi	r4,r18,-1
    3d44:	90bfffc5 	stb	r2,-1(r18)
    3d48:	dc002b17 	ldw	r16,172(sp)
    3d4c:	25408e2e 	bgeu	r4,r21,3f88 <___svfprintf_internal_r+0x1f6c>
    3d50:	d9402384 	addi	r5,sp,142
    3d54:	2c8bc83a 	sub	r5,r5,r18
    3d58:	d8c02344 	addi	r3,sp,141
    3d5c:	a94b883a 	add	r5,r21,r5
    3d60:	00000106 	br	3d68 <___svfprintf_internal_r+0x1d4c>
    3d64:	20800003 	ldbu	r2,0(r4)
    3d68:	18800005 	stb	r2,0(r3)
    3d6c:	18c00044 	addi	r3,r3,1
    3d70:	21000044 	addi	r4,r4,1
    3d74:	197ffb1e 	bne	r3,r5,3d64 <__alt_mem_Flash_flash_data+0xf4003d64>
    3d78:	d8802304 	addi	r2,sp,140
    3d7c:	1485c83a 	sub	r2,r2,r18
    3d80:	d8c02344 	addi	r3,sp,141
    3d84:	1885883a 	add	r2,r3,r2
    3d88:	dac03317 	ldw	r11,204(sp)
    3d8c:	156bc83a 	sub	r21,r2,r21
    3d90:	dd403a15 	stw	r21,232(sp)
    3d94:	00800044 	movi	r2,1
    3d98:	5d65883a 	add	r18,r11,r21
    3d9c:	12c0770e 	bge	r2,r11,3f7c <___svfprintf_internal_r+0x1f60>
    3da0:	94800044 	addi	r18,r18,1
    3da4:	9005883a 	mov	r2,r18
    3da8:	90007216 	blt	r18,zero,3f74 <___svfprintf_internal_r+0x1f58>
    3dac:	d8003415 	stw	zero,208(sp)
    3db0:	003f0706 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3db4:	da402a15 	stw	r9,168(sp)
    3db8:	dd402783 	ldbu	r21,158(sp)
    3dbc:	4825883a 	mov	r18,r9
    3dc0:	dcc02d15 	stw	r19,180(sp)
    3dc4:	d8003215 	stw	zero,200(sp)
    3dc8:	d8003415 	stw	zero,208(sp)
    3dcc:	0039bf06 	br	24cc <__alt_mem_Flash_flash_data+0xf40024cc>
    3dd0:	483eb21e 	bne	r9,zero,389c <__alt_mem_Flash_flash_data+0xf400389c>
    3dd4:	9013883a 	mov	r9,r18
    3dd8:	003eb006 	br	389c <__alt_mem_Flash_flash_data+0xf400389c>
    3ddc:	d9002f17 	ldw	r4,188(sp)
    3de0:	b80b883a 	mov	r5,r23
    3de4:	b00d883a 	mov	r6,r22
    3de8:	000a42c0 	call	a42c <__ssprint_r>
    3dec:	1039531e 	bne	r2,zero,233c <__alt_mem_Flash_flash_data+0xf400233c>
    3df0:	dc002617 	ldw	r16,152(sp)
    3df4:	d8c02017 	ldw	r3,128(sp)
    3df8:	d8801f17 	ldw	r2,124(sp)
    3dfc:	da000404 	addi	r8,sp,16
    3e00:	003e7106 	br	37c8 <__alt_mem_Flash_flash_data+0xf40037c8>
    3e04:	00c00b44 	movi	r3,45
    3e08:	64a0003c 	xorhi	r18,r12,32768
    3e0c:	d8c02a05 	stb	r3,168(sp)
    3e10:	003ea806 	br	38b4 <__alt_mem_Flash_flash_data+0xf40038b4>
    3e14:	4f000044 	addi	fp,r9,1
    3e18:	003ead06 	br	38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3e1c:	d8c03417 	ldw	r3,208(sp)
    3e20:	00c0410e 	bge	zero,r3,3f28 <___svfprintf_internal_r+0x1f0c>
    3e24:	04800044 	movi	r18,1
    3e28:	dac03317 	ldw	r11,204(sp)
    3e2c:	92e5883a 	add	r18,r18,r11
    3e30:	9005883a 	mov	r2,r18
    3e34:	903ee60e 	bge	r18,zero,39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3e38:	0005883a 	mov	r2,zero
    3e3c:	003ee406 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3e40:	d8c02617 	ldw	r3,152(sp)
    3e44:	d8c03415 	stw	r3,208(sp)
    3e48:	00c0310e 	bge	zero,r3,3f10 <___svfprintf_internal_r+0x1ef4>
    3e4c:	48001f1e 	bne	r9,zero,3ecc <___svfprintf_internal_r+0x1eb0>
    3e50:	8c40004c 	andi	r17,r17,1
    3e54:	88001d1e 	bne	r17,zero,3ecc <___svfprintf_internal_r+0x1eb0>
    3e58:	1805883a 	mov	r2,r3
    3e5c:	183edb0e 	bge	r3,zero,39cc <__alt_mem_Flash_flash_data+0xf40039cc>
    3e60:	0005883a 	mov	r2,zero
    3e64:	003ed906 	br	39cc <__alt_mem_Flash_flash_data+0xf40039cc>
    3e68:	d8802117 	ldw	r2,132(sp)
    3e6c:	003ec506 	br	3984 <__alt_mem_Flash_flash_data+0xf4003984>
    3e70:	d9003717 	ldw	r4,220(sp)
    3e74:	900b883a 	mov	r5,r18
    3e78:	000d883a 	mov	r6,zero
    3e7c:	000f883a 	mov	r7,zero
    3e80:	da004015 	stw	r8,256(sp)
    3e84:	da403f15 	stw	r9,252(sp)
    3e88:	da803e15 	stw	r10,248(sp)
    3e8c:	000fd540 	call	fd54 <__eqdf2>
    3e90:	da004017 	ldw	r8,256(sp)
    3e94:	da403f17 	ldw	r9,252(sp)
    3e98:	da803e17 	ldw	r10,248(sp)
    3e9c:	103f2c26 	beq	r2,zero,3b50 <__alt_mem_Flash_flash_data+0xf4003b50>
    3ea0:	00800044 	movi	r2,1
    3ea4:	1707c83a 	sub	r3,r2,fp
    3ea8:	d8c02615 	stw	r3,152(sp)
    3eac:	003f2906 	br	3b54 <__alt_mem_Flash_flash_data+0xf4003b54>
    3eb0:	db003417 	ldw	r12,208(sp)
    3eb4:	64800044 	addi	r18,r12,1
    3eb8:	9005883a 	mov	r2,r18
    3ebc:	903ec40e 	bge	r18,zero,39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3ec0:	003fdd06 	br	3e38 <__alt_mem_Flash_flash_data+0xf4003e38>
    3ec4:	0005883a 	mov	r2,zero
    3ec8:	003f5c06 	br	3c3c <__alt_mem_Flash_flash_data+0xf4003c3c>
    3ecc:	dac03417 	ldw	r11,208(sp)
    3ed0:	4a400044 	addi	r9,r9,1
    3ed4:	5a65883a 	add	r18,r11,r9
    3ed8:	9005883a 	mov	r2,r18
    3edc:	903ebc0e 	bge	r18,zero,39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3ee0:	003fd506 	br	3e38 <__alt_mem_Flash_flash_data+0xf4003e38>
    3ee4:	008000b4 	movhi	r2,2
    3ee8:	10baf884 	addi	r2,r2,-5150
    3eec:	d8802b15 	stw	r2,172(sp)
    3ef0:	003d2b06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3ef4:	00800c04 	movi	r2,48
    3ef8:	e0c00c04 	addi	r3,fp,48
    3efc:	d8802345 	stb	r2,141(sp)
    3f00:	d8c02385 	stb	r3,142(sp)
    3f04:	d88023c4 	addi	r2,sp,143
    3f08:	dd4022c4 	addi	r21,sp,139
    3f0c:	003f9e06 	br	3d88 <__alt_mem_Flash_flash_data+0xf4003d88>
    3f10:	4800081e 	bne	r9,zero,3f34 <___svfprintf_internal_r+0x1f18>
    3f14:	8c40004c 	andi	r17,r17,1
    3f18:	8800061e 	bne	r17,zero,3f34 <___svfprintf_internal_r+0x1f18>
    3f1c:	00800044 	movi	r2,1
    3f20:	1025883a 	mov	r18,r2
    3f24:	003eaa06 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3f28:	04800084 	movi	r18,2
    3f2c:	90e5c83a 	sub	r18,r18,r3
    3f30:	003fbd06 	br	3e28 <__alt_mem_Flash_flash_data+0xf4003e28>
    3f34:	4c800084 	addi	r18,r9,2
    3f38:	9005883a 	mov	r2,r18
    3f3c:	903ea40e 	bge	r18,zero,39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    3f40:	003fbd06 	br	3e38 <__alt_mem_Flash_flash_data+0xf4003e38>
    3f44:	dac02d17 	ldw	r11,180(sp)
    3f48:	5a400017 	ldw	r9,0(r11)
    3f4c:	5ac00104 	addi	r11,r11,4
    3f50:	dac02d15 	stw	r11,180(sp)
    3f54:	483e410e 	bge	r9,zero,385c <__alt_mem_Flash_flash_data+0xf400385c>
    3f58:	027fffc4 	movi	r9,-1
    3f5c:	1c000047 	ldb	r16,1(r3)
    3f60:	00388406 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
    3f64:	00800b44 	movi	r2,45
    3f68:	0739c83a 	sub	fp,zero,fp
    3f6c:	d8802305 	stb	r2,140(sp)
    3f70:	003f5e06 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    3f74:	0005883a 	mov	r2,zero
    3f78:	003f8c06 	br	3dac <__alt_mem_Flash_flash_data+0xf4003dac>
    3f7c:	88a2703a 	and	r17,r17,r2
    3f80:	883f8826 	beq	r17,zero,3da4 <__alt_mem_Flash_flash_data+0xf4003da4>
    3f84:	003f8606 	br	3da0 <__alt_mem_Flash_flash_data+0xf4003da0>
    3f88:	d8802344 	addi	r2,sp,141
    3f8c:	003f7e06 	br	3d88 <__alt_mem_Flash_flash_data+0xf4003d88>
    3f90:	d8c02617 	ldw	r3,152(sp)
    3f94:	003f4f06 	br	3cd4 <__alt_mem_Flash_flash_data+0xf4003cd4>
    3f98:	dac02f17 	ldw	r11,188(sp)
    3f9c:	00800304 	movi	r2,12
    3fa0:	58800015 	stw	r2,0(r11)
    3fa4:	00bfffc4 	movi	r2,-1
    3fa8:	0038e806 	br	234c <__alt_mem_Flash_flash_data+0xf400234c>

00003fac <___vfprintf_internal_r>:
    3fac:	deffb604 	addi	sp,sp,-296
    3fb0:	dfc04915 	stw	ra,292(sp)
    3fb4:	ddc04715 	stw	r23,284(sp)
    3fb8:	dd804615 	stw	r22,280(sp)
    3fbc:	282f883a 	mov	r23,r5
    3fc0:	202d883a 	mov	r22,r4
    3fc4:	d9802a15 	stw	r6,168(sp)
    3fc8:	d9c02d15 	stw	r7,180(sp)
    3fcc:	df004815 	stw	fp,288(sp)
    3fd0:	dd404515 	stw	r21,276(sp)
    3fd4:	dd004415 	stw	r20,272(sp)
    3fd8:	dcc04315 	stw	r19,268(sp)
    3fdc:	dc804215 	stw	r18,264(sp)
    3fe0:	dc404115 	stw	r17,260(sp)
    3fe4:	dc004015 	stw	r16,256(sp)
    3fe8:	00086d40 	call	86d4 <_localeconv_r>
    3fec:	10800017 	ldw	r2,0(r2)
    3ff0:	1009883a 	mov	r4,r2
    3ff4:	d8803515 	stw	r2,212(sp)
    3ff8:	0001f840 	call	1f84 <strlen>
    3ffc:	d8803815 	stw	r2,224(sp)
    4000:	b0000226 	beq	r22,zero,400c <___vfprintf_internal_r+0x60>
    4004:	b0800e17 	ldw	r2,56(r22)
    4008:	1000e126 	beq	r2,zero,4390 <___vfprintf_internal_r+0x3e4>
    400c:	b880030b 	ldhu	r2,12(r23)
    4010:	10c8000c 	andi	r3,r2,8192
    4014:	1800061e 	bne	r3,zero,4030 <___vfprintf_internal_r+0x84>
    4018:	b9001917 	ldw	r4,100(r23)
    401c:	00f7ffc4 	movi	r3,-8193
    4020:	10880014 	ori	r2,r2,8192
    4024:	20c6703a 	and	r3,r4,r3
    4028:	b880030d 	sth	r2,12(r23)
    402c:	b8c01915 	stw	r3,100(r23)
    4030:	10c0020c 	andi	r3,r2,8
    4034:	1800a726 	beq	r3,zero,42d4 <___vfprintf_internal_r+0x328>
    4038:	b8c00417 	ldw	r3,16(r23)
    403c:	1800a526 	beq	r3,zero,42d4 <___vfprintf_internal_r+0x328>
    4040:	1080068c 	andi	r2,r2,26
    4044:	00c00284 	movi	r3,10
    4048:	10c0aa26 	beq	r2,r3,42f4 <___vfprintf_internal_r+0x348>
    404c:	dac01e04 	addi	r11,sp,120
    4050:	db001dc4 	addi	r12,sp,119
    4054:	d8800404 	addi	r2,sp,16
    4058:	050000b4 	movhi	r20,2
    405c:	dac02815 	stw	r11,160(sp)
    4060:	5b17c83a 	sub	r11,r11,r12
    4064:	a53b0084 	addi	r20,r20,-5118
    4068:	db002915 	stw	r12,164(sp)
    406c:	d8801e15 	stw	r2,120(sp)
    4070:	d8002015 	stw	zero,128(sp)
    4074:	d8001f15 	stw	zero,124(sp)
    4078:	d8003315 	stw	zero,204(sp)
    407c:	d8003715 	stw	zero,220(sp)
    4080:	d8003915 	stw	zero,228(sp)
    4084:	1011883a 	mov	r8,r2
    4088:	d8003b15 	stw	zero,236(sp)
    408c:	d8003a15 	stw	zero,232(sp)
    4090:	d8002f15 	stw	zero,188(sp)
    4094:	dac03c15 	stw	r11,240(sp)
    4098:	db002a17 	ldw	r12,168(sp)
    409c:	60800007 	ldb	r2,0(r12)
    40a0:	1000be26 	beq	r2,zero,439c <___vfprintf_internal_r+0x3f0>
    40a4:	00c00944 	movi	r3,37
    40a8:	10c0bc26 	beq	r2,r3,439c <___vfprintf_internal_r+0x3f0>
    40ac:	6021883a 	mov	r16,r12
    40b0:	00000106 	br	40b8 <___vfprintf_internal_r+0x10c>
    40b4:	10c08426 	beq	r2,r3,42c8 <___vfprintf_internal_r+0x31c>
    40b8:	84000044 	addi	r16,r16,1
    40bc:	80800007 	ldb	r2,0(r16)
    40c0:	103ffc1e 	bne	r2,zero,40b4 <__alt_mem_Flash_flash_data+0xf40040b4>
    40c4:	dac02a17 	ldw	r11,168(sp)
    40c8:	82e3c83a 	sub	r17,r16,r11
    40cc:	88000f26 	beq	r17,zero,410c <___vfprintf_internal_r+0x160>
    40d0:	d8c02017 	ldw	r3,128(sp)
    40d4:	d8801f17 	ldw	r2,124(sp)
    40d8:	dac02a17 	ldw	r11,168(sp)
    40dc:	1c47883a 	add	r3,r3,r17
    40e0:	10800044 	addi	r2,r2,1
    40e4:	d8c02015 	stw	r3,128(sp)
    40e8:	42c00015 	stw	r11,0(r8)
    40ec:	44400115 	stw	r17,4(r8)
    40f0:	d8801f15 	stw	r2,124(sp)
    40f4:	00c001c4 	movi	r3,7
    40f8:	18809316 	blt	r3,r2,4348 <___vfprintf_internal_r+0x39c>
    40fc:	42000204 	addi	r8,r8,8
    4100:	db002f17 	ldw	r12,188(sp)
    4104:	6459883a 	add	r12,r12,r17
    4108:	db002f15 	stw	r12,188(sp)
    410c:	80800007 	ldb	r2,0(r16)
    4110:	10009426 	beq	r2,zero,4364 <___vfprintf_internal_r+0x3b8>
    4114:	80800044 	addi	r2,r16,1
    4118:	84000047 	ldb	r16,1(r16)
    411c:	d8002785 	stb	zero,158(sp)
    4120:	000d883a 	mov	r6,zero
    4124:	027fffc4 	movi	r9,-1
    4128:	d8002e15 	stw	zero,184(sp)
    412c:	0023883a 	mov	r17,zero
    4130:	01001604 	movi	r4,88
    4134:	01400244 	movi	r5,9
    4138:	02800a84 	movi	r10,42
    413c:	01c01b04 	movi	r7,108
    4140:	10c00044 	addi	r3,r2,1
    4144:	80bff804 	addi	r2,r16,-32
    4148:	2082cd36 	bltu	r4,r2,4c80 <___vfprintf_internal_r+0xcd4>
    414c:	100490ba 	slli	r2,r2,2
    4150:	02c00034 	movhi	r11,0
    4154:	5ad05904 	addi	r11,r11,16740
    4158:	12c5883a 	add	r2,r2,r11
    415c:	10800017 	ldw	r2,0(r2)
    4160:	1000683a 	jmp	r2
    4164:	00004a98 	cmpnei	zero,zero,298
    4168:	00004c80 	call	4c8 <getCommand+0xf0>
    416c:	00004c80 	call	4c8 <getCommand+0xf0>
    4170:	00004be8 	cmpgeui	zero,zero,303
    4174:	00004c80 	call	4c8 <getCommand+0xf0>
    4178:	00004c80 	call	4c8 <getCommand+0xf0>
    417c:	00004c80 	call	4c8 <getCommand+0xf0>
    4180:	00004c80 	call	4c8 <getCommand+0xf0>
    4184:	00004c80 	call	4c8 <getCommand+0xf0>
    4188:	00004c80 	call	4c8 <getCommand+0xf0>
    418c:	00004ab8 	rdprs	zero,zero,298
    4190:	00004ae4 	muli	zero,zero,299
    4194:	00004c80 	call	4c8 <getCommand+0xf0>
    4198:	000043a4 	muli	zero,zero,270
    419c:	000043b4 	movhi	zero,270
    41a0:	00004c80 	call	4c8 <getCommand+0xf0>
    41a4:	000043f4 	movhi	zero,271
    41a8:	00004404 	movi	zero,272
    41ac:	00004404 	movi	zero,272
    41b0:	00004404 	movi	zero,272
    41b4:	00004404 	movi	zero,272
    41b8:	00004404 	movi	zero,272
    41bc:	00004404 	movi	zero,272
    41c0:	00004404 	movi	zero,272
    41c4:	00004404 	movi	zero,272
    41c8:	00004404 	movi	zero,272
    41cc:	00004c80 	call	4c8 <getCommand+0xf0>
    41d0:	00004c80 	call	4c8 <getCommand+0xf0>
    41d4:	00004c80 	call	4c8 <getCommand+0xf0>
    41d8:	00004c80 	call	4c8 <getCommand+0xf0>
    41dc:	00004c80 	call	4c8 <getCommand+0xf0>
    41e0:	00004c80 	call	4c8 <getCommand+0xf0>
    41e4:	00004c80 	call	4c8 <getCommand+0xf0>
    41e8:	00004c80 	call	4c8 <getCommand+0xf0>
    41ec:	00004c80 	call	4c8 <getCommand+0xf0>
    41f0:	00004c80 	call	4c8 <getCommand+0xf0>
    41f4:	00004438 	rdprs	zero,zero,272
    41f8:	000048a8 	cmpgeui	zero,zero,290
    41fc:	00004c80 	call	4c8 <getCommand+0xf0>
    4200:	000048a8 	cmpgeui	zero,zero,290
    4204:	00004c80 	call	4c8 <getCommand+0xf0>
    4208:	00004c80 	call	4c8 <getCommand+0xf0>
    420c:	00004c80 	call	4c8 <getCommand+0xf0>
    4210:	00004c80 	call	4c8 <getCommand+0xf0>
    4214:	00004994 	movui	zero,294
    4218:	00004c80 	call	4c8 <getCommand+0xf0>
    421c:	00004c80 	call	4c8 <getCommand+0xf0>
    4220:	0000483c 	xorhi	zero,zero,288
    4224:	00004c80 	call	4c8 <getCommand+0xf0>
    4228:	00004c80 	call	4c8 <getCommand+0xf0>
    422c:	00004c80 	call	4c8 <getCommand+0xf0>
    4230:	00004c80 	call	4c8 <getCommand+0xf0>
    4234:	00004c80 	call	4c8 <getCommand+0xf0>
    4238:	00004878 	rdprs	zero,zero,289
    423c:	00004c80 	call	4c8 <getCommand+0xf0>
    4240:	00004c80 	call	4c8 <getCommand+0xf0>
    4244:	00004a3c 	xorhi	zero,zero,296
    4248:	00004c80 	call	4c8 <getCommand+0xf0>
    424c:	00004c80 	call	4c8 <getCommand+0xf0>
    4250:	00004c80 	call	4c8 <getCommand+0xf0>
    4254:	00004c80 	call	4c8 <getCommand+0xf0>
    4258:	00004c80 	call	4c8 <getCommand+0xf0>
    425c:	00004c80 	call	4c8 <getCommand+0xf0>
    4260:	00004c80 	call	4c8 <getCommand+0xf0>
    4264:	00004c80 	call	4c8 <getCommand+0xf0>
    4268:	00004c80 	call	4c8 <getCommand+0xf0>
    426c:	00004c80 	call	4c8 <getCommand+0xf0>
    4270:	00004af4 	movhi	zero,299
    4274:	000049a4 	muli	zero,zero,294
    4278:	000048a8 	cmpgeui	zero,zero,290
    427c:	000048a8 	cmpgeui	zero,zero,290
    4280:	000048a8 	cmpgeui	zero,zero,290
    4284:	000049e4 	muli	zero,zero,295
    4288:	000049a4 	muli	zero,zero,294
    428c:	00004c80 	call	4c8 <getCommand+0xf0>
    4290:	00004c80 	call	4c8 <getCommand+0xf0>
    4294:	000049f4 	movhi	zero,295
    4298:	00004c80 	call	4c8 <getCommand+0xf0>
    429c:	00004a08 	cmpgei	zero,zero,296
    42a0:	00004c44 	movi	zero,305
    42a4:	0000494c 	andi	zero,zero,293
    42a8:	00004bf8 	rdprs	zero,zero,303
    42ac:	00004c80 	call	4c8 <getCommand+0xf0>
    42b0:	00004b34 	movhi	zero,300
    42b4:	00004c80 	call	4c8 <getCommand+0xf0>
    42b8:	00004c08 	cmpgei	zero,zero,304
    42bc:	00004c80 	call	4c8 <getCommand+0xf0>
    42c0:	00004c80 	call	4c8 <getCommand+0xf0>
    42c4:	00004ba8 	cmpgeui	zero,zero,302
    42c8:	db002a17 	ldw	r12,168(sp)
    42cc:	8323c83a 	sub	r17,r16,r12
    42d0:	003f7e06 	br	40cc <__alt_mem_Flash_flash_data+0xf40040cc>
    42d4:	b009883a 	mov	r4,r22
    42d8:	b80b883a 	mov	r5,r23
    42dc:	0005fdc0 	call	5fdc <__swsetup_r>
    42e0:	10000c1e 	bne	r2,zero,4314 <___vfprintf_internal_r+0x368>
    42e4:	b880030b 	ldhu	r2,12(r23)
    42e8:	00c00284 	movi	r3,10
    42ec:	1080068c 	andi	r2,r2,26
    42f0:	10ff561e 	bne	r2,r3,404c <__alt_mem_Flash_flash_data+0xf400404c>
    42f4:	b880038f 	ldh	r2,14(r23)
    42f8:	103f5416 	blt	r2,zero,404c <__alt_mem_Flash_flash_data+0xf400404c>
    42fc:	d9802a17 	ldw	r6,168(sp)
    4300:	d9c02d17 	ldw	r7,180(sp)
    4304:	b009883a 	mov	r4,r22
    4308:	b80b883a 	mov	r5,r23
    430c:	0005f200 	call	5f20 <__sbprintf>
    4310:	00000106 	br	4318 <___vfprintf_internal_r+0x36c>
    4314:	00bfffc4 	movi	r2,-1
    4318:	dfc04917 	ldw	ra,292(sp)
    431c:	df004817 	ldw	fp,288(sp)
    4320:	ddc04717 	ldw	r23,284(sp)
    4324:	dd804617 	ldw	r22,280(sp)
    4328:	dd404517 	ldw	r21,276(sp)
    432c:	dd004417 	ldw	r20,272(sp)
    4330:	dcc04317 	ldw	r19,268(sp)
    4334:	dc804217 	ldw	r18,264(sp)
    4338:	dc404117 	ldw	r17,260(sp)
    433c:	dc004017 	ldw	r16,256(sp)
    4340:	dec04a04 	addi	sp,sp,296
    4344:	f800283a 	ret
    4348:	b009883a 	mov	r4,r22
    434c:	b80b883a 	mov	r5,r23
    4350:	d9801e04 	addi	r6,sp,120
    4354:	000b72c0 	call	b72c <__sprint_r>
    4358:	1000081e 	bne	r2,zero,437c <___vfprintf_internal_r+0x3d0>
    435c:	da000404 	addi	r8,sp,16
    4360:	003f6706 	br	4100 <__alt_mem_Flash_flash_data+0xf4004100>
    4364:	d8802017 	ldw	r2,128(sp)
    4368:	10000426 	beq	r2,zero,437c <___vfprintf_internal_r+0x3d0>
    436c:	b009883a 	mov	r4,r22
    4370:	b80b883a 	mov	r5,r23
    4374:	d9801e04 	addi	r6,sp,120
    4378:	000b72c0 	call	b72c <__sprint_r>
    437c:	b880030b 	ldhu	r2,12(r23)
    4380:	1080100c 	andi	r2,r2,64
    4384:	103fe31e 	bne	r2,zero,4314 <__alt_mem_Flash_flash_data+0xf4004314>
    4388:	d8802f17 	ldw	r2,188(sp)
    438c:	003fe206 	br	4318 <__alt_mem_Flash_flash_data+0xf4004318>
    4390:	b009883a 	mov	r4,r22
    4394:	000803c0 	call	803c <__sinit>
    4398:	003f1c06 	br	400c <__alt_mem_Flash_flash_data+0xf400400c>
    439c:	dc002a17 	ldw	r16,168(sp)
    43a0:	003f5a06 	br	410c <__alt_mem_Flash_flash_data+0xf400410c>
    43a4:	1805883a 	mov	r2,r3
    43a8:	8c400114 	ori	r17,r17,4
    43ac:	1c000007 	ldb	r16,0(r3)
    43b0:	003f6306 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    43b4:	1c000007 	ldb	r16,0(r3)
    43b8:	18800044 	addi	r2,r3,1
    43bc:	8286ad26 	beq	r16,r10,5e74 <___vfprintf_internal_r+0x1ec8>
    43c0:	82fff404 	addi	r11,r16,-48
    43c4:	1007883a 	mov	r3,r2
    43c8:	0013883a 	mov	r9,zero
    43cc:	2aff5d36 	bltu	r5,r11,4144 <__alt_mem_Flash_flash_data+0xf4004144>
    43d0:	1c000007 	ldb	r16,0(r3)
    43d4:	4a4002a4 	muli	r9,r9,10
    43d8:	18c00044 	addi	r3,r3,1
    43dc:	5a53883a 	add	r9,r11,r9
    43e0:	82fff404 	addi	r11,r16,-48
    43e4:	2afffa2e 	bgeu	r5,r11,43d0 <__alt_mem_Flash_flash_data+0xf40043d0>
    43e8:	483f560e 	bge	r9,zero,4144 <__alt_mem_Flash_flash_data+0xf4004144>
    43ec:	027fffc4 	movi	r9,-1
    43f0:	003f5406 	br	4144 <__alt_mem_Flash_flash_data+0xf4004144>
    43f4:	8c402014 	ori	r17,r17,128
    43f8:	1805883a 	mov	r2,r3
    43fc:	1c000007 	ldb	r16,0(r3)
    4400:	003f4f06 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4404:	1805883a 	mov	r2,r3
    4408:	d8002e15 	stw	zero,184(sp)
    440c:	82fff404 	addi	r11,r16,-48
    4410:	0019883a 	mov	r12,zero
    4414:	14000007 	ldb	r16,0(r2)
    4418:	630002a4 	muli	r12,r12,10
    441c:	18c00044 	addi	r3,r3,1
    4420:	1805883a 	mov	r2,r3
    4424:	62d9883a 	add	r12,r12,r11
    4428:	82fff404 	addi	r11,r16,-48
    442c:	2afff92e 	bgeu	r5,r11,4414 <__alt_mem_Flash_flash_data+0xf4004414>
    4430:	db002e15 	stw	r12,184(sp)
    4434:	003f4306 	br	4144 <__alt_mem_Flash_flash_data+0xf4004144>
    4438:	8c400414 	ori	r17,r17,16
    443c:	d8c02a15 	stw	r3,168(sp)
    4440:	d9802785 	stb	r6,158(sp)
    4444:	8880080c 	andi	r2,r17,32
    4448:	d8c02d17 	ldw	r3,180(sp)
    444c:	10015a26 	beq	r2,zero,49b8 <___vfprintf_internal_r+0xa0c>
    4450:	db002d17 	ldw	r12,180(sp)
    4454:	18800117 	ldw	r2,4(r3)
    4458:	1cc00017 	ldw	r19,0(r3)
    445c:	63000204 	addi	r12,r12,8
    4460:	db002d15 	stw	r12,180(sp)
    4464:	1039883a 	mov	fp,r2
    4468:	10044516 	blt	r2,zero,5580 <___vfprintf_internal_r+0x15d4>
    446c:	dd402783 	ldbu	r21,158(sp)
    4470:	da403215 	stw	r9,200(sp)
    4474:	00800044 	movi	r2,1
    4478:	9f06b03a 	or	r3,r19,fp
    447c:	48000216 	blt	r9,zero,4488 <___vfprintf_internal_r+0x4dc>
    4480:	013fdfc4 	movi	r4,-129
    4484:	8922703a 	and	r17,r17,r4
    4488:	1802071e 	bne	r3,zero,4ca8 <___vfprintf_internal_r+0xcfc>
    448c:	4802fa26 	beq	r9,zero,5078 <___vfprintf_internal_r+0x10cc>
    4490:	10803fcc 	andi	r2,r2,255
    4494:	00c00044 	movi	r3,1
    4498:	10c22926 	beq	r2,r3,4d40 <___vfprintf_internal_r+0xd94>
    449c:	00c00084 	movi	r3,2
    44a0:	10c31726 	beq	r2,r3,5100 <___vfprintf_internal_r+0x1154>
    44a4:	d8c01e04 	addi	r3,sp,120
    44a8:	9808d0fa 	srli	r4,r19,3
    44ac:	e00a977a 	slli	r5,fp,29
    44b0:	e038d0fa 	srli	fp,fp,3
    44b4:	9cc001cc 	andi	r19,r19,7
    44b8:	98800c04 	addi	r2,r19,48
    44bc:	18ffffc4 	addi	r3,r3,-1
    44c0:	2926b03a 	or	r19,r5,r4
    44c4:	18800005 	stb	r2,0(r3)
    44c8:	9f08b03a 	or	r4,r19,fp
    44cc:	203ff61e 	bne	r4,zero,44a8 <__alt_mem_Flash_flash_data+0xf40044a8>
    44d0:	8900004c 	andi	r4,r17,1
    44d4:	d8c03115 	stw	r3,196(sp)
    44d8:	2003931e 	bne	r4,zero,5328 <___vfprintf_internal_r+0x137c>
    44dc:	dac02817 	ldw	r11,160(sp)
    44e0:	58e5c83a 	sub	r18,r11,r3
    44e4:	9005883a 	mov	r2,r18
    44e8:	9240010e 	bge	r18,r9,44f0 <___vfprintf_internal_r+0x544>
    44ec:	4805883a 	mov	r2,r9
    44f0:	d8802b15 	stw	r2,172(sp)
    44f4:	d8003415 	stw	zero,208(sp)
    44f8:	a8803fcc 	andi	r2,r21,255
    44fc:	1080201c 	xori	r2,r2,128
    4500:	10bfe004 	addi	r2,r2,-128
    4504:	10000326 	beq	r2,zero,4514 <___vfprintf_internal_r+0x568>
    4508:	db002b17 	ldw	r12,172(sp)
    450c:	63000044 	addi	r12,r12,1
    4510:	db002b15 	stw	r12,172(sp)
    4514:	88c0008c 	andi	r3,r17,2
    4518:	d8c02c15 	stw	r3,176(sp)
    451c:	18000326 	beq	r3,zero,452c <___vfprintf_internal_r+0x580>
    4520:	dac02b17 	ldw	r11,172(sp)
    4524:	5ac00084 	addi	r11,r11,2
    4528:	dac02b15 	stw	r11,172(sp)
    452c:	8b00210c 	andi	r12,r17,132
    4530:	db003015 	stw	r12,192(sp)
    4534:	6001da1e 	bne	r12,zero,4ca0 <___vfprintf_internal_r+0xcf4>
    4538:	dac02e17 	ldw	r11,184(sp)
    453c:	db002b17 	ldw	r12,172(sp)
    4540:	5b39c83a 	sub	fp,r11,r12
    4544:	0701d60e 	bge	zero,fp,4ca0 <___vfprintf_internal_r+0xcf4>
    4548:	02400404 	movi	r9,16
    454c:	d8c02017 	ldw	r3,128(sp)
    4550:	d8801f17 	ldw	r2,124(sp)
    4554:	4f053c0e 	bge	r9,fp,5a48 <___vfprintf_internal_r+0x1a9c>
    4558:	014000b4 	movhi	r5,2
    455c:	297b0484 	addi	r5,r5,-5102
    4560:	d9403615 	stw	r5,216(sp)
    4564:	482b883a 	mov	r21,r9
    4568:	04c001c4 	movi	r19,7
    456c:	00000306 	br	457c <___vfprintf_internal_r+0x5d0>
    4570:	e73ffc04 	addi	fp,fp,-16
    4574:	42000204 	addi	r8,r8,8
    4578:	af00130e 	bge	r21,fp,45c8 <___vfprintf_internal_r+0x61c>
    457c:	02c000b4 	movhi	r11,2
    4580:	18c00404 	addi	r3,r3,16
    4584:	10800044 	addi	r2,r2,1
    4588:	5afb0484 	addi	r11,r11,-5102
    458c:	42c00015 	stw	r11,0(r8)
    4590:	45400115 	stw	r21,4(r8)
    4594:	d8c02015 	stw	r3,128(sp)
    4598:	d8801f15 	stw	r2,124(sp)
    459c:	98bff40e 	bge	r19,r2,4570 <__alt_mem_Flash_flash_data+0xf4004570>
    45a0:	b009883a 	mov	r4,r22
    45a4:	b80b883a 	mov	r5,r23
    45a8:	d9801e04 	addi	r6,sp,120
    45ac:	000b72c0 	call	b72c <__sprint_r>
    45b0:	103f721e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    45b4:	e73ffc04 	addi	fp,fp,-16
    45b8:	d8c02017 	ldw	r3,128(sp)
    45bc:	d8801f17 	ldw	r2,124(sp)
    45c0:	da000404 	addi	r8,sp,16
    45c4:	af3fed16 	blt	r21,fp,457c <__alt_mem_Flash_flash_data+0xf400457c>
    45c8:	db003617 	ldw	r12,216(sp)
    45cc:	e0c7883a 	add	r3,fp,r3
    45d0:	10800044 	addi	r2,r2,1
    45d4:	43000015 	stw	r12,0(r8)
    45d8:	47000115 	stw	fp,4(r8)
    45dc:	d8c02015 	stw	r3,128(sp)
    45e0:	d8801f15 	stw	r2,124(sp)
    45e4:	010001c4 	movi	r4,7
    45e8:	20830e16 	blt	r4,r2,5224 <___vfprintf_internal_r+0x1278>
    45ec:	d8802787 	ldb	r2,158(sp)
    45f0:	42000204 	addi	r8,r8,8
    45f4:	10000c26 	beq	r2,zero,4628 <___vfprintf_internal_r+0x67c>
    45f8:	d8801f17 	ldw	r2,124(sp)
    45fc:	d9002784 	addi	r4,sp,158
    4600:	18c00044 	addi	r3,r3,1
    4604:	10800044 	addi	r2,r2,1
    4608:	41000015 	stw	r4,0(r8)
    460c:	01000044 	movi	r4,1
    4610:	41000115 	stw	r4,4(r8)
    4614:	d8c02015 	stw	r3,128(sp)
    4618:	d8801f15 	stw	r2,124(sp)
    461c:	010001c4 	movi	r4,7
    4620:	2082a716 	blt	r4,r2,50c0 <___vfprintf_internal_r+0x1114>
    4624:	42000204 	addi	r8,r8,8
    4628:	dac02c17 	ldw	r11,176(sp)
    462c:	58000c26 	beq	r11,zero,4660 <___vfprintf_internal_r+0x6b4>
    4630:	d8801f17 	ldw	r2,124(sp)
    4634:	d9002704 	addi	r4,sp,156
    4638:	18c00084 	addi	r3,r3,2
    463c:	10800044 	addi	r2,r2,1
    4640:	41000015 	stw	r4,0(r8)
    4644:	01000084 	movi	r4,2
    4648:	41000115 	stw	r4,4(r8)
    464c:	d8c02015 	stw	r3,128(sp)
    4650:	d8801f15 	stw	r2,124(sp)
    4654:	010001c4 	movi	r4,7
    4658:	2082a116 	blt	r4,r2,50e0 <___vfprintf_internal_r+0x1134>
    465c:	42000204 	addi	r8,r8,8
    4660:	db003017 	ldw	r12,192(sp)
    4664:	00802004 	movi	r2,128
    4668:	60820326 	beq	r12,r2,4e78 <___vfprintf_internal_r+0xecc>
    466c:	db003217 	ldw	r12,200(sp)
    4670:	64abc83a 	sub	r21,r12,r18
    4674:	0540260e 	bge	zero,r21,4710 <___vfprintf_internal_r+0x764>
    4678:	07000404 	movi	fp,16
    467c:	d8801f17 	ldw	r2,124(sp)
    4680:	e544570e 	bge	fp,r21,57e0 <___vfprintf_internal_r+0x1834>
    4684:	014000b4 	movhi	r5,2
    4688:	297b0084 	addi	r5,r5,-5118
    468c:	d9402c15 	stw	r5,176(sp)
    4690:	04c001c4 	movi	r19,7
    4694:	00000306 	br	46a4 <___vfprintf_internal_r+0x6f8>
    4698:	ad7ffc04 	addi	r21,r21,-16
    469c:	42000204 	addi	r8,r8,8
    46a0:	e540110e 	bge	fp,r21,46e8 <___vfprintf_internal_r+0x73c>
    46a4:	18c00404 	addi	r3,r3,16
    46a8:	10800044 	addi	r2,r2,1
    46ac:	45000015 	stw	r20,0(r8)
    46b0:	47000115 	stw	fp,4(r8)
    46b4:	d8c02015 	stw	r3,128(sp)
    46b8:	d8801f15 	stw	r2,124(sp)
    46bc:	98bff60e 	bge	r19,r2,4698 <__alt_mem_Flash_flash_data+0xf4004698>
    46c0:	b009883a 	mov	r4,r22
    46c4:	b80b883a 	mov	r5,r23
    46c8:	d9801e04 	addi	r6,sp,120
    46cc:	000b72c0 	call	b72c <__sprint_r>
    46d0:	103f2a1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    46d4:	ad7ffc04 	addi	r21,r21,-16
    46d8:	d8c02017 	ldw	r3,128(sp)
    46dc:	d8801f17 	ldw	r2,124(sp)
    46e0:	da000404 	addi	r8,sp,16
    46e4:	e57fef16 	blt	fp,r21,46a4 <__alt_mem_Flash_flash_data+0xf40046a4>
    46e8:	dac02c17 	ldw	r11,176(sp)
    46ec:	1d47883a 	add	r3,r3,r21
    46f0:	10800044 	addi	r2,r2,1
    46f4:	42c00015 	stw	r11,0(r8)
    46f8:	45400115 	stw	r21,4(r8)
    46fc:	d8c02015 	stw	r3,128(sp)
    4700:	d8801f15 	stw	r2,124(sp)
    4704:	010001c4 	movi	r4,7
    4708:	20826516 	blt	r4,r2,50a0 <___vfprintf_internal_r+0x10f4>
    470c:	42000204 	addi	r8,r8,8
    4710:	8880400c 	andi	r2,r17,256
    4714:	1001901e 	bne	r2,zero,4d58 <___vfprintf_internal_r+0xdac>
    4718:	d8801f17 	ldw	r2,124(sp)
    471c:	db003117 	ldw	r12,196(sp)
    4720:	1c87883a 	add	r3,r3,r18
    4724:	10800044 	addi	r2,r2,1
    4728:	43000015 	stw	r12,0(r8)
    472c:	44800115 	stw	r18,4(r8)
    4730:	d8c02015 	stw	r3,128(sp)
    4734:	d8801f15 	stw	r2,124(sp)
    4738:	010001c4 	movi	r4,7
    473c:	20824016 	blt	r4,r2,5040 <___vfprintf_internal_r+0x1094>
    4740:	42000204 	addi	r8,r8,8
    4744:	8c40010c 	andi	r17,r17,4
    4748:	88003126 	beq	r17,zero,4810 <___vfprintf_internal_r+0x864>
    474c:	db002e17 	ldw	r12,184(sp)
    4750:	dac02b17 	ldw	r11,172(sp)
    4754:	62e1c83a 	sub	r16,r12,r11
    4758:	04002d0e 	bge	zero,r16,4810 <___vfprintf_internal_r+0x864>
    475c:	04400404 	movi	r17,16
    4760:	d8801f17 	ldw	r2,124(sp)
    4764:	8c05150e 	bge	r17,r16,5bbc <___vfprintf_internal_r+0x1c10>
    4768:	010000b4 	movhi	r4,2
    476c:	213b0484 	addi	r4,r4,-5102
    4770:	d9003615 	stw	r4,216(sp)
    4774:	048001c4 	movi	r18,7
    4778:	00000306 	br	4788 <___vfprintf_internal_r+0x7dc>
    477c:	843ffc04 	addi	r16,r16,-16
    4780:	42000204 	addi	r8,r8,8
    4784:	8c00130e 	bge	r17,r16,47d4 <___vfprintf_internal_r+0x828>
    4788:	014000b4 	movhi	r5,2
    478c:	18c00404 	addi	r3,r3,16
    4790:	10800044 	addi	r2,r2,1
    4794:	297b0484 	addi	r5,r5,-5102
    4798:	41400015 	stw	r5,0(r8)
    479c:	44400115 	stw	r17,4(r8)
    47a0:	d8c02015 	stw	r3,128(sp)
    47a4:	d8801f15 	stw	r2,124(sp)
    47a8:	90bff40e 	bge	r18,r2,477c <__alt_mem_Flash_flash_data+0xf400477c>
    47ac:	b009883a 	mov	r4,r22
    47b0:	b80b883a 	mov	r5,r23
    47b4:	d9801e04 	addi	r6,sp,120
    47b8:	000b72c0 	call	b72c <__sprint_r>
    47bc:	103eef1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    47c0:	843ffc04 	addi	r16,r16,-16
    47c4:	d8c02017 	ldw	r3,128(sp)
    47c8:	d8801f17 	ldw	r2,124(sp)
    47cc:	da000404 	addi	r8,sp,16
    47d0:	8c3fed16 	blt	r17,r16,4788 <__alt_mem_Flash_flash_data+0xf4004788>
    47d4:	dac03617 	ldw	r11,216(sp)
    47d8:	1c07883a 	add	r3,r3,r16
    47dc:	10800044 	addi	r2,r2,1
    47e0:	42c00015 	stw	r11,0(r8)
    47e4:	44000115 	stw	r16,4(r8)
    47e8:	d8c02015 	stw	r3,128(sp)
    47ec:	d8801f15 	stw	r2,124(sp)
    47f0:	010001c4 	movi	r4,7
    47f4:	2080060e 	bge	r4,r2,4810 <___vfprintf_internal_r+0x864>
    47f8:	b009883a 	mov	r4,r22
    47fc:	b80b883a 	mov	r5,r23
    4800:	d9801e04 	addi	r6,sp,120
    4804:	000b72c0 	call	b72c <__sprint_r>
    4808:	103edc1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    480c:	d8c02017 	ldw	r3,128(sp)
    4810:	d8802b17 	ldw	r2,172(sp)
    4814:	db002e17 	ldw	r12,184(sp)
    4818:	1300010e 	bge	r2,r12,4820 <___vfprintf_internal_r+0x874>
    481c:	6005883a 	mov	r2,r12
    4820:	dac02f17 	ldw	r11,188(sp)
    4824:	5897883a 	add	r11,r11,r2
    4828:	dac02f15 	stw	r11,188(sp)
    482c:	18020c1e 	bne	r3,zero,5060 <___vfprintf_internal_r+0x10b4>
    4830:	d8001f15 	stw	zero,124(sp)
    4834:	da000404 	addi	r8,sp,16
    4838:	003e1706 	br	4098 <__alt_mem_Flash_flash_data+0xf4004098>
    483c:	8c400414 	ori	r17,r17,16
    4840:	d8c02a15 	stw	r3,168(sp)
    4844:	8880080c 	andi	r2,r17,32
    4848:	10010126 	beq	r2,zero,4c50 <___vfprintf_internal_r+0xca4>
    484c:	db002d17 	ldw	r12,180(sp)
    4850:	0005883a 	mov	r2,zero
    4854:	64c00017 	ldw	r19,0(r12)
    4858:	67000117 	ldw	fp,4(r12)
    485c:	63000204 	addi	r12,r12,8
    4860:	db002d15 	stw	r12,180(sp)
    4864:	9f06b03a 	or	r3,r19,fp
    4868:	d8002785 	stb	zero,158(sp)
    486c:	da403215 	stw	r9,200(sp)
    4870:	002b883a 	mov	r21,zero
    4874:	003f0106 	br	447c <__alt_mem_Flash_flash_data+0xf400447c>
    4878:	8c400414 	ori	r17,r17,16
    487c:	d8c02a15 	stw	r3,168(sp)
    4880:	8880080c 	andi	r2,r17,32
    4884:	1000e326 	beq	r2,zero,4c14 <___vfprintf_internal_r+0xc68>
    4888:	dac02d17 	ldw	r11,180(sp)
    488c:	00800044 	movi	r2,1
    4890:	5cc00017 	ldw	r19,0(r11)
    4894:	5f000117 	ldw	fp,4(r11)
    4898:	5ac00204 	addi	r11,r11,8
    489c:	dac02d15 	stw	r11,180(sp)
    48a0:	9f06b03a 	or	r3,r19,fp
    48a4:	003ff006 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    48a8:	db002d17 	ldw	r12,180(sp)
    48ac:	dac02d17 	ldw	r11,180(sp)
    48b0:	d8c02a15 	stw	r3,168(sp)
    48b4:	63000017 	ldw	r12,0(r12)
    48b8:	5ac00117 	ldw	r11,4(r11)
    48bc:	d9802785 	stb	r6,158(sp)
    48c0:	6009883a 	mov	r4,r12
    48c4:	580b883a 	mov	r5,r11
    48c8:	db003715 	stw	r12,220(sp)
    48cc:	da003f15 	stw	r8,252(sp)
    48d0:	da403e15 	stw	r9,248(sp)
    48d4:	dac03915 	stw	r11,228(sp)
    48d8:	000a2280 	call	a228 <__fpclassifyd>
    48dc:	db002d17 	ldw	r12,180(sp)
    48e0:	04800044 	movi	r18,1
    48e4:	da003f17 	ldw	r8,252(sp)
    48e8:	64c00204 	addi	r19,r12,8
    48ec:	da403e17 	ldw	r9,248(sp)
    48f0:	d9003717 	ldw	r4,220(sp)
    48f4:	d9403917 	ldw	r5,228(sp)
    48f8:	14832b1e 	bne	r2,r18,55a8 <___vfprintf_internal_r+0x15fc>
    48fc:	000d883a 	mov	r6,zero
    4900:	000f883a 	mov	r7,zero
    4904:	000feb80 	call	feb8 <__ledf2>
    4908:	da003f17 	ldw	r8,252(sp)
    490c:	1004b716 	blt	r2,zero,5bec <___vfprintf_internal_r+0x1c40>
    4910:	dd402783 	ldbu	r21,158(sp)
    4914:	008011c4 	movi	r2,71
    4918:	14040e0e 	bge	r2,r16,5954 <___vfprintf_internal_r+0x19a8>
    491c:	00c000b4 	movhi	r3,2
    4920:	18fae904 	addi	r3,r3,-5212
    4924:	d8c03115 	stw	r3,196(sp)
    4928:	02c000c4 	movi	r11,3
    492c:	00bfdfc4 	movi	r2,-129
    4930:	dac02b15 	stw	r11,172(sp)
    4934:	88a2703a 	and	r17,r17,r2
    4938:	dcc02d15 	stw	r19,180(sp)
    493c:	5825883a 	mov	r18,r11
    4940:	d8003215 	stw	zero,200(sp)
    4944:	d8003415 	stw	zero,208(sp)
    4948:	003eeb06 	br	44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    494c:	db002d17 	ldw	r12,180(sp)
    4950:	00800c04 	movi	r2,48
    4954:	d8802705 	stb	r2,156(sp)
    4958:	64c00017 	ldw	r19,0(r12)
    495c:	00801e04 	movi	r2,120
    4960:	d8802745 	stb	r2,157(sp)
    4964:	008000b4 	movhi	r2,2
    4968:	10baf104 	addi	r2,r2,-5180
    496c:	63000104 	addi	r12,r12,4
    4970:	d8c02a15 	stw	r3,168(sp)
    4974:	d8803b15 	stw	r2,236(sp)
    4978:	0039883a 	mov	fp,zero
    497c:	8c400094 	ori	r17,r17,2
    4980:	db002d15 	stw	r12,180(sp)
    4984:	00800084 	movi	r2,2
    4988:	04001e04 	movi	r16,120
    498c:	9807883a 	mov	r3,r19
    4990:	003fb506 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    4994:	8c400214 	ori	r17,r17,8
    4998:	1805883a 	mov	r2,r3
    499c:	1c000007 	ldb	r16,0(r3)
    49a0:	003de706 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    49a4:	d8c02a15 	stw	r3,168(sp)
    49a8:	d9802785 	stb	r6,158(sp)
    49ac:	8880080c 	andi	r2,r17,32
    49b0:	d8c02d17 	ldw	r3,180(sp)
    49b4:	103ea61e 	bne	r2,zero,4450 <__alt_mem_Flash_flash_data+0xf4004450>
    49b8:	8880040c 	andi	r2,r17,16
    49bc:	1002221e 	bne	r2,zero,5248 <___vfprintf_internal_r+0x129c>
    49c0:	8880100c 	andi	r2,r17,64
    49c4:	10022026 	beq	r2,zero,5248 <___vfprintf_internal_r+0x129c>
    49c8:	1cc0000f 	ldh	r19,0(r3)
    49cc:	db002d17 	ldw	r12,180(sp)
    49d0:	9839d7fa 	srai	fp,r19,31
    49d4:	63000104 	addi	r12,r12,4
    49d8:	db002d15 	stw	r12,180(sp)
    49dc:	e005883a 	mov	r2,fp
    49e0:	003ea106 	br	4468 <__alt_mem_Flash_flash_data+0xf4004468>
    49e4:	8c401014 	ori	r17,r17,64
    49e8:	1805883a 	mov	r2,r3
    49ec:	1c000007 	ldb	r16,0(r3)
    49f0:	003dd306 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    49f4:	1c000007 	ldb	r16,0(r3)
    49f8:	81c3e926 	beq	r16,r7,59a0 <___vfprintf_internal_r+0x19f4>
    49fc:	8c400414 	ori	r17,r17,16
    4a00:	1805883a 	mov	r2,r3
    4a04:	003dce06 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4a08:	d8c02a15 	stw	r3,168(sp)
    4a0c:	d9802785 	stb	r6,158(sp)
    4a10:	8880080c 	andi	r2,r17,32
    4a14:	10034726 	beq	r2,zero,5734 <___vfprintf_internal_r+0x1788>
    4a18:	db002d17 	ldw	r12,180(sp)
    4a1c:	dac02f17 	ldw	r11,188(sp)
    4a20:	60800017 	ldw	r2,0(r12)
    4a24:	5807d7fa 	srai	r3,r11,31
    4a28:	63000104 	addi	r12,r12,4
    4a2c:	db002d15 	stw	r12,180(sp)
    4a30:	12c00015 	stw	r11,0(r2)
    4a34:	10c00115 	stw	r3,4(r2)
    4a38:	003d9706 	br	4098 <__alt_mem_Flash_flash_data+0xf4004098>
    4a3c:	030000b4 	movhi	r12,2
    4a40:	633aec04 	addi	r12,r12,-5200
    4a44:	d8c02a15 	stw	r3,168(sp)
    4a48:	d9802785 	stb	r6,158(sp)
    4a4c:	db003b15 	stw	r12,236(sp)
    4a50:	88c0080c 	andi	r3,r17,32
    4a54:	d8802d17 	ldw	r2,180(sp)
    4a58:	18005b26 	beq	r3,zero,4bc8 <___vfprintf_internal_r+0xc1c>
    4a5c:	dac02d17 	ldw	r11,180(sp)
    4a60:	14c00017 	ldw	r19,0(r2)
    4a64:	17000117 	ldw	fp,4(r2)
    4a68:	5ac00204 	addi	r11,r11,8
    4a6c:	dac02d15 	stw	r11,180(sp)
    4a70:	8880004c 	andi	r2,r17,1
    4a74:	10022926 	beq	r2,zero,531c <___vfprintf_internal_r+0x1370>
    4a78:	9f06b03a 	or	r3,r19,fp
    4a7c:	18032b26 	beq	r3,zero,572c <___vfprintf_internal_r+0x1780>
    4a80:	00800c04 	movi	r2,48
    4a84:	d8802705 	stb	r2,156(sp)
    4a88:	dc002745 	stb	r16,157(sp)
    4a8c:	8c400094 	ori	r17,r17,2
    4a90:	00800084 	movi	r2,2
    4a94:	003f7406 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    4a98:	30803fcc 	andi	r2,r6,255
    4a9c:	1080201c 	xori	r2,r2,128
    4aa0:	10bfe004 	addi	r2,r2,-128
    4aa4:	1003351e 	bne	r2,zero,577c <___vfprintf_internal_r+0x17d0>
    4aa8:	1805883a 	mov	r2,r3
    4aac:	01800804 	movi	r6,32
    4ab0:	1c000007 	ldb	r16,0(r3)
    4ab4:	003da206 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4ab8:	dac02d17 	ldw	r11,180(sp)
    4abc:	db002d17 	ldw	r12,180(sp)
    4ac0:	5ac00017 	ldw	r11,0(r11)
    4ac4:	dac02e15 	stw	r11,184(sp)
    4ac8:	62c00104 	addi	r11,r12,4
    4acc:	db002e17 	ldw	r12,184(sp)
    4ad0:	6003ad16 	blt	r12,zero,5988 <___vfprintf_internal_r+0x19dc>
    4ad4:	dac02d15 	stw	r11,180(sp)
    4ad8:	1805883a 	mov	r2,r3
    4adc:	1c000007 	ldb	r16,0(r3)
    4ae0:	003d9706 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4ae4:	1805883a 	mov	r2,r3
    4ae8:	01800ac4 	movi	r6,43
    4aec:	1c000007 	ldb	r16,0(r3)
    4af0:	003d9306 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4af4:	db002d17 	ldw	r12,180(sp)
    4af8:	d8c02a15 	stw	r3,168(sp)
    4afc:	00c00044 	movi	r3,1
    4b00:	60800017 	ldw	r2,0(r12)
    4b04:	63000104 	addi	r12,r12,4
    4b08:	d8c02b15 	stw	r3,172(sp)
    4b0c:	d8002785 	stb	zero,158(sp)
    4b10:	d8801405 	stb	r2,80(sp)
    4b14:	db002d15 	stw	r12,180(sp)
    4b18:	dac01404 	addi	r11,sp,80
    4b1c:	1825883a 	mov	r18,r3
    4b20:	d8003215 	stw	zero,200(sp)
    4b24:	d8003415 	stw	zero,208(sp)
    4b28:	dac03115 	stw	r11,196(sp)
    4b2c:	0005883a 	mov	r2,zero
    4b30:	003e7806 	br	4514 <__alt_mem_Flash_flash_data+0xf4004514>
    4b34:	dac02d17 	ldw	r11,180(sp)
    4b38:	db002d17 	ldw	r12,180(sp)
    4b3c:	d8c02a15 	stw	r3,168(sp)
    4b40:	5ac00017 	ldw	r11,0(r11)
    4b44:	d8002785 	stb	zero,158(sp)
    4b48:	64c00104 	addi	r19,r12,4
    4b4c:	dac03115 	stw	r11,196(sp)
    4b50:	5803fe26 	beq	r11,zero,5b4c <___vfprintf_internal_r+0x1ba0>
    4b54:	d9003117 	ldw	r4,196(sp)
    4b58:	4803b416 	blt	r9,zero,5a2c <___vfprintf_internal_r+0x1a80>
    4b5c:	480d883a 	mov	r6,r9
    4b60:	000b883a 	mov	r5,zero
    4b64:	da003f15 	stw	r8,252(sp)
    4b68:	da403e15 	stw	r9,248(sp)
    4b6c:	00090680 	call	9068 <memchr>
    4b70:	da003f17 	ldw	r8,252(sp)
    4b74:	da403e17 	ldw	r9,248(sp)
    4b78:	10043026 	beq	r2,zero,5c3c <___vfprintf_internal_r+0x1c90>
    4b7c:	d8c03117 	ldw	r3,196(sp)
    4b80:	10e5c83a 	sub	r18,r2,r3
    4b84:	4c836b16 	blt	r9,r18,5934 <___vfprintf_internal_r+0x1988>
    4b88:	9005883a 	mov	r2,r18
    4b8c:	9003ac16 	blt	r18,zero,5a40 <___vfprintf_internal_r+0x1a94>
    4b90:	dd402783 	ldbu	r21,158(sp)
    4b94:	d8802b15 	stw	r2,172(sp)
    4b98:	dcc02d15 	stw	r19,180(sp)
    4b9c:	d8003215 	stw	zero,200(sp)
    4ba0:	d8003415 	stw	zero,208(sp)
    4ba4:	003e5406 	br	44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    4ba8:	008000b4 	movhi	r2,2
    4bac:	10baf104 	addi	r2,r2,-5180
    4bb0:	d8c02a15 	stw	r3,168(sp)
    4bb4:	d8803b15 	stw	r2,236(sp)
    4bb8:	d9802785 	stb	r6,158(sp)
    4bbc:	88c0080c 	andi	r3,r17,32
    4bc0:	d8802d17 	ldw	r2,180(sp)
    4bc4:	183fa51e 	bne	r3,zero,4a5c <__alt_mem_Flash_flash_data+0xf4004a5c>
    4bc8:	88c0040c 	andi	r3,r17,16
    4bcc:	1802ee26 	beq	r3,zero,5788 <___vfprintf_internal_r+0x17dc>
    4bd0:	db002d17 	ldw	r12,180(sp)
    4bd4:	14c00017 	ldw	r19,0(r2)
    4bd8:	0039883a 	mov	fp,zero
    4bdc:	63000104 	addi	r12,r12,4
    4be0:	db002d15 	stw	r12,180(sp)
    4be4:	003fa206 	br	4a70 <__alt_mem_Flash_flash_data+0xf4004a70>
    4be8:	8c400054 	ori	r17,r17,1
    4bec:	1805883a 	mov	r2,r3
    4bf0:	1c000007 	ldb	r16,0(r3)
    4bf4:	003d5206 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4bf8:	8c400814 	ori	r17,r17,32
    4bfc:	1805883a 	mov	r2,r3
    4c00:	1c000007 	ldb	r16,0(r3)
    4c04:	003d4e06 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    4c08:	d8c02a15 	stw	r3,168(sp)
    4c0c:	8880080c 	andi	r2,r17,32
    4c10:	103f1d1e 	bne	r2,zero,4888 <__alt_mem_Flash_flash_data+0xf4004888>
    4c14:	8880040c 	andi	r2,r17,16
    4c18:	1001b81e 	bne	r2,zero,52fc <___vfprintf_internal_r+0x1350>
    4c1c:	8880100c 	andi	r2,r17,64
    4c20:	1001b626 	beq	r2,zero,52fc <___vfprintf_internal_r+0x1350>
    4c24:	dac02d17 	ldw	r11,180(sp)
    4c28:	0039883a 	mov	fp,zero
    4c2c:	00800044 	movi	r2,1
    4c30:	5cc0000b 	ldhu	r19,0(r11)
    4c34:	5ac00104 	addi	r11,r11,4
    4c38:	dac02d15 	stw	r11,180(sp)
    4c3c:	9807883a 	mov	r3,r19
    4c40:	003f0906 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    4c44:	d8c02a15 	stw	r3,168(sp)
    4c48:	8880080c 	andi	r2,r17,32
    4c4c:	103eff1e 	bne	r2,zero,484c <__alt_mem_Flash_flash_data+0xf400484c>
    4c50:	8880040c 	andi	r2,r17,16
    4c54:	1001a11e 	bne	r2,zero,52dc <___vfprintf_internal_r+0x1330>
    4c58:	8880100c 	andi	r2,r17,64
    4c5c:	10019f26 	beq	r2,zero,52dc <___vfprintf_internal_r+0x1330>
    4c60:	db002d17 	ldw	r12,180(sp)
    4c64:	0039883a 	mov	fp,zero
    4c68:	0005883a 	mov	r2,zero
    4c6c:	64c0000b 	ldhu	r19,0(r12)
    4c70:	63000104 	addi	r12,r12,4
    4c74:	db002d15 	stw	r12,180(sp)
    4c78:	9807883a 	mov	r3,r19
    4c7c:	003efa06 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    4c80:	d8c02a15 	stw	r3,168(sp)
    4c84:	d9802785 	stb	r6,158(sp)
    4c88:	803db626 	beq	r16,zero,4364 <__alt_mem_Flash_flash_data+0xf4004364>
    4c8c:	00c00044 	movi	r3,1
    4c90:	d8c02b15 	stw	r3,172(sp)
    4c94:	dc001405 	stb	r16,80(sp)
    4c98:	d8002785 	stb	zero,158(sp)
    4c9c:	003f9e06 	br	4b18 <__alt_mem_Flash_flash_data+0xf4004b18>
    4ca0:	d8c02017 	ldw	r3,128(sp)
    4ca4:	003e5306 	br	45f4 <__alt_mem_Flash_flash_data+0xf40045f4>
    4ca8:	10803fcc 	andi	r2,r2,255
    4cac:	00c00044 	movi	r3,1
    4cb0:	10fdfa1e 	bne	r2,r3,449c <__alt_mem_Flash_flash_data+0xf400449c>
    4cb4:	e000021e 	bne	fp,zero,4cc0 <___vfprintf_internal_r+0xd14>
    4cb8:	00800244 	movi	r2,9
    4cbc:	14c0202e 	bgeu	r2,r19,4d40 <___vfprintf_internal_r+0xd94>
    4cc0:	dc002b15 	stw	r16,172(sp)
    4cc4:	dc402c15 	stw	r17,176(sp)
    4cc8:	9821883a 	mov	r16,r19
    4ccc:	e023883a 	mov	r17,fp
    4cd0:	dc801e04 	addi	r18,sp,120
    4cd4:	4827883a 	mov	r19,r9
    4cd8:	4039883a 	mov	fp,r8
    4cdc:	8009883a 	mov	r4,r16
    4ce0:	880b883a 	mov	r5,r17
    4ce4:	01800284 	movi	r6,10
    4ce8:	000f883a 	mov	r7,zero
    4cec:	000e5300 	call	e530 <__umoddi3>
    4cf0:	10800c04 	addi	r2,r2,48
    4cf4:	94bfffc4 	addi	r18,r18,-1
    4cf8:	8009883a 	mov	r4,r16
    4cfc:	880b883a 	mov	r5,r17
    4d00:	01800284 	movi	r6,10
    4d04:	000f883a 	mov	r7,zero
    4d08:	90800005 	stb	r2,0(r18)
    4d0c:	000df700 	call	df70 <__udivdi3>
    4d10:	1021883a 	mov	r16,r2
    4d14:	10c4b03a 	or	r2,r2,r3
    4d18:	1823883a 	mov	r17,r3
    4d1c:	103fef1e 	bne	r2,zero,4cdc <__alt_mem_Flash_flash_data+0xf4004cdc>
    4d20:	dac02817 	ldw	r11,160(sp)
    4d24:	dc803115 	stw	r18,196(sp)
    4d28:	dc002b17 	ldw	r16,172(sp)
    4d2c:	dc402c17 	ldw	r17,176(sp)
    4d30:	9813883a 	mov	r9,r19
    4d34:	e011883a 	mov	r8,fp
    4d38:	5ca5c83a 	sub	r18,r11,r18
    4d3c:	003de906 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    4d40:	9cc00c04 	addi	r19,r19,48
    4d44:	d8c01dc4 	addi	r3,sp,119
    4d48:	dcc01dc5 	stb	r19,119(sp)
    4d4c:	dc803c17 	ldw	r18,240(sp)
    4d50:	d8c03115 	stw	r3,196(sp)
    4d54:	003de306 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    4d58:	00801944 	movi	r2,101
    4d5c:	1400710e 	bge	r2,r16,4f24 <___vfprintf_internal_r+0xf78>
    4d60:	d9003717 	ldw	r4,220(sp)
    4d64:	d9403917 	ldw	r5,228(sp)
    4d68:	000d883a 	mov	r6,zero
    4d6c:	000f883a 	mov	r7,zero
    4d70:	d8c03d15 	stw	r3,244(sp)
    4d74:	da003f15 	stw	r8,252(sp)
    4d78:	000fd540 	call	fd54 <__eqdf2>
    4d7c:	d8c03d17 	ldw	r3,244(sp)
    4d80:	da003f17 	ldw	r8,252(sp)
    4d84:	1000ef1e 	bne	r2,zero,5144 <___vfprintf_internal_r+0x1198>
    4d88:	d8801f17 	ldw	r2,124(sp)
    4d8c:	010000b4 	movhi	r4,2
    4d90:	213af804 	addi	r4,r4,-5152
    4d94:	18c00044 	addi	r3,r3,1
    4d98:	10800044 	addi	r2,r2,1
    4d9c:	41000015 	stw	r4,0(r8)
    4da0:	01000044 	movi	r4,1
    4da4:	41000115 	stw	r4,4(r8)
    4da8:	d8c02015 	stw	r3,128(sp)
    4dac:	d8801f15 	stw	r2,124(sp)
    4db0:	010001c4 	movi	r4,7
    4db4:	20828e16 	blt	r4,r2,57f0 <___vfprintf_internal_r+0x1844>
    4db8:	42000204 	addi	r8,r8,8
    4dbc:	d8802617 	ldw	r2,152(sp)
    4dc0:	dac03317 	ldw	r11,204(sp)
    4dc4:	12c00216 	blt	r2,r11,4dd0 <___vfprintf_internal_r+0xe24>
    4dc8:	8880004c 	andi	r2,r17,1
    4dcc:	103e5d26 	beq	r2,zero,4744 <__alt_mem_Flash_flash_data+0xf4004744>
    4dd0:	db003817 	ldw	r12,224(sp)
    4dd4:	d8801f17 	ldw	r2,124(sp)
    4dd8:	dac03517 	ldw	r11,212(sp)
    4ddc:	1b07883a 	add	r3,r3,r12
    4de0:	10800044 	addi	r2,r2,1
    4de4:	42c00015 	stw	r11,0(r8)
    4de8:	43000115 	stw	r12,4(r8)
    4dec:	d8c02015 	stw	r3,128(sp)
    4df0:	d8801f15 	stw	r2,124(sp)
    4df4:	010001c4 	movi	r4,7
    4df8:	2082ed16 	blt	r4,r2,59b0 <___vfprintf_internal_r+0x1a04>
    4dfc:	42000204 	addi	r8,r8,8
    4e00:	db003317 	ldw	r12,204(sp)
    4e04:	643fffc4 	addi	r16,r12,-1
    4e08:	043e4e0e 	bge	zero,r16,4744 <__alt_mem_Flash_flash_data+0xf4004744>
    4e0c:	04800404 	movi	r18,16
    4e10:	d8801f17 	ldw	r2,124(sp)
    4e14:	94007e0e 	bge	r18,r16,5010 <___vfprintf_internal_r+0x1064>
    4e18:	014000b4 	movhi	r5,2
    4e1c:	297b0084 	addi	r5,r5,-5118
    4e20:	d9402c15 	stw	r5,176(sp)
    4e24:	054001c4 	movi	r21,7
    4e28:	00000306 	br	4e38 <___vfprintf_internal_r+0xe8c>
    4e2c:	42000204 	addi	r8,r8,8
    4e30:	843ffc04 	addi	r16,r16,-16
    4e34:	9400790e 	bge	r18,r16,501c <___vfprintf_internal_r+0x1070>
    4e38:	18c00404 	addi	r3,r3,16
    4e3c:	10800044 	addi	r2,r2,1
    4e40:	45000015 	stw	r20,0(r8)
    4e44:	44800115 	stw	r18,4(r8)
    4e48:	d8c02015 	stw	r3,128(sp)
    4e4c:	d8801f15 	stw	r2,124(sp)
    4e50:	a8bff60e 	bge	r21,r2,4e2c <__alt_mem_Flash_flash_data+0xf4004e2c>
    4e54:	b009883a 	mov	r4,r22
    4e58:	b80b883a 	mov	r5,r23
    4e5c:	d9801e04 	addi	r6,sp,120
    4e60:	000b72c0 	call	b72c <__sprint_r>
    4e64:	103d451e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    4e68:	d8c02017 	ldw	r3,128(sp)
    4e6c:	d8801f17 	ldw	r2,124(sp)
    4e70:	da000404 	addi	r8,sp,16
    4e74:	003fee06 	br	4e30 <__alt_mem_Flash_flash_data+0xf4004e30>
    4e78:	dac02e17 	ldw	r11,184(sp)
    4e7c:	db002b17 	ldw	r12,172(sp)
    4e80:	5b2bc83a 	sub	r21,r11,r12
    4e84:	057df90e 	bge	zero,r21,466c <__alt_mem_Flash_flash_data+0xf400466c>
    4e88:	07000404 	movi	fp,16
    4e8c:	d8801f17 	ldw	r2,124(sp)
    4e90:	e543640e 	bge	fp,r21,5c24 <___vfprintf_internal_r+0x1c78>
    4e94:	014000b4 	movhi	r5,2
    4e98:	297b0084 	addi	r5,r5,-5118
    4e9c:	d9402c15 	stw	r5,176(sp)
    4ea0:	04c001c4 	movi	r19,7
    4ea4:	00000306 	br	4eb4 <___vfprintf_internal_r+0xf08>
    4ea8:	ad7ffc04 	addi	r21,r21,-16
    4eac:	42000204 	addi	r8,r8,8
    4eb0:	e540110e 	bge	fp,r21,4ef8 <___vfprintf_internal_r+0xf4c>
    4eb4:	18c00404 	addi	r3,r3,16
    4eb8:	10800044 	addi	r2,r2,1
    4ebc:	45000015 	stw	r20,0(r8)
    4ec0:	47000115 	stw	fp,4(r8)
    4ec4:	d8c02015 	stw	r3,128(sp)
    4ec8:	d8801f15 	stw	r2,124(sp)
    4ecc:	98bff60e 	bge	r19,r2,4ea8 <__alt_mem_Flash_flash_data+0xf4004ea8>
    4ed0:	b009883a 	mov	r4,r22
    4ed4:	b80b883a 	mov	r5,r23
    4ed8:	d9801e04 	addi	r6,sp,120
    4edc:	000b72c0 	call	b72c <__sprint_r>
    4ee0:	103d261e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    4ee4:	ad7ffc04 	addi	r21,r21,-16
    4ee8:	d8c02017 	ldw	r3,128(sp)
    4eec:	d8801f17 	ldw	r2,124(sp)
    4ef0:	da000404 	addi	r8,sp,16
    4ef4:	e57fef16 	blt	fp,r21,4eb4 <__alt_mem_Flash_flash_data+0xf4004eb4>
    4ef8:	dac02c17 	ldw	r11,176(sp)
    4efc:	1d47883a 	add	r3,r3,r21
    4f00:	10800044 	addi	r2,r2,1
    4f04:	42c00015 	stw	r11,0(r8)
    4f08:	45400115 	stw	r21,4(r8)
    4f0c:	d8c02015 	stw	r3,128(sp)
    4f10:	d8801f15 	stw	r2,124(sp)
    4f14:	010001c4 	movi	r4,7
    4f18:	20819116 	blt	r4,r2,5560 <___vfprintf_internal_r+0x15b4>
    4f1c:	42000204 	addi	r8,r8,8
    4f20:	003dd206 	br	466c <__alt_mem_Flash_flash_data+0xf400466c>
    4f24:	db003317 	ldw	r12,204(sp)
    4f28:	00800044 	movi	r2,1
    4f2c:	18c00044 	addi	r3,r3,1
    4f30:	1301530e 	bge	r2,r12,5480 <___vfprintf_internal_r+0x14d4>
    4f34:	dc001f17 	ldw	r16,124(sp)
    4f38:	dac03117 	ldw	r11,196(sp)
    4f3c:	00800044 	movi	r2,1
    4f40:	84000044 	addi	r16,r16,1
    4f44:	40800115 	stw	r2,4(r8)
    4f48:	42c00015 	stw	r11,0(r8)
    4f4c:	d8c02015 	stw	r3,128(sp)
    4f50:	dc001f15 	stw	r16,124(sp)
    4f54:	008001c4 	movi	r2,7
    4f58:	14016b16 	blt	r2,r16,5508 <___vfprintf_internal_r+0x155c>
    4f5c:	42000204 	addi	r8,r8,8
    4f60:	db003817 	ldw	r12,224(sp)
    4f64:	dac03517 	ldw	r11,212(sp)
    4f68:	84000044 	addi	r16,r16,1
    4f6c:	1b07883a 	add	r3,r3,r12
    4f70:	42c00015 	stw	r11,0(r8)
    4f74:	43000115 	stw	r12,4(r8)
    4f78:	d8c02015 	stw	r3,128(sp)
    4f7c:	dc001f15 	stw	r16,124(sp)
    4f80:	008001c4 	movi	r2,7
    4f84:	14016916 	blt	r2,r16,552c <___vfprintf_internal_r+0x1580>
    4f88:	44800204 	addi	r18,r8,8
    4f8c:	d9003717 	ldw	r4,220(sp)
    4f90:	d9403917 	ldw	r5,228(sp)
    4f94:	000d883a 	mov	r6,zero
    4f98:	000f883a 	mov	r7,zero
    4f9c:	d8c03d15 	stw	r3,244(sp)
    4fa0:	000fd540 	call	fd54 <__eqdf2>
    4fa4:	d8c03d17 	ldw	r3,244(sp)
    4fa8:	db003317 	ldw	r12,204(sp)
    4fac:	1000ad26 	beq	r2,zero,5264 <___vfprintf_internal_r+0x12b8>
    4fb0:	dac03117 	ldw	r11,196(sp)
    4fb4:	60bfffc4 	addi	r2,r12,-1
    4fb8:	1887883a 	add	r3,r3,r2
    4fbc:	59000044 	addi	r4,r11,1
    4fc0:	84000044 	addi	r16,r16,1
    4fc4:	90800115 	stw	r2,4(r18)
    4fc8:	91000015 	stw	r4,0(r18)
    4fcc:	d8c02015 	stw	r3,128(sp)
    4fd0:	dc001f15 	stw	r16,124(sp)
    4fd4:	008001c4 	movi	r2,7
    4fd8:	14014216 	blt	r2,r16,54e4 <___vfprintf_internal_r+0x1538>
    4fdc:	94800204 	addi	r18,r18,8
    4fe0:	dac03a17 	ldw	r11,232(sp)
    4fe4:	dd4022c4 	addi	r21,sp,139
    4fe8:	84000044 	addi	r16,r16,1
    4fec:	1ac7883a 	add	r3,r3,r11
    4ff0:	95400015 	stw	r21,0(r18)
    4ff4:	92c00115 	stw	r11,4(r18)
    4ff8:	d8c02015 	stw	r3,128(sp)
    4ffc:	dc001f15 	stw	r16,124(sp)
    5000:	008001c4 	movi	r2,7
    5004:	14000e16 	blt	r2,r16,5040 <___vfprintf_internal_r+0x1094>
    5008:	92000204 	addi	r8,r18,8
    500c:	003dcd06 	br	4744 <__alt_mem_Flash_flash_data+0xf4004744>
    5010:	010000b4 	movhi	r4,2
    5014:	213b0084 	addi	r4,r4,-5118
    5018:	d9002c15 	stw	r4,176(sp)
    501c:	dac02c17 	ldw	r11,176(sp)
    5020:	1c07883a 	add	r3,r3,r16
    5024:	44000115 	stw	r16,4(r8)
    5028:	42c00015 	stw	r11,0(r8)
    502c:	10800044 	addi	r2,r2,1
    5030:	d8c02015 	stw	r3,128(sp)
    5034:	d8801f15 	stw	r2,124(sp)
    5038:	010001c4 	movi	r4,7
    503c:	20bdc00e 	bge	r4,r2,4740 <__alt_mem_Flash_flash_data+0xf4004740>
    5040:	b009883a 	mov	r4,r22
    5044:	b80b883a 	mov	r5,r23
    5048:	d9801e04 	addi	r6,sp,120
    504c:	000b72c0 	call	b72c <__sprint_r>
    5050:	103cca1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5054:	d8c02017 	ldw	r3,128(sp)
    5058:	da000404 	addi	r8,sp,16
    505c:	003db906 	br	4744 <__alt_mem_Flash_flash_data+0xf4004744>
    5060:	b009883a 	mov	r4,r22
    5064:	b80b883a 	mov	r5,r23
    5068:	d9801e04 	addi	r6,sp,120
    506c:	000b72c0 	call	b72c <__sprint_r>
    5070:	103def26 	beq	r2,zero,4830 <__alt_mem_Flash_flash_data+0xf4004830>
    5074:	003cc106 	br	437c <__alt_mem_Flash_flash_data+0xf400437c>
    5078:	10803fcc 	andi	r2,r2,255
    507c:	1000651e 	bne	r2,zero,5214 <___vfprintf_internal_r+0x1268>
    5080:	8880004c 	andi	r2,r17,1
    5084:	10013226 	beq	r2,zero,5550 <___vfprintf_internal_r+0x15a4>
    5088:	00800c04 	movi	r2,48
    508c:	d8c01dc4 	addi	r3,sp,119
    5090:	d8801dc5 	stb	r2,119(sp)
    5094:	dc803c17 	ldw	r18,240(sp)
    5098:	d8c03115 	stw	r3,196(sp)
    509c:	003d1106 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    50a0:	b009883a 	mov	r4,r22
    50a4:	b80b883a 	mov	r5,r23
    50a8:	d9801e04 	addi	r6,sp,120
    50ac:	000b72c0 	call	b72c <__sprint_r>
    50b0:	103cb21e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    50b4:	d8c02017 	ldw	r3,128(sp)
    50b8:	da000404 	addi	r8,sp,16
    50bc:	003d9406 	br	4710 <__alt_mem_Flash_flash_data+0xf4004710>
    50c0:	b009883a 	mov	r4,r22
    50c4:	b80b883a 	mov	r5,r23
    50c8:	d9801e04 	addi	r6,sp,120
    50cc:	000b72c0 	call	b72c <__sprint_r>
    50d0:	103caa1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    50d4:	d8c02017 	ldw	r3,128(sp)
    50d8:	da000404 	addi	r8,sp,16
    50dc:	003d5206 	br	4628 <__alt_mem_Flash_flash_data+0xf4004628>
    50e0:	b009883a 	mov	r4,r22
    50e4:	b80b883a 	mov	r5,r23
    50e8:	d9801e04 	addi	r6,sp,120
    50ec:	000b72c0 	call	b72c <__sprint_r>
    50f0:	103ca21e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    50f4:	d8c02017 	ldw	r3,128(sp)
    50f8:	da000404 	addi	r8,sp,16
    50fc:	003d5806 	br	4660 <__alt_mem_Flash_flash_data+0xf4004660>
    5100:	d9403b17 	ldw	r5,236(sp)
    5104:	d8c01e04 	addi	r3,sp,120
    5108:	988003cc 	andi	r2,r19,15
    510c:	e008973a 	slli	r4,fp,28
    5110:	2885883a 	add	r2,r5,r2
    5114:	9826d13a 	srli	r19,r19,4
    5118:	10800003 	ldbu	r2,0(r2)
    511c:	e038d13a 	srli	fp,fp,4
    5120:	18ffffc4 	addi	r3,r3,-1
    5124:	24e6b03a 	or	r19,r4,r19
    5128:	18800005 	stb	r2,0(r3)
    512c:	9f04b03a 	or	r2,r19,fp
    5130:	103ff51e 	bne	r2,zero,5108 <__alt_mem_Flash_flash_data+0xf4005108>
    5134:	db002817 	ldw	r12,160(sp)
    5138:	d8c03115 	stw	r3,196(sp)
    513c:	60e5c83a 	sub	r18,r12,r3
    5140:	003ce806 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    5144:	dc002617 	ldw	r16,152(sp)
    5148:	0401b10e 	bge	zero,r16,5810 <___vfprintf_internal_r+0x1864>
    514c:	db003117 	ldw	r12,196(sp)
    5150:	dac03317 	ldw	r11,204(sp)
    5154:	62e1883a 	add	r16,r12,r11
    5158:	db003417 	ldw	r12,208(sp)
    515c:	5825883a 	mov	r18,r11
    5160:	62c0010e 	bge	r12,r11,5168 <___vfprintf_internal_r+0x11bc>
    5164:	6025883a 	mov	r18,r12
    5168:	04800b0e 	bge	zero,r18,5198 <___vfprintf_internal_r+0x11ec>
    516c:	d8801f17 	ldw	r2,124(sp)
    5170:	dac03117 	ldw	r11,196(sp)
    5174:	1c87883a 	add	r3,r3,r18
    5178:	10800044 	addi	r2,r2,1
    517c:	42c00015 	stw	r11,0(r8)
    5180:	44800115 	stw	r18,4(r8)
    5184:	d8c02015 	stw	r3,128(sp)
    5188:	d8801f15 	stw	r2,124(sp)
    518c:	010001c4 	movi	r4,7
    5190:	20824f16 	blt	r4,r2,5ad0 <___vfprintf_internal_r+0x1b24>
    5194:	42000204 	addi	r8,r8,8
    5198:	90024b16 	blt	r18,zero,5ac8 <___vfprintf_internal_r+0x1b1c>
    519c:	db003417 	ldw	r12,208(sp)
    51a0:	64a5c83a 	sub	r18,r12,r18
    51a4:	0480730e 	bge	zero,r18,5374 <___vfprintf_internal_r+0x13c8>
    51a8:	05400404 	movi	r21,16
    51ac:	d8801f17 	ldw	r2,124(sp)
    51b0:	ac817d0e 	bge	r21,r18,57a8 <___vfprintf_internal_r+0x17fc>
    51b4:	014000b4 	movhi	r5,2
    51b8:	297b0084 	addi	r5,r5,-5118
    51bc:	d9402c15 	stw	r5,176(sp)
    51c0:	070001c4 	movi	fp,7
    51c4:	00000306 	br	51d4 <___vfprintf_internal_r+0x1228>
    51c8:	42000204 	addi	r8,r8,8
    51cc:	94bffc04 	addi	r18,r18,-16
    51d0:	ac81780e 	bge	r21,r18,57b4 <___vfprintf_internal_r+0x1808>
    51d4:	18c00404 	addi	r3,r3,16
    51d8:	10800044 	addi	r2,r2,1
    51dc:	45000015 	stw	r20,0(r8)
    51e0:	45400115 	stw	r21,4(r8)
    51e4:	d8c02015 	stw	r3,128(sp)
    51e8:	d8801f15 	stw	r2,124(sp)
    51ec:	e0bff60e 	bge	fp,r2,51c8 <__alt_mem_Flash_flash_data+0xf40051c8>
    51f0:	b009883a 	mov	r4,r22
    51f4:	b80b883a 	mov	r5,r23
    51f8:	d9801e04 	addi	r6,sp,120
    51fc:	000b72c0 	call	b72c <__sprint_r>
    5200:	103c5e1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5204:	d8c02017 	ldw	r3,128(sp)
    5208:	d8801f17 	ldw	r2,124(sp)
    520c:	da000404 	addi	r8,sp,16
    5210:	003fee06 	br	51cc <__alt_mem_Flash_flash_data+0xf40051cc>
    5214:	dac01e04 	addi	r11,sp,120
    5218:	0025883a 	mov	r18,zero
    521c:	dac03115 	stw	r11,196(sp)
    5220:	003cb006 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    5224:	b009883a 	mov	r4,r22
    5228:	b80b883a 	mov	r5,r23
    522c:	d9801e04 	addi	r6,sp,120
    5230:	000b72c0 	call	b72c <__sprint_r>
    5234:	103c511e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5238:	d8c02017 	ldw	r3,128(sp)
    523c:	d8802787 	ldb	r2,158(sp)
    5240:	da000404 	addi	r8,sp,16
    5244:	003ceb06 	br	45f4 <__alt_mem_Flash_flash_data+0xf40045f4>
    5248:	1cc00017 	ldw	r19,0(r3)
    524c:	dac02d17 	ldw	r11,180(sp)
    5250:	9839d7fa 	srai	fp,r19,31
    5254:	5ac00104 	addi	r11,r11,4
    5258:	dac02d15 	stw	r11,180(sp)
    525c:	e005883a 	mov	r2,fp
    5260:	003c8106 	br	4468 <__alt_mem_Flash_flash_data+0xf4004468>
    5264:	657fffc4 	addi	r21,r12,-1
    5268:	057f5d0e 	bge	zero,r21,4fe0 <__alt_mem_Flash_flash_data+0xf4004fe0>
    526c:	07000404 	movi	fp,16
    5270:	e540900e 	bge	fp,r21,54b4 <___vfprintf_internal_r+0x1508>
    5274:	010000b4 	movhi	r4,2
    5278:	213b0084 	addi	r4,r4,-5118
    527c:	d9002c15 	stw	r4,176(sp)
    5280:	01c001c4 	movi	r7,7
    5284:	00000306 	br	5294 <___vfprintf_internal_r+0x12e8>
    5288:	94800204 	addi	r18,r18,8
    528c:	ad7ffc04 	addi	r21,r21,-16
    5290:	e5408b0e 	bge	fp,r21,54c0 <___vfprintf_internal_r+0x1514>
    5294:	18c00404 	addi	r3,r3,16
    5298:	84000044 	addi	r16,r16,1
    529c:	95000015 	stw	r20,0(r18)
    52a0:	97000115 	stw	fp,4(r18)
    52a4:	d8c02015 	stw	r3,128(sp)
    52a8:	dc001f15 	stw	r16,124(sp)
    52ac:	3c3ff60e 	bge	r7,r16,5288 <__alt_mem_Flash_flash_data+0xf4005288>
    52b0:	b009883a 	mov	r4,r22
    52b4:	b80b883a 	mov	r5,r23
    52b8:	d9801e04 	addi	r6,sp,120
    52bc:	d9c03d15 	stw	r7,244(sp)
    52c0:	000b72c0 	call	b72c <__sprint_r>
    52c4:	d9c03d17 	ldw	r7,244(sp)
    52c8:	103c2c1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    52cc:	d8c02017 	ldw	r3,128(sp)
    52d0:	dc001f17 	ldw	r16,124(sp)
    52d4:	dc800404 	addi	r18,sp,16
    52d8:	003fec06 	br	528c <__alt_mem_Flash_flash_data+0xf400528c>
    52dc:	dac02d17 	ldw	r11,180(sp)
    52e0:	0039883a 	mov	fp,zero
    52e4:	0005883a 	mov	r2,zero
    52e8:	5cc00017 	ldw	r19,0(r11)
    52ec:	5ac00104 	addi	r11,r11,4
    52f0:	dac02d15 	stw	r11,180(sp)
    52f4:	9807883a 	mov	r3,r19
    52f8:	003d5b06 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    52fc:	db002d17 	ldw	r12,180(sp)
    5300:	0039883a 	mov	fp,zero
    5304:	00800044 	movi	r2,1
    5308:	64c00017 	ldw	r19,0(r12)
    530c:	63000104 	addi	r12,r12,4
    5310:	db002d15 	stw	r12,180(sp)
    5314:	9807883a 	mov	r3,r19
    5318:	003d5306 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    531c:	00800084 	movi	r2,2
    5320:	9f06b03a 	or	r3,r19,fp
    5324:	003d5006 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    5328:	10803fcc 	andi	r2,r2,255
    532c:	1080201c 	xori	r2,r2,128
    5330:	10bfe004 	addi	r2,r2,-128
    5334:	01000c04 	movi	r4,48
    5338:	1101a526 	beq	r2,r4,59d0 <___vfprintf_internal_r+0x1a24>
    533c:	dac03117 	ldw	r11,196(sp)
    5340:	db002817 	ldw	r12,160(sp)
    5344:	193fffc5 	stb	r4,-1(r3)
    5348:	5affffc4 	addi	r11,r11,-1
    534c:	dac03115 	stw	r11,196(sp)
    5350:	62e5c83a 	sub	r18,r12,r11
    5354:	003c6306 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    5358:	b009883a 	mov	r4,r22
    535c:	b80b883a 	mov	r5,r23
    5360:	d9801e04 	addi	r6,sp,120
    5364:	000b72c0 	call	b72c <__sprint_r>
    5368:	103c041e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    536c:	d8c02017 	ldw	r3,128(sp)
    5370:	da000404 	addi	r8,sp,16
    5374:	db003117 	ldw	r12,196(sp)
    5378:	dac03417 	ldw	r11,208(sp)
    537c:	d8802617 	ldw	r2,152(sp)
    5380:	62e5883a 	add	r18,r12,r11
    5384:	db003317 	ldw	r12,204(sp)
    5388:	13000216 	blt	r2,r12,5394 <___vfprintf_internal_r+0x13e8>
    538c:	8900004c 	andi	r4,r17,1
    5390:	20000c26 	beq	r4,zero,53c4 <___vfprintf_internal_r+0x1418>
    5394:	dac03817 	ldw	r11,224(sp)
    5398:	d9001f17 	ldw	r4,124(sp)
    539c:	db003517 	ldw	r12,212(sp)
    53a0:	1ac7883a 	add	r3,r3,r11
    53a4:	21000044 	addi	r4,r4,1
    53a8:	43000015 	stw	r12,0(r8)
    53ac:	42c00115 	stw	r11,4(r8)
    53b0:	d8c02015 	stw	r3,128(sp)
    53b4:	d9001f15 	stw	r4,124(sp)
    53b8:	014001c4 	movi	r5,7
    53bc:	2901cc16 	blt	r5,r4,5af0 <___vfprintf_internal_r+0x1b44>
    53c0:	42000204 	addi	r8,r8,8
    53c4:	dac03317 	ldw	r11,204(sp)
    53c8:	8489c83a 	sub	r4,r16,r18
    53cc:	5885c83a 	sub	r2,r11,r2
    53d0:	1021883a 	mov	r16,r2
    53d4:	2080010e 	bge	r4,r2,53dc <___vfprintf_internal_r+0x1430>
    53d8:	2021883a 	mov	r16,r4
    53dc:	04000a0e 	bge	zero,r16,5408 <___vfprintf_internal_r+0x145c>
    53e0:	d9001f17 	ldw	r4,124(sp)
    53e4:	1c07883a 	add	r3,r3,r16
    53e8:	44800015 	stw	r18,0(r8)
    53ec:	21000044 	addi	r4,r4,1
    53f0:	44000115 	stw	r16,4(r8)
    53f4:	d8c02015 	stw	r3,128(sp)
    53f8:	d9001f15 	stw	r4,124(sp)
    53fc:	014001c4 	movi	r5,7
    5400:	2901e316 	blt	r5,r4,5b90 <___vfprintf_internal_r+0x1be4>
    5404:	42000204 	addi	r8,r8,8
    5408:	8001df16 	blt	r16,zero,5b88 <___vfprintf_internal_r+0x1bdc>
    540c:	1421c83a 	sub	r16,r2,r16
    5410:	043ccc0e 	bge	zero,r16,4744 <__alt_mem_Flash_flash_data+0xf4004744>
    5414:	04800404 	movi	r18,16
    5418:	d8801f17 	ldw	r2,124(sp)
    541c:	943efc0e 	bge	r18,r16,5010 <__alt_mem_Flash_flash_data+0xf4005010>
    5420:	014000b4 	movhi	r5,2
    5424:	297b0084 	addi	r5,r5,-5118
    5428:	d9402c15 	stw	r5,176(sp)
    542c:	054001c4 	movi	r21,7
    5430:	00000306 	br	5440 <___vfprintf_internal_r+0x1494>
    5434:	42000204 	addi	r8,r8,8
    5438:	843ffc04 	addi	r16,r16,-16
    543c:	943ef70e 	bge	r18,r16,501c <__alt_mem_Flash_flash_data+0xf400501c>
    5440:	18c00404 	addi	r3,r3,16
    5444:	10800044 	addi	r2,r2,1
    5448:	45000015 	stw	r20,0(r8)
    544c:	44800115 	stw	r18,4(r8)
    5450:	d8c02015 	stw	r3,128(sp)
    5454:	d8801f15 	stw	r2,124(sp)
    5458:	a8bff60e 	bge	r21,r2,5434 <__alt_mem_Flash_flash_data+0xf4005434>
    545c:	b009883a 	mov	r4,r22
    5460:	b80b883a 	mov	r5,r23
    5464:	d9801e04 	addi	r6,sp,120
    5468:	000b72c0 	call	b72c <__sprint_r>
    546c:	103bc31e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5470:	d8c02017 	ldw	r3,128(sp)
    5474:	d8801f17 	ldw	r2,124(sp)
    5478:	da000404 	addi	r8,sp,16
    547c:	003fee06 	br	5438 <__alt_mem_Flash_flash_data+0xf4005438>
    5480:	8888703a 	and	r4,r17,r2
    5484:	203eab1e 	bne	r4,zero,4f34 <__alt_mem_Flash_flash_data+0xf4004f34>
    5488:	dc001f17 	ldw	r16,124(sp)
    548c:	db003117 	ldw	r12,196(sp)
    5490:	40800115 	stw	r2,4(r8)
    5494:	84000044 	addi	r16,r16,1
    5498:	43000015 	stw	r12,0(r8)
    549c:	d8c02015 	stw	r3,128(sp)
    54a0:	dc001f15 	stw	r16,124(sp)
    54a4:	008001c4 	movi	r2,7
    54a8:	14000e16 	blt	r2,r16,54e4 <___vfprintf_internal_r+0x1538>
    54ac:	44800204 	addi	r18,r8,8
    54b0:	003ecb06 	br	4fe0 <__alt_mem_Flash_flash_data+0xf4004fe0>
    54b4:	008000b4 	movhi	r2,2
    54b8:	10bb0084 	addi	r2,r2,-5118
    54bc:	d8802c15 	stw	r2,176(sp)
    54c0:	dac02c17 	ldw	r11,176(sp)
    54c4:	1d47883a 	add	r3,r3,r21
    54c8:	84000044 	addi	r16,r16,1
    54cc:	92c00015 	stw	r11,0(r18)
    54d0:	95400115 	stw	r21,4(r18)
    54d4:	d8c02015 	stw	r3,128(sp)
    54d8:	dc001f15 	stw	r16,124(sp)
    54dc:	008001c4 	movi	r2,7
    54e0:	143ebe0e 	bge	r2,r16,4fdc <__alt_mem_Flash_flash_data+0xf4004fdc>
    54e4:	b009883a 	mov	r4,r22
    54e8:	b80b883a 	mov	r5,r23
    54ec:	d9801e04 	addi	r6,sp,120
    54f0:	000b72c0 	call	b72c <__sprint_r>
    54f4:	103ba11e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    54f8:	d8c02017 	ldw	r3,128(sp)
    54fc:	dc001f17 	ldw	r16,124(sp)
    5500:	dc800404 	addi	r18,sp,16
    5504:	003eb606 	br	4fe0 <__alt_mem_Flash_flash_data+0xf4004fe0>
    5508:	b009883a 	mov	r4,r22
    550c:	b80b883a 	mov	r5,r23
    5510:	d9801e04 	addi	r6,sp,120
    5514:	000b72c0 	call	b72c <__sprint_r>
    5518:	103b981e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    551c:	d8c02017 	ldw	r3,128(sp)
    5520:	dc001f17 	ldw	r16,124(sp)
    5524:	da000404 	addi	r8,sp,16
    5528:	003e8d06 	br	4f60 <__alt_mem_Flash_flash_data+0xf4004f60>
    552c:	b009883a 	mov	r4,r22
    5530:	b80b883a 	mov	r5,r23
    5534:	d9801e04 	addi	r6,sp,120
    5538:	000b72c0 	call	b72c <__sprint_r>
    553c:	103b8f1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5540:	d8c02017 	ldw	r3,128(sp)
    5544:	dc001f17 	ldw	r16,124(sp)
    5548:	dc800404 	addi	r18,sp,16
    554c:	003e8f06 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5550:	db001e04 	addi	r12,sp,120
    5554:	0025883a 	mov	r18,zero
    5558:	db003115 	stw	r12,196(sp)
    555c:	003be106 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    5560:	b009883a 	mov	r4,r22
    5564:	b80b883a 	mov	r5,r23
    5568:	d9801e04 	addi	r6,sp,120
    556c:	000b72c0 	call	b72c <__sprint_r>
    5570:	103b821e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5574:	d8c02017 	ldw	r3,128(sp)
    5578:	da000404 	addi	r8,sp,16
    557c:	003c3b06 	br	466c <__alt_mem_Flash_flash_data+0xf400466c>
    5580:	04e7c83a 	sub	r19,zero,r19
    5584:	9804c03a 	cmpne	r2,r19,zero
    5588:	0739c83a 	sub	fp,zero,fp
    558c:	e0b9c83a 	sub	fp,fp,r2
    5590:	05400b44 	movi	r21,45
    5594:	dd402785 	stb	r21,158(sp)
    5598:	da403215 	stw	r9,200(sp)
    559c:	00800044 	movi	r2,1
    55a0:	9f06b03a 	or	r3,r19,fp
    55a4:	003bb506 	br	447c <__alt_mem_Flash_flash_data+0xf400447c>
    55a8:	da003f15 	stw	r8,252(sp)
    55ac:	da403e15 	stw	r9,248(sp)
    55b0:	000a2280 	call	a228 <__fpclassifyd>
    55b4:	da003f17 	ldw	r8,252(sp)
    55b8:	da403e17 	ldw	r9,248(sp)
    55bc:	1000ce26 	beq	r2,zero,58f8 <___vfprintf_internal_r+0x194c>
    55c0:	057ff7c4 	movi	r21,-33
    55c4:	00bfffc4 	movi	r2,-1
    55c8:	856a703a 	and	r21,r16,r21
    55cc:	4881e826 	beq	r9,r2,5d70 <___vfprintf_internal_r+0x1dc4>
    55d0:	008011c4 	movi	r2,71
    55d4:	a881e326 	beq	r21,r2,5d64 <___vfprintf_internal_r+0x1db8>
    55d8:	db003917 	ldw	r12,228(sp)
    55dc:	8ac04014 	ori	r11,r17,256
    55e0:	dac02d15 	stw	r11,180(sp)
    55e4:	6001ed16 	blt	r12,zero,5d9c <___vfprintf_internal_r+0x1df0>
    55e8:	dc803917 	ldw	r18,228(sp)
    55ec:	d8002b05 	stb	zero,172(sp)
    55f0:	00801984 	movi	r2,102
    55f4:	80811826 	beq	r16,r2,5a58 <___vfprintf_internal_r+0x1aac>
    55f8:	00801184 	movi	r2,70
    55fc:	80811626 	beq	r16,r2,5a58 <___vfprintf_internal_r+0x1aac>
    5600:	00801144 	movi	r2,69
    5604:	a881e926 	beq	r21,r2,5dac <___vfprintf_internal_r+0x1e00>
    5608:	4839883a 	mov	fp,r9
    560c:	d8802604 	addi	r2,sp,152
    5610:	d8800115 	stw	r2,4(sp)
    5614:	d9403717 	ldw	r5,220(sp)
    5618:	d8802504 	addi	r2,sp,148
    561c:	d8800215 	stw	r2,8(sp)
    5620:	d8802104 	addi	r2,sp,132
    5624:	df000015 	stw	fp,0(sp)
    5628:	d8800315 	stw	r2,12(sp)
    562c:	b009883a 	mov	r4,r22
    5630:	900d883a 	mov	r6,r18
    5634:	01c00084 	movi	r7,2
    5638:	da003f15 	stw	r8,252(sp)
    563c:	da403e15 	stw	r9,248(sp)
    5640:	00063300 	call	6330 <_dtoa_r>
    5644:	d8803115 	stw	r2,196(sp)
    5648:	008019c4 	movi	r2,103
    564c:	da003f17 	ldw	r8,252(sp)
    5650:	da403e17 	ldw	r9,248(sp)
    5654:	80800226 	beq	r16,r2,5660 <___vfprintf_internal_r+0x16b4>
    5658:	008011c4 	movi	r2,71
    565c:	8081101e 	bne	r16,r2,5aa0 <___vfprintf_internal_r+0x1af4>
    5660:	8880004c 	andi	r2,r17,1
    5664:	1001dd26 	beq	r2,zero,5ddc <___vfprintf_internal_r+0x1e30>
    5668:	db003117 	ldw	r12,196(sp)
    566c:	6715883a 	add	r10,r12,fp
    5670:	d9003717 	ldw	r4,220(sp)
    5674:	900b883a 	mov	r5,r18
    5678:	000d883a 	mov	r6,zero
    567c:	000f883a 	mov	r7,zero
    5680:	da003f15 	stw	r8,252(sp)
    5684:	da403e15 	stw	r9,248(sp)
    5688:	da803d15 	stw	r10,244(sp)
    568c:	000fd540 	call	fd54 <__eqdf2>
    5690:	da003f17 	ldw	r8,252(sp)
    5694:	da403e17 	ldw	r9,248(sp)
    5698:	da803d17 	ldw	r10,244(sp)
    569c:	10016526 	beq	r2,zero,5c34 <___vfprintf_internal_r+0x1c88>
    56a0:	d8802117 	ldw	r2,132(sp)
    56a4:	1280062e 	bgeu	r2,r10,56c0 <___vfprintf_internal_r+0x1714>
    56a8:	01000c04 	movi	r4,48
    56ac:	10c00044 	addi	r3,r2,1
    56b0:	d8c02115 	stw	r3,132(sp)
    56b4:	11000005 	stb	r4,0(r2)
    56b8:	d8802117 	ldw	r2,132(sp)
    56bc:	12bffb36 	bltu	r2,r10,56ac <__alt_mem_Flash_flash_data+0xf40056ac>
    56c0:	db003117 	ldw	r12,196(sp)
    56c4:	1305c83a 	sub	r2,r2,r12
    56c8:	d8803315 	stw	r2,204(sp)
    56cc:	008011c4 	movi	r2,71
    56d0:	a8814d26 	beq	r21,r2,5c08 <___vfprintf_internal_r+0x1c5c>
    56d4:	00801944 	movi	r2,101
    56d8:	1402060e 	bge	r2,r16,5ef4 <___vfprintf_internal_r+0x1f48>
    56dc:	00801984 	movi	r2,102
    56e0:	8081b426 	beq	r16,r2,5db4 <___vfprintf_internal_r+0x1e08>
    56e4:	db002617 	ldw	r12,152(sp)
    56e8:	db003415 	stw	r12,208(sp)
    56ec:	db003417 	ldw	r12,208(sp)
    56f0:	dac03317 	ldw	r11,204(sp)
    56f4:	62c1a016 	blt	r12,r11,5d78 <___vfprintf_internal_r+0x1dcc>
    56f8:	8c40004c 	andi	r17,r17,1
    56fc:	8801bf1e 	bne	r17,zero,5dfc <___vfprintf_internal_r+0x1e50>
    5700:	6005883a 	mov	r2,r12
    5704:	6001b316 	blt	r12,zero,5dd4 <___vfprintf_internal_r+0x1e28>
    5708:	dc803417 	ldw	r18,208(sp)
    570c:	df002b07 	ldb	fp,172(sp)
    5710:	e0012e1e 	bne	fp,zero,5bcc <___vfprintf_internal_r+0x1c20>
    5714:	dc402d17 	ldw	r17,180(sp)
    5718:	dd402783 	ldbu	r21,158(sp)
    571c:	d8802b15 	stw	r2,172(sp)
    5720:	dcc02d15 	stw	r19,180(sp)
    5724:	d8003215 	stw	zero,200(sp)
    5728:	003b7306 	br	44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    572c:	00800084 	movi	r2,2
    5730:	003c4d06 	br	4868 <__alt_mem_Flash_flash_data+0xf4004868>
    5734:	8880040c 	andi	r2,r17,16
    5738:	1000091e 	bne	r2,zero,5760 <___vfprintf_internal_r+0x17b4>
    573c:	8c40100c 	andi	r17,r17,64
    5740:	88000726 	beq	r17,zero,5760 <___vfprintf_internal_r+0x17b4>
    5744:	db002d17 	ldw	r12,180(sp)
    5748:	dac02f17 	ldw	r11,188(sp)
    574c:	60800017 	ldw	r2,0(r12)
    5750:	63000104 	addi	r12,r12,4
    5754:	db002d15 	stw	r12,180(sp)
    5758:	12c0000d 	sth	r11,0(r2)
    575c:	003a4e06 	br	4098 <__alt_mem_Flash_flash_data+0xf4004098>
    5760:	db002d17 	ldw	r12,180(sp)
    5764:	dac02f17 	ldw	r11,188(sp)
    5768:	60800017 	ldw	r2,0(r12)
    576c:	63000104 	addi	r12,r12,4
    5770:	db002d15 	stw	r12,180(sp)
    5774:	12c00015 	stw	r11,0(r2)
    5778:	003a4706 	br	4098 <__alt_mem_Flash_flash_data+0xf4004098>
    577c:	1c000007 	ldb	r16,0(r3)
    5780:	1805883a 	mov	r2,r3
    5784:	003a6e06 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    5788:	88c0100c 	andi	r3,r17,64
    578c:	18006b26 	beq	r3,zero,593c <___vfprintf_internal_r+0x1990>
    5790:	dac02d17 	ldw	r11,180(sp)
    5794:	14c0000b 	ldhu	r19,0(r2)
    5798:	0039883a 	mov	fp,zero
    579c:	5ac00104 	addi	r11,r11,4
    57a0:	dac02d15 	stw	r11,180(sp)
    57a4:	003cb206 	br	4a70 <__alt_mem_Flash_flash_data+0xf4004a70>
    57a8:	010000b4 	movhi	r4,2
    57ac:	213b0084 	addi	r4,r4,-5118
    57b0:	d9002c15 	stw	r4,176(sp)
    57b4:	dac02c17 	ldw	r11,176(sp)
    57b8:	1c87883a 	add	r3,r3,r18
    57bc:	10800044 	addi	r2,r2,1
    57c0:	42c00015 	stw	r11,0(r8)
    57c4:	44800115 	stw	r18,4(r8)
    57c8:	d8c02015 	stw	r3,128(sp)
    57cc:	d8801f15 	stw	r2,124(sp)
    57d0:	010001c4 	movi	r4,7
    57d4:	20bee016 	blt	r4,r2,5358 <__alt_mem_Flash_flash_data+0xf4005358>
    57d8:	42000204 	addi	r8,r8,8
    57dc:	003ee506 	br	5374 <__alt_mem_Flash_flash_data+0xf4005374>
    57e0:	010000b4 	movhi	r4,2
    57e4:	213b0084 	addi	r4,r4,-5118
    57e8:	d9002c15 	stw	r4,176(sp)
    57ec:	003bbe06 	br	46e8 <__alt_mem_Flash_flash_data+0xf40046e8>
    57f0:	b009883a 	mov	r4,r22
    57f4:	b80b883a 	mov	r5,r23
    57f8:	d9801e04 	addi	r6,sp,120
    57fc:	000b72c0 	call	b72c <__sprint_r>
    5800:	103ade1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5804:	d8c02017 	ldw	r3,128(sp)
    5808:	da000404 	addi	r8,sp,16
    580c:	003d6b06 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    5810:	d8801f17 	ldw	r2,124(sp)
    5814:	030000b4 	movhi	r12,2
    5818:	01000044 	movi	r4,1
    581c:	18c00044 	addi	r3,r3,1
    5820:	10800044 	addi	r2,r2,1
    5824:	633af804 	addi	r12,r12,-5152
    5828:	41000115 	stw	r4,4(r8)
    582c:	43000015 	stw	r12,0(r8)
    5830:	d8c02015 	stw	r3,128(sp)
    5834:	d8801f15 	stw	r2,124(sp)
    5838:	010001c4 	movi	r4,7
    583c:	20804916 	blt	r4,r2,5964 <___vfprintf_internal_r+0x19b8>
    5840:	42000204 	addi	r8,r8,8
    5844:	8000041e 	bne	r16,zero,5858 <___vfprintf_internal_r+0x18ac>
    5848:	dac03317 	ldw	r11,204(sp)
    584c:	5800021e 	bne	r11,zero,5858 <___vfprintf_internal_r+0x18ac>
    5850:	8880004c 	andi	r2,r17,1
    5854:	103bbb26 	beq	r2,zero,4744 <__alt_mem_Flash_flash_data+0xf4004744>
    5858:	db003817 	ldw	r12,224(sp)
    585c:	d8801f17 	ldw	r2,124(sp)
    5860:	dac03517 	ldw	r11,212(sp)
    5864:	1b07883a 	add	r3,r3,r12
    5868:	10800044 	addi	r2,r2,1
    586c:	42c00015 	stw	r11,0(r8)
    5870:	43000115 	stw	r12,4(r8)
    5874:	d8c02015 	stw	r3,128(sp)
    5878:	d8801f15 	stw	r2,124(sp)
    587c:	010001c4 	movi	r4,7
    5880:	20812e16 	blt	r4,r2,5d3c <___vfprintf_internal_r+0x1d90>
    5884:	42000204 	addi	r8,r8,8
    5888:	0421c83a 	sub	r16,zero,r16
    588c:	04005c0e 	bge	zero,r16,5a00 <___vfprintf_internal_r+0x1a54>
    5890:	04800404 	movi	r18,16
    5894:	94009f0e 	bge	r18,r16,5b14 <___vfprintf_internal_r+0x1b68>
    5898:	010000b4 	movhi	r4,2
    589c:	213b0084 	addi	r4,r4,-5118
    58a0:	d9002c15 	stw	r4,176(sp)
    58a4:	054001c4 	movi	r21,7
    58a8:	00000306 	br	58b8 <___vfprintf_internal_r+0x190c>
    58ac:	42000204 	addi	r8,r8,8
    58b0:	843ffc04 	addi	r16,r16,-16
    58b4:	94009a0e 	bge	r18,r16,5b20 <___vfprintf_internal_r+0x1b74>
    58b8:	18c00404 	addi	r3,r3,16
    58bc:	10800044 	addi	r2,r2,1
    58c0:	45000015 	stw	r20,0(r8)
    58c4:	44800115 	stw	r18,4(r8)
    58c8:	d8c02015 	stw	r3,128(sp)
    58cc:	d8801f15 	stw	r2,124(sp)
    58d0:	a8bff60e 	bge	r21,r2,58ac <__alt_mem_Flash_flash_data+0xf40058ac>
    58d4:	b009883a 	mov	r4,r22
    58d8:	b80b883a 	mov	r5,r23
    58dc:	d9801e04 	addi	r6,sp,120
    58e0:	000b72c0 	call	b72c <__sprint_r>
    58e4:	103aa51e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    58e8:	d8c02017 	ldw	r3,128(sp)
    58ec:	d8801f17 	ldw	r2,124(sp)
    58f0:	da000404 	addi	r8,sp,16
    58f4:	003fee06 	br	58b0 <__alt_mem_Flash_flash_data+0xf40058b0>
    58f8:	008011c4 	movi	r2,71
    58fc:	1400be16 	blt	r2,r16,5bf8 <___vfprintf_internal_r+0x1c4c>
    5900:	030000b4 	movhi	r12,2
    5904:	633aea04 	addi	r12,r12,-5208
    5908:	db003115 	stw	r12,196(sp)
    590c:	00c000c4 	movi	r3,3
    5910:	00bfdfc4 	movi	r2,-129
    5914:	d8c02b15 	stw	r3,172(sp)
    5918:	88a2703a 	and	r17,r17,r2
    591c:	dd402783 	ldbu	r21,158(sp)
    5920:	dcc02d15 	stw	r19,180(sp)
    5924:	1825883a 	mov	r18,r3
    5928:	d8003215 	stw	zero,200(sp)
    592c:	d8003415 	stw	zero,208(sp)
    5930:	003af106 	br	44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    5934:	4825883a 	mov	r18,r9
    5938:	003c9306 	br	4b88 <__alt_mem_Flash_flash_data+0xf4004b88>
    593c:	db002d17 	ldw	r12,180(sp)
    5940:	14c00017 	ldw	r19,0(r2)
    5944:	0039883a 	mov	fp,zero
    5948:	63000104 	addi	r12,r12,4
    594c:	db002d15 	stw	r12,180(sp)
    5950:	003c4706 	br	4a70 <__alt_mem_Flash_flash_data+0xf4004a70>
    5954:	008000b4 	movhi	r2,2
    5958:	10bae804 	addi	r2,r2,-5216
    595c:	d8803115 	stw	r2,196(sp)
    5960:	003bf106 	br	4928 <__alt_mem_Flash_flash_data+0xf4004928>
    5964:	b009883a 	mov	r4,r22
    5968:	b80b883a 	mov	r5,r23
    596c:	d9801e04 	addi	r6,sp,120
    5970:	000b72c0 	call	b72c <__sprint_r>
    5974:	103a811e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5978:	dc002617 	ldw	r16,152(sp)
    597c:	d8c02017 	ldw	r3,128(sp)
    5980:	da000404 	addi	r8,sp,16
    5984:	003faf06 	br	5844 <__alt_mem_Flash_flash_data+0xf4005844>
    5988:	db002e17 	ldw	r12,184(sp)
    598c:	1805883a 	mov	r2,r3
    5990:	dac02d15 	stw	r11,180(sp)
    5994:	0319c83a 	sub	r12,zero,r12
    5998:	db002e15 	stw	r12,184(sp)
    599c:	003a8206 	br	43a8 <__alt_mem_Flash_flash_data+0xf40043a8>
    59a0:	18800044 	addi	r2,r3,1
    59a4:	8c400814 	ori	r17,r17,32
    59a8:	1c000047 	ldb	r16,1(r3)
    59ac:	0039e406 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    59b0:	b009883a 	mov	r4,r22
    59b4:	b80b883a 	mov	r5,r23
    59b8:	d9801e04 	addi	r6,sp,120
    59bc:	000b72c0 	call	b72c <__sprint_r>
    59c0:	103a6e1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    59c4:	d8c02017 	ldw	r3,128(sp)
    59c8:	da000404 	addi	r8,sp,16
    59cc:	003d0c06 	br	4e00 <__alt_mem_Flash_flash_data+0xf4004e00>
    59d0:	db002817 	ldw	r12,160(sp)
    59d4:	d8c03117 	ldw	r3,196(sp)
    59d8:	60e5c83a 	sub	r18,r12,r3
    59dc:	003ac106 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    59e0:	b009883a 	mov	r4,r22
    59e4:	b80b883a 	mov	r5,r23
    59e8:	d9801e04 	addi	r6,sp,120
    59ec:	000b72c0 	call	b72c <__sprint_r>
    59f0:	103a621e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    59f4:	d8c02017 	ldw	r3,128(sp)
    59f8:	d8801f17 	ldw	r2,124(sp)
    59fc:	da000404 	addi	r8,sp,16
    5a00:	db003317 	ldw	r12,204(sp)
    5a04:	dac03117 	ldw	r11,196(sp)
    5a08:	10800044 	addi	r2,r2,1
    5a0c:	1b07883a 	add	r3,r3,r12
    5a10:	42c00015 	stw	r11,0(r8)
    5a14:	43000115 	stw	r12,4(r8)
    5a18:	d8c02015 	stw	r3,128(sp)
    5a1c:	d8801f15 	stw	r2,124(sp)
    5a20:	010001c4 	movi	r4,7
    5a24:	20bb460e 	bge	r4,r2,4740 <__alt_mem_Flash_flash_data+0xf4004740>
    5a28:	003d8506 	br	5040 <__alt_mem_Flash_flash_data+0xf4005040>
    5a2c:	da003f15 	stw	r8,252(sp)
    5a30:	0001f840 	call	1f84 <strlen>
    5a34:	1025883a 	mov	r18,r2
    5a38:	da003f17 	ldw	r8,252(sp)
    5a3c:	903c540e 	bge	r18,zero,4b90 <__alt_mem_Flash_flash_data+0xf4004b90>
    5a40:	0005883a 	mov	r2,zero
    5a44:	003c5206 	br	4b90 <__alt_mem_Flash_flash_data+0xf4004b90>
    5a48:	010000b4 	movhi	r4,2
    5a4c:	213b0484 	addi	r4,r4,-5102
    5a50:	d9003615 	stw	r4,216(sp)
    5a54:	003adc06 	br	45c8 <__alt_mem_Flash_flash_data+0xf40045c8>
    5a58:	d8802604 	addi	r2,sp,152
    5a5c:	d8800115 	stw	r2,4(sp)
    5a60:	d9403717 	ldw	r5,220(sp)
    5a64:	d8802504 	addi	r2,sp,148
    5a68:	d8800215 	stw	r2,8(sp)
    5a6c:	d8802104 	addi	r2,sp,132
    5a70:	da400015 	stw	r9,0(sp)
    5a74:	d8800315 	stw	r2,12(sp)
    5a78:	b009883a 	mov	r4,r22
    5a7c:	900d883a 	mov	r6,r18
    5a80:	01c000c4 	movi	r7,3
    5a84:	da003f15 	stw	r8,252(sp)
    5a88:	da403e15 	stw	r9,248(sp)
    5a8c:	00063300 	call	6330 <_dtoa_r>
    5a90:	da403e17 	ldw	r9,248(sp)
    5a94:	da003f17 	ldw	r8,252(sp)
    5a98:	d8803115 	stw	r2,196(sp)
    5a9c:	4839883a 	mov	fp,r9
    5aa0:	dac03117 	ldw	r11,196(sp)
    5aa4:	00801184 	movi	r2,70
    5aa8:	5f15883a 	add	r10,r11,fp
    5aac:	a8bef01e 	bne	r21,r2,5670 <__alt_mem_Flash_flash_data+0xf4005670>
    5ab0:	59000007 	ldb	r4,0(r11)
    5ab4:	00800c04 	movi	r2,48
    5ab8:	2080d526 	beq	r4,r2,5e10 <___vfprintf_internal_r+0x1e64>
    5abc:	d8c02617 	ldw	r3,152(sp)
    5ac0:	50d5883a 	add	r10,r10,r3
    5ac4:	003eea06 	br	5670 <__alt_mem_Flash_flash_data+0xf4005670>
    5ac8:	0025883a 	mov	r18,zero
    5acc:	003db306 	br	519c <__alt_mem_Flash_flash_data+0xf400519c>
    5ad0:	b009883a 	mov	r4,r22
    5ad4:	b80b883a 	mov	r5,r23
    5ad8:	d9801e04 	addi	r6,sp,120
    5adc:	000b72c0 	call	b72c <__sprint_r>
    5ae0:	103a261e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5ae4:	d8c02017 	ldw	r3,128(sp)
    5ae8:	da000404 	addi	r8,sp,16
    5aec:	003daa06 	br	5198 <__alt_mem_Flash_flash_data+0xf4005198>
    5af0:	b009883a 	mov	r4,r22
    5af4:	b80b883a 	mov	r5,r23
    5af8:	d9801e04 	addi	r6,sp,120
    5afc:	000b72c0 	call	b72c <__sprint_r>
    5b00:	103a1e1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5b04:	d8802617 	ldw	r2,152(sp)
    5b08:	d8c02017 	ldw	r3,128(sp)
    5b0c:	da000404 	addi	r8,sp,16
    5b10:	003e2c06 	br	53c4 <__alt_mem_Flash_flash_data+0xf40053c4>
    5b14:	030000b4 	movhi	r12,2
    5b18:	633b0084 	addi	r12,r12,-5118
    5b1c:	db002c15 	stw	r12,176(sp)
    5b20:	dac02c17 	ldw	r11,176(sp)
    5b24:	1c07883a 	add	r3,r3,r16
    5b28:	10800044 	addi	r2,r2,1
    5b2c:	42c00015 	stw	r11,0(r8)
    5b30:	44000115 	stw	r16,4(r8)
    5b34:	d8c02015 	stw	r3,128(sp)
    5b38:	d8801f15 	stw	r2,124(sp)
    5b3c:	010001c4 	movi	r4,7
    5b40:	20bfa716 	blt	r4,r2,59e0 <__alt_mem_Flash_flash_data+0xf40059e0>
    5b44:	42000204 	addi	r8,r8,8
    5b48:	003fad06 	br	5a00 <__alt_mem_Flash_flash_data+0xf4005a00>
    5b4c:	00800184 	movi	r2,6
    5b50:	1240012e 	bgeu	r2,r9,5b58 <___vfprintf_internal_r+0x1bac>
    5b54:	1013883a 	mov	r9,r2
    5b58:	4825883a 	mov	r18,r9
    5b5c:	4805883a 	mov	r2,r9
    5b60:	4800c216 	blt	r9,zero,5e6c <___vfprintf_internal_r+0x1ec0>
    5b64:	d8802b15 	stw	r2,172(sp)
    5b68:	008000b4 	movhi	r2,2
    5b6c:	10baf604 	addi	r2,r2,-5160
    5b70:	d8803115 	stw	r2,196(sp)
    5b74:	dcc02d15 	stw	r19,180(sp)
    5b78:	d8003215 	stw	zero,200(sp)
    5b7c:	d8003415 	stw	zero,208(sp)
    5b80:	0005883a 	mov	r2,zero
    5b84:	003a6306 	br	4514 <__alt_mem_Flash_flash_data+0xf4004514>
    5b88:	0021883a 	mov	r16,zero
    5b8c:	003e1f06 	br	540c <__alt_mem_Flash_flash_data+0xf400540c>
    5b90:	b009883a 	mov	r4,r22
    5b94:	b80b883a 	mov	r5,r23
    5b98:	d9801e04 	addi	r6,sp,120
    5b9c:	000b72c0 	call	b72c <__sprint_r>
    5ba0:	1039f61e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5ba4:	d8802617 	ldw	r2,152(sp)
    5ba8:	db003317 	ldw	r12,204(sp)
    5bac:	d8c02017 	ldw	r3,128(sp)
    5bb0:	da000404 	addi	r8,sp,16
    5bb4:	6085c83a 	sub	r2,r12,r2
    5bb8:	003e1306 	br	5408 <__alt_mem_Flash_flash_data+0xf4005408>
    5bbc:	030000b4 	movhi	r12,2
    5bc0:	633b0484 	addi	r12,r12,-5102
    5bc4:	db003615 	stw	r12,216(sp)
    5bc8:	003b0206 	br	47d4 <__alt_mem_Flash_flash_data+0xf40047d4>
    5bcc:	00c00b44 	movi	r3,45
    5bd0:	d8802b15 	stw	r2,172(sp)
    5bd4:	dc402d17 	ldw	r17,180(sp)
    5bd8:	d8c02785 	stb	r3,158(sp)
    5bdc:	dcc02d15 	stw	r19,180(sp)
    5be0:	d8003215 	stw	zero,200(sp)
    5be4:	00800b44 	movi	r2,45
    5be8:	003a4706 	br	4508 <__alt_mem_Flash_flash_data+0xf4004508>
    5bec:	05400b44 	movi	r21,45
    5bf0:	dd402785 	stb	r21,158(sp)
    5bf4:	003b4706 	br	4914 <__alt_mem_Flash_flash_data+0xf4004914>
    5bf8:	008000b4 	movhi	r2,2
    5bfc:	10baeb04 	addi	r2,r2,-5204
    5c00:	d8803115 	stw	r2,196(sp)
    5c04:	003f4106 	br	590c <__alt_mem_Flash_flash_data+0xf400590c>
    5c08:	d8c02617 	ldw	r3,152(sp)
    5c0c:	00bfff44 	movi	r2,-3
    5c10:	18801116 	blt	r3,r2,5c58 <___vfprintf_internal_r+0x1cac>
    5c14:	48c01016 	blt	r9,r3,5c58 <___vfprintf_internal_r+0x1cac>
    5c18:	d8c03415 	stw	r3,208(sp)
    5c1c:	040019c4 	movi	r16,103
    5c20:	003eb206 	br	56ec <__alt_mem_Flash_flash_data+0xf40056ec>
    5c24:	010000b4 	movhi	r4,2
    5c28:	213b0084 	addi	r4,r4,-5118
    5c2c:	d9002c15 	stw	r4,176(sp)
    5c30:	003cb106 	br	4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    5c34:	5005883a 	mov	r2,r10
    5c38:	003ea106 	br	56c0 <__alt_mem_Flash_flash_data+0xf40056c0>
    5c3c:	da402b15 	stw	r9,172(sp)
    5c40:	dd402783 	ldbu	r21,158(sp)
    5c44:	4825883a 	mov	r18,r9
    5c48:	dcc02d15 	stw	r19,180(sp)
    5c4c:	d8003215 	stw	zero,200(sp)
    5c50:	d8003415 	stw	zero,208(sp)
    5c54:	003a2806 	br	44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    5c58:	843fff84 	addi	r16,r16,-2
    5c5c:	1f3fffc4 	addi	fp,r3,-1
    5c60:	df002615 	stw	fp,152(sp)
    5c64:	dc0022c5 	stb	r16,139(sp)
    5c68:	e0009816 	blt	fp,zero,5ecc <___vfprintf_internal_r+0x1f20>
    5c6c:	00800ac4 	movi	r2,43
    5c70:	d8802305 	stb	r2,140(sp)
    5c74:	00800244 	movi	r2,9
    5c78:	1700750e 	bge	r2,fp,5e50 <___vfprintf_internal_r+0x1ea4>
    5c7c:	dd4022c4 	addi	r21,sp,139
    5c80:	dc002c15 	stw	r16,176(sp)
    5c84:	4025883a 	mov	r18,r8
    5c88:	a821883a 	mov	r16,r21
    5c8c:	e009883a 	mov	r4,fp
    5c90:	01400284 	movi	r5,10
    5c94:	000eb800 	call	eb80 <__modsi3>
    5c98:	10800c04 	addi	r2,r2,48
    5c9c:	843fffc4 	addi	r16,r16,-1
    5ca0:	e009883a 	mov	r4,fp
    5ca4:	01400284 	movi	r5,10
    5ca8:	80800005 	stb	r2,0(r16)
    5cac:	000eb2c0 	call	eb2c <__divsi3>
    5cb0:	1039883a 	mov	fp,r2
    5cb4:	00800244 	movi	r2,9
    5cb8:	173ff416 	blt	r2,fp,5c8c <__alt_mem_Flash_flash_data+0xf4005c8c>
    5cbc:	9011883a 	mov	r8,r18
    5cc0:	e0800c04 	addi	r2,fp,48
    5cc4:	8025883a 	mov	r18,r16
    5cc8:	913fffc4 	addi	r4,r18,-1
    5ccc:	90bfffc5 	stb	r2,-1(r18)
    5cd0:	dc002c17 	ldw	r16,176(sp)
    5cd4:	2540852e 	bgeu	r4,r21,5eec <___vfprintf_internal_r+0x1f40>
    5cd8:	d9402384 	addi	r5,sp,142
    5cdc:	2c8bc83a 	sub	r5,r5,r18
    5ce0:	d8c02344 	addi	r3,sp,141
    5ce4:	a94b883a 	add	r5,r21,r5
    5ce8:	00000106 	br	5cf0 <___vfprintf_internal_r+0x1d44>
    5cec:	20800003 	ldbu	r2,0(r4)
    5cf0:	18800005 	stb	r2,0(r3)
    5cf4:	18c00044 	addi	r3,r3,1
    5cf8:	21000044 	addi	r4,r4,1
    5cfc:	197ffb1e 	bne	r3,r5,5cec <__alt_mem_Flash_flash_data+0xf4005cec>
    5d00:	d8802304 	addi	r2,sp,140
    5d04:	1485c83a 	sub	r2,r2,r18
    5d08:	d8c02344 	addi	r3,sp,141
    5d0c:	1885883a 	add	r2,r3,r2
    5d10:	dac03317 	ldw	r11,204(sp)
    5d14:	156bc83a 	sub	r21,r2,r21
    5d18:	dd403a15 	stw	r21,232(sp)
    5d1c:	00800044 	movi	r2,1
    5d20:	5d65883a 	add	r18,r11,r21
    5d24:	12c0660e 	bge	r2,r11,5ec0 <___vfprintf_internal_r+0x1f14>
    5d28:	94800044 	addi	r18,r18,1
    5d2c:	9005883a 	mov	r2,r18
    5d30:	90006116 	blt	r18,zero,5eb8 <___vfprintf_internal_r+0x1f0c>
    5d34:	d8003415 	stw	zero,208(sp)
    5d38:	003e7406 	br	570c <__alt_mem_Flash_flash_data+0xf400570c>
    5d3c:	b009883a 	mov	r4,r22
    5d40:	b80b883a 	mov	r5,r23
    5d44:	d9801e04 	addi	r6,sp,120
    5d48:	000b72c0 	call	b72c <__sprint_r>
    5d4c:	10398b1e 	bne	r2,zero,437c <__alt_mem_Flash_flash_data+0xf400437c>
    5d50:	dc002617 	ldw	r16,152(sp)
    5d54:	d8c02017 	ldw	r3,128(sp)
    5d58:	d8801f17 	ldw	r2,124(sp)
    5d5c:	da000404 	addi	r8,sp,16
    5d60:	003ec906 	br	5888 <__alt_mem_Flash_flash_data+0xf4005888>
    5d64:	483e1c1e 	bne	r9,zero,55d8 <__alt_mem_Flash_flash_data+0xf40055d8>
    5d68:	9013883a 	mov	r9,r18
    5d6c:	003e1a06 	br	55d8 <__alt_mem_Flash_flash_data+0xf40055d8>
    5d70:	02400184 	movi	r9,6
    5d74:	003e1806 	br	55d8 <__alt_mem_Flash_flash_data+0xf40055d8>
    5d78:	d8c03417 	ldw	r3,208(sp)
    5d7c:	00c04b0e 	bge	zero,r3,5eac <___vfprintf_internal_r+0x1f00>
    5d80:	04800044 	movi	r18,1
    5d84:	dac03317 	ldw	r11,204(sp)
    5d88:	92e5883a 	add	r18,r18,r11
    5d8c:	9005883a 	mov	r2,r18
    5d90:	903e5e0e 	bge	r18,zero,570c <__alt_mem_Flash_flash_data+0xf400570c>
    5d94:	0005883a 	mov	r2,zero
    5d98:	003e5c06 	br	570c <__alt_mem_Flash_flash_data+0xf400570c>
    5d9c:	00c00b44 	movi	r3,45
    5da0:	64a0003c 	xorhi	r18,r12,32768
    5da4:	d8c02b05 	stb	r3,172(sp)
    5da8:	003e1106 	br	55f0 <__alt_mem_Flash_flash_data+0xf40055f0>
    5dac:	4f000044 	addi	fp,r9,1
    5db0:	003e1606 	br	560c <__alt_mem_Flash_flash_data+0xf400560c>
    5db4:	d8c02617 	ldw	r3,152(sp)
    5db8:	d8c03415 	stw	r3,208(sp)
    5dbc:	00c0350e 	bge	zero,r3,5e94 <___vfprintf_internal_r+0x1ee8>
    5dc0:	4800081e 	bne	r9,zero,5de4 <___vfprintf_internal_r+0x1e38>
    5dc4:	8c40004c 	andi	r17,r17,1
    5dc8:	8800061e 	bne	r17,zero,5de4 <___vfprintf_internal_r+0x1e38>
    5dcc:	1805883a 	mov	r2,r3
    5dd0:	183e4d0e 	bge	r3,zero,5708 <__alt_mem_Flash_flash_data+0xf4005708>
    5dd4:	0005883a 	mov	r2,zero
    5dd8:	003e4b06 	br	5708 <__alt_mem_Flash_flash_data+0xf4005708>
    5ddc:	d8802117 	ldw	r2,132(sp)
    5de0:	003e3706 	br	56c0 <__alt_mem_Flash_flash_data+0xf40056c0>
    5de4:	dac03417 	ldw	r11,208(sp)
    5de8:	4a400044 	addi	r9,r9,1
    5dec:	5a65883a 	add	r18,r11,r9
    5df0:	9005883a 	mov	r2,r18
    5df4:	903e450e 	bge	r18,zero,570c <__alt_mem_Flash_flash_data+0xf400570c>
    5df8:	003fe606 	br	5d94 <__alt_mem_Flash_flash_data+0xf4005d94>
    5dfc:	db003417 	ldw	r12,208(sp)
    5e00:	64800044 	addi	r18,r12,1
    5e04:	9005883a 	mov	r2,r18
    5e08:	903e400e 	bge	r18,zero,570c <__alt_mem_Flash_flash_data+0xf400570c>
    5e0c:	003fe106 	br	5d94 <__alt_mem_Flash_flash_data+0xf4005d94>
    5e10:	d9003717 	ldw	r4,220(sp)
    5e14:	900b883a 	mov	r5,r18
    5e18:	000d883a 	mov	r6,zero
    5e1c:	000f883a 	mov	r7,zero
    5e20:	da003f15 	stw	r8,252(sp)
    5e24:	da403e15 	stw	r9,248(sp)
    5e28:	da803d15 	stw	r10,244(sp)
    5e2c:	000fd540 	call	fd54 <__eqdf2>
    5e30:	da003f17 	ldw	r8,252(sp)
    5e34:	da403e17 	ldw	r9,248(sp)
    5e38:	da803d17 	ldw	r10,244(sp)
    5e3c:	103f1f26 	beq	r2,zero,5abc <__alt_mem_Flash_flash_data+0xf4005abc>
    5e40:	00800044 	movi	r2,1
    5e44:	1707c83a 	sub	r3,r2,fp
    5e48:	d8c02615 	stw	r3,152(sp)
    5e4c:	003f1c06 	br	5ac0 <__alt_mem_Flash_flash_data+0xf4005ac0>
    5e50:	00800c04 	movi	r2,48
    5e54:	e0c00c04 	addi	r3,fp,48
    5e58:	d8802345 	stb	r2,141(sp)
    5e5c:	d8c02385 	stb	r3,142(sp)
    5e60:	d88023c4 	addi	r2,sp,143
    5e64:	dd4022c4 	addi	r21,sp,139
    5e68:	003fa906 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5e6c:	0005883a 	mov	r2,zero
    5e70:	003f3c06 	br	5b64 <__alt_mem_Flash_flash_data+0xf4005b64>
    5e74:	dac02d17 	ldw	r11,180(sp)
    5e78:	5a400017 	ldw	r9,0(r11)
    5e7c:	5ac00104 	addi	r11,r11,4
    5e80:	dac02d15 	stw	r11,180(sp)
    5e84:	483ec80e 	bge	r9,zero,59a8 <__alt_mem_Flash_flash_data+0xf40059a8>
    5e88:	027fffc4 	movi	r9,-1
    5e8c:	1c000047 	ldb	r16,1(r3)
    5e90:	0038ab06 	br	4140 <__alt_mem_Flash_flash_data+0xf4004140>
    5e94:	4800111e 	bne	r9,zero,5edc <___vfprintf_internal_r+0x1f30>
    5e98:	8c40004c 	andi	r17,r17,1
    5e9c:	88000f1e 	bne	r17,zero,5edc <___vfprintf_internal_r+0x1f30>
    5ea0:	00800044 	movi	r2,1
    5ea4:	1025883a 	mov	r18,r2
    5ea8:	003e1806 	br	570c <__alt_mem_Flash_flash_data+0xf400570c>
    5eac:	04800084 	movi	r18,2
    5eb0:	90e5c83a 	sub	r18,r18,r3
    5eb4:	003fb306 	br	5d84 <__alt_mem_Flash_flash_data+0xf4005d84>
    5eb8:	0005883a 	mov	r2,zero
    5ebc:	003f9d06 	br	5d34 <__alt_mem_Flash_flash_data+0xf4005d34>
    5ec0:	88a2703a 	and	r17,r17,r2
    5ec4:	883f9926 	beq	r17,zero,5d2c <__alt_mem_Flash_flash_data+0xf4005d2c>
    5ec8:	003f9706 	br	5d28 <__alt_mem_Flash_flash_data+0xf4005d28>
    5ecc:	00800b44 	movi	r2,45
    5ed0:	0739c83a 	sub	fp,zero,fp
    5ed4:	d8802305 	stb	r2,140(sp)
    5ed8:	003f6606 	br	5c74 <__alt_mem_Flash_flash_data+0xf4005c74>
    5edc:	4c800084 	addi	r18,r9,2
    5ee0:	9005883a 	mov	r2,r18
    5ee4:	903e090e 	bge	r18,zero,570c <__alt_mem_Flash_flash_data+0xf400570c>
    5ee8:	003faa06 	br	5d94 <__alt_mem_Flash_flash_data+0xf4005d94>
    5eec:	d8802344 	addi	r2,sp,141
    5ef0:	003f8706 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5ef4:	d8c02617 	ldw	r3,152(sp)
    5ef8:	003f5806 	br	5c5c <__alt_mem_Flash_flash_data+0xf4005c5c>

00005efc <__vfprintf_internal>:
    5efc:	2007883a 	mov	r3,r4
    5f00:	010000b4 	movhi	r4,2
    5f04:	21055404 	addi	r4,r4,5456
    5f08:	21000017 	ldw	r4,0(r4)
    5f0c:	2805883a 	mov	r2,r5
    5f10:	300f883a 	mov	r7,r6
    5f14:	180b883a 	mov	r5,r3
    5f18:	100d883a 	mov	r6,r2
    5f1c:	0003fac1 	jmpi	3fac <___vfprintf_internal_r>

00005f20 <__sbprintf>:
    5f20:	2880030b 	ldhu	r2,12(r5)
    5f24:	2ac01917 	ldw	r11,100(r5)
    5f28:	2a80038b 	ldhu	r10,14(r5)
    5f2c:	2a400717 	ldw	r9,28(r5)
    5f30:	2a000917 	ldw	r8,36(r5)
    5f34:	defee204 	addi	sp,sp,-1144
    5f38:	00c10004 	movi	r3,1024
    5f3c:	dc011a15 	stw	r16,1128(sp)
    5f40:	10bfff4c 	andi	r2,r2,65533
    5f44:	2821883a 	mov	r16,r5
    5f48:	d8cb883a 	add	r5,sp,r3
    5f4c:	dc811c15 	stw	r18,1136(sp)
    5f50:	dc411b15 	stw	r17,1132(sp)
    5f54:	dfc11d15 	stw	ra,1140(sp)
    5f58:	2025883a 	mov	r18,r4
    5f5c:	d881030d 	sth	r2,1036(sp)
    5f60:	dac11915 	stw	r11,1124(sp)
    5f64:	da81038d 	sth	r10,1038(sp)
    5f68:	da410715 	stw	r9,1052(sp)
    5f6c:	da010915 	stw	r8,1060(sp)
    5f70:	dec10015 	stw	sp,1024(sp)
    5f74:	dec10415 	stw	sp,1040(sp)
    5f78:	d8c10215 	stw	r3,1032(sp)
    5f7c:	d8c10515 	stw	r3,1044(sp)
    5f80:	d8010615 	stw	zero,1048(sp)
    5f84:	0003fac0 	call	3fac <___vfprintf_internal_r>
    5f88:	1023883a 	mov	r17,r2
    5f8c:	10000416 	blt	r2,zero,5fa0 <__sbprintf+0x80>
    5f90:	9009883a 	mov	r4,r18
    5f94:	d9410004 	addi	r5,sp,1024
    5f98:	0007c600 	call	7c60 <_fflush_r>
    5f9c:	10000d1e 	bne	r2,zero,5fd4 <__sbprintf+0xb4>
    5fa0:	d8c1030b 	ldhu	r3,1036(sp)
    5fa4:	18c0100c 	andi	r3,r3,64
    5fa8:	18000326 	beq	r3,zero,5fb8 <__sbprintf+0x98>
    5fac:	8080030b 	ldhu	r2,12(r16)
    5fb0:	10801014 	ori	r2,r2,64
    5fb4:	8080030d 	sth	r2,12(r16)
    5fb8:	8805883a 	mov	r2,r17
    5fbc:	dfc11d17 	ldw	ra,1140(sp)
    5fc0:	dc811c17 	ldw	r18,1136(sp)
    5fc4:	dc411b17 	ldw	r17,1132(sp)
    5fc8:	dc011a17 	ldw	r16,1128(sp)
    5fcc:	dec11e04 	addi	sp,sp,1144
    5fd0:	f800283a 	ret
    5fd4:	047fffc4 	movi	r17,-1
    5fd8:	003ff106 	br	5fa0 <__alt_mem_Flash_flash_data+0xf4005fa0>

00005fdc <__swsetup_r>:
    5fdc:	008000b4 	movhi	r2,2
    5fe0:	defffd04 	addi	sp,sp,-12
    5fe4:	10855404 	addi	r2,r2,5456
    5fe8:	dc400115 	stw	r17,4(sp)
    5fec:	2023883a 	mov	r17,r4
    5ff0:	11000017 	ldw	r4,0(r2)
    5ff4:	dc000015 	stw	r16,0(sp)
    5ff8:	dfc00215 	stw	ra,8(sp)
    5ffc:	2821883a 	mov	r16,r5
    6000:	20000226 	beq	r4,zero,600c <__swsetup_r+0x30>
    6004:	20c00e17 	ldw	r3,56(r4)
    6008:	18003126 	beq	r3,zero,60d0 <__swsetup_r+0xf4>
    600c:	8080030b 	ldhu	r2,12(r16)
    6010:	10c0020c 	andi	r3,r2,8
    6014:	100d883a 	mov	r6,r2
    6018:	18000f26 	beq	r3,zero,6058 <__swsetup_r+0x7c>
    601c:	80c00417 	ldw	r3,16(r16)
    6020:	18001526 	beq	r3,zero,6078 <__swsetup_r+0x9c>
    6024:	1100004c 	andi	r4,r2,1
    6028:	20001c1e 	bne	r4,zero,609c <__swsetup_r+0xc0>
    602c:	1080008c 	andi	r2,r2,2
    6030:	1000291e 	bne	r2,zero,60d8 <__swsetup_r+0xfc>
    6034:	80800517 	ldw	r2,20(r16)
    6038:	80800215 	stw	r2,8(r16)
    603c:	18001c26 	beq	r3,zero,60b0 <__swsetup_r+0xd4>
    6040:	0005883a 	mov	r2,zero
    6044:	dfc00217 	ldw	ra,8(sp)
    6048:	dc400117 	ldw	r17,4(sp)
    604c:	dc000017 	ldw	r16,0(sp)
    6050:	dec00304 	addi	sp,sp,12
    6054:	f800283a 	ret
    6058:	3080040c 	andi	r2,r6,16
    605c:	10002e26 	beq	r2,zero,6118 <__swsetup_r+0x13c>
    6060:	3080010c 	andi	r2,r6,4
    6064:	10001e1e 	bne	r2,zero,60e0 <__swsetup_r+0x104>
    6068:	80c00417 	ldw	r3,16(r16)
    606c:	30800214 	ori	r2,r6,8
    6070:	8080030d 	sth	r2,12(r16)
    6074:	183feb1e 	bne	r3,zero,6024 <__alt_mem_Flash_flash_data+0xf4006024>
    6078:	1140a00c 	andi	r5,r2,640
    607c:	01008004 	movi	r4,512
    6080:	293fe826 	beq	r5,r4,6024 <__alt_mem_Flash_flash_data+0xf4006024>
    6084:	8809883a 	mov	r4,r17
    6088:	800b883a 	mov	r5,r16
    608c:	00087080 	call	8708 <__smakebuf_r>
    6090:	8080030b 	ldhu	r2,12(r16)
    6094:	80c00417 	ldw	r3,16(r16)
    6098:	003fe206 	br	6024 <__alt_mem_Flash_flash_data+0xf4006024>
    609c:	80800517 	ldw	r2,20(r16)
    60a0:	80000215 	stw	zero,8(r16)
    60a4:	0085c83a 	sub	r2,zero,r2
    60a8:	80800615 	stw	r2,24(r16)
    60ac:	183fe41e 	bne	r3,zero,6040 <__alt_mem_Flash_flash_data+0xf4006040>
    60b0:	80c0030b 	ldhu	r3,12(r16)
    60b4:	0005883a 	mov	r2,zero
    60b8:	1900200c 	andi	r4,r3,128
    60bc:	203fe126 	beq	r4,zero,6044 <__alt_mem_Flash_flash_data+0xf4006044>
    60c0:	18c01014 	ori	r3,r3,64
    60c4:	80c0030d 	sth	r3,12(r16)
    60c8:	00bfffc4 	movi	r2,-1
    60cc:	003fdd06 	br	6044 <__alt_mem_Flash_flash_data+0xf4006044>
    60d0:	000803c0 	call	803c <__sinit>
    60d4:	003fcd06 	br	600c <__alt_mem_Flash_flash_data+0xf400600c>
    60d8:	0005883a 	mov	r2,zero
    60dc:	003fd606 	br	6038 <__alt_mem_Flash_flash_data+0xf4006038>
    60e0:	81400c17 	ldw	r5,48(r16)
    60e4:	28000626 	beq	r5,zero,6100 <__swsetup_r+0x124>
    60e8:	80801004 	addi	r2,r16,64
    60ec:	28800326 	beq	r5,r2,60fc <__swsetup_r+0x120>
    60f0:	8809883a 	mov	r4,r17
    60f4:	00081b00 	call	81b0 <_free_r>
    60f8:	8180030b 	ldhu	r6,12(r16)
    60fc:	80000c15 	stw	zero,48(r16)
    6100:	80c00417 	ldw	r3,16(r16)
    6104:	00bff6c4 	movi	r2,-37
    6108:	118c703a 	and	r6,r2,r6
    610c:	80000115 	stw	zero,4(r16)
    6110:	80c00015 	stw	r3,0(r16)
    6114:	003fd506 	br	606c <__alt_mem_Flash_flash_data+0xf400606c>
    6118:	00800244 	movi	r2,9
    611c:	88800015 	stw	r2,0(r17)
    6120:	30801014 	ori	r2,r6,64
    6124:	8080030d 	sth	r2,12(r16)
    6128:	00bfffc4 	movi	r2,-1
    612c:	003fc506 	br	6044 <__alt_mem_Flash_flash_data+0xf4006044>

00006130 <quorem>:
    6130:	defff704 	addi	sp,sp,-36
    6134:	dc800215 	stw	r18,8(sp)
    6138:	20800417 	ldw	r2,16(r4)
    613c:	2c800417 	ldw	r18,16(r5)
    6140:	dfc00815 	stw	ra,32(sp)
    6144:	ddc00715 	stw	r23,28(sp)
    6148:	dd800615 	stw	r22,24(sp)
    614c:	dd400515 	stw	r21,20(sp)
    6150:	dd000415 	stw	r20,16(sp)
    6154:	dcc00315 	stw	r19,12(sp)
    6158:	dc400115 	stw	r17,4(sp)
    615c:	dc000015 	stw	r16,0(sp)
    6160:	14807116 	blt	r2,r18,6328 <quorem+0x1f8>
    6164:	94bfffc4 	addi	r18,r18,-1
    6168:	94ad883a 	add	r22,r18,r18
    616c:	b5ad883a 	add	r22,r22,r22
    6170:	2c400504 	addi	r17,r5,20
    6174:	8da9883a 	add	r20,r17,r22
    6178:	25400504 	addi	r21,r4,20
    617c:	282f883a 	mov	r23,r5
    6180:	adad883a 	add	r22,r21,r22
    6184:	a1400017 	ldw	r5,0(r20)
    6188:	2021883a 	mov	r16,r4
    618c:	b1000017 	ldw	r4,0(r22)
    6190:	29400044 	addi	r5,r5,1
    6194:	000ebdc0 	call	ebdc <__udivsi3>
    6198:	1027883a 	mov	r19,r2
    619c:	10002c26 	beq	r2,zero,6250 <quorem+0x120>
    61a0:	a813883a 	mov	r9,r21
    61a4:	8811883a 	mov	r8,r17
    61a8:	0009883a 	mov	r4,zero
    61ac:	000d883a 	mov	r6,zero
    61b0:	41c00017 	ldw	r7,0(r8)
    61b4:	49400017 	ldw	r5,0(r9)
    61b8:	42000104 	addi	r8,r8,4
    61bc:	38bfffcc 	andi	r2,r7,65535
    61c0:	14c5383a 	mul	r2,r2,r19
    61c4:	380ed43a 	srli	r7,r7,16
    61c8:	28ffffcc 	andi	r3,r5,65535
    61cc:	2085883a 	add	r2,r4,r2
    61d0:	1008d43a 	srli	r4,r2,16
    61d4:	3ccf383a 	mul	r7,r7,r19
    61d8:	198d883a 	add	r6,r3,r6
    61dc:	10ffffcc 	andi	r3,r2,65535
    61e0:	30c7c83a 	sub	r3,r6,r3
    61e4:	280ad43a 	srli	r5,r5,16
    61e8:	21c9883a 	add	r4,r4,r7
    61ec:	180dd43a 	srai	r6,r3,16
    61f0:	20bfffcc 	andi	r2,r4,65535
    61f4:	288bc83a 	sub	r5,r5,r2
    61f8:	298b883a 	add	r5,r5,r6
    61fc:	280e943a 	slli	r7,r5,16
    6200:	18ffffcc 	andi	r3,r3,65535
    6204:	2008d43a 	srli	r4,r4,16
    6208:	38ceb03a 	or	r7,r7,r3
    620c:	49c00015 	stw	r7,0(r9)
    6210:	280dd43a 	srai	r6,r5,16
    6214:	4a400104 	addi	r9,r9,4
    6218:	a23fe52e 	bgeu	r20,r8,61b0 <__alt_mem_Flash_flash_data+0xf40061b0>
    621c:	b0800017 	ldw	r2,0(r22)
    6220:	10000b1e 	bne	r2,zero,6250 <quorem+0x120>
    6224:	b0bfff04 	addi	r2,r22,-4
    6228:	a880082e 	bgeu	r21,r2,624c <quorem+0x11c>
    622c:	b0ffff17 	ldw	r3,-4(r22)
    6230:	18000326 	beq	r3,zero,6240 <quorem+0x110>
    6234:	00000506 	br	624c <quorem+0x11c>
    6238:	10c00017 	ldw	r3,0(r2)
    623c:	1800031e 	bne	r3,zero,624c <quorem+0x11c>
    6240:	10bfff04 	addi	r2,r2,-4
    6244:	94bfffc4 	addi	r18,r18,-1
    6248:	a8bffb36 	bltu	r21,r2,6238 <__alt_mem_Flash_flash_data+0xf4006238>
    624c:	84800415 	stw	r18,16(r16)
    6250:	8009883a 	mov	r4,r16
    6254:	b80b883a 	mov	r5,r23
    6258:	0009b5c0 	call	9b5c <__mcmp>
    625c:	10002616 	blt	r2,zero,62f8 <quorem+0x1c8>
    6260:	9cc00044 	addi	r19,r19,1
    6264:	a80d883a 	mov	r6,r21
    6268:	000b883a 	mov	r5,zero
    626c:	31000017 	ldw	r4,0(r6)
    6270:	88800017 	ldw	r2,0(r17)
    6274:	31800104 	addi	r6,r6,4
    6278:	20ffffcc 	andi	r3,r4,65535
    627c:	194b883a 	add	r5,r3,r5
    6280:	10ffffcc 	andi	r3,r2,65535
    6284:	28c7c83a 	sub	r3,r5,r3
    6288:	1004d43a 	srli	r2,r2,16
    628c:	2008d43a 	srli	r4,r4,16
    6290:	180bd43a 	srai	r5,r3,16
    6294:	18ffffcc 	andi	r3,r3,65535
    6298:	2089c83a 	sub	r4,r4,r2
    629c:	2149883a 	add	r4,r4,r5
    62a0:	2004943a 	slli	r2,r4,16
    62a4:	8c400104 	addi	r17,r17,4
    62a8:	200bd43a 	srai	r5,r4,16
    62ac:	10c6b03a 	or	r3,r2,r3
    62b0:	30ffff15 	stw	r3,-4(r6)
    62b4:	a47fed2e 	bgeu	r20,r17,626c <__alt_mem_Flash_flash_data+0xf400626c>
    62b8:	9485883a 	add	r2,r18,r18
    62bc:	1085883a 	add	r2,r2,r2
    62c0:	a887883a 	add	r3,r21,r2
    62c4:	18800017 	ldw	r2,0(r3)
    62c8:	10000b1e 	bne	r2,zero,62f8 <quorem+0x1c8>
    62cc:	18bfff04 	addi	r2,r3,-4
    62d0:	a880082e 	bgeu	r21,r2,62f4 <quorem+0x1c4>
    62d4:	18ffff17 	ldw	r3,-4(r3)
    62d8:	18000326 	beq	r3,zero,62e8 <quorem+0x1b8>
    62dc:	00000506 	br	62f4 <quorem+0x1c4>
    62e0:	10c00017 	ldw	r3,0(r2)
    62e4:	1800031e 	bne	r3,zero,62f4 <quorem+0x1c4>
    62e8:	10bfff04 	addi	r2,r2,-4
    62ec:	94bfffc4 	addi	r18,r18,-1
    62f0:	a8bffb36 	bltu	r21,r2,62e0 <__alt_mem_Flash_flash_data+0xf40062e0>
    62f4:	84800415 	stw	r18,16(r16)
    62f8:	9805883a 	mov	r2,r19
    62fc:	dfc00817 	ldw	ra,32(sp)
    6300:	ddc00717 	ldw	r23,28(sp)
    6304:	dd800617 	ldw	r22,24(sp)
    6308:	dd400517 	ldw	r21,20(sp)
    630c:	dd000417 	ldw	r20,16(sp)
    6310:	dcc00317 	ldw	r19,12(sp)
    6314:	dc800217 	ldw	r18,8(sp)
    6318:	dc400117 	ldw	r17,4(sp)
    631c:	dc000017 	ldw	r16,0(sp)
    6320:	dec00904 	addi	sp,sp,36
    6324:	f800283a 	ret
    6328:	0005883a 	mov	r2,zero
    632c:	003ff306 	br	62fc <__alt_mem_Flash_flash_data+0xf40062fc>

00006330 <_dtoa_r>:
    6330:	20801017 	ldw	r2,64(r4)
    6334:	deffde04 	addi	sp,sp,-136
    6338:	dd401d15 	stw	r21,116(sp)
    633c:	dcc01b15 	stw	r19,108(sp)
    6340:	dc801a15 	stw	r18,104(sp)
    6344:	dc401915 	stw	r17,100(sp)
    6348:	dc001815 	stw	r16,96(sp)
    634c:	dfc02115 	stw	ra,132(sp)
    6350:	df002015 	stw	fp,128(sp)
    6354:	ddc01f15 	stw	r23,124(sp)
    6358:	dd801e15 	stw	r22,120(sp)
    635c:	dd001c15 	stw	r20,112(sp)
    6360:	d9c00315 	stw	r7,12(sp)
    6364:	2021883a 	mov	r16,r4
    6368:	302b883a 	mov	r21,r6
    636c:	2825883a 	mov	r18,r5
    6370:	dc402417 	ldw	r17,144(sp)
    6374:	3027883a 	mov	r19,r6
    6378:	10000826 	beq	r2,zero,639c <_dtoa_r+0x6c>
    637c:	21801117 	ldw	r6,68(r4)
    6380:	00c00044 	movi	r3,1
    6384:	100b883a 	mov	r5,r2
    6388:	1986983a 	sll	r3,r3,r6
    638c:	11800115 	stw	r6,4(r2)
    6390:	10c00215 	stw	r3,8(r2)
    6394:	00093300 	call	9330 <_Bfree>
    6398:	80001015 	stw	zero,64(r16)
    639c:	a8002d16 	blt	r21,zero,6454 <_dtoa_r+0x124>
    63a0:	88000015 	stw	zero,0(r17)
    63a4:	a8dffc2c 	andhi	r3,r21,32752
    63a8:	009ffc34 	movhi	r2,32752
    63ac:	18801b26 	beq	r3,r2,641c <_dtoa_r+0xec>
    63b0:	9009883a 	mov	r4,r18
    63b4:	980b883a 	mov	r5,r19
    63b8:	000d883a 	mov	r6,zero
    63bc:	000f883a 	mov	r7,zero
    63c0:	000fd540 	call	fd54 <__eqdf2>
    63c4:	10002a1e 	bne	r2,zero,6470 <_dtoa_r+0x140>
    63c8:	d8c02317 	ldw	r3,140(sp)
    63cc:	d9002517 	ldw	r4,148(sp)
    63d0:	00800044 	movi	r2,1
    63d4:	18800015 	stw	r2,0(r3)
    63d8:	2001a226 	beq	r4,zero,6a64 <_dtoa_r+0x734>
    63dc:	008000b4 	movhi	r2,2
    63e0:	10baf844 	addi	r2,r2,-5151
    63e4:	20800015 	stw	r2,0(r4)
    63e8:	10bfffc4 	addi	r2,r2,-1
    63ec:	dfc02117 	ldw	ra,132(sp)
    63f0:	df002017 	ldw	fp,128(sp)
    63f4:	ddc01f17 	ldw	r23,124(sp)
    63f8:	dd801e17 	ldw	r22,120(sp)
    63fc:	dd401d17 	ldw	r21,116(sp)
    6400:	dd001c17 	ldw	r20,112(sp)
    6404:	dcc01b17 	ldw	r19,108(sp)
    6408:	dc801a17 	ldw	r18,104(sp)
    640c:	dc401917 	ldw	r17,100(sp)
    6410:	dc001817 	ldw	r16,96(sp)
    6414:	dec02204 	addi	sp,sp,136
    6418:	f800283a 	ret
    641c:	d8c02317 	ldw	r3,140(sp)
    6420:	0089c3c4 	movi	r2,9999
    6424:	18800015 	stw	r2,0(r3)
    6428:	90017c26 	beq	r18,zero,6a1c <_dtoa_r+0x6ec>
    642c:	008000b4 	movhi	r2,2
    6430:	10bb0c04 	addi	r2,r2,-5072
    6434:	d9002517 	ldw	r4,148(sp)
    6438:	203fec26 	beq	r4,zero,63ec <__alt_mem_Flash_flash_data+0xf40063ec>
    643c:	10c000c7 	ldb	r3,3(r2)
    6440:	18017d1e 	bne	r3,zero,6a38 <_dtoa_r+0x708>
    6444:	10c000c4 	addi	r3,r2,3
    6448:	d9802517 	ldw	r6,148(sp)
    644c:	30c00015 	stw	r3,0(r6)
    6450:	003fe606 	br	63ec <__alt_mem_Flash_flash_data+0xf40063ec>
    6454:	04e00034 	movhi	r19,32768
    6458:	9cffffc4 	addi	r19,r19,-1
    645c:	00800044 	movi	r2,1
    6460:	ace6703a 	and	r19,r21,r19
    6464:	88800015 	stw	r2,0(r17)
    6468:	982b883a 	mov	r21,r19
    646c:	003fcd06 	br	63a4 <__alt_mem_Flash_flash_data+0xf40063a4>
    6470:	d8800204 	addi	r2,sp,8
    6474:	a822d53a 	srli	r17,r21,20
    6478:	d8800015 	stw	r2,0(sp)
    647c:	8009883a 	mov	r4,r16
    6480:	900b883a 	mov	r5,r18
    6484:	980d883a 	mov	r6,r19
    6488:	d9c00104 	addi	r7,sp,4
    648c:	0009ed00 	call	9ed0 <__d2b>
    6490:	1039883a 	mov	fp,r2
    6494:	88016a1e 	bne	r17,zero,6a40 <_dtoa_r+0x710>
    6498:	dd000217 	ldw	r20,8(sp)
    649c:	dc400117 	ldw	r17,4(sp)
    64a0:	00befbc4 	movi	r2,-1041
    64a4:	a463883a 	add	r17,r20,r17
    64a8:	8882ea16 	blt	r17,r2,7054 <_dtoa_r+0xd24>
    64ac:	00bf0384 	movi	r2,-1010
    64b0:	1445c83a 	sub	r2,r2,r17
    64b4:	89010484 	addi	r4,r17,1042
    64b8:	a8aa983a 	sll	r21,r21,r2
    64bc:	9108d83a 	srl	r4,r18,r4
    64c0:	a908b03a 	or	r4,r21,r4
    64c4:	00110e40 	call	110e4 <__floatunsidf>
    64c8:	017f8434 	movhi	r5,65040
    64cc:	01800044 	movi	r6,1
    64d0:	1009883a 	mov	r4,r2
    64d4:	194b883a 	add	r5,r3,r5
    64d8:	8c7fffc4 	addi	r17,r17,-1
    64dc:	d9800f15 	stw	r6,60(sp)
    64e0:	000d883a 	mov	r6,zero
    64e4:	01cffe34 	movhi	r7,16376
    64e8:	00106bc0 	call	106bc <__subdf3>
    64ec:	0198dbf4 	movhi	r6,25455
    64f0:	01cff4f4 	movhi	r7,16339
    64f4:	1009883a 	mov	r4,r2
    64f8:	180b883a 	mov	r5,r3
    64fc:	3190d844 	addi	r6,r6,17249
    6500:	39e1e9c4 	addi	r7,r7,-30809
    6504:	000ff980 	call	ff98 <__muldf3>
    6508:	01a2d874 	movhi	r6,35681
    650c:	01cff1f4 	movhi	r7,16327
    6510:	180b883a 	mov	r5,r3
    6514:	31b22cc4 	addi	r6,r6,-14157
    6518:	39e28a04 	addi	r7,r7,-30168
    651c:	1009883a 	mov	r4,r2
    6520:	000ebec0 	call	ebec <__adddf3>
    6524:	8809883a 	mov	r4,r17
    6528:	102d883a 	mov	r22,r2
    652c:	182b883a 	mov	r21,r3
    6530:	00110140 	call	11014 <__floatsidf>
    6534:	019427f4 	movhi	r6,20639
    6538:	01cff4f4 	movhi	r7,16339
    653c:	1009883a 	mov	r4,r2
    6540:	180b883a 	mov	r5,r3
    6544:	319e7ec4 	addi	r6,r6,31227
    6548:	39d104c4 	addi	r7,r7,17427
    654c:	000ff980 	call	ff98 <__muldf3>
    6550:	b009883a 	mov	r4,r22
    6554:	a80b883a 	mov	r5,r21
    6558:	100d883a 	mov	r6,r2
    655c:	180f883a 	mov	r7,r3
    6560:	000ebec0 	call	ebec <__adddf3>
    6564:	1009883a 	mov	r4,r2
    6568:	180b883a 	mov	r5,r3
    656c:	102d883a 	mov	r22,r2
    6570:	182b883a 	mov	r21,r3
    6574:	0010f8c0 	call	10f8c <__fixdfsi>
    6578:	b009883a 	mov	r4,r22
    657c:	a80b883a 	mov	r5,r21
    6580:	000d883a 	mov	r6,zero
    6584:	000f883a 	mov	r7,zero
    6588:	d8800515 	stw	r2,20(sp)
    658c:	000feb80 	call	feb8 <__ledf2>
    6590:	10023116 	blt	r2,zero,6e58 <_dtoa_r+0xb28>
    6594:	d8c00517 	ldw	r3,20(sp)
    6598:	00800584 	movi	r2,22
    659c:	10c21f36 	bltu	r2,r3,6e1c <_dtoa_r+0xaec>
    65a0:	180490fa 	slli	r2,r3,3
    65a4:	00c000b4 	movhi	r3,2
    65a8:	18fb2804 	addi	r3,r3,-4960
    65ac:	1885883a 	add	r2,r3,r2
    65b0:	11000017 	ldw	r4,0(r2)
    65b4:	11400117 	ldw	r5,4(r2)
    65b8:	900d883a 	mov	r6,r18
    65bc:	980f883a 	mov	r7,r19
    65c0:	000fdd80 	call	fdd8 <__gedf2>
    65c4:	0082a70e 	bge	zero,r2,7064 <_dtoa_r+0xd34>
    65c8:	d9000517 	ldw	r4,20(sp)
    65cc:	d8000d15 	stw	zero,52(sp)
    65d0:	213fffc4 	addi	r4,r4,-1
    65d4:	d9000515 	stw	r4,20(sp)
    65d8:	a463c83a 	sub	r17,r20,r17
    65dc:	8dbfffc4 	addi	r22,r17,-1
    65e0:	b0021916 	blt	r22,zero,6e48 <_dtoa_r+0xb18>
    65e4:	d8000815 	stw	zero,32(sp)
    65e8:	d8800517 	ldw	r2,20(sp)
    65ec:	10020e16 	blt	r2,zero,6e28 <_dtoa_r+0xaf8>
    65f0:	b0ad883a 	add	r22,r22,r2
    65f4:	d8800a15 	stw	r2,40(sp)
    65f8:	d8000915 	stw	zero,36(sp)
    65fc:	d8c00317 	ldw	r3,12(sp)
    6600:	00800244 	movi	r2,9
    6604:	10c11a36 	bltu	r2,r3,6a70 <_dtoa_r+0x740>
    6608:	00800144 	movi	r2,5
    660c:	10c4fc0e 	bge	r2,r3,7a00 <_dtoa_r+0x16d0>
    6610:	18ffff04 	addi	r3,r3,-4
    6614:	d8c00315 	stw	r3,12(sp)
    6618:	0029883a 	mov	r20,zero
    661c:	d9800317 	ldw	r6,12(sp)
    6620:	008000c4 	movi	r2,3
    6624:	3083bd26 	beq	r6,r2,751c <_dtoa_r+0x11ec>
    6628:	1183670e 	bge	r2,r6,73c8 <_dtoa_r+0x1098>
    662c:	d8c00317 	ldw	r3,12(sp)
    6630:	00800104 	movi	r2,4
    6634:	1882e726 	beq	r3,r2,71d4 <_dtoa_r+0xea4>
    6638:	00800144 	movi	r2,5
    663c:	1884f21e 	bne	r3,r2,7a08 <_dtoa_r+0x16d8>
    6640:	00800044 	movi	r2,1
    6644:	d8800b15 	stw	r2,44(sp)
    6648:	d8c02217 	ldw	r3,136(sp)
    664c:	d9000517 	ldw	r4,20(sp)
    6650:	1907883a 	add	r3,r3,r4
    6654:	19800044 	addi	r6,r3,1
    6658:	d8c00c15 	stw	r3,48(sp)
    665c:	d9800615 	stw	r6,24(sp)
    6660:	0183c30e 	bge	zero,r6,7570 <_dtoa_r+0x1240>
    6664:	d9800617 	ldw	r6,24(sp)
    6668:	3023883a 	mov	r17,r6
    666c:	80001115 	stw	zero,68(r16)
    6670:	008005c4 	movi	r2,23
    6674:	1184f62e 	bgeu	r2,r6,7a50 <_dtoa_r+0x1720>
    6678:	00c00044 	movi	r3,1
    667c:	00800104 	movi	r2,4
    6680:	1085883a 	add	r2,r2,r2
    6684:	11000504 	addi	r4,r2,20
    6688:	180b883a 	mov	r5,r3
    668c:	18c00044 	addi	r3,r3,1
    6690:	313ffb2e 	bgeu	r6,r4,6680 <__alt_mem_Flash_flash_data+0xf4006680>
    6694:	81401115 	stw	r5,68(r16)
    6698:	8009883a 	mov	r4,r16
    669c:	00092880 	call	9288 <_Balloc>
    66a0:	d8800715 	stw	r2,28(sp)
    66a4:	80801015 	stw	r2,64(r16)
    66a8:	00800384 	movi	r2,14
    66ac:	1440fd36 	bltu	r2,r17,6aa4 <_dtoa_r+0x774>
    66b0:	a000fc26 	beq	r20,zero,6aa4 <_dtoa_r+0x774>
    66b4:	d8800517 	ldw	r2,20(sp)
    66b8:	0083b90e 	bge	zero,r2,75a0 <_dtoa_r+0x1270>
    66bc:	d8c00517 	ldw	r3,20(sp)
    66c0:	108003cc 	andi	r2,r2,15
    66c4:	100490fa 	slli	r2,r2,3
    66c8:	182fd13a 	srai	r23,r3,4
    66cc:	00c000b4 	movhi	r3,2
    66d0:	18fb2804 	addi	r3,r3,-4960
    66d4:	1885883a 	add	r2,r3,r2
    66d8:	b8c0040c 	andi	r3,r23,16
    66dc:	12c00017 	ldw	r11,0(r2)
    66e0:	12800117 	ldw	r10,4(r2)
    66e4:	18039726 	beq	r3,zero,7544 <_dtoa_r+0x1214>
    66e8:	008000b4 	movhi	r2,2
    66ec:	10bb1e04 	addi	r2,r2,-5000
    66f0:	11800817 	ldw	r6,32(r2)
    66f4:	11c00917 	ldw	r7,36(r2)
    66f8:	9009883a 	mov	r4,r18
    66fc:	980b883a 	mov	r5,r19
    6700:	da801615 	stw	r10,88(sp)
    6704:	dac01515 	stw	r11,84(sp)
    6708:	000f4880 	call	f488 <__divdf3>
    670c:	da801617 	ldw	r10,88(sp)
    6710:	dac01517 	ldw	r11,84(sp)
    6714:	bdc003cc 	andi	r23,r23,15
    6718:	044000c4 	movi	r17,3
    671c:	d8800e15 	stw	r2,56(sp)
    6720:	182b883a 	mov	r21,r3
    6724:	b8001126 	beq	r23,zero,676c <_dtoa_r+0x43c>
    6728:	050000b4 	movhi	r20,2
    672c:	a53b1e04 	addi	r20,r20,-5000
    6730:	5805883a 	mov	r2,r11
    6734:	5007883a 	mov	r3,r10
    6738:	b980004c 	andi	r6,r23,1
    673c:	1009883a 	mov	r4,r2
    6740:	b82fd07a 	srai	r23,r23,1
    6744:	180b883a 	mov	r5,r3
    6748:	30000426 	beq	r6,zero,675c <_dtoa_r+0x42c>
    674c:	a1800017 	ldw	r6,0(r20)
    6750:	a1c00117 	ldw	r7,4(r20)
    6754:	8c400044 	addi	r17,r17,1
    6758:	000ff980 	call	ff98 <__muldf3>
    675c:	a5000204 	addi	r20,r20,8
    6760:	b83ff51e 	bne	r23,zero,6738 <__alt_mem_Flash_flash_data+0xf4006738>
    6764:	1017883a 	mov	r11,r2
    6768:	1815883a 	mov	r10,r3
    676c:	d9000e17 	ldw	r4,56(sp)
    6770:	a80b883a 	mov	r5,r21
    6774:	580d883a 	mov	r6,r11
    6778:	500f883a 	mov	r7,r10
    677c:	000f4880 	call	f488 <__divdf3>
    6780:	1029883a 	mov	r20,r2
    6784:	182b883a 	mov	r21,r3
    6788:	d9800d17 	ldw	r6,52(sp)
    678c:	30000626 	beq	r6,zero,67a8 <_dtoa_r+0x478>
    6790:	a009883a 	mov	r4,r20
    6794:	a80b883a 	mov	r5,r21
    6798:	000d883a 	mov	r6,zero
    679c:	01cffc34 	movhi	r7,16368
    67a0:	000feb80 	call	feb8 <__ledf2>
    67a4:	10043216 	blt	r2,zero,7870 <_dtoa_r+0x1540>
    67a8:	8809883a 	mov	r4,r17
    67ac:	00110140 	call	11014 <__floatsidf>
    67b0:	1009883a 	mov	r4,r2
    67b4:	180b883a 	mov	r5,r3
    67b8:	a00d883a 	mov	r6,r20
    67bc:	a80f883a 	mov	r7,r21
    67c0:	000ff980 	call	ff98 <__muldf3>
    67c4:	000d883a 	mov	r6,zero
    67c8:	1009883a 	mov	r4,r2
    67cc:	180b883a 	mov	r5,r3
    67d0:	01d00734 	movhi	r7,16412
    67d4:	000ebec0 	call	ebec <__adddf3>
    67d8:	1023883a 	mov	r17,r2
    67dc:	d9800617 	ldw	r6,24(sp)
    67e0:	00bf3034 	movhi	r2,64704
    67e4:	1885883a 	add	r2,r3,r2
    67e8:	d8800e15 	stw	r2,56(sp)
    67ec:	30032e26 	beq	r6,zero,74a8 <_dtoa_r+0x1178>
    67f0:	d8c00517 	ldw	r3,20(sp)
    67f4:	da800617 	ldw	r10,24(sp)
    67f8:	d8c01215 	stw	r3,72(sp)
    67fc:	d9000b17 	ldw	r4,44(sp)
    6800:	2003b026 	beq	r4,zero,76c4 <_dtoa_r+0x1394>
    6804:	50bfffc4 	addi	r2,r10,-1
    6808:	100490fa 	slli	r2,r2,3
    680c:	00c000b4 	movhi	r3,2
    6810:	18fb2804 	addi	r3,r3,-4960
    6814:	1885883a 	add	r2,r3,r2
    6818:	11800017 	ldw	r6,0(r2)
    681c:	11c00117 	ldw	r7,4(r2)
    6820:	d8800717 	ldw	r2,28(sp)
    6824:	0009883a 	mov	r4,zero
    6828:	014ff834 	movhi	r5,16352
    682c:	da801615 	stw	r10,88(sp)
    6830:	15c00044 	addi	r23,r2,1
    6834:	000f4880 	call	f488 <__divdf3>
    6838:	d9c00e17 	ldw	r7,56(sp)
    683c:	880d883a 	mov	r6,r17
    6840:	1009883a 	mov	r4,r2
    6844:	180b883a 	mov	r5,r3
    6848:	00106bc0 	call	106bc <__subdf3>
    684c:	a80b883a 	mov	r5,r21
    6850:	a009883a 	mov	r4,r20
    6854:	d8c01015 	stw	r3,64(sp)
    6858:	d8800e15 	stw	r2,56(sp)
    685c:	0010f8c0 	call	10f8c <__fixdfsi>
    6860:	1009883a 	mov	r4,r2
    6864:	d8801715 	stw	r2,92(sp)
    6868:	00110140 	call	11014 <__floatsidf>
    686c:	a009883a 	mov	r4,r20
    6870:	a80b883a 	mov	r5,r21
    6874:	100d883a 	mov	r6,r2
    6878:	180f883a 	mov	r7,r3
    687c:	00106bc0 	call	106bc <__subdf3>
    6880:	da001717 	ldw	r8,92(sp)
    6884:	1829883a 	mov	r20,r3
    6888:	d8c00717 	ldw	r3,28(sp)
    688c:	d9000e17 	ldw	r4,56(sp)
    6890:	d9401017 	ldw	r5,64(sp)
    6894:	42000c04 	addi	r8,r8,48
    6898:	1023883a 	mov	r17,r2
    689c:	1a000005 	stb	r8,0(r3)
    68a0:	880d883a 	mov	r6,r17
    68a4:	a00f883a 	mov	r7,r20
    68a8:	402b883a 	mov	r21,r8
    68ac:	000fdd80 	call	fdd8 <__gedf2>
    68b0:	00844516 	blt	zero,r2,79c8 <_dtoa_r+0x1698>
    68b4:	0009883a 	mov	r4,zero
    68b8:	014ffc34 	movhi	r5,16368
    68bc:	880d883a 	mov	r6,r17
    68c0:	a00f883a 	mov	r7,r20
    68c4:	00106bc0 	call	106bc <__subdf3>
    68c8:	d9000e17 	ldw	r4,56(sp)
    68cc:	d9401017 	ldw	r5,64(sp)
    68d0:	100d883a 	mov	r6,r2
    68d4:	180f883a 	mov	r7,r3
    68d8:	000fdd80 	call	fdd8 <__gedf2>
    68dc:	da801617 	ldw	r10,88(sp)
    68e0:	00843616 	blt	zero,r2,79bc <_dtoa_r+0x168c>
    68e4:	00800044 	movi	r2,1
    68e8:	12806e0e 	bge	r2,r10,6aa4 <_dtoa_r+0x774>
    68ec:	d9000717 	ldw	r4,28(sp)
    68f0:	dd801315 	stw	r22,76(sp)
    68f4:	dc001115 	stw	r16,68(sp)
    68f8:	2295883a 	add	r10,r4,r10
    68fc:	dcc01415 	stw	r19,80(sp)
    6900:	502d883a 	mov	r22,r10
    6904:	dcc01017 	ldw	r19,64(sp)
    6908:	b821883a 	mov	r16,r23
    690c:	dc801015 	stw	r18,64(sp)
    6910:	dc800e17 	ldw	r18,56(sp)
    6914:	00000906 	br	693c <_dtoa_r+0x60c>
    6918:	00106bc0 	call	106bc <__subdf3>
    691c:	1009883a 	mov	r4,r2
    6920:	180b883a 	mov	r5,r3
    6924:	900d883a 	mov	r6,r18
    6928:	980f883a 	mov	r7,r19
    692c:	000feb80 	call	feb8 <__ledf2>
    6930:	10040e16 	blt	r2,zero,796c <_dtoa_r+0x163c>
    6934:	b821883a 	mov	r16,r23
    6938:	bd841026 	beq	r23,r22,797c <_dtoa_r+0x164c>
    693c:	9009883a 	mov	r4,r18
    6940:	980b883a 	mov	r5,r19
    6944:	000d883a 	mov	r6,zero
    6948:	01d00934 	movhi	r7,16420
    694c:	000ff980 	call	ff98 <__muldf3>
    6950:	000d883a 	mov	r6,zero
    6954:	01d00934 	movhi	r7,16420
    6958:	8809883a 	mov	r4,r17
    695c:	a00b883a 	mov	r5,r20
    6960:	1025883a 	mov	r18,r2
    6964:	1827883a 	mov	r19,r3
    6968:	000ff980 	call	ff98 <__muldf3>
    696c:	180b883a 	mov	r5,r3
    6970:	1009883a 	mov	r4,r2
    6974:	1823883a 	mov	r17,r3
    6978:	1029883a 	mov	r20,r2
    697c:	0010f8c0 	call	10f8c <__fixdfsi>
    6980:	1009883a 	mov	r4,r2
    6984:	102b883a 	mov	r21,r2
    6988:	00110140 	call	11014 <__floatsidf>
    698c:	a009883a 	mov	r4,r20
    6990:	880b883a 	mov	r5,r17
    6994:	100d883a 	mov	r6,r2
    6998:	180f883a 	mov	r7,r3
    699c:	00106bc0 	call	106bc <__subdf3>
    69a0:	ad400c04 	addi	r21,r21,48
    69a4:	1009883a 	mov	r4,r2
    69a8:	180b883a 	mov	r5,r3
    69ac:	900d883a 	mov	r6,r18
    69b0:	980f883a 	mov	r7,r19
    69b4:	85400005 	stb	r21,0(r16)
    69b8:	1023883a 	mov	r17,r2
    69bc:	1829883a 	mov	r20,r3
    69c0:	000feb80 	call	feb8 <__ledf2>
    69c4:	bdc00044 	addi	r23,r23,1
    69c8:	0009883a 	mov	r4,zero
    69cc:	014ffc34 	movhi	r5,16368
    69d0:	880d883a 	mov	r6,r17
    69d4:	a00f883a 	mov	r7,r20
    69d8:	103fcf0e 	bge	r2,zero,6918 <__alt_mem_Flash_flash_data+0xf4006918>
    69dc:	d9801217 	ldw	r6,72(sp)
    69e0:	dc001117 	ldw	r16,68(sp)
    69e4:	d9800515 	stw	r6,20(sp)
    69e8:	8009883a 	mov	r4,r16
    69ec:	e00b883a 	mov	r5,fp
    69f0:	00093300 	call	9330 <_Bfree>
    69f4:	d8c00517 	ldw	r3,20(sp)
    69f8:	d9002317 	ldw	r4,140(sp)
    69fc:	d9802517 	ldw	r6,148(sp)
    6a00:	b8000005 	stb	zero,0(r23)
    6a04:	18800044 	addi	r2,r3,1
    6a08:	20800015 	stw	r2,0(r4)
    6a0c:	30027226 	beq	r6,zero,73d8 <_dtoa_r+0x10a8>
    6a10:	35c00015 	stw	r23,0(r6)
    6a14:	d8800717 	ldw	r2,28(sp)
    6a18:	003e7406 	br	63ec <__alt_mem_Flash_flash_data+0xf40063ec>
    6a1c:	00800434 	movhi	r2,16
    6a20:	10bfffc4 	addi	r2,r2,-1
    6a24:	a8aa703a 	and	r21,r21,r2
    6a28:	a83e801e 	bne	r21,zero,642c <__alt_mem_Flash_flash_data+0xf400642c>
    6a2c:	008000b4 	movhi	r2,2
    6a30:	10bb0904 	addi	r2,r2,-5084
    6a34:	003e7f06 	br	6434 <__alt_mem_Flash_flash_data+0xf4006434>
    6a38:	10c00204 	addi	r3,r2,8
    6a3c:	003e8206 	br	6448 <__alt_mem_Flash_flash_data+0xf4006448>
    6a40:	01400434 	movhi	r5,16
    6a44:	297fffc4 	addi	r5,r5,-1
    6a48:	994a703a 	and	r5,r19,r5
    6a4c:	9009883a 	mov	r4,r18
    6a50:	8c7f0044 	addi	r17,r17,-1023
    6a54:	294ffc34 	orhi	r5,r5,16368
    6a58:	dd000217 	ldw	r20,8(sp)
    6a5c:	d8000f15 	stw	zero,60(sp)
    6a60:	003e9f06 	br	64e0 <__alt_mem_Flash_flash_data+0xf40064e0>
    6a64:	008000b4 	movhi	r2,2
    6a68:	10baf804 	addi	r2,r2,-5152
    6a6c:	003e5f06 	br	63ec <__alt_mem_Flash_flash_data+0xf40063ec>
    6a70:	80001115 	stw	zero,68(r16)
    6a74:	8009883a 	mov	r4,r16
    6a78:	000b883a 	mov	r5,zero
    6a7c:	00092880 	call	9288 <_Balloc>
    6a80:	01bfffc4 	movi	r6,-1
    6a84:	d8800715 	stw	r2,28(sp)
    6a88:	80801015 	stw	r2,64(r16)
    6a8c:	00800044 	movi	r2,1
    6a90:	d9800c15 	stw	r6,48(sp)
    6a94:	d8800b15 	stw	r2,44(sp)
    6a98:	d9800615 	stw	r6,24(sp)
    6a9c:	d8002215 	stw	zero,136(sp)
    6aa0:	d8000315 	stw	zero,12(sp)
    6aa4:	d8800117 	ldw	r2,4(sp)
    6aa8:	10008e16 	blt	r2,zero,6ce4 <_dtoa_r+0x9b4>
    6aac:	d9000517 	ldw	r4,20(sp)
    6ab0:	00c00384 	movi	r3,14
    6ab4:	19008b16 	blt	r3,r4,6ce4 <_dtoa_r+0x9b4>
    6ab8:	200490fa 	slli	r2,r4,3
    6abc:	00c000b4 	movhi	r3,2
    6ac0:	d9802217 	ldw	r6,136(sp)
    6ac4:	18fb2804 	addi	r3,r3,-4960
    6ac8:	1885883a 	add	r2,r3,r2
    6acc:	14400017 	ldw	r17,0(r2)
    6ad0:	15000117 	ldw	r20,4(r2)
    6ad4:	3001c716 	blt	r6,zero,71f4 <_dtoa_r+0xec4>
    6ad8:	880d883a 	mov	r6,r17
    6adc:	a00f883a 	mov	r7,r20
    6ae0:	9009883a 	mov	r4,r18
    6ae4:	980b883a 	mov	r5,r19
    6ae8:	000f4880 	call	f488 <__divdf3>
    6aec:	180b883a 	mov	r5,r3
    6af0:	1009883a 	mov	r4,r2
    6af4:	0010f8c0 	call	10f8c <__fixdfsi>
    6af8:	1009883a 	mov	r4,r2
    6afc:	102d883a 	mov	r22,r2
    6b00:	00110140 	call	11014 <__floatsidf>
    6b04:	1009883a 	mov	r4,r2
    6b08:	180b883a 	mov	r5,r3
    6b0c:	880d883a 	mov	r6,r17
    6b10:	a00f883a 	mov	r7,r20
    6b14:	000ff980 	call	ff98 <__muldf3>
    6b18:	9009883a 	mov	r4,r18
    6b1c:	980b883a 	mov	r5,r19
    6b20:	100d883a 	mov	r6,r2
    6b24:	180f883a 	mov	r7,r3
    6b28:	00106bc0 	call	106bc <__subdf3>
    6b2c:	d9000717 	ldw	r4,28(sp)
    6b30:	d9800617 	ldw	r6,24(sp)
    6b34:	180b883a 	mov	r5,r3
    6b38:	b0c00c04 	addi	r3,r22,48
    6b3c:	20c00005 	stb	r3,0(r4)
    6b40:	25c00044 	addi	r23,r4,1
    6b44:	01000044 	movi	r4,1
    6b48:	1011883a 	mov	r8,r2
    6b4c:	2807883a 	mov	r3,r5
    6b50:	31003d26 	beq	r6,r4,6c48 <_dtoa_r+0x918>
    6b54:	000d883a 	mov	r6,zero
    6b58:	01d00934 	movhi	r7,16420
    6b5c:	1009883a 	mov	r4,r2
    6b60:	000ff980 	call	ff98 <__muldf3>
    6b64:	1009883a 	mov	r4,r2
    6b68:	180b883a 	mov	r5,r3
    6b6c:	000d883a 	mov	r6,zero
    6b70:	000f883a 	mov	r7,zero
    6b74:	1027883a 	mov	r19,r2
    6b78:	182b883a 	mov	r21,r3
    6b7c:	000fd540 	call	fd54 <__eqdf2>
    6b80:	103f9926 	beq	r2,zero,69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    6b84:	d8c00617 	ldw	r3,24(sp)
    6b88:	d9000717 	ldw	r4,28(sp)
    6b8c:	b825883a 	mov	r18,r23
    6b90:	18bfffc4 	addi	r2,r3,-1
    6b94:	20ad883a 	add	r22,r4,r2
    6b98:	dc000315 	stw	r16,12(sp)
    6b9c:	00000a06 	br	6bc8 <_dtoa_r+0x898>
    6ba0:	000ff980 	call	ff98 <__muldf3>
    6ba4:	1009883a 	mov	r4,r2
    6ba8:	180b883a 	mov	r5,r3
    6bac:	000d883a 	mov	r6,zero
    6bb0:	000f883a 	mov	r7,zero
    6bb4:	1027883a 	mov	r19,r2
    6bb8:	182b883a 	mov	r21,r3
    6bbc:	b825883a 	mov	r18,r23
    6bc0:	000fd540 	call	fd54 <__eqdf2>
    6bc4:	10022626 	beq	r2,zero,7460 <_dtoa_r+0x1130>
    6bc8:	880d883a 	mov	r6,r17
    6bcc:	a00f883a 	mov	r7,r20
    6bd0:	9809883a 	mov	r4,r19
    6bd4:	a80b883a 	mov	r5,r21
    6bd8:	000f4880 	call	f488 <__divdf3>
    6bdc:	180b883a 	mov	r5,r3
    6be0:	1009883a 	mov	r4,r2
    6be4:	0010f8c0 	call	10f8c <__fixdfsi>
    6be8:	1009883a 	mov	r4,r2
    6bec:	1021883a 	mov	r16,r2
    6bf0:	00110140 	call	11014 <__floatsidf>
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	180b883a 	mov	r5,r3
    6bfc:	880d883a 	mov	r6,r17
    6c00:	a00f883a 	mov	r7,r20
    6c04:	000ff980 	call	ff98 <__muldf3>
    6c08:	9809883a 	mov	r4,r19
    6c0c:	a80b883a 	mov	r5,r21
    6c10:	100d883a 	mov	r6,r2
    6c14:	180f883a 	mov	r7,r3
    6c18:	00106bc0 	call	106bc <__subdf3>
    6c1c:	82000c04 	addi	r8,r16,48
    6c20:	92000005 	stb	r8,0(r18)
    6c24:	1009883a 	mov	r4,r2
    6c28:	180b883a 	mov	r5,r3
    6c2c:	000d883a 	mov	r6,zero
    6c30:	01d00934 	movhi	r7,16420
    6c34:	1011883a 	mov	r8,r2
    6c38:	bdc00044 	addi	r23,r23,1
    6c3c:	95bfd81e 	bne	r18,r22,6ba0 <__alt_mem_Flash_flash_data+0xf4006ba0>
    6c40:	802d883a 	mov	r22,r16
    6c44:	dc000317 	ldw	r16,12(sp)
    6c48:	4009883a 	mov	r4,r8
    6c4c:	180b883a 	mov	r5,r3
    6c50:	400d883a 	mov	r6,r8
    6c54:	180f883a 	mov	r7,r3
    6c58:	000ebec0 	call	ebec <__adddf3>
    6c5c:	8809883a 	mov	r4,r17
    6c60:	a00b883a 	mov	r5,r20
    6c64:	100d883a 	mov	r6,r2
    6c68:	180f883a 	mov	r7,r3
    6c6c:	1027883a 	mov	r19,r2
    6c70:	1825883a 	mov	r18,r3
    6c74:	000feb80 	call	feb8 <__ledf2>
    6c78:	10000816 	blt	r2,zero,6c9c <_dtoa_r+0x96c>
    6c7c:	8809883a 	mov	r4,r17
    6c80:	a00b883a 	mov	r5,r20
    6c84:	980d883a 	mov	r6,r19
    6c88:	900f883a 	mov	r7,r18
    6c8c:	000fd540 	call	fd54 <__eqdf2>
    6c90:	103f551e 	bne	r2,zero,69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    6c94:	b580004c 	andi	r22,r22,1
    6c98:	b03f5326 	beq	r22,zero,69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    6c9c:	bd7fffc3 	ldbu	r21,-1(r23)
    6ca0:	b8bfffc4 	addi	r2,r23,-1
    6ca4:	1007883a 	mov	r3,r2
    6ca8:	01400e44 	movi	r5,57
    6cac:	d9800717 	ldw	r6,28(sp)
    6cb0:	00000506 	br	6cc8 <_dtoa_r+0x998>
    6cb4:	18ffffc4 	addi	r3,r3,-1
    6cb8:	30825e26 	beq	r6,r2,7634 <_dtoa_r+0x1304>
    6cbc:	1d400003 	ldbu	r21,0(r3)
    6cc0:	102f883a 	mov	r23,r2
    6cc4:	10bfffc4 	addi	r2,r2,-1
    6cc8:	a9003fcc 	andi	r4,r21,255
    6ccc:	2100201c 	xori	r4,r4,128
    6cd0:	213fe004 	addi	r4,r4,-128
    6cd4:	217ff726 	beq	r4,r5,6cb4 <__alt_mem_Flash_flash_data+0xf4006cb4>
    6cd8:	aa000044 	addi	r8,r21,1
    6cdc:	12000005 	stb	r8,0(r2)
    6ce0:	003f4106 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    6ce4:	d8c00b17 	ldw	r3,44(sp)
    6ce8:	18006726 	beq	r3,zero,6e88 <_dtoa_r+0xb58>
    6cec:	d9000317 	ldw	r4,12(sp)
    6cf0:	00c00044 	movi	r3,1
    6cf4:	19016a0e 	bge	r3,r4,72a0 <_dtoa_r+0xf70>
    6cf8:	d8800617 	ldw	r2,24(sp)
    6cfc:	d8c00917 	ldw	r3,36(sp)
    6d00:	157fffc4 	addi	r21,r2,-1
    6d04:	1d420716 	blt	r3,r21,7524 <_dtoa_r+0x11f4>
    6d08:	1d6bc83a 	sub	r21,r3,r21
    6d0c:	d8800617 	ldw	r2,24(sp)
    6d10:	1002c716 	blt	r2,zero,7830 <_dtoa_r+0x1500>
    6d14:	dd000817 	ldw	r20,32(sp)
    6d18:	d8800617 	ldw	r2,24(sp)
    6d1c:	d9800817 	ldw	r6,32(sp)
    6d20:	8009883a 	mov	r4,r16
    6d24:	01400044 	movi	r5,1
    6d28:	308d883a 	add	r6,r6,r2
    6d2c:	d9800815 	stw	r6,32(sp)
    6d30:	b0ad883a 	add	r22,r22,r2
    6d34:	00096940 	call	9694 <__i2b>
    6d38:	1023883a 	mov	r17,r2
    6d3c:	a0000826 	beq	r20,zero,6d60 <_dtoa_r+0xa30>
    6d40:	0580070e 	bge	zero,r22,6d60 <_dtoa_r+0xa30>
    6d44:	b005883a 	mov	r2,r22
    6d48:	a5812016 	blt	r20,r22,71cc <_dtoa_r+0xe9c>
    6d4c:	d8c00817 	ldw	r3,32(sp)
    6d50:	a0a9c83a 	sub	r20,r20,r2
    6d54:	b0adc83a 	sub	r22,r22,r2
    6d58:	1887c83a 	sub	r3,r3,r2
    6d5c:	d8c00815 	stw	r3,32(sp)
    6d60:	d9000917 	ldw	r4,36(sp)
    6d64:	0100140e 	bge	zero,r4,6db8 <_dtoa_r+0xa88>
    6d68:	d9800b17 	ldw	r6,44(sp)
    6d6c:	3001e526 	beq	r6,zero,7504 <_dtoa_r+0x11d4>
    6d70:	05400e0e 	bge	zero,r21,6dac <_dtoa_r+0xa7c>
    6d74:	880b883a 	mov	r5,r17
    6d78:	8009883a 	mov	r4,r16
    6d7c:	a80d883a 	mov	r6,r21
    6d80:	00098cc0 	call	98cc <__pow5mult>
    6d84:	e00d883a 	mov	r6,fp
    6d88:	8009883a 	mov	r4,r16
    6d8c:	100b883a 	mov	r5,r2
    6d90:	1023883a 	mov	r17,r2
    6d94:	00096d00 	call	96d0 <__multiply>
    6d98:	102f883a 	mov	r23,r2
    6d9c:	e00b883a 	mov	r5,fp
    6da0:	8009883a 	mov	r4,r16
    6da4:	00093300 	call	9330 <_Bfree>
    6da8:	b839883a 	mov	fp,r23
    6dac:	d8800917 	ldw	r2,36(sp)
    6db0:	154dc83a 	sub	r6,r2,r21
    6db4:	3001281e 	bne	r6,zero,7258 <_dtoa_r+0xf28>
    6db8:	05c00044 	movi	r23,1
    6dbc:	8009883a 	mov	r4,r16
    6dc0:	b80b883a 	mov	r5,r23
    6dc4:	00096940 	call	9694 <__i2b>
    6dc8:	d8c00a17 	ldw	r3,40(sp)
    6dcc:	102b883a 	mov	r21,r2
    6dd0:	00c0310e 	bge	zero,r3,6e98 <_dtoa_r+0xb68>
    6dd4:	8009883a 	mov	r4,r16
    6dd8:	100b883a 	mov	r5,r2
    6ddc:	180d883a 	mov	r6,r3
    6de0:	00098cc0 	call	98cc <__pow5mult>
    6de4:	d9000317 	ldw	r4,12(sp)
    6de8:	102b883a 	mov	r21,r2
    6dec:	b9011f0e 	bge	r23,r4,726c <_dtoa_r+0xf3c>
    6df0:	0027883a 	mov	r19,zero
    6df4:	a8800417 	ldw	r2,16(r21)
    6df8:	10800104 	addi	r2,r2,4
    6dfc:	1085883a 	add	r2,r2,r2
    6e00:	1085883a 	add	r2,r2,r2
    6e04:	a885883a 	add	r2,r21,r2
    6e08:	11000017 	ldw	r4,0(r2)
    6e0c:	000957c0 	call	957c <__hi0bits>
    6e10:	00c00804 	movi	r3,32
    6e14:	1885c83a 	sub	r2,r3,r2
    6e18:	00002506 	br	6eb0 <_dtoa_r+0xb80>
    6e1c:	01800044 	movi	r6,1
    6e20:	d9800d15 	stw	r6,52(sp)
    6e24:	003dec06 	br	65d8 <__alt_mem_Flash_flash_data+0xf40065d8>
    6e28:	d8c00817 	ldw	r3,32(sp)
    6e2c:	d9000517 	ldw	r4,20(sp)
    6e30:	d8000a15 	stw	zero,40(sp)
    6e34:	1907c83a 	sub	r3,r3,r4
    6e38:	010dc83a 	sub	r6,zero,r4
    6e3c:	d8c00815 	stw	r3,32(sp)
    6e40:	d9800915 	stw	r6,36(sp)
    6e44:	003ded06 	br	65fc <__alt_mem_Flash_flash_data+0xf40065fc>
    6e48:	05adc83a 	sub	r22,zero,r22
    6e4c:	dd800815 	stw	r22,32(sp)
    6e50:	002d883a 	mov	r22,zero
    6e54:	003de406 	br	65e8 <__alt_mem_Flash_flash_data+0xf40065e8>
    6e58:	d9000517 	ldw	r4,20(sp)
    6e5c:	00110140 	call	11014 <__floatsidf>
    6e60:	1009883a 	mov	r4,r2
    6e64:	180b883a 	mov	r5,r3
    6e68:	b00d883a 	mov	r6,r22
    6e6c:	a80f883a 	mov	r7,r21
    6e70:	000fd540 	call	fd54 <__eqdf2>
    6e74:	103dc726 	beq	r2,zero,6594 <__alt_mem_Flash_flash_data+0xf4006594>
    6e78:	d8800517 	ldw	r2,20(sp)
    6e7c:	10bfffc4 	addi	r2,r2,-1
    6e80:	d8800515 	stw	r2,20(sp)
    6e84:	003dc306 	br	6594 <__alt_mem_Flash_flash_data+0xf4006594>
    6e88:	dd400917 	ldw	r21,36(sp)
    6e8c:	dd000817 	ldw	r20,32(sp)
    6e90:	0023883a 	mov	r17,zero
    6e94:	003fa906 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    6e98:	d9800317 	ldw	r6,12(sp)
    6e9c:	b981670e 	bge	r23,r6,743c <_dtoa_r+0x110c>
    6ea0:	0027883a 	mov	r19,zero
    6ea4:	d8c00a17 	ldw	r3,40(sp)
    6ea8:	183fd21e 	bne	r3,zero,6df4 <__alt_mem_Flash_flash_data+0xf4006df4>
    6eac:	00800044 	movi	r2,1
    6eb0:	1585883a 	add	r2,r2,r22
    6eb4:	108007cc 	andi	r2,r2,31
    6eb8:	10005f26 	beq	r2,zero,7038 <_dtoa_r+0xd08>
    6ebc:	00c00804 	movi	r3,32
    6ec0:	1887c83a 	sub	r3,r3,r2
    6ec4:	01000104 	movi	r4,4
    6ec8:	20c2dd0e 	bge	r4,r3,7a40 <_dtoa_r+0x1710>
    6ecc:	d9000817 	ldw	r4,32(sp)
    6ed0:	00c00704 	movi	r3,28
    6ed4:	1885c83a 	sub	r2,r3,r2
    6ed8:	2089883a 	add	r4,r4,r2
    6edc:	d9000815 	stw	r4,32(sp)
    6ee0:	a0a9883a 	add	r20,r20,r2
    6ee4:	b0ad883a 	add	r22,r22,r2
    6ee8:	d8800817 	ldw	r2,32(sp)
    6eec:	0080050e 	bge	zero,r2,6f04 <_dtoa_r+0xbd4>
    6ef0:	e00b883a 	mov	r5,fp
    6ef4:	8009883a 	mov	r4,r16
    6ef8:	100d883a 	mov	r6,r2
    6efc:	0009a0c0 	call	9a0c <__lshift>
    6f00:	1039883a 	mov	fp,r2
    6f04:	0580050e 	bge	zero,r22,6f1c <_dtoa_r+0xbec>
    6f08:	a80b883a 	mov	r5,r21
    6f0c:	8009883a 	mov	r4,r16
    6f10:	b00d883a 	mov	r6,r22
    6f14:	0009a0c0 	call	9a0c <__lshift>
    6f18:	102b883a 	mov	r21,r2
    6f1c:	d8c00d17 	ldw	r3,52(sp)
    6f20:	1801161e 	bne	r3,zero,737c <_dtoa_r+0x104c>
    6f24:	d8c00617 	ldw	r3,24(sp)
    6f28:	00c12d0e 	bge	zero,r3,73e0 <_dtoa_r+0x10b0>
    6f2c:	d8c00b17 	ldw	r3,44(sp)
    6f30:	1800571e 	bne	r3,zero,7090 <_dtoa_r+0xd60>
    6f34:	dc800717 	ldw	r18,28(sp)
    6f38:	dcc00617 	ldw	r19,24(sp)
    6f3c:	9029883a 	mov	r20,r18
    6f40:	00000206 	br	6f4c <_dtoa_r+0xc1c>
    6f44:	00093580 	call	9358 <__multadd>
    6f48:	1039883a 	mov	fp,r2
    6f4c:	e009883a 	mov	r4,fp
    6f50:	a80b883a 	mov	r5,r21
    6f54:	00061300 	call	6130 <quorem>
    6f58:	10800c04 	addi	r2,r2,48
    6f5c:	90800005 	stb	r2,0(r18)
    6f60:	94800044 	addi	r18,r18,1
    6f64:	9507c83a 	sub	r3,r18,r20
    6f68:	8009883a 	mov	r4,r16
    6f6c:	e00b883a 	mov	r5,fp
    6f70:	01800284 	movi	r6,10
    6f74:	000f883a 	mov	r7,zero
    6f78:	1cfff216 	blt	r3,r19,6f44 <__alt_mem_Flash_flash_data+0xf4006f44>
    6f7c:	1011883a 	mov	r8,r2
    6f80:	d8800617 	ldw	r2,24(sp)
    6f84:	00822e0e 	bge	zero,r2,7840 <_dtoa_r+0x1510>
    6f88:	d9000717 	ldw	r4,28(sp)
    6f8c:	0025883a 	mov	r18,zero
    6f90:	20af883a 	add	r23,r4,r2
    6f94:	e00b883a 	mov	r5,fp
    6f98:	01800044 	movi	r6,1
    6f9c:	8009883a 	mov	r4,r16
    6fa0:	da001715 	stw	r8,92(sp)
    6fa4:	0009a0c0 	call	9a0c <__lshift>
    6fa8:	1009883a 	mov	r4,r2
    6fac:	a80b883a 	mov	r5,r21
    6fb0:	1039883a 	mov	fp,r2
    6fb4:	0009b5c0 	call	9b5c <__mcmp>
    6fb8:	da001717 	ldw	r8,92(sp)
    6fbc:	00816e0e 	bge	zero,r2,7578 <_dtoa_r+0x1248>
    6fc0:	b93fffc3 	ldbu	r4,-1(r23)
    6fc4:	b8bfffc4 	addi	r2,r23,-1
    6fc8:	1007883a 	mov	r3,r2
    6fcc:	01800e44 	movi	r6,57
    6fd0:	d9c00717 	ldw	r7,28(sp)
    6fd4:	00000506 	br	6fec <_dtoa_r+0xcbc>
    6fd8:	18ffffc4 	addi	r3,r3,-1
    6fdc:	38811926 	beq	r7,r2,7444 <_dtoa_r+0x1114>
    6fe0:	19000003 	ldbu	r4,0(r3)
    6fe4:	102f883a 	mov	r23,r2
    6fe8:	10bfffc4 	addi	r2,r2,-1
    6fec:	21403fcc 	andi	r5,r4,255
    6ff0:	2940201c 	xori	r5,r5,128
    6ff4:	297fe004 	addi	r5,r5,-128
    6ff8:	29bff726 	beq	r5,r6,6fd8 <__alt_mem_Flash_flash_data+0xf4006fd8>
    6ffc:	21000044 	addi	r4,r4,1
    7000:	11000005 	stb	r4,0(r2)
    7004:	8009883a 	mov	r4,r16
    7008:	a80b883a 	mov	r5,r21
    700c:	00093300 	call	9330 <_Bfree>
    7010:	883e7526 	beq	r17,zero,69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    7014:	90000426 	beq	r18,zero,7028 <_dtoa_r+0xcf8>
    7018:	94400326 	beq	r18,r17,7028 <_dtoa_r+0xcf8>
    701c:	8009883a 	mov	r4,r16
    7020:	900b883a 	mov	r5,r18
    7024:	00093300 	call	9330 <_Bfree>
    7028:	8009883a 	mov	r4,r16
    702c:	880b883a 	mov	r5,r17
    7030:	00093300 	call	9330 <_Bfree>
    7034:	003e6c06 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    7038:	00800704 	movi	r2,28
    703c:	d9800817 	ldw	r6,32(sp)
    7040:	a0a9883a 	add	r20,r20,r2
    7044:	b0ad883a 	add	r22,r22,r2
    7048:	308d883a 	add	r6,r6,r2
    704c:	d9800815 	stw	r6,32(sp)
    7050:	003fa506 	br	6ee8 <__alt_mem_Flash_flash_data+0xf4006ee8>
    7054:	013efb84 	movi	r4,-1042
    7058:	246bc83a 	sub	r21,r4,r17
    705c:	9548983a 	sll	r4,r18,r21
    7060:	003d1806 	br	64c4 <__alt_mem_Flash_flash_data+0xf40064c4>
    7064:	d8000d15 	stw	zero,52(sp)
    7068:	003d5b06 	br	65d8 <__alt_mem_Flash_flash_data+0xf40065d8>
    706c:	880b883a 	mov	r5,r17
    7070:	8009883a 	mov	r4,r16
    7074:	01800284 	movi	r6,10
    7078:	000f883a 	mov	r7,zero
    707c:	00093580 	call	9358 <__multadd>
    7080:	1023883a 	mov	r17,r2
    7084:	d8800c17 	ldw	r2,48(sp)
    7088:	0082550e 	bge	zero,r2,79e0 <_dtoa_r+0x16b0>
    708c:	d8800615 	stw	r2,24(sp)
    7090:	0500050e 	bge	zero,r20,70a8 <_dtoa_r+0xd78>
    7094:	880b883a 	mov	r5,r17
    7098:	8009883a 	mov	r4,r16
    709c:	a00d883a 	mov	r6,r20
    70a0:	0009a0c0 	call	9a0c <__lshift>
    70a4:	1023883a 	mov	r17,r2
    70a8:	98016a1e 	bne	r19,zero,7654 <_dtoa_r+0x1324>
    70ac:	8829883a 	mov	r20,r17
    70b0:	d9000617 	ldw	r4,24(sp)
    70b4:	dcc00717 	ldw	r19,28(sp)
    70b8:	9480004c 	andi	r18,r18,1
    70bc:	20bfffc4 	addi	r2,r4,-1
    70c0:	9885883a 	add	r2,r19,r2
    70c4:	d8800415 	stw	r2,16(sp)
    70c8:	dc800615 	stw	r18,24(sp)
    70cc:	e009883a 	mov	r4,fp
    70d0:	a80b883a 	mov	r5,r21
    70d4:	00061300 	call	6130 <quorem>
    70d8:	e009883a 	mov	r4,fp
    70dc:	880b883a 	mov	r5,r17
    70e0:	102f883a 	mov	r23,r2
    70e4:	0009b5c0 	call	9b5c <__mcmp>
    70e8:	8009883a 	mov	r4,r16
    70ec:	a80b883a 	mov	r5,r21
    70f0:	a00d883a 	mov	r6,r20
    70f4:	102d883a 	mov	r22,r2
    70f8:	0009bbc0 	call	9bbc <__mdiff>
    70fc:	1007883a 	mov	r3,r2
    7100:	10800317 	ldw	r2,12(r2)
    7104:	bc800c04 	addi	r18,r23,48
    7108:	1000971e 	bne	r2,zero,7368 <_dtoa_r+0x1038>
    710c:	180b883a 	mov	r5,r3
    7110:	e009883a 	mov	r4,fp
    7114:	d8c01515 	stw	r3,84(sp)
    7118:	0009b5c0 	call	9b5c <__mcmp>
    711c:	d8c01517 	ldw	r3,84(sp)
    7120:	8009883a 	mov	r4,r16
    7124:	d8801515 	stw	r2,84(sp)
    7128:	180b883a 	mov	r5,r3
    712c:	00093300 	call	9330 <_Bfree>
    7130:	d8801517 	ldw	r2,84(sp)
    7134:	1000041e 	bne	r2,zero,7148 <_dtoa_r+0xe18>
    7138:	d9800317 	ldw	r6,12(sp)
    713c:	3000021e 	bne	r6,zero,7148 <_dtoa_r+0xe18>
    7140:	d8c00617 	ldw	r3,24(sp)
    7144:	18007626 	beq	r3,zero,7320 <_dtoa_r+0xff0>
    7148:	b0005b16 	blt	r22,zero,72b8 <_dtoa_r+0xf88>
    714c:	b000041e 	bne	r22,zero,7160 <_dtoa_r+0xe30>
    7150:	d9000317 	ldw	r4,12(sp)
    7154:	2000021e 	bne	r4,zero,7160 <_dtoa_r+0xe30>
    7158:	d8c00617 	ldw	r3,24(sp)
    715c:	18005626 	beq	r3,zero,72b8 <_dtoa_r+0xf88>
    7160:	00814d16 	blt	zero,r2,7698 <_dtoa_r+0x1368>
    7164:	d8c00417 	ldw	r3,16(sp)
    7168:	9d800044 	addi	r22,r19,1
    716c:	9c800005 	stb	r18,0(r19)
    7170:	b02f883a 	mov	r23,r22
    7174:	98c14c26 	beq	r19,r3,76a8 <_dtoa_r+0x1378>
    7178:	e00b883a 	mov	r5,fp
    717c:	8009883a 	mov	r4,r16
    7180:	01800284 	movi	r6,10
    7184:	000f883a 	mov	r7,zero
    7188:	00093580 	call	9358 <__multadd>
    718c:	1039883a 	mov	fp,r2
    7190:	8d006d26 	beq	r17,r20,7348 <_dtoa_r+0x1018>
    7194:	880b883a 	mov	r5,r17
    7198:	01800284 	movi	r6,10
    719c:	000f883a 	mov	r7,zero
    71a0:	8009883a 	mov	r4,r16
    71a4:	00093580 	call	9358 <__multadd>
    71a8:	a00b883a 	mov	r5,r20
    71ac:	8009883a 	mov	r4,r16
    71b0:	01800284 	movi	r6,10
    71b4:	000f883a 	mov	r7,zero
    71b8:	1023883a 	mov	r17,r2
    71bc:	00093580 	call	9358 <__multadd>
    71c0:	1029883a 	mov	r20,r2
    71c4:	b027883a 	mov	r19,r22
    71c8:	003fc006 	br	70cc <__alt_mem_Flash_flash_data+0xf40070cc>
    71cc:	a005883a 	mov	r2,r20
    71d0:	003ede06 	br	6d4c <__alt_mem_Flash_flash_data+0xf4006d4c>
    71d4:	01000044 	movi	r4,1
    71d8:	d9000b15 	stw	r4,44(sp)
    71dc:	d9802217 	ldw	r6,136(sp)
    71e0:	0180dc0e 	bge	zero,r6,7554 <_dtoa_r+0x1224>
    71e4:	3023883a 	mov	r17,r6
    71e8:	d9800c15 	stw	r6,48(sp)
    71ec:	d9800615 	stw	r6,24(sp)
    71f0:	003d1e06 	br	666c <__alt_mem_Flash_flash_data+0xf400666c>
    71f4:	d8800617 	ldw	r2,24(sp)
    71f8:	00be3716 	blt	zero,r2,6ad8 <__alt_mem_Flash_flash_data+0xf4006ad8>
    71fc:	1000be1e 	bne	r2,zero,74f8 <_dtoa_r+0x11c8>
    7200:	8809883a 	mov	r4,r17
    7204:	a00b883a 	mov	r5,r20
    7208:	000d883a 	mov	r6,zero
    720c:	01d00534 	movhi	r7,16404
    7210:	000ff980 	call	ff98 <__muldf3>
    7214:	1009883a 	mov	r4,r2
    7218:	180b883a 	mov	r5,r3
    721c:	900d883a 	mov	r6,r18
    7220:	980f883a 	mov	r7,r19
    7224:	000fdd80 	call	fdd8 <__gedf2>
    7228:	002b883a 	mov	r21,zero
    722c:	0023883a 	mov	r17,zero
    7230:	10007a16 	blt	r2,zero,741c <_dtoa_r+0x10ec>
    7234:	d9002217 	ldw	r4,136(sp)
    7238:	ddc00717 	ldw	r23,28(sp)
    723c:	0108303a 	nor	r4,zero,r4
    7240:	d9000515 	stw	r4,20(sp)
    7244:	8009883a 	mov	r4,r16
    7248:	a80b883a 	mov	r5,r21
    724c:	00093300 	call	9330 <_Bfree>
    7250:	883f751e 	bne	r17,zero,7028 <__alt_mem_Flash_flash_data+0xf4007028>
    7254:	003de406 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    7258:	e00b883a 	mov	r5,fp
    725c:	8009883a 	mov	r4,r16
    7260:	00098cc0 	call	98cc <__pow5mult>
    7264:	1039883a 	mov	fp,r2
    7268:	003ed306 	br	6db8 <__alt_mem_Flash_flash_data+0xf4006db8>
    726c:	903ee01e 	bne	r18,zero,6df0 <__alt_mem_Flash_flash_data+0xf4006df0>
    7270:	00800434 	movhi	r2,16
    7274:	10bfffc4 	addi	r2,r2,-1
    7278:	9884703a 	and	r2,r19,r2
    727c:	103f081e 	bne	r2,zero,6ea0 <__alt_mem_Flash_flash_data+0xf4006ea0>
    7280:	9cdffc2c 	andhi	r19,r19,32752
    7284:	983f0626 	beq	r19,zero,6ea0 <__alt_mem_Flash_flash_data+0xf4006ea0>
    7288:	d8800817 	ldw	r2,32(sp)
    728c:	b5800044 	addi	r22,r22,1
    7290:	04c00044 	movi	r19,1
    7294:	10800044 	addi	r2,r2,1
    7298:	d8800815 	stw	r2,32(sp)
    729c:	003f0106 	br	6ea4 <__alt_mem_Flash_flash_data+0xf4006ea4>
    72a0:	d9800f17 	ldw	r6,60(sp)
    72a4:	30016826 	beq	r6,zero,7848 <_dtoa_r+0x1518>
    72a8:	10810cc4 	addi	r2,r2,1075
    72ac:	dd400917 	ldw	r21,36(sp)
    72b0:	dd000817 	ldw	r20,32(sp)
    72b4:	003e9906 	br	6d1c <__alt_mem_Flash_flash_data+0xf4006d1c>
    72b8:	9011883a 	mov	r8,r18
    72bc:	4007883a 	mov	r3,r8
    72c0:	e02d883a 	mov	r22,fp
    72c4:	0080100e 	bge	zero,r2,7308 <_dtoa_r+0xfd8>
    72c8:	01800044 	movi	r6,1
    72cc:	8009883a 	mov	r4,r16
    72d0:	e00b883a 	mov	r5,fp
    72d4:	da001515 	stw	r8,84(sp)
    72d8:	da001715 	stw	r8,92(sp)
    72dc:	0009a0c0 	call	9a0c <__lshift>
    72e0:	1009883a 	mov	r4,r2
    72e4:	a80b883a 	mov	r5,r21
    72e8:	102d883a 	mov	r22,r2
    72ec:	0009b5c0 	call	9b5c <__mcmp>
    72f0:	d8c01517 	ldw	r3,84(sp)
    72f4:	da001717 	ldw	r8,92(sp)
    72f8:	0081a50e 	bge	zero,r2,7990 <_dtoa_r+0x1660>
    72fc:	00800e44 	movi	r2,57
    7300:	40817b26 	beq	r8,r2,78f0 <_dtoa_r+0x15c0>
    7304:	40c00044 	addi	r3,r8,1
    7308:	8825883a 	mov	r18,r17
    730c:	9dc00044 	addi	r23,r19,1
    7310:	98c00005 	stb	r3,0(r19)
    7314:	a023883a 	mov	r17,r20
    7318:	b039883a 	mov	fp,r22
    731c:	003f3906 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    7320:	00800e44 	movi	r2,57
    7324:	9011883a 	mov	r8,r18
    7328:	90817226 	beq	r18,r2,78f4 <_dtoa_r+0x15c4>
    732c:	0580010e 	bge	zero,r22,7334 <_dtoa_r+0x1004>
    7330:	ba000c44 	addi	r8,r23,49
    7334:	8825883a 	mov	r18,r17
    7338:	9dc00044 	addi	r23,r19,1
    733c:	9a000005 	stb	r8,0(r19)
    7340:	a023883a 	mov	r17,r20
    7344:	003f2f06 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    7348:	880b883a 	mov	r5,r17
    734c:	8009883a 	mov	r4,r16
    7350:	01800284 	movi	r6,10
    7354:	000f883a 	mov	r7,zero
    7358:	00093580 	call	9358 <__multadd>
    735c:	1023883a 	mov	r17,r2
    7360:	1029883a 	mov	r20,r2
    7364:	003f9706 	br	71c4 <__alt_mem_Flash_flash_data+0xf40071c4>
    7368:	8009883a 	mov	r4,r16
    736c:	180b883a 	mov	r5,r3
    7370:	00093300 	call	9330 <_Bfree>
    7374:	00800044 	movi	r2,1
    7378:	003f7306 	br	7148 <__alt_mem_Flash_flash_data+0xf4007148>
    737c:	e009883a 	mov	r4,fp
    7380:	a80b883a 	mov	r5,r21
    7384:	0009b5c0 	call	9b5c <__mcmp>
    7388:	103ee60e 	bge	r2,zero,6f24 <__alt_mem_Flash_flash_data+0xf4006f24>
    738c:	8009883a 	mov	r4,r16
    7390:	e00b883a 	mov	r5,fp
    7394:	01800284 	movi	r6,10
    7398:	000f883a 	mov	r7,zero
    739c:	00093580 	call	9358 <__multadd>
    73a0:	d9000517 	ldw	r4,20(sp)
    73a4:	d9800b17 	ldw	r6,44(sp)
    73a8:	1039883a 	mov	fp,r2
    73ac:	213fffc4 	addi	r4,r4,-1
    73b0:	d9000515 	stw	r4,20(sp)
    73b4:	303f2d1e 	bne	r6,zero,706c <__alt_mem_Flash_flash_data+0xf400706c>
    73b8:	d9000c17 	ldw	r4,48(sp)
    73bc:	0101780e 	bge	zero,r4,79a0 <_dtoa_r+0x1670>
    73c0:	d9000615 	stw	r4,24(sp)
    73c4:	003edb06 	br	6f34 <__alt_mem_Flash_flash_data+0xf4006f34>
    73c8:	00800084 	movi	r2,2
    73cc:	30818e1e 	bne	r6,r2,7a08 <_dtoa_r+0x16d8>
    73d0:	d8000b15 	stw	zero,44(sp)
    73d4:	003f8106 	br	71dc <__alt_mem_Flash_flash_data+0xf40071dc>
    73d8:	d8800717 	ldw	r2,28(sp)
    73dc:	003c0306 	br	63ec <__alt_mem_Flash_flash_data+0xf40063ec>
    73e0:	d9000317 	ldw	r4,12(sp)
    73e4:	00800084 	movi	r2,2
    73e8:	113ed00e 	bge	r2,r4,6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    73ec:	d8c00617 	ldw	r3,24(sp)
    73f0:	183f901e 	bne	r3,zero,7234 <__alt_mem_Flash_flash_data+0xf4007234>
    73f4:	a80b883a 	mov	r5,r21
    73f8:	8009883a 	mov	r4,r16
    73fc:	01800144 	movi	r6,5
    7400:	000f883a 	mov	r7,zero
    7404:	00093580 	call	9358 <__multadd>
    7408:	e009883a 	mov	r4,fp
    740c:	100b883a 	mov	r5,r2
    7410:	102b883a 	mov	r21,r2
    7414:	0009b5c0 	call	9b5c <__mcmp>
    7418:	00bf860e 	bge	zero,r2,7234 <__alt_mem_Flash_flash_data+0xf4007234>
    741c:	d9800717 	ldw	r6,28(sp)
    7420:	00800c44 	movi	r2,49
    7424:	30800005 	stb	r2,0(r6)
    7428:	d8800517 	ldw	r2,20(sp)
    742c:	35c00044 	addi	r23,r6,1
    7430:	10800044 	addi	r2,r2,1
    7434:	d8800515 	stw	r2,20(sp)
    7438:	003f8206 	br	7244 <__alt_mem_Flash_flash_data+0xf4007244>
    743c:	903e981e 	bne	r18,zero,6ea0 <__alt_mem_Flash_flash_data+0xf4006ea0>
    7440:	003f8b06 	br	7270 <__alt_mem_Flash_flash_data+0xf4007270>
    7444:	d9800517 	ldw	r6,20(sp)
    7448:	d8c00717 	ldw	r3,28(sp)
    744c:	00800c44 	movi	r2,49
    7450:	31800044 	addi	r6,r6,1
    7454:	d9800515 	stw	r6,20(sp)
    7458:	18800005 	stb	r2,0(r3)
    745c:	003ee906 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    7460:	dc000317 	ldw	r16,12(sp)
    7464:	003d6006 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    7468:	8809883a 	mov	r4,r17
    746c:	00110140 	call	11014 <__floatsidf>
    7470:	a009883a 	mov	r4,r20
    7474:	a80b883a 	mov	r5,r21
    7478:	100d883a 	mov	r6,r2
    747c:	180f883a 	mov	r7,r3
    7480:	000ff980 	call	ff98 <__muldf3>
    7484:	1009883a 	mov	r4,r2
    7488:	180b883a 	mov	r5,r3
    748c:	000d883a 	mov	r6,zero
    7490:	01d00734 	movhi	r7,16412
    7494:	000ebec0 	call	ebec <__adddf3>
    7498:	1023883a 	mov	r17,r2
    749c:	00bf3034 	movhi	r2,64704
    74a0:	1885883a 	add	r2,r3,r2
    74a4:	d8800e15 	stw	r2,56(sp)
    74a8:	a009883a 	mov	r4,r20
    74ac:	a80b883a 	mov	r5,r21
    74b0:	000d883a 	mov	r6,zero
    74b4:	01d00534 	movhi	r7,16404
    74b8:	00106bc0 	call	106bc <__subdf3>
    74bc:	d9c00e17 	ldw	r7,56(sp)
    74c0:	1009883a 	mov	r4,r2
    74c4:	180b883a 	mov	r5,r3
    74c8:	880d883a 	mov	r6,r17
    74cc:	102b883a 	mov	r21,r2
    74d0:	1829883a 	mov	r20,r3
    74d4:	000fdd80 	call	fdd8 <__gedf2>
    74d8:	00807716 	blt	zero,r2,76b8 <_dtoa_r+0x1388>
    74dc:	d8800e17 	ldw	r2,56(sp)
    74e0:	a809883a 	mov	r4,r21
    74e4:	a00b883a 	mov	r5,r20
    74e8:	11e0003c 	xorhi	r7,r2,32768
    74ec:	880d883a 	mov	r6,r17
    74f0:	000feb80 	call	feb8 <__ledf2>
    74f4:	103d6b0e 	bge	r2,zero,6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    74f8:	002b883a 	mov	r21,zero
    74fc:	0023883a 	mov	r17,zero
    7500:	003f4c06 	br	7234 <__alt_mem_Flash_flash_data+0xf4007234>
    7504:	d9800917 	ldw	r6,36(sp)
    7508:	e00b883a 	mov	r5,fp
    750c:	8009883a 	mov	r4,r16
    7510:	00098cc0 	call	98cc <__pow5mult>
    7514:	1039883a 	mov	fp,r2
    7518:	003e2706 	br	6db8 <__alt_mem_Flash_flash_data+0xf4006db8>
    751c:	d8000b15 	stw	zero,44(sp)
    7520:	003c4906 	br	6648 <__alt_mem_Flash_flash_data+0xf4006648>
    7524:	d9000917 	ldw	r4,36(sp)
    7528:	d9800a17 	ldw	r6,40(sp)
    752c:	dd400915 	stw	r21,36(sp)
    7530:	a905c83a 	sub	r2,r21,r4
    7534:	308d883a 	add	r6,r6,r2
    7538:	d9800a15 	stw	r6,40(sp)
    753c:	002b883a 	mov	r21,zero
    7540:	003df206 	br	6d0c <__alt_mem_Flash_flash_data+0xf4006d0c>
    7544:	dc800e15 	stw	r18,56(sp)
    7548:	982b883a 	mov	r21,r19
    754c:	04400084 	movi	r17,2
    7550:	003c7406 	br	6724 <__alt_mem_Flash_flash_data+0xf4006724>
    7554:	04400044 	movi	r17,1
    7558:	dc400c15 	stw	r17,48(sp)
    755c:	dc400615 	stw	r17,24(sp)
    7560:	dc402215 	stw	r17,136(sp)
    7564:	80001115 	stw	zero,68(r16)
    7568:	000b883a 	mov	r5,zero
    756c:	003c4a06 	br	6698 <__alt_mem_Flash_flash_data+0xf4006698>
    7570:	3023883a 	mov	r17,r6
    7574:	003ffb06 	br	7564 <__alt_mem_Flash_flash_data+0xf4007564>
    7578:	1000021e 	bne	r2,zero,7584 <_dtoa_r+0x1254>
    757c:	4200004c 	andi	r8,r8,1
    7580:	403e8f1e 	bne	r8,zero,6fc0 <__alt_mem_Flash_flash_data+0xf4006fc0>
    7584:	01000c04 	movi	r4,48
    7588:	00000106 	br	7590 <_dtoa_r+0x1260>
    758c:	102f883a 	mov	r23,r2
    7590:	b8bfffc4 	addi	r2,r23,-1
    7594:	10c00007 	ldb	r3,0(r2)
    7598:	193ffc26 	beq	r3,r4,758c <__alt_mem_Flash_flash_data+0xf400758c>
    759c:	003e9906 	br	7004 <__alt_mem_Flash_flash_data+0xf4007004>
    75a0:	d9000517 	ldw	r4,20(sp)
    75a4:	012fc83a 	sub	r23,zero,r4
    75a8:	b800ad26 	beq	r23,zero,7860 <_dtoa_r+0x1530>
    75ac:	b88003cc 	andi	r2,r23,15
    75b0:	100490fa 	slli	r2,r2,3
    75b4:	00c000b4 	movhi	r3,2
    75b8:	18fb2804 	addi	r3,r3,-4960
    75bc:	1885883a 	add	r2,r3,r2
    75c0:	11800017 	ldw	r6,0(r2)
    75c4:	11c00117 	ldw	r7,4(r2)
    75c8:	b82fd13a 	srai	r23,r23,4
    75cc:	9009883a 	mov	r4,r18
    75d0:	980b883a 	mov	r5,r19
    75d4:	000ff980 	call	ff98 <__muldf3>
    75d8:	1029883a 	mov	r20,r2
    75dc:	182b883a 	mov	r21,r3
    75e0:	b800f426 	beq	r23,zero,79b4 <_dtoa_r+0x1684>
    75e4:	020000b4 	movhi	r8,2
    75e8:	423b1e04 	addi	r8,r8,-5000
    75ec:	8029883a 	mov	r20,r16
    75f0:	04400084 	movi	r17,2
    75f4:	4021883a 	mov	r16,r8
    75f8:	b980004c 	andi	r6,r23,1
    75fc:	1009883a 	mov	r4,r2
    7600:	b82fd07a 	srai	r23,r23,1
    7604:	180b883a 	mov	r5,r3
    7608:	30000426 	beq	r6,zero,761c <_dtoa_r+0x12ec>
    760c:	81800017 	ldw	r6,0(r16)
    7610:	81c00117 	ldw	r7,4(r16)
    7614:	8c400044 	addi	r17,r17,1
    7618:	000ff980 	call	ff98 <__muldf3>
    761c:	84000204 	addi	r16,r16,8
    7620:	b83ff51e 	bne	r23,zero,75f8 <__alt_mem_Flash_flash_data+0xf40075f8>
    7624:	a021883a 	mov	r16,r20
    7628:	182b883a 	mov	r21,r3
    762c:	1029883a 	mov	r20,r2
    7630:	003c5506 	br	6788 <__alt_mem_Flash_flash_data+0xf4006788>
    7634:	d9800517 	ldw	r6,20(sp)
    7638:	d9000717 	ldw	r4,28(sp)
    763c:	00c00c04 	movi	r3,48
    7640:	31800044 	addi	r6,r6,1
    7644:	d9800515 	stw	r6,20(sp)
    7648:	20c00005 	stb	r3,0(r4)
    764c:	02000c44 	movi	r8,49
    7650:	003da206 	br	6cdc <__alt_mem_Flash_flash_data+0xf4006cdc>
    7654:	89400117 	ldw	r5,4(r17)
    7658:	8009883a 	mov	r4,r16
    765c:	00092880 	call	9288 <_Balloc>
    7660:	89800417 	ldw	r6,16(r17)
    7664:	11000304 	addi	r4,r2,12
    7668:	89400304 	addi	r5,r17,12
    766c:	31800084 	addi	r6,r6,2
    7670:	318d883a 	add	r6,r6,r6
    7674:	318d883a 	add	r6,r6,r6
    7678:	1027883a 	mov	r19,r2
    767c:	00091500 	call	9150 <memcpy>
    7680:	8009883a 	mov	r4,r16
    7684:	980b883a 	mov	r5,r19
    7688:	01800044 	movi	r6,1
    768c:	0009a0c0 	call	9a0c <__lshift>
    7690:	1029883a 	mov	r20,r2
    7694:	003e8606 	br	70b0 <__alt_mem_Flash_flash_data+0xf40070b0>
    7698:	00800e44 	movi	r2,57
    769c:	90809526 	beq	r18,r2,78f4 <_dtoa_r+0x15c4>
    76a0:	92000044 	addi	r8,r18,1
    76a4:	003f2306 	br	7334 <__alt_mem_Flash_flash_data+0xf4007334>
    76a8:	9011883a 	mov	r8,r18
    76ac:	8825883a 	mov	r18,r17
    76b0:	a023883a 	mov	r17,r20
    76b4:	003e3706 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    76b8:	002b883a 	mov	r21,zero
    76bc:	0023883a 	mov	r17,zero
    76c0:	003f5606 	br	741c <__alt_mem_Flash_flash_data+0xf400741c>
    76c4:	51bfffc4 	addi	r6,r10,-1
    76c8:	300490fa 	slli	r2,r6,3
    76cc:	00c000b4 	movhi	r3,2
    76d0:	18fb2804 	addi	r3,r3,-4960
    76d4:	1885883a 	add	r2,r3,r2
    76d8:	d9c00e17 	ldw	r7,56(sp)
    76dc:	11000017 	ldw	r4,0(r2)
    76e0:	11400117 	ldw	r5,4(r2)
    76e4:	d8800717 	ldw	r2,28(sp)
    76e8:	d9801015 	stw	r6,64(sp)
    76ec:	880d883a 	mov	r6,r17
    76f0:	da801615 	stw	r10,88(sp)
    76f4:	15c00044 	addi	r23,r2,1
    76f8:	000ff980 	call	ff98 <__muldf3>
    76fc:	a80b883a 	mov	r5,r21
    7700:	a009883a 	mov	r4,r20
    7704:	d8c01115 	stw	r3,68(sp)
    7708:	d8800e15 	stw	r2,56(sp)
    770c:	0010f8c0 	call	10f8c <__fixdfsi>
    7710:	1009883a 	mov	r4,r2
    7714:	1023883a 	mov	r17,r2
    7718:	00110140 	call	11014 <__floatsidf>
    771c:	a009883a 	mov	r4,r20
    7720:	a80b883a 	mov	r5,r21
    7724:	100d883a 	mov	r6,r2
    7728:	180f883a 	mov	r7,r3
    772c:	00106bc0 	call	106bc <__subdf3>
    7730:	1813883a 	mov	r9,r3
    7734:	d8c00717 	ldw	r3,28(sp)
    7738:	8c400c04 	addi	r17,r17,48
    773c:	1011883a 	mov	r8,r2
    7740:	1c400005 	stb	r17,0(r3)
    7744:	da801617 	ldw	r10,88(sp)
    7748:	00800044 	movi	r2,1
    774c:	50802326 	beq	r10,r2,77dc <_dtoa_r+0x14ac>
    7750:	d8800717 	ldw	r2,28(sp)
    7754:	b82b883a 	mov	r21,r23
    7758:	dc001315 	stw	r16,76(sp)
    775c:	12a9883a 	add	r20,r2,r10
    7760:	4807883a 	mov	r3,r9
    7764:	4005883a 	mov	r2,r8
    7768:	dc801415 	stw	r18,80(sp)
    776c:	000d883a 	mov	r6,zero
    7770:	01d00934 	movhi	r7,16420
    7774:	1009883a 	mov	r4,r2
    7778:	180b883a 	mov	r5,r3
    777c:	000ff980 	call	ff98 <__muldf3>
    7780:	180b883a 	mov	r5,r3
    7784:	1009883a 	mov	r4,r2
    7788:	1821883a 	mov	r16,r3
    778c:	1025883a 	mov	r18,r2
    7790:	0010f8c0 	call	10f8c <__fixdfsi>
    7794:	1009883a 	mov	r4,r2
    7798:	1023883a 	mov	r17,r2
    779c:	00110140 	call	11014 <__floatsidf>
    77a0:	9009883a 	mov	r4,r18
    77a4:	800b883a 	mov	r5,r16
    77a8:	100d883a 	mov	r6,r2
    77ac:	180f883a 	mov	r7,r3
    77b0:	8c400c04 	addi	r17,r17,48
    77b4:	00106bc0 	call	106bc <__subdf3>
    77b8:	ad400044 	addi	r21,r21,1
    77bc:	ac7fffc5 	stb	r17,-1(r21)
    77c0:	ad3fea1e 	bne	r21,r20,776c <__alt_mem_Flash_flash_data+0xf400776c>
    77c4:	1813883a 	mov	r9,r3
    77c8:	d8c01017 	ldw	r3,64(sp)
    77cc:	dc001317 	ldw	r16,76(sp)
    77d0:	dc801417 	ldw	r18,80(sp)
    77d4:	1011883a 	mov	r8,r2
    77d8:	b8ef883a 	add	r23,r23,r3
    77dc:	d9000e17 	ldw	r4,56(sp)
    77e0:	d9401117 	ldw	r5,68(sp)
    77e4:	000d883a 	mov	r6,zero
    77e8:	01cff834 	movhi	r7,16352
    77ec:	da001715 	stw	r8,92(sp)
    77f0:	da401515 	stw	r9,84(sp)
    77f4:	000ebec0 	call	ebec <__adddf3>
    77f8:	da001717 	ldw	r8,92(sp)
    77fc:	da401517 	ldw	r9,84(sp)
    7800:	1009883a 	mov	r4,r2
    7804:	400d883a 	mov	r6,r8
    7808:	480f883a 	mov	r7,r9
    780c:	180b883a 	mov	r5,r3
    7810:	000feb80 	call	feb8 <__ledf2>
    7814:	da001717 	ldw	r8,92(sp)
    7818:	da401517 	ldw	r9,84(sp)
    781c:	10003b0e 	bge	r2,zero,790c <_dtoa_r+0x15dc>
    7820:	d9001217 	ldw	r4,72(sp)
    7824:	bd7fffc3 	ldbu	r21,-1(r23)
    7828:	d9000515 	stw	r4,20(sp)
    782c:	003d1c06 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    7830:	d8c00817 	ldw	r3,32(sp)
    7834:	18a9c83a 	sub	r20,r3,r2
    7838:	0005883a 	mov	r2,zero
    783c:	003d3706 	br	6d1c <__alt_mem_Flash_flash_data+0xf4006d1c>
    7840:	00800044 	movi	r2,1
    7844:	003dd006 	br	6f88 <__alt_mem_Flash_flash_data+0xf4006f88>
    7848:	d8c00217 	ldw	r3,8(sp)
    784c:	00800d84 	movi	r2,54
    7850:	dd400917 	ldw	r21,36(sp)
    7854:	10c5c83a 	sub	r2,r2,r3
    7858:	dd000817 	ldw	r20,32(sp)
    785c:	003d2f06 	br	6d1c <__alt_mem_Flash_flash_data+0xf4006d1c>
    7860:	9029883a 	mov	r20,r18
    7864:	982b883a 	mov	r21,r19
    7868:	04400084 	movi	r17,2
    786c:	003bc606 	br	6788 <__alt_mem_Flash_flash_data+0xf4006788>
    7870:	d8800617 	ldw	r2,24(sp)
    7874:	103efc26 	beq	r2,zero,7468 <__alt_mem_Flash_flash_data+0xf4007468>
    7878:	d8c00c17 	ldw	r3,48(sp)
    787c:	00fc890e 	bge	zero,r3,6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    7880:	a80b883a 	mov	r5,r21
    7884:	a009883a 	mov	r4,r20
    7888:	000d883a 	mov	r6,zero
    788c:	01d00934 	movhi	r7,16420
    7890:	000ff980 	call	ff98 <__muldf3>
    7894:	89000044 	addi	r4,r17,1
    7898:	1029883a 	mov	r20,r2
    789c:	182b883a 	mov	r21,r3
    78a0:	00110140 	call	11014 <__floatsidf>
    78a4:	a009883a 	mov	r4,r20
    78a8:	a80b883a 	mov	r5,r21
    78ac:	100d883a 	mov	r6,r2
    78b0:	180f883a 	mov	r7,r3
    78b4:	000ff980 	call	ff98 <__muldf3>
    78b8:	1009883a 	mov	r4,r2
    78bc:	180b883a 	mov	r5,r3
    78c0:	000d883a 	mov	r6,zero
    78c4:	01d00734 	movhi	r7,16412
    78c8:	000ebec0 	call	ebec <__adddf3>
    78cc:	d9000517 	ldw	r4,20(sp)
    78d0:	1023883a 	mov	r17,r2
    78d4:	00bf3034 	movhi	r2,64704
    78d8:	213fffc4 	addi	r4,r4,-1
    78dc:	1885883a 	add	r2,r3,r2
    78e0:	d9001215 	stw	r4,72(sp)
    78e4:	d8800e15 	stw	r2,56(sp)
    78e8:	da800c17 	ldw	r10,48(sp)
    78ec:	003bc306 	br	67fc <__alt_mem_Flash_flash_data+0xf40067fc>
    78f0:	b039883a 	mov	fp,r22
    78f4:	01000e44 	movi	r4,57
    78f8:	8825883a 	mov	r18,r17
    78fc:	9dc00044 	addi	r23,r19,1
    7900:	99000005 	stb	r4,0(r19)
    7904:	a023883a 	mov	r17,r20
    7908:	003dae06 	br	6fc4 <__alt_mem_Flash_flash_data+0xf4006fc4>
    790c:	d9800e17 	ldw	r6,56(sp)
    7910:	d9c01117 	ldw	r7,68(sp)
    7914:	0009883a 	mov	r4,zero
    7918:	014ff834 	movhi	r5,16352
    791c:	da001715 	stw	r8,92(sp)
    7920:	da401515 	stw	r9,84(sp)
    7924:	00106bc0 	call	106bc <__subdf3>
    7928:	da001717 	ldw	r8,92(sp)
    792c:	da401517 	ldw	r9,84(sp)
    7930:	1009883a 	mov	r4,r2
    7934:	180b883a 	mov	r5,r3
    7938:	400d883a 	mov	r6,r8
    793c:	480f883a 	mov	r7,r9
    7940:	000fdd80 	call	fdd8 <__gedf2>
    7944:	00bc570e 	bge	zero,r2,6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    7948:	01000c04 	movi	r4,48
    794c:	00000106 	br	7954 <_dtoa_r+0x1624>
    7950:	102f883a 	mov	r23,r2
    7954:	b8bfffc4 	addi	r2,r23,-1
    7958:	10c00007 	ldb	r3,0(r2)
    795c:	193ffc26 	beq	r3,r4,7950 <__alt_mem_Flash_flash_data+0xf4007950>
    7960:	d9801217 	ldw	r6,72(sp)
    7964:	d9800515 	stw	r6,20(sp)
    7968:	003c1f06 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    796c:	d8801217 	ldw	r2,72(sp)
    7970:	dc001117 	ldw	r16,68(sp)
    7974:	d8800515 	stw	r2,20(sp)
    7978:	003cc906 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    797c:	dd801317 	ldw	r22,76(sp)
    7980:	dc001117 	ldw	r16,68(sp)
    7984:	dcc01417 	ldw	r19,80(sp)
    7988:	dc801017 	ldw	r18,64(sp)
    798c:	003c4506 	br	6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    7990:	103e5d1e 	bne	r2,zero,7308 <__alt_mem_Flash_flash_data+0xf4007308>
    7994:	4080004c 	andi	r2,r8,1
    7998:	103e5b26 	beq	r2,zero,7308 <__alt_mem_Flash_flash_data+0xf4007308>
    799c:	003e5706 	br	72fc <__alt_mem_Flash_flash_data+0xf40072fc>
    79a0:	d8c00317 	ldw	r3,12(sp)
    79a4:	00800084 	movi	r2,2
    79a8:	10c00a16 	blt	r2,r3,79d4 <_dtoa_r+0x16a4>
    79ac:	d9000c17 	ldw	r4,48(sp)
    79b0:	003e8306 	br	73c0 <__alt_mem_Flash_flash_data+0xf40073c0>
    79b4:	04400084 	movi	r17,2
    79b8:	003b7306 	br	6788 <__alt_mem_Flash_flash_data+0xf4006788>
    79bc:	d9801217 	ldw	r6,72(sp)
    79c0:	d9800515 	stw	r6,20(sp)
    79c4:	003cb606 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    79c8:	d9001217 	ldw	r4,72(sp)
    79cc:	d9000515 	stw	r4,20(sp)
    79d0:	003c0506 	br	69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    79d4:	d9800c17 	ldw	r6,48(sp)
    79d8:	d9800615 	stw	r6,24(sp)
    79dc:	003e8306 	br	73ec <__alt_mem_Flash_flash_data+0xf40073ec>
    79e0:	d9800317 	ldw	r6,12(sp)
    79e4:	00800084 	movi	r2,2
    79e8:	11800216 	blt	r2,r6,79f4 <_dtoa_r+0x16c4>
    79ec:	d8800c17 	ldw	r2,48(sp)
    79f0:	003da606 	br	708c <__alt_mem_Flash_flash_data+0xf400708c>
    79f4:	d8800c17 	ldw	r2,48(sp)
    79f8:	d8800615 	stw	r2,24(sp)
    79fc:	003e7b06 	br	73ec <__alt_mem_Flash_flash_data+0xf40073ec>
    7a00:	05000044 	movi	r20,1
    7a04:	003b0506 	br	661c <__alt_mem_Flash_flash_data+0xf400661c>
    7a08:	8009883a 	mov	r4,r16
    7a0c:	80001115 	stw	zero,68(r16)
    7a10:	000b883a 	mov	r5,zero
    7a14:	00092880 	call	9288 <_Balloc>
    7a18:	d8800715 	stw	r2,28(sp)
    7a1c:	d8c00717 	ldw	r3,28(sp)
    7a20:	00bfffc4 	movi	r2,-1
    7a24:	01000044 	movi	r4,1
    7a28:	d8800c15 	stw	r2,48(sp)
    7a2c:	80c01015 	stw	r3,64(r16)
    7a30:	d9000b15 	stw	r4,44(sp)
    7a34:	d8800615 	stw	r2,24(sp)
    7a38:	d8002215 	stw	zero,136(sp)
    7a3c:	003c1906 	br	6aa4 <__alt_mem_Flash_flash_data+0xf4006aa4>
    7a40:	193d2926 	beq	r3,r4,6ee8 <__alt_mem_Flash_flash_data+0xf4006ee8>
    7a44:	00c00f04 	movi	r3,60
    7a48:	1885c83a 	sub	r2,r3,r2
    7a4c:	003d7b06 	br	703c <__alt_mem_Flash_flash_data+0xf400703c>
    7a50:	000b883a 	mov	r5,zero
    7a54:	003b1006 	br	6698 <__alt_mem_Flash_flash_data+0xf4006698>

00007a58 <__sflush_r>:
    7a58:	2880030b 	ldhu	r2,12(r5)
    7a5c:	defffb04 	addi	sp,sp,-20
    7a60:	dcc00315 	stw	r19,12(sp)
    7a64:	dc400115 	stw	r17,4(sp)
    7a68:	dfc00415 	stw	ra,16(sp)
    7a6c:	dc800215 	stw	r18,8(sp)
    7a70:	dc000015 	stw	r16,0(sp)
    7a74:	10c0020c 	andi	r3,r2,8
    7a78:	2823883a 	mov	r17,r5
    7a7c:	2027883a 	mov	r19,r4
    7a80:	1800311e 	bne	r3,zero,7b48 <__sflush_r+0xf0>
    7a84:	28c00117 	ldw	r3,4(r5)
    7a88:	10820014 	ori	r2,r2,2048
    7a8c:	2880030d 	sth	r2,12(r5)
    7a90:	00c04b0e 	bge	zero,r3,7bc0 <__sflush_r+0x168>
    7a94:	8a000a17 	ldw	r8,40(r17)
    7a98:	40002326 	beq	r8,zero,7b28 <__sflush_r+0xd0>
    7a9c:	9c000017 	ldw	r16,0(r19)
    7aa0:	10c4000c 	andi	r3,r2,4096
    7aa4:	98000015 	stw	zero,0(r19)
    7aa8:	18004826 	beq	r3,zero,7bcc <__sflush_r+0x174>
    7aac:	89801417 	ldw	r6,80(r17)
    7ab0:	10c0010c 	andi	r3,r2,4
    7ab4:	18000626 	beq	r3,zero,7ad0 <__sflush_r+0x78>
    7ab8:	88c00117 	ldw	r3,4(r17)
    7abc:	88800c17 	ldw	r2,48(r17)
    7ac0:	30cdc83a 	sub	r6,r6,r3
    7ac4:	10000226 	beq	r2,zero,7ad0 <__sflush_r+0x78>
    7ac8:	88800f17 	ldw	r2,60(r17)
    7acc:	308dc83a 	sub	r6,r6,r2
    7ad0:	89400717 	ldw	r5,28(r17)
    7ad4:	9809883a 	mov	r4,r19
    7ad8:	000f883a 	mov	r7,zero
    7adc:	403ee83a 	callr	r8
    7ae0:	00ffffc4 	movi	r3,-1
    7ae4:	10c04426 	beq	r2,r3,7bf8 <__sflush_r+0x1a0>
    7ae8:	88c0030b 	ldhu	r3,12(r17)
    7aec:	89000417 	ldw	r4,16(r17)
    7af0:	88000115 	stw	zero,4(r17)
    7af4:	197dffcc 	andi	r5,r3,63487
    7af8:	8940030d 	sth	r5,12(r17)
    7afc:	89000015 	stw	r4,0(r17)
    7b00:	18c4000c 	andi	r3,r3,4096
    7b04:	18002c1e 	bne	r3,zero,7bb8 <__sflush_r+0x160>
    7b08:	89400c17 	ldw	r5,48(r17)
    7b0c:	9c000015 	stw	r16,0(r19)
    7b10:	28000526 	beq	r5,zero,7b28 <__sflush_r+0xd0>
    7b14:	88801004 	addi	r2,r17,64
    7b18:	28800226 	beq	r5,r2,7b24 <__sflush_r+0xcc>
    7b1c:	9809883a 	mov	r4,r19
    7b20:	00081b00 	call	81b0 <_free_r>
    7b24:	88000c15 	stw	zero,48(r17)
    7b28:	0005883a 	mov	r2,zero
    7b2c:	dfc00417 	ldw	ra,16(sp)
    7b30:	dcc00317 	ldw	r19,12(sp)
    7b34:	dc800217 	ldw	r18,8(sp)
    7b38:	dc400117 	ldw	r17,4(sp)
    7b3c:	dc000017 	ldw	r16,0(sp)
    7b40:	dec00504 	addi	sp,sp,20
    7b44:	f800283a 	ret
    7b48:	2c800417 	ldw	r18,16(r5)
    7b4c:	903ff626 	beq	r18,zero,7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    7b50:	2c000017 	ldw	r16,0(r5)
    7b54:	108000cc 	andi	r2,r2,3
    7b58:	2c800015 	stw	r18,0(r5)
    7b5c:	84a1c83a 	sub	r16,r16,r18
    7b60:	1000131e 	bne	r2,zero,7bb0 <__sflush_r+0x158>
    7b64:	28800517 	ldw	r2,20(r5)
    7b68:	88800215 	stw	r2,8(r17)
    7b6c:	04000316 	blt	zero,r16,7b7c <__sflush_r+0x124>
    7b70:	003fed06 	br	7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    7b74:	90a5883a 	add	r18,r18,r2
    7b78:	043feb0e 	bge	zero,r16,7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    7b7c:	88800917 	ldw	r2,36(r17)
    7b80:	89400717 	ldw	r5,28(r17)
    7b84:	800f883a 	mov	r7,r16
    7b88:	900d883a 	mov	r6,r18
    7b8c:	9809883a 	mov	r4,r19
    7b90:	103ee83a 	callr	r2
    7b94:	80a1c83a 	sub	r16,r16,r2
    7b98:	00bff616 	blt	zero,r2,7b74 <__alt_mem_Flash_flash_data+0xf4007b74>
    7b9c:	88c0030b 	ldhu	r3,12(r17)
    7ba0:	00bfffc4 	movi	r2,-1
    7ba4:	18c01014 	ori	r3,r3,64
    7ba8:	88c0030d 	sth	r3,12(r17)
    7bac:	003fdf06 	br	7b2c <__alt_mem_Flash_flash_data+0xf4007b2c>
    7bb0:	0005883a 	mov	r2,zero
    7bb4:	003fec06 	br	7b68 <__alt_mem_Flash_flash_data+0xf4007b68>
    7bb8:	88801415 	stw	r2,80(r17)
    7bbc:	003fd206 	br	7b08 <__alt_mem_Flash_flash_data+0xf4007b08>
    7bc0:	28c00f17 	ldw	r3,60(r5)
    7bc4:	00ffb316 	blt	zero,r3,7a94 <__alt_mem_Flash_flash_data+0xf4007a94>
    7bc8:	003fd706 	br	7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    7bcc:	89400717 	ldw	r5,28(r17)
    7bd0:	000d883a 	mov	r6,zero
    7bd4:	9809883a 	mov	r4,r19
    7bd8:	01c00044 	movi	r7,1
    7bdc:	403ee83a 	callr	r8
    7be0:	100d883a 	mov	r6,r2
    7be4:	00bfffc4 	movi	r2,-1
    7be8:	30801426 	beq	r6,r2,7c3c <__sflush_r+0x1e4>
    7bec:	8880030b 	ldhu	r2,12(r17)
    7bf0:	8a000a17 	ldw	r8,40(r17)
    7bf4:	003fae06 	br	7ab0 <__alt_mem_Flash_flash_data+0xf4007ab0>
    7bf8:	98c00017 	ldw	r3,0(r19)
    7bfc:	183fba26 	beq	r3,zero,7ae8 <__alt_mem_Flash_flash_data+0xf4007ae8>
    7c00:	01000744 	movi	r4,29
    7c04:	19000626 	beq	r3,r4,7c20 <__sflush_r+0x1c8>
    7c08:	01000584 	movi	r4,22
    7c0c:	19000426 	beq	r3,r4,7c20 <__sflush_r+0x1c8>
    7c10:	88c0030b 	ldhu	r3,12(r17)
    7c14:	18c01014 	ori	r3,r3,64
    7c18:	88c0030d 	sth	r3,12(r17)
    7c1c:	003fc306 	br	7b2c <__alt_mem_Flash_flash_data+0xf4007b2c>
    7c20:	8880030b 	ldhu	r2,12(r17)
    7c24:	88c00417 	ldw	r3,16(r17)
    7c28:	88000115 	stw	zero,4(r17)
    7c2c:	10bdffcc 	andi	r2,r2,63487
    7c30:	8880030d 	sth	r2,12(r17)
    7c34:	88c00015 	stw	r3,0(r17)
    7c38:	003fb306 	br	7b08 <__alt_mem_Flash_flash_data+0xf4007b08>
    7c3c:	98800017 	ldw	r2,0(r19)
    7c40:	103fea26 	beq	r2,zero,7bec <__alt_mem_Flash_flash_data+0xf4007bec>
    7c44:	00c00744 	movi	r3,29
    7c48:	10c00226 	beq	r2,r3,7c54 <__sflush_r+0x1fc>
    7c4c:	00c00584 	movi	r3,22
    7c50:	10ffd21e 	bne	r2,r3,7b9c <__alt_mem_Flash_flash_data+0xf4007b9c>
    7c54:	9c000015 	stw	r16,0(r19)
    7c58:	0005883a 	mov	r2,zero
    7c5c:	003fb306 	br	7b2c <__alt_mem_Flash_flash_data+0xf4007b2c>

00007c60 <_fflush_r>:
    7c60:	defffd04 	addi	sp,sp,-12
    7c64:	dc000115 	stw	r16,4(sp)
    7c68:	dfc00215 	stw	ra,8(sp)
    7c6c:	2021883a 	mov	r16,r4
    7c70:	20000226 	beq	r4,zero,7c7c <_fflush_r+0x1c>
    7c74:	20800e17 	ldw	r2,56(r4)
    7c78:	10000c26 	beq	r2,zero,7cac <_fflush_r+0x4c>
    7c7c:	2880030f 	ldh	r2,12(r5)
    7c80:	1000051e 	bne	r2,zero,7c98 <_fflush_r+0x38>
    7c84:	0005883a 	mov	r2,zero
    7c88:	dfc00217 	ldw	ra,8(sp)
    7c8c:	dc000117 	ldw	r16,4(sp)
    7c90:	dec00304 	addi	sp,sp,12
    7c94:	f800283a 	ret
    7c98:	8009883a 	mov	r4,r16
    7c9c:	dfc00217 	ldw	ra,8(sp)
    7ca0:	dc000117 	ldw	r16,4(sp)
    7ca4:	dec00304 	addi	sp,sp,12
    7ca8:	0007a581 	jmpi	7a58 <__sflush_r>
    7cac:	d9400015 	stw	r5,0(sp)
    7cb0:	000803c0 	call	803c <__sinit>
    7cb4:	d9400017 	ldw	r5,0(sp)
    7cb8:	003ff006 	br	7c7c <__alt_mem_Flash_flash_data+0xf4007c7c>

00007cbc <fflush>:
    7cbc:	20000526 	beq	r4,zero,7cd4 <fflush+0x18>
    7cc0:	008000b4 	movhi	r2,2
    7cc4:	10855404 	addi	r2,r2,5456
    7cc8:	200b883a 	mov	r5,r4
    7ccc:	11000017 	ldw	r4,0(r2)
    7cd0:	0007c601 	jmpi	7c60 <_fflush_r>
    7cd4:	008000b4 	movhi	r2,2
    7cd8:	10855304 	addi	r2,r2,5452
    7cdc:	11000017 	ldw	r4,0(r2)
    7ce0:	01400034 	movhi	r5,0
    7ce4:	295f1804 	addi	r5,r5,31840
    7ce8:	00085641 	jmpi	8564 <_fwalk_reent>

00007cec <__fp_lock>:
    7cec:	0005883a 	mov	r2,zero
    7cf0:	f800283a 	ret

00007cf4 <__fp_unlock>:
    7cf4:	0005883a 	mov	r2,zero
    7cf8:	f800283a 	ret

00007cfc <_cleanup_r>:
    7cfc:	01400074 	movhi	r5,1
    7d00:	29731a04 	addi	r5,r5,-13208
    7d04:	00085641 	jmpi	8564 <_fwalk_reent>

00007d08 <__sinit.part.1>:
    7d08:	defff704 	addi	sp,sp,-36
    7d0c:	00c00034 	movhi	r3,0
    7d10:	dfc00815 	stw	ra,32(sp)
    7d14:	ddc00715 	stw	r23,28(sp)
    7d18:	dd800615 	stw	r22,24(sp)
    7d1c:	dd400515 	stw	r21,20(sp)
    7d20:	dd000415 	stw	r20,16(sp)
    7d24:	dcc00315 	stw	r19,12(sp)
    7d28:	dc800215 	stw	r18,8(sp)
    7d2c:	dc400115 	stw	r17,4(sp)
    7d30:	dc000015 	stw	r16,0(sp)
    7d34:	18df3f04 	addi	r3,r3,31996
    7d38:	24000117 	ldw	r16,4(r4)
    7d3c:	20c00f15 	stw	r3,60(r4)
    7d40:	2080bb04 	addi	r2,r4,748
    7d44:	00c000c4 	movi	r3,3
    7d48:	20c0b915 	stw	r3,740(r4)
    7d4c:	2080ba15 	stw	r2,744(r4)
    7d50:	2000b815 	stw	zero,736(r4)
    7d54:	05c00204 	movi	r23,8
    7d58:	00800104 	movi	r2,4
    7d5c:	2025883a 	mov	r18,r4
    7d60:	b80d883a 	mov	r6,r23
    7d64:	81001704 	addi	r4,r16,92
    7d68:	000b883a 	mov	r5,zero
    7d6c:	80000015 	stw	zero,0(r16)
    7d70:	80000115 	stw	zero,4(r16)
    7d74:	80000215 	stw	zero,8(r16)
    7d78:	8080030d 	sth	r2,12(r16)
    7d7c:	80001915 	stw	zero,100(r16)
    7d80:	8000038d 	sth	zero,14(r16)
    7d84:	80000415 	stw	zero,16(r16)
    7d88:	80000515 	stw	zero,20(r16)
    7d8c:	80000615 	stw	zero,24(r16)
    7d90:	0001c000 	call	1c00 <memset>
    7d94:	05800074 	movhi	r22,1
    7d98:	94400217 	ldw	r17,8(r18)
    7d9c:	05400074 	movhi	r21,1
    7da0:	05000074 	movhi	r20,1
    7da4:	04c00074 	movhi	r19,1
    7da8:	b5a8bc04 	addi	r22,r22,-23824
    7dac:	ad68d304 	addi	r21,r21,-23732
    7db0:	a528f204 	addi	r20,r20,-23608
    7db4:	9ce90904 	addi	r19,r19,-23516
    7db8:	85800815 	stw	r22,32(r16)
    7dbc:	85400915 	stw	r21,36(r16)
    7dc0:	85000a15 	stw	r20,40(r16)
    7dc4:	84c00b15 	stw	r19,44(r16)
    7dc8:	84000715 	stw	r16,28(r16)
    7dcc:	00800284 	movi	r2,10
    7dd0:	8880030d 	sth	r2,12(r17)
    7dd4:	00800044 	movi	r2,1
    7dd8:	89001704 	addi	r4,r17,92
    7ddc:	b80d883a 	mov	r6,r23
    7de0:	000b883a 	mov	r5,zero
    7de4:	88000015 	stw	zero,0(r17)
    7de8:	88000115 	stw	zero,4(r17)
    7dec:	88000215 	stw	zero,8(r17)
    7df0:	88001915 	stw	zero,100(r17)
    7df4:	8880038d 	sth	r2,14(r17)
    7df8:	88000415 	stw	zero,16(r17)
    7dfc:	88000515 	stw	zero,20(r17)
    7e00:	88000615 	stw	zero,24(r17)
    7e04:	0001c000 	call	1c00 <memset>
    7e08:	94000317 	ldw	r16,12(r18)
    7e0c:	00800484 	movi	r2,18
    7e10:	8c400715 	stw	r17,28(r17)
    7e14:	8d800815 	stw	r22,32(r17)
    7e18:	8d400915 	stw	r21,36(r17)
    7e1c:	8d000a15 	stw	r20,40(r17)
    7e20:	8cc00b15 	stw	r19,44(r17)
    7e24:	8080030d 	sth	r2,12(r16)
    7e28:	00800084 	movi	r2,2
    7e2c:	80000015 	stw	zero,0(r16)
    7e30:	80000115 	stw	zero,4(r16)
    7e34:	80000215 	stw	zero,8(r16)
    7e38:	80001915 	stw	zero,100(r16)
    7e3c:	8080038d 	sth	r2,14(r16)
    7e40:	80000415 	stw	zero,16(r16)
    7e44:	80000515 	stw	zero,20(r16)
    7e48:	80000615 	stw	zero,24(r16)
    7e4c:	81001704 	addi	r4,r16,92
    7e50:	000b883a 	mov	r5,zero
    7e54:	b80d883a 	mov	r6,r23
    7e58:	0001c000 	call	1c00 <memset>
    7e5c:	00800044 	movi	r2,1
    7e60:	84000715 	stw	r16,28(r16)
    7e64:	85800815 	stw	r22,32(r16)
    7e68:	85400915 	stw	r21,36(r16)
    7e6c:	85000a15 	stw	r20,40(r16)
    7e70:	84c00b15 	stw	r19,44(r16)
    7e74:	90800e15 	stw	r2,56(r18)
    7e78:	dfc00817 	ldw	ra,32(sp)
    7e7c:	ddc00717 	ldw	r23,28(sp)
    7e80:	dd800617 	ldw	r22,24(sp)
    7e84:	dd400517 	ldw	r21,20(sp)
    7e88:	dd000417 	ldw	r20,16(sp)
    7e8c:	dcc00317 	ldw	r19,12(sp)
    7e90:	dc800217 	ldw	r18,8(sp)
    7e94:	dc400117 	ldw	r17,4(sp)
    7e98:	dc000017 	ldw	r16,0(sp)
    7e9c:	dec00904 	addi	sp,sp,36
    7ea0:	f800283a 	ret

00007ea4 <__sfmoreglue>:
    7ea4:	defffc04 	addi	sp,sp,-16
    7ea8:	dc400115 	stw	r17,4(sp)
    7eac:	2c7fffc4 	addi	r17,r5,-1
    7eb0:	8c401a24 	muli	r17,r17,104
    7eb4:	dc800215 	stw	r18,8(sp)
    7eb8:	2825883a 	mov	r18,r5
    7ebc:	89401d04 	addi	r5,r17,116
    7ec0:	dc000015 	stw	r16,0(sp)
    7ec4:	dfc00315 	stw	ra,12(sp)
    7ec8:	00088c00 	call	88c0 <_malloc_r>
    7ecc:	1021883a 	mov	r16,r2
    7ed0:	10000726 	beq	r2,zero,7ef0 <__sfmoreglue+0x4c>
    7ed4:	11000304 	addi	r4,r2,12
    7ed8:	10000015 	stw	zero,0(r2)
    7edc:	14800115 	stw	r18,4(r2)
    7ee0:	11000215 	stw	r4,8(r2)
    7ee4:	000b883a 	mov	r5,zero
    7ee8:	89801a04 	addi	r6,r17,104
    7eec:	0001c000 	call	1c00 <memset>
    7ef0:	8005883a 	mov	r2,r16
    7ef4:	dfc00317 	ldw	ra,12(sp)
    7ef8:	dc800217 	ldw	r18,8(sp)
    7efc:	dc400117 	ldw	r17,4(sp)
    7f00:	dc000017 	ldw	r16,0(sp)
    7f04:	dec00404 	addi	sp,sp,16
    7f08:	f800283a 	ret

00007f0c <__sfp>:
    7f0c:	008000b4 	movhi	r2,2
    7f10:	defffb04 	addi	sp,sp,-20
    7f14:	10855304 	addi	r2,r2,5452
    7f18:	dc800215 	stw	r18,8(sp)
    7f1c:	14800017 	ldw	r18,0(r2)
    7f20:	dcc00315 	stw	r19,12(sp)
    7f24:	dfc00415 	stw	ra,16(sp)
    7f28:	90800e17 	ldw	r2,56(r18)
    7f2c:	dc400115 	stw	r17,4(sp)
    7f30:	dc000015 	stw	r16,0(sp)
    7f34:	2027883a 	mov	r19,r4
    7f38:	1000021e 	bne	r2,zero,7f44 <__sfp+0x38>
    7f3c:	9009883a 	mov	r4,r18
    7f40:	0007d080 	call	7d08 <__sinit.part.1>
    7f44:	9480b804 	addi	r18,r18,736
    7f48:	047fffc4 	movi	r17,-1
    7f4c:	91400117 	ldw	r5,4(r18)
    7f50:	94000217 	ldw	r16,8(r18)
    7f54:	297fffc4 	addi	r5,r5,-1
    7f58:	28000a16 	blt	r5,zero,7f84 <__sfp+0x78>
    7f5c:	8080030f 	ldh	r2,12(r16)
    7f60:	10000c26 	beq	r2,zero,7f94 <__sfp+0x88>
    7f64:	80c01d04 	addi	r3,r16,116
    7f68:	00000206 	br	7f74 <__sfp+0x68>
    7f6c:	18bfe60f 	ldh	r2,-104(r3)
    7f70:	10000826 	beq	r2,zero,7f94 <__sfp+0x88>
    7f74:	297fffc4 	addi	r5,r5,-1
    7f78:	1c3ffd04 	addi	r16,r3,-12
    7f7c:	18c01a04 	addi	r3,r3,104
    7f80:	2c7ffa1e 	bne	r5,r17,7f6c <__alt_mem_Flash_flash_data+0xf4007f6c>
    7f84:	90800017 	ldw	r2,0(r18)
    7f88:	10001d26 	beq	r2,zero,8000 <__sfp+0xf4>
    7f8c:	1025883a 	mov	r18,r2
    7f90:	003fee06 	br	7f4c <__alt_mem_Flash_flash_data+0xf4007f4c>
    7f94:	00bfffc4 	movi	r2,-1
    7f98:	8080038d 	sth	r2,14(r16)
    7f9c:	00800044 	movi	r2,1
    7fa0:	8080030d 	sth	r2,12(r16)
    7fa4:	80001915 	stw	zero,100(r16)
    7fa8:	80000015 	stw	zero,0(r16)
    7fac:	80000215 	stw	zero,8(r16)
    7fb0:	80000115 	stw	zero,4(r16)
    7fb4:	80000415 	stw	zero,16(r16)
    7fb8:	80000515 	stw	zero,20(r16)
    7fbc:	80000615 	stw	zero,24(r16)
    7fc0:	81001704 	addi	r4,r16,92
    7fc4:	000b883a 	mov	r5,zero
    7fc8:	01800204 	movi	r6,8
    7fcc:	0001c000 	call	1c00 <memset>
    7fd0:	8005883a 	mov	r2,r16
    7fd4:	80000c15 	stw	zero,48(r16)
    7fd8:	80000d15 	stw	zero,52(r16)
    7fdc:	80001115 	stw	zero,68(r16)
    7fe0:	80001215 	stw	zero,72(r16)
    7fe4:	dfc00417 	ldw	ra,16(sp)
    7fe8:	dcc00317 	ldw	r19,12(sp)
    7fec:	dc800217 	ldw	r18,8(sp)
    7ff0:	dc400117 	ldw	r17,4(sp)
    7ff4:	dc000017 	ldw	r16,0(sp)
    7ff8:	dec00504 	addi	sp,sp,20
    7ffc:	f800283a 	ret
    8000:	9809883a 	mov	r4,r19
    8004:	01400104 	movi	r5,4
    8008:	0007ea40 	call	7ea4 <__sfmoreglue>
    800c:	90800015 	stw	r2,0(r18)
    8010:	103fde1e 	bne	r2,zero,7f8c <__alt_mem_Flash_flash_data+0xf4007f8c>
    8014:	00800304 	movi	r2,12
    8018:	98800015 	stw	r2,0(r19)
    801c:	0005883a 	mov	r2,zero
    8020:	003ff006 	br	7fe4 <__alt_mem_Flash_flash_data+0xf4007fe4>

00008024 <_cleanup>:
    8024:	008000b4 	movhi	r2,2
    8028:	10855304 	addi	r2,r2,5452
    802c:	11000017 	ldw	r4,0(r2)
    8030:	01400074 	movhi	r5,1
    8034:	29731a04 	addi	r5,r5,-13208
    8038:	00085641 	jmpi	8564 <_fwalk_reent>

0000803c <__sinit>:
    803c:	20800e17 	ldw	r2,56(r4)
    8040:	10000126 	beq	r2,zero,8048 <__sinit+0xc>
    8044:	f800283a 	ret
    8048:	0007d081 	jmpi	7d08 <__sinit.part.1>

0000804c <__sfp_lock_acquire>:
    804c:	f800283a 	ret

00008050 <__sfp_lock_release>:
    8050:	f800283a 	ret

00008054 <__sinit_lock_acquire>:
    8054:	f800283a 	ret

00008058 <__sinit_lock_release>:
    8058:	f800283a 	ret

0000805c <__fp_lock_all>:
    805c:	008000b4 	movhi	r2,2
    8060:	10855404 	addi	r2,r2,5456
    8064:	11000017 	ldw	r4,0(r2)
    8068:	01400034 	movhi	r5,0
    806c:	295f3b04 	addi	r5,r5,31980
    8070:	00084a01 	jmpi	84a0 <_fwalk>

00008074 <__fp_unlock_all>:
    8074:	008000b4 	movhi	r2,2
    8078:	10855404 	addi	r2,r2,5456
    807c:	11000017 	ldw	r4,0(r2)
    8080:	01400034 	movhi	r5,0
    8084:	295f3d04 	addi	r5,r5,31988
    8088:	00084a01 	jmpi	84a0 <_fwalk>

0000808c <_malloc_trim_r>:
    808c:	defffb04 	addi	sp,sp,-20
    8090:	dcc00315 	stw	r19,12(sp)
    8094:	04c000b4 	movhi	r19,2
    8098:	dc800215 	stw	r18,8(sp)
    809c:	dc400115 	stw	r17,4(sp)
    80a0:	dc000015 	stw	r16,0(sp)
    80a4:	dfc00415 	stw	ra,16(sp)
    80a8:	2821883a 	mov	r16,r5
    80ac:	9cfe2404 	addi	r19,r19,-1904
    80b0:	2025883a 	mov	r18,r4
    80b4:	0011cc80 	call	11cc8 <__malloc_lock>
    80b8:	98800217 	ldw	r2,8(r19)
    80bc:	14400117 	ldw	r17,4(r2)
    80c0:	00bfff04 	movi	r2,-4
    80c4:	88a2703a 	and	r17,r17,r2
    80c8:	8c21c83a 	sub	r16,r17,r16
    80cc:	8403fbc4 	addi	r16,r16,4079
    80d0:	8020d33a 	srli	r16,r16,12
    80d4:	0083ffc4 	movi	r2,4095
    80d8:	843fffc4 	addi	r16,r16,-1
    80dc:	8020933a 	slli	r16,r16,12
    80e0:	1400060e 	bge	r2,r16,80fc <_malloc_trim_r+0x70>
    80e4:	9009883a 	mov	r4,r18
    80e8:	000b883a 	mov	r5,zero
    80ec:	000a29c0 	call	a29c <_sbrk_r>
    80f0:	98c00217 	ldw	r3,8(r19)
    80f4:	1c47883a 	add	r3,r3,r17
    80f8:	10c00a26 	beq	r2,r3,8124 <_malloc_trim_r+0x98>
    80fc:	9009883a 	mov	r4,r18
    8100:	0011de80 	call	11de8 <__malloc_unlock>
    8104:	0005883a 	mov	r2,zero
    8108:	dfc00417 	ldw	ra,16(sp)
    810c:	dcc00317 	ldw	r19,12(sp)
    8110:	dc800217 	ldw	r18,8(sp)
    8114:	dc400117 	ldw	r17,4(sp)
    8118:	dc000017 	ldw	r16,0(sp)
    811c:	dec00504 	addi	sp,sp,20
    8120:	f800283a 	ret
    8124:	9009883a 	mov	r4,r18
    8128:	040bc83a 	sub	r5,zero,r16
    812c:	000a29c0 	call	a29c <_sbrk_r>
    8130:	00ffffc4 	movi	r3,-1
    8134:	10c00d26 	beq	r2,r3,816c <_malloc_trim_r+0xe0>
    8138:	00c000b4 	movhi	r3,2
    813c:	18ce5304 	addi	r3,r3,14668
    8140:	18800017 	ldw	r2,0(r3)
    8144:	99000217 	ldw	r4,8(r19)
    8148:	8c23c83a 	sub	r17,r17,r16
    814c:	8c400054 	ori	r17,r17,1
    8150:	1421c83a 	sub	r16,r2,r16
    8154:	24400115 	stw	r17,4(r4)
    8158:	9009883a 	mov	r4,r18
    815c:	1c000015 	stw	r16,0(r3)
    8160:	0011de80 	call	11de8 <__malloc_unlock>
    8164:	00800044 	movi	r2,1
    8168:	003fe706 	br	8108 <__alt_mem_Flash_flash_data+0xf4008108>
    816c:	9009883a 	mov	r4,r18
    8170:	000b883a 	mov	r5,zero
    8174:	000a29c0 	call	a29c <_sbrk_r>
    8178:	99000217 	ldw	r4,8(r19)
    817c:	014003c4 	movi	r5,15
    8180:	1107c83a 	sub	r3,r2,r4
    8184:	28ffdd0e 	bge	r5,r3,80fc <__alt_mem_Flash_flash_data+0xf40080fc>
    8188:	014000b4 	movhi	r5,2
    818c:	29455604 	addi	r5,r5,5464
    8190:	29400017 	ldw	r5,0(r5)
    8194:	18c00054 	ori	r3,r3,1
    8198:	20c00115 	stw	r3,4(r4)
    819c:	00c000b4 	movhi	r3,2
    81a0:	1145c83a 	sub	r2,r2,r5
    81a4:	18ce5304 	addi	r3,r3,14668
    81a8:	18800015 	stw	r2,0(r3)
    81ac:	003fd306 	br	80fc <__alt_mem_Flash_flash_data+0xf40080fc>

000081b0 <_free_r>:
    81b0:	28004c26 	beq	r5,zero,82e4 <_free_r+0x134>
    81b4:	defffd04 	addi	sp,sp,-12
    81b8:	dc400115 	stw	r17,4(sp)
    81bc:	dc000015 	stw	r16,0(sp)
    81c0:	2023883a 	mov	r17,r4
    81c4:	2821883a 	mov	r16,r5
    81c8:	dfc00215 	stw	ra,8(sp)
    81cc:	0011cc80 	call	11cc8 <__malloc_lock>
    81d0:	813fff17 	ldw	r4,-4(r16)
    81d4:	00bfff84 	movi	r2,-2
    81d8:	024000b4 	movhi	r9,2
    81dc:	81bffe04 	addi	r6,r16,-8
    81e0:	2084703a 	and	r2,r4,r2
    81e4:	4a7e2404 	addi	r9,r9,-1904
    81e8:	308b883a 	add	r5,r6,r2
    81ec:	2a000117 	ldw	r8,4(r5)
    81f0:	49c00217 	ldw	r7,8(r9)
    81f4:	00ffff04 	movi	r3,-4
    81f8:	40c6703a 	and	r3,r8,r3
    81fc:	39405326 	beq	r7,r5,834c <_free_r+0x19c>
    8200:	28c00115 	stw	r3,4(r5)
    8204:	2100004c 	andi	r4,r4,1
    8208:	2000091e 	bne	r4,zero,8230 <_free_r+0x80>
    820c:	81fffe17 	ldw	r7,-8(r16)
    8210:	4a000204 	addi	r8,r9,8
    8214:	31cdc83a 	sub	r6,r6,r7
    8218:	31000217 	ldw	r4,8(r6)
    821c:	11c5883a 	add	r2,r2,r7
    8220:	22006126 	beq	r4,r8,83a8 <_free_r+0x1f8>
    8224:	31c00317 	ldw	r7,12(r6)
    8228:	21c00315 	stw	r7,12(r4)
    822c:	39000215 	stw	r4,8(r7)
    8230:	28c9883a 	add	r4,r5,r3
    8234:	21c00117 	ldw	r7,4(r4)
    8238:	39c0004c 	andi	r7,r7,1
    823c:	38000d1e 	bne	r7,zero,8274 <_free_r+0xc4>
    8240:	29000217 	ldw	r4,8(r5)
    8244:	10c5883a 	add	r2,r2,r3
    8248:	00c000b4 	movhi	r3,2
    824c:	18fe2604 	addi	r3,r3,-1896
    8250:	20c07526 	beq	r4,r3,8428 <_free_r+0x278>
    8254:	29c00317 	ldw	r7,12(r5)
    8258:	11400054 	ori	r5,r2,1
    825c:	3087883a 	add	r3,r6,r2
    8260:	21c00315 	stw	r7,12(r4)
    8264:	39000215 	stw	r4,8(r7)
    8268:	31400115 	stw	r5,4(r6)
    826c:	18800015 	stw	r2,0(r3)
    8270:	00000406 	br	8284 <_free_r+0xd4>
    8274:	10c00054 	ori	r3,r2,1
    8278:	30c00115 	stw	r3,4(r6)
    827c:	3087883a 	add	r3,r6,r2
    8280:	18800015 	stw	r2,0(r3)
    8284:	00c07fc4 	movi	r3,511
    8288:	18801736 	bltu	r3,r2,82e8 <_free_r+0x138>
    828c:	1004d0fa 	srli	r2,r2,3
    8290:	01400044 	movi	r5,1
    8294:	49000117 	ldw	r4,4(r9)
    8298:	1087883a 	add	r3,r2,r2
    829c:	18c7883a 	add	r3,r3,r3
    82a0:	1005d0ba 	srai	r2,r2,2
    82a4:	18c7883a 	add	r3,r3,r3
    82a8:	1a47883a 	add	r3,r3,r9
    82ac:	19c00217 	ldw	r7,8(r3)
    82b0:	2884983a 	sll	r2,r5,r2
    82b4:	30c00315 	stw	r3,12(r6)
    82b8:	31c00215 	stw	r7,8(r6)
    82bc:	1104b03a 	or	r2,r2,r4
    82c0:	19800215 	stw	r6,8(r3)
    82c4:	48800115 	stw	r2,4(r9)
    82c8:	39800315 	stw	r6,12(r7)
    82cc:	8809883a 	mov	r4,r17
    82d0:	dfc00217 	ldw	ra,8(sp)
    82d4:	dc400117 	ldw	r17,4(sp)
    82d8:	dc000017 	ldw	r16,0(sp)
    82dc:	dec00304 	addi	sp,sp,12
    82e0:	0011de81 	jmpi	11de8 <__malloc_unlock>
    82e4:	f800283a 	ret
    82e8:	1006d27a 	srli	r3,r2,9
    82ec:	01000104 	movi	r4,4
    82f0:	20c04036 	bltu	r4,r3,83f4 <_free_r+0x244>
    82f4:	1006d1ba 	srli	r3,r2,6
    82f8:	19400e04 	addi	r5,r3,56
    82fc:	2947883a 	add	r3,r5,r5
    8300:	18c7883a 	add	r3,r3,r3
    8304:	18c7883a 	add	r3,r3,r3
    8308:	1a49883a 	add	r4,r3,r9
    830c:	20c00217 	ldw	r3,8(r4)
    8310:	01c000b4 	movhi	r7,2
    8314:	39fe2404 	addi	r7,r7,-1904
    8318:	19003b26 	beq	r3,r4,8408 <_free_r+0x258>
    831c:	01ffff04 	movi	r7,-4
    8320:	19400117 	ldw	r5,4(r3)
    8324:	29ca703a 	and	r5,r5,r7
    8328:	1140022e 	bgeu	r2,r5,8334 <_free_r+0x184>
    832c:	18c00217 	ldw	r3,8(r3)
    8330:	20fffb1e 	bne	r4,r3,8320 <__alt_mem_Flash_flash_data+0xf4008320>
    8334:	18800317 	ldw	r2,12(r3)
    8338:	30800315 	stw	r2,12(r6)
    833c:	30c00215 	stw	r3,8(r6)
    8340:	11800215 	stw	r6,8(r2)
    8344:	19800315 	stw	r6,12(r3)
    8348:	003fe006 	br	82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    834c:	2100004c 	andi	r4,r4,1
    8350:	1885883a 	add	r2,r3,r2
    8354:	2000071e 	bne	r4,zero,8374 <_free_r+0x1c4>
    8358:	817ffe17 	ldw	r5,-8(r16)
    835c:	314dc83a 	sub	r6,r6,r5
    8360:	30c00317 	ldw	r3,12(r6)
    8364:	31000217 	ldw	r4,8(r6)
    8368:	1145883a 	add	r2,r2,r5
    836c:	20c00315 	stw	r3,12(r4)
    8370:	19000215 	stw	r4,8(r3)
    8374:	10c00054 	ori	r3,r2,1
    8378:	30c00115 	stw	r3,4(r6)
    837c:	00c000b4 	movhi	r3,2
    8380:	18c55704 	addi	r3,r3,5468
    8384:	18c00017 	ldw	r3,0(r3)
    8388:	49800215 	stw	r6,8(r9)
    838c:	10ffcf36 	bltu	r2,r3,82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    8390:	008000b4 	movhi	r2,2
    8394:	108e2604 	addi	r2,r2,14488
    8398:	11400017 	ldw	r5,0(r2)
    839c:	8809883a 	mov	r4,r17
    83a0:	000808c0 	call	808c <_malloc_trim_r>
    83a4:	003fc906 	br	82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    83a8:	28c9883a 	add	r4,r5,r3
    83ac:	21000117 	ldw	r4,4(r4)
    83b0:	2100004c 	andi	r4,r4,1
    83b4:	20000a1e 	bne	r4,zero,83e0 <_free_r+0x230>
    83b8:	29000317 	ldw	r4,12(r5)
    83bc:	29400217 	ldw	r5,8(r5)
    83c0:	10c5883a 	add	r2,r2,r3
    83c4:	10c00054 	ori	r3,r2,1
    83c8:	29000315 	stw	r4,12(r5)
    83cc:	21400215 	stw	r5,8(r4)
    83d0:	30c00115 	stw	r3,4(r6)
    83d4:	308d883a 	add	r6,r6,r2
    83d8:	30800015 	stw	r2,0(r6)
    83dc:	003fbb06 	br	82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    83e0:	10c00054 	ori	r3,r2,1
    83e4:	30c00115 	stw	r3,4(r6)
    83e8:	308d883a 	add	r6,r6,r2
    83ec:	30800015 	stw	r2,0(r6)
    83f0:	003fb606 	br	82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    83f4:	01000504 	movi	r4,20
    83f8:	20c01436 	bltu	r4,r3,844c <_free_r+0x29c>
    83fc:	194016c4 	addi	r5,r3,91
    8400:	2947883a 	add	r3,r5,r5
    8404:	003fbe06 	br	8300 <__alt_mem_Flash_flash_data+0xf4008300>
    8408:	280bd0ba 	srai	r5,r5,2
    840c:	00800044 	movi	r2,1
    8410:	39000117 	ldw	r4,4(r7)
    8414:	114a983a 	sll	r5,r2,r5
    8418:	1805883a 	mov	r2,r3
    841c:	2908b03a 	or	r4,r5,r4
    8420:	39000115 	stw	r4,4(r7)
    8424:	003fc406 	br	8338 <__alt_mem_Flash_flash_data+0xf4008338>
    8428:	49800515 	stw	r6,20(r9)
    842c:	49800415 	stw	r6,16(r9)
    8430:	10c00054 	ori	r3,r2,1
    8434:	31000315 	stw	r4,12(r6)
    8438:	31000215 	stw	r4,8(r6)
    843c:	30c00115 	stw	r3,4(r6)
    8440:	308d883a 	add	r6,r6,r2
    8444:	30800015 	stw	r2,0(r6)
    8448:	003fa006 	br	82cc <__alt_mem_Flash_flash_data+0xf40082cc>
    844c:	01001504 	movi	r4,84
    8450:	20c00436 	bltu	r4,r3,8464 <_free_r+0x2b4>
    8454:	1006d33a 	srli	r3,r2,12
    8458:	19401b84 	addi	r5,r3,110
    845c:	2947883a 	add	r3,r5,r5
    8460:	003fa706 	br	8300 <__alt_mem_Flash_flash_data+0xf4008300>
    8464:	01005504 	movi	r4,340
    8468:	20c00436 	bltu	r4,r3,847c <_free_r+0x2cc>
    846c:	1006d3fa 	srli	r3,r2,15
    8470:	19401dc4 	addi	r5,r3,119
    8474:	2947883a 	add	r3,r5,r5
    8478:	003fa106 	br	8300 <__alt_mem_Flash_flash_data+0xf4008300>
    847c:	01015504 	movi	r4,1364
    8480:	20c00436 	bltu	r4,r3,8494 <_free_r+0x2e4>
    8484:	1006d4ba 	srli	r3,r2,18
    8488:	19401f04 	addi	r5,r3,124
    848c:	2947883a 	add	r3,r5,r5
    8490:	003f9b06 	br	8300 <__alt_mem_Flash_flash_data+0xf4008300>
    8494:	00c03f04 	movi	r3,252
    8498:	01401f84 	movi	r5,126
    849c:	003f9806 	br	8300 <__alt_mem_Flash_flash_data+0xf4008300>

000084a0 <_fwalk>:
    84a0:	defff704 	addi	sp,sp,-36
    84a4:	dd000415 	stw	r20,16(sp)
    84a8:	dfc00815 	stw	ra,32(sp)
    84ac:	ddc00715 	stw	r23,28(sp)
    84b0:	dd800615 	stw	r22,24(sp)
    84b4:	dd400515 	stw	r21,20(sp)
    84b8:	dcc00315 	stw	r19,12(sp)
    84bc:	dc800215 	stw	r18,8(sp)
    84c0:	dc400115 	stw	r17,4(sp)
    84c4:	dc000015 	stw	r16,0(sp)
    84c8:	2500b804 	addi	r20,r4,736
    84cc:	a0002326 	beq	r20,zero,855c <_fwalk+0xbc>
    84d0:	282b883a 	mov	r21,r5
    84d4:	002f883a 	mov	r23,zero
    84d8:	05800044 	movi	r22,1
    84dc:	04ffffc4 	movi	r19,-1
    84e0:	a4400117 	ldw	r17,4(r20)
    84e4:	a4800217 	ldw	r18,8(r20)
    84e8:	8c7fffc4 	addi	r17,r17,-1
    84ec:	88000d16 	blt	r17,zero,8524 <_fwalk+0x84>
    84f0:	94000304 	addi	r16,r18,12
    84f4:	94800384 	addi	r18,r18,14
    84f8:	80c0000b 	ldhu	r3,0(r16)
    84fc:	8c7fffc4 	addi	r17,r17,-1
    8500:	813ffd04 	addi	r4,r16,-12
    8504:	b0c0042e 	bgeu	r22,r3,8518 <_fwalk+0x78>
    8508:	90c0000f 	ldh	r3,0(r18)
    850c:	1cc00226 	beq	r3,r19,8518 <_fwalk+0x78>
    8510:	a83ee83a 	callr	r21
    8514:	b8aeb03a 	or	r23,r23,r2
    8518:	84001a04 	addi	r16,r16,104
    851c:	94801a04 	addi	r18,r18,104
    8520:	8cfff51e 	bne	r17,r19,84f8 <__alt_mem_Flash_flash_data+0xf40084f8>
    8524:	a5000017 	ldw	r20,0(r20)
    8528:	a03fed1e 	bne	r20,zero,84e0 <__alt_mem_Flash_flash_data+0xf40084e0>
    852c:	b805883a 	mov	r2,r23
    8530:	dfc00817 	ldw	ra,32(sp)
    8534:	ddc00717 	ldw	r23,28(sp)
    8538:	dd800617 	ldw	r22,24(sp)
    853c:	dd400517 	ldw	r21,20(sp)
    8540:	dd000417 	ldw	r20,16(sp)
    8544:	dcc00317 	ldw	r19,12(sp)
    8548:	dc800217 	ldw	r18,8(sp)
    854c:	dc400117 	ldw	r17,4(sp)
    8550:	dc000017 	ldw	r16,0(sp)
    8554:	dec00904 	addi	sp,sp,36
    8558:	f800283a 	ret
    855c:	002f883a 	mov	r23,zero
    8560:	003ff206 	br	852c <__alt_mem_Flash_flash_data+0xf400852c>

00008564 <_fwalk_reent>:
    8564:	defff704 	addi	sp,sp,-36
    8568:	dd400515 	stw	r21,20(sp)
    856c:	dfc00815 	stw	ra,32(sp)
    8570:	ddc00715 	stw	r23,28(sp)
    8574:	dd800615 	stw	r22,24(sp)
    8578:	dd000415 	stw	r20,16(sp)
    857c:	dcc00315 	stw	r19,12(sp)
    8580:	dc800215 	stw	r18,8(sp)
    8584:	dc400115 	stw	r17,4(sp)
    8588:	dc000015 	stw	r16,0(sp)
    858c:	2540b804 	addi	r21,r4,736
    8590:	a8002326 	beq	r21,zero,8620 <_fwalk_reent+0xbc>
    8594:	2829883a 	mov	r20,r5
    8598:	202d883a 	mov	r22,r4
    859c:	002f883a 	mov	r23,zero
    85a0:	04c00044 	movi	r19,1
    85a4:	04bfffc4 	movi	r18,-1
    85a8:	ac400117 	ldw	r17,4(r21)
    85ac:	ac000217 	ldw	r16,8(r21)
    85b0:	8c7fffc4 	addi	r17,r17,-1
    85b4:	88000c16 	blt	r17,zero,85e8 <_fwalk_reent+0x84>
    85b8:	84000304 	addi	r16,r16,12
    85bc:	80c0000b 	ldhu	r3,0(r16)
    85c0:	8c7fffc4 	addi	r17,r17,-1
    85c4:	817ffd04 	addi	r5,r16,-12
    85c8:	98c0052e 	bgeu	r19,r3,85e0 <_fwalk_reent+0x7c>
    85cc:	80c0008f 	ldh	r3,2(r16)
    85d0:	b009883a 	mov	r4,r22
    85d4:	1c800226 	beq	r3,r18,85e0 <_fwalk_reent+0x7c>
    85d8:	a03ee83a 	callr	r20
    85dc:	b8aeb03a 	or	r23,r23,r2
    85e0:	84001a04 	addi	r16,r16,104
    85e4:	8cbff51e 	bne	r17,r18,85bc <__alt_mem_Flash_flash_data+0xf40085bc>
    85e8:	ad400017 	ldw	r21,0(r21)
    85ec:	a83fee1e 	bne	r21,zero,85a8 <__alt_mem_Flash_flash_data+0xf40085a8>
    85f0:	b805883a 	mov	r2,r23
    85f4:	dfc00817 	ldw	ra,32(sp)
    85f8:	ddc00717 	ldw	r23,28(sp)
    85fc:	dd800617 	ldw	r22,24(sp)
    8600:	dd400517 	ldw	r21,20(sp)
    8604:	dd000417 	ldw	r20,16(sp)
    8608:	dcc00317 	ldw	r19,12(sp)
    860c:	dc800217 	ldw	r18,8(sp)
    8610:	dc400117 	ldw	r17,4(sp)
    8614:	dc000017 	ldw	r16,0(sp)
    8618:	dec00904 	addi	sp,sp,36
    861c:	f800283a 	ret
    8620:	002f883a 	mov	r23,zero
    8624:	003ff206 	br	85f0 <__alt_mem_Flash_flash_data+0xf40085f0>

00008628 <_setlocale_r>:
    8628:	30001b26 	beq	r6,zero,8698 <_setlocale_r+0x70>
    862c:	014000b4 	movhi	r5,2
    8630:	defffe04 	addi	sp,sp,-8
    8634:	297b0e04 	addi	r5,r5,-5064
    8638:	3009883a 	mov	r4,r6
    863c:	dc000015 	stw	r16,0(sp)
    8640:	dfc00115 	stw	ra,4(sp)
    8644:	3021883a 	mov	r16,r6
    8648:	0001e500 	call	1e50 <strcmp>
    864c:	1000061e 	bne	r2,zero,8668 <_setlocale_r+0x40>
    8650:	008000b4 	movhi	r2,2
    8654:	10bb0d04 	addi	r2,r2,-5068
    8658:	dfc00117 	ldw	ra,4(sp)
    865c:	dc000017 	ldw	r16,0(sp)
    8660:	dec00204 	addi	sp,sp,8
    8664:	f800283a 	ret
    8668:	014000b4 	movhi	r5,2
    866c:	297b0d04 	addi	r5,r5,-5068
    8670:	8009883a 	mov	r4,r16
    8674:	0001e500 	call	1e50 <strcmp>
    8678:	103ff526 	beq	r2,zero,8650 <__alt_mem_Flash_flash_data+0xf4008650>
    867c:	014000b4 	movhi	r5,2
    8680:	297af004 	addi	r5,r5,-5184
    8684:	8009883a 	mov	r4,r16
    8688:	0001e500 	call	1e50 <strcmp>
    868c:	103ff026 	beq	r2,zero,8650 <__alt_mem_Flash_flash_data+0xf4008650>
    8690:	0005883a 	mov	r2,zero
    8694:	003ff006 	br	8658 <__alt_mem_Flash_flash_data+0xf4008658>
    8698:	008000b4 	movhi	r2,2
    869c:	10bb0d04 	addi	r2,r2,-5068
    86a0:	f800283a 	ret

000086a4 <__locale_charset>:
    86a4:	008000b4 	movhi	r2,2
    86a8:	10be0e04 	addi	r2,r2,-1992
    86ac:	f800283a 	ret

000086b0 <__locale_mb_cur_max>:
    86b0:	008000b4 	movhi	r2,2
    86b4:	10855504 	addi	r2,r2,5460
    86b8:	10800017 	ldw	r2,0(r2)
    86bc:	f800283a 	ret

000086c0 <__locale_msgcharset>:
    86c0:	008000b4 	movhi	r2,2
    86c4:	10be0604 	addi	r2,r2,-2024
    86c8:	f800283a 	ret

000086cc <__locale_cjk_lang>:
    86cc:	0005883a 	mov	r2,zero
    86d0:	f800283a 	ret

000086d4 <_localeconv_r>:
    86d4:	008000b4 	movhi	r2,2
    86d8:	10be1604 	addi	r2,r2,-1960
    86dc:	f800283a 	ret

000086e0 <setlocale>:
    86e0:	00c000b4 	movhi	r3,2
    86e4:	18c55404 	addi	r3,r3,5456
    86e8:	2005883a 	mov	r2,r4
    86ec:	19000017 	ldw	r4,0(r3)
    86f0:	280d883a 	mov	r6,r5
    86f4:	100b883a 	mov	r5,r2
    86f8:	00086281 	jmpi	8628 <_setlocale_r>

000086fc <localeconv>:
    86fc:	008000b4 	movhi	r2,2
    8700:	10be1604 	addi	r2,r2,-1960
    8704:	f800283a 	ret

00008708 <__smakebuf_r>:
    8708:	2880030b 	ldhu	r2,12(r5)
    870c:	10c0008c 	andi	r3,r2,2
    8710:	1800401e 	bne	r3,zero,8814 <__smakebuf_r+0x10c>
    8714:	deffec04 	addi	sp,sp,-80
    8718:	dc000f15 	stw	r16,60(sp)
    871c:	2821883a 	mov	r16,r5
    8720:	2940038f 	ldh	r5,14(r5)
    8724:	dc401015 	stw	r17,64(sp)
    8728:	dfc01315 	stw	ra,76(sp)
    872c:	dcc01215 	stw	r19,72(sp)
    8730:	dc801115 	stw	r18,68(sp)
    8734:	2023883a 	mov	r17,r4
    8738:	28001b16 	blt	r5,zero,87a8 <__smakebuf_r+0xa0>
    873c:	d80d883a 	mov	r6,sp
    8740:	000cf4c0 	call	cf4c <_fstat_r>
    8744:	10001716 	blt	r2,zero,87a4 <__smakebuf_r+0x9c>
    8748:	d8800117 	ldw	r2,4(sp)
    874c:	00e00014 	movui	r3,32768
    8750:	10bc000c 	andi	r2,r2,61440
    8754:	10c03726 	beq	r2,r3,8834 <__smakebuf_r+0x12c>
    8758:	80c0030b 	ldhu	r3,12(r16)
    875c:	18c20014 	ori	r3,r3,2048
    8760:	80c0030d 	sth	r3,12(r16)
    8764:	00c80004 	movi	r3,8192
    8768:	10c03c1e 	bne	r2,r3,885c <__smakebuf_r+0x154>
    876c:	8140038f 	ldh	r5,14(r16)
    8770:	8809883a 	mov	r4,r17
    8774:	000d4640 	call	d464 <_isatty_r>
    8778:	10004e26 	beq	r2,zero,88b4 <__smakebuf_r+0x1ac>
    877c:	8080030b 	ldhu	r2,12(r16)
    8780:	04c00044 	movi	r19,1
    8784:	80c010c4 	addi	r3,r16,67
    8788:	14c4b03a 	or	r2,r2,r19
    878c:	8080030d 	sth	r2,12(r16)
    8790:	80c00015 	stw	r3,0(r16)
    8794:	80c00415 	stw	r3,16(r16)
    8798:	84c00515 	stw	r19,20(r16)
    879c:	04810004 	movi	r18,1024
    87a0:	00000706 	br	87c0 <__smakebuf_r+0xb8>
    87a4:	8080030b 	ldhu	r2,12(r16)
    87a8:	10c0200c 	andi	r3,r2,128
    87ac:	18001f1e 	bne	r3,zero,882c <__smakebuf_r+0x124>
    87b0:	04810004 	movi	r18,1024
    87b4:	10820014 	ori	r2,r2,2048
    87b8:	8080030d 	sth	r2,12(r16)
    87bc:	0027883a 	mov	r19,zero
    87c0:	8809883a 	mov	r4,r17
    87c4:	900b883a 	mov	r5,r18
    87c8:	00088c00 	call	88c0 <_malloc_r>
    87cc:	10002e26 	beq	r2,zero,8888 <__smakebuf_r+0x180>
    87d0:	80c0030b 	ldhu	r3,12(r16)
    87d4:	01000034 	movhi	r4,0
    87d8:	211f3f04 	addi	r4,r4,31996
    87dc:	89000f15 	stw	r4,60(r17)
    87e0:	18c02014 	ori	r3,r3,128
    87e4:	80c0030d 	sth	r3,12(r16)
    87e8:	80800015 	stw	r2,0(r16)
    87ec:	80800415 	stw	r2,16(r16)
    87f0:	84800515 	stw	r18,20(r16)
    87f4:	98001c1e 	bne	r19,zero,8868 <__smakebuf_r+0x160>
    87f8:	dfc01317 	ldw	ra,76(sp)
    87fc:	dcc01217 	ldw	r19,72(sp)
    8800:	dc801117 	ldw	r18,68(sp)
    8804:	dc401017 	ldw	r17,64(sp)
    8808:	dc000f17 	ldw	r16,60(sp)
    880c:	dec01404 	addi	sp,sp,80
    8810:	f800283a 	ret
    8814:	288010c4 	addi	r2,r5,67
    8818:	28800015 	stw	r2,0(r5)
    881c:	28800415 	stw	r2,16(r5)
    8820:	00800044 	movi	r2,1
    8824:	28800515 	stw	r2,20(r5)
    8828:	f800283a 	ret
    882c:	04801004 	movi	r18,64
    8830:	003fe006 	br	87b4 <__alt_mem_Flash_flash_data+0xf40087b4>
    8834:	81000a17 	ldw	r4,40(r16)
    8838:	00c00074 	movhi	r3,1
    883c:	18e8f204 	addi	r3,r3,-23608
    8840:	20ffc51e 	bne	r4,r3,8758 <__alt_mem_Flash_flash_data+0xf4008758>
    8844:	80c0030b 	ldhu	r3,12(r16)
    8848:	01010004 	movi	r4,1024
    884c:	81001315 	stw	r4,76(r16)
    8850:	1906b03a 	or	r3,r3,r4
    8854:	80c0030d 	sth	r3,12(r16)
    8858:	003fc206 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>
    885c:	0027883a 	mov	r19,zero
    8860:	04810004 	movi	r18,1024
    8864:	003fd606 	br	87c0 <__alt_mem_Flash_flash_data+0xf40087c0>
    8868:	8140038f 	ldh	r5,14(r16)
    886c:	8809883a 	mov	r4,r17
    8870:	000d4640 	call	d464 <_isatty_r>
    8874:	103fe026 	beq	r2,zero,87f8 <__alt_mem_Flash_flash_data+0xf40087f8>
    8878:	8080030b 	ldhu	r2,12(r16)
    887c:	10800054 	ori	r2,r2,1
    8880:	8080030d 	sth	r2,12(r16)
    8884:	003fdc06 	br	87f8 <__alt_mem_Flash_flash_data+0xf40087f8>
    8888:	8080030b 	ldhu	r2,12(r16)
    888c:	10c0800c 	andi	r3,r2,512
    8890:	183fd91e 	bne	r3,zero,87f8 <__alt_mem_Flash_flash_data+0xf40087f8>
    8894:	10800094 	ori	r2,r2,2
    8898:	80c010c4 	addi	r3,r16,67
    889c:	8080030d 	sth	r2,12(r16)
    88a0:	00800044 	movi	r2,1
    88a4:	80c00015 	stw	r3,0(r16)
    88a8:	80c00415 	stw	r3,16(r16)
    88ac:	80800515 	stw	r2,20(r16)
    88b0:	003fd106 	br	87f8 <__alt_mem_Flash_flash_data+0xf40087f8>
    88b4:	04c00044 	movi	r19,1
    88b8:	04810004 	movi	r18,1024
    88bc:	003fc006 	br	87c0 <__alt_mem_Flash_flash_data+0xf40087c0>

000088c0 <_malloc_r>:
    88c0:	defff504 	addi	sp,sp,-44
    88c4:	dc800315 	stw	r18,12(sp)
    88c8:	dfc00a15 	stw	ra,40(sp)
    88cc:	df000915 	stw	fp,36(sp)
    88d0:	ddc00815 	stw	r23,32(sp)
    88d4:	dd800715 	stw	r22,28(sp)
    88d8:	dd400615 	stw	r21,24(sp)
    88dc:	dd000515 	stw	r20,20(sp)
    88e0:	dcc00415 	stw	r19,16(sp)
    88e4:	dc400215 	stw	r17,8(sp)
    88e8:	dc000115 	stw	r16,4(sp)
    88ec:	288002c4 	addi	r2,r5,11
    88f0:	00c00584 	movi	r3,22
    88f4:	2025883a 	mov	r18,r4
    88f8:	18802a2e 	bgeu	r3,r2,89a4 <_malloc_r+0xe4>
    88fc:	047ffe04 	movi	r17,-8
    8900:	1462703a 	and	r17,r2,r17
    8904:	88009e16 	blt	r17,zero,8b80 <_malloc_r+0x2c0>
    8908:	89409d36 	bltu	r17,r5,8b80 <_malloc_r+0x2c0>
    890c:	0011cc80 	call	11cc8 <__malloc_lock>
    8910:	00807dc4 	movi	r2,503
    8914:	14402736 	bltu	r2,r17,89b4 <_malloc_r+0xf4>
    8918:	8806d0fa 	srli	r3,r17,3
    891c:	04c000b4 	movhi	r19,2
    8920:	9cfe2404 	addi	r19,r19,-1904
    8924:	18c5883a 	add	r2,r3,r3
    8928:	1085883a 	add	r2,r2,r2
    892c:	1085883a 	add	r2,r2,r2
    8930:	9885883a 	add	r2,r19,r2
    8934:	14000317 	ldw	r16,12(r2)
    8938:	80814a26 	beq	r16,r2,8e64 <_malloc_r+0x5a4>
    893c:	80c00117 	ldw	r3,4(r16)
    8940:	81000317 	ldw	r4,12(r16)
    8944:	00bfff04 	movi	r2,-4
    8948:	1884703a 	and	r2,r3,r2
    894c:	81400217 	ldw	r5,8(r16)
    8950:	8085883a 	add	r2,r16,r2
    8954:	10c00117 	ldw	r3,4(r2)
    8958:	29000315 	stw	r4,12(r5)
    895c:	21400215 	stw	r5,8(r4)
    8960:	18c00054 	ori	r3,r3,1
    8964:	10c00115 	stw	r3,4(r2)
    8968:	9009883a 	mov	r4,r18
    896c:	0011de80 	call	11de8 <__malloc_unlock>
    8970:	80800204 	addi	r2,r16,8
    8974:	dfc00a17 	ldw	ra,40(sp)
    8978:	df000917 	ldw	fp,36(sp)
    897c:	ddc00817 	ldw	r23,32(sp)
    8980:	dd800717 	ldw	r22,28(sp)
    8984:	dd400617 	ldw	r21,24(sp)
    8988:	dd000517 	ldw	r20,20(sp)
    898c:	dcc00417 	ldw	r19,16(sp)
    8990:	dc800317 	ldw	r18,12(sp)
    8994:	dc400217 	ldw	r17,8(sp)
    8998:	dc000117 	ldw	r16,4(sp)
    899c:	dec00b04 	addi	sp,sp,44
    89a0:	f800283a 	ret
    89a4:	04400404 	movi	r17,16
    89a8:	89407536 	bltu	r17,r5,8b80 <_malloc_r+0x2c0>
    89ac:	0011cc80 	call	11cc8 <__malloc_lock>
    89b0:	003fd906 	br	8918 <__alt_mem_Flash_flash_data+0xf4008918>
    89b4:	8806d27a 	srli	r3,r17,9
    89b8:	18007526 	beq	r3,zero,8b90 <_malloc_r+0x2d0>
    89bc:	00800104 	movi	r2,4
    89c0:	10c0ef36 	bltu	r2,r3,8d80 <_malloc_r+0x4c0>
    89c4:	8806d1ba 	srli	r3,r17,6
    89c8:	19c00e04 	addi	r7,r3,56
    89cc:	39cb883a 	add	r5,r7,r7
    89d0:	04c000b4 	movhi	r19,2
    89d4:	294b883a 	add	r5,r5,r5
    89d8:	9cfe2404 	addi	r19,r19,-1904
    89dc:	294b883a 	add	r5,r5,r5
    89e0:	994b883a 	add	r5,r19,r5
    89e4:	2c000317 	ldw	r16,12(r5)
    89e8:	2c000e26 	beq	r5,r16,8a24 <_malloc_r+0x164>
    89ec:	80800117 	ldw	r2,4(r16)
    89f0:	01bfff04 	movi	r6,-4
    89f4:	010003c4 	movi	r4,15
    89f8:	1184703a 	and	r2,r2,r6
    89fc:	1447c83a 	sub	r3,r2,r17
    8a00:	20c00716 	blt	r4,r3,8a20 <_malloc_r+0x160>
    8a04:	1800650e 	bge	r3,zero,8b9c <_malloc_r+0x2dc>
    8a08:	84000317 	ldw	r16,12(r16)
    8a0c:	2c000526 	beq	r5,r16,8a24 <_malloc_r+0x164>
    8a10:	80800117 	ldw	r2,4(r16)
    8a14:	1184703a 	and	r2,r2,r6
    8a18:	1447c83a 	sub	r3,r2,r17
    8a1c:	20fff90e 	bge	r4,r3,8a04 <__alt_mem_Flash_flash_data+0xf4008a04>
    8a20:	39ffffc4 	addi	r7,r7,-1
    8a24:	38c00044 	addi	r3,r7,1
    8a28:	018000b4 	movhi	r6,2
    8a2c:	9c000417 	ldw	r16,16(r19)
    8a30:	31be2404 	addi	r6,r6,-1904
    8a34:	32400204 	addi	r9,r6,8
    8a38:	82410326 	beq	r16,r9,8e48 <_malloc_r+0x588>
    8a3c:	81000117 	ldw	r4,4(r16)
    8a40:	00bfff04 	movi	r2,-4
    8a44:	208e703a 	and	r7,r4,r2
    8a48:	3c45c83a 	sub	r2,r7,r17
    8a4c:	010003c4 	movi	r4,15
    8a50:	2080ee16 	blt	r4,r2,8e0c <_malloc_r+0x54c>
    8a54:	32400515 	stw	r9,20(r6)
    8a58:	32400415 	stw	r9,16(r6)
    8a5c:	1000510e 	bge	r2,zero,8ba4 <_malloc_r+0x2e4>
    8a60:	00807fc4 	movi	r2,511
    8a64:	11c0ce36 	bltu	r2,r7,8da0 <_malloc_r+0x4e0>
    8a68:	3808d0fa 	srli	r4,r7,3
    8a6c:	01c00044 	movi	r7,1
    8a70:	30800117 	ldw	r2,4(r6)
    8a74:	210b883a 	add	r5,r4,r4
    8a78:	294b883a 	add	r5,r5,r5
    8a7c:	2009d0ba 	srai	r4,r4,2
    8a80:	294b883a 	add	r5,r5,r5
    8a84:	298b883a 	add	r5,r5,r6
    8a88:	2a000217 	ldw	r8,8(r5)
    8a8c:	3908983a 	sll	r4,r7,r4
    8a90:	81400315 	stw	r5,12(r16)
    8a94:	82000215 	stw	r8,8(r16)
    8a98:	2088b03a 	or	r4,r4,r2
    8a9c:	2c000215 	stw	r16,8(r5)
    8aa0:	31000115 	stw	r4,4(r6)
    8aa4:	44000315 	stw	r16,12(r8)
    8aa8:	1805d0ba 	srai	r2,r3,2
    8aac:	01400044 	movi	r5,1
    8ab0:	288a983a 	sll	r5,r5,r2
    8ab4:	21404336 	bltu	r4,r5,8bc4 <_malloc_r+0x304>
    8ab8:	2144703a 	and	r2,r4,r5
    8abc:	10000a1e 	bne	r2,zero,8ae8 <_malloc_r+0x228>
    8ac0:	00bfff04 	movi	r2,-4
    8ac4:	294b883a 	add	r5,r5,r5
    8ac8:	1886703a 	and	r3,r3,r2
    8acc:	2144703a 	and	r2,r4,r5
    8ad0:	18c00104 	addi	r3,r3,4
    8ad4:	1000041e 	bne	r2,zero,8ae8 <_malloc_r+0x228>
    8ad8:	294b883a 	add	r5,r5,r5
    8adc:	2144703a 	and	r2,r4,r5
    8ae0:	18c00104 	addi	r3,r3,4
    8ae4:	103ffc26 	beq	r2,zero,8ad8 <__alt_mem_Flash_flash_data+0xf4008ad8>
    8ae8:	023fff04 	movi	r8,-4
    8aec:	01c003c4 	movi	r7,15
    8af0:	18c5883a 	add	r2,r3,r3
    8af4:	1085883a 	add	r2,r2,r2
    8af8:	1085883a 	add	r2,r2,r2
    8afc:	9895883a 	add	r10,r19,r2
    8b00:	52c00304 	addi	r11,r10,12
    8b04:	1819883a 	mov	r12,r3
    8b08:	5c000017 	ldw	r16,0(r11)
    8b0c:	59bffd04 	addi	r6,r11,-12
    8b10:	8180041e 	bne	r16,r6,8b24 <_malloc_r+0x264>
    8b14:	0000ce06 	br	8e50 <_malloc_r+0x590>
    8b18:	2000d70e 	bge	r4,zero,8e78 <_malloc_r+0x5b8>
    8b1c:	84000317 	ldw	r16,12(r16)
    8b20:	8180cb26 	beq	r16,r6,8e50 <_malloc_r+0x590>
    8b24:	80800117 	ldw	r2,4(r16)
    8b28:	1204703a 	and	r2,r2,r8
    8b2c:	1449c83a 	sub	r4,r2,r17
    8b30:	393ff90e 	bge	r7,r4,8b18 <__alt_mem_Flash_flash_data+0xf4008b18>
    8b34:	80800317 	ldw	r2,12(r16)
    8b38:	80c00217 	ldw	r3,8(r16)
    8b3c:	89400054 	ori	r5,r17,1
    8b40:	81400115 	stw	r5,4(r16)
    8b44:	18800315 	stw	r2,12(r3)
    8b48:	10c00215 	stw	r3,8(r2)
    8b4c:	8463883a 	add	r17,r16,r17
    8b50:	9c400515 	stw	r17,20(r19)
    8b54:	9c400415 	stw	r17,16(r19)
    8b58:	20800054 	ori	r2,r4,1
    8b5c:	88800115 	stw	r2,4(r17)
    8b60:	8a400315 	stw	r9,12(r17)
    8b64:	8a400215 	stw	r9,8(r17)
    8b68:	8923883a 	add	r17,r17,r4
    8b6c:	89000015 	stw	r4,0(r17)
    8b70:	9009883a 	mov	r4,r18
    8b74:	0011de80 	call	11de8 <__malloc_unlock>
    8b78:	80800204 	addi	r2,r16,8
    8b7c:	003f7d06 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8b80:	00800304 	movi	r2,12
    8b84:	90800015 	stw	r2,0(r18)
    8b88:	0005883a 	mov	r2,zero
    8b8c:	003f7906 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8b90:	01401f84 	movi	r5,126
    8b94:	01c00fc4 	movi	r7,63
    8b98:	003f8d06 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8b9c:	81000317 	ldw	r4,12(r16)
    8ba0:	003f6a06 	br	894c <__alt_mem_Flash_flash_data+0xf400894c>
    8ba4:	81c5883a 	add	r2,r16,r7
    8ba8:	10c00117 	ldw	r3,4(r2)
    8bac:	9009883a 	mov	r4,r18
    8bb0:	18c00054 	ori	r3,r3,1
    8bb4:	10c00115 	stw	r3,4(r2)
    8bb8:	0011de80 	call	11de8 <__malloc_unlock>
    8bbc:	80800204 	addi	r2,r16,8
    8bc0:	003f6c06 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8bc4:	9c000217 	ldw	r16,8(r19)
    8bc8:	00bfff04 	movi	r2,-4
    8bcc:	85800117 	ldw	r22,4(r16)
    8bd0:	b0ac703a 	and	r22,r22,r2
    8bd4:	b4400336 	bltu	r22,r17,8be4 <_malloc_r+0x324>
    8bd8:	b445c83a 	sub	r2,r22,r17
    8bdc:	00c003c4 	movi	r3,15
    8be0:	18805d16 	blt	r3,r2,8d58 <_malloc_r+0x498>
    8be4:	05c000b4 	movhi	r23,2
    8be8:	008000b4 	movhi	r2,2
    8bec:	bdc55604 	addi	r23,r23,5464
    8bf0:	108e2604 	addi	r2,r2,14488
    8bf4:	15400017 	ldw	r21,0(r2)
    8bf8:	b9000017 	ldw	r4,0(r23)
    8bfc:	00ffffc4 	movi	r3,-1
    8c00:	858d883a 	add	r6,r16,r22
    8c04:	8d6b883a 	add	r21,r17,r21
    8c08:	20c0e426 	beq	r4,r3,8f9c <_malloc_r+0x6dc>
    8c0c:	ad4403c4 	addi	r21,r21,4111
    8c10:	00fc0004 	movi	r3,-4096
    8c14:	a8ea703a 	and	r21,r21,r3
    8c18:	9009883a 	mov	r4,r18
    8c1c:	a80b883a 	mov	r5,r21
    8c20:	d9800015 	stw	r6,0(sp)
    8c24:	000a29c0 	call	a29c <_sbrk_r>
    8c28:	00ffffc4 	movi	r3,-1
    8c2c:	1029883a 	mov	r20,r2
    8c30:	d9800017 	ldw	r6,0(sp)
    8c34:	10c0a426 	beq	r2,r3,8ec8 <_malloc_r+0x608>
    8c38:	1180a236 	bltu	r2,r6,8ec4 <_malloc_r+0x604>
    8c3c:	070000b4 	movhi	fp,2
    8c40:	e70e5304 	addi	fp,fp,14668
    8c44:	e0c00017 	ldw	r3,0(fp)
    8c48:	a8c7883a 	add	r3,r21,r3
    8c4c:	e0c00015 	stw	r3,0(fp)
    8c50:	3500da26 	beq	r6,r20,8fbc <_malloc_r+0x6fc>
    8c54:	b9000017 	ldw	r4,0(r23)
    8c58:	00bfffc4 	movi	r2,-1
    8c5c:	2080e426 	beq	r4,r2,8ff0 <_malloc_r+0x730>
    8c60:	a185c83a 	sub	r2,r20,r6
    8c64:	1885883a 	add	r2,r3,r2
    8c68:	e0800015 	stw	r2,0(fp)
    8c6c:	a0c001cc 	andi	r3,r20,7
    8c70:	1800b526 	beq	r3,zero,8f48 <_malloc_r+0x688>
    8c74:	a0e9c83a 	sub	r20,r20,r3
    8c78:	00840204 	movi	r2,4104
    8c7c:	a5000204 	addi	r20,r20,8
    8c80:	10c7c83a 	sub	r3,r2,r3
    8c84:	a545883a 	add	r2,r20,r21
    8c88:	1083ffcc 	andi	r2,r2,4095
    8c8c:	18abc83a 	sub	r21,r3,r2
    8c90:	9009883a 	mov	r4,r18
    8c94:	a80b883a 	mov	r5,r21
    8c98:	000a29c0 	call	a29c <_sbrk_r>
    8c9c:	00ffffc4 	movi	r3,-1
    8ca0:	10c0d026 	beq	r2,r3,8fe4 <_malloc_r+0x724>
    8ca4:	1507c83a 	sub	r3,r2,r20
    8ca8:	a8c7883a 	add	r3,r21,r3
    8cac:	18c00054 	ori	r3,r3,1
    8cb0:	e0800017 	ldw	r2,0(fp)
    8cb4:	9d000215 	stw	r20,8(r19)
    8cb8:	a0c00115 	stw	r3,4(r20)
    8cbc:	a887883a 	add	r3,r21,r2
    8cc0:	e0c00015 	stw	r3,0(fp)
    8cc4:	84c00e26 	beq	r16,r19,8d00 <_malloc_r+0x440>
    8cc8:	018003c4 	movi	r6,15
    8ccc:	3580a02e 	bgeu	r6,r22,8f50 <_malloc_r+0x690>
    8cd0:	81400117 	ldw	r5,4(r16)
    8cd4:	013ffe04 	movi	r4,-8
    8cd8:	b0bffd04 	addi	r2,r22,-12
    8cdc:	1104703a 	and	r2,r2,r4
    8ce0:	2900004c 	andi	r4,r5,1
    8ce4:	1108b03a 	or	r4,r2,r4
    8ce8:	81000115 	stw	r4,4(r16)
    8cec:	01400144 	movi	r5,5
    8cf0:	8089883a 	add	r4,r16,r2
    8cf4:	21400115 	stw	r5,4(r4)
    8cf8:	21400215 	stw	r5,8(r4)
    8cfc:	3080c036 	bltu	r6,r2,9000 <_malloc_r+0x740>
    8d00:	008000b4 	movhi	r2,2
    8d04:	108e2504 	addi	r2,r2,14484
    8d08:	11000017 	ldw	r4,0(r2)
    8d0c:	20c0012e 	bgeu	r4,r3,8d14 <_malloc_r+0x454>
    8d10:	10c00015 	stw	r3,0(r2)
    8d14:	008000b4 	movhi	r2,2
    8d18:	108e2404 	addi	r2,r2,14480
    8d1c:	11000017 	ldw	r4,0(r2)
    8d20:	9c000217 	ldw	r16,8(r19)
    8d24:	20c0012e 	bgeu	r4,r3,8d2c <_malloc_r+0x46c>
    8d28:	10c00015 	stw	r3,0(r2)
    8d2c:	80c00117 	ldw	r3,4(r16)
    8d30:	00bfff04 	movi	r2,-4
    8d34:	1886703a 	and	r3,r3,r2
    8d38:	1c45c83a 	sub	r2,r3,r17
    8d3c:	1c400236 	bltu	r3,r17,8d48 <_malloc_r+0x488>
    8d40:	00c003c4 	movi	r3,15
    8d44:	18800416 	blt	r3,r2,8d58 <_malloc_r+0x498>
    8d48:	9009883a 	mov	r4,r18
    8d4c:	0011de80 	call	11de8 <__malloc_unlock>
    8d50:	0005883a 	mov	r2,zero
    8d54:	003f0706 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8d58:	88c00054 	ori	r3,r17,1
    8d5c:	80c00115 	stw	r3,4(r16)
    8d60:	8463883a 	add	r17,r16,r17
    8d64:	10800054 	ori	r2,r2,1
    8d68:	9c400215 	stw	r17,8(r19)
    8d6c:	88800115 	stw	r2,4(r17)
    8d70:	9009883a 	mov	r4,r18
    8d74:	0011de80 	call	11de8 <__malloc_unlock>
    8d78:	80800204 	addi	r2,r16,8
    8d7c:	003efd06 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8d80:	00800504 	movi	r2,20
    8d84:	10c0482e 	bgeu	r2,r3,8ea8 <_malloc_r+0x5e8>
    8d88:	00801504 	movi	r2,84
    8d8c:	10c06836 	bltu	r2,r3,8f30 <_malloc_r+0x670>
    8d90:	8806d33a 	srli	r3,r17,12
    8d94:	19c01b84 	addi	r7,r3,110
    8d98:	39cb883a 	add	r5,r7,r7
    8d9c:	003f0c06 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8da0:	3804d27a 	srli	r2,r7,9
    8da4:	01000104 	movi	r4,4
    8da8:	2080422e 	bgeu	r4,r2,8eb4 <_malloc_r+0x5f4>
    8dac:	01000504 	movi	r4,20
    8db0:	20807c36 	bltu	r4,r2,8fa4 <_malloc_r+0x6e4>
    8db4:	110016c4 	addi	r4,r2,91
    8db8:	210b883a 	add	r5,r4,r4
    8dbc:	294b883a 	add	r5,r5,r5
    8dc0:	294b883a 	add	r5,r5,r5
    8dc4:	994b883a 	add	r5,r19,r5
    8dc8:	28800217 	ldw	r2,8(r5)
    8dcc:	020000b4 	movhi	r8,2
    8dd0:	423e2404 	addi	r8,r8,-1904
    8dd4:	11406326 	beq	r2,r5,8f64 <_malloc_r+0x6a4>
    8dd8:	01bfff04 	movi	r6,-4
    8ddc:	11000117 	ldw	r4,4(r2)
    8de0:	2188703a 	and	r4,r4,r6
    8de4:	3900022e 	bgeu	r7,r4,8df0 <_malloc_r+0x530>
    8de8:	10800217 	ldw	r2,8(r2)
    8dec:	28bffb1e 	bne	r5,r2,8ddc <__alt_mem_Flash_flash_data+0xf4008ddc>
    8df0:	11800317 	ldw	r6,12(r2)
    8df4:	99000117 	ldw	r4,4(r19)
    8df8:	81800315 	stw	r6,12(r16)
    8dfc:	80800215 	stw	r2,8(r16)
    8e00:	34000215 	stw	r16,8(r6)
    8e04:	14000315 	stw	r16,12(r2)
    8e08:	003f2706 	br	8aa8 <__alt_mem_Flash_flash_data+0xf4008aa8>
    8e0c:	88c00054 	ori	r3,r17,1
    8e10:	80c00115 	stw	r3,4(r16)
    8e14:	8463883a 	add	r17,r16,r17
    8e18:	34400515 	stw	r17,20(r6)
    8e1c:	34400415 	stw	r17,16(r6)
    8e20:	10c00054 	ori	r3,r2,1
    8e24:	8a400315 	stw	r9,12(r17)
    8e28:	8a400215 	stw	r9,8(r17)
    8e2c:	88c00115 	stw	r3,4(r17)
    8e30:	88a3883a 	add	r17,r17,r2
    8e34:	88800015 	stw	r2,0(r17)
    8e38:	9009883a 	mov	r4,r18
    8e3c:	0011de80 	call	11de8 <__malloc_unlock>
    8e40:	80800204 	addi	r2,r16,8
    8e44:	003ecb06 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8e48:	31000117 	ldw	r4,4(r6)
    8e4c:	003f1606 	br	8aa8 <__alt_mem_Flash_flash_data+0xf4008aa8>
    8e50:	63000044 	addi	r12,r12,1
    8e54:	608000cc 	andi	r2,r12,3
    8e58:	5ac00204 	addi	r11,r11,8
    8e5c:	103f2a1e 	bne	r2,zero,8b08 <__alt_mem_Flash_flash_data+0xf4008b08>
    8e60:	00002106 	br	8ee8 <_malloc_r+0x628>
    8e64:	80800204 	addi	r2,r16,8
    8e68:	84000517 	ldw	r16,20(r16)
    8e6c:	143eb31e 	bne	r2,r16,893c <__alt_mem_Flash_flash_data+0xf400893c>
    8e70:	18c00084 	addi	r3,r3,2
    8e74:	003eec06 	br	8a28 <__alt_mem_Flash_flash_data+0xf4008a28>
    8e78:	8085883a 	add	r2,r16,r2
    8e7c:	10c00117 	ldw	r3,4(r2)
    8e80:	81000317 	ldw	r4,12(r16)
    8e84:	81400217 	ldw	r5,8(r16)
    8e88:	18c00054 	ori	r3,r3,1
    8e8c:	10c00115 	stw	r3,4(r2)
    8e90:	29000315 	stw	r4,12(r5)
    8e94:	21400215 	stw	r5,8(r4)
    8e98:	9009883a 	mov	r4,r18
    8e9c:	0011de80 	call	11de8 <__malloc_unlock>
    8ea0:	80800204 	addi	r2,r16,8
    8ea4:	003eb306 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8ea8:	19c016c4 	addi	r7,r3,91
    8eac:	39cb883a 	add	r5,r7,r7
    8eb0:	003ec706 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8eb4:	3804d1ba 	srli	r2,r7,6
    8eb8:	11000e04 	addi	r4,r2,56
    8ebc:	210b883a 	add	r5,r4,r4
    8ec0:	003fbe06 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    8ec4:	84ff5d26 	beq	r16,r19,8c3c <__alt_mem_Flash_flash_data+0xf4008c3c>
    8ec8:	9c000217 	ldw	r16,8(r19)
    8ecc:	00bfff04 	movi	r2,-4
    8ed0:	80c00117 	ldw	r3,4(r16)
    8ed4:	1886703a 	and	r3,r3,r2
    8ed8:	003f9706 	br	8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    8edc:	52800017 	ldw	r10,0(r10)
    8ee0:	18ffffc4 	addi	r3,r3,-1
    8ee4:	50805c1e 	bne	r10,r2,9058 <_malloc_r+0x798>
    8ee8:	190000cc 	andi	r4,r3,3
    8eec:	50bffe04 	addi	r2,r10,-8
    8ef0:	203ffa1e 	bne	r4,zero,8edc <__alt_mem_Flash_flash_data+0xf4008edc>
    8ef4:	98800117 	ldw	r2,4(r19)
    8ef8:	0146303a 	nor	r3,zero,r5
    8efc:	1884703a 	and	r2,r3,r2
    8f00:	98800115 	stw	r2,4(r19)
    8f04:	294b883a 	add	r5,r5,r5
    8f08:	117f2e36 	bltu	r2,r5,8bc4 <__alt_mem_Flash_flash_data+0xf4008bc4>
    8f0c:	283f2d26 	beq	r5,zero,8bc4 <__alt_mem_Flash_flash_data+0xf4008bc4>
    8f10:	1146703a 	and	r3,r2,r5
    8f14:	1800521e 	bne	r3,zero,9060 <_malloc_r+0x7a0>
    8f18:	6007883a 	mov	r3,r12
    8f1c:	294b883a 	add	r5,r5,r5
    8f20:	1148703a 	and	r4,r2,r5
    8f24:	18c00104 	addi	r3,r3,4
    8f28:	203ffc26 	beq	r4,zero,8f1c <__alt_mem_Flash_flash_data+0xf4008f1c>
    8f2c:	003ef006 	br	8af0 <__alt_mem_Flash_flash_data+0xf4008af0>
    8f30:	00805504 	movi	r2,340
    8f34:	10c01336 	bltu	r2,r3,8f84 <_malloc_r+0x6c4>
    8f38:	8806d3fa 	srli	r3,r17,15
    8f3c:	19c01dc4 	addi	r7,r3,119
    8f40:	39cb883a 	add	r5,r7,r7
    8f44:	003ea206 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8f48:	00c40004 	movi	r3,4096
    8f4c:	003f4d06 	br	8c84 <__alt_mem_Flash_flash_data+0xf4008c84>
    8f50:	00800044 	movi	r2,1
    8f54:	a0800115 	stw	r2,4(r20)
    8f58:	a021883a 	mov	r16,r20
    8f5c:	0007883a 	mov	r3,zero
    8f60:	003f7506 	br	8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    8f64:	200bd0ba 	srai	r5,r4,2
    8f68:	01800044 	movi	r6,1
    8f6c:	41000117 	ldw	r4,4(r8)
    8f70:	314a983a 	sll	r5,r6,r5
    8f74:	100d883a 	mov	r6,r2
    8f78:	2908b03a 	or	r4,r5,r4
    8f7c:	41000115 	stw	r4,4(r8)
    8f80:	003f9d06 	br	8df8 <__alt_mem_Flash_flash_data+0xf4008df8>
    8f84:	00815504 	movi	r2,1364
    8f88:	10c01336 	bltu	r2,r3,8fd8 <_malloc_r+0x718>
    8f8c:	8806d4ba 	srli	r3,r17,18
    8f90:	19c01f04 	addi	r7,r3,124
    8f94:	39cb883a 	add	r5,r7,r7
    8f98:	003e8d06 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8f9c:	ad400404 	addi	r21,r21,16
    8fa0:	003f1d06 	br	8c18 <__alt_mem_Flash_flash_data+0xf4008c18>
    8fa4:	01001504 	movi	r4,84
    8fa8:	20801c36 	bltu	r4,r2,901c <_malloc_r+0x75c>
    8fac:	3804d33a 	srli	r2,r7,12
    8fb0:	11001b84 	addi	r4,r2,110
    8fb4:	210b883a 	add	r5,r4,r4
    8fb8:	003f8006 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    8fbc:	3083ffcc 	andi	r2,r6,4095
    8fc0:	103f241e 	bne	r2,zero,8c54 <__alt_mem_Flash_flash_data+0xf4008c54>
    8fc4:	99000217 	ldw	r4,8(r19)
    8fc8:	ad85883a 	add	r2,r21,r22
    8fcc:	10800054 	ori	r2,r2,1
    8fd0:	20800115 	stw	r2,4(r4)
    8fd4:	003f4a06 	br	8d00 <__alt_mem_Flash_flash_data+0xf4008d00>
    8fd8:	01403f04 	movi	r5,252
    8fdc:	01c01f84 	movi	r7,126
    8fe0:	003e7b06 	br	89d0 <__alt_mem_Flash_flash_data+0xf40089d0>
    8fe4:	00c00044 	movi	r3,1
    8fe8:	002b883a 	mov	r21,zero
    8fec:	003f3006 	br	8cb0 <__alt_mem_Flash_flash_data+0xf4008cb0>
    8ff0:	008000b4 	movhi	r2,2
    8ff4:	10855604 	addi	r2,r2,5464
    8ff8:	15000015 	stw	r20,0(r2)
    8ffc:	003f1b06 	br	8c6c <__alt_mem_Flash_flash_data+0xf4008c6c>
    9000:	9009883a 	mov	r4,r18
    9004:	81400204 	addi	r5,r16,8
    9008:	00081b00 	call	81b0 <_free_r>
    900c:	008000b4 	movhi	r2,2
    9010:	108e5304 	addi	r2,r2,14668
    9014:	10c00017 	ldw	r3,0(r2)
    9018:	003f3906 	br	8d00 <__alt_mem_Flash_flash_data+0xf4008d00>
    901c:	01005504 	movi	r4,340
    9020:	20800436 	bltu	r4,r2,9034 <_malloc_r+0x774>
    9024:	3804d3fa 	srli	r2,r7,15
    9028:	11001dc4 	addi	r4,r2,119
    902c:	210b883a 	add	r5,r4,r4
    9030:	003f6206 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    9034:	01015504 	movi	r4,1364
    9038:	20800436 	bltu	r4,r2,904c <_malloc_r+0x78c>
    903c:	3804d4ba 	srli	r2,r7,18
    9040:	11001f04 	addi	r4,r2,124
    9044:	210b883a 	add	r5,r4,r4
    9048:	003f5c06 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    904c:	01403f04 	movi	r5,252
    9050:	01001f84 	movi	r4,126
    9054:	003f5906 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    9058:	98800117 	ldw	r2,4(r19)
    905c:	003fa906 	br	8f04 <__alt_mem_Flash_flash_data+0xf4008f04>
    9060:	6007883a 	mov	r3,r12
    9064:	003ea206 	br	8af0 <__alt_mem_Flash_flash_data+0xf4008af0>

00009068 <memchr>:
    9068:	208000cc 	andi	r2,r4,3
    906c:	280f883a 	mov	r7,r5
    9070:	10003526 	beq	r2,zero,9148 <memchr+0xe0>
    9074:	30bfffc4 	addi	r2,r6,-1
    9078:	30001b26 	beq	r6,zero,90e8 <memchr+0x80>
    907c:	21800003 	ldbu	r6,0(r4)
    9080:	28c03fcc 	andi	r3,r5,255
    9084:	30c01a26 	beq	r6,r3,90f0 <memchr+0x88>
    9088:	180d883a 	mov	r6,r3
    908c:	00000406 	br	90a0 <memchr+0x38>
    9090:	10001526 	beq	r2,zero,90e8 <memchr+0x80>
    9094:	20c00003 	ldbu	r3,0(r4)
    9098:	10bfffc4 	addi	r2,r2,-1
    909c:	19801426 	beq	r3,r6,90f0 <memchr+0x88>
    90a0:	21000044 	addi	r4,r4,1
    90a4:	20c000cc 	andi	r3,r4,3
    90a8:	183ff91e 	bne	r3,zero,9090 <__alt_mem_Flash_flash_data+0xf4009090>
    90ac:	024000c4 	movi	r9,3
    90b0:	48801136 	bltu	r9,r2,90f8 <memchr+0x90>
    90b4:	10000c26 	beq	r2,zero,90e8 <memchr+0x80>
    90b8:	20c00003 	ldbu	r3,0(r4)
    90bc:	29403fcc 	andi	r5,r5,255
    90c0:	19400b26 	beq	r3,r5,90f0 <memchr+0x88>
    90c4:	20c00044 	addi	r3,r4,1
    90c8:	2085883a 	add	r2,r4,r2
    90cc:	39803fcc 	andi	r6,r7,255
    90d0:	00000306 	br	90e0 <memchr+0x78>
    90d4:	18c00044 	addi	r3,r3,1
    90d8:	197fffc3 	ldbu	r5,-1(r3)
    90dc:	29800426 	beq	r5,r6,90f0 <memchr+0x88>
    90e0:	1809883a 	mov	r4,r3
    90e4:	18bffb1e 	bne	r3,r2,90d4 <__alt_mem_Flash_flash_data+0xf40090d4>
    90e8:	0005883a 	mov	r2,zero
    90ec:	f800283a 	ret
    90f0:	2005883a 	mov	r2,r4
    90f4:	f800283a 	ret
    90f8:	28c03fcc 	andi	r3,r5,255
    90fc:	1810923a 	slli	r8,r3,8
    9100:	02ffbff4 	movhi	r11,65279
    9104:	02a02074 	movhi	r10,32897
    9108:	40c6b03a 	or	r3,r8,r3
    910c:	1810943a 	slli	r8,r3,16
    9110:	5affbfc4 	addi	r11,r11,-257
    9114:	52a02004 	addi	r10,r10,-32640
    9118:	40d0b03a 	or	r8,r8,r3
    911c:	20c00017 	ldw	r3,0(r4)
    9120:	40c6f03a 	xor	r3,r8,r3
    9124:	1acd883a 	add	r6,r3,r11
    9128:	00c6303a 	nor	r3,zero,r3
    912c:	30c6703a 	and	r3,r6,r3
    9130:	1a86703a 	and	r3,r3,r10
    9134:	183fdf1e 	bne	r3,zero,90b4 <__alt_mem_Flash_flash_data+0xf40090b4>
    9138:	10bfff04 	addi	r2,r2,-4
    913c:	21000104 	addi	r4,r4,4
    9140:	48bff636 	bltu	r9,r2,911c <__alt_mem_Flash_flash_data+0xf400911c>
    9144:	003fdb06 	br	90b4 <__alt_mem_Flash_flash_data+0xf40090b4>
    9148:	3005883a 	mov	r2,r6
    914c:	003fd706 	br	90ac <__alt_mem_Flash_flash_data+0xf40090ac>

00009150 <memcpy>:
    9150:	deffff04 	addi	sp,sp,-4
    9154:	dc000015 	stw	r16,0(sp)
    9158:	00c003c4 	movi	r3,15
    915c:	2005883a 	mov	r2,r4
    9160:	1980432e 	bgeu	r3,r6,9270 <memcpy+0x120>
    9164:	2146b03a 	or	r3,r4,r5
    9168:	18c000cc 	andi	r3,r3,3
    916c:	1800421e 	bne	r3,zero,9278 <memcpy+0x128>
    9170:	343ffc04 	addi	r16,r6,-16
    9174:	8020d13a 	srli	r16,r16,4
    9178:	28c00104 	addi	r3,r5,4
    917c:	23400104 	addi	r13,r4,4
    9180:	801e913a 	slli	r15,r16,4
    9184:	2b000204 	addi	r12,r5,8
    9188:	22c00204 	addi	r11,r4,8
    918c:	7bc00504 	addi	r15,r15,20
    9190:	2a800304 	addi	r10,r5,12
    9194:	22400304 	addi	r9,r4,12
    9198:	2bdf883a 	add	r15,r5,r15
    919c:	2811883a 	mov	r8,r5
    91a0:	200f883a 	mov	r7,r4
    91a4:	41000017 	ldw	r4,0(r8)
    91a8:	39c00404 	addi	r7,r7,16
    91ac:	18c00404 	addi	r3,r3,16
    91b0:	393ffc15 	stw	r4,-16(r7)
    91b4:	1bbffc17 	ldw	r14,-16(r3)
    91b8:	6b400404 	addi	r13,r13,16
    91bc:	5ac00404 	addi	r11,r11,16
    91c0:	6bbffc15 	stw	r14,-16(r13)
    91c4:	63800017 	ldw	r14,0(r12)
    91c8:	4a400404 	addi	r9,r9,16
    91cc:	42000404 	addi	r8,r8,16
    91d0:	5bbffc15 	stw	r14,-16(r11)
    91d4:	53800017 	ldw	r14,0(r10)
    91d8:	63000404 	addi	r12,r12,16
    91dc:	52800404 	addi	r10,r10,16
    91e0:	4bbffc15 	stw	r14,-16(r9)
    91e4:	1bffef1e 	bne	r3,r15,91a4 <__alt_mem_Flash_flash_data+0xf40091a4>
    91e8:	81c00044 	addi	r7,r16,1
    91ec:	380e913a 	slli	r7,r7,4
    91f0:	310003cc 	andi	r4,r6,15
    91f4:	02c000c4 	movi	r11,3
    91f8:	11c7883a 	add	r3,r2,r7
    91fc:	29cb883a 	add	r5,r5,r7
    9200:	59001f2e 	bgeu	r11,r4,9280 <memcpy+0x130>
    9204:	1813883a 	mov	r9,r3
    9208:	2811883a 	mov	r8,r5
    920c:	200f883a 	mov	r7,r4
    9210:	42800017 	ldw	r10,0(r8)
    9214:	4a400104 	addi	r9,r9,4
    9218:	39ffff04 	addi	r7,r7,-4
    921c:	4abfff15 	stw	r10,-4(r9)
    9220:	42000104 	addi	r8,r8,4
    9224:	59fffa36 	bltu	r11,r7,9210 <__alt_mem_Flash_flash_data+0xf4009210>
    9228:	213fff04 	addi	r4,r4,-4
    922c:	2008d0ba 	srli	r4,r4,2
    9230:	318000cc 	andi	r6,r6,3
    9234:	21000044 	addi	r4,r4,1
    9238:	2109883a 	add	r4,r4,r4
    923c:	2109883a 	add	r4,r4,r4
    9240:	1907883a 	add	r3,r3,r4
    9244:	290b883a 	add	r5,r5,r4
    9248:	30000626 	beq	r6,zero,9264 <memcpy+0x114>
    924c:	198d883a 	add	r6,r3,r6
    9250:	29c00003 	ldbu	r7,0(r5)
    9254:	18c00044 	addi	r3,r3,1
    9258:	29400044 	addi	r5,r5,1
    925c:	19ffffc5 	stb	r7,-1(r3)
    9260:	19bffb1e 	bne	r3,r6,9250 <__alt_mem_Flash_flash_data+0xf4009250>
    9264:	dc000017 	ldw	r16,0(sp)
    9268:	dec00104 	addi	sp,sp,4
    926c:	f800283a 	ret
    9270:	2007883a 	mov	r3,r4
    9274:	003ff406 	br	9248 <__alt_mem_Flash_flash_data+0xf4009248>
    9278:	2007883a 	mov	r3,r4
    927c:	003ff306 	br	924c <__alt_mem_Flash_flash_data+0xf400924c>
    9280:	200d883a 	mov	r6,r4
    9284:	003ff006 	br	9248 <__alt_mem_Flash_flash_data+0xf4009248>

00009288 <_Balloc>:
    9288:	20801317 	ldw	r2,76(r4)
    928c:	defffc04 	addi	sp,sp,-16
    9290:	dc400115 	stw	r17,4(sp)
    9294:	dc000015 	stw	r16,0(sp)
    9298:	dfc00315 	stw	ra,12(sp)
    929c:	dc800215 	stw	r18,8(sp)
    92a0:	2023883a 	mov	r17,r4
    92a4:	2821883a 	mov	r16,r5
    92a8:	10000f26 	beq	r2,zero,92e8 <_Balloc+0x60>
    92ac:	8407883a 	add	r3,r16,r16
    92b0:	18c7883a 	add	r3,r3,r3
    92b4:	10c7883a 	add	r3,r2,r3
    92b8:	18800017 	ldw	r2,0(r3)
    92bc:	10001126 	beq	r2,zero,9304 <_Balloc+0x7c>
    92c0:	11000017 	ldw	r4,0(r2)
    92c4:	19000015 	stw	r4,0(r3)
    92c8:	10000415 	stw	zero,16(r2)
    92cc:	10000315 	stw	zero,12(r2)
    92d0:	dfc00317 	ldw	ra,12(sp)
    92d4:	dc800217 	ldw	r18,8(sp)
    92d8:	dc400117 	ldw	r17,4(sp)
    92dc:	dc000017 	ldw	r16,0(sp)
    92e0:	dec00404 	addi	sp,sp,16
    92e4:	f800283a 	ret
    92e8:	01400104 	movi	r5,4
    92ec:	01800844 	movi	r6,33
    92f0:	000cba40 	call	cba4 <_calloc_r>
    92f4:	88801315 	stw	r2,76(r17)
    92f8:	103fec1e 	bne	r2,zero,92ac <__alt_mem_Flash_flash_data+0xf40092ac>
    92fc:	0005883a 	mov	r2,zero
    9300:	003ff306 	br	92d0 <__alt_mem_Flash_flash_data+0xf40092d0>
    9304:	01400044 	movi	r5,1
    9308:	2c24983a 	sll	r18,r5,r16
    930c:	8809883a 	mov	r4,r17
    9310:	91800144 	addi	r6,r18,5
    9314:	318d883a 	add	r6,r6,r6
    9318:	318d883a 	add	r6,r6,r6
    931c:	000cba40 	call	cba4 <_calloc_r>
    9320:	103ff626 	beq	r2,zero,92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    9324:	14000115 	stw	r16,4(r2)
    9328:	14800215 	stw	r18,8(r2)
    932c:	003fe606 	br	92c8 <__alt_mem_Flash_flash_data+0xf40092c8>

00009330 <_Bfree>:
    9330:	28000826 	beq	r5,zero,9354 <_Bfree+0x24>
    9334:	28c00117 	ldw	r3,4(r5)
    9338:	20801317 	ldw	r2,76(r4)
    933c:	18c7883a 	add	r3,r3,r3
    9340:	18c7883a 	add	r3,r3,r3
    9344:	10c5883a 	add	r2,r2,r3
    9348:	10c00017 	ldw	r3,0(r2)
    934c:	28c00015 	stw	r3,0(r5)
    9350:	11400015 	stw	r5,0(r2)
    9354:	f800283a 	ret

00009358 <__multadd>:
    9358:	defffa04 	addi	sp,sp,-24
    935c:	dc000115 	stw	r16,4(sp)
    9360:	2c000417 	ldw	r16,16(r5)
    9364:	dc800315 	stw	r18,12(sp)
    9368:	dc400215 	stw	r17,8(sp)
    936c:	dfc00515 	stw	ra,20(sp)
    9370:	dcc00415 	stw	r19,16(sp)
    9374:	2823883a 	mov	r17,r5
    9378:	2025883a 	mov	r18,r4
    937c:	2a400504 	addi	r9,r5,20
    9380:	0015883a 	mov	r10,zero
    9384:	4a000017 	ldw	r8,0(r9)
    9388:	4a400104 	addi	r9,r9,4
    938c:	52800044 	addi	r10,r10,1
    9390:	40ffffcc 	andi	r3,r8,65535
    9394:	1987383a 	mul	r3,r3,r6
    9398:	4010d43a 	srli	r8,r8,16
    939c:	19cf883a 	add	r7,r3,r7
    93a0:	4191383a 	mul	r8,r8,r6
    93a4:	3816d43a 	srli	r11,r7,16
    93a8:	38ffffcc 	andi	r3,r7,65535
    93ac:	5a0f883a 	add	r7,r11,r8
    93b0:	3810943a 	slli	r8,r7,16
    93b4:	380ed43a 	srli	r7,r7,16
    93b8:	40c7883a 	add	r3,r8,r3
    93bc:	48ffff15 	stw	r3,-4(r9)
    93c0:	543ff016 	blt	r10,r16,9384 <__alt_mem_Flash_flash_data+0xf4009384>
    93c4:	38000926 	beq	r7,zero,93ec <__multadd+0x94>
    93c8:	88800217 	ldw	r2,8(r17)
    93cc:	80800f0e 	bge	r16,r2,940c <__multadd+0xb4>
    93d0:	80800144 	addi	r2,r16,5
    93d4:	1085883a 	add	r2,r2,r2
    93d8:	1085883a 	add	r2,r2,r2
    93dc:	8885883a 	add	r2,r17,r2
    93e0:	11c00015 	stw	r7,0(r2)
    93e4:	84000044 	addi	r16,r16,1
    93e8:	8c000415 	stw	r16,16(r17)
    93ec:	8805883a 	mov	r2,r17
    93f0:	dfc00517 	ldw	ra,20(sp)
    93f4:	dcc00417 	ldw	r19,16(sp)
    93f8:	dc800317 	ldw	r18,12(sp)
    93fc:	dc400217 	ldw	r17,8(sp)
    9400:	dc000117 	ldw	r16,4(sp)
    9404:	dec00604 	addi	sp,sp,24
    9408:	f800283a 	ret
    940c:	89400117 	ldw	r5,4(r17)
    9410:	9009883a 	mov	r4,r18
    9414:	d9c00015 	stw	r7,0(sp)
    9418:	29400044 	addi	r5,r5,1
    941c:	00092880 	call	9288 <_Balloc>
    9420:	89800417 	ldw	r6,16(r17)
    9424:	11000304 	addi	r4,r2,12
    9428:	89400304 	addi	r5,r17,12
    942c:	31800084 	addi	r6,r6,2
    9430:	318d883a 	add	r6,r6,r6
    9434:	318d883a 	add	r6,r6,r6
    9438:	1027883a 	mov	r19,r2
    943c:	00091500 	call	9150 <memcpy>
    9440:	d9c00017 	ldw	r7,0(sp)
    9444:	88000a26 	beq	r17,zero,9470 <__multadd+0x118>
    9448:	89000117 	ldw	r4,4(r17)
    944c:	90c01317 	ldw	r3,76(r18)
    9450:	2109883a 	add	r4,r4,r4
    9454:	2109883a 	add	r4,r4,r4
    9458:	1907883a 	add	r3,r3,r4
    945c:	18800017 	ldw	r2,0(r3)
    9460:	88800015 	stw	r2,0(r17)
    9464:	1c400015 	stw	r17,0(r3)
    9468:	9823883a 	mov	r17,r19
    946c:	003fd806 	br	93d0 <__alt_mem_Flash_flash_data+0xf40093d0>
    9470:	9823883a 	mov	r17,r19
    9474:	003fd606 	br	93d0 <__alt_mem_Flash_flash_data+0xf40093d0>

00009478 <__s2b>:
    9478:	defff904 	addi	sp,sp,-28
    947c:	dc400115 	stw	r17,4(sp)
    9480:	dc000015 	stw	r16,0(sp)
    9484:	2023883a 	mov	r17,r4
    9488:	2821883a 	mov	r16,r5
    948c:	39000204 	addi	r4,r7,8
    9490:	01400244 	movi	r5,9
    9494:	dcc00315 	stw	r19,12(sp)
    9498:	dc800215 	stw	r18,8(sp)
    949c:	dfc00615 	stw	ra,24(sp)
    94a0:	dd400515 	stw	r21,20(sp)
    94a4:	dd000415 	stw	r20,16(sp)
    94a8:	3825883a 	mov	r18,r7
    94ac:	3027883a 	mov	r19,r6
    94b0:	000eb2c0 	call	eb2c <__divsi3>
    94b4:	00c00044 	movi	r3,1
    94b8:	000b883a 	mov	r5,zero
    94bc:	1880030e 	bge	r3,r2,94cc <__s2b+0x54>
    94c0:	18c7883a 	add	r3,r3,r3
    94c4:	29400044 	addi	r5,r5,1
    94c8:	18bffd16 	blt	r3,r2,94c0 <__alt_mem_Flash_flash_data+0xf40094c0>
    94cc:	8809883a 	mov	r4,r17
    94d0:	00092880 	call	9288 <_Balloc>
    94d4:	d8c00717 	ldw	r3,28(sp)
    94d8:	10c00515 	stw	r3,20(r2)
    94dc:	00c00044 	movi	r3,1
    94e0:	10c00415 	stw	r3,16(r2)
    94e4:	00c00244 	movi	r3,9
    94e8:	1cc0210e 	bge	r3,r19,9570 <__s2b+0xf8>
    94ec:	80eb883a 	add	r21,r16,r3
    94f0:	a829883a 	mov	r20,r21
    94f4:	84e1883a 	add	r16,r16,r19
    94f8:	a1c00007 	ldb	r7,0(r20)
    94fc:	8809883a 	mov	r4,r17
    9500:	a5000044 	addi	r20,r20,1
    9504:	100b883a 	mov	r5,r2
    9508:	01800284 	movi	r6,10
    950c:	39fff404 	addi	r7,r7,-48
    9510:	00093580 	call	9358 <__multadd>
    9514:	a43ff81e 	bne	r20,r16,94f8 <__alt_mem_Flash_flash_data+0xf40094f8>
    9518:	ace1883a 	add	r16,r21,r19
    951c:	843ffe04 	addi	r16,r16,-8
    9520:	9c800a0e 	bge	r19,r18,954c <__s2b+0xd4>
    9524:	94e5c83a 	sub	r18,r18,r19
    9528:	84a5883a 	add	r18,r16,r18
    952c:	81c00007 	ldb	r7,0(r16)
    9530:	8809883a 	mov	r4,r17
    9534:	84000044 	addi	r16,r16,1
    9538:	100b883a 	mov	r5,r2
    953c:	01800284 	movi	r6,10
    9540:	39fff404 	addi	r7,r7,-48
    9544:	00093580 	call	9358 <__multadd>
    9548:	84bff81e 	bne	r16,r18,952c <__alt_mem_Flash_flash_data+0xf400952c>
    954c:	dfc00617 	ldw	ra,24(sp)
    9550:	dd400517 	ldw	r21,20(sp)
    9554:	dd000417 	ldw	r20,16(sp)
    9558:	dcc00317 	ldw	r19,12(sp)
    955c:	dc800217 	ldw	r18,8(sp)
    9560:	dc400117 	ldw	r17,4(sp)
    9564:	dc000017 	ldw	r16,0(sp)
    9568:	dec00704 	addi	sp,sp,28
    956c:	f800283a 	ret
    9570:	84000284 	addi	r16,r16,10
    9574:	1827883a 	mov	r19,r3
    9578:	003fe906 	br	9520 <__alt_mem_Flash_flash_data+0xf4009520>

0000957c <__hi0bits>:
    957c:	20bfffec 	andhi	r2,r4,65535
    9580:	1000141e 	bne	r2,zero,95d4 <__hi0bits+0x58>
    9584:	2008943a 	slli	r4,r4,16
    9588:	00800404 	movi	r2,16
    958c:	20ffc02c 	andhi	r3,r4,65280
    9590:	1800021e 	bne	r3,zero,959c <__hi0bits+0x20>
    9594:	2008923a 	slli	r4,r4,8
    9598:	10800204 	addi	r2,r2,8
    959c:	20fc002c 	andhi	r3,r4,61440
    95a0:	1800021e 	bne	r3,zero,95ac <__hi0bits+0x30>
    95a4:	2008913a 	slli	r4,r4,4
    95a8:	10800104 	addi	r2,r2,4
    95ac:	20f0002c 	andhi	r3,r4,49152
    95b0:	1800031e 	bne	r3,zero,95c0 <__hi0bits+0x44>
    95b4:	2109883a 	add	r4,r4,r4
    95b8:	10800084 	addi	r2,r2,2
    95bc:	2109883a 	add	r4,r4,r4
    95c0:	20000316 	blt	r4,zero,95d0 <__hi0bits+0x54>
    95c4:	2110002c 	andhi	r4,r4,16384
    95c8:	2000041e 	bne	r4,zero,95dc <__hi0bits+0x60>
    95cc:	00800804 	movi	r2,32
    95d0:	f800283a 	ret
    95d4:	0005883a 	mov	r2,zero
    95d8:	003fec06 	br	958c <__alt_mem_Flash_flash_data+0xf400958c>
    95dc:	10800044 	addi	r2,r2,1
    95e0:	f800283a 	ret

000095e4 <__lo0bits>:
    95e4:	20c00017 	ldw	r3,0(r4)
    95e8:	188001cc 	andi	r2,r3,7
    95ec:	10000826 	beq	r2,zero,9610 <__lo0bits+0x2c>
    95f0:	1880004c 	andi	r2,r3,1
    95f4:	1000211e 	bne	r2,zero,967c <__lo0bits+0x98>
    95f8:	1880008c 	andi	r2,r3,2
    95fc:	1000211e 	bne	r2,zero,9684 <__lo0bits+0xa0>
    9600:	1806d0ba 	srli	r3,r3,2
    9604:	00800084 	movi	r2,2
    9608:	20c00015 	stw	r3,0(r4)
    960c:	f800283a 	ret
    9610:	18bfffcc 	andi	r2,r3,65535
    9614:	10001326 	beq	r2,zero,9664 <__lo0bits+0x80>
    9618:	0005883a 	mov	r2,zero
    961c:	19403fcc 	andi	r5,r3,255
    9620:	2800021e 	bne	r5,zero,962c <__lo0bits+0x48>
    9624:	1806d23a 	srli	r3,r3,8
    9628:	10800204 	addi	r2,r2,8
    962c:	194003cc 	andi	r5,r3,15
    9630:	2800021e 	bne	r5,zero,963c <__lo0bits+0x58>
    9634:	1806d13a 	srli	r3,r3,4
    9638:	10800104 	addi	r2,r2,4
    963c:	194000cc 	andi	r5,r3,3
    9640:	2800021e 	bne	r5,zero,964c <__lo0bits+0x68>
    9644:	1806d0ba 	srli	r3,r3,2
    9648:	10800084 	addi	r2,r2,2
    964c:	1940004c 	andi	r5,r3,1
    9650:	2800081e 	bne	r5,zero,9674 <__lo0bits+0x90>
    9654:	1806d07a 	srli	r3,r3,1
    9658:	1800051e 	bne	r3,zero,9670 <__lo0bits+0x8c>
    965c:	00800804 	movi	r2,32
    9660:	f800283a 	ret
    9664:	1806d43a 	srli	r3,r3,16
    9668:	00800404 	movi	r2,16
    966c:	003feb06 	br	961c <__alt_mem_Flash_flash_data+0xf400961c>
    9670:	10800044 	addi	r2,r2,1
    9674:	20c00015 	stw	r3,0(r4)
    9678:	f800283a 	ret
    967c:	0005883a 	mov	r2,zero
    9680:	f800283a 	ret
    9684:	1806d07a 	srli	r3,r3,1
    9688:	00800044 	movi	r2,1
    968c:	20c00015 	stw	r3,0(r4)
    9690:	f800283a 	ret

00009694 <__i2b>:
    9694:	defffd04 	addi	sp,sp,-12
    9698:	dc000015 	stw	r16,0(sp)
    969c:	04000044 	movi	r16,1
    96a0:	dc400115 	stw	r17,4(sp)
    96a4:	2823883a 	mov	r17,r5
    96a8:	800b883a 	mov	r5,r16
    96ac:	dfc00215 	stw	ra,8(sp)
    96b0:	00092880 	call	9288 <_Balloc>
    96b4:	14400515 	stw	r17,20(r2)
    96b8:	14000415 	stw	r16,16(r2)
    96bc:	dfc00217 	ldw	ra,8(sp)
    96c0:	dc400117 	ldw	r17,4(sp)
    96c4:	dc000017 	ldw	r16,0(sp)
    96c8:	dec00304 	addi	sp,sp,12
    96cc:	f800283a 	ret

000096d0 <__multiply>:
    96d0:	defffa04 	addi	sp,sp,-24
    96d4:	dcc00315 	stw	r19,12(sp)
    96d8:	dc800215 	stw	r18,8(sp)
    96dc:	2cc00417 	ldw	r19,16(r5)
    96e0:	34800417 	ldw	r18,16(r6)
    96e4:	dd000415 	stw	r20,16(sp)
    96e8:	dc400115 	stw	r17,4(sp)
    96ec:	dfc00515 	stw	ra,20(sp)
    96f0:	dc000015 	stw	r16,0(sp)
    96f4:	2829883a 	mov	r20,r5
    96f8:	3023883a 	mov	r17,r6
    96fc:	9c807016 	blt	r19,r18,98c0 <__multiply+0x1f0>
    9700:	9005883a 	mov	r2,r18
    9704:	9825883a 	mov	r18,r19
    9708:	1027883a 	mov	r19,r2
    970c:	a0800217 	ldw	r2,8(r20)
    9710:	94e1883a 	add	r16,r18,r19
    9714:	a1400117 	ldw	r5,4(r20)
    9718:	1400010e 	bge	r2,r16,9720 <__multiply+0x50>
    971c:	29400044 	addi	r5,r5,1
    9720:	00092880 	call	9288 <_Balloc>
    9724:	8417883a 	add	r11,r16,r16
    9728:	13000504 	addi	r12,r2,20
    972c:	5ad7883a 	add	r11,r11,r11
    9730:	62d7883a 	add	r11,r12,r11
    9734:	6007883a 	mov	r3,r12
    9738:	62c0032e 	bgeu	r12,r11,9748 <__multiply+0x78>
    973c:	18000015 	stw	zero,0(r3)
    9740:	18c00104 	addi	r3,r3,4
    9744:	1afffd36 	bltu	r3,r11,973c <__alt_mem_Flash_flash_data+0xf400973c>
    9748:	9ce7883a 	add	r19,r19,r19
    974c:	94a5883a 	add	r18,r18,r18
    9750:	89800504 	addi	r6,r17,20
    9754:	9ce7883a 	add	r19,r19,r19
    9758:	a3800504 	addi	r14,r20,20
    975c:	94a5883a 	add	r18,r18,r18
    9760:	34db883a 	add	r13,r6,r19
    9764:	7495883a 	add	r10,r14,r18
    9768:	3340422e 	bgeu	r6,r13,9874 <__multiply+0x1a4>
    976c:	34400017 	ldw	r17,0(r6)
    9770:	8cbfffcc 	andi	r18,r17,65535
    9774:	90001b26 	beq	r18,zero,97e4 <__multiply+0x114>
    9778:	6013883a 	mov	r9,r12
    977c:	7023883a 	mov	r17,r14
    9780:	0011883a 	mov	r8,zero
    9784:	88c00017 	ldw	r3,0(r17)
    9788:	4bc00017 	ldw	r15,0(r9)
    978c:	8c400104 	addi	r17,r17,4
    9790:	19ffffcc 	andi	r7,r3,65535
    9794:	3c8f383a 	mul	r7,r7,r18
    9798:	1808d43a 	srli	r4,r3,16
    979c:	797fffcc 	andi	r5,r15,65535
    97a0:	29cb883a 	add	r5,r5,r7
    97a4:	2a0b883a 	add	r5,r5,r8
    97a8:	2489383a 	mul	r4,r4,r18
    97ac:	7806d43a 	srli	r3,r15,16
    97b0:	2810d43a 	srli	r8,r5,16
    97b4:	297fffcc 	andi	r5,r5,65535
    97b8:	1907883a 	add	r3,r3,r4
    97bc:	1a07883a 	add	r3,r3,r8
    97c0:	1808943a 	slli	r4,r3,16
    97c4:	480f883a 	mov	r7,r9
    97c8:	1810d43a 	srli	r8,r3,16
    97cc:	214ab03a 	or	r5,r4,r5
    97d0:	49400015 	stw	r5,0(r9)
    97d4:	4a400104 	addi	r9,r9,4
    97d8:	8abfea36 	bltu	r17,r10,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    97dc:	3a000115 	stw	r8,4(r7)
    97e0:	34400017 	ldw	r17,0(r6)
    97e4:	8822d43a 	srli	r17,r17,16
    97e8:	88001f26 	beq	r17,zero,9868 <__multiply+0x198>
    97ec:	60c00017 	ldw	r3,0(r12)
    97f0:	7013883a 	mov	r9,r14
    97f4:	601f883a 	mov	r15,r12
    97f8:	1811883a 	mov	r8,r3
    97fc:	6027883a 	mov	r19,r12
    9800:	000f883a 	mov	r7,zero
    9804:	00000106 	br	980c <__multiply+0x13c>
    9808:	9027883a 	mov	r19,r18
    980c:	4940000b 	ldhu	r5,0(r9)
    9810:	4010d43a 	srli	r8,r8,16
    9814:	193fffcc 	andi	r4,r3,65535
    9818:	2c4b383a 	mul	r5,r5,r17
    981c:	7bc00104 	addi	r15,r15,4
    9820:	4a400104 	addi	r9,r9,4
    9824:	2a0b883a 	add	r5,r5,r8
    9828:	29cb883a 	add	r5,r5,r7
    982c:	2806943a 	slli	r3,r5,16
    9830:	9c800104 	addi	r18,r19,4
    9834:	280ad43a 	srli	r5,r5,16
    9838:	1908b03a 	or	r4,r3,r4
    983c:	793fff15 	stw	r4,-4(r15)
    9840:	48ffff17 	ldw	r3,-4(r9)
    9844:	92000017 	ldw	r8,0(r18)
    9848:	1806d43a 	srli	r3,r3,16
    984c:	413fffcc 	andi	r4,r8,65535
    9850:	1c47383a 	mul	r3,r3,r17
    9854:	1907883a 	add	r3,r3,r4
    9858:	1947883a 	add	r3,r3,r5
    985c:	180ed43a 	srli	r7,r3,16
    9860:	4abfe936 	bltu	r9,r10,9808 <__alt_mem_Flash_flash_data+0xf4009808>
    9864:	98c00115 	stw	r3,4(r19)
    9868:	31800104 	addi	r6,r6,4
    986c:	63000104 	addi	r12,r12,4
    9870:	337fbe36 	bltu	r6,r13,976c <__alt_mem_Flash_flash_data+0xf400976c>
    9874:	0400090e 	bge	zero,r16,989c <__multiply+0x1cc>
    9878:	58ffff17 	ldw	r3,-4(r11)
    987c:	5affff04 	addi	r11,r11,-4
    9880:	18000326 	beq	r3,zero,9890 <__multiply+0x1c0>
    9884:	00000506 	br	989c <__multiply+0x1cc>
    9888:	58c00017 	ldw	r3,0(r11)
    988c:	1800031e 	bne	r3,zero,989c <__multiply+0x1cc>
    9890:	843fffc4 	addi	r16,r16,-1
    9894:	5affff04 	addi	r11,r11,-4
    9898:	803ffb1e 	bne	r16,zero,9888 <__alt_mem_Flash_flash_data+0xf4009888>
    989c:	14000415 	stw	r16,16(r2)
    98a0:	dfc00517 	ldw	ra,20(sp)
    98a4:	dd000417 	ldw	r20,16(sp)
    98a8:	dcc00317 	ldw	r19,12(sp)
    98ac:	dc800217 	ldw	r18,8(sp)
    98b0:	dc400117 	ldw	r17,4(sp)
    98b4:	dc000017 	ldw	r16,0(sp)
    98b8:	dec00604 	addi	sp,sp,24
    98bc:	f800283a 	ret
    98c0:	3029883a 	mov	r20,r6
    98c4:	2823883a 	mov	r17,r5
    98c8:	003f9006 	br	970c <__alt_mem_Flash_flash_data+0xf400970c>

000098cc <__pow5mult>:
    98cc:	defffa04 	addi	sp,sp,-24
    98d0:	dcc00315 	stw	r19,12(sp)
    98d4:	dc800215 	stw	r18,8(sp)
    98d8:	dc000015 	stw	r16,0(sp)
    98dc:	dfc00515 	stw	ra,20(sp)
    98e0:	dd000415 	stw	r20,16(sp)
    98e4:	dc400115 	stw	r17,4(sp)
    98e8:	308000cc 	andi	r2,r6,3
    98ec:	3021883a 	mov	r16,r6
    98f0:	2027883a 	mov	r19,r4
    98f4:	2825883a 	mov	r18,r5
    98f8:	10002e1e 	bne	r2,zero,99b4 <__pow5mult+0xe8>
    98fc:	8021d0ba 	srai	r16,r16,2
    9900:	80001a26 	beq	r16,zero,996c <__pow5mult+0xa0>
    9904:	9c401217 	ldw	r17,72(r19)
    9908:	8800061e 	bne	r17,zero,9924 <__pow5mult+0x58>
    990c:	00003406 	br	99e0 <__pow5mult+0x114>
    9910:	8021d07a 	srai	r16,r16,1
    9914:	80001526 	beq	r16,zero,996c <__pow5mult+0xa0>
    9918:	88800017 	ldw	r2,0(r17)
    991c:	10001c26 	beq	r2,zero,9990 <__pow5mult+0xc4>
    9920:	1023883a 	mov	r17,r2
    9924:	80c0004c 	andi	r3,r16,1
    9928:	183ff926 	beq	r3,zero,9910 <__alt_mem_Flash_flash_data+0xf4009910>
    992c:	900b883a 	mov	r5,r18
    9930:	880d883a 	mov	r6,r17
    9934:	9809883a 	mov	r4,r19
    9938:	00096d00 	call	96d0 <__multiply>
    993c:	90001b26 	beq	r18,zero,99ac <__pow5mult+0xe0>
    9940:	91c00117 	ldw	r7,4(r18)
    9944:	98c01317 	ldw	r3,76(r19)
    9948:	8021d07a 	srai	r16,r16,1
    994c:	39cf883a 	add	r7,r7,r7
    9950:	39cf883a 	add	r7,r7,r7
    9954:	19c7883a 	add	r3,r3,r7
    9958:	19000017 	ldw	r4,0(r3)
    995c:	91000015 	stw	r4,0(r18)
    9960:	1c800015 	stw	r18,0(r3)
    9964:	1025883a 	mov	r18,r2
    9968:	803feb1e 	bne	r16,zero,9918 <__alt_mem_Flash_flash_data+0xf4009918>
    996c:	9005883a 	mov	r2,r18
    9970:	dfc00517 	ldw	ra,20(sp)
    9974:	dd000417 	ldw	r20,16(sp)
    9978:	dcc00317 	ldw	r19,12(sp)
    997c:	dc800217 	ldw	r18,8(sp)
    9980:	dc400117 	ldw	r17,4(sp)
    9984:	dc000017 	ldw	r16,0(sp)
    9988:	dec00604 	addi	sp,sp,24
    998c:	f800283a 	ret
    9990:	9809883a 	mov	r4,r19
    9994:	880b883a 	mov	r5,r17
    9998:	880d883a 	mov	r6,r17
    999c:	00096d00 	call	96d0 <__multiply>
    99a0:	88800015 	stw	r2,0(r17)
    99a4:	10000015 	stw	zero,0(r2)
    99a8:	003fdd06 	br	9920 <__alt_mem_Flash_flash_data+0xf4009920>
    99ac:	1025883a 	mov	r18,r2
    99b0:	003fd706 	br	9910 <__alt_mem_Flash_flash_data+0xf4009910>
    99b4:	10bfffc4 	addi	r2,r2,-1
    99b8:	1085883a 	add	r2,r2,r2
    99bc:	00c000b4 	movhi	r3,2
    99c0:	18fb1104 	addi	r3,r3,-5052
    99c4:	1085883a 	add	r2,r2,r2
    99c8:	1885883a 	add	r2,r3,r2
    99cc:	11800017 	ldw	r6,0(r2)
    99d0:	000f883a 	mov	r7,zero
    99d4:	00093580 	call	9358 <__multadd>
    99d8:	1025883a 	mov	r18,r2
    99dc:	003fc706 	br	98fc <__alt_mem_Flash_flash_data+0xf40098fc>
    99e0:	05000044 	movi	r20,1
    99e4:	9809883a 	mov	r4,r19
    99e8:	a00b883a 	mov	r5,r20
    99ec:	00092880 	call	9288 <_Balloc>
    99f0:	1023883a 	mov	r17,r2
    99f4:	00809c44 	movi	r2,625
    99f8:	88800515 	stw	r2,20(r17)
    99fc:	8d000415 	stw	r20,16(r17)
    9a00:	9c401215 	stw	r17,72(r19)
    9a04:	88000015 	stw	zero,0(r17)
    9a08:	003fc606 	br	9924 <__alt_mem_Flash_flash_data+0xf4009924>

00009a0c <__lshift>:
    9a0c:	defff904 	addi	sp,sp,-28
    9a10:	dd000415 	stw	r20,16(sp)
    9a14:	dcc00315 	stw	r19,12(sp)
    9a18:	3029d17a 	srai	r20,r6,5
    9a1c:	2cc00417 	ldw	r19,16(r5)
    9a20:	28800217 	ldw	r2,8(r5)
    9a24:	dd400515 	stw	r21,20(sp)
    9a28:	a4e7883a 	add	r19,r20,r19
    9a2c:	dc800215 	stw	r18,8(sp)
    9a30:	dc400115 	stw	r17,4(sp)
    9a34:	dc000015 	stw	r16,0(sp)
    9a38:	dfc00615 	stw	ra,24(sp)
    9a3c:	9c000044 	addi	r16,r19,1
    9a40:	2823883a 	mov	r17,r5
    9a44:	302b883a 	mov	r21,r6
    9a48:	2025883a 	mov	r18,r4
    9a4c:	29400117 	ldw	r5,4(r5)
    9a50:	1400030e 	bge	r2,r16,9a60 <__lshift+0x54>
    9a54:	1085883a 	add	r2,r2,r2
    9a58:	29400044 	addi	r5,r5,1
    9a5c:	143ffd16 	blt	r2,r16,9a54 <__alt_mem_Flash_flash_data+0xf4009a54>
    9a60:	9009883a 	mov	r4,r18
    9a64:	00092880 	call	9288 <_Balloc>
    9a68:	11c00504 	addi	r7,r2,20
    9a6c:	0500090e 	bge	zero,r20,9a94 <__lshift+0x88>
    9a70:	3811883a 	mov	r8,r7
    9a74:	0007883a 	mov	r3,zero
    9a78:	40000015 	stw	zero,0(r8)
    9a7c:	18c00044 	addi	r3,r3,1
    9a80:	42000104 	addi	r8,r8,4
    9a84:	1d3ffc1e 	bne	r3,r20,9a78 <__alt_mem_Flash_flash_data+0xf4009a78>
    9a88:	18c7883a 	add	r3,r3,r3
    9a8c:	18c7883a 	add	r3,r3,r3
    9a90:	38cf883a 	add	r7,r7,r3
    9a94:	89000417 	ldw	r4,16(r17)
    9a98:	88c00504 	addi	r3,r17,20
    9a9c:	a98007cc 	andi	r6,r21,31
    9aa0:	2109883a 	add	r4,r4,r4
    9aa4:	2109883a 	add	r4,r4,r4
    9aa8:	1909883a 	add	r4,r3,r4
    9aac:	30002326 	beq	r6,zero,9b3c <__lshift+0x130>
    9ab0:	01400804 	movi	r5,32
    9ab4:	298bc83a 	sub	r5,r5,r6
    9ab8:	0013883a 	mov	r9,zero
    9abc:	1a000017 	ldw	r8,0(r3)
    9ac0:	3815883a 	mov	r10,r7
    9ac4:	39c00104 	addi	r7,r7,4
    9ac8:	4190983a 	sll	r8,r8,r6
    9acc:	18c00104 	addi	r3,r3,4
    9ad0:	4a10b03a 	or	r8,r9,r8
    9ad4:	3a3fff15 	stw	r8,-4(r7)
    9ad8:	1a3fff17 	ldw	r8,-4(r3)
    9adc:	4152d83a 	srl	r9,r8,r5
    9ae0:	193ff636 	bltu	r3,r4,9abc <__alt_mem_Flash_flash_data+0xf4009abc>
    9ae4:	52400115 	stw	r9,4(r10)
    9ae8:	48001a1e 	bne	r9,zero,9b54 <__lshift+0x148>
    9aec:	843fffc4 	addi	r16,r16,-1
    9af0:	14000415 	stw	r16,16(r2)
    9af4:	88000826 	beq	r17,zero,9b18 <__lshift+0x10c>
    9af8:	89000117 	ldw	r4,4(r17)
    9afc:	90c01317 	ldw	r3,76(r18)
    9b00:	2109883a 	add	r4,r4,r4
    9b04:	2109883a 	add	r4,r4,r4
    9b08:	1907883a 	add	r3,r3,r4
    9b0c:	19000017 	ldw	r4,0(r3)
    9b10:	89000015 	stw	r4,0(r17)
    9b14:	1c400015 	stw	r17,0(r3)
    9b18:	dfc00617 	ldw	ra,24(sp)
    9b1c:	dd400517 	ldw	r21,20(sp)
    9b20:	dd000417 	ldw	r20,16(sp)
    9b24:	dcc00317 	ldw	r19,12(sp)
    9b28:	dc800217 	ldw	r18,8(sp)
    9b2c:	dc400117 	ldw	r17,4(sp)
    9b30:	dc000017 	ldw	r16,0(sp)
    9b34:	dec00704 	addi	sp,sp,28
    9b38:	f800283a 	ret
    9b3c:	19400017 	ldw	r5,0(r3)
    9b40:	39c00104 	addi	r7,r7,4
    9b44:	18c00104 	addi	r3,r3,4
    9b48:	397fff15 	stw	r5,-4(r7)
    9b4c:	193ffb36 	bltu	r3,r4,9b3c <__alt_mem_Flash_flash_data+0xf4009b3c>
    9b50:	003fe606 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9b54:	9c000084 	addi	r16,r19,2
    9b58:	003fe406 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>

00009b5c <__mcmp>:
    9b5c:	20800417 	ldw	r2,16(r4)
    9b60:	28c00417 	ldw	r3,16(r5)
    9b64:	10c5c83a 	sub	r2,r2,r3
    9b68:	1000111e 	bne	r2,zero,9bb0 <__mcmp+0x54>
    9b6c:	18c7883a 	add	r3,r3,r3
    9b70:	18c7883a 	add	r3,r3,r3
    9b74:	21000504 	addi	r4,r4,20
    9b78:	29400504 	addi	r5,r5,20
    9b7c:	20c5883a 	add	r2,r4,r3
    9b80:	28cb883a 	add	r5,r5,r3
    9b84:	00000106 	br	9b8c <__mcmp+0x30>
    9b88:	20800a2e 	bgeu	r4,r2,9bb4 <__mcmp+0x58>
    9b8c:	10bfff04 	addi	r2,r2,-4
    9b90:	297fff04 	addi	r5,r5,-4
    9b94:	11800017 	ldw	r6,0(r2)
    9b98:	28c00017 	ldw	r3,0(r5)
    9b9c:	30fffa26 	beq	r6,r3,9b88 <__alt_mem_Flash_flash_data+0xf4009b88>
    9ba0:	30c00236 	bltu	r6,r3,9bac <__mcmp+0x50>
    9ba4:	00800044 	movi	r2,1
    9ba8:	f800283a 	ret
    9bac:	00bfffc4 	movi	r2,-1
    9bb0:	f800283a 	ret
    9bb4:	0005883a 	mov	r2,zero
    9bb8:	f800283a 	ret

00009bbc <__mdiff>:
    9bbc:	defffb04 	addi	sp,sp,-20
    9bc0:	dc000015 	stw	r16,0(sp)
    9bc4:	2821883a 	mov	r16,r5
    9bc8:	dcc00315 	stw	r19,12(sp)
    9bcc:	300b883a 	mov	r5,r6
    9bd0:	2027883a 	mov	r19,r4
    9bd4:	8009883a 	mov	r4,r16
    9bd8:	dc800215 	stw	r18,8(sp)
    9bdc:	dfc00415 	stw	ra,16(sp)
    9be0:	dc400115 	stw	r17,4(sp)
    9be4:	3025883a 	mov	r18,r6
    9be8:	0009b5c0 	call	9b5c <__mcmp>
    9bec:	10005226 	beq	r2,zero,9d38 <__mdiff+0x17c>
    9bf0:	10004c16 	blt	r2,zero,9d24 <__mdiff+0x168>
    9bf4:	0023883a 	mov	r17,zero
    9bf8:	81400117 	ldw	r5,4(r16)
    9bfc:	9809883a 	mov	r4,r19
    9c00:	00092880 	call	9288 <_Balloc>
    9c04:	83400417 	ldw	r13,16(r16)
    9c08:	93800417 	ldw	r14,16(r18)
    9c0c:	81000504 	addi	r4,r16,20
    9c10:	6b59883a 	add	r12,r13,r13
    9c14:	739d883a 	add	r14,r14,r14
    9c18:	6319883a 	add	r12,r12,r12
    9c1c:	91800504 	addi	r6,r18,20
    9c20:	739d883a 	add	r14,r14,r14
    9c24:	14400315 	stw	r17,12(r2)
    9c28:	2319883a 	add	r12,r4,r12
    9c2c:	339d883a 	add	r14,r6,r14
    9c30:	12400504 	addi	r9,r2,20
    9c34:	0007883a 	mov	r3,zero
    9c38:	22000017 	ldw	r8,0(r4)
    9c3c:	32800017 	ldw	r10,0(r6)
    9c40:	4ac00104 	addi	r11,r9,4
    9c44:	41ffffcc 	andi	r7,r8,65535
    9c48:	38c7883a 	add	r3,r7,r3
    9c4c:	51ffffcc 	andi	r7,r10,65535
    9c50:	19cfc83a 	sub	r7,r3,r7
    9c54:	4010d43a 	srli	r8,r8,16
    9c58:	5014d43a 	srli	r10,r10,16
    9c5c:	3807d43a 	srai	r3,r7,16
    9c60:	39ffffcc 	andi	r7,r7,65535
    9c64:	4291c83a 	sub	r8,r8,r10
    9c68:	40c7883a 	add	r3,r8,r3
    9c6c:	1810943a 	slli	r8,r3,16
    9c70:	31800104 	addi	r6,r6,4
    9c74:	21000104 	addi	r4,r4,4
    9c78:	41ceb03a 	or	r7,r8,r7
    9c7c:	49c00015 	stw	r7,0(r9)
    9c80:	1807d43a 	srai	r3,r3,16
    9c84:	580b883a 	mov	r5,r11
    9c88:	5813883a 	mov	r9,r11
    9c8c:	33bfea36 	bltu	r6,r14,9c38 <__alt_mem_Flash_flash_data+0xf4009c38>
    9c90:	2011883a 	mov	r8,r4
    9c94:	2300152e 	bgeu	r4,r12,9cec <__mdiff+0x130>
    9c98:	21400017 	ldw	r5,0(r4)
    9c9c:	4a400104 	addi	r9,r9,4
    9ca0:	21000104 	addi	r4,r4,4
    9ca4:	29ffffcc 	andi	r7,r5,65535
    9ca8:	38c7883a 	add	r3,r7,r3
    9cac:	280ad43a 	srli	r5,r5,16
    9cb0:	180dd43a 	srai	r6,r3,16
    9cb4:	19ffffcc 	andi	r7,r3,65535
    9cb8:	3147883a 	add	r3,r6,r5
    9cbc:	180a943a 	slli	r5,r3,16
    9cc0:	1807d43a 	srai	r3,r3,16
    9cc4:	29ceb03a 	or	r7,r5,r7
    9cc8:	49ffff15 	stw	r7,-4(r9)
    9ccc:	233ff236 	bltu	r4,r12,9c98 <__alt_mem_Flash_flash_data+0xf4009c98>
    9cd0:	0206303a 	nor	r3,zero,r8
    9cd4:	1b07883a 	add	r3,r3,r12
    9cd8:	1806d0ba 	srli	r3,r3,2
    9cdc:	18c00044 	addi	r3,r3,1
    9ce0:	18c7883a 	add	r3,r3,r3
    9ce4:	18c7883a 	add	r3,r3,r3
    9ce8:	58cb883a 	add	r5,r11,r3
    9cec:	28ffff04 	addi	r3,r5,-4
    9cf0:	3800041e 	bne	r7,zero,9d04 <__mdiff+0x148>
    9cf4:	18ffff04 	addi	r3,r3,-4
    9cf8:	19000017 	ldw	r4,0(r3)
    9cfc:	6b7fffc4 	addi	r13,r13,-1
    9d00:	203ffc26 	beq	r4,zero,9cf4 <__alt_mem_Flash_flash_data+0xf4009cf4>
    9d04:	13400415 	stw	r13,16(r2)
    9d08:	dfc00417 	ldw	ra,16(sp)
    9d0c:	dcc00317 	ldw	r19,12(sp)
    9d10:	dc800217 	ldw	r18,8(sp)
    9d14:	dc400117 	ldw	r17,4(sp)
    9d18:	dc000017 	ldw	r16,0(sp)
    9d1c:	dec00504 	addi	sp,sp,20
    9d20:	f800283a 	ret
    9d24:	8005883a 	mov	r2,r16
    9d28:	04400044 	movi	r17,1
    9d2c:	9021883a 	mov	r16,r18
    9d30:	1025883a 	mov	r18,r2
    9d34:	003fb006 	br	9bf8 <__alt_mem_Flash_flash_data+0xf4009bf8>
    9d38:	9809883a 	mov	r4,r19
    9d3c:	000b883a 	mov	r5,zero
    9d40:	00092880 	call	9288 <_Balloc>
    9d44:	00c00044 	movi	r3,1
    9d48:	10c00415 	stw	r3,16(r2)
    9d4c:	10000515 	stw	zero,20(r2)
    9d50:	003fed06 	br	9d08 <__alt_mem_Flash_flash_data+0xf4009d08>

00009d54 <__ulp>:
    9d54:	295ffc2c 	andhi	r5,r5,32752
    9d58:	00bf3034 	movhi	r2,64704
    9d5c:	2887883a 	add	r3,r5,r2
    9d60:	00c0020e 	bge	zero,r3,9d6c <__ulp+0x18>
    9d64:	0005883a 	mov	r2,zero
    9d68:	f800283a 	ret
    9d6c:	00c7c83a 	sub	r3,zero,r3
    9d70:	180bd53a 	srai	r5,r3,20
    9d74:	008004c4 	movi	r2,19
    9d78:	11400a0e 	bge	r2,r5,9da4 <__ulp+0x50>
    9d7c:	00800c84 	movi	r2,50
    9d80:	0007883a 	mov	r3,zero
    9d84:	11400516 	blt	r2,r5,9d9c <__ulp+0x48>
    9d88:	00800cc4 	movi	r2,51
    9d8c:	114bc83a 	sub	r5,r2,r5
    9d90:	00800044 	movi	r2,1
    9d94:	1144983a 	sll	r2,r2,r5
    9d98:	f800283a 	ret
    9d9c:	00800044 	movi	r2,1
    9da0:	f800283a 	ret
    9da4:	00800234 	movhi	r2,8
    9da8:	1147d83a 	sra	r3,r2,r5
    9dac:	0005883a 	mov	r2,zero
    9db0:	f800283a 	ret

00009db4 <__b2d>:
    9db4:	defffa04 	addi	sp,sp,-24
    9db8:	dc000015 	stw	r16,0(sp)
    9dbc:	24000417 	ldw	r16,16(r4)
    9dc0:	dc400115 	stw	r17,4(sp)
    9dc4:	24400504 	addi	r17,r4,20
    9dc8:	8421883a 	add	r16,r16,r16
    9dcc:	8421883a 	add	r16,r16,r16
    9dd0:	8c21883a 	add	r16,r17,r16
    9dd4:	dc800215 	stw	r18,8(sp)
    9dd8:	84bfff17 	ldw	r18,-4(r16)
    9ddc:	dd000415 	stw	r20,16(sp)
    9de0:	dcc00315 	stw	r19,12(sp)
    9de4:	9009883a 	mov	r4,r18
    9de8:	2829883a 	mov	r20,r5
    9dec:	dfc00515 	stw	ra,20(sp)
    9df0:	000957c0 	call	957c <__hi0bits>
    9df4:	00c00804 	movi	r3,32
    9df8:	1887c83a 	sub	r3,r3,r2
    9dfc:	a0c00015 	stw	r3,0(r20)
    9e00:	00c00284 	movi	r3,10
    9e04:	84ffff04 	addi	r19,r16,-4
    9e08:	18801216 	blt	r3,r2,9e54 <__b2d+0xa0>
    9e0c:	014002c4 	movi	r5,11
    9e10:	2889c83a 	sub	r4,r5,r2
    9e14:	9106d83a 	srl	r3,r18,r4
    9e18:	18cffc34 	orhi	r3,r3,16368
    9e1c:	8cc0282e 	bgeu	r17,r19,9ec0 <__b2d+0x10c>
    9e20:	817ffe17 	ldw	r5,-8(r16)
    9e24:	290ad83a 	srl	r5,r5,r4
    9e28:	10800544 	addi	r2,r2,21
    9e2c:	9084983a 	sll	r2,r18,r2
    9e30:	2884b03a 	or	r2,r5,r2
    9e34:	dfc00517 	ldw	ra,20(sp)
    9e38:	dd000417 	ldw	r20,16(sp)
    9e3c:	dcc00317 	ldw	r19,12(sp)
    9e40:	dc800217 	ldw	r18,8(sp)
    9e44:	dc400117 	ldw	r17,4(sp)
    9e48:	dc000017 	ldw	r16,0(sp)
    9e4c:	dec00604 	addi	sp,sp,24
    9e50:	f800283a 	ret
    9e54:	113ffd44 	addi	r4,r2,-11
    9e58:	8cc00f2e 	bgeu	r17,r19,9e98 <__b2d+0xe4>
    9e5c:	81bffe04 	addi	r6,r16,-8
    9e60:	817ffe17 	ldw	r5,-8(r16)
    9e64:	20001326 	beq	r4,zero,9eb4 <__b2d+0x100>
    9e68:	00c00ac4 	movi	r3,43
    9e6c:	1885c83a 	sub	r2,r3,r2
    9e70:	2886d83a 	srl	r3,r5,r2
    9e74:	9124983a 	sll	r18,r18,r4
    9e78:	90e4b03a 	or	r18,r18,r3
    9e7c:	90cffc34 	orhi	r3,r18,16368
    9e80:	8980112e 	bgeu	r17,r6,9ec8 <__b2d+0x114>
    9e84:	81bffd17 	ldw	r6,-12(r16)
    9e88:	308cd83a 	srl	r6,r6,r2
    9e8c:	2904983a 	sll	r2,r5,r4
    9e90:	1184b03a 	or	r2,r2,r6
    9e94:	003fe706 	br	9e34 <__alt_mem_Flash_flash_data+0xf4009e34>
    9e98:	20000526 	beq	r4,zero,9eb0 <__b2d+0xfc>
    9e9c:	9124983a 	sll	r18,r18,r4
    9ea0:	000d883a 	mov	r6,zero
    9ea4:	000b883a 	mov	r5,zero
    9ea8:	90cffc34 	orhi	r3,r18,16368
    9eac:	003ff706 	br	9e8c <__alt_mem_Flash_flash_data+0xf4009e8c>
    9eb0:	000b883a 	mov	r5,zero
    9eb4:	90cffc34 	orhi	r3,r18,16368
    9eb8:	2805883a 	mov	r2,r5
    9ebc:	003fdd06 	br	9e34 <__alt_mem_Flash_flash_data+0xf4009e34>
    9ec0:	000b883a 	mov	r5,zero
    9ec4:	003fd806 	br	9e28 <__alt_mem_Flash_flash_data+0xf4009e28>
    9ec8:	000d883a 	mov	r6,zero
    9ecc:	003fef06 	br	9e8c <__alt_mem_Flash_flash_data+0xf4009e8c>

00009ed0 <__d2b>:
    9ed0:	defff704 	addi	sp,sp,-36
    9ed4:	dc000215 	stw	r16,8(sp)
    9ed8:	3021883a 	mov	r16,r6
    9edc:	dc400315 	stw	r17,12(sp)
    9ee0:	8022907a 	slli	r17,r16,1
    9ee4:	dd400715 	stw	r21,28(sp)
    9ee8:	282b883a 	mov	r21,r5
    9eec:	01400044 	movi	r5,1
    9ef0:	dd000615 	stw	r20,24(sp)
    9ef4:	dcc00515 	stw	r19,20(sp)
    9ef8:	dc800415 	stw	r18,16(sp)
    9efc:	dfc00815 	stw	ra,32(sp)
    9f00:	3829883a 	mov	r20,r7
    9f04:	dc800917 	ldw	r18,36(sp)
    9f08:	8822d57a 	srli	r17,r17,21
    9f0c:	00092880 	call	9288 <_Balloc>
    9f10:	1027883a 	mov	r19,r2
    9f14:	00800434 	movhi	r2,16
    9f18:	10bfffc4 	addi	r2,r2,-1
    9f1c:	808c703a 	and	r6,r16,r2
    9f20:	88000126 	beq	r17,zero,9f28 <__d2b+0x58>
    9f24:	31800434 	orhi	r6,r6,16
    9f28:	d9800015 	stw	r6,0(sp)
    9f2c:	a8001f26 	beq	r21,zero,9fac <__d2b+0xdc>
    9f30:	d9000104 	addi	r4,sp,4
    9f34:	dd400115 	stw	r21,4(sp)
    9f38:	00095e40 	call	95e4 <__lo0bits>
    9f3c:	d8c00017 	ldw	r3,0(sp)
    9f40:	1000291e 	bne	r2,zero,9fe8 <__d2b+0x118>
    9f44:	d9000117 	ldw	r4,4(sp)
    9f48:	99000515 	stw	r4,20(r19)
    9f4c:	1820c03a 	cmpne	r16,r3,zero
    9f50:	84000044 	addi	r16,r16,1
    9f54:	98c00615 	stw	r3,24(r19)
    9f58:	9c000415 	stw	r16,16(r19)
    9f5c:	88001b1e 	bne	r17,zero,9fcc <__d2b+0xfc>
    9f60:	800690ba 	slli	r3,r16,2
    9f64:	10bef384 	addi	r2,r2,-1074
    9f68:	a0800015 	stw	r2,0(r20)
    9f6c:	98c5883a 	add	r2,r19,r3
    9f70:	11000417 	ldw	r4,16(r2)
    9f74:	8020917a 	slli	r16,r16,5
    9f78:	000957c0 	call	957c <__hi0bits>
    9f7c:	8085c83a 	sub	r2,r16,r2
    9f80:	90800015 	stw	r2,0(r18)
    9f84:	9805883a 	mov	r2,r19
    9f88:	dfc00817 	ldw	ra,32(sp)
    9f8c:	dd400717 	ldw	r21,28(sp)
    9f90:	dd000617 	ldw	r20,24(sp)
    9f94:	dcc00517 	ldw	r19,20(sp)
    9f98:	dc800417 	ldw	r18,16(sp)
    9f9c:	dc400317 	ldw	r17,12(sp)
    9fa0:	dc000217 	ldw	r16,8(sp)
    9fa4:	dec00904 	addi	sp,sp,36
    9fa8:	f800283a 	ret
    9fac:	d809883a 	mov	r4,sp
    9fb0:	00095e40 	call	95e4 <__lo0bits>
    9fb4:	d8c00017 	ldw	r3,0(sp)
    9fb8:	04000044 	movi	r16,1
    9fbc:	9c000415 	stw	r16,16(r19)
    9fc0:	98c00515 	stw	r3,20(r19)
    9fc4:	10800804 	addi	r2,r2,32
    9fc8:	883fe526 	beq	r17,zero,9f60 <__alt_mem_Flash_flash_data+0xf4009f60>
    9fcc:	8c7ef344 	addi	r17,r17,-1075
    9fd0:	88a3883a 	add	r17,r17,r2
    9fd4:	00c00d44 	movi	r3,53
    9fd8:	a4400015 	stw	r17,0(r20)
    9fdc:	1885c83a 	sub	r2,r3,r2
    9fe0:	90800015 	stw	r2,0(r18)
    9fe4:	003fe706 	br	9f84 <__alt_mem_Flash_flash_data+0xf4009f84>
    9fe8:	01000804 	movi	r4,32
    9fec:	2089c83a 	sub	r4,r4,r2
    9ff0:	1908983a 	sll	r4,r3,r4
    9ff4:	d9400117 	ldw	r5,4(sp)
    9ff8:	1886d83a 	srl	r3,r3,r2
    9ffc:	2148b03a 	or	r4,r4,r5
    a000:	99000515 	stw	r4,20(r19)
    a004:	d8c00015 	stw	r3,0(sp)
    a008:	003fd006 	br	9f4c <__alt_mem_Flash_flash_data+0xf4009f4c>

0000a00c <__ratio>:
    a00c:	defff904 	addi	sp,sp,-28
    a010:	dc400315 	stw	r17,12(sp)
    a014:	2823883a 	mov	r17,r5
    a018:	d9400104 	addi	r5,sp,4
    a01c:	dfc00615 	stw	ra,24(sp)
    a020:	dcc00515 	stw	r19,20(sp)
    a024:	dc800415 	stw	r18,16(sp)
    a028:	2027883a 	mov	r19,r4
    a02c:	dc000215 	stw	r16,8(sp)
    a030:	0009db40 	call	9db4 <__b2d>
    a034:	8809883a 	mov	r4,r17
    a038:	d80b883a 	mov	r5,sp
    a03c:	1025883a 	mov	r18,r2
    a040:	1821883a 	mov	r16,r3
    a044:	0009db40 	call	9db4 <__b2d>
    a048:	8a400417 	ldw	r9,16(r17)
    a04c:	9a000417 	ldw	r8,16(r19)
    a050:	100d883a 	mov	r6,r2
    a054:	d8800017 	ldw	r2,0(sp)
    a058:	4251c83a 	sub	r8,r8,r9
    a05c:	4012917a 	slli	r9,r8,5
    a060:	da000117 	ldw	r8,4(sp)
    a064:	4091c83a 	sub	r8,r8,r2
    a068:	4251883a 	add	r8,r8,r9
    a06c:	02000d0e 	bge	zero,r8,a0a4 <__ratio+0x98>
    a070:	4010953a 	slli	r8,r8,20
    a074:	4421883a 	add	r16,r8,r16
    a078:	9009883a 	mov	r4,r18
    a07c:	800b883a 	mov	r5,r16
    a080:	180f883a 	mov	r7,r3
    a084:	000f4880 	call	f488 <__divdf3>
    a088:	dfc00617 	ldw	ra,24(sp)
    a08c:	dcc00517 	ldw	r19,20(sp)
    a090:	dc800417 	ldw	r18,16(sp)
    a094:	dc400317 	ldw	r17,12(sp)
    a098:	dc000217 	ldw	r16,8(sp)
    a09c:	dec00704 	addi	sp,sp,28
    a0a0:	f800283a 	ret
    a0a4:	4010953a 	slli	r8,r8,20
    a0a8:	1a07c83a 	sub	r3,r3,r8
    a0ac:	003ff206 	br	a078 <__alt_mem_Flash_flash_data+0xf400a078>

0000a0b0 <_mprec_log10>:
    a0b0:	defffe04 	addi	sp,sp,-8
    a0b4:	dc000015 	stw	r16,0(sp)
    a0b8:	dfc00115 	stw	ra,4(sp)
    a0bc:	008005c4 	movi	r2,23
    a0c0:	2021883a 	mov	r16,r4
    a0c4:	11000d0e 	bge	r2,r4,a0fc <_mprec_log10+0x4c>
    a0c8:	0005883a 	mov	r2,zero
    a0cc:	00cffc34 	movhi	r3,16368
    a0d0:	843fffc4 	addi	r16,r16,-1
    a0d4:	1009883a 	mov	r4,r2
    a0d8:	180b883a 	mov	r5,r3
    a0dc:	000d883a 	mov	r6,zero
    a0e0:	01d00934 	movhi	r7,16420
    a0e4:	000ff980 	call	ff98 <__muldf3>
    a0e8:	803ff91e 	bne	r16,zero,a0d0 <__alt_mem_Flash_flash_data+0xf400a0d0>
    a0ec:	dfc00117 	ldw	ra,4(sp)
    a0f0:	dc000017 	ldw	r16,0(sp)
    a0f4:	dec00204 	addi	sp,sp,8
    a0f8:	f800283a 	ret
    a0fc:	202090fa 	slli	r16,r4,3
    a100:	008000b4 	movhi	r2,2
    a104:	10bb2804 	addi	r2,r2,-4960
    a108:	1421883a 	add	r16,r2,r16
    a10c:	80800017 	ldw	r2,0(r16)
    a110:	80c00117 	ldw	r3,4(r16)
    a114:	dfc00117 	ldw	ra,4(sp)
    a118:	dc000017 	ldw	r16,0(sp)
    a11c:	dec00204 	addi	sp,sp,8
    a120:	f800283a 	ret

0000a124 <__copybits>:
    a124:	297fffc4 	addi	r5,r5,-1
    a128:	280fd17a 	srai	r7,r5,5
    a12c:	30c00417 	ldw	r3,16(r6)
    a130:	30800504 	addi	r2,r6,20
    a134:	39c00044 	addi	r7,r7,1
    a138:	18c7883a 	add	r3,r3,r3
    a13c:	39cf883a 	add	r7,r7,r7
    a140:	18c7883a 	add	r3,r3,r3
    a144:	39cf883a 	add	r7,r7,r7
    a148:	10c7883a 	add	r3,r2,r3
    a14c:	21cf883a 	add	r7,r4,r7
    a150:	10c00d2e 	bgeu	r2,r3,a188 <__copybits+0x64>
    a154:	200b883a 	mov	r5,r4
    a158:	12000017 	ldw	r8,0(r2)
    a15c:	29400104 	addi	r5,r5,4
    a160:	10800104 	addi	r2,r2,4
    a164:	2a3fff15 	stw	r8,-4(r5)
    a168:	10fffb36 	bltu	r2,r3,a158 <__alt_mem_Flash_flash_data+0xf400a158>
    a16c:	1985c83a 	sub	r2,r3,r6
    a170:	10bffac4 	addi	r2,r2,-21
    a174:	1004d0ba 	srli	r2,r2,2
    a178:	10800044 	addi	r2,r2,1
    a17c:	1085883a 	add	r2,r2,r2
    a180:	1085883a 	add	r2,r2,r2
    a184:	2089883a 	add	r4,r4,r2
    a188:	21c0032e 	bgeu	r4,r7,a198 <__copybits+0x74>
    a18c:	20000015 	stw	zero,0(r4)
    a190:	21000104 	addi	r4,r4,4
    a194:	21fffd36 	bltu	r4,r7,a18c <__alt_mem_Flash_flash_data+0xf400a18c>
    a198:	f800283a 	ret

0000a19c <__any_on>:
    a19c:	20c00417 	ldw	r3,16(r4)
    a1a0:	2805d17a 	srai	r2,r5,5
    a1a4:	21000504 	addi	r4,r4,20
    a1a8:	18800d0e 	bge	r3,r2,a1e0 <__any_on+0x44>
    a1ac:	18c7883a 	add	r3,r3,r3
    a1b0:	18c7883a 	add	r3,r3,r3
    a1b4:	20c7883a 	add	r3,r4,r3
    a1b8:	20c0192e 	bgeu	r4,r3,a220 <__any_on+0x84>
    a1bc:	18bfff17 	ldw	r2,-4(r3)
    a1c0:	18ffff04 	addi	r3,r3,-4
    a1c4:	1000041e 	bne	r2,zero,a1d8 <__any_on+0x3c>
    a1c8:	20c0142e 	bgeu	r4,r3,a21c <__any_on+0x80>
    a1cc:	18ffff04 	addi	r3,r3,-4
    a1d0:	19400017 	ldw	r5,0(r3)
    a1d4:	283ffc26 	beq	r5,zero,a1c8 <__alt_mem_Flash_flash_data+0xf400a1c8>
    a1d8:	00800044 	movi	r2,1
    a1dc:	f800283a 	ret
    a1e0:	10c00a0e 	bge	r2,r3,a20c <__any_on+0x70>
    a1e4:	1085883a 	add	r2,r2,r2
    a1e8:	1085883a 	add	r2,r2,r2
    a1ec:	294007cc 	andi	r5,r5,31
    a1f0:	2087883a 	add	r3,r4,r2
    a1f4:	283ff026 	beq	r5,zero,a1b8 <__alt_mem_Flash_flash_data+0xf400a1b8>
    a1f8:	19800017 	ldw	r6,0(r3)
    a1fc:	3144d83a 	srl	r2,r6,r5
    a200:	114a983a 	sll	r5,r2,r5
    a204:	29bff41e 	bne	r5,r6,a1d8 <__alt_mem_Flash_flash_data+0xf400a1d8>
    a208:	003feb06 	br	a1b8 <__alt_mem_Flash_flash_data+0xf400a1b8>
    a20c:	1085883a 	add	r2,r2,r2
    a210:	1085883a 	add	r2,r2,r2
    a214:	2087883a 	add	r3,r4,r2
    a218:	003fe706 	br	a1b8 <__alt_mem_Flash_flash_data+0xf400a1b8>
    a21c:	f800283a 	ret
    a220:	0005883a 	mov	r2,zero
    a224:	f800283a 	ret

0000a228 <__fpclassifyd>:
    a228:	00a00034 	movhi	r2,32768
    a22c:	10bfffc4 	addi	r2,r2,-1
    a230:	2884703a 	and	r2,r5,r2
    a234:	10000726 	beq	r2,zero,a254 <__fpclassifyd+0x2c>
    a238:	00fffc34 	movhi	r3,65520
    a23c:	019ff834 	movhi	r6,32736
    a240:	28c7883a 	add	r3,r5,r3
    a244:	31bfffc4 	addi	r6,r6,-1
    a248:	30c00536 	bltu	r6,r3,a260 <__fpclassifyd+0x38>
    a24c:	00800104 	movi	r2,4
    a250:	f800283a 	ret
    a254:	2000021e 	bne	r4,zero,a260 <__fpclassifyd+0x38>
    a258:	00800084 	movi	r2,2
    a25c:	f800283a 	ret
    a260:	00dffc34 	movhi	r3,32752
    a264:	019ff834 	movhi	r6,32736
    a268:	28cb883a 	add	r5,r5,r3
    a26c:	31bfffc4 	addi	r6,r6,-1
    a270:	317ff62e 	bgeu	r6,r5,a24c <__alt_mem_Flash_flash_data+0xf400a24c>
    a274:	01400434 	movhi	r5,16
    a278:	297fffc4 	addi	r5,r5,-1
    a27c:	28800236 	bltu	r5,r2,a288 <__fpclassifyd+0x60>
    a280:	008000c4 	movi	r2,3
    a284:	f800283a 	ret
    a288:	10c00226 	beq	r2,r3,a294 <__fpclassifyd+0x6c>
    a28c:	0005883a 	mov	r2,zero
    a290:	f800283a 	ret
    a294:	2005003a 	cmpeq	r2,r4,zero
    a298:	f800283a 	ret

0000a29c <_sbrk_r>:
    a29c:	defffd04 	addi	sp,sp,-12
    a2a0:	dc000015 	stw	r16,0(sp)
    a2a4:	040000b4 	movhi	r16,2
    a2a8:	dc400115 	stw	r17,4(sp)
    a2ac:	840e2704 	addi	r16,r16,14492
    a2b0:	2023883a 	mov	r17,r4
    a2b4:	2809883a 	mov	r4,r5
    a2b8:	dfc00215 	stw	ra,8(sp)
    a2bc:	80000015 	stw	zero,0(r16)
    a2c0:	00119b40 	call	119b4 <sbrk>
    a2c4:	00ffffc4 	movi	r3,-1
    a2c8:	10c00526 	beq	r2,r3,a2e0 <_sbrk_r+0x44>
    a2cc:	dfc00217 	ldw	ra,8(sp)
    a2d0:	dc400117 	ldw	r17,4(sp)
    a2d4:	dc000017 	ldw	r16,0(sp)
    a2d8:	dec00304 	addi	sp,sp,12
    a2dc:	f800283a 	ret
    a2e0:	80c00017 	ldw	r3,0(r16)
    a2e4:	183ff926 	beq	r3,zero,a2cc <__alt_mem_Flash_flash_data+0xf400a2cc>
    a2e8:	88c00015 	stw	r3,0(r17)
    a2ec:	003ff706 	br	a2cc <__alt_mem_Flash_flash_data+0xf400a2cc>

0000a2f0 <__sread>:
    a2f0:	defffe04 	addi	sp,sp,-8
    a2f4:	dc000015 	stw	r16,0(sp)
    a2f8:	2821883a 	mov	r16,r5
    a2fc:	2940038f 	ldh	r5,14(r5)
    a300:	dfc00115 	stw	ra,4(sp)
    a304:	000d6700 	call	d670 <_read_r>
    a308:	10000716 	blt	r2,zero,a328 <__sread+0x38>
    a30c:	80c01417 	ldw	r3,80(r16)
    a310:	1887883a 	add	r3,r3,r2
    a314:	80c01415 	stw	r3,80(r16)
    a318:	dfc00117 	ldw	ra,4(sp)
    a31c:	dc000017 	ldw	r16,0(sp)
    a320:	dec00204 	addi	sp,sp,8
    a324:	f800283a 	ret
    a328:	80c0030b 	ldhu	r3,12(r16)
    a32c:	18fbffcc 	andi	r3,r3,61439
    a330:	80c0030d 	sth	r3,12(r16)
    a334:	dfc00117 	ldw	ra,4(sp)
    a338:	dc000017 	ldw	r16,0(sp)
    a33c:	dec00204 	addi	sp,sp,8
    a340:	f800283a 	ret

0000a344 <__seofread>:
    a344:	0005883a 	mov	r2,zero
    a348:	f800283a 	ret

0000a34c <__swrite>:
    a34c:	2880030b 	ldhu	r2,12(r5)
    a350:	defffb04 	addi	sp,sp,-20
    a354:	dcc00315 	stw	r19,12(sp)
    a358:	dc800215 	stw	r18,8(sp)
    a35c:	dc400115 	stw	r17,4(sp)
    a360:	dc000015 	stw	r16,0(sp)
    a364:	dfc00415 	stw	ra,16(sp)
    a368:	10c0400c 	andi	r3,r2,256
    a36c:	2821883a 	mov	r16,r5
    a370:	2027883a 	mov	r19,r4
    a374:	3025883a 	mov	r18,r6
    a378:	3823883a 	mov	r17,r7
    a37c:	18000526 	beq	r3,zero,a394 <__swrite+0x48>
    a380:	2940038f 	ldh	r5,14(r5)
    a384:	000d883a 	mov	r6,zero
    a388:	01c00084 	movi	r7,2
    a38c:	000d4b80 	call	d4b8 <_lseek_r>
    a390:	8080030b 	ldhu	r2,12(r16)
    a394:	8140038f 	ldh	r5,14(r16)
    a398:	10bbffcc 	andi	r2,r2,61439
    a39c:	9809883a 	mov	r4,r19
    a3a0:	900d883a 	mov	r6,r18
    a3a4:	880f883a 	mov	r7,r17
    a3a8:	8080030d 	sth	r2,12(r16)
    a3ac:	dfc00417 	ldw	ra,16(sp)
    a3b0:	dcc00317 	ldw	r19,12(sp)
    a3b4:	dc800217 	ldw	r18,8(sp)
    a3b8:	dc400117 	ldw	r17,4(sp)
    a3bc:	dc000017 	ldw	r16,0(sp)
    a3c0:	dec00504 	addi	sp,sp,20
    a3c4:	000caf41 	jmpi	caf4 <_write_r>

0000a3c8 <__sseek>:
    a3c8:	defffe04 	addi	sp,sp,-8
    a3cc:	dc000015 	stw	r16,0(sp)
    a3d0:	2821883a 	mov	r16,r5
    a3d4:	2940038f 	ldh	r5,14(r5)
    a3d8:	dfc00115 	stw	ra,4(sp)
    a3dc:	000d4b80 	call	d4b8 <_lseek_r>
    a3e0:	00ffffc4 	movi	r3,-1
    a3e4:	10c00826 	beq	r2,r3,a408 <__sseek+0x40>
    a3e8:	80c0030b 	ldhu	r3,12(r16)
    a3ec:	80801415 	stw	r2,80(r16)
    a3f0:	18c40014 	ori	r3,r3,4096
    a3f4:	80c0030d 	sth	r3,12(r16)
    a3f8:	dfc00117 	ldw	ra,4(sp)
    a3fc:	dc000017 	ldw	r16,0(sp)
    a400:	dec00204 	addi	sp,sp,8
    a404:	f800283a 	ret
    a408:	80c0030b 	ldhu	r3,12(r16)
    a40c:	18fbffcc 	andi	r3,r3,61439
    a410:	80c0030d 	sth	r3,12(r16)
    a414:	dfc00117 	ldw	ra,4(sp)
    a418:	dc000017 	ldw	r16,0(sp)
    a41c:	dec00204 	addi	sp,sp,8
    a420:	f800283a 	ret

0000a424 <__sclose>:
    a424:	2940038f 	ldh	r5,14(r5)
    a428:	000cb501 	jmpi	cb50 <_close_r>

0000a42c <__ssprint_r>:
    a42c:	30800217 	ldw	r2,8(r6)
    a430:	defff604 	addi	sp,sp,-40
    a434:	ddc00715 	stw	r23,28(sp)
    a438:	dc800215 	stw	r18,8(sp)
    a43c:	dfc00915 	stw	ra,36(sp)
    a440:	df000815 	stw	fp,32(sp)
    a444:	dd800615 	stw	r22,24(sp)
    a448:	dd400515 	stw	r21,20(sp)
    a44c:	dd000415 	stw	r20,16(sp)
    a450:	dcc00315 	stw	r19,12(sp)
    a454:	dc400115 	stw	r17,4(sp)
    a458:	dc000015 	stw	r16,0(sp)
    a45c:	3025883a 	mov	r18,r6
    a460:	35c00017 	ldw	r23,0(r6)
    a464:	10005626 	beq	r2,zero,a5c0 <__ssprint_r+0x194>
    a468:	2027883a 	mov	r19,r4
    a46c:	28800217 	ldw	r2,8(r5)
    a470:	29000017 	ldw	r4,0(r5)
    a474:	2823883a 	mov	r17,r5
    a478:	0039883a 	mov	fp,zero
    a47c:	0021883a 	mov	r16,zero
    a480:	80003926 	beq	r16,zero,a568 <__ssprint_r+0x13c>
    a484:	102b883a 	mov	r21,r2
    a488:	102d883a 	mov	r22,r2
    a48c:	80803a36 	bltu	r16,r2,a578 <__ssprint_r+0x14c>
    a490:	88c0030b 	ldhu	r3,12(r17)
    a494:	1881200c 	andi	r2,r3,1152
    a498:	10002626 	beq	r2,zero,a534 <__ssprint_r+0x108>
    a49c:	88800517 	ldw	r2,20(r17)
    a4a0:	89400417 	ldw	r5,16(r17)
    a4a4:	81c00044 	addi	r7,r16,1
    a4a8:	108d883a 	add	r6,r2,r2
    a4ac:	3085883a 	add	r2,r6,r2
    a4b0:	100cd7fa 	srli	r6,r2,31
    a4b4:	216dc83a 	sub	r22,r4,r5
    a4b8:	3d89883a 	add	r4,r7,r22
    a4bc:	3085883a 	add	r2,r6,r2
    a4c0:	102bd07a 	srai	r21,r2,1
    a4c4:	a80d883a 	mov	r6,r21
    a4c8:	a900022e 	bgeu	r21,r4,a4d4 <__ssprint_r+0xa8>
    a4cc:	202b883a 	mov	r21,r4
    a4d0:	200d883a 	mov	r6,r4
    a4d4:	18c1000c 	andi	r3,r3,1024
    a4d8:	9809883a 	mov	r4,r19
    a4dc:	18002926 	beq	r3,zero,a584 <__ssprint_r+0x158>
    a4e0:	300b883a 	mov	r5,r6
    a4e4:	00088c00 	call	88c0 <_malloc_r>
    a4e8:	1029883a 	mov	r20,r2
    a4ec:	10002b26 	beq	r2,zero,a59c <__ssprint_r+0x170>
    a4f0:	89400417 	ldw	r5,16(r17)
    a4f4:	1009883a 	mov	r4,r2
    a4f8:	b00d883a 	mov	r6,r22
    a4fc:	00091500 	call	9150 <memcpy>
    a500:	8880030b 	ldhu	r2,12(r17)
    a504:	00fedfc4 	movi	r3,-1153
    a508:	10c4703a 	and	r2,r2,r3
    a50c:	10802014 	ori	r2,r2,128
    a510:	8880030d 	sth	r2,12(r17)
    a514:	a589883a 	add	r4,r20,r22
    a518:	adadc83a 	sub	r22,r21,r22
    a51c:	8d400515 	stw	r21,20(r17)
    a520:	8d800215 	stw	r22,8(r17)
    a524:	8d000415 	stw	r20,16(r17)
    a528:	89000015 	stw	r4,0(r17)
    a52c:	802b883a 	mov	r21,r16
    a530:	802d883a 	mov	r22,r16
    a534:	e00b883a 	mov	r5,fp
    a538:	b00d883a 	mov	r6,r22
    a53c:	000d5140 	call	d514 <memmove>
    a540:	88800217 	ldw	r2,8(r17)
    a544:	89000017 	ldw	r4,0(r17)
    a548:	90c00217 	ldw	r3,8(r18)
    a54c:	1545c83a 	sub	r2,r2,r21
    a550:	2589883a 	add	r4,r4,r22
    a554:	88800215 	stw	r2,8(r17)
    a558:	89000015 	stw	r4,0(r17)
    a55c:	1c21c83a 	sub	r16,r3,r16
    a560:	94000215 	stw	r16,8(r18)
    a564:	80001626 	beq	r16,zero,a5c0 <__ssprint_r+0x194>
    a568:	bf000017 	ldw	fp,0(r23)
    a56c:	bc000117 	ldw	r16,4(r23)
    a570:	bdc00204 	addi	r23,r23,8
    a574:	003fc206 	br	a480 <__alt_mem_Flash_flash_data+0xf400a480>
    a578:	802b883a 	mov	r21,r16
    a57c:	802d883a 	mov	r22,r16
    a580:	003fec06 	br	a534 <__alt_mem_Flash_flash_data+0xf400a534>
    a584:	000d6cc0 	call	d6cc <_realloc_r>
    a588:	1029883a 	mov	r20,r2
    a58c:	103fe11e 	bne	r2,zero,a514 <__alt_mem_Flash_flash_data+0xf400a514>
    a590:	89400417 	ldw	r5,16(r17)
    a594:	9809883a 	mov	r4,r19
    a598:	00081b00 	call	81b0 <_free_r>
    a59c:	88c0030b 	ldhu	r3,12(r17)
    a5a0:	00800304 	movi	r2,12
    a5a4:	98800015 	stw	r2,0(r19)
    a5a8:	18c01014 	ori	r3,r3,64
    a5ac:	88c0030d 	sth	r3,12(r17)
    a5b0:	00bfffc4 	movi	r2,-1
    a5b4:	90000215 	stw	zero,8(r18)
    a5b8:	90000115 	stw	zero,4(r18)
    a5bc:	00000206 	br	a5c8 <__ssprint_r+0x19c>
    a5c0:	90000115 	stw	zero,4(r18)
    a5c4:	0005883a 	mov	r2,zero
    a5c8:	dfc00917 	ldw	ra,36(sp)
    a5cc:	df000817 	ldw	fp,32(sp)
    a5d0:	ddc00717 	ldw	r23,28(sp)
    a5d4:	dd800617 	ldw	r22,24(sp)
    a5d8:	dd400517 	ldw	r21,20(sp)
    a5dc:	dd000417 	ldw	r20,16(sp)
    a5e0:	dcc00317 	ldw	r19,12(sp)
    a5e4:	dc800217 	ldw	r18,8(sp)
    a5e8:	dc400117 	ldw	r17,4(sp)
    a5ec:	dc000017 	ldw	r16,0(sp)
    a5f0:	dec00a04 	addi	sp,sp,40
    a5f4:	f800283a 	ret

0000a5f8 <___svfiprintf_internal_r>:
    a5f8:	2880030b 	ldhu	r2,12(r5)
    a5fc:	deffc904 	addi	sp,sp,-220
    a600:	dd403215 	stw	r21,200(sp)
    a604:	dfc03615 	stw	ra,216(sp)
    a608:	df003515 	stw	fp,212(sp)
    a60c:	ddc03415 	stw	r23,208(sp)
    a610:	dd803315 	stw	r22,204(sp)
    a614:	dd003115 	stw	r20,196(sp)
    a618:	dcc03015 	stw	r19,192(sp)
    a61c:	dc802f15 	stw	r18,188(sp)
    a620:	dc402e15 	stw	r17,184(sp)
    a624:	dc002d15 	stw	r16,180(sp)
    a628:	d9402715 	stw	r5,156(sp)
    a62c:	d9002915 	stw	r4,164(sp)
    a630:	1080200c 	andi	r2,r2,128
    a634:	d9c02315 	stw	r7,140(sp)
    a638:	302b883a 	mov	r21,r6
    a63c:	10000226 	beq	r2,zero,a648 <___svfiprintf_internal_r+0x50>
    a640:	28800417 	ldw	r2,16(r5)
    a644:	1003ce26 	beq	r2,zero,b580 <___svfiprintf_internal_r+0xf88>
    a648:	dac01a04 	addi	r11,sp,104
    a64c:	da8019c4 	addi	r10,sp,103
    a650:	dc802917 	ldw	r18,164(sp)
    a654:	dd002717 	ldw	r20,156(sp)
    a658:	04c000b4 	movhi	r19,2
    a65c:	dac01e15 	stw	r11,120(sp)
    a660:	5a97c83a 	sub	r11,r11,r10
    a664:	9cfb5a04 	addi	r19,r19,-4760
    a668:	da801f15 	stw	r10,124(sp)
    a66c:	dec01a15 	stw	sp,104(sp)
    a670:	d8001c15 	stw	zero,112(sp)
    a674:	d8001b15 	stw	zero,108(sp)
    a678:	d811883a 	mov	r8,sp
    a67c:	d8002a15 	stw	zero,168(sp)
    a680:	d8002415 	stw	zero,144(sp)
    a684:	dac02b15 	stw	r11,172(sp)
    a688:	a8800007 	ldb	r2,0(r21)
    a68c:	10026a26 	beq	r2,zero,b038 <___svfiprintf_internal_r+0xa40>
    a690:	01000944 	movi	r4,37
    a694:	11026826 	beq	r2,r4,b038 <___svfiprintf_internal_r+0xa40>
    a698:	a805883a 	mov	r2,r21
    a69c:	00000106 	br	a6a4 <___svfiprintf_internal_r+0xac>
    a6a0:	19000326 	beq	r3,r4,a6b0 <___svfiprintf_internal_r+0xb8>
    a6a4:	10800044 	addi	r2,r2,1
    a6a8:	10c00007 	ldb	r3,0(r2)
    a6ac:	183ffc1e 	bne	r3,zero,a6a0 <__alt_mem_Flash_flash_data+0xf400a6a0>
    a6b0:	1561c83a 	sub	r16,r2,r21
    a6b4:	102d883a 	mov	r22,r2
    a6b8:	80000e26 	beq	r16,zero,a6f4 <___svfiprintf_internal_r+0xfc>
    a6bc:	d8c01c17 	ldw	r3,112(sp)
    a6c0:	d8801b17 	ldw	r2,108(sp)
    a6c4:	45400015 	stw	r21,0(r8)
    a6c8:	1c07883a 	add	r3,r3,r16
    a6cc:	10800044 	addi	r2,r2,1
    a6d0:	d8c01c15 	stw	r3,112(sp)
    a6d4:	44000115 	stw	r16,4(r8)
    a6d8:	d8801b15 	stw	r2,108(sp)
    a6dc:	00c001c4 	movi	r3,7
    a6e0:	1882d816 	blt	r3,r2,b244 <___svfiprintf_internal_r+0xc4c>
    a6e4:	42000204 	addi	r8,r8,8
    a6e8:	da802417 	ldw	r10,144(sp)
    a6ec:	5415883a 	add	r10,r10,r16
    a6f0:	da802415 	stw	r10,144(sp)
    a6f4:	b0800007 	ldb	r2,0(r22)
    a6f8:	10027526 	beq	r2,zero,b0d0 <___svfiprintf_internal_r+0xad8>
    a6fc:	b1000047 	ldb	r4,1(r22)
    a700:	b5400044 	addi	r21,r22,1
    a704:	d8001d85 	stb	zero,118(sp)
    a708:	000d883a 	mov	r6,zero
    a70c:	043fffc4 	movi	r16,-1
    a710:	d8002115 	stw	zero,132(sp)
    a714:	0023883a 	mov	r17,zero
    a718:	00c01604 	movi	r3,88
    a71c:	01400244 	movi	r5,9
    a720:	02400a84 	movi	r9,42
    a724:	01c01b04 	movi	r7,108
    a728:	ad400044 	addi	r21,r21,1
    a72c:	20bff804 	addi	r2,r4,-32
    a730:	18819736 	bltu	r3,r2,ad90 <___svfiprintf_internal_r+0x798>
    a734:	100490ba 	slli	r2,r2,2
    a738:	02c00074 	movhi	r11,1
    a73c:	5ae9d304 	addi	r11,r11,-22708
    a740:	12c5883a 	add	r2,r2,r11
    a744:	10800017 	ldw	r2,0(r2)
    a748:	1000683a 	jmp	r2
    a74c:	0000ac88 	cmpgei	zero,zero,690
    a750:	0000ad90 	cmplti	zero,zero,694
    a754:	0000ad90 	cmplti	zero,zero,694
    a758:	0000ac7c 	xorhi	zero,zero,689
    a75c:	0000ad90 	cmplti	zero,zero,694
    a760:	0000ad90 	cmplti	zero,zero,694
    a764:	0000ad90 	cmplti	zero,zero,694
    a768:	0000ad90 	cmplti	zero,zero,694
    a76c:	0000ad90 	cmplti	zero,zero,694
    a770:	0000ad90 	cmplti	zero,zero,694
    a774:	0000a9a8 	cmpgeui	zero,zero,678
    a778:	0000adc4 	movi	zero,695
    a77c:	0000ad90 	cmplti	zero,zero,694
    a780:	0000a9d0 	cmplti	zero,zero,679
    a784:	0000add0 	cmplti	zero,zero,695
    a788:	0000ad90 	cmplti	zero,zero,694
    a78c:	0000adb8 	rdprs	zero,zero,694
    a790:	0000ad58 	cmpnei	zero,zero,693
    a794:	0000ad58 	cmpnei	zero,zero,693
    a798:	0000ad58 	cmpnei	zero,zero,693
    a79c:	0000ad58 	cmpnei	zero,zero,693
    a7a0:	0000ad58 	cmpnei	zero,zero,693
    a7a4:	0000ad58 	cmpnei	zero,zero,693
    a7a8:	0000ad58 	cmpnei	zero,zero,693
    a7ac:	0000ad58 	cmpnei	zero,zero,693
    a7b0:	0000ad58 	cmpnei	zero,zero,693
    a7b4:	0000ad90 	cmplti	zero,zero,694
    a7b8:	0000ad90 	cmplti	zero,zero,694
    a7bc:	0000ad90 	cmplti	zero,zero,694
    a7c0:	0000ad90 	cmplti	zero,zero,694
    a7c4:	0000ad90 	cmplti	zero,zero,694
    a7c8:	0000ad90 	cmplti	zero,zero,694
    a7cc:	0000ad90 	cmplti	zero,zero,694
    a7d0:	0000ad90 	cmplti	zero,zero,694
    a7d4:	0000ad90 	cmplti	zero,zero,694
    a7d8:	0000ad90 	cmplti	zero,zero,694
    a7dc:	0000acf0 	cmpltui	zero,zero,691
    a7e0:	0000ad90 	cmplti	zero,zero,694
    a7e4:	0000ad90 	cmplti	zero,zero,694
    a7e8:	0000ad90 	cmplti	zero,zero,694
    a7ec:	0000ad90 	cmplti	zero,zero,694
    a7f0:	0000ad90 	cmplti	zero,zero,694
    a7f4:	0000ad90 	cmplti	zero,zero,694
    a7f8:	0000ad90 	cmplti	zero,zero,694
    a7fc:	0000ad90 	cmplti	zero,zero,694
    a800:	0000ad90 	cmplti	zero,zero,694
    a804:	0000ad90 	cmplti	zero,zero,694
    a808:	0000a97c 	xorhi	zero,zero,677
    a80c:	0000ad90 	cmplti	zero,zero,694
    a810:	0000ad90 	cmplti	zero,zero,694
    a814:	0000ad90 	cmplti	zero,zero,694
    a818:	0000ad90 	cmplti	zero,zero,694
    a81c:	0000ad90 	cmplti	zero,zero,694
    a820:	0000a8b0 	cmpltui	zero,zero,674
    a824:	0000ad90 	cmplti	zero,zero,694
    a828:	0000ad90 	cmplti	zero,zero,694
    a82c:	0000abdc 	xori	zero,zero,687
    a830:	0000ad90 	cmplti	zero,zero,694
    a834:	0000ad90 	cmplti	zero,zero,694
    a838:	0000ad90 	cmplti	zero,zero,694
    a83c:	0000ad90 	cmplti	zero,zero,694
    a840:	0000ad90 	cmplti	zero,zero,694
    a844:	0000ad90 	cmplti	zero,zero,694
    a848:	0000ad90 	cmplti	zero,zero,694
    a84c:	0000ad90 	cmplti	zero,zero,694
    a850:	0000ad90 	cmplti	zero,zero,694
    a854:	0000ad90 	cmplti	zero,zero,694
    a858:	0000aac8 	cmpgei	zero,zero,683
    a85c:	0000aa88 	cmpgei	zero,zero,682
    a860:	0000ad90 	cmplti	zero,zero,694
    a864:	0000ad90 	cmplti	zero,zero,694
    a868:	0000ad90 	cmplti	zero,zero,694
    a86c:	0000ac38 	rdprs	zero,zero,688
    a870:	0000aa88 	cmpgei	zero,zero,682
    a874:	0000ad90 	cmplti	zero,zero,694
    a878:	0000ad90 	cmplti	zero,zero,694
    a87c:	0000ac24 	muli	zero,zero,688
    a880:	0000ad90 	cmplti	zero,zero,694
    a884:	0000ac44 	movi	zero,689
    a888:	0000a980 	call	a98 <task2+0x1c>
    a88c:	0000aa44 	movi	zero,681
    a890:	0000aa38 	rdprs	zero,zero,680
    a894:	0000ad90 	cmplti	zero,zero,694
    a898:	0000a9dc 	xori	zero,zero,679
    a89c:	0000ad90 	cmplti	zero,zero,694
    a8a0:	0000a8b4 	movhi	zero,674
    a8a4:	0000ad90 	cmplti	zero,zero,694
    a8a8:	0000ad90 	cmplti	zero,zero,694
    a8ac:	0000aca4 	muli	zero,zero,690
    a8b0:	8c400414 	ori	r17,r17,16
    a8b4:	8880080c 	andi	r2,r17,32
    a8b8:	10029626 	beq	r2,zero,b314 <___svfiprintf_internal_r+0xd1c>
    a8bc:	da802317 	ldw	r10,140(sp)
    a8c0:	dac02317 	ldw	r11,140(sp)
    a8c4:	00800044 	movi	r2,1
    a8c8:	52400017 	ldw	r9,0(r10)
    a8cc:	52800117 	ldw	r10,4(r10)
    a8d0:	5ac00204 	addi	r11,r11,8
    a8d4:	dac02315 	stw	r11,140(sp)
    a8d8:	4a86b03a 	or	r3,r9,r10
    a8dc:	d8001d85 	stb	zero,118(sp)
    a8e0:	8039883a 	mov	fp,r16
    a8e4:	0017883a 	mov	r11,zero
    a8e8:	80000216 	blt	r16,zero,a8f4 <___svfiprintf_internal_r+0x2fc>
    a8ec:	013fdfc4 	movi	r4,-129
    a8f0:	8922703a 	and	r17,r17,r4
    a8f4:	1801d21e 	bne	r3,zero,b040 <___svfiprintf_internal_r+0xa48>
    a8f8:	80024626 	beq	r16,zero,b214 <___svfiprintf_internal_r+0xc1c>
    a8fc:	10803fcc 	andi	r2,r2,255
    a900:	00c00044 	movi	r3,1
    a904:	10c2b426 	beq	r2,r3,b3d8 <___svfiprintf_internal_r+0xde0>
    a908:	00c00084 	movi	r3,2
    a90c:	10c25d26 	beq	r2,r3,b284 <___svfiprintf_internal_r+0xc8c>
    a910:	d8c01a04 	addi	r3,sp,104
    a914:	4808d0fa 	srli	r4,r9,3
    a918:	500a977a 	slli	r5,r10,29
    a91c:	5014d0fa 	srli	r10,r10,3
    a920:	4a4001cc 	andi	r9,r9,7
    a924:	48800c04 	addi	r2,r9,48
    a928:	18ffffc4 	addi	r3,r3,-1
    a92c:	2912b03a 	or	r9,r5,r4
    a930:	18800005 	stb	r2,0(r3)
    a934:	4a88b03a 	or	r4,r9,r10
    a938:	203ff61e 	bne	r4,zero,a914 <__alt_mem_Flash_flash_data+0xf400a914>
    a93c:	8900004c 	andi	r4,r17,1
    a940:	d8c02615 	stw	r3,152(sp)
    a944:	2002961e 	bne	r4,zero,b3a0 <___svfiprintf_internal_r+0xda8>
    a948:	da801e17 	ldw	r10,120(sp)
    a94c:	50f9c83a 	sub	fp,r10,r3
    a950:	df002015 	stw	fp,128(sp)
    a954:	e400010e 	bge	fp,r16,a95c <___svfiprintf_internal_r+0x364>
    a958:	dc002015 	stw	r16,128(sp)
    a95c:	5ac03fcc 	andi	r11,r11,255
    a960:	5ac0201c 	xori	r11,r11,128
    a964:	5affe004 	addi	r11,r11,-128
    a968:	58006326 	beq	r11,zero,aaf8 <___svfiprintf_internal_r+0x500>
    a96c:	d8c02017 	ldw	r3,128(sp)
    a970:	18c00044 	addi	r3,r3,1
    a974:	d8c02015 	stw	r3,128(sp)
    a978:	00005f06 	br	aaf8 <___svfiprintf_internal_r+0x500>
    a97c:	8c400414 	ori	r17,r17,16
    a980:	8880080c 	andi	r2,r17,32
    a984:	10027926 	beq	r2,zero,b36c <___svfiprintf_internal_r+0xd74>
    a988:	dac02317 	ldw	r11,140(sp)
    a98c:	0005883a 	mov	r2,zero
    a990:	5a400017 	ldw	r9,0(r11)
    a994:	5a800117 	ldw	r10,4(r11)
    a998:	5ac00204 	addi	r11,r11,8
    a99c:	dac02315 	stw	r11,140(sp)
    a9a0:	4a86b03a 	or	r3,r9,r10
    a9a4:	003fcd06 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    a9a8:	da802317 	ldw	r10,140(sp)
    a9ac:	dac02317 	ldw	r11,140(sp)
    a9b0:	52800017 	ldw	r10,0(r10)
    a9b4:	58800104 	addi	r2,r11,4
    a9b8:	da802115 	stw	r10,132(sp)
    a9bc:	50028c0e 	bge	r10,zero,b3f0 <___svfiprintf_internal_r+0xdf8>
    a9c0:	da802117 	ldw	r10,132(sp)
    a9c4:	d8802315 	stw	r2,140(sp)
    a9c8:	0295c83a 	sub	r10,zero,r10
    a9cc:	da802115 	stw	r10,132(sp)
    a9d0:	8c400114 	ori	r17,r17,4
    a9d4:	a9000007 	ldb	r4,0(r21)
    a9d8:	003f5306 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    a9dc:	da802317 	ldw	r10,140(sp)
    a9e0:	dac02317 	ldw	r11,140(sp)
    a9e4:	d8001d85 	stb	zero,118(sp)
    a9e8:	52800017 	ldw	r10,0(r10)
    a9ec:	5dc00104 	addi	r23,r11,4
    a9f0:	da802615 	stw	r10,152(sp)
    a9f4:	5002d626 	beq	r10,zero,b550 <___svfiprintf_internal_r+0xf58>
    a9f8:	d9002617 	ldw	r4,152(sp)
    a9fc:	8002cc16 	blt	r16,zero,b530 <___svfiprintf_internal_r+0xf38>
    aa00:	000b883a 	mov	r5,zero
    aa04:	800d883a 	mov	r6,r16
    aa08:	da002c15 	stw	r8,176(sp)
    aa0c:	00090680 	call	9068 <memchr>
    aa10:	da002c17 	ldw	r8,176(sp)
    aa14:	1002f026 	beq	r2,zero,b5d8 <___svfiprintf_internal_r+0xfe0>
    aa18:	d8c02617 	ldw	r3,152(sp)
    aa1c:	10f9c83a 	sub	fp,r2,r3
    aa20:	8700010e 	bge	r16,fp,aa28 <___svfiprintf_internal_r+0x430>
    aa24:	8039883a 	mov	fp,r16
    aa28:	dac01d83 	ldbu	r11,118(sp)
    aa2c:	ddc02315 	stw	r23,140(sp)
    aa30:	0021883a 	mov	r16,zero
    aa34:	003fc606 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    aa38:	8c400814 	ori	r17,r17,32
    aa3c:	a9000007 	ldb	r4,0(r21)
    aa40:	003f3906 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    aa44:	da802317 	ldw	r10,140(sp)
    aa48:	00800c04 	movi	r2,48
    aa4c:	dac02317 	ldw	r11,140(sp)
    aa50:	52400017 	ldw	r9,0(r10)
    aa54:	d8801d05 	stb	r2,116(sp)
    aa58:	00801e04 	movi	r2,120
    aa5c:	d8801d45 	stb	r2,117(sp)
    aa60:	008000b4 	movhi	r2,2
    aa64:	10baf104 	addi	r2,r2,-5180
    aa68:	5ac00104 	addi	r11,r11,4
    aa6c:	d8802a15 	stw	r2,168(sp)
    aa70:	0015883a 	mov	r10,zero
    aa74:	8c400094 	ori	r17,r17,2
    aa78:	dac02315 	stw	r11,140(sp)
    aa7c:	00800084 	movi	r2,2
    aa80:	4807883a 	mov	r3,r9
    aa84:	003f9506 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    aa88:	d9801d85 	stb	r6,118(sp)
    aa8c:	8880080c 	andi	r2,r17,32
    aa90:	d8c02317 	ldw	r3,140(sp)
    aa94:	10009b26 	beq	r2,zero,ad04 <___svfiprintf_internal_r+0x70c>
    aa98:	dac02317 	ldw	r11,140(sp)
    aa9c:	18800117 	ldw	r2,4(r3)
    aaa0:	1a400017 	ldw	r9,0(r3)
    aaa4:	5ac00204 	addi	r11,r11,8
    aaa8:	dac02315 	stw	r11,140(sp)
    aaac:	1015883a 	mov	r10,r2
    aab0:	10009f16 	blt	r2,zero,ad30 <___svfiprintf_internal_r+0x738>
    aab4:	dac01d83 	ldbu	r11,118(sp)
    aab8:	8039883a 	mov	fp,r16
    aabc:	00800044 	movi	r2,1
    aac0:	4a86b03a 	or	r3,r9,r10
    aac4:	003f8806 	br	a8e8 <__alt_mem_Flash_flash_data+0xf400a8e8>
    aac8:	dac02317 	ldw	r11,140(sp)
    aacc:	00c00044 	movi	r3,1
    aad0:	da801004 	addi	r10,sp,64
    aad4:	58800017 	ldw	r2,0(r11)
    aad8:	5ac00104 	addi	r11,r11,4
    aadc:	d8c02015 	stw	r3,128(sp)
    aae0:	d8001d85 	stb	zero,118(sp)
    aae4:	d8801005 	stb	r2,64(sp)
    aae8:	dac02315 	stw	r11,140(sp)
    aaec:	1839883a 	mov	fp,r3
    aaf0:	da802615 	stw	r10,152(sp)
    aaf4:	0021883a 	mov	r16,zero
    aaf8:	8a80008c 	andi	r10,r17,2
    aafc:	da802215 	stw	r10,136(sp)
    ab00:	50000326 	beq	r10,zero,ab10 <___svfiprintf_internal_r+0x518>
    ab04:	dac02017 	ldw	r11,128(sp)
    ab08:	5ac00084 	addi	r11,r11,2
    ab0c:	dac02015 	stw	r11,128(sp)
    ab10:	88c0210c 	andi	r3,r17,132
    ab14:	d8c02515 	stw	r3,148(sp)
    ab18:	1800bd1e 	bne	r3,zero,ae10 <___svfiprintf_internal_r+0x818>
    ab1c:	da802117 	ldw	r10,132(sp)
    ab20:	dac02017 	ldw	r11,128(sp)
    ab24:	52edc83a 	sub	r22,r10,r11
    ab28:	0580b90e 	bge	zero,r22,ae10 <___svfiprintf_internal_r+0x818>
    ab2c:	02400404 	movi	r9,16
    ab30:	d8c01c17 	ldw	r3,112(sp)
    ab34:	d8801b17 	ldw	r2,108(sp)
    ab38:	4d829b0e 	bge	r9,r22,b5a8 <___svfiprintf_internal_r+0xfb0>
    ab3c:	014000b4 	movhi	r5,2
    ab40:	297b5e04 	addi	r5,r5,-4744
    ab44:	d9402815 	stw	r5,160(sp)
    ab48:	05c001c4 	movi	r23,7
    ab4c:	00000306 	br	ab5c <___svfiprintf_internal_r+0x564>
    ab50:	b5bffc04 	addi	r22,r22,-16
    ab54:	42000204 	addi	r8,r8,8
    ab58:	4d80150e 	bge	r9,r22,abb0 <___svfiprintf_internal_r+0x5b8>
    ab5c:	028000b4 	movhi	r10,2
    ab60:	18c00404 	addi	r3,r3,16
    ab64:	10800044 	addi	r2,r2,1
    ab68:	52bb5e04 	addi	r10,r10,-4744
    ab6c:	42800015 	stw	r10,0(r8)
    ab70:	42400115 	stw	r9,4(r8)
    ab74:	d8c01c15 	stw	r3,112(sp)
    ab78:	d8801b15 	stw	r2,108(sp)
    ab7c:	b8bff40e 	bge	r23,r2,ab50 <__alt_mem_Flash_flash_data+0xf400ab50>
    ab80:	9009883a 	mov	r4,r18
    ab84:	a00b883a 	mov	r5,r20
    ab88:	d9801a04 	addi	r6,sp,104
    ab8c:	da402c15 	stw	r9,176(sp)
    ab90:	000a42c0 	call	a42c <__ssprint_r>
    ab94:	da402c17 	ldw	r9,176(sp)
    ab98:	1001531e 	bne	r2,zero,b0e8 <___svfiprintf_internal_r+0xaf0>
    ab9c:	b5bffc04 	addi	r22,r22,-16
    aba0:	d8c01c17 	ldw	r3,112(sp)
    aba4:	d8801b17 	ldw	r2,108(sp)
    aba8:	d811883a 	mov	r8,sp
    abac:	4dbfeb16 	blt	r9,r22,ab5c <__alt_mem_Flash_flash_data+0xf400ab5c>
    abb0:	dac02817 	ldw	r11,160(sp)
    abb4:	b0c7883a 	add	r3,r22,r3
    abb8:	10800044 	addi	r2,r2,1
    abbc:	42c00015 	stw	r11,0(r8)
    abc0:	45800115 	stw	r22,4(r8)
    abc4:	d8c01c15 	stw	r3,112(sp)
    abc8:	d8801b15 	stw	r2,108(sp)
    abcc:	010001c4 	movi	r4,7
    abd0:	2081dd16 	blt	r4,r2,b348 <___svfiprintf_internal_r+0xd50>
    abd4:	42000204 	addi	r8,r8,8
    abd8:	00008f06 	br	ae18 <___svfiprintf_internal_r+0x820>
    abdc:	008000b4 	movhi	r2,2
    abe0:	10baec04 	addi	r2,r2,-5200
    abe4:	d8802a15 	stw	r2,168(sp)
    abe8:	d9801d85 	stb	r6,118(sp)
    abec:	8880080c 	andi	r2,r17,32
    abf0:	10003226 	beq	r2,zero,acbc <___svfiprintf_internal_r+0x6c4>
    abf4:	da802317 	ldw	r10,140(sp)
    abf8:	dac02317 	ldw	r11,140(sp)
    abfc:	52400017 	ldw	r9,0(r10)
    ac00:	52800117 	ldw	r10,4(r10)
    ac04:	5ac00204 	addi	r11,r11,8
    ac08:	dac02315 	stw	r11,140(sp)
    ac0c:	8880004c 	andi	r2,r17,1
    ac10:	10003426 	beq	r2,zero,ace4 <___svfiprintf_internal_r+0x6ec>
    ac14:	4a86b03a 	or	r3,r9,r10
    ac18:	1802231e 	bne	r3,zero,b4a8 <___svfiprintf_internal_r+0xeb0>
    ac1c:	00800084 	movi	r2,2
    ac20:	003f2e06 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    ac24:	a9000007 	ldb	r4,0(r21)
    ac28:	a805883a 	mov	r2,r21
    ac2c:	21c22426 	beq	r4,r7,b4c0 <___svfiprintf_internal_r+0xec8>
    ac30:	8c400414 	ori	r17,r17,16
    ac34:	003ebc06 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    ac38:	8c401014 	ori	r17,r17,64
    ac3c:	a9000007 	ldb	r4,0(r21)
    ac40:	003eb906 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    ac44:	d9801d85 	stb	r6,118(sp)
    ac48:	8880080c 	andi	r2,r17,32
    ac4c:	10020d1e 	bne	r2,zero,b484 <___svfiprintf_internal_r+0xe8c>
    ac50:	8880040c 	andi	r2,r17,16
    ac54:	10021e1e 	bne	r2,zero,b4d0 <___svfiprintf_internal_r+0xed8>
    ac58:	8c40100c 	andi	r17,r17,64
    ac5c:	88021c26 	beq	r17,zero,b4d0 <___svfiprintf_internal_r+0xed8>
    ac60:	dac02317 	ldw	r11,140(sp)
    ac64:	da802417 	ldw	r10,144(sp)
    ac68:	58800017 	ldw	r2,0(r11)
    ac6c:	5ac00104 	addi	r11,r11,4
    ac70:	dac02315 	stw	r11,140(sp)
    ac74:	1280000d 	sth	r10,0(r2)
    ac78:	003e8306 	br	a688 <__alt_mem_Flash_flash_data+0xf400a688>
    ac7c:	8c400054 	ori	r17,r17,1
    ac80:	a9000007 	ldb	r4,0(r21)
    ac84:	003ea806 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    ac88:	30803fcc 	andi	r2,r6,255
    ac8c:	1080201c 	xori	r2,r2,128
    ac90:	10bfe004 	addi	r2,r2,-128
    ac94:	1001f91e 	bne	r2,zero,b47c <___svfiprintf_internal_r+0xe84>
    ac98:	01800804 	movi	r6,32
    ac9c:	a9000007 	ldb	r4,0(r21)
    aca0:	003ea106 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    aca4:	008000b4 	movhi	r2,2
    aca8:	10baf104 	addi	r2,r2,-5180
    acac:	d8802a15 	stw	r2,168(sp)
    acb0:	d9801d85 	stb	r6,118(sp)
    acb4:	8880080c 	andi	r2,r17,32
    acb8:	103fce1e 	bne	r2,zero,abf4 <__alt_mem_Flash_flash_data+0xf400abf4>
    acbc:	8880040c 	andi	r2,r17,16
    acc0:	1001e526 	beq	r2,zero,b458 <___svfiprintf_internal_r+0xe60>
    acc4:	da802317 	ldw	r10,140(sp)
    acc8:	dac02317 	ldw	r11,140(sp)
    accc:	52400017 	ldw	r9,0(r10)
    acd0:	8880004c 	andi	r2,r17,1
    acd4:	5ac00104 	addi	r11,r11,4
    acd8:	dac02315 	stw	r11,140(sp)
    acdc:	0015883a 	mov	r10,zero
    ace0:	103fcc1e 	bne	r2,zero,ac14 <__alt_mem_Flash_flash_data+0xf400ac14>
    ace4:	00800084 	movi	r2,2
    ace8:	4a86b03a 	or	r3,r9,r10
    acec:	003efb06 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    acf0:	8c400414 	ori	r17,r17,16
    acf4:	d9801d85 	stb	r6,118(sp)
    acf8:	8880080c 	andi	r2,r17,32
    acfc:	d8c02317 	ldw	r3,140(sp)
    ad00:	103f651e 	bne	r2,zero,aa98 <__alt_mem_Flash_flash_data+0xf400aa98>
    ad04:	8880040c 	andi	r2,r17,16
    ad08:	1001c61e 	bne	r2,zero,b424 <___svfiprintf_internal_r+0xe2c>
    ad0c:	8880100c 	andi	r2,r17,64
    ad10:	1001c426 	beq	r2,zero,b424 <___svfiprintf_internal_r+0xe2c>
    ad14:	1a40000f 	ldh	r9,0(r3)
    ad18:	dac02317 	ldw	r11,140(sp)
    ad1c:	4815d7fa 	srai	r10,r9,31
    ad20:	5ac00104 	addi	r11,r11,4
    ad24:	dac02315 	stw	r11,140(sp)
    ad28:	5005883a 	mov	r2,r10
    ad2c:	103f610e 	bge	r2,zero,aab4 <__alt_mem_Flash_flash_data+0xf400aab4>
    ad30:	0253c83a 	sub	r9,zero,r9
    ad34:	4804c03a 	cmpne	r2,r9,zero
    ad38:	0295c83a 	sub	r10,zero,r10
    ad3c:	5095c83a 	sub	r10,r10,r2
    ad40:	02c00b44 	movi	r11,45
    ad44:	dac01d85 	stb	r11,118(sp)
    ad48:	8039883a 	mov	fp,r16
    ad4c:	00800044 	movi	r2,1
    ad50:	4a86b03a 	or	r3,r9,r10
    ad54:	003ee406 	br	a8e8 <__alt_mem_Flash_flash_data+0xf400a8e8>
    ad58:	a815883a 	mov	r10,r21
    ad5c:	d8002115 	stw	zero,132(sp)
    ad60:	20bff404 	addi	r2,r4,-48
    ad64:	51000007 	ldb	r4,0(r10)
    ad68:	da802117 	ldw	r10,132(sp)
    ad6c:	ad400044 	addi	r21,r21,1
    ad70:	52c002a4 	muli	r11,r10,10
    ad74:	a815883a 	mov	r10,r21
    ad78:	5885883a 	add	r2,r11,r2
    ad7c:	d8802115 	stw	r2,132(sp)
    ad80:	20bff404 	addi	r2,r4,-48
    ad84:	28bff72e 	bgeu	r5,r2,ad64 <__alt_mem_Flash_flash_data+0xf400ad64>
    ad88:	20bff804 	addi	r2,r4,-32
    ad8c:	18be692e 	bgeu	r3,r2,a734 <__alt_mem_Flash_flash_data+0xf400a734>
    ad90:	d9801d85 	stb	r6,118(sp)
    ad94:	2000ce26 	beq	r4,zero,b0d0 <___svfiprintf_internal_r+0xad8>
    ad98:	02800044 	movi	r10,1
    ad9c:	dac01004 	addi	r11,sp,64
    ada0:	da802015 	stw	r10,128(sp)
    ada4:	d9001005 	stb	r4,64(sp)
    ada8:	d8001d85 	stb	zero,118(sp)
    adac:	5039883a 	mov	fp,r10
    adb0:	dac02615 	stw	r11,152(sp)
    adb4:	003f4f06 	br	aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    adb8:	8c402014 	ori	r17,r17,128
    adbc:	a9000007 	ldb	r4,0(r21)
    adc0:	003e5906 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    adc4:	01800ac4 	movi	r6,43
    adc8:	a9000007 	ldb	r4,0(r21)
    adcc:	003e5606 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    add0:	a9000007 	ldb	r4,0(r21)
    add4:	aa800044 	addi	r10,r21,1
    add8:	22420626 	beq	r4,r9,b5f4 <___svfiprintf_internal_r+0xffc>
    addc:	20bff404 	addi	r2,r4,-48
    ade0:	502b883a 	mov	r21,r10
    ade4:	0021883a 	mov	r16,zero
    ade8:	28be5036 	bltu	r5,r2,a72c <__alt_mem_Flash_flash_data+0xf400a72c>
    adec:	a9000007 	ldb	r4,0(r21)
    adf0:	840002a4 	muli	r16,r16,10
    adf4:	ad400044 	addi	r21,r21,1
    adf8:	1421883a 	add	r16,r2,r16
    adfc:	20bff404 	addi	r2,r4,-48
    ae00:	28bffa2e 	bgeu	r5,r2,adec <__alt_mem_Flash_flash_data+0xf400adec>
    ae04:	803e490e 	bge	r16,zero,a72c <__alt_mem_Flash_flash_data+0xf400a72c>
    ae08:	043fffc4 	movi	r16,-1
    ae0c:	003e4706 	br	a72c <__alt_mem_Flash_flash_data+0xf400a72c>
    ae10:	d8c01c17 	ldw	r3,112(sp)
    ae14:	d8801b17 	ldw	r2,108(sp)
    ae18:	d9001d87 	ldb	r4,118(sp)
    ae1c:	20000b26 	beq	r4,zero,ae4c <___svfiprintf_internal_r+0x854>
    ae20:	d9001d84 	addi	r4,sp,118
    ae24:	18c00044 	addi	r3,r3,1
    ae28:	10800044 	addi	r2,r2,1
    ae2c:	41000015 	stw	r4,0(r8)
    ae30:	01000044 	movi	r4,1
    ae34:	41000115 	stw	r4,4(r8)
    ae38:	d8c01c15 	stw	r3,112(sp)
    ae3c:	d8801b15 	stw	r2,108(sp)
    ae40:	010001c4 	movi	r4,7
    ae44:	20811e16 	blt	r4,r2,b2c0 <___svfiprintf_internal_r+0xcc8>
    ae48:	42000204 	addi	r8,r8,8
    ae4c:	da802217 	ldw	r10,136(sp)
    ae50:	50000b26 	beq	r10,zero,ae80 <___svfiprintf_internal_r+0x888>
    ae54:	d9001d04 	addi	r4,sp,116
    ae58:	18c00084 	addi	r3,r3,2
    ae5c:	10800044 	addi	r2,r2,1
    ae60:	41000015 	stw	r4,0(r8)
    ae64:	01000084 	movi	r4,2
    ae68:	41000115 	stw	r4,4(r8)
    ae6c:	d8c01c15 	stw	r3,112(sp)
    ae70:	d8801b15 	stw	r2,108(sp)
    ae74:	010001c4 	movi	r4,7
    ae78:	20811a16 	blt	r4,r2,b2e4 <___svfiprintf_internal_r+0xcec>
    ae7c:	42000204 	addi	r8,r8,8
    ae80:	dac02517 	ldw	r11,148(sp)
    ae84:	01002004 	movi	r4,128
    ae88:	5900a826 	beq	r11,r4,b12c <___svfiprintf_internal_r+0xb34>
    ae8c:	8721c83a 	sub	r16,r16,fp
    ae90:	0400260e 	bge	zero,r16,af2c <___svfiprintf_internal_r+0x934>
    ae94:	01c00404 	movi	r7,16
    ae98:	3c019d0e 	bge	r7,r16,b510 <___svfiprintf_internal_r+0xf18>
    ae9c:	010000b4 	movhi	r4,2
    aea0:	213b5a04 	addi	r4,r4,-4760
    aea4:	d9002215 	stw	r4,136(sp)
    aea8:	382f883a 	mov	r23,r7
    aeac:	058001c4 	movi	r22,7
    aeb0:	00000306 	br	aec0 <___svfiprintf_internal_r+0x8c8>
    aeb4:	843ffc04 	addi	r16,r16,-16
    aeb8:	42000204 	addi	r8,r8,8
    aebc:	bc00110e 	bge	r23,r16,af04 <___svfiprintf_internal_r+0x90c>
    aec0:	18c00404 	addi	r3,r3,16
    aec4:	10800044 	addi	r2,r2,1
    aec8:	44c00015 	stw	r19,0(r8)
    aecc:	45c00115 	stw	r23,4(r8)
    aed0:	d8c01c15 	stw	r3,112(sp)
    aed4:	d8801b15 	stw	r2,108(sp)
    aed8:	b0bff60e 	bge	r22,r2,aeb4 <__alt_mem_Flash_flash_data+0xf400aeb4>
    aedc:	9009883a 	mov	r4,r18
    aee0:	a00b883a 	mov	r5,r20
    aee4:	d9801a04 	addi	r6,sp,104
    aee8:	000a42c0 	call	a42c <__ssprint_r>
    aeec:	10007e1e 	bne	r2,zero,b0e8 <___svfiprintf_internal_r+0xaf0>
    aef0:	843ffc04 	addi	r16,r16,-16
    aef4:	d8c01c17 	ldw	r3,112(sp)
    aef8:	d8801b17 	ldw	r2,108(sp)
    aefc:	d811883a 	mov	r8,sp
    af00:	bc3fef16 	blt	r23,r16,aec0 <__alt_mem_Flash_flash_data+0xf400aec0>
    af04:	da802217 	ldw	r10,136(sp)
    af08:	1c07883a 	add	r3,r3,r16
    af0c:	10800044 	addi	r2,r2,1
    af10:	42800015 	stw	r10,0(r8)
    af14:	44000115 	stw	r16,4(r8)
    af18:	d8c01c15 	stw	r3,112(sp)
    af1c:	d8801b15 	stw	r2,108(sp)
    af20:	010001c4 	movi	r4,7
    af24:	2080ce16 	blt	r4,r2,b260 <___svfiprintf_internal_r+0xc68>
    af28:	42000204 	addi	r8,r8,8
    af2c:	dac02617 	ldw	r11,152(sp)
    af30:	1f07883a 	add	r3,r3,fp
    af34:	10800044 	addi	r2,r2,1
    af38:	42c00015 	stw	r11,0(r8)
    af3c:	47000115 	stw	fp,4(r8)
    af40:	d8c01c15 	stw	r3,112(sp)
    af44:	d8801b15 	stw	r2,108(sp)
    af48:	010001c4 	movi	r4,7
    af4c:	2080a316 	blt	r4,r2,b1dc <___svfiprintf_internal_r+0xbe4>
    af50:	42000204 	addi	r8,r8,8
    af54:	8c40010c 	andi	r17,r17,4
    af58:	88002b26 	beq	r17,zero,b008 <___svfiprintf_internal_r+0xa10>
    af5c:	da802117 	ldw	r10,132(sp)
    af60:	dac02017 	ldw	r11,128(sp)
    af64:	52e1c83a 	sub	r16,r10,r11
    af68:	0400270e 	bge	zero,r16,b008 <___svfiprintf_internal_r+0xa10>
    af6c:	04400404 	movi	r17,16
    af70:	d8801b17 	ldw	r2,108(sp)
    af74:	8c01900e 	bge	r17,r16,b5b8 <___svfiprintf_internal_r+0xfc0>
    af78:	014000b4 	movhi	r5,2
    af7c:	297b5e04 	addi	r5,r5,-4744
    af80:	d9402815 	stw	r5,160(sp)
    af84:	070001c4 	movi	fp,7
    af88:	00000306 	br	af98 <___svfiprintf_internal_r+0x9a0>
    af8c:	843ffc04 	addi	r16,r16,-16
    af90:	42000204 	addi	r8,r8,8
    af94:	8c00130e 	bge	r17,r16,afe4 <___svfiprintf_internal_r+0x9ec>
    af98:	028000b4 	movhi	r10,2
    af9c:	18c00404 	addi	r3,r3,16
    afa0:	10800044 	addi	r2,r2,1
    afa4:	52bb5e04 	addi	r10,r10,-4744
    afa8:	42800015 	stw	r10,0(r8)
    afac:	44400115 	stw	r17,4(r8)
    afb0:	d8c01c15 	stw	r3,112(sp)
    afb4:	d8801b15 	stw	r2,108(sp)
    afb8:	e0bff40e 	bge	fp,r2,af8c <__alt_mem_Flash_flash_data+0xf400af8c>
    afbc:	9009883a 	mov	r4,r18
    afc0:	a00b883a 	mov	r5,r20
    afc4:	d9801a04 	addi	r6,sp,104
    afc8:	000a42c0 	call	a42c <__ssprint_r>
    afcc:	1000461e 	bne	r2,zero,b0e8 <___svfiprintf_internal_r+0xaf0>
    afd0:	843ffc04 	addi	r16,r16,-16
    afd4:	d8c01c17 	ldw	r3,112(sp)
    afd8:	d8801b17 	ldw	r2,108(sp)
    afdc:	d811883a 	mov	r8,sp
    afe0:	8c3fed16 	blt	r17,r16,af98 <__alt_mem_Flash_flash_data+0xf400af98>
    afe4:	dac02817 	ldw	r11,160(sp)
    afe8:	1c07883a 	add	r3,r3,r16
    afec:	10800044 	addi	r2,r2,1
    aff0:	42c00015 	stw	r11,0(r8)
    aff4:	44000115 	stw	r16,4(r8)
    aff8:	d8c01c15 	stw	r3,112(sp)
    affc:	d8801b15 	stw	r2,108(sp)
    b000:	010001c4 	movi	r4,7
    b004:	2080fd16 	blt	r4,r2,b3fc <___svfiprintf_internal_r+0xe04>
    b008:	dd802017 	ldw	r22,128(sp)
    b00c:	da802117 	ldw	r10,132(sp)
    b010:	b280010e 	bge	r22,r10,b018 <___svfiprintf_internal_r+0xa20>
    b014:	502d883a 	mov	r22,r10
    b018:	dac02417 	ldw	r11,144(sp)
    b01c:	5d97883a 	add	r11,r11,r22
    b020:	dac02415 	stw	r11,144(sp)
    b024:	1800751e 	bne	r3,zero,b1fc <___svfiprintf_internal_r+0xc04>
    b028:	a8800007 	ldb	r2,0(r21)
    b02c:	d8001b15 	stw	zero,108(sp)
    b030:	d811883a 	mov	r8,sp
    b034:	103d961e 	bne	r2,zero,a690 <__alt_mem_Flash_flash_data+0xf400a690>
    b038:	a82d883a 	mov	r22,r21
    b03c:	003dad06 	br	a6f4 <__alt_mem_Flash_flash_data+0xf400a6f4>
    b040:	10803fcc 	andi	r2,r2,255
    b044:	00c00044 	movi	r3,1
    b048:	10fe2f1e 	bne	r2,r3,a908 <__alt_mem_Flash_flash_data+0xf400a908>
    b04c:	5000e026 	beq	r10,zero,b3d0 <___svfiprintf_internal_r+0xdd8>
    b050:	dc002015 	stw	r16,128(sp)
    b054:	dc402215 	stw	r17,136(sp)
    b058:	dd801a04 	addi	r22,sp,104
    b05c:	402f883a 	mov	r23,r8
    b060:	5839883a 	mov	fp,r11
    b064:	4821883a 	mov	r16,r9
    b068:	5023883a 	mov	r17,r10
    b06c:	8009883a 	mov	r4,r16
    b070:	880b883a 	mov	r5,r17
    b074:	01800284 	movi	r6,10
    b078:	000f883a 	mov	r7,zero
    b07c:	000e5300 	call	e530 <__umoddi3>
    b080:	10800c04 	addi	r2,r2,48
    b084:	b5bfffc4 	addi	r22,r22,-1
    b088:	8009883a 	mov	r4,r16
    b08c:	880b883a 	mov	r5,r17
    b090:	01800284 	movi	r6,10
    b094:	000f883a 	mov	r7,zero
    b098:	b0800005 	stb	r2,0(r22)
    b09c:	000df700 	call	df70 <__udivdi3>
    b0a0:	1021883a 	mov	r16,r2
    b0a4:	10c4b03a 	or	r2,r2,r3
    b0a8:	1823883a 	mov	r17,r3
    b0ac:	103fef1e 	bne	r2,zero,b06c <__alt_mem_Flash_flash_data+0xf400b06c>
    b0b0:	da801e17 	ldw	r10,120(sp)
    b0b4:	e017883a 	mov	r11,fp
    b0b8:	dc002017 	ldw	r16,128(sp)
    b0bc:	dc402217 	ldw	r17,136(sp)
    b0c0:	b811883a 	mov	r8,r23
    b0c4:	dd802615 	stw	r22,152(sp)
    b0c8:	55b9c83a 	sub	fp,r10,r22
    b0cc:	003e2006 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b0d0:	d8801c17 	ldw	r2,112(sp)
    b0d4:	10000426 	beq	r2,zero,b0e8 <___svfiprintf_internal_r+0xaf0>
    b0d8:	d9002917 	ldw	r4,164(sp)
    b0dc:	d9402717 	ldw	r5,156(sp)
    b0e0:	d9801a04 	addi	r6,sp,104
    b0e4:	000a42c0 	call	a42c <__ssprint_r>
    b0e8:	da802717 	ldw	r10,156(sp)
    b0ec:	5080030b 	ldhu	r2,12(r10)
    b0f0:	1080100c 	andi	r2,r2,64
    b0f4:	1000511e 	bne	r2,zero,b23c <___svfiprintf_internal_r+0xc44>
    b0f8:	d8802417 	ldw	r2,144(sp)
    b0fc:	dfc03617 	ldw	ra,216(sp)
    b100:	df003517 	ldw	fp,212(sp)
    b104:	ddc03417 	ldw	r23,208(sp)
    b108:	dd803317 	ldw	r22,204(sp)
    b10c:	dd403217 	ldw	r21,200(sp)
    b110:	dd003117 	ldw	r20,196(sp)
    b114:	dcc03017 	ldw	r19,192(sp)
    b118:	dc802f17 	ldw	r18,188(sp)
    b11c:	dc402e17 	ldw	r17,184(sp)
    b120:	dc002d17 	ldw	r16,180(sp)
    b124:	dec03704 	addi	sp,sp,220
    b128:	f800283a 	ret
    b12c:	da802117 	ldw	r10,132(sp)
    b130:	dac02017 	ldw	r11,128(sp)
    b134:	52edc83a 	sub	r22,r10,r11
    b138:	05bf540e 	bge	zero,r22,ae8c <__alt_mem_Flash_flash_data+0xf400ae8c>
    b13c:	02400404 	movi	r9,16
    b140:	4d81210e 	bge	r9,r22,b5c8 <___svfiprintf_internal_r+0xfd0>
    b144:	014000b4 	movhi	r5,2
    b148:	297b5a04 	addi	r5,r5,-4760
    b14c:	d9402215 	stw	r5,136(sp)
    b150:	05c001c4 	movi	r23,7
    b154:	00000306 	br	b164 <___svfiprintf_internal_r+0xb6c>
    b158:	b5bffc04 	addi	r22,r22,-16
    b15c:	42000204 	addi	r8,r8,8
    b160:	4d80130e 	bge	r9,r22,b1b0 <___svfiprintf_internal_r+0xbb8>
    b164:	18c00404 	addi	r3,r3,16
    b168:	10800044 	addi	r2,r2,1
    b16c:	44c00015 	stw	r19,0(r8)
    b170:	42400115 	stw	r9,4(r8)
    b174:	d8c01c15 	stw	r3,112(sp)
    b178:	d8801b15 	stw	r2,108(sp)
    b17c:	b8bff60e 	bge	r23,r2,b158 <__alt_mem_Flash_flash_data+0xf400b158>
    b180:	9009883a 	mov	r4,r18
    b184:	a00b883a 	mov	r5,r20
    b188:	d9801a04 	addi	r6,sp,104
    b18c:	da402c15 	stw	r9,176(sp)
    b190:	000a42c0 	call	a42c <__ssprint_r>
    b194:	da402c17 	ldw	r9,176(sp)
    b198:	103fd31e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b19c:	b5bffc04 	addi	r22,r22,-16
    b1a0:	d8c01c17 	ldw	r3,112(sp)
    b1a4:	d8801b17 	ldw	r2,108(sp)
    b1a8:	d811883a 	mov	r8,sp
    b1ac:	4dbfed16 	blt	r9,r22,b164 <__alt_mem_Flash_flash_data+0xf400b164>
    b1b0:	da802217 	ldw	r10,136(sp)
    b1b4:	1d87883a 	add	r3,r3,r22
    b1b8:	10800044 	addi	r2,r2,1
    b1bc:	42800015 	stw	r10,0(r8)
    b1c0:	45800115 	stw	r22,4(r8)
    b1c4:	d8c01c15 	stw	r3,112(sp)
    b1c8:	d8801b15 	stw	r2,108(sp)
    b1cc:	010001c4 	movi	r4,7
    b1d0:	2080c616 	blt	r4,r2,b4ec <___svfiprintf_internal_r+0xef4>
    b1d4:	42000204 	addi	r8,r8,8
    b1d8:	003f2c06 	br	ae8c <__alt_mem_Flash_flash_data+0xf400ae8c>
    b1dc:	9009883a 	mov	r4,r18
    b1e0:	a00b883a 	mov	r5,r20
    b1e4:	d9801a04 	addi	r6,sp,104
    b1e8:	000a42c0 	call	a42c <__ssprint_r>
    b1ec:	103fbe1e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b1f0:	d8c01c17 	ldw	r3,112(sp)
    b1f4:	d811883a 	mov	r8,sp
    b1f8:	003f5606 	br	af54 <__alt_mem_Flash_flash_data+0xf400af54>
    b1fc:	9009883a 	mov	r4,r18
    b200:	a00b883a 	mov	r5,r20
    b204:	d9801a04 	addi	r6,sp,104
    b208:	000a42c0 	call	a42c <__ssprint_r>
    b20c:	103f8626 	beq	r2,zero,b028 <__alt_mem_Flash_flash_data+0xf400b028>
    b210:	003fb506 	br	b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b214:	10803fcc 	andi	r2,r2,255
    b218:	10003b1e 	bne	r2,zero,b308 <___svfiprintf_internal_r+0xd10>
    b21c:	8880004c 	andi	r2,r17,1
    b220:	10007d26 	beq	r2,zero,b418 <___svfiprintf_internal_r+0xe20>
    b224:	00800c04 	movi	r2,48
    b228:	d8c019c4 	addi	r3,sp,103
    b22c:	d88019c5 	stb	r2,103(sp)
    b230:	df002b17 	ldw	fp,172(sp)
    b234:	d8c02615 	stw	r3,152(sp)
    b238:	003dc506 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b23c:	00bfffc4 	movi	r2,-1
    b240:	003fae06 	br	b0fc <__alt_mem_Flash_flash_data+0xf400b0fc>
    b244:	9009883a 	mov	r4,r18
    b248:	a00b883a 	mov	r5,r20
    b24c:	d9801a04 	addi	r6,sp,104
    b250:	000a42c0 	call	a42c <__ssprint_r>
    b254:	103fa41e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b258:	d811883a 	mov	r8,sp
    b25c:	003d2206 	br	a6e8 <__alt_mem_Flash_flash_data+0xf400a6e8>
    b260:	9009883a 	mov	r4,r18
    b264:	a00b883a 	mov	r5,r20
    b268:	d9801a04 	addi	r6,sp,104
    b26c:	000a42c0 	call	a42c <__ssprint_r>
    b270:	103f9d1e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b274:	d8c01c17 	ldw	r3,112(sp)
    b278:	d8801b17 	ldw	r2,108(sp)
    b27c:	d811883a 	mov	r8,sp
    b280:	003f2a06 	br	af2c <__alt_mem_Flash_flash_data+0xf400af2c>
    b284:	d9402a17 	ldw	r5,168(sp)
    b288:	d8c01a04 	addi	r3,sp,104
    b28c:	488003cc 	andi	r2,r9,15
    b290:	5008973a 	slli	r4,r10,28
    b294:	2885883a 	add	r2,r5,r2
    b298:	4812d13a 	srli	r9,r9,4
    b29c:	10800003 	ldbu	r2,0(r2)
    b2a0:	5014d13a 	srli	r10,r10,4
    b2a4:	18ffffc4 	addi	r3,r3,-1
    b2a8:	2252b03a 	or	r9,r4,r9
    b2ac:	18800005 	stb	r2,0(r3)
    b2b0:	4a84b03a 	or	r2,r9,r10
    b2b4:	103ff51e 	bne	r2,zero,b28c <__alt_mem_Flash_flash_data+0xf400b28c>
    b2b8:	d8c02615 	stw	r3,152(sp)
    b2bc:	003da206 	br	a948 <__alt_mem_Flash_flash_data+0xf400a948>
    b2c0:	9009883a 	mov	r4,r18
    b2c4:	a00b883a 	mov	r5,r20
    b2c8:	d9801a04 	addi	r6,sp,104
    b2cc:	000a42c0 	call	a42c <__ssprint_r>
    b2d0:	103f851e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b2d4:	d8c01c17 	ldw	r3,112(sp)
    b2d8:	d8801b17 	ldw	r2,108(sp)
    b2dc:	d811883a 	mov	r8,sp
    b2e0:	003eda06 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b2e4:	9009883a 	mov	r4,r18
    b2e8:	a00b883a 	mov	r5,r20
    b2ec:	d9801a04 	addi	r6,sp,104
    b2f0:	000a42c0 	call	a42c <__ssprint_r>
    b2f4:	103f7c1e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b2f8:	d8c01c17 	ldw	r3,112(sp)
    b2fc:	d8801b17 	ldw	r2,108(sp)
    b300:	d811883a 	mov	r8,sp
    b304:	003ede06 	br	ae80 <__alt_mem_Flash_flash_data+0xf400ae80>
    b308:	da801a04 	addi	r10,sp,104
    b30c:	da802615 	stw	r10,152(sp)
    b310:	003d8f06 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b314:	8880040c 	andi	r2,r17,16
    b318:	10004c1e 	bne	r2,zero,b44c <___svfiprintf_internal_r+0xe54>
    b31c:	8880100c 	andi	r2,r17,64
    b320:	da802317 	ldw	r10,140(sp)
    b324:	10004a26 	beq	r2,zero,b450 <___svfiprintf_internal_r+0xe58>
    b328:	5240000b 	ldhu	r9,0(r10)
    b32c:	dac02317 	ldw	r11,140(sp)
    b330:	0015883a 	mov	r10,zero
    b334:	00800044 	movi	r2,1
    b338:	5ac00104 	addi	r11,r11,4
    b33c:	dac02315 	stw	r11,140(sp)
    b340:	4807883a 	mov	r3,r9
    b344:	003d6506 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    b348:	9009883a 	mov	r4,r18
    b34c:	a00b883a 	mov	r5,r20
    b350:	d9801a04 	addi	r6,sp,104
    b354:	000a42c0 	call	a42c <__ssprint_r>
    b358:	103f631e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b35c:	d8c01c17 	ldw	r3,112(sp)
    b360:	d8801b17 	ldw	r2,108(sp)
    b364:	d811883a 	mov	r8,sp
    b368:	003eab06 	br	ae18 <__alt_mem_Flash_flash_data+0xf400ae18>
    b36c:	8880040c 	andi	r2,r17,16
    b370:	1000331e 	bne	r2,zero,b440 <___svfiprintf_internal_r+0xe48>
    b374:	8880100c 	andi	r2,r17,64
    b378:	da802317 	ldw	r10,140(sp)
    b37c:	10003126 	beq	r2,zero,b444 <___svfiprintf_internal_r+0xe4c>
    b380:	5240000b 	ldhu	r9,0(r10)
    b384:	dac02317 	ldw	r11,140(sp)
    b388:	0015883a 	mov	r10,zero
    b38c:	0005883a 	mov	r2,zero
    b390:	5ac00104 	addi	r11,r11,4
    b394:	dac02315 	stw	r11,140(sp)
    b398:	4807883a 	mov	r3,r9
    b39c:	003d4f06 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    b3a0:	10803fcc 	andi	r2,r2,255
    b3a4:	1080201c 	xori	r2,r2,128
    b3a8:	10bfe004 	addi	r2,r2,-128
    b3ac:	01000c04 	movi	r4,48
    b3b0:	11005b26 	beq	r2,r4,b520 <___svfiprintf_internal_r+0xf28>
    b3b4:	da802617 	ldw	r10,152(sp)
    b3b8:	d8801e17 	ldw	r2,120(sp)
    b3bc:	193fffc5 	stb	r4,-1(r3)
    b3c0:	52bfffc4 	addi	r10,r10,-1
    b3c4:	da802615 	stw	r10,152(sp)
    b3c8:	12b9c83a 	sub	fp,r2,r10
    b3cc:	003d6006 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b3d0:	00800244 	movi	r2,9
    b3d4:	127f1e36 	bltu	r2,r9,b050 <__alt_mem_Flash_flash_data+0xf400b050>
    b3d8:	4a400c04 	addi	r9,r9,48
    b3dc:	d8c019c4 	addi	r3,sp,103
    b3e0:	da4019c5 	stb	r9,103(sp)
    b3e4:	df002b17 	ldw	fp,172(sp)
    b3e8:	d8c02615 	stw	r3,152(sp)
    b3ec:	003d5806 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b3f0:	d8802315 	stw	r2,140(sp)
    b3f4:	a9000007 	ldb	r4,0(r21)
    b3f8:	003ccb06 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    b3fc:	9009883a 	mov	r4,r18
    b400:	a00b883a 	mov	r5,r20
    b404:	d9801a04 	addi	r6,sp,104
    b408:	000a42c0 	call	a42c <__ssprint_r>
    b40c:	103f361e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b410:	d8c01c17 	ldw	r3,112(sp)
    b414:	003efc06 	br	b008 <__alt_mem_Flash_flash_data+0xf400b008>
    b418:	d8c01a04 	addi	r3,sp,104
    b41c:	d8c02615 	stw	r3,152(sp)
    b420:	003d4b06 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b424:	da802317 	ldw	r10,140(sp)
    b428:	1a400017 	ldw	r9,0(r3)
    b42c:	52800104 	addi	r10,r10,4
    b430:	da802315 	stw	r10,140(sp)
    b434:	4815d7fa 	srai	r10,r9,31
    b438:	5005883a 	mov	r2,r10
    b43c:	003d9c06 	br	aab0 <__alt_mem_Flash_flash_data+0xf400aab0>
    b440:	da802317 	ldw	r10,140(sp)
    b444:	52400017 	ldw	r9,0(r10)
    b448:	003fce06 	br	b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b44c:	da802317 	ldw	r10,140(sp)
    b450:	52400017 	ldw	r9,0(r10)
    b454:	003fb506 	br	b32c <__alt_mem_Flash_flash_data+0xf400b32c>
    b458:	8880100c 	andi	r2,r17,64
    b45c:	da802317 	ldw	r10,140(sp)
    b460:	103e1926 	beq	r2,zero,acc8 <__alt_mem_Flash_flash_data+0xf400acc8>
    b464:	dac02317 	ldw	r11,140(sp)
    b468:	5240000b 	ldhu	r9,0(r10)
    b46c:	0015883a 	mov	r10,zero
    b470:	5ac00104 	addi	r11,r11,4
    b474:	dac02315 	stw	r11,140(sp)
    b478:	003de406 	br	ac0c <__alt_mem_Flash_flash_data+0xf400ac0c>
    b47c:	a9000007 	ldb	r4,0(r21)
    b480:	003ca906 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    b484:	dac02317 	ldw	r11,140(sp)
    b488:	da802417 	ldw	r10,144(sp)
    b48c:	58800017 	ldw	r2,0(r11)
    b490:	5007d7fa 	srai	r3,r10,31
    b494:	5ac00104 	addi	r11,r11,4
    b498:	dac02315 	stw	r11,140(sp)
    b49c:	12800015 	stw	r10,0(r2)
    b4a0:	10c00115 	stw	r3,4(r2)
    b4a4:	003c7806 	br	a688 <__alt_mem_Flash_flash_data+0xf400a688>
    b4a8:	00800c04 	movi	r2,48
    b4ac:	d8801d05 	stb	r2,116(sp)
    b4b0:	d9001d45 	stb	r4,117(sp)
    b4b4:	8c400094 	ori	r17,r17,2
    b4b8:	00800084 	movi	r2,2
    b4bc:	003d0706 	br	a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    b4c0:	ad400044 	addi	r21,r21,1
    b4c4:	8c400814 	ori	r17,r17,32
    b4c8:	11000047 	ldb	r4,1(r2)
    b4cc:	003c9606 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    b4d0:	dac02317 	ldw	r11,140(sp)
    b4d4:	da802417 	ldw	r10,144(sp)
    b4d8:	58800017 	ldw	r2,0(r11)
    b4dc:	5ac00104 	addi	r11,r11,4
    b4e0:	dac02315 	stw	r11,140(sp)
    b4e4:	12800015 	stw	r10,0(r2)
    b4e8:	003c6706 	br	a688 <__alt_mem_Flash_flash_data+0xf400a688>
    b4ec:	9009883a 	mov	r4,r18
    b4f0:	a00b883a 	mov	r5,r20
    b4f4:	d9801a04 	addi	r6,sp,104
    b4f8:	000a42c0 	call	a42c <__ssprint_r>
    b4fc:	103efa1e 	bne	r2,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b500:	d8c01c17 	ldw	r3,112(sp)
    b504:	d8801b17 	ldw	r2,108(sp)
    b508:	d811883a 	mov	r8,sp
    b50c:	003e5f06 	br	ae8c <__alt_mem_Flash_flash_data+0xf400ae8c>
    b510:	02c000b4 	movhi	r11,2
    b514:	5afb5a04 	addi	r11,r11,-4760
    b518:	dac02215 	stw	r11,136(sp)
    b51c:	003e7906 	br	af04 <__alt_mem_Flash_flash_data+0xf400af04>
    b520:	da801e17 	ldw	r10,120(sp)
    b524:	d8c02617 	ldw	r3,152(sp)
    b528:	50f9c83a 	sub	fp,r10,r3
    b52c:	003d0806 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b530:	da002c15 	stw	r8,176(sp)
    b534:	0001f840 	call	1f84 <strlen>
    b538:	1039883a 	mov	fp,r2
    b53c:	dac01d83 	ldbu	r11,118(sp)
    b540:	ddc02315 	stw	r23,140(sp)
    b544:	0021883a 	mov	r16,zero
    b548:	da002c17 	ldw	r8,176(sp)
    b54c:	003d0006 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b550:	00800184 	movi	r2,6
    b554:	1400012e 	bgeu	r2,r16,b55c <___svfiprintf_internal_r+0xf64>
    b558:	1021883a 	mov	r16,r2
    b55c:	8039883a 	mov	fp,r16
    b560:	802d883a 	mov	r22,r16
    b564:	80002116 	blt	r16,zero,b5ec <___svfiprintf_internal_r+0xff4>
    b568:	008000b4 	movhi	r2,2
    b56c:	10baf604 	addi	r2,r2,-5160
    b570:	dd802015 	stw	r22,128(sp)
    b574:	ddc02315 	stw	r23,140(sp)
    b578:	d8802615 	stw	r2,152(sp)
    b57c:	003d5d06 	br	aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    b580:	04001004 	movi	r16,64
    b584:	800b883a 	mov	r5,r16
    b588:	00088c00 	call	88c0 <_malloc_r>
    b58c:	da802717 	ldw	r10,156(sp)
    b590:	50800015 	stw	r2,0(r10)
    b594:	50800415 	stw	r2,16(r10)
    b598:	10002026 	beq	r2,zero,b61c <___svfiprintf_internal_r+0x1024>
    b59c:	da802717 	ldw	r10,156(sp)
    b5a0:	54000515 	stw	r16,20(r10)
    b5a4:	003c2806 	br	a648 <__alt_mem_Flash_flash_data+0xf400a648>
    b5a8:	010000b4 	movhi	r4,2
    b5ac:	213b5e04 	addi	r4,r4,-4744
    b5b0:	d9002815 	stw	r4,160(sp)
    b5b4:	003d7e06 	br	abb0 <__alt_mem_Flash_flash_data+0xf400abb0>
    b5b8:	010000b4 	movhi	r4,2
    b5bc:	213b5e04 	addi	r4,r4,-4744
    b5c0:	d9002815 	stw	r4,160(sp)
    b5c4:	003e8706 	br	afe4 <__alt_mem_Flash_flash_data+0xf400afe4>
    b5c8:	010000b4 	movhi	r4,2
    b5cc:	213b5a04 	addi	r4,r4,-4760
    b5d0:	d9002215 	stw	r4,136(sp)
    b5d4:	003ef606 	br	b1b0 <__alt_mem_Flash_flash_data+0xf400b1b0>
    b5d8:	8039883a 	mov	fp,r16
    b5dc:	dac01d83 	ldbu	r11,118(sp)
    b5e0:	ddc02315 	stw	r23,140(sp)
    b5e4:	0021883a 	mov	r16,zero
    b5e8:	003cd906 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b5ec:	002d883a 	mov	r22,zero
    b5f0:	003fdd06 	br	b568 <__alt_mem_Flash_flash_data+0xf400b568>
    b5f4:	dac02317 	ldw	r11,140(sp)
    b5f8:	a805883a 	mov	r2,r21
    b5fc:	502b883a 	mov	r21,r10
    b600:	5c000017 	ldw	r16,0(r11)
    b604:	59000104 	addi	r4,r11,4
    b608:	d9002315 	stw	r4,140(sp)
    b60c:	803fae0e 	bge	r16,zero,b4c8 <__alt_mem_Flash_flash_data+0xf400b4c8>
    b610:	043fffc4 	movi	r16,-1
    b614:	11000047 	ldb	r4,1(r2)
    b618:	003c4306 	br	a728 <__alt_mem_Flash_flash_data+0xf400a728>
    b61c:	dac02917 	ldw	r11,164(sp)
    b620:	00800304 	movi	r2,12
    b624:	58800015 	stw	r2,0(r11)
    b628:	00bfffc4 	movi	r2,-1
    b62c:	003eb306 	br	b0fc <__alt_mem_Flash_flash_data+0xf400b0fc>

0000b630 <__sprint_r.part.0>:
    b630:	28801917 	ldw	r2,100(r5)
    b634:	defff604 	addi	sp,sp,-40
    b638:	dd400515 	stw	r21,20(sp)
    b63c:	dcc00315 	stw	r19,12(sp)
    b640:	dfc00915 	stw	ra,36(sp)
    b644:	df000815 	stw	fp,32(sp)
    b648:	ddc00715 	stw	r23,28(sp)
    b64c:	dd800615 	stw	r22,24(sp)
    b650:	dd000415 	stw	r20,16(sp)
    b654:	dc800215 	stw	r18,8(sp)
    b658:	dc400115 	stw	r17,4(sp)
    b65c:	dc000015 	stw	r16,0(sp)
    b660:	1088000c 	andi	r2,r2,8192
    b664:	2827883a 	mov	r19,r5
    b668:	302b883a 	mov	r21,r6
    b66c:	10002d26 	beq	r2,zero,b724 <__sprint_r.part.0+0xf4>
    b670:	30800217 	ldw	r2,8(r6)
    b674:	35800017 	ldw	r22,0(r6)
    b678:	10002826 	beq	r2,zero,b71c <__sprint_r.part.0+0xec>
    b67c:	2029883a 	mov	r20,r4
    b680:	b5c00104 	addi	r23,r22,4
    b684:	04bfffc4 	movi	r18,-1
    b688:	bc400017 	ldw	r17,0(r23)
    b68c:	b4000017 	ldw	r16,0(r22)
    b690:	0039883a 	mov	fp,zero
    b694:	8822d0ba 	srli	r17,r17,2
    b698:	04400316 	blt	zero,r17,b6a8 <__sprint_r.part.0+0x78>
    b69c:	00001806 	br	b700 <__sprint_r.part.0+0xd0>
    b6a0:	84000104 	addi	r16,r16,4
    b6a4:	8f001526 	beq	r17,fp,b6fc <__sprint_r.part.0+0xcc>
    b6a8:	81400017 	ldw	r5,0(r16)
    b6ac:	a009883a 	mov	r4,r20
    b6b0:	980d883a 	mov	r6,r19
    b6b4:	000cd6c0 	call	cd6c <_fputwc_r>
    b6b8:	e7000044 	addi	fp,fp,1
    b6bc:	14bff81e 	bne	r2,r18,b6a0 <__alt_mem_Flash_flash_data+0xf400b6a0>
    b6c0:	9005883a 	mov	r2,r18
    b6c4:	a8000215 	stw	zero,8(r21)
    b6c8:	a8000115 	stw	zero,4(r21)
    b6cc:	dfc00917 	ldw	ra,36(sp)
    b6d0:	df000817 	ldw	fp,32(sp)
    b6d4:	ddc00717 	ldw	r23,28(sp)
    b6d8:	dd800617 	ldw	r22,24(sp)
    b6dc:	dd400517 	ldw	r21,20(sp)
    b6e0:	dd000417 	ldw	r20,16(sp)
    b6e4:	dcc00317 	ldw	r19,12(sp)
    b6e8:	dc800217 	ldw	r18,8(sp)
    b6ec:	dc400117 	ldw	r17,4(sp)
    b6f0:	dc000017 	ldw	r16,0(sp)
    b6f4:	dec00a04 	addi	sp,sp,40
    b6f8:	f800283a 	ret
    b6fc:	a8800217 	ldw	r2,8(r21)
    b700:	8c63883a 	add	r17,r17,r17
    b704:	8c63883a 	add	r17,r17,r17
    b708:	1445c83a 	sub	r2,r2,r17
    b70c:	a8800215 	stw	r2,8(r21)
    b710:	b5800204 	addi	r22,r22,8
    b714:	bdc00204 	addi	r23,r23,8
    b718:	103fdb1e 	bne	r2,zero,b688 <__alt_mem_Flash_flash_data+0xf400b688>
    b71c:	0005883a 	mov	r2,zero
    b720:	003fe806 	br	b6c4 <__alt_mem_Flash_flash_data+0xf400b6c4>
    b724:	000cfa40 	call	cfa4 <__sfvwrite_r>
    b728:	003fe606 	br	b6c4 <__alt_mem_Flash_flash_data+0xf400b6c4>

0000b72c <__sprint_r>:
    b72c:	30c00217 	ldw	r3,8(r6)
    b730:	18000126 	beq	r3,zero,b738 <__sprint_r+0xc>
    b734:	000b6301 	jmpi	b630 <__sprint_r.part.0>
    b738:	30000115 	stw	zero,4(r6)
    b73c:	0005883a 	mov	r2,zero
    b740:	f800283a 	ret

0000b744 <___vfiprintf_internal_r>:
    b744:	deffca04 	addi	sp,sp,-216
    b748:	dd803215 	stw	r22,200(sp)
    b74c:	dd403115 	stw	r21,196(sp)
    b750:	dfc03515 	stw	ra,212(sp)
    b754:	df003415 	stw	fp,208(sp)
    b758:	ddc03315 	stw	r23,204(sp)
    b75c:	dd003015 	stw	r20,192(sp)
    b760:	dcc02f15 	stw	r19,188(sp)
    b764:	dc802e15 	stw	r18,184(sp)
    b768:	dc402d15 	stw	r17,180(sp)
    b76c:	dc002c15 	stw	r16,176(sp)
    b770:	d9002015 	stw	r4,128(sp)
    b774:	d9c02215 	stw	r7,136(sp)
    b778:	282b883a 	mov	r21,r5
    b77c:	302d883a 	mov	r22,r6
    b780:	20000226 	beq	r4,zero,b78c <___vfiprintf_internal_r+0x48>
    b784:	20800e17 	ldw	r2,56(r4)
    b788:	1001b126 	beq	r2,zero,be50 <___vfiprintf_internal_r+0x70c>
    b78c:	a880030b 	ldhu	r2,12(r21)
    b790:	10c8000c 	andi	r3,r2,8192
    b794:	1800061e 	bne	r3,zero,b7b0 <___vfiprintf_internal_r+0x6c>
    b798:	a9001917 	ldw	r4,100(r21)
    b79c:	00f7ffc4 	movi	r3,-8193
    b7a0:	10880014 	ori	r2,r2,8192
    b7a4:	20c6703a 	and	r3,r4,r3
    b7a8:	a880030d 	sth	r2,12(r21)
    b7ac:	a8c01915 	stw	r3,100(r21)
    b7b0:	10c0020c 	andi	r3,r2,8
    b7b4:	18018926 	beq	r3,zero,bddc <___vfiprintf_internal_r+0x698>
    b7b8:	a8c00417 	ldw	r3,16(r21)
    b7bc:	18018726 	beq	r3,zero,bddc <___vfiprintf_internal_r+0x698>
    b7c0:	1080068c 	andi	r2,r2,26
    b7c4:	00c00284 	movi	r3,10
    b7c8:	10c18c26 	beq	r2,r3,bdfc <___vfiprintf_internal_r+0x6b8>
    b7cc:	d8801a04 	addi	r2,sp,104
    b7d0:	d8c019c4 	addi	r3,sp,103
    b7d4:	070000b4 	movhi	fp,2
    b7d8:	05c000b4 	movhi	r23,2
    b7dc:	10c9c83a 	sub	r4,r2,r3
    b7e0:	e73b6604 	addi	fp,fp,-4712
    b7e4:	bdfb6204 	addi	r23,r23,-4728
    b7e8:	d8801e15 	stw	r2,120(sp)
    b7ec:	d8c01f15 	stw	r3,124(sp)
    b7f0:	dec01a15 	stw	sp,104(sp)
    b7f4:	d8001c15 	stw	zero,112(sp)
    b7f8:	d8001b15 	stw	zero,108(sp)
    b7fc:	d8002615 	stw	zero,152(sp)
    b800:	d8002315 	stw	zero,140(sp)
    b804:	d9002715 	stw	r4,156(sp)
    b808:	d811883a 	mov	r8,sp
    b80c:	dd402115 	stw	r21,132(sp)
    b810:	b021883a 	mov	r16,r22
    b814:	80800007 	ldb	r2,0(r16)
    b818:	10037226 	beq	r2,zero,c5e4 <___vfiprintf_internal_r+0xea0>
    b81c:	01000944 	movi	r4,37
    b820:	11037026 	beq	r2,r4,c5e4 <___vfiprintf_internal_r+0xea0>
    b824:	8005883a 	mov	r2,r16
    b828:	00000106 	br	b830 <___vfiprintf_internal_r+0xec>
    b82c:	19000326 	beq	r3,r4,b83c <___vfiprintf_internal_r+0xf8>
    b830:	10800044 	addi	r2,r2,1
    b834:	10c00007 	ldb	r3,0(r2)
    b838:	183ffc1e 	bne	r3,zero,b82c <__alt_mem_Flash_flash_data+0xf400b82c>
    b83c:	1425c83a 	sub	r18,r2,r16
    b840:	1023883a 	mov	r17,r2
    b844:	90001026 	beq	r18,zero,b888 <___vfiprintf_internal_r+0x144>
    b848:	d8c01c17 	ldw	r3,112(sp)
    b84c:	d8801b17 	ldw	r2,108(sp)
    b850:	44000015 	stw	r16,0(r8)
    b854:	90c7883a 	add	r3,r18,r3
    b858:	10800044 	addi	r2,r2,1
    b85c:	44800115 	stw	r18,4(r8)
    b860:	d8c01c15 	stw	r3,112(sp)
    b864:	d8801b15 	stw	r2,108(sp)
    b868:	010001c4 	movi	r4,7
    b86c:	2080750e 	bge	r4,r2,ba44 <___vfiprintf_internal_r+0x300>
    b870:	18036f1e 	bne	r3,zero,c630 <___vfiprintf_internal_r+0xeec>
    b874:	d8802317 	ldw	r2,140(sp)
    b878:	d8001b15 	stw	zero,108(sp)
    b87c:	d811883a 	mov	r8,sp
    b880:	1485883a 	add	r2,r2,r18
    b884:	d8802315 	stw	r2,140(sp)
    b888:	88800007 	ldb	r2,0(r17)
    b88c:	10041026 	beq	r2,zero,c8d0 <___vfiprintf_internal_r+0x118c>
    b890:	88c00047 	ldb	r3,1(r17)
    b894:	88800044 	addi	r2,r17,1
    b898:	d8001d85 	stb	zero,118(sp)
    b89c:	000f883a 	mov	r7,zero
    b8a0:	027fffc4 	movi	r9,-1
    b8a4:	0025883a 	mov	r18,zero
    b8a8:	002b883a 	mov	r21,zero
    b8ac:	01401604 	movi	r5,88
    b8b0:	01800244 	movi	r6,9
    b8b4:	03400a84 	movi	r13,42
    b8b8:	03001b04 	movi	r12,108
    b8bc:	14000044 	addi	r16,r2,1
    b8c0:	18bff804 	addi	r2,r3,-32
    b8c4:	28825536 	bltu	r5,r2,c21c <___vfiprintf_internal_r+0xad8>
    b8c8:	100490ba 	slli	r2,r2,2
    b8cc:	01000074 	movhi	r4,1
    b8d0:	212e3804 	addi	r4,r4,-18208
    b8d4:	1105883a 	add	r2,r2,r4
    b8d8:	10800017 	ldw	r2,0(r2)
    b8dc:	1000683a 	jmp	r2
    b8e0:	0000bfe0 	cmpeqi	zero,zero,767
    b8e4:	0000c21c 	xori	zero,zero,776
    b8e8:	0000c21c 	xori	zero,zero,776
    b8ec:	0000c000 	call	c00 <main+0x8>
    b8f0:	0000c21c 	xori	zero,zero,776
    b8f4:	0000c21c 	xori	zero,zero,776
    b8f8:	0000c21c 	xori	zero,zero,776
    b8fc:	0000c21c 	xori	zero,zero,776
    b900:	0000c21c 	xori	zero,zero,776
    b904:	0000c21c 	xori	zero,zero,776
    b908:	0000c010 	cmplti	zero,zero,768
    b90c:	0000c030 	cmpltui	zero,zero,768
    b910:	0000c21c 	xori	zero,zero,776
    b914:	0000be58 	cmpnei	zero,zero,761
    b918:	0000bf44 	movi	zero,765
    b91c:	0000c21c 	xori	zero,zero,776
    b920:	0000bec4 	movi	zero,763
    b924:	0000bed4 	movui	zero,763
    b928:	0000bed4 	movui	zero,763
    b92c:	0000bed4 	movui	zero,763
    b930:	0000bed4 	movui	zero,763
    b934:	0000bed4 	movui	zero,763
    b938:	0000bed4 	movui	zero,763
    b93c:	0000bed4 	movui	zero,763
    b940:	0000bed4 	movui	zero,763
    b944:	0000bed4 	movui	zero,763
    b948:	0000c21c 	xori	zero,zero,776
    b94c:	0000c21c 	xori	zero,zero,776
    b950:	0000c21c 	xori	zero,zero,776
    b954:	0000c21c 	xori	zero,zero,776
    b958:	0000c21c 	xori	zero,zero,776
    b95c:	0000c21c 	xori	zero,zero,776
    b960:	0000c21c 	xori	zero,zero,776
    b964:	0000c21c 	xori	zero,zero,776
    b968:	0000c21c 	xori	zero,zero,776
    b96c:	0000c21c 	xori	zero,zero,776
    b970:	0000bf00 	call	bf0 <task3+0xd4>
    b974:	0000c21c 	xori	zero,zero,776
    b978:	0000c21c 	xori	zero,zero,776
    b97c:	0000c21c 	xori	zero,zero,776
    b980:	0000c21c 	xori	zero,zero,776
    b984:	0000c21c 	xori	zero,zero,776
    b988:	0000c21c 	xori	zero,zero,776
    b98c:	0000c21c 	xori	zero,zero,776
    b990:	0000c21c 	xori	zero,zero,776
    b994:	0000c21c 	xori	zero,zero,776
    b998:	0000c21c 	xori	zero,zero,776
    b99c:	0000ba8c 	andi	zero,zero,746
    b9a0:	0000c21c 	xori	zero,zero,776
    b9a4:	0000c21c 	xori	zero,zero,776
    b9a8:	0000c21c 	xori	zero,zero,776
    b9ac:	0000c21c 	xori	zero,zero,776
    b9b0:	0000c21c 	xori	zero,zero,776
    b9b4:	0000ba58 	cmpnei	zero,zero,745
    b9b8:	0000c21c 	xori	zero,zero,776
    b9bc:	0000c21c 	xori	zero,zero,776
    b9c0:	0000c0a0 	cmpeqi	zero,zero,770
    b9c4:	0000c21c 	xori	zero,zero,776
    b9c8:	0000c21c 	xori	zero,zero,776
    b9cc:	0000c21c 	xori	zero,zero,776
    b9d0:	0000c21c 	xori	zero,zero,776
    b9d4:	0000c21c 	xori	zero,zero,776
    b9d8:	0000c21c 	xori	zero,zero,776
    b9dc:	0000c21c 	xori	zero,zero,776
    b9e0:	0000c21c 	xori	zero,zero,776
    b9e4:	0000c21c 	xori	zero,zero,776
    b9e8:	0000c21c 	xori	zero,zero,776
    b9ec:	0000c040 	call	c04 <main+0xc>
    b9f0:	0000c06c 	andhi	zero,zero,769
    b9f4:	0000c21c 	xori	zero,zero,776
    b9f8:	0000c21c 	xori	zero,zero,776
    b9fc:	0000c21c 	xori	zero,zero,776
    ba00:	0000c148 	cmpgei	zero,zero,773
    ba04:	0000c06c 	andhi	zero,zero,769
    ba08:	0000c21c 	xori	zero,zero,776
    ba0c:	0000c21c 	xori	zero,zero,776
    ba10:	0000c158 	cmpnei	zero,zero,773
    ba14:	0000c21c 	xori	zero,zero,776
    ba18:	0000bf84 	movi	zero,766
    ba1c:	0000ba90 	cmplti	zero,zero,746
    ba20:	0000c16c 	andhi	zero,zero,773
    ba24:	0000c1ac 	andhi	zero,zero,774
    ba28:	0000c21c 	xori	zero,zero,776
    ba2c:	0000c0f4 	movhi	zero,771
    ba30:	0000c21c 	xori	zero,zero,776
    ba34:	0000ba5c 	xori	zero,zero,745
    ba38:	0000c21c 	xori	zero,zero,776
    ba3c:	0000c21c 	xori	zero,zero,776
    ba40:	0000c1bc 	xorhi	zero,zero,774
    ba44:	42000204 	addi	r8,r8,8
    ba48:	d8802317 	ldw	r2,140(sp)
    ba4c:	1485883a 	add	r2,r2,r18
    ba50:	d8802315 	stw	r2,140(sp)
    ba54:	003f8c06 	br	b888 <__alt_mem_Flash_flash_data+0xf400b888>
    ba58:	ad400414 	ori	r21,r21,16
    ba5c:	a880080c 	andi	r2,r21,32
    ba60:	1001e61e 	bne	r2,zero,c1fc <___vfiprintf_internal_r+0xab8>
    ba64:	a880040c 	andi	r2,r21,16
    ba68:	10034726 	beq	r2,zero,c788 <___vfiprintf_internal_r+0x1044>
    ba6c:	d8802217 	ldw	r2,136(sp)
    ba70:	001b883a 	mov	r13,zero
    ba74:	15800017 	ldw	r22,0(r2)
    ba78:	10800104 	addi	r2,r2,4
    ba7c:	d8802215 	stw	r2,136(sp)
    ba80:	b009883a 	mov	r4,r22
    ba84:	00800044 	movi	r2,1
    ba88:	00000c06 	br	babc <___vfiprintf_internal_r+0x378>
    ba8c:	ad400414 	ori	r21,r21,16
    ba90:	a880080c 	andi	r2,r21,32
    ba94:	1001491e 	bne	r2,zero,bfbc <___vfiprintf_internal_r+0x878>
    ba98:	a880040c 	andi	r2,r21,16
    ba9c:	10032d26 	beq	r2,zero,c754 <___vfiprintf_internal_r+0x1010>
    baa0:	d9002217 	ldw	r4,136(sp)
    baa4:	001b883a 	mov	r13,zero
    baa8:	0005883a 	mov	r2,zero
    baac:	25800017 	ldw	r22,0(r4)
    bab0:	21000104 	addi	r4,r4,4
    bab4:	d9002215 	stw	r4,136(sp)
    bab8:	b009883a 	mov	r4,r22
    babc:	d8001d85 	stb	zero,118(sp)
    bac0:	4827883a 	mov	r19,r9
    bac4:	001d883a 	mov	r14,zero
    bac8:	48000216 	blt	r9,zero,bad4 <___vfiprintf_internal_r+0x390>
    bacc:	00ffdfc4 	movi	r3,-129
    bad0:	a8ea703a 	and	r21,r21,r3
    bad4:	2002071e 	bne	r4,zero,c2f4 <___vfiprintf_internal_r+0xbb0>
    bad8:	4802ad26 	beq	r9,zero,c590 <___vfiprintf_internal_r+0xe4c>
    badc:	10803fcc 	andi	r2,r2,255
    bae0:	00c00044 	movi	r3,1
    bae4:	10c22b26 	beq	r2,r3,c394 <___vfiprintf_internal_r+0xc50>
    bae8:	00c00084 	movi	r3,2
    baec:	dd001a04 	addi	r20,sp,104
    baf0:	10c0dd1e 	bne	r2,r3,be68 <___vfiprintf_internal_r+0x724>
    baf4:	d9002617 	ldw	r4,152(sp)
    baf8:	b08003cc 	andi	r2,r22,15
    bafc:	6806973a 	slli	r3,r13,28
    bb00:	2085883a 	add	r2,r4,r2
    bb04:	b02cd13a 	srli	r22,r22,4
    bb08:	10800003 	ldbu	r2,0(r2)
    bb0c:	681ad13a 	srli	r13,r13,4
    bb10:	a53fffc4 	addi	r20,r20,-1
    bb14:	1dacb03a 	or	r22,r3,r22
    bb18:	a0800005 	stb	r2,0(r20)
    bb1c:	b344b03a 	or	r2,r22,r13
    bb20:	103ff51e 	bne	r2,zero,baf8 <__alt_mem_Flash_flash_data+0xf400baf8>
    bb24:	d9001e17 	ldw	r4,120(sp)
    bb28:	2527c83a 	sub	r19,r4,r20
    bb2c:	9823883a 	mov	r17,r19
    bb30:	9a40010e 	bge	r19,r9,bb38 <___vfiprintf_internal_r+0x3f4>
    bb34:	4823883a 	mov	r17,r9
    bb38:	73803fcc 	andi	r14,r14,255
    bb3c:	7380201c 	xori	r14,r14,128
    bb40:	73bfe004 	addi	r14,r14,-128
    bb44:	70000126 	beq	r14,zero,bb4c <___vfiprintf_internal_r+0x408>
    bb48:	8c400044 	addi	r17,r17,1
    bb4c:	ab40008c 	andi	r13,r21,2
    bb50:	68000126 	beq	r13,zero,bb58 <___vfiprintf_internal_r+0x414>
    bb54:	8c400084 	addi	r17,r17,2
    bb58:	ad80210c 	andi	r22,r21,132
    bb5c:	b001c51e 	bne	r22,zero,c274 <___vfiprintf_internal_r+0xb30>
    bb60:	9447c83a 	sub	r3,r18,r17
    bb64:	00c1c30e 	bge	zero,r3,c274 <___vfiprintf_internal_r+0xb30>
    bb68:	01c00404 	movi	r7,16
    bb6c:	d8801c17 	ldw	r2,112(sp)
    bb70:	38c37b0e 	bge	r7,r3,c960 <___vfiprintf_internal_r+0x121c>
    bb74:	010000b4 	movhi	r4,2
    bb78:	213b6604 	addi	r4,r4,-4712
    bb7c:	dc002915 	stw	r16,164(sp)
    bb80:	d9801b17 	ldw	r6,108(sp)
    bb84:	d9002415 	stw	r4,144(sp)
    bb88:	03c001c4 	movi	r15,7
    bb8c:	da402515 	stw	r9,148(sp)
    bb90:	db402815 	stw	r13,160(sp)
    bb94:	1821883a 	mov	r16,r3
    bb98:	00000506 	br	bbb0 <___vfiprintf_internal_r+0x46c>
    bb9c:	31400084 	addi	r5,r6,2
    bba0:	42000204 	addi	r8,r8,8
    bba4:	200d883a 	mov	r6,r4
    bba8:	843ffc04 	addi	r16,r16,-16
    bbac:	3c000d0e 	bge	r7,r16,bbe4 <___vfiprintf_internal_r+0x4a0>
    bbb0:	10800404 	addi	r2,r2,16
    bbb4:	31000044 	addi	r4,r6,1
    bbb8:	47000015 	stw	fp,0(r8)
    bbbc:	41c00115 	stw	r7,4(r8)
    bbc0:	d8801c15 	stw	r2,112(sp)
    bbc4:	d9001b15 	stw	r4,108(sp)
    bbc8:	793ff40e 	bge	r15,r4,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bbcc:	10019b1e 	bne	r2,zero,c23c <___vfiprintf_internal_r+0xaf8>
    bbd0:	843ffc04 	addi	r16,r16,-16
    bbd4:	000d883a 	mov	r6,zero
    bbd8:	01400044 	movi	r5,1
    bbdc:	d811883a 	mov	r8,sp
    bbe0:	3c3ff316 	blt	r7,r16,bbb0 <__alt_mem_Flash_flash_data+0xf400bbb0>
    bbe4:	8007883a 	mov	r3,r16
    bbe8:	da402517 	ldw	r9,148(sp)
    bbec:	db402817 	ldw	r13,160(sp)
    bbf0:	dc002917 	ldw	r16,164(sp)
    bbf4:	d9002417 	ldw	r4,144(sp)
    bbf8:	1885883a 	add	r2,r3,r2
    bbfc:	40c00115 	stw	r3,4(r8)
    bc00:	41000015 	stw	r4,0(r8)
    bc04:	d8801c15 	stw	r2,112(sp)
    bc08:	d9401b15 	stw	r5,108(sp)
    bc0c:	00c001c4 	movi	r3,7
    bc10:	19426a16 	blt	r3,r5,c5bc <___vfiprintf_internal_r+0xe78>
    bc14:	d8c01d87 	ldb	r3,118(sp)
    bc18:	42000204 	addi	r8,r8,8
    bc1c:	29000044 	addi	r4,r5,1
    bc20:	1801991e 	bne	r3,zero,c288 <___vfiprintf_internal_r+0xb44>
    bc24:	68000c26 	beq	r13,zero,bc58 <___vfiprintf_internal_r+0x514>
    bc28:	d8c01d04 	addi	r3,sp,116
    bc2c:	10800084 	addi	r2,r2,2
    bc30:	40c00015 	stw	r3,0(r8)
    bc34:	00c00084 	movi	r3,2
    bc38:	40c00115 	stw	r3,4(r8)
    bc3c:	d8801c15 	stw	r2,112(sp)
    bc40:	d9001b15 	stw	r4,108(sp)
    bc44:	00c001c4 	movi	r3,7
    bc48:	19024c16 	blt	r3,r4,c57c <___vfiprintf_internal_r+0xe38>
    bc4c:	200b883a 	mov	r5,r4
    bc50:	42000204 	addi	r8,r8,8
    bc54:	21000044 	addi	r4,r4,1
    bc58:	00c02004 	movi	r3,128
    bc5c:	b0c20126 	beq	r22,r3,c464 <___vfiprintf_internal_r+0xd20>
    bc60:	4cedc83a 	sub	r22,r9,r19
    bc64:	0580230e 	bge	zero,r22,bcf4 <___vfiprintf_internal_r+0x5b0>
    bc68:	01c00404 	movi	r7,16
    bc6c:	3d83140e 	bge	r7,r22,c8c0 <___vfiprintf_internal_r+0x117c>
    bc70:	010000b4 	movhi	r4,2
    bc74:	213b6204 	addi	r4,r4,-4728
    bc78:	d9002415 	stw	r4,144(sp)
    bc7c:	034001c4 	movi	r13,7
    bc80:	00000506 	br	bc98 <___vfiprintf_internal_r+0x554>
    bc84:	29000084 	addi	r4,r5,2
    bc88:	42000204 	addi	r8,r8,8
    bc8c:	180b883a 	mov	r5,r3
    bc90:	b5bffc04 	addi	r22,r22,-16
    bc94:	3d800d0e 	bge	r7,r22,bccc <___vfiprintf_internal_r+0x588>
    bc98:	10800404 	addi	r2,r2,16
    bc9c:	28c00044 	addi	r3,r5,1
    bca0:	45c00015 	stw	r23,0(r8)
    bca4:	41c00115 	stw	r7,4(r8)
    bca8:	d8801c15 	stw	r2,112(sp)
    bcac:	d8c01b15 	stw	r3,108(sp)
    bcb0:	68fff40e 	bge	r13,r3,bc84 <__alt_mem_Flash_flash_data+0xf400bc84>
    bcb4:	1001811e 	bne	r2,zero,c2bc <___vfiprintf_internal_r+0xb78>
    bcb8:	b5bffc04 	addi	r22,r22,-16
    bcbc:	01000044 	movi	r4,1
    bcc0:	000b883a 	mov	r5,zero
    bcc4:	d811883a 	mov	r8,sp
    bcc8:	3dbff316 	blt	r7,r22,bc98 <__alt_mem_Flash_flash_data+0xf400bc98>
    bccc:	d8c02417 	ldw	r3,144(sp)
    bcd0:	1585883a 	add	r2,r2,r22
    bcd4:	45800115 	stw	r22,4(r8)
    bcd8:	40c00015 	stw	r3,0(r8)
    bcdc:	d8801c15 	stw	r2,112(sp)
    bce0:	d9001b15 	stw	r4,108(sp)
    bce4:	00c001c4 	movi	r3,7
    bce8:	1901d016 	blt	r3,r4,c42c <___vfiprintf_internal_r+0xce8>
    bcec:	42000204 	addi	r8,r8,8
    bcf0:	21000044 	addi	r4,r4,1
    bcf4:	14c5883a 	add	r2,r2,r19
    bcf8:	45000015 	stw	r20,0(r8)
    bcfc:	44c00115 	stw	r19,4(r8)
    bd00:	d8801c15 	stw	r2,112(sp)
    bd04:	d9001b15 	stw	r4,108(sp)
    bd08:	00c001c4 	movi	r3,7
    bd0c:	1901cf0e 	bge	r3,r4,c44c <___vfiprintf_internal_r+0xd08>
    bd10:	1002361e 	bne	r2,zero,c5ec <___vfiprintf_internal_r+0xea8>
    bd14:	d8001b15 	stw	zero,108(sp)
    bd18:	aac0010c 	andi	r11,r21,4
    bd1c:	58002826 	beq	r11,zero,bdc0 <___vfiprintf_internal_r+0x67c>
    bd20:	9467c83a 	sub	r19,r18,r17
    bd24:	d811883a 	mov	r8,sp
    bd28:	04c3340e 	bge	zero,r19,c9fc <___vfiprintf_internal_r+0x12b8>
    bd2c:	01c00404 	movi	r7,16
    bd30:	3cc31b0e 	bge	r7,r19,c9a0 <___vfiprintf_internal_r+0x125c>
    bd34:	00c000b4 	movhi	r3,2
    bd38:	18fb6604 	addi	r3,r3,-4712
    bd3c:	d9001b17 	ldw	r4,108(sp)
    bd40:	d8c02415 	stw	r3,144(sp)
    bd44:	382b883a 	mov	r21,r7
    bd48:	050001c4 	movi	r20,7
    bd4c:	dd802017 	ldw	r22,128(sp)
    bd50:	00000506 	br	bd68 <___vfiprintf_internal_r+0x624>
    bd54:	21400084 	addi	r5,r4,2
    bd58:	42000204 	addi	r8,r8,8
    bd5c:	1809883a 	mov	r4,r3
    bd60:	9cfffc04 	addi	r19,r19,-16
    bd64:	acc00d0e 	bge	r21,r19,bd9c <___vfiprintf_internal_r+0x658>
    bd68:	10800404 	addi	r2,r2,16
    bd6c:	20c00044 	addi	r3,r4,1
    bd70:	47000015 	stw	fp,0(r8)
    bd74:	45400115 	stw	r21,4(r8)
    bd78:	d8801c15 	stw	r2,112(sp)
    bd7c:	d8c01b15 	stw	r3,108(sp)
    bd80:	a0fff40e 	bge	r20,r3,bd54 <__alt_mem_Flash_flash_data+0xf400bd54>
    bd84:	10019f1e 	bne	r2,zero,c404 <___vfiprintf_internal_r+0xcc0>
    bd88:	9cfffc04 	addi	r19,r19,-16
    bd8c:	01400044 	movi	r5,1
    bd90:	0009883a 	mov	r4,zero
    bd94:	d811883a 	mov	r8,sp
    bd98:	acfff316 	blt	r21,r19,bd68 <__alt_mem_Flash_flash_data+0xf400bd68>
    bd9c:	d8c02417 	ldw	r3,144(sp)
    bda0:	14c5883a 	add	r2,r2,r19
    bda4:	44c00115 	stw	r19,4(r8)
    bda8:	40c00015 	stw	r3,0(r8)
    bdac:	d8801c15 	stw	r2,112(sp)
    bdb0:	d9401b15 	stw	r5,108(sp)
    bdb4:	00c001c4 	movi	r3,7
    bdb8:	1941810e 	bge	r3,r5,c3c0 <___vfiprintf_internal_r+0xc7c>
    bdbc:	10017a1e 	bne	r2,zero,c3a8 <___vfiprintf_internal_r+0xc64>
    bdc0:	8c82a416 	blt	r17,r18,c854 <___vfiprintf_internal_r+0x1110>
    bdc4:	d9002317 	ldw	r4,140(sp)
    bdc8:	2449883a 	add	r4,r4,r17
    bdcc:	d9002315 	stw	r4,140(sp)
    bdd0:	d8001b15 	stw	zero,108(sp)
    bdd4:	d811883a 	mov	r8,sp
    bdd8:	003e8e06 	br	b814 <__alt_mem_Flash_flash_data+0xf400b814>
    bddc:	d9002017 	ldw	r4,128(sp)
    bde0:	a80b883a 	mov	r5,r21
    bde4:	0005fdc0 	call	5fdc <__swsetup_r>
    bde8:	10000c1e 	bne	r2,zero,be1c <___vfiprintf_internal_r+0x6d8>
    bdec:	a880030b 	ldhu	r2,12(r21)
    bdf0:	00c00284 	movi	r3,10
    bdf4:	1080068c 	andi	r2,r2,26
    bdf8:	10fe741e 	bne	r2,r3,b7cc <__alt_mem_Flash_flash_data+0xf400b7cc>
    bdfc:	a880038f 	ldh	r2,14(r21)
    be00:	103e7216 	blt	r2,zero,b7cc <__alt_mem_Flash_flash_data+0xf400b7cc>
    be04:	d9002017 	ldw	r4,128(sp)
    be08:	d9c02217 	ldw	r7,136(sp)
    be0c:	a80b883a 	mov	r5,r21
    be10:	b00d883a 	mov	r6,r22
    be14:	000ca380 	call	ca38 <__sbprintf>
    be18:	00000106 	br	be20 <___vfiprintf_internal_r+0x6dc>
    be1c:	00bfffc4 	movi	r2,-1
    be20:	dfc03517 	ldw	ra,212(sp)
    be24:	df003417 	ldw	fp,208(sp)
    be28:	ddc03317 	ldw	r23,204(sp)
    be2c:	dd803217 	ldw	r22,200(sp)
    be30:	dd403117 	ldw	r21,196(sp)
    be34:	dd003017 	ldw	r20,192(sp)
    be38:	dcc02f17 	ldw	r19,188(sp)
    be3c:	dc802e17 	ldw	r18,184(sp)
    be40:	dc402d17 	ldw	r17,180(sp)
    be44:	dc002c17 	ldw	r16,176(sp)
    be48:	dec03604 	addi	sp,sp,216
    be4c:	f800283a 	ret
    be50:	000803c0 	call	803c <__sinit>
    be54:	003e4d06 	br	b78c <__alt_mem_Flash_flash_data+0xf400b78c>
    be58:	8005883a 	mov	r2,r16
    be5c:	ad400114 	ori	r21,r21,4
    be60:	80c00007 	ldb	r3,0(r16)
    be64:	003e9506 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    be68:	b006d0fa 	srli	r3,r22,3
    be6c:	6808977a 	slli	r4,r13,29
    be70:	681ad0fa 	srli	r13,r13,3
    be74:	b58001cc 	andi	r22,r22,7
    be78:	b0800c04 	addi	r2,r22,48
    be7c:	a53fffc4 	addi	r20,r20,-1
    be80:	20ecb03a 	or	r22,r4,r3
    be84:	a0800005 	stb	r2,0(r20)
    be88:	b346b03a 	or	r3,r22,r13
    be8c:	183ff61e 	bne	r3,zero,be68 <__alt_mem_Flash_flash_data+0xf400be68>
    be90:	a8c0004c 	andi	r3,r21,1
    be94:	a009883a 	mov	r4,r20
    be98:	18013b26 	beq	r3,zero,c388 <___vfiprintf_internal_r+0xc44>
    be9c:	10803fcc 	andi	r2,r2,255
    bea0:	1080201c 	xori	r2,r2,128
    bea4:	10bfe004 	addi	r2,r2,-128
    bea8:	00c00c04 	movi	r3,48
    beac:	10ff1d26 	beq	r2,r3,bb24 <__alt_mem_Flash_flash_data+0xf400bb24>
    beb0:	d8801e17 	ldw	r2,120(sp)
    beb4:	a53fffc4 	addi	r20,r20,-1
    beb8:	20ffffc5 	stb	r3,-1(r4)
    bebc:	1527c83a 	sub	r19,r2,r20
    bec0:	003f1a06 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    bec4:	ad402014 	ori	r21,r21,128
    bec8:	8005883a 	mov	r2,r16
    becc:	80c00007 	ldb	r3,0(r16)
    bed0:	003e7a06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    bed4:	8005883a 	mov	r2,r16
    bed8:	0025883a 	mov	r18,zero
    bedc:	193ff404 	addi	r4,r3,-48
    bee0:	10c00007 	ldb	r3,0(r2)
    bee4:	948002a4 	muli	r18,r18,10
    bee8:	84000044 	addi	r16,r16,1
    beec:	8005883a 	mov	r2,r16
    bef0:	9125883a 	add	r18,r18,r4
    bef4:	193ff404 	addi	r4,r3,-48
    bef8:	313ff92e 	bgeu	r6,r4,bee0 <__alt_mem_Flash_flash_data+0xf400bee0>
    befc:	003e7006 	br	b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    bf00:	ad400414 	ori	r21,r21,16
    bf04:	d9c01d85 	stb	r7,118(sp)
    bf08:	a880080c 	andi	r2,r21,32
    bf0c:	d8c02217 	ldw	r3,136(sp)
    bf10:	10005a26 	beq	r2,zero,c07c <___vfiprintf_internal_r+0x938>
    bf14:	d9002217 	ldw	r4,136(sp)
    bf18:	18800117 	ldw	r2,4(r3)
    bf1c:	1d800017 	ldw	r22,0(r3)
    bf20:	21000204 	addi	r4,r4,8
    bf24:	d9002215 	stw	r4,136(sp)
    bf28:	101b883a 	mov	r13,r2
    bf2c:	1001f416 	blt	r2,zero,c700 <___vfiprintf_internal_r+0xfbc>
    bf30:	db801d83 	ldbu	r14,118(sp)
    bf34:	4827883a 	mov	r19,r9
    bf38:	00800044 	movi	r2,1
    bf3c:	b348b03a 	or	r4,r22,r13
    bf40:	003ee106 	br	bac8 <__alt_mem_Flash_flash_data+0xf400bac8>
    bf44:	80c00007 	ldb	r3,0(r16)
    bf48:	80800044 	addi	r2,r16,1
    bf4c:	1b42a326 	beq	r3,r13,c9dc <___vfiprintf_internal_r+0x1298>
    bf50:	193ff404 	addi	r4,r3,-48
    bf54:	1021883a 	mov	r16,r2
    bf58:	0013883a 	mov	r9,zero
    bf5c:	313e5836 	bltu	r6,r4,b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    bf60:	80c00007 	ldb	r3,0(r16)
    bf64:	4a4002a4 	muli	r9,r9,10
    bf68:	84000044 	addi	r16,r16,1
    bf6c:	2253883a 	add	r9,r4,r9
    bf70:	193ff404 	addi	r4,r3,-48
    bf74:	313ffa2e 	bgeu	r6,r4,bf60 <__alt_mem_Flash_flash_data+0xf400bf60>
    bf78:	483e510e 	bge	r9,zero,b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    bf7c:	027fffc4 	movi	r9,-1
    bf80:	003e4f06 	br	b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    bf84:	d9c01d85 	stb	r7,118(sp)
    bf88:	a880080c 	andi	r2,r21,32
    bf8c:	10020826 	beq	r2,zero,c7b0 <___vfiprintf_internal_r+0x106c>
    bf90:	d8c02217 	ldw	r3,136(sp)
    bf94:	d9002317 	ldw	r4,140(sp)
    bf98:	18800017 	ldw	r2,0(r3)
    bf9c:	2007d7fa 	srai	r3,r4,31
    bfa0:	d9002217 	ldw	r4,136(sp)
    bfa4:	10c00115 	stw	r3,4(r2)
    bfa8:	21000104 	addi	r4,r4,4
    bfac:	d9002215 	stw	r4,136(sp)
    bfb0:	d9002317 	ldw	r4,140(sp)
    bfb4:	11000015 	stw	r4,0(r2)
    bfb8:	003e1606 	br	b814 <__alt_mem_Flash_flash_data+0xf400b814>
    bfbc:	d8802217 	ldw	r2,136(sp)
    bfc0:	d8c02217 	ldw	r3,136(sp)
    bfc4:	15800017 	ldw	r22,0(r2)
    bfc8:	13400117 	ldw	r13,4(r2)
    bfcc:	18c00204 	addi	r3,r3,8
    bfd0:	0005883a 	mov	r2,zero
    bfd4:	d8c02215 	stw	r3,136(sp)
    bfd8:	b348b03a 	or	r4,r22,r13
    bfdc:	003eb706 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    bfe0:	38803fcc 	andi	r2,r7,255
    bfe4:	1080201c 	xori	r2,r2,128
    bfe8:	10bfe004 	addi	r2,r2,-128
    bfec:	1001e31e 	bne	r2,zero,c77c <___vfiprintf_internal_r+0x1038>
    bff0:	8005883a 	mov	r2,r16
    bff4:	01c00804 	movi	r7,32
    bff8:	80c00007 	ldb	r3,0(r16)
    bffc:	003e2f06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c000:	ad400054 	ori	r21,r21,1
    c004:	8005883a 	mov	r2,r16
    c008:	80c00007 	ldb	r3,0(r16)
    c00c:	003e2b06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c010:	d8c02217 	ldw	r3,136(sp)
    c014:	1c800017 	ldw	r18,0(r3)
    c018:	18c00104 	addi	r3,r3,4
    c01c:	90023816 	blt	r18,zero,c900 <___vfiprintf_internal_r+0x11bc>
    c020:	d8c02215 	stw	r3,136(sp)
    c024:	8005883a 	mov	r2,r16
    c028:	80c00007 	ldb	r3,0(r16)
    c02c:	003e2306 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c030:	8005883a 	mov	r2,r16
    c034:	01c00ac4 	movi	r7,43
    c038:	80c00007 	ldb	r3,0(r16)
    c03c:	003e1f06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c040:	d8c02217 	ldw	r3,136(sp)
    c044:	04400044 	movi	r17,1
    c048:	d8001d85 	stb	zero,118(sp)
    c04c:	18800017 	ldw	r2,0(r3)
    c050:	18c00104 	addi	r3,r3,4
    c054:	d8c02215 	stw	r3,136(sp)
    c058:	d8801005 	stb	r2,64(sp)
    c05c:	8827883a 	mov	r19,r17
    c060:	dd001004 	addi	r20,sp,64
    c064:	0013883a 	mov	r9,zero
    c068:	003eb806 	br	bb4c <__alt_mem_Flash_flash_data+0xf400bb4c>
    c06c:	d9c01d85 	stb	r7,118(sp)
    c070:	a880080c 	andi	r2,r21,32
    c074:	d8c02217 	ldw	r3,136(sp)
    c078:	103fa61e 	bne	r2,zero,bf14 <__alt_mem_Flash_flash_data+0xf400bf14>
    c07c:	a880040c 	andi	r2,r21,16
    c080:	1001dd26 	beq	r2,zero,c7f8 <___vfiprintf_internal_r+0x10b4>
    c084:	1d800017 	ldw	r22,0(r3)
    c088:	d8802217 	ldw	r2,136(sp)
    c08c:	b01bd7fa 	srai	r13,r22,31
    c090:	10800104 	addi	r2,r2,4
    c094:	d8802215 	stw	r2,136(sp)
    c098:	6805883a 	mov	r2,r13
    c09c:	003fa306 	br	bf2c <__alt_mem_Flash_flash_data+0xf400bf2c>
    c0a0:	008000b4 	movhi	r2,2
    c0a4:	10baec04 	addi	r2,r2,-5200
    c0a8:	d8802615 	stw	r2,152(sp)
    c0ac:	d9c01d85 	stb	r7,118(sp)
    c0b0:	a880080c 	andi	r2,r21,32
    c0b4:	10004726 	beq	r2,zero,c1d4 <___vfiprintf_internal_r+0xa90>
    c0b8:	d9002217 	ldw	r4,136(sp)
    c0bc:	25800017 	ldw	r22,0(r4)
    c0c0:	23400117 	ldw	r13,4(r4)
    c0c4:	21000204 	addi	r4,r4,8
    c0c8:	d9002215 	stw	r4,136(sp)
    c0cc:	a880004c 	andi	r2,r21,1
    c0d0:	10014e26 	beq	r2,zero,c60c <___vfiprintf_internal_r+0xec8>
    c0d4:	b348b03a 	or	r4,r22,r13
    c0d8:	20019c26 	beq	r4,zero,c74c <___vfiprintf_internal_r+0x1008>
    c0dc:	00800c04 	movi	r2,48
    c0e0:	d8801d05 	stb	r2,116(sp)
    c0e4:	d8c01d45 	stb	r3,117(sp)
    c0e8:	ad400094 	ori	r21,r21,2
    c0ec:	00800084 	movi	r2,2
    c0f0:	003e7206 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c0f4:	d8c02217 	ldw	r3,136(sp)
    c0f8:	d8001d85 	stb	zero,118(sp)
    c0fc:	1d000017 	ldw	r20,0(r3)
    c100:	1d800104 	addi	r22,r3,4
    c104:	a0021c26 	beq	r20,zero,c978 <___vfiprintf_internal_r+0x1234>
    c108:	a009883a 	mov	r4,r20
    c10c:	48020016 	blt	r9,zero,c910 <___vfiprintf_internal_r+0x11cc>
    c110:	480d883a 	mov	r6,r9
    c114:	000b883a 	mov	r5,zero
    c118:	da002a15 	stw	r8,168(sp)
    c11c:	da402b15 	stw	r9,172(sp)
    c120:	00090680 	call	9068 <memchr>
    c124:	da002a17 	ldw	r8,168(sp)
    c128:	da402b17 	ldw	r9,172(sp)
    c12c:	10022226 	beq	r2,zero,c9b8 <___vfiprintf_internal_r+0x1274>
    c130:	1527c83a 	sub	r19,r2,r20
    c134:	4cc1c916 	blt	r9,r19,c85c <___vfiprintf_internal_r+0x1118>
    c138:	db801d83 	ldbu	r14,118(sp)
    c13c:	dd802215 	stw	r22,136(sp)
    c140:	0013883a 	mov	r9,zero
    c144:	003e7906 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c148:	ad401014 	ori	r21,r21,64
    c14c:	8005883a 	mov	r2,r16
    c150:	80c00007 	ldb	r3,0(r16)
    c154:	003dd906 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c158:	80c00007 	ldb	r3,0(r16)
    c15c:	8005883a 	mov	r2,r16
    c160:	1b01e326 	beq	r3,r12,c8f0 <___vfiprintf_internal_r+0x11ac>
    c164:	ad400414 	ori	r21,r21,16
    c168:	003dd406 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c16c:	d9002217 	ldw	r4,136(sp)
    c170:	00800c04 	movi	r2,48
    c174:	d8801d05 	stb	r2,116(sp)
    c178:	25800017 	ldw	r22,0(r4)
    c17c:	00801e04 	movi	r2,120
    c180:	d8801d45 	stb	r2,117(sp)
    c184:	008000b4 	movhi	r2,2
    c188:	21000104 	addi	r4,r4,4
    c18c:	10baf104 	addi	r2,r2,-5180
    c190:	d9002215 	stw	r4,136(sp)
    c194:	d8802615 	stw	r2,152(sp)
    c198:	001b883a 	mov	r13,zero
    c19c:	ad400094 	ori	r21,r21,2
    c1a0:	00800084 	movi	r2,2
    c1a4:	b009883a 	mov	r4,r22
    c1a8:	003e4406 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c1ac:	ad400814 	ori	r21,r21,32
    c1b0:	8005883a 	mov	r2,r16
    c1b4:	80c00007 	ldb	r3,0(r16)
    c1b8:	003dc006 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c1bc:	008000b4 	movhi	r2,2
    c1c0:	10baf104 	addi	r2,r2,-5180
    c1c4:	d8802615 	stw	r2,152(sp)
    c1c8:	d9c01d85 	stb	r7,118(sp)
    c1cc:	a880080c 	andi	r2,r21,32
    c1d0:	103fb91e 	bne	r2,zero,c0b8 <__alt_mem_Flash_flash_data+0xf400c0b8>
    c1d4:	a880040c 	andi	r2,r21,16
    c1d8:	10010f1e 	bne	r2,zero,c618 <___vfiprintf_internal_r+0xed4>
    c1dc:	a880100c 	andi	r2,r21,64
    c1e0:	10010d26 	beq	r2,zero,c618 <___vfiprintf_internal_r+0xed4>
    c1e4:	d9002217 	ldw	r4,136(sp)
    c1e8:	001b883a 	mov	r13,zero
    c1ec:	2580000b 	ldhu	r22,0(r4)
    c1f0:	21000104 	addi	r4,r4,4
    c1f4:	d9002215 	stw	r4,136(sp)
    c1f8:	003fb406 	br	c0cc <__alt_mem_Flash_flash_data+0xf400c0cc>
    c1fc:	d9002217 	ldw	r4,136(sp)
    c200:	00800044 	movi	r2,1
    c204:	25800017 	ldw	r22,0(r4)
    c208:	23400117 	ldw	r13,4(r4)
    c20c:	21000204 	addi	r4,r4,8
    c210:	d9002215 	stw	r4,136(sp)
    c214:	b348b03a 	or	r4,r22,r13
    c218:	003e2806 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c21c:	d9c01d85 	stb	r7,118(sp)
    c220:	1801ab26 	beq	r3,zero,c8d0 <___vfiprintf_internal_r+0x118c>
    c224:	04400044 	movi	r17,1
    c228:	d8c01005 	stb	r3,64(sp)
    c22c:	d8001d85 	stb	zero,118(sp)
    c230:	8827883a 	mov	r19,r17
    c234:	dd001004 	addi	r20,sp,64
    c238:	003f8a06 	br	c064 <__alt_mem_Flash_flash_data+0xf400c064>
    c23c:	d9002017 	ldw	r4,128(sp)
    c240:	d9402117 	ldw	r5,132(sp)
    c244:	d9801a04 	addi	r6,sp,104
    c248:	d9c02b15 	stw	r7,172(sp)
    c24c:	dbc02a15 	stw	r15,168(sp)
    c250:	000b6300 	call	b630 <__sprint_r.part.0>
    c254:	d9c02b17 	ldw	r7,172(sp)
    c258:	dbc02a17 	ldw	r15,168(sp)
    c25c:	1000631e 	bne	r2,zero,c3ec <___vfiprintf_internal_r+0xca8>
    c260:	d9801b17 	ldw	r6,108(sp)
    c264:	d8801c17 	ldw	r2,112(sp)
    c268:	d811883a 	mov	r8,sp
    c26c:	31400044 	addi	r5,r6,1
    c270:	003e4d06 	br	bba8 <__alt_mem_Flash_flash_data+0xf400bba8>
    c274:	d9401b17 	ldw	r5,108(sp)
    c278:	d8801c17 	ldw	r2,112(sp)
    c27c:	29000044 	addi	r4,r5,1
    c280:	d8c01d87 	ldb	r3,118(sp)
    c284:	183e6726 	beq	r3,zero,bc24 <__alt_mem_Flash_flash_data+0xf400bc24>
    c288:	00c00044 	movi	r3,1
    c28c:	d9401d84 	addi	r5,sp,118
    c290:	10c5883a 	add	r2,r2,r3
    c294:	41400015 	stw	r5,0(r8)
    c298:	40c00115 	stw	r3,4(r8)
    c29c:	d8801c15 	stw	r2,112(sp)
    c2a0:	d9001b15 	stw	r4,108(sp)
    c2a4:	014001c4 	movi	r5,7
    c2a8:	2900ab16 	blt	r5,r4,c558 <___vfiprintf_internal_r+0xe14>
    c2ac:	200b883a 	mov	r5,r4
    c2b0:	42000204 	addi	r8,r8,8
    c2b4:	21000044 	addi	r4,r4,1
    c2b8:	003e5a06 	br	bc24 <__alt_mem_Flash_flash_data+0xf400bc24>
    c2bc:	d9002017 	ldw	r4,128(sp)
    c2c0:	d9402117 	ldw	r5,132(sp)
    c2c4:	d9801a04 	addi	r6,sp,104
    c2c8:	d9c02b15 	stw	r7,172(sp)
    c2cc:	db402a15 	stw	r13,168(sp)
    c2d0:	000b6300 	call	b630 <__sprint_r.part.0>
    c2d4:	d9c02b17 	ldw	r7,172(sp)
    c2d8:	db402a17 	ldw	r13,168(sp)
    c2dc:	1000431e 	bne	r2,zero,c3ec <___vfiprintf_internal_r+0xca8>
    c2e0:	d9401b17 	ldw	r5,108(sp)
    c2e4:	d8801c17 	ldw	r2,112(sp)
    c2e8:	d811883a 	mov	r8,sp
    c2ec:	29000044 	addi	r4,r5,1
    c2f0:	003e6706 	br	bc90 <__alt_mem_Flash_flash_data+0xf400bc90>
    c2f4:	10803fcc 	andi	r2,r2,255
    c2f8:	00c00044 	movi	r3,1
    c2fc:	10fdfa1e 	bne	r2,r3,bae8 <__alt_mem_Flash_flash_data+0xf400bae8>
    c300:	6800021e 	bne	r13,zero,c30c <___vfiprintf_internal_r+0xbc8>
    c304:	00800244 	movi	r2,9
    c308:	1580222e 	bgeu	r2,r22,c394 <___vfiprintf_internal_r+0xc50>
    c30c:	dc802415 	stw	r18,144(sp)
    c310:	dc002515 	stw	r16,148(sp)
    c314:	dc401a04 	addi	r17,sp,104
    c318:	b021883a 	mov	r16,r22
    c31c:	4827883a 	mov	r19,r9
    c320:	4029883a 	mov	r20,r8
    c324:	702d883a 	mov	r22,r14
    c328:	6825883a 	mov	r18,r13
    c32c:	8009883a 	mov	r4,r16
    c330:	900b883a 	mov	r5,r18
    c334:	01800284 	movi	r6,10
    c338:	000f883a 	mov	r7,zero
    c33c:	000e5300 	call	e530 <__umoddi3>
    c340:	10800c04 	addi	r2,r2,48
    c344:	8c7fffc4 	addi	r17,r17,-1
    c348:	8009883a 	mov	r4,r16
    c34c:	900b883a 	mov	r5,r18
    c350:	01800284 	movi	r6,10
    c354:	000f883a 	mov	r7,zero
    c358:	88800005 	stb	r2,0(r17)
    c35c:	000df700 	call	df70 <__udivdi3>
    c360:	1021883a 	mov	r16,r2
    c364:	10c4b03a 	or	r2,r2,r3
    c368:	1825883a 	mov	r18,r3
    c36c:	103fef1e 	bne	r2,zero,c32c <__alt_mem_Flash_flash_data+0xf400c32c>
    c370:	dc802417 	ldw	r18,144(sp)
    c374:	dc002517 	ldw	r16,148(sp)
    c378:	a011883a 	mov	r8,r20
    c37c:	9813883a 	mov	r9,r19
    c380:	b01d883a 	mov	r14,r22
    c384:	8829883a 	mov	r20,r17
    c388:	d8c01e17 	ldw	r3,120(sp)
    c38c:	1d27c83a 	sub	r19,r3,r20
    c390:	003de606 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c394:	b5800c04 	addi	r22,r22,48
    c398:	dd8019c5 	stb	r22,103(sp)
    c39c:	dcc02717 	ldw	r19,156(sp)
    c3a0:	dd0019c4 	addi	r20,sp,103
    c3a4:	003de106 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c3a8:	d9002017 	ldw	r4,128(sp)
    c3ac:	d9402117 	ldw	r5,132(sp)
    c3b0:	d9801a04 	addi	r6,sp,104
    c3b4:	000b6300 	call	b630 <__sprint_r.part.0>
    c3b8:	10000c1e 	bne	r2,zero,c3ec <___vfiprintf_internal_r+0xca8>
    c3bc:	d8801c17 	ldw	r2,112(sp)
    c3c0:	8c80010e 	bge	r17,r18,c3c8 <___vfiprintf_internal_r+0xc84>
    c3c4:	9023883a 	mov	r17,r18
    c3c8:	d8c02317 	ldw	r3,140(sp)
    c3cc:	1c47883a 	add	r3,r3,r17
    c3d0:	d8c02315 	stw	r3,140(sp)
    c3d4:	103e7e26 	beq	r2,zero,bdd0 <__alt_mem_Flash_flash_data+0xf400bdd0>
    c3d8:	d9002017 	ldw	r4,128(sp)
    c3dc:	d9402117 	ldw	r5,132(sp)
    c3e0:	d9801a04 	addi	r6,sp,104
    c3e4:	000b6300 	call	b630 <__sprint_r.part.0>
    c3e8:	103e7926 	beq	r2,zero,bdd0 <__alt_mem_Flash_flash_data+0xf400bdd0>
    c3ec:	dd402117 	ldw	r21,132(sp)
    c3f0:	a880030b 	ldhu	r2,12(r21)
    c3f4:	1080100c 	andi	r2,r2,64
    c3f8:	103e881e 	bne	r2,zero,be1c <__alt_mem_Flash_flash_data+0xf400be1c>
    c3fc:	d8802317 	ldw	r2,140(sp)
    c400:	003e8706 	br	be20 <__alt_mem_Flash_flash_data+0xf400be20>
    c404:	d9402117 	ldw	r5,132(sp)
    c408:	b009883a 	mov	r4,r22
    c40c:	d9801a04 	addi	r6,sp,104
    c410:	000b6300 	call	b630 <__sprint_r.part.0>
    c414:	103ff51e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c418:	d9001b17 	ldw	r4,108(sp)
    c41c:	d8801c17 	ldw	r2,112(sp)
    c420:	d811883a 	mov	r8,sp
    c424:	21400044 	addi	r5,r4,1
    c428:	003e4d06 	br	bd60 <__alt_mem_Flash_flash_data+0xf400bd60>
    c42c:	1000aa1e 	bne	r2,zero,c6d8 <___vfiprintf_internal_r+0xf94>
    c430:	00c00044 	movi	r3,1
    c434:	9805883a 	mov	r2,r19
    c438:	dd000015 	stw	r20,0(sp)
    c43c:	dcc00115 	stw	r19,4(sp)
    c440:	dcc01c15 	stw	r19,112(sp)
    c444:	d8c01b15 	stw	r3,108(sp)
    c448:	d811883a 	mov	r8,sp
    c44c:	42000204 	addi	r8,r8,8
    c450:	aac0010c 	andi	r11,r21,4
    c454:	583fda26 	beq	r11,zero,c3c0 <__alt_mem_Flash_flash_data+0xf400c3c0>
    c458:	9467c83a 	sub	r19,r18,r17
    c45c:	04fe3316 	blt	zero,r19,bd2c <__alt_mem_Flash_flash_data+0xf400bd2c>
    c460:	003fd706 	br	c3c0 <__alt_mem_Flash_flash_data+0xf400c3c0>
    c464:	946dc83a 	sub	r22,r18,r17
    c468:	05bdfd0e 	bge	zero,r22,bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    c46c:	00c000b4 	movhi	r3,2
    c470:	18fb6204 	addi	r3,r3,-4728
    c474:	01c00404 	movi	r7,16
    c478:	d8c02415 	stw	r3,144(sp)
    c47c:	3d81530e 	bge	r7,r22,c9cc <___vfiprintf_internal_r+0x1288>
    c480:	8007883a 	mov	r3,r16
    c484:	034001c4 	movi	r13,7
    c488:	b021883a 	mov	r16,r22
    c48c:	da402515 	stw	r9,148(sp)
    c490:	182d883a 	mov	r22,r3
    c494:	00000506 	br	c4ac <___vfiprintf_internal_r+0xd68>
    c498:	29800084 	addi	r6,r5,2
    c49c:	42000204 	addi	r8,r8,8
    c4a0:	180b883a 	mov	r5,r3
    c4a4:	843ffc04 	addi	r16,r16,-16
    c4a8:	3c000d0e 	bge	r7,r16,c4e0 <___vfiprintf_internal_r+0xd9c>
    c4ac:	10800404 	addi	r2,r2,16
    c4b0:	28c00044 	addi	r3,r5,1
    c4b4:	45c00015 	stw	r23,0(r8)
    c4b8:	41c00115 	stw	r7,4(r8)
    c4bc:	d8801c15 	stw	r2,112(sp)
    c4c0:	d8c01b15 	stw	r3,108(sp)
    c4c4:	68fff40e 	bge	r13,r3,c498 <__alt_mem_Flash_flash_data+0xf400c498>
    c4c8:	1000151e 	bne	r2,zero,c520 <___vfiprintf_internal_r+0xddc>
    c4cc:	843ffc04 	addi	r16,r16,-16
    c4d0:	01800044 	movi	r6,1
    c4d4:	000b883a 	mov	r5,zero
    c4d8:	d811883a 	mov	r8,sp
    c4dc:	3c3ff316 	blt	r7,r16,c4ac <__alt_mem_Flash_flash_data+0xf400c4ac>
    c4e0:	da402517 	ldw	r9,148(sp)
    c4e4:	b007883a 	mov	r3,r22
    c4e8:	802d883a 	mov	r22,r16
    c4ec:	1821883a 	mov	r16,r3
    c4f0:	d8c02417 	ldw	r3,144(sp)
    c4f4:	1585883a 	add	r2,r2,r22
    c4f8:	45800115 	stw	r22,4(r8)
    c4fc:	40c00015 	stw	r3,0(r8)
    c500:	d8801c15 	stw	r2,112(sp)
    c504:	d9801b15 	stw	r6,108(sp)
    c508:	00c001c4 	movi	r3,7
    c50c:	19806d16 	blt	r3,r6,c6c4 <___vfiprintf_internal_r+0xf80>
    c510:	42000204 	addi	r8,r8,8
    c514:	31000044 	addi	r4,r6,1
    c518:	300b883a 	mov	r5,r6
    c51c:	003dd006 	br	bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    c520:	d9002017 	ldw	r4,128(sp)
    c524:	d9402117 	ldw	r5,132(sp)
    c528:	d9801a04 	addi	r6,sp,104
    c52c:	d9c02b15 	stw	r7,172(sp)
    c530:	db402a15 	stw	r13,168(sp)
    c534:	000b6300 	call	b630 <__sprint_r.part.0>
    c538:	d9c02b17 	ldw	r7,172(sp)
    c53c:	db402a17 	ldw	r13,168(sp)
    c540:	103faa1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c544:	d9401b17 	ldw	r5,108(sp)
    c548:	d8801c17 	ldw	r2,112(sp)
    c54c:	d811883a 	mov	r8,sp
    c550:	29800044 	addi	r6,r5,1
    c554:	003fd306 	br	c4a4 <__alt_mem_Flash_flash_data+0xf400c4a4>
    c558:	1000401e 	bne	r2,zero,c65c <___vfiprintf_internal_r+0xf18>
    c55c:	68003b26 	beq	r13,zero,c64c <___vfiprintf_internal_r+0xf08>
    c560:	d9001d04 	addi	r4,sp,116
    c564:	00800084 	movi	r2,2
    c568:	d9000015 	stw	r4,0(sp)
    c56c:	d8800115 	stw	r2,4(sp)
    c570:	1809883a 	mov	r4,r3
    c574:	d811883a 	mov	r8,sp
    c578:	003db406 	br	bc4c <__alt_mem_Flash_flash_data+0xf400bc4c>
    c57c:	1000451e 	bne	r2,zero,c694 <___vfiprintf_internal_r+0xf50>
    c580:	01000044 	movi	r4,1
    c584:	000b883a 	mov	r5,zero
    c588:	d811883a 	mov	r8,sp
    c58c:	003db206 	br	bc58 <__alt_mem_Flash_flash_data+0xf400bc58>
    c590:	10803fcc 	andi	r2,r2,255
    c594:	1000071e 	bne	r2,zero,c5b4 <___vfiprintf_internal_r+0xe70>
    c598:	a880004c 	andi	r2,r21,1
    c59c:	10000526 	beq	r2,zero,c5b4 <___vfiprintf_internal_r+0xe70>
    c5a0:	00800c04 	movi	r2,48
    c5a4:	d88019c5 	stb	r2,103(sp)
    c5a8:	dcc02717 	ldw	r19,156(sp)
    c5ac:	dd0019c4 	addi	r20,sp,103
    c5b0:	003d5e06 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c5b4:	dd001a04 	addi	r20,sp,104
    c5b8:	003d5c06 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c5bc:	1000971e 	bne	r2,zero,c81c <___vfiprintf_internal_r+0x10d8>
    c5c0:	d8c01d87 	ldb	r3,118(sp)
    c5c4:	18005826 	beq	r3,zero,c728 <___vfiprintf_internal_r+0xfe4>
    c5c8:	00800044 	movi	r2,1
    c5cc:	d8c01d84 	addi	r3,sp,118
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	d8c00015 	stw	r3,0(sp)
    c5d8:	d8800115 	stw	r2,4(sp)
    c5dc:	d811883a 	mov	r8,sp
    c5e0:	003f3206 	br	c2ac <__alt_mem_Flash_flash_data+0xf400c2ac>
    c5e4:	8023883a 	mov	r17,r16
    c5e8:	003ca706 	br	b888 <__alt_mem_Flash_flash_data+0xf400b888>
    c5ec:	d9002017 	ldw	r4,128(sp)
    c5f0:	d9402117 	ldw	r5,132(sp)
    c5f4:	d9801a04 	addi	r6,sp,104
    c5f8:	000b6300 	call	b630 <__sprint_r.part.0>
    c5fc:	103f7b1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c600:	d8801c17 	ldw	r2,112(sp)
    c604:	d811883a 	mov	r8,sp
    c608:	003f9106 	br	c450 <__alt_mem_Flash_flash_data+0xf400c450>
    c60c:	00800084 	movi	r2,2
    c610:	b348b03a 	or	r4,r22,r13
    c614:	003d2906 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c618:	d8802217 	ldw	r2,136(sp)
    c61c:	001b883a 	mov	r13,zero
    c620:	15800017 	ldw	r22,0(r2)
    c624:	10800104 	addi	r2,r2,4
    c628:	d8802215 	stw	r2,136(sp)
    c62c:	003ea706 	br	c0cc <__alt_mem_Flash_flash_data+0xf400c0cc>
    c630:	d9002017 	ldw	r4,128(sp)
    c634:	d9402117 	ldw	r5,132(sp)
    c638:	d9801a04 	addi	r6,sp,104
    c63c:	000b6300 	call	b630 <__sprint_r.part.0>
    c640:	103f6a1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c644:	d811883a 	mov	r8,sp
    c648:	003cff06 	br	ba48 <__alt_mem_Flash_flash_data+0xf400ba48>
    c64c:	000b883a 	mov	r5,zero
    c650:	1809883a 	mov	r4,r3
    c654:	d811883a 	mov	r8,sp
    c658:	003d7f06 	br	bc58 <__alt_mem_Flash_flash_data+0xf400bc58>
    c65c:	d9002017 	ldw	r4,128(sp)
    c660:	d9402117 	ldw	r5,132(sp)
    c664:	d9801a04 	addi	r6,sp,104
    c668:	da402b15 	stw	r9,172(sp)
    c66c:	db402a15 	stw	r13,168(sp)
    c670:	000b6300 	call	b630 <__sprint_r.part.0>
    c674:	da402b17 	ldw	r9,172(sp)
    c678:	db402a17 	ldw	r13,168(sp)
    c67c:	103f5b1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c680:	d9401b17 	ldw	r5,108(sp)
    c684:	d8801c17 	ldw	r2,112(sp)
    c688:	d811883a 	mov	r8,sp
    c68c:	29000044 	addi	r4,r5,1
    c690:	003d6406 	br	bc24 <__alt_mem_Flash_flash_data+0xf400bc24>
    c694:	d9002017 	ldw	r4,128(sp)
    c698:	d9402117 	ldw	r5,132(sp)
    c69c:	d9801a04 	addi	r6,sp,104
    c6a0:	da402b15 	stw	r9,172(sp)
    c6a4:	000b6300 	call	b630 <__sprint_r.part.0>
    c6a8:	da402b17 	ldw	r9,172(sp)
    c6ac:	103f4f1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c6b0:	d9401b17 	ldw	r5,108(sp)
    c6b4:	d8801c17 	ldw	r2,112(sp)
    c6b8:	d811883a 	mov	r8,sp
    c6bc:	29000044 	addi	r4,r5,1
    c6c0:	003d6506 	br	bc58 <__alt_mem_Flash_flash_data+0xf400bc58>
    c6c4:	10009a1e 	bne	r2,zero,c930 <___vfiprintf_internal_r+0x11ec>
    c6c8:	01000044 	movi	r4,1
    c6cc:	000b883a 	mov	r5,zero
    c6d0:	d811883a 	mov	r8,sp
    c6d4:	003d6206 	br	bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    c6d8:	d9002017 	ldw	r4,128(sp)
    c6dc:	d9402117 	ldw	r5,132(sp)
    c6e0:	d9801a04 	addi	r6,sp,104
    c6e4:	000b6300 	call	b630 <__sprint_r.part.0>
    c6e8:	103f401e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c6ec:	d9001b17 	ldw	r4,108(sp)
    c6f0:	d8801c17 	ldw	r2,112(sp)
    c6f4:	d811883a 	mov	r8,sp
    c6f8:	21000044 	addi	r4,r4,1
    c6fc:	003d7d06 	br	bcf4 <__alt_mem_Flash_flash_data+0xf400bcf4>
    c700:	05adc83a 	sub	r22,zero,r22
    c704:	b004c03a 	cmpne	r2,r22,zero
    c708:	035bc83a 	sub	r13,zero,r13
    c70c:	689bc83a 	sub	r13,r13,r2
    c710:	03800b44 	movi	r14,45
    c714:	db801d85 	stb	r14,118(sp)
    c718:	4827883a 	mov	r19,r9
    c71c:	00800044 	movi	r2,1
    c720:	b348b03a 	or	r4,r22,r13
    c724:	003ce806 	br	bac8 <__alt_mem_Flash_flash_data+0xf400bac8>
    c728:	000b883a 	mov	r5,zero
    c72c:	01000044 	movi	r4,1
    c730:	d811883a 	mov	r8,sp
    c734:	683d4826 	beq	r13,zero,bc58 <__alt_mem_Flash_flash_data+0xf400bc58>
    c738:	00800084 	movi	r2,2
    c73c:	d8c01d04 	addi	r3,sp,116
    c740:	d8c00015 	stw	r3,0(sp)
    c744:	d8800115 	stw	r2,4(sp)
    c748:	003d4006 	br	bc4c <__alt_mem_Flash_flash_data+0xf400bc4c>
    c74c:	00800084 	movi	r2,2
    c750:	003cda06 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c754:	a880100c 	andi	r2,r21,64
    c758:	10004226 	beq	r2,zero,c864 <___vfiprintf_internal_r+0x1120>
    c75c:	d8802217 	ldw	r2,136(sp)
    c760:	001b883a 	mov	r13,zero
    c764:	1580000b 	ldhu	r22,0(r2)
    c768:	10800104 	addi	r2,r2,4
    c76c:	d8802215 	stw	r2,136(sp)
    c770:	b009883a 	mov	r4,r22
    c774:	0005883a 	mov	r2,zero
    c778:	003cd006 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c77c:	80c00007 	ldb	r3,0(r16)
    c780:	8005883a 	mov	r2,r16
    c784:	003c4d06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c788:	a880100c 	andi	r2,r21,64
    c78c:	10004426 	beq	r2,zero,c8a0 <___vfiprintf_internal_r+0x115c>
    c790:	d8c02217 	ldw	r3,136(sp)
    c794:	001b883a 	mov	r13,zero
    c798:	00800044 	movi	r2,1
    c79c:	1d80000b 	ldhu	r22,0(r3)
    c7a0:	18c00104 	addi	r3,r3,4
    c7a4:	d8c02215 	stw	r3,136(sp)
    c7a8:	b009883a 	mov	r4,r22
    c7ac:	003cc306 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c7b0:	a880040c 	andi	r2,r21,16
    c7b4:	1000091e 	bne	r2,zero,c7dc <___vfiprintf_internal_r+0x1098>
    c7b8:	aac0100c 	andi	r11,r21,64
    c7bc:	58000726 	beq	r11,zero,c7dc <___vfiprintf_internal_r+0x1098>
    c7c0:	d8c02217 	ldw	r3,136(sp)
    c7c4:	d9002317 	ldw	r4,140(sp)
    c7c8:	18800017 	ldw	r2,0(r3)
    c7cc:	18c00104 	addi	r3,r3,4
    c7d0:	d8c02215 	stw	r3,136(sp)
    c7d4:	1100000d 	sth	r4,0(r2)
    c7d8:	003c0e06 	br	b814 <__alt_mem_Flash_flash_data+0xf400b814>
    c7dc:	d8c02217 	ldw	r3,136(sp)
    c7e0:	d9002317 	ldw	r4,140(sp)
    c7e4:	18800017 	ldw	r2,0(r3)
    c7e8:	18c00104 	addi	r3,r3,4
    c7ec:	d8c02215 	stw	r3,136(sp)
    c7f0:	11000015 	stw	r4,0(r2)
    c7f4:	003c0706 	br	b814 <__alt_mem_Flash_flash_data+0xf400b814>
    c7f8:	a880100c 	andi	r2,r21,64
    c7fc:	10002126 	beq	r2,zero,c884 <___vfiprintf_internal_r+0x1140>
    c800:	1d80000f 	ldh	r22,0(r3)
    c804:	d8c02217 	ldw	r3,136(sp)
    c808:	b01bd7fa 	srai	r13,r22,31
    c80c:	18c00104 	addi	r3,r3,4
    c810:	d8c02215 	stw	r3,136(sp)
    c814:	6805883a 	mov	r2,r13
    c818:	003dc406 	br	bf2c <__alt_mem_Flash_flash_data+0xf400bf2c>
    c81c:	d9002017 	ldw	r4,128(sp)
    c820:	d9402117 	ldw	r5,132(sp)
    c824:	d9801a04 	addi	r6,sp,104
    c828:	da402b15 	stw	r9,172(sp)
    c82c:	db402a15 	stw	r13,168(sp)
    c830:	000b6300 	call	b630 <__sprint_r.part.0>
    c834:	da402b17 	ldw	r9,172(sp)
    c838:	db402a17 	ldw	r13,168(sp)
    c83c:	103eeb1e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c840:	d9401b17 	ldw	r5,108(sp)
    c844:	d8801c17 	ldw	r2,112(sp)
    c848:	d811883a 	mov	r8,sp
    c84c:	29000044 	addi	r4,r5,1
    c850:	003e8b06 	br	c280 <__alt_mem_Flash_flash_data+0xf400c280>
    c854:	9023883a 	mov	r17,r18
    c858:	003d5a06 	br	bdc4 <__alt_mem_Flash_flash_data+0xf400bdc4>
    c85c:	4827883a 	mov	r19,r9
    c860:	003e3506 	br	c138 <__alt_mem_Flash_flash_data+0xf400c138>
    c864:	d8c02217 	ldw	r3,136(sp)
    c868:	001b883a 	mov	r13,zero
    c86c:	0005883a 	mov	r2,zero
    c870:	1d800017 	ldw	r22,0(r3)
    c874:	18c00104 	addi	r3,r3,4
    c878:	d8c02215 	stw	r3,136(sp)
    c87c:	b009883a 	mov	r4,r22
    c880:	003c8e06 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c884:	1d800017 	ldw	r22,0(r3)
    c888:	d9002217 	ldw	r4,136(sp)
    c88c:	b01bd7fa 	srai	r13,r22,31
    c890:	21000104 	addi	r4,r4,4
    c894:	d9002215 	stw	r4,136(sp)
    c898:	6805883a 	mov	r2,r13
    c89c:	003da306 	br	bf2c <__alt_mem_Flash_flash_data+0xf400bf2c>
    c8a0:	d9002217 	ldw	r4,136(sp)
    c8a4:	001b883a 	mov	r13,zero
    c8a8:	00800044 	movi	r2,1
    c8ac:	25800017 	ldw	r22,0(r4)
    c8b0:	21000104 	addi	r4,r4,4
    c8b4:	d9002215 	stw	r4,136(sp)
    c8b8:	b009883a 	mov	r4,r22
    c8bc:	003c7f06 	br	babc <__alt_mem_Flash_flash_data+0xf400babc>
    c8c0:	00c000b4 	movhi	r3,2
    c8c4:	18fb6204 	addi	r3,r3,-4728
    c8c8:	d8c02415 	stw	r3,144(sp)
    c8cc:	003cff06 	br	bccc <__alt_mem_Flash_flash_data+0xf400bccc>
    c8d0:	d8801c17 	ldw	r2,112(sp)
    c8d4:	dd402117 	ldw	r21,132(sp)
    c8d8:	103ec526 	beq	r2,zero,c3f0 <__alt_mem_Flash_flash_data+0xf400c3f0>
    c8dc:	d9002017 	ldw	r4,128(sp)
    c8e0:	a80b883a 	mov	r5,r21
    c8e4:	d9801a04 	addi	r6,sp,104
    c8e8:	000b6300 	call	b630 <__sprint_r.part.0>
    c8ec:	003ec006 	br	c3f0 <__alt_mem_Flash_flash_data+0xf400c3f0>
    c8f0:	80800044 	addi	r2,r16,1
    c8f4:	ad400814 	ori	r21,r21,32
    c8f8:	80c00047 	ldb	r3,1(r16)
    c8fc:	003bef06 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c900:	04a5c83a 	sub	r18,zero,r18
    c904:	8005883a 	mov	r2,r16
    c908:	d8c02215 	stw	r3,136(sp)
    c90c:	003d5306 	br	be5c <__alt_mem_Flash_flash_data+0xf400be5c>
    c910:	da002a15 	stw	r8,168(sp)
    c914:	0001f840 	call	1f84 <strlen>
    c918:	1027883a 	mov	r19,r2
    c91c:	db801d83 	ldbu	r14,118(sp)
    c920:	dd802215 	stw	r22,136(sp)
    c924:	0013883a 	mov	r9,zero
    c928:	da002a17 	ldw	r8,168(sp)
    c92c:	003c7f06 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c930:	d9002017 	ldw	r4,128(sp)
    c934:	d9402117 	ldw	r5,132(sp)
    c938:	d9801a04 	addi	r6,sp,104
    c93c:	da402b15 	stw	r9,172(sp)
    c940:	000b6300 	call	b630 <__sprint_r.part.0>
    c944:	da402b17 	ldw	r9,172(sp)
    c948:	103ea81e 	bne	r2,zero,c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c94c:	d9401b17 	ldw	r5,108(sp)
    c950:	d8801c17 	ldw	r2,112(sp)
    c954:	d811883a 	mov	r8,sp
    c958:	29000044 	addi	r4,r5,1
    c95c:	003cc006 	br	bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    c960:	d9401b17 	ldw	r5,108(sp)
    c964:	010000b4 	movhi	r4,2
    c968:	213b6604 	addi	r4,r4,-4712
    c96c:	d9002415 	stw	r4,144(sp)
    c970:	29400044 	addi	r5,r5,1
    c974:	003c9f06 	br	bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    c978:	00800184 	movi	r2,6
    c97c:	1240012e 	bgeu	r2,r9,c984 <___vfiprintf_internal_r+0x1240>
    c980:	1013883a 	mov	r9,r2
    c984:	4827883a 	mov	r19,r9
    c988:	4823883a 	mov	r17,r9
    c98c:	48001116 	blt	r9,zero,c9d4 <___vfiprintf_internal_r+0x1290>
    c990:	050000b4 	movhi	r20,2
    c994:	dd802215 	stw	r22,136(sp)
    c998:	a53af604 	addi	r20,r20,-5160
    c99c:	003db106 	br	c064 <__alt_mem_Flash_flash_data+0xf400c064>
    c9a0:	d9401b17 	ldw	r5,108(sp)
    c9a4:	010000b4 	movhi	r4,2
    c9a8:	213b6604 	addi	r4,r4,-4712
    c9ac:	d9002415 	stw	r4,144(sp)
    c9b0:	29400044 	addi	r5,r5,1
    c9b4:	003cf906 	br	bd9c <__alt_mem_Flash_flash_data+0xf400bd9c>
    c9b8:	4827883a 	mov	r19,r9
    c9bc:	db801d83 	ldbu	r14,118(sp)
    c9c0:	dd802215 	stw	r22,136(sp)
    c9c4:	0013883a 	mov	r9,zero
    c9c8:	003c5806 	br	bb2c <__alt_mem_Flash_flash_data+0xf400bb2c>
    c9cc:	200d883a 	mov	r6,r4
    c9d0:	003ec706 	br	c4f0 <__alt_mem_Flash_flash_data+0xf400c4f0>
    c9d4:	0023883a 	mov	r17,zero
    c9d8:	003fed06 	br	c990 <__alt_mem_Flash_flash_data+0xf400c990>
    c9dc:	d9002217 	ldw	r4,136(sp)
    c9e0:	22400017 	ldw	r9,0(r4)
    c9e4:	20c00104 	addi	r3,r4,4
    c9e8:	d8c02215 	stw	r3,136(sp)
    c9ec:	483fc20e 	bge	r9,zero,c8f8 <__alt_mem_Flash_flash_data+0xf400c8f8>
    c9f0:	027fffc4 	movi	r9,-1
    c9f4:	80c00047 	ldb	r3,1(r16)
    c9f8:	003bb006 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    c9fc:	8c80010e 	bge	r17,r18,ca04 <___vfiprintf_internal_r+0x12c0>
    ca00:	9023883a 	mov	r17,r18
    ca04:	d8802317 	ldw	r2,140(sp)
    ca08:	1445883a 	add	r2,r2,r17
    ca0c:	d8802315 	stw	r2,140(sp)
    ca10:	003cef06 	br	bdd0 <__alt_mem_Flash_flash_data+0xf400bdd0>

0000ca14 <__vfiprintf_internal>:
    ca14:	2007883a 	mov	r3,r4
    ca18:	010000b4 	movhi	r4,2
    ca1c:	21055404 	addi	r4,r4,5456
    ca20:	21000017 	ldw	r4,0(r4)
    ca24:	2805883a 	mov	r2,r5
    ca28:	300f883a 	mov	r7,r6
    ca2c:	180b883a 	mov	r5,r3
    ca30:	100d883a 	mov	r6,r2
    ca34:	000b7441 	jmpi	b744 <___vfiprintf_internal_r>

0000ca38 <__sbprintf>:
    ca38:	2880030b 	ldhu	r2,12(r5)
    ca3c:	2ac01917 	ldw	r11,100(r5)
    ca40:	2a80038b 	ldhu	r10,14(r5)
    ca44:	2a400717 	ldw	r9,28(r5)
    ca48:	2a000917 	ldw	r8,36(r5)
    ca4c:	defee204 	addi	sp,sp,-1144
    ca50:	00c10004 	movi	r3,1024
    ca54:	dc011a15 	stw	r16,1128(sp)
    ca58:	10bfff4c 	andi	r2,r2,65533
    ca5c:	2821883a 	mov	r16,r5
    ca60:	d8cb883a 	add	r5,sp,r3
    ca64:	dc811c15 	stw	r18,1136(sp)
    ca68:	dc411b15 	stw	r17,1132(sp)
    ca6c:	dfc11d15 	stw	ra,1140(sp)
    ca70:	2025883a 	mov	r18,r4
    ca74:	d881030d 	sth	r2,1036(sp)
    ca78:	dac11915 	stw	r11,1124(sp)
    ca7c:	da81038d 	sth	r10,1038(sp)
    ca80:	da410715 	stw	r9,1052(sp)
    ca84:	da010915 	stw	r8,1060(sp)
    ca88:	dec10015 	stw	sp,1024(sp)
    ca8c:	dec10415 	stw	sp,1040(sp)
    ca90:	d8c10215 	stw	r3,1032(sp)
    ca94:	d8c10515 	stw	r3,1044(sp)
    ca98:	d8010615 	stw	zero,1048(sp)
    ca9c:	000b7440 	call	b744 <___vfiprintf_internal_r>
    caa0:	1023883a 	mov	r17,r2
    caa4:	10000416 	blt	r2,zero,cab8 <__sbprintf+0x80>
    caa8:	9009883a 	mov	r4,r18
    caac:	d9410004 	addi	r5,sp,1024
    cab0:	0007c600 	call	7c60 <_fflush_r>
    cab4:	10000d1e 	bne	r2,zero,caec <__sbprintf+0xb4>
    cab8:	d8c1030b 	ldhu	r3,1036(sp)
    cabc:	18c0100c 	andi	r3,r3,64
    cac0:	18000326 	beq	r3,zero,cad0 <__sbprintf+0x98>
    cac4:	8080030b 	ldhu	r2,12(r16)
    cac8:	10801014 	ori	r2,r2,64
    cacc:	8080030d 	sth	r2,12(r16)
    cad0:	8805883a 	mov	r2,r17
    cad4:	dfc11d17 	ldw	ra,1140(sp)
    cad8:	dc811c17 	ldw	r18,1136(sp)
    cadc:	dc411b17 	ldw	r17,1132(sp)
    cae0:	dc011a17 	ldw	r16,1128(sp)
    cae4:	dec11e04 	addi	sp,sp,1144
    cae8:	f800283a 	ret
    caec:	047fffc4 	movi	r17,-1
    caf0:	003ff106 	br	cab8 <__alt_mem_Flash_flash_data+0xf400cab8>

0000caf4 <_write_r>:
    caf4:	defffd04 	addi	sp,sp,-12
    caf8:	dc000015 	stw	r16,0(sp)
    cafc:	040000b4 	movhi	r16,2
    cb00:	dc400115 	stw	r17,4(sp)
    cb04:	840e2704 	addi	r16,r16,14492
    cb08:	2023883a 	mov	r17,r4
    cb0c:	2809883a 	mov	r4,r5
    cb10:	300b883a 	mov	r5,r6
    cb14:	380d883a 	mov	r6,r7
    cb18:	dfc00215 	stw	ra,8(sp)
    cb1c:	80000015 	stw	zero,0(r16)
    cb20:	0011ab40 	call	11ab4 <write>
    cb24:	00ffffc4 	movi	r3,-1
    cb28:	10c00526 	beq	r2,r3,cb40 <_write_r+0x4c>
    cb2c:	dfc00217 	ldw	ra,8(sp)
    cb30:	dc400117 	ldw	r17,4(sp)
    cb34:	dc000017 	ldw	r16,0(sp)
    cb38:	dec00304 	addi	sp,sp,12
    cb3c:	f800283a 	ret
    cb40:	80c00017 	ldw	r3,0(r16)
    cb44:	183ff926 	beq	r3,zero,cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>
    cb48:	88c00015 	stw	r3,0(r17)
    cb4c:	003ff706 	br	cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>

0000cb50 <_close_r>:
    cb50:	defffd04 	addi	sp,sp,-12
    cb54:	dc000015 	stw	r16,0(sp)
    cb58:	040000b4 	movhi	r16,2
    cb5c:	dc400115 	stw	r17,4(sp)
    cb60:	840e2704 	addi	r16,r16,14492
    cb64:	2023883a 	mov	r17,r4
    cb68:	2809883a 	mov	r4,r5
    cb6c:	dfc00215 	stw	ra,8(sp)
    cb70:	80000015 	stw	zero,0(r16)
    cb74:	001123c0 	call	1123c <close>
    cb78:	00ffffc4 	movi	r3,-1
    cb7c:	10c00526 	beq	r2,r3,cb94 <_close_r+0x44>
    cb80:	dfc00217 	ldw	ra,8(sp)
    cb84:	dc400117 	ldw	r17,4(sp)
    cb88:	dc000017 	ldw	r16,0(sp)
    cb8c:	dec00304 	addi	sp,sp,12
    cb90:	f800283a 	ret
    cb94:	80c00017 	ldw	r3,0(r16)
    cb98:	183ff926 	beq	r3,zero,cb80 <__alt_mem_Flash_flash_data+0xf400cb80>
    cb9c:	88c00015 	stw	r3,0(r17)
    cba0:	003ff706 	br	cb80 <__alt_mem_Flash_flash_data+0xf400cb80>

0000cba4 <_calloc_r>:
    cba4:	298b383a 	mul	r5,r5,r6
    cba8:	defffe04 	addi	sp,sp,-8
    cbac:	dc000015 	stw	r16,0(sp)
    cbb0:	dfc00115 	stw	ra,4(sp)
    cbb4:	00088c00 	call	88c0 <_malloc_r>
    cbb8:	1021883a 	mov	r16,r2
    cbbc:	10002826 	beq	r2,zero,cc60 <_calloc_r+0xbc>
    cbc0:	11bfff17 	ldw	r6,-4(r2)
    cbc4:	00bfff04 	movi	r2,-4
    cbc8:	00c00904 	movi	r3,36
    cbcc:	308c703a 	and	r6,r6,r2
    cbd0:	308d883a 	add	r6,r6,r2
    cbd4:	19801436 	bltu	r3,r6,cc28 <_calloc_r+0x84>
    cbd8:	008004c4 	movi	r2,19
    cbdc:	11800936 	bltu	r2,r6,cc04 <_calloc_r+0x60>
    cbe0:	8005883a 	mov	r2,r16
    cbe4:	10000015 	stw	zero,0(r2)
    cbe8:	10000115 	stw	zero,4(r2)
    cbec:	10000215 	stw	zero,8(r2)
    cbf0:	8005883a 	mov	r2,r16
    cbf4:	dfc00117 	ldw	ra,4(sp)
    cbf8:	dc000017 	ldw	r16,0(sp)
    cbfc:	dec00204 	addi	sp,sp,8
    cc00:	f800283a 	ret
    cc04:	80000015 	stw	zero,0(r16)
    cc08:	80000115 	stw	zero,4(r16)
    cc0c:	008006c4 	movi	r2,27
    cc10:	11800d2e 	bgeu	r2,r6,cc48 <_calloc_r+0xa4>
    cc14:	80000215 	stw	zero,8(r16)
    cc18:	80000315 	stw	zero,12(r16)
    cc1c:	30c00c26 	beq	r6,r3,cc50 <_calloc_r+0xac>
    cc20:	80800404 	addi	r2,r16,16
    cc24:	003fef06 	br	cbe4 <__alt_mem_Flash_flash_data+0xf400cbe4>
    cc28:	8009883a 	mov	r4,r16
    cc2c:	000b883a 	mov	r5,zero
    cc30:	0001c000 	call	1c00 <memset>
    cc34:	8005883a 	mov	r2,r16
    cc38:	dfc00117 	ldw	ra,4(sp)
    cc3c:	dc000017 	ldw	r16,0(sp)
    cc40:	dec00204 	addi	sp,sp,8
    cc44:	f800283a 	ret
    cc48:	80800204 	addi	r2,r16,8
    cc4c:	003fe506 	br	cbe4 <__alt_mem_Flash_flash_data+0xf400cbe4>
    cc50:	80000415 	stw	zero,16(r16)
    cc54:	80800604 	addi	r2,r16,24
    cc58:	80000515 	stw	zero,20(r16)
    cc5c:	003fe106 	br	cbe4 <__alt_mem_Flash_flash_data+0xf400cbe4>
    cc60:	0005883a 	mov	r2,zero
    cc64:	003fe306 	br	cbf4 <__alt_mem_Flash_flash_data+0xf400cbf4>

0000cc68 <_fclose_r>:
    cc68:	28003926 	beq	r5,zero,cd50 <_fclose_r+0xe8>
    cc6c:	defffc04 	addi	sp,sp,-16
    cc70:	dc400115 	stw	r17,4(sp)
    cc74:	dc000015 	stw	r16,0(sp)
    cc78:	dfc00315 	stw	ra,12(sp)
    cc7c:	dc800215 	stw	r18,8(sp)
    cc80:	2023883a 	mov	r17,r4
    cc84:	2821883a 	mov	r16,r5
    cc88:	20000226 	beq	r4,zero,cc94 <_fclose_r+0x2c>
    cc8c:	20800e17 	ldw	r2,56(r4)
    cc90:	10002726 	beq	r2,zero,cd30 <_fclose_r+0xc8>
    cc94:	8080030f 	ldh	r2,12(r16)
    cc98:	1000071e 	bne	r2,zero,ccb8 <_fclose_r+0x50>
    cc9c:	0005883a 	mov	r2,zero
    cca0:	dfc00317 	ldw	ra,12(sp)
    cca4:	dc800217 	ldw	r18,8(sp)
    cca8:	dc400117 	ldw	r17,4(sp)
    ccac:	dc000017 	ldw	r16,0(sp)
    ccb0:	dec00404 	addi	sp,sp,16
    ccb4:	f800283a 	ret
    ccb8:	8809883a 	mov	r4,r17
    ccbc:	800b883a 	mov	r5,r16
    ccc0:	0007a580 	call	7a58 <__sflush_r>
    ccc4:	1025883a 	mov	r18,r2
    ccc8:	80800b17 	ldw	r2,44(r16)
    cccc:	10000426 	beq	r2,zero,cce0 <_fclose_r+0x78>
    ccd0:	81400717 	ldw	r5,28(r16)
    ccd4:	8809883a 	mov	r4,r17
    ccd8:	103ee83a 	callr	r2
    ccdc:	10001616 	blt	r2,zero,cd38 <_fclose_r+0xd0>
    cce0:	8080030b 	ldhu	r2,12(r16)
    cce4:	1080200c 	andi	r2,r2,128
    cce8:	1000151e 	bne	r2,zero,cd40 <_fclose_r+0xd8>
    ccec:	81400c17 	ldw	r5,48(r16)
    ccf0:	28000526 	beq	r5,zero,cd08 <_fclose_r+0xa0>
    ccf4:	80801004 	addi	r2,r16,64
    ccf8:	28800226 	beq	r5,r2,cd04 <_fclose_r+0x9c>
    ccfc:	8809883a 	mov	r4,r17
    cd00:	00081b00 	call	81b0 <_free_r>
    cd04:	80000c15 	stw	zero,48(r16)
    cd08:	81401117 	ldw	r5,68(r16)
    cd0c:	28000326 	beq	r5,zero,cd1c <_fclose_r+0xb4>
    cd10:	8809883a 	mov	r4,r17
    cd14:	00081b00 	call	81b0 <_free_r>
    cd18:	80001115 	stw	zero,68(r16)
    cd1c:	000804c0 	call	804c <__sfp_lock_acquire>
    cd20:	8000030d 	sth	zero,12(r16)
    cd24:	00080500 	call	8050 <__sfp_lock_release>
    cd28:	9005883a 	mov	r2,r18
    cd2c:	003fdc06 	br	cca0 <__alt_mem_Flash_flash_data+0xf400cca0>
    cd30:	000803c0 	call	803c <__sinit>
    cd34:	003fd706 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    cd38:	04bfffc4 	movi	r18,-1
    cd3c:	003fe806 	br	cce0 <__alt_mem_Flash_flash_data+0xf400cce0>
    cd40:	81400417 	ldw	r5,16(r16)
    cd44:	8809883a 	mov	r4,r17
    cd48:	00081b00 	call	81b0 <_free_r>
    cd4c:	003fe706 	br	ccec <__alt_mem_Flash_flash_data+0xf400ccec>
    cd50:	0005883a 	mov	r2,zero
    cd54:	f800283a 	ret

0000cd58 <fclose>:
    cd58:	008000b4 	movhi	r2,2
    cd5c:	10855404 	addi	r2,r2,5456
    cd60:	200b883a 	mov	r5,r4
    cd64:	11000017 	ldw	r4,0(r2)
    cd68:	000cc681 	jmpi	cc68 <_fclose_r>

0000cd6c <_fputwc_r>:
    cd6c:	3080030b 	ldhu	r2,12(r6)
    cd70:	defff804 	addi	sp,sp,-32
    cd74:	dcc00415 	stw	r19,16(sp)
    cd78:	dc800315 	stw	r18,12(sp)
    cd7c:	dc000115 	stw	r16,4(sp)
    cd80:	dfc00715 	stw	ra,28(sp)
    cd84:	dd400615 	stw	r21,24(sp)
    cd88:	dd000515 	stw	r20,20(sp)
    cd8c:	dc400215 	stw	r17,8(sp)
    cd90:	10c8000c 	andi	r3,r2,8192
    cd94:	3021883a 	mov	r16,r6
    cd98:	2027883a 	mov	r19,r4
    cd9c:	2825883a 	mov	r18,r5
    cda0:	1800051e 	bne	r3,zero,cdb8 <_fputwc_r+0x4c>
    cda4:	30c01917 	ldw	r3,100(r6)
    cda8:	10880014 	ori	r2,r2,8192
    cdac:	3080030d 	sth	r2,12(r6)
    cdb0:	18880014 	ori	r2,r3,8192
    cdb4:	30801915 	stw	r2,100(r6)
    cdb8:	00086b00 	call	86b0 <__locale_mb_cur_max>
    cdbc:	00c00044 	movi	r3,1
    cdc0:	10c03e26 	beq	r2,r3,cebc <_fputwc_r+0x150>
    cdc4:	9809883a 	mov	r4,r19
    cdc8:	d80b883a 	mov	r5,sp
    cdcc:	900d883a 	mov	r6,r18
    cdd0:	81c01704 	addi	r7,r16,92
    cdd4:	000dd880 	call	dd88 <_wcrtomb_r>
    cdd8:	1029883a 	mov	r20,r2
    cddc:	00bfffc4 	movi	r2,-1
    cde0:	a0802026 	beq	r20,r2,ce64 <_fputwc_r+0xf8>
    cde4:	d9400003 	ldbu	r5,0(sp)
    cde8:	a0001c26 	beq	r20,zero,ce5c <_fputwc_r+0xf0>
    cdec:	0023883a 	mov	r17,zero
    cdf0:	05400284 	movi	r21,10
    cdf4:	00000906 	br	ce1c <_fputwc_r+0xb0>
    cdf8:	80800017 	ldw	r2,0(r16)
    cdfc:	11400005 	stb	r5,0(r2)
    ce00:	80c00017 	ldw	r3,0(r16)
    ce04:	18c00044 	addi	r3,r3,1
    ce08:	80c00015 	stw	r3,0(r16)
    ce0c:	8c400044 	addi	r17,r17,1
    ce10:	dc45883a 	add	r2,sp,r17
    ce14:	8d00112e 	bgeu	r17,r20,ce5c <_fputwc_r+0xf0>
    ce18:	11400003 	ldbu	r5,0(r2)
    ce1c:	80c00217 	ldw	r3,8(r16)
    ce20:	18ffffc4 	addi	r3,r3,-1
    ce24:	80c00215 	stw	r3,8(r16)
    ce28:	183ff30e 	bge	r3,zero,cdf8 <__alt_mem_Flash_flash_data+0xf400cdf8>
    ce2c:	80800617 	ldw	r2,24(r16)
    ce30:	18801916 	blt	r3,r2,ce98 <_fputwc_r+0x12c>
    ce34:	80800017 	ldw	r2,0(r16)
    ce38:	11400005 	stb	r5,0(r2)
    ce3c:	80800017 	ldw	r2,0(r16)
    ce40:	10c00003 	ldbu	r3,0(r2)
    ce44:	10800044 	addi	r2,r2,1
    ce48:	1d402326 	beq	r3,r21,ced8 <_fputwc_r+0x16c>
    ce4c:	80800015 	stw	r2,0(r16)
    ce50:	8c400044 	addi	r17,r17,1
    ce54:	dc45883a 	add	r2,sp,r17
    ce58:	8d3fef36 	bltu	r17,r20,ce18 <__alt_mem_Flash_flash_data+0xf400ce18>
    ce5c:	9005883a 	mov	r2,r18
    ce60:	00000406 	br	ce74 <_fputwc_r+0x108>
    ce64:	80c0030b 	ldhu	r3,12(r16)
    ce68:	a005883a 	mov	r2,r20
    ce6c:	18c01014 	ori	r3,r3,64
    ce70:	80c0030d 	sth	r3,12(r16)
    ce74:	dfc00717 	ldw	ra,28(sp)
    ce78:	dd400617 	ldw	r21,24(sp)
    ce7c:	dd000517 	ldw	r20,20(sp)
    ce80:	dcc00417 	ldw	r19,16(sp)
    ce84:	dc800317 	ldw	r18,12(sp)
    ce88:	dc400217 	ldw	r17,8(sp)
    ce8c:	dc000117 	ldw	r16,4(sp)
    ce90:	dec00804 	addi	sp,sp,32
    ce94:	f800283a 	ret
    ce98:	9809883a 	mov	r4,r19
    ce9c:	29403fcc 	andi	r5,r5,255
    cea0:	800d883a 	mov	r6,r16
    cea4:	000dc340 	call	dc34 <__swbuf_r>
    cea8:	10bfffe0 	cmpeqi	r2,r2,-1
    ceac:	10803fcc 	andi	r2,r2,255
    ceb0:	103fd626 	beq	r2,zero,ce0c <__alt_mem_Flash_flash_data+0xf400ce0c>
    ceb4:	00bfffc4 	movi	r2,-1
    ceb8:	003fee06 	br	ce74 <__alt_mem_Flash_flash_data+0xf400ce74>
    cebc:	90ffffc4 	addi	r3,r18,-1
    cec0:	01003f84 	movi	r4,254
    cec4:	20ffbf36 	bltu	r4,r3,cdc4 <__alt_mem_Flash_flash_data+0xf400cdc4>
    cec8:	900b883a 	mov	r5,r18
    cecc:	dc800005 	stb	r18,0(sp)
    ced0:	1029883a 	mov	r20,r2
    ced4:	003fc506 	br	cdec <__alt_mem_Flash_flash_data+0xf400cdec>
    ced8:	9809883a 	mov	r4,r19
    cedc:	a80b883a 	mov	r5,r21
    cee0:	800d883a 	mov	r6,r16
    cee4:	000dc340 	call	dc34 <__swbuf_r>
    cee8:	10bfffe0 	cmpeqi	r2,r2,-1
    ceec:	003fef06 	br	ceac <__alt_mem_Flash_flash_data+0xf400ceac>

0000cef0 <fputwc>:
    cef0:	008000b4 	movhi	r2,2
    cef4:	defffc04 	addi	sp,sp,-16
    cef8:	10855404 	addi	r2,r2,5456
    cefc:	dc000115 	stw	r16,4(sp)
    cf00:	14000017 	ldw	r16,0(r2)
    cf04:	dc400215 	stw	r17,8(sp)
    cf08:	dfc00315 	stw	ra,12(sp)
    cf0c:	2023883a 	mov	r17,r4
    cf10:	280d883a 	mov	r6,r5
    cf14:	80000626 	beq	r16,zero,cf30 <fputwc+0x40>
    cf18:	80800e17 	ldw	r2,56(r16)
    cf1c:	1000041e 	bne	r2,zero,cf30 <fputwc+0x40>
    cf20:	8009883a 	mov	r4,r16
    cf24:	d9400015 	stw	r5,0(sp)
    cf28:	000803c0 	call	803c <__sinit>
    cf2c:	d9800017 	ldw	r6,0(sp)
    cf30:	8009883a 	mov	r4,r16
    cf34:	880b883a 	mov	r5,r17
    cf38:	dfc00317 	ldw	ra,12(sp)
    cf3c:	dc400217 	ldw	r17,8(sp)
    cf40:	dc000117 	ldw	r16,4(sp)
    cf44:	dec00404 	addi	sp,sp,16
    cf48:	000cd6c1 	jmpi	cd6c <_fputwc_r>

0000cf4c <_fstat_r>:
    cf4c:	defffd04 	addi	sp,sp,-12
    cf50:	dc000015 	stw	r16,0(sp)
    cf54:	040000b4 	movhi	r16,2
    cf58:	dc400115 	stw	r17,4(sp)
    cf5c:	840e2704 	addi	r16,r16,14492
    cf60:	2023883a 	mov	r17,r4
    cf64:	2809883a 	mov	r4,r5
    cf68:	300b883a 	mov	r5,r6
    cf6c:	dfc00215 	stw	ra,8(sp)
    cf70:	80000015 	stw	zero,0(r16)
    cf74:	00113880 	call	11388 <fstat>
    cf78:	00ffffc4 	movi	r3,-1
    cf7c:	10c00526 	beq	r2,r3,cf94 <_fstat_r+0x48>
    cf80:	dfc00217 	ldw	ra,8(sp)
    cf84:	dc400117 	ldw	r17,4(sp)
    cf88:	dc000017 	ldw	r16,0(sp)
    cf8c:	dec00304 	addi	sp,sp,12
    cf90:	f800283a 	ret
    cf94:	80c00017 	ldw	r3,0(r16)
    cf98:	183ff926 	beq	r3,zero,cf80 <__alt_mem_Flash_flash_data+0xf400cf80>
    cf9c:	88c00015 	stw	r3,0(r17)
    cfa0:	003ff706 	br	cf80 <__alt_mem_Flash_flash_data+0xf400cf80>

0000cfa4 <__sfvwrite_r>:
    cfa4:	30800217 	ldw	r2,8(r6)
    cfa8:	10006726 	beq	r2,zero,d148 <__sfvwrite_r+0x1a4>
    cfac:	defff404 	addi	sp,sp,-48
    cfb0:	dd000615 	stw	r20,24(sp)
    cfb4:	2029883a 	mov	r20,r4
    cfb8:	2900030b 	ldhu	r4,12(r5)
    cfbc:	ddc00915 	stw	r23,36(sp)
    cfc0:	dc000215 	stw	r16,8(sp)
    cfc4:	dfc00b15 	stw	ra,44(sp)
    cfc8:	df000a15 	stw	fp,40(sp)
    cfcc:	dd800815 	stw	r22,32(sp)
    cfd0:	dd400715 	stw	r21,28(sp)
    cfd4:	dcc00515 	stw	r19,20(sp)
    cfd8:	dc800415 	stw	r18,16(sp)
    cfdc:	dc400315 	stw	r17,12(sp)
    cfe0:	2080020c 	andi	r2,r4,8
    cfe4:	2821883a 	mov	r16,r5
    cfe8:	302f883a 	mov	r23,r6
    cfec:	10002726 	beq	r2,zero,d08c <__sfvwrite_r+0xe8>
    cff0:	28800417 	ldw	r2,16(r5)
    cff4:	10002526 	beq	r2,zero,d08c <__sfvwrite_r+0xe8>
    cff8:	2080008c 	andi	r2,r4,2
    cffc:	bc400017 	ldw	r17,0(r23)
    d000:	10002a26 	beq	r2,zero,d0ac <__sfvwrite_r+0x108>
    d004:	05600034 	movhi	r21,32768
    d008:	0027883a 	mov	r19,zero
    d00c:	0025883a 	mov	r18,zero
    d010:	ad7f0004 	addi	r21,r21,-1024
    d014:	980d883a 	mov	r6,r19
    d018:	a009883a 	mov	r4,r20
    d01c:	90004626 	beq	r18,zero,d138 <__sfvwrite_r+0x194>
    d020:	900f883a 	mov	r7,r18
    d024:	81400717 	ldw	r5,28(r16)
    d028:	ac80022e 	bgeu	r21,r18,d034 <__sfvwrite_r+0x90>
    d02c:	01e00034 	movhi	r7,32768
    d030:	39ff0004 	addi	r7,r7,-1024
    d034:	80800917 	ldw	r2,36(r16)
    d038:	103ee83a 	callr	r2
    d03c:	0080520e 	bge	zero,r2,d188 <__sfvwrite_r+0x1e4>
    d040:	b8c00217 	ldw	r3,8(r23)
    d044:	98a7883a 	add	r19,r19,r2
    d048:	90a5c83a 	sub	r18,r18,r2
    d04c:	1885c83a 	sub	r2,r3,r2
    d050:	b8800215 	stw	r2,8(r23)
    d054:	103fef1e 	bne	r2,zero,d014 <__alt_mem_Flash_flash_data+0xf400d014>
    d058:	0005883a 	mov	r2,zero
    d05c:	dfc00b17 	ldw	ra,44(sp)
    d060:	df000a17 	ldw	fp,40(sp)
    d064:	ddc00917 	ldw	r23,36(sp)
    d068:	dd800817 	ldw	r22,32(sp)
    d06c:	dd400717 	ldw	r21,28(sp)
    d070:	dd000617 	ldw	r20,24(sp)
    d074:	dcc00517 	ldw	r19,20(sp)
    d078:	dc800417 	ldw	r18,16(sp)
    d07c:	dc400317 	ldw	r17,12(sp)
    d080:	dc000217 	ldw	r16,8(sp)
    d084:	dec00c04 	addi	sp,sp,48
    d088:	f800283a 	ret
    d08c:	a009883a 	mov	r4,r20
    d090:	800b883a 	mov	r5,r16
    d094:	0005fdc0 	call	5fdc <__swsetup_r>
    d098:	1000ec1e 	bne	r2,zero,d44c <__sfvwrite_r+0x4a8>
    d09c:	8100030b 	ldhu	r4,12(r16)
    d0a0:	bc400017 	ldw	r17,0(r23)
    d0a4:	2080008c 	andi	r2,r4,2
    d0a8:	103fd61e 	bne	r2,zero,d004 <__alt_mem_Flash_flash_data+0xf400d004>
    d0ac:	2080004c 	andi	r2,r4,1
    d0b0:	10003a1e 	bne	r2,zero,d19c <__sfvwrite_r+0x1f8>
    d0b4:	0039883a 	mov	fp,zero
    d0b8:	0025883a 	mov	r18,zero
    d0bc:	90001a26 	beq	r18,zero,d128 <__sfvwrite_r+0x184>
    d0c0:	2080800c 	andi	r2,r4,512
    d0c4:	85800217 	ldw	r22,8(r16)
    d0c8:	10007626 	beq	r2,zero,d2a4 <__sfvwrite_r+0x300>
    d0cc:	b027883a 	mov	r19,r22
    d0d0:	95809436 	bltu	r18,r22,d324 <__sfvwrite_r+0x380>
    d0d4:	2081200c 	andi	r2,r4,1152
    d0d8:	10009f1e 	bne	r2,zero,d358 <__sfvwrite_r+0x3b4>
    d0dc:	81000017 	ldw	r4,0(r16)
    d0e0:	e00b883a 	mov	r5,fp
    d0e4:	980d883a 	mov	r6,r19
    d0e8:	000d5140 	call	d514 <memmove>
    d0ec:	81000217 	ldw	r4,8(r16)
    d0f0:	81400017 	ldw	r5,0(r16)
    d0f4:	9005883a 	mov	r2,r18
    d0f8:	2587c83a 	sub	r3,r4,r22
    d0fc:	2ce7883a 	add	r19,r5,r19
    d100:	80c00215 	stw	r3,8(r16)
    d104:	84c00015 	stw	r19,0(r16)
    d108:	b8c00217 	ldw	r3,8(r23)
    d10c:	e0b9883a 	add	fp,fp,r2
    d110:	90a5c83a 	sub	r18,r18,r2
    d114:	1885c83a 	sub	r2,r3,r2
    d118:	b8800215 	stw	r2,8(r23)
    d11c:	103fce26 	beq	r2,zero,d058 <__alt_mem_Flash_flash_data+0xf400d058>
    d120:	8100030b 	ldhu	r4,12(r16)
    d124:	903fe61e 	bne	r18,zero,d0c0 <__alt_mem_Flash_flash_data+0xf400d0c0>
    d128:	8f000017 	ldw	fp,0(r17)
    d12c:	8c800117 	ldw	r18,4(r17)
    d130:	8c400204 	addi	r17,r17,8
    d134:	003fe106 	br	d0bc <__alt_mem_Flash_flash_data+0xf400d0bc>
    d138:	8cc00017 	ldw	r19,0(r17)
    d13c:	8c800117 	ldw	r18,4(r17)
    d140:	8c400204 	addi	r17,r17,8
    d144:	003fb306 	br	d014 <__alt_mem_Flash_flash_data+0xf400d014>
    d148:	0005883a 	mov	r2,zero
    d14c:	f800283a 	ret
    d150:	00a00034 	movhi	r2,32768
    d154:	10bfffc4 	addi	r2,r2,-1
    d158:	9009883a 	mov	r4,r18
    d15c:	1480012e 	bgeu	r2,r18,d164 <__sfvwrite_r+0x1c0>
    d160:	1009883a 	mov	r4,r2
    d164:	980b883a 	mov	r5,r19
    d168:	000eb2c0 	call	eb2c <__divsi3>
    d16c:	81400717 	ldw	r5,28(r16)
    d170:	80c00917 	ldw	r3,36(r16)
    d174:	988f383a 	mul	r7,r19,r2
    d178:	a009883a 	mov	r4,r20
    d17c:	e00d883a 	mov	r6,fp
    d180:	183ee83a 	callr	r3
    d184:	00bfe016 	blt	zero,r2,d108 <__alt_mem_Flash_flash_data+0xf400d108>
    d188:	8080030b 	ldhu	r2,12(r16)
    d18c:	10801014 	ori	r2,r2,64
    d190:	8080030d 	sth	r2,12(r16)
    d194:	00bfffc4 	movi	r2,-1
    d198:	003fb006 	br	d05c <__alt_mem_Flash_flash_data+0xf400d05c>
    d19c:	0027883a 	mov	r19,zero
    d1a0:	0011883a 	mov	r8,zero
    d1a4:	0039883a 	mov	fp,zero
    d1a8:	0025883a 	mov	r18,zero
    d1ac:	90001f26 	beq	r18,zero,d22c <__sfvwrite_r+0x288>
    d1b0:	40006026 	beq	r8,zero,d334 <__sfvwrite_r+0x390>
    d1b4:	982b883a 	mov	r21,r19
    d1b8:	94c0012e 	bgeu	r18,r19,d1c0 <__sfvwrite_r+0x21c>
    d1bc:	902b883a 	mov	r21,r18
    d1c0:	81000017 	ldw	r4,0(r16)
    d1c4:	80800417 	ldw	r2,16(r16)
    d1c8:	a82d883a 	mov	r22,r21
    d1cc:	81800217 	ldw	r6,8(r16)
    d1d0:	81c00517 	ldw	r7,20(r16)
    d1d4:	1100022e 	bgeu	r2,r4,d1e0 <__sfvwrite_r+0x23c>
    d1d8:	31c7883a 	add	r3,r6,r7
    d1dc:	1d401816 	blt	r3,r21,d240 <__sfvwrite_r+0x29c>
    d1e0:	a9c04416 	blt	r21,r7,d2f4 <__sfvwrite_r+0x350>
    d1e4:	80800917 	ldw	r2,36(r16)
    d1e8:	81400717 	ldw	r5,28(r16)
    d1ec:	a009883a 	mov	r4,r20
    d1f0:	da000115 	stw	r8,4(sp)
    d1f4:	e00d883a 	mov	r6,fp
    d1f8:	103ee83a 	callr	r2
    d1fc:	102d883a 	mov	r22,r2
    d200:	da000117 	ldw	r8,4(sp)
    d204:	00bfe00e 	bge	zero,r2,d188 <__alt_mem_Flash_flash_data+0xf400d188>
    d208:	9da7c83a 	sub	r19,r19,r22
    d20c:	98001f26 	beq	r19,zero,d28c <__sfvwrite_r+0x2e8>
    d210:	b8800217 	ldw	r2,8(r23)
    d214:	e5b9883a 	add	fp,fp,r22
    d218:	95a5c83a 	sub	r18,r18,r22
    d21c:	15adc83a 	sub	r22,r2,r22
    d220:	bd800215 	stw	r22,8(r23)
    d224:	b03f8c26 	beq	r22,zero,d058 <__alt_mem_Flash_flash_data+0xf400d058>
    d228:	903fe11e 	bne	r18,zero,d1b0 <__alt_mem_Flash_flash_data+0xf400d1b0>
    d22c:	8f000017 	ldw	fp,0(r17)
    d230:	8c800117 	ldw	r18,4(r17)
    d234:	0011883a 	mov	r8,zero
    d238:	8c400204 	addi	r17,r17,8
    d23c:	003fdb06 	br	d1ac <__alt_mem_Flash_flash_data+0xf400d1ac>
    d240:	180d883a 	mov	r6,r3
    d244:	e00b883a 	mov	r5,fp
    d248:	da000115 	stw	r8,4(sp)
    d24c:	d8c00015 	stw	r3,0(sp)
    d250:	000d5140 	call	d514 <memmove>
    d254:	d8c00017 	ldw	r3,0(sp)
    d258:	80800017 	ldw	r2,0(r16)
    d25c:	a009883a 	mov	r4,r20
    d260:	800b883a 	mov	r5,r16
    d264:	10c5883a 	add	r2,r2,r3
    d268:	80800015 	stw	r2,0(r16)
    d26c:	d8c00015 	stw	r3,0(sp)
    d270:	0007c600 	call	7c60 <_fflush_r>
    d274:	d8c00017 	ldw	r3,0(sp)
    d278:	da000117 	ldw	r8,4(sp)
    d27c:	103fc21e 	bne	r2,zero,d188 <__alt_mem_Flash_flash_data+0xf400d188>
    d280:	182d883a 	mov	r22,r3
    d284:	9da7c83a 	sub	r19,r19,r22
    d288:	983fe11e 	bne	r19,zero,d210 <__alt_mem_Flash_flash_data+0xf400d210>
    d28c:	a009883a 	mov	r4,r20
    d290:	800b883a 	mov	r5,r16
    d294:	0007c600 	call	7c60 <_fflush_r>
    d298:	103fbb1e 	bne	r2,zero,d188 <__alt_mem_Flash_flash_data+0xf400d188>
    d29c:	0011883a 	mov	r8,zero
    d2a0:	003fdb06 	br	d210 <__alt_mem_Flash_flash_data+0xf400d210>
    d2a4:	81000017 	ldw	r4,0(r16)
    d2a8:	80800417 	ldw	r2,16(r16)
    d2ac:	11000236 	bltu	r2,r4,d2b8 <__sfvwrite_r+0x314>
    d2b0:	84c00517 	ldw	r19,20(r16)
    d2b4:	94ffa62e 	bgeu	r18,r19,d150 <__alt_mem_Flash_flash_data+0xf400d150>
    d2b8:	9027883a 	mov	r19,r18
    d2bc:	b480012e 	bgeu	r22,r18,d2c4 <__sfvwrite_r+0x320>
    d2c0:	b027883a 	mov	r19,r22
    d2c4:	e00b883a 	mov	r5,fp
    d2c8:	980d883a 	mov	r6,r19
    d2cc:	000d5140 	call	d514 <memmove>
    d2d0:	80800217 	ldw	r2,8(r16)
    d2d4:	80c00017 	ldw	r3,0(r16)
    d2d8:	14c5c83a 	sub	r2,r2,r19
    d2dc:	1cc7883a 	add	r3,r3,r19
    d2e0:	80800215 	stw	r2,8(r16)
    d2e4:	80c00015 	stw	r3,0(r16)
    d2e8:	10004326 	beq	r2,zero,d3f8 <__sfvwrite_r+0x454>
    d2ec:	9805883a 	mov	r2,r19
    d2f0:	003f8506 	br	d108 <__alt_mem_Flash_flash_data+0xf400d108>
    d2f4:	a80d883a 	mov	r6,r21
    d2f8:	e00b883a 	mov	r5,fp
    d2fc:	da000115 	stw	r8,4(sp)
    d300:	000d5140 	call	d514 <memmove>
    d304:	80800217 	ldw	r2,8(r16)
    d308:	80c00017 	ldw	r3,0(r16)
    d30c:	da000117 	ldw	r8,4(sp)
    d310:	1545c83a 	sub	r2,r2,r21
    d314:	1d6b883a 	add	r21,r3,r21
    d318:	80800215 	stw	r2,8(r16)
    d31c:	85400015 	stw	r21,0(r16)
    d320:	003fb906 	br	d208 <__alt_mem_Flash_flash_data+0xf400d208>
    d324:	81000017 	ldw	r4,0(r16)
    d328:	902d883a 	mov	r22,r18
    d32c:	9027883a 	mov	r19,r18
    d330:	003f6b06 	br	d0e0 <__alt_mem_Flash_flash_data+0xf400d0e0>
    d334:	e009883a 	mov	r4,fp
    d338:	01400284 	movi	r5,10
    d33c:	900d883a 	mov	r6,r18
    d340:	00090680 	call	9068 <memchr>
    d344:	10003e26 	beq	r2,zero,d440 <__sfvwrite_r+0x49c>
    d348:	10800044 	addi	r2,r2,1
    d34c:	1727c83a 	sub	r19,r2,fp
    d350:	02000044 	movi	r8,1
    d354:	003f9706 	br	d1b4 <__alt_mem_Flash_flash_data+0xf400d1b4>
    d358:	80800517 	ldw	r2,20(r16)
    d35c:	81400417 	ldw	r5,16(r16)
    d360:	80c00017 	ldw	r3,0(r16)
    d364:	10a7883a 	add	r19,r2,r2
    d368:	9885883a 	add	r2,r19,r2
    d36c:	1026d7fa 	srli	r19,r2,31
    d370:	196bc83a 	sub	r21,r3,r5
    d374:	a9800044 	addi	r6,r21,1
    d378:	9885883a 	add	r2,r19,r2
    d37c:	1027d07a 	srai	r19,r2,1
    d380:	3485883a 	add	r2,r6,r18
    d384:	980d883a 	mov	r6,r19
    d388:	9880022e 	bgeu	r19,r2,d394 <__sfvwrite_r+0x3f0>
    d38c:	1027883a 	mov	r19,r2
    d390:	100d883a 	mov	r6,r2
    d394:	2101000c 	andi	r4,r4,1024
    d398:	20001c26 	beq	r4,zero,d40c <__sfvwrite_r+0x468>
    d39c:	a009883a 	mov	r4,r20
    d3a0:	300b883a 	mov	r5,r6
    d3a4:	00088c00 	call	88c0 <_malloc_r>
    d3a8:	102d883a 	mov	r22,r2
    d3ac:	10002926 	beq	r2,zero,d454 <__sfvwrite_r+0x4b0>
    d3b0:	81400417 	ldw	r5,16(r16)
    d3b4:	1009883a 	mov	r4,r2
    d3b8:	a80d883a 	mov	r6,r21
    d3bc:	00091500 	call	9150 <memcpy>
    d3c0:	8080030b 	ldhu	r2,12(r16)
    d3c4:	00fedfc4 	movi	r3,-1153
    d3c8:	10c4703a 	and	r2,r2,r3
    d3cc:	10802014 	ori	r2,r2,128
    d3d0:	8080030d 	sth	r2,12(r16)
    d3d4:	b549883a 	add	r4,r22,r21
    d3d8:	9d4bc83a 	sub	r5,r19,r21
    d3dc:	85800415 	stw	r22,16(r16)
    d3e0:	84c00515 	stw	r19,20(r16)
    d3e4:	81000015 	stw	r4,0(r16)
    d3e8:	902d883a 	mov	r22,r18
    d3ec:	81400215 	stw	r5,8(r16)
    d3f0:	9027883a 	mov	r19,r18
    d3f4:	003f3a06 	br	d0e0 <__alt_mem_Flash_flash_data+0xf400d0e0>
    d3f8:	a009883a 	mov	r4,r20
    d3fc:	800b883a 	mov	r5,r16
    d400:	0007c600 	call	7c60 <_fflush_r>
    d404:	103fb926 	beq	r2,zero,d2ec <__alt_mem_Flash_flash_data+0xf400d2ec>
    d408:	003f5f06 	br	d188 <__alt_mem_Flash_flash_data+0xf400d188>
    d40c:	a009883a 	mov	r4,r20
    d410:	000d6cc0 	call	d6cc <_realloc_r>
    d414:	102d883a 	mov	r22,r2
    d418:	103fee1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d41c:	81400417 	ldw	r5,16(r16)
    d420:	a009883a 	mov	r4,r20
    d424:	00081b00 	call	81b0 <_free_r>
    d428:	8080030b 	ldhu	r2,12(r16)
    d42c:	00ffdfc4 	movi	r3,-129
    d430:	1884703a 	and	r2,r3,r2
    d434:	00c00304 	movi	r3,12
    d438:	a0c00015 	stw	r3,0(r20)
    d43c:	003f5306 	br	d18c <__alt_mem_Flash_flash_data+0xf400d18c>
    d440:	94c00044 	addi	r19,r18,1
    d444:	02000044 	movi	r8,1
    d448:	003f5a06 	br	d1b4 <__alt_mem_Flash_flash_data+0xf400d1b4>
    d44c:	00bfffc4 	movi	r2,-1
    d450:	003f0206 	br	d05c <__alt_mem_Flash_flash_data+0xf400d05c>
    d454:	00800304 	movi	r2,12
    d458:	a0800015 	stw	r2,0(r20)
    d45c:	8080030b 	ldhu	r2,12(r16)
    d460:	003f4a06 	br	d18c <__alt_mem_Flash_flash_data+0xf400d18c>

0000d464 <_isatty_r>:
    d464:	defffd04 	addi	sp,sp,-12
    d468:	dc000015 	stw	r16,0(sp)
    d46c:	040000b4 	movhi	r16,2
    d470:	dc400115 	stw	r17,4(sp)
    d474:	840e2704 	addi	r16,r16,14492
    d478:	2023883a 	mov	r17,r4
    d47c:	2809883a 	mov	r4,r5
    d480:	dfc00215 	stw	ra,8(sp)
    d484:	80000015 	stw	zero,0(r16)
    d488:	00114880 	call	11488 <isatty>
    d48c:	00ffffc4 	movi	r3,-1
    d490:	10c00526 	beq	r2,r3,d4a8 <_isatty_r+0x44>
    d494:	dfc00217 	ldw	ra,8(sp)
    d498:	dc400117 	ldw	r17,4(sp)
    d49c:	dc000017 	ldw	r16,0(sp)
    d4a0:	dec00304 	addi	sp,sp,12
    d4a4:	f800283a 	ret
    d4a8:	80c00017 	ldw	r3,0(r16)
    d4ac:	183ff926 	beq	r3,zero,d494 <__alt_mem_Flash_flash_data+0xf400d494>
    d4b0:	88c00015 	stw	r3,0(r17)
    d4b4:	003ff706 	br	d494 <__alt_mem_Flash_flash_data+0xf400d494>

0000d4b8 <_lseek_r>:
    d4b8:	defffd04 	addi	sp,sp,-12
    d4bc:	dc000015 	stw	r16,0(sp)
    d4c0:	040000b4 	movhi	r16,2
    d4c4:	dc400115 	stw	r17,4(sp)
    d4c8:	840e2704 	addi	r16,r16,14492
    d4cc:	2023883a 	mov	r17,r4
    d4d0:	2809883a 	mov	r4,r5
    d4d4:	300b883a 	mov	r5,r6
    d4d8:	380d883a 	mov	r6,r7
    d4dc:	dfc00215 	stw	ra,8(sp)
    d4e0:	80000015 	stw	zero,0(r16)
    d4e4:	00116600 	call	11660 <lseek>
    d4e8:	00ffffc4 	movi	r3,-1
    d4ec:	10c00526 	beq	r2,r3,d504 <_lseek_r+0x4c>
    d4f0:	dfc00217 	ldw	ra,8(sp)
    d4f4:	dc400117 	ldw	r17,4(sp)
    d4f8:	dc000017 	ldw	r16,0(sp)
    d4fc:	dec00304 	addi	sp,sp,12
    d500:	f800283a 	ret
    d504:	80c00017 	ldw	r3,0(r16)
    d508:	183ff926 	beq	r3,zero,d4f0 <__alt_mem_Flash_flash_data+0xf400d4f0>
    d50c:	88c00015 	stw	r3,0(r17)
    d510:	003ff706 	br	d4f0 <__alt_mem_Flash_flash_data+0xf400d4f0>

0000d514 <memmove>:
    d514:	2005883a 	mov	r2,r4
    d518:	29000b2e 	bgeu	r5,r4,d548 <memmove+0x34>
    d51c:	298f883a 	add	r7,r5,r6
    d520:	21c0092e 	bgeu	r4,r7,d548 <memmove+0x34>
    d524:	2187883a 	add	r3,r4,r6
    d528:	198bc83a 	sub	r5,r3,r6
    d52c:	30004b26 	beq	r6,zero,d65c <memmove+0x148>
    d530:	39ffffc4 	addi	r7,r7,-1
    d534:	39000003 	ldbu	r4,0(r7)
    d538:	18ffffc4 	addi	r3,r3,-1
    d53c:	19000005 	stb	r4,0(r3)
    d540:	197ffb1e 	bne	r3,r5,d530 <__alt_mem_Flash_flash_data+0xf400d530>
    d544:	f800283a 	ret
    d548:	00c003c4 	movi	r3,15
    d54c:	1980412e 	bgeu	r3,r6,d654 <memmove+0x140>
    d550:	1146b03a 	or	r3,r2,r5
    d554:	18c000cc 	andi	r3,r3,3
    d558:	1800411e 	bne	r3,zero,d660 <memmove+0x14c>
    d55c:	33fffc04 	addi	r15,r6,-16
    d560:	781ed13a 	srli	r15,r15,4
    d564:	28c00104 	addi	r3,r5,4
    d568:	13400104 	addi	r13,r2,4
    d56c:	781c913a 	slli	r14,r15,4
    d570:	2b000204 	addi	r12,r5,8
    d574:	12c00204 	addi	r11,r2,8
    d578:	73800504 	addi	r14,r14,20
    d57c:	2a800304 	addi	r10,r5,12
    d580:	12400304 	addi	r9,r2,12
    d584:	2b9d883a 	add	r14,r5,r14
    d588:	2811883a 	mov	r8,r5
    d58c:	100f883a 	mov	r7,r2
    d590:	41000017 	ldw	r4,0(r8)
    d594:	39c00404 	addi	r7,r7,16
    d598:	18c00404 	addi	r3,r3,16
    d59c:	393ffc15 	stw	r4,-16(r7)
    d5a0:	193ffc17 	ldw	r4,-16(r3)
    d5a4:	6b400404 	addi	r13,r13,16
    d5a8:	5ac00404 	addi	r11,r11,16
    d5ac:	693ffc15 	stw	r4,-16(r13)
    d5b0:	61000017 	ldw	r4,0(r12)
    d5b4:	4a400404 	addi	r9,r9,16
    d5b8:	42000404 	addi	r8,r8,16
    d5bc:	593ffc15 	stw	r4,-16(r11)
    d5c0:	51000017 	ldw	r4,0(r10)
    d5c4:	63000404 	addi	r12,r12,16
    d5c8:	52800404 	addi	r10,r10,16
    d5cc:	493ffc15 	stw	r4,-16(r9)
    d5d0:	1bbfef1e 	bne	r3,r14,d590 <__alt_mem_Flash_flash_data+0xf400d590>
    d5d4:	79000044 	addi	r4,r15,1
    d5d8:	2008913a 	slli	r4,r4,4
    d5dc:	328003cc 	andi	r10,r6,15
    d5e0:	02c000c4 	movi	r11,3
    d5e4:	1107883a 	add	r3,r2,r4
    d5e8:	290b883a 	add	r5,r5,r4
    d5ec:	5a801e2e 	bgeu	r11,r10,d668 <memmove+0x154>
    d5f0:	1813883a 	mov	r9,r3
    d5f4:	2811883a 	mov	r8,r5
    d5f8:	500f883a 	mov	r7,r10
    d5fc:	41000017 	ldw	r4,0(r8)
    d600:	4a400104 	addi	r9,r9,4
    d604:	39ffff04 	addi	r7,r7,-4
    d608:	493fff15 	stw	r4,-4(r9)
    d60c:	42000104 	addi	r8,r8,4
    d610:	59fffa36 	bltu	r11,r7,d5fc <__alt_mem_Flash_flash_data+0xf400d5fc>
    d614:	513fff04 	addi	r4,r10,-4
    d618:	2008d0ba 	srli	r4,r4,2
    d61c:	318000cc 	andi	r6,r6,3
    d620:	21000044 	addi	r4,r4,1
    d624:	2109883a 	add	r4,r4,r4
    d628:	2109883a 	add	r4,r4,r4
    d62c:	1907883a 	add	r3,r3,r4
    d630:	290b883a 	add	r5,r5,r4
    d634:	30000926 	beq	r6,zero,d65c <memmove+0x148>
    d638:	198d883a 	add	r6,r3,r6
    d63c:	29c00003 	ldbu	r7,0(r5)
    d640:	18c00044 	addi	r3,r3,1
    d644:	29400044 	addi	r5,r5,1
    d648:	19ffffc5 	stb	r7,-1(r3)
    d64c:	19bffb1e 	bne	r3,r6,d63c <__alt_mem_Flash_flash_data+0xf400d63c>
    d650:	f800283a 	ret
    d654:	1007883a 	mov	r3,r2
    d658:	003ff606 	br	d634 <__alt_mem_Flash_flash_data+0xf400d634>
    d65c:	f800283a 	ret
    d660:	1007883a 	mov	r3,r2
    d664:	003ff406 	br	d638 <__alt_mem_Flash_flash_data+0xf400d638>
    d668:	500d883a 	mov	r6,r10
    d66c:	003ff106 	br	d634 <__alt_mem_Flash_flash_data+0xf400d634>

0000d670 <_read_r>:
    d670:	defffd04 	addi	sp,sp,-12
    d674:	dc000015 	stw	r16,0(sp)
    d678:	040000b4 	movhi	r16,2
    d67c:	dc400115 	stw	r17,4(sp)
    d680:	840e2704 	addi	r16,r16,14492
    d684:	2023883a 	mov	r17,r4
    d688:	2809883a 	mov	r4,r5
    d68c:	300b883a 	mov	r5,r6
    d690:	380d883a 	mov	r6,r7
    d694:	dfc00215 	stw	ra,8(sp)
    d698:	80000015 	stw	zero,0(r16)
    d69c:	00118580 	call	11858 <read>
    d6a0:	00ffffc4 	movi	r3,-1
    d6a4:	10c00526 	beq	r2,r3,d6bc <_read_r+0x4c>
    d6a8:	dfc00217 	ldw	ra,8(sp)
    d6ac:	dc400117 	ldw	r17,4(sp)
    d6b0:	dc000017 	ldw	r16,0(sp)
    d6b4:	dec00304 	addi	sp,sp,12
    d6b8:	f800283a 	ret
    d6bc:	80c00017 	ldw	r3,0(r16)
    d6c0:	183ff926 	beq	r3,zero,d6a8 <__alt_mem_Flash_flash_data+0xf400d6a8>
    d6c4:	88c00015 	stw	r3,0(r17)
    d6c8:	003ff706 	br	d6a8 <__alt_mem_Flash_flash_data+0xf400d6a8>

0000d6cc <_realloc_r>:
    d6cc:	defff604 	addi	sp,sp,-40
    d6d0:	dd000415 	stw	r20,16(sp)
    d6d4:	dc400115 	stw	r17,4(sp)
    d6d8:	dfc00915 	stw	ra,36(sp)
    d6dc:	df000815 	stw	fp,32(sp)
    d6e0:	ddc00715 	stw	r23,28(sp)
    d6e4:	dd800615 	stw	r22,24(sp)
    d6e8:	dd400515 	stw	r21,20(sp)
    d6ec:	dcc00315 	stw	r19,12(sp)
    d6f0:	dc800215 	stw	r18,8(sp)
    d6f4:	dc000015 	stw	r16,0(sp)
    d6f8:	2829883a 	mov	r20,r5
    d6fc:	3023883a 	mov	r17,r6
    d700:	2800ad26 	beq	r5,zero,d9b8 <_realloc_r+0x2ec>
    d704:	2025883a 	mov	r18,r4
    d708:	0011cc80 	call	11cc8 <__malloc_lock>
    d70c:	a0ffff17 	ldw	r3,-4(r20)
    d710:	043fff04 	movi	r16,-4
    d714:	890002c4 	addi	r4,r17,11
    d718:	01c00584 	movi	r7,22
    d71c:	a57ffe04 	addi	r21,r20,-8
    d720:	1c20703a 	and	r16,r3,r16
    d724:	39001d2e 	bgeu	r7,r4,d79c <_realloc_r+0xd0>
    d728:	05bffe04 	movi	r22,-8
    d72c:	25ac703a 	and	r22,r4,r22
    d730:	b00f883a 	mov	r7,r22
    d734:	b0006516 	blt	r22,zero,d8cc <_realloc_r+0x200>
    d738:	b4406436 	bltu	r22,r17,d8cc <_realloc_r+0x200>
    d73c:	81c01a0e 	bge	r16,r7,d7a8 <_realloc_r+0xdc>
    d740:	070000b4 	movhi	fp,2
    d744:	e73e2404 	addi	fp,fp,-1904
    d748:	e1400217 	ldw	r5,8(fp)
    d74c:	ac11883a 	add	r8,r21,r16
    d750:	2a006226 	beq	r5,r8,d8dc <_realloc_r+0x210>
    d754:	41800117 	ldw	r6,4(r8)
    d758:	027fff84 	movi	r9,-2
    d75c:	3252703a 	and	r9,r6,r9
    d760:	4253883a 	add	r9,r8,r9
    d764:	49000117 	ldw	r4,4(r9)
    d768:	2100004c 	andi	r4,r4,1
    d76c:	2000281e 	bne	r4,zero,d810 <_realloc_r+0x144>
    d770:	00bfff04 	movi	r2,-4
    d774:	3084703a 	and	r2,r6,r2
    d778:	1409883a 	add	r4,r2,r16
    d77c:	21c05e16 	blt	r4,r7,d8f8 <_realloc_r+0x22c>
    d780:	40800317 	ldw	r2,12(r8)
    d784:	41400217 	ldw	r5,8(r8)
    d788:	a023883a 	mov	r17,r20
    d78c:	2021883a 	mov	r16,r4
    d790:	28800315 	stw	r2,12(r5)
    d794:	11400215 	stw	r5,8(r2)
    d798:	00000406 	br	d7ac <_realloc_r+0xe0>
    d79c:	01c00404 	movi	r7,16
    d7a0:	382d883a 	mov	r22,r7
    d7a4:	003fe406 	br	d738 <__alt_mem_Flash_flash_data+0xf400d738>
    d7a8:	a023883a 	mov	r17,r20
    d7ac:	858fc83a 	sub	r7,r16,r22
    d7b0:	008003c4 	movi	r2,15
    d7b4:	18c0004c 	andi	r3,r3,1
    d7b8:	11c07236 	bltu	r2,r7,d984 <_realloc_r+0x2b8>
    d7bc:	1c06b03a 	or	r3,r3,r16
    d7c0:	a8c00115 	stw	r3,4(r21)
    d7c4:	ac21883a 	add	r16,r21,r16
    d7c8:	80800117 	ldw	r2,4(r16)
    d7cc:	10800054 	ori	r2,r2,1
    d7d0:	80800115 	stw	r2,4(r16)
    d7d4:	9009883a 	mov	r4,r18
    d7d8:	0011de80 	call	11de8 <__malloc_unlock>
    d7dc:	8805883a 	mov	r2,r17
    d7e0:	dfc00917 	ldw	ra,36(sp)
    d7e4:	df000817 	ldw	fp,32(sp)
    d7e8:	ddc00717 	ldw	r23,28(sp)
    d7ec:	dd800617 	ldw	r22,24(sp)
    d7f0:	dd400517 	ldw	r21,20(sp)
    d7f4:	dd000417 	ldw	r20,16(sp)
    d7f8:	dcc00317 	ldw	r19,12(sp)
    d7fc:	dc800217 	ldw	r18,8(sp)
    d800:	dc400117 	ldw	r17,4(sp)
    d804:	dc000017 	ldw	r16,0(sp)
    d808:	dec00a04 	addi	sp,sp,40
    d80c:	f800283a 	ret
    d810:	18c0004c 	andi	r3,r3,1
    d814:	1800081e 	bne	r3,zero,d838 <_realloc_r+0x16c>
    d818:	a4fffe17 	ldw	r19,-8(r20)
    d81c:	00bfff04 	movi	r2,-4
    d820:	ace7c83a 	sub	r19,r21,r19
    d824:	98c00117 	ldw	r3,4(r19)
    d828:	1886703a 	and	r3,r3,r2
    d82c:	98000226 	beq	r19,zero,d838 <_realloc_r+0x16c>
    d830:	1c2f883a 	add	r23,r3,r16
    d834:	b9c06d0e 	bge	r23,r7,d9ec <_realloc_r+0x320>
    d838:	880b883a 	mov	r5,r17
    d83c:	9009883a 	mov	r4,r18
    d840:	00088c00 	call	88c0 <_malloc_r>
    d844:	1023883a 	mov	r17,r2
    d848:	1000ef26 	beq	r2,zero,dc08 <_realloc_r+0x53c>
    d84c:	a0ffff17 	ldw	r3,-4(r20)
    d850:	113ffe04 	addi	r4,r2,-8
    d854:	00bfff84 	movi	r2,-2
    d858:	1884703a 	and	r2,r3,r2
    d85c:	a885883a 	add	r2,r21,r2
    d860:	2080bf26 	beq	r4,r2,db60 <_realloc_r+0x494>
    d864:	81bfff04 	addi	r6,r16,-4
    d868:	00800904 	movi	r2,36
    d86c:	11808936 	bltu	r2,r6,da94 <_realloc_r+0x3c8>
    d870:	00c004c4 	movi	r3,19
    d874:	19806c2e 	bgeu	r3,r6,da28 <_realloc_r+0x35c>
    d878:	a0c00017 	ldw	r3,0(r20)
    d87c:	88c00015 	stw	r3,0(r17)
    d880:	a0c00117 	ldw	r3,4(r20)
    d884:	88c00115 	stw	r3,4(r17)
    d888:	00c006c4 	movi	r3,27
    d88c:	1980ac36 	bltu	r3,r6,db40 <_realloc_r+0x474>
    d890:	88800204 	addi	r2,r17,8
    d894:	a0c00204 	addi	r3,r20,8
    d898:	19000017 	ldw	r4,0(r3)
    d89c:	11000015 	stw	r4,0(r2)
    d8a0:	19000117 	ldw	r4,4(r3)
    d8a4:	11000115 	stw	r4,4(r2)
    d8a8:	18c00217 	ldw	r3,8(r3)
    d8ac:	10c00215 	stw	r3,8(r2)
    d8b0:	a00b883a 	mov	r5,r20
    d8b4:	9009883a 	mov	r4,r18
    d8b8:	00081b00 	call	81b0 <_free_r>
    d8bc:	9009883a 	mov	r4,r18
    d8c0:	0011de80 	call	11de8 <__malloc_unlock>
    d8c4:	8805883a 	mov	r2,r17
    d8c8:	003fc506 	br	d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    d8cc:	00800304 	movi	r2,12
    d8d0:	90800015 	stw	r2,0(r18)
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	003fc106 	br	d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    d8dc:	29800117 	ldw	r6,4(r5)
    d8e0:	00bfff04 	movi	r2,-4
    d8e4:	b1000404 	addi	r4,r22,16
    d8e8:	3084703a 	and	r2,r6,r2
    d8ec:	140d883a 	add	r6,r2,r16
    d8f0:	31005b0e 	bge	r6,r4,da60 <_realloc_r+0x394>
    d8f4:	2811883a 	mov	r8,r5
    d8f8:	18c0004c 	andi	r3,r3,1
    d8fc:	183fce1e 	bne	r3,zero,d838 <__alt_mem_Flash_flash_data+0xf400d838>
    d900:	a4fffe17 	ldw	r19,-8(r20)
    d904:	00ffff04 	movi	r3,-4
    d908:	ace7c83a 	sub	r19,r21,r19
    d90c:	99000117 	ldw	r4,4(r19)
    d910:	20c6703a 	and	r3,r4,r3
    d914:	403fc526 	beq	r8,zero,d82c <__alt_mem_Flash_flash_data+0xf400d82c>
    d918:	1c2f883a 	add	r23,r3,r16
    d91c:	b8af883a 	add	r23,r23,r2
    d920:	41406026 	beq	r8,r5,daa4 <_realloc_r+0x3d8>
    d924:	b9ffc116 	blt	r23,r7,d82c <__alt_mem_Flash_flash_data+0xf400d82c>
    d928:	40c00217 	ldw	r3,8(r8)
    d92c:	40800317 	ldw	r2,12(r8)
    d930:	81bfff04 	addi	r6,r16,-4
    d934:	01000904 	movi	r4,36
    d938:	18800315 	stw	r2,12(r3)
    d93c:	10c00215 	stw	r3,8(r2)
    d940:	99400217 	ldw	r5,8(r19)
    d944:	98c00317 	ldw	r3,12(r19)
    d948:	9c400204 	addi	r17,r19,8
    d94c:	28c00315 	stw	r3,12(r5)
    d950:	19400215 	stw	r5,8(r3)
    d954:	21802d36 	bltu	r4,r6,da0c <_realloc_r+0x340>
    d958:	008004c4 	movi	r2,19
    d95c:	1180352e 	bgeu	r2,r6,da34 <_realloc_r+0x368>
    d960:	a0800017 	ldw	r2,0(r20)
    d964:	98800215 	stw	r2,8(r19)
    d968:	a0800117 	ldw	r2,4(r20)
    d96c:	98800315 	stw	r2,12(r19)
    d970:	008006c4 	movi	r2,27
    d974:	11808036 	bltu	r2,r6,db78 <_realloc_r+0x4ac>
    d978:	98c00404 	addi	r3,r19,16
    d97c:	a5000204 	addi	r20,r20,8
    d980:	00002d06 	br	da38 <_realloc_r+0x36c>
    d984:	1d86b03a 	or	r3,r3,r22
    d988:	ad8b883a 	add	r5,r21,r22
    d98c:	a8c00115 	stw	r3,4(r21)
    d990:	38800054 	ori	r2,r7,1
    d994:	28800115 	stw	r2,4(r5)
    d998:	29cf883a 	add	r7,r5,r7
    d99c:	38800117 	ldw	r2,4(r7)
    d9a0:	9009883a 	mov	r4,r18
    d9a4:	29400204 	addi	r5,r5,8
    d9a8:	10800054 	ori	r2,r2,1
    d9ac:	38800115 	stw	r2,4(r7)
    d9b0:	00081b00 	call	81b0 <_free_r>
    d9b4:	003f8706 	br	d7d4 <__alt_mem_Flash_flash_data+0xf400d7d4>
    d9b8:	300b883a 	mov	r5,r6
    d9bc:	dfc00917 	ldw	ra,36(sp)
    d9c0:	df000817 	ldw	fp,32(sp)
    d9c4:	ddc00717 	ldw	r23,28(sp)
    d9c8:	dd800617 	ldw	r22,24(sp)
    d9cc:	dd400517 	ldw	r21,20(sp)
    d9d0:	dd000417 	ldw	r20,16(sp)
    d9d4:	dcc00317 	ldw	r19,12(sp)
    d9d8:	dc800217 	ldw	r18,8(sp)
    d9dc:	dc400117 	ldw	r17,4(sp)
    d9e0:	dc000017 	ldw	r16,0(sp)
    d9e4:	dec00a04 	addi	sp,sp,40
    d9e8:	00088c01 	jmpi	88c0 <_malloc_r>
    d9ec:	98800317 	ldw	r2,12(r19)
    d9f0:	98c00217 	ldw	r3,8(r19)
    d9f4:	81bfff04 	addi	r6,r16,-4
    d9f8:	01000904 	movi	r4,36
    d9fc:	18800315 	stw	r2,12(r3)
    da00:	10c00215 	stw	r3,8(r2)
    da04:	9c400204 	addi	r17,r19,8
    da08:	21bfd32e 	bgeu	r4,r6,d958 <__alt_mem_Flash_flash_data+0xf400d958>
    da0c:	8809883a 	mov	r4,r17
    da10:	a00b883a 	mov	r5,r20
    da14:	000d5140 	call	d514 <memmove>
    da18:	98c00117 	ldw	r3,4(r19)
    da1c:	b821883a 	mov	r16,r23
    da20:	982b883a 	mov	r21,r19
    da24:	003f6106 	br	d7ac <__alt_mem_Flash_flash_data+0xf400d7ac>
    da28:	8805883a 	mov	r2,r17
    da2c:	a007883a 	mov	r3,r20
    da30:	003f9906 	br	d898 <__alt_mem_Flash_flash_data+0xf400d898>
    da34:	8807883a 	mov	r3,r17
    da38:	a0800017 	ldw	r2,0(r20)
    da3c:	b821883a 	mov	r16,r23
    da40:	982b883a 	mov	r21,r19
    da44:	18800015 	stw	r2,0(r3)
    da48:	a0800117 	ldw	r2,4(r20)
    da4c:	18800115 	stw	r2,4(r3)
    da50:	a0800217 	ldw	r2,8(r20)
    da54:	18800215 	stw	r2,8(r3)
    da58:	98c00117 	ldw	r3,4(r19)
    da5c:	003f5306 	br	d7ac <__alt_mem_Flash_flash_data+0xf400d7ac>
    da60:	adab883a 	add	r21,r21,r22
    da64:	3585c83a 	sub	r2,r6,r22
    da68:	e5400215 	stw	r21,8(fp)
    da6c:	10800054 	ori	r2,r2,1
    da70:	a8800115 	stw	r2,4(r21)
    da74:	a0bfff17 	ldw	r2,-4(r20)
    da78:	9009883a 	mov	r4,r18
    da7c:	1080004c 	andi	r2,r2,1
    da80:	b0acb03a 	or	r22,r22,r2
    da84:	a5bfff15 	stw	r22,-4(r20)
    da88:	0011de80 	call	11de8 <__malloc_unlock>
    da8c:	a005883a 	mov	r2,r20
    da90:	003f5306 	br	d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    da94:	8809883a 	mov	r4,r17
    da98:	a00b883a 	mov	r5,r20
    da9c:	000d5140 	call	d514 <memmove>
    daa0:	003f8306 	br	d8b0 <__alt_mem_Flash_flash_data+0xf400d8b0>
    daa4:	b0800404 	addi	r2,r22,16
    daa8:	b8bf6016 	blt	r23,r2,d82c <__alt_mem_Flash_flash_data+0xf400d82c>
    daac:	98800317 	ldw	r2,12(r19)
    dab0:	98c00217 	ldw	r3,8(r19)
    dab4:	81bfff04 	addi	r6,r16,-4
    dab8:	01000904 	movi	r4,36
    dabc:	18800315 	stw	r2,12(r3)
    dac0:	10c00215 	stw	r3,8(r2)
    dac4:	9c400204 	addi	r17,r19,8
    dac8:	21804336 	bltu	r4,r6,dbd8 <_realloc_r+0x50c>
    dacc:	008004c4 	movi	r2,19
    dad0:	11803f2e 	bgeu	r2,r6,dbd0 <_realloc_r+0x504>
    dad4:	a0800017 	ldw	r2,0(r20)
    dad8:	98800215 	stw	r2,8(r19)
    dadc:	a0800117 	ldw	r2,4(r20)
    dae0:	98800315 	stw	r2,12(r19)
    dae4:	008006c4 	movi	r2,27
    dae8:	11803f36 	bltu	r2,r6,dbe8 <_realloc_r+0x51c>
    daec:	98800404 	addi	r2,r19,16
    daf0:	a5000204 	addi	r20,r20,8
    daf4:	a0c00017 	ldw	r3,0(r20)
    daf8:	10c00015 	stw	r3,0(r2)
    dafc:	a0c00117 	ldw	r3,4(r20)
    db00:	10c00115 	stw	r3,4(r2)
    db04:	a0c00217 	ldw	r3,8(r20)
    db08:	10c00215 	stw	r3,8(r2)
    db0c:	9d87883a 	add	r3,r19,r22
    db10:	bd85c83a 	sub	r2,r23,r22
    db14:	e0c00215 	stw	r3,8(fp)
    db18:	10800054 	ori	r2,r2,1
    db1c:	18800115 	stw	r2,4(r3)
    db20:	98800117 	ldw	r2,4(r19)
    db24:	9009883a 	mov	r4,r18
    db28:	1080004c 	andi	r2,r2,1
    db2c:	b0acb03a 	or	r22,r22,r2
    db30:	9d800115 	stw	r22,4(r19)
    db34:	0011de80 	call	11de8 <__malloc_unlock>
    db38:	8805883a 	mov	r2,r17
    db3c:	003f2806 	br	d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    db40:	a0c00217 	ldw	r3,8(r20)
    db44:	88c00215 	stw	r3,8(r17)
    db48:	a0c00317 	ldw	r3,12(r20)
    db4c:	88c00315 	stw	r3,12(r17)
    db50:	30801126 	beq	r6,r2,db98 <_realloc_r+0x4cc>
    db54:	88800404 	addi	r2,r17,16
    db58:	a0c00404 	addi	r3,r20,16
    db5c:	003f4e06 	br	d898 <__alt_mem_Flash_flash_data+0xf400d898>
    db60:	893fff17 	ldw	r4,-4(r17)
    db64:	00bfff04 	movi	r2,-4
    db68:	a023883a 	mov	r17,r20
    db6c:	2084703a 	and	r2,r4,r2
    db70:	80a1883a 	add	r16,r16,r2
    db74:	003f0d06 	br	d7ac <__alt_mem_Flash_flash_data+0xf400d7ac>
    db78:	a0800217 	ldw	r2,8(r20)
    db7c:	98800415 	stw	r2,16(r19)
    db80:	a0800317 	ldw	r2,12(r20)
    db84:	98800515 	stw	r2,20(r19)
    db88:	31000a26 	beq	r6,r4,dbb4 <_realloc_r+0x4e8>
    db8c:	98c00604 	addi	r3,r19,24
    db90:	a5000404 	addi	r20,r20,16
    db94:	003fa806 	br	da38 <__alt_mem_Flash_flash_data+0xf400da38>
    db98:	a1000417 	ldw	r4,16(r20)
    db9c:	88800604 	addi	r2,r17,24
    dba0:	a0c00604 	addi	r3,r20,24
    dba4:	89000415 	stw	r4,16(r17)
    dba8:	a1000517 	ldw	r4,20(r20)
    dbac:	89000515 	stw	r4,20(r17)
    dbb0:	003f3906 	br	d898 <__alt_mem_Flash_flash_data+0xf400d898>
    dbb4:	a0800417 	ldw	r2,16(r20)
    dbb8:	a5000604 	addi	r20,r20,24
    dbbc:	98c00804 	addi	r3,r19,32
    dbc0:	98800615 	stw	r2,24(r19)
    dbc4:	a0bfff17 	ldw	r2,-4(r20)
    dbc8:	98800715 	stw	r2,28(r19)
    dbcc:	003f9a06 	br	da38 <__alt_mem_Flash_flash_data+0xf400da38>
    dbd0:	8805883a 	mov	r2,r17
    dbd4:	003fc706 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    dbd8:	8809883a 	mov	r4,r17
    dbdc:	a00b883a 	mov	r5,r20
    dbe0:	000d5140 	call	d514 <memmove>
    dbe4:	003fc906 	br	db0c <__alt_mem_Flash_flash_data+0xf400db0c>
    dbe8:	a0800217 	ldw	r2,8(r20)
    dbec:	98800415 	stw	r2,16(r19)
    dbf0:	a0800317 	ldw	r2,12(r20)
    dbf4:	98800515 	stw	r2,20(r19)
    dbf8:	31000726 	beq	r6,r4,dc18 <_realloc_r+0x54c>
    dbfc:	98800604 	addi	r2,r19,24
    dc00:	a5000404 	addi	r20,r20,16
    dc04:	003fbb06 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    dc08:	9009883a 	mov	r4,r18
    dc0c:	0011de80 	call	11de8 <__malloc_unlock>
    dc10:	0005883a 	mov	r2,zero
    dc14:	003ef206 	br	d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    dc18:	a0c00417 	ldw	r3,16(r20)
    dc1c:	a5000604 	addi	r20,r20,24
    dc20:	98800804 	addi	r2,r19,32
    dc24:	98c00615 	stw	r3,24(r19)
    dc28:	a0ffff17 	ldw	r3,-4(r20)
    dc2c:	98c00715 	stw	r3,28(r19)
    dc30:	003fb006 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>

0000dc34 <__swbuf_r>:
    dc34:	defffc04 	addi	sp,sp,-16
    dc38:	dc800215 	stw	r18,8(sp)
    dc3c:	dc400115 	stw	r17,4(sp)
    dc40:	dc000015 	stw	r16,0(sp)
    dc44:	dfc00315 	stw	ra,12(sp)
    dc48:	2025883a 	mov	r18,r4
    dc4c:	2823883a 	mov	r17,r5
    dc50:	3021883a 	mov	r16,r6
    dc54:	20000226 	beq	r4,zero,dc60 <__swbuf_r+0x2c>
    dc58:	20800e17 	ldw	r2,56(r4)
    dc5c:	10004126 	beq	r2,zero,dd64 <__swbuf_r+0x130>
    dc60:	80c00617 	ldw	r3,24(r16)
    dc64:	8180030b 	ldhu	r6,12(r16)
    dc68:	80c00215 	stw	r3,8(r16)
    dc6c:	30c0020c 	andi	r3,r6,8
    dc70:	18003526 	beq	r3,zero,dd48 <__swbuf_r+0x114>
    dc74:	80c00417 	ldw	r3,16(r16)
    dc78:	18003326 	beq	r3,zero,dd48 <__swbuf_r+0x114>
    dc7c:	3088000c 	andi	r2,r6,8192
    dc80:	8c403fcc 	andi	r17,r17,255
    dc84:	10001726 	beq	r2,zero,dce4 <__swbuf_r+0xb0>
    dc88:	80800017 	ldw	r2,0(r16)
    dc8c:	81000517 	ldw	r4,20(r16)
    dc90:	10c7c83a 	sub	r3,r2,r3
    dc94:	19001d0e 	bge	r3,r4,dd0c <__swbuf_r+0xd8>
    dc98:	18c00044 	addi	r3,r3,1
    dc9c:	81400217 	ldw	r5,8(r16)
    dca0:	11000044 	addi	r4,r2,1
    dca4:	81000015 	stw	r4,0(r16)
    dca8:	297fffc4 	addi	r5,r5,-1
    dcac:	81400215 	stw	r5,8(r16)
    dcb0:	14400005 	stb	r17,0(r2)
    dcb4:	80800517 	ldw	r2,20(r16)
    dcb8:	10c01d26 	beq	r2,r3,dd30 <__swbuf_r+0xfc>
    dcbc:	8080030b 	ldhu	r2,12(r16)
    dcc0:	1080004c 	andi	r2,r2,1
    dcc4:	1000181e 	bne	r2,zero,dd28 <__swbuf_r+0xf4>
    dcc8:	8805883a 	mov	r2,r17
    dccc:	dfc00317 	ldw	ra,12(sp)
    dcd0:	dc800217 	ldw	r18,8(sp)
    dcd4:	dc400117 	ldw	r17,4(sp)
    dcd8:	dc000017 	ldw	r16,0(sp)
    dcdc:	dec00404 	addi	sp,sp,16
    dce0:	f800283a 	ret
    dce4:	81001917 	ldw	r4,100(r16)
    dce8:	00b7ffc4 	movi	r2,-8193
    dcec:	31880014 	ori	r6,r6,8192
    dcf0:	2084703a 	and	r2,r4,r2
    dcf4:	80801915 	stw	r2,100(r16)
    dcf8:	80800017 	ldw	r2,0(r16)
    dcfc:	81000517 	ldw	r4,20(r16)
    dd00:	8180030d 	sth	r6,12(r16)
    dd04:	10c7c83a 	sub	r3,r2,r3
    dd08:	193fe316 	blt	r3,r4,dc98 <__alt_mem_Flash_flash_data+0xf400dc98>
    dd0c:	9009883a 	mov	r4,r18
    dd10:	800b883a 	mov	r5,r16
    dd14:	0007c600 	call	7c60 <_fflush_r>
    dd18:	1000091e 	bne	r2,zero,dd40 <__swbuf_r+0x10c>
    dd1c:	80800017 	ldw	r2,0(r16)
    dd20:	00c00044 	movi	r3,1
    dd24:	003fdd06 	br	dc9c <__alt_mem_Flash_flash_data+0xf400dc9c>
    dd28:	00800284 	movi	r2,10
    dd2c:	88bfe61e 	bne	r17,r2,dcc8 <__alt_mem_Flash_flash_data+0xf400dcc8>
    dd30:	9009883a 	mov	r4,r18
    dd34:	800b883a 	mov	r5,r16
    dd38:	0007c600 	call	7c60 <_fflush_r>
    dd3c:	103fe226 	beq	r2,zero,dcc8 <__alt_mem_Flash_flash_data+0xf400dcc8>
    dd40:	00bfffc4 	movi	r2,-1
    dd44:	003fe106 	br	dccc <__alt_mem_Flash_flash_data+0xf400dccc>
    dd48:	9009883a 	mov	r4,r18
    dd4c:	800b883a 	mov	r5,r16
    dd50:	0005fdc0 	call	5fdc <__swsetup_r>
    dd54:	103ffa1e 	bne	r2,zero,dd40 <__alt_mem_Flash_flash_data+0xf400dd40>
    dd58:	8180030b 	ldhu	r6,12(r16)
    dd5c:	80c00417 	ldw	r3,16(r16)
    dd60:	003fc606 	br	dc7c <__alt_mem_Flash_flash_data+0xf400dc7c>
    dd64:	000803c0 	call	803c <__sinit>
    dd68:	003fbd06 	br	dc60 <__alt_mem_Flash_flash_data+0xf400dc60>

0000dd6c <__swbuf>:
    dd6c:	00c000b4 	movhi	r3,2
    dd70:	18c55404 	addi	r3,r3,5456
    dd74:	2005883a 	mov	r2,r4
    dd78:	19000017 	ldw	r4,0(r3)
    dd7c:	280d883a 	mov	r6,r5
    dd80:	100b883a 	mov	r5,r2
    dd84:	000dc341 	jmpi	dc34 <__swbuf_r>

0000dd88 <_wcrtomb_r>:
    dd88:	defff604 	addi	sp,sp,-40
    dd8c:	008000b4 	movhi	r2,2
    dd90:	dc800815 	stw	r18,32(sp)
    dd94:	dc400715 	stw	r17,28(sp)
    dd98:	dc000615 	stw	r16,24(sp)
    dd9c:	10855804 	addi	r2,r2,5472
    dda0:	dfc00915 	stw	ra,36(sp)
    dda4:	2021883a 	mov	r16,r4
    dda8:	3823883a 	mov	r17,r7
    ddac:	14800017 	ldw	r18,0(r2)
    ddb0:	28001426 	beq	r5,zero,de04 <_wcrtomb_r+0x7c>
    ddb4:	d9400415 	stw	r5,16(sp)
    ddb8:	d9800515 	stw	r6,20(sp)
    ddbc:	00086a40 	call	86a4 <__locale_charset>
    ddc0:	d9400417 	ldw	r5,16(sp)
    ddc4:	d9800517 	ldw	r6,20(sp)
    ddc8:	8009883a 	mov	r4,r16
    ddcc:	dc400015 	stw	r17,0(sp)
    ddd0:	100f883a 	mov	r7,r2
    ddd4:	903ee83a 	callr	r18
    ddd8:	00ffffc4 	movi	r3,-1
    dddc:	10c0031e 	bne	r2,r3,ddec <_wcrtomb_r+0x64>
    dde0:	88000015 	stw	zero,0(r17)
    dde4:	00c02284 	movi	r3,138
    dde8:	80c00015 	stw	r3,0(r16)
    ddec:	dfc00917 	ldw	ra,36(sp)
    ddf0:	dc800817 	ldw	r18,32(sp)
    ddf4:	dc400717 	ldw	r17,28(sp)
    ddf8:	dc000617 	ldw	r16,24(sp)
    ddfc:	dec00a04 	addi	sp,sp,40
    de00:	f800283a 	ret
    de04:	00086a40 	call	86a4 <__locale_charset>
    de08:	8009883a 	mov	r4,r16
    de0c:	dc400015 	stw	r17,0(sp)
    de10:	d9400104 	addi	r5,sp,4
    de14:	000d883a 	mov	r6,zero
    de18:	100f883a 	mov	r7,r2
    de1c:	903ee83a 	callr	r18
    de20:	003fed06 	br	ddd8 <__alt_mem_Flash_flash_data+0xf400ddd8>

0000de24 <wcrtomb>:
    de24:	defff604 	addi	sp,sp,-40
    de28:	008000b4 	movhi	r2,2
    de2c:	dc800615 	stw	r18,24(sp)
    de30:	dc400515 	stw	r17,20(sp)
    de34:	dc000415 	stw	r16,16(sp)
    de38:	10855404 	addi	r2,r2,5456
    de3c:	dfc00915 	stw	ra,36(sp)
    de40:	dd000815 	stw	r20,32(sp)
    de44:	dcc00715 	stw	r19,28(sp)
    de48:	2021883a 	mov	r16,r4
    de4c:	3025883a 	mov	r18,r6
    de50:	14400017 	ldw	r17,0(r2)
    de54:	20001826 	beq	r4,zero,deb8 <wcrtomb+0x94>
    de58:	008000b4 	movhi	r2,2
    de5c:	10855804 	addi	r2,r2,5472
    de60:	15000017 	ldw	r20,0(r2)
    de64:	2827883a 	mov	r19,r5
    de68:	00086a40 	call	86a4 <__locale_charset>
    de6c:	8809883a 	mov	r4,r17
    de70:	dc800015 	stw	r18,0(sp)
    de74:	800b883a 	mov	r5,r16
    de78:	980d883a 	mov	r6,r19
    de7c:	100f883a 	mov	r7,r2
    de80:	a03ee83a 	callr	r20
    de84:	00ffffc4 	movi	r3,-1
    de88:	10c0031e 	bne	r2,r3,de98 <wcrtomb+0x74>
    de8c:	90000015 	stw	zero,0(r18)
    de90:	00c02284 	movi	r3,138
    de94:	88c00015 	stw	r3,0(r17)
    de98:	dfc00917 	ldw	ra,36(sp)
    de9c:	dd000817 	ldw	r20,32(sp)
    dea0:	dcc00717 	ldw	r19,28(sp)
    dea4:	dc800617 	ldw	r18,24(sp)
    dea8:	dc400517 	ldw	r17,20(sp)
    deac:	dc000417 	ldw	r16,16(sp)
    deb0:	dec00a04 	addi	sp,sp,40
    deb4:	f800283a 	ret
    deb8:	008000b4 	movhi	r2,2
    debc:	10855804 	addi	r2,r2,5472
    dec0:	14000017 	ldw	r16,0(r2)
    dec4:	00086a40 	call	86a4 <__locale_charset>
    dec8:	8809883a 	mov	r4,r17
    decc:	dc800015 	stw	r18,0(sp)
    ded0:	d9400104 	addi	r5,sp,4
    ded4:	000d883a 	mov	r6,zero
    ded8:	100f883a 	mov	r7,r2
    dedc:	803ee83a 	callr	r16
    dee0:	003fe806 	br	de84 <__alt_mem_Flash_flash_data+0xf400de84>

0000dee4 <__ascii_wctomb>:
    dee4:	28000526 	beq	r5,zero,defc <__ascii_wctomb+0x18>
    dee8:	00803fc4 	movi	r2,255
    deec:	11800536 	bltu	r2,r6,df04 <__ascii_wctomb+0x20>
    def0:	29800005 	stb	r6,0(r5)
    def4:	00800044 	movi	r2,1
    def8:	f800283a 	ret
    defc:	0005883a 	mov	r2,zero
    df00:	f800283a 	ret
    df04:	00802284 	movi	r2,138
    df08:	20800015 	stw	r2,0(r4)
    df0c:	00bfffc4 	movi	r2,-1
    df10:	f800283a 	ret

0000df14 <_wctomb_r>:
    df14:	008000b4 	movhi	r2,2
    df18:	defff904 	addi	sp,sp,-28
    df1c:	10855804 	addi	r2,r2,5472
    df20:	dfc00615 	stw	ra,24(sp)
    df24:	dc400515 	stw	r17,20(sp)
    df28:	dc000415 	stw	r16,16(sp)
    df2c:	3823883a 	mov	r17,r7
    df30:	14000017 	ldw	r16,0(r2)
    df34:	d9000115 	stw	r4,4(sp)
    df38:	d9400215 	stw	r5,8(sp)
    df3c:	d9800315 	stw	r6,12(sp)
    df40:	00086a40 	call	86a4 <__locale_charset>
    df44:	d9000117 	ldw	r4,4(sp)
    df48:	d9400217 	ldw	r5,8(sp)
    df4c:	d9800317 	ldw	r6,12(sp)
    df50:	dc400015 	stw	r17,0(sp)
    df54:	100f883a 	mov	r7,r2
    df58:	803ee83a 	callr	r16
    df5c:	dfc00617 	ldw	ra,24(sp)
    df60:	dc400517 	ldw	r17,20(sp)
    df64:	dc000417 	ldw	r16,16(sp)
    df68:	dec00704 	addi	sp,sp,28
    df6c:	f800283a 	ret

0000df70 <__udivdi3>:
    df70:	defff504 	addi	sp,sp,-44
    df74:	dcc00415 	stw	r19,16(sp)
    df78:	dc000115 	stw	r16,4(sp)
    df7c:	dfc00a15 	stw	ra,40(sp)
    df80:	df000915 	stw	fp,36(sp)
    df84:	ddc00815 	stw	r23,32(sp)
    df88:	dd800715 	stw	r22,28(sp)
    df8c:	dd400615 	stw	r21,24(sp)
    df90:	dd000515 	stw	r20,20(sp)
    df94:	dc800315 	stw	r18,12(sp)
    df98:	dc400215 	stw	r17,8(sp)
    df9c:	2027883a 	mov	r19,r4
    dfa0:	2821883a 	mov	r16,r5
    dfa4:	3800421e 	bne	r7,zero,e0b0 <__udivdi3+0x140>
    dfa8:	3025883a 	mov	r18,r6
    dfac:	2023883a 	mov	r17,r4
    dfb0:	2980542e 	bgeu	r5,r6,e104 <__udivdi3+0x194>
    dfb4:	00bfffd4 	movui	r2,65535
    dfb8:	282d883a 	mov	r22,r5
    dfbc:	1180a836 	bltu	r2,r6,e260 <__udivdi3+0x2f0>
    dfc0:	00803fc4 	movi	r2,255
    dfc4:	1181422e 	bgeu	r2,r6,e4d0 <__udivdi3+0x560>
    dfc8:	00800204 	movi	r2,8
    dfcc:	1007883a 	mov	r3,r2
    dfd0:	3084d83a 	srl	r2,r6,r2
    dfd4:	010000b4 	movhi	r4,2
    dfd8:	213b6a04 	addi	r4,r4,-4696
    dfdc:	2085883a 	add	r2,r4,r2
    dfe0:	10800003 	ldbu	r2,0(r2)
    dfe4:	10c7883a 	add	r3,r2,r3
    dfe8:	00800804 	movi	r2,32
    dfec:	10c5c83a 	sub	r2,r2,r3
    dff0:	10000526 	beq	r2,zero,e008 <__udivdi3+0x98>
    dff4:	80a0983a 	sll	r16,r16,r2
    dff8:	98c6d83a 	srl	r3,r19,r3
    dffc:	30a4983a 	sll	r18,r6,r2
    e000:	98a2983a 	sll	r17,r19,r2
    e004:	80ecb03a 	or	r22,r16,r3
    e008:	902ad43a 	srli	r21,r18,16
    e00c:	b009883a 	mov	r4,r22
    e010:	953fffcc 	andi	r20,r18,65535
    e014:	a80b883a 	mov	r5,r21
    e018:	000ebe40 	call	ebe4 <__umodsi3>
    e01c:	b009883a 	mov	r4,r22
    e020:	a80b883a 	mov	r5,r21
    e024:	1027883a 	mov	r19,r2
    e028:	000ebdc0 	call	ebdc <__udivsi3>
    e02c:	1021883a 	mov	r16,r2
    e030:	8806d43a 	srli	r3,r17,16
    e034:	9804943a 	slli	r2,r19,16
    e038:	8527383a 	mul	r19,r16,r20
    e03c:	10c4b03a 	or	r2,r2,r3
    e040:	14c0052e 	bgeu	r2,r19,e058 <__udivdi3+0xe8>
    e044:	1485883a 	add	r2,r2,r18
    e048:	80ffffc4 	addi	r3,r16,-1
    e04c:	14800136 	bltu	r2,r18,e054 <__udivdi3+0xe4>
    e050:	14c13436 	bltu	r2,r19,e524 <__udivdi3+0x5b4>
    e054:	1821883a 	mov	r16,r3
    e058:	14e7c83a 	sub	r19,r2,r19
    e05c:	9809883a 	mov	r4,r19
    e060:	a80b883a 	mov	r5,r21
    e064:	000ebe40 	call	ebe4 <__umodsi3>
    e068:	102d883a 	mov	r22,r2
    e06c:	9809883a 	mov	r4,r19
    e070:	a80b883a 	mov	r5,r21
    e074:	000ebdc0 	call	ebdc <__udivsi3>
    e078:	b02c943a 	slli	r22,r22,16
    e07c:	1529383a 	mul	r20,r2,r20
    e080:	8c7fffcc 	andi	r17,r17,65535
    e084:	b462b03a 	or	r17,r22,r17
    e088:	8d00052e 	bgeu	r17,r20,e0a0 <__udivdi3+0x130>
    e08c:	8ca3883a 	add	r17,r17,r18
    e090:	10ffffc4 	addi	r3,r2,-1
    e094:	8c80f636 	bltu	r17,r18,e470 <__udivdi3+0x500>
    e098:	8d00f52e 	bgeu	r17,r20,e470 <__udivdi3+0x500>
    e09c:	10bfff84 	addi	r2,r2,-2
    e0a0:	8020943a 	slli	r16,r16,16
    e0a4:	0007883a 	mov	r3,zero
    e0a8:	1404b03a 	or	r2,r2,r16
    e0ac:	00005b06 	br	e21c <__udivdi3+0x2ac>
    e0b0:	29c05836 	bltu	r5,r7,e214 <__udivdi3+0x2a4>
    e0b4:	00bfffd4 	movui	r2,65535
    e0b8:	11c0642e 	bgeu	r2,r7,e24c <__udivdi3+0x2dc>
    e0bc:	00804034 	movhi	r2,256
    e0c0:	10bfffc4 	addi	r2,r2,-1
    e0c4:	11c0f32e 	bgeu	r2,r7,e494 <__udivdi3+0x524>
    e0c8:	00c00604 	movi	r3,24
    e0cc:	180b883a 	mov	r5,r3
    e0d0:	38c6d83a 	srl	r3,r7,r3
    e0d4:	008000b4 	movhi	r2,2
    e0d8:	10bb6a04 	addi	r2,r2,-4696
    e0dc:	10c7883a 	add	r3,r2,r3
    e0e0:	18c00003 	ldbu	r3,0(r3)
    e0e4:	01000804 	movi	r4,32
    e0e8:	1947883a 	add	r3,r3,r5
    e0ec:	20e5c83a 	sub	r18,r4,r3
    e0f0:	9000661e 	bne	r18,zero,e28c <__udivdi3+0x31c>
    e0f4:	3c00f936 	bltu	r7,r16,e4dc <__udivdi3+0x56c>
    e0f8:	9985403a 	cmpgeu	r2,r19,r6
    e0fc:	0007883a 	mov	r3,zero
    e100:	00004606 	br	e21c <__udivdi3+0x2ac>
    e104:	3000041e 	bne	r6,zero,e118 <__udivdi3+0x1a8>
    e108:	01000044 	movi	r4,1
    e10c:	000b883a 	mov	r5,zero
    e110:	000ebdc0 	call	ebdc <__udivsi3>
    e114:	1025883a 	mov	r18,r2
    e118:	00bfffd4 	movui	r2,65535
    e11c:	1480562e 	bgeu	r2,r18,e278 <__udivdi3+0x308>
    e120:	00804034 	movhi	r2,256
    e124:	10bfffc4 	addi	r2,r2,-1
    e128:	1480e32e 	bgeu	r2,r18,e4b8 <__udivdi3+0x548>
    e12c:	00800604 	movi	r2,24
    e130:	1007883a 	mov	r3,r2
    e134:	9084d83a 	srl	r2,r18,r2
    e138:	010000b4 	movhi	r4,2
    e13c:	213b6a04 	addi	r4,r4,-4696
    e140:	2085883a 	add	r2,r4,r2
    e144:	10800003 	ldbu	r2,0(r2)
    e148:	10c5883a 	add	r2,r2,r3
    e14c:	00c00804 	movi	r3,32
    e150:	1887c83a 	sub	r3,r3,r2
    e154:	1800911e 	bne	r3,zero,e39c <__udivdi3+0x42c>
    e158:	9028d43a 	srli	r20,r18,16
    e15c:	84a1c83a 	sub	r16,r16,r18
    e160:	957fffcc 	andi	r21,r18,65535
    e164:	00c00044 	movi	r3,1
    e168:	8009883a 	mov	r4,r16
    e16c:	a00b883a 	mov	r5,r20
    e170:	d8c00015 	stw	r3,0(sp)
    e174:	000ebe40 	call	ebe4 <__umodsi3>
    e178:	8009883a 	mov	r4,r16
    e17c:	a00b883a 	mov	r5,r20
    e180:	1027883a 	mov	r19,r2
    e184:	000ebdc0 	call	ebdc <__udivsi3>
    e188:	1021883a 	mov	r16,r2
    e18c:	880cd43a 	srli	r6,r17,16
    e190:	9804943a 	slli	r2,r19,16
    e194:	8567383a 	mul	r19,r16,r21
    e198:	d8c00017 	ldw	r3,0(sp)
    e19c:	1188b03a 	or	r4,r2,r6
    e1a0:	24c0052e 	bgeu	r4,r19,e1b8 <__udivdi3+0x248>
    e1a4:	2489883a 	add	r4,r4,r18
    e1a8:	80bfffc4 	addi	r2,r16,-1
    e1ac:	24800136 	bltu	r4,r18,e1b4 <__udivdi3+0x244>
    e1b0:	24c0d936 	bltu	r4,r19,e518 <__udivdi3+0x5a8>
    e1b4:	1021883a 	mov	r16,r2
    e1b8:	24e7c83a 	sub	r19,r4,r19
    e1bc:	9809883a 	mov	r4,r19
    e1c0:	a00b883a 	mov	r5,r20
    e1c4:	d8c00015 	stw	r3,0(sp)
    e1c8:	000ebe40 	call	ebe4 <__umodsi3>
    e1cc:	102d883a 	mov	r22,r2
    e1d0:	9809883a 	mov	r4,r19
    e1d4:	a00b883a 	mov	r5,r20
    e1d8:	000ebdc0 	call	ebdc <__udivsi3>
    e1dc:	b02c943a 	slli	r22,r22,16
    e1e0:	156b383a 	mul	r21,r2,r21
    e1e4:	8c7fffcc 	andi	r17,r17,65535
    e1e8:	b462b03a 	or	r17,r22,r17
    e1ec:	d8c00017 	ldw	r3,0(sp)
    e1f0:	8d40052e 	bgeu	r17,r21,e208 <__udivdi3+0x298>
    e1f4:	8ca3883a 	add	r17,r17,r18
    e1f8:	113fffc4 	addi	r4,r2,-1
    e1fc:	8c809a36 	bltu	r17,r18,e468 <__udivdi3+0x4f8>
    e200:	8d40992e 	bgeu	r17,r21,e468 <__udivdi3+0x4f8>
    e204:	10bfff84 	addi	r2,r2,-2
    e208:	8020943a 	slli	r16,r16,16
    e20c:	1404b03a 	or	r2,r2,r16
    e210:	00000206 	br	e21c <__udivdi3+0x2ac>
    e214:	0007883a 	mov	r3,zero
    e218:	0005883a 	mov	r2,zero
    e21c:	dfc00a17 	ldw	ra,40(sp)
    e220:	df000917 	ldw	fp,36(sp)
    e224:	ddc00817 	ldw	r23,32(sp)
    e228:	dd800717 	ldw	r22,28(sp)
    e22c:	dd400617 	ldw	r21,24(sp)
    e230:	dd000517 	ldw	r20,20(sp)
    e234:	dcc00417 	ldw	r19,16(sp)
    e238:	dc800317 	ldw	r18,12(sp)
    e23c:	dc400217 	ldw	r17,8(sp)
    e240:	dc000117 	ldw	r16,4(sp)
    e244:	dec00b04 	addi	sp,sp,44
    e248:	f800283a 	ret
    e24c:	00803fc4 	movi	r2,255
    e250:	11c0932e 	bgeu	r2,r7,e4a0 <__udivdi3+0x530>
    e254:	00c00204 	movi	r3,8
    e258:	180b883a 	mov	r5,r3
    e25c:	003f9c06 	br	e0d0 <__alt_mem_Flash_flash_data+0xf400e0d0>
    e260:	00804034 	movhi	r2,256
    e264:	10bfffc4 	addi	r2,r2,-1
    e268:	1180902e 	bgeu	r2,r6,e4ac <__udivdi3+0x53c>
    e26c:	00800604 	movi	r2,24
    e270:	1007883a 	mov	r3,r2
    e274:	003f5606 	br	dfd0 <__alt_mem_Flash_flash_data+0xf400dfd0>
    e278:	00803fc4 	movi	r2,255
    e27c:	1480912e 	bgeu	r2,r18,e4c4 <__udivdi3+0x554>
    e280:	00800204 	movi	r2,8
    e284:	1007883a 	mov	r3,r2
    e288:	003faa06 	br	e134 <__alt_mem_Flash_flash_data+0xf400e134>
    e28c:	30eed83a 	srl	r23,r6,r3
    e290:	3c8e983a 	sll	r7,r7,r18
    e294:	80f8d83a 	srl	fp,r16,r3
    e298:	98c6d83a 	srl	r3,r19,r3
    e29c:	3deeb03a 	or	r23,r7,r23
    e2a0:	b828d43a 	srli	r20,r23,16
    e2a4:	84a0983a 	sll	r16,r16,r18
    e2a8:	e009883a 	mov	r4,fp
    e2ac:	a00b883a 	mov	r5,r20
    e2b0:	80e2b03a 	or	r17,r16,r3
    e2b4:	34aa983a 	sll	r21,r6,r18
    e2b8:	000ebe40 	call	ebe4 <__umodsi3>
    e2bc:	e009883a 	mov	r4,fp
    e2c0:	a00b883a 	mov	r5,r20
    e2c4:	102d883a 	mov	r22,r2
    e2c8:	000ebdc0 	call	ebdc <__udivsi3>
    e2cc:	1021883a 	mov	r16,r2
    e2d0:	bf3fffcc 	andi	fp,r23,65535
    e2d4:	b004943a 	slli	r2,r22,16
    e2d8:	8808d43a 	srli	r4,r17,16
    e2dc:	872d383a 	mul	r22,r16,fp
    e2e0:	1104b03a 	or	r2,r2,r4
    e2e4:	1580042e 	bgeu	r2,r22,e2f8 <__udivdi3+0x388>
    e2e8:	15c5883a 	add	r2,r2,r23
    e2ec:	80ffffc4 	addi	r3,r16,-1
    e2f0:	15c0812e 	bgeu	r2,r23,e4f8 <__udivdi3+0x588>
    e2f4:	1821883a 	mov	r16,r3
    e2f8:	15adc83a 	sub	r22,r2,r22
    e2fc:	b009883a 	mov	r4,r22
    e300:	a00b883a 	mov	r5,r20
    e304:	000ebe40 	call	ebe4 <__umodsi3>
    e308:	a00b883a 	mov	r5,r20
    e30c:	b009883a 	mov	r4,r22
    e310:	d8800015 	stw	r2,0(sp)
    e314:	000ebdc0 	call	ebdc <__udivsi3>
    e318:	d8c00017 	ldw	r3,0(sp)
    e31c:	170b383a 	mul	r5,r2,fp
    e320:	8c7fffcc 	andi	r17,r17,65535
    e324:	1806943a 	slli	r3,r3,16
    e328:	1c46b03a 	or	r3,r3,r17
    e32c:	1940042e 	bgeu	r3,r5,e340 <__udivdi3+0x3d0>
    e330:	1dc7883a 	add	r3,r3,r23
    e334:	113fffc4 	addi	r4,r2,-1
    e338:	1dc06b2e 	bgeu	r3,r23,e4e8 <__udivdi3+0x578>
    e33c:	2005883a 	mov	r2,r4
    e340:	8020943a 	slli	r16,r16,16
    e344:	a9ffffcc 	andi	r7,r21,65535
    e348:	a82ad43a 	srli	r21,r21,16
    e34c:	1404b03a 	or	r2,r2,r16
    e350:	113fffcc 	andi	r4,r2,65535
    e354:	100cd43a 	srli	r6,r2,16
    e358:	21d3383a 	mul	r9,r4,r7
    e35c:	2549383a 	mul	r4,r4,r21
    e360:	31cf383a 	mul	r7,r6,r7
    e364:	4810d43a 	srli	r8,r9,16
    e368:	1947c83a 	sub	r3,r3,r5
    e36c:	3909883a 	add	r4,r7,r4
    e370:	2209883a 	add	r4,r4,r8
    e374:	354d383a 	mul	r6,r6,r21
    e378:	21c0022e 	bgeu	r4,r7,e384 <__udivdi3+0x414>
    e37c:	01400074 	movhi	r5,1
    e380:	314d883a 	add	r6,r6,r5
    e384:	202ad43a 	srli	r21,r4,16
    e388:	354d883a 	add	r6,r6,r21
    e38c:	19803f36 	bltu	r3,r6,e48c <__udivdi3+0x51c>
    e390:	19803926 	beq	r3,r6,e478 <__udivdi3+0x508>
    e394:	0007883a 	mov	r3,zero
    e398:	003fa006 	br	e21c <__alt_mem_Flash_flash_data+0xf400e21c>
    e39c:	90e4983a 	sll	r18,r18,r3
    e3a0:	80aad83a 	srl	r21,r16,r2
    e3a4:	80e0983a 	sll	r16,r16,r3
    e3a8:	9028d43a 	srli	r20,r18,16
    e3ac:	9884d83a 	srl	r2,r19,r2
    e3b0:	a809883a 	mov	r4,r21
    e3b4:	a00b883a 	mov	r5,r20
    e3b8:	80acb03a 	or	r22,r16,r2
    e3bc:	98e2983a 	sll	r17,r19,r3
    e3c0:	000ebe40 	call	ebe4 <__umodsi3>
    e3c4:	a809883a 	mov	r4,r21
    e3c8:	a00b883a 	mov	r5,r20
    e3cc:	1021883a 	mov	r16,r2
    e3d0:	000ebdc0 	call	ebdc <__udivsi3>
    e3d4:	957fffcc 	andi	r21,r18,65535
    e3d8:	8020943a 	slli	r16,r16,16
    e3dc:	b00ad43a 	srli	r5,r22,16
    e3e0:	1567383a 	mul	r19,r2,r21
    e3e4:	102f883a 	mov	r23,r2
    e3e8:	8148b03a 	or	r4,r16,r5
    e3ec:	24c0062e 	bgeu	r4,r19,e408 <__udivdi3+0x498>
    e3f0:	2489883a 	add	r4,r4,r18
    e3f4:	10bfffc4 	addi	r2,r2,-1
    e3f8:	24804536 	bltu	r4,r18,e510 <__udivdi3+0x5a0>
    e3fc:	24c0442e 	bgeu	r4,r19,e510 <__udivdi3+0x5a0>
    e400:	bdffff84 	addi	r23,r23,-2
    e404:	2489883a 	add	r4,r4,r18
    e408:	24e7c83a 	sub	r19,r4,r19
    e40c:	9809883a 	mov	r4,r19
    e410:	a00b883a 	mov	r5,r20
    e414:	000ebe40 	call	ebe4 <__umodsi3>
    e418:	1021883a 	mov	r16,r2
    e41c:	9809883a 	mov	r4,r19
    e420:	a00b883a 	mov	r5,r20
    e424:	000ebdc0 	call	ebdc <__udivsi3>
    e428:	8020943a 	slli	r16,r16,16
    e42c:	1007883a 	mov	r3,r2
    e430:	1545383a 	mul	r2,r2,r21
    e434:	b13fffcc 	andi	r4,r22,65535
    e438:	8108b03a 	or	r4,r16,r4
    e43c:	2080062e 	bgeu	r4,r2,e458 <__udivdi3+0x4e8>
    e440:	2489883a 	add	r4,r4,r18
    e444:	197fffc4 	addi	r5,r3,-1
    e448:	24802f36 	bltu	r4,r18,e508 <__udivdi3+0x598>
    e44c:	20802e2e 	bgeu	r4,r2,e508 <__udivdi3+0x598>
    e450:	18ffff84 	addi	r3,r3,-2
    e454:	2489883a 	add	r4,r4,r18
    e458:	b82e943a 	slli	r23,r23,16
    e45c:	20a1c83a 	sub	r16,r4,r2
    e460:	1dc6b03a 	or	r3,r3,r23
    e464:	003f4006 	br	e168 <__alt_mem_Flash_flash_data+0xf400e168>
    e468:	2005883a 	mov	r2,r4
    e46c:	003f6606 	br	e208 <__alt_mem_Flash_flash_data+0xf400e208>
    e470:	1805883a 	mov	r2,r3
    e474:	003f0a06 	br	e0a0 <__alt_mem_Flash_flash_data+0xf400e0a0>
    e478:	2006943a 	slli	r3,r4,16
    e47c:	9c88983a 	sll	r4,r19,r18
    e480:	4a7fffcc 	andi	r9,r9,65535
    e484:	1a47883a 	add	r3,r3,r9
    e488:	20ffc22e 	bgeu	r4,r3,e394 <__alt_mem_Flash_flash_data+0xf400e394>
    e48c:	10bfffc4 	addi	r2,r2,-1
    e490:	003fc006 	br	e394 <__alt_mem_Flash_flash_data+0xf400e394>
    e494:	00c00404 	movi	r3,16
    e498:	180b883a 	mov	r5,r3
    e49c:	003f0c06 	br	e0d0 <__alt_mem_Flash_flash_data+0xf400e0d0>
    e4a0:	0007883a 	mov	r3,zero
    e4a4:	000b883a 	mov	r5,zero
    e4a8:	003f0906 	br	e0d0 <__alt_mem_Flash_flash_data+0xf400e0d0>
    e4ac:	00800404 	movi	r2,16
    e4b0:	1007883a 	mov	r3,r2
    e4b4:	003ec606 	br	dfd0 <__alt_mem_Flash_flash_data+0xf400dfd0>
    e4b8:	00800404 	movi	r2,16
    e4bc:	1007883a 	mov	r3,r2
    e4c0:	003f1c06 	br	e134 <__alt_mem_Flash_flash_data+0xf400e134>
    e4c4:	0005883a 	mov	r2,zero
    e4c8:	0007883a 	mov	r3,zero
    e4cc:	003f1906 	br	e134 <__alt_mem_Flash_flash_data+0xf400e134>
    e4d0:	0005883a 	mov	r2,zero
    e4d4:	0007883a 	mov	r3,zero
    e4d8:	003ebd06 	br	dfd0 <__alt_mem_Flash_flash_data+0xf400dfd0>
    e4dc:	0007883a 	mov	r3,zero
    e4e0:	00800044 	movi	r2,1
    e4e4:	003f4d06 	br	e21c <__alt_mem_Flash_flash_data+0xf400e21c>
    e4e8:	197f942e 	bgeu	r3,r5,e33c <__alt_mem_Flash_flash_data+0xf400e33c>
    e4ec:	10bfff84 	addi	r2,r2,-2
    e4f0:	1dc7883a 	add	r3,r3,r23
    e4f4:	003f9206 	br	e340 <__alt_mem_Flash_flash_data+0xf400e340>
    e4f8:	15bf7e2e 	bgeu	r2,r22,e2f4 <__alt_mem_Flash_flash_data+0xf400e2f4>
    e4fc:	843fff84 	addi	r16,r16,-2
    e500:	15c5883a 	add	r2,r2,r23
    e504:	003f7c06 	br	e2f8 <__alt_mem_Flash_flash_data+0xf400e2f8>
    e508:	2807883a 	mov	r3,r5
    e50c:	003fd206 	br	e458 <__alt_mem_Flash_flash_data+0xf400e458>
    e510:	102f883a 	mov	r23,r2
    e514:	003fbc06 	br	e408 <__alt_mem_Flash_flash_data+0xf400e408>
    e518:	843fff84 	addi	r16,r16,-2
    e51c:	2489883a 	add	r4,r4,r18
    e520:	003f2506 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    e524:	843fff84 	addi	r16,r16,-2
    e528:	1485883a 	add	r2,r2,r18
    e52c:	003eca06 	br	e058 <__alt_mem_Flash_flash_data+0xf400e058>

0000e530 <__umoddi3>:
    e530:	defff404 	addi	sp,sp,-48
    e534:	ddc00915 	stw	r23,36(sp)
    e538:	dc400315 	stw	r17,12(sp)
    e53c:	dc000215 	stw	r16,8(sp)
    e540:	dfc00b15 	stw	ra,44(sp)
    e544:	df000a15 	stw	fp,40(sp)
    e548:	dd800815 	stw	r22,32(sp)
    e54c:	dd400715 	stw	r21,28(sp)
    e550:	dd000615 	stw	r20,24(sp)
    e554:	dcc00515 	stw	r19,20(sp)
    e558:	dc800415 	stw	r18,16(sp)
    e55c:	2021883a 	mov	r16,r4
    e560:	2823883a 	mov	r17,r5
    e564:	282f883a 	mov	r23,r5
    e568:	3800381e 	bne	r7,zero,e64c <__umoddi3+0x11c>
    e56c:	3027883a 	mov	r19,r6
    e570:	2029883a 	mov	r20,r4
    e574:	29804e2e 	bgeu	r5,r6,e6b0 <__umoddi3+0x180>
    e578:	00bfffd4 	movui	r2,65535
    e57c:	11809c36 	bltu	r2,r6,e7f0 <__umoddi3+0x2c0>
    e580:	00803fc4 	movi	r2,255
    e584:	11813b2e 	bgeu	r2,r6,ea74 <__umoddi3+0x544>
    e588:	01400204 	movi	r5,8
    e58c:	2805883a 	mov	r2,r5
    e590:	314ad83a 	srl	r5,r6,r5
    e594:	00c000b4 	movhi	r3,2
    e598:	18fb6a04 	addi	r3,r3,-4696
    e59c:	194b883a 	add	r5,r3,r5
    e5a0:	29000003 	ldbu	r4,0(r5)
    e5a4:	2089883a 	add	r4,r4,r2
    e5a8:	00800804 	movi	r2,32
    e5ac:	1105c83a 	sub	r2,r2,r4
    e5b0:	1000ec26 	beq	r2,zero,e964 <__umoddi3+0x434>
    e5b4:	88a2983a 	sll	r17,r17,r2
    e5b8:	8108d83a 	srl	r4,r16,r4
    e5bc:	30a6983a 	sll	r19,r6,r2
    e5c0:	80a8983a 	sll	r20,r16,r2
    e5c4:	1025883a 	mov	r18,r2
    e5c8:	892eb03a 	or	r23,r17,r4
    e5cc:	982cd43a 	srli	r22,r19,16
    e5d0:	b809883a 	mov	r4,r23
    e5d4:	9d7fffcc 	andi	r21,r19,65535
    e5d8:	b00b883a 	mov	r5,r22
    e5dc:	000ebe40 	call	ebe4 <__umodsi3>
    e5e0:	b809883a 	mov	r4,r23
    e5e4:	b00b883a 	mov	r5,r22
    e5e8:	1021883a 	mov	r16,r2
    e5ec:	000ebdc0 	call	ebdc <__udivsi3>
    e5f0:	8020943a 	slli	r16,r16,16
    e5f4:	a00cd43a 	srli	r6,r20,16
    e5f8:	1545383a 	mul	r2,r2,r21
    e5fc:	8188b03a 	or	r4,r16,r6
    e600:	2080042e 	bgeu	r4,r2,e614 <__umoddi3+0xe4>
    e604:	24c9883a 	add	r4,r4,r19
    e608:	24c00236 	bltu	r4,r19,e614 <__umoddi3+0xe4>
    e60c:	2080012e 	bgeu	r4,r2,e614 <__umoddi3+0xe4>
    e610:	24c9883a 	add	r4,r4,r19
    e614:	20a3c83a 	sub	r17,r4,r2
    e618:	8809883a 	mov	r4,r17
    e61c:	b00b883a 	mov	r5,r22
    e620:	000ebe40 	call	ebe4 <__umodsi3>
    e624:	8809883a 	mov	r4,r17
    e628:	b00b883a 	mov	r5,r22
    e62c:	1021883a 	mov	r16,r2
    e630:	000ebdc0 	call	ebdc <__udivsi3>
    e634:	8006943a 	slli	r3,r16,16
    e638:	1545383a 	mul	r2,r2,r21
    e63c:	a13fffcc 	andi	r4,r20,65535
    e640:	1906b03a 	or	r3,r3,r4
    e644:	1880532e 	bgeu	r3,r2,e794 <__umoddi3+0x264>
    e648:	00004e06 	br	e784 <__umoddi3+0x254>
    e64c:	29c05536 	bltu	r5,r7,e7a4 <__umoddi3+0x274>
    e650:	00bfffd4 	movui	r2,65535
    e654:	11c0612e 	bgeu	r2,r7,e7dc <__umoddi3+0x2ac>
    e658:	00804034 	movhi	r2,256
    e65c:	10bfffc4 	addi	r2,r2,-1
    e660:	11c0f82e 	bgeu	r2,r7,ea44 <__umoddi3+0x514>
    e664:	01400604 	movi	r5,24
    e668:	282b883a 	mov	r21,r5
    e66c:	394ad83a 	srl	r5,r7,r5
    e670:	00c000b4 	movhi	r3,2
    e674:	18fb6a04 	addi	r3,r3,-4696
    e678:	194b883a 	add	r5,r3,r5
    e67c:	28800003 	ldbu	r2,0(r5)
    e680:	00c00804 	movi	r3,32
    e684:	156b883a 	add	r21,r2,r21
    e688:	1d69c83a 	sub	r20,r3,r21
    e68c:	a000631e 	bne	r20,zero,e81c <__umoddi3+0x2ec>
    e690:	3c400136 	bltu	r7,r17,e698 <__umoddi3+0x168>
    e694:	81810436 	bltu	r16,r6,eaa8 <__umoddi3+0x578>
    e698:	8185c83a 	sub	r2,r16,r6
    e69c:	89e3c83a 	sub	r17,r17,r7
    e6a0:	8087803a 	cmpltu	r3,r16,r2
    e6a4:	88efc83a 	sub	r23,r17,r3
    e6a8:	b807883a 	mov	r3,r23
    e6ac:	00003f06 	br	e7ac <__umoddi3+0x27c>
    e6b0:	3000041e 	bne	r6,zero,e6c4 <__umoddi3+0x194>
    e6b4:	01000044 	movi	r4,1
    e6b8:	000b883a 	mov	r5,zero
    e6bc:	000ebdc0 	call	ebdc <__udivsi3>
    e6c0:	1027883a 	mov	r19,r2
    e6c4:	00bfffd4 	movui	r2,65535
    e6c8:	14c04f2e 	bgeu	r2,r19,e808 <__umoddi3+0x2d8>
    e6cc:	00804034 	movhi	r2,256
    e6d0:	10bfffc4 	addi	r2,r2,-1
    e6d4:	14c0e42e 	bgeu	r2,r19,ea68 <__umoddi3+0x538>
    e6d8:	00800604 	movi	r2,24
    e6dc:	1007883a 	mov	r3,r2
    e6e0:	9884d83a 	srl	r2,r19,r2
    e6e4:	010000b4 	movhi	r4,2
    e6e8:	213b6a04 	addi	r4,r4,-4696
    e6ec:	2085883a 	add	r2,r4,r2
    e6f0:	11000003 	ldbu	r4,0(r2)
    e6f4:	00800804 	movi	r2,32
    e6f8:	20c7883a 	add	r3,r4,r3
    e6fc:	10c5c83a 	sub	r2,r2,r3
    e700:	10009a1e 	bne	r2,zero,e96c <__umoddi3+0x43c>
    e704:	982cd43a 	srli	r22,r19,16
    e708:	8ce3c83a 	sub	r17,r17,r19
    e70c:	9c3fffcc 	andi	r16,r19,65535
    e710:	0025883a 	mov	r18,zero
    e714:	8809883a 	mov	r4,r17
    e718:	b00b883a 	mov	r5,r22
    e71c:	000ebe40 	call	ebe4 <__umodsi3>
    e720:	8809883a 	mov	r4,r17
    e724:	b00b883a 	mov	r5,r22
    e728:	102b883a 	mov	r21,r2
    e72c:	000ebdc0 	call	ebdc <__udivsi3>
    e730:	a806943a 	slli	r3,r21,16
    e734:	a008d43a 	srli	r4,r20,16
    e738:	1405383a 	mul	r2,r2,r16
    e73c:	190cb03a 	or	r6,r3,r4
    e740:	3080032e 	bgeu	r6,r2,e750 <__umoddi3+0x220>
    e744:	34cd883a 	add	r6,r6,r19
    e748:	34c00136 	bltu	r6,r19,e750 <__umoddi3+0x220>
    e74c:	3080d436 	bltu	r6,r2,eaa0 <__umoddi3+0x570>
    e750:	30abc83a 	sub	r21,r6,r2
    e754:	a809883a 	mov	r4,r21
    e758:	b00b883a 	mov	r5,r22
    e75c:	000ebe40 	call	ebe4 <__umodsi3>
    e760:	1023883a 	mov	r17,r2
    e764:	a809883a 	mov	r4,r21
    e768:	b00b883a 	mov	r5,r22
    e76c:	000ebdc0 	call	ebdc <__udivsi3>
    e770:	8822943a 	slli	r17,r17,16
    e774:	1405383a 	mul	r2,r2,r16
    e778:	a13fffcc 	andi	r4,r20,65535
    e77c:	8906b03a 	or	r3,r17,r4
    e780:	1880042e 	bgeu	r3,r2,e794 <__umoddi3+0x264>
    e784:	1cc7883a 	add	r3,r3,r19
    e788:	1cc00236 	bltu	r3,r19,e794 <__umoddi3+0x264>
    e78c:	1880012e 	bgeu	r3,r2,e794 <__umoddi3+0x264>
    e790:	1cc7883a 	add	r3,r3,r19
    e794:	1887c83a 	sub	r3,r3,r2
    e798:	1c84d83a 	srl	r2,r3,r18
    e79c:	0007883a 	mov	r3,zero
    e7a0:	00000206 	br	e7ac <__umoddi3+0x27c>
    e7a4:	2005883a 	mov	r2,r4
    e7a8:	2807883a 	mov	r3,r5
    e7ac:	dfc00b17 	ldw	ra,44(sp)
    e7b0:	df000a17 	ldw	fp,40(sp)
    e7b4:	ddc00917 	ldw	r23,36(sp)
    e7b8:	dd800817 	ldw	r22,32(sp)
    e7bc:	dd400717 	ldw	r21,28(sp)
    e7c0:	dd000617 	ldw	r20,24(sp)
    e7c4:	dcc00517 	ldw	r19,20(sp)
    e7c8:	dc800417 	ldw	r18,16(sp)
    e7cc:	dc400317 	ldw	r17,12(sp)
    e7d0:	dc000217 	ldw	r16,8(sp)
    e7d4:	dec00c04 	addi	sp,sp,48
    e7d8:	f800283a 	ret
    e7dc:	00803fc4 	movi	r2,255
    e7e0:	11c0952e 	bgeu	r2,r7,ea38 <__umoddi3+0x508>
    e7e4:	01400204 	movi	r5,8
    e7e8:	282b883a 	mov	r21,r5
    e7ec:	003f9f06 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    e7f0:	00804034 	movhi	r2,256
    e7f4:	10bfffc4 	addi	r2,r2,-1
    e7f8:	1180952e 	bgeu	r2,r6,ea50 <__umoddi3+0x520>
    e7fc:	01400604 	movi	r5,24
    e800:	2805883a 	mov	r2,r5
    e804:	003f6206 	br	e590 <__alt_mem_Flash_flash_data+0xf400e590>
    e808:	00803fc4 	movi	r2,255
    e80c:	14c0932e 	bgeu	r2,r19,ea5c <__umoddi3+0x52c>
    e810:	00800204 	movi	r2,8
    e814:	1007883a 	mov	r3,r2
    e818:	003fb106 	br	e6e0 <__alt_mem_Flash_flash_data+0xf400e6e0>
    e81c:	3548d83a 	srl	r4,r6,r21
    e820:	3d0e983a 	sll	r7,r7,r20
    e824:	8d10983a 	sll	r8,r17,r20
    e828:	8d6cd83a 	srl	r22,r17,r21
    e82c:	3922b03a 	or	r17,r7,r4
    e830:	882ed43a 	srli	r23,r17,16
    e834:	8564d83a 	srl	r18,r16,r21
    e838:	b009883a 	mov	r4,r22
    e83c:	b80b883a 	mov	r5,r23
    e840:	44a4b03a 	or	r18,r8,r18
    e844:	3526983a 	sll	r19,r6,r20
    e848:	000ebe40 	call	ebe4 <__umodsi3>
    e84c:	b009883a 	mov	r4,r22
    e850:	b80b883a 	mov	r5,r23
    e854:	1039883a 	mov	fp,r2
    e858:	000ebdc0 	call	ebdc <__udivsi3>
    e85c:	102d883a 	mov	r22,r2
    e860:	8a3fffcc 	andi	r8,r17,65535
    e864:	e004943a 	slli	r2,fp,16
    e868:	900cd43a 	srli	r6,r18,16
    e86c:	b239383a 	mul	fp,r22,r8
    e870:	8520983a 	sll	r16,r16,r20
    e874:	118ab03a 	or	r5,r2,r6
    e878:	2f00042e 	bgeu	r5,fp,e88c <__umoddi3+0x35c>
    e87c:	2c4b883a 	add	r5,r5,r17
    e880:	b0bfffc4 	addi	r2,r22,-1
    e884:	2c40822e 	bgeu	r5,r17,ea90 <__umoddi3+0x560>
    e888:	102d883a 	mov	r22,r2
    e88c:	2f39c83a 	sub	fp,r5,fp
    e890:	e009883a 	mov	r4,fp
    e894:	b80b883a 	mov	r5,r23
    e898:	da000115 	stw	r8,4(sp)
    e89c:	000ebe40 	call	ebe4 <__umodsi3>
    e8a0:	e009883a 	mov	r4,fp
    e8a4:	b80b883a 	mov	r5,r23
    e8a8:	d8800015 	stw	r2,0(sp)
    e8ac:	000ebdc0 	call	ebdc <__udivsi3>
    e8b0:	d9800017 	ldw	r6,0(sp)
    e8b4:	da000117 	ldw	r8,4(sp)
    e8b8:	94bfffcc 	andi	r18,r18,65535
    e8bc:	300c943a 	slli	r6,r6,16
    e8c0:	1209383a 	mul	r4,r2,r8
    e8c4:	3490b03a 	or	r8,r6,r18
    e8c8:	4100042e 	bgeu	r8,r4,e8dc <__umoddi3+0x3ac>
    e8cc:	4451883a 	add	r8,r8,r17
    e8d0:	10ffffc4 	addi	r3,r2,-1
    e8d4:	44406a2e 	bgeu	r8,r17,ea80 <__umoddi3+0x550>
    e8d8:	1805883a 	mov	r2,r3
    e8dc:	b012943a 	slli	r9,r22,16
    e8e0:	9abfffcc 	andi	r10,r19,65535
    e8e4:	980ed43a 	srli	r7,r19,16
    e8e8:	124ab03a 	or	r5,r2,r9
    e8ec:	2a7fffcc 	andi	r9,r5,65535
    e8f0:	280ad43a 	srli	r5,r5,16
    e8f4:	4a8d383a 	mul	r6,r9,r10
    e8f8:	49d3383a 	mul	r9,r9,r7
    e8fc:	2a95383a 	mul	r10,r5,r10
    e900:	3004d43a 	srli	r2,r6,16
    e904:	4111c83a 	sub	r8,r8,r4
    e908:	5253883a 	add	r9,r10,r9
    e90c:	4893883a 	add	r9,r9,r2
    e910:	29cb383a 	mul	r5,r5,r7
    e914:	4a80022e 	bgeu	r9,r10,e920 <__umoddi3+0x3f0>
    e918:	00800074 	movhi	r2,1
    e91c:	288b883a 	add	r5,r5,r2
    e920:	4808d43a 	srli	r4,r9,16
    e924:	4812943a 	slli	r9,r9,16
    e928:	31bfffcc 	andi	r6,r6,65535
    e92c:	290b883a 	add	r5,r5,r4
    e930:	498d883a 	add	r6,r9,r6
    e934:	41403a36 	bltu	r8,r5,ea20 <__umoddi3+0x4f0>
    e938:	41405d26 	beq	r8,r5,eab0 <__umoddi3+0x580>
    e93c:	4149c83a 	sub	r4,r8,r5
    e940:	300f883a 	mov	r7,r6
    e944:	81cfc83a 	sub	r7,r16,r7
    e948:	81c7803a 	cmpltu	r3,r16,r7
    e94c:	20c7c83a 	sub	r3,r4,r3
    e950:	1d44983a 	sll	r2,r3,r21
    e954:	3d0ed83a 	srl	r7,r7,r20
    e958:	1d06d83a 	srl	r3,r3,r20
    e95c:	11c4b03a 	or	r2,r2,r7
    e960:	003f9206 	br	e7ac <__alt_mem_Flash_flash_data+0xf400e7ac>
    e964:	0025883a 	mov	r18,zero
    e968:	003f1806 	br	e5cc <__alt_mem_Flash_flash_data+0xf400e5cc>
    e96c:	98a6983a 	sll	r19,r19,r2
    e970:	88e8d83a 	srl	r20,r17,r3
    e974:	80c6d83a 	srl	r3,r16,r3
    e978:	982cd43a 	srli	r22,r19,16
    e97c:	88a2983a 	sll	r17,r17,r2
    e980:	a009883a 	mov	r4,r20
    e984:	b00b883a 	mov	r5,r22
    e988:	88eab03a 	or	r21,r17,r3
    e98c:	1025883a 	mov	r18,r2
    e990:	000ebe40 	call	ebe4 <__umodsi3>
    e994:	a009883a 	mov	r4,r20
    e998:	b00b883a 	mov	r5,r22
    e99c:	1023883a 	mov	r17,r2
    e9a0:	000ebdc0 	call	ebdc <__udivsi3>
    e9a4:	9f3fffcc 	andi	fp,r19,65535
    e9a8:	8822943a 	slli	r17,r17,16
    e9ac:	a80ad43a 	srli	r5,r21,16
    e9b0:	1705383a 	mul	r2,r2,fp
    e9b4:	84a8983a 	sll	r20,r16,r18
    e9b8:	8948b03a 	or	r4,r17,r5
    e9bc:	2080042e 	bgeu	r4,r2,e9d0 <__umoddi3+0x4a0>
    e9c0:	24c9883a 	add	r4,r4,r19
    e9c4:	24c00236 	bltu	r4,r19,e9d0 <__umoddi3+0x4a0>
    e9c8:	2080012e 	bgeu	r4,r2,e9d0 <__umoddi3+0x4a0>
    e9cc:	24c9883a 	add	r4,r4,r19
    e9d0:	20afc83a 	sub	r23,r4,r2
    e9d4:	b809883a 	mov	r4,r23
    e9d8:	b00b883a 	mov	r5,r22
    e9dc:	000ebe40 	call	ebe4 <__umodsi3>
    e9e0:	1023883a 	mov	r17,r2
    e9e4:	b809883a 	mov	r4,r23
    e9e8:	b00b883a 	mov	r5,r22
    e9ec:	000ebdc0 	call	ebdc <__udivsi3>
    e9f0:	8822943a 	slli	r17,r17,16
    e9f4:	1705383a 	mul	r2,r2,fp
    e9f8:	a93fffcc 	andi	r4,r21,65535
    e9fc:	8908b03a 	or	r4,r17,r4
    ea00:	2080042e 	bgeu	r4,r2,ea14 <__umoddi3+0x4e4>
    ea04:	24c9883a 	add	r4,r4,r19
    ea08:	24c00236 	bltu	r4,r19,ea14 <__umoddi3+0x4e4>
    ea0c:	2080012e 	bgeu	r4,r2,ea14 <__umoddi3+0x4e4>
    ea10:	24c9883a 	add	r4,r4,r19
    ea14:	20a3c83a 	sub	r17,r4,r2
    ea18:	e021883a 	mov	r16,fp
    ea1c:	003f3d06 	br	e714 <__alt_mem_Flash_flash_data+0xf400e714>
    ea20:	34cfc83a 	sub	r7,r6,r19
    ea24:	2c4bc83a 	sub	r5,r5,r17
    ea28:	31cd803a 	cmpltu	r6,r6,r7
    ea2c:	298dc83a 	sub	r6,r5,r6
    ea30:	4189c83a 	sub	r4,r8,r6
    ea34:	003fc306 	br	e944 <__alt_mem_Flash_flash_data+0xf400e944>
    ea38:	000b883a 	mov	r5,zero
    ea3c:	002b883a 	mov	r21,zero
    ea40:	003f0a06 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    ea44:	01400404 	movi	r5,16
    ea48:	282b883a 	mov	r21,r5
    ea4c:	003f0706 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    ea50:	01400404 	movi	r5,16
    ea54:	2805883a 	mov	r2,r5
    ea58:	003ecd06 	br	e590 <__alt_mem_Flash_flash_data+0xf400e590>
    ea5c:	0005883a 	mov	r2,zero
    ea60:	0007883a 	mov	r3,zero
    ea64:	003f1e06 	br	e6e0 <__alt_mem_Flash_flash_data+0xf400e6e0>
    ea68:	00800404 	movi	r2,16
    ea6c:	1007883a 	mov	r3,r2
    ea70:	003f1b06 	br	e6e0 <__alt_mem_Flash_flash_data+0xf400e6e0>
    ea74:	000b883a 	mov	r5,zero
    ea78:	0005883a 	mov	r2,zero
    ea7c:	003ec406 	br	e590 <__alt_mem_Flash_flash_data+0xf400e590>
    ea80:	413f952e 	bgeu	r8,r4,e8d8 <__alt_mem_Flash_flash_data+0xf400e8d8>
    ea84:	10bfff84 	addi	r2,r2,-2
    ea88:	4451883a 	add	r8,r8,r17
    ea8c:	003f9306 	br	e8dc <__alt_mem_Flash_flash_data+0xf400e8dc>
    ea90:	2f3f7d2e 	bgeu	r5,fp,e888 <__alt_mem_Flash_flash_data+0xf400e888>
    ea94:	b5bfff84 	addi	r22,r22,-2
    ea98:	2c4b883a 	add	r5,r5,r17
    ea9c:	003f7b06 	br	e88c <__alt_mem_Flash_flash_data+0xf400e88c>
    eaa0:	34cd883a 	add	r6,r6,r19
    eaa4:	003f2a06 	br	e750 <__alt_mem_Flash_flash_data+0xf400e750>
    eaa8:	8005883a 	mov	r2,r16
    eaac:	003efe06 	br	e6a8 <__alt_mem_Flash_flash_data+0xf400e6a8>
    eab0:	81bfdb36 	bltu	r16,r6,ea20 <__alt_mem_Flash_flash_data+0xf400ea20>
    eab4:	300f883a 	mov	r7,r6
    eab8:	0009883a 	mov	r4,zero
    eabc:	003fa106 	br	e944 <__alt_mem_Flash_flash_data+0xf400e944>

0000eac0 <udivmodsi4>:
    eac0:	2900182e 	bgeu	r5,r4,eb24 <udivmodsi4+0x64>
    eac4:	28001716 	blt	r5,zero,eb24 <udivmodsi4+0x64>
    eac8:	00800804 	movi	r2,32
    eacc:	00c00044 	movi	r3,1
    ead0:	00000206 	br	eadc <udivmodsi4+0x1c>
    ead4:	10001126 	beq	r2,zero,eb1c <udivmodsi4+0x5c>
    ead8:	28000516 	blt	r5,zero,eaf0 <udivmodsi4+0x30>
    eadc:	294b883a 	add	r5,r5,r5
    eae0:	10bfffc4 	addi	r2,r2,-1
    eae4:	18c7883a 	add	r3,r3,r3
    eae8:	293ffa36 	bltu	r5,r4,ead4 <__alt_mem_Flash_flash_data+0xf400ead4>
    eaec:	18000b26 	beq	r3,zero,eb1c <udivmodsi4+0x5c>
    eaf0:	0005883a 	mov	r2,zero
    eaf4:	21400236 	bltu	r4,r5,eb00 <udivmodsi4+0x40>
    eaf8:	2149c83a 	sub	r4,r4,r5
    eafc:	10c4b03a 	or	r2,r2,r3
    eb00:	1806d07a 	srli	r3,r3,1
    eb04:	280ad07a 	srli	r5,r5,1
    eb08:	183ffa1e 	bne	r3,zero,eaf4 <__alt_mem_Flash_flash_data+0xf400eaf4>
    eb0c:	3000011e 	bne	r6,zero,eb14 <udivmodsi4+0x54>
    eb10:	f800283a 	ret
    eb14:	2005883a 	mov	r2,r4
    eb18:	f800283a 	ret
    eb1c:	0005883a 	mov	r2,zero
    eb20:	003ffa06 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    eb24:	00c00044 	movi	r3,1
    eb28:	003ff106 	br	eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>

0000eb2c <__divsi3>:
    eb2c:	defffe04 	addi	sp,sp,-8
    eb30:	dfc00115 	stw	ra,4(sp)
    eb34:	dc000015 	stw	r16,0(sp)
    eb38:	20000b16 	blt	r4,zero,eb68 <__divsi3+0x3c>
    eb3c:	0021883a 	mov	r16,zero
    eb40:	28000c16 	blt	r5,zero,eb74 <__divsi3+0x48>
    eb44:	000d883a 	mov	r6,zero
    eb48:	000eac00 	call	eac0 <udivmodsi4>
    eb4c:	0407c83a 	sub	r3,zero,r16
    eb50:	1884f03a 	xor	r2,r3,r2
    eb54:	1405883a 	add	r2,r2,r16
    eb58:	dfc00117 	ldw	ra,4(sp)
    eb5c:	dc000017 	ldw	r16,0(sp)
    eb60:	dec00204 	addi	sp,sp,8
    eb64:	f800283a 	ret
    eb68:	0109c83a 	sub	r4,zero,r4
    eb6c:	04000044 	movi	r16,1
    eb70:	283ff40e 	bge	r5,zero,eb44 <__alt_mem_Flash_flash_data+0xf400eb44>
    eb74:	014bc83a 	sub	r5,zero,r5
    eb78:	8400005c 	xori	r16,r16,1
    eb7c:	003ff106 	br	eb44 <__alt_mem_Flash_flash_data+0xf400eb44>

0000eb80 <__modsi3>:
    eb80:	defffd04 	addi	sp,sp,-12
    eb84:	dfc00215 	stw	ra,8(sp)
    eb88:	dc400115 	stw	r17,4(sp)
    eb8c:	dc000015 	stw	r16,0(sp)
    eb90:	20000c16 	blt	r4,zero,ebc4 <__modsi3+0x44>
    eb94:	0023883a 	mov	r17,zero
    eb98:	0021883a 	mov	r16,zero
    eb9c:	28000d16 	blt	r5,zero,ebd4 <__modsi3+0x54>
    eba0:	01800044 	movi	r6,1
    eba4:	000eac00 	call	eac0 <udivmodsi4>
    eba8:	1404f03a 	xor	r2,r2,r16
    ebac:	8885883a 	add	r2,r17,r2
    ebb0:	dfc00217 	ldw	ra,8(sp)
    ebb4:	dc400117 	ldw	r17,4(sp)
    ebb8:	dc000017 	ldw	r16,0(sp)
    ebbc:	dec00304 	addi	sp,sp,12
    ebc0:	f800283a 	ret
    ebc4:	0109c83a 	sub	r4,zero,r4
    ebc8:	04400044 	movi	r17,1
    ebcc:	043fffc4 	movi	r16,-1
    ebd0:	283ff30e 	bge	r5,zero,eba0 <__alt_mem_Flash_flash_data+0xf400eba0>
    ebd4:	014bc83a 	sub	r5,zero,r5
    ebd8:	003ff106 	br	eba0 <__alt_mem_Flash_flash_data+0xf400eba0>

0000ebdc <__udivsi3>:
    ebdc:	000d883a 	mov	r6,zero
    ebe0:	000eac01 	jmpi	eac0 <udivmodsi4>

0000ebe4 <__umodsi3>:
    ebe4:	01800044 	movi	r6,1
    ebe8:	000eac01 	jmpi	eac0 <udivmodsi4>

0000ebec <__adddf3>:
    ebec:	02000434 	movhi	r8,16
    ebf0:	423fffc4 	addi	r8,r8,-1
    ebf4:	defffb04 	addi	sp,sp,-20
    ebf8:	2a12703a 	and	r9,r5,r8
    ebfc:	2806d7fa 	srli	r3,r5,31
    ec00:	3a10703a 	and	r8,r7,r8
    ec04:	3804d53a 	srli	r2,r7,20
    ec08:	3014d77a 	srli	r10,r6,29
    ec0c:	dc000015 	stw	r16,0(sp)
    ec10:	481290fa 	slli	r9,r9,3
    ec14:	2820d53a 	srli	r16,r5,20
    ec18:	401090fa 	slli	r8,r8,3
    ec1c:	200ad77a 	srli	r5,r4,29
    ec20:	380ed7fa 	srli	r7,r7,31
    ec24:	dc800215 	stw	r18,8(sp)
    ec28:	dc400115 	stw	r17,4(sp)
    ec2c:	dfc00415 	stw	ra,16(sp)
    ec30:	dcc00315 	stw	r19,12(sp)
    ec34:	1c803fcc 	andi	r18,r3,255
    ec38:	8401ffcc 	andi	r16,r16,2047
    ec3c:	494ab03a 	or	r5,r9,r5
    ec40:	202290fa 	slli	r17,r4,3
    ec44:	1081ffcc 	andi	r2,r2,2047
    ec48:	4290b03a 	or	r8,r8,r10
    ec4c:	300c90fa 	slli	r6,r6,3
    ec50:	91c07026 	beq	r18,r7,ee14 <__adddf3+0x228>
    ec54:	8087c83a 	sub	r3,r16,r2
    ec58:	00c0b30e 	bge	zero,r3,ef28 <__adddf3+0x33c>
    ec5c:	10002a1e 	bne	r2,zero,ed08 <__adddf3+0x11c>
    ec60:	4184b03a 	or	r2,r8,r6
    ec64:	1000991e 	bne	r2,zero,eecc <__adddf3+0x2e0>
    ec68:	888001cc 	andi	r2,r17,7
    ec6c:	10005b26 	beq	r2,zero,eddc <__adddf3+0x1f0>
    ec70:	88c003cc 	andi	r3,r17,15
    ec74:	00800104 	movi	r2,4
    ec78:	18805826 	beq	r3,r2,eddc <__adddf3+0x1f0>
    ec7c:	89800104 	addi	r6,r17,4
    ec80:	3463803a 	cmpltu	r17,r6,r17
    ec84:	2c4b883a 	add	r5,r5,r17
    ec88:	2880202c 	andhi	r2,r5,128
    ec8c:	9007883a 	mov	r3,r18
    ec90:	3023883a 	mov	r17,r6
    ec94:	10005426 	beq	r2,zero,ede8 <__adddf3+0x1fc>
    ec98:	84000044 	addi	r16,r16,1
    ec9c:	0081ffc4 	movi	r2,2047
    eca0:	8080c126 	beq	r16,r2,efa8 <__adddf3+0x3bc>
    eca4:	013fe034 	movhi	r4,65408
    eca8:	213fffc4 	addi	r4,r4,-1
    ecac:	290a703a 	and	r5,r5,r4
    ecb0:	2804977a 	slli	r2,r5,29
    ecb4:	280a927a 	slli	r5,r5,9
    ecb8:	8822d0fa 	srli	r17,r17,3
    ecbc:	8401ffcc 	andi	r16,r16,2047
    ecc0:	2808d33a 	srli	r4,r5,12
    ecc4:	1444b03a 	or	r2,r2,r17
    ecc8:	8401ffcc 	andi	r16,r16,2047
    eccc:	800a953a 	slli	r5,r16,20
    ecd0:	18c03fcc 	andi	r3,r3,255
    ecd4:	04000434 	movhi	r16,16
    ecd8:	180697fa 	slli	r3,r3,31
    ecdc:	843fffc4 	addi	r16,r16,-1
    ece0:	2420703a 	and	r16,r4,r16
    ece4:	8160b03a 	or	r16,r16,r5
    ece8:	80c6b03a 	or	r3,r16,r3
    ecec:	dfc00417 	ldw	ra,16(sp)
    ecf0:	dcc00317 	ldw	r19,12(sp)
    ecf4:	dc800217 	ldw	r18,8(sp)
    ecf8:	dc400117 	ldw	r17,4(sp)
    ecfc:	dc000017 	ldw	r16,0(sp)
    ed00:	dec00504 	addi	sp,sp,20
    ed04:	f800283a 	ret
    ed08:	0081ffc4 	movi	r2,2047
    ed0c:	80bfd626 	beq	r16,r2,ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    ed10:	42002034 	orhi	r8,r8,128
    ed14:	00800e04 	movi	r2,56
    ed18:	10c0a616 	blt	r2,r3,efb4 <__adddf3+0x3c8>
    ed1c:	008007c4 	movi	r2,31
    ed20:	10c0c916 	blt	r2,r3,f048 <__adddf3+0x45c>
    ed24:	00800804 	movi	r2,32
    ed28:	10c5c83a 	sub	r2,r2,r3
    ed2c:	408e983a 	sll	r7,r8,r2
    ed30:	30c8d83a 	srl	r4,r6,r3
    ed34:	3084983a 	sll	r2,r6,r2
    ed38:	40c6d83a 	srl	r3,r8,r3
    ed3c:	390cb03a 	or	r6,r7,r4
    ed40:	1004c03a 	cmpne	r2,r2,zero
    ed44:	308cb03a 	or	r6,r6,r2
    ed48:	898dc83a 	sub	r6,r17,r6
    ed4c:	89a3803a 	cmpltu	r17,r17,r6
    ed50:	28cbc83a 	sub	r5,r5,r3
    ed54:	2c4bc83a 	sub	r5,r5,r17
    ed58:	3023883a 	mov	r17,r6
    ed5c:	2880202c 	andhi	r2,r5,128
    ed60:	10006d26 	beq	r2,zero,ef18 <__adddf3+0x32c>
    ed64:	04c02034 	movhi	r19,128
    ed68:	9cffffc4 	addi	r19,r19,-1
    ed6c:	2ce6703a 	and	r19,r5,r19
    ed70:	98007e26 	beq	r19,zero,ef6c <__adddf3+0x380>
    ed74:	9809883a 	mov	r4,r19
    ed78:	00111880 	call	11188 <__clzsi2>
    ed7c:	10fffe04 	addi	r3,r2,-8
    ed80:	010007c4 	movi	r4,31
    ed84:	20c07f16 	blt	r4,r3,ef84 <__adddf3+0x398>
    ed88:	01400a04 	movi	r5,40
    ed8c:	2885c83a 	sub	r2,r5,r2
    ed90:	888ad83a 	srl	r5,r17,r2
    ed94:	98e6983a 	sll	r19,r19,r3
    ed98:	88e2983a 	sll	r17,r17,r3
    ed9c:	2ce6b03a 	or	r19,r5,r19
    eda0:	1c007c16 	blt	r3,r16,ef94 <__adddf3+0x3a8>
    eda4:	1c21c83a 	sub	r16,r3,r16
    eda8:	81400044 	addi	r5,r16,1
    edac:	00c007c4 	movi	r3,31
    edb0:	19409816 	blt	r3,r5,f014 <__adddf3+0x428>
    edb4:	1c21c83a 	sub	r16,r3,r16
    edb8:	8c08983a 	sll	r4,r17,r16
    edbc:	8946d83a 	srl	r3,r17,r5
    edc0:	9c20983a 	sll	r16,r19,r16
    edc4:	2008c03a 	cmpne	r4,r4,zero
    edc8:	994ad83a 	srl	r5,r19,r5
    edcc:	1c06b03a 	or	r3,r3,r16
    edd0:	1922b03a 	or	r17,r3,r4
    edd4:	0021883a 	mov	r16,zero
    edd8:	003fa306 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    eddc:	2880202c 	andhi	r2,r5,128
    ede0:	9007883a 	mov	r3,r18
    ede4:	103fac1e 	bne	r2,zero,ec98 <__alt_mem_Flash_flash_data+0xf400ec98>
    ede8:	2804977a 	slli	r2,r5,29
    edec:	8822d0fa 	srli	r17,r17,3
    edf0:	0101ffc4 	movi	r4,2047
    edf4:	280ad0fa 	srli	r5,r5,3
    edf8:	1444b03a 	or	r2,r2,r17
    edfc:	81002c26 	beq	r16,r4,eeb0 <__adddf3+0x2c4>
    ee00:	8120703a 	and	r16,r16,r4
    ee04:	01000434 	movhi	r4,16
    ee08:	213fffc4 	addi	r4,r4,-1
    ee0c:	2908703a 	and	r4,r5,r4
    ee10:	003fad06 	br	ecc8 <__alt_mem_Flash_flash_data+0xf400ecc8>
    ee14:	8089c83a 	sub	r4,r16,r2
    ee18:	01006a0e 	bge	zero,r4,efc4 <__adddf3+0x3d8>
    ee1c:	10003326 	beq	r2,zero,eeec <__adddf3+0x300>
    ee20:	0081ffc4 	movi	r2,2047
    ee24:	80bf9026 	beq	r16,r2,ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    ee28:	42002034 	orhi	r8,r8,128
    ee2c:	00800e04 	movi	r2,56
    ee30:	1100b116 	blt	r2,r4,f0f8 <__adddf3+0x50c>
    ee34:	008007c4 	movi	r2,31
    ee38:	1100e216 	blt	r2,r4,f1c4 <__adddf3+0x5d8>
    ee3c:	00800804 	movi	r2,32
    ee40:	1105c83a 	sub	r2,r2,r4
    ee44:	4092983a 	sll	r9,r8,r2
    ee48:	310ed83a 	srl	r7,r6,r4
    ee4c:	3084983a 	sll	r2,r6,r2
    ee50:	4110d83a 	srl	r8,r8,r4
    ee54:	49ccb03a 	or	r6,r9,r7
    ee58:	1004c03a 	cmpne	r2,r2,zero
    ee5c:	308cb03a 	or	r6,r6,r2
    ee60:	344d883a 	add	r6,r6,r17
    ee64:	3463803a 	cmpltu	r17,r6,r17
    ee68:	414b883a 	add	r5,r8,r5
    ee6c:	2c4b883a 	add	r5,r5,r17
    ee70:	3023883a 	mov	r17,r6
    ee74:	2880202c 	andhi	r2,r5,128
    ee78:	10002726 	beq	r2,zero,ef18 <__adddf3+0x32c>
    ee7c:	84000044 	addi	r16,r16,1
    ee80:	0081ffc4 	movi	r2,2047
    ee84:	8080ae26 	beq	r16,r2,f140 <__adddf3+0x554>
    ee88:	00bfe034 	movhi	r2,65408
    ee8c:	10bfffc4 	addi	r2,r2,-1
    ee90:	288a703a 	and	r5,r5,r2
    ee94:	880cd07a 	srli	r6,r17,1
    ee98:	280897fa 	slli	r4,r5,31
    ee9c:	88c0004c 	andi	r3,r17,1
    eea0:	30e2b03a 	or	r17,r6,r3
    eea4:	280ad07a 	srli	r5,r5,1
    eea8:	8922b03a 	or	r17,r17,r4
    eeac:	003f6e06 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    eeb0:	1148b03a 	or	r4,r2,r5
    eeb4:	20003c26 	beq	r4,zero,efa8 <__adddf3+0x3bc>
    eeb8:	29000234 	orhi	r4,r5,8
    eebc:	01400434 	movhi	r5,16
    eec0:	297fffc4 	addi	r5,r5,-1
    eec4:	2148703a 	and	r4,r4,r5
    eec8:	003f7f06 	br	ecc8 <__alt_mem_Flash_flash_data+0xf400ecc8>
    eecc:	18ffffc4 	addi	r3,r3,-1
    eed0:	18004d1e 	bne	r3,zero,f008 <__adddf3+0x41c>
    eed4:	898dc83a 	sub	r6,r17,r6
    eed8:	89a3803a 	cmpltu	r17,r17,r6
    eedc:	2a0bc83a 	sub	r5,r5,r8
    eee0:	2c4bc83a 	sub	r5,r5,r17
    eee4:	3023883a 	mov	r17,r6
    eee8:	003f9c06 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    eeec:	4184b03a 	or	r2,r8,r6
    eef0:	103f5d26 	beq	r2,zero,ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    eef4:	213fffc4 	addi	r4,r4,-1
    eef8:	203fd926 	beq	r4,zero,ee60 <__alt_mem_Flash_flash_data+0xf400ee60>
    eefc:	0081ffc4 	movi	r2,2047
    ef00:	80bfca1e 	bne	r16,r2,ee2c <__alt_mem_Flash_flash_data+0xf400ee2c>
    ef04:	003f5806 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    ef08:	10c8b03a 	or	r4,r2,r3
    ef0c:	20008b26 	beq	r4,zero,f13c <__adddf3+0x550>
    ef10:	100b883a 	mov	r5,r2
    ef14:	1823883a 	mov	r17,r3
    ef18:	888001cc 	andi	r2,r17,7
    ef1c:	103f541e 	bne	r2,zero,ec70 <__alt_mem_Flash_flash_data+0xf400ec70>
    ef20:	9007883a 	mov	r3,r18
    ef24:	003fb006 	br	ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    ef28:	1800531e 	bne	r3,zero,f078 <__adddf3+0x48c>
    ef2c:	80800044 	addi	r2,r16,1
    ef30:	1081ffcc 	andi	r2,r2,2047
    ef34:	00c00044 	movi	r3,1
    ef38:	1880990e 	bge	r3,r2,f1a0 <__adddf3+0x5b4>
    ef3c:	8985c83a 	sub	r2,r17,r6
    ef40:	8887803a 	cmpltu	r3,r17,r2
    ef44:	2a27c83a 	sub	r19,r5,r8
    ef48:	98e7c83a 	sub	r19,r19,r3
    ef4c:	98c0202c 	andhi	r3,r19,128
    ef50:	18006226 	beq	r3,zero,f0dc <__adddf3+0x4f0>
    ef54:	3463c83a 	sub	r17,r6,r17
    ef58:	4151c83a 	sub	r8,r8,r5
    ef5c:	344d803a 	cmpltu	r6,r6,r17
    ef60:	41a7c83a 	sub	r19,r8,r6
    ef64:	3825883a 	mov	r18,r7
    ef68:	983f821e 	bne	r19,zero,ed74 <__alt_mem_Flash_flash_data+0xf400ed74>
    ef6c:	8809883a 	mov	r4,r17
    ef70:	00111880 	call	11188 <__clzsi2>
    ef74:	10800804 	addi	r2,r2,32
    ef78:	10fffe04 	addi	r3,r2,-8
    ef7c:	010007c4 	movi	r4,31
    ef80:	20ff810e 	bge	r4,r3,ed88 <__alt_mem_Flash_flash_data+0xf400ed88>
    ef84:	14fff604 	addi	r19,r2,-40
    ef88:	8ce6983a 	sll	r19,r17,r19
    ef8c:	0023883a 	mov	r17,zero
    ef90:	1c3f840e 	bge	r3,r16,eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    ef94:	017fe034 	movhi	r5,65408
    ef98:	297fffc4 	addi	r5,r5,-1
    ef9c:	80e1c83a 	sub	r16,r16,r3
    efa0:	994a703a 	and	r5,r19,r5
    efa4:	003f3006 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    efa8:	0009883a 	mov	r4,zero
    efac:	0005883a 	mov	r2,zero
    efb0:	003f4506 	br	ecc8 <__alt_mem_Flash_flash_data+0xf400ecc8>
    efb4:	418cb03a 	or	r6,r8,r6
    efb8:	300cc03a 	cmpne	r6,r6,zero
    efbc:	0007883a 	mov	r3,zero
    efc0:	003f6106 	br	ed48 <__alt_mem_Flash_flash_data+0xf400ed48>
    efc4:	2000921e 	bne	r4,zero,f210 <__adddf3+0x624>
    efc8:	80800044 	addi	r2,r16,1
    efcc:	11c1ffcc 	andi	r7,r2,2047
    efd0:	01000044 	movi	r4,1
    efd4:	21c0610e 	bge	r4,r7,f15c <__adddf3+0x570>
    efd8:	0101ffc4 	movi	r4,2047
    efdc:	1100a326 	beq	r2,r4,f26c <__adddf3+0x680>
    efe0:	344d883a 	add	r6,r6,r17
    efe4:	3463803a 	cmpltu	r17,r6,r17
    efe8:	414b883a 	add	r5,r8,r5
    efec:	2c4b883a 	add	r5,r5,r17
    eff0:	282297fa 	slli	r17,r5,31
    eff4:	300cd07a 	srli	r6,r6,1
    eff8:	280ad07a 	srli	r5,r5,1
    effc:	1021883a 	mov	r16,r2
    f000:	89a2b03a 	or	r17,r17,r6
    f004:	003f1806 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f008:	0081ffc4 	movi	r2,2047
    f00c:	80bf411e 	bne	r16,r2,ed14 <__alt_mem_Flash_flash_data+0xf400ed14>
    f010:	003f1506 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f014:	80bff844 	addi	r2,r16,-31
    f018:	00c00804 	movi	r3,32
    f01c:	9884d83a 	srl	r2,r19,r2
    f020:	28c04a26 	beq	r5,r3,f14c <__adddf3+0x560>
    f024:	00c00fc4 	movi	r3,63
    f028:	1c21c83a 	sub	r16,r3,r16
    f02c:	9c26983a 	sll	r19,r19,r16
    f030:	9c62b03a 	or	r17,r19,r17
    f034:	8822c03a 	cmpne	r17,r17,zero
    f038:	88a2b03a 	or	r17,r17,r2
    f03c:	000b883a 	mov	r5,zero
    f040:	0021883a 	mov	r16,zero
    f044:	003fb406 	br	ef18 <__alt_mem_Flash_flash_data+0xf400ef18>
    f048:	18bff804 	addi	r2,r3,-32
    f04c:	01000804 	movi	r4,32
    f050:	4084d83a 	srl	r2,r8,r2
    f054:	19003f26 	beq	r3,r4,f154 <__adddf3+0x568>
    f058:	01001004 	movi	r4,64
    f05c:	20c7c83a 	sub	r3,r4,r3
    f060:	40d0983a 	sll	r8,r8,r3
    f064:	418cb03a 	or	r6,r8,r6
    f068:	300cc03a 	cmpne	r6,r6,zero
    f06c:	308cb03a 	or	r6,r6,r2
    f070:	0007883a 	mov	r3,zero
    f074:	003f3406 	br	ed48 <__alt_mem_Flash_flash_data+0xf400ed48>
    f078:	80002326 	beq	r16,zero,f108 <__adddf3+0x51c>
    f07c:	0101ffc4 	movi	r4,2047
    f080:	11005e26 	beq	r2,r4,f1fc <__adddf3+0x610>
    f084:	00c7c83a 	sub	r3,zero,r3
    f088:	29402034 	orhi	r5,r5,128
    f08c:	01000e04 	movi	r4,56
    f090:	20c07216 	blt	r4,r3,f25c <__adddf3+0x670>
    f094:	010007c4 	movi	r4,31
    f098:	20c0ce16 	blt	r4,r3,f3d4 <__adddf3+0x7e8>
    f09c:	01000804 	movi	r4,32
    f0a0:	20c9c83a 	sub	r4,r4,r3
    f0a4:	2914983a 	sll	r10,r5,r4
    f0a8:	88d2d83a 	srl	r9,r17,r3
    f0ac:	8908983a 	sll	r4,r17,r4
    f0b0:	28c6d83a 	srl	r3,r5,r3
    f0b4:	5262b03a 	or	r17,r10,r9
    f0b8:	2008c03a 	cmpne	r4,r4,zero
    f0bc:	8922b03a 	or	r17,r17,r4
    f0c0:	3463c83a 	sub	r17,r6,r17
    f0c4:	40c7c83a 	sub	r3,r8,r3
    f0c8:	344d803a 	cmpltu	r6,r6,r17
    f0cc:	198bc83a 	sub	r5,r3,r6
    f0d0:	1021883a 	mov	r16,r2
    f0d4:	3825883a 	mov	r18,r7
    f0d8:	003f2006 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    f0dc:	9886b03a 	or	r3,r19,r2
    f0e0:	1800141e 	bne	r3,zero,f134 <__adddf3+0x548>
    f0e4:	0007883a 	mov	r3,zero
    f0e8:	000b883a 	mov	r5,zero
    f0ec:	0023883a 	mov	r17,zero
    f0f0:	0021883a 	mov	r16,zero
    f0f4:	003f3c06 	br	ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    f0f8:	418cb03a 	or	r6,r8,r6
    f0fc:	300cc03a 	cmpne	r6,r6,zero
    f100:	0011883a 	mov	r8,zero
    f104:	003f5606 	br	ee60 <__alt_mem_Flash_flash_data+0xf400ee60>
    f108:	2c48b03a 	or	r4,r5,r17
    f10c:	20003b26 	beq	r4,zero,f1fc <__adddf3+0x610>
    f110:	00c6303a 	nor	r3,zero,r3
    f114:	1800371e 	bne	r3,zero,f1f4 <__adddf3+0x608>
    f118:	3463c83a 	sub	r17,r6,r17
    f11c:	414bc83a 	sub	r5,r8,r5
    f120:	344d803a 	cmpltu	r6,r6,r17
    f124:	298bc83a 	sub	r5,r5,r6
    f128:	1021883a 	mov	r16,r2
    f12c:	3825883a 	mov	r18,r7
    f130:	003f0a06 	br	ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    f134:	1023883a 	mov	r17,r2
    f138:	003f0d06 	br	ed70 <__alt_mem_Flash_flash_data+0xf400ed70>
    f13c:	0007883a 	mov	r3,zero
    f140:	000b883a 	mov	r5,zero
    f144:	0023883a 	mov	r17,zero
    f148:	003f2706 	br	ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    f14c:	0027883a 	mov	r19,zero
    f150:	003fb706 	br	f030 <__alt_mem_Flash_flash_data+0xf400f030>
    f154:	0011883a 	mov	r8,zero
    f158:	003fc206 	br	f064 <__alt_mem_Flash_flash_data+0xf400f064>
    f15c:	2c44b03a 	or	r2,r5,r17
    f160:	8000871e 	bne	r16,zero,f380 <__adddf3+0x794>
    f164:	1000b126 	beq	r2,zero,f42c <__adddf3+0x840>
    f168:	4184b03a 	or	r2,r8,r6
    f16c:	103ebe26 	beq	r2,zero,ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f170:	3445883a 	add	r2,r6,r17
    f174:	1463803a 	cmpltu	r17,r2,r17
    f178:	414b883a 	add	r5,r8,r5
    f17c:	2c4b883a 	add	r5,r5,r17
    f180:	28c0202c 	andhi	r3,r5,128
    f184:	1023883a 	mov	r17,r2
    f188:	183f6326 	beq	r3,zero,ef18 <__alt_mem_Flash_flash_data+0xf400ef18>
    f18c:	00bfe034 	movhi	r2,65408
    f190:	10bfffc4 	addi	r2,r2,-1
    f194:	2021883a 	mov	r16,r4
    f198:	288a703a 	and	r5,r5,r2
    f19c:	003eb206 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f1a0:	2c44b03a 	or	r2,r5,r17
    f1a4:	8000251e 	bne	r16,zero,f23c <__adddf3+0x650>
    f1a8:	10004b1e 	bne	r2,zero,f2d8 <__adddf3+0x6ec>
    f1ac:	4184b03a 	or	r2,r8,r6
    f1b0:	103fe226 	beq	r2,zero,f13c <__alt_mem_Flash_flash_data+0xf400f13c>
    f1b4:	400b883a 	mov	r5,r8
    f1b8:	3023883a 	mov	r17,r6
    f1bc:	3825883a 	mov	r18,r7
    f1c0:	003ea906 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f1c4:	20bff804 	addi	r2,r4,-32
    f1c8:	01c00804 	movi	r7,32
    f1cc:	4084d83a 	srl	r2,r8,r2
    f1d0:	21c07e26 	beq	r4,r7,f3cc <__adddf3+0x7e0>
    f1d4:	01c01004 	movi	r7,64
    f1d8:	3909c83a 	sub	r4,r7,r4
    f1dc:	4110983a 	sll	r8,r8,r4
    f1e0:	418cb03a 	or	r6,r8,r6
    f1e4:	300cc03a 	cmpne	r6,r6,zero
    f1e8:	308cb03a 	or	r6,r6,r2
    f1ec:	0011883a 	mov	r8,zero
    f1f0:	003f1b06 	br	ee60 <__alt_mem_Flash_flash_data+0xf400ee60>
    f1f4:	0101ffc4 	movi	r4,2047
    f1f8:	113fa41e 	bne	r2,r4,f08c <__alt_mem_Flash_flash_data+0xf400f08c>
    f1fc:	400b883a 	mov	r5,r8
    f200:	3023883a 	mov	r17,r6
    f204:	1021883a 	mov	r16,r2
    f208:	3825883a 	mov	r18,r7
    f20c:	003e9606 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f210:	80001a1e 	bne	r16,zero,f27c <__adddf3+0x690>
    f214:	2c4eb03a 	or	r7,r5,r17
    f218:	38005526 	beq	r7,zero,f370 <__adddf3+0x784>
    f21c:	0108303a 	nor	r4,zero,r4
    f220:	2000511e 	bne	r4,zero,f368 <__adddf3+0x77c>
    f224:	89a3883a 	add	r17,r17,r6
    f228:	414b883a 	add	r5,r8,r5
    f22c:	898d803a 	cmpltu	r6,r17,r6
    f230:	298b883a 	add	r5,r5,r6
    f234:	1021883a 	mov	r16,r2
    f238:	003f0e06 	br	ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    f23c:	1000341e 	bne	r2,zero,f310 <__adddf3+0x724>
    f240:	4184b03a 	or	r2,r8,r6
    f244:	10006f26 	beq	r2,zero,f404 <__adddf3+0x818>
    f248:	400b883a 	mov	r5,r8
    f24c:	3023883a 	mov	r17,r6
    f250:	3825883a 	mov	r18,r7
    f254:	0401ffc4 	movi	r16,2047
    f258:	003e8306 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f25c:	2c62b03a 	or	r17,r5,r17
    f260:	8822c03a 	cmpne	r17,r17,zero
    f264:	0007883a 	mov	r3,zero
    f268:	003f9506 	br	f0c0 <__alt_mem_Flash_flash_data+0xf400f0c0>
    f26c:	1021883a 	mov	r16,r2
    f270:	000b883a 	mov	r5,zero
    f274:	0023883a 	mov	r17,zero
    f278:	003edb06 	br	ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    f27c:	01c1ffc4 	movi	r7,2047
    f280:	11c03b26 	beq	r2,r7,f370 <__adddf3+0x784>
    f284:	0109c83a 	sub	r4,zero,r4
    f288:	29402034 	orhi	r5,r5,128
    f28c:	01c00e04 	movi	r7,56
    f290:	39006216 	blt	r7,r4,f41c <__adddf3+0x830>
    f294:	01c007c4 	movi	r7,31
    f298:	39006b16 	blt	r7,r4,f448 <__adddf3+0x85c>
    f29c:	01c00804 	movi	r7,32
    f2a0:	390fc83a 	sub	r7,r7,r4
    f2a4:	29d4983a 	sll	r10,r5,r7
    f2a8:	8912d83a 	srl	r9,r17,r4
    f2ac:	89ce983a 	sll	r7,r17,r7
    f2b0:	2908d83a 	srl	r4,r5,r4
    f2b4:	5262b03a 	or	r17,r10,r9
    f2b8:	380ac03a 	cmpne	r5,r7,zero
    f2bc:	8962b03a 	or	r17,r17,r5
    f2c0:	89a3883a 	add	r17,r17,r6
    f2c4:	2211883a 	add	r8,r4,r8
    f2c8:	898d803a 	cmpltu	r6,r17,r6
    f2cc:	418b883a 	add	r5,r8,r6
    f2d0:	1021883a 	mov	r16,r2
    f2d4:	003ee706 	br	ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    f2d8:	4184b03a 	or	r2,r8,r6
    f2dc:	103e6226 	beq	r2,zero,ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f2e0:	8987c83a 	sub	r3,r17,r6
    f2e4:	88c9803a 	cmpltu	r4,r17,r3
    f2e8:	2a05c83a 	sub	r2,r5,r8
    f2ec:	1105c83a 	sub	r2,r2,r4
    f2f0:	1100202c 	andhi	r4,r2,128
    f2f4:	203f0426 	beq	r4,zero,ef08 <__alt_mem_Flash_flash_data+0xf400ef08>
    f2f8:	3463c83a 	sub	r17,r6,r17
    f2fc:	414bc83a 	sub	r5,r8,r5
    f300:	344d803a 	cmpltu	r6,r6,r17
    f304:	298bc83a 	sub	r5,r5,r6
    f308:	3825883a 	mov	r18,r7
    f30c:	003e5606 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f310:	4184b03a 	or	r2,r8,r6
    f314:	10002b26 	beq	r2,zero,f3c4 <__adddf3+0x7d8>
    f318:	2804d0fa 	srli	r2,r5,3
    f31c:	8822d0fa 	srli	r17,r17,3
    f320:	280a977a 	slli	r5,r5,29
    f324:	10c0022c 	andhi	r3,r2,8
    f328:	2c62b03a 	or	r17,r5,r17
    f32c:	18000826 	beq	r3,zero,f350 <__adddf3+0x764>
    f330:	4008d0fa 	srli	r4,r8,3
    f334:	20c0022c 	andhi	r3,r4,8
    f338:	1800051e 	bne	r3,zero,f350 <__adddf3+0x764>
    f33c:	300cd0fa 	srli	r6,r6,3
    f340:	4010977a 	slli	r8,r8,29
    f344:	2005883a 	mov	r2,r4
    f348:	3825883a 	mov	r18,r7
    f34c:	41a2b03a 	or	r17,r8,r6
    f350:	880ad77a 	srli	r5,r17,29
    f354:	100490fa 	slli	r2,r2,3
    f358:	882290fa 	slli	r17,r17,3
    f35c:	0401ffc4 	movi	r16,2047
    f360:	288ab03a 	or	r5,r5,r2
    f364:	003e4006 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f368:	01c1ffc4 	movi	r7,2047
    f36c:	11ffc71e 	bne	r2,r7,f28c <__alt_mem_Flash_flash_data+0xf400f28c>
    f370:	400b883a 	mov	r5,r8
    f374:	3023883a 	mov	r17,r6
    f378:	1021883a 	mov	r16,r2
    f37c:	003e3a06 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f380:	10002d26 	beq	r2,zero,f438 <__adddf3+0x84c>
    f384:	4184b03a 	or	r2,r8,r6
    f388:	10000e26 	beq	r2,zero,f3c4 <__adddf3+0x7d8>
    f38c:	2804d0fa 	srli	r2,r5,3
    f390:	8822d0fa 	srli	r17,r17,3
    f394:	280a977a 	slli	r5,r5,29
    f398:	10c0022c 	andhi	r3,r2,8
    f39c:	2c62b03a 	or	r17,r5,r17
    f3a0:	183feb26 	beq	r3,zero,f350 <__alt_mem_Flash_flash_data+0xf400f350>
    f3a4:	4008d0fa 	srli	r4,r8,3
    f3a8:	20c0022c 	andhi	r3,r4,8
    f3ac:	183fe81e 	bne	r3,zero,f350 <__alt_mem_Flash_flash_data+0xf400f350>
    f3b0:	300cd0fa 	srli	r6,r6,3
    f3b4:	4010977a 	slli	r8,r8,29
    f3b8:	2005883a 	mov	r2,r4
    f3bc:	41a2b03a 	or	r17,r8,r6
    f3c0:	003fe306 	br	f350 <__alt_mem_Flash_flash_data+0xf400f350>
    f3c4:	0401ffc4 	movi	r16,2047
    f3c8:	003e2706 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f3cc:	0011883a 	mov	r8,zero
    f3d0:	003f8306 	br	f1e0 <__alt_mem_Flash_flash_data+0xf400f1e0>
    f3d4:	193ff804 	addi	r4,r3,-32
    f3d8:	02400804 	movi	r9,32
    f3dc:	2908d83a 	srl	r4,r5,r4
    f3e0:	1a402526 	beq	r3,r9,f478 <__adddf3+0x88c>
    f3e4:	02401004 	movi	r9,64
    f3e8:	48c7c83a 	sub	r3,r9,r3
    f3ec:	28ca983a 	sll	r5,r5,r3
    f3f0:	2c62b03a 	or	r17,r5,r17
    f3f4:	8822c03a 	cmpne	r17,r17,zero
    f3f8:	8922b03a 	or	r17,r17,r4
    f3fc:	0007883a 	mov	r3,zero
    f400:	003f2f06 	br	f0c0 <__alt_mem_Flash_flash_data+0xf400f0c0>
    f404:	01402034 	movhi	r5,128
    f408:	0007883a 	mov	r3,zero
    f40c:	297fffc4 	addi	r5,r5,-1
    f410:	047ffe04 	movi	r17,-8
    f414:	0401ffc4 	movi	r16,2047
    f418:	003e7306 	br	ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    f41c:	2c62b03a 	or	r17,r5,r17
    f420:	8822c03a 	cmpne	r17,r17,zero
    f424:	0009883a 	mov	r4,zero
    f428:	003fa506 	br	f2c0 <__alt_mem_Flash_flash_data+0xf400f2c0>
    f42c:	400b883a 	mov	r5,r8
    f430:	3023883a 	mov	r17,r6
    f434:	003e0c06 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f438:	400b883a 	mov	r5,r8
    f43c:	3023883a 	mov	r17,r6
    f440:	0401ffc4 	movi	r16,2047
    f444:	003e0806 	br	ec68 <__alt_mem_Flash_flash_data+0xf400ec68>
    f448:	21fff804 	addi	r7,r4,-32
    f44c:	02400804 	movi	r9,32
    f450:	29ced83a 	srl	r7,r5,r7
    f454:	22400a26 	beq	r4,r9,f480 <__adddf3+0x894>
    f458:	02401004 	movi	r9,64
    f45c:	4909c83a 	sub	r4,r9,r4
    f460:	290a983a 	sll	r5,r5,r4
    f464:	2c62b03a 	or	r17,r5,r17
    f468:	8822c03a 	cmpne	r17,r17,zero
    f46c:	89e2b03a 	or	r17,r17,r7
    f470:	0009883a 	mov	r4,zero
    f474:	003f9206 	br	f2c0 <__alt_mem_Flash_flash_data+0xf400f2c0>
    f478:	000b883a 	mov	r5,zero
    f47c:	003fdc06 	br	f3f0 <__alt_mem_Flash_flash_data+0xf400f3f0>
    f480:	000b883a 	mov	r5,zero
    f484:	003ff706 	br	f464 <__alt_mem_Flash_flash_data+0xf400f464>

0000f488 <__divdf3>:
    f488:	defff204 	addi	sp,sp,-56
    f48c:	dd000815 	stw	r20,32(sp)
    f490:	2828d53a 	srli	r20,r5,20
    f494:	dd800a15 	stw	r22,40(sp)
    f498:	282cd7fa 	srli	r22,r5,31
    f49c:	dc000415 	stw	r16,16(sp)
    f4a0:	04000434 	movhi	r16,16
    f4a4:	df000c15 	stw	fp,48(sp)
    f4a8:	dcc00715 	stw	r19,28(sp)
    f4ac:	dc800615 	stw	r18,24(sp)
    f4b0:	dc400515 	stw	r17,20(sp)
    f4b4:	843fffc4 	addi	r16,r16,-1
    f4b8:	dfc00d15 	stw	ra,52(sp)
    f4bc:	ddc00b15 	stw	r23,44(sp)
    f4c0:	dd400915 	stw	r21,36(sp)
    f4c4:	a501ffcc 	andi	r20,r20,2047
    f4c8:	2025883a 	mov	r18,r4
    f4cc:	2027883a 	mov	r19,r4
    f4d0:	2c22703a 	and	r17,r5,r16
    f4d4:	b7003fcc 	andi	fp,r22,255
    f4d8:	a0005e26 	beq	r20,zero,f654 <__divdf3+0x1cc>
    f4dc:	0081ffc4 	movi	r2,2047
    f4e0:	a0803526 	beq	r20,r2,f5b8 <__divdf3+0x130>
    f4e4:	8c000434 	orhi	r16,r17,16
    f4e8:	2004d77a 	srli	r2,r4,29
    f4ec:	802090fa 	slli	r16,r16,3
    f4f0:	202690fa 	slli	r19,r4,3
    f4f4:	a53f0044 	addi	r20,r20,-1023
    f4f8:	80a2b03a 	or	r17,r16,r2
    f4fc:	0025883a 	mov	r18,zero
    f500:	0011883a 	mov	r8,zero
    f504:	380ad53a 	srli	r5,r7,20
    f508:	382ed7fa 	srli	r23,r7,31
    f50c:	04000434 	movhi	r16,16
    f510:	843fffc4 	addi	r16,r16,-1
    f514:	2941ffcc 	andi	r5,r5,2047
    f518:	302b883a 	mov	r21,r6
    f51c:	3c20703a 	and	r16,r7,r16
    f520:	ba403fcc 	andi	r9,r23,255
    f524:	28006726 	beq	r5,zero,f6c4 <__divdf3+0x23c>
    f528:	0081ffc4 	movi	r2,2047
    f52c:	28805f26 	beq	r5,r2,f6ac <__divdf3+0x224>
    f530:	84000434 	orhi	r16,r16,16
    f534:	3004d77a 	srli	r2,r6,29
    f538:	802090fa 	slli	r16,r16,3
    f53c:	302a90fa 	slli	r21,r6,3
    f540:	297f0044 	addi	r5,r5,-1023
    f544:	80a0b03a 	or	r16,r16,r2
    f548:	000f883a 	mov	r7,zero
    f54c:	3c86b03a 	or	r3,r7,r18
    f550:	180690ba 	slli	r3,r3,2
    f554:	00800074 	movhi	r2,1
    f558:	10bd5e04 	addi	r2,r2,-2696
    f55c:	1887883a 	add	r3,r3,r2
    f560:	18c00017 	ldw	r3,0(r3)
    f564:	b5c8f03a 	xor	r4,r22,r23
    f568:	200d883a 	mov	r6,r4
    f56c:	24803fcc 	andi	r18,r4,255
    f570:	a169c83a 	sub	r20,r20,r5
    f574:	1800683a 	jmp	r3
    f578:	0000f7c0 	call	f7c <typen+0xc>
    f57c:	0000f5f0 	cmpltui	zero,zero,983
    f580:	0000f784 	movi	zero,990
    f584:	0000f5d4 	movui	zero,983
    f588:	0000f784 	movi	zero,990
    f58c:	0000f758 	cmpnei	zero,zero,989
    f590:	0000f784 	movi	zero,990
    f594:	0000f5d4 	movui	zero,983
    f598:	0000f5f0 	cmpltui	zero,zero,983
    f59c:	0000f5f0 	cmpltui	zero,zero,983
    f5a0:	0000f758 	cmpnei	zero,zero,989
    f5a4:	0000f5d4 	movui	zero,983
    f5a8:	0000f5e4 	muli	zero,zero,983
    f5ac:	0000f5e4 	muli	zero,zero,983
    f5b0:	0000f5e4 	muli	zero,zero,983
    f5b4:	0000f794 	movui	zero,990
    f5b8:	8904b03a 	or	r2,r17,r4
    f5bc:	1000631e 	bne	r2,zero,f74c <__divdf3+0x2c4>
    f5c0:	04800204 	movi	r18,8
    f5c4:	0023883a 	mov	r17,zero
    f5c8:	0027883a 	mov	r19,zero
    f5cc:	02000084 	movi	r8,2
    f5d0:	003fcc06 	br	f504 <__alt_mem_Flash_flash_data+0xf400f504>
    f5d4:	8023883a 	mov	r17,r16
    f5d8:	a827883a 	mov	r19,r21
    f5dc:	4839883a 	mov	fp,r9
    f5e0:	3811883a 	mov	r8,r7
    f5e4:	00800084 	movi	r2,2
    f5e8:	40812a1e 	bne	r8,r2,fa94 <__divdf3+0x60c>
    f5ec:	e025883a 	mov	r18,fp
    f5f0:	9180004c 	andi	r6,r18,1
    f5f4:	0101ffc4 	movi	r4,2047
    f5f8:	000b883a 	mov	r5,zero
    f5fc:	0027883a 	mov	r19,zero
    f600:	2008953a 	slli	r4,r4,20
    f604:	30c03fcc 	andi	r3,r6,255
    f608:	04000434 	movhi	r16,16
    f60c:	180697fa 	slli	r3,r3,31
    f610:	843fffc4 	addi	r16,r16,-1
    f614:	2c20703a 	and	r16,r5,r16
    f618:	8120b03a 	or	r16,r16,r4
    f61c:	80c6b03a 	or	r3,r16,r3
    f620:	9805883a 	mov	r2,r19
    f624:	dfc00d17 	ldw	ra,52(sp)
    f628:	df000c17 	ldw	fp,48(sp)
    f62c:	ddc00b17 	ldw	r23,44(sp)
    f630:	dd800a17 	ldw	r22,40(sp)
    f634:	dd400917 	ldw	r21,36(sp)
    f638:	dd000817 	ldw	r20,32(sp)
    f63c:	dcc00717 	ldw	r19,28(sp)
    f640:	dc800617 	ldw	r18,24(sp)
    f644:	dc400517 	ldw	r17,20(sp)
    f648:	dc000417 	ldw	r16,16(sp)
    f64c:	dec00e04 	addi	sp,sp,56
    f650:	f800283a 	ret
    f654:	8904b03a 	or	r2,r17,r4
    f658:	10003726 	beq	r2,zero,f738 <__divdf3+0x2b0>
    f65c:	88011c26 	beq	r17,zero,fad0 <__divdf3+0x648>
    f660:	8809883a 	mov	r4,r17
    f664:	d9800315 	stw	r6,12(sp)
    f668:	d9c00115 	stw	r7,4(sp)
    f66c:	00111880 	call	11188 <__clzsi2>
    f670:	d9800317 	ldw	r6,12(sp)
    f674:	d9c00117 	ldw	r7,4(sp)
    f678:	1007883a 	mov	r3,r2
    f67c:	01000a04 	movi	r4,40
    f680:	1cfffe04 	addi	r19,r3,-8
    f684:	20c9c83a 	sub	r4,r4,r3
    f688:	8cca983a 	sll	r5,r17,r19
    f68c:	9108d83a 	srl	r4,r18,r4
    f690:	94e6983a 	sll	r19,r18,r19
    f694:	2162b03a 	or	r17,r4,r5
    f698:	053f0344 	movi	r20,-1011
    f69c:	a0e9c83a 	sub	r20,r20,r3
    f6a0:	0025883a 	mov	r18,zero
    f6a4:	0011883a 	mov	r8,zero
    f6a8:	003f9606 	br	f504 <__alt_mem_Flash_flash_data+0xf400f504>
    f6ac:	8184b03a 	or	r2,r16,r6
    f6b0:	10001f1e 	bne	r2,zero,f730 <__divdf3+0x2a8>
    f6b4:	0021883a 	mov	r16,zero
    f6b8:	002b883a 	mov	r21,zero
    f6bc:	01c00084 	movi	r7,2
    f6c0:	003fa206 	br	f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f6c4:	8184b03a 	or	r2,r16,r6
    f6c8:	10001526 	beq	r2,zero,f720 <__divdf3+0x298>
    f6cc:	80010c26 	beq	r16,zero,fb00 <__divdf3+0x678>
    f6d0:	8009883a 	mov	r4,r16
    f6d4:	d9800315 	stw	r6,12(sp)
    f6d8:	da000215 	stw	r8,8(sp)
    f6dc:	da400015 	stw	r9,0(sp)
    f6e0:	00111880 	call	11188 <__clzsi2>
    f6e4:	d9800317 	ldw	r6,12(sp)
    f6e8:	da000217 	ldw	r8,8(sp)
    f6ec:	da400017 	ldw	r9,0(sp)
    f6f0:	1007883a 	mov	r3,r2
    f6f4:	01000a04 	movi	r4,40
    f6f8:	1d7ffe04 	addi	r21,r3,-8
    f6fc:	20c9c83a 	sub	r4,r4,r3
    f700:	8560983a 	sll	r16,r16,r21
    f704:	3108d83a 	srl	r4,r6,r4
    f708:	356a983a 	sll	r21,r6,r21
    f70c:	2420b03a 	or	r16,r4,r16
    f710:	017f0344 	movi	r5,-1011
    f714:	28cbc83a 	sub	r5,r5,r3
    f718:	000f883a 	mov	r7,zero
    f71c:	003f8b06 	br	f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f720:	0021883a 	mov	r16,zero
    f724:	002b883a 	mov	r21,zero
    f728:	01c00044 	movi	r7,1
    f72c:	003f8706 	br	f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f730:	01c000c4 	movi	r7,3
    f734:	003f8506 	br	f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f738:	04800104 	movi	r18,4
    f73c:	0023883a 	mov	r17,zero
    f740:	0027883a 	mov	r19,zero
    f744:	02000044 	movi	r8,1
    f748:	003f6e06 	br	f504 <__alt_mem_Flash_flash_data+0xf400f504>
    f74c:	04800304 	movi	r18,12
    f750:	020000c4 	movi	r8,3
    f754:	003f6b06 	br	f504 <__alt_mem_Flash_flash_data+0xf400f504>
    f758:	01400434 	movhi	r5,16
    f75c:	000d883a 	mov	r6,zero
    f760:	297fffc4 	addi	r5,r5,-1
    f764:	04ffffc4 	movi	r19,-1
    f768:	0101ffc4 	movi	r4,2047
    f76c:	003fa406 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    f770:	043f0084 	movi	r16,-1022
    f774:	8521c83a 	sub	r16,r16,r20
    f778:	00800e04 	movi	r2,56
    f77c:	1401200e 	bge	r2,r16,fc00 <__divdf3+0x778>
    f780:	9180004c 	andi	r6,r18,1
    f784:	0009883a 	mov	r4,zero
    f788:	000b883a 	mov	r5,zero
    f78c:	0027883a 	mov	r19,zero
    f790:	003f9b06 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    f794:	8880022c 	andhi	r2,r17,8
    f798:	1000c726 	beq	r2,zero,fab8 <__divdf3+0x630>
    f79c:	8080022c 	andhi	r2,r16,8
    f7a0:	1000c51e 	bne	r2,zero,fab8 <__divdf3+0x630>
    f7a4:	00800434 	movhi	r2,16
    f7a8:	81400234 	orhi	r5,r16,8
    f7ac:	10bfffc4 	addi	r2,r2,-1
    f7b0:	b80d883a 	mov	r6,r23
    f7b4:	288a703a 	and	r5,r5,r2
    f7b8:	a827883a 	mov	r19,r21
    f7bc:	003fea06 	br	f768 <__alt_mem_Flash_flash_data+0xf400f768>
    f7c0:	8440ea36 	bltu	r16,r17,fb6c <__divdf3+0x6e4>
    f7c4:	8c00e826 	beq	r17,r16,fb68 <__divdf3+0x6e0>
    f7c8:	a53fffc4 	addi	r20,r20,-1
    f7cc:	882d883a 	mov	r22,r17
    f7d0:	000d883a 	mov	r6,zero
    f7d4:	a804d63a 	srli	r2,r21,24
    f7d8:	8020923a 	slli	r16,r16,8
    f7dc:	b009883a 	mov	r4,r22
    f7e0:	d9800315 	stw	r6,12(sp)
    f7e4:	1420b03a 	or	r16,r2,r16
    f7e8:	802ed43a 	srli	r23,r16,16
    f7ec:	873fffcc 	andi	fp,r16,65535
    f7f0:	a82a923a 	slli	r21,r21,8
    f7f4:	b80b883a 	mov	r5,r23
    f7f8:	000ebdc0 	call	ebdc <__udivsi3>
    f7fc:	b009883a 	mov	r4,r22
    f800:	b80b883a 	mov	r5,r23
    f804:	1023883a 	mov	r17,r2
    f808:	000ebe40 	call	ebe4 <__umodsi3>
    f80c:	1004943a 	slli	r2,r2,16
    f810:	9808d43a 	srli	r4,r19,16
    f814:	8f2d383a 	mul	r22,r17,fp
    f818:	d9800317 	ldw	r6,12(sp)
    f81c:	1106b03a 	or	r3,r2,r4
    f820:	1d80062e 	bgeu	r3,r22,f83c <__divdf3+0x3b4>
    f824:	1c07883a 	add	r3,r3,r16
    f828:	88bfffc4 	addi	r2,r17,-1
    f82c:	1c00dc36 	bltu	r3,r16,fba0 <__divdf3+0x718>
    f830:	1d80db2e 	bgeu	r3,r22,fba0 <__divdf3+0x718>
    f834:	8c7fff84 	addi	r17,r17,-2
    f838:	1c07883a 	add	r3,r3,r16
    f83c:	1dadc83a 	sub	r22,r3,r22
    f840:	b009883a 	mov	r4,r22
    f844:	b80b883a 	mov	r5,r23
    f848:	d9800315 	stw	r6,12(sp)
    f84c:	000ebdc0 	call	ebdc <__udivsi3>
    f850:	b009883a 	mov	r4,r22
    f854:	b80b883a 	mov	r5,r23
    f858:	d8800015 	stw	r2,0(sp)
    f85c:	000ebe40 	call	ebe4 <__umodsi3>
    f860:	da400017 	ldw	r9,0(sp)
    f864:	1004943a 	slli	r2,r2,16
    f868:	9cffffcc 	andi	r19,r19,65535
    f86c:	4f07383a 	mul	r3,r9,fp
    f870:	14c8b03a 	or	r4,r2,r19
    f874:	d9800317 	ldw	r6,12(sp)
    f878:	20c0062e 	bgeu	r4,r3,f894 <__divdf3+0x40c>
    f87c:	2409883a 	add	r4,r4,r16
    f880:	48bfffc4 	addi	r2,r9,-1
    f884:	2400c436 	bltu	r4,r16,fb98 <__divdf3+0x710>
    f888:	20c0c32e 	bgeu	r4,r3,fb98 <__divdf3+0x710>
    f88c:	4a7fff84 	addi	r9,r9,-2
    f890:	2409883a 	add	r4,r4,r16
    f894:	8822943a 	slli	r17,r17,16
    f898:	a80ed43a 	srli	r7,r21,16
    f89c:	aa3fffcc 	andi	r8,r21,65535
    f8a0:	4c62b03a 	or	r17,r9,r17
    f8a4:	8816d43a 	srli	r11,r17,16
    f8a8:	897fffcc 	andi	r5,r17,65535
    f8ac:	2a15383a 	mul	r10,r5,r8
    f8b0:	5a19383a 	mul	r12,r11,r8
    f8b4:	29cb383a 	mul	r5,r5,r7
    f8b8:	5012d43a 	srli	r9,r10,16
    f8bc:	20c5c83a 	sub	r2,r4,r3
    f8c0:	614b883a 	add	r5,r12,r5
    f8c4:	2a4b883a 	add	r5,r5,r9
    f8c8:	59c7383a 	mul	r3,r11,r7
    f8cc:	2b00022e 	bgeu	r5,r12,f8d8 <__divdf3+0x450>
    f8d0:	01000074 	movhi	r4,1
    f8d4:	1907883a 	add	r3,r3,r4
    f8d8:	2808d43a 	srli	r4,r5,16
    f8dc:	280a943a 	slli	r5,r5,16
    f8e0:	54ffffcc 	andi	r19,r10,65535
    f8e4:	1907883a 	add	r3,r3,r4
    f8e8:	2ccb883a 	add	r5,r5,r19
    f8ec:	10c09336 	bltu	r2,r3,fb3c <__divdf3+0x6b4>
    f8f0:	10c0ad26 	beq	r2,r3,fba8 <__divdf3+0x720>
    f8f4:	10c7c83a 	sub	r3,r2,r3
    f8f8:	3167c83a 	sub	r19,r6,r5
    f8fc:	34ed803a 	cmpltu	r22,r6,r19
    f900:	1dadc83a 	sub	r22,r3,r22
    f904:	b400b226 	beq	r22,r16,fbd0 <__divdf3+0x748>
    f908:	b009883a 	mov	r4,r22
    f90c:	b80b883a 	mov	r5,r23
    f910:	d9c00115 	stw	r7,4(sp)
    f914:	da000215 	stw	r8,8(sp)
    f918:	000ebdc0 	call	ebdc <__udivsi3>
    f91c:	b009883a 	mov	r4,r22
    f920:	b80b883a 	mov	r5,r23
    f924:	d8800315 	stw	r2,12(sp)
    f928:	000ebe40 	call	ebe4 <__umodsi3>
    f92c:	d9800317 	ldw	r6,12(sp)
    f930:	1004943a 	slli	r2,r2,16
    f934:	9808d43a 	srli	r4,r19,16
    f938:	372d383a 	mul	r22,r6,fp
    f93c:	d9c00117 	ldw	r7,4(sp)
    f940:	1106b03a 	or	r3,r2,r4
    f944:	da000217 	ldw	r8,8(sp)
    f948:	1d80062e 	bgeu	r3,r22,f964 <__divdf3+0x4dc>
    f94c:	1c07883a 	add	r3,r3,r16
    f950:	30bfffc4 	addi	r2,r6,-1
    f954:	1c00a036 	bltu	r3,r16,fbd8 <__divdf3+0x750>
    f958:	1d809f2e 	bgeu	r3,r22,fbd8 <__divdf3+0x750>
    f95c:	31bfff84 	addi	r6,r6,-2
    f960:	1c07883a 	add	r3,r3,r16
    f964:	1dadc83a 	sub	r22,r3,r22
    f968:	b009883a 	mov	r4,r22
    f96c:	b80b883a 	mov	r5,r23
    f970:	d9800315 	stw	r6,12(sp)
    f974:	d9c00115 	stw	r7,4(sp)
    f978:	da000215 	stw	r8,8(sp)
    f97c:	000ebdc0 	call	ebdc <__udivsi3>
    f980:	b009883a 	mov	r4,r22
    f984:	b80b883a 	mov	r5,r23
    f988:	d8800015 	stw	r2,0(sp)
    f98c:	000ebe40 	call	ebe4 <__umodsi3>
    f990:	da400017 	ldw	r9,0(sp)
    f994:	1004943a 	slli	r2,r2,16
    f998:	993fffcc 	andi	r4,r19,65535
    f99c:	4f39383a 	mul	fp,r9,fp
    f9a0:	1106b03a 	or	r3,r2,r4
    f9a4:	d9800317 	ldw	r6,12(sp)
    f9a8:	d9c00117 	ldw	r7,4(sp)
    f9ac:	da000217 	ldw	r8,8(sp)
    f9b0:	1f00062e 	bgeu	r3,fp,f9cc <__divdf3+0x544>
    f9b4:	1c07883a 	add	r3,r3,r16
    f9b8:	48bfffc4 	addi	r2,r9,-1
    f9bc:	1c008836 	bltu	r3,r16,fbe0 <__divdf3+0x758>
    f9c0:	1f00872e 	bgeu	r3,fp,fbe0 <__divdf3+0x758>
    f9c4:	4a7fff84 	addi	r9,r9,-2
    f9c8:	1c07883a 	add	r3,r3,r16
    f9cc:	3008943a 	slli	r4,r6,16
    f9d0:	1f07c83a 	sub	r3,r3,fp
    f9d4:	4926b03a 	or	r19,r9,r4
    f9d8:	993fffcc 	andi	r4,r19,65535
    f9dc:	980cd43a 	srli	r6,r19,16
    f9e0:	220b383a 	mul	r5,r4,r8
    f9e4:	21c5383a 	mul	r2,r4,r7
    f9e8:	3211383a 	mul	r8,r6,r8
    f9ec:	2808d43a 	srli	r4,r5,16
    f9f0:	31cf383a 	mul	r7,r6,r7
    f9f4:	4085883a 	add	r2,r8,r2
    f9f8:	1105883a 	add	r2,r2,r4
    f9fc:	1200022e 	bgeu	r2,r8,fa08 <__divdf3+0x580>
    fa00:	01000074 	movhi	r4,1
    fa04:	390f883a 	add	r7,r7,r4
    fa08:	1008d43a 	srli	r4,r2,16
    fa0c:	1004943a 	slli	r2,r2,16
    fa10:	297fffcc 	andi	r5,r5,65535
    fa14:	390f883a 	add	r7,r7,r4
    fa18:	1145883a 	add	r2,r2,r5
    fa1c:	19c06536 	bltu	r3,r7,fbb4 <__divdf3+0x72c>
    fa20:	19c09f26 	beq	r3,r7,fca0 <__divdf3+0x818>
    fa24:	9cc00054 	ori	r19,r19,1
    fa28:	a100ffc4 	addi	r4,r20,1023
    fa2c:	013f500e 	bge	zero,r4,f770 <__alt_mem_Flash_flash_data+0xf400f770>
    fa30:	988001cc 	andi	r2,r19,7
    fa34:	10000726 	beq	r2,zero,fa54 <__divdf3+0x5cc>
    fa38:	98c003cc 	andi	r3,r19,15
    fa3c:	00800104 	movi	r2,4
    fa40:	18800426 	beq	r3,r2,fa54 <__divdf3+0x5cc>
    fa44:	9885883a 	add	r2,r19,r2
    fa48:	14e1803a 	cmpltu	r16,r2,r19
    fa4c:	8c23883a 	add	r17,r17,r16
    fa50:	1027883a 	mov	r19,r2
    fa54:	8880402c 	andhi	r2,r17,256
    fa58:	10000426 	beq	r2,zero,fa6c <__divdf3+0x5e4>
    fa5c:	00bfc034 	movhi	r2,65280
    fa60:	10bfffc4 	addi	r2,r2,-1
    fa64:	a1010004 	addi	r4,r20,1024
    fa68:	88a2703a 	and	r17,r17,r2
    fa6c:	0081ff84 	movi	r2,2046
    fa70:	113edf16 	blt	r2,r4,f5f0 <__alt_mem_Flash_flash_data+0xf400f5f0>
    fa74:	9826d0fa 	srli	r19,r19,3
    fa78:	8804977a 	slli	r2,r17,29
    fa7c:	8820927a 	slli	r16,r17,9
    fa80:	2101ffcc 	andi	r4,r4,2047
    fa84:	14e6b03a 	or	r19,r2,r19
    fa88:	800ad33a 	srli	r5,r16,12
    fa8c:	9180004c 	andi	r6,r18,1
    fa90:	003edb06 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    fa94:	008000c4 	movi	r2,3
    fa98:	4080a826 	beq	r8,r2,fd3c <__divdf3+0x8b4>
    fa9c:	00800044 	movi	r2,1
    faa0:	4080551e 	bne	r8,r2,fbf8 <__divdf3+0x770>
    faa4:	e00d883a 	mov	r6,fp
    faa8:	0009883a 	mov	r4,zero
    faac:	000b883a 	mov	r5,zero
    fab0:	0027883a 	mov	r19,zero
    fab4:	003ed206 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    fab8:	00800434 	movhi	r2,16
    fabc:	89400234 	orhi	r5,r17,8
    fac0:	10bfffc4 	addi	r2,r2,-1
    fac4:	b00d883a 	mov	r6,r22
    fac8:	288a703a 	and	r5,r5,r2
    facc:	003f2606 	br	f768 <__alt_mem_Flash_flash_data+0xf400f768>
    fad0:	d9800315 	stw	r6,12(sp)
    fad4:	d9c00115 	stw	r7,4(sp)
    fad8:	00111880 	call	11188 <__clzsi2>
    fadc:	10c00804 	addi	r3,r2,32
    fae0:	010009c4 	movi	r4,39
    fae4:	d9800317 	ldw	r6,12(sp)
    fae8:	d9c00117 	ldw	r7,4(sp)
    faec:	20fee30e 	bge	r4,r3,f67c <__alt_mem_Flash_flash_data+0xf400f67c>
    faf0:	117ffe04 	addi	r5,r2,-8
    faf4:	9162983a 	sll	r17,r18,r5
    faf8:	0027883a 	mov	r19,zero
    fafc:	003ee606 	br	f698 <__alt_mem_Flash_flash_data+0xf400f698>
    fb00:	3009883a 	mov	r4,r6
    fb04:	d9800315 	stw	r6,12(sp)
    fb08:	da000215 	stw	r8,8(sp)
    fb0c:	da400015 	stw	r9,0(sp)
    fb10:	00111880 	call	11188 <__clzsi2>
    fb14:	10c00804 	addi	r3,r2,32
    fb18:	010009c4 	movi	r4,39
    fb1c:	d9800317 	ldw	r6,12(sp)
    fb20:	da000217 	ldw	r8,8(sp)
    fb24:	da400017 	ldw	r9,0(sp)
    fb28:	20fef20e 	bge	r4,r3,f6f4 <__alt_mem_Flash_flash_data+0xf400f6f4>
    fb2c:	10bffe04 	addi	r2,r2,-8
    fb30:	a8a0983a 	sll	r16,r21,r2
    fb34:	002b883a 	mov	r21,zero
    fb38:	003ef506 	br	f710 <__alt_mem_Flash_flash_data+0xf400f710>
    fb3c:	354d883a 	add	r6,r6,r21
    fb40:	3549803a 	cmpltu	r4,r6,r21
    fb44:	2409883a 	add	r4,r4,r16
    fb48:	2089883a 	add	r4,r4,r2
    fb4c:	88bfffc4 	addi	r2,r17,-1
    fb50:	81000c2e 	bgeu	r16,r4,fb84 <__divdf3+0x6fc>
    fb54:	20c04436 	bltu	r4,r3,fc68 <__divdf3+0x7e0>
    fb58:	19006f26 	beq	r3,r4,fd18 <__divdf3+0x890>
    fb5c:	20c7c83a 	sub	r3,r4,r3
    fb60:	1023883a 	mov	r17,r2
    fb64:	003f6406 	br	f8f8 <__alt_mem_Flash_flash_data+0xf400f8f8>
    fb68:	9d7f1736 	bltu	r19,r21,f7c8 <__alt_mem_Flash_flash_data+0xf400f7c8>
    fb6c:	9806d07a 	srli	r3,r19,1
    fb70:	880497fa 	slli	r2,r17,31
    fb74:	980c97fa 	slli	r6,r19,31
    fb78:	882cd07a 	srli	r22,r17,1
    fb7c:	18a6b03a 	or	r19,r3,r2
    fb80:	003f1406 	br	f7d4 <__alt_mem_Flash_flash_data+0xf400f7d4>
    fb84:	243ff51e 	bne	r4,r16,fb5c <__alt_mem_Flash_flash_data+0xf400fb5c>
    fb88:	357ff22e 	bgeu	r6,r21,fb54 <__alt_mem_Flash_flash_data+0xf400fb54>
    fb8c:	80c7c83a 	sub	r3,r16,r3
    fb90:	1023883a 	mov	r17,r2
    fb94:	003f5806 	br	f8f8 <__alt_mem_Flash_flash_data+0xf400f8f8>
    fb98:	1013883a 	mov	r9,r2
    fb9c:	003f3d06 	br	f894 <__alt_mem_Flash_flash_data+0xf400f894>
    fba0:	1023883a 	mov	r17,r2
    fba4:	003f2506 	br	f83c <__alt_mem_Flash_flash_data+0xf400f83c>
    fba8:	317fe436 	bltu	r6,r5,fb3c <__alt_mem_Flash_flash_data+0xf400fb3c>
    fbac:	0007883a 	mov	r3,zero
    fbb0:	003f5106 	br	f8f8 <__alt_mem_Flash_flash_data+0xf400f8f8>
    fbb4:	1c07883a 	add	r3,r3,r16
    fbb8:	993fffc4 	addi	r4,r19,-1
    fbbc:	1c000a2e 	bgeu	r3,r16,fbe8 <__divdf3+0x760>
    fbc0:	2027883a 	mov	r19,r4
    fbc4:	19ff971e 	bne	r3,r7,fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fbc8:	a8bf961e 	bne	r21,r2,fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fbcc:	003f9606 	br	fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fbd0:	04ffffc4 	movi	r19,-1
    fbd4:	003f9406 	br	fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fbd8:	100d883a 	mov	r6,r2
    fbdc:	003f6106 	br	f964 <__alt_mem_Flash_flash_data+0xf400f964>
    fbe0:	1013883a 	mov	r9,r2
    fbe4:	003f7906 	br	f9cc <__alt_mem_Flash_flash_data+0xf400f9cc>
    fbe8:	19c02636 	bltu	r3,r7,fc84 <__divdf3+0x7fc>
    fbec:	38c04d26 	beq	r7,r3,fd24 <__divdf3+0x89c>
    fbf0:	2027883a 	mov	r19,r4
    fbf4:	003f8b06 	br	fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fbf8:	e025883a 	mov	r18,fp
    fbfc:	003f8a06 	br	fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fc00:	008007c4 	movi	r2,31
    fc04:	14002a16 	blt	r2,r16,fcb0 <__divdf3+0x828>
    fc08:	a5010784 	addi	r20,r20,1054
    fc0c:	8d04983a 	sll	r2,r17,r20
    fc10:	9c06d83a 	srl	r3,r19,r16
    fc14:	9d28983a 	sll	r20,r19,r20
    fc18:	8c20d83a 	srl	r16,r17,r16
    fc1c:	1886b03a 	or	r3,r3,r2
    fc20:	a004c03a 	cmpne	r2,r20,zero
    fc24:	1884b03a 	or	r2,r3,r2
    fc28:	10c001cc 	andi	r3,r2,7
    fc2c:	18000726 	beq	r3,zero,fc4c <__divdf3+0x7c4>
    fc30:	110003cc 	andi	r4,r2,15
    fc34:	00c00104 	movi	r3,4
    fc38:	20c00426 	beq	r4,r3,fc4c <__divdf3+0x7c4>
    fc3c:	10c00104 	addi	r3,r2,4
    fc40:	1885803a 	cmpltu	r2,r3,r2
    fc44:	80a1883a 	add	r16,r16,r2
    fc48:	1805883a 	mov	r2,r3
    fc4c:	80c0202c 	andhi	r3,r16,128
    fc50:	18002d26 	beq	r3,zero,fd08 <__divdf3+0x880>
    fc54:	9180004c 	andi	r6,r18,1
    fc58:	01000044 	movi	r4,1
    fc5c:	000b883a 	mov	r5,zero
    fc60:	0027883a 	mov	r19,zero
    fc64:	003e6606 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    fc68:	354d883a 	add	r6,r6,r21
    fc6c:	356d803a 	cmpltu	r22,r6,r21
    fc70:	b42d883a 	add	r22,r22,r16
    fc74:	b12d883a 	add	r22,r22,r4
    fc78:	8c7fff84 	addi	r17,r17,-2
    fc7c:	b0c7c83a 	sub	r3,r22,r3
    fc80:	003f1d06 	br	f8f8 <__alt_mem_Flash_flash_data+0xf400f8f8>
    fc84:	ad4b883a 	add	r5,r21,r21
    fc88:	2d6b803a 	cmpltu	r21,r5,r21
    fc8c:	ac2b883a 	add	r21,r21,r16
    fc90:	1d47883a 	add	r3,r3,r21
    fc94:	993fff84 	addi	r4,r19,-2
    fc98:	282b883a 	mov	r21,r5
    fc9c:	003fc806 	br	fbc0 <__alt_mem_Flash_flash_data+0xf400fbc0>
    fca0:	103fc41e 	bne	r2,zero,fbb4 <__alt_mem_Flash_flash_data+0xf400fbb4>
    fca4:	002b883a 	mov	r21,zero
    fca8:	a8bf5e1e 	bne	r21,r2,fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fcac:	003f5e06 	br	fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fcb0:	00bef884 	movi	r2,-1054
    fcb4:	1505c83a 	sub	r2,r2,r20
    fcb8:	00c00804 	movi	r3,32
    fcbc:	8884d83a 	srl	r2,r17,r2
    fcc0:	80c01c26 	beq	r16,r3,fd34 <__divdf3+0x8ac>
    fcc4:	a0c10f84 	addi	r3,r20,1086
    fcc8:	88c6983a 	sll	r3,r17,r3
    fccc:	1cc6b03a 	or	r3,r3,r19
    fcd0:	1806c03a 	cmpne	r3,r3,zero
    fcd4:	1884b03a 	or	r2,r3,r2
    fcd8:	140001cc 	andi	r16,r2,7
    fcdc:	8000061e 	bne	r16,zero,fcf8 <__divdf3+0x870>
    fce0:	000b883a 	mov	r5,zero
    fce4:	1004d0fa 	srli	r2,r2,3
    fce8:	9180004c 	andi	r6,r18,1
    fcec:	0009883a 	mov	r4,zero
    fcf0:	1426b03a 	or	r19,r2,r16
    fcf4:	003e4206 	br	f600 <__alt_mem_Flash_flash_data+0xf400f600>
    fcf8:	110003cc 	andi	r4,r2,15
    fcfc:	00c00104 	movi	r3,4
    fd00:	0021883a 	mov	r16,zero
    fd04:	20ffcd1e 	bne	r4,r3,fc3c <__alt_mem_Flash_flash_data+0xf400fc3c>
    fd08:	800a927a 	slli	r5,r16,9
    fd0c:	8020977a 	slli	r16,r16,29
    fd10:	280ad33a 	srli	r5,r5,12
    fd14:	003ff306 	br	fce4 <__alt_mem_Flash_flash_data+0xf400fce4>
    fd18:	317fd336 	bltu	r6,r5,fc68 <__alt_mem_Flash_flash_data+0xf400fc68>
    fd1c:	1023883a 	mov	r17,r2
    fd20:	003fa206 	br	fbac <__alt_mem_Flash_flash_data+0xf400fbac>
    fd24:	a8bfd736 	bltu	r21,r2,fc84 <__alt_mem_Flash_flash_data+0xf400fc84>
    fd28:	2027883a 	mov	r19,r4
    fd2c:	a8bf3d1e 	bne	r21,r2,fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fd30:	003f3d06 	br	fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fd34:	0007883a 	mov	r3,zero
    fd38:	003fe406 	br	fccc <__alt_mem_Flash_flash_data+0xf400fccc>
    fd3c:	00800434 	movhi	r2,16
    fd40:	89400234 	orhi	r5,r17,8
    fd44:	10bfffc4 	addi	r2,r2,-1
    fd48:	e00d883a 	mov	r6,fp
    fd4c:	288a703a 	and	r5,r5,r2
    fd50:	003e8506 	br	f768 <__alt_mem_Flash_flash_data+0xf400f768>

0000fd54 <__eqdf2>:
    fd54:	2804d53a 	srli	r2,r5,20
    fd58:	3806d53a 	srli	r3,r7,20
    fd5c:	02000434 	movhi	r8,16
    fd60:	423fffc4 	addi	r8,r8,-1
    fd64:	1081ffcc 	andi	r2,r2,2047
    fd68:	0241ffc4 	movi	r9,2047
    fd6c:	2a14703a 	and	r10,r5,r8
    fd70:	18c1ffcc 	andi	r3,r3,2047
    fd74:	3a10703a 	and	r8,r7,r8
    fd78:	280ad7fa 	srli	r5,r5,31
    fd7c:	380ed7fa 	srli	r7,r7,31
    fd80:	12400f26 	beq	r2,r9,fdc0 <__eqdf2+0x6c>
    fd84:	0241ffc4 	movi	r9,2047
    fd88:	1a400326 	beq	r3,r9,fd98 <__eqdf2+0x44>
    fd8c:	10c00526 	beq	r2,r3,fda4 <__eqdf2+0x50>
    fd90:	00800044 	movi	r2,1
    fd94:	f800283a 	ret
    fd98:	4192b03a 	or	r9,r8,r6
    fd9c:	483ffc1e 	bne	r9,zero,fd90 <__alt_mem_Flash_flash_data+0xf400fd90>
    fda0:	10fffb1e 	bne	r2,r3,fd90 <__alt_mem_Flash_flash_data+0xf400fd90>
    fda4:	523ffa1e 	bne	r10,r8,fd90 <__alt_mem_Flash_flash_data+0xf400fd90>
    fda8:	21bff91e 	bne	r4,r6,fd90 <__alt_mem_Flash_flash_data+0xf400fd90>
    fdac:	29c00826 	beq	r5,r7,fdd0 <__eqdf2+0x7c>
    fdb0:	103ff71e 	bne	r2,zero,fd90 <__alt_mem_Flash_flash_data+0xf400fd90>
    fdb4:	5104b03a 	or	r2,r10,r4
    fdb8:	1004c03a 	cmpne	r2,r2,zero
    fdbc:	f800283a 	ret
    fdc0:	5112b03a 	or	r9,r10,r4
    fdc4:	483fef26 	beq	r9,zero,fd84 <__alt_mem_Flash_flash_data+0xf400fd84>
    fdc8:	00800044 	movi	r2,1
    fdcc:	f800283a 	ret
    fdd0:	0005883a 	mov	r2,zero
    fdd4:	f800283a 	ret

0000fdd8 <__gedf2>:
    fdd8:	2804d53a 	srli	r2,r5,20
    fddc:	3806d53a 	srli	r3,r7,20
    fde0:	02000434 	movhi	r8,16
    fde4:	423fffc4 	addi	r8,r8,-1
    fde8:	0241ffc4 	movi	r9,2047
    fdec:	1081ffcc 	andi	r2,r2,2047
    fdf0:	2a14703a 	and	r10,r5,r8
    fdf4:	1a46703a 	and	r3,r3,r9
    fdf8:	3a10703a 	and	r8,r7,r8
    fdfc:	280ad7fa 	srli	r5,r5,31
    fe00:	380ed7fa 	srli	r7,r7,31
    fe04:	12400b26 	beq	r2,r9,fe34 <__gedf2+0x5c>
    fe08:	1a401626 	beq	r3,r9,fe64 <__gedf2+0x8c>
    fe0c:	10000c1e 	bne	r2,zero,fe40 <__gedf2+0x68>
    fe10:	5112b03a 	or	r9,r10,r4
    fe14:	4813003a 	cmpeq	r9,r9,zero
    fe18:	4817883a 	mov	r11,r9
    fe1c:	18000c1e 	bne	r3,zero,fe50 <__gedf2+0x78>
    fe20:	4198b03a 	or	r12,r8,r6
    fe24:	60000a1e 	bne	r12,zero,fe50 <__gedf2+0x78>
    fe28:	48001326 	beq	r9,zero,fe78 <__gedf2+0xa0>
    fe2c:	0005883a 	mov	r2,zero
    fe30:	f800283a 	ret
    fe34:	5112b03a 	or	r9,r10,r4
    fe38:	4800191e 	bne	r9,zero,fea0 <__gedf2+0xc8>
    fe3c:	18800926 	beq	r3,r2,fe64 <__gedf2+0x8c>
    fe40:	18000b1e 	bne	r3,zero,fe70 <__gedf2+0x98>
    fe44:	4192b03a 	or	r9,r8,r6
    fe48:	0017883a 	mov	r11,zero
    fe4c:	48000a26 	beq	r9,zero,fe78 <__gedf2+0xa0>
    fe50:	39c03fcc 	andi	r7,r7,255
    fe54:	58000726 	beq	r11,zero,fe74 <__gedf2+0x9c>
    fe58:	3800081e 	bne	r7,zero,fe7c <__gedf2+0xa4>
    fe5c:	00bfffc4 	movi	r2,-1
    fe60:	f800283a 	ret
    fe64:	4192b03a 	or	r9,r8,r6
    fe68:	48000d1e 	bne	r9,zero,fea0 <__gedf2+0xc8>
    fe6c:	103fe826 	beq	r2,zero,fe10 <__alt_mem_Flash_flash_data+0xf400fe10>
    fe70:	39c03fcc 	andi	r7,r7,255
    fe74:	29c00326 	beq	r5,r7,fe84 <__gedf2+0xac>
    fe78:	283ff81e 	bne	r5,zero,fe5c <__alt_mem_Flash_flash_data+0xf400fe5c>
    fe7c:	00800044 	movi	r2,1
    fe80:	f800283a 	ret
    fe84:	18bffc16 	blt	r3,r2,fe78 <__alt_mem_Flash_flash_data+0xf400fe78>
    fe88:	10c00316 	blt	r2,r3,fe98 <__gedf2+0xc0>
    fe8c:	42bffa36 	bltu	r8,r10,fe78 <__alt_mem_Flash_flash_data+0xf400fe78>
    fe90:	52000526 	beq	r10,r8,fea8 <__gedf2+0xd0>
    fe94:	523fe52e 	bgeu	r10,r8,fe2c <__alt_mem_Flash_flash_data+0xf400fe2c>
    fe98:	283ff026 	beq	r5,zero,fe5c <__alt_mem_Flash_flash_data+0xf400fe5c>
    fe9c:	003ff706 	br	fe7c <__alt_mem_Flash_flash_data+0xf400fe7c>
    fea0:	00bfff84 	movi	r2,-2
    fea4:	f800283a 	ret
    fea8:	313ff336 	bltu	r6,r4,fe78 <__alt_mem_Flash_flash_data+0xf400fe78>
    feac:	21bfdf2e 	bgeu	r4,r6,fe2c <__alt_mem_Flash_flash_data+0xf400fe2c>
    feb0:	283fea26 	beq	r5,zero,fe5c <__alt_mem_Flash_flash_data+0xf400fe5c>
    feb4:	003ff106 	br	fe7c <__alt_mem_Flash_flash_data+0xf400fe7c>

0000feb8 <__ledf2>:
    feb8:	2804d53a 	srli	r2,r5,20
    febc:	3810d53a 	srli	r8,r7,20
    fec0:	00c00434 	movhi	r3,16
    fec4:	18ffffc4 	addi	r3,r3,-1
    fec8:	0241ffc4 	movi	r9,2047
    fecc:	1081ffcc 	andi	r2,r2,2047
    fed0:	28d4703a 	and	r10,r5,r3
    fed4:	4250703a 	and	r8,r8,r9
    fed8:	38c6703a 	and	r3,r7,r3
    fedc:	280ad7fa 	srli	r5,r5,31
    fee0:	380ed7fa 	srli	r7,r7,31
    fee4:	12400b26 	beq	r2,r9,ff14 <__ledf2+0x5c>
    fee8:	42401926 	beq	r8,r9,ff50 <__ledf2+0x98>
    feec:	10000c1e 	bne	r2,zero,ff20 <__ledf2+0x68>
    fef0:	5112b03a 	or	r9,r10,r4
    fef4:	4813003a 	cmpeq	r9,r9,zero
    fef8:	4817883a 	mov	r11,r9
    fefc:	40000f26 	beq	r8,zero,ff3c <__ledf2+0x84>
    ff00:	39c03fcc 	andi	r7,r7,255
    ff04:	58001826 	beq	r11,zero,ff68 <__ledf2+0xb0>
    ff08:	38000a1e 	bne	r7,zero,ff34 <__ledf2+0x7c>
    ff0c:	00bfffc4 	movi	r2,-1
    ff10:	f800283a 	ret
    ff14:	5112b03a 	or	r9,r10,r4
    ff18:	48000f1e 	bne	r9,zero,ff58 <__ledf2+0xa0>
    ff1c:	40800c26 	beq	r8,r2,ff50 <__ledf2+0x98>
    ff20:	4000101e 	bne	r8,zero,ff64 <__ledf2+0xac>
    ff24:	1992b03a 	or	r9,r3,r6
    ff28:	0017883a 	mov	r11,zero
    ff2c:	483ff41e 	bne	r9,zero,ff00 <__alt_mem_Flash_flash_data+0xf400ff00>
    ff30:	283ff61e 	bne	r5,zero,ff0c <__alt_mem_Flash_flash_data+0xf400ff0c>
    ff34:	00800044 	movi	r2,1
    ff38:	f800283a 	ret
    ff3c:	1998b03a 	or	r12,r3,r6
    ff40:	603fef1e 	bne	r12,zero,ff00 <__alt_mem_Flash_flash_data+0xf400ff00>
    ff44:	483ffa26 	beq	r9,zero,ff30 <__alt_mem_Flash_flash_data+0xf400ff30>
    ff48:	0005883a 	mov	r2,zero
    ff4c:	f800283a 	ret
    ff50:	1992b03a 	or	r9,r3,r6
    ff54:	48000226 	beq	r9,zero,ff60 <__ledf2+0xa8>
    ff58:	00800084 	movi	r2,2
    ff5c:	f800283a 	ret
    ff60:	103fe326 	beq	r2,zero,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
    ff64:	39c03fcc 	andi	r7,r7,255
    ff68:	29fff11e 	bne	r5,r7,ff30 <__alt_mem_Flash_flash_data+0xf400ff30>
    ff6c:	40bff016 	blt	r8,r2,ff30 <__alt_mem_Flash_flash_data+0xf400ff30>
    ff70:	12000316 	blt	r2,r8,ff80 <__ledf2+0xc8>
    ff74:	1abfee36 	bltu	r3,r10,ff30 <__alt_mem_Flash_flash_data+0xf400ff30>
    ff78:	50c00326 	beq	r10,r3,ff88 <__ledf2+0xd0>
    ff7c:	50fff22e 	bgeu	r10,r3,ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
    ff80:	283fe226 	beq	r5,zero,ff0c <__alt_mem_Flash_flash_data+0xf400ff0c>
    ff84:	003feb06 	br	ff34 <__alt_mem_Flash_flash_data+0xf400ff34>
    ff88:	313fe936 	bltu	r6,r4,ff30 <__alt_mem_Flash_flash_data+0xf400ff30>
    ff8c:	21bfee2e 	bgeu	r4,r6,ff48 <__alt_mem_Flash_flash_data+0xf400ff48>
    ff90:	283fde26 	beq	r5,zero,ff0c <__alt_mem_Flash_flash_data+0xf400ff0c>
    ff94:	003fe706 	br	ff34 <__alt_mem_Flash_flash_data+0xf400ff34>

0000ff98 <__muldf3>:
    ff98:	defff204 	addi	sp,sp,-56
    ff9c:	2804d53a 	srli	r2,r5,20
    ffa0:	dd800a15 	stw	r22,40(sp)
    ffa4:	282cd7fa 	srli	r22,r5,31
    ffa8:	dc000415 	stw	r16,16(sp)
    ffac:	04000434 	movhi	r16,16
    ffb0:	df000c15 	stw	fp,48(sp)
    ffb4:	dd000815 	stw	r20,32(sp)
    ffb8:	dcc00715 	stw	r19,28(sp)
    ffbc:	dc800615 	stw	r18,24(sp)
    ffc0:	dc400515 	stw	r17,20(sp)
    ffc4:	843fffc4 	addi	r16,r16,-1
    ffc8:	dfc00d15 	stw	ra,52(sp)
    ffcc:	ddc00b15 	stw	r23,44(sp)
    ffd0:	dd400915 	stw	r21,36(sp)
    ffd4:	1501ffcc 	andi	r20,r2,2047
    ffd8:	2023883a 	mov	r17,r4
    ffdc:	2025883a 	mov	r18,r4
    ffe0:	2c20703a 	and	r16,r5,r16
    ffe4:	b027883a 	mov	r19,r22
    ffe8:	b7003fcc 	andi	fp,r22,255
    ffec:	a0005926 	beq	r20,zero,10154 <__muldf3+0x1bc>
    fff0:	0081ffc4 	movi	r2,2047
    fff4:	a0803426 	beq	r20,r2,100c8 <__muldf3+0x130>
    fff8:	84000434 	orhi	r16,r16,16
    fffc:	2004d77a 	srli	r2,r4,29
   10000:	802090fa 	slli	r16,r16,3
   10004:	202490fa 	slli	r18,r4,3
   10008:	a53f0044 	addi	r20,r20,-1023
   1000c:	80a0b03a 	or	r16,r16,r2
   10010:	002b883a 	mov	r21,zero
   10014:	0015883a 	mov	r10,zero
   10018:	3812d53a 	srli	r9,r7,20
   1001c:	3806d7fa 	srli	r3,r7,31
   10020:	02000434 	movhi	r8,16
   10024:	423fffc4 	addi	r8,r8,-1
   10028:	4941ffcc 	andi	r5,r9,2047
   1002c:	302f883a 	mov	r23,r6
   10030:	3a22703a 	and	r17,r7,r8
   10034:	1ac03fcc 	andi	r11,r3,255
   10038:	28006226 	beq	r5,zero,101c4 <__muldf3+0x22c>
   1003c:	0081ffc4 	movi	r2,2047
   10040:	28805a26 	beq	r5,r2,101ac <__muldf3+0x214>
   10044:	8a000434 	orhi	r8,r17,16
   10048:	3004d77a 	srli	r2,r6,29
   1004c:	401090fa 	slli	r8,r8,3
   10050:	302e90fa 	slli	r23,r6,3
   10054:	297f0044 	addi	r5,r5,-1023
   10058:	40a2b03a 	or	r17,r8,r2
   1005c:	0013883a 	mov	r9,zero
   10060:	4d4cb03a 	or	r6,r9,r21
   10064:	300c90ba 	slli	r6,r6,2
   10068:	02000074 	movhi	r8,1
   1006c:	42002204 	addi	r8,r8,136
   10070:	320d883a 	add	r6,r6,r8
   10074:	31800017 	ldw	r6,0(r6)
   10078:	a14b883a 	add	r5,r20,r5
   1007c:	1dacf03a 	xor	r22,r3,r22
   10080:	2b000044 	addi	r12,r5,1
   10084:	3000683a 	jmp	r6
   10088:	000102c4 	movi	zero,1035
   1008c:	000102b0 	cmpltui	zero,zero,1034
   10090:	000102b0 	cmpltui	zero,zero,1034
   10094:	0001029c 	xori	zero,zero,1034
   10098:	000100e4 	muli	zero,zero,1027
   1009c:	000100e4 	muli	zero,zero,1027
   100a0:	00010284 	movi	zero,1034
   100a4:	0001029c 	xori	zero,zero,1034
   100a8:	000100e4 	muli	zero,zero,1027
   100ac:	00010284 	movi	zero,1034
   100b0:	000100e4 	muli	zero,zero,1027
   100b4:	0001029c 	xori	zero,zero,1034
   100b8:	000100e8 	cmpgeui	zero,zero,1027
   100bc:	000100e8 	cmpgeui	zero,zero,1027
   100c0:	000100e8 	cmpgeui	zero,zero,1027
   100c4:	000104c0 	call	104c <typen+0xdc>
   100c8:	8104b03a 	or	r2,r16,r4
   100cc:	10006a1e 	bne	r2,zero,10278 <__muldf3+0x2e0>
   100d0:	05400204 	movi	r21,8
   100d4:	0021883a 	mov	r16,zero
   100d8:	0025883a 	mov	r18,zero
   100dc:	02800084 	movi	r10,2
   100e0:	003fcd06 	br	10018 <__alt_mem_Flash_flash_data+0xf4010018>
   100e4:	b039883a 	mov	fp,r22
   100e8:	00800084 	movi	r2,2
   100ec:	50804e1e 	bne	r10,r2,10228 <__muldf3+0x290>
   100f0:	e4c0004c 	andi	r19,fp,1
   100f4:	0101ffc4 	movi	r4,2047
   100f8:	0021883a 	mov	r16,zero
   100fc:	0025883a 	mov	r18,zero
   10100:	2008953a 	slli	r4,r4,20
   10104:	98c03fcc 	andi	r3,r19,255
   10108:	01400434 	movhi	r5,16
   1010c:	297fffc4 	addi	r5,r5,-1
   10110:	180697fa 	slli	r3,r3,31
   10114:	8160703a 	and	r16,r16,r5
   10118:	8120b03a 	or	r16,r16,r4
   1011c:	80c6b03a 	or	r3,r16,r3
   10120:	9005883a 	mov	r2,r18
   10124:	dfc00d17 	ldw	ra,52(sp)
   10128:	df000c17 	ldw	fp,48(sp)
   1012c:	ddc00b17 	ldw	r23,44(sp)
   10130:	dd800a17 	ldw	r22,40(sp)
   10134:	dd400917 	ldw	r21,36(sp)
   10138:	dd000817 	ldw	r20,32(sp)
   1013c:	dcc00717 	ldw	r19,28(sp)
   10140:	dc800617 	ldw	r18,24(sp)
   10144:	dc400517 	ldw	r17,20(sp)
   10148:	dc000417 	ldw	r16,16(sp)
   1014c:	dec00e04 	addi	sp,sp,56
   10150:	f800283a 	ret
   10154:	8104b03a 	or	r2,r16,r4
   10158:	10004226 	beq	r2,zero,10264 <__muldf3+0x2cc>
   1015c:	8000f926 	beq	r16,zero,10544 <__muldf3+0x5ac>
   10160:	8009883a 	mov	r4,r16
   10164:	d9800315 	stw	r6,12(sp)
   10168:	d9c00015 	stw	r7,0(sp)
   1016c:	00111880 	call	11188 <__clzsi2>
   10170:	d9800317 	ldw	r6,12(sp)
   10174:	d9c00017 	ldw	r7,0(sp)
   10178:	1007883a 	mov	r3,r2
   1017c:	01000a04 	movi	r4,40
   10180:	18bffe04 	addi	r2,r3,-8
   10184:	20c9c83a 	sub	r4,r4,r3
   10188:	80a0983a 	sll	r16,r16,r2
   1018c:	8908d83a 	srl	r4,r17,r4
   10190:	88a4983a 	sll	r18,r17,r2
   10194:	2420b03a 	or	r16,r4,r16
   10198:	017f0344 	movi	r5,-1011
   1019c:	28e9c83a 	sub	r20,r5,r3
   101a0:	002b883a 	mov	r21,zero
   101a4:	0015883a 	mov	r10,zero
   101a8:	003f9b06 	br	10018 <__alt_mem_Flash_flash_data+0xf4010018>
   101ac:	8984b03a 	or	r2,r17,r6
   101b0:	10002a1e 	bne	r2,zero,1025c <__muldf3+0x2c4>
   101b4:	0023883a 	mov	r17,zero
   101b8:	002f883a 	mov	r23,zero
   101bc:	02400084 	movi	r9,2
   101c0:	003fa706 	br	10060 <__alt_mem_Flash_flash_data+0xf4010060>
   101c4:	8984b03a 	or	r2,r17,r6
   101c8:	10002026 	beq	r2,zero,1024c <__muldf3+0x2b4>
   101cc:	8800cc26 	beq	r17,zero,10500 <__muldf3+0x568>
   101d0:	8809883a 	mov	r4,r17
   101d4:	d8c00215 	stw	r3,8(sp)
   101d8:	d9800315 	stw	r6,12(sp)
   101dc:	da800015 	stw	r10,0(sp)
   101e0:	dac00115 	stw	r11,4(sp)
   101e4:	00111880 	call	11188 <__clzsi2>
   101e8:	d8c00217 	ldw	r3,8(sp)
   101ec:	d9800317 	ldw	r6,12(sp)
   101f0:	da800017 	ldw	r10,0(sp)
   101f4:	dac00117 	ldw	r11,4(sp)
   101f8:	1009883a 	mov	r4,r2
   101fc:	01400a04 	movi	r5,40
   10200:	25fffe04 	addi	r23,r4,-8
   10204:	290bc83a 	sub	r5,r5,r4
   10208:	8dd0983a 	sll	r8,r17,r23
   1020c:	314ad83a 	srl	r5,r6,r5
   10210:	35ee983a 	sll	r23,r6,r23
   10214:	2a22b03a 	or	r17,r5,r8
   10218:	017f0344 	movi	r5,-1011
   1021c:	290bc83a 	sub	r5,r5,r4
   10220:	0013883a 	mov	r9,zero
   10224:	003f8e06 	br	10060 <__alt_mem_Flash_flash_data+0xf4010060>
   10228:	008000c4 	movi	r2,3
   1022c:	50811d26 	beq	r10,r2,106a4 <__muldf3+0x70c>
   10230:	00800044 	movi	r2,1
   10234:	5080e01e 	bne	r10,r2,105b8 <__muldf3+0x620>
   10238:	e0a6703a 	and	r19,fp,r2
   1023c:	0009883a 	mov	r4,zero
   10240:	0021883a 	mov	r16,zero
   10244:	0025883a 	mov	r18,zero
   10248:	003fad06 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   1024c:	0023883a 	mov	r17,zero
   10250:	002f883a 	mov	r23,zero
   10254:	02400044 	movi	r9,1
   10258:	003f8106 	br	10060 <__alt_mem_Flash_flash_data+0xf4010060>
   1025c:	024000c4 	movi	r9,3
   10260:	003f7f06 	br	10060 <__alt_mem_Flash_flash_data+0xf4010060>
   10264:	05400104 	movi	r21,4
   10268:	0021883a 	mov	r16,zero
   1026c:	0025883a 	mov	r18,zero
   10270:	02800044 	movi	r10,1
   10274:	003f6806 	br	10018 <__alt_mem_Flash_flash_data+0xf4010018>
   10278:	05400304 	movi	r21,12
   1027c:	028000c4 	movi	r10,3
   10280:	003f6506 	br	10018 <__alt_mem_Flash_flash_data+0xf4010018>
   10284:	04000434 	movhi	r16,16
   10288:	0027883a 	mov	r19,zero
   1028c:	843fffc4 	addi	r16,r16,-1
   10290:	04bfffc4 	movi	r18,-1
   10294:	0101ffc4 	movi	r4,2047
   10298:	003f9906 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   1029c:	8821883a 	mov	r16,r17
   102a0:	b825883a 	mov	r18,r23
   102a4:	5839883a 	mov	fp,r11
   102a8:	4815883a 	mov	r10,r9
   102ac:	003f8e06 	br	100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   102b0:	8821883a 	mov	r16,r17
   102b4:	b825883a 	mov	r18,r23
   102b8:	b039883a 	mov	fp,r22
   102bc:	4815883a 	mov	r10,r9
   102c0:	003f8906 	br	100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   102c4:	b80cd43a 	srli	r6,r23,16
   102c8:	9006d43a 	srli	r3,r18,16
   102cc:	90bfffcc 	andi	r2,r18,65535
   102d0:	bdffffcc 	andi	r23,r23,65535
   102d4:	b891383a 	mul	r8,r23,r2
   102d8:	b8c9383a 	mul	r4,r23,r3
   102dc:	309b383a 	mul	r13,r6,r2
   102e0:	400ed43a 	srli	r7,r8,16
   102e4:	30df383a 	mul	r15,r6,r3
   102e8:	235b883a 	add	r13,r4,r13
   102ec:	69db883a 	add	r13,r13,r7
   102f0:	6900022e 	bgeu	r13,r4,102fc <__muldf3+0x364>
   102f4:	01000074 	movhi	r4,1
   102f8:	791f883a 	add	r15,r15,r4
   102fc:	8828d43a 	srli	r20,r17,16
   10300:	8c7fffcc 	andi	r17,r17,65535
   10304:	888f383a 	mul	r7,r17,r2
   10308:	88d3383a 	mul	r9,r17,r3
   1030c:	a0a5383a 	mul	r18,r20,r2
   10310:	3816d43a 	srli	r11,r7,16
   10314:	6814943a 	slli	r10,r13,16
   10318:	4ca5883a 	add	r18,r9,r18
   1031c:	423fffcc 	andi	r8,r8,65535
   10320:	92e5883a 	add	r18,r18,r11
   10324:	6808d43a 	srli	r4,r13,16
   10328:	5215883a 	add	r10,r10,r8
   1032c:	a0c7383a 	mul	r3,r20,r3
   10330:	9240022e 	bgeu	r18,r9,1033c <__muldf3+0x3a4>
   10334:	00800074 	movhi	r2,1
   10338:	1887883a 	add	r3,r3,r2
   1033c:	802ad43a 	srli	r21,r16,16
   10340:	80bfffcc 	andi	r2,r16,65535
   10344:	b893383a 	mul	r9,r23,r2
   10348:	3091383a 	mul	r8,r6,r2
   1034c:	bd6f383a 	mul	r23,r23,r21
   10350:	9026943a 	slli	r19,r18,16
   10354:	481ad43a 	srli	r13,r9,16
   10358:	9024d43a 	srli	r18,r18,16
   1035c:	39ffffcc 	andi	r7,r7,65535
   10360:	ba11883a 	add	r8,r23,r8
   10364:	99e7883a 	add	r19,r19,r7
   10368:	4351883a 	add	r8,r8,r13
   1036c:	1c97883a 	add	r11,r3,r18
   10370:	354d383a 	mul	r6,r6,r21
   10374:	9925883a 	add	r18,r19,r4
   10378:	45c0022e 	bgeu	r8,r23,10384 <__muldf3+0x3ec>
   1037c:	00c00074 	movhi	r3,1
   10380:	30cd883a 	add	r6,r6,r3
   10384:	8889383a 	mul	r4,r17,r2
   10388:	8d63383a 	mul	r17,r17,r21
   1038c:	a085383a 	mul	r2,r20,r2
   10390:	200ed43a 	srli	r7,r4,16
   10394:	401cd43a 	srli	r14,r8,16
   10398:	401a943a 	slli	r13,r8,16
   1039c:	8885883a 	add	r2,r17,r2
   103a0:	4a3fffcc 	andi	r8,r9,65535
   103a4:	11c5883a 	add	r2,r2,r7
   103a8:	339d883a 	add	r14,r6,r14
   103ac:	6a11883a 	add	r8,r13,r8
   103b0:	a561383a 	mul	r16,r20,r21
   103b4:	1440022e 	bgeu	r2,r17,103c0 <__muldf3+0x428>
   103b8:	00c00074 	movhi	r3,1
   103bc:	80e1883a 	add	r16,r16,r3
   103c0:	1006943a 	slli	r3,r2,16
   103c4:	213fffcc 	andi	r4,r4,65535
   103c8:	93db883a 	add	r13,r18,r15
   103cc:	1909883a 	add	r4,r3,r4
   103d0:	22c7883a 	add	r3,r4,r11
   103d4:	6cd3803a 	cmpltu	r9,r13,r19
   103d8:	6a09883a 	add	r4,r13,r8
   103dc:	1a5b883a 	add	r13,r3,r9
   103e0:	2211803a 	cmpltu	r8,r4,r8
   103e4:	734d883a 	add	r6,r14,r13
   103e8:	100ed43a 	srli	r7,r2,16
   103ec:	6a53803a 	cmpltu	r9,r13,r9
   103f0:	3205883a 	add	r2,r6,r8
   103f4:	1ac7803a 	cmpltu	r3,r3,r11
   103f8:	1211803a 	cmpltu	r8,r2,r8
   103fc:	48c6b03a 	or	r3,r9,r3
   10400:	338d803a 	cmpltu	r6,r6,r14
   10404:	19c7883a 	add	r3,r3,r7
   10408:	418cb03a 	or	r6,r8,r6
   1040c:	1987883a 	add	r3,r3,r6
   10410:	2024927a 	slli	r18,r4,9
   10414:	1c07883a 	add	r3,r3,r16
   10418:	1806927a 	slli	r3,r3,9
   1041c:	1020d5fa 	srli	r16,r2,23
   10420:	2008d5fa 	srli	r4,r4,23
   10424:	9294b03a 	or	r10,r18,r10
   10428:	1004927a 	slli	r2,r2,9
   1042c:	5024c03a 	cmpne	r18,r10,zero
   10430:	1c20b03a 	or	r16,r3,r16
   10434:	9108b03a 	or	r4,r18,r4
   10438:	80c0402c 	andhi	r3,r16,256
   1043c:	20a4b03a 	or	r18,r4,r2
   10440:	18000726 	beq	r3,zero,10460 <__muldf3+0x4c8>
   10444:	9006d07a 	srli	r3,r18,1
   10448:	800897fa 	slli	r4,r16,31
   1044c:	9080004c 	andi	r2,r18,1
   10450:	8020d07a 	srli	r16,r16,1
   10454:	10c4b03a 	or	r2,r2,r3
   10458:	1124b03a 	or	r18,r2,r4
   1045c:	600b883a 	mov	r5,r12
   10460:	2900ffc4 	addi	r4,r5,1023
   10464:	01004b0e 	bge	zero,r4,10594 <__muldf3+0x5fc>
   10468:	908001cc 	andi	r2,r18,7
   1046c:	10000726 	beq	r2,zero,1048c <__muldf3+0x4f4>
   10470:	90c003cc 	andi	r3,r18,15
   10474:	00800104 	movi	r2,4
   10478:	18800426 	beq	r3,r2,1048c <__muldf3+0x4f4>
   1047c:	9087883a 	add	r3,r18,r2
   10480:	1c85803a 	cmpltu	r2,r3,r18
   10484:	80a1883a 	add	r16,r16,r2
   10488:	1825883a 	mov	r18,r3
   1048c:	8080402c 	andhi	r2,r16,256
   10490:	10000426 	beq	r2,zero,104a4 <__muldf3+0x50c>
   10494:	00bfc034 	movhi	r2,65280
   10498:	10bfffc4 	addi	r2,r2,-1
   1049c:	29010004 	addi	r4,r5,1024
   104a0:	80a0703a 	and	r16,r16,r2
   104a4:	0081ff84 	movi	r2,2046
   104a8:	1100320e 	bge	r2,r4,10574 <__muldf3+0x5dc>
   104ac:	b4c0004c 	andi	r19,r22,1
   104b0:	0101ffc4 	movi	r4,2047
   104b4:	0021883a 	mov	r16,zero
   104b8:	0025883a 	mov	r18,zero
   104bc:	003f1006 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   104c0:	8080022c 	andhi	r2,r16,8
   104c4:	10000926 	beq	r2,zero,104ec <__muldf3+0x554>
   104c8:	8880022c 	andhi	r2,r17,8
   104cc:	1000071e 	bne	r2,zero,104ec <__muldf3+0x554>
   104d0:	00800434 	movhi	r2,16
   104d4:	8c000234 	orhi	r16,r17,8
   104d8:	10bfffc4 	addi	r2,r2,-1
   104dc:	1827883a 	mov	r19,r3
   104e0:	80a0703a 	and	r16,r16,r2
   104e4:	b825883a 	mov	r18,r23
   104e8:	003f6a06 	br	10294 <__alt_mem_Flash_flash_data+0xf4010294>
   104ec:	00800434 	movhi	r2,16
   104f0:	84000234 	orhi	r16,r16,8
   104f4:	10bfffc4 	addi	r2,r2,-1
   104f8:	80a0703a 	and	r16,r16,r2
   104fc:	003f6506 	br	10294 <__alt_mem_Flash_flash_data+0xf4010294>
   10500:	3009883a 	mov	r4,r6
   10504:	d8c00215 	stw	r3,8(sp)
   10508:	d9800315 	stw	r6,12(sp)
   1050c:	da800015 	stw	r10,0(sp)
   10510:	dac00115 	stw	r11,4(sp)
   10514:	00111880 	call	11188 <__clzsi2>
   10518:	11000804 	addi	r4,r2,32
   1051c:	014009c4 	movi	r5,39
   10520:	d8c00217 	ldw	r3,8(sp)
   10524:	d9800317 	ldw	r6,12(sp)
   10528:	da800017 	ldw	r10,0(sp)
   1052c:	dac00117 	ldw	r11,4(sp)
   10530:	293f320e 	bge	r5,r4,101fc <__alt_mem_Flash_flash_data+0xf40101fc>
   10534:	10bffe04 	addi	r2,r2,-8
   10538:	b8a2983a 	sll	r17,r23,r2
   1053c:	002f883a 	mov	r23,zero
   10540:	003f3506 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   10544:	d9800315 	stw	r6,12(sp)
   10548:	d9c00015 	stw	r7,0(sp)
   1054c:	00111880 	call	11188 <__clzsi2>
   10550:	10c00804 	addi	r3,r2,32
   10554:	010009c4 	movi	r4,39
   10558:	d9800317 	ldw	r6,12(sp)
   1055c:	d9c00017 	ldw	r7,0(sp)
   10560:	20ff060e 	bge	r4,r3,1017c <__alt_mem_Flash_flash_data+0xf401017c>
   10564:	10bffe04 	addi	r2,r2,-8
   10568:	88a0983a 	sll	r16,r17,r2
   1056c:	0025883a 	mov	r18,zero
   10570:	003f0906 	br	10198 <__alt_mem_Flash_flash_data+0xf4010198>
   10574:	9004d0fa 	srli	r2,r18,3
   10578:	8024977a 	slli	r18,r16,29
   1057c:	8020927a 	slli	r16,r16,9
   10580:	2101ffcc 	andi	r4,r4,2047
   10584:	90a4b03a 	or	r18,r18,r2
   10588:	8020d33a 	srli	r16,r16,12
   1058c:	b4c0004c 	andi	r19,r22,1
   10590:	003edb06 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   10594:	00ff0084 	movi	r3,-1022
   10598:	1947c83a 	sub	r3,r3,r5
   1059c:	00800e04 	movi	r2,56
   105a0:	10c0080e 	bge	r2,r3,105c4 <__muldf3+0x62c>
   105a4:	b4c0004c 	andi	r19,r22,1
   105a8:	0009883a 	mov	r4,zero
   105ac:	0021883a 	mov	r16,zero
   105b0:	0025883a 	mov	r18,zero
   105b4:	003ed206 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   105b8:	600b883a 	mov	r5,r12
   105bc:	e02d883a 	mov	r22,fp
   105c0:	003fa706 	br	10460 <__alt_mem_Flash_flash_data+0xf4010460>
   105c4:	008007c4 	movi	r2,31
   105c8:	10c01816 	blt	r2,r3,1062c <__muldf3+0x694>
   105cc:	29410784 	addi	r5,r5,1054
   105d0:	8144983a 	sll	r2,r16,r5
   105d4:	90c8d83a 	srl	r4,r18,r3
   105d8:	914a983a 	sll	r5,r18,r5
   105dc:	80c6d83a 	srl	r3,r16,r3
   105e0:	2088b03a 	or	r4,r4,r2
   105e4:	2804c03a 	cmpne	r2,r5,zero
   105e8:	2084b03a 	or	r2,r4,r2
   105ec:	110001cc 	andi	r4,r2,7
   105f0:	20000726 	beq	r4,zero,10610 <__muldf3+0x678>
   105f4:	114003cc 	andi	r5,r2,15
   105f8:	01000104 	movi	r4,4
   105fc:	29000426 	beq	r5,r4,10610 <__muldf3+0x678>
   10600:	11000104 	addi	r4,r2,4
   10604:	2085803a 	cmpltu	r2,r4,r2
   10608:	1887883a 	add	r3,r3,r2
   1060c:	2005883a 	mov	r2,r4
   10610:	1900202c 	andhi	r4,r3,128
   10614:	20001826 	beq	r4,zero,10678 <__muldf3+0x6e0>
   10618:	b4c0004c 	andi	r19,r22,1
   1061c:	01000044 	movi	r4,1
   10620:	0021883a 	mov	r16,zero
   10624:	0025883a 	mov	r18,zero
   10628:	003eb506 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   1062c:	00bef884 	movi	r2,-1054
   10630:	1145c83a 	sub	r2,r2,r5
   10634:	8088d83a 	srl	r4,r16,r2
   10638:	00800804 	movi	r2,32
   1063c:	18801726 	beq	r3,r2,1069c <__muldf3+0x704>
   10640:	28810f84 	addi	r2,r5,1086
   10644:	8084983a 	sll	r2,r16,r2
   10648:	1484b03a 	or	r2,r2,r18
   1064c:	1004c03a 	cmpne	r2,r2,zero
   10650:	1104b03a 	or	r2,r2,r4
   10654:	10c001cc 	andi	r3,r2,7
   10658:	18000b1e 	bne	r3,zero,10688 <__muldf3+0x6f0>
   1065c:	0021883a 	mov	r16,zero
   10660:	1004d0fa 	srli	r2,r2,3
   10664:	b4c0004c 	andi	r19,r22,1
   10668:	0009883a 	mov	r4,zero
   1066c:	10e4b03a 	or	r18,r2,r3
   10670:	003ea306 	br	10100 <__alt_mem_Flash_flash_data+0xf4010100>
   10674:	0007883a 	mov	r3,zero
   10678:	1820927a 	slli	r16,r3,9
   1067c:	1806977a 	slli	r3,r3,29
   10680:	8020d33a 	srli	r16,r16,12
   10684:	003ff606 	br	10660 <__alt_mem_Flash_flash_data+0xf4010660>
   10688:	110003cc 	andi	r4,r2,15
   1068c:	00c00104 	movi	r3,4
   10690:	20fff826 	beq	r4,r3,10674 <__alt_mem_Flash_flash_data+0xf4010674>
   10694:	0007883a 	mov	r3,zero
   10698:	003fd906 	br	10600 <__alt_mem_Flash_flash_data+0xf4010600>
   1069c:	0005883a 	mov	r2,zero
   106a0:	003fe906 	br	10648 <__alt_mem_Flash_flash_data+0xf4010648>
   106a4:	00800434 	movhi	r2,16
   106a8:	84000234 	orhi	r16,r16,8
   106ac:	10bfffc4 	addi	r2,r2,-1
   106b0:	e4c0004c 	andi	r19,fp,1
   106b4:	80a0703a 	and	r16,r16,r2
   106b8:	003ef606 	br	10294 <__alt_mem_Flash_flash_data+0xf4010294>

000106bc <__subdf3>:
   106bc:	00c00434 	movhi	r3,16
   106c0:	18ffffc4 	addi	r3,r3,-1
   106c4:	defffb04 	addi	sp,sp,-20
   106c8:	28d2703a 	and	r9,r5,r3
   106cc:	3814d53a 	srli	r10,r7,20
   106d0:	38c6703a 	and	r3,r7,r3
   106d4:	3004d77a 	srli	r2,r6,29
   106d8:	dc800215 	stw	r18,8(sp)
   106dc:	dc000015 	stw	r16,0(sp)
   106e0:	2824d7fa 	srli	r18,r5,31
   106e4:	2820d53a 	srli	r16,r5,20
   106e8:	481290fa 	slli	r9,r9,3
   106ec:	200ad77a 	srli	r5,r4,29
   106f0:	180690fa 	slli	r3,r3,3
   106f4:	dc400115 	stw	r17,4(sp)
   106f8:	dfc00415 	stw	ra,16(sp)
   106fc:	202290fa 	slli	r17,r4,3
   10700:	dcc00315 	stw	r19,12(sp)
   10704:	5281ffcc 	andi	r10,r10,2047
   10708:	0101ffc4 	movi	r4,2047
   1070c:	9011883a 	mov	r8,r18
   10710:	8401ffcc 	andi	r16,r16,2047
   10714:	94803fcc 	andi	r18,r18,255
   10718:	494ab03a 	or	r5,r9,r5
   1071c:	380ed7fa 	srli	r7,r7,31
   10720:	1886b03a 	or	r3,r3,r2
   10724:	300c90fa 	slli	r6,r6,3
   10728:	51009026 	beq	r10,r4,1096c <__subdf3+0x2b0>
   1072c:	39c0005c 	xori	r7,r7,1
   10730:	8285c83a 	sub	r2,r16,r10
   10734:	91c06f26 	beq	r18,r7,108f4 <__subdf3+0x238>
   10738:	0080b10e 	bge	zero,r2,10a00 <__subdf3+0x344>
   1073c:	50002a1e 	bne	r10,zero,107e8 <__subdf3+0x12c>
   10740:	1988b03a 	or	r4,r3,r6
   10744:	2000941e 	bne	r4,zero,10998 <__subdf3+0x2dc>
   10748:	888001cc 	andi	r2,r17,7
   1074c:	10005b26 	beq	r2,zero,108bc <__subdf3+0x200>
   10750:	88c003cc 	andi	r3,r17,15
   10754:	00800104 	movi	r2,4
   10758:	18805826 	beq	r3,r2,108bc <__subdf3+0x200>
   1075c:	88c00104 	addi	r3,r17,4
   10760:	1c63803a 	cmpltu	r17,r3,r17
   10764:	2c4b883a 	add	r5,r5,r17
   10768:	2880202c 	andhi	r2,r5,128
   1076c:	9200004c 	andi	r8,r18,1
   10770:	1823883a 	mov	r17,r3
   10774:	10005426 	beq	r2,zero,108c8 <__subdf3+0x20c>
   10778:	84000044 	addi	r16,r16,1
   1077c:	0081ffc4 	movi	r2,2047
   10780:	8080bf26 	beq	r16,r2,10a80 <__subdf3+0x3c4>
   10784:	013fe034 	movhi	r4,65408
   10788:	213fffc4 	addi	r4,r4,-1
   1078c:	290a703a 	and	r5,r5,r4
   10790:	2804977a 	slli	r2,r5,29
   10794:	280a927a 	slli	r5,r5,9
   10798:	8822d0fa 	srli	r17,r17,3
   1079c:	8401ffcc 	andi	r16,r16,2047
   107a0:	2808d33a 	srli	r4,r5,12
   107a4:	1444b03a 	or	r2,r2,r17
   107a8:	8401ffcc 	andi	r16,r16,2047
   107ac:	800a953a 	slli	r5,r16,20
   107b0:	40c03fcc 	andi	r3,r8,255
   107b4:	04000434 	movhi	r16,16
   107b8:	180697fa 	slli	r3,r3,31
   107bc:	843fffc4 	addi	r16,r16,-1
   107c0:	2420703a 	and	r16,r4,r16
   107c4:	8160b03a 	or	r16,r16,r5
   107c8:	80c6b03a 	or	r3,r16,r3
   107cc:	dfc00417 	ldw	ra,16(sp)
   107d0:	dcc00317 	ldw	r19,12(sp)
   107d4:	dc800217 	ldw	r18,8(sp)
   107d8:	dc400117 	ldw	r17,4(sp)
   107dc:	dc000017 	ldw	r16,0(sp)
   107e0:	dec00504 	addi	sp,sp,20
   107e4:	f800283a 	ret
   107e8:	0101ffc4 	movi	r4,2047
   107ec:	813fd626 	beq	r16,r4,10748 <__alt_mem_Flash_flash_data+0xf4010748>
   107f0:	18c02034 	orhi	r3,r3,128
   107f4:	01000e04 	movi	r4,56
   107f8:	2080a416 	blt	r4,r2,10a8c <__subdf3+0x3d0>
   107fc:	010007c4 	movi	r4,31
   10800:	2080c716 	blt	r4,r2,10b20 <__subdf3+0x464>
   10804:	01000804 	movi	r4,32
   10808:	2089c83a 	sub	r4,r4,r2
   1080c:	1910983a 	sll	r8,r3,r4
   10810:	308ed83a 	srl	r7,r6,r2
   10814:	3108983a 	sll	r4,r6,r4
   10818:	1884d83a 	srl	r2,r3,r2
   1081c:	41ccb03a 	or	r6,r8,r7
   10820:	2008c03a 	cmpne	r4,r4,zero
   10824:	310cb03a 	or	r6,r6,r4
   10828:	898dc83a 	sub	r6,r17,r6
   1082c:	89a3803a 	cmpltu	r17,r17,r6
   10830:	288bc83a 	sub	r5,r5,r2
   10834:	2c4bc83a 	sub	r5,r5,r17
   10838:	3023883a 	mov	r17,r6
   1083c:	2880202c 	andhi	r2,r5,128
   10840:	10006b26 	beq	r2,zero,109f0 <__subdf3+0x334>
   10844:	04c02034 	movhi	r19,128
   10848:	9cffffc4 	addi	r19,r19,-1
   1084c:	2ce6703a 	and	r19,r5,r19
   10850:	98007c26 	beq	r19,zero,10a44 <__subdf3+0x388>
   10854:	9809883a 	mov	r4,r19
   10858:	00111880 	call	11188 <__clzsi2>
   1085c:	10fffe04 	addi	r3,r2,-8
   10860:	010007c4 	movi	r4,31
   10864:	20c07d16 	blt	r4,r3,10a5c <__subdf3+0x3a0>
   10868:	01400a04 	movi	r5,40
   1086c:	2885c83a 	sub	r2,r5,r2
   10870:	888ad83a 	srl	r5,r17,r2
   10874:	98e6983a 	sll	r19,r19,r3
   10878:	88e2983a 	sll	r17,r17,r3
   1087c:	2ce6b03a 	or	r19,r5,r19
   10880:	1c007a16 	blt	r3,r16,10a6c <__subdf3+0x3b0>
   10884:	1c21c83a 	sub	r16,r3,r16
   10888:	81400044 	addi	r5,r16,1
   1088c:	00c007c4 	movi	r3,31
   10890:	19409616 	blt	r3,r5,10aec <__subdf3+0x430>
   10894:	1c21c83a 	sub	r16,r3,r16
   10898:	8c08983a 	sll	r4,r17,r16
   1089c:	8946d83a 	srl	r3,r17,r5
   108a0:	9c20983a 	sll	r16,r19,r16
   108a4:	2008c03a 	cmpne	r4,r4,zero
   108a8:	994ad83a 	srl	r5,r19,r5
   108ac:	1c06b03a 	or	r3,r3,r16
   108b0:	1922b03a 	or	r17,r3,r4
   108b4:	0021883a 	mov	r16,zero
   108b8:	003fa306 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   108bc:	2880202c 	andhi	r2,r5,128
   108c0:	9200004c 	andi	r8,r18,1
   108c4:	103fac1e 	bne	r2,zero,10778 <__alt_mem_Flash_flash_data+0xf4010778>
   108c8:	2804977a 	slli	r2,r5,29
   108cc:	8822d0fa 	srli	r17,r17,3
   108d0:	00c1ffc4 	movi	r3,2047
   108d4:	280ad0fa 	srli	r5,r5,3
   108d8:	1444b03a 	or	r2,r2,r17
   108dc:	80c02726 	beq	r16,r3,1097c <__subdf3+0x2c0>
   108e0:	01000434 	movhi	r4,16
   108e4:	213fffc4 	addi	r4,r4,-1
   108e8:	80e0703a 	and	r16,r16,r3
   108ec:	2908703a 	and	r4,r5,r4
   108f0:	003fad06 	br	107a8 <__alt_mem_Flash_flash_data+0xf40107a8>
   108f4:	0080690e 	bge	zero,r2,10a9c <__subdf3+0x3e0>
   108f8:	50002f26 	beq	r10,zero,109b8 <__subdf3+0x2fc>
   108fc:	0101ffc4 	movi	r4,2047
   10900:	813f9126 	beq	r16,r4,10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10904:	18c02034 	orhi	r3,r3,128
   10908:	01000e04 	movi	r4,56
   1090c:	2080b00e 	bge	r4,r2,10bd0 <__subdf3+0x514>
   10910:	198cb03a 	or	r6,r3,r6
   10914:	300ec03a 	cmpne	r7,r6,zero
   10918:	0005883a 	mov	r2,zero
   1091c:	3c4f883a 	add	r7,r7,r17
   10920:	3c63803a 	cmpltu	r17,r7,r17
   10924:	114b883a 	add	r5,r2,r5
   10928:	2c4b883a 	add	r5,r5,r17
   1092c:	3823883a 	mov	r17,r7
   10930:	2880202c 	andhi	r2,r5,128
   10934:	10002e26 	beq	r2,zero,109f0 <__subdf3+0x334>
   10938:	84000044 	addi	r16,r16,1
   1093c:	0081ffc4 	movi	r2,2047
   10940:	8080de26 	beq	r16,r2,10cbc <__subdf3+0x600>
   10944:	00bfe034 	movhi	r2,65408
   10948:	10bfffc4 	addi	r2,r2,-1
   1094c:	288a703a 	and	r5,r5,r2
   10950:	880cd07a 	srli	r6,r17,1
   10954:	280897fa 	slli	r4,r5,31
   10958:	88c0004c 	andi	r3,r17,1
   1095c:	30e2b03a 	or	r17,r6,r3
   10960:	280ad07a 	srli	r5,r5,1
   10964:	8922b03a 	or	r17,r17,r4
   10968:	003f7706 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   1096c:	1984b03a 	or	r2,r3,r6
   10970:	103f6e26 	beq	r2,zero,1072c <__alt_mem_Flash_flash_data+0xf401072c>
   10974:	39c03fcc 	andi	r7,r7,255
   10978:	003f6d06 	br	10730 <__alt_mem_Flash_flash_data+0xf4010730>
   1097c:	1146b03a 	or	r3,r2,r5
   10980:	18003f26 	beq	r3,zero,10a80 <__subdf3+0x3c4>
   10984:	00c00434 	movhi	r3,16
   10988:	29000234 	orhi	r4,r5,8
   1098c:	18ffffc4 	addi	r3,r3,-1
   10990:	20c8703a 	and	r4,r4,r3
   10994:	003f8406 	br	107a8 <__alt_mem_Flash_flash_data+0xf40107a8>
   10998:	10bfffc4 	addi	r2,r2,-1
   1099c:	1000501e 	bne	r2,zero,10ae0 <__subdf3+0x424>
   109a0:	898fc83a 	sub	r7,r17,r6
   109a4:	89e3803a 	cmpltu	r17,r17,r7
   109a8:	28cbc83a 	sub	r5,r5,r3
   109ac:	2c4bc83a 	sub	r5,r5,r17
   109b0:	3823883a 	mov	r17,r7
   109b4:	003fa106 	br	1083c <__alt_mem_Flash_flash_data+0xf401083c>
   109b8:	1988b03a 	or	r4,r3,r6
   109bc:	203f6226 	beq	r4,zero,10748 <__alt_mem_Flash_flash_data+0xf4010748>
   109c0:	10bfffc4 	addi	r2,r2,-1
   109c4:	10009b1e 	bne	r2,zero,10c34 <__subdf3+0x578>
   109c8:	344d883a 	add	r6,r6,r17
   109cc:	3463803a 	cmpltu	r17,r6,r17
   109d0:	194b883a 	add	r5,r3,r5
   109d4:	2c4b883a 	add	r5,r5,r17
   109d8:	3023883a 	mov	r17,r6
   109dc:	003fd406 	br	10930 <__alt_mem_Flash_flash_data+0xf4010930>
   109e0:	1106b03a 	or	r3,r2,r4
   109e4:	1800b426 	beq	r3,zero,10cb8 <__subdf3+0x5fc>
   109e8:	100b883a 	mov	r5,r2
   109ec:	2023883a 	mov	r17,r4
   109f0:	888001cc 	andi	r2,r17,7
   109f4:	103f561e 	bne	r2,zero,10750 <__alt_mem_Flash_flash_data+0xf4010750>
   109f8:	9200004c 	andi	r8,r18,1
   109fc:	003fb206 	br	108c8 <__alt_mem_Flash_flash_data+0xf40108c8>
   10a00:	1000531e 	bne	r2,zero,10b50 <__subdf3+0x494>
   10a04:	80800044 	addi	r2,r16,1
   10a08:	1081ffcc 	andi	r2,r2,2047
   10a0c:	01000044 	movi	r4,1
   10a10:	2080a00e 	bge	r4,r2,10c94 <__subdf3+0x5d8>
   10a14:	8985c83a 	sub	r2,r17,r6
   10a18:	8889803a 	cmpltu	r4,r17,r2
   10a1c:	28e7c83a 	sub	r19,r5,r3
   10a20:	9927c83a 	sub	r19,r19,r4
   10a24:	9900202c 	andhi	r4,r19,128
   10a28:	20006226 	beq	r4,zero,10bb4 <__subdf3+0x4f8>
   10a2c:	3463c83a 	sub	r17,r6,r17
   10a30:	194bc83a 	sub	r5,r3,r5
   10a34:	344d803a 	cmpltu	r6,r6,r17
   10a38:	29a7c83a 	sub	r19,r5,r6
   10a3c:	3825883a 	mov	r18,r7
   10a40:	983f841e 	bne	r19,zero,10854 <__alt_mem_Flash_flash_data+0xf4010854>
   10a44:	8809883a 	mov	r4,r17
   10a48:	00111880 	call	11188 <__clzsi2>
   10a4c:	10800804 	addi	r2,r2,32
   10a50:	10fffe04 	addi	r3,r2,-8
   10a54:	010007c4 	movi	r4,31
   10a58:	20ff830e 	bge	r4,r3,10868 <__alt_mem_Flash_flash_data+0xf4010868>
   10a5c:	14fff604 	addi	r19,r2,-40
   10a60:	8ce6983a 	sll	r19,r17,r19
   10a64:	0023883a 	mov	r17,zero
   10a68:	1c3f860e 	bge	r3,r16,10884 <__alt_mem_Flash_flash_data+0xf4010884>
   10a6c:	017fe034 	movhi	r5,65408
   10a70:	297fffc4 	addi	r5,r5,-1
   10a74:	80e1c83a 	sub	r16,r16,r3
   10a78:	994a703a 	and	r5,r19,r5
   10a7c:	003f3206 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10a80:	0009883a 	mov	r4,zero
   10a84:	0005883a 	mov	r2,zero
   10a88:	003f4706 	br	107a8 <__alt_mem_Flash_flash_data+0xf40107a8>
   10a8c:	198cb03a 	or	r6,r3,r6
   10a90:	300cc03a 	cmpne	r6,r6,zero
   10a94:	0005883a 	mov	r2,zero
   10a98:	003f6306 	br	10828 <__alt_mem_Flash_flash_data+0xf4010828>
   10a9c:	10009d1e 	bne	r2,zero,10d14 <__subdf3+0x658>
   10aa0:	81c00044 	addi	r7,r16,1
   10aa4:	3881ffcc 	andi	r2,r7,2047
   10aa8:	02400044 	movi	r9,1
   10aac:	4880680e 	bge	r9,r2,10c50 <__subdf3+0x594>
   10ab0:	0081ffc4 	movi	r2,2047
   10ab4:	3880ae26 	beq	r7,r2,10d70 <__subdf3+0x6b4>
   10ab8:	344d883a 	add	r6,r6,r17
   10abc:	3463803a 	cmpltu	r17,r6,r17
   10ac0:	194b883a 	add	r5,r3,r5
   10ac4:	2c4b883a 	add	r5,r5,r17
   10ac8:	282297fa 	slli	r17,r5,31
   10acc:	300cd07a 	srli	r6,r6,1
   10ad0:	280ad07a 	srli	r5,r5,1
   10ad4:	3821883a 	mov	r16,r7
   10ad8:	89a2b03a 	or	r17,r17,r6
   10adc:	003f1a06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10ae0:	0101ffc4 	movi	r4,2047
   10ae4:	813f431e 	bne	r16,r4,107f4 <__alt_mem_Flash_flash_data+0xf40107f4>
   10ae8:	003f1706 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10aec:	80bff844 	addi	r2,r16,-31
   10af0:	00c00804 	movi	r3,32
   10af4:	9884d83a 	srl	r2,r19,r2
   10af8:	28c05126 	beq	r5,r3,10c40 <__subdf3+0x584>
   10afc:	00c00fc4 	movi	r3,63
   10b00:	1c21c83a 	sub	r16,r3,r16
   10b04:	9c26983a 	sll	r19,r19,r16
   10b08:	9c62b03a 	or	r17,r19,r17
   10b0c:	8822c03a 	cmpne	r17,r17,zero
   10b10:	88a2b03a 	or	r17,r17,r2
   10b14:	000b883a 	mov	r5,zero
   10b18:	0021883a 	mov	r16,zero
   10b1c:	003fb406 	br	109f0 <__alt_mem_Flash_flash_data+0xf40109f0>
   10b20:	113ff804 	addi	r4,r2,-32
   10b24:	01c00804 	movi	r7,32
   10b28:	1908d83a 	srl	r4,r3,r4
   10b2c:	11c04626 	beq	r2,r7,10c48 <__subdf3+0x58c>
   10b30:	01c01004 	movi	r7,64
   10b34:	3885c83a 	sub	r2,r7,r2
   10b38:	1884983a 	sll	r2,r3,r2
   10b3c:	118cb03a 	or	r6,r2,r6
   10b40:	300cc03a 	cmpne	r6,r6,zero
   10b44:	310cb03a 	or	r6,r6,r4
   10b48:	0005883a 	mov	r2,zero
   10b4c:	003f3606 	br	10828 <__alt_mem_Flash_flash_data+0xf4010828>
   10b50:	80002b26 	beq	r16,zero,10c00 <__subdf3+0x544>
   10b54:	0101ffc4 	movi	r4,2047
   10b58:	51006926 	beq	r10,r4,10d00 <__subdf3+0x644>
   10b5c:	0085c83a 	sub	r2,zero,r2
   10b60:	29402034 	orhi	r5,r5,128
   10b64:	01000e04 	movi	r4,56
   10b68:	20807d16 	blt	r4,r2,10d60 <__subdf3+0x6a4>
   10b6c:	010007c4 	movi	r4,31
   10b70:	2080d916 	blt	r4,r2,10ed8 <__subdf3+0x81c>
   10b74:	01000804 	movi	r4,32
   10b78:	2089c83a 	sub	r4,r4,r2
   10b7c:	2912983a 	sll	r9,r5,r4
   10b80:	8890d83a 	srl	r8,r17,r2
   10b84:	8908983a 	sll	r4,r17,r4
   10b88:	2884d83a 	srl	r2,r5,r2
   10b8c:	4a22b03a 	or	r17,r9,r8
   10b90:	2008c03a 	cmpne	r4,r4,zero
   10b94:	8922b03a 	or	r17,r17,r4
   10b98:	3463c83a 	sub	r17,r6,r17
   10b9c:	1885c83a 	sub	r2,r3,r2
   10ba0:	344d803a 	cmpltu	r6,r6,r17
   10ba4:	118bc83a 	sub	r5,r2,r6
   10ba8:	5021883a 	mov	r16,r10
   10bac:	3825883a 	mov	r18,r7
   10bb0:	003f2206 	br	1083c <__alt_mem_Flash_flash_data+0xf401083c>
   10bb4:	9886b03a 	or	r3,r19,r2
   10bb8:	18001c1e 	bne	r3,zero,10c2c <__subdf3+0x570>
   10bbc:	0011883a 	mov	r8,zero
   10bc0:	000b883a 	mov	r5,zero
   10bc4:	0023883a 	mov	r17,zero
   10bc8:	0021883a 	mov	r16,zero
   10bcc:	003f3e06 	br	108c8 <__alt_mem_Flash_flash_data+0xf40108c8>
   10bd0:	010007c4 	movi	r4,31
   10bd4:	20803c16 	blt	r4,r2,10cc8 <__subdf3+0x60c>
   10bd8:	01000804 	movi	r4,32
   10bdc:	2089c83a 	sub	r4,r4,r2
   10be0:	1912983a 	sll	r9,r3,r4
   10be4:	308ed83a 	srl	r7,r6,r2
   10be8:	3108983a 	sll	r4,r6,r4
   10bec:	1884d83a 	srl	r2,r3,r2
   10bf0:	49ceb03a 	or	r7,r9,r7
   10bf4:	2008c03a 	cmpne	r4,r4,zero
   10bf8:	390eb03a 	or	r7,r7,r4
   10bfc:	003f4706 	br	1091c <__alt_mem_Flash_flash_data+0xf401091c>
   10c00:	2c48b03a 	or	r4,r5,r17
   10c04:	20003e26 	beq	r4,zero,10d00 <__subdf3+0x644>
   10c08:	0084303a 	nor	r2,zero,r2
   10c0c:	10003a1e 	bne	r2,zero,10cf8 <__subdf3+0x63c>
   10c10:	3463c83a 	sub	r17,r6,r17
   10c14:	194bc83a 	sub	r5,r3,r5
   10c18:	344d803a 	cmpltu	r6,r6,r17
   10c1c:	298bc83a 	sub	r5,r5,r6
   10c20:	5021883a 	mov	r16,r10
   10c24:	3825883a 	mov	r18,r7
   10c28:	003f0406 	br	1083c <__alt_mem_Flash_flash_data+0xf401083c>
   10c2c:	1023883a 	mov	r17,r2
   10c30:	003f0706 	br	10850 <__alt_mem_Flash_flash_data+0xf4010850>
   10c34:	0101ffc4 	movi	r4,2047
   10c38:	813f331e 	bne	r16,r4,10908 <__alt_mem_Flash_flash_data+0xf4010908>
   10c3c:	003ec206 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10c40:	0027883a 	mov	r19,zero
   10c44:	003fb006 	br	10b08 <__alt_mem_Flash_flash_data+0xf4010b08>
   10c48:	0005883a 	mov	r2,zero
   10c4c:	003fbb06 	br	10b3c <__alt_mem_Flash_flash_data+0xf4010b3c>
   10c50:	2c44b03a 	or	r2,r5,r17
   10c54:	80008b1e 	bne	r16,zero,10e84 <__subdf3+0x7c8>
   10c58:	1000b526 	beq	r2,zero,10f30 <__subdf3+0x874>
   10c5c:	1984b03a 	or	r2,r3,r6
   10c60:	103eb926 	beq	r2,zero,10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10c64:	3449883a 	add	r4,r6,r17
   10c68:	2463803a 	cmpltu	r17,r4,r17
   10c6c:	194b883a 	add	r5,r3,r5
   10c70:	2c4b883a 	add	r5,r5,r17
   10c74:	2880202c 	andhi	r2,r5,128
   10c78:	2023883a 	mov	r17,r4
   10c7c:	103f5c26 	beq	r2,zero,109f0 <__alt_mem_Flash_flash_data+0xf40109f0>
   10c80:	00bfe034 	movhi	r2,65408
   10c84:	10bfffc4 	addi	r2,r2,-1
   10c88:	4821883a 	mov	r16,r9
   10c8c:	288a703a 	and	r5,r5,r2
   10c90:	003ead06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10c94:	2c44b03a 	or	r2,r5,r17
   10c98:	8000291e 	bne	r16,zero,10d40 <__subdf3+0x684>
   10c9c:	10004f1e 	bne	r2,zero,10ddc <__subdf3+0x720>
   10ca0:	1984b03a 	or	r2,r3,r6
   10ca4:	10000426 	beq	r2,zero,10cb8 <__subdf3+0x5fc>
   10ca8:	180b883a 	mov	r5,r3
   10cac:	3023883a 	mov	r17,r6
   10cb0:	3825883a 	mov	r18,r7
   10cb4:	003ea406 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10cb8:	0011883a 	mov	r8,zero
   10cbc:	000b883a 	mov	r5,zero
   10cc0:	0023883a 	mov	r17,zero
   10cc4:	003f0006 	br	108c8 <__alt_mem_Flash_flash_data+0xf40108c8>
   10cc8:	11fff804 	addi	r7,r2,-32
   10ccc:	19c8d83a 	srl	r4,r3,r7
   10cd0:	01c00804 	movi	r7,32
   10cd4:	11c07e26 	beq	r2,r7,10ed0 <__subdf3+0x814>
   10cd8:	01c01004 	movi	r7,64
   10cdc:	3885c83a 	sub	r2,r7,r2
   10ce0:	1884983a 	sll	r2,r3,r2
   10ce4:	118cb03a 	or	r6,r2,r6
   10ce8:	300ec03a 	cmpne	r7,r6,zero
   10cec:	390eb03a 	or	r7,r7,r4
   10cf0:	0005883a 	mov	r2,zero
   10cf4:	003f0906 	br	1091c <__alt_mem_Flash_flash_data+0xf401091c>
   10cf8:	0101ffc4 	movi	r4,2047
   10cfc:	513f991e 	bne	r10,r4,10b64 <__alt_mem_Flash_flash_data+0xf4010b64>
   10d00:	180b883a 	mov	r5,r3
   10d04:	3023883a 	mov	r17,r6
   10d08:	5021883a 	mov	r16,r10
   10d0c:	3825883a 	mov	r18,r7
   10d10:	003e8d06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10d14:	80001a1e 	bne	r16,zero,10d80 <__subdf3+0x6c4>
   10d18:	2c48b03a 	or	r4,r5,r17
   10d1c:	20005526 	beq	r4,zero,10e74 <__subdf3+0x7b8>
   10d20:	0084303a 	nor	r2,zero,r2
   10d24:	1000511e 	bne	r2,zero,10e6c <__subdf3+0x7b0>
   10d28:	89a3883a 	add	r17,r17,r6
   10d2c:	194b883a 	add	r5,r3,r5
   10d30:	898d803a 	cmpltu	r6,r17,r6
   10d34:	298b883a 	add	r5,r5,r6
   10d38:	5021883a 	mov	r16,r10
   10d3c:	003efc06 	br	10930 <__alt_mem_Flash_flash_data+0xf4010930>
   10d40:	1000341e 	bne	r2,zero,10e14 <__subdf3+0x758>
   10d44:	1984b03a 	or	r2,r3,r6
   10d48:	10006f26 	beq	r2,zero,10f08 <__subdf3+0x84c>
   10d4c:	180b883a 	mov	r5,r3
   10d50:	3023883a 	mov	r17,r6
   10d54:	3825883a 	mov	r18,r7
   10d58:	0401ffc4 	movi	r16,2047
   10d5c:	003e7a06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10d60:	2c62b03a 	or	r17,r5,r17
   10d64:	8822c03a 	cmpne	r17,r17,zero
   10d68:	0005883a 	mov	r2,zero
   10d6c:	003f8a06 	br	10b98 <__alt_mem_Flash_flash_data+0xf4010b98>
   10d70:	3821883a 	mov	r16,r7
   10d74:	000b883a 	mov	r5,zero
   10d78:	0023883a 	mov	r17,zero
   10d7c:	003ed206 	br	108c8 <__alt_mem_Flash_flash_data+0xf40108c8>
   10d80:	0101ffc4 	movi	r4,2047
   10d84:	51003b26 	beq	r10,r4,10e74 <__subdf3+0x7b8>
   10d88:	0085c83a 	sub	r2,zero,r2
   10d8c:	29402034 	orhi	r5,r5,128
   10d90:	01000e04 	movi	r4,56
   10d94:	20806216 	blt	r4,r2,10f20 <__subdf3+0x864>
   10d98:	010007c4 	movi	r4,31
   10d9c:	20806b16 	blt	r4,r2,10f4c <__subdf3+0x890>
   10da0:	01000804 	movi	r4,32
   10da4:	2089c83a 	sub	r4,r4,r2
   10da8:	2912983a 	sll	r9,r5,r4
   10dac:	888ed83a 	srl	r7,r17,r2
   10db0:	8908983a 	sll	r4,r17,r4
   10db4:	2884d83a 	srl	r2,r5,r2
   10db8:	49e2b03a 	or	r17,r9,r7
   10dbc:	2008c03a 	cmpne	r4,r4,zero
   10dc0:	8922b03a 	or	r17,r17,r4
   10dc4:	89a3883a 	add	r17,r17,r6
   10dc8:	10c5883a 	add	r2,r2,r3
   10dcc:	898d803a 	cmpltu	r6,r17,r6
   10dd0:	118b883a 	add	r5,r2,r6
   10dd4:	5021883a 	mov	r16,r10
   10dd8:	003ed506 	br	10930 <__alt_mem_Flash_flash_data+0xf4010930>
   10ddc:	1984b03a 	or	r2,r3,r6
   10de0:	103e5926 	beq	r2,zero,10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10de4:	8989c83a 	sub	r4,r17,r6
   10de8:	8911803a 	cmpltu	r8,r17,r4
   10dec:	28c5c83a 	sub	r2,r5,r3
   10df0:	1205c83a 	sub	r2,r2,r8
   10df4:	1200202c 	andhi	r8,r2,128
   10df8:	403ef926 	beq	r8,zero,109e0 <__alt_mem_Flash_flash_data+0xf40109e0>
   10dfc:	3463c83a 	sub	r17,r6,r17
   10e00:	194bc83a 	sub	r5,r3,r5
   10e04:	344d803a 	cmpltu	r6,r6,r17
   10e08:	298bc83a 	sub	r5,r5,r6
   10e0c:	3825883a 	mov	r18,r7
   10e10:	003e4d06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10e14:	1984b03a 	or	r2,r3,r6
   10e18:	10002b26 	beq	r2,zero,10ec8 <__subdf3+0x80c>
   10e1c:	2808d0fa 	srli	r4,r5,3
   10e20:	8822d0fa 	srli	r17,r17,3
   10e24:	280a977a 	slli	r5,r5,29
   10e28:	2080022c 	andhi	r2,r4,8
   10e2c:	2c62b03a 	or	r17,r5,r17
   10e30:	10000826 	beq	r2,zero,10e54 <__subdf3+0x798>
   10e34:	1810d0fa 	srli	r8,r3,3
   10e38:	4080022c 	andhi	r2,r8,8
   10e3c:	1000051e 	bne	r2,zero,10e54 <__subdf3+0x798>
   10e40:	300cd0fa 	srli	r6,r6,3
   10e44:	1804977a 	slli	r2,r3,29
   10e48:	4009883a 	mov	r4,r8
   10e4c:	3825883a 	mov	r18,r7
   10e50:	11a2b03a 	or	r17,r2,r6
   10e54:	880ad77a 	srli	r5,r17,29
   10e58:	200890fa 	slli	r4,r4,3
   10e5c:	882290fa 	slli	r17,r17,3
   10e60:	0401ffc4 	movi	r16,2047
   10e64:	290ab03a 	or	r5,r5,r4
   10e68:	003e3706 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10e6c:	0101ffc4 	movi	r4,2047
   10e70:	513fc71e 	bne	r10,r4,10d90 <__alt_mem_Flash_flash_data+0xf4010d90>
   10e74:	180b883a 	mov	r5,r3
   10e78:	3023883a 	mov	r17,r6
   10e7c:	5021883a 	mov	r16,r10
   10e80:	003e3106 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10e84:	10002d26 	beq	r2,zero,10f3c <__subdf3+0x880>
   10e88:	1984b03a 	or	r2,r3,r6
   10e8c:	10000e26 	beq	r2,zero,10ec8 <__subdf3+0x80c>
   10e90:	2808d0fa 	srli	r4,r5,3
   10e94:	8822d0fa 	srli	r17,r17,3
   10e98:	280a977a 	slli	r5,r5,29
   10e9c:	2080022c 	andhi	r2,r4,8
   10ea0:	2c62b03a 	or	r17,r5,r17
   10ea4:	103feb26 	beq	r2,zero,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10ea8:	180ed0fa 	srli	r7,r3,3
   10eac:	3880022c 	andhi	r2,r7,8
   10eb0:	103fe81e 	bne	r2,zero,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10eb4:	300cd0fa 	srli	r6,r6,3
   10eb8:	1804977a 	slli	r2,r3,29
   10ebc:	3809883a 	mov	r4,r7
   10ec0:	11a2b03a 	or	r17,r2,r6
   10ec4:	003fe306 	br	10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10ec8:	0401ffc4 	movi	r16,2047
   10ecc:	003e1e06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10ed0:	0005883a 	mov	r2,zero
   10ed4:	003f8306 	br	10ce4 <__alt_mem_Flash_flash_data+0xf4010ce4>
   10ed8:	113ff804 	addi	r4,r2,-32
   10edc:	02000804 	movi	r8,32
   10ee0:	2908d83a 	srl	r4,r5,r4
   10ee4:	12002526 	beq	r2,r8,10f7c <__subdf3+0x8c0>
   10ee8:	02001004 	movi	r8,64
   10eec:	4085c83a 	sub	r2,r8,r2
   10ef0:	288a983a 	sll	r5,r5,r2
   10ef4:	2c62b03a 	or	r17,r5,r17
   10ef8:	8822c03a 	cmpne	r17,r17,zero
   10efc:	8922b03a 	or	r17,r17,r4
   10f00:	0005883a 	mov	r2,zero
   10f04:	003f2406 	br	10b98 <__alt_mem_Flash_flash_data+0xf4010b98>
   10f08:	01402034 	movhi	r5,128
   10f0c:	0011883a 	mov	r8,zero
   10f10:	297fffc4 	addi	r5,r5,-1
   10f14:	047ffe04 	movi	r17,-8
   10f18:	0401ffc4 	movi	r16,2047
   10f1c:	003e6a06 	br	108c8 <__alt_mem_Flash_flash_data+0xf40108c8>
   10f20:	2c62b03a 	or	r17,r5,r17
   10f24:	8822c03a 	cmpne	r17,r17,zero
   10f28:	0005883a 	mov	r2,zero
   10f2c:	003fa506 	br	10dc4 <__alt_mem_Flash_flash_data+0xf4010dc4>
   10f30:	180b883a 	mov	r5,r3
   10f34:	3023883a 	mov	r17,r6
   10f38:	003e0306 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10f3c:	180b883a 	mov	r5,r3
   10f40:	3023883a 	mov	r17,r6
   10f44:	0401ffc4 	movi	r16,2047
   10f48:	003dff06 	br	10748 <__alt_mem_Flash_flash_data+0xf4010748>
   10f4c:	113ff804 	addi	r4,r2,-32
   10f50:	01c00804 	movi	r7,32
   10f54:	2908d83a 	srl	r4,r5,r4
   10f58:	11c00a26 	beq	r2,r7,10f84 <__subdf3+0x8c8>
   10f5c:	01c01004 	movi	r7,64
   10f60:	3885c83a 	sub	r2,r7,r2
   10f64:	288a983a 	sll	r5,r5,r2
   10f68:	2c62b03a 	or	r17,r5,r17
   10f6c:	8822c03a 	cmpne	r17,r17,zero
   10f70:	8922b03a 	or	r17,r17,r4
   10f74:	0005883a 	mov	r2,zero
   10f78:	003f9206 	br	10dc4 <__alt_mem_Flash_flash_data+0xf4010dc4>
   10f7c:	000b883a 	mov	r5,zero
   10f80:	003fdc06 	br	10ef4 <__alt_mem_Flash_flash_data+0xf4010ef4>
   10f84:	000b883a 	mov	r5,zero
   10f88:	003ff706 	br	10f68 <__alt_mem_Flash_flash_data+0xf4010f68>

00010f8c <__fixdfsi>:
   10f8c:	2806d53a 	srli	r3,r5,20
   10f90:	00800434 	movhi	r2,16
   10f94:	10bfffc4 	addi	r2,r2,-1
   10f98:	18c1ffcc 	andi	r3,r3,2047
   10f9c:	0180ff84 	movi	r6,1022
   10fa0:	2884703a 	and	r2,r5,r2
   10fa4:	280ad7fa 	srli	r5,r5,31
   10fa8:	30c0130e 	bge	r6,r3,10ff8 <__fixdfsi+0x6c>
   10fac:	01810744 	movi	r6,1053
   10fb0:	30c00d16 	blt	r6,r3,10fe8 <__fixdfsi+0x5c>
   10fb4:	01810cc4 	movi	r6,1075
   10fb8:	30cdc83a 	sub	r6,r6,r3
   10fbc:	01c007c4 	movi	r7,31
   10fc0:	10800434 	orhi	r2,r2,16
   10fc4:	39800e0e 	bge	r7,r6,11000 <__fixdfsi+0x74>
   10fc8:	010104c4 	movi	r4,1043
   10fcc:	20c7c83a 	sub	r3,r4,r3
   10fd0:	10c6d83a 	srl	r3,r2,r3
   10fd4:	29403fcc 	andi	r5,r5,255
   10fd8:	0145c83a 	sub	r2,zero,r5
   10fdc:	1884f03a 	xor	r2,r3,r2
   10fe0:	1145883a 	add	r2,r2,r5
   10fe4:	f800283a 	ret
   10fe8:	00a00034 	movhi	r2,32768
   10fec:	10bfffc4 	addi	r2,r2,-1
   10ff0:	2885883a 	add	r2,r5,r2
   10ff4:	f800283a 	ret
   10ff8:	0005883a 	mov	r2,zero
   10ffc:	f800283a 	ret
   11000:	18fefb44 	addi	r3,r3,-1043
   11004:	2188d83a 	srl	r4,r4,r6
   11008:	10c6983a 	sll	r3,r2,r3
   1100c:	20c6b03a 	or	r3,r4,r3
   11010:	003ff006 	br	10fd4 <__alt_mem_Flash_flash_data+0xf4010fd4>

00011014 <__floatsidf>:
   11014:	defffd04 	addi	sp,sp,-12
   11018:	dc400115 	stw	r17,4(sp)
   1101c:	dfc00215 	stw	ra,8(sp)
   11020:	dc000015 	stw	r16,0(sp)
   11024:	2023883a 	mov	r17,r4
   11028:	20001426 	beq	r4,zero,1107c <__floatsidf+0x68>
   1102c:	2020d7fa 	srli	r16,r4,31
   11030:	80000126 	beq	r16,zero,11038 <__floatsidf+0x24>
   11034:	0123c83a 	sub	r17,zero,r4
   11038:	8809883a 	mov	r4,r17
   1103c:	00111880 	call	11188 <__clzsi2>
   11040:	01410784 	movi	r5,1054
   11044:	00c00284 	movi	r3,10
   11048:	288bc83a 	sub	r5,r5,r2
   1104c:	18801c16 	blt	r3,r2,110c0 <__floatsidf+0xac>
   11050:	00c002c4 	movi	r3,11
   11054:	1887c83a 	sub	r3,r3,r2
   11058:	88c8d83a 	srl	r4,r17,r3
   1105c:	00c00434 	movhi	r3,16
   11060:	18ffffc4 	addi	r3,r3,-1
   11064:	10800544 	addi	r2,r2,21
   11068:	20c8703a 	and	r4,r4,r3
   1106c:	8884983a 	sll	r2,r17,r2
   11070:	28c1ffcc 	andi	r3,r5,2047
   11074:	800d883a 	mov	r6,r16
   11078:	00000406 	br	1108c <__floatsidf+0x78>
   1107c:	000d883a 	mov	r6,zero
   11080:	0007883a 	mov	r3,zero
   11084:	0009883a 	mov	r4,zero
   11088:	0005883a 	mov	r2,zero
   1108c:	180a953a 	slli	r5,r3,20
   11090:	31803fcc 	andi	r6,r6,255
   11094:	00c00434 	movhi	r3,16
   11098:	300c97fa 	slli	r6,r6,31
   1109c:	18ffffc4 	addi	r3,r3,-1
   110a0:	20c6703a 	and	r3,r4,r3
   110a4:	1946b03a 	or	r3,r3,r5
   110a8:	1986b03a 	or	r3,r3,r6
   110ac:	dfc00217 	ldw	ra,8(sp)
   110b0:	dc400117 	ldw	r17,4(sp)
   110b4:	dc000017 	ldw	r16,0(sp)
   110b8:	dec00304 	addi	sp,sp,12
   110bc:	f800283a 	ret
   110c0:	10fffd44 	addi	r3,r2,-11
   110c4:	88c8983a 	sll	r4,r17,r3
   110c8:	00800434 	movhi	r2,16
   110cc:	10bfffc4 	addi	r2,r2,-1
   110d0:	2088703a 	and	r4,r4,r2
   110d4:	28c1ffcc 	andi	r3,r5,2047
   110d8:	800d883a 	mov	r6,r16
   110dc:	0005883a 	mov	r2,zero
   110e0:	003fea06 	br	1108c <__alt_mem_Flash_flash_data+0xf401108c>

000110e4 <__floatunsidf>:
   110e4:	defffe04 	addi	sp,sp,-8
   110e8:	dc000015 	stw	r16,0(sp)
   110ec:	dfc00115 	stw	ra,4(sp)
   110f0:	2021883a 	mov	r16,r4
   110f4:	20001026 	beq	r4,zero,11138 <__floatunsidf+0x54>
   110f8:	00111880 	call	11188 <__clzsi2>
   110fc:	01410784 	movi	r5,1054
   11100:	100d883a 	mov	r6,r2
   11104:	288bc83a 	sub	r5,r5,r2
   11108:	00800284 	movi	r2,10
   1110c:	11801616 	blt	r2,r6,11168 <__floatunsidf+0x84>
   11110:	008002c4 	movi	r2,11
   11114:	1185c83a 	sub	r2,r2,r6
   11118:	8084d83a 	srl	r2,r16,r2
   1111c:	00c00434 	movhi	r3,16
   11120:	31c00544 	addi	r7,r6,21
   11124:	18ffffc4 	addi	r3,r3,-1
   11128:	81e0983a 	sll	r16,r16,r7
   1112c:	10cc703a 	and	r6,r2,r3
   11130:	2941ffcc 	andi	r5,r5,2047
   11134:	00000206 	br	11140 <__floatunsidf+0x5c>
   11138:	000b883a 	mov	r5,zero
   1113c:	000d883a 	mov	r6,zero
   11140:	280a953a 	slli	r5,r5,20
   11144:	00c00434 	movhi	r3,16
   11148:	18ffffc4 	addi	r3,r3,-1
   1114c:	30c6703a 	and	r3,r6,r3
   11150:	8005883a 	mov	r2,r16
   11154:	1946b03a 	or	r3,r3,r5
   11158:	dfc00117 	ldw	ra,4(sp)
   1115c:	dc000017 	ldw	r16,0(sp)
   11160:	dec00204 	addi	sp,sp,8
   11164:	f800283a 	ret
   11168:	31bffd44 	addi	r6,r6,-11
   1116c:	818c983a 	sll	r6,r16,r6
   11170:	00800434 	movhi	r2,16
   11174:	10bfffc4 	addi	r2,r2,-1
   11178:	2941ffcc 	andi	r5,r5,2047
   1117c:	0021883a 	mov	r16,zero
   11180:	308c703a 	and	r6,r6,r2
   11184:	003fee06 	br	11140 <__alt_mem_Flash_flash_data+0xf4011140>

00011188 <__clzsi2>:
   11188:	00bfffd4 	movui	r2,65535
   1118c:	11000b36 	bltu	r2,r4,111bc <__clzsi2+0x34>
   11190:	00803fc4 	movi	r2,255
   11194:	1100122e 	bgeu	r2,r4,111e0 <__clzsi2+0x58>
   11198:	00c00204 	movi	r3,8
   1119c:	01400604 	movi	r5,24
   111a0:	20c8d83a 	srl	r4,r4,r3
   111a4:	008000b4 	movhi	r2,2
   111a8:	10bb6a04 	addi	r2,r2,-4696
   111ac:	1109883a 	add	r4,r2,r4
   111b0:	20800003 	ldbu	r2,0(r4)
   111b4:	2885c83a 	sub	r2,r5,r2
   111b8:	f800283a 	ret
   111bc:	00804034 	movhi	r2,256
   111c0:	10bfffc4 	addi	r2,r2,-1
   111c4:	11000336 	bltu	r2,r4,111d4 <__clzsi2+0x4c>
   111c8:	00c00404 	movi	r3,16
   111cc:	180b883a 	mov	r5,r3
   111d0:	003ff306 	br	111a0 <__alt_mem_Flash_flash_data+0xf40111a0>
   111d4:	00c00604 	movi	r3,24
   111d8:	01400204 	movi	r5,8
   111dc:	003ff006 	br	111a0 <__alt_mem_Flash_flash_data+0xf40111a0>
   111e0:	0007883a 	mov	r3,zero
   111e4:	01400804 	movi	r5,32
   111e8:	003fed06 	br	111a0 <__alt_mem_Flash_flash_data+0xf40111a0>

000111ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   111ec:	defffe04 	addi	sp,sp,-8
   111f0:	dfc00115 	stw	ra,4(sp)
   111f4:	df000015 	stw	fp,0(sp)
   111f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   111fc:	008000b4 	movhi	r2,2
   11200:	10855e04 	addi	r2,r2,5496
   11204:	10800017 	ldw	r2,0(r2)
   11208:	10000526 	beq	r2,zero,11220 <alt_get_errno+0x34>
   1120c:	008000b4 	movhi	r2,2
   11210:	10855e04 	addi	r2,r2,5496
   11214:	10800017 	ldw	r2,0(r2)
   11218:	103ee83a 	callr	r2
   1121c:	00000206 	br	11228 <alt_get_errno+0x3c>
   11220:	008000b4 	movhi	r2,2
   11224:	108e2704 	addi	r2,r2,14492
}
   11228:	e037883a 	mov	sp,fp
   1122c:	dfc00117 	ldw	ra,4(sp)
   11230:	df000017 	ldw	fp,0(sp)
   11234:	dec00204 	addi	sp,sp,8
   11238:	f800283a 	ret

0001123c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1123c:	defffb04 	addi	sp,sp,-20
   11240:	dfc00415 	stw	ra,16(sp)
   11244:	df000315 	stw	fp,12(sp)
   11248:	df000304 	addi	fp,sp,12
   1124c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11250:	e0bfff17 	ldw	r2,-4(fp)
   11254:	10000616 	blt	r2,zero,11270 <close+0x34>
   11258:	e0bfff17 	ldw	r2,-4(fp)
   1125c:	10c00324 	muli	r3,r2,12
   11260:	008000b4 	movhi	r2,2
   11264:	10bf3004 	addi	r2,r2,-832
   11268:	1885883a 	add	r2,r3,r2
   1126c:	00000106 	br	11274 <close+0x38>
   11270:	0005883a 	mov	r2,zero
   11274:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11278:	e0bffd17 	ldw	r2,-12(fp)
   1127c:	10001926 	beq	r2,zero,112e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11280:	e0bffd17 	ldw	r2,-12(fp)
   11284:	10800017 	ldw	r2,0(r2)
   11288:	10800417 	ldw	r2,16(r2)
   1128c:	10000626 	beq	r2,zero,112a8 <close+0x6c>
   11290:	e0bffd17 	ldw	r2,-12(fp)
   11294:	10800017 	ldw	r2,0(r2)
   11298:	10800417 	ldw	r2,16(r2)
   1129c:	e13ffd17 	ldw	r4,-12(fp)
   112a0:	103ee83a 	callr	r2
   112a4:	00000106 	br	112ac <close+0x70>
   112a8:	0005883a 	mov	r2,zero
   112ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   112b0:	e13fff17 	ldw	r4,-4(fp)
   112b4:	00119540 	call	11954 <alt_release_fd>
    if (rval < 0)
   112b8:	e0bffe17 	ldw	r2,-8(fp)
   112bc:	1000070e 	bge	r2,zero,112dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
   112c0:	00111ec0 	call	111ec <alt_get_errno>
   112c4:	1007883a 	mov	r3,r2
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	0085c83a 	sub	r2,zero,r2
   112d0:	18800015 	stw	r2,0(r3)
      return -1;
   112d4:	00bfffc4 	movi	r2,-1
   112d8:	00000706 	br	112f8 <close+0xbc>
    }
    return 0;
   112dc:	0005883a 	mov	r2,zero
   112e0:	00000506 	br	112f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   112e4:	00111ec0 	call	111ec <alt_get_errno>
   112e8:	1007883a 	mov	r3,r2
   112ec:	00801444 	movi	r2,81
   112f0:	18800015 	stw	r2,0(r3)
    return -1;
   112f4:	00bfffc4 	movi	r2,-1
  }
}
   112f8:	e037883a 	mov	sp,fp
   112fc:	dfc00117 	ldw	ra,4(sp)
   11300:	df000017 	ldw	fp,0(sp)
   11304:	dec00204 	addi	sp,sp,8
   11308:	f800283a 	ret

0001130c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1130c:	defffc04 	addi	sp,sp,-16
   11310:	df000315 	stw	fp,12(sp)
   11314:	df000304 	addi	fp,sp,12
   11318:	e13ffd15 	stw	r4,-12(fp)
   1131c:	e17ffe15 	stw	r5,-8(fp)
   11320:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11324:	e0bfff17 	ldw	r2,-4(fp)
}
   11328:	e037883a 	mov	sp,fp
   1132c:	df000017 	ldw	fp,0(sp)
   11330:	dec00104 	addi	sp,sp,4
   11334:	f800283a 	ret

00011338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11338:	defffe04 	addi	sp,sp,-8
   1133c:	dfc00115 	stw	ra,4(sp)
   11340:	df000015 	stw	fp,0(sp)
   11344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11348:	008000b4 	movhi	r2,2
   1134c:	10855e04 	addi	r2,r2,5496
   11350:	10800017 	ldw	r2,0(r2)
   11354:	10000526 	beq	r2,zero,1136c <alt_get_errno+0x34>
   11358:	008000b4 	movhi	r2,2
   1135c:	10855e04 	addi	r2,r2,5496
   11360:	10800017 	ldw	r2,0(r2)
   11364:	103ee83a 	callr	r2
   11368:	00000206 	br	11374 <alt_get_errno+0x3c>
   1136c:	008000b4 	movhi	r2,2
   11370:	108e2704 	addi	r2,r2,14492
}
   11374:	e037883a 	mov	sp,fp
   11378:	dfc00117 	ldw	ra,4(sp)
   1137c:	df000017 	ldw	fp,0(sp)
   11380:	dec00204 	addi	sp,sp,8
   11384:	f800283a 	ret

00011388 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11388:	defffb04 	addi	sp,sp,-20
   1138c:	dfc00415 	stw	ra,16(sp)
   11390:	df000315 	stw	fp,12(sp)
   11394:	df000304 	addi	fp,sp,12
   11398:	e13ffe15 	stw	r4,-8(fp)
   1139c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	10000616 	blt	r2,zero,113c0 <fstat+0x38>
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	10c00324 	muli	r3,r2,12
   113b0:	008000b4 	movhi	r2,2
   113b4:	10bf3004 	addi	r2,r2,-832
   113b8:	1885883a 	add	r2,r3,r2
   113bc:	00000106 	br	113c4 <fstat+0x3c>
   113c0:	0005883a 	mov	r2,zero
   113c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   113c8:	e0bffd17 	ldw	r2,-12(fp)
   113cc:	10001026 	beq	r2,zero,11410 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	10800017 	ldw	r2,0(r2)
   113d8:	10800817 	ldw	r2,32(r2)
   113dc:	10000726 	beq	r2,zero,113fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   113e0:	e0bffd17 	ldw	r2,-12(fp)
   113e4:	10800017 	ldw	r2,0(r2)
   113e8:	10800817 	ldw	r2,32(r2)
   113ec:	e13ffd17 	ldw	r4,-12(fp)
   113f0:	e17fff17 	ldw	r5,-4(fp)
   113f4:	103ee83a 	callr	r2
   113f8:	00000a06 	br	11424 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	00c80004 	movi	r3,8192
   11404:	10c00115 	stw	r3,4(r2)
      return 0;
   11408:	0005883a 	mov	r2,zero
   1140c:	00000506 	br	11424 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11410:	00113380 	call	11338 <alt_get_errno>
   11414:	1007883a 	mov	r3,r2
   11418:	00801444 	movi	r2,81
   1141c:	18800015 	stw	r2,0(r3)
    return -1;
   11420:	00bfffc4 	movi	r2,-1
  }
}
   11424:	e037883a 	mov	sp,fp
   11428:	dfc00117 	ldw	ra,4(sp)
   1142c:	df000017 	ldw	fp,0(sp)
   11430:	dec00204 	addi	sp,sp,8
   11434:	f800283a 	ret

00011438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11438:	defffe04 	addi	sp,sp,-8
   1143c:	dfc00115 	stw	ra,4(sp)
   11440:	df000015 	stw	fp,0(sp)
   11444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11448:	008000b4 	movhi	r2,2
   1144c:	10855e04 	addi	r2,r2,5496
   11450:	10800017 	ldw	r2,0(r2)
   11454:	10000526 	beq	r2,zero,1146c <alt_get_errno+0x34>
   11458:	008000b4 	movhi	r2,2
   1145c:	10855e04 	addi	r2,r2,5496
   11460:	10800017 	ldw	r2,0(r2)
   11464:	103ee83a 	callr	r2
   11468:	00000206 	br	11474 <alt_get_errno+0x3c>
   1146c:	008000b4 	movhi	r2,2
   11470:	108e2704 	addi	r2,r2,14492
}
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11488:	deffed04 	addi	sp,sp,-76
   1148c:	dfc01215 	stw	ra,72(sp)
   11490:	df001115 	stw	fp,68(sp)
   11494:	df001104 	addi	fp,sp,68
   11498:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1149c:	e0bfff17 	ldw	r2,-4(fp)
   114a0:	10000616 	blt	r2,zero,114bc <isatty+0x34>
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	10c00324 	muli	r3,r2,12
   114ac:	008000b4 	movhi	r2,2
   114b0:	10bf3004 	addi	r2,r2,-832
   114b4:	1885883a 	add	r2,r3,r2
   114b8:	00000106 	br	114c0 <isatty+0x38>
   114bc:	0005883a 	mov	r2,zero
   114c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   114c4:	e0bfef17 	ldw	r2,-68(fp)
   114c8:	10000e26 	beq	r2,zero,11504 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   114cc:	e0bfef17 	ldw	r2,-68(fp)
   114d0:	10800017 	ldw	r2,0(r2)
   114d4:	10800817 	ldw	r2,32(r2)
   114d8:	1000021e 	bne	r2,zero,114e4 <isatty+0x5c>
    {
      return 1;
   114dc:	00800044 	movi	r2,1
   114e0:	00000d06 	br	11518 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   114e4:	e0bff004 	addi	r2,fp,-64
   114e8:	e13fff17 	ldw	r4,-4(fp)
   114ec:	100b883a 	mov	r5,r2
   114f0:	00113880 	call	11388 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   114f4:	e0bff117 	ldw	r2,-60(fp)
   114f8:	10880020 	cmpeqi	r2,r2,8192
   114fc:	10803fcc 	andi	r2,r2,255
   11500:	00000506 	br	11518 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11504:	00114380 	call	11438 <alt_get_errno>
   11508:	1007883a 	mov	r3,r2
   1150c:	00801444 	movi	r2,81
   11510:	18800015 	stw	r2,0(r3)
    return 0;
   11514:	0005883a 	mov	r2,zero
  }
}
   11518:	e037883a 	mov	sp,fp
   1151c:	dfc00117 	ldw	ra,4(sp)
   11520:	df000017 	ldw	fp,0(sp)
   11524:	dec00204 	addi	sp,sp,8
   11528:	f800283a 	ret

0001152c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1152c:	defffc04 	addi	sp,sp,-16
   11530:	df000315 	stw	fp,12(sp)
   11534:	df000304 	addi	fp,sp,12
   11538:	e13ffd15 	stw	r4,-12(fp)
   1153c:	e17ffe15 	stw	r5,-8(fp)
   11540:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11544:	e0fffe17 	ldw	r3,-8(fp)
   11548:	e0bffd17 	ldw	r2,-12(fp)
   1154c:	18800c26 	beq	r3,r2,11580 <alt_load_section+0x54>
  {
    while( to != end )
   11550:	00000806 	br	11574 <alt_load_section+0x48>
    {
      *to++ = *from++;
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	10c00104 	addi	r3,r2,4
   1155c:	e0fffe15 	stw	r3,-8(fp)
   11560:	e0fffd17 	ldw	r3,-12(fp)
   11564:	19000104 	addi	r4,r3,4
   11568:	e13ffd15 	stw	r4,-12(fp)
   1156c:	18c00017 	ldw	r3,0(r3)
   11570:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11574:	e0fffe17 	ldw	r3,-8(fp)
   11578:	e0bfff17 	ldw	r2,-4(fp)
   1157c:	18bff51e 	bne	r3,r2,11554 <__alt_mem_Flash_flash_data+0xf4011554>
    {
      *to++ = *from++;
    }
  }
}
   11580:	e037883a 	mov	sp,fp
   11584:	df000017 	ldw	fp,0(sp)
   11588:	dec00104 	addi	sp,sp,4
   1158c:	f800283a 	ret

00011590 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11590:	defffe04 	addi	sp,sp,-8
   11594:	dfc00115 	stw	ra,4(sp)
   11598:	df000015 	stw	fp,0(sp)
   1159c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   115a0:	010000b4 	movhi	r4,2
   115a4:	21058204 	addi	r4,r4,5640
   115a8:	014000b4 	movhi	r5,2
   115ac:	297cf804 	addi	r5,r5,-3104
   115b0:	018000b4 	movhi	r6,2
   115b4:	31858204 	addi	r6,r6,5640
   115b8:	001152c0 	call	1152c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   115bc:	01000034 	movhi	r4,0
   115c0:	21000804 	addi	r4,r4,32
   115c4:	01400034 	movhi	r5,0
   115c8:	29400804 	addi	r5,r5,32
   115cc:	01800034 	movhi	r6,0
   115d0:	31809104 	addi	r6,r6,580
   115d4:	001152c0 	call	1152c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   115d8:	010000b4 	movhi	r4,2
   115dc:	213a6604 	addi	r4,r4,-5736
   115e0:	014000b4 	movhi	r5,2
   115e4:	297a6604 	addi	r5,r5,-5736
   115e8:	018000b4 	movhi	r6,2
   115ec:	31bcf804 	addi	r6,r6,-3104
   115f0:	001152c0 	call	1152c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   115f4:	001d5e00 	call	1d5e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   115f8:	001d8380 	call	1d838 <alt_icache_flush_all>
}
   115fc:	e037883a 	mov	sp,fp
   11600:	dfc00117 	ldw	ra,4(sp)
   11604:	df000017 	ldw	fp,0(sp)
   11608:	dec00204 	addi	sp,sp,8
   1160c:	f800283a 	ret

00011610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11610:	defffe04 	addi	sp,sp,-8
   11614:	dfc00115 	stw	ra,4(sp)
   11618:	df000015 	stw	fp,0(sp)
   1161c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11620:	008000b4 	movhi	r2,2
   11624:	10855e04 	addi	r2,r2,5496
   11628:	10800017 	ldw	r2,0(r2)
   1162c:	10000526 	beq	r2,zero,11644 <alt_get_errno+0x34>
   11630:	008000b4 	movhi	r2,2
   11634:	10855e04 	addi	r2,r2,5496
   11638:	10800017 	ldw	r2,0(r2)
   1163c:	103ee83a 	callr	r2
   11640:	00000206 	br	1164c <alt_get_errno+0x3c>
   11644:	008000b4 	movhi	r2,2
   11648:	108e2704 	addi	r2,r2,14492
}
   1164c:	e037883a 	mov	sp,fp
   11650:	dfc00117 	ldw	ra,4(sp)
   11654:	df000017 	ldw	fp,0(sp)
   11658:	dec00204 	addi	sp,sp,8
   1165c:	f800283a 	ret

00011660 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   11660:	defff904 	addi	sp,sp,-28
   11664:	dfc00615 	stw	ra,24(sp)
   11668:	df000515 	stw	fp,20(sp)
   1166c:	df000504 	addi	fp,sp,20
   11670:	e13ffd15 	stw	r4,-12(fp)
   11674:	e17ffe15 	stw	r5,-8(fp)
   11678:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1167c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11680:	e0bffd17 	ldw	r2,-12(fp)
   11684:	10000616 	blt	r2,zero,116a0 <lseek+0x40>
   11688:	e0bffd17 	ldw	r2,-12(fp)
   1168c:	10c00324 	muli	r3,r2,12
   11690:	008000b4 	movhi	r2,2
   11694:	10bf3004 	addi	r2,r2,-832
   11698:	1885883a 	add	r2,r3,r2
   1169c:	00000106 	br	116a4 <lseek+0x44>
   116a0:	0005883a 	mov	r2,zero
   116a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   116a8:	e0bffc17 	ldw	r2,-16(fp)
   116ac:	10001026 	beq	r2,zero,116f0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	10800017 	ldw	r2,0(r2)
   116b8:	10800717 	ldw	r2,28(r2)
   116bc:	10000926 	beq	r2,zero,116e4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   116c0:	e0bffc17 	ldw	r2,-16(fp)
   116c4:	10800017 	ldw	r2,0(r2)
   116c8:	10800717 	ldw	r2,28(r2)
   116cc:	e13ffc17 	ldw	r4,-16(fp)
   116d0:	e17ffe17 	ldw	r5,-8(fp)
   116d4:	e1bfff17 	ldw	r6,-4(fp)
   116d8:	103ee83a 	callr	r2
   116dc:	e0bffb15 	stw	r2,-20(fp)
   116e0:	00000506 	br	116f8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   116e4:	00bfde84 	movi	r2,-134
   116e8:	e0bffb15 	stw	r2,-20(fp)
   116ec:	00000206 	br	116f8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   116f0:	00bfebc4 	movi	r2,-81
   116f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   116f8:	e0bffb17 	ldw	r2,-20(fp)
   116fc:	1000070e 	bge	r2,zero,1171c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   11700:	00116100 	call	11610 <alt_get_errno>
   11704:	1007883a 	mov	r3,r2
   11708:	e0bffb17 	ldw	r2,-20(fp)
   1170c:	0085c83a 	sub	r2,zero,r2
   11710:	18800015 	stw	r2,0(r3)
    rc = -1;
   11714:	00bfffc4 	movi	r2,-1
   11718:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1171c:	e0bffb17 	ldw	r2,-20(fp)
}
   11720:	e037883a 	mov	sp,fp
   11724:	dfc00117 	ldw	ra,4(sp)
   11728:	df000017 	ldw	fp,0(sp)
   1172c:	dec00204 	addi	sp,sp,8
   11730:	f800283a 	ret

00011734 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11734:	defff904 	addi	sp,sp,-28
   11738:	dfc00615 	stw	ra,24(sp)
   1173c:	df000515 	stw	fp,20(sp)
   11740:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11744:	0009883a 	mov	r4,zero
   11748:	001a7080 	call	1a708 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1174c:	00127240 	call	12724 <OSInit>
   11750:	01000044 	movi	r4,1
   11754:	0017e1c0 	call	17e1c <OSSemCreate>
   11758:	1007883a 	mov	r3,r2
   1175c:	008000b4 	movhi	r2,2
   11760:	108e2d04 	addi	r2,r2,14516
   11764:	10c00015 	stw	r3,0(r2)
   11768:	01000044 	movi	r4,1
   1176c:	0017e1c0 	call	17e1c <OSSemCreate>
   11770:	1007883a 	mov	r3,r2
   11774:	008000b4 	movhi	r2,2
   11778:	108e2f04 	addi	r2,r2,14524
   1177c:	10c00015 	stw	r3,0(r2)
   11780:	008000b4 	movhi	r2,2
   11784:	108e2804 	addi	r2,r2,14496
   11788:	e0bffc15 	stw	r2,-16(fp)
   1178c:	00800044 	movi	r2,1
   11790:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   11794:	e0bffd0b 	ldhu	r2,-12(fp)
   11798:	1009883a 	mov	r4,r2
   1179c:	0017e1c0 	call	17e1c <OSSemCreate>
   117a0:	1007883a 	mov	r3,r2
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   117ac:	001a73c0 	call	1a73c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   117b0:	010000b4 	movhi	r4,2
   117b4:	213bad04 	addi	r4,r4,-4428
   117b8:	014000b4 	movhi	r5,2
   117bc:	297bad04 	addi	r5,r5,-4428
   117c0:	018000b4 	movhi	r6,2
   117c4:	31bbad04 	addi	r6,r6,-4428
   117c8:	001d9280 	call	1d928 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   117cc:	001d6f00 	call	1d6f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   117d0:	010000b4 	movhi	r4,2
   117d4:	2135d304 	addi	r4,r4,-10420
   117d8:	001e5ec0 	call	1e5ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   117dc:	d128df17 	ldw	r4,-23684(gp)
   117e0:	d0e8e017 	ldw	r3,-23680(gp)
   117e4:	d0a8e117 	ldw	r2,-23676(gp)
   117e8:	180b883a 	mov	r5,r3
   117ec:	100d883a 	mov	r6,r2
   117f0:	0000bf80 	call	bf8 <main>
   117f4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   117f8:	01000044 	movi	r4,1
   117fc:	001123c0 	call	1123c <close>
  exit (result);
   11800:	e13ffb17 	ldw	r4,-20(fp)
   11804:	001e6000 	call	1e600 <exit>

00011808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11808:	defffe04 	addi	sp,sp,-8
   1180c:	dfc00115 	stw	ra,4(sp)
   11810:	df000015 	stw	fp,0(sp)
   11814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11818:	008000b4 	movhi	r2,2
   1181c:	10855e04 	addi	r2,r2,5496
   11820:	10800017 	ldw	r2,0(r2)
   11824:	10000526 	beq	r2,zero,1183c <alt_get_errno+0x34>
   11828:	008000b4 	movhi	r2,2
   1182c:	10855e04 	addi	r2,r2,5496
   11830:	10800017 	ldw	r2,0(r2)
   11834:	103ee83a 	callr	r2
   11838:	00000206 	br	11844 <alt_get_errno+0x3c>
   1183c:	008000b4 	movhi	r2,2
   11840:	108e2704 	addi	r2,r2,14492
}
   11844:	e037883a 	mov	sp,fp
   11848:	dfc00117 	ldw	ra,4(sp)
   1184c:	df000017 	ldw	fp,0(sp)
   11850:	dec00204 	addi	sp,sp,8
   11854:	f800283a 	ret

00011858 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11858:	defff904 	addi	sp,sp,-28
   1185c:	dfc00615 	stw	ra,24(sp)
   11860:	df000515 	stw	fp,20(sp)
   11864:	df000504 	addi	fp,sp,20
   11868:	e13ffd15 	stw	r4,-12(fp)
   1186c:	e17ffe15 	stw	r5,-8(fp)
   11870:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11874:	e0bffd17 	ldw	r2,-12(fp)
   11878:	10000616 	blt	r2,zero,11894 <read+0x3c>
   1187c:	e0bffd17 	ldw	r2,-12(fp)
   11880:	10c00324 	muli	r3,r2,12
   11884:	008000b4 	movhi	r2,2
   11888:	10bf3004 	addi	r2,r2,-832
   1188c:	1885883a 	add	r2,r3,r2
   11890:	00000106 	br	11898 <read+0x40>
   11894:	0005883a 	mov	r2,zero
   11898:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1189c:	e0bffb17 	ldw	r2,-20(fp)
   118a0:	10002226 	beq	r2,zero,1192c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   118a4:	e0bffb17 	ldw	r2,-20(fp)
   118a8:	10800217 	ldw	r2,8(r2)
   118ac:	108000cc 	andi	r2,r2,3
   118b0:	10800060 	cmpeqi	r2,r2,1
   118b4:	1000181e 	bne	r2,zero,11918 <read+0xc0>
        (fd->dev->read))
   118b8:	e0bffb17 	ldw	r2,-20(fp)
   118bc:	10800017 	ldw	r2,0(r2)
   118c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   118c4:	10001426 	beq	r2,zero,11918 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   118c8:	e0bffb17 	ldw	r2,-20(fp)
   118cc:	10800017 	ldw	r2,0(r2)
   118d0:	10800517 	ldw	r2,20(r2)
   118d4:	e0ffff17 	ldw	r3,-4(fp)
   118d8:	e13ffb17 	ldw	r4,-20(fp)
   118dc:	e17ffe17 	ldw	r5,-8(fp)
   118e0:	180d883a 	mov	r6,r3
   118e4:	103ee83a 	callr	r2
   118e8:	e0bffc15 	stw	r2,-16(fp)
   118ec:	e0bffc17 	ldw	r2,-16(fp)
   118f0:	1000070e 	bge	r2,zero,11910 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   118f4:	00118080 	call	11808 <alt_get_errno>
   118f8:	1007883a 	mov	r3,r2
   118fc:	e0bffc17 	ldw	r2,-16(fp)
   11900:	0085c83a 	sub	r2,zero,r2
   11904:	18800015 	stw	r2,0(r3)
          return -1;
   11908:	00bfffc4 	movi	r2,-1
   1190c:	00000c06 	br	11940 <read+0xe8>
        }
        return rval;
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	00000a06 	br	11940 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   11918:	00118080 	call	11808 <alt_get_errno>
   1191c:	1007883a 	mov	r3,r2
   11920:	00800344 	movi	r2,13
   11924:	18800015 	stw	r2,0(r3)
   11928:	00000406 	br	1193c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1192c:	00118080 	call	11808 <alt_get_errno>
   11930:	1007883a 	mov	r3,r2
   11934:	00801444 	movi	r2,81
   11938:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1193c:	00bfffc4 	movi	r2,-1
}
   11940:	e037883a 	mov	sp,fp
   11944:	dfc00117 	ldw	ra,4(sp)
   11948:	df000017 	ldw	fp,0(sp)
   1194c:	dec00204 	addi	sp,sp,8
   11950:	f800283a 	ret

00011954 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11954:	defffe04 	addi	sp,sp,-8
   11958:	df000115 	stw	fp,4(sp)
   1195c:	df000104 	addi	fp,sp,4
   11960:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11964:	e0bfff17 	ldw	r2,-4(fp)
   11968:	108000d0 	cmplti	r2,r2,3
   1196c:	10000d1e 	bne	r2,zero,119a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   11970:	008000b4 	movhi	r2,2
   11974:	10bf3004 	addi	r2,r2,-832
   11978:	e0ffff17 	ldw	r3,-4(fp)
   1197c:	18c00324 	muli	r3,r3,12
   11980:	18c00204 	addi	r3,r3,8
   11984:	10c5883a 	add	r2,r2,r3
   11988:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1198c:	008000b4 	movhi	r2,2
   11990:	10bf3004 	addi	r2,r2,-832
   11994:	e0ffff17 	ldw	r3,-4(fp)
   11998:	18c00324 	muli	r3,r3,12
   1199c:	10c5883a 	add	r2,r2,r3
   119a0:	10000015 	stw	zero,0(r2)
  }
}
   119a4:	e037883a 	mov	sp,fp
   119a8:	df000017 	ldw	fp,0(sp)
   119ac:	dec00104 	addi	sp,sp,4
   119b0:	f800283a 	ret

000119b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   119b4:	defff904 	addi	sp,sp,-28
   119b8:	df000615 	stw	fp,24(sp)
   119bc:	df000604 	addi	fp,sp,24
   119c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119c4:	0005303a 	rdctl	r2,status
   119c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119cc:	e0fffc17 	ldw	r3,-16(fp)
   119d0:	00bfff84 	movi	r2,-2
   119d4:	1884703a 	and	r2,r3,r2
   119d8:	1001703a 	wrctl	status,r2
  
  return context;
   119dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   119e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   119e4:	d0a01517 	ldw	r2,-32684(gp)
   119e8:	10c000c4 	addi	r3,r2,3
   119ec:	00bfff04 	movi	r2,-4
   119f0:	1884703a 	and	r2,r3,r2
   119f4:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   119f8:	d0e01517 	ldw	r3,-32684(gp)
   119fc:	e0bfff17 	ldw	r2,-4(fp)
   11a00:	1887883a 	add	r3,r3,r2
   11a04:	00810034 	movhi	r2,1024
   11a08:	10800004 	addi	r2,r2,0
   11a0c:	10c0062e 	bgeu	r2,r3,11a28 <sbrk+0x74>
   11a10:	e0bffa17 	ldw	r2,-24(fp)
   11a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a18:	e0bffd17 	ldw	r2,-12(fp)
   11a1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11a20:	00bfffc4 	movi	r2,-1
   11a24:	00000b06 	br	11a54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11a28:	d0a01517 	ldw	r2,-32684(gp)
   11a2c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   11a30:	d0e01517 	ldw	r3,-32684(gp)
   11a34:	e0bfff17 	ldw	r2,-4(fp)
   11a38:	1885883a 	add	r2,r3,r2
   11a3c:	d0a01515 	stw	r2,-32684(gp)
   11a40:	e0bffa17 	ldw	r2,-24(fp)
   11a44:	e0bffe15 	stw	r2,-8(fp)
   11a48:	e0bffe17 	ldw	r2,-8(fp)
   11a4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11a50:	e0bffb17 	ldw	r2,-20(fp)
} 
   11a54:	e037883a 	mov	sp,fp
   11a58:	df000017 	ldw	fp,0(sp)
   11a5c:	dec00104 	addi	sp,sp,4
   11a60:	f800283a 	ret

00011a64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a64:	defffe04 	addi	sp,sp,-8
   11a68:	dfc00115 	stw	ra,4(sp)
   11a6c:	df000015 	stw	fp,0(sp)
   11a70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11a74:	008000b4 	movhi	r2,2
   11a78:	10855e04 	addi	r2,r2,5496
   11a7c:	10800017 	ldw	r2,0(r2)
   11a80:	10000526 	beq	r2,zero,11a98 <alt_get_errno+0x34>
   11a84:	008000b4 	movhi	r2,2
   11a88:	10855e04 	addi	r2,r2,5496
   11a8c:	10800017 	ldw	r2,0(r2)
   11a90:	103ee83a 	callr	r2
   11a94:	00000206 	br	11aa0 <alt_get_errno+0x3c>
   11a98:	008000b4 	movhi	r2,2
   11a9c:	108e2704 	addi	r2,r2,14492
}
   11aa0:	e037883a 	mov	sp,fp
   11aa4:	dfc00117 	ldw	ra,4(sp)
   11aa8:	df000017 	ldw	fp,0(sp)
   11aac:	dec00204 	addi	sp,sp,8
   11ab0:	f800283a 	ret

00011ab4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11ab4:	defff904 	addi	sp,sp,-28
   11ab8:	dfc00615 	stw	ra,24(sp)
   11abc:	df000515 	stw	fp,20(sp)
   11ac0:	df000504 	addi	fp,sp,20
   11ac4:	e13ffd15 	stw	r4,-12(fp)
   11ac8:	e17ffe15 	stw	r5,-8(fp)
   11acc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11ad0:	e0bffd17 	ldw	r2,-12(fp)
   11ad4:	10000616 	blt	r2,zero,11af0 <write+0x3c>
   11ad8:	e0bffd17 	ldw	r2,-12(fp)
   11adc:	10c00324 	muli	r3,r2,12
   11ae0:	008000b4 	movhi	r2,2
   11ae4:	10bf3004 	addi	r2,r2,-832
   11ae8:	1885883a 	add	r2,r3,r2
   11aec:	00000106 	br	11af4 <write+0x40>
   11af0:	0005883a 	mov	r2,zero
   11af4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11af8:	e0bffb17 	ldw	r2,-20(fp)
   11afc:	10002126 	beq	r2,zero,11b84 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11b00:	e0bffb17 	ldw	r2,-20(fp)
   11b04:	10800217 	ldw	r2,8(r2)
   11b08:	108000cc 	andi	r2,r2,3
   11b0c:	10001826 	beq	r2,zero,11b70 <write+0xbc>
   11b10:	e0bffb17 	ldw	r2,-20(fp)
   11b14:	10800017 	ldw	r2,0(r2)
   11b18:	10800617 	ldw	r2,24(r2)
   11b1c:	10001426 	beq	r2,zero,11b70 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11b20:	e0bffb17 	ldw	r2,-20(fp)
   11b24:	10800017 	ldw	r2,0(r2)
   11b28:	10800617 	ldw	r2,24(r2)
   11b2c:	e0ffff17 	ldw	r3,-4(fp)
   11b30:	e13ffb17 	ldw	r4,-20(fp)
   11b34:	e17ffe17 	ldw	r5,-8(fp)
   11b38:	180d883a 	mov	r6,r3
   11b3c:	103ee83a 	callr	r2
   11b40:	e0bffc15 	stw	r2,-16(fp)
   11b44:	e0bffc17 	ldw	r2,-16(fp)
   11b48:	1000070e 	bge	r2,zero,11b68 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11b4c:	0011a640 	call	11a64 <alt_get_errno>
   11b50:	1007883a 	mov	r3,r2
   11b54:	e0bffc17 	ldw	r2,-16(fp)
   11b58:	0085c83a 	sub	r2,zero,r2
   11b5c:	18800015 	stw	r2,0(r3)
        return -1;
   11b60:	00bfffc4 	movi	r2,-1
   11b64:	00000c06 	br	11b98 <write+0xe4>
      }
      return rval;
   11b68:	e0bffc17 	ldw	r2,-16(fp)
   11b6c:	00000a06 	br	11b98 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11b70:	0011a640 	call	11a64 <alt_get_errno>
   11b74:	1007883a 	mov	r3,r2
   11b78:	00800344 	movi	r2,13
   11b7c:	18800015 	stw	r2,0(r3)
   11b80:	00000406 	br	11b94 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11b84:	0011a640 	call	11a64 <alt_get_errno>
   11b88:	1007883a 	mov	r3,r2
   11b8c:	00801444 	movi	r2,81
   11b90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11b94:	00bfffc4 	movi	r2,-1
}
   11b98:	e037883a 	mov	sp,fp
   11b9c:	dfc00117 	ldw	ra,4(sp)
   11ba0:	df000017 	ldw	fp,0(sp)
   11ba4:	dec00204 	addi	sp,sp,8
   11ba8:	f800283a 	ret

00011bac <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   11bac:	deffdf04 	addi	sp,sp,-132
   11bb0:	dfc02015 	stw	ra,128(sp)
   11bb4:	df001f15 	stw	fp,124(sp)
   11bb8:	df001f04 	addi	fp,sp,124
   11bbc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   11bc0:	e0bfe204 	addi	r2,fp,-120
   11bc4:	01003fc4 	movi	r4,255
   11bc8:	100b883a 	mov	r5,r2
   11bcc:	0019fd00 	call	19fd0 <OSTaskQuery>
   11bd0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   11bd4:	e0bffe83 	ldbu	r2,-6(fp)
   11bd8:	10803fcc 	andi	r2,r2,255
   11bdc:	10000126 	beq	r2,zero,11be4 <__env_lock+0x38>
    return;
   11be0:	00001d06 	br	11c58 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   11be4:	e0bfee83 	ldbu	r2,-70(fp)
   11be8:	10803fcc 	andi	r2,r2,255
   11bec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   11bf0:	d0e8e317 	ldw	r3,-23668(gp)
   11bf4:	e0bffd04 	addi	r2,fp,-12
   11bf8:	1809883a 	mov	r4,r3
   11bfc:	100b883a 	mov	r5,r2
   11c00:	00186680 	call	18668 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   11c04:	e0bffe43 	ldbu	r2,-7(fp)
   11c08:	10803fcc 	andi	r2,r2,255
   11c0c:	10000726 	beq	r2,zero,11c2c <__env_lock+0x80>
   11c10:	d0a01617 	ldw	r2,-32680(gp)
   11c14:	e0ffe117 	ldw	r3,-124(fp)
   11c18:	1880041e 	bne	r3,r2,11c2c <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   11c1c:	d0a8e217 	ldw	r2,-23672(gp)
   11c20:	10800044 	addi	r2,r2,1
   11c24:	d0a8e215 	stw	r2,-23672(gp)
   11c28:	00000a06 	br	11c54 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   11c2c:	d0e8e317 	ldw	r3,-23668(gp)
   11c30:	e0bffe84 	addi	r2,fp,-6
   11c34:	1809883a 	mov	r4,r3
   11c38:	000b883a 	mov	r5,zero
   11c3c:	100d883a 	mov	r6,r2
   11c40:	00181840 	call	18184 <OSSemPend>
    locks  = 1;
   11c44:	00800044 	movi	r2,1
   11c48:	d0a8e215 	stw	r2,-23672(gp)
    lockid = id;
   11c4c:	e0bfe117 	ldw	r2,-124(fp)
   11c50:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   11c54:	0001883a 	nop
}
   11c58:	e037883a 	mov	sp,fp
   11c5c:	dfc00117 	ldw	ra,4(sp)
   11c60:	df000017 	ldw	fp,0(sp)
   11c64:	dec00204 	addi	sp,sp,8
   11c68:	f800283a 	ret

00011c6c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   11c6c:	defffd04 	addi	sp,sp,-12
   11c70:	dfc00215 	stw	ra,8(sp)
   11c74:	df000115 	stw	fp,4(sp)
   11c78:	df000104 	addi	fp,sp,4
   11c7c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   11c80:	d0a8e217 	ldw	r2,-23672(gp)
   11c84:	1000011e 	bne	r2,zero,11c8c <__env_unlock+0x20>
    return;
   11c88:	00000a06 	br	11cb4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   11c8c:	d0a8e217 	ldw	r2,-23672(gp)
   11c90:	10bfffc4 	addi	r2,r2,-1
   11c94:	d0a8e215 	stw	r2,-23672(gp)
   11c98:	d0a8e217 	ldw	r2,-23672(gp)
   11c9c:	1000051e 	bne	r2,zero,11cb4 <__env_unlock+0x48>
  {
    lockid = -1;
   11ca0:	00bfffc4 	movi	r2,-1
   11ca4:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
   11ca8:	d0a8e317 	ldw	r2,-23668(gp)
   11cac:	1009883a 	mov	r4,r2
   11cb0:	00185580 	call	18558 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   11cb4:	e037883a 	mov	sp,fp
   11cb8:	dfc00117 	ldw	ra,4(sp)
   11cbc:	df000017 	ldw	fp,0(sp)
   11cc0:	dec00204 	addi	sp,sp,8
   11cc4:	f800283a 	ret

00011cc8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   11cc8:	deffdb04 	addi	sp,sp,-148
   11ccc:	dfc02415 	stw	ra,144(sp)
   11cd0:	df002315 	stw	fp,140(sp)
   11cd4:	df002304 	addi	fp,sp,140
   11cd8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11cdc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   11ce0:	008000b4 	movhi	r2,2
   11ce4:	108e3044 	addi	r2,r2,14529
   11ce8:	10800003 	ldbu	r2,0(r2)
   11cec:	10803fcc 	andi	r2,r2,255
   11cf0:	10800060 	cmpeqi	r2,r2,1
   11cf4:	1000011e 	bne	r2,zero,11cfc <__malloc_lock+0x34>
      return;
   11cf8:	00003606 	br	11dd4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   11cfc:	e0bfe204 	addi	r2,fp,-120
   11d00:	01003fc4 	movi	r4,255
   11d04:	100b883a 	mov	r5,r2
   11d08:	0019fd00 	call	19fd0 <OSTaskQuery>
   11d0c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   11d10:	e0bffe83 	ldbu	r2,-6(fp)
   11d14:	10803fcc 	andi	r2,r2,255
   11d18:	10000126 	beq	r2,zero,11d20 <__malloc_lock+0x58>
    return;
   11d1c:	00002d06 	br	11dd4 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   11d20:	e0bfee83 	ldbu	r2,-70(fp)
   11d24:	10803fcc 	andi	r2,r2,255
   11d28:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   11d2c:	d0e8e517 	ldw	r3,-23660(gp)
   11d30:	e0bffd04 	addi	r2,fp,-12
   11d34:	1809883a 	mov	r4,r3
   11d38:	100b883a 	mov	r5,r2
   11d3c:	00186680 	call	18668 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d40:	0005303a 	rdctl	r2,status
   11d44:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d48:	e0ffdf17 	ldw	r3,-132(fp)
   11d4c:	00bfff84 	movi	r2,-2
   11d50:	1884703a 	and	r2,r3,r2
   11d54:	1001703a 	wrctl	status,r2
  
  return context;
   11d58:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   11d5c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   11d60:	e0bffd0b 	ldhu	r2,-12(fp)
   11d64:	10bfffcc 	andi	r2,r2,65535
   11d68:	10000b1e 	bne	r2,zero,11d98 <__malloc_lock+0xd0>
   11d6c:	d0a01717 	ldw	r2,-32676(gp)
   11d70:	e0ffde17 	ldw	r3,-136(fp)
   11d74:	1880081e 	bne	r3,r2,11d98 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   11d78:	d0a8e417 	ldw	r2,-23664(gp)
   11d7c:	10800044 	addi	r2,r2,1
   11d80:	d0a8e415 	stw	r2,-23664(gp)
   11d84:	e0bfdd17 	ldw	r2,-140(fp)
   11d88:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d8c:	e0bfe017 	ldw	r2,-128(fp)
   11d90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   11d94:	00000e06 	br	11dd0 <__malloc_lock+0x108>
   11d98:	e0bfdd17 	ldw	r2,-140(fp)
   11d9c:	e0bfe115 	stw	r2,-124(fp)
   11da0:	e0bfe117 	ldw	r2,-124(fp)
   11da4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   11da8:	d0e8e517 	ldw	r3,-23660(gp)
   11dac:	e0bffe84 	addi	r2,fp,-6
   11db0:	1809883a 	mov	r4,r3
   11db4:	000b883a 	mov	r5,zero
   11db8:	100d883a 	mov	r6,r2
   11dbc:	00181840 	call	18184 <OSSemPend>
    locks  = 1;
   11dc0:	00800044 	movi	r2,1
   11dc4:	d0a8e415 	stw	r2,-23664(gp)
    lockid = id;
   11dc8:	e0bfde17 	ldw	r2,-136(fp)
   11dcc:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   11dd0:	0001883a 	nop
}
   11dd4:	e037883a 	mov	sp,fp
   11dd8:	dfc00117 	ldw	ra,4(sp)
   11ddc:	df000017 	ldw	fp,0(sp)
   11de0:	dec00204 	addi	sp,sp,8
   11de4:	f800283a 	ret

00011de8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11de8:	defff804 	addi	sp,sp,-32
   11dec:	dfc00715 	stw	ra,28(sp)
   11df0:	df000615 	stw	fp,24(sp)
   11df4:	df000604 	addi	fp,sp,24
   11df8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11dfc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   11e00:	008000b4 	movhi	r2,2
   11e04:	108e3044 	addi	r2,r2,14529
   11e08:	10800003 	ldbu	r2,0(r2)
   11e0c:	10803fcc 	andi	r2,r2,255
   11e10:	10800060 	cmpeqi	r2,r2,1
   11e14:	1000011e 	bne	r2,zero,11e1c <__malloc_unlock+0x34>
      return;
   11e18:	00002206 	br	11ea4 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e1c:	0005303a 	rdctl	r2,status
   11e20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e24:	e0fffb17 	ldw	r3,-20(fp)
   11e28:	00bfff84 	movi	r2,-2
   11e2c:	1884703a 	and	r2,r3,r2
   11e30:	1001703a 	wrctl	status,r2
  
  return context;
   11e34:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   11e38:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   11e3c:	d0a8e417 	ldw	r2,-23664(gp)
   11e40:	1000051e 	bne	r2,zero,11e58 <__malloc_unlock+0x70>
   11e44:	e0bffa17 	ldw	r2,-24(fp)
   11e48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e4c:	e0bffc17 	ldw	r2,-16(fp)
   11e50:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   11e54:	00001306 	br	11ea4 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   11e58:	d0a8e417 	ldw	r2,-23664(gp)
   11e5c:	10bfffc4 	addi	r2,r2,-1
   11e60:	d0a8e415 	stw	r2,-23664(gp)
   11e64:	d0a8e417 	ldw	r2,-23664(gp)
   11e68:	10000a1e 	bne	r2,zero,11e94 <__malloc_unlock+0xac>
  {
    lockid = -1;
   11e6c:	00bfffc4 	movi	r2,-1
   11e70:	d0a01715 	stw	r2,-32676(gp)
   11e74:	e0bffa17 	ldw	r2,-24(fp)
   11e78:	e0bffd15 	stw	r2,-12(fp)
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   11e84:	d0a8e517 	ldw	r2,-23660(gp)
   11e88:	1009883a 	mov	r4,r2
   11e8c:	00185580 	call	18558 <OSSemPost>
   11e90:	00000406 	br	11ea4 <__malloc_unlock+0xbc>
   11e94:	e0bffa17 	ldw	r2,-24(fp)
   11e98:	e0bffe15 	stw	r2,-8(fp)
   11e9c:	e0bffe17 	ldw	r2,-8(fp)
   11ea0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   11ea4:	e037883a 	mov	sp,fp
   11ea8:	dfc00117 	ldw	ra,4(sp)
   11eac:	df000017 	ldw	fp,0(sp)
   11eb0:	dec00204 	addi	sp,sp,8
   11eb4:	f800283a 	ret

00011eb8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   11eb8:	defff704 	addi	sp,sp,-36
   11ebc:	dfc00815 	stw	ra,32(sp)
   11ec0:	df000715 	stw	fp,28(sp)
   11ec4:	df000704 	addi	fp,sp,28
   11ec8:	e13ffd15 	stw	r4,-12(fp)
   11ecc:	e17ffe15 	stw	r5,-8(fp)
   11ed0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ed4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11ed8:	e0bfff17 	ldw	r2,-4(fp)
   11edc:	1000021e 	bne	r2,zero,11ee8 <OSEventNameGet+0x30>
        return (0);
   11ee0:	0005883a 	mov	r2,zero
   11ee4:	00003706 	br	11fc4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   11ee8:	e0bffd17 	ldw	r2,-12(fp)
   11eec:	1000051e 	bne	r2,zero,11f04 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   11ef0:	e0bfff17 	ldw	r2,-4(fp)
   11ef4:	00c00104 	movi	r3,4
   11ef8:	10c00005 	stb	r3,0(r2)
        return (0);
   11efc:	0005883a 	mov	r2,zero
   11f00:	00003006 	br	11fc4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11f04:	e0bffe17 	ldw	r2,-8(fp)
   11f08:	1000051e 	bne	r2,zero,11f20 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11f0c:	e0bfff17 	ldw	r2,-4(fp)
   11f10:	00c00304 	movi	r3,12
   11f14:	10c00005 	stb	r3,0(r2)
        return (0);
   11f18:	0005883a 	mov	r2,zero
   11f1c:	00002906 	br	11fc4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11f20:	d0a8f403 	ldbu	r2,-23600(gp)
   11f24:	10803fcc 	andi	r2,r2,255
   11f28:	10000526 	beq	r2,zero,11f40 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   11f2c:	e0bfff17 	ldw	r2,-4(fp)
   11f30:	00c00444 	movi	r3,17
   11f34:	10c00005 	stb	r3,0(r2)
        return (0);
   11f38:	0005883a 	mov	r2,zero
   11f3c:	00002106 	br	11fc4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	10800003 	ldbu	r2,0(r2)
   11f48:	10803fcc 	andi	r2,r2,255
   11f4c:	10bfffc4 	addi	r2,r2,-1
   11f50:	10800128 	cmpgeui	r2,r2,4
   11f54:	10000526 	beq	r2,zero,11f6c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   11f58:	e0bfff17 	ldw	r2,-4(fp)
   11f5c:	00c00044 	movi	r3,1
   11f60:	10c00005 	stb	r3,0(r2)
             return (0);
   11f64:	0005883a 	mov	r2,zero
   11f68:	00001606 	br	11fc4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   11f6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f70:	0005303a 	rdctl	r2,status
   11f74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f78:	e0fffb17 	ldw	r3,-20(fp)
   11f7c:	00bfff84 	movi	r2,-2
   11f80:	1884703a 	and	r2,r3,r2
   11f84:	1001703a 	wrctl	status,r2
  
  return context;
   11f88:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   11f8c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   11f90:	e0bffd17 	ldw	r2,-12(fp)
   11f94:	10800384 	addi	r2,r2,14
   11f98:	e13ffe17 	ldw	r4,-8(fp)
   11f9c:	100b883a 	mov	r5,r2
   11fa0:	001390c0 	call	1390c <OS_StrCopy>
   11fa4:	e0bffa05 	stb	r2,-24(fp)
   11fa8:	e0bff917 	ldw	r2,-28(fp)
   11fac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fb0:	e0bffc17 	ldw	r2,-16(fp)
   11fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11fb8:	e0bfff17 	ldw	r2,-4(fp)
   11fbc:	10000005 	stb	zero,0(r2)
    return (len);
   11fc0:	e0bffa03 	ldbu	r2,-24(fp)
}
   11fc4:	e037883a 	mov	sp,fp
   11fc8:	dfc00117 	ldw	ra,4(sp)
   11fcc:	df000017 	ldw	fp,0(sp)
   11fd0:	dec00204 	addi	sp,sp,8
   11fd4:	f800283a 	ret

00011fd8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   11fd8:	defff604 	addi	sp,sp,-40
   11fdc:	dfc00915 	stw	ra,36(sp)
   11fe0:	df000815 	stw	fp,32(sp)
   11fe4:	df000804 	addi	fp,sp,32
   11fe8:	e13ffd15 	stw	r4,-12(fp)
   11fec:	e17ffe15 	stw	r5,-8(fp)
   11ff0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ff4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11ff8:	e0bfff17 	ldw	r2,-4(fp)
   11ffc:	1000011e 	bne	r2,zero,12004 <OSEventNameSet+0x2c>
        return;
   12000:	00003f06 	br	12100 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   12004:	e0bffd17 	ldw	r2,-12(fp)
   12008:	1000041e 	bne	r2,zero,1201c <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1200c:	e0bfff17 	ldw	r2,-4(fp)
   12010:	00c00104 	movi	r3,4
   12014:	10c00005 	stb	r3,0(r2)
        return;
   12018:	00003906 	br	12100 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1201c:	e0bffe17 	ldw	r2,-8(fp)
   12020:	1000041e 	bne	r2,zero,12034 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   12024:	e0bfff17 	ldw	r2,-4(fp)
   12028:	00c00304 	movi	r3,12
   1202c:	10c00005 	stb	r3,0(r2)
        return;
   12030:	00003306 	br	12100 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12034:	d0a8f403 	ldbu	r2,-23600(gp)
   12038:	10803fcc 	andi	r2,r2,255
   1203c:	10000426 	beq	r2,zero,12050 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   12040:	e0bfff17 	ldw	r2,-4(fp)
   12044:	00c00484 	movi	r3,18
   12048:	10c00005 	stb	r3,0(r2)
        return;
   1204c:	00002c06 	br	12100 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   12050:	e0bffd17 	ldw	r2,-12(fp)
   12054:	10800003 	ldbu	r2,0(r2)
   12058:	10803fcc 	andi	r2,r2,255
   1205c:	10bfffc4 	addi	r2,r2,-1
   12060:	10800128 	cmpgeui	r2,r2,4
   12064:	10000426 	beq	r2,zero,12078 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	00c00044 	movi	r3,1
   12070:	10c00005 	stb	r3,0(r2)
             return;
   12074:	00002206 	br	12100 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   12078:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1207c:	0005303a 	rdctl	r2,status
   12080:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12084:	e0fffa17 	ldw	r3,-24(fp)
   12088:	00bfff84 	movi	r2,-2
   1208c:	1884703a 	and	r2,r3,r2
   12090:	1001703a 	wrctl	status,r2
  
  return context;
   12094:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   12098:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1209c:	e13ffe17 	ldw	r4,-8(fp)
   120a0:	00139800 	call	13980 <OS_StrLen>
   120a4:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   120a8:	e0bff903 	ldbu	r2,-28(fp)
   120ac:	10800830 	cmpltui	r2,r2,32
   120b0:	1000081e 	bne	r2,zero,120d4 <OSEventNameSet+0xfc>
   120b4:	e0bff817 	ldw	r2,-32(fp)
   120b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120bc:	e0bffb17 	ldw	r2,-20(fp)
   120c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   120c4:	e0bfff17 	ldw	r2,-4(fp)
   120c8:	00c002c4 	movi	r3,11
   120cc:	10c00005 	stb	r3,0(r2)
        return;
   120d0:	00000b06 	br	12100 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   120d4:	e0bffd17 	ldw	r2,-12(fp)
   120d8:	10800384 	addi	r2,r2,14
   120dc:	1009883a 	mov	r4,r2
   120e0:	e17ffe17 	ldw	r5,-8(fp)
   120e4:	001390c0 	call	1390c <OS_StrCopy>
   120e8:	e0bff817 	ldw	r2,-32(fp)
   120ec:	e0bffc15 	stw	r2,-16(fp)
   120f0:	e0bffc17 	ldw	r2,-16(fp)
   120f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   120f8:	e0bfff17 	ldw	r2,-4(fp)
   120fc:	10000005 	stb	zero,0(r2)
}
   12100:	e037883a 	mov	sp,fp
   12104:	dfc00117 	ldw	ra,4(sp)
   12108:	df000017 	ldw	fp,0(sp)
   1210c:	dec00204 	addi	sp,sp,8
   12110:	f800283a 	ret

00012114 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   12114:	deffed04 	addi	sp,sp,-76
   12118:	dfc01215 	stw	ra,72(sp)
   1211c:	df001115 	stw	fp,68(sp)
   12120:	df001104 	addi	fp,sp,68
   12124:	e13ffc15 	stw	r4,-16(fp)
   12128:	e17ffd15 	stw	r5,-12(fp)
   1212c:	e1bffe15 	stw	r6,-8(fp)
   12130:	3805883a 	mov	r2,r7
   12134:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   12138:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   1213c:	e0800217 	ldw	r2,8(fp)
   12140:	1000021e 	bne	r2,zero,1214c <OSEventPendMulti+0x38>
        return (0);
   12144:	0005883a 	mov	r2,zero
   12148:	00017106 	br	12710 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1214c:	e0bffc17 	ldw	r2,-16(fp)
   12150:	1000051e 	bne	r2,zero,12168 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   12154:	e0800217 	ldw	r2,8(fp)
   12158:	00c00104 	movi	r3,4
   1215c:	10c00005 	stb	r3,0(r2)
        return (0);
   12160:	0005883a 	mov	r2,zero
   12164:	00016a06 	br	12710 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   12168:	e0bffd17 	ldw	r2,-12(fp)
   1216c:	1000051e 	bne	r2,zero,12184 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   12170:	e0800217 	ldw	r2,8(fp)
   12174:	00c00104 	movi	r3,4
   12178:	10c00005 	stb	r3,0(r2)
        return (0);
   1217c:	0005883a 	mov	r2,zero
   12180:	00016306 	br	12710 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   12184:	e0bffe17 	ldw	r2,-8(fp)
   12188:	1000051e 	bne	r2,zero,121a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   1218c:	e0800217 	ldw	r2,8(fp)
   12190:	00c00104 	movi	r3,4
   12194:	10c00005 	stb	r3,0(r2)
        return (0);
   12198:	0005883a 	mov	r2,zero
   1219c:	00015c06 	br	12710 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   121a0:	e0bffd17 	ldw	r2,-12(fp)
   121a4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   121a8:	e0bffc17 	ldw	r2,-16(fp)
   121ac:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   121b0:	e0bfef17 	ldw	r2,-68(fp)
   121b4:	10800017 	ldw	r2,0(r2)
   121b8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   121bc:	00001906 	br	12224 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   121c0:	e0bff017 	ldw	r2,-64(fp)
   121c4:	10800003 	ldbu	r2,0(r2)
   121c8:	10803fcc 	andi	r2,r2,255
   121cc:	10c000a0 	cmpeqi	r3,r2,2
   121d0:	1800091e 	bne	r3,zero,121f8 <OSEventPendMulti+0xe4>
   121d4:	10c000e0 	cmpeqi	r3,r2,3
   121d8:	1800091e 	bne	r3,zero,12200 <OSEventPendMulti+0xec>
   121dc:	10800060 	cmpeqi	r2,r2,1
   121e0:	1000091e 	bne	r2,zero,12208 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   121e4:	e0800217 	ldw	r2,8(fp)
   121e8:	00c00044 	movi	r3,1
   121ec:	10c00005 	stb	r3,0(r2)
                 return (0);
   121f0:	0005883a 	mov	r2,zero
   121f4:	00014606 	br	12710 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   121f8:	0001883a 	nop
   121fc:	00000306 	br	1220c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   12200:	0001883a 	nop
   12204:	00000106 	br	1220c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   12208:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   1220c:	e0bfef17 	ldw	r2,-68(fp)
   12210:	10800104 	addi	r2,r2,4
   12214:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   12218:	e0bfef17 	ldw	r2,-68(fp)
   1221c:	10800017 	ldw	r2,0(r2)
   12220:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   12224:	e0bff017 	ldw	r2,-64(fp)
   12228:	103fe51e 	bne	r2,zero,121c0 <__alt_mem_Flash_flash_data+0xf40121c0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   1222c:	d0a8f403 	ldbu	r2,-23600(gp)
   12230:	10803fcc 	andi	r2,r2,255
   12234:	10000526 	beq	r2,zero,1224c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   12238:	e0800217 	ldw	r2,8(fp)
   1223c:	00c00084 	movi	r3,2
   12240:	10c00005 	stb	r3,0(r2)
        return (0);
   12244:	0005883a 	mov	r2,zero
   12248:	00013106 	br	12710 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1224c:	d0a8e603 	ldbu	r2,-23656(gp)
   12250:	10803fcc 	andi	r2,r2,255
   12254:	10000526 	beq	r2,zero,1226c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   12258:	e0800217 	ldw	r2,8(fp)
   1225c:	00c00344 	movi	r3,13
   12260:	10c00005 	stb	r3,0(r2)
        return (0);
   12264:	0005883a 	mov	r2,zero
   12268:	00012906 	br	12710 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1226c:	0005303a 	rdctl	r2,status
   12270:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12274:	e0fff517 	ldw	r3,-44(fp)
   12278:	00bfff84 	movi	r2,-2
   1227c:	1884703a 	and	r2,r3,r2
   12280:	1001703a 	wrctl	status,r2
  
  return context;
   12284:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   12288:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   1228c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   12290:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   12294:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   12298:	e0bffc17 	ldw	r2,-16(fp)
   1229c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   122a0:	e0bfef17 	ldw	r2,-68(fp)
   122a4:	10800017 	ldw	r2,0(r2)
   122a8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   122ac:	00008106 	br	124b4 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   122b0:	e0bff017 	ldw	r2,-64(fp)
   122b4:	10800003 	ldbu	r2,0(r2)
   122b8:	10803fcc 	andi	r2,r2,255
   122bc:	10c000a0 	cmpeqi	r3,r2,2
   122c0:	18003c1e 	bne	r3,zero,123b4 <OSEventPendMulti+0x2a0>
   122c4:	10c000e0 	cmpeqi	r3,r2,3
   122c8:	1800031e 	bne	r3,zero,122d8 <OSEventPendMulti+0x1c4>
   122cc:	10800060 	cmpeqi	r2,r2,1
   122d0:	10001e1e 	bne	r2,zero,1234c <OSEventPendMulti+0x238>
   122d4:	00006606 	br	12470 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   122d8:	e0bff017 	ldw	r2,-64(fp)
   122dc:	1080020b 	ldhu	r2,8(r2)
   122e0:	10bfffcc 	andi	r2,r2,65535
   122e4:	10001526 	beq	r2,zero,1233c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   122e8:	e0bff017 	ldw	r2,-64(fp)
   122ec:	1080020b 	ldhu	r2,8(r2)
   122f0:	10bfffc4 	addi	r2,r2,-1
   122f4:	1007883a 	mov	r3,r2
   122f8:	e0bff017 	ldw	r2,-64(fp)
   122fc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   12300:	e0bffd17 	ldw	r2,-12(fp)
   12304:	10c00104 	addi	r3,r2,4
   12308:	e0fffd15 	stw	r3,-12(fp)
   1230c:	e0fff017 	ldw	r3,-64(fp)
   12310:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   12314:	00800044 	movi	r2,1
   12318:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   1231c:	e0bffe17 	ldw	r2,-8(fp)
   12320:	10c00104 	addi	r3,r2,4
   12324:	e0fffe15 	stw	r3,-8(fp)
   12328:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   1232c:	e0bff18b 	ldhu	r2,-58(fp)
   12330:	10800044 	addi	r2,r2,1
   12334:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   12338:	00005806 	br	1249c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   1233c:	e0bff203 	ldbu	r2,-56(fp)
   12340:	10800054 	ori	r2,r2,1
   12344:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   12348:	00005406 	br	1249c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1234c:	e0bff017 	ldw	r2,-64(fp)
   12350:	10800117 	ldw	r2,4(r2)
   12354:	10001326 	beq	r2,zero,123a4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   12358:	e0bffe17 	ldw	r2,-8(fp)
   1235c:	10c00104 	addi	r3,r2,4
   12360:	e0fffe15 	stw	r3,-8(fp)
   12364:	e0fff017 	ldw	r3,-64(fp)
   12368:	18c00117 	ldw	r3,4(r3)
   1236c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   12370:	e0bff017 	ldw	r2,-64(fp)
   12374:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   12378:	e0bffd17 	ldw	r2,-12(fp)
   1237c:	10c00104 	addi	r3,r2,4
   12380:	e0fffd15 	stw	r3,-12(fp)
   12384:	e0fff017 	ldw	r3,-64(fp)
   12388:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   1238c:	00800044 	movi	r2,1
   12390:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   12394:	e0bff18b 	ldhu	r2,-58(fp)
   12398:	10800044 	addi	r2,r2,1
   1239c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   123a0:	00003e06 	br	1249c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   123a4:	e0bff203 	ldbu	r2,-56(fp)
   123a8:	10800094 	ori	r2,r2,2
   123ac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   123b0:	00003a06 	br	1249c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   123b4:	e0bff017 	ldw	r2,-64(fp)
   123b8:	10800117 	ldw	r2,4(r2)
   123bc:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   123c0:	e0bff417 	ldw	r2,-48(fp)
   123c4:	1080058b 	ldhu	r2,22(r2)
   123c8:	10bfffcc 	andi	r2,r2,65535
   123cc:	10002426 	beq	r2,zero,12460 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   123d0:	e0bffe17 	ldw	r2,-8(fp)
   123d4:	10c00104 	addi	r3,r2,4
   123d8:	e0fffe15 	stw	r3,-8(fp)
   123dc:	e0fff417 	ldw	r3,-48(fp)
   123e0:	18c00417 	ldw	r3,16(r3)
   123e4:	19400104 	addi	r5,r3,4
   123e8:	e13ff417 	ldw	r4,-48(fp)
   123ec:	21400415 	stw	r5,16(r4)
   123f0:	18c00017 	ldw	r3,0(r3)
   123f4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   123f8:	e0bff417 	ldw	r2,-48(fp)
   123fc:	10c00417 	ldw	r3,16(r2)
   12400:	e0bff417 	ldw	r2,-48(fp)
   12404:	10800217 	ldw	r2,8(r2)
   12408:	1880041e 	bne	r3,r2,1241c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   1240c:	e0bff417 	ldw	r2,-48(fp)
   12410:	10c00117 	ldw	r3,4(r2)
   12414:	e0bff417 	ldw	r2,-48(fp)
   12418:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   1241c:	e0bff417 	ldw	r2,-48(fp)
   12420:	1080058b 	ldhu	r2,22(r2)
   12424:	10bfffc4 	addi	r2,r2,-1
   12428:	1007883a 	mov	r3,r2
   1242c:	e0bff417 	ldw	r2,-48(fp)
   12430:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   12434:	e0bffd17 	ldw	r2,-12(fp)
   12438:	10c00104 	addi	r3,r2,4
   1243c:	e0fffd15 	stw	r3,-12(fp)
   12440:	e0fff017 	ldw	r3,-64(fp)
   12444:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   12448:	00800044 	movi	r2,1
   1244c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   12450:	e0bff18b 	ldhu	r2,-58(fp)
   12454:	10800044 	addi	r2,r2,1
   12458:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1245c:	00000f06 	br	1249c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   12460:	e0bff203 	ldbu	r2,-56(fp)
   12464:	10800114 	ori	r2,r2,4
   12468:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1246c:	00000b06 	br	1249c <OSEventPendMulti+0x388>
   12470:	e0bff317 	ldw	r2,-52(fp)
   12474:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12478:	e0bff617 	ldw	r2,-40(fp)
   1247c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   12480:	e0bffd17 	ldw	r2,-12(fp)
   12484:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   12488:	e0800217 	ldw	r2,8(fp)
   1248c:	00c00044 	movi	r3,1
   12490:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   12494:	e0bff18b 	ldhu	r2,-58(fp)
   12498:	00009d06 	br	12710 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   1249c:	e0bfef17 	ldw	r2,-68(fp)
   124a0:	10800104 	addi	r2,r2,4
   124a4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   124a8:	e0bfef17 	ldw	r2,-68(fp)
   124ac:	10800017 	ldw	r2,0(r2)
   124b0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   124b4:	e0bff017 	ldw	r2,-64(fp)
   124b8:	103f7d1e 	bne	r2,zero,122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   124bc:	e0bff103 	ldbu	r2,-60(fp)
   124c0:	10800058 	cmpnei	r2,r2,1
   124c4:	10000a1e 	bne	r2,zero,124f0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   124c8:	e0bffd17 	ldw	r2,-12(fp)
   124cc:	10000015 	stw	zero,0(r2)
   124d0:	e0bff317 	ldw	r2,-52(fp)
   124d4:	e0bff715 	stw	r2,-36(fp)
   124d8:	e0bff717 	ldw	r2,-36(fp)
   124dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   124e0:	e0800217 	ldw	r2,8(fp)
   124e4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   124e8:	e0bff18b 	ldhu	r2,-58(fp)
   124ec:	00008806 	br	12710 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   124f0:	d0a8f517 	ldw	r2,-23596(gp)
   124f4:	d0e8f517 	ldw	r3,-23596(gp)
   124f8:	19000c03 	ldbu	r4,48(r3)
   124fc:	e0fff203 	ldbu	r3,-56(fp)
   12500:	20c6b03a 	or	r3,r4,r3
   12504:	1809883a 	mov	r4,r3
   12508:	00ffe004 	movi	r3,-128
   1250c:	20c6b03a 	or	r3,r4,r3
   12510:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12514:	d0a8f517 	ldw	r2,-23596(gp)
   12518:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   1251c:	d0a8f517 	ldw	r2,-23596(gp)
   12520:	e0ffff0b 	ldhu	r3,-4(fp)
   12524:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   12528:	e13ffc17 	ldw	r4,-16(fp)
   1252c:	001305c0 	call	1305c <OS_EventTaskWaitMulti>
   12530:	e0bff317 	ldw	r2,-52(fp)
   12534:	e0bff815 	stw	r2,-32(fp)
   12538:	e0bff817 	ldw	r2,-32(fp)
   1253c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   12540:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12544:	0005303a 	rdctl	r2,status
   12548:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1254c:	e0fff917 	ldw	r3,-28(fp)
   12550:	00bfff84 	movi	r2,-2
   12554:	1884703a 	and	r2,r3,r2
   12558:	1001703a 	wrctl	status,r2
  
  return context;
   1255c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12560:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   12564:	d0a8f517 	ldw	r2,-23596(gp)
   12568:	10800c43 	ldbu	r2,49(r2)
   1256c:	10803fcc 	andi	r2,r2,255
   12570:	10000226 	beq	r2,zero,1257c <OSEventPendMulti+0x468>
   12574:	108000a0 	cmpeqi	r2,r2,2
   12578:	10001826 	beq	r2,zero,125dc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   1257c:	d0a8f517 	ldw	r2,-23596(gp)
   12580:	10800717 	ldw	r2,28(r2)
   12584:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   12588:	e0bff017 	ldw	r2,-64(fp)
   1258c:	10000b26 	beq	r2,zero,125bc <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   12590:	e0bffd17 	ldw	r2,-12(fp)
   12594:	10c00104 	addi	r3,r2,4
   12598:	e0fffd15 	stw	r3,-12(fp)
   1259c:	e0fff017 	ldw	r3,-64(fp)
   125a0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   125a4:	e0bffd17 	ldw	r2,-12(fp)
   125a8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   125ac:	e0bff18b 	ldhu	r2,-58(fp)
   125b0:	10800044 	addi	r2,r2,1
   125b4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   125b8:	00000d06 	br	125f0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   125bc:	d0a8f517 	ldw	r2,-23596(gp)
   125c0:	00c00044 	movi	r3,1
   125c4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   125c8:	d0a8f517 	ldw	r2,-23596(gp)
   125cc:	1009883a 	mov	r4,r2
   125d0:	e17ffc17 	ldw	r5,-16(fp)
   125d4:	001325c0 	call	1325c <OS_EventTaskRemoveMulti>
             }
			 break;
   125d8:	00000506 	br	125f0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   125dc:	d0a8f517 	ldw	r2,-23596(gp)
   125e0:	1009883a 	mov	r4,r2
   125e4:	e17ffc17 	ldw	r5,-16(fp)
   125e8:	001325c0 	call	1325c <OS_EventTaskRemoveMulti>
             break;
   125ec:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   125f0:	d0a8f517 	ldw	r2,-23596(gp)
   125f4:	10800c43 	ldbu	r2,49(r2)
   125f8:	10803fcc 	andi	r2,r2,255
   125fc:	10000326 	beq	r2,zero,1260c <OSEventPendMulti+0x4f8>
   12600:	108000a0 	cmpeqi	r2,r2,2
   12604:	1000231e 	bne	r2,zero,12694 <OSEventPendMulti+0x580>
   12608:	00002a06 	br	126b4 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   1260c:	e0bff017 	ldw	r2,-64(fp)
   12610:	10800003 	ldbu	r2,0(r2)
   12614:	10803fcc 	andi	r2,r2,255
   12618:	0080100e 	bge	zero,r2,1265c <OSEventPendMulti+0x548>
   1261c:	10c000d0 	cmplti	r3,r2,3
   12620:	1800071e 	bne	r3,zero,12640 <OSEventPendMulti+0x52c>
   12624:	108000e0 	cmpeqi	r2,r2,3
   12628:	10000c26 	beq	r2,zero,1265c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   1262c:	e0bffe17 	ldw	r2,-8(fp)
   12630:	10c00104 	addi	r3,r2,4
   12634:	e0fffe15 	stw	r3,-8(fp)
   12638:	10000015 	stw	zero,0(r2)
                      break;
   1263c:	00001206 	br	12688 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   12640:	e0bffe17 	ldw	r2,-8(fp)
   12644:	10c00104 	addi	r3,r2,4
   12648:	e0fffe15 	stw	r3,-8(fp)
   1264c:	d0e8f517 	ldw	r3,-23596(gp)
   12650:	18c00917 	ldw	r3,36(r3)
   12654:	10c00015 	stw	r3,0(r2)
                      break;
   12658:	00000b06 	br	12688 <OSEventPendMulti+0x574>
   1265c:	e0bff317 	ldw	r2,-52(fp)
   12660:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12664:	e0bffa17 	ldw	r2,-24(fp)
   12668:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   1266c:	e0bffd17 	ldw	r2,-12(fp)
   12670:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   12674:	e0800217 	ldw	r2,8(fp)
   12678:	00c00044 	movi	r3,1
   1267c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   12680:	e0bff18b 	ldhu	r2,-58(fp)
   12684:	00002206 	br	12710 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   12688:	e0800217 	ldw	r2,8(fp)
   1268c:	10000005 	stb	zero,0(r2)
             break;
   12690:	00001006 	br	126d4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   12694:	e0bffe17 	ldw	r2,-8(fp)
   12698:	10c00104 	addi	r3,r2,4
   1269c:	e0fffe15 	stw	r3,-8(fp)
   126a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   126a4:	e0800217 	ldw	r2,8(fp)
   126a8:	00c00384 	movi	r3,14
   126ac:	10c00005 	stb	r3,0(r2)
             break;
   126b0:	00000806 	br	126d4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	10c00104 	addi	r3,r2,4
   126bc:	e0fffe15 	stw	r3,-8(fp)
   126c0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   126c4:	e0800217 	ldw	r2,8(fp)
   126c8:	00c00284 	movi	r3,10
   126cc:	10c00005 	stb	r3,0(r2)
             break;
   126d0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   126d4:	d0a8f517 	ldw	r2,-23596(gp)
   126d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   126dc:	d0a8f517 	ldw	r2,-23596(gp)
   126e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   126e4:	d0a8f517 	ldw	r2,-23596(gp)
   126e8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   126ec:	d0a8f517 	ldw	r2,-23596(gp)
   126f0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   126f4:	d0a8f517 	ldw	r2,-23596(gp)
   126f8:	10000915 	stw	zero,36(r2)
   126fc:	e0bff317 	ldw	r2,-52(fp)
   12700:	e0bffb15 	stw	r2,-20(fp)
   12704:	e0bffb17 	ldw	r2,-20(fp)
   12708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   1270c:	e0bff18b 	ldhu	r2,-58(fp)
}
   12710:	e037883a 	mov	sp,fp
   12714:	dfc00117 	ldw	ra,4(sp)
   12718:	df000017 	ldw	fp,0(sp)
   1271c:	dec00204 	addi	sp,sp,8
   12720:	f800283a 	ret

00012724 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   12724:	defffe04 	addi	sp,sp,-8
   12728:	dfc00115 	stw	ra,4(sp)
   1272c:	df000015 	stw	fp,0(sp)
   12730:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   12734:	001e2400 	call	1e240 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   12738:	00134980 	call	13498 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   1273c:	00134dc0 	call	134dc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   12740:	001363c0 	call	1363c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   12744:	00133bc0 	call	133bc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   12748:	00155bc0 	call	155bc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   1274c:	0016a8c0 	call	16a8c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   12750:	0017cc00 	call	17cc0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   12754:	00135440 	call	13544 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   12758:	00135c00 	call	135c0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   1275c:	001e25c0 	call	1e25c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   12760:	0013ea80 	call	13ea8 <OSDebugInit>
#endif
}
   12764:	e037883a 	mov	sp,fp
   12768:	dfc00117 	ldw	ra,4(sp)
   1276c:	df000017 	ldw	fp,0(sp)
   12770:	dec00204 	addi	sp,sp,8
   12774:	f800283a 	ret

00012778 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   12778:	defffc04 	addi	sp,sp,-16
   1277c:	df000315 	stw	fp,12(sp)
   12780:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12784:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   12788:	d0a8e643 	ldbu	r2,-23655(gp)
   1278c:	10803fcc 	andi	r2,r2,255
   12790:	10800058 	cmpnei	r2,r2,1
   12794:	1000131e 	bne	r2,zero,127e4 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12798:	0005303a 	rdctl	r2,status
   1279c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127a0:	e0fffe17 	ldw	r3,-8(fp)
   127a4:	00bfff84 	movi	r2,-2
   127a8:	1884703a 	and	r2,r3,r2
   127ac:	1001703a 	wrctl	status,r2
  
  return context;
   127b0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   127b4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   127b8:	d0a8f403 	ldbu	r2,-23600(gp)
   127bc:	10803fcc 	andi	r2,r2,255
   127c0:	10803fe0 	cmpeqi	r2,r2,255
   127c4:	1000031e 	bne	r2,zero,127d4 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   127c8:	d0a8f403 	ldbu	r2,-23600(gp)
   127cc:	10800044 	addi	r2,r2,1
   127d0:	d0a8f405 	stb	r2,-23600(gp)
   127d4:	e0bffd17 	ldw	r2,-12(fp)
   127d8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127dc:	e0bfff17 	ldw	r2,-4(fp)
   127e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   127e4:	e037883a 	mov	sp,fp
   127e8:	df000017 	ldw	fp,0(sp)
   127ec:	dec00104 	addi	sp,sp,4
   127f0:	f800283a 	ret

000127f4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   127f4:	defffb04 	addi	sp,sp,-20
   127f8:	dfc00415 	stw	ra,16(sp)
   127fc:	df000315 	stw	fp,12(sp)
   12800:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12804:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   12808:	d0a8e643 	ldbu	r2,-23655(gp)
   1280c:	10803fcc 	andi	r2,r2,255
   12810:	10800058 	cmpnei	r2,r2,1
   12814:	10002f1e 	bne	r2,zero,128d4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12818:	0005303a 	rdctl	r2,status
   1281c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12820:	e0fffe17 	ldw	r3,-8(fp)
   12824:	00bfff84 	movi	r2,-2
   12828:	1884703a 	and	r2,r3,r2
   1282c:	1001703a 	wrctl	status,r2
  
  return context;
   12830:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   12834:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   12838:	d0a8f403 	ldbu	r2,-23600(gp)
   1283c:	10803fcc 	andi	r2,r2,255
   12840:	10000326 	beq	r2,zero,12850 <OSIntExit+0x5c>
            OSIntNesting--;
   12844:	d0a8f403 	ldbu	r2,-23600(gp)
   12848:	10bfffc4 	addi	r2,r2,-1
   1284c:	d0a8f405 	stb	r2,-23600(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   12850:	d0a8f403 	ldbu	r2,-23600(gp)
   12854:	10803fcc 	andi	r2,r2,255
   12858:	10001a1e 	bne	r2,zero,128c4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1285c:	d0a8e603 	ldbu	r2,-23656(gp)
   12860:	10803fcc 	andi	r2,r2,255
   12864:	1000171e 	bne	r2,zero,128c4 <OSIntExit+0xd0>
                OS_SchedNew();
   12868:	001389c0 	call	1389c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1286c:	d0e8e803 	ldbu	r3,-23648(gp)
   12870:	d0a8e843 	ldbu	r2,-23647(gp)
   12874:	18c03fcc 	andi	r3,r3,255
   12878:	10803fcc 	andi	r2,r2,255
   1287c:	18801126 	beq	r3,r2,128c4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   12880:	d0a8e803 	ldbu	r2,-23648(gp)
   12884:	10c03fcc 	andi	r3,r2,255
   12888:	008000f4 	movhi	r2,3
   1288c:	10833804 	addi	r2,r2,3296
   12890:	18c7883a 	add	r3,r3,r3
   12894:	18c7883a 	add	r3,r3,r3
   12898:	10c5883a 	add	r2,r2,r3
   1289c:	10800017 	ldw	r2,0(r2)
   128a0:	d0a8f015 	stw	r2,-23616(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   128a4:	d0a8f017 	ldw	r2,-23616(gp)
   128a8:	10c00e17 	ldw	r3,56(r2)
   128ac:	18c00044 	addi	r3,r3,1
   128b0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   128b4:	d0a8eb17 	ldw	r2,-23636(gp)
   128b8:	10800044 	addi	r2,r2,1
   128bc:	d0a8eb15 	stw	r2,-23636(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   128c0:	001df800 	call	1df80 <OSCtxSw>
   128c4:	e0bffd17 	ldw	r2,-12(fp)
   128c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128cc:	e0bfff17 	ldw	r2,-4(fp)
   128d0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   128d4:	e037883a 	mov	sp,fp
   128d8:	dfc00117 	ldw	ra,4(sp)
   128dc:	df000017 	ldw	fp,0(sp)
   128e0:	dec00204 	addi	sp,sp,8
   128e4:	f800283a 	ret

000128e8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   128e8:	defffc04 	addi	sp,sp,-16
   128ec:	df000315 	stw	fp,12(sp)
   128f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   128f4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   128f8:	d0a8e643 	ldbu	r2,-23655(gp)
   128fc:	10803fcc 	andi	r2,r2,255
   12900:	10800058 	cmpnei	r2,r2,1
   12904:	1000161e 	bne	r2,zero,12960 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12908:	0005303a 	rdctl	r2,status
   1290c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12910:	e0fffe17 	ldw	r3,-8(fp)
   12914:	00bfff84 	movi	r2,-2
   12918:	1884703a 	and	r2,r3,r2
   1291c:	1001703a 	wrctl	status,r2
  
  return context;
   12920:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   12924:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   12928:	d0a8f403 	ldbu	r2,-23600(gp)
   1292c:	10803fcc 	andi	r2,r2,255
   12930:	1000071e 	bne	r2,zero,12950 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   12934:	d0a8e603 	ldbu	r2,-23656(gp)
   12938:	10803fcc 	andi	r2,r2,255
   1293c:	10803fe0 	cmpeqi	r2,r2,255
   12940:	1000031e 	bne	r2,zero,12950 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   12944:	d0a8e603 	ldbu	r2,-23656(gp)
   12948:	10800044 	addi	r2,r2,1
   1294c:	d0a8e605 	stb	r2,-23656(gp)
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12958:	e0bfff17 	ldw	r2,-4(fp)
   1295c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   12960:	e037883a 	mov	sp,fp
   12964:	df000017 	ldw	fp,0(sp)
   12968:	dec00104 	addi	sp,sp,4
   1296c:	f800283a 	ret

00012970 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   12970:	defff804 	addi	sp,sp,-32
   12974:	dfc00715 	stw	ra,28(sp)
   12978:	df000615 	stw	fp,24(sp)
   1297c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12980:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   12984:	d0a8e643 	ldbu	r2,-23655(gp)
   12988:	10803fcc 	andi	r2,r2,255
   1298c:	10800058 	cmpnei	r2,r2,1
   12990:	1000281e 	bne	r2,zero,12a34 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12994:	0005303a 	rdctl	r2,status
   12998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1299c:	e0fffb17 	ldw	r3,-20(fp)
   129a0:	00bfff84 	movi	r2,-2
   129a4:	1884703a 	and	r2,r3,r2
   129a8:	1001703a 	wrctl	status,r2
  
  return context;
   129ac:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   129b0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   129b4:	d0a8e603 	ldbu	r2,-23656(gp)
   129b8:	10803fcc 	andi	r2,r2,255
   129bc:	10001926 	beq	r2,zero,12a24 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   129c0:	d0a8e603 	ldbu	r2,-23656(gp)
   129c4:	10bfffc4 	addi	r2,r2,-1
   129c8:	d0a8e605 	stb	r2,-23656(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   129cc:	d0a8e603 	ldbu	r2,-23656(gp)
   129d0:	10803fcc 	andi	r2,r2,255
   129d4:	10000e1e 	bne	r2,zero,12a10 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   129d8:	d0a8f403 	ldbu	r2,-23600(gp)
   129dc:	10803fcc 	andi	r2,r2,255
   129e0:	1000061e 	bne	r2,zero,129fc <OSSchedUnlock+0x8c>
   129e4:	e0bffa17 	ldw	r2,-24(fp)
   129e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129ec:	e0bffc17 	ldw	r2,-16(fp)
   129f0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   129f4:	00137d00 	call	137d0 <OS_Sched>
   129f8:	00000e06 	br	12a34 <OSSchedUnlock+0xc4>
   129fc:	e0bffa17 	ldw	r2,-24(fp)
   12a00:	e0bffd15 	stw	r2,-12(fp)
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	1001703a 	wrctl	status,r2
   12a0c:	00000906 	br	12a34 <OSSchedUnlock+0xc4>
   12a10:	e0bffa17 	ldw	r2,-24(fp)
   12a14:	e0bffe15 	stw	r2,-8(fp)
   12a18:	e0bffe17 	ldw	r2,-8(fp)
   12a1c:	1001703a 	wrctl	status,r2
   12a20:	00000406 	br	12a34 <OSSchedUnlock+0xc4>
   12a24:	e0bffa17 	ldw	r2,-24(fp)
   12a28:	e0bfff15 	stw	r2,-4(fp)
   12a2c:	e0bfff17 	ldw	r2,-4(fp)
   12a30:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   12a34:	e037883a 	mov	sp,fp
   12a38:	dfc00117 	ldw	ra,4(sp)
   12a3c:	df000017 	ldw	fp,0(sp)
   12a40:	dec00204 	addi	sp,sp,8
   12a44:	f800283a 	ret

00012a48 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   12a48:	defffe04 	addi	sp,sp,-8
   12a4c:	dfc00115 	stw	ra,4(sp)
   12a50:	df000015 	stw	fp,0(sp)
   12a54:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   12a58:	d0a8e643 	ldbu	r2,-23655(gp)
   12a5c:	10803fcc 	andi	r2,r2,255
   12a60:	10000f1e 	bne	r2,zero,12aa0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   12a64:	001389c0 	call	1389c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   12a68:	d0a8e803 	ldbu	r2,-23648(gp)
   12a6c:	d0a8e845 	stb	r2,-23647(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   12a70:	d0a8e803 	ldbu	r2,-23648(gp)
   12a74:	10c03fcc 	andi	r3,r2,255
   12a78:	008000f4 	movhi	r2,3
   12a7c:	10833804 	addi	r2,r2,3296
   12a80:	18c7883a 	add	r3,r3,r3
   12a84:	18c7883a 	add	r3,r3,r3
   12a88:	10c5883a 	add	r2,r2,r3
   12a8c:	10800017 	ldw	r2,0(r2)
   12a90:	d0a8f015 	stw	r2,-23616(gp)
        OSTCBCur      = OSTCBHighRdy;
   12a94:	d0a8f017 	ldw	r2,-23616(gp)
   12a98:	d0a8f515 	stw	r2,-23596(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   12a9c:	001e00c0 	call	1e00c <OSStartHighRdy>
    }
}
   12aa0:	e037883a 	mov	sp,fp
   12aa4:	dfc00117 	ldw	ra,4(sp)
   12aa8:	df000017 	ldw	fp,0(sp)
   12aac:	dec00204 	addi	sp,sp,8
   12ab0:	f800283a 	ret

00012ab4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   12ab4:	defff904 	addi	sp,sp,-28
   12ab8:	dfc00615 	stw	ra,24(sp)
   12abc:	df000515 	stw	fp,20(sp)
   12ac0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12ac4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   12ac8:	01000084 	movi	r4,2
   12acc:	001a1680 	call	1a168 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ad0:	0005303a 	rdctl	r2,status
   12ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ad8:	e0fffc17 	ldw	r3,-16(fp)
   12adc:	00bfff84 	movi	r2,-2
   12ae0:	1884703a 	and	r2,r3,r2
   12ae4:	1001703a 	wrctl	status,r2
  
  return context;
   12ae8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   12aec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   12af0:	d028e715 	stw	zero,-23652(gp)
   12af4:	e0bffb17 	ldw	r2,-20(fp)
   12af8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12afc:	e0bffd17 	ldw	r2,-12(fp)
   12b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   12b04:	0009883a 	mov	r4,zero
   12b08:	001a1680 	call	1a168 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b0c:	0005303a 	rdctl	r2,status
   12b10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b14:	e0fffe17 	ldw	r3,-8(fp)
   12b18:	00bfff84 	movi	r2,-2
   12b1c:	1884703a 	and	r2,r3,r2
   12b20:	1001703a 	wrctl	status,r2
  
  return context;
   12b24:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   12b28:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   12b2c:	d0a8e717 	ldw	r2,-23652(gp)
   12b30:	d0a8ec15 	stw	r2,-23632(gp)
    OSStatRdy    = OS_TRUE;
   12b34:	00800044 	movi	r2,1
   12b38:	d0a8f805 	stb	r2,-23584(gp)
   12b3c:	e0bffb17 	ldw	r2,-20(fp)
   12b40:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b44:	e0bfff17 	ldw	r2,-4(fp)
   12b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   12b4c:	e037883a 	mov	sp,fp
   12b50:	dfc00117 	ldw	ra,4(sp)
   12b54:	df000017 	ldw	fp,0(sp)
   12b58:	dec00204 	addi	sp,sp,8
   12b5c:	f800283a 	ret

00012b60 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   12b60:	defff704 	addi	sp,sp,-36
   12b64:	dfc00815 	stw	ra,32(sp)
   12b68:	df000715 	stw	fp,28(sp)
   12b6c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12b70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   12b74:	001e2240 	call	1e224 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b78:	0005303a 	rdctl	r2,status
   12b7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b80:	e0fffc17 	ldw	r3,-16(fp)
   12b84:	00bfff84 	movi	r2,-2
   12b88:	1884703a 	and	r2,r3,r2
   12b8c:	1001703a 	wrctl	status,r2
  
  return context;
   12b90:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   12b94:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   12b98:	d0a8f617 	ldw	r2,-23592(gp)
   12b9c:	10800044 	addi	r2,r2,1
   12ba0:	d0a8f615 	stw	r2,-23592(gp)
   12ba4:	e0bffb17 	ldw	r2,-20(fp)
   12ba8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bac:	e0bffd17 	ldw	r2,-12(fp)
   12bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   12bb4:	d0a8e643 	ldbu	r2,-23655(gp)
   12bb8:	10803fcc 	andi	r2,r2,255
   12bbc:	10800058 	cmpnei	r2,r2,1
   12bc0:	1000691e 	bne	r2,zero,12d68 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   12bc4:	d0a8ea03 	ldbu	r2,-23640(gp)
   12bc8:	10803fcc 	andi	r2,r2,255
   12bcc:	10c00060 	cmpeqi	r3,r2,1
   12bd0:	1800061e 	bne	r3,zero,12bec <OSTimeTick+0x8c>
   12bd4:	10c000a0 	cmpeqi	r3,r2,2
   12bd8:	1800061e 	bne	r3,zero,12bf4 <OSTimeTick+0x94>
   12bdc:	10000a1e 	bne	r2,zero,12c08 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   12be0:	00800044 	movi	r2,1
   12be4:	e0bffa05 	stb	r2,-24(fp)
                 break;
   12be8:	00000b06 	br	12c18 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   12bec:	e03ffa05 	stb	zero,-24(fp)
                 break;
   12bf0:	00000906 	br	12c18 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   12bf4:	00800044 	movi	r2,1
   12bf8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   12bfc:	00800044 	movi	r2,1
   12c00:	d0a8ea05 	stb	r2,-23640(gp)
                 break;
   12c04:	00000406 	br	12c18 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   12c08:	00800044 	movi	r2,1
   12c0c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   12c10:	d028ea05 	stb	zero,-23640(gp)
                 break;
   12c14:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   12c18:	e0bffa03 	ldbu	r2,-24(fp)
   12c1c:	1000011e 	bne	r2,zero,12c24 <OSTimeTick+0xc4>
            return;
   12c20:	00005106 	br	12d68 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   12c24:	d0a8e917 	ldw	r2,-23644(gp)
   12c28:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   12c2c:	00004906 	br	12d54 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c30:	0005303a 	rdctl	r2,status
   12c34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c38:	e0fffe17 	ldw	r3,-8(fp)
   12c3c:	00bfff84 	movi	r2,-2
   12c40:	1884703a 	and	r2,r3,r2
   12c44:	1001703a 	wrctl	status,r2
  
  return context;
   12c48:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   12c4c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   12c50:	e0bff917 	ldw	r2,-28(fp)
   12c54:	10800b8b 	ldhu	r2,46(r2)
   12c58:	10bfffcc 	andi	r2,r2,65535
   12c5c:	10003626 	beq	r2,zero,12d38 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   12c60:	e0bff917 	ldw	r2,-28(fp)
   12c64:	10800b8b 	ldhu	r2,46(r2)
   12c68:	10bfffc4 	addi	r2,r2,-1
   12c6c:	1007883a 	mov	r3,r2
   12c70:	e0bff917 	ldw	r2,-28(fp)
   12c74:	10c00b8d 	sth	r3,46(r2)
   12c78:	e0bff917 	ldw	r2,-28(fp)
   12c7c:	10800b8b 	ldhu	r2,46(r2)
   12c80:	10bfffcc 	andi	r2,r2,65535
   12c84:	10002c1e 	bne	r2,zero,12d38 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   12c88:	e0bff917 	ldw	r2,-28(fp)
   12c8c:	10800c03 	ldbu	r2,48(r2)
   12c90:	10803fcc 	andi	r2,r2,255
   12c94:	10800dcc 	andi	r2,r2,55
   12c98:	10000b26 	beq	r2,zero,12cc8 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   12c9c:	e0bff917 	ldw	r2,-28(fp)
   12ca0:	10c00c03 	ldbu	r3,48(r2)
   12ca4:	00bff204 	movi	r2,-56
   12ca8:	1884703a 	and	r2,r3,r2
   12cac:	1007883a 	mov	r3,r2
   12cb0:	e0bff917 	ldw	r2,-28(fp)
   12cb4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   12cb8:	e0bff917 	ldw	r2,-28(fp)
   12cbc:	00c00044 	movi	r3,1
   12cc0:	10c00c45 	stb	r3,49(r2)
   12cc4:	00000206 	br	12cd0 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   12cc8:	e0bff917 	ldw	r2,-28(fp)
   12ccc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   12cd0:	e0bff917 	ldw	r2,-28(fp)
   12cd4:	10800c03 	ldbu	r2,48(r2)
   12cd8:	10803fcc 	andi	r2,r2,255
   12cdc:	1080020c 	andi	r2,r2,8
   12ce0:	1000151e 	bne	r2,zero,12d38 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   12ce4:	e0bff917 	ldw	r2,-28(fp)
   12ce8:	10c00d83 	ldbu	r3,54(r2)
   12cec:	d0a8f203 	ldbu	r2,-23608(gp)
   12cf0:	1884b03a 	or	r2,r3,r2
   12cf4:	d0a8f205 	stb	r2,-23608(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12cf8:	e0bff917 	ldw	r2,-28(fp)
   12cfc:	10800d03 	ldbu	r2,52(r2)
   12d00:	10c03fcc 	andi	r3,r2,255
   12d04:	e0bff917 	ldw	r2,-28(fp)
   12d08:	10800d03 	ldbu	r2,52(r2)
   12d0c:	11003fcc 	andi	r4,r2,255
   12d10:	d0a8f244 	addi	r2,gp,-23607
   12d14:	2085883a 	add	r2,r4,r2
   12d18:	11000003 	ldbu	r4,0(r2)
   12d1c:	e0bff917 	ldw	r2,-28(fp)
   12d20:	10800d43 	ldbu	r2,53(r2)
   12d24:	2084b03a 	or	r2,r4,r2
   12d28:	1009883a 	mov	r4,r2
   12d2c:	d0a8f244 	addi	r2,gp,-23607
   12d30:	1885883a 	add	r2,r3,r2
   12d34:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   12d38:	e0bff917 	ldw	r2,-28(fp)
   12d3c:	10800517 	ldw	r2,20(r2)
   12d40:	e0bff915 	stw	r2,-28(fp)
   12d44:	e0bffb17 	ldw	r2,-20(fp)
   12d48:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d4c:	e0bfff17 	ldw	r2,-4(fp)
   12d50:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   12d54:	e0bff917 	ldw	r2,-28(fp)
   12d58:	10800c83 	ldbu	r2,50(r2)
   12d5c:	10803fcc 	andi	r2,r2,255
   12d60:	10800518 	cmpnei	r2,r2,20
   12d64:	103fb21e 	bne	r2,zero,12c30 <__alt_mem_Flash_flash_data+0xf4012c30>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   12d68:	e037883a 	mov	sp,fp
   12d6c:	dfc00117 	ldw	ra,4(sp)
   12d70:	df000017 	ldw	fp,0(sp)
   12d74:	dec00204 	addi	sp,sp,8
   12d78:	f800283a 	ret

00012d7c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   12d7c:	deffff04 	addi	sp,sp,-4
   12d80:	df000015 	stw	fp,0(sp)
   12d84:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   12d88:	00804784 	movi	r2,286
}
   12d8c:	e037883a 	mov	sp,fp
   12d90:	df000017 	ldw	fp,0(sp)
   12d94:	dec00104 	addi	sp,sp,4
   12d98:	f800283a 	ret

00012d9c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   12d9c:	deffff04 	addi	sp,sp,-4
   12da0:	df000015 	stw	fp,0(sp)
   12da4:	d839883a 	mov	fp,sp
}
   12da8:	e037883a 	mov	sp,fp
   12dac:	df000017 	ldw	fp,0(sp)
   12db0:	dec00104 	addi	sp,sp,4
   12db4:	f800283a 	ret

00012db8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   12db8:	defff804 	addi	sp,sp,-32
   12dbc:	dfc00715 	stw	ra,28(sp)
   12dc0:	df000615 	stw	fp,24(sp)
   12dc4:	df000604 	addi	fp,sp,24
   12dc8:	e13ffc15 	stw	r4,-16(fp)
   12dcc:	e17ffd15 	stw	r5,-12(fp)
   12dd0:	3007883a 	mov	r3,r6
   12dd4:	3805883a 	mov	r2,r7
   12dd8:	e0fffe05 	stb	r3,-8(fp)
   12ddc:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   12de0:	e0bffc17 	ldw	r2,-16(fp)
   12de4:	10800283 	ldbu	r2,10(r2)
   12de8:	10c03fcc 	andi	r3,r2,255
   12dec:	008000b4 	movhi	r2,2
   12df0:	10bbb104 	addi	r2,r2,-4412
   12df4:	10c5883a 	add	r2,r2,r3
   12df8:	10800003 	ldbu	r2,0(r2)
   12dfc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   12e00:	e0bffa03 	ldbu	r2,-24(fp)
   12e04:	e0fffc17 	ldw	r3,-16(fp)
   12e08:	1885883a 	add	r2,r3,r2
   12e0c:	10800204 	addi	r2,r2,8
   12e10:	108000c3 	ldbu	r2,3(r2)
   12e14:	10c03fcc 	andi	r3,r2,255
   12e18:	008000b4 	movhi	r2,2
   12e1c:	10bbb104 	addi	r2,r2,-4412
   12e20:	10c5883a 	add	r2,r2,r3
   12e24:	10800003 	ldbu	r2,0(r2)
   12e28:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   12e2c:	e0bffa03 	ldbu	r2,-24(fp)
   12e30:	100490fa 	slli	r2,r2,3
   12e34:	1007883a 	mov	r3,r2
   12e38:	e0bffa43 	ldbu	r2,-23(fp)
   12e3c:	1885883a 	add	r2,r3,r2
   12e40:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   12e44:	e0fffa83 	ldbu	r3,-22(fp)
   12e48:	008000f4 	movhi	r2,3
   12e4c:	10833804 	addi	r2,r2,3296
   12e50:	18c7883a 	add	r3,r3,r3
   12e54:	18c7883a 	add	r3,r3,r3
   12e58:	10c5883a 	add	r2,r2,r3
   12e5c:	10800017 	ldw	r2,0(r2)
   12e60:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   12e64:	e0bffb17 	ldw	r2,-20(fp)
   12e68:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   12e6c:	e0bffb17 	ldw	r2,-20(fp)
   12e70:	e0fffd17 	ldw	r3,-12(fp)
   12e74:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   12e78:	e0bffb17 	ldw	r2,-20(fp)
   12e7c:	10800c03 	ldbu	r2,48(r2)
   12e80:	1007883a 	mov	r3,r2
   12e84:	e0bffe03 	ldbu	r2,-8(fp)
   12e88:	0084303a 	nor	r2,zero,r2
   12e8c:	1884703a 	and	r2,r3,r2
   12e90:	1007883a 	mov	r3,r2
   12e94:	e0bffb17 	ldw	r2,-20(fp)
   12e98:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   12e9c:	e0bffb17 	ldw	r2,-20(fp)
   12ea0:	e0ffff03 	ldbu	r3,-4(fp)
   12ea4:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   12ea8:	e0bffb17 	ldw	r2,-20(fp)
   12eac:	10800c03 	ldbu	r2,48(r2)
   12eb0:	10803fcc 	andi	r2,r2,255
   12eb4:	1080020c 	andi	r2,r2,8
   12eb8:	1000111e 	bne	r2,zero,12f00 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   12ebc:	e0bffb17 	ldw	r2,-20(fp)
   12ec0:	10c00d83 	ldbu	r3,54(r2)
   12ec4:	d0a8f203 	ldbu	r2,-23608(gp)
   12ec8:	1884b03a 	or	r2,r3,r2
   12ecc:	d0a8f205 	stb	r2,-23608(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   12ed0:	e0fffa03 	ldbu	r3,-24(fp)
   12ed4:	e13ffa03 	ldbu	r4,-24(fp)
   12ed8:	d0a8f244 	addi	r2,gp,-23607
   12edc:	2085883a 	add	r2,r4,r2
   12ee0:	11000003 	ldbu	r4,0(r2)
   12ee4:	e0bffb17 	ldw	r2,-20(fp)
   12ee8:	10800d43 	ldbu	r2,53(r2)
   12eec:	2084b03a 	or	r2,r4,r2
   12ef0:	1009883a 	mov	r4,r2
   12ef4:	d0a8f244 	addi	r2,gp,-23607
   12ef8:	1885883a 	add	r2,r3,r2
   12efc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   12f00:	e13ffb17 	ldw	r4,-20(fp)
   12f04:	e17ffc17 	ldw	r5,-16(fp)
   12f08:	00131a80 	call	131a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   12f0c:	e0bffb17 	ldw	r2,-20(fp)
   12f10:	10800817 	ldw	r2,32(r2)
   12f14:	10000826 	beq	r2,zero,12f38 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   12f18:	e0bffb17 	ldw	r2,-20(fp)
   12f1c:	10800817 	ldw	r2,32(r2)
   12f20:	e13ffb17 	ldw	r4,-20(fp)
   12f24:	100b883a 	mov	r5,r2
   12f28:	001325c0 	call	1325c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   12f2c:	e0bffb17 	ldw	r2,-20(fp)
   12f30:	e0fffc17 	ldw	r3,-16(fp)
   12f34:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   12f38:	e0bffa83 	ldbu	r2,-22(fp)
}
   12f3c:	e037883a 	mov	sp,fp
   12f40:	dfc00117 	ldw	ra,4(sp)
   12f44:	df000017 	ldw	fp,0(sp)
   12f48:	dec00204 	addi	sp,sp,8
   12f4c:	f800283a 	ret

00012f50 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   12f50:	defffd04 	addi	sp,sp,-12
   12f54:	df000215 	stw	fp,8(sp)
   12f58:	df000204 	addi	fp,sp,8
   12f5c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   12f60:	d0a8f517 	ldw	r2,-23596(gp)
   12f64:	e0ffff17 	ldw	r3,-4(fp)
   12f68:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   12f6c:	d0a8f517 	ldw	r2,-23596(gp)
   12f70:	10800d03 	ldbu	r2,52(r2)
   12f74:	10803fcc 	andi	r2,r2,255
   12f78:	d0e8f517 	ldw	r3,-23596(gp)
   12f7c:	18c00d03 	ldbu	r3,52(r3)
   12f80:	18c03fcc 	andi	r3,r3,255
   12f84:	e13fff17 	ldw	r4,-4(fp)
   12f88:	20c7883a 	add	r3,r4,r3
   12f8c:	18c00204 	addi	r3,r3,8
   12f90:	190000c3 	ldbu	r4,3(r3)
   12f94:	d0e8f517 	ldw	r3,-23596(gp)
   12f98:	18c00d43 	ldbu	r3,53(r3)
   12f9c:	20c6b03a 	or	r3,r4,r3
   12fa0:	1809883a 	mov	r4,r3
   12fa4:	e0ffff17 	ldw	r3,-4(fp)
   12fa8:	1885883a 	add	r2,r3,r2
   12fac:	10800204 	addi	r2,r2,8
   12fb0:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   12fb4:	e0bfff17 	ldw	r2,-4(fp)
   12fb8:	10c00283 	ldbu	r3,10(r2)
   12fbc:	d0a8f517 	ldw	r2,-23596(gp)
   12fc0:	10800d83 	ldbu	r2,54(r2)
   12fc4:	1884b03a 	or	r2,r3,r2
   12fc8:	1007883a 	mov	r3,r2
   12fcc:	e0bfff17 	ldw	r2,-4(fp)
   12fd0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   12fd4:	d0a8f517 	ldw	r2,-23596(gp)
   12fd8:	10800d03 	ldbu	r2,52(r2)
   12fdc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   12fe0:	e0fffe03 	ldbu	r3,-8(fp)
   12fe4:	e13ffe03 	ldbu	r4,-8(fp)
   12fe8:	d0a8f244 	addi	r2,gp,-23607
   12fec:	2085883a 	add	r2,r4,r2
   12ff0:	10800003 	ldbu	r2,0(r2)
   12ff4:	1009883a 	mov	r4,r2
   12ff8:	d0a8f517 	ldw	r2,-23596(gp)
   12ffc:	10800d43 	ldbu	r2,53(r2)
   13000:	0084303a 	nor	r2,zero,r2
   13004:	2084703a 	and	r2,r4,r2
   13008:	1009883a 	mov	r4,r2
   1300c:	d0a8f244 	addi	r2,gp,-23607
   13010:	1885883a 	add	r2,r3,r2
   13014:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   13018:	e0fffe03 	ldbu	r3,-8(fp)
   1301c:	d0a8f244 	addi	r2,gp,-23607
   13020:	1885883a 	add	r2,r3,r2
   13024:	10800003 	ldbu	r2,0(r2)
   13028:	10803fcc 	andi	r2,r2,255
   1302c:	1000071e 	bne	r2,zero,1304c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   13030:	d0a8f517 	ldw	r2,-23596(gp)
   13034:	10800d83 	ldbu	r2,54(r2)
   13038:	0084303a 	nor	r2,zero,r2
   1303c:	1007883a 	mov	r3,r2
   13040:	d0a8f203 	ldbu	r2,-23608(gp)
   13044:	1884703a 	and	r2,r3,r2
   13048:	d0a8f205 	stb	r2,-23608(gp)
    }
}
   1304c:	e037883a 	mov	sp,fp
   13050:	df000017 	ldw	fp,0(sp)
   13054:	dec00104 	addi	sp,sp,4
   13058:	f800283a 	ret

0001305c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1305c:	defffb04 	addi	sp,sp,-20
   13060:	df000415 	stw	fp,16(sp)
   13064:	df000404 	addi	fp,sp,16
   13068:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1306c:	d0a8f517 	ldw	r2,-23596(gp)
   13070:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   13074:	d0a8f517 	ldw	r2,-23596(gp)
   13078:	e0ffff17 	ldw	r3,-4(fp)
   1307c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   13080:	e0bfff17 	ldw	r2,-4(fp)
   13084:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   13088:	e0bffc17 	ldw	r2,-16(fp)
   1308c:	10800017 	ldw	r2,0(r2)
   13090:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   13094:	00002006 	br	13118 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   13098:	d0a8f517 	ldw	r2,-23596(gp)
   1309c:	10800d03 	ldbu	r2,52(r2)
   130a0:	10803fcc 	andi	r2,r2,255
   130a4:	d0e8f517 	ldw	r3,-23596(gp)
   130a8:	18c00d03 	ldbu	r3,52(r3)
   130ac:	18c03fcc 	andi	r3,r3,255
   130b0:	e13ffd17 	ldw	r4,-12(fp)
   130b4:	20c7883a 	add	r3,r4,r3
   130b8:	18c00204 	addi	r3,r3,8
   130bc:	190000c3 	ldbu	r4,3(r3)
   130c0:	d0e8f517 	ldw	r3,-23596(gp)
   130c4:	18c00d43 	ldbu	r3,53(r3)
   130c8:	20c6b03a 	or	r3,r4,r3
   130cc:	1809883a 	mov	r4,r3
   130d0:	e0fffd17 	ldw	r3,-12(fp)
   130d4:	1885883a 	add	r2,r3,r2
   130d8:	10800204 	addi	r2,r2,8
   130dc:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   130e0:	e0bffd17 	ldw	r2,-12(fp)
   130e4:	10c00283 	ldbu	r3,10(r2)
   130e8:	d0a8f517 	ldw	r2,-23596(gp)
   130ec:	10800d83 	ldbu	r2,54(r2)
   130f0:	1884b03a 	or	r2,r3,r2
   130f4:	1007883a 	mov	r3,r2
   130f8:	e0bffd17 	ldw	r2,-12(fp)
   130fc:	10c00285 	stb	r3,10(r2)
        pevents++;
   13100:	e0bffc17 	ldw	r2,-16(fp)
   13104:	10800104 	addi	r2,r2,4
   13108:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1310c:	e0bffc17 	ldw	r2,-16(fp)
   13110:	10800017 	ldw	r2,0(r2)
   13114:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   13118:	e0bffd17 	ldw	r2,-12(fp)
   1311c:	103fde1e 	bne	r2,zero,13098 <__alt_mem_Flash_flash_data+0xf4013098>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   13120:	d0a8f517 	ldw	r2,-23596(gp)
   13124:	10800d03 	ldbu	r2,52(r2)
   13128:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1312c:	e0fffe03 	ldbu	r3,-8(fp)
   13130:	e13ffe03 	ldbu	r4,-8(fp)
   13134:	d0a8f244 	addi	r2,gp,-23607
   13138:	2085883a 	add	r2,r4,r2
   1313c:	10800003 	ldbu	r2,0(r2)
   13140:	1009883a 	mov	r4,r2
   13144:	d0a8f517 	ldw	r2,-23596(gp)
   13148:	10800d43 	ldbu	r2,53(r2)
   1314c:	0084303a 	nor	r2,zero,r2
   13150:	2084703a 	and	r2,r4,r2
   13154:	1009883a 	mov	r4,r2
   13158:	d0a8f244 	addi	r2,gp,-23607
   1315c:	1885883a 	add	r2,r3,r2
   13160:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   13164:	e0fffe03 	ldbu	r3,-8(fp)
   13168:	d0a8f244 	addi	r2,gp,-23607
   1316c:	1885883a 	add	r2,r3,r2
   13170:	10800003 	ldbu	r2,0(r2)
   13174:	10803fcc 	andi	r2,r2,255
   13178:	1000071e 	bne	r2,zero,13198 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1317c:	d0a8f517 	ldw	r2,-23596(gp)
   13180:	10800d83 	ldbu	r2,54(r2)
   13184:	0084303a 	nor	r2,zero,r2
   13188:	1007883a 	mov	r3,r2
   1318c:	d0a8f203 	ldbu	r2,-23608(gp)
   13190:	1884703a 	and	r2,r3,r2
   13194:	d0a8f205 	stb	r2,-23608(gp)
    }
}
   13198:	e037883a 	mov	sp,fp
   1319c:	df000017 	ldw	fp,0(sp)
   131a0:	dec00104 	addi	sp,sp,4
   131a4:	f800283a 	ret

000131a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   131a8:	defffc04 	addi	sp,sp,-16
   131ac:	df000315 	stw	fp,12(sp)
   131b0:	df000304 	addi	fp,sp,12
   131b4:	e13ffe15 	stw	r4,-8(fp)
   131b8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   131bc:	e0bffe17 	ldw	r2,-8(fp)
   131c0:	10800d03 	ldbu	r2,52(r2)
   131c4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   131c8:	e0bffd03 	ldbu	r2,-12(fp)
   131cc:	e0fffd03 	ldbu	r3,-12(fp)
   131d0:	e13fff17 	ldw	r4,-4(fp)
   131d4:	20c7883a 	add	r3,r4,r3
   131d8:	18c00204 	addi	r3,r3,8
   131dc:	18c000c3 	ldbu	r3,3(r3)
   131e0:	1809883a 	mov	r4,r3
   131e4:	e0fffe17 	ldw	r3,-8(fp)
   131e8:	18c00d43 	ldbu	r3,53(r3)
   131ec:	00c6303a 	nor	r3,zero,r3
   131f0:	20c6703a 	and	r3,r4,r3
   131f4:	1809883a 	mov	r4,r3
   131f8:	e0ffff17 	ldw	r3,-4(fp)
   131fc:	1885883a 	add	r2,r3,r2
   13200:	10800204 	addi	r2,r2,8
   13204:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   13208:	e0bffd03 	ldbu	r2,-12(fp)
   1320c:	e0ffff17 	ldw	r3,-4(fp)
   13210:	1885883a 	add	r2,r3,r2
   13214:	10800204 	addi	r2,r2,8
   13218:	108000c3 	ldbu	r2,3(r2)
   1321c:	10803fcc 	andi	r2,r2,255
   13220:	10000a1e 	bne	r2,zero,1324c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   13224:	e0bfff17 	ldw	r2,-4(fp)
   13228:	10800283 	ldbu	r2,10(r2)
   1322c:	1007883a 	mov	r3,r2
   13230:	e0bffe17 	ldw	r2,-8(fp)
   13234:	10800d83 	ldbu	r2,54(r2)
   13238:	0084303a 	nor	r2,zero,r2
   1323c:	1884703a 	and	r2,r3,r2
   13240:	1007883a 	mov	r3,r2
   13244:	e0bfff17 	ldw	r2,-4(fp)
   13248:	10c00285 	stb	r3,10(r2)
    }
}
   1324c:	e037883a 	mov	sp,fp
   13250:	df000017 	ldw	fp,0(sp)
   13254:	dec00104 	addi	sp,sp,4
   13258:	f800283a 	ret

0001325c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1325c:	defffa04 	addi	sp,sp,-24
   13260:	df000515 	stw	fp,20(sp)
   13264:	df000504 	addi	fp,sp,20
   13268:	e13ffe15 	stw	r4,-8(fp)
   1326c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   13270:	e0bffe17 	ldw	r2,-8(fp)
   13274:	10800d03 	ldbu	r2,52(r2)
   13278:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1327c:	e0bffe17 	ldw	r2,-8(fp)
   13280:	10800d83 	ldbu	r2,54(r2)
   13284:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   13288:	e0bffe17 	ldw	r2,-8(fp)
   1328c:	10800d43 	ldbu	r2,53(r2)
   13290:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   13294:	e0bfff17 	ldw	r2,-4(fp)
   13298:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1329c:	e0bffb17 	ldw	r2,-20(fp)
   132a0:	10800017 	ldw	r2,0(r2)
   132a4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   132a8:	00002506 	br	13340 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   132ac:	e0bffd03 	ldbu	r2,-12(fp)
   132b0:	e0fffd03 	ldbu	r3,-12(fp)
   132b4:	e13ffc17 	ldw	r4,-16(fp)
   132b8:	20c7883a 	add	r3,r4,r3
   132bc:	18c00204 	addi	r3,r3,8
   132c0:	18c000c3 	ldbu	r3,3(r3)
   132c4:	1809883a 	mov	r4,r3
   132c8:	e0fffd83 	ldbu	r3,-10(fp)
   132cc:	00c6303a 	nor	r3,zero,r3
   132d0:	20c6703a 	and	r3,r4,r3
   132d4:	1809883a 	mov	r4,r3
   132d8:	e0fffc17 	ldw	r3,-16(fp)
   132dc:	1885883a 	add	r2,r3,r2
   132e0:	10800204 	addi	r2,r2,8
   132e4:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   132e8:	e0bffd03 	ldbu	r2,-12(fp)
   132ec:	e0fffc17 	ldw	r3,-16(fp)
   132f0:	1885883a 	add	r2,r3,r2
   132f4:	10800204 	addi	r2,r2,8
   132f8:	108000c3 	ldbu	r2,3(r2)
   132fc:	10803fcc 	andi	r2,r2,255
   13300:	1000091e 	bne	r2,zero,13328 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   13304:	e0bffc17 	ldw	r2,-16(fp)
   13308:	10800283 	ldbu	r2,10(r2)
   1330c:	1007883a 	mov	r3,r2
   13310:	e0bffd43 	ldbu	r2,-11(fp)
   13314:	0084303a 	nor	r2,zero,r2
   13318:	1884703a 	and	r2,r3,r2
   1331c:	1007883a 	mov	r3,r2
   13320:	e0bffc17 	ldw	r2,-16(fp)
   13324:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   13328:	e0bffb17 	ldw	r2,-20(fp)
   1332c:	10800104 	addi	r2,r2,4
   13330:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   13334:	e0bffb17 	ldw	r2,-20(fp)
   13338:	10800017 	ldw	r2,0(r2)
   1333c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   13340:	e0bffc17 	ldw	r2,-16(fp)
   13344:	103fd91e 	bne	r2,zero,132ac <__alt_mem_Flash_flash_data+0xf40132ac>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   13348:	e037883a 	mov	sp,fp
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00104 	addi	sp,sp,4
   13354:	f800283a 	ret

00013358 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   13358:	defffc04 	addi	sp,sp,-16
   1335c:	df000315 	stw	fp,12(sp)
   13360:	df000304 	addi	fp,sp,12
   13364:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   13368:	e0bfff17 	ldw	r2,-4(fp)
   1336c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   13370:	e0bfff17 	ldw	r2,-4(fp)
   13374:	108002c4 	addi	r2,r2,11
   13378:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1337c:	e03ffe05 	stb	zero,-8(fp)
   13380:	00000706 	br	133a0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   13384:	e0bffd17 	ldw	r2,-12(fp)
   13388:	10c00044 	addi	r3,r2,1
   1338c:	e0fffd15 	stw	r3,-12(fp)
   13390:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13394:	e0bffe03 	ldbu	r2,-8(fp)
   13398:	10800044 	addi	r2,r2,1
   1339c:	e0bffe05 	stb	r2,-8(fp)
   133a0:	e0bffe03 	ldbu	r2,-8(fp)
   133a4:	108000f0 	cmpltui	r2,r2,3
   133a8:	103ff61e 	bne	r2,zero,13384 <__alt_mem_Flash_flash_data+0xf4013384>
        *ptbl++ = 0;
    }
}
   133ac:	e037883a 	mov	sp,fp
   133b0:	df000017 	ldw	fp,0(sp)
   133b4:	dec00104 	addi	sp,sp,4
   133b8:	f800283a 	ret

000133bc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   133bc:	defffb04 	addi	sp,sp,-20
   133c0:	dfc00415 	stw	ra,16(sp)
   133c4:	df000315 	stw	fp,12(sp)
   133c8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   133cc:	010000f4 	movhi	r4,3
   133d0:	213f2404 	addi	r4,r4,-880
   133d4:	0142d004 	movi	r5,2880
   133d8:	001371c0 	call	1371c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   133dc:	008000f4 	movhi	r2,3
   133e0:	10bf2404 	addi	r2,r2,-880
   133e4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   133e8:	008000f4 	movhi	r2,3
   133ec:	10bf3004 	addi	r2,r2,-832
   133f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   133f4:	e03ffd0d 	sth	zero,-12(fp)
   133f8:	00001306 	br	13448 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   133fc:	e0bffe17 	ldw	r2,-8(fp)
   13400:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   13404:	e0bffe17 	ldw	r2,-8(fp)
   13408:	e0ffff17 	ldw	r3,-4(fp)
   1340c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   13410:	e0bffe17 	ldw	r2,-8(fp)
   13414:	00c00fc4 	movi	r3,63
   13418:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1341c:	e0bffe17 	ldw	r2,-8(fp)
   13420:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   13424:	e0bffe17 	ldw	r2,-8(fp)
   13428:	10800c04 	addi	r2,r2,48
   1342c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   13430:	e0bfff17 	ldw	r2,-4(fp)
   13434:	10800c04 	addi	r2,r2,48
   13438:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1343c:	e0bffd0b 	ldhu	r2,-12(fp)
   13440:	10800044 	addi	r2,r2,1
   13444:	e0bffd0d 	sth	r2,-12(fp)
   13448:	e0bffd0b 	ldhu	r2,-12(fp)
   1344c:	10800ef0 	cmpltui	r2,r2,59
   13450:	103fea1e 	bne	r2,zero,133fc <__alt_mem_Flash_flash_data+0xf40133fc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   13454:	e0bffe17 	ldw	r2,-8(fp)
   13458:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1345c:	e0bffe17 	ldw	r2,-8(fp)
   13460:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   13464:	e0bffe17 	ldw	r2,-8(fp)
   13468:	00c00fc4 	movi	r3,63
   1346c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   13470:	e0bffe17 	ldw	r2,-8(fp)
   13474:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   13478:	008000f4 	movhi	r2,3
   1347c:	10bf2404 	addi	r2,r2,-880
   13480:	d0a8f315 	stw	r2,-23604(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   13484:	e037883a 	mov	sp,fp
   13488:	dfc00117 	ldw	ra,4(sp)
   1348c:	df000017 	ldw	fp,0(sp)
   13490:	dec00204 	addi	sp,sp,8
   13494:	f800283a 	ret

00013498 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   13498:	deffff04 	addi	sp,sp,-4
   1349c:	df000015 	stw	fp,0(sp)
   134a0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   134a4:	d028f615 	stw	zero,-23592(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   134a8:	d028f405 	stb	zero,-23600(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   134ac:	d028e605 	stb	zero,-23656(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   134b0:	d028ee45 	stb	zero,-23623(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   134b4:	d028e645 	stb	zero,-23655(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   134b8:	d028eb15 	stw	zero,-23636(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   134bc:	d028e715 	stw	zero,-23652(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   134c0:	d028f915 	stw	zero,-23580(gp)
    OSIdleCtrMax  = 0L;
   134c4:	d028ec15 	stw	zero,-23632(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   134c8:	d028f805 	stb	zero,-23584(gp)
#endif
}
   134cc:	e037883a 	mov	sp,fp
   134d0:	df000017 	ldw	fp,0(sp)
   134d4:	dec00104 	addi	sp,sp,4
   134d8:	f800283a 	ret

000134dc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   134dc:	defffd04 	addi	sp,sp,-12
   134e0:	df000215 	stw	fp,8(sp)
   134e4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   134e8:	d028f205 	stb	zero,-23608(gp)
    prdytbl       = &OSRdyTbl[0];
   134ec:	d0a8f244 	addi	r2,gp,-23607
   134f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   134f4:	e03ffe05 	stb	zero,-8(fp)
   134f8:	00000706 	br	13518 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   134fc:	e0bfff17 	ldw	r2,-4(fp)
   13500:	10c00044 	addi	r3,r2,1
   13504:	e0ffff15 	stw	r3,-4(fp)
   13508:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1350c:	e0bffe03 	ldbu	r2,-8(fp)
   13510:	10800044 	addi	r2,r2,1
   13514:	e0bffe05 	stb	r2,-8(fp)
   13518:	e0bffe03 	ldbu	r2,-8(fp)
   1351c:	108000f0 	cmpltui	r2,r2,3
   13520:	103ff61e 	bne	r2,zero,134fc <__alt_mem_Flash_flash_data+0xf40134fc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   13524:	d028e845 	stb	zero,-23647(gp)
    OSPrioHighRdy = 0;
   13528:	d028e805 	stb	zero,-23648(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   1352c:	d028f015 	stw	zero,-23616(gp)
    OSTCBCur      = (OS_TCB *)0;
   13530:	d028f515 	stw	zero,-23596(gp)
}
   13534:	e037883a 	mov	sp,fp
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00104 	addi	sp,sp,4
   13540:	f800283a 	ret

00013544 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   13544:	defff804 	addi	sp,sp,-32
   13548:	dfc00715 	stw	ra,28(sp)
   1354c:	df000615 	stw	fp,24(sp)
   13550:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   13554:	00bfffd4 	movui	r2,65535
   13558:	d8800015 	stw	r2,0(sp)
   1355c:	008000f4 	movhi	r2,3
   13560:	10bd2404 	addi	r2,r2,-2928
   13564:	d8800115 	stw	r2,4(sp)
   13568:	00808004 	movi	r2,512
   1356c:	d8800215 	stw	r2,8(sp)
   13570:	d8000315 	stw	zero,12(sp)
   13574:	008000c4 	movi	r2,3
   13578:	d8800415 	stw	r2,16(sp)
   1357c:	01000074 	movhi	r4,1
   13580:	210e7504 	addi	r4,r4,14804
   13584:	000b883a 	mov	r5,zero
   13588:	018000f4 	movhi	r6,3
   1358c:	31bf2304 	addi	r6,r6,-884
   13590:	01c00504 	movi	r7,20
   13594:	0018f700 	call	18f70 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   13598:	01000504 	movi	r4,20
   1359c:	014000b4 	movhi	r5,2
   135a0:	297bf104 	addi	r5,r5,-4156
   135a4:	e1bfff04 	addi	r6,fp,-4
   135a8:	001983c0 	call	1983c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   135ac:	e037883a 	mov	sp,fp
   135b0:	dfc00117 	ldw	ra,4(sp)
   135b4:	df000017 	ldw	fp,0(sp)
   135b8:	dec00204 	addi	sp,sp,8
   135bc:	f800283a 	ret

000135c0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   135c0:	defff804 	addi	sp,sp,-32
   135c4:	dfc00715 	stw	ra,28(sp)
   135c8:	df000615 	stw	fp,24(sp)
   135cc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   135d0:	00bfff94 	movui	r2,65534
   135d4:	d8800015 	stw	r2,0(sp)
   135d8:	008000f4 	movhi	r2,3
   135dc:	10baac04 	addi	r2,r2,-5456
   135e0:	d8800115 	stw	r2,4(sp)
   135e4:	00808004 	movi	r2,512
   135e8:	d8800215 	stw	r2,8(sp)
   135ec:	d8000315 	stw	zero,12(sp)
   135f0:	008000c4 	movi	r2,3
   135f4:	d8800415 	stw	r2,16(sp)
   135f8:	01000074 	movhi	r4,1
   135fc:	210e8c04 	addi	r4,r4,14896
   13600:	000b883a 	mov	r5,zero
   13604:	018000f4 	movhi	r6,3
   13608:	31bcab04 	addi	r6,r6,-3412
   1360c:	01c004c4 	movi	r7,19
   13610:	0018f700 	call	18f70 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   13614:	010004c4 	movi	r4,19
   13618:	014000b4 	movhi	r5,2
   1361c:	297bf504 	addi	r5,r5,-4140
   13620:	e1bfff04 	addi	r6,fp,-4
   13624:	001983c0 	call	1983c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   13628:	e037883a 	mov	sp,fp
   1362c:	dfc00117 	ldw	ra,4(sp)
   13630:	df000017 	ldw	fp,0(sp)
   13634:	dec00204 	addi	sp,sp,8
   13638:	f800283a 	ret

0001363c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   1363c:	defffb04 	addi	sp,sp,-20
   13640:	dfc00415 	stw	ra,16(sp)
   13644:	df000315 	stw	fp,12(sp)
   13648:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1364c:	010000f4 	movhi	r4,3
   13650:	2101f404 	addi	r4,r4,2000
   13654:	01414404 	movi	r5,1296
   13658:	001371c0 	call	1371c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1365c:	010000f4 	movhi	r4,3
   13660:	21033804 	addi	r4,r4,3296
   13664:	01401504 	movi	r5,84
   13668:	001371c0 	call	1371c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1366c:	008000f4 	movhi	r2,3
   13670:	1081f404 	addi	r2,r2,2000
   13674:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   13678:	008000f4 	movhi	r2,3
   1367c:	10820f04 	addi	r2,r2,2108
   13680:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   13684:	e03ffd05 	stb	zero,-12(fp)
   13688:	00001106 	br	136d0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1368c:	e0bffe17 	ldw	r2,-8(fp)
   13690:	e0ffff17 	ldw	r3,-4(fp)
   13694:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   13698:	e0bffe17 	ldw	r2,-8(fp)
   1369c:	00c00fc4 	movi	r3,63
   136a0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   136a4:	e0bffe17 	ldw	r2,-8(fp)
   136a8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   136ac:	e0bffe17 	ldw	r2,-8(fp)
   136b0:	10801b04 	addi	r2,r2,108
   136b4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   136b8:	e0bfff17 	ldw	r2,-4(fp)
   136bc:	10801b04 	addi	r2,r2,108
   136c0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   136c4:	e0bffd03 	ldbu	r2,-12(fp)
   136c8:	10800044 	addi	r2,r2,1
   136cc:	e0bffd05 	stb	r2,-12(fp)
   136d0:	e0bffd03 	ldbu	r2,-12(fp)
   136d4:	108002f0 	cmpltui	r2,r2,11
   136d8:	103fec1e 	bne	r2,zero,1368c <__alt_mem_Flash_flash_data+0xf401368c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   136dc:	e0bffe17 	ldw	r2,-8(fp)
   136e0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   136e4:	e0bffe17 	ldw	r2,-8(fp)
   136e8:	00c00fc4 	movi	r3,63
   136ec:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   136f0:	e0bffe17 	ldw	r2,-8(fp)
   136f4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   136f8:	d028e915 	stw	zero,-23644(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   136fc:	008000f4 	movhi	r2,3
   13700:	1081f404 	addi	r2,r2,2000
   13704:	d0a8ed15 	stw	r2,-23628(gp)
}
   13708:	e037883a 	mov	sp,fp
   1370c:	dfc00117 	ldw	ra,4(sp)
   13710:	df000017 	ldw	fp,0(sp)
   13714:	dec00204 	addi	sp,sp,8
   13718:	f800283a 	ret

0001371c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   1371c:	defffd04 	addi	sp,sp,-12
   13720:	df000215 	stw	fp,8(sp)
   13724:	df000204 	addi	fp,sp,8
   13728:	e13ffe15 	stw	r4,-8(fp)
   1372c:	2805883a 	mov	r2,r5
   13730:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   13734:	00000706 	br	13754 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   13738:	e0bffe17 	ldw	r2,-8(fp)
   1373c:	10c00044 	addi	r3,r2,1
   13740:	e0fffe15 	stw	r3,-8(fp)
   13744:	10000005 	stb	zero,0(r2)
        size--;
   13748:	e0bfff0b 	ldhu	r2,-4(fp)
   1374c:	10bfffc4 	addi	r2,r2,-1
   13750:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   13754:	e0bfff0b 	ldhu	r2,-4(fp)
   13758:	103ff71e 	bne	r2,zero,13738 <__alt_mem_Flash_flash_data+0xf4013738>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1375c:	e037883a 	mov	sp,fp
   13760:	df000017 	ldw	fp,0(sp)
   13764:	dec00104 	addi	sp,sp,4
   13768:	f800283a 	ret

0001376c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   1376c:	defffc04 	addi	sp,sp,-16
   13770:	df000315 	stw	fp,12(sp)
   13774:	df000304 	addi	fp,sp,12
   13778:	e13ffd15 	stw	r4,-12(fp)
   1377c:	e17ffe15 	stw	r5,-8(fp)
   13780:	3005883a 	mov	r2,r6
   13784:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   13788:	00000b06 	br	137b8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   1378c:	e0bffd17 	ldw	r2,-12(fp)
   13790:	10c00044 	addi	r3,r2,1
   13794:	e0fffd15 	stw	r3,-12(fp)
   13798:	e0fffe17 	ldw	r3,-8(fp)
   1379c:	19000044 	addi	r4,r3,1
   137a0:	e13ffe15 	stw	r4,-8(fp)
   137a4:	18c00003 	ldbu	r3,0(r3)
   137a8:	10c00005 	stb	r3,0(r2)
        size--;
   137ac:	e0bfff0b 	ldhu	r2,-4(fp)
   137b0:	10bfffc4 	addi	r2,r2,-1
   137b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   137b8:	e0bfff0b 	ldhu	r2,-4(fp)
   137bc:	103ff31e 	bne	r2,zero,1378c <__alt_mem_Flash_flash_data+0xf401378c>
        *pdest++ = *psrc++;
        size--;
    }
}
   137c0:	e037883a 	mov	sp,fp
   137c4:	df000017 	ldw	fp,0(sp)
   137c8:	dec00104 	addi	sp,sp,4
   137cc:	f800283a 	ret

000137d0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   137d0:	defffb04 	addi	sp,sp,-20
   137d4:	dfc00415 	stw	ra,16(sp)
   137d8:	df000315 	stw	fp,12(sp)
   137dc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   137e0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137e4:	0005303a 	rdctl	r2,status
   137e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137ec:	e0fffe17 	ldw	r3,-8(fp)
   137f0:	00bfff84 	movi	r2,-2
   137f4:	1884703a 	and	r2,r3,r2
   137f8:	1001703a 	wrctl	status,r2
  
  return context;
   137fc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13800:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   13804:	d0a8f403 	ldbu	r2,-23600(gp)
   13808:	10803fcc 	andi	r2,r2,255
   1380c:	10001a1e 	bne	r2,zero,13878 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   13810:	d0a8e603 	ldbu	r2,-23656(gp)
   13814:	10803fcc 	andi	r2,r2,255
   13818:	1000171e 	bne	r2,zero,13878 <OS_Sched+0xa8>
            OS_SchedNew();
   1381c:	001389c0 	call	1389c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   13820:	d0e8e803 	ldbu	r3,-23648(gp)
   13824:	d0a8e843 	ldbu	r2,-23647(gp)
   13828:	18c03fcc 	andi	r3,r3,255
   1382c:	10803fcc 	andi	r2,r2,255
   13830:	18801126 	beq	r3,r2,13878 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   13834:	d0a8e803 	ldbu	r2,-23648(gp)
   13838:	10c03fcc 	andi	r3,r2,255
   1383c:	008000f4 	movhi	r2,3
   13840:	10833804 	addi	r2,r2,3296
   13844:	18c7883a 	add	r3,r3,r3
   13848:	18c7883a 	add	r3,r3,r3
   1384c:	10c5883a 	add	r2,r2,r3
   13850:	10800017 	ldw	r2,0(r2)
   13854:	d0a8f015 	stw	r2,-23616(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   13858:	d0a8f017 	ldw	r2,-23616(gp)
   1385c:	10c00e17 	ldw	r3,56(r2)
   13860:	18c00044 	addi	r3,r3,1
   13864:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   13868:	d0a8eb17 	ldw	r2,-23636(gp)
   1386c:	10800044 	addi	r2,r2,1
   13870:	d0a8eb15 	stw	r2,-23636(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   13874:	001df800 	call	1df80 <OSCtxSw>
   13878:	e0bffd17 	ldw	r2,-12(fp)
   1387c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   13888:	e037883a 	mov	sp,fp
   1388c:	dfc00117 	ldw	ra,4(sp)
   13890:	df000017 	ldw	fp,0(sp)
   13894:	dec00204 	addi	sp,sp,8
   13898:	f800283a 	ret

0001389c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1389c:	defffe04 	addi	sp,sp,-8
   138a0:	df000115 	stw	fp,4(sp)
   138a4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   138a8:	d0a8f203 	ldbu	r2,-23608(gp)
   138ac:	10c03fcc 	andi	r3,r2,255
   138b0:	008000b4 	movhi	r2,2
   138b4:	10bbb104 	addi	r2,r2,-4412
   138b8:	10c5883a 	add	r2,r2,r3
   138bc:	10800003 	ldbu	r2,0(r2)
   138c0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   138c4:	e0bfff03 	ldbu	r2,-4(fp)
   138c8:	100490fa 	slli	r2,r2,3
   138cc:	1009883a 	mov	r4,r2
   138d0:	e0ffff03 	ldbu	r3,-4(fp)
   138d4:	d0a8f244 	addi	r2,gp,-23607
   138d8:	1885883a 	add	r2,r3,r2
   138dc:	10800003 	ldbu	r2,0(r2)
   138e0:	10c03fcc 	andi	r3,r2,255
   138e4:	008000b4 	movhi	r2,2
   138e8:	10bbb104 	addi	r2,r2,-4412
   138ec:	10c5883a 	add	r2,r2,r3
   138f0:	10800003 	ldbu	r2,0(r2)
   138f4:	2085883a 	add	r2,r4,r2
   138f8:	d0a8e805 	stb	r2,-23648(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   138fc:	e037883a 	mov	sp,fp
   13900:	df000017 	ldw	fp,0(sp)
   13904:	dec00104 	addi	sp,sp,4
   13908:	f800283a 	ret

0001390c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   1390c:	defffc04 	addi	sp,sp,-16
   13910:	df000315 	stw	fp,12(sp)
   13914:	df000304 	addi	fp,sp,12
   13918:	e13ffe15 	stw	r4,-8(fp)
   1391c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   13920:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   13924:	00000b06 	br	13954 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   13928:	e0bffe17 	ldw	r2,-8(fp)
   1392c:	10c00044 	addi	r3,r2,1
   13930:	e0fffe15 	stw	r3,-8(fp)
   13934:	e0ffff17 	ldw	r3,-4(fp)
   13938:	19000044 	addi	r4,r3,1
   1393c:	e13fff15 	stw	r4,-4(fp)
   13940:	18c00003 	ldbu	r3,0(r3)
   13944:	10c00005 	stb	r3,0(r2)
        len++;
   13948:	e0bffd03 	ldbu	r2,-12(fp)
   1394c:	10800044 	addi	r2,r2,1
   13950:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   13954:	e0bfff17 	ldw	r2,-4(fp)
   13958:	10800003 	ldbu	r2,0(r2)
   1395c:	10803fcc 	andi	r2,r2,255
   13960:	103ff11e 	bne	r2,zero,13928 <__alt_mem_Flash_flash_data+0xf4013928>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   13964:	e0bffe17 	ldw	r2,-8(fp)
   13968:	10000005 	stb	zero,0(r2)
    return (len);
   1396c:	e0bffd03 	ldbu	r2,-12(fp)
}
   13970:	e037883a 	mov	sp,fp
   13974:	df000017 	ldw	fp,0(sp)
   13978:	dec00104 	addi	sp,sp,4
   1397c:	f800283a 	ret

00013980 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   13980:	defffd04 	addi	sp,sp,-12
   13984:	df000215 	stw	fp,8(sp)
   13988:	df000204 	addi	fp,sp,8
   1398c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   13990:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   13994:	00000606 	br	139b0 <OS_StrLen+0x30>
        psrc++;
   13998:	e0bfff17 	ldw	r2,-4(fp)
   1399c:	10800044 	addi	r2,r2,1
   139a0:	e0bfff15 	stw	r2,-4(fp)
        len++;
   139a4:	e0bffe03 	ldbu	r2,-8(fp)
   139a8:	10800044 	addi	r2,r2,1
   139ac:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   139b0:	e0bfff17 	ldw	r2,-4(fp)
   139b4:	10800003 	ldbu	r2,0(r2)
   139b8:	10803fcc 	andi	r2,r2,255
   139bc:	103ff61e 	bne	r2,zero,13998 <__alt_mem_Flash_flash_data+0xf4013998>
        psrc++;
        len++;
    }
    return (len);
   139c0:	e0bffe03 	ldbu	r2,-8(fp)
}
   139c4:	e037883a 	mov	sp,fp
   139c8:	df000017 	ldw	fp,0(sp)
   139cc:	dec00104 	addi	sp,sp,4
   139d0:	f800283a 	ret

000139d4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   139d4:	defffa04 	addi	sp,sp,-24
   139d8:	dfc00515 	stw	ra,20(sp)
   139dc:	df000415 	stw	fp,16(sp)
   139e0:	df000404 	addi	fp,sp,16
   139e4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   139e8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139ec:	0005303a 	rdctl	r2,status
   139f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139f4:	e0fffd17 	ldw	r3,-12(fp)
   139f8:	00bfff84 	movi	r2,-2
   139fc:	1884703a 	and	r2,r3,r2
   13a00:	1001703a 	wrctl	status,r2
  
  return context;
   13a04:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   13a08:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   13a0c:	d0a8e717 	ldw	r2,-23652(gp)
   13a10:	10800044 	addi	r2,r2,1
   13a14:	d0a8e715 	stw	r2,-23652(gp)
   13a18:	e0bffc17 	ldw	r2,-16(fp)
   13a1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a20:	e0bffe17 	ldw	r2,-8(fp)
   13a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   13a28:	001e2780 	call	1e278 <OSTaskIdleHook>
    }
   13a2c:	003fef06 	br	139ec <__alt_mem_Flash_flash_data+0xf40139ec>

00013a30 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   13a30:	defff804 	addi	sp,sp,-32
   13a34:	dfc00715 	stw	ra,28(sp)
   13a38:	df000615 	stw	fp,24(sp)
   13a3c:	dc400515 	stw	r17,20(sp)
   13a40:	dc000415 	stw	r16,16(sp)
   13a44:	df000604 	addi	fp,sp,24
   13a48:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a4c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   13a50:	00000206 	br	13a5c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   13a54:	01000044 	movi	r4,1
   13a58:	001a1680 	call	1a168 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   13a5c:	d0a8f803 	ldbu	r2,-23584(gp)
   13a60:	10803fcc 	andi	r2,r2,255
   13a64:	103ffb26 	beq	r2,zero,13a54 <__alt_mem_Flash_flash_data+0xf4013a54>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   13a68:	d0e8ec17 	ldw	r3,-23632(gp)
   13a6c:	00947b34 	movhi	r2,20972
   13a70:	10a147c4 	addi	r2,r2,-31457
   13a74:	1888383a 	mulxuu	r4,r3,r2
   13a78:	1885383a 	mul	r2,r3,r2
   13a7c:	1021883a 	mov	r16,r2
   13a80:	2023883a 	mov	r17,r4
   13a84:	8804d17a 	srli	r2,r17,5
   13a88:	d0a8ec15 	stw	r2,-23632(gp)
    if (OSIdleCtrMax == 0L) {
   13a8c:	d0a8ec17 	ldw	r2,-23632(gp)
   13a90:	1000031e 	bne	r2,zero,13aa0 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   13a94:	d028ee05 	stb	zero,-23624(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   13a98:	01003fc4 	movi	r4,255
   13a9c:	0019dbc0 	call	19dbc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13aa0:	0005303a 	rdctl	r2,status
   13aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13aa8:	e0fffb17 	ldw	r3,-20(fp)
   13aac:	00bfff84 	movi	r2,-2
   13ab0:	1884703a 	and	r2,r3,r2
   13ab4:	1001703a 	wrctl	status,r2
  
  return context;
   13ab8:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   13abc:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   13ac0:	d0a8e717 	ldw	r2,-23652(gp)
   13ac4:	d0a8f915 	stw	r2,-23580(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   13ac8:	d028e715 	stw	zero,-23652(gp)
   13acc:	e0bffa17 	ldw	r2,-24(fp)
   13ad0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   13adc:	d0e8f917 	ldw	r3,-23580(gp)
   13ae0:	d0a8ec17 	ldw	r2,-23632(gp)
   13ae4:	1885203a 	divu	r2,r3,r2
   13ae8:	1007883a 	mov	r3,r2
   13aec:	00801904 	movi	r2,100
   13af0:	10c5c83a 	sub	r2,r2,r3
   13af4:	d0a8ee05 	stb	r2,-23624(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   13af8:	001e2080 	call	1e208 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   13afc:	0013b0c0 	call	13b0c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   13b00:	0009883a 	mov	r4,zero
   13b04:	001a1680 	call	1a168 <OSTimeDly>
    }
   13b08:	003fe506 	br	13aa0 <__alt_mem_Flash_flash_data+0xf4013aa0>

00013b0c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   13b0c:	defffa04 	addi	sp,sp,-24
   13b10:	dfc00515 	stw	ra,20(sp)
   13b14:	df000415 	stw	fp,16(sp)
   13b18:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   13b1c:	e03ffc05 	stb	zero,-16(fp)
   13b20:	00002406 	br	13bb4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   13b24:	e0fffc03 	ldbu	r3,-16(fp)
   13b28:	e0bffe04 	addi	r2,fp,-8
   13b2c:	1809883a 	mov	r4,r3
   13b30:	100b883a 	mov	r5,r2
   13b34:	0019bf40 	call	19bf4 <OSTaskStkChk>
   13b38:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   13b3c:	e0bffc43 	ldbu	r2,-15(fp)
   13b40:	1000191e 	bne	r2,zero,13ba8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   13b44:	e0fffc03 	ldbu	r3,-16(fp)
   13b48:	008000f4 	movhi	r2,3
   13b4c:	10833804 	addi	r2,r2,3296
   13b50:	18c7883a 	add	r3,r3,r3
   13b54:	18c7883a 	add	r3,r3,r3
   13b58:	10c5883a 	add	r2,r2,r3
   13b5c:	10800017 	ldw	r2,0(r2)
   13b60:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	10000f26 	beq	r2,zero,13ba8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   13b6c:	e0bffd17 	ldw	r2,-12(fp)
   13b70:	10800060 	cmpeqi	r2,r2,1
   13b74:	10000c1e 	bne	r2,zero,13ba8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   13b78:	e0bffd17 	ldw	r2,-12(fp)
   13b7c:	10c00217 	ldw	r3,8(r2)
   13b80:	e0bffd17 	ldw	r2,-12(fp)
   13b84:	10800317 	ldw	r2,12(r2)
   13b88:	1085883a 	add	r2,r2,r2
   13b8c:	1085883a 	add	r2,r2,r2
   13b90:	1887883a 	add	r3,r3,r2
   13b94:	e0bffd17 	ldw	r2,-12(fp)
   13b98:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   13b9c:	e0ffff17 	ldw	r3,-4(fp)
   13ba0:	e0bffd17 	ldw	r2,-12(fp)
   13ba4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   13ba8:	e0bffc03 	ldbu	r2,-16(fp)
   13bac:	10800044 	addi	r2,r2,1
   13bb0:	e0bffc05 	stb	r2,-16(fp)
   13bb4:	e0bffc03 	ldbu	r2,-16(fp)
   13bb8:	10800570 	cmpltui	r2,r2,21
   13bbc:	103fd91e 	bne	r2,zero,13b24 <__alt_mem_Flash_flash_data+0xf4013b24>
#endif
                }
            }
        }
    }
}
   13bc0:	e037883a 	mov	sp,fp
   13bc4:	dfc00117 	ldw	ra,4(sp)
   13bc8:	df000017 	ldw	fp,0(sp)
   13bcc:	dec00204 	addi	sp,sp,8
   13bd0:	f800283a 	ret

00013bd4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   13bd4:	defff204 	addi	sp,sp,-56
   13bd8:	dfc00d15 	stw	ra,52(sp)
   13bdc:	df000c15 	stw	fp,48(sp)
   13be0:	df000c04 	addi	fp,sp,48
   13be4:	e17ffc15 	stw	r5,-16(fp)
   13be8:	e1bffd15 	stw	r6,-12(fp)
   13bec:	3807883a 	mov	r3,r7
   13bf0:	e0800417 	ldw	r2,16(fp)
   13bf4:	e13ffb05 	stb	r4,-20(fp)
   13bf8:	e0fffe0d 	sth	r3,-8(fp)
   13bfc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c00:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c04:	0005303a 	rdctl	r2,status
   13c08:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c0c:	e0fff617 	ldw	r3,-40(fp)
   13c10:	00bfff84 	movi	r2,-2
   13c14:	1884703a 	and	r2,r3,r2
   13c18:	1001703a 	wrctl	status,r2
  
  return context;
   13c1c:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   13c20:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   13c24:	d0a8ed17 	ldw	r2,-23628(gp)
   13c28:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   13c2c:	e0bff517 	ldw	r2,-44(fp)
   13c30:	10009326 	beq	r2,zero,13e80 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   13c34:	e0bff517 	ldw	r2,-44(fp)
   13c38:	10800517 	ldw	r2,20(r2)
   13c3c:	d0a8ed15 	stw	r2,-23628(gp)
   13c40:	e0bff417 	ldw	r2,-48(fp)
   13c44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c48:	e0bff717 	ldw	r2,-36(fp)
   13c4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   13c50:	e0bff517 	ldw	r2,-44(fp)
   13c54:	e0fffc17 	ldw	r3,-16(fp)
   13c58:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   13c5c:	e0bff517 	ldw	r2,-44(fp)
   13c60:	e0fffb03 	ldbu	r3,-20(fp)
   13c64:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   13c68:	e0bff517 	ldw	r2,-44(fp)
   13c6c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   13c70:	e0bff517 	ldw	r2,-44(fp)
   13c74:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   13c78:	e0bff517 	ldw	r2,-44(fp)
   13c7c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   13c80:	e0bff517 	ldw	r2,-44(fp)
   13c84:	e0c00317 	ldw	r3,12(fp)
   13c88:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   13c8c:	e0bff517 	ldw	r2,-44(fp)
   13c90:	e0c00217 	ldw	r3,8(fp)
   13c94:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   13c98:	e0bff517 	ldw	r2,-44(fp)
   13c9c:	e0fffd17 	ldw	r3,-12(fp)
   13ca0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   13ca4:	e0bff517 	ldw	r2,-44(fp)
   13ca8:	e0ffff0b 	ldhu	r3,-4(fp)
   13cac:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   13cb0:	e0bff517 	ldw	r2,-44(fp)
   13cb4:	e0fffe0b 	ldhu	r3,-8(fp)
   13cb8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   13cbc:	e0bff517 	ldw	r2,-44(fp)
   13cc0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   13cc4:	e0bffb03 	ldbu	r2,-20(fp)
   13cc8:	1004d0fa 	srli	r2,r2,3
   13ccc:	1007883a 	mov	r3,r2
   13cd0:	e0bff517 	ldw	r2,-44(fp)
   13cd4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   13cd8:	e0bffb03 	ldbu	r2,-20(fp)
   13cdc:	108001cc 	andi	r2,r2,7
   13ce0:	1007883a 	mov	r3,r2
   13ce4:	e0bff517 	ldw	r2,-44(fp)
   13ce8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   13cec:	e0bff517 	ldw	r2,-44(fp)
   13cf0:	10800d03 	ldbu	r2,52(r2)
   13cf4:	10803fcc 	andi	r2,r2,255
   13cf8:	00c00044 	movi	r3,1
   13cfc:	1884983a 	sll	r2,r3,r2
   13d00:	1007883a 	mov	r3,r2
   13d04:	e0bff517 	ldw	r2,-44(fp)
   13d08:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   13d0c:	e0bff517 	ldw	r2,-44(fp)
   13d10:	10800cc3 	ldbu	r2,51(r2)
   13d14:	10803fcc 	andi	r2,r2,255
   13d18:	00c00044 	movi	r3,1
   13d1c:	1884983a 	sll	r2,r3,r2
   13d20:	1007883a 	mov	r3,r2
   13d24:	e0bff517 	ldw	r2,-44(fp)
   13d28:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   13d2c:	e0bff517 	ldw	r2,-44(fp)
   13d30:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   13d34:	e0bff517 	ldw	r2,-44(fp)
   13d38:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   13d3c:	e0bff517 	ldw	r2,-44(fp)
   13d40:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   13d44:	e0bff517 	ldw	r2,-44(fp)
   13d48:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   13d4c:	e0bff517 	ldw	r2,-44(fp)
   13d50:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   13d54:	e0bff517 	ldw	r2,-44(fp)
   13d58:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   13d5c:	e0bff517 	ldw	r2,-44(fp)
   13d60:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   13d64:	e0bff517 	ldw	r2,-44(fp)
   13d68:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   13d6c:	e0bff517 	ldw	r2,-44(fp)
   13d70:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   13d74:	e0bff517 	ldw	r2,-44(fp)
   13d78:	00c00fc4 	movi	r3,63
   13d7c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   13d80:	e0bff517 	ldw	r2,-44(fp)
   13d84:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   13d88:	e13ff517 	ldw	r4,-44(fp)
   13d8c:	001e2940 	call	1e294 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   13d90:	e13ff517 	ldw	r4,-44(fp)
   13d94:	001e1ac0 	call	1e1ac <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d98:	0005303a 	rdctl	r2,status
   13d9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13da0:	e0fff817 	ldw	r3,-32(fp)
   13da4:	00bfff84 	movi	r2,-2
   13da8:	1884703a 	and	r2,r3,r2
   13dac:	1001703a 	wrctl	status,r2
  
  return context;
   13db0:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   13db4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   13db8:	e0fffb03 	ldbu	r3,-20(fp)
   13dbc:	008000f4 	movhi	r2,3
   13dc0:	10833804 	addi	r2,r2,3296
   13dc4:	18c7883a 	add	r3,r3,r3
   13dc8:	18c7883a 	add	r3,r3,r3
   13dcc:	10c5883a 	add	r2,r2,r3
   13dd0:	e0fff517 	ldw	r3,-44(fp)
   13dd4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   13dd8:	d0e8e917 	ldw	r3,-23644(gp)
   13ddc:	e0bff517 	ldw	r2,-44(fp)
   13de0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   13de4:	e0bff517 	ldw	r2,-44(fp)
   13de8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   13dec:	d0a8e917 	ldw	r2,-23644(gp)
   13df0:	10000326 	beq	r2,zero,13e00 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   13df4:	d0a8e917 	ldw	r2,-23644(gp)
   13df8:	e0fff517 	ldw	r3,-44(fp)
   13dfc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   13e00:	e0bff517 	ldw	r2,-44(fp)
   13e04:	d0a8e915 	stw	r2,-23644(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   13e08:	e0bff517 	ldw	r2,-44(fp)
   13e0c:	10c00d83 	ldbu	r3,54(r2)
   13e10:	d0a8f203 	ldbu	r2,-23608(gp)
   13e14:	1884b03a 	or	r2,r3,r2
   13e18:	d0a8f205 	stb	r2,-23608(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13e1c:	e0bff517 	ldw	r2,-44(fp)
   13e20:	10800d03 	ldbu	r2,52(r2)
   13e24:	10c03fcc 	andi	r3,r2,255
   13e28:	e0bff517 	ldw	r2,-44(fp)
   13e2c:	10800d03 	ldbu	r2,52(r2)
   13e30:	11003fcc 	andi	r4,r2,255
   13e34:	d0a8f244 	addi	r2,gp,-23607
   13e38:	2085883a 	add	r2,r4,r2
   13e3c:	11000003 	ldbu	r4,0(r2)
   13e40:	e0bff517 	ldw	r2,-44(fp)
   13e44:	10800d43 	ldbu	r2,53(r2)
   13e48:	2084b03a 	or	r2,r4,r2
   13e4c:	1009883a 	mov	r4,r2
   13e50:	d0a8f244 	addi	r2,gp,-23607
   13e54:	1885883a 	add	r2,r3,r2
   13e58:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   13e5c:	d0a8ee43 	ldbu	r2,-23623(gp)
   13e60:	10800044 	addi	r2,r2,1
   13e64:	d0a8ee45 	stb	r2,-23623(gp)
   13e68:	e0bff417 	ldw	r2,-48(fp)
   13e6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e70:	e0bff917 	ldw	r2,-28(fp)
   13e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13e78:	0005883a 	mov	r2,zero
   13e7c:	00000506 	br	13e94 <OS_TCBInit+0x2c0>
   13e80:	e0bff417 	ldw	r2,-48(fp)
   13e84:	e0bffa15 	stw	r2,-24(fp)
   13e88:	e0bffa17 	ldw	r2,-24(fp)
   13e8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   13e90:	00801084 	movi	r2,66
}
   13e94:	e037883a 	mov	sp,fp
   13e98:	dfc00117 	ldw	ra,4(sp)
   13e9c:	df000017 	ldw	fp,0(sp)
   13ea0:	dec00204 	addi	sp,sp,8
   13ea4:	f800283a 	ret

00013ea8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   13ea8:	defffe04 	addi	sp,sp,-8
   13eac:	df000115 	stw	fp,4(sp)
   13eb0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   13eb4:	d0a01804 	addi	r2,gp,-32672
   13eb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   13ebc:	d0a01904 	addi	r2,gp,-32668
   13ec0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   13ec4:	d0a01a84 	addi	r2,gp,-32662
   13ec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   13ecc:	d0a01b04 	addi	r2,gp,-32660
   13ed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   13ed4:	d0a01a04 	addi	r2,gp,-32664
   13ed8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   13edc:	d0a01b84 	addi	r2,gp,-32658
   13ee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   13ee4:	d0a01c04 	addi	r2,gp,-32656
   13ee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   13eec:	d0a01c84 	addi	r2,gp,-32654
   13ef0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   13ef4:	d0a01d04 	addi	r2,gp,-32652
   13ef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   13efc:	d0a01d84 	addi	r2,gp,-32650
   13f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   13f04:	d0a01e04 	addi	r2,gp,-32648
   13f08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   13f0c:	d0a01e84 	addi	r2,gp,-32646
   13f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   13f14:	d0a01f04 	addi	r2,gp,-32644
   13f18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   13f1c:	d0a01f84 	addi	r2,gp,-32642
   13f20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   13f24:	d0a02004 	addi	r2,gp,-32640
   13f28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   13f2c:	d0a02084 	addi	r2,gp,-32638
   13f30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   13f34:	d0a02104 	addi	r2,gp,-32636
   13f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   13f3c:	d0a02184 	addi	r2,gp,-32634
   13f40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   13f44:	d0a02204 	addi	r2,gp,-32632
   13f48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   13f4c:	d0a02284 	addi	r2,gp,-32630
   13f50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   13f54:	d0a02304 	addi	r2,gp,-32628
   13f58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   13f5c:	d0a02384 	addi	r2,gp,-32626
   13f60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   13f64:	d0a02404 	addi	r2,gp,-32624
   13f68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   13f6c:	d0a02484 	addi	r2,gp,-32622
   13f70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   13f74:	d0a02504 	addi	r2,gp,-32620
   13f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   13f7c:	d0a02584 	addi	r2,gp,-32618
   13f80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   13f84:	d0a02604 	addi	r2,gp,-32616
   13f88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   13f8c:	d0a02684 	addi	r2,gp,-32614
   13f90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   13f94:	d0a02704 	addi	r2,gp,-32612
   13f98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   13f9c:	d0a02784 	addi	r2,gp,-32610
   13fa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   13fa4:	d0a02804 	addi	r2,gp,-32608
   13fa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   13fac:	d0a02884 	addi	r2,gp,-32606
   13fb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   13fb4:	d0a02904 	addi	r2,gp,-32604
   13fb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   13fbc:	d0a02984 	addi	r2,gp,-32602
   13fc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   13fc4:	d0a02a04 	addi	r2,gp,-32600
   13fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   13fcc:	d0a02a84 	addi	r2,gp,-32598
   13fd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   13fd4:	d0a02b04 	addi	r2,gp,-32596
   13fd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   13fdc:	d0a02b84 	addi	r2,gp,-32594
   13fe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   13fe4:	d0a02c04 	addi	r2,gp,-32592
   13fe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   13fec:	d0a02c84 	addi	r2,gp,-32590
   13ff0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   13ff4:	d0a02d04 	addi	r2,gp,-32588
   13ff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   13ffc:	d0a02d84 	addi	r2,gp,-32586
   14000:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   14004:	d0a02e04 	addi	r2,gp,-32584
   14008:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1400c:	d0a02e84 	addi	r2,gp,-32582
   14010:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   14014:	d0a02f04 	addi	r2,gp,-32580
   14018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1401c:	d0a03404 	addi	r2,gp,-32560
   14020:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   14024:	e037883a 	mov	sp,fp
   14028:	df000017 	ldw	fp,0(sp)
   1402c:	dec00104 	addi	sp,sp,4
   14030:	f800283a 	ret

00014034 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   14034:	defff204 	addi	sp,sp,-56
   14038:	df000d15 	stw	fp,52(sp)
   1403c:	df000d04 	addi	fp,sp,52
   14040:	e13ffc15 	stw	r4,-16(fp)
   14044:	2807883a 	mov	r3,r5
   14048:	3005883a 	mov	r2,r6
   1404c:	e1ffff15 	stw	r7,-4(fp)
   14050:	e0fffd0d 	sth	r3,-12(fp)
   14054:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14058:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1405c:	e0bfff17 	ldw	r2,-4(fp)
   14060:	1000021e 	bne	r2,zero,1406c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   14064:	0005883a 	mov	r2,zero
   14068:	0000b006 	br	1432c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1406c:	e0bffc17 	ldw	r2,-16(fp)
   14070:	1000051e 	bne	r2,zero,14088 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14074:	e0bfff17 	ldw	r2,-4(fp)
   14078:	00c01b84 	movi	r3,110
   1407c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14080:	0005883a 	mov	r2,zero
   14084:	0000a906 	br	1432c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   14088:	e0bffc17 	ldw	r2,-16(fp)
   1408c:	10800003 	ldbu	r2,0(r2)
   14090:	10803fcc 	andi	r2,r2,255
   14094:	10800160 	cmpeqi	r2,r2,5
   14098:	1000051e 	bne	r2,zero,140b0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1409c:	e0bfff17 	ldw	r2,-4(fp)
   140a0:	00c00044 	movi	r3,1
   140a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   140a8:	0005883a 	mov	r2,zero
   140ac:	00009f06 	br	1432c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   140b0:	e0fffe03 	ldbu	r3,-8(fp)
   140b4:	00bfe004 	movi	r2,-128
   140b8:	1884703a 	and	r2,r3,r2
   140bc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   140c0:	e0bff503 	ldbu	r2,-44(fp)
   140c4:	10000626 	beq	r2,zero,140e0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   140c8:	e0bffe03 	ldbu	r2,-8(fp)
   140cc:	10801fcc 	andi	r2,r2,127
   140d0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   140d4:	00800044 	movi	r2,1
   140d8:	e0bff385 	stb	r2,-50(fp)
   140dc:	00000106 	br	140e4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   140e0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   140e4:	e0bfff17 	ldw	r2,-4(fp)
   140e8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140ec:	0005303a 	rdctl	r2,status
   140f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140f4:	e0fff617 	ldw	r3,-40(fp)
   140f8:	00bfff84 	movi	r2,-2
   140fc:	1884703a 	and	r2,r3,r2
   14100:	1001703a 	wrctl	status,r2
  
  return context;
   14104:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   14108:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1410c:	e0bffe03 	ldbu	r2,-8(fp)
   14110:	10c00060 	cmpeqi	r3,r2,1
   14114:	18005f1e 	bne	r3,zero,14294 <OSFlagAccept+0x260>
   14118:	10c00088 	cmpgei	r3,r2,2
   1411c:	1800021e 	bne	r3,zero,14128 <OSFlagAccept+0xf4>
   14120:	10003f26 	beq	r2,zero,14220 <OSFlagAccept+0x1ec>
   14124:	00007706 	br	14304 <OSFlagAccept+0x2d0>
   14128:	10c000a0 	cmpeqi	r3,r2,2
   1412c:	1800031e 	bne	r3,zero,1413c <OSFlagAccept+0x108>
   14130:	108000e0 	cmpeqi	r2,r2,3
   14134:	10001e1e 	bne	r2,zero,141b0 <OSFlagAccept+0x17c>
   14138:	00007206 	br	14304 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1413c:	e0bffc17 	ldw	r2,-16(fp)
   14140:	10c0020b 	ldhu	r3,8(r2)
   14144:	e0bffd0b 	ldhu	r2,-12(fp)
   14148:	1884703a 	and	r2,r3,r2
   1414c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14150:	e0fff30b 	ldhu	r3,-52(fp)
   14154:	e0bffd0b 	ldhu	r2,-12(fp)
   14158:	18800d1e 	bne	r3,r2,14190 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1415c:	e0bff383 	ldbu	r2,-50(fp)
   14160:	10800058 	cmpnei	r2,r2,1
   14164:	10000d1e 	bne	r2,zero,1419c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   14168:	e0bffc17 	ldw	r2,-16(fp)
   1416c:	1080020b 	ldhu	r2,8(r2)
   14170:	1007883a 	mov	r3,r2
   14174:	e0bff30b 	ldhu	r2,-52(fp)
   14178:	0084303a 	nor	r2,zero,r2
   1417c:	1884703a 	and	r2,r3,r2
   14180:	1007883a 	mov	r3,r2
   14184:	e0bffc17 	ldw	r2,-16(fp)
   14188:	10c0020d 	sth	r3,8(r2)
   1418c:	00000306 	br	1419c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14190:	e0bfff17 	ldw	r2,-4(fp)
   14194:	00c01c04 	movi	r3,112
   14198:	10c00005 	stb	r3,0(r2)
   1419c:	e0bff417 	ldw	r2,-48(fp)
   141a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141a4:	e0bff717 	ldw	r2,-36(fp)
   141a8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   141ac:	00005e06 	br	14328 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10c0020b 	ldhu	r3,8(r2)
   141b8:	e0bffd0b 	ldhu	r2,-12(fp)
   141bc:	1884703a 	and	r2,r3,r2
   141c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   141c4:	e0bff30b 	ldhu	r2,-52(fp)
   141c8:	10000d26 	beq	r2,zero,14200 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   141cc:	e0bff383 	ldbu	r2,-50(fp)
   141d0:	10800058 	cmpnei	r2,r2,1
   141d4:	10000d1e 	bne	r2,zero,1420c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   141d8:	e0bffc17 	ldw	r2,-16(fp)
   141dc:	1080020b 	ldhu	r2,8(r2)
   141e0:	1007883a 	mov	r3,r2
   141e4:	e0bff30b 	ldhu	r2,-52(fp)
   141e8:	0084303a 	nor	r2,zero,r2
   141ec:	1884703a 	and	r2,r3,r2
   141f0:	1007883a 	mov	r3,r2
   141f4:	e0bffc17 	ldw	r2,-16(fp)
   141f8:	10c0020d 	sth	r3,8(r2)
   141fc:	00000306 	br	1420c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14200:	e0bfff17 	ldw	r2,-4(fp)
   14204:	00c01c04 	movi	r3,112
   14208:	10c00005 	stb	r3,0(r2)
   1420c:	e0bff417 	ldw	r2,-48(fp)
   14210:	e0bff815 	stw	r2,-32(fp)
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1421c:	00004206 	br	14328 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   14220:	e0bffc17 	ldw	r2,-16(fp)
   14224:	1080020b 	ldhu	r2,8(r2)
   14228:	0084303a 	nor	r2,zero,r2
   1422c:	1007883a 	mov	r3,r2
   14230:	e0bffd0b 	ldhu	r2,-12(fp)
   14234:	1884703a 	and	r2,r3,r2
   14238:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1423c:	e0fff30b 	ldhu	r3,-52(fp)
   14240:	e0bffd0b 	ldhu	r2,-12(fp)
   14244:	18800b1e 	bne	r3,r2,14274 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14248:	e0bff383 	ldbu	r2,-50(fp)
   1424c:	10800058 	cmpnei	r2,r2,1
   14250:	10000b1e 	bne	r2,zero,14280 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   14254:	e0bffc17 	ldw	r2,-16(fp)
   14258:	10c0020b 	ldhu	r3,8(r2)
   1425c:	e0bff30b 	ldhu	r2,-52(fp)
   14260:	1884b03a 	or	r2,r3,r2
   14264:	1007883a 	mov	r3,r2
   14268:	e0bffc17 	ldw	r2,-16(fp)
   1426c:	10c0020d 	sth	r3,8(r2)
   14270:	00000306 	br	14280 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14274:	e0bfff17 	ldw	r2,-4(fp)
   14278:	00c01c04 	movi	r3,112
   1427c:	10c00005 	stb	r3,0(r2)
   14280:	e0bff417 	ldw	r2,-48(fp)
   14284:	e0bff915 	stw	r2,-28(fp)
   14288:	e0bff917 	ldw	r2,-28(fp)
   1428c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14290:	00002506 	br	14328 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   14294:	e0bffc17 	ldw	r2,-16(fp)
   14298:	1080020b 	ldhu	r2,8(r2)
   1429c:	0084303a 	nor	r2,zero,r2
   142a0:	1007883a 	mov	r3,r2
   142a4:	e0bffd0b 	ldhu	r2,-12(fp)
   142a8:	1884703a 	and	r2,r3,r2
   142ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   142b0:	e0bff30b 	ldhu	r2,-52(fp)
   142b4:	10000b26 	beq	r2,zero,142e4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   142b8:	e0bff383 	ldbu	r2,-50(fp)
   142bc:	10800058 	cmpnei	r2,r2,1
   142c0:	10000b1e 	bne	r2,zero,142f0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   142c4:	e0bffc17 	ldw	r2,-16(fp)
   142c8:	10c0020b 	ldhu	r3,8(r2)
   142cc:	e0bff30b 	ldhu	r2,-52(fp)
   142d0:	1884b03a 	or	r2,r3,r2
   142d4:	1007883a 	mov	r3,r2
   142d8:	e0bffc17 	ldw	r2,-16(fp)
   142dc:	10c0020d 	sth	r3,8(r2)
   142e0:	00000306 	br	142f0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   142e4:	e0bfff17 	ldw	r2,-4(fp)
   142e8:	00c01c04 	movi	r3,112
   142ec:	10c00005 	stb	r3,0(r2)
   142f0:	e0bff417 	ldw	r2,-48(fp)
   142f4:	e0bffa15 	stw	r2,-24(fp)
   142f8:	e0bffa17 	ldw	r2,-24(fp)
   142fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14300:	00000906 	br	14328 <OSFlagAccept+0x2f4>
   14304:	e0bff417 	ldw	r2,-48(fp)
   14308:	e0bffb15 	stw	r2,-20(fp)
   1430c:	e0bffb17 	ldw	r2,-20(fp)
   14310:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   14314:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   14318:	e0bfff17 	ldw	r2,-4(fp)
   1431c:	00c01bc4 	movi	r3,111
   14320:	10c00005 	stb	r3,0(r2)
             break;
   14324:	0001883a 	nop
    }
    return (flags_rdy);
   14328:	e0bff30b 	ldhu	r2,-52(fp)
}
   1432c:	e037883a 	mov	sp,fp
   14330:	df000017 	ldw	fp,0(sp)
   14334:	dec00104 	addi	sp,sp,4
   14338:	f800283a 	ret

0001433c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1433c:	defff804 	addi	sp,sp,-32
   14340:	df000715 	stw	fp,28(sp)
   14344:	df000704 	addi	fp,sp,28
   14348:	2005883a 	mov	r2,r4
   1434c:	e17fff15 	stw	r5,-4(fp)
   14350:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   14354:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   14358:	e0bfff17 	ldw	r2,-4(fp)
   1435c:	1000021e 	bne	r2,zero,14368 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   14360:	0005883a 	mov	r2,zero
   14364:	00003b06 	br	14454 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   14368:	008000b4 	movhi	r2,2
   1436c:	108e3e04 	addi	r2,r2,14584
   14370:	10800003 	ldbu	r2,0(r2)
   14374:	10803fcc 	andi	r2,r2,255
   14378:	10000526 	beq	r2,zero,14390 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1437c:	e0bfff17 	ldw	r2,-4(fp)
   14380:	00c00404 	movi	r3,16
   14384:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   14388:	0005883a 	mov	r2,zero
   1438c:	00003106 	br	14454 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14390:	0005303a 	rdctl	r2,status
   14394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14398:	e0fffb17 	ldw	r3,-20(fp)
   1439c:	00bfff84 	movi	r2,-2
   143a0:	1884703a 	and	r2,r3,r2
   143a4:	1001703a 	wrctl	status,r2
  
  return context;
   143a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   143ac:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   143b0:	008000b4 	movhi	r2,2
   143b4:	108e4104 	addi	r2,r2,14596
   143b8:	10800017 	ldw	r2,0(r2)
   143bc:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   143c0:	e0bffa17 	ldw	r2,-24(fp)
   143c4:	10001b26 	beq	r2,zero,14434 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   143c8:	008000b4 	movhi	r2,2
   143cc:	108e4104 	addi	r2,r2,14596
   143d0:	10800017 	ldw	r2,0(r2)
   143d4:	10c00117 	ldw	r3,4(r2)
   143d8:	008000b4 	movhi	r2,2
   143dc:	108e4104 	addi	r2,r2,14596
   143e0:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   143e4:	e0bffa17 	ldw	r2,-24(fp)
   143e8:	00c00144 	movi	r3,5
   143ec:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   143f0:	e0bffa17 	ldw	r2,-24(fp)
   143f4:	e0fffe0b 	ldhu	r3,-8(fp)
   143f8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   143fc:	e0bffa17 	ldw	r2,-24(fp)
   14400:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   14404:	e0bffa17 	ldw	r2,-24(fp)
   14408:	00c00fc4 	movi	r3,63
   1440c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14410:	e0bffa17 	ldw	r2,-24(fp)
   14414:	100002c5 	stb	zero,11(r2)
   14418:	e0bff917 	ldw	r2,-28(fp)
   1441c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   14428:	e0bfff17 	ldw	r2,-4(fp)
   1442c:	10000005 	stb	zero,0(r2)
   14430:	00000706 	br	14450 <OSFlagCreate+0x114>
   14434:	e0bff917 	ldw	r2,-28(fp)
   14438:	e0bffd15 	stw	r2,-12(fp)
   1443c:	e0bffd17 	ldw	r2,-12(fp)
   14440:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   14444:	e0bfff17 	ldw	r2,-4(fp)
   14448:	00c01c84 	movi	r3,114
   1444c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   14450:	e0bffa17 	ldw	r2,-24(fp)
}
   14454:	e037883a 	mov	sp,fp
   14458:	df000017 	ldw	fp,0(sp)
   1445c:	dec00104 	addi	sp,sp,4
   14460:	f800283a 	ret

00014464 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   14464:	defff204 	addi	sp,sp,-56
   14468:	dfc00d15 	stw	ra,52(sp)
   1446c:	df000c15 	stw	fp,48(sp)
   14470:	df000c04 	addi	fp,sp,48
   14474:	e13ffd15 	stw	r4,-12(fp)
   14478:	2805883a 	mov	r2,r5
   1447c:	e1bfff15 	stw	r6,-4(fp)
   14480:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14484:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14488:	e0bfff17 	ldw	r2,-4(fp)
   1448c:	1000021e 	bne	r2,zero,14498 <OSFlagDel+0x34>
        return (pgrp);
   14490:	e0bffd17 	ldw	r2,-12(fp)
   14494:	00008a06 	br	146c0 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   14498:	e0bffd17 	ldw	r2,-12(fp)
   1449c:	1000051e 	bne	r2,zero,144b4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   144a0:	e0bfff17 	ldw	r2,-4(fp)
   144a4:	00c01b84 	movi	r3,110
   144a8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   144ac:	e0bffd17 	ldw	r2,-12(fp)
   144b0:	00008306 	br	146c0 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   144b4:	008000b4 	movhi	r2,2
   144b8:	108e3e04 	addi	r2,r2,14584
   144bc:	10800003 	ldbu	r2,0(r2)
   144c0:	10803fcc 	andi	r2,r2,255
   144c4:	10000526 	beq	r2,zero,144dc <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   144c8:	e0bfff17 	ldw	r2,-4(fp)
   144cc:	00c003c4 	movi	r3,15
   144d0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   144d4:	e0bffd17 	ldw	r2,-12(fp)
   144d8:	00007906 	br	146c0 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	10800003 	ldbu	r2,0(r2)
   144e4:	10803fcc 	andi	r2,r2,255
   144e8:	10800160 	cmpeqi	r2,r2,5
   144ec:	1000051e 	bne	r2,zero,14504 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   144f0:	e0bfff17 	ldw	r2,-4(fp)
   144f4:	00c00044 	movi	r3,1
   144f8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   144fc:	e0bffd17 	ldw	r2,-12(fp)
   14500:	00006f06 	br	146c0 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14504:	0005303a 	rdctl	r2,status
   14508:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1450c:	e0fff817 	ldw	r3,-32(fp)
   14510:	00bfff84 	movi	r2,-2
   14514:	1884703a 	and	r2,r3,r2
   14518:	1001703a 	wrctl	status,r2
  
  return context;
   1451c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14520:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   14524:	e0bffd17 	ldw	r2,-12(fp)
   14528:	10800117 	ldw	r2,4(r2)
   1452c:	10000326 	beq	r2,zero,1453c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14530:	00800044 	movi	r2,1
   14534:	e0bff405 	stb	r2,-48(fp)
   14538:	00000106 	br	14540 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1453c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   14540:	e0bffe03 	ldbu	r2,-8(fp)
   14544:	10000326 	beq	r2,zero,14554 <OSFlagDel+0xf0>
   14548:	10800060 	cmpeqi	r2,r2,1
   1454c:	1000271e 	bne	r2,zero,145ec <OSFlagDel+0x188>
   14550:	00005006 	br	14694 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   14554:	e0bff403 	ldbu	r2,-48(fp)
   14558:	10001a1e 	bne	r2,zero,145c4 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1455c:	e0bffd17 	ldw	r2,-12(fp)
   14560:	00c00fc4 	movi	r3,63
   14564:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14568:	e0bffd17 	ldw	r2,-12(fp)
   1456c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14570:	e0bffd17 	ldw	r2,-12(fp)
   14574:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   14578:	008000b4 	movhi	r2,2
   1457c:	108e4104 	addi	r2,r2,14596
   14580:	10c00017 	ldw	r3,0(r2)
   14584:	e0bffd17 	ldw	r2,-12(fp)
   14588:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1458c:	e0bffd17 	ldw	r2,-12(fp)
   14590:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   14594:	008000b4 	movhi	r2,2
   14598:	108e4104 	addi	r2,r2,14596
   1459c:	e0fffd17 	ldw	r3,-12(fp)
   145a0:	10c00015 	stw	r3,0(r2)
   145a4:	e0bff717 	ldw	r2,-36(fp)
   145a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145ac:	e0bff917 	ldw	r2,-28(fp)
   145b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   145b4:	e0bfff17 	ldw	r2,-4(fp)
   145b8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   145bc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   145c0:	00003e06 	br	146bc <OSFlagDel+0x258>
   145c4:	e0bff717 	ldw	r2,-36(fp)
   145c8:	e0bffa15 	stw	r2,-24(fp)
   145cc:	e0bffa17 	ldw	r2,-24(fp)
   145d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   145d4:	e0bfff17 	ldw	r2,-4(fp)
   145d8:	00c01244 	movi	r3,73
   145dc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   145e8:	00003406 	br	146bc <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   145ec:	e0bffd17 	ldw	r2,-12(fp)
   145f0:	10800117 	ldw	r2,4(r2)
   145f4:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   145f8:	00000606 	br	14614 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   145fc:	e13ff517 	ldw	r4,-44(fp)
   14600:	000b883a 	mov	r5,zero
   14604:	00156a00 	call	156a0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   14608:	e0bff517 	ldw	r2,-44(fp)
   1460c:	10800017 	ldw	r2,0(r2)
   14610:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   14614:	e0bff517 	ldw	r2,-44(fp)
   14618:	103ff81e 	bne	r2,zero,145fc <__alt_mem_Flash_flash_data+0xf40145fc>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1461c:	e0bffd17 	ldw	r2,-12(fp)
   14620:	00c00fc4 	movi	r3,63
   14624:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14628:	e0bffd17 	ldw	r2,-12(fp)
   1462c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14630:	e0bffd17 	ldw	r2,-12(fp)
   14634:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   14638:	008000b4 	movhi	r2,2
   1463c:	108e4104 	addi	r2,r2,14596
   14640:	10c00017 	ldw	r3,0(r2)
   14644:	e0bffd17 	ldw	r2,-12(fp)
   14648:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1464c:	e0bffd17 	ldw	r2,-12(fp)
   14650:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   14654:	008000b4 	movhi	r2,2
   14658:	108e4104 	addi	r2,r2,14596
   1465c:	e0fffd17 	ldw	r3,-12(fp)
   14660:	10c00015 	stw	r3,0(r2)
   14664:	e0bff717 	ldw	r2,-36(fp)
   14668:	e0bffb15 	stw	r2,-20(fp)
   1466c:	e0bffb17 	ldw	r2,-20(fp)
   14670:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14674:	e0bff403 	ldbu	r2,-48(fp)
   14678:	10800058 	cmpnei	r2,r2,1
   1467c:	1000011e 	bne	r2,zero,14684 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14680:	00137d00 	call	137d0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   14684:	e0bfff17 	ldw	r2,-4(fp)
   14688:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1468c:	e03ff615 	stw	zero,-40(fp)
             break;
   14690:	00000a06 	br	146bc <OSFlagDel+0x258>
   14694:	e0bff717 	ldw	r2,-36(fp)
   14698:	e0bffc15 	stw	r2,-16(fp)
   1469c:	e0bffc17 	ldw	r2,-16(fp)
   146a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   146a4:	e0bfff17 	ldw	r2,-4(fp)
   146a8:	00c001c4 	movi	r3,7
   146ac:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   146b0:	e0bffd17 	ldw	r2,-12(fp)
   146b4:	e0bff615 	stw	r2,-40(fp)
             break;
   146b8:	0001883a 	nop
    }
    return (pgrp_return);
   146bc:	e0bff617 	ldw	r2,-40(fp)
}
   146c0:	e037883a 	mov	sp,fp
   146c4:	dfc00117 	ldw	ra,4(sp)
   146c8:	df000017 	ldw	fp,0(sp)
   146cc:	dec00204 	addi	sp,sp,8
   146d0:	f800283a 	ret

000146d4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   146d4:	defff604 	addi	sp,sp,-40
   146d8:	dfc00915 	stw	ra,36(sp)
   146dc:	df000815 	stw	fp,32(sp)
   146e0:	df000804 	addi	fp,sp,32
   146e4:	e13ffd15 	stw	r4,-12(fp)
   146e8:	e17ffe15 	stw	r5,-8(fp)
   146ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   146f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   146f4:	e0bfff17 	ldw	r2,-4(fp)
   146f8:	1000021e 	bne	r2,zero,14704 <OSFlagNameGet+0x30>
        return (0);
   146fc:	0005883a 	mov	r2,zero
   14700:	00003b06 	br	147f0 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   14704:	e0bffd17 	ldw	r2,-12(fp)
   14708:	1000051e 	bne	r2,zero,14720 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1470c:	e0bfff17 	ldw	r2,-4(fp)
   14710:	00c01b84 	movi	r3,110
   14714:	10c00005 	stb	r3,0(r2)
        return (0);
   14718:	0005883a 	mov	r2,zero
   1471c:	00003406 	br	147f0 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14720:	e0bffe17 	ldw	r2,-8(fp)
   14724:	1000051e 	bne	r2,zero,1473c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14728:	e0bfff17 	ldw	r2,-4(fp)
   1472c:	00c00304 	movi	r3,12
   14730:	10c00005 	stb	r3,0(r2)
        return (0);
   14734:	0005883a 	mov	r2,zero
   14738:	00002d06 	br	147f0 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1473c:	008000b4 	movhi	r2,2
   14740:	108e3e04 	addi	r2,r2,14584
   14744:	10800003 	ldbu	r2,0(r2)
   14748:	10803fcc 	andi	r2,r2,255
   1474c:	10000526 	beq	r2,zero,14764 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   14750:	e0bfff17 	ldw	r2,-4(fp)
   14754:	00c00444 	movi	r3,17
   14758:	10c00005 	stb	r3,0(r2)
        return (0);
   1475c:	0005883a 	mov	r2,zero
   14760:	00002306 	br	147f0 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14764:	0005303a 	rdctl	r2,status
   14768:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1476c:	e0fffa17 	ldw	r3,-24(fp)
   14770:	00bfff84 	movi	r2,-2
   14774:	1884703a 	and	r2,r3,r2
   14778:	1001703a 	wrctl	status,r2
  
  return context;
   1477c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14780:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   14784:	e0bffd17 	ldw	r2,-12(fp)
   14788:	10800003 	ldbu	r2,0(r2)
   1478c:	10803fcc 	andi	r2,r2,255
   14790:	10800160 	cmpeqi	r2,r2,5
   14794:	1000091e 	bne	r2,zero,147bc <OSFlagNameGet+0xe8>
   14798:	e0bff817 	ldw	r2,-32(fp)
   1479c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147a0:	e0bffb17 	ldw	r2,-20(fp)
   147a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	00c00044 	movi	r3,1
   147b0:	10c00005 	stb	r3,0(r2)
        return (0);
   147b4:	0005883a 	mov	r2,zero
   147b8:	00000d06 	br	147f0 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   147bc:	e0bffd17 	ldw	r2,-12(fp)
   147c0:	10800284 	addi	r2,r2,10
   147c4:	e13ffe17 	ldw	r4,-8(fp)
   147c8:	100b883a 	mov	r5,r2
   147cc:	001390c0 	call	1390c <OS_StrCopy>
   147d0:	e0bff905 	stb	r2,-28(fp)
   147d4:	e0bff817 	ldw	r2,-32(fp)
   147d8:	e0bffc15 	stw	r2,-16(fp)
   147dc:	e0bffc17 	ldw	r2,-16(fp)
   147e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   147e4:	e0bfff17 	ldw	r2,-4(fp)
   147e8:	10000005 	stb	zero,0(r2)
    return (len);
   147ec:	e0bff903 	ldbu	r2,-28(fp)
}
   147f0:	e037883a 	mov	sp,fp
   147f4:	dfc00117 	ldw	ra,4(sp)
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00204 	addi	sp,sp,8
   14800:	f800283a 	ret

00014804 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   14804:	defff504 	addi	sp,sp,-44
   14808:	dfc00a15 	stw	ra,40(sp)
   1480c:	df000915 	stw	fp,36(sp)
   14810:	df000904 	addi	fp,sp,36
   14814:	e13ffd15 	stw	r4,-12(fp)
   14818:	e17ffe15 	stw	r5,-8(fp)
   1481c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14820:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14824:	e0bfff17 	ldw	r2,-4(fp)
   14828:	1000011e 	bne	r2,zero,14830 <OSFlagNameSet+0x2c>
        return;
   1482c:	00004406 	br	14940 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   14830:	e0bffd17 	ldw	r2,-12(fp)
   14834:	1000041e 	bne	r2,zero,14848 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14838:	e0bfff17 	ldw	r2,-4(fp)
   1483c:	00c01b84 	movi	r3,110
   14840:	10c00005 	stb	r3,0(r2)
        return;
   14844:	00003e06 	br	14940 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14848:	e0bffe17 	ldw	r2,-8(fp)
   1484c:	1000041e 	bne	r2,zero,14860 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14850:	e0bfff17 	ldw	r2,-4(fp)
   14854:	00c00304 	movi	r3,12
   14858:	10c00005 	stb	r3,0(r2)
        return;
   1485c:	00003806 	br	14940 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14860:	008000b4 	movhi	r2,2
   14864:	108e3e04 	addi	r2,r2,14584
   14868:	10800003 	ldbu	r2,0(r2)
   1486c:	10803fcc 	andi	r2,r2,255
   14870:	10000426 	beq	r2,zero,14884 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14874:	e0bfff17 	ldw	r2,-4(fp)
   14878:	00c00484 	movi	r3,18
   1487c:	10c00005 	stb	r3,0(r2)
        return;
   14880:	00002f06 	br	14940 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14884:	0005303a 	rdctl	r2,status
   14888:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1488c:	e0fff917 	ldw	r3,-28(fp)
   14890:	00bfff84 	movi	r2,-2
   14894:	1884703a 	and	r2,r3,r2
   14898:	1001703a 	wrctl	status,r2
  
  return context;
   1489c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   148a0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   148a4:	e0bffd17 	ldw	r2,-12(fp)
   148a8:	10800003 	ldbu	r2,0(r2)
   148ac:	10803fcc 	andi	r2,r2,255
   148b0:	10800160 	cmpeqi	r2,r2,5
   148b4:	1000081e 	bne	r2,zero,148d8 <OSFlagNameSet+0xd4>
   148b8:	e0bff717 	ldw	r2,-36(fp)
   148bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148c0:	e0bffa17 	ldw	r2,-24(fp)
   148c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   148c8:	e0bfff17 	ldw	r2,-4(fp)
   148cc:	00c00044 	movi	r3,1
   148d0:	10c00005 	stb	r3,0(r2)
        return;
   148d4:	00001a06 	br	14940 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   148d8:	e13ffe17 	ldw	r4,-8(fp)
   148dc:	00139800 	call	13980 <OS_StrLen>
   148e0:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   148e4:	e0bff803 	ldbu	r2,-32(fp)
   148e8:	10800830 	cmpltui	r2,r2,32
   148ec:	1000081e 	bne	r2,zero,14910 <OSFlagNameSet+0x10c>
   148f0:	e0bff717 	ldw	r2,-36(fp)
   148f4:	e0bffb15 	stw	r2,-20(fp)
   148f8:	e0bffb17 	ldw	r2,-20(fp)
   148fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   14900:	e0bfff17 	ldw	r2,-4(fp)
   14904:	00c01cc4 	movi	r3,115
   14908:	10c00005 	stb	r3,0(r2)
        return;
   1490c:	00000c06 	br	14940 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   14910:	e0bffd17 	ldw	r2,-12(fp)
   14914:	10800284 	addi	r2,r2,10
   14918:	1009883a 	mov	r4,r2
   1491c:	e17ffe17 	ldw	r5,-8(fp)
   14920:	001390c0 	call	1390c <OS_StrCopy>
   14924:	e0bff717 	ldw	r2,-36(fp)
   14928:	e0bffc15 	stw	r2,-16(fp)
   1492c:	e0bffc17 	ldw	r2,-16(fp)
   14930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14934:	e0bfff17 	ldw	r2,-4(fp)
   14938:	10000005 	stb	zero,0(r2)
    return;
   1493c:	0001883a 	nop
}
   14940:	e037883a 	mov	sp,fp
   14944:	dfc00117 	ldw	ra,4(sp)
   14948:	df000017 	ldw	fp,0(sp)
   1494c:	dec00204 	addi	sp,sp,8
   14950:	f800283a 	ret

00014954 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   14954:	deffe204 	addi	sp,sp,-120
   14958:	dfc01d15 	stw	ra,116(sp)
   1495c:	df001c15 	stw	fp,112(sp)
   14960:	df001c04 	addi	fp,sp,112
   14964:	e13ffc15 	stw	r4,-16(fp)
   14968:	2809883a 	mov	r4,r5
   1496c:	3007883a 	mov	r3,r6
   14970:	3805883a 	mov	r2,r7
   14974:	e13ffd0d 	sth	r4,-12(fp)
   14978:	e0fffe05 	stb	r3,-8(fp)
   1497c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14980:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14984:	e0800217 	ldw	r2,8(fp)
   14988:	1000021e 	bne	r2,zero,14994 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1498c:	0005883a 	mov	r2,zero
   14990:	00016706 	br	14f30 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   14994:	e0bffc17 	ldw	r2,-16(fp)
   14998:	1000051e 	bne	r2,zero,149b0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1499c:	e0800217 	ldw	r2,8(fp)
   149a0:	00c01b84 	movi	r3,110
   149a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   149a8:	0005883a 	mov	r2,zero
   149ac:	00016006 	br	14f30 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   149b0:	008000b4 	movhi	r2,2
   149b4:	108e3e04 	addi	r2,r2,14584
   149b8:	10800003 	ldbu	r2,0(r2)
   149bc:	10803fcc 	andi	r2,r2,255
   149c0:	10000526 	beq	r2,zero,149d8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   149c4:	e0800217 	ldw	r2,8(fp)
   149c8:	00c00084 	movi	r3,2
   149cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   149d0:	0005883a 	mov	r2,zero
   149d4:	00015606 	br	14f30 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   149d8:	008000b4 	movhi	r2,2
   149dc:	108e3004 	addi	r2,r2,14528
   149e0:	10800003 	ldbu	r2,0(r2)
   149e4:	10803fcc 	andi	r2,r2,255
   149e8:	10000526 	beq	r2,zero,14a00 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   149ec:	e0800217 	ldw	r2,8(fp)
   149f0:	00c00344 	movi	r3,13
   149f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   149f8:	0005883a 	mov	r2,zero
   149fc:	00014c06 	br	14f30 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   14a00:	e0bffc17 	ldw	r2,-16(fp)
   14a04:	10800003 	ldbu	r2,0(r2)
   14a08:	10803fcc 	andi	r2,r2,255
   14a0c:	10800160 	cmpeqi	r2,r2,5
   14a10:	1000051e 	bne	r2,zero,14a28 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   14a14:	e0800217 	ldw	r2,8(fp)
   14a18:	00c00044 	movi	r3,1
   14a1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14a20:	0005883a 	mov	r2,zero
   14a24:	00014206 	br	14f30 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   14a28:	e0fffe03 	ldbu	r3,-8(fp)
   14a2c:	00bfe004 	movi	r2,-128
   14a30:	1884703a 	and	r2,r3,r2
   14a34:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   14a38:	e0bfe703 	ldbu	r2,-100(fp)
   14a3c:	10000626 	beq	r2,zero,14a58 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   14a40:	e0bffe03 	ldbu	r2,-8(fp)
   14a44:	10801fcc 	andi	r2,r2,127
   14a48:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   14a4c:	00800044 	movi	r2,1
   14a50:	e0bfe505 	stb	r2,-108(fp)
   14a54:	00000106 	br	14a5c <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   14a58:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a5c:	0005303a 	rdctl	r2,status
   14a60:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a64:	e0ffe917 	ldw	r3,-92(fp)
   14a68:	00bfff84 	movi	r2,-2
   14a6c:	1884703a 	and	r2,r3,r2
   14a70:	1001703a 	wrctl	status,r2
  
  return context;
   14a74:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   14a78:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   14a7c:	e0bffe03 	ldbu	r2,-8(fp)
   14a80:	10c00060 	cmpeqi	r3,r2,1
   14a84:	1800921e 	bne	r3,zero,14cd0 <OSFlagPend+0x37c>
   14a88:	10c00088 	cmpgei	r3,r2,2
   14a8c:	1800021e 	bne	r3,zero,14a98 <OSFlagPend+0x144>
   14a90:	10006126 	beq	r2,zero,14c18 <OSFlagPend+0x2c4>
   14a94:	0000bb06 	br	14d84 <OSFlagPend+0x430>
   14a98:	10c000a0 	cmpeqi	r3,r2,2
   14a9c:	1800031e 	bne	r3,zero,14aac <OSFlagPend+0x158>
   14aa0:	108000e0 	cmpeqi	r2,r2,3
   14aa4:	10002f1e 	bne	r2,zero,14b64 <OSFlagPend+0x210>
   14aa8:	0000b606 	br	14d84 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   14aac:	e0bffc17 	ldw	r2,-16(fp)
   14ab0:	10c0020b 	ldhu	r3,8(r2)
   14ab4:	e0bffd0b 	ldhu	r2,-12(fp)
   14ab8:	1884703a 	and	r2,r3,r2
   14abc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14ac0:	e0ffe78b 	ldhu	r3,-98(fp)
   14ac4:	e0bffd0b 	ldhu	r2,-12(fp)
   14ac8:	1880191e 	bne	r3,r2,14b30 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14acc:	e0bfe503 	ldbu	r2,-108(fp)
   14ad0:	10800058 	cmpnei	r2,r2,1
   14ad4:	1000091e 	bne	r2,zero,14afc <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   14ad8:	e0bffc17 	ldw	r2,-16(fp)
   14adc:	1080020b 	ldhu	r2,8(r2)
   14ae0:	1007883a 	mov	r3,r2
   14ae4:	e0bfe78b 	ldhu	r2,-98(fp)
   14ae8:	0084303a 	nor	r2,zero,r2
   14aec:	1884703a 	and	r2,r3,r2
   14af0:	1007883a 	mov	r3,r2
   14af4:	e0bffc17 	ldw	r2,-16(fp)
   14af8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14afc:	008000b4 	movhi	r2,2
   14b00:	108e3f04 	addi	r2,r2,14588
   14b04:	10800017 	ldw	r2,0(r2)
   14b08:	e0ffe78b 	ldhu	r3,-98(fp)
   14b0c:	10c00b0d 	sth	r3,44(r2)
   14b10:	e0bfe617 	ldw	r2,-104(fp)
   14b14:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b18:	e0bfea17 	ldw	r2,-88(fp)
   14b1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14b20:	e0800217 	ldw	r2,8(fp)
   14b24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14b28:	e0bfe78b 	ldhu	r2,-98(fp)
   14b2c:	00010006 	br	14f30 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14b30:	e1bffd0b 	ldhu	r6,-12(fp)
   14b34:	e0fffe03 	ldbu	r3,-8(fp)
   14b38:	e0bfff0b 	ldhu	r2,-4(fp)
   14b3c:	e17ff704 	addi	r5,fp,-36
   14b40:	d8800015 	stw	r2,0(sp)
   14b44:	e13ffc17 	ldw	r4,-16(fp)
   14b48:	180f883a 	mov	r7,r3
   14b4c:	00153f80 	call	153f8 <OS_FlagBlock>
   14b50:	e0bfe617 	ldw	r2,-104(fp)
   14b54:	e0bfeb15 	stw	r2,-84(fp)
   14b58:	e0bfeb17 	ldw	r2,-84(fp)
   14b5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14b60:	00009206 	br	14dac <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   14b64:	e0bffc17 	ldw	r2,-16(fp)
   14b68:	10c0020b 	ldhu	r3,8(r2)
   14b6c:	e0bffd0b 	ldhu	r2,-12(fp)
   14b70:	1884703a 	and	r2,r3,r2
   14b74:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   14b78:	e0bfe78b 	ldhu	r2,-98(fp)
   14b7c:	10001926 	beq	r2,zero,14be4 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14b80:	e0bfe503 	ldbu	r2,-108(fp)
   14b84:	10800058 	cmpnei	r2,r2,1
   14b88:	1000091e 	bne	r2,zero,14bb0 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   14b8c:	e0bffc17 	ldw	r2,-16(fp)
   14b90:	1080020b 	ldhu	r2,8(r2)
   14b94:	1007883a 	mov	r3,r2
   14b98:	e0bfe78b 	ldhu	r2,-98(fp)
   14b9c:	0084303a 	nor	r2,zero,r2
   14ba0:	1884703a 	and	r2,r3,r2
   14ba4:	1007883a 	mov	r3,r2
   14ba8:	e0bffc17 	ldw	r2,-16(fp)
   14bac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	108e3f04 	addi	r2,r2,14588
   14bb8:	10800017 	ldw	r2,0(r2)
   14bbc:	e0ffe78b 	ldhu	r3,-98(fp)
   14bc0:	10c00b0d 	sth	r3,44(r2)
   14bc4:	e0bfe617 	ldw	r2,-104(fp)
   14bc8:	e0bfec15 	stw	r2,-80(fp)
   14bcc:	e0bfec17 	ldw	r2,-80(fp)
   14bd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14bd4:	e0800217 	ldw	r2,8(fp)
   14bd8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14bdc:	e0bfe78b 	ldhu	r2,-98(fp)
   14be0:	0000d306 	br	14f30 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14be4:	e1bffd0b 	ldhu	r6,-12(fp)
   14be8:	e0fffe03 	ldbu	r3,-8(fp)
   14bec:	e0bfff0b 	ldhu	r2,-4(fp)
   14bf0:	e17ff704 	addi	r5,fp,-36
   14bf4:	d8800015 	stw	r2,0(sp)
   14bf8:	e13ffc17 	ldw	r4,-16(fp)
   14bfc:	180f883a 	mov	r7,r3
   14c00:	00153f80 	call	153f8 <OS_FlagBlock>
   14c04:	e0bfe617 	ldw	r2,-104(fp)
   14c08:	e0bfed15 	stw	r2,-76(fp)
   14c0c:	e0bfed17 	ldw	r2,-76(fp)
   14c10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14c14:	00006506 	br	14dac <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   14c18:	e0bffc17 	ldw	r2,-16(fp)
   14c1c:	1080020b 	ldhu	r2,8(r2)
   14c20:	0084303a 	nor	r2,zero,r2
   14c24:	1007883a 	mov	r3,r2
   14c28:	e0bffd0b 	ldhu	r2,-12(fp)
   14c2c:	1884703a 	and	r2,r3,r2
   14c30:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14c34:	e0ffe78b 	ldhu	r3,-98(fp)
   14c38:	e0bffd0b 	ldhu	r2,-12(fp)
   14c3c:	1880171e 	bne	r3,r2,14c9c <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14c40:	e0bfe503 	ldbu	r2,-108(fp)
   14c44:	10800058 	cmpnei	r2,r2,1
   14c48:	1000071e 	bne	r2,zero,14c68 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   14c4c:	e0bffc17 	ldw	r2,-16(fp)
   14c50:	10c0020b 	ldhu	r3,8(r2)
   14c54:	e0bfe78b 	ldhu	r2,-98(fp)
   14c58:	1884b03a 	or	r2,r3,r2
   14c5c:	1007883a 	mov	r3,r2
   14c60:	e0bffc17 	ldw	r2,-16(fp)
   14c64:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14c68:	008000b4 	movhi	r2,2
   14c6c:	108e3f04 	addi	r2,r2,14588
   14c70:	10800017 	ldw	r2,0(r2)
   14c74:	e0ffe78b 	ldhu	r3,-98(fp)
   14c78:	10c00b0d 	sth	r3,44(r2)
   14c7c:	e0bfe617 	ldw	r2,-104(fp)
   14c80:	e0bfee15 	stw	r2,-72(fp)
   14c84:	e0bfee17 	ldw	r2,-72(fp)
   14c88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14c8c:	e0800217 	ldw	r2,8(fp)
   14c90:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14c94:	e0bfe78b 	ldhu	r2,-98(fp)
   14c98:	0000a506 	br	14f30 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14c9c:	e1bffd0b 	ldhu	r6,-12(fp)
   14ca0:	e0fffe03 	ldbu	r3,-8(fp)
   14ca4:	e0bfff0b 	ldhu	r2,-4(fp)
   14ca8:	e17ff704 	addi	r5,fp,-36
   14cac:	d8800015 	stw	r2,0(sp)
   14cb0:	e13ffc17 	ldw	r4,-16(fp)
   14cb4:	180f883a 	mov	r7,r3
   14cb8:	00153f80 	call	153f8 <OS_FlagBlock>
   14cbc:	e0bfe617 	ldw	r2,-104(fp)
   14cc0:	e0bfef15 	stw	r2,-68(fp)
   14cc4:	e0bfef17 	ldw	r2,-68(fp)
   14cc8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14ccc:	00003706 	br	14dac <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   14cd0:	e0bffc17 	ldw	r2,-16(fp)
   14cd4:	1080020b 	ldhu	r2,8(r2)
   14cd8:	0084303a 	nor	r2,zero,r2
   14cdc:	1007883a 	mov	r3,r2
   14ce0:	e0bffd0b 	ldhu	r2,-12(fp)
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   14cec:	e0bfe78b 	ldhu	r2,-98(fp)
   14cf0:	10001726 	beq	r2,zero,14d50 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14cf4:	e0bfe503 	ldbu	r2,-108(fp)
   14cf8:	10800058 	cmpnei	r2,r2,1
   14cfc:	1000071e 	bne	r2,zero,14d1c <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	10c0020b 	ldhu	r3,8(r2)
   14d08:	e0bfe78b 	ldhu	r2,-98(fp)
   14d0c:	1884b03a 	or	r2,r3,r2
   14d10:	1007883a 	mov	r3,r2
   14d14:	e0bffc17 	ldw	r2,-16(fp)
   14d18:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14d1c:	008000b4 	movhi	r2,2
   14d20:	108e3f04 	addi	r2,r2,14588
   14d24:	10800017 	ldw	r2,0(r2)
   14d28:	e0ffe78b 	ldhu	r3,-98(fp)
   14d2c:	10c00b0d 	sth	r3,44(r2)
   14d30:	e0bfe617 	ldw	r2,-104(fp)
   14d34:	e0bff015 	stw	r2,-64(fp)
   14d38:	e0bff017 	ldw	r2,-64(fp)
   14d3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14d40:	e0800217 	ldw	r2,8(fp)
   14d44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14d48:	e0bfe78b 	ldhu	r2,-98(fp)
   14d4c:	00007806 	br	14f30 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14d50:	e1bffd0b 	ldhu	r6,-12(fp)
   14d54:	e0fffe03 	ldbu	r3,-8(fp)
   14d58:	e0bfff0b 	ldhu	r2,-4(fp)
   14d5c:	e17ff704 	addi	r5,fp,-36
   14d60:	d8800015 	stw	r2,0(sp)
   14d64:	e13ffc17 	ldw	r4,-16(fp)
   14d68:	180f883a 	mov	r7,r3
   14d6c:	00153f80 	call	153f8 <OS_FlagBlock>
   14d70:	e0bfe617 	ldw	r2,-104(fp)
   14d74:	e0bff115 	stw	r2,-60(fp)
   14d78:	e0bff117 	ldw	r2,-60(fp)
   14d7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14d80:	00000a06 	br	14dac <OSFlagPend+0x458>
   14d84:	e0bfe617 	ldw	r2,-104(fp)
   14d88:	e0bff215 	stw	r2,-56(fp)
   14d8c:	e0bff217 	ldw	r2,-56(fp)
   14d90:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   14d94:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   14d98:	e0800217 	ldw	r2,8(fp)
   14d9c:	00c01bc4 	movi	r3,111
   14da0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   14da4:	e0bfe78b 	ldhu	r2,-98(fp)
   14da8:	00006106 	br	14f30 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   14dac:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14db0:	0005303a 	rdctl	r2,status
   14db4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14db8:	e0fff317 	ldw	r3,-52(fp)
   14dbc:	00bfff84 	movi	r2,-2
   14dc0:	1884703a 	and	r2,r3,r2
   14dc4:	1001703a 	wrctl	status,r2
  
  return context;
   14dc8:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   14dcc:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   14dd0:	008000b4 	movhi	r2,2
   14dd4:	108e3f04 	addi	r2,r2,14588
   14dd8:	10800017 	ldw	r2,0(r2)
   14ddc:	10800c43 	ldbu	r2,49(r2)
   14de0:	10803fcc 	andi	r2,r2,255
   14de4:	10002226 	beq	r2,zero,14e70 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   14de8:	008000b4 	movhi	r2,2
   14dec:	108e3f04 	addi	r2,r2,14588
   14df0:	10800017 	ldw	r2,0(r2)
   14df4:	10800c43 	ldbu	r2,49(r2)
   14df8:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14dfc:	008000b4 	movhi	r2,2
   14e00:	108e3f04 	addi	r2,r2,14588
   14e04:	10800017 	ldw	r2,0(r2)
   14e08:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   14e0c:	e0bff704 	addi	r2,fp,-36
   14e10:	1009883a 	mov	r4,r2
   14e14:	00157b00 	call	157b0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   14e18:	008000b4 	movhi	r2,2
   14e1c:	108e3f04 	addi	r2,r2,14588
   14e20:	10800017 	ldw	r2,0(r2)
   14e24:	10000c05 	stb	zero,48(r2)
   14e28:	e0bfe617 	ldw	r2,-104(fp)
   14e2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e30:	e0bff417 	ldw	r2,-48(fp)
   14e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   14e38:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   14e3c:	e0bfe803 	ldbu	r2,-96(fp)
   14e40:	108000a0 	cmpeqi	r2,r2,2
   14e44:	10000426 	beq	r2,zero,14e58 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   14e48:	e0800217 	ldw	r2,8(fp)
   14e4c:	00c00384 	movi	r3,14
   14e50:	10c00005 	stb	r3,0(r2)
                 break;
   14e54:	00000406 	br	14e68 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   14e58:	e0800217 	ldw	r2,8(fp)
   14e5c:	00c00284 	movi	r3,10
   14e60:	10c00005 	stb	r3,0(r2)
                 break;
   14e64:	0001883a 	nop
        }
        return (flags_rdy);
   14e68:	e0bfe78b 	ldhu	r2,-98(fp)
   14e6c:	00003006 	br	14f30 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   14e70:	008000b4 	movhi	r2,2
   14e74:	108e3f04 	addi	r2,r2,14588
   14e78:	10800017 	ldw	r2,0(r2)
   14e7c:	10800b0b 	ldhu	r2,44(r2)
   14e80:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   14e84:	e0bfe503 	ldbu	r2,-108(fp)
   14e88:	10800058 	cmpnei	r2,r2,1
   14e8c:	1000211e 	bne	r2,zero,14f14 <OSFlagPend+0x5c0>
        switch (wait_type) {
   14e90:	e0bffe03 	ldbu	r2,-8(fp)
   14e94:	10001616 	blt	r2,zero,14ef0 <OSFlagPend+0x59c>
   14e98:	10c00090 	cmplti	r3,r2,2
   14e9c:	18000c1e 	bne	r3,zero,14ed0 <OSFlagPend+0x57c>
   14ea0:	10800108 	cmpgei	r2,r2,4
   14ea4:	1000121e 	bne	r2,zero,14ef0 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   14ea8:	e0bffc17 	ldw	r2,-16(fp)
   14eac:	1080020b 	ldhu	r2,8(r2)
   14eb0:	1007883a 	mov	r3,r2
   14eb4:	e0bfe78b 	ldhu	r2,-98(fp)
   14eb8:	0084303a 	nor	r2,zero,r2
   14ebc:	1884703a 	and	r2,r3,r2
   14ec0:	1007883a 	mov	r3,r2
   14ec4:	e0bffc17 	ldw	r2,-16(fp)
   14ec8:	10c0020d 	sth	r3,8(r2)
                 break;
   14ecc:	00001106 	br	14f14 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   14ed0:	e0bffc17 	ldw	r2,-16(fp)
   14ed4:	10c0020b 	ldhu	r3,8(r2)
   14ed8:	e0bfe78b 	ldhu	r2,-98(fp)
   14edc:	1884b03a 	or	r2,r3,r2
   14ee0:	1007883a 	mov	r3,r2
   14ee4:	e0bffc17 	ldw	r2,-16(fp)
   14ee8:	10c0020d 	sth	r3,8(r2)
                 break;
   14eec:	00000906 	br	14f14 <OSFlagPend+0x5c0>
   14ef0:	e0bfe617 	ldw	r2,-104(fp)
   14ef4:	e0bff515 	stw	r2,-44(fp)
   14ef8:	e0bff517 	ldw	r2,-44(fp)
   14efc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   14f00:	e0800217 	ldw	r2,8(fp)
   14f04:	00c01bc4 	movi	r3,111
   14f08:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   14f0c:	0005883a 	mov	r2,zero
   14f10:	00000706 	br	14f30 <OSFlagPend+0x5dc>
   14f14:	e0bfe617 	ldw	r2,-104(fp)
   14f18:	e0bff615 	stw	r2,-40(fp)
   14f1c:	e0bff617 	ldw	r2,-40(fp)
   14f20:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   14f24:	e0800217 	ldw	r2,8(fp)
   14f28:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   14f2c:	e0bfe78b 	ldhu	r2,-98(fp)
}
   14f30:	e037883a 	mov	sp,fp
   14f34:	dfc00117 	ldw	ra,4(sp)
   14f38:	df000017 	ldw	fp,0(sp)
   14f3c:	dec00204 	addi	sp,sp,8
   14f40:	f800283a 	ret

00014f44 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   14f44:	defffb04 	addi	sp,sp,-20
   14f48:	df000415 	stw	fp,16(sp)
   14f4c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14f50:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f54:	0005303a 	rdctl	r2,status
   14f58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f5c:	e0fffe17 	ldw	r3,-8(fp)
   14f60:	00bfff84 	movi	r2,-2
   14f64:	1884703a 	and	r2,r3,r2
   14f68:	1001703a 	wrctl	status,r2
  
  return context;
   14f6c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14f70:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   14f74:	008000b4 	movhi	r2,2
   14f78:	108e3f04 	addi	r2,r2,14588
   14f7c:	10800017 	ldw	r2,0(r2)
   14f80:	10800b0b 	ldhu	r2,44(r2)
   14f84:	e0bffd0d 	sth	r2,-12(fp)
   14f88:	e0bffc17 	ldw	r2,-16(fp)
   14f8c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f90:	e0bfff17 	ldw	r2,-4(fp)
   14f94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   14f98:	e0bffd0b 	ldhu	r2,-12(fp)
}
   14f9c:	e037883a 	mov	sp,fp
   14fa0:	df000017 	ldw	fp,0(sp)
   14fa4:	dec00104 	addi	sp,sp,4
   14fa8:	f800283a 	ret

00014fac <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   14fac:	deffef04 	addi	sp,sp,-68
   14fb0:	dfc01015 	stw	ra,64(sp)
   14fb4:	df000f15 	stw	fp,60(sp)
   14fb8:	df000f04 	addi	fp,sp,60
   14fbc:	e13ffc15 	stw	r4,-16(fp)
   14fc0:	2807883a 	mov	r3,r5
   14fc4:	3005883a 	mov	r2,r6
   14fc8:	e1ffff15 	stw	r7,-4(fp)
   14fcc:	e0fffd0d 	sth	r3,-12(fp)
   14fd0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   14fd4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14fd8:	e0bfff17 	ldw	r2,-4(fp)
   14fdc:	1000021e 	bne	r2,zero,14fe8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   14fe0:	0005883a 	mov	r2,zero
   14fe4:	0000ce06 	br	15320 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   14fe8:	e0bffc17 	ldw	r2,-16(fp)
   14fec:	1000051e 	bne	r2,zero,15004 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14ff0:	e0bfff17 	ldw	r2,-4(fp)
   14ff4:	00c01b84 	movi	r3,110
   14ff8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14ffc:	0005883a 	mov	r2,zero
   15000:	0000c706 	br	15320 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   15004:	e0bffc17 	ldw	r2,-16(fp)
   15008:	10800003 	ldbu	r2,0(r2)
   1500c:	10803fcc 	andi	r2,r2,255
   15010:	10800160 	cmpeqi	r2,r2,5
   15014:	1000051e 	bne	r2,zero,1502c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   15018:	e0bfff17 	ldw	r2,-4(fp)
   1501c:	00c00044 	movi	r3,1
   15020:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15024:	0005883a 	mov	r2,zero
   15028:	0000bd06 	br	15320 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1502c:	0005303a 	rdctl	r2,status
   15030:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15034:	e0fff617 	ldw	r3,-40(fp)
   15038:	00bfff84 	movi	r2,-2
   1503c:	1884703a 	and	r2,r3,r2
   15040:	1001703a 	wrctl	status,r2
  
  return context;
   15044:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15048:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1504c:	e0bffe03 	ldbu	r2,-8(fp)
   15050:	10000326 	beq	r2,zero,15060 <OSFlagPost+0xb4>
   15054:	10800060 	cmpeqi	r2,r2,1
   15058:	10000b1e 	bne	r2,zero,15088 <OSFlagPost+0xdc>
   1505c:	00001206 	br	150a8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   15060:	e0bffc17 	ldw	r2,-16(fp)
   15064:	1080020b 	ldhu	r2,8(r2)
   15068:	1007883a 	mov	r3,r2
   1506c:	e0bffd0b 	ldhu	r2,-12(fp)
   15070:	0084303a 	nor	r2,zero,r2
   15074:	1884703a 	and	r2,r3,r2
   15078:	1007883a 	mov	r3,r2
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	10c0020d 	sth	r3,8(r2)
             break;
   15084:	00001106 	br	150cc <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	10c0020b 	ldhu	r3,8(r2)
   15090:	e0bffd0b 	ldhu	r2,-12(fp)
   15094:	1884b03a 	or	r2,r3,r2
   15098:	1007883a 	mov	r3,r2
   1509c:	e0bffc17 	ldw	r2,-16(fp)
   150a0:	10c0020d 	sth	r3,8(r2)
             break;
   150a4:	00000906 	br	150cc <OSFlagPost+0x120>
   150a8:	e0bff317 	ldw	r2,-52(fp)
   150ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150b0:	e0bff717 	ldw	r2,-36(fp)
   150b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   150b8:	e0bfff17 	ldw	r2,-4(fp)
   150bc:	00c01c44 	movi	r3,113
   150c0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   150c4:	0005883a 	mov	r2,zero
   150c8:	00009506 	br	15320 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   150cc:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	10800117 	ldw	r2,4(r2)
   150d8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   150dc:	00007406 	br	152b0 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   150e0:	e0bff117 	ldw	r2,-60(fp)
   150e4:	10800483 	ldbu	r2,18(r2)
   150e8:	10803fcc 	andi	r2,r2,255
   150ec:	10c00060 	cmpeqi	r3,r2,1
   150f0:	18004d1e 	bne	r3,zero,15228 <OSFlagPost+0x27c>
   150f4:	10c00088 	cmpgei	r3,r2,2
   150f8:	1800021e 	bne	r3,zero,15104 <OSFlagPost+0x158>
   150fc:	10003126 	beq	r2,zero,151c4 <OSFlagPost+0x218>
   15100:	00005f06 	br	15280 <OSFlagPost+0x2d4>
   15104:	10c000a0 	cmpeqi	r3,r2,2
   15108:	1800031e 	bne	r3,zero,15118 <OSFlagPost+0x16c>
   1510c:	108000e0 	cmpeqi	r2,r2,3
   15110:	1000181e 	bne	r2,zero,15174 <OSFlagPost+0x1c8>
   15114:	00005a06 	br	15280 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15118:	e0bffc17 	ldw	r2,-16(fp)
   1511c:	10c0020b 	ldhu	r3,8(r2)
   15120:	e0bff117 	ldw	r2,-60(fp)
   15124:	1080040b 	ldhu	r2,16(r2)
   15128:	1884703a 	and	r2,r3,r2
   1512c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   15130:	e0bff117 	ldw	r2,-60(fp)
   15134:	1080040b 	ldhu	r2,16(r2)
   15138:	10ffffcc 	andi	r3,r2,65535
   1513c:	e0bff40b 	ldhu	r2,-48(fp)
   15140:	18800b1e 	bne	r3,r2,15170 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15144:	e0bff40b 	ldhu	r2,-48(fp)
   15148:	e13ff117 	ldw	r4,-60(fp)
   1514c:	100b883a 	mov	r5,r2
   15150:	00156a00 	call	156a0 <OS_FlagTaskRdy>
   15154:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   15158:	e0bff483 	ldbu	r2,-46(fp)
   1515c:	10800058 	cmpnei	r2,r2,1
   15160:	1000031e 	bne	r2,zero,15170 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15164:	00800044 	movi	r2,1
   15168:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1516c:	00004d06 	br	152a4 <OSFlagPost+0x2f8>
   15170:	00004c06 	br	152a4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15174:	e0bffc17 	ldw	r2,-16(fp)
   15178:	10c0020b 	ldhu	r3,8(r2)
   1517c:	e0bff117 	ldw	r2,-60(fp)
   15180:	1080040b 	ldhu	r2,16(r2)
   15184:	1884703a 	and	r2,r3,r2
   15188:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1518c:	e0bff40b 	ldhu	r2,-48(fp)
   15190:	10000b26 	beq	r2,zero,151c0 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15194:	e0bff40b 	ldhu	r2,-48(fp)
   15198:	e13ff117 	ldw	r4,-60(fp)
   1519c:	100b883a 	mov	r5,r2
   151a0:	00156a00 	call	156a0 <OS_FlagTaskRdy>
   151a4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   151a8:	e0bff483 	ldbu	r2,-46(fp)
   151ac:	10800058 	cmpnei	r2,r2,1
   151b0:	1000031e 	bne	r2,zero,151c0 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   151b4:	00800044 	movi	r2,1
   151b8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   151bc:	00003906 	br	152a4 <OSFlagPost+0x2f8>
   151c0:	00003806 	br	152a4 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   151c4:	e0bffc17 	ldw	r2,-16(fp)
   151c8:	1080020b 	ldhu	r2,8(r2)
   151cc:	0084303a 	nor	r2,zero,r2
   151d0:	1007883a 	mov	r3,r2
   151d4:	e0bff117 	ldw	r2,-60(fp)
   151d8:	1080040b 	ldhu	r2,16(r2)
   151dc:	1884703a 	and	r2,r3,r2
   151e0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   151e4:	e0bff117 	ldw	r2,-60(fp)
   151e8:	1080040b 	ldhu	r2,16(r2)
   151ec:	10ffffcc 	andi	r3,r2,65535
   151f0:	e0bff40b 	ldhu	r2,-48(fp)
   151f4:	18800b1e 	bne	r3,r2,15224 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   151f8:	e0bff40b 	ldhu	r2,-48(fp)
   151fc:	e13ff117 	ldw	r4,-60(fp)
   15200:	100b883a 	mov	r5,r2
   15204:	00156a00 	call	156a0 <OS_FlagTaskRdy>
   15208:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1520c:	e0bff483 	ldbu	r2,-46(fp)
   15210:	10800058 	cmpnei	r2,r2,1
   15214:	1000031e 	bne	r2,zero,15224 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15218:	00800044 	movi	r2,1
   1521c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15220:	00002006 	br	152a4 <OSFlagPost+0x2f8>
   15224:	00001f06 	br	152a4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15228:	e0bffc17 	ldw	r2,-16(fp)
   1522c:	1080020b 	ldhu	r2,8(r2)
   15230:	0084303a 	nor	r2,zero,r2
   15234:	1007883a 	mov	r3,r2
   15238:	e0bff117 	ldw	r2,-60(fp)
   1523c:	1080040b 	ldhu	r2,16(r2)
   15240:	1884703a 	and	r2,r3,r2
   15244:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   15248:	e0bff40b 	ldhu	r2,-48(fp)
   1524c:	10000b26 	beq	r2,zero,1527c <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15250:	e0bff40b 	ldhu	r2,-48(fp)
   15254:	e13ff117 	ldw	r4,-60(fp)
   15258:	100b883a 	mov	r5,r2
   1525c:	00156a00 	call	156a0 <OS_FlagTaskRdy>
   15260:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   15264:	e0bff483 	ldbu	r2,-46(fp)
   15268:	10800058 	cmpnei	r2,r2,1
   1526c:	1000031e 	bne	r2,zero,1527c <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15270:	00800044 	movi	r2,1
   15274:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15278:	00000a06 	br	152a4 <OSFlagPost+0x2f8>
   1527c:	00000906 	br	152a4 <OSFlagPost+0x2f8>
   15280:	e0bff317 	ldw	r2,-52(fp)
   15284:	e0bff815 	stw	r2,-32(fp)
   15288:	e0bff817 	ldw	r2,-32(fp)
   1528c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	00c01bc4 	movi	r3,111
   15298:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1529c:	0005883a 	mov	r2,zero
   152a0:	00001f06 	br	15320 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   152a4:	e0bff117 	ldw	r2,-60(fp)
   152a8:	10800017 	ldw	r2,0(r2)
   152ac:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   152b0:	e0bff117 	ldw	r2,-60(fp)
   152b4:	103f8a1e 	bne	r2,zero,150e0 <__alt_mem_Flash_flash_data+0xf40150e0>
   152b8:	e0bff317 	ldw	r2,-52(fp)
   152bc:	e0bff915 	stw	r2,-28(fp)
   152c0:	e0bff917 	ldw	r2,-28(fp)
   152c4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   152c8:	e0bff203 	ldbu	r2,-56(fp)
   152cc:	10800058 	cmpnei	r2,r2,1
   152d0:	1000011e 	bne	r2,zero,152d8 <OSFlagPost+0x32c>
        OS_Sched();
   152d4:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152d8:	0005303a 	rdctl	r2,status
   152dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152e0:	e0fffa17 	ldw	r3,-24(fp)
   152e4:	00bfff84 	movi	r2,-2
   152e8:	1884703a 	and	r2,r3,r2
   152ec:	1001703a 	wrctl	status,r2
  
  return context;
   152f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   152f4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   152f8:	e0bffc17 	ldw	r2,-16(fp)
   152fc:	1080020b 	ldhu	r2,8(r2)
   15300:	e0bff50d 	sth	r2,-44(fp)
   15304:	e0bff317 	ldw	r2,-52(fp)
   15308:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1530c:	e0bffb17 	ldw	r2,-20(fp)
   15310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   15314:	e0bfff17 	ldw	r2,-4(fp)
   15318:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1531c:	e0bff50b 	ldhu	r2,-44(fp)
}
   15320:	e037883a 	mov	sp,fp
   15324:	dfc00117 	ldw	ra,4(sp)
   15328:	df000017 	ldw	fp,0(sp)
   1532c:	dec00204 	addi	sp,sp,8
   15330:	f800283a 	ret

00015334 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   15334:	defff904 	addi	sp,sp,-28
   15338:	df000615 	stw	fp,24(sp)
   1533c:	df000604 	addi	fp,sp,24
   15340:	e13ffe15 	stw	r4,-8(fp)
   15344:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   15348:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1534c:	e0bfff17 	ldw	r2,-4(fp)
   15350:	1000021e 	bne	r2,zero,1535c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   15354:	0005883a 	mov	r2,zero
   15358:	00002306 	br	153e8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1535c:	e0bffe17 	ldw	r2,-8(fp)
   15360:	1000051e 	bne	r2,zero,15378 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	00c01b84 	movi	r3,110
   1536c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15370:	0005883a 	mov	r2,zero
   15374:	00001c06 	br	153e8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   15378:	e0bffe17 	ldw	r2,-8(fp)
   1537c:	10800003 	ldbu	r2,0(r2)
   15380:	10803fcc 	andi	r2,r2,255
   15384:	10800160 	cmpeqi	r2,r2,5
   15388:	1000051e 	bne	r2,zero,153a0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1538c:	e0bfff17 	ldw	r2,-4(fp)
   15390:	00c00044 	movi	r3,1
   15394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15398:	0005883a 	mov	r2,zero
   1539c:	00001206 	br	153e8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153a0:	0005303a 	rdctl	r2,status
   153a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153a8:	e0fffc17 	ldw	r3,-16(fp)
   153ac:	00bfff84 	movi	r2,-2
   153b0:	1884703a 	and	r2,r3,r2
   153b4:	1001703a 	wrctl	status,r2
  
  return context;
   153b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   153bc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   153c0:	e0bffe17 	ldw	r2,-8(fp)
   153c4:	1080020b 	ldhu	r2,8(r2)
   153c8:	e0bffb0d 	sth	r2,-20(fp)
   153cc:	e0bffa17 	ldw	r2,-24(fp)
   153d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   153dc:	e0bfff17 	ldw	r2,-4(fp)
   153e0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   153e4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   153e8:	e037883a 	mov	sp,fp
   153ec:	df000017 	ldw	fp,0(sp)
   153f0:	dec00104 	addi	sp,sp,4
   153f4:	f800283a 	ret

000153f8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   153f8:	defff804 	addi	sp,sp,-32
   153fc:	df000715 	stw	fp,28(sp)
   15400:	df000704 	addi	fp,sp,28
   15404:	e13ffb15 	stw	r4,-20(fp)
   15408:	e17ffc15 	stw	r5,-16(fp)
   1540c:	3009883a 	mov	r4,r6
   15410:	3807883a 	mov	r3,r7
   15414:	e0800117 	ldw	r2,4(fp)
   15418:	e13ffd0d 	sth	r4,-12(fp)
   1541c:	e0fffe05 	stb	r3,-8(fp)
   15420:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   15424:	008000b4 	movhi	r2,2
   15428:	108e3f04 	addi	r2,r2,14588
   1542c:	10c00017 	ldw	r3,0(r2)
   15430:	008000b4 	movhi	r2,2
   15434:	108e3f04 	addi	r2,r2,14588
   15438:	10800017 	ldw	r2,0(r2)
   1543c:	10800c03 	ldbu	r2,48(r2)
   15440:	10800814 	ori	r2,r2,32
   15444:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   15448:	008000b4 	movhi	r2,2
   1544c:	108e3f04 	addi	r2,r2,14588
   15450:	10800017 	ldw	r2,0(r2)
   15454:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   15458:	008000b4 	movhi	r2,2
   1545c:	108e3f04 	addi	r2,r2,14588
   15460:	10800017 	ldw	r2,0(r2)
   15464:	e0ffff0b 	ldhu	r3,-4(fp)
   15468:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1546c:	008000b4 	movhi	r2,2
   15470:	108e3f04 	addi	r2,r2,14588
   15474:	10800017 	ldw	r2,0(r2)
   15478:	e0fffc17 	ldw	r3,-16(fp)
   1547c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   15480:	e0bffc17 	ldw	r2,-16(fp)
   15484:	e0fffd0b 	ldhu	r3,-12(fp)
   15488:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1548c:	e0bffc17 	ldw	r2,-16(fp)
   15490:	e0fffe03 	ldbu	r3,-8(fp)
   15494:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   15498:	008000b4 	movhi	r2,2
   1549c:	108e3f04 	addi	r2,r2,14588
   154a0:	10c00017 	ldw	r3,0(r2)
   154a4:	e0bffc17 	ldw	r2,-16(fp)
   154a8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   154ac:	e0bffb17 	ldw	r2,-20(fp)
   154b0:	10c00117 	ldw	r3,4(r2)
   154b4:	e0bffc17 	ldw	r2,-16(fp)
   154b8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   154bc:	e0bffc17 	ldw	r2,-16(fp)
   154c0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   154c4:	e0bffc17 	ldw	r2,-16(fp)
   154c8:	e0fffb17 	ldw	r3,-20(fp)
   154cc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   154d0:	e0bffb17 	ldw	r2,-20(fp)
   154d4:	10800117 	ldw	r2,4(r2)
   154d8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   154dc:	e0bff917 	ldw	r2,-28(fp)
   154e0:	10000326 	beq	r2,zero,154f0 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   154e4:	e0bff917 	ldw	r2,-28(fp)
   154e8:	e0fffc17 	ldw	r3,-16(fp)
   154ec:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   154f0:	e0bffb17 	ldw	r2,-20(fp)
   154f4:	e0fffc17 	ldw	r3,-16(fp)
   154f8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   154fc:	008000b4 	movhi	r2,2
   15500:	108e3f04 	addi	r2,r2,14588
   15504:	10800017 	ldw	r2,0(r2)
   15508:	10800d03 	ldbu	r2,52(r2)
   1550c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15510:	e0fffa03 	ldbu	r3,-24(fp)
   15514:	e13ffa03 	ldbu	r4,-24(fp)
   15518:	008000b4 	movhi	r2,2
   1551c:	108e3c44 	addi	r2,r2,14577
   15520:	1105883a 	add	r2,r2,r4
   15524:	10800003 	ldbu	r2,0(r2)
   15528:	1009883a 	mov	r4,r2
   1552c:	008000b4 	movhi	r2,2
   15530:	108e3f04 	addi	r2,r2,14588
   15534:	10800017 	ldw	r2,0(r2)
   15538:	10800d43 	ldbu	r2,53(r2)
   1553c:	0084303a 	nor	r2,zero,r2
   15540:	2084703a 	and	r2,r4,r2
   15544:	1009883a 	mov	r4,r2
   15548:	008000b4 	movhi	r2,2
   1554c:	108e3c44 	addi	r2,r2,14577
   15550:	10c5883a 	add	r2,r2,r3
   15554:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   15558:	e0fffa03 	ldbu	r3,-24(fp)
   1555c:	008000b4 	movhi	r2,2
   15560:	108e3c44 	addi	r2,r2,14577
   15564:	10c5883a 	add	r2,r2,r3
   15568:	10800003 	ldbu	r2,0(r2)
   1556c:	10803fcc 	andi	r2,r2,255
   15570:	10000e1e 	bne	r2,zero,155ac <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15574:	008000b4 	movhi	r2,2
   15578:	108e3f04 	addi	r2,r2,14588
   1557c:	10800017 	ldw	r2,0(r2)
   15580:	10800d83 	ldbu	r2,54(r2)
   15584:	0084303a 	nor	r2,zero,r2
   15588:	1007883a 	mov	r3,r2
   1558c:	008000b4 	movhi	r2,2
   15590:	108e3c04 	addi	r2,r2,14576
   15594:	10800003 	ldbu	r2,0(r2)
   15598:	1884703a 	and	r2,r3,r2
   1559c:	1007883a 	mov	r3,r2
   155a0:	008000b4 	movhi	r2,2
   155a4:	108e3c04 	addi	r2,r2,14576
   155a8:	10c00005 	stb	r3,0(r2)
    }
}
   155ac:	e037883a 	mov	sp,fp
   155b0:	df000017 	ldw	fp,0(sp)
   155b4:	dec00104 	addi	sp,sp,4
   155b8:	f800283a 	ret

000155bc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   155bc:	defffb04 	addi	sp,sp,-20
   155c0:	dfc00415 	stw	ra,16(sp)
   155c4:	df000315 	stw	fp,12(sp)
   155c8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   155cc:	010000f4 	movhi	r4,3
   155d0:	2136c404 	addi	r4,r4,-9456
   155d4:	0140dc04 	movi	r5,880
   155d8:	001371c0 	call	1371c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   155dc:	008000f4 	movhi	r2,3
   155e0:	10b6c404 	addi	r2,r2,-9456
   155e4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   155e8:	008000f4 	movhi	r2,3
   155ec:	10b6cf04 	addi	r2,r2,-9412
   155f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   155f4:	e03ffd0d 	sth	zero,-12(fp)
   155f8:	00001306 	br	15648 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   155fc:	e0bffe17 	ldw	r2,-8(fp)
   15600:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   15604:	e0bffe17 	ldw	r2,-8(fp)
   15608:	e0ffff17 	ldw	r3,-4(fp)
   1560c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   15610:	e0bffe17 	ldw	r2,-8(fp)
   15614:	00c00fc4 	movi	r3,63
   15618:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1561c:	e0bffe17 	ldw	r2,-8(fp)
   15620:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   15624:	e0bffe17 	ldw	r2,-8(fp)
   15628:	10800b04 	addi	r2,r2,44
   1562c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   15630:	e0bfff17 	ldw	r2,-4(fp)
   15634:	10800b04 	addi	r2,r2,44
   15638:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1563c:	e0bffd0b 	ldhu	r2,-12(fp)
   15640:	10800044 	addi	r2,r2,1
   15644:	e0bffd0d 	sth	r2,-12(fp)
   15648:	e0bffd0b 	ldhu	r2,-12(fp)
   1564c:	108004f0 	cmpltui	r2,r2,19
   15650:	103fea1e 	bne	r2,zero,155fc <__alt_mem_Flash_flash_data+0xf40155fc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15654:	e0bffe17 	ldw	r2,-8(fp)
   15658:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1565c:	e0bffe17 	ldw	r2,-8(fp)
   15660:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   15664:	e0bffe17 	ldw	r2,-8(fp)
   15668:	00c00fc4 	movi	r3,63
   1566c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   15670:	e0bffe17 	ldw	r2,-8(fp)
   15674:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   15678:	008000b4 	movhi	r2,2
   1567c:	108e4104 	addi	r2,r2,14596
   15680:	00c000f4 	movhi	r3,3
   15684:	18f6c404 	addi	r3,r3,-9456
   15688:	10c00015 	stw	r3,0(r2)
#endif
}
   1568c:	e037883a 	mov	sp,fp
   15690:	dfc00117 	ldw	ra,4(sp)
   15694:	df000017 	ldw	fp,0(sp)
   15698:	dec00204 	addi	sp,sp,8
   1569c:	f800283a 	ret

000156a0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   156a0:	defffa04 	addi	sp,sp,-24
   156a4:	dfc00515 	stw	ra,20(sp)
   156a8:	df000415 	stw	fp,16(sp)
   156ac:	df000404 	addi	fp,sp,16
   156b0:	e13ffe15 	stw	r4,-8(fp)
   156b4:	2805883a 	mov	r2,r5
   156b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   156bc:	e0bffe17 	ldw	r2,-8(fp)
   156c0:	10800217 	ldw	r2,8(r2)
   156c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   156c8:	e0bffd17 	ldw	r2,-12(fp)
   156cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   156d0:	e0bffd17 	ldw	r2,-12(fp)
   156d4:	e0ffff0b 	ldhu	r3,-4(fp)
   156d8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   156dc:	e0bffd17 	ldw	r2,-12(fp)
   156e0:	10c00c03 	ldbu	r3,48(r2)
   156e4:	00bff7c4 	movi	r2,-33
   156e8:	1884703a 	and	r2,r3,r2
   156ec:	1007883a 	mov	r3,r2
   156f0:	e0bffd17 	ldw	r2,-12(fp)
   156f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   156f8:	e0bffd17 	ldw	r2,-12(fp)
   156fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   15700:	e0bffd17 	ldw	r2,-12(fp)
   15704:	10800c03 	ldbu	r2,48(r2)
   15708:	10803fcc 	andi	r2,r2,255
   1570c:	10001f1e 	bne	r2,zero,1578c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   15710:	e0bffd17 	ldw	r2,-12(fp)
   15714:	10c00d83 	ldbu	r3,54(r2)
   15718:	008000b4 	movhi	r2,2
   1571c:	108e3c04 	addi	r2,r2,14576
   15720:	10800003 	ldbu	r2,0(r2)
   15724:	1884b03a 	or	r2,r3,r2
   15728:	1007883a 	mov	r3,r2
   1572c:	008000b4 	movhi	r2,2
   15730:	108e3c04 	addi	r2,r2,14576
   15734:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15738:	e0bffd17 	ldw	r2,-12(fp)
   1573c:	10800d03 	ldbu	r2,52(r2)
   15740:	10c03fcc 	andi	r3,r2,255
   15744:	e0bffd17 	ldw	r2,-12(fp)
   15748:	10800d03 	ldbu	r2,52(r2)
   1574c:	11003fcc 	andi	r4,r2,255
   15750:	008000b4 	movhi	r2,2
   15754:	108e3c44 	addi	r2,r2,14577
   15758:	1105883a 	add	r2,r2,r4
   1575c:	11000003 	ldbu	r4,0(r2)
   15760:	e0bffd17 	ldw	r2,-12(fp)
   15764:	10800d43 	ldbu	r2,53(r2)
   15768:	2084b03a 	or	r2,r4,r2
   1576c:	1009883a 	mov	r4,r2
   15770:	008000b4 	movhi	r2,2
   15774:	108e3c44 	addi	r2,r2,14577
   15778:	10c5883a 	add	r2,r2,r3
   1577c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   15780:	00800044 	movi	r2,1
   15784:	e0bffc05 	stb	r2,-16(fp)
   15788:	00000106 	br	15790 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   1578c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   15790:	e13ffe17 	ldw	r4,-8(fp)
   15794:	00157b00 	call	157b0 <OS_FlagUnlink>
    return (sched);
   15798:	e0bffc03 	ldbu	r2,-16(fp)
}
   1579c:	e037883a 	mov	sp,fp
   157a0:	dfc00117 	ldw	ra,4(sp)
   157a4:	df000017 	ldw	fp,0(sp)
   157a8:	dec00204 	addi	sp,sp,8
   157ac:	f800283a 	ret

000157b0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   157b0:	defffa04 	addi	sp,sp,-24
   157b4:	df000515 	stw	fp,20(sp)
   157b8:	df000504 	addi	fp,sp,20
   157bc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   157c0:	e0bfff17 	ldw	r2,-4(fp)
   157c4:	10800117 	ldw	r2,4(r2)
   157c8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   157cc:	e0bfff17 	ldw	r2,-4(fp)
   157d0:	10800017 	ldw	r2,0(r2)
   157d4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   157d8:	e0bffb17 	ldw	r2,-20(fp)
   157dc:	10000b1e 	bne	r2,zero,1580c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   157e0:	e0bfff17 	ldw	r2,-4(fp)
   157e4:	10800317 	ldw	r2,12(r2)
   157e8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   157ec:	e0bffd17 	ldw	r2,-12(fp)
   157f0:	e0fffc17 	ldw	r3,-16(fp)
   157f4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   157f8:	e0bffc17 	ldw	r2,-16(fp)
   157fc:	10000b26 	beq	r2,zero,1582c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   15800:	e0bffc17 	ldw	r2,-16(fp)
   15804:	10000115 	stw	zero,4(r2)
   15808:	00000806 	br	1582c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1580c:	e0bffb17 	ldw	r2,-20(fp)
   15810:	e0fffc17 	ldw	r3,-16(fp)
   15814:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   15818:	e0bffc17 	ldw	r2,-16(fp)
   1581c:	10000326 	beq	r2,zero,1582c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   15820:	e0bffc17 	ldw	r2,-16(fp)
   15824:	e0fffb17 	ldw	r3,-20(fp)
   15828:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1582c:	e0bfff17 	ldw	r2,-4(fp)
   15830:	10800217 	ldw	r2,8(r2)
   15834:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   15838:	e0bffe17 	ldw	r2,-8(fp)
   1583c:	10000a15 	stw	zero,40(r2)
#endif
}
   15840:	e037883a 	mov	sp,fp
   15844:	df000017 	ldw	fp,0(sp)
   15848:	dec00104 	addi	sp,sp,4
   1584c:	f800283a 	ret

00015850 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   15850:	defffa04 	addi	sp,sp,-24
   15854:	df000515 	stw	fp,20(sp)
   15858:	df000504 	addi	fp,sp,20
   1585c:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   15860:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   15864:	e0bfff17 	ldw	r2,-4(fp)
   15868:	1000021e 	bne	r2,zero,15874 <OSMboxAccept+0x24>
        return ((void *)0);
   1586c:	0005883a 	mov	r2,zero
   15870:	00001906 	br	158d8 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   15874:	e0bfff17 	ldw	r2,-4(fp)
   15878:	10800003 	ldbu	r2,0(r2)
   1587c:	10803fcc 	andi	r2,r2,255
   15880:	10800060 	cmpeqi	r2,r2,1
   15884:	1000021e 	bne	r2,zero,15890 <OSMboxAccept+0x40>
        return ((void *)0);
   15888:	0005883a 	mov	r2,zero
   1588c:	00001206 	br	158d8 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15890:	0005303a 	rdctl	r2,status
   15894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15898:	e0fffd17 	ldw	r3,-12(fp)
   1589c:	00bfff84 	movi	r2,-2
   158a0:	1884703a 	and	r2,r3,r2
   158a4:	1001703a 	wrctl	status,r2
  
  return context;
   158a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   158ac:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   158b0:	e0bfff17 	ldw	r2,-4(fp)
   158b4:	10800117 	ldw	r2,4(r2)
   158b8:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   158bc:	e0bfff17 	ldw	r2,-4(fp)
   158c0:	10000115 	stw	zero,4(r2)
   158c4:	e0bffb17 	ldw	r2,-20(fp)
   158c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158cc:	e0bffe17 	ldw	r2,-8(fp)
   158d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   158d4:	e0bffc17 	ldw	r2,-16(fp)
}
   158d8:	e037883a 	mov	sp,fp
   158dc:	df000017 	ldw	fp,0(sp)
   158e0:	dec00104 	addi	sp,sp,4
   158e4:	f800283a 	ret

000158e8 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   158e8:	defff904 	addi	sp,sp,-28
   158ec:	dfc00615 	stw	ra,24(sp)
   158f0:	df000515 	stw	fp,20(sp)
   158f4:	df000504 	addi	fp,sp,20
   158f8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158fc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15900:	008000b4 	movhi	r2,2
   15904:	108e3e04 	addi	r2,r2,14584
   15908:	10800003 	ldbu	r2,0(r2)
   1590c:	10803fcc 	andi	r2,r2,255
   15910:	10000226 	beq	r2,zero,1591c <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   15914:	0005883a 	mov	r2,zero
   15918:	00002d06 	br	159d0 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1591c:	0005303a 	rdctl	r2,status
   15920:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15924:	e0fffd17 	ldw	r3,-12(fp)
   15928:	00bfff84 	movi	r2,-2
   1592c:	1884703a 	and	r2,r3,r2
   15930:	1001703a 	wrctl	status,r2
  
  return context;
   15934:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15938:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1593c:	008000b4 	movhi	r2,2
   15940:	108e3d04 	addi	r2,r2,14580
   15944:	10800017 	ldw	r2,0(r2)
   15948:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1594c:	008000b4 	movhi	r2,2
   15950:	108e3d04 	addi	r2,r2,14580
   15954:	10800017 	ldw	r2,0(r2)
   15958:	10000726 	beq	r2,zero,15978 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1595c:	008000b4 	movhi	r2,2
   15960:	108e3d04 	addi	r2,r2,14580
   15964:	10800017 	ldw	r2,0(r2)
   15968:	10c00117 	ldw	r3,4(r2)
   1596c:	008000b4 	movhi	r2,2
   15970:	108e3d04 	addi	r2,r2,14580
   15974:	10c00015 	stw	r3,0(r2)
   15978:	e0bffb17 	ldw	r2,-20(fp)
   1597c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15980:	e0bffe17 	ldw	r2,-8(fp)
   15984:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   15988:	e0bffc17 	ldw	r2,-16(fp)
   1598c:	10000f26 	beq	r2,zero,159cc <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   15990:	e0bffc17 	ldw	r2,-16(fp)
   15994:	00c00044 	movi	r3,1
   15998:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   1599c:	e0bffc17 	ldw	r2,-16(fp)
   159a0:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   159a4:	e0bffc17 	ldw	r2,-16(fp)
   159a8:	e0ffff17 	ldw	r3,-4(fp)
   159ac:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   159b0:	e0bffc17 	ldw	r2,-16(fp)
   159b4:	00c00fc4 	movi	r3,63
   159b8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   159bc:	e0bffc17 	ldw	r2,-16(fp)
   159c0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   159c4:	e13ffc17 	ldw	r4,-16(fp)
   159c8:	00133580 	call	13358 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   159cc:	e0bffc17 	ldw	r2,-16(fp)
}
   159d0:	e037883a 	mov	sp,fp
   159d4:	dfc00117 	ldw	ra,4(sp)
   159d8:	df000017 	ldw	fp,0(sp)
   159dc:	dec00204 	addi	sp,sp,8
   159e0:	f800283a 	ret

000159e4 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   159e4:	defff304 	addi	sp,sp,-52
   159e8:	dfc00c15 	stw	ra,48(sp)
   159ec:	df000b15 	stw	fp,44(sp)
   159f0:	df000b04 	addi	fp,sp,44
   159f4:	e13ffd15 	stw	r4,-12(fp)
   159f8:	2805883a 	mov	r2,r5
   159fc:	e1bfff15 	stw	r6,-4(fp)
   15a00:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15a04:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	1000021e 	bne	r2,zero,15a18 <OSMboxDel+0x34>
        return (pevent);
   15a10:	e0bffd17 	ldw	r2,-12(fp)
   15a14:	00008806 	br	15c38 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15a18:	e0bffd17 	ldw	r2,-12(fp)
   15a1c:	1000051e 	bne	r2,zero,15a34 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15a20:	e0bfff17 	ldw	r2,-4(fp)
   15a24:	00c00104 	movi	r3,4
   15a28:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15a2c:	e0bffd17 	ldw	r2,-12(fp)
   15a30:	00008106 	br	15c38 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   15a34:	e0bffd17 	ldw	r2,-12(fp)
   15a38:	10800003 	ldbu	r2,0(r2)
   15a3c:	10803fcc 	andi	r2,r2,255
   15a40:	10800060 	cmpeqi	r2,r2,1
   15a44:	1000051e 	bne	r2,zero,15a5c <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15a48:	e0bfff17 	ldw	r2,-4(fp)
   15a4c:	00c00044 	movi	r3,1
   15a50:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15a54:	e0bffd17 	ldw	r2,-12(fp)
   15a58:	00007706 	br	15c38 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15a5c:	008000b4 	movhi	r2,2
   15a60:	108e3e04 	addi	r2,r2,14584
   15a64:	10800003 	ldbu	r2,0(r2)
   15a68:	10803fcc 	andi	r2,r2,255
   15a6c:	10000526 	beq	r2,zero,15a84 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15a70:	e0bfff17 	ldw	r2,-4(fp)
   15a74:	00c003c4 	movi	r3,15
   15a78:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15a7c:	e0bffd17 	ldw	r2,-12(fp)
   15a80:	00006d06 	br	15c38 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a84:	0005303a 	rdctl	r2,status
   15a88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a8c:	e0fff817 	ldw	r3,-32(fp)
   15a90:	00bfff84 	movi	r2,-2
   15a94:	1884703a 	and	r2,r3,r2
   15a98:	1001703a 	wrctl	status,r2
  
  return context;
   15a9c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15aa0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   15aa4:	e0bffd17 	ldw	r2,-12(fp)
   15aa8:	10800283 	ldbu	r2,10(r2)
   15aac:	10803fcc 	andi	r2,r2,255
   15ab0:	10000326 	beq	r2,zero,15ac0 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15ab4:	00800044 	movi	r2,1
   15ab8:	e0bff505 	stb	r2,-44(fp)
   15abc:	00000106 	br	15ac4 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15ac0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15ac4:	e0bffe03 	ldbu	r2,-8(fp)
   15ac8:	10000326 	beq	r2,zero,15ad8 <OSMboxDel+0xf4>
   15acc:	10800060 	cmpeqi	r2,r2,1
   15ad0:	10002c1e 	bne	r2,zero,15b84 <OSMboxDel+0x1a0>
   15ad4:	00004d06 	br	15c0c <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   15ad8:	e0bff503 	ldbu	r2,-44(fp)
   15adc:	10001a1e 	bne	r2,zero,15b48 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15ae0:	e0bffd17 	ldw	r2,-12(fp)
   15ae4:	00c00fc4 	movi	r3,63
   15ae8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15aec:	e0bffd17 	ldw	r2,-12(fp)
   15af0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   15af4:	e0bffd17 	ldw	r2,-12(fp)
   15af8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   15afc:	008000b4 	movhi	r2,2
   15b00:	108e3d04 	addi	r2,r2,14580
   15b04:	10c00017 	ldw	r3,0(r2)
   15b08:	e0bffd17 	ldw	r2,-12(fp)
   15b0c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   15b10:	e0bffd17 	ldw	r2,-12(fp)
   15b14:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   15b18:	008000b4 	movhi	r2,2
   15b1c:	108e3d04 	addi	r2,r2,14580
   15b20:	e0fffd17 	ldw	r3,-12(fp)
   15b24:	10c00015 	stw	r3,0(r2)
   15b28:	e0bff717 	ldw	r2,-36(fp)
   15b2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b30:	e0bff917 	ldw	r2,-28(fp)
   15b34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   15b38:	e0bfff17 	ldw	r2,-4(fp)
   15b3c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   15b40:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   15b44:	00003b06 	br	15c34 <OSMboxDel+0x250>
   15b48:	e0bff717 	ldw	r2,-36(fp)
   15b4c:	e0bffa15 	stw	r2,-24(fp)
   15b50:	e0bffa17 	ldw	r2,-24(fp)
   15b54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	00c01244 	movi	r3,73
   15b60:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   15b64:	e0bffd17 	ldw	r2,-12(fp)
   15b68:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15b6c:	00003106 	br	15c34 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   15b70:	e13ffd17 	ldw	r4,-12(fp)
   15b74:	000b883a 	mov	r5,zero
   15b78:	01800084 	movi	r6,2
   15b7c:	000f883a 	mov	r7,zero
   15b80:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   15b84:	e0bffd17 	ldw	r2,-12(fp)
   15b88:	10800283 	ldbu	r2,10(r2)
   15b8c:	10803fcc 	andi	r2,r2,255
   15b90:	103ff71e 	bne	r2,zero,15b70 <__alt_mem_Flash_flash_data+0xf4015b70>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15b94:	e0bffd17 	ldw	r2,-12(fp)
   15b98:	00c00fc4 	movi	r3,63
   15b9c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15ba0:	e0bffd17 	ldw	r2,-12(fp)
   15ba4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15ba8:	e0bffd17 	ldw	r2,-12(fp)
   15bac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15bb0:	008000b4 	movhi	r2,2
   15bb4:	108e3d04 	addi	r2,r2,14580
   15bb8:	10c00017 	ldw	r3,0(r2)
   15bbc:	e0bffd17 	ldw	r2,-12(fp)
   15bc0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   15bc4:	e0bffd17 	ldw	r2,-12(fp)
   15bc8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15bcc:	008000b4 	movhi	r2,2
   15bd0:	108e3d04 	addi	r2,r2,14580
   15bd4:	e0fffd17 	ldw	r3,-12(fp)
   15bd8:	10c00015 	stw	r3,0(r2)
   15bdc:	e0bff717 	ldw	r2,-36(fp)
   15be0:	e0bffb15 	stw	r2,-20(fp)
   15be4:	e0bffb17 	ldw	r2,-20(fp)
   15be8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15bec:	e0bff503 	ldbu	r2,-44(fp)
   15bf0:	10800058 	cmpnei	r2,r2,1
   15bf4:	1000011e 	bne	r2,zero,15bfc <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15bf8:	00137d00 	call	137d0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   15bfc:	e0bfff17 	ldw	r2,-4(fp)
   15c00:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   15c04:	e03ff615 	stw	zero,-40(fp)
             break;
   15c08:	00000a06 	br	15c34 <OSMboxDel+0x250>
   15c0c:	e0bff717 	ldw	r2,-36(fp)
   15c10:	e0bffc15 	stw	r2,-16(fp)
   15c14:	e0bffc17 	ldw	r2,-16(fp)
   15c18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   15c1c:	e0bfff17 	ldw	r2,-4(fp)
   15c20:	00c001c4 	movi	r3,7
   15c24:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   15c28:	e0bffd17 	ldw	r2,-12(fp)
   15c2c:	e0bff615 	stw	r2,-40(fp)
             break;
   15c30:	0001883a 	nop
    }
    return (pevent_return);
   15c34:	e0bff617 	ldw	r2,-40(fp)
}
   15c38:	e037883a 	mov	sp,fp
   15c3c:	dfc00117 	ldw	ra,4(sp)
   15c40:	df000017 	ldw	fp,0(sp)
   15c44:	dec00204 	addi	sp,sp,8
   15c48:	f800283a 	ret

00015c4c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   15c4c:	defff404 	addi	sp,sp,-48
   15c50:	dfc00b15 	stw	ra,44(sp)
   15c54:	df000a15 	stw	fp,40(sp)
   15c58:	df000a04 	addi	fp,sp,40
   15c5c:	e13ffd15 	stw	r4,-12(fp)
   15c60:	2805883a 	mov	r2,r5
   15c64:	e1bfff15 	stw	r6,-4(fp)
   15c68:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15c6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15c70:	e0bfff17 	ldw	r2,-4(fp)
   15c74:	1000021e 	bne	r2,zero,15c80 <OSMboxPend+0x34>
        return ((void *)0);
   15c78:	0005883a 	mov	r2,zero
   15c7c:	00009706 	br	15edc <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15c80:	e0bffd17 	ldw	r2,-12(fp)
   15c84:	1000051e 	bne	r2,zero,15c9c <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15c88:	e0bfff17 	ldw	r2,-4(fp)
   15c8c:	00c00104 	movi	r3,4
   15c90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15c94:	0005883a 	mov	r2,zero
   15c98:	00009006 	br	15edc <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   15c9c:	e0bffd17 	ldw	r2,-12(fp)
   15ca0:	10800003 	ldbu	r2,0(r2)
   15ca4:	10803fcc 	andi	r2,r2,255
   15ca8:	10800060 	cmpeqi	r2,r2,1
   15cac:	1000051e 	bne	r2,zero,15cc4 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15cb0:	e0bfff17 	ldw	r2,-4(fp)
   15cb4:	00c00044 	movi	r3,1
   15cb8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15cbc:	0005883a 	mov	r2,zero
   15cc0:	00008606 	br	15edc <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   15cc4:	008000b4 	movhi	r2,2
   15cc8:	108e3e04 	addi	r2,r2,14584
   15ccc:	10800003 	ldbu	r2,0(r2)
   15cd0:	10803fcc 	andi	r2,r2,255
   15cd4:	10000526 	beq	r2,zero,15cec <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   15cd8:	e0bfff17 	ldw	r2,-4(fp)
   15cdc:	00c00084 	movi	r3,2
   15ce0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15ce4:	0005883a 	mov	r2,zero
   15ce8:	00007c06 	br	15edc <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   15cec:	008000b4 	movhi	r2,2
   15cf0:	108e3004 	addi	r2,r2,14528
   15cf4:	10800003 	ldbu	r2,0(r2)
   15cf8:	10803fcc 	andi	r2,r2,255
   15cfc:	10000526 	beq	r2,zero,15d14 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15d00:	e0bfff17 	ldw	r2,-4(fp)
   15d04:	00c00344 	movi	r3,13
   15d08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15d0c:	0005883a 	mov	r2,zero
   15d10:	00007206 	br	15edc <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d14:	0005303a 	rdctl	r2,status
   15d18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d1c:	e0fff817 	ldw	r3,-32(fp)
   15d20:	00bfff84 	movi	r2,-2
   15d24:	1884703a 	and	r2,r3,r2
   15d28:	1001703a 	wrctl	status,r2
  
  return context;
   15d2c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15d30:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   15d34:	e0bffd17 	ldw	r2,-12(fp)
   15d38:	10800117 	ldw	r2,4(r2)
   15d3c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   15d40:	e0bff617 	ldw	r2,-40(fp)
   15d44:	10000a26 	beq	r2,zero,15d70 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10000115 	stw	zero,4(r2)
   15d50:	e0bff717 	ldw	r2,-36(fp)
   15d54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d58:	e0bff917 	ldw	r2,-28(fp)
   15d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   15d60:	e0bfff17 	ldw	r2,-4(fp)
   15d64:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   15d68:	e0bff617 	ldw	r2,-40(fp)
   15d6c:	00005b06 	br	15edc <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   15d70:	008000b4 	movhi	r2,2
   15d74:	108e3f04 	addi	r2,r2,14588
   15d78:	10c00017 	ldw	r3,0(r2)
   15d7c:	008000b4 	movhi	r2,2
   15d80:	108e3f04 	addi	r2,r2,14588
   15d84:	10800017 	ldw	r2,0(r2)
   15d88:	10800c03 	ldbu	r2,48(r2)
   15d8c:	10800094 	ori	r2,r2,2
   15d90:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   15d94:	008000b4 	movhi	r2,2
   15d98:	108e3f04 	addi	r2,r2,14588
   15d9c:	10800017 	ldw	r2,0(r2)
   15da0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   15da4:	008000b4 	movhi	r2,2
   15da8:	108e3f04 	addi	r2,r2,14588
   15dac:	10800017 	ldw	r2,0(r2)
   15db0:	e0fffe0b 	ldhu	r3,-8(fp)
   15db4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   15db8:	e13ffd17 	ldw	r4,-12(fp)
   15dbc:	0012f500 	call	12f50 <OS_EventTaskWait>
   15dc0:	e0bff717 	ldw	r2,-36(fp)
   15dc4:	e0bffa15 	stw	r2,-24(fp)
   15dc8:	e0bffa17 	ldw	r2,-24(fp)
   15dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   15dd0:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dd4:	0005303a 	rdctl	r2,status
   15dd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ddc:	e0fffb17 	ldw	r3,-20(fp)
   15de0:	00bfff84 	movi	r2,-2
   15de4:	1884703a 	and	r2,r3,r2
   15de8:	1001703a 	wrctl	status,r2
  
  return context;
   15dec:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15df0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15df4:	008000b4 	movhi	r2,2
   15df8:	108e3f04 	addi	r2,r2,14588
   15dfc:	10800017 	ldw	r2,0(r2)
   15e00:	10800c43 	ldbu	r2,49(r2)
   15e04:	10803fcc 	andi	r2,r2,255
   15e08:	10000326 	beq	r2,zero,15e18 <OSMboxPend+0x1cc>
   15e0c:	108000a0 	cmpeqi	r2,r2,2
   15e10:	1000091e 	bne	r2,zero,15e38 <OSMboxPend+0x1ec>
   15e14:	00000d06 	br	15e4c <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   15e18:	008000b4 	movhi	r2,2
   15e1c:	108e3f04 	addi	r2,r2,14588
   15e20:	10800017 	ldw	r2,0(r2)
   15e24:	10800917 	ldw	r2,36(r2)
   15e28:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   15e2c:	e0bfff17 	ldw	r2,-4(fp)
   15e30:	10000005 	stb	zero,0(r2)
             break;
   15e34:	00001006 	br	15e78 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15e38:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15e3c:	e0bfff17 	ldw	r2,-4(fp)
   15e40:	00c00384 	movi	r3,14
   15e44:	10c00005 	stb	r3,0(r2)
             break;
   15e48:	00000b06 	br	15e78 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   15e4c:	008000b4 	movhi	r2,2
   15e50:	108e3f04 	addi	r2,r2,14588
   15e54:	10800017 	ldw	r2,0(r2)
   15e58:	1009883a 	mov	r4,r2
   15e5c:	e17ffd17 	ldw	r5,-12(fp)
   15e60:	00131a80 	call	131a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   15e64:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15e68:	e0bfff17 	ldw	r2,-4(fp)
   15e6c:	00c00284 	movi	r3,10
   15e70:	10c00005 	stb	r3,0(r2)
             break;
   15e74:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15e78:	008000b4 	movhi	r2,2
   15e7c:	108e3f04 	addi	r2,r2,14588
   15e80:	10800017 	ldw	r2,0(r2)
   15e84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15e88:	008000b4 	movhi	r2,2
   15e8c:	108e3f04 	addi	r2,r2,14588
   15e90:	10800017 	ldw	r2,0(r2)
   15e94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15e98:	008000b4 	movhi	r2,2
   15e9c:	108e3f04 	addi	r2,r2,14588
   15ea0:	10800017 	ldw	r2,0(r2)
   15ea4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15ea8:	008000b4 	movhi	r2,2
   15eac:	108e3f04 	addi	r2,r2,14588
   15eb0:	10800017 	ldw	r2,0(r2)
   15eb4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   15eb8:	008000b4 	movhi	r2,2
   15ebc:	108e3f04 	addi	r2,r2,14588
   15ec0:	10800017 	ldw	r2,0(r2)
   15ec4:	10000915 	stw	zero,36(r2)
   15ec8:	e0bff717 	ldw	r2,-36(fp)
   15ecc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ed0:	e0bffc17 	ldw	r2,-16(fp)
   15ed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15ed8:	e0bff617 	ldw	r2,-40(fp)
}
   15edc:	e037883a 	mov	sp,fp
   15ee0:	dfc00117 	ldw	ra,4(sp)
   15ee4:	df000017 	ldw	fp,0(sp)
   15ee8:	dec00204 	addi	sp,sp,8
   15eec:	f800283a 	ret

00015ef0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15ef0:	defff604 	addi	sp,sp,-40
   15ef4:	dfc00915 	stw	ra,36(sp)
   15ef8:	df000815 	stw	fp,32(sp)
   15efc:	df000804 	addi	fp,sp,32
   15f00:	e13ffd15 	stw	r4,-12(fp)
   15f04:	2805883a 	mov	r2,r5
   15f08:	e1bfff15 	stw	r6,-4(fp)
   15f0c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15f10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15f14:	e0bfff17 	ldw	r2,-4(fp)
   15f18:	1000021e 	bne	r2,zero,15f24 <OSMboxPendAbort+0x34>
        return (0);
   15f1c:	0005883a 	mov	r2,zero
   15f20:	00004906 	br	16048 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15f24:	e0bffd17 	ldw	r2,-12(fp)
   15f28:	1000051e 	bne	r2,zero,15f40 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15f2c:	e0bfff17 	ldw	r2,-4(fp)
   15f30:	00c00104 	movi	r3,4
   15f34:	10c00005 	stb	r3,0(r2)
        return (0);
   15f38:	0005883a 	mov	r2,zero
   15f3c:	00004206 	br	16048 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   15f40:	e0bffd17 	ldw	r2,-12(fp)
   15f44:	10800003 	ldbu	r2,0(r2)
   15f48:	10803fcc 	andi	r2,r2,255
   15f4c:	10800060 	cmpeqi	r2,r2,1
   15f50:	1000051e 	bne	r2,zero,15f68 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15f54:	e0bfff17 	ldw	r2,-4(fp)
   15f58:	00c00044 	movi	r3,1
   15f5c:	10c00005 	stb	r3,0(r2)
        return (0);
   15f60:	0005883a 	mov	r2,zero
   15f64:	00003806 	br	16048 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f68:	0005303a 	rdctl	r2,status
   15f6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f70:	e0fffa17 	ldw	r3,-24(fp)
   15f74:	00bfff84 	movi	r2,-2
   15f78:	1884703a 	and	r2,r3,r2
   15f7c:	1001703a 	wrctl	status,r2
  
  return context;
   15f80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15f84:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   15f88:	e0bffd17 	ldw	r2,-12(fp)
   15f8c:	10800283 	ldbu	r2,10(r2)
   15f90:	10803fcc 	andi	r2,r2,255
   15f94:	10002526 	beq	r2,zero,1602c <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   15f98:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   15f9c:	e0bffe03 	ldbu	r2,-8(fp)
   15fa0:	10800060 	cmpeqi	r2,r2,1
   15fa4:	10000e26 	beq	r2,zero,15fe0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   15fa8:	00000806 	br	15fcc <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   15fac:	e13ffd17 	ldw	r4,-12(fp)
   15fb0:	000b883a 	mov	r5,zero
   15fb4:	01800084 	movi	r6,2
   15fb8:	01c00084 	movi	r7,2
   15fbc:	0012db80 	call	12db8 <OS_EventTaskRdy>
                     nbr_tasks++;
   15fc0:	e0bff803 	ldbu	r2,-32(fp)
   15fc4:	10800044 	addi	r2,r2,1
   15fc8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   15fcc:	e0bffd17 	ldw	r2,-12(fp)
   15fd0:	10800283 	ldbu	r2,10(r2)
   15fd4:	10803fcc 	andi	r2,r2,255
   15fd8:	103ff41e 	bne	r2,zero,15fac <__alt_mem_Flash_flash_data+0xf4015fac>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15fdc:	00000906 	br	16004 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   15fe0:	e13ffd17 	ldw	r4,-12(fp)
   15fe4:	000b883a 	mov	r5,zero
   15fe8:	01800084 	movi	r6,2
   15fec:	01c00084 	movi	r7,2
   15ff0:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 nbr_tasks++;
   15ff4:	e0bff803 	ldbu	r2,-32(fp)
   15ff8:	10800044 	addi	r2,r2,1
   15ffc:	e0bff805 	stb	r2,-32(fp)
                 break;
   16000:	0001883a 	nop
   16004:	e0bff917 	ldw	r2,-28(fp)
   16008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1600c:	e0bffb17 	ldw	r2,-20(fp)
   16010:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   16014:	00137d00 	call	137d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   16018:	e0bfff17 	ldw	r2,-4(fp)
   1601c:	00c00384 	movi	r3,14
   16020:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16024:	e0bff803 	ldbu	r2,-32(fp)
   16028:	00000706 	br	16048 <OSMboxPendAbort+0x158>
   1602c:	e0bff917 	ldw	r2,-28(fp)
   16030:	e0bffc15 	stw	r2,-16(fp)
   16034:	e0bffc17 	ldw	r2,-16(fp)
   16038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1603c:	e0bfff17 	ldw	r2,-4(fp)
   16040:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   16044:	0005883a 	mov	r2,zero
}
   16048:	e037883a 	mov	sp,fp
   1604c:	dfc00117 	ldw	ra,4(sp)
   16050:	df000017 	ldw	fp,0(sp)
   16054:	dec00204 	addi	sp,sp,8
   16058:	f800283a 	ret

0001605c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   1605c:	defff704 	addi	sp,sp,-36
   16060:	dfc00815 	stw	ra,32(sp)
   16064:	df000715 	stw	fp,28(sp)
   16068:	df000704 	addi	fp,sp,28
   1606c:	e13ffe15 	stw	r4,-8(fp)
   16070:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16074:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16078:	e0bffe17 	ldw	r2,-8(fp)
   1607c:	1000021e 	bne	r2,zero,16088 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   16080:	00800104 	movi	r2,4
   16084:	00003406 	br	16158 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   16088:	e0bfff17 	ldw	r2,-4(fp)
   1608c:	1000021e 	bne	r2,zero,16098 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   16090:	008000c4 	movi	r2,3
   16094:	00003006 	br	16158 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   16098:	e0bffe17 	ldw	r2,-8(fp)
   1609c:	10800003 	ldbu	r2,0(r2)
   160a0:	10803fcc 	andi	r2,r2,255
   160a4:	10800060 	cmpeqi	r2,r2,1
   160a8:	1000021e 	bne	r2,zero,160b4 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   160ac:	00800044 	movi	r2,1
   160b0:	00002906 	br	16158 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160b4:	0005303a 	rdctl	r2,status
   160b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160bc:	e0fffa17 	ldw	r3,-24(fp)
   160c0:	00bfff84 	movi	r2,-2
   160c4:	1884703a 	and	r2,r3,r2
   160c8:	1001703a 	wrctl	status,r2
  
  return context;
   160cc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   160d0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   160d4:	e0bffe17 	ldw	r2,-8(fp)
   160d8:	10800283 	ldbu	r2,10(r2)
   160dc:	10803fcc 	andi	r2,r2,255
   160e0:	10000c26 	beq	r2,zero,16114 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   160e4:	e13ffe17 	ldw	r4,-8(fp)
   160e8:	e17fff17 	ldw	r5,-4(fp)
   160ec:	01800084 	movi	r6,2
   160f0:	000f883a 	mov	r7,zero
   160f4:	0012db80 	call	12db8 <OS_EventTaskRdy>
   160f8:	e0bff917 	ldw	r2,-28(fp)
   160fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16100:	e0bffb17 	ldw	r2,-20(fp)
   16104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   16108:	00137d00 	call	137d0 <OS_Sched>
        return (OS_ERR_NONE);
   1610c:	0005883a 	mov	r2,zero
   16110:	00001106 	br	16158 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   16114:	e0bffe17 	ldw	r2,-8(fp)
   16118:	10800117 	ldw	r2,4(r2)
   1611c:	10000626 	beq	r2,zero,16138 <OSMboxPost+0xdc>
   16120:	e0bff917 	ldw	r2,-28(fp)
   16124:	e0bffc15 	stw	r2,-16(fp)
   16128:	e0bffc17 	ldw	r2,-16(fp)
   1612c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   16130:	00800504 	movi	r2,20
   16134:	00000806 	br	16158 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   16138:	e0bffe17 	ldw	r2,-8(fp)
   1613c:	e0ffff17 	ldw	r3,-4(fp)
   16140:	10c00115 	stw	r3,4(r2)
   16144:	e0bff917 	ldw	r2,-28(fp)
   16148:	e0bffd15 	stw	r2,-12(fp)
   1614c:	e0bffd17 	ldw	r2,-12(fp)
   16150:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16154:	0005883a 	mov	r2,zero
}
   16158:	e037883a 	mov	sp,fp
   1615c:	dfc00117 	ldw	ra,4(sp)
   16160:	df000017 	ldw	fp,0(sp)
   16164:	dec00204 	addi	sp,sp,8
   16168:	f800283a 	ret

0001616c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1616c:	defff604 	addi	sp,sp,-40
   16170:	dfc00915 	stw	ra,36(sp)
   16174:	df000815 	stw	fp,32(sp)
   16178:	df000804 	addi	fp,sp,32
   1617c:	e13ffd15 	stw	r4,-12(fp)
   16180:	e17ffe15 	stw	r5,-8(fp)
   16184:	3005883a 	mov	r2,r6
   16188:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1618c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16190:	e0bffd17 	ldw	r2,-12(fp)
   16194:	1000021e 	bne	r2,zero,161a0 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   16198:	00800104 	movi	r2,4
   1619c:	00004506 	br	162b4 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   161a0:	e0bffe17 	ldw	r2,-8(fp)
   161a4:	1000021e 	bne	r2,zero,161b0 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   161a8:	008000c4 	movi	r2,3
   161ac:	00004106 	br	162b4 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   161b0:	e0bffd17 	ldw	r2,-12(fp)
   161b4:	10800003 	ldbu	r2,0(r2)
   161b8:	10803fcc 	andi	r2,r2,255
   161bc:	10800060 	cmpeqi	r2,r2,1
   161c0:	1000021e 	bne	r2,zero,161cc <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   161c4:	00800044 	movi	r2,1
   161c8:	00003a06 	br	162b4 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161cc:	0005303a 	rdctl	r2,status
   161d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161d4:	e0fff917 	ldw	r3,-28(fp)
   161d8:	00bfff84 	movi	r2,-2
   161dc:	1884703a 	and	r2,r3,r2
   161e0:	1001703a 	wrctl	status,r2
  
  return context;
   161e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   161e8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   161ec:	e0bffd17 	ldw	r2,-12(fp)
   161f0:	10800283 	ldbu	r2,10(r2)
   161f4:	10803fcc 	andi	r2,r2,255
   161f8:	10001d26 	beq	r2,zero,16270 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   161fc:	e0bfff03 	ldbu	r2,-4(fp)
   16200:	1080004c 	andi	r2,r2,1
   16204:	10000b26 	beq	r2,zero,16234 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   16208:	00000506 	br	16220 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1620c:	e13ffd17 	ldw	r4,-12(fp)
   16210:	e17ffe17 	ldw	r5,-8(fp)
   16214:	01800084 	movi	r6,2
   16218:	000f883a 	mov	r7,zero
   1621c:	0012db80 	call	12db8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   16220:	e0bffd17 	ldw	r2,-12(fp)
   16224:	10800283 	ldbu	r2,10(r2)
   16228:	10803fcc 	andi	r2,r2,255
   1622c:	103ff71e 	bne	r2,zero,1620c <__alt_mem_Flash_flash_data+0xf401620c>
   16230:	00000506 	br	16248 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16234:	e13ffd17 	ldw	r4,-12(fp)
   16238:	e17ffe17 	ldw	r5,-8(fp)
   1623c:	01800084 	movi	r6,2
   16240:	000f883a 	mov	r7,zero
   16244:	0012db80 	call	12db8 <OS_EventTaskRdy>
   16248:	e0bff817 	ldw	r2,-32(fp)
   1624c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16250:	e0bffa17 	ldw	r2,-24(fp)
   16254:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   16258:	e0bfff03 	ldbu	r2,-4(fp)
   1625c:	1080010c 	andi	r2,r2,4
   16260:	1000011e 	bne	r2,zero,16268 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   16264:	00137d00 	call	137d0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   16268:	0005883a 	mov	r2,zero
   1626c:	00001106 	br	162b4 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   16270:	e0bffd17 	ldw	r2,-12(fp)
   16274:	10800117 	ldw	r2,4(r2)
   16278:	10000626 	beq	r2,zero,16294 <OSMboxPostOpt+0x128>
   1627c:	e0bff817 	ldw	r2,-32(fp)
   16280:	e0bffb15 	stw	r2,-20(fp)
   16284:	e0bffb17 	ldw	r2,-20(fp)
   16288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   1628c:	00800504 	movi	r2,20
   16290:	00000806 	br	162b4 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   16294:	e0bffd17 	ldw	r2,-12(fp)
   16298:	e0fffe17 	ldw	r3,-8(fp)
   1629c:	10c00115 	stw	r3,4(r2)
   162a0:	e0bff817 	ldw	r2,-32(fp)
   162a4:	e0bffc15 	stw	r2,-16(fp)
   162a8:	e0bffc17 	ldw	r2,-16(fp)
   162ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   162b0:	0005883a 	mov	r2,zero
}
   162b4:	e037883a 	mov	sp,fp
   162b8:	dfc00117 	ldw	ra,4(sp)
   162bc:	df000017 	ldw	fp,0(sp)
   162c0:	dec00204 	addi	sp,sp,8
   162c4:	f800283a 	ret

000162c8 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   162c8:	defff704 	addi	sp,sp,-36
   162cc:	df000815 	stw	fp,32(sp)
   162d0:	df000804 	addi	fp,sp,32
   162d4:	e13ffe15 	stw	r4,-8(fp)
   162d8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   162dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   162e0:	e0bffe17 	ldw	r2,-8(fp)
   162e4:	1000021e 	bne	r2,zero,162f0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   162e8:	00800104 	movi	r2,4
   162ec:	00003606 	br	163c8 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   162f0:	e0bfff17 	ldw	r2,-4(fp)
   162f4:	1000021e 	bne	r2,zero,16300 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   162f8:	00800244 	movi	r2,9
   162fc:	00003206 	br	163c8 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   16300:	e0bffe17 	ldw	r2,-8(fp)
   16304:	10800003 	ldbu	r2,0(r2)
   16308:	10803fcc 	andi	r2,r2,255
   1630c:	10800060 	cmpeqi	r2,r2,1
   16310:	1000021e 	bne	r2,zero,1631c <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16314:	00800044 	movi	r2,1
   16318:	00002b06 	br	163c8 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1631c:	0005303a 	rdctl	r2,status
   16320:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16324:	e0fffc17 	ldw	r3,-16(fp)
   16328:	00bfff84 	movi	r2,-2
   1632c:	1884703a 	and	r2,r3,r2
   16330:	1001703a 	wrctl	status,r2
  
  return context;
   16334:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16338:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   1633c:	e0bffe17 	ldw	r2,-8(fp)
   16340:	10c00283 	ldbu	r3,10(r2)
   16344:	e0bfff17 	ldw	r2,-4(fp)
   16348:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   1634c:	e0bffe17 	ldw	r2,-8(fp)
   16350:	108002c4 	addi	r2,r2,11
   16354:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   16358:	e0bfff17 	ldw	r2,-4(fp)
   1635c:	10800104 	addi	r2,r2,4
   16360:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16364:	e03ff805 	stb	zero,-32(fp)
   16368:	00000b06 	br	16398 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   1636c:	e0bffa17 	ldw	r2,-24(fp)
   16370:	10c00044 	addi	r3,r2,1
   16374:	e0fffa15 	stw	r3,-24(fp)
   16378:	e0fff917 	ldw	r3,-28(fp)
   1637c:	19000044 	addi	r4,r3,1
   16380:	e13ff915 	stw	r4,-28(fp)
   16384:	18c00003 	ldbu	r3,0(r3)
   16388:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1638c:	e0bff803 	ldbu	r2,-32(fp)
   16390:	10800044 	addi	r2,r2,1
   16394:	e0bff805 	stb	r2,-32(fp)
   16398:	e0bff803 	ldbu	r2,-32(fp)
   1639c:	108000f0 	cmpltui	r2,r2,3
   163a0:	103ff21e 	bne	r2,zero,1636c <__alt_mem_Flash_flash_data+0xf401636c>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   163a4:	e0bffe17 	ldw	r2,-8(fp)
   163a8:	10c00117 	ldw	r3,4(r2)
   163ac:	e0bfff17 	ldw	r2,-4(fp)
   163b0:	10c00015 	stw	r3,0(r2)
   163b4:	e0bffb17 	ldw	r2,-20(fp)
   163b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163bc:	e0bffd17 	ldw	r2,-12(fp)
   163c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   163c4:	0005883a 	mov	r2,zero
}
   163c8:	e037883a 	mov	sp,fp
   163cc:	df000017 	ldw	fp,0(sp)
   163d0:	dec00104 	addi	sp,sp,4
   163d4:	f800283a 	ret

000163d8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   163d8:	defff404 	addi	sp,sp,-48
   163dc:	df000b15 	stw	fp,44(sp)
   163e0:	df000b04 	addi	fp,sp,44
   163e4:	e13ffc15 	stw	r4,-16(fp)
   163e8:	e17ffd15 	stw	r5,-12(fp)
   163ec:	e1bffe15 	stw	r6,-8(fp)
   163f0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   163f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   163f8:	e0bfff17 	ldw	r2,-4(fp)
   163fc:	1000021e 	bne	r2,zero,16408 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   16400:	0005883a 	mov	r2,zero
   16404:	00006d06 	br	165bc <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   16408:	e0bffc17 	ldw	r2,-16(fp)
   1640c:	1000051e 	bne	r2,zero,16424 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16410:	e0bfff17 	ldw	r2,-4(fp)
   16414:	00c01884 	movi	r3,98
   16418:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1641c:	0005883a 	mov	r2,zero
   16420:	00006606 	br	165bc <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   16424:	e0bffc17 	ldw	r2,-16(fp)
   16428:	108000cc 	andi	r2,r2,3
   1642c:	10000526 	beq	r2,zero,16444 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16430:	e0bfff17 	ldw	r2,-4(fp)
   16434:	00c01884 	movi	r3,98
   16438:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1643c:	0005883a 	mov	r2,zero
   16440:	00005e06 	br	165bc <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	108000a8 	cmpgeui	r2,r2,2
   1644c:	1000051e 	bne	r2,zero,16464 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   16450:	e0bfff17 	ldw	r2,-4(fp)
   16454:	00c016c4 	movi	r3,91
   16458:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1645c:	0005883a 	mov	r2,zero
   16460:	00005606 	br	165bc <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   16464:	e0bffe17 	ldw	r2,-8(fp)
   16468:	10800128 	cmpgeui	r2,r2,4
   1646c:	1000051e 	bne	r2,zero,16484 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   16470:	e0bfff17 	ldw	r2,-4(fp)
   16474:	00c01704 	movi	r3,92
   16478:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1647c:	0005883a 	mov	r2,zero
   16480:	00004e06 	br	165bc <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16484:	0005303a 	rdctl	r2,status
   16488:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1648c:	e0fffa17 	ldw	r3,-24(fp)
   16490:	00bfff84 	movi	r2,-2
   16494:	1884703a 	and	r2,r3,r2
   16498:	1001703a 	wrctl	status,r2
  
  return context;
   1649c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   164a0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   164a4:	008000b4 	movhi	r2,2
   164a8:	108e3904 	addi	r2,r2,14564
   164ac:	10800017 	ldw	r2,0(r2)
   164b0:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   164b4:	008000b4 	movhi	r2,2
   164b8:	108e3904 	addi	r2,r2,14564
   164bc:	10800017 	ldw	r2,0(r2)
   164c0:	10000726 	beq	r2,zero,164e0 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   164c4:	008000b4 	movhi	r2,2
   164c8:	108e3904 	addi	r2,r2,14564
   164cc:	10800017 	ldw	r2,0(r2)
   164d0:	10c00117 	ldw	r3,4(r2)
   164d4:	008000b4 	movhi	r2,2
   164d8:	108e3904 	addi	r2,r2,14564
   164dc:	10c00015 	stw	r3,0(r2)
   164e0:	e0bff817 	ldw	r2,-32(fp)
   164e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164e8:	e0bffb17 	ldw	r2,-20(fp)
   164ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   164f0:	e0bff917 	ldw	r2,-28(fp)
   164f4:	1000051e 	bne	r2,zero,1650c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   164f8:	e0bfff17 	ldw	r2,-4(fp)
   164fc:	00c01684 	movi	r3,90
   16500:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16504:	0005883a 	mov	r2,zero
   16508:	00002c06 	br	165bc <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1650c:	e0bffc17 	ldw	r2,-16(fp)
   16510:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   16514:	e0fffc17 	ldw	r3,-16(fp)
   16518:	e0bffe17 	ldw	r2,-8(fp)
   1651c:	1885883a 	add	r2,r3,r2
   16520:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   16524:	e03ff715 	stw	zero,-36(fp)
   16528:	00000c06 	br	1655c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1652c:	e0bff617 	ldw	r2,-40(fp)
   16530:	e0fff517 	ldw	r3,-44(fp)
   16534:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   16538:	e0bff517 	ldw	r2,-44(fp)
   1653c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   16540:	e0fff517 	ldw	r3,-44(fp)
   16544:	e0bffe17 	ldw	r2,-8(fp)
   16548:	1885883a 	add	r2,r3,r2
   1654c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   16550:	e0bff717 	ldw	r2,-36(fp)
   16554:	10800044 	addi	r2,r2,1
   16558:	e0bff715 	stw	r2,-36(fp)
   1655c:	e0bffd17 	ldw	r2,-12(fp)
   16560:	10bfffc4 	addi	r2,r2,-1
   16564:	e0fff717 	ldw	r3,-36(fp)
   16568:	18bff036 	bltu	r3,r2,1652c <__alt_mem_Flash_flash_data+0xf401652c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1656c:	e0bff617 	ldw	r2,-40(fp)
   16570:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   16574:	e0bff917 	ldw	r2,-28(fp)
   16578:	e0fffc17 	ldw	r3,-16(fp)
   1657c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   16580:	e0bff917 	ldw	r2,-28(fp)
   16584:	e0fffc17 	ldw	r3,-16(fp)
   16588:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1658c:	e0bff917 	ldw	r2,-28(fp)
   16590:	e0fffd17 	ldw	r3,-12(fp)
   16594:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   16598:	e0bff917 	ldw	r2,-28(fp)
   1659c:	e0fffd17 	ldw	r3,-12(fp)
   165a0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   165a4:	e0bff917 	ldw	r2,-28(fp)
   165a8:	e0fffe17 	ldw	r3,-8(fp)
   165ac:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   165b0:	e0bfff17 	ldw	r2,-4(fp)
   165b4:	10000005 	stb	zero,0(r2)
    return (pmem);
   165b8:	e0bff917 	ldw	r2,-28(fp)
}
   165bc:	e037883a 	mov	sp,fp
   165c0:	df000017 	ldw	fp,0(sp)
   165c4:	dec00104 	addi	sp,sp,4
   165c8:	f800283a 	ret

000165cc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   165cc:	defff804 	addi	sp,sp,-32
   165d0:	df000715 	stw	fp,28(sp)
   165d4:	df000704 	addi	fp,sp,28
   165d8:	e13ffe15 	stw	r4,-8(fp)
   165dc:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   165e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   165e4:	e0bfff17 	ldw	r2,-4(fp)
   165e8:	1000021e 	bne	r2,zero,165f4 <OSMemGet+0x28>
        return ((void *)0);
   165ec:	0005883a 	mov	r2,zero
   165f0:	00002e06 	br	166ac <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   165f4:	e0bffe17 	ldw	r2,-8(fp)
   165f8:	1000051e 	bne	r2,zero,16610 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   165fc:	e0bfff17 	ldw	r2,-4(fp)
   16600:	00c01804 	movi	r3,96
   16604:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16608:	0005883a 	mov	r2,zero
   1660c:	00002706 	br	166ac <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16610:	0005303a 	rdctl	r2,status
   16614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16618:	e0fffb17 	ldw	r3,-20(fp)
   1661c:	00bfff84 	movi	r2,-2
   16620:	1884703a 	and	r2,r3,r2
   16624:	1001703a 	wrctl	status,r2
  
  return context;
   16628:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1662c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   16630:	e0bffe17 	ldw	r2,-8(fp)
   16634:	10800417 	ldw	r2,16(r2)
   16638:	10001426 	beq	r2,zero,1668c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1663c:	e0bffe17 	ldw	r2,-8(fp)
   16640:	10800117 	ldw	r2,4(r2)
   16644:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   16648:	e0bffa17 	ldw	r2,-24(fp)
   1664c:	10c00017 	ldw	r3,0(r2)
   16650:	e0bffe17 	ldw	r2,-8(fp)
   16654:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   16658:	e0bffe17 	ldw	r2,-8(fp)
   1665c:	10800417 	ldw	r2,16(r2)
   16660:	10ffffc4 	addi	r3,r2,-1
   16664:	e0bffe17 	ldw	r2,-8(fp)
   16668:	10c00415 	stw	r3,16(r2)
   1666c:	e0bff917 	ldw	r2,-28(fp)
   16670:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16674:	e0bffc17 	ldw	r2,-16(fp)
   16678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1667c:	e0bfff17 	ldw	r2,-4(fp)
   16680:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   16684:	e0bffa17 	ldw	r2,-24(fp)
   16688:	00000806 	br	166ac <OSMemGet+0xe0>
   1668c:	e0bff917 	ldw	r2,-28(fp)
   16690:	e0bffd15 	stw	r2,-12(fp)
   16694:	e0bffd17 	ldw	r2,-12(fp)
   16698:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1669c:	e0bfff17 	ldw	r2,-4(fp)
   166a0:	00c01744 	movi	r3,93
   166a4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   166a8:	0005883a 	mov	r2,zero
}
   166ac:	e037883a 	mov	sp,fp
   166b0:	df000017 	ldw	fp,0(sp)
   166b4:	dec00104 	addi	sp,sp,4
   166b8:	f800283a 	ret

000166bc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   166bc:	defff704 	addi	sp,sp,-36
   166c0:	dfc00815 	stw	ra,32(sp)
   166c4:	df000715 	stw	fp,28(sp)
   166c8:	df000704 	addi	fp,sp,28
   166cc:	e13ffd15 	stw	r4,-12(fp)
   166d0:	e17ffe15 	stw	r5,-8(fp)
   166d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   166d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   166dc:	e0bfff17 	ldw	r2,-4(fp)
   166e0:	1000021e 	bne	r2,zero,166ec <OSMemNameGet+0x30>
        return (0);
   166e4:	0005883a 	mov	r2,zero
   166e8:	00002d06 	br	167a0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   166ec:	e0bffd17 	ldw	r2,-12(fp)
   166f0:	1000051e 	bne	r2,zero,16708 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   166f4:	e0bfff17 	ldw	r2,-4(fp)
   166f8:	00c01804 	movi	r3,96
   166fc:	10c00005 	stb	r3,0(r2)
        return (0);
   16700:	0005883a 	mov	r2,zero
   16704:	00002606 	br	167a0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16708:	e0bffe17 	ldw	r2,-8(fp)
   1670c:	1000051e 	bne	r2,zero,16724 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16710:	e0bfff17 	ldw	r2,-4(fp)
   16714:	00c00304 	movi	r3,12
   16718:	10c00005 	stb	r3,0(r2)
        return (0);
   1671c:	0005883a 	mov	r2,zero
   16720:	00001f06 	br	167a0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16724:	008000b4 	movhi	r2,2
   16728:	108e3e04 	addi	r2,r2,14584
   1672c:	10800003 	ldbu	r2,0(r2)
   16730:	10803fcc 	andi	r2,r2,255
   16734:	10000526 	beq	r2,zero,1674c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   16738:	e0bfff17 	ldw	r2,-4(fp)
   1673c:	00c00444 	movi	r3,17
   16740:	10c00005 	stb	r3,0(r2)
        return (0);
   16744:	0005883a 	mov	r2,zero
   16748:	00001506 	br	167a0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1674c:	0005303a 	rdctl	r2,status
   16750:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16754:	e0fffb17 	ldw	r3,-20(fp)
   16758:	00bfff84 	movi	r2,-2
   1675c:	1884703a 	and	r2,r3,r2
   16760:	1001703a 	wrctl	status,r2
  
  return context;
   16764:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16768:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1676c:	e0bffd17 	ldw	r2,-12(fp)
   16770:	10800504 	addi	r2,r2,20
   16774:	e13ffe17 	ldw	r4,-8(fp)
   16778:	100b883a 	mov	r5,r2
   1677c:	001390c0 	call	1390c <OS_StrCopy>
   16780:	e0bffa05 	stb	r2,-24(fp)
   16784:	e0bff917 	ldw	r2,-28(fp)
   16788:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1678c:	e0bffc17 	ldw	r2,-16(fp)
   16790:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16794:	e0bfff17 	ldw	r2,-4(fp)
   16798:	10000005 	stb	zero,0(r2)
    return (len);
   1679c:	e0bffa03 	ldbu	r2,-24(fp)
}
   167a0:	e037883a 	mov	sp,fp
   167a4:	dfc00117 	ldw	ra,4(sp)
   167a8:	df000017 	ldw	fp,0(sp)
   167ac:	dec00204 	addi	sp,sp,8
   167b0:	f800283a 	ret

000167b4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   167b4:	defff604 	addi	sp,sp,-40
   167b8:	dfc00915 	stw	ra,36(sp)
   167bc:	df000815 	stw	fp,32(sp)
   167c0:	df000804 	addi	fp,sp,32
   167c4:	e13ffd15 	stw	r4,-12(fp)
   167c8:	e17ffe15 	stw	r5,-8(fp)
   167cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   167d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   167d4:	e0bfff17 	ldw	r2,-4(fp)
   167d8:	1000011e 	bne	r2,zero,167e0 <OSMemNameSet+0x2c>
        return;
   167dc:	00003606 	br	168b8 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   167e0:	e0bffd17 	ldw	r2,-12(fp)
   167e4:	1000041e 	bne	r2,zero,167f8 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   167e8:	e0bfff17 	ldw	r2,-4(fp)
   167ec:	00c01804 	movi	r3,96
   167f0:	10c00005 	stb	r3,0(r2)
        return;
   167f4:	00003006 	br	168b8 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   167f8:	e0bffe17 	ldw	r2,-8(fp)
   167fc:	1000041e 	bne	r2,zero,16810 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   16800:	e0bfff17 	ldw	r2,-4(fp)
   16804:	00c00304 	movi	r3,12
   16808:	10c00005 	stb	r3,0(r2)
        return;
   1680c:	00002a06 	br	168b8 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16810:	008000b4 	movhi	r2,2
   16814:	108e3e04 	addi	r2,r2,14584
   16818:	10800003 	ldbu	r2,0(r2)
   1681c:	10803fcc 	andi	r2,r2,255
   16820:	10000426 	beq	r2,zero,16834 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   16824:	e0bfff17 	ldw	r2,-4(fp)
   16828:	00c00484 	movi	r3,18
   1682c:	10c00005 	stb	r3,0(r2)
        return;
   16830:	00002106 	br	168b8 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16834:	0005303a 	rdctl	r2,status
   16838:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1683c:	e0fffa17 	ldw	r3,-24(fp)
   16840:	00bfff84 	movi	r2,-2
   16844:	1884703a 	and	r2,r3,r2
   16848:	1001703a 	wrctl	status,r2
  
  return context;
   1684c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16850:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16854:	e13ffe17 	ldw	r4,-8(fp)
   16858:	00139800 	call	13980 <OS_StrLen>
   1685c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   16860:	e0bff903 	ldbu	r2,-28(fp)
   16864:	10800830 	cmpltui	r2,r2,32
   16868:	1000081e 	bne	r2,zero,1688c <OSMemNameSet+0xd8>
   1686c:	e0bff817 	ldw	r2,-32(fp)
   16870:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16874:	e0bffb17 	ldw	r2,-20(fp)
   16878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1687c:	e0bfff17 	ldw	r2,-4(fp)
   16880:	00c018c4 	movi	r3,99
   16884:	10c00005 	stb	r3,0(r2)
        return;
   16888:	00000b06 	br	168b8 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   1688c:	e0bffd17 	ldw	r2,-12(fp)
   16890:	10800504 	addi	r2,r2,20
   16894:	1009883a 	mov	r4,r2
   16898:	e17ffe17 	ldw	r5,-8(fp)
   1689c:	001390c0 	call	1390c <OS_StrCopy>
   168a0:	e0bff817 	ldw	r2,-32(fp)
   168a4:	e0bffc15 	stw	r2,-16(fp)
   168a8:	e0bffc17 	ldw	r2,-16(fp)
   168ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   168b0:	e0bfff17 	ldw	r2,-4(fp)
   168b4:	10000005 	stb	zero,0(r2)
}
   168b8:	e037883a 	mov	sp,fp
   168bc:	dfc00117 	ldw	ra,4(sp)
   168c0:	df000017 	ldw	fp,0(sp)
   168c4:	dec00204 	addi	sp,sp,8
   168c8:	f800283a 	ret

000168cc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   168cc:	defff904 	addi	sp,sp,-28
   168d0:	df000615 	stw	fp,24(sp)
   168d4:	df000604 	addi	fp,sp,24
   168d8:	e13ffe15 	stw	r4,-8(fp)
   168dc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   168e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   168e4:	e0bffe17 	ldw	r2,-8(fp)
   168e8:	1000021e 	bne	r2,zero,168f4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   168ec:	00801804 	movi	r2,96
   168f0:	00002806 	br	16994 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   168f4:	e0bfff17 	ldw	r2,-4(fp)
   168f8:	1000021e 	bne	r2,zero,16904 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   168fc:	008017c4 	movi	r2,95
   16900:	00002406 	br	16994 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16904:	0005303a 	rdctl	r2,status
   16908:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1690c:	e0fffb17 	ldw	r3,-20(fp)
   16910:	00bfff84 	movi	r2,-2
   16914:	1884703a 	and	r2,r3,r2
   16918:	1001703a 	wrctl	status,r2
  
  return context;
   1691c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16920:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   16924:	e0bffe17 	ldw	r2,-8(fp)
   16928:	10c00417 	ldw	r3,16(r2)
   1692c:	e0bffe17 	ldw	r2,-8(fp)
   16930:	10800317 	ldw	r2,12(r2)
   16934:	18800636 	bltu	r3,r2,16950 <OSMemPut+0x84>
   16938:	e0bffa17 	ldw	r2,-24(fp)
   1693c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16940:	e0bffc17 	ldw	r2,-16(fp)
   16944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   16948:	00801784 	movi	r2,94
   1694c:	00001106 	br	16994 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   16950:	e0bffe17 	ldw	r2,-8(fp)
   16954:	10c00117 	ldw	r3,4(r2)
   16958:	e0bfff17 	ldw	r2,-4(fp)
   1695c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   16960:	e0bffe17 	ldw	r2,-8(fp)
   16964:	e0ffff17 	ldw	r3,-4(fp)
   16968:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1696c:	e0bffe17 	ldw	r2,-8(fp)
   16970:	10800417 	ldw	r2,16(r2)
   16974:	10c00044 	addi	r3,r2,1
   16978:	e0bffe17 	ldw	r2,-8(fp)
   1697c:	10c00415 	stw	r3,16(r2)
   16980:	e0bffa17 	ldw	r2,-24(fp)
   16984:	e0bffd15 	stw	r2,-12(fp)
   16988:	e0bffd17 	ldw	r2,-12(fp)
   1698c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   16990:	0005883a 	mov	r2,zero
}
   16994:	e037883a 	mov	sp,fp
   16998:	df000017 	ldw	fp,0(sp)
   1699c:	dec00104 	addi	sp,sp,4
   169a0:	f800283a 	ret

000169a4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   169a4:	defffa04 	addi	sp,sp,-24
   169a8:	df000515 	stw	fp,20(sp)
   169ac:	df000504 	addi	fp,sp,20
   169b0:	e13ffe15 	stw	r4,-8(fp)
   169b4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   169b8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   169bc:	e0bffe17 	ldw	r2,-8(fp)
   169c0:	1000021e 	bne	r2,zero,169cc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   169c4:	00801804 	movi	r2,96
   169c8:	00002c06 	br	16a7c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   169cc:	e0bfff17 	ldw	r2,-4(fp)
   169d0:	1000021e 	bne	r2,zero,169dc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   169d4:	00801844 	movi	r2,97
   169d8:	00002806 	br	16a7c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169dc:	0005303a 	rdctl	r2,status
   169e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169e4:	e0fffc17 	ldw	r3,-16(fp)
   169e8:	00bfff84 	movi	r2,-2
   169ec:	1884703a 	and	r2,r3,r2
   169f0:	1001703a 	wrctl	status,r2
  
  return context;
   169f4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   169f8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   169fc:	e0bffe17 	ldw	r2,-8(fp)
   16a00:	10c00017 	ldw	r3,0(r2)
   16a04:	e0bfff17 	ldw	r2,-4(fp)
   16a08:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   16a0c:	e0bffe17 	ldw	r2,-8(fp)
   16a10:	10c00117 	ldw	r3,4(r2)
   16a14:	e0bfff17 	ldw	r2,-4(fp)
   16a18:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	10c00217 	ldw	r3,8(r2)
   16a24:	e0bfff17 	ldw	r2,-4(fp)
   16a28:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   16a2c:	e0bffe17 	ldw	r2,-8(fp)
   16a30:	10c00317 	ldw	r3,12(r2)
   16a34:	e0bfff17 	ldw	r2,-4(fp)
   16a38:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   16a3c:	e0bffe17 	ldw	r2,-8(fp)
   16a40:	10c00417 	ldw	r3,16(r2)
   16a44:	e0bfff17 	ldw	r2,-4(fp)
   16a48:	10c00415 	stw	r3,16(r2)
   16a4c:	e0bffb17 	ldw	r2,-20(fp)
   16a50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a54:	e0bffd17 	ldw	r2,-12(fp)
   16a58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   16a5c:	e0bfff17 	ldw	r2,-4(fp)
   16a60:	10c00317 	ldw	r3,12(r2)
   16a64:	e0bfff17 	ldw	r2,-4(fp)
   16a68:	10800417 	ldw	r2,16(r2)
   16a6c:	1887c83a 	sub	r3,r3,r2
   16a70:	e0bfff17 	ldw	r2,-4(fp)
   16a74:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   16a78:	0005883a 	mov	r2,zero
}
   16a7c:	e037883a 	mov	sp,fp
   16a80:	df000017 	ldw	fp,0(sp)
   16a84:	dec00104 	addi	sp,sp,4
   16a88:	f800283a 	ret

00016a8c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   16a8c:	defffc04 	addi	sp,sp,-16
   16a90:	dfc00315 	stw	ra,12(sp)
   16a94:	df000215 	stw	fp,8(sp)
   16a98:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   16a9c:	010000f4 	movhi	r4,3
   16aa0:	2137a004 	addi	r4,r4,-8576
   16aa4:	01430c04 	movi	r5,3120
   16aa8:	001371c0 	call	1371c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   16aac:	008000f4 	movhi	r2,3
   16ab0:	10b7a004 	addi	r2,r2,-8576
   16ab4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16ab8:	e03fff0d 	sth	zero,-4(fp)
   16abc:	00001306 	br	16b0c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   16ac0:	e0bfff0b 	ldhu	r2,-4(fp)
   16ac4:	10800044 	addi	r2,r2,1
   16ac8:	10c00d24 	muli	r3,r2,52
   16acc:	008000f4 	movhi	r2,3
   16ad0:	10b7a004 	addi	r2,r2,-8576
   16ad4:	1887883a 	add	r3,r3,r2
   16ad8:	e0bffe17 	ldw	r2,-8(fp)
   16adc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   16ae0:	e0bffe17 	ldw	r2,-8(fp)
   16ae4:	00c00fc4 	movi	r3,63
   16ae8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   16aec:	e0bffe17 	ldw	r2,-8(fp)
   16af0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   16af4:	e0bffe17 	ldw	r2,-8(fp)
   16af8:	10800d04 	addi	r2,r2,52
   16afc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16b00:	e0bfff0b 	ldhu	r2,-4(fp)
   16b04:	10800044 	addi	r2,r2,1
   16b08:	e0bfff0d 	sth	r2,-4(fp)
   16b0c:	e0bfff0b 	ldhu	r2,-4(fp)
   16b10:	10800ef0 	cmpltui	r2,r2,59
   16b14:	103fea1e 	bne	r2,zero,16ac0 <__alt_mem_Flash_flash_data+0xf4016ac0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   16b18:	e0bffe17 	ldw	r2,-8(fp)
   16b1c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   16b20:	e0bffe17 	ldw	r2,-8(fp)
   16b24:	00c00fc4 	movi	r3,63
   16b28:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   16b2c:	e0bffe17 	ldw	r2,-8(fp)
   16b30:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   16b34:	008000b4 	movhi	r2,2
   16b38:	108e3904 	addi	r2,r2,14564
   16b3c:	00c000f4 	movhi	r3,3
   16b40:	18f7a004 	addi	r3,r3,-8576
   16b44:	10c00015 	stw	r3,0(r2)
#endif
}
   16b48:	e037883a 	mov	sp,fp
   16b4c:	dfc00117 	ldw	ra,4(sp)
   16b50:	df000017 	ldw	fp,0(sp)
   16b54:	dec00204 	addi	sp,sp,8
   16b58:	f800283a 	ret

00016b5c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   16b5c:	defff804 	addi	sp,sp,-32
   16b60:	df000715 	stw	fp,28(sp)
   16b64:	df000704 	addi	fp,sp,28
   16b68:	e13ffe15 	stw	r4,-8(fp)
   16b6c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16b70:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16b74:	e0bfff17 	ldw	r2,-4(fp)
   16b78:	1000021e 	bne	r2,zero,16b84 <OSQAccept+0x28>
        return ((void *)0);
   16b7c:	0005883a 	mov	r2,zero
   16b80:	00004206 	br	16c8c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16b84:	e0bffe17 	ldw	r2,-8(fp)
   16b88:	1000051e 	bne	r2,zero,16ba0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16b8c:	e0bfff17 	ldw	r2,-4(fp)
   16b90:	00c00104 	movi	r3,4
   16b94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16b98:	0005883a 	mov	r2,zero
   16b9c:	00003b06 	br	16c8c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   16ba0:	e0bffe17 	ldw	r2,-8(fp)
   16ba4:	10800003 	ldbu	r2,0(r2)
   16ba8:	10803fcc 	andi	r2,r2,255
   16bac:	108000a0 	cmpeqi	r2,r2,2
   16bb0:	1000051e 	bne	r2,zero,16bc8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16bb4:	e0bfff17 	ldw	r2,-4(fp)
   16bb8:	00c00044 	movi	r3,1
   16bbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16bc0:	0005883a 	mov	r2,zero
   16bc4:	00003106 	br	16c8c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bc8:	0005303a 	rdctl	r2,status
   16bcc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bd0:	e0fffc17 	ldw	r3,-16(fp)
   16bd4:	00bfff84 	movi	r2,-2
   16bd8:	1884703a 	and	r2,r3,r2
   16bdc:	1001703a 	wrctl	status,r2
  
  return context;
   16be0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16be4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   16be8:	e0bffe17 	ldw	r2,-8(fp)
   16bec:	10800117 	ldw	r2,4(r2)
   16bf0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   16bf4:	e0bffb17 	ldw	r2,-20(fp)
   16bf8:	1080058b 	ldhu	r2,22(r2)
   16bfc:	10bfffcc 	andi	r2,r2,65535
   16c00:	10001926 	beq	r2,zero,16c68 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   16c04:	e0bffb17 	ldw	r2,-20(fp)
   16c08:	10800417 	ldw	r2,16(r2)
   16c0c:	11000104 	addi	r4,r2,4
   16c10:	e0fffb17 	ldw	r3,-20(fp)
   16c14:	19000415 	stw	r4,16(r3)
   16c18:	10800017 	ldw	r2,0(r2)
   16c1c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   16c20:	e0bffb17 	ldw	r2,-20(fp)
   16c24:	1080058b 	ldhu	r2,22(r2)
   16c28:	10bfffc4 	addi	r2,r2,-1
   16c2c:	1007883a 	mov	r3,r2
   16c30:	e0bffb17 	ldw	r2,-20(fp)
   16c34:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   16c38:	e0bffb17 	ldw	r2,-20(fp)
   16c3c:	10c00417 	ldw	r3,16(r2)
   16c40:	e0bffb17 	ldw	r2,-20(fp)
   16c44:	10800217 	ldw	r2,8(r2)
   16c48:	1880041e 	bne	r3,r2,16c5c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   16c4c:	e0bffb17 	ldw	r2,-20(fp)
   16c50:	10c00117 	ldw	r3,4(r2)
   16c54:	e0bffb17 	ldw	r2,-20(fp)
   16c58:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   16c5c:	e0bfff17 	ldw	r2,-4(fp)
   16c60:	10000005 	stb	zero,0(r2)
   16c64:	00000406 	br	16c78 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   16c68:	e0bfff17 	ldw	r2,-4(fp)
   16c6c:	00c007c4 	movi	r3,31
   16c70:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   16c74:	e03ff915 	stw	zero,-28(fp)
   16c78:	e0bffa17 	ldw	r2,-24(fp)
   16c7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c80:	e0bffd17 	ldw	r2,-12(fp)
   16c84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   16c88:	e0bff917 	ldw	r2,-28(fp)
}
   16c8c:	e037883a 	mov	sp,fp
   16c90:	df000017 	ldw	fp,0(sp)
   16c94:	dec00104 	addi	sp,sp,4
   16c98:	f800283a 	ret

00016c9c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   16c9c:	defff404 	addi	sp,sp,-48
   16ca0:	dfc00b15 	stw	ra,44(sp)
   16ca4:	df000a15 	stw	fp,40(sp)
   16ca8:	df000a04 	addi	fp,sp,40
   16cac:	e13ffe15 	stw	r4,-8(fp)
   16cb0:	2805883a 	mov	r2,r5
   16cb4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16cb8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16cbc:	008000b4 	movhi	r2,2
   16cc0:	108e3e04 	addi	r2,r2,14584
   16cc4:	10800003 	ldbu	r2,0(r2)
   16cc8:	10803fcc 	andi	r2,r2,255
   16ccc:	10000226 	beq	r2,zero,16cd8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16cd0:	0005883a 	mov	r2,zero
   16cd4:	00006b06 	br	16e84 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cd8:	0005303a 	rdctl	r2,status
   16cdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ce0:	e0fff917 	ldw	r3,-28(fp)
   16ce4:	00bfff84 	movi	r2,-2
   16ce8:	1884703a 	and	r2,r3,r2
   16cec:	1001703a 	wrctl	status,r2
  
  return context;
   16cf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   16cf4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   16cf8:	008000b4 	movhi	r2,2
   16cfc:	108e3d04 	addi	r2,r2,14580
   16d00:	10800017 	ldw	r2,0(r2)
   16d04:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   16d08:	008000b4 	movhi	r2,2
   16d0c:	108e3d04 	addi	r2,r2,14580
   16d10:	10800017 	ldw	r2,0(r2)
   16d14:	10000726 	beq	r2,zero,16d34 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16d18:	008000b4 	movhi	r2,2
   16d1c:	108e3d04 	addi	r2,r2,14580
   16d20:	10800017 	ldw	r2,0(r2)
   16d24:	10c00117 	ldw	r3,4(r2)
   16d28:	008000b4 	movhi	r2,2
   16d2c:	108e3d04 	addi	r2,r2,14580
   16d30:	10c00015 	stw	r3,0(r2)
   16d34:	e0bff717 	ldw	r2,-36(fp)
   16d38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d3c:	e0bffa17 	ldw	r2,-24(fp)
   16d40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   16d44:	e0bff617 	ldw	r2,-40(fp)
   16d48:	10004d26 	beq	r2,zero,16e80 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d4c:	0005303a 	rdctl	r2,status
   16d50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d54:	e0fffb17 	ldw	r3,-20(fp)
   16d58:	00bfff84 	movi	r2,-2
   16d5c:	1884703a 	and	r2,r3,r2
   16d60:	1001703a 	wrctl	status,r2
  
  return context;
   16d64:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   16d68:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   16d6c:	008000b4 	movhi	r2,2
   16d70:	108e3b04 	addi	r2,r2,14572
   16d74:	10800017 	ldw	r2,0(r2)
   16d78:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   16d7c:	e0bff817 	ldw	r2,-32(fp)
   16d80:	10003126 	beq	r2,zero,16e48 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   16d84:	008000b4 	movhi	r2,2
   16d88:	108e3b04 	addi	r2,r2,14572
   16d8c:	10800017 	ldw	r2,0(r2)
   16d90:	10c00017 	ldw	r3,0(r2)
   16d94:	008000b4 	movhi	r2,2
   16d98:	108e3b04 	addi	r2,r2,14572
   16d9c:	10c00015 	stw	r3,0(r2)
   16da0:	e0bff717 	ldw	r2,-36(fp)
   16da4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16da8:	e0bffc17 	ldw	r2,-16(fp)
   16dac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   16db0:	e0bff817 	ldw	r2,-32(fp)
   16db4:	e0fffe17 	ldw	r3,-8(fp)
   16db8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   16dbc:	e0bfff0b 	ldhu	r2,-4(fp)
   16dc0:	1085883a 	add	r2,r2,r2
   16dc4:	1085883a 	add	r2,r2,r2
   16dc8:	1007883a 	mov	r3,r2
   16dcc:	e0bffe17 	ldw	r2,-8(fp)
   16dd0:	10c7883a 	add	r3,r2,r3
   16dd4:	e0bff817 	ldw	r2,-32(fp)
   16dd8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   16ddc:	e0bff817 	ldw	r2,-32(fp)
   16de0:	e0fffe17 	ldw	r3,-8(fp)
   16de4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   16de8:	e0bff817 	ldw	r2,-32(fp)
   16dec:	e0fffe17 	ldw	r3,-8(fp)
   16df0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   16df4:	e0bff817 	ldw	r2,-32(fp)
   16df8:	e0ffff0b 	ldhu	r3,-4(fp)
   16dfc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   16e00:	e0bff817 	ldw	r2,-32(fp)
   16e04:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   16e08:	e0bff617 	ldw	r2,-40(fp)
   16e0c:	00c00084 	movi	r3,2
   16e10:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   16e14:	e0bff617 	ldw	r2,-40(fp)
   16e18:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   16e1c:	e0bff617 	ldw	r2,-40(fp)
   16e20:	e0fff817 	ldw	r3,-32(fp)
   16e24:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   16e28:	e0bff617 	ldw	r2,-40(fp)
   16e2c:	00c00fc4 	movi	r3,63
   16e30:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   16e34:	e0bff617 	ldw	r2,-40(fp)
   16e38:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   16e3c:	e13ff617 	ldw	r4,-40(fp)
   16e40:	00133580 	call	13358 <OS_EventWaitListInit>
   16e44:	00000e06 	br	16e80 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   16e48:	008000b4 	movhi	r2,2
   16e4c:	108e3d04 	addi	r2,r2,14580
   16e50:	10c00017 	ldw	r3,0(r2)
   16e54:	e0bff617 	ldw	r2,-40(fp)
   16e58:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   16e5c:	008000b4 	movhi	r2,2
   16e60:	108e3d04 	addi	r2,r2,14580
   16e64:	e0fff617 	ldw	r3,-40(fp)
   16e68:	10c00015 	stw	r3,0(r2)
   16e6c:	e0bff717 	ldw	r2,-36(fp)
   16e70:	e0bffd15 	stw	r2,-12(fp)
   16e74:	e0bffd17 	ldw	r2,-12(fp)
   16e78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   16e7c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   16e80:	e0bff617 	ldw	r2,-40(fp)
}
   16e84:	e037883a 	mov	sp,fp
   16e88:	dfc00117 	ldw	ra,4(sp)
   16e8c:	df000017 	ldw	fp,0(sp)
   16e90:	dec00204 	addi	sp,sp,8
   16e94:	f800283a 	ret

00016e98 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16e98:	defff204 	addi	sp,sp,-56
   16e9c:	dfc00d15 	stw	ra,52(sp)
   16ea0:	df000c15 	stw	fp,48(sp)
   16ea4:	df000c04 	addi	fp,sp,48
   16ea8:	e13ffd15 	stw	r4,-12(fp)
   16eac:	2805883a 	mov	r2,r5
   16eb0:	e1bfff15 	stw	r6,-4(fp)
   16eb4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16eb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16ebc:	e0bfff17 	ldw	r2,-4(fp)
   16ec0:	1000021e 	bne	r2,zero,16ecc <OSQDel+0x34>
        return (pevent);
   16ec4:	e0bffd17 	ldw	r2,-12(fp)
   16ec8:	0000a006 	br	1714c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16ecc:	e0bffd17 	ldw	r2,-12(fp)
   16ed0:	1000051e 	bne	r2,zero,16ee8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16ed4:	e0bfff17 	ldw	r2,-4(fp)
   16ed8:	00c00104 	movi	r3,4
   16edc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16ee0:	e0bffd17 	ldw	r2,-12(fp)
   16ee4:	00009906 	br	1714c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   16ee8:	e0bffd17 	ldw	r2,-12(fp)
   16eec:	10800003 	ldbu	r2,0(r2)
   16ef0:	10803fcc 	andi	r2,r2,255
   16ef4:	108000a0 	cmpeqi	r2,r2,2
   16ef8:	1000051e 	bne	r2,zero,16f10 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16efc:	e0bfff17 	ldw	r2,-4(fp)
   16f00:	00c00044 	movi	r3,1
   16f04:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16f08:	e0bffd17 	ldw	r2,-12(fp)
   16f0c:	00008f06 	br	1714c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16f10:	008000b4 	movhi	r2,2
   16f14:	108e3e04 	addi	r2,r2,14584
   16f18:	10800003 	ldbu	r2,0(r2)
   16f1c:	10803fcc 	andi	r2,r2,255
   16f20:	10000526 	beq	r2,zero,16f38 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16f24:	e0bfff17 	ldw	r2,-4(fp)
   16f28:	00c003c4 	movi	r3,15
   16f2c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16f30:	e0bffd17 	ldw	r2,-12(fp)
   16f34:	00008506 	br	1714c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f38:	0005303a 	rdctl	r2,status
   16f3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f40:	e0fff817 	ldw	r3,-32(fp)
   16f44:	00bfff84 	movi	r2,-2
   16f48:	1884703a 	and	r2,r3,r2
   16f4c:	1001703a 	wrctl	status,r2
  
  return context;
   16f50:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16f54:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   16f58:	e0bffd17 	ldw	r2,-12(fp)
   16f5c:	10800283 	ldbu	r2,10(r2)
   16f60:	10803fcc 	andi	r2,r2,255
   16f64:	10000326 	beq	r2,zero,16f74 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16f68:	00800044 	movi	r2,1
   16f6c:	e0bff405 	stb	r2,-48(fp)
   16f70:	00000106 	br	16f78 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16f74:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   16f78:	e0bffe03 	ldbu	r2,-8(fp)
   16f7c:	10000326 	beq	r2,zero,16f8c <OSQDel+0xf4>
   16f80:	10800060 	cmpeqi	r2,r2,1
   16f84:	1000381e 	bne	r2,zero,17068 <OSQDel+0x1d0>
   16f88:	00006506 	br	17120 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   16f8c:	e0bff403 	ldbu	r2,-48(fp)
   16f90:	1000261e 	bne	r2,zero,1702c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16f94:	e0bffd17 	ldw	r2,-12(fp)
   16f98:	00c00fc4 	movi	r3,63
   16f9c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16fa0:	e0bffd17 	ldw	r2,-12(fp)
   16fa4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   16fa8:	e0bffd17 	ldw	r2,-12(fp)
   16fac:	10800117 	ldw	r2,4(r2)
   16fb0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   16fb4:	008000b4 	movhi	r2,2
   16fb8:	108e3b04 	addi	r2,r2,14572
   16fbc:	10c00017 	ldw	r3,0(r2)
   16fc0:	e0bff717 	ldw	r2,-36(fp)
   16fc4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   16fc8:	008000b4 	movhi	r2,2
   16fcc:	108e3b04 	addi	r2,r2,14572
   16fd0:	e0fff717 	ldw	r3,-36(fp)
   16fd4:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16fd8:	e0bffd17 	ldw	r2,-12(fp)
   16fdc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16fe0:	008000b4 	movhi	r2,2
   16fe4:	108e3d04 	addi	r2,r2,14580
   16fe8:	10c00017 	ldw	r3,0(r2)
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   16ff4:	e0bffd17 	ldw	r2,-12(fp)
   16ff8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   16ffc:	008000b4 	movhi	r2,2
   17000:	108e3d04 	addi	r2,r2,14580
   17004:	e0fffd17 	ldw	r3,-12(fp)
   17008:	10c00015 	stw	r3,0(r2)
   1700c:	e0bff617 	ldw	r2,-40(fp)
   17010:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17014:	e0bff917 	ldw	r2,-28(fp)
   17018:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   17024:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   17028:	00004706 	br	17148 <OSQDel+0x2b0>
   1702c:	e0bff617 	ldw	r2,-40(fp)
   17030:	e0bffa15 	stw	r2,-24(fp)
   17034:	e0bffa17 	ldw	r2,-24(fp)
   17038:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1703c:	e0bfff17 	ldw	r2,-4(fp)
   17040:	00c01244 	movi	r3,73
   17044:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   17048:	e0bffd17 	ldw	r2,-12(fp)
   1704c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   17050:	00003d06 	br	17148 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   17054:	e13ffd17 	ldw	r4,-12(fp)
   17058:	000b883a 	mov	r5,zero
   1705c:	01800104 	movi	r6,4
   17060:	000f883a 	mov	r7,zero
   17064:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   17068:	e0bffd17 	ldw	r2,-12(fp)
   1706c:	10800283 	ldbu	r2,10(r2)
   17070:	10803fcc 	andi	r2,r2,255
   17074:	103ff71e 	bne	r2,zero,17054 <__alt_mem_Flash_flash_data+0xf4017054>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   17078:	e0bffd17 	ldw	r2,-12(fp)
   1707c:	00c00fc4 	movi	r3,63
   17080:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17084:	e0bffd17 	ldw	r2,-12(fp)
   17088:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1708c:	e0bffd17 	ldw	r2,-12(fp)
   17090:	10800117 	ldw	r2,4(r2)
   17094:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   17098:	008000b4 	movhi	r2,2
   1709c:	108e3b04 	addi	r2,r2,14572
   170a0:	10c00017 	ldw	r3,0(r2)
   170a4:	e0bff717 	ldw	r2,-36(fp)
   170a8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   170ac:	008000b4 	movhi	r2,2
   170b0:	108e3b04 	addi	r2,r2,14572
   170b4:	e0fff717 	ldw	r3,-36(fp)
   170b8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   170bc:	e0bffd17 	ldw	r2,-12(fp)
   170c0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   170c4:	008000b4 	movhi	r2,2
   170c8:	108e3d04 	addi	r2,r2,14580
   170cc:	10c00017 	ldw	r3,0(r2)
   170d0:	e0bffd17 	ldw	r2,-12(fp)
   170d4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   170d8:	e0bffd17 	ldw	r2,-12(fp)
   170dc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   170e0:	008000b4 	movhi	r2,2
   170e4:	108e3d04 	addi	r2,r2,14580
   170e8:	e0fffd17 	ldw	r3,-12(fp)
   170ec:	10c00015 	stw	r3,0(r2)
   170f0:	e0bff617 	ldw	r2,-40(fp)
   170f4:	e0bffb15 	stw	r2,-20(fp)
   170f8:	e0bffb17 	ldw	r2,-20(fp)
   170fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17100:	e0bff403 	ldbu	r2,-48(fp)
   17104:	10800058 	cmpnei	r2,r2,1
   17108:	1000011e 	bne	r2,zero,17110 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1710c:	00137d00 	call	137d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17110:	e0bfff17 	ldw	r2,-4(fp)
   17114:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   17118:	e03ff515 	stw	zero,-44(fp)
             break;
   1711c:	00000a06 	br	17148 <OSQDel+0x2b0>
   17120:	e0bff617 	ldw	r2,-40(fp)
   17124:	e0bffc15 	stw	r2,-16(fp)
   17128:	e0bffc17 	ldw	r2,-16(fp)
   1712c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   17130:	e0bfff17 	ldw	r2,-4(fp)
   17134:	00c001c4 	movi	r3,7
   17138:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1713c:	e0bffd17 	ldw	r2,-12(fp)
   17140:	e0bff515 	stw	r2,-44(fp)
             break;
   17144:	0001883a 	nop
    }
    return (pevent_return);
   17148:	e0bff517 	ldw	r2,-44(fp)
}
   1714c:	e037883a 	mov	sp,fp
   17150:	dfc00117 	ldw	ra,4(sp)
   17154:	df000017 	ldw	fp,0(sp)
   17158:	dec00204 	addi	sp,sp,8
   1715c:	f800283a 	ret

00017160 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   17160:	defffa04 	addi	sp,sp,-24
   17164:	df000515 	stw	fp,20(sp)
   17168:	df000504 	addi	fp,sp,20
   1716c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17170:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17174:	e0bfff17 	ldw	r2,-4(fp)
   17178:	1000021e 	bne	r2,zero,17184 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1717c:	00800104 	movi	r2,4
   17180:	00002106 	br	17208 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17184:	e0bfff17 	ldw	r2,-4(fp)
   17188:	10800003 	ldbu	r2,0(r2)
   1718c:	10803fcc 	andi	r2,r2,255
   17190:	108000a0 	cmpeqi	r2,r2,2
   17194:	1000021e 	bne	r2,zero,171a0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   17198:	00800044 	movi	r2,1
   1719c:	00001a06 	br	17208 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171a0:	0005303a 	rdctl	r2,status
   171a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171a8:	e0fffd17 	ldw	r3,-12(fp)
   171ac:	00bfff84 	movi	r2,-2
   171b0:	1884703a 	and	r2,r3,r2
   171b4:	1001703a 	wrctl	status,r2
  
  return context;
   171b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   171bc:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   171c0:	e0bfff17 	ldw	r2,-4(fp)
   171c4:	10800117 	ldw	r2,4(r2)
   171c8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   171cc:	e0bffc17 	ldw	r2,-16(fp)
   171d0:	10c00117 	ldw	r3,4(r2)
   171d4:	e0bffc17 	ldw	r2,-16(fp)
   171d8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   171dc:	e0bffc17 	ldw	r2,-16(fp)
   171e0:	10c00117 	ldw	r3,4(r2)
   171e4:	e0bffc17 	ldw	r2,-16(fp)
   171e8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   171ec:	e0bffc17 	ldw	r2,-16(fp)
   171f0:	1000058d 	sth	zero,22(r2)
   171f4:	e0bffb17 	ldw	r2,-20(fp)
   171f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171fc:	e0bffe17 	ldw	r2,-8(fp)
   17200:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17204:	0005883a 	mov	r2,zero
}
   17208:	e037883a 	mov	sp,fp
   1720c:	df000017 	ldw	fp,0(sp)
   17210:	dec00104 	addi	sp,sp,4
   17214:	f800283a 	ret

00017218 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   17218:	defff304 	addi	sp,sp,-52
   1721c:	dfc00c15 	stw	ra,48(sp)
   17220:	df000b15 	stw	fp,44(sp)
   17224:	df000b04 	addi	fp,sp,44
   17228:	e13ffd15 	stw	r4,-12(fp)
   1722c:	2805883a 	mov	r2,r5
   17230:	e1bfff15 	stw	r6,-4(fp)
   17234:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17238:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1723c:	e0bfff17 	ldw	r2,-4(fp)
   17240:	1000021e 	bne	r2,zero,1724c <OSQPend+0x34>
        return ((void *)0);
   17244:	0005883a 	mov	r2,zero
   17248:	0000ad06 	br	17500 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1724c:	e0bffd17 	ldw	r2,-12(fp)
   17250:	1000051e 	bne	r2,zero,17268 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17254:	e0bfff17 	ldw	r2,-4(fp)
   17258:	00c00104 	movi	r3,4
   1725c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17260:	0005883a 	mov	r2,zero
   17264:	0000a606 	br	17500 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17268:	e0bffd17 	ldw	r2,-12(fp)
   1726c:	10800003 	ldbu	r2,0(r2)
   17270:	10803fcc 	andi	r2,r2,255
   17274:	108000a0 	cmpeqi	r2,r2,2
   17278:	1000051e 	bne	r2,zero,17290 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1727c:	e0bfff17 	ldw	r2,-4(fp)
   17280:	00c00044 	movi	r3,1
   17284:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17288:	0005883a 	mov	r2,zero
   1728c:	00009c06 	br	17500 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17290:	008000b4 	movhi	r2,2
   17294:	108e3e04 	addi	r2,r2,14584
   17298:	10800003 	ldbu	r2,0(r2)
   1729c:	10803fcc 	andi	r2,r2,255
   172a0:	10000526 	beq	r2,zero,172b8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   172a4:	e0bfff17 	ldw	r2,-4(fp)
   172a8:	00c00084 	movi	r3,2
   172ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   172b0:	0005883a 	mov	r2,zero
   172b4:	00009206 	br	17500 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   172b8:	008000b4 	movhi	r2,2
   172bc:	108e3004 	addi	r2,r2,14528
   172c0:	10800003 	ldbu	r2,0(r2)
   172c4:	10803fcc 	andi	r2,r2,255
   172c8:	10000526 	beq	r2,zero,172e0 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   172cc:	e0bfff17 	ldw	r2,-4(fp)
   172d0:	00c00344 	movi	r3,13
   172d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   172d8:	0005883a 	mov	r2,zero
   172dc:	00008806 	br	17500 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172e0:	0005303a 	rdctl	r2,status
   172e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172e8:	e0fff817 	ldw	r3,-32(fp)
   172ec:	00bfff84 	movi	r2,-2
   172f0:	1884703a 	and	r2,r3,r2
   172f4:	1001703a 	wrctl	status,r2
  
  return context;
   172f8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   172fc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17300:	e0bffd17 	ldw	r2,-12(fp)
   17304:	10800117 	ldw	r2,4(r2)
   17308:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1730c:	e0bff717 	ldw	r2,-36(fp)
   17310:	1080058b 	ldhu	r2,22(r2)
   17314:	10bfffcc 	andi	r2,r2,65535
   17318:	10001e26 	beq	r2,zero,17394 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1731c:	e0bff717 	ldw	r2,-36(fp)
   17320:	10800417 	ldw	r2,16(r2)
   17324:	11000104 	addi	r4,r2,4
   17328:	e0fff717 	ldw	r3,-36(fp)
   1732c:	19000415 	stw	r4,16(r3)
   17330:	10800017 	ldw	r2,0(r2)
   17334:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17338:	e0bff717 	ldw	r2,-36(fp)
   1733c:	1080058b 	ldhu	r2,22(r2)
   17340:	10bfffc4 	addi	r2,r2,-1
   17344:	1007883a 	mov	r3,r2
   17348:	e0bff717 	ldw	r2,-36(fp)
   1734c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17350:	e0bff717 	ldw	r2,-36(fp)
   17354:	10c00417 	ldw	r3,16(r2)
   17358:	e0bff717 	ldw	r2,-36(fp)
   1735c:	10800217 	ldw	r2,8(r2)
   17360:	1880041e 	bne	r3,r2,17374 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   17364:	e0bff717 	ldw	r2,-36(fp)
   17368:	10c00117 	ldw	r3,4(r2)
   1736c:	e0bff717 	ldw	r2,-36(fp)
   17370:	10c00415 	stw	r3,16(r2)
   17374:	e0bff617 	ldw	r2,-40(fp)
   17378:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1737c:	e0bff917 	ldw	r2,-28(fp)
   17380:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17384:	e0bfff17 	ldw	r2,-4(fp)
   17388:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1738c:	e0bff517 	ldw	r2,-44(fp)
   17390:	00005b06 	br	17500 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   17394:	008000b4 	movhi	r2,2
   17398:	108e3f04 	addi	r2,r2,14588
   1739c:	10c00017 	ldw	r3,0(r2)
   173a0:	008000b4 	movhi	r2,2
   173a4:	108e3f04 	addi	r2,r2,14588
   173a8:	10800017 	ldw	r2,0(r2)
   173ac:	10800c03 	ldbu	r2,48(r2)
   173b0:	10800114 	ori	r2,r2,4
   173b4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   173b8:	008000b4 	movhi	r2,2
   173bc:	108e3f04 	addi	r2,r2,14588
   173c0:	10800017 	ldw	r2,0(r2)
   173c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   173c8:	008000b4 	movhi	r2,2
   173cc:	108e3f04 	addi	r2,r2,14588
   173d0:	10800017 	ldw	r2,0(r2)
   173d4:	e0fffe0b 	ldhu	r3,-8(fp)
   173d8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   173dc:	e13ffd17 	ldw	r4,-12(fp)
   173e0:	0012f500 	call	12f50 <OS_EventTaskWait>
   173e4:	e0bff617 	ldw	r2,-40(fp)
   173e8:	e0bffa15 	stw	r2,-24(fp)
   173ec:	e0bffa17 	ldw	r2,-24(fp)
   173f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   173f4:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   173f8:	0005303a 	rdctl	r2,status
   173fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17400:	e0fffb17 	ldw	r3,-20(fp)
   17404:	00bfff84 	movi	r2,-2
   17408:	1884703a 	and	r2,r3,r2
   1740c:	1001703a 	wrctl	status,r2
  
  return context;
   17410:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   17414:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17418:	008000b4 	movhi	r2,2
   1741c:	108e3f04 	addi	r2,r2,14588
   17420:	10800017 	ldw	r2,0(r2)
   17424:	10800c43 	ldbu	r2,49(r2)
   17428:	10803fcc 	andi	r2,r2,255
   1742c:	10000326 	beq	r2,zero,1743c <OSQPend+0x224>
   17430:	108000a0 	cmpeqi	r2,r2,2
   17434:	1000091e 	bne	r2,zero,1745c <OSQPend+0x244>
   17438:	00000d06 	br	17470 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1743c:	008000b4 	movhi	r2,2
   17440:	108e3f04 	addi	r2,r2,14588
   17444:	10800017 	ldw	r2,0(r2)
   17448:	10800917 	ldw	r2,36(r2)
   1744c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   17450:	e0bfff17 	ldw	r2,-4(fp)
   17454:	10000005 	stb	zero,0(r2)
             break;
   17458:	00001006 	br	1749c <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1745c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17460:	e0bfff17 	ldw	r2,-4(fp)
   17464:	00c00384 	movi	r3,14
   17468:	10c00005 	stb	r3,0(r2)
             break;
   1746c:	00000b06 	br	1749c <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   17470:	008000b4 	movhi	r2,2
   17474:	108e3f04 	addi	r2,r2,14588
   17478:	10800017 	ldw	r2,0(r2)
   1747c:	1009883a 	mov	r4,r2
   17480:	e17ffd17 	ldw	r5,-12(fp)
   17484:	00131a80 	call	131a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   17488:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1748c:	e0bfff17 	ldw	r2,-4(fp)
   17490:	00c00284 	movi	r3,10
   17494:	10c00005 	stb	r3,0(r2)
             break;
   17498:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1749c:	008000b4 	movhi	r2,2
   174a0:	108e3f04 	addi	r2,r2,14588
   174a4:	10800017 	ldw	r2,0(r2)
   174a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   174ac:	008000b4 	movhi	r2,2
   174b0:	108e3f04 	addi	r2,r2,14588
   174b4:	10800017 	ldw	r2,0(r2)
   174b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   174bc:	008000b4 	movhi	r2,2
   174c0:	108e3f04 	addi	r2,r2,14588
   174c4:	10800017 	ldw	r2,0(r2)
   174c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   174cc:	008000b4 	movhi	r2,2
   174d0:	108e3f04 	addi	r2,r2,14588
   174d4:	10800017 	ldw	r2,0(r2)
   174d8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   174dc:	008000b4 	movhi	r2,2
   174e0:	108e3f04 	addi	r2,r2,14588
   174e4:	10800017 	ldw	r2,0(r2)
   174e8:	10000915 	stw	zero,36(r2)
   174ec:	e0bff617 	ldw	r2,-40(fp)
   174f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174f4:	e0bffc17 	ldw	r2,-16(fp)
   174f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   174fc:	e0bff517 	ldw	r2,-44(fp)
}
   17500:	e037883a 	mov	sp,fp
   17504:	dfc00117 	ldw	ra,4(sp)
   17508:	df000017 	ldw	fp,0(sp)
   1750c:	dec00204 	addi	sp,sp,8
   17510:	f800283a 	ret

00017514 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17514:	defff604 	addi	sp,sp,-40
   17518:	dfc00915 	stw	ra,36(sp)
   1751c:	df000815 	stw	fp,32(sp)
   17520:	df000804 	addi	fp,sp,32
   17524:	e13ffd15 	stw	r4,-12(fp)
   17528:	2805883a 	mov	r2,r5
   1752c:	e1bfff15 	stw	r6,-4(fp)
   17530:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17534:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17538:	e0bfff17 	ldw	r2,-4(fp)
   1753c:	1000021e 	bne	r2,zero,17548 <OSQPendAbort+0x34>
        return (0);
   17540:	0005883a 	mov	r2,zero
   17544:	00004906 	br	1766c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17548:	e0bffd17 	ldw	r2,-12(fp)
   1754c:	1000051e 	bne	r2,zero,17564 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17550:	e0bfff17 	ldw	r2,-4(fp)
   17554:	00c00104 	movi	r3,4
   17558:	10c00005 	stb	r3,0(r2)
        return (0);
   1755c:	0005883a 	mov	r2,zero
   17560:	00004206 	br	1766c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17564:	e0bffd17 	ldw	r2,-12(fp)
   17568:	10800003 	ldbu	r2,0(r2)
   1756c:	10803fcc 	andi	r2,r2,255
   17570:	108000a0 	cmpeqi	r2,r2,2
   17574:	1000051e 	bne	r2,zero,1758c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	00c00044 	movi	r3,1
   17580:	10c00005 	stb	r3,0(r2)
        return (0);
   17584:	0005883a 	mov	r2,zero
   17588:	00003806 	br	1766c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1758c:	0005303a 	rdctl	r2,status
   17590:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17594:	e0fffa17 	ldw	r3,-24(fp)
   17598:	00bfff84 	movi	r2,-2
   1759c:	1884703a 	and	r2,r3,r2
   175a0:	1001703a 	wrctl	status,r2
  
  return context;
   175a4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   175a8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   175ac:	e0bffd17 	ldw	r2,-12(fp)
   175b0:	10800283 	ldbu	r2,10(r2)
   175b4:	10803fcc 	andi	r2,r2,255
   175b8:	10002526 	beq	r2,zero,17650 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   175bc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   175c0:	e0bffe03 	ldbu	r2,-8(fp)
   175c4:	10800060 	cmpeqi	r2,r2,1
   175c8:	10000e26 	beq	r2,zero,17604 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   175cc:	00000806 	br	175f0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   175d0:	e13ffd17 	ldw	r4,-12(fp)
   175d4:	000b883a 	mov	r5,zero
   175d8:	01800104 	movi	r6,4
   175dc:	01c00084 	movi	r7,2
   175e0:	0012db80 	call	12db8 <OS_EventTaskRdy>
                     nbr_tasks++;
   175e4:	e0bff803 	ldbu	r2,-32(fp)
   175e8:	10800044 	addi	r2,r2,1
   175ec:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   175f0:	e0bffd17 	ldw	r2,-12(fp)
   175f4:	10800283 	ldbu	r2,10(r2)
   175f8:	10803fcc 	andi	r2,r2,255
   175fc:	103ff41e 	bne	r2,zero,175d0 <__alt_mem_Flash_flash_data+0xf40175d0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17600:	00000906 	br	17628 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17604:	e13ffd17 	ldw	r4,-12(fp)
   17608:	000b883a 	mov	r5,zero
   1760c:	01800104 	movi	r6,4
   17610:	01c00084 	movi	r7,2
   17614:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 nbr_tasks++;
   17618:	e0bff803 	ldbu	r2,-32(fp)
   1761c:	10800044 	addi	r2,r2,1
   17620:	e0bff805 	stb	r2,-32(fp)
                 break;
   17624:	0001883a 	nop
   17628:	e0bff917 	ldw	r2,-28(fp)
   1762c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17630:	e0bffb17 	ldw	r2,-20(fp)
   17634:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17638:	00137d00 	call	137d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1763c:	e0bfff17 	ldw	r2,-4(fp)
   17640:	00c00384 	movi	r3,14
   17644:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17648:	e0bff803 	ldbu	r2,-32(fp)
   1764c:	00000706 	br	1766c <OSQPendAbort+0x158>
   17650:	e0bff917 	ldw	r2,-28(fp)
   17654:	e0bffc15 	stw	r2,-16(fp)
   17658:	e0bffc17 	ldw	r2,-16(fp)
   1765c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17660:	e0bfff17 	ldw	r2,-4(fp)
   17664:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   17668:	0005883a 	mov	r2,zero
}
   1766c:	e037883a 	mov	sp,fp
   17670:	dfc00117 	ldw	ra,4(sp)
   17674:	df000017 	ldw	fp,0(sp)
   17678:	dec00204 	addi	sp,sp,8
   1767c:	f800283a 	ret

00017680 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   17680:	defff604 	addi	sp,sp,-40
   17684:	dfc00915 	stw	ra,36(sp)
   17688:	df000815 	stw	fp,32(sp)
   1768c:	df000804 	addi	fp,sp,32
   17690:	e13ffe15 	stw	r4,-8(fp)
   17694:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17698:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1769c:	e0bffe17 	ldw	r2,-8(fp)
   176a0:	1000021e 	bne	r2,zero,176ac <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   176a4:	00800104 	movi	r2,4
   176a8:	00004a06 	br	177d4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   176ac:	e0bffe17 	ldw	r2,-8(fp)
   176b0:	10800003 	ldbu	r2,0(r2)
   176b4:	10803fcc 	andi	r2,r2,255
   176b8:	108000a0 	cmpeqi	r2,r2,2
   176bc:	1000021e 	bne	r2,zero,176c8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   176c0:	00800044 	movi	r2,1
   176c4:	00004306 	br	177d4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176c8:	0005303a 	rdctl	r2,status
   176cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176d0:	e0fffa17 	ldw	r3,-24(fp)
   176d4:	00bfff84 	movi	r2,-2
   176d8:	1884703a 	and	r2,r3,r2
   176dc:	1001703a 	wrctl	status,r2
  
  return context;
   176e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   176e4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   176e8:	e0bffe17 	ldw	r2,-8(fp)
   176ec:	10800283 	ldbu	r2,10(r2)
   176f0:	10803fcc 	andi	r2,r2,255
   176f4:	10000c26 	beq	r2,zero,17728 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   176f8:	e13ffe17 	ldw	r4,-8(fp)
   176fc:	e17fff17 	ldw	r5,-4(fp)
   17700:	01800104 	movi	r6,4
   17704:	000f883a 	mov	r7,zero
   17708:	0012db80 	call	12db8 <OS_EventTaskRdy>
   1770c:	e0bff817 	ldw	r2,-32(fp)
   17710:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17714:	e0bffb17 	ldw	r2,-20(fp)
   17718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1771c:	00137d00 	call	137d0 <OS_Sched>
        return (OS_ERR_NONE);
   17720:	0005883a 	mov	r2,zero
   17724:	00002b06 	br	177d4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   17728:	e0bffe17 	ldw	r2,-8(fp)
   1772c:	10800117 	ldw	r2,4(r2)
   17730:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   17734:	e0bff917 	ldw	r2,-28(fp)
   17738:	10c0058b 	ldhu	r3,22(r2)
   1773c:	e0bff917 	ldw	r2,-28(fp)
   17740:	1080050b 	ldhu	r2,20(r2)
   17744:	18ffffcc 	andi	r3,r3,65535
   17748:	10bfffcc 	andi	r2,r2,65535
   1774c:	18800636 	bltu	r3,r2,17768 <OSQPost+0xe8>
   17750:	e0bff817 	ldw	r2,-32(fp)
   17754:	e0bffc15 	stw	r2,-16(fp)
   17758:	e0bffc17 	ldw	r2,-16(fp)
   1775c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17760:	00800784 	movi	r2,30
   17764:	00001b06 	br	177d4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   17768:	e0bff917 	ldw	r2,-28(fp)
   1776c:	10800317 	ldw	r2,12(r2)
   17770:	11000104 	addi	r4,r2,4
   17774:	e0fff917 	ldw	r3,-28(fp)
   17778:	19000315 	stw	r4,12(r3)
   1777c:	e0ffff17 	ldw	r3,-4(fp)
   17780:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17784:	e0bff917 	ldw	r2,-28(fp)
   17788:	1080058b 	ldhu	r2,22(r2)
   1778c:	10800044 	addi	r2,r2,1
   17790:	1007883a 	mov	r3,r2
   17794:	e0bff917 	ldw	r2,-28(fp)
   17798:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1779c:	e0bff917 	ldw	r2,-28(fp)
   177a0:	10c00317 	ldw	r3,12(r2)
   177a4:	e0bff917 	ldw	r2,-28(fp)
   177a8:	10800217 	ldw	r2,8(r2)
   177ac:	1880041e 	bne	r3,r2,177c0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   177b0:	e0bff917 	ldw	r2,-28(fp)
   177b4:	10c00117 	ldw	r3,4(r2)
   177b8:	e0bff917 	ldw	r2,-28(fp)
   177bc:	10c00315 	stw	r3,12(r2)
   177c0:	e0bff817 	ldw	r2,-32(fp)
   177c4:	e0bffd15 	stw	r2,-12(fp)
   177c8:	e0bffd17 	ldw	r2,-12(fp)
   177cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   177d0:	0005883a 	mov	r2,zero
}
   177d4:	e037883a 	mov	sp,fp
   177d8:	dfc00117 	ldw	ra,4(sp)
   177dc:	df000017 	ldw	fp,0(sp)
   177e0:	dec00204 	addi	sp,sp,8
   177e4:	f800283a 	ret

000177e8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   177e8:	defff604 	addi	sp,sp,-40
   177ec:	dfc00915 	stw	ra,36(sp)
   177f0:	df000815 	stw	fp,32(sp)
   177f4:	df000804 	addi	fp,sp,32
   177f8:	e13ffe15 	stw	r4,-8(fp)
   177fc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17800:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17804:	e0bffe17 	ldw	r2,-8(fp)
   17808:	1000021e 	bne	r2,zero,17814 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1780c:	00800104 	movi	r2,4
   17810:	00004c06 	br	17944 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17814:	e0bffe17 	ldw	r2,-8(fp)
   17818:	10800003 	ldbu	r2,0(r2)
   1781c:	10803fcc 	andi	r2,r2,255
   17820:	108000a0 	cmpeqi	r2,r2,2
   17824:	1000021e 	bne	r2,zero,17830 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   17828:	00800044 	movi	r2,1
   1782c:	00004506 	br	17944 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17830:	0005303a 	rdctl	r2,status
   17834:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17838:	e0fffa17 	ldw	r3,-24(fp)
   1783c:	00bfff84 	movi	r2,-2
   17840:	1884703a 	and	r2,r3,r2
   17844:	1001703a 	wrctl	status,r2
  
  return context;
   17848:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1784c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   17850:	e0bffe17 	ldw	r2,-8(fp)
   17854:	10800283 	ldbu	r2,10(r2)
   17858:	10803fcc 	andi	r2,r2,255
   1785c:	10000c26 	beq	r2,zero,17890 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17860:	e13ffe17 	ldw	r4,-8(fp)
   17864:	e17fff17 	ldw	r5,-4(fp)
   17868:	01800104 	movi	r6,4
   1786c:	000f883a 	mov	r7,zero
   17870:	0012db80 	call	12db8 <OS_EventTaskRdy>
   17874:	e0bff817 	ldw	r2,-32(fp)
   17878:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1787c:	e0bffb17 	ldw	r2,-20(fp)
   17880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17884:	00137d00 	call	137d0 <OS_Sched>
        return (OS_ERR_NONE);
   17888:	0005883a 	mov	r2,zero
   1788c:	00002d06 	br	17944 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17890:	e0bffe17 	ldw	r2,-8(fp)
   17894:	10800117 	ldw	r2,4(r2)
   17898:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1789c:	e0bff917 	ldw	r2,-28(fp)
   178a0:	10c0058b 	ldhu	r3,22(r2)
   178a4:	e0bff917 	ldw	r2,-28(fp)
   178a8:	1080050b 	ldhu	r2,20(r2)
   178ac:	18ffffcc 	andi	r3,r3,65535
   178b0:	10bfffcc 	andi	r2,r2,65535
   178b4:	18800636 	bltu	r3,r2,178d0 <OSQPostFront+0xe8>
   178b8:	e0bff817 	ldw	r2,-32(fp)
   178bc:	e0bffc15 	stw	r2,-16(fp)
   178c0:	e0bffc17 	ldw	r2,-16(fp)
   178c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   178c8:	00800784 	movi	r2,30
   178cc:	00001d06 	br	17944 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   178d0:	e0bff917 	ldw	r2,-28(fp)
   178d4:	10c00417 	ldw	r3,16(r2)
   178d8:	e0bff917 	ldw	r2,-28(fp)
   178dc:	10800117 	ldw	r2,4(r2)
   178e0:	1880041e 	bne	r3,r2,178f4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   178e4:	e0bff917 	ldw	r2,-28(fp)
   178e8:	10c00217 	ldw	r3,8(r2)
   178ec:	e0bff917 	ldw	r2,-28(fp)
   178f0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   178f4:	e0bff917 	ldw	r2,-28(fp)
   178f8:	10800417 	ldw	r2,16(r2)
   178fc:	10ffff04 	addi	r3,r2,-4
   17900:	e0bff917 	ldw	r2,-28(fp)
   17904:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17908:	e0bff917 	ldw	r2,-28(fp)
   1790c:	10800417 	ldw	r2,16(r2)
   17910:	e0ffff17 	ldw	r3,-4(fp)
   17914:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17918:	e0bff917 	ldw	r2,-28(fp)
   1791c:	1080058b 	ldhu	r2,22(r2)
   17920:	10800044 	addi	r2,r2,1
   17924:	1007883a 	mov	r3,r2
   17928:	e0bff917 	ldw	r2,-28(fp)
   1792c:	10c0058d 	sth	r3,22(r2)
   17930:	e0bff817 	ldw	r2,-32(fp)
   17934:	e0bffd15 	stw	r2,-12(fp)
   17938:	e0bffd17 	ldw	r2,-12(fp)
   1793c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17940:	0005883a 	mov	r2,zero
}
   17944:	e037883a 	mov	sp,fp
   17948:	dfc00117 	ldw	ra,4(sp)
   1794c:	df000017 	ldw	fp,0(sp)
   17950:	dec00204 	addi	sp,sp,8
   17954:	f800283a 	ret

00017958 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17958:	defff504 	addi	sp,sp,-44
   1795c:	dfc00a15 	stw	ra,40(sp)
   17960:	df000915 	stw	fp,36(sp)
   17964:	df000904 	addi	fp,sp,36
   17968:	e13ffd15 	stw	r4,-12(fp)
   1796c:	e17ffe15 	stw	r5,-8(fp)
   17970:	3005883a 	mov	r2,r6
   17974:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17978:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1797c:	e0bffd17 	ldw	r2,-12(fp)
   17980:	1000021e 	bne	r2,zero,1798c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17984:	00800104 	movi	r2,4
   17988:	00007106 	br	17b50 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1798c:	e0bffd17 	ldw	r2,-12(fp)
   17990:	10800003 	ldbu	r2,0(r2)
   17994:	10803fcc 	andi	r2,r2,255
   17998:	108000a0 	cmpeqi	r2,r2,2
   1799c:	1000021e 	bne	r2,zero,179a8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   179a0:	00800044 	movi	r2,1
   179a4:	00006a06 	br	17b50 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179a8:	0005303a 	rdctl	r2,status
   179ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179b0:	e0fff917 	ldw	r3,-28(fp)
   179b4:	00bfff84 	movi	r2,-2
   179b8:	1884703a 	and	r2,r3,r2
   179bc:	1001703a 	wrctl	status,r2
  
  return context;
   179c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   179c4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   179c8:	e0bffd17 	ldw	r2,-12(fp)
   179cc:	10800283 	ldbu	r2,10(r2)
   179d0:	10803fcc 	andi	r2,r2,255
   179d4:	10001d26 	beq	r2,zero,17a4c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   179d8:	e0bfff03 	ldbu	r2,-4(fp)
   179dc:	1080004c 	andi	r2,r2,1
   179e0:	10000b26 	beq	r2,zero,17a10 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   179e4:	00000506 	br	179fc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   179e8:	e13ffd17 	ldw	r4,-12(fp)
   179ec:	e17ffe17 	ldw	r5,-8(fp)
   179f0:	01800104 	movi	r6,4
   179f4:	000f883a 	mov	r7,zero
   179f8:	0012db80 	call	12db8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   179fc:	e0bffd17 	ldw	r2,-12(fp)
   17a00:	10800283 	ldbu	r2,10(r2)
   17a04:	10803fcc 	andi	r2,r2,255
   17a08:	103ff71e 	bne	r2,zero,179e8 <__alt_mem_Flash_flash_data+0xf40179e8>
   17a0c:	00000506 	br	17a24 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17a10:	e13ffd17 	ldw	r4,-12(fp)
   17a14:	e17ffe17 	ldw	r5,-8(fp)
   17a18:	01800104 	movi	r6,4
   17a1c:	000f883a 	mov	r7,zero
   17a20:	0012db80 	call	12db8 <OS_EventTaskRdy>
   17a24:	e0bff717 	ldw	r2,-36(fp)
   17a28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a2c:	e0bffa17 	ldw	r2,-24(fp)
   17a30:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17a34:	e0bfff03 	ldbu	r2,-4(fp)
   17a38:	1080010c 	andi	r2,r2,4
   17a3c:	1000011e 	bne	r2,zero,17a44 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   17a40:	00137d00 	call	137d0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   17a44:	0005883a 	mov	r2,zero
   17a48:	00004106 	br	17b50 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17a4c:	e0bffd17 	ldw	r2,-12(fp)
   17a50:	10800117 	ldw	r2,4(r2)
   17a54:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17a58:	e0bff817 	ldw	r2,-32(fp)
   17a5c:	10c0058b 	ldhu	r3,22(r2)
   17a60:	e0bff817 	ldw	r2,-32(fp)
   17a64:	1080050b 	ldhu	r2,20(r2)
   17a68:	18ffffcc 	andi	r3,r3,65535
   17a6c:	10bfffcc 	andi	r2,r2,65535
   17a70:	18800636 	bltu	r3,r2,17a8c <OSQPostOpt+0x134>
   17a74:	e0bff717 	ldw	r2,-36(fp)
   17a78:	e0bffb15 	stw	r2,-20(fp)
   17a7c:	e0bffb17 	ldw	r2,-20(fp)
   17a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17a84:	00800784 	movi	r2,30
   17a88:	00003106 	br	17b50 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   17a8c:	e0bfff03 	ldbu	r2,-4(fp)
   17a90:	1080008c 	andi	r2,r2,2
   17a94:	10001326 	beq	r2,zero,17ae4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   17a98:	e0bff817 	ldw	r2,-32(fp)
   17a9c:	10c00417 	ldw	r3,16(r2)
   17aa0:	e0bff817 	ldw	r2,-32(fp)
   17aa4:	10800117 	ldw	r2,4(r2)
   17aa8:	1880041e 	bne	r3,r2,17abc <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   17aac:	e0bff817 	ldw	r2,-32(fp)
   17ab0:	10c00217 	ldw	r3,8(r2)
   17ab4:	e0bff817 	ldw	r2,-32(fp)
   17ab8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   17abc:	e0bff817 	ldw	r2,-32(fp)
   17ac0:	10800417 	ldw	r2,16(r2)
   17ac4:	10ffff04 	addi	r3,r2,-4
   17ac8:	e0bff817 	ldw	r2,-32(fp)
   17acc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   17ad0:	e0bff817 	ldw	r2,-32(fp)
   17ad4:	10800417 	ldw	r2,16(r2)
   17ad8:	e0fffe17 	ldw	r3,-8(fp)
   17adc:	10c00015 	stw	r3,0(r2)
   17ae0:	00001006 	br	17b24 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   17ae4:	e0bff817 	ldw	r2,-32(fp)
   17ae8:	10800317 	ldw	r2,12(r2)
   17aec:	11000104 	addi	r4,r2,4
   17af0:	e0fff817 	ldw	r3,-32(fp)
   17af4:	19000315 	stw	r4,12(r3)
   17af8:	e0fffe17 	ldw	r3,-8(fp)
   17afc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   17b00:	e0bff817 	ldw	r2,-32(fp)
   17b04:	10c00317 	ldw	r3,12(r2)
   17b08:	e0bff817 	ldw	r2,-32(fp)
   17b0c:	10800217 	ldw	r2,8(r2)
   17b10:	1880041e 	bne	r3,r2,17b24 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   17b14:	e0bff817 	ldw	r2,-32(fp)
   17b18:	10c00117 	ldw	r3,4(r2)
   17b1c:	e0bff817 	ldw	r2,-32(fp)
   17b20:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17b24:	e0bff817 	ldw	r2,-32(fp)
   17b28:	1080058b 	ldhu	r2,22(r2)
   17b2c:	10800044 	addi	r2,r2,1
   17b30:	1007883a 	mov	r3,r2
   17b34:	e0bff817 	ldw	r2,-32(fp)
   17b38:	10c0058d 	sth	r3,22(r2)
   17b3c:	e0bff717 	ldw	r2,-36(fp)
   17b40:	e0bffc15 	stw	r2,-16(fp)
   17b44:	e0bffc17 	ldw	r2,-16(fp)
   17b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17b4c:	0005883a 	mov	r2,zero
}
   17b50:	e037883a 	mov	sp,fp
   17b54:	dfc00117 	ldw	ra,4(sp)
   17b58:	df000017 	ldw	fp,0(sp)
   17b5c:	dec00204 	addi	sp,sp,8
   17b60:	f800283a 	ret

00017b64 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   17b64:	defff604 	addi	sp,sp,-40
   17b68:	df000915 	stw	fp,36(sp)
   17b6c:	df000904 	addi	fp,sp,36
   17b70:	e13ffe15 	stw	r4,-8(fp)
   17b74:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17b78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17b7c:	e0bffe17 	ldw	r2,-8(fp)
   17b80:	1000021e 	bne	r2,zero,17b8c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17b84:	00800104 	movi	r2,4
   17b88:	00004906 	br	17cb0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   17b8c:	e0bfff17 	ldw	r2,-4(fp)
   17b90:	1000021e 	bne	r2,zero,17b9c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17b94:	00800244 	movi	r2,9
   17b98:	00004506 	br	17cb0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17b9c:	e0bffe17 	ldw	r2,-8(fp)
   17ba0:	10800003 	ldbu	r2,0(r2)
   17ba4:	10803fcc 	andi	r2,r2,255
   17ba8:	108000a0 	cmpeqi	r2,r2,2
   17bac:	1000021e 	bne	r2,zero,17bb8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   17bb0:	00800044 	movi	r2,1
   17bb4:	00003e06 	br	17cb0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17bb8:	0005303a 	rdctl	r2,status
   17bbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17bc0:	e0fffc17 	ldw	r3,-16(fp)
   17bc4:	00bfff84 	movi	r2,-2
   17bc8:	1884703a 	and	r2,r3,r2
   17bcc:	1001703a 	wrctl	status,r2
  
  return context;
   17bd0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17bd4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   17bd8:	e0bffe17 	ldw	r2,-8(fp)
   17bdc:	10c00283 	ldbu	r3,10(r2)
   17be0:	e0bfff17 	ldw	r2,-4(fp)
   17be4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   17be8:	e0bffe17 	ldw	r2,-8(fp)
   17bec:	108002c4 	addi	r2,r2,11
   17bf0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   17bf4:	e0bfff17 	ldw	r2,-4(fp)
   17bf8:	10800204 	addi	r2,r2,8
   17bfc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17c00:	e03ff705 	stb	zero,-36(fp)
   17c04:	00000b06 	br	17c34 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   17c08:	e0bff917 	ldw	r2,-28(fp)
   17c0c:	10c00044 	addi	r3,r2,1
   17c10:	e0fff915 	stw	r3,-28(fp)
   17c14:	e0fff817 	ldw	r3,-32(fp)
   17c18:	19000044 	addi	r4,r3,1
   17c1c:	e13ff815 	stw	r4,-32(fp)
   17c20:	18c00003 	ldbu	r3,0(r3)
   17c24:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17c28:	e0bff703 	ldbu	r2,-36(fp)
   17c2c:	10800044 	addi	r2,r2,1
   17c30:	e0bff705 	stb	r2,-36(fp)
   17c34:	e0bff703 	ldbu	r2,-36(fp)
   17c38:	108000f0 	cmpltui	r2,r2,3
   17c3c:	103ff21e 	bne	r2,zero,17c08 <__alt_mem_Flash_flash_data+0xf4017c08>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   17c40:	e0bffe17 	ldw	r2,-8(fp)
   17c44:	10800117 	ldw	r2,4(r2)
   17c48:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   17c4c:	e0bffb17 	ldw	r2,-20(fp)
   17c50:	1080058b 	ldhu	r2,22(r2)
   17c54:	10bfffcc 	andi	r2,r2,65535
   17c58:	10000626 	beq	r2,zero,17c74 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   17c5c:	e0bffb17 	ldw	r2,-20(fp)
   17c60:	10800417 	ldw	r2,16(r2)
   17c64:	10c00017 	ldw	r3,0(r2)
   17c68:	e0bfff17 	ldw	r2,-4(fp)
   17c6c:	10c00015 	stw	r3,0(r2)
   17c70:	00000206 	br	17c7c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   17c74:	e0bfff17 	ldw	r2,-4(fp)
   17c78:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   17c7c:	e0bffb17 	ldw	r2,-20(fp)
   17c80:	10c0058b 	ldhu	r3,22(r2)
   17c84:	e0bfff17 	ldw	r2,-4(fp)
   17c88:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   17c8c:	e0bffb17 	ldw	r2,-20(fp)
   17c90:	10c0050b 	ldhu	r3,20(r2)
   17c94:	e0bfff17 	ldw	r2,-4(fp)
   17c98:	10c0018d 	sth	r3,6(r2)
   17c9c:	e0bffa17 	ldw	r2,-24(fp)
   17ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ca4:	e0bffd17 	ldw	r2,-12(fp)
   17ca8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17cac:	0005883a 	mov	r2,zero
}
   17cb0:	e037883a 	mov	sp,fp
   17cb4:	df000017 	ldw	fp,0(sp)
   17cb8:	dec00104 	addi	sp,sp,4
   17cbc:	f800283a 	ret

00017cc0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   17cc0:	defffb04 	addi	sp,sp,-20
   17cc4:	dfc00415 	stw	ra,16(sp)
   17cc8:	df000315 	stw	fp,12(sp)
   17ccc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   17cd0:	010000f4 	movhi	r4,3
   17cd4:	213cac04 	addi	r4,r4,-3408
   17cd8:	01407804 	movi	r5,480
   17cdc:	001371c0 	call	1371c <OS_MemClr>
    pq1 = &OSQTbl[0];
   17ce0:	008000f4 	movhi	r2,3
   17ce4:	10bcac04 	addi	r2,r2,-3408
   17ce8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   17cec:	008000f4 	movhi	r2,3
   17cf0:	10bcb204 	addi	r2,r2,-3384
   17cf4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   17cf8:	e03ffd0d 	sth	zero,-12(fp)
   17cfc:	00000c06 	br	17d30 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   17d00:	e0bffe17 	ldw	r2,-8(fp)
   17d04:	e0ffff17 	ldw	r3,-4(fp)
   17d08:	10c00015 	stw	r3,0(r2)
        pq1++;
   17d0c:	e0bffe17 	ldw	r2,-8(fp)
   17d10:	10800604 	addi	r2,r2,24
   17d14:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   17d18:	e0bfff17 	ldw	r2,-4(fp)
   17d1c:	10800604 	addi	r2,r2,24
   17d20:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   17d24:	e0bffd0b 	ldhu	r2,-12(fp)
   17d28:	10800044 	addi	r2,r2,1
   17d2c:	e0bffd0d 	sth	r2,-12(fp)
   17d30:	e0bffd0b 	ldhu	r2,-12(fp)
   17d34:	108004f0 	cmpltui	r2,r2,19
   17d38:	103ff11e 	bne	r2,zero,17d00 <__alt_mem_Flash_flash_data+0xf4017d00>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   17d3c:	e0bffe17 	ldw	r2,-8(fp)
   17d40:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   17d44:	008000b4 	movhi	r2,2
   17d48:	108e3b04 	addi	r2,r2,14572
   17d4c:	00c000f4 	movhi	r3,3
   17d50:	18fcac04 	addi	r3,r3,-3408
   17d54:	10c00015 	stw	r3,0(r2)
#endif
}
   17d58:	e037883a 	mov	sp,fp
   17d5c:	dfc00117 	ldw	ra,4(sp)
   17d60:	df000017 	ldw	fp,0(sp)
   17d64:	dec00204 	addi	sp,sp,8
   17d68:	f800283a 	ret

00017d6c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   17d6c:	defffa04 	addi	sp,sp,-24
   17d70:	df000515 	stw	fp,20(sp)
   17d74:	df000504 	addi	fp,sp,20
   17d78:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17d7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17d80:	e0bfff17 	ldw	r2,-4(fp)
   17d84:	1000021e 	bne	r2,zero,17d90 <OSSemAccept+0x24>
        return (0);
   17d88:	0005883a 	mov	r2,zero
   17d8c:	00001f06 	br	17e0c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17d90:	e0bfff17 	ldw	r2,-4(fp)
   17d94:	10800003 	ldbu	r2,0(r2)
   17d98:	10803fcc 	andi	r2,r2,255
   17d9c:	108000e0 	cmpeqi	r2,r2,3
   17da0:	1000021e 	bne	r2,zero,17dac <OSSemAccept+0x40>
        return (0);
   17da4:	0005883a 	mov	r2,zero
   17da8:	00001806 	br	17e0c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dac:	0005303a 	rdctl	r2,status
   17db0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17db4:	e0fffd17 	ldw	r3,-12(fp)
   17db8:	00bfff84 	movi	r2,-2
   17dbc:	1884703a 	and	r2,r3,r2
   17dc0:	1001703a 	wrctl	status,r2
  
  return context;
   17dc4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17dc8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   17dcc:	e0bfff17 	ldw	r2,-4(fp)
   17dd0:	1080020b 	ldhu	r2,8(r2)
   17dd4:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   17dd8:	e0bffc0b 	ldhu	r2,-16(fp)
   17ddc:	10000626 	beq	r2,zero,17df8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   17de0:	e0bfff17 	ldw	r2,-4(fp)
   17de4:	1080020b 	ldhu	r2,8(r2)
   17de8:	10bfffc4 	addi	r2,r2,-1
   17dec:	1007883a 	mov	r3,r2
   17df0:	e0bfff17 	ldw	r2,-4(fp)
   17df4:	10c0020d 	sth	r3,8(r2)
   17df8:	e0bffb17 	ldw	r2,-20(fp)
   17dfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e00:	e0bffe17 	ldw	r2,-8(fp)
   17e04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   17e08:	e0bffc0b 	ldhu	r2,-16(fp)
}
   17e0c:	e037883a 	mov	sp,fp
   17e10:	df000017 	ldw	fp,0(sp)
   17e14:	dec00104 	addi	sp,sp,4
   17e18:	f800283a 	ret

00017e1c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   17e1c:	defff904 	addi	sp,sp,-28
   17e20:	dfc00615 	stw	ra,24(sp)
   17e24:	df000515 	stw	fp,20(sp)
   17e28:	df000504 	addi	fp,sp,20
   17e2c:	2005883a 	mov	r2,r4
   17e30:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17e34:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17e38:	008000b4 	movhi	r2,2
   17e3c:	108e3e04 	addi	r2,r2,14584
   17e40:	10800003 	ldbu	r2,0(r2)
   17e44:	10803fcc 	andi	r2,r2,255
   17e48:	10000226 	beq	r2,zero,17e54 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   17e4c:	0005883a 	mov	r2,zero
   17e50:	00002d06 	br	17f08 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e54:	0005303a 	rdctl	r2,status
   17e58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e5c:	e0fffd17 	ldw	r3,-12(fp)
   17e60:	00bfff84 	movi	r2,-2
   17e64:	1884703a 	and	r2,r3,r2
   17e68:	1001703a 	wrctl	status,r2
  
  return context;
   17e6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17e70:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   17e74:	008000b4 	movhi	r2,2
   17e78:	108e3d04 	addi	r2,r2,14580
   17e7c:	10800017 	ldw	r2,0(r2)
   17e80:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   17e84:	008000b4 	movhi	r2,2
   17e88:	108e3d04 	addi	r2,r2,14580
   17e8c:	10800017 	ldw	r2,0(r2)
   17e90:	10000726 	beq	r2,zero,17eb0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17e94:	008000b4 	movhi	r2,2
   17e98:	108e3d04 	addi	r2,r2,14580
   17e9c:	10800017 	ldw	r2,0(r2)
   17ea0:	10c00117 	ldw	r3,4(r2)
   17ea4:	008000b4 	movhi	r2,2
   17ea8:	108e3d04 	addi	r2,r2,14580
   17eac:	10c00015 	stw	r3,0(r2)
   17eb0:	e0bffb17 	ldw	r2,-20(fp)
   17eb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17eb8:	e0bffe17 	ldw	r2,-8(fp)
   17ebc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   17ec0:	e0bffc17 	ldw	r2,-16(fp)
   17ec4:	10000f26 	beq	r2,zero,17f04 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   17ec8:	e0bffc17 	ldw	r2,-16(fp)
   17ecc:	00c000c4 	movi	r3,3
   17ed0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   17ed4:	e0bffc17 	ldw	r2,-16(fp)
   17ed8:	e0ffff0b 	ldhu	r3,-4(fp)
   17edc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   17ee0:	e0bffc17 	ldw	r2,-16(fp)
   17ee4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   17ee8:	e0bffc17 	ldw	r2,-16(fp)
   17eec:	00c00fc4 	movi	r3,63
   17ef0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   17ef4:	e0bffc17 	ldw	r2,-16(fp)
   17ef8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   17efc:	e13ffc17 	ldw	r4,-16(fp)
   17f00:	00133580 	call	13358 <OS_EventWaitListInit>
    }
    return (pevent);
   17f04:	e0bffc17 	ldw	r2,-16(fp)
}
   17f08:	e037883a 	mov	sp,fp
   17f0c:	dfc00117 	ldw	ra,4(sp)
   17f10:	df000017 	ldw	fp,0(sp)
   17f14:	dec00204 	addi	sp,sp,8
   17f18:	f800283a 	ret

00017f1c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17f1c:	defff304 	addi	sp,sp,-52
   17f20:	dfc00c15 	stw	ra,48(sp)
   17f24:	df000b15 	stw	fp,44(sp)
   17f28:	df000b04 	addi	fp,sp,44
   17f2c:	e13ffd15 	stw	r4,-12(fp)
   17f30:	2805883a 	mov	r2,r5
   17f34:	e1bfff15 	stw	r6,-4(fp)
   17f38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17f3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17f40:	e0bfff17 	ldw	r2,-4(fp)
   17f44:	1000021e 	bne	r2,zero,17f50 <OSSemDel+0x34>
        return (pevent);
   17f48:	e0bffd17 	ldw	r2,-12(fp)
   17f4c:	00008806 	br	18170 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17f50:	e0bffd17 	ldw	r2,-12(fp)
   17f54:	1000051e 	bne	r2,zero,17f6c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17f58:	e0bfff17 	ldw	r2,-4(fp)
   17f5c:	00c00104 	movi	r3,4
   17f60:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17f64:	e0bffd17 	ldw	r2,-12(fp)
   17f68:	00008106 	br	18170 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   17f6c:	e0bffd17 	ldw	r2,-12(fp)
   17f70:	10800003 	ldbu	r2,0(r2)
   17f74:	10803fcc 	andi	r2,r2,255
   17f78:	108000e0 	cmpeqi	r2,r2,3
   17f7c:	1000051e 	bne	r2,zero,17f94 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17f80:	e0bfff17 	ldw	r2,-4(fp)
   17f84:	00c00044 	movi	r3,1
   17f88:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17f8c:	e0bffd17 	ldw	r2,-12(fp)
   17f90:	00007706 	br	18170 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17f94:	008000b4 	movhi	r2,2
   17f98:	108e3e04 	addi	r2,r2,14584
   17f9c:	10800003 	ldbu	r2,0(r2)
   17fa0:	10803fcc 	andi	r2,r2,255
   17fa4:	10000526 	beq	r2,zero,17fbc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   17fa8:	e0bfff17 	ldw	r2,-4(fp)
   17fac:	00c003c4 	movi	r3,15
   17fb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17fb4:	e0bffd17 	ldw	r2,-12(fp)
   17fb8:	00006d06 	br	18170 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17fbc:	0005303a 	rdctl	r2,status
   17fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17fc4:	e0fff817 	ldw	r3,-32(fp)
   17fc8:	00bfff84 	movi	r2,-2
   17fcc:	1884703a 	and	r2,r3,r2
   17fd0:	1001703a 	wrctl	status,r2
  
  return context;
   17fd4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17fd8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   17fdc:	e0bffd17 	ldw	r2,-12(fp)
   17fe0:	10800283 	ldbu	r2,10(r2)
   17fe4:	10803fcc 	andi	r2,r2,255
   17fe8:	10000326 	beq	r2,zero,17ff8 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   17fec:	00800044 	movi	r2,1
   17ff0:	e0bff505 	stb	r2,-44(fp)
   17ff4:	00000106 	br	17ffc <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   17ff8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   17ffc:	e0bffe03 	ldbu	r2,-8(fp)
   18000:	10000326 	beq	r2,zero,18010 <OSSemDel+0xf4>
   18004:	10800060 	cmpeqi	r2,r2,1
   18008:	10002c1e 	bne	r2,zero,180bc <OSSemDel+0x1a0>
   1800c:	00004d06 	br	18144 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18010:	e0bff503 	ldbu	r2,-44(fp)
   18014:	10001a1e 	bne	r2,zero,18080 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18018:	e0bffd17 	ldw	r2,-12(fp)
   1801c:	00c00fc4 	movi	r3,63
   18020:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18024:	e0bffd17 	ldw	r2,-12(fp)
   18028:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1802c:	e0bffd17 	ldw	r2,-12(fp)
   18030:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18034:	008000b4 	movhi	r2,2
   18038:	108e3d04 	addi	r2,r2,14580
   1803c:	10c00017 	ldw	r3,0(r2)
   18040:	e0bffd17 	ldw	r2,-12(fp)
   18044:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18048:	e0bffd17 	ldw	r2,-12(fp)
   1804c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18050:	008000b4 	movhi	r2,2
   18054:	108e3d04 	addi	r2,r2,14580
   18058:	e0fffd17 	ldw	r3,-12(fp)
   1805c:	10c00015 	stw	r3,0(r2)
   18060:	e0bff717 	ldw	r2,-36(fp)
   18064:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18068:	e0bff917 	ldw	r2,-28(fp)
   1806c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18070:	e0bfff17 	ldw	r2,-4(fp)
   18074:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   18078:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1807c:	00003b06 	br	1816c <OSSemDel+0x250>
   18080:	e0bff717 	ldw	r2,-36(fp)
   18084:	e0bffa15 	stw	r2,-24(fp)
   18088:	e0bffa17 	ldw	r2,-24(fp)
   1808c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18090:	e0bfff17 	ldw	r2,-4(fp)
   18094:	00c01244 	movi	r3,73
   18098:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1809c:	e0bffd17 	ldw	r2,-12(fp)
   180a0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   180a4:	00003106 	br	1816c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   180a8:	e13ffd17 	ldw	r4,-12(fp)
   180ac:	000b883a 	mov	r5,zero
   180b0:	01800044 	movi	r6,1
   180b4:	000f883a 	mov	r7,zero
   180b8:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   180bc:	e0bffd17 	ldw	r2,-12(fp)
   180c0:	10800283 	ldbu	r2,10(r2)
   180c4:	10803fcc 	andi	r2,r2,255
   180c8:	103ff71e 	bne	r2,zero,180a8 <__alt_mem_Flash_flash_data+0xf40180a8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   180cc:	e0bffd17 	ldw	r2,-12(fp)
   180d0:	00c00fc4 	movi	r3,63
   180d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   180d8:	e0bffd17 	ldw	r2,-12(fp)
   180dc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   180e0:	e0bffd17 	ldw	r2,-12(fp)
   180e4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   180e8:	008000b4 	movhi	r2,2
   180ec:	108e3d04 	addi	r2,r2,14580
   180f0:	10c00017 	ldw	r3,0(r2)
   180f4:	e0bffd17 	ldw	r2,-12(fp)
   180f8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   180fc:	e0bffd17 	ldw	r2,-12(fp)
   18100:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18104:	008000b4 	movhi	r2,2
   18108:	108e3d04 	addi	r2,r2,14580
   1810c:	e0fffd17 	ldw	r3,-12(fp)
   18110:	10c00015 	stw	r3,0(r2)
   18114:	e0bff717 	ldw	r2,-36(fp)
   18118:	e0bffb15 	stw	r2,-20(fp)
   1811c:	e0bffb17 	ldw	r2,-20(fp)
   18120:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18124:	e0bff503 	ldbu	r2,-44(fp)
   18128:	10800058 	cmpnei	r2,r2,1
   1812c:	1000011e 	bne	r2,zero,18134 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18130:	00137d00 	call	137d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18134:	e0bfff17 	ldw	r2,-4(fp)
   18138:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1813c:	e03ff615 	stw	zero,-40(fp)
             break;
   18140:	00000a06 	br	1816c <OSSemDel+0x250>
   18144:	e0bff717 	ldw	r2,-36(fp)
   18148:	e0bffc15 	stw	r2,-16(fp)
   1814c:	e0bffc17 	ldw	r2,-16(fp)
   18150:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18154:	e0bfff17 	ldw	r2,-4(fp)
   18158:	00c001c4 	movi	r3,7
   1815c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18160:	e0bffd17 	ldw	r2,-12(fp)
   18164:	e0bff615 	stw	r2,-40(fp)
             break;
   18168:	0001883a 	nop
    }
    return (pevent_return);
   1816c:	e0bff617 	ldw	r2,-40(fp)
}
   18170:	e037883a 	mov	sp,fp
   18174:	dfc00117 	ldw	ra,4(sp)
   18178:	df000017 	ldw	fp,0(sp)
   1817c:	dec00204 	addi	sp,sp,8
   18180:	f800283a 	ret

00018184 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18184:	defff504 	addi	sp,sp,-44
   18188:	dfc00a15 	stw	ra,40(sp)
   1818c:	df000915 	stw	fp,36(sp)
   18190:	df000904 	addi	fp,sp,36
   18194:	e13ffd15 	stw	r4,-12(fp)
   18198:	2805883a 	mov	r2,r5
   1819c:	e1bfff15 	stw	r6,-4(fp)
   181a0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   181a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   181a8:	e0bfff17 	ldw	r2,-4(fp)
   181ac:	1000011e 	bne	r2,zero,181b4 <OSSemPend+0x30>
        return;
   181b0:	00008906 	br	183d8 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   181b4:	e0bffd17 	ldw	r2,-12(fp)
   181b8:	1000041e 	bne	r2,zero,181cc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   181bc:	e0bfff17 	ldw	r2,-4(fp)
   181c0:	00c00104 	movi	r3,4
   181c4:	10c00005 	stb	r3,0(r2)
        return;
   181c8:	00008306 	br	183d8 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   181cc:	e0bffd17 	ldw	r2,-12(fp)
   181d0:	10800003 	ldbu	r2,0(r2)
   181d4:	10803fcc 	andi	r2,r2,255
   181d8:	108000e0 	cmpeqi	r2,r2,3
   181dc:	1000041e 	bne	r2,zero,181f0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   181e0:	e0bfff17 	ldw	r2,-4(fp)
   181e4:	00c00044 	movi	r3,1
   181e8:	10c00005 	stb	r3,0(r2)
        return;
   181ec:	00007a06 	br	183d8 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   181f0:	008000b4 	movhi	r2,2
   181f4:	108e3e04 	addi	r2,r2,14584
   181f8:	10800003 	ldbu	r2,0(r2)
   181fc:	10803fcc 	andi	r2,r2,255
   18200:	10000426 	beq	r2,zero,18214 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   18204:	e0bfff17 	ldw	r2,-4(fp)
   18208:	00c00084 	movi	r3,2
   1820c:	10c00005 	stb	r3,0(r2)
        return;
   18210:	00007106 	br	183d8 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   18214:	008000b4 	movhi	r2,2
   18218:	108e3004 	addi	r2,r2,14528
   1821c:	10800003 	ldbu	r2,0(r2)
   18220:	10803fcc 	andi	r2,r2,255
   18224:	10000426 	beq	r2,zero,18238 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   18228:	e0bfff17 	ldw	r2,-4(fp)
   1822c:	00c00344 	movi	r3,13
   18230:	10c00005 	stb	r3,0(r2)
        return;
   18234:	00006806 	br	183d8 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18238:	0005303a 	rdctl	r2,status
   1823c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18240:	e0fff817 	ldw	r3,-32(fp)
   18244:	00bfff84 	movi	r2,-2
   18248:	1884703a 	and	r2,r3,r2
   1824c:	1001703a 	wrctl	status,r2
  
  return context;
   18250:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18254:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   18258:	e0bffd17 	ldw	r2,-12(fp)
   1825c:	1080020b 	ldhu	r2,8(r2)
   18260:	10bfffcc 	andi	r2,r2,65535
   18264:	10000d26 	beq	r2,zero,1829c <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   18268:	e0bffd17 	ldw	r2,-12(fp)
   1826c:	1080020b 	ldhu	r2,8(r2)
   18270:	10bfffc4 	addi	r2,r2,-1
   18274:	1007883a 	mov	r3,r2
   18278:	e0bffd17 	ldw	r2,-12(fp)
   1827c:	10c0020d 	sth	r3,8(r2)
   18280:	e0bff717 	ldw	r2,-36(fp)
   18284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18288:	e0bff917 	ldw	r2,-28(fp)
   1828c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   18290:	e0bfff17 	ldw	r2,-4(fp)
   18294:	10000005 	stb	zero,0(r2)
        return;
   18298:	00004f06 	br	183d8 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1829c:	008000b4 	movhi	r2,2
   182a0:	108e3f04 	addi	r2,r2,14588
   182a4:	10c00017 	ldw	r3,0(r2)
   182a8:	008000b4 	movhi	r2,2
   182ac:	108e3f04 	addi	r2,r2,14588
   182b0:	10800017 	ldw	r2,0(r2)
   182b4:	10800c03 	ldbu	r2,48(r2)
   182b8:	10800054 	ori	r2,r2,1
   182bc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   182c0:	008000b4 	movhi	r2,2
   182c4:	108e3f04 	addi	r2,r2,14588
   182c8:	10800017 	ldw	r2,0(r2)
   182cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   182d0:	008000b4 	movhi	r2,2
   182d4:	108e3f04 	addi	r2,r2,14588
   182d8:	10800017 	ldw	r2,0(r2)
   182dc:	e0fffe0b 	ldhu	r3,-8(fp)
   182e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   182e4:	e13ffd17 	ldw	r4,-12(fp)
   182e8:	0012f500 	call	12f50 <OS_EventTaskWait>
   182ec:	e0bff717 	ldw	r2,-36(fp)
   182f0:	e0bffa15 	stw	r2,-24(fp)
   182f4:	e0bffa17 	ldw	r2,-24(fp)
   182f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   182fc:	00137d00 	call	137d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18300:	0005303a 	rdctl	r2,status
   18304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18308:	e0fffb17 	ldw	r3,-20(fp)
   1830c:	00bfff84 	movi	r2,-2
   18310:	1884703a 	and	r2,r3,r2
   18314:	1001703a 	wrctl	status,r2
  
  return context;
   18318:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1831c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18320:	008000b4 	movhi	r2,2
   18324:	108e3f04 	addi	r2,r2,14588
   18328:	10800017 	ldw	r2,0(r2)
   1832c:	10800c43 	ldbu	r2,49(r2)
   18330:	10803fcc 	andi	r2,r2,255
   18334:	10000326 	beq	r2,zero,18344 <OSSemPend+0x1c0>
   18338:	108000a0 	cmpeqi	r2,r2,2
   1833c:	1000041e 	bne	r2,zero,18350 <OSSemPend+0x1cc>
   18340:	00000706 	br	18360 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   18344:	e0bfff17 	ldw	r2,-4(fp)
   18348:	10000005 	stb	zero,0(r2)
             break;
   1834c:	00000e06 	br	18388 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18350:	e0bfff17 	ldw	r2,-4(fp)
   18354:	00c00384 	movi	r3,14
   18358:	10c00005 	stb	r3,0(r2)
             break;
   1835c:	00000a06 	br	18388 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   18360:	008000b4 	movhi	r2,2
   18364:	108e3f04 	addi	r2,r2,14588
   18368:	10800017 	ldw	r2,0(r2)
   1836c:	1009883a 	mov	r4,r2
   18370:	e17ffd17 	ldw	r5,-12(fp)
   18374:	00131a80 	call	131a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18378:	e0bfff17 	ldw	r2,-4(fp)
   1837c:	00c00284 	movi	r3,10
   18380:	10c00005 	stb	r3,0(r2)
             break;
   18384:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18388:	008000b4 	movhi	r2,2
   1838c:	108e3f04 	addi	r2,r2,14588
   18390:	10800017 	ldw	r2,0(r2)
   18394:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   18398:	008000b4 	movhi	r2,2
   1839c:	108e3f04 	addi	r2,r2,14588
   183a0:	10800017 	ldw	r2,0(r2)
   183a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   183a8:	008000b4 	movhi	r2,2
   183ac:	108e3f04 	addi	r2,r2,14588
   183b0:	10800017 	ldw	r2,0(r2)
   183b4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   183b8:	008000b4 	movhi	r2,2
   183bc:	108e3f04 	addi	r2,r2,14588
   183c0:	10800017 	ldw	r2,0(r2)
   183c4:	10000815 	stw	zero,32(r2)
   183c8:	e0bff717 	ldw	r2,-36(fp)
   183cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183d0:	e0bffc17 	ldw	r2,-16(fp)
   183d4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   183d8:	e037883a 	mov	sp,fp
   183dc:	dfc00117 	ldw	ra,4(sp)
   183e0:	df000017 	ldw	fp,0(sp)
   183e4:	dec00204 	addi	sp,sp,8
   183e8:	f800283a 	ret

000183ec <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   183ec:	defff604 	addi	sp,sp,-40
   183f0:	dfc00915 	stw	ra,36(sp)
   183f4:	df000815 	stw	fp,32(sp)
   183f8:	df000804 	addi	fp,sp,32
   183fc:	e13ffd15 	stw	r4,-12(fp)
   18400:	2805883a 	mov	r2,r5
   18404:	e1bfff15 	stw	r6,-4(fp)
   18408:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1840c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18410:	e0bfff17 	ldw	r2,-4(fp)
   18414:	1000021e 	bne	r2,zero,18420 <OSSemPendAbort+0x34>
        return (0);
   18418:	0005883a 	mov	r2,zero
   1841c:	00004906 	br	18544 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18420:	e0bffd17 	ldw	r2,-12(fp)
   18424:	1000051e 	bne	r2,zero,1843c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18428:	e0bfff17 	ldw	r2,-4(fp)
   1842c:	00c00104 	movi	r3,4
   18430:	10c00005 	stb	r3,0(r2)
        return (0);
   18434:	0005883a 	mov	r2,zero
   18438:	00004206 	br	18544 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1843c:	e0bffd17 	ldw	r2,-12(fp)
   18440:	10800003 	ldbu	r2,0(r2)
   18444:	10803fcc 	andi	r2,r2,255
   18448:	108000e0 	cmpeqi	r2,r2,3
   1844c:	1000051e 	bne	r2,zero,18464 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18450:	e0bfff17 	ldw	r2,-4(fp)
   18454:	00c00044 	movi	r3,1
   18458:	10c00005 	stb	r3,0(r2)
        return (0);
   1845c:	0005883a 	mov	r2,zero
   18460:	00003806 	br	18544 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18464:	0005303a 	rdctl	r2,status
   18468:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1846c:	e0fffa17 	ldw	r3,-24(fp)
   18470:	00bfff84 	movi	r2,-2
   18474:	1884703a 	and	r2,r3,r2
   18478:	1001703a 	wrctl	status,r2
  
  return context;
   1847c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18480:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   18484:	e0bffd17 	ldw	r2,-12(fp)
   18488:	10800283 	ldbu	r2,10(r2)
   1848c:	10803fcc 	andi	r2,r2,255
   18490:	10002526 	beq	r2,zero,18528 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   18494:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18498:	e0bffe03 	ldbu	r2,-8(fp)
   1849c:	10800060 	cmpeqi	r2,r2,1
   184a0:	10000e26 	beq	r2,zero,184dc <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   184a4:	00000806 	br	184c8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   184a8:	e13ffd17 	ldw	r4,-12(fp)
   184ac:	000b883a 	mov	r5,zero
   184b0:	01800044 	movi	r6,1
   184b4:	01c00084 	movi	r7,2
   184b8:	0012db80 	call	12db8 <OS_EventTaskRdy>
                     nbr_tasks++;
   184bc:	e0bff803 	ldbu	r2,-32(fp)
   184c0:	10800044 	addi	r2,r2,1
   184c4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   184c8:	e0bffd17 	ldw	r2,-12(fp)
   184cc:	10800283 	ldbu	r2,10(r2)
   184d0:	10803fcc 	andi	r2,r2,255
   184d4:	103ff41e 	bne	r2,zero,184a8 <__alt_mem_Flash_flash_data+0xf40184a8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   184d8:	00000906 	br	18500 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   184dc:	e13ffd17 	ldw	r4,-12(fp)
   184e0:	000b883a 	mov	r5,zero
   184e4:	01800044 	movi	r6,1
   184e8:	01c00084 	movi	r7,2
   184ec:	0012db80 	call	12db8 <OS_EventTaskRdy>
                 nbr_tasks++;
   184f0:	e0bff803 	ldbu	r2,-32(fp)
   184f4:	10800044 	addi	r2,r2,1
   184f8:	e0bff805 	stb	r2,-32(fp)
                 break;
   184fc:	0001883a 	nop
   18500:	e0bff917 	ldw	r2,-28(fp)
   18504:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18508:	e0bffb17 	ldw	r2,-20(fp)
   1850c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18510:	00137d00 	call	137d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18514:	e0bfff17 	ldw	r2,-4(fp)
   18518:	00c00384 	movi	r3,14
   1851c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18520:	e0bff803 	ldbu	r2,-32(fp)
   18524:	00000706 	br	18544 <OSSemPendAbort+0x158>
   18528:	e0bff917 	ldw	r2,-28(fp)
   1852c:	e0bffc15 	stw	r2,-16(fp)
   18530:	e0bffc17 	ldw	r2,-16(fp)
   18534:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18538:	e0bfff17 	ldw	r2,-4(fp)
   1853c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   18540:	0005883a 	mov	r2,zero
}
   18544:	e037883a 	mov	sp,fp
   18548:	dfc00117 	ldw	ra,4(sp)
   1854c:	df000017 	ldw	fp,0(sp)
   18550:	dec00204 	addi	sp,sp,8
   18554:	f800283a 	ret

00018558 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   18558:	defff804 	addi	sp,sp,-32
   1855c:	dfc00715 	stw	ra,28(sp)
   18560:	df000615 	stw	fp,24(sp)
   18564:	df000604 	addi	fp,sp,24
   18568:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1856c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18570:	e0bfff17 	ldw	r2,-4(fp)
   18574:	1000021e 	bne	r2,zero,18580 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   18578:	00800104 	movi	r2,4
   1857c:	00003506 	br	18654 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18580:	e0bfff17 	ldw	r2,-4(fp)
   18584:	10800003 	ldbu	r2,0(r2)
   18588:	10803fcc 	andi	r2,r2,255
   1858c:	108000e0 	cmpeqi	r2,r2,3
   18590:	1000021e 	bne	r2,zero,1859c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   18594:	00800044 	movi	r2,1
   18598:	00002e06 	br	18654 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1859c:	0005303a 	rdctl	r2,status
   185a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185a4:	e0fffb17 	ldw	r3,-20(fp)
   185a8:	00bfff84 	movi	r2,-2
   185ac:	1884703a 	and	r2,r3,r2
   185b0:	1001703a 	wrctl	status,r2
  
  return context;
   185b4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   185b8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   185bc:	e0bfff17 	ldw	r2,-4(fp)
   185c0:	10800283 	ldbu	r2,10(r2)
   185c4:	10803fcc 	andi	r2,r2,255
   185c8:	10000c26 	beq	r2,zero,185fc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   185cc:	e13fff17 	ldw	r4,-4(fp)
   185d0:	000b883a 	mov	r5,zero
   185d4:	01800044 	movi	r6,1
   185d8:	000f883a 	mov	r7,zero
   185dc:	0012db80 	call	12db8 <OS_EventTaskRdy>
   185e0:	e0bffa17 	ldw	r2,-24(fp)
   185e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   185e8:	e0bffc17 	ldw	r2,-16(fp)
   185ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   185f0:	00137d00 	call	137d0 <OS_Sched>
        return (OS_ERR_NONE);
   185f4:	0005883a 	mov	r2,zero
   185f8:	00001606 	br	18654 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   185fc:	e0bfff17 	ldw	r2,-4(fp)
   18600:	1080020b 	ldhu	r2,8(r2)
   18604:	10ffffcc 	andi	r3,r2,65535
   18608:	00bfffd4 	movui	r2,65535
   1860c:	18800c26 	beq	r3,r2,18640 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   18610:	e0bfff17 	ldw	r2,-4(fp)
   18614:	1080020b 	ldhu	r2,8(r2)
   18618:	10800044 	addi	r2,r2,1
   1861c:	1007883a 	mov	r3,r2
   18620:	e0bfff17 	ldw	r2,-4(fp)
   18624:	10c0020d 	sth	r3,8(r2)
   18628:	e0bffa17 	ldw	r2,-24(fp)
   1862c:	e0bffd15 	stw	r2,-12(fp)
   18630:	e0bffd17 	ldw	r2,-12(fp)
   18634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18638:	0005883a 	mov	r2,zero
   1863c:	00000506 	br	18654 <OSSemPost+0xfc>
   18640:	e0bffa17 	ldw	r2,-24(fp)
   18644:	e0bffe15 	stw	r2,-8(fp)
   18648:	e0bffe17 	ldw	r2,-8(fp)
   1864c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   18650:	00800c84 	movi	r2,50
}
   18654:	e037883a 	mov	sp,fp
   18658:	dfc00117 	ldw	ra,4(sp)
   1865c:	df000017 	ldw	fp,0(sp)
   18660:	dec00204 	addi	sp,sp,8
   18664:	f800283a 	ret

00018668 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18668:	defff704 	addi	sp,sp,-36
   1866c:	df000815 	stw	fp,32(sp)
   18670:	df000804 	addi	fp,sp,32
   18674:	e13ffe15 	stw	r4,-8(fp)
   18678:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1867c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18680:	e0bffe17 	ldw	r2,-8(fp)
   18684:	1000021e 	bne	r2,zero,18690 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18688:	00800104 	movi	r2,4
   1868c:	00003606 	br	18768 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   18690:	e0bfff17 	ldw	r2,-4(fp)
   18694:	1000021e 	bne	r2,zero,186a0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18698:	00800244 	movi	r2,9
   1869c:	00003206 	br	18768 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   186a0:	e0bffe17 	ldw	r2,-8(fp)
   186a4:	10800003 	ldbu	r2,0(r2)
   186a8:	10803fcc 	andi	r2,r2,255
   186ac:	108000e0 	cmpeqi	r2,r2,3
   186b0:	1000021e 	bne	r2,zero,186bc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   186b4:	00800044 	movi	r2,1
   186b8:	00002b06 	br	18768 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186bc:	0005303a 	rdctl	r2,status
   186c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186c4:	e0fffc17 	ldw	r3,-16(fp)
   186c8:	00bfff84 	movi	r2,-2
   186cc:	1884703a 	and	r2,r3,r2
   186d0:	1001703a 	wrctl	status,r2
  
  return context;
   186d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   186d8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   186dc:	e0bffe17 	ldw	r2,-8(fp)
   186e0:	10c00283 	ldbu	r3,10(r2)
   186e4:	e0bfff17 	ldw	r2,-4(fp)
   186e8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   186ec:	e0bffe17 	ldw	r2,-8(fp)
   186f0:	108002c4 	addi	r2,r2,11
   186f4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   186f8:	e0bfff17 	ldw	r2,-4(fp)
   186fc:	10800084 	addi	r2,r2,2
   18700:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18704:	e03ffa05 	stb	zero,-24(fp)
   18708:	00000b06 	br	18738 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1870c:	e0bff917 	ldw	r2,-28(fp)
   18710:	10c00044 	addi	r3,r2,1
   18714:	e0fff915 	stw	r3,-28(fp)
   18718:	e0fff817 	ldw	r3,-32(fp)
   1871c:	19000044 	addi	r4,r3,1
   18720:	e13ff815 	stw	r4,-32(fp)
   18724:	18c00003 	ldbu	r3,0(r3)
   18728:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1872c:	e0bffa03 	ldbu	r2,-24(fp)
   18730:	10800044 	addi	r2,r2,1
   18734:	e0bffa05 	stb	r2,-24(fp)
   18738:	e0bffa03 	ldbu	r2,-24(fp)
   1873c:	108000f0 	cmpltui	r2,r2,3
   18740:	103ff21e 	bne	r2,zero,1870c <__alt_mem_Flash_flash_data+0xf401870c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18744:	e0bffe17 	ldw	r2,-8(fp)
   18748:	10c0020b 	ldhu	r3,8(r2)
   1874c:	e0bfff17 	ldw	r2,-4(fp)
   18750:	10c0000d 	sth	r3,0(r2)
   18754:	e0bffb17 	ldw	r2,-20(fp)
   18758:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1875c:	e0bffd17 	ldw	r2,-12(fp)
   18760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18764:	0005883a 	mov	r2,zero
}
   18768:	e037883a 	mov	sp,fp
   1876c:	df000017 	ldw	fp,0(sp)
   18770:	dec00104 	addi	sp,sp,4
   18774:	f800283a 	ret

00018778 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18778:	defff904 	addi	sp,sp,-28
   1877c:	df000615 	stw	fp,24(sp)
   18780:	df000604 	addi	fp,sp,24
   18784:	e13ffd15 	stw	r4,-12(fp)
   18788:	2805883a 	mov	r2,r5
   1878c:	e1bfff15 	stw	r6,-4(fp)
   18790:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18794:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18798:	e0bfff17 	ldw	r2,-4(fp)
   1879c:	1000011e 	bne	r2,zero,187a4 <OSSemSet+0x2c>
        return;
   187a0:	00003006 	br	18864 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   187a4:	e0bffd17 	ldw	r2,-12(fp)
   187a8:	1000041e 	bne	r2,zero,187bc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   187ac:	e0bfff17 	ldw	r2,-4(fp)
   187b0:	00c00104 	movi	r3,4
   187b4:	10c00005 	stb	r3,0(r2)
        return;
   187b8:	00002a06 	br	18864 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   187bc:	e0bffd17 	ldw	r2,-12(fp)
   187c0:	10800003 	ldbu	r2,0(r2)
   187c4:	10803fcc 	andi	r2,r2,255
   187c8:	108000e0 	cmpeqi	r2,r2,3
   187cc:	1000041e 	bne	r2,zero,187e0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   187d0:	e0bfff17 	ldw	r2,-4(fp)
   187d4:	00c00044 	movi	r3,1
   187d8:	10c00005 	stb	r3,0(r2)
        return;
   187dc:	00002106 	br	18864 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187e0:	0005303a 	rdctl	r2,status
   187e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187e8:	e0fffb17 	ldw	r3,-20(fp)
   187ec:	00bfff84 	movi	r2,-2
   187f0:	1884703a 	and	r2,r3,r2
   187f4:	1001703a 	wrctl	status,r2
  
  return context;
   187f8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   187fc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   18800:	e0bfff17 	ldw	r2,-4(fp)
   18804:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   18808:	e0bffd17 	ldw	r2,-12(fp)
   1880c:	1080020b 	ldhu	r2,8(r2)
   18810:	10bfffcc 	andi	r2,r2,65535
   18814:	10000426 	beq	r2,zero,18828 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   18818:	e0bffd17 	ldw	r2,-12(fp)
   1881c:	e0fffe0b 	ldhu	r3,-8(fp)
   18820:	10c0020d 	sth	r3,8(r2)
   18824:	00000b06 	br	18854 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18828:	e0bffd17 	ldw	r2,-12(fp)
   1882c:	10800283 	ldbu	r2,10(r2)
   18830:	10803fcc 	andi	r2,r2,255
   18834:	1000041e 	bne	r2,zero,18848 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18838:	e0bffd17 	ldw	r2,-12(fp)
   1883c:	e0fffe0b 	ldhu	r3,-8(fp)
   18840:	10c0020d 	sth	r3,8(r2)
   18844:	00000306 	br	18854 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18848:	e0bfff17 	ldw	r2,-4(fp)
   1884c:	00c01244 	movi	r3,73
   18850:	10c00005 	stb	r3,0(r2)
   18854:	e0bffa17 	ldw	r2,-24(fp)
   18858:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1885c:	e0bffc17 	ldw	r2,-16(fp)
   18860:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   18864:	e037883a 	mov	sp,fp
   18868:	df000017 	ldw	fp,0(sp)
   1886c:	dec00104 	addi	sp,sp,4
   18870:	f800283a 	ret

00018874 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18874:	defff104 	addi	sp,sp,-60
   18878:	dfc00e15 	stw	ra,56(sp)
   1887c:	df000d15 	stw	fp,52(sp)
   18880:	df000d04 	addi	fp,sp,52
   18884:	2007883a 	mov	r3,r4
   18888:	2805883a 	mov	r2,r5
   1888c:	e0fffe05 	stb	r3,-8(fp)
   18890:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18894:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18898:	e0bffe03 	ldbu	r2,-8(fp)
   1889c:	10800530 	cmpltui	r2,r2,20
   188a0:	1000051e 	bne	r2,zero,188b8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   188a4:	e0bffe03 	ldbu	r2,-8(fp)
   188a8:	10803fe0 	cmpeqi	r2,r2,255
   188ac:	1000021e 	bne	r2,zero,188b8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   188b0:	00800a84 	movi	r2,42
   188b4:	00013a06 	br	18da0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   188b8:	e0bfff03 	ldbu	r2,-4(fp)
   188bc:	10800530 	cmpltui	r2,r2,20
   188c0:	1000021e 	bne	r2,zero,188cc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   188c4:	00800a84 	movi	r2,42
   188c8:	00013506 	br	18da0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188cc:	0005303a 	rdctl	r2,status
   188d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188d4:	e0fff917 	ldw	r3,-28(fp)
   188d8:	00bfff84 	movi	r2,-2
   188dc:	1884703a 	and	r2,r3,r2
   188e0:	1001703a 	wrctl	status,r2
  
  return context;
   188e4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   188e8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   188ec:	e0ffff03 	ldbu	r3,-4(fp)
   188f0:	008000f4 	movhi	r2,3
   188f4:	10833804 	addi	r2,r2,3296
   188f8:	18c7883a 	add	r3,r3,r3
   188fc:	18c7883a 	add	r3,r3,r3
   18900:	10c5883a 	add	r2,r2,r3
   18904:	10800017 	ldw	r2,0(r2)
   18908:	10000626 	beq	r2,zero,18924 <OSTaskChangePrio+0xb0>
   1890c:	e0bff517 	ldw	r2,-44(fp)
   18910:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18914:	e0bffa17 	ldw	r2,-24(fp)
   18918:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1891c:	00800a04 	movi	r2,40
   18920:	00011f06 	br	18da0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18924:	e0bffe03 	ldbu	r2,-8(fp)
   18928:	10803fd8 	cmpnei	r2,r2,255
   1892c:	1000051e 	bne	r2,zero,18944 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18930:	008000b4 	movhi	r2,2
   18934:	108e3f04 	addi	r2,r2,14588
   18938:	10800017 	ldw	r2,0(r2)
   1893c:	10800c83 	ldbu	r2,50(r2)
   18940:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   18944:	e0fffe03 	ldbu	r3,-8(fp)
   18948:	008000f4 	movhi	r2,3
   1894c:	10833804 	addi	r2,r2,3296
   18950:	18c7883a 	add	r3,r3,r3
   18954:	18c7883a 	add	r3,r3,r3
   18958:	10c5883a 	add	r2,r2,r3
   1895c:	10800017 	ldw	r2,0(r2)
   18960:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   18964:	e0bff617 	ldw	r2,-40(fp)
   18968:	1000061e 	bne	r2,zero,18984 <OSTaskChangePrio+0x110>
   1896c:	e0bff517 	ldw	r2,-44(fp)
   18970:	e0bffb15 	stw	r2,-20(fp)
   18974:	e0bffb17 	ldw	r2,-20(fp)
   18978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1897c:	00800a44 	movi	r2,41
   18980:	00010706 	br	18da0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   18984:	e0bff617 	ldw	r2,-40(fp)
   18988:	10800058 	cmpnei	r2,r2,1
   1898c:	1000061e 	bne	r2,zero,189a8 <OSTaskChangePrio+0x134>
   18990:	e0bff517 	ldw	r2,-44(fp)
   18994:	e0bffc15 	stw	r2,-16(fp)
   18998:	e0bffc17 	ldw	r2,-16(fp)
   1899c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   189a0:	008010c4 	movi	r2,67
   189a4:	0000fe06 	br	18da0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   189a8:	e0bfff03 	ldbu	r2,-4(fp)
   189ac:	1004d0fa 	srli	r2,r2,3
   189b0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   189b4:	e0bfff03 	ldbu	r2,-4(fp)
   189b8:	108001cc 	andi	r2,r2,7
   189bc:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   189c0:	e0bff703 	ldbu	r2,-36(fp)
   189c4:	00c00044 	movi	r3,1
   189c8:	1884983a 	sll	r2,r3,r2
   189cc:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   189d0:	e0bff743 	ldbu	r2,-35(fp)
   189d4:	00c00044 	movi	r3,1
   189d8:	1884983a 	sll	r2,r3,r2
   189dc:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   189e0:	e0fffe03 	ldbu	r3,-8(fp)
   189e4:	008000f4 	movhi	r2,3
   189e8:	10833804 	addi	r2,r2,3296
   189ec:	18c7883a 	add	r3,r3,r3
   189f0:	18c7883a 	add	r3,r3,r3
   189f4:	10c5883a 	add	r2,r2,r3
   189f8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   189fc:	e0ffff03 	ldbu	r3,-4(fp)
   18a00:	008000f4 	movhi	r2,3
   18a04:	10833804 	addi	r2,r2,3296
   18a08:	18c7883a 	add	r3,r3,r3
   18a0c:	18c7883a 	add	r3,r3,r3
   18a10:	10c5883a 	add	r2,r2,r3
   18a14:	e0fff617 	ldw	r3,-40(fp)
   18a18:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   18a1c:	e0bff617 	ldw	r2,-40(fp)
   18a20:	10800d03 	ldbu	r2,52(r2)
   18a24:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   18a28:	e0bff617 	ldw	r2,-40(fp)
   18a2c:	10800d83 	ldbu	r2,54(r2)
   18a30:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   18a34:	e0bff617 	ldw	r2,-40(fp)
   18a38:	10800d43 	ldbu	r2,53(r2)
   18a3c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   18a40:	e0fff803 	ldbu	r3,-32(fp)
   18a44:	008000b4 	movhi	r2,2
   18a48:	108e3c44 	addi	r2,r2,14577
   18a4c:	10c5883a 	add	r2,r2,r3
   18a50:	10c00003 	ldbu	r3,0(r2)
   18a54:	e0bff883 	ldbu	r2,-30(fp)
   18a58:	1884703a 	and	r2,r3,r2
   18a5c:	10803fcc 	andi	r2,r2,255
   18a60:	10003726 	beq	r2,zero,18b40 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   18a64:	e0fff803 	ldbu	r3,-32(fp)
   18a68:	e13ff803 	ldbu	r4,-32(fp)
   18a6c:	008000b4 	movhi	r2,2
   18a70:	108e3c44 	addi	r2,r2,14577
   18a74:	1105883a 	add	r2,r2,r4
   18a78:	10800003 	ldbu	r2,0(r2)
   18a7c:	1009883a 	mov	r4,r2
   18a80:	e0bff883 	ldbu	r2,-30(fp)
   18a84:	0084303a 	nor	r2,zero,r2
   18a88:	2084703a 	and	r2,r4,r2
   18a8c:	1009883a 	mov	r4,r2
   18a90:	008000b4 	movhi	r2,2
   18a94:	108e3c44 	addi	r2,r2,14577
   18a98:	10c5883a 	add	r2,r2,r3
   18a9c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   18aa0:	e0fff803 	ldbu	r3,-32(fp)
   18aa4:	008000b4 	movhi	r2,2
   18aa8:	108e3c44 	addi	r2,r2,14577
   18aac:	10c5883a 	add	r2,r2,r3
   18ab0:	10800003 	ldbu	r2,0(r2)
   18ab4:	10803fcc 	andi	r2,r2,255
   18ab8:	10000b1e 	bne	r2,zero,18ae8 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   18abc:	e0bff843 	ldbu	r2,-31(fp)
   18ac0:	0084303a 	nor	r2,zero,r2
   18ac4:	1007883a 	mov	r3,r2
   18ac8:	008000b4 	movhi	r2,2
   18acc:	108e3c04 	addi	r2,r2,14576
   18ad0:	10800003 	ldbu	r2,0(r2)
   18ad4:	1884703a 	and	r2,r3,r2
   18ad8:	1007883a 	mov	r3,r2
   18adc:	008000b4 	movhi	r2,2
   18ae0:	108e3c04 	addi	r2,r2,14576
   18ae4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   18ae8:	008000b4 	movhi	r2,2
   18aec:	108e3c04 	addi	r2,r2,14576
   18af0:	10c00003 	ldbu	r3,0(r2)
   18af4:	e0bff783 	ldbu	r2,-34(fp)
   18af8:	1884b03a 	or	r2,r3,r2
   18afc:	1007883a 	mov	r3,r2
   18b00:	008000b4 	movhi	r2,2
   18b04:	108e3c04 	addi	r2,r2,14576
   18b08:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   18b0c:	e0fff703 	ldbu	r3,-36(fp)
   18b10:	e13ff703 	ldbu	r4,-36(fp)
   18b14:	008000b4 	movhi	r2,2
   18b18:	108e3c44 	addi	r2,r2,14577
   18b1c:	1105883a 	add	r2,r2,r4
   18b20:	11000003 	ldbu	r4,0(r2)
   18b24:	e0bff7c3 	ldbu	r2,-33(fp)
   18b28:	2084b03a 	or	r2,r4,r2
   18b2c:	1009883a 	mov	r4,r2
   18b30:	008000b4 	movhi	r2,2
   18b34:	108e3c44 	addi	r2,r2,14577
   18b38:	10c5883a 	add	r2,r2,r3
   18b3c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   18b40:	e0bff617 	ldw	r2,-40(fp)
   18b44:	10800717 	ldw	r2,28(r2)
   18b48:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   18b4c:	e0bff317 	ldw	r2,-52(fp)
   18b50:	10003326 	beq	r2,zero,18c20 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   18b54:	e0bff803 	ldbu	r2,-32(fp)
   18b58:	e0fff803 	ldbu	r3,-32(fp)
   18b5c:	e13ff317 	ldw	r4,-52(fp)
   18b60:	20c7883a 	add	r3,r4,r3
   18b64:	18c00204 	addi	r3,r3,8
   18b68:	18c000c3 	ldbu	r3,3(r3)
   18b6c:	1809883a 	mov	r4,r3
   18b70:	e0fff883 	ldbu	r3,-30(fp)
   18b74:	00c6303a 	nor	r3,zero,r3
   18b78:	20c6703a 	and	r3,r4,r3
   18b7c:	1809883a 	mov	r4,r3
   18b80:	e0fff317 	ldw	r3,-52(fp)
   18b84:	1885883a 	add	r2,r3,r2
   18b88:	10800204 	addi	r2,r2,8
   18b8c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   18b90:	e0bff803 	ldbu	r2,-32(fp)
   18b94:	e0fff317 	ldw	r3,-52(fp)
   18b98:	1885883a 	add	r2,r3,r2
   18b9c:	10800204 	addi	r2,r2,8
   18ba0:	108000c3 	ldbu	r2,3(r2)
   18ba4:	10803fcc 	andi	r2,r2,255
   18ba8:	1000091e 	bne	r2,zero,18bd0 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   18bac:	e0bff317 	ldw	r2,-52(fp)
   18bb0:	10800283 	ldbu	r2,10(r2)
   18bb4:	1007883a 	mov	r3,r2
   18bb8:	e0bff843 	ldbu	r2,-31(fp)
   18bbc:	0084303a 	nor	r2,zero,r2
   18bc0:	1884703a 	and	r2,r3,r2
   18bc4:	1007883a 	mov	r3,r2
   18bc8:	e0bff317 	ldw	r2,-52(fp)
   18bcc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   18bd0:	e0bff317 	ldw	r2,-52(fp)
   18bd4:	10c00283 	ldbu	r3,10(r2)
   18bd8:	e0bff783 	ldbu	r2,-34(fp)
   18bdc:	1884b03a 	or	r2,r3,r2
   18be0:	1007883a 	mov	r3,r2
   18be4:	e0bff317 	ldw	r2,-52(fp)
   18be8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   18bec:	e0bff703 	ldbu	r2,-36(fp)
   18bf0:	e0fff703 	ldbu	r3,-36(fp)
   18bf4:	e13ff317 	ldw	r4,-52(fp)
   18bf8:	20c7883a 	add	r3,r4,r3
   18bfc:	18c00204 	addi	r3,r3,8
   18c00:	190000c3 	ldbu	r4,3(r3)
   18c04:	e0fff7c3 	ldbu	r3,-33(fp)
   18c08:	20c6b03a 	or	r3,r4,r3
   18c0c:	1809883a 	mov	r4,r3
   18c10:	e0fff317 	ldw	r3,-52(fp)
   18c14:	1885883a 	add	r2,r3,r2
   18c18:	10800204 	addi	r2,r2,8
   18c1c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   18c20:	e0bff617 	ldw	r2,-40(fp)
   18c24:	10800817 	ldw	r2,32(r2)
   18c28:	10004226 	beq	r2,zero,18d34 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   18c2c:	e0bff617 	ldw	r2,-40(fp)
   18c30:	10800817 	ldw	r2,32(r2)
   18c34:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   18c38:	e0bff417 	ldw	r2,-48(fp)
   18c3c:	10800017 	ldw	r2,0(r2)
   18c40:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   18c44:	00003906 	br	18d2c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   18c48:	e0bff803 	ldbu	r2,-32(fp)
   18c4c:	e0fff803 	ldbu	r3,-32(fp)
   18c50:	e13ff317 	ldw	r4,-52(fp)
   18c54:	20c7883a 	add	r3,r4,r3
   18c58:	18c00204 	addi	r3,r3,8
   18c5c:	18c000c3 	ldbu	r3,3(r3)
   18c60:	1809883a 	mov	r4,r3
   18c64:	e0fff883 	ldbu	r3,-30(fp)
   18c68:	00c6303a 	nor	r3,zero,r3
   18c6c:	20c6703a 	and	r3,r4,r3
   18c70:	1809883a 	mov	r4,r3
   18c74:	e0fff317 	ldw	r3,-52(fp)
   18c78:	1885883a 	add	r2,r3,r2
   18c7c:	10800204 	addi	r2,r2,8
   18c80:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   18c84:	e0bff803 	ldbu	r2,-32(fp)
   18c88:	e0fff317 	ldw	r3,-52(fp)
   18c8c:	1885883a 	add	r2,r3,r2
   18c90:	10800204 	addi	r2,r2,8
   18c94:	108000c3 	ldbu	r2,3(r2)
   18c98:	10803fcc 	andi	r2,r2,255
   18c9c:	1000091e 	bne	r2,zero,18cc4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   18ca0:	e0bff317 	ldw	r2,-52(fp)
   18ca4:	10800283 	ldbu	r2,10(r2)
   18ca8:	1007883a 	mov	r3,r2
   18cac:	e0bff843 	ldbu	r2,-31(fp)
   18cb0:	0084303a 	nor	r2,zero,r2
   18cb4:	1884703a 	and	r2,r3,r2
   18cb8:	1007883a 	mov	r3,r2
   18cbc:	e0bff317 	ldw	r2,-52(fp)
   18cc0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   18cc4:	e0bff317 	ldw	r2,-52(fp)
   18cc8:	10c00283 	ldbu	r3,10(r2)
   18ccc:	e0bff783 	ldbu	r2,-34(fp)
   18cd0:	1884b03a 	or	r2,r3,r2
   18cd4:	1007883a 	mov	r3,r2
   18cd8:	e0bff317 	ldw	r2,-52(fp)
   18cdc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   18ce0:	e0bff703 	ldbu	r2,-36(fp)
   18ce4:	e0fff703 	ldbu	r3,-36(fp)
   18ce8:	e13ff317 	ldw	r4,-52(fp)
   18cec:	20c7883a 	add	r3,r4,r3
   18cf0:	18c00204 	addi	r3,r3,8
   18cf4:	190000c3 	ldbu	r4,3(r3)
   18cf8:	e0fff7c3 	ldbu	r3,-33(fp)
   18cfc:	20c6b03a 	or	r3,r4,r3
   18d00:	1809883a 	mov	r4,r3
   18d04:	e0fff317 	ldw	r3,-52(fp)
   18d08:	1885883a 	add	r2,r3,r2
   18d0c:	10800204 	addi	r2,r2,8
   18d10:	110000c5 	stb	r4,3(r2)
            pevents++;
   18d14:	e0bff417 	ldw	r2,-48(fp)
   18d18:	10800104 	addi	r2,r2,4
   18d1c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   18d20:	e0bff417 	ldw	r2,-48(fp)
   18d24:	10800017 	ldw	r2,0(r2)
   18d28:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   18d2c:	e0bff317 	ldw	r2,-52(fp)
   18d30:	103fc51e 	bne	r2,zero,18c48 <__alt_mem_Flash_flash_data+0xf4018c48>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   18d34:	e0bff617 	ldw	r2,-40(fp)
   18d38:	e0ffff03 	ldbu	r3,-4(fp)
   18d3c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   18d40:	e0bff617 	ldw	r2,-40(fp)
   18d44:	e0fff703 	ldbu	r3,-36(fp)
   18d48:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   18d4c:	e0bff617 	ldw	r2,-40(fp)
   18d50:	e0fff743 	ldbu	r3,-35(fp)
   18d54:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   18d58:	e0bff617 	ldw	r2,-40(fp)
   18d5c:	e0fff783 	ldbu	r3,-34(fp)
   18d60:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   18d64:	e0bff617 	ldw	r2,-40(fp)
   18d68:	e0fff7c3 	ldbu	r3,-33(fp)
   18d6c:	10c00d45 	stb	r3,53(r2)
   18d70:	e0bff517 	ldw	r2,-44(fp)
   18d74:	e0bffd15 	stw	r2,-12(fp)
   18d78:	e0bffd17 	ldw	r2,-12(fp)
   18d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   18d80:	008000b4 	movhi	r2,2
   18d84:	108e3044 	addi	r2,r2,14529
   18d88:	10800003 	ldbu	r2,0(r2)
   18d8c:	10803fcc 	andi	r2,r2,255
   18d90:	10800058 	cmpnei	r2,r2,1
   18d94:	1000011e 	bne	r2,zero,18d9c <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   18d98:	00137d00 	call	137d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   18d9c:	0005883a 	mov	r2,zero
}
   18da0:	e037883a 	mov	sp,fp
   18da4:	dfc00117 	ldw	ra,4(sp)
   18da8:	df000017 	ldw	fp,0(sp)
   18dac:	dec00204 	addi	sp,sp,8
   18db0:	f800283a 	ret

00018db4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   18db4:	deffee04 	addi	sp,sp,-72
   18db8:	dfc01115 	stw	ra,68(sp)
   18dbc:	df001015 	stw	fp,64(sp)
   18dc0:	df001004 	addi	fp,sp,64
   18dc4:	e13ffc15 	stw	r4,-16(fp)
   18dc8:	e17ffd15 	stw	r5,-12(fp)
   18dcc:	e1bffe15 	stw	r6,-8(fp)
   18dd0:	3805883a 	mov	r2,r7
   18dd4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18dd8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   18ddc:	e0bfff03 	ldbu	r2,-4(fp)
   18de0:	10800570 	cmpltui	r2,r2,21
   18de4:	1000021e 	bne	r2,zero,18df0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   18de8:	00800a84 	movi	r2,42
   18dec:	00005b06 	br	18f5c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18df0:	0005303a 	rdctl	r2,status
   18df4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18df8:	e0fff617 	ldw	r3,-40(fp)
   18dfc:	00bfff84 	movi	r2,-2
   18e00:	1884703a 	and	r2,r3,r2
   18e04:	1001703a 	wrctl	status,r2
  
  return context;
   18e08:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18e0c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   18e10:	008000b4 	movhi	r2,2
   18e14:	108e3e04 	addi	r2,r2,14584
   18e18:	10800003 	ldbu	r2,0(r2)
   18e1c:	10803fcc 	andi	r2,r2,255
   18e20:	10000626 	beq	r2,zero,18e3c <OSTaskCreate+0x88>
   18e24:	e0bff317 	ldw	r2,-52(fp)
   18e28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e2c:	e0bff717 	ldw	r2,-36(fp)
   18e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   18e34:	00800f04 	movi	r2,60
   18e38:	00004806 	br	18f5c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   18e3c:	e0ffff03 	ldbu	r3,-4(fp)
   18e40:	008000f4 	movhi	r2,3
   18e44:	10833804 	addi	r2,r2,3296
   18e48:	18c7883a 	add	r3,r3,r3
   18e4c:	18c7883a 	add	r3,r3,r3
   18e50:	10c5883a 	add	r2,r2,r3
   18e54:	10800017 	ldw	r2,0(r2)
   18e58:	10003b1e 	bne	r2,zero,18f48 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   18e5c:	e0ffff03 	ldbu	r3,-4(fp)
   18e60:	008000f4 	movhi	r2,3
   18e64:	10833804 	addi	r2,r2,3296
   18e68:	18c7883a 	add	r3,r3,r3
   18e6c:	18c7883a 	add	r3,r3,r3
   18e70:	10c5883a 	add	r2,r2,r3
   18e74:	00c00044 	movi	r3,1
   18e78:	10c00015 	stw	r3,0(r2)
   18e7c:	e0bff317 	ldw	r2,-52(fp)
   18e80:	e0bff815 	stw	r2,-32(fp)
   18e84:	e0bff817 	ldw	r2,-32(fp)
   18e88:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   18e8c:	e13ffc17 	ldw	r4,-16(fp)
   18e90:	e17ffd17 	ldw	r5,-12(fp)
   18e94:	e1bffe17 	ldw	r6,-8(fp)
   18e98:	000f883a 	mov	r7,zero
   18e9c:	001e0500 	call	1e050 <OSTaskStkInit>
   18ea0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   18ea4:	e0bfff03 	ldbu	r2,-4(fp)
   18ea8:	d8000015 	stw	zero,0(sp)
   18eac:	d8000115 	stw	zero,4(sp)
   18eb0:	d8000215 	stw	zero,8(sp)
   18eb4:	1009883a 	mov	r4,r2
   18eb8:	e17ff417 	ldw	r5,-48(fp)
   18ebc:	000d883a 	mov	r6,zero
   18ec0:	000f883a 	mov	r7,zero
   18ec4:	0013bd40 	call	13bd4 <OS_TCBInit>
   18ec8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   18ecc:	e0bff503 	ldbu	r2,-44(fp)
   18ed0:	1000081e 	bne	r2,zero,18ef4 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   18ed4:	008000b4 	movhi	r2,2
   18ed8:	108e3044 	addi	r2,r2,14529
   18edc:	10800003 	ldbu	r2,0(r2)
   18ee0:	10803fcc 	andi	r2,r2,255
   18ee4:	10800058 	cmpnei	r2,r2,1
   18ee8:	1000151e 	bne	r2,zero,18f40 <OSTaskCreate+0x18c>
                OS_Sched();
   18eec:	00137d00 	call	137d0 <OS_Sched>
   18ef0:	00001306 	br	18f40 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ef4:	0005303a 	rdctl	r2,status
   18ef8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18efc:	e0fff917 	ldw	r3,-28(fp)
   18f00:	00bfff84 	movi	r2,-2
   18f04:	1884703a 	and	r2,r3,r2
   18f08:	1001703a 	wrctl	status,r2
  
  return context;
   18f0c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   18f10:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   18f14:	e0ffff03 	ldbu	r3,-4(fp)
   18f18:	008000f4 	movhi	r2,3
   18f1c:	10833804 	addi	r2,r2,3296
   18f20:	18c7883a 	add	r3,r3,r3
   18f24:	18c7883a 	add	r3,r3,r3
   18f28:	10c5883a 	add	r2,r2,r3
   18f2c:	10000015 	stw	zero,0(r2)
   18f30:	e0bff317 	ldw	r2,-52(fp)
   18f34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f38:	e0bffa17 	ldw	r2,-24(fp)
   18f3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   18f40:	e0bff503 	ldbu	r2,-44(fp)
   18f44:	00000506 	br	18f5c <OSTaskCreate+0x1a8>
   18f48:	e0bff317 	ldw	r2,-52(fp)
   18f4c:	e0bffb15 	stw	r2,-20(fp)
   18f50:	e0bffb17 	ldw	r2,-20(fp)
   18f54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   18f58:	00800a04 	movi	r2,40
}
   18f5c:	e037883a 	mov	sp,fp
   18f60:	dfc00117 	ldw	ra,4(sp)
   18f64:	df000017 	ldw	fp,0(sp)
   18f68:	dec00204 	addi	sp,sp,8
   18f6c:	f800283a 	ret

00018f70 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   18f70:	deffec04 	addi	sp,sp,-80
   18f74:	dfc01315 	stw	ra,76(sp)
   18f78:	df001215 	stw	fp,72(sp)
   18f7c:	df001204 	addi	fp,sp,72
   18f80:	e13ffa15 	stw	r4,-24(fp)
   18f84:	e17ffb15 	stw	r5,-20(fp)
   18f88:	e1bffc15 	stw	r6,-16(fp)
   18f8c:	3809883a 	mov	r4,r7
   18f90:	e0c00217 	ldw	r3,8(fp)
   18f94:	e0800617 	ldw	r2,24(fp)
   18f98:	e13ffd05 	stb	r4,-12(fp)
   18f9c:	e0fffe0d 	sth	r3,-8(fp)
   18fa0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18fa4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   18fa8:	e0bffd03 	ldbu	r2,-12(fp)
   18fac:	10800570 	cmpltui	r2,r2,21
   18fb0:	1000021e 	bne	r2,zero,18fbc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   18fb4:	00800a84 	movi	r2,42
   18fb8:	00006306 	br	19148 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18fbc:	0005303a 	rdctl	r2,status
   18fc0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18fc4:	e0fff417 	ldw	r3,-48(fp)
   18fc8:	00bfff84 	movi	r2,-2
   18fcc:	1884703a 	and	r2,r3,r2
   18fd0:	1001703a 	wrctl	status,r2
  
  return context;
   18fd4:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18fd8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   18fdc:	008000b4 	movhi	r2,2
   18fe0:	108e3e04 	addi	r2,r2,14584
   18fe4:	10800003 	ldbu	r2,0(r2)
   18fe8:	10803fcc 	andi	r2,r2,255
   18fec:	10000626 	beq	r2,zero,19008 <OSTaskCreateExt+0x98>
   18ff0:	e0bff117 	ldw	r2,-60(fp)
   18ff4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ff8:	e0bff517 	ldw	r2,-44(fp)
   18ffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19000:	00800f04 	movi	r2,60
   19004:	00005006 	br	19148 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19008:	e0fffd03 	ldbu	r3,-12(fp)
   1900c:	008000f4 	movhi	r2,3
   19010:	10833804 	addi	r2,r2,3296
   19014:	18c7883a 	add	r3,r3,r3
   19018:	18c7883a 	add	r3,r3,r3
   1901c:	10c5883a 	add	r2,r2,r3
   19020:	10800017 	ldw	r2,0(r2)
   19024:	1000431e 	bne	r2,zero,19134 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19028:	e0fffd03 	ldbu	r3,-12(fp)
   1902c:	008000f4 	movhi	r2,3
   19030:	10833804 	addi	r2,r2,3296
   19034:	18c7883a 	add	r3,r3,r3
   19038:	18c7883a 	add	r3,r3,r3
   1903c:	10c5883a 	add	r2,r2,r3
   19040:	00c00044 	movi	r3,1
   19044:	10c00015 	stw	r3,0(r2)
   19048:	e0bff117 	ldw	r2,-60(fp)
   1904c:	e0bff615 	stw	r2,-40(fp)
   19050:	e0bff617 	ldw	r2,-40(fp)
   19054:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   19058:	e0bfff0b 	ldhu	r2,-4(fp)
   1905c:	e1000317 	ldw	r4,12(fp)
   19060:	e1400417 	ldw	r5,16(fp)
   19064:	100d883a 	mov	r6,r2
   19068:	001a0fc0 	call	1a0fc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1906c:	e0bfff0b 	ldhu	r2,-4(fp)
   19070:	e13ffa17 	ldw	r4,-24(fp)
   19074:	e17ffb17 	ldw	r5,-20(fp)
   19078:	e1bffc17 	ldw	r6,-16(fp)
   1907c:	100f883a 	mov	r7,r2
   19080:	001e0500 	call	1e050 <OSTaskStkInit>
   19084:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   19088:	e13ffd03 	ldbu	r4,-12(fp)
   1908c:	e1fffe0b 	ldhu	r7,-8(fp)
   19090:	e0bfff0b 	ldhu	r2,-4(fp)
   19094:	e0c00417 	ldw	r3,16(fp)
   19098:	d8c00015 	stw	r3,0(sp)
   1909c:	e0c00517 	ldw	r3,20(fp)
   190a0:	d8c00115 	stw	r3,4(sp)
   190a4:	d8800215 	stw	r2,8(sp)
   190a8:	e17ff217 	ldw	r5,-56(fp)
   190ac:	e1800317 	ldw	r6,12(fp)
   190b0:	0013bd40 	call	13bd4 <OS_TCBInit>
   190b4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   190b8:	e0bff303 	ldbu	r2,-52(fp)
   190bc:	1000081e 	bne	r2,zero,190e0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   190c0:	008000b4 	movhi	r2,2
   190c4:	108e3044 	addi	r2,r2,14529
   190c8:	10800003 	ldbu	r2,0(r2)
   190cc:	10803fcc 	andi	r2,r2,255
   190d0:	10800058 	cmpnei	r2,r2,1
   190d4:	1000151e 	bne	r2,zero,1912c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   190d8:	00137d00 	call	137d0 <OS_Sched>
   190dc:	00001306 	br	1912c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   190e0:	0005303a 	rdctl	r2,status
   190e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   190e8:	e0fff717 	ldw	r3,-36(fp)
   190ec:	00bfff84 	movi	r2,-2
   190f0:	1884703a 	and	r2,r3,r2
   190f4:	1001703a 	wrctl	status,r2
  
  return context;
   190f8:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   190fc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19100:	e0fffd03 	ldbu	r3,-12(fp)
   19104:	008000f4 	movhi	r2,3
   19108:	10833804 	addi	r2,r2,3296
   1910c:	18c7883a 	add	r3,r3,r3
   19110:	18c7883a 	add	r3,r3,r3
   19114:	10c5883a 	add	r2,r2,r3
   19118:	10000015 	stw	zero,0(r2)
   1911c:	e0bff117 	ldw	r2,-60(fp)
   19120:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19124:	e0bff817 	ldw	r2,-32(fp)
   19128:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1912c:	e0bff303 	ldbu	r2,-52(fp)
   19130:	00000506 	br	19148 <OSTaskCreateExt+0x1d8>
   19134:	e0bff117 	ldw	r2,-60(fp)
   19138:	e0bff915 	stw	r2,-28(fp)
   1913c:	e0bff917 	ldw	r2,-28(fp)
   19140:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19144:	00800a04 	movi	r2,40
}
   19148:	e037883a 	mov	sp,fp
   1914c:	dfc00117 	ldw	ra,4(sp)
   19150:	df000017 	ldw	fp,0(sp)
   19154:	dec00204 	addi	sp,sp,8
   19158:	f800283a 	ret

0001915c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1915c:	defff404 	addi	sp,sp,-48
   19160:	dfc00b15 	stw	ra,44(sp)
   19164:	df000a15 	stw	fp,40(sp)
   19168:	df000a04 	addi	fp,sp,40
   1916c:	2005883a 	mov	r2,r4
   19170:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   19174:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   19178:	008000b4 	movhi	r2,2
   1917c:	108e3e04 	addi	r2,r2,14584
   19180:	10800003 	ldbu	r2,0(r2)
   19184:	10803fcc 	andi	r2,r2,255
   19188:	10000226 	beq	r2,zero,19194 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1918c:	00801004 	movi	r2,64
   19190:	0000e506 	br	19528 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   19194:	e0bfff03 	ldbu	r2,-4(fp)
   19198:	10800518 	cmpnei	r2,r2,20
   1919c:	1000021e 	bne	r2,zero,191a8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   191a0:	00800f84 	movi	r2,62
   191a4:	0000e006 	br	19528 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   191a8:	e0bfff03 	ldbu	r2,-4(fp)
   191ac:	10800530 	cmpltui	r2,r2,20
   191b0:	1000051e 	bne	r2,zero,191c8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   191b4:	e0bfff03 	ldbu	r2,-4(fp)
   191b8:	10803fe0 	cmpeqi	r2,r2,255
   191bc:	1000021e 	bne	r2,zero,191c8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   191c0:	00800a84 	movi	r2,42
   191c4:	0000d806 	br	19528 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191c8:	0005303a 	rdctl	r2,status
   191cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191d0:	e0fff917 	ldw	r3,-28(fp)
   191d4:	00bfff84 	movi	r2,-2
   191d8:	1884703a 	and	r2,r3,r2
   191dc:	1001703a 	wrctl	status,r2
  
  return context;
   191e0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   191e4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   191e8:	e0bfff03 	ldbu	r2,-4(fp)
   191ec:	10803fd8 	cmpnei	r2,r2,255
   191f0:	1000051e 	bne	r2,zero,19208 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   191f4:	008000b4 	movhi	r2,2
   191f8:	108e3f04 	addi	r2,r2,14588
   191fc:	10800017 	ldw	r2,0(r2)
   19200:	10800c83 	ldbu	r2,50(r2)
   19204:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19208:	e0ffff03 	ldbu	r3,-4(fp)
   1920c:	008000f4 	movhi	r2,3
   19210:	10833804 	addi	r2,r2,3296
   19214:	18c7883a 	add	r3,r3,r3
   19218:	18c7883a 	add	r3,r3,r3
   1921c:	10c5883a 	add	r2,r2,r3
   19220:	10800017 	ldw	r2,0(r2)
   19224:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   19228:	e0bff717 	ldw	r2,-36(fp)
   1922c:	1000061e 	bne	r2,zero,19248 <OSTaskDel+0xec>
   19230:	e0bff617 	ldw	r2,-40(fp)
   19234:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19238:	e0bffa17 	ldw	r2,-24(fp)
   1923c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19240:	008010c4 	movi	r2,67
   19244:	0000b806 	br	19528 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   19248:	e0bff717 	ldw	r2,-36(fp)
   1924c:	10800058 	cmpnei	r2,r2,1
   19250:	1000061e 	bne	r2,zero,1926c <OSTaskDel+0x110>
   19254:	e0bff617 	ldw	r2,-40(fp)
   19258:	e0bffb15 	stw	r2,-20(fp)
   1925c:	e0bffb17 	ldw	r2,-20(fp)
   19260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19264:	00800f44 	movi	r2,61
   19268:	0000af06 	br	19528 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1926c:	e0bff717 	ldw	r2,-36(fp)
   19270:	10800d03 	ldbu	r2,52(r2)
   19274:	10c03fcc 	andi	r3,r2,255
   19278:	e0bff717 	ldw	r2,-36(fp)
   1927c:	10800d03 	ldbu	r2,52(r2)
   19280:	11003fcc 	andi	r4,r2,255
   19284:	008000b4 	movhi	r2,2
   19288:	108e3c44 	addi	r2,r2,14577
   1928c:	1105883a 	add	r2,r2,r4
   19290:	10800003 	ldbu	r2,0(r2)
   19294:	1009883a 	mov	r4,r2
   19298:	e0bff717 	ldw	r2,-36(fp)
   1929c:	10800d43 	ldbu	r2,53(r2)
   192a0:	0084303a 	nor	r2,zero,r2
   192a4:	2084703a 	and	r2,r4,r2
   192a8:	1009883a 	mov	r4,r2
   192ac:	008000b4 	movhi	r2,2
   192b0:	108e3c44 	addi	r2,r2,14577
   192b4:	10c5883a 	add	r2,r2,r3
   192b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   192bc:	e0bff717 	ldw	r2,-36(fp)
   192c0:	10800d03 	ldbu	r2,52(r2)
   192c4:	10c03fcc 	andi	r3,r2,255
   192c8:	008000b4 	movhi	r2,2
   192cc:	108e3c44 	addi	r2,r2,14577
   192d0:	10c5883a 	add	r2,r2,r3
   192d4:	10800003 	ldbu	r2,0(r2)
   192d8:	10803fcc 	andi	r2,r2,255
   192dc:	10000c1e 	bne	r2,zero,19310 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   192e0:	e0bff717 	ldw	r2,-36(fp)
   192e4:	10800d83 	ldbu	r2,54(r2)
   192e8:	0084303a 	nor	r2,zero,r2
   192ec:	1007883a 	mov	r3,r2
   192f0:	008000b4 	movhi	r2,2
   192f4:	108e3c04 	addi	r2,r2,14576
   192f8:	10800003 	ldbu	r2,0(r2)
   192fc:	1884703a 	and	r2,r3,r2
   19300:	1007883a 	mov	r3,r2
   19304:	008000b4 	movhi	r2,2
   19308:	108e3c04 	addi	r2,r2,14576
   1930c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   19310:	e0bff717 	ldw	r2,-36(fp)
   19314:	10800717 	ldw	r2,28(r2)
   19318:	10000526 	beq	r2,zero,19330 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1931c:	e0bff717 	ldw	r2,-36(fp)
   19320:	10800717 	ldw	r2,28(r2)
   19324:	e13ff717 	ldw	r4,-36(fp)
   19328:	100b883a 	mov	r5,r2
   1932c:	00131a80 	call	131a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   19330:	e0bff717 	ldw	r2,-36(fp)
   19334:	10800817 	ldw	r2,32(r2)
   19338:	10000526 	beq	r2,zero,19350 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1933c:	e0bff717 	ldw	r2,-36(fp)
   19340:	10800817 	ldw	r2,32(r2)
   19344:	e13ff717 	ldw	r4,-36(fp)
   19348:	100b883a 	mov	r5,r2
   1934c:	001325c0 	call	1325c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   19350:	e0bff717 	ldw	r2,-36(fp)
   19354:	10800a17 	ldw	r2,40(r2)
   19358:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1935c:	e0bff817 	ldw	r2,-32(fp)
   19360:	10000226 	beq	r2,zero,1936c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   19364:	e13ff817 	ldw	r4,-32(fp)
   19368:	00157b00 	call	157b0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1936c:	e0bff717 	ldw	r2,-36(fp)
   19370:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   19374:	e0bff717 	ldw	r2,-36(fp)
   19378:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1937c:	e0bff717 	ldw	r2,-36(fp)
   19380:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   19384:	008000b4 	movhi	r2,2
   19388:	108e3004 	addi	r2,r2,14528
   1938c:	10800003 	ldbu	r2,0(r2)
   19390:	10803fcc 	andi	r2,r2,255
   19394:	10803fe0 	cmpeqi	r2,r2,255
   19398:	1000081e 	bne	r2,zero,193bc <OSTaskDel+0x260>
        OSLockNesting++;
   1939c:	008000b4 	movhi	r2,2
   193a0:	108e3004 	addi	r2,r2,14528
   193a4:	10800003 	ldbu	r2,0(r2)
   193a8:	10800044 	addi	r2,r2,1
   193ac:	1007883a 	mov	r3,r2
   193b0:	008000b4 	movhi	r2,2
   193b4:	108e3004 	addi	r2,r2,14528
   193b8:	10c00005 	stb	r3,0(r2)
   193bc:	e0bff617 	ldw	r2,-40(fp)
   193c0:	e0bffc15 	stw	r2,-16(fp)
   193c4:	e0bffc17 	ldw	r2,-16(fp)
   193c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   193cc:	0012d9c0 	call	12d9c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193d0:	0005303a 	rdctl	r2,status
   193d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193d8:	e0fffd17 	ldw	r3,-12(fp)
   193dc:	00bfff84 	movi	r2,-2
   193e0:	1884703a 	and	r2,r3,r2
   193e4:	1001703a 	wrctl	status,r2
  
  return context;
   193e8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   193ec:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   193f0:	008000b4 	movhi	r2,2
   193f4:	108e3004 	addi	r2,r2,14528
   193f8:	10800003 	ldbu	r2,0(r2)
   193fc:	10803fcc 	andi	r2,r2,255
   19400:	10000826 	beq	r2,zero,19424 <OSTaskDel+0x2c8>
        OSLockNesting--;
   19404:	008000b4 	movhi	r2,2
   19408:	108e3004 	addi	r2,r2,14528
   1940c:	10800003 	ldbu	r2,0(r2)
   19410:	10bfffc4 	addi	r2,r2,-1
   19414:	1007883a 	mov	r3,r2
   19418:	008000b4 	movhi	r2,2
   1941c:	108e3004 	addi	r2,r2,14528
   19420:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   19424:	e13ff717 	ldw	r4,-36(fp)
   19428:	001e1cc0 	call	1e1cc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1942c:	008000b4 	movhi	r2,2
   19430:	108e3844 	addi	r2,r2,14561
   19434:	10800003 	ldbu	r2,0(r2)
   19438:	10bfffc4 	addi	r2,r2,-1
   1943c:	1007883a 	mov	r3,r2
   19440:	008000b4 	movhi	r2,2
   19444:	108e3844 	addi	r2,r2,14561
   19448:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1944c:	e0ffff03 	ldbu	r3,-4(fp)
   19450:	008000f4 	movhi	r2,3
   19454:	10833804 	addi	r2,r2,3296
   19458:	18c7883a 	add	r3,r3,r3
   1945c:	18c7883a 	add	r3,r3,r3
   19460:	10c5883a 	add	r2,r2,r3
   19464:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   19468:	e0bff717 	ldw	r2,-36(fp)
   1946c:	10800617 	ldw	r2,24(r2)
   19470:	1000091e 	bne	r2,zero,19498 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   19474:	e0bff717 	ldw	r2,-36(fp)
   19478:	10800517 	ldw	r2,20(r2)
   1947c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   19480:	e0bff717 	ldw	r2,-36(fp)
   19484:	10c00517 	ldw	r3,20(r2)
   19488:	008000b4 	movhi	r2,2
   1948c:	108e3304 	addi	r2,r2,14540
   19490:	10c00015 	stw	r3,0(r2)
   19494:	00000a06 	br	194c0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   19498:	e0bff717 	ldw	r2,-36(fp)
   1949c:	10800617 	ldw	r2,24(r2)
   194a0:	e0fff717 	ldw	r3,-36(fp)
   194a4:	18c00517 	ldw	r3,20(r3)
   194a8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   194ac:	e0bff717 	ldw	r2,-36(fp)
   194b0:	10800517 	ldw	r2,20(r2)
   194b4:	e0fff717 	ldw	r3,-36(fp)
   194b8:	18c00617 	ldw	r3,24(r3)
   194bc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   194c0:	008000b4 	movhi	r2,2
   194c4:	108e3704 	addi	r2,r2,14556
   194c8:	10c00017 	ldw	r3,0(r2)
   194cc:	e0bff717 	ldw	r2,-36(fp)
   194d0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   194d4:	008000b4 	movhi	r2,2
   194d8:	108e3704 	addi	r2,r2,14556
   194dc:	e0fff717 	ldw	r3,-36(fp)
   194e0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   194e4:	e0bff717 	ldw	r2,-36(fp)
   194e8:	00c00fc4 	movi	r3,63
   194ec:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   194f0:	e0bff717 	ldw	r2,-36(fp)
   194f4:	10001345 	stb	zero,77(r2)
   194f8:	e0bff617 	ldw	r2,-40(fp)
   194fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19500:	e0bffe17 	ldw	r2,-8(fp)
   19504:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19508:	008000b4 	movhi	r2,2
   1950c:	108e3044 	addi	r2,r2,14529
   19510:	10800003 	ldbu	r2,0(r2)
   19514:	10803fcc 	andi	r2,r2,255
   19518:	10800058 	cmpnei	r2,r2,1
   1951c:	1000011e 	bne	r2,zero,19524 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   19520:	00137d00 	call	137d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19524:	0005883a 	mov	r2,zero
}
   19528:	e037883a 	mov	sp,fp
   1952c:	dfc00117 	ldw	ra,4(sp)
   19530:	df000017 	ldw	fp,0(sp)
   19534:	dec00204 	addi	sp,sp,8
   19538:	f800283a 	ret

0001953c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1953c:	defff504 	addi	sp,sp,-44
   19540:	df000a15 	stw	fp,40(sp)
   19544:	df000a04 	addi	fp,sp,40
   19548:	2005883a 	mov	r2,r4
   1954c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19550:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   19554:	e0bfff03 	ldbu	r2,-4(fp)
   19558:	10800518 	cmpnei	r2,r2,20
   1955c:	1000021e 	bne	r2,zero,19568 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   19560:	00800f84 	movi	r2,62
   19564:	00004706 	br	19684 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19568:	e0bfff03 	ldbu	r2,-4(fp)
   1956c:	10800530 	cmpltui	r2,r2,20
   19570:	1000051e 	bne	r2,zero,19588 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   19574:	e0bfff03 	ldbu	r2,-4(fp)
   19578:	10803fe0 	cmpeqi	r2,r2,255
   1957c:	1000021e 	bne	r2,zero,19588 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   19580:	00800a84 	movi	r2,42
   19584:	00003f06 	br	19684 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   19588:	e0bfff03 	ldbu	r2,-4(fp)
   1958c:	10803fd8 	cmpnei	r2,r2,255
   19590:	1000131e 	bne	r2,zero,195e0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19594:	0005303a 	rdctl	r2,status
   19598:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1959c:	e0fff917 	ldw	r3,-28(fp)
   195a0:	00bfff84 	movi	r2,-2
   195a4:	1884703a 	and	r2,r3,r2
   195a8:	1001703a 	wrctl	status,r2
  
  return context;
   195ac:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   195b0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   195b4:	008000b4 	movhi	r2,2
   195b8:	108e3f04 	addi	r2,r2,14588
   195bc:	10800017 	ldw	r2,0(r2)
   195c0:	10800dc3 	ldbu	r2,55(r2)
   195c4:	e0bff705 	stb	r2,-36(fp)
   195c8:	e0bff617 	ldw	r2,-40(fp)
   195cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   195d0:	e0bffa17 	ldw	r2,-24(fp)
   195d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   195d8:	e0bff703 	ldbu	r2,-36(fp)
   195dc:	00002906 	br	19684 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195e0:	0005303a 	rdctl	r2,status
   195e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195e8:	e0fffb17 	ldw	r3,-20(fp)
   195ec:	00bfff84 	movi	r2,-2
   195f0:	1884703a 	and	r2,r3,r2
   195f4:	1001703a 	wrctl	status,r2
  
  return context;
   195f8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   195fc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19600:	e0ffff03 	ldbu	r3,-4(fp)
   19604:	008000f4 	movhi	r2,3
   19608:	10833804 	addi	r2,r2,3296
   1960c:	18c7883a 	add	r3,r3,r3
   19610:	18c7883a 	add	r3,r3,r3
   19614:	10c5883a 	add	r2,r2,r3
   19618:	10800017 	ldw	r2,0(r2)
   1961c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   19620:	e0bff817 	ldw	r2,-32(fp)
   19624:	1000061e 	bne	r2,zero,19640 <OSTaskDelReq+0x104>
   19628:	e0bff617 	ldw	r2,-40(fp)
   1962c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19630:	e0bffc17 	ldw	r2,-16(fp)
   19634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   19638:	008010c4 	movi	r2,67
   1963c:	00001106 	br	19684 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   19640:	e0bff817 	ldw	r2,-32(fp)
   19644:	10800058 	cmpnei	r2,r2,1
   19648:	1000061e 	bne	r2,zero,19664 <OSTaskDelReq+0x128>
   1964c:	e0bff617 	ldw	r2,-40(fp)
   19650:	e0bffd15 	stw	r2,-12(fp)
   19654:	e0bffd17 	ldw	r2,-12(fp)
   19658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1965c:	00800f44 	movi	r2,61
   19660:	00000806 	br	19684 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   19664:	e0bff817 	ldw	r2,-32(fp)
   19668:	00c00fc4 	movi	r3,63
   1966c:	10c00dc5 	stb	r3,55(r2)
   19670:	e0bff617 	ldw	r2,-40(fp)
   19674:	e0bffe15 	stw	r2,-8(fp)
   19678:	e0bffe17 	ldw	r2,-8(fp)
   1967c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19680:	0005883a 	mov	r2,zero
}
   19684:	e037883a 	mov	sp,fp
   19688:	df000017 	ldw	fp,0(sp)
   1968c:	dec00104 	addi	sp,sp,4
   19690:	f800283a 	ret

00019694 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19694:	defff404 	addi	sp,sp,-48
   19698:	dfc00b15 	stw	ra,44(sp)
   1969c:	df000a15 	stw	fp,40(sp)
   196a0:	df000a04 	addi	fp,sp,40
   196a4:	2005883a 	mov	r2,r4
   196a8:	e17ffe15 	stw	r5,-8(fp)
   196ac:	e1bfff15 	stw	r6,-4(fp)
   196b0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   196b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   196b8:	e0bfff17 	ldw	r2,-4(fp)
   196bc:	1000021e 	bne	r2,zero,196c8 <OSTaskNameGet+0x34>
        return (0);
   196c0:	0005883a 	mov	r2,zero
   196c4:	00005806 	br	19828 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   196c8:	e0bffd03 	ldbu	r2,-12(fp)
   196cc:	10800570 	cmpltui	r2,r2,21
   196d0:	1000081e 	bne	r2,zero,196f4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   196d4:	e0bffd03 	ldbu	r2,-12(fp)
   196d8:	10803fe0 	cmpeqi	r2,r2,255
   196dc:	1000051e 	bne	r2,zero,196f4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   196e0:	e0bfff17 	ldw	r2,-4(fp)
   196e4:	00c00a84 	movi	r3,42
   196e8:	10c00005 	stb	r3,0(r2)
            return (0);
   196ec:	0005883a 	mov	r2,zero
   196f0:	00004d06 	br	19828 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   196f4:	e0bffe17 	ldw	r2,-8(fp)
   196f8:	1000051e 	bne	r2,zero,19710 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   196fc:	e0bfff17 	ldw	r2,-4(fp)
   19700:	00c00304 	movi	r3,12
   19704:	10c00005 	stb	r3,0(r2)
        return (0);
   19708:	0005883a 	mov	r2,zero
   1970c:	00004606 	br	19828 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   19710:	008000b4 	movhi	r2,2
   19714:	108e3e04 	addi	r2,r2,14584
   19718:	10800003 	ldbu	r2,0(r2)
   1971c:	10803fcc 	andi	r2,r2,255
   19720:	10000526 	beq	r2,zero,19738 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   19724:	e0bfff17 	ldw	r2,-4(fp)
   19728:	00c00444 	movi	r3,17
   1972c:	10c00005 	stb	r3,0(r2)
        return (0);
   19730:	0005883a 	mov	r2,zero
   19734:	00003c06 	br	19828 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19738:	0005303a 	rdctl	r2,status
   1973c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19740:	e0fff917 	ldw	r3,-28(fp)
   19744:	00bfff84 	movi	r2,-2
   19748:	1884703a 	and	r2,r3,r2
   1974c:	1001703a 	wrctl	status,r2
  
  return context;
   19750:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   19754:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19758:	e0bffd03 	ldbu	r2,-12(fp)
   1975c:	10803fd8 	cmpnei	r2,r2,255
   19760:	1000051e 	bne	r2,zero,19778 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   19764:	008000b4 	movhi	r2,2
   19768:	108e3f04 	addi	r2,r2,14588
   1976c:	10800017 	ldw	r2,0(r2)
   19770:	10800c83 	ldbu	r2,50(r2)
   19774:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19778:	e0fffd03 	ldbu	r3,-12(fp)
   1977c:	008000f4 	movhi	r2,3
   19780:	10833804 	addi	r2,r2,3296
   19784:	18c7883a 	add	r3,r3,r3
   19788:	18c7883a 	add	r3,r3,r3
   1978c:	10c5883a 	add	r2,r2,r3
   19790:	10800017 	ldw	r2,0(r2)
   19794:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   19798:	e0bff717 	ldw	r2,-36(fp)
   1979c:	1000091e 	bne	r2,zero,197c4 <OSTaskNameGet+0x130>
   197a0:	e0bff617 	ldw	r2,-40(fp)
   197a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197a8:	e0bffa17 	ldw	r2,-24(fp)
   197ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   197b0:	e0bfff17 	ldw	r2,-4(fp)
   197b4:	00c010c4 	movi	r3,67
   197b8:	10c00005 	stb	r3,0(r2)
        return (0);
   197bc:	0005883a 	mov	r2,zero
   197c0:	00001906 	br	19828 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   197c4:	e0bff717 	ldw	r2,-36(fp)
   197c8:	10800058 	cmpnei	r2,r2,1
   197cc:	1000091e 	bne	r2,zero,197f4 <OSTaskNameGet+0x160>
   197d0:	e0bff617 	ldw	r2,-40(fp)
   197d4:	e0bffb15 	stw	r2,-20(fp)
   197d8:	e0bffb17 	ldw	r2,-20(fp)
   197dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   197e0:	e0bfff17 	ldw	r2,-4(fp)
   197e4:	00c010c4 	movi	r3,67
   197e8:	10c00005 	stb	r3,0(r2)
        return (0);
   197ec:	0005883a 	mov	r2,zero
   197f0:	00000d06 	br	19828 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   197f4:	e0bff717 	ldw	r2,-36(fp)
   197f8:	10801304 	addi	r2,r2,76
   197fc:	e13ffe17 	ldw	r4,-8(fp)
   19800:	100b883a 	mov	r5,r2
   19804:	001390c0 	call	1390c <OS_StrCopy>
   19808:	e0bff805 	stb	r2,-32(fp)
   1980c:	e0bff617 	ldw	r2,-40(fp)
   19810:	e0bffc15 	stw	r2,-16(fp)
   19814:	e0bffc17 	ldw	r2,-16(fp)
   19818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1981c:	e0bfff17 	ldw	r2,-4(fp)
   19820:	10000005 	stb	zero,0(r2)
    return (len);
   19824:	e0bff803 	ldbu	r2,-32(fp)
}
   19828:	e037883a 	mov	sp,fp
   1982c:	dfc00117 	ldw	ra,4(sp)
   19830:	df000017 	ldw	fp,0(sp)
   19834:	dec00204 	addi	sp,sp,8
   19838:	f800283a 	ret

0001983c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1983c:	defff304 	addi	sp,sp,-52
   19840:	dfc00c15 	stw	ra,48(sp)
   19844:	df000b15 	stw	fp,44(sp)
   19848:	df000b04 	addi	fp,sp,44
   1984c:	2005883a 	mov	r2,r4
   19850:	e17ffe15 	stw	r5,-8(fp)
   19854:	e1bfff15 	stw	r6,-4(fp)
   19858:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1985c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19860:	e0bfff17 	ldw	r2,-4(fp)
   19864:	1000011e 	bne	r2,zero,1986c <OSTaskNameSet+0x30>
        return;
   19868:	00005f06 	br	199e8 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1986c:	e0bffd03 	ldbu	r2,-12(fp)
   19870:	10800570 	cmpltui	r2,r2,21
   19874:	1000071e 	bne	r2,zero,19894 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   19878:	e0bffd03 	ldbu	r2,-12(fp)
   1987c:	10803fe0 	cmpeqi	r2,r2,255
   19880:	1000041e 	bne	r2,zero,19894 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19884:	e0bfff17 	ldw	r2,-4(fp)
   19888:	00c00a84 	movi	r3,42
   1988c:	10c00005 	stb	r3,0(r2)
            return;
   19890:	00005506 	br	199e8 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19894:	e0bffe17 	ldw	r2,-8(fp)
   19898:	1000041e 	bne	r2,zero,198ac <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1989c:	e0bfff17 	ldw	r2,-4(fp)
   198a0:	00c00304 	movi	r3,12
   198a4:	10c00005 	stb	r3,0(r2)
        return;
   198a8:	00004f06 	br	199e8 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   198ac:	008000b4 	movhi	r2,2
   198b0:	108e3e04 	addi	r2,r2,14584
   198b4:	10800003 	ldbu	r2,0(r2)
   198b8:	10803fcc 	andi	r2,r2,255
   198bc:	10000426 	beq	r2,zero,198d0 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   198c0:	e0bfff17 	ldw	r2,-4(fp)
   198c4:	00c00484 	movi	r3,18
   198c8:	10c00005 	stb	r3,0(r2)
        return;
   198cc:	00004606 	br	199e8 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   198d0:	0005303a 	rdctl	r2,status
   198d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   198d8:	e0fff817 	ldw	r3,-32(fp)
   198dc:	00bfff84 	movi	r2,-2
   198e0:	1884703a 	and	r2,r3,r2
   198e4:	1001703a 	wrctl	status,r2
  
  return context;
   198e8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   198ec:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   198f0:	e0bffd03 	ldbu	r2,-12(fp)
   198f4:	10803fd8 	cmpnei	r2,r2,255
   198f8:	1000051e 	bne	r2,zero,19910 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   198fc:	008000b4 	movhi	r2,2
   19900:	108e3f04 	addi	r2,r2,14588
   19904:	10800017 	ldw	r2,0(r2)
   19908:	10800c83 	ldbu	r2,50(r2)
   1990c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19910:	e0fffd03 	ldbu	r3,-12(fp)
   19914:	008000f4 	movhi	r2,3
   19918:	10833804 	addi	r2,r2,3296
   1991c:	18c7883a 	add	r3,r3,r3
   19920:	18c7883a 	add	r3,r3,r3
   19924:	10c5883a 	add	r2,r2,r3
   19928:	10800017 	ldw	r2,0(r2)
   1992c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   19930:	e0bff617 	ldw	r2,-40(fp)
   19934:	1000081e 	bne	r2,zero,19958 <OSTaskNameSet+0x11c>
   19938:	e0bff517 	ldw	r2,-44(fp)
   1993c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19940:	e0bff917 	ldw	r2,-28(fp)
   19944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19948:	e0bfff17 	ldw	r2,-4(fp)
   1994c:	00c010c4 	movi	r3,67
   19950:	10c00005 	stb	r3,0(r2)
        return;
   19954:	00002406 	br	199e8 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19958:	e0bff617 	ldw	r2,-40(fp)
   1995c:	10800058 	cmpnei	r2,r2,1
   19960:	1000081e 	bne	r2,zero,19984 <OSTaskNameSet+0x148>
   19964:	e0bff517 	ldw	r2,-44(fp)
   19968:	e0bffa15 	stw	r2,-24(fp)
   1996c:	e0bffa17 	ldw	r2,-24(fp)
   19970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19974:	e0bfff17 	ldw	r2,-4(fp)
   19978:	00c010c4 	movi	r3,67
   1997c:	10c00005 	stb	r3,0(r2)
        return;
   19980:	00001906 	br	199e8 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19984:	e13ffe17 	ldw	r4,-8(fp)
   19988:	00139800 	call	13980 <OS_StrLen>
   1998c:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19990:	e0bff703 	ldbu	r2,-36(fp)
   19994:	10800830 	cmpltui	r2,r2,32
   19998:	1000081e 	bne	r2,zero,199bc <OSTaskNameSet+0x180>
   1999c:	e0bff517 	ldw	r2,-44(fp)
   199a0:	e0bffb15 	stw	r2,-20(fp)
   199a4:	e0bffb17 	ldw	r2,-20(fp)
   199a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   199ac:	e0bfff17 	ldw	r2,-4(fp)
   199b0:	00c01044 	movi	r3,65
   199b4:	10c00005 	stb	r3,0(r2)
        return;
   199b8:	00000b06 	br	199e8 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   199bc:	e0bff617 	ldw	r2,-40(fp)
   199c0:	10801304 	addi	r2,r2,76
   199c4:	1009883a 	mov	r4,r2
   199c8:	e17ffe17 	ldw	r5,-8(fp)
   199cc:	001390c0 	call	1390c <OS_StrCopy>
   199d0:	e0bff517 	ldw	r2,-44(fp)
   199d4:	e0bffc15 	stw	r2,-16(fp)
   199d8:	e0bffc17 	ldw	r2,-16(fp)
   199dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   199e0:	e0bfff17 	ldw	r2,-4(fp)
   199e4:	10000005 	stb	zero,0(r2)
}
   199e8:	e037883a 	mov	sp,fp
   199ec:	dfc00117 	ldw	ra,4(sp)
   199f0:	df000017 	ldw	fp,0(sp)
   199f4:	dec00204 	addi	sp,sp,8
   199f8:	f800283a 	ret

000199fc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   199fc:	defff404 	addi	sp,sp,-48
   19a00:	dfc00b15 	stw	ra,44(sp)
   19a04:	df000a15 	stw	fp,40(sp)
   19a08:	df000a04 	addi	fp,sp,40
   19a0c:	2005883a 	mov	r2,r4
   19a10:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19a14:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   19a18:	e0bfff03 	ldbu	r2,-4(fp)
   19a1c:	10800530 	cmpltui	r2,r2,20
   19a20:	1000021e 	bne	r2,zero,19a2c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19a24:	00800a84 	movi	r2,42
   19a28:	00006d06 	br	19be0 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a2c:	0005303a 	rdctl	r2,status
   19a30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a34:	e0fff817 	ldw	r3,-32(fp)
   19a38:	00bfff84 	movi	r2,-2
   19a3c:	1884703a 	and	r2,r3,r2
   19a40:	1001703a 	wrctl	status,r2
  
  return context;
   19a44:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19a48:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19a4c:	e0ffff03 	ldbu	r3,-4(fp)
   19a50:	008000f4 	movhi	r2,3
   19a54:	10833804 	addi	r2,r2,3296
   19a58:	18c7883a 	add	r3,r3,r3
   19a5c:	18c7883a 	add	r3,r3,r3
   19a60:	10c5883a 	add	r2,r2,r3
   19a64:	10800017 	ldw	r2,0(r2)
   19a68:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19a6c:	e0bff717 	ldw	r2,-36(fp)
   19a70:	1000061e 	bne	r2,zero,19a8c <OSTaskResume+0x90>
   19a74:	e0bff617 	ldw	r2,-40(fp)
   19a78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a7c:	e0bff917 	ldw	r2,-28(fp)
   19a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   19a84:	00801184 	movi	r2,70
   19a88:	00005506 	br	19be0 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19a8c:	e0bff717 	ldw	r2,-36(fp)
   19a90:	10800058 	cmpnei	r2,r2,1
   19a94:	1000061e 	bne	r2,zero,19ab0 <OSTaskResume+0xb4>
   19a98:	e0bff617 	ldw	r2,-40(fp)
   19a9c:	e0bffa15 	stw	r2,-24(fp)
   19aa0:	e0bffa17 	ldw	r2,-24(fp)
   19aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19aa8:	008010c4 	movi	r2,67
   19aac:	00004c06 	br	19be0 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19ab0:	e0bff717 	ldw	r2,-36(fp)
   19ab4:	10800c03 	ldbu	r2,48(r2)
   19ab8:	10803fcc 	andi	r2,r2,255
   19abc:	1080020c 	andi	r2,r2,8
   19ac0:	10004226 	beq	r2,zero,19bcc <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   19ac4:	e0bff717 	ldw	r2,-36(fp)
   19ac8:	10c00c03 	ldbu	r3,48(r2)
   19acc:	00bffdc4 	movi	r2,-9
   19ad0:	1884703a 	and	r2,r3,r2
   19ad4:	1007883a 	mov	r3,r2
   19ad8:	e0bff717 	ldw	r2,-36(fp)
   19adc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19ae0:	e0bff717 	ldw	r2,-36(fp)
   19ae4:	10800c03 	ldbu	r2,48(r2)
   19ae8:	10803fcc 	andi	r2,r2,255
   19aec:	1000311e 	bne	r2,zero,19bb4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   19af0:	e0bff717 	ldw	r2,-36(fp)
   19af4:	10800b8b 	ldhu	r2,46(r2)
   19af8:	10bfffcc 	andi	r2,r2,65535
   19afc:	1000281e 	bne	r2,zero,19ba0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   19b00:	e0bff717 	ldw	r2,-36(fp)
   19b04:	10c00d83 	ldbu	r3,54(r2)
   19b08:	008000b4 	movhi	r2,2
   19b0c:	108e3c04 	addi	r2,r2,14576
   19b10:	10800003 	ldbu	r2,0(r2)
   19b14:	1884b03a 	or	r2,r3,r2
   19b18:	1007883a 	mov	r3,r2
   19b1c:	008000b4 	movhi	r2,2
   19b20:	108e3c04 	addi	r2,r2,14576
   19b24:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19b28:	e0bff717 	ldw	r2,-36(fp)
   19b2c:	10800d03 	ldbu	r2,52(r2)
   19b30:	10c03fcc 	andi	r3,r2,255
   19b34:	e0bff717 	ldw	r2,-36(fp)
   19b38:	10800d03 	ldbu	r2,52(r2)
   19b3c:	11003fcc 	andi	r4,r2,255
   19b40:	008000b4 	movhi	r2,2
   19b44:	108e3c44 	addi	r2,r2,14577
   19b48:	1105883a 	add	r2,r2,r4
   19b4c:	11000003 	ldbu	r4,0(r2)
   19b50:	e0bff717 	ldw	r2,-36(fp)
   19b54:	10800d43 	ldbu	r2,53(r2)
   19b58:	2084b03a 	or	r2,r4,r2
   19b5c:	1009883a 	mov	r4,r2
   19b60:	008000b4 	movhi	r2,2
   19b64:	108e3c44 	addi	r2,r2,14577
   19b68:	10c5883a 	add	r2,r2,r3
   19b6c:	11000005 	stb	r4,0(r2)
   19b70:	e0bff617 	ldw	r2,-40(fp)
   19b74:	e0bffb15 	stw	r2,-20(fp)
   19b78:	e0bffb17 	ldw	r2,-20(fp)
   19b7c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   19b80:	008000b4 	movhi	r2,2
   19b84:	108e3044 	addi	r2,r2,14529
   19b88:	10800003 	ldbu	r2,0(r2)
   19b8c:	10803fcc 	andi	r2,r2,255
   19b90:	10800058 	cmpnei	r2,r2,1
   19b94:	10000b1e 	bne	r2,zero,19bc4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   19b98:	00137d00 	call	137d0 <OS_Sched>
   19b9c:	00000906 	br	19bc4 <OSTaskResume+0x1c8>
   19ba0:	e0bff617 	ldw	r2,-40(fp)
   19ba4:	e0bffc15 	stw	r2,-16(fp)
   19ba8:	e0bffc17 	ldw	r2,-16(fp)
   19bac:	1001703a 	wrctl	status,r2
   19bb0:	00000406 	br	19bc4 <OSTaskResume+0x1c8>
   19bb4:	e0bff617 	ldw	r2,-40(fp)
   19bb8:	e0bffd15 	stw	r2,-12(fp)
   19bbc:	e0bffd17 	ldw	r2,-12(fp)
   19bc0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   19bc4:	0005883a 	mov	r2,zero
   19bc8:	00000506 	br	19be0 <OSTaskResume+0x1e4>
   19bcc:	e0bff617 	ldw	r2,-40(fp)
   19bd0:	e0bffe15 	stw	r2,-8(fp)
   19bd4:	e0bffe17 	ldw	r2,-8(fp)
   19bd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   19bdc:	00801104 	movi	r2,68
}
   19be0:	e037883a 	mov	sp,fp
   19be4:	dfc00117 	ldw	ra,4(sp)
   19be8:	df000017 	ldw	fp,0(sp)
   19bec:	dec00204 	addi	sp,sp,8
   19bf0:	f800283a 	ret

00019bf4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   19bf4:	defff304 	addi	sp,sp,-52
   19bf8:	df000c15 	stw	fp,48(sp)
   19bfc:	df000c04 	addi	fp,sp,48
   19c00:	2005883a 	mov	r2,r4
   19c04:	e17fff15 	stw	r5,-4(fp)
   19c08:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19c0c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   19c10:	e0bffe03 	ldbu	r2,-8(fp)
   19c14:	10800570 	cmpltui	r2,r2,21
   19c18:	1000051e 	bne	r2,zero,19c30 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   19c1c:	e0bffe03 	ldbu	r2,-8(fp)
   19c20:	10803fe0 	cmpeqi	r2,r2,255
   19c24:	1000021e 	bne	r2,zero,19c30 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   19c28:	00800a84 	movi	r2,42
   19c2c:	00005f06 	br	19dac <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   19c30:	e0bfff17 	ldw	r2,-4(fp)
   19c34:	1000021e 	bne	r2,zero,19c40 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   19c38:	00800244 	movi	r2,9
   19c3c:	00005b06 	br	19dac <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   19c40:	e0bfff17 	ldw	r2,-4(fp)
   19c44:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   19c48:	e0bfff17 	ldw	r2,-4(fp)
   19c4c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c50:	0005303a 	rdctl	r2,status
   19c54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c58:	e0fff917 	ldw	r3,-28(fp)
   19c5c:	00bfff84 	movi	r2,-2
   19c60:	1884703a 	and	r2,r3,r2
   19c64:	1001703a 	wrctl	status,r2
  
  return context;
   19c68:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   19c6c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   19c70:	e0bffe03 	ldbu	r2,-8(fp)
   19c74:	10803fd8 	cmpnei	r2,r2,255
   19c78:	1000051e 	bne	r2,zero,19c90 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   19c7c:	008000b4 	movhi	r2,2
   19c80:	108e3f04 	addi	r2,r2,14588
   19c84:	10800017 	ldw	r2,0(r2)
   19c88:	10800c83 	ldbu	r2,50(r2)
   19c8c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19c90:	e0fffe03 	ldbu	r3,-8(fp)
   19c94:	008000f4 	movhi	r2,3
   19c98:	10833804 	addi	r2,r2,3296
   19c9c:	18c7883a 	add	r3,r3,r3
   19ca0:	18c7883a 	add	r3,r3,r3
   19ca4:	10c5883a 	add	r2,r2,r3
   19ca8:	10800017 	ldw	r2,0(r2)
   19cac:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   19cb0:	e0bff717 	ldw	r2,-36(fp)
   19cb4:	1000061e 	bne	r2,zero,19cd0 <OSTaskStkChk+0xdc>
   19cb8:	e0bff617 	ldw	r2,-40(fp)
   19cbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19cc0:	e0bffa17 	ldw	r2,-24(fp)
   19cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19cc8:	008010c4 	movi	r2,67
   19ccc:	00003706 	br	19dac <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   19cd0:	e0bff717 	ldw	r2,-36(fp)
   19cd4:	10800058 	cmpnei	r2,r2,1
   19cd8:	1000061e 	bne	r2,zero,19cf4 <OSTaskStkChk+0x100>
   19cdc:	e0bff617 	ldw	r2,-40(fp)
   19ce0:	e0bffb15 	stw	r2,-20(fp)
   19ce4:	e0bffb17 	ldw	r2,-20(fp)
   19ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19cec:	008010c4 	movi	r2,67
   19cf0:	00002e06 	br	19dac <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   19cf4:	e0bff717 	ldw	r2,-36(fp)
   19cf8:	1080040b 	ldhu	r2,16(r2)
   19cfc:	10bfffcc 	andi	r2,r2,65535
   19d00:	1080004c 	andi	r2,r2,1
   19d04:	1000061e 	bne	r2,zero,19d20 <OSTaskStkChk+0x12c>
   19d08:	e0bff617 	ldw	r2,-40(fp)
   19d0c:	e0bffc15 	stw	r2,-16(fp)
   19d10:	e0bffc17 	ldw	r2,-16(fp)
   19d14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   19d18:	00801144 	movi	r2,69
   19d1c:	00002306 	br	19dac <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   19d20:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   19d24:	e0bff717 	ldw	r2,-36(fp)
   19d28:	10800317 	ldw	r2,12(r2)
   19d2c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   19d30:	e0bff717 	ldw	r2,-36(fp)
   19d34:	10800217 	ldw	r2,8(r2)
   19d38:	e0bff415 	stw	r2,-48(fp)
   19d3c:	e0bff617 	ldw	r2,-40(fp)
   19d40:	e0bffd15 	stw	r2,-12(fp)
   19d44:	e0bffd17 	ldw	r2,-12(fp)
   19d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   19d4c:	00000306 	br	19d5c <OSTaskStkChk+0x168>
        nfree++;
   19d50:	e0bff517 	ldw	r2,-44(fp)
   19d54:	10800044 	addi	r2,r2,1
   19d58:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   19d5c:	e0bff417 	ldw	r2,-48(fp)
   19d60:	10c00104 	addi	r3,r2,4
   19d64:	e0fff415 	stw	r3,-48(fp)
   19d68:	10800017 	ldw	r2,0(r2)
   19d6c:	103ff826 	beq	r2,zero,19d50 <__alt_mem_Flash_flash_data+0xf4019d50>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   19d70:	e0bff517 	ldw	r2,-44(fp)
   19d74:	1085883a 	add	r2,r2,r2
   19d78:	1085883a 	add	r2,r2,r2
   19d7c:	1007883a 	mov	r3,r2
   19d80:	e0bfff17 	ldw	r2,-4(fp)
   19d84:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   19d88:	e0fff817 	ldw	r3,-32(fp)
   19d8c:	e0bff517 	ldw	r2,-44(fp)
   19d90:	1885c83a 	sub	r2,r3,r2
   19d94:	1085883a 	add	r2,r2,r2
   19d98:	1085883a 	add	r2,r2,r2
   19d9c:	1007883a 	mov	r3,r2
   19da0:	e0bfff17 	ldw	r2,-4(fp)
   19da4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   19da8:	0005883a 	mov	r2,zero
}
   19dac:	e037883a 	mov	sp,fp
   19db0:	df000017 	ldw	fp,0(sp)
   19db4:	dec00104 	addi	sp,sp,4
   19db8:	f800283a 	ret

00019dbc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   19dbc:	defff504 	addi	sp,sp,-44
   19dc0:	dfc00a15 	stw	ra,40(sp)
   19dc4:	df000915 	stw	fp,36(sp)
   19dc8:	df000904 	addi	fp,sp,36
   19dcc:	2005883a 	mov	r2,r4
   19dd0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19dd4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   19dd8:	e0bfff03 	ldbu	r2,-4(fp)
   19ddc:	10800518 	cmpnei	r2,r2,20
   19de0:	1000021e 	bne	r2,zero,19dec <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   19de4:	008011c4 	movi	r2,71
   19de8:	00007406 	br	19fbc <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19dec:	e0bfff03 	ldbu	r2,-4(fp)
   19df0:	10800530 	cmpltui	r2,r2,20
   19df4:	1000051e 	bne	r2,zero,19e0c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   19df8:	e0bfff03 	ldbu	r2,-4(fp)
   19dfc:	10803fe0 	cmpeqi	r2,r2,255
   19e00:	1000021e 	bne	r2,zero,19e0c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   19e04:	00800a84 	movi	r2,42
   19e08:	00006c06 	br	19fbc <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e0c:	0005303a 	rdctl	r2,status
   19e10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e14:	e0fffb17 	ldw	r3,-20(fp)
   19e18:	00bfff84 	movi	r2,-2
   19e1c:	1884703a 	and	r2,r3,r2
   19e20:	1001703a 	wrctl	status,r2
  
  return context;
   19e24:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   19e28:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   19e2c:	e0bfff03 	ldbu	r2,-4(fp)
   19e30:	10803fd8 	cmpnei	r2,r2,255
   19e34:	1000081e 	bne	r2,zero,19e58 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   19e38:	008000b4 	movhi	r2,2
   19e3c:	108e3f04 	addi	r2,r2,14588
   19e40:	10800017 	ldw	r2,0(r2)
   19e44:	10800c83 	ldbu	r2,50(r2)
   19e48:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   19e4c:	00800044 	movi	r2,1
   19e50:	e0bff705 	stb	r2,-36(fp)
   19e54:	00000b06 	br	19e84 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   19e58:	008000b4 	movhi	r2,2
   19e5c:	108e3f04 	addi	r2,r2,14588
   19e60:	10800017 	ldw	r2,0(r2)
   19e64:	10800c83 	ldbu	r2,50(r2)
   19e68:	10c03fcc 	andi	r3,r2,255
   19e6c:	e0bfff03 	ldbu	r2,-4(fp)
   19e70:	1880031e 	bne	r3,r2,19e80 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   19e74:	00800044 	movi	r2,1
   19e78:	e0bff705 	stb	r2,-36(fp)
   19e7c:	00000106 	br	19e84 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   19e80:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19e84:	e0ffff03 	ldbu	r3,-4(fp)
   19e88:	008000f4 	movhi	r2,3
   19e8c:	10833804 	addi	r2,r2,3296
   19e90:	18c7883a 	add	r3,r3,r3
   19e94:	18c7883a 	add	r3,r3,r3
   19e98:	10c5883a 	add	r2,r2,r3
   19e9c:	10800017 	ldw	r2,0(r2)
   19ea0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   19ea4:	e0bff917 	ldw	r2,-28(fp)
   19ea8:	1000061e 	bne	r2,zero,19ec4 <OSTaskSuspend+0x108>
   19eac:	e0bff817 	ldw	r2,-32(fp)
   19eb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19eb4:	e0bffc17 	ldw	r2,-16(fp)
   19eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   19ebc:	00801204 	movi	r2,72
   19ec0:	00003e06 	br	19fbc <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   19ec4:	e0bff917 	ldw	r2,-28(fp)
   19ec8:	10800058 	cmpnei	r2,r2,1
   19ecc:	1000061e 	bne	r2,zero,19ee8 <OSTaskSuspend+0x12c>
   19ed0:	e0bff817 	ldw	r2,-32(fp)
   19ed4:	e0bffd15 	stw	r2,-12(fp)
   19ed8:	e0bffd17 	ldw	r2,-12(fp)
   19edc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19ee0:	008010c4 	movi	r2,67
   19ee4:	00003506 	br	19fbc <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   19ee8:	e0bff917 	ldw	r2,-28(fp)
   19eec:	10800d03 	ldbu	r2,52(r2)
   19ef0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   19ef4:	e0fffa03 	ldbu	r3,-24(fp)
   19ef8:	e13ffa03 	ldbu	r4,-24(fp)
   19efc:	008000b4 	movhi	r2,2
   19f00:	108e3c44 	addi	r2,r2,14577
   19f04:	1105883a 	add	r2,r2,r4
   19f08:	10800003 	ldbu	r2,0(r2)
   19f0c:	1009883a 	mov	r4,r2
   19f10:	e0bff917 	ldw	r2,-28(fp)
   19f14:	10800d43 	ldbu	r2,53(r2)
   19f18:	0084303a 	nor	r2,zero,r2
   19f1c:	2084703a 	and	r2,r4,r2
   19f20:	1009883a 	mov	r4,r2
   19f24:	008000b4 	movhi	r2,2
   19f28:	108e3c44 	addi	r2,r2,14577
   19f2c:	10c5883a 	add	r2,r2,r3
   19f30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   19f34:	e0fffa03 	ldbu	r3,-24(fp)
   19f38:	008000b4 	movhi	r2,2
   19f3c:	108e3c44 	addi	r2,r2,14577
   19f40:	10c5883a 	add	r2,r2,r3
   19f44:	10800003 	ldbu	r2,0(r2)
   19f48:	10803fcc 	andi	r2,r2,255
   19f4c:	10000c1e 	bne	r2,zero,19f80 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   19f50:	e0bff917 	ldw	r2,-28(fp)
   19f54:	10800d83 	ldbu	r2,54(r2)
   19f58:	0084303a 	nor	r2,zero,r2
   19f5c:	1007883a 	mov	r3,r2
   19f60:	008000b4 	movhi	r2,2
   19f64:	108e3c04 	addi	r2,r2,14576
   19f68:	10800003 	ldbu	r2,0(r2)
   19f6c:	1884703a 	and	r2,r3,r2
   19f70:	1007883a 	mov	r3,r2
   19f74:	008000b4 	movhi	r2,2
   19f78:	108e3c04 	addi	r2,r2,14576
   19f7c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   19f80:	e0bff917 	ldw	r2,-28(fp)
   19f84:	10800c03 	ldbu	r2,48(r2)
   19f88:	10800214 	ori	r2,r2,8
   19f8c:	1007883a 	mov	r3,r2
   19f90:	e0bff917 	ldw	r2,-28(fp)
   19f94:	10c00c05 	stb	r3,48(r2)
   19f98:	e0bff817 	ldw	r2,-32(fp)
   19f9c:	e0bffe15 	stw	r2,-8(fp)
   19fa0:	e0bffe17 	ldw	r2,-8(fp)
   19fa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   19fa8:	e0bff703 	ldbu	r2,-36(fp)
   19fac:	10800058 	cmpnei	r2,r2,1
   19fb0:	1000011e 	bne	r2,zero,19fb8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   19fb4:	00137d00 	call	137d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19fb8:	0005883a 	mov	r2,zero
}
   19fbc:	e037883a 	mov	sp,fp
   19fc0:	dfc00117 	ldw	ra,4(sp)
   19fc4:	df000017 	ldw	fp,0(sp)
   19fc8:	dec00204 	addi	sp,sp,8
   19fcc:	f800283a 	ret

00019fd0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   19fd0:	defff604 	addi	sp,sp,-40
   19fd4:	dfc00915 	stw	ra,36(sp)
   19fd8:	df000815 	stw	fp,32(sp)
   19fdc:	df000804 	addi	fp,sp,32
   19fe0:	2005883a 	mov	r2,r4
   19fe4:	e17fff15 	stw	r5,-4(fp)
   19fe8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19fec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   19ff0:	e0bffe03 	ldbu	r2,-8(fp)
   19ff4:	10800570 	cmpltui	r2,r2,21
   19ff8:	1000051e 	bne	r2,zero,1a010 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   19ffc:	e0bffe03 	ldbu	r2,-8(fp)
   1a000:	10803fe0 	cmpeqi	r2,r2,255
   1a004:	1000021e 	bne	r2,zero,1a010 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1a008:	00800a84 	movi	r2,42
   1a00c:	00003606 	br	1a0e8 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1a010:	e0bfff17 	ldw	r2,-4(fp)
   1a014:	1000021e 	bne	r2,zero,1a020 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1a018:	00800244 	movi	r2,9
   1a01c:	00003206 	br	1a0e8 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a020:	0005303a 	rdctl	r2,status
   1a024:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a028:	e0fffa17 	ldw	r3,-24(fp)
   1a02c:	00bfff84 	movi	r2,-2
   1a030:	1884703a 	and	r2,r3,r2
   1a034:	1001703a 	wrctl	status,r2
  
  return context;
   1a038:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a03c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1a040:	e0bffe03 	ldbu	r2,-8(fp)
   1a044:	10803fd8 	cmpnei	r2,r2,255
   1a048:	1000051e 	bne	r2,zero,1a060 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1a04c:	008000b4 	movhi	r2,2
   1a050:	108e3f04 	addi	r2,r2,14588
   1a054:	10800017 	ldw	r2,0(r2)
   1a058:	10800c83 	ldbu	r2,50(r2)
   1a05c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a060:	e0fffe03 	ldbu	r3,-8(fp)
   1a064:	008000f4 	movhi	r2,3
   1a068:	10833804 	addi	r2,r2,3296
   1a06c:	18c7883a 	add	r3,r3,r3
   1a070:	18c7883a 	add	r3,r3,r3
   1a074:	10c5883a 	add	r2,r2,r3
   1a078:	10800017 	ldw	r2,0(r2)
   1a07c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1a080:	e0bff917 	ldw	r2,-28(fp)
   1a084:	1000061e 	bne	r2,zero,1a0a0 <OSTaskQuery+0xd0>
   1a088:	e0bff817 	ldw	r2,-32(fp)
   1a08c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a090:	e0bffb17 	ldw	r2,-20(fp)
   1a094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1a098:	00800a44 	movi	r2,41
   1a09c:	00001206 	br	1a0e8 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1a0a0:	e0bff917 	ldw	r2,-28(fp)
   1a0a4:	10800058 	cmpnei	r2,r2,1
   1a0a8:	1000061e 	bne	r2,zero,1a0c4 <OSTaskQuery+0xf4>
   1a0ac:	e0bff817 	ldw	r2,-32(fp)
   1a0b0:	e0bffc15 	stw	r2,-16(fp)
   1a0b4:	e0bffc17 	ldw	r2,-16(fp)
   1a0b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a0bc:	008010c4 	movi	r2,67
   1a0c0:	00000906 	br	1a0e8 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1a0c4:	e13fff17 	ldw	r4,-4(fp)
   1a0c8:	e17ff917 	ldw	r5,-28(fp)
   1a0cc:	01801b04 	movi	r6,108
   1a0d0:	001376c0 	call	1376c <OS_MemCopy>
   1a0d4:	e0bff817 	ldw	r2,-32(fp)
   1a0d8:	e0bffd15 	stw	r2,-12(fp)
   1a0dc:	e0bffd17 	ldw	r2,-12(fp)
   1a0e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a0e4:	0005883a 	mov	r2,zero
}
   1a0e8:	e037883a 	mov	sp,fp
   1a0ec:	dfc00117 	ldw	ra,4(sp)
   1a0f0:	df000017 	ldw	fp,0(sp)
   1a0f4:	dec00204 	addi	sp,sp,8
   1a0f8:	f800283a 	ret

0001a0fc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1a0fc:	defffc04 	addi	sp,sp,-16
   1a100:	df000315 	stw	fp,12(sp)
   1a104:	df000304 	addi	fp,sp,12
   1a108:	e13ffd15 	stw	r4,-12(fp)
   1a10c:	e17ffe15 	stw	r5,-8(fp)
   1a110:	3005883a 	mov	r2,r6
   1a114:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1a118:	e0bfff0b 	ldhu	r2,-4(fp)
   1a11c:	1080004c 	andi	r2,r2,1
   1a120:	10000d26 	beq	r2,zero,1a158 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1a124:	e0bfff0b 	ldhu	r2,-4(fp)
   1a128:	1080008c 	andi	r2,r2,2
   1a12c:	10000a26 	beq	r2,zero,1a158 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a130:	00000706 	br	1a150 <OS_TaskStkClr+0x54>
                size--;
   1a134:	e0bffe17 	ldw	r2,-8(fp)
   1a138:	10bfffc4 	addi	r2,r2,-1
   1a13c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1a140:	e0bffd17 	ldw	r2,-12(fp)
   1a144:	10c00104 	addi	r3,r2,4
   1a148:	e0fffd15 	stw	r3,-12(fp)
   1a14c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a150:	e0bffe17 	ldw	r2,-8(fp)
   1a154:	103ff71e 	bne	r2,zero,1a134 <__alt_mem_Flash_flash_data+0xf401a134>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1a158:	e037883a 	mov	sp,fp
   1a15c:	df000017 	ldw	fp,0(sp)
   1a160:	dec00104 	addi	sp,sp,4
   1a164:	f800283a 	ret

0001a168 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1a168:	defff904 	addi	sp,sp,-28
   1a16c:	dfc00615 	stw	ra,24(sp)
   1a170:	df000515 	stw	fp,20(sp)
   1a174:	df000504 	addi	fp,sp,20
   1a178:	2005883a 	mov	r2,r4
   1a17c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a180:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a184:	008000b4 	movhi	r2,2
   1a188:	108e3e04 	addi	r2,r2,14584
   1a18c:	10800003 	ldbu	r2,0(r2)
   1a190:	10803fcc 	andi	r2,r2,255
   1a194:	10000126 	beq	r2,zero,1a19c <OSTimeDly+0x34>
        return;
   1a198:	00004006 	br	1a29c <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1a19c:	e0bfff0b 	ldhu	r2,-4(fp)
   1a1a0:	10003e26 	beq	r2,zero,1a29c <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1a4:	0005303a 	rdctl	r2,status
   1a1a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a1ac:	e0fffd17 	ldw	r3,-12(fp)
   1a1b0:	00bfff84 	movi	r2,-2
   1a1b4:	1884703a 	and	r2,r3,r2
   1a1b8:	1001703a 	wrctl	status,r2
  
  return context;
   1a1bc:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1a1c0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1a1c4:	008000b4 	movhi	r2,2
   1a1c8:	108e3f04 	addi	r2,r2,14588
   1a1cc:	10800017 	ldw	r2,0(r2)
   1a1d0:	10800d03 	ldbu	r2,52(r2)
   1a1d4:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1a1d8:	e0fffc03 	ldbu	r3,-16(fp)
   1a1dc:	e13ffc03 	ldbu	r4,-16(fp)
   1a1e0:	008000b4 	movhi	r2,2
   1a1e4:	108e3c44 	addi	r2,r2,14577
   1a1e8:	1105883a 	add	r2,r2,r4
   1a1ec:	10800003 	ldbu	r2,0(r2)
   1a1f0:	1009883a 	mov	r4,r2
   1a1f4:	008000b4 	movhi	r2,2
   1a1f8:	108e3f04 	addi	r2,r2,14588
   1a1fc:	10800017 	ldw	r2,0(r2)
   1a200:	10800d43 	ldbu	r2,53(r2)
   1a204:	0084303a 	nor	r2,zero,r2
   1a208:	2084703a 	and	r2,r4,r2
   1a20c:	1009883a 	mov	r4,r2
   1a210:	008000b4 	movhi	r2,2
   1a214:	108e3c44 	addi	r2,r2,14577
   1a218:	10c5883a 	add	r2,r2,r3
   1a21c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1a220:	e0fffc03 	ldbu	r3,-16(fp)
   1a224:	008000b4 	movhi	r2,2
   1a228:	108e3c44 	addi	r2,r2,14577
   1a22c:	10c5883a 	add	r2,r2,r3
   1a230:	10800003 	ldbu	r2,0(r2)
   1a234:	10803fcc 	andi	r2,r2,255
   1a238:	10000e1e 	bne	r2,zero,1a274 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1a23c:	008000b4 	movhi	r2,2
   1a240:	108e3f04 	addi	r2,r2,14588
   1a244:	10800017 	ldw	r2,0(r2)
   1a248:	10800d83 	ldbu	r2,54(r2)
   1a24c:	0084303a 	nor	r2,zero,r2
   1a250:	1007883a 	mov	r3,r2
   1a254:	008000b4 	movhi	r2,2
   1a258:	108e3c04 	addi	r2,r2,14576
   1a25c:	10800003 	ldbu	r2,0(r2)
   1a260:	1884703a 	and	r2,r3,r2
   1a264:	1007883a 	mov	r3,r2
   1a268:	008000b4 	movhi	r2,2
   1a26c:	108e3c04 	addi	r2,r2,14576
   1a270:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1a274:	008000b4 	movhi	r2,2
   1a278:	108e3f04 	addi	r2,r2,14588
   1a27c:	10800017 	ldw	r2,0(r2)
   1a280:	e0ffff0b 	ldhu	r3,-4(fp)
   1a284:	10c00b8d 	sth	r3,46(r2)
   1a288:	e0bffb17 	ldw	r2,-20(fp)
   1a28c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a290:	e0bffe17 	ldw	r2,-8(fp)
   1a294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1a298:	00137d00 	call	137d0 <OS_Sched>
    }
}
   1a29c:	e037883a 	mov	sp,fp
   1a2a0:	dfc00117 	ldw	ra,4(sp)
   1a2a4:	df000017 	ldw	fp,0(sp)
   1a2a8:	dec00204 	addi	sp,sp,8
   1a2ac:	f800283a 	ret

0001a2b0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1a2b0:	defff804 	addi	sp,sp,-32
   1a2b4:	dfc00715 	stw	ra,28(sp)
   1a2b8:	df000615 	stw	fp,24(sp)
   1a2bc:	df000604 	addi	fp,sp,24
   1a2c0:	2015883a 	mov	r10,r4
   1a2c4:	2809883a 	mov	r4,r5
   1a2c8:	3007883a 	mov	r3,r6
   1a2cc:	3805883a 	mov	r2,r7
   1a2d0:	e2bffc05 	stb	r10,-16(fp)
   1a2d4:	e13ffd05 	stb	r4,-12(fp)
   1a2d8:	e0fffe05 	stb	r3,-8(fp)
   1a2dc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a2e0:	008000b4 	movhi	r2,2
   1a2e4:	108e3e04 	addi	r2,r2,14584
   1a2e8:	10800003 	ldbu	r2,0(r2)
   1a2ec:	10803fcc 	andi	r2,r2,255
   1a2f0:	10000226 	beq	r2,zero,1a2fc <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1a2f4:	00801544 	movi	r2,85
   1a2f8:	00004206 	br	1a404 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1a2fc:	e0bffc03 	ldbu	r2,-16(fp)
   1a300:	1000081e 	bne	r2,zero,1a324 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1a304:	e0bffd03 	ldbu	r2,-12(fp)
   1a308:	1000061e 	bne	r2,zero,1a324 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1a30c:	e0bffe03 	ldbu	r2,-8(fp)
   1a310:	1000041e 	bne	r2,zero,1a324 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1a314:	e0bfff0b 	ldhu	r2,-4(fp)
   1a318:	1000021e 	bne	r2,zero,1a324 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1a31c:	00801504 	movi	r2,84
   1a320:	00003806 	br	1a404 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1a324:	e0bffd03 	ldbu	r2,-12(fp)
   1a328:	10800f30 	cmpltui	r2,r2,60
   1a32c:	1000021e 	bne	r2,zero,1a338 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1a330:	00801444 	movi	r2,81
   1a334:	00003306 	br	1a404 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1a338:	e0bffe03 	ldbu	r2,-8(fp)
   1a33c:	10800f30 	cmpltui	r2,r2,60
   1a340:	1000021e 	bne	r2,zero,1a34c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1a344:	00801484 	movi	r2,82
   1a348:	00002e06 	br	1a404 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1a34c:	e0bfff0b 	ldhu	r2,-4(fp)
   1a350:	1080fa30 	cmpltui	r2,r2,1000
   1a354:	1000021e 	bne	r2,zero,1a360 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1a358:	008014c4 	movi	r2,83
   1a35c:	00002906 	br	1a404 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a360:	e0bffc03 	ldbu	r2,-16(fp)
   1a364:	10c38424 	muli	r3,r2,3600
   1a368:	e0bffd03 	ldbu	r2,-12(fp)
   1a36c:	10800f24 	muli	r2,r2,60
   1a370:	1887883a 	add	r3,r3,r2
   1a374:	e0bffe03 	ldbu	r2,-8(fp)
   1a378:	1885883a 	add	r2,r3,r2
   1a37c:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1a380:	e0bfff0b 	ldhu	r2,-4(fp)
   1a384:	10800f84 	addi	r2,r2,62
   1a388:	100690fa 	slli	r3,r2,3
   1a38c:	008418b4 	movhi	r2,4194
   1a390:	109374c4 	addi	r2,r2,19923
   1a394:	188a383a 	mulxuu	r5,r3,r2
   1a398:	1885383a 	mul	r2,r3,r2
   1a39c:	1011883a 	mov	r8,r2
   1a3a0:	2813883a 	mov	r9,r5
   1a3a4:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a3a8:	2085883a 	add	r2,r4,r2
   1a3ac:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1a3b0:	e0bffb17 	ldw	r2,-20(fp)
   1a3b4:	1004d43a 	srli	r2,r2,16
   1a3b8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1a3bc:	e0bffb17 	ldw	r2,-20(fp)
   1a3c0:	10bfffcc 	andi	r2,r2,65535
   1a3c4:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1a3c8:	e0bffb17 	ldw	r2,-20(fp)
   1a3cc:	10bfffcc 	andi	r2,r2,65535
   1a3d0:	1009883a 	mov	r4,r2
   1a3d4:	001a1680 	call	1a168 <OSTimeDly>
    while (loops > 0) {
   1a3d8:	00000706 	br	1a3f8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1a3dc:	01200014 	movui	r4,32768
   1a3e0:	001a1680 	call	1a168 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1a3e4:	01200014 	movui	r4,32768
   1a3e8:	001a1680 	call	1a168 <OSTimeDly>
        loops--;
   1a3ec:	e0bffa0b 	ldhu	r2,-24(fp)
   1a3f0:	10bfffc4 	addi	r2,r2,-1
   1a3f4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1a3f8:	e0bffa0b 	ldhu	r2,-24(fp)
   1a3fc:	103ff71e 	bne	r2,zero,1a3dc <__alt_mem_Flash_flash_data+0xf401a3dc>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1a400:	0005883a 	mov	r2,zero
}
   1a404:	e037883a 	mov	sp,fp
   1a408:	dfc00117 	ldw	ra,4(sp)
   1a40c:	df000017 	ldw	fp,0(sp)
   1a410:	dec00204 	addi	sp,sp,8
   1a414:	f800283a 	ret

0001a418 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1a418:	defff504 	addi	sp,sp,-44
   1a41c:	dfc00a15 	stw	ra,40(sp)
   1a420:	df000915 	stw	fp,36(sp)
   1a424:	df000904 	addi	fp,sp,36
   1a428:	2005883a 	mov	r2,r4
   1a42c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a430:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1a434:	e0bfff03 	ldbu	r2,-4(fp)
   1a438:	10800530 	cmpltui	r2,r2,20
   1a43c:	1000021e 	bne	r2,zero,1a448 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a440:	00800a84 	movi	r2,42
   1a444:	00006b06 	br	1a5f4 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a448:	0005303a 	rdctl	r2,status
   1a44c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a450:	e0fff917 	ldw	r3,-28(fp)
   1a454:	00bfff84 	movi	r2,-2
   1a458:	1884703a 	and	r2,r3,r2
   1a45c:	1001703a 	wrctl	status,r2
  
  return context;
   1a460:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1a464:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1a468:	e0ffff03 	ldbu	r3,-4(fp)
   1a46c:	008000f4 	movhi	r2,3
   1a470:	10833804 	addi	r2,r2,3296
   1a474:	18c7883a 	add	r3,r3,r3
   1a478:	18c7883a 	add	r3,r3,r3
   1a47c:	10c5883a 	add	r2,r2,r3
   1a480:	10800017 	ldw	r2,0(r2)
   1a484:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1a488:	e0bff817 	ldw	r2,-32(fp)
   1a48c:	1000061e 	bne	r2,zero,1a4a8 <OSTimeDlyResume+0x90>
   1a490:	e0bff717 	ldw	r2,-36(fp)
   1a494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a498:	e0bffa17 	ldw	r2,-24(fp)
   1a49c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a4a0:	008010c4 	movi	r2,67
   1a4a4:	00005306 	br	1a5f4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a4a8:	e0bff817 	ldw	r2,-32(fp)
   1a4ac:	10800058 	cmpnei	r2,r2,1
   1a4b0:	1000061e 	bne	r2,zero,1a4cc <OSTimeDlyResume+0xb4>
   1a4b4:	e0bff717 	ldw	r2,-36(fp)
   1a4b8:	e0bffb15 	stw	r2,-20(fp)
   1a4bc:	e0bffb17 	ldw	r2,-20(fp)
   1a4c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a4c4:	008010c4 	movi	r2,67
   1a4c8:	00004a06 	br	1a5f4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1a4cc:	e0bff817 	ldw	r2,-32(fp)
   1a4d0:	10800b8b 	ldhu	r2,46(r2)
   1a4d4:	10bfffcc 	andi	r2,r2,65535
   1a4d8:	1000061e 	bne	r2,zero,1a4f4 <OSTimeDlyResume+0xdc>
   1a4dc:	e0bff717 	ldw	r2,-36(fp)
   1a4e0:	e0bffc15 	stw	r2,-16(fp)
   1a4e4:	e0bffc17 	ldw	r2,-16(fp)
   1a4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1a4ec:	00801404 	movi	r2,80
   1a4f0:	00004006 	br	1a5f4 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1a4f4:	e0bff817 	ldw	r2,-32(fp)
   1a4f8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1a4fc:	e0bff817 	ldw	r2,-32(fp)
   1a500:	10800c03 	ldbu	r2,48(r2)
   1a504:	10803fcc 	andi	r2,r2,255
   1a508:	10800dcc 	andi	r2,r2,55
   1a50c:	10000b26 	beq	r2,zero,1a53c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1a510:	e0bff817 	ldw	r2,-32(fp)
   1a514:	10c00c03 	ldbu	r3,48(r2)
   1a518:	00bff204 	movi	r2,-56
   1a51c:	1884703a 	and	r2,r3,r2
   1a520:	1007883a 	mov	r3,r2
   1a524:	e0bff817 	ldw	r2,-32(fp)
   1a528:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1a52c:	e0bff817 	ldw	r2,-32(fp)
   1a530:	00c00044 	movi	r3,1
   1a534:	10c00c45 	stb	r3,49(r2)
   1a538:	00000206 	br	1a544 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1a53c:	e0bff817 	ldw	r2,-32(fp)
   1a540:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1a544:	e0bff817 	ldw	r2,-32(fp)
   1a548:	10800c03 	ldbu	r2,48(r2)
   1a54c:	10803fcc 	andi	r2,r2,255
   1a550:	1080020c 	andi	r2,r2,8
   1a554:	1000221e 	bne	r2,zero,1a5e0 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1a558:	e0bff817 	ldw	r2,-32(fp)
   1a55c:	10c00d83 	ldbu	r3,54(r2)
   1a560:	008000b4 	movhi	r2,2
   1a564:	108e3c04 	addi	r2,r2,14576
   1a568:	10800003 	ldbu	r2,0(r2)
   1a56c:	1884b03a 	or	r2,r3,r2
   1a570:	1007883a 	mov	r3,r2
   1a574:	008000b4 	movhi	r2,2
   1a578:	108e3c04 	addi	r2,r2,14576
   1a57c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a580:	e0bff817 	ldw	r2,-32(fp)
   1a584:	10800d03 	ldbu	r2,52(r2)
   1a588:	10c03fcc 	andi	r3,r2,255
   1a58c:	e0bff817 	ldw	r2,-32(fp)
   1a590:	10800d03 	ldbu	r2,52(r2)
   1a594:	11003fcc 	andi	r4,r2,255
   1a598:	008000b4 	movhi	r2,2
   1a59c:	108e3c44 	addi	r2,r2,14577
   1a5a0:	1105883a 	add	r2,r2,r4
   1a5a4:	11000003 	ldbu	r4,0(r2)
   1a5a8:	e0bff817 	ldw	r2,-32(fp)
   1a5ac:	10800d43 	ldbu	r2,53(r2)
   1a5b0:	2084b03a 	or	r2,r4,r2
   1a5b4:	1009883a 	mov	r4,r2
   1a5b8:	008000b4 	movhi	r2,2
   1a5bc:	108e3c44 	addi	r2,r2,14577
   1a5c0:	10c5883a 	add	r2,r2,r3
   1a5c4:	11000005 	stb	r4,0(r2)
   1a5c8:	e0bff717 	ldw	r2,-36(fp)
   1a5cc:	e0bffd15 	stw	r2,-12(fp)
   1a5d0:	e0bffd17 	ldw	r2,-12(fp)
   1a5d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1a5d8:	00137d00 	call	137d0 <OS_Sched>
   1a5dc:	00000406 	br	1a5f0 <OSTimeDlyResume+0x1d8>
   1a5e0:	e0bff717 	ldw	r2,-36(fp)
   1a5e4:	e0bffe15 	stw	r2,-8(fp)
   1a5e8:	e0bffe17 	ldw	r2,-8(fp)
   1a5ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1a5f0:	0005883a 	mov	r2,zero
}
   1a5f4:	e037883a 	mov	sp,fp
   1a5f8:	dfc00117 	ldw	ra,4(sp)
   1a5fc:	df000017 	ldw	fp,0(sp)
   1a600:	dec00204 	addi	sp,sp,8
   1a604:	f800283a 	ret

0001a608 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1a608:	defffb04 	addi	sp,sp,-20
   1a60c:	df000415 	stw	fp,16(sp)
   1a610:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a614:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a618:	0005303a 	rdctl	r2,status
   1a61c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a620:	e0fffe17 	ldw	r3,-8(fp)
   1a624:	00bfff84 	movi	r2,-2
   1a628:	1884703a 	and	r2,r3,r2
   1a62c:	1001703a 	wrctl	status,r2
  
  return context;
   1a630:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1a634:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1a638:	008000b4 	movhi	r2,2
   1a63c:	108e4004 	addi	r2,r2,14592
   1a640:	10800017 	ldw	r2,0(r2)
   1a644:	e0bffd15 	stw	r2,-12(fp)
   1a648:	e0bffc17 	ldw	r2,-16(fp)
   1a64c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a650:	e0bfff17 	ldw	r2,-4(fp)
   1a654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1a658:	e0bffd17 	ldw	r2,-12(fp)
}
   1a65c:	e037883a 	mov	sp,fp
   1a660:	df000017 	ldw	fp,0(sp)
   1a664:	dec00104 	addi	sp,sp,4
   1a668:	f800283a 	ret

0001a66c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1a66c:	defffb04 	addi	sp,sp,-20
   1a670:	df000415 	stw	fp,16(sp)
   1a674:	df000404 	addi	fp,sp,16
   1a678:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a67c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a680:	0005303a 	rdctl	r2,status
   1a684:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a688:	e0fffd17 	ldw	r3,-12(fp)
   1a68c:	00bfff84 	movi	r2,-2
   1a690:	1884703a 	and	r2,r3,r2
   1a694:	1001703a 	wrctl	status,r2
  
  return context;
   1a698:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1a69c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1a6a0:	008000b4 	movhi	r2,2
   1a6a4:	108e4004 	addi	r2,r2,14592
   1a6a8:	e0ffff17 	ldw	r3,-4(fp)
   1a6ac:	10c00015 	stw	r3,0(r2)
   1a6b0:	e0bffc17 	ldw	r2,-16(fp)
   1a6b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6b8:	e0bffe17 	ldw	r2,-8(fp)
   1a6bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1a6c0:	e037883a 	mov	sp,fp
   1a6c4:	df000017 	ldw	fp,0(sp)
   1a6c8:	dec00104 	addi	sp,sp,4
   1a6cc:	f800283a 	ret

0001a6d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a6d0:	defffd04 	addi	sp,sp,-12
   1a6d4:	dfc00215 	stw	ra,8(sp)
   1a6d8:	df000115 	stw	fp,4(sp)
   1a6dc:	df000104 	addi	fp,sp,4
   1a6e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a6e4:	e13fff17 	ldw	r4,-4(fp)
   1a6e8:	014000b4 	movhi	r5,2
   1a6ec:	29455b04 	addi	r5,r5,5484
   1a6f0:	001d64c0 	call	1d64c <alt_dev_llist_insert>
}
   1a6f4:	e037883a 	mov	sp,fp
   1a6f8:	dfc00117 	ldw	ra,4(sp)
   1a6fc:	df000017 	ldw	fp,0(sp)
   1a700:	dec00204 	addi	sp,sp,8
   1a704:	f800283a 	ret

0001a708 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a708:	defffd04 	addi	sp,sp,-12
   1a70c:	dfc00215 	stw	ra,8(sp)
   1a710:	df000115 	stw	fp,4(sp)
   1a714:	df000104 	addi	fp,sp,4
   1a718:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1a71c:	001df600 	call	1df60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a720:	00800044 	movi	r2,1
   1a724:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a728:	e037883a 	mov	sp,fp
   1a72c:	dfc00117 	ldw	ra,4(sp)
   1a730:	df000017 	ldw	fp,0(sp)
   1a734:	dec00204 	addi	sp,sp,8
   1a738:	f800283a 	ret

0001a73c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a73c:	defffd04 	addi	sp,sp,-12
   1a740:	dfc00215 	stw	ra,8(sp)
   1a744:	df000115 	stw	fp,4(sp)
   1a748:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1a74c:	01040034 	movhi	r4,4096
   1a750:	21080004 	addi	r4,r4,8192
   1a754:	000b883a 	mov	r5,zero
   1a758:	000d883a 	mov	r6,zero
   1a75c:	01c00204 	movi	r7,8
   1a760:	001b8bc0 	call	1b8bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1a764:	010000b4 	movhi	r4,2
   1a768:	213f9a04 	addi	r4,r4,-408
   1a76c:	000b883a 	mov	r5,zero
   1a770:	01800204 	movi	r6,8
   1a774:	001ac840 	call	1ac84 <altera_avalon_jtag_uart_init>
   1a778:	010000b4 	movhi	r4,2
   1a77c:	213f9004 	addi	r4,r4,-448
   1a780:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1a784:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1a788:	010000b4 	movhi	r4,2
   1a78c:	2103ab04 	addi	r4,r4,3756
   1a790:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1a794:	010000b4 	movhi	r4,2
   1a798:	2103b704 	addi	r4,r4,3804
   1a79c:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1a7a0:	010000b4 	movhi	r4,2
   1a7a4:	2103c304 	addi	r4,r4,3852
   1a7a8:	001b9ec0 	call	1b9ec <alt_up_character_lcd_init>
   1a7ac:	010000b4 	movhi	r4,2
   1a7b0:	2103c304 	addi	r4,r4,3852
   1a7b4:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1a7b8:	010000b4 	movhi	r4,2
   1a7bc:	2103ce04 	addi	r4,r4,3896
   1a7c0:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1a7c4:	010000b4 	movhi	r4,2
   1a7c8:	2103d904 	addi	r4,r4,3940
   1a7cc:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1a7d0:	010000b4 	movhi	r4,2
   1a7d4:	2103e404 	addi	r4,r4,3984
   1a7d8:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1a7dc:	010000b4 	movhi	r4,2
   1a7e0:	2103ef04 	addi	r4,r4,4028
   1a7e4:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1a7e8:	010000b4 	movhi	r4,2
   1a7ec:	2103fa04 	addi	r4,r4,4072
   1a7f0:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1a7f4:	010000b4 	movhi	r4,2
   1a7f8:	21040504 	addi	r4,r4,4116
   1a7fc:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1a800:	010000b4 	movhi	r4,2
   1a804:	21041004 	addi	r4,r4,4160
   1a808:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1a80c:	010000b4 	movhi	r4,2
   1a810:	21041b04 	addi	r4,r4,4204
   1a814:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1a818:	010000b4 	movhi	r4,2
   1a81c:	21042604 	addi	r4,r4,4248
   1a820:	001c2c40 	call	1c2c4 <alt_up_ps2_init>
   1a824:	010000b4 	movhi	r4,2
   1a828:	21042604 	addi	r4,r4,4248
   1a82c:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1a830:	010000b4 	movhi	r4,2
   1a834:	21043404 	addi	r4,r4,4304
   1a838:	001c2c40 	call	1c2c4 <alt_up_ps2_init>
   1a83c:	010000b4 	movhi	r4,2
   1a840:	21043404 	addi	r4,r4,4304
   1a844:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
   1a848:	010000b4 	movhi	r4,2
   1a84c:	21044204 	addi	r4,r4,4360
   1a850:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1a854:	010000b4 	movhi	r4,2
   1a858:	21044d04 	addi	r4,r4,4404
   1a85c:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1a860:	010000b4 	movhi	r4,2
   1a864:	21045804 	addi	r4,r4,4448
   1a868:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1a86c:	008000b4 	movhi	r2,2
   1a870:	10846504 	addi	r2,r2,4500
   1a874:	10800a17 	ldw	r2,40(r2)
   1a878:	10800104 	addi	r2,r2,4
   1a87c:	10800017 	ldw	r2,0(r2)
   1a880:	10ffffcc 	andi	r3,r2,65535
   1a884:	008000b4 	movhi	r2,2
   1a888:	10846504 	addi	r2,r2,4500
   1a88c:	10c00c15 	stw	r3,48(r2)
   1a890:	008000b4 	movhi	r2,2
   1a894:	10846504 	addi	r2,r2,4500
   1a898:	10800a17 	ldw	r2,40(r2)
   1a89c:	10800104 	addi	r2,r2,4
   1a8a0:	10800017 	ldw	r2,0(r2)
   1a8a4:	1006d43a 	srli	r3,r2,16
   1a8a8:	008000b4 	movhi	r2,2
   1a8ac:	10846504 	addi	r2,r2,4500
   1a8b0:	10c00d15 	stw	r3,52(r2)
   1a8b4:	008000b4 	movhi	r2,2
   1a8b8:	10846504 	addi	r2,r2,4500
   1a8bc:	10800c17 	ldw	r2,48(r2)
   1a8c0:	10801068 	cmpgeui	r2,r2,65
   1a8c4:	1000081e 	bne	r2,zero,1a8e8 <alt_sys_init+0x1ac>
   1a8c8:	008000b4 	movhi	r2,2
   1a8cc:	10846504 	addi	r2,r2,4500
   1a8d0:	00c00fc4 	movi	r3,63
   1a8d4:	10c00f15 	stw	r3,60(r2)
   1a8d8:	008000b4 	movhi	r2,2
   1a8dc:	10846504 	addi	r2,r2,4500
   1a8e0:	00c00184 	movi	r3,6
   1a8e4:	10c01015 	stw	r3,64(r2)
   1a8e8:	008000b4 	movhi	r2,2
   1a8ec:	10846504 	addi	r2,r2,4500
   1a8f0:	10800d17 	ldw	r2,52(r2)
   1a8f4:	10800868 	cmpgeui	r2,r2,33
   1a8f8:	1000041e 	bne	r2,zero,1a90c <alt_sys_init+0x1d0>
   1a8fc:	008000b4 	movhi	r2,2
   1a900:	10846504 	addi	r2,r2,4500
   1a904:	00c007c4 	movi	r3,31
   1a908:	10c01115 	stw	r3,68(r2)
   1a90c:	010000b4 	movhi	r4,2
   1a910:	21046504 	addi	r4,r4,4500
   1a914:	001cbdc0 	call	1cbdc <alt_up_char_buffer_init>
   1a918:	010000b4 	movhi	r4,2
   1a91c:	21046504 	addi	r4,r4,4500
   1a920:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1a924:	008000b4 	movhi	r2,2
   1a928:	10847704 	addi	r2,r2,4572
   1a92c:	10800a17 	ldw	r2,40(r2)
   1a930:	10800017 	ldw	r2,0(r2)
   1a934:	1007883a 	mov	r3,r2
   1a938:	008000b4 	movhi	r2,2
   1a93c:	10847704 	addi	r2,r2,4572
   1a940:	10c00b15 	stw	r3,44(r2)
   1a944:	008000b4 	movhi	r2,2
   1a948:	10847704 	addi	r2,r2,4572
   1a94c:	10800a17 	ldw	r2,40(r2)
   1a950:	10800104 	addi	r2,r2,4
   1a954:	10800017 	ldw	r2,0(r2)
   1a958:	1007883a 	mov	r3,r2
   1a95c:	008000b4 	movhi	r2,2
   1a960:	10847704 	addi	r2,r2,4572
   1a964:	10c00c15 	stw	r3,48(r2)
   1a968:	008000b4 	movhi	r2,2
   1a96c:	10847704 	addi	r2,r2,4572
   1a970:	10800a17 	ldw	r2,40(r2)
   1a974:	10800204 	addi	r2,r2,8
   1a978:	10800017 	ldw	r2,0(r2)
   1a97c:	10ffffcc 	andi	r3,r2,65535
   1a980:	008000b4 	movhi	r2,2
   1a984:	10847704 	addi	r2,r2,4572
   1a988:	10c00f15 	stw	r3,60(r2)
   1a98c:	008000b4 	movhi	r2,2
   1a990:	10847704 	addi	r2,r2,4572
   1a994:	10800a17 	ldw	r2,40(r2)
   1a998:	10800204 	addi	r2,r2,8
   1a99c:	10800017 	ldw	r2,0(r2)
   1a9a0:	1006d43a 	srli	r3,r2,16
   1a9a4:	008000b4 	movhi	r2,2
   1a9a8:	10847704 	addi	r2,r2,4572
   1a9ac:	10c01015 	stw	r3,64(r2)
   1a9b0:	008000b4 	movhi	r2,2
   1a9b4:	10847704 	addi	r2,r2,4572
   1a9b8:	10800a17 	ldw	r2,40(r2)
   1a9bc:	10800304 	addi	r2,r2,12
   1a9c0:	10800017 	ldw	r2,0(r2)
   1a9c4:	1005d07a 	srai	r2,r2,1
   1a9c8:	10c0004c 	andi	r3,r2,1
   1a9cc:	008000b4 	movhi	r2,2
   1a9d0:	10847704 	addi	r2,r2,4572
   1a9d4:	10c00d15 	stw	r3,52(r2)
   1a9d8:	008000b4 	movhi	r2,2
   1a9dc:	10847704 	addi	r2,r2,4572
   1a9e0:	10800a17 	ldw	r2,40(r2)
   1a9e4:	10800304 	addi	r2,r2,12
   1a9e8:	10800017 	ldw	r2,0(r2)
   1a9ec:	1005d13a 	srai	r2,r2,4
   1a9f0:	10c003cc 	andi	r3,r2,15
   1a9f4:	008000b4 	movhi	r2,2
   1a9f8:	10847704 	addi	r2,r2,4572
   1a9fc:	10c00e15 	stw	r3,56(r2)
   1aa00:	008000b4 	movhi	r2,2
   1aa04:	10847704 	addi	r2,r2,4572
   1aa08:	10800a17 	ldw	r2,40(r2)
   1aa0c:	10800304 	addi	r2,r2,12
   1aa10:	10800017 	ldw	r2,0(r2)
   1aa14:	1005d43a 	srai	r2,r2,16
   1aa18:	e0bfff05 	stb	r2,-4(fp)
   1aa1c:	008000b4 	movhi	r2,2
   1aa20:	10847704 	addi	r2,r2,4572
   1aa24:	10800a17 	ldw	r2,40(r2)
   1aa28:	10800304 	addi	r2,r2,12
   1aa2c:	10800017 	ldw	r2,0(r2)
   1aa30:	1004d63a 	srli	r2,r2,24
   1aa34:	e0bfff45 	stb	r2,-3(fp)
   1aa38:	008000b4 	movhi	r2,2
   1aa3c:	10847704 	addi	r2,r2,4572
   1aa40:	10800e17 	ldw	r2,56(r2)
   1aa44:	10800058 	cmpnei	r2,r2,1
   1aa48:	1000041e 	bne	r2,zero,1aa5c <alt_sys_init+0x320>
   1aa4c:	008000b4 	movhi	r2,2
   1aa50:	10847704 	addi	r2,r2,4572
   1aa54:	10001115 	stw	zero,68(r2)
   1aa58:	00000e06 	br	1aa94 <alt_sys_init+0x358>
   1aa5c:	008000b4 	movhi	r2,2
   1aa60:	10847704 	addi	r2,r2,4572
   1aa64:	10800e17 	ldw	r2,56(r2)
   1aa68:	10800098 	cmpnei	r2,r2,2
   1aa6c:	1000051e 	bne	r2,zero,1aa84 <alt_sys_init+0x348>
   1aa70:	008000b4 	movhi	r2,2
   1aa74:	10847704 	addi	r2,r2,4572
   1aa78:	00c00044 	movi	r3,1
   1aa7c:	10c01115 	stw	r3,68(r2)
   1aa80:	00000406 	br	1aa94 <alt_sys_init+0x358>
   1aa84:	008000b4 	movhi	r2,2
   1aa88:	10847704 	addi	r2,r2,4572
   1aa8c:	00c00084 	movi	r3,2
   1aa90:	10c01115 	stw	r3,68(r2)
   1aa94:	e0bfff03 	ldbu	r2,-4(fp)
   1aa98:	00c00804 	movi	r3,32
   1aa9c:	1885c83a 	sub	r2,r3,r2
   1aaa0:	00ffffc4 	movi	r3,-1
   1aaa4:	1886d83a 	srl	r3,r3,r2
   1aaa8:	008000b4 	movhi	r2,2
   1aaac:	10847704 	addi	r2,r2,4572
   1aab0:	10c01215 	stw	r3,72(r2)
   1aab4:	e0ffff03 	ldbu	r3,-4(fp)
   1aab8:	008000b4 	movhi	r2,2
   1aabc:	10847704 	addi	r2,r2,4572
   1aac0:	10801117 	ldw	r2,68(r2)
   1aac4:	1887883a 	add	r3,r3,r2
   1aac8:	008000b4 	movhi	r2,2
   1aacc:	10847704 	addi	r2,r2,4572
   1aad0:	10c01315 	stw	r3,76(r2)
   1aad4:	e0bfff43 	ldbu	r2,-3(fp)
   1aad8:	00c00804 	movi	r3,32
   1aadc:	1885c83a 	sub	r2,r3,r2
   1aae0:	00ffffc4 	movi	r3,-1
   1aae4:	1886d83a 	srl	r3,r3,r2
   1aae8:	008000b4 	movhi	r2,2
   1aaec:	10847704 	addi	r2,r2,4572
   1aaf0:	10c01415 	stw	r3,80(r2)
   1aaf4:	010000b4 	movhi	r4,2
   1aaf8:	21047704 	addi	r4,r4,4572
   1aafc:	001a6d00 	call	1a6d0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1ab00:	010000b4 	movhi	r4,2
   1ab04:	21048c04 	addi	r4,r4,4656
   1ab08:	001a6d00 	call	1a6d0 <alt_dev_reg>
}
   1ab0c:	e037883a 	mov	sp,fp
   1ab10:	dfc00117 	ldw	ra,4(sp)
   1ab14:	df000017 	ldw	fp,0(sp)
   1ab18:	dec00204 	addi	sp,sp,8
   1ab1c:	f800283a 	ret

0001ab20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1ab20:	defffa04 	addi	sp,sp,-24
   1ab24:	dfc00515 	stw	ra,20(sp)
   1ab28:	df000415 	stw	fp,16(sp)
   1ab2c:	df000404 	addi	fp,sp,16
   1ab30:	e13ffd15 	stw	r4,-12(fp)
   1ab34:	e17ffe15 	stw	r5,-8(fp)
   1ab38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ab3c:	e0bffd17 	ldw	r2,-12(fp)
   1ab40:	10800017 	ldw	r2,0(r2)
   1ab44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1ab48:	e0bffc17 	ldw	r2,-16(fp)
   1ab4c:	10c00a04 	addi	r3,r2,40
   1ab50:	e0bffd17 	ldw	r2,-12(fp)
   1ab54:	10800217 	ldw	r2,8(r2)
   1ab58:	1809883a 	mov	r4,r3
   1ab5c:	e17ffe17 	ldw	r5,-8(fp)
   1ab60:	e1bfff17 	ldw	r6,-4(fp)
   1ab64:	100f883a 	mov	r7,r2
   1ab68:	001b2d00 	call	1b2d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1ab6c:	e037883a 	mov	sp,fp
   1ab70:	dfc00117 	ldw	ra,4(sp)
   1ab74:	df000017 	ldw	fp,0(sp)
   1ab78:	dec00204 	addi	sp,sp,8
   1ab7c:	f800283a 	ret

0001ab80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1ab80:	defffa04 	addi	sp,sp,-24
   1ab84:	dfc00515 	stw	ra,20(sp)
   1ab88:	df000415 	stw	fp,16(sp)
   1ab8c:	df000404 	addi	fp,sp,16
   1ab90:	e13ffd15 	stw	r4,-12(fp)
   1ab94:	e17ffe15 	stw	r5,-8(fp)
   1ab98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ab9c:	e0bffd17 	ldw	r2,-12(fp)
   1aba0:	10800017 	ldw	r2,0(r2)
   1aba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1aba8:	e0bffc17 	ldw	r2,-16(fp)
   1abac:	10c00a04 	addi	r3,r2,40
   1abb0:	e0bffd17 	ldw	r2,-12(fp)
   1abb4:	10800217 	ldw	r2,8(r2)
   1abb8:	1809883a 	mov	r4,r3
   1abbc:	e17ffe17 	ldw	r5,-8(fp)
   1abc0:	e1bfff17 	ldw	r6,-4(fp)
   1abc4:	100f883a 	mov	r7,r2
   1abc8:	001b5840 	call	1b584 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1abcc:	e037883a 	mov	sp,fp
   1abd0:	dfc00117 	ldw	ra,4(sp)
   1abd4:	df000017 	ldw	fp,0(sp)
   1abd8:	dec00204 	addi	sp,sp,8
   1abdc:	f800283a 	ret

0001abe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1abe0:	defffc04 	addi	sp,sp,-16
   1abe4:	dfc00315 	stw	ra,12(sp)
   1abe8:	df000215 	stw	fp,8(sp)
   1abec:	df000204 	addi	fp,sp,8
   1abf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1abf4:	e0bfff17 	ldw	r2,-4(fp)
   1abf8:	10800017 	ldw	r2,0(r2)
   1abfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1ac00:	e0bffe17 	ldw	r2,-8(fp)
   1ac04:	10c00a04 	addi	r3,r2,40
   1ac08:	e0bfff17 	ldw	r2,-4(fp)
   1ac0c:	10800217 	ldw	r2,8(r2)
   1ac10:	1809883a 	mov	r4,r3
   1ac14:	100b883a 	mov	r5,r2
   1ac18:	001b17c0 	call	1b17c <altera_avalon_jtag_uart_close>
}
   1ac1c:	e037883a 	mov	sp,fp
   1ac20:	dfc00117 	ldw	ra,4(sp)
   1ac24:	df000017 	ldw	fp,0(sp)
   1ac28:	dec00204 	addi	sp,sp,8
   1ac2c:	f800283a 	ret

0001ac30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1ac30:	defffa04 	addi	sp,sp,-24
   1ac34:	dfc00515 	stw	ra,20(sp)
   1ac38:	df000415 	stw	fp,16(sp)
   1ac3c:	df000404 	addi	fp,sp,16
   1ac40:	e13ffd15 	stw	r4,-12(fp)
   1ac44:	e17ffe15 	stw	r5,-8(fp)
   1ac48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1ac4c:	e0bffd17 	ldw	r2,-12(fp)
   1ac50:	10800017 	ldw	r2,0(r2)
   1ac54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1ac58:	e0bffc17 	ldw	r2,-16(fp)
   1ac5c:	10800a04 	addi	r2,r2,40
   1ac60:	1009883a 	mov	r4,r2
   1ac64:	e17ffe17 	ldw	r5,-8(fp)
   1ac68:	e1bfff17 	ldw	r6,-4(fp)
   1ac6c:	001b1e40 	call	1b1e4 <altera_avalon_jtag_uart_ioctl>
}
   1ac70:	e037883a 	mov	sp,fp
   1ac74:	dfc00117 	ldw	ra,4(sp)
   1ac78:	df000017 	ldw	fp,0(sp)
   1ac7c:	dec00204 	addi	sp,sp,8
   1ac80:	f800283a 	ret

0001ac84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ac84:	defff104 	addi	sp,sp,-60
   1ac88:	dfc00e15 	stw	ra,56(sp)
   1ac8c:	df000d15 	stw	fp,52(sp)
   1ac90:	df000d04 	addi	fp,sp,52
   1ac94:	e13ff915 	stw	r4,-28(fp)
   1ac98:	e17ffa15 	stw	r5,-24(fp)
   1ac9c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1aca0:	e0bff917 	ldw	r2,-28(fp)
   1aca4:	10800c04 	addi	r2,r2,48
   1aca8:	e0bff315 	stw	r2,-52(fp)
   1acac:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1acb0:	e0fff40b 	ldhu	r3,-48(fp)
   1acb4:	e0bff884 	addi	r2,fp,-30
   1acb8:	1809883a 	mov	r4,r3
   1acbc:	100b883a 	mov	r5,r2
   1acc0:	001433c0 	call	1433c <OSFlagCreate>
   1acc4:	1007883a 	mov	r3,r2
   1acc8:	e0bff317 	ldw	r2,-52(fp)
   1accc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1acd0:	e0bff917 	ldw	r2,-28(fp)
   1acd4:	10800a04 	addi	r2,r2,40
   1acd8:	e0bff515 	stw	r2,-44(fp)
   1acdc:	00800044 	movi	r2,1
   1ace0:	e0bff60d 	sth	r2,-40(fp)
   1ace4:	e0bff60b 	ldhu	r2,-40(fp)
   1ace8:	1009883a 	mov	r4,r2
   1acec:	0017e1c0 	call	17e1c <OSSemCreate>
   1acf0:	1007883a 	mov	r3,r2
   1acf4:	e0bff517 	ldw	r2,-44(fp)
   1acf8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1acfc:	e0bff917 	ldw	r2,-28(fp)
   1ad00:	10800b04 	addi	r2,r2,44
   1ad04:	e0bff715 	stw	r2,-36(fp)
   1ad08:	00800044 	movi	r2,1
   1ad0c:	e0bff80d 	sth	r2,-32(fp)
   1ad10:	e0bff80b 	ldhu	r2,-32(fp)
   1ad14:	1009883a 	mov	r4,r2
   1ad18:	0017e1c0 	call	17e1c <OSSemCreate>
   1ad1c:	1007883a 	mov	r3,r2
   1ad20:	e0bff717 	ldw	r2,-36(fp)
   1ad24:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ad28:	e0bff917 	ldw	r2,-28(fp)
   1ad2c:	00c00044 	movi	r3,1
   1ad30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ad34:	e0bff917 	ldw	r2,-28(fp)
   1ad38:	10800017 	ldw	r2,0(r2)
   1ad3c:	10800104 	addi	r2,r2,4
   1ad40:	1007883a 	mov	r3,r2
   1ad44:	e0bff917 	ldw	r2,-28(fp)
   1ad48:	10800817 	ldw	r2,32(r2)
   1ad4c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1ad50:	e0bffb17 	ldw	r2,-20(fp)
   1ad54:	1009883a 	mov	r4,r2
   1ad58:	e17ff917 	ldw	r5,-28(fp)
   1ad5c:	018000b4 	movhi	r6,2
   1ad60:	31ab7104 	addi	r6,r6,-21052
   1ad64:	001d9a00 	call	1d9a0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ad68:	e0bff917 	ldw	r2,-28(fp)
   1ad6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ad70:	e0bff917 	ldw	r2,-28(fp)
   1ad74:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ad78:	008000b4 	movhi	r2,2
   1ad7c:	108e4604 	addi	r2,r2,14616
   1ad80:	10800017 	ldw	r2,0(r2)
   1ad84:	1809883a 	mov	r4,r3
   1ad88:	100b883a 	mov	r5,r2
   1ad8c:	018000b4 	movhi	r6,2
   1ad90:	31ac1b04 	addi	r6,r6,-20372
   1ad94:	e1fff917 	ldw	r7,-28(fp)
   1ad98:	001d4a00 	call	1d4a0 <alt_alarm_start>
   1ad9c:	1000040e 	bge	r2,zero,1adb0 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1ada0:	e0fff917 	ldw	r3,-28(fp)
   1ada4:	00a00034 	movhi	r2,32768
   1ada8:	10bfffc4 	addi	r2,r2,-1
   1adac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1adb0:	e037883a 	mov	sp,fp
   1adb4:	dfc00117 	ldw	ra,4(sp)
   1adb8:	df000017 	ldw	fp,0(sp)
   1adbc:	dec00204 	addi	sp,sp,8
   1adc0:	f800283a 	ret

0001adc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1adc4:	defff104 	addi	sp,sp,-60
   1adc8:	dfc00e15 	stw	ra,56(sp)
   1adcc:	df000d15 	stw	fp,52(sp)
   1add0:	df000d04 	addi	fp,sp,52
   1add4:	e13ffe15 	stw	r4,-8(fp)
   1add8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1addc:	e0bffe17 	ldw	r2,-8(fp)
   1ade0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1ade4:	e0bff517 	ldw	r2,-44(fp)
   1ade8:	10800017 	ldw	r2,0(r2)
   1adec:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1adf0:	e0bff617 	ldw	r2,-40(fp)
   1adf4:	10800104 	addi	r2,r2,4
   1adf8:	10800037 	ldwio	r2,0(r2)
   1adfc:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ae00:	e0bff717 	ldw	r2,-36(fp)
   1ae04:	1080c00c 	andi	r2,r2,768
   1ae08:	1000011e 	bne	r2,zero,1ae10 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1ae0c:	00009206 	br	1b058 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ae10:	e0bff717 	ldw	r2,-36(fp)
   1ae14:	1080400c 	andi	r2,r2,256
   1ae18:	10004726 	beq	r2,zero,1af38 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ae1c:	00800074 	movhi	r2,1
   1ae20:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae24:	e0bff517 	ldw	r2,-44(fp)
   1ae28:	10800d17 	ldw	r2,52(r2)
   1ae2c:	10800044 	addi	r2,r2,1
   1ae30:	1081ffcc 	andi	r2,r2,2047
   1ae34:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1ae38:	e0bff517 	ldw	r2,-44(fp)
   1ae3c:	10c00e17 	ldw	r3,56(r2)
   1ae40:	e0bff817 	ldw	r2,-32(fp)
   1ae44:	1880011e 	bne	r3,r2,1ae4c <altera_avalon_jtag_uart_irq+0x88>
          break;
   1ae48:	00002906 	br	1aef0 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ae4c:	e0bff617 	ldw	r2,-40(fp)
   1ae50:	10800037 	ldwio	r2,0(r2)
   1ae54:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ae58:	e0bff317 	ldw	r2,-52(fp)
   1ae5c:	10a0000c 	andi	r2,r2,32768
   1ae60:	1000011e 	bne	r2,zero,1ae68 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1ae64:	00002206 	br	1aef0 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ae68:	e0bff517 	ldw	r2,-44(fp)
   1ae6c:	10800d17 	ldw	r2,52(r2)
   1ae70:	e0fff317 	ldw	r3,-52(fp)
   1ae74:	1809883a 	mov	r4,r3
   1ae78:	e0fff517 	ldw	r3,-44(fp)
   1ae7c:	1885883a 	add	r2,r3,r2
   1ae80:	10801104 	addi	r2,r2,68
   1ae84:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae88:	e0bff517 	ldw	r2,-44(fp)
   1ae8c:	10800d17 	ldw	r2,52(r2)
   1ae90:	10800044 	addi	r2,r2,1
   1ae94:	10c1ffcc 	andi	r3,r2,2047
   1ae98:	e0bff517 	ldw	r2,-44(fp)
   1ae9c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1aea0:	e0bff517 	ldw	r2,-44(fp)
   1aea4:	10800c17 	ldw	r2,48(r2)
   1aea8:	e0bff915 	stw	r2,-28(fp)
   1aeac:	00800044 	movi	r2,1
   1aeb0:	e0bffa0d 	sth	r2,-24(fp)
   1aeb4:	00800044 	movi	r2,1
   1aeb8:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1aebc:	008000b4 	movhi	r2,2
   1aec0:	108e3044 	addi	r2,r2,14529
   1aec4:	10800003 	ldbu	r2,0(r2)
   1aec8:	10803fcc 	andi	r2,r2,255
   1aecc:	103fd526 	beq	r2,zero,1ae24 <__alt_mem_Flash_flash_data+0xf401ae24>
  {
    OSFlagPost (group, flags, opt, &err);
   1aed0:	e17ffa0b 	ldhu	r5,-24(fp)
   1aed4:	e0fffa83 	ldbu	r3,-22(fp)
   1aed8:	e0bffcc4 	addi	r2,fp,-13
   1aedc:	e13ff917 	ldw	r4,-28(fp)
   1aee0:	180d883a 	mov	r6,r3
   1aee4:	100f883a 	mov	r7,r2
   1aee8:	0014fac0 	call	14fac <OSFlagPost>
      }
   1aeec:	003fcd06 	br	1ae24 <__alt_mem_Flash_flash_data+0xf401ae24>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1aef0:	e0bff317 	ldw	r2,-52(fp)
   1aef4:	10bfffec 	andhi	r2,r2,65535
   1aef8:	10000f26 	beq	r2,zero,1af38 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1aefc:	e0bff517 	ldw	r2,-44(fp)
   1af00:	10c00817 	ldw	r3,32(r2)
   1af04:	00bfff84 	movi	r2,-2
   1af08:	1886703a 	and	r3,r3,r2
   1af0c:	e0bff517 	ldw	r2,-44(fp)
   1af10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1af14:	e0bff617 	ldw	r2,-40(fp)
   1af18:	10800104 	addi	r2,r2,4
   1af1c:	1007883a 	mov	r3,r2
   1af20:	e0bff517 	ldw	r2,-44(fp)
   1af24:	10800817 	ldw	r2,32(r2)
   1af28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1af2c:	e0bff617 	ldw	r2,-40(fp)
   1af30:	10800104 	addi	r2,r2,4
   1af34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1af38:	e0bff717 	ldw	r2,-36(fp)
   1af3c:	1080800c 	andi	r2,r2,512
   1af40:	10004426 	beq	r2,zero,1b054 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1af44:	e0bff717 	ldw	r2,-36(fp)
   1af48:	1004d43a 	srli	r2,r2,16
   1af4c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1af50:	00002706 	br	1aff0 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1af54:	e0bff617 	ldw	r2,-40(fp)
   1af58:	e0fff517 	ldw	r3,-44(fp)
   1af5c:	18c01017 	ldw	r3,64(r3)
   1af60:	e13ff517 	ldw	r4,-44(fp)
   1af64:	20c7883a 	add	r3,r4,r3
   1af68:	18c21104 	addi	r3,r3,2116
   1af6c:	18c00003 	ldbu	r3,0(r3)
   1af70:	18c03fcc 	andi	r3,r3,255
   1af74:	18c0201c 	xori	r3,r3,128
   1af78:	18ffe004 	addi	r3,r3,-128
   1af7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1af80:	e0bff517 	ldw	r2,-44(fp)
   1af84:	10801017 	ldw	r2,64(r2)
   1af88:	10800044 	addi	r2,r2,1
   1af8c:	10c1ffcc 	andi	r3,r2,2047
   1af90:	e0bff517 	ldw	r2,-44(fp)
   1af94:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1af98:	e0bff517 	ldw	r2,-44(fp)
   1af9c:	10800c17 	ldw	r2,48(r2)
   1afa0:	e0bffb15 	stw	r2,-20(fp)
   1afa4:	00800084 	movi	r2,2
   1afa8:	e0bffc0d 	sth	r2,-16(fp)
   1afac:	00800044 	movi	r2,1
   1afb0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1afb4:	008000b4 	movhi	r2,2
   1afb8:	108e3044 	addi	r2,r2,14529
   1afbc:	10800003 	ldbu	r2,0(r2)
   1afc0:	10803fcc 	andi	r2,r2,255
   1afc4:	10000726 	beq	r2,zero,1afe4 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1afc8:	e17ffc0b 	ldhu	r5,-16(fp)
   1afcc:	e0fffc83 	ldbu	r3,-14(fp)
   1afd0:	e0bffd04 	addi	r2,fp,-12
   1afd4:	e13ffb17 	ldw	r4,-20(fp)
   1afd8:	180d883a 	mov	r6,r3
   1afdc:	100f883a 	mov	r7,r2
   1afe0:	0014fac0 	call	14fac <OSFlagPost>

        space--;
   1afe4:	e0bff417 	ldw	r2,-48(fp)
   1afe8:	10bfffc4 	addi	r2,r2,-1
   1afec:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1aff0:	e0bff417 	ldw	r2,-48(fp)
   1aff4:	10000526 	beq	r2,zero,1b00c <altera_avalon_jtag_uart_irq+0x248>
   1aff8:	e0bff517 	ldw	r2,-44(fp)
   1affc:	10c01017 	ldw	r3,64(r2)
   1b000:	e0bff517 	ldw	r2,-44(fp)
   1b004:	10800f17 	ldw	r2,60(r2)
   1b008:	18bfd21e 	bne	r3,r2,1af54 <__alt_mem_Flash_flash_data+0xf401af54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b00c:	e0bff417 	ldw	r2,-48(fp)
   1b010:	10001026 	beq	r2,zero,1b054 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b014:	e0bff517 	ldw	r2,-44(fp)
   1b018:	10c00817 	ldw	r3,32(r2)
   1b01c:	00bfff44 	movi	r2,-3
   1b020:	1886703a 	and	r3,r3,r2
   1b024:	e0bff517 	ldw	r2,-44(fp)
   1b028:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b02c:	e0bff517 	ldw	r2,-44(fp)
   1b030:	10800017 	ldw	r2,0(r2)
   1b034:	10800104 	addi	r2,r2,4
   1b038:	1007883a 	mov	r3,r2
   1b03c:	e0bff517 	ldw	r2,-44(fp)
   1b040:	10800817 	ldw	r2,32(r2)
   1b044:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b048:	e0bff617 	ldw	r2,-40(fp)
   1b04c:	10800104 	addi	r2,r2,4
   1b050:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b054:	003f6606 	br	1adf0 <__alt_mem_Flash_flash_data+0xf401adf0>
}
   1b058:	e037883a 	mov	sp,fp
   1b05c:	dfc00117 	ldw	ra,4(sp)
   1b060:	df000017 	ldw	fp,0(sp)
   1b064:	dec00204 	addi	sp,sp,8
   1b068:	f800283a 	ret

0001b06c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1b06c:	defff904 	addi	sp,sp,-28
   1b070:	dfc00615 	stw	ra,24(sp)
   1b074:	df000515 	stw	fp,20(sp)
   1b078:	df000504 	addi	fp,sp,20
   1b07c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1b080:	e0bfff17 	ldw	r2,-4(fp)
   1b084:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b088:	e0bffb17 	ldw	r2,-20(fp)
   1b08c:	10800017 	ldw	r2,0(r2)
   1b090:	10800104 	addi	r2,r2,4
   1b094:	10800037 	ldwio	r2,0(r2)
   1b098:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b09c:	e0bffc17 	ldw	r2,-16(fp)
   1b0a0:	1081000c 	andi	r2,r2,1024
   1b0a4:	10000b26 	beq	r2,zero,1b0d4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b0a8:	e0bffb17 	ldw	r2,-20(fp)
   1b0ac:	10800017 	ldw	r2,0(r2)
   1b0b0:	10800104 	addi	r2,r2,4
   1b0b4:	1007883a 	mov	r3,r2
   1b0b8:	e0bffb17 	ldw	r2,-20(fp)
   1b0bc:	10800817 	ldw	r2,32(r2)
   1b0c0:	10810014 	ori	r2,r2,1024
   1b0c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1b0c8:	e0bffb17 	ldw	r2,-20(fp)
   1b0cc:	10000915 	stw	zero,36(r2)
   1b0d0:	00002206 	br	1b15c <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b0d4:	e0bffb17 	ldw	r2,-20(fp)
   1b0d8:	10c00917 	ldw	r3,36(r2)
   1b0dc:	00a00034 	movhi	r2,32768
   1b0e0:	10bfff04 	addi	r2,r2,-4
   1b0e4:	10c01d36 	bltu	r2,r3,1b15c <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1b0e8:	e0bffb17 	ldw	r2,-20(fp)
   1b0ec:	10800917 	ldw	r2,36(r2)
   1b0f0:	10c00044 	addi	r3,r2,1
   1b0f4:	e0bffb17 	ldw	r2,-20(fp)
   1b0f8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1b0fc:	e0bffb17 	ldw	r2,-20(fp)
   1b100:	10c00917 	ldw	r3,36(r2)
   1b104:	e0bffb17 	ldw	r2,-20(fp)
   1b108:	10800117 	ldw	r2,4(r2)
   1b10c:	18801336 	bltu	r3,r2,1b15c <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1b110:	e0bffb17 	ldw	r2,-20(fp)
   1b114:	10800c17 	ldw	r2,48(r2)
   1b118:	e0bffd15 	stw	r2,-12(fp)
   1b11c:	00800104 	movi	r2,4
   1b120:	e0bffe0d 	sth	r2,-8(fp)
   1b124:	00800044 	movi	r2,1
   1b128:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b12c:	008000b4 	movhi	r2,2
   1b130:	108e3044 	addi	r2,r2,14529
   1b134:	10800003 	ldbu	r2,0(r2)
   1b138:	10803fcc 	andi	r2,r2,255
   1b13c:	10000726 	beq	r2,zero,1b15c <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1b140:	e17ffe0b 	ldhu	r5,-8(fp)
   1b144:	e0fffe83 	ldbu	r3,-6(fp)
   1b148:	e0bffec4 	addi	r2,fp,-5
   1b14c:	e13ffd17 	ldw	r4,-12(fp)
   1b150:	180d883a 	mov	r6,r3
   1b154:	100f883a 	mov	r7,r2
   1b158:	0014fac0 	call	14fac <OSFlagPost>
   1b15c:	008000b4 	movhi	r2,2
   1b160:	108e4604 	addi	r2,r2,14616
   1b164:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1b168:	e037883a 	mov	sp,fp
   1b16c:	dfc00117 	ldw	ra,4(sp)
   1b170:	df000017 	ldw	fp,0(sp)
   1b174:	dec00204 	addi	sp,sp,8
   1b178:	f800283a 	ret

0001b17c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b17c:	defffd04 	addi	sp,sp,-12
   1b180:	df000215 	stw	fp,8(sp)
   1b184:	df000204 	addi	fp,sp,8
   1b188:	e13ffe15 	stw	r4,-8(fp)
   1b18c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b190:	00000506 	br	1b1a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1b194:	e0bfff17 	ldw	r2,-4(fp)
   1b198:	1090000c 	andi	r2,r2,16384
   1b19c:	10000226 	beq	r2,zero,1b1a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1b1a0:	00bffd44 	movi	r2,-11
   1b1a4:	00000b06 	br	1b1d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b1a8:	e0bffe17 	ldw	r2,-8(fp)
   1b1ac:	10c01017 	ldw	r3,64(r2)
   1b1b0:	e0bffe17 	ldw	r2,-8(fp)
   1b1b4:	10800f17 	ldw	r2,60(r2)
   1b1b8:	18800526 	beq	r3,r2,1b1d0 <altera_avalon_jtag_uart_close+0x54>
   1b1bc:	e0bffe17 	ldw	r2,-8(fp)
   1b1c0:	10c00917 	ldw	r3,36(r2)
   1b1c4:	e0bffe17 	ldw	r2,-8(fp)
   1b1c8:	10800117 	ldw	r2,4(r2)
   1b1cc:	18bff136 	bltu	r3,r2,1b194 <__alt_mem_Flash_flash_data+0xf401b194>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b1d0:	0005883a 	mov	r2,zero
}
   1b1d4:	e037883a 	mov	sp,fp
   1b1d8:	df000017 	ldw	fp,0(sp)
   1b1dc:	dec00104 	addi	sp,sp,4
   1b1e0:	f800283a 	ret

0001b1e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b1e4:	defffa04 	addi	sp,sp,-24
   1b1e8:	df000515 	stw	fp,20(sp)
   1b1ec:	df000504 	addi	fp,sp,20
   1b1f0:	e13ffd15 	stw	r4,-12(fp)
   1b1f4:	e17ffe15 	stw	r5,-8(fp)
   1b1f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1b1fc:	00bff9c4 	movi	r2,-25
   1b200:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1b204:	e0bffe17 	ldw	r2,-8(fp)
   1b208:	10da8060 	cmpeqi	r3,r2,27137
   1b20c:	1800031e 	bne	r3,zero,1b21c <altera_avalon_jtag_uart_ioctl+0x38>
   1b210:	109a80a0 	cmpeqi	r2,r2,27138
   1b214:	1000191e 	bne	r2,zero,1b27c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1b218:	00002806 	br	1b2bc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b21c:	e0bffd17 	ldw	r2,-12(fp)
   1b220:	10c00117 	ldw	r3,4(r2)
   1b224:	00a00034 	movhi	r2,32768
   1b228:	10bfffc4 	addi	r2,r2,-1
   1b22c:	18801226 	beq	r3,r2,1b278 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1b230:	e0bfff17 	ldw	r2,-4(fp)
   1b234:	10800017 	ldw	r2,0(r2)
   1b238:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b23c:	e0bffc17 	ldw	r2,-16(fp)
   1b240:	10800090 	cmplti	r2,r2,2
   1b244:	1000061e 	bne	r2,zero,1b260 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b248:	e0fffc17 	ldw	r3,-16(fp)
   1b24c:	00a00034 	movhi	r2,32768
   1b250:	10bfffc4 	addi	r2,r2,-1
   1b254:	18800226 	beq	r3,r2,1b260 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b258:	e0bffc17 	ldw	r2,-16(fp)
   1b25c:	00000206 	br	1b268 <altera_avalon_jtag_uart_ioctl+0x84>
   1b260:	00a00034 	movhi	r2,32768
   1b264:	10bfff84 	addi	r2,r2,-2
   1b268:	e0fffd17 	ldw	r3,-12(fp)
   1b26c:	18800115 	stw	r2,4(r3)
      rc = 0;
   1b270:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b274:	00001106 	br	1b2bc <altera_avalon_jtag_uart_ioctl+0xd8>
   1b278:	00001006 	br	1b2bc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b27c:	e0bffd17 	ldw	r2,-12(fp)
   1b280:	10c00117 	ldw	r3,4(r2)
   1b284:	00a00034 	movhi	r2,32768
   1b288:	10bfffc4 	addi	r2,r2,-1
   1b28c:	18800a26 	beq	r3,r2,1b2b8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b290:	e0bffd17 	ldw	r2,-12(fp)
   1b294:	10c00917 	ldw	r3,36(r2)
   1b298:	e0bffd17 	ldw	r2,-12(fp)
   1b29c:	10800117 	ldw	r2,4(r2)
   1b2a0:	1885803a 	cmpltu	r2,r3,r2
   1b2a4:	10c03fcc 	andi	r3,r2,255
   1b2a8:	e0bfff17 	ldw	r2,-4(fp)
   1b2ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1b2b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b2b4:	00000006 	br	1b2b8 <altera_avalon_jtag_uart_ioctl+0xd4>
   1b2b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1b2bc:	e0bffb17 	ldw	r2,-20(fp)
}
   1b2c0:	e037883a 	mov	sp,fp
   1b2c4:	df000017 	ldw	fp,0(sp)
   1b2c8:	dec00104 	addi	sp,sp,4
   1b2cc:	f800283a 	ret

0001b2d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b2d0:	deffec04 	addi	sp,sp,-80
   1b2d4:	dfc01315 	stw	ra,76(sp)
   1b2d8:	df001215 	stw	fp,72(sp)
   1b2dc:	df001204 	addi	fp,sp,72
   1b2e0:	e13ffc15 	stw	r4,-16(fp)
   1b2e4:	e17ffd15 	stw	r5,-12(fp)
   1b2e8:	e1bffe15 	stw	r6,-8(fp)
   1b2ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1b2f0:	e0bffd17 	ldw	r2,-12(fp)
   1b2f4:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1b2f8:	e0bffc17 	ldw	r2,-16(fp)
   1b2fc:	10800a17 	ldw	r2,40(r2)
   1b300:	e0bff415 	stw	r2,-48(fp)
   1b304:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1b308:	e0fff50b 	ldhu	r3,-44(fp)
   1b30c:	e0bffb04 	addi	r2,fp,-20
   1b310:	e13ff417 	ldw	r4,-48(fp)
   1b314:	180b883a 	mov	r5,r3
   1b318:	100d883a 	mov	r6,r2
   1b31c:	00181840 	call	18184 <OSSemPend>

  while (space > 0)
   1b320:	00006506 	br	1b4b8 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b324:	e0bffc17 	ldw	r2,-16(fp)
   1b328:	10800d17 	ldw	r2,52(r2)
   1b32c:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1b330:	e0bffc17 	ldw	r2,-16(fp)
   1b334:	10800e17 	ldw	r2,56(r2)
   1b338:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1b33c:	e0fff117 	ldw	r3,-60(fp)
   1b340:	e0bff217 	ldw	r2,-56(fp)
   1b344:	18800536 	bltu	r3,r2,1b35c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1b348:	e0fff117 	ldw	r3,-60(fp)
   1b34c:	e0bff217 	ldw	r2,-56(fp)
   1b350:	1885c83a 	sub	r2,r3,r2
   1b354:	e0bff015 	stw	r2,-64(fp)
   1b358:	00000406 	br	1b36c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b35c:	00c20004 	movi	r3,2048
   1b360:	e0bff217 	ldw	r2,-56(fp)
   1b364:	1885c83a 	sub	r2,r3,r2
   1b368:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1b36c:	e0bff017 	ldw	r2,-64(fp)
   1b370:	1000011e 	bne	r2,zero,1b378 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1b374:	00001d06 	br	1b3ec <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1b378:	e0fffe17 	ldw	r3,-8(fp)
   1b37c:	e0bff017 	ldw	r2,-64(fp)
   1b380:	1880022e 	bgeu	r3,r2,1b38c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1b384:	e0bffe17 	ldw	r2,-8(fp)
   1b388:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b38c:	e0bff217 	ldw	r2,-56(fp)
   1b390:	10801104 	addi	r2,r2,68
   1b394:	e0fffc17 	ldw	r3,-16(fp)
   1b398:	1885883a 	add	r2,r3,r2
   1b39c:	e13fef17 	ldw	r4,-68(fp)
   1b3a0:	100b883a 	mov	r5,r2
   1b3a4:	e1bff017 	ldw	r6,-64(fp)
   1b3a8:	00091500 	call	9150 <memcpy>
      ptr   += n;
   1b3ac:	e0ffef17 	ldw	r3,-68(fp)
   1b3b0:	e0bff017 	ldw	r2,-64(fp)
   1b3b4:	1885883a 	add	r2,r3,r2
   1b3b8:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1b3bc:	e0fffe17 	ldw	r3,-8(fp)
   1b3c0:	e0bff017 	ldw	r2,-64(fp)
   1b3c4:	1885c83a 	sub	r2,r3,r2
   1b3c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b3cc:	e0fff217 	ldw	r3,-56(fp)
   1b3d0:	e0bff017 	ldw	r2,-64(fp)
   1b3d4:	1885883a 	add	r2,r3,r2
   1b3d8:	10c1ffcc 	andi	r3,r2,2047
   1b3dc:	e0bffc17 	ldw	r2,-16(fp)
   1b3e0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1b3e4:	e0bffe17 	ldw	r2,-8(fp)
   1b3e8:	00bfce16 	blt	zero,r2,1b324 <__alt_mem_Flash_flash_data+0xf401b324>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b3ec:	e0ffef17 	ldw	r3,-68(fp)
   1b3f0:	e0bffd17 	ldw	r2,-12(fp)
   1b3f4:	18800126 	beq	r3,r2,1b3fc <altera_avalon_jtag_uart_read+0x12c>
      break;
   1b3f8:	00003106 	br	1b4c0 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b3fc:	e0bfff17 	ldw	r2,-4(fp)
   1b400:	1090000c 	andi	r2,r2,16384
   1b404:	10000126 	beq	r2,zero,1b40c <altera_avalon_jtag_uart_read+0x13c>
      break;
   1b408:	00002d06 	br	1b4c0 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1b40c:	008000b4 	movhi	r2,2
   1b410:	108e3044 	addi	r2,r2,14529
   1b414:	10800003 	ldbu	r2,0(r2)
   1b418:	10803fcc 	andi	r2,r2,255
   1b41c:	10800058 	cmpnei	r2,r2,1
   1b420:	1000161e 	bne	r2,zero,1b47c <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1b424:	e0bffc17 	ldw	r2,-16(fp)
   1b428:	10800c17 	ldw	r2,48(r2)
   1b42c:	e0bff615 	stw	r2,-40(fp)
   1b430:	00800144 	movi	r2,5
   1b434:	e0bff70d 	sth	r2,-36(fp)
   1b438:	00bfe0c4 	movi	r2,-125
   1b43c:	e0bff785 	stb	r2,-34(fp)
   1b440:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1b444:	008000b4 	movhi	r2,2
   1b448:	108e3044 	addi	r2,r2,14529
   1b44c:	10800003 	ldbu	r2,0(r2)
   1b450:	10803fcc 	andi	r2,r2,255
   1b454:	10001326 	beq	r2,zero,1b4a4 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1b458:	e17ff70b 	ldhu	r5,-36(fp)
   1b45c:	e1bff783 	ldbu	r6,-34(fp)
   1b460:	e0fff80b 	ldhu	r3,-32(fp)
   1b464:	e0bffb44 	addi	r2,fp,-19
   1b468:	d8800015 	stw	r2,0(sp)
   1b46c:	e13ff617 	ldw	r4,-40(fp)
   1b470:	180f883a 	mov	r7,r3
   1b474:	00149540 	call	14954 <OSFlagPend>
   1b478:	00000a06 	br	1b4a4 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b47c:	0001883a 	nop
   1b480:	e0bffc17 	ldw	r2,-16(fp)
   1b484:	10c00d17 	ldw	r3,52(r2)
   1b488:	e0bff117 	ldw	r2,-60(fp)
   1b48c:	1880051e 	bne	r3,r2,1b4a4 <altera_avalon_jtag_uart_read+0x1d4>
   1b490:	e0bffc17 	ldw	r2,-16(fp)
   1b494:	10c00917 	ldw	r3,36(r2)
   1b498:	e0bffc17 	ldw	r2,-16(fp)
   1b49c:	10800117 	ldw	r2,4(r2)
   1b4a0:	18bff736 	bltu	r3,r2,1b480 <__alt_mem_Flash_flash_data+0xf401b480>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b4a4:	e0bffc17 	ldw	r2,-16(fp)
   1b4a8:	10c00d17 	ldw	r3,52(r2)
   1b4ac:	e0bff117 	ldw	r2,-60(fp)
   1b4b0:	1880011e 	bne	r3,r2,1b4b8 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1b4b4:	00000206 	br	1b4c0 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b4b8:	e0bffe17 	ldw	r2,-8(fp)
   1b4bc:	00bf9916 	blt	zero,r2,1b324 <__alt_mem_Flash_flash_data+0xf401b324>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1b4c0:	e0bffc17 	ldw	r2,-16(fp)
   1b4c4:	10800a17 	ldw	r2,40(r2)
   1b4c8:	1009883a 	mov	r4,r2
   1b4cc:	00185580 	call	18558 <OSSemPost>

  if (ptr != buffer)
   1b4d0:	e0ffef17 	ldw	r3,-68(fp)
   1b4d4:	e0bffd17 	ldw	r2,-12(fp)
   1b4d8:	18801826 	beq	r3,r2,1b53c <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4dc:	0005303a 	rdctl	r2,status
   1b4e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b4e4:	e0fff917 	ldw	r3,-28(fp)
   1b4e8:	00bfff84 	movi	r2,-2
   1b4ec:	1884703a 	and	r2,r3,r2
   1b4f0:	1001703a 	wrctl	status,r2
  
  return context;
   1b4f4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b4f8:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b4fc:	e0bffc17 	ldw	r2,-16(fp)
   1b500:	10800817 	ldw	r2,32(r2)
   1b504:	10c00054 	ori	r3,r2,1
   1b508:	e0bffc17 	ldw	r2,-16(fp)
   1b50c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b510:	e0bffc17 	ldw	r2,-16(fp)
   1b514:	10800017 	ldw	r2,0(r2)
   1b518:	10800104 	addi	r2,r2,4
   1b51c:	1007883a 	mov	r3,r2
   1b520:	e0bffc17 	ldw	r2,-16(fp)
   1b524:	10800817 	ldw	r2,32(r2)
   1b528:	18800035 	stwio	r2,0(r3)
   1b52c:	e0bff317 	ldw	r2,-52(fp)
   1b530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b534:	e0bffa17 	ldw	r2,-24(fp)
   1b538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b53c:	e0ffef17 	ldw	r3,-68(fp)
   1b540:	e0bffd17 	ldw	r2,-12(fp)
   1b544:	18800426 	beq	r3,r2,1b558 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1b548:	e0ffef17 	ldw	r3,-68(fp)
   1b54c:	e0bffd17 	ldw	r2,-12(fp)
   1b550:	1885c83a 	sub	r2,r3,r2
   1b554:	00000606 	br	1b570 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1b558:	e0bfff17 	ldw	r2,-4(fp)
   1b55c:	1090000c 	andi	r2,r2,16384
   1b560:	10000226 	beq	r2,zero,1b56c <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1b564:	00bffd44 	movi	r2,-11
   1b568:	00000106 	br	1b570 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1b56c:	00bffec4 	movi	r2,-5
}
   1b570:	e037883a 	mov	sp,fp
   1b574:	dfc00117 	ldw	ra,4(sp)
   1b578:	df000017 	ldw	fp,0(sp)
   1b57c:	dec00204 	addi	sp,sp,8
   1b580:	f800283a 	ret

0001b584 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b584:	deffed04 	addi	sp,sp,-76
   1b588:	dfc01215 	stw	ra,72(sp)
   1b58c:	df001115 	stw	fp,68(sp)
   1b590:	df001104 	addi	fp,sp,68
   1b594:	e13ffc15 	stw	r4,-16(fp)
   1b598:	e17ffd15 	stw	r5,-12(fp)
   1b59c:	e1bffe15 	stw	r6,-8(fp)
   1b5a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b5a4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b5a8:	e0bffd17 	ldw	r2,-12(fp)
   1b5ac:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1b5b0:	e0bffc17 	ldw	r2,-16(fp)
   1b5b4:	10800b17 	ldw	r2,44(r2)
   1b5b8:	e0bff515 	stw	r2,-44(fp)
   1b5bc:	e03ff60d 	sth	zero,-40(fp)
   1b5c0:	e0fff60b 	ldhu	r3,-40(fp)
   1b5c4:	e0bffbc4 	addi	r2,fp,-17
   1b5c8:	e13ff517 	ldw	r4,-44(fp)
   1b5cc:	180b883a 	mov	r5,r3
   1b5d0:	100d883a 	mov	r6,r2
   1b5d4:	00181840 	call	18184 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b5d8:	00003806 	br	1b6bc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b5dc:	e0bffc17 	ldw	r2,-16(fp)
   1b5e0:	10800f17 	ldw	r2,60(r2)
   1b5e4:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1b5e8:	e0bffc17 	ldw	r2,-16(fp)
   1b5ec:	10801017 	ldw	r2,64(r2)
   1b5f0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1b5f4:	e0fff317 	ldw	r3,-52(fp)
   1b5f8:	e0bff017 	ldw	r2,-64(fp)
   1b5fc:	1880062e 	bgeu	r3,r2,1b618 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1b600:	e0fff017 	ldw	r3,-64(fp)
   1b604:	e0bff317 	ldw	r2,-52(fp)
   1b608:	1885c83a 	sub	r2,r3,r2
   1b60c:	10bfffc4 	addi	r2,r2,-1
   1b610:	e0bff115 	stw	r2,-60(fp)
   1b614:	00000b06 	br	1b644 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1b618:	e0bff017 	ldw	r2,-64(fp)
   1b61c:	10000526 	beq	r2,zero,1b634 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b620:	00c20004 	movi	r3,2048
   1b624:	e0bff317 	ldw	r2,-52(fp)
   1b628:	1885c83a 	sub	r2,r3,r2
   1b62c:	e0bff115 	stw	r2,-60(fp)
   1b630:	00000406 	br	1b644 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b634:	00c1ffc4 	movi	r3,2047
   1b638:	e0bff317 	ldw	r2,-52(fp)
   1b63c:	1885c83a 	sub	r2,r3,r2
   1b640:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1b644:	e0bff117 	ldw	r2,-60(fp)
   1b648:	1000011e 	bne	r2,zero,1b650 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1b64c:	00001d06 	br	1b6c4 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1b650:	e0fffe17 	ldw	r3,-8(fp)
   1b654:	e0bff117 	ldw	r2,-60(fp)
   1b658:	1880022e 	bgeu	r3,r2,1b664 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1b65c:	e0bffe17 	ldw	r2,-8(fp)
   1b660:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b664:	e0bff317 	ldw	r2,-52(fp)
   1b668:	10821104 	addi	r2,r2,2116
   1b66c:	e0fffc17 	ldw	r3,-16(fp)
   1b670:	1885883a 	add	r2,r3,r2
   1b674:	1009883a 	mov	r4,r2
   1b678:	e17ffd17 	ldw	r5,-12(fp)
   1b67c:	e1bff117 	ldw	r6,-60(fp)
   1b680:	00091500 	call	9150 <memcpy>
      ptr   += n;
   1b684:	e0fffd17 	ldw	r3,-12(fp)
   1b688:	e0bff117 	ldw	r2,-60(fp)
   1b68c:	1885883a 	add	r2,r3,r2
   1b690:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1b694:	e0fffe17 	ldw	r3,-8(fp)
   1b698:	e0bff117 	ldw	r2,-60(fp)
   1b69c:	1885c83a 	sub	r2,r3,r2
   1b6a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b6a4:	e0fff317 	ldw	r3,-52(fp)
   1b6a8:	e0bff117 	ldw	r2,-60(fp)
   1b6ac:	1885883a 	add	r2,r3,r2
   1b6b0:	10c1ffcc 	andi	r3,r2,2047
   1b6b4:	e0bffc17 	ldw	r2,-16(fp)
   1b6b8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b6bc:	e0bffe17 	ldw	r2,-8(fp)
   1b6c0:	00bfc616 	blt	zero,r2,1b5dc <__alt_mem_Flash_flash_data+0xf401b5dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6c4:	0005303a 	rdctl	r2,status
   1b6c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6cc:	e0fff717 	ldw	r3,-36(fp)
   1b6d0:	00bfff84 	movi	r2,-2
   1b6d4:	1884703a 	and	r2,r3,r2
   1b6d8:	1001703a 	wrctl	status,r2
  
  return context;
   1b6dc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b6e0:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b6e4:	e0bffc17 	ldw	r2,-16(fp)
   1b6e8:	10800817 	ldw	r2,32(r2)
   1b6ec:	10c00094 	ori	r3,r2,2
   1b6f0:	e0bffc17 	ldw	r2,-16(fp)
   1b6f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b6f8:	e0bffc17 	ldw	r2,-16(fp)
   1b6fc:	10800017 	ldw	r2,0(r2)
   1b700:	10800104 	addi	r2,r2,4
   1b704:	1007883a 	mov	r3,r2
   1b708:	e0bffc17 	ldw	r2,-16(fp)
   1b70c:	10800817 	ldw	r2,32(r2)
   1b710:	18800035 	stwio	r2,0(r3)
   1b714:	e0bff417 	ldw	r2,-48(fp)
   1b718:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b71c:	e0bff817 	ldw	r2,-32(fp)
   1b720:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b724:	e0bffe17 	ldw	r2,-8(fp)
   1b728:	00802e0e 	bge	zero,r2,1b7e4 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1b72c:	e0bfff17 	ldw	r2,-4(fp)
   1b730:	1090000c 	andi	r2,r2,16384
   1b734:	10000126 	beq	r2,zero,1b73c <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1b738:	00002c06 	br	1b7ec <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1b73c:	008000b4 	movhi	r2,2
   1b740:	108e3044 	addi	r2,r2,14529
   1b744:	10800003 	ldbu	r2,0(r2)
   1b748:	10803fcc 	andi	r2,r2,255
   1b74c:	10800058 	cmpnei	r2,r2,1
   1b750:	1000161e 	bne	r2,zero,1b7ac <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1b754:	e0bffc17 	ldw	r2,-16(fp)
   1b758:	10800c17 	ldw	r2,48(r2)
   1b75c:	e0bff915 	stw	r2,-28(fp)
   1b760:	00800184 	movi	r2,6
   1b764:	e0bffa0d 	sth	r2,-24(fp)
   1b768:	00bfe0c4 	movi	r2,-125
   1b76c:	e0bffa85 	stb	r2,-22(fp)
   1b770:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1b774:	008000b4 	movhi	r2,2
   1b778:	108e3044 	addi	r2,r2,14529
   1b77c:	10800003 	ldbu	r2,0(r2)
   1b780:	10803fcc 	andi	r2,r2,255
   1b784:	10001326 	beq	r2,zero,1b7d4 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1b788:	e17ffa0b 	ldhu	r5,-24(fp)
   1b78c:	e1bffa83 	ldbu	r6,-22(fp)
   1b790:	e0fffb0b 	ldhu	r3,-20(fp)
   1b794:	e0bffb84 	addi	r2,fp,-18
   1b798:	d8800015 	stw	r2,0(sp)
   1b79c:	e13ff917 	ldw	r4,-28(fp)
   1b7a0:	180f883a 	mov	r7,r3
   1b7a4:	00149540 	call	14954 <OSFlagPend>
   1b7a8:	00000a06 	br	1b7d4 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b7ac:	0001883a 	nop
   1b7b0:	e0bffc17 	ldw	r2,-16(fp)
   1b7b4:	10c01017 	ldw	r3,64(r2)
   1b7b8:	e0bff017 	ldw	r2,-64(fp)
   1b7bc:	1880051e 	bne	r3,r2,1b7d4 <altera_avalon_jtag_uart_write+0x250>
   1b7c0:	e0bffc17 	ldw	r2,-16(fp)
   1b7c4:	10c00917 	ldw	r3,36(r2)
   1b7c8:	e0bffc17 	ldw	r2,-16(fp)
   1b7cc:	10800117 	ldw	r2,4(r2)
   1b7d0:	18bff736 	bltu	r3,r2,1b7b0 <__alt_mem_Flash_flash_data+0xf401b7b0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1b7d4:	e0bffc17 	ldw	r2,-16(fp)
   1b7d8:	10800917 	ldw	r2,36(r2)
   1b7dc:	10000126 	beq	r2,zero,1b7e4 <altera_avalon_jtag_uart_write+0x260>
         break;
   1b7e0:	00000206 	br	1b7ec <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1b7e4:	e0bffe17 	ldw	r2,-8(fp)
   1b7e8:	00bf7b16 	blt	zero,r2,1b5d8 <__alt_mem_Flash_flash_data+0xf401b5d8>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1b7ec:	e0bffc17 	ldw	r2,-16(fp)
   1b7f0:	10800b17 	ldw	r2,44(r2)
   1b7f4:	1009883a 	mov	r4,r2
   1b7f8:	00185580 	call	18558 <OSSemPost>

  if (ptr != start)
   1b7fc:	e0fffd17 	ldw	r3,-12(fp)
   1b800:	e0bff217 	ldw	r2,-56(fp)
   1b804:	18800426 	beq	r3,r2,1b818 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1b808:	e0fffd17 	ldw	r3,-12(fp)
   1b80c:	e0bff217 	ldw	r2,-56(fp)
   1b810:	1885c83a 	sub	r2,r3,r2
   1b814:	00000606 	br	1b830 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1b818:	e0bfff17 	ldw	r2,-4(fp)
   1b81c:	1090000c 	andi	r2,r2,16384
   1b820:	10000226 	beq	r2,zero,1b82c <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1b824:	00bffd44 	movi	r2,-11
   1b828:	00000106 	br	1b830 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1b82c:	00bffec4 	movi	r2,-5
}
   1b830:	e037883a 	mov	sp,fp
   1b834:	dfc00117 	ldw	ra,4(sp)
   1b838:	df000017 	ldw	fp,0(sp)
   1b83c:	dec00204 	addi	sp,sp,8
   1b840:	f800283a 	ret

0001b844 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b844:	defff904 	addi	sp,sp,-28
   1b848:	dfc00615 	stw	ra,24(sp)
   1b84c:	df000515 	stw	fp,20(sp)
   1b850:	df000504 	addi	fp,sp,20
   1b854:	e13ffe15 	stw	r4,-8(fp)
   1b858:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b85c:	0007883a 	mov	r3,zero
   1b860:	e0bffe17 	ldw	r2,-8(fp)
   1b864:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b868:	e0bffe17 	ldw	r2,-8(fp)
   1b86c:	10800104 	addi	r2,r2,4
   1b870:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b874:	0005303a 	rdctl	r2,status
   1b878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b87c:	e0fffc17 	ldw	r3,-16(fp)
   1b880:	00bfff84 	movi	r2,-2
   1b884:	1884703a 	and	r2,r3,r2
   1b888:	1001703a 	wrctl	status,r2
  
  return context;
   1b88c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b890:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1b894:	001de5c0 	call	1de5c <alt_tick>
   1b898:	e0bffb17 	ldw	r2,-20(fp)
   1b89c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8a0:	e0bffd17 	ldw	r2,-12(fp)
   1b8a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b8a8:	e037883a 	mov	sp,fp
   1b8ac:	dfc00117 	ldw	ra,4(sp)
   1b8b0:	df000017 	ldw	fp,0(sp)
   1b8b4:	dec00204 	addi	sp,sp,8
   1b8b8:	f800283a 	ret

0001b8bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b8bc:	defff904 	addi	sp,sp,-28
   1b8c0:	dfc00615 	stw	ra,24(sp)
   1b8c4:	df000515 	stw	fp,20(sp)
   1b8c8:	df000504 	addi	fp,sp,20
   1b8cc:	e13ffc15 	stw	r4,-16(fp)
   1b8d0:	e17ffd15 	stw	r5,-12(fp)
   1b8d4:	e1bffe15 	stw	r6,-8(fp)
   1b8d8:	e1ffff15 	stw	r7,-4(fp)
   1b8dc:	e0bfff17 	ldw	r2,-4(fp)
   1b8e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b8e4:	008000b4 	movhi	r2,2
   1b8e8:	108e4604 	addi	r2,r2,14616
   1b8ec:	10800017 	ldw	r2,0(r2)
   1b8f0:	1000041e 	bne	r2,zero,1b904 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1b8f4:	008000b4 	movhi	r2,2
   1b8f8:	108e4604 	addi	r2,r2,14616
   1b8fc:	e0fffb17 	ldw	r3,-20(fp)
   1b900:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b904:	e0bffc17 	ldw	r2,-16(fp)
   1b908:	10800104 	addi	r2,r2,4
   1b90c:	00c001c4 	movi	r3,7
   1b910:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1b914:	e13ffe17 	ldw	r4,-8(fp)
   1b918:	e17ffc17 	ldw	r5,-16(fp)
   1b91c:	018000b4 	movhi	r6,2
   1b920:	31ae1104 	addi	r6,r6,-18364
   1b924:	001d9a00 	call	1d9a0 <alt_irq_register>
#endif  
}
   1b928:	e037883a 	mov	sp,fp
   1b92c:	dfc00117 	ldw	ra,4(sp)
   1b930:	df000017 	ldw	fp,0(sp)
   1b934:	dec00204 	addi	sp,sp,8
   1b938:	f800283a 	ret

0001b93c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1b93c:	defffc04 	addi	sp,sp,-16
   1b940:	df000315 	stw	fp,12(sp)
   1b944:	df000304 	addi	fp,sp,12
   1b948:	e13ffe15 	stw	r4,-8(fp)
   1b94c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1b950:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1b954:	e0bfff17 	ldw	r2,-4(fp)
   1b958:	1000061e 	bne	r2,zero,1b974 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1b95c:	e0bffe17 	ldw	r2,-8(fp)
   1b960:	1007883a 	mov	r3,r2
   1b964:	e0bffd03 	ldbu	r2,-12(fp)
   1b968:	1884b03a 	or	r2,r3,r2
   1b96c:	e0bffd05 	stb	r2,-12(fp)
   1b970:	00000806 	br	1b994 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1b974:	e0bffe17 	ldw	r2,-8(fp)
   1b978:	1007883a 	mov	r3,r2
   1b97c:	e0bffd03 	ldbu	r2,-12(fp)
   1b980:	1884b03a 	or	r2,r3,r2
   1b984:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1b988:	e0bffd03 	ldbu	r2,-12(fp)
   1b98c:	10801014 	ori	r2,r2,64
   1b990:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1b994:	e0fffd03 	ldbu	r3,-12(fp)
   1b998:	00bfe004 	movi	r2,-128
   1b99c:	1884b03a 	or	r2,r3,r2
}
   1b9a0:	e037883a 	mov	sp,fp
   1b9a4:	df000017 	ldw	fp,0(sp)
   1b9a8:	dec00104 	addi	sp,sp,4
   1b9ac:	f800283a 	ret

0001b9b0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1b9b0:	defffd04 	addi	sp,sp,-12
   1b9b4:	df000215 	stw	fp,8(sp)
   1b9b8:	df000204 	addi	fp,sp,8
   1b9bc:	e13ffe15 	stw	r4,-8(fp)
   1b9c0:	2805883a 	mov	r2,r5
   1b9c4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1b9c8:	e0bffe17 	ldw	r2,-8(fp)
   1b9cc:	10800a17 	ldw	r2,40(r2)
   1b9d0:	1007883a 	mov	r3,r2
   1b9d4:	e0bfff03 	ldbu	r2,-4(fp)
   1b9d8:	18800025 	stbio	r2,0(r3)
}
   1b9dc:	e037883a 	mov	sp,fp
   1b9e0:	df000017 	ldw	fp,0(sp)
   1b9e4:	dec00104 	addi	sp,sp,4
   1b9e8:	f800283a 	ret

0001b9ec <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1b9ec:	defffe04 	addi	sp,sp,-8
   1b9f0:	df000115 	stw	fp,4(sp)
   1b9f4:	df000104 	addi	fp,sp,4
   1b9f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1b9fc:	e0bfff17 	ldw	r2,-4(fp)
   1ba00:	10800a17 	ldw	r2,40(r2)
   1ba04:	1007883a 	mov	r3,r2
   1ba08:	00800044 	movi	r2,1
   1ba0c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1ba10:	e037883a 	mov	sp,fp
   1ba14:	df000017 	ldw	fp,0(sp)
   1ba18:	dec00104 	addi	sp,sp,4
   1ba1c:	f800283a 	ret

0001ba20 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1ba20:	defffc04 	addi	sp,sp,-16
   1ba24:	dfc00315 	stw	ra,12(sp)
   1ba28:	df000215 	stw	fp,8(sp)
   1ba2c:	df000204 	addi	fp,sp,8
   1ba30:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1ba34:	e13fff17 	ldw	r4,-4(fp)
   1ba38:	014000b4 	movhi	r5,2
   1ba3c:	29455b04 	addi	r5,r5,5484
   1ba40:	001d7a80 	call	1d7a8 <alt_find_dev>
   1ba44:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ba48:	e0bffe17 	ldw	r2,-8(fp)
}
   1ba4c:	e037883a 	mov	sp,fp
   1ba50:	dfc00117 	ldw	ra,4(sp)
   1ba54:	df000017 	ldw	fp,0(sp)
   1ba58:	dec00204 	addi	sp,sp,8
   1ba5c:	f800283a 	ret

0001ba60 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1ba60:	defffb04 	addi	sp,sp,-20
   1ba64:	df000415 	stw	fp,16(sp)
   1ba68:	df000404 	addi	fp,sp,16
   1ba6c:	e13ffd15 	stw	r4,-12(fp)
   1ba70:	e17ffe15 	stw	r5,-8(fp)
   1ba74:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1ba78:	e03ffc15 	stw	zero,-16(fp)
   1ba7c:	00000f06 	br	1babc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1ba80:	e0bffd17 	ldw	r2,-12(fp)
   1ba84:	10800a17 	ldw	r2,40(r2)
   1ba88:	10800044 	addi	r2,r2,1
   1ba8c:	1009883a 	mov	r4,r2
   1ba90:	e0fffe17 	ldw	r3,-8(fp)
   1ba94:	e0bffc17 	ldw	r2,-16(fp)
   1ba98:	1885883a 	add	r2,r3,r2
   1ba9c:	10800003 	ldbu	r2,0(r2)
   1baa0:	10803fcc 	andi	r2,r2,255
   1baa4:	1080201c 	xori	r2,r2,128
   1baa8:	10bfe004 	addi	r2,r2,-128
   1baac:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1bab0:	e0bffc17 	ldw	r2,-16(fp)
   1bab4:	10800044 	addi	r2,r2,1
   1bab8:	e0bffc15 	stw	r2,-16(fp)
   1babc:	e0fffc17 	ldw	r3,-16(fp)
   1bac0:	e0bfff17 	ldw	r2,-4(fp)
   1bac4:	18bfee36 	bltu	r3,r2,1ba80 <__alt_mem_Flash_flash_data+0xf401ba80>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1bac8:	e037883a 	mov	sp,fp
   1bacc:	df000017 	ldw	fp,0(sp)
   1bad0:	dec00104 	addi	sp,sp,4
   1bad4:	f800283a 	ret

0001bad8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1bad8:	defffd04 	addi	sp,sp,-12
   1badc:	df000215 	stw	fp,8(sp)
   1bae0:	df000204 	addi	fp,sp,8
   1bae4:	e13ffe15 	stw	r4,-8(fp)
   1bae8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1baec:	00000d06 	br	1bb24 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1baf0:	e0bffe17 	ldw	r2,-8(fp)
   1baf4:	10800a17 	ldw	r2,40(r2)
   1baf8:	10800044 	addi	r2,r2,1
   1bafc:	1007883a 	mov	r3,r2
   1bb00:	e0bfff17 	ldw	r2,-4(fp)
   1bb04:	10800003 	ldbu	r2,0(r2)
   1bb08:	10803fcc 	andi	r2,r2,255
   1bb0c:	1080201c 	xori	r2,r2,128
   1bb10:	10bfe004 	addi	r2,r2,-128
   1bb14:	18800025 	stbio	r2,0(r3)
		++ptr;
   1bb18:	e0bfff17 	ldw	r2,-4(fp)
   1bb1c:	10800044 	addi	r2,r2,1
   1bb20:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1bb24:	e0bfff17 	ldw	r2,-4(fp)
   1bb28:	10800003 	ldbu	r2,0(r2)
   1bb2c:	10803fcc 	andi	r2,r2,255
   1bb30:	1080201c 	xori	r2,r2,128
   1bb34:	10bfe004 	addi	r2,r2,-128
   1bb38:	103fed1e 	bne	r2,zero,1baf0 <__alt_mem_Flash_flash_data+0xf401baf0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1bb3c:	e037883a 	mov	sp,fp
   1bb40:	df000017 	ldw	fp,0(sp)
   1bb44:	dec00104 	addi	sp,sp,4
   1bb48:	f800283a 	ret

0001bb4c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1bb4c:	defffb04 	addi	sp,sp,-20
   1bb50:	dfc00415 	stw	ra,16(sp)
   1bb54:	df000315 	stw	fp,12(sp)
   1bb58:	df000304 	addi	fp,sp,12
   1bb5c:	e13ffd15 	stw	r4,-12(fp)
   1bb60:	e17ffe15 	stw	r5,-8(fp)
   1bb64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1bb68:	e0bffd17 	ldw	r2,-12(fp)
   1bb6c:	10c00017 	ldw	r3,0(r2)
   1bb70:	e0bfff17 	ldw	r2,-4(fp)
   1bb74:	1809883a 	mov	r4,r3
   1bb78:	e17ffe17 	ldw	r5,-8(fp)
   1bb7c:	100d883a 	mov	r6,r2
   1bb80:	001ba600 	call	1ba60 <alt_up_character_lcd_write>
	return 0;
   1bb84:	0005883a 	mov	r2,zero
}
   1bb88:	e037883a 	mov	sp,fp
   1bb8c:	dfc00117 	ldw	ra,4(sp)
   1bb90:	df000017 	ldw	fp,0(sp)
   1bb94:	dec00204 	addi	sp,sp,8
   1bb98:	f800283a 	ret

0001bb9c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1bb9c:	defffa04 	addi	sp,sp,-24
   1bba0:	dfc00515 	stw	ra,20(sp)
   1bba4:	df000415 	stw	fp,16(sp)
   1bba8:	df000404 	addi	fp,sp,16
   1bbac:	e13ffd15 	stw	r4,-12(fp)
   1bbb0:	e17ffe15 	stw	r5,-8(fp)
   1bbb4:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1bbb8:	e0bffe17 	ldw	r2,-8(fp)
   1bbbc:	10800a28 	cmpgeui	r2,r2,40
   1bbc0:	1000031e 	bne	r2,zero,1bbd0 <alt_up_character_lcd_set_cursor_pos+0x34>
   1bbc4:	e0bfff17 	ldw	r2,-4(fp)
   1bbc8:	108000b0 	cmpltui	r2,r2,2
   1bbcc:	1000021e 	bne	r2,zero,1bbd8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1bbd0:	00bfffc4 	movi	r2,-1
   1bbd4:	00000906 	br	1bbfc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1bbd8:	e13ffe17 	ldw	r4,-8(fp)
   1bbdc:	e17fff17 	ldw	r5,-4(fp)
   1bbe0:	001b93c0 	call	1b93c <get_DDRAM_addr>
   1bbe4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1bbe8:	e0bffc03 	ldbu	r2,-16(fp)
   1bbec:	e13ffd17 	ldw	r4,-12(fp)
   1bbf0:	100b883a 	mov	r5,r2
   1bbf4:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
	return 0;
   1bbf8:	0005883a 	mov	r2,zero
}
   1bbfc:	e037883a 	mov	sp,fp
   1bc00:	dfc00117 	ldw	ra,4(sp)
   1bc04:	df000017 	ldw	fp,0(sp)
   1bc08:	dec00204 	addi	sp,sp,8
   1bc0c:	f800283a 	ret

0001bc10 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1bc10:	defffb04 	addi	sp,sp,-20
   1bc14:	dfc00415 	stw	ra,16(sp)
   1bc18:	df000315 	stw	fp,12(sp)
   1bc1c:	df000304 	addi	fp,sp,12
   1bc20:	e13ffe15 	stw	r4,-8(fp)
   1bc24:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1bc28:	e0bfff17 	ldw	r2,-4(fp)
   1bc2c:	1000011e 	bne	r2,zero,1bc34 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1bc30:	00001406 	br	1bc84 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1bc34:	e0bfff17 	ldw	r2,-4(fp)
   1bc38:	0080020e 	bge	zero,r2,1bc44 <alt_up_character_lcd_shift_cursor+0x34>
   1bc3c:	00800504 	movi	r2,20
   1bc40:	00000106 	br	1bc48 <alt_up_character_lcd_shift_cursor+0x38>
   1bc44:	00800404 	movi	r2,16
   1bc48:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1bc4c:	e0bfff17 	ldw	r2,-4(fp)
   1bc50:	1000010e 	bge	r2,zero,1bc58 <alt_up_character_lcd_shift_cursor+0x48>
   1bc54:	0085c83a 	sub	r2,zero,r2
   1bc58:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1bc5c:	00000406 	br	1bc70 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1bc60:	e0bffd43 	ldbu	r2,-11(fp)
   1bc64:	e13ffe17 	ldw	r4,-8(fp)
   1bc68:	100b883a 	mov	r5,r2
   1bc6c:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1bc70:	e0bffd03 	ldbu	r2,-12(fp)
   1bc74:	10ffffc4 	addi	r3,r2,-1
   1bc78:	e0fffd05 	stb	r3,-12(fp)
   1bc7c:	10803fcc 	andi	r2,r2,255
   1bc80:	103ff71e 	bne	r2,zero,1bc60 <__alt_mem_Flash_flash_data+0xf401bc60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1bc84:	e037883a 	mov	sp,fp
   1bc88:	dfc00117 	ldw	ra,4(sp)
   1bc8c:	df000017 	ldw	fp,0(sp)
   1bc90:	dec00204 	addi	sp,sp,8
   1bc94:	f800283a 	ret

0001bc98 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1bc98:	defffb04 	addi	sp,sp,-20
   1bc9c:	dfc00415 	stw	ra,16(sp)
   1bca0:	df000315 	stw	fp,12(sp)
   1bca4:	df000304 	addi	fp,sp,12
   1bca8:	e13ffe15 	stw	r4,-8(fp)
   1bcac:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1bcb0:	e0bfff17 	ldw	r2,-4(fp)
   1bcb4:	1000011e 	bne	r2,zero,1bcbc <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1bcb8:	00001406 	br	1bd0c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1bcbc:	e0bfff17 	ldw	r2,-4(fp)
   1bcc0:	0080020e 	bge	zero,r2,1bccc <alt_up_character_lcd_shift_display+0x34>
   1bcc4:	00800704 	movi	r2,28
   1bcc8:	00000106 	br	1bcd0 <alt_up_character_lcd_shift_display+0x38>
   1bccc:	00800604 	movi	r2,24
   1bcd0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1bcd4:	e0bfff17 	ldw	r2,-4(fp)
   1bcd8:	1000010e 	bge	r2,zero,1bce0 <alt_up_character_lcd_shift_display+0x48>
   1bcdc:	0085c83a 	sub	r2,zero,r2
   1bce0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1bce4:	00000406 	br	1bcf8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1bce8:	e0bffd43 	ldbu	r2,-11(fp)
   1bcec:	e13ffe17 	ldw	r4,-8(fp)
   1bcf0:	100b883a 	mov	r5,r2
   1bcf4:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1bcf8:	e0bffd03 	ldbu	r2,-12(fp)
   1bcfc:	10ffffc4 	addi	r3,r2,-1
   1bd00:	e0fffd05 	stb	r3,-12(fp)
   1bd04:	10803fcc 	andi	r2,r2,255
   1bd08:	103ff71e 	bne	r2,zero,1bce8 <__alt_mem_Flash_flash_data+0xf401bce8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1bd0c:	e037883a 	mov	sp,fp
   1bd10:	dfc00117 	ldw	ra,4(sp)
   1bd14:	df000017 	ldw	fp,0(sp)
   1bd18:	dec00204 	addi	sp,sp,8
   1bd1c:	f800283a 	ret

0001bd20 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1bd20:	defffa04 	addi	sp,sp,-24
   1bd24:	dfc00515 	stw	ra,20(sp)
   1bd28:	df000415 	stw	fp,16(sp)
   1bd2c:	df000404 	addi	fp,sp,16
   1bd30:	e13ffd15 	stw	r4,-12(fp)
   1bd34:	e17ffe15 	stw	r5,-8(fp)
   1bd38:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1bd3c:	e0bffe17 	ldw	r2,-8(fp)
   1bd40:	10800a28 	cmpgeui	r2,r2,40
   1bd44:	1000031e 	bne	r2,zero,1bd54 <alt_up_character_lcd_erase_pos+0x34>
   1bd48:	e0bfff17 	ldw	r2,-4(fp)
   1bd4c:	108000b0 	cmpltui	r2,r2,2
   1bd50:	1000021e 	bne	r2,zero,1bd5c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1bd54:	00bfffc4 	movi	r2,-1
   1bd58:	00000f06 	br	1bd98 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1bd5c:	e13ffe17 	ldw	r4,-8(fp)
   1bd60:	e17fff17 	ldw	r5,-4(fp)
   1bd64:	001b93c0 	call	1b93c <get_DDRAM_addr>
   1bd68:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1bd6c:	e0bffc03 	ldbu	r2,-16(fp)
   1bd70:	e13ffd17 	ldw	r4,-12(fp)
   1bd74:	100b883a 	mov	r5,r2
   1bd78:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1bd7c:	e0bffd17 	ldw	r2,-12(fp)
   1bd80:	10800a17 	ldw	r2,40(r2)
   1bd84:	10800044 	addi	r2,r2,1
   1bd88:	1007883a 	mov	r3,r2
   1bd8c:	00800084 	movi	r2,2
   1bd90:	18800025 	stbio	r2,0(r3)
	return 0;
   1bd94:	0005883a 	mov	r2,zero
}
   1bd98:	e037883a 	mov	sp,fp
   1bd9c:	dfc00117 	ldw	ra,4(sp)
   1bda0:	df000017 	ldw	fp,0(sp)
   1bda4:	dec00204 	addi	sp,sp,8
   1bda8:	f800283a 	ret

0001bdac <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1bdac:	defffd04 	addi	sp,sp,-12
   1bdb0:	dfc00215 	stw	ra,8(sp)
   1bdb4:	df000115 	stw	fp,4(sp)
   1bdb8:	df000104 	addi	fp,sp,4
   1bdbc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1bdc0:	e13fff17 	ldw	r4,-4(fp)
   1bdc4:	01400304 	movi	r5,12
   1bdc8:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
}
   1bdcc:	e037883a 	mov	sp,fp
   1bdd0:	dfc00117 	ldw	ra,4(sp)
   1bdd4:	df000017 	ldw	fp,0(sp)
   1bdd8:	dec00204 	addi	sp,sp,8
   1bddc:	f800283a 	ret

0001bde0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1bde0:	defffd04 	addi	sp,sp,-12
   1bde4:	dfc00215 	stw	ra,8(sp)
   1bde8:	df000115 	stw	fp,4(sp)
   1bdec:	df000104 	addi	fp,sp,4
   1bdf0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1bdf4:	e13fff17 	ldw	r4,-4(fp)
   1bdf8:	014003c4 	movi	r5,15
   1bdfc:	001b9b00 	call	1b9b0 <alt_up_character_lcd_send_cmd>
}
   1be00:	e037883a 	mov	sp,fp
   1be04:	dfc00117 	ldw	ra,4(sp)
   1be08:	df000017 	ldw	fp,0(sp)
   1be0c:	dec00204 	addi	sp,sp,8
   1be10:	f800283a 	ret

0001be14 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1be14:	defffd04 	addi	sp,sp,-12
   1be18:	df000215 	stw	fp,8(sp)
   1be1c:	df000204 	addi	fp,sp,8
   1be20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1be24:	e0bfff17 	ldw	r2,-4(fp)
   1be28:	10800a17 	ldw	r2,40(r2)
   1be2c:	10800104 	addi	r2,r2,4
   1be30:	10800037 	ldwio	r2,0(r2)
   1be34:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1be38:	e0bffe17 	ldw	r2,-8(fp)
   1be3c:	10800054 	ori	r2,r2,1
   1be40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1be44:	e0bfff17 	ldw	r2,-4(fp)
   1be48:	10800a17 	ldw	r2,40(r2)
   1be4c:	10800104 	addi	r2,r2,4
   1be50:	1007883a 	mov	r3,r2
   1be54:	e0bffe17 	ldw	r2,-8(fp)
   1be58:	18800035 	stwio	r2,0(r3)
}
   1be5c:	e037883a 	mov	sp,fp
   1be60:	df000017 	ldw	fp,0(sp)
   1be64:	dec00104 	addi	sp,sp,4
   1be68:	f800283a 	ret

0001be6c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1be6c:	defffd04 	addi	sp,sp,-12
   1be70:	df000215 	stw	fp,8(sp)
   1be74:	df000204 	addi	fp,sp,8
   1be78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1be7c:	e0bfff17 	ldw	r2,-4(fp)
   1be80:	10800a17 	ldw	r2,40(r2)
   1be84:	10800104 	addi	r2,r2,4
   1be88:	10800037 	ldwio	r2,0(r2)
   1be8c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1be90:	e0fffe17 	ldw	r3,-8(fp)
   1be94:	00bfff84 	movi	r2,-2
   1be98:	1884703a 	and	r2,r3,r2
   1be9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1bea0:	e0bfff17 	ldw	r2,-4(fp)
   1bea4:	10800a17 	ldw	r2,40(r2)
   1bea8:	10800104 	addi	r2,r2,4
   1beac:	1007883a 	mov	r3,r2
   1beb0:	e0bffe17 	ldw	r2,-8(fp)
   1beb4:	18800035 	stwio	r2,0(r3)
}
   1beb8:	e037883a 	mov	sp,fp
   1bebc:	df000017 	ldw	fp,0(sp)
   1bec0:	dec00104 	addi	sp,sp,4
   1bec4:	f800283a 	ret

0001bec8 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1bec8:	defffd04 	addi	sp,sp,-12
   1becc:	df000215 	stw	fp,8(sp)
   1bed0:	df000204 	addi	fp,sp,8
   1bed4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1bed8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1bedc:	e0bfff17 	ldw	r2,-4(fp)
   1bee0:	10800a17 	ldw	r2,40(r2)
   1bee4:	10800084 	addi	r2,r2,2
   1bee8:	1080002b 	ldhuio	r2,0(r2)
   1beec:	10bfffcc 	andi	r2,r2,65535
   1bef0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1bef4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1bef8:	e037883a 	mov	sp,fp
   1befc:	df000017 	ldw	fp,0(sp)
   1bf00:	dec00104 	addi	sp,sp,4
   1bf04:	f800283a 	ret

0001bf08 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1bf08:	defffd04 	addi	sp,sp,-12
   1bf0c:	df000215 	stw	fp,8(sp)
   1bf10:	df000204 	addi	fp,sp,8
   1bf14:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1bf18:	e0bfff17 	ldw	r2,-4(fp)
   1bf1c:	10800a17 	ldw	r2,40(r2)
   1bf20:	10800104 	addi	r2,r2,4
   1bf24:	10800037 	ldwio	r2,0(r2)
   1bf28:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1bf2c:	e0bffe17 	ldw	r2,-8(fp)
   1bf30:	1004d43a 	srli	r2,r2,16
}
   1bf34:	e037883a 	mov	sp,fp
   1bf38:	df000017 	ldw	fp,0(sp)
   1bf3c:	dec00104 	addi	sp,sp,4
   1bf40:	f800283a 	ret

0001bf44 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1bf44:	defffd04 	addi	sp,sp,-12
   1bf48:	df000215 	stw	fp,8(sp)
   1bf4c:	df000204 	addi	fp,sp,8
   1bf50:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1bf54:	e0bfff17 	ldw	r2,-4(fp)
   1bf58:	1080800c 	andi	r2,r2,512
   1bf5c:	1004d27a 	srli	r2,r2,9
   1bf60:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1bf64:	e0bffe17 	ldw	r2,-8(fp)
   1bf68:	10000226 	beq	r2,zero,1bf74 <alt_up_irda_check_parity+0x30>
   1bf6c:	00bfffc4 	movi	r2,-1
   1bf70:	00000106 	br	1bf78 <alt_up_irda_check_parity+0x34>
   1bf74:	0005883a 	mov	r2,zero
}
   1bf78:	e037883a 	mov	sp,fp
   1bf7c:	df000017 	ldw	fp,0(sp)
   1bf80:	dec00104 	addi	sp,sp,4
   1bf84:	f800283a 	ret

0001bf88 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1bf88:	defffd04 	addi	sp,sp,-12
   1bf8c:	df000215 	stw	fp,8(sp)
   1bf90:	df000204 	addi	fp,sp,8
   1bf94:	e13ffe15 	stw	r4,-8(fp)
   1bf98:	2805883a 	mov	r2,r5
   1bf9c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1bfa0:	e0bffe17 	ldw	r2,-8(fp)
   1bfa4:	10800a17 	ldw	r2,40(r2)
   1bfa8:	1007883a 	mov	r3,r2
   1bfac:	e0bfff03 	ldbu	r2,-4(fp)
   1bfb0:	18800035 	stwio	r2,0(r3)
	return 0;
   1bfb4:	0005883a 	mov	r2,zero
}
   1bfb8:	e037883a 	mov	sp,fp
   1bfbc:	df000017 	ldw	fp,0(sp)
   1bfc0:	dec00104 	addi	sp,sp,4
   1bfc4:	f800283a 	ret

0001bfc8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1bfc8:	defffa04 	addi	sp,sp,-24
   1bfcc:	dfc00515 	stw	ra,20(sp)
   1bfd0:	df000415 	stw	fp,16(sp)
   1bfd4:	df000404 	addi	fp,sp,16
   1bfd8:	e13ffd15 	stw	r4,-12(fp)
   1bfdc:	e17ffe15 	stw	r5,-8(fp)
   1bfe0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1bfe4:	e0bffd17 	ldw	r2,-12(fp)
   1bfe8:	10800a17 	ldw	r2,40(r2)
   1bfec:	10800037 	ldwio	r2,0(r2)
   1bff0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1bff4:	e0bffc17 	ldw	r2,-16(fp)
   1bff8:	1007883a 	mov	r3,r2
   1bffc:	e0bffe17 	ldw	r2,-8(fp)
   1c000:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1c004:	e13ffc17 	ldw	r4,-16(fp)
   1c008:	001bf440 	call	1bf44 <alt_up_irda_check_parity>
   1c00c:	1007883a 	mov	r3,r2
   1c010:	e0bfff17 	ldw	r2,-4(fp)
   1c014:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1c018:	e0bffc17 	ldw	r2,-16(fp)
   1c01c:	10a0000c 	andi	r2,r2,32768
   1c020:	1004d3fa 	srli	r2,r2,15
   1c024:	10bfffc4 	addi	r2,r2,-1
}
   1c028:	e037883a 	mov	sp,fp
   1c02c:	dfc00117 	ldw	ra,4(sp)
   1c030:	df000017 	ldw	fp,0(sp)
   1c034:	dec00204 	addi	sp,sp,8
   1c038:	f800283a 	ret

0001c03c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c03c:	defff804 	addi	sp,sp,-32
   1c040:	dfc00715 	stw	ra,28(sp)
   1c044:	df000615 	stw	fp,24(sp)
   1c048:	df000604 	addi	fp,sp,24
   1c04c:	e13ffd15 	stw	r4,-12(fp)
   1c050:	e17ffe15 	stw	r5,-8(fp)
   1c054:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c058:	e0bffd17 	ldw	r2,-12(fp)
   1c05c:	10800017 	ldw	r2,0(r2)
   1c060:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1c064:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1c068:	00000e06 	br	1c0a4 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1c06c:	e0bffe17 	ldw	r2,-8(fp)
   1c070:	10c00044 	addi	r3,r2,1
   1c074:	e0fffe15 	stw	r3,-8(fp)
   1c078:	e0fffc04 	addi	r3,fp,-16
   1c07c:	e13ffb17 	ldw	r4,-20(fp)
   1c080:	100b883a 	mov	r5,r2
   1c084:	180d883a 	mov	r6,r3
   1c088:	001bfc80 	call	1bfc8 <alt_up_irda_read_data>
   1c08c:	1000041e 	bne	r2,zero,1c0a0 <alt_up_irda_read_fd+0x64>
			count++;
   1c090:	e0bffa17 	ldw	r2,-24(fp)
   1c094:	10800044 	addi	r2,r2,1
   1c098:	e0bffa15 	stw	r2,-24(fp)
   1c09c:	00000106 	br	1c0a4 <alt_up_irda_read_fd+0x68>
		else
			break;
   1c0a0:	00000406 	br	1c0b4 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1c0a4:	e0bfff17 	ldw	r2,-4(fp)
   1c0a8:	10ffffc4 	addi	r3,r2,-1
   1c0ac:	e0ffff15 	stw	r3,-4(fp)
   1c0b0:	103fee1e 	bne	r2,zero,1c06c <__alt_mem_Flash_flash_data+0xf401c06c>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1c0b4:	e0bffa17 	ldw	r2,-24(fp)
}
   1c0b8:	e037883a 	mov	sp,fp
   1c0bc:	dfc00117 	ldw	ra,4(sp)
   1c0c0:	df000017 	ldw	fp,0(sp)
   1c0c4:	dec00204 	addi	sp,sp,8
   1c0c8:	f800283a 	ret

0001c0cc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c0cc:	defff904 	addi	sp,sp,-28
   1c0d0:	dfc00615 	stw	ra,24(sp)
   1c0d4:	df000515 	stw	fp,20(sp)
   1c0d8:	df000504 	addi	fp,sp,20
   1c0dc:	e13ffd15 	stw	r4,-12(fp)
   1c0e0:	e17ffe15 	stw	r5,-8(fp)
   1c0e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c0e8:	e0bffd17 	ldw	r2,-12(fp)
   1c0ec:	10800017 	ldw	r2,0(r2)
   1c0f0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1c0f4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1c0f8:	00000e06 	br	1c134 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1c0fc:	e0bffe17 	ldw	r2,-8(fp)
   1c100:	10c00044 	addi	r3,r2,1
   1c104:	e0fffe15 	stw	r3,-8(fp)
   1c108:	10800003 	ldbu	r2,0(r2)
   1c10c:	10803fcc 	andi	r2,r2,255
   1c110:	e13ffc17 	ldw	r4,-16(fp)
   1c114:	100b883a 	mov	r5,r2
   1c118:	001bf880 	call	1bf88 <alt_up_irda_write_data>
   1c11c:	1000041e 	bne	r2,zero,1c130 <alt_up_irda_write_fd+0x64>
			count++;
   1c120:	e0bffb17 	ldw	r2,-20(fp)
   1c124:	10800044 	addi	r2,r2,1
   1c128:	e0bffb15 	stw	r2,-20(fp)
   1c12c:	00000106 	br	1c134 <alt_up_irda_write_fd+0x68>
		else
			break;
   1c130:	00000406 	br	1c144 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1c134:	e0bfff17 	ldw	r2,-4(fp)
   1c138:	10ffffc4 	addi	r3,r2,-1
   1c13c:	e0ffff15 	stw	r3,-4(fp)
   1c140:	103fee1e 	bne	r2,zero,1c0fc <__alt_mem_Flash_flash_data+0xf401c0fc>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1c144:	e0bffb17 	ldw	r2,-20(fp)
}
   1c148:	e037883a 	mov	sp,fp
   1c14c:	dfc00117 	ldw	ra,4(sp)
   1c150:	df000017 	ldw	fp,0(sp)
   1c154:	dec00204 	addi	sp,sp,8
   1c158:	f800283a 	ret

0001c15c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1c15c:	defffc04 	addi	sp,sp,-16
   1c160:	dfc00315 	stw	ra,12(sp)
   1c164:	df000215 	stw	fp,8(sp)
   1c168:	df000204 	addi	fp,sp,8
   1c16c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1c170:	e13fff17 	ldw	r4,-4(fp)
   1c174:	014000b4 	movhi	r5,2
   1c178:	29455b04 	addi	r5,r5,5484
   1c17c:	001d7a80 	call	1d7a8 <alt_find_dev>
   1c180:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c184:	e0bffe17 	ldw	r2,-8(fp)
}
   1c188:	e037883a 	mov	sp,fp
   1c18c:	dfc00117 	ldw	ra,4(sp)
   1c190:	df000017 	ldw	fp,0(sp)
   1c194:	dec00204 	addi	sp,sp,8
   1c198:	f800283a 	ret

0001c19c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1c19c:	defffd04 	addi	sp,sp,-12
   1c1a0:	df000215 	stw	fp,8(sp)
   1c1a4:	df000204 	addi	fp,sp,8
   1c1a8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1c1ac:	e0bfff17 	ldw	r2,-4(fp)
   1c1b0:	1080400c 	andi	r2,r2,256
   1c1b4:	1004d23a 	srli	r2,r2,8
   1c1b8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1c1bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c1c0:	e037883a 	mov	sp,fp
   1c1c4:	df000017 	ldw	fp,0(sp)
   1c1c8:	dec00104 	addi	sp,sp,4
   1c1cc:	f800283a 	ret

0001c1d0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1c1d0:	defffd04 	addi	sp,sp,-12
   1c1d4:	df000215 	stw	fp,8(sp)
   1c1d8:	df000204 	addi	fp,sp,8
   1c1dc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1c1e0:	e0bfff17 	ldw	r2,-4(fp)
   1c1e4:	1080004c 	andi	r2,r2,1
   1c1e8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c1ec:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c1f0:	e037883a 	mov	sp,fp
   1c1f4:	df000017 	ldw	fp,0(sp)
   1c1f8:	dec00104 	addi	sp,sp,4
   1c1fc:	f800283a 	ret

0001c200 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1c200:	defffd04 	addi	sp,sp,-12
   1c204:	df000215 	stw	fp,8(sp)
   1c208:	df000204 	addi	fp,sp,8
   1c20c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1c210:	e0bfff17 	ldw	r2,-4(fp)
   1c214:	1081000c 	andi	r2,r2,1024
   1c218:	1004d2ba 	srli	r2,r2,10
   1c21c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c220:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c224:	e037883a 	mov	sp,fp
   1c228:	df000017 	ldw	fp,0(sp)
   1c22c:	dec00104 	addi	sp,sp,4
   1c230:	f800283a 	ret

0001c234 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1c234:	defffd04 	addi	sp,sp,-12
   1c238:	df000215 	stw	fp,8(sp)
   1c23c:	df000204 	addi	fp,sp,8
   1c240:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1c244:	e0bfff17 	ldw	r2,-4(fp)
   1c248:	1004d43a 	srli	r2,r2,16
   1c24c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1c250:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c254:	e037883a 	mov	sp,fp
   1c258:	df000017 	ldw	fp,0(sp)
   1c25c:	dec00104 	addi	sp,sp,4
   1c260:	f800283a 	ret

0001c264 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1c264:	defffd04 	addi	sp,sp,-12
   1c268:	df000215 	stw	fp,8(sp)
   1c26c:	df000204 	addi	fp,sp,8
   1c270:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1c274:	e0bfff17 	ldw	r2,-4(fp)
   1c278:	10a0000c 	andi	r2,r2,32768
   1c27c:	1004d3fa 	srli	r2,r2,15
   1c280:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1c284:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c288:	e037883a 	mov	sp,fp
   1c28c:	df000017 	ldw	fp,0(sp)
   1c290:	dec00104 	addi	sp,sp,4
   1c294:	f800283a 	ret

0001c298 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1c298:	defffd04 	addi	sp,sp,-12
   1c29c:	df000215 	stw	fp,8(sp)
   1c2a0:	df000204 	addi	fp,sp,8
   1c2a4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1c2a8:	e0bfff17 	ldw	r2,-4(fp)
   1c2ac:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1c2b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c2b4:	e037883a 	mov	sp,fp
   1c2b8:	df000017 	ldw	fp,0(sp)
   1c2bc:	dec00104 	addi	sp,sp,4
   1c2c0:	f800283a 	ret

0001c2c4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1c2c4:	defffb04 	addi	sp,sp,-20
   1c2c8:	dfc00415 	stw	ra,16(sp)
   1c2cc:	df000315 	stw	fp,12(sp)
   1c2d0:	df000304 	addi	fp,sp,12
   1c2d4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1c2d8:	e13fff17 	ldw	r4,-4(fp)
   1c2dc:	01403fc4 	movi	r5,255
   1c2e0:	001c5200 	call	1c520 <alt_up_ps2_write_data_byte_with_ack>
   1c2e4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1c2e8:	e0bffd17 	ldw	r2,-12(fp)
   1c2ec:	1000211e 	bne	r2,zero,1c374 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c2f0:	e0bffe04 	addi	r2,fp,-8
   1c2f4:	e13fff17 	ldw	r4,-4(fp)
   1c2f8:	100b883a 	mov	r5,r2
   1c2fc:	001c5840 	call	1c584 <alt_up_ps2_read_data_byte_timeout>
   1c300:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1c304:	e0bffd17 	ldw	r2,-12(fp)
   1c308:	10001a1e 	bne	r2,zero,1c374 <alt_up_ps2_init+0xb0>
   1c30c:	e0bffe03 	ldbu	r2,-8(fp)
   1c310:	10803fcc 	andi	r2,r2,255
   1c314:	10802a98 	cmpnei	r2,r2,170
   1c318:	1000161e 	bne	r2,zero,1c374 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c31c:	e0bffe04 	addi	r2,fp,-8
   1c320:	e13fff17 	ldw	r4,-4(fp)
   1c324:	100b883a 	mov	r5,r2
   1c328:	001c5840 	call	1c584 <alt_up_ps2_read_data_byte_timeout>
   1c32c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1c330:	e0bffd17 	ldw	r2,-12(fp)
   1c334:	10bfe318 	cmpnei	r2,r2,-116
   1c338:	1000041e 	bne	r2,zero,1c34c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1c33c:	e0bfff17 	ldw	r2,-4(fp)
   1c340:	00c00044 	movi	r3,1
   1c344:	10c00d15 	stw	r3,52(r2)
   1c348:	00000a06 	br	1c374 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1c34c:	e0bffd17 	ldw	r2,-12(fp)
   1c350:	1000081e 	bne	r2,zero,1c374 <alt_up_ps2_init+0xb0>
   1c354:	e0bffe03 	ldbu	r2,-8(fp)
   1c358:	10803fcc 	andi	r2,r2,255
   1c35c:	1000051e 	bne	r2,zero,1c374 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1c360:	e0bfff17 	ldw	r2,-4(fp)
   1c364:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1c368:	e13fff17 	ldw	r4,-4(fp)
   1c36c:	01403d04 	movi	r5,244
   1c370:	001c43c0 	call	1c43c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1c374:	e037883a 	mov	sp,fp
   1c378:	dfc00117 	ldw	ra,4(sp)
   1c37c:	df000017 	ldw	fp,0(sp)
   1c380:	dec00204 	addi	sp,sp,8
   1c384:	f800283a 	ret

0001c388 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c388:	defffd04 	addi	sp,sp,-12
   1c38c:	df000215 	stw	fp,8(sp)
   1c390:	df000204 	addi	fp,sp,8
   1c394:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c398:	e0bfff17 	ldw	r2,-4(fp)
   1c39c:	10800a17 	ldw	r2,40(r2)
   1c3a0:	10800104 	addi	r2,r2,4
   1c3a4:	10800037 	ldwio	r2,0(r2)
   1c3a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c3ac:	e0bffe17 	ldw	r2,-8(fp)
   1c3b0:	10800054 	ori	r2,r2,1
   1c3b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c3b8:	e0bfff17 	ldw	r2,-4(fp)
   1c3bc:	10800a17 	ldw	r2,40(r2)
   1c3c0:	10800104 	addi	r2,r2,4
   1c3c4:	1007883a 	mov	r3,r2
   1c3c8:	e0bffe17 	ldw	r2,-8(fp)
   1c3cc:	18800035 	stwio	r2,0(r3)
}
   1c3d0:	e037883a 	mov	sp,fp
   1c3d4:	df000017 	ldw	fp,0(sp)
   1c3d8:	dec00104 	addi	sp,sp,4
   1c3dc:	f800283a 	ret

0001c3e0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c3e0:	defffd04 	addi	sp,sp,-12
   1c3e4:	df000215 	stw	fp,8(sp)
   1c3e8:	df000204 	addi	fp,sp,8
   1c3ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c3f0:	e0bfff17 	ldw	r2,-4(fp)
   1c3f4:	10800a17 	ldw	r2,40(r2)
   1c3f8:	10800104 	addi	r2,r2,4
   1c3fc:	10800037 	ldwio	r2,0(r2)
   1c400:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c404:	e0fffe17 	ldw	r3,-8(fp)
   1c408:	00bfff84 	movi	r2,-2
   1c40c:	1884703a 	and	r2,r3,r2
   1c410:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c414:	e0bfff17 	ldw	r2,-4(fp)
   1c418:	10800a17 	ldw	r2,40(r2)
   1c41c:	10800104 	addi	r2,r2,4
   1c420:	1007883a 	mov	r3,r2
   1c424:	e0bffe17 	ldw	r2,-8(fp)
   1c428:	18800035 	stwio	r2,0(r3)
}
   1c42c:	e037883a 	mov	sp,fp
   1c430:	df000017 	ldw	fp,0(sp)
   1c434:	dec00104 	addi	sp,sp,4
   1c438:	f800283a 	ret

0001c43c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c43c:	defffb04 	addi	sp,sp,-20
   1c440:	dfc00415 	stw	ra,16(sp)
   1c444:	df000315 	stw	fp,12(sp)
   1c448:	df000304 	addi	fp,sp,12
   1c44c:	e13ffe15 	stw	r4,-8(fp)
   1c450:	2805883a 	mov	r2,r5
   1c454:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1c458:	e0bffe17 	ldw	r2,-8(fp)
   1c45c:	10800a17 	ldw	r2,40(r2)
   1c460:	1007883a 	mov	r3,r2
   1c464:	e0bfff03 	ldbu	r2,-4(fp)
   1c468:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1c46c:	e0bffe17 	ldw	r2,-8(fp)
   1c470:	10800a17 	ldw	r2,40(r2)
   1c474:	10800104 	addi	r2,r2,4
   1c478:	10800037 	ldwio	r2,0(r2)
   1c47c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1c480:	e13ffd17 	ldw	r4,-12(fp)
   1c484:	001c2000 	call	1c200 <read_CE_bit>
   1c488:	10803fcc 	andi	r2,r2,255
   1c48c:	10000226 	beq	r2,zero,1c498 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1c490:	00bffec4 	movi	r2,-5
   1c494:	00000106 	br	1c49c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1c498:	0005883a 	mov	r2,zero
}
   1c49c:	e037883a 	mov	sp,fp
   1c4a0:	dfc00117 	ldw	ra,4(sp)
   1c4a4:	df000017 	ldw	fp,0(sp)
   1c4a8:	dec00204 	addi	sp,sp,8
   1c4ac:	f800283a 	ret

0001c4b0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1c4b0:	defffc04 	addi	sp,sp,-16
   1c4b4:	dfc00315 	stw	ra,12(sp)
   1c4b8:	df000215 	stw	fp,8(sp)
   1c4bc:	df000204 	addi	fp,sp,8
   1c4c0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1c4c4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1c4c8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1c4cc:	e0bffe44 	addi	r2,fp,-7
   1c4d0:	e13fff17 	ldw	r4,-4(fp)
   1c4d4:	100b883a 	mov	r5,r2
   1c4d8:	001c5840 	call	1c584 <alt_up_ps2_read_data_byte_timeout>
   1c4dc:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1c4e0:	e0bffe03 	ldbu	r2,-8(fp)
   1c4e4:	1000061e 	bne	r2,zero,1c500 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1c4e8:	e0bffe43 	ldbu	r2,-7(fp)
   1c4ec:	10803fcc 	andi	r2,r2,255
   1c4f0:	10803e98 	cmpnei	r2,r2,250
   1c4f4:	1000041e 	bne	r2,zero,1c508 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1c4f8:	0005883a 	mov	r2,zero
   1c4fc:	00000306 	br	1c50c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1c500:	e0bffe03 	ldbu	r2,-8(fp)
   1c504:	00000106 	br	1c50c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1c508:	003ff006 	br	1c4cc <__alt_mem_Flash_flash_data+0xf401c4cc>
	return -ETIMEDOUT;
}
   1c50c:	e037883a 	mov	sp,fp
   1c510:	dfc00117 	ldw	ra,4(sp)
   1c514:	df000017 	ldw	fp,0(sp)
   1c518:	dec00204 	addi	sp,sp,8
   1c51c:	f800283a 	ret

0001c520 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c520:	defffa04 	addi	sp,sp,-24
   1c524:	dfc00515 	stw	ra,20(sp)
   1c528:	df000415 	stw	fp,16(sp)
   1c52c:	df000404 	addi	fp,sp,16
   1c530:	e13ffe15 	stw	r4,-8(fp)
   1c534:	2805883a 	mov	r2,r5
   1c538:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1c53c:	e0bfff03 	ldbu	r2,-4(fp)
   1c540:	e13ffe17 	ldw	r4,-8(fp)
   1c544:	100b883a 	mov	r5,r2
   1c548:	001c43c0 	call	1c43c <alt_up_ps2_write_data_byte>
   1c54c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1c550:	e0bffc17 	ldw	r2,-16(fp)
   1c554:	10000226 	beq	r2,zero,1c560 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1c558:	e0bffc17 	ldw	r2,-16(fp)
   1c55c:	00000406 	br	1c570 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1c560:	e13ffe17 	ldw	r4,-8(fp)
   1c564:	001c4b00 	call	1c4b0 <alt_up_ps2_wait_for_ack>
   1c568:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1c56c:	e0bffd17 	ldw	r2,-12(fp)
}
   1c570:	e037883a 	mov	sp,fp
   1c574:	dfc00117 	ldw	ra,4(sp)
   1c578:	df000017 	ldw	fp,0(sp)
   1c57c:	dec00204 	addi	sp,sp,8
   1c580:	f800283a 	ret

0001c584 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c584:	defffa04 	addi	sp,sp,-24
   1c588:	dfc00515 	stw	ra,20(sp)
   1c58c:	df000415 	stw	fp,16(sp)
   1c590:	df000404 	addi	fp,sp,16
   1c594:	e13ffe15 	stw	r4,-8(fp)
   1c598:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c59c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1c5a0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1c5a4:	e0bffc17 	ldw	r2,-16(fp)
   1c5a8:	10800044 	addi	r2,r2,1
   1c5ac:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c5b0:	e0bffe17 	ldw	r2,-8(fp)
   1c5b4:	10800a17 	ldw	r2,40(r2)
   1c5b8:	10800037 	ldwio	r2,0(r2)
   1c5bc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1c5c0:	e13ffd17 	ldw	r4,-12(fp)
   1c5c4:	001c2640 	call	1c264 <read_data_valid>
   1c5c8:	10803fcc 	andi	r2,r2,255
   1c5cc:	10000726 	beq	r2,zero,1c5ec <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1c5d0:	e13ffd17 	ldw	r4,-12(fp)
   1c5d4:	001c2980 	call	1c298 <read_data_byte>
   1c5d8:	1007883a 	mov	r3,r2
   1c5dc:	e0bfff17 	ldw	r2,-4(fp)
   1c5e0:	10c00005 	stb	r3,0(r2)
			return 0;
   1c5e4:	0005883a 	mov	r2,zero
   1c5e8:	00000a06 	br	1c614 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1c5ec:	e0bffe17 	ldw	r2,-8(fp)
   1c5f0:	10800c17 	ldw	r2,48(r2)
   1c5f4:	10000626 	beq	r2,zero,1c610 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1c5f8:	e0bffe17 	ldw	r2,-8(fp)
   1c5fc:	10c00c17 	ldw	r3,48(r2)
   1c600:	e0bffc17 	ldw	r2,-16(fp)
   1c604:	1880022e 	bgeu	r3,r2,1c610 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1c608:	00bfe304 	movi	r2,-116
   1c60c:	00000106 	br	1c614 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1c610:	003fe406 	br	1c5a4 <__alt_mem_Flash_flash_data+0xf401c5a4>
}
   1c614:	e037883a 	mov	sp,fp
   1c618:	dfc00117 	ldw	ra,4(sp)
   1c61c:	df000017 	ldw	fp,0(sp)
   1c620:	dec00204 	addi	sp,sp,8
   1c624:	f800283a 	ret

0001c628 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c628:	defffb04 	addi	sp,sp,-20
   1c62c:	dfc00415 	stw	ra,16(sp)
   1c630:	df000315 	stw	fp,12(sp)
   1c634:	df000304 	addi	fp,sp,12
   1c638:	e13ffe15 	stw	r4,-8(fp)
   1c63c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c640:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c644:	e0bffe17 	ldw	r2,-8(fp)
   1c648:	10800a17 	ldw	r2,40(r2)
   1c64c:	10800037 	ldwio	r2,0(r2)
   1c650:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1c654:	e13ffd17 	ldw	r4,-12(fp)
   1c658:	001c2640 	call	1c264 <read_data_valid>
   1c65c:	10803fcc 	andi	r2,r2,255
   1c660:	10000726 	beq	r2,zero,1c680 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1c664:	e13ffd17 	ldw	r4,-12(fp)
   1c668:	001c2980 	call	1c298 <read_data_byte>
   1c66c:	1007883a 	mov	r3,r2
   1c670:	e0bfff17 	ldw	r2,-4(fp)
   1c674:	10c00005 	stb	r3,0(r2)
		return 0;
   1c678:	0005883a 	mov	r2,zero
   1c67c:	00000106 	br	1c684 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1c680:	00bfffc4 	movi	r2,-1
}
   1c684:	e037883a 	mov	sp,fp
   1c688:	dfc00117 	ldw	ra,4(sp)
   1c68c:	df000017 	ldw	fp,0(sp)
   1c690:	dec00204 	addi	sp,sp,8
   1c694:	f800283a 	ret

0001c698 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1c698:	defffb04 	addi	sp,sp,-20
   1c69c:	dfc00415 	stw	ra,16(sp)
   1c6a0:	df000315 	stw	fp,12(sp)
   1c6a4:	df000304 	addi	fp,sp,12
   1c6a8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1c6ac:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1c6b0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c6b4:	e0bfff17 	ldw	r2,-4(fp)
   1c6b8:	10800a17 	ldw	r2,40(r2)
   1c6bc:	10800037 	ldwio	r2,0(r2)
   1c6c0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1c6c4:	e13ffe17 	ldw	r4,-8(fp)
   1c6c8:	001c2340 	call	1c234 <read_num_bytes_available>
   1c6cc:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1c6d0:	e0bffd0b 	ldhu	r2,-12(fp)
   1c6d4:	103ff71e 	bne	r2,zero,1c6b4 <__alt_mem_Flash_flash_data+0xf401c6b4>
}
   1c6d8:	e037883a 	mov	sp,fp
   1c6dc:	dfc00117 	ldw	ra,4(sp)
   1c6e0:	df000017 	ldw	fp,0(sp)
   1c6e4:	dec00204 	addi	sp,sp,8
   1c6e8:	f800283a 	ret

0001c6ec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c6ec:	defff804 	addi	sp,sp,-32
   1c6f0:	dfc00715 	stw	ra,28(sp)
   1c6f4:	df000615 	stw	fp,24(sp)
   1c6f8:	df000604 	addi	fp,sp,24
   1c6fc:	e13ffd15 	stw	r4,-12(fp)
   1c700:	e17ffe15 	stw	r5,-8(fp)
   1c704:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c708:	e0bffd17 	ldw	r2,-12(fp)
   1c70c:	10800017 	ldw	r2,0(r2)
   1c710:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1c714:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1c718:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1c71c:	e0fffc17 	ldw	r3,-16(fp)
   1c720:	e0bfff17 	ldw	r2,-4(fp)
   1c724:	18bffd16 	blt	r3,r2,1c71c <__alt_mem_Flash_flash_data+0xf401c71c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1c728:	e0bffe17 	ldw	r2,-8(fp)
   1c72c:	10c00044 	addi	r3,r2,1
   1c730:	e0fffe15 	stw	r3,-8(fp)
   1c734:	e13ffa17 	ldw	r4,-24(fp)
   1c738:	100b883a 	mov	r5,r2
   1c73c:	001c5840 	call	1c584 <alt_up_ps2_read_data_byte_timeout>
   1c740:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1c744:	e0bffb17 	ldw	r2,-20(fp)
   1c748:	10000226 	beq	r2,zero,1c754 <alt_up_ps2_read_fd+0x68>
			return count;
   1c74c:	e0bffc17 	ldw	r2,-16(fp)
   1c750:	00000406 	br	1c764 <alt_up_ps2_read_fd+0x78>
		count++;
   1c754:	e0bffc17 	ldw	r2,-16(fp)
   1c758:	10800044 	addi	r2,r2,1
   1c75c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1c760:	e0bffc17 	ldw	r2,-16(fp)
}
   1c764:	e037883a 	mov	sp,fp
   1c768:	dfc00117 	ldw	ra,4(sp)
   1c76c:	df000017 	ldw	fp,0(sp)
   1c770:	dec00204 	addi	sp,sp,8
   1c774:	f800283a 	ret

0001c778 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c778:	defff804 	addi	sp,sp,-32
   1c77c:	dfc00715 	stw	ra,28(sp)
   1c780:	df000615 	stw	fp,24(sp)
   1c784:	df000604 	addi	fp,sp,24
   1c788:	e13ffd15 	stw	r4,-12(fp)
   1c78c:	e17ffe15 	stw	r5,-8(fp)
   1c790:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c794:	e0bffd17 	ldw	r2,-12(fp)
   1c798:	10800017 	ldw	r2,0(r2)
   1c79c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1c7a0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1c7a4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1c7a8:	00001006 	br	1c7ec <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1c7ac:	e0bffe17 	ldw	r2,-8(fp)
   1c7b0:	10c00044 	addi	r3,r2,1
   1c7b4:	e0fffe15 	stw	r3,-8(fp)
   1c7b8:	10800003 	ldbu	r2,0(r2)
   1c7bc:	10803fcc 	andi	r2,r2,255
   1c7c0:	e13ffb17 	ldw	r4,-20(fp)
   1c7c4:	100b883a 	mov	r5,r2
   1c7c8:	001c43c0 	call	1c43c <alt_up_ps2_write_data_byte>
   1c7cc:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1c7d0:	e0bffc17 	ldw	r2,-16(fp)
   1c7d4:	10000226 	beq	r2,zero,1c7e0 <alt_up_ps2_write_fd+0x68>
			return count;
   1c7d8:	e0bffa17 	ldw	r2,-24(fp)
   1c7dc:	00000706 	br	1c7fc <alt_up_ps2_write_fd+0x84>
		count++;
   1c7e0:	e0bffa17 	ldw	r2,-24(fp)
   1c7e4:	10800044 	addi	r2,r2,1
   1c7e8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1c7ec:	e0fffa17 	ldw	r3,-24(fp)
   1c7f0:	e0bfff17 	ldw	r2,-4(fp)
   1c7f4:	18bfed16 	blt	r3,r2,1c7ac <__alt_mem_Flash_flash_data+0xf401c7ac>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1c7f8:	e0bffa17 	ldw	r2,-24(fp)
}
   1c7fc:	e037883a 	mov	sp,fp
   1c800:	dfc00117 	ldw	ra,4(sp)
   1c804:	df000017 	ldw	fp,0(sp)
   1c808:	dec00204 	addi	sp,sp,8
   1c80c:	f800283a 	ret

0001c810 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1c810:	defffc04 	addi	sp,sp,-16
   1c814:	dfc00315 	stw	ra,12(sp)
   1c818:	df000215 	stw	fp,8(sp)
   1c81c:	df000204 	addi	fp,sp,8
   1c820:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1c824:	e13fff17 	ldw	r4,-4(fp)
   1c828:	014000b4 	movhi	r5,2
   1c82c:	29455b04 	addi	r5,r5,5484
   1c830:	001d7a80 	call	1d7a8 <alt_find_dev>
   1c834:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c838:	e0bffe17 	ldw	r2,-8(fp)
}
   1c83c:	e037883a 	mov	sp,fp
   1c840:	dfc00117 	ldw	ra,4(sp)
   1c844:	df000017 	ldw	fp,0(sp)
   1c848:	dec00204 	addi	sp,sp,8
   1c84c:	f800283a 	ret

0001c850 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1c850:	defffd04 	addi	sp,sp,-12
   1c854:	df000215 	stw	fp,8(sp)
   1c858:	df000204 	addi	fp,sp,8
   1c85c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1c860:	e0bfff17 	ldw	r2,-4(fp)
   1c864:	10800a17 	ldw	r2,40(r2)
   1c868:	10800104 	addi	r2,r2,4
   1c86c:	10800037 	ldwio	r2,0(r2)
   1c870:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1c874:	e0bffe17 	ldw	r2,-8(fp)
   1c878:	10800054 	ori	r2,r2,1
   1c87c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1c880:	e0bfff17 	ldw	r2,-4(fp)
   1c884:	10800a17 	ldw	r2,40(r2)
   1c888:	10800104 	addi	r2,r2,4
   1c88c:	1007883a 	mov	r3,r2
   1c890:	e0bffe17 	ldw	r2,-8(fp)
   1c894:	18800035 	stwio	r2,0(r3)
}
   1c898:	e037883a 	mov	sp,fp
   1c89c:	df000017 	ldw	fp,0(sp)
   1c8a0:	dec00104 	addi	sp,sp,4
   1c8a4:	f800283a 	ret

0001c8a8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1c8a8:	defffd04 	addi	sp,sp,-12
   1c8ac:	df000215 	stw	fp,8(sp)
   1c8b0:	df000204 	addi	fp,sp,8
   1c8b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1c8b8:	e0bfff17 	ldw	r2,-4(fp)
   1c8bc:	10800a17 	ldw	r2,40(r2)
   1c8c0:	10800104 	addi	r2,r2,4
   1c8c4:	10800037 	ldwio	r2,0(r2)
   1c8c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1c8cc:	e0fffe17 	ldw	r3,-8(fp)
   1c8d0:	00bfff84 	movi	r2,-2
   1c8d4:	1884703a 	and	r2,r3,r2
   1c8d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1c8dc:	e0bfff17 	ldw	r2,-4(fp)
   1c8e0:	10800a17 	ldw	r2,40(r2)
   1c8e4:	10800104 	addi	r2,r2,4
   1c8e8:	1007883a 	mov	r3,r2
   1c8ec:	e0bffe17 	ldw	r2,-8(fp)
   1c8f0:	18800035 	stwio	r2,0(r3)
}
   1c8f4:	e037883a 	mov	sp,fp
   1c8f8:	df000017 	ldw	fp,0(sp)
   1c8fc:	dec00104 	addi	sp,sp,4
   1c900:	f800283a 	ret

0001c904 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1c904:	defffd04 	addi	sp,sp,-12
   1c908:	df000215 	stw	fp,8(sp)
   1c90c:	df000204 	addi	fp,sp,8
   1c910:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1c914:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1c918:	e0bfff17 	ldw	r2,-4(fp)
   1c91c:	10800a17 	ldw	r2,40(r2)
   1c920:	10800084 	addi	r2,r2,2
   1c924:	1080002b 	ldhuio	r2,0(r2)
   1c928:	10bfffcc 	andi	r2,r2,65535
   1c92c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1c930:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c934:	e037883a 	mov	sp,fp
   1c938:	df000017 	ldw	fp,0(sp)
   1c93c:	dec00104 	addi	sp,sp,4
   1c940:	f800283a 	ret

0001c944 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1c944:	defffd04 	addi	sp,sp,-12
   1c948:	df000215 	stw	fp,8(sp)
   1c94c:	df000204 	addi	fp,sp,8
   1c950:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1c954:	e0bfff17 	ldw	r2,-4(fp)
   1c958:	10800a17 	ldw	r2,40(r2)
   1c95c:	10800104 	addi	r2,r2,4
   1c960:	10800037 	ldwio	r2,0(r2)
   1c964:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1c968:	e0bffe17 	ldw	r2,-8(fp)
   1c96c:	1004d43a 	srli	r2,r2,16
}
   1c970:	e037883a 	mov	sp,fp
   1c974:	df000017 	ldw	fp,0(sp)
   1c978:	dec00104 	addi	sp,sp,4
   1c97c:	f800283a 	ret

0001c980 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1c980:	defffd04 	addi	sp,sp,-12
   1c984:	df000215 	stw	fp,8(sp)
   1c988:	df000204 	addi	fp,sp,8
   1c98c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1c990:	e0bfff17 	ldw	r2,-4(fp)
   1c994:	1080800c 	andi	r2,r2,512
   1c998:	1004d27a 	srli	r2,r2,9
   1c99c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c9a0:	e0bffe17 	ldw	r2,-8(fp)
   1c9a4:	10000226 	beq	r2,zero,1c9b0 <alt_up_rs232_check_parity+0x30>
   1c9a8:	00bfffc4 	movi	r2,-1
   1c9ac:	00000106 	br	1c9b4 <alt_up_rs232_check_parity+0x34>
   1c9b0:	0005883a 	mov	r2,zero
}
   1c9b4:	e037883a 	mov	sp,fp
   1c9b8:	df000017 	ldw	fp,0(sp)
   1c9bc:	dec00104 	addi	sp,sp,4
   1c9c0:	f800283a 	ret

0001c9c4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1c9c4:	defffd04 	addi	sp,sp,-12
   1c9c8:	df000215 	stw	fp,8(sp)
   1c9cc:	df000204 	addi	fp,sp,8
   1c9d0:	e13ffe15 	stw	r4,-8(fp)
   1c9d4:	2805883a 	mov	r2,r5
   1c9d8:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1c9dc:	e0bffe17 	ldw	r2,-8(fp)
   1c9e0:	10800a17 	ldw	r2,40(r2)
   1c9e4:	1007883a 	mov	r3,r2
   1c9e8:	e0bfff03 	ldbu	r2,-4(fp)
   1c9ec:	18800035 	stwio	r2,0(r3)
	return 0;
   1c9f0:	0005883a 	mov	r2,zero
}
   1c9f4:	e037883a 	mov	sp,fp
   1c9f8:	df000017 	ldw	fp,0(sp)
   1c9fc:	dec00104 	addi	sp,sp,4
   1ca00:	f800283a 	ret

0001ca04 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ca04:	defffa04 	addi	sp,sp,-24
   1ca08:	dfc00515 	stw	ra,20(sp)
   1ca0c:	df000415 	stw	fp,16(sp)
   1ca10:	df000404 	addi	fp,sp,16
   1ca14:	e13ffd15 	stw	r4,-12(fp)
   1ca18:	e17ffe15 	stw	r5,-8(fp)
   1ca1c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1ca20:	e0bffd17 	ldw	r2,-12(fp)
   1ca24:	10800a17 	ldw	r2,40(r2)
   1ca28:	10800037 	ldwio	r2,0(r2)
   1ca2c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1ca30:	e0bffc17 	ldw	r2,-16(fp)
   1ca34:	1007883a 	mov	r3,r2
   1ca38:	e0bffe17 	ldw	r2,-8(fp)
   1ca3c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1ca40:	e13ffc17 	ldw	r4,-16(fp)
   1ca44:	001c9800 	call	1c980 <alt_up_rs232_check_parity>
   1ca48:	1007883a 	mov	r3,r2
   1ca4c:	e0bfff17 	ldw	r2,-4(fp)
   1ca50:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1ca54:	e0bffc17 	ldw	r2,-16(fp)
   1ca58:	10a0000c 	andi	r2,r2,32768
   1ca5c:	1004d3fa 	srli	r2,r2,15
   1ca60:	10bfffc4 	addi	r2,r2,-1
}
   1ca64:	e037883a 	mov	sp,fp
   1ca68:	dfc00117 	ldw	ra,4(sp)
   1ca6c:	df000017 	ldw	fp,0(sp)
   1ca70:	dec00204 	addi	sp,sp,8
   1ca74:	f800283a 	ret

0001ca78 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1ca78:	defff804 	addi	sp,sp,-32
   1ca7c:	dfc00715 	stw	ra,28(sp)
   1ca80:	df000615 	stw	fp,24(sp)
   1ca84:	df000604 	addi	fp,sp,24
   1ca88:	e13ffd15 	stw	r4,-12(fp)
   1ca8c:	e17ffe15 	stw	r5,-8(fp)
   1ca90:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ca94:	e0bffd17 	ldw	r2,-12(fp)
   1ca98:	10800017 	ldw	r2,0(r2)
   1ca9c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1caa0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1caa4:	00000e06 	br	1cae0 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1caa8:	e0bffe17 	ldw	r2,-8(fp)
   1caac:	10c00044 	addi	r3,r2,1
   1cab0:	e0fffe15 	stw	r3,-8(fp)
   1cab4:	e0fffc04 	addi	r3,fp,-16
   1cab8:	e13ffb17 	ldw	r4,-20(fp)
   1cabc:	100b883a 	mov	r5,r2
   1cac0:	180d883a 	mov	r6,r3
   1cac4:	001ca040 	call	1ca04 <alt_up_rs232_read_data>
   1cac8:	1000041e 	bne	r2,zero,1cadc <alt_up_rs232_read_fd+0x64>
			count++;
   1cacc:	e0bffa17 	ldw	r2,-24(fp)
   1cad0:	10800044 	addi	r2,r2,1
   1cad4:	e0bffa15 	stw	r2,-24(fp)
   1cad8:	00000106 	br	1cae0 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1cadc:	00000406 	br	1caf0 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1cae0:	e0bfff17 	ldw	r2,-4(fp)
   1cae4:	10ffffc4 	addi	r3,r2,-1
   1cae8:	e0ffff15 	stw	r3,-4(fp)
   1caec:	103fee1e 	bne	r2,zero,1caa8 <__alt_mem_Flash_flash_data+0xf401caa8>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1caf0:	e0bffa17 	ldw	r2,-24(fp)
}
   1caf4:	e037883a 	mov	sp,fp
   1caf8:	dfc00117 	ldw	ra,4(sp)
   1cafc:	df000017 	ldw	fp,0(sp)
   1cb00:	dec00204 	addi	sp,sp,8
   1cb04:	f800283a 	ret

0001cb08 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1cb08:	defff904 	addi	sp,sp,-28
   1cb0c:	dfc00615 	stw	ra,24(sp)
   1cb10:	df000515 	stw	fp,20(sp)
   1cb14:	df000504 	addi	fp,sp,20
   1cb18:	e13ffd15 	stw	r4,-12(fp)
   1cb1c:	e17ffe15 	stw	r5,-8(fp)
   1cb20:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1cb24:	e0bffd17 	ldw	r2,-12(fp)
   1cb28:	10800017 	ldw	r2,0(r2)
   1cb2c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1cb30:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1cb34:	00000f06 	br	1cb74 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1cb38:	e0bffe17 	ldw	r2,-8(fp)
   1cb3c:	10800003 	ldbu	r2,0(r2)
   1cb40:	10803fcc 	andi	r2,r2,255
   1cb44:	e13ffc17 	ldw	r4,-16(fp)
   1cb48:	100b883a 	mov	r5,r2
   1cb4c:	001c9c40 	call	1c9c4 <alt_up_rs232_write_data>
   1cb50:	1000071e 	bne	r2,zero,1cb70 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1cb54:	e0bffb17 	ldw	r2,-20(fp)
   1cb58:	10800044 	addi	r2,r2,1
   1cb5c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1cb60:	e0bffe17 	ldw	r2,-8(fp)
   1cb64:	10800044 	addi	r2,r2,1
   1cb68:	e0bffe15 	stw	r2,-8(fp)
   1cb6c:	00000106 	br	1cb74 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1cb70:	00000406 	br	1cb84 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1cb74:	e0bfff17 	ldw	r2,-4(fp)
   1cb78:	10ffffc4 	addi	r3,r2,-1
   1cb7c:	e0ffff15 	stw	r3,-4(fp)
   1cb80:	103fed1e 	bne	r2,zero,1cb38 <__alt_mem_Flash_flash_data+0xf401cb38>
			ptr++;
		}
		else
			break;
	}
	return count;
   1cb84:	e0bffb17 	ldw	r2,-20(fp)
}
   1cb88:	e037883a 	mov	sp,fp
   1cb8c:	dfc00117 	ldw	ra,4(sp)
   1cb90:	df000017 	ldw	fp,0(sp)
   1cb94:	dec00204 	addi	sp,sp,8
   1cb98:	f800283a 	ret

0001cb9c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1cb9c:	defffc04 	addi	sp,sp,-16
   1cba0:	dfc00315 	stw	ra,12(sp)
   1cba4:	df000215 	stw	fp,8(sp)
   1cba8:	df000204 	addi	fp,sp,8
   1cbac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1cbb0:	e13fff17 	ldw	r4,-4(fp)
   1cbb4:	014000b4 	movhi	r5,2
   1cbb8:	29455b04 	addi	r5,r5,5484
   1cbbc:	001d7a80 	call	1d7a8 <alt_find_dev>
   1cbc0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cbc4:	e0bffe17 	ldw	r2,-8(fp)
}
   1cbc8:	e037883a 	mov	sp,fp
   1cbcc:	dfc00117 	ldw	ra,4(sp)
   1cbd0:	df000017 	ldw	fp,0(sp)
   1cbd4:	dec00204 	addi	sp,sp,8
   1cbd8:	f800283a 	ret

0001cbdc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1cbdc:	defffc04 	addi	sp,sp,-16
   1cbe0:	dfc00315 	stw	ra,12(sp)
   1cbe4:	df000215 	stw	fp,8(sp)
   1cbe8:	df000204 	addi	fp,sp,8
   1cbec:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1cbf0:	e0bfff17 	ldw	r2,-4(fp)
   1cbf4:	10800217 	ldw	r2,8(r2)
   1cbf8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1cbfc:	00000b06 	br	1cc2c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1cc00:	e13ffe17 	ldw	r4,-8(fp)
   1cc04:	014000b4 	movhi	r5,2
   1cc08:	297c6104 	addi	r5,r5,-3708
   1cc0c:	0001e500 	call	1e50 <strcmp>
   1cc10:	1000031e 	bne	r2,zero,1cc20 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1cc14:	e0bffe17 	ldw	r2,-8(fp)
   1cc18:	10000005 	stb	zero,0(r2)
			break;
   1cc1c:	00000906 	br	1cc44 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1cc20:	e0bffe17 	ldw	r2,-8(fp)
   1cc24:	10800044 	addi	r2,r2,1
   1cc28:	e0bffe15 	stw	r2,-8(fp)
   1cc2c:	e0bffe17 	ldw	r2,-8(fp)
   1cc30:	10800003 	ldbu	r2,0(r2)
   1cc34:	10803fcc 	andi	r2,r2,255
   1cc38:	1080201c 	xori	r2,r2,128
   1cc3c:	10bfe004 	addi	r2,r2,-128
   1cc40:	103fef1e 	bne	r2,zero,1cc00 <__alt_mem_Flash_flash_data+0xf401cc00>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1cc44:	0001883a 	nop
}
   1cc48:	e037883a 	mov	sp,fp
   1cc4c:	dfc00117 	ldw	ra,4(sp)
   1cc50:	df000017 	ldw	fp,0(sp)
   1cc54:	dec00204 	addi	sp,sp,8
   1cc58:	f800283a 	ret

0001cc5c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1cc5c:	defffc04 	addi	sp,sp,-16
   1cc60:	dfc00315 	stw	ra,12(sp)
   1cc64:	df000215 	stw	fp,8(sp)
   1cc68:	df000204 	addi	fp,sp,8
   1cc6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1cc70:	e13fff17 	ldw	r4,-4(fp)
   1cc74:	014000b4 	movhi	r5,2
   1cc78:	29455b04 	addi	r5,r5,5484
   1cc7c:	001d7a80 	call	1d7a8 <alt_find_dev>
   1cc80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cc84:	e0bffe17 	ldw	r2,-8(fp)
}
   1cc88:	e037883a 	mov	sp,fp
   1cc8c:	dfc00117 	ldw	ra,4(sp)
   1cc90:	df000017 	ldw	fp,0(sp)
   1cc94:	dec00204 	addi	sp,sp,8
   1cc98:	f800283a 	ret

0001cc9c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1cc9c:	defffa04 	addi	sp,sp,-24
   1cca0:	df000515 	stw	fp,20(sp)
   1cca4:	df000504 	addi	fp,sp,20
   1cca8:	e13ffc15 	stw	r4,-16(fp)
   1ccac:	2805883a 	mov	r2,r5
   1ccb0:	e1bffe15 	stw	r6,-8(fp)
   1ccb4:	e1ffff15 	stw	r7,-4(fp)
   1ccb8:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1ccbc:	e0bffc17 	ldw	r2,-16(fp)
   1ccc0:	10800c17 	ldw	r2,48(r2)
   1ccc4:	e0fffe17 	ldw	r3,-8(fp)
   1ccc8:	1880042e 	bgeu	r3,r2,1ccdc <alt_up_char_buffer_draw+0x40>
   1cccc:	e0bffc17 	ldw	r2,-16(fp)
   1ccd0:	10800d17 	ldw	r2,52(r2)
   1ccd4:	e0ffff17 	ldw	r3,-4(fp)
   1ccd8:	18800236 	bltu	r3,r2,1cce4 <alt_up_char_buffer_draw+0x48>
		return -1;
   1ccdc:	00bfffc4 	movi	r2,-1
   1cce0:	00001d06 	br	1cd58 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1cce4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1cce8:	e0bffc17 	ldw	r2,-16(fp)
   1ccec:	10c00f17 	ldw	r3,60(r2)
   1ccf0:	e0bffe17 	ldw	r2,-8(fp)
   1ccf4:	1884703a 	and	r2,r3,r2
   1ccf8:	e0fffc17 	ldw	r3,-16(fp)
   1ccfc:	18c00e17 	ldw	r3,56(r3)
   1cd00:	10c4983a 	sll	r2,r2,r3
   1cd04:	e0fffb17 	ldw	r3,-20(fp)
   1cd08:	1884b03a 	or	r2,r3,r2
   1cd0c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1cd10:	e0bffc17 	ldw	r2,-16(fp)
   1cd14:	10c01117 	ldw	r3,68(r2)
   1cd18:	e0bfff17 	ldw	r2,-4(fp)
   1cd1c:	1884703a 	and	r2,r3,r2
   1cd20:	e0fffc17 	ldw	r3,-16(fp)
   1cd24:	18c01017 	ldw	r3,64(r3)
   1cd28:	10c4983a 	sll	r2,r2,r3
   1cd2c:	e0fffb17 	ldw	r3,-20(fp)
   1cd30:	1884b03a 	or	r2,r3,r2
   1cd34:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1cd38:	e0bffc17 	ldw	r2,-16(fp)
   1cd3c:	10c00b17 	ldw	r3,44(r2)
   1cd40:	e0bffb17 	ldw	r2,-20(fp)
   1cd44:	1885883a 	add	r2,r3,r2
   1cd48:	1007883a 	mov	r3,r2
   1cd4c:	e0bffd03 	ldbu	r2,-12(fp)
   1cd50:	18800025 	stbio	r2,0(r3)

	return 0;
   1cd54:	0005883a 	mov	r2,zero
}
   1cd58:	e037883a 	mov	sp,fp
   1cd5c:	df000017 	ldw	fp,0(sp)
   1cd60:	dec00104 	addi	sp,sp,4
   1cd64:	f800283a 	ret

0001cd68 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1cd68:	defffa04 	addi	sp,sp,-24
   1cd6c:	df000515 	stw	fp,20(sp)
   1cd70:	df000504 	addi	fp,sp,20
   1cd74:	e13ffc15 	stw	r4,-16(fp)
   1cd78:	e17ffd15 	stw	r5,-12(fp)
   1cd7c:	e1bffe15 	stw	r6,-8(fp)
   1cd80:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1cd84:	e0bffc17 	ldw	r2,-16(fp)
   1cd88:	10800c17 	ldw	r2,48(r2)
   1cd8c:	e0fffe17 	ldw	r3,-8(fp)
   1cd90:	1880042e 	bgeu	r3,r2,1cda4 <alt_up_char_buffer_string+0x3c>
   1cd94:	e0bffc17 	ldw	r2,-16(fp)
   1cd98:	10800d17 	ldw	r2,52(r2)
   1cd9c:	e0ffff17 	ldw	r3,-4(fp)
   1cda0:	18800236 	bltu	r3,r2,1cdac <alt_up_char_buffer_string+0x44>
		return -1;
   1cda4:	00bfffc4 	movi	r2,-1
   1cda8:	00002b06 	br	1ce58 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1cdac:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1cdb0:	e0bffc17 	ldw	r2,-16(fp)
   1cdb4:	10801017 	ldw	r2,64(r2)
   1cdb8:	1007883a 	mov	r3,r2
   1cdbc:	e0bfff17 	ldw	r2,-4(fp)
   1cdc0:	10c6983a 	sll	r3,r2,r3
   1cdc4:	e0bffe17 	ldw	r2,-8(fp)
   1cdc8:	1885883a 	add	r2,r3,r2
   1cdcc:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1cdd0:	00001a06 	br	1ce3c <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1cdd4:	e0bffc17 	ldw	r2,-16(fp)
   1cdd8:	10c00b17 	ldw	r3,44(r2)
   1cddc:	e0bffb17 	ldw	r2,-20(fp)
   1cde0:	1885883a 	add	r2,r3,r2
   1cde4:	1007883a 	mov	r3,r2
   1cde8:	e0bffd17 	ldw	r2,-12(fp)
   1cdec:	10800003 	ldbu	r2,0(r2)
   1cdf0:	10803fcc 	andi	r2,r2,255
   1cdf4:	1080201c 	xori	r2,r2,128
   1cdf8:	10bfe004 	addi	r2,r2,-128
   1cdfc:	18800025 	stbio	r2,0(r3)
		++ptr;
   1ce00:	e0bffd17 	ldw	r2,-12(fp)
   1ce04:	10800044 	addi	r2,r2,1
   1ce08:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1ce0c:	e0bffe17 	ldw	r2,-8(fp)
   1ce10:	10800044 	addi	r2,r2,1
   1ce14:	e0bffe15 	stw	r2,-8(fp)
   1ce18:	e0bffc17 	ldw	r2,-16(fp)
   1ce1c:	10800c17 	ldw	r2,48(r2)
   1ce20:	e0fffe17 	ldw	r3,-8(fp)
   1ce24:	18800236 	bltu	r3,r2,1ce30 <alt_up_char_buffer_string+0xc8>
			return -1;
   1ce28:	00bfffc4 	movi	r2,-1
   1ce2c:	00000a06 	br	1ce58 <alt_up_char_buffer_string+0xf0>
		++offset;
   1ce30:	e0bffb17 	ldw	r2,-20(fp)
   1ce34:	10800044 	addi	r2,r2,1
   1ce38:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1ce3c:	e0bffd17 	ldw	r2,-12(fp)
   1ce40:	10800003 	ldbu	r2,0(r2)
   1ce44:	10803fcc 	andi	r2,r2,255
   1ce48:	1080201c 	xori	r2,r2,128
   1ce4c:	10bfe004 	addi	r2,r2,-128
   1ce50:	103fe01e 	bne	r2,zero,1cdd4 <__alt_mem_Flash_flash_data+0xf401cdd4>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1ce54:	0005883a 	mov	r2,zero
}
   1ce58:	e037883a 	mov	sp,fp
   1ce5c:	df000017 	ldw	fp,0(sp)
   1ce60:	dec00104 	addi	sp,sp,4
   1ce64:	f800283a 	ret

0001ce68 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1ce68:	defffe04 	addi	sp,sp,-8
   1ce6c:	df000115 	stw	fp,4(sp)
   1ce70:	df000104 	addi	fp,sp,4
   1ce74:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1ce78:	e0bfff17 	ldw	r2,-4(fp)
   1ce7c:	10800a17 	ldw	r2,40(r2)
   1ce80:	10800084 	addi	r2,r2,2
   1ce84:	1007883a 	mov	r3,r2
   1ce88:	00800044 	movi	r2,1
   1ce8c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1ce90:	0001883a 	nop
   1ce94:	e0bfff17 	ldw	r2,-4(fp)
   1ce98:	10800a17 	ldw	r2,40(r2)
   1ce9c:	10800084 	addi	r2,r2,2
   1cea0:	10800023 	ldbuio	r2,0(r2)
   1cea4:	10803fcc 	andi	r2,r2,255
   1cea8:	1080004c 	andi	r2,r2,1
   1ceac:	103ff91e 	bne	r2,zero,1ce94 <__alt_mem_Flash_flash_data+0xf401ce94>
	return 0;
   1ceb0:	0005883a 	mov	r2,zero
}
   1ceb4:	e037883a 	mov	sp,fp
   1ceb8:	df000017 	ldw	fp,0(sp)
   1cebc:	dec00104 	addi	sp,sp,4
   1cec0:	f800283a 	ret

0001cec4 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   1cec4:	defffd04 	addi	sp,sp,-12
   1cec8:	df000215 	stw	fp,8(sp)
   1cecc:	df000204 	addi	fp,sp,8
   1ced0:	2005883a 	mov	r2,r4
   1ced4:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1ced8:	e03ffe15 	stw	zero,-8(fp)
   1cedc:	00000d06 	br	1cf14 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   1cee0:	008000b4 	movhi	r2,2
   1cee4:	10853004 	addi	r2,r2,5312
   1cee8:	e0fffe17 	ldw	r3,-8(fp)
   1ceec:	10c5883a 	add	r2,r2,r3
   1cef0:	10800003 	ldbu	r2,0(r2)
   1cef4:	10c03fcc 	andi	r3,r2,255
   1cef8:	e0bfff03 	ldbu	r2,-4(fp)
   1cefc:	1880021e 	bne	r3,r2,1cf08 <get_multi_byte_make_code_index+0x44>
			return i;
   1cf00:	e0bffe17 	ldw	r2,-8(fp)
   1cf04:	00000706 	br	1cf24 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1cf08:	e0bffe17 	ldw	r2,-8(fp)
   1cf0c:	10800044 	addi	r2,r2,1
   1cf10:	e0bffe15 	stw	r2,-8(fp)
   1cf14:	e0bffe17 	ldw	r2,-8(fp)
   1cf18:	108019b0 	cmpltui	r2,r2,102
   1cf1c:	103ff01e 	bne	r2,zero,1cee0 <__alt_mem_Flash_flash_data+0xf401cee0>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1cf20:	00801984 	movi	r2,102
}
   1cf24:	e037883a 	mov	sp,fp
   1cf28:	df000017 	ldw	fp,0(sp)
   1cf2c:	dec00104 	addi	sp,sp,4
   1cf30:	f800283a 	ret

0001cf34 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   1cf34:	defffd04 	addi	sp,sp,-12
   1cf38:	df000215 	stw	fp,8(sp)
   1cf3c:	df000204 	addi	fp,sp,8
   1cf40:	2005883a 	mov	r2,r4
   1cf44:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1cf48:	e03ffe15 	stw	zero,-8(fp)
   1cf4c:	00000d06 	br	1cf84 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   1cf50:	008000b4 	movhi	r2,2
   1cf54:	10851684 	addi	r2,r2,5210
   1cf58:	e0fffe17 	ldw	r3,-8(fp)
   1cf5c:	10c5883a 	add	r2,r2,r3
   1cf60:	10800003 	ldbu	r2,0(r2)
   1cf64:	10c03fcc 	andi	r3,r2,255
   1cf68:	e0bfff03 	ldbu	r2,-4(fp)
   1cf6c:	1880021e 	bne	r3,r2,1cf78 <get_single_byte_make_code_index+0x44>
			return i;
   1cf70:	e0bffe17 	ldw	r2,-8(fp)
   1cf74:	00000706 	br	1cf94 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1cf78:	e0bffe17 	ldw	r2,-8(fp)
   1cf7c:	10800044 	addi	r2,r2,1
   1cf80:	e0bffe15 	stw	r2,-8(fp)
   1cf84:	e0bffe17 	ldw	r2,-8(fp)
   1cf88:	108019b0 	cmpltui	r2,r2,102
   1cf8c:	103ff01e 	bne	r2,zero,1cf50 <__alt_mem_Flash_flash_data+0xf401cf50>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1cf90:	00801984 	movi	r2,102
}
   1cf94:	e037883a 	mov	sp,fp
   1cf98:	df000017 	ldw	fp,0(sp)
   1cf9c:	dec00104 	addi	sp,sp,4
   1cfa0:	f800283a 	ret

0001cfa4 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1cfa4:	defff804 	addi	sp,sp,-32
   1cfa8:	dfc00715 	stw	ra,28(sp)
   1cfac:	df000615 	stw	fp,24(sp)
   1cfb0:	df000604 	addi	fp,sp,24
   1cfb4:	e13ffc15 	stw	r4,-16(fp)
   1cfb8:	2805883a 	mov	r2,r5
   1cfbc:	e1bffe15 	stw	r6,-8(fp)
   1cfc0:	e1ffff15 	stw	r7,-4(fp)
   1cfc4:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   1cfc8:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   1cfcc:	00801984 	movi	r2,102
   1cfd0:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   1cfd4:	e0800217 	ldw	r2,8(fp)
   1cfd8:	10000005 	stb	zero,0(r2)
	switch (state)
   1cfdc:	e0bffc17 	ldw	r2,-16(fp)
   1cfe0:	10c00060 	cmpeqi	r3,r2,1
   1cfe4:	18003a1e 	bne	r3,zero,1d0d0 <get_next_state+0x12c>
   1cfe8:	0080052e 	bgeu	zero,r2,1d000 <get_next_state+0x5c>
   1cfec:	10c000a0 	cmpeqi	r3,r2,2
   1cff0:	18004c1e 	bne	r3,zero,1d124 <get_next_state+0x180>
   1cff4:	108000e0 	cmpeqi	r2,r2,3
   1cff8:	10005f1e 	bne	r2,zero,1d178 <get_next_state+0x1d4>
   1cffc:	00007306 	br	1d1cc <get_next_state+0x228>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   1d000:	e0bffd03 	ldbu	r2,-12(fp)
   1d004:	10803818 	cmpnei	r2,r2,224
   1d008:	1000031e 	bne	r2,zero,1d018 <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   1d00c:	00800044 	movi	r2,1
   1d010:	e0bffa15 	stw	r2,-24(fp)
   1d014:	00002d06 	br	1d0cc <get_next_state+0x128>
			}
			else if (byte == 0xF0)
   1d018:	e0bffd03 	ldbu	r2,-12(fp)
   1d01c:	10803c18 	cmpnei	r2,r2,240
   1d020:	1000031e 	bne	r2,zero,1d030 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   1d024:	00800084 	movi	r2,2
   1d028:	e0bffa15 	stw	r2,-24(fp)
   1d02c:	00002706 	br	1d0cc <get_next_state+0x128>
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   1d030:	e0bffd03 	ldbu	r2,-12(fp)
   1d034:	1009883a 	mov	r4,r2
   1d038:	001cf340 	call	1cf34 <get_single_byte_make_code_index>
   1d03c:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   1d040:	e0bffb17 	ldw	r2,-20(fp)
   1d044:	10800a30 	cmpltui	r2,r2,40
   1d048:	1000061e 	bne	r2,zero,1d064 <get_next_state+0xc0>
   1d04c:	e0bffb17 	ldw	r2,-20(fp)
   1d050:	10801120 	cmpeqi	r2,r2,68
   1d054:	1000031e 	bne	r2,zero,1d064 <get_next_state+0xc0>
   1d058:	e0bffb17 	ldw	r2,-20(fp)
   1d05c:	10801430 	cmpltui	r2,r2,80
   1d060:	1000111e 	bne	r2,zero,1d0a8 <get_next_state+0x104>
   1d064:	e0bffb17 	ldw	r2,-20(fp)
   1d068:	108019a0 	cmpeqi	r2,r2,102
   1d06c:	10000e1e 	bne	r2,zero,1d0a8 <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   1d070:	e0bffe17 	ldw	r2,-8(fp)
   1d074:	00c00044 	movi	r3,1
   1d078:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   1d07c:	008000b4 	movhi	r2,2
   1d080:	1084fd04 	addi	r2,r2,5108
   1d084:	e0fffb17 	ldw	r3,-20(fp)
   1d088:	10c5883a 	add	r2,r2,r3
   1d08c:	10c00003 	ldbu	r3,0(r2)
   1d090:	e0800217 	ldw	r2,8(fp)
   1d094:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   1d098:	e0bfff17 	ldw	r2,-4(fp)
   1d09c:	e0fffd03 	ldbu	r3,-12(fp)
   1d0a0:	10c00005 	stb	r3,0(r2)
   1d0a4:	00000606 	br	1d0c0 <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   1d0a8:	e0bffe17 	ldw	r2,-8(fp)
   1d0ac:	00c00084 	movi	r3,2
   1d0b0:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   1d0b4:	e0bfff17 	ldw	r2,-4(fp)
   1d0b8:	e0fffd03 	ldbu	r3,-12(fp)
   1d0bc:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   1d0c0:	00800104 	movi	r2,4
   1d0c4:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1d0c8:	00004406 	br	1d1dc <get_next_state+0x238>
   1d0cc:	00004306 	br	1d1dc <get_next_state+0x238>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   1d0d0:	e0bffd03 	ldbu	r2,-12(fp)
   1d0d4:	10803c20 	cmpeqi	r2,r2,240
   1d0d8:	10000c1e 	bne	r2,zero,1d10c <get_next_state+0x168>
   1d0dc:	e0bffd03 	ldbu	r2,-12(fp)
   1d0e0:	10803820 	cmpeqi	r2,r2,224
   1d0e4:	1000091e 	bne	r2,zero,1d10c <get_next_state+0x168>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   1d0e8:	e0bffe17 	ldw	r2,-8(fp)
   1d0ec:	00c000c4 	movi	r3,3
   1d0f0:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d0f4:	e0bfff17 	ldw	r2,-4(fp)
   1d0f8:	e0fffd03 	ldbu	r3,-12(fp)
   1d0fc:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d100:	00800104 	movi	r2,4
   1d104:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   1d108:	00003406 	br	1d1dc <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   1d10c:	e0bffe17 	ldw	r2,-8(fp)
   1d110:	00c00104 	movi	r3,4
   1d114:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   1d118:	008000c4 	movi	r2,3
   1d11c:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1d120:	00002e06 	br	1d1dc <get_next_state+0x238>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1d124:	e0bffd03 	ldbu	r2,-12(fp)
   1d128:	10803c20 	cmpeqi	r2,r2,240
   1d12c:	10000c1e 	bne	r2,zero,1d160 <get_next_state+0x1bc>
   1d130:	e0bffd03 	ldbu	r2,-12(fp)
   1d134:	10803820 	cmpeqi	r2,r2,224
   1d138:	1000091e 	bne	r2,zero,1d160 <get_next_state+0x1bc>
			{
				*decode_mode = KB_BREAK_CODE;
   1d13c:	e0bffe17 	ldw	r2,-8(fp)
   1d140:	00c00104 	movi	r3,4
   1d144:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d148:	e0bfff17 	ldw	r2,-4(fp)
   1d14c:	e0fffd03 	ldbu	r3,-12(fp)
   1d150:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d154:	00800104 	movi	r2,4
   1d158:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   1d15c:	00001f06 	br	1d1dc <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   1d160:	00800084 	movi	r2,2
   1d164:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   1d168:	e0bffe17 	ldw	r2,-8(fp)
   1d16c:	00c00104 	movi	r3,4
   1d170:	10c00015 	stw	r3,0(r2)
			}
			break;
   1d174:	00001906 	br	1d1dc <get_next_state+0x238>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1d178:	e0bffd03 	ldbu	r2,-12(fp)
   1d17c:	10803c20 	cmpeqi	r2,r2,240
   1d180:	10000c1e 	bne	r2,zero,1d1b4 <get_next_state+0x210>
   1d184:	e0bffd03 	ldbu	r2,-12(fp)
   1d188:	10803820 	cmpeqi	r2,r2,224
   1d18c:	1000091e 	bne	r2,zero,1d1b4 <get_next_state+0x210>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   1d190:	e0bffe17 	ldw	r2,-8(fp)
   1d194:	00c00144 	movi	r3,5
   1d198:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d19c:	e0bfff17 	ldw	r2,-4(fp)
   1d1a0:	e0fffd03 	ldbu	r3,-12(fp)
   1d1a4:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d1a8:	00800104 	movi	r2,4
   1d1ac:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   1d1b0:	00000a06 	br	1d1dc <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   1d1b4:	008000c4 	movi	r2,3
   1d1b8:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   1d1bc:	e0bffe17 	ldw	r2,-8(fp)
   1d1c0:	00c00144 	movi	r3,5
   1d1c4:	10c00015 	stw	r3,0(r2)
			}
			break;
   1d1c8:	00000406 	br	1d1dc <get_next_state+0x238>
		default:
			*decode_mode = KB_INVALID_CODE;
   1d1cc:	e0bffe17 	ldw	r2,-8(fp)
   1d1d0:	00c00184 	movi	r3,6
   1d1d4:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   1d1d8:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   1d1dc:	e0bffa17 	ldw	r2,-24(fp)
}
   1d1e0:	e037883a 	mov	sp,fp
   1d1e4:	dfc00117 	ldw	ra,4(sp)
   1d1e8:	df000017 	ldw	fp,0(sp)
   1d1ec:	dec00204 	addi	sp,sp,8
   1d1f0:	f800283a 	ret

0001d1f4 <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1d1f4:	defff704 	addi	sp,sp,-36
   1d1f8:	dfc00815 	stw	ra,32(sp)
   1d1fc:	df000715 	stw	fp,28(sp)
   1d200:	df000704 	addi	fp,sp,28
   1d204:	e13ffc15 	stw	r4,-16(fp)
   1d208:	e17ffd15 	stw	r5,-12(fp)
   1d20c:	e1bffe15 	stw	r6,-8(fp)
   1d210:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   1d214:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   1d218:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   1d21c:	e0bffd17 	ldw	r2,-12(fp)
   1d220:	00c00184 	movi	r3,6
   1d224:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   1d228:	e0bffb04 	addi	r2,fp,-20
   1d22c:	e13ffc17 	ldw	r4,-16(fp)
   1d230:	100b883a 	mov	r5,r2
   1d234:	001c6280 	call	1c628 <alt_up_ps2_read_data_byte>
   1d238:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   1d23c:	e0bffa17 	ldw	r2,-24(fp)
   1d240:	10000626 	beq	r2,zero,1d25c <decode_scancode+0x68>
			if (state == STATE_INIT)
   1d244:	d0a8fa17 	ldw	r2,-23576(gp)
   1d248:	1000021e 	bne	r2,zero,1d254 <decode_scancode+0x60>
				return status_read;
   1d24c:	e0bffa17 	ldw	r2,-24(fp)
   1d250:	00001106 	br	1d298 <decode_scancode+0xa4>
			else
				return -2;
   1d254:	00bfff84 	movi	r2,-2
   1d258:	00000f06 	br	1d298 <decode_scancode+0xa4>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   1d25c:	d128fa17 	ldw	r4,-23576(gp)
   1d260:	e0bffb03 	ldbu	r2,-20(fp)
   1d264:	10c03fcc 	andi	r3,r2,255
   1d268:	e0bfff17 	ldw	r2,-4(fp)
   1d26c:	d8800015 	stw	r2,0(sp)
   1d270:	180b883a 	mov	r5,r3
   1d274:	e1bffd17 	ldw	r6,-12(fp)
   1d278:	e1fffe17 	ldw	r7,-8(fp)
   1d27c:	001cfa40 	call	1cfa4 <get_next_state>
   1d280:	d0a8fa15 	stw	r2,-23576(gp)
	} while ( state != STATE_DONE );
   1d284:	d0a8fa17 	ldw	r2,-23576(gp)
   1d288:	10800118 	cmpnei	r2,r2,4
   1d28c:	103fe61e 	bne	r2,zero,1d228 <__alt_mem_Flash_flash_data+0xf401d228>

	state = STATE_INIT;
   1d290:	d028fa15 	stw	zero,-23576(gp)

	return 0;
   1d294:	0005883a 	mov	r2,zero
}
   1d298:	e037883a 	mov	sp,fp
   1d29c:	dfc00117 	ldw	ra,4(sp)
   1d2a0:	df000017 	ldw	fp,0(sp)
   1d2a4:	dec00204 	addi	sp,sp,8
   1d2a8:	f800283a 	ret

0001d2ac <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   1d2ac:	defffb04 	addi	sp,sp,-20
   1d2b0:	dfc00415 	stw	ra,16(sp)
   1d2b4:	df000315 	stw	fp,12(sp)
   1d2b8:	df000304 	addi	fp,sp,12
   1d2bc:	e13ffe15 	stw	r4,-8(fp)
   1d2c0:	2805883a 	mov	r2,r5
   1d2c4:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
   1d2c8:	e13ffe17 	ldw	r4,-8(fp)
   1d2cc:	01403cc4 	movi	r5,243
   1d2d0:	001c5200 	call	1c520 <alt_up_ps2_write_data_byte_with_ack>
   1d2d4:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   1d2d8:	e0bffd17 	ldw	r2,-12(fp)
   1d2dc:	1000061e 	bne	r2,zero,1d2f8 <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   1d2e0:	e0bfff03 	ldbu	r2,-4(fp)
   1d2e4:	108007cc 	andi	r2,r2,31
   1d2e8:	e13ffe17 	ldw	r4,-8(fp)
   1d2ec:	100b883a 	mov	r5,r2
   1d2f0:	001c5200 	call	1c520 <alt_up_ps2_write_data_byte_with_ack>
   1d2f4:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   1d2f8:	e0bffd17 	ldw	r2,-12(fp)
}
   1d2fc:	e037883a 	mov	sp,fp
   1d300:	dfc00117 	ldw	ra,4(sp)
   1d304:	df000017 	ldw	fp,0(sp)
   1d308:	dec00204 	addi	sp,sp,8
   1d30c:	f800283a 	ret

0001d310 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   1d310:	defffa04 	addi	sp,sp,-24
   1d314:	dfc00515 	stw	ra,20(sp)
   1d318:	df000415 	stw	fp,16(sp)
   1d31c:	df000404 	addi	fp,sp,16
   1d320:	e13ffd15 	stw	r4,-12(fp)
   1d324:	2805883a 	mov	r2,r5
   1d328:	e1bfff15 	stw	r6,-4(fp)
   1d32c:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   1d330:	e0bffd17 	ldw	r2,-12(fp)
   1d334:	10c000a0 	cmpeqi	r3,r2,2
   1d338:	1800131e 	bne	r3,zero,1d388 <translate_make_code+0x78>
   1d33c:	10c000e0 	cmpeqi	r3,r2,3
   1d340:	1800201e 	bne	r3,zero,1d3c4 <translate_make_code+0xb4>
   1d344:	10800060 	cmpeqi	r2,r2,1
   1d348:	10002d26 	beq	r2,zero,1d400 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1d34c:	e0bffe03 	ldbu	r2,-8(fp)
   1d350:	1009883a 	mov	r4,r2
   1d354:	001cf340 	call	1cf34 <get_single_byte_make_code_index>
   1d358:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d35c:	008000b4 	movhi	r2,2
   1d360:	10849704 	addi	r2,r2,4700
   1d364:	e0fffc17 	ldw	r3,-16(fp)
   1d368:	18c7883a 	add	r3,r3,r3
   1d36c:	18c7883a 	add	r3,r3,r3
   1d370:	10c5883a 	add	r2,r2,r3
   1d374:	10800017 	ldw	r2,0(r2)
   1d378:	e13fff17 	ldw	r4,-4(fp)
   1d37c:	100b883a 	mov	r5,r2
   1d380:	0001ef40 	call	1ef4 <strcpy>
			break;
   1d384:	00002206 	br	1d410 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1d388:	e0bffe03 	ldbu	r2,-8(fp)
   1d38c:	1009883a 	mov	r4,r2
   1d390:	001cf340 	call	1cf34 <get_single_byte_make_code_index>
   1d394:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d398:	008000b4 	movhi	r2,2
   1d39c:	10849704 	addi	r2,r2,4700
   1d3a0:	e0fffc17 	ldw	r3,-16(fp)
   1d3a4:	18c7883a 	add	r3,r3,r3
   1d3a8:	18c7883a 	add	r3,r3,r3
   1d3ac:	10c5883a 	add	r2,r2,r3
   1d3b0:	10800017 	ldw	r2,0(r2)
   1d3b4:	e13fff17 	ldw	r4,-4(fp)
   1d3b8:	100b883a 	mov	r5,r2
   1d3bc:	0001ef40 	call	1ef4 <strcpy>
			break;
   1d3c0:	00001306 	br	1d410 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   1d3c4:	e0bffe03 	ldbu	r2,-8(fp)
   1d3c8:	1009883a 	mov	r4,r2
   1d3cc:	001cec40 	call	1cec4 <get_multi_byte_make_code_index>
   1d3d0:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d3d4:	008000b4 	movhi	r2,2
   1d3d8:	10849704 	addi	r2,r2,4700
   1d3dc:	e0fffc17 	ldw	r3,-16(fp)
   1d3e0:	18c7883a 	add	r3,r3,r3
   1d3e4:	18c7883a 	add	r3,r3,r3
   1d3e8:	10c5883a 	add	r2,r2,r3
   1d3ec:	10800017 	ldw	r2,0(r2)
   1d3f0:	e13fff17 	ldw	r4,-4(fp)
   1d3f4:	100b883a 	mov	r5,r2
   1d3f8:	0001ef40 	call	1ef4 <strcpy>
			break;
   1d3fc:	00000406 	br	1d410 <translate_make_code+0x100>
		default:
			str = "";
   1d400:	008000b4 	movhi	r2,2
   1d404:	10bcf604 	addi	r2,r2,-3112
   1d408:	e0bfff15 	stw	r2,-4(fp)
			break;
   1d40c:	0001883a 	nop
	}
}
   1d410:	e037883a 	mov	sp,fp
   1d414:	dfc00117 	ldw	ra,4(sp)
   1d418:	df000017 	ldw	fp,0(sp)
   1d41c:	dec00204 	addi	sp,sp,8
   1d420:	f800283a 	ret

0001d424 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   1d424:	defffb04 	addi	sp,sp,-20
   1d428:	dfc00415 	stw	ra,16(sp)
   1d42c:	df000315 	stw	fp,12(sp)
   1d430:	df000304 	addi	fp,sp,12
   1d434:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   1d438:	e13fff17 	ldw	r4,-4(fp)
   1d43c:	01403fc4 	movi	r5,255
   1d440:	001c5200 	call	1c520 <alt_up_ps2_write_data_byte_with_ack>
   1d444:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   1d448:	e0bffd17 	ldw	r2,-12(fp)
   1d44c:	10000e1e 	bne	r2,zero,1d488 <reset_keyboard+0x64>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   1d450:	e0bffe04 	addi	r2,fp,-8
   1d454:	e13fff17 	ldw	r4,-4(fp)
   1d458:	100b883a 	mov	r5,r2
   1d45c:	001c6280 	call	1c628 <alt_up_ps2_read_data_byte>
   1d460:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1d464:	e0bffd17 	ldw	r2,-12(fp)
   1d468:	1000051e 	bne	r2,zero,1d480 <reset_keyboard+0x5c>
   1d46c:	e0bffe03 	ldbu	r2,-8(fp)
   1d470:	10803fcc 	andi	r2,r2,255
   1d474:	10802a98 	cmpnei	r2,r2,170
   1d478:	1000011e 	bne	r2,zero,1d480 <reset_keyboard+0x5c>
   1d47c:	00000206 	br	1d488 <reset_keyboard+0x64>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   1d480:	00bfffc4 	movi	r2,-1
   1d484:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   1d488:	e0bffd17 	ldw	r2,-12(fp)
}
   1d48c:	e037883a 	mov	sp,fp
   1d490:	dfc00117 	ldw	ra,4(sp)
   1d494:	df000017 	ldw	fp,0(sp)
   1d498:	dec00204 	addi	sp,sp,8
   1d49c:	f800283a 	ret

0001d4a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d4a0:	defff504 	addi	sp,sp,-44
   1d4a4:	df000a15 	stw	fp,40(sp)
   1d4a8:	df000a04 	addi	fp,sp,40
   1d4ac:	e13ffc15 	stw	r4,-16(fp)
   1d4b0:	e17ffd15 	stw	r5,-12(fp)
   1d4b4:	e1bffe15 	stw	r6,-8(fp)
   1d4b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d4bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d4c0:	008000b4 	movhi	r2,2
   1d4c4:	108e4604 	addi	r2,r2,14616
   1d4c8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1d4cc:	10003f26 	beq	r2,zero,1d5cc <alt_alarm_start+0x12c>
  {
    if (alarm)
   1d4d0:	e0bffc17 	ldw	r2,-16(fp)
   1d4d4:	10003b26 	beq	r2,zero,1d5c4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1d4d8:	e0bffc17 	ldw	r2,-16(fp)
   1d4dc:	e0fffe17 	ldw	r3,-8(fp)
   1d4e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d4e4:	e0bffc17 	ldw	r2,-16(fp)
   1d4e8:	e0ffff17 	ldw	r3,-4(fp)
   1d4ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d4f0:	0005303a 	rdctl	r2,status
   1d4f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d4f8:	e0fff817 	ldw	r3,-32(fp)
   1d4fc:	00bfff84 	movi	r2,-2
   1d500:	1884703a 	and	r2,r3,r2
   1d504:	1001703a 	wrctl	status,r2
  
  return context;
   1d508:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1d50c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d510:	008000b4 	movhi	r2,2
   1d514:	108e4704 	addi	r2,r2,14620
   1d518:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1d51c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d520:	e0fffd17 	ldw	r3,-12(fp)
   1d524:	e0bff617 	ldw	r2,-40(fp)
   1d528:	1885883a 	add	r2,r3,r2
   1d52c:	10c00044 	addi	r3,r2,1
   1d530:	e0bffc17 	ldw	r2,-16(fp)
   1d534:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d538:	e0bffc17 	ldw	r2,-16(fp)
   1d53c:	10c00217 	ldw	r3,8(r2)
   1d540:	e0bff617 	ldw	r2,-40(fp)
   1d544:	1880042e 	bgeu	r3,r2,1d558 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1d548:	e0bffc17 	ldw	r2,-16(fp)
   1d54c:	00c00044 	movi	r3,1
   1d550:	10c00405 	stb	r3,16(r2)
   1d554:	00000206 	br	1d560 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1d558:	e0bffc17 	ldw	r2,-16(fp)
   1d55c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d560:	e0fffc17 	ldw	r3,-16(fp)
   1d564:	008000b4 	movhi	r2,2
   1d568:	10858004 	addi	r2,r2,5632
   1d56c:	e0bff915 	stw	r2,-28(fp)
   1d570:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d574:	e0bffa17 	ldw	r2,-24(fp)
   1d578:	e0fff917 	ldw	r3,-28(fp)
   1d57c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d580:	e0bff917 	ldw	r2,-28(fp)
   1d584:	10c00017 	ldw	r3,0(r2)
   1d588:	e0bffa17 	ldw	r2,-24(fp)
   1d58c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d590:	e0bff917 	ldw	r2,-28(fp)
   1d594:	10800017 	ldw	r2,0(r2)
   1d598:	e0fffa17 	ldw	r3,-24(fp)
   1d59c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d5a0:	e0bff917 	ldw	r2,-28(fp)
   1d5a4:	e0fffa17 	ldw	r3,-24(fp)
   1d5a8:	10c00015 	stw	r3,0(r2)
   1d5ac:	e0bff717 	ldw	r2,-36(fp)
   1d5b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d5b4:	e0bffb17 	ldw	r2,-20(fp)
   1d5b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d5bc:	0005883a 	mov	r2,zero
   1d5c0:	00000306 	br	1d5d0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1d5c4:	00bffa84 	movi	r2,-22
   1d5c8:	00000106 	br	1d5d0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1d5cc:	00bfde84 	movi	r2,-134
  }
}
   1d5d0:	e037883a 	mov	sp,fp
   1d5d4:	df000017 	ldw	fp,0(sp)
   1d5d8:	dec00104 	addi	sp,sp,4
   1d5dc:	f800283a 	ret

0001d5e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d5e0:	deffff04 	addi	sp,sp,-4
   1d5e4:	df000015 	stw	fp,0(sp)
   1d5e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d5ec:	e037883a 	mov	sp,fp
   1d5f0:	df000017 	ldw	fp,0(sp)
   1d5f4:	dec00104 	addi	sp,sp,4
   1d5f8:	f800283a 	ret

0001d5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d5fc:	defffe04 	addi	sp,sp,-8
   1d600:	dfc00115 	stw	ra,4(sp)
   1d604:	df000015 	stw	fp,0(sp)
   1d608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1d60c:	008000b4 	movhi	r2,2
   1d610:	10855e04 	addi	r2,r2,5496
   1d614:	10800017 	ldw	r2,0(r2)
   1d618:	10000526 	beq	r2,zero,1d630 <alt_get_errno+0x34>
   1d61c:	008000b4 	movhi	r2,2
   1d620:	10855e04 	addi	r2,r2,5496
   1d624:	10800017 	ldw	r2,0(r2)
   1d628:	103ee83a 	callr	r2
   1d62c:	00000206 	br	1d638 <alt_get_errno+0x3c>
   1d630:	008000b4 	movhi	r2,2
   1d634:	108e2704 	addi	r2,r2,14492
}
   1d638:	e037883a 	mov	sp,fp
   1d63c:	dfc00117 	ldw	ra,4(sp)
   1d640:	df000017 	ldw	fp,0(sp)
   1d644:	dec00204 	addi	sp,sp,8
   1d648:	f800283a 	ret

0001d64c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d64c:	defffa04 	addi	sp,sp,-24
   1d650:	dfc00515 	stw	ra,20(sp)
   1d654:	df000415 	stw	fp,16(sp)
   1d658:	df000404 	addi	fp,sp,16
   1d65c:	e13ffe15 	stw	r4,-8(fp)
   1d660:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d664:	e0bffe17 	ldw	r2,-8(fp)
   1d668:	10000326 	beq	r2,zero,1d678 <alt_dev_llist_insert+0x2c>
   1d66c:	e0bffe17 	ldw	r2,-8(fp)
   1d670:	10800217 	ldw	r2,8(r2)
   1d674:	1000061e 	bne	r2,zero,1d690 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1d678:	001d5fc0 	call	1d5fc <alt_get_errno>
   1d67c:	1007883a 	mov	r3,r2
   1d680:	00800584 	movi	r2,22
   1d684:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d688:	00bffa84 	movi	r2,-22
   1d68c:	00001306 	br	1d6dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d690:	e0bffe17 	ldw	r2,-8(fp)
   1d694:	e0ffff17 	ldw	r3,-4(fp)
   1d698:	e0fffc15 	stw	r3,-16(fp)
   1d69c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d6a0:	e0bffd17 	ldw	r2,-12(fp)
   1d6a4:	e0fffc17 	ldw	r3,-16(fp)
   1d6a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d6ac:	e0bffc17 	ldw	r2,-16(fp)
   1d6b0:	10c00017 	ldw	r3,0(r2)
   1d6b4:	e0bffd17 	ldw	r2,-12(fp)
   1d6b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d6bc:	e0bffc17 	ldw	r2,-16(fp)
   1d6c0:	10800017 	ldw	r2,0(r2)
   1d6c4:	e0fffd17 	ldw	r3,-12(fp)
   1d6c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d6cc:	e0bffc17 	ldw	r2,-16(fp)
   1d6d0:	e0fffd17 	ldw	r3,-12(fp)
   1d6d4:	10c00015 	stw	r3,0(r2)

  return 0;  
   1d6d8:	0005883a 	mov	r2,zero
}
   1d6dc:	e037883a 	mov	sp,fp
   1d6e0:	dfc00117 	ldw	ra,4(sp)
   1d6e4:	df000017 	ldw	fp,0(sp)
   1d6e8:	dec00204 	addi	sp,sp,8
   1d6ec:	f800283a 	ret

0001d6f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d6f0:	defffd04 	addi	sp,sp,-12
   1d6f4:	dfc00215 	stw	ra,8(sp)
   1d6f8:	df000115 	stw	fp,4(sp)
   1d6fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d700:	008000b4 	movhi	r2,2
   1d704:	10ba6504 	addi	r2,r2,-5740
   1d708:	e0bfff15 	stw	r2,-4(fp)
   1d70c:	00000606 	br	1d728 <_do_ctors+0x38>
        (*ctor) (); 
   1d710:	e0bfff17 	ldw	r2,-4(fp)
   1d714:	10800017 	ldw	r2,0(r2)
   1d718:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d71c:	e0bfff17 	ldw	r2,-4(fp)
   1d720:	10bfff04 	addi	r2,r2,-4
   1d724:	e0bfff15 	stw	r2,-4(fp)
   1d728:	e0ffff17 	ldw	r3,-4(fp)
   1d72c:	008000b4 	movhi	r2,2
   1d730:	10ba6604 	addi	r2,r2,-5736
   1d734:	18bff62e 	bgeu	r3,r2,1d710 <__alt_mem_Flash_flash_data+0xf401d710>
        (*ctor) (); 
}
   1d738:	e037883a 	mov	sp,fp
   1d73c:	dfc00117 	ldw	ra,4(sp)
   1d740:	df000017 	ldw	fp,0(sp)
   1d744:	dec00204 	addi	sp,sp,8
   1d748:	f800283a 	ret

0001d74c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d74c:	defffd04 	addi	sp,sp,-12
   1d750:	dfc00215 	stw	ra,8(sp)
   1d754:	df000115 	stw	fp,4(sp)
   1d758:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d75c:	008000b4 	movhi	r2,2
   1d760:	10ba6504 	addi	r2,r2,-5740
   1d764:	e0bfff15 	stw	r2,-4(fp)
   1d768:	00000606 	br	1d784 <_do_dtors+0x38>
        (*dtor) (); 
   1d76c:	e0bfff17 	ldw	r2,-4(fp)
   1d770:	10800017 	ldw	r2,0(r2)
   1d774:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d778:	e0bfff17 	ldw	r2,-4(fp)
   1d77c:	10bfff04 	addi	r2,r2,-4
   1d780:	e0bfff15 	stw	r2,-4(fp)
   1d784:	e0ffff17 	ldw	r3,-4(fp)
   1d788:	008000b4 	movhi	r2,2
   1d78c:	10ba6604 	addi	r2,r2,-5736
   1d790:	18bff62e 	bgeu	r3,r2,1d76c <__alt_mem_Flash_flash_data+0xf401d76c>
        (*dtor) (); 
}
   1d794:	e037883a 	mov	sp,fp
   1d798:	dfc00117 	ldw	ra,4(sp)
   1d79c:	df000017 	ldw	fp,0(sp)
   1d7a0:	dec00204 	addi	sp,sp,8
   1d7a4:	f800283a 	ret

0001d7a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d7a8:	defffa04 	addi	sp,sp,-24
   1d7ac:	dfc00515 	stw	ra,20(sp)
   1d7b0:	df000415 	stw	fp,16(sp)
   1d7b4:	df000404 	addi	fp,sp,16
   1d7b8:	e13ffe15 	stw	r4,-8(fp)
   1d7bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d7c0:	e0bfff17 	ldw	r2,-4(fp)
   1d7c4:	10800017 	ldw	r2,0(r2)
   1d7c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d7cc:	e13ffe17 	ldw	r4,-8(fp)
   1d7d0:	0001f840 	call	1f84 <strlen>
   1d7d4:	10800044 	addi	r2,r2,1
   1d7d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d7dc:	00000d06 	br	1d814 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d7e0:	e0bffc17 	ldw	r2,-16(fp)
   1d7e4:	10c00217 	ldw	r3,8(r2)
   1d7e8:	e0bffd17 	ldw	r2,-12(fp)
   1d7ec:	1809883a 	mov	r4,r3
   1d7f0:	e17ffe17 	ldw	r5,-8(fp)
   1d7f4:	100d883a 	mov	r6,r2
   1d7f8:	001e6380 	call	1e638 <memcmp>
   1d7fc:	1000021e 	bne	r2,zero,1d808 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d800:	e0bffc17 	ldw	r2,-16(fp)
   1d804:	00000706 	br	1d824 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d808:	e0bffc17 	ldw	r2,-16(fp)
   1d80c:	10800017 	ldw	r2,0(r2)
   1d810:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d814:	e0fffc17 	ldw	r3,-16(fp)
   1d818:	e0bfff17 	ldw	r2,-4(fp)
   1d81c:	18bff01e 	bne	r3,r2,1d7e0 <__alt_mem_Flash_flash_data+0xf401d7e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d820:	0005883a 	mov	r2,zero
}
   1d824:	e037883a 	mov	sp,fp
   1d828:	dfc00117 	ldw	ra,4(sp)
   1d82c:	df000017 	ldw	fp,0(sp)
   1d830:	dec00204 	addi	sp,sp,8
   1d834:	f800283a 	ret

0001d838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d838:	defffe04 	addi	sp,sp,-8
   1d83c:	dfc00115 	stw	ra,4(sp)
   1d840:	df000015 	stw	fp,0(sp)
   1d844:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1d848:	0009883a 	mov	r4,zero
   1d84c:	01440004 	movi	r5,4096
   1d850:	001e4c40 	call	1e4c4 <alt_icache_flush>
#endif
}
   1d854:	e037883a 	mov	sp,fp
   1d858:	dfc00117 	ldw	ra,4(sp)
   1d85c:	df000017 	ldw	fp,0(sp)
   1d860:	dec00204 	addi	sp,sp,8
   1d864:	f800283a 	ret

0001d868 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1d868:	defff904 	addi	sp,sp,-28
   1d86c:	dfc00615 	stw	ra,24(sp)
   1d870:	df000515 	stw	fp,20(sp)
   1d874:	df000504 	addi	fp,sp,20
   1d878:	e13ffc15 	stw	r4,-16(fp)
   1d87c:	e17ffd15 	stw	r5,-12(fp)
   1d880:	e1bffe15 	stw	r6,-8(fp)
   1d884:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1d888:	e13ffd17 	ldw	r4,-12(fp)
   1d88c:	e17ffe17 	ldw	r5,-8(fp)
   1d890:	e1bfff17 	ldw	r6,-4(fp)
   1d894:	001dc6c0 	call	1dc6c <open>
   1d898:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1d89c:	e0bffb17 	ldw	r2,-20(fp)
   1d8a0:	10001c16 	blt	r2,zero,1d914 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1d8a4:	008000b4 	movhi	r2,2
   1d8a8:	10bf3004 	addi	r2,r2,-832
   1d8ac:	e0fffb17 	ldw	r3,-20(fp)
   1d8b0:	18c00324 	muli	r3,r3,12
   1d8b4:	10c5883a 	add	r2,r2,r3
   1d8b8:	10c00017 	ldw	r3,0(r2)
   1d8bc:	e0bffc17 	ldw	r2,-16(fp)
   1d8c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1d8c4:	008000b4 	movhi	r2,2
   1d8c8:	10bf3004 	addi	r2,r2,-832
   1d8cc:	e0fffb17 	ldw	r3,-20(fp)
   1d8d0:	18c00324 	muli	r3,r3,12
   1d8d4:	18c00104 	addi	r3,r3,4
   1d8d8:	10c5883a 	add	r2,r2,r3
   1d8dc:	10c00017 	ldw	r3,0(r2)
   1d8e0:	e0bffc17 	ldw	r2,-16(fp)
   1d8e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1d8e8:	008000b4 	movhi	r2,2
   1d8ec:	10bf3004 	addi	r2,r2,-832
   1d8f0:	e0fffb17 	ldw	r3,-20(fp)
   1d8f4:	18c00324 	muli	r3,r3,12
   1d8f8:	18c00204 	addi	r3,r3,8
   1d8fc:	10c5883a 	add	r2,r2,r3
   1d900:	10c00017 	ldw	r3,0(r2)
   1d904:	e0bffc17 	ldw	r2,-16(fp)
   1d908:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1d90c:	e13ffb17 	ldw	r4,-20(fp)
   1d910:	00119540 	call	11954 <alt_release_fd>
  }
} 
   1d914:	e037883a 	mov	sp,fp
   1d918:	dfc00117 	ldw	ra,4(sp)
   1d91c:	df000017 	ldw	fp,0(sp)
   1d920:	dec00204 	addi	sp,sp,8
   1d924:	f800283a 	ret

0001d928 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1d928:	defffb04 	addi	sp,sp,-20
   1d92c:	dfc00415 	stw	ra,16(sp)
   1d930:	df000315 	stw	fp,12(sp)
   1d934:	df000304 	addi	fp,sp,12
   1d938:	e13ffd15 	stw	r4,-12(fp)
   1d93c:	e17ffe15 	stw	r5,-8(fp)
   1d940:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1d944:	010000b4 	movhi	r4,2
   1d948:	213f3304 	addi	r4,r4,-820
   1d94c:	e17ffd17 	ldw	r5,-12(fp)
   1d950:	01800044 	movi	r6,1
   1d954:	01c07fc4 	movi	r7,511
   1d958:	001d8680 	call	1d868 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1d95c:	010000b4 	movhi	r4,2
   1d960:	213f3004 	addi	r4,r4,-832
   1d964:	e17ffe17 	ldw	r5,-8(fp)
   1d968:	000d883a 	mov	r6,zero
   1d96c:	01c07fc4 	movi	r7,511
   1d970:	001d8680 	call	1d868 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1d974:	010000b4 	movhi	r4,2
   1d978:	213f3604 	addi	r4,r4,-808
   1d97c:	e17fff17 	ldw	r5,-4(fp)
   1d980:	01800044 	movi	r6,1
   1d984:	01c07fc4 	movi	r7,511
   1d988:	001d8680 	call	1d868 <alt_open_fd>
}  
   1d98c:	e037883a 	mov	sp,fp
   1d990:	dfc00117 	ldw	ra,4(sp)
   1d994:	df000017 	ldw	fp,0(sp)
   1d998:	dec00204 	addi	sp,sp,8
   1d99c:	f800283a 	ret

0001d9a0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1d9a0:	defff004 	addi	sp,sp,-64
   1d9a4:	df000f15 	stw	fp,60(sp)
   1d9a8:	df000f04 	addi	fp,sp,60
   1d9ac:	e13ffd15 	stw	r4,-12(fp)
   1d9b0:	e17ffe15 	stw	r5,-8(fp)
   1d9b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1d9b8:	00bffa84 	movi	r2,-22
   1d9bc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1d9c0:	e0bffd17 	ldw	r2,-12(fp)
   1d9c4:	10800828 	cmpgeui	r2,r2,32
   1d9c8:	10005c1e 	bne	r2,zero,1db3c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d9cc:	0005303a 	rdctl	r2,status
   1d9d0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d9d4:	e0fff317 	ldw	r3,-52(fp)
   1d9d8:	00bfff84 	movi	r2,-2
   1d9dc:	1884703a 	and	r2,r3,r2
   1d9e0:	1001703a 	wrctl	status,r2
  
  return context;
   1d9e4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1d9e8:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1d9ec:	008000f4 	movhi	r2,3
   1d9f0:	10834d04 	addi	r2,r2,3380
   1d9f4:	e0fffd17 	ldw	r3,-12(fp)
   1d9f8:	180690fa 	slli	r3,r3,3
   1d9fc:	10c5883a 	add	r2,r2,r3
   1da00:	e0ffff17 	ldw	r3,-4(fp)
   1da04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1da08:	008000f4 	movhi	r2,3
   1da0c:	10834d04 	addi	r2,r2,3380
   1da10:	e0fffd17 	ldw	r3,-12(fp)
   1da14:	180690fa 	slli	r3,r3,3
   1da18:	18c00104 	addi	r3,r3,4
   1da1c:	10c5883a 	add	r2,r2,r3
   1da20:	e0fffe17 	ldw	r3,-8(fp)
   1da24:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1da28:	e0bfff17 	ldw	r2,-4(fp)
   1da2c:	10001f26 	beq	r2,zero,1daac <alt_irq_register+0x10c>
   1da30:	e0bffd17 	ldw	r2,-12(fp)
   1da34:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da38:	0005303a 	rdctl	r2,status
   1da3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da40:	e0fff517 	ldw	r3,-44(fp)
   1da44:	00bfff84 	movi	r2,-2
   1da48:	1884703a 	and	r2,r3,r2
   1da4c:	1001703a 	wrctl	status,r2
  
  return context;
   1da50:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1da54:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1da58:	e0bff417 	ldw	r2,-48(fp)
   1da5c:	00c00044 	movi	r3,1
   1da60:	1884983a 	sll	r2,r3,r2
   1da64:	1007883a 	mov	r3,r2
   1da68:	008000b4 	movhi	r2,2
   1da6c:	108e4504 	addi	r2,r2,14612
   1da70:	10800017 	ldw	r2,0(r2)
   1da74:	1886b03a 	or	r3,r3,r2
   1da78:	008000b4 	movhi	r2,2
   1da7c:	108e4504 	addi	r2,r2,14612
   1da80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1da84:	008000b4 	movhi	r2,2
   1da88:	108e4504 	addi	r2,r2,14612
   1da8c:	10800017 	ldw	r2,0(r2)
   1da90:	100170fa 	wrctl	ienable,r2
   1da94:	e0bff617 	ldw	r2,-40(fp)
   1da98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da9c:	e0bff717 	ldw	r2,-36(fp)
   1daa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1daa4:	0005883a 	mov	r2,zero
   1daa8:	00001f06 	br	1db28 <alt_irq_register+0x188>
   1daac:	e0bffd17 	ldw	r2,-12(fp)
   1dab0:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dab4:	0005303a 	rdctl	r2,status
   1dab8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dabc:	e0fff917 	ldw	r3,-28(fp)
   1dac0:	00bfff84 	movi	r2,-2
   1dac4:	1884703a 	and	r2,r3,r2
   1dac8:	1001703a 	wrctl	status,r2
  
  return context;
   1dacc:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1dad0:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1dad4:	e0bff817 	ldw	r2,-32(fp)
   1dad8:	00c00044 	movi	r3,1
   1dadc:	1884983a 	sll	r2,r3,r2
   1dae0:	0084303a 	nor	r2,zero,r2
   1dae4:	1007883a 	mov	r3,r2
   1dae8:	008000b4 	movhi	r2,2
   1daec:	108e4504 	addi	r2,r2,14612
   1daf0:	10800017 	ldw	r2,0(r2)
   1daf4:	1886703a 	and	r3,r3,r2
   1daf8:	008000b4 	movhi	r2,2
   1dafc:	108e4504 	addi	r2,r2,14612
   1db00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1db04:	008000b4 	movhi	r2,2
   1db08:	108e4504 	addi	r2,r2,14612
   1db0c:	10800017 	ldw	r2,0(r2)
   1db10:	100170fa 	wrctl	ienable,r2
   1db14:	e0bffa17 	ldw	r2,-24(fp)
   1db18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db1c:	e0bffb17 	ldw	r2,-20(fp)
   1db20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1db24:	0005883a 	mov	r2,zero
   1db28:	e0bff115 	stw	r2,-60(fp)
   1db2c:	e0bff217 	ldw	r2,-56(fp)
   1db30:	e0bffc15 	stw	r2,-16(fp)
   1db34:	e0bffc17 	ldw	r2,-16(fp)
   1db38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1db3c:	e0bff117 	ldw	r2,-60(fp)
}
   1db40:	e037883a 	mov	sp,fp
   1db44:	df000017 	ldw	fp,0(sp)
   1db48:	dec00104 	addi	sp,sp,4
   1db4c:	f800283a 	ret

0001db50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1db50:	defffe04 	addi	sp,sp,-8
   1db54:	dfc00115 	stw	ra,4(sp)
   1db58:	df000015 	stw	fp,0(sp)
   1db5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1db60:	008000b4 	movhi	r2,2
   1db64:	10855e04 	addi	r2,r2,5496
   1db68:	10800017 	ldw	r2,0(r2)
   1db6c:	10000526 	beq	r2,zero,1db84 <alt_get_errno+0x34>
   1db70:	008000b4 	movhi	r2,2
   1db74:	10855e04 	addi	r2,r2,5496
   1db78:	10800017 	ldw	r2,0(r2)
   1db7c:	103ee83a 	callr	r2
   1db80:	00000206 	br	1db8c <alt_get_errno+0x3c>
   1db84:	008000b4 	movhi	r2,2
   1db88:	108e2704 	addi	r2,r2,14492
}
   1db8c:	e037883a 	mov	sp,fp
   1db90:	dfc00117 	ldw	ra,4(sp)
   1db94:	df000017 	ldw	fp,0(sp)
   1db98:	dec00204 	addi	sp,sp,8
   1db9c:	f800283a 	ret

0001dba0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1dba0:	defffd04 	addi	sp,sp,-12
   1dba4:	df000215 	stw	fp,8(sp)
   1dba8:	df000204 	addi	fp,sp,8
   1dbac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1dbb0:	e0bfff17 	ldw	r2,-4(fp)
   1dbb4:	10800217 	ldw	r2,8(r2)
   1dbb8:	10d00034 	orhi	r3,r2,16384
   1dbbc:	e0bfff17 	ldw	r2,-4(fp)
   1dbc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dbc4:	e03ffe15 	stw	zero,-8(fp)
   1dbc8:	00001d06 	br	1dc40 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dbcc:	008000b4 	movhi	r2,2
   1dbd0:	10bf3004 	addi	r2,r2,-832
   1dbd4:	e0fffe17 	ldw	r3,-8(fp)
   1dbd8:	18c00324 	muli	r3,r3,12
   1dbdc:	10c5883a 	add	r2,r2,r3
   1dbe0:	10c00017 	ldw	r3,0(r2)
   1dbe4:	e0bfff17 	ldw	r2,-4(fp)
   1dbe8:	10800017 	ldw	r2,0(r2)
   1dbec:	1880111e 	bne	r3,r2,1dc34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dbf0:	008000b4 	movhi	r2,2
   1dbf4:	10bf3004 	addi	r2,r2,-832
   1dbf8:	e0fffe17 	ldw	r3,-8(fp)
   1dbfc:	18c00324 	muli	r3,r3,12
   1dc00:	18c00204 	addi	r3,r3,8
   1dc04:	10c5883a 	add	r2,r2,r3
   1dc08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dc0c:	1000090e 	bge	r2,zero,1dc34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1dc10:	e0bffe17 	ldw	r2,-8(fp)
   1dc14:	10c00324 	muli	r3,r2,12
   1dc18:	008000b4 	movhi	r2,2
   1dc1c:	10bf3004 	addi	r2,r2,-832
   1dc20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dc24:	e0bfff17 	ldw	r2,-4(fp)
   1dc28:	18800226 	beq	r3,r2,1dc34 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1dc2c:	00bffcc4 	movi	r2,-13
   1dc30:	00000a06 	br	1dc5c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dc34:	e0bffe17 	ldw	r2,-8(fp)
   1dc38:	10800044 	addi	r2,r2,1
   1dc3c:	e0bffe15 	stw	r2,-8(fp)
   1dc40:	008000b4 	movhi	r2,2
   1dc44:	10855d04 	addi	r2,r2,5492
   1dc48:	10800017 	ldw	r2,0(r2)
   1dc4c:	1007883a 	mov	r3,r2
   1dc50:	e0bffe17 	ldw	r2,-8(fp)
   1dc54:	18bfdd2e 	bgeu	r3,r2,1dbcc <__alt_mem_Flash_flash_data+0xf401dbcc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1dc58:	0005883a 	mov	r2,zero
}
   1dc5c:	e037883a 	mov	sp,fp
   1dc60:	df000017 	ldw	fp,0(sp)
   1dc64:	dec00104 	addi	sp,sp,4
   1dc68:	f800283a 	ret

0001dc6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1dc6c:	defff604 	addi	sp,sp,-40
   1dc70:	dfc00915 	stw	ra,36(sp)
   1dc74:	df000815 	stw	fp,32(sp)
   1dc78:	df000804 	addi	fp,sp,32
   1dc7c:	e13ffd15 	stw	r4,-12(fp)
   1dc80:	e17ffe15 	stw	r5,-8(fp)
   1dc84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1dc88:	00bfffc4 	movi	r2,-1
   1dc8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1dc90:	00bffb44 	movi	r2,-19
   1dc94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1dc98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1dc9c:	e13ffd17 	ldw	r4,-12(fp)
   1dca0:	014000b4 	movhi	r5,2
   1dca4:	29455b04 	addi	r5,r5,5484
   1dca8:	001d7a80 	call	1d7a8 <alt_find_dev>
   1dcac:	e0bff815 	stw	r2,-32(fp)
   1dcb0:	e0bff817 	ldw	r2,-32(fp)
   1dcb4:	1000051e 	bne	r2,zero,1dccc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1dcb8:	e13ffd17 	ldw	r4,-12(fp)
   1dcbc:	001e2b40 	call	1e2b4 <alt_find_file>
   1dcc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1dcc4:	00800044 	movi	r2,1
   1dcc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1dccc:	e0bff817 	ldw	r2,-32(fp)
   1dcd0:	10002926 	beq	r2,zero,1dd78 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1dcd4:	e13ff817 	ldw	r4,-32(fp)
   1dcd8:	001e3c80 	call	1e3c8 <alt_get_fd>
   1dcdc:	e0bff915 	stw	r2,-28(fp)
   1dce0:	e0bff917 	ldw	r2,-28(fp)
   1dce4:	1000030e 	bge	r2,zero,1dcf4 <open+0x88>
    {
      status = index;
   1dce8:	e0bff917 	ldw	r2,-28(fp)
   1dcec:	e0bffa15 	stw	r2,-24(fp)
   1dcf0:	00002306 	br	1dd80 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1dcf4:	e0bff917 	ldw	r2,-28(fp)
   1dcf8:	10c00324 	muli	r3,r2,12
   1dcfc:	008000b4 	movhi	r2,2
   1dd00:	10bf3004 	addi	r2,r2,-832
   1dd04:	1885883a 	add	r2,r3,r2
   1dd08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1dd0c:	e0fffe17 	ldw	r3,-8(fp)
   1dd10:	00900034 	movhi	r2,16384
   1dd14:	10bfffc4 	addi	r2,r2,-1
   1dd18:	1886703a 	and	r3,r3,r2
   1dd1c:	e0bffc17 	ldw	r2,-16(fp)
   1dd20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1dd24:	e0bffb17 	ldw	r2,-20(fp)
   1dd28:	1000051e 	bne	r2,zero,1dd40 <open+0xd4>
   1dd2c:	e13ffc17 	ldw	r4,-16(fp)
   1dd30:	001dba00 	call	1dba0 <alt_file_locked>
   1dd34:	e0bffa15 	stw	r2,-24(fp)
   1dd38:	e0bffa17 	ldw	r2,-24(fp)
   1dd3c:	10001016 	blt	r2,zero,1dd80 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1dd40:	e0bff817 	ldw	r2,-32(fp)
   1dd44:	10800317 	ldw	r2,12(r2)
   1dd48:	10000826 	beq	r2,zero,1dd6c <open+0x100>
   1dd4c:	e0bff817 	ldw	r2,-32(fp)
   1dd50:	10800317 	ldw	r2,12(r2)
   1dd54:	e13ffc17 	ldw	r4,-16(fp)
   1dd58:	e17ffd17 	ldw	r5,-12(fp)
   1dd5c:	e1bffe17 	ldw	r6,-8(fp)
   1dd60:	e1ffff17 	ldw	r7,-4(fp)
   1dd64:	103ee83a 	callr	r2
   1dd68:	00000106 	br	1dd70 <open+0x104>
   1dd6c:	0005883a 	mov	r2,zero
   1dd70:	e0bffa15 	stw	r2,-24(fp)
   1dd74:	00000206 	br	1dd80 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1dd78:	00bffb44 	movi	r2,-19
   1dd7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1dd80:	e0bffa17 	ldw	r2,-24(fp)
   1dd84:	1000090e 	bge	r2,zero,1ddac <open+0x140>
  {
    alt_release_fd (index);  
   1dd88:	e13ff917 	ldw	r4,-28(fp)
   1dd8c:	00119540 	call	11954 <alt_release_fd>
    ALT_ERRNO = -status;
   1dd90:	001db500 	call	1db50 <alt_get_errno>
   1dd94:	1007883a 	mov	r3,r2
   1dd98:	e0bffa17 	ldw	r2,-24(fp)
   1dd9c:	0085c83a 	sub	r2,zero,r2
   1dda0:	18800015 	stw	r2,0(r3)
    return -1;
   1dda4:	00bfffc4 	movi	r2,-1
   1dda8:	00000106 	br	1ddb0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1ddac:	e0bff917 	ldw	r2,-28(fp)
}
   1ddb0:	e037883a 	mov	sp,fp
   1ddb4:	dfc00117 	ldw	ra,4(sp)
   1ddb8:	df000017 	ldw	fp,0(sp)
   1ddbc:	dec00204 	addi	sp,sp,8
   1ddc0:	f800283a 	ret

0001ddc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ddc4:	defffa04 	addi	sp,sp,-24
   1ddc8:	df000515 	stw	fp,20(sp)
   1ddcc:	df000504 	addi	fp,sp,20
   1ddd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ddd4:	0005303a 	rdctl	r2,status
   1ddd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dddc:	e0fffc17 	ldw	r3,-16(fp)
   1dde0:	00bfff84 	movi	r2,-2
   1dde4:	1884703a 	and	r2,r3,r2
   1dde8:	1001703a 	wrctl	status,r2
  
  return context;
   1ddec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ddf0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ddf4:	e0bfff17 	ldw	r2,-4(fp)
   1ddf8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ddfc:	e0bffd17 	ldw	r2,-12(fp)
   1de00:	10800017 	ldw	r2,0(r2)
   1de04:	e0fffd17 	ldw	r3,-12(fp)
   1de08:	18c00117 	ldw	r3,4(r3)
   1de0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1de10:	e0bffd17 	ldw	r2,-12(fp)
   1de14:	10800117 	ldw	r2,4(r2)
   1de18:	e0fffd17 	ldw	r3,-12(fp)
   1de1c:	18c00017 	ldw	r3,0(r3)
   1de20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1de24:	e0bffd17 	ldw	r2,-12(fp)
   1de28:	e0fffd17 	ldw	r3,-12(fp)
   1de2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1de30:	e0bffd17 	ldw	r2,-12(fp)
   1de34:	e0fffd17 	ldw	r3,-12(fp)
   1de38:	10c00015 	stw	r3,0(r2)
   1de3c:	e0bffb17 	ldw	r2,-20(fp)
   1de40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1de44:	e0bffe17 	ldw	r2,-8(fp)
   1de48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1de4c:	e037883a 	mov	sp,fp
   1de50:	df000017 	ldw	fp,0(sp)
   1de54:	dec00104 	addi	sp,sp,4
   1de58:	f800283a 	ret

0001de5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1de5c:	defffb04 	addi	sp,sp,-20
   1de60:	dfc00415 	stw	ra,16(sp)
   1de64:	df000315 	stw	fp,12(sp)
   1de68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1de6c:	d0a03617 	ldw	r2,-32552(gp)
   1de70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1de74:	d0a8fd17 	ldw	r2,-23564(gp)
   1de78:	10800044 	addi	r2,r2,1
   1de7c:	d0a8fd15 	stw	r2,-23564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1de80:	00002e06 	br	1df3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1de84:	e0bffd17 	ldw	r2,-12(fp)
   1de88:	10800017 	ldw	r2,0(r2)
   1de8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1de90:	e0bffd17 	ldw	r2,-12(fp)
   1de94:	10800403 	ldbu	r2,16(r2)
   1de98:	10803fcc 	andi	r2,r2,255
   1de9c:	10000426 	beq	r2,zero,1deb0 <alt_tick+0x54>
   1dea0:	d0a8fd17 	ldw	r2,-23564(gp)
   1dea4:	1000021e 	bne	r2,zero,1deb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1dea8:	e0bffd17 	ldw	r2,-12(fp)
   1deac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1deb0:	e0bffd17 	ldw	r2,-12(fp)
   1deb4:	10800217 	ldw	r2,8(r2)
   1deb8:	d0e8fd17 	ldw	r3,-23564(gp)
   1debc:	18801d36 	bltu	r3,r2,1df34 <alt_tick+0xd8>
   1dec0:	e0bffd17 	ldw	r2,-12(fp)
   1dec4:	10800403 	ldbu	r2,16(r2)
   1dec8:	10803fcc 	andi	r2,r2,255
   1decc:	1000191e 	bne	r2,zero,1df34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ded0:	e0bffd17 	ldw	r2,-12(fp)
   1ded4:	10800317 	ldw	r2,12(r2)
   1ded8:	e0fffd17 	ldw	r3,-12(fp)
   1dedc:	18c00517 	ldw	r3,20(r3)
   1dee0:	1809883a 	mov	r4,r3
   1dee4:	103ee83a 	callr	r2
   1dee8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1deec:	e0bfff17 	ldw	r2,-4(fp)
   1def0:	1000031e 	bne	r2,zero,1df00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1def4:	e13ffd17 	ldw	r4,-12(fp)
   1def8:	001ddc40 	call	1ddc4 <alt_alarm_stop>
   1defc:	00000d06 	br	1df34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1df00:	e0bffd17 	ldw	r2,-12(fp)
   1df04:	10c00217 	ldw	r3,8(r2)
   1df08:	e0bfff17 	ldw	r2,-4(fp)
   1df0c:	1887883a 	add	r3,r3,r2
   1df10:	e0bffd17 	ldw	r2,-12(fp)
   1df14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1df18:	e0bffd17 	ldw	r2,-12(fp)
   1df1c:	10c00217 	ldw	r3,8(r2)
   1df20:	d0a8fd17 	ldw	r2,-23564(gp)
   1df24:	1880032e 	bgeu	r3,r2,1df34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1df28:	e0bffd17 	ldw	r2,-12(fp)
   1df2c:	00c00044 	movi	r3,1
   1df30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1df34:	e0bffe17 	ldw	r2,-8(fp)
   1df38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1df3c:	e0fffd17 	ldw	r3,-12(fp)
   1df40:	d0a03604 	addi	r2,gp,-32552
   1df44:	18bfcf1e 	bne	r3,r2,1de84 <__alt_mem_Flash_flash_data+0xf401de84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1df48:	0012b600 	call	12b60 <OSTimeTick>
}
   1df4c:	e037883a 	mov	sp,fp
   1df50:	dfc00117 	ldw	ra,4(sp)
   1df54:	df000017 	ldw	fp,0(sp)
   1df58:	dec00204 	addi	sp,sp,8
   1df5c:	f800283a 	ret

0001df60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1df60:	deffff04 	addi	sp,sp,-4
   1df64:	df000015 	stw	fp,0(sp)
   1df68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1df6c:	000170fa 	wrctl	ienable,zero
}
   1df70:	e037883a 	mov	sp,fp
   1df74:	df000017 	ldw	fp,0(sp)
   1df78:	dec00104 	addi	sp,sp,4
   1df7c:	f800283a 	ret

0001df80 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1df80:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1df84:	d0e00a17 	ldw	r3,-32728(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1df88:	d128f517 	ldw	r4,-23596(gp)

      stw ra,  0(sp)
   1df8c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1df90:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1df94:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1df98:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1df9c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1dfa0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1dfa4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1dfa8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1dfac:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1dfb0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1dfb4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1dfb8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1dfbc:	001e1ec0 	call	1e1ec <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1dfc0:	d128f017 	ldw	r4,-23616(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1dfc4:	d168e807 	ldb	r5,-23648(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1dfc8:	d128f515 	stw	r4,-23596(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1dfcc:	d168e845 	stb	r5,-23647(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1dfd0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1dfd4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1dfd8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1dfdc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1dfe0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1dfe4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1dfe8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1dfec:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1dff0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1dff4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1dff8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1dffc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1e000:	d0e00a15 	stw	r3,-32728(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1e004:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1e008:	f800283a 	ret

0001e00c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1e00c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1e010:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1e014:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1e018:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e01c:	001e1ec0 	call	1e1ec <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1e020:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1e024:	d4a8e645 	stb	r18,-23655(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1e028:	003fe506 	br	1dfc0 <__alt_mem_Flash_flash_data+0xf401dfc0>

0001e02c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1e02c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1e030:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1e034:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1e038:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1e03c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1e040:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1e044:	dec00204 	addi	sp,sp,8

      callr r2
   1e048:	103ee83a 	callr	r2

      nop
   1e04c:	0001883a 	nop

0001e050 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1e050:	defff704 	addi	sp,sp,-36
   1e054:	dfc00815 	stw	ra,32(sp)
   1e058:	df000715 	stw	fp,28(sp)
   1e05c:	df000704 	addi	fp,sp,28
   1e060:	e13ffc15 	stw	r4,-16(fp)
   1e064:	e17ffd15 	stw	r5,-12(fp)
   1e068:	e1bffe15 	stw	r6,-8(fp)
   1e06c:	3805883a 	mov	r2,r7
   1e070:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1e074:	e0fffe17 	ldw	r3,-8(fp)
   1e078:	00bfff04 	movi	r2,-4
   1e07c:	1884703a 	and	r2,r3,r2
   1e080:	10bef704 	addi	r2,r2,-1060
   1e084:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1e088:	e13ff917 	ldw	r4,-28(fp)
   1e08c:	000b883a 	mov	r5,zero
   1e090:	01810904 	movi	r6,1060
   1e094:	0001c000 	call	1c00 <memset>
   1e098:	e0bff917 	ldw	r2,-28(fp)
   1e09c:	10c0bb04 	addi	r3,r2,748
   1e0a0:	e0bff917 	ldw	r2,-28(fp)
   1e0a4:	10c00115 	stw	r3,4(r2)
   1e0a8:	e0bff917 	ldw	r2,-28(fp)
   1e0ac:	10c0d504 	addi	r3,r2,852
   1e0b0:	e0bff917 	ldw	r2,-28(fp)
   1e0b4:	10c00215 	stw	r3,8(r2)
   1e0b8:	e0bff917 	ldw	r2,-28(fp)
   1e0bc:	10c0ef04 	addi	r3,r2,956
   1e0c0:	e0bff917 	ldw	r2,-28(fp)
   1e0c4:	10c00315 	stw	r3,12(r2)
   1e0c8:	e0fff917 	ldw	r3,-28(fp)
   1e0cc:	008000b4 	movhi	r2,2
   1e0d0:	10bcf704 	addi	r2,r2,-3108
   1e0d4:	18800d15 	stw	r2,52(r3)
   1e0d8:	e0bff917 	ldw	r2,-28(fp)
   1e0dc:	00c00044 	movi	r3,1
   1e0e0:	10c02915 	stw	r3,164(r2)
   1e0e4:	10002a15 	stw	zero,168(r2)
   1e0e8:	e0bff917 	ldw	r2,-28(fp)
   1e0ec:	00ccc384 	movi	r3,13070
   1e0f0:	10c02b0d 	sth	r3,172(r2)
   1e0f4:	e0bff917 	ldw	r2,-28(fp)
   1e0f8:	00eaf344 	movi	r3,-21555
   1e0fc:	10c02b8d 	sth	r3,174(r2)
   1e100:	e0bff917 	ldw	r2,-28(fp)
   1e104:	00c48d04 	movi	r3,4660
   1e108:	10c02c0d 	sth	r3,176(r2)
   1e10c:	e0bff917 	ldw	r2,-28(fp)
   1e110:	00f99b44 	movi	r3,-6547
   1e114:	10c02c8d 	sth	r3,178(r2)
   1e118:	e0bff917 	ldw	r2,-28(fp)
   1e11c:	00f7bb04 	movi	r3,-8468
   1e120:	10c02d0d 	sth	r3,180(r2)
   1e124:	e0bff917 	ldw	r2,-28(fp)
   1e128:	00c00144 	movi	r3,5
   1e12c:	10c02d8d 	sth	r3,182(r2)
   1e130:	e0bff917 	ldw	r2,-28(fp)
   1e134:	00c002c4 	movi	r3,11
   1e138:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e13c:	e0bff917 	ldw	r2,-28(fp)
   1e140:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e144:	e0bffa17 	ldw	r2,-24(fp)
   1e148:	10bff304 	addi	r2,r2,-52
   1e14c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e150:	e0bffb17 	ldw	r2,-20(fp)
   1e154:	10800c04 	addi	r2,r2,48
   1e158:	e0fffc17 	ldw	r3,-16(fp)
   1e15c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e160:	e0bffb17 	ldw	r2,-20(fp)
   1e164:	10800b04 	addi	r2,r2,44
   1e168:	e0fffd17 	ldw	r3,-12(fp)
   1e16c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e170:	e0bffb17 	ldw	r2,-20(fp)
   1e174:	10800a04 	addi	r2,r2,40
   1e178:	e0fff917 	ldw	r3,-28(fp)
   1e17c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e180:	008000b4 	movhi	r2,2
   1e184:	10b80b04 	addi	r2,r2,-8148
   1e188:	10c00104 	addi	r3,r2,4
   1e18c:	e0bffb17 	ldw	r2,-20(fp)
   1e190:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e194:	e0bffb17 	ldw	r2,-20(fp)
}
   1e198:	e037883a 	mov	sp,fp
   1e19c:	dfc00117 	ldw	ra,4(sp)
   1e1a0:	df000017 	ldw	fp,0(sp)
   1e1a4:	dec00204 	addi	sp,sp,8
   1e1a8:	f800283a 	ret

0001e1ac <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e1ac:	defffe04 	addi	sp,sp,-8
   1e1b0:	df000115 	stw	fp,4(sp)
   1e1b4:	df000104 	addi	fp,sp,4
   1e1b8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e1bc:	e037883a 	mov	sp,fp
   1e1c0:	df000017 	ldw	fp,0(sp)
   1e1c4:	dec00104 	addi	sp,sp,4
   1e1c8:	f800283a 	ret

0001e1cc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e1cc:	defffe04 	addi	sp,sp,-8
   1e1d0:	df000115 	stw	fp,4(sp)
   1e1d4:	df000104 	addi	fp,sp,4
   1e1d8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e1dc:	e037883a 	mov	sp,fp
   1e1e0:	df000017 	ldw	fp,0(sp)
   1e1e4:	dec00104 	addi	sp,sp,4
   1e1e8:	f800283a 	ret

0001e1ec <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e1ec:	deffff04 	addi	sp,sp,-4
   1e1f0:	df000015 	stw	fp,0(sp)
   1e1f4:	d839883a 	mov	fp,sp
}
   1e1f8:	e037883a 	mov	sp,fp
   1e1fc:	df000017 	ldw	fp,0(sp)
   1e200:	dec00104 	addi	sp,sp,4
   1e204:	f800283a 	ret

0001e208 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e208:	deffff04 	addi	sp,sp,-4
   1e20c:	df000015 	stw	fp,0(sp)
   1e210:	d839883a 	mov	fp,sp
}
   1e214:	e037883a 	mov	sp,fp
   1e218:	df000017 	ldw	fp,0(sp)
   1e21c:	dec00104 	addi	sp,sp,4
   1e220:	f800283a 	ret

0001e224 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e224:	deffff04 	addi	sp,sp,-4
   1e228:	df000015 	stw	fp,0(sp)
   1e22c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e230:	e037883a 	mov	sp,fp
   1e234:	df000017 	ldw	fp,0(sp)
   1e238:	dec00104 	addi	sp,sp,4
   1e23c:	f800283a 	ret

0001e240 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e240:	deffff04 	addi	sp,sp,-4
   1e244:	df000015 	stw	fp,0(sp)
   1e248:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e24c:	e037883a 	mov	sp,fp
   1e250:	df000017 	ldw	fp,0(sp)
   1e254:	dec00104 	addi	sp,sp,4
   1e258:	f800283a 	ret

0001e25c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e25c:	deffff04 	addi	sp,sp,-4
   1e260:	df000015 	stw	fp,0(sp)
   1e264:	d839883a 	mov	fp,sp
}
   1e268:	e037883a 	mov	sp,fp
   1e26c:	df000017 	ldw	fp,0(sp)
   1e270:	dec00104 	addi	sp,sp,4
   1e274:	f800283a 	ret

0001e278 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e278:	deffff04 	addi	sp,sp,-4
   1e27c:	df000015 	stw	fp,0(sp)
   1e280:	d839883a 	mov	fp,sp
}
   1e284:	e037883a 	mov	sp,fp
   1e288:	df000017 	ldw	fp,0(sp)
   1e28c:	dec00104 	addi	sp,sp,4
   1e290:	f800283a 	ret

0001e294 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1e294:	defffe04 	addi	sp,sp,-8
   1e298:	df000115 	stw	fp,4(sp)
   1e29c:	df000104 	addi	fp,sp,4
   1e2a0:	e13fff15 	stw	r4,-4(fp)
}
   1e2a4:	e037883a 	mov	sp,fp
   1e2a8:	df000017 	ldw	fp,0(sp)
   1e2ac:	dec00104 	addi	sp,sp,4
   1e2b0:	f800283a 	ret

0001e2b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1e2b4:	defffb04 	addi	sp,sp,-20
   1e2b8:	dfc00415 	stw	ra,16(sp)
   1e2bc:	df000315 	stw	fp,12(sp)
   1e2c0:	df000304 	addi	fp,sp,12
   1e2c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1e2c8:	008000b4 	movhi	r2,2
   1e2cc:	10855904 	addi	r2,r2,5476
   1e2d0:	10800017 	ldw	r2,0(r2)
   1e2d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e2d8:	00003106 	br	1e3a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1e2dc:	e0bffd17 	ldw	r2,-12(fp)
   1e2e0:	10800217 	ldw	r2,8(r2)
   1e2e4:	1009883a 	mov	r4,r2
   1e2e8:	0001f840 	call	1f84 <strlen>
   1e2ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1e2f0:	e0bffd17 	ldw	r2,-12(fp)
   1e2f4:	10c00217 	ldw	r3,8(r2)
   1e2f8:	e0bffe17 	ldw	r2,-8(fp)
   1e2fc:	10bfffc4 	addi	r2,r2,-1
   1e300:	1885883a 	add	r2,r3,r2
   1e304:	10800003 	ldbu	r2,0(r2)
   1e308:	10803fcc 	andi	r2,r2,255
   1e30c:	1080201c 	xori	r2,r2,128
   1e310:	10bfe004 	addi	r2,r2,-128
   1e314:	10800bd8 	cmpnei	r2,r2,47
   1e318:	1000031e 	bne	r2,zero,1e328 <alt_find_file+0x74>
    {
      len -= 1;
   1e31c:	e0bffe17 	ldw	r2,-8(fp)
   1e320:	10bfffc4 	addi	r2,r2,-1
   1e324:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e328:	e0bffe17 	ldw	r2,-8(fp)
   1e32c:	e0ffff17 	ldw	r3,-4(fp)
   1e330:	1885883a 	add	r2,r3,r2
   1e334:	10800003 	ldbu	r2,0(r2)
   1e338:	10803fcc 	andi	r2,r2,255
   1e33c:	1080201c 	xori	r2,r2,128
   1e340:	10bfe004 	addi	r2,r2,-128
   1e344:	10800be0 	cmpeqi	r2,r2,47
   1e348:	1000081e 	bne	r2,zero,1e36c <alt_find_file+0xb8>
   1e34c:	e0bffe17 	ldw	r2,-8(fp)
   1e350:	e0ffff17 	ldw	r3,-4(fp)
   1e354:	1885883a 	add	r2,r3,r2
   1e358:	10800003 	ldbu	r2,0(r2)
   1e35c:	10803fcc 	andi	r2,r2,255
   1e360:	1080201c 	xori	r2,r2,128
   1e364:	10bfe004 	addi	r2,r2,-128
   1e368:	10000a1e 	bne	r2,zero,1e394 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1e36c:	e0bffd17 	ldw	r2,-12(fp)
   1e370:	10c00217 	ldw	r3,8(r2)
   1e374:	e0bffe17 	ldw	r2,-8(fp)
   1e378:	1809883a 	mov	r4,r3
   1e37c:	e17fff17 	ldw	r5,-4(fp)
   1e380:	100d883a 	mov	r6,r2
   1e384:	001e6380 	call	1e638 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e388:	1000021e 	bne	r2,zero,1e394 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1e38c:	e0bffd17 	ldw	r2,-12(fp)
   1e390:	00000806 	br	1e3b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1e394:	e0bffd17 	ldw	r2,-12(fp)
   1e398:	10800017 	ldw	r2,0(r2)
   1e39c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e3a0:	e0fffd17 	ldw	r3,-12(fp)
   1e3a4:	008000b4 	movhi	r2,2
   1e3a8:	10855904 	addi	r2,r2,5476
   1e3ac:	18bfcb1e 	bne	r3,r2,1e2dc <__alt_mem_Flash_flash_data+0xf401e2dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1e3b0:	0005883a 	mov	r2,zero
}
   1e3b4:	e037883a 	mov	sp,fp
   1e3b8:	dfc00117 	ldw	ra,4(sp)
   1e3bc:	df000017 	ldw	fp,0(sp)
   1e3c0:	dec00204 	addi	sp,sp,8
   1e3c4:	f800283a 	ret

0001e3c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1e3c8:	defff904 	addi	sp,sp,-28
   1e3cc:	dfc00615 	stw	ra,24(sp)
   1e3d0:	df000515 	stw	fp,20(sp)
   1e3d4:	df000504 	addi	fp,sp,20
   1e3d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1e3dc:	00bffa04 	movi	r2,-24
   1e3e0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1e3e4:	008000b4 	movhi	r2,2
   1e3e8:	108e2804 	addi	r2,r2,14496
   1e3ec:	10800017 	ldw	r2,0(r2)
   1e3f0:	e0bffd15 	stw	r2,-12(fp)
   1e3f4:	e03ffe0d 	sth	zero,-8(fp)
   1e3f8:	e0fffe0b 	ldhu	r3,-8(fp)
   1e3fc:	e0bffe84 	addi	r2,fp,-6
   1e400:	e13ffd17 	ldw	r4,-12(fp)
   1e404:	180b883a 	mov	r5,r3
   1e408:	100d883a 	mov	r6,r2
   1e40c:	00181840 	call	18184 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e410:	e03ffb15 	stw	zero,-20(fp)
   1e414:	00001d06 	br	1e48c <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1e418:	008000b4 	movhi	r2,2
   1e41c:	10bf3004 	addi	r2,r2,-832
   1e420:	e0fffb17 	ldw	r3,-20(fp)
   1e424:	18c00324 	muli	r3,r3,12
   1e428:	10c5883a 	add	r2,r2,r3
   1e42c:	10800017 	ldw	r2,0(r2)
   1e430:	1000131e 	bne	r2,zero,1e480 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1e434:	008000b4 	movhi	r2,2
   1e438:	10bf3004 	addi	r2,r2,-832
   1e43c:	e0fffb17 	ldw	r3,-20(fp)
   1e440:	18c00324 	muli	r3,r3,12
   1e444:	10c5883a 	add	r2,r2,r3
   1e448:	e0ffff17 	ldw	r3,-4(fp)
   1e44c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1e450:	008000b4 	movhi	r2,2
   1e454:	10855d04 	addi	r2,r2,5492
   1e458:	10c00017 	ldw	r3,0(r2)
   1e45c:	e0bffb17 	ldw	r2,-20(fp)
   1e460:	1880040e 	bge	r3,r2,1e474 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1e464:	008000b4 	movhi	r2,2
   1e468:	10855d04 	addi	r2,r2,5492
   1e46c:	e0fffb17 	ldw	r3,-20(fp)
   1e470:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1e474:	e0bffb17 	ldw	r2,-20(fp)
   1e478:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1e47c:	00000606 	br	1e498 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e480:	e0bffb17 	ldw	r2,-20(fp)
   1e484:	10800044 	addi	r2,r2,1
   1e488:	e0bffb15 	stw	r2,-20(fp)
   1e48c:	e0bffb17 	ldw	r2,-20(fp)
   1e490:	10800810 	cmplti	r2,r2,32
   1e494:	103fe01e 	bne	r2,zero,1e418 <__alt_mem_Flash_flash_data+0xf401e418>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1e498:	008000b4 	movhi	r2,2
   1e49c:	108e2804 	addi	r2,r2,14496
   1e4a0:	10800017 	ldw	r2,0(r2)
   1e4a4:	1009883a 	mov	r4,r2
   1e4a8:	00185580 	call	18558 <OSSemPost>

  return rc;
   1e4ac:	e0bffc17 	ldw	r2,-16(fp)
}
   1e4b0:	e037883a 	mov	sp,fp
   1e4b4:	dfc00117 	ldw	ra,4(sp)
   1e4b8:	df000017 	ldw	fp,0(sp)
   1e4bc:	dec00204 	addi	sp,sp,8
   1e4c0:	f800283a 	ret

0001e4c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e4c4:	defffb04 	addi	sp,sp,-20
   1e4c8:	df000415 	stw	fp,16(sp)
   1e4cc:	df000404 	addi	fp,sp,16
   1e4d0:	e13ffe15 	stw	r4,-8(fp)
   1e4d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e4d8:	e0bfff17 	ldw	r2,-4(fp)
   1e4dc:	10840070 	cmpltui	r2,r2,4097
   1e4e0:	1000021e 	bne	r2,zero,1e4ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e4e4:	00840004 	movi	r2,4096
   1e4e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e4ec:	e0fffe17 	ldw	r3,-8(fp)
   1e4f0:	e0bfff17 	ldw	r2,-4(fp)
   1e4f4:	1885883a 	add	r2,r3,r2
   1e4f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e4fc:	e0bffe17 	ldw	r2,-8(fp)
   1e500:	e0bffc15 	stw	r2,-16(fp)
   1e504:	00000506 	br	1e51c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e508:	e0bffc17 	ldw	r2,-16(fp)
   1e50c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e510:	e0bffc17 	ldw	r2,-16(fp)
   1e514:	10800804 	addi	r2,r2,32
   1e518:	e0bffc15 	stw	r2,-16(fp)
   1e51c:	e0fffc17 	ldw	r3,-16(fp)
   1e520:	e0bffd17 	ldw	r2,-12(fp)
   1e524:	18bff836 	bltu	r3,r2,1e508 <__alt_mem_Flash_flash_data+0xf401e508>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e528:	e0bffe17 	ldw	r2,-8(fp)
   1e52c:	108007cc 	andi	r2,r2,31
   1e530:	10000226 	beq	r2,zero,1e53c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e534:	e0bffc17 	ldw	r2,-16(fp)
   1e538:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e53c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e540:	e037883a 	mov	sp,fp
   1e544:	df000017 	ldw	fp,0(sp)
   1e548:	dec00104 	addi	sp,sp,4
   1e54c:	f800283a 	ret

0001e550 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1e550:	defffe04 	addi	sp,sp,-8
   1e554:	df000115 	stw	fp,4(sp)
   1e558:	df000104 	addi	fp,sp,4
   1e55c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1e560:	e0bfff17 	ldw	r2,-4(fp)
   1e564:	10bffe84 	addi	r2,r2,-6
   1e568:	10c00428 	cmpgeui	r3,r2,16
   1e56c:	18001a1e 	bne	r3,zero,1e5d8 <alt_exception_cause_generated_bad_addr+0x88>
   1e570:	100690ba 	slli	r3,r2,2
   1e574:	008000b4 	movhi	r2,2
   1e578:	10b96204 	addi	r2,r2,-6776
   1e57c:	1885883a 	add	r2,r3,r2
   1e580:	10800017 	ldw	r2,0(r2)
   1e584:	1000683a 	jmp	r2
   1e588:	0001e5c8 	cmpgei	zero,zero,1943
   1e58c:	0001e5c8 	cmpgei	zero,zero,1943
   1e590:	0001e5d8 	cmpnei	zero,zero,1943
   1e594:	0001e5d8 	cmpnei	zero,zero,1943
   1e598:	0001e5d8 	cmpnei	zero,zero,1943
   1e59c:	0001e5c8 	cmpgei	zero,zero,1943
   1e5a0:	0001e5d0 	cmplti	zero,zero,1943
   1e5a4:	0001e5d8 	cmpnei	zero,zero,1943
   1e5a8:	0001e5c8 	cmpgei	zero,zero,1943
   1e5ac:	0001e5c8 	cmpgei	zero,zero,1943
   1e5b0:	0001e5d8 	cmpnei	zero,zero,1943
   1e5b4:	0001e5c8 	cmpgei	zero,zero,1943
   1e5b8:	0001e5d0 	cmplti	zero,zero,1943
   1e5bc:	0001e5d8 	cmpnei	zero,zero,1943
   1e5c0:	0001e5d8 	cmpnei	zero,zero,1943
   1e5c4:	0001e5c8 	cmpgei	zero,zero,1943
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1e5c8:	00800044 	movi	r2,1
   1e5cc:	00000306 	br	1e5dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1e5d0:	0005883a 	mov	r2,zero
   1e5d4:	00000106 	br	1e5dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1e5d8:	0005883a 	mov	r2,zero
  }
}
   1e5dc:	e037883a 	mov	sp,fp
   1e5e0:	df000017 	ldw	fp,0(sp)
   1e5e4:	dec00104 	addi	sp,sp,4
   1e5e8:	f800283a 	ret

0001e5ec <atexit>:
   1e5ec:	200b883a 	mov	r5,r4
   1e5f0:	000d883a 	mov	r6,zero
   1e5f4:	0009883a 	mov	r4,zero
   1e5f8:	000f883a 	mov	r7,zero
   1e5fc:	001e6b41 	jmpi	1e6b4 <__register_exitproc>

0001e600 <exit>:
   1e600:	defffe04 	addi	sp,sp,-8
   1e604:	000b883a 	mov	r5,zero
   1e608:	dc000015 	stw	r16,0(sp)
   1e60c:	dfc00115 	stw	ra,4(sp)
   1e610:	2021883a 	mov	r16,r4
   1e614:	001e7c80 	call	1e7c8 <__call_exitprocs>
   1e618:	008000b4 	movhi	r2,2
   1e61c:	10855304 	addi	r2,r2,5452
   1e620:	11000017 	ldw	r4,0(r2)
   1e624:	20800f17 	ldw	r2,60(r4)
   1e628:	10000126 	beq	r2,zero,1e630 <exit+0x30>
   1e62c:	103ee83a 	callr	r2
   1e630:	8009883a 	mov	r4,r16
   1e634:	001e95c0 	call	1e95c <_exit>

0001e638 <memcmp>:
   1e638:	01c000c4 	movi	r7,3
   1e63c:	3980192e 	bgeu	r7,r6,1e6a4 <memcmp+0x6c>
   1e640:	2144b03a 	or	r2,r4,r5
   1e644:	11c4703a 	and	r2,r2,r7
   1e648:	10000f26 	beq	r2,zero,1e688 <memcmp+0x50>
   1e64c:	20800003 	ldbu	r2,0(r4)
   1e650:	28c00003 	ldbu	r3,0(r5)
   1e654:	10c0151e 	bne	r2,r3,1e6ac <memcmp+0x74>
   1e658:	31bfff84 	addi	r6,r6,-2
   1e65c:	01ffffc4 	movi	r7,-1
   1e660:	00000406 	br	1e674 <memcmp+0x3c>
   1e664:	20800003 	ldbu	r2,0(r4)
   1e668:	28c00003 	ldbu	r3,0(r5)
   1e66c:	31bfffc4 	addi	r6,r6,-1
   1e670:	10c00e1e 	bne	r2,r3,1e6ac <memcmp+0x74>
   1e674:	21000044 	addi	r4,r4,1
   1e678:	29400044 	addi	r5,r5,1
   1e67c:	31fff91e 	bne	r6,r7,1e664 <__alt_mem_Flash_flash_data+0xf401e664>
   1e680:	0005883a 	mov	r2,zero
   1e684:	f800283a 	ret
   1e688:	20c00017 	ldw	r3,0(r4)
   1e68c:	28800017 	ldw	r2,0(r5)
   1e690:	1880041e 	bne	r3,r2,1e6a4 <memcmp+0x6c>
   1e694:	31bfff04 	addi	r6,r6,-4
   1e698:	21000104 	addi	r4,r4,4
   1e69c:	29400104 	addi	r5,r5,4
   1e6a0:	39bff936 	bltu	r7,r6,1e688 <__alt_mem_Flash_flash_data+0xf401e688>
   1e6a4:	303fe91e 	bne	r6,zero,1e64c <__alt_mem_Flash_flash_data+0xf401e64c>
   1e6a8:	003ff506 	br	1e680 <__alt_mem_Flash_flash_data+0xf401e680>
   1e6ac:	10c5c83a 	sub	r2,r2,r3
   1e6b0:	f800283a 	ret

0001e6b4 <__register_exitproc>:
   1e6b4:	008000b4 	movhi	r2,2
   1e6b8:	defffa04 	addi	sp,sp,-24
   1e6bc:	10855304 	addi	r2,r2,5452
   1e6c0:	dc000315 	stw	r16,12(sp)
   1e6c4:	14000017 	ldw	r16,0(r2)
   1e6c8:	dc400415 	stw	r17,16(sp)
   1e6cc:	dfc00515 	stw	ra,20(sp)
   1e6d0:	80805217 	ldw	r2,328(r16)
   1e6d4:	2023883a 	mov	r17,r4
   1e6d8:	10003626 	beq	r2,zero,1e7b4 <__register_exitproc+0x100>
   1e6dc:	10c00117 	ldw	r3,4(r2)
   1e6e0:	010007c4 	movi	r4,31
   1e6e4:	20c00e16 	blt	r4,r3,1e720 <__register_exitproc+0x6c>
   1e6e8:	1a400044 	addi	r9,r3,1
   1e6ec:	8800211e 	bne	r17,zero,1e774 <__register_exitproc+0xc0>
   1e6f0:	18c00084 	addi	r3,r3,2
   1e6f4:	18c7883a 	add	r3,r3,r3
   1e6f8:	18c7883a 	add	r3,r3,r3
   1e6fc:	12400115 	stw	r9,4(r2)
   1e700:	10c7883a 	add	r3,r2,r3
   1e704:	19400015 	stw	r5,0(r3)
   1e708:	0005883a 	mov	r2,zero
   1e70c:	dfc00517 	ldw	ra,20(sp)
   1e710:	dc400417 	ldw	r17,16(sp)
   1e714:	dc000317 	ldw	r16,12(sp)
   1e718:	dec00604 	addi	sp,sp,24
   1e71c:	f800283a 	ret
   1e720:	00800034 	movhi	r2,0
   1e724:	10800004 	addi	r2,r2,0
   1e728:	10002526 	beq	r2,zero,1e7c0 <__register_exitproc+0x10c>
   1e72c:	01006404 	movi	r4,400
   1e730:	d9400015 	stw	r5,0(sp)
   1e734:	d9800115 	stw	r6,4(sp)
   1e738:	d9c00215 	stw	r7,8(sp)
   1e73c:	00000000 	call	0 <__alt_mem_SDRAM>
   1e740:	d9400017 	ldw	r5,0(sp)
   1e744:	d9800117 	ldw	r6,4(sp)
   1e748:	d9c00217 	ldw	r7,8(sp)
   1e74c:	10001c26 	beq	r2,zero,1e7c0 <__register_exitproc+0x10c>
   1e750:	80c05217 	ldw	r3,328(r16)
   1e754:	10000115 	stw	zero,4(r2)
   1e758:	02400044 	movi	r9,1
   1e75c:	10c00015 	stw	r3,0(r2)
   1e760:	80805215 	stw	r2,328(r16)
   1e764:	10006215 	stw	zero,392(r2)
   1e768:	10006315 	stw	zero,396(r2)
   1e76c:	0007883a 	mov	r3,zero
   1e770:	883fdf26 	beq	r17,zero,1e6f0 <__alt_mem_Flash_flash_data+0xf401e6f0>
   1e774:	18d1883a 	add	r8,r3,r3
   1e778:	4211883a 	add	r8,r8,r8
   1e77c:	1211883a 	add	r8,r2,r8
   1e780:	41802215 	stw	r6,136(r8)
   1e784:	01000044 	movi	r4,1
   1e788:	11806217 	ldw	r6,392(r2)
   1e78c:	20c8983a 	sll	r4,r4,r3
   1e790:	310cb03a 	or	r6,r6,r4
   1e794:	11806215 	stw	r6,392(r2)
   1e798:	41c04215 	stw	r7,264(r8)
   1e79c:	01800084 	movi	r6,2
   1e7a0:	89bfd31e 	bne	r17,r6,1e6f0 <__alt_mem_Flash_flash_data+0xf401e6f0>
   1e7a4:	11806317 	ldw	r6,396(r2)
   1e7a8:	3108b03a 	or	r4,r6,r4
   1e7ac:	11006315 	stw	r4,396(r2)
   1e7b0:	003fcf06 	br	1e6f0 <__alt_mem_Flash_flash_data+0xf401e6f0>
   1e7b4:	80805304 	addi	r2,r16,332
   1e7b8:	80805215 	stw	r2,328(r16)
   1e7bc:	003fc706 	br	1e6dc <__alt_mem_Flash_flash_data+0xf401e6dc>
   1e7c0:	00bfffc4 	movi	r2,-1
   1e7c4:	003fd106 	br	1e70c <__alt_mem_Flash_flash_data+0xf401e70c>

0001e7c8 <__call_exitprocs>:
   1e7c8:	008000b4 	movhi	r2,2
   1e7cc:	10855304 	addi	r2,r2,5452
   1e7d0:	10800017 	ldw	r2,0(r2)
   1e7d4:	defff404 	addi	sp,sp,-48
   1e7d8:	dd800815 	stw	r22,32(sp)
   1e7dc:	d8800015 	stw	r2,0(sp)
   1e7e0:	10805204 	addi	r2,r2,328
   1e7e4:	dd000615 	stw	r20,24(sp)
   1e7e8:	dc800415 	stw	r18,16(sp)
   1e7ec:	dfc00b15 	stw	ra,44(sp)
   1e7f0:	df000a15 	stw	fp,40(sp)
   1e7f4:	ddc00915 	stw	r23,36(sp)
   1e7f8:	dd400715 	stw	r21,28(sp)
   1e7fc:	dcc00515 	stw	r19,20(sp)
   1e800:	dc400315 	stw	r17,12(sp)
   1e804:	dc000215 	stw	r16,8(sp)
   1e808:	2025883a 	mov	r18,r4
   1e80c:	2829883a 	mov	r20,r5
   1e810:	d8800115 	stw	r2,4(sp)
   1e814:	05bfffc4 	movi	r22,-1
   1e818:	d8800017 	ldw	r2,0(sp)
   1e81c:	14c05217 	ldw	r19,328(r2)
   1e820:	98001d26 	beq	r19,zero,1e898 <__call_exitprocs+0xd0>
   1e824:	dd400117 	ldw	r21,4(sp)
   1e828:	98800117 	ldw	r2,4(r19)
   1e82c:	173fffc4 	addi	fp,r2,-1
   1e830:	e0000d16 	blt	fp,zero,1e868 <__call_exitprocs+0xa0>
   1e834:	14000044 	addi	r16,r2,1
   1e838:	8421883a 	add	r16,r16,r16
   1e83c:	8421883a 	add	r16,r16,r16
   1e840:	84402004 	addi	r17,r16,128
   1e844:	9c63883a 	add	r17,r19,r17
   1e848:	9c21883a 	add	r16,r19,r16
   1e84c:	a0001e26 	beq	r20,zero,1e8c8 <__call_exitprocs+0x100>
   1e850:	80804017 	ldw	r2,256(r16)
   1e854:	15001c26 	beq	r2,r20,1e8c8 <__call_exitprocs+0x100>
   1e858:	e73fffc4 	addi	fp,fp,-1
   1e85c:	843fff04 	addi	r16,r16,-4
   1e860:	8c7fff04 	addi	r17,r17,-4
   1e864:	e5bff91e 	bne	fp,r22,1e84c <__alt_mem_Flash_flash_data+0xf401e84c>
   1e868:	00800034 	movhi	r2,0
   1e86c:	10800004 	addi	r2,r2,0
   1e870:	10000926 	beq	r2,zero,1e898 <__call_exitprocs+0xd0>
   1e874:	98800117 	ldw	r2,4(r19)
   1e878:	1000311e 	bne	r2,zero,1e940 <__call_exitprocs+0x178>
   1e87c:	98800017 	ldw	r2,0(r19)
   1e880:	10003426 	beq	r2,zero,1e954 <__call_exitprocs+0x18c>
   1e884:	9809883a 	mov	r4,r19
   1e888:	a8800015 	stw	r2,0(r21)
   1e88c:	00000000 	call	0 <__alt_mem_SDRAM>
   1e890:	acc00017 	ldw	r19,0(r21)
   1e894:	983fe41e 	bne	r19,zero,1e828 <__alt_mem_Flash_flash_data+0xf401e828>
   1e898:	dfc00b17 	ldw	ra,44(sp)
   1e89c:	df000a17 	ldw	fp,40(sp)
   1e8a0:	ddc00917 	ldw	r23,36(sp)
   1e8a4:	dd800817 	ldw	r22,32(sp)
   1e8a8:	dd400717 	ldw	r21,28(sp)
   1e8ac:	dd000617 	ldw	r20,24(sp)
   1e8b0:	dcc00517 	ldw	r19,20(sp)
   1e8b4:	dc800417 	ldw	r18,16(sp)
   1e8b8:	dc400317 	ldw	r17,12(sp)
   1e8bc:	dc000217 	ldw	r16,8(sp)
   1e8c0:	dec00c04 	addi	sp,sp,48
   1e8c4:	f800283a 	ret
   1e8c8:	98800117 	ldw	r2,4(r19)
   1e8cc:	80c00017 	ldw	r3,0(r16)
   1e8d0:	10bfffc4 	addi	r2,r2,-1
   1e8d4:	17001526 	beq	r2,fp,1e92c <__call_exitprocs+0x164>
   1e8d8:	80000015 	stw	zero,0(r16)
   1e8dc:	183fde26 	beq	r3,zero,1e858 <__alt_mem_Flash_flash_data+0xf401e858>
   1e8e0:	00800044 	movi	r2,1
   1e8e4:	1708983a 	sll	r4,r2,fp
   1e8e8:	98806217 	ldw	r2,392(r19)
   1e8ec:	9dc00117 	ldw	r23,4(r19)
   1e8f0:	2084703a 	and	r2,r4,r2
   1e8f4:	1000061e 	bne	r2,zero,1e910 <__call_exitprocs+0x148>
   1e8f8:	183ee83a 	callr	r3
   1e8fc:	98800117 	ldw	r2,4(r19)
   1e900:	15ffc51e 	bne	r2,r23,1e818 <__alt_mem_Flash_flash_data+0xf401e818>
   1e904:	a8800017 	ldw	r2,0(r21)
   1e908:	14ffd326 	beq	r2,r19,1e858 <__alt_mem_Flash_flash_data+0xf401e858>
   1e90c:	003fc206 	br	1e818 <__alt_mem_Flash_flash_data+0xf401e818>
   1e910:	98806317 	ldw	r2,396(r19)
   1e914:	2084703a 	and	r2,r4,r2
   1e918:	1000061e 	bne	r2,zero,1e934 <__call_exitprocs+0x16c>
   1e91c:	89400017 	ldw	r5,0(r17)
   1e920:	9009883a 	mov	r4,r18
   1e924:	183ee83a 	callr	r3
   1e928:	003ff406 	br	1e8fc <__alt_mem_Flash_flash_data+0xf401e8fc>
   1e92c:	9f000115 	stw	fp,4(r19)
   1e930:	003fea06 	br	1e8dc <__alt_mem_Flash_flash_data+0xf401e8dc>
   1e934:	89000017 	ldw	r4,0(r17)
   1e938:	183ee83a 	callr	r3
   1e93c:	003fef06 	br	1e8fc <__alt_mem_Flash_flash_data+0xf401e8fc>
   1e940:	98800017 	ldw	r2,0(r19)
   1e944:	982b883a 	mov	r21,r19
   1e948:	1027883a 	mov	r19,r2
   1e94c:	983fb61e 	bne	r19,zero,1e828 <__alt_mem_Flash_flash_data+0xf401e828>
   1e950:	003fd106 	br	1e898 <__alt_mem_Flash_flash_data+0xf401e898>
   1e954:	0005883a 	mov	r2,zero
   1e958:	003ffa06 	br	1e944 <__alt_mem_Flash_flash_data+0xf401e944>

0001e95c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1e95c:	defffd04 	addi	sp,sp,-12
   1e960:	df000215 	stw	fp,8(sp)
   1e964:	df000204 	addi	fp,sp,8
   1e968:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1e96c:	008000b4 	movhi	r2,2
   1e970:	108e3044 	addi	r2,r2,14529
   1e974:	10000005 	stb	zero,0(r2)
   1e978:	e0bfff17 	ldw	r2,-4(fp)
   1e97c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1e980:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1e984:	10000226 	beq	r2,zero,1e990 <_exit+0x34>
    ALT_SIM_FAIL();
   1e988:	002af070 	cmpltui	zero,zero,43969
   1e98c:	00000106 	br	1e994 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1e990:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1e994:	003fff06 	br	1e994 <__alt_mem_Flash_flash_data+0xf401e994>
