
UART.elf:     file format elf32-littlenios2
UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cbb4 memsz 0x0001cbb4 flags r-x
    LOAD off    0x0001dbd4 vaddr 0x0001cbd4 paddr 0x0001eb24 align 2**12
         filesz 0x00001f50 memsz 0x00001f50 flags rw-
    LOAD off    0x00020a74 vaddr 0x00020a74 paddr 0x00020a74 align 2**12
         filesz 0x00000000 memsz 0x00007410 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c290  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000700  0001c4d4  0001c4d4  0001d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f50  0001cbd4  0001eb24  0001dbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007410  00020a74  00020a74  00020a74  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00027e84  00027e84  0001fb24  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001fb24  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001fb24  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  0001fb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00032552  00000000  00000000  00020c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b9c1  00000000  00000000  000531ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f8c2  00000000  00000000  0005eb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ac8  00000000  00000000  0006e440  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000052ca  00000000  00000000  00071f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  000771d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00092340  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  00092360  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000994e6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000994ec  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000994f1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000994f2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000994f3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000994f7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000994fb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000994ff  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00099508  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00099511  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0009951a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  00099525  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001959ba  00000000  00000000  0009953a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001c4d4 l    d  .rodata	00000000 .rodata
0001cbd4 l    d  .rwdata	00000000 .rwdata
00020a74 l    d  .bss	00000000 .bss
00027e84 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c602 l     O .rodata	00000010 zeroes.4240
0001c612 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001c622 l     O .rodata	00000010 zeroes.4255
00004bb4 l     F .text	000000bc __sbprintf
0001c632 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004dc4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006980 l     F .text	00000008 __fp_lock
00006988 l     F .text	00000008 __fp_unlock
0000699c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001cbd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001d018 l     O .rwdata	00000020 lc_ctype_charset
0001cff8 l     O .rwdata	00000020 lc_message_charset
0001d038 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001c664 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c788 l     O .rodata	00000010 zeroes.4184
0001c798 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000ae48 l     F .text	000000fc __sprint_r.part.0
0001c7b8 l     O .rodata	00000010 blanks.4199
0001c7a8 l     O .rodata	00000010 zeroes.4200
0000c250 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d754 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000fe80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ffa0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ffcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000100cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000101c0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000102a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0001049c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001ea98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000106f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001ea9c l     O .rwdata	00000004 lockid
00020aa0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001eaa0 l     O .rwdata	00000004 lockid
00020aa8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001212c l     F .text	00000044 OS_InitMisc
00012170 l     F .text	00000068 OS_InitRdyList
000122d0 l     F .text	000000e0 OS_InitTCBList
00012050 l     F .text	000000dc OS_InitEventList
000121d8 l     F .text	0000007c OS_InitTaskIdle
00012254 l     F .text	0000007c OS_InitTaskStat
00012530 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00014334 l     F .text	00000110 OS_FlagTaskRdy
0001408c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000187dc l     F .text	00000038 alt_dev_reg
0001d620 l     O .rwdata	0000106c JTAG_UART
0001e68c l     O .rwdata	00000030 AV_Config
0001e6bc l     O .rwdata	00000030 Audio_Subsystem_Audio
0001e6ec l     O .rwdata	0000002c Char_LCD_16x2
0001e718 l     O .rwdata	0000002c IrDA
0001e744 l     O .rwdata	0000002c Expansion_JP5
0001e770 l     O .rwdata	0000002c Green_LEDs
0001e79c l     O .rwdata	0000002c HEX3_HEX0
0001e7c8 l     O .rwdata	0000002c HEX7_HEX4
0001e7f4 l     O .rwdata	0000002c Pushbuttons
0001e820 l     O .rwdata	0000002c Red_LEDs
0001e84c l     O .rwdata	0000002c Slider_Switches
0001e878 l     O .rwdata	00000038 PS2_Port
0001e8b0 l     O .rwdata	00000038 PS2_Port_Dual
0001e8e8 l     O .rwdata	0000002c rs232_0
0001e914 l     O .rwdata	0000002c rs232_1
0001e940 l     O .rwdata	0000002c Serial_Port
0001e96c l     O .rwdata	00000034 USB
0001e9a0 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001e9e8 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001ea3c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018edc l     F .text	000002a8 altera_avalon_jtag_uart_irq
00019184 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001995c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b138 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b3a4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b68c l     F .text	00000050 alt_get_errno
0001b6dc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020b0c g     O .bss	00000004 alt_instruction_exception_handler
00009360 g     F .text	00000074 _mprec_log10
0001eaee g     O .rwdata	00000002 OSTaskNameSize
0000944c g     F .text	0000008c __any_on
0000c7bc g     F .text	00000054 _isatty_r
0001c670 g     O .rodata	00000028 __mprec_tinytens
000103c8 g     F .text	000000d4 alt_main
000009f4 g     F .text	000000a8 _puts_r
00027d84 g     O .bss	00000100 alt_irq
0001a4f8 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000c810 g     F .text	0000005c _lseek_r
00014b98 g     F .text	000000d0 OS_MemInit
0001eb24 g       *ABS*	00000000 __flash_rwdata_start
00018778 g     F .text	00000064 OSTimeSet
00019ac8 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000e9e8 g     F .text	00000084 .hidden __eqdf2
00010da8 g     F .text	00000610 OSEventPendMulti
00027e84 g       *ABS*	00000000 __alt_heap_start
0001bce8 g     F .text	00000020 OSTaskCreateHook
00020b60 g     O .bss	00002000 task1_stk
000009b8 g     F .text	0000003c printf
0001eac6 g     O .rwdata	00000002 OSMboxEn
0001140c g     F .text	0000007c OSIntEnter
0000ca1c g     F .text	0000009c _wcrtomb_r
00009be0 g     F .text	0000005c __sseek
00006cd0 g     F .text	00000010 __sinit
0001ae80 g     F .text	00000100 alt_up_char_buffer_string
0000c8c8 g     F .text	00000138 __swbuf_r
0001a318 g     F .text	00000034 read_CE_bit
0001ead6 g     O .rwdata	00000002 OSQEn
0000777c g     F .text	0000007c _setlocale_r
00006b38 g     F .text	00000068 __sfmoreglue
00010a7c g     F .text	000000d0 __malloc_unlock
0001bd44 g     F .text	0000001c OSTaskStatHook
0001a69c g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001ab90 g     F .text	00000090 alt_up_rs232_read_fd
00020ab0 g     O .bss	00000001 OSLockNesting
0001eb14 g     O .rwdata	00000002 OSDataSize
00020ab1 g     O .bss	00000001 OSRunning
0001adb4 g     F .text	000000cc alt_up_char_buffer_draw
000083dc g     F .text	0000015c memmove
0001bd7c g     F .text	0000001c OSInitHookBegin
0001eb0c g     O .rwdata	00000002 OSTmrSize
00006cb8 g     F .text	00000018 _cleanup
00008538 g     F .text	000000a8 _Balloc
00020ab4 g     O .bss	00000004 OSIdleCtr
0000ea6c g     F .text	000000e0 .hidden __gtdf2
0001ba9c g     F .text	00000020 altera_nios2_gen2_irq_init
0001bb68 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00019a54 g     F .text	00000074 get_DDRAM_addr
00012868 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001eb12 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001eab2 g     O .rwdata	00000002 OSEventSize
00020ab8 g     O .bss	00000001 OSPrioHighRdy
0000c764 g     F .text	00000058 _fstat_r
0001bd08 g     F .text	00000020 OSTaskDelHook
00020a8c g     O .bss	00000004 errno
00009b5c g     F .text	00000008 __seofread
0001bb48 g       .text	00000000 OSStartHighRdy
0001707c g     F .text	000001ec OSTaskCreateExt
00009e10 g     F .text	00001038 ___svfiprintf_internal_r
00013bd8 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001eaf2 g     O .rwdata	00000002 OSTaskStatStkSize
00012cc8 g     F .text	00000308 OSFlagAccept
0001526c g     F .text	000000b8 OSQFlush
00014c68 g     F .text	00000140 OSQAccept
00020a98 g     O .bss	00000004 alt_argv
00026a68 g       *ABS*	00000000 _gp
00016ec0 g     F .text	000001bc OSTaskCreate
00016980 g     F .text	00000540 OSTaskChangePrio
00020aac g     O .bss	00000004 alt_heapsem
00012b3c g     F .text	0000018c OSDebugInit
00017268 g     F .text	000003e0 OSTaskDel
0001d4a0 g     O .rwdata	00000180 alt_fd_list
00024b60 g     O .bss	00000370 OSFlagTbl
00011e3c g     F .text	000000b4 OS_EventTaskRemove
0001b2e4 g     F .text	00000090 alt_find_dev
000082a4 g     F .text	00000138 memcpy
0001eadc g     O .rwdata	00000002 OSRdyTblSize
00019c64 g     F .text	00000050 alt_up_character_lcd_write_fd
0001af80 g     F .text	0000005c alt_up_char_buffer_clear
00006990 g     F .text	0000000c _cleanup_r
0000fca8 g     F .text	000000d0 .hidden __floatsidf
0001b464 g     F .text	00000078 alt_io_redirect
0000eb4c g     F .text	000000e0 .hidden __ltdf2
0001c4d4 g       *ABS*	00000000 __DTOR_END__
0001a1e4 g     F .text	00000090 alt_up_irda_write_fd
0001ab1c g     F .text	00000074 alt_up_rs232_read_data
00000a9c g     F .text	00000014 puts
0001c08c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010b4c g     F .text	00000120 OSEventNameGet
0001eac0 g     O .rwdata	00000002 OSFlagMax
00009a40 g     F .text	00000074 __fpclassifyd
000092bc g     F .text	000000a4 __ratio
00011488 g     F .text	000000f4 OSIntExit
0000c22c g     F .text	00000024 __vfiprintf_internal
0001eafa g     O .rwdata	00000002 OSTCBSize
00020ab9 g     O .bss	00000001 OSPrioCur
00019fe0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000193e8 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000098c g     F .text	0000002c _printf_r
0000d870 g     F .text	00000008 .hidden __udivsi3
0001011c g     F .text	000000a4 isatty
0001eae0 g     O .rwdata	00000002 OSStkWidth
0001c6c0 g     O .rodata	000000c8 __mprec_tens
0001ead4 g     O .rwdata	00000002 OSPtrSize
000077f8 g     F .text	0000000c __locale_charset
0001eab4 g     O .rwdata	00000002 OSEventTblSize
00019f84 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001babc g       .text	00000000 OSCtxSw
0001c000 g     F .text	0000008c alt_icache_flush
00020a88 g     O .bss	00000004 __malloc_top_pad
00020abc g     O .bss	00000004 OSTCBList
00020a90 g     O .bss	00000004 alt_fd_list_lock
0001ea70 g     O .rwdata	00000004 __mb_cur_max
00007828 g     F .text	0000000c _localeconv_r
00008944 g     F .text	0000003c __i2b
00007134 g     F .text	000004c0 __sfvwrite_r
00024ed0 g     O .bss	00000c30 OSMemTbl
00020ac0 g     O .bss	00000001 OSTickStepState
00009ab4 g     F .text	00000054 _sbrk_r
0001ead8 g     O .rwdata	00000002 OSQMax
00025b00 g     O .bss	00000800 OSTaskStatStk
000147c8 g     F .text	000000f8 OSMemNameGet
0001eab8 g     O .rwdata	00000002 OSFlagEn
0000c86c g     F .text	0000005c _read_r
0001eafe g     O .rwdata	00000002 OSTimeTickHookEn
00020b10 g     O .bss	00000028 command
0001578c g     F .text	00000168 OSQPost
00014444 g     F .text	000000a0 OS_FlagUnlink
0001ea90 g     O .rwdata	00000004 alt_max_fd
0001aa98 g     F .text	00000044 alt_up_rs232_check_parity
00012400 g     F .text	00000064 OS_MemCopy
00012464 g     F .text	000000cc OS_Sched
0000c480 g     F .text	000000f0 _fclose_r
000146d8 g     F .text	000000f0 OSMemGet
00017948 g     F .text	000001c0 OSTaskNameSet
0001a34c g     F .text	00000030 read_num_bytes_available
00006950 g     F .text	00000030 fflush
00020a84 g     O .bss	00000004 __malloc_max_sbrked_mem
00020ac4 g     O .bss	00000004 OSCtxSwCtr
0001bd60 g     F .text	0000001c OSTimeTickHook
0001b4dc g     F .text	000001b0 alt_irq_register
0001eac2 g     O .rwdata	00000002 OSFlagNameSize
0001a2b4 g     F .text	00000034 read_RI_bit
00011ef0 g     F .text	000000fc OS_EventTaskRemoveMulti
0000d880 g     F .text	0000089c .hidden __adddf3
00011cf0 g     F .text	0000014c OS_EventTaskWaitMulti
00009064 g     F .text	0000011c __b2d
0001eada g     O .rwdata	00000002 OSQSize
0000d1c4 g     F .text	00000590 .hidden __umoddi3
000102f4 g     F .text	000000d4 lseek
00016290 g     F .text	00000268 OSSemPend
0001ea68 g     O .rwdata	00000004 _global_impure_ptr
000094d8 g     F .text	00000568 _realloc_r
0001eac4 g     O .rwdata	00000002 OSLowestPrio
00027e84 g       *ABS*	00000000 __bss_end
0001bdd0 g     F .text	00000020 OSTCBInitHook
0001eb0a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001b998 g     F .text	00000104 alt_tick
0000cc04 g     F .text	000005c0 .hidden __udivdi3
0000c584 g     F .text	00000184 _fputwc_r
0001eaac g     O .rwdata	00000002 OSEventEn
0001c698 g     O .rodata	00000028 __mprec_bigtens
00008728 g     F .text	00000104 __s2b
0001eb06 g     O .rwdata	00000002 OSTmrCfgNameSize
0000fd78 g     F .text	000000a4 .hidden __floatunsidf
00008e0c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001a3b0 g     F .text	0000002c read_data_byte
00006cf0 g     F .text	00000018 __fp_lock_all
00000344 g     F .text	00000080 sendCommand
00014250 g     F .text	000000e4 OS_FlagInit
0001b900 g     F .text	00000098 alt_alarm_stop
0001a2e8 g     F .text	00000030 read_RE_bit
0001eae8 g     O .rwdata	00000002 OSTaskIdleStkSize
00020b00 g     O .bss	00000004 alt_irq_active
00015e78 g     F .text	000000b0 OSSemAccept
000149d8 g     F .text	000000d8 OSMemPut
000144e4 g     F .text	000001f4 OSMemCreate
00020ac8 g     O .bss	00000004 OSIdleCtrMax
0001a020 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001d478 g     O .rwdata	00000028 alt_dev_null
0001eafc g     O .rwdata	00000002 OSTicksPerSec
00019ef8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001babc g       .text	00000000 OSIntCtxSw
0001a554 g     F .text	00000074 alt_up_ps2_write_data_byte
0001b11c g     F .text	0000001c alt_dcache_flush_all
0000882c g     F .text	00000068 __hi0bits
0000fc20 g     F .text	00000088 .hidden __fixdfsi
00020acc g     O .bss	00000004 OSTCBFreeList
0001eb24 g       *ABS*	00000000 __ram_rwdata_end
000164f8 g     F .text	0000016c OSSemPendAbort
0001ea88 g     O .rwdata	00000008 alt_dev_list
00010748 g     F .text	000000f8 write
0001eb00 g     O .rwdata	00000002 OSVersionNbr
0001cbd4 g       *ABS*	00000000 __ram_rodata_end
0001001c g     F .text	000000b0 fstat
0001ac20 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000eb4c g     F .text	000000e0 .hidden __ledf2
0001eaa8 g     O .rwdata	00000004 OSEndiannessTest
00008b7c g     F .text	00000140 __pow5mult
0000af5c g     F .text	000012d0 ___vfiprintf_internal_r
00020a7c g     O .bss	00000004 __nlocale_changed
0000d878 g     F .text	00000008 .hidden __umodsi3
000002f8 g     F .text	0000004c putChar
0001eaba g     O .rwdata	00000002 OSFlagGrpSize
00027e84 g       *ABS*	00000000 end
0001a890 g     F .text	00000098 alt_up_ps2_write_fd
0001a05c g     F .text	00000044 alt_up_irda_check_parity
0001acf4 g     F .text	00000080 alt_up_char_buffer_init
00018d9c g     F .text	00000140 altera_avalon_jtag_uart_init
000126c4 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001c4d4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000199d4 g     F .text	00000080 alt_avalon_timer_sc_init
0000fe1c g     F .text	00000064 .hidden __clzsi2
0001969c g     F .text	000002c0 altera_avalon_jtag_uart_write
00006ce0 g     F .text	00000004 __sfp_lock_acquire
000081bc g     F .text	000000e8 memchr
000123b0 g     F .text	00000050 OS_MemClr
00019b78 g     F .text	00000078 alt_up_character_lcd_write
00002c40 g     F .text	00001f50 ___vfprintf_internal_r
0001bb8c g     F .text	0000015c OSTaskStkInit
000004ec g     F .text	000002a4 task1
00000ab0 g     F .text	00000058 _sprintf_r
00006e44 g     F .text	000002f0 _free_r
00007804 g     F .text	00000010 __locale_mb_cur_max
00011a4c g     F .text	00000198 OS_EventTaskRdy
0001c304 g     F .text	00000194 __call_exitprocs
00020ad0 g     O .bss	00000001 OSCPUUsage
00020a78 g     O .bss	00000004 __mlocale_changed
0001ea74 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00000790 g     F .text	0000002c task2
00020b04 g     O .bss	00000004 _alt_tick_rate
00015324 g     F .text	000002fc OSQPend
00018274 g     F .text	00000148 OSTimeDly
00008cbc g     F .text	00000150 __lshift
000003c4 g     F .text	00000128 getCommand
00020b08 g     O .bss	00000004 _alt_nticks
000104ec g     F .text	000000fc read
00018848 g     F .text	000003f0 alt_sys_init
00019db0 g     F .text	00000088 alt_up_character_lcd_shift_display
00009c44 g     F .text	000001cc __ssprint_r
0001c1f0 g     F .text	00000114 __register_exitproc
00020ad1 g     O .bss	00000001 OSTaskCtr
0001a7b0 g     F .text	00000054 alt_up_ps2_clear_fifo
0001aa5c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000183bc g     F .text	00000168 OSTimeDlyHMSM
00008980 g     F .text	000001fc __multiply
00019e38 g     F .text	0000008c alt_up_character_lcd_erase_pos
00019294 g     F .text	00000068 altera_avalon_jtag_uart_close
0001cbd4 g       *ABS*	00000000 __ram_rwdata_start
0001c4d4 g       *ABS*	00000000 __ram_rodata_start
00020b38 g     O .bss	00000028 __malloc_current_mallinfo
0001eaae g     O .rwdata	00000002 OSEventMax
00009180 g     F .text	0000013c __d2b
00016664 g     F .text	00000110 OSSemPost
00011604 g     F .text	000000d8 OSSchedUnlock
00018c38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001bf04 g     F .text	000000fc alt_get_fd
00020ad4 g     O .bss	00000004 OSMemFreeList
00011748 g     F .text	000000ac OSStatInit
00013fc8 g     F .text	000000c4 OSFlagQuery
0001eae4 g     O .rwdata	00000002 OSTaskCreateExtEn
0000c368 g     F .text	00000054 _close_r
0001c174 g     F .text	0000007c memcmp
00011a30 g     F .text	0000001c OS_Dummy
00018cf8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00027e84 g       *ABS*	00000000 __alt_stack_base
00018d48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00019f2c g     F .text	00000058 alt_up_irda_enable_read_interrupt
00004c70 g     F .text	00000154 __swsetup_r
00026300 g     O .bss	000001e0 OSQTbl
0000e11c g     F .text	000008cc .hidden __divdf3
00006ba0 g     F .text	00000118 __sfp
000093d4 g     F .text	00000078 __copybits
0001d070 g     O .rwdata	00000408 __malloc_av_
00006cec g     F .text	00000004 __sinit_lock_release
00020ad8 g     O .bss	00000004 OSTCBHighRdy
0000ec2c g     F .text	00000724 .hidden __muldf3
00009b08 g     F .text	00000054 __sread
00020adc g     O .bss	00000004 OSQFreeList
0001a9c0 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001bdf0 g     F .text	00000114 alt_find_file
0001b188 g     F .text	000000a4 alt_dev_llist_insert
0001095c g     F .text	00000120 __malloc_lock
00010648 g     F .text	000000b0 sbrk
00000cb0 g     F .text	00001f90 ___svfprintf_internal_r
00010c6c g     F .text	0000013c OSEventNameSet
000068f4 g     F .text	0000005c _fflush_r
0000c3bc g     F .text	000000c4 _calloc_r
00020ae0 g     O .bss	00000001 OSRdyGrp
00020a74 g       *ABS*	00000000 __bss_start
00000868 g     F .text	00000124 memset
000007bc g     F .text	000000ac main
00020a9c g     O .bss	00000004 alt_envp
00020a80 g     O .bss	00000004 __malloc_max_total_mem
0001ad74 g     F .text	00000040 alt_up_char_buffer_open_dev
00018c98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ca00 g     F .text	0000001c __swbuf
0001c8e4 g     O .rodata	00000100 OSUnMapTbl
0001eade g     O .rwdata	00000002 OSSemEn
00019d28 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00013c40 g     F .text	00000388 OSFlagPost
00009c3c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c570 g     F .text	00000014 fclose
00011be4 g     F .text	0000010c OS_EventTaskWait
00022b60 g     O .bss	00002000 task2_stk
0001a740 g     F .text	00000070 alt_up_ps2_read_data_byte
000127a0 g     F .text	000000c8 OS_TaskStatStkChk
00017648 g     F .text	00000158 OSTaskDelReq
00004fc4 g     F .text	00001728 _dtoa_r
00007a14 g     F .text	000007a8 _malloc_r
0000cb78 g     F .text	00000030 __ascii_wctomb
0001ea94 g     O .rwdata	00000004 alt_errno
000116dc g     F .text	0000006c OSStart
00010900 g     F .text	0000005c __env_unlock
000075f4 g     F .text	000000c4 _fwalk
00017b08 g     F .text	000001f8 OSTaskResume
00014ab0 g     F .text	000000e8 OSMemQuery
0001eaf0 g     O .rwdata	00000002 OSTaskStatEn
0001a0a0 g     F .text	00000040 alt_up_irda_write_data
0001eaca g     O .rwdata	00000002 OSMemMax
000158f4 g     F .text	00000170 OSQPostFront
0001a928 g     F .text	00000040 alt_up_ps2_open_dev
0000d7c0 g     F .text	00000054 .hidden __divsi3
00020ae1 g     O .bss	00000003 OSRdyTbl
0001eaa4 g     O .rwdata	00000002 OSDebugEn
00019b38 g     F .text	00000040 alt_up_character_lcd_open_dev
00006d20 g     F .text	00000124 _malloc_trim_r
0001a4a0 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001c4d4 g       *ABS*	00000000 __CTOR_END__
0001eabc g     O .rwdata	00000002 OSFlagNodeSize
0001eb04 g     O .rwdata	00000002 OSTmrCfgMax
00019b04 g     F .text	00000034 alt_up_character_lcd_init
00000b74 g     F .text	000000a4 strcmp
00014da8 g     F .text	000001fc OSQCreate
000177a0 g     F .text	000001a8 OSTaskNameGet
0001c4d4 g       *ABS*	00000000 __flash_rodata_start
00015a64 g     F .text	0000020c OSQPostOpt
000117f4 g     F .text	0000021c OSTimeTick
0001eaec g     O .rwdata	00000002 OSTaskMax
0001c4d4 g       *ABS*	00000000 __DTOR_LIST__
00015f28 g     F .text	00000100 OSSemCreate
0001eb10 g     O .rwdata	00000002 OSTmrWheelSize
0001acb4 g     F .text	00000040 alt_up_rs232_open_dev
0000e9e8 g     F .text	00000084 .hidden __nedf2
0001eae6 g     O .rwdata	00000002 OSTaskDelEn
00016774 g     F .text	00000110 OSSemQuery
00014fa4 g     F .text	000002c8 OSQDel
00015620 g     F .text	0000016c OSQPendAbort
00018814 g     F .text	00000034 alt_irq_init
000105e8 g     F .text	00000060 alt_release_fd
0001a37c g     F .text	00000034 read_data_valid
00000b08 g     F .text	0000006c sprintf
00019ec4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001c7c8 g     O .rodata	00000100 .hidden __clz_tab
00020a74 g     O .bss	00000004 _PathLocale
0001a638 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001c128 g     F .text	00000014 atexit
0000c30c g     F .text	0000005c _write_r
0001157c g     F .text	00000088 OSSchedLock
00007834 g     F .text	0000001c setlocale
00012fd0 g     F .text	00000128 OSFlagCreate
0001ea6c g     O .rwdata	00000004 _impure_ptr
00020a94 g     O .bss	00000004 alt_argc
000066ec g     F .text	00000208 __sflush_r
0001b288 g     F .text	0000005c _do_dtors
00007820 g     F .text	00000008 __locale_cjk_lang
0001eab6 g     O .rwdata	00000002 OSEventMultiEn
000130f8 g     F .text	00000270 OSFlagDel
00020ae4 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00009004 g     F .text	00000060 __ulp
000135e8 g     F .text	000005f0 OSFlagPend
0001eb02 g     O .rwdata	00000002 OSTmrEn
00006d08 g     F .text	00000018 __fp_unlock_all
0001ea80 g     O .rwdata	00000008 alt_fs_list
000125a0 g     F .text	00000074 OS_StrCopy
0001a968 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001aadc g     F .text	00000040 alt_up_rs232_write_data
0001eacc g     O .rwdata	00000002 OSMemNameSize
0001bd98 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001eaf8 g     O .rwdata	00000002 OSTCBPrioTblMax
00007850 g     F .text	0000000c localeconv
0001eaf4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001eac8 g     O .rwdata	00000002 OSMemEn
0001ead2 g     O .rwdata	00000002 OSMutexEn
0001eb24 g       *ABS*	00000000 _edata
00027e84 g       *ABS*	00000000 _end
00020ae8 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
000192fc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00018524 g     F .text	000001f0 OSTimeDlyResume
00013498 g     F .text	00000150 OSFlagNameSet
00017d00 g     F .text	000001c8 OSTaskStkChk
0001eace g     O .rwdata	00000002 OSMemSize
00009b64 g     F .text	0000007c __swrite
0001ea78 g     O .rwdata	00000004 __malloc_trim_threshold
00007814 g     F .text	0000000c __locale_msgcharset
00020aec g     O .bss	00000004 OSTCBCur
0001c13c g     F .text	00000038 exit
0001a0e0 g     F .text	00000074 alt_up_irda_read_data
0001ead0 g     O .rwdata	00000002 OSMemTblSize
000076b8 g     F .text	000000c4 _fwalk_reent
0001a3dc g     F .text	000000c4 alt_up_ps2_init
00008e6c g     F .text	00000198 __mdiff
0000d814 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006ce4 g     F .text	00000004 __sfp_lock_release
000113b8 g     F .text	00000054 OSInit
000180dc g     F .text	0000012c OSTaskQuery
00019bf0 g     F .text	00000074 alt_up_character_lcd_string
00015dcc g     F .text	000000ac OS_QInit
00012614 g     F .text	00000054 OS_StrLen
0001a274 g     F .text	00000040 alt_up_irda_open_dev
000148c0 g     F .text	00000118 OSMemNameSet
00000280 g     F .text	00000078 getChar
0001eaea g     O .rwdata	00000002 OSTaskProfileEn
00020af0 g     O .bss	00000004 OSTime
000264e0 g     O .bss	00000800 OSTaskIdleStk
0001c498 g     F .text	0000003c _exit
0001afdc g     F .text	00000140 alt_alarm_start
00013368 g     F .text	00000130 OSFlagNameGet
00018714 g     F .text	00000064 OSTimeGet
0000785c g     F .text	000001b8 __smakebuf_r
0001a5c8 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000c18 g     F .text	00000098 strlen
0001bd28 g     F .text	0000001c OSTaskSwHook
0001b7a8 g     F .text	00000158 open
00026ce0 g     O .bss	00000b40 OSEventTbl
0000ea6c g     F .text	000000e0 .hidden __gedf2
00027820 g     O .bss	00000510 OSTCBTbl
00016884 g     F .text	000000fc OSSemSet
0001ea7c g     O .rwdata	00000004 __wctomb
0000af44 g     F .text	00000018 __sprint_r
0001b374 g     F .text	00000030 alt_icache_flush_all
00019cb4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001eb18 g     O .rwdata	00000004 alt_priority_mask
00016028 g     F .text	00000268 OSSemDel
00020af4 g     O .bss	00000004 OSFlagFreeList
0001eab0 g     O .rwdata	00000002 OSEventNameSize
00004b90 g     F .text	00000024 __vfprintf_internal
00020af8 g     O .bss	00000001 OSStatRdy
00027d30 g     O .bss	00000054 OSTCBPrioTbl
0000cba8 g     F .text	0000005c _wctomb_r
00010840 g     F .text	000000c0 __env_lock
0001a804 g     F .text	0000008c alt_up_ps2_read_fd
0001eaf6 g     O .rwdata	00000002 OSTaskSwHookEn
0000f350 g     F .text	000008d0 .hidden __subdf3
0001a154 g     F .text	00000090 alt_up_irda_read_fd
00008894 g     F .text	000000b0 __lo0bits
0001eb1c g     O .rwdata	00000008 alt_alarm_list
0001eabe g     O .rwdata	00000002 OSFlagWidth
0001b22c g     F .text	0000005c _do_ctors
0001aa1c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000cab8 g     F .text	000000c0 wcrtomb
0000fed0 g     F .text	000000d0 close
00020aa4 g     O .bss	00000004 alt_envsem
00020afc g     O .bss	00000004 OSIdleCtrRun
00011a10 g     F .text	00000020 OSVersion
0001eb08 g     O .rwdata	00000002 OSTmrCfgWheelSize
00010224 g     F .text	00000080 alt_load
00018208 g     F .text	0000006c OS_TaskStkClr
0001eae2 g     O .rwdata	00000002 OSTaskCreateEn
00011fec g     F .text	00000064 OS_EventWaitListInit
0000c708 g     F .text	0000005c fputwc
0001bdb4 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00006ce8 g     F .text	00000004 __sinit_lock_acquire
00008608 g     F .text	00000120 __multadd
00017ec8 g     F .text	00000214 OSTaskSuspend
000085e0 g     F .text	00000028 _Bfree
00012668 g     F .text	0000005c OS_TaskIdle
0001eb0e g     O .rwdata	00000002 OSTmrTblSize
00015c70 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001140c0 	call	1140c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109f6104 	addi	r2,r2,32132
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109f6104 	addi	r2,r2,32132
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00114880 	call	11488 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82917 	ldw	r2,-24412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82917 	ldw	r2,-24412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d69a9a14 	ori	gp,gp,27240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10829d14 	ori	r2,r2,2676

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18dfa114 	ori	r3,r3,32388

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00102240 	call	10224 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00103c80 	call	103c8 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <getChar>:
#define UART_1 0x08200000
#define UART_0 0x08200008

char command[40] = "";

char getChar(volatile int *UART_ID) {
     280:	defffc04 	addi	sp,sp,-16
     284:	df000315 	stw	fp,12(sp)
     288:	df000304 	addi	fp,sp,12
     28c:	e13fff15 	stw	r4,-4(fp)
	int data;
	data = *(UART_ID); // read the RS232_UART data register
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	10800017 	ldw	r2,0(r2)
     298:	e0bffd15 	stw	r2,-12(fp)
	if (data & 0x00008000) { // check RVALID to see if there is new data
     29c:	e0bffd17 	ldw	r2,-12(fp)
     2a0:	10a0000c 	andi	r2,r2,32768
     2a4:	10000f26 	beq	r2,zero,2e4 <getChar+0x64>
		char character = data & 0xFF;
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	e0bffe05 	stb	r2,-8(fp)
		if (((character >= 'a') && (character <= 'z')) || (character == '/')) {
     2b0:	e0bffe07 	ldb	r2,-8(fp)
     2b4:	10801850 	cmplti	r2,r2,97
     2b8:	1000031e 	bne	r2,zero,2c8 <getChar+0x48>
     2bc:	e0bffe07 	ldb	r2,-8(fp)
     2c0:	10801ed0 	cmplti	r2,r2,123
     2c4:	1000031e 	bne	r2,zero,2d4 <getChar+0x54>
     2c8:	e0bffe07 	ldb	r2,-8(fp)
     2cc:	10800bd8 	cmpnei	r2,r2,47
     2d0:	1000021e 	bne	r2,zero,2dc <getChar+0x5c>
			return character;
     2d4:	e0bffe03 	ldbu	r2,-8(fp)
     2d8:	00000306 	br	2e8 <getChar+0x68>
		}
	} else {
		return '\0';
	}
	return '\0';
     2dc:	0005883a 	mov	r2,zero
     2e0:	00000106 	br	2e8 <getChar+0x68>
		char character = data & 0xFF;
		if (((character >= 'a') && (character <= 'z')) || (character == '/')) {
			return character;
		}
	} else {
		return '\0';
     2e4:	0005883a 	mov	r2,zero
	}
	return '\0';
}
     2e8:	e037883a 	mov	sp,fp
     2ec:	df000017 	ldw	fp,0(sp)
     2f0:	dec00104 	addi	sp,sp,4
     2f4:	f800283a 	ret

000002f8 <putChar>:

void putChar(volatile int *UART_ID, char c) {
     2f8:	defffc04 	addi	sp,sp,-16
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
     304:	e13ffe15 	stw	r4,-8(fp)
     308:	2805883a 	mov	r2,r5
     30c:	e0bfff05 	stb	r2,-4(fp)
	int control;
	control = *(UART_ID + 4); // read the RS232_UART control register
     310:	e0bffe17 	ldw	r2,-8(fp)
     314:	10800417 	ldw	r2,16(r2)
     318:	e0bffd15 	stw	r2,-12(fp)
	if (control & 0x00FF0000) { // if space, write character, else ignore
     31c:	e0bffd17 	ldw	r2,-12(fp)
     320:	10803fec 	andhi	r2,r2,255
     324:	10000326 	beq	r2,zero,334 <putChar+0x3c>
		*(UART_ID) = c;
     328:	e0ffff07 	ldb	r3,-4(fp)
     32c:	e0bffe17 	ldw	r2,-8(fp)
     330:	10c00015 	stw	r3,0(r2)
	}
}
     334:	e037883a 	mov	sp,fp
     338:	df000017 	ldw	fp,0(sp)
     33c:	dec00104 	addi	sp,sp,4
     340:	f800283a 	ret

00000344 <sendCommand>:

void sendCommand(volatile int *UART_ID, char string[]) {
     344:	defffa04 	addi	sp,sp,-24
     348:	dfc00515 	stw	ra,20(sp)
     34c:	df000415 	stw	fp,16(sp)
     350:	dc000315 	stw	r16,12(sp)
     354:	df000404 	addi	fp,sp,16
     358:	e13ffd15 	stw	r4,-12(fp)
     35c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++) {
     360:	e03ffc15 	stw	zero,-16(fp)
     364:	00000d06 	br	39c <sendCommand+0x58>
		putChar(UART_ID, string[i]);
     368:	e0bffc17 	ldw	r2,-16(fp)
     36c:	e0fffe17 	ldw	r3,-8(fp)
     370:	1885883a 	add	r2,r3,r2
     374:	10800003 	ldbu	r2,0(r2)
     378:	10803fcc 	andi	r2,r2,255
     37c:	1080201c 	xori	r2,r2,128
     380:	10bfe004 	addi	r2,r2,-128
     384:	e13ffd17 	ldw	r4,-12(fp)
     388:	100b883a 	mov	r5,r2
     38c:	00002f80 	call	2f8 <putChar>
	}
}

void sendCommand(volatile int *UART_ID, char string[]) {
	int i;
	for (i = 0; i < strlen(string); i++) {
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10800044 	addi	r2,r2,1
     398:	e0bffc15 	stw	r2,-16(fp)
     39c:	e43ffc17 	ldw	r16,-16(fp)
     3a0:	e13ffe17 	ldw	r4,-8(fp)
     3a4:	0000c180 	call	c18 <strlen>
     3a8:	80bfef36 	bltu	r16,r2,368 <__alt_mem_Flash_flash_data+0xf4000368>
		putChar(UART_ID, string[i]);
	}
}
     3ac:	e6ffff04 	addi	sp,fp,-4
     3b0:	dfc00217 	ldw	ra,8(sp)
     3b4:	df000117 	ldw	fp,4(sp)
     3b8:	dc000017 	ldw	r16,0(sp)
     3bc:	dec00304 	addi	sp,sp,12
     3c0:	f800283a 	ret

000003c4 <getCommand>:

void getCommand(volatile int *UART_ID) {
     3c4:	defffc04 	addi	sp,sp,-16
     3c8:	dfc00315 	stw	ra,12(sp)
     3cc:	df000215 	stw	fp,8(sp)
     3d0:	df000204 	addi	fp,sp,8
     3d4:	e13fff15 	stw	r4,-4(fp)
	memset(command, 0, strlen(command));
     3d8:	010000b4 	movhi	r4,2
     3dc:	2102c404 	addi	r4,r4,2832
     3e0:	0000c180 	call	c18 <strlen>
     3e4:	010000b4 	movhi	r4,2
     3e8:	2102c404 	addi	r4,r4,2832
     3ec:	000b883a 	mov	r5,zero
     3f0:	100d883a 	mov	r6,r2
     3f4:	00008680 	call	868 <memset>
	command[0] = '\0';
     3f8:	008000b4 	movhi	r2,2
     3fc:	1082c404 	addi	r2,r2,2832
     400:	10000005 	stb	zero,0(r2)
	INT8U finished = 0;
     404:	e03ffe05 	stb	zero,-8(fp)
	INT8U characterCount = 0;
     408:	e03ffe45 	stb	zero,-7(fp)
	char currentChar = '\0';
     40c:	e03ffe85 	stb	zero,-6(fp)

	while (!finished) {
     410:	00001c06 	br	484 <getCommand+0xc0>
		currentChar = getChar(UART_ID);
     414:	e13fff17 	ldw	r4,-4(fp)
     418:	00002800 	call	280 <getChar>
     41c:	e0bffe85 	stb	r2,-6(fp)
		if (currentChar != '\0') {
     420:	e0bffe87 	ldb	r2,-6(fp)
     424:	10001626 	beq	r2,zero,480 <getCommand+0xbc>
			if ((currentChar >= 'a') || (currentChar = '/')) {
     428:	e0bffe87 	ldb	r2,-6(fp)
     42c:	10801848 	cmpgei	r2,r2,97
     430:	1000021e 	bne	r2,zero,43c <getCommand+0x78>
     434:	00800bc4 	movi	r2,47
     438:	e0bffe85 	stb	r2,-6(fp)
				if (currentChar == '/') {
     43c:	e0bffe87 	ldb	r2,-6(fp)
     440:	10800bd8 	cmpnei	r2,r2,47
     444:	1000051e 	bne	r2,zero,45c <getCommand+0x98>
					if (characterCount > 0) {
     448:	e0bffe43 	ldbu	r2,-7(fp)
     44c:	10000c26 	beq	r2,zero,480 <getCommand+0xbc>
						finished = 1;
     450:	00800044 	movi	r2,1
     454:	e0bffe05 	stb	r2,-8(fp)
     458:	00000906 	br	480 <getCommand+0xbc>
					}
				} else {
					command[characterCount] = currentChar;
     45c:	e0fffe43 	ldbu	r3,-7(fp)
     460:	008000b4 	movhi	r2,2
     464:	1082c404 	addi	r2,r2,2832
     468:	10c5883a 	add	r2,r2,r3
     46c:	e0fffe83 	ldbu	r3,-6(fp)
     470:	10c00005 	stb	r3,0(r2)
					characterCount++;
     474:	e0bffe43 	ldbu	r2,-7(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bffe45 	stb	r2,-7(fp)
				}
			}
		}
		currentChar = '\0';
     480:	e03ffe85 	stb	zero,-6(fp)
	command[0] = '\0';
	INT8U finished = 0;
	INT8U characterCount = 0;
	char currentChar = '\0';

	while (!finished) {
     484:	e0bffe03 	ldbu	r2,-8(fp)
     488:	103fe226 	beq	r2,zero,414 <__alt_mem_Flash_flash_data+0xf4000414>
				}
			}
		}
		currentChar = '\0';
	}
	command[characterCount] = '\0';
     48c:	e0fffe43 	ldbu	r3,-7(fp)
     490:	008000b4 	movhi	r2,2
     494:	1082c404 	addi	r2,r2,2832
     498:	10c5883a 	add	r2,r2,r3
     49c:	10000005 	stb	zero,0(r2)
	command[0] = command[strlen(command) - 1];
     4a0:	010000b4 	movhi	r4,2
     4a4:	2102c404 	addi	r4,r4,2832
     4a8:	0000c180 	call	c18 <strlen>
     4ac:	10ffffc4 	addi	r3,r2,-1
     4b0:	008000b4 	movhi	r2,2
     4b4:	1082c404 	addi	r2,r2,2832
     4b8:	10c5883a 	add	r2,r2,r3
     4bc:	10c00003 	ldbu	r3,0(r2)
     4c0:	008000b4 	movhi	r2,2
     4c4:	1082c404 	addi	r2,r2,2832
     4c8:	10c00005 	stb	r3,0(r2)
	command[1] = '\0';
     4cc:	008000b4 	movhi	r2,2
     4d0:	1082c404 	addi	r2,r2,2832
     4d4:	10000045 	stb	zero,1(r2)
}
     4d8:	e037883a 	mov	sp,fp
     4dc:	dfc00117 	ldw	ra,4(sp)
     4e0:	df000017 	ldw	fp,0(sp)
     4e4:	dec00204 	addi	sp,sp,8
     4e8:	f800283a 	ret

000004ec <task1>:

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata) {
     4ec:	defff604 	addi	sp,sp,-40
     4f0:	dfc00915 	stw	ra,36(sp)
     4f4:	df000815 	stw	fp,32(sp)
     4f8:	df000804 	addi	fp,sp,32
     4fc:	e13fff15 	stw	r4,-4(fp)
	INT8U characterCount = 0;
     500:	e03ff805 	stb	zero,-32(fp)
	while (1) {
		OSTimeDlyHMSM(0, 0, 3, 0);
     504:	0009883a 	mov	r4,zero
     508:	000b883a 	mov	r5,zero
     50c:	018000c4 	movi	r6,3
     510:	000f883a 	mov	r7,zero
     514:	00183bc0 	call	183bc <OSTimeDlyHMSM>
		volatile int uartComponent = UART_0;
     518:	00820834 	movhi	r2,2080
     51c:	10800204 	addi	r2,r2,8
     520:	e0bff915 	stw	r2,-28(fp)
//    printf("Hello from task1\n");

		printf("Send\n");
     524:	010000b4 	movhi	r4,2
     528:	21313504 	addi	r4,r4,-15148
     52c:	0000a9c0 	call	a9c <puts>
		char string[20];
		sendCommand(uartComponent, "getPluggedLetter a/");
     530:	e0bff917 	ldw	r2,-28(fp)
     534:	1009883a 	mov	r4,r2
     538:	014000b4 	movhi	r5,2
     53c:	29713704 	addi	r5,r5,-15140
     540:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     544:	e0bff917 	ldw	r2,-28(fp)
     548:	1009883a 	mov	r4,r2
     54c:	00003c40 	call	3c4 <getCommand>
		printf("Na plugboard: %s\n", command);
     550:	010000b4 	movhi	r4,2
     554:	21313c04 	addi	r4,r4,-15120
     558:	014000b4 	movhi	r5,2
     55c:	2942c404 	addi	r5,r5,2832
     560:	00009b80 	call	9b8 <printf>

		sprintf(string, "getLetter 1%c/", command[0]);
     564:	008000b4 	movhi	r2,2
     568:	1082c404 	addi	r2,r2,2832
     56c:	10800003 	ldbu	r2,0(r2)
     570:	10803fcc 	andi	r2,r2,255
     574:	1080201c 	xori	r2,r2,128
     578:	10bfe004 	addi	r2,r2,-128
     57c:	e0fffa04 	addi	r3,fp,-24
     580:	1809883a 	mov	r4,r3
     584:	014000b4 	movhi	r5,2
     588:	29714104 	addi	r5,r5,-15100
     58c:	100d883a 	mov	r6,r2
     590:	0000b080 	call	b08 <sprintf>
		sendCommand(uartComponent, string);
     594:	e0bff917 	ldw	r2,-28(fp)
     598:	1007883a 	mov	r3,r2
     59c:	e0bffa04 	addi	r2,fp,-24
     5a0:	1809883a 	mov	r4,r3
     5a4:	100b883a 	mov	r5,r2
     5a8:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     5ac:	e0bff917 	ldw	r2,-28(fp)
     5b0:	1009883a 	mov	r4,r2
     5b4:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor een: %s\n", command);
     5b8:	010000b4 	movhi	r4,2
     5bc:	21314504 	addi	r4,r4,-15084
     5c0:	014000b4 	movhi	r5,2
     5c4:	2942c404 	addi	r5,r5,2832
     5c8:	00009b80 	call	9b8 <printf>

		sprintf(string, "getLetter 2%c/", command[0]);
     5cc:	008000b4 	movhi	r2,2
     5d0:	1082c404 	addi	r2,r2,2832
     5d4:	10800003 	ldbu	r2,0(r2)
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	1080201c 	xori	r2,r2,128
     5e0:	10bfe004 	addi	r2,r2,-128
     5e4:	e0fffa04 	addi	r3,fp,-24
     5e8:	1809883a 	mov	r4,r3
     5ec:	014000b4 	movhi	r5,2
     5f0:	29714a04 	addi	r5,r5,-15064
     5f4:	100d883a 	mov	r6,r2
     5f8:	0000b080 	call	b08 <sprintf>
		sendCommand(uartComponent, string);
     5fc:	e0bff917 	ldw	r2,-28(fp)
     600:	1007883a 	mov	r3,r2
     604:	e0bffa04 	addi	r2,fp,-24
     608:	1809883a 	mov	r4,r3
     60c:	100b883a 	mov	r5,r2
     610:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     614:	e0bff917 	ldw	r2,-28(fp)
     618:	1009883a 	mov	r4,r2
     61c:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor twee: %s\n", command);
     620:	010000b4 	movhi	r4,2
     624:	21314e04 	addi	r4,r4,-15048
     628:	014000b4 	movhi	r5,2
     62c:	2942c404 	addi	r5,r5,2832
     630:	00009b80 	call	9b8 <printf>

		sprintf(string, "getLetter 3%c/", command[0]);
     634:	008000b4 	movhi	r2,2
     638:	1082c404 	addi	r2,r2,2832
     63c:	10800003 	ldbu	r2,0(r2)
     640:	10803fcc 	andi	r2,r2,255
     644:	1080201c 	xori	r2,r2,128
     648:	10bfe004 	addi	r2,r2,-128
     64c:	e0fffa04 	addi	r3,fp,-24
     650:	1809883a 	mov	r4,r3
     654:	014000b4 	movhi	r5,2
     658:	29715304 	addi	r5,r5,-15028
     65c:	100d883a 	mov	r6,r2
     660:	0000b080 	call	b08 <sprintf>
		sendCommand(uartComponent, string);
     664:	e0bff917 	ldw	r2,-28(fp)
     668:	1007883a 	mov	r3,r2
     66c:	e0bffa04 	addi	r2,fp,-24
     670:	1809883a 	mov	r4,r3
     674:	100b883a 	mov	r5,r2
     678:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     67c:	e0bff917 	ldw	r2,-28(fp)
     680:	1009883a 	mov	r4,r2
     684:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor drie: %s\n", command);
     688:	010000b4 	movhi	r4,2
     68c:	21315704 	addi	r4,r4,-15012
     690:	014000b4 	movhi	r5,2
     694:	2942c404 	addi	r5,r5,2832
     698:	00009b80 	call	9b8 <printf>

		sprintf(string, "getLetter 4%c/", command[0]);
     69c:	008000b4 	movhi	r2,2
     6a0:	1082c404 	addi	r2,r2,2832
     6a4:	10800003 	ldbu	r2,0(r2)
     6a8:	10803fcc 	andi	r2,r2,255
     6ac:	1080201c 	xori	r2,r2,128
     6b0:	10bfe004 	addi	r2,r2,-128
     6b4:	e0fffa04 	addi	r3,fp,-24
     6b8:	1809883a 	mov	r4,r3
     6bc:	014000b4 	movhi	r5,2
     6c0:	29715c04 	addi	r5,r5,-14992
     6c4:	100d883a 	mov	r6,r2
     6c8:	0000b080 	call	b08 <sprintf>
		sendCommand(uartComponent, string);
     6cc:	e0bff917 	ldw	r2,-28(fp)
     6d0:	1007883a 	mov	r3,r2
     6d4:	e0bffa04 	addi	r2,fp,-24
     6d8:	1809883a 	mov	r4,r3
     6dc:	100b883a 	mov	r5,r2
     6e0:	00003440 	call	344 <sendCommand>
		getCommand(uartComponent);
     6e4:	e0bff917 	ldw	r2,-28(fp)
     6e8:	1009883a 	mov	r4,r2
     6ec:	00003c40 	call	3c4 <getCommand>
		printf("Na rotor vier: %s\n", command);
     6f0:	010000b4 	movhi	r4,2
     6f4:	21316004 	addi	r4,r4,-14976
     6f8:	014000b4 	movhi	r5,2
     6fc:	2942c404 	addi	r5,r5,2832
     700:	00009b80 	call	9b8 <printf>

		//printf("Commando: %s\n", command);
		if (strcmp(command, "hallo") == 0) {
     704:	010000b4 	movhi	r4,2
     708:	2102c404 	addi	r4,r4,2832
     70c:	014000b4 	movhi	r5,2
     710:	29716504 	addi	r5,r5,-14956
     714:	0000b740 	call	b74 <strcmp>
     718:	1000121e 	bne	r2,zero,764 <task1+0x278>
			sendCommand(uartComponent, "test/");
     71c:	e0bff917 	ldw	r2,-28(fp)
     720:	1009883a 	mov	r4,r2
     724:	014000b4 	movhi	r5,2
     728:	29716704 	addi	r5,r5,-14948
     72c:	00003440 	call	344 <sendCommand>

			memset(command, 0, strlen(command));
     730:	010000b4 	movhi	r4,2
     734:	2102c404 	addi	r4,r4,2832
     738:	0000c180 	call	c18 <strlen>
     73c:	010000b4 	movhi	r4,2
     740:	2102c404 	addi	r4,r4,2832
     744:	000b883a 	mov	r5,zero
     748:	100d883a 	mov	r6,r2
     74c:	00008680 	call	868 <memset>
			command[0] = '\0';
     750:	008000b4 	movhi	r2,2
     754:	1082c404 	addi	r2,r2,2832
     758:	10000005 	stb	zero,0(r2)
			characterCount = 0;
     75c:	e03ff805 	stb	zero,-32(fp)
     760:	00000a06 	br	78c <task1+0x2a0>
		} else if (strlen(command) == 1) {
     764:	010000b4 	movhi	r4,2
     768:	2102c404 	addi	r4,r4,2832
     76c:	0000c180 	call	c18 <strlen>
     770:	10800058 	cmpnei	r2,r2,1
     774:	1000051e 	bne	r2,zero,78c <task1+0x2a0>
			printf("Result Commando: %s\n", command);
     778:	010000b4 	movhi	r4,2
     77c:	21316904 	addi	r4,r4,-14940
     780:	014000b4 	movhi	r5,2
     784:	2942c404 	addi	r5,r5,2832
     788:	00009b80 	call	9b8 <printf>
		}

	}
     78c:	003f5d06 	br	504 <__alt_mem_Flash_flash_data+0xf4000504>

00000790 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata) {
     790:	defffd04 	addi	sp,sp,-12
     794:	dfc00215 	stw	ra,8(sp)
     798:	df000115 	stw	fp,4(sp)
     79c:	df000104 	addi	fp,sp,4
     7a0:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		//printf("Hello from task2\n");
		OSTimeDlyHMSM(0, 0, 3, 0);
     7a4:	0009883a 	mov	r4,zero
     7a8:	000b883a 	mov	r5,zero
     7ac:	018000c4 	movi	r6,3
     7b0:	000f883a 	mov	r7,zero
     7b4:	00183bc0 	call	183bc <OSTimeDlyHMSM>
	}
     7b8:	003ffa06 	br	7a4 <__alt_mem_Flash_flash_data+0xf40007a4>

000007bc <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void) {
     7bc:	defff904 	addi	sp,sp,-28
     7c0:	dfc00615 	stw	ra,24(sp)
     7c4:	df000515 	stw	fp,20(sp)
     7c8:	df000504 	addi	fp,sp,20

	OSTaskCreateExt(task1,
     7cc:	00800044 	movi	r2,1
     7d0:	d8800015 	stw	r2,0(sp)
     7d4:	008000b4 	movhi	r2,2
     7d8:	1082d804 	addi	r2,r2,2912
     7dc:	d8800115 	stw	r2,4(sp)
     7e0:	00820004 	movi	r2,2048
     7e4:	d8800215 	stw	r2,8(sp)
     7e8:	d8000315 	stw	zero,12(sp)
     7ec:	d8000415 	stw	zero,16(sp)
     7f0:	01000034 	movhi	r4,0
     7f4:	21013b04 	addi	r4,r4,1260
     7f8:	000b883a 	mov	r5,zero
     7fc:	018000b4 	movhi	r6,2
     800:	318ad704 	addi	r6,r6,11100
     804:	01c00044 	movi	r7,1
     808:	001707c0 	call	1707c <OSTaskCreateExt>
	TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSTaskCreateExt(task2,
     80c:	00800084 	movi	r2,2
     810:	d8800015 	stw	r2,0(sp)
     814:	008000b4 	movhi	r2,2
     818:	108ad804 	addi	r2,r2,11104
     81c:	d8800115 	stw	r2,4(sp)
     820:	00820004 	movi	r2,2048
     824:	d8800215 	stw	r2,8(sp)
     828:	d8000315 	stw	zero,12(sp)
     82c:	d8000415 	stw	zero,16(sp)
     830:	01000034 	movhi	r4,0
     834:	2101e404 	addi	r4,r4,1936
     838:	000b883a 	mov	r5,zero
     83c:	018000b4 	movhi	r6,2
     840:	3192d704 	addi	r6,r6,19292
     844:	01c00084 	movi	r7,2
     848:	001707c0 	call	1707c <OSTaskCreateExt>
	NULL, (void *) &task2_stk[TASK_STACKSIZE - 1],
	TASK2_PRIORITY,
	TASK2_PRIORITY, task2_stk,
	TASK_STACKSIZE,
	NULL, 0);
	OSStart();
     84c:	00116dc0 	call	116dc <OSStart>
	return 0;
     850:	0005883a 	mov	r2,zero
}
     854:	e037883a 	mov	sp,fp
     858:	dfc00117 	ldw	ra,4(sp)
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00204 	addi	sp,sp,8
     864:	f800283a 	ret

00000868 <memset>:
     868:	20c000cc 	andi	r3,r4,3
     86c:	2005883a 	mov	r2,r4
     870:	18004326 	beq	r3,zero,980 <memset+0x118>
     874:	31ffffc4 	addi	r7,r6,-1
     878:	30004026 	beq	r6,zero,97c <memset+0x114>
     87c:	2813883a 	mov	r9,r5
     880:	200d883a 	mov	r6,r4
     884:	2007883a 	mov	r3,r4
     888:	00000406 	br	89c <memset+0x34>
     88c:	3a3fffc4 	addi	r8,r7,-1
     890:	31800044 	addi	r6,r6,1
     894:	38003926 	beq	r7,zero,97c <memset+0x114>
     898:	400f883a 	mov	r7,r8
     89c:	18c00044 	addi	r3,r3,1
     8a0:	32400005 	stb	r9,0(r6)
     8a4:	1a0000cc 	andi	r8,r3,3
     8a8:	403ff81e 	bne	r8,zero,88c <__alt_mem_Flash_flash_data+0xf400088c>
     8ac:	010000c4 	movi	r4,3
     8b0:	21c02d2e 	bgeu	r4,r7,968 <memset+0x100>
     8b4:	29803fcc 	andi	r6,r5,255
     8b8:	3008923a 	slli	r4,r6,8
     8bc:	218cb03a 	or	r6,r4,r6
     8c0:	3008943a 	slli	r4,r6,16
     8c4:	218cb03a 	or	r6,r4,r6
     8c8:	010003c4 	movi	r4,15
     8cc:	21c0182e 	bgeu	r4,r7,930 <memset+0xc8>
     8d0:	3b3ffc04 	addi	r12,r7,-16
     8d4:	6018d13a 	srli	r12,r12,4
     8d8:	1a000104 	addi	r8,r3,4
     8dc:	1ac00204 	addi	r11,r3,8
     8e0:	6008913a 	slli	r4,r12,4
     8e4:	1a800304 	addi	r10,r3,12
     8e8:	1813883a 	mov	r9,r3
     8ec:	21000504 	addi	r4,r4,20
     8f0:	1909883a 	add	r4,r3,r4
     8f4:	49800015 	stw	r6,0(r9)
     8f8:	41800015 	stw	r6,0(r8)
     8fc:	59800015 	stw	r6,0(r11)
     900:	51800015 	stw	r6,0(r10)
     904:	42000404 	addi	r8,r8,16
     908:	4a400404 	addi	r9,r9,16
     90c:	5ac00404 	addi	r11,r11,16
     910:	52800404 	addi	r10,r10,16
     914:	413ff71e 	bne	r8,r4,8f4 <__alt_mem_Flash_flash_data+0xf40008f4>
     918:	63000044 	addi	r12,r12,1
     91c:	6018913a 	slli	r12,r12,4
     920:	39c003cc 	andi	r7,r7,15
     924:	010000c4 	movi	r4,3
     928:	1b07883a 	add	r3,r3,r12
     92c:	21c00e2e 	bgeu	r4,r7,968 <memset+0x100>
     930:	1813883a 	mov	r9,r3
     934:	3811883a 	mov	r8,r7
     938:	010000c4 	movi	r4,3
     93c:	49800015 	stw	r6,0(r9)
     940:	423fff04 	addi	r8,r8,-4
     944:	4a400104 	addi	r9,r9,4
     948:	223ffc36 	bltu	r4,r8,93c <__alt_mem_Flash_flash_data+0xf400093c>
     94c:	393fff04 	addi	r4,r7,-4
     950:	2008d0ba 	srli	r4,r4,2
     954:	39c000cc 	andi	r7,r7,3
     958:	21000044 	addi	r4,r4,1
     95c:	2109883a 	add	r4,r4,r4
     960:	2109883a 	add	r4,r4,r4
     964:	1907883a 	add	r3,r3,r4
     968:	38000426 	beq	r7,zero,97c <memset+0x114>
     96c:	19cf883a 	add	r7,r3,r7
     970:	19400005 	stb	r5,0(r3)
     974:	18c00044 	addi	r3,r3,1
     978:	19fffd1e 	bne	r3,r7,970 <__alt_mem_Flash_flash_data+0xf4000970>
     97c:	f800283a 	ret
     980:	2007883a 	mov	r3,r4
     984:	300f883a 	mov	r7,r6
     988:	003fc806 	br	8ac <__alt_mem_Flash_flash_data+0xf40008ac>

0000098c <_printf_r>:
     98c:	defffd04 	addi	sp,sp,-12
     990:	dfc00015 	stw	ra,0(sp)
     994:	d9800115 	stw	r6,4(sp)
     998:	d9c00215 	stw	r7,8(sp)
     99c:	280d883a 	mov	r6,r5
     9a0:	21400217 	ldw	r5,8(r4)
     9a4:	d9c00104 	addi	r7,sp,4
     9a8:	0002c400 	call	2c40 <___vfprintf_internal_r>
     9ac:	dfc00017 	ldw	ra,0(sp)
     9b0:	dec00304 	addi	sp,sp,12
     9b4:	f800283a 	ret

000009b8 <printf>:
     9b8:	defffc04 	addi	sp,sp,-16
     9bc:	dfc00015 	stw	ra,0(sp)
     9c0:	d9400115 	stw	r5,4(sp)
     9c4:	d9800215 	stw	r6,8(sp)
     9c8:	d9c00315 	stw	r7,12(sp)
     9cc:	008000b4 	movhi	r2,2
     9d0:	10ba9b04 	addi	r2,r2,-5524
     9d4:	10800017 	ldw	r2,0(r2)
     9d8:	200b883a 	mov	r5,r4
     9dc:	d9800104 	addi	r6,sp,4
     9e0:	11000217 	ldw	r4,8(r2)
     9e4:	0004b900 	call	4b90 <__vfprintf_internal>
     9e8:	dfc00017 	ldw	ra,0(sp)
     9ec:	dec00404 	addi	sp,sp,16
     9f0:	f800283a 	ret

000009f4 <_puts_r>:
     9f4:	defff604 	addi	sp,sp,-40
     9f8:	dc000715 	stw	r16,28(sp)
     9fc:	2021883a 	mov	r16,r4
     a00:	2809883a 	mov	r4,r5
     a04:	dc400815 	stw	r17,32(sp)
     a08:	dfc00915 	stw	ra,36(sp)
     a0c:	2823883a 	mov	r17,r5
     a10:	0000c180 	call	c18 <strlen>
     a14:	81400217 	ldw	r5,8(r16)
     a18:	11000044 	addi	r4,r2,1
     a1c:	d8800115 	stw	r2,4(sp)
     a20:	008000b4 	movhi	r2,2
     a24:	2980030b 	ldhu	r6,12(r5)
     a28:	10b16f04 	addi	r2,r2,-14916
     a2c:	d8800215 	stw	r2,8(sp)
     a30:	00800044 	movi	r2,1
     a34:	d8800315 	stw	r2,12(sp)
     a38:	00800084 	movi	r2,2
     a3c:	d8800515 	stw	r2,20(sp)
     a40:	dc400015 	stw	r17,0(sp)
     a44:	d9000615 	stw	r4,24(sp)
     a48:	dec00415 	stw	sp,16(sp)
     a4c:	3088000c 	andi	r2,r6,8192
     a50:	1000061e 	bne	r2,zero,a6c <_puts_r+0x78>
     a54:	29001917 	ldw	r4,100(r5)
     a58:	00b7ffc4 	movi	r2,-8193
     a5c:	31880014 	ori	r6,r6,8192
     a60:	2084703a 	and	r2,r4,r2
     a64:	2980030d 	sth	r6,12(r5)
     a68:	28801915 	stw	r2,100(r5)
     a6c:	8009883a 	mov	r4,r16
     a70:	d9800404 	addi	r6,sp,16
     a74:	00071340 	call	7134 <__sfvwrite_r>
     a78:	1000061e 	bne	r2,zero,a94 <_puts_r+0xa0>
     a7c:	00800284 	movi	r2,10
     a80:	dfc00917 	ldw	ra,36(sp)
     a84:	dc400817 	ldw	r17,32(sp)
     a88:	dc000717 	ldw	r16,28(sp)
     a8c:	dec00a04 	addi	sp,sp,40
     a90:	f800283a 	ret
     a94:	00bfffc4 	movi	r2,-1
     a98:	003ff906 	br	a80 <__alt_mem_Flash_flash_data+0xf4000a80>

00000a9c <puts>:
     a9c:	008000b4 	movhi	r2,2
     aa0:	10ba9b04 	addi	r2,r2,-5524
     aa4:	200b883a 	mov	r5,r4
     aa8:	11000017 	ldw	r4,0(r2)
     aac:	00009f41 	jmpi	9f4 <_puts_r>

00000ab0 <_sprintf_r>:
     ab0:	deffe404 	addi	sp,sp,-112
     ab4:	2807883a 	mov	r3,r5
     ab8:	dfc01a15 	stw	ra,104(sp)
     abc:	d9c01b15 	stw	r7,108(sp)
     ac0:	00a00034 	movhi	r2,32768
     ac4:	10bfffc4 	addi	r2,r2,-1
     ac8:	02008204 	movi	r8,520
     acc:	d8800215 	stw	r2,8(sp)
     ad0:	d8800515 	stw	r2,20(sp)
     ad4:	d80b883a 	mov	r5,sp
     ad8:	d9c01b04 	addi	r7,sp,108
     adc:	00bfffc4 	movi	r2,-1
     ae0:	d8c00015 	stw	r3,0(sp)
     ae4:	d8c00415 	stw	r3,16(sp)
     ae8:	da00030d 	sth	r8,12(sp)
     aec:	d880038d 	sth	r2,14(sp)
     af0:	0000cb00 	call	cb0 <___svfprintf_internal_r>
     af4:	d8c00017 	ldw	r3,0(sp)
     af8:	18000005 	stb	zero,0(r3)
     afc:	dfc01a17 	ldw	ra,104(sp)
     b00:	dec01c04 	addi	sp,sp,112
     b04:	f800283a 	ret

00000b08 <sprintf>:
     b08:	deffe304 	addi	sp,sp,-116
     b0c:	2007883a 	mov	r3,r4
     b10:	dfc01a15 	stw	ra,104(sp)
     b14:	d9801b15 	stw	r6,108(sp)
     b18:	d9c01c15 	stw	r7,112(sp)
     b1c:	010000b4 	movhi	r4,2
     b20:	213a9b04 	addi	r4,r4,-5524
     b24:	21000017 	ldw	r4,0(r4)
     b28:	00a00034 	movhi	r2,32768
     b2c:	10bfffc4 	addi	r2,r2,-1
     b30:	280d883a 	mov	r6,r5
     b34:	02008204 	movi	r8,520
     b38:	d8800215 	stw	r2,8(sp)
     b3c:	d8800515 	stw	r2,20(sp)
     b40:	d80b883a 	mov	r5,sp
     b44:	d9c01b04 	addi	r7,sp,108
     b48:	00bfffc4 	movi	r2,-1
     b4c:	d8c00015 	stw	r3,0(sp)
     b50:	d8c00415 	stw	r3,16(sp)
     b54:	da00030d 	sth	r8,12(sp)
     b58:	d880038d 	sth	r2,14(sp)
     b5c:	0000cb00 	call	cb0 <___svfprintf_internal_r>
     b60:	d8c00017 	ldw	r3,0(sp)
     b64:	18000005 	stb	zero,0(r3)
     b68:	dfc01a17 	ldw	ra,104(sp)
     b6c:	dec01d04 	addi	sp,sp,116
     b70:	f800283a 	ret

00000b74 <strcmp>:
     b74:	2144b03a 	or	r2,r4,r5
     b78:	108000cc 	andi	r2,r2,3
     b7c:	1000171e 	bne	r2,zero,bdc <strcmp+0x68>
     b80:	20800017 	ldw	r2,0(r4)
     b84:	28c00017 	ldw	r3,0(r5)
     b88:	10c0141e 	bne	r2,r3,bdc <strcmp+0x68>
     b8c:	027fbff4 	movhi	r9,65279
     b90:	4a7fbfc4 	addi	r9,r9,-257
     b94:	0086303a 	nor	r3,zero,r2
     b98:	02202074 	movhi	r8,32897
     b9c:	1245883a 	add	r2,r2,r9
     ba0:	42202004 	addi	r8,r8,-32640
     ba4:	10c4703a 	and	r2,r2,r3
     ba8:	1204703a 	and	r2,r2,r8
     bac:	10000226 	beq	r2,zero,bb8 <strcmp+0x44>
     bb0:	00001706 	br	c10 <strcmp+0x9c>
     bb4:	1000161e 	bne	r2,zero,c10 <strcmp+0x9c>
     bb8:	21000104 	addi	r4,r4,4
     bbc:	20c00017 	ldw	r3,0(r4)
     bc0:	29400104 	addi	r5,r5,4
     bc4:	29800017 	ldw	r6,0(r5)
     bc8:	1a4f883a 	add	r7,r3,r9
     bcc:	00c4303a 	nor	r2,zero,r3
     bd0:	3884703a 	and	r2,r7,r2
     bd4:	1204703a 	and	r2,r2,r8
     bd8:	19bff626 	beq	r3,r6,bb4 <__alt_mem_Flash_flash_data+0xf4000bb4>
     bdc:	20800007 	ldb	r2,0(r4)
     be0:	1000051e 	bne	r2,zero,bf8 <strcmp+0x84>
     be4:	00000606 	br	c00 <strcmp+0x8c>
     be8:	21000044 	addi	r4,r4,1
     bec:	20800007 	ldb	r2,0(r4)
     bf0:	29400044 	addi	r5,r5,1
     bf4:	10000226 	beq	r2,zero,c00 <strcmp+0x8c>
     bf8:	28c00007 	ldb	r3,0(r5)
     bfc:	10fffa26 	beq	r2,r3,be8 <__alt_mem_Flash_flash_data+0xf4000be8>
     c00:	20800003 	ldbu	r2,0(r4)
     c04:	28c00003 	ldbu	r3,0(r5)
     c08:	10c5c83a 	sub	r2,r2,r3
     c0c:	f800283a 	ret
     c10:	0005883a 	mov	r2,zero
     c14:	f800283a 	ret

00000c18 <strlen>:
     c18:	208000cc 	andi	r2,r4,3
     c1c:	10002026 	beq	r2,zero,ca0 <strlen+0x88>
     c20:	20800007 	ldb	r2,0(r4)
     c24:	10002026 	beq	r2,zero,ca8 <strlen+0x90>
     c28:	2005883a 	mov	r2,r4
     c2c:	00000206 	br	c38 <strlen+0x20>
     c30:	10c00007 	ldb	r3,0(r2)
     c34:	18001826 	beq	r3,zero,c98 <strlen+0x80>
     c38:	10800044 	addi	r2,r2,1
     c3c:	10c000cc 	andi	r3,r2,3
     c40:	183ffb1e 	bne	r3,zero,c30 <__alt_mem_Flash_flash_data+0xf4000c30>
     c44:	10c00017 	ldw	r3,0(r2)
     c48:	01ffbff4 	movhi	r7,65279
     c4c:	39ffbfc4 	addi	r7,r7,-257
     c50:	00ca303a 	nor	r5,zero,r3
     c54:	01a02074 	movhi	r6,32897
     c58:	19c7883a 	add	r3,r3,r7
     c5c:	31a02004 	addi	r6,r6,-32640
     c60:	1946703a 	and	r3,r3,r5
     c64:	1986703a 	and	r3,r3,r6
     c68:	1800091e 	bne	r3,zero,c90 <strlen+0x78>
     c6c:	10800104 	addi	r2,r2,4
     c70:	10c00017 	ldw	r3,0(r2)
     c74:	19cb883a 	add	r5,r3,r7
     c78:	00c6303a 	nor	r3,zero,r3
     c7c:	28c6703a 	and	r3,r5,r3
     c80:	1986703a 	and	r3,r3,r6
     c84:	183ff926 	beq	r3,zero,c6c <__alt_mem_Flash_flash_data+0xf4000c6c>
     c88:	00000106 	br	c90 <strlen+0x78>
     c8c:	10800044 	addi	r2,r2,1
     c90:	10c00007 	ldb	r3,0(r2)
     c94:	183ffd1e 	bne	r3,zero,c8c <__alt_mem_Flash_flash_data+0xf4000c8c>
     c98:	1105c83a 	sub	r2,r2,r4
     c9c:	f800283a 	ret
     ca0:	2005883a 	mov	r2,r4
     ca4:	003fe706 	br	c44 <__alt_mem_Flash_flash_data+0xf4000c44>
     ca8:	0005883a 	mov	r2,zero
     cac:	f800283a 	ret

00000cb0 <___svfprintf_internal_r>:
     cb0:	deffb504 	addi	sp,sp,-300
     cb4:	dfc04a15 	stw	ra,296(sp)
     cb8:	ddc04815 	stw	r23,288(sp)
     cbc:	d9002f15 	stw	r4,188(sp)
     cc0:	282f883a 	mov	r23,r5
     cc4:	d9802915 	stw	r6,164(sp)
     cc8:	d9c02d15 	stw	r7,180(sp)
     ccc:	df004915 	stw	fp,292(sp)
     cd0:	dd804715 	stw	r22,284(sp)
     cd4:	dd404615 	stw	r21,280(sp)
     cd8:	dd004515 	stw	r20,276(sp)
     cdc:	dcc04415 	stw	r19,272(sp)
     ce0:	dc804315 	stw	r18,268(sp)
     ce4:	dc404215 	stw	r17,264(sp)
     ce8:	dc004115 	stw	r16,260(sp)
     cec:	00078280 	call	7828 <_localeconv_r>
     cf0:	10800017 	ldw	r2,0(r2)
     cf4:	1009883a 	mov	r4,r2
     cf8:	d8803515 	stw	r2,212(sp)
     cfc:	0000c180 	call	c18 <strlen>
     d00:	d8803915 	stw	r2,228(sp)
     d04:	b880030b 	ldhu	r2,12(r23)
     d08:	1080200c 	andi	r2,r2,128
     d0c:	10000226 	beq	r2,zero,d18 <___svfprintf_internal_r+0x68>
     d10:	b8800417 	ldw	r2,16(r23)
     d14:	10065f26 	beq	r2,zero,2694 <___svfprintf_internal_r+0x19e4>
     d18:	db001dc4 	addi	r12,sp,119
     d1c:	dd801e04 	addi	r22,sp,120
     d20:	d8800404 	addi	r2,sp,16
     d24:	050000b4 	movhi	r20,2
     d28:	b317c83a 	sub	r11,r22,r12
     d2c:	a5318084 	addi	r20,r20,-14846
     d30:	db002815 	stw	r12,160(sp)
     d34:	d8801e15 	stw	r2,120(sp)
     d38:	d8002015 	stw	zero,128(sp)
     d3c:	d8001f15 	stw	zero,124(sp)
     d40:	d8003315 	stw	zero,204(sp)
     d44:	d8003715 	stw	zero,220(sp)
     d48:	d8003815 	stw	zero,224(sp)
     d4c:	1011883a 	mov	r8,r2
     d50:	d8003b15 	stw	zero,236(sp)
     d54:	d8003a15 	stw	zero,232(sp)
     d58:	d8003015 	stw	zero,192(sp)
     d5c:	dac03d15 	stw	r11,244(sp)
     d60:	db002917 	ldw	r12,164(sp)
     d64:	60800007 	ldb	r2,0(r12)
     d68:	1000ab26 	beq	r2,zero,1018 <___svfprintf_internal_r+0x368>
     d6c:	00c00944 	movi	r3,37
     d70:	10c0a926 	beq	r2,r3,1018 <___svfprintf_internal_r+0x368>
     d74:	6021883a 	mov	r16,r12
     d78:	00000106 	br	d80 <___svfprintf_internal_r+0xd0>
     d7c:	10c08426 	beq	r2,r3,f90 <___svfprintf_internal_r+0x2e0>
     d80:	84000044 	addi	r16,r16,1
     d84:	80800007 	ldb	r2,0(r16)
     d88:	103ffc1e 	bne	r2,zero,d7c <__alt_mem_Flash_flash_data+0xf4000d7c>
     d8c:	dac02917 	ldw	r11,164(sp)
     d90:	82e3c83a 	sub	r17,r16,r11
     d94:	88000f26 	beq	r17,zero,dd4 <___svfprintf_internal_r+0x124>
     d98:	d8c02017 	ldw	r3,128(sp)
     d9c:	d8801f17 	ldw	r2,124(sp)
     da0:	dac02917 	ldw	r11,164(sp)
     da4:	1c47883a 	add	r3,r3,r17
     da8:	10800044 	addi	r2,r2,1
     dac:	d8c02015 	stw	r3,128(sp)
     db0:	42c00015 	stw	r11,0(r8)
     db4:	44400115 	stw	r17,4(r8)
     db8:	d8801f15 	stw	r2,124(sp)
     dbc:	00c001c4 	movi	r3,7
     dc0:	18807616 	blt	r3,r2,f9c <___svfprintf_internal_r+0x2ec>
     dc4:	42000204 	addi	r8,r8,8
     dc8:	db003017 	ldw	r12,192(sp)
     dcc:	6459883a 	add	r12,r12,r17
     dd0:	db003015 	stw	r12,192(sp)
     dd4:	80800007 	ldb	r2,0(r16)
     dd8:	10007726 	beq	r2,zero,fb8 <___svfprintf_internal_r+0x308>
     ddc:	80800044 	addi	r2,r16,1
     de0:	84000047 	ldb	r16,1(r16)
     de4:	d8002785 	stb	zero,158(sp)
     de8:	000d883a 	mov	r6,zero
     dec:	027fffc4 	movi	r9,-1
     df0:	d8002e15 	stw	zero,184(sp)
     df4:	0023883a 	mov	r17,zero
     df8:	01001604 	movi	r4,88
     dfc:	01400244 	movi	r5,9
     e00:	02800a84 	movi	r10,42
     e04:	01c01b04 	movi	r7,108
     e08:	10c00044 	addi	r3,r2,1
     e0c:	80bff804 	addi	r2,r16,-32
     e10:	2082e636 	bltu	r4,r2,19ac <___svfprintf_internal_r+0xcfc>
     e14:	100490ba 	slli	r2,r2,2
     e18:	02c00034 	movhi	r11,0
     e1c:	5ac38b04 	addi	r11,r11,3628
     e20:	12c5883a 	add	r2,r2,r11
     e24:	10800017 	ldw	r2,0(r2)
     e28:	1000683a 	jmp	r2
     e2c:	0000178c 	andi	zero,zero,94
     e30:	000019ac 	andhi	zero,zero,102
     e34:	000019ac 	andhi	zero,zero,102
     e38:	000017ac 	andhi	zero,zero,94
     e3c:	000019ac 	andhi	zero,zero,102
     e40:	000019ac 	andhi	zero,zero,102
     e44:	000019ac 	andhi	zero,zero,102
     e48:	000019ac 	andhi	zero,zero,102
     e4c:	000019ac 	andhi	zero,zero,102
     e50:	000019ac 	andhi	zero,zero,102
     e54:	000017bc 	xorhi	zero,zero,94
     e58:	000017e8 	cmpgeui	zero,zero,95
     e5c:	000019ac 	andhi	zero,zero,102
     e60:	00001020 	cmpeqi	zero,zero,64
     e64:	00001030 	cmpltui	zero,zero,64
     e68:	000019ac 	andhi	zero,zero,102
     e6c:	00001070 	cmpltui	zero,zero,65
     e70:	00001650 	cmplti	zero,zero,89
     e74:	00001650 	cmplti	zero,zero,89
     e78:	00001650 	cmplti	zero,zero,89
     e7c:	00001650 	cmplti	zero,zero,89
     e80:	00001650 	cmplti	zero,zero,89
     e84:	00001650 	cmplti	zero,zero,89
     e88:	00001650 	cmplti	zero,zero,89
     e8c:	00001650 	cmplti	zero,zero,89
     e90:	00001650 	cmplti	zero,zero,89
     e94:	000019ac 	andhi	zero,zero,102
     e98:	000019ac 	andhi	zero,zero,102
     e9c:	000019ac 	andhi	zero,zero,102
     ea0:	000019ac 	andhi	zero,zero,102
     ea4:	000019ac 	andhi	zero,zero,102
     ea8:	000019ac 	andhi	zero,zero,102
     eac:	000019ac 	andhi	zero,zero,102
     eb0:	000019ac 	andhi	zero,zero,102
     eb4:	000019ac 	andhi	zero,zero,102
     eb8:	000019ac 	andhi	zero,zero,102
     ebc:	00001080 	call	108 <alt_irq_handler+0xc>
     ec0:	00001500 	call	150 <alt_irq_handler+0x54>
     ec4:	000019ac 	andhi	zero,zero,102
     ec8:	00001500 	call	150 <alt_irq_handler+0x54>
     ecc:	000019ac 	andhi	zero,zero,102
     ed0:	000019ac 	andhi	zero,zero,102
     ed4:	000019ac 	andhi	zero,zero,102
     ed8:	000019ac 	andhi	zero,zero,102
     edc:	000015a4 	muli	zero,zero,86
     ee0:	000019ac 	andhi	zero,zero,102
     ee4:	000019ac 	andhi	zero,zero,102
     ee8:	00001940 	call	194 <alt_irq_handler+0x98>
     eec:	000019ac 	andhi	zero,zero,102
     ef0:	000019ac 	andhi	zero,zero,102
     ef4:	000019ac 	andhi	zero,zero,102
     ef8:	000019ac 	andhi	zero,zero,102
     efc:	000019ac 	andhi	zero,zero,102
     f00:	000015b4 	movhi	zero,86
     f04:	000019ac 	andhi	zero,zero,102
     f08:	000019ac 	andhi	zero,zero,102
     f0c:	000015f4 	movhi	zero,87
     f10:	000019ac 	andhi	zero,zero,102
     f14:	000019ac 	andhi	zero,zero,102
     f18:	000019ac 	andhi	zero,zero,102
     f1c:	000019ac 	andhi	zero,zero,102
     f20:	000019ac 	andhi	zero,zero,102
     f24:	000019ac 	andhi	zero,zero,102
     f28:	000019ac 	andhi	zero,zero,102
     f2c:	000019ac 	andhi	zero,zero,102
     f30:	000019ac 	andhi	zero,zero,102
     f34:	000019ac 	andhi	zero,zero,102
     f38:	00001898 	cmpnei	zero,zero,98
     f3c:	000018d8 	cmpnei	zero,zero,99
     f40:	00001500 	call	150 <alt_irq_handler+0x54>
     f44:	00001500 	call	150 <alt_irq_handler+0x54>
     f48:	00001500 	call	150 <alt_irq_handler+0x54>
     f4c:	000017f8 	rdprs	zero,zero,95
     f50:	000018d8 	cmpnei	zero,zero,99
     f54:	000019ac 	andhi	zero,zero,102
     f58:	000019ac 	andhi	zero,zero,102
     f5c:	00001808 	cmpgei	zero,zero,96
     f60:	000019ac 	andhi	zero,zero,102
     f64:	0000181c 	xori	zero,zero,96
     f68:	00001970 	cmpltui	zero,zero,101
     f6c:	00001850 	cmplti	zero,zero,97
     f70:	00001684 	movi	zero,90
     f74:	000019ac 	andhi	zero,zero,102
     f78:	00001694 	movui	zero,90
     f7c:	000019ac 	andhi	zero,zero,102
     f80:	0000170c 	andi	zero,zero,92
     f84:	000019ac 	andhi	zero,zero,102
     f88:	000019ac 	andhi	zero,zero,102
     f8c:	0000174c 	andi	zero,zero,93
     f90:	db002917 	ldw	r12,164(sp)
     f94:	8323c83a 	sub	r17,r16,r12
     f98:	003f7e06 	br	d94 <__alt_mem_Flash_flash_data+0xf4000d94>
     f9c:	d9002f17 	ldw	r4,188(sp)
     fa0:	b80b883a 	mov	r5,r23
     fa4:	b00d883a 	mov	r6,r22
     fa8:	0009c440 	call	9c44 <__ssprint_r>
     fac:	1000081e 	bne	r2,zero,fd0 <___svfprintf_internal_r+0x320>
     fb0:	da000404 	addi	r8,sp,16
     fb4:	003f8406 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
     fb8:	d8802017 	ldw	r2,128(sp)
     fbc:	10000426 	beq	r2,zero,fd0 <___svfprintf_internal_r+0x320>
     fc0:	d9002f17 	ldw	r4,188(sp)
     fc4:	b80b883a 	mov	r5,r23
     fc8:	d9801e04 	addi	r6,sp,120
     fcc:	0009c440 	call	9c44 <__ssprint_r>
     fd0:	b880030b 	ldhu	r2,12(r23)
     fd4:	1080100c 	andi	r2,r2,64
     fd8:	10000d1e 	bne	r2,zero,1010 <___svfprintf_internal_r+0x360>
     fdc:	d8803017 	ldw	r2,192(sp)
     fe0:	dfc04a17 	ldw	ra,296(sp)
     fe4:	df004917 	ldw	fp,292(sp)
     fe8:	ddc04817 	ldw	r23,288(sp)
     fec:	dd804717 	ldw	r22,284(sp)
     ff0:	dd404617 	ldw	r21,280(sp)
     ff4:	dd004517 	ldw	r20,276(sp)
     ff8:	dcc04417 	ldw	r19,272(sp)
     ffc:	dc804317 	ldw	r18,268(sp)
    1000:	dc404217 	ldw	r17,264(sp)
    1004:	dc004117 	ldw	r16,260(sp)
    1008:	dec04b04 	addi	sp,sp,300
    100c:	f800283a 	ret
    1010:	00bfffc4 	movi	r2,-1
    1014:	003ff206 	br	fe0 <__alt_mem_Flash_flash_data+0xf4000fe0>
    1018:	dc002917 	ldw	r16,164(sp)
    101c:	003f6d06 	br	dd4 <__alt_mem_Flash_flash_data+0xf4000dd4>
    1020:	1805883a 	mov	r2,r3
    1024:	8c400114 	ori	r17,r17,4
    1028:	1c000007 	ldb	r16,0(r3)
    102c:	003f7606 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    1030:	1c000007 	ldb	r16,0(r3)
    1034:	18800044 	addi	r2,r3,1
    1038:	8286e726 	beq	r16,r10,2bd8 <___svfprintf_internal_r+0x1f28>
    103c:	82fff404 	addi	r11,r16,-48
    1040:	1007883a 	mov	r3,r2
    1044:	0013883a 	mov	r9,zero
    1048:	2aff7036 	bltu	r5,r11,e0c <__alt_mem_Flash_flash_data+0xf4000e0c>
    104c:	1c000007 	ldb	r16,0(r3)
    1050:	4a4002a4 	muli	r9,r9,10
    1054:	18c00044 	addi	r3,r3,1
    1058:	5a53883a 	add	r9,r11,r9
    105c:	82fff404 	addi	r11,r16,-48
    1060:	2afffa2e 	bgeu	r5,r11,104c <__alt_mem_Flash_flash_data+0xf400104c>
    1064:	483f690e 	bge	r9,zero,e0c <__alt_mem_Flash_flash_data+0xf4000e0c>
    1068:	027fffc4 	movi	r9,-1
    106c:	003f6706 	br	e0c <__alt_mem_Flash_flash_data+0xf4000e0c>
    1070:	8c402014 	ori	r17,r17,128
    1074:	1805883a 	mov	r2,r3
    1078:	1c000007 	ldb	r16,0(r3)
    107c:	003f6206 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    1080:	8c400414 	ori	r17,r17,16
    1084:	d8c02915 	stw	r3,164(sp)
    1088:	d9802785 	stb	r6,158(sp)
    108c:	8880080c 	andi	r2,r17,32
    1090:	d8c02d17 	ldw	r3,180(sp)
    1094:	10021526 	beq	r2,zero,18ec <___svfprintf_internal_r+0xc3c>
    1098:	db002d17 	ldw	r12,180(sp)
    109c:	18800117 	ldw	r2,4(r3)
    10a0:	1cc00017 	ldw	r19,0(r3)
    10a4:	63000204 	addi	r12,r12,8
    10a8:	db002d15 	stw	r12,180(sp)
    10ac:	1039883a 	mov	fp,r2
    10b0:	10021916 	blt	r2,zero,1918 <___svfprintf_internal_r+0xc68>
    10b4:	dd402783 	ldbu	r21,158(sp)
    10b8:	da403215 	stw	r9,200(sp)
    10bc:	00800044 	movi	r2,1
    10c0:	9f06b03a 	or	r3,r19,fp
    10c4:	48000216 	blt	r9,zero,10d0 <___svfprintf_internal_r+0x420>
    10c8:	013fdfc4 	movi	r4,-129
    10cc:	8922703a 	and	r17,r17,r4
    10d0:	1802461e 	bne	r3,zero,19ec <___svfprintf_internal_r+0xd3c>
    10d4:	48035426 	beq	r9,zero,1e28 <___svfprintf_internal_r+0x1178>
    10d8:	10803fcc 	andi	r2,r2,255
    10dc:	00c00044 	movi	r3,1
    10e0:	10c26726 	beq	r2,r3,1a80 <___svfprintf_internal_r+0xdd0>
    10e4:	00c00084 	movi	r3,2
    10e8:	10c2ea26 	beq	r2,r3,1c94 <___svfprintf_internal_r+0xfe4>
    10ec:	b007883a 	mov	r3,r22
    10f0:	9808d0fa 	srli	r4,r19,3
    10f4:	e00a977a 	slli	r5,fp,29
    10f8:	e038d0fa 	srli	fp,fp,3
    10fc:	9cc001cc 	andi	r19,r19,7
    1100:	98800c04 	addi	r2,r19,48
    1104:	18ffffc4 	addi	r3,r3,-1
    1108:	2926b03a 	or	r19,r5,r4
    110c:	18800005 	stb	r2,0(r3)
    1110:	9f08b03a 	or	r4,r19,fp
    1114:	203ff61e 	bne	r4,zero,10f0 <__alt_mem_Flash_flash_data+0xf40010f0>
    1118:	8900004c 	andi	r4,r17,1
    111c:	d8c03115 	stw	r3,196(sp)
    1120:	2002ea26 	beq	r4,zero,1ccc <___svfprintf_internal_r+0x101c>
    1124:	10803fcc 	andi	r2,r2,255
    1128:	1080201c 	xori	r2,r2,128
    112c:	10bfe004 	addi	r2,r2,-128
    1130:	01000c04 	movi	r4,48
    1134:	11057526 	beq	r2,r4,270c <___svfprintf_internal_r+0x1a5c>
    1138:	dac03117 	ldw	r11,196(sp)
    113c:	193fffc5 	stb	r4,-1(r3)
    1140:	5affffc4 	addi	r11,r11,-1
    1144:	dac03115 	stw	r11,196(sp)
    1148:	b2e5c83a 	sub	r18,r22,r11
    114c:	9005883a 	mov	r2,r18
    1150:	9240010e 	bge	r18,r9,1158 <___svfprintf_internal_r+0x4a8>
    1154:	4805883a 	mov	r2,r9
    1158:	d8802a15 	stw	r2,168(sp)
    115c:	d8003415 	stw	zero,208(sp)
    1160:	a8803fcc 	andi	r2,r21,255
    1164:	1080201c 	xori	r2,r2,128
    1168:	10bfe004 	addi	r2,r2,-128
    116c:	10000326 	beq	r2,zero,117c <___svfprintf_internal_r+0x4cc>
    1170:	d8c02a17 	ldw	r3,168(sp)
    1174:	18c00044 	addi	r3,r3,1
    1178:	d8c02a15 	stw	r3,168(sp)
    117c:	8ac0008c 	andi	r11,r17,2
    1180:	dac02b15 	stw	r11,172(sp)
    1184:	58000326 	beq	r11,zero,1194 <___svfprintf_internal_r+0x4e4>
    1188:	db002a17 	ldw	r12,168(sp)
    118c:	63000084 	addi	r12,r12,2
    1190:	db002a15 	stw	r12,168(sp)
    1194:	88c0210c 	andi	r3,r17,132
    1198:	d8c02c15 	stw	r3,176(sp)
    119c:	1802111e 	bne	r3,zero,19e4 <___svfprintf_internal_r+0xd34>
    11a0:	dac02e17 	ldw	r11,184(sp)
    11a4:	db002a17 	ldw	r12,168(sp)
    11a8:	5b39c83a 	sub	fp,r11,r12
    11ac:	07020d0e 	bge	zero,fp,19e4 <___svfprintf_internal_r+0xd34>
    11b0:	02400404 	movi	r9,16
    11b4:	d8c02017 	ldw	r3,128(sp)
    11b8:	d8801f17 	ldw	r2,124(sp)
    11bc:	4f058c0e 	bge	r9,fp,27f0 <___svfprintf_internal_r+0x1b40>
    11c0:	014000b4 	movhi	r5,2
    11c4:	e009883a 	mov	r4,fp
    11c8:	29718484 	addi	r5,r5,-14830
    11cc:	dc003c15 	stw	r16,240(sp)
    11d0:	9039883a 	mov	fp,r18
    11d4:	d9403615 	stw	r5,216(sp)
    11d8:	8825883a 	mov	r18,r17
    11dc:	482b883a 	mov	r21,r9
    11e0:	04c001c4 	movi	r19,7
    11e4:	dc002f17 	ldw	r16,188(sp)
    11e8:	2023883a 	mov	r17,r4
    11ec:	00000306 	br	11fc <___svfprintf_internal_r+0x54c>
    11f0:	8c7ffc04 	addi	r17,r17,-16
    11f4:	42000204 	addi	r8,r8,8
    11f8:	ac40130e 	bge	r21,r17,1248 <___svfprintf_internal_r+0x598>
    11fc:	02c000b4 	movhi	r11,2
    1200:	18c00404 	addi	r3,r3,16
    1204:	10800044 	addi	r2,r2,1
    1208:	5af18484 	addi	r11,r11,-14830
    120c:	42c00015 	stw	r11,0(r8)
    1210:	45400115 	stw	r21,4(r8)
    1214:	d8c02015 	stw	r3,128(sp)
    1218:	d8801f15 	stw	r2,124(sp)
    121c:	98bff40e 	bge	r19,r2,11f0 <__alt_mem_Flash_flash_data+0xf40011f0>
    1220:	8009883a 	mov	r4,r16
    1224:	b80b883a 	mov	r5,r23
    1228:	b00d883a 	mov	r6,r22
    122c:	0009c440 	call	9c44 <__ssprint_r>
    1230:	103f671e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1234:	8c7ffc04 	addi	r17,r17,-16
    1238:	d8c02017 	ldw	r3,128(sp)
    123c:	d8801f17 	ldw	r2,124(sp)
    1240:	da000404 	addi	r8,sp,16
    1244:	ac7fed16 	blt	r21,r17,11fc <__alt_mem_Flash_flash_data+0xf40011fc>
    1248:	dc003c17 	ldw	r16,240(sp)
    124c:	8809883a 	mov	r4,r17
    1250:	9023883a 	mov	r17,r18
    1254:	e025883a 	mov	r18,fp
    1258:	2039883a 	mov	fp,r4
    125c:	db003617 	ldw	r12,216(sp)
    1260:	e0c7883a 	add	r3,fp,r3
    1264:	10800044 	addi	r2,r2,1
    1268:	43000015 	stw	r12,0(r8)
    126c:	47000115 	stw	fp,4(r8)
    1270:	d8c02015 	stw	r3,128(sp)
    1274:	d8801f15 	stw	r2,124(sp)
    1278:	010001c4 	movi	r4,7
    127c:	20834416 	blt	r4,r2,1f90 <___svfprintf_internal_r+0x12e0>
    1280:	d8802787 	ldb	r2,158(sp)
    1284:	42000204 	addi	r8,r8,8
    1288:	10000c26 	beq	r2,zero,12bc <___svfprintf_internal_r+0x60c>
    128c:	d8801f17 	ldw	r2,124(sp)
    1290:	d9002784 	addi	r4,sp,158
    1294:	18c00044 	addi	r3,r3,1
    1298:	10800044 	addi	r2,r2,1
    129c:	41000015 	stw	r4,0(r8)
    12a0:	01000044 	movi	r4,1
    12a4:	41000115 	stw	r4,4(r8)
    12a8:	d8c02015 	stw	r3,128(sp)
    12ac:	d8801f15 	stw	r2,124(sp)
    12b0:	010001c4 	movi	r4,7
    12b4:	2082f616 	blt	r4,r2,1e90 <___svfprintf_internal_r+0x11e0>
    12b8:	42000204 	addi	r8,r8,8
    12bc:	dac02b17 	ldw	r11,172(sp)
    12c0:	58000c26 	beq	r11,zero,12f4 <___svfprintf_internal_r+0x644>
    12c4:	d8801f17 	ldw	r2,124(sp)
    12c8:	d9002704 	addi	r4,sp,156
    12cc:	18c00084 	addi	r3,r3,2
    12d0:	10800044 	addi	r2,r2,1
    12d4:	41000015 	stw	r4,0(r8)
    12d8:	01000084 	movi	r4,2
    12dc:	41000115 	stw	r4,4(r8)
    12e0:	d8c02015 	stw	r3,128(sp)
    12e4:	d8801f15 	stw	r2,124(sp)
    12e8:	010001c4 	movi	r4,7
    12ec:	2082e016 	blt	r4,r2,1e70 <___svfprintf_internal_r+0x11c0>
    12f0:	42000204 	addi	r8,r8,8
    12f4:	db002c17 	ldw	r12,176(sp)
    12f8:	00802004 	movi	r2,128
    12fc:	60822f26 	beq	r12,r2,1bbc <___svfprintf_internal_r+0xf0c>
    1300:	db003217 	ldw	r12,200(sp)
    1304:	64abc83a 	sub	r21,r12,r18
    1308:	0540310e 	bge	zero,r21,13d0 <___svfprintf_internal_r+0x720>
    130c:	07000404 	movi	fp,16
    1310:	d8801f17 	ldw	r2,124(sp)
    1314:	e544270e 	bge	fp,r21,23b4 <___svfprintf_internal_r+0x1704>
    1318:	014000b4 	movhi	r5,2
    131c:	a809883a 	mov	r4,r21
    1320:	29718084 	addi	r5,r5,-14846
    1324:	dc002c15 	stw	r16,176(sp)
    1328:	902b883a 	mov	r21,r18
    132c:	d9402b15 	stw	r5,172(sp)
    1330:	8825883a 	mov	r18,r17
    1334:	04c001c4 	movi	r19,7
    1338:	dc002f17 	ldw	r16,188(sp)
    133c:	2023883a 	mov	r17,r4
    1340:	00000306 	br	1350 <___svfprintf_internal_r+0x6a0>
    1344:	8c7ffc04 	addi	r17,r17,-16
    1348:	42000204 	addi	r8,r8,8
    134c:	e440110e 	bge	fp,r17,1394 <___svfprintf_internal_r+0x6e4>
    1350:	18c00404 	addi	r3,r3,16
    1354:	10800044 	addi	r2,r2,1
    1358:	45000015 	stw	r20,0(r8)
    135c:	47000115 	stw	fp,4(r8)
    1360:	d8c02015 	stw	r3,128(sp)
    1364:	d8801f15 	stw	r2,124(sp)
    1368:	98bff60e 	bge	r19,r2,1344 <__alt_mem_Flash_flash_data+0xf4001344>
    136c:	8009883a 	mov	r4,r16
    1370:	b80b883a 	mov	r5,r23
    1374:	b00d883a 	mov	r6,r22
    1378:	0009c440 	call	9c44 <__ssprint_r>
    137c:	103f141e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1380:	8c7ffc04 	addi	r17,r17,-16
    1384:	d8c02017 	ldw	r3,128(sp)
    1388:	d8801f17 	ldw	r2,124(sp)
    138c:	da000404 	addi	r8,sp,16
    1390:	e47fef16 	blt	fp,r17,1350 <__alt_mem_Flash_flash_data+0xf4001350>
    1394:	dc002c17 	ldw	r16,176(sp)
    1398:	8809883a 	mov	r4,r17
    139c:	9023883a 	mov	r17,r18
    13a0:	a825883a 	mov	r18,r21
    13a4:	202b883a 	mov	r21,r4
    13a8:	dac02b17 	ldw	r11,172(sp)
    13ac:	1d47883a 	add	r3,r3,r21
    13b0:	10800044 	addi	r2,r2,1
    13b4:	42c00015 	stw	r11,0(r8)
    13b8:	45400115 	stw	r21,4(r8)
    13bc:	d8c02015 	stw	r3,128(sp)
    13c0:	d8801f15 	stw	r2,124(sp)
    13c4:	010001c4 	movi	r4,7
    13c8:	2082a116 	blt	r4,r2,1e50 <___svfprintf_internal_r+0x11a0>
    13cc:	42000204 	addi	r8,r8,8
    13d0:	8880400c 	andi	r2,r17,256
    13d4:	1001b01e 	bne	r2,zero,1a98 <___svfprintf_internal_r+0xde8>
    13d8:	d8801f17 	ldw	r2,124(sp)
    13dc:	db003117 	ldw	r12,196(sp)
    13e0:	1c87883a 	add	r3,r3,r18
    13e4:	10800044 	addi	r2,r2,1
    13e8:	43000015 	stw	r12,0(r8)
    13ec:	44800115 	stw	r18,4(r8)
    13f0:	d8c02015 	stw	r3,128(sp)
    13f4:	d8801f15 	stw	r2,124(sp)
    13f8:	010001c4 	movi	r4,7
    13fc:	20828216 	blt	r4,r2,1e08 <___svfprintf_internal_r+0x1158>
    1400:	42000204 	addi	r8,r8,8
    1404:	8c40010c 	andi	r17,r17,4
    1408:	88003226 	beq	r17,zero,14d4 <___svfprintf_internal_r+0x824>
    140c:	db002e17 	ldw	r12,184(sp)
    1410:	dac02a17 	ldw	r11,168(sp)
    1414:	62e1c83a 	sub	r16,r12,r11
    1418:	04002e0e 	bge	zero,r16,14d4 <___svfprintf_internal_r+0x824>
    141c:	04400404 	movi	r17,16
    1420:	d8801f17 	ldw	r2,124(sp)
    1424:	8c05330e 	bge	r17,r16,28f4 <___svfprintf_internal_r+0x1c44>
    1428:	010000b4 	movhi	r4,2
    142c:	21318484 	addi	r4,r4,-14830
    1430:	d9003615 	stw	r4,216(sp)
    1434:	048001c4 	movi	r18,7
    1438:	dcc02f17 	ldw	r19,188(sp)
    143c:	00000306 	br	144c <___svfprintf_internal_r+0x79c>
    1440:	843ffc04 	addi	r16,r16,-16
    1444:	42000204 	addi	r8,r8,8
    1448:	8c00130e 	bge	r17,r16,1498 <___svfprintf_internal_r+0x7e8>
    144c:	014000b4 	movhi	r5,2
    1450:	18c00404 	addi	r3,r3,16
    1454:	10800044 	addi	r2,r2,1
    1458:	29718484 	addi	r5,r5,-14830
    145c:	41400015 	stw	r5,0(r8)
    1460:	44400115 	stw	r17,4(r8)
    1464:	d8c02015 	stw	r3,128(sp)
    1468:	d8801f15 	stw	r2,124(sp)
    146c:	90bff40e 	bge	r18,r2,1440 <__alt_mem_Flash_flash_data+0xf4001440>
    1470:	9809883a 	mov	r4,r19
    1474:	b80b883a 	mov	r5,r23
    1478:	b00d883a 	mov	r6,r22
    147c:	0009c440 	call	9c44 <__ssprint_r>
    1480:	103ed31e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1484:	843ffc04 	addi	r16,r16,-16
    1488:	d8c02017 	ldw	r3,128(sp)
    148c:	d8801f17 	ldw	r2,124(sp)
    1490:	da000404 	addi	r8,sp,16
    1494:	8c3fed16 	blt	r17,r16,144c <__alt_mem_Flash_flash_data+0xf400144c>
    1498:	dac03617 	ldw	r11,216(sp)
    149c:	1c07883a 	add	r3,r3,r16
    14a0:	10800044 	addi	r2,r2,1
    14a4:	42c00015 	stw	r11,0(r8)
    14a8:	44000115 	stw	r16,4(r8)
    14ac:	d8c02015 	stw	r3,128(sp)
    14b0:	d8801f15 	stw	r2,124(sp)
    14b4:	010001c4 	movi	r4,7
    14b8:	2080060e 	bge	r4,r2,14d4 <___svfprintf_internal_r+0x824>
    14bc:	d9002f17 	ldw	r4,188(sp)
    14c0:	b80b883a 	mov	r5,r23
    14c4:	b00d883a 	mov	r6,r22
    14c8:	0009c440 	call	9c44 <__ssprint_r>
    14cc:	103ec01e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    14d0:	d8c02017 	ldw	r3,128(sp)
    14d4:	d8802a17 	ldw	r2,168(sp)
    14d8:	db002e17 	ldw	r12,184(sp)
    14dc:	1300010e 	bge	r2,r12,14e4 <___svfprintf_internal_r+0x834>
    14e0:	6005883a 	mov	r2,r12
    14e4:	dac03017 	ldw	r11,192(sp)
    14e8:	5897883a 	add	r11,r11,r2
    14ec:	dac03015 	stw	r11,192(sp)
    14f0:	1802331e 	bne	r3,zero,1dc0 <___svfprintf_internal_r+0x1110>
    14f4:	d8001f15 	stw	zero,124(sp)
    14f8:	da000404 	addi	r8,sp,16
    14fc:	003e1806 	br	d60 <__alt_mem_Flash_flash_data+0xf4000d60>
    1500:	db002d17 	ldw	r12,180(sp)
    1504:	dac02d17 	ldw	r11,180(sp)
    1508:	d8c02915 	stw	r3,164(sp)
    150c:	63000017 	ldw	r12,0(r12)
    1510:	5ac00117 	ldw	r11,4(r11)
    1514:	d9802785 	stb	r6,158(sp)
    1518:	6009883a 	mov	r4,r12
    151c:	580b883a 	mov	r5,r11
    1520:	db003715 	stw	r12,220(sp)
    1524:	da004015 	stw	r8,256(sp)
    1528:	da403f15 	stw	r9,252(sp)
    152c:	dac03815 	stw	r11,224(sp)
    1530:	0009a400 	call	9a40 <__fpclassifyd>
    1534:	db002d17 	ldw	r12,180(sp)
    1538:	04800044 	movi	r18,1
    153c:	da004017 	ldw	r8,256(sp)
    1540:	64c00204 	addi	r19,r12,8
    1544:	da403f17 	ldw	r9,252(sp)
    1548:	d9003717 	ldw	r4,220(sp)
    154c:	d9403817 	ldw	r5,224(sp)
    1550:	1483561e 	bne	r2,r18,22ac <___svfprintf_internal_r+0x15fc>
    1554:	000d883a 	mov	r6,zero
    1558:	000f883a 	mov	r7,zero
    155c:	000eb4c0 	call	eb4c <__ledf2>
    1560:	da004017 	ldw	r8,256(sp)
    1564:	1004ee16 	blt	r2,zero,2920 <___svfprintf_internal_r+0x1c70>
    1568:	dd402783 	ldbu	r21,158(sp)
    156c:	008011c4 	movi	r2,71
    1570:	1404440e 	bge	r2,r16,2684 <___svfprintf_internal_r+0x19d4>
    1574:	00c000b4 	movhi	r3,2
    1578:	18f17104 	addi	r3,r3,-14908
    157c:	d8c03115 	stw	r3,196(sp)
    1580:	02c000c4 	movi	r11,3
    1584:	00bfdfc4 	movi	r2,-129
    1588:	dac02a15 	stw	r11,168(sp)
    158c:	88a2703a 	and	r17,r17,r2
    1590:	dcc02d15 	stw	r19,180(sp)
    1594:	5825883a 	mov	r18,r11
    1598:	d8003215 	stw	zero,200(sp)
    159c:	d8003415 	stw	zero,208(sp)
    15a0:	003eef06 	br	1160 <__alt_mem_Flash_flash_data+0xf4001160>
    15a4:	8c400214 	ori	r17,r17,8
    15a8:	1805883a 	mov	r2,r3
    15ac:	1c000007 	ldb	r16,0(r3)
    15b0:	003e1506 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    15b4:	8c400414 	ori	r17,r17,16
    15b8:	d8c02915 	stw	r3,164(sp)
    15bc:	88c0080c 	andi	r3,r17,32
    15c0:	d8802d17 	ldw	r2,180(sp)
    15c4:	18005526 	beq	r3,zero,171c <___svfprintf_internal_r+0xa6c>
    15c8:	dac02d17 	ldw	r11,180(sp)
    15cc:	14c00017 	ldw	r19,0(r2)
    15d0:	17000117 	ldw	fp,4(r2)
    15d4:	5ac00204 	addi	r11,r11,8
    15d8:	dac02d15 	stw	r11,180(sp)
    15dc:	00800044 	movi	r2,1
    15e0:	9f06b03a 	or	r3,r19,fp
    15e4:	d8002785 	stb	zero,158(sp)
    15e8:	da403215 	stw	r9,200(sp)
    15ec:	002b883a 	mov	r21,zero
    15f0:	003eb406 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    15f4:	030000b4 	movhi	r12,2
    15f8:	63317404 	addi	r12,r12,-14896
    15fc:	d8c02915 	stw	r3,164(sp)
    1600:	d9802785 	stb	r6,158(sp)
    1604:	db003b15 	stw	r12,236(sp)
    1608:	88c0080c 	andi	r3,r17,32
    160c:	d8802d17 	ldw	r2,180(sp)
    1610:	18005626 	beq	r3,zero,176c <___svfprintf_internal_r+0xabc>
    1614:	dac02d17 	ldw	r11,180(sp)
    1618:	14c00017 	ldw	r19,0(r2)
    161c:	17000117 	ldw	fp,4(r2)
    1620:	5ac00204 	addi	r11,r11,8
    1624:	dac02d15 	stw	r11,180(sp)
    1628:	8880004c 	andi	r2,r17,1
    162c:	10029326 	beq	r2,zero,207c <___svfprintf_internal_r+0x13cc>
    1630:	9f06b03a 	or	r3,r19,fp
    1634:	18033526 	beq	r3,zero,230c <___svfprintf_internal_r+0x165c>
    1638:	00800c04 	movi	r2,48
    163c:	d8802705 	stb	r2,156(sp)
    1640:	dc002745 	stb	r16,157(sp)
    1644:	8c400094 	ori	r17,r17,2
    1648:	00800084 	movi	r2,2
    164c:	003fe506 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    1650:	1805883a 	mov	r2,r3
    1654:	d8002e15 	stw	zero,184(sp)
    1658:	82fff404 	addi	r11,r16,-48
    165c:	0019883a 	mov	r12,zero
    1660:	14000007 	ldb	r16,0(r2)
    1664:	630002a4 	muli	r12,r12,10
    1668:	18c00044 	addi	r3,r3,1
    166c:	1805883a 	mov	r2,r3
    1670:	62d9883a 	add	r12,r12,r11
    1674:	82fff404 	addi	r11,r16,-48
    1678:	2afff92e 	bgeu	r5,r11,1660 <__alt_mem_Flash_flash_data+0xf4001660>
    167c:	db002e15 	stw	r12,184(sp)
    1680:	003de206 	br	e0c <__alt_mem_Flash_flash_data+0xf4000e0c>
    1684:	8c400814 	ori	r17,r17,32
    1688:	1805883a 	mov	r2,r3
    168c:	1c000007 	ldb	r16,0(r3)
    1690:	003ddd06 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    1694:	dac02d17 	ldw	r11,180(sp)
    1698:	db002d17 	ldw	r12,180(sp)
    169c:	d8c02915 	stw	r3,164(sp)
    16a0:	5ac00017 	ldw	r11,0(r11)
    16a4:	d8002785 	stb	zero,158(sp)
    16a8:	64c00104 	addi	r19,r12,4
    16ac:	dac03115 	stw	r11,196(sp)
    16b0:	58048126 	beq	r11,zero,28b8 <___svfprintf_internal_r+0x1c08>
    16b4:	d9003117 	ldw	r4,196(sp)
    16b8:	48041716 	blt	r9,zero,2718 <___svfprintf_internal_r+0x1a68>
    16bc:	480d883a 	mov	r6,r9
    16c0:	000b883a 	mov	r5,zero
    16c4:	da004015 	stw	r8,256(sp)
    16c8:	da403f15 	stw	r9,252(sp)
    16cc:	00081bc0 	call	81bc <memchr>
    16d0:	da004017 	ldw	r8,256(sp)
    16d4:	da403f17 	ldw	r9,252(sp)
    16d8:	1004db26 	beq	r2,zero,2a48 <___svfprintf_internal_r+0x1d98>
    16dc:	d8c03117 	ldw	r3,196(sp)
    16e0:	10e5c83a 	sub	r18,r2,r3
    16e4:	4c80010e 	bge	r9,r18,16ec <___svfprintf_internal_r+0xa3c>
    16e8:	4825883a 	mov	r18,r9
    16ec:	9005883a 	mov	r2,r18
    16f0:	90040e16 	blt	r18,zero,272c <___svfprintf_internal_r+0x1a7c>
    16f4:	dd402783 	ldbu	r21,158(sp)
    16f8:	d8802a15 	stw	r2,168(sp)
    16fc:	dcc02d15 	stw	r19,180(sp)
    1700:	d8003215 	stw	zero,200(sp)
    1704:	d8003415 	stw	zero,208(sp)
    1708:	003e9506 	br	1160 <__alt_mem_Flash_flash_data+0xf4001160>
    170c:	d8c02915 	stw	r3,164(sp)
    1710:	88c0080c 	andi	r3,r17,32
    1714:	d8802d17 	ldw	r2,180(sp)
    1718:	183fab1e 	bne	r3,zero,15c8 <__alt_mem_Flash_flash_data+0xf40015c8>
    171c:	88c0040c 	andi	r3,r17,16
    1720:	1802681e 	bne	r3,zero,20c4 <___svfprintf_internal_r+0x1414>
    1724:	88c0100c 	andi	r3,r17,64
    1728:	18026626 	beq	r3,zero,20c4 <___svfprintf_internal_r+0x1414>
    172c:	dac02d17 	ldw	r11,180(sp)
    1730:	14c0000b 	ldhu	r19,0(r2)
    1734:	0039883a 	mov	fp,zero
    1738:	5ac00104 	addi	r11,r11,4
    173c:	dac02d15 	stw	r11,180(sp)
    1740:	00800044 	movi	r2,1
    1744:	9807883a 	mov	r3,r19
    1748:	003fa606 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    174c:	008000b4 	movhi	r2,2
    1750:	10b17904 	addi	r2,r2,-14876
    1754:	d8c02915 	stw	r3,164(sp)
    1758:	d8803b15 	stw	r2,236(sp)
    175c:	d9802785 	stb	r6,158(sp)
    1760:	88c0080c 	andi	r3,r17,32
    1764:	d8802d17 	ldw	r2,180(sp)
    1768:	183faa1e 	bne	r3,zero,1614 <__alt_mem_Flash_flash_data+0xf4001614>
    176c:	88c0040c 	andi	r3,r17,16
    1770:	1802e826 	beq	r3,zero,2314 <___svfprintf_internal_r+0x1664>
    1774:	db002d17 	ldw	r12,180(sp)
    1778:	14c00017 	ldw	r19,0(r2)
    177c:	0039883a 	mov	fp,zero
    1780:	63000104 	addi	r12,r12,4
    1784:	db002d15 	stw	r12,180(sp)
    1788:	003fa706 	br	1628 <__alt_mem_Flash_flash_data+0xf4001628>
    178c:	30803fcc 	andi	r2,r6,255
    1790:	1080201c 	xori	r2,r2,128
    1794:	10bfe004 	addi	r2,r2,-128
    1798:	1002d91e 	bne	r2,zero,2300 <___svfprintf_internal_r+0x1650>
    179c:	1805883a 	mov	r2,r3
    17a0:	01800804 	movi	r6,32
    17a4:	1c000007 	ldb	r16,0(r3)
    17a8:	003d9706 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    17ac:	8c400054 	ori	r17,r17,1
    17b0:	1805883a 	mov	r2,r3
    17b4:	1c000007 	ldb	r16,0(r3)
    17b8:	003d9306 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    17bc:	dac02d17 	ldw	r11,180(sp)
    17c0:	db002d17 	ldw	r12,180(sp)
    17c4:	5ac00017 	ldw	r11,0(r11)
    17c8:	dac02e15 	stw	r11,184(sp)
    17cc:	62c00104 	addi	r11,r12,4
    17d0:	db002e17 	ldw	r12,184(sp)
    17d4:	60033e16 	blt	r12,zero,24d0 <___svfprintf_internal_r+0x1820>
    17d8:	dac02d15 	stw	r11,180(sp)
    17dc:	1805883a 	mov	r2,r3
    17e0:	1c000007 	ldb	r16,0(r3)
    17e4:	003d8806 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    17e8:	1805883a 	mov	r2,r3
    17ec:	01800ac4 	movi	r6,43
    17f0:	1c000007 	ldb	r16,0(r3)
    17f4:	003d8406 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    17f8:	8c401014 	ori	r17,r17,64
    17fc:	1805883a 	mov	r2,r3
    1800:	1c000007 	ldb	r16,0(r3)
    1804:	003d8006 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    1808:	1c000007 	ldb	r16,0(r3)
    180c:	81c33626 	beq	r16,r7,24e8 <___svfprintf_internal_r+0x1838>
    1810:	8c400414 	ori	r17,r17,16
    1814:	1805883a 	mov	r2,r3
    1818:	003d7b06 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    181c:	d8c02915 	stw	r3,164(sp)
    1820:	d9802785 	stb	r6,158(sp)
    1824:	8880080c 	andi	r2,r17,32
    1828:	1002c226 	beq	r2,zero,2334 <___svfprintf_internal_r+0x1684>
    182c:	db002d17 	ldw	r12,180(sp)
    1830:	dac03017 	ldw	r11,192(sp)
    1834:	60800017 	ldw	r2,0(r12)
    1838:	5807d7fa 	srai	r3,r11,31
    183c:	63000104 	addi	r12,r12,4
    1840:	db002d15 	stw	r12,180(sp)
    1844:	12c00015 	stw	r11,0(r2)
    1848:	10c00115 	stw	r3,4(r2)
    184c:	003d4406 	br	d60 <__alt_mem_Flash_flash_data+0xf4000d60>
    1850:	db002d17 	ldw	r12,180(sp)
    1854:	00800c04 	movi	r2,48
    1858:	d8802705 	stb	r2,156(sp)
    185c:	64c00017 	ldw	r19,0(r12)
    1860:	00801e04 	movi	r2,120
    1864:	d8802745 	stb	r2,157(sp)
    1868:	008000b4 	movhi	r2,2
    186c:	10b17904 	addi	r2,r2,-14876
    1870:	63000104 	addi	r12,r12,4
    1874:	d8c02915 	stw	r3,164(sp)
    1878:	d8803b15 	stw	r2,236(sp)
    187c:	0039883a 	mov	fp,zero
    1880:	8c400094 	ori	r17,r17,2
    1884:	db002d15 	stw	r12,180(sp)
    1888:	00800084 	movi	r2,2
    188c:	04001e04 	movi	r16,120
    1890:	9807883a 	mov	r3,r19
    1894:	003f5306 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    1898:	db002d17 	ldw	r12,180(sp)
    189c:	d8c02915 	stw	r3,164(sp)
    18a0:	dac01404 	addi	r11,sp,80
    18a4:	60800017 	ldw	r2,0(r12)
    18a8:	00c00044 	movi	r3,1
    18ac:	63000104 	addi	r12,r12,4
    18b0:	d8801405 	stb	r2,80(sp)
    18b4:	d8c02a15 	stw	r3,168(sp)
    18b8:	d8002785 	stb	zero,158(sp)
    18bc:	db002d15 	stw	r12,180(sp)
    18c0:	1825883a 	mov	r18,r3
    18c4:	d8003215 	stw	zero,200(sp)
    18c8:	d8003415 	stw	zero,208(sp)
    18cc:	dac03115 	stw	r11,196(sp)
    18d0:	0005883a 	mov	r2,zero
    18d4:	003e2906 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>
    18d8:	d8c02915 	stw	r3,164(sp)
    18dc:	d9802785 	stb	r6,158(sp)
    18e0:	8880080c 	andi	r2,r17,32
    18e4:	d8c02d17 	ldw	r3,180(sp)
    18e8:	103deb1e 	bne	r2,zero,1098 <__alt_mem_Flash_flash_data+0xf4001098>
    18ec:	8880040c 	andi	r2,r17,16
    18f0:	1001e51e 	bne	r2,zero,2088 <___svfprintf_internal_r+0x13d8>
    18f4:	8880100c 	andi	r2,r17,64
    18f8:	1001e326 	beq	r2,zero,2088 <___svfprintf_internal_r+0x13d8>
    18fc:	1cc0000f 	ldh	r19,0(r3)
    1900:	db002d17 	ldw	r12,180(sp)
    1904:	9839d7fa 	srai	fp,r19,31
    1908:	63000104 	addi	r12,r12,4
    190c:	db002d15 	stw	r12,180(sp)
    1910:	e005883a 	mov	r2,fp
    1914:	103de70e 	bge	r2,zero,10b4 <__alt_mem_Flash_flash_data+0xf40010b4>
    1918:	04e7c83a 	sub	r19,zero,r19
    191c:	9804c03a 	cmpne	r2,r19,zero
    1920:	0739c83a 	sub	fp,zero,fp
    1924:	e0b9c83a 	sub	fp,fp,r2
    1928:	05400b44 	movi	r21,45
    192c:	dd402785 	stb	r21,158(sp)
    1930:	da403215 	stw	r9,200(sp)
    1934:	00800044 	movi	r2,1
    1938:	9f06b03a 	or	r3,r19,fp
    193c:	003de106 	br	10c4 <__alt_mem_Flash_flash_data+0xf40010c4>
    1940:	8c400414 	ori	r17,r17,16
    1944:	d8c02915 	stw	r3,164(sp)
    1948:	8880080c 	andi	r2,r17,32
    194c:	10000b26 	beq	r2,zero,197c <___svfprintf_internal_r+0xccc>
    1950:	db002d17 	ldw	r12,180(sp)
    1954:	0005883a 	mov	r2,zero
    1958:	64c00017 	ldw	r19,0(r12)
    195c:	67000117 	ldw	fp,4(r12)
    1960:	63000204 	addi	r12,r12,8
    1964:	db002d15 	stw	r12,180(sp)
    1968:	9f06b03a 	or	r3,r19,fp
    196c:	003f1d06 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    1970:	d8c02915 	stw	r3,164(sp)
    1974:	8880080c 	andi	r2,r17,32
    1978:	103ff51e 	bne	r2,zero,1950 <__alt_mem_Flash_flash_data+0xf4001950>
    197c:	8880040c 	andi	r2,r17,16
    1980:	1001c81e 	bne	r2,zero,20a4 <___svfprintf_internal_r+0x13f4>
    1984:	8880100c 	andi	r2,r17,64
    1988:	1001c626 	beq	r2,zero,20a4 <___svfprintf_internal_r+0x13f4>
    198c:	db002d17 	ldw	r12,180(sp)
    1990:	0039883a 	mov	fp,zero
    1994:	0005883a 	mov	r2,zero
    1998:	64c0000b 	ldhu	r19,0(r12)
    199c:	63000104 	addi	r12,r12,4
    19a0:	db002d15 	stw	r12,180(sp)
    19a4:	9807883a 	mov	r3,r19
    19a8:	003f0e06 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    19ac:	d8c02915 	stw	r3,164(sp)
    19b0:	d9802785 	stb	r6,158(sp)
    19b4:	803d8026 	beq	r16,zero,fb8 <__alt_mem_Flash_flash_data+0xf4000fb8>
    19b8:	02c00044 	movi	r11,1
    19bc:	db001404 	addi	r12,sp,80
    19c0:	dac02a15 	stw	r11,168(sp)
    19c4:	dc001405 	stb	r16,80(sp)
    19c8:	d8002785 	stb	zero,158(sp)
    19cc:	5825883a 	mov	r18,r11
    19d0:	d8003215 	stw	zero,200(sp)
    19d4:	d8003415 	stw	zero,208(sp)
    19d8:	db003115 	stw	r12,196(sp)
    19dc:	0005883a 	mov	r2,zero
    19e0:	003de606 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>
    19e4:	d8c02017 	ldw	r3,128(sp)
    19e8:	003e2706 	br	1288 <__alt_mem_Flash_flash_data+0xf4001288>
    19ec:	10803fcc 	andi	r2,r2,255
    19f0:	00c00044 	movi	r3,1
    19f4:	10fdbb1e 	bne	r2,r3,10e4 <__alt_mem_Flash_flash_data+0xf40010e4>
    19f8:	e000021e 	bne	fp,zero,1a04 <___svfprintf_internal_r+0xd54>
    19fc:	00800244 	movi	r2,9
    1a00:	14c01f2e 	bgeu	r2,r19,1a80 <___svfprintf_internal_r+0xdd0>
    1a04:	dc002a15 	stw	r16,168(sp)
    1a08:	dc402b15 	stw	r17,172(sp)
    1a0c:	9821883a 	mov	r16,r19
    1a10:	e023883a 	mov	r17,fp
    1a14:	b025883a 	mov	r18,r22
    1a18:	4827883a 	mov	r19,r9
    1a1c:	4039883a 	mov	fp,r8
    1a20:	8009883a 	mov	r4,r16
    1a24:	880b883a 	mov	r5,r17
    1a28:	01800284 	movi	r6,10
    1a2c:	000f883a 	mov	r7,zero
    1a30:	000d1c40 	call	d1c4 <__umoddi3>
    1a34:	10800c04 	addi	r2,r2,48
    1a38:	94bfffc4 	addi	r18,r18,-1
    1a3c:	8009883a 	mov	r4,r16
    1a40:	880b883a 	mov	r5,r17
    1a44:	01800284 	movi	r6,10
    1a48:	000f883a 	mov	r7,zero
    1a4c:	90800005 	stb	r2,0(r18)
    1a50:	000cc040 	call	cc04 <__udivdi3>
    1a54:	1021883a 	mov	r16,r2
    1a58:	10c4b03a 	or	r2,r2,r3
    1a5c:	1823883a 	mov	r17,r3
    1a60:	103fef1e 	bne	r2,zero,1a20 <__alt_mem_Flash_flash_data+0xf4001a20>
    1a64:	dc803115 	stw	r18,196(sp)
    1a68:	dc002a17 	ldw	r16,168(sp)
    1a6c:	dc402b17 	ldw	r17,172(sp)
    1a70:	9813883a 	mov	r9,r19
    1a74:	e011883a 	mov	r8,fp
    1a78:	b4a5c83a 	sub	r18,r22,r18
    1a7c:	003db306 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    1a80:	9cc00c04 	addi	r19,r19,48
    1a84:	db001dc4 	addi	r12,sp,119
    1a88:	dcc01dc5 	stb	r19,119(sp)
    1a8c:	dc803d17 	ldw	r18,244(sp)
    1a90:	db003115 	stw	r12,196(sp)
    1a94:	003dad06 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    1a98:	00801944 	movi	r2,101
    1a9c:	14008d0e 	bge	r2,r16,1cd4 <___svfprintf_internal_r+0x1024>
    1aa0:	d9003717 	ldw	r4,220(sp)
    1aa4:	d9403817 	ldw	r5,224(sp)
    1aa8:	000d883a 	mov	r6,zero
    1aac:	000f883a 	mov	r7,zero
    1ab0:	d8c03e15 	stw	r3,248(sp)
    1ab4:	da004015 	stw	r8,256(sp)
    1ab8:	000e9e80 	call	e9e8 <__eqdf2>
    1abc:	d8c03e17 	ldw	r3,248(sp)
    1ac0:	da004017 	ldw	r8,256(sp)
    1ac4:	1000fd1e 	bne	r2,zero,1ebc <___svfprintf_internal_r+0x120c>
    1ac8:	d8801f17 	ldw	r2,124(sp)
    1acc:	010000b4 	movhi	r4,2
    1ad0:	21318004 	addi	r4,r4,-14848
    1ad4:	18c00044 	addi	r3,r3,1
    1ad8:	10800044 	addi	r2,r2,1
    1adc:	41000015 	stw	r4,0(r8)
    1ae0:	01000044 	movi	r4,1
    1ae4:	41000115 	stw	r4,4(r8)
    1ae8:	d8c02015 	stw	r3,128(sp)
    1aec:	d8801f15 	stw	r2,124(sp)
    1af0:	010001c4 	movi	r4,7
    1af4:	20823316 	blt	r4,r2,23c4 <___svfprintf_internal_r+0x1714>
    1af8:	42000204 	addi	r8,r8,8
    1afc:	d8802617 	ldw	r2,152(sp)
    1b00:	dac03317 	ldw	r11,204(sp)
    1b04:	12c00216 	blt	r2,r11,1b10 <___svfprintf_internal_r+0xe60>
    1b08:	8880004c 	andi	r2,r17,1
    1b0c:	103e3d26 	beq	r2,zero,1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1b10:	db003917 	ldw	r12,228(sp)
    1b14:	d8801f17 	ldw	r2,124(sp)
    1b18:	dac03517 	ldw	r11,212(sp)
    1b1c:	1b07883a 	add	r3,r3,r12
    1b20:	10800044 	addi	r2,r2,1
    1b24:	42c00015 	stw	r11,0(r8)
    1b28:	43000115 	stw	r12,4(r8)
    1b2c:	d8c02015 	stw	r3,128(sp)
    1b30:	d8801f15 	stw	r2,124(sp)
    1b34:	010001c4 	movi	r4,7
    1b38:	20826f16 	blt	r4,r2,24f8 <___svfprintf_internal_r+0x1848>
    1b3c:	42000204 	addi	r8,r8,8
    1b40:	db003317 	ldw	r12,204(sp)
    1b44:	643fffc4 	addi	r16,r12,-1
    1b48:	043e2e0e 	bge	zero,r16,1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1b4c:	04800404 	movi	r18,16
    1b50:	d8801f17 	ldw	r2,124(sp)
    1b54:	9400a00e 	bge	r18,r16,1dd8 <___svfprintf_internal_r+0x1128>
    1b58:	014000b4 	movhi	r5,2
    1b5c:	29718084 	addi	r5,r5,-14846
    1b60:	d9402b15 	stw	r5,172(sp)
    1b64:	054001c4 	movi	r21,7
    1b68:	dcc02f17 	ldw	r19,188(sp)
    1b6c:	00000306 	br	1b7c <___svfprintf_internal_r+0xecc>
    1b70:	42000204 	addi	r8,r8,8
    1b74:	843ffc04 	addi	r16,r16,-16
    1b78:	94009a0e 	bge	r18,r16,1de4 <___svfprintf_internal_r+0x1134>
    1b7c:	18c00404 	addi	r3,r3,16
    1b80:	10800044 	addi	r2,r2,1
    1b84:	45000015 	stw	r20,0(r8)
    1b88:	44800115 	stw	r18,4(r8)
    1b8c:	d8c02015 	stw	r3,128(sp)
    1b90:	d8801f15 	stw	r2,124(sp)
    1b94:	a8bff60e 	bge	r21,r2,1b70 <__alt_mem_Flash_flash_data+0xf4001b70>
    1b98:	9809883a 	mov	r4,r19
    1b9c:	b80b883a 	mov	r5,r23
    1ba0:	b00d883a 	mov	r6,r22
    1ba4:	0009c440 	call	9c44 <__ssprint_r>
    1ba8:	103d091e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1bac:	d8c02017 	ldw	r3,128(sp)
    1bb0:	d8801f17 	ldw	r2,124(sp)
    1bb4:	da000404 	addi	r8,sp,16
    1bb8:	003fee06 	br	1b74 <__alt_mem_Flash_flash_data+0xf4001b74>
    1bbc:	dac02e17 	ldw	r11,184(sp)
    1bc0:	db002a17 	ldw	r12,168(sp)
    1bc4:	5b2bc83a 	sub	r21,r11,r12
    1bc8:	057dcd0e 	bge	zero,r21,1300 <__alt_mem_Flash_flash_data+0xf4001300>
    1bcc:	07000404 	movi	fp,16
    1bd0:	d8801f17 	ldw	r2,124(sp)
    1bd4:	e5435d0e 	bge	fp,r21,294c <___svfprintf_internal_r+0x1c9c>
    1bd8:	014000b4 	movhi	r5,2
    1bdc:	a809883a 	mov	r4,r21
    1be0:	29718084 	addi	r5,r5,-14846
    1be4:	dc002c15 	stw	r16,176(sp)
    1be8:	902b883a 	mov	r21,r18
    1bec:	d9402b15 	stw	r5,172(sp)
    1bf0:	8825883a 	mov	r18,r17
    1bf4:	04c001c4 	movi	r19,7
    1bf8:	dc002f17 	ldw	r16,188(sp)
    1bfc:	2023883a 	mov	r17,r4
    1c00:	00000306 	br	1c10 <___svfprintf_internal_r+0xf60>
    1c04:	8c7ffc04 	addi	r17,r17,-16
    1c08:	42000204 	addi	r8,r8,8
    1c0c:	e440110e 	bge	fp,r17,1c54 <___svfprintf_internal_r+0xfa4>
    1c10:	18c00404 	addi	r3,r3,16
    1c14:	10800044 	addi	r2,r2,1
    1c18:	45000015 	stw	r20,0(r8)
    1c1c:	47000115 	stw	fp,4(r8)
    1c20:	d8c02015 	stw	r3,128(sp)
    1c24:	d8801f15 	stw	r2,124(sp)
    1c28:	98bff60e 	bge	r19,r2,1c04 <__alt_mem_Flash_flash_data+0xf4001c04>
    1c2c:	8009883a 	mov	r4,r16
    1c30:	b80b883a 	mov	r5,r23
    1c34:	b00d883a 	mov	r6,r22
    1c38:	0009c440 	call	9c44 <__ssprint_r>
    1c3c:	103ce41e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1c40:	8c7ffc04 	addi	r17,r17,-16
    1c44:	d8c02017 	ldw	r3,128(sp)
    1c48:	d8801f17 	ldw	r2,124(sp)
    1c4c:	da000404 	addi	r8,sp,16
    1c50:	e47fef16 	blt	fp,r17,1c10 <__alt_mem_Flash_flash_data+0xf4001c10>
    1c54:	dc002c17 	ldw	r16,176(sp)
    1c58:	8809883a 	mov	r4,r17
    1c5c:	9023883a 	mov	r17,r18
    1c60:	a825883a 	mov	r18,r21
    1c64:	202b883a 	mov	r21,r4
    1c68:	dac02b17 	ldw	r11,172(sp)
    1c6c:	1d47883a 	add	r3,r3,r21
    1c70:	10800044 	addi	r2,r2,1
    1c74:	42c00015 	stw	r11,0(r8)
    1c78:	45400115 	stw	r21,4(r8)
    1c7c:	d8c02015 	stw	r3,128(sp)
    1c80:	d8801f15 	stw	r2,124(sp)
    1c84:	010001c4 	movi	r4,7
    1c88:	20818016 	blt	r4,r2,228c <___svfprintf_internal_r+0x15dc>
    1c8c:	42000204 	addi	r8,r8,8
    1c90:	003d9b06 	br	1300 <__alt_mem_Flash_flash_data+0xf4001300>
    1c94:	d9403b17 	ldw	r5,236(sp)
    1c98:	b007883a 	mov	r3,r22
    1c9c:	988003cc 	andi	r2,r19,15
    1ca0:	e008973a 	slli	r4,fp,28
    1ca4:	2885883a 	add	r2,r5,r2
    1ca8:	9826d13a 	srli	r19,r19,4
    1cac:	10800003 	ldbu	r2,0(r2)
    1cb0:	e038d13a 	srli	fp,fp,4
    1cb4:	18ffffc4 	addi	r3,r3,-1
    1cb8:	24e6b03a 	or	r19,r4,r19
    1cbc:	18800005 	stb	r2,0(r3)
    1cc0:	9f04b03a 	or	r2,r19,fp
    1cc4:	103ff51e 	bne	r2,zero,1c9c <__alt_mem_Flash_flash_data+0xf4001c9c>
    1cc8:	d8c03115 	stw	r3,196(sp)
    1ccc:	b0e5c83a 	sub	r18,r22,r3
    1cd0:	003d1e06 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    1cd4:	db003317 	ldw	r12,204(sp)
    1cd8:	00800044 	movi	r2,1
    1cdc:	18c00044 	addi	r3,r3,1
    1ce0:	13014b0e 	bge	r2,r12,2210 <___svfprintf_internal_r+0x1560>
    1ce4:	dc001f17 	ldw	r16,124(sp)
    1ce8:	dac03117 	ldw	r11,196(sp)
    1cec:	00800044 	movi	r2,1
    1cf0:	84000044 	addi	r16,r16,1
    1cf4:	40800115 	stw	r2,4(r8)
    1cf8:	42c00015 	stw	r11,0(r8)
    1cfc:	d8c02015 	stw	r3,128(sp)
    1d00:	dc001f15 	stw	r16,124(sp)
    1d04:	008001c4 	movi	r2,7
    1d08:	14014e16 	blt	r2,r16,2244 <___svfprintf_internal_r+0x1594>
    1d0c:	42000204 	addi	r8,r8,8
    1d10:	db003917 	ldw	r12,228(sp)
    1d14:	dac03517 	ldw	r11,212(sp)
    1d18:	84000044 	addi	r16,r16,1
    1d1c:	1b07883a 	add	r3,r3,r12
    1d20:	42c00015 	stw	r11,0(r8)
    1d24:	43000115 	stw	r12,4(r8)
    1d28:	d8c02015 	stw	r3,128(sp)
    1d2c:	dc001f15 	stw	r16,124(sp)
    1d30:	008001c4 	movi	r2,7
    1d34:	14014c16 	blt	r2,r16,2268 <___svfprintf_internal_r+0x15b8>
    1d38:	44800204 	addi	r18,r8,8
    1d3c:	d9003717 	ldw	r4,220(sp)
    1d40:	d9403817 	ldw	r5,224(sp)
    1d44:	000d883a 	mov	r6,zero
    1d48:	000f883a 	mov	r7,zero
    1d4c:	d8c03e15 	stw	r3,248(sp)
    1d50:	000e9e80 	call	e9e8 <__eqdf2>
    1d54:	d8c03e17 	ldw	r3,248(sp)
    1d58:	db003317 	ldw	r12,204(sp)
    1d5c:	10009526 	beq	r2,zero,1fb4 <___svfprintf_internal_r+0x1304>
    1d60:	dac03117 	ldw	r11,196(sp)
    1d64:	60bfffc4 	addi	r2,r12,-1
    1d68:	1887883a 	add	r3,r3,r2
    1d6c:	59000044 	addi	r4,r11,1
    1d70:	84000044 	addi	r16,r16,1
    1d74:	90800115 	stw	r2,4(r18)
    1d78:	91000015 	stw	r4,0(r18)
    1d7c:	d8c02015 	stw	r3,128(sp)
    1d80:	dc001f15 	stw	r16,124(sp)
    1d84:	008001c4 	movi	r2,7
    1d88:	1400b316 	blt	r2,r16,2058 <___svfprintf_internal_r+0x13a8>
    1d8c:	94800204 	addi	r18,r18,8
    1d90:	dac03a17 	ldw	r11,232(sp)
    1d94:	dd4022c4 	addi	r21,sp,139
    1d98:	84000044 	addi	r16,r16,1
    1d9c:	1ac7883a 	add	r3,r3,r11
    1da0:	95400015 	stw	r21,0(r18)
    1da4:	92c00115 	stw	r11,4(r18)
    1da8:	d8c02015 	stw	r3,128(sp)
    1dac:	dc001f15 	stw	r16,124(sp)
    1db0:	008001c4 	movi	r2,7
    1db4:	14001416 	blt	r2,r16,1e08 <___svfprintf_internal_r+0x1158>
    1db8:	92000204 	addi	r8,r18,8
    1dbc:	003d9106 	br	1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1dc0:	d9002f17 	ldw	r4,188(sp)
    1dc4:	b80b883a 	mov	r5,r23
    1dc8:	b00d883a 	mov	r6,r22
    1dcc:	0009c440 	call	9c44 <__ssprint_r>
    1dd0:	103dc826 	beq	r2,zero,14f4 <__alt_mem_Flash_flash_data+0xf40014f4>
    1dd4:	003c7e06 	br	fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1dd8:	010000b4 	movhi	r4,2
    1ddc:	21318084 	addi	r4,r4,-14846
    1de0:	d9002b15 	stw	r4,172(sp)
    1de4:	dac02b17 	ldw	r11,172(sp)
    1de8:	1c07883a 	add	r3,r3,r16
    1dec:	44000115 	stw	r16,4(r8)
    1df0:	42c00015 	stw	r11,0(r8)
    1df4:	10800044 	addi	r2,r2,1
    1df8:	d8c02015 	stw	r3,128(sp)
    1dfc:	d8801f15 	stw	r2,124(sp)
    1e00:	010001c4 	movi	r4,7
    1e04:	20bd7e0e 	bge	r4,r2,1400 <__alt_mem_Flash_flash_data+0xf4001400>
    1e08:	d9002f17 	ldw	r4,188(sp)
    1e0c:	b80b883a 	mov	r5,r23
    1e10:	b00d883a 	mov	r6,r22
    1e14:	0009c440 	call	9c44 <__ssprint_r>
    1e18:	103c6d1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1e1c:	d8c02017 	ldw	r3,128(sp)
    1e20:	da000404 	addi	r8,sp,16
    1e24:	003d7706 	br	1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1e28:	10803fcc 	andi	r2,r2,255
    1e2c:	1000201e 	bne	r2,zero,1eb0 <___svfprintf_internal_r+0x1200>
    1e30:	8880004c 	andi	r2,r17,1
    1e34:	10001e26 	beq	r2,zero,1eb0 <___svfprintf_internal_r+0x1200>
    1e38:	00800c04 	movi	r2,48
    1e3c:	d8c01dc4 	addi	r3,sp,119
    1e40:	d8801dc5 	stb	r2,119(sp)
    1e44:	dc803d17 	ldw	r18,244(sp)
    1e48:	d8c03115 	stw	r3,196(sp)
    1e4c:	003cbf06 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    1e50:	d9002f17 	ldw	r4,188(sp)
    1e54:	b80b883a 	mov	r5,r23
    1e58:	b00d883a 	mov	r6,r22
    1e5c:	0009c440 	call	9c44 <__ssprint_r>
    1e60:	103c5b1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1e64:	d8c02017 	ldw	r3,128(sp)
    1e68:	da000404 	addi	r8,sp,16
    1e6c:	003d5806 	br	13d0 <__alt_mem_Flash_flash_data+0xf40013d0>
    1e70:	d9002f17 	ldw	r4,188(sp)
    1e74:	b80b883a 	mov	r5,r23
    1e78:	b00d883a 	mov	r6,r22
    1e7c:	0009c440 	call	9c44 <__ssprint_r>
    1e80:	103c531e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	da000404 	addi	r8,sp,16
    1e8c:	003d1906 	br	12f4 <__alt_mem_Flash_flash_data+0xf40012f4>
    1e90:	d9002f17 	ldw	r4,188(sp)
    1e94:	b80b883a 	mov	r5,r23
    1e98:	b00d883a 	mov	r6,r22
    1e9c:	0009c440 	call	9c44 <__ssprint_r>
    1ea0:	103c4b1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1ea4:	d8c02017 	ldw	r3,128(sp)
    1ea8:	da000404 	addi	r8,sp,16
    1eac:	003d0306 	br	12bc <__alt_mem_Flash_flash_data+0xf40012bc>
    1eb0:	0025883a 	mov	r18,zero
    1eb4:	dd803115 	stw	r22,196(sp)
    1eb8:	003ca406 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    1ebc:	dc002617 	ldw	r16,152(sp)
    1ec0:	0401480e 	bge	zero,r16,23e4 <___svfprintf_internal_r+0x1734>
    1ec4:	db003117 	ldw	r12,196(sp)
    1ec8:	dac03317 	ldw	r11,204(sp)
    1ecc:	62e1883a 	add	r16,r12,r11
    1ed0:	db003417 	ldw	r12,208(sp)
    1ed4:	5825883a 	mov	r18,r11
    1ed8:	62c0010e 	bge	r12,r11,1ee0 <___svfprintf_internal_r+0x1230>
    1edc:	6025883a 	mov	r18,r12
    1ee0:	04800b0e 	bge	zero,r18,1f10 <___svfprintf_internal_r+0x1260>
    1ee4:	d8801f17 	ldw	r2,124(sp)
    1ee8:	dac03117 	ldw	r11,196(sp)
    1eec:	1c87883a 	add	r3,r3,r18
    1ef0:	10800044 	addi	r2,r2,1
    1ef4:	42c00015 	stw	r11,0(r8)
    1ef8:	44800115 	stw	r18,4(r8)
    1efc:	d8c02015 	stw	r3,128(sp)
    1f00:	d8801f15 	stw	r2,124(sp)
    1f04:	010001c4 	movi	r4,7
    1f08:	20823f16 	blt	r4,r2,2808 <___svfprintf_internal_r+0x1b58>
    1f0c:	42000204 	addi	r8,r8,8
    1f10:	90023b16 	blt	r18,zero,2800 <___svfprintf_internal_r+0x1b50>
    1f14:	db003417 	ldw	r12,208(sp)
    1f18:	64a5c83a 	sub	r18,r12,r18
    1f1c:	0480780e 	bge	zero,r18,2100 <___svfprintf_internal_r+0x1450>
    1f20:	05400404 	movi	r21,16
    1f24:	d8801f17 	ldw	r2,124(sp)
    1f28:	ac81140e 	bge	r21,r18,237c <___svfprintf_internal_r+0x16cc>
    1f2c:	014000b4 	movhi	r5,2
    1f30:	29718084 	addi	r5,r5,-14846
    1f34:	d9402b15 	stw	r5,172(sp)
    1f38:	070001c4 	movi	fp,7
    1f3c:	dcc02f17 	ldw	r19,188(sp)
    1f40:	00000306 	br	1f50 <___svfprintf_internal_r+0x12a0>
    1f44:	42000204 	addi	r8,r8,8
    1f48:	94bffc04 	addi	r18,r18,-16
    1f4c:	ac810e0e 	bge	r21,r18,2388 <___svfprintf_internal_r+0x16d8>
    1f50:	18c00404 	addi	r3,r3,16
    1f54:	10800044 	addi	r2,r2,1
    1f58:	45000015 	stw	r20,0(r8)
    1f5c:	45400115 	stw	r21,4(r8)
    1f60:	d8c02015 	stw	r3,128(sp)
    1f64:	d8801f15 	stw	r2,124(sp)
    1f68:	e0bff60e 	bge	fp,r2,1f44 <__alt_mem_Flash_flash_data+0xf4001f44>
    1f6c:	9809883a 	mov	r4,r19
    1f70:	b80b883a 	mov	r5,r23
    1f74:	b00d883a 	mov	r6,r22
    1f78:	0009c440 	call	9c44 <__ssprint_r>
    1f7c:	103c141e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1f80:	d8c02017 	ldw	r3,128(sp)
    1f84:	d8801f17 	ldw	r2,124(sp)
    1f88:	da000404 	addi	r8,sp,16
    1f8c:	003fee06 	br	1f48 <__alt_mem_Flash_flash_data+0xf4001f48>
    1f90:	d9002f17 	ldw	r4,188(sp)
    1f94:	b80b883a 	mov	r5,r23
    1f98:	b00d883a 	mov	r6,r22
    1f9c:	0009c440 	call	9c44 <__ssprint_r>
    1fa0:	103c0b1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    1fa4:	d8c02017 	ldw	r3,128(sp)
    1fa8:	d8802787 	ldb	r2,158(sp)
    1fac:	da000404 	addi	r8,sp,16
    1fb0:	003cb506 	br	1288 <__alt_mem_Flash_flash_data+0xf4001288>
    1fb4:	657fffc4 	addi	r21,r12,-1
    1fb8:	057f750e 	bge	zero,r21,1d90 <__alt_mem_Flash_flash_data+0xf4001d90>
    1fbc:	07000404 	movi	fp,16
    1fc0:	e542ed0e 	bge	fp,r21,2b78 <___svfprintf_internal_r+0x1ec8>
    1fc4:	010000b4 	movhi	r4,2
    1fc8:	21318084 	addi	r4,r4,-14846
    1fcc:	d9002b15 	stw	r4,172(sp)
    1fd0:	01c001c4 	movi	r7,7
    1fd4:	dcc02f17 	ldw	r19,188(sp)
    1fd8:	00000306 	br	1fe8 <___svfprintf_internal_r+0x1338>
    1fdc:	ad7ffc04 	addi	r21,r21,-16
    1fe0:	94800204 	addi	r18,r18,8
    1fe4:	e540130e 	bge	fp,r21,2034 <___svfprintf_internal_r+0x1384>
    1fe8:	18c00404 	addi	r3,r3,16
    1fec:	84000044 	addi	r16,r16,1
    1ff0:	95000015 	stw	r20,0(r18)
    1ff4:	97000115 	stw	fp,4(r18)
    1ff8:	d8c02015 	stw	r3,128(sp)
    1ffc:	dc001f15 	stw	r16,124(sp)
    2000:	3c3ff60e 	bge	r7,r16,1fdc <__alt_mem_Flash_flash_data+0xf4001fdc>
    2004:	9809883a 	mov	r4,r19
    2008:	b80b883a 	mov	r5,r23
    200c:	b00d883a 	mov	r6,r22
    2010:	d9c03e15 	stw	r7,248(sp)
    2014:	0009c440 	call	9c44 <__ssprint_r>
    2018:	d9c03e17 	ldw	r7,248(sp)
    201c:	103bec1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    2020:	ad7ffc04 	addi	r21,r21,-16
    2024:	d8c02017 	ldw	r3,128(sp)
    2028:	dc001f17 	ldw	r16,124(sp)
    202c:	dc800404 	addi	r18,sp,16
    2030:	e57fed16 	blt	fp,r21,1fe8 <__alt_mem_Flash_flash_data+0xf4001fe8>
    2034:	dac02b17 	ldw	r11,172(sp)
    2038:	1d47883a 	add	r3,r3,r21
    203c:	84000044 	addi	r16,r16,1
    2040:	92c00015 	stw	r11,0(r18)
    2044:	95400115 	stw	r21,4(r18)
    2048:	d8c02015 	stw	r3,128(sp)
    204c:	dc001f15 	stw	r16,124(sp)
    2050:	008001c4 	movi	r2,7
    2054:	143f4d0e 	bge	r2,r16,1d8c <__alt_mem_Flash_flash_data+0xf4001d8c>
    2058:	d9002f17 	ldw	r4,188(sp)
    205c:	b80b883a 	mov	r5,r23
    2060:	b00d883a 	mov	r6,r22
    2064:	0009c440 	call	9c44 <__ssprint_r>
    2068:	103bd91e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    206c:	d8c02017 	ldw	r3,128(sp)
    2070:	dc001f17 	ldw	r16,124(sp)
    2074:	dc800404 	addi	r18,sp,16
    2078:	003f4506 	br	1d90 <__alt_mem_Flash_flash_data+0xf4001d90>
    207c:	00800084 	movi	r2,2
    2080:	9f06b03a 	or	r3,r19,fp
    2084:	003d5706 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    2088:	1cc00017 	ldw	r19,0(r3)
    208c:	dac02d17 	ldw	r11,180(sp)
    2090:	9839d7fa 	srai	fp,r19,31
    2094:	5ac00104 	addi	r11,r11,4
    2098:	dac02d15 	stw	r11,180(sp)
    209c:	e005883a 	mov	r2,fp
    20a0:	003c0306 	br	10b0 <__alt_mem_Flash_flash_data+0xf40010b0>
    20a4:	dac02d17 	ldw	r11,180(sp)
    20a8:	0039883a 	mov	fp,zero
    20ac:	0005883a 	mov	r2,zero
    20b0:	5cc00017 	ldw	r19,0(r11)
    20b4:	5ac00104 	addi	r11,r11,4
    20b8:	dac02d15 	stw	r11,180(sp)
    20bc:	9807883a 	mov	r3,r19
    20c0:	003d4806 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    20c4:	db002d17 	ldw	r12,180(sp)
    20c8:	14c00017 	ldw	r19,0(r2)
    20cc:	0039883a 	mov	fp,zero
    20d0:	63000104 	addi	r12,r12,4
    20d4:	db002d15 	stw	r12,180(sp)
    20d8:	00800044 	movi	r2,1
    20dc:	9807883a 	mov	r3,r19
    20e0:	003d4006 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    20e4:	d9002f17 	ldw	r4,188(sp)
    20e8:	b80b883a 	mov	r5,r23
    20ec:	b00d883a 	mov	r6,r22
    20f0:	0009c440 	call	9c44 <__ssprint_r>
    20f4:	103bb61e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    20f8:	d8c02017 	ldw	r3,128(sp)
    20fc:	da000404 	addi	r8,sp,16
    2100:	db003117 	ldw	r12,196(sp)
    2104:	dac03417 	ldw	r11,208(sp)
    2108:	d8802617 	ldw	r2,152(sp)
    210c:	62e5883a 	add	r18,r12,r11
    2110:	db003317 	ldw	r12,204(sp)
    2114:	13000216 	blt	r2,r12,2120 <___svfprintf_internal_r+0x1470>
    2118:	8900004c 	andi	r4,r17,1
    211c:	20000c26 	beq	r4,zero,2150 <___svfprintf_internal_r+0x14a0>
    2120:	dac03917 	ldw	r11,228(sp)
    2124:	d9001f17 	ldw	r4,124(sp)
    2128:	db003517 	ldw	r12,212(sp)
    212c:	1ac7883a 	add	r3,r3,r11
    2130:	21000044 	addi	r4,r4,1
    2134:	43000015 	stw	r12,0(r8)
    2138:	42c00115 	stw	r11,4(r8)
    213c:	d8c02015 	stw	r3,128(sp)
    2140:	d9001f15 	stw	r4,124(sp)
    2144:	014001c4 	movi	r5,7
    2148:	2901b716 	blt	r5,r4,2828 <___svfprintf_internal_r+0x1b78>
    214c:	42000204 	addi	r8,r8,8
    2150:	dac03317 	ldw	r11,204(sp)
    2154:	8489c83a 	sub	r4,r16,r18
    2158:	5885c83a 	sub	r2,r11,r2
    215c:	1021883a 	mov	r16,r2
    2160:	2080010e 	bge	r4,r2,2168 <___svfprintf_internal_r+0x14b8>
    2164:	2021883a 	mov	r16,r4
    2168:	04000a0e 	bge	zero,r16,2194 <___svfprintf_internal_r+0x14e4>
    216c:	d9001f17 	ldw	r4,124(sp)
    2170:	1c07883a 	add	r3,r3,r16
    2174:	44800015 	stw	r18,0(r8)
    2178:	21000044 	addi	r4,r4,1
    217c:	44000115 	stw	r16,4(r8)
    2180:	d8c02015 	stw	r3,128(sp)
    2184:	d9001f15 	stw	r4,124(sp)
    2188:	014001c4 	movi	r5,7
    218c:	2901bf16 	blt	r5,r4,288c <___svfprintf_internal_r+0x1bdc>
    2190:	42000204 	addi	r8,r8,8
    2194:	8001bb16 	blt	r16,zero,2884 <___svfprintf_internal_r+0x1bd4>
    2198:	1421c83a 	sub	r16,r2,r16
    219c:	043c990e 	bge	zero,r16,1404 <__alt_mem_Flash_flash_data+0xf4001404>
    21a0:	04800404 	movi	r18,16
    21a4:	d8801f17 	ldw	r2,124(sp)
    21a8:	943f0b0e 	bge	r18,r16,1dd8 <__alt_mem_Flash_flash_data+0xf4001dd8>
    21ac:	014000b4 	movhi	r5,2
    21b0:	29718084 	addi	r5,r5,-14846
    21b4:	d9402b15 	stw	r5,172(sp)
    21b8:	054001c4 	movi	r21,7
    21bc:	dcc02f17 	ldw	r19,188(sp)
    21c0:	00000306 	br	21d0 <___svfprintf_internal_r+0x1520>
    21c4:	42000204 	addi	r8,r8,8
    21c8:	843ffc04 	addi	r16,r16,-16
    21cc:	943f050e 	bge	r18,r16,1de4 <__alt_mem_Flash_flash_data+0xf4001de4>
    21d0:	18c00404 	addi	r3,r3,16
    21d4:	10800044 	addi	r2,r2,1
    21d8:	45000015 	stw	r20,0(r8)
    21dc:	44800115 	stw	r18,4(r8)
    21e0:	d8c02015 	stw	r3,128(sp)
    21e4:	d8801f15 	stw	r2,124(sp)
    21e8:	a8bff60e 	bge	r21,r2,21c4 <__alt_mem_Flash_flash_data+0xf40021c4>
    21ec:	9809883a 	mov	r4,r19
    21f0:	b80b883a 	mov	r5,r23
    21f4:	b00d883a 	mov	r6,r22
    21f8:	0009c440 	call	9c44 <__ssprint_r>
    21fc:	103b741e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    2200:	d8c02017 	ldw	r3,128(sp)
    2204:	d8801f17 	ldw	r2,124(sp)
    2208:	da000404 	addi	r8,sp,16
    220c:	003fee06 	br	21c8 <__alt_mem_Flash_flash_data+0xf40021c8>
    2210:	8888703a 	and	r4,r17,r2
    2214:	203eb31e 	bne	r4,zero,1ce4 <__alt_mem_Flash_flash_data+0xf4001ce4>
    2218:	dc001f17 	ldw	r16,124(sp)
    221c:	db003117 	ldw	r12,196(sp)
    2220:	40800115 	stw	r2,4(r8)
    2224:	84000044 	addi	r16,r16,1
    2228:	43000015 	stw	r12,0(r8)
    222c:	d8c02015 	stw	r3,128(sp)
    2230:	dc001f15 	stw	r16,124(sp)
    2234:	008001c4 	movi	r2,7
    2238:	143f8716 	blt	r2,r16,2058 <__alt_mem_Flash_flash_data+0xf4002058>
    223c:	44800204 	addi	r18,r8,8
    2240:	003ed306 	br	1d90 <__alt_mem_Flash_flash_data+0xf4001d90>
    2244:	d9002f17 	ldw	r4,188(sp)
    2248:	b80b883a 	mov	r5,r23
    224c:	b00d883a 	mov	r6,r22
    2250:	0009c440 	call	9c44 <__ssprint_r>
    2254:	103b5e1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    2258:	d8c02017 	ldw	r3,128(sp)
    225c:	dc001f17 	ldw	r16,124(sp)
    2260:	da000404 	addi	r8,sp,16
    2264:	003eaa06 	br	1d10 <__alt_mem_Flash_flash_data+0xf4001d10>
    2268:	d9002f17 	ldw	r4,188(sp)
    226c:	b80b883a 	mov	r5,r23
    2270:	b00d883a 	mov	r6,r22
    2274:	0009c440 	call	9c44 <__ssprint_r>
    2278:	103b551e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    227c:	d8c02017 	ldw	r3,128(sp)
    2280:	dc001f17 	ldw	r16,124(sp)
    2284:	dc800404 	addi	r18,sp,16
    2288:	003eac06 	br	1d3c <__alt_mem_Flash_flash_data+0xf4001d3c>
    228c:	d9002f17 	ldw	r4,188(sp)
    2290:	b80b883a 	mov	r5,r23
    2294:	b00d883a 	mov	r6,r22
    2298:	0009c440 	call	9c44 <__ssprint_r>
    229c:	103b4c1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    22a0:	d8c02017 	ldw	r3,128(sp)
    22a4:	da000404 	addi	r8,sp,16
    22a8:	003c1506 	br	1300 <__alt_mem_Flash_flash_data+0xf4001300>
    22ac:	da004015 	stw	r8,256(sp)
    22b0:	da403f15 	stw	r9,252(sp)
    22b4:	0009a400 	call	9a40 <__fpclassifyd>
    22b8:	da004017 	ldw	r8,256(sp)
    22bc:	da403f17 	ldw	r9,252(sp)
    22c0:	1000951e 	bne	r2,zero,2518 <___svfprintf_internal_r+0x1868>
    22c4:	008011c4 	movi	r2,71
    22c8:	1400fb16 	blt	r2,r16,26b8 <___svfprintf_internal_r+0x1a08>
    22cc:	030000b4 	movhi	r12,2
    22d0:	63317204 	addi	r12,r12,-14904
    22d4:	db003115 	stw	r12,196(sp)
    22d8:	00c000c4 	movi	r3,3
    22dc:	00bfdfc4 	movi	r2,-129
    22e0:	d8c02a15 	stw	r3,168(sp)
    22e4:	88a2703a 	and	r17,r17,r2
    22e8:	dd402783 	ldbu	r21,158(sp)
    22ec:	dcc02d15 	stw	r19,180(sp)
    22f0:	1825883a 	mov	r18,r3
    22f4:	d8003215 	stw	zero,200(sp)
    22f8:	d8003415 	stw	zero,208(sp)
    22fc:	003b9806 	br	1160 <__alt_mem_Flash_flash_data+0xf4001160>
    2300:	1c000007 	ldb	r16,0(r3)
    2304:	1805883a 	mov	r2,r3
    2308:	003abf06 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    230c:	00800084 	movi	r2,2
    2310:	003cb406 	br	15e4 <__alt_mem_Flash_flash_data+0xf40015e4>
    2314:	88c0100c 	andi	r3,r17,64
    2318:	1800f626 	beq	r3,zero,26f4 <___svfprintf_internal_r+0x1a44>
    231c:	dac02d17 	ldw	r11,180(sp)
    2320:	14c0000b 	ldhu	r19,0(r2)
    2324:	0039883a 	mov	fp,zero
    2328:	5ac00104 	addi	r11,r11,4
    232c:	dac02d15 	stw	r11,180(sp)
    2330:	003cbd06 	br	1628 <__alt_mem_Flash_flash_data+0xf4001628>
    2334:	8880040c 	andi	r2,r17,16
    2338:	1000091e 	bne	r2,zero,2360 <___svfprintf_internal_r+0x16b0>
    233c:	8c40100c 	andi	r17,r17,64
    2340:	88000726 	beq	r17,zero,2360 <___svfprintf_internal_r+0x16b0>
    2344:	db002d17 	ldw	r12,180(sp)
    2348:	dac03017 	ldw	r11,192(sp)
    234c:	60800017 	ldw	r2,0(r12)
    2350:	63000104 	addi	r12,r12,4
    2354:	db002d15 	stw	r12,180(sp)
    2358:	12c0000d 	sth	r11,0(r2)
    235c:	003a8006 	br	d60 <__alt_mem_Flash_flash_data+0xf4000d60>
    2360:	db002d17 	ldw	r12,180(sp)
    2364:	dac03017 	ldw	r11,192(sp)
    2368:	60800017 	ldw	r2,0(r12)
    236c:	63000104 	addi	r12,r12,4
    2370:	db002d15 	stw	r12,180(sp)
    2374:	12c00015 	stw	r11,0(r2)
    2378:	003a7906 	br	d60 <__alt_mem_Flash_flash_data+0xf4000d60>
    237c:	010000b4 	movhi	r4,2
    2380:	21318084 	addi	r4,r4,-14846
    2384:	d9002b15 	stw	r4,172(sp)
    2388:	dac02b17 	ldw	r11,172(sp)
    238c:	1c87883a 	add	r3,r3,r18
    2390:	10800044 	addi	r2,r2,1
    2394:	42c00015 	stw	r11,0(r8)
    2398:	44800115 	stw	r18,4(r8)
    239c:	d8c02015 	stw	r3,128(sp)
    23a0:	d8801f15 	stw	r2,124(sp)
    23a4:	010001c4 	movi	r4,7
    23a8:	20bf4e16 	blt	r4,r2,20e4 <__alt_mem_Flash_flash_data+0xf40020e4>
    23ac:	42000204 	addi	r8,r8,8
    23b0:	003f5306 	br	2100 <__alt_mem_Flash_flash_data+0xf4002100>
    23b4:	010000b4 	movhi	r4,2
    23b8:	21318084 	addi	r4,r4,-14846
    23bc:	d9002b15 	stw	r4,172(sp)
    23c0:	003bf906 	br	13a8 <__alt_mem_Flash_flash_data+0xf40013a8>
    23c4:	d9002f17 	ldw	r4,188(sp)
    23c8:	b80b883a 	mov	r5,r23
    23cc:	b00d883a 	mov	r6,r22
    23d0:	0009c440 	call	9c44 <__ssprint_r>
    23d4:	103afe1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    23d8:	d8c02017 	ldw	r3,128(sp)
    23dc:	da000404 	addi	r8,sp,16
    23e0:	003dc606 	br	1afc <__alt_mem_Flash_flash_data+0xf4001afc>
    23e4:	d8801f17 	ldw	r2,124(sp)
    23e8:	030000b4 	movhi	r12,2
    23ec:	01000044 	movi	r4,1
    23f0:	18c00044 	addi	r3,r3,1
    23f4:	10800044 	addi	r2,r2,1
    23f8:	63318004 	addi	r12,r12,-14848
    23fc:	41000115 	stw	r4,4(r8)
    2400:	43000015 	stw	r12,0(r8)
    2404:	d8c02015 	stw	r3,128(sp)
    2408:	d8801f15 	stw	r2,124(sp)
    240c:	010001c4 	movi	r4,7
    2410:	2080ad16 	blt	r4,r2,26c8 <___svfprintf_internal_r+0x1a18>
    2414:	42000204 	addi	r8,r8,8
    2418:	8000041e 	bne	r16,zero,242c <___svfprintf_internal_r+0x177c>
    241c:	dac03317 	ldw	r11,204(sp)
    2420:	5800021e 	bne	r11,zero,242c <___svfprintf_internal_r+0x177c>
    2424:	8880004c 	andi	r2,r17,1
    2428:	103bf626 	beq	r2,zero,1404 <__alt_mem_Flash_flash_data+0xf4001404>
    242c:	db003917 	ldw	r12,228(sp)
    2430:	d8801f17 	ldw	r2,124(sp)
    2434:	dac03517 	ldw	r11,212(sp)
    2438:	1b07883a 	add	r3,r3,r12
    243c:	10800044 	addi	r2,r2,1
    2440:	42c00015 	stw	r11,0(r8)
    2444:	43000115 	stw	r12,4(r8)
    2448:	d8c02015 	stw	r3,128(sp)
    244c:	d8801f15 	stw	r2,124(sp)
    2450:	010001c4 	movi	r4,7
    2454:	20818616 	blt	r4,r2,2a70 <___svfprintf_internal_r+0x1dc0>
    2458:	42000204 	addi	r8,r8,8
    245c:	0421c83a 	sub	r16,zero,r16
    2460:	0400bc0e 	bge	zero,r16,2754 <___svfprintf_internal_r+0x1aa4>
    2464:	04800404 	movi	r18,16
    2468:	9400f80e 	bge	r18,r16,284c <___svfprintf_internal_r+0x1b9c>
    246c:	010000b4 	movhi	r4,2
    2470:	21318084 	addi	r4,r4,-14846
    2474:	d9002b15 	stw	r4,172(sp)
    2478:	054001c4 	movi	r21,7
    247c:	dcc02f17 	ldw	r19,188(sp)
    2480:	00000306 	br	2490 <___svfprintf_internal_r+0x17e0>
    2484:	42000204 	addi	r8,r8,8
    2488:	843ffc04 	addi	r16,r16,-16
    248c:	9400f20e 	bge	r18,r16,2858 <___svfprintf_internal_r+0x1ba8>
    2490:	18c00404 	addi	r3,r3,16
    2494:	10800044 	addi	r2,r2,1
    2498:	45000015 	stw	r20,0(r8)
    249c:	44800115 	stw	r18,4(r8)
    24a0:	d8c02015 	stw	r3,128(sp)
    24a4:	d8801f15 	stw	r2,124(sp)
    24a8:	a8bff60e 	bge	r21,r2,2484 <__alt_mem_Flash_flash_data+0xf4002484>
    24ac:	9809883a 	mov	r4,r19
    24b0:	b80b883a 	mov	r5,r23
    24b4:	b00d883a 	mov	r6,r22
    24b8:	0009c440 	call	9c44 <__ssprint_r>
    24bc:	103ac41e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    24c0:	d8c02017 	ldw	r3,128(sp)
    24c4:	d8801f17 	ldw	r2,124(sp)
    24c8:	da000404 	addi	r8,sp,16
    24cc:	003fee06 	br	2488 <__alt_mem_Flash_flash_data+0xf4002488>
    24d0:	db002e17 	ldw	r12,184(sp)
    24d4:	1805883a 	mov	r2,r3
    24d8:	dac02d15 	stw	r11,180(sp)
    24dc:	0319c83a 	sub	r12,zero,r12
    24e0:	db002e15 	stw	r12,184(sp)
    24e4:	003acf06 	br	1024 <__alt_mem_Flash_flash_data+0xf4001024>
    24e8:	18800044 	addi	r2,r3,1
    24ec:	8c400814 	ori	r17,r17,32
    24f0:	1c000047 	ldb	r16,1(r3)
    24f4:	003a4406 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    24f8:	d9002f17 	ldw	r4,188(sp)
    24fc:	b80b883a 	mov	r5,r23
    2500:	b00d883a 	mov	r6,r22
    2504:	0009c440 	call	9c44 <__ssprint_r>
    2508:	103ab11e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    250c:	d8c02017 	ldw	r3,128(sp)
    2510:	da000404 	addi	r8,sp,16
    2514:	003d8a06 	br	1b40 <__alt_mem_Flash_flash_data+0xf4001b40>
    2518:	057ff7c4 	movi	r21,-33
    251c:	00bfffc4 	movi	r2,-1
    2520:	856a703a 	and	r21,r16,r21
    2524:	48807126 	beq	r9,r2,26ec <___svfprintf_internal_r+0x1a3c>
    2528:	008011c4 	movi	r2,71
    252c:	a8814d26 	beq	r21,r2,2a64 <___svfprintf_internal_r+0x1db4>
    2530:	db003817 	ldw	r12,224(sp)
    2534:	8ac04014 	ori	r11,r17,256
    2538:	dac02d15 	stw	r11,180(sp)
    253c:	60015616 	blt	r12,zero,2a98 <___svfprintf_internal_r+0x1de8>
    2540:	dc803817 	ldw	r18,224(sp)
    2544:	d8002a05 	stb	zero,168(sp)
    2548:	00801984 	movi	r2,102
    254c:	80808c26 	beq	r16,r2,2780 <___svfprintf_internal_r+0x1ad0>
    2550:	00801184 	movi	r2,70
    2554:	80808a26 	beq	r16,r2,2780 <___svfprintf_internal_r+0x1ad0>
    2558:	00801144 	movi	r2,69
    255c:	a8815226 	beq	r21,r2,2aa8 <___svfprintf_internal_r+0x1df8>
    2560:	4839883a 	mov	fp,r9
    2564:	d8802604 	addi	r2,sp,152
    2568:	d8800115 	stw	r2,4(sp)
    256c:	d9002f17 	ldw	r4,188(sp)
    2570:	d8802504 	addi	r2,sp,148
    2574:	d9403717 	ldw	r5,220(sp)
    2578:	d8800215 	stw	r2,8(sp)
    257c:	d8802104 	addi	r2,sp,132
    2580:	df000015 	stw	fp,0(sp)
    2584:	d8800315 	stw	r2,12(sp)
    2588:	900d883a 	mov	r6,r18
    258c:	01c00084 	movi	r7,2
    2590:	da004015 	stw	r8,256(sp)
    2594:	da403f15 	stw	r9,252(sp)
    2598:	0004fc40 	call	4fc4 <_dtoa_r>
    259c:	d8803115 	stw	r2,196(sp)
    25a0:	008019c4 	movi	r2,103
    25a4:	da004017 	ldw	r8,256(sp)
    25a8:	da403f17 	ldw	r9,252(sp)
    25ac:	80800226 	beq	r16,r2,25b8 <___svfprintf_internal_r+0x1908>
    25b0:	008011c4 	movi	r2,71
    25b4:	8080841e 	bne	r16,r2,27c8 <___svfprintf_internal_r+0x1b18>
    25b8:	8880004c 	andi	r2,r17,1
    25bc:	10014f26 	beq	r2,zero,2afc <___svfprintf_internal_r+0x1e4c>
    25c0:	db003117 	ldw	r12,196(sp)
    25c4:	6715883a 	add	r10,r12,fp
    25c8:	d9003717 	ldw	r4,220(sp)
    25cc:	900b883a 	mov	r5,r18
    25d0:	000d883a 	mov	r6,zero
    25d4:	000f883a 	mov	r7,zero
    25d8:	da004015 	stw	r8,256(sp)
    25dc:	da403f15 	stw	r9,252(sp)
    25e0:	da803e15 	stw	r10,248(sp)
    25e4:	000e9e80 	call	e9e8 <__eqdf2>
    25e8:	da004017 	ldw	r8,256(sp)
    25ec:	da403f17 	ldw	r9,252(sp)
    25f0:	da803e17 	ldw	r10,248(sp)
    25f4:	1000d926 	beq	r2,zero,295c <___svfprintf_internal_r+0x1cac>
    25f8:	d8802117 	ldw	r2,132(sp)
    25fc:	1280062e 	bgeu	r2,r10,2618 <___svfprintf_internal_r+0x1968>
    2600:	01000c04 	movi	r4,48
    2604:	10c00044 	addi	r3,r2,1
    2608:	d8c02115 	stw	r3,132(sp)
    260c:	11000005 	stb	r4,0(r2)
    2610:	d8802117 	ldw	r2,132(sp)
    2614:	12bffb36 	bltu	r2,r10,2604 <__alt_mem_Flash_flash_data+0xf4002604>
    2618:	db003117 	ldw	r12,196(sp)
    261c:	1305c83a 	sub	r2,r2,r12
    2620:	d8803315 	stw	r2,204(sp)
    2624:	008011c4 	movi	r2,71
    2628:	a880b626 	beq	r21,r2,2904 <___svfprintf_internal_r+0x1c54>
    262c:	00801944 	movi	r2,101
    2630:	14017c0e 	bge	r2,r16,2c24 <___svfprintf_internal_r+0x1f74>
    2634:	00801984 	movi	r2,102
    2638:	80812626 	beq	r16,r2,2ad4 <___svfprintf_internal_r+0x1e24>
    263c:	db002617 	ldw	r12,152(sp)
    2640:	db003415 	stw	r12,208(sp)
    2644:	db003417 	ldw	r12,208(sp)
    2648:	dac03317 	ldw	r11,204(sp)
    264c:	62c11816 	blt	r12,r11,2ab0 <___svfprintf_internal_r+0x1e00>
    2650:	8c40004c 	andi	r17,r17,1
    2654:	88013b1e 	bne	r17,zero,2b44 <___svfprintf_internal_r+0x1e94>
    2658:	6005883a 	mov	r2,r12
    265c:	60012516 	blt	r12,zero,2af4 <___svfprintf_internal_r+0x1e44>
    2660:	dc803417 	ldw	r18,208(sp)
    2664:	df002a07 	ldb	fp,168(sp)
    2668:	e000b01e 	bne	fp,zero,292c <___svfprintf_internal_r+0x1c7c>
    266c:	dc402d17 	ldw	r17,180(sp)
    2670:	dd402783 	ldbu	r21,158(sp)
    2674:	d8802a15 	stw	r2,168(sp)
    2678:	dcc02d15 	stw	r19,180(sp)
    267c:	d8003215 	stw	zero,200(sp)
    2680:	003ab706 	br	1160 <__alt_mem_Flash_flash_data+0xf4001160>
    2684:	008000b4 	movhi	r2,2
    2688:	10b17004 	addi	r2,r2,-14912
    268c:	d8803115 	stw	r2,196(sp)
    2690:	003bbb06 	br	1580 <__alt_mem_Flash_flash_data+0xf4001580>
    2694:	d9002f17 	ldw	r4,188(sp)
    2698:	04001004 	movi	r16,64
    269c:	800b883a 	mov	r5,r16
    26a0:	0007a140 	call	7a14 <_malloc_r>
    26a4:	b8800015 	stw	r2,0(r23)
    26a8:	b8800415 	stw	r2,16(r23)
    26ac:	10015f26 	beq	r2,zero,2c2c <___svfprintf_internal_r+0x1f7c>
    26b0:	bc000515 	stw	r16,20(r23)
    26b4:	00399806 	br	d18 <__alt_mem_Flash_flash_data+0xf4000d18>
    26b8:	008000b4 	movhi	r2,2
    26bc:	10b17304 	addi	r2,r2,-14900
    26c0:	d8803115 	stw	r2,196(sp)
    26c4:	003f0406 	br	22d8 <__alt_mem_Flash_flash_data+0xf40022d8>
    26c8:	d9002f17 	ldw	r4,188(sp)
    26cc:	b80b883a 	mov	r5,r23
    26d0:	b00d883a 	mov	r6,r22
    26d4:	0009c440 	call	9c44 <__ssprint_r>
    26d8:	103a3d1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    26dc:	dc002617 	ldw	r16,152(sp)
    26e0:	d8c02017 	ldw	r3,128(sp)
    26e4:	da000404 	addi	r8,sp,16
    26e8:	003f4b06 	br	2418 <__alt_mem_Flash_flash_data+0xf4002418>
    26ec:	02400184 	movi	r9,6
    26f0:	003f8f06 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    26f4:	db002d17 	ldw	r12,180(sp)
    26f8:	14c00017 	ldw	r19,0(r2)
    26fc:	0039883a 	mov	fp,zero
    2700:	63000104 	addi	r12,r12,4
    2704:	db002d15 	stw	r12,180(sp)
    2708:	003bc706 	br	1628 <__alt_mem_Flash_flash_data+0xf4001628>
    270c:	d8c03117 	ldw	r3,196(sp)
    2710:	b0e5c83a 	sub	r18,r22,r3
    2714:	003a8d06 	br	114c <__alt_mem_Flash_flash_data+0xf400114c>
    2718:	da004015 	stw	r8,256(sp)
    271c:	0000c180 	call	c18 <strlen>
    2720:	1025883a 	mov	r18,r2
    2724:	da004017 	ldw	r8,256(sp)
    2728:	903bf20e 	bge	r18,zero,16f4 <__alt_mem_Flash_flash_data+0xf40016f4>
    272c:	0005883a 	mov	r2,zero
    2730:	003bf006 	br	16f4 <__alt_mem_Flash_flash_data+0xf40016f4>
    2734:	d9002f17 	ldw	r4,188(sp)
    2738:	b80b883a 	mov	r5,r23
    273c:	b00d883a 	mov	r6,r22
    2740:	0009c440 	call	9c44 <__ssprint_r>
    2744:	103a221e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    2748:	d8c02017 	ldw	r3,128(sp)
    274c:	d8801f17 	ldw	r2,124(sp)
    2750:	da000404 	addi	r8,sp,16
    2754:	db003317 	ldw	r12,204(sp)
    2758:	dac03117 	ldw	r11,196(sp)
    275c:	10800044 	addi	r2,r2,1
    2760:	1b07883a 	add	r3,r3,r12
    2764:	42c00015 	stw	r11,0(r8)
    2768:	43000115 	stw	r12,4(r8)
    276c:	d8c02015 	stw	r3,128(sp)
    2770:	d8801f15 	stw	r2,124(sp)
    2774:	010001c4 	movi	r4,7
    2778:	20bb210e 	bge	r4,r2,1400 <__alt_mem_Flash_flash_data+0xf4001400>
    277c:	003da206 	br	1e08 <__alt_mem_Flash_flash_data+0xf4001e08>
    2780:	d8802604 	addi	r2,sp,152
    2784:	d8800115 	stw	r2,4(sp)
    2788:	d9002f17 	ldw	r4,188(sp)
    278c:	d8802504 	addi	r2,sp,148
    2790:	d9403717 	ldw	r5,220(sp)
    2794:	d8800215 	stw	r2,8(sp)
    2798:	d8802104 	addi	r2,sp,132
    279c:	da400015 	stw	r9,0(sp)
    27a0:	d8800315 	stw	r2,12(sp)
    27a4:	900d883a 	mov	r6,r18
    27a8:	01c000c4 	movi	r7,3
    27ac:	da004015 	stw	r8,256(sp)
    27b0:	da403f15 	stw	r9,252(sp)
    27b4:	0004fc40 	call	4fc4 <_dtoa_r>
    27b8:	da403f17 	ldw	r9,252(sp)
    27bc:	da004017 	ldw	r8,256(sp)
    27c0:	d8803115 	stw	r2,196(sp)
    27c4:	4839883a 	mov	fp,r9
    27c8:	dac03117 	ldw	r11,196(sp)
    27cc:	00801184 	movi	r2,70
    27d0:	5f15883a 	add	r10,r11,fp
    27d4:	a8bf7c1e 	bne	r21,r2,25c8 <__alt_mem_Flash_flash_data+0xf40025c8>
    27d8:	59000007 	ldb	r4,0(r11)
    27dc:	00800c04 	movi	r2,48
    27e0:	2080c826 	beq	r4,r2,2b04 <___svfprintf_internal_r+0x1e54>
    27e4:	d8c02617 	ldw	r3,152(sp)
    27e8:	50d5883a 	add	r10,r10,r3
    27ec:	003f7606 	br	25c8 <__alt_mem_Flash_flash_data+0xf40025c8>
    27f0:	010000b4 	movhi	r4,2
    27f4:	21318484 	addi	r4,r4,-14830
    27f8:	d9003615 	stw	r4,216(sp)
    27fc:	003a9706 	br	125c <__alt_mem_Flash_flash_data+0xf400125c>
    2800:	0025883a 	mov	r18,zero
    2804:	003dc306 	br	1f14 <__alt_mem_Flash_flash_data+0xf4001f14>
    2808:	d9002f17 	ldw	r4,188(sp)
    280c:	b80b883a 	mov	r5,r23
    2810:	b00d883a 	mov	r6,r22
    2814:	0009c440 	call	9c44 <__ssprint_r>
    2818:	1039ed1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    281c:	d8c02017 	ldw	r3,128(sp)
    2820:	da000404 	addi	r8,sp,16
    2824:	003dba06 	br	1f10 <__alt_mem_Flash_flash_data+0xf4001f10>
    2828:	d9002f17 	ldw	r4,188(sp)
    282c:	b80b883a 	mov	r5,r23
    2830:	b00d883a 	mov	r6,r22
    2834:	0009c440 	call	9c44 <__ssprint_r>
    2838:	1039e51e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    283c:	d8802617 	ldw	r2,152(sp)
    2840:	d8c02017 	ldw	r3,128(sp)
    2844:	da000404 	addi	r8,sp,16
    2848:	003e4106 	br	2150 <__alt_mem_Flash_flash_data+0xf4002150>
    284c:	030000b4 	movhi	r12,2
    2850:	63318084 	addi	r12,r12,-14846
    2854:	db002b15 	stw	r12,172(sp)
    2858:	dac02b17 	ldw	r11,172(sp)
    285c:	1c07883a 	add	r3,r3,r16
    2860:	10800044 	addi	r2,r2,1
    2864:	42c00015 	stw	r11,0(r8)
    2868:	44000115 	stw	r16,4(r8)
    286c:	d8c02015 	stw	r3,128(sp)
    2870:	d8801f15 	stw	r2,124(sp)
    2874:	010001c4 	movi	r4,7
    2878:	20bfae16 	blt	r4,r2,2734 <__alt_mem_Flash_flash_data+0xf4002734>
    287c:	42000204 	addi	r8,r8,8
    2880:	003fb406 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2884:	0021883a 	mov	r16,zero
    2888:	003e4306 	br	2198 <__alt_mem_Flash_flash_data+0xf4002198>
    288c:	d9002f17 	ldw	r4,188(sp)
    2890:	b80b883a 	mov	r5,r23
    2894:	b00d883a 	mov	r6,r22
    2898:	0009c440 	call	9c44 <__ssprint_r>
    289c:	1039cc1e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    28a0:	d8802617 	ldw	r2,152(sp)
    28a4:	db003317 	ldw	r12,204(sp)
    28a8:	d8c02017 	ldw	r3,128(sp)
    28ac:	da000404 	addi	r8,sp,16
    28b0:	6085c83a 	sub	r2,r12,r2
    28b4:	003e3706 	br	2194 <__alt_mem_Flash_flash_data+0xf4002194>
    28b8:	00800184 	movi	r2,6
    28bc:	1240012e 	bgeu	r2,r9,28c4 <___svfprintf_internal_r+0x1c14>
    28c0:	1013883a 	mov	r9,r2
    28c4:	4825883a 	mov	r18,r9
    28c8:	4805883a 	mov	r2,r9
    28cc:	4800a216 	blt	r9,zero,2b58 <___svfprintf_internal_r+0x1ea8>
    28d0:	d8802a15 	stw	r2,168(sp)
    28d4:	008000b4 	movhi	r2,2
    28d8:	10b17e04 	addi	r2,r2,-14856
    28dc:	d8803115 	stw	r2,196(sp)
    28e0:	dcc02d15 	stw	r19,180(sp)
    28e4:	d8003215 	stw	zero,200(sp)
    28e8:	d8003415 	stw	zero,208(sp)
    28ec:	0005883a 	mov	r2,zero
    28f0:	003a2206 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>
    28f4:	030000b4 	movhi	r12,2
    28f8:	63318484 	addi	r12,r12,-14830
    28fc:	db003615 	stw	r12,216(sp)
    2900:	003ae506 	br	1498 <__alt_mem_Flash_flash_data+0xf4001498>
    2904:	d8c02617 	ldw	r3,152(sp)
    2908:	00bfff44 	movi	r2,-3
    290c:	18801516 	blt	r3,r2,2964 <___svfprintf_internal_r+0x1cb4>
    2910:	48c01416 	blt	r9,r3,2964 <___svfprintf_internal_r+0x1cb4>
    2914:	d8c03415 	stw	r3,208(sp)
    2918:	040019c4 	movi	r16,103
    291c:	003f4906 	br	2644 <__alt_mem_Flash_flash_data+0xf4002644>
    2920:	05400b44 	movi	r21,45
    2924:	dd402785 	stb	r21,158(sp)
    2928:	003b1006 	br	156c <__alt_mem_Flash_flash_data+0xf400156c>
    292c:	00c00b44 	movi	r3,45
    2930:	d8802a15 	stw	r2,168(sp)
    2934:	dc402d17 	ldw	r17,180(sp)
    2938:	d8c02785 	stb	r3,158(sp)
    293c:	dcc02d15 	stw	r19,180(sp)
    2940:	d8003215 	stw	zero,200(sp)
    2944:	00800b44 	movi	r2,45
    2948:	003a0906 	br	1170 <__alt_mem_Flash_flash_data+0xf4001170>
    294c:	010000b4 	movhi	r4,2
    2950:	21318084 	addi	r4,r4,-14846
    2954:	d9002b15 	stw	r4,172(sp)
    2958:	003cc306 	br	1c68 <__alt_mem_Flash_flash_data+0xf4001c68>
    295c:	5005883a 	mov	r2,r10
    2960:	003f2d06 	br	2618 <__alt_mem_Flash_flash_data+0xf4002618>
    2964:	843fff84 	addi	r16,r16,-2
    2968:	1f3fffc4 	addi	fp,r3,-1
    296c:	df002615 	stw	fp,152(sp)
    2970:	dc0022c5 	stb	r16,139(sp)
    2974:	e000a016 	blt	fp,zero,2bf8 <___svfprintf_internal_r+0x1f48>
    2978:	00800ac4 	movi	r2,43
    297c:	d8802305 	stb	r2,140(sp)
    2980:	00800244 	movi	r2,9
    2984:	1700800e 	bge	r2,fp,2b88 <___svfprintf_internal_r+0x1ed8>
    2988:	dd4022c4 	addi	r21,sp,139
    298c:	dc002b15 	stw	r16,172(sp)
    2990:	4025883a 	mov	r18,r8
    2994:	a821883a 	mov	r16,r21
    2998:	e009883a 	mov	r4,fp
    299c:	01400284 	movi	r5,10
    29a0:	000d8140 	call	d814 <__modsi3>
    29a4:	10800c04 	addi	r2,r2,48
    29a8:	843fffc4 	addi	r16,r16,-1
    29ac:	e009883a 	mov	r4,fp
    29b0:	01400284 	movi	r5,10
    29b4:	80800005 	stb	r2,0(r16)
    29b8:	000d7c00 	call	d7c0 <__divsi3>
    29bc:	1039883a 	mov	fp,r2
    29c0:	00800244 	movi	r2,9
    29c4:	173ff416 	blt	r2,fp,2998 <__alt_mem_Flash_flash_data+0xf4002998>
    29c8:	9011883a 	mov	r8,r18
    29cc:	e0800c04 	addi	r2,fp,48
    29d0:	8025883a 	mov	r18,r16
    29d4:	913fffc4 	addi	r4,r18,-1
    29d8:	90bfffc5 	stb	r2,-1(r18)
    29dc:	dc002b17 	ldw	r16,172(sp)
    29e0:	25408e2e 	bgeu	r4,r21,2c1c <___svfprintf_internal_r+0x1f6c>
    29e4:	d9402384 	addi	r5,sp,142
    29e8:	2c8bc83a 	sub	r5,r5,r18
    29ec:	d8c02344 	addi	r3,sp,141
    29f0:	a94b883a 	add	r5,r21,r5
    29f4:	00000106 	br	29fc <___svfprintf_internal_r+0x1d4c>
    29f8:	20800003 	ldbu	r2,0(r4)
    29fc:	18800005 	stb	r2,0(r3)
    2a00:	18c00044 	addi	r3,r3,1
    2a04:	21000044 	addi	r4,r4,1
    2a08:	197ffb1e 	bne	r3,r5,29f8 <__alt_mem_Flash_flash_data+0xf40029f8>
    2a0c:	d8802304 	addi	r2,sp,140
    2a10:	1485c83a 	sub	r2,r2,r18
    2a14:	d8c02344 	addi	r3,sp,141
    2a18:	1885883a 	add	r2,r3,r2
    2a1c:	dac03317 	ldw	r11,204(sp)
    2a20:	156bc83a 	sub	r21,r2,r21
    2a24:	dd403a15 	stw	r21,232(sp)
    2a28:	00800044 	movi	r2,1
    2a2c:	5d65883a 	add	r18,r11,r21
    2a30:	12c0770e 	bge	r2,r11,2c10 <___svfprintf_internal_r+0x1f60>
    2a34:	94800044 	addi	r18,r18,1
    2a38:	9005883a 	mov	r2,r18
    2a3c:	90007216 	blt	r18,zero,2c08 <___svfprintf_internal_r+0x1f58>
    2a40:	d8003415 	stw	zero,208(sp)
    2a44:	003f0706 	br	2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2a48:	da402a15 	stw	r9,168(sp)
    2a4c:	dd402783 	ldbu	r21,158(sp)
    2a50:	4825883a 	mov	r18,r9
    2a54:	dcc02d15 	stw	r19,180(sp)
    2a58:	d8003215 	stw	zero,200(sp)
    2a5c:	d8003415 	stw	zero,208(sp)
    2a60:	0039bf06 	br	1160 <__alt_mem_Flash_flash_data+0xf4001160>
    2a64:	483eb21e 	bne	r9,zero,2530 <__alt_mem_Flash_flash_data+0xf4002530>
    2a68:	9013883a 	mov	r9,r18
    2a6c:	003eb006 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    2a70:	d9002f17 	ldw	r4,188(sp)
    2a74:	b80b883a 	mov	r5,r23
    2a78:	b00d883a 	mov	r6,r22
    2a7c:	0009c440 	call	9c44 <__ssprint_r>
    2a80:	1039531e 	bne	r2,zero,fd0 <__alt_mem_Flash_flash_data+0xf4000fd0>
    2a84:	dc002617 	ldw	r16,152(sp)
    2a88:	d8c02017 	ldw	r3,128(sp)
    2a8c:	d8801f17 	ldw	r2,124(sp)
    2a90:	da000404 	addi	r8,sp,16
    2a94:	003e7106 	br	245c <__alt_mem_Flash_flash_data+0xf400245c>
    2a98:	00c00b44 	movi	r3,45
    2a9c:	64a0003c 	xorhi	r18,r12,32768
    2aa0:	d8c02a05 	stb	r3,168(sp)
    2aa4:	003ea806 	br	2548 <__alt_mem_Flash_flash_data+0xf4002548>
    2aa8:	4f000044 	addi	fp,r9,1
    2aac:	003ead06 	br	2564 <__alt_mem_Flash_flash_data+0xf4002564>
    2ab0:	d8c03417 	ldw	r3,208(sp)
    2ab4:	00c0410e 	bge	zero,r3,2bbc <___svfprintf_internal_r+0x1f0c>
    2ab8:	04800044 	movi	r18,1
    2abc:	dac03317 	ldw	r11,204(sp)
    2ac0:	92e5883a 	add	r18,r18,r11
    2ac4:	9005883a 	mov	r2,r18
    2ac8:	903ee60e 	bge	r18,zero,2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2acc:	0005883a 	mov	r2,zero
    2ad0:	003ee406 	br	2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2ad4:	d8c02617 	ldw	r3,152(sp)
    2ad8:	d8c03415 	stw	r3,208(sp)
    2adc:	00c0310e 	bge	zero,r3,2ba4 <___svfprintf_internal_r+0x1ef4>
    2ae0:	48001f1e 	bne	r9,zero,2b60 <___svfprintf_internal_r+0x1eb0>
    2ae4:	8c40004c 	andi	r17,r17,1
    2ae8:	88001d1e 	bne	r17,zero,2b60 <___svfprintf_internal_r+0x1eb0>
    2aec:	1805883a 	mov	r2,r3
    2af0:	183edb0e 	bge	r3,zero,2660 <__alt_mem_Flash_flash_data+0xf4002660>
    2af4:	0005883a 	mov	r2,zero
    2af8:	003ed906 	br	2660 <__alt_mem_Flash_flash_data+0xf4002660>
    2afc:	d8802117 	ldw	r2,132(sp)
    2b00:	003ec506 	br	2618 <__alt_mem_Flash_flash_data+0xf4002618>
    2b04:	d9003717 	ldw	r4,220(sp)
    2b08:	900b883a 	mov	r5,r18
    2b0c:	000d883a 	mov	r6,zero
    2b10:	000f883a 	mov	r7,zero
    2b14:	da004015 	stw	r8,256(sp)
    2b18:	da403f15 	stw	r9,252(sp)
    2b1c:	da803e15 	stw	r10,248(sp)
    2b20:	000e9e80 	call	e9e8 <__eqdf2>
    2b24:	da004017 	ldw	r8,256(sp)
    2b28:	da403f17 	ldw	r9,252(sp)
    2b2c:	da803e17 	ldw	r10,248(sp)
    2b30:	103f2c26 	beq	r2,zero,27e4 <__alt_mem_Flash_flash_data+0xf40027e4>
    2b34:	00800044 	movi	r2,1
    2b38:	1707c83a 	sub	r3,r2,fp
    2b3c:	d8c02615 	stw	r3,152(sp)
    2b40:	003f2906 	br	27e8 <__alt_mem_Flash_flash_data+0xf40027e8>
    2b44:	db003417 	ldw	r12,208(sp)
    2b48:	64800044 	addi	r18,r12,1
    2b4c:	9005883a 	mov	r2,r18
    2b50:	903ec40e 	bge	r18,zero,2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2b54:	003fdd06 	br	2acc <__alt_mem_Flash_flash_data+0xf4002acc>
    2b58:	0005883a 	mov	r2,zero
    2b5c:	003f5c06 	br	28d0 <__alt_mem_Flash_flash_data+0xf40028d0>
    2b60:	dac03417 	ldw	r11,208(sp)
    2b64:	4a400044 	addi	r9,r9,1
    2b68:	5a65883a 	add	r18,r11,r9
    2b6c:	9005883a 	mov	r2,r18
    2b70:	903ebc0e 	bge	r18,zero,2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2b74:	003fd506 	br	2acc <__alt_mem_Flash_flash_data+0xf4002acc>
    2b78:	008000b4 	movhi	r2,2
    2b7c:	10b18084 	addi	r2,r2,-14846
    2b80:	d8802b15 	stw	r2,172(sp)
    2b84:	003d2b06 	br	2034 <__alt_mem_Flash_flash_data+0xf4002034>
    2b88:	00800c04 	movi	r2,48
    2b8c:	e0c00c04 	addi	r3,fp,48
    2b90:	d8802345 	stb	r2,141(sp)
    2b94:	d8c02385 	stb	r3,142(sp)
    2b98:	d88023c4 	addi	r2,sp,143
    2b9c:	dd4022c4 	addi	r21,sp,139
    2ba0:	003f9e06 	br	2a1c <__alt_mem_Flash_flash_data+0xf4002a1c>
    2ba4:	4800081e 	bne	r9,zero,2bc8 <___svfprintf_internal_r+0x1f18>
    2ba8:	8c40004c 	andi	r17,r17,1
    2bac:	8800061e 	bne	r17,zero,2bc8 <___svfprintf_internal_r+0x1f18>
    2bb0:	00800044 	movi	r2,1
    2bb4:	1025883a 	mov	r18,r2
    2bb8:	003eaa06 	br	2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2bbc:	04800084 	movi	r18,2
    2bc0:	90e5c83a 	sub	r18,r18,r3
    2bc4:	003fbd06 	br	2abc <__alt_mem_Flash_flash_data+0xf4002abc>
    2bc8:	4c800084 	addi	r18,r9,2
    2bcc:	9005883a 	mov	r2,r18
    2bd0:	903ea40e 	bge	r18,zero,2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2bd4:	003fbd06 	br	2acc <__alt_mem_Flash_flash_data+0xf4002acc>
    2bd8:	dac02d17 	ldw	r11,180(sp)
    2bdc:	5a400017 	ldw	r9,0(r11)
    2be0:	5ac00104 	addi	r11,r11,4
    2be4:	dac02d15 	stw	r11,180(sp)
    2be8:	483e410e 	bge	r9,zero,24f0 <__alt_mem_Flash_flash_data+0xf40024f0>
    2bec:	027fffc4 	movi	r9,-1
    2bf0:	1c000047 	ldb	r16,1(r3)
    2bf4:	00388406 	br	e08 <__alt_mem_Flash_flash_data+0xf4000e08>
    2bf8:	00800b44 	movi	r2,45
    2bfc:	0739c83a 	sub	fp,zero,fp
    2c00:	d8802305 	stb	r2,140(sp)
    2c04:	003f5e06 	br	2980 <__alt_mem_Flash_flash_data+0xf4002980>
    2c08:	0005883a 	mov	r2,zero
    2c0c:	003f8c06 	br	2a40 <__alt_mem_Flash_flash_data+0xf4002a40>
    2c10:	88a2703a 	and	r17,r17,r2
    2c14:	883f8826 	beq	r17,zero,2a38 <__alt_mem_Flash_flash_data+0xf4002a38>
    2c18:	003f8606 	br	2a34 <__alt_mem_Flash_flash_data+0xf4002a34>
    2c1c:	d8802344 	addi	r2,sp,141
    2c20:	003f7e06 	br	2a1c <__alt_mem_Flash_flash_data+0xf4002a1c>
    2c24:	d8c02617 	ldw	r3,152(sp)
    2c28:	003f4f06 	br	2968 <__alt_mem_Flash_flash_data+0xf4002968>
    2c2c:	dac02f17 	ldw	r11,188(sp)
    2c30:	00800304 	movi	r2,12
    2c34:	58800015 	stw	r2,0(r11)
    2c38:	00bfffc4 	movi	r2,-1
    2c3c:	0038e806 	br	fe0 <__alt_mem_Flash_flash_data+0xf4000fe0>

00002c40 <___vfprintf_internal_r>:
    2c40:	deffb604 	addi	sp,sp,-296
    2c44:	dfc04915 	stw	ra,292(sp)
    2c48:	ddc04715 	stw	r23,284(sp)
    2c4c:	dd804615 	stw	r22,280(sp)
    2c50:	282f883a 	mov	r23,r5
    2c54:	202d883a 	mov	r22,r4
    2c58:	d9802a15 	stw	r6,168(sp)
    2c5c:	d9c02d15 	stw	r7,180(sp)
    2c60:	df004815 	stw	fp,288(sp)
    2c64:	dd404515 	stw	r21,276(sp)
    2c68:	dd004415 	stw	r20,272(sp)
    2c6c:	dcc04315 	stw	r19,268(sp)
    2c70:	dc804215 	stw	r18,264(sp)
    2c74:	dc404115 	stw	r17,260(sp)
    2c78:	dc004015 	stw	r16,256(sp)
    2c7c:	00078280 	call	7828 <_localeconv_r>
    2c80:	10800017 	ldw	r2,0(r2)
    2c84:	1009883a 	mov	r4,r2
    2c88:	d8803515 	stw	r2,212(sp)
    2c8c:	0000c180 	call	c18 <strlen>
    2c90:	d8803815 	stw	r2,224(sp)
    2c94:	b0000226 	beq	r22,zero,2ca0 <___vfprintf_internal_r+0x60>
    2c98:	b0800e17 	ldw	r2,56(r22)
    2c9c:	1000e126 	beq	r2,zero,3024 <___vfprintf_internal_r+0x3e4>
    2ca0:	b880030b 	ldhu	r2,12(r23)
    2ca4:	10c8000c 	andi	r3,r2,8192
    2ca8:	1800061e 	bne	r3,zero,2cc4 <___vfprintf_internal_r+0x84>
    2cac:	b9001917 	ldw	r4,100(r23)
    2cb0:	00f7ffc4 	movi	r3,-8193
    2cb4:	10880014 	ori	r2,r2,8192
    2cb8:	20c6703a 	and	r3,r4,r3
    2cbc:	b880030d 	sth	r2,12(r23)
    2cc0:	b8c01915 	stw	r3,100(r23)
    2cc4:	10c0020c 	andi	r3,r2,8
    2cc8:	1800a726 	beq	r3,zero,2f68 <___vfprintf_internal_r+0x328>
    2ccc:	b8c00417 	ldw	r3,16(r23)
    2cd0:	1800a526 	beq	r3,zero,2f68 <___vfprintf_internal_r+0x328>
    2cd4:	1080068c 	andi	r2,r2,26
    2cd8:	00c00284 	movi	r3,10
    2cdc:	10c0aa26 	beq	r2,r3,2f88 <___vfprintf_internal_r+0x348>
    2ce0:	dac01e04 	addi	r11,sp,120
    2ce4:	db001dc4 	addi	r12,sp,119
    2ce8:	d8800404 	addi	r2,sp,16
    2cec:	050000b4 	movhi	r20,2
    2cf0:	dac02815 	stw	r11,160(sp)
    2cf4:	5b17c83a 	sub	r11,r11,r12
    2cf8:	a5318884 	addi	r20,r20,-14814
    2cfc:	db002915 	stw	r12,164(sp)
    2d00:	d8801e15 	stw	r2,120(sp)
    2d04:	d8002015 	stw	zero,128(sp)
    2d08:	d8001f15 	stw	zero,124(sp)
    2d0c:	d8003315 	stw	zero,204(sp)
    2d10:	d8003715 	stw	zero,220(sp)
    2d14:	d8003915 	stw	zero,228(sp)
    2d18:	1011883a 	mov	r8,r2
    2d1c:	d8003b15 	stw	zero,236(sp)
    2d20:	d8003a15 	stw	zero,232(sp)
    2d24:	d8002f15 	stw	zero,188(sp)
    2d28:	dac03c15 	stw	r11,240(sp)
    2d2c:	db002a17 	ldw	r12,168(sp)
    2d30:	60800007 	ldb	r2,0(r12)
    2d34:	1000be26 	beq	r2,zero,3030 <___vfprintf_internal_r+0x3f0>
    2d38:	00c00944 	movi	r3,37
    2d3c:	10c0bc26 	beq	r2,r3,3030 <___vfprintf_internal_r+0x3f0>
    2d40:	6021883a 	mov	r16,r12
    2d44:	00000106 	br	2d4c <___vfprintf_internal_r+0x10c>
    2d48:	10c08426 	beq	r2,r3,2f5c <___vfprintf_internal_r+0x31c>
    2d4c:	84000044 	addi	r16,r16,1
    2d50:	80800007 	ldb	r2,0(r16)
    2d54:	103ffc1e 	bne	r2,zero,2d48 <__alt_mem_Flash_flash_data+0xf4002d48>
    2d58:	dac02a17 	ldw	r11,168(sp)
    2d5c:	82e3c83a 	sub	r17,r16,r11
    2d60:	88000f26 	beq	r17,zero,2da0 <___vfprintf_internal_r+0x160>
    2d64:	d8c02017 	ldw	r3,128(sp)
    2d68:	d8801f17 	ldw	r2,124(sp)
    2d6c:	dac02a17 	ldw	r11,168(sp)
    2d70:	1c47883a 	add	r3,r3,r17
    2d74:	10800044 	addi	r2,r2,1
    2d78:	d8c02015 	stw	r3,128(sp)
    2d7c:	42c00015 	stw	r11,0(r8)
    2d80:	44400115 	stw	r17,4(r8)
    2d84:	d8801f15 	stw	r2,124(sp)
    2d88:	00c001c4 	movi	r3,7
    2d8c:	18809316 	blt	r3,r2,2fdc <___vfprintf_internal_r+0x39c>
    2d90:	42000204 	addi	r8,r8,8
    2d94:	db002f17 	ldw	r12,188(sp)
    2d98:	6459883a 	add	r12,r12,r17
    2d9c:	db002f15 	stw	r12,188(sp)
    2da0:	80800007 	ldb	r2,0(r16)
    2da4:	10009426 	beq	r2,zero,2ff8 <___vfprintf_internal_r+0x3b8>
    2da8:	80800044 	addi	r2,r16,1
    2dac:	84000047 	ldb	r16,1(r16)
    2db0:	d8002785 	stb	zero,158(sp)
    2db4:	000d883a 	mov	r6,zero
    2db8:	027fffc4 	movi	r9,-1
    2dbc:	d8002e15 	stw	zero,184(sp)
    2dc0:	0023883a 	mov	r17,zero
    2dc4:	01001604 	movi	r4,88
    2dc8:	01400244 	movi	r5,9
    2dcc:	02800a84 	movi	r10,42
    2dd0:	01c01b04 	movi	r7,108
    2dd4:	10c00044 	addi	r3,r2,1
    2dd8:	80bff804 	addi	r2,r16,-32
    2ddc:	2082cd36 	bltu	r4,r2,3914 <___vfprintf_internal_r+0xcd4>
    2de0:	100490ba 	slli	r2,r2,2
    2de4:	02c00034 	movhi	r11,0
    2de8:	5acb7e04 	addi	r11,r11,11768
    2dec:	12c5883a 	add	r2,r2,r11
    2df0:	10800017 	ldw	r2,0(r2)
    2df4:	1000683a 	jmp	r2
    2df8:	0000372c 	andhi	zero,zero,220
    2dfc:	00003914 	movui	zero,228
    2e00:	00003914 	movui	zero,228
    2e04:	0000387c 	xorhi	zero,zero,225
    2e08:	00003914 	movui	zero,228
    2e0c:	00003914 	movui	zero,228
    2e10:	00003914 	movui	zero,228
    2e14:	00003914 	movui	zero,228
    2e18:	00003914 	movui	zero,228
    2e1c:	00003914 	movui	zero,228
    2e20:	0000374c 	andi	zero,zero,221
    2e24:	00003778 	rdprs	zero,zero,221
    2e28:	00003914 	movui	zero,228
    2e2c:	00003038 	rdprs	zero,zero,192
    2e30:	00003048 	cmpgei	zero,zero,193
    2e34:	00003914 	movui	zero,228
    2e38:	00003088 	cmpgei	zero,zero,194
    2e3c:	00003098 	cmpnei	zero,zero,194
    2e40:	00003098 	cmpnei	zero,zero,194
    2e44:	00003098 	cmpnei	zero,zero,194
    2e48:	00003098 	cmpnei	zero,zero,194
    2e4c:	00003098 	cmpnei	zero,zero,194
    2e50:	00003098 	cmpnei	zero,zero,194
    2e54:	00003098 	cmpnei	zero,zero,194
    2e58:	00003098 	cmpnei	zero,zero,194
    2e5c:	00003098 	cmpnei	zero,zero,194
    2e60:	00003914 	movui	zero,228
    2e64:	00003914 	movui	zero,228
    2e68:	00003914 	movui	zero,228
    2e6c:	00003914 	movui	zero,228
    2e70:	00003914 	movui	zero,228
    2e74:	00003914 	movui	zero,228
    2e78:	00003914 	movui	zero,228
    2e7c:	00003914 	movui	zero,228
    2e80:	00003914 	movui	zero,228
    2e84:	00003914 	movui	zero,228
    2e88:	000030cc 	andi	zero,zero,195
    2e8c:	0000353c 	xorhi	zero,zero,212
    2e90:	00003914 	movui	zero,228
    2e94:	0000353c 	xorhi	zero,zero,212
    2e98:	00003914 	movui	zero,228
    2e9c:	00003914 	movui	zero,228
    2ea0:	00003914 	movui	zero,228
    2ea4:	00003914 	movui	zero,228
    2ea8:	00003628 	cmpgeui	zero,zero,216
    2eac:	00003914 	movui	zero,228
    2eb0:	00003914 	movui	zero,228
    2eb4:	000034d0 	cmplti	zero,zero,211
    2eb8:	00003914 	movui	zero,228
    2ebc:	00003914 	movui	zero,228
    2ec0:	00003914 	movui	zero,228
    2ec4:	00003914 	movui	zero,228
    2ec8:	00003914 	movui	zero,228
    2ecc:	0000350c 	andi	zero,zero,212
    2ed0:	00003914 	movui	zero,228
    2ed4:	00003914 	movui	zero,228
    2ed8:	000036d0 	cmplti	zero,zero,219
    2edc:	00003914 	movui	zero,228
    2ee0:	00003914 	movui	zero,228
    2ee4:	00003914 	movui	zero,228
    2ee8:	00003914 	movui	zero,228
    2eec:	00003914 	movui	zero,228
    2ef0:	00003914 	movui	zero,228
    2ef4:	00003914 	movui	zero,228
    2ef8:	00003914 	movui	zero,228
    2efc:	00003914 	movui	zero,228
    2f00:	00003914 	movui	zero,228
    2f04:	00003788 	cmpgei	zero,zero,222
    2f08:	00003638 	rdprs	zero,zero,216
    2f0c:	0000353c 	xorhi	zero,zero,212
    2f10:	0000353c 	xorhi	zero,zero,212
    2f14:	0000353c 	xorhi	zero,zero,212
    2f18:	00003678 	rdprs	zero,zero,217
    2f1c:	00003638 	rdprs	zero,zero,216
    2f20:	00003914 	movui	zero,228
    2f24:	00003914 	movui	zero,228
    2f28:	00003688 	cmpgei	zero,zero,218
    2f2c:	00003914 	movui	zero,228
    2f30:	0000369c 	xori	zero,zero,218
    2f34:	000038d8 	cmpnei	zero,zero,227
    2f38:	000035e0 	cmpeqi	zero,zero,215
    2f3c:	0000388c 	andi	zero,zero,226
    2f40:	00003914 	movui	zero,228
    2f44:	000037c8 	cmpgei	zero,zero,223
    2f48:	00003914 	movui	zero,228
    2f4c:	0000389c 	xori	zero,zero,226
    2f50:	00003914 	movui	zero,228
    2f54:	00003914 	movui	zero,228
    2f58:	0000383c 	xorhi	zero,zero,224
    2f5c:	db002a17 	ldw	r12,168(sp)
    2f60:	8323c83a 	sub	r17,r16,r12
    2f64:	003f7e06 	br	2d60 <__alt_mem_Flash_flash_data+0xf4002d60>
    2f68:	b009883a 	mov	r4,r22
    2f6c:	b80b883a 	mov	r5,r23
    2f70:	0004c700 	call	4c70 <__swsetup_r>
    2f74:	10000c1e 	bne	r2,zero,2fa8 <___vfprintf_internal_r+0x368>
    2f78:	b880030b 	ldhu	r2,12(r23)
    2f7c:	00c00284 	movi	r3,10
    2f80:	1080068c 	andi	r2,r2,26
    2f84:	10ff561e 	bne	r2,r3,2ce0 <__alt_mem_Flash_flash_data+0xf4002ce0>
    2f88:	b880038f 	ldh	r2,14(r23)
    2f8c:	103f5416 	blt	r2,zero,2ce0 <__alt_mem_Flash_flash_data+0xf4002ce0>
    2f90:	d9802a17 	ldw	r6,168(sp)
    2f94:	d9c02d17 	ldw	r7,180(sp)
    2f98:	b009883a 	mov	r4,r22
    2f9c:	b80b883a 	mov	r5,r23
    2fa0:	0004bb40 	call	4bb4 <__sbprintf>
    2fa4:	00000106 	br	2fac <___vfprintf_internal_r+0x36c>
    2fa8:	00bfffc4 	movi	r2,-1
    2fac:	dfc04917 	ldw	ra,292(sp)
    2fb0:	df004817 	ldw	fp,288(sp)
    2fb4:	ddc04717 	ldw	r23,284(sp)
    2fb8:	dd804617 	ldw	r22,280(sp)
    2fbc:	dd404517 	ldw	r21,276(sp)
    2fc0:	dd004417 	ldw	r20,272(sp)
    2fc4:	dcc04317 	ldw	r19,268(sp)
    2fc8:	dc804217 	ldw	r18,264(sp)
    2fcc:	dc404117 	ldw	r17,260(sp)
    2fd0:	dc004017 	ldw	r16,256(sp)
    2fd4:	dec04a04 	addi	sp,sp,296
    2fd8:	f800283a 	ret
    2fdc:	b009883a 	mov	r4,r22
    2fe0:	b80b883a 	mov	r5,r23
    2fe4:	d9801e04 	addi	r6,sp,120
    2fe8:	000af440 	call	af44 <__sprint_r>
    2fec:	1000081e 	bne	r2,zero,3010 <___vfprintf_internal_r+0x3d0>
    2ff0:	da000404 	addi	r8,sp,16
    2ff4:	003f6706 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
    2ff8:	d8802017 	ldw	r2,128(sp)
    2ffc:	10000426 	beq	r2,zero,3010 <___vfprintf_internal_r+0x3d0>
    3000:	b009883a 	mov	r4,r22
    3004:	b80b883a 	mov	r5,r23
    3008:	d9801e04 	addi	r6,sp,120
    300c:	000af440 	call	af44 <__sprint_r>
    3010:	b880030b 	ldhu	r2,12(r23)
    3014:	1080100c 	andi	r2,r2,64
    3018:	103fe31e 	bne	r2,zero,2fa8 <__alt_mem_Flash_flash_data+0xf4002fa8>
    301c:	d8802f17 	ldw	r2,188(sp)
    3020:	003fe206 	br	2fac <__alt_mem_Flash_flash_data+0xf4002fac>
    3024:	b009883a 	mov	r4,r22
    3028:	0006cd00 	call	6cd0 <__sinit>
    302c:	003f1c06 	br	2ca0 <__alt_mem_Flash_flash_data+0xf4002ca0>
    3030:	dc002a17 	ldw	r16,168(sp)
    3034:	003f5a06 	br	2da0 <__alt_mem_Flash_flash_data+0xf4002da0>
    3038:	1805883a 	mov	r2,r3
    303c:	8c400114 	ori	r17,r17,4
    3040:	1c000007 	ldb	r16,0(r3)
    3044:	003f6306 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3048:	1c000007 	ldb	r16,0(r3)
    304c:	18800044 	addi	r2,r3,1
    3050:	8286ad26 	beq	r16,r10,4b08 <___vfprintf_internal_r+0x1ec8>
    3054:	82fff404 	addi	r11,r16,-48
    3058:	1007883a 	mov	r3,r2
    305c:	0013883a 	mov	r9,zero
    3060:	2aff5d36 	bltu	r5,r11,2dd8 <__alt_mem_Flash_flash_data+0xf4002dd8>
    3064:	1c000007 	ldb	r16,0(r3)
    3068:	4a4002a4 	muli	r9,r9,10
    306c:	18c00044 	addi	r3,r3,1
    3070:	5a53883a 	add	r9,r11,r9
    3074:	82fff404 	addi	r11,r16,-48
    3078:	2afffa2e 	bgeu	r5,r11,3064 <__alt_mem_Flash_flash_data+0xf4003064>
    307c:	483f560e 	bge	r9,zero,2dd8 <__alt_mem_Flash_flash_data+0xf4002dd8>
    3080:	027fffc4 	movi	r9,-1
    3084:	003f5406 	br	2dd8 <__alt_mem_Flash_flash_data+0xf4002dd8>
    3088:	8c402014 	ori	r17,r17,128
    308c:	1805883a 	mov	r2,r3
    3090:	1c000007 	ldb	r16,0(r3)
    3094:	003f4f06 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3098:	1805883a 	mov	r2,r3
    309c:	d8002e15 	stw	zero,184(sp)
    30a0:	82fff404 	addi	r11,r16,-48
    30a4:	0019883a 	mov	r12,zero
    30a8:	14000007 	ldb	r16,0(r2)
    30ac:	630002a4 	muli	r12,r12,10
    30b0:	18c00044 	addi	r3,r3,1
    30b4:	1805883a 	mov	r2,r3
    30b8:	62d9883a 	add	r12,r12,r11
    30bc:	82fff404 	addi	r11,r16,-48
    30c0:	2afff92e 	bgeu	r5,r11,30a8 <__alt_mem_Flash_flash_data+0xf40030a8>
    30c4:	db002e15 	stw	r12,184(sp)
    30c8:	003f4306 	br	2dd8 <__alt_mem_Flash_flash_data+0xf4002dd8>
    30cc:	8c400414 	ori	r17,r17,16
    30d0:	d8c02a15 	stw	r3,168(sp)
    30d4:	d9802785 	stb	r6,158(sp)
    30d8:	8880080c 	andi	r2,r17,32
    30dc:	d8c02d17 	ldw	r3,180(sp)
    30e0:	10015a26 	beq	r2,zero,364c <___vfprintf_internal_r+0xa0c>
    30e4:	db002d17 	ldw	r12,180(sp)
    30e8:	18800117 	ldw	r2,4(r3)
    30ec:	1cc00017 	ldw	r19,0(r3)
    30f0:	63000204 	addi	r12,r12,8
    30f4:	db002d15 	stw	r12,180(sp)
    30f8:	1039883a 	mov	fp,r2
    30fc:	10044516 	blt	r2,zero,4214 <___vfprintf_internal_r+0x15d4>
    3100:	dd402783 	ldbu	r21,158(sp)
    3104:	da403215 	stw	r9,200(sp)
    3108:	00800044 	movi	r2,1
    310c:	9f06b03a 	or	r3,r19,fp
    3110:	48000216 	blt	r9,zero,311c <___vfprintf_internal_r+0x4dc>
    3114:	013fdfc4 	movi	r4,-129
    3118:	8922703a 	and	r17,r17,r4
    311c:	1802071e 	bne	r3,zero,393c <___vfprintf_internal_r+0xcfc>
    3120:	4802fa26 	beq	r9,zero,3d0c <___vfprintf_internal_r+0x10cc>
    3124:	10803fcc 	andi	r2,r2,255
    3128:	00c00044 	movi	r3,1
    312c:	10c22926 	beq	r2,r3,39d4 <___vfprintf_internal_r+0xd94>
    3130:	00c00084 	movi	r3,2
    3134:	10c31726 	beq	r2,r3,3d94 <___vfprintf_internal_r+0x1154>
    3138:	d8c01e04 	addi	r3,sp,120
    313c:	9808d0fa 	srli	r4,r19,3
    3140:	e00a977a 	slli	r5,fp,29
    3144:	e038d0fa 	srli	fp,fp,3
    3148:	9cc001cc 	andi	r19,r19,7
    314c:	98800c04 	addi	r2,r19,48
    3150:	18ffffc4 	addi	r3,r3,-1
    3154:	2926b03a 	or	r19,r5,r4
    3158:	18800005 	stb	r2,0(r3)
    315c:	9f08b03a 	or	r4,r19,fp
    3160:	203ff61e 	bne	r4,zero,313c <__alt_mem_Flash_flash_data+0xf400313c>
    3164:	8900004c 	andi	r4,r17,1
    3168:	d8c03115 	stw	r3,196(sp)
    316c:	2003931e 	bne	r4,zero,3fbc <___vfprintf_internal_r+0x137c>
    3170:	dac02817 	ldw	r11,160(sp)
    3174:	58e5c83a 	sub	r18,r11,r3
    3178:	9005883a 	mov	r2,r18
    317c:	9240010e 	bge	r18,r9,3184 <___vfprintf_internal_r+0x544>
    3180:	4805883a 	mov	r2,r9
    3184:	d8802b15 	stw	r2,172(sp)
    3188:	d8003415 	stw	zero,208(sp)
    318c:	a8803fcc 	andi	r2,r21,255
    3190:	1080201c 	xori	r2,r2,128
    3194:	10bfe004 	addi	r2,r2,-128
    3198:	10000326 	beq	r2,zero,31a8 <___vfprintf_internal_r+0x568>
    319c:	db002b17 	ldw	r12,172(sp)
    31a0:	63000044 	addi	r12,r12,1
    31a4:	db002b15 	stw	r12,172(sp)
    31a8:	88c0008c 	andi	r3,r17,2
    31ac:	d8c02c15 	stw	r3,176(sp)
    31b0:	18000326 	beq	r3,zero,31c0 <___vfprintf_internal_r+0x580>
    31b4:	dac02b17 	ldw	r11,172(sp)
    31b8:	5ac00084 	addi	r11,r11,2
    31bc:	dac02b15 	stw	r11,172(sp)
    31c0:	8b00210c 	andi	r12,r17,132
    31c4:	db003015 	stw	r12,192(sp)
    31c8:	6001da1e 	bne	r12,zero,3934 <___vfprintf_internal_r+0xcf4>
    31cc:	dac02e17 	ldw	r11,184(sp)
    31d0:	db002b17 	ldw	r12,172(sp)
    31d4:	5b39c83a 	sub	fp,r11,r12
    31d8:	0701d60e 	bge	zero,fp,3934 <___vfprintf_internal_r+0xcf4>
    31dc:	02400404 	movi	r9,16
    31e0:	d8c02017 	ldw	r3,128(sp)
    31e4:	d8801f17 	ldw	r2,124(sp)
    31e8:	4f053c0e 	bge	r9,fp,46dc <___vfprintf_internal_r+0x1a9c>
    31ec:	014000b4 	movhi	r5,2
    31f0:	29718c84 	addi	r5,r5,-14798
    31f4:	d9403615 	stw	r5,216(sp)
    31f8:	482b883a 	mov	r21,r9
    31fc:	04c001c4 	movi	r19,7
    3200:	00000306 	br	3210 <___vfprintf_internal_r+0x5d0>
    3204:	e73ffc04 	addi	fp,fp,-16
    3208:	42000204 	addi	r8,r8,8
    320c:	af00130e 	bge	r21,fp,325c <___vfprintf_internal_r+0x61c>
    3210:	02c000b4 	movhi	r11,2
    3214:	18c00404 	addi	r3,r3,16
    3218:	10800044 	addi	r2,r2,1
    321c:	5af18c84 	addi	r11,r11,-14798
    3220:	42c00015 	stw	r11,0(r8)
    3224:	45400115 	stw	r21,4(r8)
    3228:	d8c02015 	stw	r3,128(sp)
    322c:	d8801f15 	stw	r2,124(sp)
    3230:	98bff40e 	bge	r19,r2,3204 <__alt_mem_Flash_flash_data+0xf4003204>
    3234:	b009883a 	mov	r4,r22
    3238:	b80b883a 	mov	r5,r23
    323c:	d9801e04 	addi	r6,sp,120
    3240:	000af440 	call	af44 <__sprint_r>
    3244:	103f721e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3248:	e73ffc04 	addi	fp,fp,-16
    324c:	d8c02017 	ldw	r3,128(sp)
    3250:	d8801f17 	ldw	r2,124(sp)
    3254:	da000404 	addi	r8,sp,16
    3258:	af3fed16 	blt	r21,fp,3210 <__alt_mem_Flash_flash_data+0xf4003210>
    325c:	db003617 	ldw	r12,216(sp)
    3260:	e0c7883a 	add	r3,fp,r3
    3264:	10800044 	addi	r2,r2,1
    3268:	43000015 	stw	r12,0(r8)
    326c:	47000115 	stw	fp,4(r8)
    3270:	d8c02015 	stw	r3,128(sp)
    3274:	d8801f15 	stw	r2,124(sp)
    3278:	010001c4 	movi	r4,7
    327c:	20830e16 	blt	r4,r2,3eb8 <___vfprintf_internal_r+0x1278>
    3280:	d8802787 	ldb	r2,158(sp)
    3284:	42000204 	addi	r8,r8,8
    3288:	10000c26 	beq	r2,zero,32bc <___vfprintf_internal_r+0x67c>
    328c:	d8801f17 	ldw	r2,124(sp)
    3290:	d9002784 	addi	r4,sp,158
    3294:	18c00044 	addi	r3,r3,1
    3298:	10800044 	addi	r2,r2,1
    329c:	41000015 	stw	r4,0(r8)
    32a0:	01000044 	movi	r4,1
    32a4:	41000115 	stw	r4,4(r8)
    32a8:	d8c02015 	stw	r3,128(sp)
    32ac:	d8801f15 	stw	r2,124(sp)
    32b0:	010001c4 	movi	r4,7
    32b4:	2082a716 	blt	r4,r2,3d54 <___vfprintf_internal_r+0x1114>
    32b8:	42000204 	addi	r8,r8,8
    32bc:	dac02c17 	ldw	r11,176(sp)
    32c0:	58000c26 	beq	r11,zero,32f4 <___vfprintf_internal_r+0x6b4>
    32c4:	d8801f17 	ldw	r2,124(sp)
    32c8:	d9002704 	addi	r4,sp,156
    32cc:	18c00084 	addi	r3,r3,2
    32d0:	10800044 	addi	r2,r2,1
    32d4:	41000015 	stw	r4,0(r8)
    32d8:	01000084 	movi	r4,2
    32dc:	41000115 	stw	r4,4(r8)
    32e0:	d8c02015 	stw	r3,128(sp)
    32e4:	d8801f15 	stw	r2,124(sp)
    32e8:	010001c4 	movi	r4,7
    32ec:	2082a116 	blt	r4,r2,3d74 <___vfprintf_internal_r+0x1134>
    32f0:	42000204 	addi	r8,r8,8
    32f4:	db003017 	ldw	r12,192(sp)
    32f8:	00802004 	movi	r2,128
    32fc:	60820326 	beq	r12,r2,3b0c <___vfprintf_internal_r+0xecc>
    3300:	db003217 	ldw	r12,200(sp)
    3304:	64abc83a 	sub	r21,r12,r18
    3308:	0540260e 	bge	zero,r21,33a4 <___vfprintf_internal_r+0x764>
    330c:	07000404 	movi	fp,16
    3310:	d8801f17 	ldw	r2,124(sp)
    3314:	e544570e 	bge	fp,r21,4474 <___vfprintf_internal_r+0x1834>
    3318:	014000b4 	movhi	r5,2
    331c:	29718884 	addi	r5,r5,-14814
    3320:	d9402c15 	stw	r5,176(sp)
    3324:	04c001c4 	movi	r19,7
    3328:	00000306 	br	3338 <___vfprintf_internal_r+0x6f8>
    332c:	ad7ffc04 	addi	r21,r21,-16
    3330:	42000204 	addi	r8,r8,8
    3334:	e540110e 	bge	fp,r21,337c <___vfprintf_internal_r+0x73c>
    3338:	18c00404 	addi	r3,r3,16
    333c:	10800044 	addi	r2,r2,1
    3340:	45000015 	stw	r20,0(r8)
    3344:	47000115 	stw	fp,4(r8)
    3348:	d8c02015 	stw	r3,128(sp)
    334c:	d8801f15 	stw	r2,124(sp)
    3350:	98bff60e 	bge	r19,r2,332c <__alt_mem_Flash_flash_data+0xf400332c>
    3354:	b009883a 	mov	r4,r22
    3358:	b80b883a 	mov	r5,r23
    335c:	d9801e04 	addi	r6,sp,120
    3360:	000af440 	call	af44 <__sprint_r>
    3364:	103f2a1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3368:	ad7ffc04 	addi	r21,r21,-16
    336c:	d8c02017 	ldw	r3,128(sp)
    3370:	d8801f17 	ldw	r2,124(sp)
    3374:	da000404 	addi	r8,sp,16
    3378:	e57fef16 	blt	fp,r21,3338 <__alt_mem_Flash_flash_data+0xf4003338>
    337c:	dac02c17 	ldw	r11,176(sp)
    3380:	1d47883a 	add	r3,r3,r21
    3384:	10800044 	addi	r2,r2,1
    3388:	42c00015 	stw	r11,0(r8)
    338c:	45400115 	stw	r21,4(r8)
    3390:	d8c02015 	stw	r3,128(sp)
    3394:	d8801f15 	stw	r2,124(sp)
    3398:	010001c4 	movi	r4,7
    339c:	20826516 	blt	r4,r2,3d34 <___vfprintf_internal_r+0x10f4>
    33a0:	42000204 	addi	r8,r8,8
    33a4:	8880400c 	andi	r2,r17,256
    33a8:	1001901e 	bne	r2,zero,39ec <___vfprintf_internal_r+0xdac>
    33ac:	d8801f17 	ldw	r2,124(sp)
    33b0:	db003117 	ldw	r12,196(sp)
    33b4:	1c87883a 	add	r3,r3,r18
    33b8:	10800044 	addi	r2,r2,1
    33bc:	43000015 	stw	r12,0(r8)
    33c0:	44800115 	stw	r18,4(r8)
    33c4:	d8c02015 	stw	r3,128(sp)
    33c8:	d8801f15 	stw	r2,124(sp)
    33cc:	010001c4 	movi	r4,7
    33d0:	20824016 	blt	r4,r2,3cd4 <___vfprintf_internal_r+0x1094>
    33d4:	42000204 	addi	r8,r8,8
    33d8:	8c40010c 	andi	r17,r17,4
    33dc:	88003126 	beq	r17,zero,34a4 <___vfprintf_internal_r+0x864>
    33e0:	db002e17 	ldw	r12,184(sp)
    33e4:	dac02b17 	ldw	r11,172(sp)
    33e8:	62e1c83a 	sub	r16,r12,r11
    33ec:	04002d0e 	bge	zero,r16,34a4 <___vfprintf_internal_r+0x864>
    33f0:	04400404 	movi	r17,16
    33f4:	d8801f17 	ldw	r2,124(sp)
    33f8:	8c05150e 	bge	r17,r16,4850 <___vfprintf_internal_r+0x1c10>
    33fc:	010000b4 	movhi	r4,2
    3400:	21318c84 	addi	r4,r4,-14798
    3404:	d9003615 	stw	r4,216(sp)
    3408:	048001c4 	movi	r18,7
    340c:	00000306 	br	341c <___vfprintf_internal_r+0x7dc>
    3410:	843ffc04 	addi	r16,r16,-16
    3414:	42000204 	addi	r8,r8,8
    3418:	8c00130e 	bge	r17,r16,3468 <___vfprintf_internal_r+0x828>
    341c:	014000b4 	movhi	r5,2
    3420:	18c00404 	addi	r3,r3,16
    3424:	10800044 	addi	r2,r2,1
    3428:	29718c84 	addi	r5,r5,-14798
    342c:	41400015 	stw	r5,0(r8)
    3430:	44400115 	stw	r17,4(r8)
    3434:	d8c02015 	stw	r3,128(sp)
    3438:	d8801f15 	stw	r2,124(sp)
    343c:	90bff40e 	bge	r18,r2,3410 <__alt_mem_Flash_flash_data+0xf4003410>
    3440:	b009883a 	mov	r4,r22
    3444:	b80b883a 	mov	r5,r23
    3448:	d9801e04 	addi	r6,sp,120
    344c:	000af440 	call	af44 <__sprint_r>
    3450:	103eef1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3454:	843ffc04 	addi	r16,r16,-16
    3458:	d8c02017 	ldw	r3,128(sp)
    345c:	d8801f17 	ldw	r2,124(sp)
    3460:	da000404 	addi	r8,sp,16
    3464:	8c3fed16 	blt	r17,r16,341c <__alt_mem_Flash_flash_data+0xf400341c>
    3468:	dac03617 	ldw	r11,216(sp)
    346c:	1c07883a 	add	r3,r3,r16
    3470:	10800044 	addi	r2,r2,1
    3474:	42c00015 	stw	r11,0(r8)
    3478:	44000115 	stw	r16,4(r8)
    347c:	d8c02015 	stw	r3,128(sp)
    3480:	d8801f15 	stw	r2,124(sp)
    3484:	010001c4 	movi	r4,7
    3488:	2080060e 	bge	r4,r2,34a4 <___vfprintf_internal_r+0x864>
    348c:	b009883a 	mov	r4,r22
    3490:	b80b883a 	mov	r5,r23
    3494:	d9801e04 	addi	r6,sp,120
    3498:	000af440 	call	af44 <__sprint_r>
    349c:	103edc1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    34a0:	d8c02017 	ldw	r3,128(sp)
    34a4:	d8802b17 	ldw	r2,172(sp)
    34a8:	db002e17 	ldw	r12,184(sp)
    34ac:	1300010e 	bge	r2,r12,34b4 <___vfprintf_internal_r+0x874>
    34b0:	6005883a 	mov	r2,r12
    34b4:	dac02f17 	ldw	r11,188(sp)
    34b8:	5897883a 	add	r11,r11,r2
    34bc:	dac02f15 	stw	r11,188(sp)
    34c0:	18020c1e 	bne	r3,zero,3cf4 <___vfprintf_internal_r+0x10b4>
    34c4:	d8001f15 	stw	zero,124(sp)
    34c8:	da000404 	addi	r8,sp,16
    34cc:	003e1706 	br	2d2c <__alt_mem_Flash_flash_data+0xf4002d2c>
    34d0:	8c400414 	ori	r17,r17,16
    34d4:	d8c02a15 	stw	r3,168(sp)
    34d8:	8880080c 	andi	r2,r17,32
    34dc:	10010126 	beq	r2,zero,38e4 <___vfprintf_internal_r+0xca4>
    34e0:	db002d17 	ldw	r12,180(sp)
    34e4:	0005883a 	mov	r2,zero
    34e8:	64c00017 	ldw	r19,0(r12)
    34ec:	67000117 	ldw	fp,4(r12)
    34f0:	63000204 	addi	r12,r12,8
    34f4:	db002d15 	stw	r12,180(sp)
    34f8:	9f06b03a 	or	r3,r19,fp
    34fc:	d8002785 	stb	zero,158(sp)
    3500:	da403215 	stw	r9,200(sp)
    3504:	002b883a 	mov	r21,zero
    3508:	003f0106 	br	3110 <__alt_mem_Flash_flash_data+0xf4003110>
    350c:	8c400414 	ori	r17,r17,16
    3510:	d8c02a15 	stw	r3,168(sp)
    3514:	8880080c 	andi	r2,r17,32
    3518:	1000e326 	beq	r2,zero,38a8 <___vfprintf_internal_r+0xc68>
    351c:	dac02d17 	ldw	r11,180(sp)
    3520:	00800044 	movi	r2,1
    3524:	5cc00017 	ldw	r19,0(r11)
    3528:	5f000117 	ldw	fp,4(r11)
    352c:	5ac00204 	addi	r11,r11,8
    3530:	dac02d15 	stw	r11,180(sp)
    3534:	9f06b03a 	or	r3,r19,fp
    3538:	003ff006 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    353c:	db002d17 	ldw	r12,180(sp)
    3540:	dac02d17 	ldw	r11,180(sp)
    3544:	d8c02a15 	stw	r3,168(sp)
    3548:	63000017 	ldw	r12,0(r12)
    354c:	5ac00117 	ldw	r11,4(r11)
    3550:	d9802785 	stb	r6,158(sp)
    3554:	6009883a 	mov	r4,r12
    3558:	580b883a 	mov	r5,r11
    355c:	db003715 	stw	r12,220(sp)
    3560:	da003f15 	stw	r8,252(sp)
    3564:	da403e15 	stw	r9,248(sp)
    3568:	dac03915 	stw	r11,228(sp)
    356c:	0009a400 	call	9a40 <__fpclassifyd>
    3570:	db002d17 	ldw	r12,180(sp)
    3574:	04800044 	movi	r18,1
    3578:	da003f17 	ldw	r8,252(sp)
    357c:	64c00204 	addi	r19,r12,8
    3580:	da403e17 	ldw	r9,248(sp)
    3584:	d9003717 	ldw	r4,220(sp)
    3588:	d9403917 	ldw	r5,228(sp)
    358c:	14832b1e 	bne	r2,r18,423c <___vfprintf_internal_r+0x15fc>
    3590:	000d883a 	mov	r6,zero
    3594:	000f883a 	mov	r7,zero
    3598:	000eb4c0 	call	eb4c <__ledf2>
    359c:	da003f17 	ldw	r8,252(sp)
    35a0:	1004b716 	blt	r2,zero,4880 <___vfprintf_internal_r+0x1c40>
    35a4:	dd402783 	ldbu	r21,158(sp)
    35a8:	008011c4 	movi	r2,71
    35ac:	14040e0e 	bge	r2,r16,45e8 <___vfprintf_internal_r+0x19a8>
    35b0:	00c000b4 	movhi	r3,2
    35b4:	18f17104 	addi	r3,r3,-14908
    35b8:	d8c03115 	stw	r3,196(sp)
    35bc:	02c000c4 	movi	r11,3
    35c0:	00bfdfc4 	movi	r2,-129
    35c4:	dac02b15 	stw	r11,172(sp)
    35c8:	88a2703a 	and	r17,r17,r2
    35cc:	dcc02d15 	stw	r19,180(sp)
    35d0:	5825883a 	mov	r18,r11
    35d4:	d8003215 	stw	zero,200(sp)
    35d8:	d8003415 	stw	zero,208(sp)
    35dc:	003eeb06 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    35e0:	db002d17 	ldw	r12,180(sp)
    35e4:	00800c04 	movi	r2,48
    35e8:	d8802705 	stb	r2,156(sp)
    35ec:	64c00017 	ldw	r19,0(r12)
    35f0:	00801e04 	movi	r2,120
    35f4:	d8802745 	stb	r2,157(sp)
    35f8:	008000b4 	movhi	r2,2
    35fc:	10b17904 	addi	r2,r2,-14876
    3600:	63000104 	addi	r12,r12,4
    3604:	d8c02a15 	stw	r3,168(sp)
    3608:	d8803b15 	stw	r2,236(sp)
    360c:	0039883a 	mov	fp,zero
    3610:	8c400094 	ori	r17,r17,2
    3614:	db002d15 	stw	r12,180(sp)
    3618:	00800084 	movi	r2,2
    361c:	04001e04 	movi	r16,120
    3620:	9807883a 	mov	r3,r19
    3624:	003fb506 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3628:	8c400214 	ori	r17,r17,8
    362c:	1805883a 	mov	r2,r3
    3630:	1c000007 	ldb	r16,0(r3)
    3634:	003de706 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3638:	d8c02a15 	stw	r3,168(sp)
    363c:	d9802785 	stb	r6,158(sp)
    3640:	8880080c 	andi	r2,r17,32
    3644:	d8c02d17 	ldw	r3,180(sp)
    3648:	103ea61e 	bne	r2,zero,30e4 <__alt_mem_Flash_flash_data+0xf40030e4>
    364c:	8880040c 	andi	r2,r17,16
    3650:	1002221e 	bne	r2,zero,3edc <___vfprintf_internal_r+0x129c>
    3654:	8880100c 	andi	r2,r17,64
    3658:	10022026 	beq	r2,zero,3edc <___vfprintf_internal_r+0x129c>
    365c:	1cc0000f 	ldh	r19,0(r3)
    3660:	db002d17 	ldw	r12,180(sp)
    3664:	9839d7fa 	srai	fp,r19,31
    3668:	63000104 	addi	r12,r12,4
    366c:	db002d15 	stw	r12,180(sp)
    3670:	e005883a 	mov	r2,fp
    3674:	003ea106 	br	30fc <__alt_mem_Flash_flash_data+0xf40030fc>
    3678:	8c401014 	ori	r17,r17,64
    367c:	1805883a 	mov	r2,r3
    3680:	1c000007 	ldb	r16,0(r3)
    3684:	003dd306 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3688:	1c000007 	ldb	r16,0(r3)
    368c:	81c3e926 	beq	r16,r7,4634 <___vfprintf_internal_r+0x19f4>
    3690:	8c400414 	ori	r17,r17,16
    3694:	1805883a 	mov	r2,r3
    3698:	003dce06 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    369c:	d8c02a15 	stw	r3,168(sp)
    36a0:	d9802785 	stb	r6,158(sp)
    36a4:	8880080c 	andi	r2,r17,32
    36a8:	10034726 	beq	r2,zero,43c8 <___vfprintf_internal_r+0x1788>
    36ac:	db002d17 	ldw	r12,180(sp)
    36b0:	dac02f17 	ldw	r11,188(sp)
    36b4:	60800017 	ldw	r2,0(r12)
    36b8:	5807d7fa 	srai	r3,r11,31
    36bc:	63000104 	addi	r12,r12,4
    36c0:	db002d15 	stw	r12,180(sp)
    36c4:	12c00015 	stw	r11,0(r2)
    36c8:	10c00115 	stw	r3,4(r2)
    36cc:	003d9706 	br	2d2c <__alt_mem_Flash_flash_data+0xf4002d2c>
    36d0:	030000b4 	movhi	r12,2
    36d4:	63317404 	addi	r12,r12,-14896
    36d8:	d8c02a15 	stw	r3,168(sp)
    36dc:	d9802785 	stb	r6,158(sp)
    36e0:	db003b15 	stw	r12,236(sp)
    36e4:	88c0080c 	andi	r3,r17,32
    36e8:	d8802d17 	ldw	r2,180(sp)
    36ec:	18005b26 	beq	r3,zero,385c <___vfprintf_internal_r+0xc1c>
    36f0:	dac02d17 	ldw	r11,180(sp)
    36f4:	14c00017 	ldw	r19,0(r2)
    36f8:	17000117 	ldw	fp,4(r2)
    36fc:	5ac00204 	addi	r11,r11,8
    3700:	dac02d15 	stw	r11,180(sp)
    3704:	8880004c 	andi	r2,r17,1
    3708:	10022926 	beq	r2,zero,3fb0 <___vfprintf_internal_r+0x1370>
    370c:	9f06b03a 	or	r3,r19,fp
    3710:	18032b26 	beq	r3,zero,43c0 <___vfprintf_internal_r+0x1780>
    3714:	00800c04 	movi	r2,48
    3718:	d8802705 	stb	r2,156(sp)
    371c:	dc002745 	stb	r16,157(sp)
    3720:	8c400094 	ori	r17,r17,2
    3724:	00800084 	movi	r2,2
    3728:	003f7406 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    372c:	30803fcc 	andi	r2,r6,255
    3730:	1080201c 	xori	r2,r2,128
    3734:	10bfe004 	addi	r2,r2,-128
    3738:	1003351e 	bne	r2,zero,4410 <___vfprintf_internal_r+0x17d0>
    373c:	1805883a 	mov	r2,r3
    3740:	01800804 	movi	r6,32
    3744:	1c000007 	ldb	r16,0(r3)
    3748:	003da206 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    374c:	dac02d17 	ldw	r11,180(sp)
    3750:	db002d17 	ldw	r12,180(sp)
    3754:	5ac00017 	ldw	r11,0(r11)
    3758:	dac02e15 	stw	r11,184(sp)
    375c:	62c00104 	addi	r11,r12,4
    3760:	db002e17 	ldw	r12,184(sp)
    3764:	6003ad16 	blt	r12,zero,461c <___vfprintf_internal_r+0x19dc>
    3768:	dac02d15 	stw	r11,180(sp)
    376c:	1805883a 	mov	r2,r3
    3770:	1c000007 	ldb	r16,0(r3)
    3774:	003d9706 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3778:	1805883a 	mov	r2,r3
    377c:	01800ac4 	movi	r6,43
    3780:	1c000007 	ldb	r16,0(r3)
    3784:	003d9306 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    3788:	db002d17 	ldw	r12,180(sp)
    378c:	d8c02a15 	stw	r3,168(sp)
    3790:	00c00044 	movi	r3,1
    3794:	60800017 	ldw	r2,0(r12)
    3798:	63000104 	addi	r12,r12,4
    379c:	d8c02b15 	stw	r3,172(sp)
    37a0:	d8002785 	stb	zero,158(sp)
    37a4:	d8801405 	stb	r2,80(sp)
    37a8:	db002d15 	stw	r12,180(sp)
    37ac:	dac01404 	addi	r11,sp,80
    37b0:	1825883a 	mov	r18,r3
    37b4:	d8003215 	stw	zero,200(sp)
    37b8:	d8003415 	stw	zero,208(sp)
    37bc:	dac03115 	stw	r11,196(sp)
    37c0:	0005883a 	mov	r2,zero
    37c4:	003e7806 	br	31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    37c8:	dac02d17 	ldw	r11,180(sp)
    37cc:	db002d17 	ldw	r12,180(sp)
    37d0:	d8c02a15 	stw	r3,168(sp)
    37d4:	5ac00017 	ldw	r11,0(r11)
    37d8:	d8002785 	stb	zero,158(sp)
    37dc:	64c00104 	addi	r19,r12,4
    37e0:	dac03115 	stw	r11,196(sp)
    37e4:	5803fe26 	beq	r11,zero,47e0 <___vfprintf_internal_r+0x1ba0>
    37e8:	d9003117 	ldw	r4,196(sp)
    37ec:	4803b416 	blt	r9,zero,46c0 <___vfprintf_internal_r+0x1a80>
    37f0:	480d883a 	mov	r6,r9
    37f4:	000b883a 	mov	r5,zero
    37f8:	da003f15 	stw	r8,252(sp)
    37fc:	da403e15 	stw	r9,248(sp)
    3800:	00081bc0 	call	81bc <memchr>
    3804:	da003f17 	ldw	r8,252(sp)
    3808:	da403e17 	ldw	r9,248(sp)
    380c:	10043026 	beq	r2,zero,48d0 <___vfprintf_internal_r+0x1c90>
    3810:	d8c03117 	ldw	r3,196(sp)
    3814:	10e5c83a 	sub	r18,r2,r3
    3818:	4c836b16 	blt	r9,r18,45c8 <___vfprintf_internal_r+0x1988>
    381c:	9005883a 	mov	r2,r18
    3820:	9003ac16 	blt	r18,zero,46d4 <___vfprintf_internal_r+0x1a94>
    3824:	dd402783 	ldbu	r21,158(sp)
    3828:	d8802b15 	stw	r2,172(sp)
    382c:	dcc02d15 	stw	r19,180(sp)
    3830:	d8003215 	stw	zero,200(sp)
    3834:	d8003415 	stw	zero,208(sp)
    3838:	003e5406 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    383c:	008000b4 	movhi	r2,2
    3840:	10b17904 	addi	r2,r2,-14876
    3844:	d8c02a15 	stw	r3,168(sp)
    3848:	d8803b15 	stw	r2,236(sp)
    384c:	d9802785 	stb	r6,158(sp)
    3850:	88c0080c 	andi	r3,r17,32
    3854:	d8802d17 	ldw	r2,180(sp)
    3858:	183fa51e 	bne	r3,zero,36f0 <__alt_mem_Flash_flash_data+0xf40036f0>
    385c:	88c0040c 	andi	r3,r17,16
    3860:	1802ee26 	beq	r3,zero,441c <___vfprintf_internal_r+0x17dc>
    3864:	db002d17 	ldw	r12,180(sp)
    3868:	14c00017 	ldw	r19,0(r2)
    386c:	0039883a 	mov	fp,zero
    3870:	63000104 	addi	r12,r12,4
    3874:	db002d15 	stw	r12,180(sp)
    3878:	003fa206 	br	3704 <__alt_mem_Flash_flash_data+0xf4003704>
    387c:	8c400054 	ori	r17,r17,1
    3880:	1805883a 	mov	r2,r3
    3884:	1c000007 	ldb	r16,0(r3)
    3888:	003d5206 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    388c:	8c400814 	ori	r17,r17,32
    3890:	1805883a 	mov	r2,r3
    3894:	1c000007 	ldb	r16,0(r3)
    3898:	003d4e06 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    389c:	d8c02a15 	stw	r3,168(sp)
    38a0:	8880080c 	andi	r2,r17,32
    38a4:	103f1d1e 	bne	r2,zero,351c <__alt_mem_Flash_flash_data+0xf400351c>
    38a8:	8880040c 	andi	r2,r17,16
    38ac:	1001b81e 	bne	r2,zero,3f90 <___vfprintf_internal_r+0x1350>
    38b0:	8880100c 	andi	r2,r17,64
    38b4:	1001b626 	beq	r2,zero,3f90 <___vfprintf_internal_r+0x1350>
    38b8:	dac02d17 	ldw	r11,180(sp)
    38bc:	0039883a 	mov	fp,zero
    38c0:	00800044 	movi	r2,1
    38c4:	5cc0000b 	ldhu	r19,0(r11)
    38c8:	5ac00104 	addi	r11,r11,4
    38cc:	dac02d15 	stw	r11,180(sp)
    38d0:	9807883a 	mov	r3,r19
    38d4:	003f0906 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    38d8:	d8c02a15 	stw	r3,168(sp)
    38dc:	8880080c 	andi	r2,r17,32
    38e0:	103eff1e 	bne	r2,zero,34e0 <__alt_mem_Flash_flash_data+0xf40034e0>
    38e4:	8880040c 	andi	r2,r17,16
    38e8:	1001a11e 	bne	r2,zero,3f70 <___vfprintf_internal_r+0x1330>
    38ec:	8880100c 	andi	r2,r17,64
    38f0:	10019f26 	beq	r2,zero,3f70 <___vfprintf_internal_r+0x1330>
    38f4:	db002d17 	ldw	r12,180(sp)
    38f8:	0039883a 	mov	fp,zero
    38fc:	0005883a 	mov	r2,zero
    3900:	64c0000b 	ldhu	r19,0(r12)
    3904:	63000104 	addi	r12,r12,4
    3908:	db002d15 	stw	r12,180(sp)
    390c:	9807883a 	mov	r3,r19
    3910:	003efa06 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3914:	d8c02a15 	stw	r3,168(sp)
    3918:	d9802785 	stb	r6,158(sp)
    391c:	803db626 	beq	r16,zero,2ff8 <__alt_mem_Flash_flash_data+0xf4002ff8>
    3920:	00c00044 	movi	r3,1
    3924:	d8c02b15 	stw	r3,172(sp)
    3928:	dc001405 	stb	r16,80(sp)
    392c:	d8002785 	stb	zero,158(sp)
    3930:	003f9e06 	br	37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    3934:	d8c02017 	ldw	r3,128(sp)
    3938:	003e5306 	br	3288 <__alt_mem_Flash_flash_data+0xf4003288>
    393c:	10803fcc 	andi	r2,r2,255
    3940:	00c00044 	movi	r3,1
    3944:	10fdfa1e 	bne	r2,r3,3130 <__alt_mem_Flash_flash_data+0xf4003130>
    3948:	e000021e 	bne	fp,zero,3954 <___vfprintf_internal_r+0xd14>
    394c:	00800244 	movi	r2,9
    3950:	14c0202e 	bgeu	r2,r19,39d4 <___vfprintf_internal_r+0xd94>
    3954:	dc002b15 	stw	r16,172(sp)
    3958:	dc402c15 	stw	r17,176(sp)
    395c:	9821883a 	mov	r16,r19
    3960:	e023883a 	mov	r17,fp
    3964:	dc801e04 	addi	r18,sp,120
    3968:	4827883a 	mov	r19,r9
    396c:	4039883a 	mov	fp,r8
    3970:	8009883a 	mov	r4,r16
    3974:	880b883a 	mov	r5,r17
    3978:	01800284 	movi	r6,10
    397c:	000f883a 	mov	r7,zero
    3980:	000d1c40 	call	d1c4 <__umoddi3>
    3984:	10800c04 	addi	r2,r2,48
    3988:	94bfffc4 	addi	r18,r18,-1
    398c:	8009883a 	mov	r4,r16
    3990:	880b883a 	mov	r5,r17
    3994:	01800284 	movi	r6,10
    3998:	000f883a 	mov	r7,zero
    399c:	90800005 	stb	r2,0(r18)
    39a0:	000cc040 	call	cc04 <__udivdi3>
    39a4:	1021883a 	mov	r16,r2
    39a8:	10c4b03a 	or	r2,r2,r3
    39ac:	1823883a 	mov	r17,r3
    39b0:	103fef1e 	bne	r2,zero,3970 <__alt_mem_Flash_flash_data+0xf4003970>
    39b4:	dac02817 	ldw	r11,160(sp)
    39b8:	dc803115 	stw	r18,196(sp)
    39bc:	dc002b17 	ldw	r16,172(sp)
    39c0:	dc402c17 	ldw	r17,176(sp)
    39c4:	9813883a 	mov	r9,r19
    39c8:	e011883a 	mov	r8,fp
    39cc:	5ca5c83a 	sub	r18,r11,r18
    39d0:	003de906 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    39d4:	9cc00c04 	addi	r19,r19,48
    39d8:	d8c01dc4 	addi	r3,sp,119
    39dc:	dcc01dc5 	stb	r19,119(sp)
    39e0:	dc803c17 	ldw	r18,240(sp)
    39e4:	d8c03115 	stw	r3,196(sp)
    39e8:	003de306 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    39ec:	00801944 	movi	r2,101
    39f0:	1400710e 	bge	r2,r16,3bb8 <___vfprintf_internal_r+0xf78>
    39f4:	d9003717 	ldw	r4,220(sp)
    39f8:	d9403917 	ldw	r5,228(sp)
    39fc:	000d883a 	mov	r6,zero
    3a00:	000f883a 	mov	r7,zero
    3a04:	d8c03d15 	stw	r3,244(sp)
    3a08:	da003f15 	stw	r8,252(sp)
    3a0c:	000e9e80 	call	e9e8 <__eqdf2>
    3a10:	d8c03d17 	ldw	r3,244(sp)
    3a14:	da003f17 	ldw	r8,252(sp)
    3a18:	1000ef1e 	bne	r2,zero,3dd8 <___vfprintf_internal_r+0x1198>
    3a1c:	d8801f17 	ldw	r2,124(sp)
    3a20:	010000b4 	movhi	r4,2
    3a24:	21318004 	addi	r4,r4,-14848
    3a28:	18c00044 	addi	r3,r3,1
    3a2c:	10800044 	addi	r2,r2,1
    3a30:	41000015 	stw	r4,0(r8)
    3a34:	01000044 	movi	r4,1
    3a38:	41000115 	stw	r4,4(r8)
    3a3c:	d8c02015 	stw	r3,128(sp)
    3a40:	d8801f15 	stw	r2,124(sp)
    3a44:	010001c4 	movi	r4,7
    3a48:	20828e16 	blt	r4,r2,4484 <___vfprintf_internal_r+0x1844>
    3a4c:	42000204 	addi	r8,r8,8
    3a50:	d8802617 	ldw	r2,152(sp)
    3a54:	dac03317 	ldw	r11,204(sp)
    3a58:	12c00216 	blt	r2,r11,3a64 <___vfprintf_internal_r+0xe24>
    3a5c:	8880004c 	andi	r2,r17,1
    3a60:	103e5d26 	beq	r2,zero,33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    3a64:	db003817 	ldw	r12,224(sp)
    3a68:	d8801f17 	ldw	r2,124(sp)
    3a6c:	dac03517 	ldw	r11,212(sp)
    3a70:	1b07883a 	add	r3,r3,r12
    3a74:	10800044 	addi	r2,r2,1
    3a78:	42c00015 	stw	r11,0(r8)
    3a7c:	43000115 	stw	r12,4(r8)
    3a80:	d8c02015 	stw	r3,128(sp)
    3a84:	d8801f15 	stw	r2,124(sp)
    3a88:	010001c4 	movi	r4,7
    3a8c:	2082ed16 	blt	r4,r2,4644 <___vfprintf_internal_r+0x1a04>
    3a90:	42000204 	addi	r8,r8,8
    3a94:	db003317 	ldw	r12,204(sp)
    3a98:	643fffc4 	addi	r16,r12,-1
    3a9c:	043e4e0e 	bge	zero,r16,33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    3aa0:	04800404 	movi	r18,16
    3aa4:	d8801f17 	ldw	r2,124(sp)
    3aa8:	94007e0e 	bge	r18,r16,3ca4 <___vfprintf_internal_r+0x1064>
    3aac:	014000b4 	movhi	r5,2
    3ab0:	29718884 	addi	r5,r5,-14814
    3ab4:	d9402c15 	stw	r5,176(sp)
    3ab8:	054001c4 	movi	r21,7
    3abc:	00000306 	br	3acc <___vfprintf_internal_r+0xe8c>
    3ac0:	42000204 	addi	r8,r8,8
    3ac4:	843ffc04 	addi	r16,r16,-16
    3ac8:	9400790e 	bge	r18,r16,3cb0 <___vfprintf_internal_r+0x1070>
    3acc:	18c00404 	addi	r3,r3,16
    3ad0:	10800044 	addi	r2,r2,1
    3ad4:	45000015 	stw	r20,0(r8)
    3ad8:	44800115 	stw	r18,4(r8)
    3adc:	d8c02015 	stw	r3,128(sp)
    3ae0:	d8801f15 	stw	r2,124(sp)
    3ae4:	a8bff60e 	bge	r21,r2,3ac0 <__alt_mem_Flash_flash_data+0xf4003ac0>
    3ae8:	b009883a 	mov	r4,r22
    3aec:	b80b883a 	mov	r5,r23
    3af0:	d9801e04 	addi	r6,sp,120
    3af4:	000af440 	call	af44 <__sprint_r>
    3af8:	103d451e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3afc:	d8c02017 	ldw	r3,128(sp)
    3b00:	d8801f17 	ldw	r2,124(sp)
    3b04:	da000404 	addi	r8,sp,16
    3b08:	003fee06 	br	3ac4 <__alt_mem_Flash_flash_data+0xf4003ac4>
    3b0c:	dac02e17 	ldw	r11,184(sp)
    3b10:	db002b17 	ldw	r12,172(sp)
    3b14:	5b2bc83a 	sub	r21,r11,r12
    3b18:	057df90e 	bge	zero,r21,3300 <__alt_mem_Flash_flash_data+0xf4003300>
    3b1c:	07000404 	movi	fp,16
    3b20:	d8801f17 	ldw	r2,124(sp)
    3b24:	e543640e 	bge	fp,r21,48b8 <___vfprintf_internal_r+0x1c78>
    3b28:	014000b4 	movhi	r5,2
    3b2c:	29718884 	addi	r5,r5,-14814
    3b30:	d9402c15 	stw	r5,176(sp)
    3b34:	04c001c4 	movi	r19,7
    3b38:	00000306 	br	3b48 <___vfprintf_internal_r+0xf08>
    3b3c:	ad7ffc04 	addi	r21,r21,-16
    3b40:	42000204 	addi	r8,r8,8
    3b44:	e540110e 	bge	fp,r21,3b8c <___vfprintf_internal_r+0xf4c>
    3b48:	18c00404 	addi	r3,r3,16
    3b4c:	10800044 	addi	r2,r2,1
    3b50:	45000015 	stw	r20,0(r8)
    3b54:	47000115 	stw	fp,4(r8)
    3b58:	d8c02015 	stw	r3,128(sp)
    3b5c:	d8801f15 	stw	r2,124(sp)
    3b60:	98bff60e 	bge	r19,r2,3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3b64:	b009883a 	mov	r4,r22
    3b68:	b80b883a 	mov	r5,r23
    3b6c:	d9801e04 	addi	r6,sp,120
    3b70:	000af440 	call	af44 <__sprint_r>
    3b74:	103d261e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3b78:	ad7ffc04 	addi	r21,r21,-16
    3b7c:	d8c02017 	ldw	r3,128(sp)
    3b80:	d8801f17 	ldw	r2,124(sp)
    3b84:	da000404 	addi	r8,sp,16
    3b88:	e57fef16 	blt	fp,r21,3b48 <__alt_mem_Flash_flash_data+0xf4003b48>
    3b8c:	dac02c17 	ldw	r11,176(sp)
    3b90:	1d47883a 	add	r3,r3,r21
    3b94:	10800044 	addi	r2,r2,1
    3b98:	42c00015 	stw	r11,0(r8)
    3b9c:	45400115 	stw	r21,4(r8)
    3ba0:	d8c02015 	stw	r3,128(sp)
    3ba4:	d8801f15 	stw	r2,124(sp)
    3ba8:	010001c4 	movi	r4,7
    3bac:	20819116 	blt	r4,r2,41f4 <___vfprintf_internal_r+0x15b4>
    3bb0:	42000204 	addi	r8,r8,8
    3bb4:	003dd206 	br	3300 <__alt_mem_Flash_flash_data+0xf4003300>
    3bb8:	db003317 	ldw	r12,204(sp)
    3bbc:	00800044 	movi	r2,1
    3bc0:	18c00044 	addi	r3,r3,1
    3bc4:	1301530e 	bge	r2,r12,4114 <___vfprintf_internal_r+0x14d4>
    3bc8:	dc001f17 	ldw	r16,124(sp)
    3bcc:	dac03117 	ldw	r11,196(sp)
    3bd0:	00800044 	movi	r2,1
    3bd4:	84000044 	addi	r16,r16,1
    3bd8:	40800115 	stw	r2,4(r8)
    3bdc:	42c00015 	stw	r11,0(r8)
    3be0:	d8c02015 	stw	r3,128(sp)
    3be4:	dc001f15 	stw	r16,124(sp)
    3be8:	008001c4 	movi	r2,7
    3bec:	14016b16 	blt	r2,r16,419c <___vfprintf_internal_r+0x155c>
    3bf0:	42000204 	addi	r8,r8,8
    3bf4:	db003817 	ldw	r12,224(sp)
    3bf8:	dac03517 	ldw	r11,212(sp)
    3bfc:	84000044 	addi	r16,r16,1
    3c00:	1b07883a 	add	r3,r3,r12
    3c04:	42c00015 	stw	r11,0(r8)
    3c08:	43000115 	stw	r12,4(r8)
    3c0c:	d8c02015 	stw	r3,128(sp)
    3c10:	dc001f15 	stw	r16,124(sp)
    3c14:	008001c4 	movi	r2,7
    3c18:	14016916 	blt	r2,r16,41c0 <___vfprintf_internal_r+0x1580>
    3c1c:	44800204 	addi	r18,r8,8
    3c20:	d9003717 	ldw	r4,220(sp)
    3c24:	d9403917 	ldw	r5,228(sp)
    3c28:	000d883a 	mov	r6,zero
    3c2c:	000f883a 	mov	r7,zero
    3c30:	d8c03d15 	stw	r3,244(sp)
    3c34:	000e9e80 	call	e9e8 <__eqdf2>
    3c38:	d8c03d17 	ldw	r3,244(sp)
    3c3c:	db003317 	ldw	r12,204(sp)
    3c40:	1000ad26 	beq	r2,zero,3ef8 <___vfprintf_internal_r+0x12b8>
    3c44:	dac03117 	ldw	r11,196(sp)
    3c48:	60bfffc4 	addi	r2,r12,-1
    3c4c:	1887883a 	add	r3,r3,r2
    3c50:	59000044 	addi	r4,r11,1
    3c54:	84000044 	addi	r16,r16,1
    3c58:	90800115 	stw	r2,4(r18)
    3c5c:	91000015 	stw	r4,0(r18)
    3c60:	d8c02015 	stw	r3,128(sp)
    3c64:	dc001f15 	stw	r16,124(sp)
    3c68:	008001c4 	movi	r2,7
    3c6c:	14014216 	blt	r2,r16,4178 <___vfprintf_internal_r+0x1538>
    3c70:	94800204 	addi	r18,r18,8
    3c74:	dac03a17 	ldw	r11,232(sp)
    3c78:	dd4022c4 	addi	r21,sp,139
    3c7c:	84000044 	addi	r16,r16,1
    3c80:	1ac7883a 	add	r3,r3,r11
    3c84:	95400015 	stw	r21,0(r18)
    3c88:	92c00115 	stw	r11,4(r18)
    3c8c:	d8c02015 	stw	r3,128(sp)
    3c90:	dc001f15 	stw	r16,124(sp)
    3c94:	008001c4 	movi	r2,7
    3c98:	14000e16 	blt	r2,r16,3cd4 <___vfprintf_internal_r+0x1094>
    3c9c:	92000204 	addi	r8,r18,8
    3ca0:	003dcd06 	br	33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    3ca4:	010000b4 	movhi	r4,2
    3ca8:	21318884 	addi	r4,r4,-14814
    3cac:	d9002c15 	stw	r4,176(sp)
    3cb0:	dac02c17 	ldw	r11,176(sp)
    3cb4:	1c07883a 	add	r3,r3,r16
    3cb8:	44000115 	stw	r16,4(r8)
    3cbc:	42c00015 	stw	r11,0(r8)
    3cc0:	10800044 	addi	r2,r2,1
    3cc4:	d8c02015 	stw	r3,128(sp)
    3cc8:	d8801f15 	stw	r2,124(sp)
    3ccc:	010001c4 	movi	r4,7
    3cd0:	20bdc00e 	bge	r4,r2,33d4 <__alt_mem_Flash_flash_data+0xf40033d4>
    3cd4:	b009883a 	mov	r4,r22
    3cd8:	b80b883a 	mov	r5,r23
    3cdc:	d9801e04 	addi	r6,sp,120
    3ce0:	000af440 	call	af44 <__sprint_r>
    3ce4:	103cca1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3ce8:	d8c02017 	ldw	r3,128(sp)
    3cec:	da000404 	addi	r8,sp,16
    3cf0:	003db906 	br	33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    3cf4:	b009883a 	mov	r4,r22
    3cf8:	b80b883a 	mov	r5,r23
    3cfc:	d9801e04 	addi	r6,sp,120
    3d00:	000af440 	call	af44 <__sprint_r>
    3d04:	103def26 	beq	r2,zero,34c4 <__alt_mem_Flash_flash_data+0xf40034c4>
    3d08:	003cc106 	br	3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3d0c:	10803fcc 	andi	r2,r2,255
    3d10:	1000651e 	bne	r2,zero,3ea8 <___vfprintf_internal_r+0x1268>
    3d14:	8880004c 	andi	r2,r17,1
    3d18:	10013226 	beq	r2,zero,41e4 <___vfprintf_internal_r+0x15a4>
    3d1c:	00800c04 	movi	r2,48
    3d20:	d8c01dc4 	addi	r3,sp,119
    3d24:	d8801dc5 	stb	r2,119(sp)
    3d28:	dc803c17 	ldw	r18,240(sp)
    3d2c:	d8c03115 	stw	r3,196(sp)
    3d30:	003d1106 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3d34:	b009883a 	mov	r4,r22
    3d38:	b80b883a 	mov	r5,r23
    3d3c:	d9801e04 	addi	r6,sp,120
    3d40:	000af440 	call	af44 <__sprint_r>
    3d44:	103cb21e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3d48:	d8c02017 	ldw	r3,128(sp)
    3d4c:	da000404 	addi	r8,sp,16
    3d50:	003d9406 	br	33a4 <__alt_mem_Flash_flash_data+0xf40033a4>
    3d54:	b009883a 	mov	r4,r22
    3d58:	b80b883a 	mov	r5,r23
    3d5c:	d9801e04 	addi	r6,sp,120
    3d60:	000af440 	call	af44 <__sprint_r>
    3d64:	103caa1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3d68:	d8c02017 	ldw	r3,128(sp)
    3d6c:	da000404 	addi	r8,sp,16
    3d70:	003d5206 	br	32bc <__alt_mem_Flash_flash_data+0xf40032bc>
    3d74:	b009883a 	mov	r4,r22
    3d78:	b80b883a 	mov	r5,r23
    3d7c:	d9801e04 	addi	r6,sp,120
    3d80:	000af440 	call	af44 <__sprint_r>
    3d84:	103ca21e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3d88:	d8c02017 	ldw	r3,128(sp)
    3d8c:	da000404 	addi	r8,sp,16
    3d90:	003d5806 	br	32f4 <__alt_mem_Flash_flash_data+0xf40032f4>
    3d94:	d9403b17 	ldw	r5,236(sp)
    3d98:	d8c01e04 	addi	r3,sp,120
    3d9c:	988003cc 	andi	r2,r19,15
    3da0:	e008973a 	slli	r4,fp,28
    3da4:	2885883a 	add	r2,r5,r2
    3da8:	9826d13a 	srli	r19,r19,4
    3dac:	10800003 	ldbu	r2,0(r2)
    3db0:	e038d13a 	srli	fp,fp,4
    3db4:	18ffffc4 	addi	r3,r3,-1
    3db8:	24e6b03a 	or	r19,r4,r19
    3dbc:	18800005 	stb	r2,0(r3)
    3dc0:	9f04b03a 	or	r2,r19,fp
    3dc4:	103ff51e 	bne	r2,zero,3d9c <__alt_mem_Flash_flash_data+0xf4003d9c>
    3dc8:	db002817 	ldw	r12,160(sp)
    3dcc:	d8c03115 	stw	r3,196(sp)
    3dd0:	60e5c83a 	sub	r18,r12,r3
    3dd4:	003ce806 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3dd8:	dc002617 	ldw	r16,152(sp)
    3ddc:	0401b10e 	bge	zero,r16,44a4 <___vfprintf_internal_r+0x1864>
    3de0:	db003117 	ldw	r12,196(sp)
    3de4:	dac03317 	ldw	r11,204(sp)
    3de8:	62e1883a 	add	r16,r12,r11
    3dec:	db003417 	ldw	r12,208(sp)
    3df0:	5825883a 	mov	r18,r11
    3df4:	62c0010e 	bge	r12,r11,3dfc <___vfprintf_internal_r+0x11bc>
    3df8:	6025883a 	mov	r18,r12
    3dfc:	04800b0e 	bge	zero,r18,3e2c <___vfprintf_internal_r+0x11ec>
    3e00:	d8801f17 	ldw	r2,124(sp)
    3e04:	dac03117 	ldw	r11,196(sp)
    3e08:	1c87883a 	add	r3,r3,r18
    3e0c:	10800044 	addi	r2,r2,1
    3e10:	42c00015 	stw	r11,0(r8)
    3e14:	44800115 	stw	r18,4(r8)
    3e18:	d8c02015 	stw	r3,128(sp)
    3e1c:	d8801f15 	stw	r2,124(sp)
    3e20:	010001c4 	movi	r4,7
    3e24:	20824f16 	blt	r4,r2,4764 <___vfprintf_internal_r+0x1b24>
    3e28:	42000204 	addi	r8,r8,8
    3e2c:	90024b16 	blt	r18,zero,475c <___vfprintf_internal_r+0x1b1c>
    3e30:	db003417 	ldw	r12,208(sp)
    3e34:	64a5c83a 	sub	r18,r12,r18
    3e38:	0480730e 	bge	zero,r18,4008 <___vfprintf_internal_r+0x13c8>
    3e3c:	05400404 	movi	r21,16
    3e40:	d8801f17 	ldw	r2,124(sp)
    3e44:	ac817d0e 	bge	r21,r18,443c <___vfprintf_internal_r+0x17fc>
    3e48:	014000b4 	movhi	r5,2
    3e4c:	29718884 	addi	r5,r5,-14814
    3e50:	d9402c15 	stw	r5,176(sp)
    3e54:	070001c4 	movi	fp,7
    3e58:	00000306 	br	3e68 <___vfprintf_internal_r+0x1228>
    3e5c:	42000204 	addi	r8,r8,8
    3e60:	94bffc04 	addi	r18,r18,-16
    3e64:	ac81780e 	bge	r21,r18,4448 <___vfprintf_internal_r+0x1808>
    3e68:	18c00404 	addi	r3,r3,16
    3e6c:	10800044 	addi	r2,r2,1
    3e70:	45000015 	stw	r20,0(r8)
    3e74:	45400115 	stw	r21,4(r8)
    3e78:	d8c02015 	stw	r3,128(sp)
    3e7c:	d8801f15 	stw	r2,124(sp)
    3e80:	e0bff60e 	bge	fp,r2,3e5c <__alt_mem_Flash_flash_data+0xf4003e5c>
    3e84:	b009883a 	mov	r4,r22
    3e88:	b80b883a 	mov	r5,r23
    3e8c:	d9801e04 	addi	r6,sp,120
    3e90:	000af440 	call	af44 <__sprint_r>
    3e94:	103c5e1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3e98:	d8c02017 	ldw	r3,128(sp)
    3e9c:	d8801f17 	ldw	r2,124(sp)
    3ea0:	da000404 	addi	r8,sp,16
    3ea4:	003fee06 	br	3e60 <__alt_mem_Flash_flash_data+0xf4003e60>
    3ea8:	dac01e04 	addi	r11,sp,120
    3eac:	0025883a 	mov	r18,zero
    3eb0:	dac03115 	stw	r11,196(sp)
    3eb4:	003cb006 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3eb8:	b009883a 	mov	r4,r22
    3ebc:	b80b883a 	mov	r5,r23
    3ec0:	d9801e04 	addi	r6,sp,120
    3ec4:	000af440 	call	af44 <__sprint_r>
    3ec8:	103c511e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3ecc:	d8c02017 	ldw	r3,128(sp)
    3ed0:	d8802787 	ldb	r2,158(sp)
    3ed4:	da000404 	addi	r8,sp,16
    3ed8:	003ceb06 	br	3288 <__alt_mem_Flash_flash_data+0xf4003288>
    3edc:	1cc00017 	ldw	r19,0(r3)
    3ee0:	dac02d17 	ldw	r11,180(sp)
    3ee4:	9839d7fa 	srai	fp,r19,31
    3ee8:	5ac00104 	addi	r11,r11,4
    3eec:	dac02d15 	stw	r11,180(sp)
    3ef0:	e005883a 	mov	r2,fp
    3ef4:	003c8106 	br	30fc <__alt_mem_Flash_flash_data+0xf40030fc>
    3ef8:	657fffc4 	addi	r21,r12,-1
    3efc:	057f5d0e 	bge	zero,r21,3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    3f00:	07000404 	movi	fp,16
    3f04:	e540900e 	bge	fp,r21,4148 <___vfprintf_internal_r+0x1508>
    3f08:	010000b4 	movhi	r4,2
    3f0c:	21318884 	addi	r4,r4,-14814
    3f10:	d9002c15 	stw	r4,176(sp)
    3f14:	01c001c4 	movi	r7,7
    3f18:	00000306 	br	3f28 <___vfprintf_internal_r+0x12e8>
    3f1c:	94800204 	addi	r18,r18,8
    3f20:	ad7ffc04 	addi	r21,r21,-16
    3f24:	e5408b0e 	bge	fp,r21,4154 <___vfprintf_internal_r+0x1514>
    3f28:	18c00404 	addi	r3,r3,16
    3f2c:	84000044 	addi	r16,r16,1
    3f30:	95000015 	stw	r20,0(r18)
    3f34:	97000115 	stw	fp,4(r18)
    3f38:	d8c02015 	stw	r3,128(sp)
    3f3c:	dc001f15 	stw	r16,124(sp)
    3f40:	3c3ff60e 	bge	r7,r16,3f1c <__alt_mem_Flash_flash_data+0xf4003f1c>
    3f44:	b009883a 	mov	r4,r22
    3f48:	b80b883a 	mov	r5,r23
    3f4c:	d9801e04 	addi	r6,sp,120
    3f50:	d9c03d15 	stw	r7,244(sp)
    3f54:	000af440 	call	af44 <__sprint_r>
    3f58:	d9c03d17 	ldw	r7,244(sp)
    3f5c:	103c2c1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3f60:	d8c02017 	ldw	r3,128(sp)
    3f64:	dc001f17 	ldw	r16,124(sp)
    3f68:	dc800404 	addi	r18,sp,16
    3f6c:	003fec06 	br	3f20 <__alt_mem_Flash_flash_data+0xf4003f20>
    3f70:	dac02d17 	ldw	r11,180(sp)
    3f74:	0039883a 	mov	fp,zero
    3f78:	0005883a 	mov	r2,zero
    3f7c:	5cc00017 	ldw	r19,0(r11)
    3f80:	5ac00104 	addi	r11,r11,4
    3f84:	dac02d15 	stw	r11,180(sp)
    3f88:	9807883a 	mov	r3,r19
    3f8c:	003d5b06 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3f90:	db002d17 	ldw	r12,180(sp)
    3f94:	0039883a 	mov	fp,zero
    3f98:	00800044 	movi	r2,1
    3f9c:	64c00017 	ldw	r19,0(r12)
    3fa0:	63000104 	addi	r12,r12,4
    3fa4:	db002d15 	stw	r12,180(sp)
    3fa8:	9807883a 	mov	r3,r19
    3fac:	003d5306 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3fb0:	00800084 	movi	r2,2
    3fb4:	9f06b03a 	or	r3,r19,fp
    3fb8:	003d5006 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3fbc:	10803fcc 	andi	r2,r2,255
    3fc0:	1080201c 	xori	r2,r2,128
    3fc4:	10bfe004 	addi	r2,r2,-128
    3fc8:	01000c04 	movi	r4,48
    3fcc:	1101a526 	beq	r2,r4,4664 <___vfprintf_internal_r+0x1a24>
    3fd0:	dac03117 	ldw	r11,196(sp)
    3fd4:	db002817 	ldw	r12,160(sp)
    3fd8:	193fffc5 	stb	r4,-1(r3)
    3fdc:	5affffc4 	addi	r11,r11,-1
    3fe0:	dac03115 	stw	r11,196(sp)
    3fe4:	62e5c83a 	sub	r18,r12,r11
    3fe8:	003c6306 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3fec:	b009883a 	mov	r4,r22
    3ff0:	b80b883a 	mov	r5,r23
    3ff4:	d9801e04 	addi	r6,sp,120
    3ff8:	000af440 	call	af44 <__sprint_r>
    3ffc:	103c041e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4000:	d8c02017 	ldw	r3,128(sp)
    4004:	da000404 	addi	r8,sp,16
    4008:	db003117 	ldw	r12,196(sp)
    400c:	dac03417 	ldw	r11,208(sp)
    4010:	d8802617 	ldw	r2,152(sp)
    4014:	62e5883a 	add	r18,r12,r11
    4018:	db003317 	ldw	r12,204(sp)
    401c:	13000216 	blt	r2,r12,4028 <___vfprintf_internal_r+0x13e8>
    4020:	8900004c 	andi	r4,r17,1
    4024:	20000c26 	beq	r4,zero,4058 <___vfprintf_internal_r+0x1418>
    4028:	dac03817 	ldw	r11,224(sp)
    402c:	d9001f17 	ldw	r4,124(sp)
    4030:	db003517 	ldw	r12,212(sp)
    4034:	1ac7883a 	add	r3,r3,r11
    4038:	21000044 	addi	r4,r4,1
    403c:	43000015 	stw	r12,0(r8)
    4040:	42c00115 	stw	r11,4(r8)
    4044:	d8c02015 	stw	r3,128(sp)
    4048:	d9001f15 	stw	r4,124(sp)
    404c:	014001c4 	movi	r5,7
    4050:	2901cc16 	blt	r5,r4,4784 <___vfprintf_internal_r+0x1b44>
    4054:	42000204 	addi	r8,r8,8
    4058:	dac03317 	ldw	r11,204(sp)
    405c:	8489c83a 	sub	r4,r16,r18
    4060:	5885c83a 	sub	r2,r11,r2
    4064:	1021883a 	mov	r16,r2
    4068:	2080010e 	bge	r4,r2,4070 <___vfprintf_internal_r+0x1430>
    406c:	2021883a 	mov	r16,r4
    4070:	04000a0e 	bge	zero,r16,409c <___vfprintf_internal_r+0x145c>
    4074:	d9001f17 	ldw	r4,124(sp)
    4078:	1c07883a 	add	r3,r3,r16
    407c:	44800015 	stw	r18,0(r8)
    4080:	21000044 	addi	r4,r4,1
    4084:	44000115 	stw	r16,4(r8)
    4088:	d8c02015 	stw	r3,128(sp)
    408c:	d9001f15 	stw	r4,124(sp)
    4090:	014001c4 	movi	r5,7
    4094:	2901e316 	blt	r5,r4,4824 <___vfprintf_internal_r+0x1be4>
    4098:	42000204 	addi	r8,r8,8
    409c:	8001df16 	blt	r16,zero,481c <___vfprintf_internal_r+0x1bdc>
    40a0:	1421c83a 	sub	r16,r2,r16
    40a4:	043ccc0e 	bge	zero,r16,33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    40a8:	04800404 	movi	r18,16
    40ac:	d8801f17 	ldw	r2,124(sp)
    40b0:	943efc0e 	bge	r18,r16,3ca4 <__alt_mem_Flash_flash_data+0xf4003ca4>
    40b4:	014000b4 	movhi	r5,2
    40b8:	29718884 	addi	r5,r5,-14814
    40bc:	d9402c15 	stw	r5,176(sp)
    40c0:	054001c4 	movi	r21,7
    40c4:	00000306 	br	40d4 <___vfprintf_internal_r+0x1494>
    40c8:	42000204 	addi	r8,r8,8
    40cc:	843ffc04 	addi	r16,r16,-16
    40d0:	943ef70e 	bge	r18,r16,3cb0 <__alt_mem_Flash_flash_data+0xf4003cb0>
    40d4:	18c00404 	addi	r3,r3,16
    40d8:	10800044 	addi	r2,r2,1
    40dc:	45000015 	stw	r20,0(r8)
    40e0:	44800115 	stw	r18,4(r8)
    40e4:	d8c02015 	stw	r3,128(sp)
    40e8:	d8801f15 	stw	r2,124(sp)
    40ec:	a8bff60e 	bge	r21,r2,40c8 <__alt_mem_Flash_flash_data+0xf40040c8>
    40f0:	b009883a 	mov	r4,r22
    40f4:	b80b883a 	mov	r5,r23
    40f8:	d9801e04 	addi	r6,sp,120
    40fc:	000af440 	call	af44 <__sprint_r>
    4100:	103bc31e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4104:	d8c02017 	ldw	r3,128(sp)
    4108:	d8801f17 	ldw	r2,124(sp)
    410c:	da000404 	addi	r8,sp,16
    4110:	003fee06 	br	40cc <__alt_mem_Flash_flash_data+0xf40040cc>
    4114:	8888703a 	and	r4,r17,r2
    4118:	203eab1e 	bne	r4,zero,3bc8 <__alt_mem_Flash_flash_data+0xf4003bc8>
    411c:	dc001f17 	ldw	r16,124(sp)
    4120:	db003117 	ldw	r12,196(sp)
    4124:	40800115 	stw	r2,4(r8)
    4128:	84000044 	addi	r16,r16,1
    412c:	43000015 	stw	r12,0(r8)
    4130:	d8c02015 	stw	r3,128(sp)
    4134:	dc001f15 	stw	r16,124(sp)
    4138:	008001c4 	movi	r2,7
    413c:	14000e16 	blt	r2,r16,4178 <___vfprintf_internal_r+0x1538>
    4140:	44800204 	addi	r18,r8,8
    4144:	003ecb06 	br	3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    4148:	008000b4 	movhi	r2,2
    414c:	10b18884 	addi	r2,r2,-14814
    4150:	d8802c15 	stw	r2,176(sp)
    4154:	dac02c17 	ldw	r11,176(sp)
    4158:	1d47883a 	add	r3,r3,r21
    415c:	84000044 	addi	r16,r16,1
    4160:	92c00015 	stw	r11,0(r18)
    4164:	95400115 	stw	r21,4(r18)
    4168:	d8c02015 	stw	r3,128(sp)
    416c:	dc001f15 	stw	r16,124(sp)
    4170:	008001c4 	movi	r2,7
    4174:	143ebe0e 	bge	r2,r16,3c70 <__alt_mem_Flash_flash_data+0xf4003c70>
    4178:	b009883a 	mov	r4,r22
    417c:	b80b883a 	mov	r5,r23
    4180:	d9801e04 	addi	r6,sp,120
    4184:	000af440 	call	af44 <__sprint_r>
    4188:	103ba11e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    418c:	d8c02017 	ldw	r3,128(sp)
    4190:	dc001f17 	ldw	r16,124(sp)
    4194:	dc800404 	addi	r18,sp,16
    4198:	003eb606 	br	3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    419c:	b009883a 	mov	r4,r22
    41a0:	b80b883a 	mov	r5,r23
    41a4:	d9801e04 	addi	r6,sp,120
    41a8:	000af440 	call	af44 <__sprint_r>
    41ac:	103b981e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    41b0:	d8c02017 	ldw	r3,128(sp)
    41b4:	dc001f17 	ldw	r16,124(sp)
    41b8:	da000404 	addi	r8,sp,16
    41bc:	003e8d06 	br	3bf4 <__alt_mem_Flash_flash_data+0xf4003bf4>
    41c0:	b009883a 	mov	r4,r22
    41c4:	b80b883a 	mov	r5,r23
    41c8:	d9801e04 	addi	r6,sp,120
    41cc:	000af440 	call	af44 <__sprint_r>
    41d0:	103b8f1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    41d4:	d8c02017 	ldw	r3,128(sp)
    41d8:	dc001f17 	ldw	r16,124(sp)
    41dc:	dc800404 	addi	r18,sp,16
    41e0:	003e8f06 	br	3c20 <__alt_mem_Flash_flash_data+0xf4003c20>
    41e4:	db001e04 	addi	r12,sp,120
    41e8:	0025883a 	mov	r18,zero
    41ec:	db003115 	stw	r12,196(sp)
    41f0:	003be106 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    41f4:	b009883a 	mov	r4,r22
    41f8:	b80b883a 	mov	r5,r23
    41fc:	d9801e04 	addi	r6,sp,120
    4200:	000af440 	call	af44 <__sprint_r>
    4204:	103b821e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4208:	d8c02017 	ldw	r3,128(sp)
    420c:	da000404 	addi	r8,sp,16
    4210:	003c3b06 	br	3300 <__alt_mem_Flash_flash_data+0xf4003300>
    4214:	04e7c83a 	sub	r19,zero,r19
    4218:	9804c03a 	cmpne	r2,r19,zero
    421c:	0739c83a 	sub	fp,zero,fp
    4220:	e0b9c83a 	sub	fp,fp,r2
    4224:	05400b44 	movi	r21,45
    4228:	dd402785 	stb	r21,158(sp)
    422c:	da403215 	stw	r9,200(sp)
    4230:	00800044 	movi	r2,1
    4234:	9f06b03a 	or	r3,r19,fp
    4238:	003bb506 	br	3110 <__alt_mem_Flash_flash_data+0xf4003110>
    423c:	da003f15 	stw	r8,252(sp)
    4240:	da403e15 	stw	r9,248(sp)
    4244:	0009a400 	call	9a40 <__fpclassifyd>
    4248:	da003f17 	ldw	r8,252(sp)
    424c:	da403e17 	ldw	r9,248(sp)
    4250:	1000ce26 	beq	r2,zero,458c <___vfprintf_internal_r+0x194c>
    4254:	057ff7c4 	movi	r21,-33
    4258:	00bfffc4 	movi	r2,-1
    425c:	856a703a 	and	r21,r16,r21
    4260:	4881e826 	beq	r9,r2,4a04 <___vfprintf_internal_r+0x1dc4>
    4264:	008011c4 	movi	r2,71
    4268:	a881e326 	beq	r21,r2,49f8 <___vfprintf_internal_r+0x1db8>
    426c:	db003917 	ldw	r12,228(sp)
    4270:	8ac04014 	ori	r11,r17,256
    4274:	dac02d15 	stw	r11,180(sp)
    4278:	6001ed16 	blt	r12,zero,4a30 <___vfprintf_internal_r+0x1df0>
    427c:	dc803917 	ldw	r18,228(sp)
    4280:	d8002b05 	stb	zero,172(sp)
    4284:	00801984 	movi	r2,102
    4288:	80811826 	beq	r16,r2,46ec <___vfprintf_internal_r+0x1aac>
    428c:	00801184 	movi	r2,70
    4290:	80811626 	beq	r16,r2,46ec <___vfprintf_internal_r+0x1aac>
    4294:	00801144 	movi	r2,69
    4298:	a881e926 	beq	r21,r2,4a40 <___vfprintf_internal_r+0x1e00>
    429c:	4839883a 	mov	fp,r9
    42a0:	d8802604 	addi	r2,sp,152
    42a4:	d8800115 	stw	r2,4(sp)
    42a8:	d9403717 	ldw	r5,220(sp)
    42ac:	d8802504 	addi	r2,sp,148
    42b0:	d8800215 	stw	r2,8(sp)
    42b4:	d8802104 	addi	r2,sp,132
    42b8:	df000015 	stw	fp,0(sp)
    42bc:	d8800315 	stw	r2,12(sp)
    42c0:	b009883a 	mov	r4,r22
    42c4:	900d883a 	mov	r6,r18
    42c8:	01c00084 	movi	r7,2
    42cc:	da003f15 	stw	r8,252(sp)
    42d0:	da403e15 	stw	r9,248(sp)
    42d4:	0004fc40 	call	4fc4 <_dtoa_r>
    42d8:	d8803115 	stw	r2,196(sp)
    42dc:	008019c4 	movi	r2,103
    42e0:	da003f17 	ldw	r8,252(sp)
    42e4:	da403e17 	ldw	r9,248(sp)
    42e8:	80800226 	beq	r16,r2,42f4 <___vfprintf_internal_r+0x16b4>
    42ec:	008011c4 	movi	r2,71
    42f0:	8081101e 	bne	r16,r2,4734 <___vfprintf_internal_r+0x1af4>
    42f4:	8880004c 	andi	r2,r17,1
    42f8:	1001dd26 	beq	r2,zero,4a70 <___vfprintf_internal_r+0x1e30>
    42fc:	db003117 	ldw	r12,196(sp)
    4300:	6715883a 	add	r10,r12,fp
    4304:	d9003717 	ldw	r4,220(sp)
    4308:	900b883a 	mov	r5,r18
    430c:	000d883a 	mov	r6,zero
    4310:	000f883a 	mov	r7,zero
    4314:	da003f15 	stw	r8,252(sp)
    4318:	da403e15 	stw	r9,248(sp)
    431c:	da803d15 	stw	r10,244(sp)
    4320:	000e9e80 	call	e9e8 <__eqdf2>
    4324:	da003f17 	ldw	r8,252(sp)
    4328:	da403e17 	ldw	r9,248(sp)
    432c:	da803d17 	ldw	r10,244(sp)
    4330:	10016526 	beq	r2,zero,48c8 <___vfprintf_internal_r+0x1c88>
    4334:	d8802117 	ldw	r2,132(sp)
    4338:	1280062e 	bgeu	r2,r10,4354 <___vfprintf_internal_r+0x1714>
    433c:	01000c04 	movi	r4,48
    4340:	10c00044 	addi	r3,r2,1
    4344:	d8c02115 	stw	r3,132(sp)
    4348:	11000005 	stb	r4,0(r2)
    434c:	d8802117 	ldw	r2,132(sp)
    4350:	12bffb36 	bltu	r2,r10,4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4354:	db003117 	ldw	r12,196(sp)
    4358:	1305c83a 	sub	r2,r2,r12
    435c:	d8803315 	stw	r2,204(sp)
    4360:	008011c4 	movi	r2,71
    4364:	a8814d26 	beq	r21,r2,489c <___vfprintf_internal_r+0x1c5c>
    4368:	00801944 	movi	r2,101
    436c:	1402060e 	bge	r2,r16,4b88 <___vfprintf_internal_r+0x1f48>
    4370:	00801984 	movi	r2,102
    4374:	8081b426 	beq	r16,r2,4a48 <___vfprintf_internal_r+0x1e08>
    4378:	db002617 	ldw	r12,152(sp)
    437c:	db003415 	stw	r12,208(sp)
    4380:	db003417 	ldw	r12,208(sp)
    4384:	dac03317 	ldw	r11,204(sp)
    4388:	62c1a016 	blt	r12,r11,4a0c <___vfprintf_internal_r+0x1dcc>
    438c:	8c40004c 	andi	r17,r17,1
    4390:	8801bf1e 	bne	r17,zero,4a90 <___vfprintf_internal_r+0x1e50>
    4394:	6005883a 	mov	r2,r12
    4398:	6001b316 	blt	r12,zero,4a68 <___vfprintf_internal_r+0x1e28>
    439c:	dc803417 	ldw	r18,208(sp)
    43a0:	df002b07 	ldb	fp,172(sp)
    43a4:	e0012e1e 	bne	fp,zero,4860 <___vfprintf_internal_r+0x1c20>
    43a8:	dc402d17 	ldw	r17,180(sp)
    43ac:	dd402783 	ldbu	r21,158(sp)
    43b0:	d8802b15 	stw	r2,172(sp)
    43b4:	dcc02d15 	stw	r19,180(sp)
    43b8:	d8003215 	stw	zero,200(sp)
    43bc:	003b7306 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    43c0:	00800084 	movi	r2,2
    43c4:	003c4d06 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    43c8:	8880040c 	andi	r2,r17,16
    43cc:	1000091e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x17b4>
    43d0:	8c40100c 	andi	r17,r17,64
    43d4:	88000726 	beq	r17,zero,43f4 <___vfprintf_internal_r+0x17b4>
    43d8:	db002d17 	ldw	r12,180(sp)
    43dc:	dac02f17 	ldw	r11,188(sp)
    43e0:	60800017 	ldw	r2,0(r12)
    43e4:	63000104 	addi	r12,r12,4
    43e8:	db002d15 	stw	r12,180(sp)
    43ec:	12c0000d 	sth	r11,0(r2)
    43f0:	003a4e06 	br	2d2c <__alt_mem_Flash_flash_data+0xf4002d2c>
    43f4:	db002d17 	ldw	r12,180(sp)
    43f8:	dac02f17 	ldw	r11,188(sp)
    43fc:	60800017 	ldw	r2,0(r12)
    4400:	63000104 	addi	r12,r12,4
    4404:	db002d15 	stw	r12,180(sp)
    4408:	12c00015 	stw	r11,0(r2)
    440c:	003a4706 	br	2d2c <__alt_mem_Flash_flash_data+0xf4002d2c>
    4410:	1c000007 	ldb	r16,0(r3)
    4414:	1805883a 	mov	r2,r3
    4418:	003a6e06 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    441c:	88c0100c 	andi	r3,r17,64
    4420:	18006b26 	beq	r3,zero,45d0 <___vfprintf_internal_r+0x1990>
    4424:	dac02d17 	ldw	r11,180(sp)
    4428:	14c0000b 	ldhu	r19,0(r2)
    442c:	0039883a 	mov	fp,zero
    4430:	5ac00104 	addi	r11,r11,4
    4434:	dac02d15 	stw	r11,180(sp)
    4438:	003cb206 	br	3704 <__alt_mem_Flash_flash_data+0xf4003704>
    443c:	010000b4 	movhi	r4,2
    4440:	21318884 	addi	r4,r4,-14814
    4444:	d9002c15 	stw	r4,176(sp)
    4448:	dac02c17 	ldw	r11,176(sp)
    444c:	1c87883a 	add	r3,r3,r18
    4450:	10800044 	addi	r2,r2,1
    4454:	42c00015 	stw	r11,0(r8)
    4458:	44800115 	stw	r18,4(r8)
    445c:	d8c02015 	stw	r3,128(sp)
    4460:	d8801f15 	stw	r2,124(sp)
    4464:	010001c4 	movi	r4,7
    4468:	20bee016 	blt	r4,r2,3fec <__alt_mem_Flash_flash_data+0xf4003fec>
    446c:	42000204 	addi	r8,r8,8
    4470:	003ee506 	br	4008 <__alt_mem_Flash_flash_data+0xf4004008>
    4474:	010000b4 	movhi	r4,2
    4478:	21318884 	addi	r4,r4,-14814
    447c:	d9002c15 	stw	r4,176(sp)
    4480:	003bbe06 	br	337c <__alt_mem_Flash_flash_data+0xf400337c>
    4484:	b009883a 	mov	r4,r22
    4488:	b80b883a 	mov	r5,r23
    448c:	d9801e04 	addi	r6,sp,120
    4490:	000af440 	call	af44 <__sprint_r>
    4494:	103ade1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4498:	d8c02017 	ldw	r3,128(sp)
    449c:	da000404 	addi	r8,sp,16
    44a0:	003d6b06 	br	3a50 <__alt_mem_Flash_flash_data+0xf4003a50>
    44a4:	d8801f17 	ldw	r2,124(sp)
    44a8:	030000b4 	movhi	r12,2
    44ac:	01000044 	movi	r4,1
    44b0:	18c00044 	addi	r3,r3,1
    44b4:	10800044 	addi	r2,r2,1
    44b8:	63318004 	addi	r12,r12,-14848
    44bc:	41000115 	stw	r4,4(r8)
    44c0:	43000015 	stw	r12,0(r8)
    44c4:	d8c02015 	stw	r3,128(sp)
    44c8:	d8801f15 	stw	r2,124(sp)
    44cc:	010001c4 	movi	r4,7
    44d0:	20804916 	blt	r4,r2,45f8 <___vfprintf_internal_r+0x19b8>
    44d4:	42000204 	addi	r8,r8,8
    44d8:	8000041e 	bne	r16,zero,44ec <___vfprintf_internal_r+0x18ac>
    44dc:	dac03317 	ldw	r11,204(sp)
    44e0:	5800021e 	bne	r11,zero,44ec <___vfprintf_internal_r+0x18ac>
    44e4:	8880004c 	andi	r2,r17,1
    44e8:	103bbb26 	beq	r2,zero,33d8 <__alt_mem_Flash_flash_data+0xf40033d8>
    44ec:	db003817 	ldw	r12,224(sp)
    44f0:	d8801f17 	ldw	r2,124(sp)
    44f4:	dac03517 	ldw	r11,212(sp)
    44f8:	1b07883a 	add	r3,r3,r12
    44fc:	10800044 	addi	r2,r2,1
    4500:	42c00015 	stw	r11,0(r8)
    4504:	43000115 	stw	r12,4(r8)
    4508:	d8c02015 	stw	r3,128(sp)
    450c:	d8801f15 	stw	r2,124(sp)
    4510:	010001c4 	movi	r4,7
    4514:	20812e16 	blt	r4,r2,49d0 <___vfprintf_internal_r+0x1d90>
    4518:	42000204 	addi	r8,r8,8
    451c:	0421c83a 	sub	r16,zero,r16
    4520:	04005c0e 	bge	zero,r16,4694 <___vfprintf_internal_r+0x1a54>
    4524:	04800404 	movi	r18,16
    4528:	94009f0e 	bge	r18,r16,47a8 <___vfprintf_internal_r+0x1b68>
    452c:	010000b4 	movhi	r4,2
    4530:	21318884 	addi	r4,r4,-14814
    4534:	d9002c15 	stw	r4,176(sp)
    4538:	054001c4 	movi	r21,7
    453c:	00000306 	br	454c <___vfprintf_internal_r+0x190c>
    4540:	42000204 	addi	r8,r8,8
    4544:	843ffc04 	addi	r16,r16,-16
    4548:	94009a0e 	bge	r18,r16,47b4 <___vfprintf_internal_r+0x1b74>
    454c:	18c00404 	addi	r3,r3,16
    4550:	10800044 	addi	r2,r2,1
    4554:	45000015 	stw	r20,0(r8)
    4558:	44800115 	stw	r18,4(r8)
    455c:	d8c02015 	stw	r3,128(sp)
    4560:	d8801f15 	stw	r2,124(sp)
    4564:	a8bff60e 	bge	r21,r2,4540 <__alt_mem_Flash_flash_data+0xf4004540>
    4568:	b009883a 	mov	r4,r22
    456c:	b80b883a 	mov	r5,r23
    4570:	d9801e04 	addi	r6,sp,120
    4574:	000af440 	call	af44 <__sprint_r>
    4578:	103aa51e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    457c:	d8c02017 	ldw	r3,128(sp)
    4580:	d8801f17 	ldw	r2,124(sp)
    4584:	da000404 	addi	r8,sp,16
    4588:	003fee06 	br	4544 <__alt_mem_Flash_flash_data+0xf4004544>
    458c:	008011c4 	movi	r2,71
    4590:	1400be16 	blt	r2,r16,488c <___vfprintf_internal_r+0x1c4c>
    4594:	030000b4 	movhi	r12,2
    4598:	63317204 	addi	r12,r12,-14904
    459c:	db003115 	stw	r12,196(sp)
    45a0:	00c000c4 	movi	r3,3
    45a4:	00bfdfc4 	movi	r2,-129
    45a8:	d8c02b15 	stw	r3,172(sp)
    45ac:	88a2703a 	and	r17,r17,r2
    45b0:	dd402783 	ldbu	r21,158(sp)
    45b4:	dcc02d15 	stw	r19,180(sp)
    45b8:	1825883a 	mov	r18,r3
    45bc:	d8003215 	stw	zero,200(sp)
    45c0:	d8003415 	stw	zero,208(sp)
    45c4:	003af106 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    45c8:	4825883a 	mov	r18,r9
    45cc:	003c9306 	br	381c <__alt_mem_Flash_flash_data+0xf400381c>
    45d0:	db002d17 	ldw	r12,180(sp)
    45d4:	14c00017 	ldw	r19,0(r2)
    45d8:	0039883a 	mov	fp,zero
    45dc:	63000104 	addi	r12,r12,4
    45e0:	db002d15 	stw	r12,180(sp)
    45e4:	003c4706 	br	3704 <__alt_mem_Flash_flash_data+0xf4003704>
    45e8:	008000b4 	movhi	r2,2
    45ec:	10b17004 	addi	r2,r2,-14912
    45f0:	d8803115 	stw	r2,196(sp)
    45f4:	003bf106 	br	35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    45f8:	b009883a 	mov	r4,r22
    45fc:	b80b883a 	mov	r5,r23
    4600:	d9801e04 	addi	r6,sp,120
    4604:	000af440 	call	af44 <__sprint_r>
    4608:	103a811e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    460c:	dc002617 	ldw	r16,152(sp)
    4610:	d8c02017 	ldw	r3,128(sp)
    4614:	da000404 	addi	r8,sp,16
    4618:	003faf06 	br	44d8 <__alt_mem_Flash_flash_data+0xf40044d8>
    461c:	db002e17 	ldw	r12,184(sp)
    4620:	1805883a 	mov	r2,r3
    4624:	dac02d15 	stw	r11,180(sp)
    4628:	0319c83a 	sub	r12,zero,r12
    462c:	db002e15 	stw	r12,184(sp)
    4630:	003a8206 	br	303c <__alt_mem_Flash_flash_data+0xf400303c>
    4634:	18800044 	addi	r2,r3,1
    4638:	8c400814 	ori	r17,r17,32
    463c:	1c000047 	ldb	r16,1(r3)
    4640:	0039e406 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    4644:	b009883a 	mov	r4,r22
    4648:	b80b883a 	mov	r5,r23
    464c:	d9801e04 	addi	r6,sp,120
    4650:	000af440 	call	af44 <__sprint_r>
    4654:	103a6e1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4658:	d8c02017 	ldw	r3,128(sp)
    465c:	da000404 	addi	r8,sp,16
    4660:	003d0c06 	br	3a94 <__alt_mem_Flash_flash_data+0xf4003a94>
    4664:	db002817 	ldw	r12,160(sp)
    4668:	d8c03117 	ldw	r3,196(sp)
    466c:	60e5c83a 	sub	r18,r12,r3
    4670:	003ac106 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    4674:	b009883a 	mov	r4,r22
    4678:	b80b883a 	mov	r5,r23
    467c:	d9801e04 	addi	r6,sp,120
    4680:	000af440 	call	af44 <__sprint_r>
    4684:	103a621e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4688:	d8c02017 	ldw	r3,128(sp)
    468c:	d8801f17 	ldw	r2,124(sp)
    4690:	da000404 	addi	r8,sp,16
    4694:	db003317 	ldw	r12,204(sp)
    4698:	dac03117 	ldw	r11,196(sp)
    469c:	10800044 	addi	r2,r2,1
    46a0:	1b07883a 	add	r3,r3,r12
    46a4:	42c00015 	stw	r11,0(r8)
    46a8:	43000115 	stw	r12,4(r8)
    46ac:	d8c02015 	stw	r3,128(sp)
    46b0:	d8801f15 	stw	r2,124(sp)
    46b4:	010001c4 	movi	r4,7
    46b8:	20bb460e 	bge	r4,r2,33d4 <__alt_mem_Flash_flash_data+0xf40033d4>
    46bc:	003d8506 	br	3cd4 <__alt_mem_Flash_flash_data+0xf4003cd4>
    46c0:	da003f15 	stw	r8,252(sp)
    46c4:	0000c180 	call	c18 <strlen>
    46c8:	1025883a 	mov	r18,r2
    46cc:	da003f17 	ldw	r8,252(sp)
    46d0:	903c540e 	bge	r18,zero,3824 <__alt_mem_Flash_flash_data+0xf4003824>
    46d4:	0005883a 	mov	r2,zero
    46d8:	003c5206 	br	3824 <__alt_mem_Flash_flash_data+0xf4003824>
    46dc:	010000b4 	movhi	r4,2
    46e0:	21318c84 	addi	r4,r4,-14798
    46e4:	d9003615 	stw	r4,216(sp)
    46e8:	003adc06 	br	325c <__alt_mem_Flash_flash_data+0xf400325c>
    46ec:	d8802604 	addi	r2,sp,152
    46f0:	d8800115 	stw	r2,4(sp)
    46f4:	d9403717 	ldw	r5,220(sp)
    46f8:	d8802504 	addi	r2,sp,148
    46fc:	d8800215 	stw	r2,8(sp)
    4700:	d8802104 	addi	r2,sp,132
    4704:	da400015 	stw	r9,0(sp)
    4708:	d8800315 	stw	r2,12(sp)
    470c:	b009883a 	mov	r4,r22
    4710:	900d883a 	mov	r6,r18
    4714:	01c000c4 	movi	r7,3
    4718:	da003f15 	stw	r8,252(sp)
    471c:	da403e15 	stw	r9,248(sp)
    4720:	0004fc40 	call	4fc4 <_dtoa_r>
    4724:	da403e17 	ldw	r9,248(sp)
    4728:	da003f17 	ldw	r8,252(sp)
    472c:	d8803115 	stw	r2,196(sp)
    4730:	4839883a 	mov	fp,r9
    4734:	dac03117 	ldw	r11,196(sp)
    4738:	00801184 	movi	r2,70
    473c:	5f15883a 	add	r10,r11,fp
    4740:	a8bef01e 	bne	r21,r2,4304 <__alt_mem_Flash_flash_data+0xf4004304>
    4744:	59000007 	ldb	r4,0(r11)
    4748:	00800c04 	movi	r2,48
    474c:	2080d526 	beq	r4,r2,4aa4 <___vfprintf_internal_r+0x1e64>
    4750:	d8c02617 	ldw	r3,152(sp)
    4754:	50d5883a 	add	r10,r10,r3
    4758:	003eea06 	br	4304 <__alt_mem_Flash_flash_data+0xf4004304>
    475c:	0025883a 	mov	r18,zero
    4760:	003db306 	br	3e30 <__alt_mem_Flash_flash_data+0xf4003e30>
    4764:	b009883a 	mov	r4,r22
    4768:	b80b883a 	mov	r5,r23
    476c:	d9801e04 	addi	r6,sp,120
    4770:	000af440 	call	af44 <__sprint_r>
    4774:	103a261e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4778:	d8c02017 	ldw	r3,128(sp)
    477c:	da000404 	addi	r8,sp,16
    4780:	003daa06 	br	3e2c <__alt_mem_Flash_flash_data+0xf4003e2c>
    4784:	b009883a 	mov	r4,r22
    4788:	b80b883a 	mov	r5,r23
    478c:	d9801e04 	addi	r6,sp,120
    4790:	000af440 	call	af44 <__sprint_r>
    4794:	103a1e1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4798:	d8802617 	ldw	r2,152(sp)
    479c:	d8c02017 	ldw	r3,128(sp)
    47a0:	da000404 	addi	r8,sp,16
    47a4:	003e2c06 	br	4058 <__alt_mem_Flash_flash_data+0xf4004058>
    47a8:	030000b4 	movhi	r12,2
    47ac:	63318884 	addi	r12,r12,-14814
    47b0:	db002c15 	stw	r12,176(sp)
    47b4:	dac02c17 	ldw	r11,176(sp)
    47b8:	1c07883a 	add	r3,r3,r16
    47bc:	10800044 	addi	r2,r2,1
    47c0:	42c00015 	stw	r11,0(r8)
    47c4:	44000115 	stw	r16,4(r8)
    47c8:	d8c02015 	stw	r3,128(sp)
    47cc:	d8801f15 	stw	r2,124(sp)
    47d0:	010001c4 	movi	r4,7
    47d4:	20bfa716 	blt	r4,r2,4674 <__alt_mem_Flash_flash_data+0xf4004674>
    47d8:	42000204 	addi	r8,r8,8
    47dc:	003fad06 	br	4694 <__alt_mem_Flash_flash_data+0xf4004694>
    47e0:	00800184 	movi	r2,6
    47e4:	1240012e 	bgeu	r2,r9,47ec <___vfprintf_internal_r+0x1bac>
    47e8:	1013883a 	mov	r9,r2
    47ec:	4825883a 	mov	r18,r9
    47f0:	4805883a 	mov	r2,r9
    47f4:	4800c216 	blt	r9,zero,4b00 <___vfprintf_internal_r+0x1ec0>
    47f8:	d8802b15 	stw	r2,172(sp)
    47fc:	008000b4 	movhi	r2,2
    4800:	10b17e04 	addi	r2,r2,-14856
    4804:	d8803115 	stw	r2,196(sp)
    4808:	dcc02d15 	stw	r19,180(sp)
    480c:	d8003215 	stw	zero,200(sp)
    4810:	d8003415 	stw	zero,208(sp)
    4814:	0005883a 	mov	r2,zero
    4818:	003a6306 	br	31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    481c:	0021883a 	mov	r16,zero
    4820:	003e1f06 	br	40a0 <__alt_mem_Flash_flash_data+0xf40040a0>
    4824:	b009883a 	mov	r4,r22
    4828:	b80b883a 	mov	r5,r23
    482c:	d9801e04 	addi	r6,sp,120
    4830:	000af440 	call	af44 <__sprint_r>
    4834:	1039f61e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    4838:	d8802617 	ldw	r2,152(sp)
    483c:	db003317 	ldw	r12,204(sp)
    4840:	d8c02017 	ldw	r3,128(sp)
    4844:	da000404 	addi	r8,sp,16
    4848:	6085c83a 	sub	r2,r12,r2
    484c:	003e1306 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    4850:	030000b4 	movhi	r12,2
    4854:	63318c84 	addi	r12,r12,-14798
    4858:	db003615 	stw	r12,216(sp)
    485c:	003b0206 	br	3468 <__alt_mem_Flash_flash_data+0xf4003468>
    4860:	00c00b44 	movi	r3,45
    4864:	d8802b15 	stw	r2,172(sp)
    4868:	dc402d17 	ldw	r17,180(sp)
    486c:	d8c02785 	stb	r3,158(sp)
    4870:	dcc02d15 	stw	r19,180(sp)
    4874:	d8003215 	stw	zero,200(sp)
    4878:	00800b44 	movi	r2,45
    487c:	003a4706 	br	319c <__alt_mem_Flash_flash_data+0xf400319c>
    4880:	05400b44 	movi	r21,45
    4884:	dd402785 	stb	r21,158(sp)
    4888:	003b4706 	br	35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    488c:	008000b4 	movhi	r2,2
    4890:	10b17304 	addi	r2,r2,-14900
    4894:	d8803115 	stw	r2,196(sp)
    4898:	003f4106 	br	45a0 <__alt_mem_Flash_flash_data+0xf40045a0>
    489c:	d8c02617 	ldw	r3,152(sp)
    48a0:	00bfff44 	movi	r2,-3
    48a4:	18801116 	blt	r3,r2,48ec <___vfprintf_internal_r+0x1cac>
    48a8:	48c01016 	blt	r9,r3,48ec <___vfprintf_internal_r+0x1cac>
    48ac:	d8c03415 	stw	r3,208(sp)
    48b0:	040019c4 	movi	r16,103
    48b4:	003eb206 	br	4380 <__alt_mem_Flash_flash_data+0xf4004380>
    48b8:	010000b4 	movhi	r4,2
    48bc:	21318884 	addi	r4,r4,-14814
    48c0:	d9002c15 	stw	r4,176(sp)
    48c4:	003cb106 	br	3b8c <__alt_mem_Flash_flash_data+0xf4003b8c>
    48c8:	5005883a 	mov	r2,r10
    48cc:	003ea106 	br	4354 <__alt_mem_Flash_flash_data+0xf4004354>
    48d0:	da402b15 	stw	r9,172(sp)
    48d4:	dd402783 	ldbu	r21,158(sp)
    48d8:	4825883a 	mov	r18,r9
    48dc:	dcc02d15 	stw	r19,180(sp)
    48e0:	d8003215 	stw	zero,200(sp)
    48e4:	d8003415 	stw	zero,208(sp)
    48e8:	003a2806 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    48ec:	843fff84 	addi	r16,r16,-2
    48f0:	1f3fffc4 	addi	fp,r3,-1
    48f4:	df002615 	stw	fp,152(sp)
    48f8:	dc0022c5 	stb	r16,139(sp)
    48fc:	e0009816 	blt	fp,zero,4b60 <___vfprintf_internal_r+0x1f20>
    4900:	00800ac4 	movi	r2,43
    4904:	d8802305 	stb	r2,140(sp)
    4908:	00800244 	movi	r2,9
    490c:	1700750e 	bge	r2,fp,4ae4 <___vfprintf_internal_r+0x1ea4>
    4910:	dd4022c4 	addi	r21,sp,139
    4914:	dc002c15 	stw	r16,176(sp)
    4918:	4025883a 	mov	r18,r8
    491c:	a821883a 	mov	r16,r21
    4920:	e009883a 	mov	r4,fp
    4924:	01400284 	movi	r5,10
    4928:	000d8140 	call	d814 <__modsi3>
    492c:	10800c04 	addi	r2,r2,48
    4930:	843fffc4 	addi	r16,r16,-1
    4934:	e009883a 	mov	r4,fp
    4938:	01400284 	movi	r5,10
    493c:	80800005 	stb	r2,0(r16)
    4940:	000d7c00 	call	d7c0 <__divsi3>
    4944:	1039883a 	mov	fp,r2
    4948:	00800244 	movi	r2,9
    494c:	173ff416 	blt	r2,fp,4920 <__alt_mem_Flash_flash_data+0xf4004920>
    4950:	9011883a 	mov	r8,r18
    4954:	e0800c04 	addi	r2,fp,48
    4958:	8025883a 	mov	r18,r16
    495c:	913fffc4 	addi	r4,r18,-1
    4960:	90bfffc5 	stb	r2,-1(r18)
    4964:	dc002c17 	ldw	r16,176(sp)
    4968:	2540852e 	bgeu	r4,r21,4b80 <___vfprintf_internal_r+0x1f40>
    496c:	d9402384 	addi	r5,sp,142
    4970:	2c8bc83a 	sub	r5,r5,r18
    4974:	d8c02344 	addi	r3,sp,141
    4978:	a94b883a 	add	r5,r21,r5
    497c:	00000106 	br	4984 <___vfprintf_internal_r+0x1d44>
    4980:	20800003 	ldbu	r2,0(r4)
    4984:	18800005 	stb	r2,0(r3)
    4988:	18c00044 	addi	r3,r3,1
    498c:	21000044 	addi	r4,r4,1
    4990:	197ffb1e 	bne	r3,r5,4980 <__alt_mem_Flash_flash_data+0xf4004980>
    4994:	d8802304 	addi	r2,sp,140
    4998:	1485c83a 	sub	r2,r2,r18
    499c:	d8c02344 	addi	r3,sp,141
    49a0:	1885883a 	add	r2,r3,r2
    49a4:	dac03317 	ldw	r11,204(sp)
    49a8:	156bc83a 	sub	r21,r2,r21
    49ac:	dd403a15 	stw	r21,232(sp)
    49b0:	00800044 	movi	r2,1
    49b4:	5d65883a 	add	r18,r11,r21
    49b8:	12c0660e 	bge	r2,r11,4b54 <___vfprintf_internal_r+0x1f14>
    49bc:	94800044 	addi	r18,r18,1
    49c0:	9005883a 	mov	r2,r18
    49c4:	90006116 	blt	r18,zero,4b4c <___vfprintf_internal_r+0x1f0c>
    49c8:	d8003415 	stw	zero,208(sp)
    49cc:	003e7406 	br	43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    49d0:	b009883a 	mov	r4,r22
    49d4:	b80b883a 	mov	r5,r23
    49d8:	d9801e04 	addi	r6,sp,120
    49dc:	000af440 	call	af44 <__sprint_r>
    49e0:	10398b1e 	bne	r2,zero,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    49e4:	dc002617 	ldw	r16,152(sp)
    49e8:	d8c02017 	ldw	r3,128(sp)
    49ec:	d8801f17 	ldw	r2,124(sp)
    49f0:	da000404 	addi	r8,sp,16
    49f4:	003ec906 	br	451c <__alt_mem_Flash_flash_data+0xf400451c>
    49f8:	483e1c1e 	bne	r9,zero,426c <__alt_mem_Flash_flash_data+0xf400426c>
    49fc:	9013883a 	mov	r9,r18
    4a00:	003e1a06 	br	426c <__alt_mem_Flash_flash_data+0xf400426c>
    4a04:	02400184 	movi	r9,6
    4a08:	003e1806 	br	426c <__alt_mem_Flash_flash_data+0xf400426c>
    4a0c:	d8c03417 	ldw	r3,208(sp)
    4a10:	00c04b0e 	bge	zero,r3,4b40 <___vfprintf_internal_r+0x1f00>
    4a14:	04800044 	movi	r18,1
    4a18:	dac03317 	ldw	r11,204(sp)
    4a1c:	92e5883a 	add	r18,r18,r11
    4a20:	9005883a 	mov	r2,r18
    4a24:	903e5e0e 	bge	r18,zero,43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4a28:	0005883a 	mov	r2,zero
    4a2c:	003e5c06 	br	43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4a30:	00c00b44 	movi	r3,45
    4a34:	64a0003c 	xorhi	r18,r12,32768
    4a38:	d8c02b05 	stb	r3,172(sp)
    4a3c:	003e1106 	br	4284 <__alt_mem_Flash_flash_data+0xf4004284>
    4a40:	4f000044 	addi	fp,r9,1
    4a44:	003e1606 	br	42a0 <__alt_mem_Flash_flash_data+0xf40042a0>
    4a48:	d8c02617 	ldw	r3,152(sp)
    4a4c:	d8c03415 	stw	r3,208(sp)
    4a50:	00c0350e 	bge	zero,r3,4b28 <___vfprintf_internal_r+0x1ee8>
    4a54:	4800081e 	bne	r9,zero,4a78 <___vfprintf_internal_r+0x1e38>
    4a58:	8c40004c 	andi	r17,r17,1
    4a5c:	8800061e 	bne	r17,zero,4a78 <___vfprintf_internal_r+0x1e38>
    4a60:	1805883a 	mov	r2,r3
    4a64:	183e4d0e 	bge	r3,zero,439c <__alt_mem_Flash_flash_data+0xf400439c>
    4a68:	0005883a 	mov	r2,zero
    4a6c:	003e4b06 	br	439c <__alt_mem_Flash_flash_data+0xf400439c>
    4a70:	d8802117 	ldw	r2,132(sp)
    4a74:	003e3706 	br	4354 <__alt_mem_Flash_flash_data+0xf4004354>
    4a78:	dac03417 	ldw	r11,208(sp)
    4a7c:	4a400044 	addi	r9,r9,1
    4a80:	5a65883a 	add	r18,r11,r9
    4a84:	9005883a 	mov	r2,r18
    4a88:	903e450e 	bge	r18,zero,43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4a8c:	003fe606 	br	4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4a90:	db003417 	ldw	r12,208(sp)
    4a94:	64800044 	addi	r18,r12,1
    4a98:	9005883a 	mov	r2,r18
    4a9c:	903e400e 	bge	r18,zero,43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4aa0:	003fe106 	br	4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4aa4:	d9003717 	ldw	r4,220(sp)
    4aa8:	900b883a 	mov	r5,r18
    4aac:	000d883a 	mov	r6,zero
    4ab0:	000f883a 	mov	r7,zero
    4ab4:	da003f15 	stw	r8,252(sp)
    4ab8:	da403e15 	stw	r9,248(sp)
    4abc:	da803d15 	stw	r10,244(sp)
    4ac0:	000e9e80 	call	e9e8 <__eqdf2>
    4ac4:	da003f17 	ldw	r8,252(sp)
    4ac8:	da403e17 	ldw	r9,248(sp)
    4acc:	da803d17 	ldw	r10,244(sp)
    4ad0:	103f1f26 	beq	r2,zero,4750 <__alt_mem_Flash_flash_data+0xf4004750>
    4ad4:	00800044 	movi	r2,1
    4ad8:	1707c83a 	sub	r3,r2,fp
    4adc:	d8c02615 	stw	r3,152(sp)
    4ae0:	003f1c06 	br	4754 <__alt_mem_Flash_flash_data+0xf4004754>
    4ae4:	00800c04 	movi	r2,48
    4ae8:	e0c00c04 	addi	r3,fp,48
    4aec:	d8802345 	stb	r2,141(sp)
    4af0:	d8c02385 	stb	r3,142(sp)
    4af4:	d88023c4 	addi	r2,sp,143
    4af8:	dd4022c4 	addi	r21,sp,139
    4afc:	003fa906 	br	49a4 <__alt_mem_Flash_flash_data+0xf40049a4>
    4b00:	0005883a 	mov	r2,zero
    4b04:	003f3c06 	br	47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    4b08:	dac02d17 	ldw	r11,180(sp)
    4b0c:	5a400017 	ldw	r9,0(r11)
    4b10:	5ac00104 	addi	r11,r11,4
    4b14:	dac02d15 	stw	r11,180(sp)
    4b18:	483ec80e 	bge	r9,zero,463c <__alt_mem_Flash_flash_data+0xf400463c>
    4b1c:	027fffc4 	movi	r9,-1
    4b20:	1c000047 	ldb	r16,1(r3)
    4b24:	0038ab06 	br	2dd4 <__alt_mem_Flash_flash_data+0xf4002dd4>
    4b28:	4800111e 	bne	r9,zero,4b70 <___vfprintf_internal_r+0x1f30>
    4b2c:	8c40004c 	andi	r17,r17,1
    4b30:	88000f1e 	bne	r17,zero,4b70 <___vfprintf_internal_r+0x1f30>
    4b34:	00800044 	movi	r2,1
    4b38:	1025883a 	mov	r18,r2
    4b3c:	003e1806 	br	43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4b40:	04800084 	movi	r18,2
    4b44:	90e5c83a 	sub	r18,r18,r3
    4b48:	003fb306 	br	4a18 <__alt_mem_Flash_flash_data+0xf4004a18>
    4b4c:	0005883a 	mov	r2,zero
    4b50:	003f9d06 	br	49c8 <__alt_mem_Flash_flash_data+0xf40049c8>
    4b54:	88a2703a 	and	r17,r17,r2
    4b58:	883f9926 	beq	r17,zero,49c0 <__alt_mem_Flash_flash_data+0xf40049c0>
    4b5c:	003f9706 	br	49bc <__alt_mem_Flash_flash_data+0xf40049bc>
    4b60:	00800b44 	movi	r2,45
    4b64:	0739c83a 	sub	fp,zero,fp
    4b68:	d8802305 	stb	r2,140(sp)
    4b6c:	003f6606 	br	4908 <__alt_mem_Flash_flash_data+0xf4004908>
    4b70:	4c800084 	addi	r18,r9,2
    4b74:	9005883a 	mov	r2,r18
    4b78:	903e090e 	bge	r18,zero,43a0 <__alt_mem_Flash_flash_data+0xf40043a0>
    4b7c:	003faa06 	br	4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4b80:	d8802344 	addi	r2,sp,141
    4b84:	003f8706 	br	49a4 <__alt_mem_Flash_flash_data+0xf40049a4>
    4b88:	d8c02617 	ldw	r3,152(sp)
    4b8c:	003f5806 	br	48f0 <__alt_mem_Flash_flash_data+0xf40048f0>

00004b90 <__vfprintf_internal>:
    4b90:	2007883a 	mov	r3,r4
    4b94:	010000b4 	movhi	r4,2
    4b98:	213a9b04 	addi	r4,r4,-5524
    4b9c:	21000017 	ldw	r4,0(r4)
    4ba0:	2805883a 	mov	r2,r5
    4ba4:	300f883a 	mov	r7,r6
    4ba8:	180b883a 	mov	r5,r3
    4bac:	100d883a 	mov	r6,r2
    4bb0:	0002c401 	jmpi	2c40 <___vfprintf_internal_r>

00004bb4 <__sbprintf>:
    4bb4:	2880030b 	ldhu	r2,12(r5)
    4bb8:	2ac01917 	ldw	r11,100(r5)
    4bbc:	2a80038b 	ldhu	r10,14(r5)
    4bc0:	2a400717 	ldw	r9,28(r5)
    4bc4:	2a000917 	ldw	r8,36(r5)
    4bc8:	defee204 	addi	sp,sp,-1144
    4bcc:	00c10004 	movi	r3,1024
    4bd0:	dc011a15 	stw	r16,1128(sp)
    4bd4:	10bfff4c 	andi	r2,r2,65533
    4bd8:	2821883a 	mov	r16,r5
    4bdc:	d8cb883a 	add	r5,sp,r3
    4be0:	dc811c15 	stw	r18,1136(sp)
    4be4:	dc411b15 	stw	r17,1132(sp)
    4be8:	dfc11d15 	stw	ra,1140(sp)
    4bec:	2025883a 	mov	r18,r4
    4bf0:	d881030d 	sth	r2,1036(sp)
    4bf4:	dac11915 	stw	r11,1124(sp)
    4bf8:	da81038d 	sth	r10,1038(sp)
    4bfc:	da410715 	stw	r9,1052(sp)
    4c00:	da010915 	stw	r8,1060(sp)
    4c04:	dec10015 	stw	sp,1024(sp)
    4c08:	dec10415 	stw	sp,1040(sp)
    4c0c:	d8c10215 	stw	r3,1032(sp)
    4c10:	d8c10515 	stw	r3,1044(sp)
    4c14:	d8010615 	stw	zero,1048(sp)
    4c18:	0002c400 	call	2c40 <___vfprintf_internal_r>
    4c1c:	1023883a 	mov	r17,r2
    4c20:	10000416 	blt	r2,zero,4c34 <__sbprintf+0x80>
    4c24:	9009883a 	mov	r4,r18
    4c28:	d9410004 	addi	r5,sp,1024
    4c2c:	00068f40 	call	68f4 <_fflush_r>
    4c30:	10000d1e 	bne	r2,zero,4c68 <__sbprintf+0xb4>
    4c34:	d8c1030b 	ldhu	r3,1036(sp)
    4c38:	18c0100c 	andi	r3,r3,64
    4c3c:	18000326 	beq	r3,zero,4c4c <__sbprintf+0x98>
    4c40:	8080030b 	ldhu	r2,12(r16)
    4c44:	10801014 	ori	r2,r2,64
    4c48:	8080030d 	sth	r2,12(r16)
    4c4c:	8805883a 	mov	r2,r17
    4c50:	dfc11d17 	ldw	ra,1140(sp)
    4c54:	dc811c17 	ldw	r18,1136(sp)
    4c58:	dc411b17 	ldw	r17,1132(sp)
    4c5c:	dc011a17 	ldw	r16,1128(sp)
    4c60:	dec11e04 	addi	sp,sp,1144
    4c64:	f800283a 	ret
    4c68:	047fffc4 	movi	r17,-1
    4c6c:	003ff106 	br	4c34 <__alt_mem_Flash_flash_data+0xf4004c34>

00004c70 <__swsetup_r>:
    4c70:	008000b4 	movhi	r2,2
    4c74:	defffd04 	addi	sp,sp,-12
    4c78:	10ba9b04 	addi	r2,r2,-5524
    4c7c:	dc400115 	stw	r17,4(sp)
    4c80:	2023883a 	mov	r17,r4
    4c84:	11000017 	ldw	r4,0(r2)
    4c88:	dc000015 	stw	r16,0(sp)
    4c8c:	dfc00215 	stw	ra,8(sp)
    4c90:	2821883a 	mov	r16,r5
    4c94:	20000226 	beq	r4,zero,4ca0 <__swsetup_r+0x30>
    4c98:	20c00e17 	ldw	r3,56(r4)
    4c9c:	18003126 	beq	r3,zero,4d64 <__swsetup_r+0xf4>
    4ca0:	8080030b 	ldhu	r2,12(r16)
    4ca4:	10c0020c 	andi	r3,r2,8
    4ca8:	100d883a 	mov	r6,r2
    4cac:	18000f26 	beq	r3,zero,4cec <__swsetup_r+0x7c>
    4cb0:	80c00417 	ldw	r3,16(r16)
    4cb4:	18001526 	beq	r3,zero,4d0c <__swsetup_r+0x9c>
    4cb8:	1100004c 	andi	r4,r2,1
    4cbc:	20001c1e 	bne	r4,zero,4d30 <__swsetup_r+0xc0>
    4cc0:	1080008c 	andi	r2,r2,2
    4cc4:	1000291e 	bne	r2,zero,4d6c <__swsetup_r+0xfc>
    4cc8:	80800517 	ldw	r2,20(r16)
    4ccc:	80800215 	stw	r2,8(r16)
    4cd0:	18001c26 	beq	r3,zero,4d44 <__swsetup_r+0xd4>
    4cd4:	0005883a 	mov	r2,zero
    4cd8:	dfc00217 	ldw	ra,8(sp)
    4cdc:	dc400117 	ldw	r17,4(sp)
    4ce0:	dc000017 	ldw	r16,0(sp)
    4ce4:	dec00304 	addi	sp,sp,12
    4ce8:	f800283a 	ret
    4cec:	3080040c 	andi	r2,r6,16
    4cf0:	10002e26 	beq	r2,zero,4dac <__swsetup_r+0x13c>
    4cf4:	3080010c 	andi	r2,r6,4
    4cf8:	10001e1e 	bne	r2,zero,4d74 <__swsetup_r+0x104>
    4cfc:	80c00417 	ldw	r3,16(r16)
    4d00:	30800214 	ori	r2,r6,8
    4d04:	8080030d 	sth	r2,12(r16)
    4d08:	183feb1e 	bne	r3,zero,4cb8 <__alt_mem_Flash_flash_data+0xf4004cb8>
    4d0c:	1140a00c 	andi	r5,r2,640
    4d10:	01008004 	movi	r4,512
    4d14:	293fe826 	beq	r5,r4,4cb8 <__alt_mem_Flash_flash_data+0xf4004cb8>
    4d18:	8809883a 	mov	r4,r17
    4d1c:	800b883a 	mov	r5,r16
    4d20:	000785c0 	call	785c <__smakebuf_r>
    4d24:	8080030b 	ldhu	r2,12(r16)
    4d28:	80c00417 	ldw	r3,16(r16)
    4d2c:	003fe206 	br	4cb8 <__alt_mem_Flash_flash_data+0xf4004cb8>
    4d30:	80800517 	ldw	r2,20(r16)
    4d34:	80000215 	stw	zero,8(r16)
    4d38:	0085c83a 	sub	r2,zero,r2
    4d3c:	80800615 	stw	r2,24(r16)
    4d40:	183fe41e 	bne	r3,zero,4cd4 <__alt_mem_Flash_flash_data+0xf4004cd4>
    4d44:	80c0030b 	ldhu	r3,12(r16)
    4d48:	0005883a 	mov	r2,zero
    4d4c:	1900200c 	andi	r4,r3,128
    4d50:	203fe126 	beq	r4,zero,4cd8 <__alt_mem_Flash_flash_data+0xf4004cd8>
    4d54:	18c01014 	ori	r3,r3,64
    4d58:	80c0030d 	sth	r3,12(r16)
    4d5c:	00bfffc4 	movi	r2,-1
    4d60:	003fdd06 	br	4cd8 <__alt_mem_Flash_flash_data+0xf4004cd8>
    4d64:	0006cd00 	call	6cd0 <__sinit>
    4d68:	003fcd06 	br	4ca0 <__alt_mem_Flash_flash_data+0xf4004ca0>
    4d6c:	0005883a 	mov	r2,zero
    4d70:	003fd606 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4d74:	81400c17 	ldw	r5,48(r16)
    4d78:	28000626 	beq	r5,zero,4d94 <__swsetup_r+0x124>
    4d7c:	80801004 	addi	r2,r16,64
    4d80:	28800326 	beq	r5,r2,4d90 <__swsetup_r+0x120>
    4d84:	8809883a 	mov	r4,r17
    4d88:	0006e440 	call	6e44 <_free_r>
    4d8c:	8180030b 	ldhu	r6,12(r16)
    4d90:	80000c15 	stw	zero,48(r16)
    4d94:	80c00417 	ldw	r3,16(r16)
    4d98:	00bff6c4 	movi	r2,-37
    4d9c:	118c703a 	and	r6,r2,r6
    4da0:	80000115 	stw	zero,4(r16)
    4da4:	80c00015 	stw	r3,0(r16)
    4da8:	003fd506 	br	4d00 <__alt_mem_Flash_flash_data+0xf4004d00>
    4dac:	00800244 	movi	r2,9
    4db0:	88800015 	stw	r2,0(r17)
    4db4:	30801014 	ori	r2,r6,64
    4db8:	8080030d 	sth	r2,12(r16)
    4dbc:	00bfffc4 	movi	r2,-1
    4dc0:	003fc506 	br	4cd8 <__alt_mem_Flash_flash_data+0xf4004cd8>

00004dc4 <quorem>:
    4dc4:	defff704 	addi	sp,sp,-36
    4dc8:	dc800215 	stw	r18,8(sp)
    4dcc:	20800417 	ldw	r2,16(r4)
    4dd0:	2c800417 	ldw	r18,16(r5)
    4dd4:	dfc00815 	stw	ra,32(sp)
    4dd8:	ddc00715 	stw	r23,28(sp)
    4ddc:	dd800615 	stw	r22,24(sp)
    4de0:	dd400515 	stw	r21,20(sp)
    4de4:	dd000415 	stw	r20,16(sp)
    4de8:	dcc00315 	stw	r19,12(sp)
    4dec:	dc400115 	stw	r17,4(sp)
    4df0:	dc000015 	stw	r16,0(sp)
    4df4:	14807116 	blt	r2,r18,4fbc <quorem+0x1f8>
    4df8:	94bfffc4 	addi	r18,r18,-1
    4dfc:	94ad883a 	add	r22,r18,r18
    4e00:	b5ad883a 	add	r22,r22,r22
    4e04:	2c400504 	addi	r17,r5,20
    4e08:	8da9883a 	add	r20,r17,r22
    4e0c:	25400504 	addi	r21,r4,20
    4e10:	282f883a 	mov	r23,r5
    4e14:	adad883a 	add	r22,r21,r22
    4e18:	a1400017 	ldw	r5,0(r20)
    4e1c:	2021883a 	mov	r16,r4
    4e20:	b1000017 	ldw	r4,0(r22)
    4e24:	29400044 	addi	r5,r5,1
    4e28:	000d8700 	call	d870 <__udivsi3>
    4e2c:	1027883a 	mov	r19,r2
    4e30:	10002c26 	beq	r2,zero,4ee4 <quorem+0x120>
    4e34:	a813883a 	mov	r9,r21
    4e38:	8811883a 	mov	r8,r17
    4e3c:	0009883a 	mov	r4,zero
    4e40:	000d883a 	mov	r6,zero
    4e44:	41c00017 	ldw	r7,0(r8)
    4e48:	49400017 	ldw	r5,0(r9)
    4e4c:	42000104 	addi	r8,r8,4
    4e50:	38bfffcc 	andi	r2,r7,65535
    4e54:	14c5383a 	mul	r2,r2,r19
    4e58:	380ed43a 	srli	r7,r7,16
    4e5c:	28ffffcc 	andi	r3,r5,65535
    4e60:	2085883a 	add	r2,r4,r2
    4e64:	1008d43a 	srli	r4,r2,16
    4e68:	3ccf383a 	mul	r7,r7,r19
    4e6c:	198d883a 	add	r6,r3,r6
    4e70:	10ffffcc 	andi	r3,r2,65535
    4e74:	30c7c83a 	sub	r3,r6,r3
    4e78:	280ad43a 	srli	r5,r5,16
    4e7c:	21c9883a 	add	r4,r4,r7
    4e80:	180dd43a 	srai	r6,r3,16
    4e84:	20bfffcc 	andi	r2,r4,65535
    4e88:	288bc83a 	sub	r5,r5,r2
    4e8c:	298b883a 	add	r5,r5,r6
    4e90:	280e943a 	slli	r7,r5,16
    4e94:	18ffffcc 	andi	r3,r3,65535
    4e98:	2008d43a 	srli	r4,r4,16
    4e9c:	38ceb03a 	or	r7,r7,r3
    4ea0:	49c00015 	stw	r7,0(r9)
    4ea4:	280dd43a 	srai	r6,r5,16
    4ea8:	4a400104 	addi	r9,r9,4
    4eac:	a23fe52e 	bgeu	r20,r8,4e44 <__alt_mem_Flash_flash_data+0xf4004e44>
    4eb0:	b0800017 	ldw	r2,0(r22)
    4eb4:	10000b1e 	bne	r2,zero,4ee4 <quorem+0x120>
    4eb8:	b0bfff04 	addi	r2,r22,-4
    4ebc:	a880082e 	bgeu	r21,r2,4ee0 <quorem+0x11c>
    4ec0:	b0ffff17 	ldw	r3,-4(r22)
    4ec4:	18000326 	beq	r3,zero,4ed4 <quorem+0x110>
    4ec8:	00000506 	br	4ee0 <quorem+0x11c>
    4ecc:	10c00017 	ldw	r3,0(r2)
    4ed0:	1800031e 	bne	r3,zero,4ee0 <quorem+0x11c>
    4ed4:	10bfff04 	addi	r2,r2,-4
    4ed8:	94bfffc4 	addi	r18,r18,-1
    4edc:	a8bffb36 	bltu	r21,r2,4ecc <__alt_mem_Flash_flash_data+0xf4004ecc>
    4ee0:	84800415 	stw	r18,16(r16)
    4ee4:	8009883a 	mov	r4,r16
    4ee8:	b80b883a 	mov	r5,r23
    4eec:	0008e0c0 	call	8e0c <__mcmp>
    4ef0:	10002616 	blt	r2,zero,4f8c <quorem+0x1c8>
    4ef4:	9cc00044 	addi	r19,r19,1
    4ef8:	a80d883a 	mov	r6,r21
    4efc:	000b883a 	mov	r5,zero
    4f00:	31000017 	ldw	r4,0(r6)
    4f04:	88800017 	ldw	r2,0(r17)
    4f08:	31800104 	addi	r6,r6,4
    4f0c:	20ffffcc 	andi	r3,r4,65535
    4f10:	194b883a 	add	r5,r3,r5
    4f14:	10ffffcc 	andi	r3,r2,65535
    4f18:	28c7c83a 	sub	r3,r5,r3
    4f1c:	1004d43a 	srli	r2,r2,16
    4f20:	2008d43a 	srli	r4,r4,16
    4f24:	180bd43a 	srai	r5,r3,16
    4f28:	18ffffcc 	andi	r3,r3,65535
    4f2c:	2089c83a 	sub	r4,r4,r2
    4f30:	2149883a 	add	r4,r4,r5
    4f34:	2004943a 	slli	r2,r4,16
    4f38:	8c400104 	addi	r17,r17,4
    4f3c:	200bd43a 	srai	r5,r4,16
    4f40:	10c6b03a 	or	r3,r2,r3
    4f44:	30ffff15 	stw	r3,-4(r6)
    4f48:	a47fed2e 	bgeu	r20,r17,4f00 <__alt_mem_Flash_flash_data+0xf4004f00>
    4f4c:	9485883a 	add	r2,r18,r18
    4f50:	1085883a 	add	r2,r2,r2
    4f54:	a887883a 	add	r3,r21,r2
    4f58:	18800017 	ldw	r2,0(r3)
    4f5c:	10000b1e 	bne	r2,zero,4f8c <quorem+0x1c8>
    4f60:	18bfff04 	addi	r2,r3,-4
    4f64:	a880082e 	bgeu	r21,r2,4f88 <quorem+0x1c4>
    4f68:	18ffff17 	ldw	r3,-4(r3)
    4f6c:	18000326 	beq	r3,zero,4f7c <quorem+0x1b8>
    4f70:	00000506 	br	4f88 <quorem+0x1c4>
    4f74:	10c00017 	ldw	r3,0(r2)
    4f78:	1800031e 	bne	r3,zero,4f88 <quorem+0x1c4>
    4f7c:	10bfff04 	addi	r2,r2,-4
    4f80:	94bfffc4 	addi	r18,r18,-1
    4f84:	a8bffb36 	bltu	r21,r2,4f74 <__alt_mem_Flash_flash_data+0xf4004f74>
    4f88:	84800415 	stw	r18,16(r16)
    4f8c:	9805883a 	mov	r2,r19
    4f90:	dfc00817 	ldw	ra,32(sp)
    4f94:	ddc00717 	ldw	r23,28(sp)
    4f98:	dd800617 	ldw	r22,24(sp)
    4f9c:	dd400517 	ldw	r21,20(sp)
    4fa0:	dd000417 	ldw	r20,16(sp)
    4fa4:	dcc00317 	ldw	r19,12(sp)
    4fa8:	dc800217 	ldw	r18,8(sp)
    4fac:	dc400117 	ldw	r17,4(sp)
    4fb0:	dc000017 	ldw	r16,0(sp)
    4fb4:	dec00904 	addi	sp,sp,36
    4fb8:	f800283a 	ret
    4fbc:	0005883a 	mov	r2,zero
    4fc0:	003ff306 	br	4f90 <__alt_mem_Flash_flash_data+0xf4004f90>

00004fc4 <_dtoa_r>:
    4fc4:	20801017 	ldw	r2,64(r4)
    4fc8:	deffde04 	addi	sp,sp,-136
    4fcc:	dd401d15 	stw	r21,116(sp)
    4fd0:	dcc01b15 	stw	r19,108(sp)
    4fd4:	dc801a15 	stw	r18,104(sp)
    4fd8:	dc401915 	stw	r17,100(sp)
    4fdc:	dc001815 	stw	r16,96(sp)
    4fe0:	dfc02115 	stw	ra,132(sp)
    4fe4:	df002015 	stw	fp,128(sp)
    4fe8:	ddc01f15 	stw	r23,124(sp)
    4fec:	dd801e15 	stw	r22,120(sp)
    4ff0:	dd001c15 	stw	r20,112(sp)
    4ff4:	d9c00315 	stw	r7,12(sp)
    4ff8:	2021883a 	mov	r16,r4
    4ffc:	302b883a 	mov	r21,r6
    5000:	2825883a 	mov	r18,r5
    5004:	dc402417 	ldw	r17,144(sp)
    5008:	3027883a 	mov	r19,r6
    500c:	10000826 	beq	r2,zero,5030 <_dtoa_r+0x6c>
    5010:	21801117 	ldw	r6,68(r4)
    5014:	00c00044 	movi	r3,1
    5018:	100b883a 	mov	r5,r2
    501c:	1986983a 	sll	r3,r3,r6
    5020:	11800115 	stw	r6,4(r2)
    5024:	10c00215 	stw	r3,8(r2)
    5028:	00085e00 	call	85e0 <_Bfree>
    502c:	80001015 	stw	zero,64(r16)
    5030:	a8002d16 	blt	r21,zero,50e8 <_dtoa_r+0x124>
    5034:	88000015 	stw	zero,0(r17)
    5038:	a8dffc2c 	andhi	r3,r21,32752
    503c:	009ffc34 	movhi	r2,32752
    5040:	18801b26 	beq	r3,r2,50b0 <_dtoa_r+0xec>
    5044:	9009883a 	mov	r4,r18
    5048:	980b883a 	mov	r5,r19
    504c:	000d883a 	mov	r6,zero
    5050:	000f883a 	mov	r7,zero
    5054:	000e9e80 	call	e9e8 <__eqdf2>
    5058:	10002a1e 	bne	r2,zero,5104 <_dtoa_r+0x140>
    505c:	d8c02317 	ldw	r3,140(sp)
    5060:	d9002517 	ldw	r4,148(sp)
    5064:	00800044 	movi	r2,1
    5068:	18800015 	stw	r2,0(r3)
    506c:	2001a226 	beq	r4,zero,56f8 <_dtoa_r+0x734>
    5070:	008000b4 	movhi	r2,2
    5074:	10b18044 	addi	r2,r2,-14847
    5078:	20800015 	stw	r2,0(r4)
    507c:	10bfffc4 	addi	r2,r2,-1
    5080:	dfc02117 	ldw	ra,132(sp)
    5084:	df002017 	ldw	fp,128(sp)
    5088:	ddc01f17 	ldw	r23,124(sp)
    508c:	dd801e17 	ldw	r22,120(sp)
    5090:	dd401d17 	ldw	r21,116(sp)
    5094:	dd001c17 	ldw	r20,112(sp)
    5098:	dcc01b17 	ldw	r19,108(sp)
    509c:	dc801a17 	ldw	r18,104(sp)
    50a0:	dc401917 	ldw	r17,100(sp)
    50a4:	dc001817 	ldw	r16,96(sp)
    50a8:	dec02204 	addi	sp,sp,136
    50ac:	f800283a 	ret
    50b0:	d8c02317 	ldw	r3,140(sp)
    50b4:	0089c3c4 	movi	r2,9999
    50b8:	18800015 	stw	r2,0(r3)
    50bc:	90017c26 	beq	r18,zero,56b0 <_dtoa_r+0x6ec>
    50c0:	008000b4 	movhi	r2,2
    50c4:	10b19404 	addi	r2,r2,-14768
    50c8:	d9002517 	ldw	r4,148(sp)
    50cc:	203fec26 	beq	r4,zero,5080 <__alt_mem_Flash_flash_data+0xf4005080>
    50d0:	10c000c7 	ldb	r3,3(r2)
    50d4:	18017d1e 	bne	r3,zero,56cc <_dtoa_r+0x708>
    50d8:	10c000c4 	addi	r3,r2,3
    50dc:	d9802517 	ldw	r6,148(sp)
    50e0:	30c00015 	stw	r3,0(r6)
    50e4:	003fe606 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    50e8:	04e00034 	movhi	r19,32768
    50ec:	9cffffc4 	addi	r19,r19,-1
    50f0:	00800044 	movi	r2,1
    50f4:	ace6703a 	and	r19,r21,r19
    50f8:	88800015 	stw	r2,0(r17)
    50fc:	982b883a 	mov	r21,r19
    5100:	003fcd06 	br	5038 <__alt_mem_Flash_flash_data+0xf4005038>
    5104:	d8800204 	addi	r2,sp,8
    5108:	a822d53a 	srli	r17,r21,20
    510c:	d8800015 	stw	r2,0(sp)
    5110:	8009883a 	mov	r4,r16
    5114:	900b883a 	mov	r5,r18
    5118:	980d883a 	mov	r6,r19
    511c:	d9c00104 	addi	r7,sp,4
    5120:	00091800 	call	9180 <__d2b>
    5124:	1039883a 	mov	fp,r2
    5128:	88016a1e 	bne	r17,zero,56d4 <_dtoa_r+0x710>
    512c:	dd000217 	ldw	r20,8(sp)
    5130:	dc400117 	ldw	r17,4(sp)
    5134:	00befbc4 	movi	r2,-1041
    5138:	a463883a 	add	r17,r20,r17
    513c:	8882ea16 	blt	r17,r2,5ce8 <_dtoa_r+0xd24>
    5140:	00bf0384 	movi	r2,-1010
    5144:	1445c83a 	sub	r2,r2,r17
    5148:	89010484 	addi	r4,r17,1042
    514c:	a8aa983a 	sll	r21,r21,r2
    5150:	9108d83a 	srl	r4,r18,r4
    5154:	a908b03a 	or	r4,r21,r4
    5158:	000fd780 	call	fd78 <__floatunsidf>
    515c:	017f8434 	movhi	r5,65040
    5160:	01800044 	movi	r6,1
    5164:	1009883a 	mov	r4,r2
    5168:	194b883a 	add	r5,r3,r5
    516c:	8c7fffc4 	addi	r17,r17,-1
    5170:	d9800f15 	stw	r6,60(sp)
    5174:	000d883a 	mov	r6,zero
    5178:	01cffe34 	movhi	r7,16376
    517c:	000f3500 	call	f350 <__subdf3>
    5180:	0198dbf4 	movhi	r6,25455
    5184:	01cff4f4 	movhi	r7,16339
    5188:	1009883a 	mov	r4,r2
    518c:	180b883a 	mov	r5,r3
    5190:	3190d844 	addi	r6,r6,17249
    5194:	39e1e9c4 	addi	r7,r7,-30809
    5198:	000ec2c0 	call	ec2c <__muldf3>
    519c:	01a2d874 	movhi	r6,35681
    51a0:	01cff1f4 	movhi	r7,16327
    51a4:	180b883a 	mov	r5,r3
    51a8:	31b22cc4 	addi	r6,r6,-14157
    51ac:	39e28a04 	addi	r7,r7,-30168
    51b0:	1009883a 	mov	r4,r2
    51b4:	000d8800 	call	d880 <__adddf3>
    51b8:	8809883a 	mov	r4,r17
    51bc:	102d883a 	mov	r22,r2
    51c0:	182b883a 	mov	r21,r3
    51c4:	000fca80 	call	fca8 <__floatsidf>
    51c8:	019427f4 	movhi	r6,20639
    51cc:	01cff4f4 	movhi	r7,16339
    51d0:	1009883a 	mov	r4,r2
    51d4:	180b883a 	mov	r5,r3
    51d8:	319e7ec4 	addi	r6,r6,31227
    51dc:	39d104c4 	addi	r7,r7,17427
    51e0:	000ec2c0 	call	ec2c <__muldf3>
    51e4:	b009883a 	mov	r4,r22
    51e8:	a80b883a 	mov	r5,r21
    51ec:	100d883a 	mov	r6,r2
    51f0:	180f883a 	mov	r7,r3
    51f4:	000d8800 	call	d880 <__adddf3>
    51f8:	1009883a 	mov	r4,r2
    51fc:	180b883a 	mov	r5,r3
    5200:	102d883a 	mov	r22,r2
    5204:	182b883a 	mov	r21,r3
    5208:	000fc200 	call	fc20 <__fixdfsi>
    520c:	b009883a 	mov	r4,r22
    5210:	a80b883a 	mov	r5,r21
    5214:	000d883a 	mov	r6,zero
    5218:	000f883a 	mov	r7,zero
    521c:	d8800515 	stw	r2,20(sp)
    5220:	000eb4c0 	call	eb4c <__ledf2>
    5224:	10023116 	blt	r2,zero,5aec <_dtoa_r+0xb28>
    5228:	d8c00517 	ldw	r3,20(sp)
    522c:	00800584 	movi	r2,22
    5230:	10c21f36 	bltu	r2,r3,5ab0 <_dtoa_r+0xaec>
    5234:	180490fa 	slli	r2,r3,3
    5238:	00c000b4 	movhi	r3,2
    523c:	18f1b004 	addi	r3,r3,-14656
    5240:	1885883a 	add	r2,r3,r2
    5244:	11000017 	ldw	r4,0(r2)
    5248:	11400117 	ldw	r5,4(r2)
    524c:	900d883a 	mov	r6,r18
    5250:	980f883a 	mov	r7,r19
    5254:	000ea6c0 	call	ea6c <__gedf2>
    5258:	0082a70e 	bge	zero,r2,5cf8 <_dtoa_r+0xd34>
    525c:	d9000517 	ldw	r4,20(sp)
    5260:	d8000d15 	stw	zero,52(sp)
    5264:	213fffc4 	addi	r4,r4,-1
    5268:	d9000515 	stw	r4,20(sp)
    526c:	a463c83a 	sub	r17,r20,r17
    5270:	8dbfffc4 	addi	r22,r17,-1
    5274:	b0021916 	blt	r22,zero,5adc <_dtoa_r+0xb18>
    5278:	d8000815 	stw	zero,32(sp)
    527c:	d8800517 	ldw	r2,20(sp)
    5280:	10020e16 	blt	r2,zero,5abc <_dtoa_r+0xaf8>
    5284:	b0ad883a 	add	r22,r22,r2
    5288:	d8800a15 	stw	r2,40(sp)
    528c:	d8000915 	stw	zero,36(sp)
    5290:	d8c00317 	ldw	r3,12(sp)
    5294:	00800244 	movi	r2,9
    5298:	10c11a36 	bltu	r2,r3,5704 <_dtoa_r+0x740>
    529c:	00800144 	movi	r2,5
    52a0:	10c4fc0e 	bge	r2,r3,6694 <_dtoa_r+0x16d0>
    52a4:	18ffff04 	addi	r3,r3,-4
    52a8:	d8c00315 	stw	r3,12(sp)
    52ac:	0029883a 	mov	r20,zero
    52b0:	d9800317 	ldw	r6,12(sp)
    52b4:	008000c4 	movi	r2,3
    52b8:	3083bd26 	beq	r6,r2,61b0 <_dtoa_r+0x11ec>
    52bc:	1183670e 	bge	r2,r6,605c <_dtoa_r+0x1098>
    52c0:	d8c00317 	ldw	r3,12(sp)
    52c4:	00800104 	movi	r2,4
    52c8:	1882e726 	beq	r3,r2,5e68 <_dtoa_r+0xea4>
    52cc:	00800144 	movi	r2,5
    52d0:	1884f21e 	bne	r3,r2,669c <_dtoa_r+0x16d8>
    52d4:	00800044 	movi	r2,1
    52d8:	d8800b15 	stw	r2,44(sp)
    52dc:	d8c02217 	ldw	r3,136(sp)
    52e0:	d9000517 	ldw	r4,20(sp)
    52e4:	1907883a 	add	r3,r3,r4
    52e8:	19800044 	addi	r6,r3,1
    52ec:	d8c00c15 	stw	r3,48(sp)
    52f0:	d9800615 	stw	r6,24(sp)
    52f4:	0183c30e 	bge	zero,r6,6204 <_dtoa_r+0x1240>
    52f8:	d9800617 	ldw	r6,24(sp)
    52fc:	3023883a 	mov	r17,r6
    5300:	80001115 	stw	zero,68(r16)
    5304:	008005c4 	movi	r2,23
    5308:	1184f62e 	bgeu	r2,r6,66e4 <_dtoa_r+0x1720>
    530c:	00c00044 	movi	r3,1
    5310:	00800104 	movi	r2,4
    5314:	1085883a 	add	r2,r2,r2
    5318:	11000504 	addi	r4,r2,20
    531c:	180b883a 	mov	r5,r3
    5320:	18c00044 	addi	r3,r3,1
    5324:	313ffb2e 	bgeu	r6,r4,5314 <__alt_mem_Flash_flash_data+0xf4005314>
    5328:	81401115 	stw	r5,68(r16)
    532c:	8009883a 	mov	r4,r16
    5330:	00085380 	call	8538 <_Balloc>
    5334:	d8800715 	stw	r2,28(sp)
    5338:	80801015 	stw	r2,64(r16)
    533c:	00800384 	movi	r2,14
    5340:	1440fd36 	bltu	r2,r17,5738 <_dtoa_r+0x774>
    5344:	a000fc26 	beq	r20,zero,5738 <_dtoa_r+0x774>
    5348:	d8800517 	ldw	r2,20(sp)
    534c:	0083b90e 	bge	zero,r2,6234 <_dtoa_r+0x1270>
    5350:	d8c00517 	ldw	r3,20(sp)
    5354:	108003cc 	andi	r2,r2,15
    5358:	100490fa 	slli	r2,r2,3
    535c:	182fd13a 	srai	r23,r3,4
    5360:	00c000b4 	movhi	r3,2
    5364:	18f1b004 	addi	r3,r3,-14656
    5368:	1885883a 	add	r2,r3,r2
    536c:	b8c0040c 	andi	r3,r23,16
    5370:	12c00017 	ldw	r11,0(r2)
    5374:	12800117 	ldw	r10,4(r2)
    5378:	18039726 	beq	r3,zero,61d8 <_dtoa_r+0x1214>
    537c:	008000b4 	movhi	r2,2
    5380:	10b1a604 	addi	r2,r2,-14696
    5384:	11800817 	ldw	r6,32(r2)
    5388:	11c00917 	ldw	r7,36(r2)
    538c:	9009883a 	mov	r4,r18
    5390:	980b883a 	mov	r5,r19
    5394:	da801615 	stw	r10,88(sp)
    5398:	dac01515 	stw	r11,84(sp)
    539c:	000e11c0 	call	e11c <__divdf3>
    53a0:	da801617 	ldw	r10,88(sp)
    53a4:	dac01517 	ldw	r11,84(sp)
    53a8:	bdc003cc 	andi	r23,r23,15
    53ac:	044000c4 	movi	r17,3
    53b0:	d8800e15 	stw	r2,56(sp)
    53b4:	182b883a 	mov	r21,r3
    53b8:	b8001126 	beq	r23,zero,5400 <_dtoa_r+0x43c>
    53bc:	050000b4 	movhi	r20,2
    53c0:	a531a604 	addi	r20,r20,-14696
    53c4:	5805883a 	mov	r2,r11
    53c8:	5007883a 	mov	r3,r10
    53cc:	b980004c 	andi	r6,r23,1
    53d0:	1009883a 	mov	r4,r2
    53d4:	b82fd07a 	srai	r23,r23,1
    53d8:	180b883a 	mov	r5,r3
    53dc:	30000426 	beq	r6,zero,53f0 <_dtoa_r+0x42c>
    53e0:	a1800017 	ldw	r6,0(r20)
    53e4:	a1c00117 	ldw	r7,4(r20)
    53e8:	8c400044 	addi	r17,r17,1
    53ec:	000ec2c0 	call	ec2c <__muldf3>
    53f0:	a5000204 	addi	r20,r20,8
    53f4:	b83ff51e 	bne	r23,zero,53cc <__alt_mem_Flash_flash_data+0xf40053cc>
    53f8:	1017883a 	mov	r11,r2
    53fc:	1815883a 	mov	r10,r3
    5400:	d9000e17 	ldw	r4,56(sp)
    5404:	a80b883a 	mov	r5,r21
    5408:	580d883a 	mov	r6,r11
    540c:	500f883a 	mov	r7,r10
    5410:	000e11c0 	call	e11c <__divdf3>
    5414:	1029883a 	mov	r20,r2
    5418:	182b883a 	mov	r21,r3
    541c:	d9800d17 	ldw	r6,52(sp)
    5420:	30000626 	beq	r6,zero,543c <_dtoa_r+0x478>
    5424:	a009883a 	mov	r4,r20
    5428:	a80b883a 	mov	r5,r21
    542c:	000d883a 	mov	r6,zero
    5430:	01cffc34 	movhi	r7,16368
    5434:	000eb4c0 	call	eb4c <__ledf2>
    5438:	10043216 	blt	r2,zero,6504 <_dtoa_r+0x1540>
    543c:	8809883a 	mov	r4,r17
    5440:	000fca80 	call	fca8 <__floatsidf>
    5444:	1009883a 	mov	r4,r2
    5448:	180b883a 	mov	r5,r3
    544c:	a00d883a 	mov	r6,r20
    5450:	a80f883a 	mov	r7,r21
    5454:	000ec2c0 	call	ec2c <__muldf3>
    5458:	000d883a 	mov	r6,zero
    545c:	1009883a 	mov	r4,r2
    5460:	180b883a 	mov	r5,r3
    5464:	01d00734 	movhi	r7,16412
    5468:	000d8800 	call	d880 <__adddf3>
    546c:	1023883a 	mov	r17,r2
    5470:	d9800617 	ldw	r6,24(sp)
    5474:	00bf3034 	movhi	r2,64704
    5478:	1885883a 	add	r2,r3,r2
    547c:	d8800e15 	stw	r2,56(sp)
    5480:	30032e26 	beq	r6,zero,613c <_dtoa_r+0x1178>
    5484:	d8c00517 	ldw	r3,20(sp)
    5488:	da800617 	ldw	r10,24(sp)
    548c:	d8c01215 	stw	r3,72(sp)
    5490:	d9000b17 	ldw	r4,44(sp)
    5494:	2003b026 	beq	r4,zero,6358 <_dtoa_r+0x1394>
    5498:	50bfffc4 	addi	r2,r10,-1
    549c:	100490fa 	slli	r2,r2,3
    54a0:	00c000b4 	movhi	r3,2
    54a4:	18f1b004 	addi	r3,r3,-14656
    54a8:	1885883a 	add	r2,r3,r2
    54ac:	11800017 	ldw	r6,0(r2)
    54b0:	11c00117 	ldw	r7,4(r2)
    54b4:	d8800717 	ldw	r2,28(sp)
    54b8:	0009883a 	mov	r4,zero
    54bc:	014ff834 	movhi	r5,16352
    54c0:	da801615 	stw	r10,88(sp)
    54c4:	15c00044 	addi	r23,r2,1
    54c8:	000e11c0 	call	e11c <__divdf3>
    54cc:	d9c00e17 	ldw	r7,56(sp)
    54d0:	880d883a 	mov	r6,r17
    54d4:	1009883a 	mov	r4,r2
    54d8:	180b883a 	mov	r5,r3
    54dc:	000f3500 	call	f350 <__subdf3>
    54e0:	a80b883a 	mov	r5,r21
    54e4:	a009883a 	mov	r4,r20
    54e8:	d8c01015 	stw	r3,64(sp)
    54ec:	d8800e15 	stw	r2,56(sp)
    54f0:	000fc200 	call	fc20 <__fixdfsi>
    54f4:	1009883a 	mov	r4,r2
    54f8:	d8801715 	stw	r2,92(sp)
    54fc:	000fca80 	call	fca8 <__floatsidf>
    5500:	a009883a 	mov	r4,r20
    5504:	a80b883a 	mov	r5,r21
    5508:	100d883a 	mov	r6,r2
    550c:	180f883a 	mov	r7,r3
    5510:	000f3500 	call	f350 <__subdf3>
    5514:	da001717 	ldw	r8,92(sp)
    5518:	1829883a 	mov	r20,r3
    551c:	d8c00717 	ldw	r3,28(sp)
    5520:	d9000e17 	ldw	r4,56(sp)
    5524:	d9401017 	ldw	r5,64(sp)
    5528:	42000c04 	addi	r8,r8,48
    552c:	1023883a 	mov	r17,r2
    5530:	1a000005 	stb	r8,0(r3)
    5534:	880d883a 	mov	r6,r17
    5538:	a00f883a 	mov	r7,r20
    553c:	402b883a 	mov	r21,r8
    5540:	000ea6c0 	call	ea6c <__gedf2>
    5544:	00844516 	blt	zero,r2,665c <_dtoa_r+0x1698>
    5548:	0009883a 	mov	r4,zero
    554c:	014ffc34 	movhi	r5,16368
    5550:	880d883a 	mov	r6,r17
    5554:	a00f883a 	mov	r7,r20
    5558:	000f3500 	call	f350 <__subdf3>
    555c:	d9000e17 	ldw	r4,56(sp)
    5560:	d9401017 	ldw	r5,64(sp)
    5564:	100d883a 	mov	r6,r2
    5568:	180f883a 	mov	r7,r3
    556c:	000ea6c0 	call	ea6c <__gedf2>
    5570:	da801617 	ldw	r10,88(sp)
    5574:	00843616 	blt	zero,r2,6650 <_dtoa_r+0x168c>
    5578:	00800044 	movi	r2,1
    557c:	12806e0e 	bge	r2,r10,5738 <_dtoa_r+0x774>
    5580:	d9000717 	ldw	r4,28(sp)
    5584:	dd801315 	stw	r22,76(sp)
    5588:	dc001115 	stw	r16,68(sp)
    558c:	2295883a 	add	r10,r4,r10
    5590:	dcc01415 	stw	r19,80(sp)
    5594:	502d883a 	mov	r22,r10
    5598:	dcc01017 	ldw	r19,64(sp)
    559c:	b821883a 	mov	r16,r23
    55a0:	dc801015 	stw	r18,64(sp)
    55a4:	dc800e17 	ldw	r18,56(sp)
    55a8:	00000906 	br	55d0 <_dtoa_r+0x60c>
    55ac:	000f3500 	call	f350 <__subdf3>
    55b0:	1009883a 	mov	r4,r2
    55b4:	180b883a 	mov	r5,r3
    55b8:	900d883a 	mov	r6,r18
    55bc:	980f883a 	mov	r7,r19
    55c0:	000eb4c0 	call	eb4c <__ledf2>
    55c4:	10040e16 	blt	r2,zero,6600 <_dtoa_r+0x163c>
    55c8:	b821883a 	mov	r16,r23
    55cc:	bd841026 	beq	r23,r22,6610 <_dtoa_r+0x164c>
    55d0:	9009883a 	mov	r4,r18
    55d4:	980b883a 	mov	r5,r19
    55d8:	000d883a 	mov	r6,zero
    55dc:	01d00934 	movhi	r7,16420
    55e0:	000ec2c0 	call	ec2c <__muldf3>
    55e4:	000d883a 	mov	r6,zero
    55e8:	01d00934 	movhi	r7,16420
    55ec:	8809883a 	mov	r4,r17
    55f0:	a00b883a 	mov	r5,r20
    55f4:	1025883a 	mov	r18,r2
    55f8:	1827883a 	mov	r19,r3
    55fc:	000ec2c0 	call	ec2c <__muldf3>
    5600:	180b883a 	mov	r5,r3
    5604:	1009883a 	mov	r4,r2
    5608:	1823883a 	mov	r17,r3
    560c:	1029883a 	mov	r20,r2
    5610:	000fc200 	call	fc20 <__fixdfsi>
    5614:	1009883a 	mov	r4,r2
    5618:	102b883a 	mov	r21,r2
    561c:	000fca80 	call	fca8 <__floatsidf>
    5620:	a009883a 	mov	r4,r20
    5624:	880b883a 	mov	r5,r17
    5628:	100d883a 	mov	r6,r2
    562c:	180f883a 	mov	r7,r3
    5630:	000f3500 	call	f350 <__subdf3>
    5634:	ad400c04 	addi	r21,r21,48
    5638:	1009883a 	mov	r4,r2
    563c:	180b883a 	mov	r5,r3
    5640:	900d883a 	mov	r6,r18
    5644:	980f883a 	mov	r7,r19
    5648:	85400005 	stb	r21,0(r16)
    564c:	1023883a 	mov	r17,r2
    5650:	1829883a 	mov	r20,r3
    5654:	000eb4c0 	call	eb4c <__ledf2>
    5658:	bdc00044 	addi	r23,r23,1
    565c:	0009883a 	mov	r4,zero
    5660:	014ffc34 	movhi	r5,16368
    5664:	880d883a 	mov	r6,r17
    5668:	a00f883a 	mov	r7,r20
    566c:	103fcf0e 	bge	r2,zero,55ac <__alt_mem_Flash_flash_data+0xf40055ac>
    5670:	d9801217 	ldw	r6,72(sp)
    5674:	dc001117 	ldw	r16,68(sp)
    5678:	d9800515 	stw	r6,20(sp)
    567c:	8009883a 	mov	r4,r16
    5680:	e00b883a 	mov	r5,fp
    5684:	00085e00 	call	85e0 <_Bfree>
    5688:	d8c00517 	ldw	r3,20(sp)
    568c:	d9002317 	ldw	r4,140(sp)
    5690:	d9802517 	ldw	r6,148(sp)
    5694:	b8000005 	stb	zero,0(r23)
    5698:	18800044 	addi	r2,r3,1
    569c:	20800015 	stw	r2,0(r4)
    56a0:	30027226 	beq	r6,zero,606c <_dtoa_r+0x10a8>
    56a4:	35c00015 	stw	r23,0(r6)
    56a8:	d8800717 	ldw	r2,28(sp)
    56ac:	003e7406 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    56b0:	00800434 	movhi	r2,16
    56b4:	10bfffc4 	addi	r2,r2,-1
    56b8:	a8aa703a 	and	r21,r21,r2
    56bc:	a83e801e 	bne	r21,zero,50c0 <__alt_mem_Flash_flash_data+0xf40050c0>
    56c0:	008000b4 	movhi	r2,2
    56c4:	10b19104 	addi	r2,r2,-14780
    56c8:	003e7f06 	br	50c8 <__alt_mem_Flash_flash_data+0xf40050c8>
    56cc:	10c00204 	addi	r3,r2,8
    56d0:	003e8206 	br	50dc <__alt_mem_Flash_flash_data+0xf40050dc>
    56d4:	01400434 	movhi	r5,16
    56d8:	297fffc4 	addi	r5,r5,-1
    56dc:	994a703a 	and	r5,r19,r5
    56e0:	9009883a 	mov	r4,r18
    56e4:	8c7f0044 	addi	r17,r17,-1023
    56e8:	294ffc34 	orhi	r5,r5,16368
    56ec:	dd000217 	ldw	r20,8(sp)
    56f0:	d8000f15 	stw	zero,60(sp)
    56f4:	003e9f06 	br	5174 <__alt_mem_Flash_flash_data+0xf4005174>
    56f8:	008000b4 	movhi	r2,2
    56fc:	10b18004 	addi	r2,r2,-14848
    5700:	003e5f06 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    5704:	80001115 	stw	zero,68(r16)
    5708:	8009883a 	mov	r4,r16
    570c:	000b883a 	mov	r5,zero
    5710:	00085380 	call	8538 <_Balloc>
    5714:	01bfffc4 	movi	r6,-1
    5718:	d8800715 	stw	r2,28(sp)
    571c:	80801015 	stw	r2,64(r16)
    5720:	00800044 	movi	r2,1
    5724:	d9800c15 	stw	r6,48(sp)
    5728:	d8800b15 	stw	r2,44(sp)
    572c:	d9800615 	stw	r6,24(sp)
    5730:	d8002215 	stw	zero,136(sp)
    5734:	d8000315 	stw	zero,12(sp)
    5738:	d8800117 	ldw	r2,4(sp)
    573c:	10008e16 	blt	r2,zero,5978 <_dtoa_r+0x9b4>
    5740:	d9000517 	ldw	r4,20(sp)
    5744:	00c00384 	movi	r3,14
    5748:	19008b16 	blt	r3,r4,5978 <_dtoa_r+0x9b4>
    574c:	200490fa 	slli	r2,r4,3
    5750:	00c000b4 	movhi	r3,2
    5754:	d9802217 	ldw	r6,136(sp)
    5758:	18f1b004 	addi	r3,r3,-14656
    575c:	1885883a 	add	r2,r3,r2
    5760:	14400017 	ldw	r17,0(r2)
    5764:	15000117 	ldw	r20,4(r2)
    5768:	3001c716 	blt	r6,zero,5e88 <_dtoa_r+0xec4>
    576c:	880d883a 	mov	r6,r17
    5770:	a00f883a 	mov	r7,r20
    5774:	9009883a 	mov	r4,r18
    5778:	980b883a 	mov	r5,r19
    577c:	000e11c0 	call	e11c <__divdf3>
    5780:	180b883a 	mov	r5,r3
    5784:	1009883a 	mov	r4,r2
    5788:	000fc200 	call	fc20 <__fixdfsi>
    578c:	1009883a 	mov	r4,r2
    5790:	102d883a 	mov	r22,r2
    5794:	000fca80 	call	fca8 <__floatsidf>
    5798:	1009883a 	mov	r4,r2
    579c:	180b883a 	mov	r5,r3
    57a0:	880d883a 	mov	r6,r17
    57a4:	a00f883a 	mov	r7,r20
    57a8:	000ec2c0 	call	ec2c <__muldf3>
    57ac:	9009883a 	mov	r4,r18
    57b0:	980b883a 	mov	r5,r19
    57b4:	100d883a 	mov	r6,r2
    57b8:	180f883a 	mov	r7,r3
    57bc:	000f3500 	call	f350 <__subdf3>
    57c0:	d9000717 	ldw	r4,28(sp)
    57c4:	d9800617 	ldw	r6,24(sp)
    57c8:	180b883a 	mov	r5,r3
    57cc:	b0c00c04 	addi	r3,r22,48
    57d0:	20c00005 	stb	r3,0(r4)
    57d4:	25c00044 	addi	r23,r4,1
    57d8:	01000044 	movi	r4,1
    57dc:	1011883a 	mov	r8,r2
    57e0:	2807883a 	mov	r3,r5
    57e4:	31003d26 	beq	r6,r4,58dc <_dtoa_r+0x918>
    57e8:	000d883a 	mov	r6,zero
    57ec:	01d00934 	movhi	r7,16420
    57f0:	1009883a 	mov	r4,r2
    57f4:	000ec2c0 	call	ec2c <__muldf3>
    57f8:	1009883a 	mov	r4,r2
    57fc:	180b883a 	mov	r5,r3
    5800:	000d883a 	mov	r6,zero
    5804:	000f883a 	mov	r7,zero
    5808:	1027883a 	mov	r19,r2
    580c:	182b883a 	mov	r21,r3
    5810:	000e9e80 	call	e9e8 <__eqdf2>
    5814:	103f9926 	beq	r2,zero,567c <__alt_mem_Flash_flash_data+0xf400567c>
    5818:	d8c00617 	ldw	r3,24(sp)
    581c:	d9000717 	ldw	r4,28(sp)
    5820:	b825883a 	mov	r18,r23
    5824:	18bfffc4 	addi	r2,r3,-1
    5828:	20ad883a 	add	r22,r4,r2
    582c:	dc000315 	stw	r16,12(sp)
    5830:	00000a06 	br	585c <_dtoa_r+0x898>
    5834:	000ec2c0 	call	ec2c <__muldf3>
    5838:	1009883a 	mov	r4,r2
    583c:	180b883a 	mov	r5,r3
    5840:	000d883a 	mov	r6,zero
    5844:	000f883a 	mov	r7,zero
    5848:	1027883a 	mov	r19,r2
    584c:	182b883a 	mov	r21,r3
    5850:	b825883a 	mov	r18,r23
    5854:	000e9e80 	call	e9e8 <__eqdf2>
    5858:	10022626 	beq	r2,zero,60f4 <_dtoa_r+0x1130>
    585c:	880d883a 	mov	r6,r17
    5860:	a00f883a 	mov	r7,r20
    5864:	9809883a 	mov	r4,r19
    5868:	a80b883a 	mov	r5,r21
    586c:	000e11c0 	call	e11c <__divdf3>
    5870:	180b883a 	mov	r5,r3
    5874:	1009883a 	mov	r4,r2
    5878:	000fc200 	call	fc20 <__fixdfsi>
    587c:	1009883a 	mov	r4,r2
    5880:	1021883a 	mov	r16,r2
    5884:	000fca80 	call	fca8 <__floatsidf>
    5888:	1009883a 	mov	r4,r2
    588c:	180b883a 	mov	r5,r3
    5890:	880d883a 	mov	r6,r17
    5894:	a00f883a 	mov	r7,r20
    5898:	000ec2c0 	call	ec2c <__muldf3>
    589c:	9809883a 	mov	r4,r19
    58a0:	a80b883a 	mov	r5,r21
    58a4:	100d883a 	mov	r6,r2
    58a8:	180f883a 	mov	r7,r3
    58ac:	000f3500 	call	f350 <__subdf3>
    58b0:	82000c04 	addi	r8,r16,48
    58b4:	92000005 	stb	r8,0(r18)
    58b8:	1009883a 	mov	r4,r2
    58bc:	180b883a 	mov	r5,r3
    58c0:	000d883a 	mov	r6,zero
    58c4:	01d00934 	movhi	r7,16420
    58c8:	1011883a 	mov	r8,r2
    58cc:	bdc00044 	addi	r23,r23,1
    58d0:	95bfd81e 	bne	r18,r22,5834 <__alt_mem_Flash_flash_data+0xf4005834>
    58d4:	802d883a 	mov	r22,r16
    58d8:	dc000317 	ldw	r16,12(sp)
    58dc:	4009883a 	mov	r4,r8
    58e0:	180b883a 	mov	r5,r3
    58e4:	400d883a 	mov	r6,r8
    58e8:	180f883a 	mov	r7,r3
    58ec:	000d8800 	call	d880 <__adddf3>
    58f0:	8809883a 	mov	r4,r17
    58f4:	a00b883a 	mov	r5,r20
    58f8:	100d883a 	mov	r6,r2
    58fc:	180f883a 	mov	r7,r3
    5900:	1027883a 	mov	r19,r2
    5904:	1825883a 	mov	r18,r3
    5908:	000eb4c0 	call	eb4c <__ledf2>
    590c:	10000816 	blt	r2,zero,5930 <_dtoa_r+0x96c>
    5910:	8809883a 	mov	r4,r17
    5914:	a00b883a 	mov	r5,r20
    5918:	980d883a 	mov	r6,r19
    591c:	900f883a 	mov	r7,r18
    5920:	000e9e80 	call	e9e8 <__eqdf2>
    5924:	103f551e 	bne	r2,zero,567c <__alt_mem_Flash_flash_data+0xf400567c>
    5928:	b580004c 	andi	r22,r22,1
    592c:	b03f5326 	beq	r22,zero,567c <__alt_mem_Flash_flash_data+0xf400567c>
    5930:	bd7fffc3 	ldbu	r21,-1(r23)
    5934:	b8bfffc4 	addi	r2,r23,-1
    5938:	1007883a 	mov	r3,r2
    593c:	01400e44 	movi	r5,57
    5940:	d9800717 	ldw	r6,28(sp)
    5944:	00000506 	br	595c <_dtoa_r+0x998>
    5948:	18ffffc4 	addi	r3,r3,-1
    594c:	30825e26 	beq	r6,r2,62c8 <_dtoa_r+0x1304>
    5950:	1d400003 	ldbu	r21,0(r3)
    5954:	102f883a 	mov	r23,r2
    5958:	10bfffc4 	addi	r2,r2,-1
    595c:	a9003fcc 	andi	r4,r21,255
    5960:	2100201c 	xori	r4,r4,128
    5964:	213fe004 	addi	r4,r4,-128
    5968:	217ff726 	beq	r4,r5,5948 <__alt_mem_Flash_flash_data+0xf4005948>
    596c:	aa000044 	addi	r8,r21,1
    5970:	12000005 	stb	r8,0(r2)
    5974:	003f4106 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    5978:	d8c00b17 	ldw	r3,44(sp)
    597c:	18006726 	beq	r3,zero,5b1c <_dtoa_r+0xb58>
    5980:	d9000317 	ldw	r4,12(sp)
    5984:	00c00044 	movi	r3,1
    5988:	19016a0e 	bge	r3,r4,5f34 <_dtoa_r+0xf70>
    598c:	d8800617 	ldw	r2,24(sp)
    5990:	d8c00917 	ldw	r3,36(sp)
    5994:	157fffc4 	addi	r21,r2,-1
    5998:	1d420716 	blt	r3,r21,61b8 <_dtoa_r+0x11f4>
    599c:	1d6bc83a 	sub	r21,r3,r21
    59a0:	d8800617 	ldw	r2,24(sp)
    59a4:	1002c716 	blt	r2,zero,64c4 <_dtoa_r+0x1500>
    59a8:	dd000817 	ldw	r20,32(sp)
    59ac:	d8800617 	ldw	r2,24(sp)
    59b0:	d9800817 	ldw	r6,32(sp)
    59b4:	8009883a 	mov	r4,r16
    59b8:	01400044 	movi	r5,1
    59bc:	308d883a 	add	r6,r6,r2
    59c0:	d9800815 	stw	r6,32(sp)
    59c4:	b0ad883a 	add	r22,r22,r2
    59c8:	00089440 	call	8944 <__i2b>
    59cc:	1023883a 	mov	r17,r2
    59d0:	a0000826 	beq	r20,zero,59f4 <_dtoa_r+0xa30>
    59d4:	0580070e 	bge	zero,r22,59f4 <_dtoa_r+0xa30>
    59d8:	b005883a 	mov	r2,r22
    59dc:	a5812016 	blt	r20,r22,5e60 <_dtoa_r+0xe9c>
    59e0:	d8c00817 	ldw	r3,32(sp)
    59e4:	a0a9c83a 	sub	r20,r20,r2
    59e8:	b0adc83a 	sub	r22,r22,r2
    59ec:	1887c83a 	sub	r3,r3,r2
    59f0:	d8c00815 	stw	r3,32(sp)
    59f4:	d9000917 	ldw	r4,36(sp)
    59f8:	0100140e 	bge	zero,r4,5a4c <_dtoa_r+0xa88>
    59fc:	d9800b17 	ldw	r6,44(sp)
    5a00:	3001e526 	beq	r6,zero,6198 <_dtoa_r+0x11d4>
    5a04:	05400e0e 	bge	zero,r21,5a40 <_dtoa_r+0xa7c>
    5a08:	880b883a 	mov	r5,r17
    5a0c:	8009883a 	mov	r4,r16
    5a10:	a80d883a 	mov	r6,r21
    5a14:	0008b7c0 	call	8b7c <__pow5mult>
    5a18:	e00d883a 	mov	r6,fp
    5a1c:	8009883a 	mov	r4,r16
    5a20:	100b883a 	mov	r5,r2
    5a24:	1023883a 	mov	r17,r2
    5a28:	00089800 	call	8980 <__multiply>
    5a2c:	102f883a 	mov	r23,r2
    5a30:	e00b883a 	mov	r5,fp
    5a34:	8009883a 	mov	r4,r16
    5a38:	00085e00 	call	85e0 <_Bfree>
    5a3c:	b839883a 	mov	fp,r23
    5a40:	d8800917 	ldw	r2,36(sp)
    5a44:	154dc83a 	sub	r6,r2,r21
    5a48:	3001281e 	bne	r6,zero,5eec <_dtoa_r+0xf28>
    5a4c:	05c00044 	movi	r23,1
    5a50:	8009883a 	mov	r4,r16
    5a54:	b80b883a 	mov	r5,r23
    5a58:	00089440 	call	8944 <__i2b>
    5a5c:	d8c00a17 	ldw	r3,40(sp)
    5a60:	102b883a 	mov	r21,r2
    5a64:	00c0310e 	bge	zero,r3,5b2c <_dtoa_r+0xb68>
    5a68:	8009883a 	mov	r4,r16
    5a6c:	100b883a 	mov	r5,r2
    5a70:	180d883a 	mov	r6,r3
    5a74:	0008b7c0 	call	8b7c <__pow5mult>
    5a78:	d9000317 	ldw	r4,12(sp)
    5a7c:	102b883a 	mov	r21,r2
    5a80:	b9011f0e 	bge	r23,r4,5f00 <_dtoa_r+0xf3c>
    5a84:	0027883a 	mov	r19,zero
    5a88:	a8800417 	ldw	r2,16(r21)
    5a8c:	10800104 	addi	r2,r2,4
    5a90:	1085883a 	add	r2,r2,r2
    5a94:	1085883a 	add	r2,r2,r2
    5a98:	a885883a 	add	r2,r21,r2
    5a9c:	11000017 	ldw	r4,0(r2)
    5aa0:	000882c0 	call	882c <__hi0bits>
    5aa4:	00c00804 	movi	r3,32
    5aa8:	1885c83a 	sub	r2,r3,r2
    5aac:	00002506 	br	5b44 <_dtoa_r+0xb80>
    5ab0:	01800044 	movi	r6,1
    5ab4:	d9800d15 	stw	r6,52(sp)
    5ab8:	003dec06 	br	526c <__alt_mem_Flash_flash_data+0xf400526c>
    5abc:	d8c00817 	ldw	r3,32(sp)
    5ac0:	d9000517 	ldw	r4,20(sp)
    5ac4:	d8000a15 	stw	zero,40(sp)
    5ac8:	1907c83a 	sub	r3,r3,r4
    5acc:	010dc83a 	sub	r6,zero,r4
    5ad0:	d8c00815 	stw	r3,32(sp)
    5ad4:	d9800915 	stw	r6,36(sp)
    5ad8:	003ded06 	br	5290 <__alt_mem_Flash_flash_data+0xf4005290>
    5adc:	05adc83a 	sub	r22,zero,r22
    5ae0:	dd800815 	stw	r22,32(sp)
    5ae4:	002d883a 	mov	r22,zero
    5ae8:	003de406 	br	527c <__alt_mem_Flash_flash_data+0xf400527c>
    5aec:	d9000517 	ldw	r4,20(sp)
    5af0:	000fca80 	call	fca8 <__floatsidf>
    5af4:	1009883a 	mov	r4,r2
    5af8:	180b883a 	mov	r5,r3
    5afc:	b00d883a 	mov	r6,r22
    5b00:	a80f883a 	mov	r7,r21
    5b04:	000e9e80 	call	e9e8 <__eqdf2>
    5b08:	103dc726 	beq	r2,zero,5228 <__alt_mem_Flash_flash_data+0xf4005228>
    5b0c:	d8800517 	ldw	r2,20(sp)
    5b10:	10bfffc4 	addi	r2,r2,-1
    5b14:	d8800515 	stw	r2,20(sp)
    5b18:	003dc306 	br	5228 <__alt_mem_Flash_flash_data+0xf4005228>
    5b1c:	dd400917 	ldw	r21,36(sp)
    5b20:	dd000817 	ldw	r20,32(sp)
    5b24:	0023883a 	mov	r17,zero
    5b28:	003fa906 	br	59d0 <__alt_mem_Flash_flash_data+0xf40059d0>
    5b2c:	d9800317 	ldw	r6,12(sp)
    5b30:	b981670e 	bge	r23,r6,60d0 <_dtoa_r+0x110c>
    5b34:	0027883a 	mov	r19,zero
    5b38:	d8c00a17 	ldw	r3,40(sp)
    5b3c:	183fd21e 	bne	r3,zero,5a88 <__alt_mem_Flash_flash_data+0xf4005a88>
    5b40:	00800044 	movi	r2,1
    5b44:	1585883a 	add	r2,r2,r22
    5b48:	108007cc 	andi	r2,r2,31
    5b4c:	10005f26 	beq	r2,zero,5ccc <_dtoa_r+0xd08>
    5b50:	00c00804 	movi	r3,32
    5b54:	1887c83a 	sub	r3,r3,r2
    5b58:	01000104 	movi	r4,4
    5b5c:	20c2dd0e 	bge	r4,r3,66d4 <_dtoa_r+0x1710>
    5b60:	d9000817 	ldw	r4,32(sp)
    5b64:	00c00704 	movi	r3,28
    5b68:	1885c83a 	sub	r2,r3,r2
    5b6c:	2089883a 	add	r4,r4,r2
    5b70:	d9000815 	stw	r4,32(sp)
    5b74:	a0a9883a 	add	r20,r20,r2
    5b78:	b0ad883a 	add	r22,r22,r2
    5b7c:	d8800817 	ldw	r2,32(sp)
    5b80:	0080050e 	bge	zero,r2,5b98 <_dtoa_r+0xbd4>
    5b84:	e00b883a 	mov	r5,fp
    5b88:	8009883a 	mov	r4,r16
    5b8c:	100d883a 	mov	r6,r2
    5b90:	0008cbc0 	call	8cbc <__lshift>
    5b94:	1039883a 	mov	fp,r2
    5b98:	0580050e 	bge	zero,r22,5bb0 <_dtoa_r+0xbec>
    5b9c:	a80b883a 	mov	r5,r21
    5ba0:	8009883a 	mov	r4,r16
    5ba4:	b00d883a 	mov	r6,r22
    5ba8:	0008cbc0 	call	8cbc <__lshift>
    5bac:	102b883a 	mov	r21,r2
    5bb0:	d8c00d17 	ldw	r3,52(sp)
    5bb4:	1801161e 	bne	r3,zero,6010 <_dtoa_r+0x104c>
    5bb8:	d8c00617 	ldw	r3,24(sp)
    5bbc:	00c12d0e 	bge	zero,r3,6074 <_dtoa_r+0x10b0>
    5bc0:	d8c00b17 	ldw	r3,44(sp)
    5bc4:	1800571e 	bne	r3,zero,5d24 <_dtoa_r+0xd60>
    5bc8:	dc800717 	ldw	r18,28(sp)
    5bcc:	dcc00617 	ldw	r19,24(sp)
    5bd0:	9029883a 	mov	r20,r18
    5bd4:	00000206 	br	5be0 <_dtoa_r+0xc1c>
    5bd8:	00086080 	call	8608 <__multadd>
    5bdc:	1039883a 	mov	fp,r2
    5be0:	e009883a 	mov	r4,fp
    5be4:	a80b883a 	mov	r5,r21
    5be8:	0004dc40 	call	4dc4 <quorem>
    5bec:	10800c04 	addi	r2,r2,48
    5bf0:	90800005 	stb	r2,0(r18)
    5bf4:	94800044 	addi	r18,r18,1
    5bf8:	9507c83a 	sub	r3,r18,r20
    5bfc:	8009883a 	mov	r4,r16
    5c00:	e00b883a 	mov	r5,fp
    5c04:	01800284 	movi	r6,10
    5c08:	000f883a 	mov	r7,zero
    5c0c:	1cfff216 	blt	r3,r19,5bd8 <__alt_mem_Flash_flash_data+0xf4005bd8>
    5c10:	1011883a 	mov	r8,r2
    5c14:	d8800617 	ldw	r2,24(sp)
    5c18:	00822e0e 	bge	zero,r2,64d4 <_dtoa_r+0x1510>
    5c1c:	d9000717 	ldw	r4,28(sp)
    5c20:	0025883a 	mov	r18,zero
    5c24:	20af883a 	add	r23,r4,r2
    5c28:	e00b883a 	mov	r5,fp
    5c2c:	01800044 	movi	r6,1
    5c30:	8009883a 	mov	r4,r16
    5c34:	da001715 	stw	r8,92(sp)
    5c38:	0008cbc0 	call	8cbc <__lshift>
    5c3c:	1009883a 	mov	r4,r2
    5c40:	a80b883a 	mov	r5,r21
    5c44:	1039883a 	mov	fp,r2
    5c48:	0008e0c0 	call	8e0c <__mcmp>
    5c4c:	da001717 	ldw	r8,92(sp)
    5c50:	00816e0e 	bge	zero,r2,620c <_dtoa_r+0x1248>
    5c54:	b93fffc3 	ldbu	r4,-1(r23)
    5c58:	b8bfffc4 	addi	r2,r23,-1
    5c5c:	1007883a 	mov	r3,r2
    5c60:	01800e44 	movi	r6,57
    5c64:	d9c00717 	ldw	r7,28(sp)
    5c68:	00000506 	br	5c80 <_dtoa_r+0xcbc>
    5c6c:	18ffffc4 	addi	r3,r3,-1
    5c70:	38811926 	beq	r7,r2,60d8 <_dtoa_r+0x1114>
    5c74:	19000003 	ldbu	r4,0(r3)
    5c78:	102f883a 	mov	r23,r2
    5c7c:	10bfffc4 	addi	r2,r2,-1
    5c80:	21403fcc 	andi	r5,r4,255
    5c84:	2940201c 	xori	r5,r5,128
    5c88:	297fe004 	addi	r5,r5,-128
    5c8c:	29bff726 	beq	r5,r6,5c6c <__alt_mem_Flash_flash_data+0xf4005c6c>
    5c90:	21000044 	addi	r4,r4,1
    5c94:	11000005 	stb	r4,0(r2)
    5c98:	8009883a 	mov	r4,r16
    5c9c:	a80b883a 	mov	r5,r21
    5ca0:	00085e00 	call	85e0 <_Bfree>
    5ca4:	883e7526 	beq	r17,zero,567c <__alt_mem_Flash_flash_data+0xf400567c>
    5ca8:	90000426 	beq	r18,zero,5cbc <_dtoa_r+0xcf8>
    5cac:	94400326 	beq	r18,r17,5cbc <_dtoa_r+0xcf8>
    5cb0:	8009883a 	mov	r4,r16
    5cb4:	900b883a 	mov	r5,r18
    5cb8:	00085e00 	call	85e0 <_Bfree>
    5cbc:	8009883a 	mov	r4,r16
    5cc0:	880b883a 	mov	r5,r17
    5cc4:	00085e00 	call	85e0 <_Bfree>
    5cc8:	003e6c06 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    5ccc:	00800704 	movi	r2,28
    5cd0:	d9800817 	ldw	r6,32(sp)
    5cd4:	a0a9883a 	add	r20,r20,r2
    5cd8:	b0ad883a 	add	r22,r22,r2
    5cdc:	308d883a 	add	r6,r6,r2
    5ce0:	d9800815 	stw	r6,32(sp)
    5ce4:	003fa506 	br	5b7c <__alt_mem_Flash_flash_data+0xf4005b7c>
    5ce8:	013efb84 	movi	r4,-1042
    5cec:	246bc83a 	sub	r21,r4,r17
    5cf0:	9548983a 	sll	r4,r18,r21
    5cf4:	003d1806 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    5cf8:	d8000d15 	stw	zero,52(sp)
    5cfc:	003d5b06 	br	526c <__alt_mem_Flash_flash_data+0xf400526c>
    5d00:	880b883a 	mov	r5,r17
    5d04:	8009883a 	mov	r4,r16
    5d08:	01800284 	movi	r6,10
    5d0c:	000f883a 	mov	r7,zero
    5d10:	00086080 	call	8608 <__multadd>
    5d14:	1023883a 	mov	r17,r2
    5d18:	d8800c17 	ldw	r2,48(sp)
    5d1c:	0082550e 	bge	zero,r2,6674 <_dtoa_r+0x16b0>
    5d20:	d8800615 	stw	r2,24(sp)
    5d24:	0500050e 	bge	zero,r20,5d3c <_dtoa_r+0xd78>
    5d28:	880b883a 	mov	r5,r17
    5d2c:	8009883a 	mov	r4,r16
    5d30:	a00d883a 	mov	r6,r20
    5d34:	0008cbc0 	call	8cbc <__lshift>
    5d38:	1023883a 	mov	r17,r2
    5d3c:	98016a1e 	bne	r19,zero,62e8 <_dtoa_r+0x1324>
    5d40:	8829883a 	mov	r20,r17
    5d44:	d9000617 	ldw	r4,24(sp)
    5d48:	dcc00717 	ldw	r19,28(sp)
    5d4c:	9480004c 	andi	r18,r18,1
    5d50:	20bfffc4 	addi	r2,r4,-1
    5d54:	9885883a 	add	r2,r19,r2
    5d58:	d8800415 	stw	r2,16(sp)
    5d5c:	dc800615 	stw	r18,24(sp)
    5d60:	e009883a 	mov	r4,fp
    5d64:	a80b883a 	mov	r5,r21
    5d68:	0004dc40 	call	4dc4 <quorem>
    5d6c:	e009883a 	mov	r4,fp
    5d70:	880b883a 	mov	r5,r17
    5d74:	102f883a 	mov	r23,r2
    5d78:	0008e0c0 	call	8e0c <__mcmp>
    5d7c:	8009883a 	mov	r4,r16
    5d80:	a80b883a 	mov	r5,r21
    5d84:	a00d883a 	mov	r6,r20
    5d88:	102d883a 	mov	r22,r2
    5d8c:	0008e6c0 	call	8e6c <__mdiff>
    5d90:	1007883a 	mov	r3,r2
    5d94:	10800317 	ldw	r2,12(r2)
    5d98:	bc800c04 	addi	r18,r23,48
    5d9c:	1000971e 	bne	r2,zero,5ffc <_dtoa_r+0x1038>
    5da0:	180b883a 	mov	r5,r3
    5da4:	e009883a 	mov	r4,fp
    5da8:	d8c01515 	stw	r3,84(sp)
    5dac:	0008e0c0 	call	8e0c <__mcmp>
    5db0:	d8c01517 	ldw	r3,84(sp)
    5db4:	8009883a 	mov	r4,r16
    5db8:	d8801515 	stw	r2,84(sp)
    5dbc:	180b883a 	mov	r5,r3
    5dc0:	00085e00 	call	85e0 <_Bfree>
    5dc4:	d8801517 	ldw	r2,84(sp)
    5dc8:	1000041e 	bne	r2,zero,5ddc <_dtoa_r+0xe18>
    5dcc:	d9800317 	ldw	r6,12(sp)
    5dd0:	3000021e 	bne	r6,zero,5ddc <_dtoa_r+0xe18>
    5dd4:	d8c00617 	ldw	r3,24(sp)
    5dd8:	18007626 	beq	r3,zero,5fb4 <_dtoa_r+0xff0>
    5ddc:	b0005b16 	blt	r22,zero,5f4c <_dtoa_r+0xf88>
    5de0:	b000041e 	bne	r22,zero,5df4 <_dtoa_r+0xe30>
    5de4:	d9000317 	ldw	r4,12(sp)
    5de8:	2000021e 	bne	r4,zero,5df4 <_dtoa_r+0xe30>
    5dec:	d8c00617 	ldw	r3,24(sp)
    5df0:	18005626 	beq	r3,zero,5f4c <_dtoa_r+0xf88>
    5df4:	00814d16 	blt	zero,r2,632c <_dtoa_r+0x1368>
    5df8:	d8c00417 	ldw	r3,16(sp)
    5dfc:	9d800044 	addi	r22,r19,1
    5e00:	9c800005 	stb	r18,0(r19)
    5e04:	b02f883a 	mov	r23,r22
    5e08:	98c14c26 	beq	r19,r3,633c <_dtoa_r+0x1378>
    5e0c:	e00b883a 	mov	r5,fp
    5e10:	8009883a 	mov	r4,r16
    5e14:	01800284 	movi	r6,10
    5e18:	000f883a 	mov	r7,zero
    5e1c:	00086080 	call	8608 <__multadd>
    5e20:	1039883a 	mov	fp,r2
    5e24:	8d006d26 	beq	r17,r20,5fdc <_dtoa_r+0x1018>
    5e28:	880b883a 	mov	r5,r17
    5e2c:	01800284 	movi	r6,10
    5e30:	000f883a 	mov	r7,zero
    5e34:	8009883a 	mov	r4,r16
    5e38:	00086080 	call	8608 <__multadd>
    5e3c:	a00b883a 	mov	r5,r20
    5e40:	8009883a 	mov	r4,r16
    5e44:	01800284 	movi	r6,10
    5e48:	000f883a 	mov	r7,zero
    5e4c:	1023883a 	mov	r17,r2
    5e50:	00086080 	call	8608 <__multadd>
    5e54:	1029883a 	mov	r20,r2
    5e58:	b027883a 	mov	r19,r22
    5e5c:	003fc006 	br	5d60 <__alt_mem_Flash_flash_data+0xf4005d60>
    5e60:	a005883a 	mov	r2,r20
    5e64:	003ede06 	br	59e0 <__alt_mem_Flash_flash_data+0xf40059e0>
    5e68:	01000044 	movi	r4,1
    5e6c:	d9000b15 	stw	r4,44(sp)
    5e70:	d9802217 	ldw	r6,136(sp)
    5e74:	0180dc0e 	bge	zero,r6,61e8 <_dtoa_r+0x1224>
    5e78:	3023883a 	mov	r17,r6
    5e7c:	d9800c15 	stw	r6,48(sp)
    5e80:	d9800615 	stw	r6,24(sp)
    5e84:	003d1e06 	br	5300 <__alt_mem_Flash_flash_data+0xf4005300>
    5e88:	d8800617 	ldw	r2,24(sp)
    5e8c:	00be3716 	blt	zero,r2,576c <__alt_mem_Flash_flash_data+0xf400576c>
    5e90:	1000be1e 	bne	r2,zero,618c <_dtoa_r+0x11c8>
    5e94:	8809883a 	mov	r4,r17
    5e98:	a00b883a 	mov	r5,r20
    5e9c:	000d883a 	mov	r6,zero
    5ea0:	01d00534 	movhi	r7,16404
    5ea4:	000ec2c0 	call	ec2c <__muldf3>
    5ea8:	1009883a 	mov	r4,r2
    5eac:	180b883a 	mov	r5,r3
    5eb0:	900d883a 	mov	r6,r18
    5eb4:	980f883a 	mov	r7,r19
    5eb8:	000ea6c0 	call	ea6c <__gedf2>
    5ebc:	002b883a 	mov	r21,zero
    5ec0:	0023883a 	mov	r17,zero
    5ec4:	10007a16 	blt	r2,zero,60b0 <_dtoa_r+0x10ec>
    5ec8:	d9002217 	ldw	r4,136(sp)
    5ecc:	ddc00717 	ldw	r23,28(sp)
    5ed0:	0108303a 	nor	r4,zero,r4
    5ed4:	d9000515 	stw	r4,20(sp)
    5ed8:	8009883a 	mov	r4,r16
    5edc:	a80b883a 	mov	r5,r21
    5ee0:	00085e00 	call	85e0 <_Bfree>
    5ee4:	883f751e 	bne	r17,zero,5cbc <__alt_mem_Flash_flash_data+0xf4005cbc>
    5ee8:	003de406 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    5eec:	e00b883a 	mov	r5,fp
    5ef0:	8009883a 	mov	r4,r16
    5ef4:	0008b7c0 	call	8b7c <__pow5mult>
    5ef8:	1039883a 	mov	fp,r2
    5efc:	003ed306 	br	5a4c <__alt_mem_Flash_flash_data+0xf4005a4c>
    5f00:	903ee01e 	bne	r18,zero,5a84 <__alt_mem_Flash_flash_data+0xf4005a84>
    5f04:	00800434 	movhi	r2,16
    5f08:	10bfffc4 	addi	r2,r2,-1
    5f0c:	9884703a 	and	r2,r19,r2
    5f10:	103f081e 	bne	r2,zero,5b34 <__alt_mem_Flash_flash_data+0xf4005b34>
    5f14:	9cdffc2c 	andhi	r19,r19,32752
    5f18:	983f0626 	beq	r19,zero,5b34 <__alt_mem_Flash_flash_data+0xf4005b34>
    5f1c:	d8800817 	ldw	r2,32(sp)
    5f20:	b5800044 	addi	r22,r22,1
    5f24:	04c00044 	movi	r19,1
    5f28:	10800044 	addi	r2,r2,1
    5f2c:	d8800815 	stw	r2,32(sp)
    5f30:	003f0106 	br	5b38 <__alt_mem_Flash_flash_data+0xf4005b38>
    5f34:	d9800f17 	ldw	r6,60(sp)
    5f38:	30016826 	beq	r6,zero,64dc <_dtoa_r+0x1518>
    5f3c:	10810cc4 	addi	r2,r2,1075
    5f40:	dd400917 	ldw	r21,36(sp)
    5f44:	dd000817 	ldw	r20,32(sp)
    5f48:	003e9906 	br	59b0 <__alt_mem_Flash_flash_data+0xf40059b0>
    5f4c:	9011883a 	mov	r8,r18
    5f50:	4007883a 	mov	r3,r8
    5f54:	e02d883a 	mov	r22,fp
    5f58:	0080100e 	bge	zero,r2,5f9c <_dtoa_r+0xfd8>
    5f5c:	01800044 	movi	r6,1
    5f60:	8009883a 	mov	r4,r16
    5f64:	e00b883a 	mov	r5,fp
    5f68:	da001515 	stw	r8,84(sp)
    5f6c:	da001715 	stw	r8,92(sp)
    5f70:	0008cbc0 	call	8cbc <__lshift>
    5f74:	1009883a 	mov	r4,r2
    5f78:	a80b883a 	mov	r5,r21
    5f7c:	102d883a 	mov	r22,r2
    5f80:	0008e0c0 	call	8e0c <__mcmp>
    5f84:	d8c01517 	ldw	r3,84(sp)
    5f88:	da001717 	ldw	r8,92(sp)
    5f8c:	0081a50e 	bge	zero,r2,6624 <_dtoa_r+0x1660>
    5f90:	00800e44 	movi	r2,57
    5f94:	40817b26 	beq	r8,r2,6584 <_dtoa_r+0x15c0>
    5f98:	40c00044 	addi	r3,r8,1
    5f9c:	8825883a 	mov	r18,r17
    5fa0:	9dc00044 	addi	r23,r19,1
    5fa4:	98c00005 	stb	r3,0(r19)
    5fa8:	a023883a 	mov	r17,r20
    5fac:	b039883a 	mov	fp,r22
    5fb0:	003f3906 	br	5c98 <__alt_mem_Flash_flash_data+0xf4005c98>
    5fb4:	00800e44 	movi	r2,57
    5fb8:	9011883a 	mov	r8,r18
    5fbc:	90817226 	beq	r18,r2,6588 <_dtoa_r+0x15c4>
    5fc0:	0580010e 	bge	zero,r22,5fc8 <_dtoa_r+0x1004>
    5fc4:	ba000c44 	addi	r8,r23,49
    5fc8:	8825883a 	mov	r18,r17
    5fcc:	9dc00044 	addi	r23,r19,1
    5fd0:	9a000005 	stb	r8,0(r19)
    5fd4:	a023883a 	mov	r17,r20
    5fd8:	003f2f06 	br	5c98 <__alt_mem_Flash_flash_data+0xf4005c98>
    5fdc:	880b883a 	mov	r5,r17
    5fe0:	8009883a 	mov	r4,r16
    5fe4:	01800284 	movi	r6,10
    5fe8:	000f883a 	mov	r7,zero
    5fec:	00086080 	call	8608 <__multadd>
    5ff0:	1023883a 	mov	r17,r2
    5ff4:	1029883a 	mov	r20,r2
    5ff8:	003f9706 	br	5e58 <__alt_mem_Flash_flash_data+0xf4005e58>
    5ffc:	8009883a 	mov	r4,r16
    6000:	180b883a 	mov	r5,r3
    6004:	00085e00 	call	85e0 <_Bfree>
    6008:	00800044 	movi	r2,1
    600c:	003f7306 	br	5ddc <__alt_mem_Flash_flash_data+0xf4005ddc>
    6010:	e009883a 	mov	r4,fp
    6014:	a80b883a 	mov	r5,r21
    6018:	0008e0c0 	call	8e0c <__mcmp>
    601c:	103ee60e 	bge	r2,zero,5bb8 <__alt_mem_Flash_flash_data+0xf4005bb8>
    6020:	8009883a 	mov	r4,r16
    6024:	e00b883a 	mov	r5,fp
    6028:	01800284 	movi	r6,10
    602c:	000f883a 	mov	r7,zero
    6030:	00086080 	call	8608 <__multadd>
    6034:	d9000517 	ldw	r4,20(sp)
    6038:	d9800b17 	ldw	r6,44(sp)
    603c:	1039883a 	mov	fp,r2
    6040:	213fffc4 	addi	r4,r4,-1
    6044:	d9000515 	stw	r4,20(sp)
    6048:	303f2d1e 	bne	r6,zero,5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    604c:	d9000c17 	ldw	r4,48(sp)
    6050:	0101780e 	bge	zero,r4,6634 <_dtoa_r+0x1670>
    6054:	d9000615 	stw	r4,24(sp)
    6058:	003edb06 	br	5bc8 <__alt_mem_Flash_flash_data+0xf4005bc8>
    605c:	00800084 	movi	r2,2
    6060:	30818e1e 	bne	r6,r2,669c <_dtoa_r+0x16d8>
    6064:	d8000b15 	stw	zero,44(sp)
    6068:	003f8106 	br	5e70 <__alt_mem_Flash_flash_data+0xf4005e70>
    606c:	d8800717 	ldw	r2,28(sp)
    6070:	003c0306 	br	5080 <__alt_mem_Flash_flash_data+0xf4005080>
    6074:	d9000317 	ldw	r4,12(sp)
    6078:	00800084 	movi	r2,2
    607c:	113ed00e 	bge	r2,r4,5bc0 <__alt_mem_Flash_flash_data+0xf4005bc0>
    6080:	d8c00617 	ldw	r3,24(sp)
    6084:	183f901e 	bne	r3,zero,5ec8 <__alt_mem_Flash_flash_data+0xf4005ec8>
    6088:	a80b883a 	mov	r5,r21
    608c:	8009883a 	mov	r4,r16
    6090:	01800144 	movi	r6,5
    6094:	000f883a 	mov	r7,zero
    6098:	00086080 	call	8608 <__multadd>
    609c:	e009883a 	mov	r4,fp
    60a0:	100b883a 	mov	r5,r2
    60a4:	102b883a 	mov	r21,r2
    60a8:	0008e0c0 	call	8e0c <__mcmp>
    60ac:	00bf860e 	bge	zero,r2,5ec8 <__alt_mem_Flash_flash_data+0xf4005ec8>
    60b0:	d9800717 	ldw	r6,28(sp)
    60b4:	00800c44 	movi	r2,49
    60b8:	30800005 	stb	r2,0(r6)
    60bc:	d8800517 	ldw	r2,20(sp)
    60c0:	35c00044 	addi	r23,r6,1
    60c4:	10800044 	addi	r2,r2,1
    60c8:	d8800515 	stw	r2,20(sp)
    60cc:	003f8206 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    60d0:	903e981e 	bne	r18,zero,5b34 <__alt_mem_Flash_flash_data+0xf4005b34>
    60d4:	003f8b06 	br	5f04 <__alt_mem_Flash_flash_data+0xf4005f04>
    60d8:	d9800517 	ldw	r6,20(sp)
    60dc:	d8c00717 	ldw	r3,28(sp)
    60e0:	00800c44 	movi	r2,49
    60e4:	31800044 	addi	r6,r6,1
    60e8:	d9800515 	stw	r6,20(sp)
    60ec:	18800005 	stb	r2,0(r3)
    60f0:	003ee906 	br	5c98 <__alt_mem_Flash_flash_data+0xf4005c98>
    60f4:	dc000317 	ldw	r16,12(sp)
    60f8:	003d6006 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    60fc:	8809883a 	mov	r4,r17
    6100:	000fca80 	call	fca8 <__floatsidf>
    6104:	a009883a 	mov	r4,r20
    6108:	a80b883a 	mov	r5,r21
    610c:	100d883a 	mov	r6,r2
    6110:	180f883a 	mov	r7,r3
    6114:	000ec2c0 	call	ec2c <__muldf3>
    6118:	1009883a 	mov	r4,r2
    611c:	180b883a 	mov	r5,r3
    6120:	000d883a 	mov	r6,zero
    6124:	01d00734 	movhi	r7,16412
    6128:	000d8800 	call	d880 <__adddf3>
    612c:	1023883a 	mov	r17,r2
    6130:	00bf3034 	movhi	r2,64704
    6134:	1885883a 	add	r2,r3,r2
    6138:	d8800e15 	stw	r2,56(sp)
    613c:	a009883a 	mov	r4,r20
    6140:	a80b883a 	mov	r5,r21
    6144:	000d883a 	mov	r6,zero
    6148:	01d00534 	movhi	r7,16404
    614c:	000f3500 	call	f350 <__subdf3>
    6150:	d9c00e17 	ldw	r7,56(sp)
    6154:	1009883a 	mov	r4,r2
    6158:	180b883a 	mov	r5,r3
    615c:	880d883a 	mov	r6,r17
    6160:	102b883a 	mov	r21,r2
    6164:	1829883a 	mov	r20,r3
    6168:	000ea6c0 	call	ea6c <__gedf2>
    616c:	00807716 	blt	zero,r2,634c <_dtoa_r+0x1388>
    6170:	d8800e17 	ldw	r2,56(sp)
    6174:	a809883a 	mov	r4,r21
    6178:	a00b883a 	mov	r5,r20
    617c:	11e0003c 	xorhi	r7,r2,32768
    6180:	880d883a 	mov	r6,r17
    6184:	000eb4c0 	call	eb4c <__ledf2>
    6188:	103d6b0e 	bge	r2,zero,5738 <__alt_mem_Flash_flash_data+0xf4005738>
    618c:	002b883a 	mov	r21,zero
    6190:	0023883a 	mov	r17,zero
    6194:	003f4c06 	br	5ec8 <__alt_mem_Flash_flash_data+0xf4005ec8>
    6198:	d9800917 	ldw	r6,36(sp)
    619c:	e00b883a 	mov	r5,fp
    61a0:	8009883a 	mov	r4,r16
    61a4:	0008b7c0 	call	8b7c <__pow5mult>
    61a8:	1039883a 	mov	fp,r2
    61ac:	003e2706 	br	5a4c <__alt_mem_Flash_flash_data+0xf4005a4c>
    61b0:	d8000b15 	stw	zero,44(sp)
    61b4:	003c4906 	br	52dc <__alt_mem_Flash_flash_data+0xf40052dc>
    61b8:	d9000917 	ldw	r4,36(sp)
    61bc:	d9800a17 	ldw	r6,40(sp)
    61c0:	dd400915 	stw	r21,36(sp)
    61c4:	a905c83a 	sub	r2,r21,r4
    61c8:	308d883a 	add	r6,r6,r2
    61cc:	d9800a15 	stw	r6,40(sp)
    61d0:	002b883a 	mov	r21,zero
    61d4:	003df206 	br	59a0 <__alt_mem_Flash_flash_data+0xf40059a0>
    61d8:	dc800e15 	stw	r18,56(sp)
    61dc:	982b883a 	mov	r21,r19
    61e0:	04400084 	movi	r17,2
    61e4:	003c7406 	br	53b8 <__alt_mem_Flash_flash_data+0xf40053b8>
    61e8:	04400044 	movi	r17,1
    61ec:	dc400c15 	stw	r17,48(sp)
    61f0:	dc400615 	stw	r17,24(sp)
    61f4:	dc402215 	stw	r17,136(sp)
    61f8:	80001115 	stw	zero,68(r16)
    61fc:	000b883a 	mov	r5,zero
    6200:	003c4a06 	br	532c <__alt_mem_Flash_flash_data+0xf400532c>
    6204:	3023883a 	mov	r17,r6
    6208:	003ffb06 	br	61f8 <__alt_mem_Flash_flash_data+0xf40061f8>
    620c:	1000021e 	bne	r2,zero,6218 <_dtoa_r+0x1254>
    6210:	4200004c 	andi	r8,r8,1
    6214:	403e8f1e 	bne	r8,zero,5c54 <__alt_mem_Flash_flash_data+0xf4005c54>
    6218:	01000c04 	movi	r4,48
    621c:	00000106 	br	6224 <_dtoa_r+0x1260>
    6220:	102f883a 	mov	r23,r2
    6224:	b8bfffc4 	addi	r2,r23,-1
    6228:	10c00007 	ldb	r3,0(r2)
    622c:	193ffc26 	beq	r3,r4,6220 <__alt_mem_Flash_flash_data+0xf4006220>
    6230:	003e9906 	br	5c98 <__alt_mem_Flash_flash_data+0xf4005c98>
    6234:	d9000517 	ldw	r4,20(sp)
    6238:	012fc83a 	sub	r23,zero,r4
    623c:	b800ad26 	beq	r23,zero,64f4 <_dtoa_r+0x1530>
    6240:	b88003cc 	andi	r2,r23,15
    6244:	100490fa 	slli	r2,r2,3
    6248:	00c000b4 	movhi	r3,2
    624c:	18f1b004 	addi	r3,r3,-14656
    6250:	1885883a 	add	r2,r3,r2
    6254:	11800017 	ldw	r6,0(r2)
    6258:	11c00117 	ldw	r7,4(r2)
    625c:	b82fd13a 	srai	r23,r23,4
    6260:	9009883a 	mov	r4,r18
    6264:	980b883a 	mov	r5,r19
    6268:	000ec2c0 	call	ec2c <__muldf3>
    626c:	1029883a 	mov	r20,r2
    6270:	182b883a 	mov	r21,r3
    6274:	b800f426 	beq	r23,zero,6648 <_dtoa_r+0x1684>
    6278:	020000b4 	movhi	r8,2
    627c:	4231a604 	addi	r8,r8,-14696
    6280:	8029883a 	mov	r20,r16
    6284:	04400084 	movi	r17,2
    6288:	4021883a 	mov	r16,r8
    628c:	b980004c 	andi	r6,r23,1
    6290:	1009883a 	mov	r4,r2
    6294:	b82fd07a 	srai	r23,r23,1
    6298:	180b883a 	mov	r5,r3
    629c:	30000426 	beq	r6,zero,62b0 <_dtoa_r+0x12ec>
    62a0:	81800017 	ldw	r6,0(r16)
    62a4:	81c00117 	ldw	r7,4(r16)
    62a8:	8c400044 	addi	r17,r17,1
    62ac:	000ec2c0 	call	ec2c <__muldf3>
    62b0:	84000204 	addi	r16,r16,8
    62b4:	b83ff51e 	bne	r23,zero,628c <__alt_mem_Flash_flash_data+0xf400628c>
    62b8:	a021883a 	mov	r16,r20
    62bc:	182b883a 	mov	r21,r3
    62c0:	1029883a 	mov	r20,r2
    62c4:	003c5506 	br	541c <__alt_mem_Flash_flash_data+0xf400541c>
    62c8:	d9800517 	ldw	r6,20(sp)
    62cc:	d9000717 	ldw	r4,28(sp)
    62d0:	00c00c04 	movi	r3,48
    62d4:	31800044 	addi	r6,r6,1
    62d8:	d9800515 	stw	r6,20(sp)
    62dc:	20c00005 	stb	r3,0(r4)
    62e0:	02000c44 	movi	r8,49
    62e4:	003da206 	br	5970 <__alt_mem_Flash_flash_data+0xf4005970>
    62e8:	89400117 	ldw	r5,4(r17)
    62ec:	8009883a 	mov	r4,r16
    62f0:	00085380 	call	8538 <_Balloc>
    62f4:	89800417 	ldw	r6,16(r17)
    62f8:	11000304 	addi	r4,r2,12
    62fc:	89400304 	addi	r5,r17,12
    6300:	31800084 	addi	r6,r6,2
    6304:	318d883a 	add	r6,r6,r6
    6308:	318d883a 	add	r6,r6,r6
    630c:	1027883a 	mov	r19,r2
    6310:	00082a40 	call	82a4 <memcpy>
    6314:	8009883a 	mov	r4,r16
    6318:	980b883a 	mov	r5,r19
    631c:	01800044 	movi	r6,1
    6320:	0008cbc0 	call	8cbc <__lshift>
    6324:	1029883a 	mov	r20,r2
    6328:	003e8606 	br	5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    632c:	00800e44 	movi	r2,57
    6330:	90809526 	beq	r18,r2,6588 <_dtoa_r+0x15c4>
    6334:	92000044 	addi	r8,r18,1
    6338:	003f2306 	br	5fc8 <__alt_mem_Flash_flash_data+0xf4005fc8>
    633c:	9011883a 	mov	r8,r18
    6340:	8825883a 	mov	r18,r17
    6344:	a023883a 	mov	r17,r20
    6348:	003e3706 	br	5c28 <__alt_mem_Flash_flash_data+0xf4005c28>
    634c:	002b883a 	mov	r21,zero
    6350:	0023883a 	mov	r17,zero
    6354:	003f5606 	br	60b0 <__alt_mem_Flash_flash_data+0xf40060b0>
    6358:	51bfffc4 	addi	r6,r10,-1
    635c:	300490fa 	slli	r2,r6,3
    6360:	00c000b4 	movhi	r3,2
    6364:	18f1b004 	addi	r3,r3,-14656
    6368:	1885883a 	add	r2,r3,r2
    636c:	d9c00e17 	ldw	r7,56(sp)
    6370:	11000017 	ldw	r4,0(r2)
    6374:	11400117 	ldw	r5,4(r2)
    6378:	d8800717 	ldw	r2,28(sp)
    637c:	d9801015 	stw	r6,64(sp)
    6380:	880d883a 	mov	r6,r17
    6384:	da801615 	stw	r10,88(sp)
    6388:	15c00044 	addi	r23,r2,1
    638c:	000ec2c0 	call	ec2c <__muldf3>
    6390:	a80b883a 	mov	r5,r21
    6394:	a009883a 	mov	r4,r20
    6398:	d8c01115 	stw	r3,68(sp)
    639c:	d8800e15 	stw	r2,56(sp)
    63a0:	000fc200 	call	fc20 <__fixdfsi>
    63a4:	1009883a 	mov	r4,r2
    63a8:	1023883a 	mov	r17,r2
    63ac:	000fca80 	call	fca8 <__floatsidf>
    63b0:	a009883a 	mov	r4,r20
    63b4:	a80b883a 	mov	r5,r21
    63b8:	100d883a 	mov	r6,r2
    63bc:	180f883a 	mov	r7,r3
    63c0:	000f3500 	call	f350 <__subdf3>
    63c4:	1813883a 	mov	r9,r3
    63c8:	d8c00717 	ldw	r3,28(sp)
    63cc:	8c400c04 	addi	r17,r17,48
    63d0:	1011883a 	mov	r8,r2
    63d4:	1c400005 	stb	r17,0(r3)
    63d8:	da801617 	ldw	r10,88(sp)
    63dc:	00800044 	movi	r2,1
    63e0:	50802326 	beq	r10,r2,6470 <_dtoa_r+0x14ac>
    63e4:	d8800717 	ldw	r2,28(sp)
    63e8:	b82b883a 	mov	r21,r23
    63ec:	dc001315 	stw	r16,76(sp)
    63f0:	12a9883a 	add	r20,r2,r10
    63f4:	4807883a 	mov	r3,r9
    63f8:	4005883a 	mov	r2,r8
    63fc:	dc801415 	stw	r18,80(sp)
    6400:	000d883a 	mov	r6,zero
    6404:	01d00934 	movhi	r7,16420
    6408:	1009883a 	mov	r4,r2
    640c:	180b883a 	mov	r5,r3
    6410:	000ec2c0 	call	ec2c <__muldf3>
    6414:	180b883a 	mov	r5,r3
    6418:	1009883a 	mov	r4,r2
    641c:	1821883a 	mov	r16,r3
    6420:	1025883a 	mov	r18,r2
    6424:	000fc200 	call	fc20 <__fixdfsi>
    6428:	1009883a 	mov	r4,r2
    642c:	1023883a 	mov	r17,r2
    6430:	000fca80 	call	fca8 <__floatsidf>
    6434:	9009883a 	mov	r4,r18
    6438:	800b883a 	mov	r5,r16
    643c:	100d883a 	mov	r6,r2
    6440:	180f883a 	mov	r7,r3
    6444:	8c400c04 	addi	r17,r17,48
    6448:	000f3500 	call	f350 <__subdf3>
    644c:	ad400044 	addi	r21,r21,1
    6450:	ac7fffc5 	stb	r17,-1(r21)
    6454:	ad3fea1e 	bne	r21,r20,6400 <__alt_mem_Flash_flash_data+0xf4006400>
    6458:	1813883a 	mov	r9,r3
    645c:	d8c01017 	ldw	r3,64(sp)
    6460:	dc001317 	ldw	r16,76(sp)
    6464:	dc801417 	ldw	r18,80(sp)
    6468:	1011883a 	mov	r8,r2
    646c:	b8ef883a 	add	r23,r23,r3
    6470:	d9000e17 	ldw	r4,56(sp)
    6474:	d9401117 	ldw	r5,68(sp)
    6478:	000d883a 	mov	r6,zero
    647c:	01cff834 	movhi	r7,16352
    6480:	da001715 	stw	r8,92(sp)
    6484:	da401515 	stw	r9,84(sp)
    6488:	000d8800 	call	d880 <__adddf3>
    648c:	da001717 	ldw	r8,92(sp)
    6490:	da401517 	ldw	r9,84(sp)
    6494:	1009883a 	mov	r4,r2
    6498:	400d883a 	mov	r6,r8
    649c:	480f883a 	mov	r7,r9
    64a0:	180b883a 	mov	r5,r3
    64a4:	000eb4c0 	call	eb4c <__ledf2>
    64a8:	da001717 	ldw	r8,92(sp)
    64ac:	da401517 	ldw	r9,84(sp)
    64b0:	10003b0e 	bge	r2,zero,65a0 <_dtoa_r+0x15dc>
    64b4:	d9001217 	ldw	r4,72(sp)
    64b8:	bd7fffc3 	ldbu	r21,-1(r23)
    64bc:	d9000515 	stw	r4,20(sp)
    64c0:	003d1c06 	br	5934 <__alt_mem_Flash_flash_data+0xf4005934>
    64c4:	d8c00817 	ldw	r3,32(sp)
    64c8:	18a9c83a 	sub	r20,r3,r2
    64cc:	0005883a 	mov	r2,zero
    64d0:	003d3706 	br	59b0 <__alt_mem_Flash_flash_data+0xf40059b0>
    64d4:	00800044 	movi	r2,1
    64d8:	003dd006 	br	5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    64dc:	d8c00217 	ldw	r3,8(sp)
    64e0:	00800d84 	movi	r2,54
    64e4:	dd400917 	ldw	r21,36(sp)
    64e8:	10c5c83a 	sub	r2,r2,r3
    64ec:	dd000817 	ldw	r20,32(sp)
    64f0:	003d2f06 	br	59b0 <__alt_mem_Flash_flash_data+0xf40059b0>
    64f4:	9029883a 	mov	r20,r18
    64f8:	982b883a 	mov	r21,r19
    64fc:	04400084 	movi	r17,2
    6500:	003bc606 	br	541c <__alt_mem_Flash_flash_data+0xf400541c>
    6504:	d8800617 	ldw	r2,24(sp)
    6508:	103efc26 	beq	r2,zero,60fc <__alt_mem_Flash_flash_data+0xf40060fc>
    650c:	d8c00c17 	ldw	r3,48(sp)
    6510:	00fc890e 	bge	zero,r3,5738 <__alt_mem_Flash_flash_data+0xf4005738>
    6514:	a80b883a 	mov	r5,r21
    6518:	a009883a 	mov	r4,r20
    651c:	000d883a 	mov	r6,zero
    6520:	01d00934 	movhi	r7,16420
    6524:	000ec2c0 	call	ec2c <__muldf3>
    6528:	89000044 	addi	r4,r17,1
    652c:	1029883a 	mov	r20,r2
    6530:	182b883a 	mov	r21,r3
    6534:	000fca80 	call	fca8 <__floatsidf>
    6538:	a009883a 	mov	r4,r20
    653c:	a80b883a 	mov	r5,r21
    6540:	100d883a 	mov	r6,r2
    6544:	180f883a 	mov	r7,r3
    6548:	000ec2c0 	call	ec2c <__muldf3>
    654c:	1009883a 	mov	r4,r2
    6550:	180b883a 	mov	r5,r3
    6554:	000d883a 	mov	r6,zero
    6558:	01d00734 	movhi	r7,16412
    655c:	000d8800 	call	d880 <__adddf3>
    6560:	d9000517 	ldw	r4,20(sp)
    6564:	1023883a 	mov	r17,r2
    6568:	00bf3034 	movhi	r2,64704
    656c:	213fffc4 	addi	r4,r4,-1
    6570:	1885883a 	add	r2,r3,r2
    6574:	d9001215 	stw	r4,72(sp)
    6578:	d8800e15 	stw	r2,56(sp)
    657c:	da800c17 	ldw	r10,48(sp)
    6580:	003bc306 	br	5490 <__alt_mem_Flash_flash_data+0xf4005490>
    6584:	b039883a 	mov	fp,r22
    6588:	01000e44 	movi	r4,57
    658c:	8825883a 	mov	r18,r17
    6590:	9dc00044 	addi	r23,r19,1
    6594:	99000005 	stb	r4,0(r19)
    6598:	a023883a 	mov	r17,r20
    659c:	003dae06 	br	5c58 <__alt_mem_Flash_flash_data+0xf4005c58>
    65a0:	d9800e17 	ldw	r6,56(sp)
    65a4:	d9c01117 	ldw	r7,68(sp)
    65a8:	0009883a 	mov	r4,zero
    65ac:	014ff834 	movhi	r5,16352
    65b0:	da001715 	stw	r8,92(sp)
    65b4:	da401515 	stw	r9,84(sp)
    65b8:	000f3500 	call	f350 <__subdf3>
    65bc:	da001717 	ldw	r8,92(sp)
    65c0:	da401517 	ldw	r9,84(sp)
    65c4:	1009883a 	mov	r4,r2
    65c8:	180b883a 	mov	r5,r3
    65cc:	400d883a 	mov	r6,r8
    65d0:	480f883a 	mov	r7,r9
    65d4:	000ea6c0 	call	ea6c <__gedf2>
    65d8:	00bc570e 	bge	zero,r2,5738 <__alt_mem_Flash_flash_data+0xf4005738>
    65dc:	01000c04 	movi	r4,48
    65e0:	00000106 	br	65e8 <_dtoa_r+0x1624>
    65e4:	102f883a 	mov	r23,r2
    65e8:	b8bfffc4 	addi	r2,r23,-1
    65ec:	10c00007 	ldb	r3,0(r2)
    65f0:	193ffc26 	beq	r3,r4,65e4 <__alt_mem_Flash_flash_data+0xf40065e4>
    65f4:	d9801217 	ldw	r6,72(sp)
    65f8:	d9800515 	stw	r6,20(sp)
    65fc:	003c1f06 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    6600:	d8801217 	ldw	r2,72(sp)
    6604:	dc001117 	ldw	r16,68(sp)
    6608:	d8800515 	stw	r2,20(sp)
    660c:	003cc906 	br	5934 <__alt_mem_Flash_flash_data+0xf4005934>
    6610:	dd801317 	ldw	r22,76(sp)
    6614:	dc001117 	ldw	r16,68(sp)
    6618:	dcc01417 	ldw	r19,80(sp)
    661c:	dc801017 	ldw	r18,64(sp)
    6620:	003c4506 	br	5738 <__alt_mem_Flash_flash_data+0xf4005738>
    6624:	103e5d1e 	bne	r2,zero,5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    6628:	4080004c 	andi	r2,r8,1
    662c:	103e5b26 	beq	r2,zero,5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    6630:	003e5706 	br	5f90 <__alt_mem_Flash_flash_data+0xf4005f90>
    6634:	d8c00317 	ldw	r3,12(sp)
    6638:	00800084 	movi	r2,2
    663c:	10c00a16 	blt	r2,r3,6668 <_dtoa_r+0x16a4>
    6640:	d9000c17 	ldw	r4,48(sp)
    6644:	003e8306 	br	6054 <__alt_mem_Flash_flash_data+0xf4006054>
    6648:	04400084 	movi	r17,2
    664c:	003b7306 	br	541c <__alt_mem_Flash_flash_data+0xf400541c>
    6650:	d9801217 	ldw	r6,72(sp)
    6654:	d9800515 	stw	r6,20(sp)
    6658:	003cb606 	br	5934 <__alt_mem_Flash_flash_data+0xf4005934>
    665c:	d9001217 	ldw	r4,72(sp)
    6660:	d9000515 	stw	r4,20(sp)
    6664:	003c0506 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    6668:	d9800c17 	ldw	r6,48(sp)
    666c:	d9800615 	stw	r6,24(sp)
    6670:	003e8306 	br	6080 <__alt_mem_Flash_flash_data+0xf4006080>
    6674:	d9800317 	ldw	r6,12(sp)
    6678:	00800084 	movi	r2,2
    667c:	11800216 	blt	r2,r6,6688 <_dtoa_r+0x16c4>
    6680:	d8800c17 	ldw	r2,48(sp)
    6684:	003da606 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    6688:	d8800c17 	ldw	r2,48(sp)
    668c:	d8800615 	stw	r2,24(sp)
    6690:	003e7b06 	br	6080 <__alt_mem_Flash_flash_data+0xf4006080>
    6694:	05000044 	movi	r20,1
    6698:	003b0506 	br	52b0 <__alt_mem_Flash_flash_data+0xf40052b0>
    669c:	8009883a 	mov	r4,r16
    66a0:	80001115 	stw	zero,68(r16)
    66a4:	000b883a 	mov	r5,zero
    66a8:	00085380 	call	8538 <_Balloc>
    66ac:	d8800715 	stw	r2,28(sp)
    66b0:	d8c00717 	ldw	r3,28(sp)
    66b4:	00bfffc4 	movi	r2,-1
    66b8:	01000044 	movi	r4,1
    66bc:	d8800c15 	stw	r2,48(sp)
    66c0:	80c01015 	stw	r3,64(r16)
    66c4:	d9000b15 	stw	r4,44(sp)
    66c8:	d8800615 	stw	r2,24(sp)
    66cc:	d8002215 	stw	zero,136(sp)
    66d0:	003c1906 	br	5738 <__alt_mem_Flash_flash_data+0xf4005738>
    66d4:	193d2926 	beq	r3,r4,5b7c <__alt_mem_Flash_flash_data+0xf4005b7c>
    66d8:	00c00f04 	movi	r3,60
    66dc:	1885c83a 	sub	r2,r3,r2
    66e0:	003d7b06 	br	5cd0 <__alt_mem_Flash_flash_data+0xf4005cd0>
    66e4:	000b883a 	mov	r5,zero
    66e8:	003b1006 	br	532c <__alt_mem_Flash_flash_data+0xf400532c>

000066ec <__sflush_r>:
    66ec:	2880030b 	ldhu	r2,12(r5)
    66f0:	defffb04 	addi	sp,sp,-20
    66f4:	dcc00315 	stw	r19,12(sp)
    66f8:	dc400115 	stw	r17,4(sp)
    66fc:	dfc00415 	stw	ra,16(sp)
    6700:	dc800215 	stw	r18,8(sp)
    6704:	dc000015 	stw	r16,0(sp)
    6708:	10c0020c 	andi	r3,r2,8
    670c:	2823883a 	mov	r17,r5
    6710:	2027883a 	mov	r19,r4
    6714:	1800311e 	bne	r3,zero,67dc <__sflush_r+0xf0>
    6718:	28c00117 	ldw	r3,4(r5)
    671c:	10820014 	ori	r2,r2,2048
    6720:	2880030d 	sth	r2,12(r5)
    6724:	00c04b0e 	bge	zero,r3,6854 <__sflush_r+0x168>
    6728:	8a000a17 	ldw	r8,40(r17)
    672c:	40002326 	beq	r8,zero,67bc <__sflush_r+0xd0>
    6730:	9c000017 	ldw	r16,0(r19)
    6734:	10c4000c 	andi	r3,r2,4096
    6738:	98000015 	stw	zero,0(r19)
    673c:	18004826 	beq	r3,zero,6860 <__sflush_r+0x174>
    6740:	89801417 	ldw	r6,80(r17)
    6744:	10c0010c 	andi	r3,r2,4
    6748:	18000626 	beq	r3,zero,6764 <__sflush_r+0x78>
    674c:	88c00117 	ldw	r3,4(r17)
    6750:	88800c17 	ldw	r2,48(r17)
    6754:	30cdc83a 	sub	r6,r6,r3
    6758:	10000226 	beq	r2,zero,6764 <__sflush_r+0x78>
    675c:	88800f17 	ldw	r2,60(r17)
    6760:	308dc83a 	sub	r6,r6,r2
    6764:	89400717 	ldw	r5,28(r17)
    6768:	9809883a 	mov	r4,r19
    676c:	000f883a 	mov	r7,zero
    6770:	403ee83a 	callr	r8
    6774:	00ffffc4 	movi	r3,-1
    6778:	10c04426 	beq	r2,r3,688c <__sflush_r+0x1a0>
    677c:	88c0030b 	ldhu	r3,12(r17)
    6780:	89000417 	ldw	r4,16(r17)
    6784:	88000115 	stw	zero,4(r17)
    6788:	197dffcc 	andi	r5,r3,63487
    678c:	8940030d 	sth	r5,12(r17)
    6790:	89000015 	stw	r4,0(r17)
    6794:	18c4000c 	andi	r3,r3,4096
    6798:	18002c1e 	bne	r3,zero,684c <__sflush_r+0x160>
    679c:	89400c17 	ldw	r5,48(r17)
    67a0:	9c000015 	stw	r16,0(r19)
    67a4:	28000526 	beq	r5,zero,67bc <__sflush_r+0xd0>
    67a8:	88801004 	addi	r2,r17,64
    67ac:	28800226 	beq	r5,r2,67b8 <__sflush_r+0xcc>
    67b0:	9809883a 	mov	r4,r19
    67b4:	0006e440 	call	6e44 <_free_r>
    67b8:	88000c15 	stw	zero,48(r17)
    67bc:	0005883a 	mov	r2,zero
    67c0:	dfc00417 	ldw	ra,16(sp)
    67c4:	dcc00317 	ldw	r19,12(sp)
    67c8:	dc800217 	ldw	r18,8(sp)
    67cc:	dc400117 	ldw	r17,4(sp)
    67d0:	dc000017 	ldw	r16,0(sp)
    67d4:	dec00504 	addi	sp,sp,20
    67d8:	f800283a 	ret
    67dc:	2c800417 	ldw	r18,16(r5)
    67e0:	903ff626 	beq	r18,zero,67bc <__alt_mem_Flash_flash_data+0xf40067bc>
    67e4:	2c000017 	ldw	r16,0(r5)
    67e8:	108000cc 	andi	r2,r2,3
    67ec:	2c800015 	stw	r18,0(r5)
    67f0:	84a1c83a 	sub	r16,r16,r18
    67f4:	1000131e 	bne	r2,zero,6844 <__sflush_r+0x158>
    67f8:	28800517 	ldw	r2,20(r5)
    67fc:	88800215 	stw	r2,8(r17)
    6800:	04000316 	blt	zero,r16,6810 <__sflush_r+0x124>
    6804:	003fed06 	br	67bc <__alt_mem_Flash_flash_data+0xf40067bc>
    6808:	90a5883a 	add	r18,r18,r2
    680c:	043feb0e 	bge	zero,r16,67bc <__alt_mem_Flash_flash_data+0xf40067bc>
    6810:	88800917 	ldw	r2,36(r17)
    6814:	89400717 	ldw	r5,28(r17)
    6818:	800f883a 	mov	r7,r16
    681c:	900d883a 	mov	r6,r18
    6820:	9809883a 	mov	r4,r19
    6824:	103ee83a 	callr	r2
    6828:	80a1c83a 	sub	r16,r16,r2
    682c:	00bff616 	blt	zero,r2,6808 <__alt_mem_Flash_flash_data+0xf4006808>
    6830:	88c0030b 	ldhu	r3,12(r17)
    6834:	00bfffc4 	movi	r2,-1
    6838:	18c01014 	ori	r3,r3,64
    683c:	88c0030d 	sth	r3,12(r17)
    6840:	003fdf06 	br	67c0 <__alt_mem_Flash_flash_data+0xf40067c0>
    6844:	0005883a 	mov	r2,zero
    6848:	003fec06 	br	67fc <__alt_mem_Flash_flash_data+0xf40067fc>
    684c:	88801415 	stw	r2,80(r17)
    6850:	003fd206 	br	679c <__alt_mem_Flash_flash_data+0xf400679c>
    6854:	28c00f17 	ldw	r3,60(r5)
    6858:	00ffb316 	blt	zero,r3,6728 <__alt_mem_Flash_flash_data+0xf4006728>
    685c:	003fd706 	br	67bc <__alt_mem_Flash_flash_data+0xf40067bc>
    6860:	89400717 	ldw	r5,28(r17)
    6864:	000d883a 	mov	r6,zero
    6868:	9809883a 	mov	r4,r19
    686c:	01c00044 	movi	r7,1
    6870:	403ee83a 	callr	r8
    6874:	100d883a 	mov	r6,r2
    6878:	00bfffc4 	movi	r2,-1
    687c:	30801426 	beq	r6,r2,68d0 <__sflush_r+0x1e4>
    6880:	8880030b 	ldhu	r2,12(r17)
    6884:	8a000a17 	ldw	r8,40(r17)
    6888:	003fae06 	br	6744 <__alt_mem_Flash_flash_data+0xf4006744>
    688c:	98c00017 	ldw	r3,0(r19)
    6890:	183fba26 	beq	r3,zero,677c <__alt_mem_Flash_flash_data+0xf400677c>
    6894:	01000744 	movi	r4,29
    6898:	19000626 	beq	r3,r4,68b4 <__sflush_r+0x1c8>
    689c:	01000584 	movi	r4,22
    68a0:	19000426 	beq	r3,r4,68b4 <__sflush_r+0x1c8>
    68a4:	88c0030b 	ldhu	r3,12(r17)
    68a8:	18c01014 	ori	r3,r3,64
    68ac:	88c0030d 	sth	r3,12(r17)
    68b0:	003fc306 	br	67c0 <__alt_mem_Flash_flash_data+0xf40067c0>
    68b4:	8880030b 	ldhu	r2,12(r17)
    68b8:	88c00417 	ldw	r3,16(r17)
    68bc:	88000115 	stw	zero,4(r17)
    68c0:	10bdffcc 	andi	r2,r2,63487
    68c4:	8880030d 	sth	r2,12(r17)
    68c8:	88c00015 	stw	r3,0(r17)
    68cc:	003fb306 	br	679c <__alt_mem_Flash_flash_data+0xf400679c>
    68d0:	98800017 	ldw	r2,0(r19)
    68d4:	103fea26 	beq	r2,zero,6880 <__alt_mem_Flash_flash_data+0xf4006880>
    68d8:	00c00744 	movi	r3,29
    68dc:	10c00226 	beq	r2,r3,68e8 <__sflush_r+0x1fc>
    68e0:	00c00584 	movi	r3,22
    68e4:	10ffd21e 	bne	r2,r3,6830 <__alt_mem_Flash_flash_data+0xf4006830>
    68e8:	9c000015 	stw	r16,0(r19)
    68ec:	0005883a 	mov	r2,zero
    68f0:	003fb306 	br	67c0 <__alt_mem_Flash_flash_data+0xf40067c0>

000068f4 <_fflush_r>:
    68f4:	defffd04 	addi	sp,sp,-12
    68f8:	dc000115 	stw	r16,4(sp)
    68fc:	dfc00215 	stw	ra,8(sp)
    6900:	2021883a 	mov	r16,r4
    6904:	20000226 	beq	r4,zero,6910 <_fflush_r+0x1c>
    6908:	20800e17 	ldw	r2,56(r4)
    690c:	10000c26 	beq	r2,zero,6940 <_fflush_r+0x4c>
    6910:	2880030f 	ldh	r2,12(r5)
    6914:	1000051e 	bne	r2,zero,692c <_fflush_r+0x38>
    6918:	0005883a 	mov	r2,zero
    691c:	dfc00217 	ldw	ra,8(sp)
    6920:	dc000117 	ldw	r16,4(sp)
    6924:	dec00304 	addi	sp,sp,12
    6928:	f800283a 	ret
    692c:	8009883a 	mov	r4,r16
    6930:	dfc00217 	ldw	ra,8(sp)
    6934:	dc000117 	ldw	r16,4(sp)
    6938:	dec00304 	addi	sp,sp,12
    693c:	00066ec1 	jmpi	66ec <__sflush_r>
    6940:	d9400015 	stw	r5,0(sp)
    6944:	0006cd00 	call	6cd0 <__sinit>
    6948:	d9400017 	ldw	r5,0(sp)
    694c:	003ff006 	br	6910 <__alt_mem_Flash_flash_data+0xf4006910>

00006950 <fflush>:
    6950:	20000526 	beq	r4,zero,6968 <fflush+0x18>
    6954:	008000b4 	movhi	r2,2
    6958:	10ba9b04 	addi	r2,r2,-5524
    695c:	200b883a 	mov	r5,r4
    6960:	11000017 	ldw	r4,0(r2)
    6964:	00068f41 	jmpi	68f4 <_fflush_r>
    6968:	008000b4 	movhi	r2,2
    696c:	10ba9a04 	addi	r2,r2,-5528
    6970:	11000017 	ldw	r4,0(r2)
    6974:	01400034 	movhi	r5,0
    6978:	295a3d04 	addi	r5,r5,26868
    697c:	00076b81 	jmpi	76b8 <_fwalk_reent>

00006980 <__fp_lock>:
    6980:	0005883a 	mov	r2,zero
    6984:	f800283a 	ret

00006988 <__fp_unlock>:
    6988:	0005883a 	mov	r2,zero
    698c:	f800283a 	ret

00006990 <_cleanup_r>:
    6990:	01400074 	movhi	r5,1
    6994:	29712004 	addi	r5,r5,-15232
    6998:	00076b81 	jmpi	76b8 <_fwalk_reent>

0000699c <__sinit.part.1>:
    699c:	defff704 	addi	sp,sp,-36
    69a0:	00c00034 	movhi	r3,0
    69a4:	dfc00815 	stw	ra,32(sp)
    69a8:	ddc00715 	stw	r23,28(sp)
    69ac:	dd800615 	stw	r22,24(sp)
    69b0:	dd400515 	stw	r21,20(sp)
    69b4:	dd000415 	stw	r20,16(sp)
    69b8:	dcc00315 	stw	r19,12(sp)
    69bc:	dc800215 	stw	r18,8(sp)
    69c0:	dc400115 	stw	r17,4(sp)
    69c4:	dc000015 	stw	r16,0(sp)
    69c8:	18da6404 	addi	r3,r3,27024
    69cc:	24000117 	ldw	r16,4(r4)
    69d0:	20c00f15 	stw	r3,60(r4)
    69d4:	2080bb04 	addi	r2,r4,748
    69d8:	00c000c4 	movi	r3,3
    69dc:	20c0b915 	stw	r3,740(r4)
    69e0:	2080ba15 	stw	r2,744(r4)
    69e4:	2000b815 	stw	zero,736(r4)
    69e8:	05c00204 	movi	r23,8
    69ec:	00800104 	movi	r2,4
    69f0:	2025883a 	mov	r18,r4
    69f4:	b80d883a 	mov	r6,r23
    69f8:	81001704 	addi	r4,r16,92
    69fc:	000b883a 	mov	r5,zero
    6a00:	80000015 	stw	zero,0(r16)
    6a04:	80000115 	stw	zero,4(r16)
    6a08:	80000215 	stw	zero,8(r16)
    6a0c:	8080030d 	sth	r2,12(r16)
    6a10:	80001915 	stw	zero,100(r16)
    6a14:	8000038d 	sth	zero,14(r16)
    6a18:	80000415 	stw	zero,16(r16)
    6a1c:	80000515 	stw	zero,20(r16)
    6a20:	80000615 	stw	zero,24(r16)
    6a24:	00008680 	call	868 <memset>
    6a28:	05800074 	movhi	r22,1
    6a2c:	94400217 	ldw	r17,8(r18)
    6a30:	05400074 	movhi	r21,1
    6a34:	05000074 	movhi	r20,1
    6a38:	04c00074 	movhi	r19,1
    6a3c:	b5a6c204 	addi	r22,r22,-25848
    6a40:	ad66d904 	addi	r21,r21,-25756
    6a44:	a526f804 	addi	r20,r20,-25632
    6a48:	9ce70f04 	addi	r19,r19,-25540
    6a4c:	85800815 	stw	r22,32(r16)
    6a50:	85400915 	stw	r21,36(r16)
    6a54:	85000a15 	stw	r20,40(r16)
    6a58:	84c00b15 	stw	r19,44(r16)
    6a5c:	84000715 	stw	r16,28(r16)
    6a60:	00800284 	movi	r2,10
    6a64:	8880030d 	sth	r2,12(r17)
    6a68:	00800044 	movi	r2,1
    6a6c:	89001704 	addi	r4,r17,92
    6a70:	b80d883a 	mov	r6,r23
    6a74:	000b883a 	mov	r5,zero
    6a78:	88000015 	stw	zero,0(r17)
    6a7c:	88000115 	stw	zero,4(r17)
    6a80:	88000215 	stw	zero,8(r17)
    6a84:	88001915 	stw	zero,100(r17)
    6a88:	8880038d 	sth	r2,14(r17)
    6a8c:	88000415 	stw	zero,16(r17)
    6a90:	88000515 	stw	zero,20(r17)
    6a94:	88000615 	stw	zero,24(r17)
    6a98:	00008680 	call	868 <memset>
    6a9c:	94000317 	ldw	r16,12(r18)
    6aa0:	00800484 	movi	r2,18
    6aa4:	8c400715 	stw	r17,28(r17)
    6aa8:	8d800815 	stw	r22,32(r17)
    6aac:	8d400915 	stw	r21,36(r17)
    6ab0:	8d000a15 	stw	r20,40(r17)
    6ab4:	8cc00b15 	stw	r19,44(r17)
    6ab8:	8080030d 	sth	r2,12(r16)
    6abc:	00800084 	movi	r2,2
    6ac0:	80000015 	stw	zero,0(r16)
    6ac4:	80000115 	stw	zero,4(r16)
    6ac8:	80000215 	stw	zero,8(r16)
    6acc:	80001915 	stw	zero,100(r16)
    6ad0:	8080038d 	sth	r2,14(r16)
    6ad4:	80000415 	stw	zero,16(r16)
    6ad8:	80000515 	stw	zero,20(r16)
    6adc:	80000615 	stw	zero,24(r16)
    6ae0:	81001704 	addi	r4,r16,92
    6ae4:	000b883a 	mov	r5,zero
    6ae8:	b80d883a 	mov	r6,r23
    6aec:	00008680 	call	868 <memset>
    6af0:	00800044 	movi	r2,1
    6af4:	84000715 	stw	r16,28(r16)
    6af8:	85800815 	stw	r22,32(r16)
    6afc:	85400915 	stw	r21,36(r16)
    6b00:	85000a15 	stw	r20,40(r16)
    6b04:	84c00b15 	stw	r19,44(r16)
    6b08:	90800e15 	stw	r2,56(r18)
    6b0c:	dfc00817 	ldw	ra,32(sp)
    6b10:	ddc00717 	ldw	r23,28(sp)
    6b14:	dd800617 	ldw	r22,24(sp)
    6b18:	dd400517 	ldw	r21,20(sp)
    6b1c:	dd000417 	ldw	r20,16(sp)
    6b20:	dcc00317 	ldw	r19,12(sp)
    6b24:	dc800217 	ldw	r18,8(sp)
    6b28:	dc400117 	ldw	r17,4(sp)
    6b2c:	dc000017 	ldw	r16,0(sp)
    6b30:	dec00904 	addi	sp,sp,36
    6b34:	f800283a 	ret

00006b38 <__sfmoreglue>:
    6b38:	defffc04 	addi	sp,sp,-16
    6b3c:	dc400115 	stw	r17,4(sp)
    6b40:	2c7fffc4 	addi	r17,r5,-1
    6b44:	8c401a24 	muli	r17,r17,104
    6b48:	dc800215 	stw	r18,8(sp)
    6b4c:	2825883a 	mov	r18,r5
    6b50:	89401d04 	addi	r5,r17,116
    6b54:	dc000015 	stw	r16,0(sp)
    6b58:	dfc00315 	stw	ra,12(sp)
    6b5c:	0007a140 	call	7a14 <_malloc_r>
    6b60:	1021883a 	mov	r16,r2
    6b64:	10000726 	beq	r2,zero,6b84 <__sfmoreglue+0x4c>
    6b68:	11000304 	addi	r4,r2,12
    6b6c:	10000015 	stw	zero,0(r2)
    6b70:	14800115 	stw	r18,4(r2)
    6b74:	11000215 	stw	r4,8(r2)
    6b78:	000b883a 	mov	r5,zero
    6b7c:	89801a04 	addi	r6,r17,104
    6b80:	00008680 	call	868 <memset>
    6b84:	8005883a 	mov	r2,r16
    6b88:	dfc00317 	ldw	ra,12(sp)
    6b8c:	dc800217 	ldw	r18,8(sp)
    6b90:	dc400117 	ldw	r17,4(sp)
    6b94:	dc000017 	ldw	r16,0(sp)
    6b98:	dec00404 	addi	sp,sp,16
    6b9c:	f800283a 	ret

00006ba0 <__sfp>:
    6ba0:	008000b4 	movhi	r2,2
    6ba4:	defffb04 	addi	sp,sp,-20
    6ba8:	10ba9a04 	addi	r2,r2,-5528
    6bac:	dc800215 	stw	r18,8(sp)
    6bb0:	14800017 	ldw	r18,0(r2)
    6bb4:	dcc00315 	stw	r19,12(sp)
    6bb8:	dfc00415 	stw	ra,16(sp)
    6bbc:	90800e17 	ldw	r2,56(r18)
    6bc0:	dc400115 	stw	r17,4(sp)
    6bc4:	dc000015 	stw	r16,0(sp)
    6bc8:	2027883a 	mov	r19,r4
    6bcc:	1000021e 	bne	r2,zero,6bd8 <__sfp+0x38>
    6bd0:	9009883a 	mov	r4,r18
    6bd4:	000699c0 	call	699c <__sinit.part.1>
    6bd8:	9480b804 	addi	r18,r18,736
    6bdc:	047fffc4 	movi	r17,-1
    6be0:	91400117 	ldw	r5,4(r18)
    6be4:	94000217 	ldw	r16,8(r18)
    6be8:	297fffc4 	addi	r5,r5,-1
    6bec:	28000a16 	blt	r5,zero,6c18 <__sfp+0x78>
    6bf0:	8080030f 	ldh	r2,12(r16)
    6bf4:	10000c26 	beq	r2,zero,6c28 <__sfp+0x88>
    6bf8:	80c01d04 	addi	r3,r16,116
    6bfc:	00000206 	br	6c08 <__sfp+0x68>
    6c00:	18bfe60f 	ldh	r2,-104(r3)
    6c04:	10000826 	beq	r2,zero,6c28 <__sfp+0x88>
    6c08:	297fffc4 	addi	r5,r5,-1
    6c0c:	1c3ffd04 	addi	r16,r3,-12
    6c10:	18c01a04 	addi	r3,r3,104
    6c14:	2c7ffa1e 	bne	r5,r17,6c00 <__alt_mem_Flash_flash_data+0xf4006c00>
    6c18:	90800017 	ldw	r2,0(r18)
    6c1c:	10001d26 	beq	r2,zero,6c94 <__sfp+0xf4>
    6c20:	1025883a 	mov	r18,r2
    6c24:	003fee06 	br	6be0 <__alt_mem_Flash_flash_data+0xf4006be0>
    6c28:	00bfffc4 	movi	r2,-1
    6c2c:	8080038d 	sth	r2,14(r16)
    6c30:	00800044 	movi	r2,1
    6c34:	8080030d 	sth	r2,12(r16)
    6c38:	80001915 	stw	zero,100(r16)
    6c3c:	80000015 	stw	zero,0(r16)
    6c40:	80000215 	stw	zero,8(r16)
    6c44:	80000115 	stw	zero,4(r16)
    6c48:	80000415 	stw	zero,16(r16)
    6c4c:	80000515 	stw	zero,20(r16)
    6c50:	80000615 	stw	zero,24(r16)
    6c54:	81001704 	addi	r4,r16,92
    6c58:	000b883a 	mov	r5,zero
    6c5c:	01800204 	movi	r6,8
    6c60:	00008680 	call	868 <memset>
    6c64:	8005883a 	mov	r2,r16
    6c68:	80000c15 	stw	zero,48(r16)
    6c6c:	80000d15 	stw	zero,52(r16)
    6c70:	80001115 	stw	zero,68(r16)
    6c74:	80001215 	stw	zero,72(r16)
    6c78:	dfc00417 	ldw	ra,16(sp)
    6c7c:	dcc00317 	ldw	r19,12(sp)
    6c80:	dc800217 	ldw	r18,8(sp)
    6c84:	dc400117 	ldw	r17,4(sp)
    6c88:	dc000017 	ldw	r16,0(sp)
    6c8c:	dec00504 	addi	sp,sp,20
    6c90:	f800283a 	ret
    6c94:	9809883a 	mov	r4,r19
    6c98:	01400104 	movi	r5,4
    6c9c:	0006b380 	call	6b38 <__sfmoreglue>
    6ca0:	90800015 	stw	r2,0(r18)
    6ca4:	103fde1e 	bne	r2,zero,6c20 <__alt_mem_Flash_flash_data+0xf4006c20>
    6ca8:	00800304 	movi	r2,12
    6cac:	98800015 	stw	r2,0(r19)
    6cb0:	0005883a 	mov	r2,zero
    6cb4:	003ff006 	br	6c78 <__alt_mem_Flash_flash_data+0xf4006c78>

00006cb8 <_cleanup>:
    6cb8:	008000b4 	movhi	r2,2
    6cbc:	10ba9a04 	addi	r2,r2,-5528
    6cc0:	11000017 	ldw	r4,0(r2)
    6cc4:	01400074 	movhi	r5,1
    6cc8:	29712004 	addi	r5,r5,-15232
    6ccc:	00076b81 	jmpi	76b8 <_fwalk_reent>

00006cd0 <__sinit>:
    6cd0:	20800e17 	ldw	r2,56(r4)
    6cd4:	10000126 	beq	r2,zero,6cdc <__sinit+0xc>
    6cd8:	f800283a 	ret
    6cdc:	000699c1 	jmpi	699c <__sinit.part.1>

00006ce0 <__sfp_lock_acquire>:
    6ce0:	f800283a 	ret

00006ce4 <__sfp_lock_release>:
    6ce4:	f800283a 	ret

00006ce8 <__sinit_lock_acquire>:
    6ce8:	f800283a 	ret

00006cec <__sinit_lock_release>:
    6cec:	f800283a 	ret

00006cf0 <__fp_lock_all>:
    6cf0:	008000b4 	movhi	r2,2
    6cf4:	10ba9b04 	addi	r2,r2,-5524
    6cf8:	11000017 	ldw	r4,0(r2)
    6cfc:	01400034 	movhi	r5,0
    6d00:	295a6004 	addi	r5,r5,27008
    6d04:	00075f41 	jmpi	75f4 <_fwalk>

00006d08 <__fp_unlock_all>:
    6d08:	008000b4 	movhi	r2,2
    6d0c:	10ba9b04 	addi	r2,r2,-5524
    6d10:	11000017 	ldw	r4,0(r2)
    6d14:	01400034 	movhi	r5,0
    6d18:	295a6204 	addi	r5,r5,27016
    6d1c:	00075f41 	jmpi	75f4 <_fwalk>

00006d20 <_malloc_trim_r>:
    6d20:	defffb04 	addi	sp,sp,-20
    6d24:	dcc00315 	stw	r19,12(sp)
    6d28:	04c000b4 	movhi	r19,2
    6d2c:	dc800215 	stw	r18,8(sp)
    6d30:	dc400115 	stw	r17,4(sp)
    6d34:	dc000015 	stw	r16,0(sp)
    6d38:	dfc00415 	stw	ra,16(sp)
    6d3c:	2821883a 	mov	r16,r5
    6d40:	9cf41c04 	addi	r19,r19,-12176
    6d44:	2025883a 	mov	r18,r4
    6d48:	001095c0 	call	1095c <__malloc_lock>
    6d4c:	98800217 	ldw	r2,8(r19)
    6d50:	14400117 	ldw	r17,4(r2)
    6d54:	00bfff04 	movi	r2,-4
    6d58:	88a2703a 	and	r17,r17,r2
    6d5c:	8c21c83a 	sub	r16,r17,r16
    6d60:	8403fbc4 	addi	r16,r16,4079
    6d64:	8020d33a 	srli	r16,r16,12
    6d68:	0083ffc4 	movi	r2,4095
    6d6c:	843fffc4 	addi	r16,r16,-1
    6d70:	8020933a 	slli	r16,r16,12
    6d74:	1400060e 	bge	r2,r16,6d90 <_malloc_trim_r+0x70>
    6d78:	9009883a 	mov	r4,r18
    6d7c:	000b883a 	mov	r5,zero
    6d80:	0009ab40 	call	9ab4 <_sbrk_r>
    6d84:	98c00217 	ldw	r3,8(r19)
    6d88:	1c47883a 	add	r3,r3,r17
    6d8c:	10c00a26 	beq	r2,r3,6db8 <_malloc_trim_r+0x98>
    6d90:	9009883a 	mov	r4,r18
    6d94:	0010a7c0 	call	10a7c <__malloc_unlock>
    6d98:	0005883a 	mov	r2,zero
    6d9c:	dfc00417 	ldw	ra,16(sp)
    6da0:	dcc00317 	ldw	r19,12(sp)
    6da4:	dc800217 	ldw	r18,8(sp)
    6da8:	dc400117 	ldw	r17,4(sp)
    6dac:	dc000017 	ldw	r16,0(sp)
    6db0:	dec00504 	addi	sp,sp,20
    6db4:	f800283a 	ret
    6db8:	9009883a 	mov	r4,r18
    6dbc:	040bc83a 	sub	r5,zero,r16
    6dc0:	0009ab40 	call	9ab4 <_sbrk_r>
    6dc4:	00ffffc4 	movi	r3,-1
    6dc8:	10c00d26 	beq	r2,r3,6e00 <_malloc_trim_r+0xe0>
    6dcc:	00c000b4 	movhi	r3,2
    6dd0:	18c2ce04 	addi	r3,r3,2872
    6dd4:	18800017 	ldw	r2,0(r3)
    6dd8:	99000217 	ldw	r4,8(r19)
    6ddc:	8c23c83a 	sub	r17,r17,r16
    6de0:	8c400054 	ori	r17,r17,1
    6de4:	1421c83a 	sub	r16,r2,r16
    6de8:	24400115 	stw	r17,4(r4)
    6dec:	9009883a 	mov	r4,r18
    6df0:	1c000015 	stw	r16,0(r3)
    6df4:	0010a7c0 	call	10a7c <__malloc_unlock>
    6df8:	00800044 	movi	r2,1
    6dfc:	003fe706 	br	6d9c <__alt_mem_Flash_flash_data+0xf4006d9c>
    6e00:	9009883a 	mov	r4,r18
    6e04:	000b883a 	mov	r5,zero
    6e08:	0009ab40 	call	9ab4 <_sbrk_r>
    6e0c:	99000217 	ldw	r4,8(r19)
    6e10:	014003c4 	movi	r5,15
    6e14:	1107c83a 	sub	r3,r2,r4
    6e18:	28ffdd0e 	bge	r5,r3,6d90 <__alt_mem_Flash_flash_data+0xf4006d90>
    6e1c:	014000b4 	movhi	r5,2
    6e20:	297a9d04 	addi	r5,r5,-5516
    6e24:	29400017 	ldw	r5,0(r5)
    6e28:	18c00054 	ori	r3,r3,1
    6e2c:	20c00115 	stw	r3,4(r4)
    6e30:	00c000b4 	movhi	r3,2
    6e34:	1145c83a 	sub	r2,r2,r5
    6e38:	18c2ce04 	addi	r3,r3,2872
    6e3c:	18800015 	stw	r2,0(r3)
    6e40:	003fd306 	br	6d90 <__alt_mem_Flash_flash_data+0xf4006d90>

00006e44 <_free_r>:
    6e44:	28004c26 	beq	r5,zero,6f78 <_free_r+0x134>
    6e48:	defffd04 	addi	sp,sp,-12
    6e4c:	dc400115 	stw	r17,4(sp)
    6e50:	dc000015 	stw	r16,0(sp)
    6e54:	2023883a 	mov	r17,r4
    6e58:	2821883a 	mov	r16,r5
    6e5c:	dfc00215 	stw	ra,8(sp)
    6e60:	001095c0 	call	1095c <__malloc_lock>
    6e64:	813fff17 	ldw	r4,-4(r16)
    6e68:	00bfff84 	movi	r2,-2
    6e6c:	024000b4 	movhi	r9,2
    6e70:	81bffe04 	addi	r6,r16,-8
    6e74:	2084703a 	and	r2,r4,r2
    6e78:	4a741c04 	addi	r9,r9,-12176
    6e7c:	308b883a 	add	r5,r6,r2
    6e80:	2a000117 	ldw	r8,4(r5)
    6e84:	49c00217 	ldw	r7,8(r9)
    6e88:	00ffff04 	movi	r3,-4
    6e8c:	40c6703a 	and	r3,r8,r3
    6e90:	39405326 	beq	r7,r5,6fe0 <_free_r+0x19c>
    6e94:	28c00115 	stw	r3,4(r5)
    6e98:	2100004c 	andi	r4,r4,1
    6e9c:	2000091e 	bne	r4,zero,6ec4 <_free_r+0x80>
    6ea0:	81fffe17 	ldw	r7,-8(r16)
    6ea4:	4a000204 	addi	r8,r9,8
    6ea8:	31cdc83a 	sub	r6,r6,r7
    6eac:	31000217 	ldw	r4,8(r6)
    6eb0:	11c5883a 	add	r2,r2,r7
    6eb4:	22006126 	beq	r4,r8,703c <_free_r+0x1f8>
    6eb8:	31c00317 	ldw	r7,12(r6)
    6ebc:	21c00315 	stw	r7,12(r4)
    6ec0:	39000215 	stw	r4,8(r7)
    6ec4:	28c9883a 	add	r4,r5,r3
    6ec8:	21c00117 	ldw	r7,4(r4)
    6ecc:	39c0004c 	andi	r7,r7,1
    6ed0:	38000d1e 	bne	r7,zero,6f08 <_free_r+0xc4>
    6ed4:	29000217 	ldw	r4,8(r5)
    6ed8:	10c5883a 	add	r2,r2,r3
    6edc:	00c000b4 	movhi	r3,2
    6ee0:	18f41e04 	addi	r3,r3,-12168
    6ee4:	20c07526 	beq	r4,r3,70bc <_free_r+0x278>
    6ee8:	29c00317 	ldw	r7,12(r5)
    6eec:	11400054 	ori	r5,r2,1
    6ef0:	3087883a 	add	r3,r6,r2
    6ef4:	21c00315 	stw	r7,12(r4)
    6ef8:	39000215 	stw	r4,8(r7)
    6efc:	31400115 	stw	r5,4(r6)
    6f00:	18800015 	stw	r2,0(r3)
    6f04:	00000406 	br	6f18 <_free_r+0xd4>
    6f08:	10c00054 	ori	r3,r2,1
    6f0c:	30c00115 	stw	r3,4(r6)
    6f10:	3087883a 	add	r3,r6,r2
    6f14:	18800015 	stw	r2,0(r3)
    6f18:	00c07fc4 	movi	r3,511
    6f1c:	18801736 	bltu	r3,r2,6f7c <_free_r+0x138>
    6f20:	1004d0fa 	srli	r2,r2,3
    6f24:	01400044 	movi	r5,1
    6f28:	49000117 	ldw	r4,4(r9)
    6f2c:	1087883a 	add	r3,r2,r2
    6f30:	18c7883a 	add	r3,r3,r3
    6f34:	1005d0ba 	srai	r2,r2,2
    6f38:	18c7883a 	add	r3,r3,r3
    6f3c:	1a47883a 	add	r3,r3,r9
    6f40:	19c00217 	ldw	r7,8(r3)
    6f44:	2884983a 	sll	r2,r5,r2
    6f48:	30c00315 	stw	r3,12(r6)
    6f4c:	31c00215 	stw	r7,8(r6)
    6f50:	1104b03a 	or	r2,r2,r4
    6f54:	19800215 	stw	r6,8(r3)
    6f58:	48800115 	stw	r2,4(r9)
    6f5c:	39800315 	stw	r6,12(r7)
    6f60:	8809883a 	mov	r4,r17
    6f64:	dfc00217 	ldw	ra,8(sp)
    6f68:	dc400117 	ldw	r17,4(sp)
    6f6c:	dc000017 	ldw	r16,0(sp)
    6f70:	dec00304 	addi	sp,sp,12
    6f74:	0010a7c1 	jmpi	10a7c <__malloc_unlock>
    6f78:	f800283a 	ret
    6f7c:	1006d27a 	srli	r3,r2,9
    6f80:	01000104 	movi	r4,4
    6f84:	20c04036 	bltu	r4,r3,7088 <_free_r+0x244>
    6f88:	1006d1ba 	srli	r3,r2,6
    6f8c:	19400e04 	addi	r5,r3,56
    6f90:	2947883a 	add	r3,r5,r5
    6f94:	18c7883a 	add	r3,r3,r3
    6f98:	18c7883a 	add	r3,r3,r3
    6f9c:	1a49883a 	add	r4,r3,r9
    6fa0:	20c00217 	ldw	r3,8(r4)
    6fa4:	01c000b4 	movhi	r7,2
    6fa8:	39f41c04 	addi	r7,r7,-12176
    6fac:	19003b26 	beq	r3,r4,709c <_free_r+0x258>
    6fb0:	01ffff04 	movi	r7,-4
    6fb4:	19400117 	ldw	r5,4(r3)
    6fb8:	29ca703a 	and	r5,r5,r7
    6fbc:	1140022e 	bgeu	r2,r5,6fc8 <_free_r+0x184>
    6fc0:	18c00217 	ldw	r3,8(r3)
    6fc4:	20fffb1e 	bne	r4,r3,6fb4 <__alt_mem_Flash_flash_data+0xf4006fb4>
    6fc8:	18800317 	ldw	r2,12(r3)
    6fcc:	30800315 	stw	r2,12(r6)
    6fd0:	30c00215 	stw	r3,8(r6)
    6fd4:	11800215 	stw	r6,8(r2)
    6fd8:	19800315 	stw	r6,12(r3)
    6fdc:	003fe006 	br	6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    6fe0:	2100004c 	andi	r4,r4,1
    6fe4:	1885883a 	add	r2,r3,r2
    6fe8:	2000071e 	bne	r4,zero,7008 <_free_r+0x1c4>
    6fec:	817ffe17 	ldw	r5,-8(r16)
    6ff0:	314dc83a 	sub	r6,r6,r5
    6ff4:	30c00317 	ldw	r3,12(r6)
    6ff8:	31000217 	ldw	r4,8(r6)
    6ffc:	1145883a 	add	r2,r2,r5
    7000:	20c00315 	stw	r3,12(r4)
    7004:	19000215 	stw	r4,8(r3)
    7008:	10c00054 	ori	r3,r2,1
    700c:	30c00115 	stw	r3,4(r6)
    7010:	00c000b4 	movhi	r3,2
    7014:	18fa9e04 	addi	r3,r3,-5512
    7018:	18c00017 	ldw	r3,0(r3)
    701c:	49800215 	stw	r6,8(r9)
    7020:	10ffcf36 	bltu	r2,r3,6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    7024:	008000b4 	movhi	r2,2
    7028:	1082a204 	addi	r2,r2,2696
    702c:	11400017 	ldw	r5,0(r2)
    7030:	8809883a 	mov	r4,r17
    7034:	0006d200 	call	6d20 <_malloc_trim_r>
    7038:	003fc906 	br	6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    703c:	28c9883a 	add	r4,r5,r3
    7040:	21000117 	ldw	r4,4(r4)
    7044:	2100004c 	andi	r4,r4,1
    7048:	20000a1e 	bne	r4,zero,7074 <_free_r+0x230>
    704c:	29000317 	ldw	r4,12(r5)
    7050:	29400217 	ldw	r5,8(r5)
    7054:	10c5883a 	add	r2,r2,r3
    7058:	10c00054 	ori	r3,r2,1
    705c:	29000315 	stw	r4,12(r5)
    7060:	21400215 	stw	r5,8(r4)
    7064:	30c00115 	stw	r3,4(r6)
    7068:	308d883a 	add	r6,r6,r2
    706c:	30800015 	stw	r2,0(r6)
    7070:	003fbb06 	br	6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    7074:	10c00054 	ori	r3,r2,1
    7078:	30c00115 	stw	r3,4(r6)
    707c:	308d883a 	add	r6,r6,r2
    7080:	30800015 	stw	r2,0(r6)
    7084:	003fb606 	br	6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    7088:	01000504 	movi	r4,20
    708c:	20c01436 	bltu	r4,r3,70e0 <_free_r+0x29c>
    7090:	194016c4 	addi	r5,r3,91
    7094:	2947883a 	add	r3,r5,r5
    7098:	003fbe06 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    709c:	280bd0ba 	srai	r5,r5,2
    70a0:	00800044 	movi	r2,1
    70a4:	39000117 	ldw	r4,4(r7)
    70a8:	114a983a 	sll	r5,r2,r5
    70ac:	1805883a 	mov	r2,r3
    70b0:	2908b03a 	or	r4,r5,r4
    70b4:	39000115 	stw	r4,4(r7)
    70b8:	003fc406 	br	6fcc <__alt_mem_Flash_flash_data+0xf4006fcc>
    70bc:	49800515 	stw	r6,20(r9)
    70c0:	49800415 	stw	r6,16(r9)
    70c4:	10c00054 	ori	r3,r2,1
    70c8:	31000315 	stw	r4,12(r6)
    70cc:	31000215 	stw	r4,8(r6)
    70d0:	30c00115 	stw	r3,4(r6)
    70d4:	308d883a 	add	r6,r6,r2
    70d8:	30800015 	stw	r2,0(r6)
    70dc:	003fa006 	br	6f60 <__alt_mem_Flash_flash_data+0xf4006f60>
    70e0:	01001504 	movi	r4,84
    70e4:	20c00436 	bltu	r4,r3,70f8 <_free_r+0x2b4>
    70e8:	1006d33a 	srli	r3,r2,12
    70ec:	19401b84 	addi	r5,r3,110
    70f0:	2947883a 	add	r3,r5,r5
    70f4:	003fa706 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    70f8:	01005504 	movi	r4,340
    70fc:	20c00436 	bltu	r4,r3,7110 <_free_r+0x2cc>
    7100:	1006d3fa 	srli	r3,r2,15
    7104:	19401dc4 	addi	r5,r3,119
    7108:	2947883a 	add	r3,r5,r5
    710c:	003fa106 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    7110:	01015504 	movi	r4,1364
    7114:	20c00436 	bltu	r4,r3,7128 <_free_r+0x2e4>
    7118:	1006d4ba 	srli	r3,r2,18
    711c:	19401f04 	addi	r5,r3,124
    7120:	2947883a 	add	r3,r5,r5
    7124:	003f9b06 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    7128:	00c03f04 	movi	r3,252
    712c:	01401f84 	movi	r5,126
    7130:	003f9806 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>

00007134 <__sfvwrite_r>:
    7134:	30800217 	ldw	r2,8(r6)
    7138:	10006726 	beq	r2,zero,72d8 <__sfvwrite_r+0x1a4>
    713c:	defff404 	addi	sp,sp,-48
    7140:	dd000615 	stw	r20,24(sp)
    7144:	2029883a 	mov	r20,r4
    7148:	2900030b 	ldhu	r4,12(r5)
    714c:	ddc00915 	stw	r23,36(sp)
    7150:	dc000215 	stw	r16,8(sp)
    7154:	dfc00b15 	stw	ra,44(sp)
    7158:	df000a15 	stw	fp,40(sp)
    715c:	dd800815 	stw	r22,32(sp)
    7160:	dd400715 	stw	r21,28(sp)
    7164:	dcc00515 	stw	r19,20(sp)
    7168:	dc800415 	stw	r18,16(sp)
    716c:	dc400315 	stw	r17,12(sp)
    7170:	2080020c 	andi	r2,r4,8
    7174:	2821883a 	mov	r16,r5
    7178:	302f883a 	mov	r23,r6
    717c:	10002726 	beq	r2,zero,721c <__sfvwrite_r+0xe8>
    7180:	28800417 	ldw	r2,16(r5)
    7184:	10002526 	beq	r2,zero,721c <__sfvwrite_r+0xe8>
    7188:	2080008c 	andi	r2,r4,2
    718c:	bc400017 	ldw	r17,0(r23)
    7190:	10002a26 	beq	r2,zero,723c <__sfvwrite_r+0x108>
    7194:	05600034 	movhi	r21,32768
    7198:	0027883a 	mov	r19,zero
    719c:	0025883a 	mov	r18,zero
    71a0:	ad7f0004 	addi	r21,r21,-1024
    71a4:	980d883a 	mov	r6,r19
    71a8:	a009883a 	mov	r4,r20
    71ac:	90004626 	beq	r18,zero,72c8 <__sfvwrite_r+0x194>
    71b0:	900f883a 	mov	r7,r18
    71b4:	81400717 	ldw	r5,28(r16)
    71b8:	ac80022e 	bgeu	r21,r18,71c4 <__sfvwrite_r+0x90>
    71bc:	01e00034 	movhi	r7,32768
    71c0:	39ff0004 	addi	r7,r7,-1024
    71c4:	80800917 	ldw	r2,36(r16)
    71c8:	103ee83a 	callr	r2
    71cc:	0080520e 	bge	zero,r2,7318 <__sfvwrite_r+0x1e4>
    71d0:	b8c00217 	ldw	r3,8(r23)
    71d4:	98a7883a 	add	r19,r19,r2
    71d8:	90a5c83a 	sub	r18,r18,r2
    71dc:	1885c83a 	sub	r2,r3,r2
    71e0:	b8800215 	stw	r2,8(r23)
    71e4:	103fef1e 	bne	r2,zero,71a4 <__alt_mem_Flash_flash_data+0xf40071a4>
    71e8:	0005883a 	mov	r2,zero
    71ec:	dfc00b17 	ldw	ra,44(sp)
    71f0:	df000a17 	ldw	fp,40(sp)
    71f4:	ddc00917 	ldw	r23,36(sp)
    71f8:	dd800817 	ldw	r22,32(sp)
    71fc:	dd400717 	ldw	r21,28(sp)
    7200:	dd000617 	ldw	r20,24(sp)
    7204:	dcc00517 	ldw	r19,20(sp)
    7208:	dc800417 	ldw	r18,16(sp)
    720c:	dc400317 	ldw	r17,12(sp)
    7210:	dc000217 	ldw	r16,8(sp)
    7214:	dec00c04 	addi	sp,sp,48
    7218:	f800283a 	ret
    721c:	a009883a 	mov	r4,r20
    7220:	800b883a 	mov	r5,r16
    7224:	0004c700 	call	4c70 <__swsetup_r>
    7228:	1000ec1e 	bne	r2,zero,75dc <__sfvwrite_r+0x4a8>
    722c:	8100030b 	ldhu	r4,12(r16)
    7230:	bc400017 	ldw	r17,0(r23)
    7234:	2080008c 	andi	r2,r4,2
    7238:	103fd61e 	bne	r2,zero,7194 <__alt_mem_Flash_flash_data+0xf4007194>
    723c:	2080004c 	andi	r2,r4,1
    7240:	10003a1e 	bne	r2,zero,732c <__sfvwrite_r+0x1f8>
    7244:	0039883a 	mov	fp,zero
    7248:	0025883a 	mov	r18,zero
    724c:	90001a26 	beq	r18,zero,72b8 <__sfvwrite_r+0x184>
    7250:	2080800c 	andi	r2,r4,512
    7254:	85800217 	ldw	r22,8(r16)
    7258:	10007626 	beq	r2,zero,7434 <__sfvwrite_r+0x300>
    725c:	b027883a 	mov	r19,r22
    7260:	95809436 	bltu	r18,r22,74b4 <__sfvwrite_r+0x380>
    7264:	2081200c 	andi	r2,r4,1152
    7268:	10009f1e 	bne	r2,zero,74e8 <__sfvwrite_r+0x3b4>
    726c:	81000017 	ldw	r4,0(r16)
    7270:	e00b883a 	mov	r5,fp
    7274:	980d883a 	mov	r6,r19
    7278:	00083dc0 	call	83dc <memmove>
    727c:	81000217 	ldw	r4,8(r16)
    7280:	81400017 	ldw	r5,0(r16)
    7284:	9005883a 	mov	r2,r18
    7288:	2587c83a 	sub	r3,r4,r22
    728c:	2ce7883a 	add	r19,r5,r19
    7290:	80c00215 	stw	r3,8(r16)
    7294:	84c00015 	stw	r19,0(r16)
    7298:	b8c00217 	ldw	r3,8(r23)
    729c:	e0b9883a 	add	fp,fp,r2
    72a0:	90a5c83a 	sub	r18,r18,r2
    72a4:	1885c83a 	sub	r2,r3,r2
    72a8:	b8800215 	stw	r2,8(r23)
    72ac:	103fce26 	beq	r2,zero,71e8 <__alt_mem_Flash_flash_data+0xf40071e8>
    72b0:	8100030b 	ldhu	r4,12(r16)
    72b4:	903fe61e 	bne	r18,zero,7250 <__alt_mem_Flash_flash_data+0xf4007250>
    72b8:	8f000017 	ldw	fp,0(r17)
    72bc:	8c800117 	ldw	r18,4(r17)
    72c0:	8c400204 	addi	r17,r17,8
    72c4:	003fe106 	br	724c <__alt_mem_Flash_flash_data+0xf400724c>
    72c8:	8cc00017 	ldw	r19,0(r17)
    72cc:	8c800117 	ldw	r18,4(r17)
    72d0:	8c400204 	addi	r17,r17,8
    72d4:	003fb306 	br	71a4 <__alt_mem_Flash_flash_data+0xf40071a4>
    72d8:	0005883a 	mov	r2,zero
    72dc:	f800283a 	ret
    72e0:	00a00034 	movhi	r2,32768
    72e4:	10bfffc4 	addi	r2,r2,-1
    72e8:	9009883a 	mov	r4,r18
    72ec:	1480012e 	bgeu	r2,r18,72f4 <__sfvwrite_r+0x1c0>
    72f0:	1009883a 	mov	r4,r2
    72f4:	980b883a 	mov	r5,r19
    72f8:	000d7c00 	call	d7c0 <__divsi3>
    72fc:	81400717 	ldw	r5,28(r16)
    7300:	80c00917 	ldw	r3,36(r16)
    7304:	988f383a 	mul	r7,r19,r2
    7308:	a009883a 	mov	r4,r20
    730c:	e00d883a 	mov	r6,fp
    7310:	183ee83a 	callr	r3
    7314:	00bfe016 	blt	zero,r2,7298 <__alt_mem_Flash_flash_data+0xf4007298>
    7318:	8080030b 	ldhu	r2,12(r16)
    731c:	10801014 	ori	r2,r2,64
    7320:	8080030d 	sth	r2,12(r16)
    7324:	00bfffc4 	movi	r2,-1
    7328:	003fb006 	br	71ec <__alt_mem_Flash_flash_data+0xf40071ec>
    732c:	0027883a 	mov	r19,zero
    7330:	0011883a 	mov	r8,zero
    7334:	0039883a 	mov	fp,zero
    7338:	0025883a 	mov	r18,zero
    733c:	90001f26 	beq	r18,zero,73bc <__sfvwrite_r+0x288>
    7340:	40006026 	beq	r8,zero,74c4 <__sfvwrite_r+0x390>
    7344:	982b883a 	mov	r21,r19
    7348:	94c0012e 	bgeu	r18,r19,7350 <__sfvwrite_r+0x21c>
    734c:	902b883a 	mov	r21,r18
    7350:	81000017 	ldw	r4,0(r16)
    7354:	80800417 	ldw	r2,16(r16)
    7358:	a82d883a 	mov	r22,r21
    735c:	81800217 	ldw	r6,8(r16)
    7360:	81c00517 	ldw	r7,20(r16)
    7364:	1100022e 	bgeu	r2,r4,7370 <__sfvwrite_r+0x23c>
    7368:	31c7883a 	add	r3,r6,r7
    736c:	1d401816 	blt	r3,r21,73d0 <__sfvwrite_r+0x29c>
    7370:	a9c04416 	blt	r21,r7,7484 <__sfvwrite_r+0x350>
    7374:	80800917 	ldw	r2,36(r16)
    7378:	81400717 	ldw	r5,28(r16)
    737c:	a009883a 	mov	r4,r20
    7380:	da000115 	stw	r8,4(sp)
    7384:	e00d883a 	mov	r6,fp
    7388:	103ee83a 	callr	r2
    738c:	102d883a 	mov	r22,r2
    7390:	da000117 	ldw	r8,4(sp)
    7394:	00bfe00e 	bge	zero,r2,7318 <__alt_mem_Flash_flash_data+0xf4007318>
    7398:	9da7c83a 	sub	r19,r19,r22
    739c:	98001f26 	beq	r19,zero,741c <__sfvwrite_r+0x2e8>
    73a0:	b8800217 	ldw	r2,8(r23)
    73a4:	e5b9883a 	add	fp,fp,r22
    73a8:	95a5c83a 	sub	r18,r18,r22
    73ac:	15adc83a 	sub	r22,r2,r22
    73b0:	bd800215 	stw	r22,8(r23)
    73b4:	b03f8c26 	beq	r22,zero,71e8 <__alt_mem_Flash_flash_data+0xf40071e8>
    73b8:	903fe11e 	bne	r18,zero,7340 <__alt_mem_Flash_flash_data+0xf4007340>
    73bc:	8f000017 	ldw	fp,0(r17)
    73c0:	8c800117 	ldw	r18,4(r17)
    73c4:	0011883a 	mov	r8,zero
    73c8:	8c400204 	addi	r17,r17,8
    73cc:	003fdb06 	br	733c <__alt_mem_Flash_flash_data+0xf400733c>
    73d0:	180d883a 	mov	r6,r3
    73d4:	e00b883a 	mov	r5,fp
    73d8:	da000115 	stw	r8,4(sp)
    73dc:	d8c00015 	stw	r3,0(sp)
    73e0:	00083dc0 	call	83dc <memmove>
    73e4:	d8c00017 	ldw	r3,0(sp)
    73e8:	80800017 	ldw	r2,0(r16)
    73ec:	a009883a 	mov	r4,r20
    73f0:	800b883a 	mov	r5,r16
    73f4:	10c5883a 	add	r2,r2,r3
    73f8:	80800015 	stw	r2,0(r16)
    73fc:	d8c00015 	stw	r3,0(sp)
    7400:	00068f40 	call	68f4 <_fflush_r>
    7404:	d8c00017 	ldw	r3,0(sp)
    7408:	da000117 	ldw	r8,4(sp)
    740c:	103fc21e 	bne	r2,zero,7318 <__alt_mem_Flash_flash_data+0xf4007318>
    7410:	182d883a 	mov	r22,r3
    7414:	9da7c83a 	sub	r19,r19,r22
    7418:	983fe11e 	bne	r19,zero,73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    741c:	a009883a 	mov	r4,r20
    7420:	800b883a 	mov	r5,r16
    7424:	00068f40 	call	68f4 <_fflush_r>
    7428:	103fbb1e 	bne	r2,zero,7318 <__alt_mem_Flash_flash_data+0xf4007318>
    742c:	0011883a 	mov	r8,zero
    7430:	003fdb06 	br	73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    7434:	81000017 	ldw	r4,0(r16)
    7438:	80800417 	ldw	r2,16(r16)
    743c:	11000236 	bltu	r2,r4,7448 <__sfvwrite_r+0x314>
    7440:	84c00517 	ldw	r19,20(r16)
    7444:	94ffa62e 	bgeu	r18,r19,72e0 <__alt_mem_Flash_flash_data+0xf40072e0>
    7448:	9027883a 	mov	r19,r18
    744c:	b480012e 	bgeu	r22,r18,7454 <__sfvwrite_r+0x320>
    7450:	b027883a 	mov	r19,r22
    7454:	e00b883a 	mov	r5,fp
    7458:	980d883a 	mov	r6,r19
    745c:	00083dc0 	call	83dc <memmove>
    7460:	80800217 	ldw	r2,8(r16)
    7464:	80c00017 	ldw	r3,0(r16)
    7468:	14c5c83a 	sub	r2,r2,r19
    746c:	1cc7883a 	add	r3,r3,r19
    7470:	80800215 	stw	r2,8(r16)
    7474:	80c00015 	stw	r3,0(r16)
    7478:	10004326 	beq	r2,zero,7588 <__sfvwrite_r+0x454>
    747c:	9805883a 	mov	r2,r19
    7480:	003f8506 	br	7298 <__alt_mem_Flash_flash_data+0xf4007298>
    7484:	a80d883a 	mov	r6,r21
    7488:	e00b883a 	mov	r5,fp
    748c:	da000115 	stw	r8,4(sp)
    7490:	00083dc0 	call	83dc <memmove>
    7494:	80800217 	ldw	r2,8(r16)
    7498:	80c00017 	ldw	r3,0(r16)
    749c:	da000117 	ldw	r8,4(sp)
    74a0:	1545c83a 	sub	r2,r2,r21
    74a4:	1d6b883a 	add	r21,r3,r21
    74a8:	80800215 	stw	r2,8(r16)
    74ac:	85400015 	stw	r21,0(r16)
    74b0:	003fb906 	br	7398 <__alt_mem_Flash_flash_data+0xf4007398>
    74b4:	81000017 	ldw	r4,0(r16)
    74b8:	902d883a 	mov	r22,r18
    74bc:	9027883a 	mov	r19,r18
    74c0:	003f6b06 	br	7270 <__alt_mem_Flash_flash_data+0xf4007270>
    74c4:	e009883a 	mov	r4,fp
    74c8:	01400284 	movi	r5,10
    74cc:	900d883a 	mov	r6,r18
    74d0:	00081bc0 	call	81bc <memchr>
    74d4:	10003e26 	beq	r2,zero,75d0 <__sfvwrite_r+0x49c>
    74d8:	10800044 	addi	r2,r2,1
    74dc:	1727c83a 	sub	r19,r2,fp
    74e0:	02000044 	movi	r8,1
    74e4:	003f9706 	br	7344 <__alt_mem_Flash_flash_data+0xf4007344>
    74e8:	80800517 	ldw	r2,20(r16)
    74ec:	81400417 	ldw	r5,16(r16)
    74f0:	80c00017 	ldw	r3,0(r16)
    74f4:	10a7883a 	add	r19,r2,r2
    74f8:	9885883a 	add	r2,r19,r2
    74fc:	1026d7fa 	srli	r19,r2,31
    7500:	196bc83a 	sub	r21,r3,r5
    7504:	a9800044 	addi	r6,r21,1
    7508:	9885883a 	add	r2,r19,r2
    750c:	1027d07a 	srai	r19,r2,1
    7510:	3485883a 	add	r2,r6,r18
    7514:	980d883a 	mov	r6,r19
    7518:	9880022e 	bgeu	r19,r2,7524 <__sfvwrite_r+0x3f0>
    751c:	1027883a 	mov	r19,r2
    7520:	100d883a 	mov	r6,r2
    7524:	2101000c 	andi	r4,r4,1024
    7528:	20001c26 	beq	r4,zero,759c <__sfvwrite_r+0x468>
    752c:	a009883a 	mov	r4,r20
    7530:	300b883a 	mov	r5,r6
    7534:	0007a140 	call	7a14 <_malloc_r>
    7538:	102d883a 	mov	r22,r2
    753c:	10002926 	beq	r2,zero,75e4 <__sfvwrite_r+0x4b0>
    7540:	81400417 	ldw	r5,16(r16)
    7544:	1009883a 	mov	r4,r2
    7548:	a80d883a 	mov	r6,r21
    754c:	00082a40 	call	82a4 <memcpy>
    7550:	8080030b 	ldhu	r2,12(r16)
    7554:	00fedfc4 	movi	r3,-1153
    7558:	10c4703a 	and	r2,r2,r3
    755c:	10802014 	ori	r2,r2,128
    7560:	8080030d 	sth	r2,12(r16)
    7564:	b549883a 	add	r4,r22,r21
    7568:	9d4bc83a 	sub	r5,r19,r21
    756c:	85800415 	stw	r22,16(r16)
    7570:	84c00515 	stw	r19,20(r16)
    7574:	81000015 	stw	r4,0(r16)
    7578:	902d883a 	mov	r22,r18
    757c:	81400215 	stw	r5,8(r16)
    7580:	9027883a 	mov	r19,r18
    7584:	003f3a06 	br	7270 <__alt_mem_Flash_flash_data+0xf4007270>
    7588:	a009883a 	mov	r4,r20
    758c:	800b883a 	mov	r5,r16
    7590:	00068f40 	call	68f4 <_fflush_r>
    7594:	103fb926 	beq	r2,zero,747c <__alt_mem_Flash_flash_data+0xf400747c>
    7598:	003f5f06 	br	7318 <__alt_mem_Flash_flash_data+0xf4007318>
    759c:	a009883a 	mov	r4,r20
    75a0:	00094d80 	call	94d8 <_realloc_r>
    75a4:	102d883a 	mov	r22,r2
    75a8:	103fee1e 	bne	r2,zero,7564 <__alt_mem_Flash_flash_data+0xf4007564>
    75ac:	81400417 	ldw	r5,16(r16)
    75b0:	a009883a 	mov	r4,r20
    75b4:	0006e440 	call	6e44 <_free_r>
    75b8:	8080030b 	ldhu	r2,12(r16)
    75bc:	00ffdfc4 	movi	r3,-129
    75c0:	1884703a 	and	r2,r3,r2
    75c4:	00c00304 	movi	r3,12
    75c8:	a0c00015 	stw	r3,0(r20)
    75cc:	003f5306 	br	731c <__alt_mem_Flash_flash_data+0xf400731c>
    75d0:	94c00044 	addi	r19,r18,1
    75d4:	02000044 	movi	r8,1
    75d8:	003f5a06 	br	7344 <__alt_mem_Flash_flash_data+0xf4007344>
    75dc:	00bfffc4 	movi	r2,-1
    75e0:	003f0206 	br	71ec <__alt_mem_Flash_flash_data+0xf40071ec>
    75e4:	00800304 	movi	r2,12
    75e8:	a0800015 	stw	r2,0(r20)
    75ec:	8080030b 	ldhu	r2,12(r16)
    75f0:	003f4a06 	br	731c <__alt_mem_Flash_flash_data+0xf400731c>

000075f4 <_fwalk>:
    75f4:	defff704 	addi	sp,sp,-36
    75f8:	dd000415 	stw	r20,16(sp)
    75fc:	dfc00815 	stw	ra,32(sp)
    7600:	ddc00715 	stw	r23,28(sp)
    7604:	dd800615 	stw	r22,24(sp)
    7608:	dd400515 	stw	r21,20(sp)
    760c:	dcc00315 	stw	r19,12(sp)
    7610:	dc800215 	stw	r18,8(sp)
    7614:	dc400115 	stw	r17,4(sp)
    7618:	dc000015 	stw	r16,0(sp)
    761c:	2500b804 	addi	r20,r4,736
    7620:	a0002326 	beq	r20,zero,76b0 <_fwalk+0xbc>
    7624:	282b883a 	mov	r21,r5
    7628:	002f883a 	mov	r23,zero
    762c:	05800044 	movi	r22,1
    7630:	04ffffc4 	movi	r19,-1
    7634:	a4400117 	ldw	r17,4(r20)
    7638:	a4800217 	ldw	r18,8(r20)
    763c:	8c7fffc4 	addi	r17,r17,-1
    7640:	88000d16 	blt	r17,zero,7678 <_fwalk+0x84>
    7644:	94000304 	addi	r16,r18,12
    7648:	94800384 	addi	r18,r18,14
    764c:	80c0000b 	ldhu	r3,0(r16)
    7650:	8c7fffc4 	addi	r17,r17,-1
    7654:	813ffd04 	addi	r4,r16,-12
    7658:	b0c0042e 	bgeu	r22,r3,766c <_fwalk+0x78>
    765c:	90c0000f 	ldh	r3,0(r18)
    7660:	1cc00226 	beq	r3,r19,766c <_fwalk+0x78>
    7664:	a83ee83a 	callr	r21
    7668:	b8aeb03a 	or	r23,r23,r2
    766c:	84001a04 	addi	r16,r16,104
    7670:	94801a04 	addi	r18,r18,104
    7674:	8cfff51e 	bne	r17,r19,764c <__alt_mem_Flash_flash_data+0xf400764c>
    7678:	a5000017 	ldw	r20,0(r20)
    767c:	a03fed1e 	bne	r20,zero,7634 <__alt_mem_Flash_flash_data+0xf4007634>
    7680:	b805883a 	mov	r2,r23
    7684:	dfc00817 	ldw	ra,32(sp)
    7688:	ddc00717 	ldw	r23,28(sp)
    768c:	dd800617 	ldw	r22,24(sp)
    7690:	dd400517 	ldw	r21,20(sp)
    7694:	dd000417 	ldw	r20,16(sp)
    7698:	dcc00317 	ldw	r19,12(sp)
    769c:	dc800217 	ldw	r18,8(sp)
    76a0:	dc400117 	ldw	r17,4(sp)
    76a4:	dc000017 	ldw	r16,0(sp)
    76a8:	dec00904 	addi	sp,sp,36
    76ac:	f800283a 	ret
    76b0:	002f883a 	mov	r23,zero
    76b4:	003ff206 	br	7680 <__alt_mem_Flash_flash_data+0xf4007680>

000076b8 <_fwalk_reent>:
    76b8:	defff704 	addi	sp,sp,-36
    76bc:	dd400515 	stw	r21,20(sp)
    76c0:	dfc00815 	stw	ra,32(sp)
    76c4:	ddc00715 	stw	r23,28(sp)
    76c8:	dd800615 	stw	r22,24(sp)
    76cc:	dd000415 	stw	r20,16(sp)
    76d0:	dcc00315 	stw	r19,12(sp)
    76d4:	dc800215 	stw	r18,8(sp)
    76d8:	dc400115 	stw	r17,4(sp)
    76dc:	dc000015 	stw	r16,0(sp)
    76e0:	2540b804 	addi	r21,r4,736
    76e4:	a8002326 	beq	r21,zero,7774 <_fwalk_reent+0xbc>
    76e8:	2829883a 	mov	r20,r5
    76ec:	202d883a 	mov	r22,r4
    76f0:	002f883a 	mov	r23,zero
    76f4:	04c00044 	movi	r19,1
    76f8:	04bfffc4 	movi	r18,-1
    76fc:	ac400117 	ldw	r17,4(r21)
    7700:	ac000217 	ldw	r16,8(r21)
    7704:	8c7fffc4 	addi	r17,r17,-1
    7708:	88000c16 	blt	r17,zero,773c <_fwalk_reent+0x84>
    770c:	84000304 	addi	r16,r16,12
    7710:	80c0000b 	ldhu	r3,0(r16)
    7714:	8c7fffc4 	addi	r17,r17,-1
    7718:	817ffd04 	addi	r5,r16,-12
    771c:	98c0052e 	bgeu	r19,r3,7734 <_fwalk_reent+0x7c>
    7720:	80c0008f 	ldh	r3,2(r16)
    7724:	b009883a 	mov	r4,r22
    7728:	1c800226 	beq	r3,r18,7734 <_fwalk_reent+0x7c>
    772c:	a03ee83a 	callr	r20
    7730:	b8aeb03a 	or	r23,r23,r2
    7734:	84001a04 	addi	r16,r16,104
    7738:	8cbff51e 	bne	r17,r18,7710 <__alt_mem_Flash_flash_data+0xf4007710>
    773c:	ad400017 	ldw	r21,0(r21)
    7740:	a83fee1e 	bne	r21,zero,76fc <__alt_mem_Flash_flash_data+0xf40076fc>
    7744:	b805883a 	mov	r2,r23
    7748:	dfc00817 	ldw	ra,32(sp)
    774c:	ddc00717 	ldw	r23,28(sp)
    7750:	dd800617 	ldw	r22,24(sp)
    7754:	dd400517 	ldw	r21,20(sp)
    7758:	dd000417 	ldw	r20,16(sp)
    775c:	dcc00317 	ldw	r19,12(sp)
    7760:	dc800217 	ldw	r18,8(sp)
    7764:	dc400117 	ldw	r17,4(sp)
    7768:	dc000017 	ldw	r16,0(sp)
    776c:	dec00904 	addi	sp,sp,36
    7770:	f800283a 	ret
    7774:	002f883a 	mov	r23,zero
    7778:	003ff206 	br	7744 <__alt_mem_Flash_flash_data+0xf4007744>

0000777c <_setlocale_r>:
    777c:	30001b26 	beq	r6,zero,77ec <_setlocale_r+0x70>
    7780:	014000b4 	movhi	r5,2
    7784:	defffe04 	addi	sp,sp,-8
    7788:	29719604 	addi	r5,r5,-14760
    778c:	3009883a 	mov	r4,r6
    7790:	dc000015 	stw	r16,0(sp)
    7794:	dfc00115 	stw	ra,4(sp)
    7798:	3021883a 	mov	r16,r6
    779c:	0000b740 	call	b74 <strcmp>
    77a0:	1000061e 	bne	r2,zero,77bc <_setlocale_r+0x40>
    77a4:	008000b4 	movhi	r2,2
    77a8:	10b19504 	addi	r2,r2,-14764
    77ac:	dfc00117 	ldw	ra,4(sp)
    77b0:	dc000017 	ldw	r16,0(sp)
    77b4:	dec00204 	addi	sp,sp,8
    77b8:	f800283a 	ret
    77bc:	014000b4 	movhi	r5,2
    77c0:	29719504 	addi	r5,r5,-14764
    77c4:	8009883a 	mov	r4,r16
    77c8:	0000b740 	call	b74 <strcmp>
    77cc:	103ff526 	beq	r2,zero,77a4 <__alt_mem_Flash_flash_data+0xf40077a4>
    77d0:	014000b4 	movhi	r5,2
    77d4:	29717804 	addi	r5,r5,-14880
    77d8:	8009883a 	mov	r4,r16
    77dc:	0000b740 	call	b74 <strcmp>
    77e0:	103ff026 	beq	r2,zero,77a4 <__alt_mem_Flash_flash_data+0xf40077a4>
    77e4:	0005883a 	mov	r2,zero
    77e8:	003ff006 	br	77ac <__alt_mem_Flash_flash_data+0xf40077ac>
    77ec:	008000b4 	movhi	r2,2
    77f0:	10b19504 	addi	r2,r2,-14764
    77f4:	f800283a 	ret

000077f8 <__locale_charset>:
    77f8:	008000b4 	movhi	r2,2
    77fc:	10b40604 	addi	r2,r2,-12264
    7800:	f800283a 	ret

00007804 <__locale_mb_cur_max>:
    7804:	008000b4 	movhi	r2,2
    7808:	10ba9c04 	addi	r2,r2,-5520
    780c:	10800017 	ldw	r2,0(r2)
    7810:	f800283a 	ret

00007814 <__locale_msgcharset>:
    7814:	008000b4 	movhi	r2,2
    7818:	10b3fe04 	addi	r2,r2,-12296
    781c:	f800283a 	ret

00007820 <__locale_cjk_lang>:
    7820:	0005883a 	mov	r2,zero
    7824:	f800283a 	ret

00007828 <_localeconv_r>:
    7828:	008000b4 	movhi	r2,2
    782c:	10b40e04 	addi	r2,r2,-12232
    7830:	f800283a 	ret

00007834 <setlocale>:
    7834:	00c000b4 	movhi	r3,2
    7838:	18fa9b04 	addi	r3,r3,-5524
    783c:	2005883a 	mov	r2,r4
    7840:	19000017 	ldw	r4,0(r3)
    7844:	280d883a 	mov	r6,r5
    7848:	100b883a 	mov	r5,r2
    784c:	000777c1 	jmpi	777c <_setlocale_r>

00007850 <localeconv>:
    7850:	008000b4 	movhi	r2,2
    7854:	10b40e04 	addi	r2,r2,-12232
    7858:	f800283a 	ret

0000785c <__smakebuf_r>:
    785c:	2880030b 	ldhu	r2,12(r5)
    7860:	10c0008c 	andi	r3,r2,2
    7864:	1800401e 	bne	r3,zero,7968 <__smakebuf_r+0x10c>
    7868:	deffec04 	addi	sp,sp,-80
    786c:	dc000f15 	stw	r16,60(sp)
    7870:	2821883a 	mov	r16,r5
    7874:	2940038f 	ldh	r5,14(r5)
    7878:	dc401015 	stw	r17,64(sp)
    787c:	dfc01315 	stw	ra,76(sp)
    7880:	dcc01215 	stw	r19,72(sp)
    7884:	dc801115 	stw	r18,68(sp)
    7888:	2023883a 	mov	r17,r4
    788c:	28001b16 	blt	r5,zero,78fc <__smakebuf_r+0xa0>
    7890:	d80d883a 	mov	r6,sp
    7894:	000c7640 	call	c764 <_fstat_r>
    7898:	10001716 	blt	r2,zero,78f8 <__smakebuf_r+0x9c>
    789c:	d8800117 	ldw	r2,4(sp)
    78a0:	00e00014 	movui	r3,32768
    78a4:	10bc000c 	andi	r2,r2,61440
    78a8:	10c03726 	beq	r2,r3,7988 <__smakebuf_r+0x12c>
    78ac:	80c0030b 	ldhu	r3,12(r16)
    78b0:	18c20014 	ori	r3,r3,2048
    78b4:	80c0030d 	sth	r3,12(r16)
    78b8:	00c80004 	movi	r3,8192
    78bc:	10c03c1e 	bne	r2,r3,79b0 <__smakebuf_r+0x154>
    78c0:	8140038f 	ldh	r5,14(r16)
    78c4:	8809883a 	mov	r4,r17
    78c8:	000c7bc0 	call	c7bc <_isatty_r>
    78cc:	10004e26 	beq	r2,zero,7a08 <__smakebuf_r+0x1ac>
    78d0:	8080030b 	ldhu	r2,12(r16)
    78d4:	04c00044 	movi	r19,1
    78d8:	80c010c4 	addi	r3,r16,67
    78dc:	14c4b03a 	or	r2,r2,r19
    78e0:	8080030d 	sth	r2,12(r16)
    78e4:	80c00015 	stw	r3,0(r16)
    78e8:	80c00415 	stw	r3,16(r16)
    78ec:	84c00515 	stw	r19,20(r16)
    78f0:	04810004 	movi	r18,1024
    78f4:	00000706 	br	7914 <__smakebuf_r+0xb8>
    78f8:	8080030b 	ldhu	r2,12(r16)
    78fc:	10c0200c 	andi	r3,r2,128
    7900:	18001f1e 	bne	r3,zero,7980 <__smakebuf_r+0x124>
    7904:	04810004 	movi	r18,1024
    7908:	10820014 	ori	r2,r2,2048
    790c:	8080030d 	sth	r2,12(r16)
    7910:	0027883a 	mov	r19,zero
    7914:	8809883a 	mov	r4,r17
    7918:	900b883a 	mov	r5,r18
    791c:	0007a140 	call	7a14 <_malloc_r>
    7920:	10002e26 	beq	r2,zero,79dc <__smakebuf_r+0x180>
    7924:	80c0030b 	ldhu	r3,12(r16)
    7928:	01000034 	movhi	r4,0
    792c:	211a6404 	addi	r4,r4,27024
    7930:	89000f15 	stw	r4,60(r17)
    7934:	18c02014 	ori	r3,r3,128
    7938:	80c0030d 	sth	r3,12(r16)
    793c:	80800015 	stw	r2,0(r16)
    7940:	80800415 	stw	r2,16(r16)
    7944:	84800515 	stw	r18,20(r16)
    7948:	98001c1e 	bne	r19,zero,79bc <__smakebuf_r+0x160>
    794c:	dfc01317 	ldw	ra,76(sp)
    7950:	dcc01217 	ldw	r19,72(sp)
    7954:	dc801117 	ldw	r18,68(sp)
    7958:	dc401017 	ldw	r17,64(sp)
    795c:	dc000f17 	ldw	r16,60(sp)
    7960:	dec01404 	addi	sp,sp,80
    7964:	f800283a 	ret
    7968:	288010c4 	addi	r2,r5,67
    796c:	28800015 	stw	r2,0(r5)
    7970:	28800415 	stw	r2,16(r5)
    7974:	00800044 	movi	r2,1
    7978:	28800515 	stw	r2,20(r5)
    797c:	f800283a 	ret
    7980:	04801004 	movi	r18,64
    7984:	003fe006 	br	7908 <__alt_mem_Flash_flash_data+0xf4007908>
    7988:	81000a17 	ldw	r4,40(r16)
    798c:	00c00074 	movhi	r3,1
    7990:	18e6f804 	addi	r3,r3,-25632
    7994:	20ffc51e 	bne	r4,r3,78ac <__alt_mem_Flash_flash_data+0xf40078ac>
    7998:	80c0030b 	ldhu	r3,12(r16)
    799c:	01010004 	movi	r4,1024
    79a0:	81001315 	stw	r4,76(r16)
    79a4:	1906b03a 	or	r3,r3,r4
    79a8:	80c0030d 	sth	r3,12(r16)
    79ac:	003fc206 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    79b0:	0027883a 	mov	r19,zero
    79b4:	04810004 	movi	r18,1024
    79b8:	003fd606 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    79bc:	8140038f 	ldh	r5,14(r16)
    79c0:	8809883a 	mov	r4,r17
    79c4:	000c7bc0 	call	c7bc <_isatty_r>
    79c8:	103fe026 	beq	r2,zero,794c <__alt_mem_Flash_flash_data+0xf400794c>
    79cc:	8080030b 	ldhu	r2,12(r16)
    79d0:	10800054 	ori	r2,r2,1
    79d4:	8080030d 	sth	r2,12(r16)
    79d8:	003fdc06 	br	794c <__alt_mem_Flash_flash_data+0xf400794c>
    79dc:	8080030b 	ldhu	r2,12(r16)
    79e0:	10c0800c 	andi	r3,r2,512
    79e4:	183fd91e 	bne	r3,zero,794c <__alt_mem_Flash_flash_data+0xf400794c>
    79e8:	10800094 	ori	r2,r2,2
    79ec:	80c010c4 	addi	r3,r16,67
    79f0:	8080030d 	sth	r2,12(r16)
    79f4:	00800044 	movi	r2,1
    79f8:	80c00015 	stw	r3,0(r16)
    79fc:	80c00415 	stw	r3,16(r16)
    7a00:	80800515 	stw	r2,20(r16)
    7a04:	003fd106 	br	794c <__alt_mem_Flash_flash_data+0xf400794c>
    7a08:	04c00044 	movi	r19,1
    7a0c:	04810004 	movi	r18,1024
    7a10:	003fc006 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>

00007a14 <_malloc_r>:
    7a14:	defff504 	addi	sp,sp,-44
    7a18:	dc800315 	stw	r18,12(sp)
    7a1c:	dfc00a15 	stw	ra,40(sp)
    7a20:	df000915 	stw	fp,36(sp)
    7a24:	ddc00815 	stw	r23,32(sp)
    7a28:	dd800715 	stw	r22,28(sp)
    7a2c:	dd400615 	stw	r21,24(sp)
    7a30:	dd000515 	stw	r20,20(sp)
    7a34:	dcc00415 	stw	r19,16(sp)
    7a38:	dc400215 	stw	r17,8(sp)
    7a3c:	dc000115 	stw	r16,4(sp)
    7a40:	288002c4 	addi	r2,r5,11
    7a44:	00c00584 	movi	r3,22
    7a48:	2025883a 	mov	r18,r4
    7a4c:	18802a2e 	bgeu	r3,r2,7af8 <_malloc_r+0xe4>
    7a50:	047ffe04 	movi	r17,-8
    7a54:	1462703a 	and	r17,r2,r17
    7a58:	88009e16 	blt	r17,zero,7cd4 <_malloc_r+0x2c0>
    7a5c:	89409d36 	bltu	r17,r5,7cd4 <_malloc_r+0x2c0>
    7a60:	001095c0 	call	1095c <__malloc_lock>
    7a64:	00807dc4 	movi	r2,503
    7a68:	14402736 	bltu	r2,r17,7b08 <_malloc_r+0xf4>
    7a6c:	8806d0fa 	srli	r3,r17,3
    7a70:	04c000b4 	movhi	r19,2
    7a74:	9cf41c04 	addi	r19,r19,-12176
    7a78:	18c5883a 	add	r2,r3,r3
    7a7c:	1085883a 	add	r2,r2,r2
    7a80:	1085883a 	add	r2,r2,r2
    7a84:	9885883a 	add	r2,r19,r2
    7a88:	14000317 	ldw	r16,12(r2)
    7a8c:	80814a26 	beq	r16,r2,7fb8 <_malloc_r+0x5a4>
    7a90:	80c00117 	ldw	r3,4(r16)
    7a94:	81000317 	ldw	r4,12(r16)
    7a98:	00bfff04 	movi	r2,-4
    7a9c:	1884703a 	and	r2,r3,r2
    7aa0:	81400217 	ldw	r5,8(r16)
    7aa4:	8085883a 	add	r2,r16,r2
    7aa8:	10c00117 	ldw	r3,4(r2)
    7aac:	29000315 	stw	r4,12(r5)
    7ab0:	21400215 	stw	r5,8(r4)
    7ab4:	18c00054 	ori	r3,r3,1
    7ab8:	10c00115 	stw	r3,4(r2)
    7abc:	9009883a 	mov	r4,r18
    7ac0:	0010a7c0 	call	10a7c <__malloc_unlock>
    7ac4:	80800204 	addi	r2,r16,8
    7ac8:	dfc00a17 	ldw	ra,40(sp)
    7acc:	df000917 	ldw	fp,36(sp)
    7ad0:	ddc00817 	ldw	r23,32(sp)
    7ad4:	dd800717 	ldw	r22,28(sp)
    7ad8:	dd400617 	ldw	r21,24(sp)
    7adc:	dd000517 	ldw	r20,20(sp)
    7ae0:	dcc00417 	ldw	r19,16(sp)
    7ae4:	dc800317 	ldw	r18,12(sp)
    7ae8:	dc400217 	ldw	r17,8(sp)
    7aec:	dc000117 	ldw	r16,4(sp)
    7af0:	dec00b04 	addi	sp,sp,44
    7af4:	f800283a 	ret
    7af8:	04400404 	movi	r17,16
    7afc:	89407536 	bltu	r17,r5,7cd4 <_malloc_r+0x2c0>
    7b00:	001095c0 	call	1095c <__malloc_lock>
    7b04:	003fd906 	br	7a6c <__alt_mem_Flash_flash_data+0xf4007a6c>
    7b08:	8806d27a 	srli	r3,r17,9
    7b0c:	18007526 	beq	r3,zero,7ce4 <_malloc_r+0x2d0>
    7b10:	00800104 	movi	r2,4
    7b14:	10c0ef36 	bltu	r2,r3,7ed4 <_malloc_r+0x4c0>
    7b18:	8806d1ba 	srli	r3,r17,6
    7b1c:	19c00e04 	addi	r7,r3,56
    7b20:	39cb883a 	add	r5,r7,r7
    7b24:	04c000b4 	movhi	r19,2
    7b28:	294b883a 	add	r5,r5,r5
    7b2c:	9cf41c04 	addi	r19,r19,-12176
    7b30:	294b883a 	add	r5,r5,r5
    7b34:	994b883a 	add	r5,r19,r5
    7b38:	2c000317 	ldw	r16,12(r5)
    7b3c:	2c000e26 	beq	r5,r16,7b78 <_malloc_r+0x164>
    7b40:	80800117 	ldw	r2,4(r16)
    7b44:	01bfff04 	movi	r6,-4
    7b48:	010003c4 	movi	r4,15
    7b4c:	1184703a 	and	r2,r2,r6
    7b50:	1447c83a 	sub	r3,r2,r17
    7b54:	20c00716 	blt	r4,r3,7b74 <_malloc_r+0x160>
    7b58:	1800650e 	bge	r3,zero,7cf0 <_malloc_r+0x2dc>
    7b5c:	84000317 	ldw	r16,12(r16)
    7b60:	2c000526 	beq	r5,r16,7b78 <_malloc_r+0x164>
    7b64:	80800117 	ldw	r2,4(r16)
    7b68:	1184703a 	and	r2,r2,r6
    7b6c:	1447c83a 	sub	r3,r2,r17
    7b70:	20fff90e 	bge	r4,r3,7b58 <__alt_mem_Flash_flash_data+0xf4007b58>
    7b74:	39ffffc4 	addi	r7,r7,-1
    7b78:	38c00044 	addi	r3,r7,1
    7b7c:	018000b4 	movhi	r6,2
    7b80:	9c000417 	ldw	r16,16(r19)
    7b84:	31b41c04 	addi	r6,r6,-12176
    7b88:	32400204 	addi	r9,r6,8
    7b8c:	82410326 	beq	r16,r9,7f9c <_malloc_r+0x588>
    7b90:	81000117 	ldw	r4,4(r16)
    7b94:	00bfff04 	movi	r2,-4
    7b98:	208e703a 	and	r7,r4,r2
    7b9c:	3c45c83a 	sub	r2,r7,r17
    7ba0:	010003c4 	movi	r4,15
    7ba4:	2080ee16 	blt	r4,r2,7f60 <_malloc_r+0x54c>
    7ba8:	32400515 	stw	r9,20(r6)
    7bac:	32400415 	stw	r9,16(r6)
    7bb0:	1000510e 	bge	r2,zero,7cf8 <_malloc_r+0x2e4>
    7bb4:	00807fc4 	movi	r2,511
    7bb8:	11c0ce36 	bltu	r2,r7,7ef4 <_malloc_r+0x4e0>
    7bbc:	3808d0fa 	srli	r4,r7,3
    7bc0:	01c00044 	movi	r7,1
    7bc4:	30800117 	ldw	r2,4(r6)
    7bc8:	210b883a 	add	r5,r4,r4
    7bcc:	294b883a 	add	r5,r5,r5
    7bd0:	2009d0ba 	srai	r4,r4,2
    7bd4:	294b883a 	add	r5,r5,r5
    7bd8:	298b883a 	add	r5,r5,r6
    7bdc:	2a000217 	ldw	r8,8(r5)
    7be0:	3908983a 	sll	r4,r7,r4
    7be4:	81400315 	stw	r5,12(r16)
    7be8:	82000215 	stw	r8,8(r16)
    7bec:	2088b03a 	or	r4,r4,r2
    7bf0:	2c000215 	stw	r16,8(r5)
    7bf4:	31000115 	stw	r4,4(r6)
    7bf8:	44000315 	stw	r16,12(r8)
    7bfc:	1805d0ba 	srai	r2,r3,2
    7c00:	01400044 	movi	r5,1
    7c04:	288a983a 	sll	r5,r5,r2
    7c08:	21404336 	bltu	r4,r5,7d18 <_malloc_r+0x304>
    7c0c:	2144703a 	and	r2,r4,r5
    7c10:	10000a1e 	bne	r2,zero,7c3c <_malloc_r+0x228>
    7c14:	00bfff04 	movi	r2,-4
    7c18:	294b883a 	add	r5,r5,r5
    7c1c:	1886703a 	and	r3,r3,r2
    7c20:	2144703a 	and	r2,r4,r5
    7c24:	18c00104 	addi	r3,r3,4
    7c28:	1000041e 	bne	r2,zero,7c3c <_malloc_r+0x228>
    7c2c:	294b883a 	add	r5,r5,r5
    7c30:	2144703a 	and	r2,r4,r5
    7c34:	18c00104 	addi	r3,r3,4
    7c38:	103ffc26 	beq	r2,zero,7c2c <__alt_mem_Flash_flash_data+0xf4007c2c>
    7c3c:	023fff04 	movi	r8,-4
    7c40:	01c003c4 	movi	r7,15
    7c44:	18c5883a 	add	r2,r3,r3
    7c48:	1085883a 	add	r2,r2,r2
    7c4c:	1085883a 	add	r2,r2,r2
    7c50:	9895883a 	add	r10,r19,r2
    7c54:	52c00304 	addi	r11,r10,12
    7c58:	1819883a 	mov	r12,r3
    7c5c:	5c000017 	ldw	r16,0(r11)
    7c60:	59bffd04 	addi	r6,r11,-12
    7c64:	8180041e 	bne	r16,r6,7c78 <_malloc_r+0x264>
    7c68:	0000ce06 	br	7fa4 <_malloc_r+0x590>
    7c6c:	2000d70e 	bge	r4,zero,7fcc <_malloc_r+0x5b8>
    7c70:	84000317 	ldw	r16,12(r16)
    7c74:	8180cb26 	beq	r16,r6,7fa4 <_malloc_r+0x590>
    7c78:	80800117 	ldw	r2,4(r16)
    7c7c:	1204703a 	and	r2,r2,r8
    7c80:	1449c83a 	sub	r4,r2,r17
    7c84:	393ff90e 	bge	r7,r4,7c6c <__alt_mem_Flash_flash_data+0xf4007c6c>
    7c88:	80800317 	ldw	r2,12(r16)
    7c8c:	80c00217 	ldw	r3,8(r16)
    7c90:	89400054 	ori	r5,r17,1
    7c94:	81400115 	stw	r5,4(r16)
    7c98:	18800315 	stw	r2,12(r3)
    7c9c:	10c00215 	stw	r3,8(r2)
    7ca0:	8463883a 	add	r17,r16,r17
    7ca4:	9c400515 	stw	r17,20(r19)
    7ca8:	9c400415 	stw	r17,16(r19)
    7cac:	20800054 	ori	r2,r4,1
    7cb0:	88800115 	stw	r2,4(r17)
    7cb4:	8a400315 	stw	r9,12(r17)
    7cb8:	8a400215 	stw	r9,8(r17)
    7cbc:	8923883a 	add	r17,r17,r4
    7cc0:	89000015 	stw	r4,0(r17)
    7cc4:	9009883a 	mov	r4,r18
    7cc8:	0010a7c0 	call	10a7c <__malloc_unlock>
    7ccc:	80800204 	addi	r2,r16,8
    7cd0:	003f7d06 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7cd4:	00800304 	movi	r2,12
    7cd8:	90800015 	stw	r2,0(r18)
    7cdc:	0005883a 	mov	r2,zero
    7ce0:	003f7906 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7ce4:	01401f84 	movi	r5,126
    7ce8:	01c00fc4 	movi	r7,63
    7cec:	003f8d06 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    7cf0:	81000317 	ldw	r4,12(r16)
    7cf4:	003f6a06 	br	7aa0 <__alt_mem_Flash_flash_data+0xf4007aa0>
    7cf8:	81c5883a 	add	r2,r16,r7
    7cfc:	10c00117 	ldw	r3,4(r2)
    7d00:	9009883a 	mov	r4,r18
    7d04:	18c00054 	ori	r3,r3,1
    7d08:	10c00115 	stw	r3,4(r2)
    7d0c:	0010a7c0 	call	10a7c <__malloc_unlock>
    7d10:	80800204 	addi	r2,r16,8
    7d14:	003f6c06 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7d18:	9c000217 	ldw	r16,8(r19)
    7d1c:	00bfff04 	movi	r2,-4
    7d20:	85800117 	ldw	r22,4(r16)
    7d24:	b0ac703a 	and	r22,r22,r2
    7d28:	b4400336 	bltu	r22,r17,7d38 <_malloc_r+0x324>
    7d2c:	b445c83a 	sub	r2,r22,r17
    7d30:	00c003c4 	movi	r3,15
    7d34:	18805d16 	blt	r3,r2,7eac <_malloc_r+0x498>
    7d38:	05c000b4 	movhi	r23,2
    7d3c:	008000b4 	movhi	r2,2
    7d40:	bdfa9d04 	addi	r23,r23,-5516
    7d44:	1082a204 	addi	r2,r2,2696
    7d48:	15400017 	ldw	r21,0(r2)
    7d4c:	b9000017 	ldw	r4,0(r23)
    7d50:	00ffffc4 	movi	r3,-1
    7d54:	858d883a 	add	r6,r16,r22
    7d58:	8d6b883a 	add	r21,r17,r21
    7d5c:	20c0e426 	beq	r4,r3,80f0 <_malloc_r+0x6dc>
    7d60:	ad4403c4 	addi	r21,r21,4111
    7d64:	00fc0004 	movi	r3,-4096
    7d68:	a8ea703a 	and	r21,r21,r3
    7d6c:	9009883a 	mov	r4,r18
    7d70:	a80b883a 	mov	r5,r21
    7d74:	d9800015 	stw	r6,0(sp)
    7d78:	0009ab40 	call	9ab4 <_sbrk_r>
    7d7c:	00ffffc4 	movi	r3,-1
    7d80:	1029883a 	mov	r20,r2
    7d84:	d9800017 	ldw	r6,0(sp)
    7d88:	10c0a426 	beq	r2,r3,801c <_malloc_r+0x608>
    7d8c:	1180a236 	bltu	r2,r6,8018 <_malloc_r+0x604>
    7d90:	070000b4 	movhi	fp,2
    7d94:	e702ce04 	addi	fp,fp,2872
    7d98:	e0c00017 	ldw	r3,0(fp)
    7d9c:	a8c7883a 	add	r3,r21,r3
    7da0:	e0c00015 	stw	r3,0(fp)
    7da4:	3500da26 	beq	r6,r20,8110 <_malloc_r+0x6fc>
    7da8:	b9000017 	ldw	r4,0(r23)
    7dac:	00bfffc4 	movi	r2,-1
    7db0:	2080e426 	beq	r4,r2,8144 <_malloc_r+0x730>
    7db4:	a185c83a 	sub	r2,r20,r6
    7db8:	1885883a 	add	r2,r3,r2
    7dbc:	e0800015 	stw	r2,0(fp)
    7dc0:	a0c001cc 	andi	r3,r20,7
    7dc4:	1800b526 	beq	r3,zero,809c <_malloc_r+0x688>
    7dc8:	a0e9c83a 	sub	r20,r20,r3
    7dcc:	00840204 	movi	r2,4104
    7dd0:	a5000204 	addi	r20,r20,8
    7dd4:	10c7c83a 	sub	r3,r2,r3
    7dd8:	a545883a 	add	r2,r20,r21
    7ddc:	1083ffcc 	andi	r2,r2,4095
    7de0:	18abc83a 	sub	r21,r3,r2
    7de4:	9009883a 	mov	r4,r18
    7de8:	a80b883a 	mov	r5,r21
    7dec:	0009ab40 	call	9ab4 <_sbrk_r>
    7df0:	00ffffc4 	movi	r3,-1
    7df4:	10c0d026 	beq	r2,r3,8138 <_malloc_r+0x724>
    7df8:	1507c83a 	sub	r3,r2,r20
    7dfc:	a8c7883a 	add	r3,r21,r3
    7e00:	18c00054 	ori	r3,r3,1
    7e04:	e0800017 	ldw	r2,0(fp)
    7e08:	9d000215 	stw	r20,8(r19)
    7e0c:	a0c00115 	stw	r3,4(r20)
    7e10:	a887883a 	add	r3,r21,r2
    7e14:	e0c00015 	stw	r3,0(fp)
    7e18:	84c00e26 	beq	r16,r19,7e54 <_malloc_r+0x440>
    7e1c:	018003c4 	movi	r6,15
    7e20:	3580a02e 	bgeu	r6,r22,80a4 <_malloc_r+0x690>
    7e24:	81400117 	ldw	r5,4(r16)
    7e28:	013ffe04 	movi	r4,-8
    7e2c:	b0bffd04 	addi	r2,r22,-12
    7e30:	1104703a 	and	r2,r2,r4
    7e34:	2900004c 	andi	r4,r5,1
    7e38:	1108b03a 	or	r4,r2,r4
    7e3c:	81000115 	stw	r4,4(r16)
    7e40:	01400144 	movi	r5,5
    7e44:	8089883a 	add	r4,r16,r2
    7e48:	21400115 	stw	r5,4(r4)
    7e4c:	21400215 	stw	r5,8(r4)
    7e50:	3080c036 	bltu	r6,r2,8154 <_malloc_r+0x740>
    7e54:	008000b4 	movhi	r2,2
    7e58:	1082a104 	addi	r2,r2,2692
    7e5c:	11000017 	ldw	r4,0(r2)
    7e60:	20c0012e 	bgeu	r4,r3,7e68 <_malloc_r+0x454>
    7e64:	10c00015 	stw	r3,0(r2)
    7e68:	008000b4 	movhi	r2,2
    7e6c:	1082a004 	addi	r2,r2,2688
    7e70:	11000017 	ldw	r4,0(r2)
    7e74:	9c000217 	ldw	r16,8(r19)
    7e78:	20c0012e 	bgeu	r4,r3,7e80 <_malloc_r+0x46c>
    7e7c:	10c00015 	stw	r3,0(r2)
    7e80:	80c00117 	ldw	r3,4(r16)
    7e84:	00bfff04 	movi	r2,-4
    7e88:	1886703a 	and	r3,r3,r2
    7e8c:	1c45c83a 	sub	r2,r3,r17
    7e90:	1c400236 	bltu	r3,r17,7e9c <_malloc_r+0x488>
    7e94:	00c003c4 	movi	r3,15
    7e98:	18800416 	blt	r3,r2,7eac <_malloc_r+0x498>
    7e9c:	9009883a 	mov	r4,r18
    7ea0:	0010a7c0 	call	10a7c <__malloc_unlock>
    7ea4:	0005883a 	mov	r2,zero
    7ea8:	003f0706 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7eac:	88c00054 	ori	r3,r17,1
    7eb0:	80c00115 	stw	r3,4(r16)
    7eb4:	8463883a 	add	r17,r16,r17
    7eb8:	10800054 	ori	r2,r2,1
    7ebc:	9c400215 	stw	r17,8(r19)
    7ec0:	88800115 	stw	r2,4(r17)
    7ec4:	9009883a 	mov	r4,r18
    7ec8:	0010a7c0 	call	10a7c <__malloc_unlock>
    7ecc:	80800204 	addi	r2,r16,8
    7ed0:	003efd06 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7ed4:	00800504 	movi	r2,20
    7ed8:	10c0482e 	bgeu	r2,r3,7ffc <_malloc_r+0x5e8>
    7edc:	00801504 	movi	r2,84
    7ee0:	10c06836 	bltu	r2,r3,8084 <_malloc_r+0x670>
    7ee4:	8806d33a 	srli	r3,r17,12
    7ee8:	19c01b84 	addi	r7,r3,110
    7eec:	39cb883a 	add	r5,r7,r7
    7ef0:	003f0c06 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    7ef4:	3804d27a 	srli	r2,r7,9
    7ef8:	01000104 	movi	r4,4
    7efc:	2080422e 	bgeu	r4,r2,8008 <_malloc_r+0x5f4>
    7f00:	01000504 	movi	r4,20
    7f04:	20807c36 	bltu	r4,r2,80f8 <_malloc_r+0x6e4>
    7f08:	110016c4 	addi	r4,r2,91
    7f0c:	210b883a 	add	r5,r4,r4
    7f10:	294b883a 	add	r5,r5,r5
    7f14:	294b883a 	add	r5,r5,r5
    7f18:	994b883a 	add	r5,r19,r5
    7f1c:	28800217 	ldw	r2,8(r5)
    7f20:	020000b4 	movhi	r8,2
    7f24:	42341c04 	addi	r8,r8,-12176
    7f28:	11406326 	beq	r2,r5,80b8 <_malloc_r+0x6a4>
    7f2c:	01bfff04 	movi	r6,-4
    7f30:	11000117 	ldw	r4,4(r2)
    7f34:	2188703a 	and	r4,r4,r6
    7f38:	3900022e 	bgeu	r7,r4,7f44 <_malloc_r+0x530>
    7f3c:	10800217 	ldw	r2,8(r2)
    7f40:	28bffb1e 	bne	r5,r2,7f30 <__alt_mem_Flash_flash_data+0xf4007f30>
    7f44:	11800317 	ldw	r6,12(r2)
    7f48:	99000117 	ldw	r4,4(r19)
    7f4c:	81800315 	stw	r6,12(r16)
    7f50:	80800215 	stw	r2,8(r16)
    7f54:	34000215 	stw	r16,8(r6)
    7f58:	14000315 	stw	r16,12(r2)
    7f5c:	003f2706 	br	7bfc <__alt_mem_Flash_flash_data+0xf4007bfc>
    7f60:	88c00054 	ori	r3,r17,1
    7f64:	80c00115 	stw	r3,4(r16)
    7f68:	8463883a 	add	r17,r16,r17
    7f6c:	34400515 	stw	r17,20(r6)
    7f70:	34400415 	stw	r17,16(r6)
    7f74:	10c00054 	ori	r3,r2,1
    7f78:	8a400315 	stw	r9,12(r17)
    7f7c:	8a400215 	stw	r9,8(r17)
    7f80:	88c00115 	stw	r3,4(r17)
    7f84:	88a3883a 	add	r17,r17,r2
    7f88:	88800015 	stw	r2,0(r17)
    7f8c:	9009883a 	mov	r4,r18
    7f90:	0010a7c0 	call	10a7c <__malloc_unlock>
    7f94:	80800204 	addi	r2,r16,8
    7f98:	003ecb06 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7f9c:	31000117 	ldw	r4,4(r6)
    7fa0:	003f1606 	br	7bfc <__alt_mem_Flash_flash_data+0xf4007bfc>
    7fa4:	63000044 	addi	r12,r12,1
    7fa8:	608000cc 	andi	r2,r12,3
    7fac:	5ac00204 	addi	r11,r11,8
    7fb0:	103f2a1e 	bne	r2,zero,7c5c <__alt_mem_Flash_flash_data+0xf4007c5c>
    7fb4:	00002106 	br	803c <_malloc_r+0x628>
    7fb8:	80800204 	addi	r2,r16,8
    7fbc:	84000517 	ldw	r16,20(r16)
    7fc0:	143eb31e 	bne	r2,r16,7a90 <__alt_mem_Flash_flash_data+0xf4007a90>
    7fc4:	18c00084 	addi	r3,r3,2
    7fc8:	003eec06 	br	7b7c <__alt_mem_Flash_flash_data+0xf4007b7c>
    7fcc:	8085883a 	add	r2,r16,r2
    7fd0:	10c00117 	ldw	r3,4(r2)
    7fd4:	81000317 	ldw	r4,12(r16)
    7fd8:	81400217 	ldw	r5,8(r16)
    7fdc:	18c00054 	ori	r3,r3,1
    7fe0:	10c00115 	stw	r3,4(r2)
    7fe4:	29000315 	stw	r4,12(r5)
    7fe8:	21400215 	stw	r5,8(r4)
    7fec:	9009883a 	mov	r4,r18
    7ff0:	0010a7c0 	call	10a7c <__malloc_unlock>
    7ff4:	80800204 	addi	r2,r16,8
    7ff8:	003eb306 	br	7ac8 <__alt_mem_Flash_flash_data+0xf4007ac8>
    7ffc:	19c016c4 	addi	r7,r3,91
    8000:	39cb883a 	add	r5,r7,r7
    8004:	003ec706 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    8008:	3804d1ba 	srli	r2,r7,6
    800c:	11000e04 	addi	r4,r2,56
    8010:	210b883a 	add	r5,r4,r4
    8014:	003fbe06 	br	7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    8018:	84ff5d26 	beq	r16,r19,7d90 <__alt_mem_Flash_flash_data+0xf4007d90>
    801c:	9c000217 	ldw	r16,8(r19)
    8020:	00bfff04 	movi	r2,-4
    8024:	80c00117 	ldw	r3,4(r16)
    8028:	1886703a 	and	r3,r3,r2
    802c:	003f9706 	br	7e8c <__alt_mem_Flash_flash_data+0xf4007e8c>
    8030:	52800017 	ldw	r10,0(r10)
    8034:	18ffffc4 	addi	r3,r3,-1
    8038:	50805c1e 	bne	r10,r2,81ac <_malloc_r+0x798>
    803c:	190000cc 	andi	r4,r3,3
    8040:	50bffe04 	addi	r2,r10,-8
    8044:	203ffa1e 	bne	r4,zero,8030 <__alt_mem_Flash_flash_data+0xf4008030>
    8048:	98800117 	ldw	r2,4(r19)
    804c:	0146303a 	nor	r3,zero,r5
    8050:	1884703a 	and	r2,r3,r2
    8054:	98800115 	stw	r2,4(r19)
    8058:	294b883a 	add	r5,r5,r5
    805c:	117f2e36 	bltu	r2,r5,7d18 <__alt_mem_Flash_flash_data+0xf4007d18>
    8060:	283f2d26 	beq	r5,zero,7d18 <__alt_mem_Flash_flash_data+0xf4007d18>
    8064:	1146703a 	and	r3,r2,r5
    8068:	1800521e 	bne	r3,zero,81b4 <_malloc_r+0x7a0>
    806c:	6007883a 	mov	r3,r12
    8070:	294b883a 	add	r5,r5,r5
    8074:	1148703a 	and	r4,r2,r5
    8078:	18c00104 	addi	r3,r3,4
    807c:	203ffc26 	beq	r4,zero,8070 <__alt_mem_Flash_flash_data+0xf4008070>
    8080:	003ef006 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>
    8084:	00805504 	movi	r2,340
    8088:	10c01336 	bltu	r2,r3,80d8 <_malloc_r+0x6c4>
    808c:	8806d3fa 	srli	r3,r17,15
    8090:	19c01dc4 	addi	r7,r3,119
    8094:	39cb883a 	add	r5,r7,r7
    8098:	003ea206 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    809c:	00c40004 	movi	r3,4096
    80a0:	003f4d06 	br	7dd8 <__alt_mem_Flash_flash_data+0xf4007dd8>
    80a4:	00800044 	movi	r2,1
    80a8:	a0800115 	stw	r2,4(r20)
    80ac:	a021883a 	mov	r16,r20
    80b0:	0007883a 	mov	r3,zero
    80b4:	003f7506 	br	7e8c <__alt_mem_Flash_flash_data+0xf4007e8c>
    80b8:	200bd0ba 	srai	r5,r4,2
    80bc:	01800044 	movi	r6,1
    80c0:	41000117 	ldw	r4,4(r8)
    80c4:	314a983a 	sll	r5,r6,r5
    80c8:	100d883a 	mov	r6,r2
    80cc:	2908b03a 	or	r4,r5,r4
    80d0:	41000115 	stw	r4,4(r8)
    80d4:	003f9d06 	br	7f4c <__alt_mem_Flash_flash_data+0xf4007f4c>
    80d8:	00815504 	movi	r2,1364
    80dc:	10c01336 	bltu	r2,r3,812c <_malloc_r+0x718>
    80e0:	8806d4ba 	srli	r3,r17,18
    80e4:	19c01f04 	addi	r7,r3,124
    80e8:	39cb883a 	add	r5,r7,r7
    80ec:	003e8d06 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    80f0:	ad400404 	addi	r21,r21,16
    80f4:	003f1d06 	br	7d6c <__alt_mem_Flash_flash_data+0xf4007d6c>
    80f8:	01001504 	movi	r4,84
    80fc:	20801c36 	bltu	r4,r2,8170 <_malloc_r+0x75c>
    8100:	3804d33a 	srli	r2,r7,12
    8104:	11001b84 	addi	r4,r2,110
    8108:	210b883a 	add	r5,r4,r4
    810c:	003f8006 	br	7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    8110:	3083ffcc 	andi	r2,r6,4095
    8114:	103f241e 	bne	r2,zero,7da8 <__alt_mem_Flash_flash_data+0xf4007da8>
    8118:	99000217 	ldw	r4,8(r19)
    811c:	ad85883a 	add	r2,r21,r22
    8120:	10800054 	ori	r2,r2,1
    8124:	20800115 	stw	r2,4(r4)
    8128:	003f4a06 	br	7e54 <__alt_mem_Flash_flash_data+0xf4007e54>
    812c:	01403f04 	movi	r5,252
    8130:	01c01f84 	movi	r7,126
    8134:	003e7b06 	br	7b24 <__alt_mem_Flash_flash_data+0xf4007b24>
    8138:	00c00044 	movi	r3,1
    813c:	002b883a 	mov	r21,zero
    8140:	003f3006 	br	7e04 <__alt_mem_Flash_flash_data+0xf4007e04>
    8144:	008000b4 	movhi	r2,2
    8148:	10ba9d04 	addi	r2,r2,-5516
    814c:	15000015 	stw	r20,0(r2)
    8150:	003f1b06 	br	7dc0 <__alt_mem_Flash_flash_data+0xf4007dc0>
    8154:	9009883a 	mov	r4,r18
    8158:	81400204 	addi	r5,r16,8
    815c:	0006e440 	call	6e44 <_free_r>
    8160:	008000b4 	movhi	r2,2
    8164:	1082ce04 	addi	r2,r2,2872
    8168:	10c00017 	ldw	r3,0(r2)
    816c:	003f3906 	br	7e54 <__alt_mem_Flash_flash_data+0xf4007e54>
    8170:	01005504 	movi	r4,340
    8174:	20800436 	bltu	r4,r2,8188 <_malloc_r+0x774>
    8178:	3804d3fa 	srli	r2,r7,15
    817c:	11001dc4 	addi	r4,r2,119
    8180:	210b883a 	add	r5,r4,r4
    8184:	003f6206 	br	7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    8188:	01015504 	movi	r4,1364
    818c:	20800436 	bltu	r4,r2,81a0 <_malloc_r+0x78c>
    8190:	3804d4ba 	srli	r2,r7,18
    8194:	11001f04 	addi	r4,r2,124
    8198:	210b883a 	add	r5,r4,r4
    819c:	003f5c06 	br	7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    81a0:	01403f04 	movi	r5,252
    81a4:	01001f84 	movi	r4,126
    81a8:	003f5906 	br	7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    81ac:	98800117 	ldw	r2,4(r19)
    81b0:	003fa906 	br	8058 <__alt_mem_Flash_flash_data+0xf4008058>
    81b4:	6007883a 	mov	r3,r12
    81b8:	003ea206 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>

000081bc <memchr>:
    81bc:	208000cc 	andi	r2,r4,3
    81c0:	280f883a 	mov	r7,r5
    81c4:	10003526 	beq	r2,zero,829c <memchr+0xe0>
    81c8:	30bfffc4 	addi	r2,r6,-1
    81cc:	30001b26 	beq	r6,zero,823c <memchr+0x80>
    81d0:	21800003 	ldbu	r6,0(r4)
    81d4:	28c03fcc 	andi	r3,r5,255
    81d8:	30c01a26 	beq	r6,r3,8244 <memchr+0x88>
    81dc:	180d883a 	mov	r6,r3
    81e0:	00000406 	br	81f4 <memchr+0x38>
    81e4:	10001526 	beq	r2,zero,823c <memchr+0x80>
    81e8:	20c00003 	ldbu	r3,0(r4)
    81ec:	10bfffc4 	addi	r2,r2,-1
    81f0:	19801426 	beq	r3,r6,8244 <memchr+0x88>
    81f4:	21000044 	addi	r4,r4,1
    81f8:	20c000cc 	andi	r3,r4,3
    81fc:	183ff91e 	bne	r3,zero,81e4 <__alt_mem_Flash_flash_data+0xf40081e4>
    8200:	024000c4 	movi	r9,3
    8204:	48801136 	bltu	r9,r2,824c <memchr+0x90>
    8208:	10000c26 	beq	r2,zero,823c <memchr+0x80>
    820c:	20c00003 	ldbu	r3,0(r4)
    8210:	29403fcc 	andi	r5,r5,255
    8214:	19400b26 	beq	r3,r5,8244 <memchr+0x88>
    8218:	20c00044 	addi	r3,r4,1
    821c:	2085883a 	add	r2,r4,r2
    8220:	39803fcc 	andi	r6,r7,255
    8224:	00000306 	br	8234 <memchr+0x78>
    8228:	18c00044 	addi	r3,r3,1
    822c:	197fffc3 	ldbu	r5,-1(r3)
    8230:	29800426 	beq	r5,r6,8244 <memchr+0x88>
    8234:	1809883a 	mov	r4,r3
    8238:	18bffb1e 	bne	r3,r2,8228 <__alt_mem_Flash_flash_data+0xf4008228>
    823c:	0005883a 	mov	r2,zero
    8240:	f800283a 	ret
    8244:	2005883a 	mov	r2,r4
    8248:	f800283a 	ret
    824c:	28c03fcc 	andi	r3,r5,255
    8250:	1810923a 	slli	r8,r3,8
    8254:	02ffbff4 	movhi	r11,65279
    8258:	02a02074 	movhi	r10,32897
    825c:	40c6b03a 	or	r3,r8,r3
    8260:	1810943a 	slli	r8,r3,16
    8264:	5affbfc4 	addi	r11,r11,-257
    8268:	52a02004 	addi	r10,r10,-32640
    826c:	40d0b03a 	or	r8,r8,r3
    8270:	20c00017 	ldw	r3,0(r4)
    8274:	40c6f03a 	xor	r3,r8,r3
    8278:	1acd883a 	add	r6,r3,r11
    827c:	00c6303a 	nor	r3,zero,r3
    8280:	30c6703a 	and	r3,r6,r3
    8284:	1a86703a 	and	r3,r3,r10
    8288:	183fdf1e 	bne	r3,zero,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    828c:	10bfff04 	addi	r2,r2,-4
    8290:	21000104 	addi	r4,r4,4
    8294:	48bff636 	bltu	r9,r2,8270 <__alt_mem_Flash_flash_data+0xf4008270>
    8298:	003fdb06 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    829c:	3005883a 	mov	r2,r6
    82a0:	003fd706 	br	8200 <__alt_mem_Flash_flash_data+0xf4008200>

000082a4 <memcpy>:
    82a4:	deffff04 	addi	sp,sp,-4
    82a8:	dc000015 	stw	r16,0(sp)
    82ac:	00c003c4 	movi	r3,15
    82b0:	2005883a 	mov	r2,r4
    82b4:	1980432e 	bgeu	r3,r6,83c4 <memcpy+0x120>
    82b8:	2146b03a 	or	r3,r4,r5
    82bc:	18c000cc 	andi	r3,r3,3
    82c0:	1800421e 	bne	r3,zero,83cc <memcpy+0x128>
    82c4:	343ffc04 	addi	r16,r6,-16
    82c8:	8020d13a 	srli	r16,r16,4
    82cc:	28c00104 	addi	r3,r5,4
    82d0:	23400104 	addi	r13,r4,4
    82d4:	801e913a 	slli	r15,r16,4
    82d8:	2b000204 	addi	r12,r5,8
    82dc:	22c00204 	addi	r11,r4,8
    82e0:	7bc00504 	addi	r15,r15,20
    82e4:	2a800304 	addi	r10,r5,12
    82e8:	22400304 	addi	r9,r4,12
    82ec:	2bdf883a 	add	r15,r5,r15
    82f0:	2811883a 	mov	r8,r5
    82f4:	200f883a 	mov	r7,r4
    82f8:	41000017 	ldw	r4,0(r8)
    82fc:	39c00404 	addi	r7,r7,16
    8300:	18c00404 	addi	r3,r3,16
    8304:	393ffc15 	stw	r4,-16(r7)
    8308:	1bbffc17 	ldw	r14,-16(r3)
    830c:	6b400404 	addi	r13,r13,16
    8310:	5ac00404 	addi	r11,r11,16
    8314:	6bbffc15 	stw	r14,-16(r13)
    8318:	63800017 	ldw	r14,0(r12)
    831c:	4a400404 	addi	r9,r9,16
    8320:	42000404 	addi	r8,r8,16
    8324:	5bbffc15 	stw	r14,-16(r11)
    8328:	53800017 	ldw	r14,0(r10)
    832c:	63000404 	addi	r12,r12,16
    8330:	52800404 	addi	r10,r10,16
    8334:	4bbffc15 	stw	r14,-16(r9)
    8338:	1bffef1e 	bne	r3,r15,82f8 <__alt_mem_Flash_flash_data+0xf40082f8>
    833c:	81c00044 	addi	r7,r16,1
    8340:	380e913a 	slli	r7,r7,4
    8344:	310003cc 	andi	r4,r6,15
    8348:	02c000c4 	movi	r11,3
    834c:	11c7883a 	add	r3,r2,r7
    8350:	29cb883a 	add	r5,r5,r7
    8354:	59001f2e 	bgeu	r11,r4,83d4 <memcpy+0x130>
    8358:	1813883a 	mov	r9,r3
    835c:	2811883a 	mov	r8,r5
    8360:	200f883a 	mov	r7,r4
    8364:	42800017 	ldw	r10,0(r8)
    8368:	4a400104 	addi	r9,r9,4
    836c:	39ffff04 	addi	r7,r7,-4
    8370:	4abfff15 	stw	r10,-4(r9)
    8374:	42000104 	addi	r8,r8,4
    8378:	59fffa36 	bltu	r11,r7,8364 <__alt_mem_Flash_flash_data+0xf4008364>
    837c:	213fff04 	addi	r4,r4,-4
    8380:	2008d0ba 	srli	r4,r4,2
    8384:	318000cc 	andi	r6,r6,3
    8388:	21000044 	addi	r4,r4,1
    838c:	2109883a 	add	r4,r4,r4
    8390:	2109883a 	add	r4,r4,r4
    8394:	1907883a 	add	r3,r3,r4
    8398:	290b883a 	add	r5,r5,r4
    839c:	30000626 	beq	r6,zero,83b8 <memcpy+0x114>
    83a0:	198d883a 	add	r6,r3,r6
    83a4:	29c00003 	ldbu	r7,0(r5)
    83a8:	18c00044 	addi	r3,r3,1
    83ac:	29400044 	addi	r5,r5,1
    83b0:	19ffffc5 	stb	r7,-1(r3)
    83b4:	19bffb1e 	bne	r3,r6,83a4 <__alt_mem_Flash_flash_data+0xf40083a4>
    83b8:	dc000017 	ldw	r16,0(sp)
    83bc:	dec00104 	addi	sp,sp,4
    83c0:	f800283a 	ret
    83c4:	2007883a 	mov	r3,r4
    83c8:	003ff406 	br	839c <__alt_mem_Flash_flash_data+0xf400839c>
    83cc:	2007883a 	mov	r3,r4
    83d0:	003ff306 	br	83a0 <__alt_mem_Flash_flash_data+0xf40083a0>
    83d4:	200d883a 	mov	r6,r4
    83d8:	003ff006 	br	839c <__alt_mem_Flash_flash_data+0xf400839c>

000083dc <memmove>:
    83dc:	2005883a 	mov	r2,r4
    83e0:	29000b2e 	bgeu	r5,r4,8410 <memmove+0x34>
    83e4:	298f883a 	add	r7,r5,r6
    83e8:	21c0092e 	bgeu	r4,r7,8410 <memmove+0x34>
    83ec:	2187883a 	add	r3,r4,r6
    83f0:	198bc83a 	sub	r5,r3,r6
    83f4:	30004b26 	beq	r6,zero,8524 <memmove+0x148>
    83f8:	39ffffc4 	addi	r7,r7,-1
    83fc:	39000003 	ldbu	r4,0(r7)
    8400:	18ffffc4 	addi	r3,r3,-1
    8404:	19000005 	stb	r4,0(r3)
    8408:	197ffb1e 	bne	r3,r5,83f8 <__alt_mem_Flash_flash_data+0xf40083f8>
    840c:	f800283a 	ret
    8410:	00c003c4 	movi	r3,15
    8414:	1980412e 	bgeu	r3,r6,851c <memmove+0x140>
    8418:	1146b03a 	or	r3,r2,r5
    841c:	18c000cc 	andi	r3,r3,3
    8420:	1800411e 	bne	r3,zero,8528 <memmove+0x14c>
    8424:	33fffc04 	addi	r15,r6,-16
    8428:	781ed13a 	srli	r15,r15,4
    842c:	28c00104 	addi	r3,r5,4
    8430:	13400104 	addi	r13,r2,4
    8434:	781c913a 	slli	r14,r15,4
    8438:	2b000204 	addi	r12,r5,8
    843c:	12c00204 	addi	r11,r2,8
    8440:	73800504 	addi	r14,r14,20
    8444:	2a800304 	addi	r10,r5,12
    8448:	12400304 	addi	r9,r2,12
    844c:	2b9d883a 	add	r14,r5,r14
    8450:	2811883a 	mov	r8,r5
    8454:	100f883a 	mov	r7,r2
    8458:	41000017 	ldw	r4,0(r8)
    845c:	39c00404 	addi	r7,r7,16
    8460:	18c00404 	addi	r3,r3,16
    8464:	393ffc15 	stw	r4,-16(r7)
    8468:	193ffc17 	ldw	r4,-16(r3)
    846c:	6b400404 	addi	r13,r13,16
    8470:	5ac00404 	addi	r11,r11,16
    8474:	693ffc15 	stw	r4,-16(r13)
    8478:	61000017 	ldw	r4,0(r12)
    847c:	4a400404 	addi	r9,r9,16
    8480:	42000404 	addi	r8,r8,16
    8484:	593ffc15 	stw	r4,-16(r11)
    8488:	51000017 	ldw	r4,0(r10)
    848c:	63000404 	addi	r12,r12,16
    8490:	52800404 	addi	r10,r10,16
    8494:	493ffc15 	stw	r4,-16(r9)
    8498:	1bbfef1e 	bne	r3,r14,8458 <__alt_mem_Flash_flash_data+0xf4008458>
    849c:	79000044 	addi	r4,r15,1
    84a0:	2008913a 	slli	r4,r4,4
    84a4:	328003cc 	andi	r10,r6,15
    84a8:	02c000c4 	movi	r11,3
    84ac:	1107883a 	add	r3,r2,r4
    84b0:	290b883a 	add	r5,r5,r4
    84b4:	5a801e2e 	bgeu	r11,r10,8530 <memmove+0x154>
    84b8:	1813883a 	mov	r9,r3
    84bc:	2811883a 	mov	r8,r5
    84c0:	500f883a 	mov	r7,r10
    84c4:	41000017 	ldw	r4,0(r8)
    84c8:	4a400104 	addi	r9,r9,4
    84cc:	39ffff04 	addi	r7,r7,-4
    84d0:	493fff15 	stw	r4,-4(r9)
    84d4:	42000104 	addi	r8,r8,4
    84d8:	59fffa36 	bltu	r11,r7,84c4 <__alt_mem_Flash_flash_data+0xf40084c4>
    84dc:	513fff04 	addi	r4,r10,-4
    84e0:	2008d0ba 	srli	r4,r4,2
    84e4:	318000cc 	andi	r6,r6,3
    84e8:	21000044 	addi	r4,r4,1
    84ec:	2109883a 	add	r4,r4,r4
    84f0:	2109883a 	add	r4,r4,r4
    84f4:	1907883a 	add	r3,r3,r4
    84f8:	290b883a 	add	r5,r5,r4
    84fc:	30000926 	beq	r6,zero,8524 <memmove+0x148>
    8500:	198d883a 	add	r6,r3,r6
    8504:	29c00003 	ldbu	r7,0(r5)
    8508:	18c00044 	addi	r3,r3,1
    850c:	29400044 	addi	r5,r5,1
    8510:	19ffffc5 	stb	r7,-1(r3)
    8514:	19bffb1e 	bne	r3,r6,8504 <__alt_mem_Flash_flash_data+0xf4008504>
    8518:	f800283a 	ret
    851c:	1007883a 	mov	r3,r2
    8520:	003ff606 	br	84fc <__alt_mem_Flash_flash_data+0xf40084fc>
    8524:	f800283a 	ret
    8528:	1007883a 	mov	r3,r2
    852c:	003ff406 	br	8500 <__alt_mem_Flash_flash_data+0xf4008500>
    8530:	500d883a 	mov	r6,r10
    8534:	003ff106 	br	84fc <__alt_mem_Flash_flash_data+0xf40084fc>

00008538 <_Balloc>:
    8538:	20801317 	ldw	r2,76(r4)
    853c:	defffc04 	addi	sp,sp,-16
    8540:	dc400115 	stw	r17,4(sp)
    8544:	dc000015 	stw	r16,0(sp)
    8548:	dfc00315 	stw	ra,12(sp)
    854c:	dc800215 	stw	r18,8(sp)
    8550:	2023883a 	mov	r17,r4
    8554:	2821883a 	mov	r16,r5
    8558:	10000f26 	beq	r2,zero,8598 <_Balloc+0x60>
    855c:	8407883a 	add	r3,r16,r16
    8560:	18c7883a 	add	r3,r3,r3
    8564:	10c7883a 	add	r3,r2,r3
    8568:	18800017 	ldw	r2,0(r3)
    856c:	10001126 	beq	r2,zero,85b4 <_Balloc+0x7c>
    8570:	11000017 	ldw	r4,0(r2)
    8574:	19000015 	stw	r4,0(r3)
    8578:	10000415 	stw	zero,16(r2)
    857c:	10000315 	stw	zero,12(r2)
    8580:	dfc00317 	ldw	ra,12(sp)
    8584:	dc800217 	ldw	r18,8(sp)
    8588:	dc400117 	ldw	r17,4(sp)
    858c:	dc000017 	ldw	r16,0(sp)
    8590:	dec00404 	addi	sp,sp,16
    8594:	f800283a 	ret
    8598:	01400104 	movi	r5,4
    859c:	01800844 	movi	r6,33
    85a0:	000c3bc0 	call	c3bc <_calloc_r>
    85a4:	88801315 	stw	r2,76(r17)
    85a8:	103fec1e 	bne	r2,zero,855c <__alt_mem_Flash_flash_data+0xf400855c>
    85ac:	0005883a 	mov	r2,zero
    85b0:	003ff306 	br	8580 <__alt_mem_Flash_flash_data+0xf4008580>
    85b4:	01400044 	movi	r5,1
    85b8:	2c24983a 	sll	r18,r5,r16
    85bc:	8809883a 	mov	r4,r17
    85c0:	91800144 	addi	r6,r18,5
    85c4:	318d883a 	add	r6,r6,r6
    85c8:	318d883a 	add	r6,r6,r6
    85cc:	000c3bc0 	call	c3bc <_calloc_r>
    85d0:	103ff626 	beq	r2,zero,85ac <__alt_mem_Flash_flash_data+0xf40085ac>
    85d4:	14000115 	stw	r16,4(r2)
    85d8:	14800215 	stw	r18,8(r2)
    85dc:	003fe606 	br	8578 <__alt_mem_Flash_flash_data+0xf4008578>

000085e0 <_Bfree>:
    85e0:	28000826 	beq	r5,zero,8604 <_Bfree+0x24>
    85e4:	28c00117 	ldw	r3,4(r5)
    85e8:	20801317 	ldw	r2,76(r4)
    85ec:	18c7883a 	add	r3,r3,r3
    85f0:	18c7883a 	add	r3,r3,r3
    85f4:	10c5883a 	add	r2,r2,r3
    85f8:	10c00017 	ldw	r3,0(r2)
    85fc:	28c00015 	stw	r3,0(r5)
    8600:	11400015 	stw	r5,0(r2)
    8604:	f800283a 	ret

00008608 <__multadd>:
    8608:	defffa04 	addi	sp,sp,-24
    860c:	dc000115 	stw	r16,4(sp)
    8610:	2c000417 	ldw	r16,16(r5)
    8614:	dc800315 	stw	r18,12(sp)
    8618:	dc400215 	stw	r17,8(sp)
    861c:	dfc00515 	stw	ra,20(sp)
    8620:	dcc00415 	stw	r19,16(sp)
    8624:	2823883a 	mov	r17,r5
    8628:	2025883a 	mov	r18,r4
    862c:	2a400504 	addi	r9,r5,20
    8630:	0015883a 	mov	r10,zero
    8634:	4a000017 	ldw	r8,0(r9)
    8638:	4a400104 	addi	r9,r9,4
    863c:	52800044 	addi	r10,r10,1
    8640:	40ffffcc 	andi	r3,r8,65535
    8644:	1987383a 	mul	r3,r3,r6
    8648:	4010d43a 	srli	r8,r8,16
    864c:	19cf883a 	add	r7,r3,r7
    8650:	4191383a 	mul	r8,r8,r6
    8654:	3816d43a 	srli	r11,r7,16
    8658:	38ffffcc 	andi	r3,r7,65535
    865c:	5a0f883a 	add	r7,r11,r8
    8660:	3810943a 	slli	r8,r7,16
    8664:	380ed43a 	srli	r7,r7,16
    8668:	40c7883a 	add	r3,r8,r3
    866c:	48ffff15 	stw	r3,-4(r9)
    8670:	543ff016 	blt	r10,r16,8634 <__alt_mem_Flash_flash_data+0xf4008634>
    8674:	38000926 	beq	r7,zero,869c <__multadd+0x94>
    8678:	88800217 	ldw	r2,8(r17)
    867c:	80800f0e 	bge	r16,r2,86bc <__multadd+0xb4>
    8680:	80800144 	addi	r2,r16,5
    8684:	1085883a 	add	r2,r2,r2
    8688:	1085883a 	add	r2,r2,r2
    868c:	8885883a 	add	r2,r17,r2
    8690:	11c00015 	stw	r7,0(r2)
    8694:	84000044 	addi	r16,r16,1
    8698:	8c000415 	stw	r16,16(r17)
    869c:	8805883a 	mov	r2,r17
    86a0:	dfc00517 	ldw	ra,20(sp)
    86a4:	dcc00417 	ldw	r19,16(sp)
    86a8:	dc800317 	ldw	r18,12(sp)
    86ac:	dc400217 	ldw	r17,8(sp)
    86b0:	dc000117 	ldw	r16,4(sp)
    86b4:	dec00604 	addi	sp,sp,24
    86b8:	f800283a 	ret
    86bc:	89400117 	ldw	r5,4(r17)
    86c0:	9009883a 	mov	r4,r18
    86c4:	d9c00015 	stw	r7,0(sp)
    86c8:	29400044 	addi	r5,r5,1
    86cc:	00085380 	call	8538 <_Balloc>
    86d0:	89800417 	ldw	r6,16(r17)
    86d4:	11000304 	addi	r4,r2,12
    86d8:	89400304 	addi	r5,r17,12
    86dc:	31800084 	addi	r6,r6,2
    86e0:	318d883a 	add	r6,r6,r6
    86e4:	318d883a 	add	r6,r6,r6
    86e8:	1027883a 	mov	r19,r2
    86ec:	00082a40 	call	82a4 <memcpy>
    86f0:	d9c00017 	ldw	r7,0(sp)
    86f4:	88000a26 	beq	r17,zero,8720 <__multadd+0x118>
    86f8:	89000117 	ldw	r4,4(r17)
    86fc:	90c01317 	ldw	r3,76(r18)
    8700:	2109883a 	add	r4,r4,r4
    8704:	2109883a 	add	r4,r4,r4
    8708:	1907883a 	add	r3,r3,r4
    870c:	18800017 	ldw	r2,0(r3)
    8710:	88800015 	stw	r2,0(r17)
    8714:	1c400015 	stw	r17,0(r3)
    8718:	9823883a 	mov	r17,r19
    871c:	003fd806 	br	8680 <__alt_mem_Flash_flash_data+0xf4008680>
    8720:	9823883a 	mov	r17,r19
    8724:	003fd606 	br	8680 <__alt_mem_Flash_flash_data+0xf4008680>

00008728 <__s2b>:
    8728:	defff904 	addi	sp,sp,-28
    872c:	dc400115 	stw	r17,4(sp)
    8730:	dc000015 	stw	r16,0(sp)
    8734:	2023883a 	mov	r17,r4
    8738:	2821883a 	mov	r16,r5
    873c:	39000204 	addi	r4,r7,8
    8740:	01400244 	movi	r5,9
    8744:	dcc00315 	stw	r19,12(sp)
    8748:	dc800215 	stw	r18,8(sp)
    874c:	dfc00615 	stw	ra,24(sp)
    8750:	dd400515 	stw	r21,20(sp)
    8754:	dd000415 	stw	r20,16(sp)
    8758:	3825883a 	mov	r18,r7
    875c:	3027883a 	mov	r19,r6
    8760:	000d7c00 	call	d7c0 <__divsi3>
    8764:	00c00044 	movi	r3,1
    8768:	000b883a 	mov	r5,zero
    876c:	1880030e 	bge	r3,r2,877c <__s2b+0x54>
    8770:	18c7883a 	add	r3,r3,r3
    8774:	29400044 	addi	r5,r5,1
    8778:	18bffd16 	blt	r3,r2,8770 <__alt_mem_Flash_flash_data+0xf4008770>
    877c:	8809883a 	mov	r4,r17
    8780:	00085380 	call	8538 <_Balloc>
    8784:	d8c00717 	ldw	r3,28(sp)
    8788:	10c00515 	stw	r3,20(r2)
    878c:	00c00044 	movi	r3,1
    8790:	10c00415 	stw	r3,16(r2)
    8794:	00c00244 	movi	r3,9
    8798:	1cc0210e 	bge	r3,r19,8820 <__s2b+0xf8>
    879c:	80eb883a 	add	r21,r16,r3
    87a0:	a829883a 	mov	r20,r21
    87a4:	84e1883a 	add	r16,r16,r19
    87a8:	a1c00007 	ldb	r7,0(r20)
    87ac:	8809883a 	mov	r4,r17
    87b0:	a5000044 	addi	r20,r20,1
    87b4:	100b883a 	mov	r5,r2
    87b8:	01800284 	movi	r6,10
    87bc:	39fff404 	addi	r7,r7,-48
    87c0:	00086080 	call	8608 <__multadd>
    87c4:	a43ff81e 	bne	r20,r16,87a8 <__alt_mem_Flash_flash_data+0xf40087a8>
    87c8:	ace1883a 	add	r16,r21,r19
    87cc:	843ffe04 	addi	r16,r16,-8
    87d0:	9c800a0e 	bge	r19,r18,87fc <__s2b+0xd4>
    87d4:	94e5c83a 	sub	r18,r18,r19
    87d8:	84a5883a 	add	r18,r16,r18
    87dc:	81c00007 	ldb	r7,0(r16)
    87e0:	8809883a 	mov	r4,r17
    87e4:	84000044 	addi	r16,r16,1
    87e8:	100b883a 	mov	r5,r2
    87ec:	01800284 	movi	r6,10
    87f0:	39fff404 	addi	r7,r7,-48
    87f4:	00086080 	call	8608 <__multadd>
    87f8:	84bff81e 	bne	r16,r18,87dc <__alt_mem_Flash_flash_data+0xf40087dc>
    87fc:	dfc00617 	ldw	ra,24(sp)
    8800:	dd400517 	ldw	r21,20(sp)
    8804:	dd000417 	ldw	r20,16(sp)
    8808:	dcc00317 	ldw	r19,12(sp)
    880c:	dc800217 	ldw	r18,8(sp)
    8810:	dc400117 	ldw	r17,4(sp)
    8814:	dc000017 	ldw	r16,0(sp)
    8818:	dec00704 	addi	sp,sp,28
    881c:	f800283a 	ret
    8820:	84000284 	addi	r16,r16,10
    8824:	1827883a 	mov	r19,r3
    8828:	003fe906 	br	87d0 <__alt_mem_Flash_flash_data+0xf40087d0>

0000882c <__hi0bits>:
    882c:	20bfffec 	andhi	r2,r4,65535
    8830:	1000141e 	bne	r2,zero,8884 <__hi0bits+0x58>
    8834:	2008943a 	slli	r4,r4,16
    8838:	00800404 	movi	r2,16
    883c:	20ffc02c 	andhi	r3,r4,65280
    8840:	1800021e 	bne	r3,zero,884c <__hi0bits+0x20>
    8844:	2008923a 	slli	r4,r4,8
    8848:	10800204 	addi	r2,r2,8
    884c:	20fc002c 	andhi	r3,r4,61440
    8850:	1800021e 	bne	r3,zero,885c <__hi0bits+0x30>
    8854:	2008913a 	slli	r4,r4,4
    8858:	10800104 	addi	r2,r2,4
    885c:	20f0002c 	andhi	r3,r4,49152
    8860:	1800031e 	bne	r3,zero,8870 <__hi0bits+0x44>
    8864:	2109883a 	add	r4,r4,r4
    8868:	10800084 	addi	r2,r2,2
    886c:	2109883a 	add	r4,r4,r4
    8870:	20000316 	blt	r4,zero,8880 <__hi0bits+0x54>
    8874:	2110002c 	andhi	r4,r4,16384
    8878:	2000041e 	bne	r4,zero,888c <__hi0bits+0x60>
    887c:	00800804 	movi	r2,32
    8880:	f800283a 	ret
    8884:	0005883a 	mov	r2,zero
    8888:	003fec06 	br	883c <__alt_mem_Flash_flash_data+0xf400883c>
    888c:	10800044 	addi	r2,r2,1
    8890:	f800283a 	ret

00008894 <__lo0bits>:
    8894:	20c00017 	ldw	r3,0(r4)
    8898:	188001cc 	andi	r2,r3,7
    889c:	10000826 	beq	r2,zero,88c0 <__lo0bits+0x2c>
    88a0:	1880004c 	andi	r2,r3,1
    88a4:	1000211e 	bne	r2,zero,892c <__lo0bits+0x98>
    88a8:	1880008c 	andi	r2,r3,2
    88ac:	1000211e 	bne	r2,zero,8934 <__lo0bits+0xa0>
    88b0:	1806d0ba 	srli	r3,r3,2
    88b4:	00800084 	movi	r2,2
    88b8:	20c00015 	stw	r3,0(r4)
    88bc:	f800283a 	ret
    88c0:	18bfffcc 	andi	r2,r3,65535
    88c4:	10001326 	beq	r2,zero,8914 <__lo0bits+0x80>
    88c8:	0005883a 	mov	r2,zero
    88cc:	19403fcc 	andi	r5,r3,255
    88d0:	2800021e 	bne	r5,zero,88dc <__lo0bits+0x48>
    88d4:	1806d23a 	srli	r3,r3,8
    88d8:	10800204 	addi	r2,r2,8
    88dc:	194003cc 	andi	r5,r3,15
    88e0:	2800021e 	bne	r5,zero,88ec <__lo0bits+0x58>
    88e4:	1806d13a 	srli	r3,r3,4
    88e8:	10800104 	addi	r2,r2,4
    88ec:	194000cc 	andi	r5,r3,3
    88f0:	2800021e 	bne	r5,zero,88fc <__lo0bits+0x68>
    88f4:	1806d0ba 	srli	r3,r3,2
    88f8:	10800084 	addi	r2,r2,2
    88fc:	1940004c 	andi	r5,r3,1
    8900:	2800081e 	bne	r5,zero,8924 <__lo0bits+0x90>
    8904:	1806d07a 	srli	r3,r3,1
    8908:	1800051e 	bne	r3,zero,8920 <__lo0bits+0x8c>
    890c:	00800804 	movi	r2,32
    8910:	f800283a 	ret
    8914:	1806d43a 	srli	r3,r3,16
    8918:	00800404 	movi	r2,16
    891c:	003feb06 	br	88cc <__alt_mem_Flash_flash_data+0xf40088cc>
    8920:	10800044 	addi	r2,r2,1
    8924:	20c00015 	stw	r3,0(r4)
    8928:	f800283a 	ret
    892c:	0005883a 	mov	r2,zero
    8930:	f800283a 	ret
    8934:	1806d07a 	srli	r3,r3,1
    8938:	00800044 	movi	r2,1
    893c:	20c00015 	stw	r3,0(r4)
    8940:	f800283a 	ret

00008944 <__i2b>:
    8944:	defffd04 	addi	sp,sp,-12
    8948:	dc000015 	stw	r16,0(sp)
    894c:	04000044 	movi	r16,1
    8950:	dc400115 	stw	r17,4(sp)
    8954:	2823883a 	mov	r17,r5
    8958:	800b883a 	mov	r5,r16
    895c:	dfc00215 	stw	ra,8(sp)
    8960:	00085380 	call	8538 <_Balloc>
    8964:	14400515 	stw	r17,20(r2)
    8968:	14000415 	stw	r16,16(r2)
    896c:	dfc00217 	ldw	ra,8(sp)
    8970:	dc400117 	ldw	r17,4(sp)
    8974:	dc000017 	ldw	r16,0(sp)
    8978:	dec00304 	addi	sp,sp,12
    897c:	f800283a 	ret

00008980 <__multiply>:
    8980:	defffa04 	addi	sp,sp,-24
    8984:	dcc00315 	stw	r19,12(sp)
    8988:	dc800215 	stw	r18,8(sp)
    898c:	2cc00417 	ldw	r19,16(r5)
    8990:	34800417 	ldw	r18,16(r6)
    8994:	dd000415 	stw	r20,16(sp)
    8998:	dc400115 	stw	r17,4(sp)
    899c:	dfc00515 	stw	ra,20(sp)
    89a0:	dc000015 	stw	r16,0(sp)
    89a4:	2829883a 	mov	r20,r5
    89a8:	3023883a 	mov	r17,r6
    89ac:	9c807016 	blt	r19,r18,8b70 <__multiply+0x1f0>
    89b0:	9005883a 	mov	r2,r18
    89b4:	9825883a 	mov	r18,r19
    89b8:	1027883a 	mov	r19,r2
    89bc:	a0800217 	ldw	r2,8(r20)
    89c0:	94e1883a 	add	r16,r18,r19
    89c4:	a1400117 	ldw	r5,4(r20)
    89c8:	1400010e 	bge	r2,r16,89d0 <__multiply+0x50>
    89cc:	29400044 	addi	r5,r5,1
    89d0:	00085380 	call	8538 <_Balloc>
    89d4:	8417883a 	add	r11,r16,r16
    89d8:	13000504 	addi	r12,r2,20
    89dc:	5ad7883a 	add	r11,r11,r11
    89e0:	62d7883a 	add	r11,r12,r11
    89e4:	6007883a 	mov	r3,r12
    89e8:	62c0032e 	bgeu	r12,r11,89f8 <__multiply+0x78>
    89ec:	18000015 	stw	zero,0(r3)
    89f0:	18c00104 	addi	r3,r3,4
    89f4:	1afffd36 	bltu	r3,r11,89ec <__alt_mem_Flash_flash_data+0xf40089ec>
    89f8:	9ce7883a 	add	r19,r19,r19
    89fc:	94a5883a 	add	r18,r18,r18
    8a00:	89800504 	addi	r6,r17,20
    8a04:	9ce7883a 	add	r19,r19,r19
    8a08:	a3800504 	addi	r14,r20,20
    8a0c:	94a5883a 	add	r18,r18,r18
    8a10:	34db883a 	add	r13,r6,r19
    8a14:	7495883a 	add	r10,r14,r18
    8a18:	3340422e 	bgeu	r6,r13,8b24 <__multiply+0x1a4>
    8a1c:	34400017 	ldw	r17,0(r6)
    8a20:	8cbfffcc 	andi	r18,r17,65535
    8a24:	90001b26 	beq	r18,zero,8a94 <__multiply+0x114>
    8a28:	6013883a 	mov	r9,r12
    8a2c:	7023883a 	mov	r17,r14
    8a30:	0011883a 	mov	r8,zero
    8a34:	88c00017 	ldw	r3,0(r17)
    8a38:	4bc00017 	ldw	r15,0(r9)
    8a3c:	8c400104 	addi	r17,r17,4
    8a40:	19ffffcc 	andi	r7,r3,65535
    8a44:	3c8f383a 	mul	r7,r7,r18
    8a48:	1808d43a 	srli	r4,r3,16
    8a4c:	797fffcc 	andi	r5,r15,65535
    8a50:	29cb883a 	add	r5,r5,r7
    8a54:	2a0b883a 	add	r5,r5,r8
    8a58:	2489383a 	mul	r4,r4,r18
    8a5c:	7806d43a 	srli	r3,r15,16
    8a60:	2810d43a 	srli	r8,r5,16
    8a64:	297fffcc 	andi	r5,r5,65535
    8a68:	1907883a 	add	r3,r3,r4
    8a6c:	1a07883a 	add	r3,r3,r8
    8a70:	1808943a 	slli	r4,r3,16
    8a74:	480f883a 	mov	r7,r9
    8a78:	1810d43a 	srli	r8,r3,16
    8a7c:	214ab03a 	or	r5,r4,r5
    8a80:	49400015 	stw	r5,0(r9)
    8a84:	4a400104 	addi	r9,r9,4
    8a88:	8abfea36 	bltu	r17,r10,8a34 <__alt_mem_Flash_flash_data+0xf4008a34>
    8a8c:	3a000115 	stw	r8,4(r7)
    8a90:	34400017 	ldw	r17,0(r6)
    8a94:	8822d43a 	srli	r17,r17,16
    8a98:	88001f26 	beq	r17,zero,8b18 <__multiply+0x198>
    8a9c:	60c00017 	ldw	r3,0(r12)
    8aa0:	7013883a 	mov	r9,r14
    8aa4:	601f883a 	mov	r15,r12
    8aa8:	1811883a 	mov	r8,r3
    8aac:	6027883a 	mov	r19,r12
    8ab0:	000f883a 	mov	r7,zero
    8ab4:	00000106 	br	8abc <__multiply+0x13c>
    8ab8:	9027883a 	mov	r19,r18
    8abc:	4940000b 	ldhu	r5,0(r9)
    8ac0:	4010d43a 	srli	r8,r8,16
    8ac4:	193fffcc 	andi	r4,r3,65535
    8ac8:	2c4b383a 	mul	r5,r5,r17
    8acc:	7bc00104 	addi	r15,r15,4
    8ad0:	4a400104 	addi	r9,r9,4
    8ad4:	2a0b883a 	add	r5,r5,r8
    8ad8:	29cb883a 	add	r5,r5,r7
    8adc:	2806943a 	slli	r3,r5,16
    8ae0:	9c800104 	addi	r18,r19,4
    8ae4:	280ad43a 	srli	r5,r5,16
    8ae8:	1908b03a 	or	r4,r3,r4
    8aec:	793fff15 	stw	r4,-4(r15)
    8af0:	48ffff17 	ldw	r3,-4(r9)
    8af4:	92000017 	ldw	r8,0(r18)
    8af8:	1806d43a 	srli	r3,r3,16
    8afc:	413fffcc 	andi	r4,r8,65535
    8b00:	1c47383a 	mul	r3,r3,r17
    8b04:	1907883a 	add	r3,r3,r4
    8b08:	1947883a 	add	r3,r3,r5
    8b0c:	180ed43a 	srli	r7,r3,16
    8b10:	4abfe936 	bltu	r9,r10,8ab8 <__alt_mem_Flash_flash_data+0xf4008ab8>
    8b14:	98c00115 	stw	r3,4(r19)
    8b18:	31800104 	addi	r6,r6,4
    8b1c:	63000104 	addi	r12,r12,4
    8b20:	337fbe36 	bltu	r6,r13,8a1c <__alt_mem_Flash_flash_data+0xf4008a1c>
    8b24:	0400090e 	bge	zero,r16,8b4c <__multiply+0x1cc>
    8b28:	58ffff17 	ldw	r3,-4(r11)
    8b2c:	5affff04 	addi	r11,r11,-4
    8b30:	18000326 	beq	r3,zero,8b40 <__multiply+0x1c0>
    8b34:	00000506 	br	8b4c <__multiply+0x1cc>
    8b38:	58c00017 	ldw	r3,0(r11)
    8b3c:	1800031e 	bne	r3,zero,8b4c <__multiply+0x1cc>
    8b40:	843fffc4 	addi	r16,r16,-1
    8b44:	5affff04 	addi	r11,r11,-4
    8b48:	803ffb1e 	bne	r16,zero,8b38 <__alt_mem_Flash_flash_data+0xf4008b38>
    8b4c:	14000415 	stw	r16,16(r2)
    8b50:	dfc00517 	ldw	ra,20(sp)
    8b54:	dd000417 	ldw	r20,16(sp)
    8b58:	dcc00317 	ldw	r19,12(sp)
    8b5c:	dc800217 	ldw	r18,8(sp)
    8b60:	dc400117 	ldw	r17,4(sp)
    8b64:	dc000017 	ldw	r16,0(sp)
    8b68:	dec00604 	addi	sp,sp,24
    8b6c:	f800283a 	ret
    8b70:	3029883a 	mov	r20,r6
    8b74:	2823883a 	mov	r17,r5
    8b78:	003f9006 	br	89bc <__alt_mem_Flash_flash_data+0xf40089bc>

00008b7c <__pow5mult>:
    8b7c:	defffa04 	addi	sp,sp,-24
    8b80:	dcc00315 	stw	r19,12(sp)
    8b84:	dc800215 	stw	r18,8(sp)
    8b88:	dc000015 	stw	r16,0(sp)
    8b8c:	dfc00515 	stw	ra,20(sp)
    8b90:	dd000415 	stw	r20,16(sp)
    8b94:	dc400115 	stw	r17,4(sp)
    8b98:	308000cc 	andi	r2,r6,3
    8b9c:	3021883a 	mov	r16,r6
    8ba0:	2027883a 	mov	r19,r4
    8ba4:	2825883a 	mov	r18,r5
    8ba8:	10002e1e 	bne	r2,zero,8c64 <__pow5mult+0xe8>
    8bac:	8021d0ba 	srai	r16,r16,2
    8bb0:	80001a26 	beq	r16,zero,8c1c <__pow5mult+0xa0>
    8bb4:	9c401217 	ldw	r17,72(r19)
    8bb8:	8800061e 	bne	r17,zero,8bd4 <__pow5mult+0x58>
    8bbc:	00003406 	br	8c90 <__pow5mult+0x114>
    8bc0:	8021d07a 	srai	r16,r16,1
    8bc4:	80001526 	beq	r16,zero,8c1c <__pow5mult+0xa0>
    8bc8:	88800017 	ldw	r2,0(r17)
    8bcc:	10001c26 	beq	r2,zero,8c40 <__pow5mult+0xc4>
    8bd0:	1023883a 	mov	r17,r2
    8bd4:	80c0004c 	andi	r3,r16,1
    8bd8:	183ff926 	beq	r3,zero,8bc0 <__alt_mem_Flash_flash_data+0xf4008bc0>
    8bdc:	900b883a 	mov	r5,r18
    8be0:	880d883a 	mov	r6,r17
    8be4:	9809883a 	mov	r4,r19
    8be8:	00089800 	call	8980 <__multiply>
    8bec:	90001b26 	beq	r18,zero,8c5c <__pow5mult+0xe0>
    8bf0:	91c00117 	ldw	r7,4(r18)
    8bf4:	98c01317 	ldw	r3,76(r19)
    8bf8:	8021d07a 	srai	r16,r16,1
    8bfc:	39cf883a 	add	r7,r7,r7
    8c00:	39cf883a 	add	r7,r7,r7
    8c04:	19c7883a 	add	r3,r3,r7
    8c08:	19000017 	ldw	r4,0(r3)
    8c0c:	91000015 	stw	r4,0(r18)
    8c10:	1c800015 	stw	r18,0(r3)
    8c14:	1025883a 	mov	r18,r2
    8c18:	803feb1e 	bne	r16,zero,8bc8 <__alt_mem_Flash_flash_data+0xf4008bc8>
    8c1c:	9005883a 	mov	r2,r18
    8c20:	dfc00517 	ldw	ra,20(sp)
    8c24:	dd000417 	ldw	r20,16(sp)
    8c28:	dcc00317 	ldw	r19,12(sp)
    8c2c:	dc800217 	ldw	r18,8(sp)
    8c30:	dc400117 	ldw	r17,4(sp)
    8c34:	dc000017 	ldw	r16,0(sp)
    8c38:	dec00604 	addi	sp,sp,24
    8c3c:	f800283a 	ret
    8c40:	9809883a 	mov	r4,r19
    8c44:	880b883a 	mov	r5,r17
    8c48:	880d883a 	mov	r6,r17
    8c4c:	00089800 	call	8980 <__multiply>
    8c50:	88800015 	stw	r2,0(r17)
    8c54:	10000015 	stw	zero,0(r2)
    8c58:	003fdd06 	br	8bd0 <__alt_mem_Flash_flash_data+0xf4008bd0>
    8c5c:	1025883a 	mov	r18,r2
    8c60:	003fd706 	br	8bc0 <__alt_mem_Flash_flash_data+0xf4008bc0>
    8c64:	10bfffc4 	addi	r2,r2,-1
    8c68:	1085883a 	add	r2,r2,r2
    8c6c:	00c000b4 	movhi	r3,2
    8c70:	18f19904 	addi	r3,r3,-14748
    8c74:	1085883a 	add	r2,r2,r2
    8c78:	1885883a 	add	r2,r3,r2
    8c7c:	11800017 	ldw	r6,0(r2)
    8c80:	000f883a 	mov	r7,zero
    8c84:	00086080 	call	8608 <__multadd>
    8c88:	1025883a 	mov	r18,r2
    8c8c:	003fc706 	br	8bac <__alt_mem_Flash_flash_data+0xf4008bac>
    8c90:	05000044 	movi	r20,1
    8c94:	9809883a 	mov	r4,r19
    8c98:	a00b883a 	mov	r5,r20
    8c9c:	00085380 	call	8538 <_Balloc>
    8ca0:	1023883a 	mov	r17,r2
    8ca4:	00809c44 	movi	r2,625
    8ca8:	88800515 	stw	r2,20(r17)
    8cac:	8d000415 	stw	r20,16(r17)
    8cb0:	9c401215 	stw	r17,72(r19)
    8cb4:	88000015 	stw	zero,0(r17)
    8cb8:	003fc606 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>

00008cbc <__lshift>:
    8cbc:	defff904 	addi	sp,sp,-28
    8cc0:	dd000415 	stw	r20,16(sp)
    8cc4:	dcc00315 	stw	r19,12(sp)
    8cc8:	3029d17a 	srai	r20,r6,5
    8ccc:	2cc00417 	ldw	r19,16(r5)
    8cd0:	28800217 	ldw	r2,8(r5)
    8cd4:	dd400515 	stw	r21,20(sp)
    8cd8:	a4e7883a 	add	r19,r20,r19
    8cdc:	dc800215 	stw	r18,8(sp)
    8ce0:	dc400115 	stw	r17,4(sp)
    8ce4:	dc000015 	stw	r16,0(sp)
    8ce8:	dfc00615 	stw	ra,24(sp)
    8cec:	9c000044 	addi	r16,r19,1
    8cf0:	2823883a 	mov	r17,r5
    8cf4:	302b883a 	mov	r21,r6
    8cf8:	2025883a 	mov	r18,r4
    8cfc:	29400117 	ldw	r5,4(r5)
    8d00:	1400030e 	bge	r2,r16,8d10 <__lshift+0x54>
    8d04:	1085883a 	add	r2,r2,r2
    8d08:	29400044 	addi	r5,r5,1
    8d0c:	143ffd16 	blt	r2,r16,8d04 <__alt_mem_Flash_flash_data+0xf4008d04>
    8d10:	9009883a 	mov	r4,r18
    8d14:	00085380 	call	8538 <_Balloc>
    8d18:	11c00504 	addi	r7,r2,20
    8d1c:	0500090e 	bge	zero,r20,8d44 <__lshift+0x88>
    8d20:	3811883a 	mov	r8,r7
    8d24:	0007883a 	mov	r3,zero
    8d28:	40000015 	stw	zero,0(r8)
    8d2c:	18c00044 	addi	r3,r3,1
    8d30:	42000104 	addi	r8,r8,4
    8d34:	1d3ffc1e 	bne	r3,r20,8d28 <__alt_mem_Flash_flash_data+0xf4008d28>
    8d38:	18c7883a 	add	r3,r3,r3
    8d3c:	18c7883a 	add	r3,r3,r3
    8d40:	38cf883a 	add	r7,r7,r3
    8d44:	89000417 	ldw	r4,16(r17)
    8d48:	88c00504 	addi	r3,r17,20
    8d4c:	a98007cc 	andi	r6,r21,31
    8d50:	2109883a 	add	r4,r4,r4
    8d54:	2109883a 	add	r4,r4,r4
    8d58:	1909883a 	add	r4,r3,r4
    8d5c:	30002326 	beq	r6,zero,8dec <__lshift+0x130>
    8d60:	01400804 	movi	r5,32
    8d64:	298bc83a 	sub	r5,r5,r6
    8d68:	0013883a 	mov	r9,zero
    8d6c:	1a000017 	ldw	r8,0(r3)
    8d70:	3815883a 	mov	r10,r7
    8d74:	39c00104 	addi	r7,r7,4
    8d78:	4190983a 	sll	r8,r8,r6
    8d7c:	18c00104 	addi	r3,r3,4
    8d80:	4a10b03a 	or	r8,r9,r8
    8d84:	3a3fff15 	stw	r8,-4(r7)
    8d88:	1a3fff17 	ldw	r8,-4(r3)
    8d8c:	4152d83a 	srl	r9,r8,r5
    8d90:	193ff636 	bltu	r3,r4,8d6c <__alt_mem_Flash_flash_data+0xf4008d6c>
    8d94:	52400115 	stw	r9,4(r10)
    8d98:	48001a1e 	bne	r9,zero,8e04 <__lshift+0x148>
    8d9c:	843fffc4 	addi	r16,r16,-1
    8da0:	14000415 	stw	r16,16(r2)
    8da4:	88000826 	beq	r17,zero,8dc8 <__lshift+0x10c>
    8da8:	89000117 	ldw	r4,4(r17)
    8dac:	90c01317 	ldw	r3,76(r18)
    8db0:	2109883a 	add	r4,r4,r4
    8db4:	2109883a 	add	r4,r4,r4
    8db8:	1907883a 	add	r3,r3,r4
    8dbc:	19000017 	ldw	r4,0(r3)
    8dc0:	89000015 	stw	r4,0(r17)
    8dc4:	1c400015 	stw	r17,0(r3)
    8dc8:	dfc00617 	ldw	ra,24(sp)
    8dcc:	dd400517 	ldw	r21,20(sp)
    8dd0:	dd000417 	ldw	r20,16(sp)
    8dd4:	dcc00317 	ldw	r19,12(sp)
    8dd8:	dc800217 	ldw	r18,8(sp)
    8ddc:	dc400117 	ldw	r17,4(sp)
    8de0:	dc000017 	ldw	r16,0(sp)
    8de4:	dec00704 	addi	sp,sp,28
    8de8:	f800283a 	ret
    8dec:	19400017 	ldw	r5,0(r3)
    8df0:	39c00104 	addi	r7,r7,4
    8df4:	18c00104 	addi	r3,r3,4
    8df8:	397fff15 	stw	r5,-4(r7)
    8dfc:	193ffb36 	bltu	r3,r4,8dec <__alt_mem_Flash_flash_data+0xf4008dec>
    8e00:	003fe606 	br	8d9c <__alt_mem_Flash_flash_data+0xf4008d9c>
    8e04:	9c000084 	addi	r16,r19,2
    8e08:	003fe406 	br	8d9c <__alt_mem_Flash_flash_data+0xf4008d9c>

00008e0c <__mcmp>:
    8e0c:	20800417 	ldw	r2,16(r4)
    8e10:	28c00417 	ldw	r3,16(r5)
    8e14:	10c5c83a 	sub	r2,r2,r3
    8e18:	1000111e 	bne	r2,zero,8e60 <__mcmp+0x54>
    8e1c:	18c7883a 	add	r3,r3,r3
    8e20:	18c7883a 	add	r3,r3,r3
    8e24:	21000504 	addi	r4,r4,20
    8e28:	29400504 	addi	r5,r5,20
    8e2c:	20c5883a 	add	r2,r4,r3
    8e30:	28cb883a 	add	r5,r5,r3
    8e34:	00000106 	br	8e3c <__mcmp+0x30>
    8e38:	20800a2e 	bgeu	r4,r2,8e64 <__mcmp+0x58>
    8e3c:	10bfff04 	addi	r2,r2,-4
    8e40:	297fff04 	addi	r5,r5,-4
    8e44:	11800017 	ldw	r6,0(r2)
    8e48:	28c00017 	ldw	r3,0(r5)
    8e4c:	30fffa26 	beq	r6,r3,8e38 <__alt_mem_Flash_flash_data+0xf4008e38>
    8e50:	30c00236 	bltu	r6,r3,8e5c <__mcmp+0x50>
    8e54:	00800044 	movi	r2,1
    8e58:	f800283a 	ret
    8e5c:	00bfffc4 	movi	r2,-1
    8e60:	f800283a 	ret
    8e64:	0005883a 	mov	r2,zero
    8e68:	f800283a 	ret

00008e6c <__mdiff>:
    8e6c:	defffb04 	addi	sp,sp,-20
    8e70:	dc000015 	stw	r16,0(sp)
    8e74:	2821883a 	mov	r16,r5
    8e78:	dcc00315 	stw	r19,12(sp)
    8e7c:	300b883a 	mov	r5,r6
    8e80:	2027883a 	mov	r19,r4
    8e84:	8009883a 	mov	r4,r16
    8e88:	dc800215 	stw	r18,8(sp)
    8e8c:	dfc00415 	stw	ra,16(sp)
    8e90:	dc400115 	stw	r17,4(sp)
    8e94:	3025883a 	mov	r18,r6
    8e98:	0008e0c0 	call	8e0c <__mcmp>
    8e9c:	10005226 	beq	r2,zero,8fe8 <__mdiff+0x17c>
    8ea0:	10004c16 	blt	r2,zero,8fd4 <__mdiff+0x168>
    8ea4:	0023883a 	mov	r17,zero
    8ea8:	81400117 	ldw	r5,4(r16)
    8eac:	9809883a 	mov	r4,r19
    8eb0:	00085380 	call	8538 <_Balloc>
    8eb4:	83400417 	ldw	r13,16(r16)
    8eb8:	93800417 	ldw	r14,16(r18)
    8ebc:	81000504 	addi	r4,r16,20
    8ec0:	6b59883a 	add	r12,r13,r13
    8ec4:	739d883a 	add	r14,r14,r14
    8ec8:	6319883a 	add	r12,r12,r12
    8ecc:	91800504 	addi	r6,r18,20
    8ed0:	739d883a 	add	r14,r14,r14
    8ed4:	14400315 	stw	r17,12(r2)
    8ed8:	2319883a 	add	r12,r4,r12
    8edc:	339d883a 	add	r14,r6,r14
    8ee0:	12400504 	addi	r9,r2,20
    8ee4:	0007883a 	mov	r3,zero
    8ee8:	22000017 	ldw	r8,0(r4)
    8eec:	32800017 	ldw	r10,0(r6)
    8ef0:	4ac00104 	addi	r11,r9,4
    8ef4:	41ffffcc 	andi	r7,r8,65535
    8ef8:	38c7883a 	add	r3,r7,r3
    8efc:	51ffffcc 	andi	r7,r10,65535
    8f00:	19cfc83a 	sub	r7,r3,r7
    8f04:	4010d43a 	srli	r8,r8,16
    8f08:	5014d43a 	srli	r10,r10,16
    8f0c:	3807d43a 	srai	r3,r7,16
    8f10:	39ffffcc 	andi	r7,r7,65535
    8f14:	4291c83a 	sub	r8,r8,r10
    8f18:	40c7883a 	add	r3,r8,r3
    8f1c:	1810943a 	slli	r8,r3,16
    8f20:	31800104 	addi	r6,r6,4
    8f24:	21000104 	addi	r4,r4,4
    8f28:	41ceb03a 	or	r7,r8,r7
    8f2c:	49c00015 	stw	r7,0(r9)
    8f30:	1807d43a 	srai	r3,r3,16
    8f34:	580b883a 	mov	r5,r11
    8f38:	5813883a 	mov	r9,r11
    8f3c:	33bfea36 	bltu	r6,r14,8ee8 <__alt_mem_Flash_flash_data+0xf4008ee8>
    8f40:	2011883a 	mov	r8,r4
    8f44:	2300152e 	bgeu	r4,r12,8f9c <__mdiff+0x130>
    8f48:	21400017 	ldw	r5,0(r4)
    8f4c:	4a400104 	addi	r9,r9,4
    8f50:	21000104 	addi	r4,r4,4
    8f54:	29ffffcc 	andi	r7,r5,65535
    8f58:	38c7883a 	add	r3,r7,r3
    8f5c:	280ad43a 	srli	r5,r5,16
    8f60:	180dd43a 	srai	r6,r3,16
    8f64:	19ffffcc 	andi	r7,r3,65535
    8f68:	3147883a 	add	r3,r6,r5
    8f6c:	180a943a 	slli	r5,r3,16
    8f70:	1807d43a 	srai	r3,r3,16
    8f74:	29ceb03a 	or	r7,r5,r7
    8f78:	49ffff15 	stw	r7,-4(r9)
    8f7c:	233ff236 	bltu	r4,r12,8f48 <__alt_mem_Flash_flash_data+0xf4008f48>
    8f80:	0206303a 	nor	r3,zero,r8
    8f84:	1b07883a 	add	r3,r3,r12
    8f88:	1806d0ba 	srli	r3,r3,2
    8f8c:	18c00044 	addi	r3,r3,1
    8f90:	18c7883a 	add	r3,r3,r3
    8f94:	18c7883a 	add	r3,r3,r3
    8f98:	58cb883a 	add	r5,r11,r3
    8f9c:	28ffff04 	addi	r3,r5,-4
    8fa0:	3800041e 	bne	r7,zero,8fb4 <__mdiff+0x148>
    8fa4:	18ffff04 	addi	r3,r3,-4
    8fa8:	19000017 	ldw	r4,0(r3)
    8fac:	6b7fffc4 	addi	r13,r13,-1
    8fb0:	203ffc26 	beq	r4,zero,8fa4 <__alt_mem_Flash_flash_data+0xf4008fa4>
    8fb4:	13400415 	stw	r13,16(r2)
    8fb8:	dfc00417 	ldw	ra,16(sp)
    8fbc:	dcc00317 	ldw	r19,12(sp)
    8fc0:	dc800217 	ldw	r18,8(sp)
    8fc4:	dc400117 	ldw	r17,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00504 	addi	sp,sp,20
    8fd0:	f800283a 	ret
    8fd4:	8005883a 	mov	r2,r16
    8fd8:	04400044 	movi	r17,1
    8fdc:	9021883a 	mov	r16,r18
    8fe0:	1025883a 	mov	r18,r2
    8fe4:	003fb006 	br	8ea8 <__alt_mem_Flash_flash_data+0xf4008ea8>
    8fe8:	9809883a 	mov	r4,r19
    8fec:	000b883a 	mov	r5,zero
    8ff0:	00085380 	call	8538 <_Balloc>
    8ff4:	00c00044 	movi	r3,1
    8ff8:	10c00415 	stw	r3,16(r2)
    8ffc:	10000515 	stw	zero,20(r2)
    9000:	003fed06 	br	8fb8 <__alt_mem_Flash_flash_data+0xf4008fb8>

00009004 <__ulp>:
    9004:	295ffc2c 	andhi	r5,r5,32752
    9008:	00bf3034 	movhi	r2,64704
    900c:	2887883a 	add	r3,r5,r2
    9010:	00c0020e 	bge	zero,r3,901c <__ulp+0x18>
    9014:	0005883a 	mov	r2,zero
    9018:	f800283a 	ret
    901c:	00c7c83a 	sub	r3,zero,r3
    9020:	180bd53a 	srai	r5,r3,20
    9024:	008004c4 	movi	r2,19
    9028:	11400a0e 	bge	r2,r5,9054 <__ulp+0x50>
    902c:	00800c84 	movi	r2,50
    9030:	0007883a 	mov	r3,zero
    9034:	11400516 	blt	r2,r5,904c <__ulp+0x48>
    9038:	00800cc4 	movi	r2,51
    903c:	114bc83a 	sub	r5,r2,r5
    9040:	00800044 	movi	r2,1
    9044:	1144983a 	sll	r2,r2,r5
    9048:	f800283a 	ret
    904c:	00800044 	movi	r2,1
    9050:	f800283a 	ret
    9054:	00800234 	movhi	r2,8
    9058:	1147d83a 	sra	r3,r2,r5
    905c:	0005883a 	mov	r2,zero
    9060:	f800283a 	ret

00009064 <__b2d>:
    9064:	defffa04 	addi	sp,sp,-24
    9068:	dc000015 	stw	r16,0(sp)
    906c:	24000417 	ldw	r16,16(r4)
    9070:	dc400115 	stw	r17,4(sp)
    9074:	24400504 	addi	r17,r4,20
    9078:	8421883a 	add	r16,r16,r16
    907c:	8421883a 	add	r16,r16,r16
    9080:	8c21883a 	add	r16,r17,r16
    9084:	dc800215 	stw	r18,8(sp)
    9088:	84bfff17 	ldw	r18,-4(r16)
    908c:	dd000415 	stw	r20,16(sp)
    9090:	dcc00315 	stw	r19,12(sp)
    9094:	9009883a 	mov	r4,r18
    9098:	2829883a 	mov	r20,r5
    909c:	dfc00515 	stw	ra,20(sp)
    90a0:	000882c0 	call	882c <__hi0bits>
    90a4:	00c00804 	movi	r3,32
    90a8:	1887c83a 	sub	r3,r3,r2
    90ac:	a0c00015 	stw	r3,0(r20)
    90b0:	00c00284 	movi	r3,10
    90b4:	84ffff04 	addi	r19,r16,-4
    90b8:	18801216 	blt	r3,r2,9104 <__b2d+0xa0>
    90bc:	014002c4 	movi	r5,11
    90c0:	2889c83a 	sub	r4,r5,r2
    90c4:	9106d83a 	srl	r3,r18,r4
    90c8:	18cffc34 	orhi	r3,r3,16368
    90cc:	8cc0282e 	bgeu	r17,r19,9170 <__b2d+0x10c>
    90d0:	817ffe17 	ldw	r5,-8(r16)
    90d4:	290ad83a 	srl	r5,r5,r4
    90d8:	10800544 	addi	r2,r2,21
    90dc:	9084983a 	sll	r2,r18,r2
    90e0:	2884b03a 	or	r2,r5,r2
    90e4:	dfc00517 	ldw	ra,20(sp)
    90e8:	dd000417 	ldw	r20,16(sp)
    90ec:	dcc00317 	ldw	r19,12(sp)
    90f0:	dc800217 	ldw	r18,8(sp)
    90f4:	dc400117 	ldw	r17,4(sp)
    90f8:	dc000017 	ldw	r16,0(sp)
    90fc:	dec00604 	addi	sp,sp,24
    9100:	f800283a 	ret
    9104:	113ffd44 	addi	r4,r2,-11
    9108:	8cc00f2e 	bgeu	r17,r19,9148 <__b2d+0xe4>
    910c:	81bffe04 	addi	r6,r16,-8
    9110:	817ffe17 	ldw	r5,-8(r16)
    9114:	20001326 	beq	r4,zero,9164 <__b2d+0x100>
    9118:	00c00ac4 	movi	r3,43
    911c:	1885c83a 	sub	r2,r3,r2
    9120:	2886d83a 	srl	r3,r5,r2
    9124:	9124983a 	sll	r18,r18,r4
    9128:	90e4b03a 	or	r18,r18,r3
    912c:	90cffc34 	orhi	r3,r18,16368
    9130:	8980112e 	bgeu	r17,r6,9178 <__b2d+0x114>
    9134:	81bffd17 	ldw	r6,-12(r16)
    9138:	308cd83a 	srl	r6,r6,r2
    913c:	2904983a 	sll	r2,r5,r4
    9140:	1184b03a 	or	r2,r2,r6
    9144:	003fe706 	br	90e4 <__alt_mem_Flash_flash_data+0xf40090e4>
    9148:	20000526 	beq	r4,zero,9160 <__b2d+0xfc>
    914c:	9124983a 	sll	r18,r18,r4
    9150:	000d883a 	mov	r6,zero
    9154:	000b883a 	mov	r5,zero
    9158:	90cffc34 	orhi	r3,r18,16368
    915c:	003ff706 	br	913c <__alt_mem_Flash_flash_data+0xf400913c>
    9160:	000b883a 	mov	r5,zero
    9164:	90cffc34 	orhi	r3,r18,16368
    9168:	2805883a 	mov	r2,r5
    916c:	003fdd06 	br	90e4 <__alt_mem_Flash_flash_data+0xf40090e4>
    9170:	000b883a 	mov	r5,zero
    9174:	003fd806 	br	90d8 <__alt_mem_Flash_flash_data+0xf40090d8>
    9178:	000d883a 	mov	r6,zero
    917c:	003fef06 	br	913c <__alt_mem_Flash_flash_data+0xf400913c>

00009180 <__d2b>:
    9180:	defff704 	addi	sp,sp,-36
    9184:	dc000215 	stw	r16,8(sp)
    9188:	3021883a 	mov	r16,r6
    918c:	dc400315 	stw	r17,12(sp)
    9190:	8022907a 	slli	r17,r16,1
    9194:	dd400715 	stw	r21,28(sp)
    9198:	282b883a 	mov	r21,r5
    919c:	01400044 	movi	r5,1
    91a0:	dd000615 	stw	r20,24(sp)
    91a4:	dcc00515 	stw	r19,20(sp)
    91a8:	dc800415 	stw	r18,16(sp)
    91ac:	dfc00815 	stw	ra,32(sp)
    91b0:	3829883a 	mov	r20,r7
    91b4:	dc800917 	ldw	r18,36(sp)
    91b8:	8822d57a 	srli	r17,r17,21
    91bc:	00085380 	call	8538 <_Balloc>
    91c0:	1027883a 	mov	r19,r2
    91c4:	00800434 	movhi	r2,16
    91c8:	10bfffc4 	addi	r2,r2,-1
    91cc:	808c703a 	and	r6,r16,r2
    91d0:	88000126 	beq	r17,zero,91d8 <__d2b+0x58>
    91d4:	31800434 	orhi	r6,r6,16
    91d8:	d9800015 	stw	r6,0(sp)
    91dc:	a8001f26 	beq	r21,zero,925c <__d2b+0xdc>
    91e0:	d9000104 	addi	r4,sp,4
    91e4:	dd400115 	stw	r21,4(sp)
    91e8:	00088940 	call	8894 <__lo0bits>
    91ec:	d8c00017 	ldw	r3,0(sp)
    91f0:	1000291e 	bne	r2,zero,9298 <__d2b+0x118>
    91f4:	d9000117 	ldw	r4,4(sp)
    91f8:	99000515 	stw	r4,20(r19)
    91fc:	1820c03a 	cmpne	r16,r3,zero
    9200:	84000044 	addi	r16,r16,1
    9204:	98c00615 	stw	r3,24(r19)
    9208:	9c000415 	stw	r16,16(r19)
    920c:	88001b1e 	bne	r17,zero,927c <__d2b+0xfc>
    9210:	800690ba 	slli	r3,r16,2
    9214:	10bef384 	addi	r2,r2,-1074
    9218:	a0800015 	stw	r2,0(r20)
    921c:	98c5883a 	add	r2,r19,r3
    9220:	11000417 	ldw	r4,16(r2)
    9224:	8020917a 	slli	r16,r16,5
    9228:	000882c0 	call	882c <__hi0bits>
    922c:	8085c83a 	sub	r2,r16,r2
    9230:	90800015 	stw	r2,0(r18)
    9234:	9805883a 	mov	r2,r19
    9238:	dfc00817 	ldw	ra,32(sp)
    923c:	dd400717 	ldw	r21,28(sp)
    9240:	dd000617 	ldw	r20,24(sp)
    9244:	dcc00517 	ldw	r19,20(sp)
    9248:	dc800417 	ldw	r18,16(sp)
    924c:	dc400317 	ldw	r17,12(sp)
    9250:	dc000217 	ldw	r16,8(sp)
    9254:	dec00904 	addi	sp,sp,36
    9258:	f800283a 	ret
    925c:	d809883a 	mov	r4,sp
    9260:	00088940 	call	8894 <__lo0bits>
    9264:	d8c00017 	ldw	r3,0(sp)
    9268:	04000044 	movi	r16,1
    926c:	9c000415 	stw	r16,16(r19)
    9270:	98c00515 	stw	r3,20(r19)
    9274:	10800804 	addi	r2,r2,32
    9278:	883fe526 	beq	r17,zero,9210 <__alt_mem_Flash_flash_data+0xf4009210>
    927c:	8c7ef344 	addi	r17,r17,-1075
    9280:	88a3883a 	add	r17,r17,r2
    9284:	00c00d44 	movi	r3,53
    9288:	a4400015 	stw	r17,0(r20)
    928c:	1885c83a 	sub	r2,r3,r2
    9290:	90800015 	stw	r2,0(r18)
    9294:	003fe706 	br	9234 <__alt_mem_Flash_flash_data+0xf4009234>
    9298:	01000804 	movi	r4,32
    929c:	2089c83a 	sub	r4,r4,r2
    92a0:	1908983a 	sll	r4,r3,r4
    92a4:	d9400117 	ldw	r5,4(sp)
    92a8:	1886d83a 	srl	r3,r3,r2
    92ac:	2148b03a 	or	r4,r4,r5
    92b0:	99000515 	stw	r4,20(r19)
    92b4:	d8c00015 	stw	r3,0(sp)
    92b8:	003fd006 	br	91fc <__alt_mem_Flash_flash_data+0xf40091fc>

000092bc <__ratio>:
    92bc:	defff904 	addi	sp,sp,-28
    92c0:	dc400315 	stw	r17,12(sp)
    92c4:	2823883a 	mov	r17,r5
    92c8:	d9400104 	addi	r5,sp,4
    92cc:	dfc00615 	stw	ra,24(sp)
    92d0:	dcc00515 	stw	r19,20(sp)
    92d4:	dc800415 	stw	r18,16(sp)
    92d8:	2027883a 	mov	r19,r4
    92dc:	dc000215 	stw	r16,8(sp)
    92e0:	00090640 	call	9064 <__b2d>
    92e4:	8809883a 	mov	r4,r17
    92e8:	d80b883a 	mov	r5,sp
    92ec:	1025883a 	mov	r18,r2
    92f0:	1821883a 	mov	r16,r3
    92f4:	00090640 	call	9064 <__b2d>
    92f8:	8a400417 	ldw	r9,16(r17)
    92fc:	9a000417 	ldw	r8,16(r19)
    9300:	100d883a 	mov	r6,r2
    9304:	d8800017 	ldw	r2,0(sp)
    9308:	4251c83a 	sub	r8,r8,r9
    930c:	4012917a 	slli	r9,r8,5
    9310:	da000117 	ldw	r8,4(sp)
    9314:	4091c83a 	sub	r8,r8,r2
    9318:	4251883a 	add	r8,r8,r9
    931c:	02000d0e 	bge	zero,r8,9354 <__ratio+0x98>
    9320:	4010953a 	slli	r8,r8,20
    9324:	4421883a 	add	r16,r8,r16
    9328:	9009883a 	mov	r4,r18
    932c:	800b883a 	mov	r5,r16
    9330:	180f883a 	mov	r7,r3
    9334:	000e11c0 	call	e11c <__divdf3>
    9338:	dfc00617 	ldw	ra,24(sp)
    933c:	dcc00517 	ldw	r19,20(sp)
    9340:	dc800417 	ldw	r18,16(sp)
    9344:	dc400317 	ldw	r17,12(sp)
    9348:	dc000217 	ldw	r16,8(sp)
    934c:	dec00704 	addi	sp,sp,28
    9350:	f800283a 	ret
    9354:	4010953a 	slli	r8,r8,20
    9358:	1a07c83a 	sub	r3,r3,r8
    935c:	003ff206 	br	9328 <__alt_mem_Flash_flash_data+0xf4009328>

00009360 <_mprec_log10>:
    9360:	defffe04 	addi	sp,sp,-8
    9364:	dc000015 	stw	r16,0(sp)
    9368:	dfc00115 	stw	ra,4(sp)
    936c:	008005c4 	movi	r2,23
    9370:	2021883a 	mov	r16,r4
    9374:	11000d0e 	bge	r2,r4,93ac <_mprec_log10+0x4c>
    9378:	0005883a 	mov	r2,zero
    937c:	00cffc34 	movhi	r3,16368
    9380:	843fffc4 	addi	r16,r16,-1
    9384:	1009883a 	mov	r4,r2
    9388:	180b883a 	mov	r5,r3
    938c:	000d883a 	mov	r6,zero
    9390:	01d00934 	movhi	r7,16420
    9394:	000ec2c0 	call	ec2c <__muldf3>
    9398:	803ff91e 	bne	r16,zero,9380 <__alt_mem_Flash_flash_data+0xf4009380>
    939c:	dfc00117 	ldw	ra,4(sp)
    93a0:	dc000017 	ldw	r16,0(sp)
    93a4:	dec00204 	addi	sp,sp,8
    93a8:	f800283a 	ret
    93ac:	202090fa 	slli	r16,r4,3
    93b0:	008000b4 	movhi	r2,2
    93b4:	10b1b004 	addi	r2,r2,-14656
    93b8:	1421883a 	add	r16,r2,r16
    93bc:	80800017 	ldw	r2,0(r16)
    93c0:	80c00117 	ldw	r3,4(r16)
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	dc000017 	ldw	r16,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <__copybits>:
    93d4:	297fffc4 	addi	r5,r5,-1
    93d8:	280fd17a 	srai	r7,r5,5
    93dc:	30c00417 	ldw	r3,16(r6)
    93e0:	30800504 	addi	r2,r6,20
    93e4:	39c00044 	addi	r7,r7,1
    93e8:	18c7883a 	add	r3,r3,r3
    93ec:	39cf883a 	add	r7,r7,r7
    93f0:	18c7883a 	add	r3,r3,r3
    93f4:	39cf883a 	add	r7,r7,r7
    93f8:	10c7883a 	add	r3,r2,r3
    93fc:	21cf883a 	add	r7,r4,r7
    9400:	10c00d2e 	bgeu	r2,r3,9438 <__copybits+0x64>
    9404:	200b883a 	mov	r5,r4
    9408:	12000017 	ldw	r8,0(r2)
    940c:	29400104 	addi	r5,r5,4
    9410:	10800104 	addi	r2,r2,4
    9414:	2a3fff15 	stw	r8,-4(r5)
    9418:	10fffb36 	bltu	r2,r3,9408 <__alt_mem_Flash_flash_data+0xf4009408>
    941c:	1985c83a 	sub	r2,r3,r6
    9420:	10bffac4 	addi	r2,r2,-21
    9424:	1004d0ba 	srli	r2,r2,2
    9428:	10800044 	addi	r2,r2,1
    942c:	1085883a 	add	r2,r2,r2
    9430:	1085883a 	add	r2,r2,r2
    9434:	2089883a 	add	r4,r4,r2
    9438:	21c0032e 	bgeu	r4,r7,9448 <__copybits+0x74>
    943c:	20000015 	stw	zero,0(r4)
    9440:	21000104 	addi	r4,r4,4
    9444:	21fffd36 	bltu	r4,r7,943c <__alt_mem_Flash_flash_data+0xf400943c>
    9448:	f800283a 	ret

0000944c <__any_on>:
    944c:	20c00417 	ldw	r3,16(r4)
    9450:	2805d17a 	srai	r2,r5,5
    9454:	21000504 	addi	r4,r4,20
    9458:	18800d0e 	bge	r3,r2,9490 <__any_on+0x44>
    945c:	18c7883a 	add	r3,r3,r3
    9460:	18c7883a 	add	r3,r3,r3
    9464:	20c7883a 	add	r3,r4,r3
    9468:	20c0192e 	bgeu	r4,r3,94d0 <__any_on+0x84>
    946c:	18bfff17 	ldw	r2,-4(r3)
    9470:	18ffff04 	addi	r3,r3,-4
    9474:	1000041e 	bne	r2,zero,9488 <__any_on+0x3c>
    9478:	20c0142e 	bgeu	r4,r3,94cc <__any_on+0x80>
    947c:	18ffff04 	addi	r3,r3,-4
    9480:	19400017 	ldw	r5,0(r3)
    9484:	283ffc26 	beq	r5,zero,9478 <__alt_mem_Flash_flash_data+0xf4009478>
    9488:	00800044 	movi	r2,1
    948c:	f800283a 	ret
    9490:	10c00a0e 	bge	r2,r3,94bc <__any_on+0x70>
    9494:	1085883a 	add	r2,r2,r2
    9498:	1085883a 	add	r2,r2,r2
    949c:	294007cc 	andi	r5,r5,31
    94a0:	2087883a 	add	r3,r4,r2
    94a4:	283ff026 	beq	r5,zero,9468 <__alt_mem_Flash_flash_data+0xf4009468>
    94a8:	19800017 	ldw	r6,0(r3)
    94ac:	3144d83a 	srl	r2,r6,r5
    94b0:	114a983a 	sll	r5,r2,r5
    94b4:	29bff41e 	bne	r5,r6,9488 <__alt_mem_Flash_flash_data+0xf4009488>
    94b8:	003feb06 	br	9468 <__alt_mem_Flash_flash_data+0xf4009468>
    94bc:	1085883a 	add	r2,r2,r2
    94c0:	1085883a 	add	r2,r2,r2
    94c4:	2087883a 	add	r3,r4,r2
    94c8:	003fe706 	br	9468 <__alt_mem_Flash_flash_data+0xf4009468>
    94cc:	f800283a 	ret
    94d0:	0005883a 	mov	r2,zero
    94d4:	f800283a 	ret

000094d8 <_realloc_r>:
    94d8:	defff604 	addi	sp,sp,-40
    94dc:	dd000415 	stw	r20,16(sp)
    94e0:	dc400115 	stw	r17,4(sp)
    94e4:	dfc00915 	stw	ra,36(sp)
    94e8:	df000815 	stw	fp,32(sp)
    94ec:	ddc00715 	stw	r23,28(sp)
    94f0:	dd800615 	stw	r22,24(sp)
    94f4:	dd400515 	stw	r21,20(sp)
    94f8:	dcc00315 	stw	r19,12(sp)
    94fc:	dc800215 	stw	r18,8(sp)
    9500:	dc000015 	stw	r16,0(sp)
    9504:	2829883a 	mov	r20,r5
    9508:	3023883a 	mov	r17,r6
    950c:	2800ad26 	beq	r5,zero,97c4 <_realloc_r+0x2ec>
    9510:	2025883a 	mov	r18,r4
    9514:	001095c0 	call	1095c <__malloc_lock>
    9518:	a0ffff17 	ldw	r3,-4(r20)
    951c:	043fff04 	movi	r16,-4
    9520:	890002c4 	addi	r4,r17,11
    9524:	01c00584 	movi	r7,22
    9528:	a57ffe04 	addi	r21,r20,-8
    952c:	1c20703a 	and	r16,r3,r16
    9530:	39001d2e 	bgeu	r7,r4,95a8 <_realloc_r+0xd0>
    9534:	05bffe04 	movi	r22,-8
    9538:	25ac703a 	and	r22,r4,r22
    953c:	b00f883a 	mov	r7,r22
    9540:	b0006516 	blt	r22,zero,96d8 <_realloc_r+0x200>
    9544:	b4406436 	bltu	r22,r17,96d8 <_realloc_r+0x200>
    9548:	81c01a0e 	bge	r16,r7,95b4 <_realloc_r+0xdc>
    954c:	070000b4 	movhi	fp,2
    9550:	e7341c04 	addi	fp,fp,-12176
    9554:	e1400217 	ldw	r5,8(fp)
    9558:	ac11883a 	add	r8,r21,r16
    955c:	2a006226 	beq	r5,r8,96e8 <_realloc_r+0x210>
    9560:	41800117 	ldw	r6,4(r8)
    9564:	027fff84 	movi	r9,-2
    9568:	3252703a 	and	r9,r6,r9
    956c:	4253883a 	add	r9,r8,r9
    9570:	49000117 	ldw	r4,4(r9)
    9574:	2100004c 	andi	r4,r4,1
    9578:	2000281e 	bne	r4,zero,961c <_realloc_r+0x144>
    957c:	00bfff04 	movi	r2,-4
    9580:	3084703a 	and	r2,r6,r2
    9584:	1409883a 	add	r4,r2,r16
    9588:	21c05e16 	blt	r4,r7,9704 <_realloc_r+0x22c>
    958c:	40800317 	ldw	r2,12(r8)
    9590:	41400217 	ldw	r5,8(r8)
    9594:	a023883a 	mov	r17,r20
    9598:	2021883a 	mov	r16,r4
    959c:	28800315 	stw	r2,12(r5)
    95a0:	11400215 	stw	r5,8(r2)
    95a4:	00000406 	br	95b8 <_realloc_r+0xe0>
    95a8:	01c00404 	movi	r7,16
    95ac:	382d883a 	mov	r22,r7
    95b0:	003fe406 	br	9544 <__alt_mem_Flash_flash_data+0xf4009544>
    95b4:	a023883a 	mov	r17,r20
    95b8:	858fc83a 	sub	r7,r16,r22
    95bc:	008003c4 	movi	r2,15
    95c0:	18c0004c 	andi	r3,r3,1
    95c4:	11c07236 	bltu	r2,r7,9790 <_realloc_r+0x2b8>
    95c8:	1c06b03a 	or	r3,r3,r16
    95cc:	a8c00115 	stw	r3,4(r21)
    95d0:	ac21883a 	add	r16,r21,r16
    95d4:	80800117 	ldw	r2,4(r16)
    95d8:	10800054 	ori	r2,r2,1
    95dc:	80800115 	stw	r2,4(r16)
    95e0:	9009883a 	mov	r4,r18
    95e4:	0010a7c0 	call	10a7c <__malloc_unlock>
    95e8:	8805883a 	mov	r2,r17
    95ec:	dfc00917 	ldw	ra,36(sp)
    95f0:	df000817 	ldw	fp,32(sp)
    95f4:	ddc00717 	ldw	r23,28(sp)
    95f8:	dd800617 	ldw	r22,24(sp)
    95fc:	dd400517 	ldw	r21,20(sp)
    9600:	dd000417 	ldw	r20,16(sp)
    9604:	dcc00317 	ldw	r19,12(sp)
    9608:	dc800217 	ldw	r18,8(sp)
    960c:	dc400117 	ldw	r17,4(sp)
    9610:	dc000017 	ldw	r16,0(sp)
    9614:	dec00a04 	addi	sp,sp,40
    9618:	f800283a 	ret
    961c:	18c0004c 	andi	r3,r3,1
    9620:	1800081e 	bne	r3,zero,9644 <_realloc_r+0x16c>
    9624:	a4fffe17 	ldw	r19,-8(r20)
    9628:	00bfff04 	movi	r2,-4
    962c:	ace7c83a 	sub	r19,r21,r19
    9630:	98c00117 	ldw	r3,4(r19)
    9634:	1886703a 	and	r3,r3,r2
    9638:	98000226 	beq	r19,zero,9644 <_realloc_r+0x16c>
    963c:	1c2f883a 	add	r23,r3,r16
    9640:	b9c06d0e 	bge	r23,r7,97f8 <_realloc_r+0x320>
    9644:	880b883a 	mov	r5,r17
    9648:	9009883a 	mov	r4,r18
    964c:	0007a140 	call	7a14 <_malloc_r>
    9650:	1023883a 	mov	r17,r2
    9654:	1000ef26 	beq	r2,zero,9a14 <_realloc_r+0x53c>
    9658:	a0ffff17 	ldw	r3,-4(r20)
    965c:	113ffe04 	addi	r4,r2,-8
    9660:	00bfff84 	movi	r2,-2
    9664:	1884703a 	and	r2,r3,r2
    9668:	a885883a 	add	r2,r21,r2
    966c:	2080bf26 	beq	r4,r2,996c <_realloc_r+0x494>
    9670:	81bfff04 	addi	r6,r16,-4
    9674:	00800904 	movi	r2,36
    9678:	11808936 	bltu	r2,r6,98a0 <_realloc_r+0x3c8>
    967c:	00c004c4 	movi	r3,19
    9680:	19806c2e 	bgeu	r3,r6,9834 <_realloc_r+0x35c>
    9684:	a0c00017 	ldw	r3,0(r20)
    9688:	88c00015 	stw	r3,0(r17)
    968c:	a0c00117 	ldw	r3,4(r20)
    9690:	88c00115 	stw	r3,4(r17)
    9694:	00c006c4 	movi	r3,27
    9698:	1980ac36 	bltu	r3,r6,994c <_realloc_r+0x474>
    969c:	88800204 	addi	r2,r17,8
    96a0:	a0c00204 	addi	r3,r20,8
    96a4:	19000017 	ldw	r4,0(r3)
    96a8:	11000015 	stw	r4,0(r2)
    96ac:	19000117 	ldw	r4,4(r3)
    96b0:	11000115 	stw	r4,4(r2)
    96b4:	18c00217 	ldw	r3,8(r3)
    96b8:	10c00215 	stw	r3,8(r2)
    96bc:	a00b883a 	mov	r5,r20
    96c0:	9009883a 	mov	r4,r18
    96c4:	0006e440 	call	6e44 <_free_r>
    96c8:	9009883a 	mov	r4,r18
    96cc:	0010a7c0 	call	10a7c <__malloc_unlock>
    96d0:	8805883a 	mov	r2,r17
    96d4:	003fc506 	br	95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    96d8:	00800304 	movi	r2,12
    96dc:	90800015 	stw	r2,0(r18)
    96e0:	0005883a 	mov	r2,zero
    96e4:	003fc106 	br	95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    96e8:	29800117 	ldw	r6,4(r5)
    96ec:	00bfff04 	movi	r2,-4
    96f0:	b1000404 	addi	r4,r22,16
    96f4:	3084703a 	and	r2,r6,r2
    96f8:	140d883a 	add	r6,r2,r16
    96fc:	31005b0e 	bge	r6,r4,986c <_realloc_r+0x394>
    9700:	2811883a 	mov	r8,r5
    9704:	18c0004c 	andi	r3,r3,1
    9708:	183fce1e 	bne	r3,zero,9644 <__alt_mem_Flash_flash_data+0xf4009644>
    970c:	a4fffe17 	ldw	r19,-8(r20)
    9710:	00ffff04 	movi	r3,-4
    9714:	ace7c83a 	sub	r19,r21,r19
    9718:	99000117 	ldw	r4,4(r19)
    971c:	20c6703a 	and	r3,r4,r3
    9720:	403fc526 	beq	r8,zero,9638 <__alt_mem_Flash_flash_data+0xf4009638>
    9724:	1c2f883a 	add	r23,r3,r16
    9728:	b8af883a 	add	r23,r23,r2
    972c:	41406026 	beq	r8,r5,98b0 <_realloc_r+0x3d8>
    9730:	b9ffc116 	blt	r23,r7,9638 <__alt_mem_Flash_flash_data+0xf4009638>
    9734:	40c00217 	ldw	r3,8(r8)
    9738:	40800317 	ldw	r2,12(r8)
    973c:	81bfff04 	addi	r6,r16,-4
    9740:	01000904 	movi	r4,36
    9744:	18800315 	stw	r2,12(r3)
    9748:	10c00215 	stw	r3,8(r2)
    974c:	99400217 	ldw	r5,8(r19)
    9750:	98c00317 	ldw	r3,12(r19)
    9754:	9c400204 	addi	r17,r19,8
    9758:	28c00315 	stw	r3,12(r5)
    975c:	19400215 	stw	r5,8(r3)
    9760:	21802d36 	bltu	r4,r6,9818 <_realloc_r+0x340>
    9764:	008004c4 	movi	r2,19
    9768:	1180352e 	bgeu	r2,r6,9840 <_realloc_r+0x368>
    976c:	a0800017 	ldw	r2,0(r20)
    9770:	98800215 	stw	r2,8(r19)
    9774:	a0800117 	ldw	r2,4(r20)
    9778:	98800315 	stw	r2,12(r19)
    977c:	008006c4 	movi	r2,27
    9780:	11808036 	bltu	r2,r6,9984 <_realloc_r+0x4ac>
    9784:	98c00404 	addi	r3,r19,16
    9788:	a5000204 	addi	r20,r20,8
    978c:	00002d06 	br	9844 <_realloc_r+0x36c>
    9790:	1d86b03a 	or	r3,r3,r22
    9794:	ad8b883a 	add	r5,r21,r22
    9798:	a8c00115 	stw	r3,4(r21)
    979c:	38800054 	ori	r2,r7,1
    97a0:	28800115 	stw	r2,4(r5)
    97a4:	29cf883a 	add	r7,r5,r7
    97a8:	38800117 	ldw	r2,4(r7)
    97ac:	9009883a 	mov	r4,r18
    97b0:	29400204 	addi	r5,r5,8
    97b4:	10800054 	ori	r2,r2,1
    97b8:	38800115 	stw	r2,4(r7)
    97bc:	0006e440 	call	6e44 <_free_r>
    97c0:	003f8706 	br	95e0 <__alt_mem_Flash_flash_data+0xf40095e0>
    97c4:	300b883a 	mov	r5,r6
    97c8:	dfc00917 	ldw	ra,36(sp)
    97cc:	df000817 	ldw	fp,32(sp)
    97d0:	ddc00717 	ldw	r23,28(sp)
    97d4:	dd800617 	ldw	r22,24(sp)
    97d8:	dd400517 	ldw	r21,20(sp)
    97dc:	dd000417 	ldw	r20,16(sp)
    97e0:	dcc00317 	ldw	r19,12(sp)
    97e4:	dc800217 	ldw	r18,8(sp)
    97e8:	dc400117 	ldw	r17,4(sp)
    97ec:	dc000017 	ldw	r16,0(sp)
    97f0:	dec00a04 	addi	sp,sp,40
    97f4:	0007a141 	jmpi	7a14 <_malloc_r>
    97f8:	98800317 	ldw	r2,12(r19)
    97fc:	98c00217 	ldw	r3,8(r19)
    9800:	81bfff04 	addi	r6,r16,-4
    9804:	01000904 	movi	r4,36
    9808:	18800315 	stw	r2,12(r3)
    980c:	10c00215 	stw	r3,8(r2)
    9810:	9c400204 	addi	r17,r19,8
    9814:	21bfd32e 	bgeu	r4,r6,9764 <__alt_mem_Flash_flash_data+0xf4009764>
    9818:	8809883a 	mov	r4,r17
    981c:	a00b883a 	mov	r5,r20
    9820:	00083dc0 	call	83dc <memmove>
    9824:	98c00117 	ldw	r3,4(r19)
    9828:	b821883a 	mov	r16,r23
    982c:	982b883a 	mov	r21,r19
    9830:	003f6106 	br	95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    9834:	8805883a 	mov	r2,r17
    9838:	a007883a 	mov	r3,r20
    983c:	003f9906 	br	96a4 <__alt_mem_Flash_flash_data+0xf40096a4>
    9840:	8807883a 	mov	r3,r17
    9844:	a0800017 	ldw	r2,0(r20)
    9848:	b821883a 	mov	r16,r23
    984c:	982b883a 	mov	r21,r19
    9850:	18800015 	stw	r2,0(r3)
    9854:	a0800117 	ldw	r2,4(r20)
    9858:	18800115 	stw	r2,4(r3)
    985c:	a0800217 	ldw	r2,8(r20)
    9860:	18800215 	stw	r2,8(r3)
    9864:	98c00117 	ldw	r3,4(r19)
    9868:	003f5306 	br	95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    986c:	adab883a 	add	r21,r21,r22
    9870:	3585c83a 	sub	r2,r6,r22
    9874:	e5400215 	stw	r21,8(fp)
    9878:	10800054 	ori	r2,r2,1
    987c:	a8800115 	stw	r2,4(r21)
    9880:	a0bfff17 	ldw	r2,-4(r20)
    9884:	9009883a 	mov	r4,r18
    9888:	1080004c 	andi	r2,r2,1
    988c:	b0acb03a 	or	r22,r22,r2
    9890:	a5bfff15 	stw	r22,-4(r20)
    9894:	0010a7c0 	call	10a7c <__malloc_unlock>
    9898:	a005883a 	mov	r2,r20
    989c:	003f5306 	br	95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    98a0:	8809883a 	mov	r4,r17
    98a4:	a00b883a 	mov	r5,r20
    98a8:	00083dc0 	call	83dc <memmove>
    98ac:	003f8306 	br	96bc <__alt_mem_Flash_flash_data+0xf40096bc>
    98b0:	b0800404 	addi	r2,r22,16
    98b4:	b8bf6016 	blt	r23,r2,9638 <__alt_mem_Flash_flash_data+0xf4009638>
    98b8:	98800317 	ldw	r2,12(r19)
    98bc:	98c00217 	ldw	r3,8(r19)
    98c0:	81bfff04 	addi	r6,r16,-4
    98c4:	01000904 	movi	r4,36
    98c8:	18800315 	stw	r2,12(r3)
    98cc:	10c00215 	stw	r3,8(r2)
    98d0:	9c400204 	addi	r17,r19,8
    98d4:	21804336 	bltu	r4,r6,99e4 <_realloc_r+0x50c>
    98d8:	008004c4 	movi	r2,19
    98dc:	11803f2e 	bgeu	r2,r6,99dc <_realloc_r+0x504>
    98e0:	a0800017 	ldw	r2,0(r20)
    98e4:	98800215 	stw	r2,8(r19)
    98e8:	a0800117 	ldw	r2,4(r20)
    98ec:	98800315 	stw	r2,12(r19)
    98f0:	008006c4 	movi	r2,27
    98f4:	11803f36 	bltu	r2,r6,99f4 <_realloc_r+0x51c>
    98f8:	98800404 	addi	r2,r19,16
    98fc:	a5000204 	addi	r20,r20,8
    9900:	a0c00017 	ldw	r3,0(r20)
    9904:	10c00015 	stw	r3,0(r2)
    9908:	a0c00117 	ldw	r3,4(r20)
    990c:	10c00115 	stw	r3,4(r2)
    9910:	a0c00217 	ldw	r3,8(r20)
    9914:	10c00215 	stw	r3,8(r2)
    9918:	9d87883a 	add	r3,r19,r22
    991c:	bd85c83a 	sub	r2,r23,r22
    9920:	e0c00215 	stw	r3,8(fp)
    9924:	10800054 	ori	r2,r2,1
    9928:	18800115 	stw	r2,4(r3)
    992c:	98800117 	ldw	r2,4(r19)
    9930:	9009883a 	mov	r4,r18
    9934:	1080004c 	andi	r2,r2,1
    9938:	b0acb03a 	or	r22,r22,r2
    993c:	9d800115 	stw	r22,4(r19)
    9940:	0010a7c0 	call	10a7c <__malloc_unlock>
    9944:	8805883a 	mov	r2,r17
    9948:	003f2806 	br	95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    994c:	a0c00217 	ldw	r3,8(r20)
    9950:	88c00215 	stw	r3,8(r17)
    9954:	a0c00317 	ldw	r3,12(r20)
    9958:	88c00315 	stw	r3,12(r17)
    995c:	30801126 	beq	r6,r2,99a4 <_realloc_r+0x4cc>
    9960:	88800404 	addi	r2,r17,16
    9964:	a0c00404 	addi	r3,r20,16
    9968:	003f4e06 	br	96a4 <__alt_mem_Flash_flash_data+0xf40096a4>
    996c:	893fff17 	ldw	r4,-4(r17)
    9970:	00bfff04 	movi	r2,-4
    9974:	a023883a 	mov	r17,r20
    9978:	2084703a 	and	r2,r4,r2
    997c:	80a1883a 	add	r16,r16,r2
    9980:	003f0d06 	br	95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    9984:	a0800217 	ldw	r2,8(r20)
    9988:	98800415 	stw	r2,16(r19)
    998c:	a0800317 	ldw	r2,12(r20)
    9990:	98800515 	stw	r2,20(r19)
    9994:	31000a26 	beq	r6,r4,99c0 <_realloc_r+0x4e8>
    9998:	98c00604 	addi	r3,r19,24
    999c:	a5000404 	addi	r20,r20,16
    99a0:	003fa806 	br	9844 <__alt_mem_Flash_flash_data+0xf4009844>
    99a4:	a1000417 	ldw	r4,16(r20)
    99a8:	88800604 	addi	r2,r17,24
    99ac:	a0c00604 	addi	r3,r20,24
    99b0:	89000415 	stw	r4,16(r17)
    99b4:	a1000517 	ldw	r4,20(r20)
    99b8:	89000515 	stw	r4,20(r17)
    99bc:	003f3906 	br	96a4 <__alt_mem_Flash_flash_data+0xf40096a4>
    99c0:	a0800417 	ldw	r2,16(r20)
    99c4:	a5000604 	addi	r20,r20,24
    99c8:	98c00804 	addi	r3,r19,32
    99cc:	98800615 	stw	r2,24(r19)
    99d0:	a0bfff17 	ldw	r2,-4(r20)
    99d4:	98800715 	stw	r2,28(r19)
    99d8:	003f9a06 	br	9844 <__alt_mem_Flash_flash_data+0xf4009844>
    99dc:	8805883a 	mov	r2,r17
    99e0:	003fc706 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    99e4:	8809883a 	mov	r4,r17
    99e8:	a00b883a 	mov	r5,r20
    99ec:	00083dc0 	call	83dc <memmove>
    99f0:	003fc906 	br	9918 <__alt_mem_Flash_flash_data+0xf4009918>
    99f4:	a0800217 	ldw	r2,8(r20)
    99f8:	98800415 	stw	r2,16(r19)
    99fc:	a0800317 	ldw	r2,12(r20)
    9a00:	98800515 	stw	r2,20(r19)
    9a04:	31000726 	beq	r6,r4,9a24 <_realloc_r+0x54c>
    9a08:	98800604 	addi	r2,r19,24
    9a0c:	a5000404 	addi	r20,r20,16
    9a10:	003fbb06 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>
    9a14:	9009883a 	mov	r4,r18
    9a18:	0010a7c0 	call	10a7c <__malloc_unlock>
    9a1c:	0005883a 	mov	r2,zero
    9a20:	003ef206 	br	95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    9a24:	a0c00417 	ldw	r3,16(r20)
    9a28:	a5000604 	addi	r20,r20,24
    9a2c:	98800804 	addi	r2,r19,32
    9a30:	98c00615 	stw	r3,24(r19)
    9a34:	a0ffff17 	ldw	r3,-4(r20)
    9a38:	98c00715 	stw	r3,28(r19)
    9a3c:	003fb006 	br	9900 <__alt_mem_Flash_flash_data+0xf4009900>

00009a40 <__fpclassifyd>:
    9a40:	00a00034 	movhi	r2,32768
    9a44:	10bfffc4 	addi	r2,r2,-1
    9a48:	2884703a 	and	r2,r5,r2
    9a4c:	10000726 	beq	r2,zero,9a6c <__fpclassifyd+0x2c>
    9a50:	00fffc34 	movhi	r3,65520
    9a54:	019ff834 	movhi	r6,32736
    9a58:	28c7883a 	add	r3,r5,r3
    9a5c:	31bfffc4 	addi	r6,r6,-1
    9a60:	30c00536 	bltu	r6,r3,9a78 <__fpclassifyd+0x38>
    9a64:	00800104 	movi	r2,4
    9a68:	f800283a 	ret
    9a6c:	2000021e 	bne	r4,zero,9a78 <__fpclassifyd+0x38>
    9a70:	00800084 	movi	r2,2
    9a74:	f800283a 	ret
    9a78:	00dffc34 	movhi	r3,32752
    9a7c:	019ff834 	movhi	r6,32736
    9a80:	28cb883a 	add	r5,r5,r3
    9a84:	31bfffc4 	addi	r6,r6,-1
    9a88:	317ff62e 	bgeu	r6,r5,9a64 <__alt_mem_Flash_flash_data+0xf4009a64>
    9a8c:	01400434 	movhi	r5,16
    9a90:	297fffc4 	addi	r5,r5,-1
    9a94:	28800236 	bltu	r5,r2,9aa0 <__fpclassifyd+0x60>
    9a98:	008000c4 	movi	r2,3
    9a9c:	f800283a 	ret
    9aa0:	10c00226 	beq	r2,r3,9aac <__fpclassifyd+0x6c>
    9aa4:	0005883a 	mov	r2,zero
    9aa8:	f800283a 	ret
    9aac:	2005003a 	cmpeq	r2,r4,zero
    9ab0:	f800283a 	ret

00009ab4 <_sbrk_r>:
    9ab4:	defffd04 	addi	sp,sp,-12
    9ab8:	dc000015 	stw	r16,0(sp)
    9abc:	040000b4 	movhi	r16,2
    9ac0:	dc400115 	stw	r17,4(sp)
    9ac4:	8402a304 	addi	r16,r16,2700
    9ac8:	2023883a 	mov	r17,r4
    9acc:	2809883a 	mov	r4,r5
    9ad0:	dfc00215 	stw	ra,8(sp)
    9ad4:	80000015 	stw	zero,0(r16)
    9ad8:	00106480 	call	10648 <sbrk>
    9adc:	00ffffc4 	movi	r3,-1
    9ae0:	10c00526 	beq	r2,r3,9af8 <_sbrk_r+0x44>
    9ae4:	dfc00217 	ldw	ra,8(sp)
    9ae8:	dc400117 	ldw	r17,4(sp)
    9aec:	dc000017 	ldw	r16,0(sp)
    9af0:	dec00304 	addi	sp,sp,12
    9af4:	f800283a 	ret
    9af8:	80c00017 	ldw	r3,0(r16)
    9afc:	183ff926 	beq	r3,zero,9ae4 <__alt_mem_Flash_flash_data+0xf4009ae4>
    9b00:	88c00015 	stw	r3,0(r17)
    9b04:	003ff706 	br	9ae4 <__alt_mem_Flash_flash_data+0xf4009ae4>

00009b08 <__sread>:
    9b08:	defffe04 	addi	sp,sp,-8
    9b0c:	dc000015 	stw	r16,0(sp)
    9b10:	2821883a 	mov	r16,r5
    9b14:	2940038f 	ldh	r5,14(r5)
    9b18:	dfc00115 	stw	ra,4(sp)
    9b1c:	000c86c0 	call	c86c <_read_r>
    9b20:	10000716 	blt	r2,zero,9b40 <__sread+0x38>
    9b24:	80c01417 	ldw	r3,80(r16)
    9b28:	1887883a 	add	r3,r3,r2
    9b2c:	80c01415 	stw	r3,80(r16)
    9b30:	dfc00117 	ldw	ra,4(sp)
    9b34:	dc000017 	ldw	r16,0(sp)
    9b38:	dec00204 	addi	sp,sp,8
    9b3c:	f800283a 	ret
    9b40:	80c0030b 	ldhu	r3,12(r16)
    9b44:	18fbffcc 	andi	r3,r3,61439
    9b48:	80c0030d 	sth	r3,12(r16)
    9b4c:	dfc00117 	ldw	ra,4(sp)
    9b50:	dc000017 	ldw	r16,0(sp)
    9b54:	dec00204 	addi	sp,sp,8
    9b58:	f800283a 	ret

00009b5c <__seofread>:
    9b5c:	0005883a 	mov	r2,zero
    9b60:	f800283a 	ret

00009b64 <__swrite>:
    9b64:	2880030b 	ldhu	r2,12(r5)
    9b68:	defffb04 	addi	sp,sp,-20
    9b6c:	dcc00315 	stw	r19,12(sp)
    9b70:	dc800215 	stw	r18,8(sp)
    9b74:	dc400115 	stw	r17,4(sp)
    9b78:	dc000015 	stw	r16,0(sp)
    9b7c:	dfc00415 	stw	ra,16(sp)
    9b80:	10c0400c 	andi	r3,r2,256
    9b84:	2821883a 	mov	r16,r5
    9b88:	2027883a 	mov	r19,r4
    9b8c:	3025883a 	mov	r18,r6
    9b90:	3823883a 	mov	r17,r7
    9b94:	18000526 	beq	r3,zero,9bac <__swrite+0x48>
    9b98:	2940038f 	ldh	r5,14(r5)
    9b9c:	000d883a 	mov	r6,zero
    9ba0:	01c00084 	movi	r7,2
    9ba4:	000c8100 	call	c810 <_lseek_r>
    9ba8:	8080030b 	ldhu	r2,12(r16)
    9bac:	8140038f 	ldh	r5,14(r16)
    9bb0:	10bbffcc 	andi	r2,r2,61439
    9bb4:	9809883a 	mov	r4,r19
    9bb8:	900d883a 	mov	r6,r18
    9bbc:	880f883a 	mov	r7,r17
    9bc0:	8080030d 	sth	r2,12(r16)
    9bc4:	dfc00417 	ldw	ra,16(sp)
    9bc8:	dcc00317 	ldw	r19,12(sp)
    9bcc:	dc800217 	ldw	r18,8(sp)
    9bd0:	dc400117 	ldw	r17,4(sp)
    9bd4:	dc000017 	ldw	r16,0(sp)
    9bd8:	dec00504 	addi	sp,sp,20
    9bdc:	000c30c1 	jmpi	c30c <_write_r>

00009be0 <__sseek>:
    9be0:	defffe04 	addi	sp,sp,-8
    9be4:	dc000015 	stw	r16,0(sp)
    9be8:	2821883a 	mov	r16,r5
    9bec:	2940038f 	ldh	r5,14(r5)
    9bf0:	dfc00115 	stw	ra,4(sp)
    9bf4:	000c8100 	call	c810 <_lseek_r>
    9bf8:	00ffffc4 	movi	r3,-1
    9bfc:	10c00826 	beq	r2,r3,9c20 <__sseek+0x40>
    9c00:	80c0030b 	ldhu	r3,12(r16)
    9c04:	80801415 	stw	r2,80(r16)
    9c08:	18c40014 	ori	r3,r3,4096
    9c0c:	80c0030d 	sth	r3,12(r16)
    9c10:	dfc00117 	ldw	ra,4(sp)
    9c14:	dc000017 	ldw	r16,0(sp)
    9c18:	dec00204 	addi	sp,sp,8
    9c1c:	f800283a 	ret
    9c20:	80c0030b 	ldhu	r3,12(r16)
    9c24:	18fbffcc 	andi	r3,r3,61439
    9c28:	80c0030d 	sth	r3,12(r16)
    9c2c:	dfc00117 	ldw	ra,4(sp)
    9c30:	dc000017 	ldw	r16,0(sp)
    9c34:	dec00204 	addi	sp,sp,8
    9c38:	f800283a 	ret

00009c3c <__sclose>:
    9c3c:	2940038f 	ldh	r5,14(r5)
    9c40:	000c3681 	jmpi	c368 <_close_r>

00009c44 <__ssprint_r>:
    9c44:	30800217 	ldw	r2,8(r6)
    9c48:	defff604 	addi	sp,sp,-40
    9c4c:	ddc00715 	stw	r23,28(sp)
    9c50:	dc800215 	stw	r18,8(sp)
    9c54:	dfc00915 	stw	ra,36(sp)
    9c58:	df000815 	stw	fp,32(sp)
    9c5c:	dd800615 	stw	r22,24(sp)
    9c60:	dd400515 	stw	r21,20(sp)
    9c64:	dd000415 	stw	r20,16(sp)
    9c68:	dcc00315 	stw	r19,12(sp)
    9c6c:	dc400115 	stw	r17,4(sp)
    9c70:	dc000015 	stw	r16,0(sp)
    9c74:	3025883a 	mov	r18,r6
    9c78:	35c00017 	ldw	r23,0(r6)
    9c7c:	10005626 	beq	r2,zero,9dd8 <__ssprint_r+0x194>
    9c80:	2027883a 	mov	r19,r4
    9c84:	28800217 	ldw	r2,8(r5)
    9c88:	29000017 	ldw	r4,0(r5)
    9c8c:	2823883a 	mov	r17,r5
    9c90:	0039883a 	mov	fp,zero
    9c94:	0021883a 	mov	r16,zero
    9c98:	80003926 	beq	r16,zero,9d80 <__ssprint_r+0x13c>
    9c9c:	102b883a 	mov	r21,r2
    9ca0:	102d883a 	mov	r22,r2
    9ca4:	80803a36 	bltu	r16,r2,9d90 <__ssprint_r+0x14c>
    9ca8:	88c0030b 	ldhu	r3,12(r17)
    9cac:	1881200c 	andi	r2,r3,1152
    9cb0:	10002626 	beq	r2,zero,9d4c <__ssprint_r+0x108>
    9cb4:	88800517 	ldw	r2,20(r17)
    9cb8:	89400417 	ldw	r5,16(r17)
    9cbc:	81c00044 	addi	r7,r16,1
    9cc0:	108d883a 	add	r6,r2,r2
    9cc4:	3085883a 	add	r2,r6,r2
    9cc8:	100cd7fa 	srli	r6,r2,31
    9ccc:	216dc83a 	sub	r22,r4,r5
    9cd0:	3d89883a 	add	r4,r7,r22
    9cd4:	3085883a 	add	r2,r6,r2
    9cd8:	102bd07a 	srai	r21,r2,1
    9cdc:	a80d883a 	mov	r6,r21
    9ce0:	a900022e 	bgeu	r21,r4,9cec <__ssprint_r+0xa8>
    9ce4:	202b883a 	mov	r21,r4
    9ce8:	200d883a 	mov	r6,r4
    9cec:	18c1000c 	andi	r3,r3,1024
    9cf0:	9809883a 	mov	r4,r19
    9cf4:	18002926 	beq	r3,zero,9d9c <__ssprint_r+0x158>
    9cf8:	300b883a 	mov	r5,r6
    9cfc:	0007a140 	call	7a14 <_malloc_r>
    9d00:	1029883a 	mov	r20,r2
    9d04:	10002b26 	beq	r2,zero,9db4 <__ssprint_r+0x170>
    9d08:	89400417 	ldw	r5,16(r17)
    9d0c:	1009883a 	mov	r4,r2
    9d10:	b00d883a 	mov	r6,r22
    9d14:	00082a40 	call	82a4 <memcpy>
    9d18:	8880030b 	ldhu	r2,12(r17)
    9d1c:	00fedfc4 	movi	r3,-1153
    9d20:	10c4703a 	and	r2,r2,r3
    9d24:	10802014 	ori	r2,r2,128
    9d28:	8880030d 	sth	r2,12(r17)
    9d2c:	a589883a 	add	r4,r20,r22
    9d30:	adadc83a 	sub	r22,r21,r22
    9d34:	8d400515 	stw	r21,20(r17)
    9d38:	8d800215 	stw	r22,8(r17)
    9d3c:	8d000415 	stw	r20,16(r17)
    9d40:	89000015 	stw	r4,0(r17)
    9d44:	802b883a 	mov	r21,r16
    9d48:	802d883a 	mov	r22,r16
    9d4c:	e00b883a 	mov	r5,fp
    9d50:	b00d883a 	mov	r6,r22
    9d54:	00083dc0 	call	83dc <memmove>
    9d58:	88800217 	ldw	r2,8(r17)
    9d5c:	89000017 	ldw	r4,0(r17)
    9d60:	90c00217 	ldw	r3,8(r18)
    9d64:	1545c83a 	sub	r2,r2,r21
    9d68:	2589883a 	add	r4,r4,r22
    9d6c:	88800215 	stw	r2,8(r17)
    9d70:	89000015 	stw	r4,0(r17)
    9d74:	1c21c83a 	sub	r16,r3,r16
    9d78:	94000215 	stw	r16,8(r18)
    9d7c:	80001626 	beq	r16,zero,9dd8 <__ssprint_r+0x194>
    9d80:	bf000017 	ldw	fp,0(r23)
    9d84:	bc000117 	ldw	r16,4(r23)
    9d88:	bdc00204 	addi	r23,r23,8
    9d8c:	003fc206 	br	9c98 <__alt_mem_Flash_flash_data+0xf4009c98>
    9d90:	802b883a 	mov	r21,r16
    9d94:	802d883a 	mov	r22,r16
    9d98:	003fec06 	br	9d4c <__alt_mem_Flash_flash_data+0xf4009d4c>
    9d9c:	00094d80 	call	94d8 <_realloc_r>
    9da0:	1029883a 	mov	r20,r2
    9da4:	103fe11e 	bne	r2,zero,9d2c <__alt_mem_Flash_flash_data+0xf4009d2c>
    9da8:	89400417 	ldw	r5,16(r17)
    9dac:	9809883a 	mov	r4,r19
    9db0:	0006e440 	call	6e44 <_free_r>
    9db4:	88c0030b 	ldhu	r3,12(r17)
    9db8:	00800304 	movi	r2,12
    9dbc:	98800015 	stw	r2,0(r19)
    9dc0:	18c01014 	ori	r3,r3,64
    9dc4:	88c0030d 	sth	r3,12(r17)
    9dc8:	00bfffc4 	movi	r2,-1
    9dcc:	90000215 	stw	zero,8(r18)
    9dd0:	90000115 	stw	zero,4(r18)
    9dd4:	00000206 	br	9de0 <__ssprint_r+0x19c>
    9dd8:	90000115 	stw	zero,4(r18)
    9ddc:	0005883a 	mov	r2,zero
    9de0:	dfc00917 	ldw	ra,36(sp)
    9de4:	df000817 	ldw	fp,32(sp)
    9de8:	ddc00717 	ldw	r23,28(sp)
    9dec:	dd800617 	ldw	r22,24(sp)
    9df0:	dd400517 	ldw	r21,20(sp)
    9df4:	dd000417 	ldw	r20,16(sp)
    9df8:	dcc00317 	ldw	r19,12(sp)
    9dfc:	dc800217 	ldw	r18,8(sp)
    9e00:	dc400117 	ldw	r17,4(sp)
    9e04:	dc000017 	ldw	r16,0(sp)
    9e08:	dec00a04 	addi	sp,sp,40
    9e0c:	f800283a 	ret

00009e10 <___svfiprintf_internal_r>:
    9e10:	2880030b 	ldhu	r2,12(r5)
    9e14:	deffc904 	addi	sp,sp,-220
    9e18:	dd403215 	stw	r21,200(sp)
    9e1c:	dfc03615 	stw	ra,216(sp)
    9e20:	df003515 	stw	fp,212(sp)
    9e24:	ddc03415 	stw	r23,208(sp)
    9e28:	dd803315 	stw	r22,204(sp)
    9e2c:	dd003115 	stw	r20,196(sp)
    9e30:	dcc03015 	stw	r19,192(sp)
    9e34:	dc802f15 	stw	r18,188(sp)
    9e38:	dc402e15 	stw	r17,184(sp)
    9e3c:	dc002d15 	stw	r16,180(sp)
    9e40:	d9402715 	stw	r5,156(sp)
    9e44:	d9002915 	stw	r4,164(sp)
    9e48:	1080200c 	andi	r2,r2,128
    9e4c:	d9c02315 	stw	r7,140(sp)
    9e50:	302b883a 	mov	r21,r6
    9e54:	10000226 	beq	r2,zero,9e60 <___svfiprintf_internal_r+0x50>
    9e58:	28800417 	ldw	r2,16(r5)
    9e5c:	1003ce26 	beq	r2,zero,ad98 <___svfiprintf_internal_r+0xf88>
    9e60:	dac01a04 	addi	r11,sp,104
    9e64:	da8019c4 	addi	r10,sp,103
    9e68:	dc802917 	ldw	r18,164(sp)
    9e6c:	dd002717 	ldw	r20,156(sp)
    9e70:	04c000b4 	movhi	r19,2
    9e74:	dac01e15 	stw	r11,120(sp)
    9e78:	5a97c83a 	sub	r11,r11,r10
    9e7c:	9cf1e204 	addi	r19,r19,-14456
    9e80:	da801f15 	stw	r10,124(sp)
    9e84:	dec01a15 	stw	sp,104(sp)
    9e88:	d8001c15 	stw	zero,112(sp)
    9e8c:	d8001b15 	stw	zero,108(sp)
    9e90:	d811883a 	mov	r8,sp
    9e94:	d8002a15 	stw	zero,168(sp)
    9e98:	d8002415 	stw	zero,144(sp)
    9e9c:	dac02b15 	stw	r11,172(sp)
    9ea0:	a8800007 	ldb	r2,0(r21)
    9ea4:	10026a26 	beq	r2,zero,a850 <___svfiprintf_internal_r+0xa40>
    9ea8:	01000944 	movi	r4,37
    9eac:	11026826 	beq	r2,r4,a850 <___svfiprintf_internal_r+0xa40>
    9eb0:	a805883a 	mov	r2,r21
    9eb4:	00000106 	br	9ebc <___svfiprintf_internal_r+0xac>
    9eb8:	19000326 	beq	r3,r4,9ec8 <___svfiprintf_internal_r+0xb8>
    9ebc:	10800044 	addi	r2,r2,1
    9ec0:	10c00007 	ldb	r3,0(r2)
    9ec4:	183ffc1e 	bne	r3,zero,9eb8 <__alt_mem_Flash_flash_data+0xf4009eb8>
    9ec8:	1561c83a 	sub	r16,r2,r21
    9ecc:	102d883a 	mov	r22,r2
    9ed0:	80000e26 	beq	r16,zero,9f0c <___svfiprintf_internal_r+0xfc>
    9ed4:	d8c01c17 	ldw	r3,112(sp)
    9ed8:	d8801b17 	ldw	r2,108(sp)
    9edc:	45400015 	stw	r21,0(r8)
    9ee0:	1c07883a 	add	r3,r3,r16
    9ee4:	10800044 	addi	r2,r2,1
    9ee8:	d8c01c15 	stw	r3,112(sp)
    9eec:	44000115 	stw	r16,4(r8)
    9ef0:	d8801b15 	stw	r2,108(sp)
    9ef4:	00c001c4 	movi	r3,7
    9ef8:	1882d816 	blt	r3,r2,aa5c <___svfiprintf_internal_r+0xc4c>
    9efc:	42000204 	addi	r8,r8,8
    9f00:	da802417 	ldw	r10,144(sp)
    9f04:	5415883a 	add	r10,r10,r16
    9f08:	da802415 	stw	r10,144(sp)
    9f0c:	b0800007 	ldb	r2,0(r22)
    9f10:	10027526 	beq	r2,zero,a8e8 <___svfiprintf_internal_r+0xad8>
    9f14:	b1000047 	ldb	r4,1(r22)
    9f18:	b5400044 	addi	r21,r22,1
    9f1c:	d8001d85 	stb	zero,118(sp)
    9f20:	000d883a 	mov	r6,zero
    9f24:	043fffc4 	movi	r16,-1
    9f28:	d8002115 	stw	zero,132(sp)
    9f2c:	0023883a 	mov	r17,zero
    9f30:	00c01604 	movi	r3,88
    9f34:	01400244 	movi	r5,9
    9f38:	02400a84 	movi	r9,42
    9f3c:	01c01b04 	movi	r7,108
    9f40:	ad400044 	addi	r21,r21,1
    9f44:	20bff804 	addi	r2,r4,-32
    9f48:	18819736 	bltu	r3,r2,a5a8 <___svfiprintf_internal_r+0x798>
    9f4c:	100490ba 	slli	r2,r2,2
    9f50:	02c00074 	movhi	r11,1
    9f54:	5ae7d904 	addi	r11,r11,-24732
    9f58:	12c5883a 	add	r2,r2,r11
    9f5c:	10800017 	ldw	r2,0(r2)
    9f60:	1000683a 	jmp	r2
    9f64:	0000a4a0 	cmpeqi	zero,zero,658
    9f68:	0000a5a8 	cmpgeui	zero,zero,662
    9f6c:	0000a5a8 	cmpgeui	zero,zero,662
    9f70:	0000a494 	movui	zero,658
    9f74:	0000a5a8 	cmpgeui	zero,zero,662
    9f78:	0000a5a8 	cmpgeui	zero,zero,662
    9f7c:	0000a5a8 	cmpgeui	zero,zero,662
    9f80:	0000a5a8 	cmpgeui	zero,zero,662
    9f84:	0000a5a8 	cmpgeui	zero,zero,662
    9f88:	0000a5a8 	cmpgeui	zero,zero,662
    9f8c:	0000a1c0 	call	a1c <_puts_r+0x28>
    9f90:	0000a5dc 	xori	zero,zero,663
    9f94:	0000a5a8 	cmpgeui	zero,zero,662
    9f98:	0000a1e8 	cmpgeui	zero,zero,647
    9f9c:	0000a5e8 	cmpgeui	zero,zero,663
    9fa0:	0000a5a8 	cmpgeui	zero,zero,662
    9fa4:	0000a5d0 	cmplti	zero,zero,663
    9fa8:	0000a570 	cmpltui	zero,zero,661
    9fac:	0000a570 	cmpltui	zero,zero,661
    9fb0:	0000a570 	cmpltui	zero,zero,661
    9fb4:	0000a570 	cmpltui	zero,zero,661
    9fb8:	0000a570 	cmpltui	zero,zero,661
    9fbc:	0000a570 	cmpltui	zero,zero,661
    9fc0:	0000a570 	cmpltui	zero,zero,661
    9fc4:	0000a570 	cmpltui	zero,zero,661
    9fc8:	0000a570 	cmpltui	zero,zero,661
    9fcc:	0000a5a8 	cmpgeui	zero,zero,662
    9fd0:	0000a5a8 	cmpgeui	zero,zero,662
    9fd4:	0000a5a8 	cmpgeui	zero,zero,662
    9fd8:	0000a5a8 	cmpgeui	zero,zero,662
    9fdc:	0000a5a8 	cmpgeui	zero,zero,662
    9fe0:	0000a5a8 	cmpgeui	zero,zero,662
    9fe4:	0000a5a8 	cmpgeui	zero,zero,662
    9fe8:	0000a5a8 	cmpgeui	zero,zero,662
    9fec:	0000a5a8 	cmpgeui	zero,zero,662
    9ff0:	0000a5a8 	cmpgeui	zero,zero,662
    9ff4:	0000a508 	cmpgei	zero,zero,660
    9ff8:	0000a5a8 	cmpgeui	zero,zero,662
    9ffc:	0000a5a8 	cmpgeui	zero,zero,662
    a000:	0000a5a8 	cmpgeui	zero,zero,662
    a004:	0000a5a8 	cmpgeui	zero,zero,662
    a008:	0000a5a8 	cmpgeui	zero,zero,662
    a00c:	0000a5a8 	cmpgeui	zero,zero,662
    a010:	0000a5a8 	cmpgeui	zero,zero,662
    a014:	0000a5a8 	cmpgeui	zero,zero,662
    a018:	0000a5a8 	cmpgeui	zero,zero,662
    a01c:	0000a5a8 	cmpgeui	zero,zero,662
    a020:	0000a194 	movui	zero,646
    a024:	0000a5a8 	cmpgeui	zero,zero,662
    a028:	0000a5a8 	cmpgeui	zero,zero,662
    a02c:	0000a5a8 	cmpgeui	zero,zero,662
    a030:	0000a5a8 	cmpgeui	zero,zero,662
    a034:	0000a5a8 	cmpgeui	zero,zero,662
    a038:	0000a0c8 	cmpgei	zero,zero,643
    a03c:	0000a5a8 	cmpgeui	zero,zero,662
    a040:	0000a5a8 	cmpgeui	zero,zero,662
    a044:	0000a3f4 	movhi	zero,655
    a048:	0000a5a8 	cmpgeui	zero,zero,662
    a04c:	0000a5a8 	cmpgeui	zero,zero,662
    a050:	0000a5a8 	cmpgeui	zero,zero,662
    a054:	0000a5a8 	cmpgeui	zero,zero,662
    a058:	0000a5a8 	cmpgeui	zero,zero,662
    a05c:	0000a5a8 	cmpgeui	zero,zero,662
    a060:	0000a5a8 	cmpgeui	zero,zero,662
    a064:	0000a5a8 	cmpgeui	zero,zero,662
    a068:	0000a5a8 	cmpgeui	zero,zero,662
    a06c:	0000a5a8 	cmpgeui	zero,zero,662
    a070:	0000a2e0 	cmpeqi	zero,zero,651
    a074:	0000a2a0 	cmpeqi	zero,zero,650
    a078:	0000a5a8 	cmpgeui	zero,zero,662
    a07c:	0000a5a8 	cmpgeui	zero,zero,662
    a080:	0000a5a8 	cmpgeui	zero,zero,662
    a084:	0000a450 	cmplti	zero,zero,657
    a088:	0000a2a0 	cmpeqi	zero,zero,650
    a08c:	0000a5a8 	cmpgeui	zero,zero,662
    a090:	0000a5a8 	cmpgeui	zero,zero,662
    a094:	0000a43c 	xorhi	zero,zero,656
    a098:	0000a5a8 	cmpgeui	zero,zero,662
    a09c:	0000a45c 	xori	zero,zero,657
    a0a0:	0000a198 	cmpnei	zero,zero,646
    a0a4:	0000a25c 	xori	zero,zero,649
    a0a8:	0000a250 	cmplti	zero,zero,649
    a0ac:	0000a5a8 	cmpgeui	zero,zero,662
    a0b0:	0000a1f4 	movhi	zero,647
    a0b4:	0000a5a8 	cmpgeui	zero,zero,662
    a0b8:	0000a0cc 	andi	zero,zero,643
    a0bc:	0000a5a8 	cmpgeui	zero,zero,662
    a0c0:	0000a5a8 	cmpgeui	zero,zero,662
    a0c4:	0000a4bc 	xorhi	zero,zero,658
    a0c8:	8c400414 	ori	r17,r17,16
    a0cc:	8880080c 	andi	r2,r17,32
    a0d0:	10029626 	beq	r2,zero,ab2c <___svfiprintf_internal_r+0xd1c>
    a0d4:	da802317 	ldw	r10,140(sp)
    a0d8:	dac02317 	ldw	r11,140(sp)
    a0dc:	00800044 	movi	r2,1
    a0e0:	52400017 	ldw	r9,0(r10)
    a0e4:	52800117 	ldw	r10,4(r10)
    a0e8:	5ac00204 	addi	r11,r11,8
    a0ec:	dac02315 	stw	r11,140(sp)
    a0f0:	4a86b03a 	or	r3,r9,r10
    a0f4:	d8001d85 	stb	zero,118(sp)
    a0f8:	8039883a 	mov	fp,r16
    a0fc:	0017883a 	mov	r11,zero
    a100:	80000216 	blt	r16,zero,a10c <___svfiprintf_internal_r+0x2fc>
    a104:	013fdfc4 	movi	r4,-129
    a108:	8922703a 	and	r17,r17,r4
    a10c:	1801d21e 	bne	r3,zero,a858 <___svfiprintf_internal_r+0xa48>
    a110:	80024626 	beq	r16,zero,aa2c <___svfiprintf_internal_r+0xc1c>
    a114:	10803fcc 	andi	r2,r2,255
    a118:	00c00044 	movi	r3,1
    a11c:	10c2b426 	beq	r2,r3,abf0 <___svfiprintf_internal_r+0xde0>
    a120:	00c00084 	movi	r3,2
    a124:	10c25d26 	beq	r2,r3,aa9c <___svfiprintf_internal_r+0xc8c>
    a128:	d8c01a04 	addi	r3,sp,104
    a12c:	4808d0fa 	srli	r4,r9,3
    a130:	500a977a 	slli	r5,r10,29
    a134:	5014d0fa 	srli	r10,r10,3
    a138:	4a4001cc 	andi	r9,r9,7
    a13c:	48800c04 	addi	r2,r9,48
    a140:	18ffffc4 	addi	r3,r3,-1
    a144:	2912b03a 	or	r9,r5,r4
    a148:	18800005 	stb	r2,0(r3)
    a14c:	4a88b03a 	or	r4,r9,r10
    a150:	203ff61e 	bne	r4,zero,a12c <__alt_mem_Flash_flash_data+0xf400a12c>
    a154:	8900004c 	andi	r4,r17,1
    a158:	d8c02615 	stw	r3,152(sp)
    a15c:	2002961e 	bne	r4,zero,abb8 <___svfiprintf_internal_r+0xda8>
    a160:	da801e17 	ldw	r10,120(sp)
    a164:	50f9c83a 	sub	fp,r10,r3
    a168:	df002015 	stw	fp,128(sp)
    a16c:	e400010e 	bge	fp,r16,a174 <___svfiprintf_internal_r+0x364>
    a170:	dc002015 	stw	r16,128(sp)
    a174:	5ac03fcc 	andi	r11,r11,255
    a178:	5ac0201c 	xori	r11,r11,128
    a17c:	5affe004 	addi	r11,r11,-128
    a180:	58006326 	beq	r11,zero,a310 <___svfiprintf_internal_r+0x500>
    a184:	d8c02017 	ldw	r3,128(sp)
    a188:	18c00044 	addi	r3,r3,1
    a18c:	d8c02015 	stw	r3,128(sp)
    a190:	00005f06 	br	a310 <___svfiprintf_internal_r+0x500>
    a194:	8c400414 	ori	r17,r17,16
    a198:	8880080c 	andi	r2,r17,32
    a19c:	10027926 	beq	r2,zero,ab84 <___svfiprintf_internal_r+0xd74>
    a1a0:	dac02317 	ldw	r11,140(sp)
    a1a4:	0005883a 	mov	r2,zero
    a1a8:	5a400017 	ldw	r9,0(r11)
    a1ac:	5a800117 	ldw	r10,4(r11)
    a1b0:	5ac00204 	addi	r11,r11,8
    a1b4:	dac02315 	stw	r11,140(sp)
    a1b8:	4a86b03a 	or	r3,r9,r10
    a1bc:	003fcd06 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    a1c0:	da802317 	ldw	r10,140(sp)
    a1c4:	dac02317 	ldw	r11,140(sp)
    a1c8:	52800017 	ldw	r10,0(r10)
    a1cc:	58800104 	addi	r2,r11,4
    a1d0:	da802115 	stw	r10,132(sp)
    a1d4:	50028c0e 	bge	r10,zero,ac08 <___svfiprintf_internal_r+0xdf8>
    a1d8:	da802117 	ldw	r10,132(sp)
    a1dc:	d8802315 	stw	r2,140(sp)
    a1e0:	0295c83a 	sub	r10,zero,r10
    a1e4:	da802115 	stw	r10,132(sp)
    a1e8:	8c400114 	ori	r17,r17,4
    a1ec:	a9000007 	ldb	r4,0(r21)
    a1f0:	003f5306 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a1f4:	da802317 	ldw	r10,140(sp)
    a1f8:	dac02317 	ldw	r11,140(sp)
    a1fc:	d8001d85 	stb	zero,118(sp)
    a200:	52800017 	ldw	r10,0(r10)
    a204:	5dc00104 	addi	r23,r11,4
    a208:	da802615 	stw	r10,152(sp)
    a20c:	5002d626 	beq	r10,zero,ad68 <___svfiprintf_internal_r+0xf58>
    a210:	d9002617 	ldw	r4,152(sp)
    a214:	8002cc16 	blt	r16,zero,ad48 <___svfiprintf_internal_r+0xf38>
    a218:	000b883a 	mov	r5,zero
    a21c:	800d883a 	mov	r6,r16
    a220:	da002c15 	stw	r8,176(sp)
    a224:	00081bc0 	call	81bc <memchr>
    a228:	da002c17 	ldw	r8,176(sp)
    a22c:	1002f026 	beq	r2,zero,adf0 <___svfiprintf_internal_r+0xfe0>
    a230:	d8c02617 	ldw	r3,152(sp)
    a234:	10f9c83a 	sub	fp,r2,r3
    a238:	8700010e 	bge	r16,fp,a240 <___svfiprintf_internal_r+0x430>
    a23c:	8039883a 	mov	fp,r16
    a240:	dac01d83 	ldbu	r11,118(sp)
    a244:	ddc02315 	stw	r23,140(sp)
    a248:	0021883a 	mov	r16,zero
    a24c:	003fc606 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    a250:	8c400814 	ori	r17,r17,32
    a254:	a9000007 	ldb	r4,0(r21)
    a258:	003f3906 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a25c:	da802317 	ldw	r10,140(sp)
    a260:	00800c04 	movi	r2,48
    a264:	dac02317 	ldw	r11,140(sp)
    a268:	52400017 	ldw	r9,0(r10)
    a26c:	d8801d05 	stb	r2,116(sp)
    a270:	00801e04 	movi	r2,120
    a274:	d8801d45 	stb	r2,117(sp)
    a278:	008000b4 	movhi	r2,2
    a27c:	10b17904 	addi	r2,r2,-14876
    a280:	5ac00104 	addi	r11,r11,4
    a284:	d8802a15 	stw	r2,168(sp)
    a288:	0015883a 	mov	r10,zero
    a28c:	8c400094 	ori	r17,r17,2
    a290:	dac02315 	stw	r11,140(sp)
    a294:	00800084 	movi	r2,2
    a298:	4807883a 	mov	r3,r9
    a29c:	003f9506 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    a2a0:	d9801d85 	stb	r6,118(sp)
    a2a4:	8880080c 	andi	r2,r17,32
    a2a8:	d8c02317 	ldw	r3,140(sp)
    a2ac:	10009b26 	beq	r2,zero,a51c <___svfiprintf_internal_r+0x70c>
    a2b0:	dac02317 	ldw	r11,140(sp)
    a2b4:	18800117 	ldw	r2,4(r3)
    a2b8:	1a400017 	ldw	r9,0(r3)
    a2bc:	5ac00204 	addi	r11,r11,8
    a2c0:	dac02315 	stw	r11,140(sp)
    a2c4:	1015883a 	mov	r10,r2
    a2c8:	10009f16 	blt	r2,zero,a548 <___svfiprintf_internal_r+0x738>
    a2cc:	dac01d83 	ldbu	r11,118(sp)
    a2d0:	8039883a 	mov	fp,r16
    a2d4:	00800044 	movi	r2,1
    a2d8:	4a86b03a 	or	r3,r9,r10
    a2dc:	003f8806 	br	a100 <__alt_mem_Flash_flash_data+0xf400a100>
    a2e0:	dac02317 	ldw	r11,140(sp)
    a2e4:	00c00044 	movi	r3,1
    a2e8:	da801004 	addi	r10,sp,64
    a2ec:	58800017 	ldw	r2,0(r11)
    a2f0:	5ac00104 	addi	r11,r11,4
    a2f4:	d8c02015 	stw	r3,128(sp)
    a2f8:	d8001d85 	stb	zero,118(sp)
    a2fc:	d8801005 	stb	r2,64(sp)
    a300:	dac02315 	stw	r11,140(sp)
    a304:	1839883a 	mov	fp,r3
    a308:	da802615 	stw	r10,152(sp)
    a30c:	0021883a 	mov	r16,zero
    a310:	8a80008c 	andi	r10,r17,2
    a314:	da802215 	stw	r10,136(sp)
    a318:	50000326 	beq	r10,zero,a328 <___svfiprintf_internal_r+0x518>
    a31c:	dac02017 	ldw	r11,128(sp)
    a320:	5ac00084 	addi	r11,r11,2
    a324:	dac02015 	stw	r11,128(sp)
    a328:	88c0210c 	andi	r3,r17,132
    a32c:	d8c02515 	stw	r3,148(sp)
    a330:	1800bd1e 	bne	r3,zero,a628 <___svfiprintf_internal_r+0x818>
    a334:	da802117 	ldw	r10,132(sp)
    a338:	dac02017 	ldw	r11,128(sp)
    a33c:	52edc83a 	sub	r22,r10,r11
    a340:	0580b90e 	bge	zero,r22,a628 <___svfiprintf_internal_r+0x818>
    a344:	02400404 	movi	r9,16
    a348:	d8c01c17 	ldw	r3,112(sp)
    a34c:	d8801b17 	ldw	r2,108(sp)
    a350:	4d829b0e 	bge	r9,r22,adc0 <___svfiprintf_internal_r+0xfb0>
    a354:	014000b4 	movhi	r5,2
    a358:	2971e604 	addi	r5,r5,-14440
    a35c:	d9402815 	stw	r5,160(sp)
    a360:	05c001c4 	movi	r23,7
    a364:	00000306 	br	a374 <___svfiprintf_internal_r+0x564>
    a368:	b5bffc04 	addi	r22,r22,-16
    a36c:	42000204 	addi	r8,r8,8
    a370:	4d80150e 	bge	r9,r22,a3c8 <___svfiprintf_internal_r+0x5b8>
    a374:	028000b4 	movhi	r10,2
    a378:	18c00404 	addi	r3,r3,16
    a37c:	10800044 	addi	r2,r2,1
    a380:	52b1e604 	addi	r10,r10,-14440
    a384:	42800015 	stw	r10,0(r8)
    a388:	42400115 	stw	r9,4(r8)
    a38c:	d8c01c15 	stw	r3,112(sp)
    a390:	d8801b15 	stw	r2,108(sp)
    a394:	b8bff40e 	bge	r23,r2,a368 <__alt_mem_Flash_flash_data+0xf400a368>
    a398:	9009883a 	mov	r4,r18
    a39c:	a00b883a 	mov	r5,r20
    a3a0:	d9801a04 	addi	r6,sp,104
    a3a4:	da402c15 	stw	r9,176(sp)
    a3a8:	0009c440 	call	9c44 <__ssprint_r>
    a3ac:	da402c17 	ldw	r9,176(sp)
    a3b0:	1001531e 	bne	r2,zero,a900 <___svfiprintf_internal_r+0xaf0>
    a3b4:	b5bffc04 	addi	r22,r22,-16
    a3b8:	d8c01c17 	ldw	r3,112(sp)
    a3bc:	d8801b17 	ldw	r2,108(sp)
    a3c0:	d811883a 	mov	r8,sp
    a3c4:	4dbfeb16 	blt	r9,r22,a374 <__alt_mem_Flash_flash_data+0xf400a374>
    a3c8:	dac02817 	ldw	r11,160(sp)
    a3cc:	b0c7883a 	add	r3,r22,r3
    a3d0:	10800044 	addi	r2,r2,1
    a3d4:	42c00015 	stw	r11,0(r8)
    a3d8:	45800115 	stw	r22,4(r8)
    a3dc:	d8c01c15 	stw	r3,112(sp)
    a3e0:	d8801b15 	stw	r2,108(sp)
    a3e4:	010001c4 	movi	r4,7
    a3e8:	2081dd16 	blt	r4,r2,ab60 <___svfiprintf_internal_r+0xd50>
    a3ec:	42000204 	addi	r8,r8,8
    a3f0:	00008f06 	br	a630 <___svfiprintf_internal_r+0x820>
    a3f4:	008000b4 	movhi	r2,2
    a3f8:	10b17404 	addi	r2,r2,-14896
    a3fc:	d8802a15 	stw	r2,168(sp)
    a400:	d9801d85 	stb	r6,118(sp)
    a404:	8880080c 	andi	r2,r17,32
    a408:	10003226 	beq	r2,zero,a4d4 <___svfiprintf_internal_r+0x6c4>
    a40c:	da802317 	ldw	r10,140(sp)
    a410:	dac02317 	ldw	r11,140(sp)
    a414:	52400017 	ldw	r9,0(r10)
    a418:	52800117 	ldw	r10,4(r10)
    a41c:	5ac00204 	addi	r11,r11,8
    a420:	dac02315 	stw	r11,140(sp)
    a424:	8880004c 	andi	r2,r17,1
    a428:	10003426 	beq	r2,zero,a4fc <___svfiprintf_internal_r+0x6ec>
    a42c:	4a86b03a 	or	r3,r9,r10
    a430:	1802231e 	bne	r3,zero,acc0 <___svfiprintf_internal_r+0xeb0>
    a434:	00800084 	movi	r2,2
    a438:	003f2e06 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    a43c:	a9000007 	ldb	r4,0(r21)
    a440:	a805883a 	mov	r2,r21
    a444:	21c22426 	beq	r4,r7,acd8 <___svfiprintf_internal_r+0xec8>
    a448:	8c400414 	ori	r17,r17,16
    a44c:	003ebc06 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a450:	8c401014 	ori	r17,r17,64
    a454:	a9000007 	ldb	r4,0(r21)
    a458:	003eb906 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a45c:	d9801d85 	stb	r6,118(sp)
    a460:	8880080c 	andi	r2,r17,32
    a464:	10020d1e 	bne	r2,zero,ac9c <___svfiprintf_internal_r+0xe8c>
    a468:	8880040c 	andi	r2,r17,16
    a46c:	10021e1e 	bne	r2,zero,ace8 <___svfiprintf_internal_r+0xed8>
    a470:	8c40100c 	andi	r17,r17,64
    a474:	88021c26 	beq	r17,zero,ace8 <___svfiprintf_internal_r+0xed8>
    a478:	dac02317 	ldw	r11,140(sp)
    a47c:	da802417 	ldw	r10,144(sp)
    a480:	58800017 	ldw	r2,0(r11)
    a484:	5ac00104 	addi	r11,r11,4
    a488:	dac02315 	stw	r11,140(sp)
    a48c:	1280000d 	sth	r10,0(r2)
    a490:	003e8306 	br	9ea0 <__alt_mem_Flash_flash_data+0xf4009ea0>
    a494:	8c400054 	ori	r17,r17,1
    a498:	a9000007 	ldb	r4,0(r21)
    a49c:	003ea806 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a4a0:	30803fcc 	andi	r2,r6,255
    a4a4:	1080201c 	xori	r2,r2,128
    a4a8:	10bfe004 	addi	r2,r2,-128
    a4ac:	1001f91e 	bne	r2,zero,ac94 <___svfiprintf_internal_r+0xe84>
    a4b0:	01800804 	movi	r6,32
    a4b4:	a9000007 	ldb	r4,0(r21)
    a4b8:	003ea106 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a4bc:	008000b4 	movhi	r2,2
    a4c0:	10b17904 	addi	r2,r2,-14876
    a4c4:	d8802a15 	stw	r2,168(sp)
    a4c8:	d9801d85 	stb	r6,118(sp)
    a4cc:	8880080c 	andi	r2,r17,32
    a4d0:	103fce1e 	bne	r2,zero,a40c <__alt_mem_Flash_flash_data+0xf400a40c>
    a4d4:	8880040c 	andi	r2,r17,16
    a4d8:	1001e526 	beq	r2,zero,ac70 <___svfiprintf_internal_r+0xe60>
    a4dc:	da802317 	ldw	r10,140(sp)
    a4e0:	dac02317 	ldw	r11,140(sp)
    a4e4:	52400017 	ldw	r9,0(r10)
    a4e8:	8880004c 	andi	r2,r17,1
    a4ec:	5ac00104 	addi	r11,r11,4
    a4f0:	dac02315 	stw	r11,140(sp)
    a4f4:	0015883a 	mov	r10,zero
    a4f8:	103fcc1e 	bne	r2,zero,a42c <__alt_mem_Flash_flash_data+0xf400a42c>
    a4fc:	00800084 	movi	r2,2
    a500:	4a86b03a 	or	r3,r9,r10
    a504:	003efb06 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    a508:	8c400414 	ori	r17,r17,16
    a50c:	d9801d85 	stb	r6,118(sp)
    a510:	8880080c 	andi	r2,r17,32
    a514:	d8c02317 	ldw	r3,140(sp)
    a518:	103f651e 	bne	r2,zero,a2b0 <__alt_mem_Flash_flash_data+0xf400a2b0>
    a51c:	8880040c 	andi	r2,r17,16
    a520:	1001c61e 	bne	r2,zero,ac3c <___svfiprintf_internal_r+0xe2c>
    a524:	8880100c 	andi	r2,r17,64
    a528:	1001c426 	beq	r2,zero,ac3c <___svfiprintf_internal_r+0xe2c>
    a52c:	1a40000f 	ldh	r9,0(r3)
    a530:	dac02317 	ldw	r11,140(sp)
    a534:	4815d7fa 	srai	r10,r9,31
    a538:	5ac00104 	addi	r11,r11,4
    a53c:	dac02315 	stw	r11,140(sp)
    a540:	5005883a 	mov	r2,r10
    a544:	103f610e 	bge	r2,zero,a2cc <__alt_mem_Flash_flash_data+0xf400a2cc>
    a548:	0253c83a 	sub	r9,zero,r9
    a54c:	4804c03a 	cmpne	r2,r9,zero
    a550:	0295c83a 	sub	r10,zero,r10
    a554:	5095c83a 	sub	r10,r10,r2
    a558:	02c00b44 	movi	r11,45
    a55c:	dac01d85 	stb	r11,118(sp)
    a560:	8039883a 	mov	fp,r16
    a564:	00800044 	movi	r2,1
    a568:	4a86b03a 	or	r3,r9,r10
    a56c:	003ee406 	br	a100 <__alt_mem_Flash_flash_data+0xf400a100>
    a570:	a815883a 	mov	r10,r21
    a574:	d8002115 	stw	zero,132(sp)
    a578:	20bff404 	addi	r2,r4,-48
    a57c:	51000007 	ldb	r4,0(r10)
    a580:	da802117 	ldw	r10,132(sp)
    a584:	ad400044 	addi	r21,r21,1
    a588:	52c002a4 	muli	r11,r10,10
    a58c:	a815883a 	mov	r10,r21
    a590:	5885883a 	add	r2,r11,r2
    a594:	d8802115 	stw	r2,132(sp)
    a598:	20bff404 	addi	r2,r4,-48
    a59c:	28bff72e 	bgeu	r5,r2,a57c <__alt_mem_Flash_flash_data+0xf400a57c>
    a5a0:	20bff804 	addi	r2,r4,-32
    a5a4:	18be692e 	bgeu	r3,r2,9f4c <__alt_mem_Flash_flash_data+0xf4009f4c>
    a5a8:	d9801d85 	stb	r6,118(sp)
    a5ac:	2000ce26 	beq	r4,zero,a8e8 <___svfiprintf_internal_r+0xad8>
    a5b0:	02800044 	movi	r10,1
    a5b4:	dac01004 	addi	r11,sp,64
    a5b8:	da802015 	stw	r10,128(sp)
    a5bc:	d9001005 	stb	r4,64(sp)
    a5c0:	d8001d85 	stb	zero,118(sp)
    a5c4:	5039883a 	mov	fp,r10
    a5c8:	dac02615 	stw	r11,152(sp)
    a5cc:	003f4f06 	br	a30c <__alt_mem_Flash_flash_data+0xf400a30c>
    a5d0:	8c402014 	ori	r17,r17,128
    a5d4:	a9000007 	ldb	r4,0(r21)
    a5d8:	003e5906 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a5dc:	01800ac4 	movi	r6,43
    a5e0:	a9000007 	ldb	r4,0(r21)
    a5e4:	003e5606 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    a5e8:	a9000007 	ldb	r4,0(r21)
    a5ec:	aa800044 	addi	r10,r21,1
    a5f0:	22420626 	beq	r4,r9,ae0c <___svfiprintf_internal_r+0xffc>
    a5f4:	20bff404 	addi	r2,r4,-48
    a5f8:	502b883a 	mov	r21,r10
    a5fc:	0021883a 	mov	r16,zero
    a600:	28be5036 	bltu	r5,r2,9f44 <__alt_mem_Flash_flash_data+0xf4009f44>
    a604:	a9000007 	ldb	r4,0(r21)
    a608:	840002a4 	muli	r16,r16,10
    a60c:	ad400044 	addi	r21,r21,1
    a610:	1421883a 	add	r16,r2,r16
    a614:	20bff404 	addi	r2,r4,-48
    a618:	28bffa2e 	bgeu	r5,r2,a604 <__alt_mem_Flash_flash_data+0xf400a604>
    a61c:	803e490e 	bge	r16,zero,9f44 <__alt_mem_Flash_flash_data+0xf4009f44>
    a620:	043fffc4 	movi	r16,-1
    a624:	003e4706 	br	9f44 <__alt_mem_Flash_flash_data+0xf4009f44>
    a628:	d8c01c17 	ldw	r3,112(sp)
    a62c:	d8801b17 	ldw	r2,108(sp)
    a630:	d9001d87 	ldb	r4,118(sp)
    a634:	20000b26 	beq	r4,zero,a664 <___svfiprintf_internal_r+0x854>
    a638:	d9001d84 	addi	r4,sp,118
    a63c:	18c00044 	addi	r3,r3,1
    a640:	10800044 	addi	r2,r2,1
    a644:	41000015 	stw	r4,0(r8)
    a648:	01000044 	movi	r4,1
    a64c:	41000115 	stw	r4,4(r8)
    a650:	d8c01c15 	stw	r3,112(sp)
    a654:	d8801b15 	stw	r2,108(sp)
    a658:	010001c4 	movi	r4,7
    a65c:	20811e16 	blt	r4,r2,aad8 <___svfiprintf_internal_r+0xcc8>
    a660:	42000204 	addi	r8,r8,8
    a664:	da802217 	ldw	r10,136(sp)
    a668:	50000b26 	beq	r10,zero,a698 <___svfiprintf_internal_r+0x888>
    a66c:	d9001d04 	addi	r4,sp,116
    a670:	18c00084 	addi	r3,r3,2
    a674:	10800044 	addi	r2,r2,1
    a678:	41000015 	stw	r4,0(r8)
    a67c:	01000084 	movi	r4,2
    a680:	41000115 	stw	r4,4(r8)
    a684:	d8c01c15 	stw	r3,112(sp)
    a688:	d8801b15 	stw	r2,108(sp)
    a68c:	010001c4 	movi	r4,7
    a690:	20811a16 	blt	r4,r2,aafc <___svfiprintf_internal_r+0xcec>
    a694:	42000204 	addi	r8,r8,8
    a698:	dac02517 	ldw	r11,148(sp)
    a69c:	01002004 	movi	r4,128
    a6a0:	5900a826 	beq	r11,r4,a944 <___svfiprintf_internal_r+0xb34>
    a6a4:	8721c83a 	sub	r16,r16,fp
    a6a8:	0400260e 	bge	zero,r16,a744 <___svfiprintf_internal_r+0x934>
    a6ac:	01c00404 	movi	r7,16
    a6b0:	3c019d0e 	bge	r7,r16,ad28 <___svfiprintf_internal_r+0xf18>
    a6b4:	010000b4 	movhi	r4,2
    a6b8:	2131e204 	addi	r4,r4,-14456
    a6bc:	d9002215 	stw	r4,136(sp)
    a6c0:	382f883a 	mov	r23,r7
    a6c4:	058001c4 	movi	r22,7
    a6c8:	00000306 	br	a6d8 <___svfiprintf_internal_r+0x8c8>
    a6cc:	843ffc04 	addi	r16,r16,-16
    a6d0:	42000204 	addi	r8,r8,8
    a6d4:	bc00110e 	bge	r23,r16,a71c <___svfiprintf_internal_r+0x90c>
    a6d8:	18c00404 	addi	r3,r3,16
    a6dc:	10800044 	addi	r2,r2,1
    a6e0:	44c00015 	stw	r19,0(r8)
    a6e4:	45c00115 	stw	r23,4(r8)
    a6e8:	d8c01c15 	stw	r3,112(sp)
    a6ec:	d8801b15 	stw	r2,108(sp)
    a6f0:	b0bff60e 	bge	r22,r2,a6cc <__alt_mem_Flash_flash_data+0xf400a6cc>
    a6f4:	9009883a 	mov	r4,r18
    a6f8:	a00b883a 	mov	r5,r20
    a6fc:	d9801a04 	addi	r6,sp,104
    a700:	0009c440 	call	9c44 <__ssprint_r>
    a704:	10007e1e 	bne	r2,zero,a900 <___svfiprintf_internal_r+0xaf0>
    a708:	843ffc04 	addi	r16,r16,-16
    a70c:	d8c01c17 	ldw	r3,112(sp)
    a710:	d8801b17 	ldw	r2,108(sp)
    a714:	d811883a 	mov	r8,sp
    a718:	bc3fef16 	blt	r23,r16,a6d8 <__alt_mem_Flash_flash_data+0xf400a6d8>
    a71c:	da802217 	ldw	r10,136(sp)
    a720:	1c07883a 	add	r3,r3,r16
    a724:	10800044 	addi	r2,r2,1
    a728:	42800015 	stw	r10,0(r8)
    a72c:	44000115 	stw	r16,4(r8)
    a730:	d8c01c15 	stw	r3,112(sp)
    a734:	d8801b15 	stw	r2,108(sp)
    a738:	010001c4 	movi	r4,7
    a73c:	2080ce16 	blt	r4,r2,aa78 <___svfiprintf_internal_r+0xc68>
    a740:	42000204 	addi	r8,r8,8
    a744:	dac02617 	ldw	r11,152(sp)
    a748:	1f07883a 	add	r3,r3,fp
    a74c:	10800044 	addi	r2,r2,1
    a750:	42c00015 	stw	r11,0(r8)
    a754:	47000115 	stw	fp,4(r8)
    a758:	d8c01c15 	stw	r3,112(sp)
    a75c:	d8801b15 	stw	r2,108(sp)
    a760:	010001c4 	movi	r4,7
    a764:	2080a316 	blt	r4,r2,a9f4 <___svfiprintf_internal_r+0xbe4>
    a768:	42000204 	addi	r8,r8,8
    a76c:	8c40010c 	andi	r17,r17,4
    a770:	88002b26 	beq	r17,zero,a820 <___svfiprintf_internal_r+0xa10>
    a774:	da802117 	ldw	r10,132(sp)
    a778:	dac02017 	ldw	r11,128(sp)
    a77c:	52e1c83a 	sub	r16,r10,r11
    a780:	0400270e 	bge	zero,r16,a820 <___svfiprintf_internal_r+0xa10>
    a784:	04400404 	movi	r17,16
    a788:	d8801b17 	ldw	r2,108(sp)
    a78c:	8c01900e 	bge	r17,r16,add0 <___svfiprintf_internal_r+0xfc0>
    a790:	014000b4 	movhi	r5,2
    a794:	2971e604 	addi	r5,r5,-14440
    a798:	d9402815 	stw	r5,160(sp)
    a79c:	070001c4 	movi	fp,7
    a7a0:	00000306 	br	a7b0 <___svfiprintf_internal_r+0x9a0>
    a7a4:	843ffc04 	addi	r16,r16,-16
    a7a8:	42000204 	addi	r8,r8,8
    a7ac:	8c00130e 	bge	r17,r16,a7fc <___svfiprintf_internal_r+0x9ec>
    a7b0:	028000b4 	movhi	r10,2
    a7b4:	18c00404 	addi	r3,r3,16
    a7b8:	10800044 	addi	r2,r2,1
    a7bc:	52b1e604 	addi	r10,r10,-14440
    a7c0:	42800015 	stw	r10,0(r8)
    a7c4:	44400115 	stw	r17,4(r8)
    a7c8:	d8c01c15 	stw	r3,112(sp)
    a7cc:	d8801b15 	stw	r2,108(sp)
    a7d0:	e0bff40e 	bge	fp,r2,a7a4 <__alt_mem_Flash_flash_data+0xf400a7a4>
    a7d4:	9009883a 	mov	r4,r18
    a7d8:	a00b883a 	mov	r5,r20
    a7dc:	d9801a04 	addi	r6,sp,104
    a7e0:	0009c440 	call	9c44 <__ssprint_r>
    a7e4:	1000461e 	bne	r2,zero,a900 <___svfiprintf_internal_r+0xaf0>
    a7e8:	843ffc04 	addi	r16,r16,-16
    a7ec:	d8c01c17 	ldw	r3,112(sp)
    a7f0:	d8801b17 	ldw	r2,108(sp)
    a7f4:	d811883a 	mov	r8,sp
    a7f8:	8c3fed16 	blt	r17,r16,a7b0 <__alt_mem_Flash_flash_data+0xf400a7b0>
    a7fc:	dac02817 	ldw	r11,160(sp)
    a800:	1c07883a 	add	r3,r3,r16
    a804:	10800044 	addi	r2,r2,1
    a808:	42c00015 	stw	r11,0(r8)
    a80c:	44000115 	stw	r16,4(r8)
    a810:	d8c01c15 	stw	r3,112(sp)
    a814:	d8801b15 	stw	r2,108(sp)
    a818:	010001c4 	movi	r4,7
    a81c:	2080fd16 	blt	r4,r2,ac14 <___svfiprintf_internal_r+0xe04>
    a820:	dd802017 	ldw	r22,128(sp)
    a824:	da802117 	ldw	r10,132(sp)
    a828:	b280010e 	bge	r22,r10,a830 <___svfiprintf_internal_r+0xa20>
    a82c:	502d883a 	mov	r22,r10
    a830:	dac02417 	ldw	r11,144(sp)
    a834:	5d97883a 	add	r11,r11,r22
    a838:	dac02415 	stw	r11,144(sp)
    a83c:	1800751e 	bne	r3,zero,aa14 <___svfiprintf_internal_r+0xc04>
    a840:	a8800007 	ldb	r2,0(r21)
    a844:	d8001b15 	stw	zero,108(sp)
    a848:	d811883a 	mov	r8,sp
    a84c:	103d961e 	bne	r2,zero,9ea8 <__alt_mem_Flash_flash_data+0xf4009ea8>
    a850:	a82d883a 	mov	r22,r21
    a854:	003dad06 	br	9f0c <__alt_mem_Flash_flash_data+0xf4009f0c>
    a858:	10803fcc 	andi	r2,r2,255
    a85c:	00c00044 	movi	r3,1
    a860:	10fe2f1e 	bne	r2,r3,a120 <__alt_mem_Flash_flash_data+0xf400a120>
    a864:	5000e026 	beq	r10,zero,abe8 <___svfiprintf_internal_r+0xdd8>
    a868:	dc002015 	stw	r16,128(sp)
    a86c:	dc402215 	stw	r17,136(sp)
    a870:	dd801a04 	addi	r22,sp,104
    a874:	402f883a 	mov	r23,r8
    a878:	5839883a 	mov	fp,r11
    a87c:	4821883a 	mov	r16,r9
    a880:	5023883a 	mov	r17,r10
    a884:	8009883a 	mov	r4,r16
    a888:	880b883a 	mov	r5,r17
    a88c:	01800284 	movi	r6,10
    a890:	000f883a 	mov	r7,zero
    a894:	000d1c40 	call	d1c4 <__umoddi3>
    a898:	10800c04 	addi	r2,r2,48
    a89c:	b5bfffc4 	addi	r22,r22,-1
    a8a0:	8009883a 	mov	r4,r16
    a8a4:	880b883a 	mov	r5,r17
    a8a8:	01800284 	movi	r6,10
    a8ac:	000f883a 	mov	r7,zero
    a8b0:	b0800005 	stb	r2,0(r22)
    a8b4:	000cc040 	call	cc04 <__udivdi3>
    a8b8:	1021883a 	mov	r16,r2
    a8bc:	10c4b03a 	or	r2,r2,r3
    a8c0:	1823883a 	mov	r17,r3
    a8c4:	103fef1e 	bne	r2,zero,a884 <__alt_mem_Flash_flash_data+0xf400a884>
    a8c8:	da801e17 	ldw	r10,120(sp)
    a8cc:	e017883a 	mov	r11,fp
    a8d0:	dc002017 	ldw	r16,128(sp)
    a8d4:	dc402217 	ldw	r17,136(sp)
    a8d8:	b811883a 	mov	r8,r23
    a8dc:	dd802615 	stw	r22,152(sp)
    a8e0:	55b9c83a 	sub	fp,r10,r22
    a8e4:	003e2006 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    a8e8:	d8801c17 	ldw	r2,112(sp)
    a8ec:	10000426 	beq	r2,zero,a900 <___svfiprintf_internal_r+0xaf0>
    a8f0:	d9002917 	ldw	r4,164(sp)
    a8f4:	d9402717 	ldw	r5,156(sp)
    a8f8:	d9801a04 	addi	r6,sp,104
    a8fc:	0009c440 	call	9c44 <__ssprint_r>
    a900:	da802717 	ldw	r10,156(sp)
    a904:	5080030b 	ldhu	r2,12(r10)
    a908:	1080100c 	andi	r2,r2,64
    a90c:	1000511e 	bne	r2,zero,aa54 <___svfiprintf_internal_r+0xc44>
    a910:	d8802417 	ldw	r2,144(sp)
    a914:	dfc03617 	ldw	ra,216(sp)
    a918:	df003517 	ldw	fp,212(sp)
    a91c:	ddc03417 	ldw	r23,208(sp)
    a920:	dd803317 	ldw	r22,204(sp)
    a924:	dd403217 	ldw	r21,200(sp)
    a928:	dd003117 	ldw	r20,196(sp)
    a92c:	dcc03017 	ldw	r19,192(sp)
    a930:	dc802f17 	ldw	r18,188(sp)
    a934:	dc402e17 	ldw	r17,184(sp)
    a938:	dc002d17 	ldw	r16,180(sp)
    a93c:	dec03704 	addi	sp,sp,220
    a940:	f800283a 	ret
    a944:	da802117 	ldw	r10,132(sp)
    a948:	dac02017 	ldw	r11,128(sp)
    a94c:	52edc83a 	sub	r22,r10,r11
    a950:	05bf540e 	bge	zero,r22,a6a4 <__alt_mem_Flash_flash_data+0xf400a6a4>
    a954:	02400404 	movi	r9,16
    a958:	4d81210e 	bge	r9,r22,ade0 <___svfiprintf_internal_r+0xfd0>
    a95c:	014000b4 	movhi	r5,2
    a960:	2971e204 	addi	r5,r5,-14456
    a964:	d9402215 	stw	r5,136(sp)
    a968:	05c001c4 	movi	r23,7
    a96c:	00000306 	br	a97c <___svfiprintf_internal_r+0xb6c>
    a970:	b5bffc04 	addi	r22,r22,-16
    a974:	42000204 	addi	r8,r8,8
    a978:	4d80130e 	bge	r9,r22,a9c8 <___svfiprintf_internal_r+0xbb8>
    a97c:	18c00404 	addi	r3,r3,16
    a980:	10800044 	addi	r2,r2,1
    a984:	44c00015 	stw	r19,0(r8)
    a988:	42400115 	stw	r9,4(r8)
    a98c:	d8c01c15 	stw	r3,112(sp)
    a990:	d8801b15 	stw	r2,108(sp)
    a994:	b8bff60e 	bge	r23,r2,a970 <__alt_mem_Flash_flash_data+0xf400a970>
    a998:	9009883a 	mov	r4,r18
    a99c:	a00b883a 	mov	r5,r20
    a9a0:	d9801a04 	addi	r6,sp,104
    a9a4:	da402c15 	stw	r9,176(sp)
    a9a8:	0009c440 	call	9c44 <__ssprint_r>
    a9ac:	da402c17 	ldw	r9,176(sp)
    a9b0:	103fd31e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    a9b4:	b5bffc04 	addi	r22,r22,-16
    a9b8:	d8c01c17 	ldw	r3,112(sp)
    a9bc:	d8801b17 	ldw	r2,108(sp)
    a9c0:	d811883a 	mov	r8,sp
    a9c4:	4dbfed16 	blt	r9,r22,a97c <__alt_mem_Flash_flash_data+0xf400a97c>
    a9c8:	da802217 	ldw	r10,136(sp)
    a9cc:	1d87883a 	add	r3,r3,r22
    a9d0:	10800044 	addi	r2,r2,1
    a9d4:	42800015 	stw	r10,0(r8)
    a9d8:	45800115 	stw	r22,4(r8)
    a9dc:	d8c01c15 	stw	r3,112(sp)
    a9e0:	d8801b15 	stw	r2,108(sp)
    a9e4:	010001c4 	movi	r4,7
    a9e8:	2080c616 	blt	r4,r2,ad04 <___svfiprintf_internal_r+0xef4>
    a9ec:	42000204 	addi	r8,r8,8
    a9f0:	003f2c06 	br	a6a4 <__alt_mem_Flash_flash_data+0xf400a6a4>
    a9f4:	9009883a 	mov	r4,r18
    a9f8:	a00b883a 	mov	r5,r20
    a9fc:	d9801a04 	addi	r6,sp,104
    aa00:	0009c440 	call	9c44 <__ssprint_r>
    aa04:	103fbe1e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    aa08:	d8c01c17 	ldw	r3,112(sp)
    aa0c:	d811883a 	mov	r8,sp
    aa10:	003f5606 	br	a76c <__alt_mem_Flash_flash_data+0xf400a76c>
    aa14:	9009883a 	mov	r4,r18
    aa18:	a00b883a 	mov	r5,r20
    aa1c:	d9801a04 	addi	r6,sp,104
    aa20:	0009c440 	call	9c44 <__ssprint_r>
    aa24:	103f8626 	beq	r2,zero,a840 <__alt_mem_Flash_flash_data+0xf400a840>
    aa28:	003fb506 	br	a900 <__alt_mem_Flash_flash_data+0xf400a900>
    aa2c:	10803fcc 	andi	r2,r2,255
    aa30:	10003b1e 	bne	r2,zero,ab20 <___svfiprintf_internal_r+0xd10>
    aa34:	8880004c 	andi	r2,r17,1
    aa38:	10007d26 	beq	r2,zero,ac30 <___svfiprintf_internal_r+0xe20>
    aa3c:	00800c04 	movi	r2,48
    aa40:	d8c019c4 	addi	r3,sp,103
    aa44:	d88019c5 	stb	r2,103(sp)
    aa48:	df002b17 	ldw	fp,172(sp)
    aa4c:	d8c02615 	stw	r3,152(sp)
    aa50:	003dc506 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    aa54:	00bfffc4 	movi	r2,-1
    aa58:	003fae06 	br	a914 <__alt_mem_Flash_flash_data+0xf400a914>
    aa5c:	9009883a 	mov	r4,r18
    aa60:	a00b883a 	mov	r5,r20
    aa64:	d9801a04 	addi	r6,sp,104
    aa68:	0009c440 	call	9c44 <__ssprint_r>
    aa6c:	103fa41e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    aa70:	d811883a 	mov	r8,sp
    aa74:	003d2206 	br	9f00 <__alt_mem_Flash_flash_data+0xf4009f00>
    aa78:	9009883a 	mov	r4,r18
    aa7c:	a00b883a 	mov	r5,r20
    aa80:	d9801a04 	addi	r6,sp,104
    aa84:	0009c440 	call	9c44 <__ssprint_r>
    aa88:	103f9d1e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    aa8c:	d8c01c17 	ldw	r3,112(sp)
    aa90:	d8801b17 	ldw	r2,108(sp)
    aa94:	d811883a 	mov	r8,sp
    aa98:	003f2a06 	br	a744 <__alt_mem_Flash_flash_data+0xf400a744>
    aa9c:	d9402a17 	ldw	r5,168(sp)
    aaa0:	d8c01a04 	addi	r3,sp,104
    aaa4:	488003cc 	andi	r2,r9,15
    aaa8:	5008973a 	slli	r4,r10,28
    aaac:	2885883a 	add	r2,r5,r2
    aab0:	4812d13a 	srli	r9,r9,4
    aab4:	10800003 	ldbu	r2,0(r2)
    aab8:	5014d13a 	srli	r10,r10,4
    aabc:	18ffffc4 	addi	r3,r3,-1
    aac0:	2252b03a 	or	r9,r4,r9
    aac4:	18800005 	stb	r2,0(r3)
    aac8:	4a84b03a 	or	r2,r9,r10
    aacc:	103ff51e 	bne	r2,zero,aaa4 <__alt_mem_Flash_flash_data+0xf400aaa4>
    aad0:	d8c02615 	stw	r3,152(sp)
    aad4:	003da206 	br	a160 <__alt_mem_Flash_flash_data+0xf400a160>
    aad8:	9009883a 	mov	r4,r18
    aadc:	a00b883a 	mov	r5,r20
    aae0:	d9801a04 	addi	r6,sp,104
    aae4:	0009c440 	call	9c44 <__ssprint_r>
    aae8:	103f851e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    aaec:	d8c01c17 	ldw	r3,112(sp)
    aaf0:	d8801b17 	ldw	r2,108(sp)
    aaf4:	d811883a 	mov	r8,sp
    aaf8:	003eda06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    aafc:	9009883a 	mov	r4,r18
    ab00:	a00b883a 	mov	r5,r20
    ab04:	d9801a04 	addi	r6,sp,104
    ab08:	0009c440 	call	9c44 <__ssprint_r>
    ab0c:	103f7c1e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    ab10:	d8c01c17 	ldw	r3,112(sp)
    ab14:	d8801b17 	ldw	r2,108(sp)
    ab18:	d811883a 	mov	r8,sp
    ab1c:	003ede06 	br	a698 <__alt_mem_Flash_flash_data+0xf400a698>
    ab20:	da801a04 	addi	r10,sp,104
    ab24:	da802615 	stw	r10,152(sp)
    ab28:	003d8f06 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ab2c:	8880040c 	andi	r2,r17,16
    ab30:	10004c1e 	bne	r2,zero,ac64 <___svfiprintf_internal_r+0xe54>
    ab34:	8880100c 	andi	r2,r17,64
    ab38:	da802317 	ldw	r10,140(sp)
    ab3c:	10004a26 	beq	r2,zero,ac68 <___svfiprintf_internal_r+0xe58>
    ab40:	5240000b 	ldhu	r9,0(r10)
    ab44:	dac02317 	ldw	r11,140(sp)
    ab48:	0015883a 	mov	r10,zero
    ab4c:	00800044 	movi	r2,1
    ab50:	5ac00104 	addi	r11,r11,4
    ab54:	dac02315 	stw	r11,140(sp)
    ab58:	4807883a 	mov	r3,r9
    ab5c:	003d6506 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    ab60:	9009883a 	mov	r4,r18
    ab64:	a00b883a 	mov	r5,r20
    ab68:	d9801a04 	addi	r6,sp,104
    ab6c:	0009c440 	call	9c44 <__ssprint_r>
    ab70:	103f631e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    ab74:	d8c01c17 	ldw	r3,112(sp)
    ab78:	d8801b17 	ldw	r2,108(sp)
    ab7c:	d811883a 	mov	r8,sp
    ab80:	003eab06 	br	a630 <__alt_mem_Flash_flash_data+0xf400a630>
    ab84:	8880040c 	andi	r2,r17,16
    ab88:	1000331e 	bne	r2,zero,ac58 <___svfiprintf_internal_r+0xe48>
    ab8c:	8880100c 	andi	r2,r17,64
    ab90:	da802317 	ldw	r10,140(sp)
    ab94:	10003126 	beq	r2,zero,ac5c <___svfiprintf_internal_r+0xe4c>
    ab98:	5240000b 	ldhu	r9,0(r10)
    ab9c:	dac02317 	ldw	r11,140(sp)
    aba0:	0015883a 	mov	r10,zero
    aba4:	0005883a 	mov	r2,zero
    aba8:	5ac00104 	addi	r11,r11,4
    abac:	dac02315 	stw	r11,140(sp)
    abb0:	4807883a 	mov	r3,r9
    abb4:	003d4f06 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    abb8:	10803fcc 	andi	r2,r2,255
    abbc:	1080201c 	xori	r2,r2,128
    abc0:	10bfe004 	addi	r2,r2,-128
    abc4:	01000c04 	movi	r4,48
    abc8:	11005b26 	beq	r2,r4,ad38 <___svfiprintf_internal_r+0xf28>
    abcc:	da802617 	ldw	r10,152(sp)
    abd0:	d8801e17 	ldw	r2,120(sp)
    abd4:	193fffc5 	stb	r4,-1(r3)
    abd8:	52bfffc4 	addi	r10,r10,-1
    abdc:	da802615 	stw	r10,152(sp)
    abe0:	12b9c83a 	sub	fp,r2,r10
    abe4:	003d6006 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    abe8:	00800244 	movi	r2,9
    abec:	127f1e36 	bltu	r2,r9,a868 <__alt_mem_Flash_flash_data+0xf400a868>
    abf0:	4a400c04 	addi	r9,r9,48
    abf4:	d8c019c4 	addi	r3,sp,103
    abf8:	da4019c5 	stb	r9,103(sp)
    abfc:	df002b17 	ldw	fp,172(sp)
    ac00:	d8c02615 	stw	r3,152(sp)
    ac04:	003d5806 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ac08:	d8802315 	stw	r2,140(sp)
    ac0c:	a9000007 	ldb	r4,0(r21)
    ac10:	003ccb06 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    ac14:	9009883a 	mov	r4,r18
    ac18:	a00b883a 	mov	r5,r20
    ac1c:	d9801a04 	addi	r6,sp,104
    ac20:	0009c440 	call	9c44 <__ssprint_r>
    ac24:	103f361e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    ac28:	d8c01c17 	ldw	r3,112(sp)
    ac2c:	003efc06 	br	a820 <__alt_mem_Flash_flash_data+0xf400a820>
    ac30:	d8c01a04 	addi	r3,sp,104
    ac34:	d8c02615 	stw	r3,152(sp)
    ac38:	003d4b06 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ac3c:	da802317 	ldw	r10,140(sp)
    ac40:	1a400017 	ldw	r9,0(r3)
    ac44:	52800104 	addi	r10,r10,4
    ac48:	da802315 	stw	r10,140(sp)
    ac4c:	4815d7fa 	srai	r10,r9,31
    ac50:	5005883a 	mov	r2,r10
    ac54:	003d9c06 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    ac58:	da802317 	ldw	r10,140(sp)
    ac5c:	52400017 	ldw	r9,0(r10)
    ac60:	003fce06 	br	ab9c <__alt_mem_Flash_flash_data+0xf400ab9c>
    ac64:	da802317 	ldw	r10,140(sp)
    ac68:	52400017 	ldw	r9,0(r10)
    ac6c:	003fb506 	br	ab44 <__alt_mem_Flash_flash_data+0xf400ab44>
    ac70:	8880100c 	andi	r2,r17,64
    ac74:	da802317 	ldw	r10,140(sp)
    ac78:	103e1926 	beq	r2,zero,a4e0 <__alt_mem_Flash_flash_data+0xf400a4e0>
    ac7c:	dac02317 	ldw	r11,140(sp)
    ac80:	5240000b 	ldhu	r9,0(r10)
    ac84:	0015883a 	mov	r10,zero
    ac88:	5ac00104 	addi	r11,r11,4
    ac8c:	dac02315 	stw	r11,140(sp)
    ac90:	003de406 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    ac94:	a9000007 	ldb	r4,0(r21)
    ac98:	003ca906 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    ac9c:	dac02317 	ldw	r11,140(sp)
    aca0:	da802417 	ldw	r10,144(sp)
    aca4:	58800017 	ldw	r2,0(r11)
    aca8:	5007d7fa 	srai	r3,r10,31
    acac:	5ac00104 	addi	r11,r11,4
    acb0:	dac02315 	stw	r11,140(sp)
    acb4:	12800015 	stw	r10,0(r2)
    acb8:	10c00115 	stw	r3,4(r2)
    acbc:	003c7806 	br	9ea0 <__alt_mem_Flash_flash_data+0xf4009ea0>
    acc0:	00800c04 	movi	r2,48
    acc4:	d8801d05 	stb	r2,116(sp)
    acc8:	d9001d45 	stb	r4,117(sp)
    accc:	8c400094 	ori	r17,r17,2
    acd0:	00800084 	movi	r2,2
    acd4:	003d0706 	br	a0f4 <__alt_mem_Flash_flash_data+0xf400a0f4>
    acd8:	ad400044 	addi	r21,r21,1
    acdc:	8c400814 	ori	r17,r17,32
    ace0:	11000047 	ldb	r4,1(r2)
    ace4:	003c9606 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    ace8:	dac02317 	ldw	r11,140(sp)
    acec:	da802417 	ldw	r10,144(sp)
    acf0:	58800017 	ldw	r2,0(r11)
    acf4:	5ac00104 	addi	r11,r11,4
    acf8:	dac02315 	stw	r11,140(sp)
    acfc:	12800015 	stw	r10,0(r2)
    ad00:	003c6706 	br	9ea0 <__alt_mem_Flash_flash_data+0xf4009ea0>
    ad04:	9009883a 	mov	r4,r18
    ad08:	a00b883a 	mov	r5,r20
    ad0c:	d9801a04 	addi	r6,sp,104
    ad10:	0009c440 	call	9c44 <__ssprint_r>
    ad14:	103efa1e 	bne	r2,zero,a900 <__alt_mem_Flash_flash_data+0xf400a900>
    ad18:	d8c01c17 	ldw	r3,112(sp)
    ad1c:	d8801b17 	ldw	r2,108(sp)
    ad20:	d811883a 	mov	r8,sp
    ad24:	003e5f06 	br	a6a4 <__alt_mem_Flash_flash_data+0xf400a6a4>
    ad28:	02c000b4 	movhi	r11,2
    ad2c:	5af1e204 	addi	r11,r11,-14456
    ad30:	dac02215 	stw	r11,136(sp)
    ad34:	003e7906 	br	a71c <__alt_mem_Flash_flash_data+0xf400a71c>
    ad38:	da801e17 	ldw	r10,120(sp)
    ad3c:	d8c02617 	ldw	r3,152(sp)
    ad40:	50f9c83a 	sub	fp,r10,r3
    ad44:	003d0806 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ad48:	da002c15 	stw	r8,176(sp)
    ad4c:	0000c180 	call	c18 <strlen>
    ad50:	1039883a 	mov	fp,r2
    ad54:	dac01d83 	ldbu	r11,118(sp)
    ad58:	ddc02315 	stw	r23,140(sp)
    ad5c:	0021883a 	mov	r16,zero
    ad60:	da002c17 	ldw	r8,176(sp)
    ad64:	003d0006 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ad68:	00800184 	movi	r2,6
    ad6c:	1400012e 	bgeu	r2,r16,ad74 <___svfiprintf_internal_r+0xf64>
    ad70:	1021883a 	mov	r16,r2
    ad74:	8039883a 	mov	fp,r16
    ad78:	802d883a 	mov	r22,r16
    ad7c:	80002116 	blt	r16,zero,ae04 <___svfiprintf_internal_r+0xff4>
    ad80:	008000b4 	movhi	r2,2
    ad84:	10b17e04 	addi	r2,r2,-14856
    ad88:	dd802015 	stw	r22,128(sp)
    ad8c:	ddc02315 	stw	r23,140(sp)
    ad90:	d8802615 	stw	r2,152(sp)
    ad94:	003d5d06 	br	a30c <__alt_mem_Flash_flash_data+0xf400a30c>
    ad98:	04001004 	movi	r16,64
    ad9c:	800b883a 	mov	r5,r16
    ada0:	0007a140 	call	7a14 <_malloc_r>
    ada4:	da802717 	ldw	r10,156(sp)
    ada8:	50800015 	stw	r2,0(r10)
    adac:	50800415 	stw	r2,16(r10)
    adb0:	10002026 	beq	r2,zero,ae34 <___svfiprintf_internal_r+0x1024>
    adb4:	da802717 	ldw	r10,156(sp)
    adb8:	54000515 	stw	r16,20(r10)
    adbc:	003c2806 	br	9e60 <__alt_mem_Flash_flash_data+0xf4009e60>
    adc0:	010000b4 	movhi	r4,2
    adc4:	2131e604 	addi	r4,r4,-14440
    adc8:	d9002815 	stw	r4,160(sp)
    adcc:	003d7e06 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    add0:	010000b4 	movhi	r4,2
    add4:	2131e604 	addi	r4,r4,-14440
    add8:	d9002815 	stw	r4,160(sp)
    addc:	003e8706 	br	a7fc <__alt_mem_Flash_flash_data+0xf400a7fc>
    ade0:	010000b4 	movhi	r4,2
    ade4:	2131e204 	addi	r4,r4,-14456
    ade8:	d9002215 	stw	r4,136(sp)
    adec:	003ef606 	br	a9c8 <__alt_mem_Flash_flash_data+0xf400a9c8>
    adf0:	8039883a 	mov	fp,r16
    adf4:	dac01d83 	ldbu	r11,118(sp)
    adf8:	ddc02315 	stw	r23,140(sp)
    adfc:	0021883a 	mov	r16,zero
    ae00:	003cd906 	br	a168 <__alt_mem_Flash_flash_data+0xf400a168>
    ae04:	002d883a 	mov	r22,zero
    ae08:	003fdd06 	br	ad80 <__alt_mem_Flash_flash_data+0xf400ad80>
    ae0c:	dac02317 	ldw	r11,140(sp)
    ae10:	a805883a 	mov	r2,r21
    ae14:	502b883a 	mov	r21,r10
    ae18:	5c000017 	ldw	r16,0(r11)
    ae1c:	59000104 	addi	r4,r11,4
    ae20:	d9002315 	stw	r4,140(sp)
    ae24:	803fae0e 	bge	r16,zero,ace0 <__alt_mem_Flash_flash_data+0xf400ace0>
    ae28:	043fffc4 	movi	r16,-1
    ae2c:	11000047 	ldb	r4,1(r2)
    ae30:	003c4306 	br	9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    ae34:	dac02917 	ldw	r11,164(sp)
    ae38:	00800304 	movi	r2,12
    ae3c:	58800015 	stw	r2,0(r11)
    ae40:	00bfffc4 	movi	r2,-1
    ae44:	003eb306 	br	a914 <__alt_mem_Flash_flash_data+0xf400a914>

0000ae48 <__sprint_r.part.0>:
    ae48:	28801917 	ldw	r2,100(r5)
    ae4c:	defff604 	addi	sp,sp,-40
    ae50:	dd400515 	stw	r21,20(sp)
    ae54:	dcc00315 	stw	r19,12(sp)
    ae58:	dfc00915 	stw	ra,36(sp)
    ae5c:	df000815 	stw	fp,32(sp)
    ae60:	ddc00715 	stw	r23,28(sp)
    ae64:	dd800615 	stw	r22,24(sp)
    ae68:	dd000415 	stw	r20,16(sp)
    ae6c:	dc800215 	stw	r18,8(sp)
    ae70:	dc400115 	stw	r17,4(sp)
    ae74:	dc000015 	stw	r16,0(sp)
    ae78:	1088000c 	andi	r2,r2,8192
    ae7c:	2827883a 	mov	r19,r5
    ae80:	302b883a 	mov	r21,r6
    ae84:	10002d26 	beq	r2,zero,af3c <__sprint_r.part.0+0xf4>
    ae88:	30800217 	ldw	r2,8(r6)
    ae8c:	35800017 	ldw	r22,0(r6)
    ae90:	10002826 	beq	r2,zero,af34 <__sprint_r.part.0+0xec>
    ae94:	2029883a 	mov	r20,r4
    ae98:	b5c00104 	addi	r23,r22,4
    ae9c:	04bfffc4 	movi	r18,-1
    aea0:	bc400017 	ldw	r17,0(r23)
    aea4:	b4000017 	ldw	r16,0(r22)
    aea8:	0039883a 	mov	fp,zero
    aeac:	8822d0ba 	srli	r17,r17,2
    aeb0:	04400316 	blt	zero,r17,aec0 <__sprint_r.part.0+0x78>
    aeb4:	00001806 	br	af18 <__sprint_r.part.0+0xd0>
    aeb8:	84000104 	addi	r16,r16,4
    aebc:	8f001526 	beq	r17,fp,af14 <__sprint_r.part.0+0xcc>
    aec0:	81400017 	ldw	r5,0(r16)
    aec4:	a009883a 	mov	r4,r20
    aec8:	980d883a 	mov	r6,r19
    aecc:	000c5840 	call	c584 <_fputwc_r>
    aed0:	e7000044 	addi	fp,fp,1
    aed4:	14bff81e 	bne	r2,r18,aeb8 <__alt_mem_Flash_flash_data+0xf400aeb8>
    aed8:	9005883a 	mov	r2,r18
    aedc:	a8000215 	stw	zero,8(r21)
    aee0:	a8000115 	stw	zero,4(r21)
    aee4:	dfc00917 	ldw	ra,36(sp)
    aee8:	df000817 	ldw	fp,32(sp)
    aeec:	ddc00717 	ldw	r23,28(sp)
    aef0:	dd800617 	ldw	r22,24(sp)
    aef4:	dd400517 	ldw	r21,20(sp)
    aef8:	dd000417 	ldw	r20,16(sp)
    aefc:	dcc00317 	ldw	r19,12(sp)
    af00:	dc800217 	ldw	r18,8(sp)
    af04:	dc400117 	ldw	r17,4(sp)
    af08:	dc000017 	ldw	r16,0(sp)
    af0c:	dec00a04 	addi	sp,sp,40
    af10:	f800283a 	ret
    af14:	a8800217 	ldw	r2,8(r21)
    af18:	8c63883a 	add	r17,r17,r17
    af1c:	8c63883a 	add	r17,r17,r17
    af20:	1445c83a 	sub	r2,r2,r17
    af24:	a8800215 	stw	r2,8(r21)
    af28:	b5800204 	addi	r22,r22,8
    af2c:	bdc00204 	addi	r23,r23,8
    af30:	103fdb1e 	bne	r2,zero,aea0 <__alt_mem_Flash_flash_data+0xf400aea0>
    af34:	0005883a 	mov	r2,zero
    af38:	003fe806 	br	aedc <__alt_mem_Flash_flash_data+0xf400aedc>
    af3c:	00071340 	call	7134 <__sfvwrite_r>
    af40:	003fe606 	br	aedc <__alt_mem_Flash_flash_data+0xf400aedc>

0000af44 <__sprint_r>:
    af44:	30c00217 	ldw	r3,8(r6)
    af48:	18000126 	beq	r3,zero,af50 <__sprint_r+0xc>
    af4c:	000ae481 	jmpi	ae48 <__sprint_r.part.0>
    af50:	30000115 	stw	zero,4(r6)
    af54:	0005883a 	mov	r2,zero
    af58:	f800283a 	ret

0000af5c <___vfiprintf_internal_r>:
    af5c:	deffca04 	addi	sp,sp,-216
    af60:	dd803215 	stw	r22,200(sp)
    af64:	dd403115 	stw	r21,196(sp)
    af68:	dfc03515 	stw	ra,212(sp)
    af6c:	df003415 	stw	fp,208(sp)
    af70:	ddc03315 	stw	r23,204(sp)
    af74:	dd003015 	stw	r20,192(sp)
    af78:	dcc02f15 	stw	r19,188(sp)
    af7c:	dc802e15 	stw	r18,184(sp)
    af80:	dc402d15 	stw	r17,180(sp)
    af84:	dc002c15 	stw	r16,176(sp)
    af88:	d9002015 	stw	r4,128(sp)
    af8c:	d9c02215 	stw	r7,136(sp)
    af90:	282b883a 	mov	r21,r5
    af94:	302d883a 	mov	r22,r6
    af98:	20000226 	beq	r4,zero,afa4 <___vfiprintf_internal_r+0x48>
    af9c:	20800e17 	ldw	r2,56(r4)
    afa0:	1001b126 	beq	r2,zero,b668 <___vfiprintf_internal_r+0x70c>
    afa4:	a880030b 	ldhu	r2,12(r21)
    afa8:	10c8000c 	andi	r3,r2,8192
    afac:	1800061e 	bne	r3,zero,afc8 <___vfiprintf_internal_r+0x6c>
    afb0:	a9001917 	ldw	r4,100(r21)
    afb4:	00f7ffc4 	movi	r3,-8193
    afb8:	10880014 	ori	r2,r2,8192
    afbc:	20c6703a 	and	r3,r4,r3
    afc0:	a880030d 	sth	r2,12(r21)
    afc4:	a8c01915 	stw	r3,100(r21)
    afc8:	10c0020c 	andi	r3,r2,8
    afcc:	18018926 	beq	r3,zero,b5f4 <___vfiprintf_internal_r+0x698>
    afd0:	a8c00417 	ldw	r3,16(r21)
    afd4:	18018726 	beq	r3,zero,b5f4 <___vfiprintf_internal_r+0x698>
    afd8:	1080068c 	andi	r2,r2,26
    afdc:	00c00284 	movi	r3,10
    afe0:	10c18c26 	beq	r2,r3,b614 <___vfiprintf_internal_r+0x6b8>
    afe4:	d8801a04 	addi	r2,sp,104
    afe8:	d8c019c4 	addi	r3,sp,103
    afec:	070000b4 	movhi	fp,2
    aff0:	05c000b4 	movhi	r23,2
    aff4:	10c9c83a 	sub	r4,r2,r3
    aff8:	e731ee04 	addi	fp,fp,-14408
    affc:	bdf1ea04 	addi	r23,r23,-14424
    b000:	d8801e15 	stw	r2,120(sp)
    b004:	d8c01f15 	stw	r3,124(sp)
    b008:	dec01a15 	stw	sp,104(sp)
    b00c:	d8001c15 	stw	zero,112(sp)
    b010:	d8001b15 	stw	zero,108(sp)
    b014:	d8002615 	stw	zero,152(sp)
    b018:	d8002315 	stw	zero,140(sp)
    b01c:	d9002715 	stw	r4,156(sp)
    b020:	d811883a 	mov	r8,sp
    b024:	dd402115 	stw	r21,132(sp)
    b028:	b021883a 	mov	r16,r22
    b02c:	80800007 	ldb	r2,0(r16)
    b030:	10037226 	beq	r2,zero,bdfc <___vfiprintf_internal_r+0xea0>
    b034:	01000944 	movi	r4,37
    b038:	11037026 	beq	r2,r4,bdfc <___vfiprintf_internal_r+0xea0>
    b03c:	8005883a 	mov	r2,r16
    b040:	00000106 	br	b048 <___vfiprintf_internal_r+0xec>
    b044:	19000326 	beq	r3,r4,b054 <___vfiprintf_internal_r+0xf8>
    b048:	10800044 	addi	r2,r2,1
    b04c:	10c00007 	ldb	r3,0(r2)
    b050:	183ffc1e 	bne	r3,zero,b044 <__alt_mem_Flash_flash_data+0xf400b044>
    b054:	1425c83a 	sub	r18,r2,r16
    b058:	1023883a 	mov	r17,r2
    b05c:	90001026 	beq	r18,zero,b0a0 <___vfiprintf_internal_r+0x144>
    b060:	d8c01c17 	ldw	r3,112(sp)
    b064:	d8801b17 	ldw	r2,108(sp)
    b068:	44000015 	stw	r16,0(r8)
    b06c:	90c7883a 	add	r3,r18,r3
    b070:	10800044 	addi	r2,r2,1
    b074:	44800115 	stw	r18,4(r8)
    b078:	d8c01c15 	stw	r3,112(sp)
    b07c:	d8801b15 	stw	r2,108(sp)
    b080:	010001c4 	movi	r4,7
    b084:	2080750e 	bge	r4,r2,b25c <___vfiprintf_internal_r+0x300>
    b088:	18036f1e 	bne	r3,zero,be48 <___vfiprintf_internal_r+0xeec>
    b08c:	d8802317 	ldw	r2,140(sp)
    b090:	d8001b15 	stw	zero,108(sp)
    b094:	d811883a 	mov	r8,sp
    b098:	1485883a 	add	r2,r2,r18
    b09c:	d8802315 	stw	r2,140(sp)
    b0a0:	88800007 	ldb	r2,0(r17)
    b0a4:	10041026 	beq	r2,zero,c0e8 <___vfiprintf_internal_r+0x118c>
    b0a8:	88c00047 	ldb	r3,1(r17)
    b0ac:	88800044 	addi	r2,r17,1
    b0b0:	d8001d85 	stb	zero,118(sp)
    b0b4:	000f883a 	mov	r7,zero
    b0b8:	027fffc4 	movi	r9,-1
    b0bc:	0025883a 	mov	r18,zero
    b0c0:	002b883a 	mov	r21,zero
    b0c4:	01401604 	movi	r5,88
    b0c8:	01800244 	movi	r6,9
    b0cc:	03400a84 	movi	r13,42
    b0d0:	03001b04 	movi	r12,108
    b0d4:	14000044 	addi	r16,r2,1
    b0d8:	18bff804 	addi	r2,r3,-32
    b0dc:	28825536 	bltu	r5,r2,ba34 <___vfiprintf_internal_r+0xad8>
    b0e0:	100490ba 	slli	r2,r2,2
    b0e4:	01000074 	movhi	r4,1
    b0e8:	212c3e04 	addi	r4,r4,-20232
    b0ec:	1105883a 	add	r2,r2,r4
    b0f0:	10800017 	ldw	r2,0(r2)
    b0f4:	1000683a 	jmp	r2
    b0f8:	0000b7f8 	rdprs	zero,zero,735
    b0fc:	0000ba34 	movhi	zero,744
    b100:	0000ba34 	movhi	zero,744
    b104:	0000b818 	cmpnei	zero,zero,736
    b108:	0000ba34 	movhi	zero,744
    b10c:	0000ba34 	movhi	zero,744
    b110:	0000ba34 	movhi	zero,744
    b114:	0000ba34 	movhi	zero,744
    b118:	0000ba34 	movhi	zero,744
    b11c:	0000ba34 	movhi	zero,744
    b120:	0000b828 	cmpgeui	zero,zero,736
    b124:	0000b848 	cmpgei	zero,zero,737
    b128:	0000ba34 	movhi	zero,744
    b12c:	0000b670 	cmpltui	zero,zero,729
    b130:	0000b75c 	xori	zero,zero,733
    b134:	0000ba34 	movhi	zero,744
    b138:	0000b6dc 	xori	zero,zero,731
    b13c:	0000b6ec 	andhi	zero,zero,731
    b140:	0000b6ec 	andhi	zero,zero,731
    b144:	0000b6ec 	andhi	zero,zero,731
    b148:	0000b6ec 	andhi	zero,zero,731
    b14c:	0000b6ec 	andhi	zero,zero,731
    b150:	0000b6ec 	andhi	zero,zero,731
    b154:	0000b6ec 	andhi	zero,zero,731
    b158:	0000b6ec 	andhi	zero,zero,731
    b15c:	0000b6ec 	andhi	zero,zero,731
    b160:	0000ba34 	movhi	zero,744
    b164:	0000ba34 	movhi	zero,744
    b168:	0000ba34 	movhi	zero,744
    b16c:	0000ba34 	movhi	zero,744
    b170:	0000ba34 	movhi	zero,744
    b174:	0000ba34 	movhi	zero,744
    b178:	0000ba34 	movhi	zero,744
    b17c:	0000ba34 	movhi	zero,744
    b180:	0000ba34 	movhi	zero,744
    b184:	0000ba34 	movhi	zero,744
    b188:	0000b718 	cmpnei	zero,zero,732
    b18c:	0000ba34 	movhi	zero,744
    b190:	0000ba34 	movhi	zero,744
    b194:	0000ba34 	movhi	zero,744
    b198:	0000ba34 	movhi	zero,744
    b19c:	0000ba34 	movhi	zero,744
    b1a0:	0000ba34 	movhi	zero,744
    b1a4:	0000ba34 	movhi	zero,744
    b1a8:	0000ba34 	movhi	zero,744
    b1ac:	0000ba34 	movhi	zero,744
    b1b0:	0000ba34 	movhi	zero,744
    b1b4:	0000b2a4 	muli	zero,zero,714
    b1b8:	0000ba34 	movhi	zero,744
    b1bc:	0000ba34 	movhi	zero,744
    b1c0:	0000ba34 	movhi	zero,744
    b1c4:	0000ba34 	movhi	zero,744
    b1c8:	0000ba34 	movhi	zero,744
    b1cc:	0000b270 	cmpltui	zero,zero,713
    b1d0:	0000ba34 	movhi	zero,744
    b1d4:	0000ba34 	movhi	zero,744
    b1d8:	0000b8b8 	rdprs	zero,zero,738
    b1dc:	0000ba34 	movhi	zero,744
    b1e0:	0000ba34 	movhi	zero,744
    b1e4:	0000ba34 	movhi	zero,744
    b1e8:	0000ba34 	movhi	zero,744
    b1ec:	0000ba34 	movhi	zero,744
    b1f0:	0000ba34 	movhi	zero,744
    b1f4:	0000ba34 	movhi	zero,744
    b1f8:	0000ba34 	movhi	zero,744
    b1fc:	0000ba34 	movhi	zero,744
    b200:	0000ba34 	movhi	zero,744
    b204:	0000b858 	cmpnei	zero,zero,737
    b208:	0000b884 	movi	zero,738
    b20c:	0000ba34 	movhi	zero,744
    b210:	0000ba34 	movhi	zero,744
    b214:	0000ba34 	movhi	zero,744
    b218:	0000b960 	cmpeqi	zero,zero,741
    b21c:	0000b884 	movi	zero,738
    b220:	0000ba34 	movhi	zero,744
    b224:	0000ba34 	movhi	zero,744
    b228:	0000b970 	cmpltui	zero,zero,741
    b22c:	0000ba34 	movhi	zero,744
    b230:	0000b79c 	xori	zero,zero,734
    b234:	0000b2a8 	cmpgeui	zero,zero,714
    b238:	0000b984 	movi	zero,742
    b23c:	0000b9c4 	movi	zero,743
    b240:	0000ba34 	movhi	zero,744
    b244:	0000b90c 	andi	zero,zero,740
    b248:	0000ba34 	movhi	zero,744
    b24c:	0000b274 	movhi	zero,713
    b250:	0000ba34 	movhi	zero,744
    b254:	0000ba34 	movhi	zero,744
    b258:	0000b9d4 	movui	zero,743
    b25c:	42000204 	addi	r8,r8,8
    b260:	d8802317 	ldw	r2,140(sp)
    b264:	1485883a 	add	r2,r2,r18
    b268:	d8802315 	stw	r2,140(sp)
    b26c:	003f8c06 	br	b0a0 <__alt_mem_Flash_flash_data+0xf400b0a0>
    b270:	ad400414 	ori	r21,r21,16
    b274:	a880080c 	andi	r2,r21,32
    b278:	1001e61e 	bne	r2,zero,ba14 <___vfiprintf_internal_r+0xab8>
    b27c:	a880040c 	andi	r2,r21,16
    b280:	10034726 	beq	r2,zero,bfa0 <___vfiprintf_internal_r+0x1044>
    b284:	d8802217 	ldw	r2,136(sp)
    b288:	001b883a 	mov	r13,zero
    b28c:	15800017 	ldw	r22,0(r2)
    b290:	10800104 	addi	r2,r2,4
    b294:	d8802215 	stw	r2,136(sp)
    b298:	b009883a 	mov	r4,r22
    b29c:	00800044 	movi	r2,1
    b2a0:	00000c06 	br	b2d4 <___vfiprintf_internal_r+0x378>
    b2a4:	ad400414 	ori	r21,r21,16
    b2a8:	a880080c 	andi	r2,r21,32
    b2ac:	1001491e 	bne	r2,zero,b7d4 <___vfiprintf_internal_r+0x878>
    b2b0:	a880040c 	andi	r2,r21,16
    b2b4:	10032d26 	beq	r2,zero,bf6c <___vfiprintf_internal_r+0x1010>
    b2b8:	d9002217 	ldw	r4,136(sp)
    b2bc:	001b883a 	mov	r13,zero
    b2c0:	0005883a 	mov	r2,zero
    b2c4:	25800017 	ldw	r22,0(r4)
    b2c8:	21000104 	addi	r4,r4,4
    b2cc:	d9002215 	stw	r4,136(sp)
    b2d0:	b009883a 	mov	r4,r22
    b2d4:	d8001d85 	stb	zero,118(sp)
    b2d8:	4827883a 	mov	r19,r9
    b2dc:	001d883a 	mov	r14,zero
    b2e0:	48000216 	blt	r9,zero,b2ec <___vfiprintf_internal_r+0x390>
    b2e4:	00ffdfc4 	movi	r3,-129
    b2e8:	a8ea703a 	and	r21,r21,r3
    b2ec:	2002071e 	bne	r4,zero,bb0c <___vfiprintf_internal_r+0xbb0>
    b2f0:	4802ad26 	beq	r9,zero,bda8 <___vfiprintf_internal_r+0xe4c>
    b2f4:	10803fcc 	andi	r2,r2,255
    b2f8:	00c00044 	movi	r3,1
    b2fc:	10c22b26 	beq	r2,r3,bbac <___vfiprintf_internal_r+0xc50>
    b300:	00c00084 	movi	r3,2
    b304:	dd001a04 	addi	r20,sp,104
    b308:	10c0dd1e 	bne	r2,r3,b680 <___vfiprintf_internal_r+0x724>
    b30c:	d9002617 	ldw	r4,152(sp)
    b310:	b08003cc 	andi	r2,r22,15
    b314:	6806973a 	slli	r3,r13,28
    b318:	2085883a 	add	r2,r4,r2
    b31c:	b02cd13a 	srli	r22,r22,4
    b320:	10800003 	ldbu	r2,0(r2)
    b324:	681ad13a 	srli	r13,r13,4
    b328:	a53fffc4 	addi	r20,r20,-1
    b32c:	1dacb03a 	or	r22,r3,r22
    b330:	a0800005 	stb	r2,0(r20)
    b334:	b344b03a 	or	r2,r22,r13
    b338:	103ff51e 	bne	r2,zero,b310 <__alt_mem_Flash_flash_data+0xf400b310>
    b33c:	d9001e17 	ldw	r4,120(sp)
    b340:	2527c83a 	sub	r19,r4,r20
    b344:	9823883a 	mov	r17,r19
    b348:	9a40010e 	bge	r19,r9,b350 <___vfiprintf_internal_r+0x3f4>
    b34c:	4823883a 	mov	r17,r9
    b350:	73803fcc 	andi	r14,r14,255
    b354:	7380201c 	xori	r14,r14,128
    b358:	73bfe004 	addi	r14,r14,-128
    b35c:	70000126 	beq	r14,zero,b364 <___vfiprintf_internal_r+0x408>
    b360:	8c400044 	addi	r17,r17,1
    b364:	ab40008c 	andi	r13,r21,2
    b368:	68000126 	beq	r13,zero,b370 <___vfiprintf_internal_r+0x414>
    b36c:	8c400084 	addi	r17,r17,2
    b370:	ad80210c 	andi	r22,r21,132
    b374:	b001c51e 	bne	r22,zero,ba8c <___vfiprintf_internal_r+0xb30>
    b378:	9447c83a 	sub	r3,r18,r17
    b37c:	00c1c30e 	bge	zero,r3,ba8c <___vfiprintf_internal_r+0xb30>
    b380:	01c00404 	movi	r7,16
    b384:	d8801c17 	ldw	r2,112(sp)
    b388:	38c37b0e 	bge	r7,r3,c178 <___vfiprintf_internal_r+0x121c>
    b38c:	010000b4 	movhi	r4,2
    b390:	2131ee04 	addi	r4,r4,-14408
    b394:	dc002915 	stw	r16,164(sp)
    b398:	d9801b17 	ldw	r6,108(sp)
    b39c:	d9002415 	stw	r4,144(sp)
    b3a0:	03c001c4 	movi	r15,7
    b3a4:	da402515 	stw	r9,148(sp)
    b3a8:	db402815 	stw	r13,160(sp)
    b3ac:	1821883a 	mov	r16,r3
    b3b0:	00000506 	br	b3c8 <___vfiprintf_internal_r+0x46c>
    b3b4:	31400084 	addi	r5,r6,2
    b3b8:	42000204 	addi	r8,r8,8
    b3bc:	200d883a 	mov	r6,r4
    b3c0:	843ffc04 	addi	r16,r16,-16
    b3c4:	3c000d0e 	bge	r7,r16,b3fc <___vfiprintf_internal_r+0x4a0>
    b3c8:	10800404 	addi	r2,r2,16
    b3cc:	31000044 	addi	r4,r6,1
    b3d0:	47000015 	stw	fp,0(r8)
    b3d4:	41c00115 	stw	r7,4(r8)
    b3d8:	d8801c15 	stw	r2,112(sp)
    b3dc:	d9001b15 	stw	r4,108(sp)
    b3e0:	793ff40e 	bge	r15,r4,b3b4 <__alt_mem_Flash_flash_data+0xf400b3b4>
    b3e4:	10019b1e 	bne	r2,zero,ba54 <___vfiprintf_internal_r+0xaf8>
    b3e8:	843ffc04 	addi	r16,r16,-16
    b3ec:	000d883a 	mov	r6,zero
    b3f0:	01400044 	movi	r5,1
    b3f4:	d811883a 	mov	r8,sp
    b3f8:	3c3ff316 	blt	r7,r16,b3c8 <__alt_mem_Flash_flash_data+0xf400b3c8>
    b3fc:	8007883a 	mov	r3,r16
    b400:	da402517 	ldw	r9,148(sp)
    b404:	db402817 	ldw	r13,160(sp)
    b408:	dc002917 	ldw	r16,164(sp)
    b40c:	d9002417 	ldw	r4,144(sp)
    b410:	1885883a 	add	r2,r3,r2
    b414:	40c00115 	stw	r3,4(r8)
    b418:	41000015 	stw	r4,0(r8)
    b41c:	d8801c15 	stw	r2,112(sp)
    b420:	d9401b15 	stw	r5,108(sp)
    b424:	00c001c4 	movi	r3,7
    b428:	19426a16 	blt	r3,r5,bdd4 <___vfiprintf_internal_r+0xe78>
    b42c:	d8c01d87 	ldb	r3,118(sp)
    b430:	42000204 	addi	r8,r8,8
    b434:	29000044 	addi	r4,r5,1
    b438:	1801991e 	bne	r3,zero,baa0 <___vfiprintf_internal_r+0xb44>
    b43c:	68000c26 	beq	r13,zero,b470 <___vfiprintf_internal_r+0x514>
    b440:	d8c01d04 	addi	r3,sp,116
    b444:	10800084 	addi	r2,r2,2
    b448:	40c00015 	stw	r3,0(r8)
    b44c:	00c00084 	movi	r3,2
    b450:	40c00115 	stw	r3,4(r8)
    b454:	d8801c15 	stw	r2,112(sp)
    b458:	d9001b15 	stw	r4,108(sp)
    b45c:	00c001c4 	movi	r3,7
    b460:	19024c16 	blt	r3,r4,bd94 <___vfiprintf_internal_r+0xe38>
    b464:	200b883a 	mov	r5,r4
    b468:	42000204 	addi	r8,r8,8
    b46c:	21000044 	addi	r4,r4,1
    b470:	00c02004 	movi	r3,128
    b474:	b0c20126 	beq	r22,r3,bc7c <___vfiprintf_internal_r+0xd20>
    b478:	4cedc83a 	sub	r22,r9,r19
    b47c:	0580230e 	bge	zero,r22,b50c <___vfiprintf_internal_r+0x5b0>
    b480:	01c00404 	movi	r7,16
    b484:	3d83140e 	bge	r7,r22,c0d8 <___vfiprintf_internal_r+0x117c>
    b488:	010000b4 	movhi	r4,2
    b48c:	2131ea04 	addi	r4,r4,-14424
    b490:	d9002415 	stw	r4,144(sp)
    b494:	034001c4 	movi	r13,7
    b498:	00000506 	br	b4b0 <___vfiprintf_internal_r+0x554>
    b49c:	29000084 	addi	r4,r5,2
    b4a0:	42000204 	addi	r8,r8,8
    b4a4:	180b883a 	mov	r5,r3
    b4a8:	b5bffc04 	addi	r22,r22,-16
    b4ac:	3d800d0e 	bge	r7,r22,b4e4 <___vfiprintf_internal_r+0x588>
    b4b0:	10800404 	addi	r2,r2,16
    b4b4:	28c00044 	addi	r3,r5,1
    b4b8:	45c00015 	stw	r23,0(r8)
    b4bc:	41c00115 	stw	r7,4(r8)
    b4c0:	d8801c15 	stw	r2,112(sp)
    b4c4:	d8c01b15 	stw	r3,108(sp)
    b4c8:	68fff40e 	bge	r13,r3,b49c <__alt_mem_Flash_flash_data+0xf400b49c>
    b4cc:	1001811e 	bne	r2,zero,bad4 <___vfiprintf_internal_r+0xb78>
    b4d0:	b5bffc04 	addi	r22,r22,-16
    b4d4:	01000044 	movi	r4,1
    b4d8:	000b883a 	mov	r5,zero
    b4dc:	d811883a 	mov	r8,sp
    b4e0:	3dbff316 	blt	r7,r22,b4b0 <__alt_mem_Flash_flash_data+0xf400b4b0>
    b4e4:	d8c02417 	ldw	r3,144(sp)
    b4e8:	1585883a 	add	r2,r2,r22
    b4ec:	45800115 	stw	r22,4(r8)
    b4f0:	40c00015 	stw	r3,0(r8)
    b4f4:	d8801c15 	stw	r2,112(sp)
    b4f8:	d9001b15 	stw	r4,108(sp)
    b4fc:	00c001c4 	movi	r3,7
    b500:	1901d016 	blt	r3,r4,bc44 <___vfiprintf_internal_r+0xce8>
    b504:	42000204 	addi	r8,r8,8
    b508:	21000044 	addi	r4,r4,1
    b50c:	14c5883a 	add	r2,r2,r19
    b510:	45000015 	stw	r20,0(r8)
    b514:	44c00115 	stw	r19,4(r8)
    b518:	d8801c15 	stw	r2,112(sp)
    b51c:	d9001b15 	stw	r4,108(sp)
    b520:	00c001c4 	movi	r3,7
    b524:	1901cf0e 	bge	r3,r4,bc64 <___vfiprintf_internal_r+0xd08>
    b528:	1002361e 	bne	r2,zero,be04 <___vfiprintf_internal_r+0xea8>
    b52c:	d8001b15 	stw	zero,108(sp)
    b530:	aac0010c 	andi	r11,r21,4
    b534:	58002826 	beq	r11,zero,b5d8 <___vfiprintf_internal_r+0x67c>
    b538:	9467c83a 	sub	r19,r18,r17
    b53c:	d811883a 	mov	r8,sp
    b540:	04c3340e 	bge	zero,r19,c214 <___vfiprintf_internal_r+0x12b8>
    b544:	01c00404 	movi	r7,16
    b548:	3cc31b0e 	bge	r7,r19,c1b8 <___vfiprintf_internal_r+0x125c>
    b54c:	00c000b4 	movhi	r3,2
    b550:	18f1ee04 	addi	r3,r3,-14408
    b554:	d9001b17 	ldw	r4,108(sp)
    b558:	d8c02415 	stw	r3,144(sp)
    b55c:	382b883a 	mov	r21,r7
    b560:	050001c4 	movi	r20,7
    b564:	dd802017 	ldw	r22,128(sp)
    b568:	00000506 	br	b580 <___vfiprintf_internal_r+0x624>
    b56c:	21400084 	addi	r5,r4,2
    b570:	42000204 	addi	r8,r8,8
    b574:	1809883a 	mov	r4,r3
    b578:	9cfffc04 	addi	r19,r19,-16
    b57c:	acc00d0e 	bge	r21,r19,b5b4 <___vfiprintf_internal_r+0x658>
    b580:	10800404 	addi	r2,r2,16
    b584:	20c00044 	addi	r3,r4,1
    b588:	47000015 	stw	fp,0(r8)
    b58c:	45400115 	stw	r21,4(r8)
    b590:	d8801c15 	stw	r2,112(sp)
    b594:	d8c01b15 	stw	r3,108(sp)
    b598:	a0fff40e 	bge	r20,r3,b56c <__alt_mem_Flash_flash_data+0xf400b56c>
    b59c:	10019f1e 	bne	r2,zero,bc1c <___vfiprintf_internal_r+0xcc0>
    b5a0:	9cfffc04 	addi	r19,r19,-16
    b5a4:	01400044 	movi	r5,1
    b5a8:	0009883a 	mov	r4,zero
    b5ac:	d811883a 	mov	r8,sp
    b5b0:	acfff316 	blt	r21,r19,b580 <__alt_mem_Flash_flash_data+0xf400b580>
    b5b4:	d8c02417 	ldw	r3,144(sp)
    b5b8:	14c5883a 	add	r2,r2,r19
    b5bc:	44c00115 	stw	r19,4(r8)
    b5c0:	40c00015 	stw	r3,0(r8)
    b5c4:	d8801c15 	stw	r2,112(sp)
    b5c8:	d9401b15 	stw	r5,108(sp)
    b5cc:	00c001c4 	movi	r3,7
    b5d0:	1941810e 	bge	r3,r5,bbd8 <___vfiprintf_internal_r+0xc7c>
    b5d4:	10017a1e 	bne	r2,zero,bbc0 <___vfiprintf_internal_r+0xc64>
    b5d8:	8c82a416 	blt	r17,r18,c06c <___vfiprintf_internal_r+0x1110>
    b5dc:	d9002317 	ldw	r4,140(sp)
    b5e0:	2449883a 	add	r4,r4,r17
    b5e4:	d9002315 	stw	r4,140(sp)
    b5e8:	d8001b15 	stw	zero,108(sp)
    b5ec:	d811883a 	mov	r8,sp
    b5f0:	003e8e06 	br	b02c <__alt_mem_Flash_flash_data+0xf400b02c>
    b5f4:	d9002017 	ldw	r4,128(sp)
    b5f8:	a80b883a 	mov	r5,r21
    b5fc:	0004c700 	call	4c70 <__swsetup_r>
    b600:	10000c1e 	bne	r2,zero,b634 <___vfiprintf_internal_r+0x6d8>
    b604:	a880030b 	ldhu	r2,12(r21)
    b608:	00c00284 	movi	r3,10
    b60c:	1080068c 	andi	r2,r2,26
    b610:	10fe741e 	bne	r2,r3,afe4 <__alt_mem_Flash_flash_data+0xf400afe4>
    b614:	a880038f 	ldh	r2,14(r21)
    b618:	103e7216 	blt	r2,zero,afe4 <__alt_mem_Flash_flash_data+0xf400afe4>
    b61c:	d9002017 	ldw	r4,128(sp)
    b620:	d9c02217 	ldw	r7,136(sp)
    b624:	a80b883a 	mov	r5,r21
    b628:	b00d883a 	mov	r6,r22
    b62c:	000c2500 	call	c250 <__sbprintf>
    b630:	00000106 	br	b638 <___vfiprintf_internal_r+0x6dc>
    b634:	00bfffc4 	movi	r2,-1
    b638:	dfc03517 	ldw	ra,212(sp)
    b63c:	df003417 	ldw	fp,208(sp)
    b640:	ddc03317 	ldw	r23,204(sp)
    b644:	dd803217 	ldw	r22,200(sp)
    b648:	dd403117 	ldw	r21,196(sp)
    b64c:	dd003017 	ldw	r20,192(sp)
    b650:	dcc02f17 	ldw	r19,188(sp)
    b654:	dc802e17 	ldw	r18,184(sp)
    b658:	dc402d17 	ldw	r17,180(sp)
    b65c:	dc002c17 	ldw	r16,176(sp)
    b660:	dec03604 	addi	sp,sp,216
    b664:	f800283a 	ret
    b668:	0006cd00 	call	6cd0 <__sinit>
    b66c:	003e4d06 	br	afa4 <__alt_mem_Flash_flash_data+0xf400afa4>
    b670:	8005883a 	mov	r2,r16
    b674:	ad400114 	ori	r21,r21,4
    b678:	80c00007 	ldb	r3,0(r16)
    b67c:	003e9506 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b680:	b006d0fa 	srli	r3,r22,3
    b684:	6808977a 	slli	r4,r13,29
    b688:	681ad0fa 	srli	r13,r13,3
    b68c:	b58001cc 	andi	r22,r22,7
    b690:	b0800c04 	addi	r2,r22,48
    b694:	a53fffc4 	addi	r20,r20,-1
    b698:	20ecb03a 	or	r22,r4,r3
    b69c:	a0800005 	stb	r2,0(r20)
    b6a0:	b346b03a 	or	r3,r22,r13
    b6a4:	183ff61e 	bne	r3,zero,b680 <__alt_mem_Flash_flash_data+0xf400b680>
    b6a8:	a8c0004c 	andi	r3,r21,1
    b6ac:	a009883a 	mov	r4,r20
    b6b0:	18013b26 	beq	r3,zero,bba0 <___vfiprintf_internal_r+0xc44>
    b6b4:	10803fcc 	andi	r2,r2,255
    b6b8:	1080201c 	xori	r2,r2,128
    b6bc:	10bfe004 	addi	r2,r2,-128
    b6c0:	00c00c04 	movi	r3,48
    b6c4:	10ff1d26 	beq	r2,r3,b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b6c8:	d8801e17 	ldw	r2,120(sp)
    b6cc:	a53fffc4 	addi	r20,r20,-1
    b6d0:	20ffffc5 	stb	r3,-1(r4)
    b6d4:	1527c83a 	sub	r19,r2,r20
    b6d8:	003f1a06 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    b6dc:	ad402014 	ori	r21,r21,128
    b6e0:	8005883a 	mov	r2,r16
    b6e4:	80c00007 	ldb	r3,0(r16)
    b6e8:	003e7a06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b6ec:	8005883a 	mov	r2,r16
    b6f0:	0025883a 	mov	r18,zero
    b6f4:	193ff404 	addi	r4,r3,-48
    b6f8:	10c00007 	ldb	r3,0(r2)
    b6fc:	948002a4 	muli	r18,r18,10
    b700:	84000044 	addi	r16,r16,1
    b704:	8005883a 	mov	r2,r16
    b708:	9125883a 	add	r18,r18,r4
    b70c:	193ff404 	addi	r4,r3,-48
    b710:	313ff92e 	bgeu	r6,r4,b6f8 <__alt_mem_Flash_flash_data+0xf400b6f8>
    b714:	003e7006 	br	b0d8 <__alt_mem_Flash_flash_data+0xf400b0d8>
    b718:	ad400414 	ori	r21,r21,16
    b71c:	d9c01d85 	stb	r7,118(sp)
    b720:	a880080c 	andi	r2,r21,32
    b724:	d8c02217 	ldw	r3,136(sp)
    b728:	10005a26 	beq	r2,zero,b894 <___vfiprintf_internal_r+0x938>
    b72c:	d9002217 	ldw	r4,136(sp)
    b730:	18800117 	ldw	r2,4(r3)
    b734:	1d800017 	ldw	r22,0(r3)
    b738:	21000204 	addi	r4,r4,8
    b73c:	d9002215 	stw	r4,136(sp)
    b740:	101b883a 	mov	r13,r2
    b744:	1001f416 	blt	r2,zero,bf18 <___vfiprintf_internal_r+0xfbc>
    b748:	db801d83 	ldbu	r14,118(sp)
    b74c:	4827883a 	mov	r19,r9
    b750:	00800044 	movi	r2,1
    b754:	b348b03a 	or	r4,r22,r13
    b758:	003ee106 	br	b2e0 <__alt_mem_Flash_flash_data+0xf400b2e0>
    b75c:	80c00007 	ldb	r3,0(r16)
    b760:	80800044 	addi	r2,r16,1
    b764:	1b42a326 	beq	r3,r13,c1f4 <___vfiprintf_internal_r+0x1298>
    b768:	193ff404 	addi	r4,r3,-48
    b76c:	1021883a 	mov	r16,r2
    b770:	0013883a 	mov	r9,zero
    b774:	313e5836 	bltu	r6,r4,b0d8 <__alt_mem_Flash_flash_data+0xf400b0d8>
    b778:	80c00007 	ldb	r3,0(r16)
    b77c:	4a4002a4 	muli	r9,r9,10
    b780:	84000044 	addi	r16,r16,1
    b784:	2253883a 	add	r9,r4,r9
    b788:	193ff404 	addi	r4,r3,-48
    b78c:	313ffa2e 	bgeu	r6,r4,b778 <__alt_mem_Flash_flash_data+0xf400b778>
    b790:	483e510e 	bge	r9,zero,b0d8 <__alt_mem_Flash_flash_data+0xf400b0d8>
    b794:	027fffc4 	movi	r9,-1
    b798:	003e4f06 	br	b0d8 <__alt_mem_Flash_flash_data+0xf400b0d8>
    b79c:	d9c01d85 	stb	r7,118(sp)
    b7a0:	a880080c 	andi	r2,r21,32
    b7a4:	10020826 	beq	r2,zero,bfc8 <___vfiprintf_internal_r+0x106c>
    b7a8:	d8c02217 	ldw	r3,136(sp)
    b7ac:	d9002317 	ldw	r4,140(sp)
    b7b0:	18800017 	ldw	r2,0(r3)
    b7b4:	2007d7fa 	srai	r3,r4,31
    b7b8:	d9002217 	ldw	r4,136(sp)
    b7bc:	10c00115 	stw	r3,4(r2)
    b7c0:	21000104 	addi	r4,r4,4
    b7c4:	d9002215 	stw	r4,136(sp)
    b7c8:	d9002317 	ldw	r4,140(sp)
    b7cc:	11000015 	stw	r4,0(r2)
    b7d0:	003e1606 	br	b02c <__alt_mem_Flash_flash_data+0xf400b02c>
    b7d4:	d8802217 	ldw	r2,136(sp)
    b7d8:	d8c02217 	ldw	r3,136(sp)
    b7dc:	15800017 	ldw	r22,0(r2)
    b7e0:	13400117 	ldw	r13,4(r2)
    b7e4:	18c00204 	addi	r3,r3,8
    b7e8:	0005883a 	mov	r2,zero
    b7ec:	d8c02215 	stw	r3,136(sp)
    b7f0:	b348b03a 	or	r4,r22,r13
    b7f4:	003eb706 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    b7f8:	38803fcc 	andi	r2,r7,255
    b7fc:	1080201c 	xori	r2,r2,128
    b800:	10bfe004 	addi	r2,r2,-128
    b804:	1001e31e 	bne	r2,zero,bf94 <___vfiprintf_internal_r+0x1038>
    b808:	8005883a 	mov	r2,r16
    b80c:	01c00804 	movi	r7,32
    b810:	80c00007 	ldb	r3,0(r16)
    b814:	003e2f06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b818:	ad400054 	ori	r21,r21,1
    b81c:	8005883a 	mov	r2,r16
    b820:	80c00007 	ldb	r3,0(r16)
    b824:	003e2b06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b828:	d8c02217 	ldw	r3,136(sp)
    b82c:	1c800017 	ldw	r18,0(r3)
    b830:	18c00104 	addi	r3,r3,4
    b834:	90023816 	blt	r18,zero,c118 <___vfiprintf_internal_r+0x11bc>
    b838:	d8c02215 	stw	r3,136(sp)
    b83c:	8005883a 	mov	r2,r16
    b840:	80c00007 	ldb	r3,0(r16)
    b844:	003e2306 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b848:	8005883a 	mov	r2,r16
    b84c:	01c00ac4 	movi	r7,43
    b850:	80c00007 	ldb	r3,0(r16)
    b854:	003e1f06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b858:	d8c02217 	ldw	r3,136(sp)
    b85c:	04400044 	movi	r17,1
    b860:	d8001d85 	stb	zero,118(sp)
    b864:	18800017 	ldw	r2,0(r3)
    b868:	18c00104 	addi	r3,r3,4
    b86c:	d8c02215 	stw	r3,136(sp)
    b870:	d8801005 	stb	r2,64(sp)
    b874:	8827883a 	mov	r19,r17
    b878:	dd001004 	addi	r20,sp,64
    b87c:	0013883a 	mov	r9,zero
    b880:	003eb806 	br	b364 <__alt_mem_Flash_flash_data+0xf400b364>
    b884:	d9c01d85 	stb	r7,118(sp)
    b888:	a880080c 	andi	r2,r21,32
    b88c:	d8c02217 	ldw	r3,136(sp)
    b890:	103fa61e 	bne	r2,zero,b72c <__alt_mem_Flash_flash_data+0xf400b72c>
    b894:	a880040c 	andi	r2,r21,16
    b898:	1001dd26 	beq	r2,zero,c010 <___vfiprintf_internal_r+0x10b4>
    b89c:	1d800017 	ldw	r22,0(r3)
    b8a0:	d8802217 	ldw	r2,136(sp)
    b8a4:	b01bd7fa 	srai	r13,r22,31
    b8a8:	10800104 	addi	r2,r2,4
    b8ac:	d8802215 	stw	r2,136(sp)
    b8b0:	6805883a 	mov	r2,r13
    b8b4:	003fa306 	br	b744 <__alt_mem_Flash_flash_data+0xf400b744>
    b8b8:	008000b4 	movhi	r2,2
    b8bc:	10b17404 	addi	r2,r2,-14896
    b8c0:	d8802615 	stw	r2,152(sp)
    b8c4:	d9c01d85 	stb	r7,118(sp)
    b8c8:	a880080c 	andi	r2,r21,32
    b8cc:	10004726 	beq	r2,zero,b9ec <___vfiprintf_internal_r+0xa90>
    b8d0:	d9002217 	ldw	r4,136(sp)
    b8d4:	25800017 	ldw	r22,0(r4)
    b8d8:	23400117 	ldw	r13,4(r4)
    b8dc:	21000204 	addi	r4,r4,8
    b8e0:	d9002215 	stw	r4,136(sp)
    b8e4:	a880004c 	andi	r2,r21,1
    b8e8:	10014e26 	beq	r2,zero,be24 <___vfiprintf_internal_r+0xec8>
    b8ec:	b348b03a 	or	r4,r22,r13
    b8f0:	20019c26 	beq	r4,zero,bf64 <___vfiprintf_internal_r+0x1008>
    b8f4:	00800c04 	movi	r2,48
    b8f8:	d8801d05 	stb	r2,116(sp)
    b8fc:	d8c01d45 	stb	r3,117(sp)
    b900:	ad400094 	ori	r21,r21,2
    b904:	00800084 	movi	r2,2
    b908:	003e7206 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    b90c:	d8c02217 	ldw	r3,136(sp)
    b910:	d8001d85 	stb	zero,118(sp)
    b914:	1d000017 	ldw	r20,0(r3)
    b918:	1d800104 	addi	r22,r3,4
    b91c:	a0021c26 	beq	r20,zero,c190 <___vfiprintf_internal_r+0x1234>
    b920:	a009883a 	mov	r4,r20
    b924:	48020016 	blt	r9,zero,c128 <___vfiprintf_internal_r+0x11cc>
    b928:	480d883a 	mov	r6,r9
    b92c:	000b883a 	mov	r5,zero
    b930:	da002a15 	stw	r8,168(sp)
    b934:	da402b15 	stw	r9,172(sp)
    b938:	00081bc0 	call	81bc <memchr>
    b93c:	da002a17 	ldw	r8,168(sp)
    b940:	da402b17 	ldw	r9,172(sp)
    b944:	10022226 	beq	r2,zero,c1d0 <___vfiprintf_internal_r+0x1274>
    b948:	1527c83a 	sub	r19,r2,r20
    b94c:	4cc1c916 	blt	r9,r19,c074 <___vfiprintf_internal_r+0x1118>
    b950:	db801d83 	ldbu	r14,118(sp)
    b954:	dd802215 	stw	r22,136(sp)
    b958:	0013883a 	mov	r9,zero
    b95c:	003e7906 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    b960:	ad401014 	ori	r21,r21,64
    b964:	8005883a 	mov	r2,r16
    b968:	80c00007 	ldb	r3,0(r16)
    b96c:	003dd906 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b970:	80c00007 	ldb	r3,0(r16)
    b974:	8005883a 	mov	r2,r16
    b978:	1b01e326 	beq	r3,r12,c108 <___vfiprintf_internal_r+0x11ac>
    b97c:	ad400414 	ori	r21,r21,16
    b980:	003dd406 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b984:	d9002217 	ldw	r4,136(sp)
    b988:	00800c04 	movi	r2,48
    b98c:	d8801d05 	stb	r2,116(sp)
    b990:	25800017 	ldw	r22,0(r4)
    b994:	00801e04 	movi	r2,120
    b998:	d8801d45 	stb	r2,117(sp)
    b99c:	008000b4 	movhi	r2,2
    b9a0:	21000104 	addi	r4,r4,4
    b9a4:	10b17904 	addi	r2,r2,-14876
    b9a8:	d9002215 	stw	r4,136(sp)
    b9ac:	d8802615 	stw	r2,152(sp)
    b9b0:	001b883a 	mov	r13,zero
    b9b4:	ad400094 	ori	r21,r21,2
    b9b8:	00800084 	movi	r2,2
    b9bc:	b009883a 	mov	r4,r22
    b9c0:	003e4406 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    b9c4:	ad400814 	ori	r21,r21,32
    b9c8:	8005883a 	mov	r2,r16
    b9cc:	80c00007 	ldb	r3,0(r16)
    b9d0:	003dc006 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b9d4:	008000b4 	movhi	r2,2
    b9d8:	10b17904 	addi	r2,r2,-14876
    b9dc:	d8802615 	stw	r2,152(sp)
    b9e0:	d9c01d85 	stb	r7,118(sp)
    b9e4:	a880080c 	andi	r2,r21,32
    b9e8:	103fb91e 	bne	r2,zero,b8d0 <__alt_mem_Flash_flash_data+0xf400b8d0>
    b9ec:	a880040c 	andi	r2,r21,16
    b9f0:	10010f1e 	bne	r2,zero,be30 <___vfiprintf_internal_r+0xed4>
    b9f4:	a880100c 	andi	r2,r21,64
    b9f8:	10010d26 	beq	r2,zero,be30 <___vfiprintf_internal_r+0xed4>
    b9fc:	d9002217 	ldw	r4,136(sp)
    ba00:	001b883a 	mov	r13,zero
    ba04:	2580000b 	ldhu	r22,0(r4)
    ba08:	21000104 	addi	r4,r4,4
    ba0c:	d9002215 	stw	r4,136(sp)
    ba10:	003fb406 	br	b8e4 <__alt_mem_Flash_flash_data+0xf400b8e4>
    ba14:	d9002217 	ldw	r4,136(sp)
    ba18:	00800044 	movi	r2,1
    ba1c:	25800017 	ldw	r22,0(r4)
    ba20:	23400117 	ldw	r13,4(r4)
    ba24:	21000204 	addi	r4,r4,8
    ba28:	d9002215 	stw	r4,136(sp)
    ba2c:	b348b03a 	or	r4,r22,r13
    ba30:	003e2806 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    ba34:	d9c01d85 	stb	r7,118(sp)
    ba38:	1801ab26 	beq	r3,zero,c0e8 <___vfiprintf_internal_r+0x118c>
    ba3c:	04400044 	movi	r17,1
    ba40:	d8c01005 	stb	r3,64(sp)
    ba44:	d8001d85 	stb	zero,118(sp)
    ba48:	8827883a 	mov	r19,r17
    ba4c:	dd001004 	addi	r20,sp,64
    ba50:	003f8a06 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    ba54:	d9002017 	ldw	r4,128(sp)
    ba58:	d9402117 	ldw	r5,132(sp)
    ba5c:	d9801a04 	addi	r6,sp,104
    ba60:	d9c02b15 	stw	r7,172(sp)
    ba64:	dbc02a15 	stw	r15,168(sp)
    ba68:	000ae480 	call	ae48 <__sprint_r.part.0>
    ba6c:	d9c02b17 	ldw	r7,172(sp)
    ba70:	dbc02a17 	ldw	r15,168(sp)
    ba74:	1000631e 	bne	r2,zero,bc04 <___vfiprintf_internal_r+0xca8>
    ba78:	d9801b17 	ldw	r6,108(sp)
    ba7c:	d8801c17 	ldw	r2,112(sp)
    ba80:	d811883a 	mov	r8,sp
    ba84:	31400044 	addi	r5,r6,1
    ba88:	003e4d06 	br	b3c0 <__alt_mem_Flash_flash_data+0xf400b3c0>
    ba8c:	d9401b17 	ldw	r5,108(sp)
    ba90:	d8801c17 	ldw	r2,112(sp)
    ba94:	29000044 	addi	r4,r5,1
    ba98:	d8c01d87 	ldb	r3,118(sp)
    ba9c:	183e6726 	beq	r3,zero,b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    baa0:	00c00044 	movi	r3,1
    baa4:	d9401d84 	addi	r5,sp,118
    baa8:	10c5883a 	add	r2,r2,r3
    baac:	41400015 	stw	r5,0(r8)
    bab0:	40c00115 	stw	r3,4(r8)
    bab4:	d8801c15 	stw	r2,112(sp)
    bab8:	d9001b15 	stw	r4,108(sp)
    babc:	014001c4 	movi	r5,7
    bac0:	2900ab16 	blt	r5,r4,bd70 <___vfiprintf_internal_r+0xe14>
    bac4:	200b883a 	mov	r5,r4
    bac8:	42000204 	addi	r8,r8,8
    bacc:	21000044 	addi	r4,r4,1
    bad0:	003e5a06 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    bad4:	d9002017 	ldw	r4,128(sp)
    bad8:	d9402117 	ldw	r5,132(sp)
    badc:	d9801a04 	addi	r6,sp,104
    bae0:	d9c02b15 	stw	r7,172(sp)
    bae4:	db402a15 	stw	r13,168(sp)
    bae8:	000ae480 	call	ae48 <__sprint_r.part.0>
    baec:	d9c02b17 	ldw	r7,172(sp)
    baf0:	db402a17 	ldw	r13,168(sp)
    baf4:	1000431e 	bne	r2,zero,bc04 <___vfiprintf_internal_r+0xca8>
    baf8:	d9401b17 	ldw	r5,108(sp)
    bafc:	d8801c17 	ldw	r2,112(sp)
    bb00:	d811883a 	mov	r8,sp
    bb04:	29000044 	addi	r4,r5,1
    bb08:	003e6706 	br	b4a8 <__alt_mem_Flash_flash_data+0xf400b4a8>
    bb0c:	10803fcc 	andi	r2,r2,255
    bb10:	00c00044 	movi	r3,1
    bb14:	10fdfa1e 	bne	r2,r3,b300 <__alt_mem_Flash_flash_data+0xf400b300>
    bb18:	6800021e 	bne	r13,zero,bb24 <___vfiprintf_internal_r+0xbc8>
    bb1c:	00800244 	movi	r2,9
    bb20:	1580222e 	bgeu	r2,r22,bbac <___vfiprintf_internal_r+0xc50>
    bb24:	dc802415 	stw	r18,144(sp)
    bb28:	dc002515 	stw	r16,148(sp)
    bb2c:	dc401a04 	addi	r17,sp,104
    bb30:	b021883a 	mov	r16,r22
    bb34:	4827883a 	mov	r19,r9
    bb38:	4029883a 	mov	r20,r8
    bb3c:	702d883a 	mov	r22,r14
    bb40:	6825883a 	mov	r18,r13
    bb44:	8009883a 	mov	r4,r16
    bb48:	900b883a 	mov	r5,r18
    bb4c:	01800284 	movi	r6,10
    bb50:	000f883a 	mov	r7,zero
    bb54:	000d1c40 	call	d1c4 <__umoddi3>
    bb58:	10800c04 	addi	r2,r2,48
    bb5c:	8c7fffc4 	addi	r17,r17,-1
    bb60:	8009883a 	mov	r4,r16
    bb64:	900b883a 	mov	r5,r18
    bb68:	01800284 	movi	r6,10
    bb6c:	000f883a 	mov	r7,zero
    bb70:	88800005 	stb	r2,0(r17)
    bb74:	000cc040 	call	cc04 <__udivdi3>
    bb78:	1021883a 	mov	r16,r2
    bb7c:	10c4b03a 	or	r2,r2,r3
    bb80:	1825883a 	mov	r18,r3
    bb84:	103fef1e 	bne	r2,zero,bb44 <__alt_mem_Flash_flash_data+0xf400bb44>
    bb88:	dc802417 	ldw	r18,144(sp)
    bb8c:	dc002517 	ldw	r16,148(sp)
    bb90:	a011883a 	mov	r8,r20
    bb94:	9813883a 	mov	r9,r19
    bb98:	b01d883a 	mov	r14,r22
    bb9c:	8829883a 	mov	r20,r17
    bba0:	d8c01e17 	ldw	r3,120(sp)
    bba4:	1d27c83a 	sub	r19,r3,r20
    bba8:	003de606 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    bbac:	b5800c04 	addi	r22,r22,48
    bbb0:	dd8019c5 	stb	r22,103(sp)
    bbb4:	dcc02717 	ldw	r19,156(sp)
    bbb8:	dd0019c4 	addi	r20,sp,103
    bbbc:	003de106 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    bbc0:	d9002017 	ldw	r4,128(sp)
    bbc4:	d9402117 	ldw	r5,132(sp)
    bbc8:	d9801a04 	addi	r6,sp,104
    bbcc:	000ae480 	call	ae48 <__sprint_r.part.0>
    bbd0:	10000c1e 	bne	r2,zero,bc04 <___vfiprintf_internal_r+0xca8>
    bbd4:	d8801c17 	ldw	r2,112(sp)
    bbd8:	8c80010e 	bge	r17,r18,bbe0 <___vfiprintf_internal_r+0xc84>
    bbdc:	9023883a 	mov	r17,r18
    bbe0:	d8c02317 	ldw	r3,140(sp)
    bbe4:	1c47883a 	add	r3,r3,r17
    bbe8:	d8c02315 	stw	r3,140(sp)
    bbec:	103e7e26 	beq	r2,zero,b5e8 <__alt_mem_Flash_flash_data+0xf400b5e8>
    bbf0:	d9002017 	ldw	r4,128(sp)
    bbf4:	d9402117 	ldw	r5,132(sp)
    bbf8:	d9801a04 	addi	r6,sp,104
    bbfc:	000ae480 	call	ae48 <__sprint_r.part.0>
    bc00:	103e7926 	beq	r2,zero,b5e8 <__alt_mem_Flash_flash_data+0xf400b5e8>
    bc04:	dd402117 	ldw	r21,132(sp)
    bc08:	a880030b 	ldhu	r2,12(r21)
    bc0c:	1080100c 	andi	r2,r2,64
    bc10:	103e881e 	bne	r2,zero,b634 <__alt_mem_Flash_flash_data+0xf400b634>
    bc14:	d8802317 	ldw	r2,140(sp)
    bc18:	003e8706 	br	b638 <__alt_mem_Flash_flash_data+0xf400b638>
    bc1c:	d9402117 	ldw	r5,132(sp)
    bc20:	b009883a 	mov	r4,r22
    bc24:	d9801a04 	addi	r6,sp,104
    bc28:	000ae480 	call	ae48 <__sprint_r.part.0>
    bc2c:	103ff51e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bc30:	d9001b17 	ldw	r4,108(sp)
    bc34:	d8801c17 	ldw	r2,112(sp)
    bc38:	d811883a 	mov	r8,sp
    bc3c:	21400044 	addi	r5,r4,1
    bc40:	003e4d06 	br	b578 <__alt_mem_Flash_flash_data+0xf400b578>
    bc44:	1000aa1e 	bne	r2,zero,bef0 <___vfiprintf_internal_r+0xf94>
    bc48:	00c00044 	movi	r3,1
    bc4c:	9805883a 	mov	r2,r19
    bc50:	dd000015 	stw	r20,0(sp)
    bc54:	dcc00115 	stw	r19,4(sp)
    bc58:	dcc01c15 	stw	r19,112(sp)
    bc5c:	d8c01b15 	stw	r3,108(sp)
    bc60:	d811883a 	mov	r8,sp
    bc64:	42000204 	addi	r8,r8,8
    bc68:	aac0010c 	andi	r11,r21,4
    bc6c:	583fda26 	beq	r11,zero,bbd8 <__alt_mem_Flash_flash_data+0xf400bbd8>
    bc70:	9467c83a 	sub	r19,r18,r17
    bc74:	04fe3316 	blt	zero,r19,b544 <__alt_mem_Flash_flash_data+0xf400b544>
    bc78:	003fd706 	br	bbd8 <__alt_mem_Flash_flash_data+0xf400bbd8>
    bc7c:	946dc83a 	sub	r22,r18,r17
    bc80:	05bdfd0e 	bge	zero,r22,b478 <__alt_mem_Flash_flash_data+0xf400b478>
    bc84:	00c000b4 	movhi	r3,2
    bc88:	18f1ea04 	addi	r3,r3,-14424
    bc8c:	01c00404 	movi	r7,16
    bc90:	d8c02415 	stw	r3,144(sp)
    bc94:	3d81530e 	bge	r7,r22,c1e4 <___vfiprintf_internal_r+0x1288>
    bc98:	8007883a 	mov	r3,r16
    bc9c:	034001c4 	movi	r13,7
    bca0:	b021883a 	mov	r16,r22
    bca4:	da402515 	stw	r9,148(sp)
    bca8:	182d883a 	mov	r22,r3
    bcac:	00000506 	br	bcc4 <___vfiprintf_internal_r+0xd68>
    bcb0:	29800084 	addi	r6,r5,2
    bcb4:	42000204 	addi	r8,r8,8
    bcb8:	180b883a 	mov	r5,r3
    bcbc:	843ffc04 	addi	r16,r16,-16
    bcc0:	3c000d0e 	bge	r7,r16,bcf8 <___vfiprintf_internal_r+0xd9c>
    bcc4:	10800404 	addi	r2,r2,16
    bcc8:	28c00044 	addi	r3,r5,1
    bccc:	45c00015 	stw	r23,0(r8)
    bcd0:	41c00115 	stw	r7,4(r8)
    bcd4:	d8801c15 	stw	r2,112(sp)
    bcd8:	d8c01b15 	stw	r3,108(sp)
    bcdc:	68fff40e 	bge	r13,r3,bcb0 <__alt_mem_Flash_flash_data+0xf400bcb0>
    bce0:	1000151e 	bne	r2,zero,bd38 <___vfiprintf_internal_r+0xddc>
    bce4:	843ffc04 	addi	r16,r16,-16
    bce8:	01800044 	movi	r6,1
    bcec:	000b883a 	mov	r5,zero
    bcf0:	d811883a 	mov	r8,sp
    bcf4:	3c3ff316 	blt	r7,r16,bcc4 <__alt_mem_Flash_flash_data+0xf400bcc4>
    bcf8:	da402517 	ldw	r9,148(sp)
    bcfc:	b007883a 	mov	r3,r22
    bd00:	802d883a 	mov	r22,r16
    bd04:	1821883a 	mov	r16,r3
    bd08:	d8c02417 	ldw	r3,144(sp)
    bd0c:	1585883a 	add	r2,r2,r22
    bd10:	45800115 	stw	r22,4(r8)
    bd14:	40c00015 	stw	r3,0(r8)
    bd18:	d8801c15 	stw	r2,112(sp)
    bd1c:	d9801b15 	stw	r6,108(sp)
    bd20:	00c001c4 	movi	r3,7
    bd24:	19806d16 	blt	r3,r6,bedc <___vfiprintf_internal_r+0xf80>
    bd28:	42000204 	addi	r8,r8,8
    bd2c:	31000044 	addi	r4,r6,1
    bd30:	300b883a 	mov	r5,r6
    bd34:	003dd006 	br	b478 <__alt_mem_Flash_flash_data+0xf400b478>
    bd38:	d9002017 	ldw	r4,128(sp)
    bd3c:	d9402117 	ldw	r5,132(sp)
    bd40:	d9801a04 	addi	r6,sp,104
    bd44:	d9c02b15 	stw	r7,172(sp)
    bd48:	db402a15 	stw	r13,168(sp)
    bd4c:	000ae480 	call	ae48 <__sprint_r.part.0>
    bd50:	d9c02b17 	ldw	r7,172(sp)
    bd54:	db402a17 	ldw	r13,168(sp)
    bd58:	103faa1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bd5c:	d9401b17 	ldw	r5,108(sp)
    bd60:	d8801c17 	ldw	r2,112(sp)
    bd64:	d811883a 	mov	r8,sp
    bd68:	29800044 	addi	r6,r5,1
    bd6c:	003fd306 	br	bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bd70:	1000401e 	bne	r2,zero,be74 <___vfiprintf_internal_r+0xf18>
    bd74:	68003b26 	beq	r13,zero,be64 <___vfiprintf_internal_r+0xf08>
    bd78:	d9001d04 	addi	r4,sp,116
    bd7c:	00800084 	movi	r2,2
    bd80:	d9000015 	stw	r4,0(sp)
    bd84:	d8800115 	stw	r2,4(sp)
    bd88:	1809883a 	mov	r4,r3
    bd8c:	d811883a 	mov	r8,sp
    bd90:	003db406 	br	b464 <__alt_mem_Flash_flash_data+0xf400b464>
    bd94:	1000451e 	bne	r2,zero,beac <___vfiprintf_internal_r+0xf50>
    bd98:	01000044 	movi	r4,1
    bd9c:	000b883a 	mov	r5,zero
    bda0:	d811883a 	mov	r8,sp
    bda4:	003db206 	br	b470 <__alt_mem_Flash_flash_data+0xf400b470>
    bda8:	10803fcc 	andi	r2,r2,255
    bdac:	1000071e 	bne	r2,zero,bdcc <___vfiprintf_internal_r+0xe70>
    bdb0:	a880004c 	andi	r2,r21,1
    bdb4:	10000526 	beq	r2,zero,bdcc <___vfiprintf_internal_r+0xe70>
    bdb8:	00800c04 	movi	r2,48
    bdbc:	d88019c5 	stb	r2,103(sp)
    bdc0:	dcc02717 	ldw	r19,156(sp)
    bdc4:	dd0019c4 	addi	r20,sp,103
    bdc8:	003d5e06 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    bdcc:	dd001a04 	addi	r20,sp,104
    bdd0:	003d5c06 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    bdd4:	1000971e 	bne	r2,zero,c034 <___vfiprintf_internal_r+0x10d8>
    bdd8:	d8c01d87 	ldb	r3,118(sp)
    bddc:	18005826 	beq	r3,zero,bf40 <___vfiprintf_internal_r+0xfe4>
    bde0:	00800044 	movi	r2,1
    bde4:	d8c01d84 	addi	r3,sp,118
    bde8:	1009883a 	mov	r4,r2
    bdec:	d8c00015 	stw	r3,0(sp)
    bdf0:	d8800115 	stw	r2,4(sp)
    bdf4:	d811883a 	mov	r8,sp
    bdf8:	003f3206 	br	bac4 <__alt_mem_Flash_flash_data+0xf400bac4>
    bdfc:	8023883a 	mov	r17,r16
    be00:	003ca706 	br	b0a0 <__alt_mem_Flash_flash_data+0xf400b0a0>
    be04:	d9002017 	ldw	r4,128(sp)
    be08:	d9402117 	ldw	r5,132(sp)
    be0c:	d9801a04 	addi	r6,sp,104
    be10:	000ae480 	call	ae48 <__sprint_r.part.0>
    be14:	103f7b1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    be18:	d8801c17 	ldw	r2,112(sp)
    be1c:	d811883a 	mov	r8,sp
    be20:	003f9106 	br	bc68 <__alt_mem_Flash_flash_data+0xf400bc68>
    be24:	00800084 	movi	r2,2
    be28:	b348b03a 	or	r4,r22,r13
    be2c:	003d2906 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    be30:	d8802217 	ldw	r2,136(sp)
    be34:	001b883a 	mov	r13,zero
    be38:	15800017 	ldw	r22,0(r2)
    be3c:	10800104 	addi	r2,r2,4
    be40:	d8802215 	stw	r2,136(sp)
    be44:	003ea706 	br	b8e4 <__alt_mem_Flash_flash_data+0xf400b8e4>
    be48:	d9002017 	ldw	r4,128(sp)
    be4c:	d9402117 	ldw	r5,132(sp)
    be50:	d9801a04 	addi	r6,sp,104
    be54:	000ae480 	call	ae48 <__sprint_r.part.0>
    be58:	103f6a1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    be5c:	d811883a 	mov	r8,sp
    be60:	003cff06 	br	b260 <__alt_mem_Flash_flash_data+0xf400b260>
    be64:	000b883a 	mov	r5,zero
    be68:	1809883a 	mov	r4,r3
    be6c:	d811883a 	mov	r8,sp
    be70:	003d7f06 	br	b470 <__alt_mem_Flash_flash_data+0xf400b470>
    be74:	d9002017 	ldw	r4,128(sp)
    be78:	d9402117 	ldw	r5,132(sp)
    be7c:	d9801a04 	addi	r6,sp,104
    be80:	da402b15 	stw	r9,172(sp)
    be84:	db402a15 	stw	r13,168(sp)
    be88:	000ae480 	call	ae48 <__sprint_r.part.0>
    be8c:	da402b17 	ldw	r9,172(sp)
    be90:	db402a17 	ldw	r13,168(sp)
    be94:	103f5b1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    be98:	d9401b17 	ldw	r5,108(sp)
    be9c:	d8801c17 	ldw	r2,112(sp)
    bea0:	d811883a 	mov	r8,sp
    bea4:	29000044 	addi	r4,r5,1
    bea8:	003d6406 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    beac:	d9002017 	ldw	r4,128(sp)
    beb0:	d9402117 	ldw	r5,132(sp)
    beb4:	d9801a04 	addi	r6,sp,104
    beb8:	da402b15 	stw	r9,172(sp)
    bebc:	000ae480 	call	ae48 <__sprint_r.part.0>
    bec0:	da402b17 	ldw	r9,172(sp)
    bec4:	103f4f1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bec8:	d9401b17 	ldw	r5,108(sp)
    becc:	d8801c17 	ldw	r2,112(sp)
    bed0:	d811883a 	mov	r8,sp
    bed4:	29000044 	addi	r4,r5,1
    bed8:	003d6506 	br	b470 <__alt_mem_Flash_flash_data+0xf400b470>
    bedc:	10009a1e 	bne	r2,zero,c148 <___vfiprintf_internal_r+0x11ec>
    bee0:	01000044 	movi	r4,1
    bee4:	000b883a 	mov	r5,zero
    bee8:	d811883a 	mov	r8,sp
    beec:	003d6206 	br	b478 <__alt_mem_Flash_flash_data+0xf400b478>
    bef0:	d9002017 	ldw	r4,128(sp)
    bef4:	d9402117 	ldw	r5,132(sp)
    bef8:	d9801a04 	addi	r6,sp,104
    befc:	000ae480 	call	ae48 <__sprint_r.part.0>
    bf00:	103f401e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bf04:	d9001b17 	ldw	r4,108(sp)
    bf08:	d8801c17 	ldw	r2,112(sp)
    bf0c:	d811883a 	mov	r8,sp
    bf10:	21000044 	addi	r4,r4,1
    bf14:	003d7d06 	br	b50c <__alt_mem_Flash_flash_data+0xf400b50c>
    bf18:	05adc83a 	sub	r22,zero,r22
    bf1c:	b004c03a 	cmpne	r2,r22,zero
    bf20:	035bc83a 	sub	r13,zero,r13
    bf24:	689bc83a 	sub	r13,r13,r2
    bf28:	03800b44 	movi	r14,45
    bf2c:	db801d85 	stb	r14,118(sp)
    bf30:	4827883a 	mov	r19,r9
    bf34:	00800044 	movi	r2,1
    bf38:	b348b03a 	or	r4,r22,r13
    bf3c:	003ce806 	br	b2e0 <__alt_mem_Flash_flash_data+0xf400b2e0>
    bf40:	000b883a 	mov	r5,zero
    bf44:	01000044 	movi	r4,1
    bf48:	d811883a 	mov	r8,sp
    bf4c:	683d4826 	beq	r13,zero,b470 <__alt_mem_Flash_flash_data+0xf400b470>
    bf50:	00800084 	movi	r2,2
    bf54:	d8c01d04 	addi	r3,sp,116
    bf58:	d8c00015 	stw	r3,0(sp)
    bf5c:	d8800115 	stw	r2,4(sp)
    bf60:	003d4006 	br	b464 <__alt_mem_Flash_flash_data+0xf400b464>
    bf64:	00800084 	movi	r2,2
    bf68:	003cda06 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    bf6c:	a880100c 	andi	r2,r21,64
    bf70:	10004226 	beq	r2,zero,c07c <___vfiprintf_internal_r+0x1120>
    bf74:	d8802217 	ldw	r2,136(sp)
    bf78:	001b883a 	mov	r13,zero
    bf7c:	1580000b 	ldhu	r22,0(r2)
    bf80:	10800104 	addi	r2,r2,4
    bf84:	d8802215 	stw	r2,136(sp)
    bf88:	b009883a 	mov	r4,r22
    bf8c:	0005883a 	mov	r2,zero
    bf90:	003cd006 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    bf94:	80c00007 	ldb	r3,0(r16)
    bf98:	8005883a 	mov	r2,r16
    bf9c:	003c4d06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    bfa0:	a880100c 	andi	r2,r21,64
    bfa4:	10004426 	beq	r2,zero,c0b8 <___vfiprintf_internal_r+0x115c>
    bfa8:	d8c02217 	ldw	r3,136(sp)
    bfac:	001b883a 	mov	r13,zero
    bfb0:	00800044 	movi	r2,1
    bfb4:	1d80000b 	ldhu	r22,0(r3)
    bfb8:	18c00104 	addi	r3,r3,4
    bfbc:	d8c02215 	stw	r3,136(sp)
    bfc0:	b009883a 	mov	r4,r22
    bfc4:	003cc306 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    bfc8:	a880040c 	andi	r2,r21,16
    bfcc:	1000091e 	bne	r2,zero,bff4 <___vfiprintf_internal_r+0x1098>
    bfd0:	aac0100c 	andi	r11,r21,64
    bfd4:	58000726 	beq	r11,zero,bff4 <___vfiprintf_internal_r+0x1098>
    bfd8:	d8c02217 	ldw	r3,136(sp)
    bfdc:	d9002317 	ldw	r4,140(sp)
    bfe0:	18800017 	ldw	r2,0(r3)
    bfe4:	18c00104 	addi	r3,r3,4
    bfe8:	d8c02215 	stw	r3,136(sp)
    bfec:	1100000d 	sth	r4,0(r2)
    bff0:	003c0e06 	br	b02c <__alt_mem_Flash_flash_data+0xf400b02c>
    bff4:	d8c02217 	ldw	r3,136(sp)
    bff8:	d9002317 	ldw	r4,140(sp)
    bffc:	18800017 	ldw	r2,0(r3)
    c000:	18c00104 	addi	r3,r3,4
    c004:	d8c02215 	stw	r3,136(sp)
    c008:	11000015 	stw	r4,0(r2)
    c00c:	003c0706 	br	b02c <__alt_mem_Flash_flash_data+0xf400b02c>
    c010:	a880100c 	andi	r2,r21,64
    c014:	10002126 	beq	r2,zero,c09c <___vfiprintf_internal_r+0x1140>
    c018:	1d80000f 	ldh	r22,0(r3)
    c01c:	d8c02217 	ldw	r3,136(sp)
    c020:	b01bd7fa 	srai	r13,r22,31
    c024:	18c00104 	addi	r3,r3,4
    c028:	d8c02215 	stw	r3,136(sp)
    c02c:	6805883a 	mov	r2,r13
    c030:	003dc406 	br	b744 <__alt_mem_Flash_flash_data+0xf400b744>
    c034:	d9002017 	ldw	r4,128(sp)
    c038:	d9402117 	ldw	r5,132(sp)
    c03c:	d9801a04 	addi	r6,sp,104
    c040:	da402b15 	stw	r9,172(sp)
    c044:	db402a15 	stw	r13,168(sp)
    c048:	000ae480 	call	ae48 <__sprint_r.part.0>
    c04c:	da402b17 	ldw	r9,172(sp)
    c050:	db402a17 	ldw	r13,168(sp)
    c054:	103eeb1e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    c058:	d9401b17 	ldw	r5,108(sp)
    c05c:	d8801c17 	ldw	r2,112(sp)
    c060:	d811883a 	mov	r8,sp
    c064:	29000044 	addi	r4,r5,1
    c068:	003e8b06 	br	ba98 <__alt_mem_Flash_flash_data+0xf400ba98>
    c06c:	9023883a 	mov	r17,r18
    c070:	003d5a06 	br	b5dc <__alt_mem_Flash_flash_data+0xf400b5dc>
    c074:	4827883a 	mov	r19,r9
    c078:	003e3506 	br	b950 <__alt_mem_Flash_flash_data+0xf400b950>
    c07c:	d8c02217 	ldw	r3,136(sp)
    c080:	001b883a 	mov	r13,zero
    c084:	0005883a 	mov	r2,zero
    c088:	1d800017 	ldw	r22,0(r3)
    c08c:	18c00104 	addi	r3,r3,4
    c090:	d8c02215 	stw	r3,136(sp)
    c094:	b009883a 	mov	r4,r22
    c098:	003c8e06 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    c09c:	1d800017 	ldw	r22,0(r3)
    c0a0:	d9002217 	ldw	r4,136(sp)
    c0a4:	b01bd7fa 	srai	r13,r22,31
    c0a8:	21000104 	addi	r4,r4,4
    c0ac:	d9002215 	stw	r4,136(sp)
    c0b0:	6805883a 	mov	r2,r13
    c0b4:	003da306 	br	b744 <__alt_mem_Flash_flash_data+0xf400b744>
    c0b8:	d9002217 	ldw	r4,136(sp)
    c0bc:	001b883a 	mov	r13,zero
    c0c0:	00800044 	movi	r2,1
    c0c4:	25800017 	ldw	r22,0(r4)
    c0c8:	21000104 	addi	r4,r4,4
    c0cc:	d9002215 	stw	r4,136(sp)
    c0d0:	b009883a 	mov	r4,r22
    c0d4:	003c7f06 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    c0d8:	00c000b4 	movhi	r3,2
    c0dc:	18f1ea04 	addi	r3,r3,-14424
    c0e0:	d8c02415 	stw	r3,144(sp)
    c0e4:	003cff06 	br	b4e4 <__alt_mem_Flash_flash_data+0xf400b4e4>
    c0e8:	d8801c17 	ldw	r2,112(sp)
    c0ec:	dd402117 	ldw	r21,132(sp)
    c0f0:	103ec526 	beq	r2,zero,bc08 <__alt_mem_Flash_flash_data+0xf400bc08>
    c0f4:	d9002017 	ldw	r4,128(sp)
    c0f8:	a80b883a 	mov	r5,r21
    c0fc:	d9801a04 	addi	r6,sp,104
    c100:	000ae480 	call	ae48 <__sprint_r.part.0>
    c104:	003ec006 	br	bc08 <__alt_mem_Flash_flash_data+0xf400bc08>
    c108:	80800044 	addi	r2,r16,1
    c10c:	ad400814 	ori	r21,r21,32
    c110:	80c00047 	ldb	r3,1(r16)
    c114:	003bef06 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    c118:	04a5c83a 	sub	r18,zero,r18
    c11c:	8005883a 	mov	r2,r16
    c120:	d8c02215 	stw	r3,136(sp)
    c124:	003d5306 	br	b674 <__alt_mem_Flash_flash_data+0xf400b674>
    c128:	da002a15 	stw	r8,168(sp)
    c12c:	0000c180 	call	c18 <strlen>
    c130:	1027883a 	mov	r19,r2
    c134:	db801d83 	ldbu	r14,118(sp)
    c138:	dd802215 	stw	r22,136(sp)
    c13c:	0013883a 	mov	r9,zero
    c140:	da002a17 	ldw	r8,168(sp)
    c144:	003c7f06 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    c148:	d9002017 	ldw	r4,128(sp)
    c14c:	d9402117 	ldw	r5,132(sp)
    c150:	d9801a04 	addi	r6,sp,104
    c154:	da402b15 	stw	r9,172(sp)
    c158:	000ae480 	call	ae48 <__sprint_r.part.0>
    c15c:	da402b17 	ldw	r9,172(sp)
    c160:	103ea81e 	bne	r2,zero,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    c164:	d9401b17 	ldw	r5,108(sp)
    c168:	d8801c17 	ldw	r2,112(sp)
    c16c:	d811883a 	mov	r8,sp
    c170:	29000044 	addi	r4,r5,1
    c174:	003cc006 	br	b478 <__alt_mem_Flash_flash_data+0xf400b478>
    c178:	d9401b17 	ldw	r5,108(sp)
    c17c:	010000b4 	movhi	r4,2
    c180:	2131ee04 	addi	r4,r4,-14408
    c184:	d9002415 	stw	r4,144(sp)
    c188:	29400044 	addi	r5,r5,1
    c18c:	003c9f06 	br	b40c <__alt_mem_Flash_flash_data+0xf400b40c>
    c190:	00800184 	movi	r2,6
    c194:	1240012e 	bgeu	r2,r9,c19c <___vfiprintf_internal_r+0x1240>
    c198:	1013883a 	mov	r9,r2
    c19c:	4827883a 	mov	r19,r9
    c1a0:	4823883a 	mov	r17,r9
    c1a4:	48001116 	blt	r9,zero,c1ec <___vfiprintf_internal_r+0x1290>
    c1a8:	050000b4 	movhi	r20,2
    c1ac:	dd802215 	stw	r22,136(sp)
    c1b0:	a5317e04 	addi	r20,r20,-14856
    c1b4:	003db106 	br	b87c <__alt_mem_Flash_flash_data+0xf400b87c>
    c1b8:	d9401b17 	ldw	r5,108(sp)
    c1bc:	010000b4 	movhi	r4,2
    c1c0:	2131ee04 	addi	r4,r4,-14408
    c1c4:	d9002415 	stw	r4,144(sp)
    c1c8:	29400044 	addi	r5,r5,1
    c1cc:	003cf906 	br	b5b4 <__alt_mem_Flash_flash_data+0xf400b5b4>
    c1d0:	4827883a 	mov	r19,r9
    c1d4:	db801d83 	ldbu	r14,118(sp)
    c1d8:	dd802215 	stw	r22,136(sp)
    c1dc:	0013883a 	mov	r9,zero
    c1e0:	003c5806 	br	b344 <__alt_mem_Flash_flash_data+0xf400b344>
    c1e4:	200d883a 	mov	r6,r4
    c1e8:	003ec706 	br	bd08 <__alt_mem_Flash_flash_data+0xf400bd08>
    c1ec:	0023883a 	mov	r17,zero
    c1f0:	003fed06 	br	c1a8 <__alt_mem_Flash_flash_data+0xf400c1a8>
    c1f4:	d9002217 	ldw	r4,136(sp)
    c1f8:	22400017 	ldw	r9,0(r4)
    c1fc:	20c00104 	addi	r3,r4,4
    c200:	d8c02215 	stw	r3,136(sp)
    c204:	483fc20e 	bge	r9,zero,c110 <__alt_mem_Flash_flash_data+0xf400c110>
    c208:	027fffc4 	movi	r9,-1
    c20c:	80c00047 	ldb	r3,1(r16)
    c210:	003bb006 	br	b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    c214:	8c80010e 	bge	r17,r18,c21c <___vfiprintf_internal_r+0x12c0>
    c218:	9023883a 	mov	r17,r18
    c21c:	d8802317 	ldw	r2,140(sp)
    c220:	1445883a 	add	r2,r2,r17
    c224:	d8802315 	stw	r2,140(sp)
    c228:	003cef06 	br	b5e8 <__alt_mem_Flash_flash_data+0xf400b5e8>

0000c22c <__vfiprintf_internal>:
    c22c:	2007883a 	mov	r3,r4
    c230:	010000b4 	movhi	r4,2
    c234:	213a9b04 	addi	r4,r4,-5524
    c238:	21000017 	ldw	r4,0(r4)
    c23c:	2805883a 	mov	r2,r5
    c240:	300f883a 	mov	r7,r6
    c244:	180b883a 	mov	r5,r3
    c248:	100d883a 	mov	r6,r2
    c24c:	000af5c1 	jmpi	af5c <___vfiprintf_internal_r>

0000c250 <__sbprintf>:
    c250:	2880030b 	ldhu	r2,12(r5)
    c254:	2ac01917 	ldw	r11,100(r5)
    c258:	2a80038b 	ldhu	r10,14(r5)
    c25c:	2a400717 	ldw	r9,28(r5)
    c260:	2a000917 	ldw	r8,36(r5)
    c264:	defee204 	addi	sp,sp,-1144
    c268:	00c10004 	movi	r3,1024
    c26c:	dc011a15 	stw	r16,1128(sp)
    c270:	10bfff4c 	andi	r2,r2,65533
    c274:	2821883a 	mov	r16,r5
    c278:	d8cb883a 	add	r5,sp,r3
    c27c:	dc811c15 	stw	r18,1136(sp)
    c280:	dc411b15 	stw	r17,1132(sp)
    c284:	dfc11d15 	stw	ra,1140(sp)
    c288:	2025883a 	mov	r18,r4
    c28c:	d881030d 	sth	r2,1036(sp)
    c290:	dac11915 	stw	r11,1124(sp)
    c294:	da81038d 	sth	r10,1038(sp)
    c298:	da410715 	stw	r9,1052(sp)
    c29c:	da010915 	stw	r8,1060(sp)
    c2a0:	dec10015 	stw	sp,1024(sp)
    c2a4:	dec10415 	stw	sp,1040(sp)
    c2a8:	d8c10215 	stw	r3,1032(sp)
    c2ac:	d8c10515 	stw	r3,1044(sp)
    c2b0:	d8010615 	stw	zero,1048(sp)
    c2b4:	000af5c0 	call	af5c <___vfiprintf_internal_r>
    c2b8:	1023883a 	mov	r17,r2
    c2bc:	10000416 	blt	r2,zero,c2d0 <__sbprintf+0x80>
    c2c0:	9009883a 	mov	r4,r18
    c2c4:	d9410004 	addi	r5,sp,1024
    c2c8:	00068f40 	call	68f4 <_fflush_r>
    c2cc:	10000d1e 	bne	r2,zero,c304 <__sbprintf+0xb4>
    c2d0:	d8c1030b 	ldhu	r3,1036(sp)
    c2d4:	18c0100c 	andi	r3,r3,64
    c2d8:	18000326 	beq	r3,zero,c2e8 <__sbprintf+0x98>
    c2dc:	8080030b 	ldhu	r2,12(r16)
    c2e0:	10801014 	ori	r2,r2,64
    c2e4:	8080030d 	sth	r2,12(r16)
    c2e8:	8805883a 	mov	r2,r17
    c2ec:	dfc11d17 	ldw	ra,1140(sp)
    c2f0:	dc811c17 	ldw	r18,1136(sp)
    c2f4:	dc411b17 	ldw	r17,1132(sp)
    c2f8:	dc011a17 	ldw	r16,1128(sp)
    c2fc:	dec11e04 	addi	sp,sp,1144
    c300:	f800283a 	ret
    c304:	047fffc4 	movi	r17,-1
    c308:	003ff106 	br	c2d0 <__alt_mem_Flash_flash_data+0xf400c2d0>

0000c30c <_write_r>:
    c30c:	defffd04 	addi	sp,sp,-12
    c310:	dc000015 	stw	r16,0(sp)
    c314:	040000b4 	movhi	r16,2
    c318:	dc400115 	stw	r17,4(sp)
    c31c:	8402a304 	addi	r16,r16,2700
    c320:	2023883a 	mov	r17,r4
    c324:	2809883a 	mov	r4,r5
    c328:	300b883a 	mov	r5,r6
    c32c:	380d883a 	mov	r6,r7
    c330:	dfc00215 	stw	ra,8(sp)
    c334:	80000015 	stw	zero,0(r16)
    c338:	00107480 	call	10748 <write>
    c33c:	00ffffc4 	movi	r3,-1
    c340:	10c00526 	beq	r2,r3,c358 <_write_r+0x4c>
    c344:	dfc00217 	ldw	ra,8(sp)
    c348:	dc400117 	ldw	r17,4(sp)
    c34c:	dc000017 	ldw	r16,0(sp)
    c350:	dec00304 	addi	sp,sp,12
    c354:	f800283a 	ret
    c358:	80c00017 	ldw	r3,0(r16)
    c35c:	183ff926 	beq	r3,zero,c344 <__alt_mem_Flash_flash_data+0xf400c344>
    c360:	88c00015 	stw	r3,0(r17)
    c364:	003ff706 	br	c344 <__alt_mem_Flash_flash_data+0xf400c344>

0000c368 <_close_r>:
    c368:	defffd04 	addi	sp,sp,-12
    c36c:	dc000015 	stw	r16,0(sp)
    c370:	040000b4 	movhi	r16,2
    c374:	dc400115 	stw	r17,4(sp)
    c378:	8402a304 	addi	r16,r16,2700
    c37c:	2023883a 	mov	r17,r4
    c380:	2809883a 	mov	r4,r5
    c384:	dfc00215 	stw	ra,8(sp)
    c388:	80000015 	stw	zero,0(r16)
    c38c:	000fed00 	call	fed0 <close>
    c390:	00ffffc4 	movi	r3,-1
    c394:	10c00526 	beq	r2,r3,c3ac <_close_r+0x44>
    c398:	dfc00217 	ldw	ra,8(sp)
    c39c:	dc400117 	ldw	r17,4(sp)
    c3a0:	dc000017 	ldw	r16,0(sp)
    c3a4:	dec00304 	addi	sp,sp,12
    c3a8:	f800283a 	ret
    c3ac:	80c00017 	ldw	r3,0(r16)
    c3b0:	183ff926 	beq	r3,zero,c398 <__alt_mem_Flash_flash_data+0xf400c398>
    c3b4:	88c00015 	stw	r3,0(r17)
    c3b8:	003ff706 	br	c398 <__alt_mem_Flash_flash_data+0xf400c398>

0000c3bc <_calloc_r>:
    c3bc:	298b383a 	mul	r5,r5,r6
    c3c0:	defffe04 	addi	sp,sp,-8
    c3c4:	dc000015 	stw	r16,0(sp)
    c3c8:	dfc00115 	stw	ra,4(sp)
    c3cc:	0007a140 	call	7a14 <_malloc_r>
    c3d0:	1021883a 	mov	r16,r2
    c3d4:	10002826 	beq	r2,zero,c478 <_calloc_r+0xbc>
    c3d8:	11bfff17 	ldw	r6,-4(r2)
    c3dc:	00bfff04 	movi	r2,-4
    c3e0:	00c00904 	movi	r3,36
    c3e4:	308c703a 	and	r6,r6,r2
    c3e8:	308d883a 	add	r6,r6,r2
    c3ec:	19801436 	bltu	r3,r6,c440 <_calloc_r+0x84>
    c3f0:	008004c4 	movi	r2,19
    c3f4:	11800936 	bltu	r2,r6,c41c <_calloc_r+0x60>
    c3f8:	8005883a 	mov	r2,r16
    c3fc:	10000015 	stw	zero,0(r2)
    c400:	10000115 	stw	zero,4(r2)
    c404:	10000215 	stw	zero,8(r2)
    c408:	8005883a 	mov	r2,r16
    c40c:	dfc00117 	ldw	ra,4(sp)
    c410:	dc000017 	ldw	r16,0(sp)
    c414:	dec00204 	addi	sp,sp,8
    c418:	f800283a 	ret
    c41c:	80000015 	stw	zero,0(r16)
    c420:	80000115 	stw	zero,4(r16)
    c424:	008006c4 	movi	r2,27
    c428:	11800d2e 	bgeu	r2,r6,c460 <_calloc_r+0xa4>
    c42c:	80000215 	stw	zero,8(r16)
    c430:	80000315 	stw	zero,12(r16)
    c434:	30c00c26 	beq	r6,r3,c468 <_calloc_r+0xac>
    c438:	80800404 	addi	r2,r16,16
    c43c:	003fef06 	br	c3fc <__alt_mem_Flash_flash_data+0xf400c3fc>
    c440:	8009883a 	mov	r4,r16
    c444:	000b883a 	mov	r5,zero
    c448:	00008680 	call	868 <memset>
    c44c:	8005883a 	mov	r2,r16
    c450:	dfc00117 	ldw	ra,4(sp)
    c454:	dc000017 	ldw	r16,0(sp)
    c458:	dec00204 	addi	sp,sp,8
    c45c:	f800283a 	ret
    c460:	80800204 	addi	r2,r16,8
    c464:	003fe506 	br	c3fc <__alt_mem_Flash_flash_data+0xf400c3fc>
    c468:	80000415 	stw	zero,16(r16)
    c46c:	80800604 	addi	r2,r16,24
    c470:	80000515 	stw	zero,20(r16)
    c474:	003fe106 	br	c3fc <__alt_mem_Flash_flash_data+0xf400c3fc>
    c478:	0005883a 	mov	r2,zero
    c47c:	003fe306 	br	c40c <__alt_mem_Flash_flash_data+0xf400c40c>

0000c480 <_fclose_r>:
    c480:	28003926 	beq	r5,zero,c568 <_fclose_r+0xe8>
    c484:	defffc04 	addi	sp,sp,-16
    c488:	dc400115 	stw	r17,4(sp)
    c48c:	dc000015 	stw	r16,0(sp)
    c490:	dfc00315 	stw	ra,12(sp)
    c494:	dc800215 	stw	r18,8(sp)
    c498:	2023883a 	mov	r17,r4
    c49c:	2821883a 	mov	r16,r5
    c4a0:	20000226 	beq	r4,zero,c4ac <_fclose_r+0x2c>
    c4a4:	20800e17 	ldw	r2,56(r4)
    c4a8:	10002726 	beq	r2,zero,c548 <_fclose_r+0xc8>
    c4ac:	8080030f 	ldh	r2,12(r16)
    c4b0:	1000071e 	bne	r2,zero,c4d0 <_fclose_r+0x50>
    c4b4:	0005883a 	mov	r2,zero
    c4b8:	dfc00317 	ldw	ra,12(sp)
    c4bc:	dc800217 	ldw	r18,8(sp)
    c4c0:	dc400117 	ldw	r17,4(sp)
    c4c4:	dc000017 	ldw	r16,0(sp)
    c4c8:	dec00404 	addi	sp,sp,16
    c4cc:	f800283a 	ret
    c4d0:	8809883a 	mov	r4,r17
    c4d4:	800b883a 	mov	r5,r16
    c4d8:	00066ec0 	call	66ec <__sflush_r>
    c4dc:	1025883a 	mov	r18,r2
    c4e0:	80800b17 	ldw	r2,44(r16)
    c4e4:	10000426 	beq	r2,zero,c4f8 <_fclose_r+0x78>
    c4e8:	81400717 	ldw	r5,28(r16)
    c4ec:	8809883a 	mov	r4,r17
    c4f0:	103ee83a 	callr	r2
    c4f4:	10001616 	blt	r2,zero,c550 <_fclose_r+0xd0>
    c4f8:	8080030b 	ldhu	r2,12(r16)
    c4fc:	1080200c 	andi	r2,r2,128
    c500:	1000151e 	bne	r2,zero,c558 <_fclose_r+0xd8>
    c504:	81400c17 	ldw	r5,48(r16)
    c508:	28000526 	beq	r5,zero,c520 <_fclose_r+0xa0>
    c50c:	80801004 	addi	r2,r16,64
    c510:	28800226 	beq	r5,r2,c51c <_fclose_r+0x9c>
    c514:	8809883a 	mov	r4,r17
    c518:	0006e440 	call	6e44 <_free_r>
    c51c:	80000c15 	stw	zero,48(r16)
    c520:	81401117 	ldw	r5,68(r16)
    c524:	28000326 	beq	r5,zero,c534 <_fclose_r+0xb4>
    c528:	8809883a 	mov	r4,r17
    c52c:	0006e440 	call	6e44 <_free_r>
    c530:	80001115 	stw	zero,68(r16)
    c534:	0006ce00 	call	6ce0 <__sfp_lock_acquire>
    c538:	8000030d 	sth	zero,12(r16)
    c53c:	0006ce40 	call	6ce4 <__sfp_lock_release>
    c540:	9005883a 	mov	r2,r18
    c544:	003fdc06 	br	c4b8 <__alt_mem_Flash_flash_data+0xf400c4b8>
    c548:	0006cd00 	call	6cd0 <__sinit>
    c54c:	003fd706 	br	c4ac <__alt_mem_Flash_flash_data+0xf400c4ac>
    c550:	04bfffc4 	movi	r18,-1
    c554:	003fe806 	br	c4f8 <__alt_mem_Flash_flash_data+0xf400c4f8>
    c558:	81400417 	ldw	r5,16(r16)
    c55c:	8809883a 	mov	r4,r17
    c560:	0006e440 	call	6e44 <_free_r>
    c564:	003fe706 	br	c504 <__alt_mem_Flash_flash_data+0xf400c504>
    c568:	0005883a 	mov	r2,zero
    c56c:	f800283a 	ret

0000c570 <fclose>:
    c570:	008000b4 	movhi	r2,2
    c574:	10ba9b04 	addi	r2,r2,-5524
    c578:	200b883a 	mov	r5,r4
    c57c:	11000017 	ldw	r4,0(r2)
    c580:	000c4801 	jmpi	c480 <_fclose_r>

0000c584 <_fputwc_r>:
    c584:	3080030b 	ldhu	r2,12(r6)
    c588:	defff804 	addi	sp,sp,-32
    c58c:	dcc00415 	stw	r19,16(sp)
    c590:	dc800315 	stw	r18,12(sp)
    c594:	dc000115 	stw	r16,4(sp)
    c598:	dfc00715 	stw	ra,28(sp)
    c59c:	dd400615 	stw	r21,24(sp)
    c5a0:	dd000515 	stw	r20,20(sp)
    c5a4:	dc400215 	stw	r17,8(sp)
    c5a8:	10c8000c 	andi	r3,r2,8192
    c5ac:	3021883a 	mov	r16,r6
    c5b0:	2027883a 	mov	r19,r4
    c5b4:	2825883a 	mov	r18,r5
    c5b8:	1800051e 	bne	r3,zero,c5d0 <_fputwc_r+0x4c>
    c5bc:	30c01917 	ldw	r3,100(r6)
    c5c0:	10880014 	ori	r2,r2,8192
    c5c4:	3080030d 	sth	r2,12(r6)
    c5c8:	18880014 	ori	r2,r3,8192
    c5cc:	30801915 	stw	r2,100(r6)
    c5d0:	00078040 	call	7804 <__locale_mb_cur_max>
    c5d4:	00c00044 	movi	r3,1
    c5d8:	10c03e26 	beq	r2,r3,c6d4 <_fputwc_r+0x150>
    c5dc:	9809883a 	mov	r4,r19
    c5e0:	d80b883a 	mov	r5,sp
    c5e4:	900d883a 	mov	r6,r18
    c5e8:	81c01704 	addi	r7,r16,92
    c5ec:	000ca1c0 	call	ca1c <_wcrtomb_r>
    c5f0:	1029883a 	mov	r20,r2
    c5f4:	00bfffc4 	movi	r2,-1
    c5f8:	a0802026 	beq	r20,r2,c67c <_fputwc_r+0xf8>
    c5fc:	d9400003 	ldbu	r5,0(sp)
    c600:	a0001c26 	beq	r20,zero,c674 <_fputwc_r+0xf0>
    c604:	0023883a 	mov	r17,zero
    c608:	05400284 	movi	r21,10
    c60c:	00000906 	br	c634 <_fputwc_r+0xb0>
    c610:	80800017 	ldw	r2,0(r16)
    c614:	11400005 	stb	r5,0(r2)
    c618:	80c00017 	ldw	r3,0(r16)
    c61c:	18c00044 	addi	r3,r3,1
    c620:	80c00015 	stw	r3,0(r16)
    c624:	8c400044 	addi	r17,r17,1
    c628:	dc45883a 	add	r2,sp,r17
    c62c:	8d00112e 	bgeu	r17,r20,c674 <_fputwc_r+0xf0>
    c630:	11400003 	ldbu	r5,0(r2)
    c634:	80c00217 	ldw	r3,8(r16)
    c638:	18ffffc4 	addi	r3,r3,-1
    c63c:	80c00215 	stw	r3,8(r16)
    c640:	183ff30e 	bge	r3,zero,c610 <__alt_mem_Flash_flash_data+0xf400c610>
    c644:	80800617 	ldw	r2,24(r16)
    c648:	18801916 	blt	r3,r2,c6b0 <_fputwc_r+0x12c>
    c64c:	80800017 	ldw	r2,0(r16)
    c650:	11400005 	stb	r5,0(r2)
    c654:	80800017 	ldw	r2,0(r16)
    c658:	10c00003 	ldbu	r3,0(r2)
    c65c:	10800044 	addi	r2,r2,1
    c660:	1d402326 	beq	r3,r21,c6f0 <_fputwc_r+0x16c>
    c664:	80800015 	stw	r2,0(r16)
    c668:	8c400044 	addi	r17,r17,1
    c66c:	dc45883a 	add	r2,sp,r17
    c670:	8d3fef36 	bltu	r17,r20,c630 <__alt_mem_Flash_flash_data+0xf400c630>
    c674:	9005883a 	mov	r2,r18
    c678:	00000406 	br	c68c <_fputwc_r+0x108>
    c67c:	80c0030b 	ldhu	r3,12(r16)
    c680:	a005883a 	mov	r2,r20
    c684:	18c01014 	ori	r3,r3,64
    c688:	80c0030d 	sth	r3,12(r16)
    c68c:	dfc00717 	ldw	ra,28(sp)
    c690:	dd400617 	ldw	r21,24(sp)
    c694:	dd000517 	ldw	r20,20(sp)
    c698:	dcc00417 	ldw	r19,16(sp)
    c69c:	dc800317 	ldw	r18,12(sp)
    c6a0:	dc400217 	ldw	r17,8(sp)
    c6a4:	dc000117 	ldw	r16,4(sp)
    c6a8:	dec00804 	addi	sp,sp,32
    c6ac:	f800283a 	ret
    c6b0:	9809883a 	mov	r4,r19
    c6b4:	29403fcc 	andi	r5,r5,255
    c6b8:	800d883a 	mov	r6,r16
    c6bc:	000c8c80 	call	c8c8 <__swbuf_r>
    c6c0:	10bfffe0 	cmpeqi	r2,r2,-1
    c6c4:	10803fcc 	andi	r2,r2,255
    c6c8:	103fd626 	beq	r2,zero,c624 <__alt_mem_Flash_flash_data+0xf400c624>
    c6cc:	00bfffc4 	movi	r2,-1
    c6d0:	003fee06 	br	c68c <__alt_mem_Flash_flash_data+0xf400c68c>
    c6d4:	90ffffc4 	addi	r3,r18,-1
    c6d8:	01003f84 	movi	r4,254
    c6dc:	20ffbf36 	bltu	r4,r3,c5dc <__alt_mem_Flash_flash_data+0xf400c5dc>
    c6e0:	900b883a 	mov	r5,r18
    c6e4:	dc800005 	stb	r18,0(sp)
    c6e8:	1029883a 	mov	r20,r2
    c6ec:	003fc506 	br	c604 <__alt_mem_Flash_flash_data+0xf400c604>
    c6f0:	9809883a 	mov	r4,r19
    c6f4:	a80b883a 	mov	r5,r21
    c6f8:	800d883a 	mov	r6,r16
    c6fc:	000c8c80 	call	c8c8 <__swbuf_r>
    c700:	10bfffe0 	cmpeqi	r2,r2,-1
    c704:	003fef06 	br	c6c4 <__alt_mem_Flash_flash_data+0xf400c6c4>

0000c708 <fputwc>:
    c708:	008000b4 	movhi	r2,2
    c70c:	defffc04 	addi	sp,sp,-16
    c710:	10ba9b04 	addi	r2,r2,-5524
    c714:	dc000115 	stw	r16,4(sp)
    c718:	14000017 	ldw	r16,0(r2)
    c71c:	dc400215 	stw	r17,8(sp)
    c720:	dfc00315 	stw	ra,12(sp)
    c724:	2023883a 	mov	r17,r4
    c728:	280d883a 	mov	r6,r5
    c72c:	80000626 	beq	r16,zero,c748 <fputwc+0x40>
    c730:	80800e17 	ldw	r2,56(r16)
    c734:	1000041e 	bne	r2,zero,c748 <fputwc+0x40>
    c738:	8009883a 	mov	r4,r16
    c73c:	d9400015 	stw	r5,0(sp)
    c740:	0006cd00 	call	6cd0 <__sinit>
    c744:	d9800017 	ldw	r6,0(sp)
    c748:	8009883a 	mov	r4,r16
    c74c:	880b883a 	mov	r5,r17
    c750:	dfc00317 	ldw	ra,12(sp)
    c754:	dc400217 	ldw	r17,8(sp)
    c758:	dc000117 	ldw	r16,4(sp)
    c75c:	dec00404 	addi	sp,sp,16
    c760:	000c5841 	jmpi	c584 <_fputwc_r>

0000c764 <_fstat_r>:
    c764:	defffd04 	addi	sp,sp,-12
    c768:	dc000015 	stw	r16,0(sp)
    c76c:	040000b4 	movhi	r16,2
    c770:	dc400115 	stw	r17,4(sp)
    c774:	8402a304 	addi	r16,r16,2700
    c778:	2023883a 	mov	r17,r4
    c77c:	2809883a 	mov	r4,r5
    c780:	300b883a 	mov	r5,r6
    c784:	dfc00215 	stw	ra,8(sp)
    c788:	80000015 	stw	zero,0(r16)
    c78c:	001001c0 	call	1001c <fstat>
    c790:	00ffffc4 	movi	r3,-1
    c794:	10c00526 	beq	r2,r3,c7ac <_fstat_r+0x48>
    c798:	dfc00217 	ldw	ra,8(sp)
    c79c:	dc400117 	ldw	r17,4(sp)
    c7a0:	dc000017 	ldw	r16,0(sp)
    c7a4:	dec00304 	addi	sp,sp,12
    c7a8:	f800283a 	ret
    c7ac:	80c00017 	ldw	r3,0(r16)
    c7b0:	183ff926 	beq	r3,zero,c798 <__alt_mem_Flash_flash_data+0xf400c798>
    c7b4:	88c00015 	stw	r3,0(r17)
    c7b8:	003ff706 	br	c798 <__alt_mem_Flash_flash_data+0xf400c798>

0000c7bc <_isatty_r>:
    c7bc:	defffd04 	addi	sp,sp,-12
    c7c0:	dc000015 	stw	r16,0(sp)
    c7c4:	040000b4 	movhi	r16,2
    c7c8:	dc400115 	stw	r17,4(sp)
    c7cc:	8402a304 	addi	r16,r16,2700
    c7d0:	2023883a 	mov	r17,r4
    c7d4:	2809883a 	mov	r4,r5
    c7d8:	dfc00215 	stw	ra,8(sp)
    c7dc:	80000015 	stw	zero,0(r16)
    c7e0:	001011c0 	call	1011c <isatty>
    c7e4:	00ffffc4 	movi	r3,-1
    c7e8:	10c00526 	beq	r2,r3,c800 <_isatty_r+0x44>
    c7ec:	dfc00217 	ldw	ra,8(sp)
    c7f0:	dc400117 	ldw	r17,4(sp)
    c7f4:	dc000017 	ldw	r16,0(sp)
    c7f8:	dec00304 	addi	sp,sp,12
    c7fc:	f800283a 	ret
    c800:	80c00017 	ldw	r3,0(r16)
    c804:	183ff926 	beq	r3,zero,c7ec <__alt_mem_Flash_flash_data+0xf400c7ec>
    c808:	88c00015 	stw	r3,0(r17)
    c80c:	003ff706 	br	c7ec <__alt_mem_Flash_flash_data+0xf400c7ec>

0000c810 <_lseek_r>:
    c810:	defffd04 	addi	sp,sp,-12
    c814:	dc000015 	stw	r16,0(sp)
    c818:	040000b4 	movhi	r16,2
    c81c:	dc400115 	stw	r17,4(sp)
    c820:	8402a304 	addi	r16,r16,2700
    c824:	2023883a 	mov	r17,r4
    c828:	2809883a 	mov	r4,r5
    c82c:	300b883a 	mov	r5,r6
    c830:	380d883a 	mov	r6,r7
    c834:	dfc00215 	stw	ra,8(sp)
    c838:	80000015 	stw	zero,0(r16)
    c83c:	00102f40 	call	102f4 <lseek>
    c840:	00ffffc4 	movi	r3,-1
    c844:	10c00526 	beq	r2,r3,c85c <_lseek_r+0x4c>
    c848:	dfc00217 	ldw	ra,8(sp)
    c84c:	dc400117 	ldw	r17,4(sp)
    c850:	dc000017 	ldw	r16,0(sp)
    c854:	dec00304 	addi	sp,sp,12
    c858:	f800283a 	ret
    c85c:	80c00017 	ldw	r3,0(r16)
    c860:	183ff926 	beq	r3,zero,c848 <__alt_mem_Flash_flash_data+0xf400c848>
    c864:	88c00015 	stw	r3,0(r17)
    c868:	003ff706 	br	c848 <__alt_mem_Flash_flash_data+0xf400c848>

0000c86c <_read_r>:
    c86c:	defffd04 	addi	sp,sp,-12
    c870:	dc000015 	stw	r16,0(sp)
    c874:	040000b4 	movhi	r16,2
    c878:	dc400115 	stw	r17,4(sp)
    c87c:	8402a304 	addi	r16,r16,2700
    c880:	2023883a 	mov	r17,r4
    c884:	2809883a 	mov	r4,r5
    c888:	300b883a 	mov	r5,r6
    c88c:	380d883a 	mov	r6,r7
    c890:	dfc00215 	stw	ra,8(sp)
    c894:	80000015 	stw	zero,0(r16)
    c898:	00104ec0 	call	104ec <read>
    c89c:	00ffffc4 	movi	r3,-1
    c8a0:	10c00526 	beq	r2,r3,c8b8 <_read_r+0x4c>
    c8a4:	dfc00217 	ldw	ra,8(sp)
    c8a8:	dc400117 	ldw	r17,4(sp)
    c8ac:	dc000017 	ldw	r16,0(sp)
    c8b0:	dec00304 	addi	sp,sp,12
    c8b4:	f800283a 	ret
    c8b8:	80c00017 	ldw	r3,0(r16)
    c8bc:	183ff926 	beq	r3,zero,c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    c8c0:	88c00015 	stw	r3,0(r17)
    c8c4:	003ff706 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>

0000c8c8 <__swbuf_r>:
    c8c8:	defffc04 	addi	sp,sp,-16
    c8cc:	dc800215 	stw	r18,8(sp)
    c8d0:	dc400115 	stw	r17,4(sp)
    c8d4:	dc000015 	stw	r16,0(sp)
    c8d8:	dfc00315 	stw	ra,12(sp)
    c8dc:	2025883a 	mov	r18,r4
    c8e0:	2823883a 	mov	r17,r5
    c8e4:	3021883a 	mov	r16,r6
    c8e8:	20000226 	beq	r4,zero,c8f4 <__swbuf_r+0x2c>
    c8ec:	20800e17 	ldw	r2,56(r4)
    c8f0:	10004126 	beq	r2,zero,c9f8 <__swbuf_r+0x130>
    c8f4:	80c00617 	ldw	r3,24(r16)
    c8f8:	8180030b 	ldhu	r6,12(r16)
    c8fc:	80c00215 	stw	r3,8(r16)
    c900:	30c0020c 	andi	r3,r6,8
    c904:	18003526 	beq	r3,zero,c9dc <__swbuf_r+0x114>
    c908:	80c00417 	ldw	r3,16(r16)
    c90c:	18003326 	beq	r3,zero,c9dc <__swbuf_r+0x114>
    c910:	3088000c 	andi	r2,r6,8192
    c914:	8c403fcc 	andi	r17,r17,255
    c918:	10001726 	beq	r2,zero,c978 <__swbuf_r+0xb0>
    c91c:	80800017 	ldw	r2,0(r16)
    c920:	81000517 	ldw	r4,20(r16)
    c924:	10c7c83a 	sub	r3,r2,r3
    c928:	19001d0e 	bge	r3,r4,c9a0 <__swbuf_r+0xd8>
    c92c:	18c00044 	addi	r3,r3,1
    c930:	81400217 	ldw	r5,8(r16)
    c934:	11000044 	addi	r4,r2,1
    c938:	81000015 	stw	r4,0(r16)
    c93c:	297fffc4 	addi	r5,r5,-1
    c940:	81400215 	stw	r5,8(r16)
    c944:	14400005 	stb	r17,0(r2)
    c948:	80800517 	ldw	r2,20(r16)
    c94c:	10c01d26 	beq	r2,r3,c9c4 <__swbuf_r+0xfc>
    c950:	8080030b 	ldhu	r2,12(r16)
    c954:	1080004c 	andi	r2,r2,1
    c958:	1000181e 	bne	r2,zero,c9bc <__swbuf_r+0xf4>
    c95c:	8805883a 	mov	r2,r17
    c960:	dfc00317 	ldw	ra,12(sp)
    c964:	dc800217 	ldw	r18,8(sp)
    c968:	dc400117 	ldw	r17,4(sp)
    c96c:	dc000017 	ldw	r16,0(sp)
    c970:	dec00404 	addi	sp,sp,16
    c974:	f800283a 	ret
    c978:	81001917 	ldw	r4,100(r16)
    c97c:	00b7ffc4 	movi	r2,-8193
    c980:	31880014 	ori	r6,r6,8192
    c984:	2084703a 	and	r2,r4,r2
    c988:	80801915 	stw	r2,100(r16)
    c98c:	80800017 	ldw	r2,0(r16)
    c990:	81000517 	ldw	r4,20(r16)
    c994:	8180030d 	sth	r6,12(r16)
    c998:	10c7c83a 	sub	r3,r2,r3
    c99c:	193fe316 	blt	r3,r4,c92c <__alt_mem_Flash_flash_data+0xf400c92c>
    c9a0:	9009883a 	mov	r4,r18
    c9a4:	800b883a 	mov	r5,r16
    c9a8:	00068f40 	call	68f4 <_fflush_r>
    c9ac:	1000091e 	bne	r2,zero,c9d4 <__swbuf_r+0x10c>
    c9b0:	80800017 	ldw	r2,0(r16)
    c9b4:	00c00044 	movi	r3,1
    c9b8:	003fdd06 	br	c930 <__alt_mem_Flash_flash_data+0xf400c930>
    c9bc:	00800284 	movi	r2,10
    c9c0:	88bfe61e 	bne	r17,r2,c95c <__alt_mem_Flash_flash_data+0xf400c95c>
    c9c4:	9009883a 	mov	r4,r18
    c9c8:	800b883a 	mov	r5,r16
    c9cc:	00068f40 	call	68f4 <_fflush_r>
    c9d0:	103fe226 	beq	r2,zero,c95c <__alt_mem_Flash_flash_data+0xf400c95c>
    c9d4:	00bfffc4 	movi	r2,-1
    c9d8:	003fe106 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>
    c9dc:	9009883a 	mov	r4,r18
    c9e0:	800b883a 	mov	r5,r16
    c9e4:	0004c700 	call	4c70 <__swsetup_r>
    c9e8:	103ffa1e 	bne	r2,zero,c9d4 <__alt_mem_Flash_flash_data+0xf400c9d4>
    c9ec:	8180030b 	ldhu	r6,12(r16)
    c9f0:	80c00417 	ldw	r3,16(r16)
    c9f4:	003fc606 	br	c910 <__alt_mem_Flash_flash_data+0xf400c910>
    c9f8:	0006cd00 	call	6cd0 <__sinit>
    c9fc:	003fbd06 	br	c8f4 <__alt_mem_Flash_flash_data+0xf400c8f4>

0000ca00 <__swbuf>:
    ca00:	00c000b4 	movhi	r3,2
    ca04:	18fa9b04 	addi	r3,r3,-5524
    ca08:	2005883a 	mov	r2,r4
    ca0c:	19000017 	ldw	r4,0(r3)
    ca10:	280d883a 	mov	r6,r5
    ca14:	100b883a 	mov	r5,r2
    ca18:	000c8c81 	jmpi	c8c8 <__swbuf_r>

0000ca1c <_wcrtomb_r>:
    ca1c:	defff604 	addi	sp,sp,-40
    ca20:	008000b4 	movhi	r2,2
    ca24:	dc800815 	stw	r18,32(sp)
    ca28:	dc400715 	stw	r17,28(sp)
    ca2c:	dc000615 	stw	r16,24(sp)
    ca30:	10ba9f04 	addi	r2,r2,-5508
    ca34:	dfc00915 	stw	ra,36(sp)
    ca38:	2021883a 	mov	r16,r4
    ca3c:	3823883a 	mov	r17,r7
    ca40:	14800017 	ldw	r18,0(r2)
    ca44:	28001426 	beq	r5,zero,ca98 <_wcrtomb_r+0x7c>
    ca48:	d9400415 	stw	r5,16(sp)
    ca4c:	d9800515 	stw	r6,20(sp)
    ca50:	00077f80 	call	77f8 <__locale_charset>
    ca54:	d9400417 	ldw	r5,16(sp)
    ca58:	d9800517 	ldw	r6,20(sp)
    ca5c:	8009883a 	mov	r4,r16
    ca60:	dc400015 	stw	r17,0(sp)
    ca64:	100f883a 	mov	r7,r2
    ca68:	903ee83a 	callr	r18
    ca6c:	00ffffc4 	movi	r3,-1
    ca70:	10c0031e 	bne	r2,r3,ca80 <_wcrtomb_r+0x64>
    ca74:	88000015 	stw	zero,0(r17)
    ca78:	00c02284 	movi	r3,138
    ca7c:	80c00015 	stw	r3,0(r16)
    ca80:	dfc00917 	ldw	ra,36(sp)
    ca84:	dc800817 	ldw	r18,32(sp)
    ca88:	dc400717 	ldw	r17,28(sp)
    ca8c:	dc000617 	ldw	r16,24(sp)
    ca90:	dec00a04 	addi	sp,sp,40
    ca94:	f800283a 	ret
    ca98:	00077f80 	call	77f8 <__locale_charset>
    ca9c:	8009883a 	mov	r4,r16
    caa0:	dc400015 	stw	r17,0(sp)
    caa4:	d9400104 	addi	r5,sp,4
    caa8:	000d883a 	mov	r6,zero
    caac:	100f883a 	mov	r7,r2
    cab0:	903ee83a 	callr	r18
    cab4:	003fed06 	br	ca6c <__alt_mem_Flash_flash_data+0xf400ca6c>

0000cab8 <wcrtomb>:
    cab8:	defff604 	addi	sp,sp,-40
    cabc:	008000b4 	movhi	r2,2
    cac0:	dc800615 	stw	r18,24(sp)
    cac4:	dc400515 	stw	r17,20(sp)
    cac8:	dc000415 	stw	r16,16(sp)
    cacc:	10ba9b04 	addi	r2,r2,-5524
    cad0:	dfc00915 	stw	ra,36(sp)
    cad4:	dd000815 	stw	r20,32(sp)
    cad8:	dcc00715 	stw	r19,28(sp)
    cadc:	2021883a 	mov	r16,r4
    cae0:	3025883a 	mov	r18,r6
    cae4:	14400017 	ldw	r17,0(r2)
    cae8:	20001826 	beq	r4,zero,cb4c <wcrtomb+0x94>
    caec:	008000b4 	movhi	r2,2
    caf0:	10ba9f04 	addi	r2,r2,-5508
    caf4:	15000017 	ldw	r20,0(r2)
    caf8:	2827883a 	mov	r19,r5
    cafc:	00077f80 	call	77f8 <__locale_charset>
    cb00:	8809883a 	mov	r4,r17
    cb04:	dc800015 	stw	r18,0(sp)
    cb08:	800b883a 	mov	r5,r16
    cb0c:	980d883a 	mov	r6,r19
    cb10:	100f883a 	mov	r7,r2
    cb14:	a03ee83a 	callr	r20
    cb18:	00ffffc4 	movi	r3,-1
    cb1c:	10c0031e 	bne	r2,r3,cb2c <wcrtomb+0x74>
    cb20:	90000015 	stw	zero,0(r18)
    cb24:	00c02284 	movi	r3,138
    cb28:	88c00015 	stw	r3,0(r17)
    cb2c:	dfc00917 	ldw	ra,36(sp)
    cb30:	dd000817 	ldw	r20,32(sp)
    cb34:	dcc00717 	ldw	r19,28(sp)
    cb38:	dc800617 	ldw	r18,24(sp)
    cb3c:	dc400517 	ldw	r17,20(sp)
    cb40:	dc000417 	ldw	r16,16(sp)
    cb44:	dec00a04 	addi	sp,sp,40
    cb48:	f800283a 	ret
    cb4c:	008000b4 	movhi	r2,2
    cb50:	10ba9f04 	addi	r2,r2,-5508
    cb54:	14000017 	ldw	r16,0(r2)
    cb58:	00077f80 	call	77f8 <__locale_charset>
    cb5c:	8809883a 	mov	r4,r17
    cb60:	dc800015 	stw	r18,0(sp)
    cb64:	d9400104 	addi	r5,sp,4
    cb68:	000d883a 	mov	r6,zero
    cb6c:	100f883a 	mov	r7,r2
    cb70:	803ee83a 	callr	r16
    cb74:	003fe806 	br	cb18 <__alt_mem_Flash_flash_data+0xf400cb18>

0000cb78 <__ascii_wctomb>:
    cb78:	28000526 	beq	r5,zero,cb90 <__ascii_wctomb+0x18>
    cb7c:	00803fc4 	movi	r2,255
    cb80:	11800536 	bltu	r2,r6,cb98 <__ascii_wctomb+0x20>
    cb84:	29800005 	stb	r6,0(r5)
    cb88:	00800044 	movi	r2,1
    cb8c:	f800283a 	ret
    cb90:	0005883a 	mov	r2,zero
    cb94:	f800283a 	ret
    cb98:	00802284 	movi	r2,138
    cb9c:	20800015 	stw	r2,0(r4)
    cba0:	00bfffc4 	movi	r2,-1
    cba4:	f800283a 	ret

0000cba8 <_wctomb_r>:
    cba8:	008000b4 	movhi	r2,2
    cbac:	defff904 	addi	sp,sp,-28
    cbb0:	10ba9f04 	addi	r2,r2,-5508
    cbb4:	dfc00615 	stw	ra,24(sp)
    cbb8:	dc400515 	stw	r17,20(sp)
    cbbc:	dc000415 	stw	r16,16(sp)
    cbc0:	3823883a 	mov	r17,r7
    cbc4:	14000017 	ldw	r16,0(r2)
    cbc8:	d9000115 	stw	r4,4(sp)
    cbcc:	d9400215 	stw	r5,8(sp)
    cbd0:	d9800315 	stw	r6,12(sp)
    cbd4:	00077f80 	call	77f8 <__locale_charset>
    cbd8:	d9000117 	ldw	r4,4(sp)
    cbdc:	d9400217 	ldw	r5,8(sp)
    cbe0:	d9800317 	ldw	r6,12(sp)
    cbe4:	dc400015 	stw	r17,0(sp)
    cbe8:	100f883a 	mov	r7,r2
    cbec:	803ee83a 	callr	r16
    cbf0:	dfc00617 	ldw	ra,24(sp)
    cbf4:	dc400517 	ldw	r17,20(sp)
    cbf8:	dc000417 	ldw	r16,16(sp)
    cbfc:	dec00704 	addi	sp,sp,28
    cc00:	f800283a 	ret

0000cc04 <__udivdi3>:
    cc04:	defff504 	addi	sp,sp,-44
    cc08:	dcc00415 	stw	r19,16(sp)
    cc0c:	dc000115 	stw	r16,4(sp)
    cc10:	dfc00a15 	stw	ra,40(sp)
    cc14:	df000915 	stw	fp,36(sp)
    cc18:	ddc00815 	stw	r23,32(sp)
    cc1c:	dd800715 	stw	r22,28(sp)
    cc20:	dd400615 	stw	r21,24(sp)
    cc24:	dd000515 	stw	r20,20(sp)
    cc28:	dc800315 	stw	r18,12(sp)
    cc2c:	dc400215 	stw	r17,8(sp)
    cc30:	2027883a 	mov	r19,r4
    cc34:	2821883a 	mov	r16,r5
    cc38:	3800421e 	bne	r7,zero,cd44 <__udivdi3+0x140>
    cc3c:	3025883a 	mov	r18,r6
    cc40:	2023883a 	mov	r17,r4
    cc44:	2980542e 	bgeu	r5,r6,cd98 <__udivdi3+0x194>
    cc48:	00bfffd4 	movui	r2,65535
    cc4c:	282d883a 	mov	r22,r5
    cc50:	1180a836 	bltu	r2,r6,cef4 <__udivdi3+0x2f0>
    cc54:	00803fc4 	movi	r2,255
    cc58:	1181422e 	bgeu	r2,r6,d164 <__udivdi3+0x560>
    cc5c:	00800204 	movi	r2,8
    cc60:	1007883a 	mov	r3,r2
    cc64:	3084d83a 	srl	r2,r6,r2
    cc68:	010000b4 	movhi	r4,2
    cc6c:	2131f204 	addi	r4,r4,-14392
    cc70:	2085883a 	add	r2,r4,r2
    cc74:	10800003 	ldbu	r2,0(r2)
    cc78:	10c7883a 	add	r3,r2,r3
    cc7c:	00800804 	movi	r2,32
    cc80:	10c5c83a 	sub	r2,r2,r3
    cc84:	10000526 	beq	r2,zero,cc9c <__udivdi3+0x98>
    cc88:	80a0983a 	sll	r16,r16,r2
    cc8c:	98c6d83a 	srl	r3,r19,r3
    cc90:	30a4983a 	sll	r18,r6,r2
    cc94:	98a2983a 	sll	r17,r19,r2
    cc98:	80ecb03a 	or	r22,r16,r3
    cc9c:	902ad43a 	srli	r21,r18,16
    cca0:	b009883a 	mov	r4,r22
    cca4:	953fffcc 	andi	r20,r18,65535
    cca8:	a80b883a 	mov	r5,r21
    ccac:	000d8780 	call	d878 <__umodsi3>
    ccb0:	b009883a 	mov	r4,r22
    ccb4:	a80b883a 	mov	r5,r21
    ccb8:	1027883a 	mov	r19,r2
    ccbc:	000d8700 	call	d870 <__udivsi3>
    ccc0:	1021883a 	mov	r16,r2
    ccc4:	8806d43a 	srli	r3,r17,16
    ccc8:	9804943a 	slli	r2,r19,16
    cccc:	8527383a 	mul	r19,r16,r20
    ccd0:	10c4b03a 	or	r2,r2,r3
    ccd4:	14c0052e 	bgeu	r2,r19,ccec <__udivdi3+0xe8>
    ccd8:	1485883a 	add	r2,r2,r18
    ccdc:	80ffffc4 	addi	r3,r16,-1
    cce0:	14800136 	bltu	r2,r18,cce8 <__udivdi3+0xe4>
    cce4:	14c13436 	bltu	r2,r19,d1b8 <__udivdi3+0x5b4>
    cce8:	1821883a 	mov	r16,r3
    ccec:	14e7c83a 	sub	r19,r2,r19
    ccf0:	9809883a 	mov	r4,r19
    ccf4:	a80b883a 	mov	r5,r21
    ccf8:	000d8780 	call	d878 <__umodsi3>
    ccfc:	102d883a 	mov	r22,r2
    cd00:	9809883a 	mov	r4,r19
    cd04:	a80b883a 	mov	r5,r21
    cd08:	000d8700 	call	d870 <__udivsi3>
    cd0c:	b02c943a 	slli	r22,r22,16
    cd10:	1529383a 	mul	r20,r2,r20
    cd14:	8c7fffcc 	andi	r17,r17,65535
    cd18:	b462b03a 	or	r17,r22,r17
    cd1c:	8d00052e 	bgeu	r17,r20,cd34 <__udivdi3+0x130>
    cd20:	8ca3883a 	add	r17,r17,r18
    cd24:	10ffffc4 	addi	r3,r2,-1
    cd28:	8c80f636 	bltu	r17,r18,d104 <__udivdi3+0x500>
    cd2c:	8d00f52e 	bgeu	r17,r20,d104 <__udivdi3+0x500>
    cd30:	10bfff84 	addi	r2,r2,-2
    cd34:	8020943a 	slli	r16,r16,16
    cd38:	0007883a 	mov	r3,zero
    cd3c:	1404b03a 	or	r2,r2,r16
    cd40:	00005b06 	br	ceb0 <__udivdi3+0x2ac>
    cd44:	29c05836 	bltu	r5,r7,cea8 <__udivdi3+0x2a4>
    cd48:	00bfffd4 	movui	r2,65535
    cd4c:	11c0642e 	bgeu	r2,r7,cee0 <__udivdi3+0x2dc>
    cd50:	00804034 	movhi	r2,256
    cd54:	10bfffc4 	addi	r2,r2,-1
    cd58:	11c0f32e 	bgeu	r2,r7,d128 <__udivdi3+0x524>
    cd5c:	00c00604 	movi	r3,24
    cd60:	180b883a 	mov	r5,r3
    cd64:	38c6d83a 	srl	r3,r7,r3
    cd68:	008000b4 	movhi	r2,2
    cd6c:	10b1f204 	addi	r2,r2,-14392
    cd70:	10c7883a 	add	r3,r2,r3
    cd74:	18c00003 	ldbu	r3,0(r3)
    cd78:	01000804 	movi	r4,32
    cd7c:	1947883a 	add	r3,r3,r5
    cd80:	20e5c83a 	sub	r18,r4,r3
    cd84:	9000661e 	bne	r18,zero,cf20 <__udivdi3+0x31c>
    cd88:	3c00f936 	bltu	r7,r16,d170 <__udivdi3+0x56c>
    cd8c:	9985403a 	cmpgeu	r2,r19,r6
    cd90:	0007883a 	mov	r3,zero
    cd94:	00004606 	br	ceb0 <__udivdi3+0x2ac>
    cd98:	3000041e 	bne	r6,zero,cdac <__udivdi3+0x1a8>
    cd9c:	01000044 	movi	r4,1
    cda0:	000b883a 	mov	r5,zero
    cda4:	000d8700 	call	d870 <__udivsi3>
    cda8:	1025883a 	mov	r18,r2
    cdac:	00bfffd4 	movui	r2,65535
    cdb0:	1480562e 	bgeu	r2,r18,cf0c <__udivdi3+0x308>
    cdb4:	00804034 	movhi	r2,256
    cdb8:	10bfffc4 	addi	r2,r2,-1
    cdbc:	1480e32e 	bgeu	r2,r18,d14c <__udivdi3+0x548>
    cdc0:	00800604 	movi	r2,24
    cdc4:	1007883a 	mov	r3,r2
    cdc8:	9084d83a 	srl	r2,r18,r2
    cdcc:	010000b4 	movhi	r4,2
    cdd0:	2131f204 	addi	r4,r4,-14392
    cdd4:	2085883a 	add	r2,r4,r2
    cdd8:	10800003 	ldbu	r2,0(r2)
    cddc:	10c5883a 	add	r2,r2,r3
    cde0:	00c00804 	movi	r3,32
    cde4:	1887c83a 	sub	r3,r3,r2
    cde8:	1800911e 	bne	r3,zero,d030 <__udivdi3+0x42c>
    cdec:	9028d43a 	srli	r20,r18,16
    cdf0:	84a1c83a 	sub	r16,r16,r18
    cdf4:	957fffcc 	andi	r21,r18,65535
    cdf8:	00c00044 	movi	r3,1
    cdfc:	8009883a 	mov	r4,r16
    ce00:	a00b883a 	mov	r5,r20
    ce04:	d8c00015 	stw	r3,0(sp)
    ce08:	000d8780 	call	d878 <__umodsi3>
    ce0c:	8009883a 	mov	r4,r16
    ce10:	a00b883a 	mov	r5,r20
    ce14:	1027883a 	mov	r19,r2
    ce18:	000d8700 	call	d870 <__udivsi3>
    ce1c:	1021883a 	mov	r16,r2
    ce20:	880cd43a 	srli	r6,r17,16
    ce24:	9804943a 	slli	r2,r19,16
    ce28:	8567383a 	mul	r19,r16,r21
    ce2c:	d8c00017 	ldw	r3,0(sp)
    ce30:	1188b03a 	or	r4,r2,r6
    ce34:	24c0052e 	bgeu	r4,r19,ce4c <__udivdi3+0x248>
    ce38:	2489883a 	add	r4,r4,r18
    ce3c:	80bfffc4 	addi	r2,r16,-1
    ce40:	24800136 	bltu	r4,r18,ce48 <__udivdi3+0x244>
    ce44:	24c0d936 	bltu	r4,r19,d1ac <__udivdi3+0x5a8>
    ce48:	1021883a 	mov	r16,r2
    ce4c:	24e7c83a 	sub	r19,r4,r19
    ce50:	9809883a 	mov	r4,r19
    ce54:	a00b883a 	mov	r5,r20
    ce58:	d8c00015 	stw	r3,0(sp)
    ce5c:	000d8780 	call	d878 <__umodsi3>
    ce60:	102d883a 	mov	r22,r2
    ce64:	9809883a 	mov	r4,r19
    ce68:	a00b883a 	mov	r5,r20
    ce6c:	000d8700 	call	d870 <__udivsi3>
    ce70:	b02c943a 	slli	r22,r22,16
    ce74:	156b383a 	mul	r21,r2,r21
    ce78:	8c7fffcc 	andi	r17,r17,65535
    ce7c:	b462b03a 	or	r17,r22,r17
    ce80:	d8c00017 	ldw	r3,0(sp)
    ce84:	8d40052e 	bgeu	r17,r21,ce9c <__udivdi3+0x298>
    ce88:	8ca3883a 	add	r17,r17,r18
    ce8c:	113fffc4 	addi	r4,r2,-1
    ce90:	8c809a36 	bltu	r17,r18,d0fc <__udivdi3+0x4f8>
    ce94:	8d40992e 	bgeu	r17,r21,d0fc <__udivdi3+0x4f8>
    ce98:	10bfff84 	addi	r2,r2,-2
    ce9c:	8020943a 	slli	r16,r16,16
    cea0:	1404b03a 	or	r2,r2,r16
    cea4:	00000206 	br	ceb0 <__udivdi3+0x2ac>
    cea8:	0007883a 	mov	r3,zero
    ceac:	0005883a 	mov	r2,zero
    ceb0:	dfc00a17 	ldw	ra,40(sp)
    ceb4:	df000917 	ldw	fp,36(sp)
    ceb8:	ddc00817 	ldw	r23,32(sp)
    cebc:	dd800717 	ldw	r22,28(sp)
    cec0:	dd400617 	ldw	r21,24(sp)
    cec4:	dd000517 	ldw	r20,20(sp)
    cec8:	dcc00417 	ldw	r19,16(sp)
    cecc:	dc800317 	ldw	r18,12(sp)
    ced0:	dc400217 	ldw	r17,8(sp)
    ced4:	dc000117 	ldw	r16,4(sp)
    ced8:	dec00b04 	addi	sp,sp,44
    cedc:	f800283a 	ret
    cee0:	00803fc4 	movi	r2,255
    cee4:	11c0932e 	bgeu	r2,r7,d134 <__udivdi3+0x530>
    cee8:	00c00204 	movi	r3,8
    ceec:	180b883a 	mov	r5,r3
    cef0:	003f9c06 	br	cd64 <__alt_mem_Flash_flash_data+0xf400cd64>
    cef4:	00804034 	movhi	r2,256
    cef8:	10bfffc4 	addi	r2,r2,-1
    cefc:	1180902e 	bgeu	r2,r6,d140 <__udivdi3+0x53c>
    cf00:	00800604 	movi	r2,24
    cf04:	1007883a 	mov	r3,r2
    cf08:	003f5606 	br	cc64 <__alt_mem_Flash_flash_data+0xf400cc64>
    cf0c:	00803fc4 	movi	r2,255
    cf10:	1480912e 	bgeu	r2,r18,d158 <__udivdi3+0x554>
    cf14:	00800204 	movi	r2,8
    cf18:	1007883a 	mov	r3,r2
    cf1c:	003faa06 	br	cdc8 <__alt_mem_Flash_flash_data+0xf400cdc8>
    cf20:	30eed83a 	srl	r23,r6,r3
    cf24:	3c8e983a 	sll	r7,r7,r18
    cf28:	80f8d83a 	srl	fp,r16,r3
    cf2c:	98c6d83a 	srl	r3,r19,r3
    cf30:	3deeb03a 	or	r23,r7,r23
    cf34:	b828d43a 	srli	r20,r23,16
    cf38:	84a0983a 	sll	r16,r16,r18
    cf3c:	e009883a 	mov	r4,fp
    cf40:	a00b883a 	mov	r5,r20
    cf44:	80e2b03a 	or	r17,r16,r3
    cf48:	34aa983a 	sll	r21,r6,r18
    cf4c:	000d8780 	call	d878 <__umodsi3>
    cf50:	e009883a 	mov	r4,fp
    cf54:	a00b883a 	mov	r5,r20
    cf58:	102d883a 	mov	r22,r2
    cf5c:	000d8700 	call	d870 <__udivsi3>
    cf60:	1021883a 	mov	r16,r2
    cf64:	bf3fffcc 	andi	fp,r23,65535
    cf68:	b004943a 	slli	r2,r22,16
    cf6c:	8808d43a 	srli	r4,r17,16
    cf70:	872d383a 	mul	r22,r16,fp
    cf74:	1104b03a 	or	r2,r2,r4
    cf78:	1580042e 	bgeu	r2,r22,cf8c <__udivdi3+0x388>
    cf7c:	15c5883a 	add	r2,r2,r23
    cf80:	80ffffc4 	addi	r3,r16,-1
    cf84:	15c0812e 	bgeu	r2,r23,d18c <__udivdi3+0x588>
    cf88:	1821883a 	mov	r16,r3
    cf8c:	15adc83a 	sub	r22,r2,r22
    cf90:	b009883a 	mov	r4,r22
    cf94:	a00b883a 	mov	r5,r20
    cf98:	000d8780 	call	d878 <__umodsi3>
    cf9c:	a00b883a 	mov	r5,r20
    cfa0:	b009883a 	mov	r4,r22
    cfa4:	d8800015 	stw	r2,0(sp)
    cfa8:	000d8700 	call	d870 <__udivsi3>
    cfac:	d8c00017 	ldw	r3,0(sp)
    cfb0:	170b383a 	mul	r5,r2,fp
    cfb4:	8c7fffcc 	andi	r17,r17,65535
    cfb8:	1806943a 	slli	r3,r3,16
    cfbc:	1c46b03a 	or	r3,r3,r17
    cfc0:	1940042e 	bgeu	r3,r5,cfd4 <__udivdi3+0x3d0>
    cfc4:	1dc7883a 	add	r3,r3,r23
    cfc8:	113fffc4 	addi	r4,r2,-1
    cfcc:	1dc06b2e 	bgeu	r3,r23,d17c <__udivdi3+0x578>
    cfd0:	2005883a 	mov	r2,r4
    cfd4:	8020943a 	slli	r16,r16,16
    cfd8:	a9ffffcc 	andi	r7,r21,65535
    cfdc:	a82ad43a 	srli	r21,r21,16
    cfe0:	1404b03a 	or	r2,r2,r16
    cfe4:	113fffcc 	andi	r4,r2,65535
    cfe8:	100cd43a 	srli	r6,r2,16
    cfec:	21d3383a 	mul	r9,r4,r7
    cff0:	2549383a 	mul	r4,r4,r21
    cff4:	31cf383a 	mul	r7,r6,r7
    cff8:	4810d43a 	srli	r8,r9,16
    cffc:	1947c83a 	sub	r3,r3,r5
    d000:	3909883a 	add	r4,r7,r4
    d004:	2209883a 	add	r4,r4,r8
    d008:	354d383a 	mul	r6,r6,r21
    d00c:	21c0022e 	bgeu	r4,r7,d018 <__udivdi3+0x414>
    d010:	01400074 	movhi	r5,1
    d014:	314d883a 	add	r6,r6,r5
    d018:	202ad43a 	srli	r21,r4,16
    d01c:	354d883a 	add	r6,r6,r21
    d020:	19803f36 	bltu	r3,r6,d120 <__udivdi3+0x51c>
    d024:	19803926 	beq	r3,r6,d10c <__udivdi3+0x508>
    d028:	0007883a 	mov	r3,zero
    d02c:	003fa006 	br	ceb0 <__alt_mem_Flash_flash_data+0xf400ceb0>
    d030:	90e4983a 	sll	r18,r18,r3
    d034:	80aad83a 	srl	r21,r16,r2
    d038:	80e0983a 	sll	r16,r16,r3
    d03c:	9028d43a 	srli	r20,r18,16
    d040:	9884d83a 	srl	r2,r19,r2
    d044:	a809883a 	mov	r4,r21
    d048:	a00b883a 	mov	r5,r20
    d04c:	80acb03a 	or	r22,r16,r2
    d050:	98e2983a 	sll	r17,r19,r3
    d054:	000d8780 	call	d878 <__umodsi3>
    d058:	a809883a 	mov	r4,r21
    d05c:	a00b883a 	mov	r5,r20
    d060:	1021883a 	mov	r16,r2
    d064:	000d8700 	call	d870 <__udivsi3>
    d068:	957fffcc 	andi	r21,r18,65535
    d06c:	8020943a 	slli	r16,r16,16
    d070:	b00ad43a 	srli	r5,r22,16
    d074:	1567383a 	mul	r19,r2,r21
    d078:	102f883a 	mov	r23,r2
    d07c:	8148b03a 	or	r4,r16,r5
    d080:	24c0062e 	bgeu	r4,r19,d09c <__udivdi3+0x498>
    d084:	2489883a 	add	r4,r4,r18
    d088:	10bfffc4 	addi	r2,r2,-1
    d08c:	24804536 	bltu	r4,r18,d1a4 <__udivdi3+0x5a0>
    d090:	24c0442e 	bgeu	r4,r19,d1a4 <__udivdi3+0x5a0>
    d094:	bdffff84 	addi	r23,r23,-2
    d098:	2489883a 	add	r4,r4,r18
    d09c:	24e7c83a 	sub	r19,r4,r19
    d0a0:	9809883a 	mov	r4,r19
    d0a4:	a00b883a 	mov	r5,r20
    d0a8:	000d8780 	call	d878 <__umodsi3>
    d0ac:	1021883a 	mov	r16,r2
    d0b0:	9809883a 	mov	r4,r19
    d0b4:	a00b883a 	mov	r5,r20
    d0b8:	000d8700 	call	d870 <__udivsi3>
    d0bc:	8020943a 	slli	r16,r16,16
    d0c0:	1007883a 	mov	r3,r2
    d0c4:	1545383a 	mul	r2,r2,r21
    d0c8:	b13fffcc 	andi	r4,r22,65535
    d0cc:	8108b03a 	or	r4,r16,r4
    d0d0:	2080062e 	bgeu	r4,r2,d0ec <__udivdi3+0x4e8>
    d0d4:	2489883a 	add	r4,r4,r18
    d0d8:	197fffc4 	addi	r5,r3,-1
    d0dc:	24802f36 	bltu	r4,r18,d19c <__udivdi3+0x598>
    d0e0:	20802e2e 	bgeu	r4,r2,d19c <__udivdi3+0x598>
    d0e4:	18ffff84 	addi	r3,r3,-2
    d0e8:	2489883a 	add	r4,r4,r18
    d0ec:	b82e943a 	slli	r23,r23,16
    d0f0:	20a1c83a 	sub	r16,r4,r2
    d0f4:	1dc6b03a 	or	r3,r3,r23
    d0f8:	003f4006 	br	cdfc <__alt_mem_Flash_flash_data+0xf400cdfc>
    d0fc:	2005883a 	mov	r2,r4
    d100:	003f6606 	br	ce9c <__alt_mem_Flash_flash_data+0xf400ce9c>
    d104:	1805883a 	mov	r2,r3
    d108:	003f0a06 	br	cd34 <__alt_mem_Flash_flash_data+0xf400cd34>
    d10c:	2006943a 	slli	r3,r4,16
    d110:	9c88983a 	sll	r4,r19,r18
    d114:	4a7fffcc 	andi	r9,r9,65535
    d118:	1a47883a 	add	r3,r3,r9
    d11c:	20ffc22e 	bgeu	r4,r3,d028 <__alt_mem_Flash_flash_data+0xf400d028>
    d120:	10bfffc4 	addi	r2,r2,-1
    d124:	003fc006 	br	d028 <__alt_mem_Flash_flash_data+0xf400d028>
    d128:	00c00404 	movi	r3,16
    d12c:	180b883a 	mov	r5,r3
    d130:	003f0c06 	br	cd64 <__alt_mem_Flash_flash_data+0xf400cd64>
    d134:	0007883a 	mov	r3,zero
    d138:	000b883a 	mov	r5,zero
    d13c:	003f0906 	br	cd64 <__alt_mem_Flash_flash_data+0xf400cd64>
    d140:	00800404 	movi	r2,16
    d144:	1007883a 	mov	r3,r2
    d148:	003ec606 	br	cc64 <__alt_mem_Flash_flash_data+0xf400cc64>
    d14c:	00800404 	movi	r2,16
    d150:	1007883a 	mov	r3,r2
    d154:	003f1c06 	br	cdc8 <__alt_mem_Flash_flash_data+0xf400cdc8>
    d158:	0005883a 	mov	r2,zero
    d15c:	0007883a 	mov	r3,zero
    d160:	003f1906 	br	cdc8 <__alt_mem_Flash_flash_data+0xf400cdc8>
    d164:	0005883a 	mov	r2,zero
    d168:	0007883a 	mov	r3,zero
    d16c:	003ebd06 	br	cc64 <__alt_mem_Flash_flash_data+0xf400cc64>
    d170:	0007883a 	mov	r3,zero
    d174:	00800044 	movi	r2,1
    d178:	003f4d06 	br	ceb0 <__alt_mem_Flash_flash_data+0xf400ceb0>
    d17c:	197f942e 	bgeu	r3,r5,cfd0 <__alt_mem_Flash_flash_data+0xf400cfd0>
    d180:	10bfff84 	addi	r2,r2,-2
    d184:	1dc7883a 	add	r3,r3,r23
    d188:	003f9206 	br	cfd4 <__alt_mem_Flash_flash_data+0xf400cfd4>
    d18c:	15bf7e2e 	bgeu	r2,r22,cf88 <__alt_mem_Flash_flash_data+0xf400cf88>
    d190:	843fff84 	addi	r16,r16,-2
    d194:	15c5883a 	add	r2,r2,r23
    d198:	003f7c06 	br	cf8c <__alt_mem_Flash_flash_data+0xf400cf8c>
    d19c:	2807883a 	mov	r3,r5
    d1a0:	003fd206 	br	d0ec <__alt_mem_Flash_flash_data+0xf400d0ec>
    d1a4:	102f883a 	mov	r23,r2
    d1a8:	003fbc06 	br	d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d1ac:	843fff84 	addi	r16,r16,-2
    d1b0:	2489883a 	add	r4,r4,r18
    d1b4:	003f2506 	br	ce4c <__alt_mem_Flash_flash_data+0xf400ce4c>
    d1b8:	843fff84 	addi	r16,r16,-2
    d1bc:	1485883a 	add	r2,r2,r18
    d1c0:	003eca06 	br	ccec <__alt_mem_Flash_flash_data+0xf400ccec>

0000d1c4 <__umoddi3>:
    d1c4:	defff404 	addi	sp,sp,-48
    d1c8:	ddc00915 	stw	r23,36(sp)
    d1cc:	dc400315 	stw	r17,12(sp)
    d1d0:	dc000215 	stw	r16,8(sp)
    d1d4:	dfc00b15 	stw	ra,44(sp)
    d1d8:	df000a15 	stw	fp,40(sp)
    d1dc:	dd800815 	stw	r22,32(sp)
    d1e0:	dd400715 	stw	r21,28(sp)
    d1e4:	dd000615 	stw	r20,24(sp)
    d1e8:	dcc00515 	stw	r19,20(sp)
    d1ec:	dc800415 	stw	r18,16(sp)
    d1f0:	2021883a 	mov	r16,r4
    d1f4:	2823883a 	mov	r17,r5
    d1f8:	282f883a 	mov	r23,r5
    d1fc:	3800381e 	bne	r7,zero,d2e0 <__umoddi3+0x11c>
    d200:	3027883a 	mov	r19,r6
    d204:	2029883a 	mov	r20,r4
    d208:	29804e2e 	bgeu	r5,r6,d344 <__umoddi3+0x180>
    d20c:	00bfffd4 	movui	r2,65535
    d210:	11809c36 	bltu	r2,r6,d484 <__umoddi3+0x2c0>
    d214:	00803fc4 	movi	r2,255
    d218:	11813b2e 	bgeu	r2,r6,d708 <__umoddi3+0x544>
    d21c:	01400204 	movi	r5,8
    d220:	2805883a 	mov	r2,r5
    d224:	314ad83a 	srl	r5,r6,r5
    d228:	00c000b4 	movhi	r3,2
    d22c:	18f1f204 	addi	r3,r3,-14392
    d230:	194b883a 	add	r5,r3,r5
    d234:	29000003 	ldbu	r4,0(r5)
    d238:	2089883a 	add	r4,r4,r2
    d23c:	00800804 	movi	r2,32
    d240:	1105c83a 	sub	r2,r2,r4
    d244:	1000ec26 	beq	r2,zero,d5f8 <__umoddi3+0x434>
    d248:	88a2983a 	sll	r17,r17,r2
    d24c:	8108d83a 	srl	r4,r16,r4
    d250:	30a6983a 	sll	r19,r6,r2
    d254:	80a8983a 	sll	r20,r16,r2
    d258:	1025883a 	mov	r18,r2
    d25c:	892eb03a 	or	r23,r17,r4
    d260:	982cd43a 	srli	r22,r19,16
    d264:	b809883a 	mov	r4,r23
    d268:	9d7fffcc 	andi	r21,r19,65535
    d26c:	b00b883a 	mov	r5,r22
    d270:	000d8780 	call	d878 <__umodsi3>
    d274:	b809883a 	mov	r4,r23
    d278:	b00b883a 	mov	r5,r22
    d27c:	1021883a 	mov	r16,r2
    d280:	000d8700 	call	d870 <__udivsi3>
    d284:	8020943a 	slli	r16,r16,16
    d288:	a00cd43a 	srli	r6,r20,16
    d28c:	1545383a 	mul	r2,r2,r21
    d290:	8188b03a 	or	r4,r16,r6
    d294:	2080042e 	bgeu	r4,r2,d2a8 <__umoddi3+0xe4>
    d298:	24c9883a 	add	r4,r4,r19
    d29c:	24c00236 	bltu	r4,r19,d2a8 <__umoddi3+0xe4>
    d2a0:	2080012e 	bgeu	r4,r2,d2a8 <__umoddi3+0xe4>
    d2a4:	24c9883a 	add	r4,r4,r19
    d2a8:	20a3c83a 	sub	r17,r4,r2
    d2ac:	8809883a 	mov	r4,r17
    d2b0:	b00b883a 	mov	r5,r22
    d2b4:	000d8780 	call	d878 <__umodsi3>
    d2b8:	8809883a 	mov	r4,r17
    d2bc:	b00b883a 	mov	r5,r22
    d2c0:	1021883a 	mov	r16,r2
    d2c4:	000d8700 	call	d870 <__udivsi3>
    d2c8:	8006943a 	slli	r3,r16,16
    d2cc:	1545383a 	mul	r2,r2,r21
    d2d0:	a13fffcc 	andi	r4,r20,65535
    d2d4:	1906b03a 	or	r3,r3,r4
    d2d8:	1880532e 	bgeu	r3,r2,d428 <__umoddi3+0x264>
    d2dc:	00004e06 	br	d418 <__umoddi3+0x254>
    d2e0:	29c05536 	bltu	r5,r7,d438 <__umoddi3+0x274>
    d2e4:	00bfffd4 	movui	r2,65535
    d2e8:	11c0612e 	bgeu	r2,r7,d470 <__umoddi3+0x2ac>
    d2ec:	00804034 	movhi	r2,256
    d2f0:	10bfffc4 	addi	r2,r2,-1
    d2f4:	11c0f82e 	bgeu	r2,r7,d6d8 <__umoddi3+0x514>
    d2f8:	01400604 	movi	r5,24
    d2fc:	282b883a 	mov	r21,r5
    d300:	394ad83a 	srl	r5,r7,r5
    d304:	00c000b4 	movhi	r3,2
    d308:	18f1f204 	addi	r3,r3,-14392
    d30c:	194b883a 	add	r5,r3,r5
    d310:	28800003 	ldbu	r2,0(r5)
    d314:	00c00804 	movi	r3,32
    d318:	156b883a 	add	r21,r2,r21
    d31c:	1d69c83a 	sub	r20,r3,r21
    d320:	a000631e 	bne	r20,zero,d4b0 <__umoddi3+0x2ec>
    d324:	3c400136 	bltu	r7,r17,d32c <__umoddi3+0x168>
    d328:	81810436 	bltu	r16,r6,d73c <__umoddi3+0x578>
    d32c:	8185c83a 	sub	r2,r16,r6
    d330:	89e3c83a 	sub	r17,r17,r7
    d334:	8087803a 	cmpltu	r3,r16,r2
    d338:	88efc83a 	sub	r23,r17,r3
    d33c:	b807883a 	mov	r3,r23
    d340:	00003f06 	br	d440 <__umoddi3+0x27c>
    d344:	3000041e 	bne	r6,zero,d358 <__umoddi3+0x194>
    d348:	01000044 	movi	r4,1
    d34c:	000b883a 	mov	r5,zero
    d350:	000d8700 	call	d870 <__udivsi3>
    d354:	1027883a 	mov	r19,r2
    d358:	00bfffd4 	movui	r2,65535
    d35c:	14c04f2e 	bgeu	r2,r19,d49c <__umoddi3+0x2d8>
    d360:	00804034 	movhi	r2,256
    d364:	10bfffc4 	addi	r2,r2,-1
    d368:	14c0e42e 	bgeu	r2,r19,d6fc <__umoddi3+0x538>
    d36c:	00800604 	movi	r2,24
    d370:	1007883a 	mov	r3,r2
    d374:	9884d83a 	srl	r2,r19,r2
    d378:	010000b4 	movhi	r4,2
    d37c:	2131f204 	addi	r4,r4,-14392
    d380:	2085883a 	add	r2,r4,r2
    d384:	11000003 	ldbu	r4,0(r2)
    d388:	00800804 	movi	r2,32
    d38c:	20c7883a 	add	r3,r4,r3
    d390:	10c5c83a 	sub	r2,r2,r3
    d394:	10009a1e 	bne	r2,zero,d600 <__umoddi3+0x43c>
    d398:	982cd43a 	srli	r22,r19,16
    d39c:	8ce3c83a 	sub	r17,r17,r19
    d3a0:	9c3fffcc 	andi	r16,r19,65535
    d3a4:	0025883a 	mov	r18,zero
    d3a8:	8809883a 	mov	r4,r17
    d3ac:	b00b883a 	mov	r5,r22
    d3b0:	000d8780 	call	d878 <__umodsi3>
    d3b4:	8809883a 	mov	r4,r17
    d3b8:	b00b883a 	mov	r5,r22
    d3bc:	102b883a 	mov	r21,r2
    d3c0:	000d8700 	call	d870 <__udivsi3>
    d3c4:	a806943a 	slli	r3,r21,16
    d3c8:	a008d43a 	srli	r4,r20,16
    d3cc:	1405383a 	mul	r2,r2,r16
    d3d0:	190cb03a 	or	r6,r3,r4
    d3d4:	3080032e 	bgeu	r6,r2,d3e4 <__umoddi3+0x220>
    d3d8:	34cd883a 	add	r6,r6,r19
    d3dc:	34c00136 	bltu	r6,r19,d3e4 <__umoddi3+0x220>
    d3e0:	3080d436 	bltu	r6,r2,d734 <__umoddi3+0x570>
    d3e4:	30abc83a 	sub	r21,r6,r2
    d3e8:	a809883a 	mov	r4,r21
    d3ec:	b00b883a 	mov	r5,r22
    d3f0:	000d8780 	call	d878 <__umodsi3>
    d3f4:	1023883a 	mov	r17,r2
    d3f8:	a809883a 	mov	r4,r21
    d3fc:	b00b883a 	mov	r5,r22
    d400:	000d8700 	call	d870 <__udivsi3>
    d404:	8822943a 	slli	r17,r17,16
    d408:	1405383a 	mul	r2,r2,r16
    d40c:	a13fffcc 	andi	r4,r20,65535
    d410:	8906b03a 	or	r3,r17,r4
    d414:	1880042e 	bgeu	r3,r2,d428 <__umoddi3+0x264>
    d418:	1cc7883a 	add	r3,r3,r19
    d41c:	1cc00236 	bltu	r3,r19,d428 <__umoddi3+0x264>
    d420:	1880012e 	bgeu	r3,r2,d428 <__umoddi3+0x264>
    d424:	1cc7883a 	add	r3,r3,r19
    d428:	1887c83a 	sub	r3,r3,r2
    d42c:	1c84d83a 	srl	r2,r3,r18
    d430:	0007883a 	mov	r3,zero
    d434:	00000206 	br	d440 <__umoddi3+0x27c>
    d438:	2005883a 	mov	r2,r4
    d43c:	2807883a 	mov	r3,r5
    d440:	dfc00b17 	ldw	ra,44(sp)
    d444:	df000a17 	ldw	fp,40(sp)
    d448:	ddc00917 	ldw	r23,36(sp)
    d44c:	dd800817 	ldw	r22,32(sp)
    d450:	dd400717 	ldw	r21,28(sp)
    d454:	dd000617 	ldw	r20,24(sp)
    d458:	dcc00517 	ldw	r19,20(sp)
    d45c:	dc800417 	ldw	r18,16(sp)
    d460:	dc400317 	ldw	r17,12(sp)
    d464:	dc000217 	ldw	r16,8(sp)
    d468:	dec00c04 	addi	sp,sp,48
    d46c:	f800283a 	ret
    d470:	00803fc4 	movi	r2,255
    d474:	11c0952e 	bgeu	r2,r7,d6cc <__umoddi3+0x508>
    d478:	01400204 	movi	r5,8
    d47c:	282b883a 	mov	r21,r5
    d480:	003f9f06 	br	d300 <__alt_mem_Flash_flash_data+0xf400d300>
    d484:	00804034 	movhi	r2,256
    d488:	10bfffc4 	addi	r2,r2,-1
    d48c:	1180952e 	bgeu	r2,r6,d6e4 <__umoddi3+0x520>
    d490:	01400604 	movi	r5,24
    d494:	2805883a 	mov	r2,r5
    d498:	003f6206 	br	d224 <__alt_mem_Flash_flash_data+0xf400d224>
    d49c:	00803fc4 	movi	r2,255
    d4a0:	14c0932e 	bgeu	r2,r19,d6f0 <__umoddi3+0x52c>
    d4a4:	00800204 	movi	r2,8
    d4a8:	1007883a 	mov	r3,r2
    d4ac:	003fb106 	br	d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d4b0:	3548d83a 	srl	r4,r6,r21
    d4b4:	3d0e983a 	sll	r7,r7,r20
    d4b8:	8d10983a 	sll	r8,r17,r20
    d4bc:	8d6cd83a 	srl	r22,r17,r21
    d4c0:	3922b03a 	or	r17,r7,r4
    d4c4:	882ed43a 	srli	r23,r17,16
    d4c8:	8564d83a 	srl	r18,r16,r21
    d4cc:	b009883a 	mov	r4,r22
    d4d0:	b80b883a 	mov	r5,r23
    d4d4:	44a4b03a 	or	r18,r8,r18
    d4d8:	3526983a 	sll	r19,r6,r20
    d4dc:	000d8780 	call	d878 <__umodsi3>
    d4e0:	b009883a 	mov	r4,r22
    d4e4:	b80b883a 	mov	r5,r23
    d4e8:	1039883a 	mov	fp,r2
    d4ec:	000d8700 	call	d870 <__udivsi3>
    d4f0:	102d883a 	mov	r22,r2
    d4f4:	8a3fffcc 	andi	r8,r17,65535
    d4f8:	e004943a 	slli	r2,fp,16
    d4fc:	900cd43a 	srli	r6,r18,16
    d500:	b239383a 	mul	fp,r22,r8
    d504:	8520983a 	sll	r16,r16,r20
    d508:	118ab03a 	or	r5,r2,r6
    d50c:	2f00042e 	bgeu	r5,fp,d520 <__umoddi3+0x35c>
    d510:	2c4b883a 	add	r5,r5,r17
    d514:	b0bfffc4 	addi	r2,r22,-1
    d518:	2c40822e 	bgeu	r5,r17,d724 <__umoddi3+0x560>
    d51c:	102d883a 	mov	r22,r2
    d520:	2f39c83a 	sub	fp,r5,fp
    d524:	e009883a 	mov	r4,fp
    d528:	b80b883a 	mov	r5,r23
    d52c:	da000115 	stw	r8,4(sp)
    d530:	000d8780 	call	d878 <__umodsi3>
    d534:	e009883a 	mov	r4,fp
    d538:	b80b883a 	mov	r5,r23
    d53c:	d8800015 	stw	r2,0(sp)
    d540:	000d8700 	call	d870 <__udivsi3>
    d544:	d9800017 	ldw	r6,0(sp)
    d548:	da000117 	ldw	r8,4(sp)
    d54c:	94bfffcc 	andi	r18,r18,65535
    d550:	300c943a 	slli	r6,r6,16
    d554:	1209383a 	mul	r4,r2,r8
    d558:	3490b03a 	or	r8,r6,r18
    d55c:	4100042e 	bgeu	r8,r4,d570 <__umoddi3+0x3ac>
    d560:	4451883a 	add	r8,r8,r17
    d564:	10ffffc4 	addi	r3,r2,-1
    d568:	44406a2e 	bgeu	r8,r17,d714 <__umoddi3+0x550>
    d56c:	1805883a 	mov	r2,r3
    d570:	b012943a 	slli	r9,r22,16
    d574:	9abfffcc 	andi	r10,r19,65535
    d578:	980ed43a 	srli	r7,r19,16
    d57c:	124ab03a 	or	r5,r2,r9
    d580:	2a7fffcc 	andi	r9,r5,65535
    d584:	280ad43a 	srli	r5,r5,16
    d588:	4a8d383a 	mul	r6,r9,r10
    d58c:	49d3383a 	mul	r9,r9,r7
    d590:	2a95383a 	mul	r10,r5,r10
    d594:	3004d43a 	srli	r2,r6,16
    d598:	4111c83a 	sub	r8,r8,r4
    d59c:	5253883a 	add	r9,r10,r9
    d5a0:	4893883a 	add	r9,r9,r2
    d5a4:	29cb383a 	mul	r5,r5,r7
    d5a8:	4a80022e 	bgeu	r9,r10,d5b4 <__umoddi3+0x3f0>
    d5ac:	00800074 	movhi	r2,1
    d5b0:	288b883a 	add	r5,r5,r2
    d5b4:	4808d43a 	srli	r4,r9,16
    d5b8:	4812943a 	slli	r9,r9,16
    d5bc:	31bfffcc 	andi	r6,r6,65535
    d5c0:	290b883a 	add	r5,r5,r4
    d5c4:	498d883a 	add	r6,r9,r6
    d5c8:	41403a36 	bltu	r8,r5,d6b4 <__umoddi3+0x4f0>
    d5cc:	41405d26 	beq	r8,r5,d744 <__umoddi3+0x580>
    d5d0:	4149c83a 	sub	r4,r8,r5
    d5d4:	300f883a 	mov	r7,r6
    d5d8:	81cfc83a 	sub	r7,r16,r7
    d5dc:	81c7803a 	cmpltu	r3,r16,r7
    d5e0:	20c7c83a 	sub	r3,r4,r3
    d5e4:	1d44983a 	sll	r2,r3,r21
    d5e8:	3d0ed83a 	srl	r7,r7,r20
    d5ec:	1d06d83a 	srl	r3,r3,r20
    d5f0:	11c4b03a 	or	r2,r2,r7
    d5f4:	003f9206 	br	d440 <__alt_mem_Flash_flash_data+0xf400d440>
    d5f8:	0025883a 	mov	r18,zero
    d5fc:	003f1806 	br	d260 <__alt_mem_Flash_flash_data+0xf400d260>
    d600:	98a6983a 	sll	r19,r19,r2
    d604:	88e8d83a 	srl	r20,r17,r3
    d608:	80c6d83a 	srl	r3,r16,r3
    d60c:	982cd43a 	srli	r22,r19,16
    d610:	88a2983a 	sll	r17,r17,r2
    d614:	a009883a 	mov	r4,r20
    d618:	b00b883a 	mov	r5,r22
    d61c:	88eab03a 	or	r21,r17,r3
    d620:	1025883a 	mov	r18,r2
    d624:	000d8780 	call	d878 <__umodsi3>
    d628:	a009883a 	mov	r4,r20
    d62c:	b00b883a 	mov	r5,r22
    d630:	1023883a 	mov	r17,r2
    d634:	000d8700 	call	d870 <__udivsi3>
    d638:	9f3fffcc 	andi	fp,r19,65535
    d63c:	8822943a 	slli	r17,r17,16
    d640:	a80ad43a 	srli	r5,r21,16
    d644:	1705383a 	mul	r2,r2,fp
    d648:	84a8983a 	sll	r20,r16,r18
    d64c:	8948b03a 	or	r4,r17,r5
    d650:	2080042e 	bgeu	r4,r2,d664 <__umoddi3+0x4a0>
    d654:	24c9883a 	add	r4,r4,r19
    d658:	24c00236 	bltu	r4,r19,d664 <__umoddi3+0x4a0>
    d65c:	2080012e 	bgeu	r4,r2,d664 <__umoddi3+0x4a0>
    d660:	24c9883a 	add	r4,r4,r19
    d664:	20afc83a 	sub	r23,r4,r2
    d668:	b809883a 	mov	r4,r23
    d66c:	b00b883a 	mov	r5,r22
    d670:	000d8780 	call	d878 <__umodsi3>
    d674:	1023883a 	mov	r17,r2
    d678:	b809883a 	mov	r4,r23
    d67c:	b00b883a 	mov	r5,r22
    d680:	000d8700 	call	d870 <__udivsi3>
    d684:	8822943a 	slli	r17,r17,16
    d688:	1705383a 	mul	r2,r2,fp
    d68c:	a93fffcc 	andi	r4,r21,65535
    d690:	8908b03a 	or	r4,r17,r4
    d694:	2080042e 	bgeu	r4,r2,d6a8 <__umoddi3+0x4e4>
    d698:	24c9883a 	add	r4,r4,r19
    d69c:	24c00236 	bltu	r4,r19,d6a8 <__umoddi3+0x4e4>
    d6a0:	2080012e 	bgeu	r4,r2,d6a8 <__umoddi3+0x4e4>
    d6a4:	24c9883a 	add	r4,r4,r19
    d6a8:	20a3c83a 	sub	r17,r4,r2
    d6ac:	e021883a 	mov	r16,fp
    d6b0:	003f3d06 	br	d3a8 <__alt_mem_Flash_flash_data+0xf400d3a8>
    d6b4:	34cfc83a 	sub	r7,r6,r19
    d6b8:	2c4bc83a 	sub	r5,r5,r17
    d6bc:	31cd803a 	cmpltu	r6,r6,r7
    d6c0:	298dc83a 	sub	r6,r5,r6
    d6c4:	4189c83a 	sub	r4,r8,r6
    d6c8:	003fc306 	br	d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    d6cc:	000b883a 	mov	r5,zero
    d6d0:	002b883a 	mov	r21,zero
    d6d4:	003f0a06 	br	d300 <__alt_mem_Flash_flash_data+0xf400d300>
    d6d8:	01400404 	movi	r5,16
    d6dc:	282b883a 	mov	r21,r5
    d6e0:	003f0706 	br	d300 <__alt_mem_Flash_flash_data+0xf400d300>
    d6e4:	01400404 	movi	r5,16
    d6e8:	2805883a 	mov	r2,r5
    d6ec:	003ecd06 	br	d224 <__alt_mem_Flash_flash_data+0xf400d224>
    d6f0:	0005883a 	mov	r2,zero
    d6f4:	0007883a 	mov	r3,zero
    d6f8:	003f1e06 	br	d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d6fc:	00800404 	movi	r2,16
    d700:	1007883a 	mov	r3,r2
    d704:	003f1b06 	br	d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d708:	000b883a 	mov	r5,zero
    d70c:	0005883a 	mov	r2,zero
    d710:	003ec406 	br	d224 <__alt_mem_Flash_flash_data+0xf400d224>
    d714:	413f952e 	bgeu	r8,r4,d56c <__alt_mem_Flash_flash_data+0xf400d56c>
    d718:	10bfff84 	addi	r2,r2,-2
    d71c:	4451883a 	add	r8,r8,r17
    d720:	003f9306 	br	d570 <__alt_mem_Flash_flash_data+0xf400d570>
    d724:	2f3f7d2e 	bgeu	r5,fp,d51c <__alt_mem_Flash_flash_data+0xf400d51c>
    d728:	b5bfff84 	addi	r22,r22,-2
    d72c:	2c4b883a 	add	r5,r5,r17
    d730:	003f7b06 	br	d520 <__alt_mem_Flash_flash_data+0xf400d520>
    d734:	34cd883a 	add	r6,r6,r19
    d738:	003f2a06 	br	d3e4 <__alt_mem_Flash_flash_data+0xf400d3e4>
    d73c:	8005883a 	mov	r2,r16
    d740:	003efe06 	br	d33c <__alt_mem_Flash_flash_data+0xf400d33c>
    d744:	81bfdb36 	bltu	r16,r6,d6b4 <__alt_mem_Flash_flash_data+0xf400d6b4>
    d748:	300f883a 	mov	r7,r6
    d74c:	0009883a 	mov	r4,zero
    d750:	003fa106 	br	d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>

0000d754 <udivmodsi4>:
    d754:	2900182e 	bgeu	r5,r4,d7b8 <udivmodsi4+0x64>
    d758:	28001716 	blt	r5,zero,d7b8 <udivmodsi4+0x64>
    d75c:	00800804 	movi	r2,32
    d760:	00c00044 	movi	r3,1
    d764:	00000206 	br	d770 <udivmodsi4+0x1c>
    d768:	10001126 	beq	r2,zero,d7b0 <udivmodsi4+0x5c>
    d76c:	28000516 	blt	r5,zero,d784 <udivmodsi4+0x30>
    d770:	294b883a 	add	r5,r5,r5
    d774:	10bfffc4 	addi	r2,r2,-1
    d778:	18c7883a 	add	r3,r3,r3
    d77c:	293ffa36 	bltu	r5,r4,d768 <__alt_mem_Flash_flash_data+0xf400d768>
    d780:	18000b26 	beq	r3,zero,d7b0 <udivmodsi4+0x5c>
    d784:	0005883a 	mov	r2,zero
    d788:	21400236 	bltu	r4,r5,d794 <udivmodsi4+0x40>
    d78c:	2149c83a 	sub	r4,r4,r5
    d790:	10c4b03a 	or	r2,r2,r3
    d794:	1806d07a 	srli	r3,r3,1
    d798:	280ad07a 	srli	r5,r5,1
    d79c:	183ffa1e 	bne	r3,zero,d788 <__alt_mem_Flash_flash_data+0xf400d788>
    d7a0:	3000011e 	bne	r6,zero,d7a8 <udivmodsi4+0x54>
    d7a4:	f800283a 	ret
    d7a8:	2005883a 	mov	r2,r4
    d7ac:	f800283a 	ret
    d7b0:	0005883a 	mov	r2,zero
    d7b4:	003ffa06 	br	d7a0 <__alt_mem_Flash_flash_data+0xf400d7a0>
    d7b8:	00c00044 	movi	r3,1
    d7bc:	003ff106 	br	d784 <__alt_mem_Flash_flash_data+0xf400d784>

0000d7c0 <__divsi3>:
    d7c0:	defffe04 	addi	sp,sp,-8
    d7c4:	dfc00115 	stw	ra,4(sp)
    d7c8:	dc000015 	stw	r16,0(sp)
    d7cc:	20000b16 	blt	r4,zero,d7fc <__divsi3+0x3c>
    d7d0:	0021883a 	mov	r16,zero
    d7d4:	28000c16 	blt	r5,zero,d808 <__divsi3+0x48>
    d7d8:	000d883a 	mov	r6,zero
    d7dc:	000d7540 	call	d754 <udivmodsi4>
    d7e0:	0407c83a 	sub	r3,zero,r16
    d7e4:	1884f03a 	xor	r2,r3,r2
    d7e8:	1405883a 	add	r2,r2,r16
    d7ec:	dfc00117 	ldw	ra,4(sp)
    d7f0:	dc000017 	ldw	r16,0(sp)
    d7f4:	dec00204 	addi	sp,sp,8
    d7f8:	f800283a 	ret
    d7fc:	0109c83a 	sub	r4,zero,r4
    d800:	04000044 	movi	r16,1
    d804:	283ff40e 	bge	r5,zero,d7d8 <__alt_mem_Flash_flash_data+0xf400d7d8>
    d808:	014bc83a 	sub	r5,zero,r5
    d80c:	8400005c 	xori	r16,r16,1
    d810:	003ff106 	br	d7d8 <__alt_mem_Flash_flash_data+0xf400d7d8>

0000d814 <__modsi3>:
    d814:	defffd04 	addi	sp,sp,-12
    d818:	dfc00215 	stw	ra,8(sp)
    d81c:	dc400115 	stw	r17,4(sp)
    d820:	dc000015 	stw	r16,0(sp)
    d824:	20000c16 	blt	r4,zero,d858 <__modsi3+0x44>
    d828:	0023883a 	mov	r17,zero
    d82c:	0021883a 	mov	r16,zero
    d830:	28000d16 	blt	r5,zero,d868 <__modsi3+0x54>
    d834:	01800044 	movi	r6,1
    d838:	000d7540 	call	d754 <udivmodsi4>
    d83c:	1404f03a 	xor	r2,r2,r16
    d840:	8885883a 	add	r2,r17,r2
    d844:	dfc00217 	ldw	ra,8(sp)
    d848:	dc400117 	ldw	r17,4(sp)
    d84c:	dc000017 	ldw	r16,0(sp)
    d850:	dec00304 	addi	sp,sp,12
    d854:	f800283a 	ret
    d858:	0109c83a 	sub	r4,zero,r4
    d85c:	04400044 	movi	r17,1
    d860:	043fffc4 	movi	r16,-1
    d864:	283ff30e 	bge	r5,zero,d834 <__alt_mem_Flash_flash_data+0xf400d834>
    d868:	014bc83a 	sub	r5,zero,r5
    d86c:	003ff106 	br	d834 <__alt_mem_Flash_flash_data+0xf400d834>

0000d870 <__udivsi3>:
    d870:	000d883a 	mov	r6,zero
    d874:	000d7541 	jmpi	d754 <udivmodsi4>

0000d878 <__umodsi3>:
    d878:	01800044 	movi	r6,1
    d87c:	000d7541 	jmpi	d754 <udivmodsi4>

0000d880 <__adddf3>:
    d880:	02000434 	movhi	r8,16
    d884:	423fffc4 	addi	r8,r8,-1
    d888:	defffb04 	addi	sp,sp,-20
    d88c:	2a12703a 	and	r9,r5,r8
    d890:	2806d7fa 	srli	r3,r5,31
    d894:	3a10703a 	and	r8,r7,r8
    d898:	3804d53a 	srli	r2,r7,20
    d89c:	3014d77a 	srli	r10,r6,29
    d8a0:	dc000015 	stw	r16,0(sp)
    d8a4:	481290fa 	slli	r9,r9,3
    d8a8:	2820d53a 	srli	r16,r5,20
    d8ac:	401090fa 	slli	r8,r8,3
    d8b0:	200ad77a 	srli	r5,r4,29
    d8b4:	380ed7fa 	srli	r7,r7,31
    d8b8:	dc800215 	stw	r18,8(sp)
    d8bc:	dc400115 	stw	r17,4(sp)
    d8c0:	dfc00415 	stw	ra,16(sp)
    d8c4:	dcc00315 	stw	r19,12(sp)
    d8c8:	1c803fcc 	andi	r18,r3,255
    d8cc:	8401ffcc 	andi	r16,r16,2047
    d8d0:	494ab03a 	or	r5,r9,r5
    d8d4:	202290fa 	slli	r17,r4,3
    d8d8:	1081ffcc 	andi	r2,r2,2047
    d8dc:	4290b03a 	or	r8,r8,r10
    d8e0:	300c90fa 	slli	r6,r6,3
    d8e4:	91c07026 	beq	r18,r7,daa8 <__adddf3+0x228>
    d8e8:	8087c83a 	sub	r3,r16,r2
    d8ec:	00c0b30e 	bge	zero,r3,dbbc <__adddf3+0x33c>
    d8f0:	10002a1e 	bne	r2,zero,d99c <__adddf3+0x11c>
    d8f4:	4184b03a 	or	r2,r8,r6
    d8f8:	1000991e 	bne	r2,zero,db60 <__adddf3+0x2e0>
    d8fc:	888001cc 	andi	r2,r17,7
    d900:	10005b26 	beq	r2,zero,da70 <__adddf3+0x1f0>
    d904:	88c003cc 	andi	r3,r17,15
    d908:	00800104 	movi	r2,4
    d90c:	18805826 	beq	r3,r2,da70 <__adddf3+0x1f0>
    d910:	89800104 	addi	r6,r17,4
    d914:	3463803a 	cmpltu	r17,r6,r17
    d918:	2c4b883a 	add	r5,r5,r17
    d91c:	2880202c 	andhi	r2,r5,128
    d920:	9007883a 	mov	r3,r18
    d924:	3023883a 	mov	r17,r6
    d928:	10005426 	beq	r2,zero,da7c <__adddf3+0x1fc>
    d92c:	84000044 	addi	r16,r16,1
    d930:	0081ffc4 	movi	r2,2047
    d934:	8080c126 	beq	r16,r2,dc3c <__adddf3+0x3bc>
    d938:	013fe034 	movhi	r4,65408
    d93c:	213fffc4 	addi	r4,r4,-1
    d940:	290a703a 	and	r5,r5,r4
    d944:	2804977a 	slli	r2,r5,29
    d948:	280a927a 	slli	r5,r5,9
    d94c:	8822d0fa 	srli	r17,r17,3
    d950:	8401ffcc 	andi	r16,r16,2047
    d954:	2808d33a 	srli	r4,r5,12
    d958:	1444b03a 	or	r2,r2,r17
    d95c:	8401ffcc 	andi	r16,r16,2047
    d960:	800a953a 	slli	r5,r16,20
    d964:	18c03fcc 	andi	r3,r3,255
    d968:	04000434 	movhi	r16,16
    d96c:	180697fa 	slli	r3,r3,31
    d970:	843fffc4 	addi	r16,r16,-1
    d974:	2420703a 	and	r16,r4,r16
    d978:	8160b03a 	or	r16,r16,r5
    d97c:	80c6b03a 	or	r3,r16,r3
    d980:	dfc00417 	ldw	ra,16(sp)
    d984:	dcc00317 	ldw	r19,12(sp)
    d988:	dc800217 	ldw	r18,8(sp)
    d98c:	dc400117 	ldw	r17,4(sp)
    d990:	dc000017 	ldw	r16,0(sp)
    d994:	dec00504 	addi	sp,sp,20
    d998:	f800283a 	ret
    d99c:	0081ffc4 	movi	r2,2047
    d9a0:	80bfd626 	beq	r16,r2,d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    d9a4:	42002034 	orhi	r8,r8,128
    d9a8:	00800e04 	movi	r2,56
    d9ac:	10c0a616 	blt	r2,r3,dc48 <__adddf3+0x3c8>
    d9b0:	008007c4 	movi	r2,31
    d9b4:	10c0c916 	blt	r2,r3,dcdc <__adddf3+0x45c>
    d9b8:	00800804 	movi	r2,32
    d9bc:	10c5c83a 	sub	r2,r2,r3
    d9c0:	408e983a 	sll	r7,r8,r2
    d9c4:	30c8d83a 	srl	r4,r6,r3
    d9c8:	3084983a 	sll	r2,r6,r2
    d9cc:	40c6d83a 	srl	r3,r8,r3
    d9d0:	390cb03a 	or	r6,r7,r4
    d9d4:	1004c03a 	cmpne	r2,r2,zero
    d9d8:	308cb03a 	or	r6,r6,r2
    d9dc:	898dc83a 	sub	r6,r17,r6
    d9e0:	89a3803a 	cmpltu	r17,r17,r6
    d9e4:	28cbc83a 	sub	r5,r5,r3
    d9e8:	2c4bc83a 	sub	r5,r5,r17
    d9ec:	3023883a 	mov	r17,r6
    d9f0:	2880202c 	andhi	r2,r5,128
    d9f4:	10006d26 	beq	r2,zero,dbac <__adddf3+0x32c>
    d9f8:	04c02034 	movhi	r19,128
    d9fc:	9cffffc4 	addi	r19,r19,-1
    da00:	2ce6703a 	and	r19,r5,r19
    da04:	98007e26 	beq	r19,zero,dc00 <__adddf3+0x380>
    da08:	9809883a 	mov	r4,r19
    da0c:	000fe1c0 	call	fe1c <__clzsi2>
    da10:	10fffe04 	addi	r3,r2,-8
    da14:	010007c4 	movi	r4,31
    da18:	20c07f16 	blt	r4,r3,dc18 <__adddf3+0x398>
    da1c:	01400a04 	movi	r5,40
    da20:	2885c83a 	sub	r2,r5,r2
    da24:	888ad83a 	srl	r5,r17,r2
    da28:	98e6983a 	sll	r19,r19,r3
    da2c:	88e2983a 	sll	r17,r17,r3
    da30:	2ce6b03a 	or	r19,r5,r19
    da34:	1c007c16 	blt	r3,r16,dc28 <__adddf3+0x3a8>
    da38:	1c21c83a 	sub	r16,r3,r16
    da3c:	81400044 	addi	r5,r16,1
    da40:	00c007c4 	movi	r3,31
    da44:	19409816 	blt	r3,r5,dca8 <__adddf3+0x428>
    da48:	1c21c83a 	sub	r16,r3,r16
    da4c:	8c08983a 	sll	r4,r17,r16
    da50:	8946d83a 	srl	r3,r17,r5
    da54:	9c20983a 	sll	r16,r19,r16
    da58:	2008c03a 	cmpne	r4,r4,zero
    da5c:	994ad83a 	srl	r5,r19,r5
    da60:	1c06b03a 	or	r3,r3,r16
    da64:	1922b03a 	or	r17,r3,r4
    da68:	0021883a 	mov	r16,zero
    da6c:	003fa306 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    da70:	2880202c 	andhi	r2,r5,128
    da74:	9007883a 	mov	r3,r18
    da78:	103fac1e 	bne	r2,zero,d92c <__alt_mem_Flash_flash_data+0xf400d92c>
    da7c:	2804977a 	slli	r2,r5,29
    da80:	8822d0fa 	srli	r17,r17,3
    da84:	0101ffc4 	movi	r4,2047
    da88:	280ad0fa 	srli	r5,r5,3
    da8c:	1444b03a 	or	r2,r2,r17
    da90:	81002c26 	beq	r16,r4,db44 <__adddf3+0x2c4>
    da94:	8120703a 	and	r16,r16,r4
    da98:	01000434 	movhi	r4,16
    da9c:	213fffc4 	addi	r4,r4,-1
    daa0:	2908703a 	and	r4,r5,r4
    daa4:	003fad06 	br	d95c <__alt_mem_Flash_flash_data+0xf400d95c>
    daa8:	8089c83a 	sub	r4,r16,r2
    daac:	01006a0e 	bge	zero,r4,dc58 <__adddf3+0x3d8>
    dab0:	10003326 	beq	r2,zero,db80 <__adddf3+0x300>
    dab4:	0081ffc4 	movi	r2,2047
    dab8:	80bf9026 	beq	r16,r2,d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dabc:	42002034 	orhi	r8,r8,128
    dac0:	00800e04 	movi	r2,56
    dac4:	1100b116 	blt	r2,r4,dd8c <__adddf3+0x50c>
    dac8:	008007c4 	movi	r2,31
    dacc:	1100e216 	blt	r2,r4,de58 <__adddf3+0x5d8>
    dad0:	00800804 	movi	r2,32
    dad4:	1105c83a 	sub	r2,r2,r4
    dad8:	4092983a 	sll	r9,r8,r2
    dadc:	310ed83a 	srl	r7,r6,r4
    dae0:	3084983a 	sll	r2,r6,r2
    dae4:	4110d83a 	srl	r8,r8,r4
    dae8:	49ccb03a 	or	r6,r9,r7
    daec:	1004c03a 	cmpne	r2,r2,zero
    daf0:	308cb03a 	or	r6,r6,r2
    daf4:	344d883a 	add	r6,r6,r17
    daf8:	3463803a 	cmpltu	r17,r6,r17
    dafc:	414b883a 	add	r5,r8,r5
    db00:	2c4b883a 	add	r5,r5,r17
    db04:	3023883a 	mov	r17,r6
    db08:	2880202c 	andhi	r2,r5,128
    db0c:	10002726 	beq	r2,zero,dbac <__adddf3+0x32c>
    db10:	84000044 	addi	r16,r16,1
    db14:	0081ffc4 	movi	r2,2047
    db18:	8080ae26 	beq	r16,r2,ddd4 <__adddf3+0x554>
    db1c:	00bfe034 	movhi	r2,65408
    db20:	10bfffc4 	addi	r2,r2,-1
    db24:	288a703a 	and	r5,r5,r2
    db28:	880cd07a 	srli	r6,r17,1
    db2c:	280897fa 	slli	r4,r5,31
    db30:	88c0004c 	andi	r3,r17,1
    db34:	30e2b03a 	or	r17,r6,r3
    db38:	280ad07a 	srli	r5,r5,1
    db3c:	8922b03a 	or	r17,r17,r4
    db40:	003f6e06 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    db44:	1148b03a 	or	r4,r2,r5
    db48:	20003c26 	beq	r4,zero,dc3c <__adddf3+0x3bc>
    db4c:	29000234 	orhi	r4,r5,8
    db50:	01400434 	movhi	r5,16
    db54:	297fffc4 	addi	r5,r5,-1
    db58:	2148703a 	and	r4,r4,r5
    db5c:	003f7f06 	br	d95c <__alt_mem_Flash_flash_data+0xf400d95c>
    db60:	18ffffc4 	addi	r3,r3,-1
    db64:	18004d1e 	bne	r3,zero,dc9c <__adddf3+0x41c>
    db68:	898dc83a 	sub	r6,r17,r6
    db6c:	89a3803a 	cmpltu	r17,r17,r6
    db70:	2a0bc83a 	sub	r5,r5,r8
    db74:	2c4bc83a 	sub	r5,r5,r17
    db78:	3023883a 	mov	r17,r6
    db7c:	003f9c06 	br	d9f0 <__alt_mem_Flash_flash_data+0xf400d9f0>
    db80:	4184b03a 	or	r2,r8,r6
    db84:	103f5d26 	beq	r2,zero,d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    db88:	213fffc4 	addi	r4,r4,-1
    db8c:	203fd926 	beq	r4,zero,daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    db90:	0081ffc4 	movi	r2,2047
    db94:	80bfca1e 	bne	r16,r2,dac0 <__alt_mem_Flash_flash_data+0xf400dac0>
    db98:	003f5806 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    db9c:	10c8b03a 	or	r4,r2,r3
    dba0:	20008b26 	beq	r4,zero,ddd0 <__adddf3+0x550>
    dba4:	100b883a 	mov	r5,r2
    dba8:	1823883a 	mov	r17,r3
    dbac:	888001cc 	andi	r2,r17,7
    dbb0:	103f541e 	bne	r2,zero,d904 <__alt_mem_Flash_flash_data+0xf400d904>
    dbb4:	9007883a 	mov	r3,r18
    dbb8:	003fb006 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    dbbc:	1800531e 	bne	r3,zero,dd0c <__adddf3+0x48c>
    dbc0:	80800044 	addi	r2,r16,1
    dbc4:	1081ffcc 	andi	r2,r2,2047
    dbc8:	00c00044 	movi	r3,1
    dbcc:	1880990e 	bge	r3,r2,de34 <__adddf3+0x5b4>
    dbd0:	8985c83a 	sub	r2,r17,r6
    dbd4:	8887803a 	cmpltu	r3,r17,r2
    dbd8:	2a27c83a 	sub	r19,r5,r8
    dbdc:	98e7c83a 	sub	r19,r19,r3
    dbe0:	98c0202c 	andhi	r3,r19,128
    dbe4:	18006226 	beq	r3,zero,dd70 <__adddf3+0x4f0>
    dbe8:	3463c83a 	sub	r17,r6,r17
    dbec:	4151c83a 	sub	r8,r8,r5
    dbf0:	344d803a 	cmpltu	r6,r6,r17
    dbf4:	41a7c83a 	sub	r19,r8,r6
    dbf8:	3825883a 	mov	r18,r7
    dbfc:	983f821e 	bne	r19,zero,da08 <__alt_mem_Flash_flash_data+0xf400da08>
    dc00:	8809883a 	mov	r4,r17
    dc04:	000fe1c0 	call	fe1c <__clzsi2>
    dc08:	10800804 	addi	r2,r2,32
    dc0c:	10fffe04 	addi	r3,r2,-8
    dc10:	010007c4 	movi	r4,31
    dc14:	20ff810e 	bge	r4,r3,da1c <__alt_mem_Flash_flash_data+0xf400da1c>
    dc18:	14fff604 	addi	r19,r2,-40
    dc1c:	8ce6983a 	sll	r19,r17,r19
    dc20:	0023883a 	mov	r17,zero
    dc24:	1c3f840e 	bge	r3,r16,da38 <__alt_mem_Flash_flash_data+0xf400da38>
    dc28:	017fe034 	movhi	r5,65408
    dc2c:	297fffc4 	addi	r5,r5,-1
    dc30:	80e1c83a 	sub	r16,r16,r3
    dc34:	994a703a 	and	r5,r19,r5
    dc38:	003f3006 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dc3c:	0009883a 	mov	r4,zero
    dc40:	0005883a 	mov	r2,zero
    dc44:	003f4506 	br	d95c <__alt_mem_Flash_flash_data+0xf400d95c>
    dc48:	418cb03a 	or	r6,r8,r6
    dc4c:	300cc03a 	cmpne	r6,r6,zero
    dc50:	0007883a 	mov	r3,zero
    dc54:	003f6106 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    dc58:	2000921e 	bne	r4,zero,dea4 <__adddf3+0x624>
    dc5c:	80800044 	addi	r2,r16,1
    dc60:	11c1ffcc 	andi	r7,r2,2047
    dc64:	01000044 	movi	r4,1
    dc68:	21c0610e 	bge	r4,r7,ddf0 <__adddf3+0x570>
    dc6c:	0101ffc4 	movi	r4,2047
    dc70:	1100a326 	beq	r2,r4,df00 <__adddf3+0x680>
    dc74:	344d883a 	add	r6,r6,r17
    dc78:	3463803a 	cmpltu	r17,r6,r17
    dc7c:	414b883a 	add	r5,r8,r5
    dc80:	2c4b883a 	add	r5,r5,r17
    dc84:	282297fa 	slli	r17,r5,31
    dc88:	300cd07a 	srli	r6,r6,1
    dc8c:	280ad07a 	srli	r5,r5,1
    dc90:	1021883a 	mov	r16,r2
    dc94:	89a2b03a 	or	r17,r17,r6
    dc98:	003f1806 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dc9c:	0081ffc4 	movi	r2,2047
    dca0:	80bf411e 	bne	r16,r2,d9a8 <__alt_mem_Flash_flash_data+0xf400d9a8>
    dca4:	003f1506 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dca8:	80bff844 	addi	r2,r16,-31
    dcac:	00c00804 	movi	r3,32
    dcb0:	9884d83a 	srl	r2,r19,r2
    dcb4:	28c04a26 	beq	r5,r3,dde0 <__adddf3+0x560>
    dcb8:	00c00fc4 	movi	r3,63
    dcbc:	1c21c83a 	sub	r16,r3,r16
    dcc0:	9c26983a 	sll	r19,r19,r16
    dcc4:	9c62b03a 	or	r17,r19,r17
    dcc8:	8822c03a 	cmpne	r17,r17,zero
    dccc:	88a2b03a 	or	r17,r17,r2
    dcd0:	000b883a 	mov	r5,zero
    dcd4:	0021883a 	mov	r16,zero
    dcd8:	003fb406 	br	dbac <__alt_mem_Flash_flash_data+0xf400dbac>
    dcdc:	18bff804 	addi	r2,r3,-32
    dce0:	01000804 	movi	r4,32
    dce4:	4084d83a 	srl	r2,r8,r2
    dce8:	19003f26 	beq	r3,r4,dde8 <__adddf3+0x568>
    dcec:	01001004 	movi	r4,64
    dcf0:	20c7c83a 	sub	r3,r4,r3
    dcf4:	40d0983a 	sll	r8,r8,r3
    dcf8:	418cb03a 	or	r6,r8,r6
    dcfc:	300cc03a 	cmpne	r6,r6,zero
    dd00:	308cb03a 	or	r6,r6,r2
    dd04:	0007883a 	mov	r3,zero
    dd08:	003f3406 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    dd0c:	80002326 	beq	r16,zero,dd9c <__adddf3+0x51c>
    dd10:	0101ffc4 	movi	r4,2047
    dd14:	11005e26 	beq	r2,r4,de90 <__adddf3+0x610>
    dd18:	00c7c83a 	sub	r3,zero,r3
    dd1c:	29402034 	orhi	r5,r5,128
    dd20:	01000e04 	movi	r4,56
    dd24:	20c07216 	blt	r4,r3,def0 <__adddf3+0x670>
    dd28:	010007c4 	movi	r4,31
    dd2c:	20c0ce16 	blt	r4,r3,e068 <__adddf3+0x7e8>
    dd30:	01000804 	movi	r4,32
    dd34:	20c9c83a 	sub	r4,r4,r3
    dd38:	2914983a 	sll	r10,r5,r4
    dd3c:	88d2d83a 	srl	r9,r17,r3
    dd40:	8908983a 	sll	r4,r17,r4
    dd44:	28c6d83a 	srl	r3,r5,r3
    dd48:	5262b03a 	or	r17,r10,r9
    dd4c:	2008c03a 	cmpne	r4,r4,zero
    dd50:	8922b03a 	or	r17,r17,r4
    dd54:	3463c83a 	sub	r17,r6,r17
    dd58:	40c7c83a 	sub	r3,r8,r3
    dd5c:	344d803a 	cmpltu	r6,r6,r17
    dd60:	198bc83a 	sub	r5,r3,r6
    dd64:	1021883a 	mov	r16,r2
    dd68:	3825883a 	mov	r18,r7
    dd6c:	003f2006 	br	d9f0 <__alt_mem_Flash_flash_data+0xf400d9f0>
    dd70:	9886b03a 	or	r3,r19,r2
    dd74:	1800141e 	bne	r3,zero,ddc8 <__adddf3+0x548>
    dd78:	0007883a 	mov	r3,zero
    dd7c:	000b883a 	mov	r5,zero
    dd80:	0023883a 	mov	r17,zero
    dd84:	0021883a 	mov	r16,zero
    dd88:	003f3c06 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    dd8c:	418cb03a 	or	r6,r8,r6
    dd90:	300cc03a 	cmpne	r6,r6,zero
    dd94:	0011883a 	mov	r8,zero
    dd98:	003f5606 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    dd9c:	2c48b03a 	or	r4,r5,r17
    dda0:	20003b26 	beq	r4,zero,de90 <__adddf3+0x610>
    dda4:	00c6303a 	nor	r3,zero,r3
    dda8:	1800371e 	bne	r3,zero,de88 <__adddf3+0x608>
    ddac:	3463c83a 	sub	r17,r6,r17
    ddb0:	414bc83a 	sub	r5,r8,r5
    ddb4:	344d803a 	cmpltu	r6,r6,r17
    ddb8:	298bc83a 	sub	r5,r5,r6
    ddbc:	1021883a 	mov	r16,r2
    ddc0:	3825883a 	mov	r18,r7
    ddc4:	003f0a06 	br	d9f0 <__alt_mem_Flash_flash_data+0xf400d9f0>
    ddc8:	1023883a 	mov	r17,r2
    ddcc:	003f0d06 	br	da04 <__alt_mem_Flash_flash_data+0xf400da04>
    ddd0:	0007883a 	mov	r3,zero
    ddd4:	000b883a 	mov	r5,zero
    ddd8:	0023883a 	mov	r17,zero
    dddc:	003f2706 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    dde0:	0027883a 	mov	r19,zero
    dde4:	003fb706 	br	dcc4 <__alt_mem_Flash_flash_data+0xf400dcc4>
    dde8:	0011883a 	mov	r8,zero
    ddec:	003fc206 	br	dcf8 <__alt_mem_Flash_flash_data+0xf400dcf8>
    ddf0:	2c44b03a 	or	r2,r5,r17
    ddf4:	8000871e 	bne	r16,zero,e014 <__adddf3+0x794>
    ddf8:	1000b126 	beq	r2,zero,e0c0 <__adddf3+0x840>
    ddfc:	4184b03a 	or	r2,r8,r6
    de00:	103ebe26 	beq	r2,zero,d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    de04:	3445883a 	add	r2,r6,r17
    de08:	1463803a 	cmpltu	r17,r2,r17
    de0c:	414b883a 	add	r5,r8,r5
    de10:	2c4b883a 	add	r5,r5,r17
    de14:	28c0202c 	andhi	r3,r5,128
    de18:	1023883a 	mov	r17,r2
    de1c:	183f6326 	beq	r3,zero,dbac <__alt_mem_Flash_flash_data+0xf400dbac>
    de20:	00bfe034 	movhi	r2,65408
    de24:	10bfffc4 	addi	r2,r2,-1
    de28:	2021883a 	mov	r16,r4
    de2c:	288a703a 	and	r5,r5,r2
    de30:	003eb206 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    de34:	2c44b03a 	or	r2,r5,r17
    de38:	8000251e 	bne	r16,zero,ded0 <__adddf3+0x650>
    de3c:	10004b1e 	bne	r2,zero,df6c <__adddf3+0x6ec>
    de40:	4184b03a 	or	r2,r8,r6
    de44:	103fe226 	beq	r2,zero,ddd0 <__alt_mem_Flash_flash_data+0xf400ddd0>
    de48:	400b883a 	mov	r5,r8
    de4c:	3023883a 	mov	r17,r6
    de50:	3825883a 	mov	r18,r7
    de54:	003ea906 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    de58:	20bff804 	addi	r2,r4,-32
    de5c:	01c00804 	movi	r7,32
    de60:	4084d83a 	srl	r2,r8,r2
    de64:	21c07e26 	beq	r4,r7,e060 <__adddf3+0x7e0>
    de68:	01c01004 	movi	r7,64
    de6c:	3909c83a 	sub	r4,r7,r4
    de70:	4110983a 	sll	r8,r8,r4
    de74:	418cb03a 	or	r6,r8,r6
    de78:	300cc03a 	cmpne	r6,r6,zero
    de7c:	308cb03a 	or	r6,r6,r2
    de80:	0011883a 	mov	r8,zero
    de84:	003f1b06 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    de88:	0101ffc4 	movi	r4,2047
    de8c:	113fa41e 	bne	r2,r4,dd20 <__alt_mem_Flash_flash_data+0xf400dd20>
    de90:	400b883a 	mov	r5,r8
    de94:	3023883a 	mov	r17,r6
    de98:	1021883a 	mov	r16,r2
    de9c:	3825883a 	mov	r18,r7
    dea0:	003e9606 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dea4:	80001a1e 	bne	r16,zero,df10 <__adddf3+0x690>
    dea8:	2c4eb03a 	or	r7,r5,r17
    deac:	38005526 	beq	r7,zero,e004 <__adddf3+0x784>
    deb0:	0108303a 	nor	r4,zero,r4
    deb4:	2000511e 	bne	r4,zero,dffc <__adddf3+0x77c>
    deb8:	89a3883a 	add	r17,r17,r6
    debc:	414b883a 	add	r5,r8,r5
    dec0:	898d803a 	cmpltu	r6,r17,r6
    dec4:	298b883a 	add	r5,r5,r6
    dec8:	1021883a 	mov	r16,r2
    decc:	003f0e06 	br	db08 <__alt_mem_Flash_flash_data+0xf400db08>
    ded0:	1000341e 	bne	r2,zero,dfa4 <__adddf3+0x724>
    ded4:	4184b03a 	or	r2,r8,r6
    ded8:	10006f26 	beq	r2,zero,e098 <__adddf3+0x818>
    dedc:	400b883a 	mov	r5,r8
    dee0:	3023883a 	mov	r17,r6
    dee4:	3825883a 	mov	r18,r7
    dee8:	0401ffc4 	movi	r16,2047
    deec:	003e8306 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    def0:	2c62b03a 	or	r17,r5,r17
    def4:	8822c03a 	cmpne	r17,r17,zero
    def8:	0007883a 	mov	r3,zero
    defc:	003f9506 	br	dd54 <__alt_mem_Flash_flash_data+0xf400dd54>
    df00:	1021883a 	mov	r16,r2
    df04:	000b883a 	mov	r5,zero
    df08:	0023883a 	mov	r17,zero
    df0c:	003edb06 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    df10:	01c1ffc4 	movi	r7,2047
    df14:	11c03b26 	beq	r2,r7,e004 <__adddf3+0x784>
    df18:	0109c83a 	sub	r4,zero,r4
    df1c:	29402034 	orhi	r5,r5,128
    df20:	01c00e04 	movi	r7,56
    df24:	39006216 	blt	r7,r4,e0b0 <__adddf3+0x830>
    df28:	01c007c4 	movi	r7,31
    df2c:	39006b16 	blt	r7,r4,e0dc <__adddf3+0x85c>
    df30:	01c00804 	movi	r7,32
    df34:	390fc83a 	sub	r7,r7,r4
    df38:	29d4983a 	sll	r10,r5,r7
    df3c:	8912d83a 	srl	r9,r17,r4
    df40:	89ce983a 	sll	r7,r17,r7
    df44:	2908d83a 	srl	r4,r5,r4
    df48:	5262b03a 	or	r17,r10,r9
    df4c:	380ac03a 	cmpne	r5,r7,zero
    df50:	8962b03a 	or	r17,r17,r5
    df54:	89a3883a 	add	r17,r17,r6
    df58:	2211883a 	add	r8,r4,r8
    df5c:	898d803a 	cmpltu	r6,r17,r6
    df60:	418b883a 	add	r5,r8,r6
    df64:	1021883a 	mov	r16,r2
    df68:	003ee706 	br	db08 <__alt_mem_Flash_flash_data+0xf400db08>
    df6c:	4184b03a 	or	r2,r8,r6
    df70:	103e6226 	beq	r2,zero,d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    df74:	8987c83a 	sub	r3,r17,r6
    df78:	88c9803a 	cmpltu	r4,r17,r3
    df7c:	2a05c83a 	sub	r2,r5,r8
    df80:	1105c83a 	sub	r2,r2,r4
    df84:	1100202c 	andhi	r4,r2,128
    df88:	203f0426 	beq	r4,zero,db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    df8c:	3463c83a 	sub	r17,r6,r17
    df90:	414bc83a 	sub	r5,r8,r5
    df94:	344d803a 	cmpltu	r6,r6,r17
    df98:	298bc83a 	sub	r5,r5,r6
    df9c:	3825883a 	mov	r18,r7
    dfa0:	003e5606 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dfa4:	4184b03a 	or	r2,r8,r6
    dfa8:	10002b26 	beq	r2,zero,e058 <__adddf3+0x7d8>
    dfac:	2804d0fa 	srli	r2,r5,3
    dfb0:	8822d0fa 	srli	r17,r17,3
    dfb4:	280a977a 	slli	r5,r5,29
    dfb8:	10c0022c 	andhi	r3,r2,8
    dfbc:	2c62b03a 	or	r17,r5,r17
    dfc0:	18000826 	beq	r3,zero,dfe4 <__adddf3+0x764>
    dfc4:	4008d0fa 	srli	r4,r8,3
    dfc8:	20c0022c 	andhi	r3,r4,8
    dfcc:	1800051e 	bne	r3,zero,dfe4 <__adddf3+0x764>
    dfd0:	300cd0fa 	srli	r6,r6,3
    dfd4:	4010977a 	slli	r8,r8,29
    dfd8:	2005883a 	mov	r2,r4
    dfdc:	3825883a 	mov	r18,r7
    dfe0:	41a2b03a 	or	r17,r8,r6
    dfe4:	880ad77a 	srli	r5,r17,29
    dfe8:	100490fa 	slli	r2,r2,3
    dfec:	882290fa 	slli	r17,r17,3
    dff0:	0401ffc4 	movi	r16,2047
    dff4:	288ab03a 	or	r5,r5,r2
    dff8:	003e4006 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    dffc:	01c1ffc4 	movi	r7,2047
    e000:	11ffc71e 	bne	r2,r7,df20 <__alt_mem_Flash_flash_data+0xf400df20>
    e004:	400b883a 	mov	r5,r8
    e008:	3023883a 	mov	r17,r6
    e00c:	1021883a 	mov	r16,r2
    e010:	003e3a06 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    e014:	10002d26 	beq	r2,zero,e0cc <__adddf3+0x84c>
    e018:	4184b03a 	or	r2,r8,r6
    e01c:	10000e26 	beq	r2,zero,e058 <__adddf3+0x7d8>
    e020:	2804d0fa 	srli	r2,r5,3
    e024:	8822d0fa 	srli	r17,r17,3
    e028:	280a977a 	slli	r5,r5,29
    e02c:	10c0022c 	andhi	r3,r2,8
    e030:	2c62b03a 	or	r17,r5,r17
    e034:	183feb26 	beq	r3,zero,dfe4 <__alt_mem_Flash_flash_data+0xf400dfe4>
    e038:	4008d0fa 	srli	r4,r8,3
    e03c:	20c0022c 	andhi	r3,r4,8
    e040:	183fe81e 	bne	r3,zero,dfe4 <__alt_mem_Flash_flash_data+0xf400dfe4>
    e044:	300cd0fa 	srli	r6,r6,3
    e048:	4010977a 	slli	r8,r8,29
    e04c:	2005883a 	mov	r2,r4
    e050:	41a2b03a 	or	r17,r8,r6
    e054:	003fe306 	br	dfe4 <__alt_mem_Flash_flash_data+0xf400dfe4>
    e058:	0401ffc4 	movi	r16,2047
    e05c:	003e2706 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    e060:	0011883a 	mov	r8,zero
    e064:	003f8306 	br	de74 <__alt_mem_Flash_flash_data+0xf400de74>
    e068:	193ff804 	addi	r4,r3,-32
    e06c:	02400804 	movi	r9,32
    e070:	2908d83a 	srl	r4,r5,r4
    e074:	1a402526 	beq	r3,r9,e10c <__adddf3+0x88c>
    e078:	02401004 	movi	r9,64
    e07c:	48c7c83a 	sub	r3,r9,r3
    e080:	28ca983a 	sll	r5,r5,r3
    e084:	2c62b03a 	or	r17,r5,r17
    e088:	8822c03a 	cmpne	r17,r17,zero
    e08c:	8922b03a 	or	r17,r17,r4
    e090:	0007883a 	mov	r3,zero
    e094:	003f2f06 	br	dd54 <__alt_mem_Flash_flash_data+0xf400dd54>
    e098:	01402034 	movhi	r5,128
    e09c:	0007883a 	mov	r3,zero
    e0a0:	297fffc4 	addi	r5,r5,-1
    e0a4:	047ffe04 	movi	r17,-8
    e0a8:	0401ffc4 	movi	r16,2047
    e0ac:	003e7306 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    e0b0:	2c62b03a 	or	r17,r5,r17
    e0b4:	8822c03a 	cmpne	r17,r17,zero
    e0b8:	0009883a 	mov	r4,zero
    e0bc:	003fa506 	br	df54 <__alt_mem_Flash_flash_data+0xf400df54>
    e0c0:	400b883a 	mov	r5,r8
    e0c4:	3023883a 	mov	r17,r6
    e0c8:	003e0c06 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    e0cc:	400b883a 	mov	r5,r8
    e0d0:	3023883a 	mov	r17,r6
    e0d4:	0401ffc4 	movi	r16,2047
    e0d8:	003e0806 	br	d8fc <__alt_mem_Flash_flash_data+0xf400d8fc>
    e0dc:	21fff804 	addi	r7,r4,-32
    e0e0:	02400804 	movi	r9,32
    e0e4:	29ced83a 	srl	r7,r5,r7
    e0e8:	22400a26 	beq	r4,r9,e114 <__adddf3+0x894>
    e0ec:	02401004 	movi	r9,64
    e0f0:	4909c83a 	sub	r4,r9,r4
    e0f4:	290a983a 	sll	r5,r5,r4
    e0f8:	2c62b03a 	or	r17,r5,r17
    e0fc:	8822c03a 	cmpne	r17,r17,zero
    e100:	89e2b03a 	or	r17,r17,r7
    e104:	0009883a 	mov	r4,zero
    e108:	003f9206 	br	df54 <__alt_mem_Flash_flash_data+0xf400df54>
    e10c:	000b883a 	mov	r5,zero
    e110:	003fdc06 	br	e084 <__alt_mem_Flash_flash_data+0xf400e084>
    e114:	000b883a 	mov	r5,zero
    e118:	003ff706 	br	e0f8 <__alt_mem_Flash_flash_data+0xf400e0f8>

0000e11c <__divdf3>:
    e11c:	defff204 	addi	sp,sp,-56
    e120:	dd000815 	stw	r20,32(sp)
    e124:	2828d53a 	srli	r20,r5,20
    e128:	dd800a15 	stw	r22,40(sp)
    e12c:	282cd7fa 	srli	r22,r5,31
    e130:	dc000415 	stw	r16,16(sp)
    e134:	04000434 	movhi	r16,16
    e138:	df000c15 	stw	fp,48(sp)
    e13c:	dcc00715 	stw	r19,28(sp)
    e140:	dc800615 	stw	r18,24(sp)
    e144:	dc400515 	stw	r17,20(sp)
    e148:	843fffc4 	addi	r16,r16,-1
    e14c:	dfc00d15 	stw	ra,52(sp)
    e150:	ddc00b15 	stw	r23,44(sp)
    e154:	dd400915 	stw	r21,36(sp)
    e158:	a501ffcc 	andi	r20,r20,2047
    e15c:	2025883a 	mov	r18,r4
    e160:	2027883a 	mov	r19,r4
    e164:	2c22703a 	and	r17,r5,r16
    e168:	b7003fcc 	andi	fp,r22,255
    e16c:	a0005e26 	beq	r20,zero,e2e8 <__divdf3+0x1cc>
    e170:	0081ffc4 	movi	r2,2047
    e174:	a0803526 	beq	r20,r2,e24c <__divdf3+0x130>
    e178:	8c000434 	orhi	r16,r17,16
    e17c:	2004d77a 	srli	r2,r4,29
    e180:	802090fa 	slli	r16,r16,3
    e184:	202690fa 	slli	r19,r4,3
    e188:	a53f0044 	addi	r20,r20,-1023
    e18c:	80a2b03a 	or	r17,r16,r2
    e190:	0025883a 	mov	r18,zero
    e194:	0011883a 	mov	r8,zero
    e198:	380ad53a 	srli	r5,r7,20
    e19c:	382ed7fa 	srli	r23,r7,31
    e1a0:	04000434 	movhi	r16,16
    e1a4:	843fffc4 	addi	r16,r16,-1
    e1a8:	2941ffcc 	andi	r5,r5,2047
    e1ac:	302b883a 	mov	r21,r6
    e1b0:	3c20703a 	and	r16,r7,r16
    e1b4:	ba403fcc 	andi	r9,r23,255
    e1b8:	28006726 	beq	r5,zero,e358 <__divdf3+0x23c>
    e1bc:	0081ffc4 	movi	r2,2047
    e1c0:	28805f26 	beq	r5,r2,e340 <__divdf3+0x224>
    e1c4:	84000434 	orhi	r16,r16,16
    e1c8:	3004d77a 	srli	r2,r6,29
    e1cc:	802090fa 	slli	r16,r16,3
    e1d0:	302a90fa 	slli	r21,r6,3
    e1d4:	297f0044 	addi	r5,r5,-1023
    e1d8:	80a0b03a 	or	r16,r16,r2
    e1dc:	000f883a 	mov	r7,zero
    e1e0:	3c86b03a 	or	r3,r7,r18
    e1e4:	180690ba 	slli	r3,r3,2
    e1e8:	00800074 	movhi	r2,1
    e1ec:	10b88304 	addi	r2,r2,-7668
    e1f0:	1887883a 	add	r3,r3,r2
    e1f4:	18c00017 	ldw	r3,0(r3)
    e1f8:	b5c8f03a 	xor	r4,r22,r23
    e1fc:	200d883a 	mov	r6,r4
    e200:	24803fcc 	andi	r18,r4,255
    e204:	a169c83a 	sub	r20,r20,r5
    e208:	1800683a 	jmp	r3
    e20c:	0000e454 	movui	zero,913
    e210:	0000e284 	movi	zero,906
    e214:	0000e418 	cmpnei	zero,zero,912
    e218:	0000e268 	cmpgeui	zero,zero,905
    e21c:	0000e418 	cmpnei	zero,zero,912
    e220:	0000e3ec 	andhi	zero,zero,911
    e224:	0000e418 	cmpnei	zero,zero,912
    e228:	0000e268 	cmpgeui	zero,zero,905
    e22c:	0000e284 	movi	zero,906
    e230:	0000e284 	movi	zero,906
    e234:	0000e3ec 	andhi	zero,zero,911
    e238:	0000e268 	cmpgeui	zero,zero,905
    e23c:	0000e278 	rdprs	zero,zero,905
    e240:	0000e278 	rdprs	zero,zero,905
    e244:	0000e278 	rdprs	zero,zero,905
    e248:	0000e428 	cmpgeui	zero,zero,912
    e24c:	8904b03a 	or	r2,r17,r4
    e250:	1000631e 	bne	r2,zero,e3e0 <__divdf3+0x2c4>
    e254:	04800204 	movi	r18,8
    e258:	0023883a 	mov	r17,zero
    e25c:	0027883a 	mov	r19,zero
    e260:	02000084 	movi	r8,2
    e264:	003fcc06 	br	e198 <__alt_mem_Flash_flash_data+0xf400e198>
    e268:	8023883a 	mov	r17,r16
    e26c:	a827883a 	mov	r19,r21
    e270:	4839883a 	mov	fp,r9
    e274:	3811883a 	mov	r8,r7
    e278:	00800084 	movi	r2,2
    e27c:	40812a1e 	bne	r8,r2,e728 <__divdf3+0x60c>
    e280:	e025883a 	mov	r18,fp
    e284:	9180004c 	andi	r6,r18,1
    e288:	0101ffc4 	movi	r4,2047
    e28c:	000b883a 	mov	r5,zero
    e290:	0027883a 	mov	r19,zero
    e294:	2008953a 	slli	r4,r4,20
    e298:	30c03fcc 	andi	r3,r6,255
    e29c:	04000434 	movhi	r16,16
    e2a0:	180697fa 	slli	r3,r3,31
    e2a4:	843fffc4 	addi	r16,r16,-1
    e2a8:	2c20703a 	and	r16,r5,r16
    e2ac:	8120b03a 	or	r16,r16,r4
    e2b0:	80c6b03a 	or	r3,r16,r3
    e2b4:	9805883a 	mov	r2,r19
    e2b8:	dfc00d17 	ldw	ra,52(sp)
    e2bc:	df000c17 	ldw	fp,48(sp)
    e2c0:	ddc00b17 	ldw	r23,44(sp)
    e2c4:	dd800a17 	ldw	r22,40(sp)
    e2c8:	dd400917 	ldw	r21,36(sp)
    e2cc:	dd000817 	ldw	r20,32(sp)
    e2d0:	dcc00717 	ldw	r19,28(sp)
    e2d4:	dc800617 	ldw	r18,24(sp)
    e2d8:	dc400517 	ldw	r17,20(sp)
    e2dc:	dc000417 	ldw	r16,16(sp)
    e2e0:	dec00e04 	addi	sp,sp,56
    e2e4:	f800283a 	ret
    e2e8:	8904b03a 	or	r2,r17,r4
    e2ec:	10003726 	beq	r2,zero,e3cc <__divdf3+0x2b0>
    e2f0:	88011c26 	beq	r17,zero,e764 <__divdf3+0x648>
    e2f4:	8809883a 	mov	r4,r17
    e2f8:	d9800315 	stw	r6,12(sp)
    e2fc:	d9c00115 	stw	r7,4(sp)
    e300:	000fe1c0 	call	fe1c <__clzsi2>
    e304:	d9800317 	ldw	r6,12(sp)
    e308:	d9c00117 	ldw	r7,4(sp)
    e30c:	1007883a 	mov	r3,r2
    e310:	01000a04 	movi	r4,40
    e314:	1cfffe04 	addi	r19,r3,-8
    e318:	20c9c83a 	sub	r4,r4,r3
    e31c:	8cca983a 	sll	r5,r17,r19
    e320:	9108d83a 	srl	r4,r18,r4
    e324:	94e6983a 	sll	r19,r18,r19
    e328:	2162b03a 	or	r17,r4,r5
    e32c:	053f0344 	movi	r20,-1011
    e330:	a0e9c83a 	sub	r20,r20,r3
    e334:	0025883a 	mov	r18,zero
    e338:	0011883a 	mov	r8,zero
    e33c:	003f9606 	br	e198 <__alt_mem_Flash_flash_data+0xf400e198>
    e340:	8184b03a 	or	r2,r16,r6
    e344:	10001f1e 	bne	r2,zero,e3c4 <__divdf3+0x2a8>
    e348:	0021883a 	mov	r16,zero
    e34c:	002b883a 	mov	r21,zero
    e350:	01c00084 	movi	r7,2
    e354:	003fa206 	br	e1e0 <__alt_mem_Flash_flash_data+0xf400e1e0>
    e358:	8184b03a 	or	r2,r16,r6
    e35c:	10001526 	beq	r2,zero,e3b4 <__divdf3+0x298>
    e360:	80010c26 	beq	r16,zero,e794 <__divdf3+0x678>
    e364:	8009883a 	mov	r4,r16
    e368:	d9800315 	stw	r6,12(sp)
    e36c:	da000215 	stw	r8,8(sp)
    e370:	da400015 	stw	r9,0(sp)
    e374:	000fe1c0 	call	fe1c <__clzsi2>
    e378:	d9800317 	ldw	r6,12(sp)
    e37c:	da000217 	ldw	r8,8(sp)
    e380:	da400017 	ldw	r9,0(sp)
    e384:	1007883a 	mov	r3,r2
    e388:	01000a04 	movi	r4,40
    e38c:	1d7ffe04 	addi	r21,r3,-8
    e390:	20c9c83a 	sub	r4,r4,r3
    e394:	8560983a 	sll	r16,r16,r21
    e398:	3108d83a 	srl	r4,r6,r4
    e39c:	356a983a 	sll	r21,r6,r21
    e3a0:	2420b03a 	or	r16,r4,r16
    e3a4:	017f0344 	movi	r5,-1011
    e3a8:	28cbc83a 	sub	r5,r5,r3
    e3ac:	000f883a 	mov	r7,zero
    e3b0:	003f8b06 	br	e1e0 <__alt_mem_Flash_flash_data+0xf400e1e0>
    e3b4:	0021883a 	mov	r16,zero
    e3b8:	002b883a 	mov	r21,zero
    e3bc:	01c00044 	movi	r7,1
    e3c0:	003f8706 	br	e1e0 <__alt_mem_Flash_flash_data+0xf400e1e0>
    e3c4:	01c000c4 	movi	r7,3
    e3c8:	003f8506 	br	e1e0 <__alt_mem_Flash_flash_data+0xf400e1e0>
    e3cc:	04800104 	movi	r18,4
    e3d0:	0023883a 	mov	r17,zero
    e3d4:	0027883a 	mov	r19,zero
    e3d8:	02000044 	movi	r8,1
    e3dc:	003f6e06 	br	e198 <__alt_mem_Flash_flash_data+0xf400e198>
    e3e0:	04800304 	movi	r18,12
    e3e4:	020000c4 	movi	r8,3
    e3e8:	003f6b06 	br	e198 <__alt_mem_Flash_flash_data+0xf400e198>
    e3ec:	01400434 	movhi	r5,16
    e3f0:	000d883a 	mov	r6,zero
    e3f4:	297fffc4 	addi	r5,r5,-1
    e3f8:	04ffffc4 	movi	r19,-1
    e3fc:	0101ffc4 	movi	r4,2047
    e400:	003fa406 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e404:	043f0084 	movi	r16,-1022
    e408:	8521c83a 	sub	r16,r16,r20
    e40c:	00800e04 	movi	r2,56
    e410:	1401200e 	bge	r2,r16,e894 <__divdf3+0x778>
    e414:	9180004c 	andi	r6,r18,1
    e418:	0009883a 	mov	r4,zero
    e41c:	000b883a 	mov	r5,zero
    e420:	0027883a 	mov	r19,zero
    e424:	003f9b06 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e428:	8880022c 	andhi	r2,r17,8
    e42c:	1000c726 	beq	r2,zero,e74c <__divdf3+0x630>
    e430:	8080022c 	andhi	r2,r16,8
    e434:	1000c51e 	bne	r2,zero,e74c <__divdf3+0x630>
    e438:	00800434 	movhi	r2,16
    e43c:	81400234 	orhi	r5,r16,8
    e440:	10bfffc4 	addi	r2,r2,-1
    e444:	b80d883a 	mov	r6,r23
    e448:	288a703a 	and	r5,r5,r2
    e44c:	a827883a 	mov	r19,r21
    e450:	003fea06 	br	e3fc <__alt_mem_Flash_flash_data+0xf400e3fc>
    e454:	8440ea36 	bltu	r16,r17,e800 <__divdf3+0x6e4>
    e458:	8c00e826 	beq	r17,r16,e7fc <__divdf3+0x6e0>
    e45c:	a53fffc4 	addi	r20,r20,-1
    e460:	882d883a 	mov	r22,r17
    e464:	000d883a 	mov	r6,zero
    e468:	a804d63a 	srli	r2,r21,24
    e46c:	8020923a 	slli	r16,r16,8
    e470:	b009883a 	mov	r4,r22
    e474:	d9800315 	stw	r6,12(sp)
    e478:	1420b03a 	or	r16,r2,r16
    e47c:	802ed43a 	srli	r23,r16,16
    e480:	873fffcc 	andi	fp,r16,65535
    e484:	a82a923a 	slli	r21,r21,8
    e488:	b80b883a 	mov	r5,r23
    e48c:	000d8700 	call	d870 <__udivsi3>
    e490:	b009883a 	mov	r4,r22
    e494:	b80b883a 	mov	r5,r23
    e498:	1023883a 	mov	r17,r2
    e49c:	000d8780 	call	d878 <__umodsi3>
    e4a0:	1004943a 	slli	r2,r2,16
    e4a4:	9808d43a 	srli	r4,r19,16
    e4a8:	8f2d383a 	mul	r22,r17,fp
    e4ac:	d9800317 	ldw	r6,12(sp)
    e4b0:	1106b03a 	or	r3,r2,r4
    e4b4:	1d80062e 	bgeu	r3,r22,e4d0 <__divdf3+0x3b4>
    e4b8:	1c07883a 	add	r3,r3,r16
    e4bc:	88bfffc4 	addi	r2,r17,-1
    e4c0:	1c00dc36 	bltu	r3,r16,e834 <__divdf3+0x718>
    e4c4:	1d80db2e 	bgeu	r3,r22,e834 <__divdf3+0x718>
    e4c8:	8c7fff84 	addi	r17,r17,-2
    e4cc:	1c07883a 	add	r3,r3,r16
    e4d0:	1dadc83a 	sub	r22,r3,r22
    e4d4:	b009883a 	mov	r4,r22
    e4d8:	b80b883a 	mov	r5,r23
    e4dc:	d9800315 	stw	r6,12(sp)
    e4e0:	000d8700 	call	d870 <__udivsi3>
    e4e4:	b009883a 	mov	r4,r22
    e4e8:	b80b883a 	mov	r5,r23
    e4ec:	d8800015 	stw	r2,0(sp)
    e4f0:	000d8780 	call	d878 <__umodsi3>
    e4f4:	da400017 	ldw	r9,0(sp)
    e4f8:	1004943a 	slli	r2,r2,16
    e4fc:	9cffffcc 	andi	r19,r19,65535
    e500:	4f07383a 	mul	r3,r9,fp
    e504:	14c8b03a 	or	r4,r2,r19
    e508:	d9800317 	ldw	r6,12(sp)
    e50c:	20c0062e 	bgeu	r4,r3,e528 <__divdf3+0x40c>
    e510:	2409883a 	add	r4,r4,r16
    e514:	48bfffc4 	addi	r2,r9,-1
    e518:	2400c436 	bltu	r4,r16,e82c <__divdf3+0x710>
    e51c:	20c0c32e 	bgeu	r4,r3,e82c <__divdf3+0x710>
    e520:	4a7fff84 	addi	r9,r9,-2
    e524:	2409883a 	add	r4,r4,r16
    e528:	8822943a 	slli	r17,r17,16
    e52c:	a80ed43a 	srli	r7,r21,16
    e530:	aa3fffcc 	andi	r8,r21,65535
    e534:	4c62b03a 	or	r17,r9,r17
    e538:	8816d43a 	srli	r11,r17,16
    e53c:	897fffcc 	andi	r5,r17,65535
    e540:	2a15383a 	mul	r10,r5,r8
    e544:	5a19383a 	mul	r12,r11,r8
    e548:	29cb383a 	mul	r5,r5,r7
    e54c:	5012d43a 	srli	r9,r10,16
    e550:	20c5c83a 	sub	r2,r4,r3
    e554:	614b883a 	add	r5,r12,r5
    e558:	2a4b883a 	add	r5,r5,r9
    e55c:	59c7383a 	mul	r3,r11,r7
    e560:	2b00022e 	bgeu	r5,r12,e56c <__divdf3+0x450>
    e564:	01000074 	movhi	r4,1
    e568:	1907883a 	add	r3,r3,r4
    e56c:	2808d43a 	srli	r4,r5,16
    e570:	280a943a 	slli	r5,r5,16
    e574:	54ffffcc 	andi	r19,r10,65535
    e578:	1907883a 	add	r3,r3,r4
    e57c:	2ccb883a 	add	r5,r5,r19
    e580:	10c09336 	bltu	r2,r3,e7d0 <__divdf3+0x6b4>
    e584:	10c0ad26 	beq	r2,r3,e83c <__divdf3+0x720>
    e588:	10c7c83a 	sub	r3,r2,r3
    e58c:	3167c83a 	sub	r19,r6,r5
    e590:	34ed803a 	cmpltu	r22,r6,r19
    e594:	1dadc83a 	sub	r22,r3,r22
    e598:	b400b226 	beq	r22,r16,e864 <__divdf3+0x748>
    e59c:	b009883a 	mov	r4,r22
    e5a0:	b80b883a 	mov	r5,r23
    e5a4:	d9c00115 	stw	r7,4(sp)
    e5a8:	da000215 	stw	r8,8(sp)
    e5ac:	000d8700 	call	d870 <__udivsi3>
    e5b0:	b009883a 	mov	r4,r22
    e5b4:	b80b883a 	mov	r5,r23
    e5b8:	d8800315 	stw	r2,12(sp)
    e5bc:	000d8780 	call	d878 <__umodsi3>
    e5c0:	d9800317 	ldw	r6,12(sp)
    e5c4:	1004943a 	slli	r2,r2,16
    e5c8:	9808d43a 	srli	r4,r19,16
    e5cc:	372d383a 	mul	r22,r6,fp
    e5d0:	d9c00117 	ldw	r7,4(sp)
    e5d4:	1106b03a 	or	r3,r2,r4
    e5d8:	da000217 	ldw	r8,8(sp)
    e5dc:	1d80062e 	bgeu	r3,r22,e5f8 <__divdf3+0x4dc>
    e5e0:	1c07883a 	add	r3,r3,r16
    e5e4:	30bfffc4 	addi	r2,r6,-1
    e5e8:	1c00a036 	bltu	r3,r16,e86c <__divdf3+0x750>
    e5ec:	1d809f2e 	bgeu	r3,r22,e86c <__divdf3+0x750>
    e5f0:	31bfff84 	addi	r6,r6,-2
    e5f4:	1c07883a 	add	r3,r3,r16
    e5f8:	1dadc83a 	sub	r22,r3,r22
    e5fc:	b009883a 	mov	r4,r22
    e600:	b80b883a 	mov	r5,r23
    e604:	d9800315 	stw	r6,12(sp)
    e608:	d9c00115 	stw	r7,4(sp)
    e60c:	da000215 	stw	r8,8(sp)
    e610:	000d8700 	call	d870 <__udivsi3>
    e614:	b009883a 	mov	r4,r22
    e618:	b80b883a 	mov	r5,r23
    e61c:	d8800015 	stw	r2,0(sp)
    e620:	000d8780 	call	d878 <__umodsi3>
    e624:	da400017 	ldw	r9,0(sp)
    e628:	1004943a 	slli	r2,r2,16
    e62c:	993fffcc 	andi	r4,r19,65535
    e630:	4f39383a 	mul	fp,r9,fp
    e634:	1106b03a 	or	r3,r2,r4
    e638:	d9800317 	ldw	r6,12(sp)
    e63c:	d9c00117 	ldw	r7,4(sp)
    e640:	da000217 	ldw	r8,8(sp)
    e644:	1f00062e 	bgeu	r3,fp,e660 <__divdf3+0x544>
    e648:	1c07883a 	add	r3,r3,r16
    e64c:	48bfffc4 	addi	r2,r9,-1
    e650:	1c008836 	bltu	r3,r16,e874 <__divdf3+0x758>
    e654:	1f00872e 	bgeu	r3,fp,e874 <__divdf3+0x758>
    e658:	4a7fff84 	addi	r9,r9,-2
    e65c:	1c07883a 	add	r3,r3,r16
    e660:	3008943a 	slli	r4,r6,16
    e664:	1f07c83a 	sub	r3,r3,fp
    e668:	4926b03a 	or	r19,r9,r4
    e66c:	993fffcc 	andi	r4,r19,65535
    e670:	980cd43a 	srli	r6,r19,16
    e674:	220b383a 	mul	r5,r4,r8
    e678:	21c5383a 	mul	r2,r4,r7
    e67c:	3211383a 	mul	r8,r6,r8
    e680:	2808d43a 	srli	r4,r5,16
    e684:	31cf383a 	mul	r7,r6,r7
    e688:	4085883a 	add	r2,r8,r2
    e68c:	1105883a 	add	r2,r2,r4
    e690:	1200022e 	bgeu	r2,r8,e69c <__divdf3+0x580>
    e694:	01000074 	movhi	r4,1
    e698:	390f883a 	add	r7,r7,r4
    e69c:	1008d43a 	srli	r4,r2,16
    e6a0:	1004943a 	slli	r2,r2,16
    e6a4:	297fffcc 	andi	r5,r5,65535
    e6a8:	390f883a 	add	r7,r7,r4
    e6ac:	1145883a 	add	r2,r2,r5
    e6b0:	19c06536 	bltu	r3,r7,e848 <__divdf3+0x72c>
    e6b4:	19c09f26 	beq	r3,r7,e934 <__divdf3+0x818>
    e6b8:	9cc00054 	ori	r19,r19,1
    e6bc:	a100ffc4 	addi	r4,r20,1023
    e6c0:	013f500e 	bge	zero,r4,e404 <__alt_mem_Flash_flash_data+0xf400e404>
    e6c4:	988001cc 	andi	r2,r19,7
    e6c8:	10000726 	beq	r2,zero,e6e8 <__divdf3+0x5cc>
    e6cc:	98c003cc 	andi	r3,r19,15
    e6d0:	00800104 	movi	r2,4
    e6d4:	18800426 	beq	r3,r2,e6e8 <__divdf3+0x5cc>
    e6d8:	9885883a 	add	r2,r19,r2
    e6dc:	14e1803a 	cmpltu	r16,r2,r19
    e6e0:	8c23883a 	add	r17,r17,r16
    e6e4:	1027883a 	mov	r19,r2
    e6e8:	8880402c 	andhi	r2,r17,256
    e6ec:	10000426 	beq	r2,zero,e700 <__divdf3+0x5e4>
    e6f0:	00bfc034 	movhi	r2,65280
    e6f4:	10bfffc4 	addi	r2,r2,-1
    e6f8:	a1010004 	addi	r4,r20,1024
    e6fc:	88a2703a 	and	r17,r17,r2
    e700:	0081ff84 	movi	r2,2046
    e704:	113edf16 	blt	r2,r4,e284 <__alt_mem_Flash_flash_data+0xf400e284>
    e708:	9826d0fa 	srli	r19,r19,3
    e70c:	8804977a 	slli	r2,r17,29
    e710:	8820927a 	slli	r16,r17,9
    e714:	2101ffcc 	andi	r4,r4,2047
    e718:	14e6b03a 	or	r19,r2,r19
    e71c:	800ad33a 	srli	r5,r16,12
    e720:	9180004c 	andi	r6,r18,1
    e724:	003edb06 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e728:	008000c4 	movi	r2,3
    e72c:	4080a826 	beq	r8,r2,e9d0 <__divdf3+0x8b4>
    e730:	00800044 	movi	r2,1
    e734:	4080551e 	bne	r8,r2,e88c <__divdf3+0x770>
    e738:	e00d883a 	mov	r6,fp
    e73c:	0009883a 	mov	r4,zero
    e740:	000b883a 	mov	r5,zero
    e744:	0027883a 	mov	r19,zero
    e748:	003ed206 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e74c:	00800434 	movhi	r2,16
    e750:	89400234 	orhi	r5,r17,8
    e754:	10bfffc4 	addi	r2,r2,-1
    e758:	b00d883a 	mov	r6,r22
    e75c:	288a703a 	and	r5,r5,r2
    e760:	003f2606 	br	e3fc <__alt_mem_Flash_flash_data+0xf400e3fc>
    e764:	d9800315 	stw	r6,12(sp)
    e768:	d9c00115 	stw	r7,4(sp)
    e76c:	000fe1c0 	call	fe1c <__clzsi2>
    e770:	10c00804 	addi	r3,r2,32
    e774:	010009c4 	movi	r4,39
    e778:	d9800317 	ldw	r6,12(sp)
    e77c:	d9c00117 	ldw	r7,4(sp)
    e780:	20fee30e 	bge	r4,r3,e310 <__alt_mem_Flash_flash_data+0xf400e310>
    e784:	117ffe04 	addi	r5,r2,-8
    e788:	9162983a 	sll	r17,r18,r5
    e78c:	0027883a 	mov	r19,zero
    e790:	003ee606 	br	e32c <__alt_mem_Flash_flash_data+0xf400e32c>
    e794:	3009883a 	mov	r4,r6
    e798:	d9800315 	stw	r6,12(sp)
    e79c:	da000215 	stw	r8,8(sp)
    e7a0:	da400015 	stw	r9,0(sp)
    e7a4:	000fe1c0 	call	fe1c <__clzsi2>
    e7a8:	10c00804 	addi	r3,r2,32
    e7ac:	010009c4 	movi	r4,39
    e7b0:	d9800317 	ldw	r6,12(sp)
    e7b4:	da000217 	ldw	r8,8(sp)
    e7b8:	da400017 	ldw	r9,0(sp)
    e7bc:	20fef20e 	bge	r4,r3,e388 <__alt_mem_Flash_flash_data+0xf400e388>
    e7c0:	10bffe04 	addi	r2,r2,-8
    e7c4:	a8a0983a 	sll	r16,r21,r2
    e7c8:	002b883a 	mov	r21,zero
    e7cc:	003ef506 	br	e3a4 <__alt_mem_Flash_flash_data+0xf400e3a4>
    e7d0:	354d883a 	add	r6,r6,r21
    e7d4:	3549803a 	cmpltu	r4,r6,r21
    e7d8:	2409883a 	add	r4,r4,r16
    e7dc:	2089883a 	add	r4,r4,r2
    e7e0:	88bfffc4 	addi	r2,r17,-1
    e7e4:	81000c2e 	bgeu	r16,r4,e818 <__divdf3+0x6fc>
    e7e8:	20c04436 	bltu	r4,r3,e8fc <__divdf3+0x7e0>
    e7ec:	19006f26 	beq	r3,r4,e9ac <__divdf3+0x890>
    e7f0:	20c7c83a 	sub	r3,r4,r3
    e7f4:	1023883a 	mov	r17,r2
    e7f8:	003f6406 	br	e58c <__alt_mem_Flash_flash_data+0xf400e58c>
    e7fc:	9d7f1736 	bltu	r19,r21,e45c <__alt_mem_Flash_flash_data+0xf400e45c>
    e800:	9806d07a 	srli	r3,r19,1
    e804:	880497fa 	slli	r2,r17,31
    e808:	980c97fa 	slli	r6,r19,31
    e80c:	882cd07a 	srli	r22,r17,1
    e810:	18a6b03a 	or	r19,r3,r2
    e814:	003f1406 	br	e468 <__alt_mem_Flash_flash_data+0xf400e468>
    e818:	243ff51e 	bne	r4,r16,e7f0 <__alt_mem_Flash_flash_data+0xf400e7f0>
    e81c:	357ff22e 	bgeu	r6,r21,e7e8 <__alt_mem_Flash_flash_data+0xf400e7e8>
    e820:	80c7c83a 	sub	r3,r16,r3
    e824:	1023883a 	mov	r17,r2
    e828:	003f5806 	br	e58c <__alt_mem_Flash_flash_data+0xf400e58c>
    e82c:	1013883a 	mov	r9,r2
    e830:	003f3d06 	br	e528 <__alt_mem_Flash_flash_data+0xf400e528>
    e834:	1023883a 	mov	r17,r2
    e838:	003f2506 	br	e4d0 <__alt_mem_Flash_flash_data+0xf400e4d0>
    e83c:	317fe436 	bltu	r6,r5,e7d0 <__alt_mem_Flash_flash_data+0xf400e7d0>
    e840:	0007883a 	mov	r3,zero
    e844:	003f5106 	br	e58c <__alt_mem_Flash_flash_data+0xf400e58c>
    e848:	1c07883a 	add	r3,r3,r16
    e84c:	993fffc4 	addi	r4,r19,-1
    e850:	1c000a2e 	bgeu	r3,r16,e87c <__divdf3+0x760>
    e854:	2027883a 	mov	r19,r4
    e858:	19ff971e 	bne	r3,r7,e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    e85c:	a8bf961e 	bne	r21,r2,e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    e860:	003f9606 	br	e6bc <__alt_mem_Flash_flash_data+0xf400e6bc>
    e864:	04ffffc4 	movi	r19,-1
    e868:	003f9406 	br	e6bc <__alt_mem_Flash_flash_data+0xf400e6bc>
    e86c:	100d883a 	mov	r6,r2
    e870:	003f6106 	br	e5f8 <__alt_mem_Flash_flash_data+0xf400e5f8>
    e874:	1013883a 	mov	r9,r2
    e878:	003f7906 	br	e660 <__alt_mem_Flash_flash_data+0xf400e660>
    e87c:	19c02636 	bltu	r3,r7,e918 <__divdf3+0x7fc>
    e880:	38c04d26 	beq	r7,r3,e9b8 <__divdf3+0x89c>
    e884:	2027883a 	mov	r19,r4
    e888:	003f8b06 	br	e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    e88c:	e025883a 	mov	r18,fp
    e890:	003f8a06 	br	e6bc <__alt_mem_Flash_flash_data+0xf400e6bc>
    e894:	008007c4 	movi	r2,31
    e898:	14002a16 	blt	r2,r16,e944 <__divdf3+0x828>
    e89c:	a5010784 	addi	r20,r20,1054
    e8a0:	8d04983a 	sll	r2,r17,r20
    e8a4:	9c06d83a 	srl	r3,r19,r16
    e8a8:	9d28983a 	sll	r20,r19,r20
    e8ac:	8c20d83a 	srl	r16,r17,r16
    e8b0:	1886b03a 	or	r3,r3,r2
    e8b4:	a004c03a 	cmpne	r2,r20,zero
    e8b8:	1884b03a 	or	r2,r3,r2
    e8bc:	10c001cc 	andi	r3,r2,7
    e8c0:	18000726 	beq	r3,zero,e8e0 <__divdf3+0x7c4>
    e8c4:	110003cc 	andi	r4,r2,15
    e8c8:	00c00104 	movi	r3,4
    e8cc:	20c00426 	beq	r4,r3,e8e0 <__divdf3+0x7c4>
    e8d0:	10c00104 	addi	r3,r2,4
    e8d4:	1885803a 	cmpltu	r2,r3,r2
    e8d8:	80a1883a 	add	r16,r16,r2
    e8dc:	1805883a 	mov	r2,r3
    e8e0:	80c0202c 	andhi	r3,r16,128
    e8e4:	18002d26 	beq	r3,zero,e99c <__divdf3+0x880>
    e8e8:	9180004c 	andi	r6,r18,1
    e8ec:	01000044 	movi	r4,1
    e8f0:	000b883a 	mov	r5,zero
    e8f4:	0027883a 	mov	r19,zero
    e8f8:	003e6606 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e8fc:	354d883a 	add	r6,r6,r21
    e900:	356d803a 	cmpltu	r22,r6,r21
    e904:	b42d883a 	add	r22,r22,r16
    e908:	b12d883a 	add	r22,r22,r4
    e90c:	8c7fff84 	addi	r17,r17,-2
    e910:	b0c7c83a 	sub	r3,r22,r3
    e914:	003f1d06 	br	e58c <__alt_mem_Flash_flash_data+0xf400e58c>
    e918:	ad4b883a 	add	r5,r21,r21
    e91c:	2d6b803a 	cmpltu	r21,r5,r21
    e920:	ac2b883a 	add	r21,r21,r16
    e924:	1d47883a 	add	r3,r3,r21
    e928:	993fff84 	addi	r4,r19,-2
    e92c:	282b883a 	mov	r21,r5
    e930:	003fc806 	br	e854 <__alt_mem_Flash_flash_data+0xf400e854>
    e934:	103fc41e 	bne	r2,zero,e848 <__alt_mem_Flash_flash_data+0xf400e848>
    e938:	002b883a 	mov	r21,zero
    e93c:	a8bf5e1e 	bne	r21,r2,e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    e940:	003f5e06 	br	e6bc <__alt_mem_Flash_flash_data+0xf400e6bc>
    e944:	00bef884 	movi	r2,-1054
    e948:	1505c83a 	sub	r2,r2,r20
    e94c:	00c00804 	movi	r3,32
    e950:	8884d83a 	srl	r2,r17,r2
    e954:	80c01c26 	beq	r16,r3,e9c8 <__divdf3+0x8ac>
    e958:	a0c10f84 	addi	r3,r20,1086
    e95c:	88c6983a 	sll	r3,r17,r3
    e960:	1cc6b03a 	or	r3,r3,r19
    e964:	1806c03a 	cmpne	r3,r3,zero
    e968:	1884b03a 	or	r2,r3,r2
    e96c:	140001cc 	andi	r16,r2,7
    e970:	8000061e 	bne	r16,zero,e98c <__divdf3+0x870>
    e974:	000b883a 	mov	r5,zero
    e978:	1004d0fa 	srli	r2,r2,3
    e97c:	9180004c 	andi	r6,r18,1
    e980:	0009883a 	mov	r4,zero
    e984:	1426b03a 	or	r19,r2,r16
    e988:	003e4206 	br	e294 <__alt_mem_Flash_flash_data+0xf400e294>
    e98c:	110003cc 	andi	r4,r2,15
    e990:	00c00104 	movi	r3,4
    e994:	0021883a 	mov	r16,zero
    e998:	20ffcd1e 	bne	r4,r3,e8d0 <__alt_mem_Flash_flash_data+0xf400e8d0>
    e99c:	800a927a 	slli	r5,r16,9
    e9a0:	8020977a 	slli	r16,r16,29
    e9a4:	280ad33a 	srli	r5,r5,12
    e9a8:	003ff306 	br	e978 <__alt_mem_Flash_flash_data+0xf400e978>
    e9ac:	317fd336 	bltu	r6,r5,e8fc <__alt_mem_Flash_flash_data+0xf400e8fc>
    e9b0:	1023883a 	mov	r17,r2
    e9b4:	003fa206 	br	e840 <__alt_mem_Flash_flash_data+0xf400e840>
    e9b8:	a8bfd736 	bltu	r21,r2,e918 <__alt_mem_Flash_flash_data+0xf400e918>
    e9bc:	2027883a 	mov	r19,r4
    e9c0:	a8bf3d1e 	bne	r21,r2,e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    e9c4:	003f3d06 	br	e6bc <__alt_mem_Flash_flash_data+0xf400e6bc>
    e9c8:	0007883a 	mov	r3,zero
    e9cc:	003fe406 	br	e960 <__alt_mem_Flash_flash_data+0xf400e960>
    e9d0:	00800434 	movhi	r2,16
    e9d4:	89400234 	orhi	r5,r17,8
    e9d8:	10bfffc4 	addi	r2,r2,-1
    e9dc:	e00d883a 	mov	r6,fp
    e9e0:	288a703a 	and	r5,r5,r2
    e9e4:	003e8506 	br	e3fc <__alt_mem_Flash_flash_data+0xf400e3fc>

0000e9e8 <__eqdf2>:
    e9e8:	2804d53a 	srli	r2,r5,20
    e9ec:	3806d53a 	srli	r3,r7,20
    e9f0:	02000434 	movhi	r8,16
    e9f4:	423fffc4 	addi	r8,r8,-1
    e9f8:	1081ffcc 	andi	r2,r2,2047
    e9fc:	0241ffc4 	movi	r9,2047
    ea00:	2a14703a 	and	r10,r5,r8
    ea04:	18c1ffcc 	andi	r3,r3,2047
    ea08:	3a10703a 	and	r8,r7,r8
    ea0c:	280ad7fa 	srli	r5,r5,31
    ea10:	380ed7fa 	srli	r7,r7,31
    ea14:	12400f26 	beq	r2,r9,ea54 <__eqdf2+0x6c>
    ea18:	0241ffc4 	movi	r9,2047
    ea1c:	1a400326 	beq	r3,r9,ea2c <__eqdf2+0x44>
    ea20:	10c00526 	beq	r2,r3,ea38 <__eqdf2+0x50>
    ea24:	00800044 	movi	r2,1
    ea28:	f800283a 	ret
    ea2c:	4192b03a 	or	r9,r8,r6
    ea30:	483ffc1e 	bne	r9,zero,ea24 <__alt_mem_Flash_flash_data+0xf400ea24>
    ea34:	10fffb1e 	bne	r2,r3,ea24 <__alt_mem_Flash_flash_data+0xf400ea24>
    ea38:	523ffa1e 	bne	r10,r8,ea24 <__alt_mem_Flash_flash_data+0xf400ea24>
    ea3c:	21bff91e 	bne	r4,r6,ea24 <__alt_mem_Flash_flash_data+0xf400ea24>
    ea40:	29c00826 	beq	r5,r7,ea64 <__eqdf2+0x7c>
    ea44:	103ff71e 	bne	r2,zero,ea24 <__alt_mem_Flash_flash_data+0xf400ea24>
    ea48:	5104b03a 	or	r2,r10,r4
    ea4c:	1004c03a 	cmpne	r2,r2,zero
    ea50:	f800283a 	ret
    ea54:	5112b03a 	or	r9,r10,r4
    ea58:	483fef26 	beq	r9,zero,ea18 <__alt_mem_Flash_flash_data+0xf400ea18>
    ea5c:	00800044 	movi	r2,1
    ea60:	f800283a 	ret
    ea64:	0005883a 	mov	r2,zero
    ea68:	f800283a 	ret

0000ea6c <__gedf2>:
    ea6c:	2804d53a 	srli	r2,r5,20
    ea70:	3806d53a 	srli	r3,r7,20
    ea74:	02000434 	movhi	r8,16
    ea78:	423fffc4 	addi	r8,r8,-1
    ea7c:	0241ffc4 	movi	r9,2047
    ea80:	1081ffcc 	andi	r2,r2,2047
    ea84:	2a14703a 	and	r10,r5,r8
    ea88:	1a46703a 	and	r3,r3,r9
    ea8c:	3a10703a 	and	r8,r7,r8
    ea90:	280ad7fa 	srli	r5,r5,31
    ea94:	380ed7fa 	srli	r7,r7,31
    ea98:	12400b26 	beq	r2,r9,eac8 <__gedf2+0x5c>
    ea9c:	1a401626 	beq	r3,r9,eaf8 <__gedf2+0x8c>
    eaa0:	10000c1e 	bne	r2,zero,ead4 <__gedf2+0x68>
    eaa4:	5112b03a 	or	r9,r10,r4
    eaa8:	4813003a 	cmpeq	r9,r9,zero
    eaac:	4817883a 	mov	r11,r9
    eab0:	18000c1e 	bne	r3,zero,eae4 <__gedf2+0x78>
    eab4:	4198b03a 	or	r12,r8,r6
    eab8:	60000a1e 	bne	r12,zero,eae4 <__gedf2+0x78>
    eabc:	48001326 	beq	r9,zero,eb0c <__gedf2+0xa0>
    eac0:	0005883a 	mov	r2,zero
    eac4:	f800283a 	ret
    eac8:	5112b03a 	or	r9,r10,r4
    eacc:	4800191e 	bne	r9,zero,eb34 <__gedf2+0xc8>
    ead0:	18800926 	beq	r3,r2,eaf8 <__gedf2+0x8c>
    ead4:	18000b1e 	bne	r3,zero,eb04 <__gedf2+0x98>
    ead8:	4192b03a 	or	r9,r8,r6
    eadc:	0017883a 	mov	r11,zero
    eae0:	48000a26 	beq	r9,zero,eb0c <__gedf2+0xa0>
    eae4:	39c03fcc 	andi	r7,r7,255
    eae8:	58000726 	beq	r11,zero,eb08 <__gedf2+0x9c>
    eaec:	3800081e 	bne	r7,zero,eb10 <__gedf2+0xa4>
    eaf0:	00bfffc4 	movi	r2,-1
    eaf4:	f800283a 	ret
    eaf8:	4192b03a 	or	r9,r8,r6
    eafc:	48000d1e 	bne	r9,zero,eb34 <__gedf2+0xc8>
    eb00:	103fe826 	beq	r2,zero,eaa4 <__alt_mem_Flash_flash_data+0xf400eaa4>
    eb04:	39c03fcc 	andi	r7,r7,255
    eb08:	29c00326 	beq	r5,r7,eb18 <__gedf2+0xac>
    eb0c:	283ff81e 	bne	r5,zero,eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>
    eb10:	00800044 	movi	r2,1
    eb14:	f800283a 	ret
    eb18:	18bffc16 	blt	r3,r2,eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    eb1c:	10c00316 	blt	r2,r3,eb2c <__gedf2+0xc0>
    eb20:	42bffa36 	bltu	r8,r10,eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    eb24:	52000526 	beq	r10,r8,eb3c <__gedf2+0xd0>
    eb28:	523fe52e 	bgeu	r10,r8,eac0 <__alt_mem_Flash_flash_data+0xf400eac0>
    eb2c:	283ff026 	beq	r5,zero,eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>
    eb30:	003ff706 	br	eb10 <__alt_mem_Flash_flash_data+0xf400eb10>
    eb34:	00bfff84 	movi	r2,-2
    eb38:	f800283a 	ret
    eb3c:	313ff336 	bltu	r6,r4,eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    eb40:	21bfdf2e 	bgeu	r4,r6,eac0 <__alt_mem_Flash_flash_data+0xf400eac0>
    eb44:	283fea26 	beq	r5,zero,eaf0 <__alt_mem_Flash_flash_data+0xf400eaf0>
    eb48:	003ff106 	br	eb10 <__alt_mem_Flash_flash_data+0xf400eb10>

0000eb4c <__ledf2>:
    eb4c:	2804d53a 	srli	r2,r5,20
    eb50:	3810d53a 	srli	r8,r7,20
    eb54:	00c00434 	movhi	r3,16
    eb58:	18ffffc4 	addi	r3,r3,-1
    eb5c:	0241ffc4 	movi	r9,2047
    eb60:	1081ffcc 	andi	r2,r2,2047
    eb64:	28d4703a 	and	r10,r5,r3
    eb68:	4250703a 	and	r8,r8,r9
    eb6c:	38c6703a 	and	r3,r7,r3
    eb70:	280ad7fa 	srli	r5,r5,31
    eb74:	380ed7fa 	srli	r7,r7,31
    eb78:	12400b26 	beq	r2,r9,eba8 <__ledf2+0x5c>
    eb7c:	42401926 	beq	r8,r9,ebe4 <__ledf2+0x98>
    eb80:	10000c1e 	bne	r2,zero,ebb4 <__ledf2+0x68>
    eb84:	5112b03a 	or	r9,r10,r4
    eb88:	4813003a 	cmpeq	r9,r9,zero
    eb8c:	4817883a 	mov	r11,r9
    eb90:	40000f26 	beq	r8,zero,ebd0 <__ledf2+0x84>
    eb94:	39c03fcc 	andi	r7,r7,255
    eb98:	58001826 	beq	r11,zero,ebfc <__ledf2+0xb0>
    eb9c:	38000a1e 	bne	r7,zero,ebc8 <__ledf2+0x7c>
    eba0:	00bfffc4 	movi	r2,-1
    eba4:	f800283a 	ret
    eba8:	5112b03a 	or	r9,r10,r4
    ebac:	48000f1e 	bne	r9,zero,ebec <__ledf2+0xa0>
    ebb0:	40800c26 	beq	r8,r2,ebe4 <__ledf2+0x98>
    ebb4:	4000101e 	bne	r8,zero,ebf8 <__ledf2+0xac>
    ebb8:	1992b03a 	or	r9,r3,r6
    ebbc:	0017883a 	mov	r11,zero
    ebc0:	483ff41e 	bne	r9,zero,eb94 <__alt_mem_Flash_flash_data+0xf400eb94>
    ebc4:	283ff61e 	bne	r5,zero,eba0 <__alt_mem_Flash_flash_data+0xf400eba0>
    ebc8:	00800044 	movi	r2,1
    ebcc:	f800283a 	ret
    ebd0:	1998b03a 	or	r12,r3,r6
    ebd4:	603fef1e 	bne	r12,zero,eb94 <__alt_mem_Flash_flash_data+0xf400eb94>
    ebd8:	483ffa26 	beq	r9,zero,ebc4 <__alt_mem_Flash_flash_data+0xf400ebc4>
    ebdc:	0005883a 	mov	r2,zero
    ebe0:	f800283a 	ret
    ebe4:	1992b03a 	or	r9,r3,r6
    ebe8:	48000226 	beq	r9,zero,ebf4 <__ledf2+0xa8>
    ebec:	00800084 	movi	r2,2
    ebf0:	f800283a 	ret
    ebf4:	103fe326 	beq	r2,zero,eb84 <__alt_mem_Flash_flash_data+0xf400eb84>
    ebf8:	39c03fcc 	andi	r7,r7,255
    ebfc:	29fff11e 	bne	r5,r7,ebc4 <__alt_mem_Flash_flash_data+0xf400ebc4>
    ec00:	40bff016 	blt	r8,r2,ebc4 <__alt_mem_Flash_flash_data+0xf400ebc4>
    ec04:	12000316 	blt	r2,r8,ec14 <__ledf2+0xc8>
    ec08:	1abfee36 	bltu	r3,r10,ebc4 <__alt_mem_Flash_flash_data+0xf400ebc4>
    ec0c:	50c00326 	beq	r10,r3,ec1c <__ledf2+0xd0>
    ec10:	50fff22e 	bgeu	r10,r3,ebdc <__alt_mem_Flash_flash_data+0xf400ebdc>
    ec14:	283fe226 	beq	r5,zero,eba0 <__alt_mem_Flash_flash_data+0xf400eba0>
    ec18:	003feb06 	br	ebc8 <__alt_mem_Flash_flash_data+0xf400ebc8>
    ec1c:	313fe936 	bltu	r6,r4,ebc4 <__alt_mem_Flash_flash_data+0xf400ebc4>
    ec20:	21bfee2e 	bgeu	r4,r6,ebdc <__alt_mem_Flash_flash_data+0xf400ebdc>
    ec24:	283fde26 	beq	r5,zero,eba0 <__alt_mem_Flash_flash_data+0xf400eba0>
    ec28:	003fe706 	br	ebc8 <__alt_mem_Flash_flash_data+0xf400ebc8>

0000ec2c <__muldf3>:
    ec2c:	defff204 	addi	sp,sp,-56
    ec30:	2804d53a 	srli	r2,r5,20
    ec34:	dd800a15 	stw	r22,40(sp)
    ec38:	282cd7fa 	srli	r22,r5,31
    ec3c:	dc000415 	stw	r16,16(sp)
    ec40:	04000434 	movhi	r16,16
    ec44:	df000c15 	stw	fp,48(sp)
    ec48:	dd000815 	stw	r20,32(sp)
    ec4c:	dcc00715 	stw	r19,28(sp)
    ec50:	dc800615 	stw	r18,24(sp)
    ec54:	dc400515 	stw	r17,20(sp)
    ec58:	843fffc4 	addi	r16,r16,-1
    ec5c:	dfc00d15 	stw	ra,52(sp)
    ec60:	ddc00b15 	stw	r23,44(sp)
    ec64:	dd400915 	stw	r21,36(sp)
    ec68:	1501ffcc 	andi	r20,r2,2047
    ec6c:	2023883a 	mov	r17,r4
    ec70:	2025883a 	mov	r18,r4
    ec74:	2c20703a 	and	r16,r5,r16
    ec78:	b027883a 	mov	r19,r22
    ec7c:	b7003fcc 	andi	fp,r22,255
    ec80:	a0005926 	beq	r20,zero,ede8 <__muldf3+0x1bc>
    ec84:	0081ffc4 	movi	r2,2047
    ec88:	a0803426 	beq	r20,r2,ed5c <__muldf3+0x130>
    ec8c:	84000434 	orhi	r16,r16,16
    ec90:	2004d77a 	srli	r2,r4,29
    ec94:	802090fa 	slli	r16,r16,3
    ec98:	202490fa 	slli	r18,r4,3
    ec9c:	a53f0044 	addi	r20,r20,-1023
    eca0:	80a0b03a 	or	r16,r16,r2
    eca4:	002b883a 	mov	r21,zero
    eca8:	0015883a 	mov	r10,zero
    ecac:	3812d53a 	srli	r9,r7,20
    ecb0:	3806d7fa 	srli	r3,r7,31
    ecb4:	02000434 	movhi	r8,16
    ecb8:	423fffc4 	addi	r8,r8,-1
    ecbc:	4941ffcc 	andi	r5,r9,2047
    ecc0:	302f883a 	mov	r23,r6
    ecc4:	3a22703a 	and	r17,r7,r8
    ecc8:	1ac03fcc 	andi	r11,r3,255
    eccc:	28006226 	beq	r5,zero,ee58 <__muldf3+0x22c>
    ecd0:	0081ffc4 	movi	r2,2047
    ecd4:	28805a26 	beq	r5,r2,ee40 <__muldf3+0x214>
    ecd8:	8a000434 	orhi	r8,r17,16
    ecdc:	3004d77a 	srli	r2,r6,29
    ece0:	401090fa 	slli	r8,r8,3
    ece4:	302e90fa 	slli	r23,r6,3
    ece8:	297f0044 	addi	r5,r5,-1023
    ecec:	40a2b03a 	or	r17,r8,r2
    ecf0:	0013883a 	mov	r9,zero
    ecf4:	4d4cb03a 	or	r6,r9,r21
    ecf8:	300c90ba 	slli	r6,r6,2
    ecfc:	02000074 	movhi	r8,1
    ed00:	423b4704 	addi	r8,r8,-4836
    ed04:	320d883a 	add	r6,r6,r8
    ed08:	31800017 	ldw	r6,0(r6)
    ed0c:	a14b883a 	add	r5,r20,r5
    ed10:	1dacf03a 	xor	r22,r3,r22
    ed14:	2b000044 	addi	r12,r5,1
    ed18:	3000683a 	jmp	r6
    ed1c:	0000ef58 	cmpnei	zero,zero,957
    ed20:	0000ef44 	movi	zero,957
    ed24:	0000ef44 	movi	zero,957
    ed28:	0000ef30 	cmpltui	zero,zero,956
    ed2c:	0000ed78 	rdprs	zero,zero,949
    ed30:	0000ed78 	rdprs	zero,zero,949
    ed34:	0000ef18 	cmpnei	zero,zero,956
    ed38:	0000ef30 	cmpltui	zero,zero,956
    ed3c:	0000ed78 	rdprs	zero,zero,949
    ed40:	0000ef18 	cmpnei	zero,zero,956
    ed44:	0000ed78 	rdprs	zero,zero,949
    ed48:	0000ef30 	cmpltui	zero,zero,956
    ed4c:	0000ed7c 	xorhi	zero,zero,949
    ed50:	0000ed7c 	xorhi	zero,zero,949
    ed54:	0000ed7c 	xorhi	zero,zero,949
    ed58:	0000f154 	movui	zero,965
    ed5c:	8104b03a 	or	r2,r16,r4
    ed60:	10006a1e 	bne	r2,zero,ef0c <__muldf3+0x2e0>
    ed64:	05400204 	movi	r21,8
    ed68:	0021883a 	mov	r16,zero
    ed6c:	0025883a 	mov	r18,zero
    ed70:	02800084 	movi	r10,2
    ed74:	003fcd06 	br	ecac <__alt_mem_Flash_flash_data+0xf400ecac>
    ed78:	b039883a 	mov	fp,r22
    ed7c:	00800084 	movi	r2,2
    ed80:	50804e1e 	bne	r10,r2,eebc <__muldf3+0x290>
    ed84:	e4c0004c 	andi	r19,fp,1
    ed88:	0101ffc4 	movi	r4,2047
    ed8c:	0021883a 	mov	r16,zero
    ed90:	0025883a 	mov	r18,zero
    ed94:	2008953a 	slli	r4,r4,20
    ed98:	98c03fcc 	andi	r3,r19,255
    ed9c:	01400434 	movhi	r5,16
    eda0:	297fffc4 	addi	r5,r5,-1
    eda4:	180697fa 	slli	r3,r3,31
    eda8:	8160703a 	and	r16,r16,r5
    edac:	8120b03a 	or	r16,r16,r4
    edb0:	80c6b03a 	or	r3,r16,r3
    edb4:	9005883a 	mov	r2,r18
    edb8:	dfc00d17 	ldw	ra,52(sp)
    edbc:	df000c17 	ldw	fp,48(sp)
    edc0:	ddc00b17 	ldw	r23,44(sp)
    edc4:	dd800a17 	ldw	r22,40(sp)
    edc8:	dd400917 	ldw	r21,36(sp)
    edcc:	dd000817 	ldw	r20,32(sp)
    edd0:	dcc00717 	ldw	r19,28(sp)
    edd4:	dc800617 	ldw	r18,24(sp)
    edd8:	dc400517 	ldw	r17,20(sp)
    eddc:	dc000417 	ldw	r16,16(sp)
    ede0:	dec00e04 	addi	sp,sp,56
    ede4:	f800283a 	ret
    ede8:	8104b03a 	or	r2,r16,r4
    edec:	10004226 	beq	r2,zero,eef8 <__muldf3+0x2cc>
    edf0:	8000f926 	beq	r16,zero,f1d8 <__muldf3+0x5ac>
    edf4:	8009883a 	mov	r4,r16
    edf8:	d9800315 	stw	r6,12(sp)
    edfc:	d9c00015 	stw	r7,0(sp)
    ee00:	000fe1c0 	call	fe1c <__clzsi2>
    ee04:	d9800317 	ldw	r6,12(sp)
    ee08:	d9c00017 	ldw	r7,0(sp)
    ee0c:	1007883a 	mov	r3,r2
    ee10:	01000a04 	movi	r4,40
    ee14:	18bffe04 	addi	r2,r3,-8
    ee18:	20c9c83a 	sub	r4,r4,r3
    ee1c:	80a0983a 	sll	r16,r16,r2
    ee20:	8908d83a 	srl	r4,r17,r4
    ee24:	88a4983a 	sll	r18,r17,r2
    ee28:	2420b03a 	or	r16,r4,r16
    ee2c:	017f0344 	movi	r5,-1011
    ee30:	28e9c83a 	sub	r20,r5,r3
    ee34:	002b883a 	mov	r21,zero
    ee38:	0015883a 	mov	r10,zero
    ee3c:	003f9b06 	br	ecac <__alt_mem_Flash_flash_data+0xf400ecac>
    ee40:	8984b03a 	or	r2,r17,r6
    ee44:	10002a1e 	bne	r2,zero,eef0 <__muldf3+0x2c4>
    ee48:	0023883a 	mov	r17,zero
    ee4c:	002f883a 	mov	r23,zero
    ee50:	02400084 	movi	r9,2
    ee54:	003fa706 	br	ecf4 <__alt_mem_Flash_flash_data+0xf400ecf4>
    ee58:	8984b03a 	or	r2,r17,r6
    ee5c:	10002026 	beq	r2,zero,eee0 <__muldf3+0x2b4>
    ee60:	8800cc26 	beq	r17,zero,f194 <__muldf3+0x568>
    ee64:	8809883a 	mov	r4,r17
    ee68:	d8c00215 	stw	r3,8(sp)
    ee6c:	d9800315 	stw	r6,12(sp)
    ee70:	da800015 	stw	r10,0(sp)
    ee74:	dac00115 	stw	r11,4(sp)
    ee78:	000fe1c0 	call	fe1c <__clzsi2>
    ee7c:	d8c00217 	ldw	r3,8(sp)
    ee80:	d9800317 	ldw	r6,12(sp)
    ee84:	da800017 	ldw	r10,0(sp)
    ee88:	dac00117 	ldw	r11,4(sp)
    ee8c:	1009883a 	mov	r4,r2
    ee90:	01400a04 	movi	r5,40
    ee94:	25fffe04 	addi	r23,r4,-8
    ee98:	290bc83a 	sub	r5,r5,r4
    ee9c:	8dd0983a 	sll	r8,r17,r23
    eea0:	314ad83a 	srl	r5,r6,r5
    eea4:	35ee983a 	sll	r23,r6,r23
    eea8:	2a22b03a 	or	r17,r5,r8
    eeac:	017f0344 	movi	r5,-1011
    eeb0:	290bc83a 	sub	r5,r5,r4
    eeb4:	0013883a 	mov	r9,zero
    eeb8:	003f8e06 	br	ecf4 <__alt_mem_Flash_flash_data+0xf400ecf4>
    eebc:	008000c4 	movi	r2,3
    eec0:	50811d26 	beq	r10,r2,f338 <__muldf3+0x70c>
    eec4:	00800044 	movi	r2,1
    eec8:	5080e01e 	bne	r10,r2,f24c <__muldf3+0x620>
    eecc:	e0a6703a 	and	r19,fp,r2
    eed0:	0009883a 	mov	r4,zero
    eed4:	0021883a 	mov	r16,zero
    eed8:	0025883a 	mov	r18,zero
    eedc:	003fad06 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    eee0:	0023883a 	mov	r17,zero
    eee4:	002f883a 	mov	r23,zero
    eee8:	02400044 	movi	r9,1
    eeec:	003f8106 	br	ecf4 <__alt_mem_Flash_flash_data+0xf400ecf4>
    eef0:	024000c4 	movi	r9,3
    eef4:	003f7f06 	br	ecf4 <__alt_mem_Flash_flash_data+0xf400ecf4>
    eef8:	05400104 	movi	r21,4
    eefc:	0021883a 	mov	r16,zero
    ef00:	0025883a 	mov	r18,zero
    ef04:	02800044 	movi	r10,1
    ef08:	003f6806 	br	ecac <__alt_mem_Flash_flash_data+0xf400ecac>
    ef0c:	05400304 	movi	r21,12
    ef10:	028000c4 	movi	r10,3
    ef14:	003f6506 	br	ecac <__alt_mem_Flash_flash_data+0xf400ecac>
    ef18:	04000434 	movhi	r16,16
    ef1c:	0027883a 	mov	r19,zero
    ef20:	843fffc4 	addi	r16,r16,-1
    ef24:	04bfffc4 	movi	r18,-1
    ef28:	0101ffc4 	movi	r4,2047
    ef2c:	003f9906 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    ef30:	8821883a 	mov	r16,r17
    ef34:	b825883a 	mov	r18,r23
    ef38:	5839883a 	mov	fp,r11
    ef3c:	4815883a 	mov	r10,r9
    ef40:	003f8e06 	br	ed7c <__alt_mem_Flash_flash_data+0xf400ed7c>
    ef44:	8821883a 	mov	r16,r17
    ef48:	b825883a 	mov	r18,r23
    ef4c:	b039883a 	mov	fp,r22
    ef50:	4815883a 	mov	r10,r9
    ef54:	003f8906 	br	ed7c <__alt_mem_Flash_flash_data+0xf400ed7c>
    ef58:	b80cd43a 	srli	r6,r23,16
    ef5c:	9006d43a 	srli	r3,r18,16
    ef60:	90bfffcc 	andi	r2,r18,65535
    ef64:	bdffffcc 	andi	r23,r23,65535
    ef68:	b891383a 	mul	r8,r23,r2
    ef6c:	b8c9383a 	mul	r4,r23,r3
    ef70:	309b383a 	mul	r13,r6,r2
    ef74:	400ed43a 	srli	r7,r8,16
    ef78:	30df383a 	mul	r15,r6,r3
    ef7c:	235b883a 	add	r13,r4,r13
    ef80:	69db883a 	add	r13,r13,r7
    ef84:	6900022e 	bgeu	r13,r4,ef90 <__muldf3+0x364>
    ef88:	01000074 	movhi	r4,1
    ef8c:	791f883a 	add	r15,r15,r4
    ef90:	8828d43a 	srli	r20,r17,16
    ef94:	8c7fffcc 	andi	r17,r17,65535
    ef98:	888f383a 	mul	r7,r17,r2
    ef9c:	88d3383a 	mul	r9,r17,r3
    efa0:	a0a5383a 	mul	r18,r20,r2
    efa4:	3816d43a 	srli	r11,r7,16
    efa8:	6814943a 	slli	r10,r13,16
    efac:	4ca5883a 	add	r18,r9,r18
    efb0:	423fffcc 	andi	r8,r8,65535
    efb4:	92e5883a 	add	r18,r18,r11
    efb8:	6808d43a 	srli	r4,r13,16
    efbc:	5215883a 	add	r10,r10,r8
    efc0:	a0c7383a 	mul	r3,r20,r3
    efc4:	9240022e 	bgeu	r18,r9,efd0 <__muldf3+0x3a4>
    efc8:	00800074 	movhi	r2,1
    efcc:	1887883a 	add	r3,r3,r2
    efd0:	802ad43a 	srli	r21,r16,16
    efd4:	80bfffcc 	andi	r2,r16,65535
    efd8:	b893383a 	mul	r9,r23,r2
    efdc:	3091383a 	mul	r8,r6,r2
    efe0:	bd6f383a 	mul	r23,r23,r21
    efe4:	9026943a 	slli	r19,r18,16
    efe8:	481ad43a 	srli	r13,r9,16
    efec:	9024d43a 	srli	r18,r18,16
    eff0:	39ffffcc 	andi	r7,r7,65535
    eff4:	ba11883a 	add	r8,r23,r8
    eff8:	99e7883a 	add	r19,r19,r7
    effc:	4351883a 	add	r8,r8,r13
    f000:	1c97883a 	add	r11,r3,r18
    f004:	354d383a 	mul	r6,r6,r21
    f008:	9925883a 	add	r18,r19,r4
    f00c:	45c0022e 	bgeu	r8,r23,f018 <__muldf3+0x3ec>
    f010:	00c00074 	movhi	r3,1
    f014:	30cd883a 	add	r6,r6,r3
    f018:	8889383a 	mul	r4,r17,r2
    f01c:	8d63383a 	mul	r17,r17,r21
    f020:	a085383a 	mul	r2,r20,r2
    f024:	200ed43a 	srli	r7,r4,16
    f028:	401cd43a 	srli	r14,r8,16
    f02c:	401a943a 	slli	r13,r8,16
    f030:	8885883a 	add	r2,r17,r2
    f034:	4a3fffcc 	andi	r8,r9,65535
    f038:	11c5883a 	add	r2,r2,r7
    f03c:	339d883a 	add	r14,r6,r14
    f040:	6a11883a 	add	r8,r13,r8
    f044:	a561383a 	mul	r16,r20,r21
    f048:	1440022e 	bgeu	r2,r17,f054 <__muldf3+0x428>
    f04c:	00c00074 	movhi	r3,1
    f050:	80e1883a 	add	r16,r16,r3
    f054:	1006943a 	slli	r3,r2,16
    f058:	213fffcc 	andi	r4,r4,65535
    f05c:	93db883a 	add	r13,r18,r15
    f060:	1909883a 	add	r4,r3,r4
    f064:	22c7883a 	add	r3,r4,r11
    f068:	6cd3803a 	cmpltu	r9,r13,r19
    f06c:	6a09883a 	add	r4,r13,r8
    f070:	1a5b883a 	add	r13,r3,r9
    f074:	2211803a 	cmpltu	r8,r4,r8
    f078:	734d883a 	add	r6,r14,r13
    f07c:	100ed43a 	srli	r7,r2,16
    f080:	6a53803a 	cmpltu	r9,r13,r9
    f084:	3205883a 	add	r2,r6,r8
    f088:	1ac7803a 	cmpltu	r3,r3,r11
    f08c:	1211803a 	cmpltu	r8,r2,r8
    f090:	48c6b03a 	or	r3,r9,r3
    f094:	338d803a 	cmpltu	r6,r6,r14
    f098:	19c7883a 	add	r3,r3,r7
    f09c:	418cb03a 	or	r6,r8,r6
    f0a0:	1987883a 	add	r3,r3,r6
    f0a4:	2024927a 	slli	r18,r4,9
    f0a8:	1c07883a 	add	r3,r3,r16
    f0ac:	1806927a 	slli	r3,r3,9
    f0b0:	1020d5fa 	srli	r16,r2,23
    f0b4:	2008d5fa 	srli	r4,r4,23
    f0b8:	9294b03a 	or	r10,r18,r10
    f0bc:	1004927a 	slli	r2,r2,9
    f0c0:	5024c03a 	cmpne	r18,r10,zero
    f0c4:	1c20b03a 	or	r16,r3,r16
    f0c8:	9108b03a 	or	r4,r18,r4
    f0cc:	80c0402c 	andhi	r3,r16,256
    f0d0:	20a4b03a 	or	r18,r4,r2
    f0d4:	18000726 	beq	r3,zero,f0f4 <__muldf3+0x4c8>
    f0d8:	9006d07a 	srli	r3,r18,1
    f0dc:	800897fa 	slli	r4,r16,31
    f0e0:	9080004c 	andi	r2,r18,1
    f0e4:	8020d07a 	srli	r16,r16,1
    f0e8:	10c4b03a 	or	r2,r2,r3
    f0ec:	1124b03a 	or	r18,r2,r4
    f0f0:	600b883a 	mov	r5,r12
    f0f4:	2900ffc4 	addi	r4,r5,1023
    f0f8:	01004b0e 	bge	zero,r4,f228 <__muldf3+0x5fc>
    f0fc:	908001cc 	andi	r2,r18,7
    f100:	10000726 	beq	r2,zero,f120 <__muldf3+0x4f4>
    f104:	90c003cc 	andi	r3,r18,15
    f108:	00800104 	movi	r2,4
    f10c:	18800426 	beq	r3,r2,f120 <__muldf3+0x4f4>
    f110:	9087883a 	add	r3,r18,r2
    f114:	1c85803a 	cmpltu	r2,r3,r18
    f118:	80a1883a 	add	r16,r16,r2
    f11c:	1825883a 	mov	r18,r3
    f120:	8080402c 	andhi	r2,r16,256
    f124:	10000426 	beq	r2,zero,f138 <__muldf3+0x50c>
    f128:	00bfc034 	movhi	r2,65280
    f12c:	10bfffc4 	addi	r2,r2,-1
    f130:	29010004 	addi	r4,r5,1024
    f134:	80a0703a 	and	r16,r16,r2
    f138:	0081ff84 	movi	r2,2046
    f13c:	1100320e 	bge	r2,r4,f208 <__muldf3+0x5dc>
    f140:	b4c0004c 	andi	r19,r22,1
    f144:	0101ffc4 	movi	r4,2047
    f148:	0021883a 	mov	r16,zero
    f14c:	0025883a 	mov	r18,zero
    f150:	003f1006 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    f154:	8080022c 	andhi	r2,r16,8
    f158:	10000926 	beq	r2,zero,f180 <__muldf3+0x554>
    f15c:	8880022c 	andhi	r2,r17,8
    f160:	1000071e 	bne	r2,zero,f180 <__muldf3+0x554>
    f164:	00800434 	movhi	r2,16
    f168:	8c000234 	orhi	r16,r17,8
    f16c:	10bfffc4 	addi	r2,r2,-1
    f170:	1827883a 	mov	r19,r3
    f174:	80a0703a 	and	r16,r16,r2
    f178:	b825883a 	mov	r18,r23
    f17c:	003f6a06 	br	ef28 <__alt_mem_Flash_flash_data+0xf400ef28>
    f180:	00800434 	movhi	r2,16
    f184:	84000234 	orhi	r16,r16,8
    f188:	10bfffc4 	addi	r2,r2,-1
    f18c:	80a0703a 	and	r16,r16,r2
    f190:	003f6506 	br	ef28 <__alt_mem_Flash_flash_data+0xf400ef28>
    f194:	3009883a 	mov	r4,r6
    f198:	d8c00215 	stw	r3,8(sp)
    f19c:	d9800315 	stw	r6,12(sp)
    f1a0:	da800015 	stw	r10,0(sp)
    f1a4:	dac00115 	stw	r11,4(sp)
    f1a8:	000fe1c0 	call	fe1c <__clzsi2>
    f1ac:	11000804 	addi	r4,r2,32
    f1b0:	014009c4 	movi	r5,39
    f1b4:	d8c00217 	ldw	r3,8(sp)
    f1b8:	d9800317 	ldw	r6,12(sp)
    f1bc:	da800017 	ldw	r10,0(sp)
    f1c0:	dac00117 	ldw	r11,4(sp)
    f1c4:	293f320e 	bge	r5,r4,ee90 <__alt_mem_Flash_flash_data+0xf400ee90>
    f1c8:	10bffe04 	addi	r2,r2,-8
    f1cc:	b8a2983a 	sll	r17,r23,r2
    f1d0:	002f883a 	mov	r23,zero
    f1d4:	003f3506 	br	eeac <__alt_mem_Flash_flash_data+0xf400eeac>
    f1d8:	d9800315 	stw	r6,12(sp)
    f1dc:	d9c00015 	stw	r7,0(sp)
    f1e0:	000fe1c0 	call	fe1c <__clzsi2>
    f1e4:	10c00804 	addi	r3,r2,32
    f1e8:	010009c4 	movi	r4,39
    f1ec:	d9800317 	ldw	r6,12(sp)
    f1f0:	d9c00017 	ldw	r7,0(sp)
    f1f4:	20ff060e 	bge	r4,r3,ee10 <__alt_mem_Flash_flash_data+0xf400ee10>
    f1f8:	10bffe04 	addi	r2,r2,-8
    f1fc:	88a0983a 	sll	r16,r17,r2
    f200:	0025883a 	mov	r18,zero
    f204:	003f0906 	br	ee2c <__alt_mem_Flash_flash_data+0xf400ee2c>
    f208:	9004d0fa 	srli	r2,r18,3
    f20c:	8024977a 	slli	r18,r16,29
    f210:	8020927a 	slli	r16,r16,9
    f214:	2101ffcc 	andi	r4,r4,2047
    f218:	90a4b03a 	or	r18,r18,r2
    f21c:	8020d33a 	srli	r16,r16,12
    f220:	b4c0004c 	andi	r19,r22,1
    f224:	003edb06 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    f228:	00ff0084 	movi	r3,-1022
    f22c:	1947c83a 	sub	r3,r3,r5
    f230:	00800e04 	movi	r2,56
    f234:	10c0080e 	bge	r2,r3,f258 <__muldf3+0x62c>
    f238:	b4c0004c 	andi	r19,r22,1
    f23c:	0009883a 	mov	r4,zero
    f240:	0021883a 	mov	r16,zero
    f244:	0025883a 	mov	r18,zero
    f248:	003ed206 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    f24c:	600b883a 	mov	r5,r12
    f250:	e02d883a 	mov	r22,fp
    f254:	003fa706 	br	f0f4 <__alt_mem_Flash_flash_data+0xf400f0f4>
    f258:	008007c4 	movi	r2,31
    f25c:	10c01816 	blt	r2,r3,f2c0 <__muldf3+0x694>
    f260:	29410784 	addi	r5,r5,1054
    f264:	8144983a 	sll	r2,r16,r5
    f268:	90c8d83a 	srl	r4,r18,r3
    f26c:	914a983a 	sll	r5,r18,r5
    f270:	80c6d83a 	srl	r3,r16,r3
    f274:	2088b03a 	or	r4,r4,r2
    f278:	2804c03a 	cmpne	r2,r5,zero
    f27c:	2084b03a 	or	r2,r4,r2
    f280:	110001cc 	andi	r4,r2,7
    f284:	20000726 	beq	r4,zero,f2a4 <__muldf3+0x678>
    f288:	114003cc 	andi	r5,r2,15
    f28c:	01000104 	movi	r4,4
    f290:	29000426 	beq	r5,r4,f2a4 <__muldf3+0x678>
    f294:	11000104 	addi	r4,r2,4
    f298:	2085803a 	cmpltu	r2,r4,r2
    f29c:	1887883a 	add	r3,r3,r2
    f2a0:	2005883a 	mov	r2,r4
    f2a4:	1900202c 	andhi	r4,r3,128
    f2a8:	20001826 	beq	r4,zero,f30c <__muldf3+0x6e0>
    f2ac:	b4c0004c 	andi	r19,r22,1
    f2b0:	01000044 	movi	r4,1
    f2b4:	0021883a 	mov	r16,zero
    f2b8:	0025883a 	mov	r18,zero
    f2bc:	003eb506 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    f2c0:	00bef884 	movi	r2,-1054
    f2c4:	1145c83a 	sub	r2,r2,r5
    f2c8:	8088d83a 	srl	r4,r16,r2
    f2cc:	00800804 	movi	r2,32
    f2d0:	18801726 	beq	r3,r2,f330 <__muldf3+0x704>
    f2d4:	28810f84 	addi	r2,r5,1086
    f2d8:	8084983a 	sll	r2,r16,r2
    f2dc:	1484b03a 	or	r2,r2,r18
    f2e0:	1004c03a 	cmpne	r2,r2,zero
    f2e4:	1104b03a 	or	r2,r2,r4
    f2e8:	10c001cc 	andi	r3,r2,7
    f2ec:	18000b1e 	bne	r3,zero,f31c <__muldf3+0x6f0>
    f2f0:	0021883a 	mov	r16,zero
    f2f4:	1004d0fa 	srli	r2,r2,3
    f2f8:	b4c0004c 	andi	r19,r22,1
    f2fc:	0009883a 	mov	r4,zero
    f300:	10e4b03a 	or	r18,r2,r3
    f304:	003ea306 	br	ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
    f308:	0007883a 	mov	r3,zero
    f30c:	1820927a 	slli	r16,r3,9
    f310:	1806977a 	slli	r3,r3,29
    f314:	8020d33a 	srli	r16,r16,12
    f318:	003ff606 	br	f2f4 <__alt_mem_Flash_flash_data+0xf400f2f4>
    f31c:	110003cc 	andi	r4,r2,15
    f320:	00c00104 	movi	r3,4
    f324:	20fff826 	beq	r4,r3,f308 <__alt_mem_Flash_flash_data+0xf400f308>
    f328:	0007883a 	mov	r3,zero
    f32c:	003fd906 	br	f294 <__alt_mem_Flash_flash_data+0xf400f294>
    f330:	0005883a 	mov	r2,zero
    f334:	003fe906 	br	f2dc <__alt_mem_Flash_flash_data+0xf400f2dc>
    f338:	00800434 	movhi	r2,16
    f33c:	84000234 	orhi	r16,r16,8
    f340:	10bfffc4 	addi	r2,r2,-1
    f344:	e4c0004c 	andi	r19,fp,1
    f348:	80a0703a 	and	r16,r16,r2
    f34c:	003ef606 	br	ef28 <__alt_mem_Flash_flash_data+0xf400ef28>

0000f350 <__subdf3>:
    f350:	00c00434 	movhi	r3,16
    f354:	18ffffc4 	addi	r3,r3,-1
    f358:	defffb04 	addi	sp,sp,-20
    f35c:	28d2703a 	and	r9,r5,r3
    f360:	3814d53a 	srli	r10,r7,20
    f364:	38c6703a 	and	r3,r7,r3
    f368:	3004d77a 	srli	r2,r6,29
    f36c:	dc800215 	stw	r18,8(sp)
    f370:	dc000015 	stw	r16,0(sp)
    f374:	2824d7fa 	srli	r18,r5,31
    f378:	2820d53a 	srli	r16,r5,20
    f37c:	481290fa 	slli	r9,r9,3
    f380:	200ad77a 	srli	r5,r4,29
    f384:	180690fa 	slli	r3,r3,3
    f388:	dc400115 	stw	r17,4(sp)
    f38c:	dfc00415 	stw	ra,16(sp)
    f390:	202290fa 	slli	r17,r4,3
    f394:	dcc00315 	stw	r19,12(sp)
    f398:	5281ffcc 	andi	r10,r10,2047
    f39c:	0101ffc4 	movi	r4,2047
    f3a0:	9011883a 	mov	r8,r18
    f3a4:	8401ffcc 	andi	r16,r16,2047
    f3a8:	94803fcc 	andi	r18,r18,255
    f3ac:	494ab03a 	or	r5,r9,r5
    f3b0:	380ed7fa 	srli	r7,r7,31
    f3b4:	1886b03a 	or	r3,r3,r2
    f3b8:	300c90fa 	slli	r6,r6,3
    f3bc:	51009026 	beq	r10,r4,f600 <__subdf3+0x2b0>
    f3c0:	39c0005c 	xori	r7,r7,1
    f3c4:	8285c83a 	sub	r2,r16,r10
    f3c8:	91c06f26 	beq	r18,r7,f588 <__subdf3+0x238>
    f3cc:	0080b10e 	bge	zero,r2,f694 <__subdf3+0x344>
    f3d0:	50002a1e 	bne	r10,zero,f47c <__subdf3+0x12c>
    f3d4:	1988b03a 	or	r4,r3,r6
    f3d8:	2000941e 	bne	r4,zero,f62c <__subdf3+0x2dc>
    f3dc:	888001cc 	andi	r2,r17,7
    f3e0:	10005b26 	beq	r2,zero,f550 <__subdf3+0x200>
    f3e4:	88c003cc 	andi	r3,r17,15
    f3e8:	00800104 	movi	r2,4
    f3ec:	18805826 	beq	r3,r2,f550 <__subdf3+0x200>
    f3f0:	88c00104 	addi	r3,r17,4
    f3f4:	1c63803a 	cmpltu	r17,r3,r17
    f3f8:	2c4b883a 	add	r5,r5,r17
    f3fc:	2880202c 	andhi	r2,r5,128
    f400:	9200004c 	andi	r8,r18,1
    f404:	1823883a 	mov	r17,r3
    f408:	10005426 	beq	r2,zero,f55c <__subdf3+0x20c>
    f40c:	84000044 	addi	r16,r16,1
    f410:	0081ffc4 	movi	r2,2047
    f414:	8080bf26 	beq	r16,r2,f714 <__subdf3+0x3c4>
    f418:	013fe034 	movhi	r4,65408
    f41c:	213fffc4 	addi	r4,r4,-1
    f420:	290a703a 	and	r5,r5,r4
    f424:	2804977a 	slli	r2,r5,29
    f428:	280a927a 	slli	r5,r5,9
    f42c:	8822d0fa 	srli	r17,r17,3
    f430:	8401ffcc 	andi	r16,r16,2047
    f434:	2808d33a 	srli	r4,r5,12
    f438:	1444b03a 	or	r2,r2,r17
    f43c:	8401ffcc 	andi	r16,r16,2047
    f440:	800a953a 	slli	r5,r16,20
    f444:	40c03fcc 	andi	r3,r8,255
    f448:	04000434 	movhi	r16,16
    f44c:	180697fa 	slli	r3,r3,31
    f450:	843fffc4 	addi	r16,r16,-1
    f454:	2420703a 	and	r16,r4,r16
    f458:	8160b03a 	or	r16,r16,r5
    f45c:	80c6b03a 	or	r3,r16,r3
    f460:	dfc00417 	ldw	ra,16(sp)
    f464:	dcc00317 	ldw	r19,12(sp)
    f468:	dc800217 	ldw	r18,8(sp)
    f46c:	dc400117 	ldw	r17,4(sp)
    f470:	dc000017 	ldw	r16,0(sp)
    f474:	dec00504 	addi	sp,sp,20
    f478:	f800283a 	ret
    f47c:	0101ffc4 	movi	r4,2047
    f480:	813fd626 	beq	r16,r4,f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f484:	18c02034 	orhi	r3,r3,128
    f488:	01000e04 	movi	r4,56
    f48c:	2080a416 	blt	r4,r2,f720 <__subdf3+0x3d0>
    f490:	010007c4 	movi	r4,31
    f494:	2080c716 	blt	r4,r2,f7b4 <__subdf3+0x464>
    f498:	01000804 	movi	r4,32
    f49c:	2089c83a 	sub	r4,r4,r2
    f4a0:	1910983a 	sll	r8,r3,r4
    f4a4:	308ed83a 	srl	r7,r6,r2
    f4a8:	3108983a 	sll	r4,r6,r4
    f4ac:	1884d83a 	srl	r2,r3,r2
    f4b0:	41ccb03a 	or	r6,r8,r7
    f4b4:	2008c03a 	cmpne	r4,r4,zero
    f4b8:	310cb03a 	or	r6,r6,r4
    f4bc:	898dc83a 	sub	r6,r17,r6
    f4c0:	89a3803a 	cmpltu	r17,r17,r6
    f4c4:	288bc83a 	sub	r5,r5,r2
    f4c8:	2c4bc83a 	sub	r5,r5,r17
    f4cc:	3023883a 	mov	r17,r6
    f4d0:	2880202c 	andhi	r2,r5,128
    f4d4:	10006b26 	beq	r2,zero,f684 <__subdf3+0x334>
    f4d8:	04c02034 	movhi	r19,128
    f4dc:	9cffffc4 	addi	r19,r19,-1
    f4e0:	2ce6703a 	and	r19,r5,r19
    f4e4:	98007c26 	beq	r19,zero,f6d8 <__subdf3+0x388>
    f4e8:	9809883a 	mov	r4,r19
    f4ec:	000fe1c0 	call	fe1c <__clzsi2>
    f4f0:	10fffe04 	addi	r3,r2,-8
    f4f4:	010007c4 	movi	r4,31
    f4f8:	20c07d16 	blt	r4,r3,f6f0 <__subdf3+0x3a0>
    f4fc:	01400a04 	movi	r5,40
    f500:	2885c83a 	sub	r2,r5,r2
    f504:	888ad83a 	srl	r5,r17,r2
    f508:	98e6983a 	sll	r19,r19,r3
    f50c:	88e2983a 	sll	r17,r17,r3
    f510:	2ce6b03a 	or	r19,r5,r19
    f514:	1c007a16 	blt	r3,r16,f700 <__subdf3+0x3b0>
    f518:	1c21c83a 	sub	r16,r3,r16
    f51c:	81400044 	addi	r5,r16,1
    f520:	00c007c4 	movi	r3,31
    f524:	19409616 	blt	r3,r5,f780 <__subdf3+0x430>
    f528:	1c21c83a 	sub	r16,r3,r16
    f52c:	8c08983a 	sll	r4,r17,r16
    f530:	8946d83a 	srl	r3,r17,r5
    f534:	9c20983a 	sll	r16,r19,r16
    f538:	2008c03a 	cmpne	r4,r4,zero
    f53c:	994ad83a 	srl	r5,r19,r5
    f540:	1c06b03a 	or	r3,r3,r16
    f544:	1922b03a 	or	r17,r3,r4
    f548:	0021883a 	mov	r16,zero
    f54c:	003fa306 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f550:	2880202c 	andhi	r2,r5,128
    f554:	9200004c 	andi	r8,r18,1
    f558:	103fac1e 	bne	r2,zero,f40c <__alt_mem_Flash_flash_data+0xf400f40c>
    f55c:	2804977a 	slli	r2,r5,29
    f560:	8822d0fa 	srli	r17,r17,3
    f564:	00c1ffc4 	movi	r3,2047
    f568:	280ad0fa 	srli	r5,r5,3
    f56c:	1444b03a 	or	r2,r2,r17
    f570:	80c02726 	beq	r16,r3,f610 <__subdf3+0x2c0>
    f574:	01000434 	movhi	r4,16
    f578:	213fffc4 	addi	r4,r4,-1
    f57c:	80e0703a 	and	r16,r16,r3
    f580:	2908703a 	and	r4,r5,r4
    f584:	003fad06 	br	f43c <__alt_mem_Flash_flash_data+0xf400f43c>
    f588:	0080690e 	bge	zero,r2,f730 <__subdf3+0x3e0>
    f58c:	50002f26 	beq	r10,zero,f64c <__subdf3+0x2fc>
    f590:	0101ffc4 	movi	r4,2047
    f594:	813f9126 	beq	r16,r4,f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f598:	18c02034 	orhi	r3,r3,128
    f59c:	01000e04 	movi	r4,56
    f5a0:	2080b00e 	bge	r4,r2,f864 <__subdf3+0x514>
    f5a4:	198cb03a 	or	r6,r3,r6
    f5a8:	300ec03a 	cmpne	r7,r6,zero
    f5ac:	0005883a 	mov	r2,zero
    f5b0:	3c4f883a 	add	r7,r7,r17
    f5b4:	3c63803a 	cmpltu	r17,r7,r17
    f5b8:	114b883a 	add	r5,r2,r5
    f5bc:	2c4b883a 	add	r5,r5,r17
    f5c0:	3823883a 	mov	r17,r7
    f5c4:	2880202c 	andhi	r2,r5,128
    f5c8:	10002e26 	beq	r2,zero,f684 <__subdf3+0x334>
    f5cc:	84000044 	addi	r16,r16,1
    f5d0:	0081ffc4 	movi	r2,2047
    f5d4:	8080de26 	beq	r16,r2,f950 <__subdf3+0x600>
    f5d8:	00bfe034 	movhi	r2,65408
    f5dc:	10bfffc4 	addi	r2,r2,-1
    f5e0:	288a703a 	and	r5,r5,r2
    f5e4:	880cd07a 	srli	r6,r17,1
    f5e8:	280897fa 	slli	r4,r5,31
    f5ec:	88c0004c 	andi	r3,r17,1
    f5f0:	30e2b03a 	or	r17,r6,r3
    f5f4:	280ad07a 	srli	r5,r5,1
    f5f8:	8922b03a 	or	r17,r17,r4
    f5fc:	003f7706 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f600:	1984b03a 	or	r2,r3,r6
    f604:	103f6e26 	beq	r2,zero,f3c0 <__alt_mem_Flash_flash_data+0xf400f3c0>
    f608:	39c03fcc 	andi	r7,r7,255
    f60c:	003f6d06 	br	f3c4 <__alt_mem_Flash_flash_data+0xf400f3c4>
    f610:	1146b03a 	or	r3,r2,r5
    f614:	18003f26 	beq	r3,zero,f714 <__subdf3+0x3c4>
    f618:	00c00434 	movhi	r3,16
    f61c:	29000234 	orhi	r4,r5,8
    f620:	18ffffc4 	addi	r3,r3,-1
    f624:	20c8703a 	and	r4,r4,r3
    f628:	003f8406 	br	f43c <__alt_mem_Flash_flash_data+0xf400f43c>
    f62c:	10bfffc4 	addi	r2,r2,-1
    f630:	1000501e 	bne	r2,zero,f774 <__subdf3+0x424>
    f634:	898fc83a 	sub	r7,r17,r6
    f638:	89e3803a 	cmpltu	r17,r17,r7
    f63c:	28cbc83a 	sub	r5,r5,r3
    f640:	2c4bc83a 	sub	r5,r5,r17
    f644:	3823883a 	mov	r17,r7
    f648:	003fa106 	br	f4d0 <__alt_mem_Flash_flash_data+0xf400f4d0>
    f64c:	1988b03a 	or	r4,r3,r6
    f650:	203f6226 	beq	r4,zero,f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f654:	10bfffc4 	addi	r2,r2,-1
    f658:	10009b1e 	bne	r2,zero,f8c8 <__subdf3+0x578>
    f65c:	344d883a 	add	r6,r6,r17
    f660:	3463803a 	cmpltu	r17,r6,r17
    f664:	194b883a 	add	r5,r3,r5
    f668:	2c4b883a 	add	r5,r5,r17
    f66c:	3023883a 	mov	r17,r6
    f670:	003fd406 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f674:	1106b03a 	or	r3,r2,r4
    f678:	1800b426 	beq	r3,zero,f94c <__subdf3+0x5fc>
    f67c:	100b883a 	mov	r5,r2
    f680:	2023883a 	mov	r17,r4
    f684:	888001cc 	andi	r2,r17,7
    f688:	103f561e 	bne	r2,zero,f3e4 <__alt_mem_Flash_flash_data+0xf400f3e4>
    f68c:	9200004c 	andi	r8,r18,1
    f690:	003fb206 	br	f55c <__alt_mem_Flash_flash_data+0xf400f55c>
    f694:	1000531e 	bne	r2,zero,f7e4 <__subdf3+0x494>
    f698:	80800044 	addi	r2,r16,1
    f69c:	1081ffcc 	andi	r2,r2,2047
    f6a0:	01000044 	movi	r4,1
    f6a4:	2080a00e 	bge	r4,r2,f928 <__subdf3+0x5d8>
    f6a8:	8985c83a 	sub	r2,r17,r6
    f6ac:	8889803a 	cmpltu	r4,r17,r2
    f6b0:	28e7c83a 	sub	r19,r5,r3
    f6b4:	9927c83a 	sub	r19,r19,r4
    f6b8:	9900202c 	andhi	r4,r19,128
    f6bc:	20006226 	beq	r4,zero,f848 <__subdf3+0x4f8>
    f6c0:	3463c83a 	sub	r17,r6,r17
    f6c4:	194bc83a 	sub	r5,r3,r5
    f6c8:	344d803a 	cmpltu	r6,r6,r17
    f6cc:	29a7c83a 	sub	r19,r5,r6
    f6d0:	3825883a 	mov	r18,r7
    f6d4:	983f841e 	bne	r19,zero,f4e8 <__alt_mem_Flash_flash_data+0xf400f4e8>
    f6d8:	8809883a 	mov	r4,r17
    f6dc:	000fe1c0 	call	fe1c <__clzsi2>
    f6e0:	10800804 	addi	r2,r2,32
    f6e4:	10fffe04 	addi	r3,r2,-8
    f6e8:	010007c4 	movi	r4,31
    f6ec:	20ff830e 	bge	r4,r3,f4fc <__alt_mem_Flash_flash_data+0xf400f4fc>
    f6f0:	14fff604 	addi	r19,r2,-40
    f6f4:	8ce6983a 	sll	r19,r17,r19
    f6f8:	0023883a 	mov	r17,zero
    f6fc:	1c3f860e 	bge	r3,r16,f518 <__alt_mem_Flash_flash_data+0xf400f518>
    f700:	017fe034 	movhi	r5,65408
    f704:	297fffc4 	addi	r5,r5,-1
    f708:	80e1c83a 	sub	r16,r16,r3
    f70c:	994a703a 	and	r5,r19,r5
    f710:	003f3206 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f714:	0009883a 	mov	r4,zero
    f718:	0005883a 	mov	r2,zero
    f71c:	003f4706 	br	f43c <__alt_mem_Flash_flash_data+0xf400f43c>
    f720:	198cb03a 	or	r6,r3,r6
    f724:	300cc03a 	cmpne	r6,r6,zero
    f728:	0005883a 	mov	r2,zero
    f72c:	003f6306 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    f730:	10009d1e 	bne	r2,zero,f9a8 <__subdf3+0x658>
    f734:	81c00044 	addi	r7,r16,1
    f738:	3881ffcc 	andi	r2,r7,2047
    f73c:	02400044 	movi	r9,1
    f740:	4880680e 	bge	r9,r2,f8e4 <__subdf3+0x594>
    f744:	0081ffc4 	movi	r2,2047
    f748:	3880ae26 	beq	r7,r2,fa04 <__subdf3+0x6b4>
    f74c:	344d883a 	add	r6,r6,r17
    f750:	3463803a 	cmpltu	r17,r6,r17
    f754:	194b883a 	add	r5,r3,r5
    f758:	2c4b883a 	add	r5,r5,r17
    f75c:	282297fa 	slli	r17,r5,31
    f760:	300cd07a 	srli	r6,r6,1
    f764:	280ad07a 	srli	r5,r5,1
    f768:	3821883a 	mov	r16,r7
    f76c:	89a2b03a 	or	r17,r17,r6
    f770:	003f1a06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f774:	0101ffc4 	movi	r4,2047
    f778:	813f431e 	bne	r16,r4,f488 <__alt_mem_Flash_flash_data+0xf400f488>
    f77c:	003f1706 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f780:	80bff844 	addi	r2,r16,-31
    f784:	00c00804 	movi	r3,32
    f788:	9884d83a 	srl	r2,r19,r2
    f78c:	28c05126 	beq	r5,r3,f8d4 <__subdf3+0x584>
    f790:	00c00fc4 	movi	r3,63
    f794:	1c21c83a 	sub	r16,r3,r16
    f798:	9c26983a 	sll	r19,r19,r16
    f79c:	9c62b03a 	or	r17,r19,r17
    f7a0:	8822c03a 	cmpne	r17,r17,zero
    f7a4:	88a2b03a 	or	r17,r17,r2
    f7a8:	000b883a 	mov	r5,zero
    f7ac:	0021883a 	mov	r16,zero
    f7b0:	003fb406 	br	f684 <__alt_mem_Flash_flash_data+0xf400f684>
    f7b4:	113ff804 	addi	r4,r2,-32
    f7b8:	01c00804 	movi	r7,32
    f7bc:	1908d83a 	srl	r4,r3,r4
    f7c0:	11c04626 	beq	r2,r7,f8dc <__subdf3+0x58c>
    f7c4:	01c01004 	movi	r7,64
    f7c8:	3885c83a 	sub	r2,r7,r2
    f7cc:	1884983a 	sll	r2,r3,r2
    f7d0:	118cb03a 	or	r6,r2,r6
    f7d4:	300cc03a 	cmpne	r6,r6,zero
    f7d8:	310cb03a 	or	r6,r6,r4
    f7dc:	0005883a 	mov	r2,zero
    f7e0:	003f3606 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    f7e4:	80002b26 	beq	r16,zero,f894 <__subdf3+0x544>
    f7e8:	0101ffc4 	movi	r4,2047
    f7ec:	51006926 	beq	r10,r4,f994 <__subdf3+0x644>
    f7f0:	0085c83a 	sub	r2,zero,r2
    f7f4:	29402034 	orhi	r5,r5,128
    f7f8:	01000e04 	movi	r4,56
    f7fc:	20807d16 	blt	r4,r2,f9f4 <__subdf3+0x6a4>
    f800:	010007c4 	movi	r4,31
    f804:	2080d916 	blt	r4,r2,fb6c <__subdf3+0x81c>
    f808:	01000804 	movi	r4,32
    f80c:	2089c83a 	sub	r4,r4,r2
    f810:	2912983a 	sll	r9,r5,r4
    f814:	8890d83a 	srl	r8,r17,r2
    f818:	8908983a 	sll	r4,r17,r4
    f81c:	2884d83a 	srl	r2,r5,r2
    f820:	4a22b03a 	or	r17,r9,r8
    f824:	2008c03a 	cmpne	r4,r4,zero
    f828:	8922b03a 	or	r17,r17,r4
    f82c:	3463c83a 	sub	r17,r6,r17
    f830:	1885c83a 	sub	r2,r3,r2
    f834:	344d803a 	cmpltu	r6,r6,r17
    f838:	118bc83a 	sub	r5,r2,r6
    f83c:	5021883a 	mov	r16,r10
    f840:	3825883a 	mov	r18,r7
    f844:	003f2206 	br	f4d0 <__alt_mem_Flash_flash_data+0xf400f4d0>
    f848:	9886b03a 	or	r3,r19,r2
    f84c:	18001c1e 	bne	r3,zero,f8c0 <__subdf3+0x570>
    f850:	0011883a 	mov	r8,zero
    f854:	000b883a 	mov	r5,zero
    f858:	0023883a 	mov	r17,zero
    f85c:	0021883a 	mov	r16,zero
    f860:	003f3e06 	br	f55c <__alt_mem_Flash_flash_data+0xf400f55c>
    f864:	010007c4 	movi	r4,31
    f868:	20803c16 	blt	r4,r2,f95c <__subdf3+0x60c>
    f86c:	01000804 	movi	r4,32
    f870:	2089c83a 	sub	r4,r4,r2
    f874:	1912983a 	sll	r9,r3,r4
    f878:	308ed83a 	srl	r7,r6,r2
    f87c:	3108983a 	sll	r4,r6,r4
    f880:	1884d83a 	srl	r2,r3,r2
    f884:	49ceb03a 	or	r7,r9,r7
    f888:	2008c03a 	cmpne	r4,r4,zero
    f88c:	390eb03a 	or	r7,r7,r4
    f890:	003f4706 	br	f5b0 <__alt_mem_Flash_flash_data+0xf400f5b0>
    f894:	2c48b03a 	or	r4,r5,r17
    f898:	20003e26 	beq	r4,zero,f994 <__subdf3+0x644>
    f89c:	0084303a 	nor	r2,zero,r2
    f8a0:	10003a1e 	bne	r2,zero,f98c <__subdf3+0x63c>
    f8a4:	3463c83a 	sub	r17,r6,r17
    f8a8:	194bc83a 	sub	r5,r3,r5
    f8ac:	344d803a 	cmpltu	r6,r6,r17
    f8b0:	298bc83a 	sub	r5,r5,r6
    f8b4:	5021883a 	mov	r16,r10
    f8b8:	3825883a 	mov	r18,r7
    f8bc:	003f0406 	br	f4d0 <__alt_mem_Flash_flash_data+0xf400f4d0>
    f8c0:	1023883a 	mov	r17,r2
    f8c4:	003f0706 	br	f4e4 <__alt_mem_Flash_flash_data+0xf400f4e4>
    f8c8:	0101ffc4 	movi	r4,2047
    f8cc:	813f331e 	bne	r16,r4,f59c <__alt_mem_Flash_flash_data+0xf400f59c>
    f8d0:	003ec206 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f8d4:	0027883a 	mov	r19,zero
    f8d8:	003fb006 	br	f79c <__alt_mem_Flash_flash_data+0xf400f79c>
    f8dc:	0005883a 	mov	r2,zero
    f8e0:	003fbb06 	br	f7d0 <__alt_mem_Flash_flash_data+0xf400f7d0>
    f8e4:	2c44b03a 	or	r2,r5,r17
    f8e8:	80008b1e 	bne	r16,zero,fb18 <__subdf3+0x7c8>
    f8ec:	1000b526 	beq	r2,zero,fbc4 <__subdf3+0x874>
    f8f0:	1984b03a 	or	r2,r3,r6
    f8f4:	103eb926 	beq	r2,zero,f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f8f8:	3449883a 	add	r4,r6,r17
    f8fc:	2463803a 	cmpltu	r17,r4,r17
    f900:	194b883a 	add	r5,r3,r5
    f904:	2c4b883a 	add	r5,r5,r17
    f908:	2880202c 	andhi	r2,r5,128
    f90c:	2023883a 	mov	r17,r4
    f910:	103f5c26 	beq	r2,zero,f684 <__alt_mem_Flash_flash_data+0xf400f684>
    f914:	00bfe034 	movhi	r2,65408
    f918:	10bfffc4 	addi	r2,r2,-1
    f91c:	4821883a 	mov	r16,r9
    f920:	288a703a 	and	r5,r5,r2
    f924:	003ead06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f928:	2c44b03a 	or	r2,r5,r17
    f92c:	8000291e 	bne	r16,zero,f9d4 <__subdf3+0x684>
    f930:	10004f1e 	bne	r2,zero,fa70 <__subdf3+0x720>
    f934:	1984b03a 	or	r2,r3,r6
    f938:	10000426 	beq	r2,zero,f94c <__subdf3+0x5fc>
    f93c:	180b883a 	mov	r5,r3
    f940:	3023883a 	mov	r17,r6
    f944:	3825883a 	mov	r18,r7
    f948:	003ea406 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f94c:	0011883a 	mov	r8,zero
    f950:	000b883a 	mov	r5,zero
    f954:	0023883a 	mov	r17,zero
    f958:	003f0006 	br	f55c <__alt_mem_Flash_flash_data+0xf400f55c>
    f95c:	11fff804 	addi	r7,r2,-32
    f960:	19c8d83a 	srl	r4,r3,r7
    f964:	01c00804 	movi	r7,32
    f968:	11c07e26 	beq	r2,r7,fb64 <__subdf3+0x814>
    f96c:	01c01004 	movi	r7,64
    f970:	3885c83a 	sub	r2,r7,r2
    f974:	1884983a 	sll	r2,r3,r2
    f978:	118cb03a 	or	r6,r2,r6
    f97c:	300ec03a 	cmpne	r7,r6,zero
    f980:	390eb03a 	or	r7,r7,r4
    f984:	0005883a 	mov	r2,zero
    f988:	003f0906 	br	f5b0 <__alt_mem_Flash_flash_data+0xf400f5b0>
    f98c:	0101ffc4 	movi	r4,2047
    f990:	513f991e 	bne	r10,r4,f7f8 <__alt_mem_Flash_flash_data+0xf400f7f8>
    f994:	180b883a 	mov	r5,r3
    f998:	3023883a 	mov	r17,r6
    f99c:	5021883a 	mov	r16,r10
    f9a0:	3825883a 	mov	r18,r7
    f9a4:	003e8d06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f9a8:	80001a1e 	bne	r16,zero,fa14 <__subdf3+0x6c4>
    f9ac:	2c48b03a 	or	r4,r5,r17
    f9b0:	20005526 	beq	r4,zero,fb08 <__subdf3+0x7b8>
    f9b4:	0084303a 	nor	r2,zero,r2
    f9b8:	1000511e 	bne	r2,zero,fb00 <__subdf3+0x7b0>
    f9bc:	89a3883a 	add	r17,r17,r6
    f9c0:	194b883a 	add	r5,r3,r5
    f9c4:	898d803a 	cmpltu	r6,r17,r6
    f9c8:	298b883a 	add	r5,r5,r6
    f9cc:	5021883a 	mov	r16,r10
    f9d0:	003efc06 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f9d4:	1000341e 	bne	r2,zero,faa8 <__subdf3+0x758>
    f9d8:	1984b03a 	or	r2,r3,r6
    f9dc:	10006f26 	beq	r2,zero,fb9c <__subdf3+0x84c>
    f9e0:	180b883a 	mov	r5,r3
    f9e4:	3023883a 	mov	r17,r6
    f9e8:	3825883a 	mov	r18,r7
    f9ec:	0401ffc4 	movi	r16,2047
    f9f0:	003e7a06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    f9f4:	2c62b03a 	or	r17,r5,r17
    f9f8:	8822c03a 	cmpne	r17,r17,zero
    f9fc:	0005883a 	mov	r2,zero
    fa00:	003f8a06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fa04:	3821883a 	mov	r16,r7
    fa08:	000b883a 	mov	r5,zero
    fa0c:	0023883a 	mov	r17,zero
    fa10:	003ed206 	br	f55c <__alt_mem_Flash_flash_data+0xf400f55c>
    fa14:	0101ffc4 	movi	r4,2047
    fa18:	51003b26 	beq	r10,r4,fb08 <__subdf3+0x7b8>
    fa1c:	0085c83a 	sub	r2,zero,r2
    fa20:	29402034 	orhi	r5,r5,128
    fa24:	01000e04 	movi	r4,56
    fa28:	20806216 	blt	r4,r2,fbb4 <__subdf3+0x864>
    fa2c:	010007c4 	movi	r4,31
    fa30:	20806b16 	blt	r4,r2,fbe0 <__subdf3+0x890>
    fa34:	01000804 	movi	r4,32
    fa38:	2089c83a 	sub	r4,r4,r2
    fa3c:	2912983a 	sll	r9,r5,r4
    fa40:	888ed83a 	srl	r7,r17,r2
    fa44:	8908983a 	sll	r4,r17,r4
    fa48:	2884d83a 	srl	r2,r5,r2
    fa4c:	49e2b03a 	or	r17,r9,r7
    fa50:	2008c03a 	cmpne	r4,r4,zero
    fa54:	8922b03a 	or	r17,r17,r4
    fa58:	89a3883a 	add	r17,r17,r6
    fa5c:	10c5883a 	add	r2,r2,r3
    fa60:	898d803a 	cmpltu	r6,r17,r6
    fa64:	118b883a 	add	r5,r2,r6
    fa68:	5021883a 	mov	r16,r10
    fa6c:	003ed506 	br	f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    fa70:	1984b03a 	or	r2,r3,r6
    fa74:	103e5926 	beq	r2,zero,f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fa78:	8989c83a 	sub	r4,r17,r6
    fa7c:	8911803a 	cmpltu	r8,r17,r4
    fa80:	28c5c83a 	sub	r2,r5,r3
    fa84:	1205c83a 	sub	r2,r2,r8
    fa88:	1200202c 	andhi	r8,r2,128
    fa8c:	403ef926 	beq	r8,zero,f674 <__alt_mem_Flash_flash_data+0xf400f674>
    fa90:	3463c83a 	sub	r17,r6,r17
    fa94:	194bc83a 	sub	r5,r3,r5
    fa98:	344d803a 	cmpltu	r6,r6,r17
    fa9c:	298bc83a 	sub	r5,r5,r6
    faa0:	3825883a 	mov	r18,r7
    faa4:	003e4d06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    faa8:	1984b03a 	or	r2,r3,r6
    faac:	10002b26 	beq	r2,zero,fb5c <__subdf3+0x80c>
    fab0:	2808d0fa 	srli	r4,r5,3
    fab4:	8822d0fa 	srli	r17,r17,3
    fab8:	280a977a 	slli	r5,r5,29
    fabc:	2080022c 	andhi	r2,r4,8
    fac0:	2c62b03a 	or	r17,r5,r17
    fac4:	10000826 	beq	r2,zero,fae8 <__subdf3+0x798>
    fac8:	1810d0fa 	srli	r8,r3,3
    facc:	4080022c 	andhi	r2,r8,8
    fad0:	1000051e 	bne	r2,zero,fae8 <__subdf3+0x798>
    fad4:	300cd0fa 	srli	r6,r6,3
    fad8:	1804977a 	slli	r2,r3,29
    fadc:	4009883a 	mov	r4,r8
    fae0:	3825883a 	mov	r18,r7
    fae4:	11a2b03a 	or	r17,r2,r6
    fae8:	880ad77a 	srli	r5,r17,29
    faec:	200890fa 	slli	r4,r4,3
    faf0:	882290fa 	slli	r17,r17,3
    faf4:	0401ffc4 	movi	r16,2047
    faf8:	290ab03a 	or	r5,r5,r4
    fafc:	003e3706 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fb00:	0101ffc4 	movi	r4,2047
    fb04:	513fc71e 	bne	r10,r4,fa24 <__alt_mem_Flash_flash_data+0xf400fa24>
    fb08:	180b883a 	mov	r5,r3
    fb0c:	3023883a 	mov	r17,r6
    fb10:	5021883a 	mov	r16,r10
    fb14:	003e3106 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fb18:	10002d26 	beq	r2,zero,fbd0 <__subdf3+0x880>
    fb1c:	1984b03a 	or	r2,r3,r6
    fb20:	10000e26 	beq	r2,zero,fb5c <__subdf3+0x80c>
    fb24:	2808d0fa 	srli	r4,r5,3
    fb28:	8822d0fa 	srli	r17,r17,3
    fb2c:	280a977a 	slli	r5,r5,29
    fb30:	2080022c 	andhi	r2,r4,8
    fb34:	2c62b03a 	or	r17,r5,r17
    fb38:	103feb26 	beq	r2,zero,fae8 <__alt_mem_Flash_flash_data+0xf400fae8>
    fb3c:	180ed0fa 	srli	r7,r3,3
    fb40:	3880022c 	andhi	r2,r7,8
    fb44:	103fe81e 	bne	r2,zero,fae8 <__alt_mem_Flash_flash_data+0xf400fae8>
    fb48:	300cd0fa 	srli	r6,r6,3
    fb4c:	1804977a 	slli	r2,r3,29
    fb50:	3809883a 	mov	r4,r7
    fb54:	11a2b03a 	or	r17,r2,r6
    fb58:	003fe306 	br	fae8 <__alt_mem_Flash_flash_data+0xf400fae8>
    fb5c:	0401ffc4 	movi	r16,2047
    fb60:	003e1e06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fb64:	0005883a 	mov	r2,zero
    fb68:	003f8306 	br	f978 <__alt_mem_Flash_flash_data+0xf400f978>
    fb6c:	113ff804 	addi	r4,r2,-32
    fb70:	02000804 	movi	r8,32
    fb74:	2908d83a 	srl	r4,r5,r4
    fb78:	12002526 	beq	r2,r8,fc10 <__subdf3+0x8c0>
    fb7c:	02001004 	movi	r8,64
    fb80:	4085c83a 	sub	r2,r8,r2
    fb84:	288a983a 	sll	r5,r5,r2
    fb88:	2c62b03a 	or	r17,r5,r17
    fb8c:	8822c03a 	cmpne	r17,r17,zero
    fb90:	8922b03a 	or	r17,r17,r4
    fb94:	0005883a 	mov	r2,zero
    fb98:	003f2406 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fb9c:	01402034 	movhi	r5,128
    fba0:	0011883a 	mov	r8,zero
    fba4:	297fffc4 	addi	r5,r5,-1
    fba8:	047ffe04 	movi	r17,-8
    fbac:	0401ffc4 	movi	r16,2047
    fbb0:	003e6a06 	br	f55c <__alt_mem_Flash_flash_data+0xf400f55c>
    fbb4:	2c62b03a 	or	r17,r5,r17
    fbb8:	8822c03a 	cmpne	r17,r17,zero
    fbbc:	0005883a 	mov	r2,zero
    fbc0:	003fa506 	br	fa58 <__alt_mem_Flash_flash_data+0xf400fa58>
    fbc4:	180b883a 	mov	r5,r3
    fbc8:	3023883a 	mov	r17,r6
    fbcc:	003e0306 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fbd0:	180b883a 	mov	r5,r3
    fbd4:	3023883a 	mov	r17,r6
    fbd8:	0401ffc4 	movi	r16,2047
    fbdc:	003dff06 	br	f3dc <__alt_mem_Flash_flash_data+0xf400f3dc>
    fbe0:	113ff804 	addi	r4,r2,-32
    fbe4:	01c00804 	movi	r7,32
    fbe8:	2908d83a 	srl	r4,r5,r4
    fbec:	11c00a26 	beq	r2,r7,fc18 <__subdf3+0x8c8>
    fbf0:	01c01004 	movi	r7,64
    fbf4:	3885c83a 	sub	r2,r7,r2
    fbf8:	288a983a 	sll	r5,r5,r2
    fbfc:	2c62b03a 	or	r17,r5,r17
    fc00:	8822c03a 	cmpne	r17,r17,zero
    fc04:	8922b03a 	or	r17,r17,r4
    fc08:	0005883a 	mov	r2,zero
    fc0c:	003f9206 	br	fa58 <__alt_mem_Flash_flash_data+0xf400fa58>
    fc10:	000b883a 	mov	r5,zero
    fc14:	003fdc06 	br	fb88 <__alt_mem_Flash_flash_data+0xf400fb88>
    fc18:	000b883a 	mov	r5,zero
    fc1c:	003ff706 	br	fbfc <__alt_mem_Flash_flash_data+0xf400fbfc>

0000fc20 <__fixdfsi>:
    fc20:	2806d53a 	srli	r3,r5,20
    fc24:	00800434 	movhi	r2,16
    fc28:	10bfffc4 	addi	r2,r2,-1
    fc2c:	18c1ffcc 	andi	r3,r3,2047
    fc30:	0180ff84 	movi	r6,1022
    fc34:	2884703a 	and	r2,r5,r2
    fc38:	280ad7fa 	srli	r5,r5,31
    fc3c:	30c0130e 	bge	r6,r3,fc8c <__fixdfsi+0x6c>
    fc40:	01810744 	movi	r6,1053
    fc44:	30c00d16 	blt	r6,r3,fc7c <__fixdfsi+0x5c>
    fc48:	01810cc4 	movi	r6,1075
    fc4c:	30cdc83a 	sub	r6,r6,r3
    fc50:	01c007c4 	movi	r7,31
    fc54:	10800434 	orhi	r2,r2,16
    fc58:	39800e0e 	bge	r7,r6,fc94 <__fixdfsi+0x74>
    fc5c:	010104c4 	movi	r4,1043
    fc60:	20c7c83a 	sub	r3,r4,r3
    fc64:	10c6d83a 	srl	r3,r2,r3
    fc68:	29403fcc 	andi	r5,r5,255
    fc6c:	0145c83a 	sub	r2,zero,r5
    fc70:	1884f03a 	xor	r2,r3,r2
    fc74:	1145883a 	add	r2,r2,r5
    fc78:	f800283a 	ret
    fc7c:	00a00034 	movhi	r2,32768
    fc80:	10bfffc4 	addi	r2,r2,-1
    fc84:	2885883a 	add	r2,r5,r2
    fc88:	f800283a 	ret
    fc8c:	0005883a 	mov	r2,zero
    fc90:	f800283a 	ret
    fc94:	18fefb44 	addi	r3,r3,-1043
    fc98:	2188d83a 	srl	r4,r4,r6
    fc9c:	10c6983a 	sll	r3,r2,r3
    fca0:	20c6b03a 	or	r3,r4,r3
    fca4:	003ff006 	br	fc68 <__alt_mem_Flash_flash_data+0xf400fc68>

0000fca8 <__floatsidf>:
    fca8:	defffd04 	addi	sp,sp,-12
    fcac:	dc400115 	stw	r17,4(sp)
    fcb0:	dfc00215 	stw	ra,8(sp)
    fcb4:	dc000015 	stw	r16,0(sp)
    fcb8:	2023883a 	mov	r17,r4
    fcbc:	20001426 	beq	r4,zero,fd10 <__floatsidf+0x68>
    fcc0:	2020d7fa 	srli	r16,r4,31
    fcc4:	80000126 	beq	r16,zero,fccc <__floatsidf+0x24>
    fcc8:	0123c83a 	sub	r17,zero,r4
    fccc:	8809883a 	mov	r4,r17
    fcd0:	000fe1c0 	call	fe1c <__clzsi2>
    fcd4:	01410784 	movi	r5,1054
    fcd8:	00c00284 	movi	r3,10
    fcdc:	288bc83a 	sub	r5,r5,r2
    fce0:	18801c16 	blt	r3,r2,fd54 <__floatsidf+0xac>
    fce4:	00c002c4 	movi	r3,11
    fce8:	1887c83a 	sub	r3,r3,r2
    fcec:	88c8d83a 	srl	r4,r17,r3
    fcf0:	00c00434 	movhi	r3,16
    fcf4:	18ffffc4 	addi	r3,r3,-1
    fcf8:	10800544 	addi	r2,r2,21
    fcfc:	20c8703a 	and	r4,r4,r3
    fd00:	8884983a 	sll	r2,r17,r2
    fd04:	28c1ffcc 	andi	r3,r5,2047
    fd08:	800d883a 	mov	r6,r16
    fd0c:	00000406 	br	fd20 <__floatsidf+0x78>
    fd10:	000d883a 	mov	r6,zero
    fd14:	0007883a 	mov	r3,zero
    fd18:	0009883a 	mov	r4,zero
    fd1c:	0005883a 	mov	r2,zero
    fd20:	180a953a 	slli	r5,r3,20
    fd24:	31803fcc 	andi	r6,r6,255
    fd28:	00c00434 	movhi	r3,16
    fd2c:	300c97fa 	slli	r6,r6,31
    fd30:	18ffffc4 	addi	r3,r3,-1
    fd34:	20c6703a 	and	r3,r4,r3
    fd38:	1946b03a 	or	r3,r3,r5
    fd3c:	1986b03a 	or	r3,r3,r6
    fd40:	dfc00217 	ldw	ra,8(sp)
    fd44:	dc400117 	ldw	r17,4(sp)
    fd48:	dc000017 	ldw	r16,0(sp)
    fd4c:	dec00304 	addi	sp,sp,12
    fd50:	f800283a 	ret
    fd54:	10fffd44 	addi	r3,r2,-11
    fd58:	88c8983a 	sll	r4,r17,r3
    fd5c:	00800434 	movhi	r2,16
    fd60:	10bfffc4 	addi	r2,r2,-1
    fd64:	2088703a 	and	r4,r4,r2
    fd68:	28c1ffcc 	andi	r3,r5,2047
    fd6c:	800d883a 	mov	r6,r16
    fd70:	0005883a 	mov	r2,zero
    fd74:	003fea06 	br	fd20 <__alt_mem_Flash_flash_data+0xf400fd20>

0000fd78 <__floatunsidf>:
    fd78:	defffe04 	addi	sp,sp,-8
    fd7c:	dc000015 	stw	r16,0(sp)
    fd80:	dfc00115 	stw	ra,4(sp)
    fd84:	2021883a 	mov	r16,r4
    fd88:	20001026 	beq	r4,zero,fdcc <__floatunsidf+0x54>
    fd8c:	000fe1c0 	call	fe1c <__clzsi2>
    fd90:	01410784 	movi	r5,1054
    fd94:	100d883a 	mov	r6,r2
    fd98:	288bc83a 	sub	r5,r5,r2
    fd9c:	00800284 	movi	r2,10
    fda0:	11801616 	blt	r2,r6,fdfc <__floatunsidf+0x84>
    fda4:	008002c4 	movi	r2,11
    fda8:	1185c83a 	sub	r2,r2,r6
    fdac:	8084d83a 	srl	r2,r16,r2
    fdb0:	00c00434 	movhi	r3,16
    fdb4:	31c00544 	addi	r7,r6,21
    fdb8:	18ffffc4 	addi	r3,r3,-1
    fdbc:	81e0983a 	sll	r16,r16,r7
    fdc0:	10cc703a 	and	r6,r2,r3
    fdc4:	2941ffcc 	andi	r5,r5,2047
    fdc8:	00000206 	br	fdd4 <__floatunsidf+0x5c>
    fdcc:	000b883a 	mov	r5,zero
    fdd0:	000d883a 	mov	r6,zero
    fdd4:	280a953a 	slli	r5,r5,20
    fdd8:	00c00434 	movhi	r3,16
    fddc:	18ffffc4 	addi	r3,r3,-1
    fde0:	30c6703a 	and	r3,r6,r3
    fde4:	8005883a 	mov	r2,r16
    fde8:	1946b03a 	or	r3,r3,r5
    fdec:	dfc00117 	ldw	ra,4(sp)
    fdf0:	dc000017 	ldw	r16,0(sp)
    fdf4:	dec00204 	addi	sp,sp,8
    fdf8:	f800283a 	ret
    fdfc:	31bffd44 	addi	r6,r6,-11
    fe00:	818c983a 	sll	r6,r16,r6
    fe04:	00800434 	movhi	r2,16
    fe08:	10bfffc4 	addi	r2,r2,-1
    fe0c:	2941ffcc 	andi	r5,r5,2047
    fe10:	0021883a 	mov	r16,zero
    fe14:	308c703a 	and	r6,r6,r2
    fe18:	003fee06 	br	fdd4 <__alt_mem_Flash_flash_data+0xf400fdd4>

0000fe1c <__clzsi2>:
    fe1c:	00bfffd4 	movui	r2,65535
    fe20:	11000b36 	bltu	r2,r4,fe50 <__clzsi2+0x34>
    fe24:	00803fc4 	movi	r2,255
    fe28:	1100122e 	bgeu	r2,r4,fe74 <__clzsi2+0x58>
    fe2c:	00c00204 	movi	r3,8
    fe30:	01400604 	movi	r5,24
    fe34:	20c8d83a 	srl	r4,r4,r3
    fe38:	008000b4 	movhi	r2,2
    fe3c:	10b1f204 	addi	r2,r2,-14392
    fe40:	1109883a 	add	r4,r2,r4
    fe44:	20800003 	ldbu	r2,0(r4)
    fe48:	2885c83a 	sub	r2,r5,r2
    fe4c:	f800283a 	ret
    fe50:	00804034 	movhi	r2,256
    fe54:	10bfffc4 	addi	r2,r2,-1
    fe58:	11000336 	bltu	r2,r4,fe68 <__clzsi2+0x4c>
    fe5c:	00c00404 	movi	r3,16
    fe60:	180b883a 	mov	r5,r3
    fe64:	003ff306 	br	fe34 <__alt_mem_Flash_flash_data+0xf400fe34>
    fe68:	00c00604 	movi	r3,24
    fe6c:	01400204 	movi	r5,8
    fe70:	003ff006 	br	fe34 <__alt_mem_Flash_flash_data+0xf400fe34>
    fe74:	0007883a 	mov	r3,zero
    fe78:	01400804 	movi	r5,32
    fe7c:	003fed06 	br	fe34 <__alt_mem_Flash_flash_data+0xf400fe34>

0000fe80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe80:	defffe04 	addi	sp,sp,-8
    fe84:	dfc00115 	stw	ra,4(sp)
    fe88:	df000015 	stw	fp,0(sp)
    fe8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe90:	008000b4 	movhi	r2,2
    fe94:	10baa504 	addi	r2,r2,-5484
    fe98:	10800017 	ldw	r2,0(r2)
    fe9c:	10000526 	beq	r2,zero,feb4 <alt_get_errno+0x34>
    fea0:	008000b4 	movhi	r2,2
    fea4:	10baa504 	addi	r2,r2,-5484
    fea8:	10800017 	ldw	r2,0(r2)
    feac:	103ee83a 	callr	r2
    feb0:	00000206 	br	febc <alt_get_errno+0x3c>
    feb4:	008000b4 	movhi	r2,2
    feb8:	1082a304 	addi	r2,r2,2700
}
    febc:	e037883a 	mov	sp,fp
    fec0:	dfc00117 	ldw	ra,4(sp)
    fec4:	df000017 	ldw	fp,0(sp)
    fec8:	dec00204 	addi	sp,sp,8
    fecc:	f800283a 	ret

0000fed0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    fed0:	defffb04 	addi	sp,sp,-20
    fed4:	dfc00415 	stw	ra,16(sp)
    fed8:	df000315 	stw	fp,12(sp)
    fedc:	df000304 	addi	fp,sp,12
    fee0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    fee4:	e0bfff17 	ldw	r2,-4(fp)
    fee8:	10000616 	blt	r2,zero,ff04 <close+0x34>
    feec:	e0bfff17 	ldw	r2,-4(fp)
    fef0:	10c00324 	muli	r3,r2,12
    fef4:	008000b4 	movhi	r2,2
    fef8:	10b52804 	addi	r2,r2,-11104
    fefc:	1885883a 	add	r2,r3,r2
    ff00:	00000106 	br	ff08 <close+0x38>
    ff04:	0005883a 	mov	r2,zero
    ff08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ff0c:	e0bffd17 	ldw	r2,-12(fp)
    ff10:	10001926 	beq	r2,zero,ff78 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ff14:	e0bffd17 	ldw	r2,-12(fp)
    ff18:	10800017 	ldw	r2,0(r2)
    ff1c:	10800417 	ldw	r2,16(r2)
    ff20:	10000626 	beq	r2,zero,ff3c <close+0x6c>
    ff24:	e0bffd17 	ldw	r2,-12(fp)
    ff28:	10800017 	ldw	r2,0(r2)
    ff2c:	10800417 	ldw	r2,16(r2)
    ff30:	e13ffd17 	ldw	r4,-12(fp)
    ff34:	103ee83a 	callr	r2
    ff38:	00000106 	br	ff40 <close+0x70>
    ff3c:	0005883a 	mov	r2,zero
    ff40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ff44:	e13fff17 	ldw	r4,-4(fp)
    ff48:	00105e80 	call	105e8 <alt_release_fd>
    if (rval < 0)
    ff4c:	e0bffe17 	ldw	r2,-8(fp)
    ff50:	1000070e 	bge	r2,zero,ff70 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ff54:	000fe800 	call	fe80 <alt_get_errno>
    ff58:	1007883a 	mov	r3,r2
    ff5c:	e0bffe17 	ldw	r2,-8(fp)
    ff60:	0085c83a 	sub	r2,zero,r2
    ff64:	18800015 	stw	r2,0(r3)
      return -1;
    ff68:	00bfffc4 	movi	r2,-1
    ff6c:	00000706 	br	ff8c <close+0xbc>
    }
    return 0;
    ff70:	0005883a 	mov	r2,zero
    ff74:	00000506 	br	ff8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ff78:	000fe800 	call	fe80 <alt_get_errno>
    ff7c:	1007883a 	mov	r3,r2
    ff80:	00801444 	movi	r2,81
    ff84:	18800015 	stw	r2,0(r3)
    return -1;
    ff88:	00bfffc4 	movi	r2,-1
  }
}
    ff8c:	e037883a 	mov	sp,fp
    ff90:	dfc00117 	ldw	ra,4(sp)
    ff94:	df000017 	ldw	fp,0(sp)
    ff98:	dec00204 	addi	sp,sp,8
    ff9c:	f800283a 	ret

0000ffa0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ffa0:	defffc04 	addi	sp,sp,-16
    ffa4:	df000315 	stw	fp,12(sp)
    ffa8:	df000304 	addi	fp,sp,12
    ffac:	e13ffd15 	stw	r4,-12(fp)
    ffb0:	e17ffe15 	stw	r5,-8(fp)
    ffb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ffb8:	e0bfff17 	ldw	r2,-4(fp)
}
    ffbc:	e037883a 	mov	sp,fp
    ffc0:	df000017 	ldw	fp,0(sp)
    ffc4:	dec00104 	addi	sp,sp,4
    ffc8:	f800283a 	ret

0000ffcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ffcc:	defffe04 	addi	sp,sp,-8
    ffd0:	dfc00115 	stw	ra,4(sp)
    ffd4:	df000015 	stw	fp,0(sp)
    ffd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ffdc:	008000b4 	movhi	r2,2
    ffe0:	10baa504 	addi	r2,r2,-5484
    ffe4:	10800017 	ldw	r2,0(r2)
    ffe8:	10000526 	beq	r2,zero,10000 <alt_get_errno+0x34>
    ffec:	008000b4 	movhi	r2,2
    fff0:	10baa504 	addi	r2,r2,-5484
    fff4:	10800017 	ldw	r2,0(r2)
    fff8:	103ee83a 	callr	r2
    fffc:	00000206 	br	10008 <alt_get_errno+0x3c>
   10000:	008000b4 	movhi	r2,2
   10004:	1082a304 	addi	r2,r2,2700
}
   10008:	e037883a 	mov	sp,fp
   1000c:	dfc00117 	ldw	ra,4(sp)
   10010:	df000017 	ldw	fp,0(sp)
   10014:	dec00204 	addi	sp,sp,8
   10018:	f800283a 	ret

0001001c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1001c:	defffb04 	addi	sp,sp,-20
   10020:	dfc00415 	stw	ra,16(sp)
   10024:	df000315 	stw	fp,12(sp)
   10028:	df000304 	addi	fp,sp,12
   1002c:	e13ffe15 	stw	r4,-8(fp)
   10030:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10034:	e0bffe17 	ldw	r2,-8(fp)
   10038:	10000616 	blt	r2,zero,10054 <fstat+0x38>
   1003c:	e0bffe17 	ldw	r2,-8(fp)
   10040:	10c00324 	muli	r3,r2,12
   10044:	008000b4 	movhi	r2,2
   10048:	10b52804 	addi	r2,r2,-11104
   1004c:	1885883a 	add	r2,r3,r2
   10050:	00000106 	br	10058 <fstat+0x3c>
   10054:	0005883a 	mov	r2,zero
   10058:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1005c:	e0bffd17 	ldw	r2,-12(fp)
   10060:	10001026 	beq	r2,zero,100a4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10064:	e0bffd17 	ldw	r2,-12(fp)
   10068:	10800017 	ldw	r2,0(r2)
   1006c:	10800817 	ldw	r2,32(r2)
   10070:	10000726 	beq	r2,zero,10090 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   10074:	e0bffd17 	ldw	r2,-12(fp)
   10078:	10800017 	ldw	r2,0(r2)
   1007c:	10800817 	ldw	r2,32(r2)
   10080:	e13ffd17 	ldw	r4,-12(fp)
   10084:	e17fff17 	ldw	r5,-4(fp)
   10088:	103ee83a 	callr	r2
   1008c:	00000a06 	br	100b8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10090:	e0bfff17 	ldw	r2,-4(fp)
   10094:	00c80004 	movi	r3,8192
   10098:	10c00115 	stw	r3,4(r2)
      return 0;
   1009c:	0005883a 	mov	r2,zero
   100a0:	00000506 	br	100b8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   100a4:	000ffcc0 	call	ffcc <alt_get_errno>
   100a8:	1007883a 	mov	r3,r2
   100ac:	00801444 	movi	r2,81
   100b0:	18800015 	stw	r2,0(r3)
    return -1;
   100b4:	00bfffc4 	movi	r2,-1
  }
}
   100b8:	e037883a 	mov	sp,fp
   100bc:	dfc00117 	ldw	ra,4(sp)
   100c0:	df000017 	ldw	fp,0(sp)
   100c4:	dec00204 	addi	sp,sp,8
   100c8:	f800283a 	ret

000100cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100cc:	defffe04 	addi	sp,sp,-8
   100d0:	dfc00115 	stw	ra,4(sp)
   100d4:	df000015 	stw	fp,0(sp)
   100d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100dc:	008000b4 	movhi	r2,2
   100e0:	10baa504 	addi	r2,r2,-5484
   100e4:	10800017 	ldw	r2,0(r2)
   100e8:	10000526 	beq	r2,zero,10100 <alt_get_errno+0x34>
   100ec:	008000b4 	movhi	r2,2
   100f0:	10baa504 	addi	r2,r2,-5484
   100f4:	10800017 	ldw	r2,0(r2)
   100f8:	103ee83a 	callr	r2
   100fc:	00000206 	br	10108 <alt_get_errno+0x3c>
   10100:	008000b4 	movhi	r2,2
   10104:	1082a304 	addi	r2,r2,2700
}
   10108:	e037883a 	mov	sp,fp
   1010c:	dfc00117 	ldw	ra,4(sp)
   10110:	df000017 	ldw	fp,0(sp)
   10114:	dec00204 	addi	sp,sp,8
   10118:	f800283a 	ret

0001011c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1011c:	deffed04 	addi	sp,sp,-76
   10120:	dfc01215 	stw	ra,72(sp)
   10124:	df001115 	stw	fp,68(sp)
   10128:	df001104 	addi	fp,sp,68
   1012c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10130:	e0bfff17 	ldw	r2,-4(fp)
   10134:	10000616 	blt	r2,zero,10150 <isatty+0x34>
   10138:	e0bfff17 	ldw	r2,-4(fp)
   1013c:	10c00324 	muli	r3,r2,12
   10140:	008000b4 	movhi	r2,2
   10144:	10b52804 	addi	r2,r2,-11104
   10148:	1885883a 	add	r2,r3,r2
   1014c:	00000106 	br	10154 <isatty+0x38>
   10150:	0005883a 	mov	r2,zero
   10154:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10158:	e0bfef17 	ldw	r2,-68(fp)
   1015c:	10000e26 	beq	r2,zero,10198 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10160:	e0bfef17 	ldw	r2,-68(fp)
   10164:	10800017 	ldw	r2,0(r2)
   10168:	10800817 	ldw	r2,32(r2)
   1016c:	1000021e 	bne	r2,zero,10178 <isatty+0x5c>
    {
      return 1;
   10170:	00800044 	movi	r2,1
   10174:	00000d06 	br	101ac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10178:	e0bff004 	addi	r2,fp,-64
   1017c:	e13fff17 	ldw	r4,-4(fp)
   10180:	100b883a 	mov	r5,r2
   10184:	001001c0 	call	1001c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10188:	e0bff117 	ldw	r2,-60(fp)
   1018c:	10880020 	cmpeqi	r2,r2,8192
   10190:	10803fcc 	andi	r2,r2,255
   10194:	00000506 	br	101ac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10198:	00100cc0 	call	100cc <alt_get_errno>
   1019c:	1007883a 	mov	r3,r2
   101a0:	00801444 	movi	r2,81
   101a4:	18800015 	stw	r2,0(r3)
    return 0;
   101a8:	0005883a 	mov	r2,zero
  }
}
   101ac:	e037883a 	mov	sp,fp
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	df000017 	ldw	fp,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

000101c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   101c0:	defffc04 	addi	sp,sp,-16
   101c4:	df000315 	stw	fp,12(sp)
   101c8:	df000304 	addi	fp,sp,12
   101cc:	e13ffd15 	stw	r4,-12(fp)
   101d0:	e17ffe15 	stw	r5,-8(fp)
   101d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   101d8:	e0fffe17 	ldw	r3,-8(fp)
   101dc:	e0bffd17 	ldw	r2,-12(fp)
   101e0:	18800c26 	beq	r3,r2,10214 <alt_load_section+0x54>
  {
    while( to != end )
   101e4:	00000806 	br	10208 <alt_load_section+0x48>
    {
      *to++ = *from++;
   101e8:	e0bffe17 	ldw	r2,-8(fp)
   101ec:	10c00104 	addi	r3,r2,4
   101f0:	e0fffe15 	stw	r3,-8(fp)
   101f4:	e0fffd17 	ldw	r3,-12(fp)
   101f8:	19000104 	addi	r4,r3,4
   101fc:	e13ffd15 	stw	r4,-12(fp)
   10200:	18c00017 	ldw	r3,0(r3)
   10204:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10208:	e0fffe17 	ldw	r3,-8(fp)
   1020c:	e0bfff17 	ldw	r2,-4(fp)
   10210:	18bff51e 	bne	r3,r2,101e8 <__alt_mem_Flash_flash_data+0xf40101e8>
    {
      *to++ = *from++;
    }
  }
}
   10214:	e037883a 	mov	sp,fp
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00104 	addi	sp,sp,4
   10220:	f800283a 	ret

00010224 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10224:	defffe04 	addi	sp,sp,-8
   10228:	dfc00115 	stw	ra,4(sp)
   1022c:	df000015 	stw	fp,0(sp)
   10230:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10234:	010000b4 	movhi	r4,2
   10238:	213ac904 	addi	r4,r4,-5340
   1023c:	014000b4 	movhi	r5,2
   10240:	2972f504 	addi	r5,r5,-13356
   10244:	018000b4 	movhi	r6,2
   10248:	31bac904 	addi	r6,r6,-5340
   1024c:	00101c00 	call	101c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10250:	01000034 	movhi	r4,0
   10254:	21000804 	addi	r4,r4,32
   10258:	01400034 	movhi	r5,0
   1025c:	29400804 	addi	r5,r5,32
   10260:	01800034 	movhi	r6,0
   10264:	31809104 	addi	r6,r6,580
   10268:	00101c00 	call	101c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1026c:	010000b4 	movhi	r4,2
   10270:	21313504 	addi	r4,r4,-15148
   10274:	014000b4 	movhi	r5,2
   10278:	29713504 	addi	r5,r5,-15148
   1027c:	018000b4 	movhi	r6,2
   10280:	31b2f504 	addi	r6,r6,-13356
   10284:	00101c00 	call	101c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10288:	001b11c0 	call	1b11c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1028c:	001b3740 	call	1b374 <alt_icache_flush_all>
}
   10290:	e037883a 	mov	sp,fp
   10294:	dfc00117 	ldw	ra,4(sp)
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00204 	addi	sp,sp,8
   102a0:	f800283a 	ret

000102a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   102a4:	defffe04 	addi	sp,sp,-8
   102a8:	dfc00115 	stw	ra,4(sp)
   102ac:	df000015 	stw	fp,0(sp)
   102b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   102b4:	008000b4 	movhi	r2,2
   102b8:	10baa504 	addi	r2,r2,-5484
   102bc:	10800017 	ldw	r2,0(r2)
   102c0:	10000526 	beq	r2,zero,102d8 <alt_get_errno+0x34>
   102c4:	008000b4 	movhi	r2,2
   102c8:	10baa504 	addi	r2,r2,-5484
   102cc:	10800017 	ldw	r2,0(r2)
   102d0:	103ee83a 	callr	r2
   102d4:	00000206 	br	102e0 <alt_get_errno+0x3c>
   102d8:	008000b4 	movhi	r2,2
   102dc:	1082a304 	addi	r2,r2,2700
}
   102e0:	e037883a 	mov	sp,fp
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	df000017 	ldw	fp,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   102f4:	defff904 	addi	sp,sp,-28
   102f8:	dfc00615 	stw	ra,24(sp)
   102fc:	df000515 	stw	fp,20(sp)
   10300:	df000504 	addi	fp,sp,20
   10304:	e13ffd15 	stw	r4,-12(fp)
   10308:	e17ffe15 	stw	r5,-8(fp)
   1030c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10310:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10314:	e0bffd17 	ldw	r2,-12(fp)
   10318:	10000616 	blt	r2,zero,10334 <lseek+0x40>
   1031c:	e0bffd17 	ldw	r2,-12(fp)
   10320:	10c00324 	muli	r3,r2,12
   10324:	008000b4 	movhi	r2,2
   10328:	10b52804 	addi	r2,r2,-11104
   1032c:	1885883a 	add	r2,r3,r2
   10330:	00000106 	br	10338 <lseek+0x44>
   10334:	0005883a 	mov	r2,zero
   10338:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1033c:	e0bffc17 	ldw	r2,-16(fp)
   10340:	10001026 	beq	r2,zero,10384 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10344:	e0bffc17 	ldw	r2,-16(fp)
   10348:	10800017 	ldw	r2,0(r2)
   1034c:	10800717 	ldw	r2,28(r2)
   10350:	10000926 	beq	r2,zero,10378 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10354:	e0bffc17 	ldw	r2,-16(fp)
   10358:	10800017 	ldw	r2,0(r2)
   1035c:	10800717 	ldw	r2,28(r2)
   10360:	e13ffc17 	ldw	r4,-16(fp)
   10364:	e17ffe17 	ldw	r5,-8(fp)
   10368:	e1bfff17 	ldw	r6,-4(fp)
   1036c:	103ee83a 	callr	r2
   10370:	e0bffb15 	stw	r2,-20(fp)
   10374:	00000506 	br	1038c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10378:	00bfde84 	movi	r2,-134
   1037c:	e0bffb15 	stw	r2,-20(fp)
   10380:	00000206 	br	1038c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   10384:	00bfebc4 	movi	r2,-81
   10388:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1038c:	e0bffb17 	ldw	r2,-20(fp)
   10390:	1000070e 	bge	r2,zero,103b0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   10394:	00102a40 	call	102a4 <alt_get_errno>
   10398:	1007883a 	mov	r3,r2
   1039c:	e0bffb17 	ldw	r2,-20(fp)
   103a0:	0085c83a 	sub	r2,zero,r2
   103a4:	18800015 	stw	r2,0(r3)
    rc = -1;
   103a8:	00bfffc4 	movi	r2,-1
   103ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   103b0:	e0bffb17 	ldw	r2,-20(fp)
}
   103b4:	e037883a 	mov	sp,fp
   103b8:	dfc00117 	ldw	ra,4(sp)
   103bc:	df000017 	ldw	fp,0(sp)
   103c0:	dec00204 	addi	sp,sp,8
   103c4:	f800283a 	ret

000103c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103c8:	defff904 	addi	sp,sp,-28
   103cc:	dfc00615 	stw	ra,24(sp)
   103d0:	df000515 	stw	fp,20(sp)
   103d4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103d8:	0009883a 	mov	r4,zero
   103dc:	00188140 	call	18814 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   103e0:	00113b80 	call	113b8 <OSInit>
   103e4:	01000044 	movi	r4,1
   103e8:	0015f280 	call	15f28 <OSSemCreate>
   103ec:	1007883a 	mov	r3,r2
   103f0:	008000b4 	movhi	r2,2
   103f4:	1082a904 	addi	r2,r2,2724
   103f8:	10c00015 	stw	r3,0(r2)
   103fc:	01000044 	movi	r4,1
   10400:	0015f280 	call	15f28 <OSSemCreate>
   10404:	1007883a 	mov	r3,r2
   10408:	008000b4 	movhi	r2,2
   1040c:	1082ab04 	addi	r2,r2,2732
   10410:	10c00015 	stw	r3,0(r2)
   10414:	008000b4 	movhi	r2,2
   10418:	1082a404 	addi	r2,r2,2704
   1041c:	e0bffc15 	stw	r2,-16(fp)
   10420:	00800044 	movi	r2,1
   10424:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10428:	e0bffd0b 	ldhu	r2,-12(fp)
   1042c:	1009883a 	mov	r4,r2
   10430:	0015f280 	call	15f28 <OSSemCreate>
   10434:	1007883a 	mov	r3,r2
   10438:	e0bffc17 	ldw	r2,-16(fp)
   1043c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10440:	00188480 	call	18848 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10444:	010000b4 	movhi	r4,2
   10448:	21323504 	addi	r4,r4,-14124
   1044c:	014000b4 	movhi	r5,2
   10450:	29723504 	addi	r5,r5,-14124
   10454:	018000b4 	movhi	r6,2
   10458:	31b23504 	addi	r6,r6,-14124
   1045c:	001b4640 	call	1b464 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10460:	001b22c0 	call	1b22c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10464:	010000b4 	movhi	r4,2
   10468:	212ca204 	addi	r4,r4,-19832
   1046c:	001c1280 	call	1c128 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10470:	d1280b17 	ldw	r4,-24532(gp)
   10474:	d0e80c17 	ldw	r3,-24528(gp)
   10478:	d0a80d17 	ldw	r2,-24524(gp)
   1047c:	180b883a 	mov	r5,r3
   10480:	100d883a 	mov	r6,r2
   10484:	00007bc0 	call	7bc <main>
   10488:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   1048c:	01000044 	movi	r4,1
   10490:	000fed00 	call	fed0 <close>
  exit (result);
   10494:	e13ffb17 	ldw	r4,-20(fp)
   10498:	001c13c0 	call	1c13c <exit>

0001049c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1049c:	defffe04 	addi	sp,sp,-8
   104a0:	dfc00115 	stw	ra,4(sp)
   104a4:	df000015 	stw	fp,0(sp)
   104a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104ac:	008000b4 	movhi	r2,2
   104b0:	10baa504 	addi	r2,r2,-5484
   104b4:	10800017 	ldw	r2,0(r2)
   104b8:	10000526 	beq	r2,zero,104d0 <alt_get_errno+0x34>
   104bc:	008000b4 	movhi	r2,2
   104c0:	10baa504 	addi	r2,r2,-5484
   104c4:	10800017 	ldw	r2,0(r2)
   104c8:	103ee83a 	callr	r2
   104cc:	00000206 	br	104d8 <alt_get_errno+0x3c>
   104d0:	008000b4 	movhi	r2,2
   104d4:	1082a304 	addi	r2,r2,2700
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   104ec:	defff904 	addi	sp,sp,-28
   104f0:	dfc00615 	stw	ra,24(sp)
   104f4:	df000515 	stw	fp,20(sp)
   104f8:	df000504 	addi	fp,sp,20
   104fc:	e13ffd15 	stw	r4,-12(fp)
   10500:	e17ffe15 	stw	r5,-8(fp)
   10504:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	10000616 	blt	r2,zero,10528 <read+0x3c>
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	10c00324 	muli	r3,r2,12
   10518:	008000b4 	movhi	r2,2
   1051c:	10b52804 	addi	r2,r2,-11104
   10520:	1885883a 	add	r2,r3,r2
   10524:	00000106 	br	1052c <read+0x40>
   10528:	0005883a 	mov	r2,zero
   1052c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10530:	e0bffb17 	ldw	r2,-20(fp)
   10534:	10002226 	beq	r2,zero,105c0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10538:	e0bffb17 	ldw	r2,-20(fp)
   1053c:	10800217 	ldw	r2,8(r2)
   10540:	108000cc 	andi	r2,r2,3
   10544:	10800060 	cmpeqi	r2,r2,1
   10548:	1000181e 	bne	r2,zero,105ac <read+0xc0>
        (fd->dev->read))
   1054c:	e0bffb17 	ldw	r2,-20(fp)
   10550:	10800017 	ldw	r2,0(r2)
   10554:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10558:	10001426 	beq	r2,zero,105ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1055c:	e0bffb17 	ldw	r2,-20(fp)
   10560:	10800017 	ldw	r2,0(r2)
   10564:	10800517 	ldw	r2,20(r2)
   10568:	e0ffff17 	ldw	r3,-4(fp)
   1056c:	e13ffb17 	ldw	r4,-20(fp)
   10570:	e17ffe17 	ldw	r5,-8(fp)
   10574:	180d883a 	mov	r6,r3
   10578:	103ee83a 	callr	r2
   1057c:	e0bffc15 	stw	r2,-16(fp)
   10580:	e0bffc17 	ldw	r2,-16(fp)
   10584:	1000070e 	bge	r2,zero,105a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   10588:	001049c0 	call	1049c <alt_get_errno>
   1058c:	1007883a 	mov	r3,r2
   10590:	e0bffc17 	ldw	r2,-16(fp)
   10594:	0085c83a 	sub	r2,zero,r2
   10598:	18800015 	stw	r2,0(r3)
          return -1;
   1059c:	00bfffc4 	movi	r2,-1
   105a0:	00000c06 	br	105d4 <read+0xe8>
        }
        return rval;
   105a4:	e0bffc17 	ldw	r2,-16(fp)
   105a8:	00000a06 	br	105d4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   105ac:	001049c0 	call	1049c <alt_get_errno>
   105b0:	1007883a 	mov	r3,r2
   105b4:	00800344 	movi	r2,13
   105b8:	18800015 	stw	r2,0(r3)
   105bc:	00000406 	br	105d0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   105c0:	001049c0 	call	1049c <alt_get_errno>
   105c4:	1007883a 	mov	r3,r2
   105c8:	00801444 	movi	r2,81
   105cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   105d0:	00bfffc4 	movi	r2,-1
}
   105d4:	e037883a 	mov	sp,fp
   105d8:	dfc00117 	ldw	ra,4(sp)
   105dc:	df000017 	ldw	fp,0(sp)
   105e0:	dec00204 	addi	sp,sp,8
   105e4:	f800283a 	ret

000105e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   105e8:	defffe04 	addi	sp,sp,-8
   105ec:	df000115 	stw	fp,4(sp)
   105f0:	df000104 	addi	fp,sp,4
   105f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   105f8:	e0bfff17 	ldw	r2,-4(fp)
   105fc:	108000d0 	cmplti	r2,r2,3
   10600:	10000d1e 	bne	r2,zero,10638 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10604:	008000b4 	movhi	r2,2
   10608:	10b52804 	addi	r2,r2,-11104
   1060c:	e0ffff17 	ldw	r3,-4(fp)
   10610:	18c00324 	muli	r3,r3,12
   10614:	18c00204 	addi	r3,r3,8
   10618:	10c5883a 	add	r2,r2,r3
   1061c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10620:	008000b4 	movhi	r2,2
   10624:	10b52804 	addi	r2,r2,-11104
   10628:	e0ffff17 	ldw	r3,-4(fp)
   1062c:	18c00324 	muli	r3,r3,12
   10630:	10c5883a 	add	r2,r2,r3
   10634:	10000015 	stw	zero,0(r2)
  }
}
   10638:	e037883a 	mov	sp,fp
   1063c:	df000017 	ldw	fp,0(sp)
   10640:	dec00104 	addi	sp,sp,4
   10644:	f800283a 	ret

00010648 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10648:	defff904 	addi	sp,sp,-28
   1064c:	df000615 	stw	fp,24(sp)
   10650:	df000604 	addi	fp,sp,24
   10654:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10658:	0005303a 	rdctl	r2,status
   1065c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10660:	e0fffc17 	ldw	r3,-16(fp)
   10664:	00bfff84 	movi	r2,-2
   10668:	1884703a 	and	r2,r3,r2
   1066c:	1001703a 	wrctl	status,r2
  
  return context;
   10670:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10674:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10678:	d0a00c17 	ldw	r2,-32720(gp)
   1067c:	10c000c4 	addi	r3,r2,3
   10680:	00bfff04 	movi	r2,-4
   10684:	1884703a 	and	r2,r3,r2
   10688:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1068c:	d0e00c17 	ldw	r3,-32720(gp)
   10690:	e0bfff17 	ldw	r2,-4(fp)
   10694:	1887883a 	add	r3,r3,r2
   10698:	00810034 	movhi	r2,1024
   1069c:	10800004 	addi	r2,r2,0
   106a0:	10c0062e 	bgeu	r2,r3,106bc <sbrk+0x74>
   106a4:	e0bffa17 	ldw	r2,-24(fp)
   106a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106ac:	e0bffd17 	ldw	r2,-12(fp)
   106b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   106b4:	00bfffc4 	movi	r2,-1
   106b8:	00000b06 	br	106e8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   106bc:	d0a00c17 	ldw	r2,-32720(gp)
   106c0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   106c4:	d0e00c17 	ldw	r3,-32720(gp)
   106c8:	e0bfff17 	ldw	r2,-4(fp)
   106cc:	1885883a 	add	r2,r3,r2
   106d0:	d0a00c15 	stw	r2,-32720(gp)
   106d4:	e0bffa17 	ldw	r2,-24(fp)
   106d8:	e0bffe15 	stw	r2,-8(fp)
   106dc:	e0bffe17 	ldw	r2,-8(fp)
   106e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   106e4:	e0bffb17 	ldw	r2,-20(fp)
} 
   106e8:	e037883a 	mov	sp,fp
   106ec:	df000017 	ldw	fp,0(sp)
   106f0:	dec00104 	addi	sp,sp,4
   106f4:	f800283a 	ret

000106f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   106f8:	defffe04 	addi	sp,sp,-8
   106fc:	dfc00115 	stw	ra,4(sp)
   10700:	df000015 	stw	fp,0(sp)
   10704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10708:	008000b4 	movhi	r2,2
   1070c:	10baa504 	addi	r2,r2,-5484
   10710:	10800017 	ldw	r2,0(r2)
   10714:	10000526 	beq	r2,zero,1072c <alt_get_errno+0x34>
   10718:	008000b4 	movhi	r2,2
   1071c:	10baa504 	addi	r2,r2,-5484
   10720:	10800017 	ldw	r2,0(r2)
   10724:	103ee83a 	callr	r2
   10728:	00000206 	br	10734 <alt_get_errno+0x3c>
   1072c:	008000b4 	movhi	r2,2
   10730:	1082a304 	addi	r2,r2,2700
}
   10734:	e037883a 	mov	sp,fp
   10738:	dfc00117 	ldw	ra,4(sp)
   1073c:	df000017 	ldw	fp,0(sp)
   10740:	dec00204 	addi	sp,sp,8
   10744:	f800283a 	ret

00010748 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10748:	defff904 	addi	sp,sp,-28
   1074c:	dfc00615 	stw	ra,24(sp)
   10750:	df000515 	stw	fp,20(sp)
   10754:	df000504 	addi	fp,sp,20
   10758:	e13ffd15 	stw	r4,-12(fp)
   1075c:	e17ffe15 	stw	r5,-8(fp)
   10760:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	10000616 	blt	r2,zero,10784 <write+0x3c>
   1076c:	e0bffd17 	ldw	r2,-12(fp)
   10770:	10c00324 	muli	r3,r2,12
   10774:	008000b4 	movhi	r2,2
   10778:	10b52804 	addi	r2,r2,-11104
   1077c:	1885883a 	add	r2,r3,r2
   10780:	00000106 	br	10788 <write+0x40>
   10784:	0005883a 	mov	r2,zero
   10788:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1078c:	e0bffb17 	ldw	r2,-20(fp)
   10790:	10002126 	beq	r2,zero,10818 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10794:	e0bffb17 	ldw	r2,-20(fp)
   10798:	10800217 	ldw	r2,8(r2)
   1079c:	108000cc 	andi	r2,r2,3
   107a0:	10001826 	beq	r2,zero,10804 <write+0xbc>
   107a4:	e0bffb17 	ldw	r2,-20(fp)
   107a8:	10800017 	ldw	r2,0(r2)
   107ac:	10800617 	ldw	r2,24(r2)
   107b0:	10001426 	beq	r2,zero,10804 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   107b4:	e0bffb17 	ldw	r2,-20(fp)
   107b8:	10800017 	ldw	r2,0(r2)
   107bc:	10800617 	ldw	r2,24(r2)
   107c0:	e0ffff17 	ldw	r3,-4(fp)
   107c4:	e13ffb17 	ldw	r4,-20(fp)
   107c8:	e17ffe17 	ldw	r5,-8(fp)
   107cc:	180d883a 	mov	r6,r3
   107d0:	103ee83a 	callr	r2
   107d4:	e0bffc15 	stw	r2,-16(fp)
   107d8:	e0bffc17 	ldw	r2,-16(fp)
   107dc:	1000070e 	bge	r2,zero,107fc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   107e0:	00106f80 	call	106f8 <alt_get_errno>
   107e4:	1007883a 	mov	r3,r2
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	0085c83a 	sub	r2,zero,r2
   107f0:	18800015 	stw	r2,0(r3)
        return -1;
   107f4:	00bfffc4 	movi	r2,-1
   107f8:	00000c06 	br	1082c <write+0xe4>
      }
      return rval;
   107fc:	e0bffc17 	ldw	r2,-16(fp)
   10800:	00000a06 	br	1082c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10804:	00106f80 	call	106f8 <alt_get_errno>
   10808:	1007883a 	mov	r3,r2
   1080c:	00800344 	movi	r2,13
   10810:	18800015 	stw	r2,0(r3)
   10814:	00000406 	br	10828 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10818:	00106f80 	call	106f8 <alt_get_errno>
   1081c:	1007883a 	mov	r3,r2
   10820:	00801444 	movi	r2,81
   10824:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10828:	00bfffc4 	movi	r2,-1
}
   1082c:	e037883a 	mov	sp,fp
   10830:	dfc00117 	ldw	ra,4(sp)
   10834:	df000017 	ldw	fp,0(sp)
   10838:	dec00204 	addi	sp,sp,8
   1083c:	f800283a 	ret

00010840 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   10840:	deffdf04 	addi	sp,sp,-132
   10844:	dfc02015 	stw	ra,128(sp)
   10848:	df001f15 	stw	fp,124(sp)
   1084c:	df001f04 	addi	fp,sp,124
   10850:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   10854:	e0bfe204 	addi	r2,fp,-120
   10858:	01003fc4 	movi	r4,255
   1085c:	100b883a 	mov	r5,r2
   10860:	00180dc0 	call	180dc <OSTaskQuery>
   10864:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10868:	e0bffe83 	ldbu	r2,-6(fp)
   1086c:	10803fcc 	andi	r2,r2,255
   10870:	10000126 	beq	r2,zero,10878 <__env_lock+0x38>
    return;
   10874:	00001d06 	br	108ec <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   10878:	e0bfee83 	ldbu	r2,-70(fp)
   1087c:	10803fcc 	andi	r2,r2,255
   10880:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   10884:	d0e80f17 	ldw	r3,-24516(gp)
   10888:	e0bffd04 	addi	r2,fp,-12
   1088c:	1809883a 	mov	r4,r3
   10890:	100b883a 	mov	r5,r2
   10894:	00167740 	call	16774 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   10898:	e0bffe43 	ldbu	r2,-7(fp)
   1089c:	10803fcc 	andi	r2,r2,255
   108a0:	10000726 	beq	r2,zero,108c0 <__env_lock+0x80>
   108a4:	d0a00d17 	ldw	r2,-32716(gp)
   108a8:	e0ffe117 	ldw	r3,-124(fp)
   108ac:	1880041e 	bne	r3,r2,108c0 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   108b0:	d0a80e17 	ldw	r2,-24520(gp)
   108b4:	10800044 	addi	r2,r2,1
   108b8:	d0a80e15 	stw	r2,-24520(gp)
   108bc:	00000a06 	br	108e8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   108c0:	d0e80f17 	ldw	r3,-24516(gp)
   108c4:	e0bffe84 	addi	r2,fp,-6
   108c8:	1809883a 	mov	r4,r3
   108cc:	000b883a 	mov	r5,zero
   108d0:	100d883a 	mov	r6,r2
   108d4:	00162900 	call	16290 <OSSemPend>
    locks  = 1;
   108d8:	00800044 	movi	r2,1
   108dc:	d0a80e15 	stw	r2,-24520(gp)
    lockid = id;
   108e0:	e0bfe117 	ldw	r2,-124(fp)
   108e4:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   108e8:	0001883a 	nop
}
   108ec:	e037883a 	mov	sp,fp
   108f0:	dfc00117 	ldw	ra,4(sp)
   108f4:	df000017 	ldw	fp,0(sp)
   108f8:	dec00204 	addi	sp,sp,8
   108fc:	f800283a 	ret

00010900 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   10900:	defffd04 	addi	sp,sp,-12
   10904:	dfc00215 	stw	ra,8(sp)
   10908:	df000115 	stw	fp,4(sp)
   1090c:	df000104 	addi	fp,sp,4
   10910:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   10914:	d0a80e17 	ldw	r2,-24520(gp)
   10918:	1000011e 	bne	r2,zero,10920 <__env_unlock+0x20>
    return;
   1091c:	00000a06 	br	10948 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   10920:	d0a80e17 	ldw	r2,-24520(gp)
   10924:	10bfffc4 	addi	r2,r2,-1
   10928:	d0a80e15 	stw	r2,-24520(gp)
   1092c:	d0a80e17 	ldw	r2,-24520(gp)
   10930:	1000051e 	bne	r2,zero,10948 <__env_unlock+0x48>
  {
    lockid = -1;
   10934:	00bfffc4 	movi	r2,-1
   10938:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   1093c:	d0a80f17 	ldw	r2,-24516(gp)
   10940:	1009883a 	mov	r4,r2
   10944:	00166640 	call	16664 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10948:	e037883a 	mov	sp,fp
   1094c:	dfc00117 	ldw	ra,4(sp)
   10950:	df000017 	ldw	fp,0(sp)
   10954:	dec00204 	addi	sp,sp,8
   10958:	f800283a 	ret

0001095c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1095c:	deffdb04 	addi	sp,sp,-148
   10960:	dfc02415 	stw	ra,144(sp)
   10964:	df002315 	stw	fp,140(sp)
   10968:	df002304 	addi	fp,sp,140
   1096c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10970:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   10974:	008000b4 	movhi	r2,2
   10978:	1082ac44 	addi	r2,r2,2737
   1097c:	10800003 	ldbu	r2,0(r2)
   10980:	10803fcc 	andi	r2,r2,255
   10984:	10800060 	cmpeqi	r2,r2,1
   10988:	1000011e 	bne	r2,zero,10990 <__malloc_lock+0x34>
      return;
   1098c:	00003606 	br	10a68 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   10990:	e0bfe204 	addi	r2,fp,-120
   10994:	01003fc4 	movi	r4,255
   10998:	100b883a 	mov	r5,r2
   1099c:	00180dc0 	call	180dc <OSTaskQuery>
   109a0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   109a4:	e0bffe83 	ldbu	r2,-6(fp)
   109a8:	10803fcc 	andi	r2,r2,255
   109ac:	10000126 	beq	r2,zero,109b4 <__malloc_lock+0x58>
    return;
   109b0:	00002d06 	br	10a68 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   109b4:	e0bfee83 	ldbu	r2,-70(fp)
   109b8:	10803fcc 	andi	r2,r2,255
   109bc:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   109c0:	d0e81117 	ldw	r3,-24508(gp)
   109c4:	e0bffd04 	addi	r2,fp,-12
   109c8:	1809883a 	mov	r4,r3
   109cc:	100b883a 	mov	r5,r2
   109d0:	00167740 	call	16774 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109d4:	0005303a 	rdctl	r2,status
   109d8:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109dc:	e0ffdf17 	ldw	r3,-132(fp)
   109e0:	00bfff84 	movi	r2,-2
   109e4:	1884703a 	and	r2,r3,r2
   109e8:	1001703a 	wrctl	status,r2
  
  return context;
   109ec:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   109f0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   109f4:	e0bffd0b 	ldhu	r2,-12(fp)
   109f8:	10bfffcc 	andi	r2,r2,65535
   109fc:	10000b1e 	bne	r2,zero,10a2c <__malloc_lock+0xd0>
   10a00:	d0a00e17 	ldw	r2,-32712(gp)
   10a04:	e0ffde17 	ldw	r3,-136(fp)
   10a08:	1880081e 	bne	r3,r2,10a2c <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   10a0c:	d0a81017 	ldw	r2,-24512(gp)
   10a10:	10800044 	addi	r2,r2,1
   10a14:	d0a81015 	stw	r2,-24512(gp)
   10a18:	e0bfdd17 	ldw	r2,-140(fp)
   10a1c:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a20:	e0bfe017 	ldw	r2,-128(fp)
   10a24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   10a28:	00000e06 	br	10a64 <__malloc_lock+0x108>
   10a2c:	e0bfdd17 	ldw	r2,-140(fp)
   10a30:	e0bfe115 	stw	r2,-124(fp)
   10a34:	e0bfe117 	ldw	r2,-124(fp)
   10a38:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   10a3c:	d0e81117 	ldw	r3,-24508(gp)
   10a40:	e0bffe84 	addi	r2,fp,-6
   10a44:	1809883a 	mov	r4,r3
   10a48:	000b883a 	mov	r5,zero
   10a4c:	100d883a 	mov	r6,r2
   10a50:	00162900 	call	16290 <OSSemPend>
    locks  = 1;
   10a54:	00800044 	movi	r2,1
   10a58:	d0a81015 	stw	r2,-24512(gp)
    lockid = id;
   10a5c:	e0bfde17 	ldw	r2,-136(fp)
   10a60:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10a64:	0001883a 	nop
}
   10a68:	e037883a 	mov	sp,fp
   10a6c:	dfc00117 	ldw	ra,4(sp)
   10a70:	df000017 	ldw	fp,0(sp)
   10a74:	dec00204 	addi	sp,sp,8
   10a78:	f800283a 	ret

00010a7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10a7c:	defff804 	addi	sp,sp,-32
   10a80:	dfc00715 	stw	ra,28(sp)
   10a84:	df000615 	stw	fp,24(sp)
   10a88:	df000604 	addi	fp,sp,24
   10a8c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10a90:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10a94:	008000b4 	movhi	r2,2
   10a98:	1082ac44 	addi	r2,r2,2737
   10a9c:	10800003 	ldbu	r2,0(r2)
   10aa0:	10803fcc 	andi	r2,r2,255
   10aa4:	10800060 	cmpeqi	r2,r2,1
   10aa8:	1000011e 	bne	r2,zero,10ab0 <__malloc_unlock+0x34>
      return;
   10aac:	00002206 	br	10b38 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ab0:	0005303a 	rdctl	r2,status
   10ab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ab8:	e0fffb17 	ldw	r3,-20(fp)
   10abc:	00bfff84 	movi	r2,-2
   10ac0:	1884703a 	and	r2,r3,r2
   10ac4:	1001703a 	wrctl	status,r2
  
  return context;
   10ac8:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   10acc:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10ad0:	d0a81017 	ldw	r2,-24512(gp)
   10ad4:	1000051e 	bne	r2,zero,10aec <__malloc_unlock+0x70>
   10ad8:	e0bffa17 	ldw	r2,-24(fp)
   10adc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ae0:	e0bffc17 	ldw	r2,-16(fp)
   10ae4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10ae8:	00001306 	br	10b38 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10aec:	d0a81017 	ldw	r2,-24512(gp)
   10af0:	10bfffc4 	addi	r2,r2,-1
   10af4:	d0a81015 	stw	r2,-24512(gp)
   10af8:	d0a81017 	ldw	r2,-24512(gp)
   10afc:	10000a1e 	bne	r2,zero,10b28 <__malloc_unlock+0xac>
  {
    lockid = -1;
   10b00:	00bfffc4 	movi	r2,-1
   10b04:	d0a00e15 	stw	r2,-32712(gp)
   10b08:	e0bffa17 	ldw	r2,-24(fp)
   10b0c:	e0bffd15 	stw	r2,-12(fp)
   10b10:	e0bffd17 	ldw	r2,-12(fp)
   10b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10b18:	d0a81117 	ldw	r2,-24508(gp)
   10b1c:	1009883a 	mov	r4,r2
   10b20:	00166640 	call	16664 <OSSemPost>
   10b24:	00000406 	br	10b38 <__malloc_unlock+0xbc>
   10b28:	e0bffa17 	ldw	r2,-24(fp)
   10b2c:	e0bffe15 	stw	r2,-8(fp)
   10b30:	e0bffe17 	ldw	r2,-8(fp)
   10b34:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10b38:	e037883a 	mov	sp,fp
   10b3c:	dfc00117 	ldw	ra,4(sp)
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00204 	addi	sp,sp,8
   10b48:	f800283a 	ret

00010b4c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10b4c:	defff704 	addi	sp,sp,-36
   10b50:	dfc00815 	stw	ra,32(sp)
   10b54:	df000715 	stw	fp,28(sp)
   10b58:	df000704 	addi	fp,sp,28
   10b5c:	e13ffd15 	stw	r4,-12(fp)
   10b60:	e17ffe15 	stw	r5,-8(fp)
   10b64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b68:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10b6c:	e0bfff17 	ldw	r2,-4(fp)
   10b70:	1000021e 	bne	r2,zero,10b7c <OSEventNameGet+0x30>
        return (0);
   10b74:	0005883a 	mov	r2,zero
   10b78:	00003706 	br	10c58 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10b7c:	e0bffd17 	ldw	r2,-12(fp)
   10b80:	1000051e 	bne	r2,zero,10b98 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10b84:	e0bfff17 	ldw	r2,-4(fp)
   10b88:	00c00104 	movi	r3,4
   10b8c:	10c00005 	stb	r3,0(r2)
        return (0);
   10b90:	0005883a 	mov	r2,zero
   10b94:	00003006 	br	10c58 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10b98:	e0bffe17 	ldw	r2,-8(fp)
   10b9c:	1000051e 	bne	r2,zero,10bb4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10ba0:	e0bfff17 	ldw	r2,-4(fp)
   10ba4:	00c00304 	movi	r3,12
   10ba8:	10c00005 	stb	r3,0(r2)
        return (0);
   10bac:	0005883a 	mov	r2,zero
   10bb0:	00002906 	br	10c58 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10bb4:	d0a82003 	ldbu	r2,-24448(gp)
   10bb8:	10803fcc 	andi	r2,r2,255
   10bbc:	10000526 	beq	r2,zero,10bd4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10bc0:	e0bfff17 	ldw	r2,-4(fp)
   10bc4:	00c00444 	movi	r3,17
   10bc8:	10c00005 	stb	r3,0(r2)
        return (0);
   10bcc:	0005883a 	mov	r2,zero
   10bd0:	00002106 	br	10c58 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10bd4:	e0bffd17 	ldw	r2,-12(fp)
   10bd8:	10800003 	ldbu	r2,0(r2)
   10bdc:	10803fcc 	andi	r2,r2,255
   10be0:	10bfffc4 	addi	r2,r2,-1
   10be4:	10800128 	cmpgeui	r2,r2,4
   10be8:	10000526 	beq	r2,zero,10c00 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	00c00044 	movi	r3,1
   10bf4:	10c00005 	stb	r3,0(r2)
             return (0);
   10bf8:	0005883a 	mov	r2,zero
   10bfc:	00001606 	br	10c58 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10c00:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c04:	0005303a 	rdctl	r2,status
   10c08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c0c:	e0fffb17 	ldw	r3,-20(fp)
   10c10:	00bfff84 	movi	r2,-2
   10c14:	1884703a 	and	r2,r3,r2
   10c18:	1001703a 	wrctl	status,r2
  
  return context;
   10c1c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   10c20:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   10c24:	e0bffd17 	ldw	r2,-12(fp)
   10c28:	10800384 	addi	r2,r2,14
   10c2c:	e13ffe17 	ldw	r4,-8(fp)
   10c30:	100b883a 	mov	r5,r2
   10c34:	00125a00 	call	125a0 <OS_StrCopy>
   10c38:	e0bffa05 	stb	r2,-24(fp)
   10c3c:	e0bff917 	ldw	r2,-28(fp)
   10c40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c44:	e0bffc17 	ldw	r2,-16(fp)
   10c48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10c4c:	e0bfff17 	ldw	r2,-4(fp)
   10c50:	10000005 	stb	zero,0(r2)
    return (len);
   10c54:	e0bffa03 	ldbu	r2,-24(fp)
}
   10c58:	e037883a 	mov	sp,fp
   10c5c:	dfc00117 	ldw	ra,4(sp)
   10c60:	df000017 	ldw	fp,0(sp)
   10c64:	dec00204 	addi	sp,sp,8
   10c68:	f800283a 	ret

00010c6c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10c6c:	defff604 	addi	sp,sp,-40
   10c70:	dfc00915 	stw	ra,36(sp)
   10c74:	df000815 	stw	fp,32(sp)
   10c78:	df000804 	addi	fp,sp,32
   10c7c:	e13ffd15 	stw	r4,-12(fp)
   10c80:	e17ffe15 	stw	r5,-8(fp)
   10c84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10c88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	1000011e 	bne	r2,zero,10c98 <OSEventNameSet+0x2c>
        return;
   10c94:	00003f06 	br	10d94 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10c98:	e0bffd17 	ldw	r2,-12(fp)
   10c9c:	1000041e 	bne	r2,zero,10cb0 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   10ca0:	e0bfff17 	ldw	r2,-4(fp)
   10ca4:	00c00104 	movi	r3,4
   10ca8:	10c00005 	stb	r3,0(r2)
        return;
   10cac:	00003906 	br	10d94 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10cb0:	e0bffe17 	ldw	r2,-8(fp)
   10cb4:	1000041e 	bne	r2,zero,10cc8 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
   10cbc:	00c00304 	movi	r3,12
   10cc0:	10c00005 	stb	r3,0(r2)
        return;
   10cc4:	00003306 	br	10d94 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10cc8:	d0a82003 	ldbu	r2,-24448(gp)
   10ccc:	10803fcc 	andi	r2,r2,255
   10cd0:	10000426 	beq	r2,zero,10ce4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   10cd4:	e0bfff17 	ldw	r2,-4(fp)
   10cd8:	00c00484 	movi	r3,18
   10cdc:	10c00005 	stb	r3,0(r2)
        return;
   10ce0:	00002c06 	br	10d94 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   10ce4:	e0bffd17 	ldw	r2,-12(fp)
   10ce8:	10800003 	ldbu	r2,0(r2)
   10cec:	10803fcc 	andi	r2,r2,255
   10cf0:	10bfffc4 	addi	r2,r2,-1
   10cf4:	10800128 	cmpgeui	r2,r2,4
   10cf8:	10000426 	beq	r2,zero,10d0c <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10cfc:	e0bfff17 	ldw	r2,-4(fp)
   10d00:	00c00044 	movi	r3,1
   10d04:	10c00005 	stb	r3,0(r2)
             return;
   10d08:	00002206 	br	10d94 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10d0c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d10:	0005303a 	rdctl	r2,status
   10d14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d18:	e0fffa17 	ldw	r3,-24(fp)
   10d1c:	00bfff84 	movi	r2,-2
   10d20:	1884703a 	and	r2,r3,r2
   10d24:	1001703a 	wrctl	status,r2
  
  return context;
   10d28:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   10d2c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   10d30:	e13ffe17 	ldw	r4,-8(fp)
   10d34:	00126140 	call	12614 <OS_StrLen>
   10d38:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   10d3c:	e0bff903 	ldbu	r2,-28(fp)
   10d40:	10800830 	cmpltui	r2,r2,32
   10d44:	1000081e 	bne	r2,zero,10d68 <OSEventNameSet+0xfc>
   10d48:	e0bff817 	ldw	r2,-32(fp)
   10d4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d50:	e0bffb17 	ldw	r2,-20(fp)
   10d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   10d58:	e0bfff17 	ldw	r2,-4(fp)
   10d5c:	00c002c4 	movi	r3,11
   10d60:	10c00005 	stb	r3,0(r2)
        return;
   10d64:	00000b06 	br	10d94 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   10d68:	e0bffd17 	ldw	r2,-12(fp)
   10d6c:	10800384 	addi	r2,r2,14
   10d70:	1009883a 	mov	r4,r2
   10d74:	e17ffe17 	ldw	r5,-8(fp)
   10d78:	00125a00 	call	125a0 <OS_StrCopy>
   10d7c:	e0bff817 	ldw	r2,-32(fp)
   10d80:	e0bffc15 	stw	r2,-16(fp)
   10d84:	e0bffc17 	ldw	r2,-16(fp)
   10d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10d8c:	e0bfff17 	ldw	r2,-4(fp)
   10d90:	10000005 	stb	zero,0(r2)
}
   10d94:	e037883a 	mov	sp,fp
   10d98:	dfc00117 	ldw	ra,4(sp)
   10d9c:	df000017 	ldw	fp,0(sp)
   10da0:	dec00204 	addi	sp,sp,8
   10da4:	f800283a 	ret

00010da8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10da8:	deffed04 	addi	sp,sp,-76
   10dac:	dfc01215 	stw	ra,72(sp)
   10db0:	df001115 	stw	fp,68(sp)
   10db4:	df001104 	addi	fp,sp,68
   10db8:	e13ffc15 	stw	r4,-16(fp)
   10dbc:	e17ffd15 	stw	r5,-12(fp)
   10dc0:	e1bffe15 	stw	r6,-8(fp)
   10dc4:	3805883a 	mov	r2,r7
   10dc8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   10dcc:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10dd0:	e0800217 	ldw	r2,8(fp)
   10dd4:	1000021e 	bne	r2,zero,10de0 <OSEventPendMulti+0x38>
        return (0);
   10dd8:	0005883a 	mov	r2,zero
   10ddc:	00017106 	br	113a4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10de0:	e0bffc17 	ldw	r2,-16(fp)
   10de4:	1000051e 	bne	r2,zero,10dfc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10de8:	e0800217 	ldw	r2,8(fp)
   10dec:	00c00104 	movi	r3,4
   10df0:	10c00005 	stb	r3,0(r2)
        return (0);
   10df4:	0005883a 	mov	r2,zero
   10df8:	00016a06 	br	113a4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10dfc:	e0bffd17 	ldw	r2,-12(fp)
   10e00:	1000051e 	bne	r2,zero,10e18 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10e04:	e0800217 	ldw	r2,8(fp)
   10e08:	00c00104 	movi	r3,4
   10e0c:	10c00005 	stb	r3,0(r2)
        return (0);
   10e10:	0005883a 	mov	r2,zero
   10e14:	00016306 	br	113a4 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   10e18:	e0bffe17 	ldw	r2,-8(fp)
   10e1c:	1000051e 	bne	r2,zero,10e34 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   10e20:	e0800217 	ldw	r2,8(fp)
   10e24:	00c00104 	movi	r3,4
   10e28:	10c00005 	stb	r3,0(r2)
        return (0);
   10e2c:	0005883a 	mov	r2,zero
   10e30:	00015c06 	br	113a4 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   10e34:	e0bffd17 	ldw	r2,-12(fp)
   10e38:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   10e44:	e0bfef17 	ldw	r2,-68(fp)
   10e48:	10800017 	ldw	r2,0(r2)
   10e4c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   10e50:	00001906 	br	10eb8 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   10e54:	e0bff017 	ldw	r2,-64(fp)
   10e58:	10800003 	ldbu	r2,0(r2)
   10e5c:	10803fcc 	andi	r2,r2,255
   10e60:	10c000a0 	cmpeqi	r3,r2,2
   10e64:	1800091e 	bne	r3,zero,10e8c <OSEventPendMulti+0xe4>
   10e68:	10c000e0 	cmpeqi	r3,r2,3
   10e6c:	1800091e 	bne	r3,zero,10e94 <OSEventPendMulti+0xec>
   10e70:	10800060 	cmpeqi	r2,r2,1
   10e74:	1000091e 	bne	r2,zero,10e9c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10e78:	e0800217 	ldw	r2,8(fp)
   10e7c:	00c00044 	movi	r3,1
   10e80:	10c00005 	stb	r3,0(r2)
                 return (0);
   10e84:	0005883a 	mov	r2,zero
   10e88:	00014606 	br	113a4 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10e8c:	0001883a 	nop
   10e90:	00000306 	br	10ea0 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10e94:	0001883a 	nop
   10e98:	00000106 	br	10ea0 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   10e9c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10ea0:	e0bfef17 	ldw	r2,-68(fp)
   10ea4:	10800104 	addi	r2,r2,4
   10ea8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10eac:	e0bfef17 	ldw	r2,-68(fp)
   10eb0:	10800017 	ldw	r2,0(r2)
   10eb4:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10eb8:	e0bff017 	ldw	r2,-64(fp)
   10ebc:	103fe51e 	bne	r2,zero,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10ec0:	d0a82003 	ldbu	r2,-24448(gp)
   10ec4:	10803fcc 	andi	r2,r2,255
   10ec8:	10000526 	beq	r2,zero,10ee0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   10ecc:	e0800217 	ldw	r2,8(fp)
   10ed0:	00c00084 	movi	r3,2
   10ed4:	10c00005 	stb	r3,0(r2)
        return (0);
   10ed8:	0005883a 	mov	r2,zero
   10edc:	00013106 	br	113a4 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10ee0:	d0a81203 	ldbu	r2,-24504(gp)
   10ee4:	10803fcc 	andi	r2,r2,255
   10ee8:	10000526 	beq	r2,zero,10f00 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   10eec:	e0800217 	ldw	r2,8(fp)
   10ef0:	00c00344 	movi	r3,13
   10ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   10ef8:	0005883a 	mov	r2,zero
   10efc:	00012906 	br	113a4 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f00:	0005303a 	rdctl	r2,status
   10f04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f08:	e0fff517 	ldw	r3,-44(fp)
   10f0c:	00bfff84 	movi	r2,-2
   10f10:	1884703a 	and	r2,r3,r2
   10f14:	1001703a 	wrctl	status,r2
  
  return context;
   10f18:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   10f1c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   10f20:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   10f24:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   10f28:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   10f2c:	e0bffc17 	ldw	r2,-16(fp)
   10f30:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   10f34:	e0bfef17 	ldw	r2,-68(fp)
   10f38:	10800017 	ldw	r2,0(r2)
   10f3c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   10f40:	00008106 	br	11148 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   10f44:	e0bff017 	ldw	r2,-64(fp)
   10f48:	10800003 	ldbu	r2,0(r2)
   10f4c:	10803fcc 	andi	r2,r2,255
   10f50:	10c000a0 	cmpeqi	r3,r2,2
   10f54:	18003c1e 	bne	r3,zero,11048 <OSEventPendMulti+0x2a0>
   10f58:	10c000e0 	cmpeqi	r3,r2,3
   10f5c:	1800031e 	bne	r3,zero,10f6c <OSEventPendMulti+0x1c4>
   10f60:	10800060 	cmpeqi	r2,r2,1
   10f64:	10001e1e 	bne	r2,zero,10fe0 <OSEventPendMulti+0x238>
   10f68:	00006606 	br	11104 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10f6c:	e0bff017 	ldw	r2,-64(fp)
   10f70:	1080020b 	ldhu	r2,8(r2)
   10f74:	10bfffcc 	andi	r2,r2,65535
   10f78:	10001526 	beq	r2,zero,10fd0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10f7c:	e0bff017 	ldw	r2,-64(fp)
   10f80:	1080020b 	ldhu	r2,8(r2)
   10f84:	10bfffc4 	addi	r2,r2,-1
   10f88:	1007883a 	mov	r3,r2
   10f8c:	e0bff017 	ldw	r2,-64(fp)
   10f90:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   10f94:	e0bffd17 	ldw	r2,-12(fp)
   10f98:	10c00104 	addi	r3,r2,4
   10f9c:	e0fffd15 	stw	r3,-12(fp)
   10fa0:	e0fff017 	ldw	r3,-64(fp)
   10fa4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   10fa8:	00800044 	movi	r2,1
   10fac:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   10fb0:	e0bffe17 	ldw	r2,-8(fp)
   10fb4:	10c00104 	addi	r3,r2,4
   10fb8:	e0fffe15 	stw	r3,-8(fp)
   10fbc:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   10fc0:	e0bff18b 	ldhu	r2,-58(fp)
   10fc4:	10800044 	addi	r2,r2,1
   10fc8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   10fcc:	00005806 	br	11130 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   10fd0:	e0bff203 	ldbu	r2,-56(fp)
   10fd4:	10800054 	ori	r2,r2,1
   10fd8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10fdc:	00005406 	br	11130 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10fe0:	e0bff017 	ldw	r2,-64(fp)
   10fe4:	10800117 	ldw	r2,4(r2)
   10fe8:	10001326 	beq	r2,zero,11038 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   10fec:	e0bffe17 	ldw	r2,-8(fp)
   10ff0:	10c00104 	addi	r3,r2,4
   10ff4:	e0fffe15 	stw	r3,-8(fp)
   10ff8:	e0fff017 	ldw	r3,-64(fp)
   10ffc:	18c00117 	ldw	r3,4(r3)
   11000:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   11004:	e0bff017 	ldw	r2,-64(fp)
   11008:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	10c00104 	addi	r3,r2,4
   11014:	e0fffd15 	stw	r3,-12(fp)
   11018:	e0fff017 	ldw	r3,-64(fp)
   1101c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   11020:	00800044 	movi	r2,1
   11024:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11028:	e0bff18b 	ldhu	r2,-58(fp)
   1102c:	10800044 	addi	r2,r2,1
   11030:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   11034:	00003e06 	br	11130 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   11038:	e0bff203 	ldbu	r2,-56(fp)
   1103c:	10800094 	ori	r2,r2,2
   11040:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11044:	00003a06 	br	11130 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   11048:	e0bff017 	ldw	r2,-64(fp)
   1104c:	10800117 	ldw	r2,4(r2)
   11050:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   11054:	e0bff417 	ldw	r2,-48(fp)
   11058:	1080058b 	ldhu	r2,22(r2)
   1105c:	10bfffcc 	andi	r2,r2,65535
   11060:	10002426 	beq	r2,zero,110f4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   11064:	e0bffe17 	ldw	r2,-8(fp)
   11068:	10c00104 	addi	r3,r2,4
   1106c:	e0fffe15 	stw	r3,-8(fp)
   11070:	e0fff417 	ldw	r3,-48(fp)
   11074:	18c00417 	ldw	r3,16(r3)
   11078:	19400104 	addi	r5,r3,4
   1107c:	e13ff417 	ldw	r4,-48(fp)
   11080:	21400415 	stw	r5,16(r4)
   11084:	18c00017 	ldw	r3,0(r3)
   11088:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1108c:	e0bff417 	ldw	r2,-48(fp)
   11090:	10c00417 	ldw	r3,16(r2)
   11094:	e0bff417 	ldw	r2,-48(fp)
   11098:	10800217 	ldw	r2,8(r2)
   1109c:	1880041e 	bne	r3,r2,110b0 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   110a0:	e0bff417 	ldw	r2,-48(fp)
   110a4:	10c00117 	ldw	r3,4(r2)
   110a8:	e0bff417 	ldw	r2,-48(fp)
   110ac:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   110b0:	e0bff417 	ldw	r2,-48(fp)
   110b4:	1080058b 	ldhu	r2,22(r2)
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	1007883a 	mov	r3,r2
   110c0:	e0bff417 	ldw	r2,-48(fp)
   110c4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   110c8:	e0bffd17 	ldw	r2,-12(fp)
   110cc:	10c00104 	addi	r3,r2,4
   110d0:	e0fffd15 	stw	r3,-12(fp)
   110d4:	e0fff017 	ldw	r3,-64(fp)
   110d8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   110dc:	00800044 	movi	r2,1
   110e0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   110e4:	e0bff18b 	ldhu	r2,-58(fp)
   110e8:	10800044 	addi	r2,r2,1
   110ec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   110f0:	00000f06 	br	11130 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   110f4:	e0bff203 	ldbu	r2,-56(fp)
   110f8:	10800114 	ori	r2,r2,4
   110fc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11100:	00000b06 	br	11130 <OSEventPendMulti+0x388>
   11104:	e0bff317 	ldw	r2,-52(fp)
   11108:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1110c:	e0bff617 	ldw	r2,-40(fp)
   11110:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   11114:	e0bffd17 	ldw	r2,-12(fp)
   11118:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1111c:	e0800217 	ldw	r2,8(fp)
   11120:	00c00044 	movi	r3,1
   11124:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   11128:	e0bff18b 	ldhu	r2,-58(fp)
   1112c:	00009d06 	br	113a4 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   11130:	e0bfef17 	ldw	r2,-68(fp)
   11134:	10800104 	addi	r2,r2,4
   11138:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1113c:	e0bfef17 	ldw	r2,-68(fp)
   11140:	10800017 	ldw	r2,0(r2)
   11144:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11148:	e0bff017 	ldw	r2,-64(fp)
   1114c:	103f7d1e 	bne	r2,zero,10f44 <__alt_mem_Flash_flash_data+0xf4010f44>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   11150:	e0bff103 	ldbu	r2,-60(fp)
   11154:	10800058 	cmpnei	r2,r2,1
   11158:	10000a1e 	bne	r2,zero,11184 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1115c:	e0bffd17 	ldw	r2,-12(fp)
   11160:	10000015 	stw	zero,0(r2)
   11164:	e0bff317 	ldw	r2,-52(fp)
   11168:	e0bff715 	stw	r2,-36(fp)
   1116c:	e0bff717 	ldw	r2,-36(fp)
   11170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   11174:	e0800217 	ldw	r2,8(fp)
   11178:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1117c:	e0bff18b 	ldhu	r2,-58(fp)
   11180:	00008806 	br	113a4 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   11184:	d0a82117 	ldw	r2,-24444(gp)
   11188:	d0e82117 	ldw	r3,-24444(gp)
   1118c:	19000c03 	ldbu	r4,48(r3)
   11190:	e0fff203 	ldbu	r3,-56(fp)
   11194:	20c6b03a 	or	r3,r4,r3
   11198:	1809883a 	mov	r4,r3
   1119c:	00ffe004 	movi	r3,-128
   111a0:	20c6b03a 	or	r3,r4,r3
   111a4:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   111a8:	d0a82117 	ldw	r2,-24444(gp)
   111ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   111b0:	d0a82117 	ldw	r2,-24444(gp)
   111b4:	e0ffff0b 	ldhu	r3,-4(fp)
   111b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   111bc:	e13ffc17 	ldw	r4,-16(fp)
   111c0:	0011cf00 	call	11cf0 <OS_EventTaskWaitMulti>
   111c4:	e0bff317 	ldw	r2,-52(fp)
   111c8:	e0bff815 	stw	r2,-32(fp)
   111cc:	e0bff817 	ldw	r2,-32(fp)
   111d0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   111d4:	00124640 	call	12464 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111d8:	0005303a 	rdctl	r2,status
   111dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111e0:	e0fff917 	ldw	r3,-28(fp)
   111e4:	00bfff84 	movi	r2,-2
   111e8:	1884703a 	and	r2,r3,r2
   111ec:	1001703a 	wrctl	status,r2
  
  return context;
   111f0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   111f4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   111f8:	d0a82117 	ldw	r2,-24444(gp)
   111fc:	10800c43 	ldbu	r2,49(r2)
   11200:	10803fcc 	andi	r2,r2,255
   11204:	10000226 	beq	r2,zero,11210 <OSEventPendMulti+0x468>
   11208:	108000a0 	cmpeqi	r2,r2,2
   1120c:	10001826 	beq	r2,zero,11270 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   11210:	d0a82117 	ldw	r2,-24444(gp)
   11214:	10800717 	ldw	r2,28(r2)
   11218:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1121c:	e0bff017 	ldw	r2,-64(fp)
   11220:	10000b26 	beq	r2,zero,11250 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   11224:	e0bffd17 	ldw	r2,-12(fp)
   11228:	10c00104 	addi	r3,r2,4
   1122c:	e0fffd15 	stw	r3,-12(fp)
   11230:	e0fff017 	ldw	r3,-64(fp)
   11234:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   11238:	e0bffd17 	ldw	r2,-12(fp)
   1123c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   11240:	e0bff18b 	ldhu	r2,-58(fp)
   11244:	10800044 	addi	r2,r2,1
   11248:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1124c:	00000d06 	br	11284 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   11250:	d0a82117 	ldw	r2,-24444(gp)
   11254:	00c00044 	movi	r3,1
   11258:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1125c:	d0a82117 	ldw	r2,-24444(gp)
   11260:	1009883a 	mov	r4,r2
   11264:	e17ffc17 	ldw	r5,-16(fp)
   11268:	0011ef00 	call	11ef0 <OS_EventTaskRemoveMulti>
             }
			 break;
   1126c:	00000506 	br	11284 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   11270:	d0a82117 	ldw	r2,-24444(gp)
   11274:	1009883a 	mov	r4,r2
   11278:	e17ffc17 	ldw	r5,-16(fp)
   1127c:	0011ef00 	call	11ef0 <OS_EventTaskRemoveMulti>
             break;
   11280:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   11284:	d0a82117 	ldw	r2,-24444(gp)
   11288:	10800c43 	ldbu	r2,49(r2)
   1128c:	10803fcc 	andi	r2,r2,255
   11290:	10000326 	beq	r2,zero,112a0 <OSEventPendMulti+0x4f8>
   11294:	108000a0 	cmpeqi	r2,r2,2
   11298:	1000231e 	bne	r2,zero,11328 <OSEventPendMulti+0x580>
   1129c:	00002a06 	br	11348 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   112a0:	e0bff017 	ldw	r2,-64(fp)
   112a4:	10800003 	ldbu	r2,0(r2)
   112a8:	10803fcc 	andi	r2,r2,255
   112ac:	0080100e 	bge	zero,r2,112f0 <OSEventPendMulti+0x548>
   112b0:	10c000d0 	cmplti	r3,r2,3
   112b4:	1800071e 	bne	r3,zero,112d4 <OSEventPendMulti+0x52c>
   112b8:	108000e0 	cmpeqi	r2,r2,3
   112bc:	10000c26 	beq	r2,zero,112f0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   112c0:	e0bffe17 	ldw	r2,-8(fp)
   112c4:	10c00104 	addi	r3,r2,4
   112c8:	e0fffe15 	stw	r3,-8(fp)
   112cc:	10000015 	stw	zero,0(r2)
                      break;
   112d0:	00001206 	br	1131c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   112d4:	e0bffe17 	ldw	r2,-8(fp)
   112d8:	10c00104 	addi	r3,r2,4
   112dc:	e0fffe15 	stw	r3,-8(fp)
   112e0:	d0e82117 	ldw	r3,-24444(gp)
   112e4:	18c00917 	ldw	r3,36(r3)
   112e8:	10c00015 	stw	r3,0(r2)
                      break;
   112ec:	00000b06 	br	1131c <OSEventPendMulti+0x574>
   112f0:	e0bff317 	ldw	r2,-52(fp)
   112f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112f8:	e0bffa17 	ldw	r2,-24(fp)
   112fc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   11300:	e0bffd17 	ldw	r2,-12(fp)
   11304:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   11308:	e0800217 	ldw	r2,8(fp)
   1130c:	00c00044 	movi	r3,1
   11310:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   11314:	e0bff18b 	ldhu	r2,-58(fp)
   11318:	00002206 	br	113a4 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1131c:	e0800217 	ldw	r2,8(fp)
   11320:	10000005 	stb	zero,0(r2)
             break;
   11324:	00001006 	br	11368 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   11328:	e0bffe17 	ldw	r2,-8(fp)
   1132c:	10c00104 	addi	r3,r2,4
   11330:	e0fffe15 	stw	r3,-8(fp)
   11334:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   11338:	e0800217 	ldw	r2,8(fp)
   1133c:	00c00384 	movi	r3,14
   11340:	10c00005 	stb	r3,0(r2)
             break;
   11344:	00000806 	br	11368 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   11348:	e0bffe17 	ldw	r2,-8(fp)
   1134c:	10c00104 	addi	r3,r2,4
   11350:	e0fffe15 	stw	r3,-8(fp)
   11354:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   11358:	e0800217 	ldw	r2,8(fp)
   1135c:	00c00284 	movi	r3,10
   11360:	10c00005 	stb	r3,0(r2)
             break;
   11364:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   11368:	d0a82117 	ldw	r2,-24444(gp)
   1136c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   11370:	d0a82117 	ldw	r2,-24444(gp)
   11374:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   11378:	d0a82117 	ldw	r2,-24444(gp)
   1137c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   11380:	d0a82117 	ldw	r2,-24444(gp)
   11384:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   11388:	d0a82117 	ldw	r2,-24444(gp)
   1138c:	10000915 	stw	zero,36(r2)
   11390:	e0bff317 	ldw	r2,-52(fp)
   11394:	e0bffb15 	stw	r2,-20(fp)
   11398:	e0bffb17 	ldw	r2,-20(fp)
   1139c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   113a0:	e0bff18b 	ldhu	r2,-58(fp)
}
   113a4:	e037883a 	mov	sp,fp
   113a8:	dfc00117 	ldw	ra,4(sp)
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00204 	addi	sp,sp,8
   113b4:	f800283a 	ret

000113b8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   113b8:	defffe04 	addi	sp,sp,-8
   113bc:	dfc00115 	stw	ra,4(sp)
   113c0:	df000015 	stw	fp,0(sp)
   113c4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   113c8:	001bd7c0 	call	1bd7c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   113cc:	001212c0 	call	1212c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   113d0:	00121700 	call	12170 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   113d4:	00122d00 	call	122d0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   113d8:	00120500 	call	12050 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   113dc:	00142500 	call	14250 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   113e0:	0014b980 	call	14b98 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   113e4:	0015dcc0 	call	15dcc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   113e8:	00121d80 	call	121d8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   113ec:	00122540 	call	12254 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   113f0:	001bd980 	call	1bd98 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   113f4:	0012b3c0 	call	12b3c <OSDebugInit>
#endif
}
   113f8:	e037883a 	mov	sp,fp
   113fc:	dfc00117 	ldw	ra,4(sp)
   11400:	df000017 	ldw	fp,0(sp)
   11404:	dec00204 	addi	sp,sp,8
   11408:	f800283a 	ret

0001140c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1140c:	defffc04 	addi	sp,sp,-16
   11410:	df000315 	stw	fp,12(sp)
   11414:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11418:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   1141c:	d0a81243 	ldbu	r2,-24503(gp)
   11420:	10803fcc 	andi	r2,r2,255
   11424:	10800058 	cmpnei	r2,r2,1
   11428:	1000131e 	bne	r2,zero,11478 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1142c:	0005303a 	rdctl	r2,status
   11430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11434:	e0fffe17 	ldw	r3,-8(fp)
   11438:	00bfff84 	movi	r2,-2
   1143c:	1884703a 	and	r2,r3,r2
   11440:	1001703a 	wrctl	status,r2
  
  return context;
   11444:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11448:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   1144c:	d0a82003 	ldbu	r2,-24448(gp)
   11450:	10803fcc 	andi	r2,r2,255
   11454:	10803fe0 	cmpeqi	r2,r2,255
   11458:	1000031e 	bne	r2,zero,11468 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   1145c:	d0a82003 	ldbu	r2,-24448(gp)
   11460:	10800044 	addi	r2,r2,1
   11464:	d0a82005 	stb	r2,-24448(gp)
   11468:	e0bffd17 	ldw	r2,-12(fp)
   1146c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   11478:	e037883a 	mov	sp,fp
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00104 	addi	sp,sp,4
   11484:	f800283a 	ret

00011488 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   11488:	defffb04 	addi	sp,sp,-20
   1148c:	dfc00415 	stw	ra,16(sp)
   11490:	df000315 	stw	fp,12(sp)
   11494:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11498:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   1149c:	d0a81243 	ldbu	r2,-24503(gp)
   114a0:	10803fcc 	andi	r2,r2,255
   114a4:	10800058 	cmpnei	r2,r2,1
   114a8:	10002f1e 	bne	r2,zero,11568 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114ac:	0005303a 	rdctl	r2,status
   114b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114b4:	e0fffe17 	ldw	r3,-8(fp)
   114b8:	00bfff84 	movi	r2,-2
   114bc:	1884703a 	and	r2,r3,r2
   114c0:	1001703a 	wrctl	status,r2
  
  return context;
   114c4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   114c8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   114cc:	d0a82003 	ldbu	r2,-24448(gp)
   114d0:	10803fcc 	andi	r2,r2,255
   114d4:	10000326 	beq	r2,zero,114e4 <OSIntExit+0x5c>
            OSIntNesting--;
   114d8:	d0a82003 	ldbu	r2,-24448(gp)
   114dc:	10bfffc4 	addi	r2,r2,-1
   114e0:	d0a82005 	stb	r2,-24448(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   114e4:	d0a82003 	ldbu	r2,-24448(gp)
   114e8:	10803fcc 	andi	r2,r2,255
   114ec:	10001a1e 	bne	r2,zero,11558 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   114f0:	d0a81203 	ldbu	r2,-24504(gp)
   114f4:	10803fcc 	andi	r2,r2,255
   114f8:	1000171e 	bne	r2,zero,11558 <OSIntExit+0xd0>
                OS_SchedNew();
   114fc:	00125300 	call	12530 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   11500:	d0e81403 	ldbu	r3,-24496(gp)
   11504:	d0a81443 	ldbu	r2,-24495(gp)
   11508:	18c03fcc 	andi	r3,r3,255
   1150c:	10803fcc 	andi	r2,r2,255
   11510:	18801126 	beq	r3,r2,11558 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   11514:	d0a81403 	ldbu	r2,-24496(gp)
   11518:	10c03fcc 	andi	r3,r2,255
   1151c:	008000b4 	movhi	r2,2
   11520:	109f4c04 	addi	r2,r2,32048
   11524:	18c7883a 	add	r3,r3,r3
   11528:	18c7883a 	add	r3,r3,r3
   1152c:	10c5883a 	add	r2,r2,r3
   11530:	10800017 	ldw	r2,0(r2)
   11534:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   11538:	d0a81c17 	ldw	r2,-24464(gp)
   1153c:	10c00e17 	ldw	r3,56(r2)
   11540:	18c00044 	addi	r3,r3,1
   11544:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   11548:	d0a81717 	ldw	r2,-24484(gp)
   1154c:	10800044 	addi	r2,r2,1
   11550:	d0a81715 	stw	r2,-24484(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   11554:	001babc0 	call	1babc <OSCtxSw>
   11558:	e0bffd17 	ldw	r2,-12(fp)
   1155c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11560:	e0bfff17 	ldw	r2,-4(fp)
   11564:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11568:	e037883a 	mov	sp,fp
   1156c:	dfc00117 	ldw	ra,4(sp)
   11570:	df000017 	ldw	fp,0(sp)
   11574:	dec00204 	addi	sp,sp,8
   11578:	f800283a 	ret

0001157c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   1157c:	defffc04 	addi	sp,sp,-16
   11580:	df000315 	stw	fp,12(sp)
   11584:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11588:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   1158c:	d0a81243 	ldbu	r2,-24503(gp)
   11590:	10803fcc 	andi	r2,r2,255
   11594:	10800058 	cmpnei	r2,r2,1
   11598:	1000161e 	bne	r2,zero,115f4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1159c:	0005303a 	rdctl	r2,status
   115a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115a4:	e0fffe17 	ldw	r3,-8(fp)
   115a8:	00bfff84 	movi	r2,-2
   115ac:	1884703a 	and	r2,r3,r2
   115b0:	1001703a 	wrctl	status,r2
  
  return context;
   115b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   115b8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   115bc:	d0a82003 	ldbu	r2,-24448(gp)
   115c0:	10803fcc 	andi	r2,r2,255
   115c4:	1000071e 	bne	r2,zero,115e4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   115c8:	d0a81203 	ldbu	r2,-24504(gp)
   115cc:	10803fcc 	andi	r2,r2,255
   115d0:	10803fe0 	cmpeqi	r2,r2,255
   115d4:	1000031e 	bne	r2,zero,115e4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   115d8:	d0a81203 	ldbu	r2,-24504(gp)
   115dc:	10800044 	addi	r2,r2,1
   115e0:	d0a81205 	stb	r2,-24504(gp)
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115ec:	e0bfff17 	ldw	r2,-4(fp)
   115f0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   115f4:	e037883a 	mov	sp,fp
   115f8:	df000017 	ldw	fp,0(sp)
   115fc:	dec00104 	addi	sp,sp,4
   11600:	f800283a 	ret

00011604 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   11604:	defff804 	addi	sp,sp,-32
   11608:	dfc00715 	stw	ra,28(sp)
   1160c:	df000615 	stw	fp,24(sp)
   11610:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11614:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   11618:	d0a81243 	ldbu	r2,-24503(gp)
   1161c:	10803fcc 	andi	r2,r2,255
   11620:	10800058 	cmpnei	r2,r2,1
   11624:	1000281e 	bne	r2,zero,116c8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11628:	0005303a 	rdctl	r2,status
   1162c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11630:	e0fffb17 	ldw	r3,-20(fp)
   11634:	00bfff84 	movi	r2,-2
   11638:	1884703a 	and	r2,r3,r2
   1163c:	1001703a 	wrctl	status,r2
  
  return context;
   11640:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11644:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   11648:	d0a81203 	ldbu	r2,-24504(gp)
   1164c:	10803fcc 	andi	r2,r2,255
   11650:	10001926 	beq	r2,zero,116b8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   11654:	d0a81203 	ldbu	r2,-24504(gp)
   11658:	10bfffc4 	addi	r2,r2,-1
   1165c:	d0a81205 	stb	r2,-24504(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   11660:	d0a81203 	ldbu	r2,-24504(gp)
   11664:	10803fcc 	andi	r2,r2,255
   11668:	10000e1e 	bne	r2,zero,116a4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   1166c:	d0a82003 	ldbu	r2,-24448(gp)
   11670:	10803fcc 	andi	r2,r2,255
   11674:	1000061e 	bne	r2,zero,11690 <OSSchedUnlock+0x8c>
   11678:	e0bffa17 	ldw	r2,-24(fp)
   1167c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11680:	e0bffc17 	ldw	r2,-16(fp)
   11684:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   11688:	00124640 	call	12464 <OS_Sched>
   1168c:	00000e06 	br	116c8 <OSSchedUnlock+0xc4>
   11690:	e0bffa17 	ldw	r2,-24(fp)
   11694:	e0bffd15 	stw	r2,-12(fp)
   11698:	e0bffd17 	ldw	r2,-12(fp)
   1169c:	1001703a 	wrctl	status,r2
   116a0:	00000906 	br	116c8 <OSSchedUnlock+0xc4>
   116a4:	e0bffa17 	ldw	r2,-24(fp)
   116a8:	e0bffe15 	stw	r2,-8(fp)
   116ac:	e0bffe17 	ldw	r2,-8(fp)
   116b0:	1001703a 	wrctl	status,r2
   116b4:	00000406 	br	116c8 <OSSchedUnlock+0xc4>
   116b8:	e0bffa17 	ldw	r2,-24(fp)
   116bc:	e0bfff15 	stw	r2,-4(fp)
   116c0:	e0bfff17 	ldw	r2,-4(fp)
   116c4:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   116c8:	e037883a 	mov	sp,fp
   116cc:	dfc00117 	ldw	ra,4(sp)
   116d0:	df000017 	ldw	fp,0(sp)
   116d4:	dec00204 	addi	sp,sp,8
   116d8:	f800283a 	ret

000116dc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   116dc:	defffe04 	addi	sp,sp,-8
   116e0:	dfc00115 	stw	ra,4(sp)
   116e4:	df000015 	stw	fp,0(sp)
   116e8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   116ec:	d0a81243 	ldbu	r2,-24503(gp)
   116f0:	10803fcc 	andi	r2,r2,255
   116f4:	10000f1e 	bne	r2,zero,11734 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   116f8:	00125300 	call	12530 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   116fc:	d0a81403 	ldbu	r2,-24496(gp)
   11700:	d0a81445 	stb	r2,-24495(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   11704:	d0a81403 	ldbu	r2,-24496(gp)
   11708:	10c03fcc 	andi	r3,r2,255
   1170c:	008000b4 	movhi	r2,2
   11710:	109f4c04 	addi	r2,r2,32048
   11714:	18c7883a 	add	r3,r3,r3
   11718:	18c7883a 	add	r3,r3,r3
   1171c:	10c5883a 	add	r2,r2,r3
   11720:	10800017 	ldw	r2,0(r2)
   11724:	d0a81c15 	stw	r2,-24464(gp)
        OSTCBCur      = OSTCBHighRdy;
   11728:	d0a81c17 	ldw	r2,-24464(gp)
   1172c:	d0a82115 	stw	r2,-24444(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   11730:	001bb480 	call	1bb48 <OSStartHighRdy>
    }
}
   11734:	e037883a 	mov	sp,fp
   11738:	dfc00117 	ldw	ra,4(sp)
   1173c:	df000017 	ldw	fp,0(sp)
   11740:	dec00204 	addi	sp,sp,8
   11744:	f800283a 	ret

00011748 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   11748:	defff904 	addi	sp,sp,-28
   1174c:	dfc00615 	stw	ra,24(sp)
   11750:	df000515 	stw	fp,20(sp)
   11754:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11758:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   1175c:	01000084 	movi	r4,2
   11760:	00182740 	call	18274 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11764:	0005303a 	rdctl	r2,status
   11768:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1176c:	e0fffc17 	ldw	r3,-16(fp)
   11770:	00bfff84 	movi	r2,-2
   11774:	1884703a 	and	r2,r3,r2
   11778:	1001703a 	wrctl	status,r2
  
  return context;
   1177c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   11780:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   11784:	d0281315 	stw	zero,-24500(gp)
   11788:	e0bffb17 	ldw	r2,-20(fp)
   1178c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   11798:	0009883a 	mov	r4,zero
   1179c:	00182740 	call	18274 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117a0:	0005303a 	rdctl	r2,status
   117a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117a8:	e0fffe17 	ldw	r3,-8(fp)
   117ac:	00bfff84 	movi	r2,-2
   117b0:	1884703a 	and	r2,r3,r2
   117b4:	1001703a 	wrctl	status,r2
  
  return context;
   117b8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   117bc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   117c0:	d0a81317 	ldw	r2,-24500(gp)
   117c4:	d0a81815 	stw	r2,-24480(gp)
    OSStatRdy    = OS_TRUE;
   117c8:	00800044 	movi	r2,1
   117cc:	d0a82405 	stb	r2,-24432(gp)
   117d0:	e0bffb17 	ldw	r2,-20(fp)
   117d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117d8:	e0bfff17 	ldw	r2,-4(fp)
   117dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   117e0:	e037883a 	mov	sp,fp
   117e4:	dfc00117 	ldw	ra,4(sp)
   117e8:	df000017 	ldw	fp,0(sp)
   117ec:	dec00204 	addi	sp,sp,8
   117f0:	f800283a 	ret

000117f4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   117f4:	defff704 	addi	sp,sp,-36
   117f8:	dfc00815 	stw	ra,32(sp)
   117fc:	df000715 	stw	fp,28(sp)
   11800:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11804:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   11808:	001bd600 	call	1bd60 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1180c:	0005303a 	rdctl	r2,status
   11810:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11814:	e0fffc17 	ldw	r3,-16(fp)
   11818:	00bfff84 	movi	r2,-2
   1181c:	1884703a 	and	r2,r3,r2
   11820:	1001703a 	wrctl	status,r2
  
  return context;
   11824:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   11828:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1182c:	d0a82217 	ldw	r2,-24440(gp)
   11830:	10800044 	addi	r2,r2,1
   11834:	d0a82215 	stw	r2,-24440(gp)
   11838:	e0bffb17 	ldw	r2,-20(fp)
   1183c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11840:	e0bffd17 	ldw	r2,-12(fp)
   11844:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   11848:	d0a81243 	ldbu	r2,-24503(gp)
   1184c:	10803fcc 	andi	r2,r2,255
   11850:	10800058 	cmpnei	r2,r2,1
   11854:	1000691e 	bne	r2,zero,119fc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   11858:	d0a81603 	ldbu	r2,-24488(gp)
   1185c:	10803fcc 	andi	r2,r2,255
   11860:	10c00060 	cmpeqi	r3,r2,1
   11864:	1800061e 	bne	r3,zero,11880 <OSTimeTick+0x8c>
   11868:	10c000a0 	cmpeqi	r3,r2,2
   1186c:	1800061e 	bne	r3,zero,11888 <OSTimeTick+0x94>
   11870:	10000a1e 	bne	r2,zero,1189c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   11874:	00800044 	movi	r2,1
   11878:	e0bffa05 	stb	r2,-24(fp)
                 break;
   1187c:	00000b06 	br	118ac <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   11880:	e03ffa05 	stb	zero,-24(fp)
                 break;
   11884:	00000906 	br	118ac <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   11888:	00800044 	movi	r2,1
   1188c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   11890:	00800044 	movi	r2,1
   11894:	d0a81605 	stb	r2,-24488(gp)
                 break;
   11898:	00000406 	br	118ac <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1189c:	00800044 	movi	r2,1
   118a0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   118a4:	d0281605 	stb	zero,-24488(gp)
                 break;
   118a8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   118ac:	e0bffa03 	ldbu	r2,-24(fp)
   118b0:	1000011e 	bne	r2,zero,118b8 <OSTimeTick+0xc4>
            return;
   118b4:	00005106 	br	119fc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   118b8:	d0a81517 	ldw	r2,-24492(gp)
   118bc:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   118c0:	00004906 	br	119e8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118c4:	0005303a 	rdctl	r2,status
   118c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118cc:	e0fffe17 	ldw	r3,-8(fp)
   118d0:	00bfff84 	movi	r2,-2
   118d4:	1884703a 	and	r2,r3,r2
   118d8:	1001703a 	wrctl	status,r2
  
  return context;
   118dc:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   118e0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   118e4:	e0bff917 	ldw	r2,-28(fp)
   118e8:	10800b8b 	ldhu	r2,46(r2)
   118ec:	10bfffcc 	andi	r2,r2,65535
   118f0:	10003626 	beq	r2,zero,119cc <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   118f4:	e0bff917 	ldw	r2,-28(fp)
   118f8:	10800b8b 	ldhu	r2,46(r2)
   118fc:	10bfffc4 	addi	r2,r2,-1
   11900:	1007883a 	mov	r3,r2
   11904:	e0bff917 	ldw	r2,-28(fp)
   11908:	10c00b8d 	sth	r3,46(r2)
   1190c:	e0bff917 	ldw	r2,-28(fp)
   11910:	10800b8b 	ldhu	r2,46(r2)
   11914:	10bfffcc 	andi	r2,r2,65535
   11918:	10002c1e 	bne	r2,zero,119cc <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1191c:	e0bff917 	ldw	r2,-28(fp)
   11920:	10800c03 	ldbu	r2,48(r2)
   11924:	10803fcc 	andi	r2,r2,255
   11928:	10800dcc 	andi	r2,r2,55
   1192c:	10000b26 	beq	r2,zero,1195c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   11930:	e0bff917 	ldw	r2,-28(fp)
   11934:	10c00c03 	ldbu	r3,48(r2)
   11938:	00bff204 	movi	r2,-56
   1193c:	1884703a 	and	r2,r3,r2
   11940:	1007883a 	mov	r3,r2
   11944:	e0bff917 	ldw	r2,-28(fp)
   11948:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   1194c:	e0bff917 	ldw	r2,-28(fp)
   11950:	00c00044 	movi	r3,1
   11954:	10c00c45 	stb	r3,49(r2)
   11958:	00000206 	br	11964 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1195c:	e0bff917 	ldw	r2,-28(fp)
   11960:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   11964:	e0bff917 	ldw	r2,-28(fp)
   11968:	10800c03 	ldbu	r2,48(r2)
   1196c:	10803fcc 	andi	r2,r2,255
   11970:	1080020c 	andi	r2,r2,8
   11974:	1000151e 	bne	r2,zero,119cc <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   11978:	e0bff917 	ldw	r2,-28(fp)
   1197c:	10c00d83 	ldbu	r3,54(r2)
   11980:	d0a81e03 	ldbu	r2,-24456(gp)
   11984:	1884b03a 	or	r2,r3,r2
   11988:	d0a81e05 	stb	r2,-24456(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1198c:	e0bff917 	ldw	r2,-28(fp)
   11990:	10800d03 	ldbu	r2,52(r2)
   11994:	10c03fcc 	andi	r3,r2,255
   11998:	e0bff917 	ldw	r2,-28(fp)
   1199c:	10800d03 	ldbu	r2,52(r2)
   119a0:	11003fcc 	andi	r4,r2,255
   119a4:	d0a81e44 	addi	r2,gp,-24455
   119a8:	2085883a 	add	r2,r4,r2
   119ac:	11000003 	ldbu	r4,0(r2)
   119b0:	e0bff917 	ldw	r2,-28(fp)
   119b4:	10800d43 	ldbu	r2,53(r2)
   119b8:	2084b03a 	or	r2,r4,r2
   119bc:	1009883a 	mov	r4,r2
   119c0:	d0a81e44 	addi	r2,gp,-24455
   119c4:	1885883a 	add	r2,r3,r2
   119c8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   119cc:	e0bff917 	ldw	r2,-28(fp)
   119d0:	10800517 	ldw	r2,20(r2)
   119d4:	e0bff915 	stw	r2,-28(fp)
   119d8:	e0bffb17 	ldw	r2,-20(fp)
   119dc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119e0:	e0bfff17 	ldw	r2,-4(fp)
   119e4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   119e8:	e0bff917 	ldw	r2,-28(fp)
   119ec:	10800c83 	ldbu	r2,50(r2)
   119f0:	10803fcc 	andi	r2,r2,255
   119f4:	10800518 	cmpnei	r2,r2,20
   119f8:	103fb21e 	bne	r2,zero,118c4 <__alt_mem_Flash_flash_data+0xf40118c4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   119fc:	e037883a 	mov	sp,fp
   11a00:	dfc00117 	ldw	ra,4(sp)
   11a04:	df000017 	ldw	fp,0(sp)
   11a08:	dec00204 	addi	sp,sp,8
   11a0c:	f800283a 	ret

00011a10 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   11a10:	deffff04 	addi	sp,sp,-4
   11a14:	df000015 	stw	fp,0(sp)
   11a18:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   11a1c:	00804784 	movi	r2,286
}
   11a20:	e037883a 	mov	sp,fp
   11a24:	df000017 	ldw	fp,0(sp)
   11a28:	dec00104 	addi	sp,sp,4
   11a2c:	f800283a 	ret

00011a30 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   11a30:	deffff04 	addi	sp,sp,-4
   11a34:	df000015 	stw	fp,0(sp)
   11a38:	d839883a 	mov	fp,sp
}
   11a3c:	e037883a 	mov	sp,fp
   11a40:	df000017 	ldw	fp,0(sp)
   11a44:	dec00104 	addi	sp,sp,4
   11a48:	f800283a 	ret

00011a4c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   11a4c:	defff804 	addi	sp,sp,-32
   11a50:	dfc00715 	stw	ra,28(sp)
   11a54:	df000615 	stw	fp,24(sp)
   11a58:	df000604 	addi	fp,sp,24
   11a5c:	e13ffc15 	stw	r4,-16(fp)
   11a60:	e17ffd15 	stw	r5,-12(fp)
   11a64:	3007883a 	mov	r3,r6
   11a68:	3805883a 	mov	r2,r7
   11a6c:	e0fffe05 	stb	r3,-8(fp)
   11a70:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11a74:	e0bffc17 	ldw	r2,-16(fp)
   11a78:	10800283 	ldbu	r2,10(r2)
   11a7c:	10c03fcc 	andi	r3,r2,255
   11a80:	008000b4 	movhi	r2,2
   11a84:	10b23904 	addi	r2,r2,-14108
   11a88:	10c5883a 	add	r2,r2,r3
   11a8c:	10800003 	ldbu	r2,0(r2)
   11a90:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11a94:	e0bffa03 	ldbu	r2,-24(fp)
   11a98:	e0fffc17 	ldw	r3,-16(fp)
   11a9c:	1885883a 	add	r2,r3,r2
   11aa0:	10800204 	addi	r2,r2,8
   11aa4:	108000c3 	ldbu	r2,3(r2)
   11aa8:	10c03fcc 	andi	r3,r2,255
   11aac:	008000b4 	movhi	r2,2
   11ab0:	10b23904 	addi	r2,r2,-14108
   11ab4:	10c5883a 	add	r2,r2,r3
   11ab8:	10800003 	ldbu	r2,0(r2)
   11abc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11ac0:	e0bffa03 	ldbu	r2,-24(fp)
   11ac4:	100490fa 	slli	r2,r2,3
   11ac8:	1007883a 	mov	r3,r2
   11acc:	e0bffa43 	ldbu	r2,-23(fp)
   11ad0:	1885883a 	add	r2,r3,r2
   11ad4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11ad8:	e0fffa83 	ldbu	r3,-22(fp)
   11adc:	008000b4 	movhi	r2,2
   11ae0:	109f4c04 	addi	r2,r2,32048
   11ae4:	18c7883a 	add	r3,r3,r3
   11ae8:	18c7883a 	add	r3,r3,r3
   11aec:	10c5883a 	add	r2,r2,r3
   11af0:	10800017 	ldw	r2,0(r2)
   11af4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11af8:	e0bffb17 	ldw	r2,-20(fp)
   11afc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11b00:	e0bffb17 	ldw	r2,-20(fp)
   11b04:	e0fffd17 	ldw	r3,-12(fp)
   11b08:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11b0c:	e0bffb17 	ldw	r2,-20(fp)
   11b10:	10800c03 	ldbu	r2,48(r2)
   11b14:	1007883a 	mov	r3,r2
   11b18:	e0bffe03 	ldbu	r2,-8(fp)
   11b1c:	0084303a 	nor	r2,zero,r2
   11b20:	1884703a 	and	r2,r3,r2
   11b24:	1007883a 	mov	r3,r2
   11b28:	e0bffb17 	ldw	r2,-20(fp)
   11b2c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11b30:	e0bffb17 	ldw	r2,-20(fp)
   11b34:	e0ffff03 	ldbu	r3,-4(fp)
   11b38:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11b3c:	e0bffb17 	ldw	r2,-20(fp)
   11b40:	10800c03 	ldbu	r2,48(r2)
   11b44:	10803fcc 	andi	r2,r2,255
   11b48:	1080020c 	andi	r2,r2,8
   11b4c:	1000111e 	bne	r2,zero,11b94 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11b50:	e0bffb17 	ldw	r2,-20(fp)
   11b54:	10c00d83 	ldbu	r3,54(r2)
   11b58:	d0a81e03 	ldbu	r2,-24456(gp)
   11b5c:	1884b03a 	or	r2,r3,r2
   11b60:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11b64:	e0fffa03 	ldbu	r3,-24(fp)
   11b68:	e13ffa03 	ldbu	r4,-24(fp)
   11b6c:	d0a81e44 	addi	r2,gp,-24455
   11b70:	2085883a 	add	r2,r4,r2
   11b74:	11000003 	ldbu	r4,0(r2)
   11b78:	e0bffb17 	ldw	r2,-20(fp)
   11b7c:	10800d43 	ldbu	r2,53(r2)
   11b80:	2084b03a 	or	r2,r4,r2
   11b84:	1009883a 	mov	r4,r2
   11b88:	d0a81e44 	addi	r2,gp,-24455
   11b8c:	1885883a 	add	r2,r3,r2
   11b90:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11b94:	e13ffb17 	ldw	r4,-20(fp)
   11b98:	e17ffc17 	ldw	r5,-16(fp)
   11b9c:	0011e3c0 	call	11e3c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11ba0:	e0bffb17 	ldw	r2,-20(fp)
   11ba4:	10800817 	ldw	r2,32(r2)
   11ba8:	10000826 	beq	r2,zero,11bcc <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11bac:	e0bffb17 	ldw	r2,-20(fp)
   11bb0:	10800817 	ldw	r2,32(r2)
   11bb4:	e13ffb17 	ldw	r4,-20(fp)
   11bb8:	100b883a 	mov	r5,r2
   11bbc:	0011ef00 	call	11ef0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11bc0:	e0bffb17 	ldw	r2,-20(fp)
   11bc4:	e0fffc17 	ldw	r3,-16(fp)
   11bc8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   11bcc:	e0bffa83 	ldbu	r2,-22(fp)
}
   11bd0:	e037883a 	mov	sp,fp
   11bd4:	dfc00117 	ldw	ra,4(sp)
   11bd8:	df000017 	ldw	fp,0(sp)
   11bdc:	dec00204 	addi	sp,sp,8
   11be0:	f800283a 	ret

00011be4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   11be4:	defffd04 	addi	sp,sp,-12
   11be8:	df000215 	stw	fp,8(sp)
   11bec:	df000204 	addi	fp,sp,8
   11bf0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   11bf4:	d0a82117 	ldw	r2,-24444(gp)
   11bf8:	e0ffff17 	ldw	r3,-4(fp)
   11bfc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11c00:	d0a82117 	ldw	r2,-24444(gp)
   11c04:	10800d03 	ldbu	r2,52(r2)
   11c08:	10803fcc 	andi	r2,r2,255
   11c0c:	d0e82117 	ldw	r3,-24444(gp)
   11c10:	18c00d03 	ldbu	r3,52(r3)
   11c14:	18c03fcc 	andi	r3,r3,255
   11c18:	e13fff17 	ldw	r4,-4(fp)
   11c1c:	20c7883a 	add	r3,r4,r3
   11c20:	18c00204 	addi	r3,r3,8
   11c24:	190000c3 	ldbu	r4,3(r3)
   11c28:	d0e82117 	ldw	r3,-24444(gp)
   11c2c:	18c00d43 	ldbu	r3,53(r3)
   11c30:	20c6b03a 	or	r3,r4,r3
   11c34:	1809883a 	mov	r4,r3
   11c38:	e0ffff17 	ldw	r3,-4(fp)
   11c3c:	1885883a 	add	r2,r3,r2
   11c40:	10800204 	addi	r2,r2,8
   11c44:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11c48:	e0bfff17 	ldw	r2,-4(fp)
   11c4c:	10c00283 	ldbu	r3,10(r2)
   11c50:	d0a82117 	ldw	r2,-24444(gp)
   11c54:	10800d83 	ldbu	r2,54(r2)
   11c58:	1884b03a 	or	r2,r3,r2
   11c5c:	1007883a 	mov	r3,r2
   11c60:	e0bfff17 	ldw	r2,-4(fp)
   11c64:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11c68:	d0a82117 	ldw	r2,-24444(gp)
   11c6c:	10800d03 	ldbu	r2,52(r2)
   11c70:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11c74:	e0fffe03 	ldbu	r3,-8(fp)
   11c78:	e13ffe03 	ldbu	r4,-8(fp)
   11c7c:	d0a81e44 	addi	r2,gp,-24455
   11c80:	2085883a 	add	r2,r4,r2
   11c84:	10800003 	ldbu	r2,0(r2)
   11c88:	1009883a 	mov	r4,r2
   11c8c:	d0a82117 	ldw	r2,-24444(gp)
   11c90:	10800d43 	ldbu	r2,53(r2)
   11c94:	0084303a 	nor	r2,zero,r2
   11c98:	2084703a 	and	r2,r4,r2
   11c9c:	1009883a 	mov	r4,r2
   11ca0:	d0a81e44 	addi	r2,gp,-24455
   11ca4:	1885883a 	add	r2,r3,r2
   11ca8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11cac:	e0fffe03 	ldbu	r3,-8(fp)
   11cb0:	d0a81e44 	addi	r2,gp,-24455
   11cb4:	1885883a 	add	r2,r3,r2
   11cb8:	10800003 	ldbu	r2,0(r2)
   11cbc:	10803fcc 	andi	r2,r2,255
   11cc0:	1000071e 	bne	r2,zero,11ce0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11cc4:	d0a82117 	ldw	r2,-24444(gp)
   11cc8:	10800d83 	ldbu	r2,54(r2)
   11ccc:	0084303a 	nor	r2,zero,r2
   11cd0:	1007883a 	mov	r3,r2
   11cd4:	d0a81e03 	ldbu	r2,-24456(gp)
   11cd8:	1884703a 	and	r2,r3,r2
   11cdc:	d0a81e05 	stb	r2,-24456(gp)
    }
}
   11ce0:	e037883a 	mov	sp,fp
   11ce4:	df000017 	ldw	fp,0(sp)
   11ce8:	dec00104 	addi	sp,sp,4
   11cec:	f800283a 	ret

00011cf0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   11cf0:	defffb04 	addi	sp,sp,-20
   11cf4:	df000415 	stw	fp,16(sp)
   11cf8:	df000404 	addi	fp,sp,16
   11cfc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   11d00:	d0a82117 	ldw	r2,-24444(gp)
   11d04:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11d08:	d0a82117 	ldw	r2,-24444(gp)
   11d0c:	e0ffff17 	ldw	r3,-4(fp)
   11d10:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   11d14:	e0bfff17 	ldw	r2,-4(fp)
   11d18:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	10800017 	ldw	r2,0(r2)
   11d24:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11d28:	00002006 	br	11dac <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   11d2c:	d0a82117 	ldw	r2,-24444(gp)
   11d30:	10800d03 	ldbu	r2,52(r2)
   11d34:	10803fcc 	andi	r2,r2,255
   11d38:	d0e82117 	ldw	r3,-24444(gp)
   11d3c:	18c00d03 	ldbu	r3,52(r3)
   11d40:	18c03fcc 	andi	r3,r3,255
   11d44:	e13ffd17 	ldw	r4,-12(fp)
   11d48:	20c7883a 	add	r3,r4,r3
   11d4c:	18c00204 	addi	r3,r3,8
   11d50:	190000c3 	ldbu	r4,3(r3)
   11d54:	d0e82117 	ldw	r3,-24444(gp)
   11d58:	18c00d43 	ldbu	r3,53(r3)
   11d5c:	20c6b03a 	or	r3,r4,r3
   11d60:	1809883a 	mov	r4,r3
   11d64:	e0fffd17 	ldw	r3,-12(fp)
   11d68:	1885883a 	add	r2,r3,r2
   11d6c:	10800204 	addi	r2,r2,8
   11d70:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11d74:	e0bffd17 	ldw	r2,-12(fp)
   11d78:	10c00283 	ldbu	r3,10(r2)
   11d7c:	d0a82117 	ldw	r2,-24444(gp)
   11d80:	10800d83 	ldbu	r2,54(r2)
   11d84:	1884b03a 	or	r2,r3,r2
   11d88:	1007883a 	mov	r3,r2
   11d8c:	e0bffd17 	ldw	r2,-12(fp)
   11d90:	10c00285 	stb	r3,10(r2)
        pevents++;
   11d94:	e0bffc17 	ldw	r2,-16(fp)
   11d98:	10800104 	addi	r2,r2,4
   11d9c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11da0:	e0bffc17 	ldw	r2,-16(fp)
   11da4:	10800017 	ldw	r2,0(r2)
   11da8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11dac:	e0bffd17 	ldw	r2,-12(fp)
   11db0:	103fde1e 	bne	r2,zero,11d2c <__alt_mem_Flash_flash_data+0xf4011d2c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11db4:	d0a82117 	ldw	r2,-24444(gp)
   11db8:	10800d03 	ldbu	r2,52(r2)
   11dbc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11dc0:	e0fffe03 	ldbu	r3,-8(fp)
   11dc4:	e13ffe03 	ldbu	r4,-8(fp)
   11dc8:	d0a81e44 	addi	r2,gp,-24455
   11dcc:	2085883a 	add	r2,r4,r2
   11dd0:	10800003 	ldbu	r2,0(r2)
   11dd4:	1009883a 	mov	r4,r2
   11dd8:	d0a82117 	ldw	r2,-24444(gp)
   11ddc:	10800d43 	ldbu	r2,53(r2)
   11de0:	0084303a 	nor	r2,zero,r2
   11de4:	2084703a 	and	r2,r4,r2
   11de8:	1009883a 	mov	r4,r2
   11dec:	d0a81e44 	addi	r2,gp,-24455
   11df0:	1885883a 	add	r2,r3,r2
   11df4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11df8:	e0fffe03 	ldbu	r3,-8(fp)
   11dfc:	d0a81e44 	addi	r2,gp,-24455
   11e00:	1885883a 	add	r2,r3,r2
   11e04:	10800003 	ldbu	r2,0(r2)
   11e08:	10803fcc 	andi	r2,r2,255
   11e0c:	1000071e 	bne	r2,zero,11e2c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11e10:	d0a82117 	ldw	r2,-24444(gp)
   11e14:	10800d83 	ldbu	r2,54(r2)
   11e18:	0084303a 	nor	r2,zero,r2
   11e1c:	1007883a 	mov	r3,r2
   11e20:	d0a81e03 	ldbu	r2,-24456(gp)
   11e24:	1884703a 	and	r2,r3,r2
   11e28:	d0a81e05 	stb	r2,-24456(gp)
    }
}
   11e2c:	e037883a 	mov	sp,fp
   11e30:	df000017 	ldw	fp,0(sp)
   11e34:	dec00104 	addi	sp,sp,4
   11e38:	f800283a 	ret

00011e3c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   11e3c:	defffc04 	addi	sp,sp,-16
   11e40:	df000315 	stw	fp,12(sp)
   11e44:	df000304 	addi	fp,sp,12
   11e48:	e13ffe15 	stw	r4,-8(fp)
   11e4c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   11e50:	e0bffe17 	ldw	r2,-8(fp)
   11e54:	10800d03 	ldbu	r2,52(r2)
   11e58:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   11e5c:	e0bffd03 	ldbu	r2,-12(fp)
   11e60:	e0fffd03 	ldbu	r3,-12(fp)
   11e64:	e13fff17 	ldw	r4,-4(fp)
   11e68:	20c7883a 	add	r3,r4,r3
   11e6c:	18c00204 	addi	r3,r3,8
   11e70:	18c000c3 	ldbu	r3,3(r3)
   11e74:	1809883a 	mov	r4,r3
   11e78:	e0fffe17 	ldw	r3,-8(fp)
   11e7c:	18c00d43 	ldbu	r3,53(r3)
   11e80:	00c6303a 	nor	r3,zero,r3
   11e84:	20c6703a 	and	r3,r4,r3
   11e88:	1809883a 	mov	r4,r3
   11e8c:	e0ffff17 	ldw	r3,-4(fp)
   11e90:	1885883a 	add	r2,r3,r2
   11e94:	10800204 	addi	r2,r2,8
   11e98:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   11e9c:	e0bffd03 	ldbu	r2,-12(fp)
   11ea0:	e0ffff17 	ldw	r3,-4(fp)
   11ea4:	1885883a 	add	r2,r3,r2
   11ea8:	10800204 	addi	r2,r2,8
   11eac:	108000c3 	ldbu	r2,3(r2)
   11eb0:	10803fcc 	andi	r2,r2,255
   11eb4:	10000a1e 	bne	r2,zero,11ee0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	10800283 	ldbu	r2,10(r2)
   11ec0:	1007883a 	mov	r3,r2
   11ec4:	e0bffe17 	ldw	r2,-8(fp)
   11ec8:	10800d83 	ldbu	r2,54(r2)
   11ecc:	0084303a 	nor	r2,zero,r2
   11ed0:	1884703a 	and	r2,r3,r2
   11ed4:	1007883a 	mov	r3,r2
   11ed8:	e0bfff17 	ldw	r2,-4(fp)
   11edc:	10c00285 	stb	r3,10(r2)
    }
}
   11ee0:	e037883a 	mov	sp,fp
   11ee4:	df000017 	ldw	fp,0(sp)
   11ee8:	dec00104 	addi	sp,sp,4
   11eec:	f800283a 	ret

00011ef0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11ef0:	defffa04 	addi	sp,sp,-24
   11ef4:	df000515 	stw	fp,20(sp)
   11ef8:	df000504 	addi	fp,sp,20
   11efc:	e13ffe15 	stw	r4,-8(fp)
   11f00:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11f04:	e0bffe17 	ldw	r2,-8(fp)
   11f08:	10800d03 	ldbu	r2,52(r2)
   11f0c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   11f10:	e0bffe17 	ldw	r2,-8(fp)
   11f14:	10800d83 	ldbu	r2,54(r2)
   11f18:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   11f1c:	e0bffe17 	ldw	r2,-8(fp)
   11f20:	10800d43 	ldbu	r2,53(r2)
   11f24:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   11f28:	e0bfff17 	ldw	r2,-4(fp)
   11f2c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   11f30:	e0bffb17 	ldw	r2,-20(fp)
   11f34:	10800017 	ldw	r2,0(r2)
   11f38:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11f3c:	00002506 	br	11fd4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   11f40:	e0bffd03 	ldbu	r2,-12(fp)
   11f44:	e0fffd03 	ldbu	r3,-12(fp)
   11f48:	e13ffc17 	ldw	r4,-16(fp)
   11f4c:	20c7883a 	add	r3,r4,r3
   11f50:	18c00204 	addi	r3,r3,8
   11f54:	18c000c3 	ldbu	r3,3(r3)
   11f58:	1809883a 	mov	r4,r3
   11f5c:	e0fffd83 	ldbu	r3,-10(fp)
   11f60:	00c6303a 	nor	r3,zero,r3
   11f64:	20c6703a 	and	r3,r4,r3
   11f68:	1809883a 	mov	r4,r3
   11f6c:	e0fffc17 	ldw	r3,-16(fp)
   11f70:	1885883a 	add	r2,r3,r2
   11f74:	10800204 	addi	r2,r2,8
   11f78:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11f7c:	e0bffd03 	ldbu	r2,-12(fp)
   11f80:	e0fffc17 	ldw	r3,-16(fp)
   11f84:	1885883a 	add	r2,r3,r2
   11f88:	10800204 	addi	r2,r2,8
   11f8c:	108000c3 	ldbu	r2,3(r2)
   11f90:	10803fcc 	andi	r2,r2,255
   11f94:	1000091e 	bne	r2,zero,11fbc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   11f98:	e0bffc17 	ldw	r2,-16(fp)
   11f9c:	10800283 	ldbu	r2,10(r2)
   11fa0:	1007883a 	mov	r3,r2
   11fa4:	e0bffd43 	ldbu	r2,-11(fp)
   11fa8:	0084303a 	nor	r2,zero,r2
   11fac:	1884703a 	and	r2,r3,r2
   11fb0:	1007883a 	mov	r3,r2
   11fb4:	e0bffc17 	ldw	r2,-16(fp)
   11fb8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   11fbc:	e0bffb17 	ldw	r2,-20(fp)
   11fc0:	10800104 	addi	r2,r2,4
   11fc4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   11fc8:	e0bffb17 	ldw	r2,-20(fp)
   11fcc:	10800017 	ldw	r2,0(r2)
   11fd0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11fd4:	e0bffc17 	ldw	r2,-16(fp)
   11fd8:	103fd91e 	bne	r2,zero,11f40 <__alt_mem_Flash_flash_data+0xf4011f40>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   11fdc:	e037883a 	mov	sp,fp
   11fe0:	df000017 	ldw	fp,0(sp)
   11fe4:	dec00104 	addi	sp,sp,4
   11fe8:	f800283a 	ret

00011fec <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   11fec:	defffc04 	addi	sp,sp,-16
   11ff0:	df000315 	stw	fp,12(sp)
   11ff4:	df000304 	addi	fp,sp,12
   11ff8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11ffc:	e0bfff17 	ldw	r2,-4(fp)
   12000:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   12004:	e0bfff17 	ldw	r2,-4(fp)
   12008:	108002c4 	addi	r2,r2,11
   1200c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12010:	e03ffe05 	stb	zero,-8(fp)
   12014:	00000706 	br	12034 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   12018:	e0bffd17 	ldw	r2,-12(fp)
   1201c:	10c00044 	addi	r3,r2,1
   12020:	e0fffd15 	stw	r3,-12(fp)
   12024:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12028:	e0bffe03 	ldbu	r2,-8(fp)
   1202c:	10800044 	addi	r2,r2,1
   12030:	e0bffe05 	stb	r2,-8(fp)
   12034:	e0bffe03 	ldbu	r2,-8(fp)
   12038:	108000f0 	cmpltui	r2,r2,3
   1203c:	103ff61e 	bne	r2,zero,12018 <__alt_mem_Flash_flash_data+0xf4012018>
        *ptbl++ = 0;
    }
}
   12040:	e037883a 	mov	sp,fp
   12044:	df000017 	ldw	fp,0(sp)
   12048:	dec00104 	addi	sp,sp,4
   1204c:	f800283a 	ret

00012050 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   12050:	defffb04 	addi	sp,sp,-20
   12054:	dfc00415 	stw	ra,16(sp)
   12058:	df000315 	stw	fp,12(sp)
   1205c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   12060:	010000b4 	movhi	r4,2
   12064:	211b3804 	addi	r4,r4,27872
   12068:	0142d004 	movi	r5,2880
   1206c:	00123b00 	call	123b0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   12070:	008000b4 	movhi	r2,2
   12074:	109b3804 	addi	r2,r2,27872
   12078:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1207c:	008000b4 	movhi	r2,2
   12080:	109b4404 	addi	r2,r2,27920
   12084:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12088:	e03ffd0d 	sth	zero,-12(fp)
   1208c:	00001306 	br	120dc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12090:	e0bffe17 	ldw	r2,-8(fp)
   12094:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   12098:	e0bffe17 	ldw	r2,-8(fp)
   1209c:	e0ffff17 	ldw	r3,-4(fp)
   120a0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   120a4:	e0bffe17 	ldw	r2,-8(fp)
   120a8:	00c00fc4 	movi	r3,63
   120ac:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   120b0:	e0bffe17 	ldw	r2,-8(fp)
   120b4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   120b8:	e0bffe17 	ldw	r2,-8(fp)
   120bc:	10800c04 	addi	r2,r2,48
   120c0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   120c4:	e0bfff17 	ldw	r2,-4(fp)
   120c8:	10800c04 	addi	r2,r2,48
   120cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   120d0:	e0bffd0b 	ldhu	r2,-12(fp)
   120d4:	10800044 	addi	r2,r2,1
   120d8:	e0bffd0d 	sth	r2,-12(fp)
   120dc:	e0bffd0b 	ldhu	r2,-12(fp)
   120e0:	10800ef0 	cmpltui	r2,r2,59
   120e4:	103fea1e 	bne	r2,zero,12090 <__alt_mem_Flash_flash_data+0xf4012090>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   120e8:	e0bffe17 	ldw	r2,-8(fp)
   120ec:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   120f0:	e0bffe17 	ldw	r2,-8(fp)
   120f4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   120f8:	e0bffe17 	ldw	r2,-8(fp)
   120fc:	00c00fc4 	movi	r3,63
   12100:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1210c:	008000b4 	movhi	r2,2
   12110:	109b3804 	addi	r2,r2,27872
   12114:	d0a81f15 	stw	r2,-24452(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   12118:	e037883a 	mov	sp,fp
   1211c:	dfc00117 	ldw	ra,4(sp)
   12120:	df000017 	ldw	fp,0(sp)
   12124:	dec00204 	addi	sp,sp,8
   12128:	f800283a 	ret

0001212c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1212c:	deffff04 	addi	sp,sp,-4
   12130:	df000015 	stw	fp,0(sp)
   12134:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   12138:	d0282215 	stw	zero,-24440(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1213c:	d0282005 	stb	zero,-24448(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   12140:	d0281205 	stb	zero,-24504(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   12144:	d0281a45 	stb	zero,-24471(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   12148:	d0281245 	stb	zero,-24503(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1214c:	d0281715 	stw	zero,-24484(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   12150:	d0281315 	stw	zero,-24500(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   12154:	d0282515 	stw	zero,-24428(gp)
    OSIdleCtrMax  = 0L;
   12158:	d0281815 	stw	zero,-24480(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1215c:	d0282405 	stb	zero,-24432(gp)
#endif
}
   12160:	e037883a 	mov	sp,fp
   12164:	df000017 	ldw	fp,0(sp)
   12168:	dec00104 	addi	sp,sp,4
   1216c:	f800283a 	ret

00012170 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   12170:	defffd04 	addi	sp,sp,-12
   12174:	df000215 	stw	fp,8(sp)
   12178:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1217c:	d0281e05 	stb	zero,-24456(gp)
    prdytbl       = &OSRdyTbl[0];
   12180:	d0a81e44 	addi	r2,gp,-24455
   12184:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12188:	e03ffe05 	stb	zero,-8(fp)
   1218c:	00000706 	br	121ac <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   12190:	e0bfff17 	ldw	r2,-4(fp)
   12194:	10c00044 	addi	r3,r2,1
   12198:	e0ffff15 	stw	r3,-4(fp)
   1219c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   121a0:	e0bffe03 	ldbu	r2,-8(fp)
   121a4:	10800044 	addi	r2,r2,1
   121a8:	e0bffe05 	stb	r2,-8(fp)
   121ac:	e0bffe03 	ldbu	r2,-8(fp)
   121b0:	108000f0 	cmpltui	r2,r2,3
   121b4:	103ff61e 	bne	r2,zero,12190 <__alt_mem_Flash_flash_data+0xf4012190>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   121b8:	d0281445 	stb	zero,-24495(gp)
    OSPrioHighRdy = 0;
   121bc:	d0281405 	stb	zero,-24496(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   121c0:	d0281c15 	stw	zero,-24464(gp)
    OSTCBCur      = (OS_TCB *)0;
   121c4:	d0282115 	stw	zero,-24444(gp)
}
   121c8:	e037883a 	mov	sp,fp
   121cc:	df000017 	ldw	fp,0(sp)
   121d0:	dec00104 	addi	sp,sp,4
   121d4:	f800283a 	ret

000121d8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   121d8:	defff804 	addi	sp,sp,-32
   121dc:	dfc00715 	stw	ra,28(sp)
   121e0:	df000615 	stw	fp,24(sp)
   121e4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   121e8:	00bfffd4 	movui	r2,65535
   121ec:	d8800015 	stw	r2,0(sp)
   121f0:	008000b4 	movhi	r2,2
   121f4:	10993804 	addi	r2,r2,25824
   121f8:	d8800115 	stw	r2,4(sp)
   121fc:	00808004 	movi	r2,512
   12200:	d8800215 	stw	r2,8(sp)
   12204:	d8000315 	stw	zero,12(sp)
   12208:	008000c4 	movi	r2,3
   1220c:	d8800415 	stw	r2,16(sp)
   12210:	01000074 	movhi	r4,1
   12214:	21099a04 	addi	r4,r4,9832
   12218:	000b883a 	mov	r5,zero
   1221c:	018000b4 	movhi	r6,2
   12220:	319b3704 	addi	r6,r6,27868
   12224:	01c00504 	movi	r7,20
   12228:	001707c0 	call	1707c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1222c:	01000504 	movi	r4,20
   12230:	014000b4 	movhi	r5,2
   12234:	29727904 	addi	r5,r5,-13852
   12238:	e1bfff04 	addi	r6,fp,-4
   1223c:	00179480 	call	17948 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   12240:	e037883a 	mov	sp,fp
   12244:	dfc00117 	ldw	ra,4(sp)
   12248:	df000017 	ldw	fp,0(sp)
   1224c:	dec00204 	addi	sp,sp,8
   12250:	f800283a 	ret

00012254 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   12254:	defff804 	addi	sp,sp,-32
   12258:	dfc00715 	stw	ra,28(sp)
   1225c:	df000615 	stw	fp,24(sp)
   12260:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   12264:	00bfff94 	movui	r2,65534
   12268:	d8800015 	stw	r2,0(sp)
   1226c:	008000b4 	movhi	r2,2
   12270:	1096c004 	addi	r2,r2,23296
   12274:	d8800115 	stw	r2,4(sp)
   12278:	00808004 	movi	r2,512
   1227c:	d8800215 	stw	r2,8(sp)
   12280:	d8000315 	stw	zero,12(sp)
   12284:	008000c4 	movi	r2,3
   12288:	d8800415 	stw	r2,16(sp)
   1228c:	01000074 	movhi	r4,1
   12290:	2109b104 	addi	r4,r4,9924
   12294:	000b883a 	mov	r5,zero
   12298:	018000b4 	movhi	r6,2
   1229c:	3198bf04 	addi	r6,r6,25340
   122a0:	01c004c4 	movi	r7,19
   122a4:	001707c0 	call	1707c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   122a8:	010004c4 	movi	r4,19
   122ac:	014000b4 	movhi	r5,2
   122b0:	29727d04 	addi	r5,r5,-13836
   122b4:	e1bfff04 	addi	r6,fp,-4
   122b8:	00179480 	call	17948 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   122bc:	e037883a 	mov	sp,fp
   122c0:	dfc00117 	ldw	ra,4(sp)
   122c4:	df000017 	ldw	fp,0(sp)
   122c8:	dec00204 	addi	sp,sp,8
   122cc:	f800283a 	ret

000122d0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   122d0:	defffb04 	addi	sp,sp,-20
   122d4:	dfc00415 	stw	ra,16(sp)
   122d8:	df000315 	stw	fp,12(sp)
   122dc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   122e0:	010000b4 	movhi	r4,2
   122e4:	211e0804 	addi	r4,r4,30752
   122e8:	01414404 	movi	r5,1296
   122ec:	00123b00 	call	123b0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   122f0:	010000b4 	movhi	r4,2
   122f4:	211f4c04 	addi	r4,r4,32048
   122f8:	01401504 	movi	r5,84
   122fc:	00123b00 	call	123b0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   12300:	008000b4 	movhi	r2,2
   12304:	109e0804 	addi	r2,r2,30752
   12308:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1230c:	008000b4 	movhi	r2,2
   12310:	109e2304 	addi	r2,r2,30860
   12314:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12318:	e03ffd05 	stb	zero,-12(fp)
   1231c:	00001106 	br	12364 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   12320:	e0bffe17 	ldw	r2,-8(fp)
   12324:	e0ffff17 	ldw	r3,-4(fp)
   12328:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1232c:	e0bffe17 	ldw	r2,-8(fp)
   12330:	00c00fc4 	movi	r3,63
   12334:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12338:	e0bffe17 	ldw	r2,-8(fp)
   1233c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   12340:	e0bffe17 	ldw	r2,-8(fp)
   12344:	10801b04 	addi	r2,r2,108
   12348:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1234c:	e0bfff17 	ldw	r2,-4(fp)
   12350:	10801b04 	addi	r2,r2,108
   12354:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12358:	e0bffd03 	ldbu	r2,-12(fp)
   1235c:	10800044 	addi	r2,r2,1
   12360:	e0bffd05 	stb	r2,-12(fp)
   12364:	e0bffd03 	ldbu	r2,-12(fp)
   12368:	108002f0 	cmpltui	r2,r2,11
   1236c:	103fec1e 	bne	r2,zero,12320 <__alt_mem_Flash_flash_data+0xf4012320>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   12370:	e0bffe17 	ldw	r2,-8(fp)
   12374:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   12378:	e0bffe17 	ldw	r2,-8(fp)
   1237c:	00c00fc4 	movi	r3,63
   12380:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12384:	e0bffe17 	ldw	r2,-8(fp)
   12388:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1238c:	d0281515 	stw	zero,-24492(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   12390:	008000b4 	movhi	r2,2
   12394:	109e0804 	addi	r2,r2,30752
   12398:	d0a81915 	stw	r2,-24476(gp)
}
   1239c:	e037883a 	mov	sp,fp
   123a0:	dfc00117 	ldw	ra,4(sp)
   123a4:	df000017 	ldw	fp,0(sp)
   123a8:	dec00204 	addi	sp,sp,8
   123ac:	f800283a 	ret

000123b0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   123b0:	defffd04 	addi	sp,sp,-12
   123b4:	df000215 	stw	fp,8(sp)
   123b8:	df000204 	addi	fp,sp,8
   123bc:	e13ffe15 	stw	r4,-8(fp)
   123c0:	2805883a 	mov	r2,r5
   123c4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   123c8:	00000706 	br	123e8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   123cc:	e0bffe17 	ldw	r2,-8(fp)
   123d0:	10c00044 	addi	r3,r2,1
   123d4:	e0fffe15 	stw	r3,-8(fp)
   123d8:	10000005 	stb	zero,0(r2)
        size--;
   123dc:	e0bfff0b 	ldhu	r2,-4(fp)
   123e0:	10bfffc4 	addi	r2,r2,-1
   123e4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   123e8:	e0bfff0b 	ldhu	r2,-4(fp)
   123ec:	103ff71e 	bne	r2,zero,123cc <__alt_mem_Flash_flash_data+0xf40123cc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   123f0:	e037883a 	mov	sp,fp
   123f4:	df000017 	ldw	fp,0(sp)
   123f8:	dec00104 	addi	sp,sp,4
   123fc:	f800283a 	ret

00012400 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   12400:	defffc04 	addi	sp,sp,-16
   12404:	df000315 	stw	fp,12(sp)
   12408:	df000304 	addi	fp,sp,12
   1240c:	e13ffd15 	stw	r4,-12(fp)
   12410:	e17ffe15 	stw	r5,-8(fp)
   12414:	3005883a 	mov	r2,r6
   12418:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1241c:	00000b06 	br	1244c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   12420:	e0bffd17 	ldw	r2,-12(fp)
   12424:	10c00044 	addi	r3,r2,1
   12428:	e0fffd15 	stw	r3,-12(fp)
   1242c:	e0fffe17 	ldw	r3,-8(fp)
   12430:	19000044 	addi	r4,r3,1
   12434:	e13ffe15 	stw	r4,-8(fp)
   12438:	18c00003 	ldbu	r3,0(r3)
   1243c:	10c00005 	stb	r3,0(r2)
        size--;
   12440:	e0bfff0b 	ldhu	r2,-4(fp)
   12444:	10bfffc4 	addi	r2,r2,-1
   12448:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1244c:	e0bfff0b 	ldhu	r2,-4(fp)
   12450:	103ff31e 	bne	r2,zero,12420 <__alt_mem_Flash_flash_data+0xf4012420>
        *pdest++ = *psrc++;
        size--;
    }
}
   12454:	e037883a 	mov	sp,fp
   12458:	df000017 	ldw	fp,0(sp)
   1245c:	dec00104 	addi	sp,sp,4
   12460:	f800283a 	ret

00012464 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   12464:	defffb04 	addi	sp,sp,-20
   12468:	dfc00415 	stw	ra,16(sp)
   1246c:	df000315 	stw	fp,12(sp)
   12470:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12474:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12478:	0005303a 	rdctl	r2,status
   1247c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12480:	e0fffe17 	ldw	r3,-8(fp)
   12484:	00bfff84 	movi	r2,-2
   12488:	1884703a 	and	r2,r3,r2
   1248c:	1001703a 	wrctl	status,r2
  
  return context;
   12490:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   12494:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   12498:	d0a82003 	ldbu	r2,-24448(gp)
   1249c:	10803fcc 	andi	r2,r2,255
   124a0:	10001a1e 	bne	r2,zero,1250c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   124a4:	d0a81203 	ldbu	r2,-24504(gp)
   124a8:	10803fcc 	andi	r2,r2,255
   124ac:	1000171e 	bne	r2,zero,1250c <OS_Sched+0xa8>
            OS_SchedNew();
   124b0:	00125300 	call	12530 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   124b4:	d0e81403 	ldbu	r3,-24496(gp)
   124b8:	d0a81443 	ldbu	r2,-24495(gp)
   124bc:	18c03fcc 	andi	r3,r3,255
   124c0:	10803fcc 	andi	r2,r2,255
   124c4:	18801126 	beq	r3,r2,1250c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   124c8:	d0a81403 	ldbu	r2,-24496(gp)
   124cc:	10c03fcc 	andi	r3,r2,255
   124d0:	008000b4 	movhi	r2,2
   124d4:	109f4c04 	addi	r2,r2,32048
   124d8:	18c7883a 	add	r3,r3,r3
   124dc:	18c7883a 	add	r3,r3,r3
   124e0:	10c5883a 	add	r2,r2,r3
   124e4:	10800017 	ldw	r2,0(r2)
   124e8:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   124ec:	d0a81c17 	ldw	r2,-24464(gp)
   124f0:	10c00e17 	ldw	r3,56(r2)
   124f4:	18c00044 	addi	r3,r3,1
   124f8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   124fc:	d0a81717 	ldw	r2,-24484(gp)
   12500:	10800044 	addi	r2,r2,1
   12504:	d0a81715 	stw	r2,-24484(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   12508:	001babc0 	call	1babc <OSCtxSw>
   1250c:	e0bffd17 	ldw	r2,-12(fp)
   12510:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   1251c:	e037883a 	mov	sp,fp
   12520:	dfc00117 	ldw	ra,4(sp)
   12524:	df000017 	ldw	fp,0(sp)
   12528:	dec00204 	addi	sp,sp,8
   1252c:	f800283a 	ret

00012530 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   12530:	defffe04 	addi	sp,sp,-8
   12534:	df000115 	stw	fp,4(sp)
   12538:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   1253c:	d0a81e03 	ldbu	r2,-24456(gp)
   12540:	10c03fcc 	andi	r3,r2,255
   12544:	008000b4 	movhi	r2,2
   12548:	10b23904 	addi	r2,r2,-14108
   1254c:	10c5883a 	add	r2,r2,r3
   12550:	10800003 	ldbu	r2,0(r2)
   12554:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   12558:	e0bfff03 	ldbu	r2,-4(fp)
   1255c:	100490fa 	slli	r2,r2,3
   12560:	1009883a 	mov	r4,r2
   12564:	e0ffff03 	ldbu	r3,-4(fp)
   12568:	d0a81e44 	addi	r2,gp,-24455
   1256c:	1885883a 	add	r2,r3,r2
   12570:	10800003 	ldbu	r2,0(r2)
   12574:	10c03fcc 	andi	r3,r2,255
   12578:	008000b4 	movhi	r2,2
   1257c:	10b23904 	addi	r2,r2,-14108
   12580:	10c5883a 	add	r2,r2,r3
   12584:	10800003 	ldbu	r2,0(r2)
   12588:	2085883a 	add	r2,r4,r2
   1258c:	d0a81405 	stb	r2,-24496(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   12590:	e037883a 	mov	sp,fp
   12594:	df000017 	ldw	fp,0(sp)
   12598:	dec00104 	addi	sp,sp,4
   1259c:	f800283a 	ret

000125a0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   125a0:	defffc04 	addi	sp,sp,-16
   125a4:	df000315 	stw	fp,12(sp)
   125a8:	df000304 	addi	fp,sp,12
   125ac:	e13ffe15 	stw	r4,-8(fp)
   125b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   125b4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   125b8:	00000b06 	br	125e8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   125bc:	e0bffe17 	ldw	r2,-8(fp)
   125c0:	10c00044 	addi	r3,r2,1
   125c4:	e0fffe15 	stw	r3,-8(fp)
   125c8:	e0ffff17 	ldw	r3,-4(fp)
   125cc:	19000044 	addi	r4,r3,1
   125d0:	e13fff15 	stw	r4,-4(fp)
   125d4:	18c00003 	ldbu	r3,0(r3)
   125d8:	10c00005 	stb	r3,0(r2)
        len++;
   125dc:	e0bffd03 	ldbu	r2,-12(fp)
   125e0:	10800044 	addi	r2,r2,1
   125e4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   125e8:	e0bfff17 	ldw	r2,-4(fp)
   125ec:	10800003 	ldbu	r2,0(r2)
   125f0:	10803fcc 	andi	r2,r2,255
   125f4:	103ff11e 	bne	r2,zero,125bc <__alt_mem_Flash_flash_data+0xf40125bc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   125f8:	e0bffe17 	ldw	r2,-8(fp)
   125fc:	10000005 	stb	zero,0(r2)
    return (len);
   12600:	e0bffd03 	ldbu	r2,-12(fp)
}
   12604:	e037883a 	mov	sp,fp
   12608:	df000017 	ldw	fp,0(sp)
   1260c:	dec00104 	addi	sp,sp,4
   12610:	f800283a 	ret

00012614 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   12614:	defffd04 	addi	sp,sp,-12
   12618:	df000215 	stw	fp,8(sp)
   1261c:	df000204 	addi	fp,sp,8
   12620:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   12624:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   12628:	00000606 	br	12644 <OS_StrLen+0x30>
        psrc++;
   1262c:	e0bfff17 	ldw	r2,-4(fp)
   12630:	10800044 	addi	r2,r2,1
   12634:	e0bfff15 	stw	r2,-4(fp)
        len++;
   12638:	e0bffe03 	ldbu	r2,-8(fp)
   1263c:	10800044 	addi	r2,r2,1
   12640:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   12644:	e0bfff17 	ldw	r2,-4(fp)
   12648:	10800003 	ldbu	r2,0(r2)
   1264c:	10803fcc 	andi	r2,r2,255
   12650:	103ff61e 	bne	r2,zero,1262c <__alt_mem_Flash_flash_data+0xf401262c>
        psrc++;
        len++;
    }
    return (len);
   12654:	e0bffe03 	ldbu	r2,-8(fp)
}
   12658:	e037883a 	mov	sp,fp
   1265c:	df000017 	ldw	fp,0(sp)
   12660:	dec00104 	addi	sp,sp,4
   12664:	f800283a 	ret

00012668 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   12668:	defffa04 	addi	sp,sp,-24
   1266c:	dfc00515 	stw	ra,20(sp)
   12670:	df000415 	stw	fp,16(sp)
   12674:	df000404 	addi	fp,sp,16
   12678:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1267c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12680:	0005303a 	rdctl	r2,status
   12684:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12688:	e0fffd17 	ldw	r3,-12(fp)
   1268c:	00bfff84 	movi	r2,-2
   12690:	1884703a 	and	r2,r3,r2
   12694:	1001703a 	wrctl	status,r2
  
  return context;
   12698:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1269c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   126a0:	d0a81317 	ldw	r2,-24500(gp)
   126a4:	10800044 	addi	r2,r2,1
   126a8:	d0a81315 	stw	r2,-24500(gp)
   126ac:	e0bffc17 	ldw	r2,-16(fp)
   126b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   126bc:	001bdb40 	call	1bdb4 <OSTaskIdleHook>
    }
   126c0:	003fef06 	br	12680 <__alt_mem_Flash_flash_data+0xf4012680>

000126c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   126c4:	defff804 	addi	sp,sp,-32
   126c8:	dfc00715 	stw	ra,28(sp)
   126cc:	df000615 	stw	fp,24(sp)
   126d0:	dc400515 	stw	r17,20(sp)
   126d4:	dc000415 	stw	r16,16(sp)
   126d8:	df000604 	addi	fp,sp,24
   126dc:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   126e0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   126e4:	00000206 	br	126f0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   126e8:	01000044 	movi	r4,1
   126ec:	00182740 	call	18274 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   126f0:	d0a82403 	ldbu	r2,-24432(gp)
   126f4:	10803fcc 	andi	r2,r2,255
   126f8:	103ffb26 	beq	r2,zero,126e8 <__alt_mem_Flash_flash_data+0xf40126e8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   126fc:	d0e81817 	ldw	r3,-24480(gp)
   12700:	00947b34 	movhi	r2,20972
   12704:	10a147c4 	addi	r2,r2,-31457
   12708:	1888383a 	mulxuu	r4,r3,r2
   1270c:	1885383a 	mul	r2,r3,r2
   12710:	1021883a 	mov	r16,r2
   12714:	2023883a 	mov	r17,r4
   12718:	8804d17a 	srli	r2,r17,5
   1271c:	d0a81815 	stw	r2,-24480(gp)
    if (OSIdleCtrMax == 0L) {
   12720:	d0a81817 	ldw	r2,-24480(gp)
   12724:	1000031e 	bne	r2,zero,12734 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   12728:	d0281a05 	stb	zero,-24472(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   1272c:	01003fc4 	movi	r4,255
   12730:	0017ec80 	call	17ec8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12734:	0005303a 	rdctl	r2,status
   12738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1273c:	e0fffb17 	ldw	r3,-20(fp)
   12740:	00bfff84 	movi	r2,-2
   12744:	1884703a 	and	r2,r3,r2
   12748:	1001703a 	wrctl	status,r2
  
  return context;
   1274c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   12750:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   12754:	d0a81317 	ldw	r2,-24500(gp)
   12758:	d0a82515 	stw	r2,-24428(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   1275c:	d0281315 	stw	zero,-24500(gp)
   12760:	e0bffa17 	ldw	r2,-24(fp)
   12764:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12768:	e0bffc17 	ldw	r2,-16(fp)
   1276c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   12770:	d0e82517 	ldw	r3,-24428(gp)
   12774:	d0a81817 	ldw	r2,-24480(gp)
   12778:	1885203a 	divu	r2,r3,r2
   1277c:	1007883a 	mov	r3,r2
   12780:	00801904 	movi	r2,100
   12784:	10c5c83a 	sub	r2,r2,r3
   12788:	d0a81a05 	stb	r2,-24472(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1278c:	001bd440 	call	1bd44 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   12790:	00127a00 	call	127a0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   12794:	0009883a 	mov	r4,zero
   12798:	00182740 	call	18274 <OSTimeDly>
    }
   1279c:	003fe506 	br	12734 <__alt_mem_Flash_flash_data+0xf4012734>

000127a0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   127a0:	defffa04 	addi	sp,sp,-24
   127a4:	dfc00515 	stw	ra,20(sp)
   127a8:	df000415 	stw	fp,16(sp)
   127ac:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   127b0:	e03ffc05 	stb	zero,-16(fp)
   127b4:	00002406 	br	12848 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   127b8:	e0fffc03 	ldbu	r3,-16(fp)
   127bc:	e0bffe04 	addi	r2,fp,-8
   127c0:	1809883a 	mov	r4,r3
   127c4:	100b883a 	mov	r5,r2
   127c8:	0017d000 	call	17d00 <OSTaskStkChk>
   127cc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   127d0:	e0bffc43 	ldbu	r2,-15(fp)
   127d4:	1000191e 	bne	r2,zero,1283c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   127d8:	e0fffc03 	ldbu	r3,-16(fp)
   127dc:	008000b4 	movhi	r2,2
   127e0:	109f4c04 	addi	r2,r2,32048
   127e4:	18c7883a 	add	r3,r3,r3
   127e8:	18c7883a 	add	r3,r3,r3
   127ec:	10c5883a 	add	r2,r2,r3
   127f0:	10800017 	ldw	r2,0(r2)
   127f4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   127f8:	e0bffd17 	ldw	r2,-12(fp)
   127fc:	10000f26 	beq	r2,zero,1283c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   12800:	e0bffd17 	ldw	r2,-12(fp)
   12804:	10800060 	cmpeqi	r2,r2,1
   12808:	10000c1e 	bne	r2,zero,1283c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10c00217 	ldw	r3,8(r2)
   12814:	e0bffd17 	ldw	r2,-12(fp)
   12818:	10800317 	ldw	r2,12(r2)
   1281c:	1085883a 	add	r2,r2,r2
   12820:	1085883a 	add	r2,r2,r2
   12824:	1887883a 	add	r3,r3,r2
   12828:	e0bffd17 	ldw	r2,-12(fp)
   1282c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   12830:	e0ffff17 	ldw	r3,-4(fp)
   12834:	e0bffd17 	ldw	r2,-12(fp)
   12838:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1283c:	e0bffc03 	ldbu	r2,-16(fp)
   12840:	10800044 	addi	r2,r2,1
   12844:	e0bffc05 	stb	r2,-16(fp)
   12848:	e0bffc03 	ldbu	r2,-16(fp)
   1284c:	10800570 	cmpltui	r2,r2,21
   12850:	103fd91e 	bne	r2,zero,127b8 <__alt_mem_Flash_flash_data+0xf40127b8>
#endif
                }
            }
        }
    }
}
   12854:	e037883a 	mov	sp,fp
   12858:	dfc00117 	ldw	ra,4(sp)
   1285c:	df000017 	ldw	fp,0(sp)
   12860:	dec00204 	addi	sp,sp,8
   12864:	f800283a 	ret

00012868 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   12868:	defff204 	addi	sp,sp,-56
   1286c:	dfc00d15 	stw	ra,52(sp)
   12870:	df000c15 	stw	fp,48(sp)
   12874:	df000c04 	addi	fp,sp,48
   12878:	e17ffc15 	stw	r5,-16(fp)
   1287c:	e1bffd15 	stw	r6,-12(fp)
   12880:	3807883a 	mov	r3,r7
   12884:	e0800417 	ldw	r2,16(fp)
   12888:	e13ffb05 	stb	r4,-20(fp)
   1288c:	e0fffe0d 	sth	r3,-8(fp)
   12890:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12894:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12898:	0005303a 	rdctl	r2,status
   1289c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128a0:	e0fff617 	ldw	r3,-40(fp)
   128a4:	00bfff84 	movi	r2,-2
   128a8:	1884703a 	and	r2,r3,r2
   128ac:	1001703a 	wrctl	status,r2
  
  return context;
   128b0:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   128b4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   128b8:	d0a81917 	ldw	r2,-24476(gp)
   128bc:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   128c0:	e0bff517 	ldw	r2,-44(fp)
   128c4:	10009326 	beq	r2,zero,12b14 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   128c8:	e0bff517 	ldw	r2,-44(fp)
   128cc:	10800517 	ldw	r2,20(r2)
   128d0:	d0a81915 	stw	r2,-24476(gp)
   128d4:	e0bff417 	ldw	r2,-48(fp)
   128d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128dc:	e0bff717 	ldw	r2,-36(fp)
   128e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   128e4:	e0bff517 	ldw	r2,-44(fp)
   128e8:	e0fffc17 	ldw	r3,-16(fp)
   128ec:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   128f0:	e0bff517 	ldw	r2,-44(fp)
   128f4:	e0fffb03 	ldbu	r3,-20(fp)
   128f8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   128fc:	e0bff517 	ldw	r2,-44(fp)
   12900:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   12904:	e0bff517 	ldw	r2,-44(fp)
   12908:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   1290c:	e0bff517 	ldw	r2,-44(fp)
   12910:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   12914:	e0bff517 	ldw	r2,-44(fp)
   12918:	e0c00317 	ldw	r3,12(fp)
   1291c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   12920:	e0bff517 	ldw	r2,-44(fp)
   12924:	e0c00217 	ldw	r3,8(fp)
   12928:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   1292c:	e0bff517 	ldw	r2,-44(fp)
   12930:	e0fffd17 	ldw	r3,-12(fp)
   12934:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   12938:	e0bff517 	ldw	r2,-44(fp)
   1293c:	e0ffff0b 	ldhu	r3,-4(fp)
   12940:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   12944:	e0bff517 	ldw	r2,-44(fp)
   12948:	e0fffe0b 	ldhu	r3,-8(fp)
   1294c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   12950:	e0bff517 	ldw	r2,-44(fp)
   12954:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   12958:	e0bffb03 	ldbu	r2,-20(fp)
   1295c:	1004d0fa 	srli	r2,r2,3
   12960:	1007883a 	mov	r3,r2
   12964:	e0bff517 	ldw	r2,-44(fp)
   12968:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1296c:	e0bffb03 	ldbu	r2,-20(fp)
   12970:	108001cc 	andi	r2,r2,7
   12974:	1007883a 	mov	r3,r2
   12978:	e0bff517 	ldw	r2,-44(fp)
   1297c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   12980:	e0bff517 	ldw	r2,-44(fp)
   12984:	10800d03 	ldbu	r2,52(r2)
   12988:	10803fcc 	andi	r2,r2,255
   1298c:	00c00044 	movi	r3,1
   12990:	1884983a 	sll	r2,r3,r2
   12994:	1007883a 	mov	r3,r2
   12998:	e0bff517 	ldw	r2,-44(fp)
   1299c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   129a0:	e0bff517 	ldw	r2,-44(fp)
   129a4:	10800cc3 	ldbu	r2,51(r2)
   129a8:	10803fcc 	andi	r2,r2,255
   129ac:	00c00044 	movi	r3,1
   129b0:	1884983a 	sll	r2,r3,r2
   129b4:	1007883a 	mov	r3,r2
   129b8:	e0bff517 	ldw	r2,-44(fp)
   129bc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   129c0:	e0bff517 	ldw	r2,-44(fp)
   129c4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   129c8:	e0bff517 	ldw	r2,-44(fp)
   129cc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   129d0:	e0bff517 	ldw	r2,-44(fp)
   129d4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   129d8:	e0bff517 	ldw	r2,-44(fp)
   129dc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   129e0:	e0bff517 	ldw	r2,-44(fp)
   129e4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   129e8:	e0bff517 	ldw	r2,-44(fp)
   129ec:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   129f0:	e0bff517 	ldw	r2,-44(fp)
   129f4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   129f8:	e0bff517 	ldw	r2,-44(fp)
   129fc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   12a00:	e0bff517 	ldw	r2,-44(fp)
   12a04:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   12a08:	e0bff517 	ldw	r2,-44(fp)
   12a0c:	00c00fc4 	movi	r3,63
   12a10:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   12a14:	e0bff517 	ldw	r2,-44(fp)
   12a18:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   12a1c:	e13ff517 	ldw	r4,-44(fp)
   12a20:	001bdd00 	call	1bdd0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   12a24:	e13ff517 	ldw	r4,-44(fp)
   12a28:	001bce80 	call	1bce8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a2c:	0005303a 	rdctl	r2,status
   12a30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a34:	e0fff817 	ldw	r3,-32(fp)
   12a38:	00bfff84 	movi	r2,-2
   12a3c:	1884703a 	and	r2,r3,r2
   12a40:	1001703a 	wrctl	status,r2
  
  return context;
   12a44:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   12a48:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12a4c:	e0fffb03 	ldbu	r3,-20(fp)
   12a50:	008000b4 	movhi	r2,2
   12a54:	109f4c04 	addi	r2,r2,32048
   12a58:	18c7883a 	add	r3,r3,r3
   12a5c:	18c7883a 	add	r3,r3,r3
   12a60:	10c5883a 	add	r2,r2,r3
   12a64:	e0fff517 	ldw	r3,-44(fp)
   12a68:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12a6c:	d0e81517 	ldw	r3,-24492(gp)
   12a70:	e0bff517 	ldw	r2,-44(fp)
   12a74:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12a78:	e0bff517 	ldw	r2,-44(fp)
   12a7c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12a80:	d0a81517 	ldw	r2,-24492(gp)
   12a84:	10000326 	beq	r2,zero,12a94 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12a88:	d0a81517 	ldw	r2,-24492(gp)
   12a8c:	e0fff517 	ldw	r3,-44(fp)
   12a90:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12a94:	e0bff517 	ldw	r2,-44(fp)
   12a98:	d0a81515 	stw	r2,-24492(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12a9c:	e0bff517 	ldw	r2,-44(fp)
   12aa0:	10c00d83 	ldbu	r3,54(r2)
   12aa4:	d0a81e03 	ldbu	r2,-24456(gp)
   12aa8:	1884b03a 	or	r2,r3,r2
   12aac:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12ab0:	e0bff517 	ldw	r2,-44(fp)
   12ab4:	10800d03 	ldbu	r2,52(r2)
   12ab8:	10c03fcc 	andi	r3,r2,255
   12abc:	e0bff517 	ldw	r2,-44(fp)
   12ac0:	10800d03 	ldbu	r2,52(r2)
   12ac4:	11003fcc 	andi	r4,r2,255
   12ac8:	d0a81e44 	addi	r2,gp,-24455
   12acc:	2085883a 	add	r2,r4,r2
   12ad0:	11000003 	ldbu	r4,0(r2)
   12ad4:	e0bff517 	ldw	r2,-44(fp)
   12ad8:	10800d43 	ldbu	r2,53(r2)
   12adc:	2084b03a 	or	r2,r4,r2
   12ae0:	1009883a 	mov	r4,r2
   12ae4:	d0a81e44 	addi	r2,gp,-24455
   12ae8:	1885883a 	add	r2,r3,r2
   12aec:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12af0:	d0a81a43 	ldbu	r2,-24471(gp)
   12af4:	10800044 	addi	r2,r2,1
   12af8:	d0a81a45 	stb	r2,-24471(gp)
   12afc:	e0bff417 	ldw	r2,-48(fp)
   12b00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b04:	e0bff917 	ldw	r2,-28(fp)
   12b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12b0c:	0005883a 	mov	r2,zero
   12b10:	00000506 	br	12b28 <OS_TCBInit+0x2c0>
   12b14:	e0bff417 	ldw	r2,-48(fp)
   12b18:	e0bffa15 	stw	r2,-24(fp)
   12b1c:	e0bffa17 	ldw	r2,-24(fp)
   12b20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12b24:	00801084 	movi	r2,66
}
   12b28:	e037883a 	mov	sp,fp
   12b2c:	dfc00117 	ldw	ra,4(sp)
   12b30:	df000017 	ldw	fp,0(sp)
   12b34:	dec00204 	addi	sp,sp,8
   12b38:	f800283a 	ret

00012b3c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12b3c:	defffe04 	addi	sp,sp,-8
   12b40:	df000115 	stw	fp,4(sp)
   12b44:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12b48:	d0a00f04 	addi	r2,gp,-32708
   12b4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12b50:	d0a01004 	addi	r2,gp,-32704
   12b54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12b58:	d0a01184 	addi	r2,gp,-32698
   12b5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12b60:	d0a01204 	addi	r2,gp,-32696
   12b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12b68:	d0a01104 	addi	r2,gp,-32700
   12b6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12b70:	d0a01284 	addi	r2,gp,-32694
   12b74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12b78:	d0a01304 	addi	r2,gp,-32692
   12b7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12b80:	d0a01384 	addi	r2,gp,-32690
   12b84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12b88:	d0a01404 	addi	r2,gp,-32688
   12b8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12b90:	d0a01484 	addi	r2,gp,-32686
   12b94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12b98:	d0a01504 	addi	r2,gp,-32684
   12b9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12ba0:	d0a01584 	addi	r2,gp,-32682
   12ba4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12ba8:	d0a01604 	addi	r2,gp,-32680
   12bac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12bb0:	d0a01684 	addi	r2,gp,-32678
   12bb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12bb8:	d0a01704 	addi	r2,gp,-32676
   12bbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12bc0:	d0a01784 	addi	r2,gp,-32674
   12bc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12bc8:	d0a01804 	addi	r2,gp,-32672
   12bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12bd0:	d0a01884 	addi	r2,gp,-32670
   12bd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   12bd8:	d0a01904 	addi	r2,gp,-32668
   12bdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12be0:	d0a01984 	addi	r2,gp,-32666
   12be4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   12be8:	d0a01a04 	addi	r2,gp,-32664
   12bec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12bf0:	d0a01a84 	addi	r2,gp,-32662
   12bf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   12bf8:	d0a01b04 	addi	r2,gp,-32660
   12bfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12c00:	d0a01b84 	addi	r2,gp,-32658
   12c04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   12c08:	d0a01c04 	addi	r2,gp,-32656
   12c0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   12c10:	d0a01c84 	addi	r2,gp,-32654
   12c14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   12c18:	d0a01d04 	addi	r2,gp,-32652
   12c1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   12c20:	d0a01d84 	addi	r2,gp,-32650
   12c24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   12c28:	d0a01e04 	addi	r2,gp,-32648
   12c2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   12c30:	d0a01e84 	addi	r2,gp,-32646
   12c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   12c38:	d0a01f04 	addi	r2,gp,-32644
   12c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12c40:	d0a01f84 	addi	r2,gp,-32642
   12c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   12c48:	d0a02004 	addi	r2,gp,-32640
   12c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12c50:	d0a02084 	addi	r2,gp,-32638
   12c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   12c58:	d0a02104 	addi	r2,gp,-32636
   12c5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12c60:	d0a02184 	addi	r2,gp,-32634
   12c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   12c68:	d0a02204 	addi	r2,gp,-32632
   12c6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12c70:	d0a02284 	addi	r2,gp,-32630
   12c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12c78:	d0a02304 	addi	r2,gp,-32628
   12c7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12c80:	d0a02384 	addi	r2,gp,-32626
   12c84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12c88:	d0a02404 	addi	r2,gp,-32624
   12c8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12c90:	d0a02484 	addi	r2,gp,-32622
   12c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12c98:	d0a02504 	addi	r2,gp,-32620
   12c9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12ca0:	d0a02584 	addi	r2,gp,-32618
   12ca4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12ca8:	d0a02604 	addi	r2,gp,-32616
   12cac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12cb0:	d0a02b04 	addi	r2,gp,-32596
   12cb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12cb8:	e037883a 	mov	sp,fp
   12cbc:	df000017 	ldw	fp,0(sp)
   12cc0:	dec00104 	addi	sp,sp,4
   12cc4:	f800283a 	ret

00012cc8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12cc8:	defff204 	addi	sp,sp,-56
   12ccc:	df000d15 	stw	fp,52(sp)
   12cd0:	df000d04 	addi	fp,sp,52
   12cd4:	e13ffc15 	stw	r4,-16(fp)
   12cd8:	2807883a 	mov	r3,r5
   12cdc:	3005883a 	mov	r2,r6
   12ce0:	e1ffff15 	stw	r7,-4(fp)
   12ce4:	e0fffd0d 	sth	r3,-12(fp)
   12ce8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12cec:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	1000021e 	bne	r2,zero,12d00 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12cf8:	0005883a 	mov	r2,zero
   12cfc:	0000b006 	br	12fc0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12d00:	e0bffc17 	ldw	r2,-16(fp)
   12d04:	1000051e 	bne	r2,zero,12d1c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12d08:	e0bfff17 	ldw	r2,-4(fp)
   12d0c:	00c01b84 	movi	r3,110
   12d10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12d14:	0005883a 	mov	r2,zero
   12d18:	0000a906 	br	12fc0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12d1c:	e0bffc17 	ldw	r2,-16(fp)
   12d20:	10800003 	ldbu	r2,0(r2)
   12d24:	10803fcc 	andi	r2,r2,255
   12d28:	10800160 	cmpeqi	r2,r2,5
   12d2c:	1000051e 	bne	r2,zero,12d44 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   12d30:	e0bfff17 	ldw	r2,-4(fp)
   12d34:	00c00044 	movi	r3,1
   12d38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12d3c:	0005883a 	mov	r2,zero
   12d40:	00009f06 	br	12fc0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12d44:	e0fffe03 	ldbu	r3,-8(fp)
   12d48:	00bfe004 	movi	r2,-128
   12d4c:	1884703a 	and	r2,r3,r2
   12d50:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   12d54:	e0bff503 	ldbu	r2,-44(fp)
   12d58:	10000626 	beq	r2,zero,12d74 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12d5c:	e0bffe03 	ldbu	r2,-8(fp)
   12d60:	10801fcc 	andi	r2,r2,127
   12d64:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12d68:	00800044 	movi	r2,1
   12d6c:	e0bff385 	stb	r2,-50(fp)
   12d70:	00000106 	br	12d78 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12d74:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12d78:	e0bfff17 	ldw	r2,-4(fp)
   12d7c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d80:	0005303a 	rdctl	r2,status
   12d84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d88:	e0fff617 	ldw	r3,-40(fp)
   12d8c:	00bfff84 	movi	r2,-2
   12d90:	1884703a 	and	r2,r3,r2
   12d94:	1001703a 	wrctl	status,r2
  
  return context;
   12d98:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   12d9c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   12da0:	e0bffe03 	ldbu	r2,-8(fp)
   12da4:	10c00060 	cmpeqi	r3,r2,1
   12da8:	18005f1e 	bne	r3,zero,12f28 <OSFlagAccept+0x260>
   12dac:	10c00088 	cmpgei	r3,r2,2
   12db0:	1800021e 	bne	r3,zero,12dbc <OSFlagAccept+0xf4>
   12db4:	10003f26 	beq	r2,zero,12eb4 <OSFlagAccept+0x1ec>
   12db8:	00007706 	br	12f98 <OSFlagAccept+0x2d0>
   12dbc:	10c000a0 	cmpeqi	r3,r2,2
   12dc0:	1800031e 	bne	r3,zero,12dd0 <OSFlagAccept+0x108>
   12dc4:	108000e0 	cmpeqi	r2,r2,3
   12dc8:	10001e1e 	bne	r2,zero,12e44 <OSFlagAccept+0x17c>
   12dcc:	00007206 	br	12f98 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12dd0:	e0bffc17 	ldw	r2,-16(fp)
   12dd4:	10c0020b 	ldhu	r3,8(r2)
   12dd8:	e0bffd0b 	ldhu	r2,-12(fp)
   12ddc:	1884703a 	and	r2,r3,r2
   12de0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12de4:	e0fff30b 	ldhu	r3,-52(fp)
   12de8:	e0bffd0b 	ldhu	r2,-12(fp)
   12dec:	18800d1e 	bne	r3,r2,12e24 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12df0:	e0bff383 	ldbu	r2,-50(fp)
   12df4:	10800058 	cmpnei	r2,r2,1
   12df8:	10000d1e 	bne	r2,zero,12e30 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12dfc:	e0bffc17 	ldw	r2,-16(fp)
   12e00:	1080020b 	ldhu	r2,8(r2)
   12e04:	1007883a 	mov	r3,r2
   12e08:	e0bff30b 	ldhu	r2,-52(fp)
   12e0c:	0084303a 	nor	r2,zero,r2
   12e10:	1884703a 	and	r2,r3,r2
   12e14:	1007883a 	mov	r3,r2
   12e18:	e0bffc17 	ldw	r2,-16(fp)
   12e1c:	10c0020d 	sth	r3,8(r2)
   12e20:	00000306 	br	12e30 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12e24:	e0bfff17 	ldw	r2,-4(fp)
   12e28:	00c01c04 	movi	r3,112
   12e2c:	10c00005 	stb	r3,0(r2)
   12e30:	e0bff417 	ldw	r2,-48(fp)
   12e34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e38:	e0bff717 	ldw	r2,-36(fp)
   12e3c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12e40:	00005e06 	br	12fbc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12e44:	e0bffc17 	ldw	r2,-16(fp)
   12e48:	10c0020b 	ldhu	r3,8(r2)
   12e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   12e50:	1884703a 	and	r2,r3,r2
   12e54:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12e58:	e0bff30b 	ldhu	r2,-52(fp)
   12e5c:	10000d26 	beq	r2,zero,12e94 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e60:	e0bff383 	ldbu	r2,-50(fp)
   12e64:	10800058 	cmpnei	r2,r2,1
   12e68:	10000d1e 	bne	r2,zero,12ea0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12e6c:	e0bffc17 	ldw	r2,-16(fp)
   12e70:	1080020b 	ldhu	r2,8(r2)
   12e74:	1007883a 	mov	r3,r2
   12e78:	e0bff30b 	ldhu	r2,-52(fp)
   12e7c:	0084303a 	nor	r2,zero,r2
   12e80:	1884703a 	and	r2,r3,r2
   12e84:	1007883a 	mov	r3,r2
   12e88:	e0bffc17 	ldw	r2,-16(fp)
   12e8c:	10c0020d 	sth	r3,8(r2)
   12e90:	00000306 	br	12ea0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12e94:	e0bfff17 	ldw	r2,-4(fp)
   12e98:	00c01c04 	movi	r3,112
   12e9c:	10c00005 	stb	r3,0(r2)
   12ea0:	e0bff417 	ldw	r2,-48(fp)
   12ea4:	e0bff815 	stw	r2,-32(fp)
   12ea8:	e0bff817 	ldw	r2,-32(fp)
   12eac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12eb0:	00004206 	br	12fbc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12eb4:	e0bffc17 	ldw	r2,-16(fp)
   12eb8:	1080020b 	ldhu	r2,8(r2)
   12ebc:	0084303a 	nor	r2,zero,r2
   12ec0:	1007883a 	mov	r3,r2
   12ec4:	e0bffd0b 	ldhu	r2,-12(fp)
   12ec8:	1884703a 	and	r2,r3,r2
   12ecc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12ed0:	e0fff30b 	ldhu	r3,-52(fp)
   12ed4:	e0bffd0b 	ldhu	r2,-12(fp)
   12ed8:	18800b1e 	bne	r3,r2,12f08 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12edc:	e0bff383 	ldbu	r2,-50(fp)
   12ee0:	10800058 	cmpnei	r2,r2,1
   12ee4:	10000b1e 	bne	r2,zero,12f14 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12ee8:	e0bffc17 	ldw	r2,-16(fp)
   12eec:	10c0020b 	ldhu	r3,8(r2)
   12ef0:	e0bff30b 	ldhu	r2,-52(fp)
   12ef4:	1884b03a 	or	r2,r3,r2
   12ef8:	1007883a 	mov	r3,r2
   12efc:	e0bffc17 	ldw	r2,-16(fp)
   12f00:	10c0020d 	sth	r3,8(r2)
   12f04:	00000306 	br	12f14 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12f08:	e0bfff17 	ldw	r2,-4(fp)
   12f0c:	00c01c04 	movi	r3,112
   12f10:	10c00005 	stb	r3,0(r2)
   12f14:	e0bff417 	ldw	r2,-48(fp)
   12f18:	e0bff915 	stw	r2,-28(fp)
   12f1c:	e0bff917 	ldw	r2,-28(fp)
   12f20:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f24:	00002506 	br	12fbc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	1080020b 	ldhu	r2,8(r2)
   12f30:	0084303a 	nor	r2,zero,r2
   12f34:	1007883a 	mov	r3,r2
   12f38:	e0bffd0b 	ldhu	r2,-12(fp)
   12f3c:	1884703a 	and	r2,r3,r2
   12f40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12f44:	e0bff30b 	ldhu	r2,-52(fp)
   12f48:	10000b26 	beq	r2,zero,12f78 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12f4c:	e0bff383 	ldbu	r2,-50(fp)
   12f50:	10800058 	cmpnei	r2,r2,1
   12f54:	10000b1e 	bne	r2,zero,12f84 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12f58:	e0bffc17 	ldw	r2,-16(fp)
   12f5c:	10c0020b 	ldhu	r3,8(r2)
   12f60:	e0bff30b 	ldhu	r2,-52(fp)
   12f64:	1884b03a 	or	r2,r3,r2
   12f68:	1007883a 	mov	r3,r2
   12f6c:	e0bffc17 	ldw	r2,-16(fp)
   12f70:	10c0020d 	sth	r3,8(r2)
   12f74:	00000306 	br	12f84 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12f78:	e0bfff17 	ldw	r2,-4(fp)
   12f7c:	00c01c04 	movi	r3,112
   12f80:	10c00005 	stb	r3,0(r2)
   12f84:	e0bff417 	ldw	r2,-48(fp)
   12f88:	e0bffa15 	stw	r2,-24(fp)
   12f8c:	e0bffa17 	ldw	r2,-24(fp)
   12f90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f94:	00000906 	br	12fbc <OSFlagAccept+0x2f4>
   12f98:	e0bff417 	ldw	r2,-48(fp)
   12f9c:	e0bffb15 	stw	r2,-20(fp)
   12fa0:	e0bffb17 	ldw	r2,-20(fp)
   12fa4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12fa8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   12fac:	e0bfff17 	ldw	r2,-4(fp)
   12fb0:	00c01bc4 	movi	r3,111
   12fb4:	10c00005 	stb	r3,0(r2)
             break;
   12fb8:	0001883a 	nop
    }
    return (flags_rdy);
   12fbc:	e0bff30b 	ldhu	r2,-52(fp)
}
   12fc0:	e037883a 	mov	sp,fp
   12fc4:	df000017 	ldw	fp,0(sp)
   12fc8:	dec00104 	addi	sp,sp,4
   12fcc:	f800283a 	ret

00012fd0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   12fd0:	defff804 	addi	sp,sp,-32
   12fd4:	df000715 	stw	fp,28(sp)
   12fd8:	df000704 	addi	fp,sp,28
   12fdc:	2005883a 	mov	r2,r4
   12fe0:	e17fff15 	stw	r5,-4(fp)
   12fe4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   12fe8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   12fec:	e0bfff17 	ldw	r2,-4(fp)
   12ff0:	1000021e 	bne	r2,zero,12ffc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   12ff4:	0005883a 	mov	r2,zero
   12ff8:	00003b06 	br	130e8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   12ffc:	008000b4 	movhi	r2,2
   13000:	1082ba04 	addi	r2,r2,2792
   13004:	10800003 	ldbu	r2,0(r2)
   13008:	10803fcc 	andi	r2,r2,255
   1300c:	10000526 	beq	r2,zero,13024 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   13010:	e0bfff17 	ldw	r2,-4(fp)
   13014:	00c00404 	movi	r3,16
   13018:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1301c:	0005883a 	mov	r2,zero
   13020:	00003106 	br	130e8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13024:	0005303a 	rdctl	r2,status
   13028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1302c:	e0fffb17 	ldw	r3,-20(fp)
   13030:	00bfff84 	movi	r2,-2
   13034:	1884703a 	and	r2,r3,r2
   13038:	1001703a 	wrctl	status,r2
  
  return context;
   1303c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13040:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   13044:	008000b4 	movhi	r2,2
   13048:	1082bd04 	addi	r2,r2,2804
   1304c:	10800017 	ldw	r2,0(r2)
   13050:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   13054:	e0bffa17 	ldw	r2,-24(fp)
   13058:	10001b26 	beq	r2,zero,130c8 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1305c:	008000b4 	movhi	r2,2
   13060:	1082bd04 	addi	r2,r2,2804
   13064:	10800017 	ldw	r2,0(r2)
   13068:	10c00117 	ldw	r3,4(r2)
   1306c:	008000b4 	movhi	r2,2
   13070:	1082bd04 	addi	r2,r2,2804
   13074:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   13078:	e0bffa17 	ldw	r2,-24(fp)
   1307c:	00c00144 	movi	r3,5
   13080:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   13084:	e0bffa17 	ldw	r2,-24(fp)
   13088:	e0fffe0b 	ldhu	r3,-8(fp)
   1308c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   13090:	e0bffa17 	ldw	r2,-24(fp)
   13094:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   13098:	e0bffa17 	ldw	r2,-24(fp)
   1309c:	00c00fc4 	movi	r3,63
   130a0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   130a4:	e0bffa17 	ldw	r2,-24(fp)
   130a8:	100002c5 	stb	zero,11(r2)
   130ac:	e0bff917 	ldw	r2,-28(fp)
   130b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130b4:	e0bffc17 	ldw	r2,-16(fp)
   130b8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   130bc:	e0bfff17 	ldw	r2,-4(fp)
   130c0:	10000005 	stb	zero,0(r2)
   130c4:	00000706 	br	130e4 <OSFlagCreate+0x114>
   130c8:	e0bff917 	ldw	r2,-28(fp)
   130cc:	e0bffd15 	stw	r2,-12(fp)
   130d0:	e0bffd17 	ldw	r2,-12(fp)
   130d4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   130d8:	e0bfff17 	ldw	r2,-4(fp)
   130dc:	00c01c84 	movi	r3,114
   130e0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   130e4:	e0bffa17 	ldw	r2,-24(fp)
}
   130e8:	e037883a 	mov	sp,fp
   130ec:	df000017 	ldw	fp,0(sp)
   130f0:	dec00104 	addi	sp,sp,4
   130f4:	f800283a 	ret

000130f8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   130f8:	defff204 	addi	sp,sp,-56
   130fc:	dfc00d15 	stw	ra,52(sp)
   13100:	df000c15 	stw	fp,48(sp)
   13104:	df000c04 	addi	fp,sp,48
   13108:	e13ffd15 	stw	r4,-12(fp)
   1310c:	2805883a 	mov	r2,r5
   13110:	e1bfff15 	stw	r6,-4(fp)
   13114:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13118:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1311c:	e0bfff17 	ldw	r2,-4(fp)
   13120:	1000021e 	bne	r2,zero,1312c <OSFlagDel+0x34>
        return (pgrp);
   13124:	e0bffd17 	ldw	r2,-12(fp)
   13128:	00008a06 	br	13354 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1312c:	e0bffd17 	ldw	r2,-12(fp)
   13130:	1000051e 	bne	r2,zero,13148 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13134:	e0bfff17 	ldw	r2,-4(fp)
   13138:	00c01b84 	movi	r3,110
   1313c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13140:	e0bffd17 	ldw	r2,-12(fp)
   13144:	00008306 	br	13354 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13148:	008000b4 	movhi	r2,2
   1314c:	1082ba04 	addi	r2,r2,2792
   13150:	10800003 	ldbu	r2,0(r2)
   13154:	10803fcc 	andi	r2,r2,255
   13158:	10000526 	beq	r2,zero,13170 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1315c:	e0bfff17 	ldw	r2,-4(fp)
   13160:	00c003c4 	movi	r3,15
   13164:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	00007906 	br	13354 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   13170:	e0bffd17 	ldw	r2,-12(fp)
   13174:	10800003 	ldbu	r2,0(r2)
   13178:	10803fcc 	andi	r2,r2,255
   1317c:	10800160 	cmpeqi	r2,r2,5
   13180:	1000051e 	bne	r2,zero,13198 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   13184:	e0bfff17 	ldw	r2,-4(fp)
   13188:	00c00044 	movi	r3,1
   1318c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13190:	e0bffd17 	ldw	r2,-12(fp)
   13194:	00006f06 	br	13354 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13198:	0005303a 	rdctl	r2,status
   1319c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131a0:	e0fff817 	ldw	r3,-32(fp)
   131a4:	00bfff84 	movi	r2,-2
   131a8:	1884703a 	and	r2,r3,r2
   131ac:	1001703a 	wrctl	status,r2
  
  return context;
   131b0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   131b4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   131b8:	e0bffd17 	ldw	r2,-12(fp)
   131bc:	10800117 	ldw	r2,4(r2)
   131c0:	10000326 	beq	r2,zero,131d0 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   131c4:	00800044 	movi	r2,1
   131c8:	e0bff405 	stb	r2,-48(fp)
   131cc:	00000106 	br	131d4 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   131d0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   131d4:	e0bffe03 	ldbu	r2,-8(fp)
   131d8:	10000326 	beq	r2,zero,131e8 <OSFlagDel+0xf0>
   131dc:	10800060 	cmpeqi	r2,r2,1
   131e0:	1000271e 	bne	r2,zero,13280 <OSFlagDel+0x188>
   131e4:	00005006 	br	13328 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   131e8:	e0bff403 	ldbu	r2,-48(fp)
   131ec:	10001a1e 	bne	r2,zero,13258 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   131f0:	e0bffd17 	ldw	r2,-12(fp)
   131f4:	00c00fc4 	movi	r3,63
   131f8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   131fc:	e0bffd17 	ldw	r2,-12(fp)
   13200:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13204:	e0bffd17 	ldw	r2,-12(fp)
   13208:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1320c:	008000b4 	movhi	r2,2
   13210:	1082bd04 	addi	r2,r2,2804
   13214:	10c00017 	ldw	r3,0(r2)
   13218:	e0bffd17 	ldw	r2,-12(fp)
   1321c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13220:	e0bffd17 	ldw	r2,-12(fp)
   13224:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13228:	008000b4 	movhi	r2,2
   1322c:	1082bd04 	addi	r2,r2,2804
   13230:	e0fffd17 	ldw	r3,-12(fp)
   13234:	10c00015 	stw	r3,0(r2)
   13238:	e0bff717 	ldw	r2,-36(fp)
   1323c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13240:	e0bff917 	ldw	r2,-28(fp)
   13244:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   13248:	e0bfff17 	ldw	r2,-4(fp)
   1324c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   13250:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   13254:	00003e06 	br	13350 <OSFlagDel+0x258>
   13258:	e0bff717 	ldw	r2,-36(fp)
   1325c:	e0bffa15 	stw	r2,-24(fp)
   13260:	e0bffa17 	ldw	r2,-24(fp)
   13264:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   13268:	e0bfff17 	ldw	r2,-4(fp)
   1326c:	00c01244 	movi	r3,73
   13270:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   13274:	e0bffd17 	ldw	r2,-12(fp)
   13278:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1327c:	00003406 	br	13350 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13280:	e0bffd17 	ldw	r2,-12(fp)
   13284:	10800117 	ldw	r2,4(r2)
   13288:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1328c:	00000606 	br	132a8 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   13290:	e13ff517 	ldw	r4,-44(fp)
   13294:	000b883a 	mov	r5,zero
   13298:	00143340 	call	14334 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1329c:	e0bff517 	ldw	r2,-44(fp)
   132a0:	10800017 	ldw	r2,0(r2)
   132a4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   132a8:	e0bff517 	ldw	r2,-44(fp)
   132ac:	103ff81e 	bne	r2,zero,13290 <__alt_mem_Flash_flash_data+0xf4013290>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   132b0:	e0bffd17 	ldw	r2,-12(fp)
   132b4:	00c00fc4 	movi	r3,63
   132b8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   132bc:	e0bffd17 	ldw	r2,-12(fp)
   132c0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   132c4:	e0bffd17 	ldw	r2,-12(fp)
   132c8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   132cc:	008000b4 	movhi	r2,2
   132d0:	1082bd04 	addi	r2,r2,2804
   132d4:	10c00017 	ldw	r3,0(r2)
   132d8:	e0bffd17 	ldw	r2,-12(fp)
   132dc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   132e0:	e0bffd17 	ldw	r2,-12(fp)
   132e4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   132e8:	008000b4 	movhi	r2,2
   132ec:	1082bd04 	addi	r2,r2,2804
   132f0:	e0fffd17 	ldw	r3,-12(fp)
   132f4:	10c00015 	stw	r3,0(r2)
   132f8:	e0bff717 	ldw	r2,-36(fp)
   132fc:	e0bffb15 	stw	r2,-20(fp)
   13300:	e0bffb17 	ldw	r2,-20(fp)
   13304:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13308:	e0bff403 	ldbu	r2,-48(fp)
   1330c:	10800058 	cmpnei	r2,r2,1
   13310:	1000011e 	bne	r2,zero,13318 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13314:	00124640 	call	12464 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   13318:	e0bfff17 	ldw	r2,-4(fp)
   1331c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   13320:	e03ff615 	stw	zero,-40(fp)
             break;
   13324:	00000a06 	br	13350 <OSFlagDel+0x258>
   13328:	e0bff717 	ldw	r2,-36(fp)
   1332c:	e0bffc15 	stw	r2,-16(fp)
   13330:	e0bffc17 	ldw	r2,-16(fp)
   13334:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	00c001c4 	movi	r3,7
   13340:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   13344:	e0bffd17 	ldw	r2,-12(fp)
   13348:	e0bff615 	stw	r2,-40(fp)
             break;
   1334c:	0001883a 	nop
    }
    return (pgrp_return);
   13350:	e0bff617 	ldw	r2,-40(fp)
}
   13354:	e037883a 	mov	sp,fp
   13358:	dfc00117 	ldw	ra,4(sp)
   1335c:	df000017 	ldw	fp,0(sp)
   13360:	dec00204 	addi	sp,sp,8
   13364:	f800283a 	ret

00013368 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13368:	defff604 	addi	sp,sp,-40
   1336c:	dfc00915 	stw	ra,36(sp)
   13370:	df000815 	stw	fp,32(sp)
   13374:	df000804 	addi	fp,sp,32
   13378:	e13ffd15 	stw	r4,-12(fp)
   1337c:	e17ffe15 	stw	r5,-8(fp)
   13380:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13388:	e0bfff17 	ldw	r2,-4(fp)
   1338c:	1000021e 	bne	r2,zero,13398 <OSFlagNameGet+0x30>
        return (0);
   13390:	0005883a 	mov	r2,zero
   13394:	00003b06 	br	13484 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	1000051e 	bne	r2,zero,133b4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	00c01b84 	movi	r3,110
   133a8:	10c00005 	stb	r3,0(r2)
        return (0);
   133ac:	0005883a 	mov	r2,zero
   133b0:	00003406 	br	13484 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   133b4:	e0bffe17 	ldw	r2,-8(fp)
   133b8:	1000051e 	bne	r2,zero,133d0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	00c00304 	movi	r3,12
   133c4:	10c00005 	stb	r3,0(r2)
        return (0);
   133c8:	0005883a 	mov	r2,zero
   133cc:	00002d06 	br	13484 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   133d0:	008000b4 	movhi	r2,2
   133d4:	1082ba04 	addi	r2,r2,2792
   133d8:	10800003 	ldbu	r2,0(r2)
   133dc:	10803fcc 	andi	r2,r2,255
   133e0:	10000526 	beq	r2,zero,133f8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   133e4:	e0bfff17 	ldw	r2,-4(fp)
   133e8:	00c00444 	movi	r3,17
   133ec:	10c00005 	stb	r3,0(r2)
        return (0);
   133f0:	0005883a 	mov	r2,zero
   133f4:	00002306 	br	13484 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133f8:	0005303a 	rdctl	r2,status
   133fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13400:	e0fffa17 	ldw	r3,-24(fp)
   13404:	00bfff84 	movi	r2,-2
   13408:	1884703a 	and	r2,r3,r2
   1340c:	1001703a 	wrctl	status,r2
  
  return context;
   13410:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13414:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13418:	e0bffd17 	ldw	r2,-12(fp)
   1341c:	10800003 	ldbu	r2,0(r2)
   13420:	10803fcc 	andi	r2,r2,255
   13424:	10800160 	cmpeqi	r2,r2,5
   13428:	1000091e 	bne	r2,zero,13450 <OSFlagNameGet+0xe8>
   1342c:	e0bff817 	ldw	r2,-32(fp)
   13430:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13434:	e0bffb17 	ldw	r2,-20(fp)
   13438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	00c00044 	movi	r3,1
   13444:	10c00005 	stb	r3,0(r2)
        return (0);
   13448:	0005883a 	mov	r2,zero
   1344c:	00000d06 	br	13484 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   13450:	e0bffd17 	ldw	r2,-12(fp)
   13454:	10800284 	addi	r2,r2,10
   13458:	e13ffe17 	ldw	r4,-8(fp)
   1345c:	100b883a 	mov	r5,r2
   13460:	00125a00 	call	125a0 <OS_StrCopy>
   13464:	e0bff905 	stb	r2,-28(fp)
   13468:	e0bff817 	ldw	r2,-32(fp)
   1346c:	e0bffc15 	stw	r2,-16(fp)
   13470:	e0bffc17 	ldw	r2,-16(fp)
   13474:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	10000005 	stb	zero,0(r2)
    return (len);
   13480:	e0bff903 	ldbu	r2,-28(fp)
}
   13484:	e037883a 	mov	sp,fp
   13488:	dfc00117 	ldw	ra,4(sp)
   1348c:	df000017 	ldw	fp,0(sp)
   13490:	dec00204 	addi	sp,sp,8
   13494:	f800283a 	ret

00013498 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13498:	defff504 	addi	sp,sp,-44
   1349c:	dfc00a15 	stw	ra,40(sp)
   134a0:	df000915 	stw	fp,36(sp)
   134a4:	df000904 	addi	fp,sp,36
   134a8:	e13ffd15 	stw	r4,-12(fp)
   134ac:	e17ffe15 	stw	r5,-8(fp)
   134b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   134b4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   134b8:	e0bfff17 	ldw	r2,-4(fp)
   134bc:	1000011e 	bne	r2,zero,134c4 <OSFlagNameSet+0x2c>
        return;
   134c0:	00004406 	br	135d4 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   134c4:	e0bffd17 	ldw	r2,-12(fp)
   134c8:	1000041e 	bne	r2,zero,134dc <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   134cc:	e0bfff17 	ldw	r2,-4(fp)
   134d0:	00c01b84 	movi	r3,110
   134d4:	10c00005 	stb	r3,0(r2)
        return;
   134d8:	00003e06 	br	135d4 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   134dc:	e0bffe17 	ldw	r2,-8(fp)
   134e0:	1000041e 	bne	r2,zero,134f4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   134e4:	e0bfff17 	ldw	r2,-4(fp)
   134e8:	00c00304 	movi	r3,12
   134ec:	10c00005 	stb	r3,0(r2)
        return;
   134f0:	00003806 	br	135d4 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   134f4:	008000b4 	movhi	r2,2
   134f8:	1082ba04 	addi	r2,r2,2792
   134fc:	10800003 	ldbu	r2,0(r2)
   13500:	10803fcc 	andi	r2,r2,255
   13504:	10000426 	beq	r2,zero,13518 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   13508:	e0bfff17 	ldw	r2,-4(fp)
   1350c:	00c00484 	movi	r3,18
   13510:	10c00005 	stb	r3,0(r2)
        return;
   13514:	00002f06 	br	135d4 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13518:	0005303a 	rdctl	r2,status
   1351c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13520:	e0fff917 	ldw	r3,-28(fp)
   13524:	00bfff84 	movi	r2,-2
   13528:	1884703a 	and	r2,r3,r2
   1352c:	1001703a 	wrctl	status,r2
  
  return context;
   13530:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13534:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	10800003 	ldbu	r2,0(r2)
   13540:	10803fcc 	andi	r2,r2,255
   13544:	10800160 	cmpeqi	r2,r2,5
   13548:	1000081e 	bne	r2,zero,1356c <OSFlagNameSet+0xd4>
   1354c:	e0bff717 	ldw	r2,-36(fp)
   13550:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13554:	e0bffa17 	ldw	r2,-24(fp)
   13558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1355c:	e0bfff17 	ldw	r2,-4(fp)
   13560:	00c00044 	movi	r3,1
   13564:	10c00005 	stb	r3,0(r2)
        return;
   13568:	00001a06 	br	135d4 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1356c:	e13ffe17 	ldw	r4,-8(fp)
   13570:	00126140 	call	12614 <OS_StrLen>
   13574:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   13578:	e0bff803 	ldbu	r2,-32(fp)
   1357c:	10800830 	cmpltui	r2,r2,32
   13580:	1000081e 	bne	r2,zero,135a4 <OSFlagNameSet+0x10c>
   13584:	e0bff717 	ldw	r2,-36(fp)
   13588:	e0bffb15 	stw	r2,-20(fp)
   1358c:	e0bffb17 	ldw	r2,-20(fp)
   13590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   13594:	e0bfff17 	ldw	r2,-4(fp)
   13598:	00c01cc4 	movi	r3,115
   1359c:	10c00005 	stb	r3,0(r2)
        return;
   135a0:	00000c06 	br	135d4 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   135a4:	e0bffd17 	ldw	r2,-12(fp)
   135a8:	10800284 	addi	r2,r2,10
   135ac:	1009883a 	mov	r4,r2
   135b0:	e17ffe17 	ldw	r5,-8(fp)
   135b4:	00125a00 	call	125a0 <OS_StrCopy>
   135b8:	e0bff717 	ldw	r2,-36(fp)
   135bc:	e0bffc15 	stw	r2,-16(fp)
   135c0:	e0bffc17 	ldw	r2,-16(fp)
   135c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   135c8:	e0bfff17 	ldw	r2,-4(fp)
   135cc:	10000005 	stb	zero,0(r2)
    return;
   135d0:	0001883a 	nop
}
   135d4:	e037883a 	mov	sp,fp
   135d8:	dfc00117 	ldw	ra,4(sp)
   135dc:	df000017 	ldw	fp,0(sp)
   135e0:	dec00204 	addi	sp,sp,8
   135e4:	f800283a 	ret

000135e8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   135e8:	deffe204 	addi	sp,sp,-120
   135ec:	dfc01d15 	stw	ra,116(sp)
   135f0:	df001c15 	stw	fp,112(sp)
   135f4:	df001c04 	addi	fp,sp,112
   135f8:	e13ffc15 	stw	r4,-16(fp)
   135fc:	2809883a 	mov	r4,r5
   13600:	3007883a 	mov	r3,r6
   13604:	3805883a 	mov	r2,r7
   13608:	e13ffd0d 	sth	r4,-12(fp)
   1360c:	e0fffe05 	stb	r3,-8(fp)
   13610:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13614:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13618:	e0800217 	ldw	r2,8(fp)
   1361c:	1000021e 	bne	r2,zero,13628 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   13620:	0005883a 	mov	r2,zero
   13624:	00016706 	br	13bc4 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13628:	e0bffc17 	ldw	r2,-16(fp)
   1362c:	1000051e 	bne	r2,zero,13644 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13630:	e0800217 	ldw	r2,8(fp)
   13634:	00c01b84 	movi	r3,110
   13638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1363c:	0005883a 	mov	r2,zero
   13640:	00016006 	br	13bc4 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13644:	008000b4 	movhi	r2,2
   13648:	1082ba04 	addi	r2,r2,2792
   1364c:	10800003 	ldbu	r2,0(r2)
   13650:	10803fcc 	andi	r2,r2,255
   13654:	10000526 	beq	r2,zero,1366c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   13658:	e0800217 	ldw	r2,8(fp)
   1365c:	00c00084 	movi	r3,2
   13660:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13664:	0005883a 	mov	r2,zero
   13668:	00015606 	br	13bc4 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1366c:	008000b4 	movhi	r2,2
   13670:	1082ac04 	addi	r2,r2,2736
   13674:	10800003 	ldbu	r2,0(r2)
   13678:	10803fcc 	andi	r2,r2,255
   1367c:	10000526 	beq	r2,zero,13694 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   13680:	e0800217 	ldw	r2,8(fp)
   13684:	00c00344 	movi	r3,13
   13688:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1368c:	0005883a 	mov	r2,zero
   13690:	00014c06 	br	13bc4 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   13694:	e0bffc17 	ldw	r2,-16(fp)
   13698:	10800003 	ldbu	r2,0(r2)
   1369c:	10803fcc 	andi	r2,r2,255
   136a0:	10800160 	cmpeqi	r2,r2,5
   136a4:	1000051e 	bne	r2,zero,136bc <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   136a8:	e0800217 	ldw	r2,8(fp)
   136ac:	00c00044 	movi	r3,1
   136b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136b4:	0005883a 	mov	r2,zero
   136b8:	00014206 	br	13bc4 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   136bc:	e0fffe03 	ldbu	r3,-8(fp)
   136c0:	00bfe004 	movi	r2,-128
   136c4:	1884703a 	and	r2,r3,r2
   136c8:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   136cc:	e0bfe703 	ldbu	r2,-100(fp)
   136d0:	10000626 	beq	r2,zero,136ec <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   136d4:	e0bffe03 	ldbu	r2,-8(fp)
   136d8:	10801fcc 	andi	r2,r2,127
   136dc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   136e0:	00800044 	movi	r2,1
   136e4:	e0bfe505 	stb	r2,-108(fp)
   136e8:	00000106 	br	136f0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   136ec:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136f0:	0005303a 	rdctl	r2,status
   136f4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136f8:	e0ffe917 	ldw	r3,-92(fp)
   136fc:	00bfff84 	movi	r2,-2
   13700:	1884703a 	and	r2,r3,r2
   13704:	1001703a 	wrctl	status,r2
  
  return context;
   13708:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1370c:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   13710:	e0bffe03 	ldbu	r2,-8(fp)
   13714:	10c00060 	cmpeqi	r3,r2,1
   13718:	1800921e 	bne	r3,zero,13964 <OSFlagPend+0x37c>
   1371c:	10c00088 	cmpgei	r3,r2,2
   13720:	1800021e 	bne	r3,zero,1372c <OSFlagPend+0x144>
   13724:	10006126 	beq	r2,zero,138ac <OSFlagPend+0x2c4>
   13728:	0000bb06 	br	13a18 <OSFlagPend+0x430>
   1372c:	10c000a0 	cmpeqi	r3,r2,2
   13730:	1800031e 	bne	r3,zero,13740 <OSFlagPend+0x158>
   13734:	108000e0 	cmpeqi	r2,r2,3
   13738:	10002f1e 	bne	r2,zero,137f8 <OSFlagPend+0x210>
   1373c:	0000b606 	br	13a18 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   13740:	e0bffc17 	ldw	r2,-16(fp)
   13744:	10c0020b 	ldhu	r3,8(r2)
   13748:	e0bffd0b 	ldhu	r2,-12(fp)
   1374c:	1884703a 	and	r2,r3,r2
   13750:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13754:	e0ffe78b 	ldhu	r3,-98(fp)
   13758:	e0bffd0b 	ldhu	r2,-12(fp)
   1375c:	1880191e 	bne	r3,r2,137c4 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13760:	e0bfe503 	ldbu	r2,-108(fp)
   13764:	10800058 	cmpnei	r2,r2,1
   13768:	1000091e 	bne	r2,zero,13790 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1376c:	e0bffc17 	ldw	r2,-16(fp)
   13770:	1080020b 	ldhu	r2,8(r2)
   13774:	1007883a 	mov	r3,r2
   13778:	e0bfe78b 	ldhu	r2,-98(fp)
   1377c:	0084303a 	nor	r2,zero,r2
   13780:	1884703a 	and	r2,r3,r2
   13784:	1007883a 	mov	r3,r2
   13788:	e0bffc17 	ldw	r2,-16(fp)
   1378c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13790:	008000b4 	movhi	r2,2
   13794:	1082bb04 	addi	r2,r2,2796
   13798:	10800017 	ldw	r2,0(r2)
   1379c:	e0ffe78b 	ldhu	r3,-98(fp)
   137a0:	10c00b0d 	sth	r3,44(r2)
   137a4:	e0bfe617 	ldw	r2,-104(fp)
   137a8:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137ac:	e0bfea17 	ldw	r2,-88(fp)
   137b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   137b4:	e0800217 	ldw	r2,8(fp)
   137b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   137bc:	e0bfe78b 	ldhu	r2,-98(fp)
   137c0:	00010006 	br	13bc4 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   137c4:	e1bffd0b 	ldhu	r6,-12(fp)
   137c8:	e0fffe03 	ldbu	r3,-8(fp)
   137cc:	e0bfff0b 	ldhu	r2,-4(fp)
   137d0:	e17ff704 	addi	r5,fp,-36
   137d4:	d8800015 	stw	r2,0(sp)
   137d8:	e13ffc17 	ldw	r4,-16(fp)
   137dc:	180f883a 	mov	r7,r3
   137e0:	001408c0 	call	1408c <OS_FlagBlock>
   137e4:	e0bfe617 	ldw	r2,-104(fp)
   137e8:	e0bfeb15 	stw	r2,-84(fp)
   137ec:	e0bfeb17 	ldw	r2,-84(fp)
   137f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   137f4:	00009206 	br	13a40 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   137f8:	e0bffc17 	ldw	r2,-16(fp)
   137fc:	10c0020b 	ldhu	r3,8(r2)
   13800:	e0bffd0b 	ldhu	r2,-12(fp)
   13804:	1884703a 	and	r2,r3,r2
   13808:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1380c:	e0bfe78b 	ldhu	r2,-98(fp)
   13810:	10001926 	beq	r2,zero,13878 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13814:	e0bfe503 	ldbu	r2,-108(fp)
   13818:	10800058 	cmpnei	r2,r2,1
   1381c:	1000091e 	bne	r2,zero,13844 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   13820:	e0bffc17 	ldw	r2,-16(fp)
   13824:	1080020b 	ldhu	r2,8(r2)
   13828:	1007883a 	mov	r3,r2
   1382c:	e0bfe78b 	ldhu	r2,-98(fp)
   13830:	0084303a 	nor	r2,zero,r2
   13834:	1884703a 	and	r2,r3,r2
   13838:	1007883a 	mov	r3,r2
   1383c:	e0bffc17 	ldw	r2,-16(fp)
   13840:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13844:	008000b4 	movhi	r2,2
   13848:	1082bb04 	addi	r2,r2,2796
   1384c:	10800017 	ldw	r2,0(r2)
   13850:	e0ffe78b 	ldhu	r3,-98(fp)
   13854:	10c00b0d 	sth	r3,44(r2)
   13858:	e0bfe617 	ldw	r2,-104(fp)
   1385c:	e0bfec15 	stw	r2,-80(fp)
   13860:	e0bfec17 	ldw	r2,-80(fp)
   13864:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13868:	e0800217 	ldw	r2,8(fp)
   1386c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13870:	e0bfe78b 	ldhu	r2,-98(fp)
   13874:	0000d306 	br	13bc4 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13878:	e1bffd0b 	ldhu	r6,-12(fp)
   1387c:	e0fffe03 	ldbu	r3,-8(fp)
   13880:	e0bfff0b 	ldhu	r2,-4(fp)
   13884:	e17ff704 	addi	r5,fp,-36
   13888:	d8800015 	stw	r2,0(sp)
   1388c:	e13ffc17 	ldw	r4,-16(fp)
   13890:	180f883a 	mov	r7,r3
   13894:	001408c0 	call	1408c <OS_FlagBlock>
   13898:	e0bfe617 	ldw	r2,-104(fp)
   1389c:	e0bfed15 	stw	r2,-76(fp)
   138a0:	e0bfed17 	ldw	r2,-76(fp)
   138a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   138a8:	00006506 	br	13a40 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   138ac:	e0bffc17 	ldw	r2,-16(fp)
   138b0:	1080020b 	ldhu	r2,8(r2)
   138b4:	0084303a 	nor	r2,zero,r2
   138b8:	1007883a 	mov	r3,r2
   138bc:	e0bffd0b 	ldhu	r2,-12(fp)
   138c0:	1884703a 	and	r2,r3,r2
   138c4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   138c8:	e0ffe78b 	ldhu	r3,-98(fp)
   138cc:	e0bffd0b 	ldhu	r2,-12(fp)
   138d0:	1880171e 	bne	r3,r2,13930 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   138d4:	e0bfe503 	ldbu	r2,-108(fp)
   138d8:	10800058 	cmpnei	r2,r2,1
   138dc:	1000071e 	bne	r2,zero,138fc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   138e0:	e0bffc17 	ldw	r2,-16(fp)
   138e4:	10c0020b 	ldhu	r3,8(r2)
   138e8:	e0bfe78b 	ldhu	r2,-98(fp)
   138ec:	1884b03a 	or	r2,r3,r2
   138f0:	1007883a 	mov	r3,r2
   138f4:	e0bffc17 	ldw	r2,-16(fp)
   138f8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   138fc:	008000b4 	movhi	r2,2
   13900:	1082bb04 	addi	r2,r2,2796
   13904:	10800017 	ldw	r2,0(r2)
   13908:	e0ffe78b 	ldhu	r3,-98(fp)
   1390c:	10c00b0d 	sth	r3,44(r2)
   13910:	e0bfe617 	ldw	r2,-104(fp)
   13914:	e0bfee15 	stw	r2,-72(fp)
   13918:	e0bfee17 	ldw	r2,-72(fp)
   1391c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13920:	e0800217 	ldw	r2,8(fp)
   13924:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13928:	e0bfe78b 	ldhu	r2,-98(fp)
   1392c:	0000a506 	br	13bc4 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13930:	e1bffd0b 	ldhu	r6,-12(fp)
   13934:	e0fffe03 	ldbu	r3,-8(fp)
   13938:	e0bfff0b 	ldhu	r2,-4(fp)
   1393c:	e17ff704 	addi	r5,fp,-36
   13940:	d8800015 	stw	r2,0(sp)
   13944:	e13ffc17 	ldw	r4,-16(fp)
   13948:	180f883a 	mov	r7,r3
   1394c:	001408c0 	call	1408c <OS_FlagBlock>
   13950:	e0bfe617 	ldw	r2,-104(fp)
   13954:	e0bfef15 	stw	r2,-68(fp)
   13958:	e0bfef17 	ldw	r2,-68(fp)
   1395c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13960:	00003706 	br	13a40 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   13964:	e0bffc17 	ldw	r2,-16(fp)
   13968:	1080020b 	ldhu	r2,8(r2)
   1396c:	0084303a 	nor	r2,zero,r2
   13970:	1007883a 	mov	r3,r2
   13974:	e0bffd0b 	ldhu	r2,-12(fp)
   13978:	1884703a 	and	r2,r3,r2
   1397c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   13980:	e0bfe78b 	ldhu	r2,-98(fp)
   13984:	10001726 	beq	r2,zero,139e4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13988:	e0bfe503 	ldbu	r2,-108(fp)
   1398c:	10800058 	cmpnei	r2,r2,1
   13990:	1000071e 	bne	r2,zero,139b0 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   13994:	e0bffc17 	ldw	r2,-16(fp)
   13998:	10c0020b 	ldhu	r3,8(r2)
   1399c:	e0bfe78b 	ldhu	r2,-98(fp)
   139a0:	1884b03a 	or	r2,r3,r2
   139a4:	1007883a 	mov	r3,r2
   139a8:	e0bffc17 	ldw	r2,-16(fp)
   139ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   139b0:	008000b4 	movhi	r2,2
   139b4:	1082bb04 	addi	r2,r2,2796
   139b8:	10800017 	ldw	r2,0(r2)
   139bc:	e0ffe78b 	ldhu	r3,-98(fp)
   139c0:	10c00b0d 	sth	r3,44(r2)
   139c4:	e0bfe617 	ldw	r2,-104(fp)
   139c8:	e0bff015 	stw	r2,-64(fp)
   139cc:	e0bff017 	ldw	r2,-64(fp)
   139d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   139d4:	e0800217 	ldw	r2,8(fp)
   139d8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   139dc:	e0bfe78b 	ldhu	r2,-98(fp)
   139e0:	00007806 	br	13bc4 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   139e4:	e1bffd0b 	ldhu	r6,-12(fp)
   139e8:	e0fffe03 	ldbu	r3,-8(fp)
   139ec:	e0bfff0b 	ldhu	r2,-4(fp)
   139f0:	e17ff704 	addi	r5,fp,-36
   139f4:	d8800015 	stw	r2,0(sp)
   139f8:	e13ffc17 	ldw	r4,-16(fp)
   139fc:	180f883a 	mov	r7,r3
   13a00:	001408c0 	call	1408c <OS_FlagBlock>
   13a04:	e0bfe617 	ldw	r2,-104(fp)
   13a08:	e0bff115 	stw	r2,-60(fp)
   13a0c:	e0bff117 	ldw	r2,-60(fp)
   13a10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13a14:	00000a06 	br	13a40 <OSFlagPend+0x458>
   13a18:	e0bfe617 	ldw	r2,-104(fp)
   13a1c:	e0bff215 	stw	r2,-56(fp)
   13a20:	e0bff217 	ldw	r2,-56(fp)
   13a24:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13a28:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   13a2c:	e0800217 	ldw	r2,8(fp)
   13a30:	00c01bc4 	movi	r3,111
   13a34:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   13a38:	e0bfe78b 	ldhu	r2,-98(fp)
   13a3c:	00006106 	br	13bc4 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   13a40:	00124640 	call	12464 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a44:	0005303a 	rdctl	r2,status
   13a48:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a4c:	e0fff317 	ldw	r3,-52(fp)
   13a50:	00bfff84 	movi	r2,-2
   13a54:	1884703a 	and	r2,r3,r2
   13a58:	1001703a 	wrctl	status,r2
  
  return context;
   13a5c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   13a60:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   13a64:	008000b4 	movhi	r2,2
   13a68:	1082bb04 	addi	r2,r2,2796
   13a6c:	10800017 	ldw	r2,0(r2)
   13a70:	10800c43 	ldbu	r2,49(r2)
   13a74:	10803fcc 	andi	r2,r2,255
   13a78:	10002226 	beq	r2,zero,13b04 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   13a7c:	008000b4 	movhi	r2,2
   13a80:	1082bb04 	addi	r2,r2,2796
   13a84:	10800017 	ldw	r2,0(r2)
   13a88:	10800c43 	ldbu	r2,49(r2)
   13a8c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13a90:	008000b4 	movhi	r2,2
   13a94:	1082bb04 	addi	r2,r2,2796
   13a98:	10800017 	ldw	r2,0(r2)
   13a9c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13aa0:	e0bff704 	addi	r2,fp,-36
   13aa4:	1009883a 	mov	r4,r2
   13aa8:	00144440 	call	14444 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   13aac:	008000b4 	movhi	r2,2
   13ab0:	1082bb04 	addi	r2,r2,2796
   13ab4:	10800017 	ldw	r2,0(r2)
   13ab8:	10000c05 	stb	zero,48(r2)
   13abc:	e0bfe617 	ldw	r2,-104(fp)
   13ac0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ac4:	e0bff417 	ldw	r2,-48(fp)
   13ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13acc:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   13ad0:	e0bfe803 	ldbu	r2,-96(fp)
   13ad4:	108000a0 	cmpeqi	r2,r2,2
   13ad8:	10000426 	beq	r2,zero,13aec <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13adc:	e0800217 	ldw	r2,8(fp)
   13ae0:	00c00384 	movi	r3,14
   13ae4:	10c00005 	stb	r3,0(r2)
                 break;
   13ae8:	00000406 	br	13afc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13aec:	e0800217 	ldw	r2,8(fp)
   13af0:	00c00284 	movi	r3,10
   13af4:	10c00005 	stb	r3,0(r2)
                 break;
   13af8:	0001883a 	nop
        }
        return (flags_rdy);
   13afc:	e0bfe78b 	ldhu	r2,-98(fp)
   13b00:	00003006 	br	13bc4 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13b04:	008000b4 	movhi	r2,2
   13b08:	1082bb04 	addi	r2,r2,2796
   13b0c:	10800017 	ldw	r2,0(r2)
   13b10:	10800b0b 	ldhu	r2,44(r2)
   13b14:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13b18:	e0bfe503 	ldbu	r2,-108(fp)
   13b1c:	10800058 	cmpnei	r2,r2,1
   13b20:	1000211e 	bne	r2,zero,13ba8 <OSFlagPend+0x5c0>
        switch (wait_type) {
   13b24:	e0bffe03 	ldbu	r2,-8(fp)
   13b28:	10001616 	blt	r2,zero,13b84 <OSFlagPend+0x59c>
   13b2c:	10c00090 	cmplti	r3,r2,2
   13b30:	18000c1e 	bne	r3,zero,13b64 <OSFlagPend+0x57c>
   13b34:	10800108 	cmpgei	r2,r2,4
   13b38:	1000121e 	bne	r2,zero,13b84 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   13b3c:	e0bffc17 	ldw	r2,-16(fp)
   13b40:	1080020b 	ldhu	r2,8(r2)
   13b44:	1007883a 	mov	r3,r2
   13b48:	e0bfe78b 	ldhu	r2,-98(fp)
   13b4c:	0084303a 	nor	r2,zero,r2
   13b50:	1884703a 	and	r2,r3,r2
   13b54:	1007883a 	mov	r3,r2
   13b58:	e0bffc17 	ldw	r2,-16(fp)
   13b5c:	10c0020d 	sth	r3,8(r2)
                 break;
   13b60:	00001106 	br	13ba8 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13b64:	e0bffc17 	ldw	r2,-16(fp)
   13b68:	10c0020b 	ldhu	r3,8(r2)
   13b6c:	e0bfe78b 	ldhu	r2,-98(fp)
   13b70:	1884b03a 	or	r2,r3,r2
   13b74:	1007883a 	mov	r3,r2
   13b78:	e0bffc17 	ldw	r2,-16(fp)
   13b7c:	10c0020d 	sth	r3,8(r2)
                 break;
   13b80:	00000906 	br	13ba8 <OSFlagPend+0x5c0>
   13b84:	e0bfe617 	ldw	r2,-104(fp)
   13b88:	e0bff515 	stw	r2,-44(fp)
   13b8c:	e0bff517 	ldw	r2,-44(fp)
   13b90:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13b94:	e0800217 	ldw	r2,8(fp)
   13b98:	00c01bc4 	movi	r3,111
   13b9c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13ba0:	0005883a 	mov	r2,zero
   13ba4:	00000706 	br	13bc4 <OSFlagPend+0x5dc>
   13ba8:	e0bfe617 	ldw	r2,-104(fp)
   13bac:	e0bff615 	stw	r2,-40(fp)
   13bb0:	e0bff617 	ldw	r2,-40(fp)
   13bb4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13bb8:	e0800217 	ldw	r2,8(fp)
   13bbc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13bc0:	e0bfe78b 	ldhu	r2,-98(fp)
}
   13bc4:	e037883a 	mov	sp,fp
   13bc8:	dfc00117 	ldw	ra,4(sp)
   13bcc:	df000017 	ldw	fp,0(sp)
   13bd0:	dec00204 	addi	sp,sp,8
   13bd4:	f800283a 	ret

00013bd8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13bd8:	defffb04 	addi	sp,sp,-20
   13bdc:	df000415 	stw	fp,16(sp)
   13be0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13be4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13be8:	0005303a 	rdctl	r2,status
   13bec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bf0:	e0fffe17 	ldw	r3,-8(fp)
   13bf4:	00bfff84 	movi	r2,-2
   13bf8:	1884703a 	and	r2,r3,r2
   13bfc:	1001703a 	wrctl	status,r2
  
  return context;
   13c00:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13c04:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13c08:	008000b4 	movhi	r2,2
   13c0c:	1082bb04 	addi	r2,r2,2796
   13c10:	10800017 	ldw	r2,0(r2)
   13c14:	10800b0b 	ldhu	r2,44(r2)
   13c18:	e0bffd0d 	sth	r2,-12(fp)
   13c1c:	e0bffc17 	ldw	r2,-16(fp)
   13c20:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c24:	e0bfff17 	ldw	r2,-4(fp)
   13c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   13c2c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13c30:	e037883a 	mov	sp,fp
   13c34:	df000017 	ldw	fp,0(sp)
   13c38:	dec00104 	addi	sp,sp,4
   13c3c:	f800283a 	ret

00013c40 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   13c40:	deffef04 	addi	sp,sp,-68
   13c44:	dfc01015 	stw	ra,64(sp)
   13c48:	df000f15 	stw	fp,60(sp)
   13c4c:	df000f04 	addi	fp,sp,60
   13c50:	e13ffc15 	stw	r4,-16(fp)
   13c54:	2807883a 	mov	r3,r5
   13c58:	3005883a 	mov	r2,r6
   13c5c:	e1ffff15 	stw	r7,-4(fp)
   13c60:	e0fffd0d 	sth	r3,-12(fp)
   13c64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   13c68:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   13c6c:	e0bfff17 	ldw	r2,-4(fp)
   13c70:	1000021e 	bne	r2,zero,13c7c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13c74:	0005883a 	mov	r2,zero
   13c78:	0000ce06 	br	13fb4 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	1000051e 	bne	r2,zero,13c98 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13c84:	e0bfff17 	ldw	r2,-4(fp)
   13c88:	00c01b84 	movi	r3,110
   13c8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13c90:	0005883a 	mov	r2,zero
   13c94:	0000c706 	br	13fb4 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   13c98:	e0bffc17 	ldw	r2,-16(fp)
   13c9c:	10800003 	ldbu	r2,0(r2)
   13ca0:	10803fcc 	andi	r2,r2,255
   13ca4:	10800160 	cmpeqi	r2,r2,5
   13ca8:	1000051e 	bne	r2,zero,13cc0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   13cac:	e0bfff17 	ldw	r2,-4(fp)
   13cb0:	00c00044 	movi	r3,1
   13cb4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13cb8:	0005883a 	mov	r2,zero
   13cbc:	0000bd06 	br	13fb4 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cc0:	0005303a 	rdctl	r2,status
   13cc4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cc8:	e0fff617 	ldw	r3,-40(fp)
   13ccc:	00bfff84 	movi	r2,-2
   13cd0:	1884703a 	and	r2,r3,r2
   13cd4:	1001703a 	wrctl	status,r2
  
  return context;
   13cd8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13cdc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13ce0:	e0bffe03 	ldbu	r2,-8(fp)
   13ce4:	10000326 	beq	r2,zero,13cf4 <OSFlagPost+0xb4>
   13ce8:	10800060 	cmpeqi	r2,r2,1
   13cec:	10000b1e 	bne	r2,zero,13d1c <OSFlagPost+0xdc>
   13cf0:	00001206 	br	13d3c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13cf4:	e0bffc17 	ldw	r2,-16(fp)
   13cf8:	1080020b 	ldhu	r2,8(r2)
   13cfc:	1007883a 	mov	r3,r2
   13d00:	e0bffd0b 	ldhu	r2,-12(fp)
   13d04:	0084303a 	nor	r2,zero,r2
   13d08:	1884703a 	and	r2,r3,r2
   13d0c:	1007883a 	mov	r3,r2
   13d10:	e0bffc17 	ldw	r2,-16(fp)
   13d14:	10c0020d 	sth	r3,8(r2)
             break;
   13d18:	00001106 	br	13d60 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   13d1c:	e0bffc17 	ldw	r2,-16(fp)
   13d20:	10c0020b 	ldhu	r3,8(r2)
   13d24:	e0bffd0b 	ldhu	r2,-12(fp)
   13d28:	1884b03a 	or	r2,r3,r2
   13d2c:	1007883a 	mov	r3,r2
   13d30:	e0bffc17 	ldw	r2,-16(fp)
   13d34:	10c0020d 	sth	r3,8(r2)
             break;
   13d38:	00000906 	br	13d60 <OSFlagPost+0x120>
   13d3c:	e0bff317 	ldw	r2,-52(fp)
   13d40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d44:	e0bff717 	ldw	r2,-36(fp)
   13d48:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   13d4c:	e0bfff17 	ldw	r2,-4(fp)
   13d50:	00c01c44 	movi	r3,113
   13d54:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   13d58:	0005883a 	mov	r2,zero
   13d5c:	00009506 	br	13fb4 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13d60:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13d64:	e0bffc17 	ldw	r2,-16(fp)
   13d68:	10800117 	ldw	r2,4(r2)
   13d6c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13d70:	00007406 	br	13f44 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   13d74:	e0bff117 	ldw	r2,-60(fp)
   13d78:	10800483 	ldbu	r2,18(r2)
   13d7c:	10803fcc 	andi	r2,r2,255
   13d80:	10c00060 	cmpeqi	r3,r2,1
   13d84:	18004d1e 	bne	r3,zero,13ebc <OSFlagPost+0x27c>
   13d88:	10c00088 	cmpgei	r3,r2,2
   13d8c:	1800021e 	bne	r3,zero,13d98 <OSFlagPost+0x158>
   13d90:	10003126 	beq	r2,zero,13e58 <OSFlagPost+0x218>
   13d94:	00005f06 	br	13f14 <OSFlagPost+0x2d4>
   13d98:	10c000a0 	cmpeqi	r3,r2,2
   13d9c:	1800031e 	bne	r3,zero,13dac <OSFlagPost+0x16c>
   13da0:	108000e0 	cmpeqi	r2,r2,3
   13da4:	1000181e 	bne	r2,zero,13e08 <OSFlagPost+0x1c8>
   13da8:	00005a06 	br	13f14 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13dac:	e0bffc17 	ldw	r2,-16(fp)
   13db0:	10c0020b 	ldhu	r3,8(r2)
   13db4:	e0bff117 	ldw	r2,-60(fp)
   13db8:	1080040b 	ldhu	r2,16(r2)
   13dbc:	1884703a 	and	r2,r3,r2
   13dc0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13dc4:	e0bff117 	ldw	r2,-60(fp)
   13dc8:	1080040b 	ldhu	r2,16(r2)
   13dcc:	10ffffcc 	andi	r3,r2,65535
   13dd0:	e0bff40b 	ldhu	r2,-48(fp)
   13dd4:	18800b1e 	bne	r3,r2,13e04 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13dd8:	e0bff40b 	ldhu	r2,-48(fp)
   13ddc:	e13ff117 	ldw	r4,-60(fp)
   13de0:	100b883a 	mov	r5,r2
   13de4:	00143340 	call	14334 <OS_FlagTaskRdy>
   13de8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13dec:	e0bff483 	ldbu	r2,-46(fp)
   13df0:	10800058 	cmpnei	r2,r2,1
   13df4:	1000031e 	bne	r2,zero,13e04 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13df8:	00800044 	movi	r2,1
   13dfc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e00:	00004d06 	br	13f38 <OSFlagPost+0x2f8>
   13e04:	00004c06 	br	13f38 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e08:	e0bffc17 	ldw	r2,-16(fp)
   13e0c:	10c0020b 	ldhu	r3,8(r2)
   13e10:	e0bff117 	ldw	r2,-60(fp)
   13e14:	1080040b 	ldhu	r2,16(r2)
   13e18:	1884703a 	and	r2,r3,r2
   13e1c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13e20:	e0bff40b 	ldhu	r2,-48(fp)
   13e24:	10000b26 	beq	r2,zero,13e54 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e28:	e0bff40b 	ldhu	r2,-48(fp)
   13e2c:	e13ff117 	ldw	r4,-60(fp)
   13e30:	100b883a 	mov	r5,r2
   13e34:	00143340 	call	14334 <OS_FlagTaskRdy>
   13e38:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13e3c:	e0bff483 	ldbu	r2,-46(fp)
   13e40:	10800058 	cmpnei	r2,r2,1
   13e44:	1000031e 	bne	r2,zero,13e54 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e48:	00800044 	movi	r2,1
   13e4c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e50:	00003906 	br	13f38 <OSFlagPost+0x2f8>
   13e54:	00003806 	br	13f38 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e58:	e0bffc17 	ldw	r2,-16(fp)
   13e5c:	1080020b 	ldhu	r2,8(r2)
   13e60:	0084303a 	nor	r2,zero,r2
   13e64:	1007883a 	mov	r3,r2
   13e68:	e0bff117 	ldw	r2,-60(fp)
   13e6c:	1080040b 	ldhu	r2,16(r2)
   13e70:	1884703a 	and	r2,r3,r2
   13e74:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13e78:	e0bff117 	ldw	r2,-60(fp)
   13e7c:	1080040b 	ldhu	r2,16(r2)
   13e80:	10ffffcc 	andi	r3,r2,65535
   13e84:	e0bff40b 	ldhu	r2,-48(fp)
   13e88:	18800b1e 	bne	r3,r2,13eb8 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e8c:	e0bff40b 	ldhu	r2,-48(fp)
   13e90:	e13ff117 	ldw	r4,-60(fp)
   13e94:	100b883a 	mov	r5,r2
   13e98:	00143340 	call	14334 <OS_FlagTaskRdy>
   13e9c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13ea0:	e0bff483 	ldbu	r2,-46(fp)
   13ea4:	10800058 	cmpnei	r2,r2,1
   13ea8:	1000031e 	bne	r2,zero,13eb8 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13eac:	00800044 	movi	r2,1
   13eb0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13eb4:	00002006 	br	13f38 <OSFlagPost+0x2f8>
   13eb8:	00001f06 	br	13f38 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13ebc:	e0bffc17 	ldw	r2,-16(fp)
   13ec0:	1080020b 	ldhu	r2,8(r2)
   13ec4:	0084303a 	nor	r2,zero,r2
   13ec8:	1007883a 	mov	r3,r2
   13ecc:	e0bff117 	ldw	r2,-60(fp)
   13ed0:	1080040b 	ldhu	r2,16(r2)
   13ed4:	1884703a 	and	r2,r3,r2
   13ed8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13edc:	e0bff40b 	ldhu	r2,-48(fp)
   13ee0:	10000b26 	beq	r2,zero,13f10 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13ee4:	e0bff40b 	ldhu	r2,-48(fp)
   13ee8:	e13ff117 	ldw	r4,-60(fp)
   13eec:	100b883a 	mov	r5,r2
   13ef0:	00143340 	call	14334 <OS_FlagTaskRdy>
   13ef4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13ef8:	e0bff483 	ldbu	r2,-46(fp)
   13efc:	10800058 	cmpnei	r2,r2,1
   13f00:	1000031e 	bne	r2,zero,13f10 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13f04:	00800044 	movi	r2,1
   13f08:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13f0c:	00000a06 	br	13f38 <OSFlagPost+0x2f8>
   13f10:	00000906 	br	13f38 <OSFlagPost+0x2f8>
   13f14:	e0bff317 	ldw	r2,-52(fp)
   13f18:	e0bff815 	stw	r2,-32(fp)
   13f1c:	e0bff817 	ldw	r2,-32(fp)
   13f20:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	00c01bc4 	movi	r3,111
   13f2c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13f30:	0005883a 	mov	r2,zero
   13f34:	00001f06 	br	13fb4 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   13f38:	e0bff117 	ldw	r2,-60(fp)
   13f3c:	10800017 	ldw	r2,0(r2)
   13f40:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13f44:	e0bff117 	ldw	r2,-60(fp)
   13f48:	103f8a1e 	bne	r2,zero,13d74 <__alt_mem_Flash_flash_data+0xf4013d74>
   13f4c:	e0bff317 	ldw	r2,-52(fp)
   13f50:	e0bff915 	stw	r2,-28(fp)
   13f54:	e0bff917 	ldw	r2,-28(fp)
   13f58:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   13f5c:	e0bff203 	ldbu	r2,-56(fp)
   13f60:	10800058 	cmpnei	r2,r2,1
   13f64:	1000011e 	bne	r2,zero,13f6c <OSFlagPost+0x32c>
        OS_Sched();
   13f68:	00124640 	call	12464 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f6c:	0005303a 	rdctl	r2,status
   13f70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f74:	e0fffa17 	ldw	r3,-24(fp)
   13f78:	00bfff84 	movi	r2,-2
   13f7c:	1884703a 	and	r2,r3,r2
   13f80:	1001703a 	wrctl	status,r2
  
  return context;
   13f84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13f88:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   13f8c:	e0bffc17 	ldw	r2,-16(fp)
   13f90:	1080020b 	ldhu	r2,8(r2)
   13f94:	e0bff50d 	sth	r2,-44(fp)
   13f98:	e0bff317 	ldw	r2,-52(fp)
   13f9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fa0:	e0bffb17 	ldw	r2,-20(fp)
   13fa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   13fa8:	e0bfff17 	ldw	r2,-4(fp)
   13fac:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   13fb0:	e0bff50b 	ldhu	r2,-44(fp)
}
   13fb4:	e037883a 	mov	sp,fp
   13fb8:	dfc00117 	ldw	ra,4(sp)
   13fbc:	df000017 	ldw	fp,0(sp)
   13fc0:	dec00204 	addi	sp,sp,8
   13fc4:	f800283a 	ret

00013fc8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   13fc8:	defff904 	addi	sp,sp,-28
   13fcc:	df000615 	stw	fp,24(sp)
   13fd0:	df000604 	addi	fp,sp,24
   13fd4:	e13ffe15 	stw	r4,-8(fp)
   13fd8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13fdc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13fe0:	e0bfff17 	ldw	r2,-4(fp)
   13fe4:	1000021e 	bne	r2,zero,13ff0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   13fe8:	0005883a 	mov	r2,zero
   13fec:	00002306 	br	1407c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13ff0:	e0bffe17 	ldw	r2,-8(fp)
   13ff4:	1000051e 	bne	r2,zero,1400c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13ff8:	e0bfff17 	ldw	r2,-4(fp)
   13ffc:	00c01b84 	movi	r3,110
   14000:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14004:	0005883a 	mov	r2,zero
   14008:	00001c06 	br	1407c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1400c:	e0bffe17 	ldw	r2,-8(fp)
   14010:	10800003 	ldbu	r2,0(r2)
   14014:	10803fcc 	andi	r2,r2,255
   14018:	10800160 	cmpeqi	r2,r2,5
   1401c:	1000051e 	bne	r2,zero,14034 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14020:	e0bfff17 	ldw	r2,-4(fp)
   14024:	00c00044 	movi	r3,1
   14028:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1402c:	0005883a 	mov	r2,zero
   14030:	00001206 	br	1407c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14034:	0005303a 	rdctl	r2,status
   14038:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1403c:	e0fffc17 	ldw	r3,-16(fp)
   14040:	00bfff84 	movi	r2,-2
   14044:	1884703a 	and	r2,r3,r2
   14048:	1001703a 	wrctl	status,r2
  
  return context;
   1404c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14050:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   14054:	e0bffe17 	ldw	r2,-8(fp)
   14058:	1080020b 	ldhu	r2,8(r2)
   1405c:	e0bffb0d 	sth	r2,-20(fp)
   14060:	e0bffa17 	ldw	r2,-24(fp)
   14064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14068:	e0bffd17 	ldw	r2,-12(fp)
   1406c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14070:	e0bfff17 	ldw	r2,-4(fp)
   14074:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   14078:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1407c:	e037883a 	mov	sp,fp
   14080:	df000017 	ldw	fp,0(sp)
   14084:	dec00104 	addi	sp,sp,4
   14088:	f800283a 	ret

0001408c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1408c:	defff804 	addi	sp,sp,-32
   14090:	df000715 	stw	fp,28(sp)
   14094:	df000704 	addi	fp,sp,28
   14098:	e13ffb15 	stw	r4,-20(fp)
   1409c:	e17ffc15 	stw	r5,-16(fp)
   140a0:	3009883a 	mov	r4,r6
   140a4:	3807883a 	mov	r3,r7
   140a8:	e0800117 	ldw	r2,4(fp)
   140ac:	e13ffd0d 	sth	r4,-12(fp)
   140b0:	e0fffe05 	stb	r3,-8(fp)
   140b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   140b8:	008000b4 	movhi	r2,2
   140bc:	1082bb04 	addi	r2,r2,2796
   140c0:	10c00017 	ldw	r3,0(r2)
   140c4:	008000b4 	movhi	r2,2
   140c8:	1082bb04 	addi	r2,r2,2796
   140cc:	10800017 	ldw	r2,0(r2)
   140d0:	10800c03 	ldbu	r2,48(r2)
   140d4:	10800814 	ori	r2,r2,32
   140d8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   140dc:	008000b4 	movhi	r2,2
   140e0:	1082bb04 	addi	r2,r2,2796
   140e4:	10800017 	ldw	r2,0(r2)
   140e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   140ec:	008000b4 	movhi	r2,2
   140f0:	1082bb04 	addi	r2,r2,2796
   140f4:	10800017 	ldw	r2,0(r2)
   140f8:	e0ffff0b 	ldhu	r3,-4(fp)
   140fc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   14100:	008000b4 	movhi	r2,2
   14104:	1082bb04 	addi	r2,r2,2796
   14108:	10800017 	ldw	r2,0(r2)
   1410c:	e0fffc17 	ldw	r3,-16(fp)
   14110:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   14114:	e0bffc17 	ldw	r2,-16(fp)
   14118:	e0fffd0b 	ldhu	r3,-12(fp)
   1411c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   14120:	e0bffc17 	ldw	r2,-16(fp)
   14124:	e0fffe03 	ldbu	r3,-8(fp)
   14128:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1412c:	008000b4 	movhi	r2,2
   14130:	1082bb04 	addi	r2,r2,2796
   14134:	10c00017 	ldw	r3,0(r2)
   14138:	e0bffc17 	ldw	r2,-16(fp)
   1413c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   14140:	e0bffb17 	ldw	r2,-20(fp)
   14144:	10c00117 	ldw	r3,4(r2)
   14148:	e0bffc17 	ldw	r2,-16(fp)
   1414c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   14150:	e0bffc17 	ldw	r2,-16(fp)
   14154:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   14158:	e0bffc17 	ldw	r2,-16(fp)
   1415c:	e0fffb17 	ldw	r3,-20(fp)
   14160:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   14164:	e0bffb17 	ldw	r2,-20(fp)
   14168:	10800117 	ldw	r2,4(r2)
   1416c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   14170:	e0bff917 	ldw	r2,-28(fp)
   14174:	10000326 	beq	r2,zero,14184 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   14178:	e0bff917 	ldw	r2,-28(fp)
   1417c:	e0fffc17 	ldw	r3,-16(fp)
   14180:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   14184:	e0bffb17 	ldw	r2,-20(fp)
   14188:	e0fffc17 	ldw	r3,-16(fp)
   1418c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   14190:	008000b4 	movhi	r2,2
   14194:	1082bb04 	addi	r2,r2,2796
   14198:	10800017 	ldw	r2,0(r2)
   1419c:	10800d03 	ldbu	r2,52(r2)
   141a0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   141a4:	e0fffa03 	ldbu	r3,-24(fp)
   141a8:	e13ffa03 	ldbu	r4,-24(fp)
   141ac:	008000b4 	movhi	r2,2
   141b0:	1082b844 	addi	r2,r2,2785
   141b4:	1105883a 	add	r2,r2,r4
   141b8:	10800003 	ldbu	r2,0(r2)
   141bc:	1009883a 	mov	r4,r2
   141c0:	008000b4 	movhi	r2,2
   141c4:	1082bb04 	addi	r2,r2,2796
   141c8:	10800017 	ldw	r2,0(r2)
   141cc:	10800d43 	ldbu	r2,53(r2)
   141d0:	0084303a 	nor	r2,zero,r2
   141d4:	2084703a 	and	r2,r4,r2
   141d8:	1009883a 	mov	r4,r2
   141dc:	008000b4 	movhi	r2,2
   141e0:	1082b844 	addi	r2,r2,2785
   141e4:	10c5883a 	add	r2,r2,r3
   141e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   141ec:	e0fffa03 	ldbu	r3,-24(fp)
   141f0:	008000b4 	movhi	r2,2
   141f4:	1082b844 	addi	r2,r2,2785
   141f8:	10c5883a 	add	r2,r2,r3
   141fc:	10800003 	ldbu	r2,0(r2)
   14200:	10803fcc 	andi	r2,r2,255
   14204:	10000e1e 	bne	r2,zero,14240 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14208:	008000b4 	movhi	r2,2
   1420c:	1082bb04 	addi	r2,r2,2796
   14210:	10800017 	ldw	r2,0(r2)
   14214:	10800d83 	ldbu	r2,54(r2)
   14218:	0084303a 	nor	r2,zero,r2
   1421c:	1007883a 	mov	r3,r2
   14220:	008000b4 	movhi	r2,2
   14224:	1082b804 	addi	r2,r2,2784
   14228:	10800003 	ldbu	r2,0(r2)
   1422c:	1884703a 	and	r2,r3,r2
   14230:	1007883a 	mov	r3,r2
   14234:	008000b4 	movhi	r2,2
   14238:	1082b804 	addi	r2,r2,2784
   1423c:	10c00005 	stb	r3,0(r2)
    }
}
   14240:	e037883a 	mov	sp,fp
   14244:	df000017 	ldw	fp,0(sp)
   14248:	dec00104 	addi	sp,sp,4
   1424c:	f800283a 	ret

00014250 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   14250:	defffb04 	addi	sp,sp,-20
   14254:	dfc00415 	stw	ra,16(sp)
   14258:	df000315 	stw	fp,12(sp)
   1425c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   14260:	010000b4 	movhi	r4,2
   14264:	2112d804 	addi	r4,r4,19296
   14268:	0140dc04 	movi	r5,880
   1426c:	00123b00 	call	123b0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   14270:	008000b4 	movhi	r2,2
   14274:	1092d804 	addi	r2,r2,19296
   14278:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1427c:	008000b4 	movhi	r2,2
   14280:	1092e304 	addi	r2,r2,19340
   14284:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14288:	e03ffd0d 	sth	zero,-12(fp)
   1428c:	00001306 	br	142dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14290:	e0bffe17 	ldw	r2,-8(fp)
   14294:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   14298:	e0bffe17 	ldw	r2,-8(fp)
   1429c:	e0ffff17 	ldw	r3,-4(fp)
   142a0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   142a4:	e0bffe17 	ldw	r2,-8(fp)
   142a8:	00c00fc4 	movi	r3,63
   142ac:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   142b0:	e0bffe17 	ldw	r2,-8(fp)
   142b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   142b8:	e0bffe17 	ldw	r2,-8(fp)
   142bc:	10800b04 	addi	r2,r2,44
   142c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   142c4:	e0bfff17 	ldw	r2,-4(fp)
   142c8:	10800b04 	addi	r2,r2,44
   142cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   142d0:	e0bffd0b 	ldhu	r2,-12(fp)
   142d4:	10800044 	addi	r2,r2,1
   142d8:	e0bffd0d 	sth	r2,-12(fp)
   142dc:	e0bffd0b 	ldhu	r2,-12(fp)
   142e0:	108004f0 	cmpltui	r2,r2,19
   142e4:	103fea1e 	bne	r2,zero,14290 <__alt_mem_Flash_flash_data+0xf4014290>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   142e8:	e0bffe17 	ldw	r2,-8(fp)
   142ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   142f0:	e0bffe17 	ldw	r2,-8(fp)
   142f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	00c00fc4 	movi	r3,63
   14300:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14304:	e0bffe17 	ldw	r2,-8(fp)
   14308:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1430c:	008000b4 	movhi	r2,2
   14310:	1082bd04 	addi	r2,r2,2804
   14314:	00c000b4 	movhi	r3,2
   14318:	18d2d804 	addi	r3,r3,19296
   1431c:	10c00015 	stw	r3,0(r2)
#endif
}
   14320:	e037883a 	mov	sp,fp
   14324:	dfc00117 	ldw	ra,4(sp)
   14328:	df000017 	ldw	fp,0(sp)
   1432c:	dec00204 	addi	sp,sp,8
   14330:	f800283a 	ret

00014334 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   14334:	defffa04 	addi	sp,sp,-24
   14338:	dfc00515 	stw	ra,20(sp)
   1433c:	df000415 	stw	fp,16(sp)
   14340:	df000404 	addi	fp,sp,16
   14344:	e13ffe15 	stw	r4,-8(fp)
   14348:	2805883a 	mov	r2,r5
   1434c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   14350:	e0bffe17 	ldw	r2,-8(fp)
   14354:	10800217 	ldw	r2,8(r2)
   14358:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   14364:	e0bffd17 	ldw	r2,-12(fp)
   14368:	e0ffff0b 	ldhu	r3,-4(fp)
   1436c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   14370:	e0bffd17 	ldw	r2,-12(fp)
   14374:	10c00c03 	ldbu	r3,48(r2)
   14378:	00bff7c4 	movi	r2,-33
   1437c:	1884703a 	and	r2,r3,r2
   14380:	1007883a 	mov	r3,r2
   14384:	e0bffd17 	ldw	r2,-12(fp)
   14388:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1438c:	e0bffd17 	ldw	r2,-12(fp)
   14390:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   14394:	e0bffd17 	ldw	r2,-12(fp)
   14398:	10800c03 	ldbu	r2,48(r2)
   1439c:	10803fcc 	andi	r2,r2,255
   143a0:	10001f1e 	bne	r2,zero,14420 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   143a4:	e0bffd17 	ldw	r2,-12(fp)
   143a8:	10c00d83 	ldbu	r3,54(r2)
   143ac:	008000b4 	movhi	r2,2
   143b0:	1082b804 	addi	r2,r2,2784
   143b4:	10800003 	ldbu	r2,0(r2)
   143b8:	1884b03a 	or	r2,r3,r2
   143bc:	1007883a 	mov	r3,r2
   143c0:	008000b4 	movhi	r2,2
   143c4:	1082b804 	addi	r2,r2,2784
   143c8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   143cc:	e0bffd17 	ldw	r2,-12(fp)
   143d0:	10800d03 	ldbu	r2,52(r2)
   143d4:	10c03fcc 	andi	r3,r2,255
   143d8:	e0bffd17 	ldw	r2,-12(fp)
   143dc:	10800d03 	ldbu	r2,52(r2)
   143e0:	11003fcc 	andi	r4,r2,255
   143e4:	008000b4 	movhi	r2,2
   143e8:	1082b844 	addi	r2,r2,2785
   143ec:	1105883a 	add	r2,r2,r4
   143f0:	11000003 	ldbu	r4,0(r2)
   143f4:	e0bffd17 	ldw	r2,-12(fp)
   143f8:	10800d43 	ldbu	r2,53(r2)
   143fc:	2084b03a 	or	r2,r4,r2
   14400:	1009883a 	mov	r4,r2
   14404:	008000b4 	movhi	r2,2
   14408:	1082b844 	addi	r2,r2,2785
   1440c:	10c5883a 	add	r2,r2,r3
   14410:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   14414:	00800044 	movi	r2,1
   14418:	e0bffc05 	stb	r2,-16(fp)
   1441c:	00000106 	br	14424 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   14420:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   14424:	e13ffe17 	ldw	r4,-8(fp)
   14428:	00144440 	call	14444 <OS_FlagUnlink>
    return (sched);
   1442c:	e0bffc03 	ldbu	r2,-16(fp)
}
   14430:	e037883a 	mov	sp,fp
   14434:	dfc00117 	ldw	ra,4(sp)
   14438:	df000017 	ldw	fp,0(sp)
   1443c:	dec00204 	addi	sp,sp,8
   14440:	f800283a 	ret

00014444 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   14444:	defffa04 	addi	sp,sp,-24
   14448:	df000515 	stw	fp,20(sp)
   1444c:	df000504 	addi	fp,sp,20
   14450:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   14454:	e0bfff17 	ldw	r2,-4(fp)
   14458:	10800117 	ldw	r2,4(r2)
   1445c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   14460:	e0bfff17 	ldw	r2,-4(fp)
   14464:	10800017 	ldw	r2,0(r2)
   14468:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1446c:	e0bffb17 	ldw	r2,-20(fp)
   14470:	10000b1e 	bne	r2,zero,144a0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   14474:	e0bfff17 	ldw	r2,-4(fp)
   14478:	10800317 	ldw	r2,12(r2)
   1447c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   14480:	e0bffd17 	ldw	r2,-12(fp)
   14484:	e0fffc17 	ldw	r3,-16(fp)
   14488:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1448c:	e0bffc17 	ldw	r2,-16(fp)
   14490:	10000b26 	beq	r2,zero,144c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   14494:	e0bffc17 	ldw	r2,-16(fp)
   14498:	10000115 	stw	zero,4(r2)
   1449c:	00000806 	br	144c0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   144a0:	e0bffb17 	ldw	r2,-20(fp)
   144a4:	e0fffc17 	ldw	r3,-16(fp)
   144a8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   144ac:	e0bffc17 	ldw	r2,-16(fp)
   144b0:	10000326 	beq	r2,zero,144c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   144b4:	e0bffc17 	ldw	r2,-16(fp)
   144b8:	e0fffb17 	ldw	r3,-20(fp)
   144bc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   144c0:	e0bfff17 	ldw	r2,-4(fp)
   144c4:	10800217 	ldw	r2,8(r2)
   144c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   144cc:	e0bffe17 	ldw	r2,-8(fp)
   144d0:	10000a15 	stw	zero,40(r2)
#endif
}
   144d4:	e037883a 	mov	sp,fp
   144d8:	df000017 	ldw	fp,0(sp)
   144dc:	dec00104 	addi	sp,sp,4
   144e0:	f800283a 	ret

000144e4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   144e4:	defff404 	addi	sp,sp,-48
   144e8:	df000b15 	stw	fp,44(sp)
   144ec:	df000b04 	addi	fp,sp,44
   144f0:	e13ffc15 	stw	r4,-16(fp)
   144f4:	e17ffd15 	stw	r5,-12(fp)
   144f8:	e1bffe15 	stw	r6,-8(fp)
   144fc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14500:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14504:	e0bfff17 	ldw	r2,-4(fp)
   14508:	1000021e 	bne	r2,zero,14514 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1450c:	0005883a 	mov	r2,zero
   14510:	00006d06 	br	146c8 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   14514:	e0bffc17 	ldw	r2,-16(fp)
   14518:	1000051e 	bne	r2,zero,14530 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1451c:	e0bfff17 	ldw	r2,-4(fp)
   14520:	00c01884 	movi	r3,98
   14524:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14528:	0005883a 	mov	r2,zero
   1452c:	00006606 	br	146c8 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   14530:	e0bffc17 	ldw	r2,-16(fp)
   14534:	108000cc 	andi	r2,r2,3
   14538:	10000526 	beq	r2,zero,14550 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1453c:	e0bfff17 	ldw	r2,-4(fp)
   14540:	00c01884 	movi	r3,98
   14544:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14548:	0005883a 	mov	r2,zero
   1454c:	00005e06 	br	146c8 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   14550:	e0bffd17 	ldw	r2,-12(fp)
   14554:	108000a8 	cmpgeui	r2,r2,2
   14558:	1000051e 	bne	r2,zero,14570 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1455c:	e0bfff17 	ldw	r2,-4(fp)
   14560:	00c016c4 	movi	r3,91
   14564:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14568:	0005883a 	mov	r2,zero
   1456c:	00005606 	br	146c8 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   14570:	e0bffe17 	ldw	r2,-8(fp)
   14574:	10800128 	cmpgeui	r2,r2,4
   14578:	1000051e 	bne	r2,zero,14590 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1457c:	e0bfff17 	ldw	r2,-4(fp)
   14580:	00c01704 	movi	r3,92
   14584:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14588:	0005883a 	mov	r2,zero
   1458c:	00004e06 	br	146c8 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14590:	0005303a 	rdctl	r2,status
   14594:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14598:	e0fffa17 	ldw	r3,-24(fp)
   1459c:	00bfff84 	movi	r2,-2
   145a0:	1884703a 	and	r2,r3,r2
   145a4:	1001703a 	wrctl	status,r2
  
  return context;
   145a8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   145ac:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   145b0:	008000b4 	movhi	r2,2
   145b4:	1082b504 	addi	r2,r2,2772
   145b8:	10800017 	ldw	r2,0(r2)
   145bc:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   145c0:	008000b4 	movhi	r2,2
   145c4:	1082b504 	addi	r2,r2,2772
   145c8:	10800017 	ldw	r2,0(r2)
   145cc:	10000726 	beq	r2,zero,145ec <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   145d0:	008000b4 	movhi	r2,2
   145d4:	1082b504 	addi	r2,r2,2772
   145d8:	10800017 	ldw	r2,0(r2)
   145dc:	10c00117 	ldw	r3,4(r2)
   145e0:	008000b4 	movhi	r2,2
   145e4:	1082b504 	addi	r2,r2,2772
   145e8:	10c00015 	stw	r3,0(r2)
   145ec:	e0bff817 	ldw	r2,-32(fp)
   145f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145f4:	e0bffb17 	ldw	r2,-20(fp)
   145f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   145fc:	e0bff917 	ldw	r2,-28(fp)
   14600:	1000051e 	bne	r2,zero,14618 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   14604:	e0bfff17 	ldw	r2,-4(fp)
   14608:	00c01684 	movi	r3,90
   1460c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14610:	0005883a 	mov	r2,zero
   14614:	00002c06 	br	146c8 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   14618:	e0bffc17 	ldw	r2,-16(fp)
   1461c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   14620:	e0fffc17 	ldw	r3,-16(fp)
   14624:	e0bffe17 	ldw	r2,-8(fp)
   14628:	1885883a 	add	r2,r3,r2
   1462c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   14630:	e03ff715 	stw	zero,-36(fp)
   14634:	00000c06 	br	14668 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   14638:	e0bff617 	ldw	r2,-40(fp)
   1463c:	e0fff517 	ldw	r3,-44(fp)
   14640:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   14644:	e0bff517 	ldw	r2,-44(fp)
   14648:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1464c:	e0fff517 	ldw	r3,-44(fp)
   14650:	e0bffe17 	ldw	r2,-8(fp)
   14654:	1885883a 	add	r2,r3,r2
   14658:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1465c:	e0bff717 	ldw	r2,-36(fp)
   14660:	10800044 	addi	r2,r2,1
   14664:	e0bff715 	stw	r2,-36(fp)
   14668:	e0bffd17 	ldw	r2,-12(fp)
   1466c:	10bfffc4 	addi	r2,r2,-1
   14670:	e0fff717 	ldw	r3,-36(fp)
   14674:	18bff036 	bltu	r3,r2,14638 <__alt_mem_Flash_flash_data+0xf4014638>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   14678:	e0bff617 	ldw	r2,-40(fp)
   1467c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   14680:	e0bff917 	ldw	r2,-28(fp)
   14684:	e0fffc17 	ldw	r3,-16(fp)
   14688:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1468c:	e0bff917 	ldw	r2,-28(fp)
   14690:	e0fffc17 	ldw	r3,-16(fp)
   14694:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   14698:	e0bff917 	ldw	r2,-28(fp)
   1469c:	e0fffd17 	ldw	r3,-12(fp)
   146a0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   146a4:	e0bff917 	ldw	r2,-28(fp)
   146a8:	e0fffd17 	ldw	r3,-12(fp)
   146ac:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   146b0:	e0bff917 	ldw	r2,-28(fp)
   146b4:	e0fffe17 	ldw	r3,-8(fp)
   146b8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   146bc:	e0bfff17 	ldw	r2,-4(fp)
   146c0:	10000005 	stb	zero,0(r2)
    return (pmem);
   146c4:	e0bff917 	ldw	r2,-28(fp)
}
   146c8:	e037883a 	mov	sp,fp
   146cc:	df000017 	ldw	fp,0(sp)
   146d0:	dec00104 	addi	sp,sp,4
   146d4:	f800283a 	ret

000146d8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   146d8:	defff804 	addi	sp,sp,-32
   146dc:	df000715 	stw	fp,28(sp)
   146e0:	df000704 	addi	fp,sp,28
   146e4:	e13ffe15 	stw	r4,-8(fp)
   146e8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   146ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   146f0:	e0bfff17 	ldw	r2,-4(fp)
   146f4:	1000021e 	bne	r2,zero,14700 <OSMemGet+0x28>
        return ((void *)0);
   146f8:	0005883a 	mov	r2,zero
   146fc:	00002e06 	br	147b8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   14700:	e0bffe17 	ldw	r2,-8(fp)
   14704:	1000051e 	bne	r2,zero,1471c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14708:	e0bfff17 	ldw	r2,-4(fp)
   1470c:	00c01804 	movi	r3,96
   14710:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14714:	0005883a 	mov	r2,zero
   14718:	00002706 	br	147b8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1471c:	0005303a 	rdctl	r2,status
   14720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14724:	e0fffb17 	ldw	r3,-20(fp)
   14728:	00bfff84 	movi	r2,-2
   1472c:	1884703a 	and	r2,r3,r2
   14730:	1001703a 	wrctl	status,r2
  
  return context;
   14734:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14738:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1473c:	e0bffe17 	ldw	r2,-8(fp)
   14740:	10800417 	ldw	r2,16(r2)
   14744:	10001426 	beq	r2,zero,14798 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   14748:	e0bffe17 	ldw	r2,-8(fp)
   1474c:	10800117 	ldw	r2,4(r2)
   14750:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   14754:	e0bffa17 	ldw	r2,-24(fp)
   14758:	10c00017 	ldw	r3,0(r2)
   1475c:	e0bffe17 	ldw	r2,-8(fp)
   14760:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   14764:	e0bffe17 	ldw	r2,-8(fp)
   14768:	10800417 	ldw	r2,16(r2)
   1476c:	10ffffc4 	addi	r3,r2,-1
   14770:	e0bffe17 	ldw	r2,-8(fp)
   14774:	10c00415 	stw	r3,16(r2)
   14778:	e0bff917 	ldw	r2,-28(fp)
   1477c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14780:	e0bffc17 	ldw	r2,-16(fp)
   14784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   14788:	e0bfff17 	ldw	r2,-4(fp)
   1478c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   14790:	e0bffa17 	ldw	r2,-24(fp)
   14794:	00000806 	br	147b8 <OSMemGet+0xe0>
   14798:	e0bff917 	ldw	r2,-28(fp)
   1479c:	e0bffd15 	stw	r2,-12(fp)
   147a0:	e0bffd17 	ldw	r2,-12(fp)
   147a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	00c01744 	movi	r3,93
   147b0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   147b4:	0005883a 	mov	r2,zero
}
   147b8:	e037883a 	mov	sp,fp
   147bc:	df000017 	ldw	fp,0(sp)
   147c0:	dec00104 	addi	sp,sp,4
   147c4:	f800283a 	ret

000147c8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   147c8:	defff704 	addi	sp,sp,-36
   147cc:	dfc00815 	stw	ra,32(sp)
   147d0:	df000715 	stw	fp,28(sp)
   147d4:	df000704 	addi	fp,sp,28
   147d8:	e13ffd15 	stw	r4,-12(fp)
   147dc:	e17ffe15 	stw	r5,-8(fp)
   147e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   147e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   147e8:	e0bfff17 	ldw	r2,-4(fp)
   147ec:	1000021e 	bne	r2,zero,147f8 <OSMemNameGet+0x30>
        return (0);
   147f0:	0005883a 	mov	r2,zero
   147f4:	00002d06 	br	148ac <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   147f8:	e0bffd17 	ldw	r2,-12(fp)
   147fc:	1000051e 	bne	r2,zero,14814 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14800:	e0bfff17 	ldw	r2,-4(fp)
   14804:	00c01804 	movi	r3,96
   14808:	10c00005 	stb	r3,0(r2)
        return (0);
   1480c:	0005883a 	mov	r2,zero
   14810:	00002606 	br	148ac <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14814:	e0bffe17 	ldw	r2,-8(fp)
   14818:	1000051e 	bne	r2,zero,14830 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1481c:	e0bfff17 	ldw	r2,-4(fp)
   14820:	00c00304 	movi	r3,12
   14824:	10c00005 	stb	r3,0(r2)
        return (0);
   14828:	0005883a 	mov	r2,zero
   1482c:	00001f06 	br	148ac <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14830:	008000b4 	movhi	r2,2
   14834:	1082ba04 	addi	r2,r2,2792
   14838:	10800003 	ldbu	r2,0(r2)
   1483c:	10803fcc 	andi	r2,r2,255
   14840:	10000526 	beq	r2,zero,14858 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   14844:	e0bfff17 	ldw	r2,-4(fp)
   14848:	00c00444 	movi	r3,17
   1484c:	10c00005 	stb	r3,0(r2)
        return (0);
   14850:	0005883a 	mov	r2,zero
   14854:	00001506 	br	148ac <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14858:	0005303a 	rdctl	r2,status
   1485c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14860:	e0fffb17 	ldw	r3,-20(fp)
   14864:	00bfff84 	movi	r2,-2
   14868:	1884703a 	and	r2,r3,r2
   1486c:	1001703a 	wrctl	status,r2
  
  return context;
   14870:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14874:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   14878:	e0bffd17 	ldw	r2,-12(fp)
   1487c:	10800504 	addi	r2,r2,20
   14880:	e13ffe17 	ldw	r4,-8(fp)
   14884:	100b883a 	mov	r5,r2
   14888:	00125a00 	call	125a0 <OS_StrCopy>
   1488c:	e0bffa05 	stb	r2,-24(fp)
   14890:	e0bff917 	ldw	r2,-28(fp)
   14894:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14898:	e0bffc17 	ldw	r2,-16(fp)
   1489c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   148a0:	e0bfff17 	ldw	r2,-4(fp)
   148a4:	10000005 	stb	zero,0(r2)
    return (len);
   148a8:	e0bffa03 	ldbu	r2,-24(fp)
}
   148ac:	e037883a 	mov	sp,fp
   148b0:	dfc00117 	ldw	ra,4(sp)
   148b4:	df000017 	ldw	fp,0(sp)
   148b8:	dec00204 	addi	sp,sp,8
   148bc:	f800283a 	ret

000148c0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   148c0:	defff604 	addi	sp,sp,-40
   148c4:	dfc00915 	stw	ra,36(sp)
   148c8:	df000815 	stw	fp,32(sp)
   148cc:	df000804 	addi	fp,sp,32
   148d0:	e13ffd15 	stw	r4,-12(fp)
   148d4:	e17ffe15 	stw	r5,-8(fp)
   148d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   148e0:	e0bfff17 	ldw	r2,-4(fp)
   148e4:	1000011e 	bne	r2,zero,148ec <OSMemNameSet+0x2c>
        return;
   148e8:	00003606 	br	149c4 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   148ec:	e0bffd17 	ldw	r2,-12(fp)
   148f0:	1000041e 	bne	r2,zero,14904 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   148f4:	e0bfff17 	ldw	r2,-4(fp)
   148f8:	00c01804 	movi	r3,96
   148fc:	10c00005 	stb	r3,0(r2)
        return;
   14900:	00003006 	br	149c4 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14904:	e0bffe17 	ldw	r2,-8(fp)
   14908:	1000041e 	bne	r2,zero,1491c <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1490c:	e0bfff17 	ldw	r2,-4(fp)
   14910:	00c00304 	movi	r3,12
   14914:	10c00005 	stb	r3,0(r2)
        return;
   14918:	00002a06 	br	149c4 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1491c:	008000b4 	movhi	r2,2
   14920:	1082ba04 	addi	r2,r2,2792
   14924:	10800003 	ldbu	r2,0(r2)
   14928:	10803fcc 	andi	r2,r2,255
   1492c:	10000426 	beq	r2,zero,14940 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14930:	e0bfff17 	ldw	r2,-4(fp)
   14934:	00c00484 	movi	r3,18
   14938:	10c00005 	stb	r3,0(r2)
        return;
   1493c:	00002106 	br	149c4 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14940:	0005303a 	rdctl	r2,status
   14944:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14948:	e0fffa17 	ldw	r3,-24(fp)
   1494c:	00bfff84 	movi	r2,-2
   14950:	1884703a 	and	r2,r3,r2
   14954:	1001703a 	wrctl	status,r2
  
  return context;
   14958:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1495c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   14960:	e13ffe17 	ldw	r4,-8(fp)
   14964:	00126140 	call	12614 <OS_StrLen>
   14968:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1496c:	e0bff903 	ldbu	r2,-28(fp)
   14970:	10800830 	cmpltui	r2,r2,32
   14974:	1000081e 	bne	r2,zero,14998 <OSMemNameSet+0xd8>
   14978:	e0bff817 	ldw	r2,-32(fp)
   1497c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14980:	e0bffb17 	ldw	r2,-20(fp)
   14984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   14988:	e0bfff17 	ldw	r2,-4(fp)
   1498c:	00c018c4 	movi	r3,99
   14990:	10c00005 	stb	r3,0(r2)
        return;
   14994:	00000b06 	br	149c4 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   14998:	e0bffd17 	ldw	r2,-12(fp)
   1499c:	10800504 	addi	r2,r2,20
   149a0:	1009883a 	mov	r4,r2
   149a4:	e17ffe17 	ldw	r5,-8(fp)
   149a8:	00125a00 	call	125a0 <OS_StrCopy>
   149ac:	e0bff817 	ldw	r2,-32(fp)
   149b0:	e0bffc15 	stw	r2,-16(fp)
   149b4:	e0bffc17 	ldw	r2,-16(fp)
   149b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   149bc:	e0bfff17 	ldw	r2,-4(fp)
   149c0:	10000005 	stb	zero,0(r2)
}
   149c4:	e037883a 	mov	sp,fp
   149c8:	dfc00117 	ldw	ra,4(sp)
   149cc:	df000017 	ldw	fp,0(sp)
   149d0:	dec00204 	addi	sp,sp,8
   149d4:	f800283a 	ret

000149d8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   149d8:	defff904 	addi	sp,sp,-28
   149dc:	df000615 	stw	fp,24(sp)
   149e0:	df000604 	addi	fp,sp,24
   149e4:	e13ffe15 	stw	r4,-8(fp)
   149e8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   149ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   149f0:	e0bffe17 	ldw	r2,-8(fp)
   149f4:	1000021e 	bne	r2,zero,14a00 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   149f8:	00801804 	movi	r2,96
   149fc:	00002806 	br	14aa0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   14a00:	e0bfff17 	ldw	r2,-4(fp)
   14a04:	1000021e 	bne	r2,zero,14a10 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   14a08:	008017c4 	movi	r2,95
   14a0c:	00002406 	br	14aa0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a10:	0005303a 	rdctl	r2,status
   14a14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a18:	e0fffb17 	ldw	r3,-20(fp)
   14a1c:	00bfff84 	movi	r2,-2
   14a20:	1884703a 	and	r2,r3,r2
   14a24:	1001703a 	wrctl	status,r2
  
  return context;
   14a28:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a2c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14a30:	e0bffe17 	ldw	r2,-8(fp)
   14a34:	10c00417 	ldw	r3,16(r2)
   14a38:	e0bffe17 	ldw	r2,-8(fp)
   14a3c:	10800317 	ldw	r2,12(r2)
   14a40:	18800636 	bltu	r3,r2,14a5c <OSMemPut+0x84>
   14a44:	e0bffa17 	ldw	r2,-24(fp)
   14a48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a4c:	e0bffc17 	ldw	r2,-16(fp)
   14a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   14a54:	00801784 	movi	r2,94
   14a58:	00001106 	br	14aa0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   14a5c:	e0bffe17 	ldw	r2,-8(fp)
   14a60:	10c00117 	ldw	r3,4(r2)
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   14a6c:	e0bffe17 	ldw	r2,-8(fp)
   14a70:	e0ffff17 	ldw	r3,-4(fp)
   14a74:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   14a78:	e0bffe17 	ldw	r2,-8(fp)
   14a7c:	10800417 	ldw	r2,16(r2)
   14a80:	10c00044 	addi	r3,r2,1
   14a84:	e0bffe17 	ldw	r2,-8(fp)
   14a88:	10c00415 	stw	r3,16(r2)
   14a8c:	e0bffa17 	ldw	r2,-24(fp)
   14a90:	e0bffd15 	stw	r2,-12(fp)
   14a94:	e0bffd17 	ldw	r2,-12(fp)
   14a98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14a9c:	0005883a 	mov	r2,zero
}
   14aa0:	e037883a 	mov	sp,fp
   14aa4:	df000017 	ldw	fp,0(sp)
   14aa8:	dec00104 	addi	sp,sp,4
   14aac:	f800283a 	ret

00014ab0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14ab0:	defffa04 	addi	sp,sp,-24
   14ab4:	df000515 	stw	fp,20(sp)
   14ab8:	df000504 	addi	fp,sp,20
   14abc:	e13ffe15 	stw	r4,-8(fp)
   14ac0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14ac4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14ac8:	e0bffe17 	ldw	r2,-8(fp)
   14acc:	1000021e 	bne	r2,zero,14ad8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14ad0:	00801804 	movi	r2,96
   14ad4:	00002c06 	br	14b88 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14ad8:	e0bfff17 	ldw	r2,-4(fp)
   14adc:	1000021e 	bne	r2,zero,14ae8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14ae0:	00801844 	movi	r2,97
   14ae4:	00002806 	br	14b88 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ae8:	0005303a 	rdctl	r2,status
   14aec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14af0:	e0fffc17 	ldw	r3,-16(fp)
   14af4:	00bfff84 	movi	r2,-2
   14af8:	1884703a 	and	r2,r3,r2
   14afc:	1001703a 	wrctl	status,r2
  
  return context;
   14b00:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b04:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14b08:	e0bffe17 	ldw	r2,-8(fp)
   14b0c:	10c00017 	ldw	r3,0(r2)
   14b10:	e0bfff17 	ldw	r2,-4(fp)
   14b14:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14b18:	e0bffe17 	ldw	r2,-8(fp)
   14b1c:	10c00117 	ldw	r3,4(r2)
   14b20:	e0bfff17 	ldw	r2,-4(fp)
   14b24:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14b28:	e0bffe17 	ldw	r2,-8(fp)
   14b2c:	10c00217 	ldw	r3,8(r2)
   14b30:	e0bfff17 	ldw	r2,-4(fp)
   14b34:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14b38:	e0bffe17 	ldw	r2,-8(fp)
   14b3c:	10c00317 	ldw	r3,12(r2)
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14b48:	e0bffe17 	ldw	r2,-8(fp)
   14b4c:	10c00417 	ldw	r3,16(r2)
   14b50:	e0bfff17 	ldw	r2,-4(fp)
   14b54:	10c00415 	stw	r3,16(r2)
   14b58:	e0bffb17 	ldw	r2,-20(fp)
   14b5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b60:	e0bffd17 	ldw	r2,-12(fp)
   14b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14b68:	e0bfff17 	ldw	r2,-4(fp)
   14b6c:	10c00317 	ldw	r3,12(r2)
   14b70:	e0bfff17 	ldw	r2,-4(fp)
   14b74:	10800417 	ldw	r2,16(r2)
   14b78:	1887c83a 	sub	r3,r3,r2
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14b84:	0005883a 	mov	r2,zero
}
   14b88:	e037883a 	mov	sp,fp
   14b8c:	df000017 	ldw	fp,0(sp)
   14b90:	dec00104 	addi	sp,sp,4
   14b94:	f800283a 	ret

00014b98 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14b98:	defffc04 	addi	sp,sp,-16
   14b9c:	dfc00315 	stw	ra,12(sp)
   14ba0:	df000215 	stw	fp,8(sp)
   14ba4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14ba8:	010000b4 	movhi	r4,2
   14bac:	2113b404 	addi	r4,r4,20176
   14bb0:	01430c04 	movi	r5,3120
   14bb4:	00123b00 	call	123b0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14bb8:	008000b4 	movhi	r2,2
   14bbc:	1093b404 	addi	r2,r2,20176
   14bc0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14bc4:	e03fff0d 	sth	zero,-4(fp)
   14bc8:	00001306 	br	14c18 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14bcc:	e0bfff0b 	ldhu	r2,-4(fp)
   14bd0:	10800044 	addi	r2,r2,1
   14bd4:	10c00d24 	muli	r3,r2,52
   14bd8:	008000b4 	movhi	r2,2
   14bdc:	1093b404 	addi	r2,r2,20176
   14be0:	1887883a 	add	r3,r3,r2
   14be4:	e0bffe17 	ldw	r2,-8(fp)
   14be8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14bec:	e0bffe17 	ldw	r2,-8(fp)
   14bf0:	00c00fc4 	movi	r3,63
   14bf4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14bf8:	e0bffe17 	ldw	r2,-8(fp)
   14bfc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14c00:	e0bffe17 	ldw	r2,-8(fp)
   14c04:	10800d04 	addi	r2,r2,52
   14c08:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14c0c:	e0bfff0b 	ldhu	r2,-4(fp)
   14c10:	10800044 	addi	r2,r2,1
   14c14:	e0bfff0d 	sth	r2,-4(fp)
   14c18:	e0bfff0b 	ldhu	r2,-4(fp)
   14c1c:	10800ef0 	cmpltui	r2,r2,59
   14c20:	103fea1e 	bne	r2,zero,14bcc <__alt_mem_Flash_flash_data+0xf4014bcc>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14c24:	e0bffe17 	ldw	r2,-8(fp)
   14c28:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14c2c:	e0bffe17 	ldw	r2,-8(fp)
   14c30:	00c00fc4 	movi	r3,63
   14c34:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   14c38:	e0bffe17 	ldw	r2,-8(fp)
   14c3c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14c40:	008000b4 	movhi	r2,2
   14c44:	1082b504 	addi	r2,r2,2772
   14c48:	00c000b4 	movhi	r3,2
   14c4c:	18d3b404 	addi	r3,r3,20176
   14c50:	10c00015 	stw	r3,0(r2)
#endif
}
   14c54:	e037883a 	mov	sp,fp
   14c58:	dfc00117 	ldw	ra,4(sp)
   14c5c:	df000017 	ldw	fp,0(sp)
   14c60:	dec00204 	addi	sp,sp,8
   14c64:	f800283a 	ret

00014c68 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14c68:	defff804 	addi	sp,sp,-32
   14c6c:	df000715 	stw	fp,28(sp)
   14c70:	df000704 	addi	fp,sp,28
   14c74:	e13ffe15 	stw	r4,-8(fp)
   14c78:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	1000021e 	bne	r2,zero,14c90 <OSQAccept+0x28>
        return ((void *)0);
   14c88:	0005883a 	mov	r2,zero
   14c8c:	00004206 	br	14d98 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14c90:	e0bffe17 	ldw	r2,-8(fp)
   14c94:	1000051e 	bne	r2,zero,14cac <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14c98:	e0bfff17 	ldw	r2,-4(fp)
   14c9c:	00c00104 	movi	r3,4
   14ca0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14ca4:	0005883a 	mov	r2,zero
   14ca8:	00003b06 	br	14d98 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14cac:	e0bffe17 	ldw	r2,-8(fp)
   14cb0:	10800003 	ldbu	r2,0(r2)
   14cb4:	10803fcc 	andi	r2,r2,255
   14cb8:	108000a0 	cmpeqi	r2,r2,2
   14cbc:	1000051e 	bne	r2,zero,14cd4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14cc0:	e0bfff17 	ldw	r2,-4(fp)
   14cc4:	00c00044 	movi	r3,1
   14cc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14ccc:	0005883a 	mov	r2,zero
   14cd0:	00003106 	br	14d98 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fffc17 	ldw	r3,-16(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14cf0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14cf4:	e0bffe17 	ldw	r2,-8(fp)
   14cf8:	10800117 	ldw	r2,4(r2)
   14cfc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14d00:	e0bffb17 	ldw	r2,-20(fp)
   14d04:	1080058b 	ldhu	r2,22(r2)
   14d08:	10bfffcc 	andi	r2,r2,65535
   14d0c:	10001926 	beq	r2,zero,14d74 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14d10:	e0bffb17 	ldw	r2,-20(fp)
   14d14:	10800417 	ldw	r2,16(r2)
   14d18:	11000104 	addi	r4,r2,4
   14d1c:	e0fffb17 	ldw	r3,-20(fp)
   14d20:	19000415 	stw	r4,16(r3)
   14d24:	10800017 	ldw	r2,0(r2)
   14d28:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14d2c:	e0bffb17 	ldw	r2,-20(fp)
   14d30:	1080058b 	ldhu	r2,22(r2)
   14d34:	10bfffc4 	addi	r2,r2,-1
   14d38:	1007883a 	mov	r3,r2
   14d3c:	e0bffb17 	ldw	r2,-20(fp)
   14d40:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14d44:	e0bffb17 	ldw	r2,-20(fp)
   14d48:	10c00417 	ldw	r3,16(r2)
   14d4c:	e0bffb17 	ldw	r2,-20(fp)
   14d50:	10800217 	ldw	r2,8(r2)
   14d54:	1880041e 	bne	r3,r2,14d68 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14d58:	e0bffb17 	ldw	r2,-20(fp)
   14d5c:	10c00117 	ldw	r3,4(r2)
   14d60:	e0bffb17 	ldw	r2,-20(fp)
   14d64:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14d68:	e0bfff17 	ldw	r2,-4(fp)
   14d6c:	10000005 	stb	zero,0(r2)
   14d70:	00000406 	br	14d84 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14d74:	e0bfff17 	ldw	r2,-4(fp)
   14d78:	00c007c4 	movi	r3,31
   14d7c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14d80:	e03ff915 	stw	zero,-28(fp)
   14d84:	e0bffa17 	ldw	r2,-24(fp)
   14d88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d8c:	e0bffd17 	ldw	r2,-12(fp)
   14d90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14d94:	e0bff917 	ldw	r2,-28(fp)
}
   14d98:	e037883a 	mov	sp,fp
   14d9c:	df000017 	ldw	fp,0(sp)
   14da0:	dec00104 	addi	sp,sp,4
   14da4:	f800283a 	ret

00014da8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14da8:	defff404 	addi	sp,sp,-48
   14dac:	dfc00b15 	stw	ra,44(sp)
   14db0:	df000a15 	stw	fp,40(sp)
   14db4:	df000a04 	addi	fp,sp,40
   14db8:	e13ffe15 	stw	r4,-8(fp)
   14dbc:	2805883a 	mov	r2,r5
   14dc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14dc4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14dc8:	008000b4 	movhi	r2,2
   14dcc:	1082ba04 	addi	r2,r2,2792
   14dd0:	10800003 	ldbu	r2,0(r2)
   14dd4:	10803fcc 	andi	r2,r2,255
   14dd8:	10000226 	beq	r2,zero,14de4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14ddc:	0005883a 	mov	r2,zero
   14de0:	00006b06 	br	14f90 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14de4:	0005303a 	rdctl	r2,status
   14de8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dec:	e0fff917 	ldw	r3,-28(fp)
   14df0:	00bfff84 	movi	r2,-2
   14df4:	1884703a 	and	r2,r3,r2
   14df8:	1001703a 	wrctl	status,r2
  
  return context;
   14dfc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14e00:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14e04:	008000b4 	movhi	r2,2
   14e08:	1082b904 	addi	r2,r2,2788
   14e0c:	10800017 	ldw	r2,0(r2)
   14e10:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14e14:	008000b4 	movhi	r2,2
   14e18:	1082b904 	addi	r2,r2,2788
   14e1c:	10800017 	ldw	r2,0(r2)
   14e20:	10000726 	beq	r2,zero,14e40 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14e24:	008000b4 	movhi	r2,2
   14e28:	1082b904 	addi	r2,r2,2788
   14e2c:	10800017 	ldw	r2,0(r2)
   14e30:	10c00117 	ldw	r3,4(r2)
   14e34:	008000b4 	movhi	r2,2
   14e38:	1082b904 	addi	r2,r2,2788
   14e3c:	10c00015 	stw	r3,0(r2)
   14e40:	e0bff717 	ldw	r2,-36(fp)
   14e44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e48:	e0bffa17 	ldw	r2,-24(fp)
   14e4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14e50:	e0bff617 	ldw	r2,-40(fp)
   14e54:	10004d26 	beq	r2,zero,14f8c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e58:	0005303a 	rdctl	r2,status
   14e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e60:	e0fffb17 	ldw	r3,-20(fp)
   14e64:	00bfff84 	movi	r2,-2
   14e68:	1884703a 	and	r2,r3,r2
   14e6c:	1001703a 	wrctl	status,r2
  
  return context;
   14e70:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14e74:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14e78:	008000b4 	movhi	r2,2
   14e7c:	1082b704 	addi	r2,r2,2780
   14e80:	10800017 	ldw	r2,0(r2)
   14e84:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14e88:	e0bff817 	ldw	r2,-32(fp)
   14e8c:	10003126 	beq	r2,zero,14f54 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14e90:	008000b4 	movhi	r2,2
   14e94:	1082b704 	addi	r2,r2,2780
   14e98:	10800017 	ldw	r2,0(r2)
   14e9c:	10c00017 	ldw	r3,0(r2)
   14ea0:	008000b4 	movhi	r2,2
   14ea4:	1082b704 	addi	r2,r2,2780
   14ea8:	10c00015 	stw	r3,0(r2)
   14eac:	e0bff717 	ldw	r2,-36(fp)
   14eb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14eb4:	e0bffc17 	ldw	r2,-16(fp)
   14eb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14ebc:	e0bff817 	ldw	r2,-32(fp)
   14ec0:	e0fffe17 	ldw	r3,-8(fp)
   14ec4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14ec8:	e0bfff0b 	ldhu	r2,-4(fp)
   14ecc:	1085883a 	add	r2,r2,r2
   14ed0:	1085883a 	add	r2,r2,r2
   14ed4:	1007883a 	mov	r3,r2
   14ed8:	e0bffe17 	ldw	r2,-8(fp)
   14edc:	10c7883a 	add	r3,r2,r3
   14ee0:	e0bff817 	ldw	r2,-32(fp)
   14ee4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14ee8:	e0bff817 	ldw	r2,-32(fp)
   14eec:	e0fffe17 	ldw	r3,-8(fp)
   14ef0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14ef4:	e0bff817 	ldw	r2,-32(fp)
   14ef8:	e0fffe17 	ldw	r3,-8(fp)
   14efc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14f00:	e0bff817 	ldw	r2,-32(fp)
   14f04:	e0ffff0b 	ldhu	r3,-4(fp)
   14f08:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14f0c:	e0bff817 	ldw	r2,-32(fp)
   14f10:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   14f14:	e0bff617 	ldw	r2,-40(fp)
   14f18:	00c00084 	movi	r3,2
   14f1c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14f20:	e0bff617 	ldw	r2,-40(fp)
   14f24:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   14f28:	e0bff617 	ldw	r2,-40(fp)
   14f2c:	e0fff817 	ldw	r3,-32(fp)
   14f30:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   14f34:	e0bff617 	ldw	r2,-40(fp)
   14f38:	00c00fc4 	movi	r3,63
   14f3c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14f40:	e0bff617 	ldw	r2,-40(fp)
   14f44:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14f48:	e13ff617 	ldw	r4,-40(fp)
   14f4c:	0011fec0 	call	11fec <OS_EventWaitListInit>
   14f50:	00000e06 	br	14f8c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   14f54:	008000b4 	movhi	r2,2
   14f58:	1082b904 	addi	r2,r2,2788
   14f5c:	10c00017 	ldw	r3,0(r2)
   14f60:	e0bff617 	ldw	r2,-40(fp)
   14f64:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14f68:	008000b4 	movhi	r2,2
   14f6c:	1082b904 	addi	r2,r2,2788
   14f70:	e0fff617 	ldw	r3,-40(fp)
   14f74:	10c00015 	stw	r3,0(r2)
   14f78:	e0bff717 	ldw	r2,-36(fp)
   14f7c:	e0bffd15 	stw	r2,-12(fp)
   14f80:	e0bffd17 	ldw	r2,-12(fp)
   14f84:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   14f88:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   14f8c:	e0bff617 	ldw	r2,-40(fp)
}
   14f90:	e037883a 	mov	sp,fp
   14f94:	dfc00117 	ldw	ra,4(sp)
   14f98:	df000017 	ldw	fp,0(sp)
   14f9c:	dec00204 	addi	sp,sp,8
   14fa0:	f800283a 	ret

00014fa4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14fa4:	defff204 	addi	sp,sp,-56
   14fa8:	dfc00d15 	stw	ra,52(sp)
   14fac:	df000c15 	stw	fp,48(sp)
   14fb0:	df000c04 	addi	fp,sp,48
   14fb4:	e13ffd15 	stw	r4,-12(fp)
   14fb8:	2805883a 	mov	r2,r5
   14fbc:	e1bfff15 	stw	r6,-4(fp)
   14fc0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14fc4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14fc8:	e0bfff17 	ldw	r2,-4(fp)
   14fcc:	1000021e 	bne	r2,zero,14fd8 <OSQDel+0x34>
        return (pevent);
   14fd0:	e0bffd17 	ldw	r2,-12(fp)
   14fd4:	0000a006 	br	15258 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14fd8:	e0bffd17 	ldw	r2,-12(fp)
   14fdc:	1000051e 	bne	r2,zero,14ff4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14fe0:	e0bfff17 	ldw	r2,-4(fp)
   14fe4:	00c00104 	movi	r3,4
   14fe8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	00009906 	br	15258 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14ff4:	e0bffd17 	ldw	r2,-12(fp)
   14ff8:	10800003 	ldbu	r2,0(r2)
   14ffc:	10803fcc 	andi	r2,r2,255
   15000:	108000a0 	cmpeqi	r2,r2,2
   15004:	1000051e 	bne	r2,zero,1501c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15008:	e0bfff17 	ldw	r2,-4(fp)
   1500c:	00c00044 	movi	r3,1
   15010:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15014:	e0bffd17 	ldw	r2,-12(fp)
   15018:	00008f06 	br	15258 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1501c:	008000b4 	movhi	r2,2
   15020:	1082ba04 	addi	r2,r2,2792
   15024:	10800003 	ldbu	r2,0(r2)
   15028:	10803fcc 	andi	r2,r2,255
   1502c:	10000526 	beq	r2,zero,15044 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15030:	e0bfff17 	ldw	r2,-4(fp)
   15034:	00c003c4 	movi	r3,15
   15038:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1503c:	e0bffd17 	ldw	r2,-12(fp)
   15040:	00008506 	br	15258 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15044:	0005303a 	rdctl	r2,status
   15048:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1504c:	e0fff817 	ldw	r3,-32(fp)
   15050:	00bfff84 	movi	r2,-2
   15054:	1884703a 	and	r2,r3,r2
   15058:	1001703a 	wrctl	status,r2
  
  return context;
   1505c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15060:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   15064:	e0bffd17 	ldw	r2,-12(fp)
   15068:	10800283 	ldbu	r2,10(r2)
   1506c:	10803fcc 	andi	r2,r2,255
   15070:	10000326 	beq	r2,zero,15080 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15074:	00800044 	movi	r2,1
   15078:	e0bff405 	stb	r2,-48(fp)
   1507c:	00000106 	br	15084 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15080:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15084:	e0bffe03 	ldbu	r2,-8(fp)
   15088:	10000326 	beq	r2,zero,15098 <OSQDel+0xf4>
   1508c:	10800060 	cmpeqi	r2,r2,1
   15090:	1000381e 	bne	r2,zero,15174 <OSQDel+0x1d0>
   15094:	00006506 	br	1522c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   15098:	e0bff403 	ldbu	r2,-48(fp)
   1509c:	1000261e 	bne	r2,zero,15138 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   150a0:	e0bffd17 	ldw	r2,-12(fp)
   150a4:	00c00fc4 	movi	r3,63
   150a8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   150ac:	e0bffd17 	ldw	r2,-12(fp)
   150b0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   150b4:	e0bffd17 	ldw	r2,-12(fp)
   150b8:	10800117 	ldw	r2,4(r2)
   150bc:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   150c0:	008000b4 	movhi	r2,2
   150c4:	1082b704 	addi	r2,r2,2780
   150c8:	10c00017 	ldw	r3,0(r2)
   150cc:	e0bff717 	ldw	r2,-36(fp)
   150d0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   150d4:	008000b4 	movhi	r2,2
   150d8:	1082b704 	addi	r2,r2,2780
   150dc:	e0fff717 	ldw	r3,-36(fp)
   150e0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   150e4:	e0bffd17 	ldw	r2,-12(fp)
   150e8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   150ec:	008000b4 	movhi	r2,2
   150f0:	1082b904 	addi	r2,r2,2788
   150f4:	10c00017 	ldw	r3,0(r2)
   150f8:	e0bffd17 	ldw	r2,-12(fp)
   150fc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15100:	e0bffd17 	ldw	r2,-12(fp)
   15104:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15108:	008000b4 	movhi	r2,2
   1510c:	1082b904 	addi	r2,r2,2788
   15110:	e0fffd17 	ldw	r3,-12(fp)
   15114:	10c00015 	stw	r3,0(r2)
   15118:	e0bff617 	ldw	r2,-40(fp)
   1511c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15120:	e0bff917 	ldw	r2,-28(fp)
   15124:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15128:	e0bfff17 	ldw	r2,-4(fp)
   1512c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15130:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   15134:	00004706 	br	15254 <OSQDel+0x2b0>
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	e0bffa15 	stw	r2,-24(fp)
   15140:	e0bffa17 	ldw	r2,-24(fp)
   15144:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15148:	e0bfff17 	ldw	r2,-4(fp)
   1514c:	00c01244 	movi	r3,73
   15150:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1515c:	00003d06 	br	15254 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   15160:	e13ffd17 	ldw	r4,-12(fp)
   15164:	000b883a 	mov	r5,zero
   15168:	01800104 	movi	r6,4
   1516c:	000f883a 	mov	r7,zero
   15170:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	10800283 	ldbu	r2,10(r2)
   1517c:	10803fcc 	andi	r2,r2,255
   15180:	103ff71e 	bne	r2,zero,15160 <__alt_mem_Flash_flash_data+0xf4015160>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15184:	e0bffd17 	ldw	r2,-12(fp)
   15188:	00c00fc4 	movi	r3,63
   1518c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15190:	e0bffd17 	ldw	r2,-12(fp)
   15194:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   15198:	e0bffd17 	ldw	r2,-12(fp)
   1519c:	10800117 	ldw	r2,4(r2)
   151a0:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   151a4:	008000b4 	movhi	r2,2
   151a8:	1082b704 	addi	r2,r2,2780
   151ac:	10c00017 	ldw	r3,0(r2)
   151b0:	e0bff717 	ldw	r2,-36(fp)
   151b4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   151b8:	008000b4 	movhi	r2,2
   151bc:	1082b704 	addi	r2,r2,2780
   151c0:	e0fff717 	ldw	r3,-36(fp)
   151c4:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   151d0:	008000b4 	movhi	r2,2
   151d4:	1082b904 	addi	r2,r2,2788
   151d8:	10c00017 	ldw	r3,0(r2)
   151dc:	e0bffd17 	ldw	r2,-12(fp)
   151e0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   151e4:	e0bffd17 	ldw	r2,-12(fp)
   151e8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   151ec:	008000b4 	movhi	r2,2
   151f0:	1082b904 	addi	r2,r2,2788
   151f4:	e0fffd17 	ldw	r3,-12(fp)
   151f8:	10c00015 	stw	r3,0(r2)
   151fc:	e0bff617 	ldw	r2,-40(fp)
   15200:	e0bffb15 	stw	r2,-20(fp)
   15204:	e0bffb17 	ldw	r2,-20(fp)
   15208:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1520c:	e0bff403 	ldbu	r2,-48(fp)
   15210:	10800058 	cmpnei	r2,r2,1
   15214:	1000011e 	bne	r2,zero,1521c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15218:	00124640 	call	12464 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1521c:	e0bfff17 	ldw	r2,-4(fp)
   15220:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   15224:	e03ff515 	stw	zero,-44(fp)
             break;
   15228:	00000a06 	br	15254 <OSQDel+0x2b0>
   1522c:	e0bff617 	ldw	r2,-40(fp)
   15230:	e0bffc15 	stw	r2,-16(fp)
   15234:	e0bffc17 	ldw	r2,-16(fp)
   15238:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1523c:	e0bfff17 	ldw	r2,-4(fp)
   15240:	00c001c4 	movi	r3,7
   15244:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15248:	e0bffd17 	ldw	r2,-12(fp)
   1524c:	e0bff515 	stw	r2,-44(fp)
             break;
   15250:	0001883a 	nop
    }
    return (pevent_return);
   15254:	e0bff517 	ldw	r2,-44(fp)
}
   15258:	e037883a 	mov	sp,fp
   1525c:	dfc00117 	ldw	ra,4(sp)
   15260:	df000017 	ldw	fp,0(sp)
   15264:	dec00204 	addi	sp,sp,8
   15268:	f800283a 	ret

0001526c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1526c:	defffa04 	addi	sp,sp,-24
   15270:	df000515 	stw	fp,20(sp)
   15274:	df000504 	addi	fp,sp,20
   15278:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1527c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15280:	e0bfff17 	ldw	r2,-4(fp)
   15284:	1000021e 	bne	r2,zero,15290 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   15288:	00800104 	movi	r2,4
   1528c:	00002106 	br	15314 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	10800003 	ldbu	r2,0(r2)
   15298:	10803fcc 	andi	r2,r2,255
   1529c:	108000a0 	cmpeqi	r2,r2,2
   152a0:	1000021e 	bne	r2,zero,152ac <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   152a4:	00800044 	movi	r2,1
   152a8:	00001a06 	br	15314 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152ac:	0005303a 	rdctl	r2,status
   152b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152b4:	e0fffd17 	ldw	r3,-12(fp)
   152b8:	00bfff84 	movi	r2,-2
   152bc:	1884703a 	and	r2,r3,r2
   152c0:	1001703a 	wrctl	status,r2
  
  return context;
   152c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   152c8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   152cc:	e0bfff17 	ldw	r2,-4(fp)
   152d0:	10800117 	ldw	r2,4(r2)
   152d4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   152d8:	e0bffc17 	ldw	r2,-16(fp)
   152dc:	10c00117 	ldw	r3,4(r2)
   152e0:	e0bffc17 	ldw	r2,-16(fp)
   152e4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   152e8:	e0bffc17 	ldw	r2,-16(fp)
   152ec:	10c00117 	ldw	r3,4(r2)
   152f0:	e0bffc17 	ldw	r2,-16(fp)
   152f4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   152f8:	e0bffc17 	ldw	r2,-16(fp)
   152fc:	1000058d 	sth	zero,22(r2)
   15300:	e0bffb17 	ldw	r2,-20(fp)
   15304:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15308:	e0bffe17 	ldw	r2,-8(fp)
   1530c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15310:	0005883a 	mov	r2,zero
}
   15314:	e037883a 	mov	sp,fp
   15318:	df000017 	ldw	fp,0(sp)
   1531c:	dec00104 	addi	sp,sp,4
   15320:	f800283a 	ret

00015324 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   15324:	defff304 	addi	sp,sp,-52
   15328:	dfc00c15 	stw	ra,48(sp)
   1532c:	df000b15 	stw	fp,44(sp)
   15330:	df000b04 	addi	fp,sp,44
   15334:	e13ffd15 	stw	r4,-12(fp)
   15338:	2805883a 	mov	r2,r5
   1533c:	e1bfff15 	stw	r6,-4(fp)
   15340:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15344:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15348:	e0bfff17 	ldw	r2,-4(fp)
   1534c:	1000021e 	bne	r2,zero,15358 <OSQPend+0x34>
        return ((void *)0);
   15350:	0005883a 	mov	r2,zero
   15354:	0000ad06 	br	1560c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   15358:	e0bffd17 	ldw	r2,-12(fp)
   1535c:	1000051e 	bne	r2,zero,15374 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15360:	e0bfff17 	ldw	r2,-4(fp)
   15364:	00c00104 	movi	r3,4
   15368:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1536c:	0005883a 	mov	r2,zero
   15370:	0000a606 	br	1560c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   15374:	e0bffd17 	ldw	r2,-12(fp)
   15378:	10800003 	ldbu	r2,0(r2)
   1537c:	10803fcc 	andi	r2,r2,255
   15380:	108000a0 	cmpeqi	r2,r2,2
   15384:	1000051e 	bne	r2,zero,1539c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15388:	e0bfff17 	ldw	r2,-4(fp)
   1538c:	00c00044 	movi	r3,1
   15390:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15394:	0005883a 	mov	r2,zero
   15398:	00009c06 	br	1560c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1539c:	008000b4 	movhi	r2,2
   153a0:	1082ba04 	addi	r2,r2,2792
   153a4:	10800003 	ldbu	r2,0(r2)
   153a8:	10803fcc 	andi	r2,r2,255
   153ac:	10000526 	beq	r2,zero,153c4 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   153b0:	e0bfff17 	ldw	r2,-4(fp)
   153b4:	00c00084 	movi	r3,2
   153b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   153bc:	0005883a 	mov	r2,zero
   153c0:	00009206 	br	1560c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   153c4:	008000b4 	movhi	r2,2
   153c8:	1082ac04 	addi	r2,r2,2736
   153cc:	10800003 	ldbu	r2,0(r2)
   153d0:	10803fcc 	andi	r2,r2,255
   153d4:	10000526 	beq	r2,zero,153ec <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   153d8:	e0bfff17 	ldw	r2,-4(fp)
   153dc:	00c00344 	movi	r3,13
   153e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   153e4:	0005883a 	mov	r2,zero
   153e8:	00008806 	br	1560c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153ec:	0005303a 	rdctl	r2,status
   153f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153f4:	e0fff817 	ldw	r3,-32(fp)
   153f8:	00bfff84 	movi	r2,-2
   153fc:	1884703a 	and	r2,r3,r2
   15400:	1001703a 	wrctl	status,r2
  
  return context;
   15404:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15408:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1540c:	e0bffd17 	ldw	r2,-12(fp)
   15410:	10800117 	ldw	r2,4(r2)
   15414:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   15418:	e0bff717 	ldw	r2,-36(fp)
   1541c:	1080058b 	ldhu	r2,22(r2)
   15420:	10bfffcc 	andi	r2,r2,65535
   15424:	10001e26 	beq	r2,zero,154a0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15428:	e0bff717 	ldw	r2,-36(fp)
   1542c:	10800417 	ldw	r2,16(r2)
   15430:	11000104 	addi	r4,r2,4
   15434:	e0fff717 	ldw	r3,-36(fp)
   15438:	19000415 	stw	r4,16(r3)
   1543c:	10800017 	ldw	r2,0(r2)
   15440:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   15444:	e0bff717 	ldw	r2,-36(fp)
   15448:	1080058b 	ldhu	r2,22(r2)
   1544c:	10bfffc4 	addi	r2,r2,-1
   15450:	1007883a 	mov	r3,r2
   15454:	e0bff717 	ldw	r2,-36(fp)
   15458:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1545c:	e0bff717 	ldw	r2,-36(fp)
   15460:	10c00417 	ldw	r3,16(r2)
   15464:	e0bff717 	ldw	r2,-36(fp)
   15468:	10800217 	ldw	r2,8(r2)
   1546c:	1880041e 	bne	r3,r2,15480 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   15470:	e0bff717 	ldw	r2,-36(fp)
   15474:	10c00117 	ldw	r3,4(r2)
   15478:	e0bff717 	ldw	r2,-36(fp)
   1547c:	10c00415 	stw	r3,16(r2)
   15480:	e0bff617 	ldw	r2,-40(fp)
   15484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15488:	e0bff917 	ldw	r2,-28(fp)
   1548c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   15490:	e0bfff17 	ldw	r2,-4(fp)
   15494:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   15498:	e0bff517 	ldw	r2,-44(fp)
   1549c:	00005b06 	br	1560c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   154a0:	008000b4 	movhi	r2,2
   154a4:	1082bb04 	addi	r2,r2,2796
   154a8:	10c00017 	ldw	r3,0(r2)
   154ac:	008000b4 	movhi	r2,2
   154b0:	1082bb04 	addi	r2,r2,2796
   154b4:	10800017 	ldw	r2,0(r2)
   154b8:	10800c03 	ldbu	r2,48(r2)
   154bc:	10800114 	ori	r2,r2,4
   154c0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   154c4:	008000b4 	movhi	r2,2
   154c8:	1082bb04 	addi	r2,r2,2796
   154cc:	10800017 	ldw	r2,0(r2)
   154d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   154d4:	008000b4 	movhi	r2,2
   154d8:	1082bb04 	addi	r2,r2,2796
   154dc:	10800017 	ldw	r2,0(r2)
   154e0:	e0fffe0b 	ldhu	r3,-8(fp)
   154e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   154e8:	e13ffd17 	ldw	r4,-12(fp)
   154ec:	0011be40 	call	11be4 <OS_EventTaskWait>
   154f0:	e0bff617 	ldw	r2,-40(fp)
   154f4:	e0bffa15 	stw	r2,-24(fp)
   154f8:	e0bffa17 	ldw	r2,-24(fp)
   154fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   15500:	00124640 	call	12464 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15504:	0005303a 	rdctl	r2,status
   15508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1550c:	e0fffb17 	ldw	r3,-20(fp)
   15510:	00bfff84 	movi	r2,-2
   15514:	1884703a 	and	r2,r3,r2
   15518:	1001703a 	wrctl	status,r2
  
  return context;
   1551c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15520:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15524:	008000b4 	movhi	r2,2
   15528:	1082bb04 	addi	r2,r2,2796
   1552c:	10800017 	ldw	r2,0(r2)
   15530:	10800c43 	ldbu	r2,49(r2)
   15534:	10803fcc 	andi	r2,r2,255
   15538:	10000326 	beq	r2,zero,15548 <OSQPend+0x224>
   1553c:	108000a0 	cmpeqi	r2,r2,2
   15540:	1000091e 	bne	r2,zero,15568 <OSQPend+0x244>
   15544:	00000d06 	br	1557c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   15548:	008000b4 	movhi	r2,2
   1554c:	1082bb04 	addi	r2,r2,2796
   15550:	10800017 	ldw	r2,0(r2)
   15554:	10800917 	ldw	r2,36(r2)
   15558:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	10000005 	stb	zero,0(r2)
             break;
   15564:	00001006 	br	155a8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15568:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1556c:	e0bfff17 	ldw	r2,-4(fp)
   15570:	00c00384 	movi	r3,14
   15574:	10c00005 	stb	r3,0(r2)
             break;
   15578:	00000b06 	br	155a8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1557c:	008000b4 	movhi	r2,2
   15580:	1082bb04 	addi	r2,r2,2796
   15584:	10800017 	ldw	r2,0(r2)
   15588:	1009883a 	mov	r4,r2
   1558c:	e17ffd17 	ldw	r5,-12(fp)
   15590:	0011e3c0 	call	11e3c <OS_EventTaskRemove>
             pmsg = (void *)0;
   15594:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15598:	e0bfff17 	ldw	r2,-4(fp)
   1559c:	00c00284 	movi	r3,10
   155a0:	10c00005 	stb	r3,0(r2)
             break;
   155a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   155a8:	008000b4 	movhi	r2,2
   155ac:	1082bb04 	addi	r2,r2,2796
   155b0:	10800017 	ldw	r2,0(r2)
   155b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   155b8:	008000b4 	movhi	r2,2
   155bc:	1082bb04 	addi	r2,r2,2796
   155c0:	10800017 	ldw	r2,0(r2)
   155c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   155c8:	008000b4 	movhi	r2,2
   155cc:	1082bb04 	addi	r2,r2,2796
   155d0:	10800017 	ldw	r2,0(r2)
   155d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   155d8:	008000b4 	movhi	r2,2
   155dc:	1082bb04 	addi	r2,r2,2796
   155e0:	10800017 	ldw	r2,0(r2)
   155e4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   155e8:	008000b4 	movhi	r2,2
   155ec:	1082bb04 	addi	r2,r2,2796
   155f0:	10800017 	ldw	r2,0(r2)
   155f4:	10000915 	stw	zero,36(r2)
   155f8:	e0bff617 	ldw	r2,-40(fp)
   155fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15600:	e0bffc17 	ldw	r2,-16(fp)
   15604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15608:	e0bff517 	ldw	r2,-44(fp)
}
   1560c:	e037883a 	mov	sp,fp
   15610:	dfc00117 	ldw	ra,4(sp)
   15614:	df000017 	ldw	fp,0(sp)
   15618:	dec00204 	addi	sp,sp,8
   1561c:	f800283a 	ret

00015620 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15620:	defff604 	addi	sp,sp,-40
   15624:	dfc00915 	stw	ra,36(sp)
   15628:	df000815 	stw	fp,32(sp)
   1562c:	df000804 	addi	fp,sp,32
   15630:	e13ffd15 	stw	r4,-12(fp)
   15634:	2805883a 	mov	r2,r5
   15638:	e1bfff15 	stw	r6,-4(fp)
   1563c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15640:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	1000021e 	bne	r2,zero,15654 <OSQPendAbort+0x34>
        return (0);
   1564c:	0005883a 	mov	r2,zero
   15650:	00004906 	br	15778 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15654:	e0bffd17 	ldw	r2,-12(fp)
   15658:	1000051e 	bne	r2,zero,15670 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1565c:	e0bfff17 	ldw	r2,-4(fp)
   15660:	00c00104 	movi	r3,4
   15664:	10c00005 	stb	r3,0(r2)
        return (0);
   15668:	0005883a 	mov	r2,zero
   1566c:	00004206 	br	15778 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   15670:	e0bffd17 	ldw	r2,-12(fp)
   15674:	10800003 	ldbu	r2,0(r2)
   15678:	10803fcc 	andi	r2,r2,255
   1567c:	108000a0 	cmpeqi	r2,r2,2
   15680:	1000051e 	bne	r2,zero,15698 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15684:	e0bfff17 	ldw	r2,-4(fp)
   15688:	00c00044 	movi	r3,1
   1568c:	10c00005 	stb	r3,0(r2)
        return (0);
   15690:	0005883a 	mov	r2,zero
   15694:	00003806 	br	15778 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15698:	0005303a 	rdctl	r2,status
   1569c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156a0:	e0fffa17 	ldw	r3,-24(fp)
   156a4:	00bfff84 	movi	r2,-2
   156a8:	1884703a 	and	r2,r3,r2
   156ac:	1001703a 	wrctl	status,r2
  
  return context;
   156b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   156b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   156b8:	e0bffd17 	ldw	r2,-12(fp)
   156bc:	10800283 	ldbu	r2,10(r2)
   156c0:	10803fcc 	andi	r2,r2,255
   156c4:	10002526 	beq	r2,zero,1575c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   156c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   156cc:	e0bffe03 	ldbu	r2,-8(fp)
   156d0:	10800060 	cmpeqi	r2,r2,1
   156d4:	10000e26 	beq	r2,zero,15710 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   156d8:	00000806 	br	156fc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   156dc:	e13ffd17 	ldw	r4,-12(fp)
   156e0:	000b883a 	mov	r5,zero
   156e4:	01800104 	movi	r6,4
   156e8:	01c00084 	movi	r7,2
   156ec:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                     nbr_tasks++;
   156f0:	e0bff803 	ldbu	r2,-32(fp)
   156f4:	10800044 	addi	r2,r2,1
   156f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   156fc:	e0bffd17 	ldw	r2,-12(fp)
   15700:	10800283 	ldbu	r2,10(r2)
   15704:	10803fcc 	andi	r2,r2,255
   15708:	103ff41e 	bne	r2,zero,156dc <__alt_mem_Flash_flash_data+0xf40156dc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1570c:	00000906 	br	15734 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15710:	e13ffd17 	ldw	r4,-12(fp)
   15714:	000b883a 	mov	r5,zero
   15718:	01800104 	movi	r6,4
   1571c:	01c00084 	movi	r7,2
   15720:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                 nbr_tasks++;
   15724:	e0bff803 	ldbu	r2,-32(fp)
   15728:	10800044 	addi	r2,r2,1
   1572c:	e0bff805 	stb	r2,-32(fp)
                 break;
   15730:	0001883a 	nop
   15734:	e0bff917 	ldw	r2,-28(fp)
   15738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1573c:	e0bffb17 	ldw	r2,-20(fp)
   15740:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   15744:	00124640 	call	12464 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	00c00384 	movi	r3,14
   15750:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15754:	e0bff803 	ldbu	r2,-32(fp)
   15758:	00000706 	br	15778 <OSQPendAbort+0x158>
   1575c:	e0bff917 	ldw	r2,-28(fp)
   15760:	e0bffc15 	stw	r2,-16(fp)
   15764:	e0bffc17 	ldw	r2,-16(fp)
   15768:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1576c:	e0bfff17 	ldw	r2,-4(fp)
   15770:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   15774:	0005883a 	mov	r2,zero
}
   15778:	e037883a 	mov	sp,fp
   1577c:	dfc00117 	ldw	ra,4(sp)
   15780:	df000017 	ldw	fp,0(sp)
   15784:	dec00204 	addi	sp,sp,8
   15788:	f800283a 	ret

0001578c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1578c:	defff604 	addi	sp,sp,-40
   15790:	dfc00915 	stw	ra,36(sp)
   15794:	df000815 	stw	fp,32(sp)
   15798:	df000804 	addi	fp,sp,32
   1579c:	e13ffe15 	stw	r4,-8(fp)
   157a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   157a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   157a8:	e0bffe17 	ldw	r2,-8(fp)
   157ac:	1000021e 	bne	r2,zero,157b8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   157b0:	00800104 	movi	r2,4
   157b4:	00004a06 	br	158e0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   157b8:	e0bffe17 	ldw	r2,-8(fp)
   157bc:	10800003 	ldbu	r2,0(r2)
   157c0:	10803fcc 	andi	r2,r2,255
   157c4:	108000a0 	cmpeqi	r2,r2,2
   157c8:	1000021e 	bne	r2,zero,157d4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   157cc:	00800044 	movi	r2,1
   157d0:	00004306 	br	158e0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157d4:	0005303a 	rdctl	r2,status
   157d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157dc:	e0fffa17 	ldw	r3,-24(fp)
   157e0:	00bfff84 	movi	r2,-2
   157e4:	1884703a 	and	r2,r3,r2
   157e8:	1001703a 	wrctl	status,r2
  
  return context;
   157ec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   157f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   157f4:	e0bffe17 	ldw	r2,-8(fp)
   157f8:	10800283 	ldbu	r2,10(r2)
   157fc:	10803fcc 	andi	r2,r2,255
   15800:	10000c26 	beq	r2,zero,15834 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15804:	e13ffe17 	ldw	r4,-8(fp)
   15808:	e17fff17 	ldw	r5,-4(fp)
   1580c:	01800104 	movi	r6,4
   15810:	000f883a 	mov	r7,zero
   15814:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
   15818:	e0bff817 	ldw	r2,-32(fp)
   1581c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15820:	e0bffb17 	ldw	r2,-20(fp)
   15824:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15828:	00124640 	call	12464 <OS_Sched>
        return (OS_ERR_NONE);
   1582c:	0005883a 	mov	r2,zero
   15830:	00002b06 	br	158e0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   15834:	e0bffe17 	ldw	r2,-8(fp)
   15838:	10800117 	ldw	r2,4(r2)
   1583c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   15840:	e0bff917 	ldw	r2,-28(fp)
   15844:	10c0058b 	ldhu	r3,22(r2)
   15848:	e0bff917 	ldw	r2,-28(fp)
   1584c:	1080050b 	ldhu	r2,20(r2)
   15850:	18ffffcc 	andi	r3,r3,65535
   15854:	10bfffcc 	andi	r2,r2,65535
   15858:	18800636 	bltu	r3,r2,15874 <OSQPost+0xe8>
   1585c:	e0bff817 	ldw	r2,-32(fp)
   15860:	e0bffc15 	stw	r2,-16(fp)
   15864:	e0bffc17 	ldw	r2,-16(fp)
   15868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1586c:	00800784 	movi	r2,30
   15870:	00001b06 	br	158e0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   15874:	e0bff917 	ldw	r2,-28(fp)
   15878:	10800317 	ldw	r2,12(r2)
   1587c:	11000104 	addi	r4,r2,4
   15880:	e0fff917 	ldw	r3,-28(fp)
   15884:	19000315 	stw	r4,12(r3)
   15888:	e0ffff17 	ldw	r3,-4(fp)
   1588c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   15890:	e0bff917 	ldw	r2,-28(fp)
   15894:	1080058b 	ldhu	r2,22(r2)
   15898:	10800044 	addi	r2,r2,1
   1589c:	1007883a 	mov	r3,r2
   158a0:	e0bff917 	ldw	r2,-28(fp)
   158a4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   158a8:	e0bff917 	ldw	r2,-28(fp)
   158ac:	10c00317 	ldw	r3,12(r2)
   158b0:	e0bff917 	ldw	r2,-28(fp)
   158b4:	10800217 	ldw	r2,8(r2)
   158b8:	1880041e 	bne	r3,r2,158cc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   158bc:	e0bff917 	ldw	r2,-28(fp)
   158c0:	10c00117 	ldw	r3,4(r2)
   158c4:	e0bff917 	ldw	r2,-28(fp)
   158c8:	10c00315 	stw	r3,12(r2)
   158cc:	e0bff817 	ldw	r2,-32(fp)
   158d0:	e0bffd15 	stw	r2,-12(fp)
   158d4:	e0bffd17 	ldw	r2,-12(fp)
   158d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   158dc:	0005883a 	mov	r2,zero
}
   158e0:	e037883a 	mov	sp,fp
   158e4:	dfc00117 	ldw	ra,4(sp)
   158e8:	df000017 	ldw	fp,0(sp)
   158ec:	dec00204 	addi	sp,sp,8
   158f0:	f800283a 	ret

000158f4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   158f4:	defff604 	addi	sp,sp,-40
   158f8:	dfc00915 	stw	ra,36(sp)
   158fc:	df000815 	stw	fp,32(sp)
   15900:	df000804 	addi	fp,sp,32
   15904:	e13ffe15 	stw	r4,-8(fp)
   15908:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1590c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15910:	e0bffe17 	ldw	r2,-8(fp)
   15914:	1000021e 	bne	r2,zero,15920 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15918:	00800104 	movi	r2,4
   1591c:	00004c06 	br	15a50 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15920:	e0bffe17 	ldw	r2,-8(fp)
   15924:	10800003 	ldbu	r2,0(r2)
   15928:	10803fcc 	andi	r2,r2,255
   1592c:	108000a0 	cmpeqi	r2,r2,2
   15930:	1000021e 	bne	r2,zero,1593c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   15934:	00800044 	movi	r2,1
   15938:	00004506 	br	15a50 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1593c:	0005303a 	rdctl	r2,status
   15940:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15944:	e0fffa17 	ldw	r3,-24(fp)
   15948:	00bfff84 	movi	r2,-2
   1594c:	1884703a 	and	r2,r3,r2
   15950:	1001703a 	wrctl	status,r2
  
  return context;
   15954:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15958:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1595c:	e0bffe17 	ldw	r2,-8(fp)
   15960:	10800283 	ldbu	r2,10(r2)
   15964:	10803fcc 	andi	r2,r2,255
   15968:	10000c26 	beq	r2,zero,1599c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1596c:	e13ffe17 	ldw	r4,-8(fp)
   15970:	e17fff17 	ldw	r5,-4(fp)
   15974:	01800104 	movi	r6,4
   15978:	000f883a 	mov	r7,zero
   1597c:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
   15980:	e0bff817 	ldw	r2,-32(fp)
   15984:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15988:	e0bffb17 	ldw	r2,-20(fp)
   1598c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   15990:	00124640 	call	12464 <OS_Sched>
        return (OS_ERR_NONE);
   15994:	0005883a 	mov	r2,zero
   15998:	00002d06 	br	15a50 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1599c:	e0bffe17 	ldw	r2,-8(fp)
   159a0:	10800117 	ldw	r2,4(r2)
   159a4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   159a8:	e0bff917 	ldw	r2,-28(fp)
   159ac:	10c0058b 	ldhu	r3,22(r2)
   159b0:	e0bff917 	ldw	r2,-28(fp)
   159b4:	1080050b 	ldhu	r2,20(r2)
   159b8:	18ffffcc 	andi	r3,r3,65535
   159bc:	10bfffcc 	andi	r2,r2,65535
   159c0:	18800636 	bltu	r3,r2,159dc <OSQPostFront+0xe8>
   159c4:	e0bff817 	ldw	r2,-32(fp)
   159c8:	e0bffc15 	stw	r2,-16(fp)
   159cc:	e0bffc17 	ldw	r2,-16(fp)
   159d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   159d4:	00800784 	movi	r2,30
   159d8:	00001d06 	br	15a50 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   159dc:	e0bff917 	ldw	r2,-28(fp)
   159e0:	10c00417 	ldw	r3,16(r2)
   159e4:	e0bff917 	ldw	r2,-28(fp)
   159e8:	10800117 	ldw	r2,4(r2)
   159ec:	1880041e 	bne	r3,r2,15a00 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   159f0:	e0bff917 	ldw	r2,-28(fp)
   159f4:	10c00217 	ldw	r3,8(r2)
   159f8:	e0bff917 	ldw	r2,-28(fp)
   159fc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15a00:	e0bff917 	ldw	r2,-28(fp)
   15a04:	10800417 	ldw	r2,16(r2)
   15a08:	10ffff04 	addi	r3,r2,-4
   15a0c:	e0bff917 	ldw	r2,-28(fp)
   15a10:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   15a14:	e0bff917 	ldw	r2,-28(fp)
   15a18:	10800417 	ldw	r2,16(r2)
   15a1c:	e0ffff17 	ldw	r3,-4(fp)
   15a20:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15a24:	e0bff917 	ldw	r2,-28(fp)
   15a28:	1080058b 	ldhu	r2,22(r2)
   15a2c:	10800044 	addi	r2,r2,1
   15a30:	1007883a 	mov	r3,r2
   15a34:	e0bff917 	ldw	r2,-28(fp)
   15a38:	10c0058d 	sth	r3,22(r2)
   15a3c:	e0bff817 	ldw	r2,-32(fp)
   15a40:	e0bffd15 	stw	r2,-12(fp)
   15a44:	e0bffd17 	ldw	r2,-12(fp)
   15a48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15a4c:	0005883a 	mov	r2,zero
}
   15a50:	e037883a 	mov	sp,fp
   15a54:	dfc00117 	ldw	ra,4(sp)
   15a58:	df000017 	ldw	fp,0(sp)
   15a5c:	dec00204 	addi	sp,sp,8
   15a60:	f800283a 	ret

00015a64 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15a64:	defff504 	addi	sp,sp,-44
   15a68:	dfc00a15 	stw	ra,40(sp)
   15a6c:	df000915 	stw	fp,36(sp)
   15a70:	df000904 	addi	fp,sp,36
   15a74:	e13ffd15 	stw	r4,-12(fp)
   15a78:	e17ffe15 	stw	r5,-8(fp)
   15a7c:	3005883a 	mov	r2,r6
   15a80:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15a84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15a88:	e0bffd17 	ldw	r2,-12(fp)
   15a8c:	1000021e 	bne	r2,zero,15a98 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15a90:	00800104 	movi	r2,4
   15a94:	00007106 	br	15c5c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15a98:	e0bffd17 	ldw	r2,-12(fp)
   15a9c:	10800003 	ldbu	r2,0(r2)
   15aa0:	10803fcc 	andi	r2,r2,255
   15aa4:	108000a0 	cmpeqi	r2,r2,2
   15aa8:	1000021e 	bne	r2,zero,15ab4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15aac:	00800044 	movi	r2,1
   15ab0:	00006a06 	br	15c5c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ab4:	0005303a 	rdctl	r2,status
   15ab8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15abc:	e0fff917 	ldw	r3,-28(fp)
   15ac0:	00bfff84 	movi	r2,-2
   15ac4:	1884703a 	and	r2,r3,r2
   15ac8:	1001703a 	wrctl	status,r2
  
  return context;
   15acc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15ad0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   15ad4:	e0bffd17 	ldw	r2,-12(fp)
   15ad8:	10800283 	ldbu	r2,10(r2)
   15adc:	10803fcc 	andi	r2,r2,255
   15ae0:	10001d26 	beq	r2,zero,15b58 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   15ae4:	e0bfff03 	ldbu	r2,-4(fp)
   15ae8:	1080004c 	andi	r2,r2,1
   15aec:	10000b26 	beq	r2,zero,15b1c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15af0:	00000506 	br	15b08 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15af4:	e13ffd17 	ldw	r4,-12(fp)
   15af8:	e17ffe17 	ldw	r5,-8(fp)
   15afc:	01800104 	movi	r6,4
   15b00:	000f883a 	mov	r7,zero
   15b04:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15b08:	e0bffd17 	ldw	r2,-12(fp)
   15b0c:	10800283 	ldbu	r2,10(r2)
   15b10:	10803fcc 	andi	r2,r2,255
   15b14:	103ff71e 	bne	r2,zero,15af4 <__alt_mem_Flash_flash_data+0xf4015af4>
   15b18:	00000506 	br	15b30 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15b1c:	e13ffd17 	ldw	r4,-12(fp)
   15b20:	e17ffe17 	ldw	r5,-8(fp)
   15b24:	01800104 	movi	r6,4
   15b28:	000f883a 	mov	r7,zero
   15b2c:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
   15b30:	e0bff717 	ldw	r2,-36(fp)
   15b34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b38:	e0bffa17 	ldw	r2,-24(fp)
   15b3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15b40:	e0bfff03 	ldbu	r2,-4(fp)
   15b44:	1080010c 	andi	r2,r2,4
   15b48:	1000011e 	bne	r2,zero,15b50 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   15b4c:	00124640 	call	12464 <OS_Sched>
        }
        return (OS_ERR_NONE);
   15b50:	0005883a 	mov	r2,zero
   15b54:	00004106 	br	15c5c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15b58:	e0bffd17 	ldw	r2,-12(fp)
   15b5c:	10800117 	ldw	r2,4(r2)
   15b60:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15b64:	e0bff817 	ldw	r2,-32(fp)
   15b68:	10c0058b 	ldhu	r3,22(r2)
   15b6c:	e0bff817 	ldw	r2,-32(fp)
   15b70:	1080050b 	ldhu	r2,20(r2)
   15b74:	18ffffcc 	andi	r3,r3,65535
   15b78:	10bfffcc 	andi	r2,r2,65535
   15b7c:	18800636 	bltu	r3,r2,15b98 <OSQPostOpt+0x134>
   15b80:	e0bff717 	ldw	r2,-36(fp)
   15b84:	e0bffb15 	stw	r2,-20(fp)
   15b88:	e0bffb17 	ldw	r2,-20(fp)
   15b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15b90:	00800784 	movi	r2,30
   15b94:	00003106 	br	15c5c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15b98:	e0bfff03 	ldbu	r2,-4(fp)
   15b9c:	1080008c 	andi	r2,r2,2
   15ba0:	10001326 	beq	r2,zero,15bf0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15ba4:	e0bff817 	ldw	r2,-32(fp)
   15ba8:	10c00417 	ldw	r3,16(r2)
   15bac:	e0bff817 	ldw	r2,-32(fp)
   15bb0:	10800117 	ldw	r2,4(r2)
   15bb4:	1880041e 	bne	r3,r2,15bc8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   15bb8:	e0bff817 	ldw	r2,-32(fp)
   15bbc:	10c00217 	ldw	r3,8(r2)
   15bc0:	e0bff817 	ldw	r2,-32(fp)
   15bc4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   15bc8:	e0bff817 	ldw	r2,-32(fp)
   15bcc:	10800417 	ldw	r2,16(r2)
   15bd0:	10ffff04 	addi	r3,r2,-4
   15bd4:	e0bff817 	ldw	r2,-32(fp)
   15bd8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   15bdc:	e0bff817 	ldw	r2,-32(fp)
   15be0:	10800417 	ldw	r2,16(r2)
   15be4:	e0fffe17 	ldw	r3,-8(fp)
   15be8:	10c00015 	stw	r3,0(r2)
   15bec:	00001006 	br	15c30 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15bf0:	e0bff817 	ldw	r2,-32(fp)
   15bf4:	10800317 	ldw	r2,12(r2)
   15bf8:	11000104 	addi	r4,r2,4
   15bfc:	e0fff817 	ldw	r3,-32(fp)
   15c00:	19000315 	stw	r4,12(r3)
   15c04:	e0fffe17 	ldw	r3,-8(fp)
   15c08:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15c0c:	e0bff817 	ldw	r2,-32(fp)
   15c10:	10c00317 	ldw	r3,12(r2)
   15c14:	e0bff817 	ldw	r2,-32(fp)
   15c18:	10800217 	ldw	r2,8(r2)
   15c1c:	1880041e 	bne	r3,r2,15c30 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   15c20:	e0bff817 	ldw	r2,-32(fp)
   15c24:	10c00117 	ldw	r3,4(r2)
   15c28:	e0bff817 	ldw	r2,-32(fp)
   15c2c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15c30:	e0bff817 	ldw	r2,-32(fp)
   15c34:	1080058b 	ldhu	r2,22(r2)
   15c38:	10800044 	addi	r2,r2,1
   15c3c:	1007883a 	mov	r3,r2
   15c40:	e0bff817 	ldw	r2,-32(fp)
   15c44:	10c0058d 	sth	r3,22(r2)
   15c48:	e0bff717 	ldw	r2,-36(fp)
   15c4c:	e0bffc15 	stw	r2,-16(fp)
   15c50:	e0bffc17 	ldw	r2,-16(fp)
   15c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15c58:	0005883a 	mov	r2,zero
}
   15c5c:	e037883a 	mov	sp,fp
   15c60:	dfc00117 	ldw	ra,4(sp)
   15c64:	df000017 	ldw	fp,0(sp)
   15c68:	dec00204 	addi	sp,sp,8
   15c6c:	f800283a 	ret

00015c70 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15c70:	defff604 	addi	sp,sp,-40
   15c74:	df000915 	stw	fp,36(sp)
   15c78:	df000904 	addi	fp,sp,36
   15c7c:	e13ffe15 	stw	r4,-8(fp)
   15c80:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15c84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15c88:	e0bffe17 	ldw	r2,-8(fp)
   15c8c:	1000021e 	bne	r2,zero,15c98 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15c90:	00800104 	movi	r2,4
   15c94:	00004906 	br	15dbc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15c98:	e0bfff17 	ldw	r2,-4(fp)
   15c9c:	1000021e 	bne	r2,zero,15ca8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15ca0:	00800244 	movi	r2,9
   15ca4:	00004506 	br	15dbc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15ca8:	e0bffe17 	ldw	r2,-8(fp)
   15cac:	10800003 	ldbu	r2,0(r2)
   15cb0:	10803fcc 	andi	r2,r2,255
   15cb4:	108000a0 	cmpeqi	r2,r2,2
   15cb8:	1000021e 	bne	r2,zero,15cc4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15cbc:	00800044 	movi	r2,1
   15cc0:	00003e06 	br	15dbc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cc4:	0005303a 	rdctl	r2,status
   15cc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ccc:	e0fffc17 	ldw	r3,-16(fp)
   15cd0:	00bfff84 	movi	r2,-2
   15cd4:	1884703a 	and	r2,r3,r2
   15cd8:	1001703a 	wrctl	status,r2
  
  return context;
   15cdc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15ce0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15ce4:	e0bffe17 	ldw	r2,-8(fp)
   15ce8:	10c00283 	ldbu	r3,10(r2)
   15cec:	e0bfff17 	ldw	r2,-4(fp)
   15cf0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15cf4:	e0bffe17 	ldw	r2,-8(fp)
   15cf8:	108002c4 	addi	r2,r2,11
   15cfc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15d00:	e0bfff17 	ldw	r2,-4(fp)
   15d04:	10800204 	addi	r2,r2,8
   15d08:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d0c:	e03ff705 	stb	zero,-36(fp)
   15d10:	00000b06 	br	15d40 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   15d14:	e0bff917 	ldw	r2,-28(fp)
   15d18:	10c00044 	addi	r3,r2,1
   15d1c:	e0fff915 	stw	r3,-28(fp)
   15d20:	e0fff817 	ldw	r3,-32(fp)
   15d24:	19000044 	addi	r4,r3,1
   15d28:	e13ff815 	stw	r4,-32(fp)
   15d2c:	18c00003 	ldbu	r3,0(r3)
   15d30:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d34:	e0bff703 	ldbu	r2,-36(fp)
   15d38:	10800044 	addi	r2,r2,1
   15d3c:	e0bff705 	stb	r2,-36(fp)
   15d40:	e0bff703 	ldbu	r2,-36(fp)
   15d44:	108000f0 	cmpltui	r2,r2,3
   15d48:	103ff21e 	bne	r2,zero,15d14 <__alt_mem_Flash_flash_data+0xf4015d14>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15d4c:	e0bffe17 	ldw	r2,-8(fp)
   15d50:	10800117 	ldw	r2,4(r2)
   15d54:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   15d58:	e0bffb17 	ldw	r2,-20(fp)
   15d5c:	1080058b 	ldhu	r2,22(r2)
   15d60:	10bfffcc 	andi	r2,r2,65535
   15d64:	10000626 	beq	r2,zero,15d80 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15d68:	e0bffb17 	ldw	r2,-20(fp)
   15d6c:	10800417 	ldw	r2,16(r2)
   15d70:	10c00017 	ldw	r3,0(r2)
   15d74:	e0bfff17 	ldw	r2,-4(fp)
   15d78:	10c00015 	stw	r3,0(r2)
   15d7c:	00000206 	br	15d88 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15d80:	e0bfff17 	ldw	r2,-4(fp)
   15d84:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15d88:	e0bffb17 	ldw	r2,-20(fp)
   15d8c:	10c0058b 	ldhu	r3,22(r2)
   15d90:	e0bfff17 	ldw	r2,-4(fp)
   15d94:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15d98:	e0bffb17 	ldw	r2,-20(fp)
   15d9c:	10c0050b 	ldhu	r3,20(r2)
   15da0:	e0bfff17 	ldw	r2,-4(fp)
   15da4:	10c0018d 	sth	r3,6(r2)
   15da8:	e0bffa17 	ldw	r2,-24(fp)
   15dac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15db0:	e0bffd17 	ldw	r2,-12(fp)
   15db4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15db8:	0005883a 	mov	r2,zero
}
   15dbc:	e037883a 	mov	sp,fp
   15dc0:	df000017 	ldw	fp,0(sp)
   15dc4:	dec00104 	addi	sp,sp,4
   15dc8:	f800283a 	ret

00015dcc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15dcc:	defffb04 	addi	sp,sp,-20
   15dd0:	dfc00415 	stw	ra,16(sp)
   15dd4:	df000315 	stw	fp,12(sp)
   15dd8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15ddc:	010000b4 	movhi	r4,2
   15de0:	2118c004 	addi	r4,r4,25344
   15de4:	01407804 	movi	r5,480
   15de8:	00123b00 	call	123b0 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15dec:	008000b4 	movhi	r2,2
   15df0:	1098c004 	addi	r2,r2,25344
   15df4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15df8:	008000b4 	movhi	r2,2
   15dfc:	1098c604 	addi	r2,r2,25368
   15e00:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15e04:	e03ffd0d 	sth	zero,-12(fp)
   15e08:	00000c06 	br	15e3c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15e0c:	e0bffe17 	ldw	r2,-8(fp)
   15e10:	e0ffff17 	ldw	r3,-4(fp)
   15e14:	10c00015 	stw	r3,0(r2)
        pq1++;
   15e18:	e0bffe17 	ldw	r2,-8(fp)
   15e1c:	10800604 	addi	r2,r2,24
   15e20:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15e24:	e0bfff17 	ldw	r2,-4(fp)
   15e28:	10800604 	addi	r2,r2,24
   15e2c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15e30:	e0bffd0b 	ldhu	r2,-12(fp)
   15e34:	10800044 	addi	r2,r2,1
   15e38:	e0bffd0d 	sth	r2,-12(fp)
   15e3c:	e0bffd0b 	ldhu	r2,-12(fp)
   15e40:	108004f0 	cmpltui	r2,r2,19
   15e44:	103ff11e 	bne	r2,zero,15e0c <__alt_mem_Flash_flash_data+0xf4015e0c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15e48:	e0bffe17 	ldw	r2,-8(fp)
   15e4c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15e50:	008000b4 	movhi	r2,2
   15e54:	1082b704 	addi	r2,r2,2780
   15e58:	00c000b4 	movhi	r3,2
   15e5c:	18d8c004 	addi	r3,r3,25344
   15e60:	10c00015 	stw	r3,0(r2)
#endif
}
   15e64:	e037883a 	mov	sp,fp
   15e68:	dfc00117 	ldw	ra,4(sp)
   15e6c:	df000017 	ldw	fp,0(sp)
   15e70:	dec00204 	addi	sp,sp,8
   15e74:	f800283a 	ret

00015e78 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15e78:	defffa04 	addi	sp,sp,-24
   15e7c:	df000515 	stw	fp,20(sp)
   15e80:	df000504 	addi	fp,sp,20
   15e84:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15e88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15e8c:	e0bfff17 	ldw	r2,-4(fp)
   15e90:	1000021e 	bne	r2,zero,15e9c <OSSemAccept+0x24>
        return (0);
   15e94:	0005883a 	mov	r2,zero
   15e98:	00001f06 	br	15f18 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15e9c:	e0bfff17 	ldw	r2,-4(fp)
   15ea0:	10800003 	ldbu	r2,0(r2)
   15ea4:	10803fcc 	andi	r2,r2,255
   15ea8:	108000e0 	cmpeqi	r2,r2,3
   15eac:	1000021e 	bne	r2,zero,15eb8 <OSSemAccept+0x40>
        return (0);
   15eb0:	0005883a 	mov	r2,zero
   15eb4:	00001806 	br	15f18 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15eb8:	0005303a 	rdctl	r2,status
   15ebc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ec0:	e0fffd17 	ldw	r3,-12(fp)
   15ec4:	00bfff84 	movi	r2,-2
   15ec8:	1884703a 	and	r2,r3,r2
   15ecc:	1001703a 	wrctl	status,r2
  
  return context;
   15ed0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15ed4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15ed8:	e0bfff17 	ldw	r2,-4(fp)
   15edc:	1080020b 	ldhu	r2,8(r2)
   15ee0:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   15ee4:	e0bffc0b 	ldhu	r2,-16(fp)
   15ee8:	10000626 	beq	r2,zero,15f04 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15eec:	e0bfff17 	ldw	r2,-4(fp)
   15ef0:	1080020b 	ldhu	r2,8(r2)
   15ef4:	10bfffc4 	addi	r2,r2,-1
   15ef8:	1007883a 	mov	r3,r2
   15efc:	e0bfff17 	ldw	r2,-4(fp)
   15f00:	10c0020d 	sth	r3,8(r2)
   15f04:	e0bffb17 	ldw	r2,-20(fp)
   15f08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f0c:	e0bffe17 	ldw	r2,-8(fp)
   15f10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15f14:	e0bffc0b 	ldhu	r2,-16(fp)
}
   15f18:	e037883a 	mov	sp,fp
   15f1c:	df000017 	ldw	fp,0(sp)
   15f20:	dec00104 	addi	sp,sp,4
   15f24:	f800283a 	ret

00015f28 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15f28:	defff904 	addi	sp,sp,-28
   15f2c:	dfc00615 	stw	ra,24(sp)
   15f30:	df000515 	stw	fp,20(sp)
   15f34:	df000504 	addi	fp,sp,20
   15f38:	2005883a 	mov	r2,r4
   15f3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15f40:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15f44:	008000b4 	movhi	r2,2
   15f48:	1082ba04 	addi	r2,r2,2792
   15f4c:	10800003 	ldbu	r2,0(r2)
   15f50:	10803fcc 	andi	r2,r2,255
   15f54:	10000226 	beq	r2,zero,15f60 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15f58:	0005883a 	mov	r2,zero
   15f5c:	00002d06 	br	16014 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f60:	0005303a 	rdctl	r2,status
   15f64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f68:	e0fffd17 	ldw	r3,-12(fp)
   15f6c:	00bfff84 	movi	r2,-2
   15f70:	1884703a 	and	r2,r3,r2
   15f74:	1001703a 	wrctl	status,r2
  
  return context;
   15f78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15f7c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15f80:	008000b4 	movhi	r2,2
   15f84:	1082b904 	addi	r2,r2,2788
   15f88:	10800017 	ldw	r2,0(r2)
   15f8c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15f90:	008000b4 	movhi	r2,2
   15f94:	1082b904 	addi	r2,r2,2788
   15f98:	10800017 	ldw	r2,0(r2)
   15f9c:	10000726 	beq	r2,zero,15fbc <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15fa0:	008000b4 	movhi	r2,2
   15fa4:	1082b904 	addi	r2,r2,2788
   15fa8:	10800017 	ldw	r2,0(r2)
   15fac:	10c00117 	ldw	r3,4(r2)
   15fb0:	008000b4 	movhi	r2,2
   15fb4:	1082b904 	addi	r2,r2,2788
   15fb8:	10c00015 	stw	r3,0(r2)
   15fbc:	e0bffb17 	ldw	r2,-20(fp)
   15fc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15fc4:	e0bffe17 	ldw	r2,-8(fp)
   15fc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   15fcc:	e0bffc17 	ldw	r2,-16(fp)
   15fd0:	10000f26 	beq	r2,zero,16010 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   15fd4:	e0bffc17 	ldw	r2,-16(fp)
   15fd8:	00c000c4 	movi	r3,3
   15fdc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15fe0:	e0bffc17 	ldw	r2,-16(fp)
   15fe4:	e0ffff0b 	ldhu	r3,-4(fp)
   15fe8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   15fec:	e0bffc17 	ldw	r2,-16(fp)
   15ff0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   15ff4:	e0bffc17 	ldw	r2,-16(fp)
   15ff8:	00c00fc4 	movi	r3,63
   15ffc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16000:	e0bffc17 	ldw	r2,-16(fp)
   16004:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   16008:	e13ffc17 	ldw	r4,-16(fp)
   1600c:	0011fec0 	call	11fec <OS_EventWaitListInit>
    }
    return (pevent);
   16010:	e0bffc17 	ldw	r2,-16(fp)
}
   16014:	e037883a 	mov	sp,fp
   16018:	dfc00117 	ldw	ra,4(sp)
   1601c:	df000017 	ldw	fp,0(sp)
   16020:	dec00204 	addi	sp,sp,8
   16024:	f800283a 	ret

00016028 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16028:	defff304 	addi	sp,sp,-52
   1602c:	dfc00c15 	stw	ra,48(sp)
   16030:	df000b15 	stw	fp,44(sp)
   16034:	df000b04 	addi	fp,sp,44
   16038:	e13ffd15 	stw	r4,-12(fp)
   1603c:	2805883a 	mov	r2,r5
   16040:	e1bfff15 	stw	r6,-4(fp)
   16044:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16048:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1604c:	e0bfff17 	ldw	r2,-4(fp)
   16050:	1000021e 	bne	r2,zero,1605c <OSSemDel+0x34>
        return (pevent);
   16054:	e0bffd17 	ldw	r2,-12(fp)
   16058:	00008806 	br	1627c <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1605c:	e0bffd17 	ldw	r2,-12(fp)
   16060:	1000051e 	bne	r2,zero,16078 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16064:	e0bfff17 	ldw	r2,-4(fp)
   16068:	00c00104 	movi	r3,4
   1606c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16070:	e0bffd17 	ldw	r2,-12(fp)
   16074:	00008106 	br	1627c <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16078:	e0bffd17 	ldw	r2,-12(fp)
   1607c:	10800003 	ldbu	r2,0(r2)
   16080:	10803fcc 	andi	r2,r2,255
   16084:	108000e0 	cmpeqi	r2,r2,3
   16088:	1000051e 	bne	r2,zero,160a0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1608c:	e0bfff17 	ldw	r2,-4(fp)
   16090:	00c00044 	movi	r3,1
   16094:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16098:	e0bffd17 	ldw	r2,-12(fp)
   1609c:	00007706 	br	1627c <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   160a0:	008000b4 	movhi	r2,2
   160a4:	1082ba04 	addi	r2,r2,2792
   160a8:	10800003 	ldbu	r2,0(r2)
   160ac:	10803fcc 	andi	r2,r2,255
   160b0:	10000526 	beq	r2,zero,160c8 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   160b4:	e0bfff17 	ldw	r2,-4(fp)
   160b8:	00c003c4 	movi	r3,15
   160bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   160c0:	e0bffd17 	ldw	r2,-12(fp)
   160c4:	00006d06 	br	1627c <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160c8:	0005303a 	rdctl	r2,status
   160cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160d0:	e0fff817 	ldw	r3,-32(fp)
   160d4:	00bfff84 	movi	r2,-2
   160d8:	1884703a 	and	r2,r3,r2
   160dc:	1001703a 	wrctl	status,r2
  
  return context;
   160e0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   160e4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   160e8:	e0bffd17 	ldw	r2,-12(fp)
   160ec:	10800283 	ldbu	r2,10(r2)
   160f0:	10803fcc 	andi	r2,r2,255
   160f4:	10000326 	beq	r2,zero,16104 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   160f8:	00800044 	movi	r2,1
   160fc:	e0bff505 	stb	r2,-44(fp)
   16100:	00000106 	br	16108 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16104:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16108:	e0bffe03 	ldbu	r2,-8(fp)
   1610c:	10000326 	beq	r2,zero,1611c <OSSemDel+0xf4>
   16110:	10800060 	cmpeqi	r2,r2,1
   16114:	10002c1e 	bne	r2,zero,161c8 <OSSemDel+0x1a0>
   16118:	00004d06 	br	16250 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1611c:	e0bff503 	ldbu	r2,-44(fp)
   16120:	10001a1e 	bne	r2,zero,1618c <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16124:	e0bffd17 	ldw	r2,-12(fp)
   16128:	00c00fc4 	movi	r3,63
   1612c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16130:	e0bffd17 	ldw	r2,-12(fp)
   16134:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16138:	e0bffd17 	ldw	r2,-12(fp)
   1613c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16140:	008000b4 	movhi	r2,2
   16144:	1082b904 	addi	r2,r2,2788
   16148:	10c00017 	ldw	r3,0(r2)
   1614c:	e0bffd17 	ldw	r2,-12(fp)
   16150:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   16154:	e0bffd17 	ldw	r2,-12(fp)
   16158:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1615c:	008000b4 	movhi	r2,2
   16160:	1082b904 	addi	r2,r2,2788
   16164:	e0fffd17 	ldw	r3,-12(fp)
   16168:	10c00015 	stw	r3,0(r2)
   1616c:	e0bff717 	ldw	r2,-36(fp)
   16170:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16174:	e0bff917 	ldw	r2,-28(fp)
   16178:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1617c:	e0bfff17 	ldw	r2,-4(fp)
   16180:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   16184:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   16188:	00003b06 	br	16278 <OSSemDel+0x250>
   1618c:	e0bff717 	ldw	r2,-36(fp)
   16190:	e0bffa15 	stw	r2,-24(fp)
   16194:	e0bffa17 	ldw	r2,-24(fp)
   16198:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1619c:	e0bfff17 	ldw	r2,-4(fp)
   161a0:	00c01244 	movi	r3,73
   161a4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   161a8:	e0bffd17 	ldw	r2,-12(fp)
   161ac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   161b0:	00003106 	br	16278 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   161b4:	e13ffd17 	ldw	r4,-12(fp)
   161b8:	000b883a 	mov	r5,zero
   161bc:	01800044 	movi	r6,1
   161c0:	000f883a 	mov	r7,zero
   161c4:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   161c8:	e0bffd17 	ldw	r2,-12(fp)
   161cc:	10800283 	ldbu	r2,10(r2)
   161d0:	10803fcc 	andi	r2,r2,255
   161d4:	103ff71e 	bne	r2,zero,161b4 <__alt_mem_Flash_flash_data+0xf40161b4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   161d8:	e0bffd17 	ldw	r2,-12(fp)
   161dc:	00c00fc4 	movi	r3,63
   161e0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   161e4:	e0bffd17 	ldw	r2,-12(fp)
   161e8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   161ec:	e0bffd17 	ldw	r2,-12(fp)
   161f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   161f4:	008000b4 	movhi	r2,2
   161f8:	1082b904 	addi	r2,r2,2788
   161fc:	10c00017 	ldw	r3,0(r2)
   16200:	e0bffd17 	ldw	r2,-12(fp)
   16204:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16208:	e0bffd17 	ldw	r2,-12(fp)
   1620c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16210:	008000b4 	movhi	r2,2
   16214:	1082b904 	addi	r2,r2,2788
   16218:	e0fffd17 	ldw	r3,-12(fp)
   1621c:	10c00015 	stw	r3,0(r2)
   16220:	e0bff717 	ldw	r2,-36(fp)
   16224:	e0bffb15 	stw	r2,-20(fp)
   16228:	e0bffb17 	ldw	r2,-20(fp)
   1622c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16230:	e0bff503 	ldbu	r2,-44(fp)
   16234:	10800058 	cmpnei	r2,r2,1
   16238:	1000011e 	bne	r2,zero,16240 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1623c:	00124640 	call	12464 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16240:	e0bfff17 	ldw	r2,-4(fp)
   16244:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   16248:	e03ff615 	stw	zero,-40(fp)
             break;
   1624c:	00000a06 	br	16278 <OSSemDel+0x250>
   16250:	e0bff717 	ldw	r2,-36(fp)
   16254:	e0bffc15 	stw	r2,-16(fp)
   16258:	e0bffc17 	ldw	r2,-16(fp)
   1625c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16260:	e0bfff17 	ldw	r2,-4(fp)
   16264:	00c001c4 	movi	r3,7
   16268:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1626c:	e0bffd17 	ldw	r2,-12(fp)
   16270:	e0bff615 	stw	r2,-40(fp)
             break;
   16274:	0001883a 	nop
    }
    return (pevent_return);
   16278:	e0bff617 	ldw	r2,-40(fp)
}
   1627c:	e037883a 	mov	sp,fp
   16280:	dfc00117 	ldw	ra,4(sp)
   16284:	df000017 	ldw	fp,0(sp)
   16288:	dec00204 	addi	sp,sp,8
   1628c:	f800283a 	ret

00016290 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16290:	defff504 	addi	sp,sp,-44
   16294:	dfc00a15 	stw	ra,40(sp)
   16298:	df000915 	stw	fp,36(sp)
   1629c:	df000904 	addi	fp,sp,36
   162a0:	e13ffd15 	stw	r4,-12(fp)
   162a4:	2805883a 	mov	r2,r5
   162a8:	e1bfff15 	stw	r6,-4(fp)
   162ac:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   162b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   162b4:	e0bfff17 	ldw	r2,-4(fp)
   162b8:	1000011e 	bne	r2,zero,162c0 <OSSemPend+0x30>
        return;
   162bc:	00008906 	br	164e4 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   162c0:	e0bffd17 	ldw	r2,-12(fp)
   162c4:	1000041e 	bne	r2,zero,162d8 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   162c8:	e0bfff17 	ldw	r2,-4(fp)
   162cc:	00c00104 	movi	r3,4
   162d0:	10c00005 	stb	r3,0(r2)
        return;
   162d4:	00008306 	br	164e4 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   162d8:	e0bffd17 	ldw	r2,-12(fp)
   162dc:	10800003 	ldbu	r2,0(r2)
   162e0:	10803fcc 	andi	r2,r2,255
   162e4:	108000e0 	cmpeqi	r2,r2,3
   162e8:	1000041e 	bne	r2,zero,162fc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   162ec:	e0bfff17 	ldw	r2,-4(fp)
   162f0:	00c00044 	movi	r3,1
   162f4:	10c00005 	stb	r3,0(r2)
        return;
   162f8:	00007a06 	br	164e4 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   162fc:	008000b4 	movhi	r2,2
   16300:	1082ba04 	addi	r2,r2,2792
   16304:	10800003 	ldbu	r2,0(r2)
   16308:	10803fcc 	andi	r2,r2,255
   1630c:	10000426 	beq	r2,zero,16320 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16310:	e0bfff17 	ldw	r2,-4(fp)
   16314:	00c00084 	movi	r3,2
   16318:	10c00005 	stb	r3,0(r2)
        return;
   1631c:	00007106 	br	164e4 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16320:	008000b4 	movhi	r2,2
   16324:	1082ac04 	addi	r2,r2,2736
   16328:	10800003 	ldbu	r2,0(r2)
   1632c:	10803fcc 	andi	r2,r2,255
   16330:	10000426 	beq	r2,zero,16344 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16334:	e0bfff17 	ldw	r2,-4(fp)
   16338:	00c00344 	movi	r3,13
   1633c:	10c00005 	stb	r3,0(r2)
        return;
   16340:	00006806 	br	164e4 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16344:	0005303a 	rdctl	r2,status
   16348:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1634c:	e0fff817 	ldw	r3,-32(fp)
   16350:	00bfff84 	movi	r2,-2
   16354:	1884703a 	and	r2,r3,r2
   16358:	1001703a 	wrctl	status,r2
  
  return context;
   1635c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16360:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   16364:	e0bffd17 	ldw	r2,-12(fp)
   16368:	1080020b 	ldhu	r2,8(r2)
   1636c:	10bfffcc 	andi	r2,r2,65535
   16370:	10000d26 	beq	r2,zero,163a8 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   16374:	e0bffd17 	ldw	r2,-12(fp)
   16378:	1080020b 	ldhu	r2,8(r2)
   1637c:	10bfffc4 	addi	r2,r2,-1
   16380:	1007883a 	mov	r3,r2
   16384:	e0bffd17 	ldw	r2,-12(fp)
   16388:	10c0020d 	sth	r3,8(r2)
   1638c:	e0bff717 	ldw	r2,-36(fp)
   16390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16394:	e0bff917 	ldw	r2,-28(fp)
   16398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1639c:	e0bfff17 	ldw	r2,-4(fp)
   163a0:	10000005 	stb	zero,0(r2)
        return;
   163a4:	00004f06 	br	164e4 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   163a8:	008000b4 	movhi	r2,2
   163ac:	1082bb04 	addi	r2,r2,2796
   163b0:	10c00017 	ldw	r3,0(r2)
   163b4:	008000b4 	movhi	r2,2
   163b8:	1082bb04 	addi	r2,r2,2796
   163bc:	10800017 	ldw	r2,0(r2)
   163c0:	10800c03 	ldbu	r2,48(r2)
   163c4:	10800054 	ori	r2,r2,1
   163c8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   163cc:	008000b4 	movhi	r2,2
   163d0:	1082bb04 	addi	r2,r2,2796
   163d4:	10800017 	ldw	r2,0(r2)
   163d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   163dc:	008000b4 	movhi	r2,2
   163e0:	1082bb04 	addi	r2,r2,2796
   163e4:	10800017 	ldw	r2,0(r2)
   163e8:	e0fffe0b 	ldhu	r3,-8(fp)
   163ec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   163f0:	e13ffd17 	ldw	r4,-12(fp)
   163f4:	0011be40 	call	11be4 <OS_EventTaskWait>
   163f8:	e0bff717 	ldw	r2,-36(fp)
   163fc:	e0bffa15 	stw	r2,-24(fp)
   16400:	e0bffa17 	ldw	r2,-24(fp)
   16404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   16408:	00124640 	call	12464 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1640c:	0005303a 	rdctl	r2,status
   16410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16414:	e0fffb17 	ldw	r3,-20(fp)
   16418:	00bfff84 	movi	r2,-2
   1641c:	1884703a 	and	r2,r3,r2
   16420:	1001703a 	wrctl	status,r2
  
  return context;
   16424:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16428:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1642c:	008000b4 	movhi	r2,2
   16430:	1082bb04 	addi	r2,r2,2796
   16434:	10800017 	ldw	r2,0(r2)
   16438:	10800c43 	ldbu	r2,49(r2)
   1643c:	10803fcc 	andi	r2,r2,255
   16440:	10000326 	beq	r2,zero,16450 <OSSemPend+0x1c0>
   16444:	108000a0 	cmpeqi	r2,r2,2
   16448:	1000041e 	bne	r2,zero,1645c <OSSemPend+0x1cc>
   1644c:	00000706 	br	1646c <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   16450:	e0bfff17 	ldw	r2,-4(fp)
   16454:	10000005 	stb	zero,0(r2)
             break;
   16458:	00000e06 	br	16494 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1645c:	e0bfff17 	ldw	r2,-4(fp)
   16460:	00c00384 	movi	r3,14
   16464:	10c00005 	stb	r3,0(r2)
             break;
   16468:	00000a06 	br	16494 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1646c:	008000b4 	movhi	r2,2
   16470:	1082bb04 	addi	r2,r2,2796
   16474:	10800017 	ldw	r2,0(r2)
   16478:	1009883a 	mov	r4,r2
   1647c:	e17ffd17 	ldw	r5,-12(fp)
   16480:	0011e3c0 	call	11e3c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   16484:	e0bfff17 	ldw	r2,-4(fp)
   16488:	00c00284 	movi	r3,10
   1648c:	10c00005 	stb	r3,0(r2)
             break;
   16490:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   16494:	008000b4 	movhi	r2,2
   16498:	1082bb04 	addi	r2,r2,2796
   1649c:	10800017 	ldw	r2,0(r2)
   164a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   164a4:	008000b4 	movhi	r2,2
   164a8:	1082bb04 	addi	r2,r2,2796
   164ac:	10800017 	ldw	r2,0(r2)
   164b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   164b4:	008000b4 	movhi	r2,2
   164b8:	1082bb04 	addi	r2,r2,2796
   164bc:	10800017 	ldw	r2,0(r2)
   164c0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   164c4:	008000b4 	movhi	r2,2
   164c8:	1082bb04 	addi	r2,r2,2796
   164cc:	10800017 	ldw	r2,0(r2)
   164d0:	10000815 	stw	zero,32(r2)
   164d4:	e0bff717 	ldw	r2,-36(fp)
   164d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164dc:	e0bffc17 	ldw	r2,-16(fp)
   164e0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   164e4:	e037883a 	mov	sp,fp
   164e8:	dfc00117 	ldw	ra,4(sp)
   164ec:	df000017 	ldw	fp,0(sp)
   164f0:	dec00204 	addi	sp,sp,8
   164f4:	f800283a 	ret

000164f8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   164f8:	defff604 	addi	sp,sp,-40
   164fc:	dfc00915 	stw	ra,36(sp)
   16500:	df000815 	stw	fp,32(sp)
   16504:	df000804 	addi	fp,sp,32
   16508:	e13ffd15 	stw	r4,-12(fp)
   1650c:	2805883a 	mov	r2,r5
   16510:	e1bfff15 	stw	r6,-4(fp)
   16514:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16518:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1651c:	e0bfff17 	ldw	r2,-4(fp)
   16520:	1000021e 	bne	r2,zero,1652c <OSSemPendAbort+0x34>
        return (0);
   16524:	0005883a 	mov	r2,zero
   16528:	00004906 	br	16650 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1652c:	e0bffd17 	ldw	r2,-12(fp)
   16530:	1000051e 	bne	r2,zero,16548 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16534:	e0bfff17 	ldw	r2,-4(fp)
   16538:	00c00104 	movi	r3,4
   1653c:	10c00005 	stb	r3,0(r2)
        return (0);
   16540:	0005883a 	mov	r2,zero
   16544:	00004206 	br	16650 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16548:	e0bffd17 	ldw	r2,-12(fp)
   1654c:	10800003 	ldbu	r2,0(r2)
   16550:	10803fcc 	andi	r2,r2,255
   16554:	108000e0 	cmpeqi	r2,r2,3
   16558:	1000051e 	bne	r2,zero,16570 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1655c:	e0bfff17 	ldw	r2,-4(fp)
   16560:	00c00044 	movi	r3,1
   16564:	10c00005 	stb	r3,0(r2)
        return (0);
   16568:	0005883a 	mov	r2,zero
   1656c:	00003806 	br	16650 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16570:	0005303a 	rdctl	r2,status
   16574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16578:	e0fffa17 	ldw	r3,-24(fp)
   1657c:	00bfff84 	movi	r2,-2
   16580:	1884703a 	and	r2,r3,r2
   16584:	1001703a 	wrctl	status,r2
  
  return context;
   16588:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1658c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   16590:	e0bffd17 	ldw	r2,-12(fp)
   16594:	10800283 	ldbu	r2,10(r2)
   16598:	10803fcc 	andi	r2,r2,255
   1659c:	10002526 	beq	r2,zero,16634 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   165a0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   165a4:	e0bffe03 	ldbu	r2,-8(fp)
   165a8:	10800060 	cmpeqi	r2,r2,1
   165ac:	10000e26 	beq	r2,zero,165e8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   165b0:	00000806 	br	165d4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   165b4:	e13ffd17 	ldw	r4,-12(fp)
   165b8:	000b883a 	mov	r5,zero
   165bc:	01800044 	movi	r6,1
   165c0:	01c00084 	movi	r7,2
   165c4:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                     nbr_tasks++;
   165c8:	e0bff803 	ldbu	r2,-32(fp)
   165cc:	10800044 	addi	r2,r2,1
   165d0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   165d4:	e0bffd17 	ldw	r2,-12(fp)
   165d8:	10800283 	ldbu	r2,10(r2)
   165dc:	10803fcc 	andi	r2,r2,255
   165e0:	103ff41e 	bne	r2,zero,165b4 <__alt_mem_Flash_flash_data+0xf40165b4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   165e4:	00000906 	br	1660c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   165e8:	e13ffd17 	ldw	r4,-12(fp)
   165ec:	000b883a 	mov	r5,zero
   165f0:	01800044 	movi	r6,1
   165f4:	01c00084 	movi	r7,2
   165f8:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
                 nbr_tasks++;
   165fc:	e0bff803 	ldbu	r2,-32(fp)
   16600:	10800044 	addi	r2,r2,1
   16604:	e0bff805 	stb	r2,-32(fp)
                 break;
   16608:	0001883a 	nop
   1660c:	e0bff917 	ldw	r2,-28(fp)
   16610:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16614:	e0bffb17 	ldw	r2,-20(fp)
   16618:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1661c:	00124640 	call	12464 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   16620:	e0bfff17 	ldw	r2,-4(fp)
   16624:	00c00384 	movi	r3,14
   16628:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1662c:	e0bff803 	ldbu	r2,-32(fp)
   16630:	00000706 	br	16650 <OSSemPendAbort+0x158>
   16634:	e0bff917 	ldw	r2,-28(fp)
   16638:	e0bffc15 	stw	r2,-16(fp)
   1663c:	e0bffc17 	ldw	r2,-16(fp)
   16640:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16644:	e0bfff17 	ldw	r2,-4(fp)
   16648:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1664c:	0005883a 	mov	r2,zero
}
   16650:	e037883a 	mov	sp,fp
   16654:	dfc00117 	ldw	ra,4(sp)
   16658:	df000017 	ldw	fp,0(sp)
   1665c:	dec00204 	addi	sp,sp,8
   16660:	f800283a 	ret

00016664 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   16664:	defff804 	addi	sp,sp,-32
   16668:	dfc00715 	stw	ra,28(sp)
   1666c:	df000615 	stw	fp,24(sp)
   16670:	df000604 	addi	fp,sp,24
   16674:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16678:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1667c:	e0bfff17 	ldw	r2,-4(fp)
   16680:	1000021e 	bne	r2,zero,1668c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   16684:	00800104 	movi	r2,4
   16688:	00003506 	br	16760 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1668c:	e0bfff17 	ldw	r2,-4(fp)
   16690:	10800003 	ldbu	r2,0(r2)
   16694:	10803fcc 	andi	r2,r2,255
   16698:	108000e0 	cmpeqi	r2,r2,3
   1669c:	1000021e 	bne	r2,zero,166a8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   166a0:	00800044 	movi	r2,1
   166a4:	00002e06 	br	16760 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166a8:	0005303a 	rdctl	r2,status
   166ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166b0:	e0fffb17 	ldw	r3,-20(fp)
   166b4:	00bfff84 	movi	r2,-2
   166b8:	1884703a 	and	r2,r3,r2
   166bc:	1001703a 	wrctl	status,r2
  
  return context;
   166c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   166c4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   166c8:	e0bfff17 	ldw	r2,-4(fp)
   166cc:	10800283 	ldbu	r2,10(r2)
   166d0:	10803fcc 	andi	r2,r2,255
   166d4:	10000c26 	beq	r2,zero,16708 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   166d8:	e13fff17 	ldw	r4,-4(fp)
   166dc:	000b883a 	mov	r5,zero
   166e0:	01800044 	movi	r6,1
   166e4:	000f883a 	mov	r7,zero
   166e8:	0011a4c0 	call	11a4c <OS_EventTaskRdy>
   166ec:	e0bffa17 	ldw	r2,-24(fp)
   166f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166f4:	e0bffc17 	ldw	r2,-16(fp)
   166f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   166fc:	00124640 	call	12464 <OS_Sched>
        return (OS_ERR_NONE);
   16700:	0005883a 	mov	r2,zero
   16704:	00001606 	br	16760 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   16708:	e0bfff17 	ldw	r2,-4(fp)
   1670c:	1080020b 	ldhu	r2,8(r2)
   16710:	10ffffcc 	andi	r3,r2,65535
   16714:	00bfffd4 	movui	r2,65535
   16718:	18800c26 	beq	r3,r2,1674c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1671c:	e0bfff17 	ldw	r2,-4(fp)
   16720:	1080020b 	ldhu	r2,8(r2)
   16724:	10800044 	addi	r2,r2,1
   16728:	1007883a 	mov	r3,r2
   1672c:	e0bfff17 	ldw	r2,-4(fp)
   16730:	10c0020d 	sth	r3,8(r2)
   16734:	e0bffa17 	ldw	r2,-24(fp)
   16738:	e0bffd15 	stw	r2,-12(fp)
   1673c:	e0bffd17 	ldw	r2,-12(fp)
   16740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   16744:	0005883a 	mov	r2,zero
   16748:	00000506 	br	16760 <OSSemPost+0xfc>
   1674c:	e0bffa17 	ldw	r2,-24(fp)
   16750:	e0bffe15 	stw	r2,-8(fp)
   16754:	e0bffe17 	ldw	r2,-8(fp)
   16758:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1675c:	00800c84 	movi	r2,50
}
   16760:	e037883a 	mov	sp,fp
   16764:	dfc00117 	ldw	ra,4(sp)
   16768:	df000017 	ldw	fp,0(sp)
   1676c:	dec00204 	addi	sp,sp,8
   16770:	f800283a 	ret

00016774 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   16774:	defff704 	addi	sp,sp,-36
   16778:	df000815 	stw	fp,32(sp)
   1677c:	df000804 	addi	fp,sp,32
   16780:	e13ffe15 	stw	r4,-8(fp)
   16784:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16788:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1678c:	e0bffe17 	ldw	r2,-8(fp)
   16790:	1000021e 	bne	r2,zero,1679c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   16794:	00800104 	movi	r2,4
   16798:	00003606 	br	16874 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1679c:	e0bfff17 	ldw	r2,-4(fp)
   167a0:	1000021e 	bne	r2,zero,167ac <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   167a4:	00800244 	movi	r2,9
   167a8:	00003206 	br	16874 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   167ac:	e0bffe17 	ldw	r2,-8(fp)
   167b0:	10800003 	ldbu	r2,0(r2)
   167b4:	10803fcc 	andi	r2,r2,255
   167b8:	108000e0 	cmpeqi	r2,r2,3
   167bc:	1000021e 	bne	r2,zero,167c8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   167c0:	00800044 	movi	r2,1
   167c4:	00002b06 	br	16874 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167c8:	0005303a 	rdctl	r2,status
   167cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167d0:	e0fffc17 	ldw	r3,-16(fp)
   167d4:	00bfff84 	movi	r2,-2
   167d8:	1884703a 	and	r2,r3,r2
   167dc:	1001703a 	wrctl	status,r2
  
  return context;
   167e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   167e4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   167e8:	e0bffe17 	ldw	r2,-8(fp)
   167ec:	10c00283 	ldbu	r3,10(r2)
   167f0:	e0bfff17 	ldw	r2,-4(fp)
   167f4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   167f8:	e0bffe17 	ldw	r2,-8(fp)
   167fc:	108002c4 	addi	r2,r2,11
   16800:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   16804:	e0bfff17 	ldw	r2,-4(fp)
   16808:	10800084 	addi	r2,r2,2
   1680c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16810:	e03ffa05 	stb	zero,-24(fp)
   16814:	00000b06 	br	16844 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   16818:	e0bff917 	ldw	r2,-28(fp)
   1681c:	10c00044 	addi	r3,r2,1
   16820:	e0fff915 	stw	r3,-28(fp)
   16824:	e0fff817 	ldw	r3,-32(fp)
   16828:	19000044 	addi	r4,r3,1
   1682c:	e13ff815 	stw	r4,-32(fp)
   16830:	18c00003 	ldbu	r3,0(r3)
   16834:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16838:	e0bffa03 	ldbu	r2,-24(fp)
   1683c:	10800044 	addi	r2,r2,1
   16840:	e0bffa05 	stb	r2,-24(fp)
   16844:	e0bffa03 	ldbu	r2,-24(fp)
   16848:	108000f0 	cmpltui	r2,r2,3
   1684c:	103ff21e 	bne	r2,zero,16818 <__alt_mem_Flash_flash_data+0xf4016818>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   16850:	e0bffe17 	ldw	r2,-8(fp)
   16854:	10c0020b 	ldhu	r3,8(r2)
   16858:	e0bfff17 	ldw	r2,-4(fp)
   1685c:	10c0000d 	sth	r3,0(r2)
   16860:	e0bffb17 	ldw	r2,-20(fp)
   16864:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16868:	e0bffd17 	ldw	r2,-12(fp)
   1686c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16870:	0005883a 	mov	r2,zero
}
   16874:	e037883a 	mov	sp,fp
   16878:	df000017 	ldw	fp,0(sp)
   1687c:	dec00104 	addi	sp,sp,4
   16880:	f800283a 	ret

00016884 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   16884:	defff904 	addi	sp,sp,-28
   16888:	df000615 	stw	fp,24(sp)
   1688c:	df000604 	addi	fp,sp,24
   16890:	e13ffd15 	stw	r4,-12(fp)
   16894:	2805883a 	mov	r2,r5
   16898:	e1bfff15 	stw	r6,-4(fp)
   1689c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   168a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   168a4:	e0bfff17 	ldw	r2,-4(fp)
   168a8:	1000011e 	bne	r2,zero,168b0 <OSSemSet+0x2c>
        return;
   168ac:	00003006 	br	16970 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   168b0:	e0bffd17 	ldw	r2,-12(fp)
   168b4:	1000041e 	bne	r2,zero,168c8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   168b8:	e0bfff17 	ldw	r2,-4(fp)
   168bc:	00c00104 	movi	r3,4
   168c0:	10c00005 	stb	r3,0(r2)
        return;
   168c4:	00002a06 	br	16970 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   168c8:	e0bffd17 	ldw	r2,-12(fp)
   168cc:	10800003 	ldbu	r2,0(r2)
   168d0:	10803fcc 	andi	r2,r2,255
   168d4:	108000e0 	cmpeqi	r2,r2,3
   168d8:	1000041e 	bne	r2,zero,168ec <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   168dc:	e0bfff17 	ldw	r2,-4(fp)
   168e0:	00c00044 	movi	r3,1
   168e4:	10c00005 	stb	r3,0(r2)
        return;
   168e8:	00002106 	br	16970 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168ec:	0005303a 	rdctl	r2,status
   168f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168f4:	e0fffb17 	ldw	r3,-20(fp)
   168f8:	00bfff84 	movi	r2,-2
   168fc:	1884703a 	and	r2,r3,r2
   16900:	1001703a 	wrctl	status,r2
  
  return context;
   16904:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16908:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1690c:	e0bfff17 	ldw	r2,-4(fp)
   16910:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   16914:	e0bffd17 	ldw	r2,-12(fp)
   16918:	1080020b 	ldhu	r2,8(r2)
   1691c:	10bfffcc 	andi	r2,r2,65535
   16920:	10000426 	beq	r2,zero,16934 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   16924:	e0bffd17 	ldw	r2,-12(fp)
   16928:	e0fffe0b 	ldhu	r3,-8(fp)
   1692c:	10c0020d 	sth	r3,8(r2)
   16930:	00000b06 	br	16960 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   16934:	e0bffd17 	ldw	r2,-12(fp)
   16938:	10800283 	ldbu	r2,10(r2)
   1693c:	10803fcc 	andi	r2,r2,255
   16940:	1000041e 	bne	r2,zero,16954 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   16944:	e0bffd17 	ldw	r2,-12(fp)
   16948:	e0fffe0b 	ldhu	r3,-8(fp)
   1694c:	10c0020d 	sth	r3,8(r2)
   16950:	00000306 	br	16960 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   16954:	e0bfff17 	ldw	r2,-4(fp)
   16958:	00c01244 	movi	r3,73
   1695c:	10c00005 	stb	r3,0(r2)
   16960:	e0bffa17 	ldw	r2,-24(fp)
   16964:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16968:	e0bffc17 	ldw	r2,-16(fp)
   1696c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   16970:	e037883a 	mov	sp,fp
   16974:	df000017 	ldw	fp,0(sp)
   16978:	dec00104 	addi	sp,sp,4
   1697c:	f800283a 	ret

00016980 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   16980:	defff104 	addi	sp,sp,-60
   16984:	dfc00e15 	stw	ra,56(sp)
   16988:	df000d15 	stw	fp,52(sp)
   1698c:	df000d04 	addi	fp,sp,52
   16990:	2007883a 	mov	r3,r4
   16994:	2805883a 	mov	r2,r5
   16998:	e0fffe05 	stb	r3,-8(fp)
   1699c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   169a0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   169a4:	e0bffe03 	ldbu	r2,-8(fp)
   169a8:	10800530 	cmpltui	r2,r2,20
   169ac:	1000051e 	bne	r2,zero,169c4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   169b0:	e0bffe03 	ldbu	r2,-8(fp)
   169b4:	10803fe0 	cmpeqi	r2,r2,255
   169b8:	1000021e 	bne	r2,zero,169c4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   169bc:	00800a84 	movi	r2,42
   169c0:	00013a06 	br	16eac <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   169c4:	e0bfff03 	ldbu	r2,-4(fp)
   169c8:	10800530 	cmpltui	r2,r2,20
   169cc:	1000021e 	bne	r2,zero,169d8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   169d0:	00800a84 	movi	r2,42
   169d4:	00013506 	br	16eac <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169d8:	0005303a 	rdctl	r2,status
   169dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169e0:	e0fff917 	ldw	r3,-28(fp)
   169e4:	00bfff84 	movi	r2,-2
   169e8:	1884703a 	and	r2,r3,r2
   169ec:	1001703a 	wrctl	status,r2
  
  return context;
   169f0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   169f4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   169f8:	e0ffff03 	ldbu	r3,-4(fp)
   169fc:	008000b4 	movhi	r2,2
   16a00:	109f4c04 	addi	r2,r2,32048
   16a04:	18c7883a 	add	r3,r3,r3
   16a08:	18c7883a 	add	r3,r3,r3
   16a0c:	10c5883a 	add	r2,r2,r3
   16a10:	10800017 	ldw	r2,0(r2)
   16a14:	10000626 	beq	r2,zero,16a30 <OSTaskChangePrio+0xb0>
   16a18:	e0bff517 	ldw	r2,-44(fp)
   16a1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a20:	e0bffa17 	ldw	r2,-24(fp)
   16a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   16a28:	00800a04 	movi	r2,40
   16a2c:	00011f06 	br	16eac <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   16a30:	e0bffe03 	ldbu	r2,-8(fp)
   16a34:	10803fd8 	cmpnei	r2,r2,255
   16a38:	1000051e 	bne	r2,zero,16a50 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   16a3c:	008000b4 	movhi	r2,2
   16a40:	1082bb04 	addi	r2,r2,2796
   16a44:	10800017 	ldw	r2,0(r2)
   16a48:	10800c83 	ldbu	r2,50(r2)
   16a4c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16a50:	e0fffe03 	ldbu	r3,-8(fp)
   16a54:	008000b4 	movhi	r2,2
   16a58:	109f4c04 	addi	r2,r2,32048
   16a5c:	18c7883a 	add	r3,r3,r3
   16a60:	18c7883a 	add	r3,r3,r3
   16a64:	10c5883a 	add	r2,r2,r3
   16a68:	10800017 	ldw	r2,0(r2)
   16a6c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16a70:	e0bff617 	ldw	r2,-40(fp)
   16a74:	1000061e 	bne	r2,zero,16a90 <OSTaskChangePrio+0x110>
   16a78:	e0bff517 	ldw	r2,-44(fp)
   16a7c:	e0bffb15 	stw	r2,-20(fp)
   16a80:	e0bffb17 	ldw	r2,-20(fp)
   16a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16a88:	00800a44 	movi	r2,41
   16a8c:	00010706 	br	16eac <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16a90:	e0bff617 	ldw	r2,-40(fp)
   16a94:	10800058 	cmpnei	r2,r2,1
   16a98:	1000061e 	bne	r2,zero,16ab4 <OSTaskChangePrio+0x134>
   16a9c:	e0bff517 	ldw	r2,-44(fp)
   16aa0:	e0bffc15 	stw	r2,-16(fp)
   16aa4:	e0bffc17 	ldw	r2,-16(fp)
   16aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16aac:	008010c4 	movi	r2,67
   16ab0:	0000fe06 	br	16eac <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16ab4:	e0bfff03 	ldbu	r2,-4(fp)
   16ab8:	1004d0fa 	srli	r2,r2,3
   16abc:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16ac0:	e0bfff03 	ldbu	r2,-4(fp)
   16ac4:	108001cc 	andi	r2,r2,7
   16ac8:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   16acc:	e0bff703 	ldbu	r2,-36(fp)
   16ad0:	00c00044 	movi	r3,1
   16ad4:	1884983a 	sll	r2,r3,r2
   16ad8:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16adc:	e0bff743 	ldbu	r2,-35(fp)
   16ae0:	00c00044 	movi	r3,1
   16ae4:	1884983a 	sll	r2,r3,r2
   16ae8:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   16aec:	e0fffe03 	ldbu	r3,-8(fp)
   16af0:	008000b4 	movhi	r2,2
   16af4:	109f4c04 	addi	r2,r2,32048
   16af8:	18c7883a 	add	r3,r3,r3
   16afc:	18c7883a 	add	r3,r3,r3
   16b00:	10c5883a 	add	r2,r2,r3
   16b04:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   16b08:	e0ffff03 	ldbu	r3,-4(fp)
   16b0c:	008000b4 	movhi	r2,2
   16b10:	109f4c04 	addi	r2,r2,32048
   16b14:	18c7883a 	add	r3,r3,r3
   16b18:	18c7883a 	add	r3,r3,r3
   16b1c:	10c5883a 	add	r2,r2,r3
   16b20:	e0fff617 	ldw	r3,-40(fp)
   16b24:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   16b28:	e0bff617 	ldw	r2,-40(fp)
   16b2c:	10800d03 	ldbu	r2,52(r2)
   16b30:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   16b34:	e0bff617 	ldw	r2,-40(fp)
   16b38:	10800d83 	ldbu	r2,54(r2)
   16b3c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   16b40:	e0bff617 	ldw	r2,-40(fp)
   16b44:	10800d43 	ldbu	r2,53(r2)
   16b48:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16b4c:	e0fff803 	ldbu	r3,-32(fp)
   16b50:	008000b4 	movhi	r2,2
   16b54:	1082b844 	addi	r2,r2,2785
   16b58:	10c5883a 	add	r2,r2,r3
   16b5c:	10c00003 	ldbu	r3,0(r2)
   16b60:	e0bff883 	ldbu	r2,-30(fp)
   16b64:	1884703a 	and	r2,r3,r2
   16b68:	10803fcc 	andi	r2,r2,255
   16b6c:	10003726 	beq	r2,zero,16c4c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   16b70:	e0fff803 	ldbu	r3,-32(fp)
   16b74:	e13ff803 	ldbu	r4,-32(fp)
   16b78:	008000b4 	movhi	r2,2
   16b7c:	1082b844 	addi	r2,r2,2785
   16b80:	1105883a 	add	r2,r2,r4
   16b84:	10800003 	ldbu	r2,0(r2)
   16b88:	1009883a 	mov	r4,r2
   16b8c:	e0bff883 	ldbu	r2,-30(fp)
   16b90:	0084303a 	nor	r2,zero,r2
   16b94:	2084703a 	and	r2,r4,r2
   16b98:	1009883a 	mov	r4,r2
   16b9c:	008000b4 	movhi	r2,2
   16ba0:	1082b844 	addi	r2,r2,2785
   16ba4:	10c5883a 	add	r2,r2,r3
   16ba8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16bac:	e0fff803 	ldbu	r3,-32(fp)
   16bb0:	008000b4 	movhi	r2,2
   16bb4:	1082b844 	addi	r2,r2,2785
   16bb8:	10c5883a 	add	r2,r2,r3
   16bbc:	10800003 	ldbu	r2,0(r2)
   16bc0:	10803fcc 	andi	r2,r2,255
   16bc4:	10000b1e 	bne	r2,zero,16bf4 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   16bc8:	e0bff843 	ldbu	r2,-31(fp)
   16bcc:	0084303a 	nor	r2,zero,r2
   16bd0:	1007883a 	mov	r3,r2
   16bd4:	008000b4 	movhi	r2,2
   16bd8:	1082b804 	addi	r2,r2,2784
   16bdc:	10800003 	ldbu	r2,0(r2)
   16be0:	1884703a 	and	r2,r3,r2
   16be4:	1007883a 	mov	r3,r2
   16be8:	008000b4 	movhi	r2,2
   16bec:	1082b804 	addi	r2,r2,2784
   16bf0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16bf4:	008000b4 	movhi	r2,2
   16bf8:	1082b804 	addi	r2,r2,2784
   16bfc:	10c00003 	ldbu	r3,0(r2)
   16c00:	e0bff783 	ldbu	r2,-34(fp)
   16c04:	1884b03a 	or	r2,r3,r2
   16c08:	1007883a 	mov	r3,r2
   16c0c:	008000b4 	movhi	r2,2
   16c10:	1082b804 	addi	r2,r2,2784
   16c14:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   16c18:	e0fff703 	ldbu	r3,-36(fp)
   16c1c:	e13ff703 	ldbu	r4,-36(fp)
   16c20:	008000b4 	movhi	r2,2
   16c24:	1082b844 	addi	r2,r2,2785
   16c28:	1105883a 	add	r2,r2,r4
   16c2c:	11000003 	ldbu	r4,0(r2)
   16c30:	e0bff7c3 	ldbu	r2,-33(fp)
   16c34:	2084b03a 	or	r2,r4,r2
   16c38:	1009883a 	mov	r4,r2
   16c3c:	008000b4 	movhi	r2,2
   16c40:	1082b844 	addi	r2,r2,2785
   16c44:	10c5883a 	add	r2,r2,r3
   16c48:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   16c4c:	e0bff617 	ldw	r2,-40(fp)
   16c50:	10800717 	ldw	r2,28(r2)
   16c54:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   16c58:	e0bff317 	ldw	r2,-52(fp)
   16c5c:	10003326 	beq	r2,zero,16d2c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   16c60:	e0bff803 	ldbu	r2,-32(fp)
   16c64:	e0fff803 	ldbu	r3,-32(fp)
   16c68:	e13ff317 	ldw	r4,-52(fp)
   16c6c:	20c7883a 	add	r3,r4,r3
   16c70:	18c00204 	addi	r3,r3,8
   16c74:	18c000c3 	ldbu	r3,3(r3)
   16c78:	1809883a 	mov	r4,r3
   16c7c:	e0fff883 	ldbu	r3,-30(fp)
   16c80:	00c6303a 	nor	r3,zero,r3
   16c84:	20c6703a 	and	r3,r4,r3
   16c88:	1809883a 	mov	r4,r3
   16c8c:	e0fff317 	ldw	r3,-52(fp)
   16c90:	1885883a 	add	r2,r3,r2
   16c94:	10800204 	addi	r2,r2,8
   16c98:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   16c9c:	e0bff803 	ldbu	r2,-32(fp)
   16ca0:	e0fff317 	ldw	r3,-52(fp)
   16ca4:	1885883a 	add	r2,r3,r2
   16ca8:	10800204 	addi	r2,r2,8
   16cac:	108000c3 	ldbu	r2,3(r2)
   16cb0:	10803fcc 	andi	r2,r2,255
   16cb4:	1000091e 	bne	r2,zero,16cdc <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   16cb8:	e0bff317 	ldw	r2,-52(fp)
   16cbc:	10800283 	ldbu	r2,10(r2)
   16cc0:	1007883a 	mov	r3,r2
   16cc4:	e0bff843 	ldbu	r2,-31(fp)
   16cc8:	0084303a 	nor	r2,zero,r2
   16ccc:	1884703a 	and	r2,r3,r2
   16cd0:	1007883a 	mov	r3,r2
   16cd4:	e0bff317 	ldw	r2,-52(fp)
   16cd8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16cdc:	e0bff317 	ldw	r2,-52(fp)
   16ce0:	10c00283 	ldbu	r3,10(r2)
   16ce4:	e0bff783 	ldbu	r2,-34(fp)
   16ce8:	1884b03a 	or	r2,r3,r2
   16cec:	1007883a 	mov	r3,r2
   16cf0:	e0bff317 	ldw	r2,-52(fp)
   16cf4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16cf8:	e0bff703 	ldbu	r2,-36(fp)
   16cfc:	e0fff703 	ldbu	r3,-36(fp)
   16d00:	e13ff317 	ldw	r4,-52(fp)
   16d04:	20c7883a 	add	r3,r4,r3
   16d08:	18c00204 	addi	r3,r3,8
   16d0c:	190000c3 	ldbu	r4,3(r3)
   16d10:	e0fff7c3 	ldbu	r3,-33(fp)
   16d14:	20c6b03a 	or	r3,r4,r3
   16d18:	1809883a 	mov	r4,r3
   16d1c:	e0fff317 	ldw	r3,-52(fp)
   16d20:	1885883a 	add	r2,r3,r2
   16d24:	10800204 	addi	r2,r2,8
   16d28:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   16d2c:	e0bff617 	ldw	r2,-40(fp)
   16d30:	10800817 	ldw	r2,32(r2)
   16d34:	10004226 	beq	r2,zero,16e40 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16d38:	e0bff617 	ldw	r2,-40(fp)
   16d3c:	10800817 	ldw	r2,32(r2)
   16d40:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   16d44:	e0bff417 	ldw	r2,-48(fp)
   16d48:	10800017 	ldw	r2,0(r2)
   16d4c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   16d50:	00003906 	br	16e38 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16d54:	e0bff803 	ldbu	r2,-32(fp)
   16d58:	e0fff803 	ldbu	r3,-32(fp)
   16d5c:	e13ff317 	ldw	r4,-52(fp)
   16d60:	20c7883a 	add	r3,r4,r3
   16d64:	18c00204 	addi	r3,r3,8
   16d68:	18c000c3 	ldbu	r3,3(r3)
   16d6c:	1809883a 	mov	r4,r3
   16d70:	e0fff883 	ldbu	r3,-30(fp)
   16d74:	00c6303a 	nor	r3,zero,r3
   16d78:	20c6703a 	and	r3,r4,r3
   16d7c:	1809883a 	mov	r4,r3
   16d80:	e0fff317 	ldw	r3,-52(fp)
   16d84:	1885883a 	add	r2,r3,r2
   16d88:	10800204 	addi	r2,r2,8
   16d8c:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16d90:	e0bff803 	ldbu	r2,-32(fp)
   16d94:	e0fff317 	ldw	r3,-52(fp)
   16d98:	1885883a 	add	r2,r3,r2
   16d9c:	10800204 	addi	r2,r2,8
   16da0:	108000c3 	ldbu	r2,3(r2)
   16da4:	10803fcc 	andi	r2,r2,255
   16da8:	1000091e 	bne	r2,zero,16dd0 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   16dac:	e0bff317 	ldw	r2,-52(fp)
   16db0:	10800283 	ldbu	r2,10(r2)
   16db4:	1007883a 	mov	r3,r2
   16db8:	e0bff843 	ldbu	r2,-31(fp)
   16dbc:	0084303a 	nor	r2,zero,r2
   16dc0:	1884703a 	and	r2,r3,r2
   16dc4:	1007883a 	mov	r3,r2
   16dc8:	e0bff317 	ldw	r2,-52(fp)
   16dcc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16dd0:	e0bff317 	ldw	r2,-52(fp)
   16dd4:	10c00283 	ldbu	r3,10(r2)
   16dd8:	e0bff783 	ldbu	r2,-34(fp)
   16ddc:	1884b03a 	or	r2,r3,r2
   16de0:	1007883a 	mov	r3,r2
   16de4:	e0bff317 	ldw	r2,-52(fp)
   16de8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16dec:	e0bff703 	ldbu	r2,-36(fp)
   16df0:	e0fff703 	ldbu	r3,-36(fp)
   16df4:	e13ff317 	ldw	r4,-52(fp)
   16df8:	20c7883a 	add	r3,r4,r3
   16dfc:	18c00204 	addi	r3,r3,8
   16e00:	190000c3 	ldbu	r4,3(r3)
   16e04:	e0fff7c3 	ldbu	r3,-33(fp)
   16e08:	20c6b03a 	or	r3,r4,r3
   16e0c:	1809883a 	mov	r4,r3
   16e10:	e0fff317 	ldw	r3,-52(fp)
   16e14:	1885883a 	add	r2,r3,r2
   16e18:	10800204 	addi	r2,r2,8
   16e1c:	110000c5 	stb	r4,3(r2)
            pevents++;
   16e20:	e0bff417 	ldw	r2,-48(fp)
   16e24:	10800104 	addi	r2,r2,4
   16e28:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16e2c:	e0bff417 	ldw	r2,-48(fp)
   16e30:	10800017 	ldw	r2,0(r2)
   16e34:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   16e38:	e0bff317 	ldw	r2,-52(fp)
   16e3c:	103fc51e 	bne	r2,zero,16d54 <__alt_mem_Flash_flash_data+0xf4016d54>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16e40:	e0bff617 	ldw	r2,-40(fp)
   16e44:	e0ffff03 	ldbu	r3,-4(fp)
   16e48:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16e4c:	e0bff617 	ldw	r2,-40(fp)
   16e50:	e0fff703 	ldbu	r3,-36(fp)
   16e54:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16e58:	e0bff617 	ldw	r2,-40(fp)
   16e5c:	e0fff743 	ldbu	r3,-35(fp)
   16e60:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16e64:	e0bff617 	ldw	r2,-40(fp)
   16e68:	e0fff783 	ldbu	r3,-34(fp)
   16e6c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16e70:	e0bff617 	ldw	r2,-40(fp)
   16e74:	e0fff7c3 	ldbu	r3,-33(fp)
   16e78:	10c00d45 	stb	r3,53(r2)
   16e7c:	e0bff517 	ldw	r2,-44(fp)
   16e80:	e0bffd15 	stw	r2,-12(fp)
   16e84:	e0bffd17 	ldw	r2,-12(fp)
   16e88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16e8c:	008000b4 	movhi	r2,2
   16e90:	1082ac44 	addi	r2,r2,2737
   16e94:	10800003 	ldbu	r2,0(r2)
   16e98:	10803fcc 	andi	r2,r2,255
   16e9c:	10800058 	cmpnei	r2,r2,1
   16ea0:	1000011e 	bne	r2,zero,16ea8 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   16ea4:	00124640 	call	12464 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16ea8:	0005883a 	mov	r2,zero
}
   16eac:	e037883a 	mov	sp,fp
   16eb0:	dfc00117 	ldw	ra,4(sp)
   16eb4:	df000017 	ldw	fp,0(sp)
   16eb8:	dec00204 	addi	sp,sp,8
   16ebc:	f800283a 	ret

00016ec0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16ec0:	deffee04 	addi	sp,sp,-72
   16ec4:	dfc01115 	stw	ra,68(sp)
   16ec8:	df001015 	stw	fp,64(sp)
   16ecc:	df001004 	addi	fp,sp,64
   16ed0:	e13ffc15 	stw	r4,-16(fp)
   16ed4:	e17ffd15 	stw	r5,-12(fp)
   16ed8:	e1bffe15 	stw	r6,-8(fp)
   16edc:	3805883a 	mov	r2,r7
   16ee0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16ee4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16ee8:	e0bfff03 	ldbu	r2,-4(fp)
   16eec:	10800570 	cmpltui	r2,r2,21
   16ef0:	1000021e 	bne	r2,zero,16efc <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16ef4:	00800a84 	movi	r2,42
   16ef8:	00005b06 	br	17068 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16efc:	0005303a 	rdctl	r2,status
   16f00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f04:	e0fff617 	ldw	r3,-40(fp)
   16f08:	00bfff84 	movi	r2,-2
   16f0c:	1884703a 	and	r2,r3,r2
   16f10:	1001703a 	wrctl	status,r2
  
  return context;
   16f14:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16f18:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16f1c:	008000b4 	movhi	r2,2
   16f20:	1082ba04 	addi	r2,r2,2792
   16f24:	10800003 	ldbu	r2,0(r2)
   16f28:	10803fcc 	andi	r2,r2,255
   16f2c:	10000626 	beq	r2,zero,16f48 <OSTaskCreate+0x88>
   16f30:	e0bff317 	ldw	r2,-52(fp)
   16f34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f38:	e0bff717 	ldw	r2,-36(fp)
   16f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16f40:	00800f04 	movi	r2,60
   16f44:	00004806 	br	17068 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16f48:	e0ffff03 	ldbu	r3,-4(fp)
   16f4c:	008000b4 	movhi	r2,2
   16f50:	109f4c04 	addi	r2,r2,32048
   16f54:	18c7883a 	add	r3,r3,r3
   16f58:	18c7883a 	add	r3,r3,r3
   16f5c:	10c5883a 	add	r2,r2,r3
   16f60:	10800017 	ldw	r2,0(r2)
   16f64:	10003b1e 	bne	r2,zero,17054 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16f68:	e0ffff03 	ldbu	r3,-4(fp)
   16f6c:	008000b4 	movhi	r2,2
   16f70:	109f4c04 	addi	r2,r2,32048
   16f74:	18c7883a 	add	r3,r3,r3
   16f78:	18c7883a 	add	r3,r3,r3
   16f7c:	10c5883a 	add	r2,r2,r3
   16f80:	00c00044 	movi	r3,1
   16f84:	10c00015 	stw	r3,0(r2)
   16f88:	e0bff317 	ldw	r2,-52(fp)
   16f8c:	e0bff815 	stw	r2,-32(fp)
   16f90:	e0bff817 	ldw	r2,-32(fp)
   16f94:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   16f98:	e13ffc17 	ldw	r4,-16(fp)
   16f9c:	e17ffd17 	ldw	r5,-12(fp)
   16fa0:	e1bffe17 	ldw	r6,-8(fp)
   16fa4:	000f883a 	mov	r7,zero
   16fa8:	001bb8c0 	call	1bb8c <OSTaskStkInit>
   16fac:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   16fb0:	e0bfff03 	ldbu	r2,-4(fp)
   16fb4:	d8000015 	stw	zero,0(sp)
   16fb8:	d8000115 	stw	zero,4(sp)
   16fbc:	d8000215 	stw	zero,8(sp)
   16fc0:	1009883a 	mov	r4,r2
   16fc4:	e17ff417 	ldw	r5,-48(fp)
   16fc8:	000d883a 	mov	r6,zero
   16fcc:	000f883a 	mov	r7,zero
   16fd0:	00128680 	call	12868 <OS_TCBInit>
   16fd4:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   16fd8:	e0bff503 	ldbu	r2,-44(fp)
   16fdc:	1000081e 	bne	r2,zero,17000 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16fe0:	008000b4 	movhi	r2,2
   16fe4:	1082ac44 	addi	r2,r2,2737
   16fe8:	10800003 	ldbu	r2,0(r2)
   16fec:	10803fcc 	andi	r2,r2,255
   16ff0:	10800058 	cmpnei	r2,r2,1
   16ff4:	1000151e 	bne	r2,zero,1704c <OSTaskCreate+0x18c>
                OS_Sched();
   16ff8:	00124640 	call	12464 <OS_Sched>
   16ffc:	00001306 	br	1704c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17000:	0005303a 	rdctl	r2,status
   17004:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17008:	e0fff917 	ldw	r3,-28(fp)
   1700c:	00bfff84 	movi	r2,-2
   17010:	1884703a 	and	r2,r3,r2
   17014:	1001703a 	wrctl	status,r2
  
  return context;
   17018:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1701c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   17020:	e0ffff03 	ldbu	r3,-4(fp)
   17024:	008000b4 	movhi	r2,2
   17028:	109f4c04 	addi	r2,r2,32048
   1702c:	18c7883a 	add	r3,r3,r3
   17030:	18c7883a 	add	r3,r3,r3
   17034:	10c5883a 	add	r2,r2,r3
   17038:	10000015 	stw	zero,0(r2)
   1703c:	e0bff317 	ldw	r2,-52(fp)
   17040:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17044:	e0bffa17 	ldw	r2,-24(fp)
   17048:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1704c:	e0bff503 	ldbu	r2,-44(fp)
   17050:	00000506 	br	17068 <OSTaskCreate+0x1a8>
   17054:	e0bff317 	ldw	r2,-52(fp)
   17058:	e0bffb15 	stw	r2,-20(fp)
   1705c:	e0bffb17 	ldw	r2,-20(fp)
   17060:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   17064:	00800a04 	movi	r2,40
}
   17068:	e037883a 	mov	sp,fp
   1706c:	dfc00117 	ldw	ra,4(sp)
   17070:	df000017 	ldw	fp,0(sp)
   17074:	dec00204 	addi	sp,sp,8
   17078:	f800283a 	ret

0001707c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1707c:	deffec04 	addi	sp,sp,-80
   17080:	dfc01315 	stw	ra,76(sp)
   17084:	df001215 	stw	fp,72(sp)
   17088:	df001204 	addi	fp,sp,72
   1708c:	e13ffa15 	stw	r4,-24(fp)
   17090:	e17ffb15 	stw	r5,-20(fp)
   17094:	e1bffc15 	stw	r6,-16(fp)
   17098:	3809883a 	mov	r4,r7
   1709c:	e0c00217 	ldw	r3,8(fp)
   170a0:	e0800617 	ldw	r2,24(fp)
   170a4:	e13ffd05 	stb	r4,-12(fp)
   170a8:	e0fffe0d 	sth	r3,-8(fp)
   170ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   170b0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   170b4:	e0bffd03 	ldbu	r2,-12(fp)
   170b8:	10800570 	cmpltui	r2,r2,21
   170bc:	1000021e 	bne	r2,zero,170c8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   170c0:	00800a84 	movi	r2,42
   170c4:	00006306 	br	17254 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170c8:	0005303a 	rdctl	r2,status
   170cc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170d0:	e0fff417 	ldw	r3,-48(fp)
   170d4:	00bfff84 	movi	r2,-2
   170d8:	1884703a 	and	r2,r3,r2
   170dc:	1001703a 	wrctl	status,r2
  
  return context;
   170e0:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   170e4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   170e8:	008000b4 	movhi	r2,2
   170ec:	1082ba04 	addi	r2,r2,2792
   170f0:	10800003 	ldbu	r2,0(r2)
   170f4:	10803fcc 	andi	r2,r2,255
   170f8:	10000626 	beq	r2,zero,17114 <OSTaskCreateExt+0x98>
   170fc:	e0bff117 	ldw	r2,-60(fp)
   17100:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17104:	e0bff517 	ldw	r2,-44(fp)
   17108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1710c:	00800f04 	movi	r2,60
   17110:	00005006 	br	17254 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   17114:	e0fffd03 	ldbu	r3,-12(fp)
   17118:	008000b4 	movhi	r2,2
   1711c:	109f4c04 	addi	r2,r2,32048
   17120:	18c7883a 	add	r3,r3,r3
   17124:	18c7883a 	add	r3,r3,r3
   17128:	10c5883a 	add	r2,r2,r3
   1712c:	10800017 	ldw	r2,0(r2)
   17130:	1000431e 	bne	r2,zero,17240 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   17134:	e0fffd03 	ldbu	r3,-12(fp)
   17138:	008000b4 	movhi	r2,2
   1713c:	109f4c04 	addi	r2,r2,32048
   17140:	18c7883a 	add	r3,r3,r3
   17144:	18c7883a 	add	r3,r3,r3
   17148:	10c5883a 	add	r2,r2,r3
   1714c:	00c00044 	movi	r3,1
   17150:	10c00015 	stw	r3,0(r2)
   17154:	e0bff117 	ldw	r2,-60(fp)
   17158:	e0bff615 	stw	r2,-40(fp)
   1715c:	e0bff617 	ldw	r2,-40(fp)
   17160:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   17164:	e0bfff0b 	ldhu	r2,-4(fp)
   17168:	e1000317 	ldw	r4,12(fp)
   1716c:	e1400417 	ldw	r5,16(fp)
   17170:	100d883a 	mov	r6,r2
   17174:	00182080 	call	18208 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   17178:	e0bfff0b 	ldhu	r2,-4(fp)
   1717c:	e13ffa17 	ldw	r4,-24(fp)
   17180:	e17ffb17 	ldw	r5,-20(fp)
   17184:	e1bffc17 	ldw	r6,-16(fp)
   17188:	100f883a 	mov	r7,r2
   1718c:	001bb8c0 	call	1bb8c <OSTaskStkInit>
   17190:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   17194:	e13ffd03 	ldbu	r4,-12(fp)
   17198:	e1fffe0b 	ldhu	r7,-8(fp)
   1719c:	e0bfff0b 	ldhu	r2,-4(fp)
   171a0:	e0c00417 	ldw	r3,16(fp)
   171a4:	d8c00015 	stw	r3,0(sp)
   171a8:	e0c00517 	ldw	r3,20(fp)
   171ac:	d8c00115 	stw	r3,4(sp)
   171b0:	d8800215 	stw	r2,8(sp)
   171b4:	e17ff217 	ldw	r5,-56(fp)
   171b8:	e1800317 	ldw	r6,12(fp)
   171bc:	00128680 	call	12868 <OS_TCBInit>
   171c0:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   171c4:	e0bff303 	ldbu	r2,-52(fp)
   171c8:	1000081e 	bne	r2,zero,171ec <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   171cc:	008000b4 	movhi	r2,2
   171d0:	1082ac44 	addi	r2,r2,2737
   171d4:	10800003 	ldbu	r2,0(r2)
   171d8:	10803fcc 	andi	r2,r2,255
   171dc:	10800058 	cmpnei	r2,r2,1
   171e0:	1000151e 	bne	r2,zero,17238 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   171e4:	00124640 	call	12464 <OS_Sched>
   171e8:	00001306 	br	17238 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171ec:	0005303a 	rdctl	r2,status
   171f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171f4:	e0fff717 	ldw	r3,-36(fp)
   171f8:	00bfff84 	movi	r2,-2
   171fc:	1884703a 	and	r2,r3,r2
   17200:	1001703a 	wrctl	status,r2
  
  return context;
   17204:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17208:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1720c:	e0fffd03 	ldbu	r3,-12(fp)
   17210:	008000b4 	movhi	r2,2
   17214:	109f4c04 	addi	r2,r2,32048
   17218:	18c7883a 	add	r3,r3,r3
   1721c:	18c7883a 	add	r3,r3,r3
   17220:	10c5883a 	add	r2,r2,r3
   17224:	10000015 	stw	zero,0(r2)
   17228:	e0bff117 	ldw	r2,-60(fp)
   1722c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17230:	e0bff817 	ldw	r2,-32(fp)
   17234:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17238:	e0bff303 	ldbu	r2,-52(fp)
   1723c:	00000506 	br	17254 <OSTaskCreateExt+0x1d8>
   17240:	e0bff117 	ldw	r2,-60(fp)
   17244:	e0bff915 	stw	r2,-28(fp)
   17248:	e0bff917 	ldw	r2,-28(fp)
   1724c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   17250:	00800a04 	movi	r2,40
}
   17254:	e037883a 	mov	sp,fp
   17258:	dfc00117 	ldw	ra,4(sp)
   1725c:	df000017 	ldw	fp,0(sp)
   17260:	dec00204 	addi	sp,sp,8
   17264:	f800283a 	ret

00017268 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   17268:	defff404 	addi	sp,sp,-48
   1726c:	dfc00b15 	stw	ra,44(sp)
   17270:	df000a15 	stw	fp,40(sp)
   17274:	df000a04 	addi	fp,sp,40
   17278:	2005883a 	mov	r2,r4
   1727c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   17280:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   17284:	008000b4 	movhi	r2,2
   17288:	1082ba04 	addi	r2,r2,2792
   1728c:	10800003 	ldbu	r2,0(r2)
   17290:	10803fcc 	andi	r2,r2,255
   17294:	10000226 	beq	r2,zero,172a0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   17298:	00801004 	movi	r2,64
   1729c:	0000e506 	br	17634 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   172a0:	e0bfff03 	ldbu	r2,-4(fp)
   172a4:	10800518 	cmpnei	r2,r2,20
   172a8:	1000021e 	bne	r2,zero,172b4 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   172ac:	00800f84 	movi	r2,62
   172b0:	0000e006 	br	17634 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   172b4:	e0bfff03 	ldbu	r2,-4(fp)
   172b8:	10800530 	cmpltui	r2,r2,20
   172bc:	1000051e 	bne	r2,zero,172d4 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   172c0:	e0bfff03 	ldbu	r2,-4(fp)
   172c4:	10803fe0 	cmpeqi	r2,r2,255
   172c8:	1000021e 	bne	r2,zero,172d4 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   172cc:	00800a84 	movi	r2,42
   172d0:	0000d806 	br	17634 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172d4:	0005303a 	rdctl	r2,status
   172d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172dc:	e0fff917 	ldw	r3,-28(fp)
   172e0:	00bfff84 	movi	r2,-2
   172e4:	1884703a 	and	r2,r3,r2
   172e8:	1001703a 	wrctl	status,r2
  
  return context;
   172ec:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   172f0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   172f4:	e0bfff03 	ldbu	r2,-4(fp)
   172f8:	10803fd8 	cmpnei	r2,r2,255
   172fc:	1000051e 	bne	r2,zero,17314 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   17300:	008000b4 	movhi	r2,2
   17304:	1082bb04 	addi	r2,r2,2796
   17308:	10800017 	ldw	r2,0(r2)
   1730c:	10800c83 	ldbu	r2,50(r2)
   17310:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17314:	e0ffff03 	ldbu	r3,-4(fp)
   17318:	008000b4 	movhi	r2,2
   1731c:	109f4c04 	addi	r2,r2,32048
   17320:	18c7883a 	add	r3,r3,r3
   17324:	18c7883a 	add	r3,r3,r3
   17328:	10c5883a 	add	r2,r2,r3
   1732c:	10800017 	ldw	r2,0(r2)
   17330:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   17334:	e0bff717 	ldw	r2,-36(fp)
   17338:	1000061e 	bne	r2,zero,17354 <OSTaskDel+0xec>
   1733c:	e0bff617 	ldw	r2,-40(fp)
   17340:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17344:	e0bffa17 	ldw	r2,-24(fp)
   17348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1734c:	008010c4 	movi	r2,67
   17350:	0000b806 	br	17634 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   17354:	e0bff717 	ldw	r2,-36(fp)
   17358:	10800058 	cmpnei	r2,r2,1
   1735c:	1000061e 	bne	r2,zero,17378 <OSTaskDel+0x110>
   17360:	e0bff617 	ldw	r2,-40(fp)
   17364:	e0bffb15 	stw	r2,-20(fp)
   17368:	e0bffb17 	ldw	r2,-20(fp)
   1736c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17370:	00800f44 	movi	r2,61
   17374:	0000af06 	br	17634 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   17378:	e0bff717 	ldw	r2,-36(fp)
   1737c:	10800d03 	ldbu	r2,52(r2)
   17380:	10c03fcc 	andi	r3,r2,255
   17384:	e0bff717 	ldw	r2,-36(fp)
   17388:	10800d03 	ldbu	r2,52(r2)
   1738c:	11003fcc 	andi	r4,r2,255
   17390:	008000b4 	movhi	r2,2
   17394:	1082b844 	addi	r2,r2,2785
   17398:	1105883a 	add	r2,r2,r4
   1739c:	10800003 	ldbu	r2,0(r2)
   173a0:	1009883a 	mov	r4,r2
   173a4:	e0bff717 	ldw	r2,-36(fp)
   173a8:	10800d43 	ldbu	r2,53(r2)
   173ac:	0084303a 	nor	r2,zero,r2
   173b0:	2084703a 	and	r2,r4,r2
   173b4:	1009883a 	mov	r4,r2
   173b8:	008000b4 	movhi	r2,2
   173bc:	1082b844 	addi	r2,r2,2785
   173c0:	10c5883a 	add	r2,r2,r3
   173c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   173c8:	e0bff717 	ldw	r2,-36(fp)
   173cc:	10800d03 	ldbu	r2,52(r2)
   173d0:	10c03fcc 	andi	r3,r2,255
   173d4:	008000b4 	movhi	r2,2
   173d8:	1082b844 	addi	r2,r2,2785
   173dc:	10c5883a 	add	r2,r2,r3
   173e0:	10800003 	ldbu	r2,0(r2)
   173e4:	10803fcc 	andi	r2,r2,255
   173e8:	10000c1e 	bne	r2,zero,1741c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   173ec:	e0bff717 	ldw	r2,-36(fp)
   173f0:	10800d83 	ldbu	r2,54(r2)
   173f4:	0084303a 	nor	r2,zero,r2
   173f8:	1007883a 	mov	r3,r2
   173fc:	008000b4 	movhi	r2,2
   17400:	1082b804 	addi	r2,r2,2784
   17404:	10800003 	ldbu	r2,0(r2)
   17408:	1884703a 	and	r2,r3,r2
   1740c:	1007883a 	mov	r3,r2
   17410:	008000b4 	movhi	r2,2
   17414:	1082b804 	addi	r2,r2,2784
   17418:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1741c:	e0bff717 	ldw	r2,-36(fp)
   17420:	10800717 	ldw	r2,28(r2)
   17424:	10000526 	beq	r2,zero,1743c <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   17428:	e0bff717 	ldw	r2,-36(fp)
   1742c:	10800717 	ldw	r2,28(r2)
   17430:	e13ff717 	ldw	r4,-36(fp)
   17434:	100b883a 	mov	r5,r2
   17438:	0011e3c0 	call	11e3c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1743c:	e0bff717 	ldw	r2,-36(fp)
   17440:	10800817 	ldw	r2,32(r2)
   17444:	10000526 	beq	r2,zero,1745c <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   17448:	e0bff717 	ldw	r2,-36(fp)
   1744c:	10800817 	ldw	r2,32(r2)
   17450:	e13ff717 	ldw	r4,-36(fp)
   17454:	100b883a 	mov	r5,r2
   17458:	0011ef00 	call	11ef0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1745c:	e0bff717 	ldw	r2,-36(fp)
   17460:	10800a17 	ldw	r2,40(r2)
   17464:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   17468:	e0bff817 	ldw	r2,-32(fp)
   1746c:	10000226 	beq	r2,zero,17478 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   17470:	e13ff817 	ldw	r4,-32(fp)
   17474:	00144440 	call	14444 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   17478:	e0bff717 	ldw	r2,-36(fp)
   1747c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   17480:	e0bff717 	ldw	r2,-36(fp)
   17484:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   17488:	e0bff717 	ldw	r2,-36(fp)
   1748c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   17490:	008000b4 	movhi	r2,2
   17494:	1082ac04 	addi	r2,r2,2736
   17498:	10800003 	ldbu	r2,0(r2)
   1749c:	10803fcc 	andi	r2,r2,255
   174a0:	10803fe0 	cmpeqi	r2,r2,255
   174a4:	1000081e 	bne	r2,zero,174c8 <OSTaskDel+0x260>
        OSLockNesting++;
   174a8:	008000b4 	movhi	r2,2
   174ac:	1082ac04 	addi	r2,r2,2736
   174b0:	10800003 	ldbu	r2,0(r2)
   174b4:	10800044 	addi	r2,r2,1
   174b8:	1007883a 	mov	r3,r2
   174bc:	008000b4 	movhi	r2,2
   174c0:	1082ac04 	addi	r2,r2,2736
   174c4:	10c00005 	stb	r3,0(r2)
   174c8:	e0bff617 	ldw	r2,-40(fp)
   174cc:	e0bffc15 	stw	r2,-16(fp)
   174d0:	e0bffc17 	ldw	r2,-16(fp)
   174d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   174d8:	0011a300 	call	11a30 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174dc:	0005303a 	rdctl	r2,status
   174e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174e4:	e0fffd17 	ldw	r3,-12(fp)
   174e8:	00bfff84 	movi	r2,-2
   174ec:	1884703a 	and	r2,r3,r2
   174f0:	1001703a 	wrctl	status,r2
  
  return context;
   174f4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   174f8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   174fc:	008000b4 	movhi	r2,2
   17500:	1082ac04 	addi	r2,r2,2736
   17504:	10800003 	ldbu	r2,0(r2)
   17508:	10803fcc 	andi	r2,r2,255
   1750c:	10000826 	beq	r2,zero,17530 <OSTaskDel+0x2c8>
        OSLockNesting--;
   17510:	008000b4 	movhi	r2,2
   17514:	1082ac04 	addi	r2,r2,2736
   17518:	10800003 	ldbu	r2,0(r2)
   1751c:	10bfffc4 	addi	r2,r2,-1
   17520:	1007883a 	mov	r3,r2
   17524:	008000b4 	movhi	r2,2
   17528:	1082ac04 	addi	r2,r2,2736
   1752c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   17530:	e13ff717 	ldw	r4,-36(fp)
   17534:	001bd080 	call	1bd08 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   17538:	008000b4 	movhi	r2,2
   1753c:	1082b444 	addi	r2,r2,2769
   17540:	10800003 	ldbu	r2,0(r2)
   17544:	10bfffc4 	addi	r2,r2,-1
   17548:	1007883a 	mov	r3,r2
   1754c:	008000b4 	movhi	r2,2
   17550:	1082b444 	addi	r2,r2,2769
   17554:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   17558:	e0ffff03 	ldbu	r3,-4(fp)
   1755c:	008000b4 	movhi	r2,2
   17560:	109f4c04 	addi	r2,r2,32048
   17564:	18c7883a 	add	r3,r3,r3
   17568:	18c7883a 	add	r3,r3,r3
   1756c:	10c5883a 	add	r2,r2,r3
   17570:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   17574:	e0bff717 	ldw	r2,-36(fp)
   17578:	10800617 	ldw	r2,24(r2)
   1757c:	1000091e 	bne	r2,zero,175a4 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   17580:	e0bff717 	ldw	r2,-36(fp)
   17584:	10800517 	ldw	r2,20(r2)
   17588:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1758c:	e0bff717 	ldw	r2,-36(fp)
   17590:	10c00517 	ldw	r3,20(r2)
   17594:	008000b4 	movhi	r2,2
   17598:	1082af04 	addi	r2,r2,2748
   1759c:	10c00015 	stw	r3,0(r2)
   175a0:	00000a06 	br	175cc <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   175a4:	e0bff717 	ldw	r2,-36(fp)
   175a8:	10800617 	ldw	r2,24(r2)
   175ac:	e0fff717 	ldw	r3,-36(fp)
   175b0:	18c00517 	ldw	r3,20(r3)
   175b4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   175b8:	e0bff717 	ldw	r2,-36(fp)
   175bc:	10800517 	ldw	r2,20(r2)
   175c0:	e0fff717 	ldw	r3,-36(fp)
   175c4:	18c00617 	ldw	r3,24(r3)
   175c8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   175cc:	008000b4 	movhi	r2,2
   175d0:	1082b304 	addi	r2,r2,2764
   175d4:	10c00017 	ldw	r3,0(r2)
   175d8:	e0bff717 	ldw	r2,-36(fp)
   175dc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   175e0:	008000b4 	movhi	r2,2
   175e4:	1082b304 	addi	r2,r2,2764
   175e8:	e0fff717 	ldw	r3,-36(fp)
   175ec:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   175f0:	e0bff717 	ldw	r2,-36(fp)
   175f4:	00c00fc4 	movi	r3,63
   175f8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   175fc:	e0bff717 	ldw	r2,-36(fp)
   17600:	10001345 	stb	zero,77(r2)
   17604:	e0bff617 	ldw	r2,-40(fp)
   17608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1760c:	e0bffe17 	ldw	r2,-8(fp)
   17610:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   17614:	008000b4 	movhi	r2,2
   17618:	1082ac44 	addi	r2,r2,2737
   1761c:	10800003 	ldbu	r2,0(r2)
   17620:	10803fcc 	andi	r2,r2,255
   17624:	10800058 	cmpnei	r2,r2,1
   17628:	1000011e 	bne	r2,zero,17630 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1762c:	00124640 	call	12464 <OS_Sched>
    }
    return (OS_ERR_NONE);
   17630:	0005883a 	mov	r2,zero
}
   17634:	e037883a 	mov	sp,fp
   17638:	dfc00117 	ldw	ra,4(sp)
   1763c:	df000017 	ldw	fp,0(sp)
   17640:	dec00204 	addi	sp,sp,8
   17644:	f800283a 	ret

00017648 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   17648:	defff504 	addi	sp,sp,-44
   1764c:	df000a15 	stw	fp,40(sp)
   17650:	df000a04 	addi	fp,sp,40
   17654:	2005883a 	mov	r2,r4
   17658:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1765c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   17660:	e0bfff03 	ldbu	r2,-4(fp)
   17664:	10800518 	cmpnei	r2,r2,20
   17668:	1000021e 	bne	r2,zero,17674 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1766c:	00800f84 	movi	r2,62
   17670:	00004706 	br	17790 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17674:	e0bfff03 	ldbu	r2,-4(fp)
   17678:	10800530 	cmpltui	r2,r2,20
   1767c:	1000051e 	bne	r2,zero,17694 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   17680:	e0bfff03 	ldbu	r2,-4(fp)
   17684:	10803fe0 	cmpeqi	r2,r2,255
   17688:	1000021e 	bne	r2,zero,17694 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1768c:	00800a84 	movi	r2,42
   17690:	00003f06 	br	17790 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   17694:	e0bfff03 	ldbu	r2,-4(fp)
   17698:	10803fd8 	cmpnei	r2,r2,255
   1769c:	1000131e 	bne	r2,zero,176ec <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176a0:	0005303a 	rdctl	r2,status
   176a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176a8:	e0fff917 	ldw	r3,-28(fp)
   176ac:	00bfff84 	movi	r2,-2
   176b0:	1884703a 	and	r2,r3,r2
   176b4:	1001703a 	wrctl	status,r2
  
  return context;
   176b8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   176bc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   176c0:	008000b4 	movhi	r2,2
   176c4:	1082bb04 	addi	r2,r2,2796
   176c8:	10800017 	ldw	r2,0(r2)
   176cc:	10800dc3 	ldbu	r2,55(r2)
   176d0:	e0bff705 	stb	r2,-36(fp)
   176d4:	e0bff617 	ldw	r2,-40(fp)
   176d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176dc:	e0bffa17 	ldw	r2,-24(fp)
   176e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   176e4:	e0bff703 	ldbu	r2,-36(fp)
   176e8:	00002906 	br	17790 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176ec:	0005303a 	rdctl	r2,status
   176f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176f4:	e0fffb17 	ldw	r3,-20(fp)
   176f8:	00bfff84 	movi	r2,-2
   176fc:	1884703a 	and	r2,r3,r2
   17700:	1001703a 	wrctl	status,r2
  
  return context;
   17704:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17708:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1770c:	e0ffff03 	ldbu	r3,-4(fp)
   17710:	008000b4 	movhi	r2,2
   17714:	109f4c04 	addi	r2,r2,32048
   17718:	18c7883a 	add	r3,r3,r3
   1771c:	18c7883a 	add	r3,r3,r3
   17720:	10c5883a 	add	r2,r2,r3
   17724:	10800017 	ldw	r2,0(r2)
   17728:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1772c:	e0bff817 	ldw	r2,-32(fp)
   17730:	1000061e 	bne	r2,zero,1774c <OSTaskDelReq+0x104>
   17734:	e0bff617 	ldw	r2,-40(fp)
   17738:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1773c:	e0bffc17 	ldw	r2,-16(fp)
   17740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   17744:	008010c4 	movi	r2,67
   17748:	00001106 	br	17790 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1774c:	e0bff817 	ldw	r2,-32(fp)
   17750:	10800058 	cmpnei	r2,r2,1
   17754:	1000061e 	bne	r2,zero,17770 <OSTaskDelReq+0x128>
   17758:	e0bff617 	ldw	r2,-40(fp)
   1775c:	e0bffd15 	stw	r2,-12(fp)
   17760:	e0bffd17 	ldw	r2,-12(fp)
   17764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17768:	00800f44 	movi	r2,61
   1776c:	00000806 	br	17790 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   17770:	e0bff817 	ldw	r2,-32(fp)
   17774:	00c00fc4 	movi	r3,63
   17778:	10c00dc5 	stb	r3,55(r2)
   1777c:	e0bff617 	ldw	r2,-40(fp)
   17780:	e0bffe15 	stw	r2,-8(fp)
   17784:	e0bffe17 	ldw	r2,-8(fp)
   17788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1778c:	0005883a 	mov	r2,zero
}
   17790:	e037883a 	mov	sp,fp
   17794:	df000017 	ldw	fp,0(sp)
   17798:	dec00104 	addi	sp,sp,4
   1779c:	f800283a 	ret

000177a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   177a0:	defff404 	addi	sp,sp,-48
   177a4:	dfc00b15 	stw	ra,44(sp)
   177a8:	df000a15 	stw	fp,40(sp)
   177ac:	df000a04 	addi	fp,sp,40
   177b0:	2005883a 	mov	r2,r4
   177b4:	e17ffe15 	stw	r5,-8(fp)
   177b8:	e1bfff15 	stw	r6,-4(fp)
   177bc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   177c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   177c4:	e0bfff17 	ldw	r2,-4(fp)
   177c8:	1000021e 	bne	r2,zero,177d4 <OSTaskNameGet+0x34>
        return (0);
   177cc:	0005883a 	mov	r2,zero
   177d0:	00005806 	br	17934 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   177d4:	e0bffd03 	ldbu	r2,-12(fp)
   177d8:	10800570 	cmpltui	r2,r2,21
   177dc:	1000081e 	bne	r2,zero,17800 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   177e0:	e0bffd03 	ldbu	r2,-12(fp)
   177e4:	10803fe0 	cmpeqi	r2,r2,255
   177e8:	1000051e 	bne	r2,zero,17800 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   177ec:	e0bfff17 	ldw	r2,-4(fp)
   177f0:	00c00a84 	movi	r3,42
   177f4:	10c00005 	stb	r3,0(r2)
            return (0);
   177f8:	0005883a 	mov	r2,zero
   177fc:	00004d06 	br	17934 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   17800:	e0bffe17 	ldw	r2,-8(fp)
   17804:	1000051e 	bne	r2,zero,1781c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   17808:	e0bfff17 	ldw	r2,-4(fp)
   1780c:	00c00304 	movi	r3,12
   17810:	10c00005 	stb	r3,0(r2)
        return (0);
   17814:	0005883a 	mov	r2,zero
   17818:	00004606 	br	17934 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1781c:	008000b4 	movhi	r2,2
   17820:	1082ba04 	addi	r2,r2,2792
   17824:	10800003 	ldbu	r2,0(r2)
   17828:	10803fcc 	andi	r2,r2,255
   1782c:	10000526 	beq	r2,zero,17844 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   17830:	e0bfff17 	ldw	r2,-4(fp)
   17834:	00c00444 	movi	r3,17
   17838:	10c00005 	stb	r3,0(r2)
        return (0);
   1783c:	0005883a 	mov	r2,zero
   17840:	00003c06 	br	17934 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17844:	0005303a 	rdctl	r2,status
   17848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1784c:	e0fff917 	ldw	r3,-28(fp)
   17850:	00bfff84 	movi	r2,-2
   17854:	1884703a 	and	r2,r3,r2
   17858:	1001703a 	wrctl	status,r2
  
  return context;
   1785c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17860:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   17864:	e0bffd03 	ldbu	r2,-12(fp)
   17868:	10803fd8 	cmpnei	r2,r2,255
   1786c:	1000051e 	bne	r2,zero,17884 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   17870:	008000b4 	movhi	r2,2
   17874:	1082bb04 	addi	r2,r2,2796
   17878:	10800017 	ldw	r2,0(r2)
   1787c:	10800c83 	ldbu	r2,50(r2)
   17880:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17884:	e0fffd03 	ldbu	r3,-12(fp)
   17888:	008000b4 	movhi	r2,2
   1788c:	109f4c04 	addi	r2,r2,32048
   17890:	18c7883a 	add	r3,r3,r3
   17894:	18c7883a 	add	r3,r3,r3
   17898:	10c5883a 	add	r2,r2,r3
   1789c:	10800017 	ldw	r2,0(r2)
   178a0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   178a4:	e0bff717 	ldw	r2,-36(fp)
   178a8:	1000091e 	bne	r2,zero,178d0 <OSTaskNameGet+0x130>
   178ac:	e0bff617 	ldw	r2,-40(fp)
   178b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178b4:	e0bffa17 	ldw	r2,-24(fp)
   178b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   178bc:	e0bfff17 	ldw	r2,-4(fp)
   178c0:	00c010c4 	movi	r3,67
   178c4:	10c00005 	stb	r3,0(r2)
        return (0);
   178c8:	0005883a 	mov	r2,zero
   178cc:	00001906 	br	17934 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   178d0:	e0bff717 	ldw	r2,-36(fp)
   178d4:	10800058 	cmpnei	r2,r2,1
   178d8:	1000091e 	bne	r2,zero,17900 <OSTaskNameGet+0x160>
   178dc:	e0bff617 	ldw	r2,-40(fp)
   178e0:	e0bffb15 	stw	r2,-20(fp)
   178e4:	e0bffb17 	ldw	r2,-20(fp)
   178e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   178ec:	e0bfff17 	ldw	r2,-4(fp)
   178f0:	00c010c4 	movi	r3,67
   178f4:	10c00005 	stb	r3,0(r2)
        return (0);
   178f8:	0005883a 	mov	r2,zero
   178fc:	00000d06 	br	17934 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   17900:	e0bff717 	ldw	r2,-36(fp)
   17904:	10801304 	addi	r2,r2,76
   17908:	e13ffe17 	ldw	r4,-8(fp)
   1790c:	100b883a 	mov	r5,r2
   17910:	00125a00 	call	125a0 <OS_StrCopy>
   17914:	e0bff805 	stb	r2,-32(fp)
   17918:	e0bff617 	ldw	r2,-40(fp)
   1791c:	e0bffc15 	stw	r2,-16(fp)
   17920:	e0bffc17 	ldw	r2,-16(fp)
   17924:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17928:	e0bfff17 	ldw	r2,-4(fp)
   1792c:	10000005 	stb	zero,0(r2)
    return (len);
   17930:	e0bff803 	ldbu	r2,-32(fp)
}
   17934:	e037883a 	mov	sp,fp
   17938:	dfc00117 	ldw	ra,4(sp)
   1793c:	df000017 	ldw	fp,0(sp)
   17940:	dec00204 	addi	sp,sp,8
   17944:	f800283a 	ret

00017948 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17948:	defff304 	addi	sp,sp,-52
   1794c:	dfc00c15 	stw	ra,48(sp)
   17950:	df000b15 	stw	fp,44(sp)
   17954:	df000b04 	addi	fp,sp,44
   17958:	2005883a 	mov	r2,r4
   1795c:	e17ffe15 	stw	r5,-8(fp)
   17960:	e1bfff15 	stw	r6,-4(fp)
   17964:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17968:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1796c:	e0bfff17 	ldw	r2,-4(fp)
   17970:	1000011e 	bne	r2,zero,17978 <OSTaskNameSet+0x30>
        return;
   17974:	00005f06 	br	17af4 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   17978:	e0bffd03 	ldbu	r2,-12(fp)
   1797c:	10800570 	cmpltui	r2,r2,21
   17980:	1000071e 	bne	r2,zero,179a0 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   17984:	e0bffd03 	ldbu	r2,-12(fp)
   17988:	10803fe0 	cmpeqi	r2,r2,255
   1798c:	1000041e 	bne	r2,zero,179a0 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   17990:	e0bfff17 	ldw	r2,-4(fp)
   17994:	00c00a84 	movi	r3,42
   17998:	10c00005 	stb	r3,0(r2)
            return;
   1799c:	00005506 	br	17af4 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   179a0:	e0bffe17 	ldw	r2,-8(fp)
   179a4:	1000041e 	bne	r2,zero,179b8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   179a8:	e0bfff17 	ldw	r2,-4(fp)
   179ac:	00c00304 	movi	r3,12
   179b0:	10c00005 	stb	r3,0(r2)
        return;
   179b4:	00004f06 	br	17af4 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   179b8:	008000b4 	movhi	r2,2
   179bc:	1082ba04 	addi	r2,r2,2792
   179c0:	10800003 	ldbu	r2,0(r2)
   179c4:	10803fcc 	andi	r2,r2,255
   179c8:	10000426 	beq	r2,zero,179dc <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   179cc:	e0bfff17 	ldw	r2,-4(fp)
   179d0:	00c00484 	movi	r3,18
   179d4:	10c00005 	stb	r3,0(r2)
        return;
   179d8:	00004606 	br	17af4 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179dc:	0005303a 	rdctl	r2,status
   179e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179e4:	e0fff817 	ldw	r3,-32(fp)
   179e8:	00bfff84 	movi	r2,-2
   179ec:	1884703a 	and	r2,r3,r2
   179f0:	1001703a 	wrctl	status,r2
  
  return context;
   179f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   179f8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   179fc:	e0bffd03 	ldbu	r2,-12(fp)
   17a00:	10803fd8 	cmpnei	r2,r2,255
   17a04:	1000051e 	bne	r2,zero,17a1c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   17a08:	008000b4 	movhi	r2,2
   17a0c:	1082bb04 	addi	r2,r2,2796
   17a10:	10800017 	ldw	r2,0(r2)
   17a14:	10800c83 	ldbu	r2,50(r2)
   17a18:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17a1c:	e0fffd03 	ldbu	r3,-12(fp)
   17a20:	008000b4 	movhi	r2,2
   17a24:	109f4c04 	addi	r2,r2,32048
   17a28:	18c7883a 	add	r3,r3,r3
   17a2c:	18c7883a 	add	r3,r3,r3
   17a30:	10c5883a 	add	r2,r2,r3
   17a34:	10800017 	ldw	r2,0(r2)
   17a38:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   17a3c:	e0bff617 	ldw	r2,-40(fp)
   17a40:	1000081e 	bne	r2,zero,17a64 <OSTaskNameSet+0x11c>
   17a44:	e0bff517 	ldw	r2,-44(fp)
   17a48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a4c:	e0bff917 	ldw	r2,-28(fp)
   17a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	00c010c4 	movi	r3,67
   17a5c:	10c00005 	stb	r3,0(r2)
        return;
   17a60:	00002406 	br	17af4 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   17a64:	e0bff617 	ldw	r2,-40(fp)
   17a68:	10800058 	cmpnei	r2,r2,1
   17a6c:	1000081e 	bne	r2,zero,17a90 <OSTaskNameSet+0x148>
   17a70:	e0bff517 	ldw	r2,-44(fp)
   17a74:	e0bffa15 	stw	r2,-24(fp)
   17a78:	e0bffa17 	ldw	r2,-24(fp)
   17a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17a80:	e0bfff17 	ldw	r2,-4(fp)
   17a84:	00c010c4 	movi	r3,67
   17a88:	10c00005 	stb	r3,0(r2)
        return;
   17a8c:	00001906 	br	17af4 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   17a90:	e13ffe17 	ldw	r4,-8(fp)
   17a94:	00126140 	call	12614 <OS_StrLen>
   17a98:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17a9c:	e0bff703 	ldbu	r2,-36(fp)
   17aa0:	10800830 	cmpltui	r2,r2,32
   17aa4:	1000081e 	bne	r2,zero,17ac8 <OSTaskNameSet+0x180>
   17aa8:	e0bff517 	ldw	r2,-44(fp)
   17aac:	e0bffb15 	stw	r2,-20(fp)
   17ab0:	e0bffb17 	ldw	r2,-20(fp)
   17ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17ab8:	e0bfff17 	ldw	r2,-4(fp)
   17abc:	00c01044 	movi	r3,65
   17ac0:	10c00005 	stb	r3,0(r2)
        return;
   17ac4:	00000b06 	br	17af4 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17ac8:	e0bff617 	ldw	r2,-40(fp)
   17acc:	10801304 	addi	r2,r2,76
   17ad0:	1009883a 	mov	r4,r2
   17ad4:	e17ffe17 	ldw	r5,-8(fp)
   17ad8:	00125a00 	call	125a0 <OS_StrCopy>
   17adc:	e0bff517 	ldw	r2,-44(fp)
   17ae0:	e0bffc15 	stw	r2,-16(fp)
   17ae4:	e0bffc17 	ldw	r2,-16(fp)
   17ae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17aec:	e0bfff17 	ldw	r2,-4(fp)
   17af0:	10000005 	stb	zero,0(r2)
}
   17af4:	e037883a 	mov	sp,fp
   17af8:	dfc00117 	ldw	ra,4(sp)
   17afc:	df000017 	ldw	fp,0(sp)
   17b00:	dec00204 	addi	sp,sp,8
   17b04:	f800283a 	ret

00017b08 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17b08:	defff404 	addi	sp,sp,-48
   17b0c:	dfc00b15 	stw	ra,44(sp)
   17b10:	df000a15 	stw	fp,40(sp)
   17b14:	df000a04 	addi	fp,sp,40
   17b18:	2005883a 	mov	r2,r4
   17b1c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17b20:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   17b24:	e0bfff03 	ldbu	r2,-4(fp)
   17b28:	10800530 	cmpltui	r2,r2,20
   17b2c:	1000021e 	bne	r2,zero,17b38 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17b30:	00800a84 	movi	r2,42
   17b34:	00006d06 	br	17cec <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b38:	0005303a 	rdctl	r2,status
   17b3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b40:	e0fff817 	ldw	r3,-32(fp)
   17b44:	00bfff84 	movi	r2,-2
   17b48:	1884703a 	and	r2,r3,r2
   17b4c:	1001703a 	wrctl	status,r2
  
  return context;
   17b50:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17b54:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17b58:	e0ffff03 	ldbu	r3,-4(fp)
   17b5c:	008000b4 	movhi	r2,2
   17b60:	109f4c04 	addi	r2,r2,32048
   17b64:	18c7883a 	add	r3,r3,r3
   17b68:	18c7883a 	add	r3,r3,r3
   17b6c:	10c5883a 	add	r2,r2,r3
   17b70:	10800017 	ldw	r2,0(r2)
   17b74:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   17b78:	e0bff717 	ldw	r2,-36(fp)
   17b7c:	1000061e 	bne	r2,zero,17b98 <OSTaskResume+0x90>
   17b80:	e0bff617 	ldw	r2,-40(fp)
   17b84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b88:	e0bff917 	ldw	r2,-28(fp)
   17b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17b90:	00801184 	movi	r2,70
   17b94:	00005506 	br	17cec <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   17b98:	e0bff717 	ldw	r2,-36(fp)
   17b9c:	10800058 	cmpnei	r2,r2,1
   17ba0:	1000061e 	bne	r2,zero,17bbc <OSTaskResume+0xb4>
   17ba4:	e0bff617 	ldw	r2,-40(fp)
   17ba8:	e0bffa15 	stw	r2,-24(fp)
   17bac:	e0bffa17 	ldw	r2,-24(fp)
   17bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17bb4:	008010c4 	movi	r2,67
   17bb8:	00004c06 	br	17cec <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17bbc:	e0bff717 	ldw	r2,-36(fp)
   17bc0:	10800c03 	ldbu	r2,48(r2)
   17bc4:	10803fcc 	andi	r2,r2,255
   17bc8:	1080020c 	andi	r2,r2,8
   17bcc:	10004226 	beq	r2,zero,17cd8 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17bd0:	e0bff717 	ldw	r2,-36(fp)
   17bd4:	10c00c03 	ldbu	r3,48(r2)
   17bd8:	00bffdc4 	movi	r2,-9
   17bdc:	1884703a 	and	r2,r3,r2
   17be0:	1007883a 	mov	r3,r2
   17be4:	e0bff717 	ldw	r2,-36(fp)
   17be8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17bec:	e0bff717 	ldw	r2,-36(fp)
   17bf0:	10800c03 	ldbu	r2,48(r2)
   17bf4:	10803fcc 	andi	r2,r2,255
   17bf8:	1000311e 	bne	r2,zero,17cc0 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   17bfc:	e0bff717 	ldw	r2,-36(fp)
   17c00:	10800b8b 	ldhu	r2,46(r2)
   17c04:	10bfffcc 	andi	r2,r2,65535
   17c08:	1000281e 	bne	r2,zero,17cac <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   17c0c:	e0bff717 	ldw	r2,-36(fp)
   17c10:	10c00d83 	ldbu	r3,54(r2)
   17c14:	008000b4 	movhi	r2,2
   17c18:	1082b804 	addi	r2,r2,2784
   17c1c:	10800003 	ldbu	r2,0(r2)
   17c20:	1884b03a 	or	r2,r3,r2
   17c24:	1007883a 	mov	r3,r2
   17c28:	008000b4 	movhi	r2,2
   17c2c:	1082b804 	addi	r2,r2,2784
   17c30:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17c34:	e0bff717 	ldw	r2,-36(fp)
   17c38:	10800d03 	ldbu	r2,52(r2)
   17c3c:	10c03fcc 	andi	r3,r2,255
   17c40:	e0bff717 	ldw	r2,-36(fp)
   17c44:	10800d03 	ldbu	r2,52(r2)
   17c48:	11003fcc 	andi	r4,r2,255
   17c4c:	008000b4 	movhi	r2,2
   17c50:	1082b844 	addi	r2,r2,2785
   17c54:	1105883a 	add	r2,r2,r4
   17c58:	11000003 	ldbu	r4,0(r2)
   17c5c:	e0bff717 	ldw	r2,-36(fp)
   17c60:	10800d43 	ldbu	r2,53(r2)
   17c64:	2084b03a 	or	r2,r4,r2
   17c68:	1009883a 	mov	r4,r2
   17c6c:	008000b4 	movhi	r2,2
   17c70:	1082b844 	addi	r2,r2,2785
   17c74:	10c5883a 	add	r2,r2,r3
   17c78:	11000005 	stb	r4,0(r2)
   17c7c:	e0bff617 	ldw	r2,-40(fp)
   17c80:	e0bffb15 	stw	r2,-20(fp)
   17c84:	e0bffb17 	ldw	r2,-20(fp)
   17c88:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   17c8c:	008000b4 	movhi	r2,2
   17c90:	1082ac44 	addi	r2,r2,2737
   17c94:	10800003 	ldbu	r2,0(r2)
   17c98:	10803fcc 	andi	r2,r2,255
   17c9c:	10800058 	cmpnei	r2,r2,1
   17ca0:	10000b1e 	bne	r2,zero,17cd0 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   17ca4:	00124640 	call	12464 <OS_Sched>
   17ca8:	00000906 	br	17cd0 <OSTaskResume+0x1c8>
   17cac:	e0bff617 	ldw	r2,-40(fp)
   17cb0:	e0bffc15 	stw	r2,-16(fp)
   17cb4:	e0bffc17 	ldw	r2,-16(fp)
   17cb8:	1001703a 	wrctl	status,r2
   17cbc:	00000406 	br	17cd0 <OSTaskResume+0x1c8>
   17cc0:	e0bff617 	ldw	r2,-40(fp)
   17cc4:	e0bffd15 	stw	r2,-12(fp)
   17cc8:	e0bffd17 	ldw	r2,-12(fp)
   17ccc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   17cd0:	0005883a 	mov	r2,zero
   17cd4:	00000506 	br	17cec <OSTaskResume+0x1e4>
   17cd8:	e0bff617 	ldw	r2,-40(fp)
   17cdc:	e0bffe15 	stw	r2,-8(fp)
   17ce0:	e0bffe17 	ldw	r2,-8(fp)
   17ce4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17ce8:	00801104 	movi	r2,68
}
   17cec:	e037883a 	mov	sp,fp
   17cf0:	dfc00117 	ldw	ra,4(sp)
   17cf4:	df000017 	ldw	fp,0(sp)
   17cf8:	dec00204 	addi	sp,sp,8
   17cfc:	f800283a 	ret

00017d00 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17d00:	defff304 	addi	sp,sp,-52
   17d04:	df000c15 	stw	fp,48(sp)
   17d08:	df000c04 	addi	fp,sp,48
   17d0c:	2005883a 	mov	r2,r4
   17d10:	e17fff15 	stw	r5,-4(fp)
   17d14:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17d18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   17d1c:	e0bffe03 	ldbu	r2,-8(fp)
   17d20:	10800570 	cmpltui	r2,r2,21
   17d24:	1000051e 	bne	r2,zero,17d3c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17d28:	e0bffe03 	ldbu	r2,-8(fp)
   17d2c:	10803fe0 	cmpeqi	r2,r2,255
   17d30:	1000021e 	bne	r2,zero,17d3c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   17d34:	00800a84 	movi	r2,42
   17d38:	00005f06 	br	17eb8 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   17d3c:	e0bfff17 	ldw	r2,-4(fp)
   17d40:	1000021e 	bne	r2,zero,17d4c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   17d44:	00800244 	movi	r2,9
   17d48:	00005b06 	br	17eb8 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   17d4c:	e0bfff17 	ldw	r2,-4(fp)
   17d50:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   17d54:	e0bfff17 	ldw	r2,-4(fp)
   17d58:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d5c:	0005303a 	rdctl	r2,status
   17d60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d64:	e0fff917 	ldw	r3,-28(fp)
   17d68:	00bfff84 	movi	r2,-2
   17d6c:	1884703a 	and	r2,r3,r2
   17d70:	1001703a 	wrctl	status,r2
  
  return context;
   17d74:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17d78:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   17d7c:	e0bffe03 	ldbu	r2,-8(fp)
   17d80:	10803fd8 	cmpnei	r2,r2,255
   17d84:	1000051e 	bne	r2,zero,17d9c <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17d88:	008000b4 	movhi	r2,2
   17d8c:	1082bb04 	addi	r2,r2,2796
   17d90:	10800017 	ldw	r2,0(r2)
   17d94:	10800c83 	ldbu	r2,50(r2)
   17d98:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17d9c:	e0fffe03 	ldbu	r3,-8(fp)
   17da0:	008000b4 	movhi	r2,2
   17da4:	109f4c04 	addi	r2,r2,32048
   17da8:	18c7883a 	add	r3,r3,r3
   17dac:	18c7883a 	add	r3,r3,r3
   17db0:	10c5883a 	add	r2,r2,r3
   17db4:	10800017 	ldw	r2,0(r2)
   17db8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   17dbc:	e0bff717 	ldw	r2,-36(fp)
   17dc0:	1000061e 	bne	r2,zero,17ddc <OSTaskStkChk+0xdc>
   17dc4:	e0bff617 	ldw	r2,-40(fp)
   17dc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dcc:	e0bffa17 	ldw	r2,-24(fp)
   17dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17dd4:	008010c4 	movi	r2,67
   17dd8:	00003706 	br	17eb8 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17ddc:	e0bff717 	ldw	r2,-36(fp)
   17de0:	10800058 	cmpnei	r2,r2,1
   17de4:	1000061e 	bne	r2,zero,17e00 <OSTaskStkChk+0x100>
   17de8:	e0bff617 	ldw	r2,-40(fp)
   17dec:	e0bffb15 	stw	r2,-20(fp)
   17df0:	e0bffb17 	ldw	r2,-20(fp)
   17df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17df8:	008010c4 	movi	r2,67
   17dfc:	00002e06 	br	17eb8 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17e00:	e0bff717 	ldw	r2,-36(fp)
   17e04:	1080040b 	ldhu	r2,16(r2)
   17e08:	10bfffcc 	andi	r2,r2,65535
   17e0c:	1080004c 	andi	r2,r2,1
   17e10:	1000061e 	bne	r2,zero,17e2c <OSTaskStkChk+0x12c>
   17e14:	e0bff617 	ldw	r2,-40(fp)
   17e18:	e0bffc15 	stw	r2,-16(fp)
   17e1c:	e0bffc17 	ldw	r2,-16(fp)
   17e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17e24:	00801144 	movi	r2,69
   17e28:	00002306 	br	17eb8 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   17e2c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   17e30:	e0bff717 	ldw	r2,-36(fp)
   17e34:	10800317 	ldw	r2,12(r2)
   17e38:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17e3c:	e0bff717 	ldw	r2,-36(fp)
   17e40:	10800217 	ldw	r2,8(r2)
   17e44:	e0bff415 	stw	r2,-48(fp)
   17e48:	e0bff617 	ldw	r2,-40(fp)
   17e4c:	e0bffd15 	stw	r2,-12(fp)
   17e50:	e0bffd17 	ldw	r2,-12(fp)
   17e54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17e58:	00000306 	br	17e68 <OSTaskStkChk+0x168>
        nfree++;
   17e5c:	e0bff517 	ldw	r2,-44(fp)
   17e60:	10800044 	addi	r2,r2,1
   17e64:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17e68:	e0bff417 	ldw	r2,-48(fp)
   17e6c:	10c00104 	addi	r3,r2,4
   17e70:	e0fff415 	stw	r3,-48(fp)
   17e74:	10800017 	ldw	r2,0(r2)
   17e78:	103ff826 	beq	r2,zero,17e5c <__alt_mem_Flash_flash_data+0xf4017e5c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17e7c:	e0bff517 	ldw	r2,-44(fp)
   17e80:	1085883a 	add	r2,r2,r2
   17e84:	1085883a 	add	r2,r2,r2
   17e88:	1007883a 	mov	r3,r2
   17e8c:	e0bfff17 	ldw	r2,-4(fp)
   17e90:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17e94:	e0fff817 	ldw	r3,-32(fp)
   17e98:	e0bff517 	ldw	r2,-44(fp)
   17e9c:	1885c83a 	sub	r2,r3,r2
   17ea0:	1085883a 	add	r2,r2,r2
   17ea4:	1085883a 	add	r2,r2,r2
   17ea8:	1007883a 	mov	r3,r2
   17eac:	e0bfff17 	ldw	r2,-4(fp)
   17eb0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17eb4:	0005883a 	mov	r2,zero
}
   17eb8:	e037883a 	mov	sp,fp
   17ebc:	df000017 	ldw	fp,0(sp)
   17ec0:	dec00104 	addi	sp,sp,4
   17ec4:	f800283a 	ret

00017ec8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17ec8:	defff504 	addi	sp,sp,-44
   17ecc:	dfc00a15 	stw	ra,40(sp)
   17ed0:	df000915 	stw	fp,36(sp)
   17ed4:	df000904 	addi	fp,sp,36
   17ed8:	2005883a 	mov	r2,r4
   17edc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17ee0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17ee4:	e0bfff03 	ldbu	r2,-4(fp)
   17ee8:	10800518 	cmpnei	r2,r2,20
   17eec:	1000021e 	bne	r2,zero,17ef8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17ef0:	008011c4 	movi	r2,71
   17ef4:	00007406 	br	180c8 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17ef8:	e0bfff03 	ldbu	r2,-4(fp)
   17efc:	10800530 	cmpltui	r2,r2,20
   17f00:	1000051e 	bne	r2,zero,17f18 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17f04:	e0bfff03 	ldbu	r2,-4(fp)
   17f08:	10803fe0 	cmpeqi	r2,r2,255
   17f0c:	1000021e 	bne	r2,zero,17f18 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17f10:	00800a84 	movi	r2,42
   17f14:	00006c06 	br	180c8 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f18:	0005303a 	rdctl	r2,status
   17f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f20:	e0fffb17 	ldw	r3,-20(fp)
   17f24:	00bfff84 	movi	r2,-2
   17f28:	1884703a 	and	r2,r3,r2
   17f2c:	1001703a 	wrctl	status,r2
  
  return context;
   17f30:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   17f34:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17f38:	e0bfff03 	ldbu	r2,-4(fp)
   17f3c:	10803fd8 	cmpnei	r2,r2,255
   17f40:	1000081e 	bne	r2,zero,17f64 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17f44:	008000b4 	movhi	r2,2
   17f48:	1082bb04 	addi	r2,r2,2796
   17f4c:	10800017 	ldw	r2,0(r2)
   17f50:	10800c83 	ldbu	r2,50(r2)
   17f54:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17f58:	00800044 	movi	r2,1
   17f5c:	e0bff705 	stb	r2,-36(fp)
   17f60:	00000b06 	br	17f90 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   17f64:	008000b4 	movhi	r2,2
   17f68:	1082bb04 	addi	r2,r2,2796
   17f6c:	10800017 	ldw	r2,0(r2)
   17f70:	10800c83 	ldbu	r2,50(r2)
   17f74:	10c03fcc 	andi	r3,r2,255
   17f78:	e0bfff03 	ldbu	r2,-4(fp)
   17f7c:	1880031e 	bne	r3,r2,17f8c <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   17f80:	00800044 	movi	r2,1
   17f84:	e0bff705 	stb	r2,-36(fp)
   17f88:	00000106 	br	17f90 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17f8c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17f90:	e0ffff03 	ldbu	r3,-4(fp)
   17f94:	008000b4 	movhi	r2,2
   17f98:	109f4c04 	addi	r2,r2,32048
   17f9c:	18c7883a 	add	r3,r3,r3
   17fa0:	18c7883a 	add	r3,r3,r3
   17fa4:	10c5883a 	add	r2,r2,r3
   17fa8:	10800017 	ldw	r2,0(r2)
   17fac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   17fb0:	e0bff917 	ldw	r2,-28(fp)
   17fb4:	1000061e 	bne	r2,zero,17fd0 <OSTaskSuspend+0x108>
   17fb8:	e0bff817 	ldw	r2,-32(fp)
   17fbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fc0:	e0bffc17 	ldw	r2,-16(fp)
   17fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   17fc8:	00801204 	movi	r2,72
   17fcc:	00003e06 	br	180c8 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   17fd0:	e0bff917 	ldw	r2,-28(fp)
   17fd4:	10800058 	cmpnei	r2,r2,1
   17fd8:	1000061e 	bne	r2,zero,17ff4 <OSTaskSuspend+0x12c>
   17fdc:	e0bff817 	ldw	r2,-32(fp)
   17fe0:	e0bffd15 	stw	r2,-12(fp)
   17fe4:	e0bffd17 	ldw	r2,-12(fp)
   17fe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17fec:	008010c4 	movi	r2,67
   17ff0:	00003506 	br	180c8 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   17ff4:	e0bff917 	ldw	r2,-28(fp)
   17ff8:	10800d03 	ldbu	r2,52(r2)
   17ffc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   18000:	e0fffa03 	ldbu	r3,-24(fp)
   18004:	e13ffa03 	ldbu	r4,-24(fp)
   18008:	008000b4 	movhi	r2,2
   1800c:	1082b844 	addi	r2,r2,2785
   18010:	1105883a 	add	r2,r2,r4
   18014:	10800003 	ldbu	r2,0(r2)
   18018:	1009883a 	mov	r4,r2
   1801c:	e0bff917 	ldw	r2,-28(fp)
   18020:	10800d43 	ldbu	r2,53(r2)
   18024:	0084303a 	nor	r2,zero,r2
   18028:	2084703a 	and	r2,r4,r2
   1802c:	1009883a 	mov	r4,r2
   18030:	008000b4 	movhi	r2,2
   18034:	1082b844 	addi	r2,r2,2785
   18038:	10c5883a 	add	r2,r2,r3
   1803c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   18040:	e0fffa03 	ldbu	r3,-24(fp)
   18044:	008000b4 	movhi	r2,2
   18048:	1082b844 	addi	r2,r2,2785
   1804c:	10c5883a 	add	r2,r2,r3
   18050:	10800003 	ldbu	r2,0(r2)
   18054:	10803fcc 	andi	r2,r2,255
   18058:	10000c1e 	bne	r2,zero,1808c <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1805c:	e0bff917 	ldw	r2,-28(fp)
   18060:	10800d83 	ldbu	r2,54(r2)
   18064:	0084303a 	nor	r2,zero,r2
   18068:	1007883a 	mov	r3,r2
   1806c:	008000b4 	movhi	r2,2
   18070:	1082b804 	addi	r2,r2,2784
   18074:	10800003 	ldbu	r2,0(r2)
   18078:	1884703a 	and	r2,r3,r2
   1807c:	1007883a 	mov	r3,r2
   18080:	008000b4 	movhi	r2,2
   18084:	1082b804 	addi	r2,r2,2784
   18088:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1808c:	e0bff917 	ldw	r2,-28(fp)
   18090:	10800c03 	ldbu	r2,48(r2)
   18094:	10800214 	ori	r2,r2,8
   18098:	1007883a 	mov	r3,r2
   1809c:	e0bff917 	ldw	r2,-28(fp)
   180a0:	10c00c05 	stb	r3,48(r2)
   180a4:	e0bff817 	ldw	r2,-32(fp)
   180a8:	e0bffe15 	stw	r2,-8(fp)
   180ac:	e0bffe17 	ldw	r2,-8(fp)
   180b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   180b4:	e0bff703 	ldbu	r2,-36(fp)
   180b8:	10800058 	cmpnei	r2,r2,1
   180bc:	1000011e 	bne	r2,zero,180c4 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   180c0:	00124640 	call	12464 <OS_Sched>
    }
    return (OS_ERR_NONE);
   180c4:	0005883a 	mov	r2,zero
}
   180c8:	e037883a 	mov	sp,fp
   180cc:	dfc00117 	ldw	ra,4(sp)
   180d0:	df000017 	ldw	fp,0(sp)
   180d4:	dec00204 	addi	sp,sp,8
   180d8:	f800283a 	ret

000180dc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   180dc:	defff604 	addi	sp,sp,-40
   180e0:	dfc00915 	stw	ra,36(sp)
   180e4:	df000815 	stw	fp,32(sp)
   180e8:	df000804 	addi	fp,sp,32
   180ec:	2005883a 	mov	r2,r4
   180f0:	e17fff15 	stw	r5,-4(fp)
   180f4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   180f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   180fc:	e0bffe03 	ldbu	r2,-8(fp)
   18100:	10800570 	cmpltui	r2,r2,21
   18104:	1000051e 	bne	r2,zero,1811c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   18108:	e0bffe03 	ldbu	r2,-8(fp)
   1810c:	10803fe0 	cmpeqi	r2,r2,255
   18110:	1000021e 	bne	r2,zero,1811c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   18114:	00800a84 	movi	r2,42
   18118:	00003606 	br	181f4 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1811c:	e0bfff17 	ldw	r2,-4(fp)
   18120:	1000021e 	bne	r2,zero,1812c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   18124:	00800244 	movi	r2,9
   18128:	00003206 	br	181f4 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1812c:	0005303a 	rdctl	r2,status
   18130:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18134:	e0fffa17 	ldw	r3,-24(fp)
   18138:	00bfff84 	movi	r2,-2
   1813c:	1884703a 	and	r2,r3,r2
   18140:	1001703a 	wrctl	status,r2
  
  return context;
   18144:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18148:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1814c:	e0bffe03 	ldbu	r2,-8(fp)
   18150:	10803fd8 	cmpnei	r2,r2,255
   18154:	1000051e 	bne	r2,zero,1816c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   18158:	008000b4 	movhi	r2,2
   1815c:	1082bb04 	addi	r2,r2,2796
   18160:	10800017 	ldw	r2,0(r2)
   18164:	10800c83 	ldbu	r2,50(r2)
   18168:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1816c:	e0fffe03 	ldbu	r3,-8(fp)
   18170:	008000b4 	movhi	r2,2
   18174:	109f4c04 	addi	r2,r2,32048
   18178:	18c7883a 	add	r3,r3,r3
   1817c:	18c7883a 	add	r3,r3,r3
   18180:	10c5883a 	add	r2,r2,r3
   18184:	10800017 	ldw	r2,0(r2)
   18188:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1818c:	e0bff917 	ldw	r2,-28(fp)
   18190:	1000061e 	bne	r2,zero,181ac <OSTaskQuery+0xd0>
   18194:	e0bff817 	ldw	r2,-32(fp)
   18198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1819c:	e0bffb17 	ldw	r2,-20(fp)
   181a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   181a4:	00800a44 	movi	r2,41
   181a8:	00001206 	br	181f4 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   181ac:	e0bff917 	ldw	r2,-28(fp)
   181b0:	10800058 	cmpnei	r2,r2,1
   181b4:	1000061e 	bne	r2,zero,181d0 <OSTaskQuery+0xf4>
   181b8:	e0bff817 	ldw	r2,-32(fp)
   181bc:	e0bffc15 	stw	r2,-16(fp)
   181c0:	e0bffc17 	ldw	r2,-16(fp)
   181c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   181c8:	008010c4 	movi	r2,67
   181cc:	00000906 	br	181f4 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   181d0:	e13fff17 	ldw	r4,-4(fp)
   181d4:	e17ff917 	ldw	r5,-28(fp)
   181d8:	01801b04 	movi	r6,108
   181dc:	00124000 	call	12400 <OS_MemCopy>
   181e0:	e0bff817 	ldw	r2,-32(fp)
   181e4:	e0bffd15 	stw	r2,-12(fp)
   181e8:	e0bffd17 	ldw	r2,-12(fp)
   181ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   181f0:	0005883a 	mov	r2,zero
}
   181f4:	e037883a 	mov	sp,fp
   181f8:	dfc00117 	ldw	ra,4(sp)
   181fc:	df000017 	ldw	fp,0(sp)
   18200:	dec00204 	addi	sp,sp,8
   18204:	f800283a 	ret

00018208 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   18208:	defffc04 	addi	sp,sp,-16
   1820c:	df000315 	stw	fp,12(sp)
   18210:	df000304 	addi	fp,sp,12
   18214:	e13ffd15 	stw	r4,-12(fp)
   18218:	e17ffe15 	stw	r5,-8(fp)
   1821c:	3005883a 	mov	r2,r6
   18220:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   18224:	e0bfff0b 	ldhu	r2,-4(fp)
   18228:	1080004c 	andi	r2,r2,1
   1822c:	10000d26 	beq	r2,zero,18264 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   18230:	e0bfff0b 	ldhu	r2,-4(fp)
   18234:	1080008c 	andi	r2,r2,2
   18238:	10000a26 	beq	r2,zero,18264 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1823c:	00000706 	br	1825c <OS_TaskStkClr+0x54>
                size--;
   18240:	e0bffe17 	ldw	r2,-8(fp)
   18244:	10bfffc4 	addi	r2,r2,-1
   18248:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1824c:	e0bffd17 	ldw	r2,-12(fp)
   18250:	10c00104 	addi	r3,r2,4
   18254:	e0fffd15 	stw	r3,-12(fp)
   18258:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1825c:	e0bffe17 	ldw	r2,-8(fp)
   18260:	103ff71e 	bne	r2,zero,18240 <__alt_mem_Flash_flash_data+0xf4018240>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   18264:	e037883a 	mov	sp,fp
   18268:	df000017 	ldw	fp,0(sp)
   1826c:	dec00104 	addi	sp,sp,4
   18270:	f800283a 	ret

00018274 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   18274:	defff904 	addi	sp,sp,-28
   18278:	dfc00615 	stw	ra,24(sp)
   1827c:	df000515 	stw	fp,20(sp)
   18280:	df000504 	addi	fp,sp,20
   18284:	2005883a 	mov	r2,r4
   18288:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1828c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18290:	008000b4 	movhi	r2,2
   18294:	1082ba04 	addi	r2,r2,2792
   18298:	10800003 	ldbu	r2,0(r2)
   1829c:	10803fcc 	andi	r2,r2,255
   182a0:	10000126 	beq	r2,zero,182a8 <OSTimeDly+0x34>
        return;
   182a4:	00004006 	br	183a8 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   182a8:	e0bfff0b 	ldhu	r2,-4(fp)
   182ac:	10003e26 	beq	r2,zero,183a8 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182b0:	0005303a 	rdctl	r2,status
   182b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182b8:	e0fffd17 	ldw	r3,-12(fp)
   182bc:	00bfff84 	movi	r2,-2
   182c0:	1884703a 	and	r2,r3,r2
   182c4:	1001703a 	wrctl	status,r2
  
  return context;
   182c8:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   182cc:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   182d0:	008000b4 	movhi	r2,2
   182d4:	1082bb04 	addi	r2,r2,2796
   182d8:	10800017 	ldw	r2,0(r2)
   182dc:	10800d03 	ldbu	r2,52(r2)
   182e0:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   182e4:	e0fffc03 	ldbu	r3,-16(fp)
   182e8:	e13ffc03 	ldbu	r4,-16(fp)
   182ec:	008000b4 	movhi	r2,2
   182f0:	1082b844 	addi	r2,r2,2785
   182f4:	1105883a 	add	r2,r2,r4
   182f8:	10800003 	ldbu	r2,0(r2)
   182fc:	1009883a 	mov	r4,r2
   18300:	008000b4 	movhi	r2,2
   18304:	1082bb04 	addi	r2,r2,2796
   18308:	10800017 	ldw	r2,0(r2)
   1830c:	10800d43 	ldbu	r2,53(r2)
   18310:	0084303a 	nor	r2,zero,r2
   18314:	2084703a 	and	r2,r4,r2
   18318:	1009883a 	mov	r4,r2
   1831c:	008000b4 	movhi	r2,2
   18320:	1082b844 	addi	r2,r2,2785
   18324:	10c5883a 	add	r2,r2,r3
   18328:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1832c:	e0fffc03 	ldbu	r3,-16(fp)
   18330:	008000b4 	movhi	r2,2
   18334:	1082b844 	addi	r2,r2,2785
   18338:	10c5883a 	add	r2,r2,r3
   1833c:	10800003 	ldbu	r2,0(r2)
   18340:	10803fcc 	andi	r2,r2,255
   18344:	10000e1e 	bne	r2,zero,18380 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   18348:	008000b4 	movhi	r2,2
   1834c:	1082bb04 	addi	r2,r2,2796
   18350:	10800017 	ldw	r2,0(r2)
   18354:	10800d83 	ldbu	r2,54(r2)
   18358:	0084303a 	nor	r2,zero,r2
   1835c:	1007883a 	mov	r3,r2
   18360:	008000b4 	movhi	r2,2
   18364:	1082b804 	addi	r2,r2,2784
   18368:	10800003 	ldbu	r2,0(r2)
   1836c:	1884703a 	and	r2,r3,r2
   18370:	1007883a 	mov	r3,r2
   18374:	008000b4 	movhi	r2,2
   18378:	1082b804 	addi	r2,r2,2784
   1837c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   18380:	008000b4 	movhi	r2,2
   18384:	1082bb04 	addi	r2,r2,2796
   18388:	10800017 	ldw	r2,0(r2)
   1838c:	e0ffff0b 	ldhu	r3,-4(fp)
   18390:	10c00b8d 	sth	r3,46(r2)
   18394:	e0bffb17 	ldw	r2,-20(fp)
   18398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1839c:	e0bffe17 	ldw	r2,-8(fp)
   183a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   183a4:	00124640 	call	12464 <OS_Sched>
    }
}
   183a8:	e037883a 	mov	sp,fp
   183ac:	dfc00117 	ldw	ra,4(sp)
   183b0:	df000017 	ldw	fp,0(sp)
   183b4:	dec00204 	addi	sp,sp,8
   183b8:	f800283a 	ret

000183bc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   183bc:	defff804 	addi	sp,sp,-32
   183c0:	dfc00715 	stw	ra,28(sp)
   183c4:	df000615 	stw	fp,24(sp)
   183c8:	df000604 	addi	fp,sp,24
   183cc:	2015883a 	mov	r10,r4
   183d0:	2809883a 	mov	r4,r5
   183d4:	3007883a 	mov	r3,r6
   183d8:	3805883a 	mov	r2,r7
   183dc:	e2bffc05 	stb	r10,-16(fp)
   183e0:	e13ffd05 	stb	r4,-12(fp)
   183e4:	e0fffe05 	stb	r3,-8(fp)
   183e8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   183ec:	008000b4 	movhi	r2,2
   183f0:	1082ba04 	addi	r2,r2,2792
   183f4:	10800003 	ldbu	r2,0(r2)
   183f8:	10803fcc 	andi	r2,r2,255
   183fc:	10000226 	beq	r2,zero,18408 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   18400:	00801544 	movi	r2,85
   18404:	00004206 	br	18510 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   18408:	e0bffc03 	ldbu	r2,-16(fp)
   1840c:	1000081e 	bne	r2,zero,18430 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   18410:	e0bffd03 	ldbu	r2,-12(fp)
   18414:	1000061e 	bne	r2,zero,18430 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   18418:	e0bffe03 	ldbu	r2,-8(fp)
   1841c:	1000041e 	bne	r2,zero,18430 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   18420:	e0bfff0b 	ldhu	r2,-4(fp)
   18424:	1000021e 	bne	r2,zero,18430 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   18428:	00801504 	movi	r2,84
   1842c:	00003806 	br	18510 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   18430:	e0bffd03 	ldbu	r2,-12(fp)
   18434:	10800f30 	cmpltui	r2,r2,60
   18438:	1000021e 	bne	r2,zero,18444 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1843c:	00801444 	movi	r2,81
   18440:	00003306 	br	18510 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   18444:	e0bffe03 	ldbu	r2,-8(fp)
   18448:	10800f30 	cmpltui	r2,r2,60
   1844c:	1000021e 	bne	r2,zero,18458 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   18450:	00801484 	movi	r2,82
   18454:	00002e06 	br	18510 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   18458:	e0bfff0b 	ldhu	r2,-4(fp)
   1845c:	1080fa30 	cmpltui	r2,r2,1000
   18460:	1000021e 	bne	r2,zero,1846c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   18464:	008014c4 	movi	r2,83
   18468:	00002906 	br	18510 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1846c:	e0bffc03 	ldbu	r2,-16(fp)
   18470:	10c38424 	muli	r3,r2,3600
   18474:	e0bffd03 	ldbu	r2,-12(fp)
   18478:	10800f24 	muli	r2,r2,60
   1847c:	1887883a 	add	r3,r3,r2
   18480:	e0bffe03 	ldbu	r2,-8(fp)
   18484:	1885883a 	add	r2,r3,r2
   18488:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1848c:	e0bfff0b 	ldhu	r2,-4(fp)
   18490:	10800f84 	addi	r2,r2,62
   18494:	100690fa 	slli	r3,r2,3
   18498:	008418b4 	movhi	r2,4194
   1849c:	109374c4 	addi	r2,r2,19923
   184a0:	188a383a 	mulxuu	r5,r3,r2
   184a4:	1885383a 	mul	r2,r3,r2
   184a8:	1011883a 	mov	r8,r2
   184ac:	2813883a 	mov	r9,r5
   184b0:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   184b4:	2085883a 	add	r2,r4,r2
   184b8:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   184bc:	e0bffb17 	ldw	r2,-20(fp)
   184c0:	1004d43a 	srli	r2,r2,16
   184c4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   184c8:	e0bffb17 	ldw	r2,-20(fp)
   184cc:	10bfffcc 	andi	r2,r2,65535
   184d0:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   184d4:	e0bffb17 	ldw	r2,-20(fp)
   184d8:	10bfffcc 	andi	r2,r2,65535
   184dc:	1009883a 	mov	r4,r2
   184e0:	00182740 	call	18274 <OSTimeDly>
    while (loops > 0) {
   184e4:	00000706 	br	18504 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   184e8:	01200014 	movui	r4,32768
   184ec:	00182740 	call	18274 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   184f0:	01200014 	movui	r4,32768
   184f4:	00182740 	call	18274 <OSTimeDly>
        loops--;
   184f8:	e0bffa0b 	ldhu	r2,-24(fp)
   184fc:	10bfffc4 	addi	r2,r2,-1
   18500:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   18504:	e0bffa0b 	ldhu	r2,-24(fp)
   18508:	103ff71e 	bne	r2,zero,184e8 <__alt_mem_Flash_flash_data+0xf40184e8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1850c:	0005883a 	mov	r2,zero
}
   18510:	e037883a 	mov	sp,fp
   18514:	dfc00117 	ldw	ra,4(sp)
   18518:	df000017 	ldw	fp,0(sp)
   1851c:	dec00204 	addi	sp,sp,8
   18520:	f800283a 	ret

00018524 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   18524:	defff504 	addi	sp,sp,-44
   18528:	dfc00a15 	stw	ra,40(sp)
   1852c:	df000915 	stw	fp,36(sp)
   18530:	df000904 	addi	fp,sp,36
   18534:	2005883a 	mov	r2,r4
   18538:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1853c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   18540:	e0bfff03 	ldbu	r2,-4(fp)
   18544:	10800530 	cmpltui	r2,r2,20
   18548:	1000021e 	bne	r2,zero,18554 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1854c:	00800a84 	movi	r2,42
   18550:	00006b06 	br	18700 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18554:	0005303a 	rdctl	r2,status
   18558:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1855c:	e0fff917 	ldw	r3,-28(fp)
   18560:	00bfff84 	movi	r2,-2
   18564:	1884703a 	and	r2,r3,r2
   18568:	1001703a 	wrctl	status,r2
  
  return context;
   1856c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18570:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   18574:	e0ffff03 	ldbu	r3,-4(fp)
   18578:	008000b4 	movhi	r2,2
   1857c:	109f4c04 	addi	r2,r2,32048
   18580:	18c7883a 	add	r3,r3,r3
   18584:	18c7883a 	add	r3,r3,r3
   18588:	10c5883a 	add	r2,r2,r3
   1858c:	10800017 	ldw	r2,0(r2)
   18590:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   18594:	e0bff817 	ldw	r2,-32(fp)
   18598:	1000061e 	bne	r2,zero,185b4 <OSTimeDlyResume+0x90>
   1859c:	e0bff717 	ldw	r2,-36(fp)
   185a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   185a4:	e0bffa17 	ldw	r2,-24(fp)
   185a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   185ac:	008010c4 	movi	r2,67
   185b0:	00005306 	br	18700 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   185b4:	e0bff817 	ldw	r2,-32(fp)
   185b8:	10800058 	cmpnei	r2,r2,1
   185bc:	1000061e 	bne	r2,zero,185d8 <OSTimeDlyResume+0xb4>
   185c0:	e0bff717 	ldw	r2,-36(fp)
   185c4:	e0bffb15 	stw	r2,-20(fp)
   185c8:	e0bffb17 	ldw	r2,-20(fp)
   185cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   185d0:	008010c4 	movi	r2,67
   185d4:	00004a06 	br	18700 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   185d8:	e0bff817 	ldw	r2,-32(fp)
   185dc:	10800b8b 	ldhu	r2,46(r2)
   185e0:	10bfffcc 	andi	r2,r2,65535
   185e4:	1000061e 	bne	r2,zero,18600 <OSTimeDlyResume+0xdc>
   185e8:	e0bff717 	ldw	r2,-36(fp)
   185ec:	e0bffc15 	stw	r2,-16(fp)
   185f0:	e0bffc17 	ldw	r2,-16(fp)
   185f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   185f8:	00801404 	movi	r2,80
   185fc:	00004006 	br	18700 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   18600:	e0bff817 	ldw	r2,-32(fp)
   18604:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18608:	e0bff817 	ldw	r2,-32(fp)
   1860c:	10800c03 	ldbu	r2,48(r2)
   18610:	10803fcc 	andi	r2,r2,255
   18614:	10800dcc 	andi	r2,r2,55
   18618:	10000b26 	beq	r2,zero,18648 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1861c:	e0bff817 	ldw	r2,-32(fp)
   18620:	10c00c03 	ldbu	r3,48(r2)
   18624:	00bff204 	movi	r2,-56
   18628:	1884703a 	and	r2,r3,r2
   1862c:	1007883a 	mov	r3,r2
   18630:	e0bff817 	ldw	r2,-32(fp)
   18634:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   18638:	e0bff817 	ldw	r2,-32(fp)
   1863c:	00c00044 	movi	r3,1
   18640:	10c00c45 	stb	r3,49(r2)
   18644:	00000206 	br	18650 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   18648:	e0bff817 	ldw	r2,-32(fp)
   1864c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   18650:	e0bff817 	ldw	r2,-32(fp)
   18654:	10800c03 	ldbu	r2,48(r2)
   18658:	10803fcc 	andi	r2,r2,255
   1865c:	1080020c 	andi	r2,r2,8
   18660:	1000221e 	bne	r2,zero,186ec <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   18664:	e0bff817 	ldw	r2,-32(fp)
   18668:	10c00d83 	ldbu	r3,54(r2)
   1866c:	008000b4 	movhi	r2,2
   18670:	1082b804 	addi	r2,r2,2784
   18674:	10800003 	ldbu	r2,0(r2)
   18678:	1884b03a 	or	r2,r3,r2
   1867c:	1007883a 	mov	r3,r2
   18680:	008000b4 	movhi	r2,2
   18684:	1082b804 	addi	r2,r2,2784
   18688:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1868c:	e0bff817 	ldw	r2,-32(fp)
   18690:	10800d03 	ldbu	r2,52(r2)
   18694:	10c03fcc 	andi	r3,r2,255
   18698:	e0bff817 	ldw	r2,-32(fp)
   1869c:	10800d03 	ldbu	r2,52(r2)
   186a0:	11003fcc 	andi	r4,r2,255
   186a4:	008000b4 	movhi	r2,2
   186a8:	1082b844 	addi	r2,r2,2785
   186ac:	1105883a 	add	r2,r2,r4
   186b0:	11000003 	ldbu	r4,0(r2)
   186b4:	e0bff817 	ldw	r2,-32(fp)
   186b8:	10800d43 	ldbu	r2,53(r2)
   186bc:	2084b03a 	or	r2,r4,r2
   186c0:	1009883a 	mov	r4,r2
   186c4:	008000b4 	movhi	r2,2
   186c8:	1082b844 	addi	r2,r2,2785
   186cc:	10c5883a 	add	r2,r2,r3
   186d0:	11000005 	stb	r4,0(r2)
   186d4:	e0bff717 	ldw	r2,-36(fp)
   186d8:	e0bffd15 	stw	r2,-12(fp)
   186dc:	e0bffd17 	ldw	r2,-12(fp)
   186e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   186e4:	00124640 	call	12464 <OS_Sched>
   186e8:	00000406 	br	186fc <OSTimeDlyResume+0x1d8>
   186ec:	e0bff717 	ldw	r2,-36(fp)
   186f0:	e0bffe15 	stw	r2,-8(fp)
   186f4:	e0bffe17 	ldw	r2,-8(fp)
   186f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   186fc:	0005883a 	mov	r2,zero
}
   18700:	e037883a 	mov	sp,fp
   18704:	dfc00117 	ldw	ra,4(sp)
   18708:	df000017 	ldw	fp,0(sp)
   1870c:	dec00204 	addi	sp,sp,8
   18710:	f800283a 	ret

00018714 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   18714:	defffb04 	addi	sp,sp,-20
   18718:	df000415 	stw	fp,16(sp)
   1871c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18720:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18724:	0005303a 	rdctl	r2,status
   18728:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1872c:	e0fffe17 	ldw	r3,-8(fp)
   18730:	00bfff84 	movi	r2,-2
   18734:	1884703a 	and	r2,r3,r2
   18738:	1001703a 	wrctl	status,r2
  
  return context;
   1873c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   18740:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   18744:	008000b4 	movhi	r2,2
   18748:	1082bc04 	addi	r2,r2,2800
   1874c:	10800017 	ldw	r2,0(r2)
   18750:	e0bffd15 	stw	r2,-12(fp)
   18754:	e0bffc17 	ldw	r2,-16(fp)
   18758:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1875c:	e0bfff17 	ldw	r2,-4(fp)
   18760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   18764:	e0bffd17 	ldw	r2,-12(fp)
}
   18768:	e037883a 	mov	sp,fp
   1876c:	df000017 	ldw	fp,0(sp)
   18770:	dec00104 	addi	sp,sp,4
   18774:	f800283a 	ret

00018778 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   18778:	defffb04 	addi	sp,sp,-20
   1877c:	df000415 	stw	fp,16(sp)
   18780:	df000404 	addi	fp,sp,16
   18784:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18788:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1878c:	0005303a 	rdctl	r2,status
   18790:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18794:	e0fffd17 	ldw	r3,-12(fp)
   18798:	00bfff84 	movi	r2,-2
   1879c:	1884703a 	and	r2,r3,r2
   187a0:	1001703a 	wrctl	status,r2
  
  return context;
   187a4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   187a8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   187ac:	008000b4 	movhi	r2,2
   187b0:	1082bc04 	addi	r2,r2,2800
   187b4:	e0ffff17 	ldw	r3,-4(fp)
   187b8:	10c00015 	stw	r3,0(r2)
   187bc:	e0bffc17 	ldw	r2,-16(fp)
   187c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187c4:	e0bffe17 	ldw	r2,-8(fp)
   187c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   187cc:	e037883a 	mov	sp,fp
   187d0:	df000017 	ldw	fp,0(sp)
   187d4:	dec00104 	addi	sp,sp,4
   187d8:	f800283a 	ret

000187dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   187dc:	defffd04 	addi	sp,sp,-12
   187e0:	dfc00215 	stw	ra,8(sp)
   187e4:	df000115 	stw	fp,4(sp)
   187e8:	df000104 	addi	fp,sp,4
   187ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   187f0:	e13fff17 	ldw	r4,-4(fp)
   187f4:	014000b4 	movhi	r5,2
   187f8:	297aa204 	addi	r5,r5,-5496
   187fc:	001b1880 	call	1b188 <alt_dev_llist_insert>
}
   18800:	e037883a 	mov	sp,fp
   18804:	dfc00117 	ldw	ra,4(sp)
   18808:	df000017 	ldw	fp,0(sp)
   1880c:	dec00204 	addi	sp,sp,8
   18810:	f800283a 	ret

00018814 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   18814:	defffd04 	addi	sp,sp,-12
   18818:	dfc00215 	stw	ra,8(sp)
   1881c:	df000115 	stw	fp,4(sp)
   18820:	df000104 	addi	fp,sp,4
   18824:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   18828:	001ba9c0 	call	1ba9c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1882c:	00800044 	movi	r2,1
   18830:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   18834:	e037883a 	mov	sp,fp
   18838:	dfc00117 	ldw	ra,4(sp)
   1883c:	df000017 	ldw	fp,0(sp)
   18840:	dec00204 	addi	sp,sp,8
   18844:	f800283a 	ret

00018848 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   18848:	defffd04 	addi	sp,sp,-12
   1884c:	dfc00215 	stw	ra,8(sp)
   18850:	df000115 	stw	fp,4(sp)
   18854:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   18858:	01040034 	movhi	r4,4096
   1885c:	21080004 	addi	r4,r4,8192
   18860:	000b883a 	mov	r5,zero
   18864:	000d883a 	mov	r6,zero
   18868:	01c00204 	movi	r7,8
   1886c:	00199d40 	call	199d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   18870:	010000b4 	movhi	r4,2
   18874:	21359204 	addi	r4,r4,-10680
   18878:	000b883a 	mov	r5,zero
   1887c:	01800204 	movi	r6,8
   18880:	0018d9c0 	call	18d9c <altera_avalon_jtag_uart_init>
   18884:	010000b4 	movhi	r4,2
   18888:	21358804 	addi	r4,r4,-10720
   1888c:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   18890:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   18894:	010000b4 	movhi	r4,2
   18898:	2139a304 	addi	r4,r4,-6516
   1889c:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   188a0:	010000b4 	movhi	r4,2
   188a4:	2139af04 	addi	r4,r4,-6468
   188a8:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   188ac:	010000b4 	movhi	r4,2
   188b0:	2139bb04 	addi	r4,r4,-6420
   188b4:	0019b040 	call	19b04 <alt_up_character_lcd_init>
   188b8:	010000b4 	movhi	r4,2
   188bc:	2139bb04 	addi	r4,r4,-6420
   188c0:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   188c4:	010000b4 	movhi	r4,2
   188c8:	2139c604 	addi	r4,r4,-6376
   188cc:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   188d0:	010000b4 	movhi	r4,2
   188d4:	2139d104 	addi	r4,r4,-6332
   188d8:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   188dc:	010000b4 	movhi	r4,2
   188e0:	2139dc04 	addi	r4,r4,-6288
   188e4:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   188e8:	010000b4 	movhi	r4,2
   188ec:	2139e704 	addi	r4,r4,-6244
   188f0:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   188f4:	010000b4 	movhi	r4,2
   188f8:	2139f204 	addi	r4,r4,-6200
   188fc:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   18900:	010000b4 	movhi	r4,2
   18904:	2139fd04 	addi	r4,r4,-6156
   18908:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1890c:	010000b4 	movhi	r4,2
   18910:	213a0804 	addi	r4,r4,-6112
   18914:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   18918:	010000b4 	movhi	r4,2
   1891c:	213a1304 	addi	r4,r4,-6068
   18920:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   18924:	010000b4 	movhi	r4,2
   18928:	213a1e04 	addi	r4,r4,-6024
   1892c:	001a3dc0 	call	1a3dc <alt_up_ps2_init>
   18930:	010000b4 	movhi	r4,2
   18934:	213a1e04 	addi	r4,r4,-6024
   18938:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1893c:	010000b4 	movhi	r4,2
   18940:	213a2c04 	addi	r4,r4,-5968
   18944:	001a3dc0 	call	1a3dc <alt_up_ps2_init>
   18948:	010000b4 	movhi	r4,2
   1894c:	213a2c04 	addi	r4,r4,-5968
   18950:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
   18954:	010000b4 	movhi	r4,2
   18958:	213a3a04 	addi	r4,r4,-5912
   1895c:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_1, rs232_1);
   18960:	010000b4 	movhi	r4,2
   18964:	213a4504 	addi	r4,r4,-5868
   18968:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1896c:	010000b4 	movhi	r4,2
   18970:	213a5004 	addi	r4,r4,-5824
   18974:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   18978:	010000b4 	movhi	r4,2
   1897c:	213a5b04 	addi	r4,r4,-5780
   18980:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   18984:	008000b4 	movhi	r2,2
   18988:	10ba6804 	addi	r2,r2,-5728
   1898c:	10800a17 	ldw	r2,40(r2)
   18990:	10800104 	addi	r2,r2,4
   18994:	10800017 	ldw	r2,0(r2)
   18998:	10ffffcc 	andi	r3,r2,65535
   1899c:	008000b4 	movhi	r2,2
   189a0:	10ba6804 	addi	r2,r2,-5728
   189a4:	10c00c15 	stw	r3,48(r2)
   189a8:	008000b4 	movhi	r2,2
   189ac:	10ba6804 	addi	r2,r2,-5728
   189b0:	10800a17 	ldw	r2,40(r2)
   189b4:	10800104 	addi	r2,r2,4
   189b8:	10800017 	ldw	r2,0(r2)
   189bc:	1006d43a 	srli	r3,r2,16
   189c0:	008000b4 	movhi	r2,2
   189c4:	10ba6804 	addi	r2,r2,-5728
   189c8:	10c00d15 	stw	r3,52(r2)
   189cc:	008000b4 	movhi	r2,2
   189d0:	10ba6804 	addi	r2,r2,-5728
   189d4:	10800c17 	ldw	r2,48(r2)
   189d8:	10801068 	cmpgeui	r2,r2,65
   189dc:	1000081e 	bne	r2,zero,18a00 <alt_sys_init+0x1b8>
   189e0:	008000b4 	movhi	r2,2
   189e4:	10ba6804 	addi	r2,r2,-5728
   189e8:	00c00fc4 	movi	r3,63
   189ec:	10c00f15 	stw	r3,60(r2)
   189f0:	008000b4 	movhi	r2,2
   189f4:	10ba6804 	addi	r2,r2,-5728
   189f8:	00c00184 	movi	r3,6
   189fc:	10c01015 	stw	r3,64(r2)
   18a00:	008000b4 	movhi	r2,2
   18a04:	10ba6804 	addi	r2,r2,-5728
   18a08:	10800d17 	ldw	r2,52(r2)
   18a0c:	10800868 	cmpgeui	r2,r2,33
   18a10:	1000041e 	bne	r2,zero,18a24 <alt_sys_init+0x1dc>
   18a14:	008000b4 	movhi	r2,2
   18a18:	10ba6804 	addi	r2,r2,-5728
   18a1c:	00c007c4 	movi	r3,31
   18a20:	10c01115 	stw	r3,68(r2)
   18a24:	010000b4 	movhi	r4,2
   18a28:	213a6804 	addi	r4,r4,-5728
   18a2c:	001acf40 	call	1acf4 <alt_up_char_buffer_init>
   18a30:	010000b4 	movhi	r4,2
   18a34:	213a6804 	addi	r4,r4,-5728
   18a38:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   18a3c:	008000b4 	movhi	r2,2
   18a40:	10ba7a04 	addi	r2,r2,-5656
   18a44:	10800a17 	ldw	r2,40(r2)
   18a48:	10800017 	ldw	r2,0(r2)
   18a4c:	1007883a 	mov	r3,r2
   18a50:	008000b4 	movhi	r2,2
   18a54:	10ba7a04 	addi	r2,r2,-5656
   18a58:	10c00b15 	stw	r3,44(r2)
   18a5c:	008000b4 	movhi	r2,2
   18a60:	10ba7a04 	addi	r2,r2,-5656
   18a64:	10800a17 	ldw	r2,40(r2)
   18a68:	10800104 	addi	r2,r2,4
   18a6c:	10800017 	ldw	r2,0(r2)
   18a70:	1007883a 	mov	r3,r2
   18a74:	008000b4 	movhi	r2,2
   18a78:	10ba7a04 	addi	r2,r2,-5656
   18a7c:	10c00c15 	stw	r3,48(r2)
   18a80:	008000b4 	movhi	r2,2
   18a84:	10ba7a04 	addi	r2,r2,-5656
   18a88:	10800a17 	ldw	r2,40(r2)
   18a8c:	10800204 	addi	r2,r2,8
   18a90:	10800017 	ldw	r2,0(r2)
   18a94:	10ffffcc 	andi	r3,r2,65535
   18a98:	008000b4 	movhi	r2,2
   18a9c:	10ba7a04 	addi	r2,r2,-5656
   18aa0:	10c00f15 	stw	r3,60(r2)
   18aa4:	008000b4 	movhi	r2,2
   18aa8:	10ba7a04 	addi	r2,r2,-5656
   18aac:	10800a17 	ldw	r2,40(r2)
   18ab0:	10800204 	addi	r2,r2,8
   18ab4:	10800017 	ldw	r2,0(r2)
   18ab8:	1006d43a 	srli	r3,r2,16
   18abc:	008000b4 	movhi	r2,2
   18ac0:	10ba7a04 	addi	r2,r2,-5656
   18ac4:	10c01015 	stw	r3,64(r2)
   18ac8:	008000b4 	movhi	r2,2
   18acc:	10ba7a04 	addi	r2,r2,-5656
   18ad0:	10800a17 	ldw	r2,40(r2)
   18ad4:	10800304 	addi	r2,r2,12
   18ad8:	10800017 	ldw	r2,0(r2)
   18adc:	1005d07a 	srai	r2,r2,1
   18ae0:	10c0004c 	andi	r3,r2,1
   18ae4:	008000b4 	movhi	r2,2
   18ae8:	10ba7a04 	addi	r2,r2,-5656
   18aec:	10c00d15 	stw	r3,52(r2)
   18af0:	008000b4 	movhi	r2,2
   18af4:	10ba7a04 	addi	r2,r2,-5656
   18af8:	10800a17 	ldw	r2,40(r2)
   18afc:	10800304 	addi	r2,r2,12
   18b00:	10800017 	ldw	r2,0(r2)
   18b04:	1005d13a 	srai	r2,r2,4
   18b08:	10c003cc 	andi	r3,r2,15
   18b0c:	008000b4 	movhi	r2,2
   18b10:	10ba7a04 	addi	r2,r2,-5656
   18b14:	10c00e15 	stw	r3,56(r2)
   18b18:	008000b4 	movhi	r2,2
   18b1c:	10ba7a04 	addi	r2,r2,-5656
   18b20:	10800a17 	ldw	r2,40(r2)
   18b24:	10800304 	addi	r2,r2,12
   18b28:	10800017 	ldw	r2,0(r2)
   18b2c:	1005d43a 	srai	r2,r2,16
   18b30:	e0bfff05 	stb	r2,-4(fp)
   18b34:	008000b4 	movhi	r2,2
   18b38:	10ba7a04 	addi	r2,r2,-5656
   18b3c:	10800a17 	ldw	r2,40(r2)
   18b40:	10800304 	addi	r2,r2,12
   18b44:	10800017 	ldw	r2,0(r2)
   18b48:	1004d63a 	srli	r2,r2,24
   18b4c:	e0bfff45 	stb	r2,-3(fp)
   18b50:	008000b4 	movhi	r2,2
   18b54:	10ba7a04 	addi	r2,r2,-5656
   18b58:	10800e17 	ldw	r2,56(r2)
   18b5c:	10800058 	cmpnei	r2,r2,1
   18b60:	1000041e 	bne	r2,zero,18b74 <alt_sys_init+0x32c>
   18b64:	008000b4 	movhi	r2,2
   18b68:	10ba7a04 	addi	r2,r2,-5656
   18b6c:	10001115 	stw	zero,68(r2)
   18b70:	00000e06 	br	18bac <alt_sys_init+0x364>
   18b74:	008000b4 	movhi	r2,2
   18b78:	10ba7a04 	addi	r2,r2,-5656
   18b7c:	10800e17 	ldw	r2,56(r2)
   18b80:	10800098 	cmpnei	r2,r2,2
   18b84:	1000051e 	bne	r2,zero,18b9c <alt_sys_init+0x354>
   18b88:	008000b4 	movhi	r2,2
   18b8c:	10ba7a04 	addi	r2,r2,-5656
   18b90:	00c00044 	movi	r3,1
   18b94:	10c01115 	stw	r3,68(r2)
   18b98:	00000406 	br	18bac <alt_sys_init+0x364>
   18b9c:	008000b4 	movhi	r2,2
   18ba0:	10ba7a04 	addi	r2,r2,-5656
   18ba4:	00c00084 	movi	r3,2
   18ba8:	10c01115 	stw	r3,68(r2)
   18bac:	e0bfff03 	ldbu	r2,-4(fp)
   18bb0:	00c00804 	movi	r3,32
   18bb4:	1885c83a 	sub	r2,r3,r2
   18bb8:	00ffffc4 	movi	r3,-1
   18bbc:	1886d83a 	srl	r3,r3,r2
   18bc0:	008000b4 	movhi	r2,2
   18bc4:	10ba7a04 	addi	r2,r2,-5656
   18bc8:	10c01215 	stw	r3,72(r2)
   18bcc:	e0ffff03 	ldbu	r3,-4(fp)
   18bd0:	008000b4 	movhi	r2,2
   18bd4:	10ba7a04 	addi	r2,r2,-5656
   18bd8:	10801117 	ldw	r2,68(r2)
   18bdc:	1887883a 	add	r3,r3,r2
   18be0:	008000b4 	movhi	r2,2
   18be4:	10ba7a04 	addi	r2,r2,-5656
   18be8:	10c01315 	stw	r3,76(r2)
   18bec:	e0bfff43 	ldbu	r2,-3(fp)
   18bf0:	00c00804 	movi	r3,32
   18bf4:	1885c83a 	sub	r2,r3,r2
   18bf8:	00ffffc4 	movi	r3,-1
   18bfc:	1886d83a 	srl	r3,r3,r2
   18c00:	008000b4 	movhi	r2,2
   18c04:	10ba7a04 	addi	r2,r2,-5656
   18c08:	10c01415 	stw	r3,80(r2)
   18c0c:	010000b4 	movhi	r4,2
   18c10:	213a7a04 	addi	r4,r4,-5656
   18c14:	00187dc0 	call	187dc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18c18:	010000b4 	movhi	r4,2
   18c1c:	213a8f04 	addi	r4,r4,-5572
   18c20:	00187dc0 	call	187dc <alt_dev_reg>
}
   18c24:	e037883a 	mov	sp,fp
   18c28:	dfc00117 	ldw	ra,4(sp)
   18c2c:	df000017 	ldw	fp,0(sp)
   18c30:	dec00204 	addi	sp,sp,8
   18c34:	f800283a 	ret

00018c38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   18c38:	defffa04 	addi	sp,sp,-24
   18c3c:	dfc00515 	stw	ra,20(sp)
   18c40:	df000415 	stw	fp,16(sp)
   18c44:	df000404 	addi	fp,sp,16
   18c48:	e13ffd15 	stw	r4,-12(fp)
   18c4c:	e17ffe15 	stw	r5,-8(fp)
   18c50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18c54:	e0bffd17 	ldw	r2,-12(fp)
   18c58:	10800017 	ldw	r2,0(r2)
   18c5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   18c60:	e0bffc17 	ldw	r2,-16(fp)
   18c64:	10c00a04 	addi	r3,r2,40
   18c68:	e0bffd17 	ldw	r2,-12(fp)
   18c6c:	10800217 	ldw	r2,8(r2)
   18c70:	1809883a 	mov	r4,r3
   18c74:	e17ffe17 	ldw	r5,-8(fp)
   18c78:	e1bfff17 	ldw	r6,-4(fp)
   18c7c:	100f883a 	mov	r7,r2
   18c80:	00193e80 	call	193e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   18c84:	e037883a 	mov	sp,fp
   18c88:	dfc00117 	ldw	ra,4(sp)
   18c8c:	df000017 	ldw	fp,0(sp)
   18c90:	dec00204 	addi	sp,sp,8
   18c94:	f800283a 	ret

00018c98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   18c98:	defffa04 	addi	sp,sp,-24
   18c9c:	dfc00515 	stw	ra,20(sp)
   18ca0:	df000415 	stw	fp,16(sp)
   18ca4:	df000404 	addi	fp,sp,16
   18ca8:	e13ffd15 	stw	r4,-12(fp)
   18cac:	e17ffe15 	stw	r5,-8(fp)
   18cb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18cb4:	e0bffd17 	ldw	r2,-12(fp)
   18cb8:	10800017 	ldw	r2,0(r2)
   18cbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18cc0:	e0bffc17 	ldw	r2,-16(fp)
   18cc4:	10c00a04 	addi	r3,r2,40
   18cc8:	e0bffd17 	ldw	r2,-12(fp)
   18ccc:	10800217 	ldw	r2,8(r2)
   18cd0:	1809883a 	mov	r4,r3
   18cd4:	e17ffe17 	ldw	r5,-8(fp)
   18cd8:	e1bfff17 	ldw	r6,-4(fp)
   18cdc:	100f883a 	mov	r7,r2
   18ce0:	001969c0 	call	1969c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18ce4:	e037883a 	mov	sp,fp
   18ce8:	dfc00117 	ldw	ra,4(sp)
   18cec:	df000017 	ldw	fp,0(sp)
   18cf0:	dec00204 	addi	sp,sp,8
   18cf4:	f800283a 	ret

00018cf8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   18cf8:	defffc04 	addi	sp,sp,-16
   18cfc:	dfc00315 	stw	ra,12(sp)
   18d00:	df000215 	stw	fp,8(sp)
   18d04:	df000204 	addi	fp,sp,8
   18d08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18d0c:	e0bfff17 	ldw	r2,-4(fp)
   18d10:	10800017 	ldw	r2,0(r2)
   18d14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   18d18:	e0bffe17 	ldw	r2,-8(fp)
   18d1c:	10c00a04 	addi	r3,r2,40
   18d20:	e0bfff17 	ldw	r2,-4(fp)
   18d24:	10800217 	ldw	r2,8(r2)
   18d28:	1809883a 	mov	r4,r3
   18d2c:	100b883a 	mov	r5,r2
   18d30:	00192940 	call	19294 <altera_avalon_jtag_uart_close>
}
   18d34:	e037883a 	mov	sp,fp
   18d38:	dfc00117 	ldw	ra,4(sp)
   18d3c:	df000017 	ldw	fp,0(sp)
   18d40:	dec00204 	addi	sp,sp,8
   18d44:	f800283a 	ret

00018d48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   18d48:	defffa04 	addi	sp,sp,-24
   18d4c:	dfc00515 	stw	ra,20(sp)
   18d50:	df000415 	stw	fp,16(sp)
   18d54:	df000404 	addi	fp,sp,16
   18d58:	e13ffd15 	stw	r4,-12(fp)
   18d5c:	e17ffe15 	stw	r5,-8(fp)
   18d60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   18d64:	e0bffd17 	ldw	r2,-12(fp)
   18d68:	10800017 	ldw	r2,0(r2)
   18d6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   18d70:	e0bffc17 	ldw	r2,-16(fp)
   18d74:	10800a04 	addi	r2,r2,40
   18d78:	1009883a 	mov	r4,r2
   18d7c:	e17ffe17 	ldw	r5,-8(fp)
   18d80:	e1bfff17 	ldw	r6,-4(fp)
   18d84:	00192fc0 	call	192fc <altera_avalon_jtag_uart_ioctl>
}
   18d88:	e037883a 	mov	sp,fp
   18d8c:	dfc00117 	ldw	ra,4(sp)
   18d90:	df000017 	ldw	fp,0(sp)
   18d94:	dec00204 	addi	sp,sp,8
   18d98:	f800283a 	ret

00018d9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18d9c:	defff104 	addi	sp,sp,-60
   18da0:	dfc00e15 	stw	ra,56(sp)
   18da4:	df000d15 	stw	fp,52(sp)
   18da8:	df000d04 	addi	fp,sp,52
   18dac:	e13ff915 	stw	r4,-28(fp)
   18db0:	e17ffa15 	stw	r5,-24(fp)
   18db4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   18db8:	e0bff917 	ldw	r2,-28(fp)
   18dbc:	10800c04 	addi	r2,r2,48
   18dc0:	e0bff315 	stw	r2,-52(fp)
   18dc4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   18dc8:	e0fff40b 	ldhu	r3,-48(fp)
   18dcc:	e0bff884 	addi	r2,fp,-30
   18dd0:	1809883a 	mov	r4,r3
   18dd4:	100b883a 	mov	r5,r2
   18dd8:	0012fd00 	call	12fd0 <OSFlagCreate>
   18ddc:	1007883a 	mov	r3,r2
   18de0:	e0bff317 	ldw	r2,-52(fp)
   18de4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   18de8:	e0bff917 	ldw	r2,-28(fp)
   18dec:	10800a04 	addi	r2,r2,40
   18df0:	e0bff515 	stw	r2,-44(fp)
   18df4:	00800044 	movi	r2,1
   18df8:	e0bff60d 	sth	r2,-40(fp)
   18dfc:	e0bff60b 	ldhu	r2,-40(fp)
   18e00:	1009883a 	mov	r4,r2
   18e04:	0015f280 	call	15f28 <OSSemCreate>
   18e08:	1007883a 	mov	r3,r2
   18e0c:	e0bff517 	ldw	r2,-44(fp)
   18e10:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   18e14:	e0bff917 	ldw	r2,-28(fp)
   18e18:	10800b04 	addi	r2,r2,44
   18e1c:	e0bff715 	stw	r2,-36(fp)
   18e20:	00800044 	movi	r2,1
   18e24:	e0bff80d 	sth	r2,-32(fp)
   18e28:	e0bff80b 	ldhu	r2,-32(fp)
   18e2c:	1009883a 	mov	r4,r2
   18e30:	0015f280 	call	15f28 <OSSemCreate>
   18e34:	1007883a 	mov	r3,r2
   18e38:	e0bff717 	ldw	r2,-36(fp)
   18e3c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18e40:	e0bff917 	ldw	r2,-28(fp)
   18e44:	00c00044 	movi	r3,1
   18e48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   18e4c:	e0bff917 	ldw	r2,-28(fp)
   18e50:	10800017 	ldw	r2,0(r2)
   18e54:	10800104 	addi	r2,r2,4
   18e58:	1007883a 	mov	r3,r2
   18e5c:	e0bff917 	ldw	r2,-28(fp)
   18e60:	10800817 	ldw	r2,32(r2)
   18e64:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   18e68:	e0bffb17 	ldw	r2,-20(fp)
   18e6c:	1009883a 	mov	r4,r2
   18e70:	e17ff917 	ldw	r5,-28(fp)
   18e74:	018000b4 	movhi	r6,2
   18e78:	31a3b704 	addi	r6,r6,-28964
   18e7c:	001b4dc0 	call	1b4dc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   18e80:	e0bff917 	ldw	r2,-28(fp)
   18e84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   18e88:	e0bff917 	ldw	r2,-28(fp)
   18e8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18e90:	008000b4 	movhi	r2,2
   18e94:	1082c104 	addi	r2,r2,2820
   18e98:	10800017 	ldw	r2,0(r2)
   18e9c:	1809883a 	mov	r4,r3
   18ea0:	100b883a 	mov	r5,r2
   18ea4:	018000b4 	movhi	r6,2
   18ea8:	31a46104 	addi	r6,r6,-28284
   18eac:	e1fff917 	ldw	r7,-28(fp)
   18eb0:	001afdc0 	call	1afdc <alt_alarm_start>
   18eb4:	1000040e 	bge	r2,zero,18ec8 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   18eb8:	e0fff917 	ldw	r3,-28(fp)
   18ebc:	00a00034 	movhi	r2,32768
   18ec0:	10bfffc4 	addi	r2,r2,-1
   18ec4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   18ec8:	e037883a 	mov	sp,fp
   18ecc:	dfc00117 	ldw	ra,4(sp)
   18ed0:	df000017 	ldw	fp,0(sp)
   18ed4:	dec00204 	addi	sp,sp,8
   18ed8:	f800283a 	ret

00018edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   18edc:	defff104 	addi	sp,sp,-60
   18ee0:	dfc00e15 	stw	ra,56(sp)
   18ee4:	df000d15 	stw	fp,52(sp)
   18ee8:	df000d04 	addi	fp,sp,52
   18eec:	e13ffe15 	stw	r4,-8(fp)
   18ef0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18ef4:	e0bffe17 	ldw	r2,-8(fp)
   18ef8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   18efc:	e0bff517 	ldw	r2,-44(fp)
   18f00:	10800017 	ldw	r2,0(r2)
   18f04:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18f08:	e0bff617 	ldw	r2,-40(fp)
   18f0c:	10800104 	addi	r2,r2,4
   18f10:	10800037 	ldwio	r2,0(r2)
   18f14:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   18f18:	e0bff717 	ldw	r2,-36(fp)
   18f1c:	1080c00c 	andi	r2,r2,768
   18f20:	1000011e 	bne	r2,zero,18f28 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   18f24:	00009206 	br	19170 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18f28:	e0bff717 	ldw	r2,-36(fp)
   18f2c:	1080400c 	andi	r2,r2,256
   18f30:	10004726 	beq	r2,zero,19050 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   18f34:	00800074 	movhi	r2,1
   18f38:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18f3c:	e0bff517 	ldw	r2,-44(fp)
   18f40:	10800d17 	ldw	r2,52(r2)
   18f44:	10800044 	addi	r2,r2,1
   18f48:	1081ffcc 	andi	r2,r2,2047
   18f4c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   18f50:	e0bff517 	ldw	r2,-44(fp)
   18f54:	10c00e17 	ldw	r3,56(r2)
   18f58:	e0bff817 	ldw	r2,-32(fp)
   18f5c:	1880011e 	bne	r3,r2,18f64 <altera_avalon_jtag_uart_irq+0x88>
          break;
   18f60:	00002906 	br	19008 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   18f64:	e0bff617 	ldw	r2,-40(fp)
   18f68:	10800037 	ldwio	r2,0(r2)
   18f6c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   18f70:	e0bff317 	ldw	r2,-52(fp)
   18f74:	10a0000c 	andi	r2,r2,32768
   18f78:	1000011e 	bne	r2,zero,18f80 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   18f7c:	00002206 	br	19008 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   18f80:	e0bff517 	ldw	r2,-44(fp)
   18f84:	10800d17 	ldw	r2,52(r2)
   18f88:	e0fff317 	ldw	r3,-52(fp)
   18f8c:	1809883a 	mov	r4,r3
   18f90:	e0fff517 	ldw	r3,-44(fp)
   18f94:	1885883a 	add	r2,r3,r2
   18f98:	10801104 	addi	r2,r2,68
   18f9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18fa0:	e0bff517 	ldw	r2,-44(fp)
   18fa4:	10800d17 	ldw	r2,52(r2)
   18fa8:	10800044 	addi	r2,r2,1
   18fac:	10c1ffcc 	andi	r3,r2,2047
   18fb0:	e0bff517 	ldw	r2,-44(fp)
   18fb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   18fb8:	e0bff517 	ldw	r2,-44(fp)
   18fbc:	10800c17 	ldw	r2,48(r2)
   18fc0:	e0bff915 	stw	r2,-28(fp)
   18fc4:	00800044 	movi	r2,1
   18fc8:	e0bffa0d 	sth	r2,-24(fp)
   18fcc:	00800044 	movi	r2,1
   18fd0:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18fd4:	008000b4 	movhi	r2,2
   18fd8:	1082ac44 	addi	r2,r2,2737
   18fdc:	10800003 	ldbu	r2,0(r2)
   18fe0:	10803fcc 	andi	r2,r2,255
   18fe4:	103fd526 	beq	r2,zero,18f3c <__alt_mem_Flash_flash_data+0xf4018f3c>
  {
    OSFlagPost (group, flags, opt, &err);
   18fe8:	e17ffa0b 	ldhu	r5,-24(fp)
   18fec:	e0fffa83 	ldbu	r3,-22(fp)
   18ff0:	e0bffcc4 	addi	r2,fp,-13
   18ff4:	e13ff917 	ldw	r4,-28(fp)
   18ff8:	180d883a 	mov	r6,r3
   18ffc:	100f883a 	mov	r7,r2
   19000:	0013c400 	call	13c40 <OSFlagPost>
      }
   19004:	003fcd06 	br	18f3c <__alt_mem_Flash_flash_data+0xf4018f3c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   19008:	e0bff317 	ldw	r2,-52(fp)
   1900c:	10bfffec 	andhi	r2,r2,65535
   19010:	10000f26 	beq	r2,zero,19050 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19014:	e0bff517 	ldw	r2,-44(fp)
   19018:	10c00817 	ldw	r3,32(r2)
   1901c:	00bfff84 	movi	r2,-2
   19020:	1886703a 	and	r3,r3,r2
   19024:	e0bff517 	ldw	r2,-44(fp)
   19028:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1902c:	e0bff617 	ldw	r2,-40(fp)
   19030:	10800104 	addi	r2,r2,4
   19034:	1007883a 	mov	r3,r2
   19038:	e0bff517 	ldw	r2,-44(fp)
   1903c:	10800817 	ldw	r2,32(r2)
   19040:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19044:	e0bff617 	ldw	r2,-40(fp)
   19048:	10800104 	addi	r2,r2,4
   1904c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   19050:	e0bff717 	ldw	r2,-36(fp)
   19054:	1080800c 	andi	r2,r2,512
   19058:	10004426 	beq	r2,zero,1916c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1905c:	e0bff717 	ldw	r2,-36(fp)
   19060:	1004d43a 	srli	r2,r2,16
   19064:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   19068:	00002706 	br	19108 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1906c:	e0bff617 	ldw	r2,-40(fp)
   19070:	e0fff517 	ldw	r3,-44(fp)
   19074:	18c01017 	ldw	r3,64(r3)
   19078:	e13ff517 	ldw	r4,-44(fp)
   1907c:	20c7883a 	add	r3,r4,r3
   19080:	18c21104 	addi	r3,r3,2116
   19084:	18c00003 	ldbu	r3,0(r3)
   19088:	18c03fcc 	andi	r3,r3,255
   1908c:	18c0201c 	xori	r3,r3,128
   19090:	18ffe004 	addi	r3,r3,-128
   19094:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19098:	e0bff517 	ldw	r2,-44(fp)
   1909c:	10801017 	ldw	r2,64(r2)
   190a0:	10800044 	addi	r2,r2,1
   190a4:	10c1ffcc 	andi	r3,r2,2047
   190a8:	e0bff517 	ldw	r2,-44(fp)
   190ac:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   190b0:	e0bff517 	ldw	r2,-44(fp)
   190b4:	10800c17 	ldw	r2,48(r2)
   190b8:	e0bffb15 	stw	r2,-20(fp)
   190bc:	00800084 	movi	r2,2
   190c0:	e0bffc0d 	sth	r2,-16(fp)
   190c4:	00800044 	movi	r2,1
   190c8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   190cc:	008000b4 	movhi	r2,2
   190d0:	1082ac44 	addi	r2,r2,2737
   190d4:	10800003 	ldbu	r2,0(r2)
   190d8:	10803fcc 	andi	r2,r2,255
   190dc:	10000726 	beq	r2,zero,190fc <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   190e0:	e17ffc0b 	ldhu	r5,-16(fp)
   190e4:	e0fffc83 	ldbu	r3,-14(fp)
   190e8:	e0bffd04 	addi	r2,fp,-12
   190ec:	e13ffb17 	ldw	r4,-20(fp)
   190f0:	180d883a 	mov	r6,r3
   190f4:	100f883a 	mov	r7,r2
   190f8:	0013c400 	call	13c40 <OSFlagPost>

        space--;
   190fc:	e0bff417 	ldw	r2,-48(fp)
   19100:	10bfffc4 	addi	r2,r2,-1
   19104:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   19108:	e0bff417 	ldw	r2,-48(fp)
   1910c:	10000526 	beq	r2,zero,19124 <altera_avalon_jtag_uart_irq+0x248>
   19110:	e0bff517 	ldw	r2,-44(fp)
   19114:	10c01017 	ldw	r3,64(r2)
   19118:	e0bff517 	ldw	r2,-44(fp)
   1911c:	10800f17 	ldw	r2,60(r2)
   19120:	18bfd21e 	bne	r3,r2,1906c <__alt_mem_Flash_flash_data+0xf401906c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   19124:	e0bff417 	ldw	r2,-48(fp)
   19128:	10001026 	beq	r2,zero,1916c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1912c:	e0bff517 	ldw	r2,-44(fp)
   19130:	10c00817 	ldw	r3,32(r2)
   19134:	00bfff44 	movi	r2,-3
   19138:	1886703a 	and	r3,r3,r2
   1913c:	e0bff517 	ldw	r2,-44(fp)
   19140:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19144:	e0bff517 	ldw	r2,-44(fp)
   19148:	10800017 	ldw	r2,0(r2)
   1914c:	10800104 	addi	r2,r2,4
   19150:	1007883a 	mov	r3,r2
   19154:	e0bff517 	ldw	r2,-44(fp)
   19158:	10800817 	ldw	r2,32(r2)
   1915c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19160:	e0bff617 	ldw	r2,-40(fp)
   19164:	10800104 	addi	r2,r2,4
   19168:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1916c:	003f6606 	br	18f08 <__alt_mem_Flash_flash_data+0xf4018f08>
}
   19170:	e037883a 	mov	sp,fp
   19174:	dfc00117 	ldw	ra,4(sp)
   19178:	df000017 	ldw	fp,0(sp)
   1917c:	dec00204 	addi	sp,sp,8
   19180:	f800283a 	ret

00019184 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   19184:	defff904 	addi	sp,sp,-28
   19188:	dfc00615 	stw	ra,24(sp)
   1918c:	df000515 	stw	fp,20(sp)
   19190:	df000504 	addi	fp,sp,20
   19194:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   19198:	e0bfff17 	ldw	r2,-4(fp)
   1919c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   191a0:	e0bffb17 	ldw	r2,-20(fp)
   191a4:	10800017 	ldw	r2,0(r2)
   191a8:	10800104 	addi	r2,r2,4
   191ac:	10800037 	ldwio	r2,0(r2)
   191b0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   191b4:	e0bffc17 	ldw	r2,-16(fp)
   191b8:	1081000c 	andi	r2,r2,1024
   191bc:	10000b26 	beq	r2,zero,191ec <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   191c0:	e0bffb17 	ldw	r2,-20(fp)
   191c4:	10800017 	ldw	r2,0(r2)
   191c8:	10800104 	addi	r2,r2,4
   191cc:	1007883a 	mov	r3,r2
   191d0:	e0bffb17 	ldw	r2,-20(fp)
   191d4:	10800817 	ldw	r2,32(r2)
   191d8:	10810014 	ori	r2,r2,1024
   191dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   191e0:	e0bffb17 	ldw	r2,-20(fp)
   191e4:	10000915 	stw	zero,36(r2)
   191e8:	00002206 	br	19274 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   191ec:	e0bffb17 	ldw	r2,-20(fp)
   191f0:	10c00917 	ldw	r3,36(r2)
   191f4:	00a00034 	movhi	r2,32768
   191f8:	10bfff04 	addi	r2,r2,-4
   191fc:	10c01d36 	bltu	r2,r3,19274 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   19200:	e0bffb17 	ldw	r2,-20(fp)
   19204:	10800917 	ldw	r2,36(r2)
   19208:	10c00044 	addi	r3,r2,1
   1920c:	e0bffb17 	ldw	r2,-20(fp)
   19210:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   19214:	e0bffb17 	ldw	r2,-20(fp)
   19218:	10c00917 	ldw	r3,36(r2)
   1921c:	e0bffb17 	ldw	r2,-20(fp)
   19220:	10800117 	ldw	r2,4(r2)
   19224:	18801336 	bltu	r3,r2,19274 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   19228:	e0bffb17 	ldw	r2,-20(fp)
   1922c:	10800c17 	ldw	r2,48(r2)
   19230:	e0bffd15 	stw	r2,-12(fp)
   19234:	00800104 	movi	r2,4
   19238:	e0bffe0d 	sth	r2,-8(fp)
   1923c:	00800044 	movi	r2,1
   19240:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   19244:	008000b4 	movhi	r2,2
   19248:	1082ac44 	addi	r2,r2,2737
   1924c:	10800003 	ldbu	r2,0(r2)
   19250:	10803fcc 	andi	r2,r2,255
   19254:	10000726 	beq	r2,zero,19274 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   19258:	e17ffe0b 	ldhu	r5,-8(fp)
   1925c:	e0fffe83 	ldbu	r3,-6(fp)
   19260:	e0bffec4 	addi	r2,fp,-5
   19264:	e13ffd17 	ldw	r4,-12(fp)
   19268:	180d883a 	mov	r6,r3
   1926c:	100f883a 	mov	r7,r2
   19270:	0013c400 	call	13c40 <OSFlagPost>
   19274:	008000b4 	movhi	r2,2
   19278:	1082c104 	addi	r2,r2,2820
   1927c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   19280:	e037883a 	mov	sp,fp
   19284:	dfc00117 	ldw	ra,4(sp)
   19288:	df000017 	ldw	fp,0(sp)
   1928c:	dec00204 	addi	sp,sp,8
   19290:	f800283a 	ret

00019294 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   19294:	defffd04 	addi	sp,sp,-12
   19298:	df000215 	stw	fp,8(sp)
   1929c:	df000204 	addi	fp,sp,8
   192a0:	e13ffe15 	stw	r4,-8(fp)
   192a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   192a8:	00000506 	br	192c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   192ac:	e0bfff17 	ldw	r2,-4(fp)
   192b0:	1090000c 	andi	r2,r2,16384
   192b4:	10000226 	beq	r2,zero,192c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   192b8:	00bffd44 	movi	r2,-11
   192bc:	00000b06 	br	192ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   192c0:	e0bffe17 	ldw	r2,-8(fp)
   192c4:	10c01017 	ldw	r3,64(r2)
   192c8:	e0bffe17 	ldw	r2,-8(fp)
   192cc:	10800f17 	ldw	r2,60(r2)
   192d0:	18800526 	beq	r3,r2,192e8 <altera_avalon_jtag_uart_close+0x54>
   192d4:	e0bffe17 	ldw	r2,-8(fp)
   192d8:	10c00917 	ldw	r3,36(r2)
   192dc:	e0bffe17 	ldw	r2,-8(fp)
   192e0:	10800117 	ldw	r2,4(r2)
   192e4:	18bff136 	bltu	r3,r2,192ac <__alt_mem_Flash_flash_data+0xf40192ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   192e8:	0005883a 	mov	r2,zero
}
   192ec:	e037883a 	mov	sp,fp
   192f0:	df000017 	ldw	fp,0(sp)
   192f4:	dec00104 	addi	sp,sp,4
   192f8:	f800283a 	ret

000192fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   192fc:	defffa04 	addi	sp,sp,-24
   19300:	df000515 	stw	fp,20(sp)
   19304:	df000504 	addi	fp,sp,20
   19308:	e13ffd15 	stw	r4,-12(fp)
   1930c:	e17ffe15 	stw	r5,-8(fp)
   19310:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   19314:	00bff9c4 	movi	r2,-25
   19318:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1931c:	e0bffe17 	ldw	r2,-8(fp)
   19320:	10da8060 	cmpeqi	r3,r2,27137
   19324:	1800031e 	bne	r3,zero,19334 <altera_avalon_jtag_uart_ioctl+0x38>
   19328:	109a80a0 	cmpeqi	r2,r2,27138
   1932c:	1000191e 	bne	r2,zero,19394 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   19330:	00002806 	br	193d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   19334:	e0bffd17 	ldw	r2,-12(fp)
   19338:	10c00117 	ldw	r3,4(r2)
   1933c:	00a00034 	movhi	r2,32768
   19340:	10bfffc4 	addi	r2,r2,-1
   19344:	18801226 	beq	r3,r2,19390 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   19348:	e0bfff17 	ldw	r2,-4(fp)
   1934c:	10800017 	ldw	r2,0(r2)
   19350:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   19354:	e0bffc17 	ldw	r2,-16(fp)
   19358:	10800090 	cmplti	r2,r2,2
   1935c:	1000061e 	bne	r2,zero,19378 <altera_avalon_jtag_uart_ioctl+0x7c>
   19360:	e0fffc17 	ldw	r3,-16(fp)
   19364:	00a00034 	movhi	r2,32768
   19368:	10bfffc4 	addi	r2,r2,-1
   1936c:	18800226 	beq	r3,r2,19378 <altera_avalon_jtag_uart_ioctl+0x7c>
   19370:	e0bffc17 	ldw	r2,-16(fp)
   19374:	00000206 	br	19380 <altera_avalon_jtag_uart_ioctl+0x84>
   19378:	00a00034 	movhi	r2,32768
   1937c:	10bfff84 	addi	r2,r2,-2
   19380:	e0fffd17 	ldw	r3,-12(fp)
   19384:	18800115 	stw	r2,4(r3)
      rc = 0;
   19388:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1938c:	00001106 	br	193d4 <altera_avalon_jtag_uart_ioctl+0xd8>
   19390:	00001006 	br	193d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   19394:	e0bffd17 	ldw	r2,-12(fp)
   19398:	10c00117 	ldw	r3,4(r2)
   1939c:	00a00034 	movhi	r2,32768
   193a0:	10bfffc4 	addi	r2,r2,-1
   193a4:	18800a26 	beq	r3,r2,193d0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   193a8:	e0bffd17 	ldw	r2,-12(fp)
   193ac:	10c00917 	ldw	r3,36(r2)
   193b0:	e0bffd17 	ldw	r2,-12(fp)
   193b4:	10800117 	ldw	r2,4(r2)
   193b8:	1885803a 	cmpltu	r2,r3,r2
   193bc:	10c03fcc 	andi	r3,r2,255
   193c0:	e0bfff17 	ldw	r2,-4(fp)
   193c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   193c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   193cc:	00000006 	br	193d0 <altera_avalon_jtag_uart_ioctl+0xd4>
   193d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   193d4:	e0bffb17 	ldw	r2,-20(fp)
}
   193d8:	e037883a 	mov	sp,fp
   193dc:	df000017 	ldw	fp,0(sp)
   193e0:	dec00104 	addi	sp,sp,4
   193e4:	f800283a 	ret

000193e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   193e8:	deffec04 	addi	sp,sp,-80
   193ec:	dfc01315 	stw	ra,76(sp)
   193f0:	df001215 	stw	fp,72(sp)
   193f4:	df001204 	addi	fp,sp,72
   193f8:	e13ffc15 	stw	r4,-16(fp)
   193fc:	e17ffd15 	stw	r5,-12(fp)
   19400:	e1bffe15 	stw	r6,-8(fp)
   19404:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   19408:	e0bffd17 	ldw	r2,-12(fp)
   1940c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   19410:	e0bffc17 	ldw	r2,-16(fp)
   19414:	10800a17 	ldw	r2,40(r2)
   19418:	e0bff415 	stw	r2,-48(fp)
   1941c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   19420:	e0fff50b 	ldhu	r3,-44(fp)
   19424:	e0bffb04 	addi	r2,fp,-20
   19428:	e13ff417 	ldw	r4,-48(fp)
   1942c:	180b883a 	mov	r5,r3
   19430:	100d883a 	mov	r6,r2
   19434:	00162900 	call	16290 <OSSemPend>

  while (space > 0)
   19438:	00006506 	br	195d0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1943c:	e0bffc17 	ldw	r2,-16(fp)
   19440:	10800d17 	ldw	r2,52(r2)
   19444:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   19448:	e0bffc17 	ldw	r2,-16(fp)
   1944c:	10800e17 	ldw	r2,56(r2)
   19450:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   19454:	e0fff117 	ldw	r3,-60(fp)
   19458:	e0bff217 	ldw	r2,-56(fp)
   1945c:	18800536 	bltu	r3,r2,19474 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   19460:	e0fff117 	ldw	r3,-60(fp)
   19464:	e0bff217 	ldw	r2,-56(fp)
   19468:	1885c83a 	sub	r2,r3,r2
   1946c:	e0bff015 	stw	r2,-64(fp)
   19470:	00000406 	br	19484 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   19474:	00c20004 	movi	r3,2048
   19478:	e0bff217 	ldw	r2,-56(fp)
   1947c:	1885c83a 	sub	r2,r3,r2
   19480:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   19484:	e0bff017 	ldw	r2,-64(fp)
   19488:	1000011e 	bne	r2,zero,19490 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1948c:	00001d06 	br	19504 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   19490:	e0fffe17 	ldw	r3,-8(fp)
   19494:	e0bff017 	ldw	r2,-64(fp)
   19498:	1880022e 	bgeu	r3,r2,194a4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1949c:	e0bffe17 	ldw	r2,-8(fp)
   194a0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   194a4:	e0bff217 	ldw	r2,-56(fp)
   194a8:	10801104 	addi	r2,r2,68
   194ac:	e0fffc17 	ldw	r3,-16(fp)
   194b0:	1885883a 	add	r2,r3,r2
   194b4:	e13fef17 	ldw	r4,-68(fp)
   194b8:	100b883a 	mov	r5,r2
   194bc:	e1bff017 	ldw	r6,-64(fp)
   194c0:	00082a40 	call	82a4 <memcpy>
      ptr   += n;
   194c4:	e0ffef17 	ldw	r3,-68(fp)
   194c8:	e0bff017 	ldw	r2,-64(fp)
   194cc:	1885883a 	add	r2,r3,r2
   194d0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   194d4:	e0fffe17 	ldw	r3,-8(fp)
   194d8:	e0bff017 	ldw	r2,-64(fp)
   194dc:	1885c83a 	sub	r2,r3,r2
   194e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   194e4:	e0fff217 	ldw	r3,-56(fp)
   194e8:	e0bff017 	ldw	r2,-64(fp)
   194ec:	1885883a 	add	r2,r3,r2
   194f0:	10c1ffcc 	andi	r3,r2,2047
   194f4:	e0bffc17 	ldw	r2,-16(fp)
   194f8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   194fc:	e0bffe17 	ldw	r2,-8(fp)
   19500:	00bfce16 	blt	zero,r2,1943c <__alt_mem_Flash_flash_data+0xf401943c>

    /* If we read any data then return it */
    if (ptr != buffer)
   19504:	e0ffef17 	ldw	r3,-68(fp)
   19508:	e0bffd17 	ldw	r2,-12(fp)
   1950c:	18800126 	beq	r3,r2,19514 <altera_avalon_jtag_uart_read+0x12c>
      break;
   19510:	00003106 	br	195d8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   19514:	e0bfff17 	ldw	r2,-4(fp)
   19518:	1090000c 	andi	r2,r2,16384
   1951c:	10000126 	beq	r2,zero,19524 <altera_avalon_jtag_uart_read+0x13c>
      break;
   19520:	00002d06 	br	195d8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   19524:	008000b4 	movhi	r2,2
   19528:	1082ac44 	addi	r2,r2,2737
   1952c:	10800003 	ldbu	r2,0(r2)
   19530:	10803fcc 	andi	r2,r2,255
   19534:	10800058 	cmpnei	r2,r2,1
   19538:	1000161e 	bne	r2,zero,19594 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1953c:	e0bffc17 	ldw	r2,-16(fp)
   19540:	10800c17 	ldw	r2,48(r2)
   19544:	e0bff615 	stw	r2,-40(fp)
   19548:	00800144 	movi	r2,5
   1954c:	e0bff70d 	sth	r2,-36(fp)
   19550:	00bfe0c4 	movi	r2,-125
   19554:	e0bff785 	stb	r2,-34(fp)
   19558:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1955c:	008000b4 	movhi	r2,2
   19560:	1082ac44 	addi	r2,r2,2737
   19564:	10800003 	ldbu	r2,0(r2)
   19568:	10803fcc 	andi	r2,r2,255
   1956c:	10001326 	beq	r2,zero,195bc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   19570:	e17ff70b 	ldhu	r5,-36(fp)
   19574:	e1bff783 	ldbu	r6,-34(fp)
   19578:	e0fff80b 	ldhu	r3,-32(fp)
   1957c:	e0bffb44 	addi	r2,fp,-19
   19580:	d8800015 	stw	r2,0(sp)
   19584:	e13ff617 	ldw	r4,-40(fp)
   19588:	180f883a 	mov	r7,r3
   1958c:	00135e80 	call	135e8 <OSFlagPend>
   19590:	00000a06 	br	195bc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   19594:	0001883a 	nop
   19598:	e0bffc17 	ldw	r2,-16(fp)
   1959c:	10c00d17 	ldw	r3,52(r2)
   195a0:	e0bff117 	ldw	r2,-60(fp)
   195a4:	1880051e 	bne	r3,r2,195bc <altera_avalon_jtag_uart_read+0x1d4>
   195a8:	e0bffc17 	ldw	r2,-16(fp)
   195ac:	10c00917 	ldw	r3,36(r2)
   195b0:	e0bffc17 	ldw	r2,-16(fp)
   195b4:	10800117 	ldw	r2,4(r2)
   195b8:	18bff736 	bltu	r3,r2,19598 <__alt_mem_Flash_flash_data+0xf4019598>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   195bc:	e0bffc17 	ldw	r2,-16(fp)
   195c0:	10c00d17 	ldw	r3,52(r2)
   195c4:	e0bff117 	ldw	r2,-60(fp)
   195c8:	1880011e 	bne	r3,r2,195d0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   195cc:	00000206 	br	195d8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   195d0:	e0bffe17 	ldw	r2,-8(fp)
   195d4:	00bf9916 	blt	zero,r2,1943c <__alt_mem_Flash_flash_data+0xf401943c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   195d8:	e0bffc17 	ldw	r2,-16(fp)
   195dc:	10800a17 	ldw	r2,40(r2)
   195e0:	1009883a 	mov	r4,r2
   195e4:	00166640 	call	16664 <OSSemPost>

  if (ptr != buffer)
   195e8:	e0ffef17 	ldw	r3,-68(fp)
   195ec:	e0bffd17 	ldw	r2,-12(fp)
   195f0:	18801826 	beq	r3,r2,19654 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195f4:	0005303a 	rdctl	r2,status
   195f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195fc:	e0fff917 	ldw	r3,-28(fp)
   19600:	00bfff84 	movi	r2,-2
   19604:	1884703a 	and	r2,r3,r2
   19608:	1001703a 	wrctl	status,r2
  
  return context;
   1960c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   19610:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19614:	e0bffc17 	ldw	r2,-16(fp)
   19618:	10800817 	ldw	r2,32(r2)
   1961c:	10c00054 	ori	r3,r2,1
   19620:	e0bffc17 	ldw	r2,-16(fp)
   19624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19628:	e0bffc17 	ldw	r2,-16(fp)
   1962c:	10800017 	ldw	r2,0(r2)
   19630:	10800104 	addi	r2,r2,4
   19634:	1007883a 	mov	r3,r2
   19638:	e0bffc17 	ldw	r2,-16(fp)
   1963c:	10800817 	ldw	r2,32(r2)
   19640:	18800035 	stwio	r2,0(r3)
   19644:	e0bff317 	ldw	r2,-52(fp)
   19648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1964c:	e0bffa17 	ldw	r2,-24(fp)
   19650:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   19654:	e0ffef17 	ldw	r3,-68(fp)
   19658:	e0bffd17 	ldw	r2,-12(fp)
   1965c:	18800426 	beq	r3,r2,19670 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   19660:	e0ffef17 	ldw	r3,-68(fp)
   19664:	e0bffd17 	ldw	r2,-12(fp)
   19668:	1885c83a 	sub	r2,r3,r2
   1966c:	00000606 	br	19688 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   19670:	e0bfff17 	ldw	r2,-4(fp)
   19674:	1090000c 	andi	r2,r2,16384
   19678:	10000226 	beq	r2,zero,19684 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1967c:	00bffd44 	movi	r2,-11
   19680:	00000106 	br	19688 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   19684:	00bffec4 	movi	r2,-5
}
   19688:	e037883a 	mov	sp,fp
   1968c:	dfc00117 	ldw	ra,4(sp)
   19690:	df000017 	ldw	fp,0(sp)
   19694:	dec00204 	addi	sp,sp,8
   19698:	f800283a 	ret

0001969c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1969c:	deffed04 	addi	sp,sp,-76
   196a0:	dfc01215 	stw	ra,72(sp)
   196a4:	df001115 	stw	fp,68(sp)
   196a8:	df001104 	addi	fp,sp,68
   196ac:	e13ffc15 	stw	r4,-16(fp)
   196b0:	e17ffd15 	stw	r5,-12(fp)
   196b4:	e1bffe15 	stw	r6,-8(fp)
   196b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   196bc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   196c0:	e0bffd17 	ldw	r2,-12(fp)
   196c4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   196c8:	e0bffc17 	ldw	r2,-16(fp)
   196cc:	10800b17 	ldw	r2,44(r2)
   196d0:	e0bff515 	stw	r2,-44(fp)
   196d4:	e03ff60d 	sth	zero,-40(fp)
   196d8:	e0fff60b 	ldhu	r3,-40(fp)
   196dc:	e0bffbc4 	addi	r2,fp,-17
   196e0:	e13ff517 	ldw	r4,-44(fp)
   196e4:	180b883a 	mov	r5,r3
   196e8:	100d883a 	mov	r6,r2
   196ec:	00162900 	call	16290 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   196f0:	00003806 	br	197d4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   196f4:	e0bffc17 	ldw	r2,-16(fp)
   196f8:	10800f17 	ldw	r2,60(r2)
   196fc:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   19700:	e0bffc17 	ldw	r2,-16(fp)
   19704:	10801017 	ldw	r2,64(r2)
   19708:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1970c:	e0fff317 	ldw	r3,-52(fp)
   19710:	e0bff017 	ldw	r2,-64(fp)
   19714:	1880062e 	bgeu	r3,r2,19730 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   19718:	e0fff017 	ldw	r3,-64(fp)
   1971c:	e0bff317 	ldw	r2,-52(fp)
   19720:	1885c83a 	sub	r2,r3,r2
   19724:	10bfffc4 	addi	r2,r2,-1
   19728:	e0bff115 	stw	r2,-60(fp)
   1972c:	00000b06 	br	1975c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   19730:	e0bff017 	ldw	r2,-64(fp)
   19734:	10000526 	beq	r2,zero,1974c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   19738:	00c20004 	movi	r3,2048
   1973c:	e0bff317 	ldw	r2,-52(fp)
   19740:	1885c83a 	sub	r2,r3,r2
   19744:	e0bff115 	stw	r2,-60(fp)
   19748:	00000406 	br	1975c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1974c:	00c1ffc4 	movi	r3,2047
   19750:	e0bff317 	ldw	r2,-52(fp)
   19754:	1885c83a 	sub	r2,r3,r2
   19758:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1975c:	e0bff117 	ldw	r2,-60(fp)
   19760:	1000011e 	bne	r2,zero,19768 <altera_avalon_jtag_uart_write+0xcc>
        break;
   19764:	00001d06 	br	197dc <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   19768:	e0fffe17 	ldw	r3,-8(fp)
   1976c:	e0bff117 	ldw	r2,-60(fp)
   19770:	1880022e 	bgeu	r3,r2,1977c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   19774:	e0bffe17 	ldw	r2,-8(fp)
   19778:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1977c:	e0bff317 	ldw	r2,-52(fp)
   19780:	10821104 	addi	r2,r2,2116
   19784:	e0fffc17 	ldw	r3,-16(fp)
   19788:	1885883a 	add	r2,r3,r2
   1978c:	1009883a 	mov	r4,r2
   19790:	e17ffd17 	ldw	r5,-12(fp)
   19794:	e1bff117 	ldw	r6,-60(fp)
   19798:	00082a40 	call	82a4 <memcpy>
      ptr   += n;
   1979c:	e0fffd17 	ldw	r3,-12(fp)
   197a0:	e0bff117 	ldw	r2,-60(fp)
   197a4:	1885883a 	add	r2,r3,r2
   197a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   197ac:	e0fffe17 	ldw	r3,-8(fp)
   197b0:	e0bff117 	ldw	r2,-60(fp)
   197b4:	1885c83a 	sub	r2,r3,r2
   197b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   197bc:	e0fff317 	ldw	r3,-52(fp)
   197c0:	e0bff117 	ldw	r2,-60(fp)
   197c4:	1885883a 	add	r2,r3,r2
   197c8:	10c1ffcc 	andi	r3,r2,2047
   197cc:	e0bffc17 	ldw	r2,-16(fp)
   197d0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   197d4:	e0bffe17 	ldw	r2,-8(fp)
   197d8:	00bfc616 	blt	zero,r2,196f4 <__alt_mem_Flash_flash_data+0xf40196f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   197dc:	0005303a 	rdctl	r2,status
   197e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   197e4:	e0fff717 	ldw	r3,-36(fp)
   197e8:	00bfff84 	movi	r2,-2
   197ec:	1884703a 	and	r2,r3,r2
   197f0:	1001703a 	wrctl	status,r2
  
  return context;
   197f4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   197f8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   197fc:	e0bffc17 	ldw	r2,-16(fp)
   19800:	10800817 	ldw	r2,32(r2)
   19804:	10c00094 	ori	r3,r2,2
   19808:	e0bffc17 	ldw	r2,-16(fp)
   1980c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19810:	e0bffc17 	ldw	r2,-16(fp)
   19814:	10800017 	ldw	r2,0(r2)
   19818:	10800104 	addi	r2,r2,4
   1981c:	1007883a 	mov	r3,r2
   19820:	e0bffc17 	ldw	r2,-16(fp)
   19824:	10800817 	ldw	r2,32(r2)
   19828:	18800035 	stwio	r2,0(r3)
   1982c:	e0bff417 	ldw	r2,-48(fp)
   19830:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19834:	e0bff817 	ldw	r2,-32(fp)
   19838:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1983c:	e0bffe17 	ldw	r2,-8(fp)
   19840:	00802e0e 	bge	zero,r2,198fc <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   19844:	e0bfff17 	ldw	r2,-4(fp)
   19848:	1090000c 	andi	r2,r2,16384
   1984c:	10000126 	beq	r2,zero,19854 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   19850:	00002c06 	br	19904 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   19854:	008000b4 	movhi	r2,2
   19858:	1082ac44 	addi	r2,r2,2737
   1985c:	10800003 	ldbu	r2,0(r2)
   19860:	10803fcc 	andi	r2,r2,255
   19864:	10800058 	cmpnei	r2,r2,1
   19868:	1000161e 	bne	r2,zero,198c4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1986c:	e0bffc17 	ldw	r2,-16(fp)
   19870:	10800c17 	ldw	r2,48(r2)
   19874:	e0bff915 	stw	r2,-28(fp)
   19878:	00800184 	movi	r2,6
   1987c:	e0bffa0d 	sth	r2,-24(fp)
   19880:	00bfe0c4 	movi	r2,-125
   19884:	e0bffa85 	stb	r2,-22(fp)
   19888:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1988c:	008000b4 	movhi	r2,2
   19890:	1082ac44 	addi	r2,r2,2737
   19894:	10800003 	ldbu	r2,0(r2)
   19898:	10803fcc 	andi	r2,r2,255
   1989c:	10001326 	beq	r2,zero,198ec <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   198a0:	e17ffa0b 	ldhu	r5,-24(fp)
   198a4:	e1bffa83 	ldbu	r6,-22(fp)
   198a8:	e0fffb0b 	ldhu	r3,-20(fp)
   198ac:	e0bffb84 	addi	r2,fp,-18
   198b0:	d8800015 	stw	r2,0(sp)
   198b4:	e13ff917 	ldw	r4,-28(fp)
   198b8:	180f883a 	mov	r7,r3
   198bc:	00135e80 	call	135e8 <OSFlagPend>
   198c0:	00000a06 	br	198ec <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   198c4:	0001883a 	nop
   198c8:	e0bffc17 	ldw	r2,-16(fp)
   198cc:	10c01017 	ldw	r3,64(r2)
   198d0:	e0bff017 	ldw	r2,-64(fp)
   198d4:	1880051e 	bne	r3,r2,198ec <altera_avalon_jtag_uart_write+0x250>
   198d8:	e0bffc17 	ldw	r2,-16(fp)
   198dc:	10c00917 	ldw	r3,36(r2)
   198e0:	e0bffc17 	ldw	r2,-16(fp)
   198e4:	10800117 	ldw	r2,4(r2)
   198e8:	18bff736 	bltu	r3,r2,198c8 <__alt_mem_Flash_flash_data+0xf40198c8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   198ec:	e0bffc17 	ldw	r2,-16(fp)
   198f0:	10800917 	ldw	r2,36(r2)
   198f4:	10000126 	beq	r2,zero,198fc <altera_avalon_jtag_uart_write+0x260>
         break;
   198f8:	00000206 	br	19904 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   198fc:	e0bffe17 	ldw	r2,-8(fp)
   19900:	00bf7b16 	blt	zero,r2,196f0 <__alt_mem_Flash_flash_data+0xf40196f0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   19904:	e0bffc17 	ldw	r2,-16(fp)
   19908:	10800b17 	ldw	r2,44(r2)
   1990c:	1009883a 	mov	r4,r2
   19910:	00166640 	call	16664 <OSSemPost>

  if (ptr != start)
   19914:	e0fffd17 	ldw	r3,-12(fp)
   19918:	e0bff217 	ldw	r2,-56(fp)
   1991c:	18800426 	beq	r3,r2,19930 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   19920:	e0fffd17 	ldw	r3,-12(fp)
   19924:	e0bff217 	ldw	r2,-56(fp)
   19928:	1885c83a 	sub	r2,r3,r2
   1992c:	00000606 	br	19948 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   19930:	e0bfff17 	ldw	r2,-4(fp)
   19934:	1090000c 	andi	r2,r2,16384
   19938:	10000226 	beq	r2,zero,19944 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1993c:	00bffd44 	movi	r2,-11
   19940:	00000106 	br	19948 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   19944:	00bffec4 	movi	r2,-5
}
   19948:	e037883a 	mov	sp,fp
   1994c:	dfc00117 	ldw	ra,4(sp)
   19950:	df000017 	ldw	fp,0(sp)
   19954:	dec00204 	addi	sp,sp,8
   19958:	f800283a 	ret

0001995c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1995c:	defff904 	addi	sp,sp,-28
   19960:	dfc00615 	stw	ra,24(sp)
   19964:	df000515 	stw	fp,20(sp)
   19968:	df000504 	addi	fp,sp,20
   1996c:	e13ffe15 	stw	r4,-8(fp)
   19970:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   19974:	0007883a 	mov	r3,zero
   19978:	e0bffe17 	ldw	r2,-8(fp)
   1997c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   19980:	e0bffe17 	ldw	r2,-8(fp)
   19984:	10800104 	addi	r2,r2,4
   19988:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1998c:	0005303a 	rdctl	r2,status
   19990:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19994:	e0fffc17 	ldw	r3,-16(fp)
   19998:	00bfff84 	movi	r2,-2
   1999c:	1884703a 	and	r2,r3,r2
   199a0:	1001703a 	wrctl	status,r2
  
  return context;
   199a4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   199a8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   199ac:	001b9980 	call	1b998 <alt_tick>
   199b0:	e0bffb17 	ldw	r2,-20(fp)
   199b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   199b8:	e0bffd17 	ldw	r2,-12(fp)
   199bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   199c0:	e037883a 	mov	sp,fp
   199c4:	dfc00117 	ldw	ra,4(sp)
   199c8:	df000017 	ldw	fp,0(sp)
   199cc:	dec00204 	addi	sp,sp,8
   199d0:	f800283a 	ret

000199d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   199d4:	defff904 	addi	sp,sp,-28
   199d8:	dfc00615 	stw	ra,24(sp)
   199dc:	df000515 	stw	fp,20(sp)
   199e0:	df000504 	addi	fp,sp,20
   199e4:	e13ffc15 	stw	r4,-16(fp)
   199e8:	e17ffd15 	stw	r5,-12(fp)
   199ec:	e1bffe15 	stw	r6,-8(fp)
   199f0:	e1ffff15 	stw	r7,-4(fp)
   199f4:	e0bfff17 	ldw	r2,-4(fp)
   199f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   199fc:	008000b4 	movhi	r2,2
   19a00:	1082c104 	addi	r2,r2,2820
   19a04:	10800017 	ldw	r2,0(r2)
   19a08:	1000041e 	bne	r2,zero,19a1c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   19a0c:	008000b4 	movhi	r2,2
   19a10:	1082c104 	addi	r2,r2,2820
   19a14:	e0fffb17 	ldw	r3,-20(fp)
   19a18:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   19a1c:	e0bffc17 	ldw	r2,-16(fp)
   19a20:	10800104 	addi	r2,r2,4
   19a24:	00c001c4 	movi	r3,7
   19a28:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   19a2c:	e13ffe17 	ldw	r4,-8(fp)
   19a30:	e17ffc17 	ldw	r5,-16(fp)
   19a34:	018000b4 	movhi	r6,2
   19a38:	31a65704 	addi	r6,r6,-26276
   19a3c:	001b4dc0 	call	1b4dc <alt_irq_register>
#endif  
}
   19a40:	e037883a 	mov	sp,fp
   19a44:	dfc00117 	ldw	ra,4(sp)
   19a48:	df000017 	ldw	fp,0(sp)
   19a4c:	dec00204 	addi	sp,sp,8
   19a50:	f800283a 	ret

00019a54 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   19a54:	defffc04 	addi	sp,sp,-16
   19a58:	df000315 	stw	fp,12(sp)
   19a5c:	df000304 	addi	fp,sp,12
   19a60:	e13ffe15 	stw	r4,-8(fp)
   19a64:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   19a68:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   19a6c:	e0bfff17 	ldw	r2,-4(fp)
   19a70:	1000061e 	bne	r2,zero,19a8c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   19a74:	e0bffe17 	ldw	r2,-8(fp)
   19a78:	1007883a 	mov	r3,r2
   19a7c:	e0bffd03 	ldbu	r2,-12(fp)
   19a80:	1884b03a 	or	r2,r3,r2
   19a84:	e0bffd05 	stb	r2,-12(fp)
   19a88:	00000806 	br	19aac <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   19a8c:	e0bffe17 	ldw	r2,-8(fp)
   19a90:	1007883a 	mov	r3,r2
   19a94:	e0bffd03 	ldbu	r2,-12(fp)
   19a98:	1884b03a 	or	r2,r3,r2
   19a9c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   19aa0:	e0bffd03 	ldbu	r2,-12(fp)
   19aa4:	10801014 	ori	r2,r2,64
   19aa8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   19aac:	e0fffd03 	ldbu	r3,-12(fp)
   19ab0:	00bfe004 	movi	r2,-128
   19ab4:	1884b03a 	or	r2,r3,r2
}
   19ab8:	e037883a 	mov	sp,fp
   19abc:	df000017 	ldw	fp,0(sp)
   19ac0:	dec00104 	addi	sp,sp,4
   19ac4:	f800283a 	ret

00019ac8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   19ac8:	defffd04 	addi	sp,sp,-12
   19acc:	df000215 	stw	fp,8(sp)
   19ad0:	df000204 	addi	fp,sp,8
   19ad4:	e13ffe15 	stw	r4,-8(fp)
   19ad8:	2805883a 	mov	r2,r5
   19adc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   19ae0:	e0bffe17 	ldw	r2,-8(fp)
   19ae4:	10800a17 	ldw	r2,40(r2)
   19ae8:	1007883a 	mov	r3,r2
   19aec:	e0bfff03 	ldbu	r2,-4(fp)
   19af0:	18800025 	stbio	r2,0(r3)
}
   19af4:	e037883a 	mov	sp,fp
   19af8:	df000017 	ldw	fp,0(sp)
   19afc:	dec00104 	addi	sp,sp,4
   19b00:	f800283a 	ret

00019b04 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   19b04:	defffe04 	addi	sp,sp,-8
   19b08:	df000115 	stw	fp,4(sp)
   19b0c:	df000104 	addi	fp,sp,4
   19b10:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   19b14:	e0bfff17 	ldw	r2,-4(fp)
   19b18:	10800a17 	ldw	r2,40(r2)
   19b1c:	1007883a 	mov	r3,r2
   19b20:	00800044 	movi	r2,1
   19b24:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   19b28:	e037883a 	mov	sp,fp
   19b2c:	df000017 	ldw	fp,0(sp)
   19b30:	dec00104 	addi	sp,sp,4
   19b34:	f800283a 	ret

00019b38 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   19b38:	defffc04 	addi	sp,sp,-16
   19b3c:	dfc00315 	stw	ra,12(sp)
   19b40:	df000215 	stw	fp,8(sp)
   19b44:	df000204 	addi	fp,sp,8
   19b48:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   19b4c:	e13fff17 	ldw	r4,-4(fp)
   19b50:	014000b4 	movhi	r5,2
   19b54:	297aa204 	addi	r5,r5,-5496
   19b58:	001b2e40 	call	1b2e4 <alt_find_dev>
   19b5c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19b60:	e0bffe17 	ldw	r2,-8(fp)
}
   19b64:	e037883a 	mov	sp,fp
   19b68:	dfc00117 	ldw	ra,4(sp)
   19b6c:	df000017 	ldw	fp,0(sp)
   19b70:	dec00204 	addi	sp,sp,8
   19b74:	f800283a 	ret

00019b78 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   19b78:	defffb04 	addi	sp,sp,-20
   19b7c:	df000415 	stw	fp,16(sp)
   19b80:	df000404 	addi	fp,sp,16
   19b84:	e13ffd15 	stw	r4,-12(fp)
   19b88:	e17ffe15 	stw	r5,-8(fp)
   19b8c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19b90:	e03ffc15 	stw	zero,-16(fp)
   19b94:	00000f06 	br	19bd4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   19b98:	e0bffd17 	ldw	r2,-12(fp)
   19b9c:	10800a17 	ldw	r2,40(r2)
   19ba0:	10800044 	addi	r2,r2,1
   19ba4:	1009883a 	mov	r4,r2
   19ba8:	e0fffe17 	ldw	r3,-8(fp)
   19bac:	e0bffc17 	ldw	r2,-16(fp)
   19bb0:	1885883a 	add	r2,r3,r2
   19bb4:	10800003 	ldbu	r2,0(r2)
   19bb8:	10803fcc 	andi	r2,r2,255
   19bbc:	1080201c 	xori	r2,r2,128
   19bc0:	10bfe004 	addi	r2,r2,-128
   19bc4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   19bc8:	e0bffc17 	ldw	r2,-16(fp)
   19bcc:	10800044 	addi	r2,r2,1
   19bd0:	e0bffc15 	stw	r2,-16(fp)
   19bd4:	e0fffc17 	ldw	r3,-16(fp)
   19bd8:	e0bfff17 	ldw	r2,-4(fp)
   19bdc:	18bfee36 	bltu	r3,r2,19b98 <__alt_mem_Flash_flash_data+0xf4019b98>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   19be0:	e037883a 	mov	sp,fp
   19be4:	df000017 	ldw	fp,0(sp)
   19be8:	dec00104 	addi	sp,sp,4
   19bec:	f800283a 	ret

00019bf0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   19bf0:	defffd04 	addi	sp,sp,-12
   19bf4:	df000215 	stw	fp,8(sp)
   19bf8:	df000204 	addi	fp,sp,8
   19bfc:	e13ffe15 	stw	r4,-8(fp)
   19c00:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   19c04:	00000d06 	br	19c3c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   19c08:	e0bffe17 	ldw	r2,-8(fp)
   19c0c:	10800a17 	ldw	r2,40(r2)
   19c10:	10800044 	addi	r2,r2,1
   19c14:	1007883a 	mov	r3,r2
   19c18:	e0bfff17 	ldw	r2,-4(fp)
   19c1c:	10800003 	ldbu	r2,0(r2)
   19c20:	10803fcc 	andi	r2,r2,255
   19c24:	1080201c 	xori	r2,r2,128
   19c28:	10bfe004 	addi	r2,r2,-128
   19c2c:	18800025 	stbio	r2,0(r3)
		++ptr;
   19c30:	e0bfff17 	ldw	r2,-4(fp)
   19c34:	10800044 	addi	r2,r2,1
   19c38:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   19c3c:	e0bfff17 	ldw	r2,-4(fp)
   19c40:	10800003 	ldbu	r2,0(r2)
   19c44:	10803fcc 	andi	r2,r2,255
   19c48:	1080201c 	xori	r2,r2,128
   19c4c:	10bfe004 	addi	r2,r2,-128
   19c50:	103fed1e 	bne	r2,zero,19c08 <__alt_mem_Flash_flash_data+0xf4019c08>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   19c54:	e037883a 	mov	sp,fp
   19c58:	df000017 	ldw	fp,0(sp)
   19c5c:	dec00104 	addi	sp,sp,4
   19c60:	f800283a 	ret

00019c64 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   19c64:	defffb04 	addi	sp,sp,-20
   19c68:	dfc00415 	stw	ra,16(sp)
   19c6c:	df000315 	stw	fp,12(sp)
   19c70:	df000304 	addi	fp,sp,12
   19c74:	e13ffd15 	stw	r4,-12(fp)
   19c78:	e17ffe15 	stw	r5,-8(fp)
   19c7c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   19c80:	e0bffd17 	ldw	r2,-12(fp)
   19c84:	10c00017 	ldw	r3,0(r2)
   19c88:	e0bfff17 	ldw	r2,-4(fp)
   19c8c:	1809883a 	mov	r4,r3
   19c90:	e17ffe17 	ldw	r5,-8(fp)
   19c94:	100d883a 	mov	r6,r2
   19c98:	0019b780 	call	19b78 <alt_up_character_lcd_write>
	return 0;
   19c9c:	0005883a 	mov	r2,zero
}
   19ca0:	e037883a 	mov	sp,fp
   19ca4:	dfc00117 	ldw	ra,4(sp)
   19ca8:	df000017 	ldw	fp,0(sp)
   19cac:	dec00204 	addi	sp,sp,8
   19cb0:	f800283a 	ret

00019cb4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   19cb4:	defffa04 	addi	sp,sp,-24
   19cb8:	dfc00515 	stw	ra,20(sp)
   19cbc:	df000415 	stw	fp,16(sp)
   19cc0:	df000404 	addi	fp,sp,16
   19cc4:	e13ffd15 	stw	r4,-12(fp)
   19cc8:	e17ffe15 	stw	r5,-8(fp)
   19ccc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   19cd0:	e0bffe17 	ldw	r2,-8(fp)
   19cd4:	10800a28 	cmpgeui	r2,r2,40
   19cd8:	1000031e 	bne	r2,zero,19ce8 <alt_up_character_lcd_set_cursor_pos+0x34>
   19cdc:	e0bfff17 	ldw	r2,-4(fp)
   19ce0:	108000b0 	cmpltui	r2,r2,2
   19ce4:	1000021e 	bne	r2,zero,19cf0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   19ce8:	00bfffc4 	movi	r2,-1
   19cec:	00000906 	br	19d14 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19cf0:	e13ffe17 	ldw	r4,-8(fp)
   19cf4:	e17fff17 	ldw	r5,-4(fp)
   19cf8:	0019a540 	call	19a54 <get_DDRAM_addr>
   19cfc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   19d00:	e0bffc03 	ldbu	r2,-16(fp)
   19d04:	e13ffd17 	ldw	r4,-12(fp)
   19d08:	100b883a 	mov	r5,r2
   19d0c:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
	return 0;
   19d10:	0005883a 	mov	r2,zero
}
   19d14:	e037883a 	mov	sp,fp
   19d18:	dfc00117 	ldw	ra,4(sp)
   19d1c:	df000017 	ldw	fp,0(sp)
   19d20:	dec00204 	addi	sp,sp,8
   19d24:	f800283a 	ret

00019d28 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19d28:	defffb04 	addi	sp,sp,-20
   19d2c:	dfc00415 	stw	ra,16(sp)
   19d30:	df000315 	stw	fp,12(sp)
   19d34:	df000304 	addi	fp,sp,12
   19d38:	e13ffe15 	stw	r4,-8(fp)
   19d3c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19d40:	e0bfff17 	ldw	r2,-4(fp)
   19d44:	1000011e 	bne	r2,zero,19d4c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   19d48:	00001406 	br	19d9c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19d4c:	e0bfff17 	ldw	r2,-4(fp)
   19d50:	0080020e 	bge	zero,r2,19d5c <alt_up_character_lcd_shift_cursor+0x34>
   19d54:	00800504 	movi	r2,20
   19d58:	00000106 	br	19d60 <alt_up_character_lcd_shift_cursor+0x38>
   19d5c:	00800404 	movi	r2,16
   19d60:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19d64:	e0bfff17 	ldw	r2,-4(fp)
   19d68:	1000010e 	bge	r2,zero,19d70 <alt_up_character_lcd_shift_cursor+0x48>
   19d6c:	0085c83a 	sub	r2,zero,r2
   19d70:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19d74:	00000406 	br	19d88 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19d78:	e0bffd43 	ldbu	r2,-11(fp)
   19d7c:	e13ffe17 	ldw	r4,-8(fp)
   19d80:	100b883a 	mov	r5,r2
   19d84:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19d88:	e0bffd03 	ldbu	r2,-12(fp)
   19d8c:	10ffffc4 	addi	r3,r2,-1
   19d90:	e0fffd05 	stb	r3,-12(fp)
   19d94:	10803fcc 	andi	r2,r2,255
   19d98:	103ff71e 	bne	r2,zero,19d78 <__alt_mem_Flash_flash_data+0xf4019d78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19d9c:	e037883a 	mov	sp,fp
   19da0:	dfc00117 	ldw	ra,4(sp)
   19da4:	df000017 	ldw	fp,0(sp)
   19da8:	dec00204 	addi	sp,sp,8
   19dac:	f800283a 	ret

00019db0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19db0:	defffb04 	addi	sp,sp,-20
   19db4:	dfc00415 	stw	ra,16(sp)
   19db8:	df000315 	stw	fp,12(sp)
   19dbc:	df000304 	addi	fp,sp,12
   19dc0:	e13ffe15 	stw	r4,-8(fp)
   19dc4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19dc8:	e0bfff17 	ldw	r2,-4(fp)
   19dcc:	1000011e 	bne	r2,zero,19dd4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   19dd0:	00001406 	br	19e24 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19dd4:	e0bfff17 	ldw	r2,-4(fp)
   19dd8:	0080020e 	bge	zero,r2,19de4 <alt_up_character_lcd_shift_display+0x34>
   19ddc:	00800704 	movi	r2,28
   19de0:	00000106 	br	19de8 <alt_up_character_lcd_shift_display+0x38>
   19de4:	00800604 	movi	r2,24
   19de8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19dec:	e0bfff17 	ldw	r2,-4(fp)
   19df0:	1000010e 	bge	r2,zero,19df8 <alt_up_character_lcd_shift_display+0x48>
   19df4:	0085c83a 	sub	r2,zero,r2
   19df8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19dfc:	00000406 	br	19e10 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19e00:	e0bffd43 	ldbu	r2,-11(fp)
   19e04:	e13ffe17 	ldw	r4,-8(fp)
   19e08:	100b883a 	mov	r5,r2
   19e0c:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19e10:	e0bffd03 	ldbu	r2,-12(fp)
   19e14:	10ffffc4 	addi	r3,r2,-1
   19e18:	e0fffd05 	stb	r3,-12(fp)
   19e1c:	10803fcc 	andi	r2,r2,255
   19e20:	103ff71e 	bne	r2,zero,19e00 <__alt_mem_Flash_flash_data+0xf4019e00>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19e24:	e037883a 	mov	sp,fp
   19e28:	dfc00117 	ldw	ra,4(sp)
   19e2c:	df000017 	ldw	fp,0(sp)
   19e30:	dec00204 	addi	sp,sp,8
   19e34:	f800283a 	ret

00019e38 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   19e38:	defffa04 	addi	sp,sp,-24
   19e3c:	dfc00515 	stw	ra,20(sp)
   19e40:	df000415 	stw	fp,16(sp)
   19e44:	df000404 	addi	fp,sp,16
   19e48:	e13ffd15 	stw	r4,-12(fp)
   19e4c:	e17ffe15 	stw	r5,-8(fp)
   19e50:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   19e54:	e0bffe17 	ldw	r2,-8(fp)
   19e58:	10800a28 	cmpgeui	r2,r2,40
   19e5c:	1000031e 	bne	r2,zero,19e6c <alt_up_character_lcd_erase_pos+0x34>
   19e60:	e0bfff17 	ldw	r2,-4(fp)
   19e64:	108000b0 	cmpltui	r2,r2,2
   19e68:	1000021e 	bne	r2,zero,19e74 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   19e6c:	00bfffc4 	movi	r2,-1
   19e70:	00000f06 	br	19eb0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19e74:	e13ffe17 	ldw	r4,-8(fp)
   19e78:	e17fff17 	ldw	r5,-4(fp)
   19e7c:	0019a540 	call	19a54 <get_DDRAM_addr>
   19e80:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   19e84:	e0bffc03 	ldbu	r2,-16(fp)
   19e88:	e13ffd17 	ldw	r4,-12(fp)
   19e8c:	100b883a 	mov	r5,r2
   19e90:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   19e94:	e0bffd17 	ldw	r2,-12(fp)
   19e98:	10800a17 	ldw	r2,40(r2)
   19e9c:	10800044 	addi	r2,r2,1
   19ea0:	1007883a 	mov	r3,r2
   19ea4:	00800084 	movi	r2,2
   19ea8:	18800025 	stbio	r2,0(r3)
	return 0;
   19eac:	0005883a 	mov	r2,zero
}
   19eb0:	e037883a 	mov	sp,fp
   19eb4:	dfc00117 	ldw	ra,4(sp)
   19eb8:	df000017 	ldw	fp,0(sp)
   19ebc:	dec00204 	addi	sp,sp,8
   19ec0:	f800283a 	ret

00019ec4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   19ec4:	defffd04 	addi	sp,sp,-12
   19ec8:	dfc00215 	stw	ra,8(sp)
   19ecc:	df000115 	stw	fp,4(sp)
   19ed0:	df000104 	addi	fp,sp,4
   19ed4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   19ed8:	e13fff17 	ldw	r4,-4(fp)
   19edc:	01400304 	movi	r5,12
   19ee0:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
}
   19ee4:	e037883a 	mov	sp,fp
   19ee8:	dfc00117 	ldw	ra,4(sp)
   19eec:	df000017 	ldw	fp,0(sp)
   19ef0:	dec00204 	addi	sp,sp,8
   19ef4:	f800283a 	ret

00019ef8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   19ef8:	defffd04 	addi	sp,sp,-12
   19efc:	dfc00215 	stw	ra,8(sp)
   19f00:	df000115 	stw	fp,4(sp)
   19f04:	df000104 	addi	fp,sp,4
   19f08:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   19f0c:	e13fff17 	ldw	r4,-4(fp)
   19f10:	014003c4 	movi	r5,15
   19f14:	0019ac80 	call	19ac8 <alt_up_character_lcd_send_cmd>
}
   19f18:	e037883a 	mov	sp,fp
   19f1c:	dfc00117 	ldw	ra,4(sp)
   19f20:	df000017 	ldw	fp,0(sp)
   19f24:	dec00204 	addi	sp,sp,8
   19f28:	f800283a 	ret

00019f2c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   19f2c:	defffd04 	addi	sp,sp,-12
   19f30:	df000215 	stw	fp,8(sp)
   19f34:	df000204 	addi	fp,sp,8
   19f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19f3c:	e0bfff17 	ldw	r2,-4(fp)
   19f40:	10800a17 	ldw	r2,40(r2)
   19f44:	10800104 	addi	r2,r2,4
   19f48:	10800037 	ldwio	r2,0(r2)
   19f4c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   19f50:	e0bffe17 	ldw	r2,-8(fp)
   19f54:	10800054 	ori	r2,r2,1
   19f58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   19f5c:	e0bfff17 	ldw	r2,-4(fp)
   19f60:	10800a17 	ldw	r2,40(r2)
   19f64:	10800104 	addi	r2,r2,4
   19f68:	1007883a 	mov	r3,r2
   19f6c:	e0bffe17 	ldw	r2,-8(fp)
   19f70:	18800035 	stwio	r2,0(r3)
}
   19f74:	e037883a 	mov	sp,fp
   19f78:	df000017 	ldw	fp,0(sp)
   19f7c:	dec00104 	addi	sp,sp,4
   19f80:	f800283a 	ret

00019f84 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   19f84:	defffd04 	addi	sp,sp,-12
   19f88:	df000215 	stw	fp,8(sp)
   19f8c:	df000204 	addi	fp,sp,8
   19f90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19f94:	e0bfff17 	ldw	r2,-4(fp)
   19f98:	10800a17 	ldw	r2,40(r2)
   19f9c:	10800104 	addi	r2,r2,4
   19fa0:	10800037 	ldwio	r2,0(r2)
   19fa4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   19fa8:	e0fffe17 	ldw	r3,-8(fp)
   19fac:	00bfff84 	movi	r2,-2
   19fb0:	1884703a 	and	r2,r3,r2
   19fb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   19fb8:	e0bfff17 	ldw	r2,-4(fp)
   19fbc:	10800a17 	ldw	r2,40(r2)
   19fc0:	10800104 	addi	r2,r2,4
   19fc4:	1007883a 	mov	r3,r2
   19fc8:	e0bffe17 	ldw	r2,-8(fp)
   19fcc:	18800035 	stwio	r2,0(r3)
}
   19fd0:	e037883a 	mov	sp,fp
   19fd4:	df000017 	ldw	fp,0(sp)
   19fd8:	dec00104 	addi	sp,sp,4
   19fdc:	f800283a 	ret

00019fe0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   19fe0:	defffd04 	addi	sp,sp,-12
   19fe4:	df000215 	stw	fp,8(sp)
   19fe8:	df000204 	addi	fp,sp,8
   19fec:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19ff0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   19ff4:	e0bfff17 	ldw	r2,-4(fp)
   19ff8:	10800a17 	ldw	r2,40(r2)
   19ffc:	10800084 	addi	r2,r2,2
   1a000:	1080002b 	ldhuio	r2,0(r2)
   1a004:	10bfffcc 	andi	r2,r2,65535
   1a008:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1a00c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a010:	e037883a 	mov	sp,fp
   1a014:	df000017 	ldw	fp,0(sp)
   1a018:	dec00104 	addi	sp,sp,4
   1a01c:	f800283a 	ret

0001a020 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1a020:	defffd04 	addi	sp,sp,-12
   1a024:	df000215 	stw	fp,8(sp)
   1a028:	df000204 	addi	fp,sp,8
   1a02c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1a030:	e0bfff17 	ldw	r2,-4(fp)
   1a034:	10800a17 	ldw	r2,40(r2)
   1a038:	10800104 	addi	r2,r2,4
   1a03c:	10800037 	ldwio	r2,0(r2)
   1a040:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1a044:	e0bffe17 	ldw	r2,-8(fp)
   1a048:	1004d43a 	srli	r2,r2,16
}
   1a04c:	e037883a 	mov	sp,fp
   1a050:	df000017 	ldw	fp,0(sp)
   1a054:	dec00104 	addi	sp,sp,4
   1a058:	f800283a 	ret

0001a05c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1a05c:	defffd04 	addi	sp,sp,-12
   1a060:	df000215 	stw	fp,8(sp)
   1a064:	df000204 	addi	fp,sp,8
   1a068:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1a06c:	e0bfff17 	ldw	r2,-4(fp)
   1a070:	1080800c 	andi	r2,r2,512
   1a074:	1004d27a 	srli	r2,r2,9
   1a078:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1a07c:	e0bffe17 	ldw	r2,-8(fp)
   1a080:	10000226 	beq	r2,zero,1a08c <alt_up_irda_check_parity+0x30>
   1a084:	00bfffc4 	movi	r2,-1
   1a088:	00000106 	br	1a090 <alt_up_irda_check_parity+0x34>
   1a08c:	0005883a 	mov	r2,zero
}
   1a090:	e037883a 	mov	sp,fp
   1a094:	df000017 	ldw	fp,0(sp)
   1a098:	dec00104 	addi	sp,sp,4
   1a09c:	f800283a 	ret

0001a0a0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1a0a0:	defffd04 	addi	sp,sp,-12
   1a0a4:	df000215 	stw	fp,8(sp)
   1a0a8:	df000204 	addi	fp,sp,8
   1a0ac:	e13ffe15 	stw	r4,-8(fp)
   1a0b0:	2805883a 	mov	r2,r5
   1a0b4:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1a0b8:	e0bffe17 	ldw	r2,-8(fp)
   1a0bc:	10800a17 	ldw	r2,40(r2)
   1a0c0:	1007883a 	mov	r3,r2
   1a0c4:	e0bfff03 	ldbu	r2,-4(fp)
   1a0c8:	18800035 	stwio	r2,0(r3)
	return 0;
   1a0cc:	0005883a 	mov	r2,zero
}
   1a0d0:	e037883a 	mov	sp,fp
   1a0d4:	df000017 	ldw	fp,0(sp)
   1a0d8:	dec00104 	addi	sp,sp,4
   1a0dc:	f800283a 	ret

0001a0e0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1a0e0:	defffa04 	addi	sp,sp,-24
   1a0e4:	dfc00515 	stw	ra,20(sp)
   1a0e8:	df000415 	stw	fp,16(sp)
   1a0ec:	df000404 	addi	fp,sp,16
   1a0f0:	e13ffd15 	stw	r4,-12(fp)
   1a0f4:	e17ffe15 	stw	r5,-8(fp)
   1a0f8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1a0fc:	e0bffd17 	ldw	r2,-12(fp)
   1a100:	10800a17 	ldw	r2,40(r2)
   1a104:	10800037 	ldwio	r2,0(r2)
   1a108:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1a10c:	e0bffc17 	ldw	r2,-16(fp)
   1a110:	1007883a 	mov	r3,r2
   1a114:	e0bffe17 	ldw	r2,-8(fp)
   1a118:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1a11c:	e13ffc17 	ldw	r4,-16(fp)
   1a120:	001a05c0 	call	1a05c <alt_up_irda_check_parity>
   1a124:	1007883a 	mov	r3,r2
   1a128:	e0bfff17 	ldw	r2,-4(fp)
   1a12c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1a130:	e0bffc17 	ldw	r2,-16(fp)
   1a134:	10a0000c 	andi	r2,r2,32768
   1a138:	1004d3fa 	srli	r2,r2,15
   1a13c:	10bfffc4 	addi	r2,r2,-1
}
   1a140:	e037883a 	mov	sp,fp
   1a144:	dfc00117 	ldw	ra,4(sp)
   1a148:	df000017 	ldw	fp,0(sp)
   1a14c:	dec00204 	addi	sp,sp,8
   1a150:	f800283a 	ret

0001a154 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a154:	defff804 	addi	sp,sp,-32
   1a158:	dfc00715 	stw	ra,28(sp)
   1a15c:	df000615 	stw	fp,24(sp)
   1a160:	df000604 	addi	fp,sp,24
   1a164:	e13ffd15 	stw	r4,-12(fp)
   1a168:	e17ffe15 	stw	r5,-8(fp)
   1a16c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a170:	e0bffd17 	ldw	r2,-12(fp)
   1a174:	10800017 	ldw	r2,0(r2)
   1a178:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1a17c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1a180:	00000e06 	br	1a1bc <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1a184:	e0bffe17 	ldw	r2,-8(fp)
   1a188:	10c00044 	addi	r3,r2,1
   1a18c:	e0fffe15 	stw	r3,-8(fp)
   1a190:	e0fffc04 	addi	r3,fp,-16
   1a194:	e13ffb17 	ldw	r4,-20(fp)
   1a198:	100b883a 	mov	r5,r2
   1a19c:	180d883a 	mov	r6,r3
   1a1a0:	001a0e00 	call	1a0e0 <alt_up_irda_read_data>
   1a1a4:	1000041e 	bne	r2,zero,1a1b8 <alt_up_irda_read_fd+0x64>
			count++;
   1a1a8:	e0bffa17 	ldw	r2,-24(fp)
   1a1ac:	10800044 	addi	r2,r2,1
   1a1b0:	e0bffa15 	stw	r2,-24(fp)
   1a1b4:	00000106 	br	1a1bc <alt_up_irda_read_fd+0x68>
		else
			break;
   1a1b8:	00000406 	br	1a1cc <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1a1bc:	e0bfff17 	ldw	r2,-4(fp)
   1a1c0:	10ffffc4 	addi	r3,r2,-1
   1a1c4:	e0ffff15 	stw	r3,-4(fp)
   1a1c8:	103fee1e 	bne	r2,zero,1a184 <__alt_mem_Flash_flash_data+0xf401a184>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1a1cc:	e0bffa17 	ldw	r2,-24(fp)
}
   1a1d0:	e037883a 	mov	sp,fp
   1a1d4:	dfc00117 	ldw	ra,4(sp)
   1a1d8:	df000017 	ldw	fp,0(sp)
   1a1dc:	dec00204 	addi	sp,sp,8
   1a1e0:	f800283a 	ret

0001a1e4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a1e4:	defff904 	addi	sp,sp,-28
   1a1e8:	dfc00615 	stw	ra,24(sp)
   1a1ec:	df000515 	stw	fp,20(sp)
   1a1f0:	df000504 	addi	fp,sp,20
   1a1f4:	e13ffd15 	stw	r4,-12(fp)
   1a1f8:	e17ffe15 	stw	r5,-8(fp)
   1a1fc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a200:	e0bffd17 	ldw	r2,-12(fp)
   1a204:	10800017 	ldw	r2,0(r2)
   1a208:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1a20c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1a210:	00000e06 	br	1a24c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1a214:	e0bffe17 	ldw	r2,-8(fp)
   1a218:	10c00044 	addi	r3,r2,1
   1a21c:	e0fffe15 	stw	r3,-8(fp)
   1a220:	10800003 	ldbu	r2,0(r2)
   1a224:	10803fcc 	andi	r2,r2,255
   1a228:	e13ffc17 	ldw	r4,-16(fp)
   1a22c:	100b883a 	mov	r5,r2
   1a230:	001a0a00 	call	1a0a0 <alt_up_irda_write_data>
   1a234:	1000041e 	bne	r2,zero,1a248 <alt_up_irda_write_fd+0x64>
			count++;
   1a238:	e0bffb17 	ldw	r2,-20(fp)
   1a23c:	10800044 	addi	r2,r2,1
   1a240:	e0bffb15 	stw	r2,-20(fp)
   1a244:	00000106 	br	1a24c <alt_up_irda_write_fd+0x68>
		else
			break;
   1a248:	00000406 	br	1a25c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1a24c:	e0bfff17 	ldw	r2,-4(fp)
   1a250:	10ffffc4 	addi	r3,r2,-1
   1a254:	e0ffff15 	stw	r3,-4(fp)
   1a258:	103fee1e 	bne	r2,zero,1a214 <__alt_mem_Flash_flash_data+0xf401a214>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1a25c:	e0bffb17 	ldw	r2,-20(fp)
}
   1a260:	e037883a 	mov	sp,fp
   1a264:	dfc00117 	ldw	ra,4(sp)
   1a268:	df000017 	ldw	fp,0(sp)
   1a26c:	dec00204 	addi	sp,sp,8
   1a270:	f800283a 	ret

0001a274 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1a274:	defffc04 	addi	sp,sp,-16
   1a278:	dfc00315 	stw	ra,12(sp)
   1a27c:	df000215 	stw	fp,8(sp)
   1a280:	df000204 	addi	fp,sp,8
   1a284:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1a288:	e13fff17 	ldw	r4,-4(fp)
   1a28c:	014000b4 	movhi	r5,2
   1a290:	297aa204 	addi	r5,r5,-5496
   1a294:	001b2e40 	call	1b2e4 <alt_find_dev>
   1a298:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a29c:	e0bffe17 	ldw	r2,-8(fp)
}
   1a2a0:	e037883a 	mov	sp,fp
   1a2a4:	dfc00117 	ldw	ra,4(sp)
   1a2a8:	df000017 	ldw	fp,0(sp)
   1a2ac:	dec00204 	addi	sp,sp,8
   1a2b0:	f800283a 	ret

0001a2b4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1a2b4:	defffd04 	addi	sp,sp,-12
   1a2b8:	df000215 	stw	fp,8(sp)
   1a2bc:	df000204 	addi	fp,sp,8
   1a2c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1a2c4:	e0bfff17 	ldw	r2,-4(fp)
   1a2c8:	1080400c 	andi	r2,r2,256
   1a2cc:	1004d23a 	srli	r2,r2,8
   1a2d0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1a2d4:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a2d8:	e037883a 	mov	sp,fp
   1a2dc:	df000017 	ldw	fp,0(sp)
   1a2e0:	dec00104 	addi	sp,sp,4
   1a2e4:	f800283a 	ret

0001a2e8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1a2e8:	defffd04 	addi	sp,sp,-12
   1a2ec:	df000215 	stw	fp,8(sp)
   1a2f0:	df000204 	addi	fp,sp,8
   1a2f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1a2f8:	e0bfff17 	ldw	r2,-4(fp)
   1a2fc:	1080004c 	andi	r2,r2,1
   1a300:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a304:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a308:	e037883a 	mov	sp,fp
   1a30c:	df000017 	ldw	fp,0(sp)
   1a310:	dec00104 	addi	sp,sp,4
   1a314:	f800283a 	ret

0001a318 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1a318:	defffd04 	addi	sp,sp,-12
   1a31c:	df000215 	stw	fp,8(sp)
   1a320:	df000204 	addi	fp,sp,8
   1a324:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1a328:	e0bfff17 	ldw	r2,-4(fp)
   1a32c:	1081000c 	andi	r2,r2,1024
   1a330:	1004d2ba 	srli	r2,r2,10
   1a334:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a338:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a33c:	e037883a 	mov	sp,fp
   1a340:	df000017 	ldw	fp,0(sp)
   1a344:	dec00104 	addi	sp,sp,4
   1a348:	f800283a 	ret

0001a34c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1a34c:	defffd04 	addi	sp,sp,-12
   1a350:	df000215 	stw	fp,8(sp)
   1a354:	df000204 	addi	fp,sp,8
   1a358:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1a35c:	e0bfff17 	ldw	r2,-4(fp)
   1a360:	1004d43a 	srli	r2,r2,16
   1a364:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1a368:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a36c:	e037883a 	mov	sp,fp
   1a370:	df000017 	ldw	fp,0(sp)
   1a374:	dec00104 	addi	sp,sp,4
   1a378:	f800283a 	ret

0001a37c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1a37c:	defffd04 	addi	sp,sp,-12
   1a380:	df000215 	stw	fp,8(sp)
   1a384:	df000204 	addi	fp,sp,8
   1a388:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1a38c:	e0bfff17 	ldw	r2,-4(fp)
   1a390:	10a0000c 	andi	r2,r2,32768
   1a394:	1004d3fa 	srli	r2,r2,15
   1a398:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1a39c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a3a0:	e037883a 	mov	sp,fp
   1a3a4:	df000017 	ldw	fp,0(sp)
   1a3a8:	dec00104 	addi	sp,sp,4
   1a3ac:	f800283a 	ret

0001a3b0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1a3b0:	defffd04 	addi	sp,sp,-12
   1a3b4:	df000215 	stw	fp,8(sp)
   1a3b8:	df000204 	addi	fp,sp,8
   1a3bc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1a3c0:	e0bfff17 	ldw	r2,-4(fp)
   1a3c4:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1a3c8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a3cc:	e037883a 	mov	sp,fp
   1a3d0:	df000017 	ldw	fp,0(sp)
   1a3d4:	dec00104 	addi	sp,sp,4
   1a3d8:	f800283a 	ret

0001a3dc <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1a3dc:	defffb04 	addi	sp,sp,-20
   1a3e0:	dfc00415 	stw	ra,16(sp)
   1a3e4:	df000315 	stw	fp,12(sp)
   1a3e8:	df000304 	addi	fp,sp,12
   1a3ec:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1a3f0:	e13fff17 	ldw	r4,-4(fp)
   1a3f4:	01403fc4 	movi	r5,255
   1a3f8:	001a6380 	call	1a638 <alt_up_ps2_write_data_byte_with_ack>
   1a3fc:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1a400:	e0bffd17 	ldw	r2,-12(fp)
   1a404:	1000211e 	bne	r2,zero,1a48c <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a408:	e0bffe04 	addi	r2,fp,-8
   1a40c:	e13fff17 	ldw	r4,-4(fp)
   1a410:	100b883a 	mov	r5,r2
   1a414:	001a69c0 	call	1a69c <alt_up_ps2_read_data_byte_timeout>
   1a418:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1a41c:	e0bffd17 	ldw	r2,-12(fp)
   1a420:	10001a1e 	bne	r2,zero,1a48c <alt_up_ps2_init+0xb0>
   1a424:	e0bffe03 	ldbu	r2,-8(fp)
   1a428:	10803fcc 	andi	r2,r2,255
   1a42c:	10802a98 	cmpnei	r2,r2,170
   1a430:	1000161e 	bne	r2,zero,1a48c <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a434:	e0bffe04 	addi	r2,fp,-8
   1a438:	e13fff17 	ldw	r4,-4(fp)
   1a43c:	100b883a 	mov	r5,r2
   1a440:	001a69c0 	call	1a69c <alt_up_ps2_read_data_byte_timeout>
   1a444:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1a448:	e0bffd17 	ldw	r2,-12(fp)
   1a44c:	10bfe318 	cmpnei	r2,r2,-116
   1a450:	1000041e 	bne	r2,zero,1a464 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1a454:	e0bfff17 	ldw	r2,-4(fp)
   1a458:	00c00044 	movi	r3,1
   1a45c:	10c00d15 	stw	r3,52(r2)
   1a460:	00000a06 	br	1a48c <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1a464:	e0bffd17 	ldw	r2,-12(fp)
   1a468:	1000081e 	bne	r2,zero,1a48c <alt_up_ps2_init+0xb0>
   1a46c:	e0bffe03 	ldbu	r2,-8(fp)
   1a470:	10803fcc 	andi	r2,r2,255
   1a474:	1000051e 	bne	r2,zero,1a48c <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1a478:	e0bfff17 	ldw	r2,-4(fp)
   1a47c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1a480:	e13fff17 	ldw	r4,-4(fp)
   1a484:	01403d04 	movi	r5,244
   1a488:	001a5540 	call	1a554 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1a48c:	e037883a 	mov	sp,fp
   1a490:	dfc00117 	ldw	ra,4(sp)
   1a494:	df000017 	ldw	fp,0(sp)
   1a498:	dec00204 	addi	sp,sp,8
   1a49c:	f800283a 	ret

0001a4a0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a4a0:	defffd04 	addi	sp,sp,-12
   1a4a4:	df000215 	stw	fp,8(sp)
   1a4a8:	df000204 	addi	fp,sp,8
   1a4ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a4b0:	e0bfff17 	ldw	r2,-4(fp)
   1a4b4:	10800a17 	ldw	r2,40(r2)
   1a4b8:	10800104 	addi	r2,r2,4
   1a4bc:	10800037 	ldwio	r2,0(r2)
   1a4c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a4c4:	e0bffe17 	ldw	r2,-8(fp)
   1a4c8:	10800054 	ori	r2,r2,1
   1a4cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a4d0:	e0bfff17 	ldw	r2,-4(fp)
   1a4d4:	10800a17 	ldw	r2,40(r2)
   1a4d8:	10800104 	addi	r2,r2,4
   1a4dc:	1007883a 	mov	r3,r2
   1a4e0:	e0bffe17 	ldw	r2,-8(fp)
   1a4e4:	18800035 	stwio	r2,0(r3)
}
   1a4e8:	e037883a 	mov	sp,fp
   1a4ec:	df000017 	ldw	fp,0(sp)
   1a4f0:	dec00104 	addi	sp,sp,4
   1a4f4:	f800283a 	ret

0001a4f8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a4f8:	defffd04 	addi	sp,sp,-12
   1a4fc:	df000215 	stw	fp,8(sp)
   1a500:	df000204 	addi	fp,sp,8
   1a504:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a508:	e0bfff17 	ldw	r2,-4(fp)
   1a50c:	10800a17 	ldw	r2,40(r2)
   1a510:	10800104 	addi	r2,r2,4
   1a514:	10800037 	ldwio	r2,0(r2)
   1a518:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a51c:	e0fffe17 	ldw	r3,-8(fp)
   1a520:	00bfff84 	movi	r2,-2
   1a524:	1884703a 	and	r2,r3,r2
   1a528:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a52c:	e0bfff17 	ldw	r2,-4(fp)
   1a530:	10800a17 	ldw	r2,40(r2)
   1a534:	10800104 	addi	r2,r2,4
   1a538:	1007883a 	mov	r3,r2
   1a53c:	e0bffe17 	ldw	r2,-8(fp)
   1a540:	18800035 	stwio	r2,0(r3)
}
   1a544:	e037883a 	mov	sp,fp
   1a548:	df000017 	ldw	fp,0(sp)
   1a54c:	dec00104 	addi	sp,sp,4
   1a550:	f800283a 	ret

0001a554 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a554:	defffb04 	addi	sp,sp,-20
   1a558:	dfc00415 	stw	ra,16(sp)
   1a55c:	df000315 	stw	fp,12(sp)
   1a560:	df000304 	addi	fp,sp,12
   1a564:	e13ffe15 	stw	r4,-8(fp)
   1a568:	2805883a 	mov	r2,r5
   1a56c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1a570:	e0bffe17 	ldw	r2,-8(fp)
   1a574:	10800a17 	ldw	r2,40(r2)
   1a578:	1007883a 	mov	r3,r2
   1a57c:	e0bfff03 	ldbu	r2,-4(fp)
   1a580:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1a584:	e0bffe17 	ldw	r2,-8(fp)
   1a588:	10800a17 	ldw	r2,40(r2)
   1a58c:	10800104 	addi	r2,r2,4
   1a590:	10800037 	ldwio	r2,0(r2)
   1a594:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1a598:	e13ffd17 	ldw	r4,-12(fp)
   1a59c:	001a3180 	call	1a318 <read_CE_bit>
   1a5a0:	10803fcc 	andi	r2,r2,255
   1a5a4:	10000226 	beq	r2,zero,1a5b0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1a5a8:	00bffec4 	movi	r2,-5
   1a5ac:	00000106 	br	1a5b4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1a5b0:	0005883a 	mov	r2,zero
}
   1a5b4:	e037883a 	mov	sp,fp
   1a5b8:	dfc00117 	ldw	ra,4(sp)
   1a5bc:	df000017 	ldw	fp,0(sp)
   1a5c0:	dec00204 	addi	sp,sp,8
   1a5c4:	f800283a 	ret

0001a5c8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1a5c8:	defffc04 	addi	sp,sp,-16
   1a5cc:	dfc00315 	stw	ra,12(sp)
   1a5d0:	df000215 	stw	fp,8(sp)
   1a5d4:	df000204 	addi	fp,sp,8
   1a5d8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1a5dc:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1a5e0:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1a5e4:	e0bffe44 	addi	r2,fp,-7
   1a5e8:	e13fff17 	ldw	r4,-4(fp)
   1a5ec:	100b883a 	mov	r5,r2
   1a5f0:	001a69c0 	call	1a69c <alt_up_ps2_read_data_byte_timeout>
   1a5f4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1a5f8:	e0bffe03 	ldbu	r2,-8(fp)
   1a5fc:	1000061e 	bne	r2,zero,1a618 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1a600:	e0bffe43 	ldbu	r2,-7(fp)
   1a604:	10803fcc 	andi	r2,r2,255
   1a608:	10803e98 	cmpnei	r2,r2,250
   1a60c:	1000041e 	bne	r2,zero,1a620 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1a610:	0005883a 	mov	r2,zero
   1a614:	00000306 	br	1a624 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1a618:	e0bffe03 	ldbu	r2,-8(fp)
   1a61c:	00000106 	br	1a624 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1a620:	003ff006 	br	1a5e4 <__alt_mem_Flash_flash_data+0xf401a5e4>
	return -ETIMEDOUT;
}
   1a624:	e037883a 	mov	sp,fp
   1a628:	dfc00117 	ldw	ra,4(sp)
   1a62c:	df000017 	ldw	fp,0(sp)
   1a630:	dec00204 	addi	sp,sp,8
   1a634:	f800283a 	ret

0001a638 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a638:	defffa04 	addi	sp,sp,-24
   1a63c:	dfc00515 	stw	ra,20(sp)
   1a640:	df000415 	stw	fp,16(sp)
   1a644:	df000404 	addi	fp,sp,16
   1a648:	e13ffe15 	stw	r4,-8(fp)
   1a64c:	2805883a 	mov	r2,r5
   1a650:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1a654:	e0bfff03 	ldbu	r2,-4(fp)
   1a658:	e13ffe17 	ldw	r4,-8(fp)
   1a65c:	100b883a 	mov	r5,r2
   1a660:	001a5540 	call	1a554 <alt_up_ps2_write_data_byte>
   1a664:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1a668:	e0bffc17 	ldw	r2,-16(fp)
   1a66c:	10000226 	beq	r2,zero,1a678 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1a670:	e0bffc17 	ldw	r2,-16(fp)
   1a674:	00000406 	br	1a688 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1a678:	e13ffe17 	ldw	r4,-8(fp)
   1a67c:	001a5c80 	call	1a5c8 <alt_up_ps2_wait_for_ack>
   1a680:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1a684:	e0bffd17 	ldw	r2,-12(fp)
}
   1a688:	e037883a 	mov	sp,fp
   1a68c:	dfc00117 	ldw	ra,4(sp)
   1a690:	df000017 	ldw	fp,0(sp)
   1a694:	dec00204 	addi	sp,sp,8
   1a698:	f800283a 	ret

0001a69c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a69c:	defffa04 	addi	sp,sp,-24
   1a6a0:	dfc00515 	stw	ra,20(sp)
   1a6a4:	df000415 	stw	fp,16(sp)
   1a6a8:	df000404 	addi	fp,sp,16
   1a6ac:	e13ffe15 	stw	r4,-8(fp)
   1a6b0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a6b4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1a6b8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1a6bc:	e0bffc17 	ldw	r2,-16(fp)
   1a6c0:	10800044 	addi	r2,r2,1
   1a6c4:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a6c8:	e0bffe17 	ldw	r2,-8(fp)
   1a6cc:	10800a17 	ldw	r2,40(r2)
   1a6d0:	10800037 	ldwio	r2,0(r2)
   1a6d4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1a6d8:	e13ffd17 	ldw	r4,-12(fp)
   1a6dc:	001a37c0 	call	1a37c <read_data_valid>
   1a6e0:	10803fcc 	andi	r2,r2,255
   1a6e4:	10000726 	beq	r2,zero,1a704 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1a6e8:	e13ffd17 	ldw	r4,-12(fp)
   1a6ec:	001a3b00 	call	1a3b0 <read_data_byte>
   1a6f0:	1007883a 	mov	r3,r2
   1a6f4:	e0bfff17 	ldw	r2,-4(fp)
   1a6f8:	10c00005 	stb	r3,0(r2)
			return 0;
   1a6fc:	0005883a 	mov	r2,zero
   1a700:	00000a06 	br	1a72c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1a704:	e0bffe17 	ldw	r2,-8(fp)
   1a708:	10800c17 	ldw	r2,48(r2)
   1a70c:	10000626 	beq	r2,zero,1a728 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1a710:	e0bffe17 	ldw	r2,-8(fp)
   1a714:	10c00c17 	ldw	r3,48(r2)
   1a718:	e0bffc17 	ldw	r2,-16(fp)
   1a71c:	1880022e 	bgeu	r3,r2,1a728 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1a720:	00bfe304 	movi	r2,-116
   1a724:	00000106 	br	1a72c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1a728:	003fe406 	br	1a6bc <__alt_mem_Flash_flash_data+0xf401a6bc>
}
   1a72c:	e037883a 	mov	sp,fp
   1a730:	dfc00117 	ldw	ra,4(sp)
   1a734:	df000017 	ldw	fp,0(sp)
   1a738:	dec00204 	addi	sp,sp,8
   1a73c:	f800283a 	ret

0001a740 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a740:	defffb04 	addi	sp,sp,-20
   1a744:	dfc00415 	stw	ra,16(sp)
   1a748:	df000315 	stw	fp,12(sp)
   1a74c:	df000304 	addi	fp,sp,12
   1a750:	e13ffe15 	stw	r4,-8(fp)
   1a754:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a758:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a75c:	e0bffe17 	ldw	r2,-8(fp)
   1a760:	10800a17 	ldw	r2,40(r2)
   1a764:	10800037 	ldwio	r2,0(r2)
   1a768:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1a76c:	e13ffd17 	ldw	r4,-12(fp)
   1a770:	001a37c0 	call	1a37c <read_data_valid>
   1a774:	10803fcc 	andi	r2,r2,255
   1a778:	10000726 	beq	r2,zero,1a798 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1a77c:	e13ffd17 	ldw	r4,-12(fp)
   1a780:	001a3b00 	call	1a3b0 <read_data_byte>
   1a784:	1007883a 	mov	r3,r2
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	10c00005 	stb	r3,0(r2)
		return 0;
   1a790:	0005883a 	mov	r2,zero
   1a794:	00000106 	br	1a79c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1a798:	00bfffc4 	movi	r2,-1
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	dfc00117 	ldw	ra,4(sp)
   1a7a4:	df000017 	ldw	fp,0(sp)
   1a7a8:	dec00204 	addi	sp,sp,8
   1a7ac:	f800283a 	ret

0001a7b0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1a7b0:	defffb04 	addi	sp,sp,-20
   1a7b4:	dfc00415 	stw	ra,16(sp)
   1a7b8:	df000315 	stw	fp,12(sp)
   1a7bc:	df000304 	addi	fp,sp,12
   1a7c0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1a7c4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1a7c8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a7cc:	e0bfff17 	ldw	r2,-4(fp)
   1a7d0:	10800a17 	ldw	r2,40(r2)
   1a7d4:	10800037 	ldwio	r2,0(r2)
   1a7d8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1a7dc:	e13ffe17 	ldw	r4,-8(fp)
   1a7e0:	001a34c0 	call	1a34c <read_num_bytes_available>
   1a7e4:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1a7e8:	e0bffd0b 	ldhu	r2,-12(fp)
   1a7ec:	103ff71e 	bne	r2,zero,1a7cc <__alt_mem_Flash_flash_data+0xf401a7cc>
}
   1a7f0:	e037883a 	mov	sp,fp
   1a7f4:	dfc00117 	ldw	ra,4(sp)
   1a7f8:	df000017 	ldw	fp,0(sp)
   1a7fc:	dec00204 	addi	sp,sp,8
   1a800:	f800283a 	ret

0001a804 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a804:	defff804 	addi	sp,sp,-32
   1a808:	dfc00715 	stw	ra,28(sp)
   1a80c:	df000615 	stw	fp,24(sp)
   1a810:	df000604 	addi	fp,sp,24
   1a814:	e13ffd15 	stw	r4,-12(fp)
   1a818:	e17ffe15 	stw	r5,-8(fp)
   1a81c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a820:	e0bffd17 	ldw	r2,-12(fp)
   1a824:	10800017 	ldw	r2,0(r2)
   1a828:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1a82c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1a830:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1a834:	e0fffc17 	ldw	r3,-16(fp)
   1a838:	e0bfff17 	ldw	r2,-4(fp)
   1a83c:	18bffd16 	blt	r3,r2,1a834 <__alt_mem_Flash_flash_data+0xf401a834>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1a840:	e0bffe17 	ldw	r2,-8(fp)
   1a844:	10c00044 	addi	r3,r2,1
   1a848:	e0fffe15 	stw	r3,-8(fp)
   1a84c:	e13ffa17 	ldw	r4,-24(fp)
   1a850:	100b883a 	mov	r5,r2
   1a854:	001a69c0 	call	1a69c <alt_up_ps2_read_data_byte_timeout>
   1a858:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1a85c:	e0bffb17 	ldw	r2,-20(fp)
   1a860:	10000226 	beq	r2,zero,1a86c <alt_up_ps2_read_fd+0x68>
			return count;
   1a864:	e0bffc17 	ldw	r2,-16(fp)
   1a868:	00000406 	br	1a87c <alt_up_ps2_read_fd+0x78>
		count++;
   1a86c:	e0bffc17 	ldw	r2,-16(fp)
   1a870:	10800044 	addi	r2,r2,1
   1a874:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1a878:	e0bffc17 	ldw	r2,-16(fp)
}
   1a87c:	e037883a 	mov	sp,fp
   1a880:	dfc00117 	ldw	ra,4(sp)
   1a884:	df000017 	ldw	fp,0(sp)
   1a888:	dec00204 	addi	sp,sp,8
   1a88c:	f800283a 	ret

0001a890 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a890:	defff804 	addi	sp,sp,-32
   1a894:	dfc00715 	stw	ra,28(sp)
   1a898:	df000615 	stw	fp,24(sp)
   1a89c:	df000604 	addi	fp,sp,24
   1a8a0:	e13ffd15 	stw	r4,-12(fp)
   1a8a4:	e17ffe15 	stw	r5,-8(fp)
   1a8a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a8ac:	e0bffd17 	ldw	r2,-12(fp)
   1a8b0:	10800017 	ldw	r2,0(r2)
   1a8b4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1a8b8:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1a8bc:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1a8c0:	00001006 	br	1a904 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1a8c4:	e0bffe17 	ldw	r2,-8(fp)
   1a8c8:	10c00044 	addi	r3,r2,1
   1a8cc:	e0fffe15 	stw	r3,-8(fp)
   1a8d0:	10800003 	ldbu	r2,0(r2)
   1a8d4:	10803fcc 	andi	r2,r2,255
   1a8d8:	e13ffb17 	ldw	r4,-20(fp)
   1a8dc:	100b883a 	mov	r5,r2
   1a8e0:	001a5540 	call	1a554 <alt_up_ps2_write_data_byte>
   1a8e4:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1a8e8:	e0bffc17 	ldw	r2,-16(fp)
   1a8ec:	10000226 	beq	r2,zero,1a8f8 <alt_up_ps2_write_fd+0x68>
			return count;
   1a8f0:	e0bffa17 	ldw	r2,-24(fp)
   1a8f4:	00000706 	br	1a914 <alt_up_ps2_write_fd+0x84>
		count++;
   1a8f8:	e0bffa17 	ldw	r2,-24(fp)
   1a8fc:	10800044 	addi	r2,r2,1
   1a900:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1a904:	e0fffa17 	ldw	r3,-24(fp)
   1a908:	e0bfff17 	ldw	r2,-4(fp)
   1a90c:	18bfed16 	blt	r3,r2,1a8c4 <__alt_mem_Flash_flash_data+0xf401a8c4>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1a910:	e0bffa17 	ldw	r2,-24(fp)
}
   1a914:	e037883a 	mov	sp,fp
   1a918:	dfc00117 	ldw	ra,4(sp)
   1a91c:	df000017 	ldw	fp,0(sp)
   1a920:	dec00204 	addi	sp,sp,8
   1a924:	f800283a 	ret

0001a928 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1a928:	defffc04 	addi	sp,sp,-16
   1a92c:	dfc00315 	stw	ra,12(sp)
   1a930:	df000215 	stw	fp,8(sp)
   1a934:	df000204 	addi	fp,sp,8
   1a938:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1a93c:	e13fff17 	ldw	r4,-4(fp)
   1a940:	014000b4 	movhi	r5,2
   1a944:	297aa204 	addi	r5,r5,-5496
   1a948:	001b2e40 	call	1b2e4 <alt_find_dev>
   1a94c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a950:	e0bffe17 	ldw	r2,-8(fp)
}
   1a954:	e037883a 	mov	sp,fp
   1a958:	dfc00117 	ldw	ra,4(sp)
   1a95c:	df000017 	ldw	fp,0(sp)
   1a960:	dec00204 	addi	sp,sp,8
   1a964:	f800283a 	ret

0001a968 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1a968:	defffd04 	addi	sp,sp,-12
   1a96c:	df000215 	stw	fp,8(sp)
   1a970:	df000204 	addi	fp,sp,8
   1a974:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a978:	e0bfff17 	ldw	r2,-4(fp)
   1a97c:	10800a17 	ldw	r2,40(r2)
   1a980:	10800104 	addi	r2,r2,4
   1a984:	10800037 	ldwio	r2,0(r2)
   1a988:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1a98c:	e0bffe17 	ldw	r2,-8(fp)
   1a990:	10800054 	ori	r2,r2,1
   1a994:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1a998:	e0bfff17 	ldw	r2,-4(fp)
   1a99c:	10800a17 	ldw	r2,40(r2)
   1a9a0:	10800104 	addi	r2,r2,4
   1a9a4:	1007883a 	mov	r3,r2
   1a9a8:	e0bffe17 	ldw	r2,-8(fp)
   1a9ac:	18800035 	stwio	r2,0(r3)
}
   1a9b0:	e037883a 	mov	sp,fp
   1a9b4:	df000017 	ldw	fp,0(sp)
   1a9b8:	dec00104 	addi	sp,sp,4
   1a9bc:	f800283a 	ret

0001a9c0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1a9c0:	defffd04 	addi	sp,sp,-12
   1a9c4:	df000215 	stw	fp,8(sp)
   1a9c8:	df000204 	addi	fp,sp,8
   1a9cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a9d0:	e0bfff17 	ldw	r2,-4(fp)
   1a9d4:	10800a17 	ldw	r2,40(r2)
   1a9d8:	10800104 	addi	r2,r2,4
   1a9dc:	10800037 	ldwio	r2,0(r2)
   1a9e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1a9e4:	e0fffe17 	ldw	r3,-8(fp)
   1a9e8:	00bfff84 	movi	r2,-2
   1a9ec:	1884703a 	and	r2,r3,r2
   1a9f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1a9f4:	e0bfff17 	ldw	r2,-4(fp)
   1a9f8:	10800a17 	ldw	r2,40(r2)
   1a9fc:	10800104 	addi	r2,r2,4
   1aa00:	1007883a 	mov	r3,r2
   1aa04:	e0bffe17 	ldw	r2,-8(fp)
   1aa08:	18800035 	stwio	r2,0(r3)
}
   1aa0c:	e037883a 	mov	sp,fp
   1aa10:	df000017 	ldw	fp,0(sp)
   1aa14:	dec00104 	addi	sp,sp,4
   1aa18:	f800283a 	ret

0001aa1c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1aa1c:	defffd04 	addi	sp,sp,-12
   1aa20:	df000215 	stw	fp,8(sp)
   1aa24:	df000204 	addi	fp,sp,8
   1aa28:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1aa2c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1aa30:	e0bfff17 	ldw	r2,-4(fp)
   1aa34:	10800a17 	ldw	r2,40(r2)
   1aa38:	10800084 	addi	r2,r2,2
   1aa3c:	1080002b 	ldhuio	r2,0(r2)
   1aa40:	10bfffcc 	andi	r2,r2,65535
   1aa44:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1aa48:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1aa4c:	e037883a 	mov	sp,fp
   1aa50:	df000017 	ldw	fp,0(sp)
   1aa54:	dec00104 	addi	sp,sp,4
   1aa58:	f800283a 	ret

0001aa5c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1aa5c:	defffd04 	addi	sp,sp,-12
   1aa60:	df000215 	stw	fp,8(sp)
   1aa64:	df000204 	addi	fp,sp,8
   1aa68:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1aa6c:	e0bfff17 	ldw	r2,-4(fp)
   1aa70:	10800a17 	ldw	r2,40(r2)
   1aa74:	10800104 	addi	r2,r2,4
   1aa78:	10800037 	ldwio	r2,0(r2)
   1aa7c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1aa80:	e0bffe17 	ldw	r2,-8(fp)
   1aa84:	1004d43a 	srli	r2,r2,16
}
   1aa88:	e037883a 	mov	sp,fp
   1aa8c:	df000017 	ldw	fp,0(sp)
   1aa90:	dec00104 	addi	sp,sp,4
   1aa94:	f800283a 	ret

0001aa98 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1aa98:	defffd04 	addi	sp,sp,-12
   1aa9c:	df000215 	stw	fp,8(sp)
   1aaa0:	df000204 	addi	fp,sp,8
   1aaa4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1aaa8:	e0bfff17 	ldw	r2,-4(fp)
   1aaac:	1080800c 	andi	r2,r2,512
   1aab0:	1004d27a 	srli	r2,r2,9
   1aab4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1aab8:	e0bffe17 	ldw	r2,-8(fp)
   1aabc:	10000226 	beq	r2,zero,1aac8 <alt_up_rs232_check_parity+0x30>
   1aac0:	00bfffc4 	movi	r2,-1
   1aac4:	00000106 	br	1aacc <alt_up_rs232_check_parity+0x34>
   1aac8:	0005883a 	mov	r2,zero
}
   1aacc:	e037883a 	mov	sp,fp
   1aad0:	df000017 	ldw	fp,0(sp)
   1aad4:	dec00104 	addi	sp,sp,4
   1aad8:	f800283a 	ret

0001aadc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1aadc:	defffd04 	addi	sp,sp,-12
   1aae0:	df000215 	stw	fp,8(sp)
   1aae4:	df000204 	addi	fp,sp,8
   1aae8:	e13ffe15 	stw	r4,-8(fp)
   1aaec:	2805883a 	mov	r2,r5
   1aaf0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1aaf4:	e0bffe17 	ldw	r2,-8(fp)
   1aaf8:	10800a17 	ldw	r2,40(r2)
   1aafc:	1007883a 	mov	r3,r2
   1ab00:	e0bfff03 	ldbu	r2,-4(fp)
   1ab04:	18800035 	stwio	r2,0(r3)
	return 0;
   1ab08:	0005883a 	mov	r2,zero
}
   1ab0c:	e037883a 	mov	sp,fp
   1ab10:	df000017 	ldw	fp,0(sp)
   1ab14:	dec00104 	addi	sp,sp,4
   1ab18:	f800283a 	ret

0001ab1c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ab1c:	defffa04 	addi	sp,sp,-24
   1ab20:	dfc00515 	stw	ra,20(sp)
   1ab24:	df000415 	stw	fp,16(sp)
   1ab28:	df000404 	addi	fp,sp,16
   1ab2c:	e13ffd15 	stw	r4,-12(fp)
   1ab30:	e17ffe15 	stw	r5,-8(fp)
   1ab34:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1ab38:	e0bffd17 	ldw	r2,-12(fp)
   1ab3c:	10800a17 	ldw	r2,40(r2)
   1ab40:	10800037 	ldwio	r2,0(r2)
   1ab44:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1ab48:	e0bffc17 	ldw	r2,-16(fp)
   1ab4c:	1007883a 	mov	r3,r2
   1ab50:	e0bffe17 	ldw	r2,-8(fp)
   1ab54:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1ab58:	e13ffc17 	ldw	r4,-16(fp)
   1ab5c:	001aa980 	call	1aa98 <alt_up_rs232_check_parity>
   1ab60:	1007883a 	mov	r3,r2
   1ab64:	e0bfff17 	ldw	r2,-4(fp)
   1ab68:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1ab6c:	e0bffc17 	ldw	r2,-16(fp)
   1ab70:	10a0000c 	andi	r2,r2,32768
   1ab74:	1004d3fa 	srli	r2,r2,15
   1ab78:	10bfffc4 	addi	r2,r2,-1
}
   1ab7c:	e037883a 	mov	sp,fp
   1ab80:	dfc00117 	ldw	ra,4(sp)
   1ab84:	df000017 	ldw	fp,0(sp)
   1ab88:	dec00204 	addi	sp,sp,8
   1ab8c:	f800283a 	ret

0001ab90 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1ab90:	defff804 	addi	sp,sp,-32
   1ab94:	dfc00715 	stw	ra,28(sp)
   1ab98:	df000615 	stw	fp,24(sp)
   1ab9c:	df000604 	addi	fp,sp,24
   1aba0:	e13ffd15 	stw	r4,-12(fp)
   1aba4:	e17ffe15 	stw	r5,-8(fp)
   1aba8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1abac:	e0bffd17 	ldw	r2,-12(fp)
   1abb0:	10800017 	ldw	r2,0(r2)
   1abb4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1abb8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1abbc:	00000e06 	br	1abf8 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1abc0:	e0bffe17 	ldw	r2,-8(fp)
   1abc4:	10c00044 	addi	r3,r2,1
   1abc8:	e0fffe15 	stw	r3,-8(fp)
   1abcc:	e0fffc04 	addi	r3,fp,-16
   1abd0:	e13ffb17 	ldw	r4,-20(fp)
   1abd4:	100b883a 	mov	r5,r2
   1abd8:	180d883a 	mov	r6,r3
   1abdc:	001ab1c0 	call	1ab1c <alt_up_rs232_read_data>
   1abe0:	1000041e 	bne	r2,zero,1abf4 <alt_up_rs232_read_fd+0x64>
			count++;
   1abe4:	e0bffa17 	ldw	r2,-24(fp)
   1abe8:	10800044 	addi	r2,r2,1
   1abec:	e0bffa15 	stw	r2,-24(fp)
   1abf0:	00000106 	br	1abf8 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1abf4:	00000406 	br	1ac08 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1abf8:	e0bfff17 	ldw	r2,-4(fp)
   1abfc:	10ffffc4 	addi	r3,r2,-1
   1ac00:	e0ffff15 	stw	r3,-4(fp)
   1ac04:	103fee1e 	bne	r2,zero,1abc0 <__alt_mem_Flash_flash_data+0xf401abc0>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ac08:	e0bffa17 	ldw	r2,-24(fp)
}
   1ac0c:	e037883a 	mov	sp,fp
   1ac10:	dfc00117 	ldw	ra,4(sp)
   1ac14:	df000017 	ldw	fp,0(sp)
   1ac18:	dec00204 	addi	sp,sp,8
   1ac1c:	f800283a 	ret

0001ac20 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ac20:	defff904 	addi	sp,sp,-28
   1ac24:	dfc00615 	stw	ra,24(sp)
   1ac28:	df000515 	stw	fp,20(sp)
   1ac2c:	df000504 	addi	fp,sp,20
   1ac30:	e13ffd15 	stw	r4,-12(fp)
   1ac34:	e17ffe15 	stw	r5,-8(fp)
   1ac38:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ac3c:	e0bffd17 	ldw	r2,-12(fp)
   1ac40:	10800017 	ldw	r2,0(r2)
   1ac44:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1ac48:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1ac4c:	00000f06 	br	1ac8c <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1ac50:	e0bffe17 	ldw	r2,-8(fp)
   1ac54:	10800003 	ldbu	r2,0(r2)
   1ac58:	10803fcc 	andi	r2,r2,255
   1ac5c:	e13ffc17 	ldw	r4,-16(fp)
   1ac60:	100b883a 	mov	r5,r2
   1ac64:	001aadc0 	call	1aadc <alt_up_rs232_write_data>
   1ac68:	1000071e 	bne	r2,zero,1ac88 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1ac6c:	e0bffb17 	ldw	r2,-20(fp)
   1ac70:	10800044 	addi	r2,r2,1
   1ac74:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1ac78:	e0bffe17 	ldw	r2,-8(fp)
   1ac7c:	10800044 	addi	r2,r2,1
   1ac80:	e0bffe15 	stw	r2,-8(fp)
   1ac84:	00000106 	br	1ac8c <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1ac88:	00000406 	br	1ac9c <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1ac8c:	e0bfff17 	ldw	r2,-4(fp)
   1ac90:	10ffffc4 	addi	r3,r2,-1
   1ac94:	e0ffff15 	stw	r3,-4(fp)
   1ac98:	103fed1e 	bne	r2,zero,1ac50 <__alt_mem_Flash_flash_data+0xf401ac50>
			ptr++;
		}
		else
			break;
	}
	return count;
   1ac9c:	e0bffb17 	ldw	r2,-20(fp)
}
   1aca0:	e037883a 	mov	sp,fp
   1aca4:	dfc00117 	ldw	ra,4(sp)
   1aca8:	df000017 	ldw	fp,0(sp)
   1acac:	dec00204 	addi	sp,sp,8
   1acb0:	f800283a 	ret

0001acb4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1acb4:	defffc04 	addi	sp,sp,-16
   1acb8:	dfc00315 	stw	ra,12(sp)
   1acbc:	df000215 	stw	fp,8(sp)
   1acc0:	df000204 	addi	fp,sp,8
   1acc4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1acc8:	e13fff17 	ldw	r4,-4(fp)
   1accc:	014000b4 	movhi	r5,2
   1acd0:	297aa204 	addi	r5,r5,-5496
   1acd4:	001b2e40 	call	1b2e4 <alt_find_dev>
   1acd8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1acdc:	e0bffe17 	ldw	r2,-8(fp)
}
   1ace0:	e037883a 	mov	sp,fp
   1ace4:	dfc00117 	ldw	ra,4(sp)
   1ace8:	df000017 	ldw	fp,0(sp)
   1acec:	dec00204 	addi	sp,sp,8
   1acf0:	f800283a 	ret

0001acf4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1acf4:	defffc04 	addi	sp,sp,-16
   1acf8:	dfc00315 	stw	ra,12(sp)
   1acfc:	df000215 	stw	fp,8(sp)
   1ad00:	df000204 	addi	fp,sp,8
   1ad04:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1ad08:	e0bfff17 	ldw	r2,-4(fp)
   1ad0c:	10800217 	ldw	r2,8(r2)
   1ad10:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1ad14:	00000b06 	br	1ad44 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1ad18:	e13ffe17 	ldw	r4,-8(fp)
   1ad1c:	014000b4 	movhi	r5,2
   1ad20:	2972ed04 	addi	r5,r5,-13388
   1ad24:	0000b740 	call	b74 <strcmp>
   1ad28:	1000031e 	bne	r2,zero,1ad38 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1ad2c:	e0bffe17 	ldw	r2,-8(fp)
   1ad30:	10000005 	stb	zero,0(r2)
			break;
   1ad34:	00000906 	br	1ad5c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1ad38:	e0bffe17 	ldw	r2,-8(fp)
   1ad3c:	10800044 	addi	r2,r2,1
   1ad40:	e0bffe15 	stw	r2,-8(fp)
   1ad44:	e0bffe17 	ldw	r2,-8(fp)
   1ad48:	10800003 	ldbu	r2,0(r2)
   1ad4c:	10803fcc 	andi	r2,r2,255
   1ad50:	1080201c 	xori	r2,r2,128
   1ad54:	10bfe004 	addi	r2,r2,-128
   1ad58:	103fef1e 	bne	r2,zero,1ad18 <__alt_mem_Flash_flash_data+0xf401ad18>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1ad5c:	0001883a 	nop
}
   1ad60:	e037883a 	mov	sp,fp
   1ad64:	dfc00117 	ldw	ra,4(sp)
   1ad68:	df000017 	ldw	fp,0(sp)
   1ad6c:	dec00204 	addi	sp,sp,8
   1ad70:	f800283a 	ret

0001ad74 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1ad74:	defffc04 	addi	sp,sp,-16
   1ad78:	dfc00315 	stw	ra,12(sp)
   1ad7c:	df000215 	stw	fp,8(sp)
   1ad80:	df000204 	addi	fp,sp,8
   1ad84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1ad88:	e13fff17 	ldw	r4,-4(fp)
   1ad8c:	014000b4 	movhi	r5,2
   1ad90:	297aa204 	addi	r5,r5,-5496
   1ad94:	001b2e40 	call	1b2e4 <alt_find_dev>
   1ad98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ad9c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ada0:	e037883a 	mov	sp,fp
   1ada4:	dfc00117 	ldw	ra,4(sp)
   1ada8:	df000017 	ldw	fp,0(sp)
   1adac:	dec00204 	addi	sp,sp,8
   1adb0:	f800283a 	ret

0001adb4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1adb4:	defffa04 	addi	sp,sp,-24
   1adb8:	df000515 	stw	fp,20(sp)
   1adbc:	df000504 	addi	fp,sp,20
   1adc0:	e13ffc15 	stw	r4,-16(fp)
   1adc4:	2805883a 	mov	r2,r5
   1adc8:	e1bffe15 	stw	r6,-8(fp)
   1adcc:	e1ffff15 	stw	r7,-4(fp)
   1add0:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1add4:	e0bffc17 	ldw	r2,-16(fp)
   1add8:	10800c17 	ldw	r2,48(r2)
   1addc:	e0fffe17 	ldw	r3,-8(fp)
   1ade0:	1880042e 	bgeu	r3,r2,1adf4 <alt_up_char_buffer_draw+0x40>
   1ade4:	e0bffc17 	ldw	r2,-16(fp)
   1ade8:	10800d17 	ldw	r2,52(r2)
   1adec:	e0ffff17 	ldw	r3,-4(fp)
   1adf0:	18800236 	bltu	r3,r2,1adfc <alt_up_char_buffer_draw+0x48>
		return -1;
   1adf4:	00bfffc4 	movi	r2,-1
   1adf8:	00001d06 	br	1ae70 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1adfc:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1ae00:	e0bffc17 	ldw	r2,-16(fp)
   1ae04:	10c00f17 	ldw	r3,60(r2)
   1ae08:	e0bffe17 	ldw	r2,-8(fp)
   1ae0c:	1884703a 	and	r2,r3,r2
   1ae10:	e0fffc17 	ldw	r3,-16(fp)
   1ae14:	18c00e17 	ldw	r3,56(r3)
   1ae18:	10c4983a 	sll	r2,r2,r3
   1ae1c:	e0fffb17 	ldw	r3,-20(fp)
   1ae20:	1884b03a 	or	r2,r3,r2
   1ae24:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1ae28:	e0bffc17 	ldw	r2,-16(fp)
   1ae2c:	10c01117 	ldw	r3,68(r2)
   1ae30:	e0bfff17 	ldw	r2,-4(fp)
   1ae34:	1884703a 	and	r2,r3,r2
   1ae38:	e0fffc17 	ldw	r3,-16(fp)
   1ae3c:	18c01017 	ldw	r3,64(r3)
   1ae40:	10c4983a 	sll	r2,r2,r3
   1ae44:	e0fffb17 	ldw	r3,-20(fp)
   1ae48:	1884b03a 	or	r2,r3,r2
   1ae4c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1ae50:	e0bffc17 	ldw	r2,-16(fp)
   1ae54:	10c00b17 	ldw	r3,44(r2)
   1ae58:	e0bffb17 	ldw	r2,-20(fp)
   1ae5c:	1885883a 	add	r2,r3,r2
   1ae60:	1007883a 	mov	r3,r2
   1ae64:	e0bffd03 	ldbu	r2,-12(fp)
   1ae68:	18800025 	stbio	r2,0(r3)

	return 0;
   1ae6c:	0005883a 	mov	r2,zero
}
   1ae70:	e037883a 	mov	sp,fp
   1ae74:	df000017 	ldw	fp,0(sp)
   1ae78:	dec00104 	addi	sp,sp,4
   1ae7c:	f800283a 	ret

0001ae80 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1ae80:	defffa04 	addi	sp,sp,-24
   1ae84:	df000515 	stw	fp,20(sp)
   1ae88:	df000504 	addi	fp,sp,20
   1ae8c:	e13ffc15 	stw	r4,-16(fp)
   1ae90:	e17ffd15 	stw	r5,-12(fp)
   1ae94:	e1bffe15 	stw	r6,-8(fp)
   1ae98:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1ae9c:	e0bffc17 	ldw	r2,-16(fp)
   1aea0:	10800c17 	ldw	r2,48(r2)
   1aea4:	e0fffe17 	ldw	r3,-8(fp)
   1aea8:	1880042e 	bgeu	r3,r2,1aebc <alt_up_char_buffer_string+0x3c>
   1aeac:	e0bffc17 	ldw	r2,-16(fp)
   1aeb0:	10800d17 	ldw	r2,52(r2)
   1aeb4:	e0ffff17 	ldw	r3,-4(fp)
   1aeb8:	18800236 	bltu	r3,r2,1aec4 <alt_up_char_buffer_string+0x44>
		return -1;
   1aebc:	00bfffc4 	movi	r2,-1
   1aec0:	00002b06 	br	1af70 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1aec4:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1aec8:	e0bffc17 	ldw	r2,-16(fp)
   1aecc:	10801017 	ldw	r2,64(r2)
   1aed0:	1007883a 	mov	r3,r2
   1aed4:	e0bfff17 	ldw	r2,-4(fp)
   1aed8:	10c6983a 	sll	r3,r2,r3
   1aedc:	e0bffe17 	ldw	r2,-8(fp)
   1aee0:	1885883a 	add	r2,r3,r2
   1aee4:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1aee8:	00001a06 	br	1af54 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1aeec:	e0bffc17 	ldw	r2,-16(fp)
   1aef0:	10c00b17 	ldw	r3,44(r2)
   1aef4:	e0bffb17 	ldw	r2,-20(fp)
   1aef8:	1885883a 	add	r2,r3,r2
   1aefc:	1007883a 	mov	r3,r2
   1af00:	e0bffd17 	ldw	r2,-12(fp)
   1af04:	10800003 	ldbu	r2,0(r2)
   1af08:	10803fcc 	andi	r2,r2,255
   1af0c:	1080201c 	xori	r2,r2,128
   1af10:	10bfe004 	addi	r2,r2,-128
   1af14:	18800025 	stbio	r2,0(r3)
		++ptr;
   1af18:	e0bffd17 	ldw	r2,-12(fp)
   1af1c:	10800044 	addi	r2,r2,1
   1af20:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1af24:	e0bffe17 	ldw	r2,-8(fp)
   1af28:	10800044 	addi	r2,r2,1
   1af2c:	e0bffe15 	stw	r2,-8(fp)
   1af30:	e0bffc17 	ldw	r2,-16(fp)
   1af34:	10800c17 	ldw	r2,48(r2)
   1af38:	e0fffe17 	ldw	r3,-8(fp)
   1af3c:	18800236 	bltu	r3,r2,1af48 <alt_up_char_buffer_string+0xc8>
			return -1;
   1af40:	00bfffc4 	movi	r2,-1
   1af44:	00000a06 	br	1af70 <alt_up_char_buffer_string+0xf0>
		++offset;
   1af48:	e0bffb17 	ldw	r2,-20(fp)
   1af4c:	10800044 	addi	r2,r2,1
   1af50:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1af54:	e0bffd17 	ldw	r2,-12(fp)
   1af58:	10800003 	ldbu	r2,0(r2)
   1af5c:	10803fcc 	andi	r2,r2,255
   1af60:	1080201c 	xori	r2,r2,128
   1af64:	10bfe004 	addi	r2,r2,-128
   1af68:	103fe01e 	bne	r2,zero,1aeec <__alt_mem_Flash_flash_data+0xf401aeec>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1af6c:	0005883a 	mov	r2,zero
}
   1af70:	e037883a 	mov	sp,fp
   1af74:	df000017 	ldw	fp,0(sp)
   1af78:	dec00104 	addi	sp,sp,4
   1af7c:	f800283a 	ret

0001af80 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1af80:	defffe04 	addi	sp,sp,-8
   1af84:	df000115 	stw	fp,4(sp)
   1af88:	df000104 	addi	fp,sp,4
   1af8c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1af90:	e0bfff17 	ldw	r2,-4(fp)
   1af94:	10800a17 	ldw	r2,40(r2)
   1af98:	10800084 	addi	r2,r2,2
   1af9c:	1007883a 	mov	r3,r2
   1afa0:	00800044 	movi	r2,1
   1afa4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1afa8:	0001883a 	nop
   1afac:	e0bfff17 	ldw	r2,-4(fp)
   1afb0:	10800a17 	ldw	r2,40(r2)
   1afb4:	10800084 	addi	r2,r2,2
   1afb8:	10800023 	ldbuio	r2,0(r2)
   1afbc:	10803fcc 	andi	r2,r2,255
   1afc0:	1080004c 	andi	r2,r2,1
   1afc4:	103ff91e 	bne	r2,zero,1afac <__alt_mem_Flash_flash_data+0xf401afac>
	return 0;
   1afc8:	0005883a 	mov	r2,zero
}
   1afcc:	e037883a 	mov	sp,fp
   1afd0:	df000017 	ldw	fp,0(sp)
   1afd4:	dec00104 	addi	sp,sp,4
   1afd8:	f800283a 	ret

0001afdc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1afdc:	defff504 	addi	sp,sp,-44
   1afe0:	df000a15 	stw	fp,40(sp)
   1afe4:	df000a04 	addi	fp,sp,40
   1afe8:	e13ffc15 	stw	r4,-16(fp)
   1afec:	e17ffd15 	stw	r5,-12(fp)
   1aff0:	e1bffe15 	stw	r6,-8(fp)
   1aff4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1aff8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1affc:	008000b4 	movhi	r2,2
   1b000:	1082c104 	addi	r2,r2,2820
   1b004:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b008:	10003f26 	beq	r2,zero,1b108 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b00c:	e0bffc17 	ldw	r2,-16(fp)
   1b010:	10003b26 	beq	r2,zero,1b100 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b014:	e0bffc17 	ldw	r2,-16(fp)
   1b018:	e0fffe17 	ldw	r3,-8(fp)
   1b01c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b020:	e0bffc17 	ldw	r2,-16(fp)
   1b024:	e0ffff17 	ldw	r3,-4(fp)
   1b028:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b02c:	0005303a 	rdctl	r2,status
   1b030:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b034:	e0fff817 	ldw	r3,-32(fp)
   1b038:	00bfff84 	movi	r2,-2
   1b03c:	1884703a 	and	r2,r3,r2
   1b040:	1001703a 	wrctl	status,r2
  
  return context;
   1b044:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b048:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b04c:	008000b4 	movhi	r2,2
   1b050:	1082c204 	addi	r2,r2,2824
   1b054:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b058:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b05c:	e0fffd17 	ldw	r3,-12(fp)
   1b060:	e0bff617 	ldw	r2,-40(fp)
   1b064:	1885883a 	add	r2,r3,r2
   1b068:	10c00044 	addi	r3,r2,1
   1b06c:	e0bffc17 	ldw	r2,-16(fp)
   1b070:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b074:	e0bffc17 	ldw	r2,-16(fp)
   1b078:	10c00217 	ldw	r3,8(r2)
   1b07c:	e0bff617 	ldw	r2,-40(fp)
   1b080:	1880042e 	bgeu	r3,r2,1b094 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b084:	e0bffc17 	ldw	r2,-16(fp)
   1b088:	00c00044 	movi	r3,1
   1b08c:	10c00405 	stb	r3,16(r2)
   1b090:	00000206 	br	1b09c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b094:	e0bffc17 	ldw	r2,-16(fp)
   1b098:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b09c:	e0fffc17 	ldw	r3,-16(fp)
   1b0a0:	008000b4 	movhi	r2,2
   1b0a4:	10bac704 	addi	r2,r2,-5348
   1b0a8:	e0bff915 	stw	r2,-28(fp)
   1b0ac:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b0b0:	e0bffa17 	ldw	r2,-24(fp)
   1b0b4:	e0fff917 	ldw	r3,-28(fp)
   1b0b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b0bc:	e0bff917 	ldw	r2,-28(fp)
   1b0c0:	10c00017 	ldw	r3,0(r2)
   1b0c4:	e0bffa17 	ldw	r2,-24(fp)
   1b0c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b0cc:	e0bff917 	ldw	r2,-28(fp)
   1b0d0:	10800017 	ldw	r2,0(r2)
   1b0d4:	e0fffa17 	ldw	r3,-24(fp)
   1b0d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b0dc:	e0bff917 	ldw	r2,-28(fp)
   1b0e0:	e0fffa17 	ldw	r3,-24(fp)
   1b0e4:	10c00015 	stw	r3,0(r2)
   1b0e8:	e0bff717 	ldw	r2,-36(fp)
   1b0ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0f0:	e0bffb17 	ldw	r2,-20(fp)
   1b0f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b0f8:	0005883a 	mov	r2,zero
   1b0fc:	00000306 	br	1b10c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b100:	00bffa84 	movi	r2,-22
   1b104:	00000106 	br	1b10c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b108:	00bfde84 	movi	r2,-134
  }
}
   1b10c:	e037883a 	mov	sp,fp
   1b110:	df000017 	ldw	fp,0(sp)
   1b114:	dec00104 	addi	sp,sp,4
   1b118:	f800283a 	ret

0001b11c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b11c:	deffff04 	addi	sp,sp,-4
   1b120:	df000015 	stw	fp,0(sp)
   1b124:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b128:	e037883a 	mov	sp,fp
   1b12c:	df000017 	ldw	fp,0(sp)
   1b130:	dec00104 	addi	sp,sp,4
   1b134:	f800283a 	ret

0001b138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b138:	defffe04 	addi	sp,sp,-8
   1b13c:	dfc00115 	stw	ra,4(sp)
   1b140:	df000015 	stw	fp,0(sp)
   1b144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b148:	008000b4 	movhi	r2,2
   1b14c:	10baa504 	addi	r2,r2,-5484
   1b150:	10800017 	ldw	r2,0(r2)
   1b154:	10000526 	beq	r2,zero,1b16c <alt_get_errno+0x34>
   1b158:	008000b4 	movhi	r2,2
   1b15c:	10baa504 	addi	r2,r2,-5484
   1b160:	10800017 	ldw	r2,0(r2)
   1b164:	103ee83a 	callr	r2
   1b168:	00000206 	br	1b174 <alt_get_errno+0x3c>
   1b16c:	008000b4 	movhi	r2,2
   1b170:	1082a304 	addi	r2,r2,2700
}
   1b174:	e037883a 	mov	sp,fp
   1b178:	dfc00117 	ldw	ra,4(sp)
   1b17c:	df000017 	ldw	fp,0(sp)
   1b180:	dec00204 	addi	sp,sp,8
   1b184:	f800283a 	ret

0001b188 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b188:	defffa04 	addi	sp,sp,-24
   1b18c:	dfc00515 	stw	ra,20(sp)
   1b190:	df000415 	stw	fp,16(sp)
   1b194:	df000404 	addi	fp,sp,16
   1b198:	e13ffe15 	stw	r4,-8(fp)
   1b19c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b1a0:	e0bffe17 	ldw	r2,-8(fp)
   1b1a4:	10000326 	beq	r2,zero,1b1b4 <alt_dev_llist_insert+0x2c>
   1b1a8:	e0bffe17 	ldw	r2,-8(fp)
   1b1ac:	10800217 	ldw	r2,8(r2)
   1b1b0:	1000061e 	bne	r2,zero,1b1cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1b1b4:	001b1380 	call	1b138 <alt_get_errno>
   1b1b8:	1007883a 	mov	r3,r2
   1b1bc:	00800584 	movi	r2,22
   1b1c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b1c4:	00bffa84 	movi	r2,-22
   1b1c8:	00001306 	br	1b218 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b1cc:	e0bffe17 	ldw	r2,-8(fp)
   1b1d0:	e0ffff17 	ldw	r3,-4(fp)
   1b1d4:	e0fffc15 	stw	r3,-16(fp)
   1b1d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b1dc:	e0bffd17 	ldw	r2,-12(fp)
   1b1e0:	e0fffc17 	ldw	r3,-16(fp)
   1b1e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b1e8:	e0bffc17 	ldw	r2,-16(fp)
   1b1ec:	10c00017 	ldw	r3,0(r2)
   1b1f0:	e0bffd17 	ldw	r2,-12(fp)
   1b1f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b1f8:	e0bffc17 	ldw	r2,-16(fp)
   1b1fc:	10800017 	ldw	r2,0(r2)
   1b200:	e0fffd17 	ldw	r3,-12(fp)
   1b204:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	e0fffd17 	ldw	r3,-12(fp)
   1b210:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b214:	0005883a 	mov	r2,zero
}
   1b218:	e037883a 	mov	sp,fp
   1b21c:	dfc00117 	ldw	ra,4(sp)
   1b220:	df000017 	ldw	fp,0(sp)
   1b224:	dec00204 	addi	sp,sp,8
   1b228:	f800283a 	ret

0001b22c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b22c:	defffd04 	addi	sp,sp,-12
   1b230:	dfc00215 	stw	ra,8(sp)
   1b234:	df000115 	stw	fp,4(sp)
   1b238:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b23c:	008000b4 	movhi	r2,2
   1b240:	10b13404 	addi	r2,r2,-15152
   1b244:	e0bfff15 	stw	r2,-4(fp)
   1b248:	00000606 	br	1b264 <_do_ctors+0x38>
        (*ctor) (); 
   1b24c:	e0bfff17 	ldw	r2,-4(fp)
   1b250:	10800017 	ldw	r2,0(r2)
   1b254:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b258:	e0bfff17 	ldw	r2,-4(fp)
   1b25c:	10bfff04 	addi	r2,r2,-4
   1b260:	e0bfff15 	stw	r2,-4(fp)
   1b264:	e0ffff17 	ldw	r3,-4(fp)
   1b268:	008000b4 	movhi	r2,2
   1b26c:	10b13504 	addi	r2,r2,-15148
   1b270:	18bff62e 	bgeu	r3,r2,1b24c <__alt_mem_Flash_flash_data+0xf401b24c>
        (*ctor) (); 
}
   1b274:	e037883a 	mov	sp,fp
   1b278:	dfc00117 	ldw	ra,4(sp)
   1b27c:	df000017 	ldw	fp,0(sp)
   1b280:	dec00204 	addi	sp,sp,8
   1b284:	f800283a 	ret

0001b288 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b288:	defffd04 	addi	sp,sp,-12
   1b28c:	dfc00215 	stw	ra,8(sp)
   1b290:	df000115 	stw	fp,4(sp)
   1b294:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b298:	008000b4 	movhi	r2,2
   1b29c:	10b13404 	addi	r2,r2,-15152
   1b2a0:	e0bfff15 	stw	r2,-4(fp)
   1b2a4:	00000606 	br	1b2c0 <_do_dtors+0x38>
        (*dtor) (); 
   1b2a8:	e0bfff17 	ldw	r2,-4(fp)
   1b2ac:	10800017 	ldw	r2,0(r2)
   1b2b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b2b4:	e0bfff17 	ldw	r2,-4(fp)
   1b2b8:	10bfff04 	addi	r2,r2,-4
   1b2bc:	e0bfff15 	stw	r2,-4(fp)
   1b2c0:	e0ffff17 	ldw	r3,-4(fp)
   1b2c4:	008000b4 	movhi	r2,2
   1b2c8:	10b13504 	addi	r2,r2,-15148
   1b2cc:	18bff62e 	bgeu	r3,r2,1b2a8 <__alt_mem_Flash_flash_data+0xf401b2a8>
        (*dtor) (); 
}
   1b2d0:	e037883a 	mov	sp,fp
   1b2d4:	dfc00117 	ldw	ra,4(sp)
   1b2d8:	df000017 	ldw	fp,0(sp)
   1b2dc:	dec00204 	addi	sp,sp,8
   1b2e0:	f800283a 	ret

0001b2e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1b2e4:	defffa04 	addi	sp,sp,-24
   1b2e8:	dfc00515 	stw	ra,20(sp)
   1b2ec:	df000415 	stw	fp,16(sp)
   1b2f0:	df000404 	addi	fp,sp,16
   1b2f4:	e13ffe15 	stw	r4,-8(fp)
   1b2f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1b2fc:	e0bfff17 	ldw	r2,-4(fp)
   1b300:	10800017 	ldw	r2,0(r2)
   1b304:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1b308:	e13ffe17 	ldw	r4,-8(fp)
   1b30c:	0000c180 	call	c18 <strlen>
   1b310:	10800044 	addi	r2,r2,1
   1b314:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b318:	00000d06 	br	1b350 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1b31c:	e0bffc17 	ldw	r2,-16(fp)
   1b320:	10c00217 	ldw	r3,8(r2)
   1b324:	e0bffd17 	ldw	r2,-12(fp)
   1b328:	1809883a 	mov	r4,r3
   1b32c:	e17ffe17 	ldw	r5,-8(fp)
   1b330:	100d883a 	mov	r6,r2
   1b334:	001c1740 	call	1c174 <memcmp>
   1b338:	1000021e 	bne	r2,zero,1b344 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1b33c:	e0bffc17 	ldw	r2,-16(fp)
   1b340:	00000706 	br	1b360 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1b344:	e0bffc17 	ldw	r2,-16(fp)
   1b348:	10800017 	ldw	r2,0(r2)
   1b34c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b350:	e0fffc17 	ldw	r3,-16(fp)
   1b354:	e0bfff17 	ldw	r2,-4(fp)
   1b358:	18bff01e 	bne	r3,r2,1b31c <__alt_mem_Flash_flash_data+0xf401b31c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1b35c:	0005883a 	mov	r2,zero
}
   1b360:	e037883a 	mov	sp,fp
   1b364:	dfc00117 	ldw	ra,4(sp)
   1b368:	df000017 	ldw	fp,0(sp)
   1b36c:	dec00204 	addi	sp,sp,8
   1b370:	f800283a 	ret

0001b374 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b374:	defffe04 	addi	sp,sp,-8
   1b378:	dfc00115 	stw	ra,4(sp)
   1b37c:	df000015 	stw	fp,0(sp)
   1b380:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b384:	0009883a 	mov	r4,zero
   1b388:	01440004 	movi	r5,4096
   1b38c:	001c0000 	call	1c000 <alt_icache_flush>
#endif
}
   1b390:	e037883a 	mov	sp,fp
   1b394:	dfc00117 	ldw	ra,4(sp)
   1b398:	df000017 	ldw	fp,0(sp)
   1b39c:	dec00204 	addi	sp,sp,8
   1b3a0:	f800283a 	ret

0001b3a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b3a4:	defff904 	addi	sp,sp,-28
   1b3a8:	dfc00615 	stw	ra,24(sp)
   1b3ac:	df000515 	stw	fp,20(sp)
   1b3b0:	df000504 	addi	fp,sp,20
   1b3b4:	e13ffc15 	stw	r4,-16(fp)
   1b3b8:	e17ffd15 	stw	r5,-12(fp)
   1b3bc:	e1bffe15 	stw	r6,-8(fp)
   1b3c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1b3c4:	e13ffd17 	ldw	r4,-12(fp)
   1b3c8:	e17ffe17 	ldw	r5,-8(fp)
   1b3cc:	e1bfff17 	ldw	r6,-4(fp)
   1b3d0:	001b7a80 	call	1b7a8 <open>
   1b3d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1b3d8:	e0bffb17 	ldw	r2,-20(fp)
   1b3dc:	10001c16 	blt	r2,zero,1b450 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b3e0:	008000b4 	movhi	r2,2
   1b3e4:	10b52804 	addi	r2,r2,-11104
   1b3e8:	e0fffb17 	ldw	r3,-20(fp)
   1b3ec:	18c00324 	muli	r3,r3,12
   1b3f0:	10c5883a 	add	r2,r2,r3
   1b3f4:	10c00017 	ldw	r3,0(r2)
   1b3f8:	e0bffc17 	ldw	r2,-16(fp)
   1b3fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b400:	008000b4 	movhi	r2,2
   1b404:	10b52804 	addi	r2,r2,-11104
   1b408:	e0fffb17 	ldw	r3,-20(fp)
   1b40c:	18c00324 	muli	r3,r3,12
   1b410:	18c00104 	addi	r3,r3,4
   1b414:	10c5883a 	add	r2,r2,r3
   1b418:	10c00017 	ldw	r3,0(r2)
   1b41c:	e0bffc17 	ldw	r2,-16(fp)
   1b420:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b424:	008000b4 	movhi	r2,2
   1b428:	10b52804 	addi	r2,r2,-11104
   1b42c:	e0fffb17 	ldw	r3,-20(fp)
   1b430:	18c00324 	muli	r3,r3,12
   1b434:	18c00204 	addi	r3,r3,8
   1b438:	10c5883a 	add	r2,r2,r3
   1b43c:	10c00017 	ldw	r3,0(r2)
   1b440:	e0bffc17 	ldw	r2,-16(fp)
   1b444:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b448:	e13ffb17 	ldw	r4,-20(fp)
   1b44c:	00105e80 	call	105e8 <alt_release_fd>
  }
} 
   1b450:	e037883a 	mov	sp,fp
   1b454:	dfc00117 	ldw	ra,4(sp)
   1b458:	df000017 	ldw	fp,0(sp)
   1b45c:	dec00204 	addi	sp,sp,8
   1b460:	f800283a 	ret

0001b464 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b464:	defffb04 	addi	sp,sp,-20
   1b468:	dfc00415 	stw	ra,16(sp)
   1b46c:	df000315 	stw	fp,12(sp)
   1b470:	df000304 	addi	fp,sp,12
   1b474:	e13ffd15 	stw	r4,-12(fp)
   1b478:	e17ffe15 	stw	r5,-8(fp)
   1b47c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b480:	010000b4 	movhi	r4,2
   1b484:	21352b04 	addi	r4,r4,-11092
   1b488:	e17ffd17 	ldw	r5,-12(fp)
   1b48c:	01800044 	movi	r6,1
   1b490:	01c07fc4 	movi	r7,511
   1b494:	001b3a40 	call	1b3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b498:	010000b4 	movhi	r4,2
   1b49c:	21352804 	addi	r4,r4,-11104
   1b4a0:	e17ffe17 	ldw	r5,-8(fp)
   1b4a4:	000d883a 	mov	r6,zero
   1b4a8:	01c07fc4 	movi	r7,511
   1b4ac:	001b3a40 	call	1b3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b4b0:	010000b4 	movhi	r4,2
   1b4b4:	21352e04 	addi	r4,r4,-11080
   1b4b8:	e17fff17 	ldw	r5,-4(fp)
   1b4bc:	01800044 	movi	r6,1
   1b4c0:	01c07fc4 	movi	r7,511
   1b4c4:	001b3a40 	call	1b3a4 <alt_open_fd>
}  
   1b4c8:	e037883a 	mov	sp,fp
   1b4cc:	dfc00117 	ldw	ra,4(sp)
   1b4d0:	df000017 	ldw	fp,0(sp)
   1b4d4:	dec00204 	addi	sp,sp,8
   1b4d8:	f800283a 	ret

0001b4dc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1b4dc:	defff004 	addi	sp,sp,-64
   1b4e0:	df000f15 	stw	fp,60(sp)
   1b4e4:	df000f04 	addi	fp,sp,60
   1b4e8:	e13ffd15 	stw	r4,-12(fp)
   1b4ec:	e17ffe15 	stw	r5,-8(fp)
   1b4f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1b4f4:	00bffa84 	movi	r2,-22
   1b4f8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b4fc:	e0bffd17 	ldw	r2,-12(fp)
   1b500:	10800828 	cmpgeui	r2,r2,32
   1b504:	10005c1e 	bne	r2,zero,1b678 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b508:	0005303a 	rdctl	r2,status
   1b50c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b510:	e0fff317 	ldw	r3,-52(fp)
   1b514:	00bfff84 	movi	r2,-2
   1b518:	1884703a 	and	r2,r3,r2
   1b51c:	1001703a 	wrctl	status,r2
  
  return context;
   1b520:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1b524:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1b528:	008000b4 	movhi	r2,2
   1b52c:	109f6104 	addi	r2,r2,32132
   1b530:	e0fffd17 	ldw	r3,-12(fp)
   1b534:	180690fa 	slli	r3,r3,3
   1b538:	10c5883a 	add	r2,r2,r3
   1b53c:	e0ffff17 	ldw	r3,-4(fp)
   1b540:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1b544:	008000b4 	movhi	r2,2
   1b548:	109f6104 	addi	r2,r2,32132
   1b54c:	e0fffd17 	ldw	r3,-12(fp)
   1b550:	180690fa 	slli	r3,r3,3
   1b554:	18c00104 	addi	r3,r3,4
   1b558:	10c5883a 	add	r2,r2,r3
   1b55c:	e0fffe17 	ldw	r3,-8(fp)
   1b560:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1b564:	e0bfff17 	ldw	r2,-4(fp)
   1b568:	10001f26 	beq	r2,zero,1b5e8 <alt_irq_register+0x10c>
   1b56c:	e0bffd17 	ldw	r2,-12(fp)
   1b570:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b574:	0005303a 	rdctl	r2,status
   1b578:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b57c:	e0fff517 	ldw	r3,-44(fp)
   1b580:	00bfff84 	movi	r2,-2
   1b584:	1884703a 	and	r2,r3,r2
   1b588:	1001703a 	wrctl	status,r2
  
  return context;
   1b58c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b590:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1b594:	e0bff417 	ldw	r2,-48(fp)
   1b598:	00c00044 	movi	r3,1
   1b59c:	1884983a 	sll	r2,r3,r2
   1b5a0:	1007883a 	mov	r3,r2
   1b5a4:	008000b4 	movhi	r2,2
   1b5a8:	1082c004 	addi	r2,r2,2816
   1b5ac:	10800017 	ldw	r2,0(r2)
   1b5b0:	1886b03a 	or	r3,r3,r2
   1b5b4:	008000b4 	movhi	r2,2
   1b5b8:	1082c004 	addi	r2,r2,2816
   1b5bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b5c0:	008000b4 	movhi	r2,2
   1b5c4:	1082c004 	addi	r2,r2,2816
   1b5c8:	10800017 	ldw	r2,0(r2)
   1b5cc:	100170fa 	wrctl	ienable,r2
   1b5d0:	e0bff617 	ldw	r2,-40(fp)
   1b5d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5d8:	e0bff717 	ldw	r2,-36(fp)
   1b5dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b5e0:	0005883a 	mov	r2,zero
   1b5e4:	00001f06 	br	1b664 <alt_irq_register+0x188>
   1b5e8:	e0bffd17 	ldw	r2,-12(fp)
   1b5ec:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b5f0:	0005303a 	rdctl	r2,status
   1b5f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b5f8:	e0fff917 	ldw	r3,-28(fp)
   1b5fc:	00bfff84 	movi	r2,-2
   1b600:	1884703a 	and	r2,r3,r2
   1b604:	1001703a 	wrctl	status,r2
  
  return context;
   1b608:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b60c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1b610:	e0bff817 	ldw	r2,-32(fp)
   1b614:	00c00044 	movi	r3,1
   1b618:	1884983a 	sll	r2,r3,r2
   1b61c:	0084303a 	nor	r2,zero,r2
   1b620:	1007883a 	mov	r3,r2
   1b624:	008000b4 	movhi	r2,2
   1b628:	1082c004 	addi	r2,r2,2816
   1b62c:	10800017 	ldw	r2,0(r2)
   1b630:	1886703a 	and	r3,r3,r2
   1b634:	008000b4 	movhi	r2,2
   1b638:	1082c004 	addi	r2,r2,2816
   1b63c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b640:	008000b4 	movhi	r2,2
   1b644:	1082c004 	addi	r2,r2,2816
   1b648:	10800017 	ldw	r2,0(r2)
   1b64c:	100170fa 	wrctl	ienable,r2
   1b650:	e0bffa17 	ldw	r2,-24(fp)
   1b654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b658:	e0bffb17 	ldw	r2,-20(fp)
   1b65c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b660:	0005883a 	mov	r2,zero
   1b664:	e0bff115 	stw	r2,-60(fp)
   1b668:	e0bff217 	ldw	r2,-56(fp)
   1b66c:	e0bffc15 	stw	r2,-16(fp)
   1b670:	e0bffc17 	ldw	r2,-16(fp)
   1b674:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1b678:	e0bff117 	ldw	r2,-60(fp)
}
   1b67c:	e037883a 	mov	sp,fp
   1b680:	df000017 	ldw	fp,0(sp)
   1b684:	dec00104 	addi	sp,sp,4
   1b688:	f800283a 	ret

0001b68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b68c:	defffe04 	addi	sp,sp,-8
   1b690:	dfc00115 	stw	ra,4(sp)
   1b694:	df000015 	stw	fp,0(sp)
   1b698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b69c:	008000b4 	movhi	r2,2
   1b6a0:	10baa504 	addi	r2,r2,-5484
   1b6a4:	10800017 	ldw	r2,0(r2)
   1b6a8:	10000526 	beq	r2,zero,1b6c0 <alt_get_errno+0x34>
   1b6ac:	008000b4 	movhi	r2,2
   1b6b0:	10baa504 	addi	r2,r2,-5484
   1b6b4:	10800017 	ldw	r2,0(r2)
   1b6b8:	103ee83a 	callr	r2
   1b6bc:	00000206 	br	1b6c8 <alt_get_errno+0x3c>
   1b6c0:	008000b4 	movhi	r2,2
   1b6c4:	1082a304 	addi	r2,r2,2700
}
   1b6c8:	e037883a 	mov	sp,fp
   1b6cc:	dfc00117 	ldw	ra,4(sp)
   1b6d0:	df000017 	ldw	fp,0(sp)
   1b6d4:	dec00204 	addi	sp,sp,8
   1b6d8:	f800283a 	ret

0001b6dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b6dc:	defffd04 	addi	sp,sp,-12
   1b6e0:	df000215 	stw	fp,8(sp)
   1b6e4:	df000204 	addi	fp,sp,8
   1b6e8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b6ec:	e0bfff17 	ldw	r2,-4(fp)
   1b6f0:	10800217 	ldw	r2,8(r2)
   1b6f4:	10d00034 	orhi	r3,r2,16384
   1b6f8:	e0bfff17 	ldw	r2,-4(fp)
   1b6fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b700:	e03ffe15 	stw	zero,-8(fp)
   1b704:	00001d06 	br	1b77c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b708:	008000b4 	movhi	r2,2
   1b70c:	10b52804 	addi	r2,r2,-11104
   1b710:	e0fffe17 	ldw	r3,-8(fp)
   1b714:	18c00324 	muli	r3,r3,12
   1b718:	10c5883a 	add	r2,r2,r3
   1b71c:	10c00017 	ldw	r3,0(r2)
   1b720:	e0bfff17 	ldw	r2,-4(fp)
   1b724:	10800017 	ldw	r2,0(r2)
   1b728:	1880111e 	bne	r3,r2,1b770 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b72c:	008000b4 	movhi	r2,2
   1b730:	10b52804 	addi	r2,r2,-11104
   1b734:	e0fffe17 	ldw	r3,-8(fp)
   1b738:	18c00324 	muli	r3,r3,12
   1b73c:	18c00204 	addi	r3,r3,8
   1b740:	10c5883a 	add	r2,r2,r3
   1b744:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b748:	1000090e 	bge	r2,zero,1b770 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b74c:	e0bffe17 	ldw	r2,-8(fp)
   1b750:	10c00324 	muli	r3,r2,12
   1b754:	008000b4 	movhi	r2,2
   1b758:	10b52804 	addi	r2,r2,-11104
   1b75c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b760:	e0bfff17 	ldw	r2,-4(fp)
   1b764:	18800226 	beq	r3,r2,1b770 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b768:	00bffcc4 	movi	r2,-13
   1b76c:	00000a06 	br	1b798 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b770:	e0bffe17 	ldw	r2,-8(fp)
   1b774:	10800044 	addi	r2,r2,1
   1b778:	e0bffe15 	stw	r2,-8(fp)
   1b77c:	008000b4 	movhi	r2,2
   1b780:	10baa404 	addi	r2,r2,-5488
   1b784:	10800017 	ldw	r2,0(r2)
   1b788:	1007883a 	mov	r3,r2
   1b78c:	e0bffe17 	ldw	r2,-8(fp)
   1b790:	18bfdd2e 	bgeu	r3,r2,1b708 <__alt_mem_Flash_flash_data+0xf401b708>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b794:	0005883a 	mov	r2,zero
}
   1b798:	e037883a 	mov	sp,fp
   1b79c:	df000017 	ldw	fp,0(sp)
   1b7a0:	dec00104 	addi	sp,sp,4
   1b7a4:	f800283a 	ret

0001b7a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b7a8:	defff604 	addi	sp,sp,-40
   1b7ac:	dfc00915 	stw	ra,36(sp)
   1b7b0:	df000815 	stw	fp,32(sp)
   1b7b4:	df000804 	addi	fp,sp,32
   1b7b8:	e13ffd15 	stw	r4,-12(fp)
   1b7bc:	e17ffe15 	stw	r5,-8(fp)
   1b7c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b7c4:	00bfffc4 	movi	r2,-1
   1b7c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b7cc:	00bffb44 	movi	r2,-19
   1b7d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b7d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b7d8:	e13ffd17 	ldw	r4,-12(fp)
   1b7dc:	014000b4 	movhi	r5,2
   1b7e0:	297aa204 	addi	r5,r5,-5496
   1b7e4:	001b2e40 	call	1b2e4 <alt_find_dev>
   1b7e8:	e0bff815 	stw	r2,-32(fp)
   1b7ec:	e0bff817 	ldw	r2,-32(fp)
   1b7f0:	1000051e 	bne	r2,zero,1b808 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b7f4:	e13ffd17 	ldw	r4,-12(fp)
   1b7f8:	001bdf00 	call	1bdf0 <alt_find_file>
   1b7fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b800:	00800044 	movi	r2,1
   1b804:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b808:	e0bff817 	ldw	r2,-32(fp)
   1b80c:	10002926 	beq	r2,zero,1b8b4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b810:	e13ff817 	ldw	r4,-32(fp)
   1b814:	001bf040 	call	1bf04 <alt_get_fd>
   1b818:	e0bff915 	stw	r2,-28(fp)
   1b81c:	e0bff917 	ldw	r2,-28(fp)
   1b820:	1000030e 	bge	r2,zero,1b830 <open+0x88>
    {
      status = index;
   1b824:	e0bff917 	ldw	r2,-28(fp)
   1b828:	e0bffa15 	stw	r2,-24(fp)
   1b82c:	00002306 	br	1b8bc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b830:	e0bff917 	ldw	r2,-28(fp)
   1b834:	10c00324 	muli	r3,r2,12
   1b838:	008000b4 	movhi	r2,2
   1b83c:	10b52804 	addi	r2,r2,-11104
   1b840:	1885883a 	add	r2,r3,r2
   1b844:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b848:	e0fffe17 	ldw	r3,-8(fp)
   1b84c:	00900034 	movhi	r2,16384
   1b850:	10bfffc4 	addi	r2,r2,-1
   1b854:	1886703a 	and	r3,r3,r2
   1b858:	e0bffc17 	ldw	r2,-16(fp)
   1b85c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b860:	e0bffb17 	ldw	r2,-20(fp)
   1b864:	1000051e 	bne	r2,zero,1b87c <open+0xd4>
   1b868:	e13ffc17 	ldw	r4,-16(fp)
   1b86c:	001b6dc0 	call	1b6dc <alt_file_locked>
   1b870:	e0bffa15 	stw	r2,-24(fp)
   1b874:	e0bffa17 	ldw	r2,-24(fp)
   1b878:	10001016 	blt	r2,zero,1b8bc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b87c:	e0bff817 	ldw	r2,-32(fp)
   1b880:	10800317 	ldw	r2,12(r2)
   1b884:	10000826 	beq	r2,zero,1b8a8 <open+0x100>
   1b888:	e0bff817 	ldw	r2,-32(fp)
   1b88c:	10800317 	ldw	r2,12(r2)
   1b890:	e13ffc17 	ldw	r4,-16(fp)
   1b894:	e17ffd17 	ldw	r5,-12(fp)
   1b898:	e1bffe17 	ldw	r6,-8(fp)
   1b89c:	e1ffff17 	ldw	r7,-4(fp)
   1b8a0:	103ee83a 	callr	r2
   1b8a4:	00000106 	br	1b8ac <open+0x104>
   1b8a8:	0005883a 	mov	r2,zero
   1b8ac:	e0bffa15 	stw	r2,-24(fp)
   1b8b0:	00000206 	br	1b8bc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b8b4:	00bffb44 	movi	r2,-19
   1b8b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b8bc:	e0bffa17 	ldw	r2,-24(fp)
   1b8c0:	1000090e 	bge	r2,zero,1b8e8 <open+0x140>
  {
    alt_release_fd (index);  
   1b8c4:	e13ff917 	ldw	r4,-28(fp)
   1b8c8:	00105e80 	call	105e8 <alt_release_fd>
    ALT_ERRNO = -status;
   1b8cc:	001b68c0 	call	1b68c <alt_get_errno>
   1b8d0:	1007883a 	mov	r3,r2
   1b8d4:	e0bffa17 	ldw	r2,-24(fp)
   1b8d8:	0085c83a 	sub	r2,zero,r2
   1b8dc:	18800015 	stw	r2,0(r3)
    return -1;
   1b8e0:	00bfffc4 	movi	r2,-1
   1b8e4:	00000106 	br	1b8ec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1b8e8:	e0bff917 	ldw	r2,-28(fp)
}
   1b8ec:	e037883a 	mov	sp,fp
   1b8f0:	dfc00117 	ldw	ra,4(sp)
   1b8f4:	df000017 	ldw	fp,0(sp)
   1b8f8:	dec00204 	addi	sp,sp,8
   1b8fc:	f800283a 	ret

0001b900 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b900:	defffa04 	addi	sp,sp,-24
   1b904:	df000515 	stw	fp,20(sp)
   1b908:	df000504 	addi	fp,sp,20
   1b90c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b910:	0005303a 	rdctl	r2,status
   1b914:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b918:	e0fffc17 	ldw	r3,-16(fp)
   1b91c:	00bfff84 	movi	r2,-2
   1b920:	1884703a 	and	r2,r3,r2
   1b924:	1001703a 	wrctl	status,r2
  
  return context;
   1b928:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b92c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b930:	e0bfff17 	ldw	r2,-4(fp)
   1b934:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1b938:	e0bffd17 	ldw	r2,-12(fp)
   1b93c:	10800017 	ldw	r2,0(r2)
   1b940:	e0fffd17 	ldw	r3,-12(fp)
   1b944:	18c00117 	ldw	r3,4(r3)
   1b948:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1b94c:	e0bffd17 	ldw	r2,-12(fp)
   1b950:	10800117 	ldw	r2,4(r2)
   1b954:	e0fffd17 	ldw	r3,-12(fp)
   1b958:	18c00017 	ldw	r3,0(r3)
   1b95c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1b960:	e0bffd17 	ldw	r2,-12(fp)
   1b964:	e0fffd17 	ldw	r3,-12(fp)
   1b968:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1b96c:	e0bffd17 	ldw	r2,-12(fp)
   1b970:	e0fffd17 	ldw	r3,-12(fp)
   1b974:	10c00015 	stw	r3,0(r2)
   1b978:	e0bffb17 	ldw	r2,-20(fp)
   1b97c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b980:	e0bffe17 	ldw	r2,-8(fp)
   1b984:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1b988:	e037883a 	mov	sp,fp
   1b98c:	df000017 	ldw	fp,0(sp)
   1b990:	dec00104 	addi	sp,sp,4
   1b994:	f800283a 	ret

0001b998 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1b998:	defffb04 	addi	sp,sp,-20
   1b99c:	dfc00415 	stw	ra,16(sp)
   1b9a0:	df000315 	stw	fp,12(sp)
   1b9a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1b9a8:	d0a02d17 	ldw	r2,-32588(gp)
   1b9ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1b9b0:	d0a82817 	ldw	r2,-24416(gp)
   1b9b4:	10800044 	addi	r2,r2,1
   1b9b8:	d0a82815 	stw	r2,-24416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1b9bc:	00002e06 	br	1ba78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1b9c0:	e0bffd17 	ldw	r2,-12(fp)
   1b9c4:	10800017 	ldw	r2,0(r2)
   1b9c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1b9cc:	e0bffd17 	ldw	r2,-12(fp)
   1b9d0:	10800403 	ldbu	r2,16(r2)
   1b9d4:	10803fcc 	andi	r2,r2,255
   1b9d8:	10000426 	beq	r2,zero,1b9ec <alt_tick+0x54>
   1b9dc:	d0a82817 	ldw	r2,-24416(gp)
   1b9e0:	1000021e 	bne	r2,zero,1b9ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1b9e4:	e0bffd17 	ldw	r2,-12(fp)
   1b9e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1b9ec:	e0bffd17 	ldw	r2,-12(fp)
   1b9f0:	10800217 	ldw	r2,8(r2)
   1b9f4:	d0e82817 	ldw	r3,-24416(gp)
   1b9f8:	18801d36 	bltu	r3,r2,1ba70 <alt_tick+0xd8>
   1b9fc:	e0bffd17 	ldw	r2,-12(fp)
   1ba00:	10800403 	ldbu	r2,16(r2)
   1ba04:	10803fcc 	andi	r2,r2,255
   1ba08:	1000191e 	bne	r2,zero,1ba70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ba0c:	e0bffd17 	ldw	r2,-12(fp)
   1ba10:	10800317 	ldw	r2,12(r2)
   1ba14:	e0fffd17 	ldw	r3,-12(fp)
   1ba18:	18c00517 	ldw	r3,20(r3)
   1ba1c:	1809883a 	mov	r4,r3
   1ba20:	103ee83a 	callr	r2
   1ba24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ba28:	e0bfff17 	ldw	r2,-4(fp)
   1ba2c:	1000031e 	bne	r2,zero,1ba3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ba30:	e13ffd17 	ldw	r4,-12(fp)
   1ba34:	001b9000 	call	1b900 <alt_alarm_stop>
   1ba38:	00000d06 	br	1ba70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ba3c:	e0bffd17 	ldw	r2,-12(fp)
   1ba40:	10c00217 	ldw	r3,8(r2)
   1ba44:	e0bfff17 	ldw	r2,-4(fp)
   1ba48:	1887883a 	add	r3,r3,r2
   1ba4c:	e0bffd17 	ldw	r2,-12(fp)
   1ba50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ba54:	e0bffd17 	ldw	r2,-12(fp)
   1ba58:	10c00217 	ldw	r3,8(r2)
   1ba5c:	d0a82817 	ldw	r2,-24416(gp)
   1ba60:	1880032e 	bgeu	r3,r2,1ba70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1ba64:	e0bffd17 	ldw	r2,-12(fp)
   1ba68:	00c00044 	movi	r3,1
   1ba6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1ba70:	e0bffe17 	ldw	r2,-8(fp)
   1ba74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ba78:	e0fffd17 	ldw	r3,-12(fp)
   1ba7c:	d0a02d04 	addi	r2,gp,-32588
   1ba80:	18bfcf1e 	bne	r3,r2,1b9c0 <__alt_mem_Flash_flash_data+0xf401b9c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ba84:	00117f40 	call	117f4 <OSTimeTick>
}
   1ba88:	e037883a 	mov	sp,fp
   1ba8c:	dfc00117 	ldw	ra,4(sp)
   1ba90:	df000017 	ldw	fp,0(sp)
   1ba94:	dec00204 	addi	sp,sp,8
   1ba98:	f800283a 	ret

0001ba9c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ba9c:	deffff04 	addi	sp,sp,-4
   1baa0:	df000015 	stw	fp,0(sp)
   1baa4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1baa8:	000170fa 	wrctl	ienable,zero
}
   1baac:	e037883a 	mov	sp,fp
   1bab0:	df000017 	ldw	fp,0(sp)
   1bab4:	dec00104 	addi	sp,sp,4
   1bab8:	f800283a 	ret

0001babc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1babc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1bac0:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1bac4:	d1282117 	ldw	r4,-24444(gp)

      stw ra,  0(sp)
   1bac8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1bacc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1bad0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1bad4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1bad8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1badc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1bae0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1bae4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1bae8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1baec:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1baf0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1baf4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1baf8:	001bd280 	call	1bd28 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1bafc:	d1281c17 	ldw	r4,-24464(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1bb00:	d1681407 	ldb	r5,-24496(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1bb04:	d1282115 	stw	r4,-24444(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1bb08:	d1681445 	stb	r5,-24495(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1bb0c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1bb10:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1bb14:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1bb18:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1bb1c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1bb20:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1bb24:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1bb28:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1bb2c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1bb30:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1bb34:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1bb38:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1bb3c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1bb40:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1bb44:	f800283a 	ret

0001bb48 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1bb48:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1bb4c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1bb50:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1bb54:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bb58:	001bd280 	call	1bd28 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1bb5c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1bb60:	d4a81245 	stb	r18,-24503(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1bb64:	003fe506 	br	1bafc <__alt_mem_Flash_flash_data+0xf401bafc>

0001bb68 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1bb68:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1bb6c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1bb70:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1bb74:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1bb78:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1bb7c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1bb80:	dec00204 	addi	sp,sp,8

      callr r2
   1bb84:	103ee83a 	callr	r2

      nop
   1bb88:	0001883a 	nop

0001bb8c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1bb8c:	defff704 	addi	sp,sp,-36
   1bb90:	dfc00815 	stw	ra,32(sp)
   1bb94:	df000715 	stw	fp,28(sp)
   1bb98:	df000704 	addi	fp,sp,28
   1bb9c:	e13ffc15 	stw	r4,-16(fp)
   1bba0:	e17ffd15 	stw	r5,-12(fp)
   1bba4:	e1bffe15 	stw	r6,-8(fp)
   1bba8:	3805883a 	mov	r2,r7
   1bbac:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1bbb0:	e0fffe17 	ldw	r3,-8(fp)
   1bbb4:	00bfff04 	movi	r2,-4
   1bbb8:	1884703a 	and	r2,r3,r2
   1bbbc:	10bef704 	addi	r2,r2,-1060
   1bbc0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1bbc4:	e13ff917 	ldw	r4,-28(fp)
   1bbc8:	000b883a 	mov	r5,zero
   1bbcc:	01810904 	movi	r6,1060
   1bbd0:	00008680 	call	868 <memset>
   1bbd4:	e0bff917 	ldw	r2,-28(fp)
   1bbd8:	10c0bb04 	addi	r3,r2,748
   1bbdc:	e0bff917 	ldw	r2,-28(fp)
   1bbe0:	10c00115 	stw	r3,4(r2)
   1bbe4:	e0bff917 	ldw	r2,-28(fp)
   1bbe8:	10c0d504 	addi	r3,r2,852
   1bbec:	e0bff917 	ldw	r2,-28(fp)
   1bbf0:	10c00215 	stw	r3,8(r2)
   1bbf4:	e0bff917 	ldw	r2,-28(fp)
   1bbf8:	10c0ef04 	addi	r3,r2,956
   1bbfc:	e0bff917 	ldw	r2,-28(fp)
   1bc00:	10c00315 	stw	r3,12(r2)
   1bc04:	e0fff917 	ldw	r3,-28(fp)
   1bc08:	008000b4 	movhi	r2,2
   1bc0c:	10b2f404 	addi	r2,r2,-13360
   1bc10:	18800d15 	stw	r2,52(r3)
   1bc14:	e0bff917 	ldw	r2,-28(fp)
   1bc18:	00c00044 	movi	r3,1
   1bc1c:	10c02915 	stw	r3,164(r2)
   1bc20:	10002a15 	stw	zero,168(r2)
   1bc24:	e0bff917 	ldw	r2,-28(fp)
   1bc28:	00ccc384 	movi	r3,13070
   1bc2c:	10c02b0d 	sth	r3,172(r2)
   1bc30:	e0bff917 	ldw	r2,-28(fp)
   1bc34:	00eaf344 	movi	r3,-21555
   1bc38:	10c02b8d 	sth	r3,174(r2)
   1bc3c:	e0bff917 	ldw	r2,-28(fp)
   1bc40:	00c48d04 	movi	r3,4660
   1bc44:	10c02c0d 	sth	r3,176(r2)
   1bc48:	e0bff917 	ldw	r2,-28(fp)
   1bc4c:	00f99b44 	movi	r3,-6547
   1bc50:	10c02c8d 	sth	r3,178(r2)
   1bc54:	e0bff917 	ldw	r2,-28(fp)
   1bc58:	00f7bb04 	movi	r3,-8468
   1bc5c:	10c02d0d 	sth	r3,180(r2)
   1bc60:	e0bff917 	ldw	r2,-28(fp)
   1bc64:	00c00144 	movi	r3,5
   1bc68:	10c02d8d 	sth	r3,182(r2)
   1bc6c:	e0bff917 	ldw	r2,-28(fp)
   1bc70:	00c002c4 	movi	r3,11
   1bc74:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1bc78:	e0bff917 	ldw	r2,-28(fp)
   1bc7c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1bc80:	e0bffa17 	ldw	r2,-24(fp)
   1bc84:	10bff304 	addi	r2,r2,-52
   1bc88:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1bc8c:	e0bffb17 	ldw	r2,-20(fp)
   1bc90:	10800c04 	addi	r2,r2,48
   1bc94:	e0fffc17 	ldw	r3,-16(fp)
   1bc98:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1bc9c:	e0bffb17 	ldw	r2,-20(fp)
   1bca0:	10800b04 	addi	r2,r2,44
   1bca4:	e0fffd17 	ldw	r3,-12(fp)
   1bca8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1bcac:	e0bffb17 	ldw	r2,-20(fp)
   1bcb0:	10800a04 	addi	r2,r2,40
   1bcb4:	e0fff917 	ldw	r3,-28(fp)
   1bcb8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1bcbc:	008000b4 	movhi	r2,2
   1bcc0:	10aeda04 	addi	r2,r2,-17560
   1bcc4:	10c00104 	addi	r3,r2,4
   1bcc8:	e0bffb17 	ldw	r2,-20(fp)
   1bccc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1bcd0:	e0bffb17 	ldw	r2,-20(fp)
}
   1bcd4:	e037883a 	mov	sp,fp
   1bcd8:	dfc00117 	ldw	ra,4(sp)
   1bcdc:	df000017 	ldw	fp,0(sp)
   1bce0:	dec00204 	addi	sp,sp,8
   1bce4:	f800283a 	ret

0001bce8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1bce8:	defffe04 	addi	sp,sp,-8
   1bcec:	df000115 	stw	fp,4(sp)
   1bcf0:	df000104 	addi	fp,sp,4
   1bcf4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1bcf8:	e037883a 	mov	sp,fp
   1bcfc:	df000017 	ldw	fp,0(sp)
   1bd00:	dec00104 	addi	sp,sp,4
   1bd04:	f800283a 	ret

0001bd08 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1bd08:	defffe04 	addi	sp,sp,-8
   1bd0c:	df000115 	stw	fp,4(sp)
   1bd10:	df000104 	addi	fp,sp,4
   1bd14:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1bd18:	e037883a 	mov	sp,fp
   1bd1c:	df000017 	ldw	fp,0(sp)
   1bd20:	dec00104 	addi	sp,sp,4
   1bd24:	f800283a 	ret

0001bd28 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1bd28:	deffff04 	addi	sp,sp,-4
   1bd2c:	df000015 	stw	fp,0(sp)
   1bd30:	d839883a 	mov	fp,sp
}
   1bd34:	e037883a 	mov	sp,fp
   1bd38:	df000017 	ldw	fp,0(sp)
   1bd3c:	dec00104 	addi	sp,sp,4
   1bd40:	f800283a 	ret

0001bd44 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1bd44:	deffff04 	addi	sp,sp,-4
   1bd48:	df000015 	stw	fp,0(sp)
   1bd4c:	d839883a 	mov	fp,sp
}
   1bd50:	e037883a 	mov	sp,fp
   1bd54:	df000017 	ldw	fp,0(sp)
   1bd58:	dec00104 	addi	sp,sp,4
   1bd5c:	f800283a 	ret

0001bd60 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1bd60:	deffff04 	addi	sp,sp,-4
   1bd64:	df000015 	stw	fp,0(sp)
   1bd68:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1bd6c:	e037883a 	mov	sp,fp
   1bd70:	df000017 	ldw	fp,0(sp)
   1bd74:	dec00104 	addi	sp,sp,4
   1bd78:	f800283a 	ret

0001bd7c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1bd7c:	deffff04 	addi	sp,sp,-4
   1bd80:	df000015 	stw	fp,0(sp)
   1bd84:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1bd88:	e037883a 	mov	sp,fp
   1bd8c:	df000017 	ldw	fp,0(sp)
   1bd90:	dec00104 	addi	sp,sp,4
   1bd94:	f800283a 	ret

0001bd98 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1bd98:	deffff04 	addi	sp,sp,-4
   1bd9c:	df000015 	stw	fp,0(sp)
   1bda0:	d839883a 	mov	fp,sp
}
   1bda4:	e037883a 	mov	sp,fp
   1bda8:	df000017 	ldw	fp,0(sp)
   1bdac:	dec00104 	addi	sp,sp,4
   1bdb0:	f800283a 	ret

0001bdb4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1bdb4:	deffff04 	addi	sp,sp,-4
   1bdb8:	df000015 	stw	fp,0(sp)
   1bdbc:	d839883a 	mov	fp,sp
}
   1bdc0:	e037883a 	mov	sp,fp
   1bdc4:	df000017 	ldw	fp,0(sp)
   1bdc8:	dec00104 	addi	sp,sp,4
   1bdcc:	f800283a 	ret

0001bdd0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1bdd0:	defffe04 	addi	sp,sp,-8
   1bdd4:	df000115 	stw	fp,4(sp)
   1bdd8:	df000104 	addi	fp,sp,4
   1bddc:	e13fff15 	stw	r4,-4(fp)
}
   1bde0:	e037883a 	mov	sp,fp
   1bde4:	df000017 	ldw	fp,0(sp)
   1bde8:	dec00104 	addi	sp,sp,4
   1bdec:	f800283a 	ret

0001bdf0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bdf0:	defffb04 	addi	sp,sp,-20
   1bdf4:	dfc00415 	stw	ra,16(sp)
   1bdf8:	df000315 	stw	fp,12(sp)
   1bdfc:	df000304 	addi	fp,sp,12
   1be00:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1be04:	008000b4 	movhi	r2,2
   1be08:	10baa004 	addi	r2,r2,-5504
   1be0c:	10800017 	ldw	r2,0(r2)
   1be10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1be14:	00003106 	br	1bedc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1be18:	e0bffd17 	ldw	r2,-12(fp)
   1be1c:	10800217 	ldw	r2,8(r2)
   1be20:	1009883a 	mov	r4,r2
   1be24:	0000c180 	call	c18 <strlen>
   1be28:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1be2c:	e0bffd17 	ldw	r2,-12(fp)
   1be30:	10c00217 	ldw	r3,8(r2)
   1be34:	e0bffe17 	ldw	r2,-8(fp)
   1be38:	10bfffc4 	addi	r2,r2,-1
   1be3c:	1885883a 	add	r2,r3,r2
   1be40:	10800003 	ldbu	r2,0(r2)
   1be44:	10803fcc 	andi	r2,r2,255
   1be48:	1080201c 	xori	r2,r2,128
   1be4c:	10bfe004 	addi	r2,r2,-128
   1be50:	10800bd8 	cmpnei	r2,r2,47
   1be54:	1000031e 	bne	r2,zero,1be64 <alt_find_file+0x74>
    {
      len -= 1;
   1be58:	e0bffe17 	ldw	r2,-8(fp)
   1be5c:	10bfffc4 	addi	r2,r2,-1
   1be60:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1be64:	e0bffe17 	ldw	r2,-8(fp)
   1be68:	e0ffff17 	ldw	r3,-4(fp)
   1be6c:	1885883a 	add	r2,r3,r2
   1be70:	10800003 	ldbu	r2,0(r2)
   1be74:	10803fcc 	andi	r2,r2,255
   1be78:	1080201c 	xori	r2,r2,128
   1be7c:	10bfe004 	addi	r2,r2,-128
   1be80:	10800be0 	cmpeqi	r2,r2,47
   1be84:	1000081e 	bne	r2,zero,1bea8 <alt_find_file+0xb8>
   1be88:	e0bffe17 	ldw	r2,-8(fp)
   1be8c:	e0ffff17 	ldw	r3,-4(fp)
   1be90:	1885883a 	add	r2,r3,r2
   1be94:	10800003 	ldbu	r2,0(r2)
   1be98:	10803fcc 	andi	r2,r2,255
   1be9c:	1080201c 	xori	r2,r2,128
   1bea0:	10bfe004 	addi	r2,r2,-128
   1bea4:	10000a1e 	bne	r2,zero,1bed0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1bea8:	e0bffd17 	ldw	r2,-12(fp)
   1beac:	10c00217 	ldw	r3,8(r2)
   1beb0:	e0bffe17 	ldw	r2,-8(fp)
   1beb4:	1809883a 	mov	r4,r3
   1beb8:	e17fff17 	ldw	r5,-4(fp)
   1bebc:	100d883a 	mov	r6,r2
   1bec0:	001c1740 	call	1c174 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bec4:	1000021e 	bne	r2,zero,1bed0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bec8:	e0bffd17 	ldw	r2,-12(fp)
   1becc:	00000806 	br	1bef0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1bed0:	e0bffd17 	ldw	r2,-12(fp)
   1bed4:	10800017 	ldw	r2,0(r2)
   1bed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bedc:	e0fffd17 	ldw	r3,-12(fp)
   1bee0:	008000b4 	movhi	r2,2
   1bee4:	10baa004 	addi	r2,r2,-5504
   1bee8:	18bfcb1e 	bne	r3,r2,1be18 <__alt_mem_Flash_flash_data+0xf401be18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1beec:	0005883a 	mov	r2,zero
}
   1bef0:	e037883a 	mov	sp,fp
   1bef4:	dfc00117 	ldw	ra,4(sp)
   1bef8:	df000017 	ldw	fp,0(sp)
   1befc:	dec00204 	addi	sp,sp,8
   1bf00:	f800283a 	ret

0001bf04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1bf04:	defff904 	addi	sp,sp,-28
   1bf08:	dfc00615 	stw	ra,24(sp)
   1bf0c:	df000515 	stw	fp,20(sp)
   1bf10:	df000504 	addi	fp,sp,20
   1bf14:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1bf18:	00bffa04 	movi	r2,-24
   1bf1c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1bf20:	008000b4 	movhi	r2,2
   1bf24:	1082a404 	addi	r2,r2,2704
   1bf28:	10800017 	ldw	r2,0(r2)
   1bf2c:	e0bffd15 	stw	r2,-12(fp)
   1bf30:	e03ffe0d 	sth	zero,-8(fp)
   1bf34:	e0fffe0b 	ldhu	r3,-8(fp)
   1bf38:	e0bffe84 	addi	r2,fp,-6
   1bf3c:	e13ffd17 	ldw	r4,-12(fp)
   1bf40:	180b883a 	mov	r5,r3
   1bf44:	100d883a 	mov	r6,r2
   1bf48:	00162900 	call	16290 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bf4c:	e03ffb15 	stw	zero,-20(fp)
   1bf50:	00001d06 	br	1bfc8 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1bf54:	008000b4 	movhi	r2,2
   1bf58:	10b52804 	addi	r2,r2,-11104
   1bf5c:	e0fffb17 	ldw	r3,-20(fp)
   1bf60:	18c00324 	muli	r3,r3,12
   1bf64:	10c5883a 	add	r2,r2,r3
   1bf68:	10800017 	ldw	r2,0(r2)
   1bf6c:	1000131e 	bne	r2,zero,1bfbc <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1bf70:	008000b4 	movhi	r2,2
   1bf74:	10b52804 	addi	r2,r2,-11104
   1bf78:	e0fffb17 	ldw	r3,-20(fp)
   1bf7c:	18c00324 	muli	r3,r3,12
   1bf80:	10c5883a 	add	r2,r2,r3
   1bf84:	e0ffff17 	ldw	r3,-4(fp)
   1bf88:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1bf8c:	008000b4 	movhi	r2,2
   1bf90:	10baa404 	addi	r2,r2,-5488
   1bf94:	10c00017 	ldw	r3,0(r2)
   1bf98:	e0bffb17 	ldw	r2,-20(fp)
   1bf9c:	1880040e 	bge	r3,r2,1bfb0 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1bfa0:	008000b4 	movhi	r2,2
   1bfa4:	10baa404 	addi	r2,r2,-5488
   1bfa8:	e0fffb17 	ldw	r3,-20(fp)
   1bfac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1bfb0:	e0bffb17 	ldw	r2,-20(fp)
   1bfb4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1bfb8:	00000606 	br	1bfd4 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bfbc:	e0bffb17 	ldw	r2,-20(fp)
   1bfc0:	10800044 	addi	r2,r2,1
   1bfc4:	e0bffb15 	stw	r2,-20(fp)
   1bfc8:	e0bffb17 	ldw	r2,-20(fp)
   1bfcc:	10800810 	cmplti	r2,r2,32
   1bfd0:	103fe01e 	bne	r2,zero,1bf54 <__alt_mem_Flash_flash_data+0xf401bf54>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1bfd4:	008000b4 	movhi	r2,2
   1bfd8:	1082a404 	addi	r2,r2,2704
   1bfdc:	10800017 	ldw	r2,0(r2)
   1bfe0:	1009883a 	mov	r4,r2
   1bfe4:	00166640 	call	16664 <OSSemPost>

  return rc;
   1bfe8:	e0bffc17 	ldw	r2,-16(fp)
}
   1bfec:	e037883a 	mov	sp,fp
   1bff0:	dfc00117 	ldw	ra,4(sp)
   1bff4:	df000017 	ldw	fp,0(sp)
   1bff8:	dec00204 	addi	sp,sp,8
   1bffc:	f800283a 	ret

0001c000 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c000:	defffb04 	addi	sp,sp,-20
   1c004:	df000415 	stw	fp,16(sp)
   1c008:	df000404 	addi	fp,sp,16
   1c00c:	e13ffe15 	stw	r4,-8(fp)
   1c010:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c014:	e0bfff17 	ldw	r2,-4(fp)
   1c018:	10840070 	cmpltui	r2,r2,4097
   1c01c:	1000021e 	bne	r2,zero,1c028 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c020:	00840004 	movi	r2,4096
   1c024:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c028:	e0fffe17 	ldw	r3,-8(fp)
   1c02c:	e0bfff17 	ldw	r2,-4(fp)
   1c030:	1885883a 	add	r2,r3,r2
   1c034:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c038:	e0bffe17 	ldw	r2,-8(fp)
   1c03c:	e0bffc15 	stw	r2,-16(fp)
   1c040:	00000506 	br	1c058 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c044:	e0bffc17 	ldw	r2,-16(fp)
   1c048:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c04c:	e0bffc17 	ldw	r2,-16(fp)
   1c050:	10800804 	addi	r2,r2,32
   1c054:	e0bffc15 	stw	r2,-16(fp)
   1c058:	e0fffc17 	ldw	r3,-16(fp)
   1c05c:	e0bffd17 	ldw	r2,-12(fp)
   1c060:	18bff836 	bltu	r3,r2,1c044 <__alt_mem_Flash_flash_data+0xf401c044>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c064:	e0bffe17 	ldw	r2,-8(fp)
   1c068:	108007cc 	andi	r2,r2,31
   1c06c:	10000226 	beq	r2,zero,1c078 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c070:	e0bffc17 	ldw	r2,-16(fp)
   1c074:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c078:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c07c:	e037883a 	mov	sp,fp
   1c080:	df000017 	ldw	fp,0(sp)
   1c084:	dec00104 	addi	sp,sp,4
   1c088:	f800283a 	ret

0001c08c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1c08c:	defffe04 	addi	sp,sp,-8
   1c090:	df000115 	stw	fp,4(sp)
   1c094:	df000104 	addi	fp,sp,4
   1c098:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1c09c:	e0bfff17 	ldw	r2,-4(fp)
   1c0a0:	10bffe84 	addi	r2,r2,-6
   1c0a4:	10c00428 	cmpgeui	r3,r2,16
   1c0a8:	18001a1e 	bne	r3,zero,1c114 <alt_exception_cause_generated_bad_addr+0x88>
   1c0ac:	100690ba 	slli	r3,r2,2
   1c0b0:	008000b4 	movhi	r2,2
   1c0b4:	10b03104 	addi	r2,r2,-16188
   1c0b8:	1885883a 	add	r2,r3,r2
   1c0bc:	10800017 	ldw	r2,0(r2)
   1c0c0:	1000683a 	jmp	r2
   1c0c4:	0001c104 	movi	zero,1796
   1c0c8:	0001c104 	movi	zero,1796
   1c0cc:	0001c114 	movui	zero,1796
   1c0d0:	0001c114 	movui	zero,1796
   1c0d4:	0001c114 	movui	zero,1796
   1c0d8:	0001c104 	movi	zero,1796
   1c0dc:	0001c10c 	andi	zero,zero,1796
   1c0e0:	0001c114 	movui	zero,1796
   1c0e4:	0001c104 	movi	zero,1796
   1c0e8:	0001c104 	movi	zero,1796
   1c0ec:	0001c114 	movui	zero,1796
   1c0f0:	0001c104 	movi	zero,1796
   1c0f4:	0001c10c 	andi	zero,zero,1796
   1c0f8:	0001c114 	movui	zero,1796
   1c0fc:	0001c114 	movui	zero,1796
   1c100:	0001c104 	movi	zero,1796
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1c104:	00800044 	movi	r2,1
   1c108:	00000306 	br	1c118 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1c10c:	0005883a 	mov	r2,zero
   1c110:	00000106 	br	1c118 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1c114:	0005883a 	mov	r2,zero
  }
}
   1c118:	e037883a 	mov	sp,fp
   1c11c:	df000017 	ldw	fp,0(sp)
   1c120:	dec00104 	addi	sp,sp,4
   1c124:	f800283a 	ret

0001c128 <atexit>:
   1c128:	200b883a 	mov	r5,r4
   1c12c:	000d883a 	mov	r6,zero
   1c130:	0009883a 	mov	r4,zero
   1c134:	000f883a 	mov	r7,zero
   1c138:	001c1f01 	jmpi	1c1f0 <__register_exitproc>

0001c13c <exit>:
   1c13c:	defffe04 	addi	sp,sp,-8
   1c140:	000b883a 	mov	r5,zero
   1c144:	dc000015 	stw	r16,0(sp)
   1c148:	dfc00115 	stw	ra,4(sp)
   1c14c:	2021883a 	mov	r16,r4
   1c150:	001c3040 	call	1c304 <__call_exitprocs>
   1c154:	008000b4 	movhi	r2,2
   1c158:	10ba9a04 	addi	r2,r2,-5528
   1c15c:	11000017 	ldw	r4,0(r2)
   1c160:	20800f17 	ldw	r2,60(r4)
   1c164:	10000126 	beq	r2,zero,1c16c <exit+0x30>
   1c168:	103ee83a 	callr	r2
   1c16c:	8009883a 	mov	r4,r16
   1c170:	001c4980 	call	1c498 <_exit>

0001c174 <memcmp>:
   1c174:	01c000c4 	movi	r7,3
   1c178:	3980192e 	bgeu	r7,r6,1c1e0 <memcmp+0x6c>
   1c17c:	2144b03a 	or	r2,r4,r5
   1c180:	11c4703a 	and	r2,r2,r7
   1c184:	10000f26 	beq	r2,zero,1c1c4 <memcmp+0x50>
   1c188:	20800003 	ldbu	r2,0(r4)
   1c18c:	28c00003 	ldbu	r3,0(r5)
   1c190:	10c0151e 	bne	r2,r3,1c1e8 <memcmp+0x74>
   1c194:	31bfff84 	addi	r6,r6,-2
   1c198:	01ffffc4 	movi	r7,-1
   1c19c:	00000406 	br	1c1b0 <memcmp+0x3c>
   1c1a0:	20800003 	ldbu	r2,0(r4)
   1c1a4:	28c00003 	ldbu	r3,0(r5)
   1c1a8:	31bfffc4 	addi	r6,r6,-1
   1c1ac:	10c00e1e 	bne	r2,r3,1c1e8 <memcmp+0x74>
   1c1b0:	21000044 	addi	r4,r4,1
   1c1b4:	29400044 	addi	r5,r5,1
   1c1b8:	31fff91e 	bne	r6,r7,1c1a0 <__alt_mem_Flash_flash_data+0xf401c1a0>
   1c1bc:	0005883a 	mov	r2,zero
   1c1c0:	f800283a 	ret
   1c1c4:	20c00017 	ldw	r3,0(r4)
   1c1c8:	28800017 	ldw	r2,0(r5)
   1c1cc:	1880041e 	bne	r3,r2,1c1e0 <memcmp+0x6c>
   1c1d0:	31bfff04 	addi	r6,r6,-4
   1c1d4:	21000104 	addi	r4,r4,4
   1c1d8:	29400104 	addi	r5,r5,4
   1c1dc:	39bff936 	bltu	r7,r6,1c1c4 <__alt_mem_Flash_flash_data+0xf401c1c4>
   1c1e0:	303fe91e 	bne	r6,zero,1c188 <__alt_mem_Flash_flash_data+0xf401c188>
   1c1e4:	003ff506 	br	1c1bc <__alt_mem_Flash_flash_data+0xf401c1bc>
   1c1e8:	10c5c83a 	sub	r2,r2,r3
   1c1ec:	f800283a 	ret

0001c1f0 <__register_exitproc>:
   1c1f0:	008000b4 	movhi	r2,2
   1c1f4:	defffa04 	addi	sp,sp,-24
   1c1f8:	10ba9a04 	addi	r2,r2,-5528
   1c1fc:	dc000315 	stw	r16,12(sp)
   1c200:	14000017 	ldw	r16,0(r2)
   1c204:	dc400415 	stw	r17,16(sp)
   1c208:	dfc00515 	stw	ra,20(sp)
   1c20c:	80805217 	ldw	r2,328(r16)
   1c210:	2023883a 	mov	r17,r4
   1c214:	10003626 	beq	r2,zero,1c2f0 <__register_exitproc+0x100>
   1c218:	10c00117 	ldw	r3,4(r2)
   1c21c:	010007c4 	movi	r4,31
   1c220:	20c00e16 	blt	r4,r3,1c25c <__register_exitproc+0x6c>
   1c224:	1a400044 	addi	r9,r3,1
   1c228:	8800211e 	bne	r17,zero,1c2b0 <__register_exitproc+0xc0>
   1c22c:	18c00084 	addi	r3,r3,2
   1c230:	18c7883a 	add	r3,r3,r3
   1c234:	18c7883a 	add	r3,r3,r3
   1c238:	12400115 	stw	r9,4(r2)
   1c23c:	10c7883a 	add	r3,r2,r3
   1c240:	19400015 	stw	r5,0(r3)
   1c244:	0005883a 	mov	r2,zero
   1c248:	dfc00517 	ldw	ra,20(sp)
   1c24c:	dc400417 	ldw	r17,16(sp)
   1c250:	dc000317 	ldw	r16,12(sp)
   1c254:	dec00604 	addi	sp,sp,24
   1c258:	f800283a 	ret
   1c25c:	00800034 	movhi	r2,0
   1c260:	10800004 	addi	r2,r2,0
   1c264:	10002526 	beq	r2,zero,1c2fc <__register_exitproc+0x10c>
   1c268:	01006404 	movi	r4,400
   1c26c:	d9400015 	stw	r5,0(sp)
   1c270:	d9800115 	stw	r6,4(sp)
   1c274:	d9c00215 	stw	r7,8(sp)
   1c278:	00000000 	call	0 <__alt_mem_SDRAM>
   1c27c:	d9400017 	ldw	r5,0(sp)
   1c280:	d9800117 	ldw	r6,4(sp)
   1c284:	d9c00217 	ldw	r7,8(sp)
   1c288:	10001c26 	beq	r2,zero,1c2fc <__register_exitproc+0x10c>
   1c28c:	80c05217 	ldw	r3,328(r16)
   1c290:	10000115 	stw	zero,4(r2)
   1c294:	02400044 	movi	r9,1
   1c298:	10c00015 	stw	r3,0(r2)
   1c29c:	80805215 	stw	r2,328(r16)
   1c2a0:	10006215 	stw	zero,392(r2)
   1c2a4:	10006315 	stw	zero,396(r2)
   1c2a8:	0007883a 	mov	r3,zero
   1c2ac:	883fdf26 	beq	r17,zero,1c22c <__alt_mem_Flash_flash_data+0xf401c22c>
   1c2b0:	18d1883a 	add	r8,r3,r3
   1c2b4:	4211883a 	add	r8,r8,r8
   1c2b8:	1211883a 	add	r8,r2,r8
   1c2bc:	41802215 	stw	r6,136(r8)
   1c2c0:	01000044 	movi	r4,1
   1c2c4:	11806217 	ldw	r6,392(r2)
   1c2c8:	20c8983a 	sll	r4,r4,r3
   1c2cc:	310cb03a 	or	r6,r6,r4
   1c2d0:	11806215 	stw	r6,392(r2)
   1c2d4:	41c04215 	stw	r7,264(r8)
   1c2d8:	01800084 	movi	r6,2
   1c2dc:	89bfd31e 	bne	r17,r6,1c22c <__alt_mem_Flash_flash_data+0xf401c22c>
   1c2e0:	11806317 	ldw	r6,396(r2)
   1c2e4:	3108b03a 	or	r4,r6,r4
   1c2e8:	11006315 	stw	r4,396(r2)
   1c2ec:	003fcf06 	br	1c22c <__alt_mem_Flash_flash_data+0xf401c22c>
   1c2f0:	80805304 	addi	r2,r16,332
   1c2f4:	80805215 	stw	r2,328(r16)
   1c2f8:	003fc706 	br	1c218 <__alt_mem_Flash_flash_data+0xf401c218>
   1c2fc:	00bfffc4 	movi	r2,-1
   1c300:	003fd106 	br	1c248 <__alt_mem_Flash_flash_data+0xf401c248>

0001c304 <__call_exitprocs>:
   1c304:	008000b4 	movhi	r2,2
   1c308:	10ba9a04 	addi	r2,r2,-5528
   1c30c:	10800017 	ldw	r2,0(r2)
   1c310:	defff404 	addi	sp,sp,-48
   1c314:	dd800815 	stw	r22,32(sp)
   1c318:	d8800015 	stw	r2,0(sp)
   1c31c:	10805204 	addi	r2,r2,328
   1c320:	dd000615 	stw	r20,24(sp)
   1c324:	dc800415 	stw	r18,16(sp)
   1c328:	dfc00b15 	stw	ra,44(sp)
   1c32c:	df000a15 	stw	fp,40(sp)
   1c330:	ddc00915 	stw	r23,36(sp)
   1c334:	dd400715 	stw	r21,28(sp)
   1c338:	dcc00515 	stw	r19,20(sp)
   1c33c:	dc400315 	stw	r17,12(sp)
   1c340:	dc000215 	stw	r16,8(sp)
   1c344:	2025883a 	mov	r18,r4
   1c348:	2829883a 	mov	r20,r5
   1c34c:	d8800115 	stw	r2,4(sp)
   1c350:	05bfffc4 	movi	r22,-1
   1c354:	d8800017 	ldw	r2,0(sp)
   1c358:	14c05217 	ldw	r19,328(r2)
   1c35c:	98001d26 	beq	r19,zero,1c3d4 <__call_exitprocs+0xd0>
   1c360:	dd400117 	ldw	r21,4(sp)
   1c364:	98800117 	ldw	r2,4(r19)
   1c368:	173fffc4 	addi	fp,r2,-1
   1c36c:	e0000d16 	blt	fp,zero,1c3a4 <__call_exitprocs+0xa0>
   1c370:	14000044 	addi	r16,r2,1
   1c374:	8421883a 	add	r16,r16,r16
   1c378:	8421883a 	add	r16,r16,r16
   1c37c:	84402004 	addi	r17,r16,128
   1c380:	9c63883a 	add	r17,r19,r17
   1c384:	9c21883a 	add	r16,r19,r16
   1c388:	a0001e26 	beq	r20,zero,1c404 <__call_exitprocs+0x100>
   1c38c:	80804017 	ldw	r2,256(r16)
   1c390:	15001c26 	beq	r2,r20,1c404 <__call_exitprocs+0x100>
   1c394:	e73fffc4 	addi	fp,fp,-1
   1c398:	843fff04 	addi	r16,r16,-4
   1c39c:	8c7fff04 	addi	r17,r17,-4
   1c3a0:	e5bff91e 	bne	fp,r22,1c388 <__alt_mem_Flash_flash_data+0xf401c388>
   1c3a4:	00800034 	movhi	r2,0
   1c3a8:	10800004 	addi	r2,r2,0
   1c3ac:	10000926 	beq	r2,zero,1c3d4 <__call_exitprocs+0xd0>
   1c3b0:	98800117 	ldw	r2,4(r19)
   1c3b4:	1000311e 	bne	r2,zero,1c47c <__call_exitprocs+0x178>
   1c3b8:	98800017 	ldw	r2,0(r19)
   1c3bc:	10003426 	beq	r2,zero,1c490 <__call_exitprocs+0x18c>
   1c3c0:	9809883a 	mov	r4,r19
   1c3c4:	a8800015 	stw	r2,0(r21)
   1c3c8:	00000000 	call	0 <__alt_mem_SDRAM>
   1c3cc:	acc00017 	ldw	r19,0(r21)
   1c3d0:	983fe41e 	bne	r19,zero,1c364 <__alt_mem_Flash_flash_data+0xf401c364>
   1c3d4:	dfc00b17 	ldw	ra,44(sp)
   1c3d8:	df000a17 	ldw	fp,40(sp)
   1c3dc:	ddc00917 	ldw	r23,36(sp)
   1c3e0:	dd800817 	ldw	r22,32(sp)
   1c3e4:	dd400717 	ldw	r21,28(sp)
   1c3e8:	dd000617 	ldw	r20,24(sp)
   1c3ec:	dcc00517 	ldw	r19,20(sp)
   1c3f0:	dc800417 	ldw	r18,16(sp)
   1c3f4:	dc400317 	ldw	r17,12(sp)
   1c3f8:	dc000217 	ldw	r16,8(sp)
   1c3fc:	dec00c04 	addi	sp,sp,48
   1c400:	f800283a 	ret
   1c404:	98800117 	ldw	r2,4(r19)
   1c408:	80c00017 	ldw	r3,0(r16)
   1c40c:	10bfffc4 	addi	r2,r2,-1
   1c410:	17001526 	beq	r2,fp,1c468 <__call_exitprocs+0x164>
   1c414:	80000015 	stw	zero,0(r16)
   1c418:	183fde26 	beq	r3,zero,1c394 <__alt_mem_Flash_flash_data+0xf401c394>
   1c41c:	00800044 	movi	r2,1
   1c420:	1708983a 	sll	r4,r2,fp
   1c424:	98806217 	ldw	r2,392(r19)
   1c428:	9dc00117 	ldw	r23,4(r19)
   1c42c:	2084703a 	and	r2,r4,r2
   1c430:	1000061e 	bne	r2,zero,1c44c <__call_exitprocs+0x148>
   1c434:	183ee83a 	callr	r3
   1c438:	98800117 	ldw	r2,4(r19)
   1c43c:	15ffc51e 	bne	r2,r23,1c354 <__alt_mem_Flash_flash_data+0xf401c354>
   1c440:	a8800017 	ldw	r2,0(r21)
   1c444:	14ffd326 	beq	r2,r19,1c394 <__alt_mem_Flash_flash_data+0xf401c394>
   1c448:	003fc206 	br	1c354 <__alt_mem_Flash_flash_data+0xf401c354>
   1c44c:	98806317 	ldw	r2,396(r19)
   1c450:	2084703a 	and	r2,r4,r2
   1c454:	1000061e 	bne	r2,zero,1c470 <__call_exitprocs+0x16c>
   1c458:	89400017 	ldw	r5,0(r17)
   1c45c:	9009883a 	mov	r4,r18
   1c460:	183ee83a 	callr	r3
   1c464:	003ff406 	br	1c438 <__alt_mem_Flash_flash_data+0xf401c438>
   1c468:	9f000115 	stw	fp,4(r19)
   1c46c:	003fea06 	br	1c418 <__alt_mem_Flash_flash_data+0xf401c418>
   1c470:	89000017 	ldw	r4,0(r17)
   1c474:	183ee83a 	callr	r3
   1c478:	003fef06 	br	1c438 <__alt_mem_Flash_flash_data+0xf401c438>
   1c47c:	98800017 	ldw	r2,0(r19)
   1c480:	982b883a 	mov	r21,r19
   1c484:	1027883a 	mov	r19,r2
   1c488:	983fb61e 	bne	r19,zero,1c364 <__alt_mem_Flash_flash_data+0xf401c364>
   1c48c:	003fd106 	br	1c3d4 <__alt_mem_Flash_flash_data+0xf401c3d4>
   1c490:	0005883a 	mov	r2,zero
   1c494:	003ffa06 	br	1c480 <__alt_mem_Flash_flash_data+0xf401c480>

0001c498 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c498:	defffd04 	addi	sp,sp,-12
   1c49c:	df000215 	stw	fp,8(sp)
   1c4a0:	df000204 	addi	fp,sp,8
   1c4a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c4a8:	008000b4 	movhi	r2,2
   1c4ac:	1082ac44 	addi	r2,r2,2737
   1c4b0:	10000005 	stb	zero,0(r2)
   1c4b4:	e0bfff17 	ldw	r2,-4(fp)
   1c4b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1c4bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c4c0:	10000226 	beq	r2,zero,1c4cc <_exit+0x34>
    ALT_SIM_FAIL();
   1c4c4:	002af070 	cmpltui	zero,zero,43969
   1c4c8:	00000106 	br	1c4d0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c4cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c4d0:	003fff06 	br	1c4d0 <__alt_mem_Flash_flash_data+0xf401c4d0>
