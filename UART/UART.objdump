
UART.elf:     file format elf32-littlenios2
UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f870 memsz 0x0001f870 flags r-x
    LOAD off    0x00020890 vaddr 0x0001f890 paddr 0x00021ab0 align 2**12
         filesz 0x00002220 memsz 0x00002220 flags rw-
    LOAD off    0x00022cd0 vaddr 0x00023cd0 paddr 0x00023cd0 align 2**12
         filesz 0x00000000 memsz 0x0000d604 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ebb8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a94  0001edfc  0001edfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002220  0001f890  00021ab0  00020890  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d604  00023cd0  00023cd0  00022cd0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000312d4  000312d4  00022ab0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00022ab0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022ab0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001180  00000000  00000000  00022ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00033e97  00000000  00000000  00023c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bee6  00000000  00000000  00057aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001016e  00000000  00000000  000639d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003fc8  00000000  00000000  00073b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000057b4  00000000  00000000  00077b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b254  00000000  00000000  0007d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00098514  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a0  00000000  00000000  00098538  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0009ff19  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009ff1f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009ff24  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009ff25  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009ff26  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009ff2a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009ff2e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009ff32  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0009ff3b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009ff44  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0009ff4d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  0009ff58  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0018e939  00000000  00000000  0009ff6d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001edfc l    d  .rodata	00000000 .rodata
0001f890 l    d  .rwdata	00000000 .rwdata
00023cd0 l    d  .bss	00000000 .bss
000312d4 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f092 l     O .rodata	00000010 zeroes.4240
0001f0a2 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001f0b2 l     O .rodata	00000010 zeroes.4255
00006384 l     F .text	000000bc __sbprintf
0001f0c2 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006594 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008150 l     F .text	00000008 __fp_lock
00008158 l     F .text	00000008 __fp_unlock
0000816c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001f8a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001fce4 l     O .rwdata	00000020 lc_ctype_charset
0001fcc4 l     O .rwdata	00000020 lc_message_charset
0001fd04 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001f0f4 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f218 l     O .rodata	00000010 zeroes.4184
0001f228 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000c618 l     F .text	000000fc __sprint_r.part.0
0001f248 l     O .rodata	00000010 blanks.4199
0001f238 l     O .rodata	00000010 zeroes.4200
0000da20 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000ef24 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00011650 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011770 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001179c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001189c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011990 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011a74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00011c6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021a24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00011ec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00021a28 l     O .rwdata	00000004 lockid
00023d50 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00021a2c l     O .rwdata	00000004 lockid
00023d58 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000138fc l     F .text	00000044 OS_InitMisc
00013940 l     F .text	00000068 OS_InitRdyList
00013aa0 l     F .text	000000e0 OS_InitTCBList
00013820 l     F .text	000000dc OS_InitEventList
000139a8 l     F .text	0000007c OS_InitTaskIdle
00013a24 l     F .text	0000007c OS_InitTaskStat
00013d00 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00015b04 l     F .text	00000110 OS_FlagTaskRdy
0001585c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001ab34 l     F .text	00000038 alt_dev_reg
000202ec l     O .rwdata	0000106c JTAG_UART
00021358 l     O .rwdata	00000030 AV_Config
00021388 l     O .rwdata	00000030 Audio_Subsystem_Audio
000213b8 l     O .rwdata	0000002c Char_LCD_16x2
000213e4 l     O .rwdata	0000002c IrDA
00021410 l     O .rwdata	0000002c Expansion_JP5
0002143c l     O .rwdata	0000002c Green_LEDs
00021468 l     O .rwdata	0000002c HEX3_HEX0
00021494 l     O .rwdata	0000002c HEX7_HEX4
000214c0 l     O .rwdata	0000002c Pushbuttons
000214ec l     O .rwdata	0000002c Red_LEDs
00021518 l     O .rwdata	0000002c Slider_Switches
00021544 l     O .rwdata	00000038 PS2_Port
0002157c l     O .rwdata	00000038 PS2_Port_Dual
000215b4 l     O .rwdata	0000002c rs232_0
000215e0 l     O .rwdata	0000002c Serial_Port
0002160c l     O .rwdata	00000034 USB
00021640 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00021688 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000216dc l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001b228 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001b4d0 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001bca8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
00023db0 l     O .bss	00000004 state.1996
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001da60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001dccc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001dfb4 l     F .text	00000050 alt_get_errno
0001e004 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00023dc0 g     O .bss	00000004 alt_instruction_exception_handler
0000ab30 g     F .text	00000074 _mprec_log10
00021a7a g     O .rwdata	00000002 OSTaskNameSize
0000ac1c g     F .text	0000008c __any_on
0000df8c g     F .text	00000054 _isatty_r
00001b88 g     F .text	0000009c VGA_text_clear
0001f100 g     O .rodata	00000028 __mprec_tinytens
00011b98 g     F .text	000000d4 alt_main
00002358 g     F .text	00000090 strcpy
00002134 g     F .text	000000a8 _puts_r
000311d4 g     O .bss	00000100 alt_irq
0001c844 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000dfe0 g     F .text	0000005c _lseek_r
00023cd4 g     O .bss	00000004 x6
00016ef0 g     F .text	000000d0 OS_MemInit
00021ab0 g       *ABS*	00000000 __flash_rwdata_start
0001aad0 g     F .text	00000064 OSTimeSet
00023cd8 g     O .bss	00000001 rotorStand
0001be14 g     F .text	0000003c alt_up_character_lcd_send_cmd
000101b8 g     F .text	00000084 .hidden __eqdf2
00012578 g     F .text	00000610 OSEventPendMulti
000312d4 g       *ABS*	00000000 __alt_heap_start
0001e610 g     F .text	00000020 OSTaskCreateHook
00023e14 g     O .bss	00002000 task1_stk
000020f8 g     F .text	0000003c printf
00021a52 g     O .rwdata	00000002 OSMboxEn
00012bdc g     F .text	0000007c OSIntEnter
0000e1ec g     F .text	0000009c _wcrtomb_r
0000b3b0 g     F .text	0000005c __sseek
000084a0 g     F .text	00000010 __sinit
0001d1cc g     F .text	00000100 alt_up_char_buffer_string
0000e098 g     F .text	00000138 __swbuf_r
0001c664 g     F .text	00000034 read_CE_bit
00021a62 g     O .rwdata	00000002 OSQEn
00008f4c g     F .text	0000007c _setlocale_r
00008308 g     F .text	00000068 __sfmoreglue
0001224c g     F .text	000000d0 __malloc_unlock
0001e66c g     F .text	0000001c OSTaskStatHook
0001c9e8 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001cedc g     F .text	00000090 alt_up_rs232_read_fd
00023d60 g     O .bss	00000001 OSLockNesting
00021aa0 g     O .rwdata	00000002 OSDataSize
00023d61 g     O .bss	00000001 OSRunning
0001d100 g     F .text	000000cc alt_up_char_buffer_draw
00009bac g     F .text	0000015c memmove
0001e6a4 g     F .text	0000001c OSInitHookBegin
00021708 g     O .rwdata	00000198 key_table
00023cdc g     O .bss	00000004 byte1
00021a98 g     O .rwdata	00000002 OSTmrSize
00008488 g     F .text	00000018 _cleanup
00009d08 g     F .text	000000a8 _Balloc
00023d64 g     O .bss	00000004 OSIdleCtr
0001023c g     F .text	000000e0 .hidden __gtdf2
0001e3c4 g     F .text	00000020 altera_nios2_gen2_irq_init
0001e490 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001bda0 g     F .text	00000074 get_DDRAM_addr
00014038 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00001a30 g     F .text	000000b8 setX
00021a9e g     O .rwdata	00000002 OSTmrWheelTblSize
0001d328 g     F .text	00000070 get_multi_byte_make_code_index
00000020 g       *ABS*	00000000 __flash_exceptions_start
00021a3e g     O .rwdata	00000002 OSEventSize
00023d68 g     O .bss	00000001 OSPrioHighRdy
0000df34 g     F .text	00000058 _fstat_r
0001e630 g     F .text	00000020 OSTaskDelHook
00023d3c g     O .bss	00000004 errno
0000b32c g     F .text	00000008 __seofread
0001e470 g       .text	00000000 OSStartHighRdy
000193d4 g     F .text	000001ec OSTaskCreateExt
0000b5e0 g     F .text	00001038 ___svfiprintf_internal_r
000153a8 g     F .text	00000068 OSFlagPendGetFlagsRdy
00021a7e g     O .rwdata	00000002 OSTaskStatStkSize
00014498 g     F .text	00000308 OSFlagAccept
000175c4 g     F .text	000000b8 OSQFlush
0001d710 g     F .text	00000064 set_keyboard_rate
00016fc0 g     F .text	00000140 OSQAccept
00023d48 g     O .bss	00000004 alt_argv
000299d4 g       *ABS*	00000000 _gp
00023ce0 g     O .bss	00000004 ringinstelling
00019218 g     F .text	000001bc OSTaskCreate
00018cd8 g     F .text	00000540 OSTaskChangePrio
00023d5c g     O .bss	00000004 alt_heapsem
0001f890 g     O .rwdata	00000010 ringInstellingen
00023ce4 g     O .bss	00000004 PS2_data
0001430c g     F .text	0000018c OSDebugInit
000195c0 g     F .text	000003e0 OSTaskDel
0001d888 g     F .text	0000007c reset_keyboard
0002016c g     O .rwdata	00000180 alt_fd_list
0002dfb0 g     O .bss	00000370 OSFlagTbl
0001360c g     F .text	000000b4 OS_EventTaskRemove
0001dc0c g     F .text	00000090 alt_find_dev
00009a74 g     F .text	00000138 memcpy
00021a68 g     O .rwdata	00000002 OSRdyTblSize
0001bfb0 g     F .text	00000050 alt_up_character_lcd_write_fd
0001d2cc g     F .text	0000005c alt_up_char_buffer_clear
00008160 g     F .text	0000000c _cleanup_r
00011478 g     F .text	000000d0 .hidden __floatsidf
0001dd8c g     F .text	00000078 alt_io_redirect
0001031c g     F .text	000000e0 .hidden __ltdf2
0001edfc g       *ABS*	00000000 __DTOR_END__
0001c530 g     F .text	00000090 alt_up_irda_write_fd
0001ce68 g     F .text	00000074 alt_up_rs232_read_data
000021dc g     F .text	00000014 puts
0001e9b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001231c g     F .text	00000120 OSEventNameGet
00021a4c g     O .rwdata	00000002 OSFlagMax
0000b210 g     F .text	00000074 __fpclassifyd
0000aa8c g     F .text	000000a4 __ratio
00012c58 g     F .text	000000f4 OSIntExit
0000d9fc g     F .text	00000024 __vfiprintf_internal
00021a86 g     O .rwdata	00000002 OSTCBSize
00023d69 g     O .bss	00000001 OSPrioCur
0001c32c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001b734 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000020cc g     F .text	0000002c _printf_r
0000f040 g     F .text	00000008 .hidden __udivsi3
000118ec g     F .text	000000a4 isatty
00021a6c g     O .rwdata	00000002 OSStkWidth
0001f150 g     O .rodata	000000c8 __mprec_tens
00021a60 g     O .rwdata	00000002 OSPtrSize
00008fc8 g     F .text	0000000c __locale_charset
00021a40 g     O .rwdata	00000002 OSEventTblSize
0001c2d0 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001e3e4 g       .text	00000000 OSCtxSw
0001e928 g     F .text	0000008c alt_icache_flush
00023d38 g     O .bss	00000004 __malloc_top_pad
00023d6c g     O .bss	00000004 OSTCBList
00023d40 g     O .bss	00000004 alt_fd_list_lock
000219fc g     O .rwdata	00000004 __mb_cur_max
00008ff8 g     F .text	0000000c _localeconv_r
0000a114 g     F .text	0000003c __i2b
00008904 g     F .text	000004c0 __sfvwrite_r
0002e320 g     O .bss	00000c30 OSMemTbl
00023d70 g     O .bss	00000001 OSTickStepState
0000b284 g     F .text	00000054 _sbrk_r
00001704 g     F .text	0000032c select
00021a64 g     O .rwdata	00000002 OSQMax
0002ef50 g     O .bss	00000800 OSTaskStatStk
00016b20 g     F .text	000000f8 OSMemNameGet
00021a44 g     O .rwdata	00000002 OSFlagEn
0000e03c g     F .text	0000005c _read_r
00021a8a g     O .rwdata	00000002 OSTimeTickHookEn
00023dc4 g     O .bss	00000028 command
00015c14 g     F .text	000000a0 OS_FlagUnlink
00017ae4 g     F .text	00000168 OSQPost
00021a1c g     O .rwdata	00000004 alt_max_fd
0001cde4 g     F .text	00000044 alt_up_rs232_check_parity
00013bd0 g     F .text	00000064 OS_MemCopy
00013c34 g     F .text	000000cc OS_Sched
0000dc50 g     F .text	000000f0 _fclose_r
00023ce8 g     O .bss	00000004 x5
00016a30 g     F .text	000000f0 OSMemGet
0001672c g     F .text	00000110 OSMboxQuery
00019ca0 g     F .text	000001c0 OSTaskNameSet
0001c698 g     F .text	00000030 read_num_bytes_available
00008120 g     F .text	00000030 fflush
000218a0 g     O .rwdata	00000066 ascii_codes
00023d34 g     O .bss	00000004 __malloc_max_sbrked_mem
00023d74 g     O .bss	00000004 OSCtxSwCtr
0001e688 g     F .text	0000001c OSTimeTickHook
0001de04 g     F .text	000001b0 alt_irq_register
00021a4e g     O .rwdata	00000002 OSFlagNameSize
0001c600 g     F .text	00000034 read_RI_bit
000136c0 g     F .text	000000fc OS_EventTaskRemoveMulti
0000f050 g     F .text	0000089c .hidden __adddf3
000219ec g     O .rwdata	00000004 rotorStanden
000134c0 g     F .text	0000014c OS_EventTaskWaitMulti
0000a834 g     F .text	0000011c __b2d
00021a66 g     O .rwdata	00000002 OSQSize
0000e994 g     F .text	00000590 .hidden __umoddi3
00011ac4 g     F .text	000000d4 lseek
000185e8 g     F .text	00000268 OSSemPend
000007ec g     F .text	00000258 rotateTask
000219f4 g     O .rwdata	00000004 _global_impure_ptr
0000aca8 g     F .text	00000568 _realloc_r
00021a50 g     O .rwdata	00000002 OSLowestPrio
000312d4 g       *ABS*	00000000 __bss_end
0001e6f8 g     F .text	00000020 OSTCBInitHook
00023cec g     O .bss	00000001 letter
00021a96 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001e2c0 g     F .text	00000104 alt_tick
000164c0 g     F .text	00000110 OSMboxPost
0000e3d4 g     F .text	000005c0 .hidden __udivdi3
0000dd54 g     F .text	00000184 _fputwc_r
00021a38 g     O .rwdata	00000002 OSEventEn
0001f128 g     O .rodata	00000028 __mprec_bigtens
00009ef8 g     F .text	00000104 __s2b
00021a92 g     O .rwdata	00000002 OSTmrCfgNameSize
00011548 g     F .text	000000a4 .hidden __floatunsidf
0000a5dc g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001c6fc g     F .text	0000002c read_data_byte
000084c0 g     F .text	00000018 __fp_lock_all
0000035c g     F .text	0000007c sendCommand
00015a20 g     F .text	000000e4 OS_FlagInit
0001e228 g     F .text	00000098 alt_alarm_stop
00025e14 g     O .bss	00002000 rotateTask_stk
0001c634 g     F .text	00000030 read_RE_bit
00021a74 g     O .rwdata	00000002 OSTaskIdleStkSize
00023db4 g     O .bss	00000004 alt_irq_active
000181d0 g     F .text	000000b0 OSSemAccept
00000fcc g     F .text	00000088 VGA_text
00016d30 g     F .text	000000d8 OSMemPut
0001683c g     F .text	000001f4 OSMemCreate
00023d78 g     O .bss	00000004 OSIdleCtrMax
0001c36c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00020144 g     O .rwdata	00000028 alt_dev_null
00021a88 g     O .rwdata	00000002 OSTicksPerSec
00023cf0 g     O .bss	00000004 x2
000219d8 g     O .rwdata	00000004 character_buffer
0001c244 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001e3e4 g       .text	00000000 OSIntCtxSw
0001c8a0 g     F .text	00000074 alt_up_ps2_write_data_byte
0001da44 g     F .text	0000001c alt_dcache_flush_all
00009ffc g     F .text	00000068 __hi0bits
000113f0 g     F .text	00000088 .hidden __fixdfsi
00023d7c g     O .bss	00000004 OSTCBFreeList
00021ab0 g       *ABS*	00000000 __ram_rwdata_end
00018850 g     F .text	0000016c OSSemPendAbort
0002196c g     O .rwdata	00000066 multi_byte_make_code
00021a14 g     O .rwdata	00000008 alt_dev_list
00011f18 g     F .text	000000f8 write
00021a8c g     O .rwdata	00000002 OSVersionNbr
0001f890 g       *ABS*	00000000 __ram_rodata_end
000117ec g     F .text	000000b0 fstat
0001cf6c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0001031c g     F .text	000000e0 .hidden __ledf2
00000570 g     F .text	0000027c cryptTask
00027e14 g     O .bss	0000008c letterLijst
00021a34 g     O .rwdata	00000004 OSEndiannessTest
0000a34c g     F .text	00000140 __pow5mult
0000c72c g     F .text	000012d0 ___vfiprintf_internal_r
00023d2c g     O .bss	00000004 __nlocale_changed
0000f048 g     F .text	00000008 .hidden __umodsi3
00000310 g     F .text	0000004c putChar
00021a46 g     O .rwdata	00000002 OSFlagGrpSize
000312d4 g       *ABS*	00000000 end
0001cbdc g     F .text	00000098 alt_up_ps2_write_fd
0001c3a8 g     F .text	00000044 alt_up_irda_check_parity
0001d040 g     F .text	00000080 alt_up_char_buffer_init
0001b0e8 g     F .text	00000140 altera_avalon_jtag_uart_init
00013e94 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001edfc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001bd20 g     F .text	00000080 alt_avalon_timer_sc_init
000115ec g     F .text	00000064 .hidden __clzsi2
0001b9e8 g     F .text	000002c0 altera_avalon_jtag_uart_write
000084b0 g     F .text	00000004 __sfp_lock_acquire
0000998c g     F .text	000000e8 memchr
00013b80 g     F .text	00000050 OS_MemClr
0001bec4 g     F .text	00000078 alt_up_character_lcd_write
00004410 g     F .text	00001f50 ___vfprintf_internal_r
0001e4b4 g     F .text	0000015c OSTaskStkInit
00000a44 g     F .text	00000040 task1
000021f0 g     F .text	00000058 _sprintf_r
00008614 g     F .text	000002f0 _free_r
00008fd4 g     F .text	00000010 __locale_mb_cur_max
0001321c g     F .text	00000198 OS_EventTaskRdy
0001ec2c g     F .text	00000194 __call_exitprocs
00023d80 g     O .bss	00000001 OSCPUUsage
0001d774 g     F .text	00000114 translate_make_code
00023d28 g     O .bss	00000004 __mlocale_changed
00021a00 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00000a84 g     F .text	000000bc task2
00023db8 g     O .bss	00000004 _alt_tick_rate
0001767c g     F .text	000002fc OSQPend
0001a5cc g     F .text	00000148 OSTimeDly
0000a48c g     F .text	00000150 __lshift
000003d8 g     F .text	00000140 getCommand
00023dbc g     O .bss	00000004 _alt_nticks
00011cbc g     F .text	000000fc read
0001aba0 g     F .text	000003e4 alt_sys_init
0001c0fc g     F .text	00000088 alt_up_character_lcd_shift_display
0000b414 g     F .text	000001cc __ssprint_r
0001eb18 g     F .text	00000114 __register_exitproc
00023d81 g     O .bss	00000001 OSTaskCtr
0001cafc g     F .text	00000054 alt_up_ps2_clear_fifo
0001cda8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000f24 g     F .text	000000a8 VGA_box
0001a714 g     F .text	00000168 OSTimeDlyHMSM
0000a150 g     F .text	000001fc __multiply
0001c184 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001b5e0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001f890 g       *ABS*	00000000 __ram_rwdata_start
0001edfc g       *ABS*	00000000 __ram_rodata_start
00023dec g     O .bss	00000028 __malloc_current_mallinfo
00021a3a g     O .rwdata	00000002 OSEventMax
0000a950 g     F .text	0000013c __d2b
000189bc g     F .text	00000110 OSSemPost
00012dd4 g     F .text	000000d8 OSSchedUnlock
0001af84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001e82c g     F .text	000000fc alt_get_fd
00023d84 g     O .bss	00000004 OSMemFreeList
00012f18 g     F .text	000000ac OSStatInit
00015798 g     F .text	000000c4 OSFlagQuery
00021a70 g     O .rwdata	00000002 OSTaskCreateExtEn
0000db38 g     F .text	00000054 _close_r
0001d658 g     F .text	000000b8 decode_scancode
0001ea9c g     F .text	0000007c memcmp
00013200 g     F .text	0000001c OS_Dummy
0001b044 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000312d4 g       *ABS*	00000000 __alt_stack_base
0001b094 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001c278 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00006440 g     F .text	00000154 __swsetup_r
0002f750 g     O .bss	000001e0 OSQTbl
0000f8ec g     F .text	000008cc .hidden __divdf3
00008370 g     F .text	00000118 __sfp
0000aba4 g     F .text	00000078 __copybits
0001fd3c g     O .rwdata	00000408 __malloc_av_
000084bc g     F .text	00000004 __sinit_lock_release
00023d88 g     O .bss	00000004 OSTCBHighRdy
000103fc g     F .text	00000724 .hidden __muldf3
0000b2d8 g     F .text	00000054 __sread
00023d8c g     O .bss	00000004 OSQFreeList
0001cd0c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001e718 g     F .text	00000114 alt_find_file
0001dab0 g     F .text	000000a4 alt_dev_llist_insert
0001212c g     F .text	00000120 __malloc_lock
00011e18 g     F .text	000000b0 sbrk
00002480 g     F .text	00001f90 ___svfprintf_internal_r
0001243c g     F .text	0000013c OSEventNameSet
000080c4 g     F .text	0000005c _fflush_r
0000db8c g     F .text	000000c4 _calloc_r
00023d90 g     O .bss	00000001 OSRdyGrp
00001c24 g     F .text	00000074 PS2
00027ea0 g     O .bss	000000a0 messages
00023cf4 g     O .bss	00000004 x4
00023cd0 g       *ABS*	00000000 __bss_start
00001fa8 g     F .text	00000124 memset
00000c1c g     F .text	00000308 main
0001d398 g     F .text	00000070 get_single_byte_make_code_index
00023d4c g     O .bss	00000004 alt_envp
00023d30 g     O .bss	00000004 __malloc_max_total_mem
0001d0c0 g     F .text	00000040 alt_up_char_buffer_open_dev
0001afe4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e1d0 g     F .text	0000001c __swbuf
0001f374 g     O .rodata	00000100 OSUnMapTbl
00021a6a g     O .rwdata	00000002 OSSemEn
0001c074 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00015410 g     F .text	00000388 OSFlagPost
0000b40c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000dd40 g     F .text	00000014 fclose
000133b4 g     F .text	0000010c OS_EventTaskWait
00027f40 g     O .bss	00002000 task2_stk
0001ca8c g     F .text	00000070 alt_up_ps2_read_data_byte
00023cf8 g     O .bss	00000004 messageBox
00013f70 g     F .text	000000c8 OS_TaskStatStkChk
000199a0 g     F .text	00000158 OSTaskDelReq
00006794 g     F .text	00001728 _dtoa_r
000091e4 g     F .text	000007a8 _malloc_r
0000e348 g     F .text	00000030 __ascii_wctomb
000219f0 g     O .rwdata	00000004 y
00021a20 g     O .rwdata	00000004 alt_errno
00012eac g     F .text	0000006c OSStart
00029f40 g     O .bss	00002000 task3_stk
00023cfc g     O .bss	00000002 strTemp
000120d0 g     F .text	0000005c __env_unlock
00008dc4 g     F .text	000000c4 _fwalk
00019e60 g     F .text	000001f8 OSTaskResume
00016e08 g     F .text	000000e8 OSMemQuery
00021a7c g     O .rwdata	00000002 OSTaskStatEn
0001c3ec g     F .text	00000040 alt_up_irda_write_data
00021a56 g     O .rwdata	00000002 OSMemMax
00017c4c g     F .text	00000170 OSQPostFront
0001cc74 g     F .text	00000040 alt_up_ps2_open_dev
0000ef90 g     F .text	00000054 .hidden __divsi3
00001c98 g     F .text	000001d0 getKey
00023cfe g     O .bss	00000002 d
00023d91 g     O .bss	00000003 OSRdyTbl
00021a30 g     O .rwdata	00000002 OSDebugEn
0001be84 g     F .text	00000040 alt_up_character_lcd_open_dev
000084f0 g     F .text	00000124 _malloc_trim_r
0001c7ec g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001edfc g       *ABS*	00000000 __CTOR_END__
00021a48 g     O .rwdata	00000002 OSFlagNodeSize
00021a90 g     O .rwdata	00000002 OSTmrCfgMax
0001be50 g     F .text	00000034 alt_up_character_lcd_init
000022b4 g     F .text	000000a4 strcmp
00017100 g     F .text	000001fc OSQCreate
00019af8 g     F .text	000001a8 OSTaskNameGet
0001edfc g       *ABS*	00000000 __flash_rodata_start
00017dbc g     F .text	0000020c OSQPostOpt
00012fc4 g     F .text	0000021c OSTimeTick
00021a78 g     O .rwdata	00000002 OSTaskMax
0001edfc g       *ABS*	00000000 __DTOR_LIST__
00018280 g     F .text	00000100 OSSemCreate
00021a9c g     O .rwdata	00000002 OSTmrWheelSize
00023d00 g     O .bss	00000004 sem_rotated
0001d000 g     F .text	00000040 alt_up_rs232_open_dev
00001e68 g     F .text	000000f0 printRinginstelling
000219e4 g     O .rwdata	00000004 count
000101b8 g     F .text	00000084 .hidden __nedf2
00021a72 g     O .rwdata	00000002 OSTaskDelEn
00018acc g     F .text	00000110 OSSemQuery
000172fc g     F .text	000002c8 OSQDel
00017978 g     F .text	0000016c OSQPendAbort
0001ab6c g     F .text	00000034 alt_irq_init
00011db8 g     F .text	00000060 alt_release_fd
00023d04 g     O .bss	00000004 ControlBlock
0001c6c8 g     F .text	00000034 read_data_valid
00002248 g     F .text	0000006c sprintf
0001c210 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001f258 g     O .rodata	00000100 .hidden __clz_tab
00023d24 g     O .bss	00000004 _PathLocale
000219d4 g     O .rwdata	00000004 PS2_ptr
000219dc g     O .rwdata	00000004 pixel_buffer
0001c984 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001ea50 g     F .text	00000014 atexit
000219e0 g     O .rwdata	00000004 rotorNummer
0000dadc g     F .text	0000005c _write_r
00012d4c g     F .text	00000088 OSSchedLock
00009004 g     F .text	0000001c setlocale
000147a0 g     F .text	00000128 OSFlagCreate
000219f8 g     O .rwdata	00000004 _impure_ptr
00023d44 g     O .bss	00000004 alt_argc
00007ebc g     F .text	00000208 __sflush_r
00023d08 g     O .bss	00000004 x3
0001dbb0 g     F .text	0000005c _do_dtors
00001b44 g     F .text	00000044 VGA_text_clear_all
00008ff0 g     F .text	00000008 __locale_cjk_lang
00021a42 g     O .rwdata	00000002 OSEventMultiEn
00023cd0 g     O .bss	00000004 RAVAIL
00023d0c g     O .bss	00000004 x1
0002bf40 g     O .bss	00000028 ascii
000148c8 g     F .text	00000270 OSFlagDel
00023d94 g     O .bss	00000004 OSEventFreeList
00023d10 g     O .bss	00000004 sem_enigma
00000020 g       .exceptions	00000000 alt_irq_entry
00016354 g     F .text	0000016c OSMboxPendAbort
0002bf68 g     O .bss	00002000 crypt_stk
0000a7d4 g     F .text	00000060 __ulp
00014db8 g     F .text	000005f0 OSFlagPend
00021a8e g     O .rwdata	00000002 OSTmrEn
000084d8 g     F .text	00000018 __fp_unlock_all
0002df68 g     O .bss	00000046 cijferLijst
00000518 g     F .text	00000058 getLetter
00021a0c g     O .rwdata	00000008 alt_fs_list
00013d70 g     F .text	00000074 OS_StrCopy
0001ccb4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001ce28 g     F .text	00000040 alt_up_rs232_write_data
00021a58 g     O .rwdata	00000002 OSMemNameSize
0001e6c0 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00021a84 g     O .rwdata	00000002 OSTCBPrioTblMax
00023d14 g     O .bss	00000002 arrowTemp
00009020 g     F .text	0000000c localeconv
00021a80 g     O .rwdata	00000002 OSTaskStatStkChkEn
00015d4c g     F .text	000000fc OSMboxCreate
00021a54 g     O .rwdata	00000002 OSMemEn
00021a5e g     O .rwdata	00000002 OSMutexEn
00021ab0 g       *ABS*	00000000 _edata
000312d4 g       *ABS*	00000000 _end
00023d98 g     O .bss	00000001 OSIntNesting
00001f58 g     F .text	00000050 printRotorStand
00000244 g       *ABS*	00000000 __ram_exceptions_end
00023d18 g     O .bss	00000004 sem_hardware
0001b648 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00001054 g     F .text	00000270 typen
0001a87c g     F .text	000001f0 OSTimeDlyResume
000219e8 g     O .rwdata	00000004 rij
00014c68 g     F .text	00000150 OSFlagNameSet
000160b0 g     F .text	000002a4 OSMboxPend
0001a058 g     F .text	000001c8 OSTaskStkChk
000012c4 g     F .text	00000440 changeRotor
00021a5a g     O .rwdata	00000002 OSMemSize
0000b334 g     F .text	0000007c __swrite
00021a04 g     O .rwdata	00000004 __malloc_trim_threshold
00008fe4 g     F .text	0000000c __locale_msgcharset
00023d9c g     O .bss	00000004 OSTCBCur
0001ea64 g     F .text	00000038 exit
0001c42c g     F .text	00000074 alt_up_irda_read_data
00021a5c g     O .rwdata	00000002 OSMemTblSize
00008e88 g     F .text	000000c4 _fwalk_reent
0001c728 g     F .text	000000c4 alt_up_ps2_init
0000a63c g     F .text	00000198 __mdiff
0000efe4 g     F .text	0000005c .hidden __modsi3
00015cb4 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000084b4 g     F .text	00000004 __sfp_lock_release
00012b88 g     F .text	00000054 OSInit
0001a434 g     F .text	0000012c OSTaskQuery
0001bf3c g     F .text	00000074 alt_up_character_lcd_string
00023d1c g     O .bss	00000002 e
00018124 g     F .text	000000ac OS_QInit
00013de4 g     F .text	00000054 OS_StrLen
0001c5c0 g     F .text	00000040 alt_up_irda_open_dev
00016c18 g     F .text	00000118 OSMemNameSet
00000280 g     F .text	00000090 getChar
00021a76 g     O .rwdata	00000002 OSTaskProfileEn
00023da0 g     O .bss	00000004 OSTime
0002f930 g     O .bss	00000800 OSTaskIdleStk
0001edc0 g     F .text	0000003c _exit
000165d0 g     F .text	0000015c OSMboxPostOpt
0001d904 g     F .text	00000140 alt_alarm_start
00014b38 g     F .text	00000130 OSFlagNameGet
0001aa6c g     F .text	00000064 OSTimeGet
0001d408 g     F .text	00000250 get_next_state
0000902c g     F .text	000001b8 __smakebuf_r
0001c914 g     F .text	00000070 alt_up_ps2_wait_for_ack
000023e8 g     F .text	00000098 strlen
0001e650 g     F .text	0000001c OSTaskSwHook
0001e0d0 g     F .text	00000158 open
00030130 g     O .bss	00000b40 OSEventTbl
0001023c g     F .text	000000e0 .hidden __gedf2
00030c70 g     O .bss	00000510 OSTCBTbl
00018bdc g     F .text	000000fc OSSemSet
00001ae8 g     F .text	0000005c clearScreen
00021a08 g     O .rwdata	00000004 __wctomb
0000c714 g     F .text	00000018 __sprint_r
0001dc9c g     F .text	00000030 alt_icache_flush_all
0001c000 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00021aa4 g     O .rwdata	00000004 alt_priority_mask
00018380 g     F .text	00000268 OSSemDel
00023da4 g     O .bss	00000004 OSFlagFreeList
00000b40 g     F .text	000000dc task3
00021a3c g     O .rwdata	00000002 OSEventNameSize
00015e48 g     F .text	00000268 OSMboxDel
00006360 g     F .text	00000024 __vfprintf_internal
00023da8 g     O .bss	00000001 OSStatRdy
00031180 g     O .bss	00000054 OSTCBPrioTbl
0000e378 g     F .text	0000005c _wctomb_r
00012010 g     F .text	000000c0 __env_lock
0001cb50 g     F .text	0000008c alt_up_ps2_read_fd
00021a82 g     O .rwdata	00000002 OSTaskSwHookEn
00010b20 g     F .text	000008d0 .hidden __subdf3
0001c4a0 g     F .text	00000090 alt_up_irda_read_fd
00021906 g     O .rwdata	00000066 single_byte_make_code
0000a064 g     F .text	000000b0 __lo0bits
00023d20 g     O .bss	00000004 sem_rotate
00021aa8 g     O .rwdata	00000008 alt_alarm_list
00021a4a g     O .rwdata	00000002 OSFlagWidth
0001db54 g     F .text	0000005c _do_ctors
0001cd68 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000e288 g     F .text	000000c0 wcrtomb
000116a0 g     F .text	000000d0 close
00023d54 g     O .bss	00000004 alt_envsem
00023dac g     O .bss	00000004 OSIdleCtrRun
000131e0 g     F .text	00000020 OSVersion
00021a94 g     O .rwdata	00000002 OSTmrCfgWheelSize
000119f4 g     F .text	00000080 alt_load
0001a560 g     F .text	0000006c OS_TaskStkClr
00021a6e g     O .rwdata	00000002 OSTaskCreateEn
000137bc g     F .text	00000064 OS_EventWaitListInit
0000ded8 g     F .text	0000005c fputwc
0001e6dc g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000084b8 g     F .text	00000004 __sinit_lock_acquire
00009dd8 g     F .text	00000120 __multadd
0001a220 g     F .text	00000214 OSTaskSuspend
00009db0 g     F .text	00000028 _Bfree
00013e38 g     F .text	0000005c OS_TaskIdle
00021a9a g     O .rwdata	00000002 OSTmrTblSize
00017fc8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0012bdc0 	call	12bdc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10847504 	addi	r2,r2,4564
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10847504 	addi	r2,r2,4564
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0012c580 	call	12c58 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a8fb17 	ldw	r2,-23572(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a8fb17 	ldw	r2,-23572(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a67514 	ori	gp,gp,39380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	108f3414 	ori	r2,r2,15568

    movhi r3, %hi(__bss_end)
     25c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     260:	18c4b514 	ori	r3,r3,4820

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00119f40 	call	119f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	0011b980 	call	11b98 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <getChar>:
int ringInstellingen[4] = { 1, 1, 1, 1 };
char rotorStanden[4] = { 'a', 'a', 'a', 'a' };
int y = 5;
int x1, x2, x3, x4, x5, x6;

char getChar(volatile int *UART_ID) {
     280:	defffc04 	addi	sp,sp,-16
     284:	df000315 	stw	fp,12(sp)
     288:	df000304 	addi	fp,sp,12
     28c:	e13fff15 	stw	r4,-4(fp)
	int data;
	data = *(UART_ID); // read the RS232_UART data register
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	10800017 	ldw	r2,0(r2)
     298:	e0bffd15 	stw	r2,-12(fp)
	if (data & 0x00008000) { // check RVALID to see if there is new data
     29c:	e0bffd17 	ldw	r2,-12(fp)
     2a0:	10a0000c 	andi	r2,r2,32768
     2a4:	10001526 	beq	r2,zero,2fc <getChar+0x7c>
		char character = data & 0xFF;
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	e0bffe05 	stb	r2,-8(fp)
		if (((character >= 'a') && (character <= 'z')) || (character == '/')
     2b0:	e0bffe07 	ldb	r2,-8(fp)
     2b4:	10801850 	cmplti	r2,r2,97
     2b8:	1000031e 	bne	r2,zero,2c8 <getChar+0x48>
     2bc:	e0bffe07 	ldb	r2,-8(fp)
     2c0:	10801ed0 	cmplti	r2,r2,123
     2c4:	1000091e 	bne	r2,zero,2ec <getChar+0x6c>
     2c8:	e0bffe07 	ldb	r2,-8(fp)
     2cc:	10800be0 	cmpeqi	r2,r2,47
     2d0:	1000061e 	bne	r2,zero,2ec <getChar+0x6c>
				|| (character == '0') || (character == '1')) {
     2d4:	e0bffe07 	ldb	r2,-8(fp)
     2d8:	10800c20 	cmpeqi	r2,r2,48
     2dc:	1000031e 	bne	r2,zero,2ec <getChar+0x6c>
     2e0:	e0bffe07 	ldb	r2,-8(fp)
     2e4:	10800c58 	cmpnei	r2,r2,49
     2e8:	1000021e 	bne	r2,zero,2f4 <getChar+0x74>
			return character;
     2ec:	e0bffe03 	ldbu	r2,-8(fp)
     2f0:	00000306 	br	300 <getChar+0x80>
		}
	} else {
		return '\0';
	}
	return '\0';
     2f4:	0005883a 	mov	r2,zero
     2f8:	00000106 	br	300 <getChar+0x80>
		if (((character >= 'a') && (character <= 'z')) || (character == '/')
				|| (character == '0') || (character == '1')) {
			return character;
		}
	} else {
		return '\0';
     2fc:	0005883a 	mov	r2,zero
	}
	return '\0';
}
     300:	e037883a 	mov	sp,fp
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00104 	addi	sp,sp,4
     30c:	f800283a 	ret

00000310 <putChar>:

void putChar(volatile int *UART_ID, char c) {
     310:	defffc04 	addi	sp,sp,-16
     314:	df000315 	stw	fp,12(sp)
     318:	df000304 	addi	fp,sp,12
     31c:	e13ffe15 	stw	r4,-8(fp)
     320:	2805883a 	mov	r2,r5
     324:	e0bfff05 	stb	r2,-4(fp)
	int control;
	control = *(UART_ID + 4); // read the RS232_UART control register
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	10800417 	ldw	r2,16(r2)
     330:	e0bffd15 	stw	r2,-12(fp)
	if (control & 0x00FF0000) { // if space, write character, else ignore
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	10803fec 	andhi	r2,r2,255
     33c:	10000326 	beq	r2,zero,34c <putChar+0x3c>
		*(UART_ID) = c;
     340:	e0ffff07 	ldb	r3,-4(fp)
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	10c00015 	stw	r3,0(r2)
	}
}
     34c:	e037883a 	mov	sp,fp
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00104 	addi	sp,sp,4
     358:	f800283a 	ret

0000035c <sendCommand>:

void sendCommand(char string[]) {
     35c:	defffb04 	addi	sp,sp,-20
     360:	dfc00415 	stw	ra,16(sp)
     364:	df000315 	stw	fp,12(sp)
     368:	dc000215 	stw	r16,8(sp)
     36c:	df000304 	addi	fp,sp,12
     370:	e13ffe15 	stw	r4,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++) {
     374:	e03ffd15 	stw	zero,-12(fp)
     378:	00000d06 	br	3b0 <sendCommand+0x54>
		putChar(UART_0, string[i]);
     37c:	e0bffd17 	ldw	r2,-12(fp)
     380:	e0fffe17 	ldw	r3,-8(fp)
     384:	1885883a 	add	r2,r3,r2
     388:	10800003 	ldbu	r2,0(r2)
     38c:	10803fcc 	andi	r2,r2,255
     390:	1080201c 	xori	r2,r2,128
     394:	10bfe004 	addi	r2,r2,-128
     398:	01020834 	movhi	r4,2080
     39c:	100b883a 	mov	r5,r2
     3a0:	00003100 	call	310 <putChar>
	}
}

void sendCommand(char string[]) {
	int i;
	for (i = 0; i < strlen(string); i++) {
     3a4:	e0bffd17 	ldw	r2,-12(fp)
     3a8:	10800044 	addi	r2,r2,1
     3ac:	e0bffd15 	stw	r2,-12(fp)
     3b0:	e43ffd17 	ldw	r16,-12(fp)
     3b4:	e13ffe17 	ldw	r4,-8(fp)
     3b8:	00023e80 	call	23e8 <strlen>
     3bc:	80bfef36 	bltu	r16,r2,37c <__alt_mem_Flash_flash_data+0xf400037c>
		putChar(UART_0, string[i]);
	}
}
     3c0:	e6ffff04 	addi	sp,fp,-4
     3c4:	dfc00217 	ldw	ra,8(sp)
     3c8:	df000117 	ldw	fp,4(sp)
     3cc:	dc000017 	ldw	r16,0(sp)
     3d0:	dec00304 	addi	sp,sp,12
     3d4:	f800283a 	ret

000003d8 <getCommand>:

void getCommand() {
     3d8:	defffd04 	addi	sp,sp,-12
     3dc:	dfc00215 	stw	ra,8(sp)
     3e0:	df000115 	stw	fp,4(sp)
     3e4:	df000104 	addi	fp,sp,4
	memset(command, 0, strlen(command));
     3e8:	010000b4 	movhi	r4,2
     3ec:	210f7104 	addi	r4,r4,15812
     3f0:	00023e80 	call	23e8 <strlen>
     3f4:	010000b4 	movhi	r4,2
     3f8:	210f7104 	addi	r4,r4,15812
     3fc:	000b883a 	mov	r5,zero
     400:	100d883a 	mov	r6,r2
     404:	0001fa80 	call	1fa8 <memset>
	command[0] = '\0';
     408:	008000b4 	movhi	r2,2
     40c:	108f7104 	addi	r2,r2,15812
     410:	10000005 	stb	zero,0(r2)
	INT8U finished = 0;
     414:	e03fff05 	stb	zero,-4(fp)
	INT8U characterCount = 0;
     418:	e03fff45 	stb	zero,-3(fp)
	char currentChar = '\0';
     41c:	e03fff85 	stb	zero,-2(fp)
	while (!finished) {
     420:	00002306 	br	4b0 <getCommand+0xd8>
		currentChar = getChar(UART_0);
     424:	01020834 	movhi	r4,2080
     428:	00002800 	call	280 <getChar>
     42c:	e0bfff85 	stb	r2,-2(fp)
		if (currentChar != '\0') {
     430:	e0bfff87 	ldb	r2,-2(fp)
     434:	10001d26 	beq	r2,zero,4ac <getCommand+0xd4>
			if ((currentChar >= 'a') || (currentChar == '/')
     438:	e0bfff87 	ldb	r2,-2(fp)
     43c:	10801848 	cmpgei	r2,r2,97
     440:	1000091e 	bne	r2,zero,468 <getCommand+0x90>
     444:	e0bfff87 	ldb	r2,-2(fp)
     448:	10800be0 	cmpeqi	r2,r2,47
     44c:	1000061e 	bne	r2,zero,468 <getCommand+0x90>
					|| (currentChar == '1') || (currentChar == '0')) {
     450:	e0bfff87 	ldb	r2,-2(fp)
     454:	10800c60 	cmpeqi	r2,r2,49
     458:	1000031e 	bne	r2,zero,468 <getCommand+0x90>
     45c:	e0bfff87 	ldb	r2,-2(fp)
     460:	10800c18 	cmpnei	r2,r2,48
     464:	1000111e 	bne	r2,zero,4ac <getCommand+0xd4>
				if (currentChar == '/') {
     468:	e0bfff87 	ldb	r2,-2(fp)
     46c:	10800bd8 	cmpnei	r2,r2,47
     470:	1000051e 	bne	r2,zero,488 <getCommand+0xb0>
					if (characterCount > 0) {
     474:	e0bfff43 	ldbu	r2,-3(fp)
     478:	10000c26 	beq	r2,zero,4ac <getCommand+0xd4>
						finished = 1;
     47c:	00800044 	movi	r2,1
     480:	e0bfff05 	stb	r2,-4(fp)
     484:	00000906 	br	4ac <getCommand+0xd4>
					}
				} else {
					command[characterCount] = currentChar;
     488:	e0ffff43 	ldbu	r3,-3(fp)
     48c:	008000b4 	movhi	r2,2
     490:	108f7104 	addi	r2,r2,15812
     494:	10c5883a 	add	r2,r2,r3
     498:	e0ffff83 	ldbu	r3,-2(fp)
     49c:	10c00005 	stb	r3,0(r2)
					characterCount++;
     4a0:	e0bfff43 	ldbu	r2,-3(fp)
     4a4:	10800044 	addi	r2,r2,1
     4a8:	e0bfff45 	stb	r2,-3(fp)
				}
			}
		}
		currentChar = '\0';
     4ac:	e03fff85 	stb	zero,-2(fp)
	memset(command, 0, strlen(command));
	command[0] = '\0';
	INT8U finished = 0;
	INT8U characterCount = 0;
	char currentChar = '\0';
	while (!finished) {
     4b0:	e0bfff03 	ldbu	r2,-4(fp)
     4b4:	103fdb26 	beq	r2,zero,424 <__alt_mem_Flash_flash_data+0xf4000424>
				}
			}
		}
		currentChar = '\0';
	}
	command[characterCount] = '\0';
     4b8:	e0ffff43 	ldbu	r3,-3(fp)
     4bc:	008000b4 	movhi	r2,2
     4c0:	108f7104 	addi	r2,r2,15812
     4c4:	10c5883a 	add	r2,r2,r3
     4c8:	10000005 	stb	zero,0(r2)
	command[0] = command[strlen(command) - 1];
     4cc:	010000b4 	movhi	r4,2
     4d0:	210f7104 	addi	r4,r4,15812
     4d4:	00023e80 	call	23e8 <strlen>
     4d8:	10ffffc4 	addi	r3,r2,-1
     4dc:	008000b4 	movhi	r2,2
     4e0:	108f7104 	addi	r2,r2,15812
     4e4:	10c5883a 	add	r2,r2,r3
     4e8:	10c00003 	ldbu	r3,0(r2)
     4ec:	008000b4 	movhi	r2,2
     4f0:	108f7104 	addi	r2,r2,15812
     4f4:	10c00005 	stb	r3,0(r2)
	command[1] = '\0';
     4f8:	008000b4 	movhi	r2,2
     4fc:	108f7104 	addi	r2,r2,15812
     500:	10000045 	stb	zero,1(r2)
}
     504:	e037883a 	mov	sp,fp
     508:	dfc00117 	ldw	ra,4(sp)
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00204 	addi	sp,sp,8
     514:	f800283a 	ret

00000518 <getLetter>:

void getLetter(char string2[], char character) {
     518:	defff704 	addi	sp,sp,-36
     51c:	dfc00815 	stw	ra,32(sp)
     520:	df000715 	stw	fp,28(sp)
     524:	df000704 	addi	fp,sp,28
     528:	e13ffe15 	stw	r4,-8(fp)
     52c:	2805883a 	mov	r2,r5
     530:	e0bfff05 	stb	r2,-4(fp)
	char string[20];
	sprintf(string, "%s%c/", string2, character);
     534:	e0bfff07 	ldb	r2,-4(fp)
     538:	e13ff904 	addi	r4,fp,-28
     53c:	014000b4 	movhi	r5,2
     540:	297b7f04 	addi	r5,r5,-4612
     544:	e1bffe17 	ldw	r6,-8(fp)
     548:	100f883a 	mov	r7,r2
     54c:	00022480 	call	2248 <sprintf>
	sendCommand(string);
     550:	e13ff904 	addi	r4,fp,-28
     554:	000035c0 	call	35c <sendCommand>
	getCommand();
     558:	00003d80 	call	3d8 <getCommand>
}
     55c:	e037883a 	mov	sp,fp
     560:	dfc00117 	ldw	ra,4(sp)
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret

00000570 <cryptTask>:

/* Prints "Hello World" and sleeps for three seconds */
void cryptTask(void* pdata) {
     570:	defff204 	addi	sp,sp,-56
     574:	dfc00d15 	stw	ra,52(sp)
     578:	df000c15 	stw	fp,48(sp)
     57c:	df000c04 	addi	fp,sp,48
     580:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while (1) {
		char input[20];
		OSTimeDlyHMSM(0, 0, 0, 50);
     584:	0009883a 	mov	r4,zero
     588:	000b883a 	mov	r5,zero
     58c:	000d883a 	mov	r6,zero
     590:	01c00c84 	movi	r7,50
     594:	001a7140 	call	1a714 <OSTimeDlyHMSM>
		sprintf(input, "%s", OSMboxPend(messageBox, 0, &err));
     598:	d0a8c917 	ldw	r2,-23772(gp)
     59c:	1009883a 	mov	r4,r2
     5a0:	000b883a 	mov	r5,zero
     5a4:	e1bff404 	addi	r6,fp,-48
     5a8:	00160b00 	call	160b0 <OSMboxPend>
     5ac:	1007883a 	mov	r3,r2
     5b0:	e0bff444 	addi	r2,fp,-47
     5b4:	1009883a 	mov	r4,r2
     5b8:	180b883a 	mov	r5,r3
     5bc:	00023580 	call	2358 <strcpy>

		if (input[0] != 0) {
     5c0:	e0bff443 	ldbu	r2,-47(fp)
     5c4:	10803fcc 	andi	r2,r2,255
     5c8:	1080201c 	xori	r2,r2,128
     5cc:	10bfe004 	addi	r2,r2,-128
     5d0:	10008526 	beq	r2,zero,7e8 <cryptTask+0x278>
			if ((input[0] >= 'a') && (input[0] <= 'z')) {
     5d4:	e0bff443 	ldbu	r2,-47(fp)
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	1080201c 	xori	r2,r2,128
     5e0:	10bfe004 	addi	r2,r2,-128
     5e4:	10801850 	cmplti	r2,r2,97
     5e8:	10007f1e 	bne	r2,zero,7e8 <cryptTask+0x278>
     5ec:	e0bff443 	ldbu	r2,-47(fp)
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	1080201c 	xori	r2,r2,128
     5f8:	10bfe004 	addi	r2,r2,-128
     5fc:	10801ec8 	cmpgei	r2,r2,123
     600:	1000791e 	bne	r2,zero,7e8 <cryptTask+0x278>
				// continues after the rotors have rotated
				OSSemPost(sem_rotate);
     604:	d0a8d317 	ldw	r2,-23732(gp)
     608:	1009883a 	mov	r4,r2
     60c:	00189bc0 	call	189bc <OSSemPost>
				OSTimeDlyHMSM(0, 0, 0, 100);
     610:	0009883a 	mov	r4,zero
     614:	000b883a 	mov	r5,zero
     618:	000d883a 	mov	r6,zero
     61c:	01c01904 	movi	r7,100
     620:	001a7140 	call	1a714 <OSTimeDlyHMSM>
				OSSemPend(sem_rotated, 0, &err);
     624:	d0a8cb17 	ldw	r2,-23764(gp)
     628:	1009883a 	mov	r4,r2
     62c:	000b883a 	mov	r5,zero
     630:	e1bff404 	addi	r6,fp,-48
     634:	00185e80 	call	185e8 <OSSemPend>
				char string[20];

				getLetter("getPluggedLetter", input[0]);
     638:	e0bff443 	ldbu	r2,-47(fp)
     63c:	10803fcc 	andi	r2,r2,255
     640:	1080201c 	xori	r2,r2,128
     644:	10bfe004 	addi	r2,r2,-128
     648:	010000b4 	movhi	r4,2
     64c:	213b8104 	addi	r4,r4,-4604
     650:	100b883a 	mov	r5,r2
     654:	00005180 	call	518 <getLetter>
				//printf("Na plugboard: %s\n", command);

				getLetter("getLetter 1", command[0]);
     658:	008000b4 	movhi	r2,2
     65c:	108f7104 	addi	r2,r2,15812
     660:	10800003 	ldbu	r2,0(r2)
     664:	10803fcc 	andi	r2,r2,255
     668:	1080201c 	xori	r2,r2,128
     66c:	10bfe004 	addi	r2,r2,-128
     670:	010000b4 	movhi	r4,2
     674:	213b8604 	addi	r4,r4,-4584
     678:	100b883a 	mov	r5,r2
     67c:	00005180 	call	518 <getLetter>
				//printf("Na rotor een: %s\n", command);

				getLetter("getLetter 2", command[0]);
     680:	008000b4 	movhi	r2,2
     684:	108f7104 	addi	r2,r2,15812
     688:	10800003 	ldbu	r2,0(r2)
     68c:	10803fcc 	andi	r2,r2,255
     690:	1080201c 	xori	r2,r2,128
     694:	10bfe004 	addi	r2,r2,-128
     698:	010000b4 	movhi	r4,2
     69c:	213b8904 	addi	r4,r4,-4572
     6a0:	100b883a 	mov	r5,r2
     6a4:	00005180 	call	518 <getLetter>
				//printf("Na rotor twee: %s\n", command);

				getLetter("getLetter 3", command[0]);
     6a8:	008000b4 	movhi	r2,2
     6ac:	108f7104 	addi	r2,r2,15812
     6b0:	10800003 	ldbu	r2,0(r2)
     6b4:	10803fcc 	andi	r2,r2,255
     6b8:	1080201c 	xori	r2,r2,128
     6bc:	10bfe004 	addi	r2,r2,-128
     6c0:	010000b4 	movhi	r4,2
     6c4:	213b8c04 	addi	r4,r4,-4560
     6c8:	100b883a 	mov	r5,r2
     6cc:	00005180 	call	518 <getLetter>
				//printf("Na rotor drie: %s\n", command);

				getLetter("getLetter 4", command[0]);
     6d0:	008000b4 	movhi	r2,2
     6d4:	108f7104 	addi	r2,r2,15812
     6d8:	10800003 	ldbu	r2,0(r2)
     6dc:	10803fcc 	andi	r2,r2,255
     6e0:	1080201c 	xori	r2,r2,128
     6e4:	10bfe004 	addi	r2,r2,-128
     6e8:	010000b4 	movhi	r4,2
     6ec:	213b8f04 	addi	r4,r4,-4548
     6f0:	100b883a 	mov	r5,r2
     6f4:	00005180 	call	518 <getLetter>
				//printf("Na rotor vier: %s\n", command);

				getLetter("getReflector ", command[0]);
     6f8:	008000b4 	movhi	r2,2
     6fc:	108f7104 	addi	r2,r2,15812
     700:	10800003 	ldbu	r2,0(r2)
     704:	10803fcc 	andi	r2,r2,255
     708:	1080201c 	xori	r2,r2,128
     70c:	10bfe004 	addi	r2,r2,-128
     710:	010000b4 	movhi	r4,2
     714:	213b9204 	addi	r4,r4,-4536
     718:	100b883a 	mov	r5,r2
     71c:	00005180 	call	518 <getLetter>
				//printf("Na reflector: %s\n", command);

				getLetter("getReverseLetter 4", command[0]);
     720:	008000b4 	movhi	r2,2
     724:	108f7104 	addi	r2,r2,15812
     728:	10800003 	ldbu	r2,0(r2)
     72c:	10803fcc 	andi	r2,r2,255
     730:	1080201c 	xori	r2,r2,128
     734:	10bfe004 	addi	r2,r2,-128
     738:	010000b4 	movhi	r4,2
     73c:	213b9604 	addi	r4,r4,-4520
     740:	100b883a 	mov	r5,r2
     744:	00005180 	call	518 <getLetter>
				//printf("Na reverse vier: %s\n", command);

				getLetter("getReverseLetter 3", command[0]);
     748:	008000b4 	movhi	r2,2
     74c:	108f7104 	addi	r2,r2,15812
     750:	10800003 	ldbu	r2,0(r2)
     754:	10803fcc 	andi	r2,r2,255
     758:	1080201c 	xori	r2,r2,128
     75c:	10bfe004 	addi	r2,r2,-128
     760:	010000b4 	movhi	r4,2
     764:	213b9b04 	addi	r4,r4,-4500
     768:	100b883a 	mov	r5,r2
     76c:	00005180 	call	518 <getLetter>
				//printf("Na reverse drie: %s\n", command);

				getLetter("getReverseLetter 2", command[0]);
     770:	008000b4 	movhi	r2,2
     774:	108f7104 	addi	r2,r2,15812
     778:	10800003 	ldbu	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	1080201c 	xori	r2,r2,128
     784:	10bfe004 	addi	r2,r2,-128
     788:	010000b4 	movhi	r4,2
     78c:	213ba004 	addi	r4,r4,-4480
     790:	100b883a 	mov	r5,r2
     794:	00005180 	call	518 <getLetter>
				//printf("Na reverse twee: %s\n", command);

				getLetter("getReverseLetter 1", command[0]);
     798:	008000b4 	movhi	r2,2
     79c:	108f7104 	addi	r2,r2,15812
     7a0:	10800003 	ldbu	r2,0(r2)
     7a4:	10803fcc 	andi	r2,r2,255
     7a8:	1080201c 	xori	r2,r2,128
     7ac:	10bfe004 	addi	r2,r2,-128
     7b0:	010000b4 	movhi	r4,2
     7b4:	213ba504 	addi	r4,r4,-4460
     7b8:	100b883a 	mov	r5,r2
     7bc:	00005180 	call	518 <getLetter>
				//printf("Na reverse een: %s\n", command);

				getLetter("getPluggedLetter ", command[0]);
     7c0:	008000b4 	movhi	r2,2
     7c4:	108f7104 	addi	r2,r2,15812
     7c8:	10800003 	ldbu	r2,0(r2)
     7cc:	10803fcc 	andi	r2,r2,255
     7d0:	1080201c 	xori	r2,r2,128
     7d4:	10bfe004 	addi	r2,r2,-128
     7d8:	010000b4 	movhi	r4,2
     7dc:	213baa04 	addi	r4,r4,-4440
     7e0:	100b883a 	mov	r5,r2
     7e4:	00005180 	call	518 <getLetter>
//				//getLetter("getRotorLetter 1", command[0]);
//				printf("rotorLetter: %c\n", command[0]);
				//printf("CRYPT\n");
			}
		}
	}
     7e8:	003f6606 	br	584 <__alt_mem_Flash_flash_data+0xf4000584>

000007ec <rotateTask>:
}

void rotateTask(void * pdata) {
     7ec:	defffa04 	addi	sp,sp,-24
     7f0:	dfc00515 	stw	ra,20(sp)
     7f4:	df000415 	stw	fp,16(sp)
     7f8:	df000404 	addi	fp,sp,16
     7fc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U rotateOne = 0;
     800:	e03ffc05 	stb	zero,-16(fp)
	INT8U rotateTwo = 0;
     804:	e03ffc45 	stb	zero,-15(fp)

	while (1) {
		OSSemPend(sem_rotate, 0, &err);
     808:	d0e8d317 	ldw	r3,-23732(gp)
     80c:	e0bffe04 	addi	r2,fp,-8
     810:	1809883a 	mov	r4,r3
     814:	000b883a 	mov	r5,zero
     818:	100d883a 	mov	r6,r2
     81c:	00185e80 	call	185e8 <OSSemPend>
		sendCommand("getTriggered 1/");
     820:	010000b4 	movhi	r4,2
     824:	213baf04 	addi	r4,r4,-4420
     828:	000035c0 	call	35c <sendCommand>
		getCommand();
     82c:	00003d80 	call	3d8 <getCommand>
		//printf("COMMAND: %s\n", command);
		if (command[0] == '1') {
     830:	008000b4 	movhi	r2,2
     834:	108f7104 	addi	r2,r2,15812
     838:	10800003 	ldbu	r2,0(r2)
     83c:	10803fcc 	andi	r2,r2,255
     840:	1080201c 	xori	r2,r2,128
     844:	10bfe004 	addi	r2,r2,-128
     848:	10800c58 	cmpnei	r2,r2,49
     84c:	1000051e 	bne	r2,zero,864 <rotateTask+0x78>
			rotateOne = 1;
     850:	00800044 	movi	r2,1
     854:	e0bffc05 	stb	r2,-16(fp)
			printf("TRIGGERED ROTOR 2");
     858:	010000b4 	movhi	r4,2
     85c:	213bb304 	addi	r4,r4,-4404
     860:	00020f80 	call	20f8 <printf>
		}

		sendCommand("getTriggered 2/");
     864:	010000b4 	movhi	r4,2
     868:	213bb804 	addi	r4,r4,-4384
     86c:	000035c0 	call	35c <sendCommand>
		getCommand();
     870:	00003d80 	call	3d8 <getCommand>

		printf("%c\n", command[0]);
     874:	008000b4 	movhi	r2,2
     878:	108f7104 	addi	r2,r2,15812
     87c:	10800003 	ldbu	r2,0(r2)
     880:	10803fcc 	andi	r2,r2,255
     884:	1080201c 	xori	r2,r2,128
     888:	10bfe004 	addi	r2,r2,-128
     88c:	010000b4 	movhi	r4,2
     890:	213bbc04 	addi	r4,r4,-4368
     894:	100b883a 	mov	r5,r2
     898:	00020f80 	call	20f8 <printf>
		if (command[0] == '1') {
     89c:	008000b4 	movhi	r2,2
     8a0:	108f7104 	addi	r2,r2,15812
     8a4:	10800003 	ldbu	r2,0(r2)
     8a8:	10803fcc 	andi	r2,r2,255
     8ac:	1080201c 	xori	r2,r2,128
     8b0:	10bfe004 	addi	r2,r2,-128
     8b4:	10800c58 	cmpnei	r2,r2,49
     8b8:	1000021e 	bne	r2,zero,8c4 <rotateTask+0xd8>
			rotateTwo = 1;
     8bc:	00800044 	movi	r2,1
     8c0:	e0bffc45 	stb	r2,-15(fp)
		}

		if (rotateOne) {
     8c4:	e0bffc03 	ldbu	r2,-16(fp)
     8c8:	10001526 	beq	r2,zero,920 <rotateTask+0x134>
			sendCommand("rotateForward 2/");
     8cc:	010000b4 	movhi	r4,2
     8d0:	213bbd04 	addi	r4,r4,-4364
     8d4:	000035c0 	call	35c <sendCommand>

			rotateOne = 0;
     8d8:	e03ffc05 	stb	zero,-16(fp)

			rotorStanden[2]++;
     8dc:	d0a00684 	addi	r2,gp,-32742
     8e0:	10800003 	ldbu	r2,0(r2)
     8e4:	10800044 	addi	r2,r2,1
     8e8:	1007883a 	mov	r3,r2
     8ec:	d0a00684 	addi	r2,gp,-32742
     8f0:	10c00005 	stb	r3,0(r2)

			if (rotorStanden[2] > 'z') {
     8f4:	d0a00684 	addi	r2,gp,-32742
     8f8:	10800003 	ldbu	r2,0(r2)
     8fc:	10803fcc 	andi	r2,r2,255
     900:	1080201c 	xori	r2,r2,128
     904:	10bfe004 	addi	r2,r2,-128
     908:	10801ed0 	cmplti	r2,r2,123
     90c:	10001a1e 	bne	r2,zero,978 <rotateTask+0x18c>
				rotorStanden[2] = 'a';
     910:	d0a00684 	addi	r2,gp,-32742
     914:	00c01844 	movi	r3,97
     918:	10c00005 	stb	r3,0(r2)
     91c:	00001606 	br	978 <rotateTask+0x18c>
			}

		} else if (rotateTwo) {
     920:	e0bffc43 	ldbu	r2,-15(fp)
     924:	10001426 	beq	r2,zero,978 <rotateTask+0x18c>
			sendCommand("rotateForward 3/");
     928:	010000b4 	movhi	r4,2
     92c:	213bc204 	addi	r4,r4,-4344
     930:	000035c0 	call	35c <sendCommand>
			rotateTwo = 0;
     934:	e03ffc45 	stb	zero,-15(fp)
			rotorStanden[1]++;
     938:	d0a00644 	addi	r2,gp,-32743
     93c:	10800003 	ldbu	r2,0(r2)
     940:	10800044 	addi	r2,r2,1
     944:	1007883a 	mov	r3,r2
     948:	d0a00644 	addi	r2,gp,-32743
     94c:	10c00005 	stb	r3,0(r2)

			if (rotorStanden[1] > 'z') {
     950:	d0a00644 	addi	r2,gp,-32743
     954:	10800003 	ldbu	r2,0(r2)
     958:	10803fcc 	andi	r2,r2,255
     95c:	1080201c 	xori	r2,r2,128
     960:	10bfe004 	addi	r2,r2,-128
     964:	10801ed0 	cmplti	r2,r2,123
     968:	1000031e 	bne	r2,zero,978 <rotateTask+0x18c>
				rotorStanden[1] = 'a';
     96c:	d0a00644 	addi	r2,gp,-32743
     970:	00c01844 	movi	r3,97
     974:	10c00005 	stb	r3,0(r2)
			}
		}

		sendCommand("rotateForward 1/");
     978:	010000b4 	movhi	r4,2
     97c:	213bc704 	addi	r4,r4,-4324
     980:	000035c0 	call	35c <sendCommand>
		rotorStanden[3]++;
     984:	d0a006c4 	addi	r2,gp,-32741
     988:	10800003 	ldbu	r2,0(r2)
     98c:	10800044 	addi	r2,r2,1
     990:	1007883a 	mov	r3,r2
     994:	d0a006c4 	addi	r2,gp,-32741
     998:	10c00005 	stb	r3,0(r2)

		if (rotorStanden[3] > 'z') {
     99c:	d0a006c4 	addi	r2,gp,-32741
     9a0:	10800003 	ldbu	r2,0(r2)
     9a4:	10803fcc 	andi	r2,r2,255
     9a8:	1080201c 	xori	r2,r2,128
     9ac:	10bfe004 	addi	r2,r2,-128
     9b0:	10801ed0 	cmplti	r2,r2,123
     9b4:	1000031e 	bne	r2,zero,9c4 <rotateTask+0x1d8>
			rotorStanden[3] = 'a';
     9b8:	d0a006c4 	addi	r2,gp,-32741
     9bc:	00c01844 	movi	r3,97
     9c0:	10c00005 	stb	r3,0(r2)
		}

		// Updates the rotor positions on the screen
		char string[2];
		int i;
		for (i = 3; i > 1; i--) {
     9c4:	008000c4 	movi	r2,3
     9c8:	e0bffd15 	stw	r2,-12(fp)
     9cc:	00001606 	br	a28 <rotateTask+0x23c>
			sprintf(string, "%c", rotorStanden[i]);
     9d0:	e0fffd17 	ldw	r3,-12(fp)
     9d4:	d0a00604 	addi	r2,gp,-32744
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	10800003 	ldbu	r2,0(r2)
     9e0:	10803fcc 	andi	r2,r2,255
     9e4:	1080201c 	xori	r2,r2,128
     9e8:	10bfe004 	addi	r2,r2,-128
     9ec:	e0fffe44 	addi	r3,fp,-7
     9f0:	1809883a 	mov	r4,r3
     9f4:	014000b4 	movhi	r5,2
     9f8:	297bcc04 	addi	r5,r5,-4304
     9fc:	100d883a 	mov	r6,r2
     a00:	00022480 	call	2248 <sprintf>
			printRotorStand(string, i + 1);
     a04:	e0bffd17 	ldw	r2,-12(fp)
     a08:	10800044 	addi	r2,r2,1
     a0c:	e0fffe44 	addi	r3,fp,-7
     a10:	1809883a 	mov	r4,r3
     a14:	100b883a 	mov	r5,r2
     a18:	0001f580 	call	1f58 <printRotorStand>
		}

		// Updates the rotor positions on the screen
		char string[2];
		int i;
		for (i = 3; i > 1; i--) {
     a1c:	e0bffd17 	ldw	r2,-12(fp)
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	e0bffd15 	stw	r2,-12(fp)
     a28:	e0bffd17 	ldw	r2,-12(fp)
     a2c:	10800088 	cmpgei	r2,r2,2
     a30:	103fe71e 	bne	r2,zero,9d0 <__alt_mem_Flash_flash_data+0xf40009d0>
			sprintf(string, "%c", rotorStanden[i]);
			printRotorStand(string, i + 1);
		}

		OSSemPost(sem_rotated);
     a34:	d0a8cb17 	ldw	r2,-23764(gp)
     a38:	1009883a 	mov	r4,r2
     a3c:	00189bc0 	call	189bc <OSSemPost>
		//printf("ROTATE\n");
	}
     a40:	003f7106 	br	808 <__alt_mem_Flash_flash_data+0xf4000808>

00000a44 <task1>:
}

void task1(void* pdata) {
     a44:	defffd04 	addi	sp,sp,-12
     a48:	dfc00215 	stw	ra,8(sp)
     a4c:	df000115 	stw	fp,4(sp)
     a50:	df000104 	addi	fp,sp,4
     a54:	e13fff15 	stw	r4,-4(fp)

	while (1) {
		PS2();
     a58:	0001c240 	call	1c24 <PS2>
		strTemp[0] = getKey();
     a5c:	0001c980 	call	1c98 <getKey>
     a60:	d0a8ca05 	stb	r2,-23768(gp)
		strTemp[1] = '\0';
     a64:	d0a8ca44 	addi	r2,gp,-23767
     a68:	10000005 	stb	zero,0(r2)
		OSTimeDlyHMSM(0, 0, 0, 100);
     a6c:	0009883a 	mov	r4,zero
     a70:	000b883a 	mov	r5,zero
     a74:	000d883a 	mov	r6,zero
     a78:	01c01904 	movi	r7,100
     a7c:	001a7140 	call	1a714 <OSTimeDlyHMSM>
		//printf("PS2\n");
		//printf("TASK1\n");
	}
     a80:	003ff506 	br	a58 <__alt_mem_Flash_flash_data+0xf4000a58>

00000a84 <task2>:
}

void task2(void * pdata) {
     a84:	defffd04 	addi	sp,sp,-12
     a88:	dfc00215 	stw	ra,8(sp)
     a8c:	df000115 	stw	fp,4(sp)
     a90:	df000104 	addi	fp,sp,4
     a94:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	while (1) {
		//OSSemPend(sem_enigma, 0, &err);

		if (strTemp[0] >= '1' || strTemp[0] <= '5') {
     a98:	d0a8ca03 	ldbu	r2,-23768(gp)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	1080201c 	xori	r2,r2,128
     aa4:	10bfe004 	addi	r2,r2,-128
     aa8:	10800c48 	cmpgei	r2,r2,49
     aac:	1000061e 	bne	r2,zero,ac8 <task2+0x44>
     ab0:	d0a8ca03 	ldbu	r2,-23768(gp)
     ab4:	10803fcc 	andi	r2,r2,255
     ab8:	1080201c 	xori	r2,r2,128
     abc:	10bfe004 	addi	r2,r2,-128
     ac0:	10800d88 	cmpgei	r2,r2,54
     ac4:	1000181e 	bne	r2,zero,b28 <task2+0xa4>
			select(strTemp[0]);
     ac8:	d0a8ca03 	ldbu	r2,-23768(gp)
     acc:	10803fcc 	andi	r2,r2,255
     ad0:	1080201c 	xori	r2,r2,128
     ad4:	10bfe004 	addi	r2,r2,-128
     ad8:	1009883a 	mov	r4,r2
     adc:	00017040 	call	1704 <select>
			printRinginstelling(d, rotorNummer);
     ae0:	d0a00317 	ldw	r2,-32756(gp)
     ae4:	d128ca84 	addi	r4,gp,-23766
     ae8:	100b883a 	mov	r5,r2
     aec:	0001e680 	call	1e68 <printRinginstelling>
			printRotorStand(e, rotorNummer);
     af0:	d0a00317 	ldw	r2,-32756(gp)
     af4:	d128d204 	addi	r4,gp,-23736
     af8:	100b883a 	mov	r5,r2
     afc:	0001f580 	call	1f58 <printRotorStand>
			d[0] = '\0';
     b00:	d028ca85 	stb	zero,-23766(gp)
			e[0] = '\0';
     b04:	d028d205 	stb	zero,-23736(gp)

			OSTimeDlyHMSM(0, 0, 0, 100);
     b08:	0009883a 	mov	r4,zero
     b0c:	000b883a 	mov	r5,zero
     b10:	000d883a 	mov	r6,zero
     b14:	01c01904 	movi	r7,100
     b18:	001a7140 	call	1a714 <OSTimeDlyHMSM>
			OSSemPost(sem_enigma);
     b1c:	d0a8cf17 	ldw	r2,-23748(gp)
     b20:	1009883a 	mov	r4,r2
     b24:	00189bc0 	call	189bc <OSSemPost>
		}
		OSTimeDlyHMSM(0, 0, 0, 50);
     b28:	0009883a 	mov	r4,zero
     b2c:	000b883a 	mov	r5,zero
     b30:	000d883a 	mov	r6,zero
     b34:	01c00c84 	movi	r7,50
     b38:	001a7140 	call	1a714 <OSTimeDlyHMSM>
		//printf("TASK2\n");
	}
     b3c:	003fd606 	br	a98 <__alt_mem_Flash_flash_data+0xf4000a98>

00000b40 <task3>:
}

void task3(void *pdata) {
     b40:	defff404 	addi	sp,sp,-48
     b44:	dfc00b15 	stw	ra,44(sp)
     b48:	df000a15 	stw	fp,40(sp)
     b4c:	dc000915 	stw	r16,36(sp)
     b50:	df000a04 	addi	fp,sp,40
     b54:	e13ffe15 	stw	r4,-8(fp)
	INT8U err;

	while (1) {
		OSSemPend(sem_enigma, 0, &err);
     b58:	d0a8cf17 	ldw	r2,-23748(gp)
     b5c:	1009883a 	mov	r4,r2
     b60:	000b883a 	mov	r5,zero
     b64:	e1bff604 	addi	r6,fp,-40
     b68:	00185e80 	call	185e8 <OSSemPend>
		if (strTemp[0] < '1' || strTemp[0] > '5') {
     b6c:	d0a8ca03 	ldbu	r2,-23768(gp)
     b70:	10803fcc 	andi	r2,r2,255
     b74:	1080201c 	xori	r2,r2,128
     b78:	10bfe004 	addi	r2,r2,-128
     b7c:	10800c50 	cmplti	r2,r2,49
     b80:	1000061e 	bne	r2,zero,b9c <task3+0x5c>
     b84:	d0a8ca03 	ldbu	r2,-23768(gp)
     b88:	10803fcc 	andi	r2,r2,255
     b8c:	1080201c 	xori	r2,r2,128
     b90:	10bfe004 	addi	r2,r2,-128
     b94:	10800d90 	cmplti	r2,r2,54
     b98:	10001a1e 	bne	r2,zero,c04 <task3+0xc4>
			char string[30];
			sprintf(string, "%s", strTemp);
     b9c:	e0bff644 	addi	r2,fp,-39
     ba0:	1009883a 	mov	r4,r2
     ba4:	d168ca04 	addi	r5,gp,-23768
     ba8:	00023580 	call	2358 <strcpy>
			err = OSQPost(ControlBlock, string);
     bac:	d0e8cc17 	ldw	r3,-23760(gp)
     bb0:	e0bff644 	addi	r2,fp,-39
     bb4:	1809883a 	mov	r4,r3
     bb8:	100b883a 	mov	r5,r2
     bbc:	0017ae40 	call	17ae4 <OSQPost>
     bc0:	e0bff605 	stb	r2,-40(fp)
			err = OSMboxPost(messageBox, OSQPend(ControlBlock, 0, &err));
     bc4:	d428c917 	ldw	r16,-23772(gp)
     bc8:	d0a8cc17 	ldw	r2,-23760(gp)
     bcc:	1009883a 	mov	r4,r2
     bd0:	000b883a 	mov	r5,zero
     bd4:	e1bff604 	addi	r6,fp,-40
     bd8:	001767c0 	call	1767c <OSQPend>
     bdc:	8009883a 	mov	r4,r16
     be0:	100b883a 	mov	r5,r2
     be4:	00164c00 	call	164c0 <OSMboxPost>
     be8:	e0bff605 	stb	r2,-40(fp)
			typen(strTemp[0]);
     bec:	d0a8ca03 	ldbu	r2,-23768(gp)
     bf0:	10803fcc 	andi	r2,r2,255
     bf4:	1080201c 	xori	r2,r2,128
     bf8:	10bfe004 	addi	r2,r2,-128
     bfc:	1009883a 	mov	r4,r2
     c00:	00010540 	call	1054 <typen>
		}

		//OSSemPost(sem_enigma);
		OSTimeDlyHMSM(0, 0, 0, 100);
     c04:	0009883a 	mov	r4,zero
     c08:	000b883a 	mov	r5,zero
     c0c:	000d883a 	mov	r6,zero
     c10:	01c01904 	movi	r7,100
     c14:	001a7140 	call	1a714 <OSTimeDlyHMSM>
		//printf("TASK3\n");
	}
     c18:	003fcf06 	br	b58 <__alt_mem_Flash_flash_data+0xf4000b58>

00000c1c <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void) {
     c1c:	defffd04 	addi	sp,sp,-12
     c20:	dfc00215 	stw	ra,8(sp)
     c24:	df000115 	stw	fp,4(sp)
     c28:	df000104 	addi	fp,sp,4

	OSInit();								// Initialize uCOS-II.
     c2c:	0012b880 	call	12b88 <OSInit>

	sem_hardware = OSSemCreate(1);
     c30:	01000044 	movi	r4,1
     c34:	00182800 	call	18280 <OSSemCreate>
     c38:	d0a8d115 	stw	r2,-23740(gp)
	sem_rotate = OSSemCreate(0);
     c3c:	0009883a 	mov	r4,zero
     c40:	00182800 	call	18280 <OSSemCreate>
     c44:	d0a8d315 	stw	r2,-23732(gp)
	sem_rotated = OSSemCreate(0);
     c48:	0009883a 	mov	r4,zero
     c4c:	00182800 	call	18280 <OSSemCreate>
     c50:	d0a8cb15 	stw	r2,-23764(gp)
	sem_enigma = OSSemCreate(1);
     c54:	01000044 	movi	r4,1
     c58:	00182800 	call	18280 <OSSemCreate>
     c5c:	d0a8cf15 	stw	r2,-23748(gp)

	ControlBlock = OSQCreate(&messages, 40);
     c60:	010000b4 	movhi	r4,2
     c64:	211fa804 	addi	r4,r4,32416
     c68:	01400a04 	movi	r5,40
     c6c:	00171000 	call	17100 <OSQCreate>
     c70:	d0a8cc15 	stw	r2,-23760(gp)
	messageBox = OSMboxCreate(NULL);
     c74:	0009883a 	mov	r4,zero
     c78:	0015d4c0 	call	15d4c <OSMboxCreate>
     c7c:	d0a8c915 	stw	r2,-23772(gp)
	VGA_text_clear_all(character_buffer);
     c80:	d0a00117 	ldw	r2,-32764(gp)
     c84:	1009883a 	mov	r4,r2
     c88:	0001b440 	call	1b44 <VGA_text_clear_all>

	VGA_box(0, 0, 160, 240, ACHTERGROND);
     c8c:	d8000015 	stw	zero,0(sp)
     c90:	0009883a 	mov	r4,zero
     c94:	000b883a 	mov	r5,zero
     c98:	01802804 	movi	r6,160
     c9c:	01c03c04 	movi	r7,240
     ca0:	0000f240 	call	f24 <VGA_box>
	VGA_box(161, 0, 320, 240, ACHTERGROND);
     ca4:	d8000015 	stw	zero,0(sp)
     ca8:	01002844 	movi	r4,161
     cac:	000b883a 	mov	r5,zero
     cb0:	01805004 	movi	r6,320
     cb4:	01c03c04 	movi	r7,240
     cb8:	0000f240 	call	f24 <VGA_box>

	VGA_box(0, 160, 320, 240,FRAME);
     cbc:	008abe84 	movi	r2,11002
     cc0:	d8800015 	stw	r2,0(sp)
     cc4:	0009883a 	mov	r4,zero
     cc8:	01402804 	movi	r5,160
     ccc:	01805004 	movi	r6,320
     cd0:	01c03c04 	movi	r7,240
     cd4:	0000f240 	call	f24 <VGA_box>
	VGA_box(155 ,0 ,165 , 240, FRAME);
     cd8:	008abe84 	movi	r2,11002
     cdc:	d8800015 	stw	r2,0(sp)
     ce0:	010026c4 	movi	r4,155
     ce4:	000b883a 	mov	r5,zero
     ce8:	01802944 	movi	r6,165
     cec:	01c03c04 	movi	r7,240
     cf0:	0000f240 	call	f24 <VGA_box>
	VGA_box(0 ,0 ,10 , 240, FRAME);
     cf4:	008abe84 	movi	r2,11002
     cf8:	d8800015 	stw	r2,0(sp)
     cfc:	0009883a 	mov	r4,zero
     d00:	000b883a 	mov	r5,zero
     d04:	01800284 	movi	r6,10
     d08:	01c03c04 	movi	r7,240
     d0c:	0000f240 	call	f24 <VGA_box>
	VGA_box(0 ,0 ,320 , 10, FRAME);
     d10:	008abe84 	movi	r2,11002
     d14:	d8800015 	stw	r2,0(sp)
     d18:	0009883a 	mov	r4,zero
     d1c:	000b883a 	mov	r5,zero
     d20:	01805004 	movi	r6,320
     d24:	01c00284 	movi	r7,10
     d28:	0000f240 	call	f24 <VGA_box>
	VGA_box(310 ,0 ,320 , 240, FRAME);
     d2c:	008abe84 	movi	r2,11002
     d30:	d8800015 	stw	r2,0(sp)
     d34:	01004d84 	movi	r4,310
     d38:	000b883a 	mov	r5,zero
     d3c:	01805004 	movi	r6,320
     d40:	01c03c04 	movi	r7,240
     d44:	0000f240 	call	f24 <VGA_box>

	VGA_box(20, 200, 60, 220, ROTOR);
     d48:	00ab77c4 	movi	r2,-21025
     d4c:	d8800015 	stw	r2,0(sp)
     d50:	01000504 	movi	r4,20
     d54:	01403204 	movi	r5,200
     d58:	01800f04 	movi	r6,60
     d5c:	01c03704 	movi	r7,220
     d60:	0000f240 	call	f24 <VGA_box>
	VGA_box(100, 180, 140, 220, ROTOR);
     d64:	00ab77c4 	movi	r2,-21025
     d68:	d8800015 	stw	r2,0(sp)
     d6c:	01001904 	movi	r4,100
     d70:	01402d04 	movi	r5,180
     d74:	01802304 	movi	r6,140
     d78:	01c03704 	movi	r7,220
     d7c:	0000f240 	call	f24 <VGA_box>
	VGA_box(180, 180, 220, 220, ROTOR);
     d80:	00ab77c4 	movi	r2,-21025
     d84:	d8800015 	stw	r2,0(sp)
     d88:	01002d04 	movi	r4,180
     d8c:	01402d04 	movi	r5,180
     d90:	01803704 	movi	r6,220
     d94:	01c03704 	movi	r7,220
     d98:	0000f240 	call	f24 <VGA_box>
	VGA_box(260, 180, 300, 220, ROTOR);
     d9c:	00ab77c4 	movi	r2,-21025
     da0:	d8800015 	stw	r2,0(sp)
     da4:	01004104 	movi	r4,260
     da8:	01402d04 	movi	r5,180
     dac:	01804b04 	movi	r6,300
     db0:	01c03704 	movi	r7,220
     db4:	0000f240 	call	f24 <VGA_box>
	VGA_box(20, 180, 60, 200, ROTOR_SELECT);
     db8:	009407c4 	movi	r2,20511
     dbc:	d8800015 	stw	r2,0(sp)
     dc0:	01000504 	movi	r4,20
     dc4:	01402d04 	movi	r5,180
     dc8:	01800f04 	movi	r6,60
     dcc:	01c03204 	movi	r7,200
     dd0:	0000f240 	call	f24 <VGA_box>

	VGA_text(3, 1, "Input tekst:");
     dd4:	010000c4 	movi	r4,3
     dd8:	01400044 	movi	r5,1
     ddc:	018000b4 	movhi	r6,2
     de0:	31bbcd04 	addi	r6,r6,-4300
     de4:	0000fcc0 	call	fcc <VGA_text>
	VGA_text(42, 1, "Output tekst:");
     de8:	01000a84 	movi	r4,42
     dec:	01400044 	movi	r5,1
     df0:	018000b4 	movhi	r6,2
     df4:	31bbd104 	addi	r6,r6,-4284
     df8:	0000fcc0 	call	fcc <VGA_text>


	printRinginstelling("1", 1);
     dfc:	010000b4 	movhi	r4,2
     e00:	213bd504 	addi	r4,r4,-4268
     e04:	01400044 	movi	r5,1
     e08:	0001e680 	call	1e68 <printRinginstelling>
	printRinginstelling("1", 2);
     e0c:	010000b4 	movhi	r4,2
     e10:	213bd504 	addi	r4,r4,-4268
     e14:	01400084 	movi	r5,2
     e18:	0001e680 	call	1e68 <printRinginstelling>
	printRinginstelling("1", 3);
     e1c:	010000b4 	movhi	r4,2
     e20:	213bd504 	addi	r4,r4,-4268
     e24:	014000c4 	movi	r5,3
     e28:	0001e680 	call	1e68 <printRinginstelling>
	printRinginstelling("1", 4);
     e2c:	010000b4 	movhi	r4,2
     e30:	213bd504 	addi	r4,r4,-4268
     e34:	01400104 	movi	r5,4
     e38:	0001e680 	call	1e68 <printRinginstelling>

	printRotorStand("a", 1);
     e3c:	010000b4 	movhi	r4,2
     e40:	213bd604 	addi	r4,r4,-4264
     e44:	01400044 	movi	r5,1
     e48:	0001f580 	call	1f58 <printRotorStand>
	printRotorStand("a", 2);
     e4c:	010000b4 	movhi	r4,2
     e50:	213bd604 	addi	r4,r4,-4264
     e54:	01400084 	movi	r5,2
     e58:	0001f580 	call	1f58 <printRotorStand>
	printRotorStand("a", 3);
     e5c:	010000b4 	movhi	r4,2
     e60:	213bd604 	addi	r4,r4,-4264
     e64:	014000c4 	movi	r5,3
     e68:	0001f580 	call	1f58 <printRotorStand>
	printRotorStand("a", 4);
     e6c:	010000b4 	movhi	r4,2
     e70:	213bd604 	addi	r4,r4,-4264
     e74:	01400104 	movi	r5,4
     e78:	0001f580 	call	1f58 <printRotorStand>

	OSTaskCreate(task1, (void*) 0, &task1_stk[TASK_STACKSIZE - 1],
     e7c:	01000034 	movhi	r4,0
     e80:	21029104 	addi	r4,r4,2628
     e84:	000b883a 	mov	r5,zero
     e88:	018000b4 	movhi	r6,2
     e8c:	31978404 	addi	r6,r6,24080
     e90:	01c00284 	movi	r7,10
     e94:	00192180 	call	19218 <OSTaskCreate>
	TASK1_PRIORITY);
	OSTaskCreate(task2, (void*) 0, &task2_stk[TASK_STACKSIZE - 1],
     e98:	01000034 	movhi	r4,0
     e9c:	2102a104 	addi	r4,r4,2692
     ea0:	000b883a 	mov	r5,zero
     ea4:	018000f4 	movhi	r6,3
     ea8:	31a7cf04 	addi	r6,r6,-24772
     eac:	01c002c4 	movi	r7,11
     eb0:	00192180 	call	19218 <OSTaskCreate>
	TASK2_PRIORITY);
	OSTaskCreate(task3, (void*) 0, &task3_stk[TASK_STACKSIZE - 1],
     eb4:	01000034 	movhi	r4,0
     eb8:	2102d004 	addi	r4,r4,2880
     ebc:	000b883a 	mov	r5,zero
     ec0:	018000f4 	movhi	r6,3
     ec4:	31afcf04 	addi	r6,r6,-16580
     ec8:	01c00204 	movi	r7,8
     ecc:	00192180 	call	19218 <OSTaskCreate>
	TASK3_PRIORITY);
	OSTaskCreate(cryptTask, (void*) 0, &crypt_stk[TASK_STACKSIZE - 1],
     ed0:	01000034 	movhi	r4,0
     ed4:	21015c04 	addi	r4,r4,1392
     ed8:	000b883a 	mov	r5,zero
     edc:	018000f4 	movhi	r6,3
     ee0:	31b7d904 	addi	r6,r6,-8348
     ee4:	01c001c4 	movi	r7,7
     ee8:	00192180 	call	19218 <OSTaskCreate>
	CRYPT_PRIORITY);
	OSTaskCreate(rotateTask, (void*) 0, &rotateTask_stk[TASK_STACKSIZE - 1],
     eec:	01000034 	movhi	r4,0
     ef0:	2101fb04 	addi	r4,r4,2028
     ef4:	000b883a 	mov	r5,zero
     ef8:	018000b4 	movhi	r6,2
     efc:	319f8404 	addi	r6,r6,32272
     f00:	01c00184 	movi	r7,6
     f04:	00192180 	call	19218 <OSTaskCreate>
	ROTATETASK_PRIORITY);

	OSStart();
     f08:	0012eac0 	call	12eac <OSStart>
	return 0;
     f0c:	0005883a 	mov	r2,zero
}
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) { //320x240
     f24:	defff704 	addi	sp,sp,-36
     f28:	df000815 	stw	fp,32(sp)
     f2c:	df000804 	addi	fp,sp,32
     f30:	e13ffb15 	stw	r4,-20(fp)
     f34:	e17ffc15 	stw	r5,-16(fp)
     f38:	e1bffd15 	stw	r6,-12(fp)
     f3c:	e1fffe15 	stw	r7,-8(fp)
     f40:	e0800117 	ldw	r2,4(fp)
     f44:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     f48:	e0bffc17 	ldw	r2,-16(fp)
     f4c:	e0bff815 	stw	r2,-32(fp)
     f50:	00001706 	br	fb0 <VGA_box+0x8c>
		col = x1;
     f54:	e0bffb17 	ldw	r2,-20(fp)
     f58:	e0bff915 	stw	r2,-28(fp)
		while (col <= x2) {
     f5c:	00000e06 	br	f98 <VGA_box+0x74>
			offset = (row << 9) + col;
     f60:	e0bff817 	ldw	r2,-32(fp)
     f64:	1006927a 	slli	r3,r2,9
     f68:	e0bff917 	ldw	r2,-28(fp)
     f6c:	1885883a 	add	r2,r3,r2
     f70:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     f74:	d0e00217 	ldw	r3,-32760(gp)
     f78:	e0bffa17 	ldw	r2,-24(fp)
     f7c:	1085883a 	add	r2,r2,r2
     f80:	1885883a 	add	r2,r3,r2
     f84:	e0ffff0b 	ldhu	r3,-4(fp)
     f88:	10c0000d 	sth	r3,0(r2)
			++col;
     f8c:	e0bff917 	ldw	r2,-28(fp)
     f90:	10800044 	addi	r2,r2,1
     f94:	e0bff915 	stw	r2,-28(fp)
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
		col = x1;
		while (col <= x2) {
     f98:	e0bff917 	ldw	r2,-28(fp)
     f9c:	e0fffd17 	ldw	r3,-12(fp)
     fa0:	18bfef0e 	bge	r3,r2,f60 <__alt_mem_Flash_flash_data+0xf4000f60>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color) { //320x240
	int offset, row, col;
	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++) {
     fa4:	e0bff817 	ldw	r2,-32(fp)
     fa8:	10800044 	addi	r2,r2,1
     fac:	e0bff815 	stw	r2,-32(fp)
     fb0:	e0bff817 	ldw	r2,-32(fp)
     fb4:	e0fffe17 	ldw	r3,-8(fp)
     fb8:	18bfe60e 	bge	r3,r2,f54 <__alt_mem_Flash_flash_data+0xf4000f54>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     fbc:	e037883a 	mov	sp,fp
     fc0:	df000017 	ldw	fp,0(sp)
     fc4:	dec00104 	addi	sp,sp,4
     fc8:	f800283a 	ret

00000fcc <VGA_text>:

void VGA_text(int x, int y, char * text_ptr) {
     fcc:	defffb04 	addi	sp,sp,-20
     fd0:	df000415 	stw	fp,16(sp)
     fd4:	df000404 	addi	fp,sp,16
     fd8:	e13ffd15 	stw	r4,-12(fp)
     fdc:	e17ffe15 	stw	r5,-8(fp)
     fe0:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     fe4:	e0bffe17 	ldw	r2,-8(fp)
     fe8:	100691fa 	slli	r3,r2,7
     fec:	e0bffd17 	ldw	r2,-12(fp)
     ff0:	1885883a 	add	r2,r3,r2
     ff4:	e0bffc15 	stw	r2,-16(fp)
	while (*(text_ptr)) {
     ff8:	00000c06 	br	102c <VGA_text+0x60>

		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     ffc:	d0e00117 	ldw	r3,-32764(gp)
    1000:	e0bffc17 	ldw	r2,-16(fp)
    1004:	1885883a 	add	r2,r3,r2
    1008:	e0ffff17 	ldw	r3,-4(fp)
    100c:	18c00003 	ldbu	r3,0(r3)
    1010:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	10800044 	addi	r2,r2,1
    101c:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    1020:	e0bffc17 	ldw	r2,-16(fp)
    1024:	10800044 	addi	r2,r2,1
    1028:	e0bffc15 	stw	r2,-16(fp)
void VGA_text(int x, int y, char * text_ptr) {
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while (*(text_ptr)) {
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	10800003 	ldbu	r2,0(r2)
    1034:	10803fcc 	andi	r2,r2,255
    1038:	1080201c 	xori	r2,r2,128
    103c:	10bfe004 	addi	r2,r2,-128
    1040:	103fee1e 	bne	r2,zero,ffc <__alt_mem_Flash_flash_data+0xf4000ffc>

		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    1044:	e037883a 	mov	sp,fp
    1048:	df000017 	ldw	fp,0(sp)
    104c:	dec00104 	addi	sp,sp,4
    1050:	f800283a 	ret

00001054 <typen>:

void typen(char c) {
    1054:	defffd04 	addi	sp,sp,-12
    1058:	dfc00215 	stw	ra,8(sp)
    105c:	df000115 	stw	fp,4(sp)
    1060:	df000104 	addi	fp,sp,4
    1064:	2005883a 	mov	r2,r4
    1068:	e0bfff05 	stb	r2,-4(fp)
	INT8U err;
	strTemp[0] = c;
    106c:	e0bfff03 	ldbu	r2,-4(fp)
    1070:	d0a8ca05 	stb	r2,-23768(gp)
	strTemp[1] = '\0';
    1074:	d0a8ca44 	addi	r2,gp,-23767
    1078:	10000005 	stb	zero,0(r2)

	if (count <= 5) {
    107c:	d0a00417 	ldw	r2,-32752(gp)
    1080:	10800188 	cmpgei	r2,r2,6
    1084:	1000021e 	bne	r2,zero,1090 <typen+0x3c>
		count = 5;
    1088:	00800144 	movi	r2,5
    108c:	d0a00415 	stw	r2,-32752(gp)
	}
	if (count >= 35) {
    1090:	d0a00417 	ldw	r2,-32752(gp)
    1094:	108008d0 	cmplti	r2,r2,35
    1098:	1000051e 	bne	r2,zero,10b0 <typen+0x5c>
		count = 5;
    109c:	00800144 	movi	r2,5
    10a0:	d0a00415 	stw	r2,-32752(gp)
		y++;
    10a4:	d0a00717 	ldw	r2,-32740(gp)
    10a8:	10800044 	addi	r2,r2,1
    10ac:	d0a00715 	stw	r2,-32740(gp)
	}
	if (y <= 5) {
    10b0:	d0a00717 	ldw	r2,-32740(gp)
    10b4:	10800188 	cmpgei	r2,r2,6
    10b8:	1000021e 	bne	r2,zero,10c4 <typen+0x70>
		y = 5;
    10bc:	00800144 	movi	r2,5
    10c0:	d0a00715 	stw	r2,-32740(gp)
	}
	if (y > 39) {
    10c4:	d0a00717 	ldw	r2,-32740(gp)
    10c8:	10800a10 	cmplti	r2,r2,40
    10cc:	1000021e 	bne	r2,zero,10d8 <typen+0x84>
		y = 39;
    10d0:	008009c4 	movi	r2,39
    10d4:	d0a00715 	stw	r2,-32740(gp)
	}

	if (strTemp[0] == ESC) {
    10d8:	d0a8ca03 	ldbu	r2,-23768(gp)
    10dc:	10803fcc 	andi	r2,r2,255
    10e0:	1080201c 	xori	r2,r2,128
    10e4:	10bfe004 	addi	r2,r2,-128
    10e8:	10800e18 	cmpnei	r2,r2,56
    10ec:	1000061e 	bne	r2,zero,1108 <typen+0xb4>
		clearScreen();
    10f0:	0001ae80 	call	1ae8 <clearScreen>
		count = 5;
    10f4:	00800144 	movi	r2,5
    10f8:	d0a00415 	stw	r2,-32752(gp)
		y = 5;
    10fc:	00800144 	movi	r2,5
    1100:	d0a00715 	stw	r2,-32740(gp)
    1104:	00006506 	br	129c <typen+0x248>
	} else if (strTemp[0] == BKSP) {
    1108:	d0a8ca03 	ldbu	r2,-23768(gp)
    110c:	10803fcc 	andi	r2,r2,255
    1110:	1080201c 	xori	r2,r2,128
    1114:	10bfe004 	addi	r2,r2,-128
    1118:	10800dd8 	cmpnei	r2,r2,55
    111c:	10001e1e 	bne	r2,zero,1198 <typen+0x144>
		if (count == 5 && y > 5) {
    1120:	d0a00417 	ldw	r2,-32752(gp)
    1124:	10800158 	cmpnei	r2,r2,5
    1128:	1000081e 	bne	r2,zero,114c <typen+0xf8>
    112c:	d0a00717 	ldw	r2,-32740(gp)
    1130:	10800190 	cmplti	r2,r2,6
    1134:	1000051e 	bne	r2,zero,114c <typen+0xf8>
			y--;
    1138:	d0a00717 	ldw	r2,-32740(gp)
    113c:	10bfffc4 	addi	r2,r2,-1
    1140:	d0a00715 	stw	r2,-32740(gp)
			count = 35;
    1144:	008008c4 	movi	r2,35
    1148:	d0a00415 	stw	r2,-32752(gp)
		}
		count--;
    114c:	d0a00417 	ldw	r2,-32752(gp)
    1150:	10bfffc4 	addi	r2,r2,-1
    1154:	d0a00415 	stw	r2,-32752(gp)

		VGA_text(count, y, " ");
    1158:	d0e00417 	ldw	r3,-32752(gp)
    115c:	d0a00717 	ldw	r2,-32740(gp)
    1160:	1809883a 	mov	r4,r3
    1164:	100b883a 	mov	r5,r2
    1168:	018000b4 	movhi	r6,2
    116c:	31bbd704 	addi	r6,r6,-4260
    1170:	0000fcc0 	call	fcc <VGA_text>
		VGA_text(count + 40, y, " ");
    1174:	d0a00417 	ldw	r2,-32752(gp)
    1178:	10c00a04 	addi	r3,r2,40
    117c:	d0a00717 	ldw	r2,-32740(gp)
    1180:	1809883a 	mov	r4,r3
    1184:	100b883a 	mov	r5,r2
    1188:	018000b4 	movhi	r6,2
    118c:	31bbd704 	addi	r6,r6,-4260
    1190:	0000fcc0 	call	fcc <VGA_text>
    1194:	00004106 	br	129c <typen+0x248>
	} else if (strTemp[0] == SPACE) {
    1198:	d0a8ca03 	ldbu	r2,-23768(gp)
    119c:	10803fcc 	andi	r2,r2,255
    11a0:	1080201c 	xori	r2,r2,128
    11a4:	10bfe004 	addi	r2,r2,-128
    11a8:	10800d98 	cmpnei	r2,r2,54
    11ac:	1000131e 	bne	r2,zero,11fc <typen+0x1a8>
		VGA_text(count, y, " ");
    11b0:	d0e00417 	ldw	r3,-32752(gp)
    11b4:	d0a00717 	ldw	r2,-32740(gp)
    11b8:	1809883a 	mov	r4,r3
    11bc:	100b883a 	mov	r5,r2
    11c0:	018000b4 	movhi	r6,2
    11c4:	31bbd704 	addi	r6,r6,-4260
    11c8:	0000fcc0 	call	fcc <VGA_text>
		VGA_text(count + 40, y, " ");
    11cc:	d0a00417 	ldw	r2,-32752(gp)
    11d0:	10c00a04 	addi	r3,r2,40
    11d4:	d0a00717 	ldw	r2,-32740(gp)
    11d8:	1809883a 	mov	r4,r3
    11dc:	100b883a 	mov	r5,r2
    11e0:	018000b4 	movhi	r6,2
    11e4:	31bbd704 	addi	r6,r6,-4260
    11e8:	0000fcc0 	call	fcc <VGA_text>
		count++;
    11ec:	d0a00417 	ldw	r2,-32752(gp)
    11f0:	10800044 	addi	r2,r2,1
    11f4:	d0a00415 	stw	r2,-32752(gp)
    11f8:	00002806 	br	129c <typen+0x248>
	} else if (strTemp[0] == ENTER) {
    11fc:	d0a8ca03 	ldbu	r2,-23768(gp)
    1200:	10803fcc 	andi	r2,r2,255
    1204:	1080201c 	xori	r2,r2,128
    1208:	10bfe004 	addi	r2,r2,-128
    120c:	10800e58 	cmpnei	r2,r2,57
    1210:	1000061e 	bne	r2,zero,122c <typen+0x1d8>
		count = 5;
    1214:	00800144 	movi	r2,5
    1218:	d0a00415 	stw	r2,-32752(gp)
		y++;
    121c:	d0a00717 	ldw	r2,-32740(gp)
    1220:	10800044 	addi	r2,r2,1
    1224:	d0a00715 	stw	r2,-32740(gp)
    1228:	00001c06 	br	129c <typen+0x248>
	} else {
		if (strTemp[0] != 0) {
    122c:	d0a8ca03 	ldbu	r2,-23768(gp)
    1230:	10803fcc 	andi	r2,r2,255
    1234:	1080201c 	xori	r2,r2,128
    1238:	10bfe004 	addi	r2,r2,-128
    123c:	10001726 	beq	r2,zero,129c <typen+0x248>
			VGA_text(count, y, strTemp);
    1240:	d0e00417 	ldw	r3,-32752(gp)
    1244:	d0a00717 	ldw	r2,-32740(gp)
    1248:	1809883a 	mov	r4,r3
    124c:	100b883a 	mov	r5,r2
    1250:	d1a8ca04 	addi	r6,gp,-23768
    1254:	0000fcc0 	call	fcc <VGA_text>
			//printf("string: %s %c\n", command, command[0]);
			OSTimeDlyHMSM(0, 0, 0, 75);
    1258:	0009883a 	mov	r4,zero
    125c:	000b883a 	mov	r5,zero
    1260:	000d883a 	mov	r6,zero
    1264:	01c012c4 	movi	r7,75
    1268:	001a7140 	call	1a714 <OSTimeDlyHMSM>
			VGA_text(count + 40, y, command);
    126c:	d0a00417 	ldw	r2,-32752(gp)
    1270:	10c00a04 	addi	r3,r2,40
    1274:	d0a00717 	ldw	r2,-32740(gp)
    1278:	1809883a 	mov	r4,r3
    127c:	100b883a 	mov	r5,r2
    1280:	018000b4 	movhi	r6,2
    1284:	318f7104 	addi	r6,r6,15812
    1288:	0000fcc0 	call	fcc <VGA_text>
			strTemp[0] = 0;
    128c:	d028ca05 	stb	zero,-23768(gp)
			count++;
    1290:	d0a00417 	ldw	r2,-32752(gp)
    1294:	10800044 	addi	r2,r2,1
    1298:	d0a00415 	stw	r2,-32752(gp)
		}
	}
	OSTimeDlyHMSM(0, 0, 0, 10);
    129c:	0009883a 	mov	r4,zero
    12a0:	000b883a 	mov	r5,zero
    12a4:	000d883a 	mov	r6,zero
    12a8:	01c00284 	movi	r7,10
    12ac:	001a7140 	call	1a714 <OSTimeDlyHMSM>

}
    12b0:	e037883a 	mov	sp,fp
    12b4:	dfc00117 	ldw	ra,4(sp)
    12b8:	df000017 	ldw	fp,0(sp)
    12bc:	dec00204 	addi	sp,sp,8
    12c0:	f800283a 	ret

000012c4 <changeRotor>:

void changeRotor(char knop) {
    12c4:	defff504 	addi	sp,sp,-44
    12c8:	dfc00a15 	stw	ra,40(sp)
    12cc:	df000915 	stw	fp,36(sp)
    12d0:	df000904 	addi	fp,sp,36
    12d4:	2005883a 	mov	r2,r4
    12d8:	e0bfff05 	stb	r2,-4(fp)
	char tempo[30];
	if (knop == UP) {
    12dc:	e0bfff07 	ldb	r2,-4(fp)
    12e0:	10800c58 	cmpnei	r2,r2,49
    12e4:	10007f1e 	bne	r2,zero,14e4 <changeRotor+0x220>
		if (rij == 1) {
    12e8:	d0a00517 	ldw	r2,-32748(gp)
    12ec:	10800058 	cmpnei	r2,r2,1
    12f0:	1000341e 	bne	r2,zero,13c4 <changeRotor+0x100>
			rotorStanden[rotorNummer - 1]++;
    12f4:	d0a00317 	ldw	r2,-32756(gp)
    12f8:	10bfffc4 	addi	r2,r2,-1
    12fc:	d0e00604 	addi	r3,gp,-32744
    1300:	10c7883a 	add	r3,r2,r3
    1304:	18c00003 	ldbu	r3,0(r3)
    1308:	18c00044 	addi	r3,r3,1
    130c:	1809883a 	mov	r4,r3
    1310:	d0e00604 	addi	r3,gp,-32744
    1314:	10c5883a 	add	r2,r2,r3
    1318:	11000005 	stb	r4,0(r2)
			if (rotorStanden[rotorNummer - 1] > 'z') {
    131c:	d0a00317 	ldw	r2,-32756(gp)
    1320:	10ffffc4 	addi	r3,r2,-1
    1324:	d0a00604 	addi	r2,gp,-32744
    1328:	1885883a 	add	r2,r3,r2
    132c:	10800003 	ldbu	r2,0(r2)
    1330:	10803fcc 	andi	r2,r2,255
    1334:	1080201c 	xori	r2,r2,128
    1338:	10bfe004 	addi	r2,r2,-128
    133c:	10801ed0 	cmplti	r2,r2,123
    1340:	1000061e 	bne	r2,zero,135c <changeRotor+0x98>
				rotorStanden[rotorNummer - 1] = 'a';
    1344:	d0a00317 	ldw	r2,-32756(gp)
    1348:	10ffffc4 	addi	r3,r2,-1
    134c:	d0a00604 	addi	r2,gp,-32744
    1350:	1885883a 	add	r2,r3,r2
    1354:	00c01844 	movi	r3,97
    1358:	10c00005 	stb	r3,0(r2)
			}
			sprintf(tempo, "rotateForward %d/", 5 - rotorNummer);
    135c:	d0a00317 	ldw	r2,-32756(gp)
    1360:	00c00144 	movi	r3,5
    1364:	1885c83a 	sub	r2,r3,r2
    1368:	e13ff704 	addi	r4,fp,-36
    136c:	014000b4 	movhi	r5,2
    1370:	297bd804 	addi	r5,r5,-4256
    1374:	100d883a 	mov	r6,r2
    1378:	00022480 	call	2248 <sprintf>
			printf("%s\n", tempo);
    137c:	e13ff704 	addi	r4,fp,-36
    1380:	00021dc0 	call	21dc <puts>
			sendCommand(tempo);
    1384:	e13ff704 	addi	r4,fp,-36
    1388:	000035c0 	call	35c <sendCommand>
			sprintf(e, "%c", rotorStanden[rotorNummer - 1]);
    138c:	d0a00317 	ldw	r2,-32756(gp)
    1390:	10ffffc4 	addi	r3,r2,-1
    1394:	d0a00604 	addi	r2,gp,-32744
    1398:	1885883a 	add	r2,r3,r2
    139c:	10800003 	ldbu	r2,0(r2)
    13a0:	10803fcc 	andi	r2,r2,255
    13a4:	1080201c 	xori	r2,r2,128
    13a8:	10bfe004 	addi	r2,r2,-128
    13ac:	d128d204 	addi	r4,gp,-23736
    13b0:	014000b4 	movhi	r5,2
    13b4:	297bcc04 	addi	r5,r5,-4304
    13b8:	100d883a 	mov	r6,r2
    13bc:	00022480 	call	2248 <sprintf>
    13c0:	0000c606 	br	16dc <changeRotor+0x418>
		} else if (rij == 2) {
    13c4:	d0a00517 	ldw	r2,-32748(gp)
    13c8:	10800098 	cmpnei	r2,r2,2
    13cc:	1000c31e 	bne	r2,zero,16dc <changeRotor+0x418>
			ringInstellingen[rotorNummer - 1]++;
    13d0:	d0a00317 	ldw	r2,-32756(gp)
    13d4:	10bfffc4 	addi	r2,r2,-1
    13d8:	00c000b4 	movhi	r3,2
    13dc:	18fe2404 	addi	r3,r3,-1904
    13e0:	1089883a 	add	r4,r2,r2
    13e4:	2109883a 	add	r4,r4,r4
    13e8:	1907883a 	add	r3,r3,r4
    13ec:	18c00017 	ldw	r3,0(r3)
    13f0:	19000044 	addi	r4,r3,1
    13f4:	00c000b4 	movhi	r3,2
    13f8:	18fe2404 	addi	r3,r3,-1904
    13fc:	1085883a 	add	r2,r2,r2
    1400:	1085883a 	add	r2,r2,r2
    1404:	1885883a 	add	r2,r3,r2
    1408:	11000015 	stw	r4,0(r2)
			if (ringInstellingen[rotorNummer - 1] > 26) {
    140c:	d0a00317 	ldw	r2,-32756(gp)
    1410:	10ffffc4 	addi	r3,r2,-1
    1414:	008000b4 	movhi	r2,2
    1418:	10be2404 	addi	r2,r2,-1904
    141c:	18c7883a 	add	r3,r3,r3
    1420:	18c7883a 	add	r3,r3,r3
    1424:	10c5883a 	add	r2,r2,r3
    1428:	10800017 	ldw	r2,0(r2)
    142c:	108006d0 	cmplti	r2,r2,27
    1430:	1000091e 	bne	r2,zero,1458 <changeRotor+0x194>
				ringInstellingen[rotorNummer - 1] = 1;
    1434:	d0a00317 	ldw	r2,-32756(gp)
    1438:	10ffffc4 	addi	r3,r2,-1
    143c:	008000b4 	movhi	r2,2
    1440:	10be2404 	addi	r2,r2,-1904
    1444:	18c7883a 	add	r3,r3,r3
    1448:	18c7883a 	add	r3,r3,r3
    144c:	10c5883a 	add	r2,r2,r3
    1450:	00c00044 	movi	r3,1
    1454:	10c00015 	stw	r3,0(r2)
			}
			sprintf(tempo, "changeRingCfg %d%c/", 5 - rotorNummer,
    1458:	d0a00317 	ldw	r2,-32756(gp)
    145c:	00c00144 	movi	r3,5
    1460:	188dc83a 	sub	r6,r3,r2
					ringInstellingen[rotorNummer - 1] + 'a' - 1);
    1464:	d0a00317 	ldw	r2,-32756(gp)
    1468:	10ffffc4 	addi	r3,r2,-1
    146c:	008000b4 	movhi	r2,2
    1470:	10be2404 	addi	r2,r2,-1904
    1474:	18c7883a 	add	r3,r3,r3
    1478:	18c7883a 	add	r3,r3,r3
    147c:	10c5883a 	add	r2,r2,r3
    1480:	10800017 	ldw	r2,0(r2)
		} else if (rij == 2) {
			ringInstellingen[rotorNummer - 1]++;
			if (ringInstellingen[rotorNummer - 1] > 26) {
				ringInstellingen[rotorNummer - 1] = 1;
			}
			sprintf(tempo, "changeRingCfg %d%c/", 5 - rotorNummer,
    1484:	10801804 	addi	r2,r2,96
    1488:	e13ff704 	addi	r4,fp,-36
    148c:	014000b4 	movhi	r5,2
    1490:	297bdd04 	addi	r5,r5,-4236
    1494:	100f883a 	mov	r7,r2
    1498:	00022480 	call	2248 <sprintf>
					ringInstellingen[rotorNummer - 1] + 'a' - 1);
			sendCommand(tempo);
    149c:	e13ff704 	addi	r4,fp,-36
    14a0:	000035c0 	call	35c <sendCommand>
			printf("%s\n", tempo);
    14a4:	e13ff704 	addi	r4,fp,-36
    14a8:	00021dc0 	call	21dc <puts>
			sprintf(d, "%d", ringInstellingen[rotorNummer - 1]);
    14ac:	d0a00317 	ldw	r2,-32756(gp)
    14b0:	10ffffc4 	addi	r3,r2,-1
    14b4:	008000b4 	movhi	r2,2
    14b8:	10be2404 	addi	r2,r2,-1904
    14bc:	18c7883a 	add	r3,r3,r3
    14c0:	18c7883a 	add	r3,r3,r3
    14c4:	10c5883a 	add	r2,r2,r3
    14c8:	10800017 	ldw	r2,0(r2)
    14cc:	d128ca84 	addi	r4,gp,-23766
    14d0:	014000b4 	movhi	r5,2
    14d4:	297be204 	addi	r5,r5,-4216
    14d8:	100d883a 	mov	r6,r2
    14dc:	00022480 	call	2248 <sprintf>
    14e0:	00007e06 	br	16dc <changeRotor+0x418>
		}
	} else if (knop == DOWN) {
    14e4:	e0bfff07 	ldb	r2,-4(fp)
    14e8:	10800d18 	cmpnei	r2,r2,52
    14ec:	10007b1e 	bne	r2,zero,16dc <changeRotor+0x418>
		if (rij == 1) {
    14f0:	d0a00517 	ldw	r2,-32748(gp)
    14f4:	10800058 	cmpnei	r2,r2,1
    14f8:	1000321e 	bne	r2,zero,15c4 <changeRotor+0x300>
			rotorStanden[rotorNummer - 1]--;
    14fc:	d0a00317 	ldw	r2,-32756(gp)
    1500:	10bfffc4 	addi	r2,r2,-1
    1504:	d0e00604 	addi	r3,gp,-32744
    1508:	10c7883a 	add	r3,r2,r3
    150c:	18c00003 	ldbu	r3,0(r3)
    1510:	18ffffc4 	addi	r3,r3,-1
    1514:	1809883a 	mov	r4,r3
    1518:	d0e00604 	addi	r3,gp,-32744
    151c:	10c5883a 	add	r2,r2,r3
    1520:	11000005 	stb	r4,0(r2)
			if (rotorStanden[rotorNummer - 1] < 'a') {
    1524:	d0a00317 	ldw	r2,-32756(gp)
    1528:	10ffffc4 	addi	r3,r2,-1
    152c:	d0a00604 	addi	r2,gp,-32744
    1530:	1885883a 	add	r2,r3,r2
    1534:	10800003 	ldbu	r2,0(r2)
    1538:	10803fcc 	andi	r2,r2,255
    153c:	1080201c 	xori	r2,r2,128
    1540:	10bfe004 	addi	r2,r2,-128
    1544:	10801848 	cmpgei	r2,r2,97
    1548:	1000061e 	bne	r2,zero,1564 <changeRotor+0x2a0>
				rotorStanden[rotorNummer - 1] = 'z';
    154c:	d0a00317 	ldw	r2,-32756(gp)
    1550:	10ffffc4 	addi	r3,r2,-1
    1554:	d0a00604 	addi	r2,gp,-32744
    1558:	1885883a 	add	r2,r3,r2
    155c:	00c01e84 	movi	r3,122
    1560:	10c00005 	stb	r3,0(r2)
			}
			sprintf(tempo, "rotateBackwards %d/", 5 - rotorNummer);
    1564:	d0a00317 	ldw	r2,-32756(gp)
    1568:	00c00144 	movi	r3,5
    156c:	1885c83a 	sub	r2,r3,r2
    1570:	e13ff704 	addi	r4,fp,-36
    1574:	014000b4 	movhi	r5,2
    1578:	297be304 	addi	r5,r5,-4212
    157c:	100d883a 	mov	r6,r2
    1580:	00022480 	call	2248 <sprintf>
			sendCommand(tempo);
    1584:	e13ff704 	addi	r4,fp,-36
    1588:	000035c0 	call	35c <sendCommand>
			sprintf(e, "%c", rotorStanden[rotorNummer - 1]);
    158c:	d0a00317 	ldw	r2,-32756(gp)
    1590:	10ffffc4 	addi	r3,r2,-1
    1594:	d0a00604 	addi	r2,gp,-32744
    1598:	1885883a 	add	r2,r3,r2
    159c:	10800003 	ldbu	r2,0(r2)
    15a0:	10803fcc 	andi	r2,r2,255
    15a4:	1080201c 	xori	r2,r2,128
    15a8:	10bfe004 	addi	r2,r2,-128
    15ac:	d128d204 	addi	r4,gp,-23736
    15b0:	014000b4 	movhi	r5,2
    15b4:	297bcc04 	addi	r5,r5,-4304
    15b8:	100d883a 	mov	r6,r2
    15bc:	00022480 	call	2248 <sprintf>
    15c0:	00004606 	br	16dc <changeRotor+0x418>
		} else if (rij == 2) {
    15c4:	d0a00517 	ldw	r2,-32748(gp)
    15c8:	10800098 	cmpnei	r2,r2,2
    15cc:	1000431e 	bne	r2,zero,16dc <changeRotor+0x418>
			ringInstellingen[rotorNummer - 1]--;
    15d0:	d0a00317 	ldw	r2,-32756(gp)
    15d4:	10bfffc4 	addi	r2,r2,-1
    15d8:	00c000b4 	movhi	r3,2
    15dc:	18fe2404 	addi	r3,r3,-1904
    15e0:	1089883a 	add	r4,r2,r2
    15e4:	2109883a 	add	r4,r4,r4
    15e8:	1907883a 	add	r3,r3,r4
    15ec:	18c00017 	ldw	r3,0(r3)
    15f0:	193fffc4 	addi	r4,r3,-1
    15f4:	00c000b4 	movhi	r3,2
    15f8:	18fe2404 	addi	r3,r3,-1904
    15fc:	1085883a 	add	r2,r2,r2
    1600:	1085883a 	add	r2,r2,r2
    1604:	1885883a 	add	r2,r3,r2
    1608:	11000015 	stw	r4,0(r2)
			if (ringInstellingen[rotorNummer - 1] < 1) {
    160c:	d0a00317 	ldw	r2,-32756(gp)
    1610:	10ffffc4 	addi	r3,r2,-1
    1614:	008000b4 	movhi	r2,2
    1618:	10be2404 	addi	r2,r2,-1904
    161c:	18c7883a 	add	r3,r3,r3
    1620:	18c7883a 	add	r3,r3,r3
    1624:	10c5883a 	add	r2,r2,r3
    1628:	10800017 	ldw	r2,0(r2)
    162c:	00800916 	blt	zero,r2,1654 <changeRotor+0x390>
				ringInstellingen[rotorNummer - 1] = 26;
    1630:	d0a00317 	ldw	r2,-32756(gp)
    1634:	10ffffc4 	addi	r3,r2,-1
    1638:	008000b4 	movhi	r2,2
    163c:	10be2404 	addi	r2,r2,-1904
    1640:	18c7883a 	add	r3,r3,r3
    1644:	18c7883a 	add	r3,r3,r3
    1648:	10c5883a 	add	r2,r2,r3
    164c:	00c00684 	movi	r3,26
    1650:	10c00015 	stw	r3,0(r2)
			}
			sprintf(tempo, "changeRingCfg %d%c/", 5 - rotorNummer,
    1654:	d0a00317 	ldw	r2,-32756(gp)
    1658:	00c00144 	movi	r3,5
    165c:	188dc83a 	sub	r6,r3,r2
					ringInstellingen[rotorNummer - 1] + 'a' - 1);
    1660:	d0a00317 	ldw	r2,-32756(gp)
    1664:	10ffffc4 	addi	r3,r2,-1
    1668:	008000b4 	movhi	r2,2
    166c:	10be2404 	addi	r2,r2,-1904
    1670:	18c7883a 	add	r3,r3,r3
    1674:	18c7883a 	add	r3,r3,r3
    1678:	10c5883a 	add	r2,r2,r3
    167c:	10800017 	ldw	r2,0(r2)
		} else if (rij == 2) {
			ringInstellingen[rotorNummer - 1]--;
			if (ringInstellingen[rotorNummer - 1] < 1) {
				ringInstellingen[rotorNummer - 1] = 26;
			}
			sprintf(tempo, "changeRingCfg %d%c/", 5 - rotorNummer,
    1680:	10801804 	addi	r2,r2,96
    1684:	e13ff704 	addi	r4,fp,-36
    1688:	014000b4 	movhi	r5,2
    168c:	297bdd04 	addi	r5,r5,-4236
    1690:	100f883a 	mov	r7,r2
    1694:	00022480 	call	2248 <sprintf>
					ringInstellingen[rotorNummer - 1] + 'a' - 1);
			sendCommand(tempo);
    1698:	e13ff704 	addi	r4,fp,-36
    169c:	000035c0 	call	35c <sendCommand>
			printf("%s\n", tempo);
    16a0:	e13ff704 	addi	r4,fp,-36
    16a4:	00021dc0 	call	21dc <puts>
			sprintf(d, "%d", ringInstellingen[rotorNummer - 1]);
    16a8:	d0a00317 	ldw	r2,-32756(gp)
    16ac:	10ffffc4 	addi	r3,r2,-1
    16b0:	008000b4 	movhi	r2,2
    16b4:	10be2404 	addi	r2,r2,-1904
    16b8:	18c7883a 	add	r3,r3,r3
    16bc:	18c7883a 	add	r3,r3,r3
    16c0:	10c5883a 	add	r2,r2,r3
    16c4:	10800017 	ldw	r2,0(r2)
    16c8:	d128ca84 	addi	r4,gp,-23766
    16cc:	014000b4 	movhi	r5,2
    16d0:	297be204 	addi	r5,r5,-4216
    16d4:	100d883a 	mov	r6,r2
    16d8:	00022480 	call	2248 <sprintf>
//	sprintf(tempor, "getRotorLetter 1/");
//	sendCommand(tempor);
//	getCommand();
//	//getLetter("getRotorLetter 1", command[0]);
//	printf("rotorLetter: %c\n", command[0]);
	OSTimeDlyHMSM(0, 0, 0, 75);
    16dc:	0009883a 	mov	r4,zero
    16e0:	000b883a 	mov	r5,zero
    16e4:	000d883a 	mov	r6,zero
    16e8:	01c012c4 	movi	r7,75
    16ec:	001a7140 	call	1a714 <OSTimeDlyHMSM>
}
    16f0:	e037883a 	mov	sp,fp
    16f4:	dfc00117 	ldw	ra,4(sp)
    16f8:	df000017 	ldw	fp,0(sp)
    16fc:	dec00204 	addi	sp,sp,8
    1700:	f800283a 	ret

00001704 <select>:

void select(char c) {
    1704:	defffc04 	addi	sp,sp,-16
    1708:	dfc00315 	stw	ra,12(sp)
    170c:	df000215 	stw	fp,8(sp)
    1710:	df000204 	addi	fp,sp,8
    1714:	2005883a 	mov	r2,r4
    1718:	e0bfff05 	stb	r2,-4(fp)
	arrowTemp[0] = c;
    171c:	e0bfff03 	ldbu	r2,-4(fp)
    1720:	d0a8d005 	stb	r2,-23744(gp)
	arrowTemp[1] = '\0';
    1724:	d0a8d044 	addi	r2,gp,-23743
    1728:	10000005 	stb	zero,0(r2)

	if (rotorNummer > 4) {
    172c:	d0a00317 	ldw	r2,-32756(gp)
    1730:	10800150 	cmplti	r2,r2,5
    1734:	1000021e 	bne	r2,zero,1740 <select+0x3c>
		rotorNummer = 4;
    1738:	00800104 	movi	r2,4
    173c:	d0a00315 	stw	r2,-32756(gp)
	}

	if (rotorNummer < 1) {
    1740:	d0a00317 	ldw	r2,-32756(gp)
    1744:	00800216 	blt	zero,r2,1750 <select+0x4c>
		rotorNummer = 1;
    1748:	00800044 	movi	r2,1
    174c:	d0a00315 	stw	r2,-32756(gp)
	}

	if (arrowTemp[0] == TAB) {
    1750:	d0a8d003 	ldbu	r2,-23744(gp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	10800d58 	cmpnei	r2,r2,53
    1764:	1000291e 	bne	r2,zero,180c <select+0x108>
		setX();
    1768:	0001a300 	call	1a30 <setX>
		if (rij == 1) {
    176c:	d0a00517 	ldw	r2,-32748(gp)
    1770:	10800058 	cmpnei	r2,r2,1
    1774:	1000131e 	bne	r2,zero,17c4 <select+0xc0>
			rij = 2;
    1778:	00800084 	movi	r2,2
    177c:	d0a00515 	stw	r2,-32748(gp)
			VGA_box(x1, 180, x2, 200, ROTOR);
    1780:	d128ce17 	ldw	r4,-23752(gp)
    1784:	d0e8c717 	ldw	r3,-23780(gp)
    1788:	00ab77c4 	movi	r2,-21025
    178c:	d8800015 	stw	r2,0(sp)
    1790:	01402d04 	movi	r5,180
    1794:	180d883a 	mov	r6,r3
    1798:	01c03204 	movi	r7,200
    179c:	0000f240 	call	f24 <VGA_box>
			VGA_box(x1, 200, x2, 220, ROTOR_SELECT);
    17a0:	d128ce17 	ldw	r4,-23752(gp)
    17a4:	d0e8c717 	ldw	r3,-23780(gp)
    17a8:	009407c4 	movi	r2,20511
    17ac:	d8800015 	stw	r2,0(sp)
    17b0:	01403204 	movi	r5,200
    17b4:	180d883a 	mov	r6,r3
    17b8:	01c03704 	movi	r7,220
    17bc:	0000f240 	call	f24 <VGA_box>
    17c0:	00001206 	br	180c <select+0x108>
		} else {
			rij = 1;
    17c4:	00800044 	movi	r2,1
    17c8:	d0a00515 	stw	r2,-32748(gp)
			VGA_box(x1, 180, x2, 200, ROTOR_SELECT);
    17cc:	d128ce17 	ldw	r4,-23752(gp)
    17d0:	d0e8c717 	ldw	r3,-23780(gp)
    17d4:	009407c4 	movi	r2,20511
    17d8:	d8800015 	stw	r2,0(sp)
    17dc:	01402d04 	movi	r5,180
    17e0:	180d883a 	mov	r6,r3
    17e4:	01c03204 	movi	r7,200
    17e8:	0000f240 	call	f24 <VGA_box>
			VGA_box(x1, 200, x2, 220, ROTOR);
    17ec:	d128ce17 	ldw	r4,-23752(gp)
    17f0:	d0e8c717 	ldw	r3,-23780(gp)
    17f4:	00ab77c4 	movi	r2,-21025
    17f8:	d8800015 	stw	r2,0(sp)
    17fc:	01403204 	movi	r5,200
    1800:	180d883a 	mov	r6,r3
    1804:	01c03704 	movi	r7,220
    1808:	0000f240 	call	f24 <VGA_box>
		}
	}
	if (arrowTemp[0] == UP) {
    180c:	d0a8d003 	ldbu	r2,-23744(gp)
    1810:	10803fcc 	andi	r2,r2,255
    1814:	1080201c 	xori	r2,r2,128
    1818:	10bfe004 	addi	r2,r2,-128
    181c:	10800c58 	cmpnei	r2,r2,49
    1820:	1000031e 	bne	r2,zero,1830 <select+0x12c>
		changeRotor(UP);
    1824:	01000c44 	movi	r4,49
    1828:	00012c40 	call	12c4 <changeRotor>
    182c:	00007b06 	br	1a1c <select+0x318>
	} else if (arrowTemp[0] == DOWN) {
    1830:	d0a8d003 	ldbu	r2,-23744(gp)
    1834:	10803fcc 	andi	r2,r2,255
    1838:	1080201c 	xori	r2,r2,128
    183c:	10bfe004 	addi	r2,r2,-128
    1840:	10800d18 	cmpnei	r2,r2,52
    1844:	1000031e 	bne	r2,zero,1854 <select+0x150>
		changeRotor(DOWN);
    1848:	01000d04 	movi	r4,52
    184c:	00012c40 	call	12c4 <changeRotor>
    1850:	00007206 	br	1a1c <select+0x318>
	} else if (arrowTemp[0] == LEFT) {
    1854:	d0a8d003 	ldbu	r2,-23744(gp)
    1858:	10803fcc 	andi	r2,r2,255
    185c:	1080201c 	xori	r2,r2,128
    1860:	10bfe004 	addi	r2,r2,-128
    1864:	10800cd8 	cmpnei	r2,r2,51
    1868:	1000321e 	bne	r2,zero,1934 <select+0x230>
		if (rotorNummer < 1) {
    186c:	d0a00317 	ldw	r2,-32756(gp)
    1870:	00800316 	blt	zero,r2,1880 <select+0x17c>
			rotorNummer = 1;
    1874:	00800044 	movi	r2,1
    1878:	d0a00315 	stw	r2,-32756(gp)
    187c:	00006706 	br	1a1c <select+0x318>
		} else if (rotorNummer >= 1) {
    1880:	d0a00317 	ldw	r2,-32756(gp)
    1884:	0080650e 	bge	zero,r2,1a1c <select+0x318>
			rotorNummer--;
    1888:	d0a00317 	ldw	r2,-32756(gp)
    188c:	10bfffc4 	addi	r2,r2,-1
    1890:	d0a00315 	stw	r2,-32756(gp)
			if (rotorNummer >= 1) {
    1894:	d0a00317 	ldw	r2,-32756(gp)
    1898:	0080600e 	bge	zero,r2,1a1c <select+0x318>
				setX();
    189c:	0001a300 	call	1a30 <setX>
				if (rij == 1) {
    18a0:	d0a00517 	ldw	r2,-32748(gp)
    18a4:	10800058 	cmpnei	r2,r2,1
    18a8:	1000111e 	bne	r2,zero,18f0 <select+0x1ec>
					VGA_box(x1, 180, x2, 200, ROTOR_SELECT);
    18ac:	d128ce17 	ldw	r4,-23752(gp)
    18b0:	d0e8c717 	ldw	r3,-23780(gp)
    18b4:	009407c4 	movi	r2,20511
    18b8:	d8800015 	stw	r2,0(sp)
    18bc:	01402d04 	movi	r5,180
    18c0:	180d883a 	mov	r6,r3
    18c4:	01c03204 	movi	r7,200
    18c8:	0000f240 	call	f24 <VGA_box>
					VGA_box(x3, 180, x4, 200, ROTOR);
    18cc:	d128cd17 	ldw	r4,-23756(gp)
    18d0:	d0e8c817 	ldw	r3,-23776(gp)
    18d4:	00ab77c4 	movi	r2,-21025
    18d8:	d8800015 	stw	r2,0(sp)
    18dc:	01402d04 	movi	r5,180
    18e0:	180d883a 	mov	r6,r3
    18e4:	01c03204 	movi	r7,200
    18e8:	0000f240 	call	f24 <VGA_box>
    18ec:	00004b06 	br	1a1c <select+0x318>
				} else {
					VGA_box(x1, 200, x2, 220, ROTOR_SELECT);
    18f0:	d128ce17 	ldw	r4,-23752(gp)
    18f4:	d0e8c717 	ldw	r3,-23780(gp)
    18f8:	009407c4 	movi	r2,20511
    18fc:	d8800015 	stw	r2,0(sp)
    1900:	01403204 	movi	r5,200
    1904:	180d883a 	mov	r6,r3
    1908:	01c03704 	movi	r7,220
    190c:	0000f240 	call	f24 <VGA_box>
					VGA_box(x3, 200, x4, 220, ROTOR);
    1910:	d128cd17 	ldw	r4,-23756(gp)
    1914:	d0e8c817 	ldw	r3,-23776(gp)
    1918:	00ab77c4 	movi	r2,-21025
    191c:	d8800015 	stw	r2,0(sp)
    1920:	01403204 	movi	r5,200
    1924:	180d883a 	mov	r6,r3
    1928:	01c03704 	movi	r7,220
    192c:	0000f240 	call	f24 <VGA_box>
    1930:	00003a06 	br	1a1c <select+0x318>
				}
			}
		}
	} else if (arrowTemp[0] == RIGHT) {
    1934:	d0a8d003 	ldbu	r2,-23744(gp)
    1938:	10803fcc 	andi	r2,r2,255
    193c:	1080201c 	xori	r2,r2,128
    1940:	10bfe004 	addi	r2,r2,-128
    1944:	10800c98 	cmpnei	r2,r2,50
    1948:	1000341e 	bne	r2,zero,1a1c <select+0x318>
		if (rotorNummer > 4) {
    194c:	d0a00317 	ldw	r2,-32756(gp)
    1950:	10800150 	cmplti	r2,r2,5
    1954:	1000031e 	bne	r2,zero,1964 <select+0x260>
			rotorNummer = 4;
    1958:	00800104 	movi	r2,4
    195c:	d0a00315 	stw	r2,-32756(gp)
    1960:	00002e06 	br	1a1c <select+0x318>
		} else if (rotorNummer <= 4) {
    1964:	d0a00317 	ldw	r2,-32756(gp)
    1968:	10800148 	cmpgei	r2,r2,5
    196c:	10002b1e 	bne	r2,zero,1a1c <select+0x318>
			rotorNummer++;
    1970:	d0a00317 	ldw	r2,-32756(gp)
    1974:	10800044 	addi	r2,r2,1
    1978:	d0a00315 	stw	r2,-32756(gp)
			if (rotorNummer < 5) {
    197c:	d0a00317 	ldw	r2,-32756(gp)
    1980:	10800148 	cmpgei	r2,r2,5
    1984:	1000251e 	bne	r2,zero,1a1c <select+0x318>
				setX();
    1988:	0001a300 	call	1a30 <setX>
				if (rij == 1) {
    198c:	d0a00517 	ldw	r2,-32748(gp)
    1990:	10800058 	cmpnei	r2,r2,1
    1994:	1000111e 	bne	r2,zero,19dc <select+0x2d8>
					VGA_box(x5, 180, x6, 200, ROTOR);
    1998:	d128c517 	ldw	r4,-23788(gp)
    199c:	d0e8c017 	ldw	r3,-23808(gp)
    19a0:	00ab77c4 	movi	r2,-21025
    19a4:	d8800015 	stw	r2,0(sp)
    19a8:	01402d04 	movi	r5,180
    19ac:	180d883a 	mov	r6,r3
    19b0:	01c03204 	movi	r7,200
    19b4:	0000f240 	call	f24 <VGA_box>
					VGA_box(x1, 180, x2, 200, ROTOR_SELECT);
    19b8:	d128ce17 	ldw	r4,-23752(gp)
    19bc:	d0e8c717 	ldw	r3,-23780(gp)
    19c0:	009407c4 	movi	r2,20511
    19c4:	d8800015 	stw	r2,0(sp)
    19c8:	01402d04 	movi	r5,180
    19cc:	180d883a 	mov	r6,r3
    19d0:	01c03204 	movi	r7,200
    19d4:	0000f240 	call	f24 <VGA_box>
    19d8:	00001006 	br	1a1c <select+0x318>
				} else {
					VGA_box(x5, 200, x6, 220, ROTOR);
    19dc:	d128c517 	ldw	r4,-23788(gp)
    19e0:	d0e8c017 	ldw	r3,-23808(gp)
    19e4:	00ab77c4 	movi	r2,-21025
    19e8:	d8800015 	stw	r2,0(sp)
    19ec:	01403204 	movi	r5,200
    19f0:	180d883a 	mov	r6,r3
    19f4:	01c03704 	movi	r7,220
    19f8:	0000f240 	call	f24 <VGA_box>
					VGA_box(x1, 200, x2, 220, ROTOR_SELECT);
    19fc:	d128ce17 	ldw	r4,-23752(gp)
    1a00:	d0e8c717 	ldw	r3,-23780(gp)
    1a04:	009407c4 	movi	r2,20511
    1a08:	d8800015 	stw	r2,0(sp)
    1a0c:	01403204 	movi	r5,200
    1a10:	180d883a 	mov	r6,r3
    1a14:	01c03704 	movi	r7,220
    1a18:	0000f240 	call	f24 <VGA_box>
				}
			}
		}
	}
}
    1a1c:	e037883a 	mov	sp,fp
    1a20:	dfc00117 	ldw	ra,4(sp)
    1a24:	df000017 	ldw	fp,0(sp)
    1a28:	dec00204 	addi	sp,sp,8
    1a2c:	f800283a 	ret

00001a30 <setX>:

void setX() {
    1a30:	deffff04 	addi	sp,sp,-4
    1a34:	df000015 	stw	fp,0(sp)
    1a38:	d839883a 	mov	fp,sp
	x1 = (80 * rotorNummer) - 60;
    1a3c:	d0a00317 	ldw	r2,-32756(gp)
    1a40:	10801424 	muli	r2,r2,80
    1a44:	10bff104 	addi	r2,r2,-60
    1a48:	d0a8ce15 	stw	r2,-23752(gp)
	x2 = (40 * rotorNummer) + 20 + (40 * (rotorNummer - 1));
    1a4c:	d0a00317 	ldw	r2,-32756(gp)
    1a50:	10800a24 	muli	r2,r2,40
    1a54:	10c00504 	addi	r3,r2,20
    1a58:	d0a00317 	ldw	r2,-32756(gp)
    1a5c:	10bfffc4 	addi	r2,r2,-1
    1a60:	10800a24 	muli	r2,r2,40
    1a64:	1885883a 	add	r2,r3,r2
    1a68:	d0a8c715 	stw	r2,-23780(gp)

	x3 = (80 * (rotorNummer + 1)) - 60;
    1a6c:	d0a00317 	ldw	r2,-32756(gp)
    1a70:	10800044 	addi	r2,r2,1
    1a74:	10801424 	muli	r2,r2,80
    1a78:	10bff104 	addi	r2,r2,-60
    1a7c:	d0a8cd15 	stw	r2,-23756(gp)
	x4 = (40 * (rotorNummer + 1)) + 20 + (40 * rotorNummer);
    1a80:	d0a00317 	ldw	r2,-32756(gp)
    1a84:	10800044 	addi	r2,r2,1
    1a88:	10800a24 	muli	r2,r2,40
    1a8c:	10c00504 	addi	r3,r2,20
    1a90:	d0a00317 	ldw	r2,-32756(gp)
    1a94:	10800a24 	muli	r2,r2,40
    1a98:	1885883a 	add	r2,r3,r2
    1a9c:	d0a8c815 	stw	r2,-23776(gp)

	x5 = (80 * (rotorNummer - 1)) - 60;
    1aa0:	d0a00317 	ldw	r2,-32756(gp)
    1aa4:	10bfffc4 	addi	r2,r2,-1
    1aa8:	10801424 	muli	r2,r2,80
    1aac:	10bff104 	addi	r2,r2,-60
    1ab0:	d0a8c515 	stw	r2,-23788(gp)
	x6 = (40 * (rotorNummer - 1)) + 20 + (40 * (rotorNummer - 2));
    1ab4:	d0a00317 	ldw	r2,-32756(gp)
    1ab8:	10bfffc4 	addi	r2,r2,-1
    1abc:	10800a24 	muli	r2,r2,40
    1ac0:	10c00504 	addi	r3,r2,20
    1ac4:	d0a00317 	ldw	r2,-32756(gp)
    1ac8:	10bfff84 	addi	r2,r2,-2
    1acc:	10800a24 	muli	r2,r2,40
    1ad0:	1885883a 	add	r2,r3,r2
    1ad4:	d0a8c015 	stw	r2,-23808(gp)
}
    1ad8:	e037883a 	mov	sp,fp
    1adc:	df000017 	ldw	fp,0(sp)
    1ae0:	dec00104 	addi	sp,sp,4
    1ae4:	f800283a 	ret

00001ae8 <clearScreen>:

void clearScreen() {
    1ae8:	defffd04 	addi	sp,sp,-12
    1aec:	dfc00215 	stw	ra,8(sp)
    1af0:	df000115 	stw	fp,4(sp)
    1af4:	df000104 	addi	fp,sp,4
	int i;
	for (i = 2; i <= 44; i++) {
    1af8:	00800084 	movi	r2,2
    1afc:	e0bfff15 	stw	r2,-4(fp)
    1b00:	00000806 	br	1b24 <clearScreen+0x3c>
		VGA_text(0, i,
    1b04:	0009883a 	mov	r4,zero
    1b08:	e17fff17 	ldw	r5,-4(fp)
    1b0c:	018000b4 	movhi	r6,2
    1b10:	31bbe804 	addi	r6,r6,-4192
    1b14:	0000fcc0 	call	fcc <VGA_text>
	x6 = (40 * (rotorNummer - 1)) + 20 + (40 * (rotorNummer - 2));
}

void clearScreen() {
	int i;
	for (i = 2; i <= 44; i++) {
    1b18:	e0bfff17 	ldw	r2,-4(fp)
    1b1c:	10800044 	addi	r2,r2,1
    1b20:	e0bfff15 	stw	r2,-4(fp)
    1b24:	e0bfff17 	ldw	r2,-4(fp)
    1b28:	10800b50 	cmplti	r2,r2,45
    1b2c:	103ff51e 	bne	r2,zero,1b04 <__alt_mem_Flash_flash_data+0xf4001b04>
		VGA_text(0, i,
				"                                                                                                        ");
	}
}
    1b30:	e037883a 	mov	sp,fp
    1b34:	dfc00117 	ldw	ra,4(sp)
    1b38:	df000017 	ldw	fp,0(sp)
    1b3c:	dec00204 	addi	sp,sp,8
    1b40:	f800283a 	ret

00001b44 <VGA_text_clear_all>:
void VGA_text_clear_all(char * character_buffer)
{
    1b44:	defffc04 	addi	sp,sp,-16
    1b48:	dfc00315 	stw	ra,12(sp)
    1b4c:	df000215 	stw	fp,8(sp)
    1b50:	df000204 	addi	fp,sp,8
    1b54:	e13fff15 	stw	r4,-4(fp)
	VGA_text_clear(character_buffer, 0, 0, 80, 59);
    1b58:	00800ec4 	movi	r2,59
    1b5c:	d8800015 	stw	r2,0(sp)
    1b60:	e13fff17 	ldw	r4,-4(fp)
    1b64:	000b883a 	mov	r5,zero
    1b68:	000d883a 	mov	r6,zero
    1b6c:	01c01404 	movi	r7,80
    1b70:	0001b880 	call	1b88 <VGA_text_clear>
}
    1b74:	e037883a 	mov	sp,fp
    1b78:	dfc00117 	ldw	ra,4(sp)
    1b7c:	df000017 	ldw	fp,0(sp)
    1b80:	dec00204 	addi	sp,sp,8
    1b84:	f800283a 	ret

00001b88 <VGA_text_clear>:
void VGA_text_clear(char * character_buffer, int x1, int y1, int x2, int y2)
{
    1b88:	defff804 	addi	sp,sp,-32
    1b8c:	df000715 	stw	fp,28(sp)
    1b90:	df000704 	addi	fp,sp,28
    1b94:	e13ffc15 	stw	r4,-16(fp)
    1b98:	e17ffd15 	stw	r5,-12(fp)
    1b9c:	e1bffe15 	stw	r6,-8(fp)
    1ba0:	e1ffff15 	stw	r7,-4(fp)
    int offset, row, col;

    /* assume that the text string fits on one line */
    for (row = y1; row <= y2; row++)
    1ba4:	e0bffe17 	ldw	r2,-8(fp)
    1ba8:	e0bff915 	stw	r2,-28(fp)
    1bac:	00001606 	br	1c08 <VGA_text_clear+0x80>
    {
        col = x1;
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	e0bffa15 	stw	r2,-24(fp)
        while (col <= x2)
    1bb8:	00000d06 	br	1bf0 <VGA_text_clear+0x68>
        {
            offset = (row << 7) + col;
    1bbc:	e0bff917 	ldw	r2,-28(fp)
    1bc0:	100691fa 	slli	r3,r2,7
    1bc4:	e0bffa17 	ldw	r2,-24(fp)
    1bc8:	1885883a 	add	r2,r3,r2
    1bcc:	e0bffb15 	stw	r2,-20(fp)
            *(character_buffer + offset) = ' '; // compute halfword address, set pixel
    1bd0:	e0bffb17 	ldw	r2,-20(fp)
    1bd4:	e0fffc17 	ldw	r3,-16(fp)
    1bd8:	1885883a 	add	r2,r3,r2
    1bdc:	00c00804 	movi	r3,32
    1be0:	10c00005 	stb	r3,0(r2)
            ++col;
    1be4:	e0bffa17 	ldw	r2,-24(fp)
    1be8:	10800044 	addi	r2,r2,1
    1bec:	e0bffa15 	stw	r2,-24(fp)

    /* assume that the text string fits on one line */
    for (row = y1; row <= y2; row++)
    {
        col = x1;
        while (col <= x2)
    1bf0:	e0bffa17 	ldw	r2,-24(fp)
    1bf4:	e0ffff17 	ldw	r3,-4(fp)
    1bf8:	18bff00e 	bge	r3,r2,1bbc <__alt_mem_Flash_flash_data+0xf4001bbc>
void VGA_text_clear(char * character_buffer, int x1, int y1, int x2, int y2)
{
    int offset, row, col;

    /* assume that the text string fits on one line */
    for (row = y1; row <= y2; row++)
    1bfc:	e0bff917 	ldw	r2,-28(fp)
    1c00:	10800044 	addi	r2,r2,1
    1c04:	e0bff915 	stw	r2,-28(fp)
    1c08:	e0bff917 	ldw	r2,-28(fp)
    1c0c:	e0c00117 	ldw	r3,4(fp)
    1c10:	18bfe70e 	bge	r3,r2,1bb0 <__alt_mem_Flash_flash_data+0xf4001bb0>
            offset = (row << 7) + col;
            *(character_buffer + offset) = ' '; // compute halfword address, set pixel
            ++col;
        }
    }
}
    1c14:	e037883a 	mov	sp,fp
    1c18:	df000017 	ldw	fp,0(sp)
    1c1c:	dec00104 	addi	sp,sp,4
    1c20:	f800283a 	ret

00001c24 <PS2>:

void PS2() {
    1c24:	defffe04 	addi	sp,sp,-8
    1c28:	dfc00115 	stw	ra,4(sp)
    1c2c:	df000015 	stw	fp,0(sp)
    1c30:	d839883a 	mov	fp,sp
	PS2_data = *(PS2_ptr);	// read the Data register in the PS/2 port
    1c34:	d0a00017 	ldw	r2,-32768(gp)
    1c38:	10800017 	ldw	r2,0(r2)
    1c3c:	d0a8c415 	stw	r2,-23792(gp)
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;	// extract the RAVAIL field
    1c40:	d0a8c417 	ldw	r2,-23792(gp)
    1c44:	1004d43a 	srli	r2,r2,16
    1c48:	d0a8bf15 	stw	r2,-23812(gp)
	if (RAVAIL > 0) {
    1c4c:	d0a8bf17 	ldw	r2,-23812(gp)
    1c50:	00800c0e 	bge	zero,r2,1c84 <PS2+0x60>

		byte1 = PS2_data & 0xFF;
    1c54:	d0a8c417 	ldw	r2,-23792(gp)
    1c58:	10803fcc 	andi	r2,r2,255
    1c5c:	d0a8c215 	stw	r2,-23800(gp)
		*PS2_ptr &= 0x00000000;
    1c60:	d0a00017 	ldw	r2,-32768(gp)
    1c64:	10800017 	ldw	r2,0(r2)
    1c68:	d0a00017 	ldw	r2,-32768(gp)
    1c6c:	10000015 	stw	zero,0(r2)

		OSTimeDlyHMSM(0, 0, 0, 10);
    1c70:	0009883a 	mov	r4,zero
    1c74:	000b883a 	mov	r5,zero
    1c78:	000d883a 	mov	r6,zero
    1c7c:	01c00284 	movi	r7,10
    1c80:	001a7140 	call	1a714 <OSTimeDlyHMSM>

	}
}
    1c84:	e037883a 	mov	sp,fp
    1c88:	dfc00117 	ldw	ra,4(sp)
    1c8c:	df000017 	ldw	fp,0(sp)
    1c90:	dec00204 	addi	sp,sp,8
    1c94:	f800283a 	ret

00001c98 <getKey>:

char getKey() {
    1c98:	defffd04 	addi	sp,sp,-12
    1c9c:	dfc00215 	stw	ra,8(sp)
    1ca0:	df000115 	stw	fp,4(sp)
    1ca4:	df000104 	addi	fp,sp,4
	if (byte1 != BREAKCODE && byte1 != 0xE0) {//checks if the received scancode is a BREAKCODE indicator, 0xF0
    1ca8:	d0a8c217 	ldw	r2,-23800(gp)
    1cac:	10803c20 	cmpeqi	r2,r2,240
    1cb0:	10000b1e 	bne	r2,zero,1ce0 <getKey+0x48>
    1cb4:	d0a8c217 	ldw	r2,-23800(gp)
    1cb8:	10803820 	cmpeqi	r2,r2,224
    1cbc:	1000081e 	bne	r2,zero,1ce0 <getKey+0x48>
		translate_make_code(KB_ASCII_MAKE_CODE, (char *) byte1, &ascii);//if not, translates it to ascii
    1cc0:	d0a8c217 	ldw	r2,-23800(gp)
    1cc4:	10803fcc 	andi	r2,r2,255
    1cc8:	01000044 	movi	r4,1
    1ccc:	100b883a 	mov	r5,r2
    1cd0:	018000f4 	movhi	r6,3
    1cd4:	31afd004 	addi	r6,r6,-16576
    1cd8:	001d7740 	call	1d774 <translate_make_code>
		byte1 = 0;
    1cdc:	d028c215 	stw	zero,-23800(gp)
	}

	char tempo = ascii[0];
    1ce0:	008000f4 	movhi	r2,3
    1ce4:	10afd004 	addi	r2,r2,-16576
    1ce8:	10800017 	ldw	r2,0(r2)
    1cec:	e0bfff05 	stb	r2,-4(fp)

	if (strcmp(ascii, "KP 8") == 0) {
    1cf0:	010000f4 	movhi	r4,3
    1cf4:	212fd004 	addi	r4,r4,-16576
    1cf8:	014000b4 	movhi	r5,2
    1cfc:	297c0304 	addi	r5,r5,-4084
    1d00:	00022b40 	call	22b4 <strcmp>
    1d04:	1000021e 	bne	r2,zero,1d10 <getKey+0x78>
		return UP;
    1d08:	00800c44 	movi	r2,49
    1d0c:	00005106 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 2") == 0) {
    1d10:	010000f4 	movhi	r4,3
    1d14:	212fd004 	addi	r4,r4,-16576
    1d18:	014000b4 	movhi	r5,2
    1d1c:	297c0504 	addi	r5,r5,-4076
    1d20:	00022b40 	call	22b4 <strcmp>
    1d24:	1000021e 	bne	r2,zero,1d30 <getKey+0x98>
		return DOWN;
    1d28:	00800d04 	movi	r2,52
    1d2c:	00004906 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 6") == 0) {
    1d30:	010000f4 	movhi	r4,3
    1d34:	212fd004 	addi	r4,r4,-16576
    1d38:	014000b4 	movhi	r5,2
    1d3c:	297c0704 	addi	r5,r5,-4068
    1d40:	00022b40 	call	22b4 <strcmp>
    1d44:	1000021e 	bne	r2,zero,1d50 <getKey+0xb8>
		return RIGHT;
    1d48:	00800c84 	movi	r2,50
    1d4c:	00004106 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "KP 4") == 0) {
    1d50:	010000f4 	movhi	r4,3
    1d54:	212fd004 	addi	r4,r4,-16576
    1d58:	014000b4 	movhi	r5,2
    1d5c:	297c0904 	addi	r5,r5,-4060
    1d60:	00022b40 	call	22b4 <strcmp>
    1d64:	1000021e 	bne	r2,zero,1d70 <getKey+0xd8>
		return LEFT;
    1d68:	00800cc4 	movi	r2,51
    1d6c:	00003906 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "ESC") == 0) {
    1d70:	010000f4 	movhi	r4,3
    1d74:	212fd004 	addi	r4,r4,-16576
    1d78:	014000b4 	movhi	r5,2
    1d7c:	297c0b04 	addi	r5,r5,-4052
    1d80:	00022b40 	call	22b4 <strcmp>
    1d84:	1000021e 	bne	r2,zero,1d90 <getKey+0xf8>
		return ESC;
    1d88:	00800e04 	movi	r2,56
    1d8c:	00003106 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "BKSP") == 0) {
    1d90:	010000f4 	movhi	r4,3
    1d94:	212fd004 	addi	r4,r4,-16576
    1d98:	014000b4 	movhi	r5,2
    1d9c:	297c0c04 	addi	r5,r5,-4048
    1da0:	00022b40 	call	22b4 <strcmp>
    1da4:	1000021e 	bne	r2,zero,1db0 <getKey+0x118>
		return BKSP;
    1da8:	00800dc4 	movi	r2,55
    1dac:	00002906 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "SPACE") == 0) {
    1db0:	010000f4 	movhi	r4,3
    1db4:	212fd004 	addi	r4,r4,-16576
    1db8:	014000b4 	movhi	r5,2
    1dbc:	297c0e04 	addi	r5,r5,-4040
    1dc0:	00022b40 	call	22b4 <strcmp>
    1dc4:	1000021e 	bne	r2,zero,1dd0 <getKey+0x138>
		return SPACE;
    1dc8:	00800d84 	movi	r2,54
    1dcc:	00002106 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "ENTER") == 0) {
    1dd0:	010000f4 	movhi	r4,3
    1dd4:	212fd004 	addi	r4,r4,-16576
    1dd8:	014000b4 	movhi	r5,2
    1ddc:	297c1004 	addi	r5,r5,-4032
    1de0:	00022b40 	call	22b4 <strcmp>
    1de4:	1000021e 	bne	r2,zero,1df0 <getKey+0x158>
		return ENTER;
    1de8:	00800e44 	movi	r2,57
    1dec:	00001906 	br	1e54 <getKey+0x1bc>
	} else if (strcmp(ascii, "TAB") == 0) {
    1df0:	010000f4 	movhi	r4,3
    1df4:	212fd004 	addi	r4,r4,-16576
    1df8:	014000b4 	movhi	r5,2
    1dfc:	297c1204 	addi	r5,r5,-4024
    1e00:	00022b40 	call	22b4 <strcmp>
    1e04:	1000021e 	bne	r2,zero,1e10 <getKey+0x178>
		return TAB;
    1e08:	00800d44 	movi	r2,53
    1e0c:	00001106 	br	1e54 <getKey+0x1bc>
	} else if ((tempo >= 'A' && tempo <= 'Z')) {//checks wether or not the received byte is a letter
    1e10:	e0bfff07 	ldb	r2,-4(fp)
    1e14:	10801050 	cmplti	r2,r2,65
    1e18:	10000d1e 	bne	r2,zero,1e50 <getKey+0x1b8>
    1e1c:	e0bfff07 	ldb	r2,-4(fp)
    1e20:	108016c8 	cmpgei	r2,r2,91
    1e24:	10000a1e 	bne	r2,zero,1e50 <getKey+0x1b8>
		if (strlen(ascii) == 1) {
    1e28:	010000f4 	movhi	r4,3
    1e2c:	212fd004 	addi	r4,r4,-16576
    1e30:	00023e80 	call	23e8 <strlen>
    1e34:	10800058 	cmpnei	r2,r2,1
    1e38:	1000051e 	bne	r2,zero,1e50 <getKey+0x1b8>
			tempo = tempo + 32;	//makes it a small letter instead of a capital
    1e3c:	e0bfff03 	ldbu	r2,-4(fp)
    1e40:	10800804 	addi	r2,r2,32
    1e44:	e0bfff05 	stb	r2,-4(fp)
			return tempo;							//returns the character
    1e48:	e0bfff03 	ldbu	r2,-4(fp)
    1e4c:	00000106 	br	1e54 <getKey+0x1bc>
		}
	}
	return 0;									// returns null
    1e50:	0005883a 	mov	r2,zero
}
    1e54:	e037883a 	mov	sp,fp
    1e58:	dfc00117 	ldw	ra,4(sp)
    1e5c:	df000017 	ldw	fp,0(sp)
    1e60:	dec00204 	addi	sp,sp,8
    1e64:	f800283a 	ret

00001e68 <printRinginstelling>:

void printRinginstelling(char c[2], int rotor) { //d
    1e68:	defffb04 	addi	sp,sp,-20
    1e6c:	dfc00415 	stw	ra,16(sp)
    1e70:	df000315 	stw	fp,12(sp)
    1e74:	df000304 	addi	fp,sp,12
    1e78:	e13ffe15 	stw	r4,-8(fp)
    1e7c:	e17fff15 	stw	r5,-4(fp)
	int x1;
	x1 = (20 * (rotor - 1)) + 10;
    1e80:	e0bfff17 	ldw	r2,-4(fp)
    1e84:	10bfffc4 	addi	r2,r2,-1
    1e88:	10800524 	muli	r2,r2,20
    1e8c:	10800284 	addi	r2,r2,10
    1e90:	e0bffd15 	stw	r2,-12(fp)
	VGA_text(x1, 52, c);
    1e94:	e13ffd17 	ldw	r4,-12(fp)
    1e98:	01400d04 	movi	r5,52
    1e9c:	e1bffe17 	ldw	r6,-8(fp)
    1ea0:	0000fcc0 	call	fcc <VGA_text>
	if (ringInstellingen[0] < 10) {
    1ea4:	008000b4 	movhi	r2,2
    1ea8:	10be2404 	addi	r2,r2,-1904
    1eac:	10800017 	ldw	r2,0(r2)
    1eb0:	10800288 	cmpgei	r2,r2,10
    1eb4:	1000051e 	bne	r2,zero,1ecc <printRinginstelling+0x64>
		VGA_text(11, 52, " ");
    1eb8:	010002c4 	movi	r4,11
    1ebc:	01400d04 	movi	r5,52
    1ec0:	018000b4 	movhi	r6,2
    1ec4:	31bbd704 	addi	r6,r6,-4260
    1ec8:	0000fcc0 	call	fcc <VGA_text>
	}
	if (ringInstellingen[1] < 10) {
    1ecc:	008000b4 	movhi	r2,2
    1ed0:	10be2404 	addi	r2,r2,-1904
    1ed4:	10800117 	ldw	r2,4(r2)
    1ed8:	10800288 	cmpgei	r2,r2,10
    1edc:	1000051e 	bne	r2,zero,1ef4 <printRinginstelling+0x8c>
		VGA_text(31, 52, " ");
    1ee0:	010007c4 	movi	r4,31
    1ee4:	01400d04 	movi	r5,52
    1ee8:	018000b4 	movhi	r6,2
    1eec:	31bbd704 	addi	r6,r6,-4260
    1ef0:	0000fcc0 	call	fcc <VGA_text>
	}
	if (ringInstellingen[2] < 10) {
    1ef4:	008000b4 	movhi	r2,2
    1ef8:	10be2404 	addi	r2,r2,-1904
    1efc:	10800217 	ldw	r2,8(r2)
    1f00:	10800288 	cmpgei	r2,r2,10
    1f04:	1000051e 	bne	r2,zero,1f1c <printRinginstelling+0xb4>
		VGA_text(51, 52, " ");
    1f08:	01000cc4 	movi	r4,51
    1f0c:	01400d04 	movi	r5,52
    1f10:	018000b4 	movhi	r6,2
    1f14:	31bbd704 	addi	r6,r6,-4260
    1f18:	0000fcc0 	call	fcc <VGA_text>
	}
	if (ringInstellingen[3] < 10) {
    1f1c:	008000b4 	movhi	r2,2
    1f20:	10be2404 	addi	r2,r2,-1904
    1f24:	10800317 	ldw	r2,12(r2)
    1f28:	10800288 	cmpgei	r2,r2,10
    1f2c:	1000051e 	bne	r2,zero,1f44 <printRinginstelling+0xdc>
		VGA_text(71, 52, " ");
    1f30:	010011c4 	movi	r4,71
    1f34:	01400d04 	movi	r5,52
    1f38:	018000b4 	movhi	r6,2
    1f3c:	31bbd704 	addi	r6,r6,-4260
    1f40:	0000fcc0 	call	fcc <VGA_text>
	}
}
    1f44:	e037883a 	mov	sp,fp
    1f48:	dfc00117 	ldw	ra,4(sp)
    1f4c:	df000017 	ldw	fp,0(sp)
    1f50:	dec00204 	addi	sp,sp,8
    1f54:	f800283a 	ret

00001f58 <printRotorStand>:

void printRotorStand(char c[2], int rotor) { //e
    1f58:	defffb04 	addi	sp,sp,-20
    1f5c:	dfc00415 	stw	ra,16(sp)
    1f60:	df000315 	stw	fp,12(sp)
    1f64:	df000304 	addi	fp,sp,12
    1f68:	e13ffe15 	stw	r4,-8(fp)
    1f6c:	e17fff15 	stw	r5,-4(fp)
	int x1;
	x1 = (20 * (rotor - 1)) + 10;
    1f70:	e0bfff17 	ldw	r2,-4(fp)
    1f74:	10bfffc4 	addi	r2,r2,-1
    1f78:	10800524 	muli	r2,r2,20
    1f7c:	10800284 	addi	r2,r2,10
    1f80:	e0bffd15 	stw	r2,-12(fp)
	VGA_text(x1, 47, c);
    1f84:	e13ffd17 	ldw	r4,-12(fp)
    1f88:	01400bc4 	movi	r5,47
    1f8c:	e1bffe17 	ldw	r6,-8(fp)
    1f90:	0000fcc0 	call	fcc <VGA_text>
}
    1f94:	e037883a 	mov	sp,fp
    1f98:	dfc00117 	ldw	ra,4(sp)
    1f9c:	df000017 	ldw	fp,0(sp)
    1fa0:	dec00204 	addi	sp,sp,8
    1fa4:	f800283a 	ret

00001fa8 <memset>:
    1fa8:	20c000cc 	andi	r3,r4,3
    1fac:	2005883a 	mov	r2,r4
    1fb0:	18004326 	beq	r3,zero,20c0 <memset+0x118>
    1fb4:	31ffffc4 	addi	r7,r6,-1
    1fb8:	30004026 	beq	r6,zero,20bc <memset+0x114>
    1fbc:	2813883a 	mov	r9,r5
    1fc0:	200d883a 	mov	r6,r4
    1fc4:	2007883a 	mov	r3,r4
    1fc8:	00000406 	br	1fdc <memset+0x34>
    1fcc:	3a3fffc4 	addi	r8,r7,-1
    1fd0:	31800044 	addi	r6,r6,1
    1fd4:	38003926 	beq	r7,zero,20bc <memset+0x114>
    1fd8:	400f883a 	mov	r7,r8
    1fdc:	18c00044 	addi	r3,r3,1
    1fe0:	32400005 	stb	r9,0(r6)
    1fe4:	1a0000cc 	andi	r8,r3,3
    1fe8:	403ff81e 	bne	r8,zero,1fcc <__alt_mem_Flash_flash_data+0xf4001fcc>
    1fec:	010000c4 	movi	r4,3
    1ff0:	21c02d2e 	bgeu	r4,r7,20a8 <memset+0x100>
    1ff4:	29803fcc 	andi	r6,r5,255
    1ff8:	3008923a 	slli	r4,r6,8
    1ffc:	218cb03a 	or	r6,r4,r6
    2000:	3008943a 	slli	r4,r6,16
    2004:	218cb03a 	or	r6,r4,r6
    2008:	010003c4 	movi	r4,15
    200c:	21c0182e 	bgeu	r4,r7,2070 <memset+0xc8>
    2010:	3b3ffc04 	addi	r12,r7,-16
    2014:	6018d13a 	srli	r12,r12,4
    2018:	1a000104 	addi	r8,r3,4
    201c:	1ac00204 	addi	r11,r3,8
    2020:	6008913a 	slli	r4,r12,4
    2024:	1a800304 	addi	r10,r3,12
    2028:	1813883a 	mov	r9,r3
    202c:	21000504 	addi	r4,r4,20
    2030:	1909883a 	add	r4,r3,r4
    2034:	49800015 	stw	r6,0(r9)
    2038:	41800015 	stw	r6,0(r8)
    203c:	59800015 	stw	r6,0(r11)
    2040:	51800015 	stw	r6,0(r10)
    2044:	42000404 	addi	r8,r8,16
    2048:	4a400404 	addi	r9,r9,16
    204c:	5ac00404 	addi	r11,r11,16
    2050:	52800404 	addi	r10,r10,16
    2054:	413ff71e 	bne	r8,r4,2034 <__alt_mem_Flash_flash_data+0xf4002034>
    2058:	63000044 	addi	r12,r12,1
    205c:	6018913a 	slli	r12,r12,4
    2060:	39c003cc 	andi	r7,r7,15
    2064:	010000c4 	movi	r4,3
    2068:	1b07883a 	add	r3,r3,r12
    206c:	21c00e2e 	bgeu	r4,r7,20a8 <memset+0x100>
    2070:	1813883a 	mov	r9,r3
    2074:	3811883a 	mov	r8,r7
    2078:	010000c4 	movi	r4,3
    207c:	49800015 	stw	r6,0(r9)
    2080:	423fff04 	addi	r8,r8,-4
    2084:	4a400104 	addi	r9,r9,4
    2088:	223ffc36 	bltu	r4,r8,207c <__alt_mem_Flash_flash_data+0xf400207c>
    208c:	393fff04 	addi	r4,r7,-4
    2090:	2008d0ba 	srli	r4,r4,2
    2094:	39c000cc 	andi	r7,r7,3
    2098:	21000044 	addi	r4,r4,1
    209c:	2109883a 	add	r4,r4,r4
    20a0:	2109883a 	add	r4,r4,r4
    20a4:	1907883a 	add	r3,r3,r4
    20a8:	38000426 	beq	r7,zero,20bc <memset+0x114>
    20ac:	19cf883a 	add	r7,r3,r7
    20b0:	19400005 	stb	r5,0(r3)
    20b4:	18c00044 	addi	r3,r3,1
    20b8:	19fffd1e 	bne	r3,r7,20b0 <__alt_mem_Flash_flash_data+0xf40020b0>
    20bc:	f800283a 	ret
    20c0:	2007883a 	mov	r3,r4
    20c4:	300f883a 	mov	r7,r6
    20c8:	003fc806 	br	1fec <__alt_mem_Flash_flash_data+0xf4001fec>

000020cc <_printf_r>:
    20cc:	defffd04 	addi	sp,sp,-12
    20d0:	dfc00015 	stw	ra,0(sp)
    20d4:	d9800115 	stw	r6,4(sp)
    20d8:	d9c00215 	stw	r7,8(sp)
    20dc:	280d883a 	mov	r6,r5
    20e0:	21400217 	ldw	r5,8(r4)
    20e4:	d9c00104 	addi	r7,sp,4
    20e8:	00044100 	call	4410 <___vfprintf_internal_r>
    20ec:	dfc00017 	ldw	ra,0(sp)
    20f0:	dec00304 	addi	sp,sp,12
    20f4:	f800283a 	ret

000020f8 <printf>:
    20f8:	defffc04 	addi	sp,sp,-16
    20fc:	dfc00015 	stw	ra,0(sp)
    2100:	d9400115 	stw	r5,4(sp)
    2104:	d9800215 	stw	r6,8(sp)
    2108:	d9c00315 	stw	r7,12(sp)
    210c:	008000b4 	movhi	r2,2
    2110:	10867e04 	addi	r2,r2,6648
    2114:	10800017 	ldw	r2,0(r2)
    2118:	200b883a 	mov	r5,r4
    211c:	d9800104 	addi	r6,sp,4
    2120:	11000217 	ldw	r4,8(r2)
    2124:	00063600 	call	6360 <__vfprintf_internal>
    2128:	dfc00017 	ldw	ra,0(sp)
    212c:	dec00404 	addi	sp,sp,16
    2130:	f800283a 	ret

00002134 <_puts_r>:
    2134:	defff604 	addi	sp,sp,-40
    2138:	dc000715 	stw	r16,28(sp)
    213c:	2021883a 	mov	r16,r4
    2140:	2809883a 	mov	r4,r5
    2144:	dc400815 	stw	r17,32(sp)
    2148:	dfc00915 	stw	ra,36(sp)
    214c:	2823883a 	mov	r17,r5
    2150:	00023e80 	call	23e8 <strlen>
    2154:	81400217 	ldw	r5,8(r16)
    2158:	11000044 	addi	r4,r2,1
    215c:	d8800115 	stw	r2,4(sp)
    2160:	008000b4 	movhi	r2,2
    2164:	2980030b 	ldhu	r6,12(r5)
    2168:	10bc1304 	addi	r2,r2,-4020
    216c:	d8800215 	stw	r2,8(sp)
    2170:	00800044 	movi	r2,1
    2174:	d8800315 	stw	r2,12(sp)
    2178:	00800084 	movi	r2,2
    217c:	d8800515 	stw	r2,20(sp)
    2180:	dc400015 	stw	r17,0(sp)
    2184:	d9000615 	stw	r4,24(sp)
    2188:	dec00415 	stw	sp,16(sp)
    218c:	3088000c 	andi	r2,r6,8192
    2190:	1000061e 	bne	r2,zero,21ac <_puts_r+0x78>
    2194:	29001917 	ldw	r4,100(r5)
    2198:	00b7ffc4 	movi	r2,-8193
    219c:	31880014 	ori	r6,r6,8192
    21a0:	2084703a 	and	r2,r4,r2
    21a4:	2980030d 	sth	r6,12(r5)
    21a8:	28801915 	stw	r2,100(r5)
    21ac:	8009883a 	mov	r4,r16
    21b0:	d9800404 	addi	r6,sp,16
    21b4:	00089040 	call	8904 <__sfvwrite_r>
    21b8:	1000061e 	bne	r2,zero,21d4 <_puts_r+0xa0>
    21bc:	00800284 	movi	r2,10
    21c0:	dfc00917 	ldw	ra,36(sp)
    21c4:	dc400817 	ldw	r17,32(sp)
    21c8:	dc000717 	ldw	r16,28(sp)
    21cc:	dec00a04 	addi	sp,sp,40
    21d0:	f800283a 	ret
    21d4:	00bfffc4 	movi	r2,-1
    21d8:	003ff906 	br	21c0 <__alt_mem_Flash_flash_data+0xf40021c0>

000021dc <puts>:
    21dc:	008000b4 	movhi	r2,2
    21e0:	10867e04 	addi	r2,r2,6648
    21e4:	200b883a 	mov	r5,r4
    21e8:	11000017 	ldw	r4,0(r2)
    21ec:	00021341 	jmpi	2134 <_puts_r>

000021f0 <_sprintf_r>:
    21f0:	deffe404 	addi	sp,sp,-112
    21f4:	2807883a 	mov	r3,r5
    21f8:	dfc01a15 	stw	ra,104(sp)
    21fc:	d9c01b15 	stw	r7,108(sp)
    2200:	00a00034 	movhi	r2,32768
    2204:	10bfffc4 	addi	r2,r2,-1
    2208:	02008204 	movi	r8,520
    220c:	d8800215 	stw	r2,8(sp)
    2210:	d8800515 	stw	r2,20(sp)
    2214:	d80b883a 	mov	r5,sp
    2218:	d9c01b04 	addi	r7,sp,108
    221c:	00bfffc4 	movi	r2,-1
    2220:	d8c00015 	stw	r3,0(sp)
    2224:	d8c00415 	stw	r3,16(sp)
    2228:	da00030d 	sth	r8,12(sp)
    222c:	d880038d 	sth	r2,14(sp)
    2230:	00024800 	call	2480 <___svfprintf_internal_r>
    2234:	d8c00017 	ldw	r3,0(sp)
    2238:	18000005 	stb	zero,0(r3)
    223c:	dfc01a17 	ldw	ra,104(sp)
    2240:	dec01c04 	addi	sp,sp,112
    2244:	f800283a 	ret

00002248 <sprintf>:
    2248:	deffe304 	addi	sp,sp,-116
    224c:	2007883a 	mov	r3,r4
    2250:	dfc01a15 	stw	ra,104(sp)
    2254:	d9801b15 	stw	r6,108(sp)
    2258:	d9c01c15 	stw	r7,112(sp)
    225c:	010000b4 	movhi	r4,2
    2260:	21067e04 	addi	r4,r4,6648
    2264:	21000017 	ldw	r4,0(r4)
    2268:	00a00034 	movhi	r2,32768
    226c:	10bfffc4 	addi	r2,r2,-1
    2270:	280d883a 	mov	r6,r5
    2274:	02008204 	movi	r8,520
    2278:	d8800215 	stw	r2,8(sp)
    227c:	d8800515 	stw	r2,20(sp)
    2280:	d80b883a 	mov	r5,sp
    2284:	d9c01b04 	addi	r7,sp,108
    2288:	00bfffc4 	movi	r2,-1
    228c:	d8c00015 	stw	r3,0(sp)
    2290:	d8c00415 	stw	r3,16(sp)
    2294:	da00030d 	sth	r8,12(sp)
    2298:	d880038d 	sth	r2,14(sp)
    229c:	00024800 	call	2480 <___svfprintf_internal_r>
    22a0:	d8c00017 	ldw	r3,0(sp)
    22a4:	18000005 	stb	zero,0(r3)
    22a8:	dfc01a17 	ldw	ra,104(sp)
    22ac:	dec01d04 	addi	sp,sp,116
    22b0:	f800283a 	ret

000022b4 <strcmp>:
    22b4:	2144b03a 	or	r2,r4,r5
    22b8:	108000cc 	andi	r2,r2,3
    22bc:	1000171e 	bne	r2,zero,231c <strcmp+0x68>
    22c0:	20800017 	ldw	r2,0(r4)
    22c4:	28c00017 	ldw	r3,0(r5)
    22c8:	10c0141e 	bne	r2,r3,231c <strcmp+0x68>
    22cc:	027fbff4 	movhi	r9,65279
    22d0:	4a7fbfc4 	addi	r9,r9,-257
    22d4:	0086303a 	nor	r3,zero,r2
    22d8:	02202074 	movhi	r8,32897
    22dc:	1245883a 	add	r2,r2,r9
    22e0:	42202004 	addi	r8,r8,-32640
    22e4:	10c4703a 	and	r2,r2,r3
    22e8:	1204703a 	and	r2,r2,r8
    22ec:	10000226 	beq	r2,zero,22f8 <strcmp+0x44>
    22f0:	00001706 	br	2350 <strcmp+0x9c>
    22f4:	1000161e 	bne	r2,zero,2350 <strcmp+0x9c>
    22f8:	21000104 	addi	r4,r4,4
    22fc:	20c00017 	ldw	r3,0(r4)
    2300:	29400104 	addi	r5,r5,4
    2304:	29800017 	ldw	r6,0(r5)
    2308:	1a4f883a 	add	r7,r3,r9
    230c:	00c4303a 	nor	r2,zero,r3
    2310:	3884703a 	and	r2,r7,r2
    2314:	1204703a 	and	r2,r2,r8
    2318:	19bff626 	beq	r3,r6,22f4 <__alt_mem_Flash_flash_data+0xf40022f4>
    231c:	20800007 	ldb	r2,0(r4)
    2320:	1000051e 	bne	r2,zero,2338 <strcmp+0x84>
    2324:	00000606 	br	2340 <strcmp+0x8c>
    2328:	21000044 	addi	r4,r4,1
    232c:	20800007 	ldb	r2,0(r4)
    2330:	29400044 	addi	r5,r5,1
    2334:	10000226 	beq	r2,zero,2340 <strcmp+0x8c>
    2338:	28c00007 	ldb	r3,0(r5)
    233c:	10fffa26 	beq	r2,r3,2328 <__alt_mem_Flash_flash_data+0xf4002328>
    2340:	20800003 	ldbu	r2,0(r4)
    2344:	28c00003 	ldbu	r3,0(r5)
    2348:	10c5c83a 	sub	r2,r2,r3
    234c:	f800283a 	ret
    2350:	0005883a 	mov	r2,zero
    2354:	f800283a 	ret

00002358 <strcpy>:
    2358:	2906b03a 	or	r3,r5,r4
    235c:	18c000cc 	andi	r3,r3,3
    2360:	2005883a 	mov	r2,r4
    2364:	1800161e 	bne	r3,zero,23c0 <strcpy+0x68>
    2368:	29c00017 	ldw	r7,0(r5)
    236c:	02ffbff4 	movhi	r11,65279
    2370:	5affbfc4 	addi	r11,r11,-257
    2374:	02a02074 	movhi	r10,32897
    2378:	01c8303a 	nor	r4,zero,r7
    237c:	3ac7883a 	add	r3,r7,r11
    2380:	52a02004 	addi	r10,r10,-32640
    2384:	20c6703a 	and	r3,r4,r3
    2388:	1a86703a 	and	r3,r3,r10
    238c:	18000c1e 	bne	r3,zero,23c0 <strcpy+0x68>
    2390:	1011883a 	mov	r8,r2
    2394:	41c00015 	stw	r7,0(r8)
    2398:	29400104 	addi	r5,r5,4
    239c:	29c00017 	ldw	r7,0(r5)
    23a0:	41800104 	addi	r6,r8,4
    23a4:	3011883a 	mov	r8,r6
    23a8:	01d2303a 	nor	r9,zero,r7
    23ac:	3ac7883a 	add	r3,r7,r11
    23b0:	48c6703a 	and	r3,r9,r3
    23b4:	1a86703a 	and	r3,r3,r10
    23b8:	183ff626 	beq	r3,zero,2394 <__alt_mem_Flash_flash_data+0xf4002394>
    23bc:	00000106 	br	23c4 <strcpy+0x6c>
    23c0:	100d883a 	mov	r6,r2
    23c4:	28c00003 	ldbu	r3,0(r5)
    23c8:	31800044 	addi	r6,r6,1
    23cc:	29400044 	addi	r5,r5,1
    23d0:	30ffffc5 	stb	r3,-1(r6)
    23d4:	18c03fcc 	andi	r3,r3,255
    23d8:	18c0201c 	xori	r3,r3,128
    23dc:	18ffe004 	addi	r3,r3,-128
    23e0:	183ff81e 	bne	r3,zero,23c4 <__alt_mem_Flash_flash_data+0xf40023c4>
    23e4:	f800283a 	ret

000023e8 <strlen>:
    23e8:	208000cc 	andi	r2,r4,3
    23ec:	10002026 	beq	r2,zero,2470 <strlen+0x88>
    23f0:	20800007 	ldb	r2,0(r4)
    23f4:	10002026 	beq	r2,zero,2478 <strlen+0x90>
    23f8:	2005883a 	mov	r2,r4
    23fc:	00000206 	br	2408 <strlen+0x20>
    2400:	10c00007 	ldb	r3,0(r2)
    2404:	18001826 	beq	r3,zero,2468 <strlen+0x80>
    2408:	10800044 	addi	r2,r2,1
    240c:	10c000cc 	andi	r3,r2,3
    2410:	183ffb1e 	bne	r3,zero,2400 <__alt_mem_Flash_flash_data+0xf4002400>
    2414:	10c00017 	ldw	r3,0(r2)
    2418:	01ffbff4 	movhi	r7,65279
    241c:	39ffbfc4 	addi	r7,r7,-257
    2420:	00ca303a 	nor	r5,zero,r3
    2424:	01a02074 	movhi	r6,32897
    2428:	19c7883a 	add	r3,r3,r7
    242c:	31a02004 	addi	r6,r6,-32640
    2430:	1946703a 	and	r3,r3,r5
    2434:	1986703a 	and	r3,r3,r6
    2438:	1800091e 	bne	r3,zero,2460 <strlen+0x78>
    243c:	10800104 	addi	r2,r2,4
    2440:	10c00017 	ldw	r3,0(r2)
    2444:	19cb883a 	add	r5,r3,r7
    2448:	00c6303a 	nor	r3,zero,r3
    244c:	28c6703a 	and	r3,r5,r3
    2450:	1986703a 	and	r3,r3,r6
    2454:	183ff926 	beq	r3,zero,243c <__alt_mem_Flash_flash_data+0xf400243c>
    2458:	00000106 	br	2460 <strlen+0x78>
    245c:	10800044 	addi	r2,r2,1
    2460:	10c00007 	ldb	r3,0(r2)
    2464:	183ffd1e 	bne	r3,zero,245c <__alt_mem_Flash_flash_data+0xf400245c>
    2468:	1105c83a 	sub	r2,r2,r4
    246c:	f800283a 	ret
    2470:	2005883a 	mov	r2,r4
    2474:	003fe706 	br	2414 <__alt_mem_Flash_flash_data+0xf4002414>
    2478:	0005883a 	mov	r2,zero
    247c:	f800283a 	ret

00002480 <___svfprintf_internal_r>:
    2480:	deffb504 	addi	sp,sp,-300
    2484:	dfc04a15 	stw	ra,296(sp)
    2488:	ddc04815 	stw	r23,288(sp)
    248c:	d9002f15 	stw	r4,188(sp)
    2490:	282f883a 	mov	r23,r5
    2494:	d9802915 	stw	r6,164(sp)
    2498:	d9c02d15 	stw	r7,180(sp)
    249c:	df004915 	stw	fp,292(sp)
    24a0:	dd804715 	stw	r22,284(sp)
    24a4:	dd404615 	stw	r21,280(sp)
    24a8:	dd004515 	stw	r20,276(sp)
    24ac:	dcc04415 	stw	r19,272(sp)
    24b0:	dc804315 	stw	r18,268(sp)
    24b4:	dc404215 	stw	r17,264(sp)
    24b8:	dc004115 	stw	r16,260(sp)
    24bc:	0008ff80 	call	8ff8 <_localeconv_r>
    24c0:	10800017 	ldw	r2,0(r2)
    24c4:	1009883a 	mov	r4,r2
    24c8:	d8803515 	stw	r2,212(sp)
    24cc:	00023e80 	call	23e8 <strlen>
    24d0:	d8803915 	stw	r2,228(sp)
    24d4:	b880030b 	ldhu	r2,12(r23)
    24d8:	1080200c 	andi	r2,r2,128
    24dc:	10000226 	beq	r2,zero,24e8 <___svfprintf_internal_r+0x68>
    24e0:	b8800417 	ldw	r2,16(r23)
    24e4:	10065f26 	beq	r2,zero,3e64 <___svfprintf_internal_r+0x19e4>
    24e8:	db001dc4 	addi	r12,sp,119
    24ec:	dd801e04 	addi	r22,sp,120
    24f0:	d8800404 	addi	r2,sp,16
    24f4:	050000b4 	movhi	r20,2
    24f8:	b317c83a 	sub	r11,r22,r12
    24fc:	a53c2484 	addi	r20,r20,-3950
    2500:	db002815 	stw	r12,160(sp)
    2504:	d8801e15 	stw	r2,120(sp)
    2508:	d8002015 	stw	zero,128(sp)
    250c:	d8001f15 	stw	zero,124(sp)
    2510:	d8003315 	stw	zero,204(sp)
    2514:	d8003715 	stw	zero,220(sp)
    2518:	d8003815 	stw	zero,224(sp)
    251c:	1011883a 	mov	r8,r2
    2520:	d8003b15 	stw	zero,236(sp)
    2524:	d8003a15 	stw	zero,232(sp)
    2528:	d8003015 	stw	zero,192(sp)
    252c:	dac03d15 	stw	r11,244(sp)
    2530:	db002917 	ldw	r12,164(sp)
    2534:	60800007 	ldb	r2,0(r12)
    2538:	1000ab26 	beq	r2,zero,27e8 <___svfprintf_internal_r+0x368>
    253c:	00c00944 	movi	r3,37
    2540:	10c0a926 	beq	r2,r3,27e8 <___svfprintf_internal_r+0x368>
    2544:	6021883a 	mov	r16,r12
    2548:	00000106 	br	2550 <___svfprintf_internal_r+0xd0>
    254c:	10c08426 	beq	r2,r3,2760 <___svfprintf_internal_r+0x2e0>
    2550:	84000044 	addi	r16,r16,1
    2554:	80800007 	ldb	r2,0(r16)
    2558:	103ffc1e 	bne	r2,zero,254c <__alt_mem_Flash_flash_data+0xf400254c>
    255c:	dac02917 	ldw	r11,164(sp)
    2560:	82e3c83a 	sub	r17,r16,r11
    2564:	88000f26 	beq	r17,zero,25a4 <___svfprintf_internal_r+0x124>
    2568:	d8c02017 	ldw	r3,128(sp)
    256c:	d8801f17 	ldw	r2,124(sp)
    2570:	dac02917 	ldw	r11,164(sp)
    2574:	1c47883a 	add	r3,r3,r17
    2578:	10800044 	addi	r2,r2,1
    257c:	d8c02015 	stw	r3,128(sp)
    2580:	42c00015 	stw	r11,0(r8)
    2584:	44400115 	stw	r17,4(r8)
    2588:	d8801f15 	stw	r2,124(sp)
    258c:	00c001c4 	movi	r3,7
    2590:	18807616 	blt	r3,r2,276c <___svfprintf_internal_r+0x2ec>
    2594:	42000204 	addi	r8,r8,8
    2598:	db003017 	ldw	r12,192(sp)
    259c:	6459883a 	add	r12,r12,r17
    25a0:	db003015 	stw	r12,192(sp)
    25a4:	80800007 	ldb	r2,0(r16)
    25a8:	10007726 	beq	r2,zero,2788 <___svfprintf_internal_r+0x308>
    25ac:	80800044 	addi	r2,r16,1
    25b0:	84000047 	ldb	r16,1(r16)
    25b4:	d8002785 	stb	zero,158(sp)
    25b8:	000d883a 	mov	r6,zero
    25bc:	027fffc4 	movi	r9,-1
    25c0:	d8002e15 	stw	zero,184(sp)
    25c4:	0023883a 	mov	r17,zero
    25c8:	01001604 	movi	r4,88
    25cc:	01400244 	movi	r5,9
    25d0:	02800a84 	movi	r10,42
    25d4:	01c01b04 	movi	r7,108
    25d8:	10c00044 	addi	r3,r2,1
    25dc:	80bff804 	addi	r2,r16,-32
    25e0:	2082e636 	bltu	r4,r2,317c <___svfprintf_internal_r+0xcfc>
    25e4:	100490ba 	slli	r2,r2,2
    25e8:	02c00034 	movhi	r11,0
    25ec:	5ac97f04 	addi	r11,r11,9724
    25f0:	12c5883a 	add	r2,r2,r11
    25f4:	10800017 	ldw	r2,0(r2)
    25f8:	1000683a 	jmp	r2
    25fc:	00002f5c 	xori	zero,zero,189
    2600:	0000317c 	xorhi	zero,zero,197
    2604:	0000317c 	xorhi	zero,zero,197
    2608:	00002f7c 	xorhi	zero,zero,189
    260c:	0000317c 	xorhi	zero,zero,197
    2610:	0000317c 	xorhi	zero,zero,197
    2614:	0000317c 	xorhi	zero,zero,197
    2618:	0000317c 	xorhi	zero,zero,197
    261c:	0000317c 	xorhi	zero,zero,197
    2620:	0000317c 	xorhi	zero,zero,197
    2624:	00002f8c 	andi	zero,zero,190
    2628:	00002fb8 	rdprs	zero,zero,190
    262c:	0000317c 	xorhi	zero,zero,197
    2630:	000027f0 	cmpltui	zero,zero,159
    2634:	00002800 	call	280 <getChar>
    2638:	0000317c 	xorhi	zero,zero,197
    263c:	00002840 	call	284 <getChar+0x4>
    2640:	00002e20 	cmpeqi	zero,zero,184
    2644:	00002e20 	cmpeqi	zero,zero,184
    2648:	00002e20 	cmpeqi	zero,zero,184
    264c:	00002e20 	cmpeqi	zero,zero,184
    2650:	00002e20 	cmpeqi	zero,zero,184
    2654:	00002e20 	cmpeqi	zero,zero,184
    2658:	00002e20 	cmpeqi	zero,zero,184
    265c:	00002e20 	cmpeqi	zero,zero,184
    2660:	00002e20 	cmpeqi	zero,zero,184
    2664:	0000317c 	xorhi	zero,zero,197
    2668:	0000317c 	xorhi	zero,zero,197
    266c:	0000317c 	xorhi	zero,zero,197
    2670:	0000317c 	xorhi	zero,zero,197
    2674:	0000317c 	xorhi	zero,zero,197
    2678:	0000317c 	xorhi	zero,zero,197
    267c:	0000317c 	xorhi	zero,zero,197
    2680:	0000317c 	xorhi	zero,zero,197
    2684:	0000317c 	xorhi	zero,zero,197
    2688:	0000317c 	xorhi	zero,zero,197
    268c:	00002850 	cmplti	zero,zero,161
    2690:	00002cd0 	cmplti	zero,zero,179
    2694:	0000317c 	xorhi	zero,zero,197
    2698:	00002cd0 	cmplti	zero,zero,179
    269c:	0000317c 	xorhi	zero,zero,197
    26a0:	0000317c 	xorhi	zero,zero,197
    26a4:	0000317c 	xorhi	zero,zero,197
    26a8:	0000317c 	xorhi	zero,zero,197
    26ac:	00002d74 	movhi	zero,181
    26b0:	0000317c 	xorhi	zero,zero,197
    26b4:	0000317c 	xorhi	zero,zero,197
    26b8:	00003110 	cmplti	zero,zero,196
    26bc:	0000317c 	xorhi	zero,zero,197
    26c0:	0000317c 	xorhi	zero,zero,197
    26c4:	0000317c 	xorhi	zero,zero,197
    26c8:	0000317c 	xorhi	zero,zero,197
    26cc:	0000317c 	xorhi	zero,zero,197
    26d0:	00002d84 	movi	zero,182
    26d4:	0000317c 	xorhi	zero,zero,197
    26d8:	0000317c 	xorhi	zero,zero,197
    26dc:	00002dc4 	movi	zero,183
    26e0:	0000317c 	xorhi	zero,zero,197
    26e4:	0000317c 	xorhi	zero,zero,197
    26e8:	0000317c 	xorhi	zero,zero,197
    26ec:	0000317c 	xorhi	zero,zero,197
    26f0:	0000317c 	xorhi	zero,zero,197
    26f4:	0000317c 	xorhi	zero,zero,197
    26f8:	0000317c 	xorhi	zero,zero,197
    26fc:	0000317c 	xorhi	zero,zero,197
    2700:	0000317c 	xorhi	zero,zero,197
    2704:	0000317c 	xorhi	zero,zero,197
    2708:	00003068 	cmpgeui	zero,zero,193
    270c:	000030a8 	cmpgeui	zero,zero,194
    2710:	00002cd0 	cmplti	zero,zero,179
    2714:	00002cd0 	cmplti	zero,zero,179
    2718:	00002cd0 	cmplti	zero,zero,179
    271c:	00002fc8 	cmpgei	zero,zero,191
    2720:	000030a8 	cmpgeui	zero,zero,194
    2724:	0000317c 	xorhi	zero,zero,197
    2728:	0000317c 	xorhi	zero,zero,197
    272c:	00002fd8 	cmpnei	zero,zero,191
    2730:	0000317c 	xorhi	zero,zero,197
    2734:	00002fec 	andhi	zero,zero,191
    2738:	00003140 	call	314 <putChar+0x4>
    273c:	00003020 	cmpeqi	zero,zero,192
    2740:	00002e54 	movui	zero,185
    2744:	0000317c 	xorhi	zero,zero,197
    2748:	00002e64 	muli	zero,zero,185
    274c:	0000317c 	xorhi	zero,zero,197
    2750:	00002edc 	xori	zero,zero,187
    2754:	0000317c 	xorhi	zero,zero,197
    2758:	0000317c 	xorhi	zero,zero,197
    275c:	00002f1c 	xori	zero,zero,188
    2760:	db002917 	ldw	r12,164(sp)
    2764:	8323c83a 	sub	r17,r16,r12
    2768:	003f7e06 	br	2564 <__alt_mem_Flash_flash_data+0xf4002564>
    276c:	d9002f17 	ldw	r4,188(sp)
    2770:	b80b883a 	mov	r5,r23
    2774:	b00d883a 	mov	r6,r22
    2778:	000b4140 	call	b414 <__ssprint_r>
    277c:	1000081e 	bne	r2,zero,27a0 <___svfprintf_internal_r+0x320>
    2780:	da000404 	addi	r8,sp,16
    2784:	003f8406 	br	2598 <__alt_mem_Flash_flash_data+0xf4002598>
    2788:	d8802017 	ldw	r2,128(sp)
    278c:	10000426 	beq	r2,zero,27a0 <___svfprintf_internal_r+0x320>
    2790:	d9002f17 	ldw	r4,188(sp)
    2794:	b80b883a 	mov	r5,r23
    2798:	d9801e04 	addi	r6,sp,120
    279c:	000b4140 	call	b414 <__ssprint_r>
    27a0:	b880030b 	ldhu	r2,12(r23)
    27a4:	1080100c 	andi	r2,r2,64
    27a8:	10000d1e 	bne	r2,zero,27e0 <___svfprintf_internal_r+0x360>
    27ac:	d8803017 	ldw	r2,192(sp)
    27b0:	dfc04a17 	ldw	ra,296(sp)
    27b4:	df004917 	ldw	fp,292(sp)
    27b8:	ddc04817 	ldw	r23,288(sp)
    27bc:	dd804717 	ldw	r22,284(sp)
    27c0:	dd404617 	ldw	r21,280(sp)
    27c4:	dd004517 	ldw	r20,276(sp)
    27c8:	dcc04417 	ldw	r19,272(sp)
    27cc:	dc804317 	ldw	r18,268(sp)
    27d0:	dc404217 	ldw	r17,264(sp)
    27d4:	dc004117 	ldw	r16,260(sp)
    27d8:	dec04b04 	addi	sp,sp,300
    27dc:	f800283a 	ret
    27e0:	00bfffc4 	movi	r2,-1
    27e4:	003ff206 	br	27b0 <__alt_mem_Flash_flash_data+0xf40027b0>
    27e8:	dc002917 	ldw	r16,164(sp)
    27ec:	003f6d06 	br	25a4 <__alt_mem_Flash_flash_data+0xf40025a4>
    27f0:	1805883a 	mov	r2,r3
    27f4:	8c400114 	ori	r17,r17,4
    27f8:	1c000007 	ldb	r16,0(r3)
    27fc:	003f7606 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2800:	1c000007 	ldb	r16,0(r3)
    2804:	18800044 	addi	r2,r3,1
    2808:	8286e726 	beq	r16,r10,43a8 <___svfprintf_internal_r+0x1f28>
    280c:	82fff404 	addi	r11,r16,-48
    2810:	1007883a 	mov	r3,r2
    2814:	0013883a 	mov	r9,zero
    2818:	2aff7036 	bltu	r5,r11,25dc <__alt_mem_Flash_flash_data+0xf40025dc>
    281c:	1c000007 	ldb	r16,0(r3)
    2820:	4a4002a4 	muli	r9,r9,10
    2824:	18c00044 	addi	r3,r3,1
    2828:	5a53883a 	add	r9,r11,r9
    282c:	82fff404 	addi	r11,r16,-48
    2830:	2afffa2e 	bgeu	r5,r11,281c <__alt_mem_Flash_flash_data+0xf400281c>
    2834:	483f690e 	bge	r9,zero,25dc <__alt_mem_Flash_flash_data+0xf40025dc>
    2838:	027fffc4 	movi	r9,-1
    283c:	003f6706 	br	25dc <__alt_mem_Flash_flash_data+0xf40025dc>
    2840:	8c402014 	ori	r17,r17,128
    2844:	1805883a 	mov	r2,r3
    2848:	1c000007 	ldb	r16,0(r3)
    284c:	003f6206 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2850:	8c400414 	ori	r17,r17,16
    2854:	d8c02915 	stw	r3,164(sp)
    2858:	d9802785 	stb	r6,158(sp)
    285c:	8880080c 	andi	r2,r17,32
    2860:	d8c02d17 	ldw	r3,180(sp)
    2864:	10021526 	beq	r2,zero,30bc <___svfprintf_internal_r+0xc3c>
    2868:	db002d17 	ldw	r12,180(sp)
    286c:	18800117 	ldw	r2,4(r3)
    2870:	1cc00017 	ldw	r19,0(r3)
    2874:	63000204 	addi	r12,r12,8
    2878:	db002d15 	stw	r12,180(sp)
    287c:	1039883a 	mov	fp,r2
    2880:	10021916 	blt	r2,zero,30e8 <___svfprintf_internal_r+0xc68>
    2884:	dd402783 	ldbu	r21,158(sp)
    2888:	da403215 	stw	r9,200(sp)
    288c:	00800044 	movi	r2,1
    2890:	9f06b03a 	or	r3,r19,fp
    2894:	48000216 	blt	r9,zero,28a0 <___svfprintf_internal_r+0x420>
    2898:	013fdfc4 	movi	r4,-129
    289c:	8922703a 	and	r17,r17,r4
    28a0:	1802461e 	bne	r3,zero,31bc <___svfprintf_internal_r+0xd3c>
    28a4:	48035426 	beq	r9,zero,35f8 <___svfprintf_internal_r+0x1178>
    28a8:	10803fcc 	andi	r2,r2,255
    28ac:	00c00044 	movi	r3,1
    28b0:	10c26726 	beq	r2,r3,3250 <___svfprintf_internal_r+0xdd0>
    28b4:	00c00084 	movi	r3,2
    28b8:	10c2ea26 	beq	r2,r3,3464 <___svfprintf_internal_r+0xfe4>
    28bc:	b007883a 	mov	r3,r22
    28c0:	9808d0fa 	srli	r4,r19,3
    28c4:	e00a977a 	slli	r5,fp,29
    28c8:	e038d0fa 	srli	fp,fp,3
    28cc:	9cc001cc 	andi	r19,r19,7
    28d0:	98800c04 	addi	r2,r19,48
    28d4:	18ffffc4 	addi	r3,r3,-1
    28d8:	2926b03a 	or	r19,r5,r4
    28dc:	18800005 	stb	r2,0(r3)
    28e0:	9f08b03a 	or	r4,r19,fp
    28e4:	203ff61e 	bne	r4,zero,28c0 <__alt_mem_Flash_flash_data+0xf40028c0>
    28e8:	8900004c 	andi	r4,r17,1
    28ec:	d8c03115 	stw	r3,196(sp)
    28f0:	2002ea26 	beq	r4,zero,349c <___svfprintf_internal_r+0x101c>
    28f4:	10803fcc 	andi	r2,r2,255
    28f8:	1080201c 	xori	r2,r2,128
    28fc:	10bfe004 	addi	r2,r2,-128
    2900:	01000c04 	movi	r4,48
    2904:	11057526 	beq	r2,r4,3edc <___svfprintf_internal_r+0x1a5c>
    2908:	dac03117 	ldw	r11,196(sp)
    290c:	193fffc5 	stb	r4,-1(r3)
    2910:	5affffc4 	addi	r11,r11,-1
    2914:	dac03115 	stw	r11,196(sp)
    2918:	b2e5c83a 	sub	r18,r22,r11
    291c:	9005883a 	mov	r2,r18
    2920:	9240010e 	bge	r18,r9,2928 <___svfprintf_internal_r+0x4a8>
    2924:	4805883a 	mov	r2,r9
    2928:	d8802a15 	stw	r2,168(sp)
    292c:	d8003415 	stw	zero,208(sp)
    2930:	a8803fcc 	andi	r2,r21,255
    2934:	1080201c 	xori	r2,r2,128
    2938:	10bfe004 	addi	r2,r2,-128
    293c:	10000326 	beq	r2,zero,294c <___svfprintf_internal_r+0x4cc>
    2940:	d8c02a17 	ldw	r3,168(sp)
    2944:	18c00044 	addi	r3,r3,1
    2948:	d8c02a15 	stw	r3,168(sp)
    294c:	8ac0008c 	andi	r11,r17,2
    2950:	dac02b15 	stw	r11,172(sp)
    2954:	58000326 	beq	r11,zero,2964 <___svfprintf_internal_r+0x4e4>
    2958:	db002a17 	ldw	r12,168(sp)
    295c:	63000084 	addi	r12,r12,2
    2960:	db002a15 	stw	r12,168(sp)
    2964:	88c0210c 	andi	r3,r17,132
    2968:	d8c02c15 	stw	r3,176(sp)
    296c:	1802111e 	bne	r3,zero,31b4 <___svfprintf_internal_r+0xd34>
    2970:	dac02e17 	ldw	r11,184(sp)
    2974:	db002a17 	ldw	r12,168(sp)
    2978:	5b39c83a 	sub	fp,r11,r12
    297c:	07020d0e 	bge	zero,fp,31b4 <___svfprintf_internal_r+0xd34>
    2980:	02400404 	movi	r9,16
    2984:	d8c02017 	ldw	r3,128(sp)
    2988:	d8801f17 	ldw	r2,124(sp)
    298c:	4f058c0e 	bge	r9,fp,3fc0 <___svfprintf_internal_r+0x1b40>
    2990:	014000b4 	movhi	r5,2
    2994:	e009883a 	mov	r4,fp
    2998:	297c2884 	addi	r5,r5,-3934
    299c:	dc003c15 	stw	r16,240(sp)
    29a0:	9039883a 	mov	fp,r18
    29a4:	d9403615 	stw	r5,216(sp)
    29a8:	8825883a 	mov	r18,r17
    29ac:	482b883a 	mov	r21,r9
    29b0:	04c001c4 	movi	r19,7
    29b4:	dc002f17 	ldw	r16,188(sp)
    29b8:	2023883a 	mov	r17,r4
    29bc:	00000306 	br	29cc <___svfprintf_internal_r+0x54c>
    29c0:	8c7ffc04 	addi	r17,r17,-16
    29c4:	42000204 	addi	r8,r8,8
    29c8:	ac40130e 	bge	r21,r17,2a18 <___svfprintf_internal_r+0x598>
    29cc:	02c000b4 	movhi	r11,2
    29d0:	18c00404 	addi	r3,r3,16
    29d4:	10800044 	addi	r2,r2,1
    29d8:	5afc2884 	addi	r11,r11,-3934
    29dc:	42c00015 	stw	r11,0(r8)
    29e0:	45400115 	stw	r21,4(r8)
    29e4:	d8c02015 	stw	r3,128(sp)
    29e8:	d8801f15 	stw	r2,124(sp)
    29ec:	98bff40e 	bge	r19,r2,29c0 <__alt_mem_Flash_flash_data+0xf40029c0>
    29f0:	8009883a 	mov	r4,r16
    29f4:	b80b883a 	mov	r5,r23
    29f8:	b00d883a 	mov	r6,r22
    29fc:	000b4140 	call	b414 <__ssprint_r>
    2a00:	103f671e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2a04:	8c7ffc04 	addi	r17,r17,-16
    2a08:	d8c02017 	ldw	r3,128(sp)
    2a0c:	d8801f17 	ldw	r2,124(sp)
    2a10:	da000404 	addi	r8,sp,16
    2a14:	ac7fed16 	blt	r21,r17,29cc <__alt_mem_Flash_flash_data+0xf40029cc>
    2a18:	dc003c17 	ldw	r16,240(sp)
    2a1c:	8809883a 	mov	r4,r17
    2a20:	9023883a 	mov	r17,r18
    2a24:	e025883a 	mov	r18,fp
    2a28:	2039883a 	mov	fp,r4
    2a2c:	db003617 	ldw	r12,216(sp)
    2a30:	e0c7883a 	add	r3,fp,r3
    2a34:	10800044 	addi	r2,r2,1
    2a38:	43000015 	stw	r12,0(r8)
    2a3c:	47000115 	stw	fp,4(r8)
    2a40:	d8c02015 	stw	r3,128(sp)
    2a44:	d8801f15 	stw	r2,124(sp)
    2a48:	010001c4 	movi	r4,7
    2a4c:	20834416 	blt	r4,r2,3760 <___svfprintf_internal_r+0x12e0>
    2a50:	d8802787 	ldb	r2,158(sp)
    2a54:	42000204 	addi	r8,r8,8
    2a58:	10000c26 	beq	r2,zero,2a8c <___svfprintf_internal_r+0x60c>
    2a5c:	d8801f17 	ldw	r2,124(sp)
    2a60:	d9002784 	addi	r4,sp,158
    2a64:	18c00044 	addi	r3,r3,1
    2a68:	10800044 	addi	r2,r2,1
    2a6c:	41000015 	stw	r4,0(r8)
    2a70:	01000044 	movi	r4,1
    2a74:	41000115 	stw	r4,4(r8)
    2a78:	d8c02015 	stw	r3,128(sp)
    2a7c:	d8801f15 	stw	r2,124(sp)
    2a80:	010001c4 	movi	r4,7
    2a84:	2082f616 	blt	r4,r2,3660 <___svfprintf_internal_r+0x11e0>
    2a88:	42000204 	addi	r8,r8,8
    2a8c:	dac02b17 	ldw	r11,172(sp)
    2a90:	58000c26 	beq	r11,zero,2ac4 <___svfprintf_internal_r+0x644>
    2a94:	d8801f17 	ldw	r2,124(sp)
    2a98:	d9002704 	addi	r4,sp,156
    2a9c:	18c00084 	addi	r3,r3,2
    2aa0:	10800044 	addi	r2,r2,1
    2aa4:	41000015 	stw	r4,0(r8)
    2aa8:	01000084 	movi	r4,2
    2aac:	41000115 	stw	r4,4(r8)
    2ab0:	d8c02015 	stw	r3,128(sp)
    2ab4:	d8801f15 	stw	r2,124(sp)
    2ab8:	010001c4 	movi	r4,7
    2abc:	2082e016 	blt	r4,r2,3640 <___svfprintf_internal_r+0x11c0>
    2ac0:	42000204 	addi	r8,r8,8
    2ac4:	db002c17 	ldw	r12,176(sp)
    2ac8:	00802004 	movi	r2,128
    2acc:	60822f26 	beq	r12,r2,338c <___svfprintf_internal_r+0xf0c>
    2ad0:	db003217 	ldw	r12,200(sp)
    2ad4:	64abc83a 	sub	r21,r12,r18
    2ad8:	0540310e 	bge	zero,r21,2ba0 <___svfprintf_internal_r+0x720>
    2adc:	07000404 	movi	fp,16
    2ae0:	d8801f17 	ldw	r2,124(sp)
    2ae4:	e544270e 	bge	fp,r21,3b84 <___svfprintf_internal_r+0x1704>
    2ae8:	014000b4 	movhi	r5,2
    2aec:	a809883a 	mov	r4,r21
    2af0:	297c2484 	addi	r5,r5,-3950
    2af4:	dc002c15 	stw	r16,176(sp)
    2af8:	902b883a 	mov	r21,r18
    2afc:	d9402b15 	stw	r5,172(sp)
    2b00:	8825883a 	mov	r18,r17
    2b04:	04c001c4 	movi	r19,7
    2b08:	dc002f17 	ldw	r16,188(sp)
    2b0c:	2023883a 	mov	r17,r4
    2b10:	00000306 	br	2b20 <___svfprintf_internal_r+0x6a0>
    2b14:	8c7ffc04 	addi	r17,r17,-16
    2b18:	42000204 	addi	r8,r8,8
    2b1c:	e440110e 	bge	fp,r17,2b64 <___svfprintf_internal_r+0x6e4>
    2b20:	18c00404 	addi	r3,r3,16
    2b24:	10800044 	addi	r2,r2,1
    2b28:	45000015 	stw	r20,0(r8)
    2b2c:	47000115 	stw	fp,4(r8)
    2b30:	d8c02015 	stw	r3,128(sp)
    2b34:	d8801f15 	stw	r2,124(sp)
    2b38:	98bff60e 	bge	r19,r2,2b14 <__alt_mem_Flash_flash_data+0xf4002b14>
    2b3c:	8009883a 	mov	r4,r16
    2b40:	b80b883a 	mov	r5,r23
    2b44:	b00d883a 	mov	r6,r22
    2b48:	000b4140 	call	b414 <__ssprint_r>
    2b4c:	103f141e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2b50:	8c7ffc04 	addi	r17,r17,-16
    2b54:	d8c02017 	ldw	r3,128(sp)
    2b58:	d8801f17 	ldw	r2,124(sp)
    2b5c:	da000404 	addi	r8,sp,16
    2b60:	e47fef16 	blt	fp,r17,2b20 <__alt_mem_Flash_flash_data+0xf4002b20>
    2b64:	dc002c17 	ldw	r16,176(sp)
    2b68:	8809883a 	mov	r4,r17
    2b6c:	9023883a 	mov	r17,r18
    2b70:	a825883a 	mov	r18,r21
    2b74:	202b883a 	mov	r21,r4
    2b78:	dac02b17 	ldw	r11,172(sp)
    2b7c:	1d47883a 	add	r3,r3,r21
    2b80:	10800044 	addi	r2,r2,1
    2b84:	42c00015 	stw	r11,0(r8)
    2b88:	45400115 	stw	r21,4(r8)
    2b8c:	d8c02015 	stw	r3,128(sp)
    2b90:	d8801f15 	stw	r2,124(sp)
    2b94:	010001c4 	movi	r4,7
    2b98:	2082a116 	blt	r4,r2,3620 <___svfprintf_internal_r+0x11a0>
    2b9c:	42000204 	addi	r8,r8,8
    2ba0:	8880400c 	andi	r2,r17,256
    2ba4:	1001b01e 	bne	r2,zero,3268 <___svfprintf_internal_r+0xde8>
    2ba8:	d8801f17 	ldw	r2,124(sp)
    2bac:	db003117 	ldw	r12,196(sp)
    2bb0:	1c87883a 	add	r3,r3,r18
    2bb4:	10800044 	addi	r2,r2,1
    2bb8:	43000015 	stw	r12,0(r8)
    2bbc:	44800115 	stw	r18,4(r8)
    2bc0:	d8c02015 	stw	r3,128(sp)
    2bc4:	d8801f15 	stw	r2,124(sp)
    2bc8:	010001c4 	movi	r4,7
    2bcc:	20828216 	blt	r4,r2,35d8 <___svfprintf_internal_r+0x1158>
    2bd0:	42000204 	addi	r8,r8,8
    2bd4:	8c40010c 	andi	r17,r17,4
    2bd8:	88003226 	beq	r17,zero,2ca4 <___svfprintf_internal_r+0x824>
    2bdc:	db002e17 	ldw	r12,184(sp)
    2be0:	dac02a17 	ldw	r11,168(sp)
    2be4:	62e1c83a 	sub	r16,r12,r11
    2be8:	04002e0e 	bge	zero,r16,2ca4 <___svfprintf_internal_r+0x824>
    2bec:	04400404 	movi	r17,16
    2bf0:	d8801f17 	ldw	r2,124(sp)
    2bf4:	8c05330e 	bge	r17,r16,40c4 <___svfprintf_internal_r+0x1c44>
    2bf8:	010000b4 	movhi	r4,2
    2bfc:	213c2884 	addi	r4,r4,-3934
    2c00:	d9003615 	stw	r4,216(sp)
    2c04:	048001c4 	movi	r18,7
    2c08:	dcc02f17 	ldw	r19,188(sp)
    2c0c:	00000306 	br	2c1c <___svfprintf_internal_r+0x79c>
    2c10:	843ffc04 	addi	r16,r16,-16
    2c14:	42000204 	addi	r8,r8,8
    2c18:	8c00130e 	bge	r17,r16,2c68 <___svfprintf_internal_r+0x7e8>
    2c1c:	014000b4 	movhi	r5,2
    2c20:	18c00404 	addi	r3,r3,16
    2c24:	10800044 	addi	r2,r2,1
    2c28:	297c2884 	addi	r5,r5,-3934
    2c2c:	41400015 	stw	r5,0(r8)
    2c30:	44400115 	stw	r17,4(r8)
    2c34:	d8c02015 	stw	r3,128(sp)
    2c38:	d8801f15 	stw	r2,124(sp)
    2c3c:	90bff40e 	bge	r18,r2,2c10 <__alt_mem_Flash_flash_data+0xf4002c10>
    2c40:	9809883a 	mov	r4,r19
    2c44:	b80b883a 	mov	r5,r23
    2c48:	b00d883a 	mov	r6,r22
    2c4c:	000b4140 	call	b414 <__ssprint_r>
    2c50:	103ed31e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2c54:	843ffc04 	addi	r16,r16,-16
    2c58:	d8c02017 	ldw	r3,128(sp)
    2c5c:	d8801f17 	ldw	r2,124(sp)
    2c60:	da000404 	addi	r8,sp,16
    2c64:	8c3fed16 	blt	r17,r16,2c1c <__alt_mem_Flash_flash_data+0xf4002c1c>
    2c68:	dac03617 	ldw	r11,216(sp)
    2c6c:	1c07883a 	add	r3,r3,r16
    2c70:	10800044 	addi	r2,r2,1
    2c74:	42c00015 	stw	r11,0(r8)
    2c78:	44000115 	stw	r16,4(r8)
    2c7c:	d8c02015 	stw	r3,128(sp)
    2c80:	d8801f15 	stw	r2,124(sp)
    2c84:	010001c4 	movi	r4,7
    2c88:	2080060e 	bge	r4,r2,2ca4 <___svfprintf_internal_r+0x824>
    2c8c:	d9002f17 	ldw	r4,188(sp)
    2c90:	b80b883a 	mov	r5,r23
    2c94:	b00d883a 	mov	r6,r22
    2c98:	000b4140 	call	b414 <__ssprint_r>
    2c9c:	103ec01e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2ca0:	d8c02017 	ldw	r3,128(sp)
    2ca4:	d8802a17 	ldw	r2,168(sp)
    2ca8:	db002e17 	ldw	r12,184(sp)
    2cac:	1300010e 	bge	r2,r12,2cb4 <___svfprintf_internal_r+0x834>
    2cb0:	6005883a 	mov	r2,r12
    2cb4:	dac03017 	ldw	r11,192(sp)
    2cb8:	5897883a 	add	r11,r11,r2
    2cbc:	dac03015 	stw	r11,192(sp)
    2cc0:	1802331e 	bne	r3,zero,3590 <___svfprintf_internal_r+0x1110>
    2cc4:	d8001f15 	stw	zero,124(sp)
    2cc8:	da000404 	addi	r8,sp,16
    2ccc:	003e1806 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    2cd0:	db002d17 	ldw	r12,180(sp)
    2cd4:	dac02d17 	ldw	r11,180(sp)
    2cd8:	d8c02915 	stw	r3,164(sp)
    2cdc:	63000017 	ldw	r12,0(r12)
    2ce0:	5ac00117 	ldw	r11,4(r11)
    2ce4:	d9802785 	stb	r6,158(sp)
    2ce8:	6009883a 	mov	r4,r12
    2cec:	580b883a 	mov	r5,r11
    2cf0:	db003715 	stw	r12,220(sp)
    2cf4:	da004015 	stw	r8,256(sp)
    2cf8:	da403f15 	stw	r9,252(sp)
    2cfc:	dac03815 	stw	r11,224(sp)
    2d00:	000b2100 	call	b210 <__fpclassifyd>
    2d04:	db002d17 	ldw	r12,180(sp)
    2d08:	04800044 	movi	r18,1
    2d0c:	da004017 	ldw	r8,256(sp)
    2d10:	64c00204 	addi	r19,r12,8
    2d14:	da403f17 	ldw	r9,252(sp)
    2d18:	d9003717 	ldw	r4,220(sp)
    2d1c:	d9403817 	ldw	r5,224(sp)
    2d20:	1483561e 	bne	r2,r18,3a7c <___svfprintf_internal_r+0x15fc>
    2d24:	000d883a 	mov	r6,zero
    2d28:	000f883a 	mov	r7,zero
    2d2c:	001031c0 	call	1031c <__ledf2>
    2d30:	da004017 	ldw	r8,256(sp)
    2d34:	1004ee16 	blt	r2,zero,40f0 <___svfprintf_internal_r+0x1c70>
    2d38:	dd402783 	ldbu	r21,158(sp)
    2d3c:	008011c4 	movi	r2,71
    2d40:	1404440e 	bge	r2,r16,3e54 <___svfprintf_internal_r+0x19d4>
    2d44:	00c000b4 	movhi	r3,2
    2d48:	18fc1504 	addi	r3,r3,-4012
    2d4c:	d8c03115 	stw	r3,196(sp)
    2d50:	02c000c4 	movi	r11,3
    2d54:	00bfdfc4 	movi	r2,-129
    2d58:	dac02a15 	stw	r11,168(sp)
    2d5c:	88a2703a 	and	r17,r17,r2
    2d60:	dcc02d15 	stw	r19,180(sp)
    2d64:	5825883a 	mov	r18,r11
    2d68:	d8003215 	stw	zero,200(sp)
    2d6c:	d8003415 	stw	zero,208(sp)
    2d70:	003eef06 	br	2930 <__alt_mem_Flash_flash_data+0xf4002930>
    2d74:	8c400214 	ori	r17,r17,8
    2d78:	1805883a 	mov	r2,r3
    2d7c:	1c000007 	ldb	r16,0(r3)
    2d80:	003e1506 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2d84:	8c400414 	ori	r17,r17,16
    2d88:	d8c02915 	stw	r3,164(sp)
    2d8c:	88c0080c 	andi	r3,r17,32
    2d90:	d8802d17 	ldw	r2,180(sp)
    2d94:	18005526 	beq	r3,zero,2eec <___svfprintf_internal_r+0xa6c>
    2d98:	dac02d17 	ldw	r11,180(sp)
    2d9c:	14c00017 	ldw	r19,0(r2)
    2da0:	17000117 	ldw	fp,4(r2)
    2da4:	5ac00204 	addi	r11,r11,8
    2da8:	dac02d15 	stw	r11,180(sp)
    2dac:	00800044 	movi	r2,1
    2db0:	9f06b03a 	or	r3,r19,fp
    2db4:	d8002785 	stb	zero,158(sp)
    2db8:	da403215 	stw	r9,200(sp)
    2dbc:	002b883a 	mov	r21,zero
    2dc0:	003eb406 	br	2894 <__alt_mem_Flash_flash_data+0xf4002894>
    2dc4:	030000b4 	movhi	r12,2
    2dc8:	633c1804 	addi	r12,r12,-4000
    2dcc:	d8c02915 	stw	r3,164(sp)
    2dd0:	d9802785 	stb	r6,158(sp)
    2dd4:	db003b15 	stw	r12,236(sp)
    2dd8:	88c0080c 	andi	r3,r17,32
    2ddc:	d8802d17 	ldw	r2,180(sp)
    2de0:	18005626 	beq	r3,zero,2f3c <___svfprintf_internal_r+0xabc>
    2de4:	dac02d17 	ldw	r11,180(sp)
    2de8:	14c00017 	ldw	r19,0(r2)
    2dec:	17000117 	ldw	fp,4(r2)
    2df0:	5ac00204 	addi	r11,r11,8
    2df4:	dac02d15 	stw	r11,180(sp)
    2df8:	8880004c 	andi	r2,r17,1
    2dfc:	10029326 	beq	r2,zero,384c <___svfprintf_internal_r+0x13cc>
    2e00:	9f06b03a 	or	r3,r19,fp
    2e04:	18033526 	beq	r3,zero,3adc <___svfprintf_internal_r+0x165c>
    2e08:	00800c04 	movi	r2,48
    2e0c:	d8802705 	stb	r2,156(sp)
    2e10:	dc002745 	stb	r16,157(sp)
    2e14:	8c400094 	ori	r17,r17,2
    2e18:	00800084 	movi	r2,2
    2e1c:	003fe506 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    2e20:	1805883a 	mov	r2,r3
    2e24:	d8002e15 	stw	zero,184(sp)
    2e28:	82fff404 	addi	r11,r16,-48
    2e2c:	0019883a 	mov	r12,zero
    2e30:	14000007 	ldb	r16,0(r2)
    2e34:	630002a4 	muli	r12,r12,10
    2e38:	18c00044 	addi	r3,r3,1
    2e3c:	1805883a 	mov	r2,r3
    2e40:	62d9883a 	add	r12,r12,r11
    2e44:	82fff404 	addi	r11,r16,-48
    2e48:	2afff92e 	bgeu	r5,r11,2e30 <__alt_mem_Flash_flash_data+0xf4002e30>
    2e4c:	db002e15 	stw	r12,184(sp)
    2e50:	003de206 	br	25dc <__alt_mem_Flash_flash_data+0xf40025dc>
    2e54:	8c400814 	ori	r17,r17,32
    2e58:	1805883a 	mov	r2,r3
    2e5c:	1c000007 	ldb	r16,0(r3)
    2e60:	003ddd06 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2e64:	dac02d17 	ldw	r11,180(sp)
    2e68:	db002d17 	ldw	r12,180(sp)
    2e6c:	d8c02915 	stw	r3,164(sp)
    2e70:	5ac00017 	ldw	r11,0(r11)
    2e74:	d8002785 	stb	zero,158(sp)
    2e78:	64c00104 	addi	r19,r12,4
    2e7c:	dac03115 	stw	r11,196(sp)
    2e80:	58048126 	beq	r11,zero,4088 <___svfprintf_internal_r+0x1c08>
    2e84:	d9003117 	ldw	r4,196(sp)
    2e88:	48041716 	blt	r9,zero,3ee8 <___svfprintf_internal_r+0x1a68>
    2e8c:	480d883a 	mov	r6,r9
    2e90:	000b883a 	mov	r5,zero
    2e94:	da004015 	stw	r8,256(sp)
    2e98:	da403f15 	stw	r9,252(sp)
    2e9c:	000998c0 	call	998c <memchr>
    2ea0:	da004017 	ldw	r8,256(sp)
    2ea4:	da403f17 	ldw	r9,252(sp)
    2ea8:	1004db26 	beq	r2,zero,4218 <___svfprintf_internal_r+0x1d98>
    2eac:	d8c03117 	ldw	r3,196(sp)
    2eb0:	10e5c83a 	sub	r18,r2,r3
    2eb4:	4c80010e 	bge	r9,r18,2ebc <___svfprintf_internal_r+0xa3c>
    2eb8:	4825883a 	mov	r18,r9
    2ebc:	9005883a 	mov	r2,r18
    2ec0:	90040e16 	blt	r18,zero,3efc <___svfprintf_internal_r+0x1a7c>
    2ec4:	dd402783 	ldbu	r21,158(sp)
    2ec8:	d8802a15 	stw	r2,168(sp)
    2ecc:	dcc02d15 	stw	r19,180(sp)
    2ed0:	d8003215 	stw	zero,200(sp)
    2ed4:	d8003415 	stw	zero,208(sp)
    2ed8:	003e9506 	br	2930 <__alt_mem_Flash_flash_data+0xf4002930>
    2edc:	d8c02915 	stw	r3,164(sp)
    2ee0:	88c0080c 	andi	r3,r17,32
    2ee4:	d8802d17 	ldw	r2,180(sp)
    2ee8:	183fab1e 	bne	r3,zero,2d98 <__alt_mem_Flash_flash_data+0xf4002d98>
    2eec:	88c0040c 	andi	r3,r17,16
    2ef0:	1802681e 	bne	r3,zero,3894 <___svfprintf_internal_r+0x1414>
    2ef4:	88c0100c 	andi	r3,r17,64
    2ef8:	18026626 	beq	r3,zero,3894 <___svfprintf_internal_r+0x1414>
    2efc:	dac02d17 	ldw	r11,180(sp)
    2f00:	14c0000b 	ldhu	r19,0(r2)
    2f04:	0039883a 	mov	fp,zero
    2f08:	5ac00104 	addi	r11,r11,4
    2f0c:	dac02d15 	stw	r11,180(sp)
    2f10:	00800044 	movi	r2,1
    2f14:	9807883a 	mov	r3,r19
    2f18:	003fa606 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    2f1c:	008000b4 	movhi	r2,2
    2f20:	10bc1d04 	addi	r2,r2,-3980
    2f24:	d8c02915 	stw	r3,164(sp)
    2f28:	d8803b15 	stw	r2,236(sp)
    2f2c:	d9802785 	stb	r6,158(sp)
    2f30:	88c0080c 	andi	r3,r17,32
    2f34:	d8802d17 	ldw	r2,180(sp)
    2f38:	183faa1e 	bne	r3,zero,2de4 <__alt_mem_Flash_flash_data+0xf4002de4>
    2f3c:	88c0040c 	andi	r3,r17,16
    2f40:	1802e826 	beq	r3,zero,3ae4 <___svfprintf_internal_r+0x1664>
    2f44:	db002d17 	ldw	r12,180(sp)
    2f48:	14c00017 	ldw	r19,0(r2)
    2f4c:	0039883a 	mov	fp,zero
    2f50:	63000104 	addi	r12,r12,4
    2f54:	db002d15 	stw	r12,180(sp)
    2f58:	003fa706 	br	2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    2f5c:	30803fcc 	andi	r2,r6,255
    2f60:	1080201c 	xori	r2,r2,128
    2f64:	10bfe004 	addi	r2,r2,-128
    2f68:	1002d91e 	bne	r2,zero,3ad0 <___svfprintf_internal_r+0x1650>
    2f6c:	1805883a 	mov	r2,r3
    2f70:	01800804 	movi	r6,32
    2f74:	1c000007 	ldb	r16,0(r3)
    2f78:	003d9706 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2f7c:	8c400054 	ori	r17,r17,1
    2f80:	1805883a 	mov	r2,r3
    2f84:	1c000007 	ldb	r16,0(r3)
    2f88:	003d9306 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2f8c:	dac02d17 	ldw	r11,180(sp)
    2f90:	db002d17 	ldw	r12,180(sp)
    2f94:	5ac00017 	ldw	r11,0(r11)
    2f98:	dac02e15 	stw	r11,184(sp)
    2f9c:	62c00104 	addi	r11,r12,4
    2fa0:	db002e17 	ldw	r12,184(sp)
    2fa4:	60033e16 	blt	r12,zero,3ca0 <___svfprintf_internal_r+0x1820>
    2fa8:	dac02d15 	stw	r11,180(sp)
    2fac:	1805883a 	mov	r2,r3
    2fb0:	1c000007 	ldb	r16,0(r3)
    2fb4:	003d8806 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2fb8:	1805883a 	mov	r2,r3
    2fbc:	01800ac4 	movi	r6,43
    2fc0:	1c000007 	ldb	r16,0(r3)
    2fc4:	003d8406 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2fc8:	8c401014 	ori	r17,r17,64
    2fcc:	1805883a 	mov	r2,r3
    2fd0:	1c000007 	ldb	r16,0(r3)
    2fd4:	003d8006 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2fd8:	1c000007 	ldb	r16,0(r3)
    2fdc:	81c33626 	beq	r16,r7,3cb8 <___svfprintf_internal_r+0x1838>
    2fe0:	8c400414 	ori	r17,r17,16
    2fe4:	1805883a 	mov	r2,r3
    2fe8:	003d7b06 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    2fec:	d8c02915 	stw	r3,164(sp)
    2ff0:	d9802785 	stb	r6,158(sp)
    2ff4:	8880080c 	andi	r2,r17,32
    2ff8:	1002c226 	beq	r2,zero,3b04 <___svfprintf_internal_r+0x1684>
    2ffc:	db002d17 	ldw	r12,180(sp)
    3000:	dac03017 	ldw	r11,192(sp)
    3004:	60800017 	ldw	r2,0(r12)
    3008:	5807d7fa 	srai	r3,r11,31
    300c:	63000104 	addi	r12,r12,4
    3010:	db002d15 	stw	r12,180(sp)
    3014:	12c00015 	stw	r11,0(r2)
    3018:	10c00115 	stw	r3,4(r2)
    301c:	003d4406 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    3020:	db002d17 	ldw	r12,180(sp)
    3024:	00800c04 	movi	r2,48
    3028:	d8802705 	stb	r2,156(sp)
    302c:	64c00017 	ldw	r19,0(r12)
    3030:	00801e04 	movi	r2,120
    3034:	d8802745 	stb	r2,157(sp)
    3038:	008000b4 	movhi	r2,2
    303c:	10bc1d04 	addi	r2,r2,-3980
    3040:	63000104 	addi	r12,r12,4
    3044:	d8c02915 	stw	r3,164(sp)
    3048:	d8803b15 	stw	r2,236(sp)
    304c:	0039883a 	mov	fp,zero
    3050:	8c400094 	ori	r17,r17,2
    3054:	db002d15 	stw	r12,180(sp)
    3058:	00800084 	movi	r2,2
    305c:	04001e04 	movi	r16,120
    3060:	9807883a 	mov	r3,r19
    3064:	003f5306 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    3068:	db002d17 	ldw	r12,180(sp)
    306c:	d8c02915 	stw	r3,164(sp)
    3070:	dac01404 	addi	r11,sp,80
    3074:	60800017 	ldw	r2,0(r12)
    3078:	00c00044 	movi	r3,1
    307c:	63000104 	addi	r12,r12,4
    3080:	d8801405 	stb	r2,80(sp)
    3084:	d8c02a15 	stw	r3,168(sp)
    3088:	d8002785 	stb	zero,158(sp)
    308c:	db002d15 	stw	r12,180(sp)
    3090:	1825883a 	mov	r18,r3
    3094:	d8003215 	stw	zero,200(sp)
    3098:	d8003415 	stw	zero,208(sp)
    309c:	dac03115 	stw	r11,196(sp)
    30a0:	0005883a 	mov	r2,zero
    30a4:	003e2906 	br	294c <__alt_mem_Flash_flash_data+0xf400294c>
    30a8:	d8c02915 	stw	r3,164(sp)
    30ac:	d9802785 	stb	r6,158(sp)
    30b0:	8880080c 	andi	r2,r17,32
    30b4:	d8c02d17 	ldw	r3,180(sp)
    30b8:	103deb1e 	bne	r2,zero,2868 <__alt_mem_Flash_flash_data+0xf4002868>
    30bc:	8880040c 	andi	r2,r17,16
    30c0:	1001e51e 	bne	r2,zero,3858 <___svfprintf_internal_r+0x13d8>
    30c4:	8880100c 	andi	r2,r17,64
    30c8:	1001e326 	beq	r2,zero,3858 <___svfprintf_internal_r+0x13d8>
    30cc:	1cc0000f 	ldh	r19,0(r3)
    30d0:	db002d17 	ldw	r12,180(sp)
    30d4:	9839d7fa 	srai	fp,r19,31
    30d8:	63000104 	addi	r12,r12,4
    30dc:	db002d15 	stw	r12,180(sp)
    30e0:	e005883a 	mov	r2,fp
    30e4:	103de70e 	bge	r2,zero,2884 <__alt_mem_Flash_flash_data+0xf4002884>
    30e8:	04e7c83a 	sub	r19,zero,r19
    30ec:	9804c03a 	cmpne	r2,r19,zero
    30f0:	0739c83a 	sub	fp,zero,fp
    30f4:	e0b9c83a 	sub	fp,fp,r2
    30f8:	05400b44 	movi	r21,45
    30fc:	dd402785 	stb	r21,158(sp)
    3100:	da403215 	stw	r9,200(sp)
    3104:	00800044 	movi	r2,1
    3108:	9f06b03a 	or	r3,r19,fp
    310c:	003de106 	br	2894 <__alt_mem_Flash_flash_data+0xf4002894>
    3110:	8c400414 	ori	r17,r17,16
    3114:	d8c02915 	stw	r3,164(sp)
    3118:	8880080c 	andi	r2,r17,32
    311c:	10000b26 	beq	r2,zero,314c <___svfprintf_internal_r+0xccc>
    3120:	db002d17 	ldw	r12,180(sp)
    3124:	0005883a 	mov	r2,zero
    3128:	64c00017 	ldw	r19,0(r12)
    312c:	67000117 	ldw	fp,4(r12)
    3130:	63000204 	addi	r12,r12,8
    3134:	db002d15 	stw	r12,180(sp)
    3138:	9f06b03a 	or	r3,r19,fp
    313c:	003f1d06 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    3140:	d8c02915 	stw	r3,164(sp)
    3144:	8880080c 	andi	r2,r17,32
    3148:	103ff51e 	bne	r2,zero,3120 <__alt_mem_Flash_flash_data+0xf4003120>
    314c:	8880040c 	andi	r2,r17,16
    3150:	1001c81e 	bne	r2,zero,3874 <___svfprintf_internal_r+0x13f4>
    3154:	8880100c 	andi	r2,r17,64
    3158:	1001c626 	beq	r2,zero,3874 <___svfprintf_internal_r+0x13f4>
    315c:	db002d17 	ldw	r12,180(sp)
    3160:	0039883a 	mov	fp,zero
    3164:	0005883a 	mov	r2,zero
    3168:	64c0000b 	ldhu	r19,0(r12)
    316c:	63000104 	addi	r12,r12,4
    3170:	db002d15 	stw	r12,180(sp)
    3174:	9807883a 	mov	r3,r19
    3178:	003f0e06 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    317c:	d8c02915 	stw	r3,164(sp)
    3180:	d9802785 	stb	r6,158(sp)
    3184:	803d8026 	beq	r16,zero,2788 <__alt_mem_Flash_flash_data+0xf4002788>
    3188:	02c00044 	movi	r11,1
    318c:	db001404 	addi	r12,sp,80
    3190:	dac02a15 	stw	r11,168(sp)
    3194:	dc001405 	stb	r16,80(sp)
    3198:	d8002785 	stb	zero,158(sp)
    319c:	5825883a 	mov	r18,r11
    31a0:	d8003215 	stw	zero,200(sp)
    31a4:	d8003415 	stw	zero,208(sp)
    31a8:	db003115 	stw	r12,196(sp)
    31ac:	0005883a 	mov	r2,zero
    31b0:	003de606 	br	294c <__alt_mem_Flash_flash_data+0xf400294c>
    31b4:	d8c02017 	ldw	r3,128(sp)
    31b8:	003e2706 	br	2a58 <__alt_mem_Flash_flash_data+0xf4002a58>
    31bc:	10803fcc 	andi	r2,r2,255
    31c0:	00c00044 	movi	r3,1
    31c4:	10fdbb1e 	bne	r2,r3,28b4 <__alt_mem_Flash_flash_data+0xf40028b4>
    31c8:	e000021e 	bne	fp,zero,31d4 <___svfprintf_internal_r+0xd54>
    31cc:	00800244 	movi	r2,9
    31d0:	14c01f2e 	bgeu	r2,r19,3250 <___svfprintf_internal_r+0xdd0>
    31d4:	dc002a15 	stw	r16,168(sp)
    31d8:	dc402b15 	stw	r17,172(sp)
    31dc:	9821883a 	mov	r16,r19
    31e0:	e023883a 	mov	r17,fp
    31e4:	b025883a 	mov	r18,r22
    31e8:	4827883a 	mov	r19,r9
    31ec:	4039883a 	mov	fp,r8
    31f0:	8009883a 	mov	r4,r16
    31f4:	880b883a 	mov	r5,r17
    31f8:	01800284 	movi	r6,10
    31fc:	000f883a 	mov	r7,zero
    3200:	000e9940 	call	e994 <__umoddi3>
    3204:	10800c04 	addi	r2,r2,48
    3208:	94bfffc4 	addi	r18,r18,-1
    320c:	8009883a 	mov	r4,r16
    3210:	880b883a 	mov	r5,r17
    3214:	01800284 	movi	r6,10
    3218:	000f883a 	mov	r7,zero
    321c:	90800005 	stb	r2,0(r18)
    3220:	000e3d40 	call	e3d4 <__udivdi3>
    3224:	1021883a 	mov	r16,r2
    3228:	10c4b03a 	or	r2,r2,r3
    322c:	1823883a 	mov	r17,r3
    3230:	103fef1e 	bne	r2,zero,31f0 <__alt_mem_Flash_flash_data+0xf40031f0>
    3234:	dc803115 	stw	r18,196(sp)
    3238:	dc002a17 	ldw	r16,168(sp)
    323c:	dc402b17 	ldw	r17,172(sp)
    3240:	9813883a 	mov	r9,r19
    3244:	e011883a 	mov	r8,fp
    3248:	b4a5c83a 	sub	r18,r22,r18
    324c:	003db306 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    3250:	9cc00c04 	addi	r19,r19,48
    3254:	db001dc4 	addi	r12,sp,119
    3258:	dcc01dc5 	stb	r19,119(sp)
    325c:	dc803d17 	ldw	r18,244(sp)
    3260:	db003115 	stw	r12,196(sp)
    3264:	003dad06 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    3268:	00801944 	movi	r2,101
    326c:	14008d0e 	bge	r2,r16,34a4 <___svfprintf_internal_r+0x1024>
    3270:	d9003717 	ldw	r4,220(sp)
    3274:	d9403817 	ldw	r5,224(sp)
    3278:	000d883a 	mov	r6,zero
    327c:	000f883a 	mov	r7,zero
    3280:	d8c03e15 	stw	r3,248(sp)
    3284:	da004015 	stw	r8,256(sp)
    3288:	00101b80 	call	101b8 <__eqdf2>
    328c:	d8c03e17 	ldw	r3,248(sp)
    3290:	da004017 	ldw	r8,256(sp)
    3294:	1000fd1e 	bne	r2,zero,368c <___svfprintf_internal_r+0x120c>
    3298:	d8801f17 	ldw	r2,124(sp)
    329c:	010000b4 	movhi	r4,2
    32a0:	213c2404 	addi	r4,r4,-3952
    32a4:	18c00044 	addi	r3,r3,1
    32a8:	10800044 	addi	r2,r2,1
    32ac:	41000015 	stw	r4,0(r8)
    32b0:	01000044 	movi	r4,1
    32b4:	41000115 	stw	r4,4(r8)
    32b8:	d8c02015 	stw	r3,128(sp)
    32bc:	d8801f15 	stw	r2,124(sp)
    32c0:	010001c4 	movi	r4,7
    32c4:	20823316 	blt	r4,r2,3b94 <___svfprintf_internal_r+0x1714>
    32c8:	42000204 	addi	r8,r8,8
    32cc:	d8802617 	ldw	r2,152(sp)
    32d0:	dac03317 	ldw	r11,204(sp)
    32d4:	12c00216 	blt	r2,r11,32e0 <___svfprintf_internal_r+0xe60>
    32d8:	8880004c 	andi	r2,r17,1
    32dc:	103e3d26 	beq	r2,zero,2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    32e0:	db003917 	ldw	r12,228(sp)
    32e4:	d8801f17 	ldw	r2,124(sp)
    32e8:	dac03517 	ldw	r11,212(sp)
    32ec:	1b07883a 	add	r3,r3,r12
    32f0:	10800044 	addi	r2,r2,1
    32f4:	42c00015 	stw	r11,0(r8)
    32f8:	43000115 	stw	r12,4(r8)
    32fc:	d8c02015 	stw	r3,128(sp)
    3300:	d8801f15 	stw	r2,124(sp)
    3304:	010001c4 	movi	r4,7
    3308:	20826f16 	blt	r4,r2,3cc8 <___svfprintf_internal_r+0x1848>
    330c:	42000204 	addi	r8,r8,8
    3310:	db003317 	ldw	r12,204(sp)
    3314:	643fffc4 	addi	r16,r12,-1
    3318:	043e2e0e 	bge	zero,r16,2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    331c:	04800404 	movi	r18,16
    3320:	d8801f17 	ldw	r2,124(sp)
    3324:	9400a00e 	bge	r18,r16,35a8 <___svfprintf_internal_r+0x1128>
    3328:	014000b4 	movhi	r5,2
    332c:	297c2484 	addi	r5,r5,-3950
    3330:	d9402b15 	stw	r5,172(sp)
    3334:	054001c4 	movi	r21,7
    3338:	dcc02f17 	ldw	r19,188(sp)
    333c:	00000306 	br	334c <___svfprintf_internal_r+0xecc>
    3340:	42000204 	addi	r8,r8,8
    3344:	843ffc04 	addi	r16,r16,-16
    3348:	94009a0e 	bge	r18,r16,35b4 <___svfprintf_internal_r+0x1134>
    334c:	18c00404 	addi	r3,r3,16
    3350:	10800044 	addi	r2,r2,1
    3354:	45000015 	stw	r20,0(r8)
    3358:	44800115 	stw	r18,4(r8)
    335c:	d8c02015 	stw	r3,128(sp)
    3360:	d8801f15 	stw	r2,124(sp)
    3364:	a8bff60e 	bge	r21,r2,3340 <__alt_mem_Flash_flash_data+0xf4003340>
    3368:	9809883a 	mov	r4,r19
    336c:	b80b883a 	mov	r5,r23
    3370:	b00d883a 	mov	r6,r22
    3374:	000b4140 	call	b414 <__ssprint_r>
    3378:	103d091e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    337c:	d8c02017 	ldw	r3,128(sp)
    3380:	d8801f17 	ldw	r2,124(sp)
    3384:	da000404 	addi	r8,sp,16
    3388:	003fee06 	br	3344 <__alt_mem_Flash_flash_data+0xf4003344>
    338c:	dac02e17 	ldw	r11,184(sp)
    3390:	db002a17 	ldw	r12,168(sp)
    3394:	5b2bc83a 	sub	r21,r11,r12
    3398:	057dcd0e 	bge	zero,r21,2ad0 <__alt_mem_Flash_flash_data+0xf4002ad0>
    339c:	07000404 	movi	fp,16
    33a0:	d8801f17 	ldw	r2,124(sp)
    33a4:	e5435d0e 	bge	fp,r21,411c <___svfprintf_internal_r+0x1c9c>
    33a8:	014000b4 	movhi	r5,2
    33ac:	a809883a 	mov	r4,r21
    33b0:	297c2484 	addi	r5,r5,-3950
    33b4:	dc002c15 	stw	r16,176(sp)
    33b8:	902b883a 	mov	r21,r18
    33bc:	d9402b15 	stw	r5,172(sp)
    33c0:	8825883a 	mov	r18,r17
    33c4:	04c001c4 	movi	r19,7
    33c8:	dc002f17 	ldw	r16,188(sp)
    33cc:	2023883a 	mov	r17,r4
    33d0:	00000306 	br	33e0 <___svfprintf_internal_r+0xf60>
    33d4:	8c7ffc04 	addi	r17,r17,-16
    33d8:	42000204 	addi	r8,r8,8
    33dc:	e440110e 	bge	fp,r17,3424 <___svfprintf_internal_r+0xfa4>
    33e0:	18c00404 	addi	r3,r3,16
    33e4:	10800044 	addi	r2,r2,1
    33e8:	45000015 	stw	r20,0(r8)
    33ec:	47000115 	stw	fp,4(r8)
    33f0:	d8c02015 	stw	r3,128(sp)
    33f4:	d8801f15 	stw	r2,124(sp)
    33f8:	98bff60e 	bge	r19,r2,33d4 <__alt_mem_Flash_flash_data+0xf40033d4>
    33fc:	8009883a 	mov	r4,r16
    3400:	b80b883a 	mov	r5,r23
    3404:	b00d883a 	mov	r6,r22
    3408:	000b4140 	call	b414 <__ssprint_r>
    340c:	103ce41e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3410:	8c7ffc04 	addi	r17,r17,-16
    3414:	d8c02017 	ldw	r3,128(sp)
    3418:	d8801f17 	ldw	r2,124(sp)
    341c:	da000404 	addi	r8,sp,16
    3420:	e47fef16 	blt	fp,r17,33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3424:	dc002c17 	ldw	r16,176(sp)
    3428:	8809883a 	mov	r4,r17
    342c:	9023883a 	mov	r17,r18
    3430:	a825883a 	mov	r18,r21
    3434:	202b883a 	mov	r21,r4
    3438:	dac02b17 	ldw	r11,172(sp)
    343c:	1d47883a 	add	r3,r3,r21
    3440:	10800044 	addi	r2,r2,1
    3444:	42c00015 	stw	r11,0(r8)
    3448:	45400115 	stw	r21,4(r8)
    344c:	d8c02015 	stw	r3,128(sp)
    3450:	d8801f15 	stw	r2,124(sp)
    3454:	010001c4 	movi	r4,7
    3458:	20818016 	blt	r4,r2,3a5c <___svfprintf_internal_r+0x15dc>
    345c:	42000204 	addi	r8,r8,8
    3460:	003d9b06 	br	2ad0 <__alt_mem_Flash_flash_data+0xf4002ad0>
    3464:	d9403b17 	ldw	r5,236(sp)
    3468:	b007883a 	mov	r3,r22
    346c:	988003cc 	andi	r2,r19,15
    3470:	e008973a 	slli	r4,fp,28
    3474:	2885883a 	add	r2,r5,r2
    3478:	9826d13a 	srli	r19,r19,4
    347c:	10800003 	ldbu	r2,0(r2)
    3480:	e038d13a 	srli	fp,fp,4
    3484:	18ffffc4 	addi	r3,r3,-1
    3488:	24e6b03a 	or	r19,r4,r19
    348c:	18800005 	stb	r2,0(r3)
    3490:	9f04b03a 	or	r2,r19,fp
    3494:	103ff51e 	bne	r2,zero,346c <__alt_mem_Flash_flash_data+0xf400346c>
    3498:	d8c03115 	stw	r3,196(sp)
    349c:	b0e5c83a 	sub	r18,r22,r3
    34a0:	003d1e06 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    34a4:	db003317 	ldw	r12,204(sp)
    34a8:	00800044 	movi	r2,1
    34ac:	18c00044 	addi	r3,r3,1
    34b0:	13014b0e 	bge	r2,r12,39e0 <___svfprintf_internal_r+0x1560>
    34b4:	dc001f17 	ldw	r16,124(sp)
    34b8:	dac03117 	ldw	r11,196(sp)
    34bc:	00800044 	movi	r2,1
    34c0:	84000044 	addi	r16,r16,1
    34c4:	40800115 	stw	r2,4(r8)
    34c8:	42c00015 	stw	r11,0(r8)
    34cc:	d8c02015 	stw	r3,128(sp)
    34d0:	dc001f15 	stw	r16,124(sp)
    34d4:	008001c4 	movi	r2,7
    34d8:	14014e16 	blt	r2,r16,3a14 <___svfprintf_internal_r+0x1594>
    34dc:	42000204 	addi	r8,r8,8
    34e0:	db003917 	ldw	r12,228(sp)
    34e4:	dac03517 	ldw	r11,212(sp)
    34e8:	84000044 	addi	r16,r16,1
    34ec:	1b07883a 	add	r3,r3,r12
    34f0:	42c00015 	stw	r11,0(r8)
    34f4:	43000115 	stw	r12,4(r8)
    34f8:	d8c02015 	stw	r3,128(sp)
    34fc:	dc001f15 	stw	r16,124(sp)
    3500:	008001c4 	movi	r2,7
    3504:	14014c16 	blt	r2,r16,3a38 <___svfprintf_internal_r+0x15b8>
    3508:	44800204 	addi	r18,r8,8
    350c:	d9003717 	ldw	r4,220(sp)
    3510:	d9403817 	ldw	r5,224(sp)
    3514:	000d883a 	mov	r6,zero
    3518:	000f883a 	mov	r7,zero
    351c:	d8c03e15 	stw	r3,248(sp)
    3520:	00101b80 	call	101b8 <__eqdf2>
    3524:	d8c03e17 	ldw	r3,248(sp)
    3528:	db003317 	ldw	r12,204(sp)
    352c:	10009526 	beq	r2,zero,3784 <___svfprintf_internal_r+0x1304>
    3530:	dac03117 	ldw	r11,196(sp)
    3534:	60bfffc4 	addi	r2,r12,-1
    3538:	1887883a 	add	r3,r3,r2
    353c:	59000044 	addi	r4,r11,1
    3540:	84000044 	addi	r16,r16,1
    3544:	90800115 	stw	r2,4(r18)
    3548:	91000015 	stw	r4,0(r18)
    354c:	d8c02015 	stw	r3,128(sp)
    3550:	dc001f15 	stw	r16,124(sp)
    3554:	008001c4 	movi	r2,7
    3558:	1400b316 	blt	r2,r16,3828 <___svfprintf_internal_r+0x13a8>
    355c:	94800204 	addi	r18,r18,8
    3560:	dac03a17 	ldw	r11,232(sp)
    3564:	dd4022c4 	addi	r21,sp,139
    3568:	84000044 	addi	r16,r16,1
    356c:	1ac7883a 	add	r3,r3,r11
    3570:	95400015 	stw	r21,0(r18)
    3574:	92c00115 	stw	r11,4(r18)
    3578:	d8c02015 	stw	r3,128(sp)
    357c:	dc001f15 	stw	r16,124(sp)
    3580:	008001c4 	movi	r2,7
    3584:	14001416 	blt	r2,r16,35d8 <___svfprintf_internal_r+0x1158>
    3588:	92000204 	addi	r8,r18,8
    358c:	003d9106 	br	2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    3590:	d9002f17 	ldw	r4,188(sp)
    3594:	b80b883a 	mov	r5,r23
    3598:	b00d883a 	mov	r6,r22
    359c:	000b4140 	call	b414 <__ssprint_r>
    35a0:	103dc826 	beq	r2,zero,2cc4 <__alt_mem_Flash_flash_data+0xf4002cc4>
    35a4:	003c7e06 	br	27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    35a8:	010000b4 	movhi	r4,2
    35ac:	213c2484 	addi	r4,r4,-3950
    35b0:	d9002b15 	stw	r4,172(sp)
    35b4:	dac02b17 	ldw	r11,172(sp)
    35b8:	1c07883a 	add	r3,r3,r16
    35bc:	44000115 	stw	r16,4(r8)
    35c0:	42c00015 	stw	r11,0(r8)
    35c4:	10800044 	addi	r2,r2,1
    35c8:	d8c02015 	stw	r3,128(sp)
    35cc:	d8801f15 	stw	r2,124(sp)
    35d0:	010001c4 	movi	r4,7
    35d4:	20bd7e0e 	bge	r4,r2,2bd0 <__alt_mem_Flash_flash_data+0xf4002bd0>
    35d8:	d9002f17 	ldw	r4,188(sp)
    35dc:	b80b883a 	mov	r5,r23
    35e0:	b00d883a 	mov	r6,r22
    35e4:	000b4140 	call	b414 <__ssprint_r>
    35e8:	103c6d1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    35ec:	d8c02017 	ldw	r3,128(sp)
    35f0:	da000404 	addi	r8,sp,16
    35f4:	003d7706 	br	2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    35f8:	10803fcc 	andi	r2,r2,255
    35fc:	1000201e 	bne	r2,zero,3680 <___svfprintf_internal_r+0x1200>
    3600:	8880004c 	andi	r2,r17,1
    3604:	10001e26 	beq	r2,zero,3680 <___svfprintf_internal_r+0x1200>
    3608:	00800c04 	movi	r2,48
    360c:	d8c01dc4 	addi	r3,sp,119
    3610:	d8801dc5 	stb	r2,119(sp)
    3614:	dc803d17 	ldw	r18,244(sp)
    3618:	d8c03115 	stw	r3,196(sp)
    361c:	003cbf06 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    3620:	d9002f17 	ldw	r4,188(sp)
    3624:	b80b883a 	mov	r5,r23
    3628:	b00d883a 	mov	r6,r22
    362c:	000b4140 	call	b414 <__ssprint_r>
    3630:	103c5b1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3634:	d8c02017 	ldw	r3,128(sp)
    3638:	da000404 	addi	r8,sp,16
    363c:	003d5806 	br	2ba0 <__alt_mem_Flash_flash_data+0xf4002ba0>
    3640:	d9002f17 	ldw	r4,188(sp)
    3644:	b80b883a 	mov	r5,r23
    3648:	b00d883a 	mov	r6,r22
    364c:	000b4140 	call	b414 <__ssprint_r>
    3650:	103c531e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3654:	d8c02017 	ldw	r3,128(sp)
    3658:	da000404 	addi	r8,sp,16
    365c:	003d1906 	br	2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    3660:	d9002f17 	ldw	r4,188(sp)
    3664:	b80b883a 	mov	r5,r23
    3668:	b00d883a 	mov	r6,r22
    366c:	000b4140 	call	b414 <__ssprint_r>
    3670:	103c4b1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3674:	d8c02017 	ldw	r3,128(sp)
    3678:	da000404 	addi	r8,sp,16
    367c:	003d0306 	br	2a8c <__alt_mem_Flash_flash_data+0xf4002a8c>
    3680:	0025883a 	mov	r18,zero
    3684:	dd803115 	stw	r22,196(sp)
    3688:	003ca406 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    368c:	dc002617 	ldw	r16,152(sp)
    3690:	0401480e 	bge	zero,r16,3bb4 <___svfprintf_internal_r+0x1734>
    3694:	db003117 	ldw	r12,196(sp)
    3698:	dac03317 	ldw	r11,204(sp)
    369c:	62e1883a 	add	r16,r12,r11
    36a0:	db003417 	ldw	r12,208(sp)
    36a4:	5825883a 	mov	r18,r11
    36a8:	62c0010e 	bge	r12,r11,36b0 <___svfprintf_internal_r+0x1230>
    36ac:	6025883a 	mov	r18,r12
    36b0:	04800b0e 	bge	zero,r18,36e0 <___svfprintf_internal_r+0x1260>
    36b4:	d8801f17 	ldw	r2,124(sp)
    36b8:	dac03117 	ldw	r11,196(sp)
    36bc:	1c87883a 	add	r3,r3,r18
    36c0:	10800044 	addi	r2,r2,1
    36c4:	42c00015 	stw	r11,0(r8)
    36c8:	44800115 	stw	r18,4(r8)
    36cc:	d8c02015 	stw	r3,128(sp)
    36d0:	d8801f15 	stw	r2,124(sp)
    36d4:	010001c4 	movi	r4,7
    36d8:	20823f16 	blt	r4,r2,3fd8 <___svfprintf_internal_r+0x1b58>
    36dc:	42000204 	addi	r8,r8,8
    36e0:	90023b16 	blt	r18,zero,3fd0 <___svfprintf_internal_r+0x1b50>
    36e4:	db003417 	ldw	r12,208(sp)
    36e8:	64a5c83a 	sub	r18,r12,r18
    36ec:	0480780e 	bge	zero,r18,38d0 <___svfprintf_internal_r+0x1450>
    36f0:	05400404 	movi	r21,16
    36f4:	d8801f17 	ldw	r2,124(sp)
    36f8:	ac81140e 	bge	r21,r18,3b4c <___svfprintf_internal_r+0x16cc>
    36fc:	014000b4 	movhi	r5,2
    3700:	297c2484 	addi	r5,r5,-3950
    3704:	d9402b15 	stw	r5,172(sp)
    3708:	070001c4 	movi	fp,7
    370c:	dcc02f17 	ldw	r19,188(sp)
    3710:	00000306 	br	3720 <___svfprintf_internal_r+0x12a0>
    3714:	42000204 	addi	r8,r8,8
    3718:	94bffc04 	addi	r18,r18,-16
    371c:	ac810e0e 	bge	r21,r18,3b58 <___svfprintf_internal_r+0x16d8>
    3720:	18c00404 	addi	r3,r3,16
    3724:	10800044 	addi	r2,r2,1
    3728:	45000015 	stw	r20,0(r8)
    372c:	45400115 	stw	r21,4(r8)
    3730:	d8c02015 	stw	r3,128(sp)
    3734:	d8801f15 	stw	r2,124(sp)
    3738:	e0bff60e 	bge	fp,r2,3714 <__alt_mem_Flash_flash_data+0xf4003714>
    373c:	9809883a 	mov	r4,r19
    3740:	b80b883a 	mov	r5,r23
    3744:	b00d883a 	mov	r6,r22
    3748:	000b4140 	call	b414 <__ssprint_r>
    374c:	103c141e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3750:	d8c02017 	ldw	r3,128(sp)
    3754:	d8801f17 	ldw	r2,124(sp)
    3758:	da000404 	addi	r8,sp,16
    375c:	003fee06 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    3760:	d9002f17 	ldw	r4,188(sp)
    3764:	b80b883a 	mov	r5,r23
    3768:	b00d883a 	mov	r6,r22
    376c:	000b4140 	call	b414 <__ssprint_r>
    3770:	103c0b1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3774:	d8c02017 	ldw	r3,128(sp)
    3778:	d8802787 	ldb	r2,158(sp)
    377c:	da000404 	addi	r8,sp,16
    3780:	003cb506 	br	2a58 <__alt_mem_Flash_flash_data+0xf4002a58>
    3784:	657fffc4 	addi	r21,r12,-1
    3788:	057f750e 	bge	zero,r21,3560 <__alt_mem_Flash_flash_data+0xf4003560>
    378c:	07000404 	movi	fp,16
    3790:	e542ed0e 	bge	fp,r21,4348 <___svfprintf_internal_r+0x1ec8>
    3794:	010000b4 	movhi	r4,2
    3798:	213c2484 	addi	r4,r4,-3950
    379c:	d9002b15 	stw	r4,172(sp)
    37a0:	01c001c4 	movi	r7,7
    37a4:	dcc02f17 	ldw	r19,188(sp)
    37a8:	00000306 	br	37b8 <___svfprintf_internal_r+0x1338>
    37ac:	ad7ffc04 	addi	r21,r21,-16
    37b0:	94800204 	addi	r18,r18,8
    37b4:	e540130e 	bge	fp,r21,3804 <___svfprintf_internal_r+0x1384>
    37b8:	18c00404 	addi	r3,r3,16
    37bc:	84000044 	addi	r16,r16,1
    37c0:	95000015 	stw	r20,0(r18)
    37c4:	97000115 	stw	fp,4(r18)
    37c8:	d8c02015 	stw	r3,128(sp)
    37cc:	dc001f15 	stw	r16,124(sp)
    37d0:	3c3ff60e 	bge	r7,r16,37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    37d4:	9809883a 	mov	r4,r19
    37d8:	b80b883a 	mov	r5,r23
    37dc:	b00d883a 	mov	r6,r22
    37e0:	d9c03e15 	stw	r7,248(sp)
    37e4:	000b4140 	call	b414 <__ssprint_r>
    37e8:	d9c03e17 	ldw	r7,248(sp)
    37ec:	103bec1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    37f0:	ad7ffc04 	addi	r21,r21,-16
    37f4:	d8c02017 	ldw	r3,128(sp)
    37f8:	dc001f17 	ldw	r16,124(sp)
    37fc:	dc800404 	addi	r18,sp,16
    3800:	e57fed16 	blt	fp,r21,37b8 <__alt_mem_Flash_flash_data+0xf40037b8>
    3804:	dac02b17 	ldw	r11,172(sp)
    3808:	1d47883a 	add	r3,r3,r21
    380c:	84000044 	addi	r16,r16,1
    3810:	92c00015 	stw	r11,0(r18)
    3814:	95400115 	stw	r21,4(r18)
    3818:	d8c02015 	stw	r3,128(sp)
    381c:	dc001f15 	stw	r16,124(sp)
    3820:	008001c4 	movi	r2,7
    3824:	143f4d0e 	bge	r2,r16,355c <__alt_mem_Flash_flash_data+0xf400355c>
    3828:	d9002f17 	ldw	r4,188(sp)
    382c:	b80b883a 	mov	r5,r23
    3830:	b00d883a 	mov	r6,r22
    3834:	000b4140 	call	b414 <__ssprint_r>
    3838:	103bd91e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    383c:	d8c02017 	ldw	r3,128(sp)
    3840:	dc001f17 	ldw	r16,124(sp)
    3844:	dc800404 	addi	r18,sp,16
    3848:	003f4506 	br	3560 <__alt_mem_Flash_flash_data+0xf4003560>
    384c:	00800084 	movi	r2,2
    3850:	9f06b03a 	or	r3,r19,fp
    3854:	003d5706 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    3858:	1cc00017 	ldw	r19,0(r3)
    385c:	dac02d17 	ldw	r11,180(sp)
    3860:	9839d7fa 	srai	fp,r19,31
    3864:	5ac00104 	addi	r11,r11,4
    3868:	dac02d15 	stw	r11,180(sp)
    386c:	e005883a 	mov	r2,fp
    3870:	003c0306 	br	2880 <__alt_mem_Flash_flash_data+0xf4002880>
    3874:	dac02d17 	ldw	r11,180(sp)
    3878:	0039883a 	mov	fp,zero
    387c:	0005883a 	mov	r2,zero
    3880:	5cc00017 	ldw	r19,0(r11)
    3884:	5ac00104 	addi	r11,r11,4
    3888:	dac02d15 	stw	r11,180(sp)
    388c:	9807883a 	mov	r3,r19
    3890:	003d4806 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    3894:	db002d17 	ldw	r12,180(sp)
    3898:	14c00017 	ldw	r19,0(r2)
    389c:	0039883a 	mov	fp,zero
    38a0:	63000104 	addi	r12,r12,4
    38a4:	db002d15 	stw	r12,180(sp)
    38a8:	00800044 	movi	r2,1
    38ac:	9807883a 	mov	r3,r19
    38b0:	003d4006 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    38b4:	d9002f17 	ldw	r4,188(sp)
    38b8:	b80b883a 	mov	r5,r23
    38bc:	b00d883a 	mov	r6,r22
    38c0:	000b4140 	call	b414 <__ssprint_r>
    38c4:	103bb61e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    38c8:	d8c02017 	ldw	r3,128(sp)
    38cc:	da000404 	addi	r8,sp,16
    38d0:	db003117 	ldw	r12,196(sp)
    38d4:	dac03417 	ldw	r11,208(sp)
    38d8:	d8802617 	ldw	r2,152(sp)
    38dc:	62e5883a 	add	r18,r12,r11
    38e0:	db003317 	ldw	r12,204(sp)
    38e4:	13000216 	blt	r2,r12,38f0 <___svfprintf_internal_r+0x1470>
    38e8:	8900004c 	andi	r4,r17,1
    38ec:	20000c26 	beq	r4,zero,3920 <___svfprintf_internal_r+0x14a0>
    38f0:	dac03917 	ldw	r11,228(sp)
    38f4:	d9001f17 	ldw	r4,124(sp)
    38f8:	db003517 	ldw	r12,212(sp)
    38fc:	1ac7883a 	add	r3,r3,r11
    3900:	21000044 	addi	r4,r4,1
    3904:	43000015 	stw	r12,0(r8)
    3908:	42c00115 	stw	r11,4(r8)
    390c:	d8c02015 	stw	r3,128(sp)
    3910:	d9001f15 	stw	r4,124(sp)
    3914:	014001c4 	movi	r5,7
    3918:	2901b716 	blt	r5,r4,3ff8 <___svfprintf_internal_r+0x1b78>
    391c:	42000204 	addi	r8,r8,8
    3920:	dac03317 	ldw	r11,204(sp)
    3924:	8489c83a 	sub	r4,r16,r18
    3928:	5885c83a 	sub	r2,r11,r2
    392c:	1021883a 	mov	r16,r2
    3930:	2080010e 	bge	r4,r2,3938 <___svfprintf_internal_r+0x14b8>
    3934:	2021883a 	mov	r16,r4
    3938:	04000a0e 	bge	zero,r16,3964 <___svfprintf_internal_r+0x14e4>
    393c:	d9001f17 	ldw	r4,124(sp)
    3940:	1c07883a 	add	r3,r3,r16
    3944:	44800015 	stw	r18,0(r8)
    3948:	21000044 	addi	r4,r4,1
    394c:	44000115 	stw	r16,4(r8)
    3950:	d8c02015 	stw	r3,128(sp)
    3954:	d9001f15 	stw	r4,124(sp)
    3958:	014001c4 	movi	r5,7
    395c:	2901bf16 	blt	r5,r4,405c <___svfprintf_internal_r+0x1bdc>
    3960:	42000204 	addi	r8,r8,8
    3964:	8001bb16 	blt	r16,zero,4054 <___svfprintf_internal_r+0x1bd4>
    3968:	1421c83a 	sub	r16,r2,r16
    396c:	043c990e 	bge	zero,r16,2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    3970:	04800404 	movi	r18,16
    3974:	d8801f17 	ldw	r2,124(sp)
    3978:	943f0b0e 	bge	r18,r16,35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    397c:	014000b4 	movhi	r5,2
    3980:	297c2484 	addi	r5,r5,-3950
    3984:	d9402b15 	stw	r5,172(sp)
    3988:	054001c4 	movi	r21,7
    398c:	dcc02f17 	ldw	r19,188(sp)
    3990:	00000306 	br	39a0 <___svfprintf_internal_r+0x1520>
    3994:	42000204 	addi	r8,r8,8
    3998:	843ffc04 	addi	r16,r16,-16
    399c:	943f050e 	bge	r18,r16,35b4 <__alt_mem_Flash_flash_data+0xf40035b4>
    39a0:	18c00404 	addi	r3,r3,16
    39a4:	10800044 	addi	r2,r2,1
    39a8:	45000015 	stw	r20,0(r8)
    39ac:	44800115 	stw	r18,4(r8)
    39b0:	d8c02015 	stw	r3,128(sp)
    39b4:	d8801f15 	stw	r2,124(sp)
    39b8:	a8bff60e 	bge	r21,r2,3994 <__alt_mem_Flash_flash_data+0xf4003994>
    39bc:	9809883a 	mov	r4,r19
    39c0:	b80b883a 	mov	r5,r23
    39c4:	b00d883a 	mov	r6,r22
    39c8:	000b4140 	call	b414 <__ssprint_r>
    39cc:	103b741e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    39d0:	d8c02017 	ldw	r3,128(sp)
    39d4:	d8801f17 	ldw	r2,124(sp)
    39d8:	da000404 	addi	r8,sp,16
    39dc:	003fee06 	br	3998 <__alt_mem_Flash_flash_data+0xf4003998>
    39e0:	8888703a 	and	r4,r17,r2
    39e4:	203eb31e 	bne	r4,zero,34b4 <__alt_mem_Flash_flash_data+0xf40034b4>
    39e8:	dc001f17 	ldw	r16,124(sp)
    39ec:	db003117 	ldw	r12,196(sp)
    39f0:	40800115 	stw	r2,4(r8)
    39f4:	84000044 	addi	r16,r16,1
    39f8:	43000015 	stw	r12,0(r8)
    39fc:	d8c02015 	stw	r3,128(sp)
    3a00:	dc001f15 	stw	r16,124(sp)
    3a04:	008001c4 	movi	r2,7
    3a08:	143f8716 	blt	r2,r16,3828 <__alt_mem_Flash_flash_data+0xf4003828>
    3a0c:	44800204 	addi	r18,r8,8
    3a10:	003ed306 	br	3560 <__alt_mem_Flash_flash_data+0xf4003560>
    3a14:	d9002f17 	ldw	r4,188(sp)
    3a18:	b80b883a 	mov	r5,r23
    3a1c:	b00d883a 	mov	r6,r22
    3a20:	000b4140 	call	b414 <__ssprint_r>
    3a24:	103b5e1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3a28:	d8c02017 	ldw	r3,128(sp)
    3a2c:	dc001f17 	ldw	r16,124(sp)
    3a30:	da000404 	addi	r8,sp,16
    3a34:	003eaa06 	br	34e0 <__alt_mem_Flash_flash_data+0xf40034e0>
    3a38:	d9002f17 	ldw	r4,188(sp)
    3a3c:	b80b883a 	mov	r5,r23
    3a40:	b00d883a 	mov	r6,r22
    3a44:	000b4140 	call	b414 <__ssprint_r>
    3a48:	103b551e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3a4c:	d8c02017 	ldw	r3,128(sp)
    3a50:	dc001f17 	ldw	r16,124(sp)
    3a54:	dc800404 	addi	r18,sp,16
    3a58:	003eac06 	br	350c <__alt_mem_Flash_flash_data+0xf400350c>
    3a5c:	d9002f17 	ldw	r4,188(sp)
    3a60:	b80b883a 	mov	r5,r23
    3a64:	b00d883a 	mov	r6,r22
    3a68:	000b4140 	call	b414 <__ssprint_r>
    3a6c:	103b4c1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3a70:	d8c02017 	ldw	r3,128(sp)
    3a74:	da000404 	addi	r8,sp,16
    3a78:	003c1506 	br	2ad0 <__alt_mem_Flash_flash_data+0xf4002ad0>
    3a7c:	da004015 	stw	r8,256(sp)
    3a80:	da403f15 	stw	r9,252(sp)
    3a84:	000b2100 	call	b210 <__fpclassifyd>
    3a88:	da004017 	ldw	r8,256(sp)
    3a8c:	da403f17 	ldw	r9,252(sp)
    3a90:	1000951e 	bne	r2,zero,3ce8 <___svfprintf_internal_r+0x1868>
    3a94:	008011c4 	movi	r2,71
    3a98:	1400fb16 	blt	r2,r16,3e88 <___svfprintf_internal_r+0x1a08>
    3a9c:	030000b4 	movhi	r12,2
    3aa0:	633c1604 	addi	r12,r12,-4008
    3aa4:	db003115 	stw	r12,196(sp)
    3aa8:	00c000c4 	movi	r3,3
    3aac:	00bfdfc4 	movi	r2,-129
    3ab0:	d8c02a15 	stw	r3,168(sp)
    3ab4:	88a2703a 	and	r17,r17,r2
    3ab8:	dd402783 	ldbu	r21,158(sp)
    3abc:	dcc02d15 	stw	r19,180(sp)
    3ac0:	1825883a 	mov	r18,r3
    3ac4:	d8003215 	stw	zero,200(sp)
    3ac8:	d8003415 	stw	zero,208(sp)
    3acc:	003b9806 	br	2930 <__alt_mem_Flash_flash_data+0xf4002930>
    3ad0:	1c000007 	ldb	r16,0(r3)
    3ad4:	1805883a 	mov	r2,r3
    3ad8:	003abf06 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    3adc:	00800084 	movi	r2,2
    3ae0:	003cb406 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    3ae4:	88c0100c 	andi	r3,r17,64
    3ae8:	1800f626 	beq	r3,zero,3ec4 <___svfprintf_internal_r+0x1a44>
    3aec:	dac02d17 	ldw	r11,180(sp)
    3af0:	14c0000b 	ldhu	r19,0(r2)
    3af4:	0039883a 	mov	fp,zero
    3af8:	5ac00104 	addi	r11,r11,4
    3afc:	dac02d15 	stw	r11,180(sp)
    3b00:	003cbd06 	br	2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    3b04:	8880040c 	andi	r2,r17,16
    3b08:	1000091e 	bne	r2,zero,3b30 <___svfprintf_internal_r+0x16b0>
    3b0c:	8c40100c 	andi	r17,r17,64
    3b10:	88000726 	beq	r17,zero,3b30 <___svfprintf_internal_r+0x16b0>
    3b14:	db002d17 	ldw	r12,180(sp)
    3b18:	dac03017 	ldw	r11,192(sp)
    3b1c:	60800017 	ldw	r2,0(r12)
    3b20:	63000104 	addi	r12,r12,4
    3b24:	db002d15 	stw	r12,180(sp)
    3b28:	12c0000d 	sth	r11,0(r2)
    3b2c:	003a8006 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    3b30:	db002d17 	ldw	r12,180(sp)
    3b34:	dac03017 	ldw	r11,192(sp)
    3b38:	60800017 	ldw	r2,0(r12)
    3b3c:	63000104 	addi	r12,r12,4
    3b40:	db002d15 	stw	r12,180(sp)
    3b44:	12c00015 	stw	r11,0(r2)
    3b48:	003a7906 	br	2530 <__alt_mem_Flash_flash_data+0xf4002530>
    3b4c:	010000b4 	movhi	r4,2
    3b50:	213c2484 	addi	r4,r4,-3950
    3b54:	d9002b15 	stw	r4,172(sp)
    3b58:	dac02b17 	ldw	r11,172(sp)
    3b5c:	1c87883a 	add	r3,r3,r18
    3b60:	10800044 	addi	r2,r2,1
    3b64:	42c00015 	stw	r11,0(r8)
    3b68:	44800115 	stw	r18,4(r8)
    3b6c:	d8c02015 	stw	r3,128(sp)
    3b70:	d8801f15 	stw	r2,124(sp)
    3b74:	010001c4 	movi	r4,7
    3b78:	20bf4e16 	blt	r4,r2,38b4 <__alt_mem_Flash_flash_data+0xf40038b4>
    3b7c:	42000204 	addi	r8,r8,8
    3b80:	003f5306 	br	38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3b84:	010000b4 	movhi	r4,2
    3b88:	213c2484 	addi	r4,r4,-3950
    3b8c:	d9002b15 	stw	r4,172(sp)
    3b90:	003bf906 	br	2b78 <__alt_mem_Flash_flash_data+0xf4002b78>
    3b94:	d9002f17 	ldw	r4,188(sp)
    3b98:	b80b883a 	mov	r5,r23
    3b9c:	b00d883a 	mov	r6,r22
    3ba0:	000b4140 	call	b414 <__ssprint_r>
    3ba4:	103afe1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3ba8:	d8c02017 	ldw	r3,128(sp)
    3bac:	da000404 	addi	r8,sp,16
    3bb0:	003dc606 	br	32cc <__alt_mem_Flash_flash_data+0xf40032cc>
    3bb4:	d8801f17 	ldw	r2,124(sp)
    3bb8:	030000b4 	movhi	r12,2
    3bbc:	01000044 	movi	r4,1
    3bc0:	18c00044 	addi	r3,r3,1
    3bc4:	10800044 	addi	r2,r2,1
    3bc8:	633c2404 	addi	r12,r12,-3952
    3bcc:	41000115 	stw	r4,4(r8)
    3bd0:	43000015 	stw	r12,0(r8)
    3bd4:	d8c02015 	stw	r3,128(sp)
    3bd8:	d8801f15 	stw	r2,124(sp)
    3bdc:	010001c4 	movi	r4,7
    3be0:	2080ad16 	blt	r4,r2,3e98 <___svfprintf_internal_r+0x1a18>
    3be4:	42000204 	addi	r8,r8,8
    3be8:	8000041e 	bne	r16,zero,3bfc <___svfprintf_internal_r+0x177c>
    3bec:	dac03317 	ldw	r11,204(sp)
    3bf0:	5800021e 	bne	r11,zero,3bfc <___svfprintf_internal_r+0x177c>
    3bf4:	8880004c 	andi	r2,r17,1
    3bf8:	103bf626 	beq	r2,zero,2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    3bfc:	db003917 	ldw	r12,228(sp)
    3c00:	d8801f17 	ldw	r2,124(sp)
    3c04:	dac03517 	ldw	r11,212(sp)
    3c08:	1b07883a 	add	r3,r3,r12
    3c0c:	10800044 	addi	r2,r2,1
    3c10:	42c00015 	stw	r11,0(r8)
    3c14:	43000115 	stw	r12,4(r8)
    3c18:	d8c02015 	stw	r3,128(sp)
    3c1c:	d8801f15 	stw	r2,124(sp)
    3c20:	010001c4 	movi	r4,7
    3c24:	20818616 	blt	r4,r2,4240 <___svfprintf_internal_r+0x1dc0>
    3c28:	42000204 	addi	r8,r8,8
    3c2c:	0421c83a 	sub	r16,zero,r16
    3c30:	0400bc0e 	bge	zero,r16,3f24 <___svfprintf_internal_r+0x1aa4>
    3c34:	04800404 	movi	r18,16
    3c38:	9400f80e 	bge	r18,r16,401c <___svfprintf_internal_r+0x1b9c>
    3c3c:	010000b4 	movhi	r4,2
    3c40:	213c2484 	addi	r4,r4,-3950
    3c44:	d9002b15 	stw	r4,172(sp)
    3c48:	054001c4 	movi	r21,7
    3c4c:	dcc02f17 	ldw	r19,188(sp)
    3c50:	00000306 	br	3c60 <___svfprintf_internal_r+0x17e0>
    3c54:	42000204 	addi	r8,r8,8
    3c58:	843ffc04 	addi	r16,r16,-16
    3c5c:	9400f20e 	bge	r18,r16,4028 <___svfprintf_internal_r+0x1ba8>
    3c60:	18c00404 	addi	r3,r3,16
    3c64:	10800044 	addi	r2,r2,1
    3c68:	45000015 	stw	r20,0(r8)
    3c6c:	44800115 	stw	r18,4(r8)
    3c70:	d8c02015 	stw	r3,128(sp)
    3c74:	d8801f15 	stw	r2,124(sp)
    3c78:	a8bff60e 	bge	r21,r2,3c54 <__alt_mem_Flash_flash_data+0xf4003c54>
    3c7c:	9809883a 	mov	r4,r19
    3c80:	b80b883a 	mov	r5,r23
    3c84:	b00d883a 	mov	r6,r22
    3c88:	000b4140 	call	b414 <__ssprint_r>
    3c8c:	103ac41e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3c90:	d8c02017 	ldw	r3,128(sp)
    3c94:	d8801f17 	ldw	r2,124(sp)
    3c98:	da000404 	addi	r8,sp,16
    3c9c:	003fee06 	br	3c58 <__alt_mem_Flash_flash_data+0xf4003c58>
    3ca0:	db002e17 	ldw	r12,184(sp)
    3ca4:	1805883a 	mov	r2,r3
    3ca8:	dac02d15 	stw	r11,180(sp)
    3cac:	0319c83a 	sub	r12,zero,r12
    3cb0:	db002e15 	stw	r12,184(sp)
    3cb4:	003acf06 	br	27f4 <__alt_mem_Flash_flash_data+0xf40027f4>
    3cb8:	18800044 	addi	r2,r3,1
    3cbc:	8c400814 	ori	r17,r17,32
    3cc0:	1c000047 	ldb	r16,1(r3)
    3cc4:	003a4406 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    3cc8:	d9002f17 	ldw	r4,188(sp)
    3ccc:	b80b883a 	mov	r5,r23
    3cd0:	b00d883a 	mov	r6,r22
    3cd4:	000b4140 	call	b414 <__ssprint_r>
    3cd8:	103ab11e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3cdc:	d8c02017 	ldw	r3,128(sp)
    3ce0:	da000404 	addi	r8,sp,16
    3ce4:	003d8a06 	br	3310 <__alt_mem_Flash_flash_data+0xf4003310>
    3ce8:	057ff7c4 	movi	r21,-33
    3cec:	00bfffc4 	movi	r2,-1
    3cf0:	856a703a 	and	r21,r16,r21
    3cf4:	48807126 	beq	r9,r2,3ebc <___svfprintf_internal_r+0x1a3c>
    3cf8:	008011c4 	movi	r2,71
    3cfc:	a8814d26 	beq	r21,r2,4234 <___svfprintf_internal_r+0x1db4>
    3d00:	db003817 	ldw	r12,224(sp)
    3d04:	8ac04014 	ori	r11,r17,256
    3d08:	dac02d15 	stw	r11,180(sp)
    3d0c:	60015616 	blt	r12,zero,4268 <___svfprintf_internal_r+0x1de8>
    3d10:	dc803817 	ldw	r18,224(sp)
    3d14:	d8002a05 	stb	zero,168(sp)
    3d18:	00801984 	movi	r2,102
    3d1c:	80808c26 	beq	r16,r2,3f50 <___svfprintf_internal_r+0x1ad0>
    3d20:	00801184 	movi	r2,70
    3d24:	80808a26 	beq	r16,r2,3f50 <___svfprintf_internal_r+0x1ad0>
    3d28:	00801144 	movi	r2,69
    3d2c:	a8815226 	beq	r21,r2,4278 <___svfprintf_internal_r+0x1df8>
    3d30:	4839883a 	mov	fp,r9
    3d34:	d8802604 	addi	r2,sp,152
    3d38:	d8800115 	stw	r2,4(sp)
    3d3c:	d9002f17 	ldw	r4,188(sp)
    3d40:	d8802504 	addi	r2,sp,148
    3d44:	d9403717 	ldw	r5,220(sp)
    3d48:	d8800215 	stw	r2,8(sp)
    3d4c:	d8802104 	addi	r2,sp,132
    3d50:	df000015 	stw	fp,0(sp)
    3d54:	d8800315 	stw	r2,12(sp)
    3d58:	900d883a 	mov	r6,r18
    3d5c:	01c00084 	movi	r7,2
    3d60:	da004015 	stw	r8,256(sp)
    3d64:	da403f15 	stw	r9,252(sp)
    3d68:	00067940 	call	6794 <_dtoa_r>
    3d6c:	d8803115 	stw	r2,196(sp)
    3d70:	008019c4 	movi	r2,103
    3d74:	da004017 	ldw	r8,256(sp)
    3d78:	da403f17 	ldw	r9,252(sp)
    3d7c:	80800226 	beq	r16,r2,3d88 <___svfprintf_internal_r+0x1908>
    3d80:	008011c4 	movi	r2,71
    3d84:	8080841e 	bne	r16,r2,3f98 <___svfprintf_internal_r+0x1b18>
    3d88:	8880004c 	andi	r2,r17,1
    3d8c:	10014f26 	beq	r2,zero,42cc <___svfprintf_internal_r+0x1e4c>
    3d90:	db003117 	ldw	r12,196(sp)
    3d94:	6715883a 	add	r10,r12,fp
    3d98:	d9003717 	ldw	r4,220(sp)
    3d9c:	900b883a 	mov	r5,r18
    3da0:	000d883a 	mov	r6,zero
    3da4:	000f883a 	mov	r7,zero
    3da8:	da004015 	stw	r8,256(sp)
    3dac:	da403f15 	stw	r9,252(sp)
    3db0:	da803e15 	stw	r10,248(sp)
    3db4:	00101b80 	call	101b8 <__eqdf2>
    3db8:	da004017 	ldw	r8,256(sp)
    3dbc:	da403f17 	ldw	r9,252(sp)
    3dc0:	da803e17 	ldw	r10,248(sp)
    3dc4:	1000d926 	beq	r2,zero,412c <___svfprintf_internal_r+0x1cac>
    3dc8:	d8802117 	ldw	r2,132(sp)
    3dcc:	1280062e 	bgeu	r2,r10,3de8 <___svfprintf_internal_r+0x1968>
    3dd0:	01000c04 	movi	r4,48
    3dd4:	10c00044 	addi	r3,r2,1
    3dd8:	d8c02115 	stw	r3,132(sp)
    3ddc:	11000005 	stb	r4,0(r2)
    3de0:	d8802117 	ldw	r2,132(sp)
    3de4:	12bffb36 	bltu	r2,r10,3dd4 <__alt_mem_Flash_flash_data+0xf4003dd4>
    3de8:	db003117 	ldw	r12,196(sp)
    3dec:	1305c83a 	sub	r2,r2,r12
    3df0:	d8803315 	stw	r2,204(sp)
    3df4:	008011c4 	movi	r2,71
    3df8:	a880b626 	beq	r21,r2,40d4 <___svfprintf_internal_r+0x1c54>
    3dfc:	00801944 	movi	r2,101
    3e00:	14017c0e 	bge	r2,r16,43f4 <___svfprintf_internal_r+0x1f74>
    3e04:	00801984 	movi	r2,102
    3e08:	80812626 	beq	r16,r2,42a4 <___svfprintf_internal_r+0x1e24>
    3e0c:	db002617 	ldw	r12,152(sp)
    3e10:	db003415 	stw	r12,208(sp)
    3e14:	db003417 	ldw	r12,208(sp)
    3e18:	dac03317 	ldw	r11,204(sp)
    3e1c:	62c11816 	blt	r12,r11,4280 <___svfprintf_internal_r+0x1e00>
    3e20:	8c40004c 	andi	r17,r17,1
    3e24:	88013b1e 	bne	r17,zero,4314 <___svfprintf_internal_r+0x1e94>
    3e28:	6005883a 	mov	r2,r12
    3e2c:	60012516 	blt	r12,zero,42c4 <___svfprintf_internal_r+0x1e44>
    3e30:	dc803417 	ldw	r18,208(sp)
    3e34:	df002a07 	ldb	fp,168(sp)
    3e38:	e000b01e 	bne	fp,zero,40fc <___svfprintf_internal_r+0x1c7c>
    3e3c:	dc402d17 	ldw	r17,180(sp)
    3e40:	dd402783 	ldbu	r21,158(sp)
    3e44:	d8802a15 	stw	r2,168(sp)
    3e48:	dcc02d15 	stw	r19,180(sp)
    3e4c:	d8003215 	stw	zero,200(sp)
    3e50:	003ab706 	br	2930 <__alt_mem_Flash_flash_data+0xf4002930>
    3e54:	008000b4 	movhi	r2,2
    3e58:	10bc1404 	addi	r2,r2,-4016
    3e5c:	d8803115 	stw	r2,196(sp)
    3e60:	003bbb06 	br	2d50 <__alt_mem_Flash_flash_data+0xf4002d50>
    3e64:	d9002f17 	ldw	r4,188(sp)
    3e68:	04001004 	movi	r16,64
    3e6c:	800b883a 	mov	r5,r16
    3e70:	00091e40 	call	91e4 <_malloc_r>
    3e74:	b8800015 	stw	r2,0(r23)
    3e78:	b8800415 	stw	r2,16(r23)
    3e7c:	10015f26 	beq	r2,zero,43fc <___svfprintf_internal_r+0x1f7c>
    3e80:	bc000515 	stw	r16,20(r23)
    3e84:	00399806 	br	24e8 <__alt_mem_Flash_flash_data+0xf40024e8>
    3e88:	008000b4 	movhi	r2,2
    3e8c:	10bc1704 	addi	r2,r2,-4004
    3e90:	d8803115 	stw	r2,196(sp)
    3e94:	003f0406 	br	3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    3e98:	d9002f17 	ldw	r4,188(sp)
    3e9c:	b80b883a 	mov	r5,r23
    3ea0:	b00d883a 	mov	r6,r22
    3ea4:	000b4140 	call	b414 <__ssprint_r>
    3ea8:	103a3d1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3eac:	dc002617 	ldw	r16,152(sp)
    3eb0:	d8c02017 	ldw	r3,128(sp)
    3eb4:	da000404 	addi	r8,sp,16
    3eb8:	003f4b06 	br	3be8 <__alt_mem_Flash_flash_data+0xf4003be8>
    3ebc:	02400184 	movi	r9,6
    3ec0:	003f8f06 	br	3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    3ec4:	db002d17 	ldw	r12,180(sp)
    3ec8:	14c00017 	ldw	r19,0(r2)
    3ecc:	0039883a 	mov	fp,zero
    3ed0:	63000104 	addi	r12,r12,4
    3ed4:	db002d15 	stw	r12,180(sp)
    3ed8:	003bc706 	br	2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    3edc:	d8c03117 	ldw	r3,196(sp)
    3ee0:	b0e5c83a 	sub	r18,r22,r3
    3ee4:	003a8d06 	br	291c <__alt_mem_Flash_flash_data+0xf400291c>
    3ee8:	da004015 	stw	r8,256(sp)
    3eec:	00023e80 	call	23e8 <strlen>
    3ef0:	1025883a 	mov	r18,r2
    3ef4:	da004017 	ldw	r8,256(sp)
    3ef8:	903bf20e 	bge	r18,zero,2ec4 <__alt_mem_Flash_flash_data+0xf4002ec4>
    3efc:	0005883a 	mov	r2,zero
    3f00:	003bf006 	br	2ec4 <__alt_mem_Flash_flash_data+0xf4002ec4>
    3f04:	d9002f17 	ldw	r4,188(sp)
    3f08:	b80b883a 	mov	r5,r23
    3f0c:	b00d883a 	mov	r6,r22
    3f10:	000b4140 	call	b414 <__ssprint_r>
    3f14:	103a221e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3f18:	d8c02017 	ldw	r3,128(sp)
    3f1c:	d8801f17 	ldw	r2,124(sp)
    3f20:	da000404 	addi	r8,sp,16
    3f24:	db003317 	ldw	r12,204(sp)
    3f28:	dac03117 	ldw	r11,196(sp)
    3f2c:	10800044 	addi	r2,r2,1
    3f30:	1b07883a 	add	r3,r3,r12
    3f34:	42c00015 	stw	r11,0(r8)
    3f38:	43000115 	stw	r12,4(r8)
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	010001c4 	movi	r4,7
    3f48:	20bb210e 	bge	r4,r2,2bd0 <__alt_mem_Flash_flash_data+0xf4002bd0>
    3f4c:	003da206 	br	35d8 <__alt_mem_Flash_flash_data+0xf40035d8>
    3f50:	d8802604 	addi	r2,sp,152
    3f54:	d8800115 	stw	r2,4(sp)
    3f58:	d9002f17 	ldw	r4,188(sp)
    3f5c:	d8802504 	addi	r2,sp,148
    3f60:	d9403717 	ldw	r5,220(sp)
    3f64:	d8800215 	stw	r2,8(sp)
    3f68:	d8802104 	addi	r2,sp,132
    3f6c:	da400015 	stw	r9,0(sp)
    3f70:	d8800315 	stw	r2,12(sp)
    3f74:	900d883a 	mov	r6,r18
    3f78:	01c000c4 	movi	r7,3
    3f7c:	da004015 	stw	r8,256(sp)
    3f80:	da403f15 	stw	r9,252(sp)
    3f84:	00067940 	call	6794 <_dtoa_r>
    3f88:	da403f17 	ldw	r9,252(sp)
    3f8c:	da004017 	ldw	r8,256(sp)
    3f90:	d8803115 	stw	r2,196(sp)
    3f94:	4839883a 	mov	fp,r9
    3f98:	dac03117 	ldw	r11,196(sp)
    3f9c:	00801184 	movi	r2,70
    3fa0:	5f15883a 	add	r10,r11,fp
    3fa4:	a8bf7c1e 	bne	r21,r2,3d98 <__alt_mem_Flash_flash_data+0xf4003d98>
    3fa8:	59000007 	ldb	r4,0(r11)
    3fac:	00800c04 	movi	r2,48
    3fb0:	2080c826 	beq	r4,r2,42d4 <___svfprintf_internal_r+0x1e54>
    3fb4:	d8c02617 	ldw	r3,152(sp)
    3fb8:	50d5883a 	add	r10,r10,r3
    3fbc:	003f7606 	br	3d98 <__alt_mem_Flash_flash_data+0xf4003d98>
    3fc0:	010000b4 	movhi	r4,2
    3fc4:	213c2884 	addi	r4,r4,-3934
    3fc8:	d9003615 	stw	r4,216(sp)
    3fcc:	003a9706 	br	2a2c <__alt_mem_Flash_flash_data+0xf4002a2c>
    3fd0:	0025883a 	mov	r18,zero
    3fd4:	003dc306 	br	36e4 <__alt_mem_Flash_flash_data+0xf40036e4>
    3fd8:	d9002f17 	ldw	r4,188(sp)
    3fdc:	b80b883a 	mov	r5,r23
    3fe0:	b00d883a 	mov	r6,r22
    3fe4:	000b4140 	call	b414 <__ssprint_r>
    3fe8:	1039ed1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    3fec:	d8c02017 	ldw	r3,128(sp)
    3ff0:	da000404 	addi	r8,sp,16
    3ff4:	003dba06 	br	36e0 <__alt_mem_Flash_flash_data+0xf40036e0>
    3ff8:	d9002f17 	ldw	r4,188(sp)
    3ffc:	b80b883a 	mov	r5,r23
    4000:	b00d883a 	mov	r6,r22
    4004:	000b4140 	call	b414 <__ssprint_r>
    4008:	1039e51e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    400c:	d8802617 	ldw	r2,152(sp)
    4010:	d8c02017 	ldw	r3,128(sp)
    4014:	da000404 	addi	r8,sp,16
    4018:	003e4106 	br	3920 <__alt_mem_Flash_flash_data+0xf4003920>
    401c:	030000b4 	movhi	r12,2
    4020:	633c2484 	addi	r12,r12,-3950
    4024:	db002b15 	stw	r12,172(sp)
    4028:	dac02b17 	ldw	r11,172(sp)
    402c:	1c07883a 	add	r3,r3,r16
    4030:	10800044 	addi	r2,r2,1
    4034:	42c00015 	stw	r11,0(r8)
    4038:	44000115 	stw	r16,4(r8)
    403c:	d8c02015 	stw	r3,128(sp)
    4040:	d8801f15 	stw	r2,124(sp)
    4044:	010001c4 	movi	r4,7
    4048:	20bfae16 	blt	r4,r2,3f04 <__alt_mem_Flash_flash_data+0xf4003f04>
    404c:	42000204 	addi	r8,r8,8
    4050:	003fb406 	br	3f24 <__alt_mem_Flash_flash_data+0xf4003f24>
    4054:	0021883a 	mov	r16,zero
    4058:	003e4306 	br	3968 <__alt_mem_Flash_flash_data+0xf4003968>
    405c:	d9002f17 	ldw	r4,188(sp)
    4060:	b80b883a 	mov	r5,r23
    4064:	b00d883a 	mov	r6,r22
    4068:	000b4140 	call	b414 <__ssprint_r>
    406c:	1039cc1e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    4070:	d8802617 	ldw	r2,152(sp)
    4074:	db003317 	ldw	r12,204(sp)
    4078:	d8c02017 	ldw	r3,128(sp)
    407c:	da000404 	addi	r8,sp,16
    4080:	6085c83a 	sub	r2,r12,r2
    4084:	003e3706 	br	3964 <__alt_mem_Flash_flash_data+0xf4003964>
    4088:	00800184 	movi	r2,6
    408c:	1240012e 	bgeu	r2,r9,4094 <___svfprintf_internal_r+0x1c14>
    4090:	1013883a 	mov	r9,r2
    4094:	4825883a 	mov	r18,r9
    4098:	4805883a 	mov	r2,r9
    409c:	4800a216 	blt	r9,zero,4328 <___svfprintf_internal_r+0x1ea8>
    40a0:	d8802a15 	stw	r2,168(sp)
    40a4:	008000b4 	movhi	r2,2
    40a8:	10bc2204 	addi	r2,r2,-3960
    40ac:	d8803115 	stw	r2,196(sp)
    40b0:	dcc02d15 	stw	r19,180(sp)
    40b4:	d8003215 	stw	zero,200(sp)
    40b8:	d8003415 	stw	zero,208(sp)
    40bc:	0005883a 	mov	r2,zero
    40c0:	003a2206 	br	294c <__alt_mem_Flash_flash_data+0xf400294c>
    40c4:	030000b4 	movhi	r12,2
    40c8:	633c2884 	addi	r12,r12,-3934
    40cc:	db003615 	stw	r12,216(sp)
    40d0:	003ae506 	br	2c68 <__alt_mem_Flash_flash_data+0xf4002c68>
    40d4:	d8c02617 	ldw	r3,152(sp)
    40d8:	00bfff44 	movi	r2,-3
    40dc:	18801516 	blt	r3,r2,4134 <___svfprintf_internal_r+0x1cb4>
    40e0:	48c01416 	blt	r9,r3,4134 <___svfprintf_internal_r+0x1cb4>
    40e4:	d8c03415 	stw	r3,208(sp)
    40e8:	040019c4 	movi	r16,103
    40ec:	003f4906 	br	3e14 <__alt_mem_Flash_flash_data+0xf4003e14>
    40f0:	05400b44 	movi	r21,45
    40f4:	dd402785 	stb	r21,158(sp)
    40f8:	003b1006 	br	2d3c <__alt_mem_Flash_flash_data+0xf4002d3c>
    40fc:	00c00b44 	movi	r3,45
    4100:	d8802a15 	stw	r2,168(sp)
    4104:	dc402d17 	ldw	r17,180(sp)
    4108:	d8c02785 	stb	r3,158(sp)
    410c:	dcc02d15 	stw	r19,180(sp)
    4110:	d8003215 	stw	zero,200(sp)
    4114:	00800b44 	movi	r2,45
    4118:	003a0906 	br	2940 <__alt_mem_Flash_flash_data+0xf4002940>
    411c:	010000b4 	movhi	r4,2
    4120:	213c2484 	addi	r4,r4,-3950
    4124:	d9002b15 	stw	r4,172(sp)
    4128:	003cc306 	br	3438 <__alt_mem_Flash_flash_data+0xf4003438>
    412c:	5005883a 	mov	r2,r10
    4130:	003f2d06 	br	3de8 <__alt_mem_Flash_flash_data+0xf4003de8>
    4134:	843fff84 	addi	r16,r16,-2
    4138:	1f3fffc4 	addi	fp,r3,-1
    413c:	df002615 	stw	fp,152(sp)
    4140:	dc0022c5 	stb	r16,139(sp)
    4144:	e000a016 	blt	fp,zero,43c8 <___svfprintf_internal_r+0x1f48>
    4148:	00800ac4 	movi	r2,43
    414c:	d8802305 	stb	r2,140(sp)
    4150:	00800244 	movi	r2,9
    4154:	1700800e 	bge	r2,fp,4358 <___svfprintf_internal_r+0x1ed8>
    4158:	dd4022c4 	addi	r21,sp,139
    415c:	dc002b15 	stw	r16,172(sp)
    4160:	4025883a 	mov	r18,r8
    4164:	a821883a 	mov	r16,r21
    4168:	e009883a 	mov	r4,fp
    416c:	01400284 	movi	r5,10
    4170:	000efe40 	call	efe4 <__modsi3>
    4174:	10800c04 	addi	r2,r2,48
    4178:	843fffc4 	addi	r16,r16,-1
    417c:	e009883a 	mov	r4,fp
    4180:	01400284 	movi	r5,10
    4184:	80800005 	stb	r2,0(r16)
    4188:	000ef900 	call	ef90 <__divsi3>
    418c:	1039883a 	mov	fp,r2
    4190:	00800244 	movi	r2,9
    4194:	173ff416 	blt	r2,fp,4168 <__alt_mem_Flash_flash_data+0xf4004168>
    4198:	9011883a 	mov	r8,r18
    419c:	e0800c04 	addi	r2,fp,48
    41a0:	8025883a 	mov	r18,r16
    41a4:	913fffc4 	addi	r4,r18,-1
    41a8:	90bfffc5 	stb	r2,-1(r18)
    41ac:	dc002b17 	ldw	r16,172(sp)
    41b0:	25408e2e 	bgeu	r4,r21,43ec <___svfprintf_internal_r+0x1f6c>
    41b4:	d9402384 	addi	r5,sp,142
    41b8:	2c8bc83a 	sub	r5,r5,r18
    41bc:	d8c02344 	addi	r3,sp,141
    41c0:	a94b883a 	add	r5,r21,r5
    41c4:	00000106 	br	41cc <___svfprintf_internal_r+0x1d4c>
    41c8:	20800003 	ldbu	r2,0(r4)
    41cc:	18800005 	stb	r2,0(r3)
    41d0:	18c00044 	addi	r3,r3,1
    41d4:	21000044 	addi	r4,r4,1
    41d8:	197ffb1e 	bne	r3,r5,41c8 <__alt_mem_Flash_flash_data+0xf40041c8>
    41dc:	d8802304 	addi	r2,sp,140
    41e0:	1485c83a 	sub	r2,r2,r18
    41e4:	d8c02344 	addi	r3,sp,141
    41e8:	1885883a 	add	r2,r3,r2
    41ec:	dac03317 	ldw	r11,204(sp)
    41f0:	156bc83a 	sub	r21,r2,r21
    41f4:	dd403a15 	stw	r21,232(sp)
    41f8:	00800044 	movi	r2,1
    41fc:	5d65883a 	add	r18,r11,r21
    4200:	12c0770e 	bge	r2,r11,43e0 <___svfprintf_internal_r+0x1f60>
    4204:	94800044 	addi	r18,r18,1
    4208:	9005883a 	mov	r2,r18
    420c:	90007216 	blt	r18,zero,43d8 <___svfprintf_internal_r+0x1f58>
    4210:	d8003415 	stw	zero,208(sp)
    4214:	003f0706 	br	3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    4218:	da402a15 	stw	r9,168(sp)
    421c:	dd402783 	ldbu	r21,158(sp)
    4220:	4825883a 	mov	r18,r9
    4224:	dcc02d15 	stw	r19,180(sp)
    4228:	d8003215 	stw	zero,200(sp)
    422c:	d8003415 	stw	zero,208(sp)
    4230:	0039bf06 	br	2930 <__alt_mem_Flash_flash_data+0xf4002930>
    4234:	483eb21e 	bne	r9,zero,3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    4238:	9013883a 	mov	r9,r18
    423c:	003eb006 	br	3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    4240:	d9002f17 	ldw	r4,188(sp)
    4244:	b80b883a 	mov	r5,r23
    4248:	b00d883a 	mov	r6,r22
    424c:	000b4140 	call	b414 <__ssprint_r>
    4250:	1039531e 	bne	r2,zero,27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    4254:	dc002617 	ldw	r16,152(sp)
    4258:	d8c02017 	ldw	r3,128(sp)
    425c:	d8801f17 	ldw	r2,124(sp)
    4260:	da000404 	addi	r8,sp,16
    4264:	003e7106 	br	3c2c <__alt_mem_Flash_flash_data+0xf4003c2c>
    4268:	00c00b44 	movi	r3,45
    426c:	64a0003c 	xorhi	r18,r12,32768
    4270:	d8c02a05 	stb	r3,168(sp)
    4274:	003ea806 	br	3d18 <__alt_mem_Flash_flash_data+0xf4003d18>
    4278:	4f000044 	addi	fp,r9,1
    427c:	003ead06 	br	3d34 <__alt_mem_Flash_flash_data+0xf4003d34>
    4280:	d8c03417 	ldw	r3,208(sp)
    4284:	00c0410e 	bge	zero,r3,438c <___svfprintf_internal_r+0x1f0c>
    4288:	04800044 	movi	r18,1
    428c:	dac03317 	ldw	r11,204(sp)
    4290:	92e5883a 	add	r18,r18,r11
    4294:	9005883a 	mov	r2,r18
    4298:	903ee60e 	bge	r18,zero,3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    429c:	0005883a 	mov	r2,zero
    42a0:	003ee406 	br	3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    42a4:	d8c02617 	ldw	r3,152(sp)
    42a8:	d8c03415 	stw	r3,208(sp)
    42ac:	00c0310e 	bge	zero,r3,4374 <___svfprintf_internal_r+0x1ef4>
    42b0:	48001f1e 	bne	r9,zero,4330 <___svfprintf_internal_r+0x1eb0>
    42b4:	8c40004c 	andi	r17,r17,1
    42b8:	88001d1e 	bne	r17,zero,4330 <___svfprintf_internal_r+0x1eb0>
    42bc:	1805883a 	mov	r2,r3
    42c0:	183edb0e 	bge	r3,zero,3e30 <__alt_mem_Flash_flash_data+0xf4003e30>
    42c4:	0005883a 	mov	r2,zero
    42c8:	003ed906 	br	3e30 <__alt_mem_Flash_flash_data+0xf4003e30>
    42cc:	d8802117 	ldw	r2,132(sp)
    42d0:	003ec506 	br	3de8 <__alt_mem_Flash_flash_data+0xf4003de8>
    42d4:	d9003717 	ldw	r4,220(sp)
    42d8:	900b883a 	mov	r5,r18
    42dc:	000d883a 	mov	r6,zero
    42e0:	000f883a 	mov	r7,zero
    42e4:	da004015 	stw	r8,256(sp)
    42e8:	da403f15 	stw	r9,252(sp)
    42ec:	da803e15 	stw	r10,248(sp)
    42f0:	00101b80 	call	101b8 <__eqdf2>
    42f4:	da004017 	ldw	r8,256(sp)
    42f8:	da403f17 	ldw	r9,252(sp)
    42fc:	da803e17 	ldw	r10,248(sp)
    4300:	103f2c26 	beq	r2,zero,3fb4 <__alt_mem_Flash_flash_data+0xf4003fb4>
    4304:	00800044 	movi	r2,1
    4308:	1707c83a 	sub	r3,r2,fp
    430c:	d8c02615 	stw	r3,152(sp)
    4310:	003f2906 	br	3fb8 <__alt_mem_Flash_flash_data+0xf4003fb8>
    4314:	db003417 	ldw	r12,208(sp)
    4318:	64800044 	addi	r18,r12,1
    431c:	9005883a 	mov	r2,r18
    4320:	903ec40e 	bge	r18,zero,3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    4324:	003fdd06 	br	429c <__alt_mem_Flash_flash_data+0xf400429c>
    4328:	0005883a 	mov	r2,zero
    432c:	003f5c06 	br	40a0 <__alt_mem_Flash_flash_data+0xf40040a0>
    4330:	dac03417 	ldw	r11,208(sp)
    4334:	4a400044 	addi	r9,r9,1
    4338:	5a65883a 	add	r18,r11,r9
    433c:	9005883a 	mov	r2,r18
    4340:	903ebc0e 	bge	r18,zero,3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    4344:	003fd506 	br	429c <__alt_mem_Flash_flash_data+0xf400429c>
    4348:	008000b4 	movhi	r2,2
    434c:	10bc2484 	addi	r2,r2,-3950
    4350:	d8802b15 	stw	r2,172(sp)
    4354:	003d2b06 	br	3804 <__alt_mem_Flash_flash_data+0xf4003804>
    4358:	00800c04 	movi	r2,48
    435c:	e0c00c04 	addi	r3,fp,48
    4360:	d8802345 	stb	r2,141(sp)
    4364:	d8c02385 	stb	r3,142(sp)
    4368:	d88023c4 	addi	r2,sp,143
    436c:	dd4022c4 	addi	r21,sp,139
    4370:	003f9e06 	br	41ec <__alt_mem_Flash_flash_data+0xf40041ec>
    4374:	4800081e 	bne	r9,zero,4398 <___svfprintf_internal_r+0x1f18>
    4378:	8c40004c 	andi	r17,r17,1
    437c:	8800061e 	bne	r17,zero,4398 <___svfprintf_internal_r+0x1f18>
    4380:	00800044 	movi	r2,1
    4384:	1025883a 	mov	r18,r2
    4388:	003eaa06 	br	3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    438c:	04800084 	movi	r18,2
    4390:	90e5c83a 	sub	r18,r18,r3
    4394:	003fbd06 	br	428c <__alt_mem_Flash_flash_data+0xf400428c>
    4398:	4c800084 	addi	r18,r9,2
    439c:	9005883a 	mov	r2,r18
    43a0:	903ea40e 	bge	r18,zero,3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    43a4:	003fbd06 	br	429c <__alt_mem_Flash_flash_data+0xf400429c>
    43a8:	dac02d17 	ldw	r11,180(sp)
    43ac:	5a400017 	ldw	r9,0(r11)
    43b0:	5ac00104 	addi	r11,r11,4
    43b4:	dac02d15 	stw	r11,180(sp)
    43b8:	483e410e 	bge	r9,zero,3cc0 <__alt_mem_Flash_flash_data+0xf4003cc0>
    43bc:	027fffc4 	movi	r9,-1
    43c0:	1c000047 	ldb	r16,1(r3)
    43c4:	00388406 	br	25d8 <__alt_mem_Flash_flash_data+0xf40025d8>
    43c8:	00800b44 	movi	r2,45
    43cc:	0739c83a 	sub	fp,zero,fp
    43d0:	d8802305 	stb	r2,140(sp)
    43d4:	003f5e06 	br	4150 <__alt_mem_Flash_flash_data+0xf4004150>
    43d8:	0005883a 	mov	r2,zero
    43dc:	003f8c06 	br	4210 <__alt_mem_Flash_flash_data+0xf4004210>
    43e0:	88a2703a 	and	r17,r17,r2
    43e4:	883f8826 	beq	r17,zero,4208 <__alt_mem_Flash_flash_data+0xf4004208>
    43e8:	003f8606 	br	4204 <__alt_mem_Flash_flash_data+0xf4004204>
    43ec:	d8802344 	addi	r2,sp,141
    43f0:	003f7e06 	br	41ec <__alt_mem_Flash_flash_data+0xf40041ec>
    43f4:	d8c02617 	ldw	r3,152(sp)
    43f8:	003f4f06 	br	4138 <__alt_mem_Flash_flash_data+0xf4004138>
    43fc:	dac02f17 	ldw	r11,188(sp)
    4400:	00800304 	movi	r2,12
    4404:	58800015 	stw	r2,0(r11)
    4408:	00bfffc4 	movi	r2,-1
    440c:	0038e806 	br	27b0 <__alt_mem_Flash_flash_data+0xf40027b0>

00004410 <___vfprintf_internal_r>:
    4410:	deffb604 	addi	sp,sp,-296
    4414:	dfc04915 	stw	ra,292(sp)
    4418:	ddc04715 	stw	r23,284(sp)
    441c:	dd804615 	stw	r22,280(sp)
    4420:	282f883a 	mov	r23,r5
    4424:	202d883a 	mov	r22,r4
    4428:	d9802a15 	stw	r6,168(sp)
    442c:	d9c02d15 	stw	r7,180(sp)
    4430:	df004815 	stw	fp,288(sp)
    4434:	dd404515 	stw	r21,276(sp)
    4438:	dd004415 	stw	r20,272(sp)
    443c:	dcc04315 	stw	r19,268(sp)
    4440:	dc804215 	stw	r18,264(sp)
    4444:	dc404115 	stw	r17,260(sp)
    4448:	dc004015 	stw	r16,256(sp)
    444c:	0008ff80 	call	8ff8 <_localeconv_r>
    4450:	10800017 	ldw	r2,0(r2)
    4454:	1009883a 	mov	r4,r2
    4458:	d8803515 	stw	r2,212(sp)
    445c:	00023e80 	call	23e8 <strlen>
    4460:	d8803815 	stw	r2,224(sp)
    4464:	b0000226 	beq	r22,zero,4470 <___vfprintf_internal_r+0x60>
    4468:	b0800e17 	ldw	r2,56(r22)
    446c:	1000e126 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x3e4>
    4470:	b880030b 	ldhu	r2,12(r23)
    4474:	10c8000c 	andi	r3,r2,8192
    4478:	1800061e 	bne	r3,zero,4494 <___vfprintf_internal_r+0x84>
    447c:	b9001917 	ldw	r4,100(r23)
    4480:	00f7ffc4 	movi	r3,-8193
    4484:	10880014 	ori	r2,r2,8192
    4488:	20c6703a 	and	r3,r4,r3
    448c:	b880030d 	sth	r2,12(r23)
    4490:	b8c01915 	stw	r3,100(r23)
    4494:	10c0020c 	andi	r3,r2,8
    4498:	1800a726 	beq	r3,zero,4738 <___vfprintf_internal_r+0x328>
    449c:	b8c00417 	ldw	r3,16(r23)
    44a0:	1800a526 	beq	r3,zero,4738 <___vfprintf_internal_r+0x328>
    44a4:	1080068c 	andi	r2,r2,26
    44a8:	00c00284 	movi	r3,10
    44ac:	10c0aa26 	beq	r2,r3,4758 <___vfprintf_internal_r+0x348>
    44b0:	dac01e04 	addi	r11,sp,120
    44b4:	db001dc4 	addi	r12,sp,119
    44b8:	d8800404 	addi	r2,sp,16
    44bc:	050000b4 	movhi	r20,2
    44c0:	dac02815 	stw	r11,160(sp)
    44c4:	5b17c83a 	sub	r11,r11,r12
    44c8:	a53c2c84 	addi	r20,r20,-3918
    44cc:	db002915 	stw	r12,164(sp)
    44d0:	d8801e15 	stw	r2,120(sp)
    44d4:	d8002015 	stw	zero,128(sp)
    44d8:	d8001f15 	stw	zero,124(sp)
    44dc:	d8003315 	stw	zero,204(sp)
    44e0:	d8003715 	stw	zero,220(sp)
    44e4:	d8003915 	stw	zero,228(sp)
    44e8:	1011883a 	mov	r8,r2
    44ec:	d8003b15 	stw	zero,236(sp)
    44f0:	d8003a15 	stw	zero,232(sp)
    44f4:	d8002f15 	stw	zero,188(sp)
    44f8:	dac03c15 	stw	r11,240(sp)
    44fc:	db002a17 	ldw	r12,168(sp)
    4500:	60800007 	ldb	r2,0(r12)
    4504:	1000be26 	beq	r2,zero,4800 <___vfprintf_internal_r+0x3f0>
    4508:	00c00944 	movi	r3,37
    450c:	10c0bc26 	beq	r2,r3,4800 <___vfprintf_internal_r+0x3f0>
    4510:	6021883a 	mov	r16,r12
    4514:	00000106 	br	451c <___vfprintf_internal_r+0x10c>
    4518:	10c08426 	beq	r2,r3,472c <___vfprintf_internal_r+0x31c>
    451c:	84000044 	addi	r16,r16,1
    4520:	80800007 	ldb	r2,0(r16)
    4524:	103ffc1e 	bne	r2,zero,4518 <__alt_mem_Flash_flash_data+0xf4004518>
    4528:	dac02a17 	ldw	r11,168(sp)
    452c:	82e3c83a 	sub	r17,r16,r11
    4530:	88000f26 	beq	r17,zero,4570 <___vfprintf_internal_r+0x160>
    4534:	d8c02017 	ldw	r3,128(sp)
    4538:	d8801f17 	ldw	r2,124(sp)
    453c:	dac02a17 	ldw	r11,168(sp)
    4540:	1c47883a 	add	r3,r3,r17
    4544:	10800044 	addi	r2,r2,1
    4548:	d8c02015 	stw	r3,128(sp)
    454c:	42c00015 	stw	r11,0(r8)
    4550:	44400115 	stw	r17,4(r8)
    4554:	d8801f15 	stw	r2,124(sp)
    4558:	00c001c4 	movi	r3,7
    455c:	18809316 	blt	r3,r2,47ac <___vfprintf_internal_r+0x39c>
    4560:	42000204 	addi	r8,r8,8
    4564:	db002f17 	ldw	r12,188(sp)
    4568:	6459883a 	add	r12,r12,r17
    456c:	db002f15 	stw	r12,188(sp)
    4570:	80800007 	ldb	r2,0(r16)
    4574:	10009426 	beq	r2,zero,47c8 <___vfprintf_internal_r+0x3b8>
    4578:	80800044 	addi	r2,r16,1
    457c:	84000047 	ldb	r16,1(r16)
    4580:	d8002785 	stb	zero,158(sp)
    4584:	000d883a 	mov	r6,zero
    4588:	027fffc4 	movi	r9,-1
    458c:	d8002e15 	stw	zero,184(sp)
    4590:	0023883a 	mov	r17,zero
    4594:	01001604 	movi	r4,88
    4598:	01400244 	movi	r5,9
    459c:	02800a84 	movi	r10,42
    45a0:	01c01b04 	movi	r7,108
    45a4:	10c00044 	addi	r3,r2,1
    45a8:	80bff804 	addi	r2,r16,-32
    45ac:	2082cd36 	bltu	r4,r2,50e4 <___vfprintf_internal_r+0xcd4>
    45b0:	100490ba 	slli	r2,r2,2
    45b4:	02c00034 	movhi	r11,0
    45b8:	5ad17204 	addi	r11,r11,17864
    45bc:	12c5883a 	add	r2,r2,r11
    45c0:	10800017 	ldw	r2,0(r2)
    45c4:	1000683a 	jmp	r2
    45c8:	00004efc 	xorhi	zero,zero,315
    45cc:	000050e4 	muli	zero,zero,323
    45d0:	000050e4 	muli	zero,zero,323
    45d4:	0000504c 	andi	zero,zero,321
    45d8:	000050e4 	muli	zero,zero,323
    45dc:	000050e4 	muli	zero,zero,323
    45e0:	000050e4 	muli	zero,zero,323
    45e4:	000050e4 	muli	zero,zero,323
    45e8:	000050e4 	muli	zero,zero,323
    45ec:	000050e4 	muli	zero,zero,323
    45f0:	00004f1c 	xori	zero,zero,316
    45f4:	00004f48 	cmpgei	zero,zero,317
    45f8:	000050e4 	muli	zero,zero,323
    45fc:	00004808 	cmpgei	zero,zero,288
    4600:	00004818 	cmpnei	zero,zero,288
    4604:	000050e4 	muli	zero,zero,323
    4608:	00004858 	cmpnei	zero,zero,289
    460c:	00004868 	cmpgeui	zero,zero,289
    4610:	00004868 	cmpgeui	zero,zero,289
    4614:	00004868 	cmpgeui	zero,zero,289
    4618:	00004868 	cmpgeui	zero,zero,289
    461c:	00004868 	cmpgeui	zero,zero,289
    4620:	00004868 	cmpgeui	zero,zero,289
    4624:	00004868 	cmpgeui	zero,zero,289
    4628:	00004868 	cmpgeui	zero,zero,289
    462c:	00004868 	cmpgeui	zero,zero,289
    4630:	000050e4 	muli	zero,zero,323
    4634:	000050e4 	muli	zero,zero,323
    4638:	000050e4 	muli	zero,zero,323
    463c:	000050e4 	muli	zero,zero,323
    4640:	000050e4 	muli	zero,zero,323
    4644:	000050e4 	muli	zero,zero,323
    4648:	000050e4 	muli	zero,zero,323
    464c:	000050e4 	muli	zero,zero,323
    4650:	000050e4 	muli	zero,zero,323
    4654:	000050e4 	muli	zero,zero,323
    4658:	0000489c 	xori	zero,zero,290
    465c:	00004d0c 	andi	zero,zero,308
    4660:	000050e4 	muli	zero,zero,323
    4664:	00004d0c 	andi	zero,zero,308
    4668:	000050e4 	muli	zero,zero,323
    466c:	000050e4 	muli	zero,zero,323
    4670:	000050e4 	muli	zero,zero,323
    4674:	000050e4 	muli	zero,zero,323
    4678:	00004df8 	rdprs	zero,zero,311
    467c:	000050e4 	muli	zero,zero,323
    4680:	000050e4 	muli	zero,zero,323
    4684:	00004ca0 	cmpeqi	zero,zero,306
    4688:	000050e4 	muli	zero,zero,323
    468c:	000050e4 	muli	zero,zero,323
    4690:	000050e4 	muli	zero,zero,323
    4694:	000050e4 	muli	zero,zero,323
    4698:	000050e4 	muli	zero,zero,323
    469c:	00004cdc 	xori	zero,zero,307
    46a0:	000050e4 	muli	zero,zero,323
    46a4:	000050e4 	muli	zero,zero,323
    46a8:	00004ea0 	cmpeqi	zero,zero,314
    46ac:	000050e4 	muli	zero,zero,323
    46b0:	000050e4 	muli	zero,zero,323
    46b4:	000050e4 	muli	zero,zero,323
    46b8:	000050e4 	muli	zero,zero,323
    46bc:	000050e4 	muli	zero,zero,323
    46c0:	000050e4 	muli	zero,zero,323
    46c4:	000050e4 	muli	zero,zero,323
    46c8:	000050e4 	muli	zero,zero,323
    46cc:	000050e4 	muli	zero,zero,323
    46d0:	000050e4 	muli	zero,zero,323
    46d4:	00004f58 	cmpnei	zero,zero,317
    46d8:	00004e08 	cmpgei	zero,zero,312
    46dc:	00004d0c 	andi	zero,zero,308
    46e0:	00004d0c 	andi	zero,zero,308
    46e4:	00004d0c 	andi	zero,zero,308
    46e8:	00004e48 	cmpgei	zero,zero,313
    46ec:	00004e08 	cmpgei	zero,zero,312
    46f0:	000050e4 	muli	zero,zero,323
    46f4:	000050e4 	muli	zero,zero,323
    46f8:	00004e58 	cmpnei	zero,zero,313
    46fc:	000050e4 	muli	zero,zero,323
    4700:	00004e6c 	andhi	zero,zero,313
    4704:	000050a8 	cmpgeui	zero,zero,322
    4708:	00004db0 	cmpltui	zero,zero,310
    470c:	0000505c 	xori	zero,zero,321
    4710:	000050e4 	muli	zero,zero,323
    4714:	00004f98 	cmpnei	zero,zero,318
    4718:	000050e4 	muli	zero,zero,323
    471c:	0000506c 	andhi	zero,zero,321
    4720:	000050e4 	muli	zero,zero,323
    4724:	000050e4 	muli	zero,zero,323
    4728:	0000500c 	andi	zero,zero,320
    472c:	db002a17 	ldw	r12,168(sp)
    4730:	8323c83a 	sub	r17,r16,r12
    4734:	003f7e06 	br	4530 <__alt_mem_Flash_flash_data+0xf4004530>
    4738:	b009883a 	mov	r4,r22
    473c:	b80b883a 	mov	r5,r23
    4740:	00064400 	call	6440 <__swsetup_r>
    4744:	10000c1e 	bne	r2,zero,4778 <___vfprintf_internal_r+0x368>
    4748:	b880030b 	ldhu	r2,12(r23)
    474c:	00c00284 	movi	r3,10
    4750:	1080068c 	andi	r2,r2,26
    4754:	10ff561e 	bne	r2,r3,44b0 <__alt_mem_Flash_flash_data+0xf40044b0>
    4758:	b880038f 	ldh	r2,14(r23)
    475c:	103f5416 	blt	r2,zero,44b0 <__alt_mem_Flash_flash_data+0xf40044b0>
    4760:	d9802a17 	ldw	r6,168(sp)
    4764:	d9c02d17 	ldw	r7,180(sp)
    4768:	b009883a 	mov	r4,r22
    476c:	b80b883a 	mov	r5,r23
    4770:	00063840 	call	6384 <__sbprintf>
    4774:	00000106 	br	477c <___vfprintf_internal_r+0x36c>
    4778:	00bfffc4 	movi	r2,-1
    477c:	dfc04917 	ldw	ra,292(sp)
    4780:	df004817 	ldw	fp,288(sp)
    4784:	ddc04717 	ldw	r23,284(sp)
    4788:	dd804617 	ldw	r22,280(sp)
    478c:	dd404517 	ldw	r21,276(sp)
    4790:	dd004417 	ldw	r20,272(sp)
    4794:	dcc04317 	ldw	r19,268(sp)
    4798:	dc804217 	ldw	r18,264(sp)
    479c:	dc404117 	ldw	r17,260(sp)
    47a0:	dc004017 	ldw	r16,256(sp)
    47a4:	dec04a04 	addi	sp,sp,296
    47a8:	f800283a 	ret
    47ac:	b009883a 	mov	r4,r22
    47b0:	b80b883a 	mov	r5,r23
    47b4:	d9801e04 	addi	r6,sp,120
    47b8:	000c7140 	call	c714 <__sprint_r>
    47bc:	1000081e 	bne	r2,zero,47e0 <___vfprintf_internal_r+0x3d0>
    47c0:	da000404 	addi	r8,sp,16
    47c4:	003f6706 	br	4564 <__alt_mem_Flash_flash_data+0xf4004564>
    47c8:	d8802017 	ldw	r2,128(sp)
    47cc:	10000426 	beq	r2,zero,47e0 <___vfprintf_internal_r+0x3d0>
    47d0:	b009883a 	mov	r4,r22
    47d4:	b80b883a 	mov	r5,r23
    47d8:	d9801e04 	addi	r6,sp,120
    47dc:	000c7140 	call	c714 <__sprint_r>
    47e0:	b880030b 	ldhu	r2,12(r23)
    47e4:	1080100c 	andi	r2,r2,64
    47e8:	103fe31e 	bne	r2,zero,4778 <__alt_mem_Flash_flash_data+0xf4004778>
    47ec:	d8802f17 	ldw	r2,188(sp)
    47f0:	003fe206 	br	477c <__alt_mem_Flash_flash_data+0xf400477c>
    47f4:	b009883a 	mov	r4,r22
    47f8:	00084a00 	call	84a0 <__sinit>
    47fc:	003f1c06 	br	4470 <__alt_mem_Flash_flash_data+0xf4004470>
    4800:	dc002a17 	ldw	r16,168(sp)
    4804:	003f5a06 	br	4570 <__alt_mem_Flash_flash_data+0xf4004570>
    4808:	1805883a 	mov	r2,r3
    480c:	8c400114 	ori	r17,r17,4
    4810:	1c000007 	ldb	r16,0(r3)
    4814:	003f6306 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4818:	1c000007 	ldb	r16,0(r3)
    481c:	18800044 	addi	r2,r3,1
    4820:	8286ad26 	beq	r16,r10,62d8 <___vfprintf_internal_r+0x1ec8>
    4824:	82fff404 	addi	r11,r16,-48
    4828:	1007883a 	mov	r3,r2
    482c:	0013883a 	mov	r9,zero
    4830:	2aff5d36 	bltu	r5,r11,45a8 <__alt_mem_Flash_flash_data+0xf40045a8>
    4834:	1c000007 	ldb	r16,0(r3)
    4838:	4a4002a4 	muli	r9,r9,10
    483c:	18c00044 	addi	r3,r3,1
    4840:	5a53883a 	add	r9,r11,r9
    4844:	82fff404 	addi	r11,r16,-48
    4848:	2afffa2e 	bgeu	r5,r11,4834 <__alt_mem_Flash_flash_data+0xf4004834>
    484c:	483f560e 	bge	r9,zero,45a8 <__alt_mem_Flash_flash_data+0xf40045a8>
    4850:	027fffc4 	movi	r9,-1
    4854:	003f5406 	br	45a8 <__alt_mem_Flash_flash_data+0xf40045a8>
    4858:	8c402014 	ori	r17,r17,128
    485c:	1805883a 	mov	r2,r3
    4860:	1c000007 	ldb	r16,0(r3)
    4864:	003f4f06 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4868:	1805883a 	mov	r2,r3
    486c:	d8002e15 	stw	zero,184(sp)
    4870:	82fff404 	addi	r11,r16,-48
    4874:	0019883a 	mov	r12,zero
    4878:	14000007 	ldb	r16,0(r2)
    487c:	630002a4 	muli	r12,r12,10
    4880:	18c00044 	addi	r3,r3,1
    4884:	1805883a 	mov	r2,r3
    4888:	62d9883a 	add	r12,r12,r11
    488c:	82fff404 	addi	r11,r16,-48
    4890:	2afff92e 	bgeu	r5,r11,4878 <__alt_mem_Flash_flash_data+0xf4004878>
    4894:	db002e15 	stw	r12,184(sp)
    4898:	003f4306 	br	45a8 <__alt_mem_Flash_flash_data+0xf40045a8>
    489c:	8c400414 	ori	r17,r17,16
    48a0:	d8c02a15 	stw	r3,168(sp)
    48a4:	d9802785 	stb	r6,158(sp)
    48a8:	8880080c 	andi	r2,r17,32
    48ac:	d8c02d17 	ldw	r3,180(sp)
    48b0:	10015a26 	beq	r2,zero,4e1c <___vfprintf_internal_r+0xa0c>
    48b4:	db002d17 	ldw	r12,180(sp)
    48b8:	18800117 	ldw	r2,4(r3)
    48bc:	1cc00017 	ldw	r19,0(r3)
    48c0:	63000204 	addi	r12,r12,8
    48c4:	db002d15 	stw	r12,180(sp)
    48c8:	1039883a 	mov	fp,r2
    48cc:	10044516 	blt	r2,zero,59e4 <___vfprintf_internal_r+0x15d4>
    48d0:	dd402783 	ldbu	r21,158(sp)
    48d4:	da403215 	stw	r9,200(sp)
    48d8:	00800044 	movi	r2,1
    48dc:	9f06b03a 	or	r3,r19,fp
    48e0:	48000216 	blt	r9,zero,48ec <___vfprintf_internal_r+0x4dc>
    48e4:	013fdfc4 	movi	r4,-129
    48e8:	8922703a 	and	r17,r17,r4
    48ec:	1802071e 	bne	r3,zero,510c <___vfprintf_internal_r+0xcfc>
    48f0:	4802fa26 	beq	r9,zero,54dc <___vfprintf_internal_r+0x10cc>
    48f4:	10803fcc 	andi	r2,r2,255
    48f8:	00c00044 	movi	r3,1
    48fc:	10c22926 	beq	r2,r3,51a4 <___vfprintf_internal_r+0xd94>
    4900:	00c00084 	movi	r3,2
    4904:	10c31726 	beq	r2,r3,5564 <___vfprintf_internal_r+0x1154>
    4908:	d8c01e04 	addi	r3,sp,120
    490c:	9808d0fa 	srli	r4,r19,3
    4910:	e00a977a 	slli	r5,fp,29
    4914:	e038d0fa 	srli	fp,fp,3
    4918:	9cc001cc 	andi	r19,r19,7
    491c:	98800c04 	addi	r2,r19,48
    4920:	18ffffc4 	addi	r3,r3,-1
    4924:	2926b03a 	or	r19,r5,r4
    4928:	18800005 	stb	r2,0(r3)
    492c:	9f08b03a 	or	r4,r19,fp
    4930:	203ff61e 	bne	r4,zero,490c <__alt_mem_Flash_flash_data+0xf400490c>
    4934:	8900004c 	andi	r4,r17,1
    4938:	d8c03115 	stw	r3,196(sp)
    493c:	2003931e 	bne	r4,zero,578c <___vfprintf_internal_r+0x137c>
    4940:	dac02817 	ldw	r11,160(sp)
    4944:	58e5c83a 	sub	r18,r11,r3
    4948:	9005883a 	mov	r2,r18
    494c:	9240010e 	bge	r18,r9,4954 <___vfprintf_internal_r+0x544>
    4950:	4805883a 	mov	r2,r9
    4954:	d8802b15 	stw	r2,172(sp)
    4958:	d8003415 	stw	zero,208(sp)
    495c:	a8803fcc 	andi	r2,r21,255
    4960:	1080201c 	xori	r2,r2,128
    4964:	10bfe004 	addi	r2,r2,-128
    4968:	10000326 	beq	r2,zero,4978 <___vfprintf_internal_r+0x568>
    496c:	db002b17 	ldw	r12,172(sp)
    4970:	63000044 	addi	r12,r12,1
    4974:	db002b15 	stw	r12,172(sp)
    4978:	88c0008c 	andi	r3,r17,2
    497c:	d8c02c15 	stw	r3,176(sp)
    4980:	18000326 	beq	r3,zero,4990 <___vfprintf_internal_r+0x580>
    4984:	dac02b17 	ldw	r11,172(sp)
    4988:	5ac00084 	addi	r11,r11,2
    498c:	dac02b15 	stw	r11,172(sp)
    4990:	8b00210c 	andi	r12,r17,132
    4994:	db003015 	stw	r12,192(sp)
    4998:	6001da1e 	bne	r12,zero,5104 <___vfprintf_internal_r+0xcf4>
    499c:	dac02e17 	ldw	r11,184(sp)
    49a0:	db002b17 	ldw	r12,172(sp)
    49a4:	5b39c83a 	sub	fp,r11,r12
    49a8:	0701d60e 	bge	zero,fp,5104 <___vfprintf_internal_r+0xcf4>
    49ac:	02400404 	movi	r9,16
    49b0:	d8c02017 	ldw	r3,128(sp)
    49b4:	d8801f17 	ldw	r2,124(sp)
    49b8:	4f053c0e 	bge	r9,fp,5eac <___vfprintf_internal_r+0x1a9c>
    49bc:	014000b4 	movhi	r5,2
    49c0:	297c3084 	addi	r5,r5,-3902
    49c4:	d9403615 	stw	r5,216(sp)
    49c8:	482b883a 	mov	r21,r9
    49cc:	04c001c4 	movi	r19,7
    49d0:	00000306 	br	49e0 <___vfprintf_internal_r+0x5d0>
    49d4:	e73ffc04 	addi	fp,fp,-16
    49d8:	42000204 	addi	r8,r8,8
    49dc:	af00130e 	bge	r21,fp,4a2c <___vfprintf_internal_r+0x61c>
    49e0:	02c000b4 	movhi	r11,2
    49e4:	18c00404 	addi	r3,r3,16
    49e8:	10800044 	addi	r2,r2,1
    49ec:	5afc3084 	addi	r11,r11,-3902
    49f0:	42c00015 	stw	r11,0(r8)
    49f4:	45400115 	stw	r21,4(r8)
    49f8:	d8c02015 	stw	r3,128(sp)
    49fc:	d8801f15 	stw	r2,124(sp)
    4a00:	98bff40e 	bge	r19,r2,49d4 <__alt_mem_Flash_flash_data+0xf40049d4>
    4a04:	b009883a 	mov	r4,r22
    4a08:	b80b883a 	mov	r5,r23
    4a0c:	d9801e04 	addi	r6,sp,120
    4a10:	000c7140 	call	c714 <__sprint_r>
    4a14:	103f721e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4a18:	e73ffc04 	addi	fp,fp,-16
    4a1c:	d8c02017 	ldw	r3,128(sp)
    4a20:	d8801f17 	ldw	r2,124(sp)
    4a24:	da000404 	addi	r8,sp,16
    4a28:	af3fed16 	blt	r21,fp,49e0 <__alt_mem_Flash_flash_data+0xf40049e0>
    4a2c:	db003617 	ldw	r12,216(sp)
    4a30:	e0c7883a 	add	r3,fp,r3
    4a34:	10800044 	addi	r2,r2,1
    4a38:	43000015 	stw	r12,0(r8)
    4a3c:	47000115 	stw	fp,4(r8)
    4a40:	d8c02015 	stw	r3,128(sp)
    4a44:	d8801f15 	stw	r2,124(sp)
    4a48:	010001c4 	movi	r4,7
    4a4c:	20830e16 	blt	r4,r2,5688 <___vfprintf_internal_r+0x1278>
    4a50:	d8802787 	ldb	r2,158(sp)
    4a54:	42000204 	addi	r8,r8,8
    4a58:	10000c26 	beq	r2,zero,4a8c <___vfprintf_internal_r+0x67c>
    4a5c:	d8801f17 	ldw	r2,124(sp)
    4a60:	d9002784 	addi	r4,sp,158
    4a64:	18c00044 	addi	r3,r3,1
    4a68:	10800044 	addi	r2,r2,1
    4a6c:	41000015 	stw	r4,0(r8)
    4a70:	01000044 	movi	r4,1
    4a74:	41000115 	stw	r4,4(r8)
    4a78:	d8c02015 	stw	r3,128(sp)
    4a7c:	d8801f15 	stw	r2,124(sp)
    4a80:	010001c4 	movi	r4,7
    4a84:	2082a716 	blt	r4,r2,5524 <___vfprintf_internal_r+0x1114>
    4a88:	42000204 	addi	r8,r8,8
    4a8c:	dac02c17 	ldw	r11,176(sp)
    4a90:	58000c26 	beq	r11,zero,4ac4 <___vfprintf_internal_r+0x6b4>
    4a94:	d8801f17 	ldw	r2,124(sp)
    4a98:	d9002704 	addi	r4,sp,156
    4a9c:	18c00084 	addi	r3,r3,2
    4aa0:	10800044 	addi	r2,r2,1
    4aa4:	41000015 	stw	r4,0(r8)
    4aa8:	01000084 	movi	r4,2
    4aac:	41000115 	stw	r4,4(r8)
    4ab0:	d8c02015 	stw	r3,128(sp)
    4ab4:	d8801f15 	stw	r2,124(sp)
    4ab8:	010001c4 	movi	r4,7
    4abc:	2082a116 	blt	r4,r2,5544 <___vfprintf_internal_r+0x1134>
    4ac0:	42000204 	addi	r8,r8,8
    4ac4:	db003017 	ldw	r12,192(sp)
    4ac8:	00802004 	movi	r2,128
    4acc:	60820326 	beq	r12,r2,52dc <___vfprintf_internal_r+0xecc>
    4ad0:	db003217 	ldw	r12,200(sp)
    4ad4:	64abc83a 	sub	r21,r12,r18
    4ad8:	0540260e 	bge	zero,r21,4b74 <___vfprintf_internal_r+0x764>
    4adc:	07000404 	movi	fp,16
    4ae0:	d8801f17 	ldw	r2,124(sp)
    4ae4:	e544570e 	bge	fp,r21,5c44 <___vfprintf_internal_r+0x1834>
    4ae8:	014000b4 	movhi	r5,2
    4aec:	297c2c84 	addi	r5,r5,-3918
    4af0:	d9402c15 	stw	r5,176(sp)
    4af4:	04c001c4 	movi	r19,7
    4af8:	00000306 	br	4b08 <___vfprintf_internal_r+0x6f8>
    4afc:	ad7ffc04 	addi	r21,r21,-16
    4b00:	42000204 	addi	r8,r8,8
    4b04:	e540110e 	bge	fp,r21,4b4c <___vfprintf_internal_r+0x73c>
    4b08:	18c00404 	addi	r3,r3,16
    4b0c:	10800044 	addi	r2,r2,1
    4b10:	45000015 	stw	r20,0(r8)
    4b14:	47000115 	stw	fp,4(r8)
    4b18:	d8c02015 	stw	r3,128(sp)
    4b1c:	d8801f15 	stw	r2,124(sp)
    4b20:	98bff60e 	bge	r19,r2,4afc <__alt_mem_Flash_flash_data+0xf4004afc>
    4b24:	b009883a 	mov	r4,r22
    4b28:	b80b883a 	mov	r5,r23
    4b2c:	d9801e04 	addi	r6,sp,120
    4b30:	000c7140 	call	c714 <__sprint_r>
    4b34:	103f2a1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4b38:	ad7ffc04 	addi	r21,r21,-16
    4b3c:	d8c02017 	ldw	r3,128(sp)
    4b40:	d8801f17 	ldw	r2,124(sp)
    4b44:	da000404 	addi	r8,sp,16
    4b48:	e57fef16 	blt	fp,r21,4b08 <__alt_mem_Flash_flash_data+0xf4004b08>
    4b4c:	dac02c17 	ldw	r11,176(sp)
    4b50:	1d47883a 	add	r3,r3,r21
    4b54:	10800044 	addi	r2,r2,1
    4b58:	42c00015 	stw	r11,0(r8)
    4b5c:	45400115 	stw	r21,4(r8)
    4b60:	d8c02015 	stw	r3,128(sp)
    4b64:	d8801f15 	stw	r2,124(sp)
    4b68:	010001c4 	movi	r4,7
    4b6c:	20826516 	blt	r4,r2,5504 <___vfprintf_internal_r+0x10f4>
    4b70:	42000204 	addi	r8,r8,8
    4b74:	8880400c 	andi	r2,r17,256
    4b78:	1001901e 	bne	r2,zero,51bc <___vfprintf_internal_r+0xdac>
    4b7c:	d8801f17 	ldw	r2,124(sp)
    4b80:	db003117 	ldw	r12,196(sp)
    4b84:	1c87883a 	add	r3,r3,r18
    4b88:	10800044 	addi	r2,r2,1
    4b8c:	43000015 	stw	r12,0(r8)
    4b90:	44800115 	stw	r18,4(r8)
    4b94:	d8c02015 	stw	r3,128(sp)
    4b98:	d8801f15 	stw	r2,124(sp)
    4b9c:	010001c4 	movi	r4,7
    4ba0:	20824016 	blt	r4,r2,54a4 <___vfprintf_internal_r+0x1094>
    4ba4:	42000204 	addi	r8,r8,8
    4ba8:	8c40010c 	andi	r17,r17,4
    4bac:	88003126 	beq	r17,zero,4c74 <___vfprintf_internal_r+0x864>
    4bb0:	db002e17 	ldw	r12,184(sp)
    4bb4:	dac02b17 	ldw	r11,172(sp)
    4bb8:	62e1c83a 	sub	r16,r12,r11
    4bbc:	04002d0e 	bge	zero,r16,4c74 <___vfprintf_internal_r+0x864>
    4bc0:	04400404 	movi	r17,16
    4bc4:	d8801f17 	ldw	r2,124(sp)
    4bc8:	8c05150e 	bge	r17,r16,6020 <___vfprintf_internal_r+0x1c10>
    4bcc:	010000b4 	movhi	r4,2
    4bd0:	213c3084 	addi	r4,r4,-3902
    4bd4:	d9003615 	stw	r4,216(sp)
    4bd8:	048001c4 	movi	r18,7
    4bdc:	00000306 	br	4bec <___vfprintf_internal_r+0x7dc>
    4be0:	843ffc04 	addi	r16,r16,-16
    4be4:	42000204 	addi	r8,r8,8
    4be8:	8c00130e 	bge	r17,r16,4c38 <___vfprintf_internal_r+0x828>
    4bec:	014000b4 	movhi	r5,2
    4bf0:	18c00404 	addi	r3,r3,16
    4bf4:	10800044 	addi	r2,r2,1
    4bf8:	297c3084 	addi	r5,r5,-3902
    4bfc:	41400015 	stw	r5,0(r8)
    4c00:	44400115 	stw	r17,4(r8)
    4c04:	d8c02015 	stw	r3,128(sp)
    4c08:	d8801f15 	stw	r2,124(sp)
    4c0c:	90bff40e 	bge	r18,r2,4be0 <__alt_mem_Flash_flash_data+0xf4004be0>
    4c10:	b009883a 	mov	r4,r22
    4c14:	b80b883a 	mov	r5,r23
    4c18:	d9801e04 	addi	r6,sp,120
    4c1c:	000c7140 	call	c714 <__sprint_r>
    4c20:	103eef1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4c24:	843ffc04 	addi	r16,r16,-16
    4c28:	d8c02017 	ldw	r3,128(sp)
    4c2c:	d8801f17 	ldw	r2,124(sp)
    4c30:	da000404 	addi	r8,sp,16
    4c34:	8c3fed16 	blt	r17,r16,4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    4c38:	dac03617 	ldw	r11,216(sp)
    4c3c:	1c07883a 	add	r3,r3,r16
    4c40:	10800044 	addi	r2,r2,1
    4c44:	42c00015 	stw	r11,0(r8)
    4c48:	44000115 	stw	r16,4(r8)
    4c4c:	d8c02015 	stw	r3,128(sp)
    4c50:	d8801f15 	stw	r2,124(sp)
    4c54:	010001c4 	movi	r4,7
    4c58:	2080060e 	bge	r4,r2,4c74 <___vfprintf_internal_r+0x864>
    4c5c:	b009883a 	mov	r4,r22
    4c60:	b80b883a 	mov	r5,r23
    4c64:	d9801e04 	addi	r6,sp,120
    4c68:	000c7140 	call	c714 <__sprint_r>
    4c6c:	103edc1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4c70:	d8c02017 	ldw	r3,128(sp)
    4c74:	d8802b17 	ldw	r2,172(sp)
    4c78:	db002e17 	ldw	r12,184(sp)
    4c7c:	1300010e 	bge	r2,r12,4c84 <___vfprintf_internal_r+0x874>
    4c80:	6005883a 	mov	r2,r12
    4c84:	dac02f17 	ldw	r11,188(sp)
    4c88:	5897883a 	add	r11,r11,r2
    4c8c:	dac02f15 	stw	r11,188(sp)
    4c90:	18020c1e 	bne	r3,zero,54c4 <___vfprintf_internal_r+0x10b4>
    4c94:	d8001f15 	stw	zero,124(sp)
    4c98:	da000404 	addi	r8,sp,16
    4c9c:	003e1706 	br	44fc <__alt_mem_Flash_flash_data+0xf40044fc>
    4ca0:	8c400414 	ori	r17,r17,16
    4ca4:	d8c02a15 	stw	r3,168(sp)
    4ca8:	8880080c 	andi	r2,r17,32
    4cac:	10010126 	beq	r2,zero,50b4 <___vfprintf_internal_r+0xca4>
    4cb0:	db002d17 	ldw	r12,180(sp)
    4cb4:	0005883a 	mov	r2,zero
    4cb8:	64c00017 	ldw	r19,0(r12)
    4cbc:	67000117 	ldw	fp,4(r12)
    4cc0:	63000204 	addi	r12,r12,8
    4cc4:	db002d15 	stw	r12,180(sp)
    4cc8:	9f06b03a 	or	r3,r19,fp
    4ccc:	d8002785 	stb	zero,158(sp)
    4cd0:	da403215 	stw	r9,200(sp)
    4cd4:	002b883a 	mov	r21,zero
    4cd8:	003f0106 	br	48e0 <__alt_mem_Flash_flash_data+0xf40048e0>
    4cdc:	8c400414 	ori	r17,r17,16
    4ce0:	d8c02a15 	stw	r3,168(sp)
    4ce4:	8880080c 	andi	r2,r17,32
    4ce8:	1000e326 	beq	r2,zero,5078 <___vfprintf_internal_r+0xc68>
    4cec:	dac02d17 	ldw	r11,180(sp)
    4cf0:	00800044 	movi	r2,1
    4cf4:	5cc00017 	ldw	r19,0(r11)
    4cf8:	5f000117 	ldw	fp,4(r11)
    4cfc:	5ac00204 	addi	r11,r11,8
    4d00:	dac02d15 	stw	r11,180(sp)
    4d04:	9f06b03a 	or	r3,r19,fp
    4d08:	003ff006 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4d0c:	db002d17 	ldw	r12,180(sp)
    4d10:	dac02d17 	ldw	r11,180(sp)
    4d14:	d8c02a15 	stw	r3,168(sp)
    4d18:	63000017 	ldw	r12,0(r12)
    4d1c:	5ac00117 	ldw	r11,4(r11)
    4d20:	d9802785 	stb	r6,158(sp)
    4d24:	6009883a 	mov	r4,r12
    4d28:	580b883a 	mov	r5,r11
    4d2c:	db003715 	stw	r12,220(sp)
    4d30:	da003f15 	stw	r8,252(sp)
    4d34:	da403e15 	stw	r9,248(sp)
    4d38:	dac03915 	stw	r11,228(sp)
    4d3c:	000b2100 	call	b210 <__fpclassifyd>
    4d40:	db002d17 	ldw	r12,180(sp)
    4d44:	04800044 	movi	r18,1
    4d48:	da003f17 	ldw	r8,252(sp)
    4d4c:	64c00204 	addi	r19,r12,8
    4d50:	da403e17 	ldw	r9,248(sp)
    4d54:	d9003717 	ldw	r4,220(sp)
    4d58:	d9403917 	ldw	r5,228(sp)
    4d5c:	14832b1e 	bne	r2,r18,5a0c <___vfprintf_internal_r+0x15fc>
    4d60:	000d883a 	mov	r6,zero
    4d64:	000f883a 	mov	r7,zero
    4d68:	001031c0 	call	1031c <__ledf2>
    4d6c:	da003f17 	ldw	r8,252(sp)
    4d70:	1004b716 	blt	r2,zero,6050 <___vfprintf_internal_r+0x1c40>
    4d74:	dd402783 	ldbu	r21,158(sp)
    4d78:	008011c4 	movi	r2,71
    4d7c:	14040e0e 	bge	r2,r16,5db8 <___vfprintf_internal_r+0x19a8>
    4d80:	00c000b4 	movhi	r3,2
    4d84:	18fc1504 	addi	r3,r3,-4012
    4d88:	d8c03115 	stw	r3,196(sp)
    4d8c:	02c000c4 	movi	r11,3
    4d90:	00bfdfc4 	movi	r2,-129
    4d94:	dac02b15 	stw	r11,172(sp)
    4d98:	88a2703a 	and	r17,r17,r2
    4d9c:	dcc02d15 	stw	r19,180(sp)
    4da0:	5825883a 	mov	r18,r11
    4da4:	d8003215 	stw	zero,200(sp)
    4da8:	d8003415 	stw	zero,208(sp)
    4dac:	003eeb06 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    4db0:	db002d17 	ldw	r12,180(sp)
    4db4:	00800c04 	movi	r2,48
    4db8:	d8802705 	stb	r2,156(sp)
    4dbc:	64c00017 	ldw	r19,0(r12)
    4dc0:	00801e04 	movi	r2,120
    4dc4:	d8802745 	stb	r2,157(sp)
    4dc8:	008000b4 	movhi	r2,2
    4dcc:	10bc1d04 	addi	r2,r2,-3980
    4dd0:	63000104 	addi	r12,r12,4
    4dd4:	d8c02a15 	stw	r3,168(sp)
    4dd8:	d8803b15 	stw	r2,236(sp)
    4ddc:	0039883a 	mov	fp,zero
    4de0:	8c400094 	ori	r17,r17,2
    4de4:	db002d15 	stw	r12,180(sp)
    4de8:	00800084 	movi	r2,2
    4dec:	04001e04 	movi	r16,120
    4df0:	9807883a 	mov	r3,r19
    4df4:	003fb506 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4df8:	8c400214 	ori	r17,r17,8
    4dfc:	1805883a 	mov	r2,r3
    4e00:	1c000007 	ldb	r16,0(r3)
    4e04:	003de706 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4e08:	d8c02a15 	stw	r3,168(sp)
    4e0c:	d9802785 	stb	r6,158(sp)
    4e10:	8880080c 	andi	r2,r17,32
    4e14:	d8c02d17 	ldw	r3,180(sp)
    4e18:	103ea61e 	bne	r2,zero,48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    4e1c:	8880040c 	andi	r2,r17,16
    4e20:	1002221e 	bne	r2,zero,56ac <___vfprintf_internal_r+0x129c>
    4e24:	8880100c 	andi	r2,r17,64
    4e28:	10022026 	beq	r2,zero,56ac <___vfprintf_internal_r+0x129c>
    4e2c:	1cc0000f 	ldh	r19,0(r3)
    4e30:	db002d17 	ldw	r12,180(sp)
    4e34:	9839d7fa 	srai	fp,r19,31
    4e38:	63000104 	addi	r12,r12,4
    4e3c:	db002d15 	stw	r12,180(sp)
    4e40:	e005883a 	mov	r2,fp
    4e44:	003ea106 	br	48cc <__alt_mem_Flash_flash_data+0xf40048cc>
    4e48:	8c401014 	ori	r17,r17,64
    4e4c:	1805883a 	mov	r2,r3
    4e50:	1c000007 	ldb	r16,0(r3)
    4e54:	003dd306 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4e58:	1c000007 	ldb	r16,0(r3)
    4e5c:	81c3e926 	beq	r16,r7,5e04 <___vfprintf_internal_r+0x19f4>
    4e60:	8c400414 	ori	r17,r17,16
    4e64:	1805883a 	mov	r2,r3
    4e68:	003dce06 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4e6c:	d8c02a15 	stw	r3,168(sp)
    4e70:	d9802785 	stb	r6,158(sp)
    4e74:	8880080c 	andi	r2,r17,32
    4e78:	10034726 	beq	r2,zero,5b98 <___vfprintf_internal_r+0x1788>
    4e7c:	db002d17 	ldw	r12,180(sp)
    4e80:	dac02f17 	ldw	r11,188(sp)
    4e84:	60800017 	ldw	r2,0(r12)
    4e88:	5807d7fa 	srai	r3,r11,31
    4e8c:	63000104 	addi	r12,r12,4
    4e90:	db002d15 	stw	r12,180(sp)
    4e94:	12c00015 	stw	r11,0(r2)
    4e98:	10c00115 	stw	r3,4(r2)
    4e9c:	003d9706 	br	44fc <__alt_mem_Flash_flash_data+0xf40044fc>
    4ea0:	030000b4 	movhi	r12,2
    4ea4:	633c1804 	addi	r12,r12,-4000
    4ea8:	d8c02a15 	stw	r3,168(sp)
    4eac:	d9802785 	stb	r6,158(sp)
    4eb0:	db003b15 	stw	r12,236(sp)
    4eb4:	88c0080c 	andi	r3,r17,32
    4eb8:	d8802d17 	ldw	r2,180(sp)
    4ebc:	18005b26 	beq	r3,zero,502c <___vfprintf_internal_r+0xc1c>
    4ec0:	dac02d17 	ldw	r11,180(sp)
    4ec4:	14c00017 	ldw	r19,0(r2)
    4ec8:	17000117 	ldw	fp,4(r2)
    4ecc:	5ac00204 	addi	r11,r11,8
    4ed0:	dac02d15 	stw	r11,180(sp)
    4ed4:	8880004c 	andi	r2,r17,1
    4ed8:	10022926 	beq	r2,zero,5780 <___vfprintf_internal_r+0x1370>
    4edc:	9f06b03a 	or	r3,r19,fp
    4ee0:	18032b26 	beq	r3,zero,5b90 <___vfprintf_internal_r+0x1780>
    4ee4:	00800c04 	movi	r2,48
    4ee8:	d8802705 	stb	r2,156(sp)
    4eec:	dc002745 	stb	r16,157(sp)
    4ef0:	8c400094 	ori	r17,r17,2
    4ef4:	00800084 	movi	r2,2
    4ef8:	003f7406 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4efc:	30803fcc 	andi	r2,r6,255
    4f00:	1080201c 	xori	r2,r2,128
    4f04:	10bfe004 	addi	r2,r2,-128
    4f08:	1003351e 	bne	r2,zero,5be0 <___vfprintf_internal_r+0x17d0>
    4f0c:	1805883a 	mov	r2,r3
    4f10:	01800804 	movi	r6,32
    4f14:	1c000007 	ldb	r16,0(r3)
    4f18:	003da206 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4f1c:	dac02d17 	ldw	r11,180(sp)
    4f20:	db002d17 	ldw	r12,180(sp)
    4f24:	5ac00017 	ldw	r11,0(r11)
    4f28:	dac02e15 	stw	r11,184(sp)
    4f2c:	62c00104 	addi	r11,r12,4
    4f30:	db002e17 	ldw	r12,184(sp)
    4f34:	6003ad16 	blt	r12,zero,5dec <___vfprintf_internal_r+0x19dc>
    4f38:	dac02d15 	stw	r11,180(sp)
    4f3c:	1805883a 	mov	r2,r3
    4f40:	1c000007 	ldb	r16,0(r3)
    4f44:	003d9706 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4f48:	1805883a 	mov	r2,r3
    4f4c:	01800ac4 	movi	r6,43
    4f50:	1c000007 	ldb	r16,0(r3)
    4f54:	003d9306 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    4f58:	db002d17 	ldw	r12,180(sp)
    4f5c:	d8c02a15 	stw	r3,168(sp)
    4f60:	00c00044 	movi	r3,1
    4f64:	60800017 	ldw	r2,0(r12)
    4f68:	63000104 	addi	r12,r12,4
    4f6c:	d8c02b15 	stw	r3,172(sp)
    4f70:	d8002785 	stb	zero,158(sp)
    4f74:	d8801405 	stb	r2,80(sp)
    4f78:	db002d15 	stw	r12,180(sp)
    4f7c:	dac01404 	addi	r11,sp,80
    4f80:	1825883a 	mov	r18,r3
    4f84:	d8003215 	stw	zero,200(sp)
    4f88:	d8003415 	stw	zero,208(sp)
    4f8c:	dac03115 	stw	r11,196(sp)
    4f90:	0005883a 	mov	r2,zero
    4f94:	003e7806 	br	4978 <__alt_mem_Flash_flash_data+0xf4004978>
    4f98:	dac02d17 	ldw	r11,180(sp)
    4f9c:	db002d17 	ldw	r12,180(sp)
    4fa0:	d8c02a15 	stw	r3,168(sp)
    4fa4:	5ac00017 	ldw	r11,0(r11)
    4fa8:	d8002785 	stb	zero,158(sp)
    4fac:	64c00104 	addi	r19,r12,4
    4fb0:	dac03115 	stw	r11,196(sp)
    4fb4:	5803fe26 	beq	r11,zero,5fb0 <___vfprintf_internal_r+0x1ba0>
    4fb8:	d9003117 	ldw	r4,196(sp)
    4fbc:	4803b416 	blt	r9,zero,5e90 <___vfprintf_internal_r+0x1a80>
    4fc0:	480d883a 	mov	r6,r9
    4fc4:	000b883a 	mov	r5,zero
    4fc8:	da003f15 	stw	r8,252(sp)
    4fcc:	da403e15 	stw	r9,248(sp)
    4fd0:	000998c0 	call	998c <memchr>
    4fd4:	da003f17 	ldw	r8,252(sp)
    4fd8:	da403e17 	ldw	r9,248(sp)
    4fdc:	10043026 	beq	r2,zero,60a0 <___vfprintf_internal_r+0x1c90>
    4fe0:	d8c03117 	ldw	r3,196(sp)
    4fe4:	10e5c83a 	sub	r18,r2,r3
    4fe8:	4c836b16 	blt	r9,r18,5d98 <___vfprintf_internal_r+0x1988>
    4fec:	9005883a 	mov	r2,r18
    4ff0:	9003ac16 	blt	r18,zero,5ea4 <___vfprintf_internal_r+0x1a94>
    4ff4:	dd402783 	ldbu	r21,158(sp)
    4ff8:	d8802b15 	stw	r2,172(sp)
    4ffc:	dcc02d15 	stw	r19,180(sp)
    5000:	d8003215 	stw	zero,200(sp)
    5004:	d8003415 	stw	zero,208(sp)
    5008:	003e5406 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    500c:	008000b4 	movhi	r2,2
    5010:	10bc1d04 	addi	r2,r2,-3980
    5014:	d8c02a15 	stw	r3,168(sp)
    5018:	d8803b15 	stw	r2,236(sp)
    501c:	d9802785 	stb	r6,158(sp)
    5020:	88c0080c 	andi	r3,r17,32
    5024:	d8802d17 	ldw	r2,180(sp)
    5028:	183fa51e 	bne	r3,zero,4ec0 <__alt_mem_Flash_flash_data+0xf4004ec0>
    502c:	88c0040c 	andi	r3,r17,16
    5030:	1802ee26 	beq	r3,zero,5bec <___vfprintf_internal_r+0x17dc>
    5034:	db002d17 	ldw	r12,180(sp)
    5038:	14c00017 	ldw	r19,0(r2)
    503c:	0039883a 	mov	fp,zero
    5040:	63000104 	addi	r12,r12,4
    5044:	db002d15 	stw	r12,180(sp)
    5048:	003fa206 	br	4ed4 <__alt_mem_Flash_flash_data+0xf4004ed4>
    504c:	8c400054 	ori	r17,r17,1
    5050:	1805883a 	mov	r2,r3
    5054:	1c000007 	ldb	r16,0(r3)
    5058:	003d5206 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    505c:	8c400814 	ori	r17,r17,32
    5060:	1805883a 	mov	r2,r3
    5064:	1c000007 	ldb	r16,0(r3)
    5068:	003d4e06 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    506c:	d8c02a15 	stw	r3,168(sp)
    5070:	8880080c 	andi	r2,r17,32
    5074:	103f1d1e 	bne	r2,zero,4cec <__alt_mem_Flash_flash_data+0xf4004cec>
    5078:	8880040c 	andi	r2,r17,16
    507c:	1001b81e 	bne	r2,zero,5760 <___vfprintf_internal_r+0x1350>
    5080:	8880100c 	andi	r2,r17,64
    5084:	1001b626 	beq	r2,zero,5760 <___vfprintf_internal_r+0x1350>
    5088:	dac02d17 	ldw	r11,180(sp)
    508c:	0039883a 	mov	fp,zero
    5090:	00800044 	movi	r2,1
    5094:	5cc0000b 	ldhu	r19,0(r11)
    5098:	5ac00104 	addi	r11,r11,4
    509c:	dac02d15 	stw	r11,180(sp)
    50a0:	9807883a 	mov	r3,r19
    50a4:	003f0906 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    50a8:	d8c02a15 	stw	r3,168(sp)
    50ac:	8880080c 	andi	r2,r17,32
    50b0:	103eff1e 	bne	r2,zero,4cb0 <__alt_mem_Flash_flash_data+0xf4004cb0>
    50b4:	8880040c 	andi	r2,r17,16
    50b8:	1001a11e 	bne	r2,zero,5740 <___vfprintf_internal_r+0x1330>
    50bc:	8880100c 	andi	r2,r17,64
    50c0:	10019f26 	beq	r2,zero,5740 <___vfprintf_internal_r+0x1330>
    50c4:	db002d17 	ldw	r12,180(sp)
    50c8:	0039883a 	mov	fp,zero
    50cc:	0005883a 	mov	r2,zero
    50d0:	64c0000b 	ldhu	r19,0(r12)
    50d4:	63000104 	addi	r12,r12,4
    50d8:	db002d15 	stw	r12,180(sp)
    50dc:	9807883a 	mov	r3,r19
    50e0:	003efa06 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    50e4:	d8c02a15 	stw	r3,168(sp)
    50e8:	d9802785 	stb	r6,158(sp)
    50ec:	803db626 	beq	r16,zero,47c8 <__alt_mem_Flash_flash_data+0xf40047c8>
    50f0:	00c00044 	movi	r3,1
    50f4:	d8c02b15 	stw	r3,172(sp)
    50f8:	dc001405 	stb	r16,80(sp)
    50fc:	d8002785 	stb	zero,158(sp)
    5100:	003f9e06 	br	4f7c <__alt_mem_Flash_flash_data+0xf4004f7c>
    5104:	d8c02017 	ldw	r3,128(sp)
    5108:	003e5306 	br	4a58 <__alt_mem_Flash_flash_data+0xf4004a58>
    510c:	10803fcc 	andi	r2,r2,255
    5110:	00c00044 	movi	r3,1
    5114:	10fdfa1e 	bne	r2,r3,4900 <__alt_mem_Flash_flash_data+0xf4004900>
    5118:	e000021e 	bne	fp,zero,5124 <___vfprintf_internal_r+0xd14>
    511c:	00800244 	movi	r2,9
    5120:	14c0202e 	bgeu	r2,r19,51a4 <___vfprintf_internal_r+0xd94>
    5124:	dc002b15 	stw	r16,172(sp)
    5128:	dc402c15 	stw	r17,176(sp)
    512c:	9821883a 	mov	r16,r19
    5130:	e023883a 	mov	r17,fp
    5134:	dc801e04 	addi	r18,sp,120
    5138:	4827883a 	mov	r19,r9
    513c:	4039883a 	mov	fp,r8
    5140:	8009883a 	mov	r4,r16
    5144:	880b883a 	mov	r5,r17
    5148:	01800284 	movi	r6,10
    514c:	000f883a 	mov	r7,zero
    5150:	000e9940 	call	e994 <__umoddi3>
    5154:	10800c04 	addi	r2,r2,48
    5158:	94bfffc4 	addi	r18,r18,-1
    515c:	8009883a 	mov	r4,r16
    5160:	880b883a 	mov	r5,r17
    5164:	01800284 	movi	r6,10
    5168:	000f883a 	mov	r7,zero
    516c:	90800005 	stb	r2,0(r18)
    5170:	000e3d40 	call	e3d4 <__udivdi3>
    5174:	1021883a 	mov	r16,r2
    5178:	10c4b03a 	or	r2,r2,r3
    517c:	1823883a 	mov	r17,r3
    5180:	103fef1e 	bne	r2,zero,5140 <__alt_mem_Flash_flash_data+0xf4005140>
    5184:	dac02817 	ldw	r11,160(sp)
    5188:	dc803115 	stw	r18,196(sp)
    518c:	dc002b17 	ldw	r16,172(sp)
    5190:	dc402c17 	ldw	r17,176(sp)
    5194:	9813883a 	mov	r9,r19
    5198:	e011883a 	mov	r8,fp
    519c:	5ca5c83a 	sub	r18,r11,r18
    51a0:	003de906 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    51a4:	9cc00c04 	addi	r19,r19,48
    51a8:	d8c01dc4 	addi	r3,sp,119
    51ac:	dcc01dc5 	stb	r19,119(sp)
    51b0:	dc803c17 	ldw	r18,240(sp)
    51b4:	d8c03115 	stw	r3,196(sp)
    51b8:	003de306 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    51bc:	00801944 	movi	r2,101
    51c0:	1400710e 	bge	r2,r16,5388 <___vfprintf_internal_r+0xf78>
    51c4:	d9003717 	ldw	r4,220(sp)
    51c8:	d9403917 	ldw	r5,228(sp)
    51cc:	000d883a 	mov	r6,zero
    51d0:	000f883a 	mov	r7,zero
    51d4:	d8c03d15 	stw	r3,244(sp)
    51d8:	da003f15 	stw	r8,252(sp)
    51dc:	00101b80 	call	101b8 <__eqdf2>
    51e0:	d8c03d17 	ldw	r3,244(sp)
    51e4:	da003f17 	ldw	r8,252(sp)
    51e8:	1000ef1e 	bne	r2,zero,55a8 <___vfprintf_internal_r+0x1198>
    51ec:	d8801f17 	ldw	r2,124(sp)
    51f0:	010000b4 	movhi	r4,2
    51f4:	213c2404 	addi	r4,r4,-3952
    51f8:	18c00044 	addi	r3,r3,1
    51fc:	10800044 	addi	r2,r2,1
    5200:	41000015 	stw	r4,0(r8)
    5204:	01000044 	movi	r4,1
    5208:	41000115 	stw	r4,4(r8)
    520c:	d8c02015 	stw	r3,128(sp)
    5210:	d8801f15 	stw	r2,124(sp)
    5214:	010001c4 	movi	r4,7
    5218:	20828e16 	blt	r4,r2,5c54 <___vfprintf_internal_r+0x1844>
    521c:	42000204 	addi	r8,r8,8
    5220:	d8802617 	ldw	r2,152(sp)
    5224:	dac03317 	ldw	r11,204(sp)
    5228:	12c00216 	blt	r2,r11,5234 <___vfprintf_internal_r+0xe24>
    522c:	8880004c 	andi	r2,r17,1
    5230:	103e5d26 	beq	r2,zero,4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    5234:	db003817 	ldw	r12,224(sp)
    5238:	d8801f17 	ldw	r2,124(sp)
    523c:	dac03517 	ldw	r11,212(sp)
    5240:	1b07883a 	add	r3,r3,r12
    5244:	10800044 	addi	r2,r2,1
    5248:	42c00015 	stw	r11,0(r8)
    524c:	43000115 	stw	r12,4(r8)
    5250:	d8c02015 	stw	r3,128(sp)
    5254:	d8801f15 	stw	r2,124(sp)
    5258:	010001c4 	movi	r4,7
    525c:	2082ed16 	blt	r4,r2,5e14 <___vfprintf_internal_r+0x1a04>
    5260:	42000204 	addi	r8,r8,8
    5264:	db003317 	ldw	r12,204(sp)
    5268:	643fffc4 	addi	r16,r12,-1
    526c:	043e4e0e 	bge	zero,r16,4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    5270:	04800404 	movi	r18,16
    5274:	d8801f17 	ldw	r2,124(sp)
    5278:	94007e0e 	bge	r18,r16,5474 <___vfprintf_internal_r+0x1064>
    527c:	014000b4 	movhi	r5,2
    5280:	297c2c84 	addi	r5,r5,-3918
    5284:	d9402c15 	stw	r5,176(sp)
    5288:	054001c4 	movi	r21,7
    528c:	00000306 	br	529c <___vfprintf_internal_r+0xe8c>
    5290:	42000204 	addi	r8,r8,8
    5294:	843ffc04 	addi	r16,r16,-16
    5298:	9400790e 	bge	r18,r16,5480 <___vfprintf_internal_r+0x1070>
    529c:	18c00404 	addi	r3,r3,16
    52a0:	10800044 	addi	r2,r2,1
    52a4:	45000015 	stw	r20,0(r8)
    52a8:	44800115 	stw	r18,4(r8)
    52ac:	d8c02015 	stw	r3,128(sp)
    52b0:	d8801f15 	stw	r2,124(sp)
    52b4:	a8bff60e 	bge	r21,r2,5290 <__alt_mem_Flash_flash_data+0xf4005290>
    52b8:	b009883a 	mov	r4,r22
    52bc:	b80b883a 	mov	r5,r23
    52c0:	d9801e04 	addi	r6,sp,120
    52c4:	000c7140 	call	c714 <__sprint_r>
    52c8:	103d451e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    52cc:	d8c02017 	ldw	r3,128(sp)
    52d0:	d8801f17 	ldw	r2,124(sp)
    52d4:	da000404 	addi	r8,sp,16
    52d8:	003fee06 	br	5294 <__alt_mem_Flash_flash_data+0xf4005294>
    52dc:	dac02e17 	ldw	r11,184(sp)
    52e0:	db002b17 	ldw	r12,172(sp)
    52e4:	5b2bc83a 	sub	r21,r11,r12
    52e8:	057df90e 	bge	zero,r21,4ad0 <__alt_mem_Flash_flash_data+0xf4004ad0>
    52ec:	07000404 	movi	fp,16
    52f0:	d8801f17 	ldw	r2,124(sp)
    52f4:	e543640e 	bge	fp,r21,6088 <___vfprintf_internal_r+0x1c78>
    52f8:	014000b4 	movhi	r5,2
    52fc:	297c2c84 	addi	r5,r5,-3918
    5300:	d9402c15 	stw	r5,176(sp)
    5304:	04c001c4 	movi	r19,7
    5308:	00000306 	br	5318 <___vfprintf_internal_r+0xf08>
    530c:	ad7ffc04 	addi	r21,r21,-16
    5310:	42000204 	addi	r8,r8,8
    5314:	e540110e 	bge	fp,r21,535c <___vfprintf_internal_r+0xf4c>
    5318:	18c00404 	addi	r3,r3,16
    531c:	10800044 	addi	r2,r2,1
    5320:	45000015 	stw	r20,0(r8)
    5324:	47000115 	stw	fp,4(r8)
    5328:	d8c02015 	stw	r3,128(sp)
    532c:	d8801f15 	stw	r2,124(sp)
    5330:	98bff60e 	bge	r19,r2,530c <__alt_mem_Flash_flash_data+0xf400530c>
    5334:	b009883a 	mov	r4,r22
    5338:	b80b883a 	mov	r5,r23
    533c:	d9801e04 	addi	r6,sp,120
    5340:	000c7140 	call	c714 <__sprint_r>
    5344:	103d261e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5348:	ad7ffc04 	addi	r21,r21,-16
    534c:	d8c02017 	ldw	r3,128(sp)
    5350:	d8801f17 	ldw	r2,124(sp)
    5354:	da000404 	addi	r8,sp,16
    5358:	e57fef16 	blt	fp,r21,5318 <__alt_mem_Flash_flash_data+0xf4005318>
    535c:	dac02c17 	ldw	r11,176(sp)
    5360:	1d47883a 	add	r3,r3,r21
    5364:	10800044 	addi	r2,r2,1
    5368:	42c00015 	stw	r11,0(r8)
    536c:	45400115 	stw	r21,4(r8)
    5370:	d8c02015 	stw	r3,128(sp)
    5374:	d8801f15 	stw	r2,124(sp)
    5378:	010001c4 	movi	r4,7
    537c:	20819116 	blt	r4,r2,59c4 <___vfprintf_internal_r+0x15b4>
    5380:	42000204 	addi	r8,r8,8
    5384:	003dd206 	br	4ad0 <__alt_mem_Flash_flash_data+0xf4004ad0>
    5388:	db003317 	ldw	r12,204(sp)
    538c:	00800044 	movi	r2,1
    5390:	18c00044 	addi	r3,r3,1
    5394:	1301530e 	bge	r2,r12,58e4 <___vfprintf_internal_r+0x14d4>
    5398:	dc001f17 	ldw	r16,124(sp)
    539c:	dac03117 	ldw	r11,196(sp)
    53a0:	00800044 	movi	r2,1
    53a4:	84000044 	addi	r16,r16,1
    53a8:	40800115 	stw	r2,4(r8)
    53ac:	42c00015 	stw	r11,0(r8)
    53b0:	d8c02015 	stw	r3,128(sp)
    53b4:	dc001f15 	stw	r16,124(sp)
    53b8:	008001c4 	movi	r2,7
    53bc:	14016b16 	blt	r2,r16,596c <___vfprintf_internal_r+0x155c>
    53c0:	42000204 	addi	r8,r8,8
    53c4:	db003817 	ldw	r12,224(sp)
    53c8:	dac03517 	ldw	r11,212(sp)
    53cc:	84000044 	addi	r16,r16,1
    53d0:	1b07883a 	add	r3,r3,r12
    53d4:	42c00015 	stw	r11,0(r8)
    53d8:	43000115 	stw	r12,4(r8)
    53dc:	d8c02015 	stw	r3,128(sp)
    53e0:	dc001f15 	stw	r16,124(sp)
    53e4:	008001c4 	movi	r2,7
    53e8:	14016916 	blt	r2,r16,5990 <___vfprintf_internal_r+0x1580>
    53ec:	44800204 	addi	r18,r8,8
    53f0:	d9003717 	ldw	r4,220(sp)
    53f4:	d9403917 	ldw	r5,228(sp)
    53f8:	000d883a 	mov	r6,zero
    53fc:	000f883a 	mov	r7,zero
    5400:	d8c03d15 	stw	r3,244(sp)
    5404:	00101b80 	call	101b8 <__eqdf2>
    5408:	d8c03d17 	ldw	r3,244(sp)
    540c:	db003317 	ldw	r12,204(sp)
    5410:	1000ad26 	beq	r2,zero,56c8 <___vfprintf_internal_r+0x12b8>
    5414:	dac03117 	ldw	r11,196(sp)
    5418:	60bfffc4 	addi	r2,r12,-1
    541c:	1887883a 	add	r3,r3,r2
    5420:	59000044 	addi	r4,r11,1
    5424:	84000044 	addi	r16,r16,1
    5428:	90800115 	stw	r2,4(r18)
    542c:	91000015 	stw	r4,0(r18)
    5430:	d8c02015 	stw	r3,128(sp)
    5434:	dc001f15 	stw	r16,124(sp)
    5438:	008001c4 	movi	r2,7
    543c:	14014216 	blt	r2,r16,5948 <___vfprintf_internal_r+0x1538>
    5440:	94800204 	addi	r18,r18,8
    5444:	dac03a17 	ldw	r11,232(sp)
    5448:	dd4022c4 	addi	r21,sp,139
    544c:	84000044 	addi	r16,r16,1
    5450:	1ac7883a 	add	r3,r3,r11
    5454:	95400015 	stw	r21,0(r18)
    5458:	92c00115 	stw	r11,4(r18)
    545c:	d8c02015 	stw	r3,128(sp)
    5460:	dc001f15 	stw	r16,124(sp)
    5464:	008001c4 	movi	r2,7
    5468:	14000e16 	blt	r2,r16,54a4 <___vfprintf_internal_r+0x1094>
    546c:	92000204 	addi	r8,r18,8
    5470:	003dcd06 	br	4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    5474:	010000b4 	movhi	r4,2
    5478:	213c2c84 	addi	r4,r4,-3918
    547c:	d9002c15 	stw	r4,176(sp)
    5480:	dac02c17 	ldw	r11,176(sp)
    5484:	1c07883a 	add	r3,r3,r16
    5488:	44000115 	stw	r16,4(r8)
    548c:	42c00015 	stw	r11,0(r8)
    5490:	10800044 	addi	r2,r2,1
    5494:	d8c02015 	stw	r3,128(sp)
    5498:	d8801f15 	stw	r2,124(sp)
    549c:	010001c4 	movi	r4,7
    54a0:	20bdc00e 	bge	r4,r2,4ba4 <__alt_mem_Flash_flash_data+0xf4004ba4>
    54a4:	b009883a 	mov	r4,r22
    54a8:	b80b883a 	mov	r5,r23
    54ac:	d9801e04 	addi	r6,sp,120
    54b0:	000c7140 	call	c714 <__sprint_r>
    54b4:	103cca1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    54b8:	d8c02017 	ldw	r3,128(sp)
    54bc:	da000404 	addi	r8,sp,16
    54c0:	003db906 	br	4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    54c4:	b009883a 	mov	r4,r22
    54c8:	b80b883a 	mov	r5,r23
    54cc:	d9801e04 	addi	r6,sp,120
    54d0:	000c7140 	call	c714 <__sprint_r>
    54d4:	103def26 	beq	r2,zero,4c94 <__alt_mem_Flash_flash_data+0xf4004c94>
    54d8:	003cc106 	br	47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    54dc:	10803fcc 	andi	r2,r2,255
    54e0:	1000651e 	bne	r2,zero,5678 <___vfprintf_internal_r+0x1268>
    54e4:	8880004c 	andi	r2,r17,1
    54e8:	10013226 	beq	r2,zero,59b4 <___vfprintf_internal_r+0x15a4>
    54ec:	00800c04 	movi	r2,48
    54f0:	d8c01dc4 	addi	r3,sp,119
    54f4:	d8801dc5 	stb	r2,119(sp)
    54f8:	dc803c17 	ldw	r18,240(sp)
    54fc:	d8c03115 	stw	r3,196(sp)
    5500:	003d1106 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    5504:	b009883a 	mov	r4,r22
    5508:	b80b883a 	mov	r5,r23
    550c:	d9801e04 	addi	r6,sp,120
    5510:	000c7140 	call	c714 <__sprint_r>
    5514:	103cb21e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5518:	d8c02017 	ldw	r3,128(sp)
    551c:	da000404 	addi	r8,sp,16
    5520:	003d9406 	br	4b74 <__alt_mem_Flash_flash_data+0xf4004b74>
    5524:	b009883a 	mov	r4,r22
    5528:	b80b883a 	mov	r5,r23
    552c:	d9801e04 	addi	r6,sp,120
    5530:	000c7140 	call	c714 <__sprint_r>
    5534:	103caa1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5538:	d8c02017 	ldw	r3,128(sp)
    553c:	da000404 	addi	r8,sp,16
    5540:	003d5206 	br	4a8c <__alt_mem_Flash_flash_data+0xf4004a8c>
    5544:	b009883a 	mov	r4,r22
    5548:	b80b883a 	mov	r5,r23
    554c:	d9801e04 	addi	r6,sp,120
    5550:	000c7140 	call	c714 <__sprint_r>
    5554:	103ca21e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5558:	d8c02017 	ldw	r3,128(sp)
    555c:	da000404 	addi	r8,sp,16
    5560:	003d5806 	br	4ac4 <__alt_mem_Flash_flash_data+0xf4004ac4>
    5564:	d9403b17 	ldw	r5,236(sp)
    5568:	d8c01e04 	addi	r3,sp,120
    556c:	988003cc 	andi	r2,r19,15
    5570:	e008973a 	slli	r4,fp,28
    5574:	2885883a 	add	r2,r5,r2
    5578:	9826d13a 	srli	r19,r19,4
    557c:	10800003 	ldbu	r2,0(r2)
    5580:	e038d13a 	srli	fp,fp,4
    5584:	18ffffc4 	addi	r3,r3,-1
    5588:	24e6b03a 	or	r19,r4,r19
    558c:	18800005 	stb	r2,0(r3)
    5590:	9f04b03a 	or	r2,r19,fp
    5594:	103ff51e 	bne	r2,zero,556c <__alt_mem_Flash_flash_data+0xf400556c>
    5598:	db002817 	ldw	r12,160(sp)
    559c:	d8c03115 	stw	r3,196(sp)
    55a0:	60e5c83a 	sub	r18,r12,r3
    55a4:	003ce806 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    55a8:	dc002617 	ldw	r16,152(sp)
    55ac:	0401b10e 	bge	zero,r16,5c74 <___vfprintf_internal_r+0x1864>
    55b0:	db003117 	ldw	r12,196(sp)
    55b4:	dac03317 	ldw	r11,204(sp)
    55b8:	62e1883a 	add	r16,r12,r11
    55bc:	db003417 	ldw	r12,208(sp)
    55c0:	5825883a 	mov	r18,r11
    55c4:	62c0010e 	bge	r12,r11,55cc <___vfprintf_internal_r+0x11bc>
    55c8:	6025883a 	mov	r18,r12
    55cc:	04800b0e 	bge	zero,r18,55fc <___vfprintf_internal_r+0x11ec>
    55d0:	d8801f17 	ldw	r2,124(sp)
    55d4:	dac03117 	ldw	r11,196(sp)
    55d8:	1c87883a 	add	r3,r3,r18
    55dc:	10800044 	addi	r2,r2,1
    55e0:	42c00015 	stw	r11,0(r8)
    55e4:	44800115 	stw	r18,4(r8)
    55e8:	d8c02015 	stw	r3,128(sp)
    55ec:	d8801f15 	stw	r2,124(sp)
    55f0:	010001c4 	movi	r4,7
    55f4:	20824f16 	blt	r4,r2,5f34 <___vfprintf_internal_r+0x1b24>
    55f8:	42000204 	addi	r8,r8,8
    55fc:	90024b16 	blt	r18,zero,5f2c <___vfprintf_internal_r+0x1b1c>
    5600:	db003417 	ldw	r12,208(sp)
    5604:	64a5c83a 	sub	r18,r12,r18
    5608:	0480730e 	bge	zero,r18,57d8 <___vfprintf_internal_r+0x13c8>
    560c:	05400404 	movi	r21,16
    5610:	d8801f17 	ldw	r2,124(sp)
    5614:	ac817d0e 	bge	r21,r18,5c0c <___vfprintf_internal_r+0x17fc>
    5618:	014000b4 	movhi	r5,2
    561c:	297c2c84 	addi	r5,r5,-3918
    5620:	d9402c15 	stw	r5,176(sp)
    5624:	070001c4 	movi	fp,7
    5628:	00000306 	br	5638 <___vfprintf_internal_r+0x1228>
    562c:	42000204 	addi	r8,r8,8
    5630:	94bffc04 	addi	r18,r18,-16
    5634:	ac81780e 	bge	r21,r18,5c18 <___vfprintf_internal_r+0x1808>
    5638:	18c00404 	addi	r3,r3,16
    563c:	10800044 	addi	r2,r2,1
    5640:	45000015 	stw	r20,0(r8)
    5644:	45400115 	stw	r21,4(r8)
    5648:	d8c02015 	stw	r3,128(sp)
    564c:	d8801f15 	stw	r2,124(sp)
    5650:	e0bff60e 	bge	fp,r2,562c <__alt_mem_Flash_flash_data+0xf400562c>
    5654:	b009883a 	mov	r4,r22
    5658:	b80b883a 	mov	r5,r23
    565c:	d9801e04 	addi	r6,sp,120
    5660:	000c7140 	call	c714 <__sprint_r>
    5664:	103c5e1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5668:	d8c02017 	ldw	r3,128(sp)
    566c:	d8801f17 	ldw	r2,124(sp)
    5670:	da000404 	addi	r8,sp,16
    5674:	003fee06 	br	5630 <__alt_mem_Flash_flash_data+0xf4005630>
    5678:	dac01e04 	addi	r11,sp,120
    567c:	0025883a 	mov	r18,zero
    5680:	dac03115 	stw	r11,196(sp)
    5684:	003cb006 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    5688:	b009883a 	mov	r4,r22
    568c:	b80b883a 	mov	r5,r23
    5690:	d9801e04 	addi	r6,sp,120
    5694:	000c7140 	call	c714 <__sprint_r>
    5698:	103c511e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    569c:	d8c02017 	ldw	r3,128(sp)
    56a0:	d8802787 	ldb	r2,158(sp)
    56a4:	da000404 	addi	r8,sp,16
    56a8:	003ceb06 	br	4a58 <__alt_mem_Flash_flash_data+0xf4004a58>
    56ac:	1cc00017 	ldw	r19,0(r3)
    56b0:	dac02d17 	ldw	r11,180(sp)
    56b4:	9839d7fa 	srai	fp,r19,31
    56b8:	5ac00104 	addi	r11,r11,4
    56bc:	dac02d15 	stw	r11,180(sp)
    56c0:	e005883a 	mov	r2,fp
    56c4:	003c8106 	br	48cc <__alt_mem_Flash_flash_data+0xf40048cc>
    56c8:	657fffc4 	addi	r21,r12,-1
    56cc:	057f5d0e 	bge	zero,r21,5444 <__alt_mem_Flash_flash_data+0xf4005444>
    56d0:	07000404 	movi	fp,16
    56d4:	e540900e 	bge	fp,r21,5918 <___vfprintf_internal_r+0x1508>
    56d8:	010000b4 	movhi	r4,2
    56dc:	213c2c84 	addi	r4,r4,-3918
    56e0:	d9002c15 	stw	r4,176(sp)
    56e4:	01c001c4 	movi	r7,7
    56e8:	00000306 	br	56f8 <___vfprintf_internal_r+0x12e8>
    56ec:	94800204 	addi	r18,r18,8
    56f0:	ad7ffc04 	addi	r21,r21,-16
    56f4:	e5408b0e 	bge	fp,r21,5924 <___vfprintf_internal_r+0x1514>
    56f8:	18c00404 	addi	r3,r3,16
    56fc:	84000044 	addi	r16,r16,1
    5700:	95000015 	stw	r20,0(r18)
    5704:	97000115 	stw	fp,4(r18)
    5708:	d8c02015 	stw	r3,128(sp)
    570c:	dc001f15 	stw	r16,124(sp)
    5710:	3c3ff60e 	bge	r7,r16,56ec <__alt_mem_Flash_flash_data+0xf40056ec>
    5714:	b009883a 	mov	r4,r22
    5718:	b80b883a 	mov	r5,r23
    571c:	d9801e04 	addi	r6,sp,120
    5720:	d9c03d15 	stw	r7,244(sp)
    5724:	000c7140 	call	c714 <__sprint_r>
    5728:	d9c03d17 	ldw	r7,244(sp)
    572c:	103c2c1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5730:	d8c02017 	ldw	r3,128(sp)
    5734:	dc001f17 	ldw	r16,124(sp)
    5738:	dc800404 	addi	r18,sp,16
    573c:	003fec06 	br	56f0 <__alt_mem_Flash_flash_data+0xf40056f0>
    5740:	dac02d17 	ldw	r11,180(sp)
    5744:	0039883a 	mov	fp,zero
    5748:	0005883a 	mov	r2,zero
    574c:	5cc00017 	ldw	r19,0(r11)
    5750:	5ac00104 	addi	r11,r11,4
    5754:	dac02d15 	stw	r11,180(sp)
    5758:	9807883a 	mov	r3,r19
    575c:	003d5b06 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    5760:	db002d17 	ldw	r12,180(sp)
    5764:	0039883a 	mov	fp,zero
    5768:	00800044 	movi	r2,1
    576c:	64c00017 	ldw	r19,0(r12)
    5770:	63000104 	addi	r12,r12,4
    5774:	db002d15 	stw	r12,180(sp)
    5778:	9807883a 	mov	r3,r19
    577c:	003d5306 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    5780:	00800084 	movi	r2,2
    5784:	9f06b03a 	or	r3,r19,fp
    5788:	003d5006 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    578c:	10803fcc 	andi	r2,r2,255
    5790:	1080201c 	xori	r2,r2,128
    5794:	10bfe004 	addi	r2,r2,-128
    5798:	01000c04 	movi	r4,48
    579c:	1101a526 	beq	r2,r4,5e34 <___vfprintf_internal_r+0x1a24>
    57a0:	dac03117 	ldw	r11,196(sp)
    57a4:	db002817 	ldw	r12,160(sp)
    57a8:	193fffc5 	stb	r4,-1(r3)
    57ac:	5affffc4 	addi	r11,r11,-1
    57b0:	dac03115 	stw	r11,196(sp)
    57b4:	62e5c83a 	sub	r18,r12,r11
    57b8:	003c6306 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    57bc:	b009883a 	mov	r4,r22
    57c0:	b80b883a 	mov	r5,r23
    57c4:	d9801e04 	addi	r6,sp,120
    57c8:	000c7140 	call	c714 <__sprint_r>
    57cc:	103c041e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    57d0:	d8c02017 	ldw	r3,128(sp)
    57d4:	da000404 	addi	r8,sp,16
    57d8:	db003117 	ldw	r12,196(sp)
    57dc:	dac03417 	ldw	r11,208(sp)
    57e0:	d8802617 	ldw	r2,152(sp)
    57e4:	62e5883a 	add	r18,r12,r11
    57e8:	db003317 	ldw	r12,204(sp)
    57ec:	13000216 	blt	r2,r12,57f8 <___vfprintf_internal_r+0x13e8>
    57f0:	8900004c 	andi	r4,r17,1
    57f4:	20000c26 	beq	r4,zero,5828 <___vfprintf_internal_r+0x1418>
    57f8:	dac03817 	ldw	r11,224(sp)
    57fc:	d9001f17 	ldw	r4,124(sp)
    5800:	db003517 	ldw	r12,212(sp)
    5804:	1ac7883a 	add	r3,r3,r11
    5808:	21000044 	addi	r4,r4,1
    580c:	43000015 	stw	r12,0(r8)
    5810:	42c00115 	stw	r11,4(r8)
    5814:	d8c02015 	stw	r3,128(sp)
    5818:	d9001f15 	stw	r4,124(sp)
    581c:	014001c4 	movi	r5,7
    5820:	2901cc16 	blt	r5,r4,5f54 <___vfprintf_internal_r+0x1b44>
    5824:	42000204 	addi	r8,r8,8
    5828:	dac03317 	ldw	r11,204(sp)
    582c:	8489c83a 	sub	r4,r16,r18
    5830:	5885c83a 	sub	r2,r11,r2
    5834:	1021883a 	mov	r16,r2
    5838:	2080010e 	bge	r4,r2,5840 <___vfprintf_internal_r+0x1430>
    583c:	2021883a 	mov	r16,r4
    5840:	04000a0e 	bge	zero,r16,586c <___vfprintf_internal_r+0x145c>
    5844:	d9001f17 	ldw	r4,124(sp)
    5848:	1c07883a 	add	r3,r3,r16
    584c:	44800015 	stw	r18,0(r8)
    5850:	21000044 	addi	r4,r4,1
    5854:	44000115 	stw	r16,4(r8)
    5858:	d8c02015 	stw	r3,128(sp)
    585c:	d9001f15 	stw	r4,124(sp)
    5860:	014001c4 	movi	r5,7
    5864:	2901e316 	blt	r5,r4,5ff4 <___vfprintf_internal_r+0x1be4>
    5868:	42000204 	addi	r8,r8,8
    586c:	8001df16 	blt	r16,zero,5fec <___vfprintf_internal_r+0x1bdc>
    5870:	1421c83a 	sub	r16,r2,r16
    5874:	043ccc0e 	bge	zero,r16,4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    5878:	04800404 	movi	r18,16
    587c:	d8801f17 	ldw	r2,124(sp)
    5880:	943efc0e 	bge	r18,r16,5474 <__alt_mem_Flash_flash_data+0xf4005474>
    5884:	014000b4 	movhi	r5,2
    5888:	297c2c84 	addi	r5,r5,-3918
    588c:	d9402c15 	stw	r5,176(sp)
    5890:	054001c4 	movi	r21,7
    5894:	00000306 	br	58a4 <___vfprintf_internal_r+0x1494>
    5898:	42000204 	addi	r8,r8,8
    589c:	843ffc04 	addi	r16,r16,-16
    58a0:	943ef70e 	bge	r18,r16,5480 <__alt_mem_Flash_flash_data+0xf4005480>
    58a4:	18c00404 	addi	r3,r3,16
    58a8:	10800044 	addi	r2,r2,1
    58ac:	45000015 	stw	r20,0(r8)
    58b0:	44800115 	stw	r18,4(r8)
    58b4:	d8c02015 	stw	r3,128(sp)
    58b8:	d8801f15 	stw	r2,124(sp)
    58bc:	a8bff60e 	bge	r21,r2,5898 <__alt_mem_Flash_flash_data+0xf4005898>
    58c0:	b009883a 	mov	r4,r22
    58c4:	b80b883a 	mov	r5,r23
    58c8:	d9801e04 	addi	r6,sp,120
    58cc:	000c7140 	call	c714 <__sprint_r>
    58d0:	103bc31e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    58d4:	d8c02017 	ldw	r3,128(sp)
    58d8:	d8801f17 	ldw	r2,124(sp)
    58dc:	da000404 	addi	r8,sp,16
    58e0:	003fee06 	br	589c <__alt_mem_Flash_flash_data+0xf400589c>
    58e4:	8888703a 	and	r4,r17,r2
    58e8:	203eab1e 	bne	r4,zero,5398 <__alt_mem_Flash_flash_data+0xf4005398>
    58ec:	dc001f17 	ldw	r16,124(sp)
    58f0:	db003117 	ldw	r12,196(sp)
    58f4:	40800115 	stw	r2,4(r8)
    58f8:	84000044 	addi	r16,r16,1
    58fc:	43000015 	stw	r12,0(r8)
    5900:	d8c02015 	stw	r3,128(sp)
    5904:	dc001f15 	stw	r16,124(sp)
    5908:	008001c4 	movi	r2,7
    590c:	14000e16 	blt	r2,r16,5948 <___vfprintf_internal_r+0x1538>
    5910:	44800204 	addi	r18,r8,8
    5914:	003ecb06 	br	5444 <__alt_mem_Flash_flash_data+0xf4005444>
    5918:	008000b4 	movhi	r2,2
    591c:	10bc2c84 	addi	r2,r2,-3918
    5920:	d8802c15 	stw	r2,176(sp)
    5924:	dac02c17 	ldw	r11,176(sp)
    5928:	1d47883a 	add	r3,r3,r21
    592c:	84000044 	addi	r16,r16,1
    5930:	92c00015 	stw	r11,0(r18)
    5934:	95400115 	stw	r21,4(r18)
    5938:	d8c02015 	stw	r3,128(sp)
    593c:	dc001f15 	stw	r16,124(sp)
    5940:	008001c4 	movi	r2,7
    5944:	143ebe0e 	bge	r2,r16,5440 <__alt_mem_Flash_flash_data+0xf4005440>
    5948:	b009883a 	mov	r4,r22
    594c:	b80b883a 	mov	r5,r23
    5950:	d9801e04 	addi	r6,sp,120
    5954:	000c7140 	call	c714 <__sprint_r>
    5958:	103ba11e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    595c:	d8c02017 	ldw	r3,128(sp)
    5960:	dc001f17 	ldw	r16,124(sp)
    5964:	dc800404 	addi	r18,sp,16
    5968:	003eb606 	br	5444 <__alt_mem_Flash_flash_data+0xf4005444>
    596c:	b009883a 	mov	r4,r22
    5970:	b80b883a 	mov	r5,r23
    5974:	d9801e04 	addi	r6,sp,120
    5978:	000c7140 	call	c714 <__sprint_r>
    597c:	103b981e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5980:	d8c02017 	ldw	r3,128(sp)
    5984:	dc001f17 	ldw	r16,124(sp)
    5988:	da000404 	addi	r8,sp,16
    598c:	003e8d06 	br	53c4 <__alt_mem_Flash_flash_data+0xf40053c4>
    5990:	b009883a 	mov	r4,r22
    5994:	b80b883a 	mov	r5,r23
    5998:	d9801e04 	addi	r6,sp,120
    599c:	000c7140 	call	c714 <__sprint_r>
    59a0:	103b8f1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    59a4:	d8c02017 	ldw	r3,128(sp)
    59a8:	dc001f17 	ldw	r16,124(sp)
    59ac:	dc800404 	addi	r18,sp,16
    59b0:	003e8f06 	br	53f0 <__alt_mem_Flash_flash_data+0xf40053f0>
    59b4:	db001e04 	addi	r12,sp,120
    59b8:	0025883a 	mov	r18,zero
    59bc:	db003115 	stw	r12,196(sp)
    59c0:	003be106 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    59c4:	b009883a 	mov	r4,r22
    59c8:	b80b883a 	mov	r5,r23
    59cc:	d9801e04 	addi	r6,sp,120
    59d0:	000c7140 	call	c714 <__sprint_r>
    59d4:	103b821e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    59d8:	d8c02017 	ldw	r3,128(sp)
    59dc:	da000404 	addi	r8,sp,16
    59e0:	003c3b06 	br	4ad0 <__alt_mem_Flash_flash_data+0xf4004ad0>
    59e4:	04e7c83a 	sub	r19,zero,r19
    59e8:	9804c03a 	cmpne	r2,r19,zero
    59ec:	0739c83a 	sub	fp,zero,fp
    59f0:	e0b9c83a 	sub	fp,fp,r2
    59f4:	05400b44 	movi	r21,45
    59f8:	dd402785 	stb	r21,158(sp)
    59fc:	da403215 	stw	r9,200(sp)
    5a00:	00800044 	movi	r2,1
    5a04:	9f06b03a 	or	r3,r19,fp
    5a08:	003bb506 	br	48e0 <__alt_mem_Flash_flash_data+0xf40048e0>
    5a0c:	da003f15 	stw	r8,252(sp)
    5a10:	da403e15 	stw	r9,248(sp)
    5a14:	000b2100 	call	b210 <__fpclassifyd>
    5a18:	da003f17 	ldw	r8,252(sp)
    5a1c:	da403e17 	ldw	r9,248(sp)
    5a20:	1000ce26 	beq	r2,zero,5d5c <___vfprintf_internal_r+0x194c>
    5a24:	057ff7c4 	movi	r21,-33
    5a28:	00bfffc4 	movi	r2,-1
    5a2c:	856a703a 	and	r21,r16,r21
    5a30:	4881e826 	beq	r9,r2,61d4 <___vfprintf_internal_r+0x1dc4>
    5a34:	008011c4 	movi	r2,71
    5a38:	a881e326 	beq	r21,r2,61c8 <___vfprintf_internal_r+0x1db8>
    5a3c:	db003917 	ldw	r12,228(sp)
    5a40:	8ac04014 	ori	r11,r17,256
    5a44:	dac02d15 	stw	r11,180(sp)
    5a48:	6001ed16 	blt	r12,zero,6200 <___vfprintf_internal_r+0x1df0>
    5a4c:	dc803917 	ldw	r18,228(sp)
    5a50:	d8002b05 	stb	zero,172(sp)
    5a54:	00801984 	movi	r2,102
    5a58:	80811826 	beq	r16,r2,5ebc <___vfprintf_internal_r+0x1aac>
    5a5c:	00801184 	movi	r2,70
    5a60:	80811626 	beq	r16,r2,5ebc <___vfprintf_internal_r+0x1aac>
    5a64:	00801144 	movi	r2,69
    5a68:	a881e926 	beq	r21,r2,6210 <___vfprintf_internal_r+0x1e00>
    5a6c:	4839883a 	mov	fp,r9
    5a70:	d8802604 	addi	r2,sp,152
    5a74:	d8800115 	stw	r2,4(sp)
    5a78:	d9403717 	ldw	r5,220(sp)
    5a7c:	d8802504 	addi	r2,sp,148
    5a80:	d8800215 	stw	r2,8(sp)
    5a84:	d8802104 	addi	r2,sp,132
    5a88:	df000015 	stw	fp,0(sp)
    5a8c:	d8800315 	stw	r2,12(sp)
    5a90:	b009883a 	mov	r4,r22
    5a94:	900d883a 	mov	r6,r18
    5a98:	01c00084 	movi	r7,2
    5a9c:	da003f15 	stw	r8,252(sp)
    5aa0:	da403e15 	stw	r9,248(sp)
    5aa4:	00067940 	call	6794 <_dtoa_r>
    5aa8:	d8803115 	stw	r2,196(sp)
    5aac:	008019c4 	movi	r2,103
    5ab0:	da003f17 	ldw	r8,252(sp)
    5ab4:	da403e17 	ldw	r9,248(sp)
    5ab8:	80800226 	beq	r16,r2,5ac4 <___vfprintf_internal_r+0x16b4>
    5abc:	008011c4 	movi	r2,71
    5ac0:	8081101e 	bne	r16,r2,5f04 <___vfprintf_internal_r+0x1af4>
    5ac4:	8880004c 	andi	r2,r17,1
    5ac8:	1001dd26 	beq	r2,zero,6240 <___vfprintf_internal_r+0x1e30>
    5acc:	db003117 	ldw	r12,196(sp)
    5ad0:	6715883a 	add	r10,r12,fp
    5ad4:	d9003717 	ldw	r4,220(sp)
    5ad8:	900b883a 	mov	r5,r18
    5adc:	000d883a 	mov	r6,zero
    5ae0:	000f883a 	mov	r7,zero
    5ae4:	da003f15 	stw	r8,252(sp)
    5ae8:	da403e15 	stw	r9,248(sp)
    5aec:	da803d15 	stw	r10,244(sp)
    5af0:	00101b80 	call	101b8 <__eqdf2>
    5af4:	da003f17 	ldw	r8,252(sp)
    5af8:	da403e17 	ldw	r9,248(sp)
    5afc:	da803d17 	ldw	r10,244(sp)
    5b00:	10016526 	beq	r2,zero,6098 <___vfprintf_internal_r+0x1c88>
    5b04:	d8802117 	ldw	r2,132(sp)
    5b08:	1280062e 	bgeu	r2,r10,5b24 <___vfprintf_internal_r+0x1714>
    5b0c:	01000c04 	movi	r4,48
    5b10:	10c00044 	addi	r3,r2,1
    5b14:	d8c02115 	stw	r3,132(sp)
    5b18:	11000005 	stb	r4,0(r2)
    5b1c:	d8802117 	ldw	r2,132(sp)
    5b20:	12bffb36 	bltu	r2,r10,5b10 <__alt_mem_Flash_flash_data+0xf4005b10>
    5b24:	db003117 	ldw	r12,196(sp)
    5b28:	1305c83a 	sub	r2,r2,r12
    5b2c:	d8803315 	stw	r2,204(sp)
    5b30:	008011c4 	movi	r2,71
    5b34:	a8814d26 	beq	r21,r2,606c <___vfprintf_internal_r+0x1c5c>
    5b38:	00801944 	movi	r2,101
    5b3c:	1402060e 	bge	r2,r16,6358 <___vfprintf_internal_r+0x1f48>
    5b40:	00801984 	movi	r2,102
    5b44:	8081b426 	beq	r16,r2,6218 <___vfprintf_internal_r+0x1e08>
    5b48:	db002617 	ldw	r12,152(sp)
    5b4c:	db003415 	stw	r12,208(sp)
    5b50:	db003417 	ldw	r12,208(sp)
    5b54:	dac03317 	ldw	r11,204(sp)
    5b58:	62c1a016 	blt	r12,r11,61dc <___vfprintf_internal_r+0x1dcc>
    5b5c:	8c40004c 	andi	r17,r17,1
    5b60:	8801bf1e 	bne	r17,zero,6260 <___vfprintf_internal_r+0x1e50>
    5b64:	6005883a 	mov	r2,r12
    5b68:	6001b316 	blt	r12,zero,6238 <___vfprintf_internal_r+0x1e28>
    5b6c:	dc803417 	ldw	r18,208(sp)
    5b70:	df002b07 	ldb	fp,172(sp)
    5b74:	e0012e1e 	bne	fp,zero,6030 <___vfprintf_internal_r+0x1c20>
    5b78:	dc402d17 	ldw	r17,180(sp)
    5b7c:	dd402783 	ldbu	r21,158(sp)
    5b80:	d8802b15 	stw	r2,172(sp)
    5b84:	dcc02d15 	stw	r19,180(sp)
    5b88:	d8003215 	stw	zero,200(sp)
    5b8c:	003b7306 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    5b90:	00800084 	movi	r2,2
    5b94:	003c4d06 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    5b98:	8880040c 	andi	r2,r17,16
    5b9c:	1000091e 	bne	r2,zero,5bc4 <___vfprintf_internal_r+0x17b4>
    5ba0:	8c40100c 	andi	r17,r17,64
    5ba4:	88000726 	beq	r17,zero,5bc4 <___vfprintf_internal_r+0x17b4>
    5ba8:	db002d17 	ldw	r12,180(sp)
    5bac:	dac02f17 	ldw	r11,188(sp)
    5bb0:	60800017 	ldw	r2,0(r12)
    5bb4:	63000104 	addi	r12,r12,4
    5bb8:	db002d15 	stw	r12,180(sp)
    5bbc:	12c0000d 	sth	r11,0(r2)
    5bc0:	003a4e06 	br	44fc <__alt_mem_Flash_flash_data+0xf40044fc>
    5bc4:	db002d17 	ldw	r12,180(sp)
    5bc8:	dac02f17 	ldw	r11,188(sp)
    5bcc:	60800017 	ldw	r2,0(r12)
    5bd0:	63000104 	addi	r12,r12,4
    5bd4:	db002d15 	stw	r12,180(sp)
    5bd8:	12c00015 	stw	r11,0(r2)
    5bdc:	003a4706 	br	44fc <__alt_mem_Flash_flash_data+0xf40044fc>
    5be0:	1c000007 	ldb	r16,0(r3)
    5be4:	1805883a 	mov	r2,r3
    5be8:	003a6e06 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    5bec:	88c0100c 	andi	r3,r17,64
    5bf0:	18006b26 	beq	r3,zero,5da0 <___vfprintf_internal_r+0x1990>
    5bf4:	dac02d17 	ldw	r11,180(sp)
    5bf8:	14c0000b 	ldhu	r19,0(r2)
    5bfc:	0039883a 	mov	fp,zero
    5c00:	5ac00104 	addi	r11,r11,4
    5c04:	dac02d15 	stw	r11,180(sp)
    5c08:	003cb206 	br	4ed4 <__alt_mem_Flash_flash_data+0xf4004ed4>
    5c0c:	010000b4 	movhi	r4,2
    5c10:	213c2c84 	addi	r4,r4,-3918
    5c14:	d9002c15 	stw	r4,176(sp)
    5c18:	dac02c17 	ldw	r11,176(sp)
    5c1c:	1c87883a 	add	r3,r3,r18
    5c20:	10800044 	addi	r2,r2,1
    5c24:	42c00015 	stw	r11,0(r8)
    5c28:	44800115 	stw	r18,4(r8)
    5c2c:	d8c02015 	stw	r3,128(sp)
    5c30:	d8801f15 	stw	r2,124(sp)
    5c34:	010001c4 	movi	r4,7
    5c38:	20bee016 	blt	r4,r2,57bc <__alt_mem_Flash_flash_data+0xf40057bc>
    5c3c:	42000204 	addi	r8,r8,8
    5c40:	003ee506 	br	57d8 <__alt_mem_Flash_flash_data+0xf40057d8>
    5c44:	010000b4 	movhi	r4,2
    5c48:	213c2c84 	addi	r4,r4,-3918
    5c4c:	d9002c15 	stw	r4,176(sp)
    5c50:	003bbe06 	br	4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    5c54:	b009883a 	mov	r4,r22
    5c58:	b80b883a 	mov	r5,r23
    5c5c:	d9801e04 	addi	r6,sp,120
    5c60:	000c7140 	call	c714 <__sprint_r>
    5c64:	103ade1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5c68:	d8c02017 	ldw	r3,128(sp)
    5c6c:	da000404 	addi	r8,sp,16
    5c70:	003d6b06 	br	5220 <__alt_mem_Flash_flash_data+0xf4005220>
    5c74:	d8801f17 	ldw	r2,124(sp)
    5c78:	030000b4 	movhi	r12,2
    5c7c:	01000044 	movi	r4,1
    5c80:	18c00044 	addi	r3,r3,1
    5c84:	10800044 	addi	r2,r2,1
    5c88:	633c2404 	addi	r12,r12,-3952
    5c8c:	41000115 	stw	r4,4(r8)
    5c90:	43000015 	stw	r12,0(r8)
    5c94:	d8c02015 	stw	r3,128(sp)
    5c98:	d8801f15 	stw	r2,124(sp)
    5c9c:	010001c4 	movi	r4,7
    5ca0:	20804916 	blt	r4,r2,5dc8 <___vfprintf_internal_r+0x19b8>
    5ca4:	42000204 	addi	r8,r8,8
    5ca8:	8000041e 	bne	r16,zero,5cbc <___vfprintf_internal_r+0x18ac>
    5cac:	dac03317 	ldw	r11,204(sp)
    5cb0:	5800021e 	bne	r11,zero,5cbc <___vfprintf_internal_r+0x18ac>
    5cb4:	8880004c 	andi	r2,r17,1
    5cb8:	103bbb26 	beq	r2,zero,4ba8 <__alt_mem_Flash_flash_data+0xf4004ba8>
    5cbc:	db003817 	ldw	r12,224(sp)
    5cc0:	d8801f17 	ldw	r2,124(sp)
    5cc4:	dac03517 	ldw	r11,212(sp)
    5cc8:	1b07883a 	add	r3,r3,r12
    5ccc:	10800044 	addi	r2,r2,1
    5cd0:	42c00015 	stw	r11,0(r8)
    5cd4:	43000115 	stw	r12,4(r8)
    5cd8:	d8c02015 	stw	r3,128(sp)
    5cdc:	d8801f15 	stw	r2,124(sp)
    5ce0:	010001c4 	movi	r4,7
    5ce4:	20812e16 	blt	r4,r2,61a0 <___vfprintf_internal_r+0x1d90>
    5ce8:	42000204 	addi	r8,r8,8
    5cec:	0421c83a 	sub	r16,zero,r16
    5cf0:	04005c0e 	bge	zero,r16,5e64 <___vfprintf_internal_r+0x1a54>
    5cf4:	04800404 	movi	r18,16
    5cf8:	94009f0e 	bge	r18,r16,5f78 <___vfprintf_internal_r+0x1b68>
    5cfc:	010000b4 	movhi	r4,2
    5d00:	213c2c84 	addi	r4,r4,-3918
    5d04:	d9002c15 	stw	r4,176(sp)
    5d08:	054001c4 	movi	r21,7
    5d0c:	00000306 	br	5d1c <___vfprintf_internal_r+0x190c>
    5d10:	42000204 	addi	r8,r8,8
    5d14:	843ffc04 	addi	r16,r16,-16
    5d18:	94009a0e 	bge	r18,r16,5f84 <___vfprintf_internal_r+0x1b74>
    5d1c:	18c00404 	addi	r3,r3,16
    5d20:	10800044 	addi	r2,r2,1
    5d24:	45000015 	stw	r20,0(r8)
    5d28:	44800115 	stw	r18,4(r8)
    5d2c:	d8c02015 	stw	r3,128(sp)
    5d30:	d8801f15 	stw	r2,124(sp)
    5d34:	a8bff60e 	bge	r21,r2,5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5d38:	b009883a 	mov	r4,r22
    5d3c:	b80b883a 	mov	r5,r23
    5d40:	d9801e04 	addi	r6,sp,120
    5d44:	000c7140 	call	c714 <__sprint_r>
    5d48:	103aa51e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5d4c:	d8c02017 	ldw	r3,128(sp)
    5d50:	d8801f17 	ldw	r2,124(sp)
    5d54:	da000404 	addi	r8,sp,16
    5d58:	003fee06 	br	5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    5d5c:	008011c4 	movi	r2,71
    5d60:	1400be16 	blt	r2,r16,605c <___vfprintf_internal_r+0x1c4c>
    5d64:	030000b4 	movhi	r12,2
    5d68:	633c1604 	addi	r12,r12,-4008
    5d6c:	db003115 	stw	r12,196(sp)
    5d70:	00c000c4 	movi	r3,3
    5d74:	00bfdfc4 	movi	r2,-129
    5d78:	d8c02b15 	stw	r3,172(sp)
    5d7c:	88a2703a 	and	r17,r17,r2
    5d80:	dd402783 	ldbu	r21,158(sp)
    5d84:	dcc02d15 	stw	r19,180(sp)
    5d88:	1825883a 	mov	r18,r3
    5d8c:	d8003215 	stw	zero,200(sp)
    5d90:	d8003415 	stw	zero,208(sp)
    5d94:	003af106 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    5d98:	4825883a 	mov	r18,r9
    5d9c:	003c9306 	br	4fec <__alt_mem_Flash_flash_data+0xf4004fec>
    5da0:	db002d17 	ldw	r12,180(sp)
    5da4:	14c00017 	ldw	r19,0(r2)
    5da8:	0039883a 	mov	fp,zero
    5dac:	63000104 	addi	r12,r12,4
    5db0:	db002d15 	stw	r12,180(sp)
    5db4:	003c4706 	br	4ed4 <__alt_mem_Flash_flash_data+0xf4004ed4>
    5db8:	008000b4 	movhi	r2,2
    5dbc:	10bc1404 	addi	r2,r2,-4016
    5dc0:	d8803115 	stw	r2,196(sp)
    5dc4:	003bf106 	br	4d8c <__alt_mem_Flash_flash_data+0xf4004d8c>
    5dc8:	b009883a 	mov	r4,r22
    5dcc:	b80b883a 	mov	r5,r23
    5dd0:	d9801e04 	addi	r6,sp,120
    5dd4:	000c7140 	call	c714 <__sprint_r>
    5dd8:	103a811e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5ddc:	dc002617 	ldw	r16,152(sp)
    5de0:	d8c02017 	ldw	r3,128(sp)
    5de4:	da000404 	addi	r8,sp,16
    5de8:	003faf06 	br	5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    5dec:	db002e17 	ldw	r12,184(sp)
    5df0:	1805883a 	mov	r2,r3
    5df4:	dac02d15 	stw	r11,180(sp)
    5df8:	0319c83a 	sub	r12,zero,r12
    5dfc:	db002e15 	stw	r12,184(sp)
    5e00:	003a8206 	br	480c <__alt_mem_Flash_flash_data+0xf400480c>
    5e04:	18800044 	addi	r2,r3,1
    5e08:	8c400814 	ori	r17,r17,32
    5e0c:	1c000047 	ldb	r16,1(r3)
    5e10:	0039e406 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    5e14:	b009883a 	mov	r4,r22
    5e18:	b80b883a 	mov	r5,r23
    5e1c:	d9801e04 	addi	r6,sp,120
    5e20:	000c7140 	call	c714 <__sprint_r>
    5e24:	103a6e1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5e28:	d8c02017 	ldw	r3,128(sp)
    5e2c:	da000404 	addi	r8,sp,16
    5e30:	003d0c06 	br	5264 <__alt_mem_Flash_flash_data+0xf4005264>
    5e34:	db002817 	ldw	r12,160(sp)
    5e38:	d8c03117 	ldw	r3,196(sp)
    5e3c:	60e5c83a 	sub	r18,r12,r3
    5e40:	003ac106 	br	4948 <__alt_mem_Flash_flash_data+0xf4004948>
    5e44:	b009883a 	mov	r4,r22
    5e48:	b80b883a 	mov	r5,r23
    5e4c:	d9801e04 	addi	r6,sp,120
    5e50:	000c7140 	call	c714 <__sprint_r>
    5e54:	103a621e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5e58:	d8c02017 	ldw	r3,128(sp)
    5e5c:	d8801f17 	ldw	r2,124(sp)
    5e60:	da000404 	addi	r8,sp,16
    5e64:	db003317 	ldw	r12,204(sp)
    5e68:	dac03117 	ldw	r11,196(sp)
    5e6c:	10800044 	addi	r2,r2,1
    5e70:	1b07883a 	add	r3,r3,r12
    5e74:	42c00015 	stw	r11,0(r8)
    5e78:	43000115 	stw	r12,4(r8)
    5e7c:	d8c02015 	stw	r3,128(sp)
    5e80:	d8801f15 	stw	r2,124(sp)
    5e84:	010001c4 	movi	r4,7
    5e88:	20bb460e 	bge	r4,r2,4ba4 <__alt_mem_Flash_flash_data+0xf4004ba4>
    5e8c:	003d8506 	br	54a4 <__alt_mem_Flash_flash_data+0xf40054a4>
    5e90:	da003f15 	stw	r8,252(sp)
    5e94:	00023e80 	call	23e8 <strlen>
    5e98:	1025883a 	mov	r18,r2
    5e9c:	da003f17 	ldw	r8,252(sp)
    5ea0:	903c540e 	bge	r18,zero,4ff4 <__alt_mem_Flash_flash_data+0xf4004ff4>
    5ea4:	0005883a 	mov	r2,zero
    5ea8:	003c5206 	br	4ff4 <__alt_mem_Flash_flash_data+0xf4004ff4>
    5eac:	010000b4 	movhi	r4,2
    5eb0:	213c3084 	addi	r4,r4,-3902
    5eb4:	d9003615 	stw	r4,216(sp)
    5eb8:	003adc06 	br	4a2c <__alt_mem_Flash_flash_data+0xf4004a2c>
    5ebc:	d8802604 	addi	r2,sp,152
    5ec0:	d8800115 	stw	r2,4(sp)
    5ec4:	d9403717 	ldw	r5,220(sp)
    5ec8:	d8802504 	addi	r2,sp,148
    5ecc:	d8800215 	stw	r2,8(sp)
    5ed0:	d8802104 	addi	r2,sp,132
    5ed4:	da400015 	stw	r9,0(sp)
    5ed8:	d8800315 	stw	r2,12(sp)
    5edc:	b009883a 	mov	r4,r22
    5ee0:	900d883a 	mov	r6,r18
    5ee4:	01c000c4 	movi	r7,3
    5ee8:	da003f15 	stw	r8,252(sp)
    5eec:	da403e15 	stw	r9,248(sp)
    5ef0:	00067940 	call	6794 <_dtoa_r>
    5ef4:	da403e17 	ldw	r9,248(sp)
    5ef8:	da003f17 	ldw	r8,252(sp)
    5efc:	d8803115 	stw	r2,196(sp)
    5f00:	4839883a 	mov	fp,r9
    5f04:	dac03117 	ldw	r11,196(sp)
    5f08:	00801184 	movi	r2,70
    5f0c:	5f15883a 	add	r10,r11,fp
    5f10:	a8bef01e 	bne	r21,r2,5ad4 <__alt_mem_Flash_flash_data+0xf4005ad4>
    5f14:	59000007 	ldb	r4,0(r11)
    5f18:	00800c04 	movi	r2,48
    5f1c:	2080d526 	beq	r4,r2,6274 <___vfprintf_internal_r+0x1e64>
    5f20:	d8c02617 	ldw	r3,152(sp)
    5f24:	50d5883a 	add	r10,r10,r3
    5f28:	003eea06 	br	5ad4 <__alt_mem_Flash_flash_data+0xf4005ad4>
    5f2c:	0025883a 	mov	r18,zero
    5f30:	003db306 	br	5600 <__alt_mem_Flash_flash_data+0xf4005600>
    5f34:	b009883a 	mov	r4,r22
    5f38:	b80b883a 	mov	r5,r23
    5f3c:	d9801e04 	addi	r6,sp,120
    5f40:	000c7140 	call	c714 <__sprint_r>
    5f44:	103a261e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5f48:	d8c02017 	ldw	r3,128(sp)
    5f4c:	da000404 	addi	r8,sp,16
    5f50:	003daa06 	br	55fc <__alt_mem_Flash_flash_data+0xf40055fc>
    5f54:	b009883a 	mov	r4,r22
    5f58:	b80b883a 	mov	r5,r23
    5f5c:	d9801e04 	addi	r6,sp,120
    5f60:	000c7140 	call	c714 <__sprint_r>
    5f64:	103a1e1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    5f68:	d8802617 	ldw	r2,152(sp)
    5f6c:	d8c02017 	ldw	r3,128(sp)
    5f70:	da000404 	addi	r8,sp,16
    5f74:	003e2c06 	br	5828 <__alt_mem_Flash_flash_data+0xf4005828>
    5f78:	030000b4 	movhi	r12,2
    5f7c:	633c2c84 	addi	r12,r12,-3918
    5f80:	db002c15 	stw	r12,176(sp)
    5f84:	dac02c17 	ldw	r11,176(sp)
    5f88:	1c07883a 	add	r3,r3,r16
    5f8c:	10800044 	addi	r2,r2,1
    5f90:	42c00015 	stw	r11,0(r8)
    5f94:	44000115 	stw	r16,4(r8)
    5f98:	d8c02015 	stw	r3,128(sp)
    5f9c:	d8801f15 	stw	r2,124(sp)
    5fa0:	010001c4 	movi	r4,7
    5fa4:	20bfa716 	blt	r4,r2,5e44 <__alt_mem_Flash_flash_data+0xf4005e44>
    5fa8:	42000204 	addi	r8,r8,8
    5fac:	003fad06 	br	5e64 <__alt_mem_Flash_flash_data+0xf4005e64>
    5fb0:	00800184 	movi	r2,6
    5fb4:	1240012e 	bgeu	r2,r9,5fbc <___vfprintf_internal_r+0x1bac>
    5fb8:	1013883a 	mov	r9,r2
    5fbc:	4825883a 	mov	r18,r9
    5fc0:	4805883a 	mov	r2,r9
    5fc4:	4800c216 	blt	r9,zero,62d0 <___vfprintf_internal_r+0x1ec0>
    5fc8:	d8802b15 	stw	r2,172(sp)
    5fcc:	008000b4 	movhi	r2,2
    5fd0:	10bc2204 	addi	r2,r2,-3960
    5fd4:	d8803115 	stw	r2,196(sp)
    5fd8:	dcc02d15 	stw	r19,180(sp)
    5fdc:	d8003215 	stw	zero,200(sp)
    5fe0:	d8003415 	stw	zero,208(sp)
    5fe4:	0005883a 	mov	r2,zero
    5fe8:	003a6306 	br	4978 <__alt_mem_Flash_flash_data+0xf4004978>
    5fec:	0021883a 	mov	r16,zero
    5ff0:	003e1f06 	br	5870 <__alt_mem_Flash_flash_data+0xf4005870>
    5ff4:	b009883a 	mov	r4,r22
    5ff8:	b80b883a 	mov	r5,r23
    5ffc:	d9801e04 	addi	r6,sp,120
    6000:	000c7140 	call	c714 <__sprint_r>
    6004:	1039f61e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    6008:	d8802617 	ldw	r2,152(sp)
    600c:	db003317 	ldw	r12,204(sp)
    6010:	d8c02017 	ldw	r3,128(sp)
    6014:	da000404 	addi	r8,sp,16
    6018:	6085c83a 	sub	r2,r12,r2
    601c:	003e1306 	br	586c <__alt_mem_Flash_flash_data+0xf400586c>
    6020:	030000b4 	movhi	r12,2
    6024:	633c3084 	addi	r12,r12,-3902
    6028:	db003615 	stw	r12,216(sp)
    602c:	003b0206 	br	4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    6030:	00c00b44 	movi	r3,45
    6034:	d8802b15 	stw	r2,172(sp)
    6038:	dc402d17 	ldw	r17,180(sp)
    603c:	d8c02785 	stb	r3,158(sp)
    6040:	dcc02d15 	stw	r19,180(sp)
    6044:	d8003215 	stw	zero,200(sp)
    6048:	00800b44 	movi	r2,45
    604c:	003a4706 	br	496c <__alt_mem_Flash_flash_data+0xf400496c>
    6050:	05400b44 	movi	r21,45
    6054:	dd402785 	stb	r21,158(sp)
    6058:	003b4706 	br	4d78 <__alt_mem_Flash_flash_data+0xf4004d78>
    605c:	008000b4 	movhi	r2,2
    6060:	10bc1704 	addi	r2,r2,-4004
    6064:	d8803115 	stw	r2,196(sp)
    6068:	003f4106 	br	5d70 <__alt_mem_Flash_flash_data+0xf4005d70>
    606c:	d8c02617 	ldw	r3,152(sp)
    6070:	00bfff44 	movi	r2,-3
    6074:	18801116 	blt	r3,r2,60bc <___vfprintf_internal_r+0x1cac>
    6078:	48c01016 	blt	r9,r3,60bc <___vfprintf_internal_r+0x1cac>
    607c:	d8c03415 	stw	r3,208(sp)
    6080:	040019c4 	movi	r16,103
    6084:	003eb206 	br	5b50 <__alt_mem_Flash_flash_data+0xf4005b50>
    6088:	010000b4 	movhi	r4,2
    608c:	213c2c84 	addi	r4,r4,-3918
    6090:	d9002c15 	stw	r4,176(sp)
    6094:	003cb106 	br	535c <__alt_mem_Flash_flash_data+0xf400535c>
    6098:	5005883a 	mov	r2,r10
    609c:	003ea106 	br	5b24 <__alt_mem_Flash_flash_data+0xf4005b24>
    60a0:	da402b15 	stw	r9,172(sp)
    60a4:	dd402783 	ldbu	r21,158(sp)
    60a8:	4825883a 	mov	r18,r9
    60ac:	dcc02d15 	stw	r19,180(sp)
    60b0:	d8003215 	stw	zero,200(sp)
    60b4:	d8003415 	stw	zero,208(sp)
    60b8:	003a2806 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    60bc:	843fff84 	addi	r16,r16,-2
    60c0:	1f3fffc4 	addi	fp,r3,-1
    60c4:	df002615 	stw	fp,152(sp)
    60c8:	dc0022c5 	stb	r16,139(sp)
    60cc:	e0009816 	blt	fp,zero,6330 <___vfprintf_internal_r+0x1f20>
    60d0:	00800ac4 	movi	r2,43
    60d4:	d8802305 	stb	r2,140(sp)
    60d8:	00800244 	movi	r2,9
    60dc:	1700750e 	bge	r2,fp,62b4 <___vfprintf_internal_r+0x1ea4>
    60e0:	dd4022c4 	addi	r21,sp,139
    60e4:	dc002c15 	stw	r16,176(sp)
    60e8:	4025883a 	mov	r18,r8
    60ec:	a821883a 	mov	r16,r21
    60f0:	e009883a 	mov	r4,fp
    60f4:	01400284 	movi	r5,10
    60f8:	000efe40 	call	efe4 <__modsi3>
    60fc:	10800c04 	addi	r2,r2,48
    6100:	843fffc4 	addi	r16,r16,-1
    6104:	e009883a 	mov	r4,fp
    6108:	01400284 	movi	r5,10
    610c:	80800005 	stb	r2,0(r16)
    6110:	000ef900 	call	ef90 <__divsi3>
    6114:	1039883a 	mov	fp,r2
    6118:	00800244 	movi	r2,9
    611c:	173ff416 	blt	r2,fp,60f0 <__alt_mem_Flash_flash_data+0xf40060f0>
    6120:	9011883a 	mov	r8,r18
    6124:	e0800c04 	addi	r2,fp,48
    6128:	8025883a 	mov	r18,r16
    612c:	913fffc4 	addi	r4,r18,-1
    6130:	90bfffc5 	stb	r2,-1(r18)
    6134:	dc002c17 	ldw	r16,176(sp)
    6138:	2540852e 	bgeu	r4,r21,6350 <___vfprintf_internal_r+0x1f40>
    613c:	d9402384 	addi	r5,sp,142
    6140:	2c8bc83a 	sub	r5,r5,r18
    6144:	d8c02344 	addi	r3,sp,141
    6148:	a94b883a 	add	r5,r21,r5
    614c:	00000106 	br	6154 <___vfprintf_internal_r+0x1d44>
    6150:	20800003 	ldbu	r2,0(r4)
    6154:	18800005 	stb	r2,0(r3)
    6158:	18c00044 	addi	r3,r3,1
    615c:	21000044 	addi	r4,r4,1
    6160:	197ffb1e 	bne	r3,r5,6150 <__alt_mem_Flash_flash_data+0xf4006150>
    6164:	d8802304 	addi	r2,sp,140
    6168:	1485c83a 	sub	r2,r2,r18
    616c:	d8c02344 	addi	r3,sp,141
    6170:	1885883a 	add	r2,r3,r2
    6174:	dac03317 	ldw	r11,204(sp)
    6178:	156bc83a 	sub	r21,r2,r21
    617c:	dd403a15 	stw	r21,232(sp)
    6180:	00800044 	movi	r2,1
    6184:	5d65883a 	add	r18,r11,r21
    6188:	12c0660e 	bge	r2,r11,6324 <___vfprintf_internal_r+0x1f14>
    618c:	94800044 	addi	r18,r18,1
    6190:	9005883a 	mov	r2,r18
    6194:	90006116 	blt	r18,zero,631c <___vfprintf_internal_r+0x1f0c>
    6198:	d8003415 	stw	zero,208(sp)
    619c:	003e7406 	br	5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    61a0:	b009883a 	mov	r4,r22
    61a4:	b80b883a 	mov	r5,r23
    61a8:	d9801e04 	addi	r6,sp,120
    61ac:	000c7140 	call	c714 <__sprint_r>
    61b0:	10398b1e 	bne	r2,zero,47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    61b4:	dc002617 	ldw	r16,152(sp)
    61b8:	d8c02017 	ldw	r3,128(sp)
    61bc:	d8801f17 	ldw	r2,124(sp)
    61c0:	da000404 	addi	r8,sp,16
    61c4:	003ec906 	br	5cec <__alt_mem_Flash_flash_data+0xf4005cec>
    61c8:	483e1c1e 	bne	r9,zero,5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    61cc:	9013883a 	mov	r9,r18
    61d0:	003e1a06 	br	5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    61d4:	02400184 	movi	r9,6
    61d8:	003e1806 	br	5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    61dc:	d8c03417 	ldw	r3,208(sp)
    61e0:	00c04b0e 	bge	zero,r3,6310 <___vfprintf_internal_r+0x1f00>
    61e4:	04800044 	movi	r18,1
    61e8:	dac03317 	ldw	r11,204(sp)
    61ec:	92e5883a 	add	r18,r18,r11
    61f0:	9005883a 	mov	r2,r18
    61f4:	903e5e0e 	bge	r18,zero,5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    61f8:	0005883a 	mov	r2,zero
    61fc:	003e5c06 	br	5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    6200:	00c00b44 	movi	r3,45
    6204:	64a0003c 	xorhi	r18,r12,32768
    6208:	d8c02b05 	stb	r3,172(sp)
    620c:	003e1106 	br	5a54 <__alt_mem_Flash_flash_data+0xf4005a54>
    6210:	4f000044 	addi	fp,r9,1
    6214:	003e1606 	br	5a70 <__alt_mem_Flash_flash_data+0xf4005a70>
    6218:	d8c02617 	ldw	r3,152(sp)
    621c:	d8c03415 	stw	r3,208(sp)
    6220:	00c0350e 	bge	zero,r3,62f8 <___vfprintf_internal_r+0x1ee8>
    6224:	4800081e 	bne	r9,zero,6248 <___vfprintf_internal_r+0x1e38>
    6228:	8c40004c 	andi	r17,r17,1
    622c:	8800061e 	bne	r17,zero,6248 <___vfprintf_internal_r+0x1e38>
    6230:	1805883a 	mov	r2,r3
    6234:	183e4d0e 	bge	r3,zero,5b6c <__alt_mem_Flash_flash_data+0xf4005b6c>
    6238:	0005883a 	mov	r2,zero
    623c:	003e4b06 	br	5b6c <__alt_mem_Flash_flash_data+0xf4005b6c>
    6240:	d8802117 	ldw	r2,132(sp)
    6244:	003e3706 	br	5b24 <__alt_mem_Flash_flash_data+0xf4005b24>
    6248:	dac03417 	ldw	r11,208(sp)
    624c:	4a400044 	addi	r9,r9,1
    6250:	5a65883a 	add	r18,r11,r9
    6254:	9005883a 	mov	r2,r18
    6258:	903e450e 	bge	r18,zero,5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    625c:	003fe606 	br	61f8 <__alt_mem_Flash_flash_data+0xf40061f8>
    6260:	db003417 	ldw	r12,208(sp)
    6264:	64800044 	addi	r18,r12,1
    6268:	9005883a 	mov	r2,r18
    626c:	903e400e 	bge	r18,zero,5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    6270:	003fe106 	br	61f8 <__alt_mem_Flash_flash_data+0xf40061f8>
    6274:	d9003717 	ldw	r4,220(sp)
    6278:	900b883a 	mov	r5,r18
    627c:	000d883a 	mov	r6,zero
    6280:	000f883a 	mov	r7,zero
    6284:	da003f15 	stw	r8,252(sp)
    6288:	da403e15 	stw	r9,248(sp)
    628c:	da803d15 	stw	r10,244(sp)
    6290:	00101b80 	call	101b8 <__eqdf2>
    6294:	da003f17 	ldw	r8,252(sp)
    6298:	da403e17 	ldw	r9,248(sp)
    629c:	da803d17 	ldw	r10,244(sp)
    62a0:	103f1f26 	beq	r2,zero,5f20 <__alt_mem_Flash_flash_data+0xf4005f20>
    62a4:	00800044 	movi	r2,1
    62a8:	1707c83a 	sub	r3,r2,fp
    62ac:	d8c02615 	stw	r3,152(sp)
    62b0:	003f1c06 	br	5f24 <__alt_mem_Flash_flash_data+0xf4005f24>
    62b4:	00800c04 	movi	r2,48
    62b8:	e0c00c04 	addi	r3,fp,48
    62bc:	d8802345 	stb	r2,141(sp)
    62c0:	d8c02385 	stb	r3,142(sp)
    62c4:	d88023c4 	addi	r2,sp,143
    62c8:	dd4022c4 	addi	r21,sp,139
    62cc:	003fa906 	br	6174 <__alt_mem_Flash_flash_data+0xf4006174>
    62d0:	0005883a 	mov	r2,zero
    62d4:	003f3c06 	br	5fc8 <__alt_mem_Flash_flash_data+0xf4005fc8>
    62d8:	dac02d17 	ldw	r11,180(sp)
    62dc:	5a400017 	ldw	r9,0(r11)
    62e0:	5ac00104 	addi	r11,r11,4
    62e4:	dac02d15 	stw	r11,180(sp)
    62e8:	483ec80e 	bge	r9,zero,5e0c <__alt_mem_Flash_flash_data+0xf4005e0c>
    62ec:	027fffc4 	movi	r9,-1
    62f0:	1c000047 	ldb	r16,1(r3)
    62f4:	0038ab06 	br	45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    62f8:	4800111e 	bne	r9,zero,6340 <___vfprintf_internal_r+0x1f30>
    62fc:	8c40004c 	andi	r17,r17,1
    6300:	88000f1e 	bne	r17,zero,6340 <___vfprintf_internal_r+0x1f30>
    6304:	00800044 	movi	r2,1
    6308:	1025883a 	mov	r18,r2
    630c:	003e1806 	br	5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    6310:	04800084 	movi	r18,2
    6314:	90e5c83a 	sub	r18,r18,r3
    6318:	003fb306 	br	61e8 <__alt_mem_Flash_flash_data+0xf40061e8>
    631c:	0005883a 	mov	r2,zero
    6320:	003f9d06 	br	6198 <__alt_mem_Flash_flash_data+0xf4006198>
    6324:	88a2703a 	and	r17,r17,r2
    6328:	883f9926 	beq	r17,zero,6190 <__alt_mem_Flash_flash_data+0xf4006190>
    632c:	003f9706 	br	618c <__alt_mem_Flash_flash_data+0xf400618c>
    6330:	00800b44 	movi	r2,45
    6334:	0739c83a 	sub	fp,zero,fp
    6338:	d8802305 	stb	r2,140(sp)
    633c:	003f6606 	br	60d8 <__alt_mem_Flash_flash_data+0xf40060d8>
    6340:	4c800084 	addi	r18,r9,2
    6344:	9005883a 	mov	r2,r18
    6348:	903e090e 	bge	r18,zero,5b70 <__alt_mem_Flash_flash_data+0xf4005b70>
    634c:	003faa06 	br	61f8 <__alt_mem_Flash_flash_data+0xf40061f8>
    6350:	d8802344 	addi	r2,sp,141
    6354:	003f8706 	br	6174 <__alt_mem_Flash_flash_data+0xf4006174>
    6358:	d8c02617 	ldw	r3,152(sp)
    635c:	003f5806 	br	60c0 <__alt_mem_Flash_flash_data+0xf40060c0>

00006360 <__vfprintf_internal>:
    6360:	2007883a 	mov	r3,r4
    6364:	010000b4 	movhi	r4,2
    6368:	21067e04 	addi	r4,r4,6648
    636c:	21000017 	ldw	r4,0(r4)
    6370:	2805883a 	mov	r2,r5
    6374:	300f883a 	mov	r7,r6
    6378:	180b883a 	mov	r5,r3
    637c:	100d883a 	mov	r6,r2
    6380:	00044101 	jmpi	4410 <___vfprintf_internal_r>

00006384 <__sbprintf>:
    6384:	2880030b 	ldhu	r2,12(r5)
    6388:	2ac01917 	ldw	r11,100(r5)
    638c:	2a80038b 	ldhu	r10,14(r5)
    6390:	2a400717 	ldw	r9,28(r5)
    6394:	2a000917 	ldw	r8,36(r5)
    6398:	defee204 	addi	sp,sp,-1144
    639c:	00c10004 	movi	r3,1024
    63a0:	dc011a15 	stw	r16,1128(sp)
    63a4:	10bfff4c 	andi	r2,r2,65533
    63a8:	2821883a 	mov	r16,r5
    63ac:	d8cb883a 	add	r5,sp,r3
    63b0:	dc811c15 	stw	r18,1136(sp)
    63b4:	dc411b15 	stw	r17,1132(sp)
    63b8:	dfc11d15 	stw	ra,1140(sp)
    63bc:	2025883a 	mov	r18,r4
    63c0:	d881030d 	sth	r2,1036(sp)
    63c4:	dac11915 	stw	r11,1124(sp)
    63c8:	da81038d 	sth	r10,1038(sp)
    63cc:	da410715 	stw	r9,1052(sp)
    63d0:	da010915 	stw	r8,1060(sp)
    63d4:	dec10015 	stw	sp,1024(sp)
    63d8:	dec10415 	stw	sp,1040(sp)
    63dc:	d8c10215 	stw	r3,1032(sp)
    63e0:	d8c10515 	stw	r3,1044(sp)
    63e4:	d8010615 	stw	zero,1048(sp)
    63e8:	00044100 	call	4410 <___vfprintf_internal_r>
    63ec:	1023883a 	mov	r17,r2
    63f0:	10000416 	blt	r2,zero,6404 <__sbprintf+0x80>
    63f4:	9009883a 	mov	r4,r18
    63f8:	d9410004 	addi	r5,sp,1024
    63fc:	00080c40 	call	80c4 <_fflush_r>
    6400:	10000d1e 	bne	r2,zero,6438 <__sbprintf+0xb4>
    6404:	d8c1030b 	ldhu	r3,1036(sp)
    6408:	18c0100c 	andi	r3,r3,64
    640c:	18000326 	beq	r3,zero,641c <__sbprintf+0x98>
    6410:	8080030b 	ldhu	r2,12(r16)
    6414:	10801014 	ori	r2,r2,64
    6418:	8080030d 	sth	r2,12(r16)
    641c:	8805883a 	mov	r2,r17
    6420:	dfc11d17 	ldw	ra,1140(sp)
    6424:	dc811c17 	ldw	r18,1136(sp)
    6428:	dc411b17 	ldw	r17,1132(sp)
    642c:	dc011a17 	ldw	r16,1128(sp)
    6430:	dec11e04 	addi	sp,sp,1144
    6434:	f800283a 	ret
    6438:	047fffc4 	movi	r17,-1
    643c:	003ff106 	br	6404 <__alt_mem_Flash_flash_data+0xf4006404>

00006440 <__swsetup_r>:
    6440:	008000b4 	movhi	r2,2
    6444:	defffd04 	addi	sp,sp,-12
    6448:	10867e04 	addi	r2,r2,6648
    644c:	dc400115 	stw	r17,4(sp)
    6450:	2023883a 	mov	r17,r4
    6454:	11000017 	ldw	r4,0(r2)
    6458:	dc000015 	stw	r16,0(sp)
    645c:	dfc00215 	stw	ra,8(sp)
    6460:	2821883a 	mov	r16,r5
    6464:	20000226 	beq	r4,zero,6470 <__swsetup_r+0x30>
    6468:	20c00e17 	ldw	r3,56(r4)
    646c:	18003126 	beq	r3,zero,6534 <__swsetup_r+0xf4>
    6470:	8080030b 	ldhu	r2,12(r16)
    6474:	10c0020c 	andi	r3,r2,8
    6478:	100d883a 	mov	r6,r2
    647c:	18000f26 	beq	r3,zero,64bc <__swsetup_r+0x7c>
    6480:	80c00417 	ldw	r3,16(r16)
    6484:	18001526 	beq	r3,zero,64dc <__swsetup_r+0x9c>
    6488:	1100004c 	andi	r4,r2,1
    648c:	20001c1e 	bne	r4,zero,6500 <__swsetup_r+0xc0>
    6490:	1080008c 	andi	r2,r2,2
    6494:	1000291e 	bne	r2,zero,653c <__swsetup_r+0xfc>
    6498:	80800517 	ldw	r2,20(r16)
    649c:	80800215 	stw	r2,8(r16)
    64a0:	18001c26 	beq	r3,zero,6514 <__swsetup_r+0xd4>
    64a4:	0005883a 	mov	r2,zero
    64a8:	dfc00217 	ldw	ra,8(sp)
    64ac:	dc400117 	ldw	r17,4(sp)
    64b0:	dc000017 	ldw	r16,0(sp)
    64b4:	dec00304 	addi	sp,sp,12
    64b8:	f800283a 	ret
    64bc:	3080040c 	andi	r2,r6,16
    64c0:	10002e26 	beq	r2,zero,657c <__swsetup_r+0x13c>
    64c4:	3080010c 	andi	r2,r6,4
    64c8:	10001e1e 	bne	r2,zero,6544 <__swsetup_r+0x104>
    64cc:	80c00417 	ldw	r3,16(r16)
    64d0:	30800214 	ori	r2,r6,8
    64d4:	8080030d 	sth	r2,12(r16)
    64d8:	183feb1e 	bne	r3,zero,6488 <__alt_mem_Flash_flash_data+0xf4006488>
    64dc:	1140a00c 	andi	r5,r2,640
    64e0:	01008004 	movi	r4,512
    64e4:	293fe826 	beq	r5,r4,6488 <__alt_mem_Flash_flash_data+0xf4006488>
    64e8:	8809883a 	mov	r4,r17
    64ec:	800b883a 	mov	r5,r16
    64f0:	000902c0 	call	902c <__smakebuf_r>
    64f4:	8080030b 	ldhu	r2,12(r16)
    64f8:	80c00417 	ldw	r3,16(r16)
    64fc:	003fe206 	br	6488 <__alt_mem_Flash_flash_data+0xf4006488>
    6500:	80800517 	ldw	r2,20(r16)
    6504:	80000215 	stw	zero,8(r16)
    6508:	0085c83a 	sub	r2,zero,r2
    650c:	80800615 	stw	r2,24(r16)
    6510:	183fe41e 	bne	r3,zero,64a4 <__alt_mem_Flash_flash_data+0xf40064a4>
    6514:	80c0030b 	ldhu	r3,12(r16)
    6518:	0005883a 	mov	r2,zero
    651c:	1900200c 	andi	r4,r3,128
    6520:	203fe126 	beq	r4,zero,64a8 <__alt_mem_Flash_flash_data+0xf40064a8>
    6524:	18c01014 	ori	r3,r3,64
    6528:	80c0030d 	sth	r3,12(r16)
    652c:	00bfffc4 	movi	r2,-1
    6530:	003fdd06 	br	64a8 <__alt_mem_Flash_flash_data+0xf40064a8>
    6534:	00084a00 	call	84a0 <__sinit>
    6538:	003fcd06 	br	6470 <__alt_mem_Flash_flash_data+0xf4006470>
    653c:	0005883a 	mov	r2,zero
    6540:	003fd606 	br	649c <__alt_mem_Flash_flash_data+0xf400649c>
    6544:	81400c17 	ldw	r5,48(r16)
    6548:	28000626 	beq	r5,zero,6564 <__swsetup_r+0x124>
    654c:	80801004 	addi	r2,r16,64
    6550:	28800326 	beq	r5,r2,6560 <__swsetup_r+0x120>
    6554:	8809883a 	mov	r4,r17
    6558:	00086140 	call	8614 <_free_r>
    655c:	8180030b 	ldhu	r6,12(r16)
    6560:	80000c15 	stw	zero,48(r16)
    6564:	80c00417 	ldw	r3,16(r16)
    6568:	00bff6c4 	movi	r2,-37
    656c:	118c703a 	and	r6,r2,r6
    6570:	80000115 	stw	zero,4(r16)
    6574:	80c00015 	stw	r3,0(r16)
    6578:	003fd506 	br	64d0 <__alt_mem_Flash_flash_data+0xf40064d0>
    657c:	00800244 	movi	r2,9
    6580:	88800015 	stw	r2,0(r17)
    6584:	30801014 	ori	r2,r6,64
    6588:	8080030d 	sth	r2,12(r16)
    658c:	00bfffc4 	movi	r2,-1
    6590:	003fc506 	br	64a8 <__alt_mem_Flash_flash_data+0xf40064a8>

00006594 <quorem>:
    6594:	defff704 	addi	sp,sp,-36
    6598:	dc800215 	stw	r18,8(sp)
    659c:	20800417 	ldw	r2,16(r4)
    65a0:	2c800417 	ldw	r18,16(r5)
    65a4:	dfc00815 	stw	ra,32(sp)
    65a8:	ddc00715 	stw	r23,28(sp)
    65ac:	dd800615 	stw	r22,24(sp)
    65b0:	dd400515 	stw	r21,20(sp)
    65b4:	dd000415 	stw	r20,16(sp)
    65b8:	dcc00315 	stw	r19,12(sp)
    65bc:	dc400115 	stw	r17,4(sp)
    65c0:	dc000015 	stw	r16,0(sp)
    65c4:	14807116 	blt	r2,r18,678c <quorem+0x1f8>
    65c8:	94bfffc4 	addi	r18,r18,-1
    65cc:	94ad883a 	add	r22,r18,r18
    65d0:	b5ad883a 	add	r22,r22,r22
    65d4:	2c400504 	addi	r17,r5,20
    65d8:	8da9883a 	add	r20,r17,r22
    65dc:	25400504 	addi	r21,r4,20
    65e0:	282f883a 	mov	r23,r5
    65e4:	adad883a 	add	r22,r21,r22
    65e8:	a1400017 	ldw	r5,0(r20)
    65ec:	2021883a 	mov	r16,r4
    65f0:	b1000017 	ldw	r4,0(r22)
    65f4:	29400044 	addi	r5,r5,1
    65f8:	000f0400 	call	f040 <__udivsi3>
    65fc:	1027883a 	mov	r19,r2
    6600:	10002c26 	beq	r2,zero,66b4 <quorem+0x120>
    6604:	a813883a 	mov	r9,r21
    6608:	8811883a 	mov	r8,r17
    660c:	0009883a 	mov	r4,zero
    6610:	000d883a 	mov	r6,zero
    6614:	41c00017 	ldw	r7,0(r8)
    6618:	49400017 	ldw	r5,0(r9)
    661c:	42000104 	addi	r8,r8,4
    6620:	38bfffcc 	andi	r2,r7,65535
    6624:	14c5383a 	mul	r2,r2,r19
    6628:	380ed43a 	srli	r7,r7,16
    662c:	28ffffcc 	andi	r3,r5,65535
    6630:	2085883a 	add	r2,r4,r2
    6634:	1008d43a 	srli	r4,r2,16
    6638:	3ccf383a 	mul	r7,r7,r19
    663c:	198d883a 	add	r6,r3,r6
    6640:	10ffffcc 	andi	r3,r2,65535
    6644:	30c7c83a 	sub	r3,r6,r3
    6648:	280ad43a 	srli	r5,r5,16
    664c:	21c9883a 	add	r4,r4,r7
    6650:	180dd43a 	srai	r6,r3,16
    6654:	20bfffcc 	andi	r2,r4,65535
    6658:	288bc83a 	sub	r5,r5,r2
    665c:	298b883a 	add	r5,r5,r6
    6660:	280e943a 	slli	r7,r5,16
    6664:	18ffffcc 	andi	r3,r3,65535
    6668:	2008d43a 	srli	r4,r4,16
    666c:	38ceb03a 	or	r7,r7,r3
    6670:	49c00015 	stw	r7,0(r9)
    6674:	280dd43a 	srai	r6,r5,16
    6678:	4a400104 	addi	r9,r9,4
    667c:	a23fe52e 	bgeu	r20,r8,6614 <__alt_mem_Flash_flash_data+0xf4006614>
    6680:	b0800017 	ldw	r2,0(r22)
    6684:	10000b1e 	bne	r2,zero,66b4 <quorem+0x120>
    6688:	b0bfff04 	addi	r2,r22,-4
    668c:	a880082e 	bgeu	r21,r2,66b0 <quorem+0x11c>
    6690:	b0ffff17 	ldw	r3,-4(r22)
    6694:	18000326 	beq	r3,zero,66a4 <quorem+0x110>
    6698:	00000506 	br	66b0 <quorem+0x11c>
    669c:	10c00017 	ldw	r3,0(r2)
    66a0:	1800031e 	bne	r3,zero,66b0 <quorem+0x11c>
    66a4:	10bfff04 	addi	r2,r2,-4
    66a8:	94bfffc4 	addi	r18,r18,-1
    66ac:	a8bffb36 	bltu	r21,r2,669c <__alt_mem_Flash_flash_data+0xf400669c>
    66b0:	84800415 	stw	r18,16(r16)
    66b4:	8009883a 	mov	r4,r16
    66b8:	b80b883a 	mov	r5,r23
    66bc:	000a5dc0 	call	a5dc <__mcmp>
    66c0:	10002616 	blt	r2,zero,675c <quorem+0x1c8>
    66c4:	9cc00044 	addi	r19,r19,1
    66c8:	a80d883a 	mov	r6,r21
    66cc:	000b883a 	mov	r5,zero
    66d0:	31000017 	ldw	r4,0(r6)
    66d4:	88800017 	ldw	r2,0(r17)
    66d8:	31800104 	addi	r6,r6,4
    66dc:	20ffffcc 	andi	r3,r4,65535
    66e0:	194b883a 	add	r5,r3,r5
    66e4:	10ffffcc 	andi	r3,r2,65535
    66e8:	28c7c83a 	sub	r3,r5,r3
    66ec:	1004d43a 	srli	r2,r2,16
    66f0:	2008d43a 	srli	r4,r4,16
    66f4:	180bd43a 	srai	r5,r3,16
    66f8:	18ffffcc 	andi	r3,r3,65535
    66fc:	2089c83a 	sub	r4,r4,r2
    6700:	2149883a 	add	r4,r4,r5
    6704:	2004943a 	slli	r2,r4,16
    6708:	8c400104 	addi	r17,r17,4
    670c:	200bd43a 	srai	r5,r4,16
    6710:	10c6b03a 	or	r3,r2,r3
    6714:	30ffff15 	stw	r3,-4(r6)
    6718:	a47fed2e 	bgeu	r20,r17,66d0 <__alt_mem_Flash_flash_data+0xf40066d0>
    671c:	9485883a 	add	r2,r18,r18
    6720:	1085883a 	add	r2,r2,r2
    6724:	a887883a 	add	r3,r21,r2
    6728:	18800017 	ldw	r2,0(r3)
    672c:	10000b1e 	bne	r2,zero,675c <quorem+0x1c8>
    6730:	18bfff04 	addi	r2,r3,-4
    6734:	a880082e 	bgeu	r21,r2,6758 <quorem+0x1c4>
    6738:	18ffff17 	ldw	r3,-4(r3)
    673c:	18000326 	beq	r3,zero,674c <quorem+0x1b8>
    6740:	00000506 	br	6758 <quorem+0x1c4>
    6744:	10c00017 	ldw	r3,0(r2)
    6748:	1800031e 	bne	r3,zero,6758 <quorem+0x1c4>
    674c:	10bfff04 	addi	r2,r2,-4
    6750:	94bfffc4 	addi	r18,r18,-1
    6754:	a8bffb36 	bltu	r21,r2,6744 <__alt_mem_Flash_flash_data+0xf4006744>
    6758:	84800415 	stw	r18,16(r16)
    675c:	9805883a 	mov	r2,r19
    6760:	dfc00817 	ldw	ra,32(sp)
    6764:	ddc00717 	ldw	r23,28(sp)
    6768:	dd800617 	ldw	r22,24(sp)
    676c:	dd400517 	ldw	r21,20(sp)
    6770:	dd000417 	ldw	r20,16(sp)
    6774:	dcc00317 	ldw	r19,12(sp)
    6778:	dc800217 	ldw	r18,8(sp)
    677c:	dc400117 	ldw	r17,4(sp)
    6780:	dc000017 	ldw	r16,0(sp)
    6784:	dec00904 	addi	sp,sp,36
    6788:	f800283a 	ret
    678c:	0005883a 	mov	r2,zero
    6790:	003ff306 	br	6760 <__alt_mem_Flash_flash_data+0xf4006760>

00006794 <_dtoa_r>:
    6794:	20801017 	ldw	r2,64(r4)
    6798:	deffde04 	addi	sp,sp,-136
    679c:	dd401d15 	stw	r21,116(sp)
    67a0:	dcc01b15 	stw	r19,108(sp)
    67a4:	dc801a15 	stw	r18,104(sp)
    67a8:	dc401915 	stw	r17,100(sp)
    67ac:	dc001815 	stw	r16,96(sp)
    67b0:	dfc02115 	stw	ra,132(sp)
    67b4:	df002015 	stw	fp,128(sp)
    67b8:	ddc01f15 	stw	r23,124(sp)
    67bc:	dd801e15 	stw	r22,120(sp)
    67c0:	dd001c15 	stw	r20,112(sp)
    67c4:	d9c00315 	stw	r7,12(sp)
    67c8:	2021883a 	mov	r16,r4
    67cc:	302b883a 	mov	r21,r6
    67d0:	2825883a 	mov	r18,r5
    67d4:	dc402417 	ldw	r17,144(sp)
    67d8:	3027883a 	mov	r19,r6
    67dc:	10000826 	beq	r2,zero,6800 <_dtoa_r+0x6c>
    67e0:	21801117 	ldw	r6,68(r4)
    67e4:	00c00044 	movi	r3,1
    67e8:	100b883a 	mov	r5,r2
    67ec:	1986983a 	sll	r3,r3,r6
    67f0:	11800115 	stw	r6,4(r2)
    67f4:	10c00215 	stw	r3,8(r2)
    67f8:	0009db00 	call	9db0 <_Bfree>
    67fc:	80001015 	stw	zero,64(r16)
    6800:	a8002d16 	blt	r21,zero,68b8 <_dtoa_r+0x124>
    6804:	88000015 	stw	zero,0(r17)
    6808:	a8dffc2c 	andhi	r3,r21,32752
    680c:	009ffc34 	movhi	r2,32752
    6810:	18801b26 	beq	r3,r2,6880 <_dtoa_r+0xec>
    6814:	9009883a 	mov	r4,r18
    6818:	980b883a 	mov	r5,r19
    681c:	000d883a 	mov	r6,zero
    6820:	000f883a 	mov	r7,zero
    6824:	00101b80 	call	101b8 <__eqdf2>
    6828:	10002a1e 	bne	r2,zero,68d4 <_dtoa_r+0x140>
    682c:	d8c02317 	ldw	r3,140(sp)
    6830:	d9002517 	ldw	r4,148(sp)
    6834:	00800044 	movi	r2,1
    6838:	18800015 	stw	r2,0(r3)
    683c:	2001a226 	beq	r4,zero,6ec8 <_dtoa_r+0x734>
    6840:	008000b4 	movhi	r2,2
    6844:	10bc2444 	addi	r2,r2,-3951
    6848:	20800015 	stw	r2,0(r4)
    684c:	10bfffc4 	addi	r2,r2,-1
    6850:	dfc02117 	ldw	ra,132(sp)
    6854:	df002017 	ldw	fp,128(sp)
    6858:	ddc01f17 	ldw	r23,124(sp)
    685c:	dd801e17 	ldw	r22,120(sp)
    6860:	dd401d17 	ldw	r21,116(sp)
    6864:	dd001c17 	ldw	r20,112(sp)
    6868:	dcc01b17 	ldw	r19,108(sp)
    686c:	dc801a17 	ldw	r18,104(sp)
    6870:	dc401917 	ldw	r17,100(sp)
    6874:	dc001817 	ldw	r16,96(sp)
    6878:	dec02204 	addi	sp,sp,136
    687c:	f800283a 	ret
    6880:	d8c02317 	ldw	r3,140(sp)
    6884:	0089c3c4 	movi	r2,9999
    6888:	18800015 	stw	r2,0(r3)
    688c:	90017c26 	beq	r18,zero,6e80 <_dtoa_r+0x6ec>
    6890:	008000b4 	movhi	r2,2
    6894:	10bc3804 	addi	r2,r2,-3872
    6898:	d9002517 	ldw	r4,148(sp)
    689c:	203fec26 	beq	r4,zero,6850 <__alt_mem_Flash_flash_data+0xf4006850>
    68a0:	10c000c7 	ldb	r3,3(r2)
    68a4:	18017d1e 	bne	r3,zero,6e9c <_dtoa_r+0x708>
    68a8:	10c000c4 	addi	r3,r2,3
    68ac:	d9802517 	ldw	r6,148(sp)
    68b0:	30c00015 	stw	r3,0(r6)
    68b4:	003fe606 	br	6850 <__alt_mem_Flash_flash_data+0xf4006850>
    68b8:	04e00034 	movhi	r19,32768
    68bc:	9cffffc4 	addi	r19,r19,-1
    68c0:	00800044 	movi	r2,1
    68c4:	ace6703a 	and	r19,r21,r19
    68c8:	88800015 	stw	r2,0(r17)
    68cc:	982b883a 	mov	r21,r19
    68d0:	003fcd06 	br	6808 <__alt_mem_Flash_flash_data+0xf4006808>
    68d4:	d8800204 	addi	r2,sp,8
    68d8:	a822d53a 	srli	r17,r21,20
    68dc:	d8800015 	stw	r2,0(sp)
    68e0:	8009883a 	mov	r4,r16
    68e4:	900b883a 	mov	r5,r18
    68e8:	980d883a 	mov	r6,r19
    68ec:	d9c00104 	addi	r7,sp,4
    68f0:	000a9500 	call	a950 <__d2b>
    68f4:	1039883a 	mov	fp,r2
    68f8:	88016a1e 	bne	r17,zero,6ea4 <_dtoa_r+0x710>
    68fc:	dd000217 	ldw	r20,8(sp)
    6900:	dc400117 	ldw	r17,4(sp)
    6904:	00befbc4 	movi	r2,-1041
    6908:	a463883a 	add	r17,r20,r17
    690c:	8882ea16 	blt	r17,r2,74b8 <_dtoa_r+0xd24>
    6910:	00bf0384 	movi	r2,-1010
    6914:	1445c83a 	sub	r2,r2,r17
    6918:	89010484 	addi	r4,r17,1042
    691c:	a8aa983a 	sll	r21,r21,r2
    6920:	9108d83a 	srl	r4,r18,r4
    6924:	a908b03a 	or	r4,r21,r4
    6928:	00115480 	call	11548 <__floatunsidf>
    692c:	017f8434 	movhi	r5,65040
    6930:	01800044 	movi	r6,1
    6934:	1009883a 	mov	r4,r2
    6938:	194b883a 	add	r5,r3,r5
    693c:	8c7fffc4 	addi	r17,r17,-1
    6940:	d9800f15 	stw	r6,60(sp)
    6944:	000d883a 	mov	r6,zero
    6948:	01cffe34 	movhi	r7,16376
    694c:	0010b200 	call	10b20 <__subdf3>
    6950:	0198dbf4 	movhi	r6,25455
    6954:	01cff4f4 	movhi	r7,16339
    6958:	1009883a 	mov	r4,r2
    695c:	180b883a 	mov	r5,r3
    6960:	3190d844 	addi	r6,r6,17249
    6964:	39e1e9c4 	addi	r7,r7,-30809
    6968:	00103fc0 	call	103fc <__muldf3>
    696c:	01a2d874 	movhi	r6,35681
    6970:	01cff1f4 	movhi	r7,16327
    6974:	180b883a 	mov	r5,r3
    6978:	31b22cc4 	addi	r6,r6,-14157
    697c:	39e28a04 	addi	r7,r7,-30168
    6980:	1009883a 	mov	r4,r2
    6984:	000f0500 	call	f050 <__adddf3>
    6988:	8809883a 	mov	r4,r17
    698c:	102d883a 	mov	r22,r2
    6990:	182b883a 	mov	r21,r3
    6994:	00114780 	call	11478 <__floatsidf>
    6998:	019427f4 	movhi	r6,20639
    699c:	01cff4f4 	movhi	r7,16339
    69a0:	1009883a 	mov	r4,r2
    69a4:	180b883a 	mov	r5,r3
    69a8:	319e7ec4 	addi	r6,r6,31227
    69ac:	39d104c4 	addi	r7,r7,17427
    69b0:	00103fc0 	call	103fc <__muldf3>
    69b4:	b009883a 	mov	r4,r22
    69b8:	a80b883a 	mov	r5,r21
    69bc:	100d883a 	mov	r6,r2
    69c0:	180f883a 	mov	r7,r3
    69c4:	000f0500 	call	f050 <__adddf3>
    69c8:	1009883a 	mov	r4,r2
    69cc:	180b883a 	mov	r5,r3
    69d0:	102d883a 	mov	r22,r2
    69d4:	182b883a 	mov	r21,r3
    69d8:	00113f00 	call	113f0 <__fixdfsi>
    69dc:	b009883a 	mov	r4,r22
    69e0:	a80b883a 	mov	r5,r21
    69e4:	000d883a 	mov	r6,zero
    69e8:	000f883a 	mov	r7,zero
    69ec:	d8800515 	stw	r2,20(sp)
    69f0:	001031c0 	call	1031c <__ledf2>
    69f4:	10023116 	blt	r2,zero,72bc <_dtoa_r+0xb28>
    69f8:	d8c00517 	ldw	r3,20(sp)
    69fc:	00800584 	movi	r2,22
    6a00:	10c21f36 	bltu	r2,r3,7280 <_dtoa_r+0xaec>
    6a04:	180490fa 	slli	r2,r3,3
    6a08:	00c000b4 	movhi	r3,2
    6a0c:	18fc5404 	addi	r3,r3,-3760
    6a10:	1885883a 	add	r2,r3,r2
    6a14:	11000017 	ldw	r4,0(r2)
    6a18:	11400117 	ldw	r5,4(r2)
    6a1c:	900d883a 	mov	r6,r18
    6a20:	980f883a 	mov	r7,r19
    6a24:	001023c0 	call	1023c <__gedf2>
    6a28:	0082a70e 	bge	zero,r2,74c8 <_dtoa_r+0xd34>
    6a2c:	d9000517 	ldw	r4,20(sp)
    6a30:	d8000d15 	stw	zero,52(sp)
    6a34:	213fffc4 	addi	r4,r4,-1
    6a38:	d9000515 	stw	r4,20(sp)
    6a3c:	a463c83a 	sub	r17,r20,r17
    6a40:	8dbfffc4 	addi	r22,r17,-1
    6a44:	b0021916 	blt	r22,zero,72ac <_dtoa_r+0xb18>
    6a48:	d8000815 	stw	zero,32(sp)
    6a4c:	d8800517 	ldw	r2,20(sp)
    6a50:	10020e16 	blt	r2,zero,728c <_dtoa_r+0xaf8>
    6a54:	b0ad883a 	add	r22,r22,r2
    6a58:	d8800a15 	stw	r2,40(sp)
    6a5c:	d8000915 	stw	zero,36(sp)
    6a60:	d8c00317 	ldw	r3,12(sp)
    6a64:	00800244 	movi	r2,9
    6a68:	10c11a36 	bltu	r2,r3,6ed4 <_dtoa_r+0x740>
    6a6c:	00800144 	movi	r2,5
    6a70:	10c4fc0e 	bge	r2,r3,7e64 <_dtoa_r+0x16d0>
    6a74:	18ffff04 	addi	r3,r3,-4
    6a78:	d8c00315 	stw	r3,12(sp)
    6a7c:	0029883a 	mov	r20,zero
    6a80:	d9800317 	ldw	r6,12(sp)
    6a84:	008000c4 	movi	r2,3
    6a88:	3083bd26 	beq	r6,r2,7980 <_dtoa_r+0x11ec>
    6a8c:	1183670e 	bge	r2,r6,782c <_dtoa_r+0x1098>
    6a90:	d8c00317 	ldw	r3,12(sp)
    6a94:	00800104 	movi	r2,4
    6a98:	1882e726 	beq	r3,r2,7638 <_dtoa_r+0xea4>
    6a9c:	00800144 	movi	r2,5
    6aa0:	1884f21e 	bne	r3,r2,7e6c <_dtoa_r+0x16d8>
    6aa4:	00800044 	movi	r2,1
    6aa8:	d8800b15 	stw	r2,44(sp)
    6aac:	d8c02217 	ldw	r3,136(sp)
    6ab0:	d9000517 	ldw	r4,20(sp)
    6ab4:	1907883a 	add	r3,r3,r4
    6ab8:	19800044 	addi	r6,r3,1
    6abc:	d8c00c15 	stw	r3,48(sp)
    6ac0:	d9800615 	stw	r6,24(sp)
    6ac4:	0183c30e 	bge	zero,r6,79d4 <_dtoa_r+0x1240>
    6ac8:	d9800617 	ldw	r6,24(sp)
    6acc:	3023883a 	mov	r17,r6
    6ad0:	80001115 	stw	zero,68(r16)
    6ad4:	008005c4 	movi	r2,23
    6ad8:	1184f62e 	bgeu	r2,r6,7eb4 <_dtoa_r+0x1720>
    6adc:	00c00044 	movi	r3,1
    6ae0:	00800104 	movi	r2,4
    6ae4:	1085883a 	add	r2,r2,r2
    6ae8:	11000504 	addi	r4,r2,20
    6aec:	180b883a 	mov	r5,r3
    6af0:	18c00044 	addi	r3,r3,1
    6af4:	313ffb2e 	bgeu	r6,r4,6ae4 <__alt_mem_Flash_flash_data+0xf4006ae4>
    6af8:	81401115 	stw	r5,68(r16)
    6afc:	8009883a 	mov	r4,r16
    6b00:	0009d080 	call	9d08 <_Balloc>
    6b04:	d8800715 	stw	r2,28(sp)
    6b08:	80801015 	stw	r2,64(r16)
    6b0c:	00800384 	movi	r2,14
    6b10:	1440fd36 	bltu	r2,r17,6f08 <_dtoa_r+0x774>
    6b14:	a000fc26 	beq	r20,zero,6f08 <_dtoa_r+0x774>
    6b18:	d8800517 	ldw	r2,20(sp)
    6b1c:	0083b90e 	bge	zero,r2,7a04 <_dtoa_r+0x1270>
    6b20:	d8c00517 	ldw	r3,20(sp)
    6b24:	108003cc 	andi	r2,r2,15
    6b28:	100490fa 	slli	r2,r2,3
    6b2c:	182fd13a 	srai	r23,r3,4
    6b30:	00c000b4 	movhi	r3,2
    6b34:	18fc5404 	addi	r3,r3,-3760
    6b38:	1885883a 	add	r2,r3,r2
    6b3c:	b8c0040c 	andi	r3,r23,16
    6b40:	12c00017 	ldw	r11,0(r2)
    6b44:	12800117 	ldw	r10,4(r2)
    6b48:	18039726 	beq	r3,zero,79a8 <_dtoa_r+0x1214>
    6b4c:	008000b4 	movhi	r2,2
    6b50:	10bc4a04 	addi	r2,r2,-3800
    6b54:	11800817 	ldw	r6,32(r2)
    6b58:	11c00917 	ldw	r7,36(r2)
    6b5c:	9009883a 	mov	r4,r18
    6b60:	980b883a 	mov	r5,r19
    6b64:	da801615 	stw	r10,88(sp)
    6b68:	dac01515 	stw	r11,84(sp)
    6b6c:	000f8ec0 	call	f8ec <__divdf3>
    6b70:	da801617 	ldw	r10,88(sp)
    6b74:	dac01517 	ldw	r11,84(sp)
    6b78:	bdc003cc 	andi	r23,r23,15
    6b7c:	044000c4 	movi	r17,3
    6b80:	d8800e15 	stw	r2,56(sp)
    6b84:	182b883a 	mov	r21,r3
    6b88:	b8001126 	beq	r23,zero,6bd0 <_dtoa_r+0x43c>
    6b8c:	050000b4 	movhi	r20,2
    6b90:	a53c4a04 	addi	r20,r20,-3800
    6b94:	5805883a 	mov	r2,r11
    6b98:	5007883a 	mov	r3,r10
    6b9c:	b980004c 	andi	r6,r23,1
    6ba0:	1009883a 	mov	r4,r2
    6ba4:	b82fd07a 	srai	r23,r23,1
    6ba8:	180b883a 	mov	r5,r3
    6bac:	30000426 	beq	r6,zero,6bc0 <_dtoa_r+0x42c>
    6bb0:	a1800017 	ldw	r6,0(r20)
    6bb4:	a1c00117 	ldw	r7,4(r20)
    6bb8:	8c400044 	addi	r17,r17,1
    6bbc:	00103fc0 	call	103fc <__muldf3>
    6bc0:	a5000204 	addi	r20,r20,8
    6bc4:	b83ff51e 	bne	r23,zero,6b9c <__alt_mem_Flash_flash_data+0xf4006b9c>
    6bc8:	1017883a 	mov	r11,r2
    6bcc:	1815883a 	mov	r10,r3
    6bd0:	d9000e17 	ldw	r4,56(sp)
    6bd4:	a80b883a 	mov	r5,r21
    6bd8:	580d883a 	mov	r6,r11
    6bdc:	500f883a 	mov	r7,r10
    6be0:	000f8ec0 	call	f8ec <__divdf3>
    6be4:	1029883a 	mov	r20,r2
    6be8:	182b883a 	mov	r21,r3
    6bec:	d9800d17 	ldw	r6,52(sp)
    6bf0:	30000626 	beq	r6,zero,6c0c <_dtoa_r+0x478>
    6bf4:	a009883a 	mov	r4,r20
    6bf8:	a80b883a 	mov	r5,r21
    6bfc:	000d883a 	mov	r6,zero
    6c00:	01cffc34 	movhi	r7,16368
    6c04:	001031c0 	call	1031c <__ledf2>
    6c08:	10043216 	blt	r2,zero,7cd4 <_dtoa_r+0x1540>
    6c0c:	8809883a 	mov	r4,r17
    6c10:	00114780 	call	11478 <__floatsidf>
    6c14:	1009883a 	mov	r4,r2
    6c18:	180b883a 	mov	r5,r3
    6c1c:	a00d883a 	mov	r6,r20
    6c20:	a80f883a 	mov	r7,r21
    6c24:	00103fc0 	call	103fc <__muldf3>
    6c28:	000d883a 	mov	r6,zero
    6c2c:	1009883a 	mov	r4,r2
    6c30:	180b883a 	mov	r5,r3
    6c34:	01d00734 	movhi	r7,16412
    6c38:	000f0500 	call	f050 <__adddf3>
    6c3c:	1023883a 	mov	r17,r2
    6c40:	d9800617 	ldw	r6,24(sp)
    6c44:	00bf3034 	movhi	r2,64704
    6c48:	1885883a 	add	r2,r3,r2
    6c4c:	d8800e15 	stw	r2,56(sp)
    6c50:	30032e26 	beq	r6,zero,790c <_dtoa_r+0x1178>
    6c54:	d8c00517 	ldw	r3,20(sp)
    6c58:	da800617 	ldw	r10,24(sp)
    6c5c:	d8c01215 	stw	r3,72(sp)
    6c60:	d9000b17 	ldw	r4,44(sp)
    6c64:	2003b026 	beq	r4,zero,7b28 <_dtoa_r+0x1394>
    6c68:	50bfffc4 	addi	r2,r10,-1
    6c6c:	100490fa 	slli	r2,r2,3
    6c70:	00c000b4 	movhi	r3,2
    6c74:	18fc5404 	addi	r3,r3,-3760
    6c78:	1885883a 	add	r2,r3,r2
    6c7c:	11800017 	ldw	r6,0(r2)
    6c80:	11c00117 	ldw	r7,4(r2)
    6c84:	d8800717 	ldw	r2,28(sp)
    6c88:	0009883a 	mov	r4,zero
    6c8c:	014ff834 	movhi	r5,16352
    6c90:	da801615 	stw	r10,88(sp)
    6c94:	15c00044 	addi	r23,r2,1
    6c98:	000f8ec0 	call	f8ec <__divdf3>
    6c9c:	d9c00e17 	ldw	r7,56(sp)
    6ca0:	880d883a 	mov	r6,r17
    6ca4:	1009883a 	mov	r4,r2
    6ca8:	180b883a 	mov	r5,r3
    6cac:	0010b200 	call	10b20 <__subdf3>
    6cb0:	a80b883a 	mov	r5,r21
    6cb4:	a009883a 	mov	r4,r20
    6cb8:	d8c01015 	stw	r3,64(sp)
    6cbc:	d8800e15 	stw	r2,56(sp)
    6cc0:	00113f00 	call	113f0 <__fixdfsi>
    6cc4:	1009883a 	mov	r4,r2
    6cc8:	d8801715 	stw	r2,92(sp)
    6ccc:	00114780 	call	11478 <__floatsidf>
    6cd0:	a009883a 	mov	r4,r20
    6cd4:	a80b883a 	mov	r5,r21
    6cd8:	100d883a 	mov	r6,r2
    6cdc:	180f883a 	mov	r7,r3
    6ce0:	0010b200 	call	10b20 <__subdf3>
    6ce4:	da001717 	ldw	r8,92(sp)
    6ce8:	1829883a 	mov	r20,r3
    6cec:	d8c00717 	ldw	r3,28(sp)
    6cf0:	d9000e17 	ldw	r4,56(sp)
    6cf4:	d9401017 	ldw	r5,64(sp)
    6cf8:	42000c04 	addi	r8,r8,48
    6cfc:	1023883a 	mov	r17,r2
    6d00:	1a000005 	stb	r8,0(r3)
    6d04:	880d883a 	mov	r6,r17
    6d08:	a00f883a 	mov	r7,r20
    6d0c:	402b883a 	mov	r21,r8
    6d10:	001023c0 	call	1023c <__gedf2>
    6d14:	00844516 	blt	zero,r2,7e2c <_dtoa_r+0x1698>
    6d18:	0009883a 	mov	r4,zero
    6d1c:	014ffc34 	movhi	r5,16368
    6d20:	880d883a 	mov	r6,r17
    6d24:	a00f883a 	mov	r7,r20
    6d28:	0010b200 	call	10b20 <__subdf3>
    6d2c:	d9000e17 	ldw	r4,56(sp)
    6d30:	d9401017 	ldw	r5,64(sp)
    6d34:	100d883a 	mov	r6,r2
    6d38:	180f883a 	mov	r7,r3
    6d3c:	001023c0 	call	1023c <__gedf2>
    6d40:	da801617 	ldw	r10,88(sp)
    6d44:	00843616 	blt	zero,r2,7e20 <_dtoa_r+0x168c>
    6d48:	00800044 	movi	r2,1
    6d4c:	12806e0e 	bge	r2,r10,6f08 <_dtoa_r+0x774>
    6d50:	d9000717 	ldw	r4,28(sp)
    6d54:	dd801315 	stw	r22,76(sp)
    6d58:	dc001115 	stw	r16,68(sp)
    6d5c:	2295883a 	add	r10,r4,r10
    6d60:	dcc01415 	stw	r19,80(sp)
    6d64:	502d883a 	mov	r22,r10
    6d68:	dcc01017 	ldw	r19,64(sp)
    6d6c:	b821883a 	mov	r16,r23
    6d70:	dc801015 	stw	r18,64(sp)
    6d74:	dc800e17 	ldw	r18,56(sp)
    6d78:	00000906 	br	6da0 <_dtoa_r+0x60c>
    6d7c:	0010b200 	call	10b20 <__subdf3>
    6d80:	1009883a 	mov	r4,r2
    6d84:	180b883a 	mov	r5,r3
    6d88:	900d883a 	mov	r6,r18
    6d8c:	980f883a 	mov	r7,r19
    6d90:	001031c0 	call	1031c <__ledf2>
    6d94:	10040e16 	blt	r2,zero,7dd0 <_dtoa_r+0x163c>
    6d98:	b821883a 	mov	r16,r23
    6d9c:	bd841026 	beq	r23,r22,7de0 <_dtoa_r+0x164c>
    6da0:	9009883a 	mov	r4,r18
    6da4:	980b883a 	mov	r5,r19
    6da8:	000d883a 	mov	r6,zero
    6dac:	01d00934 	movhi	r7,16420
    6db0:	00103fc0 	call	103fc <__muldf3>
    6db4:	000d883a 	mov	r6,zero
    6db8:	01d00934 	movhi	r7,16420
    6dbc:	8809883a 	mov	r4,r17
    6dc0:	a00b883a 	mov	r5,r20
    6dc4:	1025883a 	mov	r18,r2
    6dc8:	1827883a 	mov	r19,r3
    6dcc:	00103fc0 	call	103fc <__muldf3>
    6dd0:	180b883a 	mov	r5,r3
    6dd4:	1009883a 	mov	r4,r2
    6dd8:	1823883a 	mov	r17,r3
    6ddc:	1029883a 	mov	r20,r2
    6de0:	00113f00 	call	113f0 <__fixdfsi>
    6de4:	1009883a 	mov	r4,r2
    6de8:	102b883a 	mov	r21,r2
    6dec:	00114780 	call	11478 <__floatsidf>
    6df0:	a009883a 	mov	r4,r20
    6df4:	880b883a 	mov	r5,r17
    6df8:	100d883a 	mov	r6,r2
    6dfc:	180f883a 	mov	r7,r3
    6e00:	0010b200 	call	10b20 <__subdf3>
    6e04:	ad400c04 	addi	r21,r21,48
    6e08:	1009883a 	mov	r4,r2
    6e0c:	180b883a 	mov	r5,r3
    6e10:	900d883a 	mov	r6,r18
    6e14:	980f883a 	mov	r7,r19
    6e18:	85400005 	stb	r21,0(r16)
    6e1c:	1023883a 	mov	r17,r2
    6e20:	1829883a 	mov	r20,r3
    6e24:	001031c0 	call	1031c <__ledf2>
    6e28:	bdc00044 	addi	r23,r23,1
    6e2c:	0009883a 	mov	r4,zero
    6e30:	014ffc34 	movhi	r5,16368
    6e34:	880d883a 	mov	r6,r17
    6e38:	a00f883a 	mov	r7,r20
    6e3c:	103fcf0e 	bge	r2,zero,6d7c <__alt_mem_Flash_flash_data+0xf4006d7c>
    6e40:	d9801217 	ldw	r6,72(sp)
    6e44:	dc001117 	ldw	r16,68(sp)
    6e48:	d9800515 	stw	r6,20(sp)
    6e4c:	8009883a 	mov	r4,r16
    6e50:	e00b883a 	mov	r5,fp
    6e54:	0009db00 	call	9db0 <_Bfree>
    6e58:	d8c00517 	ldw	r3,20(sp)
    6e5c:	d9002317 	ldw	r4,140(sp)
    6e60:	d9802517 	ldw	r6,148(sp)
    6e64:	b8000005 	stb	zero,0(r23)
    6e68:	18800044 	addi	r2,r3,1
    6e6c:	20800015 	stw	r2,0(r4)
    6e70:	30027226 	beq	r6,zero,783c <_dtoa_r+0x10a8>
    6e74:	35c00015 	stw	r23,0(r6)
    6e78:	d8800717 	ldw	r2,28(sp)
    6e7c:	003e7406 	br	6850 <__alt_mem_Flash_flash_data+0xf4006850>
    6e80:	00800434 	movhi	r2,16
    6e84:	10bfffc4 	addi	r2,r2,-1
    6e88:	a8aa703a 	and	r21,r21,r2
    6e8c:	a83e801e 	bne	r21,zero,6890 <__alt_mem_Flash_flash_data+0xf4006890>
    6e90:	008000b4 	movhi	r2,2
    6e94:	10bc3504 	addi	r2,r2,-3884
    6e98:	003e7f06 	br	6898 <__alt_mem_Flash_flash_data+0xf4006898>
    6e9c:	10c00204 	addi	r3,r2,8
    6ea0:	003e8206 	br	68ac <__alt_mem_Flash_flash_data+0xf40068ac>
    6ea4:	01400434 	movhi	r5,16
    6ea8:	297fffc4 	addi	r5,r5,-1
    6eac:	994a703a 	and	r5,r19,r5
    6eb0:	9009883a 	mov	r4,r18
    6eb4:	8c7f0044 	addi	r17,r17,-1023
    6eb8:	294ffc34 	orhi	r5,r5,16368
    6ebc:	dd000217 	ldw	r20,8(sp)
    6ec0:	d8000f15 	stw	zero,60(sp)
    6ec4:	003e9f06 	br	6944 <__alt_mem_Flash_flash_data+0xf4006944>
    6ec8:	008000b4 	movhi	r2,2
    6ecc:	10bc2404 	addi	r2,r2,-3952
    6ed0:	003e5f06 	br	6850 <__alt_mem_Flash_flash_data+0xf4006850>
    6ed4:	80001115 	stw	zero,68(r16)
    6ed8:	8009883a 	mov	r4,r16
    6edc:	000b883a 	mov	r5,zero
    6ee0:	0009d080 	call	9d08 <_Balloc>
    6ee4:	01bfffc4 	movi	r6,-1
    6ee8:	d8800715 	stw	r2,28(sp)
    6eec:	80801015 	stw	r2,64(r16)
    6ef0:	00800044 	movi	r2,1
    6ef4:	d9800c15 	stw	r6,48(sp)
    6ef8:	d8800b15 	stw	r2,44(sp)
    6efc:	d9800615 	stw	r6,24(sp)
    6f00:	d8002215 	stw	zero,136(sp)
    6f04:	d8000315 	stw	zero,12(sp)
    6f08:	d8800117 	ldw	r2,4(sp)
    6f0c:	10008e16 	blt	r2,zero,7148 <_dtoa_r+0x9b4>
    6f10:	d9000517 	ldw	r4,20(sp)
    6f14:	00c00384 	movi	r3,14
    6f18:	19008b16 	blt	r3,r4,7148 <_dtoa_r+0x9b4>
    6f1c:	200490fa 	slli	r2,r4,3
    6f20:	00c000b4 	movhi	r3,2
    6f24:	d9802217 	ldw	r6,136(sp)
    6f28:	18fc5404 	addi	r3,r3,-3760
    6f2c:	1885883a 	add	r2,r3,r2
    6f30:	14400017 	ldw	r17,0(r2)
    6f34:	15000117 	ldw	r20,4(r2)
    6f38:	3001c716 	blt	r6,zero,7658 <_dtoa_r+0xec4>
    6f3c:	880d883a 	mov	r6,r17
    6f40:	a00f883a 	mov	r7,r20
    6f44:	9009883a 	mov	r4,r18
    6f48:	980b883a 	mov	r5,r19
    6f4c:	000f8ec0 	call	f8ec <__divdf3>
    6f50:	180b883a 	mov	r5,r3
    6f54:	1009883a 	mov	r4,r2
    6f58:	00113f00 	call	113f0 <__fixdfsi>
    6f5c:	1009883a 	mov	r4,r2
    6f60:	102d883a 	mov	r22,r2
    6f64:	00114780 	call	11478 <__floatsidf>
    6f68:	1009883a 	mov	r4,r2
    6f6c:	180b883a 	mov	r5,r3
    6f70:	880d883a 	mov	r6,r17
    6f74:	a00f883a 	mov	r7,r20
    6f78:	00103fc0 	call	103fc <__muldf3>
    6f7c:	9009883a 	mov	r4,r18
    6f80:	980b883a 	mov	r5,r19
    6f84:	100d883a 	mov	r6,r2
    6f88:	180f883a 	mov	r7,r3
    6f8c:	0010b200 	call	10b20 <__subdf3>
    6f90:	d9000717 	ldw	r4,28(sp)
    6f94:	d9800617 	ldw	r6,24(sp)
    6f98:	180b883a 	mov	r5,r3
    6f9c:	b0c00c04 	addi	r3,r22,48
    6fa0:	20c00005 	stb	r3,0(r4)
    6fa4:	25c00044 	addi	r23,r4,1
    6fa8:	01000044 	movi	r4,1
    6fac:	1011883a 	mov	r8,r2
    6fb0:	2807883a 	mov	r3,r5
    6fb4:	31003d26 	beq	r6,r4,70ac <_dtoa_r+0x918>
    6fb8:	000d883a 	mov	r6,zero
    6fbc:	01d00934 	movhi	r7,16420
    6fc0:	1009883a 	mov	r4,r2
    6fc4:	00103fc0 	call	103fc <__muldf3>
    6fc8:	1009883a 	mov	r4,r2
    6fcc:	180b883a 	mov	r5,r3
    6fd0:	000d883a 	mov	r6,zero
    6fd4:	000f883a 	mov	r7,zero
    6fd8:	1027883a 	mov	r19,r2
    6fdc:	182b883a 	mov	r21,r3
    6fe0:	00101b80 	call	101b8 <__eqdf2>
    6fe4:	103f9926 	beq	r2,zero,6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    6fe8:	d8c00617 	ldw	r3,24(sp)
    6fec:	d9000717 	ldw	r4,28(sp)
    6ff0:	b825883a 	mov	r18,r23
    6ff4:	18bfffc4 	addi	r2,r3,-1
    6ff8:	20ad883a 	add	r22,r4,r2
    6ffc:	dc000315 	stw	r16,12(sp)
    7000:	00000a06 	br	702c <_dtoa_r+0x898>
    7004:	00103fc0 	call	103fc <__muldf3>
    7008:	1009883a 	mov	r4,r2
    700c:	180b883a 	mov	r5,r3
    7010:	000d883a 	mov	r6,zero
    7014:	000f883a 	mov	r7,zero
    7018:	1027883a 	mov	r19,r2
    701c:	182b883a 	mov	r21,r3
    7020:	b825883a 	mov	r18,r23
    7024:	00101b80 	call	101b8 <__eqdf2>
    7028:	10022626 	beq	r2,zero,78c4 <_dtoa_r+0x1130>
    702c:	880d883a 	mov	r6,r17
    7030:	a00f883a 	mov	r7,r20
    7034:	9809883a 	mov	r4,r19
    7038:	a80b883a 	mov	r5,r21
    703c:	000f8ec0 	call	f8ec <__divdf3>
    7040:	180b883a 	mov	r5,r3
    7044:	1009883a 	mov	r4,r2
    7048:	00113f00 	call	113f0 <__fixdfsi>
    704c:	1009883a 	mov	r4,r2
    7050:	1021883a 	mov	r16,r2
    7054:	00114780 	call	11478 <__floatsidf>
    7058:	1009883a 	mov	r4,r2
    705c:	180b883a 	mov	r5,r3
    7060:	880d883a 	mov	r6,r17
    7064:	a00f883a 	mov	r7,r20
    7068:	00103fc0 	call	103fc <__muldf3>
    706c:	9809883a 	mov	r4,r19
    7070:	a80b883a 	mov	r5,r21
    7074:	100d883a 	mov	r6,r2
    7078:	180f883a 	mov	r7,r3
    707c:	0010b200 	call	10b20 <__subdf3>
    7080:	82000c04 	addi	r8,r16,48
    7084:	92000005 	stb	r8,0(r18)
    7088:	1009883a 	mov	r4,r2
    708c:	180b883a 	mov	r5,r3
    7090:	000d883a 	mov	r6,zero
    7094:	01d00934 	movhi	r7,16420
    7098:	1011883a 	mov	r8,r2
    709c:	bdc00044 	addi	r23,r23,1
    70a0:	95bfd81e 	bne	r18,r22,7004 <__alt_mem_Flash_flash_data+0xf4007004>
    70a4:	802d883a 	mov	r22,r16
    70a8:	dc000317 	ldw	r16,12(sp)
    70ac:	4009883a 	mov	r4,r8
    70b0:	180b883a 	mov	r5,r3
    70b4:	400d883a 	mov	r6,r8
    70b8:	180f883a 	mov	r7,r3
    70bc:	000f0500 	call	f050 <__adddf3>
    70c0:	8809883a 	mov	r4,r17
    70c4:	a00b883a 	mov	r5,r20
    70c8:	100d883a 	mov	r6,r2
    70cc:	180f883a 	mov	r7,r3
    70d0:	1027883a 	mov	r19,r2
    70d4:	1825883a 	mov	r18,r3
    70d8:	001031c0 	call	1031c <__ledf2>
    70dc:	10000816 	blt	r2,zero,7100 <_dtoa_r+0x96c>
    70e0:	8809883a 	mov	r4,r17
    70e4:	a00b883a 	mov	r5,r20
    70e8:	980d883a 	mov	r6,r19
    70ec:	900f883a 	mov	r7,r18
    70f0:	00101b80 	call	101b8 <__eqdf2>
    70f4:	103f551e 	bne	r2,zero,6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    70f8:	b580004c 	andi	r22,r22,1
    70fc:	b03f5326 	beq	r22,zero,6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7100:	bd7fffc3 	ldbu	r21,-1(r23)
    7104:	b8bfffc4 	addi	r2,r23,-1
    7108:	1007883a 	mov	r3,r2
    710c:	01400e44 	movi	r5,57
    7110:	d9800717 	ldw	r6,28(sp)
    7114:	00000506 	br	712c <_dtoa_r+0x998>
    7118:	18ffffc4 	addi	r3,r3,-1
    711c:	30825e26 	beq	r6,r2,7a98 <_dtoa_r+0x1304>
    7120:	1d400003 	ldbu	r21,0(r3)
    7124:	102f883a 	mov	r23,r2
    7128:	10bfffc4 	addi	r2,r2,-1
    712c:	a9003fcc 	andi	r4,r21,255
    7130:	2100201c 	xori	r4,r4,128
    7134:	213fe004 	addi	r4,r4,-128
    7138:	217ff726 	beq	r4,r5,7118 <__alt_mem_Flash_flash_data+0xf4007118>
    713c:	aa000044 	addi	r8,r21,1
    7140:	12000005 	stb	r8,0(r2)
    7144:	003f4106 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7148:	d8c00b17 	ldw	r3,44(sp)
    714c:	18006726 	beq	r3,zero,72ec <_dtoa_r+0xb58>
    7150:	d9000317 	ldw	r4,12(sp)
    7154:	00c00044 	movi	r3,1
    7158:	19016a0e 	bge	r3,r4,7704 <_dtoa_r+0xf70>
    715c:	d8800617 	ldw	r2,24(sp)
    7160:	d8c00917 	ldw	r3,36(sp)
    7164:	157fffc4 	addi	r21,r2,-1
    7168:	1d420716 	blt	r3,r21,7988 <_dtoa_r+0x11f4>
    716c:	1d6bc83a 	sub	r21,r3,r21
    7170:	d8800617 	ldw	r2,24(sp)
    7174:	1002c716 	blt	r2,zero,7c94 <_dtoa_r+0x1500>
    7178:	dd000817 	ldw	r20,32(sp)
    717c:	d8800617 	ldw	r2,24(sp)
    7180:	d9800817 	ldw	r6,32(sp)
    7184:	8009883a 	mov	r4,r16
    7188:	01400044 	movi	r5,1
    718c:	308d883a 	add	r6,r6,r2
    7190:	d9800815 	stw	r6,32(sp)
    7194:	b0ad883a 	add	r22,r22,r2
    7198:	000a1140 	call	a114 <__i2b>
    719c:	1023883a 	mov	r17,r2
    71a0:	a0000826 	beq	r20,zero,71c4 <_dtoa_r+0xa30>
    71a4:	0580070e 	bge	zero,r22,71c4 <_dtoa_r+0xa30>
    71a8:	b005883a 	mov	r2,r22
    71ac:	a5812016 	blt	r20,r22,7630 <_dtoa_r+0xe9c>
    71b0:	d8c00817 	ldw	r3,32(sp)
    71b4:	a0a9c83a 	sub	r20,r20,r2
    71b8:	b0adc83a 	sub	r22,r22,r2
    71bc:	1887c83a 	sub	r3,r3,r2
    71c0:	d8c00815 	stw	r3,32(sp)
    71c4:	d9000917 	ldw	r4,36(sp)
    71c8:	0100140e 	bge	zero,r4,721c <_dtoa_r+0xa88>
    71cc:	d9800b17 	ldw	r6,44(sp)
    71d0:	3001e526 	beq	r6,zero,7968 <_dtoa_r+0x11d4>
    71d4:	05400e0e 	bge	zero,r21,7210 <_dtoa_r+0xa7c>
    71d8:	880b883a 	mov	r5,r17
    71dc:	8009883a 	mov	r4,r16
    71e0:	a80d883a 	mov	r6,r21
    71e4:	000a34c0 	call	a34c <__pow5mult>
    71e8:	e00d883a 	mov	r6,fp
    71ec:	8009883a 	mov	r4,r16
    71f0:	100b883a 	mov	r5,r2
    71f4:	1023883a 	mov	r17,r2
    71f8:	000a1500 	call	a150 <__multiply>
    71fc:	102f883a 	mov	r23,r2
    7200:	e00b883a 	mov	r5,fp
    7204:	8009883a 	mov	r4,r16
    7208:	0009db00 	call	9db0 <_Bfree>
    720c:	b839883a 	mov	fp,r23
    7210:	d8800917 	ldw	r2,36(sp)
    7214:	154dc83a 	sub	r6,r2,r21
    7218:	3001281e 	bne	r6,zero,76bc <_dtoa_r+0xf28>
    721c:	05c00044 	movi	r23,1
    7220:	8009883a 	mov	r4,r16
    7224:	b80b883a 	mov	r5,r23
    7228:	000a1140 	call	a114 <__i2b>
    722c:	d8c00a17 	ldw	r3,40(sp)
    7230:	102b883a 	mov	r21,r2
    7234:	00c0310e 	bge	zero,r3,72fc <_dtoa_r+0xb68>
    7238:	8009883a 	mov	r4,r16
    723c:	100b883a 	mov	r5,r2
    7240:	180d883a 	mov	r6,r3
    7244:	000a34c0 	call	a34c <__pow5mult>
    7248:	d9000317 	ldw	r4,12(sp)
    724c:	102b883a 	mov	r21,r2
    7250:	b9011f0e 	bge	r23,r4,76d0 <_dtoa_r+0xf3c>
    7254:	0027883a 	mov	r19,zero
    7258:	a8800417 	ldw	r2,16(r21)
    725c:	10800104 	addi	r2,r2,4
    7260:	1085883a 	add	r2,r2,r2
    7264:	1085883a 	add	r2,r2,r2
    7268:	a885883a 	add	r2,r21,r2
    726c:	11000017 	ldw	r4,0(r2)
    7270:	0009ffc0 	call	9ffc <__hi0bits>
    7274:	00c00804 	movi	r3,32
    7278:	1885c83a 	sub	r2,r3,r2
    727c:	00002506 	br	7314 <_dtoa_r+0xb80>
    7280:	01800044 	movi	r6,1
    7284:	d9800d15 	stw	r6,52(sp)
    7288:	003dec06 	br	6a3c <__alt_mem_Flash_flash_data+0xf4006a3c>
    728c:	d8c00817 	ldw	r3,32(sp)
    7290:	d9000517 	ldw	r4,20(sp)
    7294:	d8000a15 	stw	zero,40(sp)
    7298:	1907c83a 	sub	r3,r3,r4
    729c:	010dc83a 	sub	r6,zero,r4
    72a0:	d8c00815 	stw	r3,32(sp)
    72a4:	d9800915 	stw	r6,36(sp)
    72a8:	003ded06 	br	6a60 <__alt_mem_Flash_flash_data+0xf4006a60>
    72ac:	05adc83a 	sub	r22,zero,r22
    72b0:	dd800815 	stw	r22,32(sp)
    72b4:	002d883a 	mov	r22,zero
    72b8:	003de406 	br	6a4c <__alt_mem_Flash_flash_data+0xf4006a4c>
    72bc:	d9000517 	ldw	r4,20(sp)
    72c0:	00114780 	call	11478 <__floatsidf>
    72c4:	1009883a 	mov	r4,r2
    72c8:	180b883a 	mov	r5,r3
    72cc:	b00d883a 	mov	r6,r22
    72d0:	a80f883a 	mov	r7,r21
    72d4:	00101b80 	call	101b8 <__eqdf2>
    72d8:	103dc726 	beq	r2,zero,69f8 <__alt_mem_Flash_flash_data+0xf40069f8>
    72dc:	d8800517 	ldw	r2,20(sp)
    72e0:	10bfffc4 	addi	r2,r2,-1
    72e4:	d8800515 	stw	r2,20(sp)
    72e8:	003dc306 	br	69f8 <__alt_mem_Flash_flash_data+0xf40069f8>
    72ec:	dd400917 	ldw	r21,36(sp)
    72f0:	dd000817 	ldw	r20,32(sp)
    72f4:	0023883a 	mov	r17,zero
    72f8:	003fa906 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    72fc:	d9800317 	ldw	r6,12(sp)
    7300:	b981670e 	bge	r23,r6,78a0 <_dtoa_r+0x110c>
    7304:	0027883a 	mov	r19,zero
    7308:	d8c00a17 	ldw	r3,40(sp)
    730c:	183fd21e 	bne	r3,zero,7258 <__alt_mem_Flash_flash_data+0xf4007258>
    7310:	00800044 	movi	r2,1
    7314:	1585883a 	add	r2,r2,r22
    7318:	108007cc 	andi	r2,r2,31
    731c:	10005f26 	beq	r2,zero,749c <_dtoa_r+0xd08>
    7320:	00c00804 	movi	r3,32
    7324:	1887c83a 	sub	r3,r3,r2
    7328:	01000104 	movi	r4,4
    732c:	20c2dd0e 	bge	r4,r3,7ea4 <_dtoa_r+0x1710>
    7330:	d9000817 	ldw	r4,32(sp)
    7334:	00c00704 	movi	r3,28
    7338:	1885c83a 	sub	r2,r3,r2
    733c:	2089883a 	add	r4,r4,r2
    7340:	d9000815 	stw	r4,32(sp)
    7344:	a0a9883a 	add	r20,r20,r2
    7348:	b0ad883a 	add	r22,r22,r2
    734c:	d8800817 	ldw	r2,32(sp)
    7350:	0080050e 	bge	zero,r2,7368 <_dtoa_r+0xbd4>
    7354:	e00b883a 	mov	r5,fp
    7358:	8009883a 	mov	r4,r16
    735c:	100d883a 	mov	r6,r2
    7360:	000a48c0 	call	a48c <__lshift>
    7364:	1039883a 	mov	fp,r2
    7368:	0580050e 	bge	zero,r22,7380 <_dtoa_r+0xbec>
    736c:	a80b883a 	mov	r5,r21
    7370:	8009883a 	mov	r4,r16
    7374:	b00d883a 	mov	r6,r22
    7378:	000a48c0 	call	a48c <__lshift>
    737c:	102b883a 	mov	r21,r2
    7380:	d8c00d17 	ldw	r3,52(sp)
    7384:	1801161e 	bne	r3,zero,77e0 <_dtoa_r+0x104c>
    7388:	d8c00617 	ldw	r3,24(sp)
    738c:	00c12d0e 	bge	zero,r3,7844 <_dtoa_r+0x10b0>
    7390:	d8c00b17 	ldw	r3,44(sp)
    7394:	1800571e 	bne	r3,zero,74f4 <_dtoa_r+0xd60>
    7398:	dc800717 	ldw	r18,28(sp)
    739c:	dcc00617 	ldw	r19,24(sp)
    73a0:	9029883a 	mov	r20,r18
    73a4:	00000206 	br	73b0 <_dtoa_r+0xc1c>
    73a8:	0009dd80 	call	9dd8 <__multadd>
    73ac:	1039883a 	mov	fp,r2
    73b0:	e009883a 	mov	r4,fp
    73b4:	a80b883a 	mov	r5,r21
    73b8:	00065940 	call	6594 <quorem>
    73bc:	10800c04 	addi	r2,r2,48
    73c0:	90800005 	stb	r2,0(r18)
    73c4:	94800044 	addi	r18,r18,1
    73c8:	9507c83a 	sub	r3,r18,r20
    73cc:	8009883a 	mov	r4,r16
    73d0:	e00b883a 	mov	r5,fp
    73d4:	01800284 	movi	r6,10
    73d8:	000f883a 	mov	r7,zero
    73dc:	1cfff216 	blt	r3,r19,73a8 <__alt_mem_Flash_flash_data+0xf40073a8>
    73e0:	1011883a 	mov	r8,r2
    73e4:	d8800617 	ldw	r2,24(sp)
    73e8:	00822e0e 	bge	zero,r2,7ca4 <_dtoa_r+0x1510>
    73ec:	d9000717 	ldw	r4,28(sp)
    73f0:	0025883a 	mov	r18,zero
    73f4:	20af883a 	add	r23,r4,r2
    73f8:	e00b883a 	mov	r5,fp
    73fc:	01800044 	movi	r6,1
    7400:	8009883a 	mov	r4,r16
    7404:	da001715 	stw	r8,92(sp)
    7408:	000a48c0 	call	a48c <__lshift>
    740c:	1009883a 	mov	r4,r2
    7410:	a80b883a 	mov	r5,r21
    7414:	1039883a 	mov	fp,r2
    7418:	000a5dc0 	call	a5dc <__mcmp>
    741c:	da001717 	ldw	r8,92(sp)
    7420:	00816e0e 	bge	zero,r2,79dc <_dtoa_r+0x1248>
    7424:	b93fffc3 	ldbu	r4,-1(r23)
    7428:	b8bfffc4 	addi	r2,r23,-1
    742c:	1007883a 	mov	r3,r2
    7430:	01800e44 	movi	r6,57
    7434:	d9c00717 	ldw	r7,28(sp)
    7438:	00000506 	br	7450 <_dtoa_r+0xcbc>
    743c:	18ffffc4 	addi	r3,r3,-1
    7440:	38811926 	beq	r7,r2,78a8 <_dtoa_r+0x1114>
    7444:	19000003 	ldbu	r4,0(r3)
    7448:	102f883a 	mov	r23,r2
    744c:	10bfffc4 	addi	r2,r2,-1
    7450:	21403fcc 	andi	r5,r4,255
    7454:	2940201c 	xori	r5,r5,128
    7458:	297fe004 	addi	r5,r5,-128
    745c:	29bff726 	beq	r5,r6,743c <__alt_mem_Flash_flash_data+0xf400743c>
    7460:	21000044 	addi	r4,r4,1
    7464:	11000005 	stb	r4,0(r2)
    7468:	8009883a 	mov	r4,r16
    746c:	a80b883a 	mov	r5,r21
    7470:	0009db00 	call	9db0 <_Bfree>
    7474:	883e7526 	beq	r17,zero,6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7478:	90000426 	beq	r18,zero,748c <_dtoa_r+0xcf8>
    747c:	94400326 	beq	r18,r17,748c <_dtoa_r+0xcf8>
    7480:	8009883a 	mov	r4,r16
    7484:	900b883a 	mov	r5,r18
    7488:	0009db00 	call	9db0 <_Bfree>
    748c:	8009883a 	mov	r4,r16
    7490:	880b883a 	mov	r5,r17
    7494:	0009db00 	call	9db0 <_Bfree>
    7498:	003e6c06 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    749c:	00800704 	movi	r2,28
    74a0:	d9800817 	ldw	r6,32(sp)
    74a4:	a0a9883a 	add	r20,r20,r2
    74a8:	b0ad883a 	add	r22,r22,r2
    74ac:	308d883a 	add	r6,r6,r2
    74b0:	d9800815 	stw	r6,32(sp)
    74b4:	003fa506 	br	734c <__alt_mem_Flash_flash_data+0xf400734c>
    74b8:	013efb84 	movi	r4,-1042
    74bc:	246bc83a 	sub	r21,r4,r17
    74c0:	9548983a 	sll	r4,r18,r21
    74c4:	003d1806 	br	6928 <__alt_mem_Flash_flash_data+0xf4006928>
    74c8:	d8000d15 	stw	zero,52(sp)
    74cc:	003d5b06 	br	6a3c <__alt_mem_Flash_flash_data+0xf4006a3c>
    74d0:	880b883a 	mov	r5,r17
    74d4:	8009883a 	mov	r4,r16
    74d8:	01800284 	movi	r6,10
    74dc:	000f883a 	mov	r7,zero
    74e0:	0009dd80 	call	9dd8 <__multadd>
    74e4:	1023883a 	mov	r17,r2
    74e8:	d8800c17 	ldw	r2,48(sp)
    74ec:	0082550e 	bge	zero,r2,7e44 <_dtoa_r+0x16b0>
    74f0:	d8800615 	stw	r2,24(sp)
    74f4:	0500050e 	bge	zero,r20,750c <_dtoa_r+0xd78>
    74f8:	880b883a 	mov	r5,r17
    74fc:	8009883a 	mov	r4,r16
    7500:	a00d883a 	mov	r6,r20
    7504:	000a48c0 	call	a48c <__lshift>
    7508:	1023883a 	mov	r17,r2
    750c:	98016a1e 	bne	r19,zero,7ab8 <_dtoa_r+0x1324>
    7510:	8829883a 	mov	r20,r17
    7514:	d9000617 	ldw	r4,24(sp)
    7518:	dcc00717 	ldw	r19,28(sp)
    751c:	9480004c 	andi	r18,r18,1
    7520:	20bfffc4 	addi	r2,r4,-1
    7524:	9885883a 	add	r2,r19,r2
    7528:	d8800415 	stw	r2,16(sp)
    752c:	dc800615 	stw	r18,24(sp)
    7530:	e009883a 	mov	r4,fp
    7534:	a80b883a 	mov	r5,r21
    7538:	00065940 	call	6594 <quorem>
    753c:	e009883a 	mov	r4,fp
    7540:	880b883a 	mov	r5,r17
    7544:	102f883a 	mov	r23,r2
    7548:	000a5dc0 	call	a5dc <__mcmp>
    754c:	8009883a 	mov	r4,r16
    7550:	a80b883a 	mov	r5,r21
    7554:	a00d883a 	mov	r6,r20
    7558:	102d883a 	mov	r22,r2
    755c:	000a63c0 	call	a63c <__mdiff>
    7560:	1007883a 	mov	r3,r2
    7564:	10800317 	ldw	r2,12(r2)
    7568:	bc800c04 	addi	r18,r23,48
    756c:	1000971e 	bne	r2,zero,77cc <_dtoa_r+0x1038>
    7570:	180b883a 	mov	r5,r3
    7574:	e009883a 	mov	r4,fp
    7578:	d8c01515 	stw	r3,84(sp)
    757c:	000a5dc0 	call	a5dc <__mcmp>
    7580:	d8c01517 	ldw	r3,84(sp)
    7584:	8009883a 	mov	r4,r16
    7588:	d8801515 	stw	r2,84(sp)
    758c:	180b883a 	mov	r5,r3
    7590:	0009db00 	call	9db0 <_Bfree>
    7594:	d8801517 	ldw	r2,84(sp)
    7598:	1000041e 	bne	r2,zero,75ac <_dtoa_r+0xe18>
    759c:	d9800317 	ldw	r6,12(sp)
    75a0:	3000021e 	bne	r6,zero,75ac <_dtoa_r+0xe18>
    75a4:	d8c00617 	ldw	r3,24(sp)
    75a8:	18007626 	beq	r3,zero,7784 <_dtoa_r+0xff0>
    75ac:	b0005b16 	blt	r22,zero,771c <_dtoa_r+0xf88>
    75b0:	b000041e 	bne	r22,zero,75c4 <_dtoa_r+0xe30>
    75b4:	d9000317 	ldw	r4,12(sp)
    75b8:	2000021e 	bne	r4,zero,75c4 <_dtoa_r+0xe30>
    75bc:	d8c00617 	ldw	r3,24(sp)
    75c0:	18005626 	beq	r3,zero,771c <_dtoa_r+0xf88>
    75c4:	00814d16 	blt	zero,r2,7afc <_dtoa_r+0x1368>
    75c8:	d8c00417 	ldw	r3,16(sp)
    75cc:	9d800044 	addi	r22,r19,1
    75d0:	9c800005 	stb	r18,0(r19)
    75d4:	b02f883a 	mov	r23,r22
    75d8:	98c14c26 	beq	r19,r3,7b0c <_dtoa_r+0x1378>
    75dc:	e00b883a 	mov	r5,fp
    75e0:	8009883a 	mov	r4,r16
    75e4:	01800284 	movi	r6,10
    75e8:	000f883a 	mov	r7,zero
    75ec:	0009dd80 	call	9dd8 <__multadd>
    75f0:	1039883a 	mov	fp,r2
    75f4:	8d006d26 	beq	r17,r20,77ac <_dtoa_r+0x1018>
    75f8:	880b883a 	mov	r5,r17
    75fc:	01800284 	movi	r6,10
    7600:	000f883a 	mov	r7,zero
    7604:	8009883a 	mov	r4,r16
    7608:	0009dd80 	call	9dd8 <__multadd>
    760c:	a00b883a 	mov	r5,r20
    7610:	8009883a 	mov	r4,r16
    7614:	01800284 	movi	r6,10
    7618:	000f883a 	mov	r7,zero
    761c:	1023883a 	mov	r17,r2
    7620:	0009dd80 	call	9dd8 <__multadd>
    7624:	1029883a 	mov	r20,r2
    7628:	b027883a 	mov	r19,r22
    762c:	003fc006 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>
    7630:	a005883a 	mov	r2,r20
    7634:	003ede06 	br	71b0 <__alt_mem_Flash_flash_data+0xf40071b0>
    7638:	01000044 	movi	r4,1
    763c:	d9000b15 	stw	r4,44(sp)
    7640:	d9802217 	ldw	r6,136(sp)
    7644:	0180dc0e 	bge	zero,r6,79b8 <_dtoa_r+0x1224>
    7648:	3023883a 	mov	r17,r6
    764c:	d9800c15 	stw	r6,48(sp)
    7650:	d9800615 	stw	r6,24(sp)
    7654:	003d1e06 	br	6ad0 <__alt_mem_Flash_flash_data+0xf4006ad0>
    7658:	d8800617 	ldw	r2,24(sp)
    765c:	00be3716 	blt	zero,r2,6f3c <__alt_mem_Flash_flash_data+0xf4006f3c>
    7660:	1000be1e 	bne	r2,zero,795c <_dtoa_r+0x11c8>
    7664:	8809883a 	mov	r4,r17
    7668:	a00b883a 	mov	r5,r20
    766c:	000d883a 	mov	r6,zero
    7670:	01d00534 	movhi	r7,16404
    7674:	00103fc0 	call	103fc <__muldf3>
    7678:	1009883a 	mov	r4,r2
    767c:	180b883a 	mov	r5,r3
    7680:	900d883a 	mov	r6,r18
    7684:	980f883a 	mov	r7,r19
    7688:	001023c0 	call	1023c <__gedf2>
    768c:	002b883a 	mov	r21,zero
    7690:	0023883a 	mov	r17,zero
    7694:	10007a16 	blt	r2,zero,7880 <_dtoa_r+0x10ec>
    7698:	d9002217 	ldw	r4,136(sp)
    769c:	ddc00717 	ldw	r23,28(sp)
    76a0:	0108303a 	nor	r4,zero,r4
    76a4:	d9000515 	stw	r4,20(sp)
    76a8:	8009883a 	mov	r4,r16
    76ac:	a80b883a 	mov	r5,r21
    76b0:	0009db00 	call	9db0 <_Bfree>
    76b4:	883f751e 	bne	r17,zero,748c <__alt_mem_Flash_flash_data+0xf400748c>
    76b8:	003de406 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    76bc:	e00b883a 	mov	r5,fp
    76c0:	8009883a 	mov	r4,r16
    76c4:	000a34c0 	call	a34c <__pow5mult>
    76c8:	1039883a 	mov	fp,r2
    76cc:	003ed306 	br	721c <__alt_mem_Flash_flash_data+0xf400721c>
    76d0:	903ee01e 	bne	r18,zero,7254 <__alt_mem_Flash_flash_data+0xf4007254>
    76d4:	00800434 	movhi	r2,16
    76d8:	10bfffc4 	addi	r2,r2,-1
    76dc:	9884703a 	and	r2,r19,r2
    76e0:	103f081e 	bne	r2,zero,7304 <__alt_mem_Flash_flash_data+0xf4007304>
    76e4:	9cdffc2c 	andhi	r19,r19,32752
    76e8:	983f0626 	beq	r19,zero,7304 <__alt_mem_Flash_flash_data+0xf4007304>
    76ec:	d8800817 	ldw	r2,32(sp)
    76f0:	b5800044 	addi	r22,r22,1
    76f4:	04c00044 	movi	r19,1
    76f8:	10800044 	addi	r2,r2,1
    76fc:	d8800815 	stw	r2,32(sp)
    7700:	003f0106 	br	7308 <__alt_mem_Flash_flash_data+0xf4007308>
    7704:	d9800f17 	ldw	r6,60(sp)
    7708:	30016826 	beq	r6,zero,7cac <_dtoa_r+0x1518>
    770c:	10810cc4 	addi	r2,r2,1075
    7710:	dd400917 	ldw	r21,36(sp)
    7714:	dd000817 	ldw	r20,32(sp)
    7718:	003e9906 	br	7180 <__alt_mem_Flash_flash_data+0xf4007180>
    771c:	9011883a 	mov	r8,r18
    7720:	4007883a 	mov	r3,r8
    7724:	e02d883a 	mov	r22,fp
    7728:	0080100e 	bge	zero,r2,776c <_dtoa_r+0xfd8>
    772c:	01800044 	movi	r6,1
    7730:	8009883a 	mov	r4,r16
    7734:	e00b883a 	mov	r5,fp
    7738:	da001515 	stw	r8,84(sp)
    773c:	da001715 	stw	r8,92(sp)
    7740:	000a48c0 	call	a48c <__lshift>
    7744:	1009883a 	mov	r4,r2
    7748:	a80b883a 	mov	r5,r21
    774c:	102d883a 	mov	r22,r2
    7750:	000a5dc0 	call	a5dc <__mcmp>
    7754:	d8c01517 	ldw	r3,84(sp)
    7758:	da001717 	ldw	r8,92(sp)
    775c:	0081a50e 	bge	zero,r2,7df4 <_dtoa_r+0x1660>
    7760:	00800e44 	movi	r2,57
    7764:	40817b26 	beq	r8,r2,7d54 <_dtoa_r+0x15c0>
    7768:	40c00044 	addi	r3,r8,1
    776c:	8825883a 	mov	r18,r17
    7770:	9dc00044 	addi	r23,r19,1
    7774:	98c00005 	stb	r3,0(r19)
    7778:	a023883a 	mov	r17,r20
    777c:	b039883a 	mov	fp,r22
    7780:	003f3906 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    7784:	00800e44 	movi	r2,57
    7788:	9011883a 	mov	r8,r18
    778c:	90817226 	beq	r18,r2,7d58 <_dtoa_r+0x15c4>
    7790:	0580010e 	bge	zero,r22,7798 <_dtoa_r+0x1004>
    7794:	ba000c44 	addi	r8,r23,49
    7798:	8825883a 	mov	r18,r17
    779c:	9dc00044 	addi	r23,r19,1
    77a0:	9a000005 	stb	r8,0(r19)
    77a4:	a023883a 	mov	r17,r20
    77a8:	003f2f06 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    77ac:	880b883a 	mov	r5,r17
    77b0:	8009883a 	mov	r4,r16
    77b4:	01800284 	movi	r6,10
    77b8:	000f883a 	mov	r7,zero
    77bc:	0009dd80 	call	9dd8 <__multadd>
    77c0:	1023883a 	mov	r17,r2
    77c4:	1029883a 	mov	r20,r2
    77c8:	003f9706 	br	7628 <__alt_mem_Flash_flash_data+0xf4007628>
    77cc:	8009883a 	mov	r4,r16
    77d0:	180b883a 	mov	r5,r3
    77d4:	0009db00 	call	9db0 <_Bfree>
    77d8:	00800044 	movi	r2,1
    77dc:	003f7306 	br	75ac <__alt_mem_Flash_flash_data+0xf40075ac>
    77e0:	e009883a 	mov	r4,fp
    77e4:	a80b883a 	mov	r5,r21
    77e8:	000a5dc0 	call	a5dc <__mcmp>
    77ec:	103ee60e 	bge	r2,zero,7388 <__alt_mem_Flash_flash_data+0xf4007388>
    77f0:	8009883a 	mov	r4,r16
    77f4:	e00b883a 	mov	r5,fp
    77f8:	01800284 	movi	r6,10
    77fc:	000f883a 	mov	r7,zero
    7800:	0009dd80 	call	9dd8 <__multadd>
    7804:	d9000517 	ldw	r4,20(sp)
    7808:	d9800b17 	ldw	r6,44(sp)
    780c:	1039883a 	mov	fp,r2
    7810:	213fffc4 	addi	r4,r4,-1
    7814:	d9000515 	stw	r4,20(sp)
    7818:	303f2d1e 	bne	r6,zero,74d0 <__alt_mem_Flash_flash_data+0xf40074d0>
    781c:	d9000c17 	ldw	r4,48(sp)
    7820:	0101780e 	bge	zero,r4,7e04 <_dtoa_r+0x1670>
    7824:	d9000615 	stw	r4,24(sp)
    7828:	003edb06 	br	7398 <__alt_mem_Flash_flash_data+0xf4007398>
    782c:	00800084 	movi	r2,2
    7830:	30818e1e 	bne	r6,r2,7e6c <_dtoa_r+0x16d8>
    7834:	d8000b15 	stw	zero,44(sp)
    7838:	003f8106 	br	7640 <__alt_mem_Flash_flash_data+0xf4007640>
    783c:	d8800717 	ldw	r2,28(sp)
    7840:	003c0306 	br	6850 <__alt_mem_Flash_flash_data+0xf4006850>
    7844:	d9000317 	ldw	r4,12(sp)
    7848:	00800084 	movi	r2,2
    784c:	113ed00e 	bge	r2,r4,7390 <__alt_mem_Flash_flash_data+0xf4007390>
    7850:	d8c00617 	ldw	r3,24(sp)
    7854:	183f901e 	bne	r3,zero,7698 <__alt_mem_Flash_flash_data+0xf4007698>
    7858:	a80b883a 	mov	r5,r21
    785c:	8009883a 	mov	r4,r16
    7860:	01800144 	movi	r6,5
    7864:	000f883a 	mov	r7,zero
    7868:	0009dd80 	call	9dd8 <__multadd>
    786c:	e009883a 	mov	r4,fp
    7870:	100b883a 	mov	r5,r2
    7874:	102b883a 	mov	r21,r2
    7878:	000a5dc0 	call	a5dc <__mcmp>
    787c:	00bf860e 	bge	zero,r2,7698 <__alt_mem_Flash_flash_data+0xf4007698>
    7880:	d9800717 	ldw	r6,28(sp)
    7884:	00800c44 	movi	r2,49
    7888:	30800005 	stb	r2,0(r6)
    788c:	d8800517 	ldw	r2,20(sp)
    7890:	35c00044 	addi	r23,r6,1
    7894:	10800044 	addi	r2,r2,1
    7898:	d8800515 	stw	r2,20(sp)
    789c:	003f8206 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    78a0:	903e981e 	bne	r18,zero,7304 <__alt_mem_Flash_flash_data+0xf4007304>
    78a4:	003f8b06 	br	76d4 <__alt_mem_Flash_flash_data+0xf40076d4>
    78a8:	d9800517 	ldw	r6,20(sp)
    78ac:	d8c00717 	ldw	r3,28(sp)
    78b0:	00800c44 	movi	r2,49
    78b4:	31800044 	addi	r6,r6,1
    78b8:	d9800515 	stw	r6,20(sp)
    78bc:	18800005 	stb	r2,0(r3)
    78c0:	003ee906 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    78c4:	dc000317 	ldw	r16,12(sp)
    78c8:	003d6006 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    78cc:	8809883a 	mov	r4,r17
    78d0:	00114780 	call	11478 <__floatsidf>
    78d4:	a009883a 	mov	r4,r20
    78d8:	a80b883a 	mov	r5,r21
    78dc:	100d883a 	mov	r6,r2
    78e0:	180f883a 	mov	r7,r3
    78e4:	00103fc0 	call	103fc <__muldf3>
    78e8:	1009883a 	mov	r4,r2
    78ec:	180b883a 	mov	r5,r3
    78f0:	000d883a 	mov	r6,zero
    78f4:	01d00734 	movhi	r7,16412
    78f8:	000f0500 	call	f050 <__adddf3>
    78fc:	1023883a 	mov	r17,r2
    7900:	00bf3034 	movhi	r2,64704
    7904:	1885883a 	add	r2,r3,r2
    7908:	d8800e15 	stw	r2,56(sp)
    790c:	a009883a 	mov	r4,r20
    7910:	a80b883a 	mov	r5,r21
    7914:	000d883a 	mov	r6,zero
    7918:	01d00534 	movhi	r7,16404
    791c:	0010b200 	call	10b20 <__subdf3>
    7920:	d9c00e17 	ldw	r7,56(sp)
    7924:	1009883a 	mov	r4,r2
    7928:	180b883a 	mov	r5,r3
    792c:	880d883a 	mov	r6,r17
    7930:	102b883a 	mov	r21,r2
    7934:	1829883a 	mov	r20,r3
    7938:	001023c0 	call	1023c <__gedf2>
    793c:	00807716 	blt	zero,r2,7b1c <_dtoa_r+0x1388>
    7940:	d8800e17 	ldw	r2,56(sp)
    7944:	a809883a 	mov	r4,r21
    7948:	a00b883a 	mov	r5,r20
    794c:	11e0003c 	xorhi	r7,r2,32768
    7950:	880d883a 	mov	r6,r17
    7954:	001031c0 	call	1031c <__ledf2>
    7958:	103d6b0e 	bge	r2,zero,6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    795c:	002b883a 	mov	r21,zero
    7960:	0023883a 	mov	r17,zero
    7964:	003f4c06 	br	7698 <__alt_mem_Flash_flash_data+0xf4007698>
    7968:	d9800917 	ldw	r6,36(sp)
    796c:	e00b883a 	mov	r5,fp
    7970:	8009883a 	mov	r4,r16
    7974:	000a34c0 	call	a34c <__pow5mult>
    7978:	1039883a 	mov	fp,r2
    797c:	003e2706 	br	721c <__alt_mem_Flash_flash_data+0xf400721c>
    7980:	d8000b15 	stw	zero,44(sp)
    7984:	003c4906 	br	6aac <__alt_mem_Flash_flash_data+0xf4006aac>
    7988:	d9000917 	ldw	r4,36(sp)
    798c:	d9800a17 	ldw	r6,40(sp)
    7990:	dd400915 	stw	r21,36(sp)
    7994:	a905c83a 	sub	r2,r21,r4
    7998:	308d883a 	add	r6,r6,r2
    799c:	d9800a15 	stw	r6,40(sp)
    79a0:	002b883a 	mov	r21,zero
    79a4:	003df206 	br	7170 <__alt_mem_Flash_flash_data+0xf4007170>
    79a8:	dc800e15 	stw	r18,56(sp)
    79ac:	982b883a 	mov	r21,r19
    79b0:	04400084 	movi	r17,2
    79b4:	003c7406 	br	6b88 <__alt_mem_Flash_flash_data+0xf4006b88>
    79b8:	04400044 	movi	r17,1
    79bc:	dc400c15 	stw	r17,48(sp)
    79c0:	dc400615 	stw	r17,24(sp)
    79c4:	dc402215 	stw	r17,136(sp)
    79c8:	80001115 	stw	zero,68(r16)
    79cc:	000b883a 	mov	r5,zero
    79d0:	003c4a06 	br	6afc <__alt_mem_Flash_flash_data+0xf4006afc>
    79d4:	3023883a 	mov	r17,r6
    79d8:	003ffb06 	br	79c8 <__alt_mem_Flash_flash_data+0xf40079c8>
    79dc:	1000021e 	bne	r2,zero,79e8 <_dtoa_r+0x1254>
    79e0:	4200004c 	andi	r8,r8,1
    79e4:	403e8f1e 	bne	r8,zero,7424 <__alt_mem_Flash_flash_data+0xf4007424>
    79e8:	01000c04 	movi	r4,48
    79ec:	00000106 	br	79f4 <_dtoa_r+0x1260>
    79f0:	102f883a 	mov	r23,r2
    79f4:	b8bfffc4 	addi	r2,r23,-1
    79f8:	10c00007 	ldb	r3,0(r2)
    79fc:	193ffc26 	beq	r3,r4,79f0 <__alt_mem_Flash_flash_data+0xf40079f0>
    7a00:	003e9906 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    7a04:	d9000517 	ldw	r4,20(sp)
    7a08:	012fc83a 	sub	r23,zero,r4
    7a0c:	b800ad26 	beq	r23,zero,7cc4 <_dtoa_r+0x1530>
    7a10:	b88003cc 	andi	r2,r23,15
    7a14:	100490fa 	slli	r2,r2,3
    7a18:	00c000b4 	movhi	r3,2
    7a1c:	18fc5404 	addi	r3,r3,-3760
    7a20:	1885883a 	add	r2,r3,r2
    7a24:	11800017 	ldw	r6,0(r2)
    7a28:	11c00117 	ldw	r7,4(r2)
    7a2c:	b82fd13a 	srai	r23,r23,4
    7a30:	9009883a 	mov	r4,r18
    7a34:	980b883a 	mov	r5,r19
    7a38:	00103fc0 	call	103fc <__muldf3>
    7a3c:	1029883a 	mov	r20,r2
    7a40:	182b883a 	mov	r21,r3
    7a44:	b800f426 	beq	r23,zero,7e18 <_dtoa_r+0x1684>
    7a48:	020000b4 	movhi	r8,2
    7a4c:	423c4a04 	addi	r8,r8,-3800
    7a50:	8029883a 	mov	r20,r16
    7a54:	04400084 	movi	r17,2
    7a58:	4021883a 	mov	r16,r8
    7a5c:	b980004c 	andi	r6,r23,1
    7a60:	1009883a 	mov	r4,r2
    7a64:	b82fd07a 	srai	r23,r23,1
    7a68:	180b883a 	mov	r5,r3
    7a6c:	30000426 	beq	r6,zero,7a80 <_dtoa_r+0x12ec>
    7a70:	81800017 	ldw	r6,0(r16)
    7a74:	81c00117 	ldw	r7,4(r16)
    7a78:	8c400044 	addi	r17,r17,1
    7a7c:	00103fc0 	call	103fc <__muldf3>
    7a80:	84000204 	addi	r16,r16,8
    7a84:	b83ff51e 	bne	r23,zero,7a5c <__alt_mem_Flash_flash_data+0xf4007a5c>
    7a88:	a021883a 	mov	r16,r20
    7a8c:	182b883a 	mov	r21,r3
    7a90:	1029883a 	mov	r20,r2
    7a94:	003c5506 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    7a98:	d9800517 	ldw	r6,20(sp)
    7a9c:	d9000717 	ldw	r4,28(sp)
    7aa0:	00c00c04 	movi	r3,48
    7aa4:	31800044 	addi	r6,r6,1
    7aa8:	d9800515 	stw	r6,20(sp)
    7aac:	20c00005 	stb	r3,0(r4)
    7ab0:	02000c44 	movi	r8,49
    7ab4:	003da206 	br	7140 <__alt_mem_Flash_flash_data+0xf4007140>
    7ab8:	89400117 	ldw	r5,4(r17)
    7abc:	8009883a 	mov	r4,r16
    7ac0:	0009d080 	call	9d08 <_Balloc>
    7ac4:	89800417 	ldw	r6,16(r17)
    7ac8:	11000304 	addi	r4,r2,12
    7acc:	89400304 	addi	r5,r17,12
    7ad0:	31800084 	addi	r6,r6,2
    7ad4:	318d883a 	add	r6,r6,r6
    7ad8:	318d883a 	add	r6,r6,r6
    7adc:	1027883a 	mov	r19,r2
    7ae0:	0009a740 	call	9a74 <memcpy>
    7ae4:	8009883a 	mov	r4,r16
    7ae8:	980b883a 	mov	r5,r19
    7aec:	01800044 	movi	r6,1
    7af0:	000a48c0 	call	a48c <__lshift>
    7af4:	1029883a 	mov	r20,r2
    7af8:	003e8606 	br	7514 <__alt_mem_Flash_flash_data+0xf4007514>
    7afc:	00800e44 	movi	r2,57
    7b00:	90809526 	beq	r18,r2,7d58 <_dtoa_r+0x15c4>
    7b04:	92000044 	addi	r8,r18,1
    7b08:	003f2306 	br	7798 <__alt_mem_Flash_flash_data+0xf4007798>
    7b0c:	9011883a 	mov	r8,r18
    7b10:	8825883a 	mov	r18,r17
    7b14:	a023883a 	mov	r17,r20
    7b18:	003e3706 	br	73f8 <__alt_mem_Flash_flash_data+0xf40073f8>
    7b1c:	002b883a 	mov	r21,zero
    7b20:	0023883a 	mov	r17,zero
    7b24:	003f5606 	br	7880 <__alt_mem_Flash_flash_data+0xf4007880>
    7b28:	51bfffc4 	addi	r6,r10,-1
    7b2c:	300490fa 	slli	r2,r6,3
    7b30:	00c000b4 	movhi	r3,2
    7b34:	18fc5404 	addi	r3,r3,-3760
    7b38:	1885883a 	add	r2,r3,r2
    7b3c:	d9c00e17 	ldw	r7,56(sp)
    7b40:	11000017 	ldw	r4,0(r2)
    7b44:	11400117 	ldw	r5,4(r2)
    7b48:	d8800717 	ldw	r2,28(sp)
    7b4c:	d9801015 	stw	r6,64(sp)
    7b50:	880d883a 	mov	r6,r17
    7b54:	da801615 	stw	r10,88(sp)
    7b58:	15c00044 	addi	r23,r2,1
    7b5c:	00103fc0 	call	103fc <__muldf3>
    7b60:	a80b883a 	mov	r5,r21
    7b64:	a009883a 	mov	r4,r20
    7b68:	d8c01115 	stw	r3,68(sp)
    7b6c:	d8800e15 	stw	r2,56(sp)
    7b70:	00113f00 	call	113f0 <__fixdfsi>
    7b74:	1009883a 	mov	r4,r2
    7b78:	1023883a 	mov	r17,r2
    7b7c:	00114780 	call	11478 <__floatsidf>
    7b80:	a009883a 	mov	r4,r20
    7b84:	a80b883a 	mov	r5,r21
    7b88:	100d883a 	mov	r6,r2
    7b8c:	180f883a 	mov	r7,r3
    7b90:	0010b200 	call	10b20 <__subdf3>
    7b94:	1813883a 	mov	r9,r3
    7b98:	d8c00717 	ldw	r3,28(sp)
    7b9c:	8c400c04 	addi	r17,r17,48
    7ba0:	1011883a 	mov	r8,r2
    7ba4:	1c400005 	stb	r17,0(r3)
    7ba8:	da801617 	ldw	r10,88(sp)
    7bac:	00800044 	movi	r2,1
    7bb0:	50802326 	beq	r10,r2,7c40 <_dtoa_r+0x14ac>
    7bb4:	d8800717 	ldw	r2,28(sp)
    7bb8:	b82b883a 	mov	r21,r23
    7bbc:	dc001315 	stw	r16,76(sp)
    7bc0:	12a9883a 	add	r20,r2,r10
    7bc4:	4807883a 	mov	r3,r9
    7bc8:	4005883a 	mov	r2,r8
    7bcc:	dc801415 	stw	r18,80(sp)
    7bd0:	000d883a 	mov	r6,zero
    7bd4:	01d00934 	movhi	r7,16420
    7bd8:	1009883a 	mov	r4,r2
    7bdc:	180b883a 	mov	r5,r3
    7be0:	00103fc0 	call	103fc <__muldf3>
    7be4:	180b883a 	mov	r5,r3
    7be8:	1009883a 	mov	r4,r2
    7bec:	1821883a 	mov	r16,r3
    7bf0:	1025883a 	mov	r18,r2
    7bf4:	00113f00 	call	113f0 <__fixdfsi>
    7bf8:	1009883a 	mov	r4,r2
    7bfc:	1023883a 	mov	r17,r2
    7c00:	00114780 	call	11478 <__floatsidf>
    7c04:	9009883a 	mov	r4,r18
    7c08:	800b883a 	mov	r5,r16
    7c0c:	100d883a 	mov	r6,r2
    7c10:	180f883a 	mov	r7,r3
    7c14:	8c400c04 	addi	r17,r17,48
    7c18:	0010b200 	call	10b20 <__subdf3>
    7c1c:	ad400044 	addi	r21,r21,1
    7c20:	ac7fffc5 	stb	r17,-1(r21)
    7c24:	ad3fea1e 	bne	r21,r20,7bd0 <__alt_mem_Flash_flash_data+0xf4007bd0>
    7c28:	1813883a 	mov	r9,r3
    7c2c:	d8c01017 	ldw	r3,64(sp)
    7c30:	dc001317 	ldw	r16,76(sp)
    7c34:	dc801417 	ldw	r18,80(sp)
    7c38:	1011883a 	mov	r8,r2
    7c3c:	b8ef883a 	add	r23,r23,r3
    7c40:	d9000e17 	ldw	r4,56(sp)
    7c44:	d9401117 	ldw	r5,68(sp)
    7c48:	000d883a 	mov	r6,zero
    7c4c:	01cff834 	movhi	r7,16352
    7c50:	da001715 	stw	r8,92(sp)
    7c54:	da401515 	stw	r9,84(sp)
    7c58:	000f0500 	call	f050 <__adddf3>
    7c5c:	da001717 	ldw	r8,92(sp)
    7c60:	da401517 	ldw	r9,84(sp)
    7c64:	1009883a 	mov	r4,r2
    7c68:	400d883a 	mov	r6,r8
    7c6c:	480f883a 	mov	r7,r9
    7c70:	180b883a 	mov	r5,r3
    7c74:	001031c0 	call	1031c <__ledf2>
    7c78:	da001717 	ldw	r8,92(sp)
    7c7c:	da401517 	ldw	r9,84(sp)
    7c80:	10003b0e 	bge	r2,zero,7d70 <_dtoa_r+0x15dc>
    7c84:	d9001217 	ldw	r4,72(sp)
    7c88:	bd7fffc3 	ldbu	r21,-1(r23)
    7c8c:	d9000515 	stw	r4,20(sp)
    7c90:	003d1c06 	br	7104 <__alt_mem_Flash_flash_data+0xf4007104>
    7c94:	d8c00817 	ldw	r3,32(sp)
    7c98:	18a9c83a 	sub	r20,r3,r2
    7c9c:	0005883a 	mov	r2,zero
    7ca0:	003d3706 	br	7180 <__alt_mem_Flash_flash_data+0xf4007180>
    7ca4:	00800044 	movi	r2,1
    7ca8:	003dd006 	br	73ec <__alt_mem_Flash_flash_data+0xf40073ec>
    7cac:	d8c00217 	ldw	r3,8(sp)
    7cb0:	00800d84 	movi	r2,54
    7cb4:	dd400917 	ldw	r21,36(sp)
    7cb8:	10c5c83a 	sub	r2,r2,r3
    7cbc:	dd000817 	ldw	r20,32(sp)
    7cc0:	003d2f06 	br	7180 <__alt_mem_Flash_flash_data+0xf4007180>
    7cc4:	9029883a 	mov	r20,r18
    7cc8:	982b883a 	mov	r21,r19
    7ccc:	04400084 	movi	r17,2
    7cd0:	003bc606 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    7cd4:	d8800617 	ldw	r2,24(sp)
    7cd8:	103efc26 	beq	r2,zero,78cc <__alt_mem_Flash_flash_data+0xf40078cc>
    7cdc:	d8c00c17 	ldw	r3,48(sp)
    7ce0:	00fc890e 	bge	zero,r3,6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    7ce4:	a80b883a 	mov	r5,r21
    7ce8:	a009883a 	mov	r4,r20
    7cec:	000d883a 	mov	r6,zero
    7cf0:	01d00934 	movhi	r7,16420
    7cf4:	00103fc0 	call	103fc <__muldf3>
    7cf8:	89000044 	addi	r4,r17,1
    7cfc:	1029883a 	mov	r20,r2
    7d00:	182b883a 	mov	r21,r3
    7d04:	00114780 	call	11478 <__floatsidf>
    7d08:	a009883a 	mov	r4,r20
    7d0c:	a80b883a 	mov	r5,r21
    7d10:	100d883a 	mov	r6,r2
    7d14:	180f883a 	mov	r7,r3
    7d18:	00103fc0 	call	103fc <__muldf3>
    7d1c:	1009883a 	mov	r4,r2
    7d20:	180b883a 	mov	r5,r3
    7d24:	000d883a 	mov	r6,zero
    7d28:	01d00734 	movhi	r7,16412
    7d2c:	000f0500 	call	f050 <__adddf3>
    7d30:	d9000517 	ldw	r4,20(sp)
    7d34:	1023883a 	mov	r17,r2
    7d38:	00bf3034 	movhi	r2,64704
    7d3c:	213fffc4 	addi	r4,r4,-1
    7d40:	1885883a 	add	r2,r3,r2
    7d44:	d9001215 	stw	r4,72(sp)
    7d48:	d8800e15 	stw	r2,56(sp)
    7d4c:	da800c17 	ldw	r10,48(sp)
    7d50:	003bc306 	br	6c60 <__alt_mem_Flash_flash_data+0xf4006c60>
    7d54:	b039883a 	mov	fp,r22
    7d58:	01000e44 	movi	r4,57
    7d5c:	8825883a 	mov	r18,r17
    7d60:	9dc00044 	addi	r23,r19,1
    7d64:	99000005 	stb	r4,0(r19)
    7d68:	a023883a 	mov	r17,r20
    7d6c:	003dae06 	br	7428 <__alt_mem_Flash_flash_data+0xf4007428>
    7d70:	d9800e17 	ldw	r6,56(sp)
    7d74:	d9c01117 	ldw	r7,68(sp)
    7d78:	0009883a 	mov	r4,zero
    7d7c:	014ff834 	movhi	r5,16352
    7d80:	da001715 	stw	r8,92(sp)
    7d84:	da401515 	stw	r9,84(sp)
    7d88:	0010b200 	call	10b20 <__subdf3>
    7d8c:	da001717 	ldw	r8,92(sp)
    7d90:	da401517 	ldw	r9,84(sp)
    7d94:	1009883a 	mov	r4,r2
    7d98:	180b883a 	mov	r5,r3
    7d9c:	400d883a 	mov	r6,r8
    7da0:	480f883a 	mov	r7,r9
    7da4:	001023c0 	call	1023c <__gedf2>
    7da8:	00bc570e 	bge	zero,r2,6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    7dac:	01000c04 	movi	r4,48
    7db0:	00000106 	br	7db8 <_dtoa_r+0x1624>
    7db4:	102f883a 	mov	r23,r2
    7db8:	b8bfffc4 	addi	r2,r23,-1
    7dbc:	10c00007 	ldb	r3,0(r2)
    7dc0:	193ffc26 	beq	r3,r4,7db4 <__alt_mem_Flash_flash_data+0xf4007db4>
    7dc4:	d9801217 	ldw	r6,72(sp)
    7dc8:	d9800515 	stw	r6,20(sp)
    7dcc:	003c1f06 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7dd0:	d8801217 	ldw	r2,72(sp)
    7dd4:	dc001117 	ldw	r16,68(sp)
    7dd8:	d8800515 	stw	r2,20(sp)
    7ddc:	003cc906 	br	7104 <__alt_mem_Flash_flash_data+0xf4007104>
    7de0:	dd801317 	ldw	r22,76(sp)
    7de4:	dc001117 	ldw	r16,68(sp)
    7de8:	dcc01417 	ldw	r19,80(sp)
    7dec:	dc801017 	ldw	r18,64(sp)
    7df0:	003c4506 	br	6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    7df4:	103e5d1e 	bne	r2,zero,776c <__alt_mem_Flash_flash_data+0xf400776c>
    7df8:	4080004c 	andi	r2,r8,1
    7dfc:	103e5b26 	beq	r2,zero,776c <__alt_mem_Flash_flash_data+0xf400776c>
    7e00:	003e5706 	br	7760 <__alt_mem_Flash_flash_data+0xf4007760>
    7e04:	d8c00317 	ldw	r3,12(sp)
    7e08:	00800084 	movi	r2,2
    7e0c:	10c00a16 	blt	r2,r3,7e38 <_dtoa_r+0x16a4>
    7e10:	d9000c17 	ldw	r4,48(sp)
    7e14:	003e8306 	br	7824 <__alt_mem_Flash_flash_data+0xf4007824>
    7e18:	04400084 	movi	r17,2
    7e1c:	003b7306 	br	6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    7e20:	d9801217 	ldw	r6,72(sp)
    7e24:	d9800515 	stw	r6,20(sp)
    7e28:	003cb606 	br	7104 <__alt_mem_Flash_flash_data+0xf4007104>
    7e2c:	d9001217 	ldw	r4,72(sp)
    7e30:	d9000515 	stw	r4,20(sp)
    7e34:	003c0506 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7e38:	d9800c17 	ldw	r6,48(sp)
    7e3c:	d9800615 	stw	r6,24(sp)
    7e40:	003e8306 	br	7850 <__alt_mem_Flash_flash_data+0xf4007850>
    7e44:	d9800317 	ldw	r6,12(sp)
    7e48:	00800084 	movi	r2,2
    7e4c:	11800216 	blt	r2,r6,7e58 <_dtoa_r+0x16c4>
    7e50:	d8800c17 	ldw	r2,48(sp)
    7e54:	003da606 	br	74f0 <__alt_mem_Flash_flash_data+0xf40074f0>
    7e58:	d8800c17 	ldw	r2,48(sp)
    7e5c:	d8800615 	stw	r2,24(sp)
    7e60:	003e7b06 	br	7850 <__alt_mem_Flash_flash_data+0xf4007850>
    7e64:	05000044 	movi	r20,1
    7e68:	003b0506 	br	6a80 <__alt_mem_Flash_flash_data+0xf4006a80>
    7e6c:	8009883a 	mov	r4,r16
    7e70:	80001115 	stw	zero,68(r16)
    7e74:	000b883a 	mov	r5,zero
    7e78:	0009d080 	call	9d08 <_Balloc>
    7e7c:	d8800715 	stw	r2,28(sp)
    7e80:	d8c00717 	ldw	r3,28(sp)
    7e84:	00bfffc4 	movi	r2,-1
    7e88:	01000044 	movi	r4,1
    7e8c:	d8800c15 	stw	r2,48(sp)
    7e90:	80c01015 	stw	r3,64(r16)
    7e94:	d9000b15 	stw	r4,44(sp)
    7e98:	d8800615 	stw	r2,24(sp)
    7e9c:	d8002215 	stw	zero,136(sp)
    7ea0:	003c1906 	br	6f08 <__alt_mem_Flash_flash_data+0xf4006f08>
    7ea4:	193d2926 	beq	r3,r4,734c <__alt_mem_Flash_flash_data+0xf400734c>
    7ea8:	00c00f04 	movi	r3,60
    7eac:	1885c83a 	sub	r2,r3,r2
    7eb0:	003d7b06 	br	74a0 <__alt_mem_Flash_flash_data+0xf40074a0>
    7eb4:	000b883a 	mov	r5,zero
    7eb8:	003b1006 	br	6afc <__alt_mem_Flash_flash_data+0xf4006afc>

00007ebc <__sflush_r>:
    7ebc:	2880030b 	ldhu	r2,12(r5)
    7ec0:	defffb04 	addi	sp,sp,-20
    7ec4:	dcc00315 	stw	r19,12(sp)
    7ec8:	dc400115 	stw	r17,4(sp)
    7ecc:	dfc00415 	stw	ra,16(sp)
    7ed0:	dc800215 	stw	r18,8(sp)
    7ed4:	dc000015 	stw	r16,0(sp)
    7ed8:	10c0020c 	andi	r3,r2,8
    7edc:	2823883a 	mov	r17,r5
    7ee0:	2027883a 	mov	r19,r4
    7ee4:	1800311e 	bne	r3,zero,7fac <__sflush_r+0xf0>
    7ee8:	28c00117 	ldw	r3,4(r5)
    7eec:	10820014 	ori	r2,r2,2048
    7ef0:	2880030d 	sth	r2,12(r5)
    7ef4:	00c04b0e 	bge	zero,r3,8024 <__sflush_r+0x168>
    7ef8:	8a000a17 	ldw	r8,40(r17)
    7efc:	40002326 	beq	r8,zero,7f8c <__sflush_r+0xd0>
    7f00:	9c000017 	ldw	r16,0(r19)
    7f04:	10c4000c 	andi	r3,r2,4096
    7f08:	98000015 	stw	zero,0(r19)
    7f0c:	18004826 	beq	r3,zero,8030 <__sflush_r+0x174>
    7f10:	89801417 	ldw	r6,80(r17)
    7f14:	10c0010c 	andi	r3,r2,4
    7f18:	18000626 	beq	r3,zero,7f34 <__sflush_r+0x78>
    7f1c:	88c00117 	ldw	r3,4(r17)
    7f20:	88800c17 	ldw	r2,48(r17)
    7f24:	30cdc83a 	sub	r6,r6,r3
    7f28:	10000226 	beq	r2,zero,7f34 <__sflush_r+0x78>
    7f2c:	88800f17 	ldw	r2,60(r17)
    7f30:	308dc83a 	sub	r6,r6,r2
    7f34:	89400717 	ldw	r5,28(r17)
    7f38:	9809883a 	mov	r4,r19
    7f3c:	000f883a 	mov	r7,zero
    7f40:	403ee83a 	callr	r8
    7f44:	00ffffc4 	movi	r3,-1
    7f48:	10c04426 	beq	r2,r3,805c <__sflush_r+0x1a0>
    7f4c:	88c0030b 	ldhu	r3,12(r17)
    7f50:	89000417 	ldw	r4,16(r17)
    7f54:	88000115 	stw	zero,4(r17)
    7f58:	197dffcc 	andi	r5,r3,63487
    7f5c:	8940030d 	sth	r5,12(r17)
    7f60:	89000015 	stw	r4,0(r17)
    7f64:	18c4000c 	andi	r3,r3,4096
    7f68:	18002c1e 	bne	r3,zero,801c <__sflush_r+0x160>
    7f6c:	89400c17 	ldw	r5,48(r17)
    7f70:	9c000015 	stw	r16,0(r19)
    7f74:	28000526 	beq	r5,zero,7f8c <__sflush_r+0xd0>
    7f78:	88801004 	addi	r2,r17,64
    7f7c:	28800226 	beq	r5,r2,7f88 <__sflush_r+0xcc>
    7f80:	9809883a 	mov	r4,r19
    7f84:	00086140 	call	8614 <_free_r>
    7f88:	88000c15 	stw	zero,48(r17)
    7f8c:	0005883a 	mov	r2,zero
    7f90:	dfc00417 	ldw	ra,16(sp)
    7f94:	dcc00317 	ldw	r19,12(sp)
    7f98:	dc800217 	ldw	r18,8(sp)
    7f9c:	dc400117 	ldw	r17,4(sp)
    7fa0:	dc000017 	ldw	r16,0(sp)
    7fa4:	dec00504 	addi	sp,sp,20
    7fa8:	f800283a 	ret
    7fac:	2c800417 	ldw	r18,16(r5)
    7fb0:	903ff626 	beq	r18,zero,7f8c <__alt_mem_Flash_flash_data+0xf4007f8c>
    7fb4:	2c000017 	ldw	r16,0(r5)
    7fb8:	108000cc 	andi	r2,r2,3
    7fbc:	2c800015 	stw	r18,0(r5)
    7fc0:	84a1c83a 	sub	r16,r16,r18
    7fc4:	1000131e 	bne	r2,zero,8014 <__sflush_r+0x158>
    7fc8:	28800517 	ldw	r2,20(r5)
    7fcc:	88800215 	stw	r2,8(r17)
    7fd0:	04000316 	blt	zero,r16,7fe0 <__sflush_r+0x124>
    7fd4:	003fed06 	br	7f8c <__alt_mem_Flash_flash_data+0xf4007f8c>
    7fd8:	90a5883a 	add	r18,r18,r2
    7fdc:	043feb0e 	bge	zero,r16,7f8c <__alt_mem_Flash_flash_data+0xf4007f8c>
    7fe0:	88800917 	ldw	r2,36(r17)
    7fe4:	89400717 	ldw	r5,28(r17)
    7fe8:	800f883a 	mov	r7,r16
    7fec:	900d883a 	mov	r6,r18
    7ff0:	9809883a 	mov	r4,r19
    7ff4:	103ee83a 	callr	r2
    7ff8:	80a1c83a 	sub	r16,r16,r2
    7ffc:	00bff616 	blt	zero,r2,7fd8 <__alt_mem_Flash_flash_data+0xf4007fd8>
    8000:	88c0030b 	ldhu	r3,12(r17)
    8004:	00bfffc4 	movi	r2,-1
    8008:	18c01014 	ori	r3,r3,64
    800c:	88c0030d 	sth	r3,12(r17)
    8010:	003fdf06 	br	7f90 <__alt_mem_Flash_flash_data+0xf4007f90>
    8014:	0005883a 	mov	r2,zero
    8018:	003fec06 	br	7fcc <__alt_mem_Flash_flash_data+0xf4007fcc>
    801c:	88801415 	stw	r2,80(r17)
    8020:	003fd206 	br	7f6c <__alt_mem_Flash_flash_data+0xf4007f6c>
    8024:	28c00f17 	ldw	r3,60(r5)
    8028:	00ffb316 	blt	zero,r3,7ef8 <__alt_mem_Flash_flash_data+0xf4007ef8>
    802c:	003fd706 	br	7f8c <__alt_mem_Flash_flash_data+0xf4007f8c>
    8030:	89400717 	ldw	r5,28(r17)
    8034:	000d883a 	mov	r6,zero
    8038:	9809883a 	mov	r4,r19
    803c:	01c00044 	movi	r7,1
    8040:	403ee83a 	callr	r8
    8044:	100d883a 	mov	r6,r2
    8048:	00bfffc4 	movi	r2,-1
    804c:	30801426 	beq	r6,r2,80a0 <__sflush_r+0x1e4>
    8050:	8880030b 	ldhu	r2,12(r17)
    8054:	8a000a17 	ldw	r8,40(r17)
    8058:	003fae06 	br	7f14 <__alt_mem_Flash_flash_data+0xf4007f14>
    805c:	98c00017 	ldw	r3,0(r19)
    8060:	183fba26 	beq	r3,zero,7f4c <__alt_mem_Flash_flash_data+0xf4007f4c>
    8064:	01000744 	movi	r4,29
    8068:	19000626 	beq	r3,r4,8084 <__sflush_r+0x1c8>
    806c:	01000584 	movi	r4,22
    8070:	19000426 	beq	r3,r4,8084 <__sflush_r+0x1c8>
    8074:	88c0030b 	ldhu	r3,12(r17)
    8078:	18c01014 	ori	r3,r3,64
    807c:	88c0030d 	sth	r3,12(r17)
    8080:	003fc306 	br	7f90 <__alt_mem_Flash_flash_data+0xf4007f90>
    8084:	8880030b 	ldhu	r2,12(r17)
    8088:	88c00417 	ldw	r3,16(r17)
    808c:	88000115 	stw	zero,4(r17)
    8090:	10bdffcc 	andi	r2,r2,63487
    8094:	8880030d 	sth	r2,12(r17)
    8098:	88c00015 	stw	r3,0(r17)
    809c:	003fb306 	br	7f6c <__alt_mem_Flash_flash_data+0xf4007f6c>
    80a0:	98800017 	ldw	r2,0(r19)
    80a4:	103fea26 	beq	r2,zero,8050 <__alt_mem_Flash_flash_data+0xf4008050>
    80a8:	00c00744 	movi	r3,29
    80ac:	10c00226 	beq	r2,r3,80b8 <__sflush_r+0x1fc>
    80b0:	00c00584 	movi	r3,22
    80b4:	10ffd21e 	bne	r2,r3,8000 <__alt_mem_Flash_flash_data+0xf4008000>
    80b8:	9c000015 	stw	r16,0(r19)
    80bc:	0005883a 	mov	r2,zero
    80c0:	003fb306 	br	7f90 <__alt_mem_Flash_flash_data+0xf4007f90>

000080c4 <_fflush_r>:
    80c4:	defffd04 	addi	sp,sp,-12
    80c8:	dc000115 	stw	r16,4(sp)
    80cc:	dfc00215 	stw	ra,8(sp)
    80d0:	2021883a 	mov	r16,r4
    80d4:	20000226 	beq	r4,zero,80e0 <_fflush_r+0x1c>
    80d8:	20800e17 	ldw	r2,56(r4)
    80dc:	10000c26 	beq	r2,zero,8110 <_fflush_r+0x4c>
    80e0:	2880030f 	ldh	r2,12(r5)
    80e4:	1000051e 	bne	r2,zero,80fc <_fflush_r+0x38>
    80e8:	0005883a 	mov	r2,zero
    80ec:	dfc00217 	ldw	ra,8(sp)
    80f0:	dc000117 	ldw	r16,4(sp)
    80f4:	dec00304 	addi	sp,sp,12
    80f8:	f800283a 	ret
    80fc:	8009883a 	mov	r4,r16
    8100:	dfc00217 	ldw	ra,8(sp)
    8104:	dc000117 	ldw	r16,4(sp)
    8108:	dec00304 	addi	sp,sp,12
    810c:	0007ebc1 	jmpi	7ebc <__sflush_r>
    8110:	d9400015 	stw	r5,0(sp)
    8114:	00084a00 	call	84a0 <__sinit>
    8118:	d9400017 	ldw	r5,0(sp)
    811c:	003ff006 	br	80e0 <__alt_mem_Flash_flash_data+0xf40080e0>

00008120 <fflush>:
    8120:	20000526 	beq	r4,zero,8138 <fflush+0x18>
    8124:	008000b4 	movhi	r2,2
    8128:	10867e04 	addi	r2,r2,6648
    812c:	200b883a 	mov	r5,r4
    8130:	11000017 	ldw	r4,0(r2)
    8134:	00080c41 	jmpi	80c4 <_fflush_r>
    8138:	008000b4 	movhi	r2,2
    813c:	10867d04 	addi	r2,r2,6644
    8140:	11000017 	ldw	r4,0(r2)
    8144:	01400074 	movhi	r5,1
    8148:	29603104 	addi	r5,r5,-32572
    814c:	0008e881 	jmpi	8e88 <_fwalk_reent>

00008150 <__fp_lock>:
    8150:	0005883a 	mov	r2,zero
    8154:	f800283a 	ret

00008158 <__fp_unlock>:
    8158:	0005883a 	mov	r2,zero
    815c:	f800283a 	ret

00008160 <_cleanup_r>:
    8160:	01400074 	movhi	r5,1
    8164:	29771404 	addi	r5,r5,-9136
    8168:	0008e881 	jmpi	8e88 <_fwalk_reent>

0000816c <__sinit.part.1>:
    816c:	defff704 	addi	sp,sp,-36
    8170:	00c00074 	movhi	r3,1
    8174:	dfc00815 	stw	ra,32(sp)
    8178:	ddc00715 	stw	r23,28(sp)
    817c:	dd800615 	stw	r22,24(sp)
    8180:	dd400515 	stw	r21,20(sp)
    8184:	dd000415 	stw	r20,16(sp)
    8188:	dcc00315 	stw	r19,12(sp)
    818c:	dc800215 	stw	r18,8(sp)
    8190:	dc400115 	stw	r17,4(sp)
    8194:	dc000015 	stw	r16,0(sp)
    8198:	18e05804 	addi	r3,r3,-32416
    819c:	24000117 	ldw	r16,4(r4)
    81a0:	20c00f15 	stw	r3,60(r4)
    81a4:	2080bb04 	addi	r2,r4,748
    81a8:	00c000c4 	movi	r3,3
    81ac:	20c0b915 	stw	r3,740(r4)
    81b0:	2080ba15 	stw	r2,744(r4)
    81b4:	2000b815 	stw	zero,736(r4)
    81b8:	05c00204 	movi	r23,8
    81bc:	00800104 	movi	r2,4
    81c0:	2025883a 	mov	r18,r4
    81c4:	b80d883a 	mov	r6,r23
    81c8:	81001704 	addi	r4,r16,92
    81cc:	000b883a 	mov	r5,zero
    81d0:	80000015 	stw	zero,0(r16)
    81d4:	80000115 	stw	zero,4(r16)
    81d8:	80000215 	stw	zero,8(r16)
    81dc:	8080030d 	sth	r2,12(r16)
    81e0:	80001915 	stw	zero,100(r16)
    81e4:	8000038d 	sth	zero,14(r16)
    81e8:	80000415 	stw	zero,16(r16)
    81ec:	80000515 	stw	zero,20(r16)
    81f0:	80000615 	stw	zero,24(r16)
    81f4:	0001fa80 	call	1fa8 <memset>
    81f8:	05800074 	movhi	r22,1
    81fc:	94400217 	ldw	r17,8(r18)
    8200:	05400074 	movhi	r21,1
    8204:	05000074 	movhi	r20,1
    8208:	04c00074 	movhi	r19,1
    820c:	b5acb604 	addi	r22,r22,-19752
    8210:	ad6ccd04 	addi	r21,r21,-19660
    8214:	a52cec04 	addi	r20,r20,-19536
    8218:	9ced0304 	addi	r19,r19,-19444
    821c:	85800815 	stw	r22,32(r16)
    8220:	85400915 	stw	r21,36(r16)
    8224:	85000a15 	stw	r20,40(r16)
    8228:	84c00b15 	stw	r19,44(r16)
    822c:	84000715 	stw	r16,28(r16)
    8230:	00800284 	movi	r2,10
    8234:	8880030d 	sth	r2,12(r17)
    8238:	00800044 	movi	r2,1
    823c:	89001704 	addi	r4,r17,92
    8240:	b80d883a 	mov	r6,r23
    8244:	000b883a 	mov	r5,zero
    8248:	88000015 	stw	zero,0(r17)
    824c:	88000115 	stw	zero,4(r17)
    8250:	88000215 	stw	zero,8(r17)
    8254:	88001915 	stw	zero,100(r17)
    8258:	8880038d 	sth	r2,14(r17)
    825c:	88000415 	stw	zero,16(r17)
    8260:	88000515 	stw	zero,20(r17)
    8264:	88000615 	stw	zero,24(r17)
    8268:	0001fa80 	call	1fa8 <memset>
    826c:	94000317 	ldw	r16,12(r18)
    8270:	00800484 	movi	r2,18
    8274:	8c400715 	stw	r17,28(r17)
    8278:	8d800815 	stw	r22,32(r17)
    827c:	8d400915 	stw	r21,36(r17)
    8280:	8d000a15 	stw	r20,40(r17)
    8284:	8cc00b15 	stw	r19,44(r17)
    8288:	8080030d 	sth	r2,12(r16)
    828c:	00800084 	movi	r2,2
    8290:	80000015 	stw	zero,0(r16)
    8294:	80000115 	stw	zero,4(r16)
    8298:	80000215 	stw	zero,8(r16)
    829c:	80001915 	stw	zero,100(r16)
    82a0:	8080038d 	sth	r2,14(r16)
    82a4:	80000415 	stw	zero,16(r16)
    82a8:	80000515 	stw	zero,20(r16)
    82ac:	80000615 	stw	zero,24(r16)
    82b0:	81001704 	addi	r4,r16,92
    82b4:	000b883a 	mov	r5,zero
    82b8:	b80d883a 	mov	r6,r23
    82bc:	0001fa80 	call	1fa8 <memset>
    82c0:	00800044 	movi	r2,1
    82c4:	84000715 	stw	r16,28(r16)
    82c8:	85800815 	stw	r22,32(r16)
    82cc:	85400915 	stw	r21,36(r16)
    82d0:	85000a15 	stw	r20,40(r16)
    82d4:	84c00b15 	stw	r19,44(r16)
    82d8:	90800e15 	stw	r2,56(r18)
    82dc:	dfc00817 	ldw	ra,32(sp)
    82e0:	ddc00717 	ldw	r23,28(sp)
    82e4:	dd800617 	ldw	r22,24(sp)
    82e8:	dd400517 	ldw	r21,20(sp)
    82ec:	dd000417 	ldw	r20,16(sp)
    82f0:	dcc00317 	ldw	r19,12(sp)
    82f4:	dc800217 	ldw	r18,8(sp)
    82f8:	dc400117 	ldw	r17,4(sp)
    82fc:	dc000017 	ldw	r16,0(sp)
    8300:	dec00904 	addi	sp,sp,36
    8304:	f800283a 	ret

00008308 <__sfmoreglue>:
    8308:	defffc04 	addi	sp,sp,-16
    830c:	dc400115 	stw	r17,4(sp)
    8310:	2c7fffc4 	addi	r17,r5,-1
    8314:	8c401a24 	muli	r17,r17,104
    8318:	dc800215 	stw	r18,8(sp)
    831c:	2825883a 	mov	r18,r5
    8320:	89401d04 	addi	r5,r17,116
    8324:	dc000015 	stw	r16,0(sp)
    8328:	dfc00315 	stw	ra,12(sp)
    832c:	00091e40 	call	91e4 <_malloc_r>
    8330:	1021883a 	mov	r16,r2
    8334:	10000726 	beq	r2,zero,8354 <__sfmoreglue+0x4c>
    8338:	11000304 	addi	r4,r2,12
    833c:	10000015 	stw	zero,0(r2)
    8340:	14800115 	stw	r18,4(r2)
    8344:	11000215 	stw	r4,8(r2)
    8348:	000b883a 	mov	r5,zero
    834c:	89801a04 	addi	r6,r17,104
    8350:	0001fa80 	call	1fa8 <memset>
    8354:	8005883a 	mov	r2,r16
    8358:	dfc00317 	ldw	ra,12(sp)
    835c:	dc800217 	ldw	r18,8(sp)
    8360:	dc400117 	ldw	r17,4(sp)
    8364:	dc000017 	ldw	r16,0(sp)
    8368:	dec00404 	addi	sp,sp,16
    836c:	f800283a 	ret

00008370 <__sfp>:
    8370:	008000b4 	movhi	r2,2
    8374:	defffb04 	addi	sp,sp,-20
    8378:	10867d04 	addi	r2,r2,6644
    837c:	dc800215 	stw	r18,8(sp)
    8380:	14800017 	ldw	r18,0(r2)
    8384:	dcc00315 	stw	r19,12(sp)
    8388:	dfc00415 	stw	ra,16(sp)
    838c:	90800e17 	ldw	r2,56(r18)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	dc000015 	stw	r16,0(sp)
    8398:	2027883a 	mov	r19,r4
    839c:	1000021e 	bne	r2,zero,83a8 <__sfp+0x38>
    83a0:	9009883a 	mov	r4,r18
    83a4:	000816c0 	call	816c <__sinit.part.1>
    83a8:	9480b804 	addi	r18,r18,736
    83ac:	047fffc4 	movi	r17,-1
    83b0:	91400117 	ldw	r5,4(r18)
    83b4:	94000217 	ldw	r16,8(r18)
    83b8:	297fffc4 	addi	r5,r5,-1
    83bc:	28000a16 	blt	r5,zero,83e8 <__sfp+0x78>
    83c0:	8080030f 	ldh	r2,12(r16)
    83c4:	10000c26 	beq	r2,zero,83f8 <__sfp+0x88>
    83c8:	80c01d04 	addi	r3,r16,116
    83cc:	00000206 	br	83d8 <__sfp+0x68>
    83d0:	18bfe60f 	ldh	r2,-104(r3)
    83d4:	10000826 	beq	r2,zero,83f8 <__sfp+0x88>
    83d8:	297fffc4 	addi	r5,r5,-1
    83dc:	1c3ffd04 	addi	r16,r3,-12
    83e0:	18c01a04 	addi	r3,r3,104
    83e4:	2c7ffa1e 	bne	r5,r17,83d0 <__alt_mem_Flash_flash_data+0xf40083d0>
    83e8:	90800017 	ldw	r2,0(r18)
    83ec:	10001d26 	beq	r2,zero,8464 <__sfp+0xf4>
    83f0:	1025883a 	mov	r18,r2
    83f4:	003fee06 	br	83b0 <__alt_mem_Flash_flash_data+0xf40083b0>
    83f8:	00bfffc4 	movi	r2,-1
    83fc:	8080038d 	sth	r2,14(r16)
    8400:	00800044 	movi	r2,1
    8404:	8080030d 	sth	r2,12(r16)
    8408:	80001915 	stw	zero,100(r16)
    840c:	80000015 	stw	zero,0(r16)
    8410:	80000215 	stw	zero,8(r16)
    8414:	80000115 	stw	zero,4(r16)
    8418:	80000415 	stw	zero,16(r16)
    841c:	80000515 	stw	zero,20(r16)
    8420:	80000615 	stw	zero,24(r16)
    8424:	81001704 	addi	r4,r16,92
    8428:	000b883a 	mov	r5,zero
    842c:	01800204 	movi	r6,8
    8430:	0001fa80 	call	1fa8 <memset>
    8434:	8005883a 	mov	r2,r16
    8438:	80000c15 	stw	zero,48(r16)
    843c:	80000d15 	stw	zero,52(r16)
    8440:	80001115 	stw	zero,68(r16)
    8444:	80001215 	stw	zero,72(r16)
    8448:	dfc00417 	ldw	ra,16(sp)
    844c:	dcc00317 	ldw	r19,12(sp)
    8450:	dc800217 	ldw	r18,8(sp)
    8454:	dc400117 	ldw	r17,4(sp)
    8458:	dc000017 	ldw	r16,0(sp)
    845c:	dec00504 	addi	sp,sp,20
    8460:	f800283a 	ret
    8464:	9809883a 	mov	r4,r19
    8468:	01400104 	movi	r5,4
    846c:	00083080 	call	8308 <__sfmoreglue>
    8470:	90800015 	stw	r2,0(r18)
    8474:	103fde1e 	bne	r2,zero,83f0 <__alt_mem_Flash_flash_data+0xf40083f0>
    8478:	00800304 	movi	r2,12
    847c:	98800015 	stw	r2,0(r19)
    8480:	0005883a 	mov	r2,zero
    8484:	003ff006 	br	8448 <__alt_mem_Flash_flash_data+0xf4008448>

00008488 <_cleanup>:
    8488:	008000b4 	movhi	r2,2
    848c:	10867d04 	addi	r2,r2,6644
    8490:	11000017 	ldw	r4,0(r2)
    8494:	01400074 	movhi	r5,1
    8498:	29771404 	addi	r5,r5,-9136
    849c:	0008e881 	jmpi	8e88 <_fwalk_reent>

000084a0 <__sinit>:
    84a0:	20800e17 	ldw	r2,56(r4)
    84a4:	10000126 	beq	r2,zero,84ac <__sinit+0xc>
    84a8:	f800283a 	ret
    84ac:	000816c1 	jmpi	816c <__sinit.part.1>

000084b0 <__sfp_lock_acquire>:
    84b0:	f800283a 	ret

000084b4 <__sfp_lock_release>:
    84b4:	f800283a 	ret

000084b8 <__sinit_lock_acquire>:
    84b8:	f800283a 	ret

000084bc <__sinit_lock_release>:
    84bc:	f800283a 	ret

000084c0 <__fp_lock_all>:
    84c0:	008000b4 	movhi	r2,2
    84c4:	10867e04 	addi	r2,r2,6648
    84c8:	11000017 	ldw	r4,0(r2)
    84cc:	01400074 	movhi	r5,1
    84d0:	29605404 	addi	r5,r5,-32432
    84d4:	0008dc41 	jmpi	8dc4 <_fwalk>

000084d8 <__fp_unlock_all>:
    84d8:	008000b4 	movhi	r2,2
    84dc:	10867e04 	addi	r2,r2,6648
    84e0:	11000017 	ldw	r4,0(r2)
    84e4:	01400074 	movhi	r5,1
    84e8:	29605604 	addi	r5,r5,-32424
    84ec:	0008dc41 	jmpi	8dc4 <_fwalk>

000084f0 <_malloc_trim_r>:
    84f0:	defffb04 	addi	sp,sp,-20
    84f4:	dcc00315 	stw	r19,12(sp)
    84f8:	04c000b4 	movhi	r19,2
    84fc:	dc800215 	stw	r18,8(sp)
    8500:	dc400115 	stw	r17,4(sp)
    8504:	dc000015 	stw	r16,0(sp)
    8508:	dfc00415 	stw	ra,16(sp)
    850c:	2821883a 	mov	r16,r5
    8510:	9cff4f04 	addi	r19,r19,-708
    8514:	2025883a 	mov	r18,r4
    8518:	001212c0 	call	1212c <__malloc_lock>
    851c:	98800217 	ldw	r2,8(r19)
    8520:	14400117 	ldw	r17,4(r2)
    8524:	00bfff04 	movi	r2,-4
    8528:	88a2703a 	and	r17,r17,r2
    852c:	8c21c83a 	sub	r16,r17,r16
    8530:	8403fbc4 	addi	r16,r16,4079
    8534:	8020d33a 	srli	r16,r16,12
    8538:	0083ffc4 	movi	r2,4095
    853c:	843fffc4 	addi	r16,r16,-1
    8540:	8020933a 	slli	r16,r16,12
    8544:	1400060e 	bge	r2,r16,8560 <_malloc_trim_r+0x70>
    8548:	9009883a 	mov	r4,r18
    854c:	000b883a 	mov	r5,zero
    8550:	000b2840 	call	b284 <_sbrk_r>
    8554:	98c00217 	ldw	r3,8(r19)
    8558:	1c47883a 	add	r3,r3,r17
    855c:	10c00a26 	beq	r2,r3,8588 <_malloc_trim_r+0x98>
    8560:	9009883a 	mov	r4,r18
    8564:	001224c0 	call	1224c <__malloc_unlock>
    8568:	0005883a 	mov	r2,zero
    856c:	dfc00417 	ldw	ra,16(sp)
    8570:	dcc00317 	ldw	r19,12(sp)
    8574:	dc800217 	ldw	r18,8(sp)
    8578:	dc400117 	ldw	r17,4(sp)
    857c:	dc000017 	ldw	r16,0(sp)
    8580:	dec00504 	addi	sp,sp,20
    8584:	f800283a 	ret
    8588:	9009883a 	mov	r4,r18
    858c:	040bc83a 	sub	r5,zero,r16
    8590:	000b2840 	call	b284 <_sbrk_r>
    8594:	00ffffc4 	movi	r3,-1
    8598:	10c00d26 	beq	r2,r3,85d0 <_malloc_trim_r+0xe0>
    859c:	00c000b4 	movhi	r3,2
    85a0:	18cf7b04 	addi	r3,r3,15852
    85a4:	18800017 	ldw	r2,0(r3)
    85a8:	99000217 	ldw	r4,8(r19)
    85ac:	8c23c83a 	sub	r17,r17,r16
    85b0:	8c400054 	ori	r17,r17,1
    85b4:	1421c83a 	sub	r16,r2,r16
    85b8:	24400115 	stw	r17,4(r4)
    85bc:	9009883a 	mov	r4,r18
    85c0:	1c000015 	stw	r16,0(r3)
    85c4:	001224c0 	call	1224c <__malloc_unlock>
    85c8:	00800044 	movi	r2,1
    85cc:	003fe706 	br	856c <__alt_mem_Flash_flash_data+0xf400856c>
    85d0:	9009883a 	mov	r4,r18
    85d4:	000b883a 	mov	r5,zero
    85d8:	000b2840 	call	b284 <_sbrk_r>
    85dc:	99000217 	ldw	r4,8(r19)
    85e0:	014003c4 	movi	r5,15
    85e4:	1107c83a 	sub	r3,r2,r4
    85e8:	28ffdd0e 	bge	r5,r3,8560 <__alt_mem_Flash_flash_data+0xf4008560>
    85ec:	014000b4 	movhi	r5,2
    85f0:	29468004 	addi	r5,r5,6656
    85f4:	29400017 	ldw	r5,0(r5)
    85f8:	18c00054 	ori	r3,r3,1
    85fc:	20c00115 	stw	r3,4(r4)
    8600:	00c000b4 	movhi	r3,2
    8604:	1145c83a 	sub	r2,r2,r5
    8608:	18cf7b04 	addi	r3,r3,15852
    860c:	18800015 	stw	r2,0(r3)
    8610:	003fd306 	br	8560 <__alt_mem_Flash_flash_data+0xf4008560>

00008614 <_free_r>:
    8614:	28004c26 	beq	r5,zero,8748 <_free_r+0x134>
    8618:	defffd04 	addi	sp,sp,-12
    861c:	dc400115 	stw	r17,4(sp)
    8620:	dc000015 	stw	r16,0(sp)
    8624:	2023883a 	mov	r17,r4
    8628:	2821883a 	mov	r16,r5
    862c:	dfc00215 	stw	ra,8(sp)
    8630:	001212c0 	call	1212c <__malloc_lock>
    8634:	813fff17 	ldw	r4,-4(r16)
    8638:	00bfff84 	movi	r2,-2
    863c:	024000b4 	movhi	r9,2
    8640:	81bffe04 	addi	r6,r16,-8
    8644:	2084703a 	and	r2,r4,r2
    8648:	4a7f4f04 	addi	r9,r9,-708
    864c:	308b883a 	add	r5,r6,r2
    8650:	2a000117 	ldw	r8,4(r5)
    8654:	49c00217 	ldw	r7,8(r9)
    8658:	00ffff04 	movi	r3,-4
    865c:	40c6703a 	and	r3,r8,r3
    8660:	39405326 	beq	r7,r5,87b0 <_free_r+0x19c>
    8664:	28c00115 	stw	r3,4(r5)
    8668:	2100004c 	andi	r4,r4,1
    866c:	2000091e 	bne	r4,zero,8694 <_free_r+0x80>
    8670:	81fffe17 	ldw	r7,-8(r16)
    8674:	4a000204 	addi	r8,r9,8
    8678:	31cdc83a 	sub	r6,r6,r7
    867c:	31000217 	ldw	r4,8(r6)
    8680:	11c5883a 	add	r2,r2,r7
    8684:	22006126 	beq	r4,r8,880c <_free_r+0x1f8>
    8688:	31c00317 	ldw	r7,12(r6)
    868c:	21c00315 	stw	r7,12(r4)
    8690:	39000215 	stw	r4,8(r7)
    8694:	28c9883a 	add	r4,r5,r3
    8698:	21c00117 	ldw	r7,4(r4)
    869c:	39c0004c 	andi	r7,r7,1
    86a0:	38000d1e 	bne	r7,zero,86d8 <_free_r+0xc4>
    86a4:	29000217 	ldw	r4,8(r5)
    86a8:	10c5883a 	add	r2,r2,r3
    86ac:	00c000b4 	movhi	r3,2
    86b0:	18ff5104 	addi	r3,r3,-700
    86b4:	20c07526 	beq	r4,r3,888c <_free_r+0x278>
    86b8:	29c00317 	ldw	r7,12(r5)
    86bc:	11400054 	ori	r5,r2,1
    86c0:	3087883a 	add	r3,r6,r2
    86c4:	21c00315 	stw	r7,12(r4)
    86c8:	39000215 	stw	r4,8(r7)
    86cc:	31400115 	stw	r5,4(r6)
    86d0:	18800015 	stw	r2,0(r3)
    86d4:	00000406 	br	86e8 <_free_r+0xd4>
    86d8:	10c00054 	ori	r3,r2,1
    86dc:	30c00115 	stw	r3,4(r6)
    86e0:	3087883a 	add	r3,r6,r2
    86e4:	18800015 	stw	r2,0(r3)
    86e8:	00c07fc4 	movi	r3,511
    86ec:	18801736 	bltu	r3,r2,874c <_free_r+0x138>
    86f0:	1004d0fa 	srli	r2,r2,3
    86f4:	01400044 	movi	r5,1
    86f8:	49000117 	ldw	r4,4(r9)
    86fc:	1087883a 	add	r3,r2,r2
    8700:	18c7883a 	add	r3,r3,r3
    8704:	1005d0ba 	srai	r2,r2,2
    8708:	18c7883a 	add	r3,r3,r3
    870c:	1a47883a 	add	r3,r3,r9
    8710:	19c00217 	ldw	r7,8(r3)
    8714:	2884983a 	sll	r2,r5,r2
    8718:	30c00315 	stw	r3,12(r6)
    871c:	31c00215 	stw	r7,8(r6)
    8720:	1104b03a 	or	r2,r2,r4
    8724:	19800215 	stw	r6,8(r3)
    8728:	48800115 	stw	r2,4(r9)
    872c:	39800315 	stw	r6,12(r7)
    8730:	8809883a 	mov	r4,r17
    8734:	dfc00217 	ldw	ra,8(sp)
    8738:	dc400117 	ldw	r17,4(sp)
    873c:	dc000017 	ldw	r16,0(sp)
    8740:	dec00304 	addi	sp,sp,12
    8744:	001224c1 	jmpi	1224c <__malloc_unlock>
    8748:	f800283a 	ret
    874c:	1006d27a 	srli	r3,r2,9
    8750:	01000104 	movi	r4,4
    8754:	20c04036 	bltu	r4,r3,8858 <_free_r+0x244>
    8758:	1006d1ba 	srli	r3,r2,6
    875c:	19400e04 	addi	r5,r3,56
    8760:	2947883a 	add	r3,r5,r5
    8764:	18c7883a 	add	r3,r3,r3
    8768:	18c7883a 	add	r3,r3,r3
    876c:	1a49883a 	add	r4,r3,r9
    8770:	20c00217 	ldw	r3,8(r4)
    8774:	01c000b4 	movhi	r7,2
    8778:	39ff4f04 	addi	r7,r7,-708
    877c:	19003b26 	beq	r3,r4,886c <_free_r+0x258>
    8780:	01ffff04 	movi	r7,-4
    8784:	19400117 	ldw	r5,4(r3)
    8788:	29ca703a 	and	r5,r5,r7
    878c:	1140022e 	bgeu	r2,r5,8798 <_free_r+0x184>
    8790:	18c00217 	ldw	r3,8(r3)
    8794:	20fffb1e 	bne	r4,r3,8784 <__alt_mem_Flash_flash_data+0xf4008784>
    8798:	18800317 	ldw	r2,12(r3)
    879c:	30800315 	stw	r2,12(r6)
    87a0:	30c00215 	stw	r3,8(r6)
    87a4:	11800215 	stw	r6,8(r2)
    87a8:	19800315 	stw	r6,12(r3)
    87ac:	003fe006 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    87b0:	2100004c 	andi	r4,r4,1
    87b4:	1885883a 	add	r2,r3,r2
    87b8:	2000071e 	bne	r4,zero,87d8 <_free_r+0x1c4>
    87bc:	817ffe17 	ldw	r5,-8(r16)
    87c0:	314dc83a 	sub	r6,r6,r5
    87c4:	30c00317 	ldw	r3,12(r6)
    87c8:	31000217 	ldw	r4,8(r6)
    87cc:	1145883a 	add	r2,r2,r5
    87d0:	20c00315 	stw	r3,12(r4)
    87d4:	19000215 	stw	r4,8(r3)
    87d8:	10c00054 	ori	r3,r2,1
    87dc:	30c00115 	stw	r3,4(r6)
    87e0:	00c000b4 	movhi	r3,2
    87e4:	18c68104 	addi	r3,r3,6660
    87e8:	18c00017 	ldw	r3,0(r3)
    87ec:	49800215 	stw	r6,8(r9)
    87f0:	10ffcf36 	bltu	r2,r3,8730 <__alt_mem_Flash_flash_data+0xf4008730>
    87f4:	008000b4 	movhi	r2,2
    87f8:	108f4e04 	addi	r2,r2,15672
    87fc:	11400017 	ldw	r5,0(r2)
    8800:	8809883a 	mov	r4,r17
    8804:	00084f00 	call	84f0 <_malloc_trim_r>
    8808:	003fc906 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    880c:	28c9883a 	add	r4,r5,r3
    8810:	21000117 	ldw	r4,4(r4)
    8814:	2100004c 	andi	r4,r4,1
    8818:	20000a1e 	bne	r4,zero,8844 <_free_r+0x230>
    881c:	29000317 	ldw	r4,12(r5)
    8820:	29400217 	ldw	r5,8(r5)
    8824:	10c5883a 	add	r2,r2,r3
    8828:	10c00054 	ori	r3,r2,1
    882c:	29000315 	stw	r4,12(r5)
    8830:	21400215 	stw	r5,8(r4)
    8834:	30c00115 	stw	r3,4(r6)
    8838:	308d883a 	add	r6,r6,r2
    883c:	30800015 	stw	r2,0(r6)
    8840:	003fbb06 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    8844:	10c00054 	ori	r3,r2,1
    8848:	30c00115 	stw	r3,4(r6)
    884c:	308d883a 	add	r6,r6,r2
    8850:	30800015 	stw	r2,0(r6)
    8854:	003fb606 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    8858:	01000504 	movi	r4,20
    885c:	20c01436 	bltu	r4,r3,88b0 <_free_r+0x29c>
    8860:	194016c4 	addi	r5,r3,91
    8864:	2947883a 	add	r3,r5,r5
    8868:	003fbe06 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>
    886c:	280bd0ba 	srai	r5,r5,2
    8870:	00800044 	movi	r2,1
    8874:	39000117 	ldw	r4,4(r7)
    8878:	114a983a 	sll	r5,r2,r5
    887c:	1805883a 	mov	r2,r3
    8880:	2908b03a 	or	r4,r5,r4
    8884:	39000115 	stw	r4,4(r7)
    8888:	003fc406 	br	879c <__alt_mem_Flash_flash_data+0xf400879c>
    888c:	49800515 	stw	r6,20(r9)
    8890:	49800415 	stw	r6,16(r9)
    8894:	10c00054 	ori	r3,r2,1
    8898:	31000315 	stw	r4,12(r6)
    889c:	31000215 	stw	r4,8(r6)
    88a0:	30c00115 	stw	r3,4(r6)
    88a4:	308d883a 	add	r6,r6,r2
    88a8:	30800015 	stw	r2,0(r6)
    88ac:	003fa006 	br	8730 <__alt_mem_Flash_flash_data+0xf4008730>
    88b0:	01001504 	movi	r4,84
    88b4:	20c00436 	bltu	r4,r3,88c8 <_free_r+0x2b4>
    88b8:	1006d33a 	srli	r3,r2,12
    88bc:	19401b84 	addi	r5,r3,110
    88c0:	2947883a 	add	r3,r5,r5
    88c4:	003fa706 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>
    88c8:	01005504 	movi	r4,340
    88cc:	20c00436 	bltu	r4,r3,88e0 <_free_r+0x2cc>
    88d0:	1006d3fa 	srli	r3,r2,15
    88d4:	19401dc4 	addi	r5,r3,119
    88d8:	2947883a 	add	r3,r5,r5
    88dc:	003fa106 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>
    88e0:	01015504 	movi	r4,1364
    88e4:	20c00436 	bltu	r4,r3,88f8 <_free_r+0x2e4>
    88e8:	1006d4ba 	srli	r3,r2,18
    88ec:	19401f04 	addi	r5,r3,124
    88f0:	2947883a 	add	r3,r5,r5
    88f4:	003f9b06 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>
    88f8:	00c03f04 	movi	r3,252
    88fc:	01401f84 	movi	r5,126
    8900:	003f9806 	br	8764 <__alt_mem_Flash_flash_data+0xf4008764>

00008904 <__sfvwrite_r>:
    8904:	30800217 	ldw	r2,8(r6)
    8908:	10006726 	beq	r2,zero,8aa8 <__sfvwrite_r+0x1a4>
    890c:	defff404 	addi	sp,sp,-48
    8910:	dd000615 	stw	r20,24(sp)
    8914:	2029883a 	mov	r20,r4
    8918:	2900030b 	ldhu	r4,12(r5)
    891c:	ddc00915 	stw	r23,36(sp)
    8920:	dc000215 	stw	r16,8(sp)
    8924:	dfc00b15 	stw	ra,44(sp)
    8928:	df000a15 	stw	fp,40(sp)
    892c:	dd800815 	stw	r22,32(sp)
    8930:	dd400715 	stw	r21,28(sp)
    8934:	dcc00515 	stw	r19,20(sp)
    8938:	dc800415 	stw	r18,16(sp)
    893c:	dc400315 	stw	r17,12(sp)
    8940:	2080020c 	andi	r2,r4,8
    8944:	2821883a 	mov	r16,r5
    8948:	302f883a 	mov	r23,r6
    894c:	10002726 	beq	r2,zero,89ec <__sfvwrite_r+0xe8>
    8950:	28800417 	ldw	r2,16(r5)
    8954:	10002526 	beq	r2,zero,89ec <__sfvwrite_r+0xe8>
    8958:	2080008c 	andi	r2,r4,2
    895c:	bc400017 	ldw	r17,0(r23)
    8960:	10002a26 	beq	r2,zero,8a0c <__sfvwrite_r+0x108>
    8964:	05600034 	movhi	r21,32768
    8968:	0027883a 	mov	r19,zero
    896c:	0025883a 	mov	r18,zero
    8970:	ad7f0004 	addi	r21,r21,-1024
    8974:	980d883a 	mov	r6,r19
    8978:	a009883a 	mov	r4,r20
    897c:	90004626 	beq	r18,zero,8a98 <__sfvwrite_r+0x194>
    8980:	900f883a 	mov	r7,r18
    8984:	81400717 	ldw	r5,28(r16)
    8988:	ac80022e 	bgeu	r21,r18,8994 <__sfvwrite_r+0x90>
    898c:	01e00034 	movhi	r7,32768
    8990:	39ff0004 	addi	r7,r7,-1024
    8994:	80800917 	ldw	r2,36(r16)
    8998:	103ee83a 	callr	r2
    899c:	0080520e 	bge	zero,r2,8ae8 <__sfvwrite_r+0x1e4>
    89a0:	b8c00217 	ldw	r3,8(r23)
    89a4:	98a7883a 	add	r19,r19,r2
    89a8:	90a5c83a 	sub	r18,r18,r2
    89ac:	1885c83a 	sub	r2,r3,r2
    89b0:	b8800215 	stw	r2,8(r23)
    89b4:	103fef1e 	bne	r2,zero,8974 <__alt_mem_Flash_flash_data+0xf4008974>
    89b8:	0005883a 	mov	r2,zero
    89bc:	dfc00b17 	ldw	ra,44(sp)
    89c0:	df000a17 	ldw	fp,40(sp)
    89c4:	ddc00917 	ldw	r23,36(sp)
    89c8:	dd800817 	ldw	r22,32(sp)
    89cc:	dd400717 	ldw	r21,28(sp)
    89d0:	dd000617 	ldw	r20,24(sp)
    89d4:	dcc00517 	ldw	r19,20(sp)
    89d8:	dc800417 	ldw	r18,16(sp)
    89dc:	dc400317 	ldw	r17,12(sp)
    89e0:	dc000217 	ldw	r16,8(sp)
    89e4:	dec00c04 	addi	sp,sp,48
    89e8:	f800283a 	ret
    89ec:	a009883a 	mov	r4,r20
    89f0:	800b883a 	mov	r5,r16
    89f4:	00064400 	call	6440 <__swsetup_r>
    89f8:	1000ec1e 	bne	r2,zero,8dac <__sfvwrite_r+0x4a8>
    89fc:	8100030b 	ldhu	r4,12(r16)
    8a00:	bc400017 	ldw	r17,0(r23)
    8a04:	2080008c 	andi	r2,r4,2
    8a08:	103fd61e 	bne	r2,zero,8964 <__alt_mem_Flash_flash_data+0xf4008964>
    8a0c:	2080004c 	andi	r2,r4,1
    8a10:	10003a1e 	bne	r2,zero,8afc <__sfvwrite_r+0x1f8>
    8a14:	0039883a 	mov	fp,zero
    8a18:	0025883a 	mov	r18,zero
    8a1c:	90001a26 	beq	r18,zero,8a88 <__sfvwrite_r+0x184>
    8a20:	2080800c 	andi	r2,r4,512
    8a24:	85800217 	ldw	r22,8(r16)
    8a28:	10007626 	beq	r2,zero,8c04 <__sfvwrite_r+0x300>
    8a2c:	b027883a 	mov	r19,r22
    8a30:	95809436 	bltu	r18,r22,8c84 <__sfvwrite_r+0x380>
    8a34:	2081200c 	andi	r2,r4,1152
    8a38:	10009f1e 	bne	r2,zero,8cb8 <__sfvwrite_r+0x3b4>
    8a3c:	81000017 	ldw	r4,0(r16)
    8a40:	e00b883a 	mov	r5,fp
    8a44:	980d883a 	mov	r6,r19
    8a48:	0009bac0 	call	9bac <memmove>
    8a4c:	81000217 	ldw	r4,8(r16)
    8a50:	81400017 	ldw	r5,0(r16)
    8a54:	9005883a 	mov	r2,r18
    8a58:	2587c83a 	sub	r3,r4,r22
    8a5c:	2ce7883a 	add	r19,r5,r19
    8a60:	80c00215 	stw	r3,8(r16)
    8a64:	84c00015 	stw	r19,0(r16)
    8a68:	b8c00217 	ldw	r3,8(r23)
    8a6c:	e0b9883a 	add	fp,fp,r2
    8a70:	90a5c83a 	sub	r18,r18,r2
    8a74:	1885c83a 	sub	r2,r3,r2
    8a78:	b8800215 	stw	r2,8(r23)
    8a7c:	103fce26 	beq	r2,zero,89b8 <__alt_mem_Flash_flash_data+0xf40089b8>
    8a80:	8100030b 	ldhu	r4,12(r16)
    8a84:	903fe61e 	bne	r18,zero,8a20 <__alt_mem_Flash_flash_data+0xf4008a20>
    8a88:	8f000017 	ldw	fp,0(r17)
    8a8c:	8c800117 	ldw	r18,4(r17)
    8a90:	8c400204 	addi	r17,r17,8
    8a94:	003fe106 	br	8a1c <__alt_mem_Flash_flash_data+0xf4008a1c>
    8a98:	8cc00017 	ldw	r19,0(r17)
    8a9c:	8c800117 	ldw	r18,4(r17)
    8aa0:	8c400204 	addi	r17,r17,8
    8aa4:	003fb306 	br	8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8aa8:	0005883a 	mov	r2,zero
    8aac:	f800283a 	ret
    8ab0:	00a00034 	movhi	r2,32768
    8ab4:	10bfffc4 	addi	r2,r2,-1
    8ab8:	9009883a 	mov	r4,r18
    8abc:	1480012e 	bgeu	r2,r18,8ac4 <__sfvwrite_r+0x1c0>
    8ac0:	1009883a 	mov	r4,r2
    8ac4:	980b883a 	mov	r5,r19
    8ac8:	000ef900 	call	ef90 <__divsi3>
    8acc:	81400717 	ldw	r5,28(r16)
    8ad0:	80c00917 	ldw	r3,36(r16)
    8ad4:	988f383a 	mul	r7,r19,r2
    8ad8:	a009883a 	mov	r4,r20
    8adc:	e00d883a 	mov	r6,fp
    8ae0:	183ee83a 	callr	r3
    8ae4:	00bfe016 	blt	zero,r2,8a68 <__alt_mem_Flash_flash_data+0xf4008a68>
    8ae8:	8080030b 	ldhu	r2,12(r16)
    8aec:	10801014 	ori	r2,r2,64
    8af0:	8080030d 	sth	r2,12(r16)
    8af4:	00bfffc4 	movi	r2,-1
    8af8:	003fb006 	br	89bc <__alt_mem_Flash_flash_data+0xf40089bc>
    8afc:	0027883a 	mov	r19,zero
    8b00:	0011883a 	mov	r8,zero
    8b04:	0039883a 	mov	fp,zero
    8b08:	0025883a 	mov	r18,zero
    8b0c:	90001f26 	beq	r18,zero,8b8c <__sfvwrite_r+0x288>
    8b10:	40006026 	beq	r8,zero,8c94 <__sfvwrite_r+0x390>
    8b14:	982b883a 	mov	r21,r19
    8b18:	94c0012e 	bgeu	r18,r19,8b20 <__sfvwrite_r+0x21c>
    8b1c:	902b883a 	mov	r21,r18
    8b20:	81000017 	ldw	r4,0(r16)
    8b24:	80800417 	ldw	r2,16(r16)
    8b28:	a82d883a 	mov	r22,r21
    8b2c:	81800217 	ldw	r6,8(r16)
    8b30:	81c00517 	ldw	r7,20(r16)
    8b34:	1100022e 	bgeu	r2,r4,8b40 <__sfvwrite_r+0x23c>
    8b38:	31c7883a 	add	r3,r6,r7
    8b3c:	1d401816 	blt	r3,r21,8ba0 <__sfvwrite_r+0x29c>
    8b40:	a9c04416 	blt	r21,r7,8c54 <__sfvwrite_r+0x350>
    8b44:	80800917 	ldw	r2,36(r16)
    8b48:	81400717 	ldw	r5,28(r16)
    8b4c:	a009883a 	mov	r4,r20
    8b50:	da000115 	stw	r8,4(sp)
    8b54:	e00d883a 	mov	r6,fp
    8b58:	103ee83a 	callr	r2
    8b5c:	102d883a 	mov	r22,r2
    8b60:	da000117 	ldw	r8,4(sp)
    8b64:	00bfe00e 	bge	zero,r2,8ae8 <__alt_mem_Flash_flash_data+0xf4008ae8>
    8b68:	9da7c83a 	sub	r19,r19,r22
    8b6c:	98001f26 	beq	r19,zero,8bec <__sfvwrite_r+0x2e8>
    8b70:	b8800217 	ldw	r2,8(r23)
    8b74:	e5b9883a 	add	fp,fp,r22
    8b78:	95a5c83a 	sub	r18,r18,r22
    8b7c:	15adc83a 	sub	r22,r2,r22
    8b80:	bd800215 	stw	r22,8(r23)
    8b84:	b03f8c26 	beq	r22,zero,89b8 <__alt_mem_Flash_flash_data+0xf40089b8>
    8b88:	903fe11e 	bne	r18,zero,8b10 <__alt_mem_Flash_flash_data+0xf4008b10>
    8b8c:	8f000017 	ldw	fp,0(r17)
    8b90:	8c800117 	ldw	r18,4(r17)
    8b94:	0011883a 	mov	r8,zero
    8b98:	8c400204 	addi	r17,r17,8
    8b9c:	003fdb06 	br	8b0c <__alt_mem_Flash_flash_data+0xf4008b0c>
    8ba0:	180d883a 	mov	r6,r3
    8ba4:	e00b883a 	mov	r5,fp
    8ba8:	da000115 	stw	r8,4(sp)
    8bac:	d8c00015 	stw	r3,0(sp)
    8bb0:	0009bac0 	call	9bac <memmove>
    8bb4:	d8c00017 	ldw	r3,0(sp)
    8bb8:	80800017 	ldw	r2,0(r16)
    8bbc:	a009883a 	mov	r4,r20
    8bc0:	800b883a 	mov	r5,r16
    8bc4:	10c5883a 	add	r2,r2,r3
    8bc8:	80800015 	stw	r2,0(r16)
    8bcc:	d8c00015 	stw	r3,0(sp)
    8bd0:	00080c40 	call	80c4 <_fflush_r>
    8bd4:	d8c00017 	ldw	r3,0(sp)
    8bd8:	da000117 	ldw	r8,4(sp)
    8bdc:	103fc21e 	bne	r2,zero,8ae8 <__alt_mem_Flash_flash_data+0xf4008ae8>
    8be0:	182d883a 	mov	r22,r3
    8be4:	9da7c83a 	sub	r19,r19,r22
    8be8:	983fe11e 	bne	r19,zero,8b70 <__alt_mem_Flash_flash_data+0xf4008b70>
    8bec:	a009883a 	mov	r4,r20
    8bf0:	800b883a 	mov	r5,r16
    8bf4:	00080c40 	call	80c4 <_fflush_r>
    8bf8:	103fbb1e 	bne	r2,zero,8ae8 <__alt_mem_Flash_flash_data+0xf4008ae8>
    8bfc:	0011883a 	mov	r8,zero
    8c00:	003fdb06 	br	8b70 <__alt_mem_Flash_flash_data+0xf4008b70>
    8c04:	81000017 	ldw	r4,0(r16)
    8c08:	80800417 	ldw	r2,16(r16)
    8c0c:	11000236 	bltu	r2,r4,8c18 <__sfvwrite_r+0x314>
    8c10:	84c00517 	ldw	r19,20(r16)
    8c14:	94ffa62e 	bgeu	r18,r19,8ab0 <__alt_mem_Flash_flash_data+0xf4008ab0>
    8c18:	9027883a 	mov	r19,r18
    8c1c:	b480012e 	bgeu	r22,r18,8c24 <__sfvwrite_r+0x320>
    8c20:	b027883a 	mov	r19,r22
    8c24:	e00b883a 	mov	r5,fp
    8c28:	980d883a 	mov	r6,r19
    8c2c:	0009bac0 	call	9bac <memmove>
    8c30:	80800217 	ldw	r2,8(r16)
    8c34:	80c00017 	ldw	r3,0(r16)
    8c38:	14c5c83a 	sub	r2,r2,r19
    8c3c:	1cc7883a 	add	r3,r3,r19
    8c40:	80800215 	stw	r2,8(r16)
    8c44:	80c00015 	stw	r3,0(r16)
    8c48:	10004326 	beq	r2,zero,8d58 <__sfvwrite_r+0x454>
    8c4c:	9805883a 	mov	r2,r19
    8c50:	003f8506 	br	8a68 <__alt_mem_Flash_flash_data+0xf4008a68>
    8c54:	a80d883a 	mov	r6,r21
    8c58:	e00b883a 	mov	r5,fp
    8c5c:	da000115 	stw	r8,4(sp)
    8c60:	0009bac0 	call	9bac <memmove>
    8c64:	80800217 	ldw	r2,8(r16)
    8c68:	80c00017 	ldw	r3,0(r16)
    8c6c:	da000117 	ldw	r8,4(sp)
    8c70:	1545c83a 	sub	r2,r2,r21
    8c74:	1d6b883a 	add	r21,r3,r21
    8c78:	80800215 	stw	r2,8(r16)
    8c7c:	85400015 	stw	r21,0(r16)
    8c80:	003fb906 	br	8b68 <__alt_mem_Flash_flash_data+0xf4008b68>
    8c84:	81000017 	ldw	r4,0(r16)
    8c88:	902d883a 	mov	r22,r18
    8c8c:	9027883a 	mov	r19,r18
    8c90:	003f6b06 	br	8a40 <__alt_mem_Flash_flash_data+0xf4008a40>
    8c94:	e009883a 	mov	r4,fp
    8c98:	01400284 	movi	r5,10
    8c9c:	900d883a 	mov	r6,r18
    8ca0:	000998c0 	call	998c <memchr>
    8ca4:	10003e26 	beq	r2,zero,8da0 <__sfvwrite_r+0x49c>
    8ca8:	10800044 	addi	r2,r2,1
    8cac:	1727c83a 	sub	r19,r2,fp
    8cb0:	02000044 	movi	r8,1
    8cb4:	003f9706 	br	8b14 <__alt_mem_Flash_flash_data+0xf4008b14>
    8cb8:	80800517 	ldw	r2,20(r16)
    8cbc:	81400417 	ldw	r5,16(r16)
    8cc0:	80c00017 	ldw	r3,0(r16)
    8cc4:	10a7883a 	add	r19,r2,r2
    8cc8:	9885883a 	add	r2,r19,r2
    8ccc:	1026d7fa 	srli	r19,r2,31
    8cd0:	196bc83a 	sub	r21,r3,r5
    8cd4:	a9800044 	addi	r6,r21,1
    8cd8:	9885883a 	add	r2,r19,r2
    8cdc:	1027d07a 	srai	r19,r2,1
    8ce0:	3485883a 	add	r2,r6,r18
    8ce4:	980d883a 	mov	r6,r19
    8ce8:	9880022e 	bgeu	r19,r2,8cf4 <__sfvwrite_r+0x3f0>
    8cec:	1027883a 	mov	r19,r2
    8cf0:	100d883a 	mov	r6,r2
    8cf4:	2101000c 	andi	r4,r4,1024
    8cf8:	20001c26 	beq	r4,zero,8d6c <__sfvwrite_r+0x468>
    8cfc:	a009883a 	mov	r4,r20
    8d00:	300b883a 	mov	r5,r6
    8d04:	00091e40 	call	91e4 <_malloc_r>
    8d08:	102d883a 	mov	r22,r2
    8d0c:	10002926 	beq	r2,zero,8db4 <__sfvwrite_r+0x4b0>
    8d10:	81400417 	ldw	r5,16(r16)
    8d14:	1009883a 	mov	r4,r2
    8d18:	a80d883a 	mov	r6,r21
    8d1c:	0009a740 	call	9a74 <memcpy>
    8d20:	8080030b 	ldhu	r2,12(r16)
    8d24:	00fedfc4 	movi	r3,-1153
    8d28:	10c4703a 	and	r2,r2,r3
    8d2c:	10802014 	ori	r2,r2,128
    8d30:	8080030d 	sth	r2,12(r16)
    8d34:	b549883a 	add	r4,r22,r21
    8d38:	9d4bc83a 	sub	r5,r19,r21
    8d3c:	85800415 	stw	r22,16(r16)
    8d40:	84c00515 	stw	r19,20(r16)
    8d44:	81000015 	stw	r4,0(r16)
    8d48:	902d883a 	mov	r22,r18
    8d4c:	81400215 	stw	r5,8(r16)
    8d50:	9027883a 	mov	r19,r18
    8d54:	003f3a06 	br	8a40 <__alt_mem_Flash_flash_data+0xf4008a40>
    8d58:	a009883a 	mov	r4,r20
    8d5c:	800b883a 	mov	r5,r16
    8d60:	00080c40 	call	80c4 <_fflush_r>
    8d64:	103fb926 	beq	r2,zero,8c4c <__alt_mem_Flash_flash_data+0xf4008c4c>
    8d68:	003f5f06 	br	8ae8 <__alt_mem_Flash_flash_data+0xf4008ae8>
    8d6c:	a009883a 	mov	r4,r20
    8d70:	000aca80 	call	aca8 <_realloc_r>
    8d74:	102d883a 	mov	r22,r2
    8d78:	103fee1e 	bne	r2,zero,8d34 <__alt_mem_Flash_flash_data+0xf4008d34>
    8d7c:	81400417 	ldw	r5,16(r16)
    8d80:	a009883a 	mov	r4,r20
    8d84:	00086140 	call	8614 <_free_r>
    8d88:	8080030b 	ldhu	r2,12(r16)
    8d8c:	00ffdfc4 	movi	r3,-129
    8d90:	1884703a 	and	r2,r3,r2
    8d94:	00c00304 	movi	r3,12
    8d98:	a0c00015 	stw	r3,0(r20)
    8d9c:	003f5306 	br	8aec <__alt_mem_Flash_flash_data+0xf4008aec>
    8da0:	94c00044 	addi	r19,r18,1
    8da4:	02000044 	movi	r8,1
    8da8:	003f5a06 	br	8b14 <__alt_mem_Flash_flash_data+0xf4008b14>
    8dac:	00bfffc4 	movi	r2,-1
    8db0:	003f0206 	br	89bc <__alt_mem_Flash_flash_data+0xf40089bc>
    8db4:	00800304 	movi	r2,12
    8db8:	a0800015 	stw	r2,0(r20)
    8dbc:	8080030b 	ldhu	r2,12(r16)
    8dc0:	003f4a06 	br	8aec <__alt_mem_Flash_flash_data+0xf4008aec>

00008dc4 <_fwalk>:
    8dc4:	defff704 	addi	sp,sp,-36
    8dc8:	dd000415 	stw	r20,16(sp)
    8dcc:	dfc00815 	stw	ra,32(sp)
    8dd0:	ddc00715 	stw	r23,28(sp)
    8dd4:	dd800615 	stw	r22,24(sp)
    8dd8:	dd400515 	stw	r21,20(sp)
    8ddc:	dcc00315 	stw	r19,12(sp)
    8de0:	dc800215 	stw	r18,8(sp)
    8de4:	dc400115 	stw	r17,4(sp)
    8de8:	dc000015 	stw	r16,0(sp)
    8dec:	2500b804 	addi	r20,r4,736
    8df0:	a0002326 	beq	r20,zero,8e80 <_fwalk+0xbc>
    8df4:	282b883a 	mov	r21,r5
    8df8:	002f883a 	mov	r23,zero
    8dfc:	05800044 	movi	r22,1
    8e00:	04ffffc4 	movi	r19,-1
    8e04:	a4400117 	ldw	r17,4(r20)
    8e08:	a4800217 	ldw	r18,8(r20)
    8e0c:	8c7fffc4 	addi	r17,r17,-1
    8e10:	88000d16 	blt	r17,zero,8e48 <_fwalk+0x84>
    8e14:	94000304 	addi	r16,r18,12
    8e18:	94800384 	addi	r18,r18,14
    8e1c:	80c0000b 	ldhu	r3,0(r16)
    8e20:	8c7fffc4 	addi	r17,r17,-1
    8e24:	813ffd04 	addi	r4,r16,-12
    8e28:	b0c0042e 	bgeu	r22,r3,8e3c <_fwalk+0x78>
    8e2c:	90c0000f 	ldh	r3,0(r18)
    8e30:	1cc00226 	beq	r3,r19,8e3c <_fwalk+0x78>
    8e34:	a83ee83a 	callr	r21
    8e38:	b8aeb03a 	or	r23,r23,r2
    8e3c:	84001a04 	addi	r16,r16,104
    8e40:	94801a04 	addi	r18,r18,104
    8e44:	8cfff51e 	bne	r17,r19,8e1c <__alt_mem_Flash_flash_data+0xf4008e1c>
    8e48:	a5000017 	ldw	r20,0(r20)
    8e4c:	a03fed1e 	bne	r20,zero,8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    8e50:	b805883a 	mov	r2,r23
    8e54:	dfc00817 	ldw	ra,32(sp)
    8e58:	ddc00717 	ldw	r23,28(sp)
    8e5c:	dd800617 	ldw	r22,24(sp)
    8e60:	dd400517 	ldw	r21,20(sp)
    8e64:	dd000417 	ldw	r20,16(sp)
    8e68:	dcc00317 	ldw	r19,12(sp)
    8e6c:	dc800217 	ldw	r18,8(sp)
    8e70:	dc400117 	ldw	r17,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00904 	addi	sp,sp,36
    8e7c:	f800283a 	ret
    8e80:	002f883a 	mov	r23,zero
    8e84:	003ff206 	br	8e50 <__alt_mem_Flash_flash_data+0xf4008e50>

00008e88 <_fwalk_reent>:
    8e88:	defff704 	addi	sp,sp,-36
    8e8c:	dd400515 	stw	r21,20(sp)
    8e90:	dfc00815 	stw	ra,32(sp)
    8e94:	ddc00715 	stw	r23,28(sp)
    8e98:	dd800615 	stw	r22,24(sp)
    8e9c:	dd000415 	stw	r20,16(sp)
    8ea0:	dcc00315 	stw	r19,12(sp)
    8ea4:	dc800215 	stw	r18,8(sp)
    8ea8:	dc400115 	stw	r17,4(sp)
    8eac:	dc000015 	stw	r16,0(sp)
    8eb0:	2540b804 	addi	r21,r4,736
    8eb4:	a8002326 	beq	r21,zero,8f44 <_fwalk_reent+0xbc>
    8eb8:	2829883a 	mov	r20,r5
    8ebc:	202d883a 	mov	r22,r4
    8ec0:	002f883a 	mov	r23,zero
    8ec4:	04c00044 	movi	r19,1
    8ec8:	04bfffc4 	movi	r18,-1
    8ecc:	ac400117 	ldw	r17,4(r21)
    8ed0:	ac000217 	ldw	r16,8(r21)
    8ed4:	8c7fffc4 	addi	r17,r17,-1
    8ed8:	88000c16 	blt	r17,zero,8f0c <_fwalk_reent+0x84>
    8edc:	84000304 	addi	r16,r16,12
    8ee0:	80c0000b 	ldhu	r3,0(r16)
    8ee4:	8c7fffc4 	addi	r17,r17,-1
    8ee8:	817ffd04 	addi	r5,r16,-12
    8eec:	98c0052e 	bgeu	r19,r3,8f04 <_fwalk_reent+0x7c>
    8ef0:	80c0008f 	ldh	r3,2(r16)
    8ef4:	b009883a 	mov	r4,r22
    8ef8:	1c800226 	beq	r3,r18,8f04 <_fwalk_reent+0x7c>
    8efc:	a03ee83a 	callr	r20
    8f00:	b8aeb03a 	or	r23,r23,r2
    8f04:	84001a04 	addi	r16,r16,104
    8f08:	8cbff51e 	bne	r17,r18,8ee0 <__alt_mem_Flash_flash_data+0xf4008ee0>
    8f0c:	ad400017 	ldw	r21,0(r21)
    8f10:	a83fee1e 	bne	r21,zero,8ecc <__alt_mem_Flash_flash_data+0xf4008ecc>
    8f14:	b805883a 	mov	r2,r23
    8f18:	dfc00817 	ldw	ra,32(sp)
    8f1c:	ddc00717 	ldw	r23,28(sp)
    8f20:	dd800617 	ldw	r22,24(sp)
    8f24:	dd400517 	ldw	r21,20(sp)
    8f28:	dd000417 	ldw	r20,16(sp)
    8f2c:	dcc00317 	ldw	r19,12(sp)
    8f30:	dc800217 	ldw	r18,8(sp)
    8f34:	dc400117 	ldw	r17,4(sp)
    8f38:	dc000017 	ldw	r16,0(sp)
    8f3c:	dec00904 	addi	sp,sp,36
    8f40:	f800283a 	ret
    8f44:	002f883a 	mov	r23,zero
    8f48:	003ff206 	br	8f14 <__alt_mem_Flash_flash_data+0xf4008f14>

00008f4c <_setlocale_r>:
    8f4c:	30001b26 	beq	r6,zero,8fbc <_setlocale_r+0x70>
    8f50:	014000b4 	movhi	r5,2
    8f54:	defffe04 	addi	sp,sp,-8
    8f58:	297c3a04 	addi	r5,r5,-3864
    8f5c:	3009883a 	mov	r4,r6
    8f60:	dc000015 	stw	r16,0(sp)
    8f64:	dfc00115 	stw	ra,4(sp)
    8f68:	3021883a 	mov	r16,r6
    8f6c:	00022b40 	call	22b4 <strcmp>
    8f70:	1000061e 	bne	r2,zero,8f8c <_setlocale_r+0x40>
    8f74:	008000b4 	movhi	r2,2
    8f78:	10bc3904 	addi	r2,r2,-3868
    8f7c:	dfc00117 	ldw	ra,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00204 	addi	sp,sp,8
    8f88:	f800283a 	ret
    8f8c:	014000b4 	movhi	r5,2
    8f90:	297c3904 	addi	r5,r5,-3868
    8f94:	8009883a 	mov	r4,r16
    8f98:	00022b40 	call	22b4 <strcmp>
    8f9c:	103ff526 	beq	r2,zero,8f74 <__alt_mem_Flash_flash_data+0xf4008f74>
    8fa0:	014000b4 	movhi	r5,2
    8fa4:	297c1c04 	addi	r5,r5,-3984
    8fa8:	8009883a 	mov	r4,r16
    8fac:	00022b40 	call	22b4 <strcmp>
    8fb0:	103ff026 	beq	r2,zero,8f74 <__alt_mem_Flash_flash_data+0xf4008f74>
    8fb4:	0005883a 	mov	r2,zero
    8fb8:	003ff006 	br	8f7c <__alt_mem_Flash_flash_data+0xf4008f7c>
    8fbc:	008000b4 	movhi	r2,2
    8fc0:	10bc3904 	addi	r2,r2,-3868
    8fc4:	f800283a 	ret

00008fc8 <__locale_charset>:
    8fc8:	008000b4 	movhi	r2,2
    8fcc:	10bf3904 	addi	r2,r2,-796
    8fd0:	f800283a 	ret

00008fd4 <__locale_mb_cur_max>:
    8fd4:	008000b4 	movhi	r2,2
    8fd8:	10867f04 	addi	r2,r2,6652
    8fdc:	10800017 	ldw	r2,0(r2)
    8fe0:	f800283a 	ret

00008fe4 <__locale_msgcharset>:
    8fe4:	008000b4 	movhi	r2,2
    8fe8:	10bf3104 	addi	r2,r2,-828
    8fec:	f800283a 	ret

00008ff0 <__locale_cjk_lang>:
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	f800283a 	ret

00008ff8 <_localeconv_r>:
    8ff8:	008000b4 	movhi	r2,2
    8ffc:	10bf4104 	addi	r2,r2,-764
    9000:	f800283a 	ret

00009004 <setlocale>:
    9004:	00c000b4 	movhi	r3,2
    9008:	18c67e04 	addi	r3,r3,6648
    900c:	2005883a 	mov	r2,r4
    9010:	19000017 	ldw	r4,0(r3)
    9014:	280d883a 	mov	r6,r5
    9018:	100b883a 	mov	r5,r2
    901c:	0008f4c1 	jmpi	8f4c <_setlocale_r>

00009020 <localeconv>:
    9020:	008000b4 	movhi	r2,2
    9024:	10bf4104 	addi	r2,r2,-764
    9028:	f800283a 	ret

0000902c <__smakebuf_r>:
    902c:	2880030b 	ldhu	r2,12(r5)
    9030:	10c0008c 	andi	r3,r2,2
    9034:	1800401e 	bne	r3,zero,9138 <__smakebuf_r+0x10c>
    9038:	deffec04 	addi	sp,sp,-80
    903c:	dc000f15 	stw	r16,60(sp)
    9040:	2821883a 	mov	r16,r5
    9044:	2940038f 	ldh	r5,14(r5)
    9048:	dc401015 	stw	r17,64(sp)
    904c:	dfc01315 	stw	ra,76(sp)
    9050:	dcc01215 	stw	r19,72(sp)
    9054:	dc801115 	stw	r18,68(sp)
    9058:	2023883a 	mov	r17,r4
    905c:	28001b16 	blt	r5,zero,90cc <__smakebuf_r+0xa0>
    9060:	d80d883a 	mov	r6,sp
    9064:	000df340 	call	df34 <_fstat_r>
    9068:	10001716 	blt	r2,zero,90c8 <__smakebuf_r+0x9c>
    906c:	d8800117 	ldw	r2,4(sp)
    9070:	00e00014 	movui	r3,32768
    9074:	10bc000c 	andi	r2,r2,61440
    9078:	10c03726 	beq	r2,r3,9158 <__smakebuf_r+0x12c>
    907c:	80c0030b 	ldhu	r3,12(r16)
    9080:	18c20014 	ori	r3,r3,2048
    9084:	80c0030d 	sth	r3,12(r16)
    9088:	00c80004 	movi	r3,8192
    908c:	10c03c1e 	bne	r2,r3,9180 <__smakebuf_r+0x154>
    9090:	8140038f 	ldh	r5,14(r16)
    9094:	8809883a 	mov	r4,r17
    9098:	000df8c0 	call	df8c <_isatty_r>
    909c:	10004e26 	beq	r2,zero,91d8 <__smakebuf_r+0x1ac>
    90a0:	8080030b 	ldhu	r2,12(r16)
    90a4:	04c00044 	movi	r19,1
    90a8:	80c010c4 	addi	r3,r16,67
    90ac:	14c4b03a 	or	r2,r2,r19
    90b0:	8080030d 	sth	r2,12(r16)
    90b4:	80c00015 	stw	r3,0(r16)
    90b8:	80c00415 	stw	r3,16(r16)
    90bc:	84c00515 	stw	r19,20(r16)
    90c0:	04810004 	movi	r18,1024
    90c4:	00000706 	br	90e4 <__smakebuf_r+0xb8>
    90c8:	8080030b 	ldhu	r2,12(r16)
    90cc:	10c0200c 	andi	r3,r2,128
    90d0:	18001f1e 	bne	r3,zero,9150 <__smakebuf_r+0x124>
    90d4:	04810004 	movi	r18,1024
    90d8:	10820014 	ori	r2,r2,2048
    90dc:	8080030d 	sth	r2,12(r16)
    90e0:	0027883a 	mov	r19,zero
    90e4:	8809883a 	mov	r4,r17
    90e8:	900b883a 	mov	r5,r18
    90ec:	00091e40 	call	91e4 <_malloc_r>
    90f0:	10002e26 	beq	r2,zero,91ac <__smakebuf_r+0x180>
    90f4:	80c0030b 	ldhu	r3,12(r16)
    90f8:	01000074 	movhi	r4,1
    90fc:	21205804 	addi	r4,r4,-32416
    9100:	89000f15 	stw	r4,60(r17)
    9104:	18c02014 	ori	r3,r3,128
    9108:	80c0030d 	sth	r3,12(r16)
    910c:	80800015 	stw	r2,0(r16)
    9110:	80800415 	stw	r2,16(r16)
    9114:	84800515 	stw	r18,20(r16)
    9118:	98001c1e 	bne	r19,zero,918c <__smakebuf_r+0x160>
    911c:	dfc01317 	ldw	ra,76(sp)
    9120:	dcc01217 	ldw	r19,72(sp)
    9124:	dc801117 	ldw	r18,68(sp)
    9128:	dc401017 	ldw	r17,64(sp)
    912c:	dc000f17 	ldw	r16,60(sp)
    9130:	dec01404 	addi	sp,sp,80
    9134:	f800283a 	ret
    9138:	288010c4 	addi	r2,r5,67
    913c:	28800015 	stw	r2,0(r5)
    9140:	28800415 	stw	r2,16(r5)
    9144:	00800044 	movi	r2,1
    9148:	28800515 	stw	r2,20(r5)
    914c:	f800283a 	ret
    9150:	04801004 	movi	r18,64
    9154:	003fe006 	br	90d8 <__alt_mem_Flash_flash_data+0xf40090d8>
    9158:	81000a17 	ldw	r4,40(r16)
    915c:	00c00074 	movhi	r3,1
    9160:	18ecec04 	addi	r3,r3,-19536
    9164:	20ffc51e 	bne	r4,r3,907c <__alt_mem_Flash_flash_data+0xf400907c>
    9168:	80c0030b 	ldhu	r3,12(r16)
    916c:	01010004 	movi	r4,1024
    9170:	81001315 	stw	r4,76(r16)
    9174:	1906b03a 	or	r3,r3,r4
    9178:	80c0030d 	sth	r3,12(r16)
    917c:	003fc206 	br	9088 <__alt_mem_Flash_flash_data+0xf4009088>
    9180:	0027883a 	mov	r19,zero
    9184:	04810004 	movi	r18,1024
    9188:	003fd606 	br	90e4 <__alt_mem_Flash_flash_data+0xf40090e4>
    918c:	8140038f 	ldh	r5,14(r16)
    9190:	8809883a 	mov	r4,r17
    9194:	000df8c0 	call	df8c <_isatty_r>
    9198:	103fe026 	beq	r2,zero,911c <__alt_mem_Flash_flash_data+0xf400911c>
    919c:	8080030b 	ldhu	r2,12(r16)
    91a0:	10800054 	ori	r2,r2,1
    91a4:	8080030d 	sth	r2,12(r16)
    91a8:	003fdc06 	br	911c <__alt_mem_Flash_flash_data+0xf400911c>
    91ac:	8080030b 	ldhu	r2,12(r16)
    91b0:	10c0800c 	andi	r3,r2,512
    91b4:	183fd91e 	bne	r3,zero,911c <__alt_mem_Flash_flash_data+0xf400911c>
    91b8:	10800094 	ori	r2,r2,2
    91bc:	80c010c4 	addi	r3,r16,67
    91c0:	8080030d 	sth	r2,12(r16)
    91c4:	00800044 	movi	r2,1
    91c8:	80c00015 	stw	r3,0(r16)
    91cc:	80c00415 	stw	r3,16(r16)
    91d0:	80800515 	stw	r2,20(r16)
    91d4:	003fd106 	br	911c <__alt_mem_Flash_flash_data+0xf400911c>
    91d8:	04c00044 	movi	r19,1
    91dc:	04810004 	movi	r18,1024
    91e0:	003fc006 	br	90e4 <__alt_mem_Flash_flash_data+0xf40090e4>

000091e4 <_malloc_r>:
    91e4:	defff504 	addi	sp,sp,-44
    91e8:	dc800315 	stw	r18,12(sp)
    91ec:	dfc00a15 	stw	ra,40(sp)
    91f0:	df000915 	stw	fp,36(sp)
    91f4:	ddc00815 	stw	r23,32(sp)
    91f8:	dd800715 	stw	r22,28(sp)
    91fc:	dd400615 	stw	r21,24(sp)
    9200:	dd000515 	stw	r20,20(sp)
    9204:	dcc00415 	stw	r19,16(sp)
    9208:	dc400215 	stw	r17,8(sp)
    920c:	dc000115 	stw	r16,4(sp)
    9210:	288002c4 	addi	r2,r5,11
    9214:	00c00584 	movi	r3,22
    9218:	2025883a 	mov	r18,r4
    921c:	18802a2e 	bgeu	r3,r2,92c8 <_malloc_r+0xe4>
    9220:	047ffe04 	movi	r17,-8
    9224:	1462703a 	and	r17,r2,r17
    9228:	88009e16 	blt	r17,zero,94a4 <_malloc_r+0x2c0>
    922c:	89409d36 	bltu	r17,r5,94a4 <_malloc_r+0x2c0>
    9230:	001212c0 	call	1212c <__malloc_lock>
    9234:	00807dc4 	movi	r2,503
    9238:	14402736 	bltu	r2,r17,92d8 <_malloc_r+0xf4>
    923c:	8806d0fa 	srli	r3,r17,3
    9240:	04c000b4 	movhi	r19,2
    9244:	9cff4f04 	addi	r19,r19,-708
    9248:	18c5883a 	add	r2,r3,r3
    924c:	1085883a 	add	r2,r2,r2
    9250:	1085883a 	add	r2,r2,r2
    9254:	9885883a 	add	r2,r19,r2
    9258:	14000317 	ldw	r16,12(r2)
    925c:	80814a26 	beq	r16,r2,9788 <_malloc_r+0x5a4>
    9260:	80c00117 	ldw	r3,4(r16)
    9264:	81000317 	ldw	r4,12(r16)
    9268:	00bfff04 	movi	r2,-4
    926c:	1884703a 	and	r2,r3,r2
    9270:	81400217 	ldw	r5,8(r16)
    9274:	8085883a 	add	r2,r16,r2
    9278:	10c00117 	ldw	r3,4(r2)
    927c:	29000315 	stw	r4,12(r5)
    9280:	21400215 	stw	r5,8(r4)
    9284:	18c00054 	ori	r3,r3,1
    9288:	10c00115 	stw	r3,4(r2)
    928c:	9009883a 	mov	r4,r18
    9290:	001224c0 	call	1224c <__malloc_unlock>
    9294:	80800204 	addi	r2,r16,8
    9298:	dfc00a17 	ldw	ra,40(sp)
    929c:	df000917 	ldw	fp,36(sp)
    92a0:	ddc00817 	ldw	r23,32(sp)
    92a4:	dd800717 	ldw	r22,28(sp)
    92a8:	dd400617 	ldw	r21,24(sp)
    92ac:	dd000517 	ldw	r20,20(sp)
    92b0:	dcc00417 	ldw	r19,16(sp)
    92b4:	dc800317 	ldw	r18,12(sp)
    92b8:	dc400217 	ldw	r17,8(sp)
    92bc:	dc000117 	ldw	r16,4(sp)
    92c0:	dec00b04 	addi	sp,sp,44
    92c4:	f800283a 	ret
    92c8:	04400404 	movi	r17,16
    92cc:	89407536 	bltu	r17,r5,94a4 <_malloc_r+0x2c0>
    92d0:	001212c0 	call	1212c <__malloc_lock>
    92d4:	003fd906 	br	923c <__alt_mem_Flash_flash_data+0xf400923c>
    92d8:	8806d27a 	srli	r3,r17,9
    92dc:	18007526 	beq	r3,zero,94b4 <_malloc_r+0x2d0>
    92e0:	00800104 	movi	r2,4
    92e4:	10c0ef36 	bltu	r2,r3,96a4 <_malloc_r+0x4c0>
    92e8:	8806d1ba 	srli	r3,r17,6
    92ec:	19c00e04 	addi	r7,r3,56
    92f0:	39cb883a 	add	r5,r7,r7
    92f4:	04c000b4 	movhi	r19,2
    92f8:	294b883a 	add	r5,r5,r5
    92fc:	9cff4f04 	addi	r19,r19,-708
    9300:	294b883a 	add	r5,r5,r5
    9304:	994b883a 	add	r5,r19,r5
    9308:	2c000317 	ldw	r16,12(r5)
    930c:	2c000e26 	beq	r5,r16,9348 <_malloc_r+0x164>
    9310:	80800117 	ldw	r2,4(r16)
    9314:	01bfff04 	movi	r6,-4
    9318:	010003c4 	movi	r4,15
    931c:	1184703a 	and	r2,r2,r6
    9320:	1447c83a 	sub	r3,r2,r17
    9324:	20c00716 	blt	r4,r3,9344 <_malloc_r+0x160>
    9328:	1800650e 	bge	r3,zero,94c0 <_malloc_r+0x2dc>
    932c:	84000317 	ldw	r16,12(r16)
    9330:	2c000526 	beq	r5,r16,9348 <_malloc_r+0x164>
    9334:	80800117 	ldw	r2,4(r16)
    9338:	1184703a 	and	r2,r2,r6
    933c:	1447c83a 	sub	r3,r2,r17
    9340:	20fff90e 	bge	r4,r3,9328 <__alt_mem_Flash_flash_data+0xf4009328>
    9344:	39ffffc4 	addi	r7,r7,-1
    9348:	38c00044 	addi	r3,r7,1
    934c:	018000b4 	movhi	r6,2
    9350:	9c000417 	ldw	r16,16(r19)
    9354:	31bf4f04 	addi	r6,r6,-708
    9358:	32400204 	addi	r9,r6,8
    935c:	82410326 	beq	r16,r9,976c <_malloc_r+0x588>
    9360:	81000117 	ldw	r4,4(r16)
    9364:	00bfff04 	movi	r2,-4
    9368:	208e703a 	and	r7,r4,r2
    936c:	3c45c83a 	sub	r2,r7,r17
    9370:	010003c4 	movi	r4,15
    9374:	2080ee16 	blt	r4,r2,9730 <_malloc_r+0x54c>
    9378:	32400515 	stw	r9,20(r6)
    937c:	32400415 	stw	r9,16(r6)
    9380:	1000510e 	bge	r2,zero,94c8 <_malloc_r+0x2e4>
    9384:	00807fc4 	movi	r2,511
    9388:	11c0ce36 	bltu	r2,r7,96c4 <_malloc_r+0x4e0>
    938c:	3808d0fa 	srli	r4,r7,3
    9390:	01c00044 	movi	r7,1
    9394:	30800117 	ldw	r2,4(r6)
    9398:	210b883a 	add	r5,r4,r4
    939c:	294b883a 	add	r5,r5,r5
    93a0:	2009d0ba 	srai	r4,r4,2
    93a4:	294b883a 	add	r5,r5,r5
    93a8:	298b883a 	add	r5,r5,r6
    93ac:	2a000217 	ldw	r8,8(r5)
    93b0:	3908983a 	sll	r4,r7,r4
    93b4:	81400315 	stw	r5,12(r16)
    93b8:	82000215 	stw	r8,8(r16)
    93bc:	2088b03a 	or	r4,r4,r2
    93c0:	2c000215 	stw	r16,8(r5)
    93c4:	31000115 	stw	r4,4(r6)
    93c8:	44000315 	stw	r16,12(r8)
    93cc:	1805d0ba 	srai	r2,r3,2
    93d0:	01400044 	movi	r5,1
    93d4:	288a983a 	sll	r5,r5,r2
    93d8:	21404336 	bltu	r4,r5,94e8 <_malloc_r+0x304>
    93dc:	2144703a 	and	r2,r4,r5
    93e0:	10000a1e 	bne	r2,zero,940c <_malloc_r+0x228>
    93e4:	00bfff04 	movi	r2,-4
    93e8:	294b883a 	add	r5,r5,r5
    93ec:	1886703a 	and	r3,r3,r2
    93f0:	2144703a 	and	r2,r4,r5
    93f4:	18c00104 	addi	r3,r3,4
    93f8:	1000041e 	bne	r2,zero,940c <_malloc_r+0x228>
    93fc:	294b883a 	add	r5,r5,r5
    9400:	2144703a 	and	r2,r4,r5
    9404:	18c00104 	addi	r3,r3,4
    9408:	103ffc26 	beq	r2,zero,93fc <__alt_mem_Flash_flash_data+0xf40093fc>
    940c:	023fff04 	movi	r8,-4
    9410:	01c003c4 	movi	r7,15
    9414:	18c5883a 	add	r2,r3,r3
    9418:	1085883a 	add	r2,r2,r2
    941c:	1085883a 	add	r2,r2,r2
    9420:	9895883a 	add	r10,r19,r2
    9424:	52c00304 	addi	r11,r10,12
    9428:	1819883a 	mov	r12,r3
    942c:	5c000017 	ldw	r16,0(r11)
    9430:	59bffd04 	addi	r6,r11,-12
    9434:	8180041e 	bne	r16,r6,9448 <_malloc_r+0x264>
    9438:	0000ce06 	br	9774 <_malloc_r+0x590>
    943c:	2000d70e 	bge	r4,zero,979c <_malloc_r+0x5b8>
    9440:	84000317 	ldw	r16,12(r16)
    9444:	8180cb26 	beq	r16,r6,9774 <_malloc_r+0x590>
    9448:	80800117 	ldw	r2,4(r16)
    944c:	1204703a 	and	r2,r2,r8
    9450:	1449c83a 	sub	r4,r2,r17
    9454:	393ff90e 	bge	r7,r4,943c <__alt_mem_Flash_flash_data+0xf400943c>
    9458:	80800317 	ldw	r2,12(r16)
    945c:	80c00217 	ldw	r3,8(r16)
    9460:	89400054 	ori	r5,r17,1
    9464:	81400115 	stw	r5,4(r16)
    9468:	18800315 	stw	r2,12(r3)
    946c:	10c00215 	stw	r3,8(r2)
    9470:	8463883a 	add	r17,r16,r17
    9474:	9c400515 	stw	r17,20(r19)
    9478:	9c400415 	stw	r17,16(r19)
    947c:	20800054 	ori	r2,r4,1
    9480:	88800115 	stw	r2,4(r17)
    9484:	8a400315 	stw	r9,12(r17)
    9488:	8a400215 	stw	r9,8(r17)
    948c:	8923883a 	add	r17,r17,r4
    9490:	89000015 	stw	r4,0(r17)
    9494:	9009883a 	mov	r4,r18
    9498:	001224c0 	call	1224c <__malloc_unlock>
    949c:	80800204 	addi	r2,r16,8
    94a0:	003f7d06 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    94a4:	00800304 	movi	r2,12
    94a8:	90800015 	stw	r2,0(r18)
    94ac:	0005883a 	mov	r2,zero
    94b0:	003f7906 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    94b4:	01401f84 	movi	r5,126
    94b8:	01c00fc4 	movi	r7,63
    94bc:	003f8d06 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    94c0:	81000317 	ldw	r4,12(r16)
    94c4:	003f6a06 	br	9270 <__alt_mem_Flash_flash_data+0xf4009270>
    94c8:	81c5883a 	add	r2,r16,r7
    94cc:	10c00117 	ldw	r3,4(r2)
    94d0:	9009883a 	mov	r4,r18
    94d4:	18c00054 	ori	r3,r3,1
    94d8:	10c00115 	stw	r3,4(r2)
    94dc:	001224c0 	call	1224c <__malloc_unlock>
    94e0:	80800204 	addi	r2,r16,8
    94e4:	003f6c06 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    94e8:	9c000217 	ldw	r16,8(r19)
    94ec:	00bfff04 	movi	r2,-4
    94f0:	85800117 	ldw	r22,4(r16)
    94f4:	b0ac703a 	and	r22,r22,r2
    94f8:	b4400336 	bltu	r22,r17,9508 <_malloc_r+0x324>
    94fc:	b445c83a 	sub	r2,r22,r17
    9500:	00c003c4 	movi	r3,15
    9504:	18805d16 	blt	r3,r2,967c <_malloc_r+0x498>
    9508:	05c000b4 	movhi	r23,2
    950c:	008000b4 	movhi	r2,2
    9510:	bdc68004 	addi	r23,r23,6656
    9514:	108f4e04 	addi	r2,r2,15672
    9518:	15400017 	ldw	r21,0(r2)
    951c:	b9000017 	ldw	r4,0(r23)
    9520:	00ffffc4 	movi	r3,-1
    9524:	858d883a 	add	r6,r16,r22
    9528:	8d6b883a 	add	r21,r17,r21
    952c:	20c0e426 	beq	r4,r3,98c0 <_malloc_r+0x6dc>
    9530:	ad4403c4 	addi	r21,r21,4111
    9534:	00fc0004 	movi	r3,-4096
    9538:	a8ea703a 	and	r21,r21,r3
    953c:	9009883a 	mov	r4,r18
    9540:	a80b883a 	mov	r5,r21
    9544:	d9800015 	stw	r6,0(sp)
    9548:	000b2840 	call	b284 <_sbrk_r>
    954c:	00ffffc4 	movi	r3,-1
    9550:	1029883a 	mov	r20,r2
    9554:	d9800017 	ldw	r6,0(sp)
    9558:	10c0a426 	beq	r2,r3,97ec <_malloc_r+0x608>
    955c:	1180a236 	bltu	r2,r6,97e8 <_malloc_r+0x604>
    9560:	070000b4 	movhi	fp,2
    9564:	e70f7b04 	addi	fp,fp,15852
    9568:	e0c00017 	ldw	r3,0(fp)
    956c:	a8c7883a 	add	r3,r21,r3
    9570:	e0c00015 	stw	r3,0(fp)
    9574:	3500da26 	beq	r6,r20,98e0 <_malloc_r+0x6fc>
    9578:	b9000017 	ldw	r4,0(r23)
    957c:	00bfffc4 	movi	r2,-1
    9580:	2080e426 	beq	r4,r2,9914 <_malloc_r+0x730>
    9584:	a185c83a 	sub	r2,r20,r6
    9588:	1885883a 	add	r2,r3,r2
    958c:	e0800015 	stw	r2,0(fp)
    9590:	a0c001cc 	andi	r3,r20,7
    9594:	1800b526 	beq	r3,zero,986c <_malloc_r+0x688>
    9598:	a0e9c83a 	sub	r20,r20,r3
    959c:	00840204 	movi	r2,4104
    95a0:	a5000204 	addi	r20,r20,8
    95a4:	10c7c83a 	sub	r3,r2,r3
    95a8:	a545883a 	add	r2,r20,r21
    95ac:	1083ffcc 	andi	r2,r2,4095
    95b0:	18abc83a 	sub	r21,r3,r2
    95b4:	9009883a 	mov	r4,r18
    95b8:	a80b883a 	mov	r5,r21
    95bc:	000b2840 	call	b284 <_sbrk_r>
    95c0:	00ffffc4 	movi	r3,-1
    95c4:	10c0d026 	beq	r2,r3,9908 <_malloc_r+0x724>
    95c8:	1507c83a 	sub	r3,r2,r20
    95cc:	a8c7883a 	add	r3,r21,r3
    95d0:	18c00054 	ori	r3,r3,1
    95d4:	e0800017 	ldw	r2,0(fp)
    95d8:	9d000215 	stw	r20,8(r19)
    95dc:	a0c00115 	stw	r3,4(r20)
    95e0:	a887883a 	add	r3,r21,r2
    95e4:	e0c00015 	stw	r3,0(fp)
    95e8:	84c00e26 	beq	r16,r19,9624 <_malloc_r+0x440>
    95ec:	018003c4 	movi	r6,15
    95f0:	3580a02e 	bgeu	r6,r22,9874 <_malloc_r+0x690>
    95f4:	81400117 	ldw	r5,4(r16)
    95f8:	013ffe04 	movi	r4,-8
    95fc:	b0bffd04 	addi	r2,r22,-12
    9600:	1104703a 	and	r2,r2,r4
    9604:	2900004c 	andi	r4,r5,1
    9608:	1108b03a 	or	r4,r2,r4
    960c:	81000115 	stw	r4,4(r16)
    9610:	01400144 	movi	r5,5
    9614:	8089883a 	add	r4,r16,r2
    9618:	21400115 	stw	r5,4(r4)
    961c:	21400215 	stw	r5,8(r4)
    9620:	3080c036 	bltu	r6,r2,9924 <_malloc_r+0x740>
    9624:	008000b4 	movhi	r2,2
    9628:	108f4d04 	addi	r2,r2,15668
    962c:	11000017 	ldw	r4,0(r2)
    9630:	20c0012e 	bgeu	r4,r3,9638 <_malloc_r+0x454>
    9634:	10c00015 	stw	r3,0(r2)
    9638:	008000b4 	movhi	r2,2
    963c:	108f4c04 	addi	r2,r2,15664
    9640:	11000017 	ldw	r4,0(r2)
    9644:	9c000217 	ldw	r16,8(r19)
    9648:	20c0012e 	bgeu	r4,r3,9650 <_malloc_r+0x46c>
    964c:	10c00015 	stw	r3,0(r2)
    9650:	80c00117 	ldw	r3,4(r16)
    9654:	00bfff04 	movi	r2,-4
    9658:	1886703a 	and	r3,r3,r2
    965c:	1c45c83a 	sub	r2,r3,r17
    9660:	1c400236 	bltu	r3,r17,966c <_malloc_r+0x488>
    9664:	00c003c4 	movi	r3,15
    9668:	18800416 	blt	r3,r2,967c <_malloc_r+0x498>
    966c:	9009883a 	mov	r4,r18
    9670:	001224c0 	call	1224c <__malloc_unlock>
    9674:	0005883a 	mov	r2,zero
    9678:	003f0706 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    967c:	88c00054 	ori	r3,r17,1
    9680:	80c00115 	stw	r3,4(r16)
    9684:	8463883a 	add	r17,r16,r17
    9688:	10800054 	ori	r2,r2,1
    968c:	9c400215 	stw	r17,8(r19)
    9690:	88800115 	stw	r2,4(r17)
    9694:	9009883a 	mov	r4,r18
    9698:	001224c0 	call	1224c <__malloc_unlock>
    969c:	80800204 	addi	r2,r16,8
    96a0:	003efd06 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    96a4:	00800504 	movi	r2,20
    96a8:	10c0482e 	bgeu	r2,r3,97cc <_malloc_r+0x5e8>
    96ac:	00801504 	movi	r2,84
    96b0:	10c06836 	bltu	r2,r3,9854 <_malloc_r+0x670>
    96b4:	8806d33a 	srli	r3,r17,12
    96b8:	19c01b84 	addi	r7,r3,110
    96bc:	39cb883a 	add	r5,r7,r7
    96c0:	003f0c06 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    96c4:	3804d27a 	srli	r2,r7,9
    96c8:	01000104 	movi	r4,4
    96cc:	2080422e 	bgeu	r4,r2,97d8 <_malloc_r+0x5f4>
    96d0:	01000504 	movi	r4,20
    96d4:	20807c36 	bltu	r4,r2,98c8 <_malloc_r+0x6e4>
    96d8:	110016c4 	addi	r4,r2,91
    96dc:	210b883a 	add	r5,r4,r4
    96e0:	294b883a 	add	r5,r5,r5
    96e4:	294b883a 	add	r5,r5,r5
    96e8:	994b883a 	add	r5,r19,r5
    96ec:	28800217 	ldw	r2,8(r5)
    96f0:	020000b4 	movhi	r8,2
    96f4:	423f4f04 	addi	r8,r8,-708
    96f8:	11406326 	beq	r2,r5,9888 <_malloc_r+0x6a4>
    96fc:	01bfff04 	movi	r6,-4
    9700:	11000117 	ldw	r4,4(r2)
    9704:	2188703a 	and	r4,r4,r6
    9708:	3900022e 	bgeu	r7,r4,9714 <_malloc_r+0x530>
    970c:	10800217 	ldw	r2,8(r2)
    9710:	28bffb1e 	bne	r5,r2,9700 <__alt_mem_Flash_flash_data+0xf4009700>
    9714:	11800317 	ldw	r6,12(r2)
    9718:	99000117 	ldw	r4,4(r19)
    971c:	81800315 	stw	r6,12(r16)
    9720:	80800215 	stw	r2,8(r16)
    9724:	34000215 	stw	r16,8(r6)
    9728:	14000315 	stw	r16,12(r2)
    972c:	003f2706 	br	93cc <__alt_mem_Flash_flash_data+0xf40093cc>
    9730:	88c00054 	ori	r3,r17,1
    9734:	80c00115 	stw	r3,4(r16)
    9738:	8463883a 	add	r17,r16,r17
    973c:	34400515 	stw	r17,20(r6)
    9740:	34400415 	stw	r17,16(r6)
    9744:	10c00054 	ori	r3,r2,1
    9748:	8a400315 	stw	r9,12(r17)
    974c:	8a400215 	stw	r9,8(r17)
    9750:	88c00115 	stw	r3,4(r17)
    9754:	88a3883a 	add	r17,r17,r2
    9758:	88800015 	stw	r2,0(r17)
    975c:	9009883a 	mov	r4,r18
    9760:	001224c0 	call	1224c <__malloc_unlock>
    9764:	80800204 	addi	r2,r16,8
    9768:	003ecb06 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    976c:	31000117 	ldw	r4,4(r6)
    9770:	003f1606 	br	93cc <__alt_mem_Flash_flash_data+0xf40093cc>
    9774:	63000044 	addi	r12,r12,1
    9778:	608000cc 	andi	r2,r12,3
    977c:	5ac00204 	addi	r11,r11,8
    9780:	103f2a1e 	bne	r2,zero,942c <__alt_mem_Flash_flash_data+0xf400942c>
    9784:	00002106 	br	980c <_malloc_r+0x628>
    9788:	80800204 	addi	r2,r16,8
    978c:	84000517 	ldw	r16,20(r16)
    9790:	143eb31e 	bne	r2,r16,9260 <__alt_mem_Flash_flash_data+0xf4009260>
    9794:	18c00084 	addi	r3,r3,2
    9798:	003eec06 	br	934c <__alt_mem_Flash_flash_data+0xf400934c>
    979c:	8085883a 	add	r2,r16,r2
    97a0:	10c00117 	ldw	r3,4(r2)
    97a4:	81000317 	ldw	r4,12(r16)
    97a8:	81400217 	ldw	r5,8(r16)
    97ac:	18c00054 	ori	r3,r3,1
    97b0:	10c00115 	stw	r3,4(r2)
    97b4:	29000315 	stw	r4,12(r5)
    97b8:	21400215 	stw	r5,8(r4)
    97bc:	9009883a 	mov	r4,r18
    97c0:	001224c0 	call	1224c <__malloc_unlock>
    97c4:	80800204 	addi	r2,r16,8
    97c8:	003eb306 	br	9298 <__alt_mem_Flash_flash_data+0xf4009298>
    97cc:	19c016c4 	addi	r7,r3,91
    97d0:	39cb883a 	add	r5,r7,r7
    97d4:	003ec706 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    97d8:	3804d1ba 	srli	r2,r7,6
    97dc:	11000e04 	addi	r4,r2,56
    97e0:	210b883a 	add	r5,r4,r4
    97e4:	003fbe06 	br	96e0 <__alt_mem_Flash_flash_data+0xf40096e0>
    97e8:	84ff5d26 	beq	r16,r19,9560 <__alt_mem_Flash_flash_data+0xf4009560>
    97ec:	9c000217 	ldw	r16,8(r19)
    97f0:	00bfff04 	movi	r2,-4
    97f4:	80c00117 	ldw	r3,4(r16)
    97f8:	1886703a 	and	r3,r3,r2
    97fc:	003f9706 	br	965c <__alt_mem_Flash_flash_data+0xf400965c>
    9800:	52800017 	ldw	r10,0(r10)
    9804:	18ffffc4 	addi	r3,r3,-1
    9808:	50805c1e 	bne	r10,r2,997c <_malloc_r+0x798>
    980c:	190000cc 	andi	r4,r3,3
    9810:	50bffe04 	addi	r2,r10,-8
    9814:	203ffa1e 	bne	r4,zero,9800 <__alt_mem_Flash_flash_data+0xf4009800>
    9818:	98800117 	ldw	r2,4(r19)
    981c:	0146303a 	nor	r3,zero,r5
    9820:	1884703a 	and	r2,r3,r2
    9824:	98800115 	stw	r2,4(r19)
    9828:	294b883a 	add	r5,r5,r5
    982c:	117f2e36 	bltu	r2,r5,94e8 <__alt_mem_Flash_flash_data+0xf40094e8>
    9830:	283f2d26 	beq	r5,zero,94e8 <__alt_mem_Flash_flash_data+0xf40094e8>
    9834:	1146703a 	and	r3,r2,r5
    9838:	1800521e 	bne	r3,zero,9984 <_malloc_r+0x7a0>
    983c:	6007883a 	mov	r3,r12
    9840:	294b883a 	add	r5,r5,r5
    9844:	1148703a 	and	r4,r2,r5
    9848:	18c00104 	addi	r3,r3,4
    984c:	203ffc26 	beq	r4,zero,9840 <__alt_mem_Flash_flash_data+0xf4009840>
    9850:	003ef006 	br	9414 <__alt_mem_Flash_flash_data+0xf4009414>
    9854:	00805504 	movi	r2,340
    9858:	10c01336 	bltu	r2,r3,98a8 <_malloc_r+0x6c4>
    985c:	8806d3fa 	srli	r3,r17,15
    9860:	19c01dc4 	addi	r7,r3,119
    9864:	39cb883a 	add	r5,r7,r7
    9868:	003ea206 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    986c:	00c40004 	movi	r3,4096
    9870:	003f4d06 	br	95a8 <__alt_mem_Flash_flash_data+0xf40095a8>
    9874:	00800044 	movi	r2,1
    9878:	a0800115 	stw	r2,4(r20)
    987c:	a021883a 	mov	r16,r20
    9880:	0007883a 	mov	r3,zero
    9884:	003f7506 	br	965c <__alt_mem_Flash_flash_data+0xf400965c>
    9888:	200bd0ba 	srai	r5,r4,2
    988c:	01800044 	movi	r6,1
    9890:	41000117 	ldw	r4,4(r8)
    9894:	314a983a 	sll	r5,r6,r5
    9898:	100d883a 	mov	r6,r2
    989c:	2908b03a 	or	r4,r5,r4
    98a0:	41000115 	stw	r4,4(r8)
    98a4:	003f9d06 	br	971c <__alt_mem_Flash_flash_data+0xf400971c>
    98a8:	00815504 	movi	r2,1364
    98ac:	10c01336 	bltu	r2,r3,98fc <_malloc_r+0x718>
    98b0:	8806d4ba 	srli	r3,r17,18
    98b4:	19c01f04 	addi	r7,r3,124
    98b8:	39cb883a 	add	r5,r7,r7
    98bc:	003e8d06 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    98c0:	ad400404 	addi	r21,r21,16
    98c4:	003f1d06 	br	953c <__alt_mem_Flash_flash_data+0xf400953c>
    98c8:	01001504 	movi	r4,84
    98cc:	20801c36 	bltu	r4,r2,9940 <_malloc_r+0x75c>
    98d0:	3804d33a 	srli	r2,r7,12
    98d4:	11001b84 	addi	r4,r2,110
    98d8:	210b883a 	add	r5,r4,r4
    98dc:	003f8006 	br	96e0 <__alt_mem_Flash_flash_data+0xf40096e0>
    98e0:	3083ffcc 	andi	r2,r6,4095
    98e4:	103f241e 	bne	r2,zero,9578 <__alt_mem_Flash_flash_data+0xf4009578>
    98e8:	99000217 	ldw	r4,8(r19)
    98ec:	ad85883a 	add	r2,r21,r22
    98f0:	10800054 	ori	r2,r2,1
    98f4:	20800115 	stw	r2,4(r4)
    98f8:	003f4a06 	br	9624 <__alt_mem_Flash_flash_data+0xf4009624>
    98fc:	01403f04 	movi	r5,252
    9900:	01c01f84 	movi	r7,126
    9904:	003e7b06 	br	92f4 <__alt_mem_Flash_flash_data+0xf40092f4>
    9908:	00c00044 	movi	r3,1
    990c:	002b883a 	mov	r21,zero
    9910:	003f3006 	br	95d4 <__alt_mem_Flash_flash_data+0xf40095d4>
    9914:	008000b4 	movhi	r2,2
    9918:	10868004 	addi	r2,r2,6656
    991c:	15000015 	stw	r20,0(r2)
    9920:	003f1b06 	br	9590 <__alt_mem_Flash_flash_data+0xf4009590>
    9924:	9009883a 	mov	r4,r18
    9928:	81400204 	addi	r5,r16,8
    992c:	00086140 	call	8614 <_free_r>
    9930:	008000b4 	movhi	r2,2
    9934:	108f7b04 	addi	r2,r2,15852
    9938:	10c00017 	ldw	r3,0(r2)
    993c:	003f3906 	br	9624 <__alt_mem_Flash_flash_data+0xf4009624>
    9940:	01005504 	movi	r4,340
    9944:	20800436 	bltu	r4,r2,9958 <_malloc_r+0x774>
    9948:	3804d3fa 	srli	r2,r7,15
    994c:	11001dc4 	addi	r4,r2,119
    9950:	210b883a 	add	r5,r4,r4
    9954:	003f6206 	br	96e0 <__alt_mem_Flash_flash_data+0xf40096e0>
    9958:	01015504 	movi	r4,1364
    995c:	20800436 	bltu	r4,r2,9970 <_malloc_r+0x78c>
    9960:	3804d4ba 	srli	r2,r7,18
    9964:	11001f04 	addi	r4,r2,124
    9968:	210b883a 	add	r5,r4,r4
    996c:	003f5c06 	br	96e0 <__alt_mem_Flash_flash_data+0xf40096e0>
    9970:	01403f04 	movi	r5,252
    9974:	01001f84 	movi	r4,126
    9978:	003f5906 	br	96e0 <__alt_mem_Flash_flash_data+0xf40096e0>
    997c:	98800117 	ldw	r2,4(r19)
    9980:	003fa906 	br	9828 <__alt_mem_Flash_flash_data+0xf4009828>
    9984:	6007883a 	mov	r3,r12
    9988:	003ea206 	br	9414 <__alt_mem_Flash_flash_data+0xf4009414>

0000998c <memchr>:
    998c:	208000cc 	andi	r2,r4,3
    9990:	280f883a 	mov	r7,r5
    9994:	10003526 	beq	r2,zero,9a6c <memchr+0xe0>
    9998:	30bfffc4 	addi	r2,r6,-1
    999c:	30001b26 	beq	r6,zero,9a0c <memchr+0x80>
    99a0:	21800003 	ldbu	r6,0(r4)
    99a4:	28c03fcc 	andi	r3,r5,255
    99a8:	30c01a26 	beq	r6,r3,9a14 <memchr+0x88>
    99ac:	180d883a 	mov	r6,r3
    99b0:	00000406 	br	99c4 <memchr+0x38>
    99b4:	10001526 	beq	r2,zero,9a0c <memchr+0x80>
    99b8:	20c00003 	ldbu	r3,0(r4)
    99bc:	10bfffc4 	addi	r2,r2,-1
    99c0:	19801426 	beq	r3,r6,9a14 <memchr+0x88>
    99c4:	21000044 	addi	r4,r4,1
    99c8:	20c000cc 	andi	r3,r4,3
    99cc:	183ff91e 	bne	r3,zero,99b4 <__alt_mem_Flash_flash_data+0xf40099b4>
    99d0:	024000c4 	movi	r9,3
    99d4:	48801136 	bltu	r9,r2,9a1c <memchr+0x90>
    99d8:	10000c26 	beq	r2,zero,9a0c <memchr+0x80>
    99dc:	20c00003 	ldbu	r3,0(r4)
    99e0:	29403fcc 	andi	r5,r5,255
    99e4:	19400b26 	beq	r3,r5,9a14 <memchr+0x88>
    99e8:	20c00044 	addi	r3,r4,1
    99ec:	2085883a 	add	r2,r4,r2
    99f0:	39803fcc 	andi	r6,r7,255
    99f4:	00000306 	br	9a04 <memchr+0x78>
    99f8:	18c00044 	addi	r3,r3,1
    99fc:	197fffc3 	ldbu	r5,-1(r3)
    9a00:	29800426 	beq	r5,r6,9a14 <memchr+0x88>
    9a04:	1809883a 	mov	r4,r3
    9a08:	18bffb1e 	bne	r3,r2,99f8 <__alt_mem_Flash_flash_data+0xf40099f8>
    9a0c:	0005883a 	mov	r2,zero
    9a10:	f800283a 	ret
    9a14:	2005883a 	mov	r2,r4
    9a18:	f800283a 	ret
    9a1c:	28c03fcc 	andi	r3,r5,255
    9a20:	1810923a 	slli	r8,r3,8
    9a24:	02ffbff4 	movhi	r11,65279
    9a28:	02a02074 	movhi	r10,32897
    9a2c:	40c6b03a 	or	r3,r8,r3
    9a30:	1810943a 	slli	r8,r3,16
    9a34:	5affbfc4 	addi	r11,r11,-257
    9a38:	52a02004 	addi	r10,r10,-32640
    9a3c:	40d0b03a 	or	r8,r8,r3
    9a40:	20c00017 	ldw	r3,0(r4)
    9a44:	40c6f03a 	xor	r3,r8,r3
    9a48:	1acd883a 	add	r6,r3,r11
    9a4c:	00c6303a 	nor	r3,zero,r3
    9a50:	30c6703a 	and	r3,r6,r3
    9a54:	1a86703a 	and	r3,r3,r10
    9a58:	183fdf1e 	bne	r3,zero,99d8 <__alt_mem_Flash_flash_data+0xf40099d8>
    9a5c:	10bfff04 	addi	r2,r2,-4
    9a60:	21000104 	addi	r4,r4,4
    9a64:	48bff636 	bltu	r9,r2,9a40 <__alt_mem_Flash_flash_data+0xf4009a40>
    9a68:	003fdb06 	br	99d8 <__alt_mem_Flash_flash_data+0xf40099d8>
    9a6c:	3005883a 	mov	r2,r6
    9a70:	003fd706 	br	99d0 <__alt_mem_Flash_flash_data+0xf40099d0>

00009a74 <memcpy>:
    9a74:	deffff04 	addi	sp,sp,-4
    9a78:	dc000015 	stw	r16,0(sp)
    9a7c:	00c003c4 	movi	r3,15
    9a80:	2005883a 	mov	r2,r4
    9a84:	1980432e 	bgeu	r3,r6,9b94 <memcpy+0x120>
    9a88:	2146b03a 	or	r3,r4,r5
    9a8c:	18c000cc 	andi	r3,r3,3
    9a90:	1800421e 	bne	r3,zero,9b9c <memcpy+0x128>
    9a94:	343ffc04 	addi	r16,r6,-16
    9a98:	8020d13a 	srli	r16,r16,4
    9a9c:	28c00104 	addi	r3,r5,4
    9aa0:	23400104 	addi	r13,r4,4
    9aa4:	801e913a 	slli	r15,r16,4
    9aa8:	2b000204 	addi	r12,r5,8
    9aac:	22c00204 	addi	r11,r4,8
    9ab0:	7bc00504 	addi	r15,r15,20
    9ab4:	2a800304 	addi	r10,r5,12
    9ab8:	22400304 	addi	r9,r4,12
    9abc:	2bdf883a 	add	r15,r5,r15
    9ac0:	2811883a 	mov	r8,r5
    9ac4:	200f883a 	mov	r7,r4
    9ac8:	41000017 	ldw	r4,0(r8)
    9acc:	39c00404 	addi	r7,r7,16
    9ad0:	18c00404 	addi	r3,r3,16
    9ad4:	393ffc15 	stw	r4,-16(r7)
    9ad8:	1bbffc17 	ldw	r14,-16(r3)
    9adc:	6b400404 	addi	r13,r13,16
    9ae0:	5ac00404 	addi	r11,r11,16
    9ae4:	6bbffc15 	stw	r14,-16(r13)
    9ae8:	63800017 	ldw	r14,0(r12)
    9aec:	4a400404 	addi	r9,r9,16
    9af0:	42000404 	addi	r8,r8,16
    9af4:	5bbffc15 	stw	r14,-16(r11)
    9af8:	53800017 	ldw	r14,0(r10)
    9afc:	63000404 	addi	r12,r12,16
    9b00:	52800404 	addi	r10,r10,16
    9b04:	4bbffc15 	stw	r14,-16(r9)
    9b08:	1bffef1e 	bne	r3,r15,9ac8 <__alt_mem_Flash_flash_data+0xf4009ac8>
    9b0c:	81c00044 	addi	r7,r16,1
    9b10:	380e913a 	slli	r7,r7,4
    9b14:	310003cc 	andi	r4,r6,15
    9b18:	02c000c4 	movi	r11,3
    9b1c:	11c7883a 	add	r3,r2,r7
    9b20:	29cb883a 	add	r5,r5,r7
    9b24:	59001f2e 	bgeu	r11,r4,9ba4 <memcpy+0x130>
    9b28:	1813883a 	mov	r9,r3
    9b2c:	2811883a 	mov	r8,r5
    9b30:	200f883a 	mov	r7,r4
    9b34:	42800017 	ldw	r10,0(r8)
    9b38:	4a400104 	addi	r9,r9,4
    9b3c:	39ffff04 	addi	r7,r7,-4
    9b40:	4abfff15 	stw	r10,-4(r9)
    9b44:	42000104 	addi	r8,r8,4
    9b48:	59fffa36 	bltu	r11,r7,9b34 <__alt_mem_Flash_flash_data+0xf4009b34>
    9b4c:	213fff04 	addi	r4,r4,-4
    9b50:	2008d0ba 	srli	r4,r4,2
    9b54:	318000cc 	andi	r6,r6,3
    9b58:	21000044 	addi	r4,r4,1
    9b5c:	2109883a 	add	r4,r4,r4
    9b60:	2109883a 	add	r4,r4,r4
    9b64:	1907883a 	add	r3,r3,r4
    9b68:	290b883a 	add	r5,r5,r4
    9b6c:	30000626 	beq	r6,zero,9b88 <memcpy+0x114>
    9b70:	198d883a 	add	r6,r3,r6
    9b74:	29c00003 	ldbu	r7,0(r5)
    9b78:	18c00044 	addi	r3,r3,1
    9b7c:	29400044 	addi	r5,r5,1
    9b80:	19ffffc5 	stb	r7,-1(r3)
    9b84:	19bffb1e 	bne	r3,r6,9b74 <__alt_mem_Flash_flash_data+0xf4009b74>
    9b88:	dc000017 	ldw	r16,0(sp)
    9b8c:	dec00104 	addi	sp,sp,4
    9b90:	f800283a 	ret
    9b94:	2007883a 	mov	r3,r4
    9b98:	003ff406 	br	9b6c <__alt_mem_Flash_flash_data+0xf4009b6c>
    9b9c:	2007883a 	mov	r3,r4
    9ba0:	003ff306 	br	9b70 <__alt_mem_Flash_flash_data+0xf4009b70>
    9ba4:	200d883a 	mov	r6,r4
    9ba8:	003ff006 	br	9b6c <__alt_mem_Flash_flash_data+0xf4009b6c>

00009bac <memmove>:
    9bac:	2005883a 	mov	r2,r4
    9bb0:	29000b2e 	bgeu	r5,r4,9be0 <memmove+0x34>
    9bb4:	298f883a 	add	r7,r5,r6
    9bb8:	21c0092e 	bgeu	r4,r7,9be0 <memmove+0x34>
    9bbc:	2187883a 	add	r3,r4,r6
    9bc0:	198bc83a 	sub	r5,r3,r6
    9bc4:	30004b26 	beq	r6,zero,9cf4 <memmove+0x148>
    9bc8:	39ffffc4 	addi	r7,r7,-1
    9bcc:	39000003 	ldbu	r4,0(r7)
    9bd0:	18ffffc4 	addi	r3,r3,-1
    9bd4:	19000005 	stb	r4,0(r3)
    9bd8:	197ffb1e 	bne	r3,r5,9bc8 <__alt_mem_Flash_flash_data+0xf4009bc8>
    9bdc:	f800283a 	ret
    9be0:	00c003c4 	movi	r3,15
    9be4:	1980412e 	bgeu	r3,r6,9cec <memmove+0x140>
    9be8:	1146b03a 	or	r3,r2,r5
    9bec:	18c000cc 	andi	r3,r3,3
    9bf0:	1800411e 	bne	r3,zero,9cf8 <memmove+0x14c>
    9bf4:	33fffc04 	addi	r15,r6,-16
    9bf8:	781ed13a 	srli	r15,r15,4
    9bfc:	28c00104 	addi	r3,r5,4
    9c00:	13400104 	addi	r13,r2,4
    9c04:	781c913a 	slli	r14,r15,4
    9c08:	2b000204 	addi	r12,r5,8
    9c0c:	12c00204 	addi	r11,r2,8
    9c10:	73800504 	addi	r14,r14,20
    9c14:	2a800304 	addi	r10,r5,12
    9c18:	12400304 	addi	r9,r2,12
    9c1c:	2b9d883a 	add	r14,r5,r14
    9c20:	2811883a 	mov	r8,r5
    9c24:	100f883a 	mov	r7,r2
    9c28:	41000017 	ldw	r4,0(r8)
    9c2c:	39c00404 	addi	r7,r7,16
    9c30:	18c00404 	addi	r3,r3,16
    9c34:	393ffc15 	stw	r4,-16(r7)
    9c38:	193ffc17 	ldw	r4,-16(r3)
    9c3c:	6b400404 	addi	r13,r13,16
    9c40:	5ac00404 	addi	r11,r11,16
    9c44:	693ffc15 	stw	r4,-16(r13)
    9c48:	61000017 	ldw	r4,0(r12)
    9c4c:	4a400404 	addi	r9,r9,16
    9c50:	42000404 	addi	r8,r8,16
    9c54:	593ffc15 	stw	r4,-16(r11)
    9c58:	51000017 	ldw	r4,0(r10)
    9c5c:	63000404 	addi	r12,r12,16
    9c60:	52800404 	addi	r10,r10,16
    9c64:	493ffc15 	stw	r4,-16(r9)
    9c68:	1bbfef1e 	bne	r3,r14,9c28 <__alt_mem_Flash_flash_data+0xf4009c28>
    9c6c:	79000044 	addi	r4,r15,1
    9c70:	2008913a 	slli	r4,r4,4
    9c74:	328003cc 	andi	r10,r6,15
    9c78:	02c000c4 	movi	r11,3
    9c7c:	1107883a 	add	r3,r2,r4
    9c80:	290b883a 	add	r5,r5,r4
    9c84:	5a801e2e 	bgeu	r11,r10,9d00 <memmove+0x154>
    9c88:	1813883a 	mov	r9,r3
    9c8c:	2811883a 	mov	r8,r5
    9c90:	500f883a 	mov	r7,r10
    9c94:	41000017 	ldw	r4,0(r8)
    9c98:	4a400104 	addi	r9,r9,4
    9c9c:	39ffff04 	addi	r7,r7,-4
    9ca0:	493fff15 	stw	r4,-4(r9)
    9ca4:	42000104 	addi	r8,r8,4
    9ca8:	59fffa36 	bltu	r11,r7,9c94 <__alt_mem_Flash_flash_data+0xf4009c94>
    9cac:	513fff04 	addi	r4,r10,-4
    9cb0:	2008d0ba 	srli	r4,r4,2
    9cb4:	318000cc 	andi	r6,r6,3
    9cb8:	21000044 	addi	r4,r4,1
    9cbc:	2109883a 	add	r4,r4,r4
    9cc0:	2109883a 	add	r4,r4,r4
    9cc4:	1907883a 	add	r3,r3,r4
    9cc8:	290b883a 	add	r5,r5,r4
    9ccc:	30000926 	beq	r6,zero,9cf4 <memmove+0x148>
    9cd0:	198d883a 	add	r6,r3,r6
    9cd4:	29c00003 	ldbu	r7,0(r5)
    9cd8:	18c00044 	addi	r3,r3,1
    9cdc:	29400044 	addi	r5,r5,1
    9ce0:	19ffffc5 	stb	r7,-1(r3)
    9ce4:	19bffb1e 	bne	r3,r6,9cd4 <__alt_mem_Flash_flash_data+0xf4009cd4>
    9ce8:	f800283a 	ret
    9cec:	1007883a 	mov	r3,r2
    9cf0:	003ff606 	br	9ccc <__alt_mem_Flash_flash_data+0xf4009ccc>
    9cf4:	f800283a 	ret
    9cf8:	1007883a 	mov	r3,r2
    9cfc:	003ff406 	br	9cd0 <__alt_mem_Flash_flash_data+0xf4009cd0>
    9d00:	500d883a 	mov	r6,r10
    9d04:	003ff106 	br	9ccc <__alt_mem_Flash_flash_data+0xf4009ccc>

00009d08 <_Balloc>:
    9d08:	20801317 	ldw	r2,76(r4)
    9d0c:	defffc04 	addi	sp,sp,-16
    9d10:	dc400115 	stw	r17,4(sp)
    9d14:	dc000015 	stw	r16,0(sp)
    9d18:	dfc00315 	stw	ra,12(sp)
    9d1c:	dc800215 	stw	r18,8(sp)
    9d20:	2023883a 	mov	r17,r4
    9d24:	2821883a 	mov	r16,r5
    9d28:	10000f26 	beq	r2,zero,9d68 <_Balloc+0x60>
    9d2c:	8407883a 	add	r3,r16,r16
    9d30:	18c7883a 	add	r3,r3,r3
    9d34:	10c7883a 	add	r3,r2,r3
    9d38:	18800017 	ldw	r2,0(r3)
    9d3c:	10001126 	beq	r2,zero,9d84 <_Balloc+0x7c>
    9d40:	11000017 	ldw	r4,0(r2)
    9d44:	19000015 	stw	r4,0(r3)
    9d48:	10000415 	stw	zero,16(r2)
    9d4c:	10000315 	stw	zero,12(r2)
    9d50:	dfc00317 	ldw	ra,12(sp)
    9d54:	dc800217 	ldw	r18,8(sp)
    9d58:	dc400117 	ldw	r17,4(sp)
    9d5c:	dc000017 	ldw	r16,0(sp)
    9d60:	dec00404 	addi	sp,sp,16
    9d64:	f800283a 	ret
    9d68:	01400104 	movi	r5,4
    9d6c:	01800844 	movi	r6,33
    9d70:	000db8c0 	call	db8c <_calloc_r>
    9d74:	88801315 	stw	r2,76(r17)
    9d78:	103fec1e 	bne	r2,zero,9d2c <__alt_mem_Flash_flash_data+0xf4009d2c>
    9d7c:	0005883a 	mov	r2,zero
    9d80:	003ff306 	br	9d50 <__alt_mem_Flash_flash_data+0xf4009d50>
    9d84:	01400044 	movi	r5,1
    9d88:	2c24983a 	sll	r18,r5,r16
    9d8c:	8809883a 	mov	r4,r17
    9d90:	91800144 	addi	r6,r18,5
    9d94:	318d883a 	add	r6,r6,r6
    9d98:	318d883a 	add	r6,r6,r6
    9d9c:	000db8c0 	call	db8c <_calloc_r>
    9da0:	103ff626 	beq	r2,zero,9d7c <__alt_mem_Flash_flash_data+0xf4009d7c>
    9da4:	14000115 	stw	r16,4(r2)
    9da8:	14800215 	stw	r18,8(r2)
    9dac:	003fe606 	br	9d48 <__alt_mem_Flash_flash_data+0xf4009d48>

00009db0 <_Bfree>:
    9db0:	28000826 	beq	r5,zero,9dd4 <_Bfree+0x24>
    9db4:	28c00117 	ldw	r3,4(r5)
    9db8:	20801317 	ldw	r2,76(r4)
    9dbc:	18c7883a 	add	r3,r3,r3
    9dc0:	18c7883a 	add	r3,r3,r3
    9dc4:	10c5883a 	add	r2,r2,r3
    9dc8:	10c00017 	ldw	r3,0(r2)
    9dcc:	28c00015 	stw	r3,0(r5)
    9dd0:	11400015 	stw	r5,0(r2)
    9dd4:	f800283a 	ret

00009dd8 <__multadd>:
    9dd8:	defffa04 	addi	sp,sp,-24
    9ddc:	dc000115 	stw	r16,4(sp)
    9de0:	2c000417 	ldw	r16,16(r5)
    9de4:	dc800315 	stw	r18,12(sp)
    9de8:	dc400215 	stw	r17,8(sp)
    9dec:	dfc00515 	stw	ra,20(sp)
    9df0:	dcc00415 	stw	r19,16(sp)
    9df4:	2823883a 	mov	r17,r5
    9df8:	2025883a 	mov	r18,r4
    9dfc:	2a400504 	addi	r9,r5,20
    9e00:	0015883a 	mov	r10,zero
    9e04:	4a000017 	ldw	r8,0(r9)
    9e08:	4a400104 	addi	r9,r9,4
    9e0c:	52800044 	addi	r10,r10,1
    9e10:	40ffffcc 	andi	r3,r8,65535
    9e14:	1987383a 	mul	r3,r3,r6
    9e18:	4010d43a 	srli	r8,r8,16
    9e1c:	19cf883a 	add	r7,r3,r7
    9e20:	4191383a 	mul	r8,r8,r6
    9e24:	3816d43a 	srli	r11,r7,16
    9e28:	38ffffcc 	andi	r3,r7,65535
    9e2c:	5a0f883a 	add	r7,r11,r8
    9e30:	3810943a 	slli	r8,r7,16
    9e34:	380ed43a 	srli	r7,r7,16
    9e38:	40c7883a 	add	r3,r8,r3
    9e3c:	48ffff15 	stw	r3,-4(r9)
    9e40:	543ff016 	blt	r10,r16,9e04 <__alt_mem_Flash_flash_data+0xf4009e04>
    9e44:	38000926 	beq	r7,zero,9e6c <__multadd+0x94>
    9e48:	88800217 	ldw	r2,8(r17)
    9e4c:	80800f0e 	bge	r16,r2,9e8c <__multadd+0xb4>
    9e50:	80800144 	addi	r2,r16,5
    9e54:	1085883a 	add	r2,r2,r2
    9e58:	1085883a 	add	r2,r2,r2
    9e5c:	8885883a 	add	r2,r17,r2
    9e60:	11c00015 	stw	r7,0(r2)
    9e64:	84000044 	addi	r16,r16,1
    9e68:	8c000415 	stw	r16,16(r17)
    9e6c:	8805883a 	mov	r2,r17
    9e70:	dfc00517 	ldw	ra,20(sp)
    9e74:	dcc00417 	ldw	r19,16(sp)
    9e78:	dc800317 	ldw	r18,12(sp)
    9e7c:	dc400217 	ldw	r17,8(sp)
    9e80:	dc000117 	ldw	r16,4(sp)
    9e84:	dec00604 	addi	sp,sp,24
    9e88:	f800283a 	ret
    9e8c:	89400117 	ldw	r5,4(r17)
    9e90:	9009883a 	mov	r4,r18
    9e94:	d9c00015 	stw	r7,0(sp)
    9e98:	29400044 	addi	r5,r5,1
    9e9c:	0009d080 	call	9d08 <_Balloc>
    9ea0:	89800417 	ldw	r6,16(r17)
    9ea4:	11000304 	addi	r4,r2,12
    9ea8:	89400304 	addi	r5,r17,12
    9eac:	31800084 	addi	r6,r6,2
    9eb0:	318d883a 	add	r6,r6,r6
    9eb4:	318d883a 	add	r6,r6,r6
    9eb8:	1027883a 	mov	r19,r2
    9ebc:	0009a740 	call	9a74 <memcpy>
    9ec0:	d9c00017 	ldw	r7,0(sp)
    9ec4:	88000a26 	beq	r17,zero,9ef0 <__multadd+0x118>
    9ec8:	89000117 	ldw	r4,4(r17)
    9ecc:	90c01317 	ldw	r3,76(r18)
    9ed0:	2109883a 	add	r4,r4,r4
    9ed4:	2109883a 	add	r4,r4,r4
    9ed8:	1907883a 	add	r3,r3,r4
    9edc:	18800017 	ldw	r2,0(r3)
    9ee0:	88800015 	stw	r2,0(r17)
    9ee4:	1c400015 	stw	r17,0(r3)
    9ee8:	9823883a 	mov	r17,r19
    9eec:	003fd806 	br	9e50 <__alt_mem_Flash_flash_data+0xf4009e50>
    9ef0:	9823883a 	mov	r17,r19
    9ef4:	003fd606 	br	9e50 <__alt_mem_Flash_flash_data+0xf4009e50>

00009ef8 <__s2b>:
    9ef8:	defff904 	addi	sp,sp,-28
    9efc:	dc400115 	stw	r17,4(sp)
    9f00:	dc000015 	stw	r16,0(sp)
    9f04:	2023883a 	mov	r17,r4
    9f08:	2821883a 	mov	r16,r5
    9f0c:	39000204 	addi	r4,r7,8
    9f10:	01400244 	movi	r5,9
    9f14:	dcc00315 	stw	r19,12(sp)
    9f18:	dc800215 	stw	r18,8(sp)
    9f1c:	dfc00615 	stw	ra,24(sp)
    9f20:	dd400515 	stw	r21,20(sp)
    9f24:	dd000415 	stw	r20,16(sp)
    9f28:	3825883a 	mov	r18,r7
    9f2c:	3027883a 	mov	r19,r6
    9f30:	000ef900 	call	ef90 <__divsi3>
    9f34:	00c00044 	movi	r3,1
    9f38:	000b883a 	mov	r5,zero
    9f3c:	1880030e 	bge	r3,r2,9f4c <__s2b+0x54>
    9f40:	18c7883a 	add	r3,r3,r3
    9f44:	29400044 	addi	r5,r5,1
    9f48:	18bffd16 	blt	r3,r2,9f40 <__alt_mem_Flash_flash_data+0xf4009f40>
    9f4c:	8809883a 	mov	r4,r17
    9f50:	0009d080 	call	9d08 <_Balloc>
    9f54:	d8c00717 	ldw	r3,28(sp)
    9f58:	10c00515 	stw	r3,20(r2)
    9f5c:	00c00044 	movi	r3,1
    9f60:	10c00415 	stw	r3,16(r2)
    9f64:	00c00244 	movi	r3,9
    9f68:	1cc0210e 	bge	r3,r19,9ff0 <__s2b+0xf8>
    9f6c:	80eb883a 	add	r21,r16,r3
    9f70:	a829883a 	mov	r20,r21
    9f74:	84e1883a 	add	r16,r16,r19
    9f78:	a1c00007 	ldb	r7,0(r20)
    9f7c:	8809883a 	mov	r4,r17
    9f80:	a5000044 	addi	r20,r20,1
    9f84:	100b883a 	mov	r5,r2
    9f88:	01800284 	movi	r6,10
    9f8c:	39fff404 	addi	r7,r7,-48
    9f90:	0009dd80 	call	9dd8 <__multadd>
    9f94:	a43ff81e 	bne	r20,r16,9f78 <__alt_mem_Flash_flash_data+0xf4009f78>
    9f98:	ace1883a 	add	r16,r21,r19
    9f9c:	843ffe04 	addi	r16,r16,-8
    9fa0:	9c800a0e 	bge	r19,r18,9fcc <__s2b+0xd4>
    9fa4:	94e5c83a 	sub	r18,r18,r19
    9fa8:	84a5883a 	add	r18,r16,r18
    9fac:	81c00007 	ldb	r7,0(r16)
    9fb0:	8809883a 	mov	r4,r17
    9fb4:	84000044 	addi	r16,r16,1
    9fb8:	100b883a 	mov	r5,r2
    9fbc:	01800284 	movi	r6,10
    9fc0:	39fff404 	addi	r7,r7,-48
    9fc4:	0009dd80 	call	9dd8 <__multadd>
    9fc8:	84bff81e 	bne	r16,r18,9fac <__alt_mem_Flash_flash_data+0xf4009fac>
    9fcc:	dfc00617 	ldw	ra,24(sp)
    9fd0:	dd400517 	ldw	r21,20(sp)
    9fd4:	dd000417 	ldw	r20,16(sp)
    9fd8:	dcc00317 	ldw	r19,12(sp)
    9fdc:	dc800217 	ldw	r18,8(sp)
    9fe0:	dc400117 	ldw	r17,4(sp)
    9fe4:	dc000017 	ldw	r16,0(sp)
    9fe8:	dec00704 	addi	sp,sp,28
    9fec:	f800283a 	ret
    9ff0:	84000284 	addi	r16,r16,10
    9ff4:	1827883a 	mov	r19,r3
    9ff8:	003fe906 	br	9fa0 <__alt_mem_Flash_flash_data+0xf4009fa0>

00009ffc <__hi0bits>:
    9ffc:	20bfffec 	andhi	r2,r4,65535
    a000:	1000141e 	bne	r2,zero,a054 <__hi0bits+0x58>
    a004:	2008943a 	slli	r4,r4,16
    a008:	00800404 	movi	r2,16
    a00c:	20ffc02c 	andhi	r3,r4,65280
    a010:	1800021e 	bne	r3,zero,a01c <__hi0bits+0x20>
    a014:	2008923a 	slli	r4,r4,8
    a018:	10800204 	addi	r2,r2,8
    a01c:	20fc002c 	andhi	r3,r4,61440
    a020:	1800021e 	bne	r3,zero,a02c <__hi0bits+0x30>
    a024:	2008913a 	slli	r4,r4,4
    a028:	10800104 	addi	r2,r2,4
    a02c:	20f0002c 	andhi	r3,r4,49152
    a030:	1800031e 	bne	r3,zero,a040 <__hi0bits+0x44>
    a034:	2109883a 	add	r4,r4,r4
    a038:	10800084 	addi	r2,r2,2
    a03c:	2109883a 	add	r4,r4,r4
    a040:	20000316 	blt	r4,zero,a050 <__hi0bits+0x54>
    a044:	2110002c 	andhi	r4,r4,16384
    a048:	2000041e 	bne	r4,zero,a05c <__hi0bits+0x60>
    a04c:	00800804 	movi	r2,32
    a050:	f800283a 	ret
    a054:	0005883a 	mov	r2,zero
    a058:	003fec06 	br	a00c <__alt_mem_Flash_flash_data+0xf400a00c>
    a05c:	10800044 	addi	r2,r2,1
    a060:	f800283a 	ret

0000a064 <__lo0bits>:
    a064:	20c00017 	ldw	r3,0(r4)
    a068:	188001cc 	andi	r2,r3,7
    a06c:	10000826 	beq	r2,zero,a090 <__lo0bits+0x2c>
    a070:	1880004c 	andi	r2,r3,1
    a074:	1000211e 	bne	r2,zero,a0fc <__lo0bits+0x98>
    a078:	1880008c 	andi	r2,r3,2
    a07c:	1000211e 	bne	r2,zero,a104 <__lo0bits+0xa0>
    a080:	1806d0ba 	srli	r3,r3,2
    a084:	00800084 	movi	r2,2
    a088:	20c00015 	stw	r3,0(r4)
    a08c:	f800283a 	ret
    a090:	18bfffcc 	andi	r2,r3,65535
    a094:	10001326 	beq	r2,zero,a0e4 <__lo0bits+0x80>
    a098:	0005883a 	mov	r2,zero
    a09c:	19403fcc 	andi	r5,r3,255
    a0a0:	2800021e 	bne	r5,zero,a0ac <__lo0bits+0x48>
    a0a4:	1806d23a 	srli	r3,r3,8
    a0a8:	10800204 	addi	r2,r2,8
    a0ac:	194003cc 	andi	r5,r3,15
    a0b0:	2800021e 	bne	r5,zero,a0bc <__lo0bits+0x58>
    a0b4:	1806d13a 	srli	r3,r3,4
    a0b8:	10800104 	addi	r2,r2,4
    a0bc:	194000cc 	andi	r5,r3,3
    a0c0:	2800021e 	bne	r5,zero,a0cc <__lo0bits+0x68>
    a0c4:	1806d0ba 	srli	r3,r3,2
    a0c8:	10800084 	addi	r2,r2,2
    a0cc:	1940004c 	andi	r5,r3,1
    a0d0:	2800081e 	bne	r5,zero,a0f4 <__lo0bits+0x90>
    a0d4:	1806d07a 	srli	r3,r3,1
    a0d8:	1800051e 	bne	r3,zero,a0f0 <__lo0bits+0x8c>
    a0dc:	00800804 	movi	r2,32
    a0e0:	f800283a 	ret
    a0e4:	1806d43a 	srli	r3,r3,16
    a0e8:	00800404 	movi	r2,16
    a0ec:	003feb06 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a0f0:	10800044 	addi	r2,r2,1
    a0f4:	20c00015 	stw	r3,0(r4)
    a0f8:	f800283a 	ret
    a0fc:	0005883a 	mov	r2,zero
    a100:	f800283a 	ret
    a104:	1806d07a 	srli	r3,r3,1
    a108:	00800044 	movi	r2,1
    a10c:	20c00015 	stw	r3,0(r4)
    a110:	f800283a 	ret

0000a114 <__i2b>:
    a114:	defffd04 	addi	sp,sp,-12
    a118:	dc000015 	stw	r16,0(sp)
    a11c:	04000044 	movi	r16,1
    a120:	dc400115 	stw	r17,4(sp)
    a124:	2823883a 	mov	r17,r5
    a128:	800b883a 	mov	r5,r16
    a12c:	dfc00215 	stw	ra,8(sp)
    a130:	0009d080 	call	9d08 <_Balloc>
    a134:	14400515 	stw	r17,20(r2)
    a138:	14000415 	stw	r16,16(r2)
    a13c:	dfc00217 	ldw	ra,8(sp)
    a140:	dc400117 	ldw	r17,4(sp)
    a144:	dc000017 	ldw	r16,0(sp)
    a148:	dec00304 	addi	sp,sp,12
    a14c:	f800283a 	ret

0000a150 <__multiply>:
    a150:	defffa04 	addi	sp,sp,-24
    a154:	dcc00315 	stw	r19,12(sp)
    a158:	dc800215 	stw	r18,8(sp)
    a15c:	2cc00417 	ldw	r19,16(r5)
    a160:	34800417 	ldw	r18,16(r6)
    a164:	dd000415 	stw	r20,16(sp)
    a168:	dc400115 	stw	r17,4(sp)
    a16c:	dfc00515 	stw	ra,20(sp)
    a170:	dc000015 	stw	r16,0(sp)
    a174:	2829883a 	mov	r20,r5
    a178:	3023883a 	mov	r17,r6
    a17c:	9c807016 	blt	r19,r18,a340 <__multiply+0x1f0>
    a180:	9005883a 	mov	r2,r18
    a184:	9825883a 	mov	r18,r19
    a188:	1027883a 	mov	r19,r2
    a18c:	a0800217 	ldw	r2,8(r20)
    a190:	94e1883a 	add	r16,r18,r19
    a194:	a1400117 	ldw	r5,4(r20)
    a198:	1400010e 	bge	r2,r16,a1a0 <__multiply+0x50>
    a19c:	29400044 	addi	r5,r5,1
    a1a0:	0009d080 	call	9d08 <_Balloc>
    a1a4:	8417883a 	add	r11,r16,r16
    a1a8:	13000504 	addi	r12,r2,20
    a1ac:	5ad7883a 	add	r11,r11,r11
    a1b0:	62d7883a 	add	r11,r12,r11
    a1b4:	6007883a 	mov	r3,r12
    a1b8:	62c0032e 	bgeu	r12,r11,a1c8 <__multiply+0x78>
    a1bc:	18000015 	stw	zero,0(r3)
    a1c0:	18c00104 	addi	r3,r3,4
    a1c4:	1afffd36 	bltu	r3,r11,a1bc <__alt_mem_Flash_flash_data+0xf400a1bc>
    a1c8:	9ce7883a 	add	r19,r19,r19
    a1cc:	94a5883a 	add	r18,r18,r18
    a1d0:	89800504 	addi	r6,r17,20
    a1d4:	9ce7883a 	add	r19,r19,r19
    a1d8:	a3800504 	addi	r14,r20,20
    a1dc:	94a5883a 	add	r18,r18,r18
    a1e0:	34db883a 	add	r13,r6,r19
    a1e4:	7495883a 	add	r10,r14,r18
    a1e8:	3340422e 	bgeu	r6,r13,a2f4 <__multiply+0x1a4>
    a1ec:	34400017 	ldw	r17,0(r6)
    a1f0:	8cbfffcc 	andi	r18,r17,65535
    a1f4:	90001b26 	beq	r18,zero,a264 <__multiply+0x114>
    a1f8:	6013883a 	mov	r9,r12
    a1fc:	7023883a 	mov	r17,r14
    a200:	0011883a 	mov	r8,zero
    a204:	88c00017 	ldw	r3,0(r17)
    a208:	4bc00017 	ldw	r15,0(r9)
    a20c:	8c400104 	addi	r17,r17,4
    a210:	19ffffcc 	andi	r7,r3,65535
    a214:	3c8f383a 	mul	r7,r7,r18
    a218:	1808d43a 	srli	r4,r3,16
    a21c:	797fffcc 	andi	r5,r15,65535
    a220:	29cb883a 	add	r5,r5,r7
    a224:	2a0b883a 	add	r5,r5,r8
    a228:	2489383a 	mul	r4,r4,r18
    a22c:	7806d43a 	srli	r3,r15,16
    a230:	2810d43a 	srli	r8,r5,16
    a234:	297fffcc 	andi	r5,r5,65535
    a238:	1907883a 	add	r3,r3,r4
    a23c:	1a07883a 	add	r3,r3,r8
    a240:	1808943a 	slli	r4,r3,16
    a244:	480f883a 	mov	r7,r9
    a248:	1810d43a 	srli	r8,r3,16
    a24c:	214ab03a 	or	r5,r4,r5
    a250:	49400015 	stw	r5,0(r9)
    a254:	4a400104 	addi	r9,r9,4
    a258:	8abfea36 	bltu	r17,r10,a204 <__alt_mem_Flash_flash_data+0xf400a204>
    a25c:	3a000115 	stw	r8,4(r7)
    a260:	34400017 	ldw	r17,0(r6)
    a264:	8822d43a 	srli	r17,r17,16
    a268:	88001f26 	beq	r17,zero,a2e8 <__multiply+0x198>
    a26c:	60c00017 	ldw	r3,0(r12)
    a270:	7013883a 	mov	r9,r14
    a274:	601f883a 	mov	r15,r12
    a278:	1811883a 	mov	r8,r3
    a27c:	6027883a 	mov	r19,r12
    a280:	000f883a 	mov	r7,zero
    a284:	00000106 	br	a28c <__multiply+0x13c>
    a288:	9027883a 	mov	r19,r18
    a28c:	4940000b 	ldhu	r5,0(r9)
    a290:	4010d43a 	srli	r8,r8,16
    a294:	193fffcc 	andi	r4,r3,65535
    a298:	2c4b383a 	mul	r5,r5,r17
    a29c:	7bc00104 	addi	r15,r15,4
    a2a0:	4a400104 	addi	r9,r9,4
    a2a4:	2a0b883a 	add	r5,r5,r8
    a2a8:	29cb883a 	add	r5,r5,r7
    a2ac:	2806943a 	slli	r3,r5,16
    a2b0:	9c800104 	addi	r18,r19,4
    a2b4:	280ad43a 	srli	r5,r5,16
    a2b8:	1908b03a 	or	r4,r3,r4
    a2bc:	793fff15 	stw	r4,-4(r15)
    a2c0:	48ffff17 	ldw	r3,-4(r9)
    a2c4:	92000017 	ldw	r8,0(r18)
    a2c8:	1806d43a 	srli	r3,r3,16
    a2cc:	413fffcc 	andi	r4,r8,65535
    a2d0:	1c47383a 	mul	r3,r3,r17
    a2d4:	1907883a 	add	r3,r3,r4
    a2d8:	1947883a 	add	r3,r3,r5
    a2dc:	180ed43a 	srli	r7,r3,16
    a2e0:	4abfe936 	bltu	r9,r10,a288 <__alt_mem_Flash_flash_data+0xf400a288>
    a2e4:	98c00115 	stw	r3,4(r19)
    a2e8:	31800104 	addi	r6,r6,4
    a2ec:	63000104 	addi	r12,r12,4
    a2f0:	337fbe36 	bltu	r6,r13,a1ec <__alt_mem_Flash_flash_data+0xf400a1ec>
    a2f4:	0400090e 	bge	zero,r16,a31c <__multiply+0x1cc>
    a2f8:	58ffff17 	ldw	r3,-4(r11)
    a2fc:	5affff04 	addi	r11,r11,-4
    a300:	18000326 	beq	r3,zero,a310 <__multiply+0x1c0>
    a304:	00000506 	br	a31c <__multiply+0x1cc>
    a308:	58c00017 	ldw	r3,0(r11)
    a30c:	1800031e 	bne	r3,zero,a31c <__multiply+0x1cc>
    a310:	843fffc4 	addi	r16,r16,-1
    a314:	5affff04 	addi	r11,r11,-4
    a318:	803ffb1e 	bne	r16,zero,a308 <__alt_mem_Flash_flash_data+0xf400a308>
    a31c:	14000415 	stw	r16,16(r2)
    a320:	dfc00517 	ldw	ra,20(sp)
    a324:	dd000417 	ldw	r20,16(sp)
    a328:	dcc00317 	ldw	r19,12(sp)
    a32c:	dc800217 	ldw	r18,8(sp)
    a330:	dc400117 	ldw	r17,4(sp)
    a334:	dc000017 	ldw	r16,0(sp)
    a338:	dec00604 	addi	sp,sp,24
    a33c:	f800283a 	ret
    a340:	3029883a 	mov	r20,r6
    a344:	2823883a 	mov	r17,r5
    a348:	003f9006 	br	a18c <__alt_mem_Flash_flash_data+0xf400a18c>

0000a34c <__pow5mult>:
    a34c:	defffa04 	addi	sp,sp,-24
    a350:	dcc00315 	stw	r19,12(sp)
    a354:	dc800215 	stw	r18,8(sp)
    a358:	dc000015 	stw	r16,0(sp)
    a35c:	dfc00515 	stw	ra,20(sp)
    a360:	dd000415 	stw	r20,16(sp)
    a364:	dc400115 	stw	r17,4(sp)
    a368:	308000cc 	andi	r2,r6,3
    a36c:	3021883a 	mov	r16,r6
    a370:	2027883a 	mov	r19,r4
    a374:	2825883a 	mov	r18,r5
    a378:	10002e1e 	bne	r2,zero,a434 <__pow5mult+0xe8>
    a37c:	8021d0ba 	srai	r16,r16,2
    a380:	80001a26 	beq	r16,zero,a3ec <__pow5mult+0xa0>
    a384:	9c401217 	ldw	r17,72(r19)
    a388:	8800061e 	bne	r17,zero,a3a4 <__pow5mult+0x58>
    a38c:	00003406 	br	a460 <__pow5mult+0x114>
    a390:	8021d07a 	srai	r16,r16,1
    a394:	80001526 	beq	r16,zero,a3ec <__pow5mult+0xa0>
    a398:	88800017 	ldw	r2,0(r17)
    a39c:	10001c26 	beq	r2,zero,a410 <__pow5mult+0xc4>
    a3a0:	1023883a 	mov	r17,r2
    a3a4:	80c0004c 	andi	r3,r16,1
    a3a8:	183ff926 	beq	r3,zero,a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a3ac:	900b883a 	mov	r5,r18
    a3b0:	880d883a 	mov	r6,r17
    a3b4:	9809883a 	mov	r4,r19
    a3b8:	000a1500 	call	a150 <__multiply>
    a3bc:	90001b26 	beq	r18,zero,a42c <__pow5mult+0xe0>
    a3c0:	91c00117 	ldw	r7,4(r18)
    a3c4:	98c01317 	ldw	r3,76(r19)
    a3c8:	8021d07a 	srai	r16,r16,1
    a3cc:	39cf883a 	add	r7,r7,r7
    a3d0:	39cf883a 	add	r7,r7,r7
    a3d4:	19c7883a 	add	r3,r3,r7
    a3d8:	19000017 	ldw	r4,0(r3)
    a3dc:	91000015 	stw	r4,0(r18)
    a3e0:	1c800015 	stw	r18,0(r3)
    a3e4:	1025883a 	mov	r18,r2
    a3e8:	803feb1e 	bne	r16,zero,a398 <__alt_mem_Flash_flash_data+0xf400a398>
    a3ec:	9005883a 	mov	r2,r18
    a3f0:	dfc00517 	ldw	ra,20(sp)
    a3f4:	dd000417 	ldw	r20,16(sp)
    a3f8:	dcc00317 	ldw	r19,12(sp)
    a3fc:	dc800217 	ldw	r18,8(sp)
    a400:	dc400117 	ldw	r17,4(sp)
    a404:	dc000017 	ldw	r16,0(sp)
    a408:	dec00604 	addi	sp,sp,24
    a40c:	f800283a 	ret
    a410:	9809883a 	mov	r4,r19
    a414:	880b883a 	mov	r5,r17
    a418:	880d883a 	mov	r6,r17
    a41c:	000a1500 	call	a150 <__multiply>
    a420:	88800015 	stw	r2,0(r17)
    a424:	10000015 	stw	zero,0(r2)
    a428:	003fdd06 	br	a3a0 <__alt_mem_Flash_flash_data+0xf400a3a0>
    a42c:	1025883a 	mov	r18,r2
    a430:	003fd706 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a434:	10bfffc4 	addi	r2,r2,-1
    a438:	1085883a 	add	r2,r2,r2
    a43c:	00c000b4 	movhi	r3,2
    a440:	18fc3d04 	addi	r3,r3,-3852
    a444:	1085883a 	add	r2,r2,r2
    a448:	1885883a 	add	r2,r3,r2
    a44c:	11800017 	ldw	r6,0(r2)
    a450:	000f883a 	mov	r7,zero
    a454:	0009dd80 	call	9dd8 <__multadd>
    a458:	1025883a 	mov	r18,r2
    a45c:	003fc706 	br	a37c <__alt_mem_Flash_flash_data+0xf400a37c>
    a460:	05000044 	movi	r20,1
    a464:	9809883a 	mov	r4,r19
    a468:	a00b883a 	mov	r5,r20
    a46c:	0009d080 	call	9d08 <_Balloc>
    a470:	1023883a 	mov	r17,r2
    a474:	00809c44 	movi	r2,625
    a478:	88800515 	stw	r2,20(r17)
    a47c:	8d000415 	stw	r20,16(r17)
    a480:	9c401215 	stw	r17,72(r19)
    a484:	88000015 	stw	zero,0(r17)
    a488:	003fc606 	br	a3a4 <__alt_mem_Flash_flash_data+0xf400a3a4>

0000a48c <__lshift>:
    a48c:	defff904 	addi	sp,sp,-28
    a490:	dd000415 	stw	r20,16(sp)
    a494:	dcc00315 	stw	r19,12(sp)
    a498:	3029d17a 	srai	r20,r6,5
    a49c:	2cc00417 	ldw	r19,16(r5)
    a4a0:	28800217 	ldw	r2,8(r5)
    a4a4:	dd400515 	stw	r21,20(sp)
    a4a8:	a4e7883a 	add	r19,r20,r19
    a4ac:	dc800215 	stw	r18,8(sp)
    a4b0:	dc400115 	stw	r17,4(sp)
    a4b4:	dc000015 	stw	r16,0(sp)
    a4b8:	dfc00615 	stw	ra,24(sp)
    a4bc:	9c000044 	addi	r16,r19,1
    a4c0:	2823883a 	mov	r17,r5
    a4c4:	302b883a 	mov	r21,r6
    a4c8:	2025883a 	mov	r18,r4
    a4cc:	29400117 	ldw	r5,4(r5)
    a4d0:	1400030e 	bge	r2,r16,a4e0 <__lshift+0x54>
    a4d4:	1085883a 	add	r2,r2,r2
    a4d8:	29400044 	addi	r5,r5,1
    a4dc:	143ffd16 	blt	r2,r16,a4d4 <__alt_mem_Flash_flash_data+0xf400a4d4>
    a4e0:	9009883a 	mov	r4,r18
    a4e4:	0009d080 	call	9d08 <_Balloc>
    a4e8:	11c00504 	addi	r7,r2,20
    a4ec:	0500090e 	bge	zero,r20,a514 <__lshift+0x88>
    a4f0:	3811883a 	mov	r8,r7
    a4f4:	0007883a 	mov	r3,zero
    a4f8:	40000015 	stw	zero,0(r8)
    a4fc:	18c00044 	addi	r3,r3,1
    a500:	42000104 	addi	r8,r8,4
    a504:	1d3ffc1e 	bne	r3,r20,a4f8 <__alt_mem_Flash_flash_data+0xf400a4f8>
    a508:	18c7883a 	add	r3,r3,r3
    a50c:	18c7883a 	add	r3,r3,r3
    a510:	38cf883a 	add	r7,r7,r3
    a514:	89000417 	ldw	r4,16(r17)
    a518:	88c00504 	addi	r3,r17,20
    a51c:	a98007cc 	andi	r6,r21,31
    a520:	2109883a 	add	r4,r4,r4
    a524:	2109883a 	add	r4,r4,r4
    a528:	1909883a 	add	r4,r3,r4
    a52c:	30002326 	beq	r6,zero,a5bc <__lshift+0x130>
    a530:	01400804 	movi	r5,32
    a534:	298bc83a 	sub	r5,r5,r6
    a538:	0013883a 	mov	r9,zero
    a53c:	1a000017 	ldw	r8,0(r3)
    a540:	3815883a 	mov	r10,r7
    a544:	39c00104 	addi	r7,r7,4
    a548:	4190983a 	sll	r8,r8,r6
    a54c:	18c00104 	addi	r3,r3,4
    a550:	4a10b03a 	or	r8,r9,r8
    a554:	3a3fff15 	stw	r8,-4(r7)
    a558:	1a3fff17 	ldw	r8,-4(r3)
    a55c:	4152d83a 	srl	r9,r8,r5
    a560:	193ff636 	bltu	r3,r4,a53c <__alt_mem_Flash_flash_data+0xf400a53c>
    a564:	52400115 	stw	r9,4(r10)
    a568:	48001a1e 	bne	r9,zero,a5d4 <__lshift+0x148>
    a56c:	843fffc4 	addi	r16,r16,-1
    a570:	14000415 	stw	r16,16(r2)
    a574:	88000826 	beq	r17,zero,a598 <__lshift+0x10c>
    a578:	89000117 	ldw	r4,4(r17)
    a57c:	90c01317 	ldw	r3,76(r18)
    a580:	2109883a 	add	r4,r4,r4
    a584:	2109883a 	add	r4,r4,r4
    a588:	1907883a 	add	r3,r3,r4
    a58c:	19000017 	ldw	r4,0(r3)
    a590:	89000015 	stw	r4,0(r17)
    a594:	1c400015 	stw	r17,0(r3)
    a598:	dfc00617 	ldw	ra,24(sp)
    a59c:	dd400517 	ldw	r21,20(sp)
    a5a0:	dd000417 	ldw	r20,16(sp)
    a5a4:	dcc00317 	ldw	r19,12(sp)
    a5a8:	dc800217 	ldw	r18,8(sp)
    a5ac:	dc400117 	ldw	r17,4(sp)
    a5b0:	dc000017 	ldw	r16,0(sp)
    a5b4:	dec00704 	addi	sp,sp,28
    a5b8:	f800283a 	ret
    a5bc:	19400017 	ldw	r5,0(r3)
    a5c0:	39c00104 	addi	r7,r7,4
    a5c4:	18c00104 	addi	r3,r3,4
    a5c8:	397fff15 	stw	r5,-4(r7)
    a5cc:	193ffb36 	bltu	r3,r4,a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>
    a5d0:	003fe606 	br	a56c <__alt_mem_Flash_flash_data+0xf400a56c>
    a5d4:	9c000084 	addi	r16,r19,2
    a5d8:	003fe406 	br	a56c <__alt_mem_Flash_flash_data+0xf400a56c>

0000a5dc <__mcmp>:
    a5dc:	20800417 	ldw	r2,16(r4)
    a5e0:	28c00417 	ldw	r3,16(r5)
    a5e4:	10c5c83a 	sub	r2,r2,r3
    a5e8:	1000111e 	bne	r2,zero,a630 <__mcmp+0x54>
    a5ec:	18c7883a 	add	r3,r3,r3
    a5f0:	18c7883a 	add	r3,r3,r3
    a5f4:	21000504 	addi	r4,r4,20
    a5f8:	29400504 	addi	r5,r5,20
    a5fc:	20c5883a 	add	r2,r4,r3
    a600:	28cb883a 	add	r5,r5,r3
    a604:	00000106 	br	a60c <__mcmp+0x30>
    a608:	20800a2e 	bgeu	r4,r2,a634 <__mcmp+0x58>
    a60c:	10bfff04 	addi	r2,r2,-4
    a610:	297fff04 	addi	r5,r5,-4
    a614:	11800017 	ldw	r6,0(r2)
    a618:	28c00017 	ldw	r3,0(r5)
    a61c:	30fffa26 	beq	r6,r3,a608 <__alt_mem_Flash_flash_data+0xf400a608>
    a620:	30c00236 	bltu	r6,r3,a62c <__mcmp+0x50>
    a624:	00800044 	movi	r2,1
    a628:	f800283a 	ret
    a62c:	00bfffc4 	movi	r2,-1
    a630:	f800283a 	ret
    a634:	0005883a 	mov	r2,zero
    a638:	f800283a 	ret

0000a63c <__mdiff>:
    a63c:	defffb04 	addi	sp,sp,-20
    a640:	dc000015 	stw	r16,0(sp)
    a644:	2821883a 	mov	r16,r5
    a648:	dcc00315 	stw	r19,12(sp)
    a64c:	300b883a 	mov	r5,r6
    a650:	2027883a 	mov	r19,r4
    a654:	8009883a 	mov	r4,r16
    a658:	dc800215 	stw	r18,8(sp)
    a65c:	dfc00415 	stw	ra,16(sp)
    a660:	dc400115 	stw	r17,4(sp)
    a664:	3025883a 	mov	r18,r6
    a668:	000a5dc0 	call	a5dc <__mcmp>
    a66c:	10005226 	beq	r2,zero,a7b8 <__mdiff+0x17c>
    a670:	10004c16 	blt	r2,zero,a7a4 <__mdiff+0x168>
    a674:	0023883a 	mov	r17,zero
    a678:	81400117 	ldw	r5,4(r16)
    a67c:	9809883a 	mov	r4,r19
    a680:	0009d080 	call	9d08 <_Balloc>
    a684:	83400417 	ldw	r13,16(r16)
    a688:	93800417 	ldw	r14,16(r18)
    a68c:	81000504 	addi	r4,r16,20
    a690:	6b59883a 	add	r12,r13,r13
    a694:	739d883a 	add	r14,r14,r14
    a698:	6319883a 	add	r12,r12,r12
    a69c:	91800504 	addi	r6,r18,20
    a6a0:	739d883a 	add	r14,r14,r14
    a6a4:	14400315 	stw	r17,12(r2)
    a6a8:	2319883a 	add	r12,r4,r12
    a6ac:	339d883a 	add	r14,r6,r14
    a6b0:	12400504 	addi	r9,r2,20
    a6b4:	0007883a 	mov	r3,zero
    a6b8:	22000017 	ldw	r8,0(r4)
    a6bc:	32800017 	ldw	r10,0(r6)
    a6c0:	4ac00104 	addi	r11,r9,4
    a6c4:	41ffffcc 	andi	r7,r8,65535
    a6c8:	38c7883a 	add	r3,r7,r3
    a6cc:	51ffffcc 	andi	r7,r10,65535
    a6d0:	19cfc83a 	sub	r7,r3,r7
    a6d4:	4010d43a 	srli	r8,r8,16
    a6d8:	5014d43a 	srli	r10,r10,16
    a6dc:	3807d43a 	srai	r3,r7,16
    a6e0:	39ffffcc 	andi	r7,r7,65535
    a6e4:	4291c83a 	sub	r8,r8,r10
    a6e8:	40c7883a 	add	r3,r8,r3
    a6ec:	1810943a 	slli	r8,r3,16
    a6f0:	31800104 	addi	r6,r6,4
    a6f4:	21000104 	addi	r4,r4,4
    a6f8:	41ceb03a 	or	r7,r8,r7
    a6fc:	49c00015 	stw	r7,0(r9)
    a700:	1807d43a 	srai	r3,r3,16
    a704:	580b883a 	mov	r5,r11
    a708:	5813883a 	mov	r9,r11
    a70c:	33bfea36 	bltu	r6,r14,a6b8 <__alt_mem_Flash_flash_data+0xf400a6b8>
    a710:	2011883a 	mov	r8,r4
    a714:	2300152e 	bgeu	r4,r12,a76c <__mdiff+0x130>
    a718:	21400017 	ldw	r5,0(r4)
    a71c:	4a400104 	addi	r9,r9,4
    a720:	21000104 	addi	r4,r4,4
    a724:	29ffffcc 	andi	r7,r5,65535
    a728:	38c7883a 	add	r3,r7,r3
    a72c:	280ad43a 	srli	r5,r5,16
    a730:	180dd43a 	srai	r6,r3,16
    a734:	19ffffcc 	andi	r7,r3,65535
    a738:	3147883a 	add	r3,r6,r5
    a73c:	180a943a 	slli	r5,r3,16
    a740:	1807d43a 	srai	r3,r3,16
    a744:	29ceb03a 	or	r7,r5,r7
    a748:	49ffff15 	stw	r7,-4(r9)
    a74c:	233ff236 	bltu	r4,r12,a718 <__alt_mem_Flash_flash_data+0xf400a718>
    a750:	0206303a 	nor	r3,zero,r8
    a754:	1b07883a 	add	r3,r3,r12
    a758:	1806d0ba 	srli	r3,r3,2
    a75c:	18c00044 	addi	r3,r3,1
    a760:	18c7883a 	add	r3,r3,r3
    a764:	18c7883a 	add	r3,r3,r3
    a768:	58cb883a 	add	r5,r11,r3
    a76c:	28ffff04 	addi	r3,r5,-4
    a770:	3800041e 	bne	r7,zero,a784 <__mdiff+0x148>
    a774:	18ffff04 	addi	r3,r3,-4
    a778:	19000017 	ldw	r4,0(r3)
    a77c:	6b7fffc4 	addi	r13,r13,-1
    a780:	203ffc26 	beq	r4,zero,a774 <__alt_mem_Flash_flash_data+0xf400a774>
    a784:	13400415 	stw	r13,16(r2)
    a788:	dfc00417 	ldw	ra,16(sp)
    a78c:	dcc00317 	ldw	r19,12(sp)
    a790:	dc800217 	ldw	r18,8(sp)
    a794:	dc400117 	ldw	r17,4(sp)
    a798:	dc000017 	ldw	r16,0(sp)
    a79c:	dec00504 	addi	sp,sp,20
    a7a0:	f800283a 	ret
    a7a4:	8005883a 	mov	r2,r16
    a7a8:	04400044 	movi	r17,1
    a7ac:	9021883a 	mov	r16,r18
    a7b0:	1025883a 	mov	r18,r2
    a7b4:	003fb006 	br	a678 <__alt_mem_Flash_flash_data+0xf400a678>
    a7b8:	9809883a 	mov	r4,r19
    a7bc:	000b883a 	mov	r5,zero
    a7c0:	0009d080 	call	9d08 <_Balloc>
    a7c4:	00c00044 	movi	r3,1
    a7c8:	10c00415 	stw	r3,16(r2)
    a7cc:	10000515 	stw	zero,20(r2)
    a7d0:	003fed06 	br	a788 <__alt_mem_Flash_flash_data+0xf400a788>

0000a7d4 <__ulp>:
    a7d4:	295ffc2c 	andhi	r5,r5,32752
    a7d8:	00bf3034 	movhi	r2,64704
    a7dc:	2887883a 	add	r3,r5,r2
    a7e0:	00c0020e 	bge	zero,r3,a7ec <__ulp+0x18>
    a7e4:	0005883a 	mov	r2,zero
    a7e8:	f800283a 	ret
    a7ec:	00c7c83a 	sub	r3,zero,r3
    a7f0:	180bd53a 	srai	r5,r3,20
    a7f4:	008004c4 	movi	r2,19
    a7f8:	11400a0e 	bge	r2,r5,a824 <__ulp+0x50>
    a7fc:	00800c84 	movi	r2,50
    a800:	0007883a 	mov	r3,zero
    a804:	11400516 	blt	r2,r5,a81c <__ulp+0x48>
    a808:	00800cc4 	movi	r2,51
    a80c:	114bc83a 	sub	r5,r2,r5
    a810:	00800044 	movi	r2,1
    a814:	1144983a 	sll	r2,r2,r5
    a818:	f800283a 	ret
    a81c:	00800044 	movi	r2,1
    a820:	f800283a 	ret
    a824:	00800234 	movhi	r2,8
    a828:	1147d83a 	sra	r3,r2,r5
    a82c:	0005883a 	mov	r2,zero
    a830:	f800283a 	ret

0000a834 <__b2d>:
    a834:	defffa04 	addi	sp,sp,-24
    a838:	dc000015 	stw	r16,0(sp)
    a83c:	24000417 	ldw	r16,16(r4)
    a840:	dc400115 	stw	r17,4(sp)
    a844:	24400504 	addi	r17,r4,20
    a848:	8421883a 	add	r16,r16,r16
    a84c:	8421883a 	add	r16,r16,r16
    a850:	8c21883a 	add	r16,r17,r16
    a854:	dc800215 	stw	r18,8(sp)
    a858:	84bfff17 	ldw	r18,-4(r16)
    a85c:	dd000415 	stw	r20,16(sp)
    a860:	dcc00315 	stw	r19,12(sp)
    a864:	9009883a 	mov	r4,r18
    a868:	2829883a 	mov	r20,r5
    a86c:	dfc00515 	stw	ra,20(sp)
    a870:	0009ffc0 	call	9ffc <__hi0bits>
    a874:	00c00804 	movi	r3,32
    a878:	1887c83a 	sub	r3,r3,r2
    a87c:	a0c00015 	stw	r3,0(r20)
    a880:	00c00284 	movi	r3,10
    a884:	84ffff04 	addi	r19,r16,-4
    a888:	18801216 	blt	r3,r2,a8d4 <__b2d+0xa0>
    a88c:	014002c4 	movi	r5,11
    a890:	2889c83a 	sub	r4,r5,r2
    a894:	9106d83a 	srl	r3,r18,r4
    a898:	18cffc34 	orhi	r3,r3,16368
    a89c:	8cc0282e 	bgeu	r17,r19,a940 <__b2d+0x10c>
    a8a0:	817ffe17 	ldw	r5,-8(r16)
    a8a4:	290ad83a 	srl	r5,r5,r4
    a8a8:	10800544 	addi	r2,r2,21
    a8ac:	9084983a 	sll	r2,r18,r2
    a8b0:	2884b03a 	or	r2,r5,r2
    a8b4:	dfc00517 	ldw	ra,20(sp)
    a8b8:	dd000417 	ldw	r20,16(sp)
    a8bc:	dcc00317 	ldw	r19,12(sp)
    a8c0:	dc800217 	ldw	r18,8(sp)
    a8c4:	dc400117 	ldw	r17,4(sp)
    a8c8:	dc000017 	ldw	r16,0(sp)
    a8cc:	dec00604 	addi	sp,sp,24
    a8d0:	f800283a 	ret
    a8d4:	113ffd44 	addi	r4,r2,-11
    a8d8:	8cc00f2e 	bgeu	r17,r19,a918 <__b2d+0xe4>
    a8dc:	81bffe04 	addi	r6,r16,-8
    a8e0:	817ffe17 	ldw	r5,-8(r16)
    a8e4:	20001326 	beq	r4,zero,a934 <__b2d+0x100>
    a8e8:	00c00ac4 	movi	r3,43
    a8ec:	1885c83a 	sub	r2,r3,r2
    a8f0:	2886d83a 	srl	r3,r5,r2
    a8f4:	9124983a 	sll	r18,r18,r4
    a8f8:	90e4b03a 	or	r18,r18,r3
    a8fc:	90cffc34 	orhi	r3,r18,16368
    a900:	8980112e 	bgeu	r17,r6,a948 <__b2d+0x114>
    a904:	81bffd17 	ldw	r6,-12(r16)
    a908:	308cd83a 	srl	r6,r6,r2
    a90c:	2904983a 	sll	r2,r5,r4
    a910:	1184b03a 	or	r2,r2,r6
    a914:	003fe706 	br	a8b4 <__alt_mem_Flash_flash_data+0xf400a8b4>
    a918:	20000526 	beq	r4,zero,a930 <__b2d+0xfc>
    a91c:	9124983a 	sll	r18,r18,r4
    a920:	000d883a 	mov	r6,zero
    a924:	000b883a 	mov	r5,zero
    a928:	90cffc34 	orhi	r3,r18,16368
    a92c:	003ff706 	br	a90c <__alt_mem_Flash_flash_data+0xf400a90c>
    a930:	000b883a 	mov	r5,zero
    a934:	90cffc34 	orhi	r3,r18,16368
    a938:	2805883a 	mov	r2,r5
    a93c:	003fdd06 	br	a8b4 <__alt_mem_Flash_flash_data+0xf400a8b4>
    a940:	000b883a 	mov	r5,zero
    a944:	003fd806 	br	a8a8 <__alt_mem_Flash_flash_data+0xf400a8a8>
    a948:	000d883a 	mov	r6,zero
    a94c:	003fef06 	br	a90c <__alt_mem_Flash_flash_data+0xf400a90c>

0000a950 <__d2b>:
    a950:	defff704 	addi	sp,sp,-36
    a954:	dc000215 	stw	r16,8(sp)
    a958:	3021883a 	mov	r16,r6
    a95c:	dc400315 	stw	r17,12(sp)
    a960:	8022907a 	slli	r17,r16,1
    a964:	dd400715 	stw	r21,28(sp)
    a968:	282b883a 	mov	r21,r5
    a96c:	01400044 	movi	r5,1
    a970:	dd000615 	stw	r20,24(sp)
    a974:	dcc00515 	stw	r19,20(sp)
    a978:	dc800415 	stw	r18,16(sp)
    a97c:	dfc00815 	stw	ra,32(sp)
    a980:	3829883a 	mov	r20,r7
    a984:	dc800917 	ldw	r18,36(sp)
    a988:	8822d57a 	srli	r17,r17,21
    a98c:	0009d080 	call	9d08 <_Balloc>
    a990:	1027883a 	mov	r19,r2
    a994:	00800434 	movhi	r2,16
    a998:	10bfffc4 	addi	r2,r2,-1
    a99c:	808c703a 	and	r6,r16,r2
    a9a0:	88000126 	beq	r17,zero,a9a8 <__d2b+0x58>
    a9a4:	31800434 	orhi	r6,r6,16
    a9a8:	d9800015 	stw	r6,0(sp)
    a9ac:	a8001f26 	beq	r21,zero,aa2c <__d2b+0xdc>
    a9b0:	d9000104 	addi	r4,sp,4
    a9b4:	dd400115 	stw	r21,4(sp)
    a9b8:	000a0640 	call	a064 <__lo0bits>
    a9bc:	d8c00017 	ldw	r3,0(sp)
    a9c0:	1000291e 	bne	r2,zero,aa68 <__d2b+0x118>
    a9c4:	d9000117 	ldw	r4,4(sp)
    a9c8:	99000515 	stw	r4,20(r19)
    a9cc:	1820c03a 	cmpne	r16,r3,zero
    a9d0:	84000044 	addi	r16,r16,1
    a9d4:	98c00615 	stw	r3,24(r19)
    a9d8:	9c000415 	stw	r16,16(r19)
    a9dc:	88001b1e 	bne	r17,zero,aa4c <__d2b+0xfc>
    a9e0:	800690ba 	slli	r3,r16,2
    a9e4:	10bef384 	addi	r2,r2,-1074
    a9e8:	a0800015 	stw	r2,0(r20)
    a9ec:	98c5883a 	add	r2,r19,r3
    a9f0:	11000417 	ldw	r4,16(r2)
    a9f4:	8020917a 	slli	r16,r16,5
    a9f8:	0009ffc0 	call	9ffc <__hi0bits>
    a9fc:	8085c83a 	sub	r2,r16,r2
    aa00:	90800015 	stw	r2,0(r18)
    aa04:	9805883a 	mov	r2,r19
    aa08:	dfc00817 	ldw	ra,32(sp)
    aa0c:	dd400717 	ldw	r21,28(sp)
    aa10:	dd000617 	ldw	r20,24(sp)
    aa14:	dcc00517 	ldw	r19,20(sp)
    aa18:	dc800417 	ldw	r18,16(sp)
    aa1c:	dc400317 	ldw	r17,12(sp)
    aa20:	dc000217 	ldw	r16,8(sp)
    aa24:	dec00904 	addi	sp,sp,36
    aa28:	f800283a 	ret
    aa2c:	d809883a 	mov	r4,sp
    aa30:	000a0640 	call	a064 <__lo0bits>
    aa34:	d8c00017 	ldw	r3,0(sp)
    aa38:	04000044 	movi	r16,1
    aa3c:	9c000415 	stw	r16,16(r19)
    aa40:	98c00515 	stw	r3,20(r19)
    aa44:	10800804 	addi	r2,r2,32
    aa48:	883fe526 	beq	r17,zero,a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    aa4c:	8c7ef344 	addi	r17,r17,-1075
    aa50:	88a3883a 	add	r17,r17,r2
    aa54:	00c00d44 	movi	r3,53
    aa58:	a4400015 	stw	r17,0(r20)
    aa5c:	1885c83a 	sub	r2,r3,r2
    aa60:	90800015 	stw	r2,0(r18)
    aa64:	003fe706 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    aa68:	01000804 	movi	r4,32
    aa6c:	2089c83a 	sub	r4,r4,r2
    aa70:	1908983a 	sll	r4,r3,r4
    aa74:	d9400117 	ldw	r5,4(sp)
    aa78:	1886d83a 	srl	r3,r3,r2
    aa7c:	2148b03a 	or	r4,r4,r5
    aa80:	99000515 	stw	r4,20(r19)
    aa84:	d8c00015 	stw	r3,0(sp)
    aa88:	003fd006 	br	a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>

0000aa8c <__ratio>:
    aa8c:	defff904 	addi	sp,sp,-28
    aa90:	dc400315 	stw	r17,12(sp)
    aa94:	2823883a 	mov	r17,r5
    aa98:	d9400104 	addi	r5,sp,4
    aa9c:	dfc00615 	stw	ra,24(sp)
    aaa0:	dcc00515 	stw	r19,20(sp)
    aaa4:	dc800415 	stw	r18,16(sp)
    aaa8:	2027883a 	mov	r19,r4
    aaac:	dc000215 	stw	r16,8(sp)
    aab0:	000a8340 	call	a834 <__b2d>
    aab4:	8809883a 	mov	r4,r17
    aab8:	d80b883a 	mov	r5,sp
    aabc:	1025883a 	mov	r18,r2
    aac0:	1821883a 	mov	r16,r3
    aac4:	000a8340 	call	a834 <__b2d>
    aac8:	8a400417 	ldw	r9,16(r17)
    aacc:	9a000417 	ldw	r8,16(r19)
    aad0:	100d883a 	mov	r6,r2
    aad4:	d8800017 	ldw	r2,0(sp)
    aad8:	4251c83a 	sub	r8,r8,r9
    aadc:	4012917a 	slli	r9,r8,5
    aae0:	da000117 	ldw	r8,4(sp)
    aae4:	4091c83a 	sub	r8,r8,r2
    aae8:	4251883a 	add	r8,r8,r9
    aaec:	02000d0e 	bge	zero,r8,ab24 <__ratio+0x98>
    aaf0:	4010953a 	slli	r8,r8,20
    aaf4:	4421883a 	add	r16,r8,r16
    aaf8:	9009883a 	mov	r4,r18
    aafc:	800b883a 	mov	r5,r16
    ab00:	180f883a 	mov	r7,r3
    ab04:	000f8ec0 	call	f8ec <__divdf3>
    ab08:	dfc00617 	ldw	ra,24(sp)
    ab0c:	dcc00517 	ldw	r19,20(sp)
    ab10:	dc800417 	ldw	r18,16(sp)
    ab14:	dc400317 	ldw	r17,12(sp)
    ab18:	dc000217 	ldw	r16,8(sp)
    ab1c:	dec00704 	addi	sp,sp,28
    ab20:	f800283a 	ret
    ab24:	4010953a 	slli	r8,r8,20
    ab28:	1a07c83a 	sub	r3,r3,r8
    ab2c:	003ff206 	br	aaf8 <__alt_mem_Flash_flash_data+0xf400aaf8>

0000ab30 <_mprec_log10>:
    ab30:	defffe04 	addi	sp,sp,-8
    ab34:	dc000015 	stw	r16,0(sp)
    ab38:	dfc00115 	stw	ra,4(sp)
    ab3c:	008005c4 	movi	r2,23
    ab40:	2021883a 	mov	r16,r4
    ab44:	11000d0e 	bge	r2,r4,ab7c <_mprec_log10+0x4c>
    ab48:	0005883a 	mov	r2,zero
    ab4c:	00cffc34 	movhi	r3,16368
    ab50:	843fffc4 	addi	r16,r16,-1
    ab54:	1009883a 	mov	r4,r2
    ab58:	180b883a 	mov	r5,r3
    ab5c:	000d883a 	mov	r6,zero
    ab60:	01d00934 	movhi	r7,16420
    ab64:	00103fc0 	call	103fc <__muldf3>
    ab68:	803ff91e 	bne	r16,zero,ab50 <__alt_mem_Flash_flash_data+0xf400ab50>
    ab6c:	dfc00117 	ldw	ra,4(sp)
    ab70:	dc000017 	ldw	r16,0(sp)
    ab74:	dec00204 	addi	sp,sp,8
    ab78:	f800283a 	ret
    ab7c:	202090fa 	slli	r16,r4,3
    ab80:	008000b4 	movhi	r2,2
    ab84:	10bc5404 	addi	r2,r2,-3760
    ab88:	1421883a 	add	r16,r2,r16
    ab8c:	80800017 	ldw	r2,0(r16)
    ab90:	80c00117 	ldw	r3,4(r16)
    ab94:	dfc00117 	ldw	ra,4(sp)
    ab98:	dc000017 	ldw	r16,0(sp)
    ab9c:	dec00204 	addi	sp,sp,8
    aba0:	f800283a 	ret

0000aba4 <__copybits>:
    aba4:	297fffc4 	addi	r5,r5,-1
    aba8:	280fd17a 	srai	r7,r5,5
    abac:	30c00417 	ldw	r3,16(r6)
    abb0:	30800504 	addi	r2,r6,20
    abb4:	39c00044 	addi	r7,r7,1
    abb8:	18c7883a 	add	r3,r3,r3
    abbc:	39cf883a 	add	r7,r7,r7
    abc0:	18c7883a 	add	r3,r3,r3
    abc4:	39cf883a 	add	r7,r7,r7
    abc8:	10c7883a 	add	r3,r2,r3
    abcc:	21cf883a 	add	r7,r4,r7
    abd0:	10c00d2e 	bgeu	r2,r3,ac08 <__copybits+0x64>
    abd4:	200b883a 	mov	r5,r4
    abd8:	12000017 	ldw	r8,0(r2)
    abdc:	29400104 	addi	r5,r5,4
    abe0:	10800104 	addi	r2,r2,4
    abe4:	2a3fff15 	stw	r8,-4(r5)
    abe8:	10fffb36 	bltu	r2,r3,abd8 <__alt_mem_Flash_flash_data+0xf400abd8>
    abec:	1985c83a 	sub	r2,r3,r6
    abf0:	10bffac4 	addi	r2,r2,-21
    abf4:	1004d0ba 	srli	r2,r2,2
    abf8:	10800044 	addi	r2,r2,1
    abfc:	1085883a 	add	r2,r2,r2
    ac00:	1085883a 	add	r2,r2,r2
    ac04:	2089883a 	add	r4,r4,r2
    ac08:	21c0032e 	bgeu	r4,r7,ac18 <__copybits+0x74>
    ac0c:	20000015 	stw	zero,0(r4)
    ac10:	21000104 	addi	r4,r4,4
    ac14:	21fffd36 	bltu	r4,r7,ac0c <__alt_mem_Flash_flash_data+0xf400ac0c>
    ac18:	f800283a 	ret

0000ac1c <__any_on>:
    ac1c:	20c00417 	ldw	r3,16(r4)
    ac20:	2805d17a 	srai	r2,r5,5
    ac24:	21000504 	addi	r4,r4,20
    ac28:	18800d0e 	bge	r3,r2,ac60 <__any_on+0x44>
    ac2c:	18c7883a 	add	r3,r3,r3
    ac30:	18c7883a 	add	r3,r3,r3
    ac34:	20c7883a 	add	r3,r4,r3
    ac38:	20c0192e 	bgeu	r4,r3,aca0 <__any_on+0x84>
    ac3c:	18bfff17 	ldw	r2,-4(r3)
    ac40:	18ffff04 	addi	r3,r3,-4
    ac44:	1000041e 	bne	r2,zero,ac58 <__any_on+0x3c>
    ac48:	20c0142e 	bgeu	r4,r3,ac9c <__any_on+0x80>
    ac4c:	18ffff04 	addi	r3,r3,-4
    ac50:	19400017 	ldw	r5,0(r3)
    ac54:	283ffc26 	beq	r5,zero,ac48 <__alt_mem_Flash_flash_data+0xf400ac48>
    ac58:	00800044 	movi	r2,1
    ac5c:	f800283a 	ret
    ac60:	10c00a0e 	bge	r2,r3,ac8c <__any_on+0x70>
    ac64:	1085883a 	add	r2,r2,r2
    ac68:	1085883a 	add	r2,r2,r2
    ac6c:	294007cc 	andi	r5,r5,31
    ac70:	2087883a 	add	r3,r4,r2
    ac74:	283ff026 	beq	r5,zero,ac38 <__alt_mem_Flash_flash_data+0xf400ac38>
    ac78:	19800017 	ldw	r6,0(r3)
    ac7c:	3144d83a 	srl	r2,r6,r5
    ac80:	114a983a 	sll	r5,r2,r5
    ac84:	29bff41e 	bne	r5,r6,ac58 <__alt_mem_Flash_flash_data+0xf400ac58>
    ac88:	003feb06 	br	ac38 <__alt_mem_Flash_flash_data+0xf400ac38>
    ac8c:	1085883a 	add	r2,r2,r2
    ac90:	1085883a 	add	r2,r2,r2
    ac94:	2087883a 	add	r3,r4,r2
    ac98:	003fe706 	br	ac38 <__alt_mem_Flash_flash_data+0xf400ac38>
    ac9c:	f800283a 	ret
    aca0:	0005883a 	mov	r2,zero
    aca4:	f800283a 	ret

0000aca8 <_realloc_r>:
    aca8:	defff604 	addi	sp,sp,-40
    acac:	dd000415 	stw	r20,16(sp)
    acb0:	dc400115 	stw	r17,4(sp)
    acb4:	dfc00915 	stw	ra,36(sp)
    acb8:	df000815 	stw	fp,32(sp)
    acbc:	ddc00715 	stw	r23,28(sp)
    acc0:	dd800615 	stw	r22,24(sp)
    acc4:	dd400515 	stw	r21,20(sp)
    acc8:	dcc00315 	stw	r19,12(sp)
    accc:	dc800215 	stw	r18,8(sp)
    acd0:	dc000015 	stw	r16,0(sp)
    acd4:	2829883a 	mov	r20,r5
    acd8:	3023883a 	mov	r17,r6
    acdc:	2800ad26 	beq	r5,zero,af94 <_realloc_r+0x2ec>
    ace0:	2025883a 	mov	r18,r4
    ace4:	001212c0 	call	1212c <__malloc_lock>
    ace8:	a0ffff17 	ldw	r3,-4(r20)
    acec:	043fff04 	movi	r16,-4
    acf0:	890002c4 	addi	r4,r17,11
    acf4:	01c00584 	movi	r7,22
    acf8:	a57ffe04 	addi	r21,r20,-8
    acfc:	1c20703a 	and	r16,r3,r16
    ad00:	39001d2e 	bgeu	r7,r4,ad78 <_realloc_r+0xd0>
    ad04:	05bffe04 	movi	r22,-8
    ad08:	25ac703a 	and	r22,r4,r22
    ad0c:	b00f883a 	mov	r7,r22
    ad10:	b0006516 	blt	r22,zero,aea8 <_realloc_r+0x200>
    ad14:	b4406436 	bltu	r22,r17,aea8 <_realloc_r+0x200>
    ad18:	81c01a0e 	bge	r16,r7,ad84 <_realloc_r+0xdc>
    ad1c:	070000b4 	movhi	fp,2
    ad20:	e73f4f04 	addi	fp,fp,-708
    ad24:	e1400217 	ldw	r5,8(fp)
    ad28:	ac11883a 	add	r8,r21,r16
    ad2c:	2a006226 	beq	r5,r8,aeb8 <_realloc_r+0x210>
    ad30:	41800117 	ldw	r6,4(r8)
    ad34:	027fff84 	movi	r9,-2
    ad38:	3252703a 	and	r9,r6,r9
    ad3c:	4253883a 	add	r9,r8,r9
    ad40:	49000117 	ldw	r4,4(r9)
    ad44:	2100004c 	andi	r4,r4,1
    ad48:	2000281e 	bne	r4,zero,adec <_realloc_r+0x144>
    ad4c:	00bfff04 	movi	r2,-4
    ad50:	3084703a 	and	r2,r6,r2
    ad54:	1409883a 	add	r4,r2,r16
    ad58:	21c05e16 	blt	r4,r7,aed4 <_realloc_r+0x22c>
    ad5c:	40800317 	ldw	r2,12(r8)
    ad60:	41400217 	ldw	r5,8(r8)
    ad64:	a023883a 	mov	r17,r20
    ad68:	2021883a 	mov	r16,r4
    ad6c:	28800315 	stw	r2,12(r5)
    ad70:	11400215 	stw	r5,8(r2)
    ad74:	00000406 	br	ad88 <_realloc_r+0xe0>
    ad78:	01c00404 	movi	r7,16
    ad7c:	382d883a 	mov	r22,r7
    ad80:	003fe406 	br	ad14 <__alt_mem_Flash_flash_data+0xf400ad14>
    ad84:	a023883a 	mov	r17,r20
    ad88:	858fc83a 	sub	r7,r16,r22
    ad8c:	008003c4 	movi	r2,15
    ad90:	18c0004c 	andi	r3,r3,1
    ad94:	11c07236 	bltu	r2,r7,af60 <_realloc_r+0x2b8>
    ad98:	1c06b03a 	or	r3,r3,r16
    ad9c:	a8c00115 	stw	r3,4(r21)
    ada0:	ac21883a 	add	r16,r21,r16
    ada4:	80800117 	ldw	r2,4(r16)
    ada8:	10800054 	ori	r2,r2,1
    adac:	80800115 	stw	r2,4(r16)
    adb0:	9009883a 	mov	r4,r18
    adb4:	001224c0 	call	1224c <__malloc_unlock>
    adb8:	8805883a 	mov	r2,r17
    adbc:	dfc00917 	ldw	ra,36(sp)
    adc0:	df000817 	ldw	fp,32(sp)
    adc4:	ddc00717 	ldw	r23,28(sp)
    adc8:	dd800617 	ldw	r22,24(sp)
    adcc:	dd400517 	ldw	r21,20(sp)
    add0:	dd000417 	ldw	r20,16(sp)
    add4:	dcc00317 	ldw	r19,12(sp)
    add8:	dc800217 	ldw	r18,8(sp)
    addc:	dc400117 	ldw	r17,4(sp)
    ade0:	dc000017 	ldw	r16,0(sp)
    ade4:	dec00a04 	addi	sp,sp,40
    ade8:	f800283a 	ret
    adec:	18c0004c 	andi	r3,r3,1
    adf0:	1800081e 	bne	r3,zero,ae14 <_realloc_r+0x16c>
    adf4:	a4fffe17 	ldw	r19,-8(r20)
    adf8:	00bfff04 	movi	r2,-4
    adfc:	ace7c83a 	sub	r19,r21,r19
    ae00:	98c00117 	ldw	r3,4(r19)
    ae04:	1886703a 	and	r3,r3,r2
    ae08:	98000226 	beq	r19,zero,ae14 <_realloc_r+0x16c>
    ae0c:	1c2f883a 	add	r23,r3,r16
    ae10:	b9c06d0e 	bge	r23,r7,afc8 <_realloc_r+0x320>
    ae14:	880b883a 	mov	r5,r17
    ae18:	9009883a 	mov	r4,r18
    ae1c:	00091e40 	call	91e4 <_malloc_r>
    ae20:	1023883a 	mov	r17,r2
    ae24:	1000ef26 	beq	r2,zero,b1e4 <_realloc_r+0x53c>
    ae28:	a0ffff17 	ldw	r3,-4(r20)
    ae2c:	113ffe04 	addi	r4,r2,-8
    ae30:	00bfff84 	movi	r2,-2
    ae34:	1884703a 	and	r2,r3,r2
    ae38:	a885883a 	add	r2,r21,r2
    ae3c:	2080bf26 	beq	r4,r2,b13c <_realloc_r+0x494>
    ae40:	81bfff04 	addi	r6,r16,-4
    ae44:	00800904 	movi	r2,36
    ae48:	11808936 	bltu	r2,r6,b070 <_realloc_r+0x3c8>
    ae4c:	00c004c4 	movi	r3,19
    ae50:	19806c2e 	bgeu	r3,r6,b004 <_realloc_r+0x35c>
    ae54:	a0c00017 	ldw	r3,0(r20)
    ae58:	88c00015 	stw	r3,0(r17)
    ae5c:	a0c00117 	ldw	r3,4(r20)
    ae60:	88c00115 	stw	r3,4(r17)
    ae64:	00c006c4 	movi	r3,27
    ae68:	1980ac36 	bltu	r3,r6,b11c <_realloc_r+0x474>
    ae6c:	88800204 	addi	r2,r17,8
    ae70:	a0c00204 	addi	r3,r20,8
    ae74:	19000017 	ldw	r4,0(r3)
    ae78:	11000015 	stw	r4,0(r2)
    ae7c:	19000117 	ldw	r4,4(r3)
    ae80:	11000115 	stw	r4,4(r2)
    ae84:	18c00217 	ldw	r3,8(r3)
    ae88:	10c00215 	stw	r3,8(r2)
    ae8c:	a00b883a 	mov	r5,r20
    ae90:	9009883a 	mov	r4,r18
    ae94:	00086140 	call	8614 <_free_r>
    ae98:	9009883a 	mov	r4,r18
    ae9c:	001224c0 	call	1224c <__malloc_unlock>
    aea0:	8805883a 	mov	r2,r17
    aea4:	003fc506 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    aea8:	00800304 	movi	r2,12
    aeac:	90800015 	stw	r2,0(r18)
    aeb0:	0005883a 	mov	r2,zero
    aeb4:	003fc106 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    aeb8:	29800117 	ldw	r6,4(r5)
    aebc:	00bfff04 	movi	r2,-4
    aec0:	b1000404 	addi	r4,r22,16
    aec4:	3084703a 	and	r2,r6,r2
    aec8:	140d883a 	add	r6,r2,r16
    aecc:	31005b0e 	bge	r6,r4,b03c <_realloc_r+0x394>
    aed0:	2811883a 	mov	r8,r5
    aed4:	18c0004c 	andi	r3,r3,1
    aed8:	183fce1e 	bne	r3,zero,ae14 <__alt_mem_Flash_flash_data+0xf400ae14>
    aedc:	a4fffe17 	ldw	r19,-8(r20)
    aee0:	00ffff04 	movi	r3,-4
    aee4:	ace7c83a 	sub	r19,r21,r19
    aee8:	99000117 	ldw	r4,4(r19)
    aeec:	20c6703a 	and	r3,r4,r3
    aef0:	403fc526 	beq	r8,zero,ae08 <__alt_mem_Flash_flash_data+0xf400ae08>
    aef4:	1c2f883a 	add	r23,r3,r16
    aef8:	b8af883a 	add	r23,r23,r2
    aefc:	41406026 	beq	r8,r5,b080 <_realloc_r+0x3d8>
    af00:	b9ffc116 	blt	r23,r7,ae08 <__alt_mem_Flash_flash_data+0xf400ae08>
    af04:	40c00217 	ldw	r3,8(r8)
    af08:	40800317 	ldw	r2,12(r8)
    af0c:	81bfff04 	addi	r6,r16,-4
    af10:	01000904 	movi	r4,36
    af14:	18800315 	stw	r2,12(r3)
    af18:	10c00215 	stw	r3,8(r2)
    af1c:	99400217 	ldw	r5,8(r19)
    af20:	98c00317 	ldw	r3,12(r19)
    af24:	9c400204 	addi	r17,r19,8
    af28:	28c00315 	stw	r3,12(r5)
    af2c:	19400215 	stw	r5,8(r3)
    af30:	21802d36 	bltu	r4,r6,afe8 <_realloc_r+0x340>
    af34:	008004c4 	movi	r2,19
    af38:	1180352e 	bgeu	r2,r6,b010 <_realloc_r+0x368>
    af3c:	a0800017 	ldw	r2,0(r20)
    af40:	98800215 	stw	r2,8(r19)
    af44:	a0800117 	ldw	r2,4(r20)
    af48:	98800315 	stw	r2,12(r19)
    af4c:	008006c4 	movi	r2,27
    af50:	11808036 	bltu	r2,r6,b154 <_realloc_r+0x4ac>
    af54:	98c00404 	addi	r3,r19,16
    af58:	a5000204 	addi	r20,r20,8
    af5c:	00002d06 	br	b014 <_realloc_r+0x36c>
    af60:	1d86b03a 	or	r3,r3,r22
    af64:	ad8b883a 	add	r5,r21,r22
    af68:	a8c00115 	stw	r3,4(r21)
    af6c:	38800054 	ori	r2,r7,1
    af70:	28800115 	stw	r2,4(r5)
    af74:	29cf883a 	add	r7,r5,r7
    af78:	38800117 	ldw	r2,4(r7)
    af7c:	9009883a 	mov	r4,r18
    af80:	29400204 	addi	r5,r5,8
    af84:	10800054 	ori	r2,r2,1
    af88:	38800115 	stw	r2,4(r7)
    af8c:	00086140 	call	8614 <_free_r>
    af90:	003f8706 	br	adb0 <__alt_mem_Flash_flash_data+0xf400adb0>
    af94:	300b883a 	mov	r5,r6
    af98:	dfc00917 	ldw	ra,36(sp)
    af9c:	df000817 	ldw	fp,32(sp)
    afa0:	ddc00717 	ldw	r23,28(sp)
    afa4:	dd800617 	ldw	r22,24(sp)
    afa8:	dd400517 	ldw	r21,20(sp)
    afac:	dd000417 	ldw	r20,16(sp)
    afb0:	dcc00317 	ldw	r19,12(sp)
    afb4:	dc800217 	ldw	r18,8(sp)
    afb8:	dc400117 	ldw	r17,4(sp)
    afbc:	dc000017 	ldw	r16,0(sp)
    afc0:	dec00a04 	addi	sp,sp,40
    afc4:	00091e41 	jmpi	91e4 <_malloc_r>
    afc8:	98800317 	ldw	r2,12(r19)
    afcc:	98c00217 	ldw	r3,8(r19)
    afd0:	81bfff04 	addi	r6,r16,-4
    afd4:	01000904 	movi	r4,36
    afd8:	18800315 	stw	r2,12(r3)
    afdc:	10c00215 	stw	r3,8(r2)
    afe0:	9c400204 	addi	r17,r19,8
    afe4:	21bfd32e 	bgeu	r4,r6,af34 <__alt_mem_Flash_flash_data+0xf400af34>
    afe8:	8809883a 	mov	r4,r17
    afec:	a00b883a 	mov	r5,r20
    aff0:	0009bac0 	call	9bac <memmove>
    aff4:	98c00117 	ldw	r3,4(r19)
    aff8:	b821883a 	mov	r16,r23
    affc:	982b883a 	mov	r21,r19
    b000:	003f6106 	br	ad88 <__alt_mem_Flash_flash_data+0xf400ad88>
    b004:	8805883a 	mov	r2,r17
    b008:	a007883a 	mov	r3,r20
    b00c:	003f9906 	br	ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    b010:	8807883a 	mov	r3,r17
    b014:	a0800017 	ldw	r2,0(r20)
    b018:	b821883a 	mov	r16,r23
    b01c:	982b883a 	mov	r21,r19
    b020:	18800015 	stw	r2,0(r3)
    b024:	a0800117 	ldw	r2,4(r20)
    b028:	18800115 	stw	r2,4(r3)
    b02c:	a0800217 	ldw	r2,8(r20)
    b030:	18800215 	stw	r2,8(r3)
    b034:	98c00117 	ldw	r3,4(r19)
    b038:	003f5306 	br	ad88 <__alt_mem_Flash_flash_data+0xf400ad88>
    b03c:	adab883a 	add	r21,r21,r22
    b040:	3585c83a 	sub	r2,r6,r22
    b044:	e5400215 	stw	r21,8(fp)
    b048:	10800054 	ori	r2,r2,1
    b04c:	a8800115 	stw	r2,4(r21)
    b050:	a0bfff17 	ldw	r2,-4(r20)
    b054:	9009883a 	mov	r4,r18
    b058:	1080004c 	andi	r2,r2,1
    b05c:	b0acb03a 	or	r22,r22,r2
    b060:	a5bfff15 	stw	r22,-4(r20)
    b064:	001224c0 	call	1224c <__malloc_unlock>
    b068:	a005883a 	mov	r2,r20
    b06c:	003f5306 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    b070:	8809883a 	mov	r4,r17
    b074:	a00b883a 	mov	r5,r20
    b078:	0009bac0 	call	9bac <memmove>
    b07c:	003f8306 	br	ae8c <__alt_mem_Flash_flash_data+0xf400ae8c>
    b080:	b0800404 	addi	r2,r22,16
    b084:	b8bf6016 	blt	r23,r2,ae08 <__alt_mem_Flash_flash_data+0xf400ae08>
    b088:	98800317 	ldw	r2,12(r19)
    b08c:	98c00217 	ldw	r3,8(r19)
    b090:	81bfff04 	addi	r6,r16,-4
    b094:	01000904 	movi	r4,36
    b098:	18800315 	stw	r2,12(r3)
    b09c:	10c00215 	stw	r3,8(r2)
    b0a0:	9c400204 	addi	r17,r19,8
    b0a4:	21804336 	bltu	r4,r6,b1b4 <_realloc_r+0x50c>
    b0a8:	008004c4 	movi	r2,19
    b0ac:	11803f2e 	bgeu	r2,r6,b1ac <_realloc_r+0x504>
    b0b0:	a0800017 	ldw	r2,0(r20)
    b0b4:	98800215 	stw	r2,8(r19)
    b0b8:	a0800117 	ldw	r2,4(r20)
    b0bc:	98800315 	stw	r2,12(r19)
    b0c0:	008006c4 	movi	r2,27
    b0c4:	11803f36 	bltu	r2,r6,b1c4 <_realloc_r+0x51c>
    b0c8:	98800404 	addi	r2,r19,16
    b0cc:	a5000204 	addi	r20,r20,8
    b0d0:	a0c00017 	ldw	r3,0(r20)
    b0d4:	10c00015 	stw	r3,0(r2)
    b0d8:	a0c00117 	ldw	r3,4(r20)
    b0dc:	10c00115 	stw	r3,4(r2)
    b0e0:	a0c00217 	ldw	r3,8(r20)
    b0e4:	10c00215 	stw	r3,8(r2)
    b0e8:	9d87883a 	add	r3,r19,r22
    b0ec:	bd85c83a 	sub	r2,r23,r22
    b0f0:	e0c00215 	stw	r3,8(fp)
    b0f4:	10800054 	ori	r2,r2,1
    b0f8:	18800115 	stw	r2,4(r3)
    b0fc:	98800117 	ldw	r2,4(r19)
    b100:	9009883a 	mov	r4,r18
    b104:	1080004c 	andi	r2,r2,1
    b108:	b0acb03a 	or	r22,r22,r2
    b10c:	9d800115 	stw	r22,4(r19)
    b110:	001224c0 	call	1224c <__malloc_unlock>
    b114:	8805883a 	mov	r2,r17
    b118:	003f2806 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    b11c:	a0c00217 	ldw	r3,8(r20)
    b120:	88c00215 	stw	r3,8(r17)
    b124:	a0c00317 	ldw	r3,12(r20)
    b128:	88c00315 	stw	r3,12(r17)
    b12c:	30801126 	beq	r6,r2,b174 <_realloc_r+0x4cc>
    b130:	88800404 	addi	r2,r17,16
    b134:	a0c00404 	addi	r3,r20,16
    b138:	003f4e06 	br	ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    b13c:	893fff17 	ldw	r4,-4(r17)
    b140:	00bfff04 	movi	r2,-4
    b144:	a023883a 	mov	r17,r20
    b148:	2084703a 	and	r2,r4,r2
    b14c:	80a1883a 	add	r16,r16,r2
    b150:	003f0d06 	br	ad88 <__alt_mem_Flash_flash_data+0xf400ad88>
    b154:	a0800217 	ldw	r2,8(r20)
    b158:	98800415 	stw	r2,16(r19)
    b15c:	a0800317 	ldw	r2,12(r20)
    b160:	98800515 	stw	r2,20(r19)
    b164:	31000a26 	beq	r6,r4,b190 <_realloc_r+0x4e8>
    b168:	98c00604 	addi	r3,r19,24
    b16c:	a5000404 	addi	r20,r20,16
    b170:	003fa806 	br	b014 <__alt_mem_Flash_flash_data+0xf400b014>
    b174:	a1000417 	ldw	r4,16(r20)
    b178:	88800604 	addi	r2,r17,24
    b17c:	a0c00604 	addi	r3,r20,24
    b180:	89000415 	stw	r4,16(r17)
    b184:	a1000517 	ldw	r4,20(r20)
    b188:	89000515 	stw	r4,20(r17)
    b18c:	003f3906 	br	ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    b190:	a0800417 	ldw	r2,16(r20)
    b194:	a5000604 	addi	r20,r20,24
    b198:	98c00804 	addi	r3,r19,32
    b19c:	98800615 	stw	r2,24(r19)
    b1a0:	a0bfff17 	ldw	r2,-4(r20)
    b1a4:	98800715 	stw	r2,28(r19)
    b1a8:	003f9a06 	br	b014 <__alt_mem_Flash_flash_data+0xf400b014>
    b1ac:	8805883a 	mov	r2,r17
    b1b0:	003fc706 	br	b0d0 <__alt_mem_Flash_flash_data+0xf400b0d0>
    b1b4:	8809883a 	mov	r4,r17
    b1b8:	a00b883a 	mov	r5,r20
    b1bc:	0009bac0 	call	9bac <memmove>
    b1c0:	003fc906 	br	b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b1c4:	a0800217 	ldw	r2,8(r20)
    b1c8:	98800415 	stw	r2,16(r19)
    b1cc:	a0800317 	ldw	r2,12(r20)
    b1d0:	98800515 	stw	r2,20(r19)
    b1d4:	31000726 	beq	r6,r4,b1f4 <_realloc_r+0x54c>
    b1d8:	98800604 	addi	r2,r19,24
    b1dc:	a5000404 	addi	r20,r20,16
    b1e0:	003fbb06 	br	b0d0 <__alt_mem_Flash_flash_data+0xf400b0d0>
    b1e4:	9009883a 	mov	r4,r18
    b1e8:	001224c0 	call	1224c <__malloc_unlock>
    b1ec:	0005883a 	mov	r2,zero
    b1f0:	003ef206 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    b1f4:	a0c00417 	ldw	r3,16(r20)
    b1f8:	a5000604 	addi	r20,r20,24
    b1fc:	98800804 	addi	r2,r19,32
    b200:	98c00615 	stw	r3,24(r19)
    b204:	a0ffff17 	ldw	r3,-4(r20)
    b208:	98c00715 	stw	r3,28(r19)
    b20c:	003fb006 	br	b0d0 <__alt_mem_Flash_flash_data+0xf400b0d0>

0000b210 <__fpclassifyd>:
    b210:	00a00034 	movhi	r2,32768
    b214:	10bfffc4 	addi	r2,r2,-1
    b218:	2884703a 	and	r2,r5,r2
    b21c:	10000726 	beq	r2,zero,b23c <__fpclassifyd+0x2c>
    b220:	00fffc34 	movhi	r3,65520
    b224:	019ff834 	movhi	r6,32736
    b228:	28c7883a 	add	r3,r5,r3
    b22c:	31bfffc4 	addi	r6,r6,-1
    b230:	30c00536 	bltu	r6,r3,b248 <__fpclassifyd+0x38>
    b234:	00800104 	movi	r2,4
    b238:	f800283a 	ret
    b23c:	2000021e 	bne	r4,zero,b248 <__fpclassifyd+0x38>
    b240:	00800084 	movi	r2,2
    b244:	f800283a 	ret
    b248:	00dffc34 	movhi	r3,32752
    b24c:	019ff834 	movhi	r6,32736
    b250:	28cb883a 	add	r5,r5,r3
    b254:	31bfffc4 	addi	r6,r6,-1
    b258:	317ff62e 	bgeu	r6,r5,b234 <__alt_mem_Flash_flash_data+0xf400b234>
    b25c:	01400434 	movhi	r5,16
    b260:	297fffc4 	addi	r5,r5,-1
    b264:	28800236 	bltu	r5,r2,b270 <__fpclassifyd+0x60>
    b268:	008000c4 	movi	r2,3
    b26c:	f800283a 	ret
    b270:	10c00226 	beq	r2,r3,b27c <__fpclassifyd+0x6c>
    b274:	0005883a 	mov	r2,zero
    b278:	f800283a 	ret
    b27c:	2005003a 	cmpeq	r2,r4,zero
    b280:	f800283a 	ret

0000b284 <_sbrk_r>:
    b284:	defffd04 	addi	sp,sp,-12
    b288:	dc000015 	stw	r16,0(sp)
    b28c:	040000b4 	movhi	r16,2
    b290:	dc400115 	stw	r17,4(sp)
    b294:	840f4f04 	addi	r16,r16,15676
    b298:	2023883a 	mov	r17,r4
    b29c:	2809883a 	mov	r4,r5
    b2a0:	dfc00215 	stw	ra,8(sp)
    b2a4:	80000015 	stw	zero,0(r16)
    b2a8:	0011e180 	call	11e18 <sbrk>
    b2ac:	00ffffc4 	movi	r3,-1
    b2b0:	10c00526 	beq	r2,r3,b2c8 <_sbrk_r+0x44>
    b2b4:	dfc00217 	ldw	ra,8(sp)
    b2b8:	dc400117 	ldw	r17,4(sp)
    b2bc:	dc000017 	ldw	r16,0(sp)
    b2c0:	dec00304 	addi	sp,sp,12
    b2c4:	f800283a 	ret
    b2c8:	80c00017 	ldw	r3,0(r16)
    b2cc:	183ff926 	beq	r3,zero,b2b4 <__alt_mem_Flash_flash_data+0xf400b2b4>
    b2d0:	88c00015 	stw	r3,0(r17)
    b2d4:	003ff706 	br	b2b4 <__alt_mem_Flash_flash_data+0xf400b2b4>

0000b2d8 <__sread>:
    b2d8:	defffe04 	addi	sp,sp,-8
    b2dc:	dc000015 	stw	r16,0(sp)
    b2e0:	2821883a 	mov	r16,r5
    b2e4:	2940038f 	ldh	r5,14(r5)
    b2e8:	dfc00115 	stw	ra,4(sp)
    b2ec:	000e03c0 	call	e03c <_read_r>
    b2f0:	10000716 	blt	r2,zero,b310 <__sread+0x38>
    b2f4:	80c01417 	ldw	r3,80(r16)
    b2f8:	1887883a 	add	r3,r3,r2
    b2fc:	80c01415 	stw	r3,80(r16)
    b300:	dfc00117 	ldw	ra,4(sp)
    b304:	dc000017 	ldw	r16,0(sp)
    b308:	dec00204 	addi	sp,sp,8
    b30c:	f800283a 	ret
    b310:	80c0030b 	ldhu	r3,12(r16)
    b314:	18fbffcc 	andi	r3,r3,61439
    b318:	80c0030d 	sth	r3,12(r16)
    b31c:	dfc00117 	ldw	ra,4(sp)
    b320:	dc000017 	ldw	r16,0(sp)
    b324:	dec00204 	addi	sp,sp,8
    b328:	f800283a 	ret

0000b32c <__seofread>:
    b32c:	0005883a 	mov	r2,zero
    b330:	f800283a 	ret

0000b334 <__swrite>:
    b334:	2880030b 	ldhu	r2,12(r5)
    b338:	defffb04 	addi	sp,sp,-20
    b33c:	dcc00315 	stw	r19,12(sp)
    b340:	dc800215 	stw	r18,8(sp)
    b344:	dc400115 	stw	r17,4(sp)
    b348:	dc000015 	stw	r16,0(sp)
    b34c:	dfc00415 	stw	ra,16(sp)
    b350:	10c0400c 	andi	r3,r2,256
    b354:	2821883a 	mov	r16,r5
    b358:	2027883a 	mov	r19,r4
    b35c:	3025883a 	mov	r18,r6
    b360:	3823883a 	mov	r17,r7
    b364:	18000526 	beq	r3,zero,b37c <__swrite+0x48>
    b368:	2940038f 	ldh	r5,14(r5)
    b36c:	000d883a 	mov	r6,zero
    b370:	01c00084 	movi	r7,2
    b374:	000dfe00 	call	dfe0 <_lseek_r>
    b378:	8080030b 	ldhu	r2,12(r16)
    b37c:	8140038f 	ldh	r5,14(r16)
    b380:	10bbffcc 	andi	r2,r2,61439
    b384:	9809883a 	mov	r4,r19
    b388:	900d883a 	mov	r6,r18
    b38c:	880f883a 	mov	r7,r17
    b390:	8080030d 	sth	r2,12(r16)
    b394:	dfc00417 	ldw	ra,16(sp)
    b398:	dcc00317 	ldw	r19,12(sp)
    b39c:	dc800217 	ldw	r18,8(sp)
    b3a0:	dc400117 	ldw	r17,4(sp)
    b3a4:	dc000017 	ldw	r16,0(sp)
    b3a8:	dec00504 	addi	sp,sp,20
    b3ac:	000dadc1 	jmpi	dadc <_write_r>

0000b3b0 <__sseek>:
    b3b0:	defffe04 	addi	sp,sp,-8
    b3b4:	dc000015 	stw	r16,0(sp)
    b3b8:	2821883a 	mov	r16,r5
    b3bc:	2940038f 	ldh	r5,14(r5)
    b3c0:	dfc00115 	stw	ra,4(sp)
    b3c4:	000dfe00 	call	dfe0 <_lseek_r>
    b3c8:	00ffffc4 	movi	r3,-1
    b3cc:	10c00826 	beq	r2,r3,b3f0 <__sseek+0x40>
    b3d0:	80c0030b 	ldhu	r3,12(r16)
    b3d4:	80801415 	stw	r2,80(r16)
    b3d8:	18c40014 	ori	r3,r3,4096
    b3dc:	80c0030d 	sth	r3,12(r16)
    b3e0:	dfc00117 	ldw	ra,4(sp)
    b3e4:	dc000017 	ldw	r16,0(sp)
    b3e8:	dec00204 	addi	sp,sp,8
    b3ec:	f800283a 	ret
    b3f0:	80c0030b 	ldhu	r3,12(r16)
    b3f4:	18fbffcc 	andi	r3,r3,61439
    b3f8:	80c0030d 	sth	r3,12(r16)
    b3fc:	dfc00117 	ldw	ra,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00204 	addi	sp,sp,8
    b408:	f800283a 	ret

0000b40c <__sclose>:
    b40c:	2940038f 	ldh	r5,14(r5)
    b410:	000db381 	jmpi	db38 <_close_r>

0000b414 <__ssprint_r>:
    b414:	30800217 	ldw	r2,8(r6)
    b418:	defff604 	addi	sp,sp,-40
    b41c:	ddc00715 	stw	r23,28(sp)
    b420:	dc800215 	stw	r18,8(sp)
    b424:	dfc00915 	stw	ra,36(sp)
    b428:	df000815 	stw	fp,32(sp)
    b42c:	dd800615 	stw	r22,24(sp)
    b430:	dd400515 	stw	r21,20(sp)
    b434:	dd000415 	stw	r20,16(sp)
    b438:	dcc00315 	stw	r19,12(sp)
    b43c:	dc400115 	stw	r17,4(sp)
    b440:	dc000015 	stw	r16,0(sp)
    b444:	3025883a 	mov	r18,r6
    b448:	35c00017 	ldw	r23,0(r6)
    b44c:	10005626 	beq	r2,zero,b5a8 <__ssprint_r+0x194>
    b450:	2027883a 	mov	r19,r4
    b454:	28800217 	ldw	r2,8(r5)
    b458:	29000017 	ldw	r4,0(r5)
    b45c:	2823883a 	mov	r17,r5
    b460:	0039883a 	mov	fp,zero
    b464:	0021883a 	mov	r16,zero
    b468:	80003926 	beq	r16,zero,b550 <__ssprint_r+0x13c>
    b46c:	102b883a 	mov	r21,r2
    b470:	102d883a 	mov	r22,r2
    b474:	80803a36 	bltu	r16,r2,b560 <__ssprint_r+0x14c>
    b478:	88c0030b 	ldhu	r3,12(r17)
    b47c:	1881200c 	andi	r2,r3,1152
    b480:	10002626 	beq	r2,zero,b51c <__ssprint_r+0x108>
    b484:	88800517 	ldw	r2,20(r17)
    b488:	89400417 	ldw	r5,16(r17)
    b48c:	81c00044 	addi	r7,r16,1
    b490:	108d883a 	add	r6,r2,r2
    b494:	3085883a 	add	r2,r6,r2
    b498:	100cd7fa 	srli	r6,r2,31
    b49c:	216dc83a 	sub	r22,r4,r5
    b4a0:	3d89883a 	add	r4,r7,r22
    b4a4:	3085883a 	add	r2,r6,r2
    b4a8:	102bd07a 	srai	r21,r2,1
    b4ac:	a80d883a 	mov	r6,r21
    b4b0:	a900022e 	bgeu	r21,r4,b4bc <__ssprint_r+0xa8>
    b4b4:	202b883a 	mov	r21,r4
    b4b8:	200d883a 	mov	r6,r4
    b4bc:	18c1000c 	andi	r3,r3,1024
    b4c0:	9809883a 	mov	r4,r19
    b4c4:	18002926 	beq	r3,zero,b56c <__ssprint_r+0x158>
    b4c8:	300b883a 	mov	r5,r6
    b4cc:	00091e40 	call	91e4 <_malloc_r>
    b4d0:	1029883a 	mov	r20,r2
    b4d4:	10002b26 	beq	r2,zero,b584 <__ssprint_r+0x170>
    b4d8:	89400417 	ldw	r5,16(r17)
    b4dc:	1009883a 	mov	r4,r2
    b4e0:	b00d883a 	mov	r6,r22
    b4e4:	0009a740 	call	9a74 <memcpy>
    b4e8:	8880030b 	ldhu	r2,12(r17)
    b4ec:	00fedfc4 	movi	r3,-1153
    b4f0:	10c4703a 	and	r2,r2,r3
    b4f4:	10802014 	ori	r2,r2,128
    b4f8:	8880030d 	sth	r2,12(r17)
    b4fc:	a589883a 	add	r4,r20,r22
    b500:	adadc83a 	sub	r22,r21,r22
    b504:	8d400515 	stw	r21,20(r17)
    b508:	8d800215 	stw	r22,8(r17)
    b50c:	8d000415 	stw	r20,16(r17)
    b510:	89000015 	stw	r4,0(r17)
    b514:	802b883a 	mov	r21,r16
    b518:	802d883a 	mov	r22,r16
    b51c:	e00b883a 	mov	r5,fp
    b520:	b00d883a 	mov	r6,r22
    b524:	0009bac0 	call	9bac <memmove>
    b528:	88800217 	ldw	r2,8(r17)
    b52c:	89000017 	ldw	r4,0(r17)
    b530:	90c00217 	ldw	r3,8(r18)
    b534:	1545c83a 	sub	r2,r2,r21
    b538:	2589883a 	add	r4,r4,r22
    b53c:	88800215 	stw	r2,8(r17)
    b540:	89000015 	stw	r4,0(r17)
    b544:	1c21c83a 	sub	r16,r3,r16
    b548:	94000215 	stw	r16,8(r18)
    b54c:	80001626 	beq	r16,zero,b5a8 <__ssprint_r+0x194>
    b550:	bf000017 	ldw	fp,0(r23)
    b554:	bc000117 	ldw	r16,4(r23)
    b558:	bdc00204 	addi	r23,r23,8
    b55c:	003fc206 	br	b468 <__alt_mem_Flash_flash_data+0xf400b468>
    b560:	802b883a 	mov	r21,r16
    b564:	802d883a 	mov	r22,r16
    b568:	003fec06 	br	b51c <__alt_mem_Flash_flash_data+0xf400b51c>
    b56c:	000aca80 	call	aca8 <_realloc_r>
    b570:	1029883a 	mov	r20,r2
    b574:	103fe11e 	bne	r2,zero,b4fc <__alt_mem_Flash_flash_data+0xf400b4fc>
    b578:	89400417 	ldw	r5,16(r17)
    b57c:	9809883a 	mov	r4,r19
    b580:	00086140 	call	8614 <_free_r>
    b584:	88c0030b 	ldhu	r3,12(r17)
    b588:	00800304 	movi	r2,12
    b58c:	98800015 	stw	r2,0(r19)
    b590:	18c01014 	ori	r3,r3,64
    b594:	88c0030d 	sth	r3,12(r17)
    b598:	00bfffc4 	movi	r2,-1
    b59c:	90000215 	stw	zero,8(r18)
    b5a0:	90000115 	stw	zero,4(r18)
    b5a4:	00000206 	br	b5b0 <__ssprint_r+0x19c>
    b5a8:	90000115 	stw	zero,4(r18)
    b5ac:	0005883a 	mov	r2,zero
    b5b0:	dfc00917 	ldw	ra,36(sp)
    b5b4:	df000817 	ldw	fp,32(sp)
    b5b8:	ddc00717 	ldw	r23,28(sp)
    b5bc:	dd800617 	ldw	r22,24(sp)
    b5c0:	dd400517 	ldw	r21,20(sp)
    b5c4:	dd000417 	ldw	r20,16(sp)
    b5c8:	dcc00317 	ldw	r19,12(sp)
    b5cc:	dc800217 	ldw	r18,8(sp)
    b5d0:	dc400117 	ldw	r17,4(sp)
    b5d4:	dc000017 	ldw	r16,0(sp)
    b5d8:	dec00a04 	addi	sp,sp,40
    b5dc:	f800283a 	ret

0000b5e0 <___svfiprintf_internal_r>:
    b5e0:	2880030b 	ldhu	r2,12(r5)
    b5e4:	deffc904 	addi	sp,sp,-220
    b5e8:	dd403215 	stw	r21,200(sp)
    b5ec:	dfc03615 	stw	ra,216(sp)
    b5f0:	df003515 	stw	fp,212(sp)
    b5f4:	ddc03415 	stw	r23,208(sp)
    b5f8:	dd803315 	stw	r22,204(sp)
    b5fc:	dd003115 	stw	r20,196(sp)
    b600:	dcc03015 	stw	r19,192(sp)
    b604:	dc802f15 	stw	r18,188(sp)
    b608:	dc402e15 	stw	r17,184(sp)
    b60c:	dc002d15 	stw	r16,180(sp)
    b610:	d9402715 	stw	r5,156(sp)
    b614:	d9002915 	stw	r4,164(sp)
    b618:	1080200c 	andi	r2,r2,128
    b61c:	d9c02315 	stw	r7,140(sp)
    b620:	302b883a 	mov	r21,r6
    b624:	10000226 	beq	r2,zero,b630 <___svfiprintf_internal_r+0x50>
    b628:	28800417 	ldw	r2,16(r5)
    b62c:	1003ce26 	beq	r2,zero,c568 <___svfiprintf_internal_r+0xf88>
    b630:	dac01a04 	addi	r11,sp,104
    b634:	da8019c4 	addi	r10,sp,103
    b638:	dc802917 	ldw	r18,164(sp)
    b63c:	dd002717 	ldw	r20,156(sp)
    b640:	04c000b4 	movhi	r19,2
    b644:	dac01e15 	stw	r11,120(sp)
    b648:	5a97c83a 	sub	r11,r11,r10
    b64c:	9cfc8604 	addi	r19,r19,-3560
    b650:	da801f15 	stw	r10,124(sp)
    b654:	dec01a15 	stw	sp,104(sp)
    b658:	d8001c15 	stw	zero,112(sp)
    b65c:	d8001b15 	stw	zero,108(sp)
    b660:	d811883a 	mov	r8,sp
    b664:	d8002a15 	stw	zero,168(sp)
    b668:	d8002415 	stw	zero,144(sp)
    b66c:	dac02b15 	stw	r11,172(sp)
    b670:	a8800007 	ldb	r2,0(r21)
    b674:	10026a26 	beq	r2,zero,c020 <___svfiprintf_internal_r+0xa40>
    b678:	01000944 	movi	r4,37
    b67c:	11026826 	beq	r2,r4,c020 <___svfiprintf_internal_r+0xa40>
    b680:	a805883a 	mov	r2,r21
    b684:	00000106 	br	b68c <___svfiprintf_internal_r+0xac>
    b688:	19000326 	beq	r3,r4,b698 <___svfiprintf_internal_r+0xb8>
    b68c:	10800044 	addi	r2,r2,1
    b690:	10c00007 	ldb	r3,0(r2)
    b694:	183ffc1e 	bne	r3,zero,b688 <__alt_mem_Flash_flash_data+0xf400b688>
    b698:	1561c83a 	sub	r16,r2,r21
    b69c:	102d883a 	mov	r22,r2
    b6a0:	80000e26 	beq	r16,zero,b6dc <___svfiprintf_internal_r+0xfc>
    b6a4:	d8c01c17 	ldw	r3,112(sp)
    b6a8:	d8801b17 	ldw	r2,108(sp)
    b6ac:	45400015 	stw	r21,0(r8)
    b6b0:	1c07883a 	add	r3,r3,r16
    b6b4:	10800044 	addi	r2,r2,1
    b6b8:	d8c01c15 	stw	r3,112(sp)
    b6bc:	44000115 	stw	r16,4(r8)
    b6c0:	d8801b15 	stw	r2,108(sp)
    b6c4:	00c001c4 	movi	r3,7
    b6c8:	1882d816 	blt	r3,r2,c22c <___svfiprintf_internal_r+0xc4c>
    b6cc:	42000204 	addi	r8,r8,8
    b6d0:	da802417 	ldw	r10,144(sp)
    b6d4:	5415883a 	add	r10,r10,r16
    b6d8:	da802415 	stw	r10,144(sp)
    b6dc:	b0800007 	ldb	r2,0(r22)
    b6e0:	10027526 	beq	r2,zero,c0b8 <___svfiprintf_internal_r+0xad8>
    b6e4:	b1000047 	ldb	r4,1(r22)
    b6e8:	b5400044 	addi	r21,r22,1
    b6ec:	d8001d85 	stb	zero,118(sp)
    b6f0:	000d883a 	mov	r6,zero
    b6f4:	043fffc4 	movi	r16,-1
    b6f8:	d8002115 	stw	zero,132(sp)
    b6fc:	0023883a 	mov	r17,zero
    b700:	00c01604 	movi	r3,88
    b704:	01400244 	movi	r5,9
    b708:	02400a84 	movi	r9,42
    b70c:	01c01b04 	movi	r7,108
    b710:	ad400044 	addi	r21,r21,1
    b714:	20bff804 	addi	r2,r4,-32
    b718:	18819736 	bltu	r3,r2,bd78 <___svfiprintf_internal_r+0x798>
    b71c:	100490ba 	slli	r2,r2,2
    b720:	02c00074 	movhi	r11,1
    b724:	5aedcd04 	addi	r11,r11,-18636
    b728:	12c5883a 	add	r2,r2,r11
    b72c:	10800017 	ldw	r2,0(r2)
    b730:	1000683a 	jmp	r2
    b734:	0000bc70 	cmpltui	zero,zero,753
    b738:	0000bd78 	rdprs	zero,zero,757
    b73c:	0000bd78 	rdprs	zero,zero,757
    b740:	0000bc64 	muli	zero,zero,753
    b744:	0000bd78 	rdprs	zero,zero,757
    b748:	0000bd78 	rdprs	zero,zero,757
    b74c:	0000bd78 	rdprs	zero,zero,757
    b750:	0000bd78 	rdprs	zero,zero,757
    b754:	0000bd78 	rdprs	zero,zero,757
    b758:	0000bd78 	rdprs	zero,zero,757
    b75c:	0000b990 	cmplti	zero,zero,742
    b760:	0000bdac 	andhi	zero,zero,758
    b764:	0000bd78 	rdprs	zero,zero,757
    b768:	0000b9b8 	rdprs	zero,zero,742
    b76c:	0000bdb8 	rdprs	zero,zero,758
    b770:	0000bd78 	rdprs	zero,zero,757
    b774:	0000bda0 	cmpeqi	zero,zero,758
    b778:	0000bd40 	call	bd4 <task3+0x94>
    b77c:	0000bd40 	call	bd4 <task3+0x94>
    b780:	0000bd40 	call	bd4 <task3+0x94>
    b784:	0000bd40 	call	bd4 <task3+0x94>
    b788:	0000bd40 	call	bd4 <task3+0x94>
    b78c:	0000bd40 	call	bd4 <task3+0x94>
    b790:	0000bd40 	call	bd4 <task3+0x94>
    b794:	0000bd40 	call	bd4 <task3+0x94>
    b798:	0000bd40 	call	bd4 <task3+0x94>
    b79c:	0000bd78 	rdprs	zero,zero,757
    b7a0:	0000bd78 	rdprs	zero,zero,757
    b7a4:	0000bd78 	rdprs	zero,zero,757
    b7a8:	0000bd78 	rdprs	zero,zero,757
    b7ac:	0000bd78 	rdprs	zero,zero,757
    b7b0:	0000bd78 	rdprs	zero,zero,757
    b7b4:	0000bd78 	rdprs	zero,zero,757
    b7b8:	0000bd78 	rdprs	zero,zero,757
    b7bc:	0000bd78 	rdprs	zero,zero,757
    b7c0:	0000bd78 	rdprs	zero,zero,757
    b7c4:	0000bcd8 	cmpnei	zero,zero,755
    b7c8:	0000bd78 	rdprs	zero,zero,757
    b7cc:	0000bd78 	rdprs	zero,zero,757
    b7d0:	0000bd78 	rdprs	zero,zero,757
    b7d4:	0000bd78 	rdprs	zero,zero,757
    b7d8:	0000bd78 	rdprs	zero,zero,757
    b7dc:	0000bd78 	rdprs	zero,zero,757
    b7e0:	0000bd78 	rdprs	zero,zero,757
    b7e4:	0000bd78 	rdprs	zero,zero,757
    b7e8:	0000bd78 	rdprs	zero,zero,757
    b7ec:	0000bd78 	rdprs	zero,zero,757
    b7f0:	0000b964 	muli	zero,zero,741
    b7f4:	0000bd78 	rdprs	zero,zero,757
    b7f8:	0000bd78 	rdprs	zero,zero,757
    b7fc:	0000bd78 	rdprs	zero,zero,757
    b800:	0000bd78 	rdprs	zero,zero,757
    b804:	0000bd78 	rdprs	zero,zero,757
    b808:	0000b898 	cmpnei	zero,zero,738
    b80c:	0000bd78 	rdprs	zero,zero,757
    b810:	0000bd78 	rdprs	zero,zero,757
    b814:	0000bbc4 	movi	zero,751
    b818:	0000bd78 	rdprs	zero,zero,757
    b81c:	0000bd78 	rdprs	zero,zero,757
    b820:	0000bd78 	rdprs	zero,zero,757
    b824:	0000bd78 	rdprs	zero,zero,757
    b828:	0000bd78 	rdprs	zero,zero,757
    b82c:	0000bd78 	rdprs	zero,zero,757
    b830:	0000bd78 	rdprs	zero,zero,757
    b834:	0000bd78 	rdprs	zero,zero,757
    b838:	0000bd78 	rdprs	zero,zero,757
    b83c:	0000bd78 	rdprs	zero,zero,757
    b840:	0000bab0 	cmpltui	zero,zero,746
    b844:	0000ba70 	cmpltui	zero,zero,745
    b848:	0000bd78 	rdprs	zero,zero,757
    b84c:	0000bd78 	rdprs	zero,zero,757
    b850:	0000bd78 	rdprs	zero,zero,757
    b854:	0000bc20 	cmpeqi	zero,zero,752
    b858:	0000ba70 	cmpltui	zero,zero,745
    b85c:	0000bd78 	rdprs	zero,zero,757
    b860:	0000bd78 	rdprs	zero,zero,757
    b864:	0000bc0c 	andi	zero,zero,752
    b868:	0000bd78 	rdprs	zero,zero,757
    b86c:	0000bc2c 	andhi	zero,zero,752
    b870:	0000b968 	cmpgeui	zero,zero,741
    b874:	0000ba2c 	andhi	zero,zero,744
    b878:	0000ba20 	cmpeqi	zero,zero,744
    b87c:	0000bd78 	rdprs	zero,zero,757
    b880:	0000b9c4 	movi	zero,743
    b884:	0000bd78 	rdprs	zero,zero,757
    b888:	0000b89c 	xori	zero,zero,738
    b88c:	0000bd78 	rdprs	zero,zero,757
    b890:	0000bd78 	rdprs	zero,zero,757
    b894:	0000bc8c 	andi	zero,zero,754
    b898:	8c400414 	ori	r17,r17,16
    b89c:	8880080c 	andi	r2,r17,32
    b8a0:	10029626 	beq	r2,zero,c2fc <___svfiprintf_internal_r+0xd1c>
    b8a4:	da802317 	ldw	r10,140(sp)
    b8a8:	dac02317 	ldw	r11,140(sp)
    b8ac:	00800044 	movi	r2,1
    b8b0:	52400017 	ldw	r9,0(r10)
    b8b4:	52800117 	ldw	r10,4(r10)
    b8b8:	5ac00204 	addi	r11,r11,8
    b8bc:	dac02315 	stw	r11,140(sp)
    b8c0:	4a86b03a 	or	r3,r9,r10
    b8c4:	d8001d85 	stb	zero,118(sp)
    b8c8:	8039883a 	mov	fp,r16
    b8cc:	0017883a 	mov	r11,zero
    b8d0:	80000216 	blt	r16,zero,b8dc <___svfiprintf_internal_r+0x2fc>
    b8d4:	013fdfc4 	movi	r4,-129
    b8d8:	8922703a 	and	r17,r17,r4
    b8dc:	1801d21e 	bne	r3,zero,c028 <___svfiprintf_internal_r+0xa48>
    b8e0:	80024626 	beq	r16,zero,c1fc <___svfiprintf_internal_r+0xc1c>
    b8e4:	10803fcc 	andi	r2,r2,255
    b8e8:	00c00044 	movi	r3,1
    b8ec:	10c2b426 	beq	r2,r3,c3c0 <___svfiprintf_internal_r+0xde0>
    b8f0:	00c00084 	movi	r3,2
    b8f4:	10c25d26 	beq	r2,r3,c26c <___svfiprintf_internal_r+0xc8c>
    b8f8:	d8c01a04 	addi	r3,sp,104
    b8fc:	4808d0fa 	srli	r4,r9,3
    b900:	500a977a 	slli	r5,r10,29
    b904:	5014d0fa 	srli	r10,r10,3
    b908:	4a4001cc 	andi	r9,r9,7
    b90c:	48800c04 	addi	r2,r9,48
    b910:	18ffffc4 	addi	r3,r3,-1
    b914:	2912b03a 	or	r9,r5,r4
    b918:	18800005 	stb	r2,0(r3)
    b91c:	4a88b03a 	or	r4,r9,r10
    b920:	203ff61e 	bne	r4,zero,b8fc <__alt_mem_Flash_flash_data+0xf400b8fc>
    b924:	8900004c 	andi	r4,r17,1
    b928:	d8c02615 	stw	r3,152(sp)
    b92c:	2002961e 	bne	r4,zero,c388 <___svfiprintf_internal_r+0xda8>
    b930:	da801e17 	ldw	r10,120(sp)
    b934:	50f9c83a 	sub	fp,r10,r3
    b938:	df002015 	stw	fp,128(sp)
    b93c:	e400010e 	bge	fp,r16,b944 <___svfiprintf_internal_r+0x364>
    b940:	dc002015 	stw	r16,128(sp)
    b944:	5ac03fcc 	andi	r11,r11,255
    b948:	5ac0201c 	xori	r11,r11,128
    b94c:	5affe004 	addi	r11,r11,-128
    b950:	58006326 	beq	r11,zero,bae0 <___svfiprintf_internal_r+0x500>
    b954:	d8c02017 	ldw	r3,128(sp)
    b958:	18c00044 	addi	r3,r3,1
    b95c:	d8c02015 	stw	r3,128(sp)
    b960:	00005f06 	br	bae0 <___svfiprintf_internal_r+0x500>
    b964:	8c400414 	ori	r17,r17,16
    b968:	8880080c 	andi	r2,r17,32
    b96c:	10027926 	beq	r2,zero,c354 <___svfiprintf_internal_r+0xd74>
    b970:	dac02317 	ldw	r11,140(sp)
    b974:	0005883a 	mov	r2,zero
    b978:	5a400017 	ldw	r9,0(r11)
    b97c:	5a800117 	ldw	r10,4(r11)
    b980:	5ac00204 	addi	r11,r11,8
    b984:	dac02315 	stw	r11,140(sp)
    b988:	4a86b03a 	or	r3,r9,r10
    b98c:	003fcd06 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    b990:	da802317 	ldw	r10,140(sp)
    b994:	dac02317 	ldw	r11,140(sp)
    b998:	52800017 	ldw	r10,0(r10)
    b99c:	58800104 	addi	r2,r11,4
    b9a0:	da802115 	stw	r10,132(sp)
    b9a4:	50028c0e 	bge	r10,zero,c3d8 <___svfiprintf_internal_r+0xdf8>
    b9a8:	da802117 	ldw	r10,132(sp)
    b9ac:	d8802315 	stw	r2,140(sp)
    b9b0:	0295c83a 	sub	r10,zero,r10
    b9b4:	da802115 	stw	r10,132(sp)
    b9b8:	8c400114 	ori	r17,r17,4
    b9bc:	a9000007 	ldb	r4,0(r21)
    b9c0:	003f5306 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    b9c4:	da802317 	ldw	r10,140(sp)
    b9c8:	dac02317 	ldw	r11,140(sp)
    b9cc:	d8001d85 	stb	zero,118(sp)
    b9d0:	52800017 	ldw	r10,0(r10)
    b9d4:	5dc00104 	addi	r23,r11,4
    b9d8:	da802615 	stw	r10,152(sp)
    b9dc:	5002d626 	beq	r10,zero,c538 <___svfiprintf_internal_r+0xf58>
    b9e0:	d9002617 	ldw	r4,152(sp)
    b9e4:	8002cc16 	blt	r16,zero,c518 <___svfiprintf_internal_r+0xf38>
    b9e8:	000b883a 	mov	r5,zero
    b9ec:	800d883a 	mov	r6,r16
    b9f0:	da002c15 	stw	r8,176(sp)
    b9f4:	000998c0 	call	998c <memchr>
    b9f8:	da002c17 	ldw	r8,176(sp)
    b9fc:	1002f026 	beq	r2,zero,c5c0 <___svfiprintf_internal_r+0xfe0>
    ba00:	d8c02617 	ldw	r3,152(sp)
    ba04:	10f9c83a 	sub	fp,r2,r3
    ba08:	8700010e 	bge	r16,fp,ba10 <___svfiprintf_internal_r+0x430>
    ba0c:	8039883a 	mov	fp,r16
    ba10:	dac01d83 	ldbu	r11,118(sp)
    ba14:	ddc02315 	stw	r23,140(sp)
    ba18:	0021883a 	mov	r16,zero
    ba1c:	003fc606 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    ba20:	8c400814 	ori	r17,r17,32
    ba24:	a9000007 	ldb	r4,0(r21)
    ba28:	003f3906 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    ba2c:	da802317 	ldw	r10,140(sp)
    ba30:	00800c04 	movi	r2,48
    ba34:	dac02317 	ldw	r11,140(sp)
    ba38:	52400017 	ldw	r9,0(r10)
    ba3c:	d8801d05 	stb	r2,116(sp)
    ba40:	00801e04 	movi	r2,120
    ba44:	d8801d45 	stb	r2,117(sp)
    ba48:	008000b4 	movhi	r2,2
    ba4c:	10bc1d04 	addi	r2,r2,-3980
    ba50:	5ac00104 	addi	r11,r11,4
    ba54:	d8802a15 	stw	r2,168(sp)
    ba58:	0015883a 	mov	r10,zero
    ba5c:	8c400094 	ori	r17,r17,2
    ba60:	dac02315 	stw	r11,140(sp)
    ba64:	00800084 	movi	r2,2
    ba68:	4807883a 	mov	r3,r9
    ba6c:	003f9506 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    ba70:	d9801d85 	stb	r6,118(sp)
    ba74:	8880080c 	andi	r2,r17,32
    ba78:	d8c02317 	ldw	r3,140(sp)
    ba7c:	10009b26 	beq	r2,zero,bcec <___svfiprintf_internal_r+0x70c>
    ba80:	dac02317 	ldw	r11,140(sp)
    ba84:	18800117 	ldw	r2,4(r3)
    ba88:	1a400017 	ldw	r9,0(r3)
    ba8c:	5ac00204 	addi	r11,r11,8
    ba90:	dac02315 	stw	r11,140(sp)
    ba94:	1015883a 	mov	r10,r2
    ba98:	10009f16 	blt	r2,zero,bd18 <___svfiprintf_internal_r+0x738>
    ba9c:	dac01d83 	ldbu	r11,118(sp)
    baa0:	8039883a 	mov	fp,r16
    baa4:	00800044 	movi	r2,1
    baa8:	4a86b03a 	or	r3,r9,r10
    baac:	003f8806 	br	b8d0 <__alt_mem_Flash_flash_data+0xf400b8d0>
    bab0:	dac02317 	ldw	r11,140(sp)
    bab4:	00c00044 	movi	r3,1
    bab8:	da801004 	addi	r10,sp,64
    babc:	58800017 	ldw	r2,0(r11)
    bac0:	5ac00104 	addi	r11,r11,4
    bac4:	d8c02015 	stw	r3,128(sp)
    bac8:	d8001d85 	stb	zero,118(sp)
    bacc:	d8801005 	stb	r2,64(sp)
    bad0:	dac02315 	stw	r11,140(sp)
    bad4:	1839883a 	mov	fp,r3
    bad8:	da802615 	stw	r10,152(sp)
    badc:	0021883a 	mov	r16,zero
    bae0:	8a80008c 	andi	r10,r17,2
    bae4:	da802215 	stw	r10,136(sp)
    bae8:	50000326 	beq	r10,zero,baf8 <___svfiprintf_internal_r+0x518>
    baec:	dac02017 	ldw	r11,128(sp)
    baf0:	5ac00084 	addi	r11,r11,2
    baf4:	dac02015 	stw	r11,128(sp)
    baf8:	88c0210c 	andi	r3,r17,132
    bafc:	d8c02515 	stw	r3,148(sp)
    bb00:	1800bd1e 	bne	r3,zero,bdf8 <___svfiprintf_internal_r+0x818>
    bb04:	da802117 	ldw	r10,132(sp)
    bb08:	dac02017 	ldw	r11,128(sp)
    bb0c:	52edc83a 	sub	r22,r10,r11
    bb10:	0580b90e 	bge	zero,r22,bdf8 <___svfiprintf_internal_r+0x818>
    bb14:	02400404 	movi	r9,16
    bb18:	d8c01c17 	ldw	r3,112(sp)
    bb1c:	d8801b17 	ldw	r2,108(sp)
    bb20:	4d829b0e 	bge	r9,r22,c590 <___svfiprintf_internal_r+0xfb0>
    bb24:	014000b4 	movhi	r5,2
    bb28:	297c8a04 	addi	r5,r5,-3544
    bb2c:	d9402815 	stw	r5,160(sp)
    bb30:	05c001c4 	movi	r23,7
    bb34:	00000306 	br	bb44 <___svfiprintf_internal_r+0x564>
    bb38:	b5bffc04 	addi	r22,r22,-16
    bb3c:	42000204 	addi	r8,r8,8
    bb40:	4d80150e 	bge	r9,r22,bb98 <___svfiprintf_internal_r+0x5b8>
    bb44:	028000b4 	movhi	r10,2
    bb48:	18c00404 	addi	r3,r3,16
    bb4c:	10800044 	addi	r2,r2,1
    bb50:	52bc8a04 	addi	r10,r10,-3544
    bb54:	42800015 	stw	r10,0(r8)
    bb58:	42400115 	stw	r9,4(r8)
    bb5c:	d8c01c15 	stw	r3,112(sp)
    bb60:	d8801b15 	stw	r2,108(sp)
    bb64:	b8bff40e 	bge	r23,r2,bb38 <__alt_mem_Flash_flash_data+0xf400bb38>
    bb68:	9009883a 	mov	r4,r18
    bb6c:	a00b883a 	mov	r5,r20
    bb70:	d9801a04 	addi	r6,sp,104
    bb74:	da402c15 	stw	r9,176(sp)
    bb78:	000b4140 	call	b414 <__ssprint_r>
    bb7c:	da402c17 	ldw	r9,176(sp)
    bb80:	1001531e 	bne	r2,zero,c0d0 <___svfiprintf_internal_r+0xaf0>
    bb84:	b5bffc04 	addi	r22,r22,-16
    bb88:	d8c01c17 	ldw	r3,112(sp)
    bb8c:	d8801b17 	ldw	r2,108(sp)
    bb90:	d811883a 	mov	r8,sp
    bb94:	4dbfeb16 	blt	r9,r22,bb44 <__alt_mem_Flash_flash_data+0xf400bb44>
    bb98:	dac02817 	ldw	r11,160(sp)
    bb9c:	b0c7883a 	add	r3,r22,r3
    bba0:	10800044 	addi	r2,r2,1
    bba4:	42c00015 	stw	r11,0(r8)
    bba8:	45800115 	stw	r22,4(r8)
    bbac:	d8c01c15 	stw	r3,112(sp)
    bbb0:	d8801b15 	stw	r2,108(sp)
    bbb4:	010001c4 	movi	r4,7
    bbb8:	2081dd16 	blt	r4,r2,c330 <___svfiprintf_internal_r+0xd50>
    bbbc:	42000204 	addi	r8,r8,8
    bbc0:	00008f06 	br	be00 <___svfiprintf_internal_r+0x820>
    bbc4:	008000b4 	movhi	r2,2
    bbc8:	10bc1804 	addi	r2,r2,-4000
    bbcc:	d8802a15 	stw	r2,168(sp)
    bbd0:	d9801d85 	stb	r6,118(sp)
    bbd4:	8880080c 	andi	r2,r17,32
    bbd8:	10003226 	beq	r2,zero,bca4 <___svfiprintf_internal_r+0x6c4>
    bbdc:	da802317 	ldw	r10,140(sp)
    bbe0:	dac02317 	ldw	r11,140(sp)
    bbe4:	52400017 	ldw	r9,0(r10)
    bbe8:	52800117 	ldw	r10,4(r10)
    bbec:	5ac00204 	addi	r11,r11,8
    bbf0:	dac02315 	stw	r11,140(sp)
    bbf4:	8880004c 	andi	r2,r17,1
    bbf8:	10003426 	beq	r2,zero,bccc <___svfiprintf_internal_r+0x6ec>
    bbfc:	4a86b03a 	or	r3,r9,r10
    bc00:	1802231e 	bne	r3,zero,c490 <___svfiprintf_internal_r+0xeb0>
    bc04:	00800084 	movi	r2,2
    bc08:	003f2e06 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    bc0c:	a9000007 	ldb	r4,0(r21)
    bc10:	a805883a 	mov	r2,r21
    bc14:	21c22426 	beq	r4,r7,c4a8 <___svfiprintf_internal_r+0xec8>
    bc18:	8c400414 	ori	r17,r17,16
    bc1c:	003ebc06 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bc20:	8c401014 	ori	r17,r17,64
    bc24:	a9000007 	ldb	r4,0(r21)
    bc28:	003eb906 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bc2c:	d9801d85 	stb	r6,118(sp)
    bc30:	8880080c 	andi	r2,r17,32
    bc34:	10020d1e 	bne	r2,zero,c46c <___svfiprintf_internal_r+0xe8c>
    bc38:	8880040c 	andi	r2,r17,16
    bc3c:	10021e1e 	bne	r2,zero,c4b8 <___svfiprintf_internal_r+0xed8>
    bc40:	8c40100c 	andi	r17,r17,64
    bc44:	88021c26 	beq	r17,zero,c4b8 <___svfiprintf_internal_r+0xed8>
    bc48:	dac02317 	ldw	r11,140(sp)
    bc4c:	da802417 	ldw	r10,144(sp)
    bc50:	58800017 	ldw	r2,0(r11)
    bc54:	5ac00104 	addi	r11,r11,4
    bc58:	dac02315 	stw	r11,140(sp)
    bc5c:	1280000d 	sth	r10,0(r2)
    bc60:	003e8306 	br	b670 <__alt_mem_Flash_flash_data+0xf400b670>
    bc64:	8c400054 	ori	r17,r17,1
    bc68:	a9000007 	ldb	r4,0(r21)
    bc6c:	003ea806 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bc70:	30803fcc 	andi	r2,r6,255
    bc74:	1080201c 	xori	r2,r2,128
    bc78:	10bfe004 	addi	r2,r2,-128
    bc7c:	1001f91e 	bne	r2,zero,c464 <___svfiprintf_internal_r+0xe84>
    bc80:	01800804 	movi	r6,32
    bc84:	a9000007 	ldb	r4,0(r21)
    bc88:	003ea106 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bc8c:	008000b4 	movhi	r2,2
    bc90:	10bc1d04 	addi	r2,r2,-3980
    bc94:	d8802a15 	stw	r2,168(sp)
    bc98:	d9801d85 	stb	r6,118(sp)
    bc9c:	8880080c 	andi	r2,r17,32
    bca0:	103fce1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bca4:	8880040c 	andi	r2,r17,16
    bca8:	1001e526 	beq	r2,zero,c440 <___svfiprintf_internal_r+0xe60>
    bcac:	da802317 	ldw	r10,140(sp)
    bcb0:	dac02317 	ldw	r11,140(sp)
    bcb4:	52400017 	ldw	r9,0(r10)
    bcb8:	8880004c 	andi	r2,r17,1
    bcbc:	5ac00104 	addi	r11,r11,4
    bcc0:	dac02315 	stw	r11,140(sp)
    bcc4:	0015883a 	mov	r10,zero
    bcc8:	103fcc1e 	bne	r2,zero,bbfc <__alt_mem_Flash_flash_data+0xf400bbfc>
    bccc:	00800084 	movi	r2,2
    bcd0:	4a86b03a 	or	r3,r9,r10
    bcd4:	003efb06 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    bcd8:	8c400414 	ori	r17,r17,16
    bcdc:	d9801d85 	stb	r6,118(sp)
    bce0:	8880080c 	andi	r2,r17,32
    bce4:	d8c02317 	ldw	r3,140(sp)
    bce8:	103f651e 	bne	r2,zero,ba80 <__alt_mem_Flash_flash_data+0xf400ba80>
    bcec:	8880040c 	andi	r2,r17,16
    bcf0:	1001c61e 	bne	r2,zero,c40c <___svfiprintf_internal_r+0xe2c>
    bcf4:	8880100c 	andi	r2,r17,64
    bcf8:	1001c426 	beq	r2,zero,c40c <___svfiprintf_internal_r+0xe2c>
    bcfc:	1a40000f 	ldh	r9,0(r3)
    bd00:	dac02317 	ldw	r11,140(sp)
    bd04:	4815d7fa 	srai	r10,r9,31
    bd08:	5ac00104 	addi	r11,r11,4
    bd0c:	dac02315 	stw	r11,140(sp)
    bd10:	5005883a 	mov	r2,r10
    bd14:	103f610e 	bge	r2,zero,ba9c <__alt_mem_Flash_flash_data+0xf400ba9c>
    bd18:	0253c83a 	sub	r9,zero,r9
    bd1c:	4804c03a 	cmpne	r2,r9,zero
    bd20:	0295c83a 	sub	r10,zero,r10
    bd24:	5095c83a 	sub	r10,r10,r2
    bd28:	02c00b44 	movi	r11,45
    bd2c:	dac01d85 	stb	r11,118(sp)
    bd30:	8039883a 	mov	fp,r16
    bd34:	00800044 	movi	r2,1
    bd38:	4a86b03a 	or	r3,r9,r10
    bd3c:	003ee406 	br	b8d0 <__alt_mem_Flash_flash_data+0xf400b8d0>
    bd40:	a815883a 	mov	r10,r21
    bd44:	d8002115 	stw	zero,132(sp)
    bd48:	20bff404 	addi	r2,r4,-48
    bd4c:	51000007 	ldb	r4,0(r10)
    bd50:	da802117 	ldw	r10,132(sp)
    bd54:	ad400044 	addi	r21,r21,1
    bd58:	52c002a4 	muli	r11,r10,10
    bd5c:	a815883a 	mov	r10,r21
    bd60:	5885883a 	add	r2,r11,r2
    bd64:	d8802115 	stw	r2,132(sp)
    bd68:	20bff404 	addi	r2,r4,-48
    bd6c:	28bff72e 	bgeu	r5,r2,bd4c <__alt_mem_Flash_flash_data+0xf400bd4c>
    bd70:	20bff804 	addi	r2,r4,-32
    bd74:	18be692e 	bgeu	r3,r2,b71c <__alt_mem_Flash_flash_data+0xf400b71c>
    bd78:	d9801d85 	stb	r6,118(sp)
    bd7c:	2000ce26 	beq	r4,zero,c0b8 <___svfiprintf_internal_r+0xad8>
    bd80:	02800044 	movi	r10,1
    bd84:	dac01004 	addi	r11,sp,64
    bd88:	da802015 	stw	r10,128(sp)
    bd8c:	d9001005 	stb	r4,64(sp)
    bd90:	d8001d85 	stb	zero,118(sp)
    bd94:	5039883a 	mov	fp,r10
    bd98:	dac02615 	stw	r11,152(sp)
    bd9c:	003f4f06 	br	badc <__alt_mem_Flash_flash_data+0xf400badc>
    bda0:	8c402014 	ori	r17,r17,128
    bda4:	a9000007 	ldb	r4,0(r21)
    bda8:	003e5906 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bdac:	01800ac4 	movi	r6,43
    bdb0:	a9000007 	ldb	r4,0(r21)
    bdb4:	003e5606 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    bdb8:	a9000007 	ldb	r4,0(r21)
    bdbc:	aa800044 	addi	r10,r21,1
    bdc0:	22420626 	beq	r4,r9,c5dc <___svfiprintf_internal_r+0xffc>
    bdc4:	20bff404 	addi	r2,r4,-48
    bdc8:	502b883a 	mov	r21,r10
    bdcc:	0021883a 	mov	r16,zero
    bdd0:	28be5036 	bltu	r5,r2,b714 <__alt_mem_Flash_flash_data+0xf400b714>
    bdd4:	a9000007 	ldb	r4,0(r21)
    bdd8:	840002a4 	muli	r16,r16,10
    bddc:	ad400044 	addi	r21,r21,1
    bde0:	1421883a 	add	r16,r2,r16
    bde4:	20bff404 	addi	r2,r4,-48
    bde8:	28bffa2e 	bgeu	r5,r2,bdd4 <__alt_mem_Flash_flash_data+0xf400bdd4>
    bdec:	803e490e 	bge	r16,zero,b714 <__alt_mem_Flash_flash_data+0xf400b714>
    bdf0:	043fffc4 	movi	r16,-1
    bdf4:	003e4706 	br	b714 <__alt_mem_Flash_flash_data+0xf400b714>
    bdf8:	d8c01c17 	ldw	r3,112(sp)
    bdfc:	d8801b17 	ldw	r2,108(sp)
    be00:	d9001d87 	ldb	r4,118(sp)
    be04:	20000b26 	beq	r4,zero,be34 <___svfiprintf_internal_r+0x854>
    be08:	d9001d84 	addi	r4,sp,118
    be0c:	18c00044 	addi	r3,r3,1
    be10:	10800044 	addi	r2,r2,1
    be14:	41000015 	stw	r4,0(r8)
    be18:	01000044 	movi	r4,1
    be1c:	41000115 	stw	r4,4(r8)
    be20:	d8c01c15 	stw	r3,112(sp)
    be24:	d8801b15 	stw	r2,108(sp)
    be28:	010001c4 	movi	r4,7
    be2c:	20811e16 	blt	r4,r2,c2a8 <___svfiprintf_internal_r+0xcc8>
    be30:	42000204 	addi	r8,r8,8
    be34:	da802217 	ldw	r10,136(sp)
    be38:	50000b26 	beq	r10,zero,be68 <___svfiprintf_internal_r+0x888>
    be3c:	d9001d04 	addi	r4,sp,116
    be40:	18c00084 	addi	r3,r3,2
    be44:	10800044 	addi	r2,r2,1
    be48:	41000015 	stw	r4,0(r8)
    be4c:	01000084 	movi	r4,2
    be50:	41000115 	stw	r4,4(r8)
    be54:	d8c01c15 	stw	r3,112(sp)
    be58:	d8801b15 	stw	r2,108(sp)
    be5c:	010001c4 	movi	r4,7
    be60:	20811a16 	blt	r4,r2,c2cc <___svfiprintf_internal_r+0xcec>
    be64:	42000204 	addi	r8,r8,8
    be68:	dac02517 	ldw	r11,148(sp)
    be6c:	01002004 	movi	r4,128
    be70:	5900a826 	beq	r11,r4,c114 <___svfiprintf_internal_r+0xb34>
    be74:	8721c83a 	sub	r16,r16,fp
    be78:	0400260e 	bge	zero,r16,bf14 <___svfiprintf_internal_r+0x934>
    be7c:	01c00404 	movi	r7,16
    be80:	3c019d0e 	bge	r7,r16,c4f8 <___svfiprintf_internal_r+0xf18>
    be84:	010000b4 	movhi	r4,2
    be88:	213c8604 	addi	r4,r4,-3560
    be8c:	d9002215 	stw	r4,136(sp)
    be90:	382f883a 	mov	r23,r7
    be94:	058001c4 	movi	r22,7
    be98:	00000306 	br	bea8 <___svfiprintf_internal_r+0x8c8>
    be9c:	843ffc04 	addi	r16,r16,-16
    bea0:	42000204 	addi	r8,r8,8
    bea4:	bc00110e 	bge	r23,r16,beec <___svfiprintf_internal_r+0x90c>
    bea8:	18c00404 	addi	r3,r3,16
    beac:	10800044 	addi	r2,r2,1
    beb0:	44c00015 	stw	r19,0(r8)
    beb4:	45c00115 	stw	r23,4(r8)
    beb8:	d8c01c15 	stw	r3,112(sp)
    bebc:	d8801b15 	stw	r2,108(sp)
    bec0:	b0bff60e 	bge	r22,r2,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    bec4:	9009883a 	mov	r4,r18
    bec8:	a00b883a 	mov	r5,r20
    becc:	d9801a04 	addi	r6,sp,104
    bed0:	000b4140 	call	b414 <__ssprint_r>
    bed4:	10007e1e 	bne	r2,zero,c0d0 <___svfiprintf_internal_r+0xaf0>
    bed8:	843ffc04 	addi	r16,r16,-16
    bedc:	d8c01c17 	ldw	r3,112(sp)
    bee0:	d8801b17 	ldw	r2,108(sp)
    bee4:	d811883a 	mov	r8,sp
    bee8:	bc3fef16 	blt	r23,r16,bea8 <__alt_mem_Flash_flash_data+0xf400bea8>
    beec:	da802217 	ldw	r10,136(sp)
    bef0:	1c07883a 	add	r3,r3,r16
    bef4:	10800044 	addi	r2,r2,1
    bef8:	42800015 	stw	r10,0(r8)
    befc:	44000115 	stw	r16,4(r8)
    bf00:	d8c01c15 	stw	r3,112(sp)
    bf04:	d8801b15 	stw	r2,108(sp)
    bf08:	010001c4 	movi	r4,7
    bf0c:	2080ce16 	blt	r4,r2,c248 <___svfiprintf_internal_r+0xc68>
    bf10:	42000204 	addi	r8,r8,8
    bf14:	dac02617 	ldw	r11,152(sp)
    bf18:	1f07883a 	add	r3,r3,fp
    bf1c:	10800044 	addi	r2,r2,1
    bf20:	42c00015 	stw	r11,0(r8)
    bf24:	47000115 	stw	fp,4(r8)
    bf28:	d8c01c15 	stw	r3,112(sp)
    bf2c:	d8801b15 	stw	r2,108(sp)
    bf30:	010001c4 	movi	r4,7
    bf34:	2080a316 	blt	r4,r2,c1c4 <___svfiprintf_internal_r+0xbe4>
    bf38:	42000204 	addi	r8,r8,8
    bf3c:	8c40010c 	andi	r17,r17,4
    bf40:	88002b26 	beq	r17,zero,bff0 <___svfiprintf_internal_r+0xa10>
    bf44:	da802117 	ldw	r10,132(sp)
    bf48:	dac02017 	ldw	r11,128(sp)
    bf4c:	52e1c83a 	sub	r16,r10,r11
    bf50:	0400270e 	bge	zero,r16,bff0 <___svfiprintf_internal_r+0xa10>
    bf54:	04400404 	movi	r17,16
    bf58:	d8801b17 	ldw	r2,108(sp)
    bf5c:	8c01900e 	bge	r17,r16,c5a0 <___svfiprintf_internal_r+0xfc0>
    bf60:	014000b4 	movhi	r5,2
    bf64:	297c8a04 	addi	r5,r5,-3544
    bf68:	d9402815 	stw	r5,160(sp)
    bf6c:	070001c4 	movi	fp,7
    bf70:	00000306 	br	bf80 <___svfiprintf_internal_r+0x9a0>
    bf74:	843ffc04 	addi	r16,r16,-16
    bf78:	42000204 	addi	r8,r8,8
    bf7c:	8c00130e 	bge	r17,r16,bfcc <___svfiprintf_internal_r+0x9ec>
    bf80:	028000b4 	movhi	r10,2
    bf84:	18c00404 	addi	r3,r3,16
    bf88:	10800044 	addi	r2,r2,1
    bf8c:	52bc8a04 	addi	r10,r10,-3544
    bf90:	42800015 	stw	r10,0(r8)
    bf94:	44400115 	stw	r17,4(r8)
    bf98:	d8c01c15 	stw	r3,112(sp)
    bf9c:	d8801b15 	stw	r2,108(sp)
    bfa0:	e0bff40e 	bge	fp,r2,bf74 <__alt_mem_Flash_flash_data+0xf400bf74>
    bfa4:	9009883a 	mov	r4,r18
    bfa8:	a00b883a 	mov	r5,r20
    bfac:	d9801a04 	addi	r6,sp,104
    bfb0:	000b4140 	call	b414 <__ssprint_r>
    bfb4:	1000461e 	bne	r2,zero,c0d0 <___svfiprintf_internal_r+0xaf0>
    bfb8:	843ffc04 	addi	r16,r16,-16
    bfbc:	d8c01c17 	ldw	r3,112(sp)
    bfc0:	d8801b17 	ldw	r2,108(sp)
    bfc4:	d811883a 	mov	r8,sp
    bfc8:	8c3fed16 	blt	r17,r16,bf80 <__alt_mem_Flash_flash_data+0xf400bf80>
    bfcc:	dac02817 	ldw	r11,160(sp)
    bfd0:	1c07883a 	add	r3,r3,r16
    bfd4:	10800044 	addi	r2,r2,1
    bfd8:	42c00015 	stw	r11,0(r8)
    bfdc:	44000115 	stw	r16,4(r8)
    bfe0:	d8c01c15 	stw	r3,112(sp)
    bfe4:	d8801b15 	stw	r2,108(sp)
    bfe8:	010001c4 	movi	r4,7
    bfec:	2080fd16 	blt	r4,r2,c3e4 <___svfiprintf_internal_r+0xe04>
    bff0:	dd802017 	ldw	r22,128(sp)
    bff4:	da802117 	ldw	r10,132(sp)
    bff8:	b280010e 	bge	r22,r10,c000 <___svfiprintf_internal_r+0xa20>
    bffc:	502d883a 	mov	r22,r10
    c000:	dac02417 	ldw	r11,144(sp)
    c004:	5d97883a 	add	r11,r11,r22
    c008:	dac02415 	stw	r11,144(sp)
    c00c:	1800751e 	bne	r3,zero,c1e4 <___svfiprintf_internal_r+0xc04>
    c010:	a8800007 	ldb	r2,0(r21)
    c014:	d8001b15 	stw	zero,108(sp)
    c018:	d811883a 	mov	r8,sp
    c01c:	103d961e 	bne	r2,zero,b678 <__alt_mem_Flash_flash_data+0xf400b678>
    c020:	a82d883a 	mov	r22,r21
    c024:	003dad06 	br	b6dc <__alt_mem_Flash_flash_data+0xf400b6dc>
    c028:	10803fcc 	andi	r2,r2,255
    c02c:	00c00044 	movi	r3,1
    c030:	10fe2f1e 	bne	r2,r3,b8f0 <__alt_mem_Flash_flash_data+0xf400b8f0>
    c034:	5000e026 	beq	r10,zero,c3b8 <___svfiprintf_internal_r+0xdd8>
    c038:	dc002015 	stw	r16,128(sp)
    c03c:	dc402215 	stw	r17,136(sp)
    c040:	dd801a04 	addi	r22,sp,104
    c044:	402f883a 	mov	r23,r8
    c048:	5839883a 	mov	fp,r11
    c04c:	4821883a 	mov	r16,r9
    c050:	5023883a 	mov	r17,r10
    c054:	8009883a 	mov	r4,r16
    c058:	880b883a 	mov	r5,r17
    c05c:	01800284 	movi	r6,10
    c060:	000f883a 	mov	r7,zero
    c064:	000e9940 	call	e994 <__umoddi3>
    c068:	10800c04 	addi	r2,r2,48
    c06c:	b5bfffc4 	addi	r22,r22,-1
    c070:	8009883a 	mov	r4,r16
    c074:	880b883a 	mov	r5,r17
    c078:	01800284 	movi	r6,10
    c07c:	000f883a 	mov	r7,zero
    c080:	b0800005 	stb	r2,0(r22)
    c084:	000e3d40 	call	e3d4 <__udivdi3>
    c088:	1021883a 	mov	r16,r2
    c08c:	10c4b03a 	or	r2,r2,r3
    c090:	1823883a 	mov	r17,r3
    c094:	103fef1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c098:	da801e17 	ldw	r10,120(sp)
    c09c:	e017883a 	mov	r11,fp
    c0a0:	dc002017 	ldw	r16,128(sp)
    c0a4:	dc402217 	ldw	r17,136(sp)
    c0a8:	b811883a 	mov	r8,r23
    c0ac:	dd802615 	stw	r22,152(sp)
    c0b0:	55b9c83a 	sub	fp,r10,r22
    c0b4:	003e2006 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c0b8:	d8801c17 	ldw	r2,112(sp)
    c0bc:	10000426 	beq	r2,zero,c0d0 <___svfiprintf_internal_r+0xaf0>
    c0c0:	d9002917 	ldw	r4,164(sp)
    c0c4:	d9402717 	ldw	r5,156(sp)
    c0c8:	d9801a04 	addi	r6,sp,104
    c0cc:	000b4140 	call	b414 <__ssprint_r>
    c0d0:	da802717 	ldw	r10,156(sp)
    c0d4:	5080030b 	ldhu	r2,12(r10)
    c0d8:	1080100c 	andi	r2,r2,64
    c0dc:	1000511e 	bne	r2,zero,c224 <___svfiprintf_internal_r+0xc44>
    c0e0:	d8802417 	ldw	r2,144(sp)
    c0e4:	dfc03617 	ldw	ra,216(sp)
    c0e8:	df003517 	ldw	fp,212(sp)
    c0ec:	ddc03417 	ldw	r23,208(sp)
    c0f0:	dd803317 	ldw	r22,204(sp)
    c0f4:	dd403217 	ldw	r21,200(sp)
    c0f8:	dd003117 	ldw	r20,196(sp)
    c0fc:	dcc03017 	ldw	r19,192(sp)
    c100:	dc802f17 	ldw	r18,188(sp)
    c104:	dc402e17 	ldw	r17,184(sp)
    c108:	dc002d17 	ldw	r16,180(sp)
    c10c:	dec03704 	addi	sp,sp,220
    c110:	f800283a 	ret
    c114:	da802117 	ldw	r10,132(sp)
    c118:	dac02017 	ldw	r11,128(sp)
    c11c:	52edc83a 	sub	r22,r10,r11
    c120:	05bf540e 	bge	zero,r22,be74 <__alt_mem_Flash_flash_data+0xf400be74>
    c124:	02400404 	movi	r9,16
    c128:	4d81210e 	bge	r9,r22,c5b0 <___svfiprintf_internal_r+0xfd0>
    c12c:	014000b4 	movhi	r5,2
    c130:	297c8604 	addi	r5,r5,-3560
    c134:	d9402215 	stw	r5,136(sp)
    c138:	05c001c4 	movi	r23,7
    c13c:	00000306 	br	c14c <___svfiprintf_internal_r+0xb6c>
    c140:	b5bffc04 	addi	r22,r22,-16
    c144:	42000204 	addi	r8,r8,8
    c148:	4d80130e 	bge	r9,r22,c198 <___svfiprintf_internal_r+0xbb8>
    c14c:	18c00404 	addi	r3,r3,16
    c150:	10800044 	addi	r2,r2,1
    c154:	44c00015 	stw	r19,0(r8)
    c158:	42400115 	stw	r9,4(r8)
    c15c:	d8c01c15 	stw	r3,112(sp)
    c160:	d8801b15 	stw	r2,108(sp)
    c164:	b8bff60e 	bge	r23,r2,c140 <__alt_mem_Flash_flash_data+0xf400c140>
    c168:	9009883a 	mov	r4,r18
    c16c:	a00b883a 	mov	r5,r20
    c170:	d9801a04 	addi	r6,sp,104
    c174:	da402c15 	stw	r9,176(sp)
    c178:	000b4140 	call	b414 <__ssprint_r>
    c17c:	da402c17 	ldw	r9,176(sp)
    c180:	103fd31e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c184:	b5bffc04 	addi	r22,r22,-16
    c188:	d8c01c17 	ldw	r3,112(sp)
    c18c:	d8801b17 	ldw	r2,108(sp)
    c190:	d811883a 	mov	r8,sp
    c194:	4dbfed16 	blt	r9,r22,c14c <__alt_mem_Flash_flash_data+0xf400c14c>
    c198:	da802217 	ldw	r10,136(sp)
    c19c:	1d87883a 	add	r3,r3,r22
    c1a0:	10800044 	addi	r2,r2,1
    c1a4:	42800015 	stw	r10,0(r8)
    c1a8:	45800115 	stw	r22,4(r8)
    c1ac:	d8c01c15 	stw	r3,112(sp)
    c1b0:	d8801b15 	stw	r2,108(sp)
    c1b4:	010001c4 	movi	r4,7
    c1b8:	2080c616 	blt	r4,r2,c4d4 <___svfiprintf_internal_r+0xef4>
    c1bc:	42000204 	addi	r8,r8,8
    c1c0:	003f2c06 	br	be74 <__alt_mem_Flash_flash_data+0xf400be74>
    c1c4:	9009883a 	mov	r4,r18
    c1c8:	a00b883a 	mov	r5,r20
    c1cc:	d9801a04 	addi	r6,sp,104
    c1d0:	000b4140 	call	b414 <__ssprint_r>
    c1d4:	103fbe1e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c1d8:	d8c01c17 	ldw	r3,112(sp)
    c1dc:	d811883a 	mov	r8,sp
    c1e0:	003f5606 	br	bf3c <__alt_mem_Flash_flash_data+0xf400bf3c>
    c1e4:	9009883a 	mov	r4,r18
    c1e8:	a00b883a 	mov	r5,r20
    c1ec:	d9801a04 	addi	r6,sp,104
    c1f0:	000b4140 	call	b414 <__ssprint_r>
    c1f4:	103f8626 	beq	r2,zero,c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c1f8:	003fb506 	br	c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c1fc:	10803fcc 	andi	r2,r2,255
    c200:	10003b1e 	bne	r2,zero,c2f0 <___svfiprintf_internal_r+0xd10>
    c204:	8880004c 	andi	r2,r17,1
    c208:	10007d26 	beq	r2,zero,c400 <___svfiprintf_internal_r+0xe20>
    c20c:	00800c04 	movi	r2,48
    c210:	d8c019c4 	addi	r3,sp,103
    c214:	d88019c5 	stb	r2,103(sp)
    c218:	df002b17 	ldw	fp,172(sp)
    c21c:	d8c02615 	stw	r3,152(sp)
    c220:	003dc506 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c224:	00bfffc4 	movi	r2,-1
    c228:	003fae06 	br	c0e4 <__alt_mem_Flash_flash_data+0xf400c0e4>
    c22c:	9009883a 	mov	r4,r18
    c230:	a00b883a 	mov	r5,r20
    c234:	d9801a04 	addi	r6,sp,104
    c238:	000b4140 	call	b414 <__ssprint_r>
    c23c:	103fa41e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c240:	d811883a 	mov	r8,sp
    c244:	003d2206 	br	b6d0 <__alt_mem_Flash_flash_data+0xf400b6d0>
    c248:	9009883a 	mov	r4,r18
    c24c:	a00b883a 	mov	r5,r20
    c250:	d9801a04 	addi	r6,sp,104
    c254:	000b4140 	call	b414 <__ssprint_r>
    c258:	103f9d1e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c25c:	d8c01c17 	ldw	r3,112(sp)
    c260:	d8801b17 	ldw	r2,108(sp)
    c264:	d811883a 	mov	r8,sp
    c268:	003f2a06 	br	bf14 <__alt_mem_Flash_flash_data+0xf400bf14>
    c26c:	d9402a17 	ldw	r5,168(sp)
    c270:	d8c01a04 	addi	r3,sp,104
    c274:	488003cc 	andi	r2,r9,15
    c278:	5008973a 	slli	r4,r10,28
    c27c:	2885883a 	add	r2,r5,r2
    c280:	4812d13a 	srli	r9,r9,4
    c284:	10800003 	ldbu	r2,0(r2)
    c288:	5014d13a 	srli	r10,r10,4
    c28c:	18ffffc4 	addi	r3,r3,-1
    c290:	2252b03a 	or	r9,r4,r9
    c294:	18800005 	stb	r2,0(r3)
    c298:	4a84b03a 	or	r2,r9,r10
    c29c:	103ff51e 	bne	r2,zero,c274 <__alt_mem_Flash_flash_data+0xf400c274>
    c2a0:	d8c02615 	stw	r3,152(sp)
    c2a4:	003da206 	br	b930 <__alt_mem_Flash_flash_data+0xf400b930>
    c2a8:	9009883a 	mov	r4,r18
    c2ac:	a00b883a 	mov	r5,r20
    c2b0:	d9801a04 	addi	r6,sp,104
    c2b4:	000b4140 	call	b414 <__ssprint_r>
    c2b8:	103f851e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c2bc:	d8c01c17 	ldw	r3,112(sp)
    c2c0:	d8801b17 	ldw	r2,108(sp)
    c2c4:	d811883a 	mov	r8,sp
    c2c8:	003eda06 	br	be34 <__alt_mem_Flash_flash_data+0xf400be34>
    c2cc:	9009883a 	mov	r4,r18
    c2d0:	a00b883a 	mov	r5,r20
    c2d4:	d9801a04 	addi	r6,sp,104
    c2d8:	000b4140 	call	b414 <__ssprint_r>
    c2dc:	103f7c1e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c2e0:	d8c01c17 	ldw	r3,112(sp)
    c2e4:	d8801b17 	ldw	r2,108(sp)
    c2e8:	d811883a 	mov	r8,sp
    c2ec:	003ede06 	br	be68 <__alt_mem_Flash_flash_data+0xf400be68>
    c2f0:	da801a04 	addi	r10,sp,104
    c2f4:	da802615 	stw	r10,152(sp)
    c2f8:	003d8f06 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c2fc:	8880040c 	andi	r2,r17,16
    c300:	10004c1e 	bne	r2,zero,c434 <___svfiprintf_internal_r+0xe54>
    c304:	8880100c 	andi	r2,r17,64
    c308:	da802317 	ldw	r10,140(sp)
    c30c:	10004a26 	beq	r2,zero,c438 <___svfiprintf_internal_r+0xe58>
    c310:	5240000b 	ldhu	r9,0(r10)
    c314:	dac02317 	ldw	r11,140(sp)
    c318:	0015883a 	mov	r10,zero
    c31c:	00800044 	movi	r2,1
    c320:	5ac00104 	addi	r11,r11,4
    c324:	dac02315 	stw	r11,140(sp)
    c328:	4807883a 	mov	r3,r9
    c32c:	003d6506 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    c330:	9009883a 	mov	r4,r18
    c334:	a00b883a 	mov	r5,r20
    c338:	d9801a04 	addi	r6,sp,104
    c33c:	000b4140 	call	b414 <__ssprint_r>
    c340:	103f631e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c344:	d8c01c17 	ldw	r3,112(sp)
    c348:	d8801b17 	ldw	r2,108(sp)
    c34c:	d811883a 	mov	r8,sp
    c350:	003eab06 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    c354:	8880040c 	andi	r2,r17,16
    c358:	1000331e 	bne	r2,zero,c428 <___svfiprintf_internal_r+0xe48>
    c35c:	8880100c 	andi	r2,r17,64
    c360:	da802317 	ldw	r10,140(sp)
    c364:	10003126 	beq	r2,zero,c42c <___svfiprintf_internal_r+0xe4c>
    c368:	5240000b 	ldhu	r9,0(r10)
    c36c:	dac02317 	ldw	r11,140(sp)
    c370:	0015883a 	mov	r10,zero
    c374:	0005883a 	mov	r2,zero
    c378:	5ac00104 	addi	r11,r11,4
    c37c:	dac02315 	stw	r11,140(sp)
    c380:	4807883a 	mov	r3,r9
    c384:	003d4f06 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    c388:	10803fcc 	andi	r2,r2,255
    c38c:	1080201c 	xori	r2,r2,128
    c390:	10bfe004 	addi	r2,r2,-128
    c394:	01000c04 	movi	r4,48
    c398:	11005b26 	beq	r2,r4,c508 <___svfiprintf_internal_r+0xf28>
    c39c:	da802617 	ldw	r10,152(sp)
    c3a0:	d8801e17 	ldw	r2,120(sp)
    c3a4:	193fffc5 	stb	r4,-1(r3)
    c3a8:	52bfffc4 	addi	r10,r10,-1
    c3ac:	da802615 	stw	r10,152(sp)
    c3b0:	12b9c83a 	sub	fp,r2,r10
    c3b4:	003d6006 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c3b8:	00800244 	movi	r2,9
    c3bc:	127f1e36 	bltu	r2,r9,c038 <__alt_mem_Flash_flash_data+0xf400c038>
    c3c0:	4a400c04 	addi	r9,r9,48
    c3c4:	d8c019c4 	addi	r3,sp,103
    c3c8:	da4019c5 	stb	r9,103(sp)
    c3cc:	df002b17 	ldw	fp,172(sp)
    c3d0:	d8c02615 	stw	r3,152(sp)
    c3d4:	003d5806 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c3d8:	d8802315 	stw	r2,140(sp)
    c3dc:	a9000007 	ldb	r4,0(r21)
    c3e0:	003ccb06 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    c3e4:	9009883a 	mov	r4,r18
    c3e8:	a00b883a 	mov	r5,r20
    c3ec:	d9801a04 	addi	r6,sp,104
    c3f0:	000b4140 	call	b414 <__ssprint_r>
    c3f4:	103f361e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c3f8:	d8c01c17 	ldw	r3,112(sp)
    c3fc:	003efc06 	br	bff0 <__alt_mem_Flash_flash_data+0xf400bff0>
    c400:	d8c01a04 	addi	r3,sp,104
    c404:	d8c02615 	stw	r3,152(sp)
    c408:	003d4b06 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c40c:	da802317 	ldw	r10,140(sp)
    c410:	1a400017 	ldw	r9,0(r3)
    c414:	52800104 	addi	r10,r10,4
    c418:	da802315 	stw	r10,140(sp)
    c41c:	4815d7fa 	srai	r10,r9,31
    c420:	5005883a 	mov	r2,r10
    c424:	003d9c06 	br	ba98 <__alt_mem_Flash_flash_data+0xf400ba98>
    c428:	da802317 	ldw	r10,140(sp)
    c42c:	52400017 	ldw	r9,0(r10)
    c430:	003fce06 	br	c36c <__alt_mem_Flash_flash_data+0xf400c36c>
    c434:	da802317 	ldw	r10,140(sp)
    c438:	52400017 	ldw	r9,0(r10)
    c43c:	003fb506 	br	c314 <__alt_mem_Flash_flash_data+0xf400c314>
    c440:	8880100c 	andi	r2,r17,64
    c444:	da802317 	ldw	r10,140(sp)
    c448:	103e1926 	beq	r2,zero,bcb0 <__alt_mem_Flash_flash_data+0xf400bcb0>
    c44c:	dac02317 	ldw	r11,140(sp)
    c450:	5240000b 	ldhu	r9,0(r10)
    c454:	0015883a 	mov	r10,zero
    c458:	5ac00104 	addi	r11,r11,4
    c45c:	dac02315 	stw	r11,140(sp)
    c460:	003de406 	br	bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    c464:	a9000007 	ldb	r4,0(r21)
    c468:	003ca906 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    c46c:	dac02317 	ldw	r11,140(sp)
    c470:	da802417 	ldw	r10,144(sp)
    c474:	58800017 	ldw	r2,0(r11)
    c478:	5007d7fa 	srai	r3,r10,31
    c47c:	5ac00104 	addi	r11,r11,4
    c480:	dac02315 	stw	r11,140(sp)
    c484:	12800015 	stw	r10,0(r2)
    c488:	10c00115 	stw	r3,4(r2)
    c48c:	003c7806 	br	b670 <__alt_mem_Flash_flash_data+0xf400b670>
    c490:	00800c04 	movi	r2,48
    c494:	d8801d05 	stb	r2,116(sp)
    c498:	d9001d45 	stb	r4,117(sp)
    c49c:	8c400094 	ori	r17,r17,2
    c4a0:	00800084 	movi	r2,2
    c4a4:	003d0706 	br	b8c4 <__alt_mem_Flash_flash_data+0xf400b8c4>
    c4a8:	ad400044 	addi	r21,r21,1
    c4ac:	8c400814 	ori	r17,r17,32
    c4b0:	11000047 	ldb	r4,1(r2)
    c4b4:	003c9606 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    c4b8:	dac02317 	ldw	r11,140(sp)
    c4bc:	da802417 	ldw	r10,144(sp)
    c4c0:	58800017 	ldw	r2,0(r11)
    c4c4:	5ac00104 	addi	r11,r11,4
    c4c8:	dac02315 	stw	r11,140(sp)
    c4cc:	12800015 	stw	r10,0(r2)
    c4d0:	003c6706 	br	b670 <__alt_mem_Flash_flash_data+0xf400b670>
    c4d4:	9009883a 	mov	r4,r18
    c4d8:	a00b883a 	mov	r5,r20
    c4dc:	d9801a04 	addi	r6,sp,104
    c4e0:	000b4140 	call	b414 <__ssprint_r>
    c4e4:	103efa1e 	bne	r2,zero,c0d0 <__alt_mem_Flash_flash_data+0xf400c0d0>
    c4e8:	d8c01c17 	ldw	r3,112(sp)
    c4ec:	d8801b17 	ldw	r2,108(sp)
    c4f0:	d811883a 	mov	r8,sp
    c4f4:	003e5f06 	br	be74 <__alt_mem_Flash_flash_data+0xf400be74>
    c4f8:	02c000b4 	movhi	r11,2
    c4fc:	5afc8604 	addi	r11,r11,-3560
    c500:	dac02215 	stw	r11,136(sp)
    c504:	003e7906 	br	beec <__alt_mem_Flash_flash_data+0xf400beec>
    c508:	da801e17 	ldw	r10,120(sp)
    c50c:	d8c02617 	ldw	r3,152(sp)
    c510:	50f9c83a 	sub	fp,r10,r3
    c514:	003d0806 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c518:	da002c15 	stw	r8,176(sp)
    c51c:	00023e80 	call	23e8 <strlen>
    c520:	1039883a 	mov	fp,r2
    c524:	dac01d83 	ldbu	r11,118(sp)
    c528:	ddc02315 	stw	r23,140(sp)
    c52c:	0021883a 	mov	r16,zero
    c530:	da002c17 	ldw	r8,176(sp)
    c534:	003d0006 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c538:	00800184 	movi	r2,6
    c53c:	1400012e 	bgeu	r2,r16,c544 <___svfiprintf_internal_r+0xf64>
    c540:	1021883a 	mov	r16,r2
    c544:	8039883a 	mov	fp,r16
    c548:	802d883a 	mov	r22,r16
    c54c:	80002116 	blt	r16,zero,c5d4 <___svfiprintf_internal_r+0xff4>
    c550:	008000b4 	movhi	r2,2
    c554:	10bc2204 	addi	r2,r2,-3960
    c558:	dd802015 	stw	r22,128(sp)
    c55c:	ddc02315 	stw	r23,140(sp)
    c560:	d8802615 	stw	r2,152(sp)
    c564:	003d5d06 	br	badc <__alt_mem_Flash_flash_data+0xf400badc>
    c568:	04001004 	movi	r16,64
    c56c:	800b883a 	mov	r5,r16
    c570:	00091e40 	call	91e4 <_malloc_r>
    c574:	da802717 	ldw	r10,156(sp)
    c578:	50800015 	stw	r2,0(r10)
    c57c:	50800415 	stw	r2,16(r10)
    c580:	10002026 	beq	r2,zero,c604 <___svfiprintf_internal_r+0x1024>
    c584:	da802717 	ldw	r10,156(sp)
    c588:	54000515 	stw	r16,20(r10)
    c58c:	003c2806 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    c590:	010000b4 	movhi	r4,2
    c594:	213c8a04 	addi	r4,r4,-3544
    c598:	d9002815 	stw	r4,160(sp)
    c59c:	003d7e06 	br	bb98 <__alt_mem_Flash_flash_data+0xf400bb98>
    c5a0:	010000b4 	movhi	r4,2
    c5a4:	213c8a04 	addi	r4,r4,-3544
    c5a8:	d9002815 	stw	r4,160(sp)
    c5ac:	003e8706 	br	bfcc <__alt_mem_Flash_flash_data+0xf400bfcc>
    c5b0:	010000b4 	movhi	r4,2
    c5b4:	213c8604 	addi	r4,r4,-3560
    c5b8:	d9002215 	stw	r4,136(sp)
    c5bc:	003ef606 	br	c198 <__alt_mem_Flash_flash_data+0xf400c198>
    c5c0:	8039883a 	mov	fp,r16
    c5c4:	dac01d83 	ldbu	r11,118(sp)
    c5c8:	ddc02315 	stw	r23,140(sp)
    c5cc:	0021883a 	mov	r16,zero
    c5d0:	003cd906 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    c5d4:	002d883a 	mov	r22,zero
    c5d8:	003fdd06 	br	c550 <__alt_mem_Flash_flash_data+0xf400c550>
    c5dc:	dac02317 	ldw	r11,140(sp)
    c5e0:	a805883a 	mov	r2,r21
    c5e4:	502b883a 	mov	r21,r10
    c5e8:	5c000017 	ldw	r16,0(r11)
    c5ec:	59000104 	addi	r4,r11,4
    c5f0:	d9002315 	stw	r4,140(sp)
    c5f4:	803fae0e 	bge	r16,zero,c4b0 <__alt_mem_Flash_flash_data+0xf400c4b0>
    c5f8:	043fffc4 	movi	r16,-1
    c5fc:	11000047 	ldb	r4,1(r2)
    c600:	003c4306 	br	b710 <__alt_mem_Flash_flash_data+0xf400b710>
    c604:	dac02917 	ldw	r11,164(sp)
    c608:	00800304 	movi	r2,12
    c60c:	58800015 	stw	r2,0(r11)
    c610:	00bfffc4 	movi	r2,-1
    c614:	003eb306 	br	c0e4 <__alt_mem_Flash_flash_data+0xf400c0e4>

0000c618 <__sprint_r.part.0>:
    c618:	28801917 	ldw	r2,100(r5)
    c61c:	defff604 	addi	sp,sp,-40
    c620:	dd400515 	stw	r21,20(sp)
    c624:	dcc00315 	stw	r19,12(sp)
    c628:	dfc00915 	stw	ra,36(sp)
    c62c:	df000815 	stw	fp,32(sp)
    c630:	ddc00715 	stw	r23,28(sp)
    c634:	dd800615 	stw	r22,24(sp)
    c638:	dd000415 	stw	r20,16(sp)
    c63c:	dc800215 	stw	r18,8(sp)
    c640:	dc400115 	stw	r17,4(sp)
    c644:	dc000015 	stw	r16,0(sp)
    c648:	1088000c 	andi	r2,r2,8192
    c64c:	2827883a 	mov	r19,r5
    c650:	302b883a 	mov	r21,r6
    c654:	10002d26 	beq	r2,zero,c70c <__sprint_r.part.0+0xf4>
    c658:	30800217 	ldw	r2,8(r6)
    c65c:	35800017 	ldw	r22,0(r6)
    c660:	10002826 	beq	r2,zero,c704 <__sprint_r.part.0+0xec>
    c664:	2029883a 	mov	r20,r4
    c668:	b5c00104 	addi	r23,r22,4
    c66c:	04bfffc4 	movi	r18,-1
    c670:	bc400017 	ldw	r17,0(r23)
    c674:	b4000017 	ldw	r16,0(r22)
    c678:	0039883a 	mov	fp,zero
    c67c:	8822d0ba 	srli	r17,r17,2
    c680:	04400316 	blt	zero,r17,c690 <__sprint_r.part.0+0x78>
    c684:	00001806 	br	c6e8 <__sprint_r.part.0+0xd0>
    c688:	84000104 	addi	r16,r16,4
    c68c:	8f001526 	beq	r17,fp,c6e4 <__sprint_r.part.0+0xcc>
    c690:	81400017 	ldw	r5,0(r16)
    c694:	a009883a 	mov	r4,r20
    c698:	980d883a 	mov	r6,r19
    c69c:	000dd540 	call	dd54 <_fputwc_r>
    c6a0:	e7000044 	addi	fp,fp,1
    c6a4:	14bff81e 	bne	r2,r18,c688 <__alt_mem_Flash_flash_data+0xf400c688>
    c6a8:	9005883a 	mov	r2,r18
    c6ac:	a8000215 	stw	zero,8(r21)
    c6b0:	a8000115 	stw	zero,4(r21)
    c6b4:	dfc00917 	ldw	ra,36(sp)
    c6b8:	df000817 	ldw	fp,32(sp)
    c6bc:	ddc00717 	ldw	r23,28(sp)
    c6c0:	dd800617 	ldw	r22,24(sp)
    c6c4:	dd400517 	ldw	r21,20(sp)
    c6c8:	dd000417 	ldw	r20,16(sp)
    c6cc:	dcc00317 	ldw	r19,12(sp)
    c6d0:	dc800217 	ldw	r18,8(sp)
    c6d4:	dc400117 	ldw	r17,4(sp)
    c6d8:	dc000017 	ldw	r16,0(sp)
    c6dc:	dec00a04 	addi	sp,sp,40
    c6e0:	f800283a 	ret
    c6e4:	a8800217 	ldw	r2,8(r21)
    c6e8:	8c63883a 	add	r17,r17,r17
    c6ec:	8c63883a 	add	r17,r17,r17
    c6f0:	1445c83a 	sub	r2,r2,r17
    c6f4:	a8800215 	stw	r2,8(r21)
    c6f8:	b5800204 	addi	r22,r22,8
    c6fc:	bdc00204 	addi	r23,r23,8
    c700:	103fdb1e 	bne	r2,zero,c670 <__alt_mem_Flash_flash_data+0xf400c670>
    c704:	0005883a 	mov	r2,zero
    c708:	003fe806 	br	c6ac <__alt_mem_Flash_flash_data+0xf400c6ac>
    c70c:	00089040 	call	8904 <__sfvwrite_r>
    c710:	003fe606 	br	c6ac <__alt_mem_Flash_flash_data+0xf400c6ac>

0000c714 <__sprint_r>:
    c714:	30c00217 	ldw	r3,8(r6)
    c718:	18000126 	beq	r3,zero,c720 <__sprint_r+0xc>
    c71c:	000c6181 	jmpi	c618 <__sprint_r.part.0>
    c720:	30000115 	stw	zero,4(r6)
    c724:	0005883a 	mov	r2,zero
    c728:	f800283a 	ret

0000c72c <___vfiprintf_internal_r>:
    c72c:	deffca04 	addi	sp,sp,-216
    c730:	dd803215 	stw	r22,200(sp)
    c734:	dd403115 	stw	r21,196(sp)
    c738:	dfc03515 	stw	ra,212(sp)
    c73c:	df003415 	stw	fp,208(sp)
    c740:	ddc03315 	stw	r23,204(sp)
    c744:	dd003015 	stw	r20,192(sp)
    c748:	dcc02f15 	stw	r19,188(sp)
    c74c:	dc802e15 	stw	r18,184(sp)
    c750:	dc402d15 	stw	r17,180(sp)
    c754:	dc002c15 	stw	r16,176(sp)
    c758:	d9002015 	stw	r4,128(sp)
    c75c:	d9c02215 	stw	r7,136(sp)
    c760:	282b883a 	mov	r21,r5
    c764:	302d883a 	mov	r22,r6
    c768:	20000226 	beq	r4,zero,c774 <___vfiprintf_internal_r+0x48>
    c76c:	20800e17 	ldw	r2,56(r4)
    c770:	1001b126 	beq	r2,zero,ce38 <___vfiprintf_internal_r+0x70c>
    c774:	a880030b 	ldhu	r2,12(r21)
    c778:	10c8000c 	andi	r3,r2,8192
    c77c:	1800061e 	bne	r3,zero,c798 <___vfiprintf_internal_r+0x6c>
    c780:	a9001917 	ldw	r4,100(r21)
    c784:	00f7ffc4 	movi	r3,-8193
    c788:	10880014 	ori	r2,r2,8192
    c78c:	20c6703a 	and	r3,r4,r3
    c790:	a880030d 	sth	r2,12(r21)
    c794:	a8c01915 	stw	r3,100(r21)
    c798:	10c0020c 	andi	r3,r2,8
    c79c:	18018926 	beq	r3,zero,cdc4 <___vfiprintf_internal_r+0x698>
    c7a0:	a8c00417 	ldw	r3,16(r21)
    c7a4:	18018726 	beq	r3,zero,cdc4 <___vfiprintf_internal_r+0x698>
    c7a8:	1080068c 	andi	r2,r2,26
    c7ac:	00c00284 	movi	r3,10
    c7b0:	10c18c26 	beq	r2,r3,cde4 <___vfiprintf_internal_r+0x6b8>
    c7b4:	d8801a04 	addi	r2,sp,104
    c7b8:	d8c019c4 	addi	r3,sp,103
    c7bc:	070000b4 	movhi	fp,2
    c7c0:	05c000b4 	movhi	r23,2
    c7c4:	10c9c83a 	sub	r4,r2,r3
    c7c8:	e73c9204 	addi	fp,fp,-3512
    c7cc:	bdfc8e04 	addi	r23,r23,-3528
    c7d0:	d8801e15 	stw	r2,120(sp)
    c7d4:	d8c01f15 	stw	r3,124(sp)
    c7d8:	dec01a15 	stw	sp,104(sp)
    c7dc:	d8001c15 	stw	zero,112(sp)
    c7e0:	d8001b15 	stw	zero,108(sp)
    c7e4:	d8002615 	stw	zero,152(sp)
    c7e8:	d8002315 	stw	zero,140(sp)
    c7ec:	d9002715 	stw	r4,156(sp)
    c7f0:	d811883a 	mov	r8,sp
    c7f4:	dd402115 	stw	r21,132(sp)
    c7f8:	b021883a 	mov	r16,r22
    c7fc:	80800007 	ldb	r2,0(r16)
    c800:	10037226 	beq	r2,zero,d5cc <___vfiprintf_internal_r+0xea0>
    c804:	01000944 	movi	r4,37
    c808:	11037026 	beq	r2,r4,d5cc <___vfiprintf_internal_r+0xea0>
    c80c:	8005883a 	mov	r2,r16
    c810:	00000106 	br	c818 <___vfiprintf_internal_r+0xec>
    c814:	19000326 	beq	r3,r4,c824 <___vfiprintf_internal_r+0xf8>
    c818:	10800044 	addi	r2,r2,1
    c81c:	10c00007 	ldb	r3,0(r2)
    c820:	183ffc1e 	bne	r3,zero,c814 <__alt_mem_Flash_flash_data+0xf400c814>
    c824:	1425c83a 	sub	r18,r2,r16
    c828:	1023883a 	mov	r17,r2
    c82c:	90001026 	beq	r18,zero,c870 <___vfiprintf_internal_r+0x144>
    c830:	d8c01c17 	ldw	r3,112(sp)
    c834:	d8801b17 	ldw	r2,108(sp)
    c838:	44000015 	stw	r16,0(r8)
    c83c:	90c7883a 	add	r3,r18,r3
    c840:	10800044 	addi	r2,r2,1
    c844:	44800115 	stw	r18,4(r8)
    c848:	d8c01c15 	stw	r3,112(sp)
    c84c:	d8801b15 	stw	r2,108(sp)
    c850:	010001c4 	movi	r4,7
    c854:	2080750e 	bge	r4,r2,ca2c <___vfiprintf_internal_r+0x300>
    c858:	18036f1e 	bne	r3,zero,d618 <___vfiprintf_internal_r+0xeec>
    c85c:	d8802317 	ldw	r2,140(sp)
    c860:	d8001b15 	stw	zero,108(sp)
    c864:	d811883a 	mov	r8,sp
    c868:	1485883a 	add	r2,r2,r18
    c86c:	d8802315 	stw	r2,140(sp)
    c870:	88800007 	ldb	r2,0(r17)
    c874:	10041026 	beq	r2,zero,d8b8 <___vfiprintf_internal_r+0x118c>
    c878:	88c00047 	ldb	r3,1(r17)
    c87c:	88800044 	addi	r2,r17,1
    c880:	d8001d85 	stb	zero,118(sp)
    c884:	000f883a 	mov	r7,zero
    c888:	027fffc4 	movi	r9,-1
    c88c:	0025883a 	mov	r18,zero
    c890:	002b883a 	mov	r21,zero
    c894:	01401604 	movi	r5,88
    c898:	01800244 	movi	r6,9
    c89c:	03400a84 	movi	r13,42
    c8a0:	03001b04 	movi	r12,108
    c8a4:	14000044 	addi	r16,r2,1
    c8a8:	18bff804 	addi	r2,r3,-32
    c8ac:	28825536 	bltu	r5,r2,d204 <___vfiprintf_internal_r+0xad8>
    c8b0:	100490ba 	slli	r2,r2,2
    c8b4:	01000074 	movhi	r4,1
    c8b8:	21323204 	addi	r4,r4,-14136
    c8bc:	1105883a 	add	r2,r2,r4
    c8c0:	10800017 	ldw	r2,0(r2)
    c8c4:	1000683a 	jmp	r2
    c8c8:	0000cfc8 	cmpgei	zero,zero,831
    c8cc:	0000d204 	movi	zero,840
    c8d0:	0000d204 	movi	zero,840
    c8d4:	0000cfe8 	cmpgeui	zero,zero,831
    c8d8:	0000d204 	movi	zero,840
    c8dc:	0000d204 	movi	zero,840
    c8e0:	0000d204 	movi	zero,840
    c8e4:	0000d204 	movi	zero,840
    c8e8:	0000d204 	movi	zero,840
    c8ec:	0000d204 	movi	zero,840
    c8f0:	0000cff8 	rdprs	zero,zero,831
    c8f4:	0000d018 	cmpnei	zero,zero,832
    c8f8:	0000d204 	movi	zero,840
    c8fc:	0000ce40 	call	ce4 <main+0xc8>
    c900:	0000cf2c 	andhi	zero,zero,828
    c904:	0000d204 	movi	zero,840
    c908:	0000ceac 	andhi	zero,zero,826
    c90c:	0000cebc 	xorhi	zero,zero,826
    c910:	0000cebc 	xorhi	zero,zero,826
    c914:	0000cebc 	xorhi	zero,zero,826
    c918:	0000cebc 	xorhi	zero,zero,826
    c91c:	0000cebc 	xorhi	zero,zero,826
    c920:	0000cebc 	xorhi	zero,zero,826
    c924:	0000cebc 	xorhi	zero,zero,826
    c928:	0000cebc 	xorhi	zero,zero,826
    c92c:	0000cebc 	xorhi	zero,zero,826
    c930:	0000d204 	movi	zero,840
    c934:	0000d204 	movi	zero,840
    c938:	0000d204 	movi	zero,840
    c93c:	0000d204 	movi	zero,840
    c940:	0000d204 	movi	zero,840
    c944:	0000d204 	movi	zero,840
    c948:	0000d204 	movi	zero,840
    c94c:	0000d204 	movi	zero,840
    c950:	0000d204 	movi	zero,840
    c954:	0000d204 	movi	zero,840
    c958:	0000cee8 	cmpgeui	zero,zero,827
    c95c:	0000d204 	movi	zero,840
    c960:	0000d204 	movi	zero,840
    c964:	0000d204 	movi	zero,840
    c968:	0000d204 	movi	zero,840
    c96c:	0000d204 	movi	zero,840
    c970:	0000d204 	movi	zero,840
    c974:	0000d204 	movi	zero,840
    c978:	0000d204 	movi	zero,840
    c97c:	0000d204 	movi	zero,840
    c980:	0000d204 	movi	zero,840
    c984:	0000ca74 	movhi	zero,809
    c988:	0000d204 	movi	zero,840
    c98c:	0000d204 	movi	zero,840
    c990:	0000d204 	movi	zero,840
    c994:	0000d204 	movi	zero,840
    c998:	0000d204 	movi	zero,840
    c99c:	0000ca40 	call	ca4 <main+0x88>
    c9a0:	0000d204 	movi	zero,840
    c9a4:	0000d204 	movi	zero,840
    c9a8:	0000d088 	cmpgei	zero,zero,834
    c9ac:	0000d204 	movi	zero,840
    c9b0:	0000d204 	movi	zero,840
    c9b4:	0000d204 	movi	zero,840
    c9b8:	0000d204 	movi	zero,840
    c9bc:	0000d204 	movi	zero,840
    c9c0:	0000d204 	movi	zero,840
    c9c4:	0000d204 	movi	zero,840
    c9c8:	0000d204 	movi	zero,840
    c9cc:	0000d204 	movi	zero,840
    c9d0:	0000d204 	movi	zero,840
    c9d4:	0000d028 	cmpgeui	zero,zero,832
    c9d8:	0000d054 	movui	zero,833
    c9dc:	0000d204 	movi	zero,840
    c9e0:	0000d204 	movi	zero,840
    c9e4:	0000d204 	movi	zero,840
    c9e8:	0000d130 	cmpltui	zero,zero,836
    c9ec:	0000d054 	movui	zero,833
    c9f0:	0000d204 	movi	zero,840
    c9f4:	0000d204 	movi	zero,840
    c9f8:	0000d140 	call	d14 <main+0xf8>
    c9fc:	0000d204 	movi	zero,840
    ca00:	0000cf6c 	andhi	zero,zero,829
    ca04:	0000ca78 	rdprs	zero,zero,809
    ca08:	0000d154 	movui	zero,837
    ca0c:	0000d194 	movui	zero,838
    ca10:	0000d204 	movi	zero,840
    ca14:	0000d0dc 	xori	zero,zero,835
    ca18:	0000d204 	movi	zero,840
    ca1c:	0000ca44 	movi	zero,809
    ca20:	0000d204 	movi	zero,840
    ca24:	0000d204 	movi	zero,840
    ca28:	0000d1a4 	muli	zero,zero,838
    ca2c:	42000204 	addi	r8,r8,8
    ca30:	d8802317 	ldw	r2,140(sp)
    ca34:	1485883a 	add	r2,r2,r18
    ca38:	d8802315 	stw	r2,140(sp)
    ca3c:	003f8c06 	br	c870 <__alt_mem_Flash_flash_data+0xf400c870>
    ca40:	ad400414 	ori	r21,r21,16
    ca44:	a880080c 	andi	r2,r21,32
    ca48:	1001e61e 	bne	r2,zero,d1e4 <___vfiprintf_internal_r+0xab8>
    ca4c:	a880040c 	andi	r2,r21,16
    ca50:	10034726 	beq	r2,zero,d770 <___vfiprintf_internal_r+0x1044>
    ca54:	d8802217 	ldw	r2,136(sp)
    ca58:	001b883a 	mov	r13,zero
    ca5c:	15800017 	ldw	r22,0(r2)
    ca60:	10800104 	addi	r2,r2,4
    ca64:	d8802215 	stw	r2,136(sp)
    ca68:	b009883a 	mov	r4,r22
    ca6c:	00800044 	movi	r2,1
    ca70:	00000c06 	br	caa4 <___vfiprintf_internal_r+0x378>
    ca74:	ad400414 	ori	r21,r21,16
    ca78:	a880080c 	andi	r2,r21,32
    ca7c:	1001491e 	bne	r2,zero,cfa4 <___vfiprintf_internal_r+0x878>
    ca80:	a880040c 	andi	r2,r21,16
    ca84:	10032d26 	beq	r2,zero,d73c <___vfiprintf_internal_r+0x1010>
    ca88:	d9002217 	ldw	r4,136(sp)
    ca8c:	001b883a 	mov	r13,zero
    ca90:	0005883a 	mov	r2,zero
    ca94:	25800017 	ldw	r22,0(r4)
    ca98:	21000104 	addi	r4,r4,4
    ca9c:	d9002215 	stw	r4,136(sp)
    caa0:	b009883a 	mov	r4,r22
    caa4:	d8001d85 	stb	zero,118(sp)
    caa8:	4827883a 	mov	r19,r9
    caac:	001d883a 	mov	r14,zero
    cab0:	48000216 	blt	r9,zero,cabc <___vfiprintf_internal_r+0x390>
    cab4:	00ffdfc4 	movi	r3,-129
    cab8:	a8ea703a 	and	r21,r21,r3
    cabc:	2002071e 	bne	r4,zero,d2dc <___vfiprintf_internal_r+0xbb0>
    cac0:	4802ad26 	beq	r9,zero,d578 <___vfiprintf_internal_r+0xe4c>
    cac4:	10803fcc 	andi	r2,r2,255
    cac8:	00c00044 	movi	r3,1
    cacc:	10c22b26 	beq	r2,r3,d37c <___vfiprintf_internal_r+0xc50>
    cad0:	00c00084 	movi	r3,2
    cad4:	dd001a04 	addi	r20,sp,104
    cad8:	10c0dd1e 	bne	r2,r3,ce50 <___vfiprintf_internal_r+0x724>
    cadc:	d9002617 	ldw	r4,152(sp)
    cae0:	b08003cc 	andi	r2,r22,15
    cae4:	6806973a 	slli	r3,r13,28
    cae8:	2085883a 	add	r2,r4,r2
    caec:	b02cd13a 	srli	r22,r22,4
    caf0:	10800003 	ldbu	r2,0(r2)
    caf4:	681ad13a 	srli	r13,r13,4
    caf8:	a53fffc4 	addi	r20,r20,-1
    cafc:	1dacb03a 	or	r22,r3,r22
    cb00:	a0800005 	stb	r2,0(r20)
    cb04:	b344b03a 	or	r2,r22,r13
    cb08:	103ff51e 	bne	r2,zero,cae0 <__alt_mem_Flash_flash_data+0xf400cae0>
    cb0c:	d9001e17 	ldw	r4,120(sp)
    cb10:	2527c83a 	sub	r19,r4,r20
    cb14:	9823883a 	mov	r17,r19
    cb18:	9a40010e 	bge	r19,r9,cb20 <___vfiprintf_internal_r+0x3f4>
    cb1c:	4823883a 	mov	r17,r9
    cb20:	73803fcc 	andi	r14,r14,255
    cb24:	7380201c 	xori	r14,r14,128
    cb28:	73bfe004 	addi	r14,r14,-128
    cb2c:	70000126 	beq	r14,zero,cb34 <___vfiprintf_internal_r+0x408>
    cb30:	8c400044 	addi	r17,r17,1
    cb34:	ab40008c 	andi	r13,r21,2
    cb38:	68000126 	beq	r13,zero,cb40 <___vfiprintf_internal_r+0x414>
    cb3c:	8c400084 	addi	r17,r17,2
    cb40:	ad80210c 	andi	r22,r21,132
    cb44:	b001c51e 	bne	r22,zero,d25c <___vfiprintf_internal_r+0xb30>
    cb48:	9447c83a 	sub	r3,r18,r17
    cb4c:	00c1c30e 	bge	zero,r3,d25c <___vfiprintf_internal_r+0xb30>
    cb50:	01c00404 	movi	r7,16
    cb54:	d8801c17 	ldw	r2,112(sp)
    cb58:	38c37b0e 	bge	r7,r3,d948 <___vfiprintf_internal_r+0x121c>
    cb5c:	010000b4 	movhi	r4,2
    cb60:	213c9204 	addi	r4,r4,-3512
    cb64:	dc002915 	stw	r16,164(sp)
    cb68:	d9801b17 	ldw	r6,108(sp)
    cb6c:	d9002415 	stw	r4,144(sp)
    cb70:	03c001c4 	movi	r15,7
    cb74:	da402515 	stw	r9,148(sp)
    cb78:	db402815 	stw	r13,160(sp)
    cb7c:	1821883a 	mov	r16,r3
    cb80:	00000506 	br	cb98 <___vfiprintf_internal_r+0x46c>
    cb84:	31400084 	addi	r5,r6,2
    cb88:	42000204 	addi	r8,r8,8
    cb8c:	200d883a 	mov	r6,r4
    cb90:	843ffc04 	addi	r16,r16,-16
    cb94:	3c000d0e 	bge	r7,r16,cbcc <___vfiprintf_internal_r+0x4a0>
    cb98:	10800404 	addi	r2,r2,16
    cb9c:	31000044 	addi	r4,r6,1
    cba0:	47000015 	stw	fp,0(r8)
    cba4:	41c00115 	stw	r7,4(r8)
    cba8:	d8801c15 	stw	r2,112(sp)
    cbac:	d9001b15 	stw	r4,108(sp)
    cbb0:	793ff40e 	bge	r15,r4,cb84 <__alt_mem_Flash_flash_data+0xf400cb84>
    cbb4:	10019b1e 	bne	r2,zero,d224 <___vfiprintf_internal_r+0xaf8>
    cbb8:	843ffc04 	addi	r16,r16,-16
    cbbc:	000d883a 	mov	r6,zero
    cbc0:	01400044 	movi	r5,1
    cbc4:	d811883a 	mov	r8,sp
    cbc8:	3c3ff316 	blt	r7,r16,cb98 <__alt_mem_Flash_flash_data+0xf400cb98>
    cbcc:	8007883a 	mov	r3,r16
    cbd0:	da402517 	ldw	r9,148(sp)
    cbd4:	db402817 	ldw	r13,160(sp)
    cbd8:	dc002917 	ldw	r16,164(sp)
    cbdc:	d9002417 	ldw	r4,144(sp)
    cbe0:	1885883a 	add	r2,r3,r2
    cbe4:	40c00115 	stw	r3,4(r8)
    cbe8:	41000015 	stw	r4,0(r8)
    cbec:	d8801c15 	stw	r2,112(sp)
    cbf0:	d9401b15 	stw	r5,108(sp)
    cbf4:	00c001c4 	movi	r3,7
    cbf8:	19426a16 	blt	r3,r5,d5a4 <___vfiprintf_internal_r+0xe78>
    cbfc:	d8c01d87 	ldb	r3,118(sp)
    cc00:	42000204 	addi	r8,r8,8
    cc04:	29000044 	addi	r4,r5,1
    cc08:	1801991e 	bne	r3,zero,d270 <___vfiprintf_internal_r+0xb44>
    cc0c:	68000c26 	beq	r13,zero,cc40 <___vfiprintf_internal_r+0x514>
    cc10:	d8c01d04 	addi	r3,sp,116
    cc14:	10800084 	addi	r2,r2,2
    cc18:	40c00015 	stw	r3,0(r8)
    cc1c:	00c00084 	movi	r3,2
    cc20:	40c00115 	stw	r3,4(r8)
    cc24:	d8801c15 	stw	r2,112(sp)
    cc28:	d9001b15 	stw	r4,108(sp)
    cc2c:	00c001c4 	movi	r3,7
    cc30:	19024c16 	blt	r3,r4,d564 <___vfiprintf_internal_r+0xe38>
    cc34:	200b883a 	mov	r5,r4
    cc38:	42000204 	addi	r8,r8,8
    cc3c:	21000044 	addi	r4,r4,1
    cc40:	00c02004 	movi	r3,128
    cc44:	b0c20126 	beq	r22,r3,d44c <___vfiprintf_internal_r+0xd20>
    cc48:	4cedc83a 	sub	r22,r9,r19
    cc4c:	0580230e 	bge	zero,r22,ccdc <___vfiprintf_internal_r+0x5b0>
    cc50:	01c00404 	movi	r7,16
    cc54:	3d83140e 	bge	r7,r22,d8a8 <___vfiprintf_internal_r+0x117c>
    cc58:	010000b4 	movhi	r4,2
    cc5c:	213c8e04 	addi	r4,r4,-3528
    cc60:	d9002415 	stw	r4,144(sp)
    cc64:	034001c4 	movi	r13,7
    cc68:	00000506 	br	cc80 <___vfiprintf_internal_r+0x554>
    cc6c:	29000084 	addi	r4,r5,2
    cc70:	42000204 	addi	r8,r8,8
    cc74:	180b883a 	mov	r5,r3
    cc78:	b5bffc04 	addi	r22,r22,-16
    cc7c:	3d800d0e 	bge	r7,r22,ccb4 <___vfiprintf_internal_r+0x588>
    cc80:	10800404 	addi	r2,r2,16
    cc84:	28c00044 	addi	r3,r5,1
    cc88:	45c00015 	stw	r23,0(r8)
    cc8c:	41c00115 	stw	r7,4(r8)
    cc90:	d8801c15 	stw	r2,112(sp)
    cc94:	d8c01b15 	stw	r3,108(sp)
    cc98:	68fff40e 	bge	r13,r3,cc6c <__alt_mem_Flash_flash_data+0xf400cc6c>
    cc9c:	1001811e 	bne	r2,zero,d2a4 <___vfiprintf_internal_r+0xb78>
    cca0:	b5bffc04 	addi	r22,r22,-16
    cca4:	01000044 	movi	r4,1
    cca8:	000b883a 	mov	r5,zero
    ccac:	d811883a 	mov	r8,sp
    ccb0:	3dbff316 	blt	r7,r22,cc80 <__alt_mem_Flash_flash_data+0xf400cc80>
    ccb4:	d8c02417 	ldw	r3,144(sp)
    ccb8:	1585883a 	add	r2,r2,r22
    ccbc:	45800115 	stw	r22,4(r8)
    ccc0:	40c00015 	stw	r3,0(r8)
    ccc4:	d8801c15 	stw	r2,112(sp)
    ccc8:	d9001b15 	stw	r4,108(sp)
    cccc:	00c001c4 	movi	r3,7
    ccd0:	1901d016 	blt	r3,r4,d414 <___vfiprintf_internal_r+0xce8>
    ccd4:	42000204 	addi	r8,r8,8
    ccd8:	21000044 	addi	r4,r4,1
    ccdc:	14c5883a 	add	r2,r2,r19
    cce0:	45000015 	stw	r20,0(r8)
    cce4:	44c00115 	stw	r19,4(r8)
    cce8:	d8801c15 	stw	r2,112(sp)
    ccec:	d9001b15 	stw	r4,108(sp)
    ccf0:	00c001c4 	movi	r3,7
    ccf4:	1901cf0e 	bge	r3,r4,d434 <___vfiprintf_internal_r+0xd08>
    ccf8:	1002361e 	bne	r2,zero,d5d4 <___vfiprintf_internal_r+0xea8>
    ccfc:	d8001b15 	stw	zero,108(sp)
    cd00:	aac0010c 	andi	r11,r21,4
    cd04:	58002826 	beq	r11,zero,cda8 <___vfiprintf_internal_r+0x67c>
    cd08:	9467c83a 	sub	r19,r18,r17
    cd0c:	d811883a 	mov	r8,sp
    cd10:	04c3340e 	bge	zero,r19,d9e4 <___vfiprintf_internal_r+0x12b8>
    cd14:	01c00404 	movi	r7,16
    cd18:	3cc31b0e 	bge	r7,r19,d988 <___vfiprintf_internal_r+0x125c>
    cd1c:	00c000b4 	movhi	r3,2
    cd20:	18fc9204 	addi	r3,r3,-3512
    cd24:	d9001b17 	ldw	r4,108(sp)
    cd28:	d8c02415 	stw	r3,144(sp)
    cd2c:	382b883a 	mov	r21,r7
    cd30:	050001c4 	movi	r20,7
    cd34:	dd802017 	ldw	r22,128(sp)
    cd38:	00000506 	br	cd50 <___vfiprintf_internal_r+0x624>
    cd3c:	21400084 	addi	r5,r4,2
    cd40:	42000204 	addi	r8,r8,8
    cd44:	1809883a 	mov	r4,r3
    cd48:	9cfffc04 	addi	r19,r19,-16
    cd4c:	acc00d0e 	bge	r21,r19,cd84 <___vfiprintf_internal_r+0x658>
    cd50:	10800404 	addi	r2,r2,16
    cd54:	20c00044 	addi	r3,r4,1
    cd58:	47000015 	stw	fp,0(r8)
    cd5c:	45400115 	stw	r21,4(r8)
    cd60:	d8801c15 	stw	r2,112(sp)
    cd64:	d8c01b15 	stw	r3,108(sp)
    cd68:	a0fff40e 	bge	r20,r3,cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>
    cd6c:	10019f1e 	bne	r2,zero,d3ec <___vfiprintf_internal_r+0xcc0>
    cd70:	9cfffc04 	addi	r19,r19,-16
    cd74:	01400044 	movi	r5,1
    cd78:	0009883a 	mov	r4,zero
    cd7c:	d811883a 	mov	r8,sp
    cd80:	acfff316 	blt	r21,r19,cd50 <__alt_mem_Flash_flash_data+0xf400cd50>
    cd84:	d8c02417 	ldw	r3,144(sp)
    cd88:	14c5883a 	add	r2,r2,r19
    cd8c:	44c00115 	stw	r19,4(r8)
    cd90:	40c00015 	stw	r3,0(r8)
    cd94:	d8801c15 	stw	r2,112(sp)
    cd98:	d9401b15 	stw	r5,108(sp)
    cd9c:	00c001c4 	movi	r3,7
    cda0:	1941810e 	bge	r3,r5,d3a8 <___vfiprintf_internal_r+0xc7c>
    cda4:	10017a1e 	bne	r2,zero,d390 <___vfiprintf_internal_r+0xc64>
    cda8:	8c82a416 	blt	r17,r18,d83c <___vfiprintf_internal_r+0x1110>
    cdac:	d9002317 	ldw	r4,140(sp)
    cdb0:	2449883a 	add	r4,r4,r17
    cdb4:	d9002315 	stw	r4,140(sp)
    cdb8:	d8001b15 	stw	zero,108(sp)
    cdbc:	d811883a 	mov	r8,sp
    cdc0:	003e8e06 	br	c7fc <__alt_mem_Flash_flash_data+0xf400c7fc>
    cdc4:	d9002017 	ldw	r4,128(sp)
    cdc8:	a80b883a 	mov	r5,r21
    cdcc:	00064400 	call	6440 <__swsetup_r>
    cdd0:	10000c1e 	bne	r2,zero,ce04 <___vfiprintf_internal_r+0x6d8>
    cdd4:	a880030b 	ldhu	r2,12(r21)
    cdd8:	00c00284 	movi	r3,10
    cddc:	1080068c 	andi	r2,r2,26
    cde0:	10fe741e 	bne	r2,r3,c7b4 <__alt_mem_Flash_flash_data+0xf400c7b4>
    cde4:	a880038f 	ldh	r2,14(r21)
    cde8:	103e7216 	blt	r2,zero,c7b4 <__alt_mem_Flash_flash_data+0xf400c7b4>
    cdec:	d9002017 	ldw	r4,128(sp)
    cdf0:	d9c02217 	ldw	r7,136(sp)
    cdf4:	a80b883a 	mov	r5,r21
    cdf8:	b00d883a 	mov	r6,r22
    cdfc:	000da200 	call	da20 <__sbprintf>
    ce00:	00000106 	br	ce08 <___vfiprintf_internal_r+0x6dc>
    ce04:	00bfffc4 	movi	r2,-1
    ce08:	dfc03517 	ldw	ra,212(sp)
    ce0c:	df003417 	ldw	fp,208(sp)
    ce10:	ddc03317 	ldw	r23,204(sp)
    ce14:	dd803217 	ldw	r22,200(sp)
    ce18:	dd403117 	ldw	r21,196(sp)
    ce1c:	dd003017 	ldw	r20,192(sp)
    ce20:	dcc02f17 	ldw	r19,188(sp)
    ce24:	dc802e17 	ldw	r18,184(sp)
    ce28:	dc402d17 	ldw	r17,180(sp)
    ce2c:	dc002c17 	ldw	r16,176(sp)
    ce30:	dec03604 	addi	sp,sp,216
    ce34:	f800283a 	ret
    ce38:	00084a00 	call	84a0 <__sinit>
    ce3c:	003e4d06 	br	c774 <__alt_mem_Flash_flash_data+0xf400c774>
    ce40:	8005883a 	mov	r2,r16
    ce44:	ad400114 	ori	r21,r21,4
    ce48:	80c00007 	ldb	r3,0(r16)
    ce4c:	003e9506 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    ce50:	b006d0fa 	srli	r3,r22,3
    ce54:	6808977a 	slli	r4,r13,29
    ce58:	681ad0fa 	srli	r13,r13,3
    ce5c:	b58001cc 	andi	r22,r22,7
    ce60:	b0800c04 	addi	r2,r22,48
    ce64:	a53fffc4 	addi	r20,r20,-1
    ce68:	20ecb03a 	or	r22,r4,r3
    ce6c:	a0800005 	stb	r2,0(r20)
    ce70:	b346b03a 	or	r3,r22,r13
    ce74:	183ff61e 	bne	r3,zero,ce50 <__alt_mem_Flash_flash_data+0xf400ce50>
    ce78:	a8c0004c 	andi	r3,r21,1
    ce7c:	a009883a 	mov	r4,r20
    ce80:	18013b26 	beq	r3,zero,d370 <___vfiprintf_internal_r+0xc44>
    ce84:	10803fcc 	andi	r2,r2,255
    ce88:	1080201c 	xori	r2,r2,128
    ce8c:	10bfe004 	addi	r2,r2,-128
    ce90:	00c00c04 	movi	r3,48
    ce94:	10ff1d26 	beq	r2,r3,cb0c <__alt_mem_Flash_flash_data+0xf400cb0c>
    ce98:	d8801e17 	ldw	r2,120(sp)
    ce9c:	a53fffc4 	addi	r20,r20,-1
    cea0:	20ffffc5 	stb	r3,-1(r4)
    cea4:	1527c83a 	sub	r19,r2,r20
    cea8:	003f1a06 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    ceac:	ad402014 	ori	r21,r21,128
    ceb0:	8005883a 	mov	r2,r16
    ceb4:	80c00007 	ldb	r3,0(r16)
    ceb8:	003e7a06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    cebc:	8005883a 	mov	r2,r16
    cec0:	0025883a 	mov	r18,zero
    cec4:	193ff404 	addi	r4,r3,-48
    cec8:	10c00007 	ldb	r3,0(r2)
    cecc:	948002a4 	muli	r18,r18,10
    ced0:	84000044 	addi	r16,r16,1
    ced4:	8005883a 	mov	r2,r16
    ced8:	9125883a 	add	r18,r18,r4
    cedc:	193ff404 	addi	r4,r3,-48
    cee0:	313ff92e 	bgeu	r6,r4,cec8 <__alt_mem_Flash_flash_data+0xf400cec8>
    cee4:	003e7006 	br	c8a8 <__alt_mem_Flash_flash_data+0xf400c8a8>
    cee8:	ad400414 	ori	r21,r21,16
    ceec:	d9c01d85 	stb	r7,118(sp)
    cef0:	a880080c 	andi	r2,r21,32
    cef4:	d8c02217 	ldw	r3,136(sp)
    cef8:	10005a26 	beq	r2,zero,d064 <___vfiprintf_internal_r+0x938>
    cefc:	d9002217 	ldw	r4,136(sp)
    cf00:	18800117 	ldw	r2,4(r3)
    cf04:	1d800017 	ldw	r22,0(r3)
    cf08:	21000204 	addi	r4,r4,8
    cf0c:	d9002215 	stw	r4,136(sp)
    cf10:	101b883a 	mov	r13,r2
    cf14:	1001f416 	blt	r2,zero,d6e8 <___vfiprintf_internal_r+0xfbc>
    cf18:	db801d83 	ldbu	r14,118(sp)
    cf1c:	4827883a 	mov	r19,r9
    cf20:	00800044 	movi	r2,1
    cf24:	b348b03a 	or	r4,r22,r13
    cf28:	003ee106 	br	cab0 <__alt_mem_Flash_flash_data+0xf400cab0>
    cf2c:	80c00007 	ldb	r3,0(r16)
    cf30:	80800044 	addi	r2,r16,1
    cf34:	1b42a326 	beq	r3,r13,d9c4 <___vfiprintf_internal_r+0x1298>
    cf38:	193ff404 	addi	r4,r3,-48
    cf3c:	1021883a 	mov	r16,r2
    cf40:	0013883a 	mov	r9,zero
    cf44:	313e5836 	bltu	r6,r4,c8a8 <__alt_mem_Flash_flash_data+0xf400c8a8>
    cf48:	80c00007 	ldb	r3,0(r16)
    cf4c:	4a4002a4 	muli	r9,r9,10
    cf50:	84000044 	addi	r16,r16,1
    cf54:	2253883a 	add	r9,r4,r9
    cf58:	193ff404 	addi	r4,r3,-48
    cf5c:	313ffa2e 	bgeu	r6,r4,cf48 <__alt_mem_Flash_flash_data+0xf400cf48>
    cf60:	483e510e 	bge	r9,zero,c8a8 <__alt_mem_Flash_flash_data+0xf400c8a8>
    cf64:	027fffc4 	movi	r9,-1
    cf68:	003e4f06 	br	c8a8 <__alt_mem_Flash_flash_data+0xf400c8a8>
    cf6c:	d9c01d85 	stb	r7,118(sp)
    cf70:	a880080c 	andi	r2,r21,32
    cf74:	10020826 	beq	r2,zero,d798 <___vfiprintf_internal_r+0x106c>
    cf78:	d8c02217 	ldw	r3,136(sp)
    cf7c:	d9002317 	ldw	r4,140(sp)
    cf80:	18800017 	ldw	r2,0(r3)
    cf84:	2007d7fa 	srai	r3,r4,31
    cf88:	d9002217 	ldw	r4,136(sp)
    cf8c:	10c00115 	stw	r3,4(r2)
    cf90:	21000104 	addi	r4,r4,4
    cf94:	d9002215 	stw	r4,136(sp)
    cf98:	d9002317 	ldw	r4,140(sp)
    cf9c:	11000015 	stw	r4,0(r2)
    cfa0:	003e1606 	br	c7fc <__alt_mem_Flash_flash_data+0xf400c7fc>
    cfa4:	d8802217 	ldw	r2,136(sp)
    cfa8:	d8c02217 	ldw	r3,136(sp)
    cfac:	15800017 	ldw	r22,0(r2)
    cfb0:	13400117 	ldw	r13,4(r2)
    cfb4:	18c00204 	addi	r3,r3,8
    cfb8:	0005883a 	mov	r2,zero
    cfbc:	d8c02215 	stw	r3,136(sp)
    cfc0:	b348b03a 	or	r4,r22,r13
    cfc4:	003eb706 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    cfc8:	38803fcc 	andi	r2,r7,255
    cfcc:	1080201c 	xori	r2,r2,128
    cfd0:	10bfe004 	addi	r2,r2,-128
    cfd4:	1001e31e 	bne	r2,zero,d764 <___vfiprintf_internal_r+0x1038>
    cfd8:	8005883a 	mov	r2,r16
    cfdc:	01c00804 	movi	r7,32
    cfe0:	80c00007 	ldb	r3,0(r16)
    cfe4:	003e2f06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    cfe8:	ad400054 	ori	r21,r21,1
    cfec:	8005883a 	mov	r2,r16
    cff0:	80c00007 	ldb	r3,0(r16)
    cff4:	003e2b06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    cff8:	d8c02217 	ldw	r3,136(sp)
    cffc:	1c800017 	ldw	r18,0(r3)
    d000:	18c00104 	addi	r3,r3,4
    d004:	90023816 	blt	r18,zero,d8e8 <___vfiprintf_internal_r+0x11bc>
    d008:	d8c02215 	stw	r3,136(sp)
    d00c:	8005883a 	mov	r2,r16
    d010:	80c00007 	ldb	r3,0(r16)
    d014:	003e2306 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d018:	8005883a 	mov	r2,r16
    d01c:	01c00ac4 	movi	r7,43
    d020:	80c00007 	ldb	r3,0(r16)
    d024:	003e1f06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d028:	d8c02217 	ldw	r3,136(sp)
    d02c:	04400044 	movi	r17,1
    d030:	d8001d85 	stb	zero,118(sp)
    d034:	18800017 	ldw	r2,0(r3)
    d038:	18c00104 	addi	r3,r3,4
    d03c:	d8c02215 	stw	r3,136(sp)
    d040:	d8801005 	stb	r2,64(sp)
    d044:	8827883a 	mov	r19,r17
    d048:	dd001004 	addi	r20,sp,64
    d04c:	0013883a 	mov	r9,zero
    d050:	003eb806 	br	cb34 <__alt_mem_Flash_flash_data+0xf400cb34>
    d054:	d9c01d85 	stb	r7,118(sp)
    d058:	a880080c 	andi	r2,r21,32
    d05c:	d8c02217 	ldw	r3,136(sp)
    d060:	103fa61e 	bne	r2,zero,cefc <__alt_mem_Flash_flash_data+0xf400cefc>
    d064:	a880040c 	andi	r2,r21,16
    d068:	1001dd26 	beq	r2,zero,d7e0 <___vfiprintf_internal_r+0x10b4>
    d06c:	1d800017 	ldw	r22,0(r3)
    d070:	d8802217 	ldw	r2,136(sp)
    d074:	b01bd7fa 	srai	r13,r22,31
    d078:	10800104 	addi	r2,r2,4
    d07c:	d8802215 	stw	r2,136(sp)
    d080:	6805883a 	mov	r2,r13
    d084:	003fa306 	br	cf14 <__alt_mem_Flash_flash_data+0xf400cf14>
    d088:	008000b4 	movhi	r2,2
    d08c:	10bc1804 	addi	r2,r2,-4000
    d090:	d8802615 	stw	r2,152(sp)
    d094:	d9c01d85 	stb	r7,118(sp)
    d098:	a880080c 	andi	r2,r21,32
    d09c:	10004726 	beq	r2,zero,d1bc <___vfiprintf_internal_r+0xa90>
    d0a0:	d9002217 	ldw	r4,136(sp)
    d0a4:	25800017 	ldw	r22,0(r4)
    d0a8:	23400117 	ldw	r13,4(r4)
    d0ac:	21000204 	addi	r4,r4,8
    d0b0:	d9002215 	stw	r4,136(sp)
    d0b4:	a880004c 	andi	r2,r21,1
    d0b8:	10014e26 	beq	r2,zero,d5f4 <___vfiprintf_internal_r+0xec8>
    d0bc:	b348b03a 	or	r4,r22,r13
    d0c0:	20019c26 	beq	r4,zero,d734 <___vfiprintf_internal_r+0x1008>
    d0c4:	00800c04 	movi	r2,48
    d0c8:	d8801d05 	stb	r2,116(sp)
    d0cc:	d8c01d45 	stb	r3,117(sp)
    d0d0:	ad400094 	ori	r21,r21,2
    d0d4:	00800084 	movi	r2,2
    d0d8:	003e7206 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d0dc:	d8c02217 	ldw	r3,136(sp)
    d0e0:	d8001d85 	stb	zero,118(sp)
    d0e4:	1d000017 	ldw	r20,0(r3)
    d0e8:	1d800104 	addi	r22,r3,4
    d0ec:	a0021c26 	beq	r20,zero,d960 <___vfiprintf_internal_r+0x1234>
    d0f0:	a009883a 	mov	r4,r20
    d0f4:	48020016 	blt	r9,zero,d8f8 <___vfiprintf_internal_r+0x11cc>
    d0f8:	480d883a 	mov	r6,r9
    d0fc:	000b883a 	mov	r5,zero
    d100:	da002a15 	stw	r8,168(sp)
    d104:	da402b15 	stw	r9,172(sp)
    d108:	000998c0 	call	998c <memchr>
    d10c:	da002a17 	ldw	r8,168(sp)
    d110:	da402b17 	ldw	r9,172(sp)
    d114:	10022226 	beq	r2,zero,d9a0 <___vfiprintf_internal_r+0x1274>
    d118:	1527c83a 	sub	r19,r2,r20
    d11c:	4cc1c916 	blt	r9,r19,d844 <___vfiprintf_internal_r+0x1118>
    d120:	db801d83 	ldbu	r14,118(sp)
    d124:	dd802215 	stw	r22,136(sp)
    d128:	0013883a 	mov	r9,zero
    d12c:	003e7906 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d130:	ad401014 	ori	r21,r21,64
    d134:	8005883a 	mov	r2,r16
    d138:	80c00007 	ldb	r3,0(r16)
    d13c:	003dd906 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d140:	80c00007 	ldb	r3,0(r16)
    d144:	8005883a 	mov	r2,r16
    d148:	1b01e326 	beq	r3,r12,d8d8 <___vfiprintf_internal_r+0x11ac>
    d14c:	ad400414 	ori	r21,r21,16
    d150:	003dd406 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d154:	d9002217 	ldw	r4,136(sp)
    d158:	00800c04 	movi	r2,48
    d15c:	d8801d05 	stb	r2,116(sp)
    d160:	25800017 	ldw	r22,0(r4)
    d164:	00801e04 	movi	r2,120
    d168:	d8801d45 	stb	r2,117(sp)
    d16c:	008000b4 	movhi	r2,2
    d170:	21000104 	addi	r4,r4,4
    d174:	10bc1d04 	addi	r2,r2,-3980
    d178:	d9002215 	stw	r4,136(sp)
    d17c:	d8802615 	stw	r2,152(sp)
    d180:	001b883a 	mov	r13,zero
    d184:	ad400094 	ori	r21,r21,2
    d188:	00800084 	movi	r2,2
    d18c:	b009883a 	mov	r4,r22
    d190:	003e4406 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d194:	ad400814 	ori	r21,r21,32
    d198:	8005883a 	mov	r2,r16
    d19c:	80c00007 	ldb	r3,0(r16)
    d1a0:	003dc006 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d1a4:	008000b4 	movhi	r2,2
    d1a8:	10bc1d04 	addi	r2,r2,-3980
    d1ac:	d8802615 	stw	r2,152(sp)
    d1b0:	d9c01d85 	stb	r7,118(sp)
    d1b4:	a880080c 	andi	r2,r21,32
    d1b8:	103fb91e 	bne	r2,zero,d0a0 <__alt_mem_Flash_flash_data+0xf400d0a0>
    d1bc:	a880040c 	andi	r2,r21,16
    d1c0:	10010f1e 	bne	r2,zero,d600 <___vfiprintf_internal_r+0xed4>
    d1c4:	a880100c 	andi	r2,r21,64
    d1c8:	10010d26 	beq	r2,zero,d600 <___vfiprintf_internal_r+0xed4>
    d1cc:	d9002217 	ldw	r4,136(sp)
    d1d0:	001b883a 	mov	r13,zero
    d1d4:	2580000b 	ldhu	r22,0(r4)
    d1d8:	21000104 	addi	r4,r4,4
    d1dc:	d9002215 	stw	r4,136(sp)
    d1e0:	003fb406 	br	d0b4 <__alt_mem_Flash_flash_data+0xf400d0b4>
    d1e4:	d9002217 	ldw	r4,136(sp)
    d1e8:	00800044 	movi	r2,1
    d1ec:	25800017 	ldw	r22,0(r4)
    d1f0:	23400117 	ldw	r13,4(r4)
    d1f4:	21000204 	addi	r4,r4,8
    d1f8:	d9002215 	stw	r4,136(sp)
    d1fc:	b348b03a 	or	r4,r22,r13
    d200:	003e2806 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d204:	d9c01d85 	stb	r7,118(sp)
    d208:	1801ab26 	beq	r3,zero,d8b8 <___vfiprintf_internal_r+0x118c>
    d20c:	04400044 	movi	r17,1
    d210:	d8c01005 	stb	r3,64(sp)
    d214:	d8001d85 	stb	zero,118(sp)
    d218:	8827883a 	mov	r19,r17
    d21c:	dd001004 	addi	r20,sp,64
    d220:	003f8a06 	br	d04c <__alt_mem_Flash_flash_data+0xf400d04c>
    d224:	d9002017 	ldw	r4,128(sp)
    d228:	d9402117 	ldw	r5,132(sp)
    d22c:	d9801a04 	addi	r6,sp,104
    d230:	d9c02b15 	stw	r7,172(sp)
    d234:	dbc02a15 	stw	r15,168(sp)
    d238:	000c6180 	call	c618 <__sprint_r.part.0>
    d23c:	d9c02b17 	ldw	r7,172(sp)
    d240:	dbc02a17 	ldw	r15,168(sp)
    d244:	1000631e 	bne	r2,zero,d3d4 <___vfiprintf_internal_r+0xca8>
    d248:	d9801b17 	ldw	r6,108(sp)
    d24c:	d8801c17 	ldw	r2,112(sp)
    d250:	d811883a 	mov	r8,sp
    d254:	31400044 	addi	r5,r6,1
    d258:	003e4d06 	br	cb90 <__alt_mem_Flash_flash_data+0xf400cb90>
    d25c:	d9401b17 	ldw	r5,108(sp)
    d260:	d8801c17 	ldw	r2,112(sp)
    d264:	29000044 	addi	r4,r5,1
    d268:	d8c01d87 	ldb	r3,118(sp)
    d26c:	183e6726 	beq	r3,zero,cc0c <__alt_mem_Flash_flash_data+0xf400cc0c>
    d270:	00c00044 	movi	r3,1
    d274:	d9401d84 	addi	r5,sp,118
    d278:	10c5883a 	add	r2,r2,r3
    d27c:	41400015 	stw	r5,0(r8)
    d280:	40c00115 	stw	r3,4(r8)
    d284:	d8801c15 	stw	r2,112(sp)
    d288:	d9001b15 	stw	r4,108(sp)
    d28c:	014001c4 	movi	r5,7
    d290:	2900ab16 	blt	r5,r4,d540 <___vfiprintf_internal_r+0xe14>
    d294:	200b883a 	mov	r5,r4
    d298:	42000204 	addi	r8,r8,8
    d29c:	21000044 	addi	r4,r4,1
    d2a0:	003e5a06 	br	cc0c <__alt_mem_Flash_flash_data+0xf400cc0c>
    d2a4:	d9002017 	ldw	r4,128(sp)
    d2a8:	d9402117 	ldw	r5,132(sp)
    d2ac:	d9801a04 	addi	r6,sp,104
    d2b0:	d9c02b15 	stw	r7,172(sp)
    d2b4:	db402a15 	stw	r13,168(sp)
    d2b8:	000c6180 	call	c618 <__sprint_r.part.0>
    d2bc:	d9c02b17 	ldw	r7,172(sp)
    d2c0:	db402a17 	ldw	r13,168(sp)
    d2c4:	1000431e 	bne	r2,zero,d3d4 <___vfiprintf_internal_r+0xca8>
    d2c8:	d9401b17 	ldw	r5,108(sp)
    d2cc:	d8801c17 	ldw	r2,112(sp)
    d2d0:	d811883a 	mov	r8,sp
    d2d4:	29000044 	addi	r4,r5,1
    d2d8:	003e6706 	br	cc78 <__alt_mem_Flash_flash_data+0xf400cc78>
    d2dc:	10803fcc 	andi	r2,r2,255
    d2e0:	00c00044 	movi	r3,1
    d2e4:	10fdfa1e 	bne	r2,r3,cad0 <__alt_mem_Flash_flash_data+0xf400cad0>
    d2e8:	6800021e 	bne	r13,zero,d2f4 <___vfiprintf_internal_r+0xbc8>
    d2ec:	00800244 	movi	r2,9
    d2f0:	1580222e 	bgeu	r2,r22,d37c <___vfiprintf_internal_r+0xc50>
    d2f4:	dc802415 	stw	r18,144(sp)
    d2f8:	dc002515 	stw	r16,148(sp)
    d2fc:	dc401a04 	addi	r17,sp,104
    d300:	b021883a 	mov	r16,r22
    d304:	4827883a 	mov	r19,r9
    d308:	4029883a 	mov	r20,r8
    d30c:	702d883a 	mov	r22,r14
    d310:	6825883a 	mov	r18,r13
    d314:	8009883a 	mov	r4,r16
    d318:	900b883a 	mov	r5,r18
    d31c:	01800284 	movi	r6,10
    d320:	000f883a 	mov	r7,zero
    d324:	000e9940 	call	e994 <__umoddi3>
    d328:	10800c04 	addi	r2,r2,48
    d32c:	8c7fffc4 	addi	r17,r17,-1
    d330:	8009883a 	mov	r4,r16
    d334:	900b883a 	mov	r5,r18
    d338:	01800284 	movi	r6,10
    d33c:	000f883a 	mov	r7,zero
    d340:	88800005 	stb	r2,0(r17)
    d344:	000e3d40 	call	e3d4 <__udivdi3>
    d348:	1021883a 	mov	r16,r2
    d34c:	10c4b03a 	or	r2,r2,r3
    d350:	1825883a 	mov	r18,r3
    d354:	103fef1e 	bne	r2,zero,d314 <__alt_mem_Flash_flash_data+0xf400d314>
    d358:	dc802417 	ldw	r18,144(sp)
    d35c:	dc002517 	ldw	r16,148(sp)
    d360:	a011883a 	mov	r8,r20
    d364:	9813883a 	mov	r9,r19
    d368:	b01d883a 	mov	r14,r22
    d36c:	8829883a 	mov	r20,r17
    d370:	d8c01e17 	ldw	r3,120(sp)
    d374:	1d27c83a 	sub	r19,r3,r20
    d378:	003de606 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d37c:	b5800c04 	addi	r22,r22,48
    d380:	dd8019c5 	stb	r22,103(sp)
    d384:	dcc02717 	ldw	r19,156(sp)
    d388:	dd0019c4 	addi	r20,sp,103
    d38c:	003de106 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d390:	d9002017 	ldw	r4,128(sp)
    d394:	d9402117 	ldw	r5,132(sp)
    d398:	d9801a04 	addi	r6,sp,104
    d39c:	000c6180 	call	c618 <__sprint_r.part.0>
    d3a0:	10000c1e 	bne	r2,zero,d3d4 <___vfiprintf_internal_r+0xca8>
    d3a4:	d8801c17 	ldw	r2,112(sp)
    d3a8:	8c80010e 	bge	r17,r18,d3b0 <___vfiprintf_internal_r+0xc84>
    d3ac:	9023883a 	mov	r17,r18
    d3b0:	d8c02317 	ldw	r3,140(sp)
    d3b4:	1c47883a 	add	r3,r3,r17
    d3b8:	d8c02315 	stw	r3,140(sp)
    d3bc:	103e7e26 	beq	r2,zero,cdb8 <__alt_mem_Flash_flash_data+0xf400cdb8>
    d3c0:	d9002017 	ldw	r4,128(sp)
    d3c4:	d9402117 	ldw	r5,132(sp)
    d3c8:	d9801a04 	addi	r6,sp,104
    d3cc:	000c6180 	call	c618 <__sprint_r.part.0>
    d3d0:	103e7926 	beq	r2,zero,cdb8 <__alt_mem_Flash_flash_data+0xf400cdb8>
    d3d4:	dd402117 	ldw	r21,132(sp)
    d3d8:	a880030b 	ldhu	r2,12(r21)
    d3dc:	1080100c 	andi	r2,r2,64
    d3e0:	103e881e 	bne	r2,zero,ce04 <__alt_mem_Flash_flash_data+0xf400ce04>
    d3e4:	d8802317 	ldw	r2,140(sp)
    d3e8:	003e8706 	br	ce08 <__alt_mem_Flash_flash_data+0xf400ce08>
    d3ec:	d9402117 	ldw	r5,132(sp)
    d3f0:	b009883a 	mov	r4,r22
    d3f4:	d9801a04 	addi	r6,sp,104
    d3f8:	000c6180 	call	c618 <__sprint_r.part.0>
    d3fc:	103ff51e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d400:	d9001b17 	ldw	r4,108(sp)
    d404:	d8801c17 	ldw	r2,112(sp)
    d408:	d811883a 	mov	r8,sp
    d40c:	21400044 	addi	r5,r4,1
    d410:	003e4d06 	br	cd48 <__alt_mem_Flash_flash_data+0xf400cd48>
    d414:	1000aa1e 	bne	r2,zero,d6c0 <___vfiprintf_internal_r+0xf94>
    d418:	00c00044 	movi	r3,1
    d41c:	9805883a 	mov	r2,r19
    d420:	dd000015 	stw	r20,0(sp)
    d424:	dcc00115 	stw	r19,4(sp)
    d428:	dcc01c15 	stw	r19,112(sp)
    d42c:	d8c01b15 	stw	r3,108(sp)
    d430:	d811883a 	mov	r8,sp
    d434:	42000204 	addi	r8,r8,8
    d438:	aac0010c 	andi	r11,r21,4
    d43c:	583fda26 	beq	r11,zero,d3a8 <__alt_mem_Flash_flash_data+0xf400d3a8>
    d440:	9467c83a 	sub	r19,r18,r17
    d444:	04fe3316 	blt	zero,r19,cd14 <__alt_mem_Flash_flash_data+0xf400cd14>
    d448:	003fd706 	br	d3a8 <__alt_mem_Flash_flash_data+0xf400d3a8>
    d44c:	946dc83a 	sub	r22,r18,r17
    d450:	05bdfd0e 	bge	zero,r22,cc48 <__alt_mem_Flash_flash_data+0xf400cc48>
    d454:	00c000b4 	movhi	r3,2
    d458:	18fc8e04 	addi	r3,r3,-3528
    d45c:	01c00404 	movi	r7,16
    d460:	d8c02415 	stw	r3,144(sp)
    d464:	3d81530e 	bge	r7,r22,d9b4 <___vfiprintf_internal_r+0x1288>
    d468:	8007883a 	mov	r3,r16
    d46c:	034001c4 	movi	r13,7
    d470:	b021883a 	mov	r16,r22
    d474:	da402515 	stw	r9,148(sp)
    d478:	182d883a 	mov	r22,r3
    d47c:	00000506 	br	d494 <___vfiprintf_internal_r+0xd68>
    d480:	29800084 	addi	r6,r5,2
    d484:	42000204 	addi	r8,r8,8
    d488:	180b883a 	mov	r5,r3
    d48c:	843ffc04 	addi	r16,r16,-16
    d490:	3c000d0e 	bge	r7,r16,d4c8 <___vfiprintf_internal_r+0xd9c>
    d494:	10800404 	addi	r2,r2,16
    d498:	28c00044 	addi	r3,r5,1
    d49c:	45c00015 	stw	r23,0(r8)
    d4a0:	41c00115 	stw	r7,4(r8)
    d4a4:	d8801c15 	stw	r2,112(sp)
    d4a8:	d8c01b15 	stw	r3,108(sp)
    d4ac:	68fff40e 	bge	r13,r3,d480 <__alt_mem_Flash_flash_data+0xf400d480>
    d4b0:	1000151e 	bne	r2,zero,d508 <___vfiprintf_internal_r+0xddc>
    d4b4:	843ffc04 	addi	r16,r16,-16
    d4b8:	01800044 	movi	r6,1
    d4bc:	000b883a 	mov	r5,zero
    d4c0:	d811883a 	mov	r8,sp
    d4c4:	3c3ff316 	blt	r7,r16,d494 <__alt_mem_Flash_flash_data+0xf400d494>
    d4c8:	da402517 	ldw	r9,148(sp)
    d4cc:	b007883a 	mov	r3,r22
    d4d0:	802d883a 	mov	r22,r16
    d4d4:	1821883a 	mov	r16,r3
    d4d8:	d8c02417 	ldw	r3,144(sp)
    d4dc:	1585883a 	add	r2,r2,r22
    d4e0:	45800115 	stw	r22,4(r8)
    d4e4:	40c00015 	stw	r3,0(r8)
    d4e8:	d8801c15 	stw	r2,112(sp)
    d4ec:	d9801b15 	stw	r6,108(sp)
    d4f0:	00c001c4 	movi	r3,7
    d4f4:	19806d16 	blt	r3,r6,d6ac <___vfiprintf_internal_r+0xf80>
    d4f8:	42000204 	addi	r8,r8,8
    d4fc:	31000044 	addi	r4,r6,1
    d500:	300b883a 	mov	r5,r6
    d504:	003dd006 	br	cc48 <__alt_mem_Flash_flash_data+0xf400cc48>
    d508:	d9002017 	ldw	r4,128(sp)
    d50c:	d9402117 	ldw	r5,132(sp)
    d510:	d9801a04 	addi	r6,sp,104
    d514:	d9c02b15 	stw	r7,172(sp)
    d518:	db402a15 	stw	r13,168(sp)
    d51c:	000c6180 	call	c618 <__sprint_r.part.0>
    d520:	d9c02b17 	ldw	r7,172(sp)
    d524:	db402a17 	ldw	r13,168(sp)
    d528:	103faa1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d52c:	d9401b17 	ldw	r5,108(sp)
    d530:	d8801c17 	ldw	r2,112(sp)
    d534:	d811883a 	mov	r8,sp
    d538:	29800044 	addi	r6,r5,1
    d53c:	003fd306 	br	d48c <__alt_mem_Flash_flash_data+0xf400d48c>
    d540:	1000401e 	bne	r2,zero,d644 <___vfiprintf_internal_r+0xf18>
    d544:	68003b26 	beq	r13,zero,d634 <___vfiprintf_internal_r+0xf08>
    d548:	d9001d04 	addi	r4,sp,116
    d54c:	00800084 	movi	r2,2
    d550:	d9000015 	stw	r4,0(sp)
    d554:	d8800115 	stw	r2,4(sp)
    d558:	1809883a 	mov	r4,r3
    d55c:	d811883a 	mov	r8,sp
    d560:	003db406 	br	cc34 <__alt_mem_Flash_flash_data+0xf400cc34>
    d564:	1000451e 	bne	r2,zero,d67c <___vfiprintf_internal_r+0xf50>
    d568:	01000044 	movi	r4,1
    d56c:	000b883a 	mov	r5,zero
    d570:	d811883a 	mov	r8,sp
    d574:	003db206 	br	cc40 <__alt_mem_Flash_flash_data+0xf400cc40>
    d578:	10803fcc 	andi	r2,r2,255
    d57c:	1000071e 	bne	r2,zero,d59c <___vfiprintf_internal_r+0xe70>
    d580:	a880004c 	andi	r2,r21,1
    d584:	10000526 	beq	r2,zero,d59c <___vfiprintf_internal_r+0xe70>
    d588:	00800c04 	movi	r2,48
    d58c:	d88019c5 	stb	r2,103(sp)
    d590:	dcc02717 	ldw	r19,156(sp)
    d594:	dd0019c4 	addi	r20,sp,103
    d598:	003d5e06 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d59c:	dd001a04 	addi	r20,sp,104
    d5a0:	003d5c06 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d5a4:	1000971e 	bne	r2,zero,d804 <___vfiprintf_internal_r+0x10d8>
    d5a8:	d8c01d87 	ldb	r3,118(sp)
    d5ac:	18005826 	beq	r3,zero,d710 <___vfiprintf_internal_r+0xfe4>
    d5b0:	00800044 	movi	r2,1
    d5b4:	d8c01d84 	addi	r3,sp,118
    d5b8:	1009883a 	mov	r4,r2
    d5bc:	d8c00015 	stw	r3,0(sp)
    d5c0:	d8800115 	stw	r2,4(sp)
    d5c4:	d811883a 	mov	r8,sp
    d5c8:	003f3206 	br	d294 <__alt_mem_Flash_flash_data+0xf400d294>
    d5cc:	8023883a 	mov	r17,r16
    d5d0:	003ca706 	br	c870 <__alt_mem_Flash_flash_data+0xf400c870>
    d5d4:	d9002017 	ldw	r4,128(sp)
    d5d8:	d9402117 	ldw	r5,132(sp)
    d5dc:	d9801a04 	addi	r6,sp,104
    d5e0:	000c6180 	call	c618 <__sprint_r.part.0>
    d5e4:	103f7b1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d5e8:	d8801c17 	ldw	r2,112(sp)
    d5ec:	d811883a 	mov	r8,sp
    d5f0:	003f9106 	br	d438 <__alt_mem_Flash_flash_data+0xf400d438>
    d5f4:	00800084 	movi	r2,2
    d5f8:	b348b03a 	or	r4,r22,r13
    d5fc:	003d2906 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d600:	d8802217 	ldw	r2,136(sp)
    d604:	001b883a 	mov	r13,zero
    d608:	15800017 	ldw	r22,0(r2)
    d60c:	10800104 	addi	r2,r2,4
    d610:	d8802215 	stw	r2,136(sp)
    d614:	003ea706 	br	d0b4 <__alt_mem_Flash_flash_data+0xf400d0b4>
    d618:	d9002017 	ldw	r4,128(sp)
    d61c:	d9402117 	ldw	r5,132(sp)
    d620:	d9801a04 	addi	r6,sp,104
    d624:	000c6180 	call	c618 <__sprint_r.part.0>
    d628:	103f6a1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d62c:	d811883a 	mov	r8,sp
    d630:	003cff06 	br	ca30 <__alt_mem_Flash_flash_data+0xf400ca30>
    d634:	000b883a 	mov	r5,zero
    d638:	1809883a 	mov	r4,r3
    d63c:	d811883a 	mov	r8,sp
    d640:	003d7f06 	br	cc40 <__alt_mem_Flash_flash_data+0xf400cc40>
    d644:	d9002017 	ldw	r4,128(sp)
    d648:	d9402117 	ldw	r5,132(sp)
    d64c:	d9801a04 	addi	r6,sp,104
    d650:	da402b15 	stw	r9,172(sp)
    d654:	db402a15 	stw	r13,168(sp)
    d658:	000c6180 	call	c618 <__sprint_r.part.0>
    d65c:	da402b17 	ldw	r9,172(sp)
    d660:	db402a17 	ldw	r13,168(sp)
    d664:	103f5b1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d668:	d9401b17 	ldw	r5,108(sp)
    d66c:	d8801c17 	ldw	r2,112(sp)
    d670:	d811883a 	mov	r8,sp
    d674:	29000044 	addi	r4,r5,1
    d678:	003d6406 	br	cc0c <__alt_mem_Flash_flash_data+0xf400cc0c>
    d67c:	d9002017 	ldw	r4,128(sp)
    d680:	d9402117 	ldw	r5,132(sp)
    d684:	d9801a04 	addi	r6,sp,104
    d688:	da402b15 	stw	r9,172(sp)
    d68c:	000c6180 	call	c618 <__sprint_r.part.0>
    d690:	da402b17 	ldw	r9,172(sp)
    d694:	103f4f1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d698:	d9401b17 	ldw	r5,108(sp)
    d69c:	d8801c17 	ldw	r2,112(sp)
    d6a0:	d811883a 	mov	r8,sp
    d6a4:	29000044 	addi	r4,r5,1
    d6a8:	003d6506 	br	cc40 <__alt_mem_Flash_flash_data+0xf400cc40>
    d6ac:	10009a1e 	bne	r2,zero,d918 <___vfiprintf_internal_r+0x11ec>
    d6b0:	01000044 	movi	r4,1
    d6b4:	000b883a 	mov	r5,zero
    d6b8:	d811883a 	mov	r8,sp
    d6bc:	003d6206 	br	cc48 <__alt_mem_Flash_flash_data+0xf400cc48>
    d6c0:	d9002017 	ldw	r4,128(sp)
    d6c4:	d9402117 	ldw	r5,132(sp)
    d6c8:	d9801a04 	addi	r6,sp,104
    d6cc:	000c6180 	call	c618 <__sprint_r.part.0>
    d6d0:	103f401e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d6d4:	d9001b17 	ldw	r4,108(sp)
    d6d8:	d8801c17 	ldw	r2,112(sp)
    d6dc:	d811883a 	mov	r8,sp
    d6e0:	21000044 	addi	r4,r4,1
    d6e4:	003d7d06 	br	ccdc <__alt_mem_Flash_flash_data+0xf400ccdc>
    d6e8:	05adc83a 	sub	r22,zero,r22
    d6ec:	b004c03a 	cmpne	r2,r22,zero
    d6f0:	035bc83a 	sub	r13,zero,r13
    d6f4:	689bc83a 	sub	r13,r13,r2
    d6f8:	03800b44 	movi	r14,45
    d6fc:	db801d85 	stb	r14,118(sp)
    d700:	4827883a 	mov	r19,r9
    d704:	00800044 	movi	r2,1
    d708:	b348b03a 	or	r4,r22,r13
    d70c:	003ce806 	br	cab0 <__alt_mem_Flash_flash_data+0xf400cab0>
    d710:	000b883a 	mov	r5,zero
    d714:	01000044 	movi	r4,1
    d718:	d811883a 	mov	r8,sp
    d71c:	683d4826 	beq	r13,zero,cc40 <__alt_mem_Flash_flash_data+0xf400cc40>
    d720:	00800084 	movi	r2,2
    d724:	d8c01d04 	addi	r3,sp,116
    d728:	d8c00015 	stw	r3,0(sp)
    d72c:	d8800115 	stw	r2,4(sp)
    d730:	003d4006 	br	cc34 <__alt_mem_Flash_flash_data+0xf400cc34>
    d734:	00800084 	movi	r2,2
    d738:	003cda06 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d73c:	a880100c 	andi	r2,r21,64
    d740:	10004226 	beq	r2,zero,d84c <___vfiprintf_internal_r+0x1120>
    d744:	d8802217 	ldw	r2,136(sp)
    d748:	001b883a 	mov	r13,zero
    d74c:	1580000b 	ldhu	r22,0(r2)
    d750:	10800104 	addi	r2,r2,4
    d754:	d8802215 	stw	r2,136(sp)
    d758:	b009883a 	mov	r4,r22
    d75c:	0005883a 	mov	r2,zero
    d760:	003cd006 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d764:	80c00007 	ldb	r3,0(r16)
    d768:	8005883a 	mov	r2,r16
    d76c:	003c4d06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d770:	a880100c 	andi	r2,r21,64
    d774:	10004426 	beq	r2,zero,d888 <___vfiprintf_internal_r+0x115c>
    d778:	d8c02217 	ldw	r3,136(sp)
    d77c:	001b883a 	mov	r13,zero
    d780:	00800044 	movi	r2,1
    d784:	1d80000b 	ldhu	r22,0(r3)
    d788:	18c00104 	addi	r3,r3,4
    d78c:	d8c02215 	stw	r3,136(sp)
    d790:	b009883a 	mov	r4,r22
    d794:	003cc306 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d798:	a880040c 	andi	r2,r21,16
    d79c:	1000091e 	bne	r2,zero,d7c4 <___vfiprintf_internal_r+0x1098>
    d7a0:	aac0100c 	andi	r11,r21,64
    d7a4:	58000726 	beq	r11,zero,d7c4 <___vfiprintf_internal_r+0x1098>
    d7a8:	d8c02217 	ldw	r3,136(sp)
    d7ac:	d9002317 	ldw	r4,140(sp)
    d7b0:	18800017 	ldw	r2,0(r3)
    d7b4:	18c00104 	addi	r3,r3,4
    d7b8:	d8c02215 	stw	r3,136(sp)
    d7bc:	1100000d 	sth	r4,0(r2)
    d7c0:	003c0e06 	br	c7fc <__alt_mem_Flash_flash_data+0xf400c7fc>
    d7c4:	d8c02217 	ldw	r3,136(sp)
    d7c8:	d9002317 	ldw	r4,140(sp)
    d7cc:	18800017 	ldw	r2,0(r3)
    d7d0:	18c00104 	addi	r3,r3,4
    d7d4:	d8c02215 	stw	r3,136(sp)
    d7d8:	11000015 	stw	r4,0(r2)
    d7dc:	003c0706 	br	c7fc <__alt_mem_Flash_flash_data+0xf400c7fc>
    d7e0:	a880100c 	andi	r2,r21,64
    d7e4:	10002126 	beq	r2,zero,d86c <___vfiprintf_internal_r+0x1140>
    d7e8:	1d80000f 	ldh	r22,0(r3)
    d7ec:	d8c02217 	ldw	r3,136(sp)
    d7f0:	b01bd7fa 	srai	r13,r22,31
    d7f4:	18c00104 	addi	r3,r3,4
    d7f8:	d8c02215 	stw	r3,136(sp)
    d7fc:	6805883a 	mov	r2,r13
    d800:	003dc406 	br	cf14 <__alt_mem_Flash_flash_data+0xf400cf14>
    d804:	d9002017 	ldw	r4,128(sp)
    d808:	d9402117 	ldw	r5,132(sp)
    d80c:	d9801a04 	addi	r6,sp,104
    d810:	da402b15 	stw	r9,172(sp)
    d814:	db402a15 	stw	r13,168(sp)
    d818:	000c6180 	call	c618 <__sprint_r.part.0>
    d81c:	da402b17 	ldw	r9,172(sp)
    d820:	db402a17 	ldw	r13,168(sp)
    d824:	103eeb1e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d828:	d9401b17 	ldw	r5,108(sp)
    d82c:	d8801c17 	ldw	r2,112(sp)
    d830:	d811883a 	mov	r8,sp
    d834:	29000044 	addi	r4,r5,1
    d838:	003e8b06 	br	d268 <__alt_mem_Flash_flash_data+0xf400d268>
    d83c:	9023883a 	mov	r17,r18
    d840:	003d5a06 	br	cdac <__alt_mem_Flash_flash_data+0xf400cdac>
    d844:	4827883a 	mov	r19,r9
    d848:	003e3506 	br	d120 <__alt_mem_Flash_flash_data+0xf400d120>
    d84c:	d8c02217 	ldw	r3,136(sp)
    d850:	001b883a 	mov	r13,zero
    d854:	0005883a 	mov	r2,zero
    d858:	1d800017 	ldw	r22,0(r3)
    d85c:	18c00104 	addi	r3,r3,4
    d860:	d8c02215 	stw	r3,136(sp)
    d864:	b009883a 	mov	r4,r22
    d868:	003c8e06 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d86c:	1d800017 	ldw	r22,0(r3)
    d870:	d9002217 	ldw	r4,136(sp)
    d874:	b01bd7fa 	srai	r13,r22,31
    d878:	21000104 	addi	r4,r4,4
    d87c:	d9002215 	stw	r4,136(sp)
    d880:	6805883a 	mov	r2,r13
    d884:	003da306 	br	cf14 <__alt_mem_Flash_flash_data+0xf400cf14>
    d888:	d9002217 	ldw	r4,136(sp)
    d88c:	001b883a 	mov	r13,zero
    d890:	00800044 	movi	r2,1
    d894:	25800017 	ldw	r22,0(r4)
    d898:	21000104 	addi	r4,r4,4
    d89c:	d9002215 	stw	r4,136(sp)
    d8a0:	b009883a 	mov	r4,r22
    d8a4:	003c7f06 	br	caa4 <__alt_mem_Flash_flash_data+0xf400caa4>
    d8a8:	00c000b4 	movhi	r3,2
    d8ac:	18fc8e04 	addi	r3,r3,-3528
    d8b0:	d8c02415 	stw	r3,144(sp)
    d8b4:	003cff06 	br	ccb4 <__alt_mem_Flash_flash_data+0xf400ccb4>
    d8b8:	d8801c17 	ldw	r2,112(sp)
    d8bc:	dd402117 	ldw	r21,132(sp)
    d8c0:	103ec526 	beq	r2,zero,d3d8 <__alt_mem_Flash_flash_data+0xf400d3d8>
    d8c4:	d9002017 	ldw	r4,128(sp)
    d8c8:	a80b883a 	mov	r5,r21
    d8cc:	d9801a04 	addi	r6,sp,104
    d8d0:	000c6180 	call	c618 <__sprint_r.part.0>
    d8d4:	003ec006 	br	d3d8 <__alt_mem_Flash_flash_data+0xf400d3d8>
    d8d8:	80800044 	addi	r2,r16,1
    d8dc:	ad400814 	ori	r21,r21,32
    d8e0:	80c00047 	ldb	r3,1(r16)
    d8e4:	003bef06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d8e8:	04a5c83a 	sub	r18,zero,r18
    d8ec:	8005883a 	mov	r2,r16
    d8f0:	d8c02215 	stw	r3,136(sp)
    d8f4:	003d5306 	br	ce44 <__alt_mem_Flash_flash_data+0xf400ce44>
    d8f8:	da002a15 	stw	r8,168(sp)
    d8fc:	00023e80 	call	23e8 <strlen>
    d900:	1027883a 	mov	r19,r2
    d904:	db801d83 	ldbu	r14,118(sp)
    d908:	dd802215 	stw	r22,136(sp)
    d90c:	0013883a 	mov	r9,zero
    d910:	da002a17 	ldw	r8,168(sp)
    d914:	003c7f06 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d918:	d9002017 	ldw	r4,128(sp)
    d91c:	d9402117 	ldw	r5,132(sp)
    d920:	d9801a04 	addi	r6,sp,104
    d924:	da402b15 	stw	r9,172(sp)
    d928:	000c6180 	call	c618 <__sprint_r.part.0>
    d92c:	da402b17 	ldw	r9,172(sp)
    d930:	103ea81e 	bne	r2,zero,d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d934:	d9401b17 	ldw	r5,108(sp)
    d938:	d8801c17 	ldw	r2,112(sp)
    d93c:	d811883a 	mov	r8,sp
    d940:	29000044 	addi	r4,r5,1
    d944:	003cc006 	br	cc48 <__alt_mem_Flash_flash_data+0xf400cc48>
    d948:	d9401b17 	ldw	r5,108(sp)
    d94c:	010000b4 	movhi	r4,2
    d950:	213c9204 	addi	r4,r4,-3512
    d954:	d9002415 	stw	r4,144(sp)
    d958:	29400044 	addi	r5,r5,1
    d95c:	003c9f06 	br	cbdc <__alt_mem_Flash_flash_data+0xf400cbdc>
    d960:	00800184 	movi	r2,6
    d964:	1240012e 	bgeu	r2,r9,d96c <___vfiprintf_internal_r+0x1240>
    d968:	1013883a 	mov	r9,r2
    d96c:	4827883a 	mov	r19,r9
    d970:	4823883a 	mov	r17,r9
    d974:	48001116 	blt	r9,zero,d9bc <___vfiprintf_internal_r+0x1290>
    d978:	050000b4 	movhi	r20,2
    d97c:	dd802215 	stw	r22,136(sp)
    d980:	a53c2204 	addi	r20,r20,-3960
    d984:	003db106 	br	d04c <__alt_mem_Flash_flash_data+0xf400d04c>
    d988:	d9401b17 	ldw	r5,108(sp)
    d98c:	010000b4 	movhi	r4,2
    d990:	213c9204 	addi	r4,r4,-3512
    d994:	d9002415 	stw	r4,144(sp)
    d998:	29400044 	addi	r5,r5,1
    d99c:	003cf906 	br	cd84 <__alt_mem_Flash_flash_data+0xf400cd84>
    d9a0:	4827883a 	mov	r19,r9
    d9a4:	db801d83 	ldbu	r14,118(sp)
    d9a8:	dd802215 	stw	r22,136(sp)
    d9ac:	0013883a 	mov	r9,zero
    d9b0:	003c5806 	br	cb14 <__alt_mem_Flash_flash_data+0xf400cb14>
    d9b4:	200d883a 	mov	r6,r4
    d9b8:	003ec706 	br	d4d8 <__alt_mem_Flash_flash_data+0xf400d4d8>
    d9bc:	0023883a 	mov	r17,zero
    d9c0:	003fed06 	br	d978 <__alt_mem_Flash_flash_data+0xf400d978>
    d9c4:	d9002217 	ldw	r4,136(sp)
    d9c8:	22400017 	ldw	r9,0(r4)
    d9cc:	20c00104 	addi	r3,r4,4
    d9d0:	d8c02215 	stw	r3,136(sp)
    d9d4:	483fc20e 	bge	r9,zero,d8e0 <__alt_mem_Flash_flash_data+0xf400d8e0>
    d9d8:	027fffc4 	movi	r9,-1
    d9dc:	80c00047 	ldb	r3,1(r16)
    d9e0:	003bb006 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    d9e4:	8c80010e 	bge	r17,r18,d9ec <___vfiprintf_internal_r+0x12c0>
    d9e8:	9023883a 	mov	r17,r18
    d9ec:	d8802317 	ldw	r2,140(sp)
    d9f0:	1445883a 	add	r2,r2,r17
    d9f4:	d8802315 	stw	r2,140(sp)
    d9f8:	003cef06 	br	cdb8 <__alt_mem_Flash_flash_data+0xf400cdb8>

0000d9fc <__vfiprintf_internal>:
    d9fc:	2007883a 	mov	r3,r4
    da00:	010000b4 	movhi	r4,2
    da04:	21067e04 	addi	r4,r4,6648
    da08:	21000017 	ldw	r4,0(r4)
    da0c:	2805883a 	mov	r2,r5
    da10:	300f883a 	mov	r7,r6
    da14:	180b883a 	mov	r5,r3
    da18:	100d883a 	mov	r6,r2
    da1c:	000c72c1 	jmpi	c72c <___vfiprintf_internal_r>

0000da20 <__sbprintf>:
    da20:	2880030b 	ldhu	r2,12(r5)
    da24:	2ac01917 	ldw	r11,100(r5)
    da28:	2a80038b 	ldhu	r10,14(r5)
    da2c:	2a400717 	ldw	r9,28(r5)
    da30:	2a000917 	ldw	r8,36(r5)
    da34:	defee204 	addi	sp,sp,-1144
    da38:	00c10004 	movi	r3,1024
    da3c:	dc011a15 	stw	r16,1128(sp)
    da40:	10bfff4c 	andi	r2,r2,65533
    da44:	2821883a 	mov	r16,r5
    da48:	d8cb883a 	add	r5,sp,r3
    da4c:	dc811c15 	stw	r18,1136(sp)
    da50:	dc411b15 	stw	r17,1132(sp)
    da54:	dfc11d15 	stw	ra,1140(sp)
    da58:	2025883a 	mov	r18,r4
    da5c:	d881030d 	sth	r2,1036(sp)
    da60:	dac11915 	stw	r11,1124(sp)
    da64:	da81038d 	sth	r10,1038(sp)
    da68:	da410715 	stw	r9,1052(sp)
    da6c:	da010915 	stw	r8,1060(sp)
    da70:	dec10015 	stw	sp,1024(sp)
    da74:	dec10415 	stw	sp,1040(sp)
    da78:	d8c10215 	stw	r3,1032(sp)
    da7c:	d8c10515 	stw	r3,1044(sp)
    da80:	d8010615 	stw	zero,1048(sp)
    da84:	000c72c0 	call	c72c <___vfiprintf_internal_r>
    da88:	1023883a 	mov	r17,r2
    da8c:	10000416 	blt	r2,zero,daa0 <__sbprintf+0x80>
    da90:	9009883a 	mov	r4,r18
    da94:	d9410004 	addi	r5,sp,1024
    da98:	00080c40 	call	80c4 <_fflush_r>
    da9c:	10000d1e 	bne	r2,zero,dad4 <__sbprintf+0xb4>
    daa0:	d8c1030b 	ldhu	r3,1036(sp)
    daa4:	18c0100c 	andi	r3,r3,64
    daa8:	18000326 	beq	r3,zero,dab8 <__sbprintf+0x98>
    daac:	8080030b 	ldhu	r2,12(r16)
    dab0:	10801014 	ori	r2,r2,64
    dab4:	8080030d 	sth	r2,12(r16)
    dab8:	8805883a 	mov	r2,r17
    dabc:	dfc11d17 	ldw	ra,1140(sp)
    dac0:	dc811c17 	ldw	r18,1136(sp)
    dac4:	dc411b17 	ldw	r17,1132(sp)
    dac8:	dc011a17 	ldw	r16,1128(sp)
    dacc:	dec11e04 	addi	sp,sp,1144
    dad0:	f800283a 	ret
    dad4:	047fffc4 	movi	r17,-1
    dad8:	003ff106 	br	daa0 <__alt_mem_Flash_flash_data+0xf400daa0>

0000dadc <_write_r>:
    dadc:	defffd04 	addi	sp,sp,-12
    dae0:	dc000015 	stw	r16,0(sp)
    dae4:	040000b4 	movhi	r16,2
    dae8:	dc400115 	stw	r17,4(sp)
    daec:	840f4f04 	addi	r16,r16,15676
    daf0:	2023883a 	mov	r17,r4
    daf4:	2809883a 	mov	r4,r5
    daf8:	300b883a 	mov	r5,r6
    dafc:	380d883a 	mov	r6,r7
    db00:	dfc00215 	stw	ra,8(sp)
    db04:	80000015 	stw	zero,0(r16)
    db08:	0011f180 	call	11f18 <write>
    db0c:	00ffffc4 	movi	r3,-1
    db10:	10c00526 	beq	r2,r3,db28 <_write_r+0x4c>
    db14:	dfc00217 	ldw	ra,8(sp)
    db18:	dc400117 	ldw	r17,4(sp)
    db1c:	dc000017 	ldw	r16,0(sp)
    db20:	dec00304 	addi	sp,sp,12
    db24:	f800283a 	ret
    db28:	80c00017 	ldw	r3,0(r16)
    db2c:	183ff926 	beq	r3,zero,db14 <__alt_mem_Flash_flash_data+0xf400db14>
    db30:	88c00015 	stw	r3,0(r17)
    db34:	003ff706 	br	db14 <__alt_mem_Flash_flash_data+0xf400db14>

0000db38 <_close_r>:
    db38:	defffd04 	addi	sp,sp,-12
    db3c:	dc000015 	stw	r16,0(sp)
    db40:	040000b4 	movhi	r16,2
    db44:	dc400115 	stw	r17,4(sp)
    db48:	840f4f04 	addi	r16,r16,15676
    db4c:	2023883a 	mov	r17,r4
    db50:	2809883a 	mov	r4,r5
    db54:	dfc00215 	stw	ra,8(sp)
    db58:	80000015 	stw	zero,0(r16)
    db5c:	00116a00 	call	116a0 <close>
    db60:	00ffffc4 	movi	r3,-1
    db64:	10c00526 	beq	r2,r3,db7c <_close_r+0x44>
    db68:	dfc00217 	ldw	ra,8(sp)
    db6c:	dc400117 	ldw	r17,4(sp)
    db70:	dc000017 	ldw	r16,0(sp)
    db74:	dec00304 	addi	sp,sp,12
    db78:	f800283a 	ret
    db7c:	80c00017 	ldw	r3,0(r16)
    db80:	183ff926 	beq	r3,zero,db68 <__alt_mem_Flash_flash_data+0xf400db68>
    db84:	88c00015 	stw	r3,0(r17)
    db88:	003ff706 	br	db68 <__alt_mem_Flash_flash_data+0xf400db68>

0000db8c <_calloc_r>:
    db8c:	298b383a 	mul	r5,r5,r6
    db90:	defffe04 	addi	sp,sp,-8
    db94:	dc000015 	stw	r16,0(sp)
    db98:	dfc00115 	stw	ra,4(sp)
    db9c:	00091e40 	call	91e4 <_malloc_r>
    dba0:	1021883a 	mov	r16,r2
    dba4:	10002826 	beq	r2,zero,dc48 <_calloc_r+0xbc>
    dba8:	11bfff17 	ldw	r6,-4(r2)
    dbac:	00bfff04 	movi	r2,-4
    dbb0:	00c00904 	movi	r3,36
    dbb4:	308c703a 	and	r6,r6,r2
    dbb8:	308d883a 	add	r6,r6,r2
    dbbc:	19801436 	bltu	r3,r6,dc10 <_calloc_r+0x84>
    dbc0:	008004c4 	movi	r2,19
    dbc4:	11800936 	bltu	r2,r6,dbec <_calloc_r+0x60>
    dbc8:	8005883a 	mov	r2,r16
    dbcc:	10000015 	stw	zero,0(r2)
    dbd0:	10000115 	stw	zero,4(r2)
    dbd4:	10000215 	stw	zero,8(r2)
    dbd8:	8005883a 	mov	r2,r16
    dbdc:	dfc00117 	ldw	ra,4(sp)
    dbe0:	dc000017 	ldw	r16,0(sp)
    dbe4:	dec00204 	addi	sp,sp,8
    dbe8:	f800283a 	ret
    dbec:	80000015 	stw	zero,0(r16)
    dbf0:	80000115 	stw	zero,4(r16)
    dbf4:	008006c4 	movi	r2,27
    dbf8:	11800d2e 	bgeu	r2,r6,dc30 <_calloc_r+0xa4>
    dbfc:	80000215 	stw	zero,8(r16)
    dc00:	80000315 	stw	zero,12(r16)
    dc04:	30c00c26 	beq	r6,r3,dc38 <_calloc_r+0xac>
    dc08:	80800404 	addi	r2,r16,16
    dc0c:	003fef06 	br	dbcc <__alt_mem_Flash_flash_data+0xf400dbcc>
    dc10:	8009883a 	mov	r4,r16
    dc14:	000b883a 	mov	r5,zero
    dc18:	0001fa80 	call	1fa8 <memset>
    dc1c:	8005883a 	mov	r2,r16
    dc20:	dfc00117 	ldw	ra,4(sp)
    dc24:	dc000017 	ldw	r16,0(sp)
    dc28:	dec00204 	addi	sp,sp,8
    dc2c:	f800283a 	ret
    dc30:	80800204 	addi	r2,r16,8
    dc34:	003fe506 	br	dbcc <__alt_mem_Flash_flash_data+0xf400dbcc>
    dc38:	80000415 	stw	zero,16(r16)
    dc3c:	80800604 	addi	r2,r16,24
    dc40:	80000515 	stw	zero,20(r16)
    dc44:	003fe106 	br	dbcc <__alt_mem_Flash_flash_data+0xf400dbcc>
    dc48:	0005883a 	mov	r2,zero
    dc4c:	003fe306 	br	dbdc <__alt_mem_Flash_flash_data+0xf400dbdc>

0000dc50 <_fclose_r>:
    dc50:	28003926 	beq	r5,zero,dd38 <_fclose_r+0xe8>
    dc54:	defffc04 	addi	sp,sp,-16
    dc58:	dc400115 	stw	r17,4(sp)
    dc5c:	dc000015 	stw	r16,0(sp)
    dc60:	dfc00315 	stw	ra,12(sp)
    dc64:	dc800215 	stw	r18,8(sp)
    dc68:	2023883a 	mov	r17,r4
    dc6c:	2821883a 	mov	r16,r5
    dc70:	20000226 	beq	r4,zero,dc7c <_fclose_r+0x2c>
    dc74:	20800e17 	ldw	r2,56(r4)
    dc78:	10002726 	beq	r2,zero,dd18 <_fclose_r+0xc8>
    dc7c:	8080030f 	ldh	r2,12(r16)
    dc80:	1000071e 	bne	r2,zero,dca0 <_fclose_r+0x50>
    dc84:	0005883a 	mov	r2,zero
    dc88:	dfc00317 	ldw	ra,12(sp)
    dc8c:	dc800217 	ldw	r18,8(sp)
    dc90:	dc400117 	ldw	r17,4(sp)
    dc94:	dc000017 	ldw	r16,0(sp)
    dc98:	dec00404 	addi	sp,sp,16
    dc9c:	f800283a 	ret
    dca0:	8809883a 	mov	r4,r17
    dca4:	800b883a 	mov	r5,r16
    dca8:	0007ebc0 	call	7ebc <__sflush_r>
    dcac:	1025883a 	mov	r18,r2
    dcb0:	80800b17 	ldw	r2,44(r16)
    dcb4:	10000426 	beq	r2,zero,dcc8 <_fclose_r+0x78>
    dcb8:	81400717 	ldw	r5,28(r16)
    dcbc:	8809883a 	mov	r4,r17
    dcc0:	103ee83a 	callr	r2
    dcc4:	10001616 	blt	r2,zero,dd20 <_fclose_r+0xd0>
    dcc8:	8080030b 	ldhu	r2,12(r16)
    dccc:	1080200c 	andi	r2,r2,128
    dcd0:	1000151e 	bne	r2,zero,dd28 <_fclose_r+0xd8>
    dcd4:	81400c17 	ldw	r5,48(r16)
    dcd8:	28000526 	beq	r5,zero,dcf0 <_fclose_r+0xa0>
    dcdc:	80801004 	addi	r2,r16,64
    dce0:	28800226 	beq	r5,r2,dcec <_fclose_r+0x9c>
    dce4:	8809883a 	mov	r4,r17
    dce8:	00086140 	call	8614 <_free_r>
    dcec:	80000c15 	stw	zero,48(r16)
    dcf0:	81401117 	ldw	r5,68(r16)
    dcf4:	28000326 	beq	r5,zero,dd04 <_fclose_r+0xb4>
    dcf8:	8809883a 	mov	r4,r17
    dcfc:	00086140 	call	8614 <_free_r>
    dd00:	80001115 	stw	zero,68(r16)
    dd04:	00084b00 	call	84b0 <__sfp_lock_acquire>
    dd08:	8000030d 	sth	zero,12(r16)
    dd0c:	00084b40 	call	84b4 <__sfp_lock_release>
    dd10:	9005883a 	mov	r2,r18
    dd14:	003fdc06 	br	dc88 <__alt_mem_Flash_flash_data+0xf400dc88>
    dd18:	00084a00 	call	84a0 <__sinit>
    dd1c:	003fd706 	br	dc7c <__alt_mem_Flash_flash_data+0xf400dc7c>
    dd20:	04bfffc4 	movi	r18,-1
    dd24:	003fe806 	br	dcc8 <__alt_mem_Flash_flash_data+0xf400dcc8>
    dd28:	81400417 	ldw	r5,16(r16)
    dd2c:	8809883a 	mov	r4,r17
    dd30:	00086140 	call	8614 <_free_r>
    dd34:	003fe706 	br	dcd4 <__alt_mem_Flash_flash_data+0xf400dcd4>
    dd38:	0005883a 	mov	r2,zero
    dd3c:	f800283a 	ret

0000dd40 <fclose>:
    dd40:	008000b4 	movhi	r2,2
    dd44:	10867e04 	addi	r2,r2,6648
    dd48:	200b883a 	mov	r5,r4
    dd4c:	11000017 	ldw	r4,0(r2)
    dd50:	000dc501 	jmpi	dc50 <_fclose_r>

0000dd54 <_fputwc_r>:
    dd54:	3080030b 	ldhu	r2,12(r6)
    dd58:	defff804 	addi	sp,sp,-32
    dd5c:	dcc00415 	stw	r19,16(sp)
    dd60:	dc800315 	stw	r18,12(sp)
    dd64:	dc000115 	stw	r16,4(sp)
    dd68:	dfc00715 	stw	ra,28(sp)
    dd6c:	dd400615 	stw	r21,24(sp)
    dd70:	dd000515 	stw	r20,20(sp)
    dd74:	dc400215 	stw	r17,8(sp)
    dd78:	10c8000c 	andi	r3,r2,8192
    dd7c:	3021883a 	mov	r16,r6
    dd80:	2027883a 	mov	r19,r4
    dd84:	2825883a 	mov	r18,r5
    dd88:	1800051e 	bne	r3,zero,dda0 <_fputwc_r+0x4c>
    dd8c:	30c01917 	ldw	r3,100(r6)
    dd90:	10880014 	ori	r2,r2,8192
    dd94:	3080030d 	sth	r2,12(r6)
    dd98:	18880014 	ori	r2,r3,8192
    dd9c:	30801915 	stw	r2,100(r6)
    dda0:	0008fd40 	call	8fd4 <__locale_mb_cur_max>
    dda4:	00c00044 	movi	r3,1
    dda8:	10c03e26 	beq	r2,r3,dea4 <_fputwc_r+0x150>
    ddac:	9809883a 	mov	r4,r19
    ddb0:	d80b883a 	mov	r5,sp
    ddb4:	900d883a 	mov	r6,r18
    ddb8:	81c01704 	addi	r7,r16,92
    ddbc:	000e1ec0 	call	e1ec <_wcrtomb_r>
    ddc0:	1029883a 	mov	r20,r2
    ddc4:	00bfffc4 	movi	r2,-1
    ddc8:	a0802026 	beq	r20,r2,de4c <_fputwc_r+0xf8>
    ddcc:	d9400003 	ldbu	r5,0(sp)
    ddd0:	a0001c26 	beq	r20,zero,de44 <_fputwc_r+0xf0>
    ddd4:	0023883a 	mov	r17,zero
    ddd8:	05400284 	movi	r21,10
    dddc:	00000906 	br	de04 <_fputwc_r+0xb0>
    dde0:	80800017 	ldw	r2,0(r16)
    dde4:	11400005 	stb	r5,0(r2)
    dde8:	80c00017 	ldw	r3,0(r16)
    ddec:	18c00044 	addi	r3,r3,1
    ddf0:	80c00015 	stw	r3,0(r16)
    ddf4:	8c400044 	addi	r17,r17,1
    ddf8:	dc45883a 	add	r2,sp,r17
    ddfc:	8d00112e 	bgeu	r17,r20,de44 <_fputwc_r+0xf0>
    de00:	11400003 	ldbu	r5,0(r2)
    de04:	80c00217 	ldw	r3,8(r16)
    de08:	18ffffc4 	addi	r3,r3,-1
    de0c:	80c00215 	stw	r3,8(r16)
    de10:	183ff30e 	bge	r3,zero,dde0 <__alt_mem_Flash_flash_data+0xf400dde0>
    de14:	80800617 	ldw	r2,24(r16)
    de18:	18801916 	blt	r3,r2,de80 <_fputwc_r+0x12c>
    de1c:	80800017 	ldw	r2,0(r16)
    de20:	11400005 	stb	r5,0(r2)
    de24:	80800017 	ldw	r2,0(r16)
    de28:	10c00003 	ldbu	r3,0(r2)
    de2c:	10800044 	addi	r2,r2,1
    de30:	1d402326 	beq	r3,r21,dec0 <_fputwc_r+0x16c>
    de34:	80800015 	stw	r2,0(r16)
    de38:	8c400044 	addi	r17,r17,1
    de3c:	dc45883a 	add	r2,sp,r17
    de40:	8d3fef36 	bltu	r17,r20,de00 <__alt_mem_Flash_flash_data+0xf400de00>
    de44:	9005883a 	mov	r2,r18
    de48:	00000406 	br	de5c <_fputwc_r+0x108>
    de4c:	80c0030b 	ldhu	r3,12(r16)
    de50:	a005883a 	mov	r2,r20
    de54:	18c01014 	ori	r3,r3,64
    de58:	80c0030d 	sth	r3,12(r16)
    de5c:	dfc00717 	ldw	ra,28(sp)
    de60:	dd400617 	ldw	r21,24(sp)
    de64:	dd000517 	ldw	r20,20(sp)
    de68:	dcc00417 	ldw	r19,16(sp)
    de6c:	dc800317 	ldw	r18,12(sp)
    de70:	dc400217 	ldw	r17,8(sp)
    de74:	dc000117 	ldw	r16,4(sp)
    de78:	dec00804 	addi	sp,sp,32
    de7c:	f800283a 	ret
    de80:	9809883a 	mov	r4,r19
    de84:	29403fcc 	andi	r5,r5,255
    de88:	800d883a 	mov	r6,r16
    de8c:	000e0980 	call	e098 <__swbuf_r>
    de90:	10bfffe0 	cmpeqi	r2,r2,-1
    de94:	10803fcc 	andi	r2,r2,255
    de98:	103fd626 	beq	r2,zero,ddf4 <__alt_mem_Flash_flash_data+0xf400ddf4>
    de9c:	00bfffc4 	movi	r2,-1
    dea0:	003fee06 	br	de5c <__alt_mem_Flash_flash_data+0xf400de5c>
    dea4:	90ffffc4 	addi	r3,r18,-1
    dea8:	01003f84 	movi	r4,254
    deac:	20ffbf36 	bltu	r4,r3,ddac <__alt_mem_Flash_flash_data+0xf400ddac>
    deb0:	900b883a 	mov	r5,r18
    deb4:	dc800005 	stb	r18,0(sp)
    deb8:	1029883a 	mov	r20,r2
    debc:	003fc506 	br	ddd4 <__alt_mem_Flash_flash_data+0xf400ddd4>
    dec0:	9809883a 	mov	r4,r19
    dec4:	a80b883a 	mov	r5,r21
    dec8:	800d883a 	mov	r6,r16
    decc:	000e0980 	call	e098 <__swbuf_r>
    ded0:	10bfffe0 	cmpeqi	r2,r2,-1
    ded4:	003fef06 	br	de94 <__alt_mem_Flash_flash_data+0xf400de94>

0000ded8 <fputwc>:
    ded8:	008000b4 	movhi	r2,2
    dedc:	defffc04 	addi	sp,sp,-16
    dee0:	10867e04 	addi	r2,r2,6648
    dee4:	dc000115 	stw	r16,4(sp)
    dee8:	14000017 	ldw	r16,0(r2)
    deec:	dc400215 	stw	r17,8(sp)
    def0:	dfc00315 	stw	ra,12(sp)
    def4:	2023883a 	mov	r17,r4
    def8:	280d883a 	mov	r6,r5
    defc:	80000626 	beq	r16,zero,df18 <fputwc+0x40>
    df00:	80800e17 	ldw	r2,56(r16)
    df04:	1000041e 	bne	r2,zero,df18 <fputwc+0x40>
    df08:	8009883a 	mov	r4,r16
    df0c:	d9400015 	stw	r5,0(sp)
    df10:	00084a00 	call	84a0 <__sinit>
    df14:	d9800017 	ldw	r6,0(sp)
    df18:	8009883a 	mov	r4,r16
    df1c:	880b883a 	mov	r5,r17
    df20:	dfc00317 	ldw	ra,12(sp)
    df24:	dc400217 	ldw	r17,8(sp)
    df28:	dc000117 	ldw	r16,4(sp)
    df2c:	dec00404 	addi	sp,sp,16
    df30:	000dd541 	jmpi	dd54 <_fputwc_r>

0000df34 <_fstat_r>:
    df34:	defffd04 	addi	sp,sp,-12
    df38:	dc000015 	stw	r16,0(sp)
    df3c:	040000b4 	movhi	r16,2
    df40:	dc400115 	stw	r17,4(sp)
    df44:	840f4f04 	addi	r16,r16,15676
    df48:	2023883a 	mov	r17,r4
    df4c:	2809883a 	mov	r4,r5
    df50:	300b883a 	mov	r5,r6
    df54:	dfc00215 	stw	ra,8(sp)
    df58:	80000015 	stw	zero,0(r16)
    df5c:	00117ec0 	call	117ec <fstat>
    df60:	00ffffc4 	movi	r3,-1
    df64:	10c00526 	beq	r2,r3,df7c <_fstat_r+0x48>
    df68:	dfc00217 	ldw	ra,8(sp)
    df6c:	dc400117 	ldw	r17,4(sp)
    df70:	dc000017 	ldw	r16,0(sp)
    df74:	dec00304 	addi	sp,sp,12
    df78:	f800283a 	ret
    df7c:	80c00017 	ldw	r3,0(r16)
    df80:	183ff926 	beq	r3,zero,df68 <__alt_mem_Flash_flash_data+0xf400df68>
    df84:	88c00015 	stw	r3,0(r17)
    df88:	003ff706 	br	df68 <__alt_mem_Flash_flash_data+0xf400df68>

0000df8c <_isatty_r>:
    df8c:	defffd04 	addi	sp,sp,-12
    df90:	dc000015 	stw	r16,0(sp)
    df94:	040000b4 	movhi	r16,2
    df98:	dc400115 	stw	r17,4(sp)
    df9c:	840f4f04 	addi	r16,r16,15676
    dfa0:	2023883a 	mov	r17,r4
    dfa4:	2809883a 	mov	r4,r5
    dfa8:	dfc00215 	stw	ra,8(sp)
    dfac:	80000015 	stw	zero,0(r16)
    dfb0:	00118ec0 	call	118ec <isatty>
    dfb4:	00ffffc4 	movi	r3,-1
    dfb8:	10c00526 	beq	r2,r3,dfd0 <_isatty_r+0x44>
    dfbc:	dfc00217 	ldw	ra,8(sp)
    dfc0:	dc400117 	ldw	r17,4(sp)
    dfc4:	dc000017 	ldw	r16,0(sp)
    dfc8:	dec00304 	addi	sp,sp,12
    dfcc:	f800283a 	ret
    dfd0:	80c00017 	ldw	r3,0(r16)
    dfd4:	183ff926 	beq	r3,zero,dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    dfd8:	88c00015 	stw	r3,0(r17)
    dfdc:	003ff706 	br	dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>

0000dfe0 <_lseek_r>:
    dfe0:	defffd04 	addi	sp,sp,-12
    dfe4:	dc000015 	stw	r16,0(sp)
    dfe8:	040000b4 	movhi	r16,2
    dfec:	dc400115 	stw	r17,4(sp)
    dff0:	840f4f04 	addi	r16,r16,15676
    dff4:	2023883a 	mov	r17,r4
    dff8:	2809883a 	mov	r4,r5
    dffc:	300b883a 	mov	r5,r6
    e000:	380d883a 	mov	r6,r7
    e004:	dfc00215 	stw	ra,8(sp)
    e008:	80000015 	stw	zero,0(r16)
    e00c:	0011ac40 	call	11ac4 <lseek>
    e010:	00ffffc4 	movi	r3,-1
    e014:	10c00526 	beq	r2,r3,e02c <_lseek_r+0x4c>
    e018:	dfc00217 	ldw	ra,8(sp)
    e01c:	dc400117 	ldw	r17,4(sp)
    e020:	dc000017 	ldw	r16,0(sp)
    e024:	dec00304 	addi	sp,sp,12
    e028:	f800283a 	ret
    e02c:	80c00017 	ldw	r3,0(r16)
    e030:	183ff926 	beq	r3,zero,e018 <__alt_mem_Flash_flash_data+0xf400e018>
    e034:	88c00015 	stw	r3,0(r17)
    e038:	003ff706 	br	e018 <__alt_mem_Flash_flash_data+0xf400e018>

0000e03c <_read_r>:
    e03c:	defffd04 	addi	sp,sp,-12
    e040:	dc000015 	stw	r16,0(sp)
    e044:	040000b4 	movhi	r16,2
    e048:	dc400115 	stw	r17,4(sp)
    e04c:	840f4f04 	addi	r16,r16,15676
    e050:	2023883a 	mov	r17,r4
    e054:	2809883a 	mov	r4,r5
    e058:	300b883a 	mov	r5,r6
    e05c:	380d883a 	mov	r6,r7
    e060:	dfc00215 	stw	ra,8(sp)
    e064:	80000015 	stw	zero,0(r16)
    e068:	0011cbc0 	call	11cbc <read>
    e06c:	00ffffc4 	movi	r3,-1
    e070:	10c00526 	beq	r2,r3,e088 <_read_r+0x4c>
    e074:	dfc00217 	ldw	ra,8(sp)
    e078:	dc400117 	ldw	r17,4(sp)
    e07c:	dc000017 	ldw	r16,0(sp)
    e080:	dec00304 	addi	sp,sp,12
    e084:	f800283a 	ret
    e088:	80c00017 	ldw	r3,0(r16)
    e08c:	183ff926 	beq	r3,zero,e074 <__alt_mem_Flash_flash_data+0xf400e074>
    e090:	88c00015 	stw	r3,0(r17)
    e094:	003ff706 	br	e074 <__alt_mem_Flash_flash_data+0xf400e074>

0000e098 <__swbuf_r>:
    e098:	defffc04 	addi	sp,sp,-16
    e09c:	dc800215 	stw	r18,8(sp)
    e0a0:	dc400115 	stw	r17,4(sp)
    e0a4:	dc000015 	stw	r16,0(sp)
    e0a8:	dfc00315 	stw	ra,12(sp)
    e0ac:	2025883a 	mov	r18,r4
    e0b0:	2823883a 	mov	r17,r5
    e0b4:	3021883a 	mov	r16,r6
    e0b8:	20000226 	beq	r4,zero,e0c4 <__swbuf_r+0x2c>
    e0bc:	20800e17 	ldw	r2,56(r4)
    e0c0:	10004126 	beq	r2,zero,e1c8 <__swbuf_r+0x130>
    e0c4:	80c00617 	ldw	r3,24(r16)
    e0c8:	8180030b 	ldhu	r6,12(r16)
    e0cc:	80c00215 	stw	r3,8(r16)
    e0d0:	30c0020c 	andi	r3,r6,8
    e0d4:	18003526 	beq	r3,zero,e1ac <__swbuf_r+0x114>
    e0d8:	80c00417 	ldw	r3,16(r16)
    e0dc:	18003326 	beq	r3,zero,e1ac <__swbuf_r+0x114>
    e0e0:	3088000c 	andi	r2,r6,8192
    e0e4:	8c403fcc 	andi	r17,r17,255
    e0e8:	10001726 	beq	r2,zero,e148 <__swbuf_r+0xb0>
    e0ec:	80800017 	ldw	r2,0(r16)
    e0f0:	81000517 	ldw	r4,20(r16)
    e0f4:	10c7c83a 	sub	r3,r2,r3
    e0f8:	19001d0e 	bge	r3,r4,e170 <__swbuf_r+0xd8>
    e0fc:	18c00044 	addi	r3,r3,1
    e100:	81400217 	ldw	r5,8(r16)
    e104:	11000044 	addi	r4,r2,1
    e108:	81000015 	stw	r4,0(r16)
    e10c:	297fffc4 	addi	r5,r5,-1
    e110:	81400215 	stw	r5,8(r16)
    e114:	14400005 	stb	r17,0(r2)
    e118:	80800517 	ldw	r2,20(r16)
    e11c:	10c01d26 	beq	r2,r3,e194 <__swbuf_r+0xfc>
    e120:	8080030b 	ldhu	r2,12(r16)
    e124:	1080004c 	andi	r2,r2,1
    e128:	1000181e 	bne	r2,zero,e18c <__swbuf_r+0xf4>
    e12c:	8805883a 	mov	r2,r17
    e130:	dfc00317 	ldw	ra,12(sp)
    e134:	dc800217 	ldw	r18,8(sp)
    e138:	dc400117 	ldw	r17,4(sp)
    e13c:	dc000017 	ldw	r16,0(sp)
    e140:	dec00404 	addi	sp,sp,16
    e144:	f800283a 	ret
    e148:	81001917 	ldw	r4,100(r16)
    e14c:	00b7ffc4 	movi	r2,-8193
    e150:	31880014 	ori	r6,r6,8192
    e154:	2084703a 	and	r2,r4,r2
    e158:	80801915 	stw	r2,100(r16)
    e15c:	80800017 	ldw	r2,0(r16)
    e160:	81000517 	ldw	r4,20(r16)
    e164:	8180030d 	sth	r6,12(r16)
    e168:	10c7c83a 	sub	r3,r2,r3
    e16c:	193fe316 	blt	r3,r4,e0fc <__alt_mem_Flash_flash_data+0xf400e0fc>
    e170:	9009883a 	mov	r4,r18
    e174:	800b883a 	mov	r5,r16
    e178:	00080c40 	call	80c4 <_fflush_r>
    e17c:	1000091e 	bne	r2,zero,e1a4 <__swbuf_r+0x10c>
    e180:	80800017 	ldw	r2,0(r16)
    e184:	00c00044 	movi	r3,1
    e188:	003fdd06 	br	e100 <__alt_mem_Flash_flash_data+0xf400e100>
    e18c:	00800284 	movi	r2,10
    e190:	88bfe61e 	bne	r17,r2,e12c <__alt_mem_Flash_flash_data+0xf400e12c>
    e194:	9009883a 	mov	r4,r18
    e198:	800b883a 	mov	r5,r16
    e19c:	00080c40 	call	80c4 <_fflush_r>
    e1a0:	103fe226 	beq	r2,zero,e12c <__alt_mem_Flash_flash_data+0xf400e12c>
    e1a4:	00bfffc4 	movi	r2,-1
    e1a8:	003fe106 	br	e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e1ac:	9009883a 	mov	r4,r18
    e1b0:	800b883a 	mov	r5,r16
    e1b4:	00064400 	call	6440 <__swsetup_r>
    e1b8:	103ffa1e 	bne	r2,zero,e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    e1bc:	8180030b 	ldhu	r6,12(r16)
    e1c0:	80c00417 	ldw	r3,16(r16)
    e1c4:	003fc606 	br	e0e0 <__alt_mem_Flash_flash_data+0xf400e0e0>
    e1c8:	00084a00 	call	84a0 <__sinit>
    e1cc:	003fbd06 	br	e0c4 <__alt_mem_Flash_flash_data+0xf400e0c4>

0000e1d0 <__swbuf>:
    e1d0:	00c000b4 	movhi	r3,2
    e1d4:	18c67e04 	addi	r3,r3,6648
    e1d8:	2005883a 	mov	r2,r4
    e1dc:	19000017 	ldw	r4,0(r3)
    e1e0:	280d883a 	mov	r6,r5
    e1e4:	100b883a 	mov	r5,r2
    e1e8:	000e0981 	jmpi	e098 <__swbuf_r>

0000e1ec <_wcrtomb_r>:
    e1ec:	defff604 	addi	sp,sp,-40
    e1f0:	008000b4 	movhi	r2,2
    e1f4:	dc800815 	stw	r18,32(sp)
    e1f8:	dc400715 	stw	r17,28(sp)
    e1fc:	dc000615 	stw	r16,24(sp)
    e200:	10868204 	addi	r2,r2,6664
    e204:	dfc00915 	stw	ra,36(sp)
    e208:	2021883a 	mov	r16,r4
    e20c:	3823883a 	mov	r17,r7
    e210:	14800017 	ldw	r18,0(r2)
    e214:	28001426 	beq	r5,zero,e268 <_wcrtomb_r+0x7c>
    e218:	d9400415 	stw	r5,16(sp)
    e21c:	d9800515 	stw	r6,20(sp)
    e220:	0008fc80 	call	8fc8 <__locale_charset>
    e224:	d9400417 	ldw	r5,16(sp)
    e228:	d9800517 	ldw	r6,20(sp)
    e22c:	8009883a 	mov	r4,r16
    e230:	dc400015 	stw	r17,0(sp)
    e234:	100f883a 	mov	r7,r2
    e238:	903ee83a 	callr	r18
    e23c:	00ffffc4 	movi	r3,-1
    e240:	10c0031e 	bne	r2,r3,e250 <_wcrtomb_r+0x64>
    e244:	88000015 	stw	zero,0(r17)
    e248:	00c02284 	movi	r3,138
    e24c:	80c00015 	stw	r3,0(r16)
    e250:	dfc00917 	ldw	ra,36(sp)
    e254:	dc800817 	ldw	r18,32(sp)
    e258:	dc400717 	ldw	r17,28(sp)
    e25c:	dc000617 	ldw	r16,24(sp)
    e260:	dec00a04 	addi	sp,sp,40
    e264:	f800283a 	ret
    e268:	0008fc80 	call	8fc8 <__locale_charset>
    e26c:	8009883a 	mov	r4,r16
    e270:	dc400015 	stw	r17,0(sp)
    e274:	d9400104 	addi	r5,sp,4
    e278:	000d883a 	mov	r6,zero
    e27c:	100f883a 	mov	r7,r2
    e280:	903ee83a 	callr	r18
    e284:	003fed06 	br	e23c <__alt_mem_Flash_flash_data+0xf400e23c>

0000e288 <wcrtomb>:
    e288:	defff604 	addi	sp,sp,-40
    e28c:	008000b4 	movhi	r2,2
    e290:	dc800615 	stw	r18,24(sp)
    e294:	dc400515 	stw	r17,20(sp)
    e298:	dc000415 	stw	r16,16(sp)
    e29c:	10867e04 	addi	r2,r2,6648
    e2a0:	dfc00915 	stw	ra,36(sp)
    e2a4:	dd000815 	stw	r20,32(sp)
    e2a8:	dcc00715 	stw	r19,28(sp)
    e2ac:	2021883a 	mov	r16,r4
    e2b0:	3025883a 	mov	r18,r6
    e2b4:	14400017 	ldw	r17,0(r2)
    e2b8:	20001826 	beq	r4,zero,e31c <wcrtomb+0x94>
    e2bc:	008000b4 	movhi	r2,2
    e2c0:	10868204 	addi	r2,r2,6664
    e2c4:	15000017 	ldw	r20,0(r2)
    e2c8:	2827883a 	mov	r19,r5
    e2cc:	0008fc80 	call	8fc8 <__locale_charset>
    e2d0:	8809883a 	mov	r4,r17
    e2d4:	dc800015 	stw	r18,0(sp)
    e2d8:	800b883a 	mov	r5,r16
    e2dc:	980d883a 	mov	r6,r19
    e2e0:	100f883a 	mov	r7,r2
    e2e4:	a03ee83a 	callr	r20
    e2e8:	00ffffc4 	movi	r3,-1
    e2ec:	10c0031e 	bne	r2,r3,e2fc <wcrtomb+0x74>
    e2f0:	90000015 	stw	zero,0(r18)
    e2f4:	00c02284 	movi	r3,138
    e2f8:	88c00015 	stw	r3,0(r17)
    e2fc:	dfc00917 	ldw	ra,36(sp)
    e300:	dd000817 	ldw	r20,32(sp)
    e304:	dcc00717 	ldw	r19,28(sp)
    e308:	dc800617 	ldw	r18,24(sp)
    e30c:	dc400517 	ldw	r17,20(sp)
    e310:	dc000417 	ldw	r16,16(sp)
    e314:	dec00a04 	addi	sp,sp,40
    e318:	f800283a 	ret
    e31c:	008000b4 	movhi	r2,2
    e320:	10868204 	addi	r2,r2,6664
    e324:	14000017 	ldw	r16,0(r2)
    e328:	0008fc80 	call	8fc8 <__locale_charset>
    e32c:	8809883a 	mov	r4,r17
    e330:	dc800015 	stw	r18,0(sp)
    e334:	d9400104 	addi	r5,sp,4
    e338:	000d883a 	mov	r6,zero
    e33c:	100f883a 	mov	r7,r2
    e340:	803ee83a 	callr	r16
    e344:	003fe806 	br	e2e8 <__alt_mem_Flash_flash_data+0xf400e2e8>

0000e348 <__ascii_wctomb>:
    e348:	28000526 	beq	r5,zero,e360 <__ascii_wctomb+0x18>
    e34c:	00803fc4 	movi	r2,255
    e350:	11800536 	bltu	r2,r6,e368 <__ascii_wctomb+0x20>
    e354:	29800005 	stb	r6,0(r5)
    e358:	00800044 	movi	r2,1
    e35c:	f800283a 	ret
    e360:	0005883a 	mov	r2,zero
    e364:	f800283a 	ret
    e368:	00802284 	movi	r2,138
    e36c:	20800015 	stw	r2,0(r4)
    e370:	00bfffc4 	movi	r2,-1
    e374:	f800283a 	ret

0000e378 <_wctomb_r>:
    e378:	008000b4 	movhi	r2,2
    e37c:	defff904 	addi	sp,sp,-28
    e380:	10868204 	addi	r2,r2,6664
    e384:	dfc00615 	stw	ra,24(sp)
    e388:	dc400515 	stw	r17,20(sp)
    e38c:	dc000415 	stw	r16,16(sp)
    e390:	3823883a 	mov	r17,r7
    e394:	14000017 	ldw	r16,0(r2)
    e398:	d9000115 	stw	r4,4(sp)
    e39c:	d9400215 	stw	r5,8(sp)
    e3a0:	d9800315 	stw	r6,12(sp)
    e3a4:	0008fc80 	call	8fc8 <__locale_charset>
    e3a8:	d9000117 	ldw	r4,4(sp)
    e3ac:	d9400217 	ldw	r5,8(sp)
    e3b0:	d9800317 	ldw	r6,12(sp)
    e3b4:	dc400015 	stw	r17,0(sp)
    e3b8:	100f883a 	mov	r7,r2
    e3bc:	803ee83a 	callr	r16
    e3c0:	dfc00617 	ldw	ra,24(sp)
    e3c4:	dc400517 	ldw	r17,20(sp)
    e3c8:	dc000417 	ldw	r16,16(sp)
    e3cc:	dec00704 	addi	sp,sp,28
    e3d0:	f800283a 	ret

0000e3d4 <__udivdi3>:
    e3d4:	defff504 	addi	sp,sp,-44
    e3d8:	dcc00415 	stw	r19,16(sp)
    e3dc:	dc000115 	stw	r16,4(sp)
    e3e0:	dfc00a15 	stw	ra,40(sp)
    e3e4:	df000915 	stw	fp,36(sp)
    e3e8:	ddc00815 	stw	r23,32(sp)
    e3ec:	dd800715 	stw	r22,28(sp)
    e3f0:	dd400615 	stw	r21,24(sp)
    e3f4:	dd000515 	stw	r20,20(sp)
    e3f8:	dc800315 	stw	r18,12(sp)
    e3fc:	dc400215 	stw	r17,8(sp)
    e400:	2027883a 	mov	r19,r4
    e404:	2821883a 	mov	r16,r5
    e408:	3800421e 	bne	r7,zero,e514 <__udivdi3+0x140>
    e40c:	3025883a 	mov	r18,r6
    e410:	2023883a 	mov	r17,r4
    e414:	2980542e 	bgeu	r5,r6,e568 <__udivdi3+0x194>
    e418:	00bfffd4 	movui	r2,65535
    e41c:	282d883a 	mov	r22,r5
    e420:	1180a836 	bltu	r2,r6,e6c4 <__udivdi3+0x2f0>
    e424:	00803fc4 	movi	r2,255
    e428:	1181422e 	bgeu	r2,r6,e934 <__udivdi3+0x560>
    e42c:	00800204 	movi	r2,8
    e430:	1007883a 	mov	r3,r2
    e434:	3084d83a 	srl	r2,r6,r2
    e438:	010000b4 	movhi	r4,2
    e43c:	213c9604 	addi	r4,r4,-3496
    e440:	2085883a 	add	r2,r4,r2
    e444:	10800003 	ldbu	r2,0(r2)
    e448:	10c7883a 	add	r3,r2,r3
    e44c:	00800804 	movi	r2,32
    e450:	10c5c83a 	sub	r2,r2,r3
    e454:	10000526 	beq	r2,zero,e46c <__udivdi3+0x98>
    e458:	80a0983a 	sll	r16,r16,r2
    e45c:	98c6d83a 	srl	r3,r19,r3
    e460:	30a4983a 	sll	r18,r6,r2
    e464:	98a2983a 	sll	r17,r19,r2
    e468:	80ecb03a 	or	r22,r16,r3
    e46c:	902ad43a 	srli	r21,r18,16
    e470:	b009883a 	mov	r4,r22
    e474:	953fffcc 	andi	r20,r18,65535
    e478:	a80b883a 	mov	r5,r21
    e47c:	000f0480 	call	f048 <__umodsi3>
    e480:	b009883a 	mov	r4,r22
    e484:	a80b883a 	mov	r5,r21
    e488:	1027883a 	mov	r19,r2
    e48c:	000f0400 	call	f040 <__udivsi3>
    e490:	1021883a 	mov	r16,r2
    e494:	8806d43a 	srli	r3,r17,16
    e498:	9804943a 	slli	r2,r19,16
    e49c:	8527383a 	mul	r19,r16,r20
    e4a0:	10c4b03a 	or	r2,r2,r3
    e4a4:	14c0052e 	bgeu	r2,r19,e4bc <__udivdi3+0xe8>
    e4a8:	1485883a 	add	r2,r2,r18
    e4ac:	80ffffc4 	addi	r3,r16,-1
    e4b0:	14800136 	bltu	r2,r18,e4b8 <__udivdi3+0xe4>
    e4b4:	14c13436 	bltu	r2,r19,e988 <__udivdi3+0x5b4>
    e4b8:	1821883a 	mov	r16,r3
    e4bc:	14e7c83a 	sub	r19,r2,r19
    e4c0:	9809883a 	mov	r4,r19
    e4c4:	a80b883a 	mov	r5,r21
    e4c8:	000f0480 	call	f048 <__umodsi3>
    e4cc:	102d883a 	mov	r22,r2
    e4d0:	9809883a 	mov	r4,r19
    e4d4:	a80b883a 	mov	r5,r21
    e4d8:	000f0400 	call	f040 <__udivsi3>
    e4dc:	b02c943a 	slli	r22,r22,16
    e4e0:	1529383a 	mul	r20,r2,r20
    e4e4:	8c7fffcc 	andi	r17,r17,65535
    e4e8:	b462b03a 	or	r17,r22,r17
    e4ec:	8d00052e 	bgeu	r17,r20,e504 <__udivdi3+0x130>
    e4f0:	8ca3883a 	add	r17,r17,r18
    e4f4:	10ffffc4 	addi	r3,r2,-1
    e4f8:	8c80f636 	bltu	r17,r18,e8d4 <__udivdi3+0x500>
    e4fc:	8d00f52e 	bgeu	r17,r20,e8d4 <__udivdi3+0x500>
    e500:	10bfff84 	addi	r2,r2,-2
    e504:	8020943a 	slli	r16,r16,16
    e508:	0007883a 	mov	r3,zero
    e50c:	1404b03a 	or	r2,r2,r16
    e510:	00005b06 	br	e680 <__udivdi3+0x2ac>
    e514:	29c05836 	bltu	r5,r7,e678 <__udivdi3+0x2a4>
    e518:	00bfffd4 	movui	r2,65535
    e51c:	11c0642e 	bgeu	r2,r7,e6b0 <__udivdi3+0x2dc>
    e520:	00804034 	movhi	r2,256
    e524:	10bfffc4 	addi	r2,r2,-1
    e528:	11c0f32e 	bgeu	r2,r7,e8f8 <__udivdi3+0x524>
    e52c:	00c00604 	movi	r3,24
    e530:	180b883a 	mov	r5,r3
    e534:	38c6d83a 	srl	r3,r7,r3
    e538:	008000b4 	movhi	r2,2
    e53c:	10bc9604 	addi	r2,r2,-3496
    e540:	10c7883a 	add	r3,r2,r3
    e544:	18c00003 	ldbu	r3,0(r3)
    e548:	01000804 	movi	r4,32
    e54c:	1947883a 	add	r3,r3,r5
    e550:	20e5c83a 	sub	r18,r4,r3
    e554:	9000661e 	bne	r18,zero,e6f0 <__udivdi3+0x31c>
    e558:	3c00f936 	bltu	r7,r16,e940 <__udivdi3+0x56c>
    e55c:	9985403a 	cmpgeu	r2,r19,r6
    e560:	0007883a 	mov	r3,zero
    e564:	00004606 	br	e680 <__udivdi3+0x2ac>
    e568:	3000041e 	bne	r6,zero,e57c <__udivdi3+0x1a8>
    e56c:	01000044 	movi	r4,1
    e570:	000b883a 	mov	r5,zero
    e574:	000f0400 	call	f040 <__udivsi3>
    e578:	1025883a 	mov	r18,r2
    e57c:	00bfffd4 	movui	r2,65535
    e580:	1480562e 	bgeu	r2,r18,e6dc <__udivdi3+0x308>
    e584:	00804034 	movhi	r2,256
    e588:	10bfffc4 	addi	r2,r2,-1
    e58c:	1480e32e 	bgeu	r2,r18,e91c <__udivdi3+0x548>
    e590:	00800604 	movi	r2,24
    e594:	1007883a 	mov	r3,r2
    e598:	9084d83a 	srl	r2,r18,r2
    e59c:	010000b4 	movhi	r4,2
    e5a0:	213c9604 	addi	r4,r4,-3496
    e5a4:	2085883a 	add	r2,r4,r2
    e5a8:	10800003 	ldbu	r2,0(r2)
    e5ac:	10c5883a 	add	r2,r2,r3
    e5b0:	00c00804 	movi	r3,32
    e5b4:	1887c83a 	sub	r3,r3,r2
    e5b8:	1800911e 	bne	r3,zero,e800 <__udivdi3+0x42c>
    e5bc:	9028d43a 	srli	r20,r18,16
    e5c0:	84a1c83a 	sub	r16,r16,r18
    e5c4:	957fffcc 	andi	r21,r18,65535
    e5c8:	00c00044 	movi	r3,1
    e5cc:	8009883a 	mov	r4,r16
    e5d0:	a00b883a 	mov	r5,r20
    e5d4:	d8c00015 	stw	r3,0(sp)
    e5d8:	000f0480 	call	f048 <__umodsi3>
    e5dc:	8009883a 	mov	r4,r16
    e5e0:	a00b883a 	mov	r5,r20
    e5e4:	1027883a 	mov	r19,r2
    e5e8:	000f0400 	call	f040 <__udivsi3>
    e5ec:	1021883a 	mov	r16,r2
    e5f0:	880cd43a 	srli	r6,r17,16
    e5f4:	9804943a 	slli	r2,r19,16
    e5f8:	8567383a 	mul	r19,r16,r21
    e5fc:	d8c00017 	ldw	r3,0(sp)
    e600:	1188b03a 	or	r4,r2,r6
    e604:	24c0052e 	bgeu	r4,r19,e61c <__udivdi3+0x248>
    e608:	2489883a 	add	r4,r4,r18
    e60c:	80bfffc4 	addi	r2,r16,-1
    e610:	24800136 	bltu	r4,r18,e618 <__udivdi3+0x244>
    e614:	24c0d936 	bltu	r4,r19,e97c <__udivdi3+0x5a8>
    e618:	1021883a 	mov	r16,r2
    e61c:	24e7c83a 	sub	r19,r4,r19
    e620:	9809883a 	mov	r4,r19
    e624:	a00b883a 	mov	r5,r20
    e628:	d8c00015 	stw	r3,0(sp)
    e62c:	000f0480 	call	f048 <__umodsi3>
    e630:	102d883a 	mov	r22,r2
    e634:	9809883a 	mov	r4,r19
    e638:	a00b883a 	mov	r5,r20
    e63c:	000f0400 	call	f040 <__udivsi3>
    e640:	b02c943a 	slli	r22,r22,16
    e644:	156b383a 	mul	r21,r2,r21
    e648:	8c7fffcc 	andi	r17,r17,65535
    e64c:	b462b03a 	or	r17,r22,r17
    e650:	d8c00017 	ldw	r3,0(sp)
    e654:	8d40052e 	bgeu	r17,r21,e66c <__udivdi3+0x298>
    e658:	8ca3883a 	add	r17,r17,r18
    e65c:	113fffc4 	addi	r4,r2,-1
    e660:	8c809a36 	bltu	r17,r18,e8cc <__udivdi3+0x4f8>
    e664:	8d40992e 	bgeu	r17,r21,e8cc <__udivdi3+0x4f8>
    e668:	10bfff84 	addi	r2,r2,-2
    e66c:	8020943a 	slli	r16,r16,16
    e670:	1404b03a 	or	r2,r2,r16
    e674:	00000206 	br	e680 <__udivdi3+0x2ac>
    e678:	0007883a 	mov	r3,zero
    e67c:	0005883a 	mov	r2,zero
    e680:	dfc00a17 	ldw	ra,40(sp)
    e684:	df000917 	ldw	fp,36(sp)
    e688:	ddc00817 	ldw	r23,32(sp)
    e68c:	dd800717 	ldw	r22,28(sp)
    e690:	dd400617 	ldw	r21,24(sp)
    e694:	dd000517 	ldw	r20,20(sp)
    e698:	dcc00417 	ldw	r19,16(sp)
    e69c:	dc800317 	ldw	r18,12(sp)
    e6a0:	dc400217 	ldw	r17,8(sp)
    e6a4:	dc000117 	ldw	r16,4(sp)
    e6a8:	dec00b04 	addi	sp,sp,44
    e6ac:	f800283a 	ret
    e6b0:	00803fc4 	movi	r2,255
    e6b4:	11c0932e 	bgeu	r2,r7,e904 <__udivdi3+0x530>
    e6b8:	00c00204 	movi	r3,8
    e6bc:	180b883a 	mov	r5,r3
    e6c0:	003f9c06 	br	e534 <__alt_mem_Flash_flash_data+0xf400e534>
    e6c4:	00804034 	movhi	r2,256
    e6c8:	10bfffc4 	addi	r2,r2,-1
    e6cc:	1180902e 	bgeu	r2,r6,e910 <__udivdi3+0x53c>
    e6d0:	00800604 	movi	r2,24
    e6d4:	1007883a 	mov	r3,r2
    e6d8:	003f5606 	br	e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e6dc:	00803fc4 	movi	r2,255
    e6e0:	1480912e 	bgeu	r2,r18,e928 <__udivdi3+0x554>
    e6e4:	00800204 	movi	r2,8
    e6e8:	1007883a 	mov	r3,r2
    e6ec:	003faa06 	br	e598 <__alt_mem_Flash_flash_data+0xf400e598>
    e6f0:	30eed83a 	srl	r23,r6,r3
    e6f4:	3c8e983a 	sll	r7,r7,r18
    e6f8:	80f8d83a 	srl	fp,r16,r3
    e6fc:	98c6d83a 	srl	r3,r19,r3
    e700:	3deeb03a 	or	r23,r7,r23
    e704:	b828d43a 	srli	r20,r23,16
    e708:	84a0983a 	sll	r16,r16,r18
    e70c:	e009883a 	mov	r4,fp
    e710:	a00b883a 	mov	r5,r20
    e714:	80e2b03a 	or	r17,r16,r3
    e718:	34aa983a 	sll	r21,r6,r18
    e71c:	000f0480 	call	f048 <__umodsi3>
    e720:	e009883a 	mov	r4,fp
    e724:	a00b883a 	mov	r5,r20
    e728:	102d883a 	mov	r22,r2
    e72c:	000f0400 	call	f040 <__udivsi3>
    e730:	1021883a 	mov	r16,r2
    e734:	bf3fffcc 	andi	fp,r23,65535
    e738:	b004943a 	slli	r2,r22,16
    e73c:	8808d43a 	srli	r4,r17,16
    e740:	872d383a 	mul	r22,r16,fp
    e744:	1104b03a 	or	r2,r2,r4
    e748:	1580042e 	bgeu	r2,r22,e75c <__udivdi3+0x388>
    e74c:	15c5883a 	add	r2,r2,r23
    e750:	80ffffc4 	addi	r3,r16,-1
    e754:	15c0812e 	bgeu	r2,r23,e95c <__udivdi3+0x588>
    e758:	1821883a 	mov	r16,r3
    e75c:	15adc83a 	sub	r22,r2,r22
    e760:	b009883a 	mov	r4,r22
    e764:	a00b883a 	mov	r5,r20
    e768:	000f0480 	call	f048 <__umodsi3>
    e76c:	a00b883a 	mov	r5,r20
    e770:	b009883a 	mov	r4,r22
    e774:	d8800015 	stw	r2,0(sp)
    e778:	000f0400 	call	f040 <__udivsi3>
    e77c:	d8c00017 	ldw	r3,0(sp)
    e780:	170b383a 	mul	r5,r2,fp
    e784:	8c7fffcc 	andi	r17,r17,65535
    e788:	1806943a 	slli	r3,r3,16
    e78c:	1c46b03a 	or	r3,r3,r17
    e790:	1940042e 	bgeu	r3,r5,e7a4 <__udivdi3+0x3d0>
    e794:	1dc7883a 	add	r3,r3,r23
    e798:	113fffc4 	addi	r4,r2,-1
    e79c:	1dc06b2e 	bgeu	r3,r23,e94c <__udivdi3+0x578>
    e7a0:	2005883a 	mov	r2,r4
    e7a4:	8020943a 	slli	r16,r16,16
    e7a8:	a9ffffcc 	andi	r7,r21,65535
    e7ac:	a82ad43a 	srli	r21,r21,16
    e7b0:	1404b03a 	or	r2,r2,r16
    e7b4:	113fffcc 	andi	r4,r2,65535
    e7b8:	100cd43a 	srli	r6,r2,16
    e7bc:	21d3383a 	mul	r9,r4,r7
    e7c0:	2549383a 	mul	r4,r4,r21
    e7c4:	31cf383a 	mul	r7,r6,r7
    e7c8:	4810d43a 	srli	r8,r9,16
    e7cc:	1947c83a 	sub	r3,r3,r5
    e7d0:	3909883a 	add	r4,r7,r4
    e7d4:	2209883a 	add	r4,r4,r8
    e7d8:	354d383a 	mul	r6,r6,r21
    e7dc:	21c0022e 	bgeu	r4,r7,e7e8 <__udivdi3+0x414>
    e7e0:	01400074 	movhi	r5,1
    e7e4:	314d883a 	add	r6,r6,r5
    e7e8:	202ad43a 	srli	r21,r4,16
    e7ec:	354d883a 	add	r6,r6,r21
    e7f0:	19803f36 	bltu	r3,r6,e8f0 <__udivdi3+0x51c>
    e7f4:	19803926 	beq	r3,r6,e8dc <__udivdi3+0x508>
    e7f8:	0007883a 	mov	r3,zero
    e7fc:	003fa006 	br	e680 <__alt_mem_Flash_flash_data+0xf400e680>
    e800:	90e4983a 	sll	r18,r18,r3
    e804:	80aad83a 	srl	r21,r16,r2
    e808:	80e0983a 	sll	r16,r16,r3
    e80c:	9028d43a 	srli	r20,r18,16
    e810:	9884d83a 	srl	r2,r19,r2
    e814:	a809883a 	mov	r4,r21
    e818:	a00b883a 	mov	r5,r20
    e81c:	80acb03a 	or	r22,r16,r2
    e820:	98e2983a 	sll	r17,r19,r3
    e824:	000f0480 	call	f048 <__umodsi3>
    e828:	a809883a 	mov	r4,r21
    e82c:	a00b883a 	mov	r5,r20
    e830:	1021883a 	mov	r16,r2
    e834:	000f0400 	call	f040 <__udivsi3>
    e838:	957fffcc 	andi	r21,r18,65535
    e83c:	8020943a 	slli	r16,r16,16
    e840:	b00ad43a 	srli	r5,r22,16
    e844:	1567383a 	mul	r19,r2,r21
    e848:	102f883a 	mov	r23,r2
    e84c:	8148b03a 	or	r4,r16,r5
    e850:	24c0062e 	bgeu	r4,r19,e86c <__udivdi3+0x498>
    e854:	2489883a 	add	r4,r4,r18
    e858:	10bfffc4 	addi	r2,r2,-1
    e85c:	24804536 	bltu	r4,r18,e974 <__udivdi3+0x5a0>
    e860:	24c0442e 	bgeu	r4,r19,e974 <__udivdi3+0x5a0>
    e864:	bdffff84 	addi	r23,r23,-2
    e868:	2489883a 	add	r4,r4,r18
    e86c:	24e7c83a 	sub	r19,r4,r19
    e870:	9809883a 	mov	r4,r19
    e874:	a00b883a 	mov	r5,r20
    e878:	000f0480 	call	f048 <__umodsi3>
    e87c:	1021883a 	mov	r16,r2
    e880:	9809883a 	mov	r4,r19
    e884:	a00b883a 	mov	r5,r20
    e888:	000f0400 	call	f040 <__udivsi3>
    e88c:	8020943a 	slli	r16,r16,16
    e890:	1007883a 	mov	r3,r2
    e894:	1545383a 	mul	r2,r2,r21
    e898:	b13fffcc 	andi	r4,r22,65535
    e89c:	8108b03a 	or	r4,r16,r4
    e8a0:	2080062e 	bgeu	r4,r2,e8bc <__udivdi3+0x4e8>
    e8a4:	2489883a 	add	r4,r4,r18
    e8a8:	197fffc4 	addi	r5,r3,-1
    e8ac:	24802f36 	bltu	r4,r18,e96c <__udivdi3+0x598>
    e8b0:	20802e2e 	bgeu	r4,r2,e96c <__udivdi3+0x598>
    e8b4:	18ffff84 	addi	r3,r3,-2
    e8b8:	2489883a 	add	r4,r4,r18
    e8bc:	b82e943a 	slli	r23,r23,16
    e8c0:	20a1c83a 	sub	r16,r4,r2
    e8c4:	1dc6b03a 	or	r3,r3,r23
    e8c8:	003f4006 	br	e5cc <__alt_mem_Flash_flash_data+0xf400e5cc>
    e8cc:	2005883a 	mov	r2,r4
    e8d0:	003f6606 	br	e66c <__alt_mem_Flash_flash_data+0xf400e66c>
    e8d4:	1805883a 	mov	r2,r3
    e8d8:	003f0a06 	br	e504 <__alt_mem_Flash_flash_data+0xf400e504>
    e8dc:	2006943a 	slli	r3,r4,16
    e8e0:	9c88983a 	sll	r4,r19,r18
    e8e4:	4a7fffcc 	andi	r9,r9,65535
    e8e8:	1a47883a 	add	r3,r3,r9
    e8ec:	20ffc22e 	bgeu	r4,r3,e7f8 <__alt_mem_Flash_flash_data+0xf400e7f8>
    e8f0:	10bfffc4 	addi	r2,r2,-1
    e8f4:	003fc006 	br	e7f8 <__alt_mem_Flash_flash_data+0xf400e7f8>
    e8f8:	00c00404 	movi	r3,16
    e8fc:	180b883a 	mov	r5,r3
    e900:	003f0c06 	br	e534 <__alt_mem_Flash_flash_data+0xf400e534>
    e904:	0007883a 	mov	r3,zero
    e908:	000b883a 	mov	r5,zero
    e90c:	003f0906 	br	e534 <__alt_mem_Flash_flash_data+0xf400e534>
    e910:	00800404 	movi	r2,16
    e914:	1007883a 	mov	r3,r2
    e918:	003ec606 	br	e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e91c:	00800404 	movi	r2,16
    e920:	1007883a 	mov	r3,r2
    e924:	003f1c06 	br	e598 <__alt_mem_Flash_flash_data+0xf400e598>
    e928:	0005883a 	mov	r2,zero
    e92c:	0007883a 	mov	r3,zero
    e930:	003f1906 	br	e598 <__alt_mem_Flash_flash_data+0xf400e598>
    e934:	0005883a 	mov	r2,zero
    e938:	0007883a 	mov	r3,zero
    e93c:	003ebd06 	br	e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e940:	0007883a 	mov	r3,zero
    e944:	00800044 	movi	r2,1
    e948:	003f4d06 	br	e680 <__alt_mem_Flash_flash_data+0xf400e680>
    e94c:	197f942e 	bgeu	r3,r5,e7a0 <__alt_mem_Flash_flash_data+0xf400e7a0>
    e950:	10bfff84 	addi	r2,r2,-2
    e954:	1dc7883a 	add	r3,r3,r23
    e958:	003f9206 	br	e7a4 <__alt_mem_Flash_flash_data+0xf400e7a4>
    e95c:	15bf7e2e 	bgeu	r2,r22,e758 <__alt_mem_Flash_flash_data+0xf400e758>
    e960:	843fff84 	addi	r16,r16,-2
    e964:	15c5883a 	add	r2,r2,r23
    e968:	003f7c06 	br	e75c <__alt_mem_Flash_flash_data+0xf400e75c>
    e96c:	2807883a 	mov	r3,r5
    e970:	003fd206 	br	e8bc <__alt_mem_Flash_flash_data+0xf400e8bc>
    e974:	102f883a 	mov	r23,r2
    e978:	003fbc06 	br	e86c <__alt_mem_Flash_flash_data+0xf400e86c>
    e97c:	843fff84 	addi	r16,r16,-2
    e980:	2489883a 	add	r4,r4,r18
    e984:	003f2506 	br	e61c <__alt_mem_Flash_flash_data+0xf400e61c>
    e988:	843fff84 	addi	r16,r16,-2
    e98c:	1485883a 	add	r2,r2,r18
    e990:	003eca06 	br	e4bc <__alt_mem_Flash_flash_data+0xf400e4bc>

0000e994 <__umoddi3>:
    e994:	defff404 	addi	sp,sp,-48
    e998:	ddc00915 	stw	r23,36(sp)
    e99c:	dc400315 	stw	r17,12(sp)
    e9a0:	dc000215 	stw	r16,8(sp)
    e9a4:	dfc00b15 	stw	ra,44(sp)
    e9a8:	df000a15 	stw	fp,40(sp)
    e9ac:	dd800815 	stw	r22,32(sp)
    e9b0:	dd400715 	stw	r21,28(sp)
    e9b4:	dd000615 	stw	r20,24(sp)
    e9b8:	dcc00515 	stw	r19,20(sp)
    e9bc:	dc800415 	stw	r18,16(sp)
    e9c0:	2021883a 	mov	r16,r4
    e9c4:	2823883a 	mov	r17,r5
    e9c8:	282f883a 	mov	r23,r5
    e9cc:	3800381e 	bne	r7,zero,eab0 <__umoddi3+0x11c>
    e9d0:	3027883a 	mov	r19,r6
    e9d4:	2029883a 	mov	r20,r4
    e9d8:	29804e2e 	bgeu	r5,r6,eb14 <__umoddi3+0x180>
    e9dc:	00bfffd4 	movui	r2,65535
    e9e0:	11809c36 	bltu	r2,r6,ec54 <__umoddi3+0x2c0>
    e9e4:	00803fc4 	movi	r2,255
    e9e8:	11813b2e 	bgeu	r2,r6,eed8 <__umoddi3+0x544>
    e9ec:	01400204 	movi	r5,8
    e9f0:	2805883a 	mov	r2,r5
    e9f4:	314ad83a 	srl	r5,r6,r5
    e9f8:	00c000b4 	movhi	r3,2
    e9fc:	18fc9604 	addi	r3,r3,-3496
    ea00:	194b883a 	add	r5,r3,r5
    ea04:	29000003 	ldbu	r4,0(r5)
    ea08:	2089883a 	add	r4,r4,r2
    ea0c:	00800804 	movi	r2,32
    ea10:	1105c83a 	sub	r2,r2,r4
    ea14:	1000ec26 	beq	r2,zero,edc8 <__umoddi3+0x434>
    ea18:	88a2983a 	sll	r17,r17,r2
    ea1c:	8108d83a 	srl	r4,r16,r4
    ea20:	30a6983a 	sll	r19,r6,r2
    ea24:	80a8983a 	sll	r20,r16,r2
    ea28:	1025883a 	mov	r18,r2
    ea2c:	892eb03a 	or	r23,r17,r4
    ea30:	982cd43a 	srli	r22,r19,16
    ea34:	b809883a 	mov	r4,r23
    ea38:	9d7fffcc 	andi	r21,r19,65535
    ea3c:	b00b883a 	mov	r5,r22
    ea40:	000f0480 	call	f048 <__umodsi3>
    ea44:	b809883a 	mov	r4,r23
    ea48:	b00b883a 	mov	r5,r22
    ea4c:	1021883a 	mov	r16,r2
    ea50:	000f0400 	call	f040 <__udivsi3>
    ea54:	8020943a 	slli	r16,r16,16
    ea58:	a00cd43a 	srli	r6,r20,16
    ea5c:	1545383a 	mul	r2,r2,r21
    ea60:	8188b03a 	or	r4,r16,r6
    ea64:	2080042e 	bgeu	r4,r2,ea78 <__umoddi3+0xe4>
    ea68:	24c9883a 	add	r4,r4,r19
    ea6c:	24c00236 	bltu	r4,r19,ea78 <__umoddi3+0xe4>
    ea70:	2080012e 	bgeu	r4,r2,ea78 <__umoddi3+0xe4>
    ea74:	24c9883a 	add	r4,r4,r19
    ea78:	20a3c83a 	sub	r17,r4,r2
    ea7c:	8809883a 	mov	r4,r17
    ea80:	b00b883a 	mov	r5,r22
    ea84:	000f0480 	call	f048 <__umodsi3>
    ea88:	8809883a 	mov	r4,r17
    ea8c:	b00b883a 	mov	r5,r22
    ea90:	1021883a 	mov	r16,r2
    ea94:	000f0400 	call	f040 <__udivsi3>
    ea98:	8006943a 	slli	r3,r16,16
    ea9c:	1545383a 	mul	r2,r2,r21
    eaa0:	a13fffcc 	andi	r4,r20,65535
    eaa4:	1906b03a 	or	r3,r3,r4
    eaa8:	1880532e 	bgeu	r3,r2,ebf8 <__umoddi3+0x264>
    eaac:	00004e06 	br	ebe8 <__umoddi3+0x254>
    eab0:	29c05536 	bltu	r5,r7,ec08 <__umoddi3+0x274>
    eab4:	00bfffd4 	movui	r2,65535
    eab8:	11c0612e 	bgeu	r2,r7,ec40 <__umoddi3+0x2ac>
    eabc:	00804034 	movhi	r2,256
    eac0:	10bfffc4 	addi	r2,r2,-1
    eac4:	11c0f82e 	bgeu	r2,r7,eea8 <__umoddi3+0x514>
    eac8:	01400604 	movi	r5,24
    eacc:	282b883a 	mov	r21,r5
    ead0:	394ad83a 	srl	r5,r7,r5
    ead4:	00c000b4 	movhi	r3,2
    ead8:	18fc9604 	addi	r3,r3,-3496
    eadc:	194b883a 	add	r5,r3,r5
    eae0:	28800003 	ldbu	r2,0(r5)
    eae4:	00c00804 	movi	r3,32
    eae8:	156b883a 	add	r21,r2,r21
    eaec:	1d69c83a 	sub	r20,r3,r21
    eaf0:	a000631e 	bne	r20,zero,ec80 <__umoddi3+0x2ec>
    eaf4:	3c400136 	bltu	r7,r17,eafc <__umoddi3+0x168>
    eaf8:	81810436 	bltu	r16,r6,ef0c <__umoddi3+0x578>
    eafc:	8185c83a 	sub	r2,r16,r6
    eb00:	89e3c83a 	sub	r17,r17,r7
    eb04:	8087803a 	cmpltu	r3,r16,r2
    eb08:	88efc83a 	sub	r23,r17,r3
    eb0c:	b807883a 	mov	r3,r23
    eb10:	00003f06 	br	ec10 <__umoddi3+0x27c>
    eb14:	3000041e 	bne	r6,zero,eb28 <__umoddi3+0x194>
    eb18:	01000044 	movi	r4,1
    eb1c:	000b883a 	mov	r5,zero
    eb20:	000f0400 	call	f040 <__udivsi3>
    eb24:	1027883a 	mov	r19,r2
    eb28:	00bfffd4 	movui	r2,65535
    eb2c:	14c04f2e 	bgeu	r2,r19,ec6c <__umoddi3+0x2d8>
    eb30:	00804034 	movhi	r2,256
    eb34:	10bfffc4 	addi	r2,r2,-1
    eb38:	14c0e42e 	bgeu	r2,r19,eecc <__umoddi3+0x538>
    eb3c:	00800604 	movi	r2,24
    eb40:	1007883a 	mov	r3,r2
    eb44:	9884d83a 	srl	r2,r19,r2
    eb48:	010000b4 	movhi	r4,2
    eb4c:	213c9604 	addi	r4,r4,-3496
    eb50:	2085883a 	add	r2,r4,r2
    eb54:	11000003 	ldbu	r4,0(r2)
    eb58:	00800804 	movi	r2,32
    eb5c:	20c7883a 	add	r3,r4,r3
    eb60:	10c5c83a 	sub	r2,r2,r3
    eb64:	10009a1e 	bne	r2,zero,edd0 <__umoddi3+0x43c>
    eb68:	982cd43a 	srli	r22,r19,16
    eb6c:	8ce3c83a 	sub	r17,r17,r19
    eb70:	9c3fffcc 	andi	r16,r19,65535
    eb74:	0025883a 	mov	r18,zero
    eb78:	8809883a 	mov	r4,r17
    eb7c:	b00b883a 	mov	r5,r22
    eb80:	000f0480 	call	f048 <__umodsi3>
    eb84:	8809883a 	mov	r4,r17
    eb88:	b00b883a 	mov	r5,r22
    eb8c:	102b883a 	mov	r21,r2
    eb90:	000f0400 	call	f040 <__udivsi3>
    eb94:	a806943a 	slli	r3,r21,16
    eb98:	a008d43a 	srli	r4,r20,16
    eb9c:	1405383a 	mul	r2,r2,r16
    eba0:	190cb03a 	or	r6,r3,r4
    eba4:	3080032e 	bgeu	r6,r2,ebb4 <__umoddi3+0x220>
    eba8:	34cd883a 	add	r6,r6,r19
    ebac:	34c00136 	bltu	r6,r19,ebb4 <__umoddi3+0x220>
    ebb0:	3080d436 	bltu	r6,r2,ef04 <__umoddi3+0x570>
    ebb4:	30abc83a 	sub	r21,r6,r2
    ebb8:	a809883a 	mov	r4,r21
    ebbc:	b00b883a 	mov	r5,r22
    ebc0:	000f0480 	call	f048 <__umodsi3>
    ebc4:	1023883a 	mov	r17,r2
    ebc8:	a809883a 	mov	r4,r21
    ebcc:	b00b883a 	mov	r5,r22
    ebd0:	000f0400 	call	f040 <__udivsi3>
    ebd4:	8822943a 	slli	r17,r17,16
    ebd8:	1405383a 	mul	r2,r2,r16
    ebdc:	a13fffcc 	andi	r4,r20,65535
    ebe0:	8906b03a 	or	r3,r17,r4
    ebe4:	1880042e 	bgeu	r3,r2,ebf8 <__umoddi3+0x264>
    ebe8:	1cc7883a 	add	r3,r3,r19
    ebec:	1cc00236 	bltu	r3,r19,ebf8 <__umoddi3+0x264>
    ebf0:	1880012e 	bgeu	r3,r2,ebf8 <__umoddi3+0x264>
    ebf4:	1cc7883a 	add	r3,r3,r19
    ebf8:	1887c83a 	sub	r3,r3,r2
    ebfc:	1c84d83a 	srl	r2,r3,r18
    ec00:	0007883a 	mov	r3,zero
    ec04:	00000206 	br	ec10 <__umoddi3+0x27c>
    ec08:	2005883a 	mov	r2,r4
    ec0c:	2807883a 	mov	r3,r5
    ec10:	dfc00b17 	ldw	ra,44(sp)
    ec14:	df000a17 	ldw	fp,40(sp)
    ec18:	ddc00917 	ldw	r23,36(sp)
    ec1c:	dd800817 	ldw	r22,32(sp)
    ec20:	dd400717 	ldw	r21,28(sp)
    ec24:	dd000617 	ldw	r20,24(sp)
    ec28:	dcc00517 	ldw	r19,20(sp)
    ec2c:	dc800417 	ldw	r18,16(sp)
    ec30:	dc400317 	ldw	r17,12(sp)
    ec34:	dc000217 	ldw	r16,8(sp)
    ec38:	dec00c04 	addi	sp,sp,48
    ec3c:	f800283a 	ret
    ec40:	00803fc4 	movi	r2,255
    ec44:	11c0952e 	bgeu	r2,r7,ee9c <__umoddi3+0x508>
    ec48:	01400204 	movi	r5,8
    ec4c:	282b883a 	mov	r21,r5
    ec50:	003f9f06 	br	ead0 <__alt_mem_Flash_flash_data+0xf400ead0>
    ec54:	00804034 	movhi	r2,256
    ec58:	10bfffc4 	addi	r2,r2,-1
    ec5c:	1180952e 	bgeu	r2,r6,eeb4 <__umoddi3+0x520>
    ec60:	01400604 	movi	r5,24
    ec64:	2805883a 	mov	r2,r5
    ec68:	003f6206 	br	e9f4 <__alt_mem_Flash_flash_data+0xf400e9f4>
    ec6c:	00803fc4 	movi	r2,255
    ec70:	14c0932e 	bgeu	r2,r19,eec0 <__umoddi3+0x52c>
    ec74:	00800204 	movi	r2,8
    ec78:	1007883a 	mov	r3,r2
    ec7c:	003fb106 	br	eb44 <__alt_mem_Flash_flash_data+0xf400eb44>
    ec80:	3548d83a 	srl	r4,r6,r21
    ec84:	3d0e983a 	sll	r7,r7,r20
    ec88:	8d10983a 	sll	r8,r17,r20
    ec8c:	8d6cd83a 	srl	r22,r17,r21
    ec90:	3922b03a 	or	r17,r7,r4
    ec94:	882ed43a 	srli	r23,r17,16
    ec98:	8564d83a 	srl	r18,r16,r21
    ec9c:	b009883a 	mov	r4,r22
    eca0:	b80b883a 	mov	r5,r23
    eca4:	44a4b03a 	or	r18,r8,r18
    eca8:	3526983a 	sll	r19,r6,r20
    ecac:	000f0480 	call	f048 <__umodsi3>
    ecb0:	b009883a 	mov	r4,r22
    ecb4:	b80b883a 	mov	r5,r23
    ecb8:	1039883a 	mov	fp,r2
    ecbc:	000f0400 	call	f040 <__udivsi3>
    ecc0:	102d883a 	mov	r22,r2
    ecc4:	8a3fffcc 	andi	r8,r17,65535
    ecc8:	e004943a 	slli	r2,fp,16
    eccc:	900cd43a 	srli	r6,r18,16
    ecd0:	b239383a 	mul	fp,r22,r8
    ecd4:	8520983a 	sll	r16,r16,r20
    ecd8:	118ab03a 	or	r5,r2,r6
    ecdc:	2f00042e 	bgeu	r5,fp,ecf0 <__umoddi3+0x35c>
    ece0:	2c4b883a 	add	r5,r5,r17
    ece4:	b0bfffc4 	addi	r2,r22,-1
    ece8:	2c40822e 	bgeu	r5,r17,eef4 <__umoddi3+0x560>
    ecec:	102d883a 	mov	r22,r2
    ecf0:	2f39c83a 	sub	fp,r5,fp
    ecf4:	e009883a 	mov	r4,fp
    ecf8:	b80b883a 	mov	r5,r23
    ecfc:	da000115 	stw	r8,4(sp)
    ed00:	000f0480 	call	f048 <__umodsi3>
    ed04:	e009883a 	mov	r4,fp
    ed08:	b80b883a 	mov	r5,r23
    ed0c:	d8800015 	stw	r2,0(sp)
    ed10:	000f0400 	call	f040 <__udivsi3>
    ed14:	d9800017 	ldw	r6,0(sp)
    ed18:	da000117 	ldw	r8,4(sp)
    ed1c:	94bfffcc 	andi	r18,r18,65535
    ed20:	300c943a 	slli	r6,r6,16
    ed24:	1209383a 	mul	r4,r2,r8
    ed28:	3490b03a 	or	r8,r6,r18
    ed2c:	4100042e 	bgeu	r8,r4,ed40 <__umoddi3+0x3ac>
    ed30:	4451883a 	add	r8,r8,r17
    ed34:	10ffffc4 	addi	r3,r2,-1
    ed38:	44406a2e 	bgeu	r8,r17,eee4 <__umoddi3+0x550>
    ed3c:	1805883a 	mov	r2,r3
    ed40:	b012943a 	slli	r9,r22,16
    ed44:	9abfffcc 	andi	r10,r19,65535
    ed48:	980ed43a 	srli	r7,r19,16
    ed4c:	124ab03a 	or	r5,r2,r9
    ed50:	2a7fffcc 	andi	r9,r5,65535
    ed54:	280ad43a 	srli	r5,r5,16
    ed58:	4a8d383a 	mul	r6,r9,r10
    ed5c:	49d3383a 	mul	r9,r9,r7
    ed60:	2a95383a 	mul	r10,r5,r10
    ed64:	3004d43a 	srli	r2,r6,16
    ed68:	4111c83a 	sub	r8,r8,r4
    ed6c:	5253883a 	add	r9,r10,r9
    ed70:	4893883a 	add	r9,r9,r2
    ed74:	29cb383a 	mul	r5,r5,r7
    ed78:	4a80022e 	bgeu	r9,r10,ed84 <__umoddi3+0x3f0>
    ed7c:	00800074 	movhi	r2,1
    ed80:	288b883a 	add	r5,r5,r2
    ed84:	4808d43a 	srli	r4,r9,16
    ed88:	4812943a 	slli	r9,r9,16
    ed8c:	31bfffcc 	andi	r6,r6,65535
    ed90:	290b883a 	add	r5,r5,r4
    ed94:	498d883a 	add	r6,r9,r6
    ed98:	41403a36 	bltu	r8,r5,ee84 <__umoddi3+0x4f0>
    ed9c:	41405d26 	beq	r8,r5,ef14 <__umoddi3+0x580>
    eda0:	4149c83a 	sub	r4,r8,r5
    eda4:	300f883a 	mov	r7,r6
    eda8:	81cfc83a 	sub	r7,r16,r7
    edac:	81c7803a 	cmpltu	r3,r16,r7
    edb0:	20c7c83a 	sub	r3,r4,r3
    edb4:	1d44983a 	sll	r2,r3,r21
    edb8:	3d0ed83a 	srl	r7,r7,r20
    edbc:	1d06d83a 	srl	r3,r3,r20
    edc0:	11c4b03a 	or	r2,r2,r7
    edc4:	003f9206 	br	ec10 <__alt_mem_Flash_flash_data+0xf400ec10>
    edc8:	0025883a 	mov	r18,zero
    edcc:	003f1806 	br	ea30 <__alt_mem_Flash_flash_data+0xf400ea30>
    edd0:	98a6983a 	sll	r19,r19,r2
    edd4:	88e8d83a 	srl	r20,r17,r3
    edd8:	80c6d83a 	srl	r3,r16,r3
    eddc:	982cd43a 	srli	r22,r19,16
    ede0:	88a2983a 	sll	r17,r17,r2
    ede4:	a009883a 	mov	r4,r20
    ede8:	b00b883a 	mov	r5,r22
    edec:	88eab03a 	or	r21,r17,r3
    edf0:	1025883a 	mov	r18,r2
    edf4:	000f0480 	call	f048 <__umodsi3>
    edf8:	a009883a 	mov	r4,r20
    edfc:	b00b883a 	mov	r5,r22
    ee00:	1023883a 	mov	r17,r2
    ee04:	000f0400 	call	f040 <__udivsi3>
    ee08:	9f3fffcc 	andi	fp,r19,65535
    ee0c:	8822943a 	slli	r17,r17,16
    ee10:	a80ad43a 	srli	r5,r21,16
    ee14:	1705383a 	mul	r2,r2,fp
    ee18:	84a8983a 	sll	r20,r16,r18
    ee1c:	8948b03a 	or	r4,r17,r5
    ee20:	2080042e 	bgeu	r4,r2,ee34 <__umoddi3+0x4a0>
    ee24:	24c9883a 	add	r4,r4,r19
    ee28:	24c00236 	bltu	r4,r19,ee34 <__umoddi3+0x4a0>
    ee2c:	2080012e 	bgeu	r4,r2,ee34 <__umoddi3+0x4a0>
    ee30:	24c9883a 	add	r4,r4,r19
    ee34:	20afc83a 	sub	r23,r4,r2
    ee38:	b809883a 	mov	r4,r23
    ee3c:	b00b883a 	mov	r5,r22
    ee40:	000f0480 	call	f048 <__umodsi3>
    ee44:	1023883a 	mov	r17,r2
    ee48:	b809883a 	mov	r4,r23
    ee4c:	b00b883a 	mov	r5,r22
    ee50:	000f0400 	call	f040 <__udivsi3>
    ee54:	8822943a 	slli	r17,r17,16
    ee58:	1705383a 	mul	r2,r2,fp
    ee5c:	a93fffcc 	andi	r4,r21,65535
    ee60:	8908b03a 	or	r4,r17,r4
    ee64:	2080042e 	bgeu	r4,r2,ee78 <__umoddi3+0x4e4>
    ee68:	24c9883a 	add	r4,r4,r19
    ee6c:	24c00236 	bltu	r4,r19,ee78 <__umoddi3+0x4e4>
    ee70:	2080012e 	bgeu	r4,r2,ee78 <__umoddi3+0x4e4>
    ee74:	24c9883a 	add	r4,r4,r19
    ee78:	20a3c83a 	sub	r17,r4,r2
    ee7c:	e021883a 	mov	r16,fp
    ee80:	003f3d06 	br	eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    ee84:	34cfc83a 	sub	r7,r6,r19
    ee88:	2c4bc83a 	sub	r5,r5,r17
    ee8c:	31cd803a 	cmpltu	r6,r6,r7
    ee90:	298dc83a 	sub	r6,r5,r6
    ee94:	4189c83a 	sub	r4,r8,r6
    ee98:	003fc306 	br	eda8 <__alt_mem_Flash_flash_data+0xf400eda8>
    ee9c:	000b883a 	mov	r5,zero
    eea0:	002b883a 	mov	r21,zero
    eea4:	003f0a06 	br	ead0 <__alt_mem_Flash_flash_data+0xf400ead0>
    eea8:	01400404 	movi	r5,16
    eeac:	282b883a 	mov	r21,r5
    eeb0:	003f0706 	br	ead0 <__alt_mem_Flash_flash_data+0xf400ead0>
    eeb4:	01400404 	movi	r5,16
    eeb8:	2805883a 	mov	r2,r5
    eebc:	003ecd06 	br	e9f4 <__alt_mem_Flash_flash_data+0xf400e9f4>
    eec0:	0005883a 	mov	r2,zero
    eec4:	0007883a 	mov	r3,zero
    eec8:	003f1e06 	br	eb44 <__alt_mem_Flash_flash_data+0xf400eb44>
    eecc:	00800404 	movi	r2,16
    eed0:	1007883a 	mov	r3,r2
    eed4:	003f1b06 	br	eb44 <__alt_mem_Flash_flash_data+0xf400eb44>
    eed8:	000b883a 	mov	r5,zero
    eedc:	0005883a 	mov	r2,zero
    eee0:	003ec406 	br	e9f4 <__alt_mem_Flash_flash_data+0xf400e9f4>
    eee4:	413f952e 	bgeu	r8,r4,ed3c <__alt_mem_Flash_flash_data+0xf400ed3c>
    eee8:	10bfff84 	addi	r2,r2,-2
    eeec:	4451883a 	add	r8,r8,r17
    eef0:	003f9306 	br	ed40 <__alt_mem_Flash_flash_data+0xf400ed40>
    eef4:	2f3f7d2e 	bgeu	r5,fp,ecec <__alt_mem_Flash_flash_data+0xf400ecec>
    eef8:	b5bfff84 	addi	r22,r22,-2
    eefc:	2c4b883a 	add	r5,r5,r17
    ef00:	003f7b06 	br	ecf0 <__alt_mem_Flash_flash_data+0xf400ecf0>
    ef04:	34cd883a 	add	r6,r6,r19
    ef08:	003f2a06 	br	ebb4 <__alt_mem_Flash_flash_data+0xf400ebb4>
    ef0c:	8005883a 	mov	r2,r16
    ef10:	003efe06 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ef14:	81bfdb36 	bltu	r16,r6,ee84 <__alt_mem_Flash_flash_data+0xf400ee84>
    ef18:	300f883a 	mov	r7,r6
    ef1c:	0009883a 	mov	r4,zero
    ef20:	003fa106 	br	eda8 <__alt_mem_Flash_flash_data+0xf400eda8>

0000ef24 <udivmodsi4>:
    ef24:	2900182e 	bgeu	r5,r4,ef88 <udivmodsi4+0x64>
    ef28:	28001716 	blt	r5,zero,ef88 <udivmodsi4+0x64>
    ef2c:	00800804 	movi	r2,32
    ef30:	00c00044 	movi	r3,1
    ef34:	00000206 	br	ef40 <udivmodsi4+0x1c>
    ef38:	10001126 	beq	r2,zero,ef80 <udivmodsi4+0x5c>
    ef3c:	28000516 	blt	r5,zero,ef54 <udivmodsi4+0x30>
    ef40:	294b883a 	add	r5,r5,r5
    ef44:	10bfffc4 	addi	r2,r2,-1
    ef48:	18c7883a 	add	r3,r3,r3
    ef4c:	293ffa36 	bltu	r5,r4,ef38 <__alt_mem_Flash_flash_data+0xf400ef38>
    ef50:	18000b26 	beq	r3,zero,ef80 <udivmodsi4+0x5c>
    ef54:	0005883a 	mov	r2,zero
    ef58:	21400236 	bltu	r4,r5,ef64 <udivmodsi4+0x40>
    ef5c:	2149c83a 	sub	r4,r4,r5
    ef60:	10c4b03a 	or	r2,r2,r3
    ef64:	1806d07a 	srli	r3,r3,1
    ef68:	280ad07a 	srli	r5,r5,1
    ef6c:	183ffa1e 	bne	r3,zero,ef58 <__alt_mem_Flash_flash_data+0xf400ef58>
    ef70:	3000011e 	bne	r6,zero,ef78 <udivmodsi4+0x54>
    ef74:	f800283a 	ret
    ef78:	2005883a 	mov	r2,r4
    ef7c:	f800283a 	ret
    ef80:	0005883a 	mov	r2,zero
    ef84:	003ffa06 	br	ef70 <__alt_mem_Flash_flash_data+0xf400ef70>
    ef88:	00c00044 	movi	r3,1
    ef8c:	003ff106 	br	ef54 <__alt_mem_Flash_flash_data+0xf400ef54>

0000ef90 <__divsi3>:
    ef90:	defffe04 	addi	sp,sp,-8
    ef94:	dfc00115 	stw	ra,4(sp)
    ef98:	dc000015 	stw	r16,0(sp)
    ef9c:	20000b16 	blt	r4,zero,efcc <__divsi3+0x3c>
    efa0:	0021883a 	mov	r16,zero
    efa4:	28000c16 	blt	r5,zero,efd8 <__divsi3+0x48>
    efa8:	000d883a 	mov	r6,zero
    efac:	000ef240 	call	ef24 <udivmodsi4>
    efb0:	0407c83a 	sub	r3,zero,r16
    efb4:	1884f03a 	xor	r2,r3,r2
    efb8:	1405883a 	add	r2,r2,r16
    efbc:	dfc00117 	ldw	ra,4(sp)
    efc0:	dc000017 	ldw	r16,0(sp)
    efc4:	dec00204 	addi	sp,sp,8
    efc8:	f800283a 	ret
    efcc:	0109c83a 	sub	r4,zero,r4
    efd0:	04000044 	movi	r16,1
    efd4:	283ff40e 	bge	r5,zero,efa8 <__alt_mem_Flash_flash_data+0xf400efa8>
    efd8:	014bc83a 	sub	r5,zero,r5
    efdc:	8400005c 	xori	r16,r16,1
    efe0:	003ff106 	br	efa8 <__alt_mem_Flash_flash_data+0xf400efa8>

0000efe4 <__modsi3>:
    efe4:	defffd04 	addi	sp,sp,-12
    efe8:	dfc00215 	stw	ra,8(sp)
    efec:	dc400115 	stw	r17,4(sp)
    eff0:	dc000015 	stw	r16,0(sp)
    eff4:	20000c16 	blt	r4,zero,f028 <__modsi3+0x44>
    eff8:	0023883a 	mov	r17,zero
    effc:	0021883a 	mov	r16,zero
    f000:	28000d16 	blt	r5,zero,f038 <__modsi3+0x54>
    f004:	01800044 	movi	r6,1
    f008:	000ef240 	call	ef24 <udivmodsi4>
    f00c:	1404f03a 	xor	r2,r2,r16
    f010:	8885883a 	add	r2,r17,r2
    f014:	dfc00217 	ldw	ra,8(sp)
    f018:	dc400117 	ldw	r17,4(sp)
    f01c:	dc000017 	ldw	r16,0(sp)
    f020:	dec00304 	addi	sp,sp,12
    f024:	f800283a 	ret
    f028:	0109c83a 	sub	r4,zero,r4
    f02c:	04400044 	movi	r17,1
    f030:	043fffc4 	movi	r16,-1
    f034:	283ff30e 	bge	r5,zero,f004 <__alt_mem_Flash_flash_data+0xf400f004>
    f038:	014bc83a 	sub	r5,zero,r5
    f03c:	003ff106 	br	f004 <__alt_mem_Flash_flash_data+0xf400f004>

0000f040 <__udivsi3>:
    f040:	000d883a 	mov	r6,zero
    f044:	000ef241 	jmpi	ef24 <udivmodsi4>

0000f048 <__umodsi3>:
    f048:	01800044 	movi	r6,1
    f04c:	000ef241 	jmpi	ef24 <udivmodsi4>

0000f050 <__adddf3>:
    f050:	02000434 	movhi	r8,16
    f054:	423fffc4 	addi	r8,r8,-1
    f058:	defffb04 	addi	sp,sp,-20
    f05c:	2a12703a 	and	r9,r5,r8
    f060:	2806d7fa 	srli	r3,r5,31
    f064:	3a10703a 	and	r8,r7,r8
    f068:	3804d53a 	srli	r2,r7,20
    f06c:	3014d77a 	srli	r10,r6,29
    f070:	dc000015 	stw	r16,0(sp)
    f074:	481290fa 	slli	r9,r9,3
    f078:	2820d53a 	srli	r16,r5,20
    f07c:	401090fa 	slli	r8,r8,3
    f080:	200ad77a 	srli	r5,r4,29
    f084:	380ed7fa 	srli	r7,r7,31
    f088:	dc800215 	stw	r18,8(sp)
    f08c:	dc400115 	stw	r17,4(sp)
    f090:	dfc00415 	stw	ra,16(sp)
    f094:	dcc00315 	stw	r19,12(sp)
    f098:	1c803fcc 	andi	r18,r3,255
    f09c:	8401ffcc 	andi	r16,r16,2047
    f0a0:	494ab03a 	or	r5,r9,r5
    f0a4:	202290fa 	slli	r17,r4,3
    f0a8:	1081ffcc 	andi	r2,r2,2047
    f0ac:	4290b03a 	or	r8,r8,r10
    f0b0:	300c90fa 	slli	r6,r6,3
    f0b4:	91c07026 	beq	r18,r7,f278 <__adddf3+0x228>
    f0b8:	8087c83a 	sub	r3,r16,r2
    f0bc:	00c0b30e 	bge	zero,r3,f38c <__adddf3+0x33c>
    f0c0:	10002a1e 	bne	r2,zero,f16c <__adddf3+0x11c>
    f0c4:	4184b03a 	or	r2,r8,r6
    f0c8:	1000991e 	bne	r2,zero,f330 <__adddf3+0x2e0>
    f0cc:	888001cc 	andi	r2,r17,7
    f0d0:	10005b26 	beq	r2,zero,f240 <__adddf3+0x1f0>
    f0d4:	88c003cc 	andi	r3,r17,15
    f0d8:	00800104 	movi	r2,4
    f0dc:	18805826 	beq	r3,r2,f240 <__adddf3+0x1f0>
    f0e0:	89800104 	addi	r6,r17,4
    f0e4:	3463803a 	cmpltu	r17,r6,r17
    f0e8:	2c4b883a 	add	r5,r5,r17
    f0ec:	2880202c 	andhi	r2,r5,128
    f0f0:	9007883a 	mov	r3,r18
    f0f4:	3023883a 	mov	r17,r6
    f0f8:	10005426 	beq	r2,zero,f24c <__adddf3+0x1fc>
    f0fc:	84000044 	addi	r16,r16,1
    f100:	0081ffc4 	movi	r2,2047
    f104:	8080c126 	beq	r16,r2,f40c <__adddf3+0x3bc>
    f108:	013fe034 	movhi	r4,65408
    f10c:	213fffc4 	addi	r4,r4,-1
    f110:	290a703a 	and	r5,r5,r4
    f114:	2804977a 	slli	r2,r5,29
    f118:	280a927a 	slli	r5,r5,9
    f11c:	8822d0fa 	srli	r17,r17,3
    f120:	8401ffcc 	andi	r16,r16,2047
    f124:	2808d33a 	srli	r4,r5,12
    f128:	1444b03a 	or	r2,r2,r17
    f12c:	8401ffcc 	andi	r16,r16,2047
    f130:	800a953a 	slli	r5,r16,20
    f134:	18c03fcc 	andi	r3,r3,255
    f138:	04000434 	movhi	r16,16
    f13c:	180697fa 	slli	r3,r3,31
    f140:	843fffc4 	addi	r16,r16,-1
    f144:	2420703a 	and	r16,r4,r16
    f148:	8160b03a 	or	r16,r16,r5
    f14c:	80c6b03a 	or	r3,r16,r3
    f150:	dfc00417 	ldw	ra,16(sp)
    f154:	dcc00317 	ldw	r19,12(sp)
    f158:	dc800217 	ldw	r18,8(sp)
    f15c:	dc400117 	ldw	r17,4(sp)
    f160:	dc000017 	ldw	r16,0(sp)
    f164:	dec00504 	addi	sp,sp,20
    f168:	f800283a 	ret
    f16c:	0081ffc4 	movi	r2,2047
    f170:	80bfd626 	beq	r16,r2,f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f174:	42002034 	orhi	r8,r8,128
    f178:	00800e04 	movi	r2,56
    f17c:	10c0a616 	blt	r2,r3,f418 <__adddf3+0x3c8>
    f180:	008007c4 	movi	r2,31
    f184:	10c0c916 	blt	r2,r3,f4ac <__adddf3+0x45c>
    f188:	00800804 	movi	r2,32
    f18c:	10c5c83a 	sub	r2,r2,r3
    f190:	408e983a 	sll	r7,r8,r2
    f194:	30c8d83a 	srl	r4,r6,r3
    f198:	3084983a 	sll	r2,r6,r2
    f19c:	40c6d83a 	srl	r3,r8,r3
    f1a0:	390cb03a 	or	r6,r7,r4
    f1a4:	1004c03a 	cmpne	r2,r2,zero
    f1a8:	308cb03a 	or	r6,r6,r2
    f1ac:	898dc83a 	sub	r6,r17,r6
    f1b0:	89a3803a 	cmpltu	r17,r17,r6
    f1b4:	28cbc83a 	sub	r5,r5,r3
    f1b8:	2c4bc83a 	sub	r5,r5,r17
    f1bc:	3023883a 	mov	r17,r6
    f1c0:	2880202c 	andhi	r2,r5,128
    f1c4:	10006d26 	beq	r2,zero,f37c <__adddf3+0x32c>
    f1c8:	04c02034 	movhi	r19,128
    f1cc:	9cffffc4 	addi	r19,r19,-1
    f1d0:	2ce6703a 	and	r19,r5,r19
    f1d4:	98007e26 	beq	r19,zero,f3d0 <__adddf3+0x380>
    f1d8:	9809883a 	mov	r4,r19
    f1dc:	00115ec0 	call	115ec <__clzsi2>
    f1e0:	10fffe04 	addi	r3,r2,-8
    f1e4:	010007c4 	movi	r4,31
    f1e8:	20c07f16 	blt	r4,r3,f3e8 <__adddf3+0x398>
    f1ec:	01400a04 	movi	r5,40
    f1f0:	2885c83a 	sub	r2,r5,r2
    f1f4:	888ad83a 	srl	r5,r17,r2
    f1f8:	98e6983a 	sll	r19,r19,r3
    f1fc:	88e2983a 	sll	r17,r17,r3
    f200:	2ce6b03a 	or	r19,r5,r19
    f204:	1c007c16 	blt	r3,r16,f3f8 <__adddf3+0x3a8>
    f208:	1c21c83a 	sub	r16,r3,r16
    f20c:	81400044 	addi	r5,r16,1
    f210:	00c007c4 	movi	r3,31
    f214:	19409816 	blt	r3,r5,f478 <__adddf3+0x428>
    f218:	1c21c83a 	sub	r16,r3,r16
    f21c:	8c08983a 	sll	r4,r17,r16
    f220:	8946d83a 	srl	r3,r17,r5
    f224:	9c20983a 	sll	r16,r19,r16
    f228:	2008c03a 	cmpne	r4,r4,zero
    f22c:	994ad83a 	srl	r5,r19,r5
    f230:	1c06b03a 	or	r3,r3,r16
    f234:	1922b03a 	or	r17,r3,r4
    f238:	0021883a 	mov	r16,zero
    f23c:	003fa306 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f240:	2880202c 	andhi	r2,r5,128
    f244:	9007883a 	mov	r3,r18
    f248:	103fac1e 	bne	r2,zero,f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f24c:	2804977a 	slli	r2,r5,29
    f250:	8822d0fa 	srli	r17,r17,3
    f254:	0101ffc4 	movi	r4,2047
    f258:	280ad0fa 	srli	r5,r5,3
    f25c:	1444b03a 	or	r2,r2,r17
    f260:	81002c26 	beq	r16,r4,f314 <__adddf3+0x2c4>
    f264:	8120703a 	and	r16,r16,r4
    f268:	01000434 	movhi	r4,16
    f26c:	213fffc4 	addi	r4,r4,-1
    f270:	2908703a 	and	r4,r5,r4
    f274:	003fad06 	br	f12c <__alt_mem_Flash_flash_data+0xf400f12c>
    f278:	8089c83a 	sub	r4,r16,r2
    f27c:	01006a0e 	bge	zero,r4,f428 <__adddf3+0x3d8>
    f280:	10003326 	beq	r2,zero,f350 <__adddf3+0x300>
    f284:	0081ffc4 	movi	r2,2047
    f288:	80bf9026 	beq	r16,r2,f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f28c:	42002034 	orhi	r8,r8,128
    f290:	00800e04 	movi	r2,56
    f294:	1100b116 	blt	r2,r4,f55c <__adddf3+0x50c>
    f298:	008007c4 	movi	r2,31
    f29c:	1100e216 	blt	r2,r4,f628 <__adddf3+0x5d8>
    f2a0:	00800804 	movi	r2,32
    f2a4:	1105c83a 	sub	r2,r2,r4
    f2a8:	4092983a 	sll	r9,r8,r2
    f2ac:	310ed83a 	srl	r7,r6,r4
    f2b0:	3084983a 	sll	r2,r6,r2
    f2b4:	4110d83a 	srl	r8,r8,r4
    f2b8:	49ccb03a 	or	r6,r9,r7
    f2bc:	1004c03a 	cmpne	r2,r2,zero
    f2c0:	308cb03a 	or	r6,r6,r2
    f2c4:	344d883a 	add	r6,r6,r17
    f2c8:	3463803a 	cmpltu	r17,r6,r17
    f2cc:	414b883a 	add	r5,r8,r5
    f2d0:	2c4b883a 	add	r5,r5,r17
    f2d4:	3023883a 	mov	r17,r6
    f2d8:	2880202c 	andhi	r2,r5,128
    f2dc:	10002726 	beq	r2,zero,f37c <__adddf3+0x32c>
    f2e0:	84000044 	addi	r16,r16,1
    f2e4:	0081ffc4 	movi	r2,2047
    f2e8:	8080ae26 	beq	r16,r2,f5a4 <__adddf3+0x554>
    f2ec:	00bfe034 	movhi	r2,65408
    f2f0:	10bfffc4 	addi	r2,r2,-1
    f2f4:	288a703a 	and	r5,r5,r2
    f2f8:	880cd07a 	srli	r6,r17,1
    f2fc:	280897fa 	slli	r4,r5,31
    f300:	88c0004c 	andi	r3,r17,1
    f304:	30e2b03a 	or	r17,r6,r3
    f308:	280ad07a 	srli	r5,r5,1
    f30c:	8922b03a 	or	r17,r17,r4
    f310:	003f6e06 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f314:	1148b03a 	or	r4,r2,r5
    f318:	20003c26 	beq	r4,zero,f40c <__adddf3+0x3bc>
    f31c:	29000234 	orhi	r4,r5,8
    f320:	01400434 	movhi	r5,16
    f324:	297fffc4 	addi	r5,r5,-1
    f328:	2148703a 	and	r4,r4,r5
    f32c:	003f7f06 	br	f12c <__alt_mem_Flash_flash_data+0xf400f12c>
    f330:	18ffffc4 	addi	r3,r3,-1
    f334:	18004d1e 	bne	r3,zero,f46c <__adddf3+0x41c>
    f338:	898dc83a 	sub	r6,r17,r6
    f33c:	89a3803a 	cmpltu	r17,r17,r6
    f340:	2a0bc83a 	sub	r5,r5,r8
    f344:	2c4bc83a 	sub	r5,r5,r17
    f348:	3023883a 	mov	r17,r6
    f34c:	003f9c06 	br	f1c0 <__alt_mem_Flash_flash_data+0xf400f1c0>
    f350:	4184b03a 	or	r2,r8,r6
    f354:	103f5d26 	beq	r2,zero,f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f358:	213fffc4 	addi	r4,r4,-1
    f35c:	203fd926 	beq	r4,zero,f2c4 <__alt_mem_Flash_flash_data+0xf400f2c4>
    f360:	0081ffc4 	movi	r2,2047
    f364:	80bfca1e 	bne	r16,r2,f290 <__alt_mem_Flash_flash_data+0xf400f290>
    f368:	003f5806 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f36c:	10c8b03a 	or	r4,r2,r3
    f370:	20008b26 	beq	r4,zero,f5a0 <__adddf3+0x550>
    f374:	100b883a 	mov	r5,r2
    f378:	1823883a 	mov	r17,r3
    f37c:	888001cc 	andi	r2,r17,7
    f380:	103f541e 	bne	r2,zero,f0d4 <__alt_mem_Flash_flash_data+0xf400f0d4>
    f384:	9007883a 	mov	r3,r18
    f388:	003fb006 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f38c:	1800531e 	bne	r3,zero,f4dc <__adddf3+0x48c>
    f390:	80800044 	addi	r2,r16,1
    f394:	1081ffcc 	andi	r2,r2,2047
    f398:	00c00044 	movi	r3,1
    f39c:	1880990e 	bge	r3,r2,f604 <__adddf3+0x5b4>
    f3a0:	8985c83a 	sub	r2,r17,r6
    f3a4:	8887803a 	cmpltu	r3,r17,r2
    f3a8:	2a27c83a 	sub	r19,r5,r8
    f3ac:	98e7c83a 	sub	r19,r19,r3
    f3b0:	98c0202c 	andhi	r3,r19,128
    f3b4:	18006226 	beq	r3,zero,f540 <__adddf3+0x4f0>
    f3b8:	3463c83a 	sub	r17,r6,r17
    f3bc:	4151c83a 	sub	r8,r8,r5
    f3c0:	344d803a 	cmpltu	r6,r6,r17
    f3c4:	41a7c83a 	sub	r19,r8,r6
    f3c8:	3825883a 	mov	r18,r7
    f3cc:	983f821e 	bne	r19,zero,f1d8 <__alt_mem_Flash_flash_data+0xf400f1d8>
    f3d0:	8809883a 	mov	r4,r17
    f3d4:	00115ec0 	call	115ec <__clzsi2>
    f3d8:	10800804 	addi	r2,r2,32
    f3dc:	10fffe04 	addi	r3,r2,-8
    f3e0:	010007c4 	movi	r4,31
    f3e4:	20ff810e 	bge	r4,r3,f1ec <__alt_mem_Flash_flash_data+0xf400f1ec>
    f3e8:	14fff604 	addi	r19,r2,-40
    f3ec:	8ce6983a 	sll	r19,r17,r19
    f3f0:	0023883a 	mov	r17,zero
    f3f4:	1c3f840e 	bge	r3,r16,f208 <__alt_mem_Flash_flash_data+0xf400f208>
    f3f8:	017fe034 	movhi	r5,65408
    f3fc:	297fffc4 	addi	r5,r5,-1
    f400:	80e1c83a 	sub	r16,r16,r3
    f404:	994a703a 	and	r5,r19,r5
    f408:	003f3006 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f40c:	0009883a 	mov	r4,zero
    f410:	0005883a 	mov	r2,zero
    f414:	003f4506 	br	f12c <__alt_mem_Flash_flash_data+0xf400f12c>
    f418:	418cb03a 	or	r6,r8,r6
    f41c:	300cc03a 	cmpne	r6,r6,zero
    f420:	0007883a 	mov	r3,zero
    f424:	003f6106 	br	f1ac <__alt_mem_Flash_flash_data+0xf400f1ac>
    f428:	2000921e 	bne	r4,zero,f674 <__adddf3+0x624>
    f42c:	80800044 	addi	r2,r16,1
    f430:	11c1ffcc 	andi	r7,r2,2047
    f434:	01000044 	movi	r4,1
    f438:	21c0610e 	bge	r4,r7,f5c0 <__adddf3+0x570>
    f43c:	0101ffc4 	movi	r4,2047
    f440:	1100a326 	beq	r2,r4,f6d0 <__adddf3+0x680>
    f444:	344d883a 	add	r6,r6,r17
    f448:	3463803a 	cmpltu	r17,r6,r17
    f44c:	414b883a 	add	r5,r8,r5
    f450:	2c4b883a 	add	r5,r5,r17
    f454:	282297fa 	slli	r17,r5,31
    f458:	300cd07a 	srli	r6,r6,1
    f45c:	280ad07a 	srli	r5,r5,1
    f460:	1021883a 	mov	r16,r2
    f464:	89a2b03a 	or	r17,r17,r6
    f468:	003f1806 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f46c:	0081ffc4 	movi	r2,2047
    f470:	80bf411e 	bne	r16,r2,f178 <__alt_mem_Flash_flash_data+0xf400f178>
    f474:	003f1506 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f478:	80bff844 	addi	r2,r16,-31
    f47c:	00c00804 	movi	r3,32
    f480:	9884d83a 	srl	r2,r19,r2
    f484:	28c04a26 	beq	r5,r3,f5b0 <__adddf3+0x560>
    f488:	00c00fc4 	movi	r3,63
    f48c:	1c21c83a 	sub	r16,r3,r16
    f490:	9c26983a 	sll	r19,r19,r16
    f494:	9c62b03a 	or	r17,r19,r17
    f498:	8822c03a 	cmpne	r17,r17,zero
    f49c:	88a2b03a 	or	r17,r17,r2
    f4a0:	000b883a 	mov	r5,zero
    f4a4:	0021883a 	mov	r16,zero
    f4a8:	003fb406 	br	f37c <__alt_mem_Flash_flash_data+0xf400f37c>
    f4ac:	18bff804 	addi	r2,r3,-32
    f4b0:	01000804 	movi	r4,32
    f4b4:	4084d83a 	srl	r2,r8,r2
    f4b8:	19003f26 	beq	r3,r4,f5b8 <__adddf3+0x568>
    f4bc:	01001004 	movi	r4,64
    f4c0:	20c7c83a 	sub	r3,r4,r3
    f4c4:	40d0983a 	sll	r8,r8,r3
    f4c8:	418cb03a 	or	r6,r8,r6
    f4cc:	300cc03a 	cmpne	r6,r6,zero
    f4d0:	308cb03a 	or	r6,r6,r2
    f4d4:	0007883a 	mov	r3,zero
    f4d8:	003f3406 	br	f1ac <__alt_mem_Flash_flash_data+0xf400f1ac>
    f4dc:	80002326 	beq	r16,zero,f56c <__adddf3+0x51c>
    f4e0:	0101ffc4 	movi	r4,2047
    f4e4:	11005e26 	beq	r2,r4,f660 <__adddf3+0x610>
    f4e8:	00c7c83a 	sub	r3,zero,r3
    f4ec:	29402034 	orhi	r5,r5,128
    f4f0:	01000e04 	movi	r4,56
    f4f4:	20c07216 	blt	r4,r3,f6c0 <__adddf3+0x670>
    f4f8:	010007c4 	movi	r4,31
    f4fc:	20c0ce16 	blt	r4,r3,f838 <__adddf3+0x7e8>
    f500:	01000804 	movi	r4,32
    f504:	20c9c83a 	sub	r4,r4,r3
    f508:	2914983a 	sll	r10,r5,r4
    f50c:	88d2d83a 	srl	r9,r17,r3
    f510:	8908983a 	sll	r4,r17,r4
    f514:	28c6d83a 	srl	r3,r5,r3
    f518:	5262b03a 	or	r17,r10,r9
    f51c:	2008c03a 	cmpne	r4,r4,zero
    f520:	8922b03a 	or	r17,r17,r4
    f524:	3463c83a 	sub	r17,r6,r17
    f528:	40c7c83a 	sub	r3,r8,r3
    f52c:	344d803a 	cmpltu	r6,r6,r17
    f530:	198bc83a 	sub	r5,r3,r6
    f534:	1021883a 	mov	r16,r2
    f538:	3825883a 	mov	r18,r7
    f53c:	003f2006 	br	f1c0 <__alt_mem_Flash_flash_data+0xf400f1c0>
    f540:	9886b03a 	or	r3,r19,r2
    f544:	1800141e 	bne	r3,zero,f598 <__adddf3+0x548>
    f548:	0007883a 	mov	r3,zero
    f54c:	000b883a 	mov	r5,zero
    f550:	0023883a 	mov	r17,zero
    f554:	0021883a 	mov	r16,zero
    f558:	003f3c06 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f55c:	418cb03a 	or	r6,r8,r6
    f560:	300cc03a 	cmpne	r6,r6,zero
    f564:	0011883a 	mov	r8,zero
    f568:	003f5606 	br	f2c4 <__alt_mem_Flash_flash_data+0xf400f2c4>
    f56c:	2c48b03a 	or	r4,r5,r17
    f570:	20003b26 	beq	r4,zero,f660 <__adddf3+0x610>
    f574:	00c6303a 	nor	r3,zero,r3
    f578:	1800371e 	bne	r3,zero,f658 <__adddf3+0x608>
    f57c:	3463c83a 	sub	r17,r6,r17
    f580:	414bc83a 	sub	r5,r8,r5
    f584:	344d803a 	cmpltu	r6,r6,r17
    f588:	298bc83a 	sub	r5,r5,r6
    f58c:	1021883a 	mov	r16,r2
    f590:	3825883a 	mov	r18,r7
    f594:	003f0a06 	br	f1c0 <__alt_mem_Flash_flash_data+0xf400f1c0>
    f598:	1023883a 	mov	r17,r2
    f59c:	003f0d06 	br	f1d4 <__alt_mem_Flash_flash_data+0xf400f1d4>
    f5a0:	0007883a 	mov	r3,zero
    f5a4:	000b883a 	mov	r5,zero
    f5a8:	0023883a 	mov	r17,zero
    f5ac:	003f2706 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f5b0:	0027883a 	mov	r19,zero
    f5b4:	003fb706 	br	f494 <__alt_mem_Flash_flash_data+0xf400f494>
    f5b8:	0011883a 	mov	r8,zero
    f5bc:	003fc206 	br	f4c8 <__alt_mem_Flash_flash_data+0xf400f4c8>
    f5c0:	2c44b03a 	or	r2,r5,r17
    f5c4:	8000871e 	bne	r16,zero,f7e4 <__adddf3+0x794>
    f5c8:	1000b126 	beq	r2,zero,f890 <__adddf3+0x840>
    f5cc:	4184b03a 	or	r2,r8,r6
    f5d0:	103ebe26 	beq	r2,zero,f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f5d4:	3445883a 	add	r2,r6,r17
    f5d8:	1463803a 	cmpltu	r17,r2,r17
    f5dc:	414b883a 	add	r5,r8,r5
    f5e0:	2c4b883a 	add	r5,r5,r17
    f5e4:	28c0202c 	andhi	r3,r5,128
    f5e8:	1023883a 	mov	r17,r2
    f5ec:	183f6326 	beq	r3,zero,f37c <__alt_mem_Flash_flash_data+0xf400f37c>
    f5f0:	00bfe034 	movhi	r2,65408
    f5f4:	10bfffc4 	addi	r2,r2,-1
    f5f8:	2021883a 	mov	r16,r4
    f5fc:	288a703a 	and	r5,r5,r2
    f600:	003eb206 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f604:	2c44b03a 	or	r2,r5,r17
    f608:	8000251e 	bne	r16,zero,f6a0 <__adddf3+0x650>
    f60c:	10004b1e 	bne	r2,zero,f73c <__adddf3+0x6ec>
    f610:	4184b03a 	or	r2,r8,r6
    f614:	103fe226 	beq	r2,zero,f5a0 <__alt_mem_Flash_flash_data+0xf400f5a0>
    f618:	400b883a 	mov	r5,r8
    f61c:	3023883a 	mov	r17,r6
    f620:	3825883a 	mov	r18,r7
    f624:	003ea906 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f628:	20bff804 	addi	r2,r4,-32
    f62c:	01c00804 	movi	r7,32
    f630:	4084d83a 	srl	r2,r8,r2
    f634:	21c07e26 	beq	r4,r7,f830 <__adddf3+0x7e0>
    f638:	01c01004 	movi	r7,64
    f63c:	3909c83a 	sub	r4,r7,r4
    f640:	4110983a 	sll	r8,r8,r4
    f644:	418cb03a 	or	r6,r8,r6
    f648:	300cc03a 	cmpne	r6,r6,zero
    f64c:	308cb03a 	or	r6,r6,r2
    f650:	0011883a 	mov	r8,zero
    f654:	003f1b06 	br	f2c4 <__alt_mem_Flash_flash_data+0xf400f2c4>
    f658:	0101ffc4 	movi	r4,2047
    f65c:	113fa41e 	bne	r2,r4,f4f0 <__alt_mem_Flash_flash_data+0xf400f4f0>
    f660:	400b883a 	mov	r5,r8
    f664:	3023883a 	mov	r17,r6
    f668:	1021883a 	mov	r16,r2
    f66c:	3825883a 	mov	r18,r7
    f670:	003e9606 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f674:	80001a1e 	bne	r16,zero,f6e0 <__adddf3+0x690>
    f678:	2c4eb03a 	or	r7,r5,r17
    f67c:	38005526 	beq	r7,zero,f7d4 <__adddf3+0x784>
    f680:	0108303a 	nor	r4,zero,r4
    f684:	2000511e 	bne	r4,zero,f7cc <__adddf3+0x77c>
    f688:	89a3883a 	add	r17,r17,r6
    f68c:	414b883a 	add	r5,r8,r5
    f690:	898d803a 	cmpltu	r6,r17,r6
    f694:	298b883a 	add	r5,r5,r6
    f698:	1021883a 	mov	r16,r2
    f69c:	003f0e06 	br	f2d8 <__alt_mem_Flash_flash_data+0xf400f2d8>
    f6a0:	1000341e 	bne	r2,zero,f774 <__adddf3+0x724>
    f6a4:	4184b03a 	or	r2,r8,r6
    f6a8:	10006f26 	beq	r2,zero,f868 <__adddf3+0x818>
    f6ac:	400b883a 	mov	r5,r8
    f6b0:	3023883a 	mov	r17,r6
    f6b4:	3825883a 	mov	r18,r7
    f6b8:	0401ffc4 	movi	r16,2047
    f6bc:	003e8306 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f6c0:	2c62b03a 	or	r17,r5,r17
    f6c4:	8822c03a 	cmpne	r17,r17,zero
    f6c8:	0007883a 	mov	r3,zero
    f6cc:	003f9506 	br	f524 <__alt_mem_Flash_flash_data+0xf400f524>
    f6d0:	1021883a 	mov	r16,r2
    f6d4:	000b883a 	mov	r5,zero
    f6d8:	0023883a 	mov	r17,zero
    f6dc:	003edb06 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f6e0:	01c1ffc4 	movi	r7,2047
    f6e4:	11c03b26 	beq	r2,r7,f7d4 <__adddf3+0x784>
    f6e8:	0109c83a 	sub	r4,zero,r4
    f6ec:	29402034 	orhi	r5,r5,128
    f6f0:	01c00e04 	movi	r7,56
    f6f4:	39006216 	blt	r7,r4,f880 <__adddf3+0x830>
    f6f8:	01c007c4 	movi	r7,31
    f6fc:	39006b16 	blt	r7,r4,f8ac <__adddf3+0x85c>
    f700:	01c00804 	movi	r7,32
    f704:	390fc83a 	sub	r7,r7,r4
    f708:	29d4983a 	sll	r10,r5,r7
    f70c:	8912d83a 	srl	r9,r17,r4
    f710:	89ce983a 	sll	r7,r17,r7
    f714:	2908d83a 	srl	r4,r5,r4
    f718:	5262b03a 	or	r17,r10,r9
    f71c:	380ac03a 	cmpne	r5,r7,zero
    f720:	8962b03a 	or	r17,r17,r5
    f724:	89a3883a 	add	r17,r17,r6
    f728:	2211883a 	add	r8,r4,r8
    f72c:	898d803a 	cmpltu	r6,r17,r6
    f730:	418b883a 	add	r5,r8,r6
    f734:	1021883a 	mov	r16,r2
    f738:	003ee706 	br	f2d8 <__alt_mem_Flash_flash_data+0xf400f2d8>
    f73c:	4184b03a 	or	r2,r8,r6
    f740:	103e6226 	beq	r2,zero,f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f744:	8987c83a 	sub	r3,r17,r6
    f748:	88c9803a 	cmpltu	r4,r17,r3
    f74c:	2a05c83a 	sub	r2,r5,r8
    f750:	1105c83a 	sub	r2,r2,r4
    f754:	1100202c 	andhi	r4,r2,128
    f758:	203f0426 	beq	r4,zero,f36c <__alt_mem_Flash_flash_data+0xf400f36c>
    f75c:	3463c83a 	sub	r17,r6,r17
    f760:	414bc83a 	sub	r5,r8,r5
    f764:	344d803a 	cmpltu	r6,r6,r17
    f768:	298bc83a 	sub	r5,r5,r6
    f76c:	3825883a 	mov	r18,r7
    f770:	003e5606 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f774:	4184b03a 	or	r2,r8,r6
    f778:	10002b26 	beq	r2,zero,f828 <__adddf3+0x7d8>
    f77c:	2804d0fa 	srli	r2,r5,3
    f780:	8822d0fa 	srli	r17,r17,3
    f784:	280a977a 	slli	r5,r5,29
    f788:	10c0022c 	andhi	r3,r2,8
    f78c:	2c62b03a 	or	r17,r5,r17
    f790:	18000826 	beq	r3,zero,f7b4 <__adddf3+0x764>
    f794:	4008d0fa 	srli	r4,r8,3
    f798:	20c0022c 	andhi	r3,r4,8
    f79c:	1800051e 	bne	r3,zero,f7b4 <__adddf3+0x764>
    f7a0:	300cd0fa 	srli	r6,r6,3
    f7a4:	4010977a 	slli	r8,r8,29
    f7a8:	2005883a 	mov	r2,r4
    f7ac:	3825883a 	mov	r18,r7
    f7b0:	41a2b03a 	or	r17,r8,r6
    f7b4:	880ad77a 	srli	r5,r17,29
    f7b8:	100490fa 	slli	r2,r2,3
    f7bc:	882290fa 	slli	r17,r17,3
    f7c0:	0401ffc4 	movi	r16,2047
    f7c4:	288ab03a 	or	r5,r5,r2
    f7c8:	003e4006 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f7cc:	01c1ffc4 	movi	r7,2047
    f7d0:	11ffc71e 	bne	r2,r7,f6f0 <__alt_mem_Flash_flash_data+0xf400f6f0>
    f7d4:	400b883a 	mov	r5,r8
    f7d8:	3023883a 	mov	r17,r6
    f7dc:	1021883a 	mov	r16,r2
    f7e0:	003e3a06 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f7e4:	10002d26 	beq	r2,zero,f89c <__adddf3+0x84c>
    f7e8:	4184b03a 	or	r2,r8,r6
    f7ec:	10000e26 	beq	r2,zero,f828 <__adddf3+0x7d8>
    f7f0:	2804d0fa 	srli	r2,r5,3
    f7f4:	8822d0fa 	srli	r17,r17,3
    f7f8:	280a977a 	slli	r5,r5,29
    f7fc:	10c0022c 	andhi	r3,r2,8
    f800:	2c62b03a 	or	r17,r5,r17
    f804:	183feb26 	beq	r3,zero,f7b4 <__alt_mem_Flash_flash_data+0xf400f7b4>
    f808:	4008d0fa 	srli	r4,r8,3
    f80c:	20c0022c 	andhi	r3,r4,8
    f810:	183fe81e 	bne	r3,zero,f7b4 <__alt_mem_Flash_flash_data+0xf400f7b4>
    f814:	300cd0fa 	srli	r6,r6,3
    f818:	4010977a 	slli	r8,r8,29
    f81c:	2005883a 	mov	r2,r4
    f820:	41a2b03a 	or	r17,r8,r6
    f824:	003fe306 	br	f7b4 <__alt_mem_Flash_flash_data+0xf400f7b4>
    f828:	0401ffc4 	movi	r16,2047
    f82c:	003e2706 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f830:	0011883a 	mov	r8,zero
    f834:	003f8306 	br	f644 <__alt_mem_Flash_flash_data+0xf400f644>
    f838:	193ff804 	addi	r4,r3,-32
    f83c:	02400804 	movi	r9,32
    f840:	2908d83a 	srl	r4,r5,r4
    f844:	1a402526 	beq	r3,r9,f8dc <__adddf3+0x88c>
    f848:	02401004 	movi	r9,64
    f84c:	48c7c83a 	sub	r3,r9,r3
    f850:	28ca983a 	sll	r5,r5,r3
    f854:	2c62b03a 	or	r17,r5,r17
    f858:	8822c03a 	cmpne	r17,r17,zero
    f85c:	8922b03a 	or	r17,r17,r4
    f860:	0007883a 	mov	r3,zero
    f864:	003f2f06 	br	f524 <__alt_mem_Flash_flash_data+0xf400f524>
    f868:	01402034 	movhi	r5,128
    f86c:	0007883a 	mov	r3,zero
    f870:	297fffc4 	addi	r5,r5,-1
    f874:	047ffe04 	movi	r17,-8
    f878:	0401ffc4 	movi	r16,2047
    f87c:	003e7306 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f880:	2c62b03a 	or	r17,r5,r17
    f884:	8822c03a 	cmpne	r17,r17,zero
    f888:	0009883a 	mov	r4,zero
    f88c:	003fa506 	br	f724 <__alt_mem_Flash_flash_data+0xf400f724>
    f890:	400b883a 	mov	r5,r8
    f894:	3023883a 	mov	r17,r6
    f898:	003e0c06 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f89c:	400b883a 	mov	r5,r8
    f8a0:	3023883a 	mov	r17,r6
    f8a4:	0401ffc4 	movi	r16,2047
    f8a8:	003e0806 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f8ac:	21fff804 	addi	r7,r4,-32
    f8b0:	02400804 	movi	r9,32
    f8b4:	29ced83a 	srl	r7,r5,r7
    f8b8:	22400a26 	beq	r4,r9,f8e4 <__adddf3+0x894>
    f8bc:	02401004 	movi	r9,64
    f8c0:	4909c83a 	sub	r4,r9,r4
    f8c4:	290a983a 	sll	r5,r5,r4
    f8c8:	2c62b03a 	or	r17,r5,r17
    f8cc:	8822c03a 	cmpne	r17,r17,zero
    f8d0:	89e2b03a 	or	r17,r17,r7
    f8d4:	0009883a 	mov	r4,zero
    f8d8:	003f9206 	br	f724 <__alt_mem_Flash_flash_data+0xf400f724>
    f8dc:	000b883a 	mov	r5,zero
    f8e0:	003fdc06 	br	f854 <__alt_mem_Flash_flash_data+0xf400f854>
    f8e4:	000b883a 	mov	r5,zero
    f8e8:	003ff706 	br	f8c8 <__alt_mem_Flash_flash_data+0xf400f8c8>

0000f8ec <__divdf3>:
    f8ec:	defff204 	addi	sp,sp,-56
    f8f0:	dd000815 	stw	r20,32(sp)
    f8f4:	2828d53a 	srli	r20,r5,20
    f8f8:	dd800a15 	stw	r22,40(sp)
    f8fc:	282cd7fa 	srli	r22,r5,31
    f900:	dc000415 	stw	r16,16(sp)
    f904:	04000434 	movhi	r16,16
    f908:	df000c15 	stw	fp,48(sp)
    f90c:	dcc00715 	stw	r19,28(sp)
    f910:	dc800615 	stw	r18,24(sp)
    f914:	dc400515 	stw	r17,20(sp)
    f918:	843fffc4 	addi	r16,r16,-1
    f91c:	dfc00d15 	stw	ra,52(sp)
    f920:	ddc00b15 	stw	r23,44(sp)
    f924:	dd400915 	stw	r21,36(sp)
    f928:	a501ffcc 	andi	r20,r20,2047
    f92c:	2025883a 	mov	r18,r4
    f930:	2027883a 	mov	r19,r4
    f934:	2c22703a 	and	r17,r5,r16
    f938:	b7003fcc 	andi	fp,r22,255
    f93c:	a0005e26 	beq	r20,zero,fab8 <__divdf3+0x1cc>
    f940:	0081ffc4 	movi	r2,2047
    f944:	a0803526 	beq	r20,r2,fa1c <__divdf3+0x130>
    f948:	8c000434 	orhi	r16,r17,16
    f94c:	2004d77a 	srli	r2,r4,29
    f950:	802090fa 	slli	r16,r16,3
    f954:	202690fa 	slli	r19,r4,3
    f958:	a53f0044 	addi	r20,r20,-1023
    f95c:	80a2b03a 	or	r17,r16,r2
    f960:	0025883a 	mov	r18,zero
    f964:	0011883a 	mov	r8,zero
    f968:	380ad53a 	srli	r5,r7,20
    f96c:	382ed7fa 	srli	r23,r7,31
    f970:	04000434 	movhi	r16,16
    f974:	843fffc4 	addi	r16,r16,-1
    f978:	2941ffcc 	andi	r5,r5,2047
    f97c:	302b883a 	mov	r21,r6
    f980:	3c20703a 	and	r16,r7,r16
    f984:	ba403fcc 	andi	r9,r23,255
    f988:	28006726 	beq	r5,zero,fb28 <__divdf3+0x23c>
    f98c:	0081ffc4 	movi	r2,2047
    f990:	28805f26 	beq	r5,r2,fb10 <__divdf3+0x224>
    f994:	84000434 	orhi	r16,r16,16
    f998:	3004d77a 	srli	r2,r6,29
    f99c:	802090fa 	slli	r16,r16,3
    f9a0:	302a90fa 	slli	r21,r6,3
    f9a4:	297f0044 	addi	r5,r5,-1023
    f9a8:	80a0b03a 	or	r16,r16,r2
    f9ac:	000f883a 	mov	r7,zero
    f9b0:	3c86b03a 	or	r3,r7,r18
    f9b4:	180690ba 	slli	r3,r3,2
    f9b8:	00800074 	movhi	r2,1
    f9bc:	10be7704 	addi	r2,r2,-1572
    f9c0:	1887883a 	add	r3,r3,r2
    f9c4:	18c00017 	ldw	r3,0(r3)
    f9c8:	b5c8f03a 	xor	r4,r22,r23
    f9cc:	200d883a 	mov	r6,r4
    f9d0:	24803fcc 	andi	r18,r4,255
    f9d4:	a169c83a 	sub	r20,r20,r5
    f9d8:	1800683a 	jmp	r3
    f9dc:	0000fc24 	muli	zero,zero,1008
    f9e0:	0000fa54 	movui	zero,1001
    f9e4:	0000fbe8 	cmpgeui	zero,zero,1007
    f9e8:	0000fa38 	rdprs	zero,zero,1000
    f9ec:	0000fbe8 	cmpgeui	zero,zero,1007
    f9f0:	0000fbbc 	xorhi	zero,zero,1006
    f9f4:	0000fbe8 	cmpgeui	zero,zero,1007
    f9f8:	0000fa38 	rdprs	zero,zero,1000
    f9fc:	0000fa54 	movui	zero,1001
    fa00:	0000fa54 	movui	zero,1001
    fa04:	0000fbbc 	xorhi	zero,zero,1006
    fa08:	0000fa38 	rdprs	zero,zero,1000
    fa0c:	0000fa48 	cmpgei	zero,zero,1001
    fa10:	0000fa48 	cmpgei	zero,zero,1001
    fa14:	0000fa48 	cmpgei	zero,zero,1001
    fa18:	0000fbf8 	rdprs	zero,zero,1007
    fa1c:	8904b03a 	or	r2,r17,r4
    fa20:	1000631e 	bne	r2,zero,fbb0 <__divdf3+0x2c4>
    fa24:	04800204 	movi	r18,8
    fa28:	0023883a 	mov	r17,zero
    fa2c:	0027883a 	mov	r19,zero
    fa30:	02000084 	movi	r8,2
    fa34:	003fcc06 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fa38:	8023883a 	mov	r17,r16
    fa3c:	a827883a 	mov	r19,r21
    fa40:	4839883a 	mov	fp,r9
    fa44:	3811883a 	mov	r8,r7
    fa48:	00800084 	movi	r2,2
    fa4c:	40812a1e 	bne	r8,r2,fef8 <__divdf3+0x60c>
    fa50:	e025883a 	mov	r18,fp
    fa54:	9180004c 	andi	r6,r18,1
    fa58:	0101ffc4 	movi	r4,2047
    fa5c:	000b883a 	mov	r5,zero
    fa60:	0027883a 	mov	r19,zero
    fa64:	2008953a 	slli	r4,r4,20
    fa68:	30c03fcc 	andi	r3,r6,255
    fa6c:	04000434 	movhi	r16,16
    fa70:	180697fa 	slli	r3,r3,31
    fa74:	843fffc4 	addi	r16,r16,-1
    fa78:	2c20703a 	and	r16,r5,r16
    fa7c:	8120b03a 	or	r16,r16,r4
    fa80:	80c6b03a 	or	r3,r16,r3
    fa84:	9805883a 	mov	r2,r19
    fa88:	dfc00d17 	ldw	ra,52(sp)
    fa8c:	df000c17 	ldw	fp,48(sp)
    fa90:	ddc00b17 	ldw	r23,44(sp)
    fa94:	dd800a17 	ldw	r22,40(sp)
    fa98:	dd400917 	ldw	r21,36(sp)
    fa9c:	dd000817 	ldw	r20,32(sp)
    faa0:	dcc00717 	ldw	r19,28(sp)
    faa4:	dc800617 	ldw	r18,24(sp)
    faa8:	dc400517 	ldw	r17,20(sp)
    faac:	dc000417 	ldw	r16,16(sp)
    fab0:	dec00e04 	addi	sp,sp,56
    fab4:	f800283a 	ret
    fab8:	8904b03a 	or	r2,r17,r4
    fabc:	10003726 	beq	r2,zero,fb9c <__divdf3+0x2b0>
    fac0:	88011c26 	beq	r17,zero,ff34 <__divdf3+0x648>
    fac4:	8809883a 	mov	r4,r17
    fac8:	d9800315 	stw	r6,12(sp)
    facc:	d9c00115 	stw	r7,4(sp)
    fad0:	00115ec0 	call	115ec <__clzsi2>
    fad4:	d9800317 	ldw	r6,12(sp)
    fad8:	d9c00117 	ldw	r7,4(sp)
    fadc:	1007883a 	mov	r3,r2
    fae0:	01000a04 	movi	r4,40
    fae4:	1cfffe04 	addi	r19,r3,-8
    fae8:	20c9c83a 	sub	r4,r4,r3
    faec:	8cca983a 	sll	r5,r17,r19
    faf0:	9108d83a 	srl	r4,r18,r4
    faf4:	94e6983a 	sll	r19,r18,r19
    faf8:	2162b03a 	or	r17,r4,r5
    fafc:	053f0344 	movi	r20,-1011
    fb00:	a0e9c83a 	sub	r20,r20,r3
    fb04:	0025883a 	mov	r18,zero
    fb08:	0011883a 	mov	r8,zero
    fb0c:	003f9606 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fb10:	8184b03a 	or	r2,r16,r6
    fb14:	10001f1e 	bne	r2,zero,fb94 <__divdf3+0x2a8>
    fb18:	0021883a 	mov	r16,zero
    fb1c:	002b883a 	mov	r21,zero
    fb20:	01c00084 	movi	r7,2
    fb24:	003fa206 	br	f9b0 <__alt_mem_Flash_flash_data+0xf400f9b0>
    fb28:	8184b03a 	or	r2,r16,r6
    fb2c:	10001526 	beq	r2,zero,fb84 <__divdf3+0x298>
    fb30:	80010c26 	beq	r16,zero,ff64 <__divdf3+0x678>
    fb34:	8009883a 	mov	r4,r16
    fb38:	d9800315 	stw	r6,12(sp)
    fb3c:	da000215 	stw	r8,8(sp)
    fb40:	da400015 	stw	r9,0(sp)
    fb44:	00115ec0 	call	115ec <__clzsi2>
    fb48:	d9800317 	ldw	r6,12(sp)
    fb4c:	da000217 	ldw	r8,8(sp)
    fb50:	da400017 	ldw	r9,0(sp)
    fb54:	1007883a 	mov	r3,r2
    fb58:	01000a04 	movi	r4,40
    fb5c:	1d7ffe04 	addi	r21,r3,-8
    fb60:	20c9c83a 	sub	r4,r4,r3
    fb64:	8560983a 	sll	r16,r16,r21
    fb68:	3108d83a 	srl	r4,r6,r4
    fb6c:	356a983a 	sll	r21,r6,r21
    fb70:	2420b03a 	or	r16,r4,r16
    fb74:	017f0344 	movi	r5,-1011
    fb78:	28cbc83a 	sub	r5,r5,r3
    fb7c:	000f883a 	mov	r7,zero
    fb80:	003f8b06 	br	f9b0 <__alt_mem_Flash_flash_data+0xf400f9b0>
    fb84:	0021883a 	mov	r16,zero
    fb88:	002b883a 	mov	r21,zero
    fb8c:	01c00044 	movi	r7,1
    fb90:	003f8706 	br	f9b0 <__alt_mem_Flash_flash_data+0xf400f9b0>
    fb94:	01c000c4 	movi	r7,3
    fb98:	003f8506 	br	f9b0 <__alt_mem_Flash_flash_data+0xf400f9b0>
    fb9c:	04800104 	movi	r18,4
    fba0:	0023883a 	mov	r17,zero
    fba4:	0027883a 	mov	r19,zero
    fba8:	02000044 	movi	r8,1
    fbac:	003f6e06 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fbb0:	04800304 	movi	r18,12
    fbb4:	020000c4 	movi	r8,3
    fbb8:	003f6b06 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fbbc:	01400434 	movhi	r5,16
    fbc0:	000d883a 	mov	r6,zero
    fbc4:	297fffc4 	addi	r5,r5,-1
    fbc8:	04ffffc4 	movi	r19,-1
    fbcc:	0101ffc4 	movi	r4,2047
    fbd0:	003fa406 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
    fbd4:	043f0084 	movi	r16,-1022
    fbd8:	8521c83a 	sub	r16,r16,r20
    fbdc:	00800e04 	movi	r2,56
    fbe0:	1401200e 	bge	r2,r16,10064 <__divdf3+0x778>
    fbe4:	9180004c 	andi	r6,r18,1
    fbe8:	0009883a 	mov	r4,zero
    fbec:	000b883a 	mov	r5,zero
    fbf0:	0027883a 	mov	r19,zero
    fbf4:	003f9b06 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
    fbf8:	8880022c 	andhi	r2,r17,8
    fbfc:	1000c726 	beq	r2,zero,ff1c <__divdf3+0x630>
    fc00:	8080022c 	andhi	r2,r16,8
    fc04:	1000c51e 	bne	r2,zero,ff1c <__divdf3+0x630>
    fc08:	00800434 	movhi	r2,16
    fc0c:	81400234 	orhi	r5,r16,8
    fc10:	10bfffc4 	addi	r2,r2,-1
    fc14:	b80d883a 	mov	r6,r23
    fc18:	288a703a 	and	r5,r5,r2
    fc1c:	a827883a 	mov	r19,r21
    fc20:	003fea06 	br	fbcc <__alt_mem_Flash_flash_data+0xf400fbcc>
    fc24:	8440ea36 	bltu	r16,r17,ffd0 <__divdf3+0x6e4>
    fc28:	8c00e826 	beq	r17,r16,ffcc <__divdf3+0x6e0>
    fc2c:	a53fffc4 	addi	r20,r20,-1
    fc30:	882d883a 	mov	r22,r17
    fc34:	000d883a 	mov	r6,zero
    fc38:	a804d63a 	srli	r2,r21,24
    fc3c:	8020923a 	slli	r16,r16,8
    fc40:	b009883a 	mov	r4,r22
    fc44:	d9800315 	stw	r6,12(sp)
    fc48:	1420b03a 	or	r16,r2,r16
    fc4c:	802ed43a 	srli	r23,r16,16
    fc50:	873fffcc 	andi	fp,r16,65535
    fc54:	a82a923a 	slli	r21,r21,8
    fc58:	b80b883a 	mov	r5,r23
    fc5c:	000f0400 	call	f040 <__udivsi3>
    fc60:	b009883a 	mov	r4,r22
    fc64:	b80b883a 	mov	r5,r23
    fc68:	1023883a 	mov	r17,r2
    fc6c:	000f0480 	call	f048 <__umodsi3>
    fc70:	1004943a 	slli	r2,r2,16
    fc74:	9808d43a 	srli	r4,r19,16
    fc78:	8f2d383a 	mul	r22,r17,fp
    fc7c:	d9800317 	ldw	r6,12(sp)
    fc80:	1106b03a 	or	r3,r2,r4
    fc84:	1d80062e 	bgeu	r3,r22,fca0 <__divdf3+0x3b4>
    fc88:	1c07883a 	add	r3,r3,r16
    fc8c:	88bfffc4 	addi	r2,r17,-1
    fc90:	1c00dc36 	bltu	r3,r16,10004 <__divdf3+0x718>
    fc94:	1d80db2e 	bgeu	r3,r22,10004 <__divdf3+0x718>
    fc98:	8c7fff84 	addi	r17,r17,-2
    fc9c:	1c07883a 	add	r3,r3,r16
    fca0:	1dadc83a 	sub	r22,r3,r22
    fca4:	b009883a 	mov	r4,r22
    fca8:	b80b883a 	mov	r5,r23
    fcac:	d9800315 	stw	r6,12(sp)
    fcb0:	000f0400 	call	f040 <__udivsi3>
    fcb4:	b009883a 	mov	r4,r22
    fcb8:	b80b883a 	mov	r5,r23
    fcbc:	d8800015 	stw	r2,0(sp)
    fcc0:	000f0480 	call	f048 <__umodsi3>
    fcc4:	da400017 	ldw	r9,0(sp)
    fcc8:	1004943a 	slli	r2,r2,16
    fccc:	9cffffcc 	andi	r19,r19,65535
    fcd0:	4f07383a 	mul	r3,r9,fp
    fcd4:	14c8b03a 	or	r4,r2,r19
    fcd8:	d9800317 	ldw	r6,12(sp)
    fcdc:	20c0062e 	bgeu	r4,r3,fcf8 <__divdf3+0x40c>
    fce0:	2409883a 	add	r4,r4,r16
    fce4:	48bfffc4 	addi	r2,r9,-1
    fce8:	2400c436 	bltu	r4,r16,fffc <__divdf3+0x710>
    fcec:	20c0c32e 	bgeu	r4,r3,fffc <__divdf3+0x710>
    fcf0:	4a7fff84 	addi	r9,r9,-2
    fcf4:	2409883a 	add	r4,r4,r16
    fcf8:	8822943a 	slli	r17,r17,16
    fcfc:	a80ed43a 	srli	r7,r21,16
    fd00:	aa3fffcc 	andi	r8,r21,65535
    fd04:	4c62b03a 	or	r17,r9,r17
    fd08:	8816d43a 	srli	r11,r17,16
    fd0c:	897fffcc 	andi	r5,r17,65535
    fd10:	2a15383a 	mul	r10,r5,r8
    fd14:	5a19383a 	mul	r12,r11,r8
    fd18:	29cb383a 	mul	r5,r5,r7
    fd1c:	5012d43a 	srli	r9,r10,16
    fd20:	20c5c83a 	sub	r2,r4,r3
    fd24:	614b883a 	add	r5,r12,r5
    fd28:	2a4b883a 	add	r5,r5,r9
    fd2c:	59c7383a 	mul	r3,r11,r7
    fd30:	2b00022e 	bgeu	r5,r12,fd3c <__divdf3+0x450>
    fd34:	01000074 	movhi	r4,1
    fd38:	1907883a 	add	r3,r3,r4
    fd3c:	2808d43a 	srli	r4,r5,16
    fd40:	280a943a 	slli	r5,r5,16
    fd44:	54ffffcc 	andi	r19,r10,65535
    fd48:	1907883a 	add	r3,r3,r4
    fd4c:	2ccb883a 	add	r5,r5,r19
    fd50:	10c09336 	bltu	r2,r3,ffa0 <__divdf3+0x6b4>
    fd54:	10c0ad26 	beq	r2,r3,1000c <__divdf3+0x720>
    fd58:	10c7c83a 	sub	r3,r2,r3
    fd5c:	3167c83a 	sub	r19,r6,r5
    fd60:	34ed803a 	cmpltu	r22,r6,r19
    fd64:	1dadc83a 	sub	r22,r3,r22
    fd68:	b400b226 	beq	r22,r16,10034 <__divdf3+0x748>
    fd6c:	b009883a 	mov	r4,r22
    fd70:	b80b883a 	mov	r5,r23
    fd74:	d9c00115 	stw	r7,4(sp)
    fd78:	da000215 	stw	r8,8(sp)
    fd7c:	000f0400 	call	f040 <__udivsi3>
    fd80:	b009883a 	mov	r4,r22
    fd84:	b80b883a 	mov	r5,r23
    fd88:	d8800315 	stw	r2,12(sp)
    fd8c:	000f0480 	call	f048 <__umodsi3>
    fd90:	d9800317 	ldw	r6,12(sp)
    fd94:	1004943a 	slli	r2,r2,16
    fd98:	9808d43a 	srli	r4,r19,16
    fd9c:	372d383a 	mul	r22,r6,fp
    fda0:	d9c00117 	ldw	r7,4(sp)
    fda4:	1106b03a 	or	r3,r2,r4
    fda8:	da000217 	ldw	r8,8(sp)
    fdac:	1d80062e 	bgeu	r3,r22,fdc8 <__divdf3+0x4dc>
    fdb0:	1c07883a 	add	r3,r3,r16
    fdb4:	30bfffc4 	addi	r2,r6,-1
    fdb8:	1c00a036 	bltu	r3,r16,1003c <__divdf3+0x750>
    fdbc:	1d809f2e 	bgeu	r3,r22,1003c <__divdf3+0x750>
    fdc0:	31bfff84 	addi	r6,r6,-2
    fdc4:	1c07883a 	add	r3,r3,r16
    fdc8:	1dadc83a 	sub	r22,r3,r22
    fdcc:	b009883a 	mov	r4,r22
    fdd0:	b80b883a 	mov	r5,r23
    fdd4:	d9800315 	stw	r6,12(sp)
    fdd8:	d9c00115 	stw	r7,4(sp)
    fddc:	da000215 	stw	r8,8(sp)
    fde0:	000f0400 	call	f040 <__udivsi3>
    fde4:	b009883a 	mov	r4,r22
    fde8:	b80b883a 	mov	r5,r23
    fdec:	d8800015 	stw	r2,0(sp)
    fdf0:	000f0480 	call	f048 <__umodsi3>
    fdf4:	da400017 	ldw	r9,0(sp)
    fdf8:	1004943a 	slli	r2,r2,16
    fdfc:	993fffcc 	andi	r4,r19,65535
    fe00:	4f39383a 	mul	fp,r9,fp
    fe04:	1106b03a 	or	r3,r2,r4
    fe08:	d9800317 	ldw	r6,12(sp)
    fe0c:	d9c00117 	ldw	r7,4(sp)
    fe10:	da000217 	ldw	r8,8(sp)
    fe14:	1f00062e 	bgeu	r3,fp,fe30 <__divdf3+0x544>
    fe18:	1c07883a 	add	r3,r3,r16
    fe1c:	48bfffc4 	addi	r2,r9,-1
    fe20:	1c008836 	bltu	r3,r16,10044 <__divdf3+0x758>
    fe24:	1f00872e 	bgeu	r3,fp,10044 <__divdf3+0x758>
    fe28:	4a7fff84 	addi	r9,r9,-2
    fe2c:	1c07883a 	add	r3,r3,r16
    fe30:	3008943a 	slli	r4,r6,16
    fe34:	1f07c83a 	sub	r3,r3,fp
    fe38:	4926b03a 	or	r19,r9,r4
    fe3c:	993fffcc 	andi	r4,r19,65535
    fe40:	980cd43a 	srli	r6,r19,16
    fe44:	220b383a 	mul	r5,r4,r8
    fe48:	21c5383a 	mul	r2,r4,r7
    fe4c:	3211383a 	mul	r8,r6,r8
    fe50:	2808d43a 	srli	r4,r5,16
    fe54:	31cf383a 	mul	r7,r6,r7
    fe58:	4085883a 	add	r2,r8,r2
    fe5c:	1105883a 	add	r2,r2,r4
    fe60:	1200022e 	bgeu	r2,r8,fe6c <__divdf3+0x580>
    fe64:	01000074 	movhi	r4,1
    fe68:	390f883a 	add	r7,r7,r4
    fe6c:	1008d43a 	srli	r4,r2,16
    fe70:	1004943a 	slli	r2,r2,16
    fe74:	297fffcc 	andi	r5,r5,65535
    fe78:	390f883a 	add	r7,r7,r4
    fe7c:	1145883a 	add	r2,r2,r5
    fe80:	19c06536 	bltu	r3,r7,10018 <__divdf3+0x72c>
    fe84:	19c09f26 	beq	r3,r7,10104 <__divdf3+0x818>
    fe88:	9cc00054 	ori	r19,r19,1
    fe8c:	a100ffc4 	addi	r4,r20,1023
    fe90:	013f500e 	bge	zero,r4,fbd4 <__alt_mem_Flash_flash_data+0xf400fbd4>
    fe94:	988001cc 	andi	r2,r19,7
    fe98:	10000726 	beq	r2,zero,feb8 <__divdf3+0x5cc>
    fe9c:	98c003cc 	andi	r3,r19,15
    fea0:	00800104 	movi	r2,4
    fea4:	18800426 	beq	r3,r2,feb8 <__divdf3+0x5cc>
    fea8:	9885883a 	add	r2,r19,r2
    feac:	14e1803a 	cmpltu	r16,r2,r19
    feb0:	8c23883a 	add	r17,r17,r16
    feb4:	1027883a 	mov	r19,r2
    feb8:	8880402c 	andhi	r2,r17,256
    febc:	10000426 	beq	r2,zero,fed0 <__divdf3+0x5e4>
    fec0:	00bfc034 	movhi	r2,65280
    fec4:	10bfffc4 	addi	r2,r2,-1
    fec8:	a1010004 	addi	r4,r20,1024
    fecc:	88a2703a 	and	r17,r17,r2
    fed0:	0081ff84 	movi	r2,2046
    fed4:	113edf16 	blt	r2,r4,fa54 <__alt_mem_Flash_flash_data+0xf400fa54>
    fed8:	9826d0fa 	srli	r19,r19,3
    fedc:	8804977a 	slli	r2,r17,29
    fee0:	8820927a 	slli	r16,r17,9
    fee4:	2101ffcc 	andi	r4,r4,2047
    fee8:	14e6b03a 	or	r19,r2,r19
    feec:	800ad33a 	srli	r5,r16,12
    fef0:	9180004c 	andi	r6,r18,1
    fef4:	003edb06 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
    fef8:	008000c4 	movi	r2,3
    fefc:	4080a826 	beq	r8,r2,101a0 <__divdf3+0x8b4>
    ff00:	00800044 	movi	r2,1
    ff04:	4080551e 	bne	r8,r2,1005c <__divdf3+0x770>
    ff08:	e00d883a 	mov	r6,fp
    ff0c:	0009883a 	mov	r4,zero
    ff10:	000b883a 	mov	r5,zero
    ff14:	0027883a 	mov	r19,zero
    ff18:	003ed206 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
    ff1c:	00800434 	movhi	r2,16
    ff20:	89400234 	orhi	r5,r17,8
    ff24:	10bfffc4 	addi	r2,r2,-1
    ff28:	b00d883a 	mov	r6,r22
    ff2c:	288a703a 	and	r5,r5,r2
    ff30:	003f2606 	br	fbcc <__alt_mem_Flash_flash_data+0xf400fbcc>
    ff34:	d9800315 	stw	r6,12(sp)
    ff38:	d9c00115 	stw	r7,4(sp)
    ff3c:	00115ec0 	call	115ec <__clzsi2>
    ff40:	10c00804 	addi	r3,r2,32
    ff44:	010009c4 	movi	r4,39
    ff48:	d9800317 	ldw	r6,12(sp)
    ff4c:	d9c00117 	ldw	r7,4(sp)
    ff50:	20fee30e 	bge	r4,r3,fae0 <__alt_mem_Flash_flash_data+0xf400fae0>
    ff54:	117ffe04 	addi	r5,r2,-8
    ff58:	9162983a 	sll	r17,r18,r5
    ff5c:	0027883a 	mov	r19,zero
    ff60:	003ee606 	br	fafc <__alt_mem_Flash_flash_data+0xf400fafc>
    ff64:	3009883a 	mov	r4,r6
    ff68:	d9800315 	stw	r6,12(sp)
    ff6c:	da000215 	stw	r8,8(sp)
    ff70:	da400015 	stw	r9,0(sp)
    ff74:	00115ec0 	call	115ec <__clzsi2>
    ff78:	10c00804 	addi	r3,r2,32
    ff7c:	010009c4 	movi	r4,39
    ff80:	d9800317 	ldw	r6,12(sp)
    ff84:	da000217 	ldw	r8,8(sp)
    ff88:	da400017 	ldw	r9,0(sp)
    ff8c:	20fef20e 	bge	r4,r3,fb58 <__alt_mem_Flash_flash_data+0xf400fb58>
    ff90:	10bffe04 	addi	r2,r2,-8
    ff94:	a8a0983a 	sll	r16,r21,r2
    ff98:	002b883a 	mov	r21,zero
    ff9c:	003ef506 	br	fb74 <__alt_mem_Flash_flash_data+0xf400fb74>
    ffa0:	354d883a 	add	r6,r6,r21
    ffa4:	3549803a 	cmpltu	r4,r6,r21
    ffa8:	2409883a 	add	r4,r4,r16
    ffac:	2089883a 	add	r4,r4,r2
    ffb0:	88bfffc4 	addi	r2,r17,-1
    ffb4:	81000c2e 	bgeu	r16,r4,ffe8 <__divdf3+0x6fc>
    ffb8:	20c04436 	bltu	r4,r3,100cc <__divdf3+0x7e0>
    ffbc:	19006f26 	beq	r3,r4,1017c <__divdf3+0x890>
    ffc0:	20c7c83a 	sub	r3,r4,r3
    ffc4:	1023883a 	mov	r17,r2
    ffc8:	003f6406 	br	fd5c <__alt_mem_Flash_flash_data+0xf400fd5c>
    ffcc:	9d7f1736 	bltu	r19,r21,fc2c <__alt_mem_Flash_flash_data+0xf400fc2c>
    ffd0:	9806d07a 	srli	r3,r19,1
    ffd4:	880497fa 	slli	r2,r17,31
    ffd8:	980c97fa 	slli	r6,r19,31
    ffdc:	882cd07a 	srli	r22,r17,1
    ffe0:	18a6b03a 	or	r19,r3,r2
    ffe4:	003f1406 	br	fc38 <__alt_mem_Flash_flash_data+0xf400fc38>
    ffe8:	243ff51e 	bne	r4,r16,ffc0 <__alt_mem_Flash_flash_data+0xf400ffc0>
    ffec:	357ff22e 	bgeu	r6,r21,ffb8 <__alt_mem_Flash_flash_data+0xf400ffb8>
    fff0:	80c7c83a 	sub	r3,r16,r3
    fff4:	1023883a 	mov	r17,r2
    fff8:	003f5806 	br	fd5c <__alt_mem_Flash_flash_data+0xf400fd5c>
    fffc:	1013883a 	mov	r9,r2
   10000:	003f3d06 	br	fcf8 <__alt_mem_Flash_flash_data+0xf400fcf8>
   10004:	1023883a 	mov	r17,r2
   10008:	003f2506 	br	fca0 <__alt_mem_Flash_flash_data+0xf400fca0>
   1000c:	317fe436 	bltu	r6,r5,ffa0 <__alt_mem_Flash_flash_data+0xf400ffa0>
   10010:	0007883a 	mov	r3,zero
   10014:	003f5106 	br	fd5c <__alt_mem_Flash_flash_data+0xf400fd5c>
   10018:	1c07883a 	add	r3,r3,r16
   1001c:	993fffc4 	addi	r4,r19,-1
   10020:	1c000a2e 	bgeu	r3,r16,1004c <__divdf3+0x760>
   10024:	2027883a 	mov	r19,r4
   10028:	19ff971e 	bne	r3,r7,fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
   1002c:	a8bf961e 	bne	r21,r2,fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
   10030:	003f9606 	br	fe8c <__alt_mem_Flash_flash_data+0xf400fe8c>
   10034:	04ffffc4 	movi	r19,-1
   10038:	003f9406 	br	fe8c <__alt_mem_Flash_flash_data+0xf400fe8c>
   1003c:	100d883a 	mov	r6,r2
   10040:	003f6106 	br	fdc8 <__alt_mem_Flash_flash_data+0xf400fdc8>
   10044:	1013883a 	mov	r9,r2
   10048:	003f7906 	br	fe30 <__alt_mem_Flash_flash_data+0xf400fe30>
   1004c:	19c02636 	bltu	r3,r7,100e8 <__divdf3+0x7fc>
   10050:	38c04d26 	beq	r7,r3,10188 <__divdf3+0x89c>
   10054:	2027883a 	mov	r19,r4
   10058:	003f8b06 	br	fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
   1005c:	e025883a 	mov	r18,fp
   10060:	003f8a06 	br	fe8c <__alt_mem_Flash_flash_data+0xf400fe8c>
   10064:	008007c4 	movi	r2,31
   10068:	14002a16 	blt	r2,r16,10114 <__divdf3+0x828>
   1006c:	a5010784 	addi	r20,r20,1054
   10070:	8d04983a 	sll	r2,r17,r20
   10074:	9c06d83a 	srl	r3,r19,r16
   10078:	9d28983a 	sll	r20,r19,r20
   1007c:	8c20d83a 	srl	r16,r17,r16
   10080:	1886b03a 	or	r3,r3,r2
   10084:	a004c03a 	cmpne	r2,r20,zero
   10088:	1884b03a 	or	r2,r3,r2
   1008c:	10c001cc 	andi	r3,r2,7
   10090:	18000726 	beq	r3,zero,100b0 <__divdf3+0x7c4>
   10094:	110003cc 	andi	r4,r2,15
   10098:	00c00104 	movi	r3,4
   1009c:	20c00426 	beq	r4,r3,100b0 <__divdf3+0x7c4>
   100a0:	10c00104 	addi	r3,r2,4
   100a4:	1885803a 	cmpltu	r2,r3,r2
   100a8:	80a1883a 	add	r16,r16,r2
   100ac:	1805883a 	mov	r2,r3
   100b0:	80c0202c 	andhi	r3,r16,128
   100b4:	18002d26 	beq	r3,zero,1016c <__divdf3+0x880>
   100b8:	9180004c 	andi	r6,r18,1
   100bc:	01000044 	movi	r4,1
   100c0:	000b883a 	mov	r5,zero
   100c4:	0027883a 	mov	r19,zero
   100c8:	003e6606 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
   100cc:	354d883a 	add	r6,r6,r21
   100d0:	356d803a 	cmpltu	r22,r6,r21
   100d4:	b42d883a 	add	r22,r22,r16
   100d8:	b12d883a 	add	r22,r22,r4
   100dc:	8c7fff84 	addi	r17,r17,-2
   100e0:	b0c7c83a 	sub	r3,r22,r3
   100e4:	003f1d06 	br	fd5c <__alt_mem_Flash_flash_data+0xf400fd5c>
   100e8:	ad4b883a 	add	r5,r21,r21
   100ec:	2d6b803a 	cmpltu	r21,r5,r21
   100f0:	ac2b883a 	add	r21,r21,r16
   100f4:	1d47883a 	add	r3,r3,r21
   100f8:	993fff84 	addi	r4,r19,-2
   100fc:	282b883a 	mov	r21,r5
   10100:	003fc806 	br	10024 <__alt_mem_Flash_flash_data+0xf4010024>
   10104:	103fc41e 	bne	r2,zero,10018 <__alt_mem_Flash_flash_data+0xf4010018>
   10108:	002b883a 	mov	r21,zero
   1010c:	a8bf5e1e 	bne	r21,r2,fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
   10110:	003f5e06 	br	fe8c <__alt_mem_Flash_flash_data+0xf400fe8c>
   10114:	00bef884 	movi	r2,-1054
   10118:	1505c83a 	sub	r2,r2,r20
   1011c:	00c00804 	movi	r3,32
   10120:	8884d83a 	srl	r2,r17,r2
   10124:	80c01c26 	beq	r16,r3,10198 <__divdf3+0x8ac>
   10128:	a0c10f84 	addi	r3,r20,1086
   1012c:	88c6983a 	sll	r3,r17,r3
   10130:	1cc6b03a 	or	r3,r3,r19
   10134:	1806c03a 	cmpne	r3,r3,zero
   10138:	1884b03a 	or	r2,r3,r2
   1013c:	140001cc 	andi	r16,r2,7
   10140:	8000061e 	bne	r16,zero,1015c <__divdf3+0x870>
   10144:	000b883a 	mov	r5,zero
   10148:	1004d0fa 	srli	r2,r2,3
   1014c:	9180004c 	andi	r6,r18,1
   10150:	0009883a 	mov	r4,zero
   10154:	1426b03a 	or	r19,r2,r16
   10158:	003e4206 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
   1015c:	110003cc 	andi	r4,r2,15
   10160:	00c00104 	movi	r3,4
   10164:	0021883a 	mov	r16,zero
   10168:	20ffcd1e 	bne	r4,r3,100a0 <__alt_mem_Flash_flash_data+0xf40100a0>
   1016c:	800a927a 	slli	r5,r16,9
   10170:	8020977a 	slli	r16,r16,29
   10174:	280ad33a 	srli	r5,r5,12
   10178:	003ff306 	br	10148 <__alt_mem_Flash_flash_data+0xf4010148>
   1017c:	317fd336 	bltu	r6,r5,100cc <__alt_mem_Flash_flash_data+0xf40100cc>
   10180:	1023883a 	mov	r17,r2
   10184:	003fa206 	br	10010 <__alt_mem_Flash_flash_data+0xf4010010>
   10188:	a8bfd736 	bltu	r21,r2,100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   1018c:	2027883a 	mov	r19,r4
   10190:	a8bf3d1e 	bne	r21,r2,fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
   10194:	003f3d06 	br	fe8c <__alt_mem_Flash_flash_data+0xf400fe8c>
   10198:	0007883a 	mov	r3,zero
   1019c:	003fe406 	br	10130 <__alt_mem_Flash_flash_data+0xf4010130>
   101a0:	00800434 	movhi	r2,16
   101a4:	89400234 	orhi	r5,r17,8
   101a8:	10bfffc4 	addi	r2,r2,-1
   101ac:	e00d883a 	mov	r6,fp
   101b0:	288a703a 	and	r5,r5,r2
   101b4:	003e8506 	br	fbcc <__alt_mem_Flash_flash_data+0xf400fbcc>

000101b8 <__eqdf2>:
   101b8:	2804d53a 	srli	r2,r5,20
   101bc:	3806d53a 	srli	r3,r7,20
   101c0:	02000434 	movhi	r8,16
   101c4:	423fffc4 	addi	r8,r8,-1
   101c8:	1081ffcc 	andi	r2,r2,2047
   101cc:	0241ffc4 	movi	r9,2047
   101d0:	2a14703a 	and	r10,r5,r8
   101d4:	18c1ffcc 	andi	r3,r3,2047
   101d8:	3a10703a 	and	r8,r7,r8
   101dc:	280ad7fa 	srli	r5,r5,31
   101e0:	380ed7fa 	srli	r7,r7,31
   101e4:	12400f26 	beq	r2,r9,10224 <__eqdf2+0x6c>
   101e8:	0241ffc4 	movi	r9,2047
   101ec:	1a400326 	beq	r3,r9,101fc <__eqdf2+0x44>
   101f0:	10c00526 	beq	r2,r3,10208 <__eqdf2+0x50>
   101f4:	00800044 	movi	r2,1
   101f8:	f800283a 	ret
   101fc:	4192b03a 	or	r9,r8,r6
   10200:	483ffc1e 	bne	r9,zero,101f4 <__alt_mem_Flash_flash_data+0xf40101f4>
   10204:	10fffb1e 	bne	r2,r3,101f4 <__alt_mem_Flash_flash_data+0xf40101f4>
   10208:	523ffa1e 	bne	r10,r8,101f4 <__alt_mem_Flash_flash_data+0xf40101f4>
   1020c:	21bff91e 	bne	r4,r6,101f4 <__alt_mem_Flash_flash_data+0xf40101f4>
   10210:	29c00826 	beq	r5,r7,10234 <__eqdf2+0x7c>
   10214:	103ff71e 	bne	r2,zero,101f4 <__alt_mem_Flash_flash_data+0xf40101f4>
   10218:	5104b03a 	or	r2,r10,r4
   1021c:	1004c03a 	cmpne	r2,r2,zero
   10220:	f800283a 	ret
   10224:	5112b03a 	or	r9,r10,r4
   10228:	483fef26 	beq	r9,zero,101e8 <__alt_mem_Flash_flash_data+0xf40101e8>
   1022c:	00800044 	movi	r2,1
   10230:	f800283a 	ret
   10234:	0005883a 	mov	r2,zero
   10238:	f800283a 	ret

0001023c <__gedf2>:
   1023c:	2804d53a 	srli	r2,r5,20
   10240:	3806d53a 	srli	r3,r7,20
   10244:	02000434 	movhi	r8,16
   10248:	423fffc4 	addi	r8,r8,-1
   1024c:	0241ffc4 	movi	r9,2047
   10250:	1081ffcc 	andi	r2,r2,2047
   10254:	2a14703a 	and	r10,r5,r8
   10258:	1a46703a 	and	r3,r3,r9
   1025c:	3a10703a 	and	r8,r7,r8
   10260:	280ad7fa 	srli	r5,r5,31
   10264:	380ed7fa 	srli	r7,r7,31
   10268:	12400b26 	beq	r2,r9,10298 <__gedf2+0x5c>
   1026c:	1a401626 	beq	r3,r9,102c8 <__gedf2+0x8c>
   10270:	10000c1e 	bne	r2,zero,102a4 <__gedf2+0x68>
   10274:	5112b03a 	or	r9,r10,r4
   10278:	4813003a 	cmpeq	r9,r9,zero
   1027c:	4817883a 	mov	r11,r9
   10280:	18000c1e 	bne	r3,zero,102b4 <__gedf2+0x78>
   10284:	4198b03a 	or	r12,r8,r6
   10288:	60000a1e 	bne	r12,zero,102b4 <__gedf2+0x78>
   1028c:	48001326 	beq	r9,zero,102dc <__gedf2+0xa0>
   10290:	0005883a 	mov	r2,zero
   10294:	f800283a 	ret
   10298:	5112b03a 	or	r9,r10,r4
   1029c:	4800191e 	bne	r9,zero,10304 <__gedf2+0xc8>
   102a0:	18800926 	beq	r3,r2,102c8 <__gedf2+0x8c>
   102a4:	18000b1e 	bne	r3,zero,102d4 <__gedf2+0x98>
   102a8:	4192b03a 	or	r9,r8,r6
   102ac:	0017883a 	mov	r11,zero
   102b0:	48000a26 	beq	r9,zero,102dc <__gedf2+0xa0>
   102b4:	39c03fcc 	andi	r7,r7,255
   102b8:	58000726 	beq	r11,zero,102d8 <__gedf2+0x9c>
   102bc:	3800081e 	bne	r7,zero,102e0 <__gedf2+0xa4>
   102c0:	00bfffc4 	movi	r2,-1
   102c4:	f800283a 	ret
   102c8:	4192b03a 	or	r9,r8,r6
   102cc:	48000d1e 	bne	r9,zero,10304 <__gedf2+0xc8>
   102d0:	103fe826 	beq	r2,zero,10274 <__alt_mem_Flash_flash_data+0xf4010274>
   102d4:	39c03fcc 	andi	r7,r7,255
   102d8:	29c00326 	beq	r5,r7,102e8 <__gedf2+0xac>
   102dc:	283ff81e 	bne	r5,zero,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   102e0:	00800044 	movi	r2,1
   102e4:	f800283a 	ret
   102e8:	18bffc16 	blt	r3,r2,102dc <__alt_mem_Flash_flash_data+0xf40102dc>
   102ec:	10c00316 	blt	r2,r3,102fc <__gedf2+0xc0>
   102f0:	42bffa36 	bltu	r8,r10,102dc <__alt_mem_Flash_flash_data+0xf40102dc>
   102f4:	52000526 	beq	r10,r8,1030c <__gedf2+0xd0>
   102f8:	523fe52e 	bgeu	r10,r8,10290 <__alt_mem_Flash_flash_data+0xf4010290>
   102fc:	283ff026 	beq	r5,zero,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   10300:	003ff706 	br	102e0 <__alt_mem_Flash_flash_data+0xf40102e0>
   10304:	00bfff84 	movi	r2,-2
   10308:	f800283a 	ret
   1030c:	313ff336 	bltu	r6,r4,102dc <__alt_mem_Flash_flash_data+0xf40102dc>
   10310:	21bfdf2e 	bgeu	r4,r6,10290 <__alt_mem_Flash_flash_data+0xf4010290>
   10314:	283fea26 	beq	r5,zero,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   10318:	003ff106 	br	102e0 <__alt_mem_Flash_flash_data+0xf40102e0>

0001031c <__ledf2>:
   1031c:	2804d53a 	srli	r2,r5,20
   10320:	3810d53a 	srli	r8,r7,20
   10324:	00c00434 	movhi	r3,16
   10328:	18ffffc4 	addi	r3,r3,-1
   1032c:	0241ffc4 	movi	r9,2047
   10330:	1081ffcc 	andi	r2,r2,2047
   10334:	28d4703a 	and	r10,r5,r3
   10338:	4250703a 	and	r8,r8,r9
   1033c:	38c6703a 	and	r3,r7,r3
   10340:	280ad7fa 	srli	r5,r5,31
   10344:	380ed7fa 	srli	r7,r7,31
   10348:	12400b26 	beq	r2,r9,10378 <__ledf2+0x5c>
   1034c:	42401926 	beq	r8,r9,103b4 <__ledf2+0x98>
   10350:	10000c1e 	bne	r2,zero,10384 <__ledf2+0x68>
   10354:	5112b03a 	or	r9,r10,r4
   10358:	4813003a 	cmpeq	r9,r9,zero
   1035c:	4817883a 	mov	r11,r9
   10360:	40000f26 	beq	r8,zero,103a0 <__ledf2+0x84>
   10364:	39c03fcc 	andi	r7,r7,255
   10368:	58001826 	beq	r11,zero,103cc <__ledf2+0xb0>
   1036c:	38000a1e 	bne	r7,zero,10398 <__ledf2+0x7c>
   10370:	00bfffc4 	movi	r2,-1
   10374:	f800283a 	ret
   10378:	5112b03a 	or	r9,r10,r4
   1037c:	48000f1e 	bne	r9,zero,103bc <__ledf2+0xa0>
   10380:	40800c26 	beq	r8,r2,103b4 <__ledf2+0x98>
   10384:	4000101e 	bne	r8,zero,103c8 <__ledf2+0xac>
   10388:	1992b03a 	or	r9,r3,r6
   1038c:	0017883a 	mov	r11,zero
   10390:	483ff41e 	bne	r9,zero,10364 <__alt_mem_Flash_flash_data+0xf4010364>
   10394:	283ff61e 	bne	r5,zero,10370 <__alt_mem_Flash_flash_data+0xf4010370>
   10398:	00800044 	movi	r2,1
   1039c:	f800283a 	ret
   103a0:	1998b03a 	or	r12,r3,r6
   103a4:	603fef1e 	bne	r12,zero,10364 <__alt_mem_Flash_flash_data+0xf4010364>
   103a8:	483ffa26 	beq	r9,zero,10394 <__alt_mem_Flash_flash_data+0xf4010394>
   103ac:	0005883a 	mov	r2,zero
   103b0:	f800283a 	ret
   103b4:	1992b03a 	or	r9,r3,r6
   103b8:	48000226 	beq	r9,zero,103c4 <__ledf2+0xa8>
   103bc:	00800084 	movi	r2,2
   103c0:	f800283a 	ret
   103c4:	103fe326 	beq	r2,zero,10354 <__alt_mem_Flash_flash_data+0xf4010354>
   103c8:	39c03fcc 	andi	r7,r7,255
   103cc:	29fff11e 	bne	r5,r7,10394 <__alt_mem_Flash_flash_data+0xf4010394>
   103d0:	40bff016 	blt	r8,r2,10394 <__alt_mem_Flash_flash_data+0xf4010394>
   103d4:	12000316 	blt	r2,r8,103e4 <__ledf2+0xc8>
   103d8:	1abfee36 	bltu	r3,r10,10394 <__alt_mem_Flash_flash_data+0xf4010394>
   103dc:	50c00326 	beq	r10,r3,103ec <__ledf2+0xd0>
   103e0:	50fff22e 	bgeu	r10,r3,103ac <__alt_mem_Flash_flash_data+0xf40103ac>
   103e4:	283fe226 	beq	r5,zero,10370 <__alt_mem_Flash_flash_data+0xf4010370>
   103e8:	003feb06 	br	10398 <__alt_mem_Flash_flash_data+0xf4010398>
   103ec:	313fe936 	bltu	r6,r4,10394 <__alt_mem_Flash_flash_data+0xf4010394>
   103f0:	21bfee2e 	bgeu	r4,r6,103ac <__alt_mem_Flash_flash_data+0xf40103ac>
   103f4:	283fde26 	beq	r5,zero,10370 <__alt_mem_Flash_flash_data+0xf4010370>
   103f8:	003fe706 	br	10398 <__alt_mem_Flash_flash_data+0xf4010398>

000103fc <__muldf3>:
   103fc:	defff204 	addi	sp,sp,-56
   10400:	2804d53a 	srli	r2,r5,20
   10404:	dd800a15 	stw	r22,40(sp)
   10408:	282cd7fa 	srli	r22,r5,31
   1040c:	dc000415 	stw	r16,16(sp)
   10410:	04000434 	movhi	r16,16
   10414:	df000c15 	stw	fp,48(sp)
   10418:	dd000815 	stw	r20,32(sp)
   1041c:	dcc00715 	stw	r19,28(sp)
   10420:	dc800615 	stw	r18,24(sp)
   10424:	dc400515 	stw	r17,20(sp)
   10428:	843fffc4 	addi	r16,r16,-1
   1042c:	dfc00d15 	stw	ra,52(sp)
   10430:	ddc00b15 	stw	r23,44(sp)
   10434:	dd400915 	stw	r21,36(sp)
   10438:	1501ffcc 	andi	r20,r2,2047
   1043c:	2023883a 	mov	r17,r4
   10440:	2025883a 	mov	r18,r4
   10444:	2c20703a 	and	r16,r5,r16
   10448:	b027883a 	mov	r19,r22
   1044c:	b7003fcc 	andi	fp,r22,255
   10450:	a0005926 	beq	r20,zero,105b8 <__muldf3+0x1bc>
   10454:	0081ffc4 	movi	r2,2047
   10458:	a0803426 	beq	r20,r2,1052c <__muldf3+0x130>
   1045c:	84000434 	orhi	r16,r16,16
   10460:	2004d77a 	srli	r2,r4,29
   10464:	802090fa 	slli	r16,r16,3
   10468:	202490fa 	slli	r18,r4,3
   1046c:	a53f0044 	addi	r20,r20,-1023
   10470:	80a0b03a 	or	r16,r16,r2
   10474:	002b883a 	mov	r21,zero
   10478:	0015883a 	mov	r10,zero
   1047c:	3812d53a 	srli	r9,r7,20
   10480:	3806d7fa 	srli	r3,r7,31
   10484:	02000434 	movhi	r8,16
   10488:	423fffc4 	addi	r8,r8,-1
   1048c:	4941ffcc 	andi	r5,r9,2047
   10490:	302f883a 	mov	r23,r6
   10494:	3a22703a 	and	r17,r7,r8
   10498:	1ac03fcc 	andi	r11,r3,255
   1049c:	28006226 	beq	r5,zero,10628 <__muldf3+0x22c>
   104a0:	0081ffc4 	movi	r2,2047
   104a4:	28805a26 	beq	r5,r2,10610 <__muldf3+0x214>
   104a8:	8a000434 	orhi	r8,r17,16
   104ac:	3004d77a 	srli	r2,r6,29
   104b0:	401090fa 	slli	r8,r8,3
   104b4:	302e90fa 	slli	r23,r6,3
   104b8:	297f0044 	addi	r5,r5,-1023
   104bc:	40a2b03a 	or	r17,r8,r2
   104c0:	0013883a 	mov	r9,zero
   104c4:	4d4cb03a 	or	r6,r9,r21
   104c8:	300c90ba 	slli	r6,r6,2
   104cc:	02000074 	movhi	r8,1
   104d0:	42013b04 	addi	r8,r8,1260
   104d4:	320d883a 	add	r6,r6,r8
   104d8:	31800017 	ldw	r6,0(r6)
   104dc:	a14b883a 	add	r5,r20,r5
   104e0:	1dacf03a 	xor	r22,r3,r22
   104e4:	2b000044 	addi	r12,r5,1
   104e8:	3000683a 	jmp	r6
   104ec:	00010728 	cmpgeui	zero,zero,1052
   104f0:	00010714 	movui	zero,1052
   104f4:	00010714 	movui	zero,1052
   104f8:	00010700 	call	1070 <typen+0x1c>
   104fc:	00010548 	cmpgei	zero,zero,1045
   10500:	00010548 	cmpgei	zero,zero,1045
   10504:	000106e8 	cmpgeui	zero,zero,1051
   10508:	00010700 	call	1070 <typen+0x1c>
   1050c:	00010548 	cmpgei	zero,zero,1045
   10510:	000106e8 	cmpgeui	zero,zero,1051
   10514:	00010548 	cmpgei	zero,zero,1045
   10518:	00010700 	call	1070 <typen+0x1c>
   1051c:	0001054c 	andi	zero,zero,1045
   10520:	0001054c 	andi	zero,zero,1045
   10524:	0001054c 	andi	zero,zero,1045
   10528:	00010924 	muli	zero,zero,1060
   1052c:	8104b03a 	or	r2,r16,r4
   10530:	10006a1e 	bne	r2,zero,106dc <__muldf3+0x2e0>
   10534:	05400204 	movi	r21,8
   10538:	0021883a 	mov	r16,zero
   1053c:	0025883a 	mov	r18,zero
   10540:	02800084 	movi	r10,2
   10544:	003fcd06 	br	1047c <__alt_mem_Flash_flash_data+0xf401047c>
   10548:	b039883a 	mov	fp,r22
   1054c:	00800084 	movi	r2,2
   10550:	50804e1e 	bne	r10,r2,1068c <__muldf3+0x290>
   10554:	e4c0004c 	andi	r19,fp,1
   10558:	0101ffc4 	movi	r4,2047
   1055c:	0021883a 	mov	r16,zero
   10560:	0025883a 	mov	r18,zero
   10564:	2008953a 	slli	r4,r4,20
   10568:	98c03fcc 	andi	r3,r19,255
   1056c:	01400434 	movhi	r5,16
   10570:	297fffc4 	addi	r5,r5,-1
   10574:	180697fa 	slli	r3,r3,31
   10578:	8160703a 	and	r16,r16,r5
   1057c:	8120b03a 	or	r16,r16,r4
   10580:	80c6b03a 	or	r3,r16,r3
   10584:	9005883a 	mov	r2,r18
   10588:	dfc00d17 	ldw	ra,52(sp)
   1058c:	df000c17 	ldw	fp,48(sp)
   10590:	ddc00b17 	ldw	r23,44(sp)
   10594:	dd800a17 	ldw	r22,40(sp)
   10598:	dd400917 	ldw	r21,36(sp)
   1059c:	dd000817 	ldw	r20,32(sp)
   105a0:	dcc00717 	ldw	r19,28(sp)
   105a4:	dc800617 	ldw	r18,24(sp)
   105a8:	dc400517 	ldw	r17,20(sp)
   105ac:	dc000417 	ldw	r16,16(sp)
   105b0:	dec00e04 	addi	sp,sp,56
   105b4:	f800283a 	ret
   105b8:	8104b03a 	or	r2,r16,r4
   105bc:	10004226 	beq	r2,zero,106c8 <__muldf3+0x2cc>
   105c0:	8000f926 	beq	r16,zero,109a8 <__muldf3+0x5ac>
   105c4:	8009883a 	mov	r4,r16
   105c8:	d9800315 	stw	r6,12(sp)
   105cc:	d9c00015 	stw	r7,0(sp)
   105d0:	00115ec0 	call	115ec <__clzsi2>
   105d4:	d9800317 	ldw	r6,12(sp)
   105d8:	d9c00017 	ldw	r7,0(sp)
   105dc:	1007883a 	mov	r3,r2
   105e0:	01000a04 	movi	r4,40
   105e4:	18bffe04 	addi	r2,r3,-8
   105e8:	20c9c83a 	sub	r4,r4,r3
   105ec:	80a0983a 	sll	r16,r16,r2
   105f0:	8908d83a 	srl	r4,r17,r4
   105f4:	88a4983a 	sll	r18,r17,r2
   105f8:	2420b03a 	or	r16,r4,r16
   105fc:	017f0344 	movi	r5,-1011
   10600:	28e9c83a 	sub	r20,r5,r3
   10604:	002b883a 	mov	r21,zero
   10608:	0015883a 	mov	r10,zero
   1060c:	003f9b06 	br	1047c <__alt_mem_Flash_flash_data+0xf401047c>
   10610:	8984b03a 	or	r2,r17,r6
   10614:	10002a1e 	bne	r2,zero,106c0 <__muldf3+0x2c4>
   10618:	0023883a 	mov	r17,zero
   1061c:	002f883a 	mov	r23,zero
   10620:	02400084 	movi	r9,2
   10624:	003fa706 	br	104c4 <__alt_mem_Flash_flash_data+0xf40104c4>
   10628:	8984b03a 	or	r2,r17,r6
   1062c:	10002026 	beq	r2,zero,106b0 <__muldf3+0x2b4>
   10630:	8800cc26 	beq	r17,zero,10964 <__muldf3+0x568>
   10634:	8809883a 	mov	r4,r17
   10638:	d8c00215 	stw	r3,8(sp)
   1063c:	d9800315 	stw	r6,12(sp)
   10640:	da800015 	stw	r10,0(sp)
   10644:	dac00115 	stw	r11,4(sp)
   10648:	00115ec0 	call	115ec <__clzsi2>
   1064c:	d8c00217 	ldw	r3,8(sp)
   10650:	d9800317 	ldw	r6,12(sp)
   10654:	da800017 	ldw	r10,0(sp)
   10658:	dac00117 	ldw	r11,4(sp)
   1065c:	1009883a 	mov	r4,r2
   10660:	01400a04 	movi	r5,40
   10664:	25fffe04 	addi	r23,r4,-8
   10668:	290bc83a 	sub	r5,r5,r4
   1066c:	8dd0983a 	sll	r8,r17,r23
   10670:	314ad83a 	srl	r5,r6,r5
   10674:	35ee983a 	sll	r23,r6,r23
   10678:	2a22b03a 	or	r17,r5,r8
   1067c:	017f0344 	movi	r5,-1011
   10680:	290bc83a 	sub	r5,r5,r4
   10684:	0013883a 	mov	r9,zero
   10688:	003f8e06 	br	104c4 <__alt_mem_Flash_flash_data+0xf40104c4>
   1068c:	008000c4 	movi	r2,3
   10690:	50811d26 	beq	r10,r2,10b08 <__muldf3+0x70c>
   10694:	00800044 	movi	r2,1
   10698:	5080e01e 	bne	r10,r2,10a1c <__muldf3+0x620>
   1069c:	e0a6703a 	and	r19,fp,r2
   106a0:	0009883a 	mov	r4,zero
   106a4:	0021883a 	mov	r16,zero
   106a8:	0025883a 	mov	r18,zero
   106ac:	003fad06 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   106b0:	0023883a 	mov	r17,zero
   106b4:	002f883a 	mov	r23,zero
   106b8:	02400044 	movi	r9,1
   106bc:	003f8106 	br	104c4 <__alt_mem_Flash_flash_data+0xf40104c4>
   106c0:	024000c4 	movi	r9,3
   106c4:	003f7f06 	br	104c4 <__alt_mem_Flash_flash_data+0xf40104c4>
   106c8:	05400104 	movi	r21,4
   106cc:	0021883a 	mov	r16,zero
   106d0:	0025883a 	mov	r18,zero
   106d4:	02800044 	movi	r10,1
   106d8:	003f6806 	br	1047c <__alt_mem_Flash_flash_data+0xf401047c>
   106dc:	05400304 	movi	r21,12
   106e0:	028000c4 	movi	r10,3
   106e4:	003f6506 	br	1047c <__alt_mem_Flash_flash_data+0xf401047c>
   106e8:	04000434 	movhi	r16,16
   106ec:	0027883a 	mov	r19,zero
   106f0:	843fffc4 	addi	r16,r16,-1
   106f4:	04bfffc4 	movi	r18,-1
   106f8:	0101ffc4 	movi	r4,2047
   106fc:	003f9906 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   10700:	8821883a 	mov	r16,r17
   10704:	b825883a 	mov	r18,r23
   10708:	5839883a 	mov	fp,r11
   1070c:	4815883a 	mov	r10,r9
   10710:	003f8e06 	br	1054c <__alt_mem_Flash_flash_data+0xf401054c>
   10714:	8821883a 	mov	r16,r17
   10718:	b825883a 	mov	r18,r23
   1071c:	b039883a 	mov	fp,r22
   10720:	4815883a 	mov	r10,r9
   10724:	003f8906 	br	1054c <__alt_mem_Flash_flash_data+0xf401054c>
   10728:	b80cd43a 	srli	r6,r23,16
   1072c:	9006d43a 	srli	r3,r18,16
   10730:	90bfffcc 	andi	r2,r18,65535
   10734:	bdffffcc 	andi	r23,r23,65535
   10738:	b891383a 	mul	r8,r23,r2
   1073c:	b8c9383a 	mul	r4,r23,r3
   10740:	309b383a 	mul	r13,r6,r2
   10744:	400ed43a 	srli	r7,r8,16
   10748:	30df383a 	mul	r15,r6,r3
   1074c:	235b883a 	add	r13,r4,r13
   10750:	69db883a 	add	r13,r13,r7
   10754:	6900022e 	bgeu	r13,r4,10760 <__muldf3+0x364>
   10758:	01000074 	movhi	r4,1
   1075c:	791f883a 	add	r15,r15,r4
   10760:	8828d43a 	srli	r20,r17,16
   10764:	8c7fffcc 	andi	r17,r17,65535
   10768:	888f383a 	mul	r7,r17,r2
   1076c:	88d3383a 	mul	r9,r17,r3
   10770:	a0a5383a 	mul	r18,r20,r2
   10774:	3816d43a 	srli	r11,r7,16
   10778:	6814943a 	slli	r10,r13,16
   1077c:	4ca5883a 	add	r18,r9,r18
   10780:	423fffcc 	andi	r8,r8,65535
   10784:	92e5883a 	add	r18,r18,r11
   10788:	6808d43a 	srli	r4,r13,16
   1078c:	5215883a 	add	r10,r10,r8
   10790:	a0c7383a 	mul	r3,r20,r3
   10794:	9240022e 	bgeu	r18,r9,107a0 <__muldf3+0x3a4>
   10798:	00800074 	movhi	r2,1
   1079c:	1887883a 	add	r3,r3,r2
   107a0:	802ad43a 	srli	r21,r16,16
   107a4:	80bfffcc 	andi	r2,r16,65535
   107a8:	b893383a 	mul	r9,r23,r2
   107ac:	3091383a 	mul	r8,r6,r2
   107b0:	bd6f383a 	mul	r23,r23,r21
   107b4:	9026943a 	slli	r19,r18,16
   107b8:	481ad43a 	srli	r13,r9,16
   107bc:	9024d43a 	srli	r18,r18,16
   107c0:	39ffffcc 	andi	r7,r7,65535
   107c4:	ba11883a 	add	r8,r23,r8
   107c8:	99e7883a 	add	r19,r19,r7
   107cc:	4351883a 	add	r8,r8,r13
   107d0:	1c97883a 	add	r11,r3,r18
   107d4:	354d383a 	mul	r6,r6,r21
   107d8:	9925883a 	add	r18,r19,r4
   107dc:	45c0022e 	bgeu	r8,r23,107e8 <__muldf3+0x3ec>
   107e0:	00c00074 	movhi	r3,1
   107e4:	30cd883a 	add	r6,r6,r3
   107e8:	8889383a 	mul	r4,r17,r2
   107ec:	8d63383a 	mul	r17,r17,r21
   107f0:	a085383a 	mul	r2,r20,r2
   107f4:	200ed43a 	srli	r7,r4,16
   107f8:	401cd43a 	srli	r14,r8,16
   107fc:	401a943a 	slli	r13,r8,16
   10800:	8885883a 	add	r2,r17,r2
   10804:	4a3fffcc 	andi	r8,r9,65535
   10808:	11c5883a 	add	r2,r2,r7
   1080c:	339d883a 	add	r14,r6,r14
   10810:	6a11883a 	add	r8,r13,r8
   10814:	a561383a 	mul	r16,r20,r21
   10818:	1440022e 	bgeu	r2,r17,10824 <__muldf3+0x428>
   1081c:	00c00074 	movhi	r3,1
   10820:	80e1883a 	add	r16,r16,r3
   10824:	1006943a 	slli	r3,r2,16
   10828:	213fffcc 	andi	r4,r4,65535
   1082c:	93db883a 	add	r13,r18,r15
   10830:	1909883a 	add	r4,r3,r4
   10834:	22c7883a 	add	r3,r4,r11
   10838:	6cd3803a 	cmpltu	r9,r13,r19
   1083c:	6a09883a 	add	r4,r13,r8
   10840:	1a5b883a 	add	r13,r3,r9
   10844:	2211803a 	cmpltu	r8,r4,r8
   10848:	734d883a 	add	r6,r14,r13
   1084c:	100ed43a 	srli	r7,r2,16
   10850:	6a53803a 	cmpltu	r9,r13,r9
   10854:	3205883a 	add	r2,r6,r8
   10858:	1ac7803a 	cmpltu	r3,r3,r11
   1085c:	1211803a 	cmpltu	r8,r2,r8
   10860:	48c6b03a 	or	r3,r9,r3
   10864:	338d803a 	cmpltu	r6,r6,r14
   10868:	19c7883a 	add	r3,r3,r7
   1086c:	418cb03a 	or	r6,r8,r6
   10870:	1987883a 	add	r3,r3,r6
   10874:	2024927a 	slli	r18,r4,9
   10878:	1c07883a 	add	r3,r3,r16
   1087c:	1806927a 	slli	r3,r3,9
   10880:	1020d5fa 	srli	r16,r2,23
   10884:	2008d5fa 	srli	r4,r4,23
   10888:	9294b03a 	or	r10,r18,r10
   1088c:	1004927a 	slli	r2,r2,9
   10890:	5024c03a 	cmpne	r18,r10,zero
   10894:	1c20b03a 	or	r16,r3,r16
   10898:	9108b03a 	or	r4,r18,r4
   1089c:	80c0402c 	andhi	r3,r16,256
   108a0:	20a4b03a 	or	r18,r4,r2
   108a4:	18000726 	beq	r3,zero,108c4 <__muldf3+0x4c8>
   108a8:	9006d07a 	srli	r3,r18,1
   108ac:	800897fa 	slli	r4,r16,31
   108b0:	9080004c 	andi	r2,r18,1
   108b4:	8020d07a 	srli	r16,r16,1
   108b8:	10c4b03a 	or	r2,r2,r3
   108bc:	1124b03a 	or	r18,r2,r4
   108c0:	600b883a 	mov	r5,r12
   108c4:	2900ffc4 	addi	r4,r5,1023
   108c8:	01004b0e 	bge	zero,r4,109f8 <__muldf3+0x5fc>
   108cc:	908001cc 	andi	r2,r18,7
   108d0:	10000726 	beq	r2,zero,108f0 <__muldf3+0x4f4>
   108d4:	90c003cc 	andi	r3,r18,15
   108d8:	00800104 	movi	r2,4
   108dc:	18800426 	beq	r3,r2,108f0 <__muldf3+0x4f4>
   108e0:	9087883a 	add	r3,r18,r2
   108e4:	1c85803a 	cmpltu	r2,r3,r18
   108e8:	80a1883a 	add	r16,r16,r2
   108ec:	1825883a 	mov	r18,r3
   108f0:	8080402c 	andhi	r2,r16,256
   108f4:	10000426 	beq	r2,zero,10908 <__muldf3+0x50c>
   108f8:	00bfc034 	movhi	r2,65280
   108fc:	10bfffc4 	addi	r2,r2,-1
   10900:	29010004 	addi	r4,r5,1024
   10904:	80a0703a 	and	r16,r16,r2
   10908:	0081ff84 	movi	r2,2046
   1090c:	1100320e 	bge	r2,r4,109d8 <__muldf3+0x5dc>
   10910:	b4c0004c 	andi	r19,r22,1
   10914:	0101ffc4 	movi	r4,2047
   10918:	0021883a 	mov	r16,zero
   1091c:	0025883a 	mov	r18,zero
   10920:	003f1006 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   10924:	8080022c 	andhi	r2,r16,8
   10928:	10000926 	beq	r2,zero,10950 <__muldf3+0x554>
   1092c:	8880022c 	andhi	r2,r17,8
   10930:	1000071e 	bne	r2,zero,10950 <__muldf3+0x554>
   10934:	00800434 	movhi	r2,16
   10938:	8c000234 	orhi	r16,r17,8
   1093c:	10bfffc4 	addi	r2,r2,-1
   10940:	1827883a 	mov	r19,r3
   10944:	80a0703a 	and	r16,r16,r2
   10948:	b825883a 	mov	r18,r23
   1094c:	003f6a06 	br	106f8 <__alt_mem_Flash_flash_data+0xf40106f8>
   10950:	00800434 	movhi	r2,16
   10954:	84000234 	orhi	r16,r16,8
   10958:	10bfffc4 	addi	r2,r2,-1
   1095c:	80a0703a 	and	r16,r16,r2
   10960:	003f6506 	br	106f8 <__alt_mem_Flash_flash_data+0xf40106f8>
   10964:	3009883a 	mov	r4,r6
   10968:	d8c00215 	stw	r3,8(sp)
   1096c:	d9800315 	stw	r6,12(sp)
   10970:	da800015 	stw	r10,0(sp)
   10974:	dac00115 	stw	r11,4(sp)
   10978:	00115ec0 	call	115ec <__clzsi2>
   1097c:	11000804 	addi	r4,r2,32
   10980:	014009c4 	movi	r5,39
   10984:	d8c00217 	ldw	r3,8(sp)
   10988:	d9800317 	ldw	r6,12(sp)
   1098c:	da800017 	ldw	r10,0(sp)
   10990:	dac00117 	ldw	r11,4(sp)
   10994:	293f320e 	bge	r5,r4,10660 <__alt_mem_Flash_flash_data+0xf4010660>
   10998:	10bffe04 	addi	r2,r2,-8
   1099c:	b8a2983a 	sll	r17,r23,r2
   109a0:	002f883a 	mov	r23,zero
   109a4:	003f3506 	br	1067c <__alt_mem_Flash_flash_data+0xf401067c>
   109a8:	d9800315 	stw	r6,12(sp)
   109ac:	d9c00015 	stw	r7,0(sp)
   109b0:	00115ec0 	call	115ec <__clzsi2>
   109b4:	10c00804 	addi	r3,r2,32
   109b8:	010009c4 	movi	r4,39
   109bc:	d9800317 	ldw	r6,12(sp)
   109c0:	d9c00017 	ldw	r7,0(sp)
   109c4:	20ff060e 	bge	r4,r3,105e0 <__alt_mem_Flash_flash_data+0xf40105e0>
   109c8:	10bffe04 	addi	r2,r2,-8
   109cc:	88a0983a 	sll	r16,r17,r2
   109d0:	0025883a 	mov	r18,zero
   109d4:	003f0906 	br	105fc <__alt_mem_Flash_flash_data+0xf40105fc>
   109d8:	9004d0fa 	srli	r2,r18,3
   109dc:	8024977a 	slli	r18,r16,29
   109e0:	8020927a 	slli	r16,r16,9
   109e4:	2101ffcc 	andi	r4,r4,2047
   109e8:	90a4b03a 	or	r18,r18,r2
   109ec:	8020d33a 	srli	r16,r16,12
   109f0:	b4c0004c 	andi	r19,r22,1
   109f4:	003edb06 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   109f8:	00ff0084 	movi	r3,-1022
   109fc:	1947c83a 	sub	r3,r3,r5
   10a00:	00800e04 	movi	r2,56
   10a04:	10c0080e 	bge	r2,r3,10a28 <__muldf3+0x62c>
   10a08:	b4c0004c 	andi	r19,r22,1
   10a0c:	0009883a 	mov	r4,zero
   10a10:	0021883a 	mov	r16,zero
   10a14:	0025883a 	mov	r18,zero
   10a18:	003ed206 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   10a1c:	600b883a 	mov	r5,r12
   10a20:	e02d883a 	mov	r22,fp
   10a24:	003fa706 	br	108c4 <__alt_mem_Flash_flash_data+0xf40108c4>
   10a28:	008007c4 	movi	r2,31
   10a2c:	10c01816 	blt	r2,r3,10a90 <__muldf3+0x694>
   10a30:	29410784 	addi	r5,r5,1054
   10a34:	8144983a 	sll	r2,r16,r5
   10a38:	90c8d83a 	srl	r4,r18,r3
   10a3c:	914a983a 	sll	r5,r18,r5
   10a40:	80c6d83a 	srl	r3,r16,r3
   10a44:	2088b03a 	or	r4,r4,r2
   10a48:	2804c03a 	cmpne	r2,r5,zero
   10a4c:	2084b03a 	or	r2,r4,r2
   10a50:	110001cc 	andi	r4,r2,7
   10a54:	20000726 	beq	r4,zero,10a74 <__muldf3+0x678>
   10a58:	114003cc 	andi	r5,r2,15
   10a5c:	01000104 	movi	r4,4
   10a60:	29000426 	beq	r5,r4,10a74 <__muldf3+0x678>
   10a64:	11000104 	addi	r4,r2,4
   10a68:	2085803a 	cmpltu	r2,r4,r2
   10a6c:	1887883a 	add	r3,r3,r2
   10a70:	2005883a 	mov	r2,r4
   10a74:	1900202c 	andhi	r4,r3,128
   10a78:	20001826 	beq	r4,zero,10adc <__muldf3+0x6e0>
   10a7c:	b4c0004c 	andi	r19,r22,1
   10a80:	01000044 	movi	r4,1
   10a84:	0021883a 	mov	r16,zero
   10a88:	0025883a 	mov	r18,zero
   10a8c:	003eb506 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   10a90:	00bef884 	movi	r2,-1054
   10a94:	1145c83a 	sub	r2,r2,r5
   10a98:	8088d83a 	srl	r4,r16,r2
   10a9c:	00800804 	movi	r2,32
   10aa0:	18801726 	beq	r3,r2,10b00 <__muldf3+0x704>
   10aa4:	28810f84 	addi	r2,r5,1086
   10aa8:	8084983a 	sll	r2,r16,r2
   10aac:	1484b03a 	or	r2,r2,r18
   10ab0:	1004c03a 	cmpne	r2,r2,zero
   10ab4:	1104b03a 	or	r2,r2,r4
   10ab8:	10c001cc 	andi	r3,r2,7
   10abc:	18000b1e 	bne	r3,zero,10aec <__muldf3+0x6f0>
   10ac0:	0021883a 	mov	r16,zero
   10ac4:	1004d0fa 	srli	r2,r2,3
   10ac8:	b4c0004c 	andi	r19,r22,1
   10acc:	0009883a 	mov	r4,zero
   10ad0:	10e4b03a 	or	r18,r2,r3
   10ad4:	003ea306 	br	10564 <__alt_mem_Flash_flash_data+0xf4010564>
   10ad8:	0007883a 	mov	r3,zero
   10adc:	1820927a 	slli	r16,r3,9
   10ae0:	1806977a 	slli	r3,r3,29
   10ae4:	8020d33a 	srli	r16,r16,12
   10ae8:	003ff606 	br	10ac4 <__alt_mem_Flash_flash_data+0xf4010ac4>
   10aec:	110003cc 	andi	r4,r2,15
   10af0:	00c00104 	movi	r3,4
   10af4:	20fff826 	beq	r4,r3,10ad8 <__alt_mem_Flash_flash_data+0xf4010ad8>
   10af8:	0007883a 	mov	r3,zero
   10afc:	003fd906 	br	10a64 <__alt_mem_Flash_flash_data+0xf4010a64>
   10b00:	0005883a 	mov	r2,zero
   10b04:	003fe906 	br	10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10b08:	00800434 	movhi	r2,16
   10b0c:	84000234 	orhi	r16,r16,8
   10b10:	10bfffc4 	addi	r2,r2,-1
   10b14:	e4c0004c 	andi	r19,fp,1
   10b18:	80a0703a 	and	r16,r16,r2
   10b1c:	003ef606 	br	106f8 <__alt_mem_Flash_flash_data+0xf40106f8>

00010b20 <__subdf3>:
   10b20:	00c00434 	movhi	r3,16
   10b24:	18ffffc4 	addi	r3,r3,-1
   10b28:	defffb04 	addi	sp,sp,-20
   10b2c:	28d2703a 	and	r9,r5,r3
   10b30:	3814d53a 	srli	r10,r7,20
   10b34:	38c6703a 	and	r3,r7,r3
   10b38:	3004d77a 	srli	r2,r6,29
   10b3c:	dc800215 	stw	r18,8(sp)
   10b40:	dc000015 	stw	r16,0(sp)
   10b44:	2824d7fa 	srli	r18,r5,31
   10b48:	2820d53a 	srli	r16,r5,20
   10b4c:	481290fa 	slli	r9,r9,3
   10b50:	200ad77a 	srli	r5,r4,29
   10b54:	180690fa 	slli	r3,r3,3
   10b58:	dc400115 	stw	r17,4(sp)
   10b5c:	dfc00415 	stw	ra,16(sp)
   10b60:	202290fa 	slli	r17,r4,3
   10b64:	dcc00315 	stw	r19,12(sp)
   10b68:	5281ffcc 	andi	r10,r10,2047
   10b6c:	0101ffc4 	movi	r4,2047
   10b70:	9011883a 	mov	r8,r18
   10b74:	8401ffcc 	andi	r16,r16,2047
   10b78:	94803fcc 	andi	r18,r18,255
   10b7c:	494ab03a 	or	r5,r9,r5
   10b80:	380ed7fa 	srli	r7,r7,31
   10b84:	1886b03a 	or	r3,r3,r2
   10b88:	300c90fa 	slli	r6,r6,3
   10b8c:	51009026 	beq	r10,r4,10dd0 <__subdf3+0x2b0>
   10b90:	39c0005c 	xori	r7,r7,1
   10b94:	8285c83a 	sub	r2,r16,r10
   10b98:	91c06f26 	beq	r18,r7,10d58 <__subdf3+0x238>
   10b9c:	0080b10e 	bge	zero,r2,10e64 <__subdf3+0x344>
   10ba0:	50002a1e 	bne	r10,zero,10c4c <__subdf3+0x12c>
   10ba4:	1988b03a 	or	r4,r3,r6
   10ba8:	2000941e 	bne	r4,zero,10dfc <__subdf3+0x2dc>
   10bac:	888001cc 	andi	r2,r17,7
   10bb0:	10005b26 	beq	r2,zero,10d20 <__subdf3+0x200>
   10bb4:	88c003cc 	andi	r3,r17,15
   10bb8:	00800104 	movi	r2,4
   10bbc:	18805826 	beq	r3,r2,10d20 <__subdf3+0x200>
   10bc0:	88c00104 	addi	r3,r17,4
   10bc4:	1c63803a 	cmpltu	r17,r3,r17
   10bc8:	2c4b883a 	add	r5,r5,r17
   10bcc:	2880202c 	andhi	r2,r5,128
   10bd0:	9200004c 	andi	r8,r18,1
   10bd4:	1823883a 	mov	r17,r3
   10bd8:	10005426 	beq	r2,zero,10d2c <__subdf3+0x20c>
   10bdc:	84000044 	addi	r16,r16,1
   10be0:	0081ffc4 	movi	r2,2047
   10be4:	8080bf26 	beq	r16,r2,10ee4 <__subdf3+0x3c4>
   10be8:	013fe034 	movhi	r4,65408
   10bec:	213fffc4 	addi	r4,r4,-1
   10bf0:	290a703a 	and	r5,r5,r4
   10bf4:	2804977a 	slli	r2,r5,29
   10bf8:	280a927a 	slli	r5,r5,9
   10bfc:	8822d0fa 	srli	r17,r17,3
   10c00:	8401ffcc 	andi	r16,r16,2047
   10c04:	2808d33a 	srli	r4,r5,12
   10c08:	1444b03a 	or	r2,r2,r17
   10c0c:	8401ffcc 	andi	r16,r16,2047
   10c10:	800a953a 	slli	r5,r16,20
   10c14:	40c03fcc 	andi	r3,r8,255
   10c18:	04000434 	movhi	r16,16
   10c1c:	180697fa 	slli	r3,r3,31
   10c20:	843fffc4 	addi	r16,r16,-1
   10c24:	2420703a 	and	r16,r4,r16
   10c28:	8160b03a 	or	r16,r16,r5
   10c2c:	80c6b03a 	or	r3,r16,r3
   10c30:	dfc00417 	ldw	ra,16(sp)
   10c34:	dcc00317 	ldw	r19,12(sp)
   10c38:	dc800217 	ldw	r18,8(sp)
   10c3c:	dc400117 	ldw	r17,4(sp)
   10c40:	dc000017 	ldw	r16,0(sp)
   10c44:	dec00504 	addi	sp,sp,20
   10c48:	f800283a 	ret
   10c4c:	0101ffc4 	movi	r4,2047
   10c50:	813fd626 	beq	r16,r4,10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10c54:	18c02034 	orhi	r3,r3,128
   10c58:	01000e04 	movi	r4,56
   10c5c:	2080a416 	blt	r4,r2,10ef0 <__subdf3+0x3d0>
   10c60:	010007c4 	movi	r4,31
   10c64:	2080c716 	blt	r4,r2,10f84 <__subdf3+0x464>
   10c68:	01000804 	movi	r4,32
   10c6c:	2089c83a 	sub	r4,r4,r2
   10c70:	1910983a 	sll	r8,r3,r4
   10c74:	308ed83a 	srl	r7,r6,r2
   10c78:	3108983a 	sll	r4,r6,r4
   10c7c:	1884d83a 	srl	r2,r3,r2
   10c80:	41ccb03a 	or	r6,r8,r7
   10c84:	2008c03a 	cmpne	r4,r4,zero
   10c88:	310cb03a 	or	r6,r6,r4
   10c8c:	898dc83a 	sub	r6,r17,r6
   10c90:	89a3803a 	cmpltu	r17,r17,r6
   10c94:	288bc83a 	sub	r5,r5,r2
   10c98:	2c4bc83a 	sub	r5,r5,r17
   10c9c:	3023883a 	mov	r17,r6
   10ca0:	2880202c 	andhi	r2,r5,128
   10ca4:	10006b26 	beq	r2,zero,10e54 <__subdf3+0x334>
   10ca8:	04c02034 	movhi	r19,128
   10cac:	9cffffc4 	addi	r19,r19,-1
   10cb0:	2ce6703a 	and	r19,r5,r19
   10cb4:	98007c26 	beq	r19,zero,10ea8 <__subdf3+0x388>
   10cb8:	9809883a 	mov	r4,r19
   10cbc:	00115ec0 	call	115ec <__clzsi2>
   10cc0:	10fffe04 	addi	r3,r2,-8
   10cc4:	010007c4 	movi	r4,31
   10cc8:	20c07d16 	blt	r4,r3,10ec0 <__subdf3+0x3a0>
   10ccc:	01400a04 	movi	r5,40
   10cd0:	2885c83a 	sub	r2,r5,r2
   10cd4:	888ad83a 	srl	r5,r17,r2
   10cd8:	98e6983a 	sll	r19,r19,r3
   10cdc:	88e2983a 	sll	r17,r17,r3
   10ce0:	2ce6b03a 	or	r19,r5,r19
   10ce4:	1c007a16 	blt	r3,r16,10ed0 <__subdf3+0x3b0>
   10ce8:	1c21c83a 	sub	r16,r3,r16
   10cec:	81400044 	addi	r5,r16,1
   10cf0:	00c007c4 	movi	r3,31
   10cf4:	19409616 	blt	r3,r5,10f50 <__subdf3+0x430>
   10cf8:	1c21c83a 	sub	r16,r3,r16
   10cfc:	8c08983a 	sll	r4,r17,r16
   10d00:	8946d83a 	srl	r3,r17,r5
   10d04:	9c20983a 	sll	r16,r19,r16
   10d08:	2008c03a 	cmpne	r4,r4,zero
   10d0c:	994ad83a 	srl	r5,r19,r5
   10d10:	1c06b03a 	or	r3,r3,r16
   10d14:	1922b03a 	or	r17,r3,r4
   10d18:	0021883a 	mov	r16,zero
   10d1c:	003fa306 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10d20:	2880202c 	andhi	r2,r5,128
   10d24:	9200004c 	andi	r8,r18,1
   10d28:	103fac1e 	bne	r2,zero,10bdc <__alt_mem_Flash_flash_data+0xf4010bdc>
   10d2c:	2804977a 	slli	r2,r5,29
   10d30:	8822d0fa 	srli	r17,r17,3
   10d34:	00c1ffc4 	movi	r3,2047
   10d38:	280ad0fa 	srli	r5,r5,3
   10d3c:	1444b03a 	or	r2,r2,r17
   10d40:	80c02726 	beq	r16,r3,10de0 <__subdf3+0x2c0>
   10d44:	01000434 	movhi	r4,16
   10d48:	213fffc4 	addi	r4,r4,-1
   10d4c:	80e0703a 	and	r16,r16,r3
   10d50:	2908703a 	and	r4,r5,r4
   10d54:	003fad06 	br	10c0c <__alt_mem_Flash_flash_data+0xf4010c0c>
   10d58:	0080690e 	bge	zero,r2,10f00 <__subdf3+0x3e0>
   10d5c:	50002f26 	beq	r10,zero,10e1c <__subdf3+0x2fc>
   10d60:	0101ffc4 	movi	r4,2047
   10d64:	813f9126 	beq	r16,r4,10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10d68:	18c02034 	orhi	r3,r3,128
   10d6c:	01000e04 	movi	r4,56
   10d70:	2080b00e 	bge	r4,r2,11034 <__subdf3+0x514>
   10d74:	198cb03a 	or	r6,r3,r6
   10d78:	300ec03a 	cmpne	r7,r6,zero
   10d7c:	0005883a 	mov	r2,zero
   10d80:	3c4f883a 	add	r7,r7,r17
   10d84:	3c63803a 	cmpltu	r17,r7,r17
   10d88:	114b883a 	add	r5,r2,r5
   10d8c:	2c4b883a 	add	r5,r5,r17
   10d90:	3823883a 	mov	r17,r7
   10d94:	2880202c 	andhi	r2,r5,128
   10d98:	10002e26 	beq	r2,zero,10e54 <__subdf3+0x334>
   10d9c:	84000044 	addi	r16,r16,1
   10da0:	0081ffc4 	movi	r2,2047
   10da4:	8080de26 	beq	r16,r2,11120 <__subdf3+0x600>
   10da8:	00bfe034 	movhi	r2,65408
   10dac:	10bfffc4 	addi	r2,r2,-1
   10db0:	288a703a 	and	r5,r5,r2
   10db4:	880cd07a 	srli	r6,r17,1
   10db8:	280897fa 	slli	r4,r5,31
   10dbc:	88c0004c 	andi	r3,r17,1
   10dc0:	30e2b03a 	or	r17,r6,r3
   10dc4:	280ad07a 	srli	r5,r5,1
   10dc8:	8922b03a 	or	r17,r17,r4
   10dcc:	003f7706 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10dd0:	1984b03a 	or	r2,r3,r6
   10dd4:	103f6e26 	beq	r2,zero,10b90 <__alt_mem_Flash_flash_data+0xf4010b90>
   10dd8:	39c03fcc 	andi	r7,r7,255
   10ddc:	003f6d06 	br	10b94 <__alt_mem_Flash_flash_data+0xf4010b94>
   10de0:	1146b03a 	or	r3,r2,r5
   10de4:	18003f26 	beq	r3,zero,10ee4 <__subdf3+0x3c4>
   10de8:	00c00434 	movhi	r3,16
   10dec:	29000234 	orhi	r4,r5,8
   10df0:	18ffffc4 	addi	r3,r3,-1
   10df4:	20c8703a 	and	r4,r4,r3
   10df8:	003f8406 	br	10c0c <__alt_mem_Flash_flash_data+0xf4010c0c>
   10dfc:	10bfffc4 	addi	r2,r2,-1
   10e00:	1000501e 	bne	r2,zero,10f44 <__subdf3+0x424>
   10e04:	898fc83a 	sub	r7,r17,r6
   10e08:	89e3803a 	cmpltu	r17,r17,r7
   10e0c:	28cbc83a 	sub	r5,r5,r3
   10e10:	2c4bc83a 	sub	r5,r5,r17
   10e14:	3823883a 	mov	r17,r7
   10e18:	003fa106 	br	10ca0 <__alt_mem_Flash_flash_data+0xf4010ca0>
   10e1c:	1988b03a 	or	r4,r3,r6
   10e20:	203f6226 	beq	r4,zero,10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10e24:	10bfffc4 	addi	r2,r2,-1
   10e28:	10009b1e 	bne	r2,zero,11098 <__subdf3+0x578>
   10e2c:	344d883a 	add	r6,r6,r17
   10e30:	3463803a 	cmpltu	r17,r6,r17
   10e34:	194b883a 	add	r5,r3,r5
   10e38:	2c4b883a 	add	r5,r5,r17
   10e3c:	3023883a 	mov	r17,r6
   10e40:	003fd406 	br	10d94 <__alt_mem_Flash_flash_data+0xf4010d94>
   10e44:	1106b03a 	or	r3,r2,r4
   10e48:	1800b426 	beq	r3,zero,1111c <__subdf3+0x5fc>
   10e4c:	100b883a 	mov	r5,r2
   10e50:	2023883a 	mov	r17,r4
   10e54:	888001cc 	andi	r2,r17,7
   10e58:	103f561e 	bne	r2,zero,10bb4 <__alt_mem_Flash_flash_data+0xf4010bb4>
   10e5c:	9200004c 	andi	r8,r18,1
   10e60:	003fb206 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
   10e64:	1000531e 	bne	r2,zero,10fb4 <__subdf3+0x494>
   10e68:	80800044 	addi	r2,r16,1
   10e6c:	1081ffcc 	andi	r2,r2,2047
   10e70:	01000044 	movi	r4,1
   10e74:	2080a00e 	bge	r4,r2,110f8 <__subdf3+0x5d8>
   10e78:	8985c83a 	sub	r2,r17,r6
   10e7c:	8889803a 	cmpltu	r4,r17,r2
   10e80:	28e7c83a 	sub	r19,r5,r3
   10e84:	9927c83a 	sub	r19,r19,r4
   10e88:	9900202c 	andhi	r4,r19,128
   10e8c:	20006226 	beq	r4,zero,11018 <__subdf3+0x4f8>
   10e90:	3463c83a 	sub	r17,r6,r17
   10e94:	194bc83a 	sub	r5,r3,r5
   10e98:	344d803a 	cmpltu	r6,r6,r17
   10e9c:	29a7c83a 	sub	r19,r5,r6
   10ea0:	3825883a 	mov	r18,r7
   10ea4:	983f841e 	bne	r19,zero,10cb8 <__alt_mem_Flash_flash_data+0xf4010cb8>
   10ea8:	8809883a 	mov	r4,r17
   10eac:	00115ec0 	call	115ec <__clzsi2>
   10eb0:	10800804 	addi	r2,r2,32
   10eb4:	10fffe04 	addi	r3,r2,-8
   10eb8:	010007c4 	movi	r4,31
   10ebc:	20ff830e 	bge	r4,r3,10ccc <__alt_mem_Flash_flash_data+0xf4010ccc>
   10ec0:	14fff604 	addi	r19,r2,-40
   10ec4:	8ce6983a 	sll	r19,r17,r19
   10ec8:	0023883a 	mov	r17,zero
   10ecc:	1c3f860e 	bge	r3,r16,10ce8 <__alt_mem_Flash_flash_data+0xf4010ce8>
   10ed0:	017fe034 	movhi	r5,65408
   10ed4:	297fffc4 	addi	r5,r5,-1
   10ed8:	80e1c83a 	sub	r16,r16,r3
   10edc:	994a703a 	and	r5,r19,r5
   10ee0:	003f3206 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10ee4:	0009883a 	mov	r4,zero
   10ee8:	0005883a 	mov	r2,zero
   10eec:	003f4706 	br	10c0c <__alt_mem_Flash_flash_data+0xf4010c0c>
   10ef0:	198cb03a 	or	r6,r3,r6
   10ef4:	300cc03a 	cmpne	r6,r6,zero
   10ef8:	0005883a 	mov	r2,zero
   10efc:	003f6306 	br	10c8c <__alt_mem_Flash_flash_data+0xf4010c8c>
   10f00:	10009d1e 	bne	r2,zero,11178 <__subdf3+0x658>
   10f04:	81c00044 	addi	r7,r16,1
   10f08:	3881ffcc 	andi	r2,r7,2047
   10f0c:	02400044 	movi	r9,1
   10f10:	4880680e 	bge	r9,r2,110b4 <__subdf3+0x594>
   10f14:	0081ffc4 	movi	r2,2047
   10f18:	3880ae26 	beq	r7,r2,111d4 <__subdf3+0x6b4>
   10f1c:	344d883a 	add	r6,r6,r17
   10f20:	3463803a 	cmpltu	r17,r6,r17
   10f24:	194b883a 	add	r5,r3,r5
   10f28:	2c4b883a 	add	r5,r5,r17
   10f2c:	282297fa 	slli	r17,r5,31
   10f30:	300cd07a 	srli	r6,r6,1
   10f34:	280ad07a 	srli	r5,r5,1
   10f38:	3821883a 	mov	r16,r7
   10f3c:	89a2b03a 	or	r17,r17,r6
   10f40:	003f1a06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10f44:	0101ffc4 	movi	r4,2047
   10f48:	813f431e 	bne	r16,r4,10c58 <__alt_mem_Flash_flash_data+0xf4010c58>
   10f4c:	003f1706 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   10f50:	80bff844 	addi	r2,r16,-31
   10f54:	00c00804 	movi	r3,32
   10f58:	9884d83a 	srl	r2,r19,r2
   10f5c:	28c05126 	beq	r5,r3,110a4 <__subdf3+0x584>
   10f60:	00c00fc4 	movi	r3,63
   10f64:	1c21c83a 	sub	r16,r3,r16
   10f68:	9c26983a 	sll	r19,r19,r16
   10f6c:	9c62b03a 	or	r17,r19,r17
   10f70:	8822c03a 	cmpne	r17,r17,zero
   10f74:	88a2b03a 	or	r17,r17,r2
   10f78:	000b883a 	mov	r5,zero
   10f7c:	0021883a 	mov	r16,zero
   10f80:	003fb406 	br	10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10f84:	113ff804 	addi	r4,r2,-32
   10f88:	01c00804 	movi	r7,32
   10f8c:	1908d83a 	srl	r4,r3,r4
   10f90:	11c04626 	beq	r2,r7,110ac <__subdf3+0x58c>
   10f94:	01c01004 	movi	r7,64
   10f98:	3885c83a 	sub	r2,r7,r2
   10f9c:	1884983a 	sll	r2,r3,r2
   10fa0:	118cb03a 	or	r6,r2,r6
   10fa4:	300cc03a 	cmpne	r6,r6,zero
   10fa8:	310cb03a 	or	r6,r6,r4
   10fac:	0005883a 	mov	r2,zero
   10fb0:	003f3606 	br	10c8c <__alt_mem_Flash_flash_data+0xf4010c8c>
   10fb4:	80002b26 	beq	r16,zero,11064 <__subdf3+0x544>
   10fb8:	0101ffc4 	movi	r4,2047
   10fbc:	51006926 	beq	r10,r4,11164 <__subdf3+0x644>
   10fc0:	0085c83a 	sub	r2,zero,r2
   10fc4:	29402034 	orhi	r5,r5,128
   10fc8:	01000e04 	movi	r4,56
   10fcc:	20807d16 	blt	r4,r2,111c4 <__subdf3+0x6a4>
   10fd0:	010007c4 	movi	r4,31
   10fd4:	2080d916 	blt	r4,r2,1133c <__subdf3+0x81c>
   10fd8:	01000804 	movi	r4,32
   10fdc:	2089c83a 	sub	r4,r4,r2
   10fe0:	2912983a 	sll	r9,r5,r4
   10fe4:	8890d83a 	srl	r8,r17,r2
   10fe8:	8908983a 	sll	r4,r17,r4
   10fec:	2884d83a 	srl	r2,r5,r2
   10ff0:	4a22b03a 	or	r17,r9,r8
   10ff4:	2008c03a 	cmpne	r4,r4,zero
   10ff8:	8922b03a 	or	r17,r17,r4
   10ffc:	3463c83a 	sub	r17,r6,r17
   11000:	1885c83a 	sub	r2,r3,r2
   11004:	344d803a 	cmpltu	r6,r6,r17
   11008:	118bc83a 	sub	r5,r2,r6
   1100c:	5021883a 	mov	r16,r10
   11010:	3825883a 	mov	r18,r7
   11014:	003f2206 	br	10ca0 <__alt_mem_Flash_flash_data+0xf4010ca0>
   11018:	9886b03a 	or	r3,r19,r2
   1101c:	18001c1e 	bne	r3,zero,11090 <__subdf3+0x570>
   11020:	0011883a 	mov	r8,zero
   11024:	000b883a 	mov	r5,zero
   11028:	0023883a 	mov	r17,zero
   1102c:	0021883a 	mov	r16,zero
   11030:	003f3e06 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
   11034:	010007c4 	movi	r4,31
   11038:	20803c16 	blt	r4,r2,1112c <__subdf3+0x60c>
   1103c:	01000804 	movi	r4,32
   11040:	2089c83a 	sub	r4,r4,r2
   11044:	1912983a 	sll	r9,r3,r4
   11048:	308ed83a 	srl	r7,r6,r2
   1104c:	3108983a 	sll	r4,r6,r4
   11050:	1884d83a 	srl	r2,r3,r2
   11054:	49ceb03a 	or	r7,r9,r7
   11058:	2008c03a 	cmpne	r4,r4,zero
   1105c:	390eb03a 	or	r7,r7,r4
   11060:	003f4706 	br	10d80 <__alt_mem_Flash_flash_data+0xf4010d80>
   11064:	2c48b03a 	or	r4,r5,r17
   11068:	20003e26 	beq	r4,zero,11164 <__subdf3+0x644>
   1106c:	0084303a 	nor	r2,zero,r2
   11070:	10003a1e 	bne	r2,zero,1115c <__subdf3+0x63c>
   11074:	3463c83a 	sub	r17,r6,r17
   11078:	194bc83a 	sub	r5,r3,r5
   1107c:	344d803a 	cmpltu	r6,r6,r17
   11080:	298bc83a 	sub	r5,r5,r6
   11084:	5021883a 	mov	r16,r10
   11088:	3825883a 	mov	r18,r7
   1108c:	003f0406 	br	10ca0 <__alt_mem_Flash_flash_data+0xf4010ca0>
   11090:	1023883a 	mov	r17,r2
   11094:	003f0706 	br	10cb4 <__alt_mem_Flash_flash_data+0xf4010cb4>
   11098:	0101ffc4 	movi	r4,2047
   1109c:	813f331e 	bne	r16,r4,10d6c <__alt_mem_Flash_flash_data+0xf4010d6c>
   110a0:	003ec206 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   110a4:	0027883a 	mov	r19,zero
   110a8:	003fb006 	br	10f6c <__alt_mem_Flash_flash_data+0xf4010f6c>
   110ac:	0005883a 	mov	r2,zero
   110b0:	003fbb06 	br	10fa0 <__alt_mem_Flash_flash_data+0xf4010fa0>
   110b4:	2c44b03a 	or	r2,r5,r17
   110b8:	80008b1e 	bne	r16,zero,112e8 <__subdf3+0x7c8>
   110bc:	1000b526 	beq	r2,zero,11394 <__subdf3+0x874>
   110c0:	1984b03a 	or	r2,r3,r6
   110c4:	103eb926 	beq	r2,zero,10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   110c8:	3449883a 	add	r4,r6,r17
   110cc:	2463803a 	cmpltu	r17,r4,r17
   110d0:	194b883a 	add	r5,r3,r5
   110d4:	2c4b883a 	add	r5,r5,r17
   110d8:	2880202c 	andhi	r2,r5,128
   110dc:	2023883a 	mov	r17,r4
   110e0:	103f5c26 	beq	r2,zero,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   110e4:	00bfe034 	movhi	r2,65408
   110e8:	10bfffc4 	addi	r2,r2,-1
   110ec:	4821883a 	mov	r16,r9
   110f0:	288a703a 	and	r5,r5,r2
   110f4:	003ead06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   110f8:	2c44b03a 	or	r2,r5,r17
   110fc:	8000291e 	bne	r16,zero,111a4 <__subdf3+0x684>
   11100:	10004f1e 	bne	r2,zero,11240 <__subdf3+0x720>
   11104:	1984b03a 	or	r2,r3,r6
   11108:	10000426 	beq	r2,zero,1111c <__subdf3+0x5fc>
   1110c:	180b883a 	mov	r5,r3
   11110:	3023883a 	mov	r17,r6
   11114:	3825883a 	mov	r18,r7
   11118:	003ea406 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   1111c:	0011883a 	mov	r8,zero
   11120:	000b883a 	mov	r5,zero
   11124:	0023883a 	mov	r17,zero
   11128:	003f0006 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
   1112c:	11fff804 	addi	r7,r2,-32
   11130:	19c8d83a 	srl	r4,r3,r7
   11134:	01c00804 	movi	r7,32
   11138:	11c07e26 	beq	r2,r7,11334 <__subdf3+0x814>
   1113c:	01c01004 	movi	r7,64
   11140:	3885c83a 	sub	r2,r7,r2
   11144:	1884983a 	sll	r2,r3,r2
   11148:	118cb03a 	or	r6,r2,r6
   1114c:	300ec03a 	cmpne	r7,r6,zero
   11150:	390eb03a 	or	r7,r7,r4
   11154:	0005883a 	mov	r2,zero
   11158:	003f0906 	br	10d80 <__alt_mem_Flash_flash_data+0xf4010d80>
   1115c:	0101ffc4 	movi	r4,2047
   11160:	513f991e 	bne	r10,r4,10fc8 <__alt_mem_Flash_flash_data+0xf4010fc8>
   11164:	180b883a 	mov	r5,r3
   11168:	3023883a 	mov	r17,r6
   1116c:	5021883a 	mov	r16,r10
   11170:	3825883a 	mov	r18,r7
   11174:	003e8d06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   11178:	80001a1e 	bne	r16,zero,111e4 <__subdf3+0x6c4>
   1117c:	2c48b03a 	or	r4,r5,r17
   11180:	20005526 	beq	r4,zero,112d8 <__subdf3+0x7b8>
   11184:	0084303a 	nor	r2,zero,r2
   11188:	1000511e 	bne	r2,zero,112d0 <__subdf3+0x7b0>
   1118c:	89a3883a 	add	r17,r17,r6
   11190:	194b883a 	add	r5,r3,r5
   11194:	898d803a 	cmpltu	r6,r17,r6
   11198:	298b883a 	add	r5,r5,r6
   1119c:	5021883a 	mov	r16,r10
   111a0:	003efc06 	br	10d94 <__alt_mem_Flash_flash_data+0xf4010d94>
   111a4:	1000341e 	bne	r2,zero,11278 <__subdf3+0x758>
   111a8:	1984b03a 	or	r2,r3,r6
   111ac:	10006f26 	beq	r2,zero,1136c <__subdf3+0x84c>
   111b0:	180b883a 	mov	r5,r3
   111b4:	3023883a 	mov	r17,r6
   111b8:	3825883a 	mov	r18,r7
   111bc:	0401ffc4 	movi	r16,2047
   111c0:	003e7a06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   111c4:	2c62b03a 	or	r17,r5,r17
   111c8:	8822c03a 	cmpne	r17,r17,zero
   111cc:	0005883a 	mov	r2,zero
   111d0:	003f8a06 	br	10ffc <__alt_mem_Flash_flash_data+0xf4010ffc>
   111d4:	3821883a 	mov	r16,r7
   111d8:	000b883a 	mov	r5,zero
   111dc:	0023883a 	mov	r17,zero
   111e0:	003ed206 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
   111e4:	0101ffc4 	movi	r4,2047
   111e8:	51003b26 	beq	r10,r4,112d8 <__subdf3+0x7b8>
   111ec:	0085c83a 	sub	r2,zero,r2
   111f0:	29402034 	orhi	r5,r5,128
   111f4:	01000e04 	movi	r4,56
   111f8:	20806216 	blt	r4,r2,11384 <__subdf3+0x864>
   111fc:	010007c4 	movi	r4,31
   11200:	20806b16 	blt	r4,r2,113b0 <__subdf3+0x890>
   11204:	01000804 	movi	r4,32
   11208:	2089c83a 	sub	r4,r4,r2
   1120c:	2912983a 	sll	r9,r5,r4
   11210:	888ed83a 	srl	r7,r17,r2
   11214:	8908983a 	sll	r4,r17,r4
   11218:	2884d83a 	srl	r2,r5,r2
   1121c:	49e2b03a 	or	r17,r9,r7
   11220:	2008c03a 	cmpne	r4,r4,zero
   11224:	8922b03a 	or	r17,r17,r4
   11228:	89a3883a 	add	r17,r17,r6
   1122c:	10c5883a 	add	r2,r2,r3
   11230:	898d803a 	cmpltu	r6,r17,r6
   11234:	118b883a 	add	r5,r2,r6
   11238:	5021883a 	mov	r16,r10
   1123c:	003ed506 	br	10d94 <__alt_mem_Flash_flash_data+0xf4010d94>
   11240:	1984b03a 	or	r2,r3,r6
   11244:	103e5926 	beq	r2,zero,10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   11248:	8989c83a 	sub	r4,r17,r6
   1124c:	8911803a 	cmpltu	r8,r17,r4
   11250:	28c5c83a 	sub	r2,r5,r3
   11254:	1205c83a 	sub	r2,r2,r8
   11258:	1200202c 	andhi	r8,r2,128
   1125c:	403ef926 	beq	r8,zero,10e44 <__alt_mem_Flash_flash_data+0xf4010e44>
   11260:	3463c83a 	sub	r17,r6,r17
   11264:	194bc83a 	sub	r5,r3,r5
   11268:	344d803a 	cmpltu	r6,r6,r17
   1126c:	298bc83a 	sub	r5,r5,r6
   11270:	3825883a 	mov	r18,r7
   11274:	003e4d06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   11278:	1984b03a 	or	r2,r3,r6
   1127c:	10002b26 	beq	r2,zero,1132c <__subdf3+0x80c>
   11280:	2808d0fa 	srli	r4,r5,3
   11284:	8822d0fa 	srli	r17,r17,3
   11288:	280a977a 	slli	r5,r5,29
   1128c:	2080022c 	andhi	r2,r4,8
   11290:	2c62b03a 	or	r17,r5,r17
   11294:	10000826 	beq	r2,zero,112b8 <__subdf3+0x798>
   11298:	1810d0fa 	srli	r8,r3,3
   1129c:	4080022c 	andhi	r2,r8,8
   112a0:	1000051e 	bne	r2,zero,112b8 <__subdf3+0x798>
   112a4:	300cd0fa 	srli	r6,r6,3
   112a8:	1804977a 	slli	r2,r3,29
   112ac:	4009883a 	mov	r4,r8
   112b0:	3825883a 	mov	r18,r7
   112b4:	11a2b03a 	or	r17,r2,r6
   112b8:	880ad77a 	srli	r5,r17,29
   112bc:	200890fa 	slli	r4,r4,3
   112c0:	882290fa 	slli	r17,r17,3
   112c4:	0401ffc4 	movi	r16,2047
   112c8:	290ab03a 	or	r5,r5,r4
   112cc:	003e3706 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   112d0:	0101ffc4 	movi	r4,2047
   112d4:	513fc71e 	bne	r10,r4,111f4 <__alt_mem_Flash_flash_data+0xf40111f4>
   112d8:	180b883a 	mov	r5,r3
   112dc:	3023883a 	mov	r17,r6
   112e0:	5021883a 	mov	r16,r10
   112e4:	003e3106 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   112e8:	10002d26 	beq	r2,zero,113a0 <__subdf3+0x880>
   112ec:	1984b03a 	or	r2,r3,r6
   112f0:	10000e26 	beq	r2,zero,1132c <__subdf3+0x80c>
   112f4:	2808d0fa 	srli	r4,r5,3
   112f8:	8822d0fa 	srli	r17,r17,3
   112fc:	280a977a 	slli	r5,r5,29
   11300:	2080022c 	andhi	r2,r4,8
   11304:	2c62b03a 	or	r17,r5,r17
   11308:	103feb26 	beq	r2,zero,112b8 <__alt_mem_Flash_flash_data+0xf40112b8>
   1130c:	180ed0fa 	srli	r7,r3,3
   11310:	3880022c 	andhi	r2,r7,8
   11314:	103fe81e 	bne	r2,zero,112b8 <__alt_mem_Flash_flash_data+0xf40112b8>
   11318:	300cd0fa 	srli	r6,r6,3
   1131c:	1804977a 	slli	r2,r3,29
   11320:	3809883a 	mov	r4,r7
   11324:	11a2b03a 	or	r17,r2,r6
   11328:	003fe306 	br	112b8 <__alt_mem_Flash_flash_data+0xf40112b8>
   1132c:	0401ffc4 	movi	r16,2047
   11330:	003e1e06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   11334:	0005883a 	mov	r2,zero
   11338:	003f8306 	br	11148 <__alt_mem_Flash_flash_data+0xf4011148>
   1133c:	113ff804 	addi	r4,r2,-32
   11340:	02000804 	movi	r8,32
   11344:	2908d83a 	srl	r4,r5,r4
   11348:	12002526 	beq	r2,r8,113e0 <__subdf3+0x8c0>
   1134c:	02001004 	movi	r8,64
   11350:	4085c83a 	sub	r2,r8,r2
   11354:	288a983a 	sll	r5,r5,r2
   11358:	2c62b03a 	or	r17,r5,r17
   1135c:	8822c03a 	cmpne	r17,r17,zero
   11360:	8922b03a 	or	r17,r17,r4
   11364:	0005883a 	mov	r2,zero
   11368:	003f2406 	br	10ffc <__alt_mem_Flash_flash_data+0xf4010ffc>
   1136c:	01402034 	movhi	r5,128
   11370:	0011883a 	mov	r8,zero
   11374:	297fffc4 	addi	r5,r5,-1
   11378:	047ffe04 	movi	r17,-8
   1137c:	0401ffc4 	movi	r16,2047
   11380:	003e6a06 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
   11384:	2c62b03a 	or	r17,r5,r17
   11388:	8822c03a 	cmpne	r17,r17,zero
   1138c:	0005883a 	mov	r2,zero
   11390:	003fa506 	br	11228 <__alt_mem_Flash_flash_data+0xf4011228>
   11394:	180b883a 	mov	r5,r3
   11398:	3023883a 	mov	r17,r6
   1139c:	003e0306 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   113a0:	180b883a 	mov	r5,r3
   113a4:	3023883a 	mov	r17,r6
   113a8:	0401ffc4 	movi	r16,2047
   113ac:	003dff06 	br	10bac <__alt_mem_Flash_flash_data+0xf4010bac>
   113b0:	113ff804 	addi	r4,r2,-32
   113b4:	01c00804 	movi	r7,32
   113b8:	2908d83a 	srl	r4,r5,r4
   113bc:	11c00a26 	beq	r2,r7,113e8 <__subdf3+0x8c8>
   113c0:	01c01004 	movi	r7,64
   113c4:	3885c83a 	sub	r2,r7,r2
   113c8:	288a983a 	sll	r5,r5,r2
   113cc:	2c62b03a 	or	r17,r5,r17
   113d0:	8822c03a 	cmpne	r17,r17,zero
   113d4:	8922b03a 	or	r17,r17,r4
   113d8:	0005883a 	mov	r2,zero
   113dc:	003f9206 	br	11228 <__alt_mem_Flash_flash_data+0xf4011228>
   113e0:	000b883a 	mov	r5,zero
   113e4:	003fdc06 	br	11358 <__alt_mem_Flash_flash_data+0xf4011358>
   113e8:	000b883a 	mov	r5,zero
   113ec:	003ff706 	br	113cc <__alt_mem_Flash_flash_data+0xf40113cc>

000113f0 <__fixdfsi>:
   113f0:	2806d53a 	srli	r3,r5,20
   113f4:	00800434 	movhi	r2,16
   113f8:	10bfffc4 	addi	r2,r2,-1
   113fc:	18c1ffcc 	andi	r3,r3,2047
   11400:	0180ff84 	movi	r6,1022
   11404:	2884703a 	and	r2,r5,r2
   11408:	280ad7fa 	srli	r5,r5,31
   1140c:	30c0130e 	bge	r6,r3,1145c <__fixdfsi+0x6c>
   11410:	01810744 	movi	r6,1053
   11414:	30c00d16 	blt	r6,r3,1144c <__fixdfsi+0x5c>
   11418:	01810cc4 	movi	r6,1075
   1141c:	30cdc83a 	sub	r6,r6,r3
   11420:	01c007c4 	movi	r7,31
   11424:	10800434 	orhi	r2,r2,16
   11428:	39800e0e 	bge	r7,r6,11464 <__fixdfsi+0x74>
   1142c:	010104c4 	movi	r4,1043
   11430:	20c7c83a 	sub	r3,r4,r3
   11434:	10c6d83a 	srl	r3,r2,r3
   11438:	29403fcc 	andi	r5,r5,255
   1143c:	0145c83a 	sub	r2,zero,r5
   11440:	1884f03a 	xor	r2,r3,r2
   11444:	1145883a 	add	r2,r2,r5
   11448:	f800283a 	ret
   1144c:	00a00034 	movhi	r2,32768
   11450:	10bfffc4 	addi	r2,r2,-1
   11454:	2885883a 	add	r2,r5,r2
   11458:	f800283a 	ret
   1145c:	0005883a 	mov	r2,zero
   11460:	f800283a 	ret
   11464:	18fefb44 	addi	r3,r3,-1043
   11468:	2188d83a 	srl	r4,r4,r6
   1146c:	10c6983a 	sll	r3,r2,r3
   11470:	20c6b03a 	or	r3,r4,r3
   11474:	003ff006 	br	11438 <__alt_mem_Flash_flash_data+0xf4011438>

00011478 <__floatsidf>:
   11478:	defffd04 	addi	sp,sp,-12
   1147c:	dc400115 	stw	r17,4(sp)
   11480:	dfc00215 	stw	ra,8(sp)
   11484:	dc000015 	stw	r16,0(sp)
   11488:	2023883a 	mov	r17,r4
   1148c:	20001426 	beq	r4,zero,114e0 <__floatsidf+0x68>
   11490:	2020d7fa 	srli	r16,r4,31
   11494:	80000126 	beq	r16,zero,1149c <__floatsidf+0x24>
   11498:	0123c83a 	sub	r17,zero,r4
   1149c:	8809883a 	mov	r4,r17
   114a0:	00115ec0 	call	115ec <__clzsi2>
   114a4:	01410784 	movi	r5,1054
   114a8:	00c00284 	movi	r3,10
   114ac:	288bc83a 	sub	r5,r5,r2
   114b0:	18801c16 	blt	r3,r2,11524 <__floatsidf+0xac>
   114b4:	00c002c4 	movi	r3,11
   114b8:	1887c83a 	sub	r3,r3,r2
   114bc:	88c8d83a 	srl	r4,r17,r3
   114c0:	00c00434 	movhi	r3,16
   114c4:	18ffffc4 	addi	r3,r3,-1
   114c8:	10800544 	addi	r2,r2,21
   114cc:	20c8703a 	and	r4,r4,r3
   114d0:	8884983a 	sll	r2,r17,r2
   114d4:	28c1ffcc 	andi	r3,r5,2047
   114d8:	800d883a 	mov	r6,r16
   114dc:	00000406 	br	114f0 <__floatsidf+0x78>
   114e0:	000d883a 	mov	r6,zero
   114e4:	0007883a 	mov	r3,zero
   114e8:	0009883a 	mov	r4,zero
   114ec:	0005883a 	mov	r2,zero
   114f0:	180a953a 	slli	r5,r3,20
   114f4:	31803fcc 	andi	r6,r6,255
   114f8:	00c00434 	movhi	r3,16
   114fc:	300c97fa 	slli	r6,r6,31
   11500:	18ffffc4 	addi	r3,r3,-1
   11504:	20c6703a 	and	r3,r4,r3
   11508:	1946b03a 	or	r3,r3,r5
   1150c:	1986b03a 	or	r3,r3,r6
   11510:	dfc00217 	ldw	ra,8(sp)
   11514:	dc400117 	ldw	r17,4(sp)
   11518:	dc000017 	ldw	r16,0(sp)
   1151c:	dec00304 	addi	sp,sp,12
   11520:	f800283a 	ret
   11524:	10fffd44 	addi	r3,r2,-11
   11528:	88c8983a 	sll	r4,r17,r3
   1152c:	00800434 	movhi	r2,16
   11530:	10bfffc4 	addi	r2,r2,-1
   11534:	2088703a 	and	r4,r4,r2
   11538:	28c1ffcc 	andi	r3,r5,2047
   1153c:	800d883a 	mov	r6,r16
   11540:	0005883a 	mov	r2,zero
   11544:	003fea06 	br	114f0 <__alt_mem_Flash_flash_data+0xf40114f0>

00011548 <__floatunsidf>:
   11548:	defffe04 	addi	sp,sp,-8
   1154c:	dc000015 	stw	r16,0(sp)
   11550:	dfc00115 	stw	ra,4(sp)
   11554:	2021883a 	mov	r16,r4
   11558:	20001026 	beq	r4,zero,1159c <__floatunsidf+0x54>
   1155c:	00115ec0 	call	115ec <__clzsi2>
   11560:	01410784 	movi	r5,1054
   11564:	100d883a 	mov	r6,r2
   11568:	288bc83a 	sub	r5,r5,r2
   1156c:	00800284 	movi	r2,10
   11570:	11801616 	blt	r2,r6,115cc <__floatunsidf+0x84>
   11574:	008002c4 	movi	r2,11
   11578:	1185c83a 	sub	r2,r2,r6
   1157c:	8084d83a 	srl	r2,r16,r2
   11580:	00c00434 	movhi	r3,16
   11584:	31c00544 	addi	r7,r6,21
   11588:	18ffffc4 	addi	r3,r3,-1
   1158c:	81e0983a 	sll	r16,r16,r7
   11590:	10cc703a 	and	r6,r2,r3
   11594:	2941ffcc 	andi	r5,r5,2047
   11598:	00000206 	br	115a4 <__floatunsidf+0x5c>
   1159c:	000b883a 	mov	r5,zero
   115a0:	000d883a 	mov	r6,zero
   115a4:	280a953a 	slli	r5,r5,20
   115a8:	00c00434 	movhi	r3,16
   115ac:	18ffffc4 	addi	r3,r3,-1
   115b0:	30c6703a 	and	r3,r6,r3
   115b4:	8005883a 	mov	r2,r16
   115b8:	1946b03a 	or	r3,r3,r5
   115bc:	dfc00117 	ldw	ra,4(sp)
   115c0:	dc000017 	ldw	r16,0(sp)
   115c4:	dec00204 	addi	sp,sp,8
   115c8:	f800283a 	ret
   115cc:	31bffd44 	addi	r6,r6,-11
   115d0:	818c983a 	sll	r6,r16,r6
   115d4:	00800434 	movhi	r2,16
   115d8:	10bfffc4 	addi	r2,r2,-1
   115dc:	2941ffcc 	andi	r5,r5,2047
   115e0:	0021883a 	mov	r16,zero
   115e4:	308c703a 	and	r6,r6,r2
   115e8:	003fee06 	br	115a4 <__alt_mem_Flash_flash_data+0xf40115a4>

000115ec <__clzsi2>:
   115ec:	00bfffd4 	movui	r2,65535
   115f0:	11000b36 	bltu	r2,r4,11620 <__clzsi2+0x34>
   115f4:	00803fc4 	movi	r2,255
   115f8:	1100122e 	bgeu	r2,r4,11644 <__clzsi2+0x58>
   115fc:	00c00204 	movi	r3,8
   11600:	01400604 	movi	r5,24
   11604:	20c8d83a 	srl	r4,r4,r3
   11608:	008000b4 	movhi	r2,2
   1160c:	10bc9604 	addi	r2,r2,-3496
   11610:	1109883a 	add	r4,r2,r4
   11614:	20800003 	ldbu	r2,0(r4)
   11618:	2885c83a 	sub	r2,r5,r2
   1161c:	f800283a 	ret
   11620:	00804034 	movhi	r2,256
   11624:	10bfffc4 	addi	r2,r2,-1
   11628:	11000336 	bltu	r2,r4,11638 <__clzsi2+0x4c>
   1162c:	00c00404 	movi	r3,16
   11630:	180b883a 	mov	r5,r3
   11634:	003ff306 	br	11604 <__alt_mem_Flash_flash_data+0xf4011604>
   11638:	00c00604 	movi	r3,24
   1163c:	01400204 	movi	r5,8
   11640:	003ff006 	br	11604 <__alt_mem_Flash_flash_data+0xf4011604>
   11644:	0007883a 	mov	r3,zero
   11648:	01400804 	movi	r5,32
   1164c:	003fed06 	br	11604 <__alt_mem_Flash_flash_data+0xf4011604>

00011650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11650:	defffe04 	addi	sp,sp,-8
   11654:	dfc00115 	stw	ra,4(sp)
   11658:	df000015 	stw	fp,0(sp)
   1165c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11660:	008000b4 	movhi	r2,2
   11664:	10868804 	addi	r2,r2,6688
   11668:	10800017 	ldw	r2,0(r2)
   1166c:	10000526 	beq	r2,zero,11684 <alt_get_errno+0x34>
   11670:	008000b4 	movhi	r2,2
   11674:	10868804 	addi	r2,r2,6688
   11678:	10800017 	ldw	r2,0(r2)
   1167c:	103ee83a 	callr	r2
   11680:	00000206 	br	1168c <alt_get_errno+0x3c>
   11684:	008000b4 	movhi	r2,2
   11688:	108f4f04 	addi	r2,r2,15676
}
   1168c:	e037883a 	mov	sp,fp
   11690:	dfc00117 	ldw	ra,4(sp)
   11694:	df000017 	ldw	fp,0(sp)
   11698:	dec00204 	addi	sp,sp,8
   1169c:	f800283a 	ret

000116a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   116a0:	defffb04 	addi	sp,sp,-20
   116a4:	dfc00415 	stw	ra,16(sp)
   116a8:	df000315 	stw	fp,12(sp)
   116ac:	df000304 	addi	fp,sp,12
   116b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   116b4:	e0bfff17 	ldw	r2,-4(fp)
   116b8:	10000616 	blt	r2,zero,116d4 <close+0x34>
   116bc:	e0bfff17 	ldw	r2,-4(fp)
   116c0:	10c00324 	muli	r3,r2,12
   116c4:	008000b4 	movhi	r2,2
   116c8:	10805b04 	addi	r2,r2,364
   116cc:	1885883a 	add	r2,r3,r2
   116d0:	00000106 	br	116d8 <close+0x38>
   116d4:	0005883a 	mov	r2,zero
   116d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   116dc:	e0bffd17 	ldw	r2,-12(fp)
   116e0:	10001926 	beq	r2,zero,11748 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   116e4:	e0bffd17 	ldw	r2,-12(fp)
   116e8:	10800017 	ldw	r2,0(r2)
   116ec:	10800417 	ldw	r2,16(r2)
   116f0:	10000626 	beq	r2,zero,1170c <close+0x6c>
   116f4:	e0bffd17 	ldw	r2,-12(fp)
   116f8:	10800017 	ldw	r2,0(r2)
   116fc:	10800417 	ldw	r2,16(r2)
   11700:	e13ffd17 	ldw	r4,-12(fp)
   11704:	103ee83a 	callr	r2
   11708:	00000106 	br	11710 <close+0x70>
   1170c:	0005883a 	mov	r2,zero
   11710:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11714:	e13fff17 	ldw	r4,-4(fp)
   11718:	0011db80 	call	11db8 <alt_release_fd>
    if (rval < 0)
   1171c:	e0bffe17 	ldw	r2,-8(fp)
   11720:	1000070e 	bge	r2,zero,11740 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   11724:	00116500 	call	11650 <alt_get_errno>
   11728:	1007883a 	mov	r3,r2
   1172c:	e0bffe17 	ldw	r2,-8(fp)
   11730:	0085c83a 	sub	r2,zero,r2
   11734:	18800015 	stw	r2,0(r3)
      return -1;
   11738:	00bfffc4 	movi	r2,-1
   1173c:	00000706 	br	1175c <close+0xbc>
    }
    return 0;
   11740:	0005883a 	mov	r2,zero
   11744:	00000506 	br	1175c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11748:	00116500 	call	11650 <alt_get_errno>
   1174c:	1007883a 	mov	r3,r2
   11750:	00801444 	movi	r2,81
   11754:	18800015 	stw	r2,0(r3)
    return -1;
   11758:	00bfffc4 	movi	r2,-1
  }
}
   1175c:	e037883a 	mov	sp,fp
   11760:	dfc00117 	ldw	ra,4(sp)
   11764:	df000017 	ldw	fp,0(sp)
   11768:	dec00204 	addi	sp,sp,8
   1176c:	f800283a 	ret

00011770 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11770:	defffc04 	addi	sp,sp,-16
   11774:	df000315 	stw	fp,12(sp)
   11778:	df000304 	addi	fp,sp,12
   1177c:	e13ffd15 	stw	r4,-12(fp)
   11780:	e17ffe15 	stw	r5,-8(fp)
   11784:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11788:	e0bfff17 	ldw	r2,-4(fp)
}
   1178c:	e037883a 	mov	sp,fp
   11790:	df000017 	ldw	fp,0(sp)
   11794:	dec00104 	addi	sp,sp,4
   11798:	f800283a 	ret

0001179c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1179c:	defffe04 	addi	sp,sp,-8
   117a0:	dfc00115 	stw	ra,4(sp)
   117a4:	df000015 	stw	fp,0(sp)
   117a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117ac:	008000b4 	movhi	r2,2
   117b0:	10868804 	addi	r2,r2,6688
   117b4:	10800017 	ldw	r2,0(r2)
   117b8:	10000526 	beq	r2,zero,117d0 <alt_get_errno+0x34>
   117bc:	008000b4 	movhi	r2,2
   117c0:	10868804 	addi	r2,r2,6688
   117c4:	10800017 	ldw	r2,0(r2)
   117c8:	103ee83a 	callr	r2
   117cc:	00000206 	br	117d8 <alt_get_errno+0x3c>
   117d0:	008000b4 	movhi	r2,2
   117d4:	108f4f04 	addi	r2,r2,15676
}
   117d8:	e037883a 	mov	sp,fp
   117dc:	dfc00117 	ldw	ra,4(sp)
   117e0:	df000017 	ldw	fp,0(sp)
   117e4:	dec00204 	addi	sp,sp,8
   117e8:	f800283a 	ret

000117ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   117ec:	defffb04 	addi	sp,sp,-20
   117f0:	dfc00415 	stw	ra,16(sp)
   117f4:	df000315 	stw	fp,12(sp)
   117f8:	df000304 	addi	fp,sp,12
   117fc:	e13ffe15 	stw	r4,-8(fp)
   11800:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11804:	e0bffe17 	ldw	r2,-8(fp)
   11808:	10000616 	blt	r2,zero,11824 <fstat+0x38>
   1180c:	e0bffe17 	ldw	r2,-8(fp)
   11810:	10c00324 	muli	r3,r2,12
   11814:	008000b4 	movhi	r2,2
   11818:	10805b04 	addi	r2,r2,364
   1181c:	1885883a 	add	r2,r3,r2
   11820:	00000106 	br	11828 <fstat+0x3c>
   11824:	0005883a 	mov	r2,zero
   11828:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1182c:	e0bffd17 	ldw	r2,-12(fp)
   11830:	10001026 	beq	r2,zero,11874 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11834:	e0bffd17 	ldw	r2,-12(fp)
   11838:	10800017 	ldw	r2,0(r2)
   1183c:	10800817 	ldw	r2,32(r2)
   11840:	10000726 	beq	r2,zero,11860 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   11844:	e0bffd17 	ldw	r2,-12(fp)
   11848:	10800017 	ldw	r2,0(r2)
   1184c:	10800817 	ldw	r2,32(r2)
   11850:	e13ffd17 	ldw	r4,-12(fp)
   11854:	e17fff17 	ldw	r5,-4(fp)
   11858:	103ee83a 	callr	r2
   1185c:	00000a06 	br	11888 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11860:	e0bfff17 	ldw	r2,-4(fp)
   11864:	00c80004 	movi	r3,8192
   11868:	10c00115 	stw	r3,4(r2)
      return 0;
   1186c:	0005883a 	mov	r2,zero
   11870:	00000506 	br	11888 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11874:	001179c0 	call	1179c <alt_get_errno>
   11878:	1007883a 	mov	r3,r2
   1187c:	00801444 	movi	r2,81
   11880:	18800015 	stw	r2,0(r3)
    return -1;
   11884:	00bfffc4 	movi	r2,-1
  }
}
   11888:	e037883a 	mov	sp,fp
   1188c:	dfc00117 	ldw	ra,4(sp)
   11890:	df000017 	ldw	fp,0(sp)
   11894:	dec00204 	addi	sp,sp,8
   11898:	f800283a 	ret

0001189c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1189c:	defffe04 	addi	sp,sp,-8
   118a0:	dfc00115 	stw	ra,4(sp)
   118a4:	df000015 	stw	fp,0(sp)
   118a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   118ac:	008000b4 	movhi	r2,2
   118b0:	10868804 	addi	r2,r2,6688
   118b4:	10800017 	ldw	r2,0(r2)
   118b8:	10000526 	beq	r2,zero,118d0 <alt_get_errno+0x34>
   118bc:	008000b4 	movhi	r2,2
   118c0:	10868804 	addi	r2,r2,6688
   118c4:	10800017 	ldw	r2,0(r2)
   118c8:	103ee83a 	callr	r2
   118cc:	00000206 	br	118d8 <alt_get_errno+0x3c>
   118d0:	008000b4 	movhi	r2,2
   118d4:	108f4f04 	addi	r2,r2,15676
}
   118d8:	e037883a 	mov	sp,fp
   118dc:	dfc00117 	ldw	ra,4(sp)
   118e0:	df000017 	ldw	fp,0(sp)
   118e4:	dec00204 	addi	sp,sp,8
   118e8:	f800283a 	ret

000118ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   118ec:	deffed04 	addi	sp,sp,-76
   118f0:	dfc01215 	stw	ra,72(sp)
   118f4:	df001115 	stw	fp,68(sp)
   118f8:	df001104 	addi	fp,sp,68
   118fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11900:	e0bfff17 	ldw	r2,-4(fp)
   11904:	10000616 	blt	r2,zero,11920 <isatty+0x34>
   11908:	e0bfff17 	ldw	r2,-4(fp)
   1190c:	10c00324 	muli	r3,r2,12
   11910:	008000b4 	movhi	r2,2
   11914:	10805b04 	addi	r2,r2,364
   11918:	1885883a 	add	r2,r3,r2
   1191c:	00000106 	br	11924 <isatty+0x38>
   11920:	0005883a 	mov	r2,zero
   11924:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   11928:	e0bfef17 	ldw	r2,-68(fp)
   1192c:	10000e26 	beq	r2,zero,11968 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11930:	e0bfef17 	ldw	r2,-68(fp)
   11934:	10800017 	ldw	r2,0(r2)
   11938:	10800817 	ldw	r2,32(r2)
   1193c:	1000021e 	bne	r2,zero,11948 <isatty+0x5c>
    {
      return 1;
   11940:	00800044 	movi	r2,1
   11944:	00000d06 	br	1197c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11948:	e0bff004 	addi	r2,fp,-64
   1194c:	e13fff17 	ldw	r4,-4(fp)
   11950:	100b883a 	mov	r5,r2
   11954:	00117ec0 	call	117ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11958:	e0bff117 	ldw	r2,-60(fp)
   1195c:	10880020 	cmpeqi	r2,r2,8192
   11960:	10803fcc 	andi	r2,r2,255
   11964:	00000506 	br	1197c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11968:	001189c0 	call	1189c <alt_get_errno>
   1196c:	1007883a 	mov	r3,r2
   11970:	00801444 	movi	r2,81
   11974:	18800015 	stw	r2,0(r3)
    return 0;
   11978:	0005883a 	mov	r2,zero
  }
}
   1197c:	e037883a 	mov	sp,fp
   11980:	dfc00117 	ldw	ra,4(sp)
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00204 	addi	sp,sp,8
   1198c:	f800283a 	ret

00011990 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11990:	defffc04 	addi	sp,sp,-16
   11994:	df000315 	stw	fp,12(sp)
   11998:	df000304 	addi	fp,sp,12
   1199c:	e13ffd15 	stw	r4,-12(fp)
   119a0:	e17ffe15 	stw	r5,-8(fp)
   119a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   119a8:	e0fffe17 	ldw	r3,-8(fp)
   119ac:	e0bffd17 	ldw	r2,-12(fp)
   119b0:	18800c26 	beq	r3,r2,119e4 <alt_load_section+0x54>
  {
    while( to != end )
   119b4:	00000806 	br	119d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   119b8:	e0bffe17 	ldw	r2,-8(fp)
   119bc:	10c00104 	addi	r3,r2,4
   119c0:	e0fffe15 	stw	r3,-8(fp)
   119c4:	e0fffd17 	ldw	r3,-12(fp)
   119c8:	19000104 	addi	r4,r3,4
   119cc:	e13ffd15 	stw	r4,-12(fp)
   119d0:	18c00017 	ldw	r3,0(r3)
   119d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   119d8:	e0fffe17 	ldw	r3,-8(fp)
   119dc:	e0bfff17 	ldw	r2,-4(fp)
   119e0:	18bff51e 	bne	r3,r2,119b8 <__alt_mem_Flash_flash_data+0xf40119b8>
    {
      *to++ = *from++;
    }
  }
}
   119e4:	e037883a 	mov	sp,fp
   119e8:	df000017 	ldw	fp,0(sp)
   119ec:	dec00104 	addi	sp,sp,4
   119f0:	f800283a 	ret

000119f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   119f4:	defffe04 	addi	sp,sp,-8
   119f8:	dfc00115 	stw	ra,4(sp)
   119fc:	df000015 	stw	fp,0(sp)
   11a00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11a04:	010000b4 	movhi	r4,2
   11a08:	2106ac04 	addi	r4,r4,6832
   11a0c:	014000b4 	movhi	r5,2
   11a10:	297e2404 	addi	r5,r5,-1904
   11a14:	018000b4 	movhi	r6,2
   11a18:	3186ac04 	addi	r6,r6,6832
   11a1c:	00119900 	call	11990 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11a20:	01000034 	movhi	r4,0
   11a24:	21000804 	addi	r4,r4,32
   11a28:	01400034 	movhi	r5,0
   11a2c:	29400804 	addi	r5,r5,32
   11a30:	01800034 	movhi	r6,0
   11a34:	31809104 	addi	r6,r6,580
   11a38:	00119900 	call	11990 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11a3c:	010000b4 	movhi	r4,2
   11a40:	213b7f04 	addi	r4,r4,-4612
   11a44:	014000b4 	movhi	r5,2
   11a48:	297b7f04 	addi	r5,r5,-4612
   11a4c:	018000b4 	movhi	r6,2
   11a50:	31be2404 	addi	r6,r6,-1904
   11a54:	00119900 	call	11990 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11a58:	001da440 	call	1da44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11a5c:	001dc9c0 	call	1dc9c <alt_icache_flush_all>
}
   11a60:	e037883a 	mov	sp,fp
   11a64:	dfc00117 	ldw	ra,4(sp)
   11a68:	df000017 	ldw	fp,0(sp)
   11a6c:	dec00204 	addi	sp,sp,8
   11a70:	f800283a 	ret

00011a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a74:	defffe04 	addi	sp,sp,-8
   11a78:	dfc00115 	stw	ra,4(sp)
   11a7c:	df000015 	stw	fp,0(sp)
   11a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11a84:	008000b4 	movhi	r2,2
   11a88:	10868804 	addi	r2,r2,6688
   11a8c:	10800017 	ldw	r2,0(r2)
   11a90:	10000526 	beq	r2,zero,11aa8 <alt_get_errno+0x34>
   11a94:	008000b4 	movhi	r2,2
   11a98:	10868804 	addi	r2,r2,6688
   11a9c:	10800017 	ldw	r2,0(r2)
   11aa0:	103ee83a 	callr	r2
   11aa4:	00000206 	br	11ab0 <alt_get_errno+0x3c>
   11aa8:	008000b4 	movhi	r2,2
   11aac:	108f4f04 	addi	r2,r2,15676
}
   11ab0:	e037883a 	mov	sp,fp
   11ab4:	dfc00117 	ldw	ra,4(sp)
   11ab8:	df000017 	ldw	fp,0(sp)
   11abc:	dec00204 	addi	sp,sp,8
   11ac0:	f800283a 	ret

00011ac4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   11ac4:	defff904 	addi	sp,sp,-28
   11ac8:	dfc00615 	stw	ra,24(sp)
   11acc:	df000515 	stw	fp,20(sp)
   11ad0:	df000504 	addi	fp,sp,20
   11ad4:	e13ffd15 	stw	r4,-12(fp)
   11ad8:	e17ffe15 	stw	r5,-8(fp)
   11adc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   11ae0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11ae4:	e0bffd17 	ldw	r2,-12(fp)
   11ae8:	10000616 	blt	r2,zero,11b04 <lseek+0x40>
   11aec:	e0bffd17 	ldw	r2,-12(fp)
   11af0:	10c00324 	muli	r3,r2,12
   11af4:	008000b4 	movhi	r2,2
   11af8:	10805b04 	addi	r2,r2,364
   11afc:	1885883a 	add	r2,r3,r2
   11b00:	00000106 	br	11b08 <lseek+0x44>
   11b04:	0005883a 	mov	r2,zero
   11b08:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   11b0c:	e0bffc17 	ldw	r2,-16(fp)
   11b10:	10001026 	beq	r2,zero,11b54 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   11b14:	e0bffc17 	ldw	r2,-16(fp)
   11b18:	10800017 	ldw	r2,0(r2)
   11b1c:	10800717 	ldw	r2,28(r2)
   11b20:	10000926 	beq	r2,zero,11b48 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   11b24:	e0bffc17 	ldw	r2,-16(fp)
   11b28:	10800017 	ldw	r2,0(r2)
   11b2c:	10800717 	ldw	r2,28(r2)
   11b30:	e13ffc17 	ldw	r4,-16(fp)
   11b34:	e17ffe17 	ldw	r5,-8(fp)
   11b38:	e1bfff17 	ldw	r6,-4(fp)
   11b3c:	103ee83a 	callr	r2
   11b40:	e0bffb15 	stw	r2,-20(fp)
   11b44:	00000506 	br	11b5c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   11b48:	00bfde84 	movi	r2,-134
   11b4c:	e0bffb15 	stw	r2,-20(fp)
   11b50:	00000206 	br	11b5c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   11b54:	00bfebc4 	movi	r2,-81
   11b58:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   11b5c:	e0bffb17 	ldw	r2,-20(fp)
   11b60:	1000070e 	bge	r2,zero,11b80 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   11b64:	0011a740 	call	11a74 <alt_get_errno>
   11b68:	1007883a 	mov	r3,r2
   11b6c:	e0bffb17 	ldw	r2,-20(fp)
   11b70:	0085c83a 	sub	r2,zero,r2
   11b74:	18800015 	stw	r2,0(r3)
    rc = -1;
   11b78:	00bfffc4 	movi	r2,-1
   11b7c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   11b80:	e0bffb17 	ldw	r2,-20(fp)
}
   11b84:	e037883a 	mov	sp,fp
   11b88:	dfc00117 	ldw	ra,4(sp)
   11b8c:	df000017 	ldw	fp,0(sp)
   11b90:	dec00204 	addi	sp,sp,8
   11b94:	f800283a 	ret

00011b98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11b98:	defff904 	addi	sp,sp,-28
   11b9c:	dfc00615 	stw	ra,24(sp)
   11ba0:	df000515 	stw	fp,20(sp)
   11ba4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11ba8:	0009883a 	mov	r4,zero
   11bac:	001ab6c0 	call	1ab6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   11bb0:	0012b880 	call	12b88 <OSInit>
   11bb4:	01000044 	movi	r4,1
   11bb8:	00182800 	call	18280 <OSSemCreate>
   11bbc:	1007883a 	mov	r3,r2
   11bc0:	008000b4 	movhi	r2,2
   11bc4:	108f5504 	addi	r2,r2,15700
   11bc8:	10c00015 	stw	r3,0(r2)
   11bcc:	01000044 	movi	r4,1
   11bd0:	00182800 	call	18280 <OSSemCreate>
   11bd4:	1007883a 	mov	r3,r2
   11bd8:	008000b4 	movhi	r2,2
   11bdc:	108f5704 	addi	r2,r2,15708
   11be0:	10c00015 	stw	r3,0(r2)
   11be4:	008000b4 	movhi	r2,2
   11be8:	108f5004 	addi	r2,r2,15680
   11bec:	e0bffc15 	stw	r2,-16(fp)
   11bf0:	00800044 	movi	r2,1
   11bf4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   11bf8:	e0bffd0b 	ldhu	r2,-12(fp)
   11bfc:	1009883a 	mov	r4,r2
   11c00:	00182800 	call	18280 <OSSemCreate>
   11c04:	1007883a 	mov	r3,r2
   11c08:	e0bffc17 	ldw	r2,-16(fp)
   11c0c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11c10:	001aba00 	call	1aba0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11c14:	010000b4 	movhi	r4,2
   11c18:	213cd904 	addi	r4,r4,-3228
   11c1c:	014000b4 	movhi	r5,2
   11c20:	297cd904 	addi	r5,r5,-3228
   11c24:	018000b4 	movhi	r6,2
   11c28:	31bcd904 	addi	r6,r6,-3228
   11c2c:	001dd8c0 	call	1dd8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11c30:	001db540 	call	1db54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11c34:	010000b4 	movhi	r4,2
   11c38:	2136ec04 	addi	r4,r4,-9296
   11c3c:	001ea500 	call	1ea50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11c40:	d128dc17 	ldw	r4,-23696(gp)
   11c44:	d0e8dd17 	ldw	r3,-23692(gp)
   11c48:	d0a8de17 	ldw	r2,-23688(gp)
   11c4c:	180b883a 	mov	r5,r3
   11c50:	100d883a 	mov	r6,r2
   11c54:	0000c1c0 	call	c1c <main>
   11c58:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   11c5c:	01000044 	movi	r4,1
   11c60:	00116a00 	call	116a0 <close>
  exit (result);
   11c64:	e13ffb17 	ldw	r4,-20(fp)
   11c68:	001ea640 	call	1ea64 <exit>

00011c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c6c:	defffe04 	addi	sp,sp,-8
   11c70:	dfc00115 	stw	ra,4(sp)
   11c74:	df000015 	stw	fp,0(sp)
   11c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c7c:	008000b4 	movhi	r2,2
   11c80:	10868804 	addi	r2,r2,6688
   11c84:	10800017 	ldw	r2,0(r2)
   11c88:	10000526 	beq	r2,zero,11ca0 <alt_get_errno+0x34>
   11c8c:	008000b4 	movhi	r2,2
   11c90:	10868804 	addi	r2,r2,6688
   11c94:	10800017 	ldw	r2,0(r2)
   11c98:	103ee83a 	callr	r2
   11c9c:	00000206 	br	11ca8 <alt_get_errno+0x3c>
   11ca0:	008000b4 	movhi	r2,2
   11ca4:	108f4f04 	addi	r2,r2,15676
}
   11ca8:	e037883a 	mov	sp,fp
   11cac:	dfc00117 	ldw	ra,4(sp)
   11cb0:	df000017 	ldw	fp,0(sp)
   11cb4:	dec00204 	addi	sp,sp,8
   11cb8:	f800283a 	ret

00011cbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11cbc:	defff904 	addi	sp,sp,-28
   11cc0:	dfc00615 	stw	ra,24(sp)
   11cc4:	df000515 	stw	fp,20(sp)
   11cc8:	df000504 	addi	fp,sp,20
   11ccc:	e13ffd15 	stw	r4,-12(fp)
   11cd0:	e17ffe15 	stw	r5,-8(fp)
   11cd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11cd8:	e0bffd17 	ldw	r2,-12(fp)
   11cdc:	10000616 	blt	r2,zero,11cf8 <read+0x3c>
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	10c00324 	muli	r3,r2,12
   11ce8:	008000b4 	movhi	r2,2
   11cec:	10805b04 	addi	r2,r2,364
   11cf0:	1885883a 	add	r2,r3,r2
   11cf4:	00000106 	br	11cfc <read+0x40>
   11cf8:	0005883a 	mov	r2,zero
   11cfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11d00:	e0bffb17 	ldw	r2,-20(fp)
   11d04:	10002226 	beq	r2,zero,11d90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11d08:	e0bffb17 	ldw	r2,-20(fp)
   11d0c:	10800217 	ldw	r2,8(r2)
   11d10:	108000cc 	andi	r2,r2,3
   11d14:	10800060 	cmpeqi	r2,r2,1
   11d18:	1000181e 	bne	r2,zero,11d7c <read+0xc0>
        (fd->dev->read))
   11d1c:	e0bffb17 	ldw	r2,-20(fp)
   11d20:	10800017 	ldw	r2,0(r2)
   11d24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11d28:	10001426 	beq	r2,zero,11d7c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11d2c:	e0bffb17 	ldw	r2,-20(fp)
   11d30:	10800017 	ldw	r2,0(r2)
   11d34:	10800517 	ldw	r2,20(r2)
   11d38:	e0ffff17 	ldw	r3,-4(fp)
   11d3c:	e13ffb17 	ldw	r4,-20(fp)
   11d40:	e17ffe17 	ldw	r5,-8(fp)
   11d44:	180d883a 	mov	r6,r3
   11d48:	103ee83a 	callr	r2
   11d4c:	e0bffc15 	stw	r2,-16(fp)
   11d50:	e0bffc17 	ldw	r2,-16(fp)
   11d54:	1000070e 	bge	r2,zero,11d74 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   11d58:	0011c6c0 	call	11c6c <alt_get_errno>
   11d5c:	1007883a 	mov	r3,r2
   11d60:	e0bffc17 	ldw	r2,-16(fp)
   11d64:	0085c83a 	sub	r2,zero,r2
   11d68:	18800015 	stw	r2,0(r3)
          return -1;
   11d6c:	00bfffc4 	movi	r2,-1
   11d70:	00000c06 	br	11da4 <read+0xe8>
        }
        return rval;
   11d74:	e0bffc17 	ldw	r2,-16(fp)
   11d78:	00000a06 	br	11da4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   11d7c:	0011c6c0 	call	11c6c <alt_get_errno>
   11d80:	1007883a 	mov	r3,r2
   11d84:	00800344 	movi	r2,13
   11d88:	18800015 	stw	r2,0(r3)
   11d8c:	00000406 	br	11da0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   11d90:	0011c6c0 	call	11c6c <alt_get_errno>
   11d94:	1007883a 	mov	r3,r2
   11d98:	00801444 	movi	r2,81
   11d9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11da0:	00bfffc4 	movi	r2,-1
}
   11da4:	e037883a 	mov	sp,fp
   11da8:	dfc00117 	ldw	ra,4(sp)
   11dac:	df000017 	ldw	fp,0(sp)
   11db0:	dec00204 	addi	sp,sp,8
   11db4:	f800283a 	ret

00011db8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11db8:	defffe04 	addi	sp,sp,-8
   11dbc:	df000115 	stw	fp,4(sp)
   11dc0:	df000104 	addi	fp,sp,4
   11dc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11dc8:	e0bfff17 	ldw	r2,-4(fp)
   11dcc:	108000d0 	cmplti	r2,r2,3
   11dd0:	10000d1e 	bne	r2,zero,11e08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   11dd4:	008000b4 	movhi	r2,2
   11dd8:	10805b04 	addi	r2,r2,364
   11ddc:	e0ffff17 	ldw	r3,-4(fp)
   11de0:	18c00324 	muli	r3,r3,12
   11de4:	18c00204 	addi	r3,r3,8
   11de8:	10c5883a 	add	r2,r2,r3
   11dec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11df0:	008000b4 	movhi	r2,2
   11df4:	10805b04 	addi	r2,r2,364
   11df8:	e0ffff17 	ldw	r3,-4(fp)
   11dfc:	18c00324 	muli	r3,r3,12
   11e00:	10c5883a 	add	r2,r2,r3
   11e04:	10000015 	stw	zero,0(r2)
  }
}
   11e08:	e037883a 	mov	sp,fp
   11e0c:	df000017 	ldw	fp,0(sp)
   11e10:	dec00104 	addi	sp,sp,4
   11e14:	f800283a 	ret

00011e18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11e18:	defff904 	addi	sp,sp,-28
   11e1c:	df000615 	stw	fp,24(sp)
   11e20:	df000604 	addi	fp,sp,24
   11e24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e28:	0005303a 	rdctl	r2,status
   11e2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e30:	e0fffc17 	ldw	r3,-16(fp)
   11e34:	00bfff84 	movi	r2,-2
   11e38:	1884703a 	and	r2,r3,r2
   11e3c:	1001703a 	wrctl	status,r2
  
  return context;
   11e40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11e44:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11e48:	d0a01417 	ldw	r2,-32688(gp)
   11e4c:	10c000c4 	addi	r3,r2,3
   11e50:	00bfff04 	movi	r2,-4
   11e54:	1884703a 	and	r2,r3,r2
   11e58:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11e5c:	d0e01417 	ldw	r3,-32688(gp)
   11e60:	e0bfff17 	ldw	r2,-4(fp)
   11e64:	1887883a 	add	r3,r3,r2
   11e68:	00810034 	movhi	r2,1024
   11e6c:	10800004 	addi	r2,r2,0
   11e70:	10c0062e 	bgeu	r2,r3,11e8c <sbrk+0x74>
   11e74:	e0bffa17 	ldw	r2,-24(fp)
   11e78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11e84:	00bfffc4 	movi	r2,-1
   11e88:	00000b06 	br	11eb8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11e8c:	d0a01417 	ldw	r2,-32688(gp)
   11e90:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   11e94:	d0e01417 	ldw	r3,-32688(gp)
   11e98:	e0bfff17 	ldw	r2,-4(fp)
   11e9c:	1885883a 	add	r2,r3,r2
   11ea0:	d0a01415 	stw	r2,-32688(gp)
   11ea4:	e0bffa17 	ldw	r2,-24(fp)
   11ea8:	e0bffe15 	stw	r2,-8(fp)
   11eac:	e0bffe17 	ldw	r2,-8(fp)
   11eb0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11eb4:	e0bffb17 	ldw	r2,-20(fp)
} 
   11eb8:	e037883a 	mov	sp,fp
   11ebc:	df000017 	ldw	fp,0(sp)
   11ec0:	dec00104 	addi	sp,sp,4
   11ec4:	f800283a 	ret

00011ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ec8:	defffe04 	addi	sp,sp,-8
   11ecc:	dfc00115 	stw	ra,4(sp)
   11ed0:	df000015 	stw	fp,0(sp)
   11ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ed8:	008000b4 	movhi	r2,2
   11edc:	10868804 	addi	r2,r2,6688
   11ee0:	10800017 	ldw	r2,0(r2)
   11ee4:	10000526 	beq	r2,zero,11efc <alt_get_errno+0x34>
   11ee8:	008000b4 	movhi	r2,2
   11eec:	10868804 	addi	r2,r2,6688
   11ef0:	10800017 	ldw	r2,0(r2)
   11ef4:	103ee83a 	callr	r2
   11ef8:	00000206 	br	11f04 <alt_get_errno+0x3c>
   11efc:	008000b4 	movhi	r2,2
   11f00:	108f4f04 	addi	r2,r2,15676
}
   11f04:	e037883a 	mov	sp,fp
   11f08:	dfc00117 	ldw	ra,4(sp)
   11f0c:	df000017 	ldw	fp,0(sp)
   11f10:	dec00204 	addi	sp,sp,8
   11f14:	f800283a 	ret

00011f18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11f18:	defff904 	addi	sp,sp,-28
   11f1c:	dfc00615 	stw	ra,24(sp)
   11f20:	df000515 	stw	fp,20(sp)
   11f24:	df000504 	addi	fp,sp,20
   11f28:	e13ffd15 	stw	r4,-12(fp)
   11f2c:	e17ffe15 	stw	r5,-8(fp)
   11f30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11f34:	e0bffd17 	ldw	r2,-12(fp)
   11f38:	10000616 	blt	r2,zero,11f54 <write+0x3c>
   11f3c:	e0bffd17 	ldw	r2,-12(fp)
   11f40:	10c00324 	muli	r3,r2,12
   11f44:	008000b4 	movhi	r2,2
   11f48:	10805b04 	addi	r2,r2,364
   11f4c:	1885883a 	add	r2,r3,r2
   11f50:	00000106 	br	11f58 <write+0x40>
   11f54:	0005883a 	mov	r2,zero
   11f58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11f5c:	e0bffb17 	ldw	r2,-20(fp)
   11f60:	10002126 	beq	r2,zero,11fe8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11f64:	e0bffb17 	ldw	r2,-20(fp)
   11f68:	10800217 	ldw	r2,8(r2)
   11f6c:	108000cc 	andi	r2,r2,3
   11f70:	10001826 	beq	r2,zero,11fd4 <write+0xbc>
   11f74:	e0bffb17 	ldw	r2,-20(fp)
   11f78:	10800017 	ldw	r2,0(r2)
   11f7c:	10800617 	ldw	r2,24(r2)
   11f80:	10001426 	beq	r2,zero,11fd4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11f84:	e0bffb17 	ldw	r2,-20(fp)
   11f88:	10800017 	ldw	r2,0(r2)
   11f8c:	10800617 	ldw	r2,24(r2)
   11f90:	e0ffff17 	ldw	r3,-4(fp)
   11f94:	e13ffb17 	ldw	r4,-20(fp)
   11f98:	e17ffe17 	ldw	r5,-8(fp)
   11f9c:	180d883a 	mov	r6,r3
   11fa0:	103ee83a 	callr	r2
   11fa4:	e0bffc15 	stw	r2,-16(fp)
   11fa8:	e0bffc17 	ldw	r2,-16(fp)
   11fac:	1000070e 	bge	r2,zero,11fcc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11fb0:	0011ec80 	call	11ec8 <alt_get_errno>
   11fb4:	1007883a 	mov	r3,r2
   11fb8:	e0bffc17 	ldw	r2,-16(fp)
   11fbc:	0085c83a 	sub	r2,zero,r2
   11fc0:	18800015 	stw	r2,0(r3)
        return -1;
   11fc4:	00bfffc4 	movi	r2,-1
   11fc8:	00000c06 	br	11ffc <write+0xe4>
      }
      return rval;
   11fcc:	e0bffc17 	ldw	r2,-16(fp)
   11fd0:	00000a06 	br	11ffc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11fd4:	0011ec80 	call	11ec8 <alt_get_errno>
   11fd8:	1007883a 	mov	r3,r2
   11fdc:	00800344 	movi	r2,13
   11fe0:	18800015 	stw	r2,0(r3)
   11fe4:	00000406 	br	11ff8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11fe8:	0011ec80 	call	11ec8 <alt_get_errno>
   11fec:	1007883a 	mov	r3,r2
   11ff0:	00801444 	movi	r2,81
   11ff4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11ff8:	00bfffc4 	movi	r2,-1
}
   11ffc:	e037883a 	mov	sp,fp
   12000:	dfc00117 	ldw	ra,4(sp)
   12004:	df000017 	ldw	fp,0(sp)
   12008:	dec00204 	addi	sp,sp,8
   1200c:	f800283a 	ret

00012010 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12010:	deffdf04 	addi	sp,sp,-132
   12014:	dfc02015 	stw	ra,128(sp)
   12018:	df001f15 	stw	fp,124(sp)
   1201c:	df001f04 	addi	fp,sp,124
   12020:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12024:	e0bfe204 	addi	r2,fp,-120
   12028:	01003fc4 	movi	r4,255
   1202c:	100b883a 	mov	r5,r2
   12030:	001a4340 	call	1a434 <OSTaskQuery>
   12034:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12038:	e0bffe83 	ldbu	r2,-6(fp)
   1203c:	10803fcc 	andi	r2,r2,255
   12040:	10000126 	beq	r2,zero,12048 <__env_lock+0x38>
    return;
   12044:	00001d06 	br	120bc <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   12048:	e0bfee83 	ldbu	r2,-70(fp)
   1204c:	10803fcc 	andi	r2,r2,255
   12050:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   12054:	d0e8e017 	ldw	r3,-23680(gp)
   12058:	e0bffd04 	addi	r2,fp,-12
   1205c:	1809883a 	mov	r4,r3
   12060:	100b883a 	mov	r5,r2
   12064:	0018acc0 	call	18acc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   12068:	e0bffe43 	ldbu	r2,-7(fp)
   1206c:	10803fcc 	andi	r2,r2,255
   12070:	10000726 	beq	r2,zero,12090 <__env_lock+0x80>
   12074:	d0a01517 	ldw	r2,-32684(gp)
   12078:	e0ffe117 	ldw	r3,-124(fp)
   1207c:	1880041e 	bne	r3,r2,12090 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   12080:	d0a8df17 	ldw	r2,-23684(gp)
   12084:	10800044 	addi	r2,r2,1
   12088:	d0a8df15 	stw	r2,-23684(gp)
   1208c:	00000a06 	br	120b8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   12090:	d0e8e017 	ldw	r3,-23680(gp)
   12094:	e0bffe84 	addi	r2,fp,-6
   12098:	1809883a 	mov	r4,r3
   1209c:	000b883a 	mov	r5,zero
   120a0:	100d883a 	mov	r6,r2
   120a4:	00185e80 	call	185e8 <OSSemPend>
    locks  = 1;
   120a8:	00800044 	movi	r2,1
   120ac:	d0a8df15 	stw	r2,-23684(gp)
    lockid = id;
   120b0:	e0bfe117 	ldw	r2,-124(fp)
   120b4:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   120b8:	0001883a 	nop
}
   120bc:	e037883a 	mov	sp,fp
   120c0:	dfc00117 	ldw	ra,4(sp)
   120c4:	df000017 	ldw	fp,0(sp)
   120c8:	dec00204 	addi	sp,sp,8
   120cc:	f800283a 	ret

000120d0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   120d0:	defffd04 	addi	sp,sp,-12
   120d4:	dfc00215 	stw	ra,8(sp)
   120d8:	df000115 	stw	fp,4(sp)
   120dc:	df000104 	addi	fp,sp,4
   120e0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   120e4:	d0a8df17 	ldw	r2,-23684(gp)
   120e8:	1000011e 	bne	r2,zero,120f0 <__env_unlock+0x20>
    return;
   120ec:	00000a06 	br	12118 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   120f0:	d0a8df17 	ldw	r2,-23684(gp)
   120f4:	10bfffc4 	addi	r2,r2,-1
   120f8:	d0a8df15 	stw	r2,-23684(gp)
   120fc:	d0a8df17 	ldw	r2,-23684(gp)
   12100:	1000051e 	bne	r2,zero,12118 <__env_unlock+0x48>
  {
    lockid = -1;
   12104:	00bfffc4 	movi	r2,-1
   12108:	d0a01515 	stw	r2,-32684(gp)
    OSSemPost( alt_envsem );
   1210c:	d0a8e017 	ldw	r2,-23680(gp)
   12110:	1009883a 	mov	r4,r2
   12114:	00189bc0 	call	189bc <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   12118:	e037883a 	mov	sp,fp
   1211c:	dfc00117 	ldw	ra,4(sp)
   12120:	df000017 	ldw	fp,0(sp)
   12124:	dec00204 	addi	sp,sp,8
   12128:	f800283a 	ret

0001212c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1212c:	deffdb04 	addi	sp,sp,-148
   12130:	dfc02415 	stw	ra,144(sp)
   12134:	df002315 	stw	fp,140(sp)
   12138:	df002304 	addi	fp,sp,140
   1213c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12140:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   12144:	008000b4 	movhi	r2,2
   12148:	108f5844 	addi	r2,r2,15713
   1214c:	10800003 	ldbu	r2,0(r2)
   12150:	10803fcc 	andi	r2,r2,255
   12154:	10800060 	cmpeqi	r2,r2,1
   12158:	1000011e 	bne	r2,zero,12160 <__malloc_lock+0x34>
      return;
   1215c:	00003606 	br	12238 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12160:	e0bfe204 	addi	r2,fp,-120
   12164:	01003fc4 	movi	r4,255
   12168:	100b883a 	mov	r5,r2
   1216c:	001a4340 	call	1a434 <OSTaskQuery>
   12170:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12174:	e0bffe83 	ldbu	r2,-6(fp)
   12178:	10803fcc 	andi	r2,r2,255
   1217c:	10000126 	beq	r2,zero,12184 <__malloc_lock+0x58>
    return;
   12180:	00002d06 	br	12238 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   12184:	e0bfee83 	ldbu	r2,-70(fp)
   12188:	10803fcc 	andi	r2,r2,255
   1218c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   12190:	d0e8e217 	ldw	r3,-23672(gp)
   12194:	e0bffd04 	addi	r2,fp,-12
   12198:	1809883a 	mov	r4,r3
   1219c:	100b883a 	mov	r5,r2
   121a0:	0018acc0 	call	18acc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121a4:	0005303a 	rdctl	r2,status
   121a8:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121ac:	e0ffdf17 	ldw	r3,-132(fp)
   121b0:	00bfff84 	movi	r2,-2
   121b4:	1884703a 	and	r2,r3,r2
   121b8:	1001703a 	wrctl	status,r2
  
  return context;
   121bc:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   121c0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   121c4:	e0bffd0b 	ldhu	r2,-12(fp)
   121c8:	10bfffcc 	andi	r2,r2,65535
   121cc:	10000b1e 	bne	r2,zero,121fc <__malloc_lock+0xd0>
   121d0:	d0a01617 	ldw	r2,-32680(gp)
   121d4:	e0ffde17 	ldw	r3,-136(fp)
   121d8:	1880081e 	bne	r3,r2,121fc <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   121dc:	d0a8e117 	ldw	r2,-23676(gp)
   121e0:	10800044 	addi	r2,r2,1
   121e4:	d0a8e115 	stw	r2,-23676(gp)
   121e8:	e0bfdd17 	ldw	r2,-140(fp)
   121ec:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121f0:	e0bfe017 	ldw	r2,-128(fp)
   121f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   121f8:	00000e06 	br	12234 <__malloc_lock+0x108>
   121fc:	e0bfdd17 	ldw	r2,-140(fp)
   12200:	e0bfe115 	stw	r2,-124(fp)
   12204:	e0bfe117 	ldw	r2,-124(fp)
   12208:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   1220c:	d0e8e217 	ldw	r3,-23672(gp)
   12210:	e0bffe84 	addi	r2,fp,-6
   12214:	1809883a 	mov	r4,r3
   12218:	000b883a 	mov	r5,zero
   1221c:	100d883a 	mov	r6,r2
   12220:	00185e80 	call	185e8 <OSSemPend>
    locks  = 1;
   12224:	00800044 	movi	r2,1
   12228:	d0a8e115 	stw	r2,-23676(gp)
    lockid = id;
   1222c:	e0bfde17 	ldw	r2,-136(fp)
   12230:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   12234:	0001883a 	nop
}
   12238:	e037883a 	mov	sp,fp
   1223c:	dfc00117 	ldw	ra,4(sp)
   12240:	df000017 	ldw	fp,0(sp)
   12244:	dec00204 	addi	sp,sp,8
   12248:	f800283a 	ret

0001224c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1224c:	defff804 	addi	sp,sp,-32
   12250:	dfc00715 	stw	ra,28(sp)
   12254:	df000615 	stw	fp,24(sp)
   12258:	df000604 	addi	fp,sp,24
   1225c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12260:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   12264:	008000b4 	movhi	r2,2
   12268:	108f5844 	addi	r2,r2,15713
   1226c:	10800003 	ldbu	r2,0(r2)
   12270:	10803fcc 	andi	r2,r2,255
   12274:	10800060 	cmpeqi	r2,r2,1
   12278:	1000011e 	bne	r2,zero,12280 <__malloc_unlock+0x34>
      return;
   1227c:	00002206 	br	12308 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12280:	0005303a 	rdctl	r2,status
   12284:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12288:	e0fffb17 	ldw	r3,-20(fp)
   1228c:	00bfff84 	movi	r2,-2
   12290:	1884703a 	and	r2,r3,r2
   12294:	1001703a 	wrctl	status,r2
  
  return context;
   12298:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   1229c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   122a0:	d0a8e117 	ldw	r2,-23676(gp)
   122a4:	1000051e 	bne	r2,zero,122bc <__malloc_unlock+0x70>
   122a8:	e0bffa17 	ldw	r2,-24(fp)
   122ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122b0:	e0bffc17 	ldw	r2,-16(fp)
   122b4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   122b8:	00001306 	br	12308 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   122bc:	d0a8e117 	ldw	r2,-23676(gp)
   122c0:	10bfffc4 	addi	r2,r2,-1
   122c4:	d0a8e115 	stw	r2,-23676(gp)
   122c8:	d0a8e117 	ldw	r2,-23676(gp)
   122cc:	10000a1e 	bne	r2,zero,122f8 <__malloc_unlock+0xac>
  {
    lockid = -1;
   122d0:	00bfffc4 	movi	r2,-1
   122d4:	d0a01615 	stw	r2,-32680(gp)
   122d8:	e0bffa17 	ldw	r2,-24(fp)
   122dc:	e0bffd15 	stw	r2,-12(fp)
   122e0:	e0bffd17 	ldw	r2,-12(fp)
   122e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   122e8:	d0a8e217 	ldw	r2,-23672(gp)
   122ec:	1009883a 	mov	r4,r2
   122f0:	00189bc0 	call	189bc <OSSemPost>
   122f4:	00000406 	br	12308 <__malloc_unlock+0xbc>
   122f8:	e0bffa17 	ldw	r2,-24(fp)
   122fc:	e0bffe15 	stw	r2,-8(fp)
   12300:	e0bffe17 	ldw	r2,-8(fp)
   12304:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   12308:	e037883a 	mov	sp,fp
   1230c:	dfc00117 	ldw	ra,4(sp)
   12310:	df000017 	ldw	fp,0(sp)
   12314:	dec00204 	addi	sp,sp,8
   12318:	f800283a 	ret

0001231c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1231c:	defff704 	addi	sp,sp,-36
   12320:	dfc00815 	stw	ra,32(sp)
   12324:	df000715 	stw	fp,28(sp)
   12328:	df000704 	addi	fp,sp,28
   1232c:	e13ffd15 	stw	r4,-12(fp)
   12330:	e17ffe15 	stw	r5,-8(fp)
   12334:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12338:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	1000021e 	bne	r2,zero,1234c <OSEventNameGet+0x30>
        return (0);
   12344:	0005883a 	mov	r2,zero
   12348:	00003706 	br	12428 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1234c:	e0bffd17 	ldw	r2,-12(fp)
   12350:	1000051e 	bne	r2,zero,12368 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   12354:	e0bfff17 	ldw	r2,-4(fp)
   12358:	00c00104 	movi	r3,4
   1235c:	10c00005 	stb	r3,0(r2)
        return (0);
   12360:	0005883a 	mov	r2,zero
   12364:	00003006 	br	12428 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12368:	e0bffe17 	ldw	r2,-8(fp)
   1236c:	1000051e 	bne	r2,zero,12384 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12370:	e0bfff17 	ldw	r2,-4(fp)
   12374:	00c00304 	movi	r3,12
   12378:	10c00005 	stb	r3,0(r2)
        return (0);
   1237c:	0005883a 	mov	r2,zero
   12380:	00002906 	br	12428 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12384:	d0a8f103 	ldbu	r2,-23612(gp)
   12388:	10803fcc 	andi	r2,r2,255
   1238c:	10000526 	beq	r2,zero,123a4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   12390:	e0bfff17 	ldw	r2,-4(fp)
   12394:	00c00444 	movi	r3,17
   12398:	10c00005 	stb	r3,0(r2)
        return (0);
   1239c:	0005883a 	mov	r2,zero
   123a0:	00002106 	br	12428 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   123a4:	e0bffd17 	ldw	r2,-12(fp)
   123a8:	10800003 	ldbu	r2,0(r2)
   123ac:	10803fcc 	andi	r2,r2,255
   123b0:	10bfffc4 	addi	r2,r2,-1
   123b4:	10800128 	cmpgeui	r2,r2,4
   123b8:	10000526 	beq	r2,zero,123d0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   123bc:	e0bfff17 	ldw	r2,-4(fp)
   123c0:	00c00044 	movi	r3,1
   123c4:	10c00005 	stb	r3,0(r2)
             return (0);
   123c8:	0005883a 	mov	r2,zero
   123cc:	00001606 	br	12428 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   123d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123d4:	0005303a 	rdctl	r2,status
   123d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123dc:	e0fffb17 	ldw	r3,-20(fp)
   123e0:	00bfff84 	movi	r2,-2
   123e4:	1884703a 	and	r2,r3,r2
   123e8:	1001703a 	wrctl	status,r2
  
  return context;
   123ec:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   123f0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   123f4:	e0bffd17 	ldw	r2,-12(fp)
   123f8:	10800384 	addi	r2,r2,14
   123fc:	e13ffe17 	ldw	r4,-8(fp)
   12400:	100b883a 	mov	r5,r2
   12404:	0013d700 	call	13d70 <OS_StrCopy>
   12408:	e0bffa05 	stb	r2,-24(fp)
   1240c:	e0bff917 	ldw	r2,-28(fp)
   12410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12414:	e0bffc17 	ldw	r2,-16(fp)
   12418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1241c:	e0bfff17 	ldw	r2,-4(fp)
   12420:	10000005 	stb	zero,0(r2)
    return (len);
   12424:	e0bffa03 	ldbu	r2,-24(fp)
}
   12428:	e037883a 	mov	sp,fp
   1242c:	dfc00117 	ldw	ra,4(sp)
   12430:	df000017 	ldw	fp,0(sp)
   12434:	dec00204 	addi	sp,sp,8
   12438:	f800283a 	ret

0001243c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1243c:	defff604 	addi	sp,sp,-40
   12440:	dfc00915 	stw	ra,36(sp)
   12444:	df000815 	stw	fp,32(sp)
   12448:	df000804 	addi	fp,sp,32
   1244c:	e13ffd15 	stw	r4,-12(fp)
   12450:	e17ffe15 	stw	r5,-8(fp)
   12454:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12458:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1245c:	e0bfff17 	ldw	r2,-4(fp)
   12460:	1000011e 	bne	r2,zero,12468 <OSEventNameSet+0x2c>
        return;
   12464:	00003f06 	br	12564 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   12468:	e0bffd17 	ldw	r2,-12(fp)
   1246c:	1000041e 	bne	r2,zero,12480 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12470:	e0bfff17 	ldw	r2,-4(fp)
   12474:	00c00104 	movi	r3,4
   12478:	10c00005 	stb	r3,0(r2)
        return;
   1247c:	00003906 	br	12564 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12480:	e0bffe17 	ldw	r2,-8(fp)
   12484:	1000041e 	bne	r2,zero,12498 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   12488:	e0bfff17 	ldw	r2,-4(fp)
   1248c:	00c00304 	movi	r3,12
   12490:	10c00005 	stb	r3,0(r2)
        return;
   12494:	00003306 	br	12564 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12498:	d0a8f103 	ldbu	r2,-23612(gp)
   1249c:	10803fcc 	andi	r2,r2,255
   124a0:	10000426 	beq	r2,zero,124b4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   124a4:	e0bfff17 	ldw	r2,-4(fp)
   124a8:	00c00484 	movi	r3,18
   124ac:	10c00005 	stb	r3,0(r2)
        return;
   124b0:	00002c06 	br	12564 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   124b4:	e0bffd17 	ldw	r2,-12(fp)
   124b8:	10800003 	ldbu	r2,0(r2)
   124bc:	10803fcc 	andi	r2,r2,255
   124c0:	10bfffc4 	addi	r2,r2,-1
   124c4:	10800128 	cmpgeui	r2,r2,4
   124c8:	10000426 	beq	r2,zero,124dc <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   124cc:	e0bfff17 	ldw	r2,-4(fp)
   124d0:	00c00044 	movi	r3,1
   124d4:	10c00005 	stb	r3,0(r2)
             return;
   124d8:	00002206 	br	12564 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   124dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124e0:	0005303a 	rdctl	r2,status
   124e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124e8:	e0fffa17 	ldw	r3,-24(fp)
   124ec:	00bfff84 	movi	r2,-2
   124f0:	1884703a 	and	r2,r3,r2
   124f4:	1001703a 	wrctl	status,r2
  
  return context;
   124f8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   124fc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   12500:	e13ffe17 	ldw	r4,-8(fp)
   12504:	0013de40 	call	13de4 <OS_StrLen>
   12508:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1250c:	e0bff903 	ldbu	r2,-28(fp)
   12510:	10800830 	cmpltui	r2,r2,32
   12514:	1000081e 	bne	r2,zero,12538 <OSEventNameSet+0xfc>
   12518:	e0bff817 	ldw	r2,-32(fp)
   1251c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12520:	e0bffb17 	ldw	r2,-20(fp)
   12524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   12528:	e0bfff17 	ldw	r2,-4(fp)
   1252c:	00c002c4 	movi	r3,11
   12530:	10c00005 	stb	r3,0(r2)
        return;
   12534:	00000b06 	br	12564 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   12538:	e0bffd17 	ldw	r2,-12(fp)
   1253c:	10800384 	addi	r2,r2,14
   12540:	1009883a 	mov	r4,r2
   12544:	e17ffe17 	ldw	r5,-8(fp)
   12548:	0013d700 	call	13d70 <OS_StrCopy>
   1254c:	e0bff817 	ldw	r2,-32(fp)
   12550:	e0bffc15 	stw	r2,-16(fp)
   12554:	e0bffc17 	ldw	r2,-16(fp)
   12558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1255c:	e0bfff17 	ldw	r2,-4(fp)
   12560:	10000005 	stb	zero,0(r2)
}
   12564:	e037883a 	mov	sp,fp
   12568:	dfc00117 	ldw	ra,4(sp)
   1256c:	df000017 	ldw	fp,0(sp)
   12570:	dec00204 	addi	sp,sp,8
   12574:	f800283a 	ret

00012578 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   12578:	deffed04 	addi	sp,sp,-76
   1257c:	dfc01215 	stw	ra,72(sp)
   12580:	df001115 	stw	fp,68(sp)
   12584:	df001104 	addi	fp,sp,68
   12588:	e13ffc15 	stw	r4,-16(fp)
   1258c:	e17ffd15 	stw	r5,-12(fp)
   12590:	e1bffe15 	stw	r6,-8(fp)
   12594:	3805883a 	mov	r2,r7
   12598:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1259c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   125a0:	e0800217 	ldw	r2,8(fp)
   125a4:	1000021e 	bne	r2,zero,125b0 <OSEventPendMulti+0x38>
        return (0);
   125a8:	0005883a 	mov	r2,zero
   125ac:	00017106 	br	12b74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   125b0:	e0bffc17 	ldw	r2,-16(fp)
   125b4:	1000051e 	bne	r2,zero,125cc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   125b8:	e0800217 	ldw	r2,8(fp)
   125bc:	00c00104 	movi	r3,4
   125c0:	10c00005 	stb	r3,0(r2)
        return (0);
   125c4:	0005883a 	mov	r2,zero
   125c8:	00016a06 	br	12b74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   125cc:	e0bffd17 	ldw	r2,-12(fp)
   125d0:	1000051e 	bne	r2,zero,125e8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   125d4:	e0800217 	ldw	r2,8(fp)
   125d8:	00c00104 	movi	r3,4
   125dc:	10c00005 	stb	r3,0(r2)
        return (0);
   125e0:	0005883a 	mov	r2,zero
   125e4:	00016306 	br	12b74 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   125e8:	e0bffe17 	ldw	r2,-8(fp)
   125ec:	1000051e 	bne	r2,zero,12604 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   125f0:	e0800217 	ldw	r2,8(fp)
   125f4:	00c00104 	movi	r3,4
   125f8:	10c00005 	stb	r3,0(r2)
        return (0);
   125fc:	0005883a 	mov	r2,zero
   12600:	00015c06 	br	12b74 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   12604:	e0bffd17 	ldw	r2,-12(fp)
   12608:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1260c:	e0bffc17 	ldw	r2,-16(fp)
   12610:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   12614:	e0bfef17 	ldw	r2,-68(fp)
   12618:	10800017 	ldw	r2,0(r2)
   1261c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   12620:	00001906 	br	12688 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   12624:	e0bff017 	ldw	r2,-64(fp)
   12628:	10800003 	ldbu	r2,0(r2)
   1262c:	10803fcc 	andi	r2,r2,255
   12630:	10c000a0 	cmpeqi	r3,r2,2
   12634:	1800091e 	bne	r3,zero,1265c <OSEventPendMulti+0xe4>
   12638:	10c000e0 	cmpeqi	r3,r2,3
   1263c:	1800091e 	bne	r3,zero,12664 <OSEventPendMulti+0xec>
   12640:	10800060 	cmpeqi	r2,r2,1
   12644:	1000091e 	bne	r2,zero,1266c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   12648:	e0800217 	ldw	r2,8(fp)
   1264c:	00c00044 	movi	r3,1
   12650:	10c00005 	stb	r3,0(r2)
                 return (0);
   12654:	0005883a 	mov	r2,zero
   12658:	00014606 	br	12b74 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1265c:	0001883a 	nop
   12660:	00000306 	br	12670 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   12664:	0001883a 	nop
   12668:	00000106 	br	12670 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1266c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   12670:	e0bfef17 	ldw	r2,-68(fp)
   12674:	10800104 	addi	r2,r2,4
   12678:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1267c:	e0bfef17 	ldw	r2,-68(fp)
   12680:	10800017 	ldw	r2,0(r2)
   12684:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   12688:	e0bff017 	ldw	r2,-64(fp)
   1268c:	103fe51e 	bne	r2,zero,12624 <__alt_mem_Flash_flash_data+0xf4012624>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   12690:	d0a8f103 	ldbu	r2,-23612(gp)
   12694:	10803fcc 	andi	r2,r2,255
   12698:	10000526 	beq	r2,zero,126b0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1269c:	e0800217 	ldw	r2,8(fp)
   126a0:	00c00084 	movi	r3,2
   126a4:	10c00005 	stb	r3,0(r2)
        return (0);
   126a8:	0005883a 	mov	r2,zero
   126ac:	00013106 	br	12b74 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   126b0:	d0a8e303 	ldbu	r2,-23668(gp)
   126b4:	10803fcc 	andi	r2,r2,255
   126b8:	10000526 	beq	r2,zero,126d0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   126bc:	e0800217 	ldw	r2,8(fp)
   126c0:	00c00344 	movi	r3,13
   126c4:	10c00005 	stb	r3,0(r2)
        return (0);
   126c8:	0005883a 	mov	r2,zero
   126cc:	00012906 	br	12b74 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126d0:	0005303a 	rdctl	r2,status
   126d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126d8:	e0fff517 	ldw	r3,-44(fp)
   126dc:	00bfff84 	movi	r2,-2
   126e0:	1884703a 	and	r2,r3,r2
   126e4:	1001703a 	wrctl	status,r2
  
  return context;
   126e8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   126ec:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   126f0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   126f4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   126f8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   126fc:	e0bffc17 	ldw	r2,-16(fp)
   12700:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   12704:	e0bfef17 	ldw	r2,-68(fp)
   12708:	10800017 	ldw	r2,0(r2)
   1270c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   12710:	00008106 	br	12918 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   12714:	e0bff017 	ldw	r2,-64(fp)
   12718:	10800003 	ldbu	r2,0(r2)
   1271c:	10803fcc 	andi	r2,r2,255
   12720:	10c000a0 	cmpeqi	r3,r2,2
   12724:	18003c1e 	bne	r3,zero,12818 <OSEventPendMulti+0x2a0>
   12728:	10c000e0 	cmpeqi	r3,r2,3
   1272c:	1800031e 	bne	r3,zero,1273c <OSEventPendMulti+0x1c4>
   12730:	10800060 	cmpeqi	r2,r2,1
   12734:	10001e1e 	bne	r2,zero,127b0 <OSEventPendMulti+0x238>
   12738:	00006606 	br	128d4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1273c:	e0bff017 	ldw	r2,-64(fp)
   12740:	1080020b 	ldhu	r2,8(r2)
   12744:	10bfffcc 	andi	r2,r2,65535
   12748:	10001526 	beq	r2,zero,127a0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1274c:	e0bff017 	ldw	r2,-64(fp)
   12750:	1080020b 	ldhu	r2,8(r2)
   12754:	10bfffc4 	addi	r2,r2,-1
   12758:	1007883a 	mov	r3,r2
   1275c:	e0bff017 	ldw	r2,-64(fp)
   12760:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   12764:	e0bffd17 	ldw	r2,-12(fp)
   12768:	10c00104 	addi	r3,r2,4
   1276c:	e0fffd15 	stw	r3,-12(fp)
   12770:	e0fff017 	ldw	r3,-64(fp)
   12774:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   12778:	00800044 	movi	r2,1
   1277c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   12780:	e0bffe17 	ldw	r2,-8(fp)
   12784:	10c00104 	addi	r3,r2,4
   12788:	e0fffe15 	stw	r3,-8(fp)
   1278c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   12790:	e0bff18b 	ldhu	r2,-58(fp)
   12794:	10800044 	addi	r2,r2,1
   12798:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1279c:	00005806 	br	12900 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   127a0:	e0bff203 	ldbu	r2,-56(fp)
   127a4:	10800054 	ori	r2,r2,1
   127a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   127ac:	00005406 	br	12900 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   127b0:	e0bff017 	ldw	r2,-64(fp)
   127b4:	10800117 	ldw	r2,4(r2)
   127b8:	10001326 	beq	r2,zero,12808 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   127bc:	e0bffe17 	ldw	r2,-8(fp)
   127c0:	10c00104 	addi	r3,r2,4
   127c4:	e0fffe15 	stw	r3,-8(fp)
   127c8:	e0fff017 	ldw	r3,-64(fp)
   127cc:	18c00117 	ldw	r3,4(r3)
   127d0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   127d4:	e0bff017 	ldw	r2,-64(fp)
   127d8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   127dc:	e0bffd17 	ldw	r2,-12(fp)
   127e0:	10c00104 	addi	r3,r2,4
   127e4:	e0fffd15 	stw	r3,-12(fp)
   127e8:	e0fff017 	ldw	r3,-64(fp)
   127ec:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   127f0:	00800044 	movi	r2,1
   127f4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   127f8:	e0bff18b 	ldhu	r2,-58(fp)
   127fc:	10800044 	addi	r2,r2,1
   12800:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   12804:	00003e06 	br	12900 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   12808:	e0bff203 	ldbu	r2,-56(fp)
   1280c:	10800094 	ori	r2,r2,2
   12810:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   12814:	00003a06 	br	12900 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   12818:	e0bff017 	ldw	r2,-64(fp)
   1281c:	10800117 	ldw	r2,4(r2)
   12820:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   12824:	e0bff417 	ldw	r2,-48(fp)
   12828:	1080058b 	ldhu	r2,22(r2)
   1282c:	10bfffcc 	andi	r2,r2,65535
   12830:	10002426 	beq	r2,zero,128c4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	10c00104 	addi	r3,r2,4
   1283c:	e0fffe15 	stw	r3,-8(fp)
   12840:	e0fff417 	ldw	r3,-48(fp)
   12844:	18c00417 	ldw	r3,16(r3)
   12848:	19400104 	addi	r5,r3,4
   1284c:	e13ff417 	ldw	r4,-48(fp)
   12850:	21400415 	stw	r5,16(r4)
   12854:	18c00017 	ldw	r3,0(r3)
   12858:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1285c:	e0bff417 	ldw	r2,-48(fp)
   12860:	10c00417 	ldw	r3,16(r2)
   12864:	e0bff417 	ldw	r2,-48(fp)
   12868:	10800217 	ldw	r2,8(r2)
   1286c:	1880041e 	bne	r3,r2,12880 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   12870:	e0bff417 	ldw	r2,-48(fp)
   12874:	10c00117 	ldw	r3,4(r2)
   12878:	e0bff417 	ldw	r2,-48(fp)
   1287c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   12880:	e0bff417 	ldw	r2,-48(fp)
   12884:	1080058b 	ldhu	r2,22(r2)
   12888:	10bfffc4 	addi	r2,r2,-1
   1288c:	1007883a 	mov	r3,r2
   12890:	e0bff417 	ldw	r2,-48(fp)
   12894:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   12898:	e0bffd17 	ldw	r2,-12(fp)
   1289c:	10c00104 	addi	r3,r2,4
   128a0:	e0fffd15 	stw	r3,-12(fp)
   128a4:	e0fff017 	ldw	r3,-64(fp)
   128a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   128ac:	00800044 	movi	r2,1
   128b0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   128b4:	e0bff18b 	ldhu	r2,-58(fp)
   128b8:	10800044 	addi	r2,r2,1
   128bc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   128c0:	00000f06 	br	12900 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   128c4:	e0bff203 	ldbu	r2,-56(fp)
   128c8:	10800114 	ori	r2,r2,4
   128cc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   128d0:	00000b06 	br	12900 <OSEventPendMulti+0x388>
   128d4:	e0bff317 	ldw	r2,-52(fp)
   128d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128dc:	e0bff617 	ldw	r2,-40(fp)
   128e0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   128ec:	e0800217 	ldw	r2,8(fp)
   128f0:	00c00044 	movi	r3,1
   128f4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   128f8:	e0bff18b 	ldhu	r2,-58(fp)
   128fc:	00009d06 	br	12b74 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   12900:	e0bfef17 	ldw	r2,-68(fp)
   12904:	10800104 	addi	r2,r2,4
   12908:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1290c:	e0bfef17 	ldw	r2,-68(fp)
   12910:	10800017 	ldw	r2,0(r2)
   12914:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   12918:	e0bff017 	ldw	r2,-64(fp)
   1291c:	103f7d1e 	bne	r2,zero,12714 <__alt_mem_Flash_flash_data+0xf4012714>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   12920:	e0bff103 	ldbu	r2,-60(fp)
   12924:	10800058 	cmpnei	r2,r2,1
   12928:	10000a1e 	bne	r2,zero,12954 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1292c:	e0bffd17 	ldw	r2,-12(fp)
   12930:	10000015 	stw	zero,0(r2)
   12934:	e0bff317 	ldw	r2,-52(fp)
   12938:	e0bff715 	stw	r2,-36(fp)
   1293c:	e0bff717 	ldw	r2,-36(fp)
   12940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   12944:	e0800217 	ldw	r2,8(fp)
   12948:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1294c:	e0bff18b 	ldhu	r2,-58(fp)
   12950:	00008806 	br	12b74 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   12954:	d0a8f217 	ldw	r2,-23608(gp)
   12958:	d0e8f217 	ldw	r3,-23608(gp)
   1295c:	19000c03 	ldbu	r4,48(r3)
   12960:	e0fff203 	ldbu	r3,-56(fp)
   12964:	20c6b03a 	or	r3,r4,r3
   12968:	1809883a 	mov	r4,r3
   1296c:	00ffe004 	movi	r3,-128
   12970:	20c6b03a 	or	r3,r4,r3
   12974:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12978:	d0a8f217 	ldw	r2,-23608(gp)
   1297c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   12980:	d0a8f217 	ldw	r2,-23608(gp)
   12984:	e0ffff0b 	ldhu	r3,-4(fp)
   12988:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1298c:	e13ffc17 	ldw	r4,-16(fp)
   12990:	00134c00 	call	134c0 <OS_EventTaskWaitMulti>
   12994:	e0bff317 	ldw	r2,-52(fp)
   12998:	e0bff815 	stw	r2,-32(fp)
   1299c:	e0bff817 	ldw	r2,-32(fp)
   129a0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   129a4:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129a8:	0005303a 	rdctl	r2,status
   129ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129b0:	e0fff917 	ldw	r3,-28(fp)
   129b4:	00bfff84 	movi	r2,-2
   129b8:	1884703a 	and	r2,r3,r2
   129bc:	1001703a 	wrctl	status,r2
  
  return context;
   129c0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   129c4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   129c8:	d0a8f217 	ldw	r2,-23608(gp)
   129cc:	10800c43 	ldbu	r2,49(r2)
   129d0:	10803fcc 	andi	r2,r2,255
   129d4:	10000226 	beq	r2,zero,129e0 <OSEventPendMulti+0x468>
   129d8:	108000a0 	cmpeqi	r2,r2,2
   129dc:	10001826 	beq	r2,zero,12a40 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   129e0:	d0a8f217 	ldw	r2,-23608(gp)
   129e4:	10800717 	ldw	r2,28(r2)
   129e8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   129ec:	e0bff017 	ldw	r2,-64(fp)
   129f0:	10000b26 	beq	r2,zero,12a20 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   129f4:	e0bffd17 	ldw	r2,-12(fp)
   129f8:	10c00104 	addi	r3,r2,4
   129fc:	e0fffd15 	stw	r3,-12(fp)
   12a00:	e0fff017 	ldw	r3,-64(fp)
   12a04:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   12a08:	e0bffd17 	ldw	r2,-12(fp)
   12a0c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   12a10:	e0bff18b 	ldhu	r2,-58(fp)
   12a14:	10800044 	addi	r2,r2,1
   12a18:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   12a1c:	00000d06 	br	12a54 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   12a20:	d0a8f217 	ldw	r2,-23608(gp)
   12a24:	00c00044 	movi	r3,1
   12a28:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   12a2c:	d0a8f217 	ldw	r2,-23608(gp)
   12a30:	1009883a 	mov	r4,r2
   12a34:	e17ffc17 	ldw	r5,-16(fp)
   12a38:	00136c00 	call	136c0 <OS_EventTaskRemoveMulti>
             }
			 break;
   12a3c:	00000506 	br	12a54 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   12a40:	d0a8f217 	ldw	r2,-23608(gp)
   12a44:	1009883a 	mov	r4,r2
   12a48:	e17ffc17 	ldw	r5,-16(fp)
   12a4c:	00136c00 	call	136c0 <OS_EventTaskRemoveMulti>
             break;
   12a50:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   12a54:	d0a8f217 	ldw	r2,-23608(gp)
   12a58:	10800c43 	ldbu	r2,49(r2)
   12a5c:	10803fcc 	andi	r2,r2,255
   12a60:	10000326 	beq	r2,zero,12a70 <OSEventPendMulti+0x4f8>
   12a64:	108000a0 	cmpeqi	r2,r2,2
   12a68:	1000231e 	bne	r2,zero,12af8 <OSEventPendMulti+0x580>
   12a6c:	00002a06 	br	12b18 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   12a70:	e0bff017 	ldw	r2,-64(fp)
   12a74:	10800003 	ldbu	r2,0(r2)
   12a78:	10803fcc 	andi	r2,r2,255
   12a7c:	0080100e 	bge	zero,r2,12ac0 <OSEventPendMulti+0x548>
   12a80:	10c000d0 	cmplti	r3,r2,3
   12a84:	1800071e 	bne	r3,zero,12aa4 <OSEventPendMulti+0x52c>
   12a88:	108000e0 	cmpeqi	r2,r2,3
   12a8c:	10000c26 	beq	r2,zero,12ac0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   12a90:	e0bffe17 	ldw	r2,-8(fp)
   12a94:	10c00104 	addi	r3,r2,4
   12a98:	e0fffe15 	stw	r3,-8(fp)
   12a9c:	10000015 	stw	zero,0(r2)
                      break;
   12aa0:	00001206 	br	12aec <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   12aa4:	e0bffe17 	ldw	r2,-8(fp)
   12aa8:	10c00104 	addi	r3,r2,4
   12aac:	e0fffe15 	stw	r3,-8(fp)
   12ab0:	d0e8f217 	ldw	r3,-23608(gp)
   12ab4:	18c00917 	ldw	r3,36(r3)
   12ab8:	10c00015 	stw	r3,0(r2)
                      break;
   12abc:	00000b06 	br	12aec <OSEventPendMulti+0x574>
   12ac0:	e0bff317 	ldw	r2,-52(fp)
   12ac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ac8:	e0bffa17 	ldw	r2,-24(fp)
   12acc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   12ad0:	e0bffd17 	ldw	r2,-12(fp)
   12ad4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   12ad8:	e0800217 	ldw	r2,8(fp)
   12adc:	00c00044 	movi	r3,1
   12ae0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   12ae4:	e0bff18b 	ldhu	r2,-58(fp)
   12ae8:	00002206 	br	12b74 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   12aec:	e0800217 	ldw	r2,8(fp)
   12af0:	10000005 	stb	zero,0(r2)
             break;
   12af4:	00001006 	br	12b38 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   12af8:	e0bffe17 	ldw	r2,-8(fp)
   12afc:	10c00104 	addi	r3,r2,4
   12b00:	e0fffe15 	stw	r3,-8(fp)
   12b04:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   12b08:	e0800217 	ldw	r2,8(fp)
   12b0c:	00c00384 	movi	r3,14
   12b10:	10c00005 	stb	r3,0(r2)
             break;
   12b14:	00000806 	br	12b38 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   12b18:	e0bffe17 	ldw	r2,-8(fp)
   12b1c:	10c00104 	addi	r3,r2,4
   12b20:	e0fffe15 	stw	r3,-8(fp)
   12b24:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   12b28:	e0800217 	ldw	r2,8(fp)
   12b2c:	00c00284 	movi	r3,10
   12b30:	10c00005 	stb	r3,0(r2)
             break;
   12b34:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   12b38:	d0a8f217 	ldw	r2,-23608(gp)
   12b3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   12b40:	d0a8f217 	ldw	r2,-23608(gp)
   12b44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   12b48:	d0a8f217 	ldw	r2,-23608(gp)
   12b4c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12b50:	d0a8f217 	ldw	r2,-23608(gp)
   12b54:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   12b58:	d0a8f217 	ldw	r2,-23608(gp)
   12b5c:	10000915 	stw	zero,36(r2)
   12b60:	e0bff317 	ldw	r2,-52(fp)
   12b64:	e0bffb15 	stw	r2,-20(fp)
   12b68:	e0bffb17 	ldw	r2,-20(fp)
   12b6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   12b70:	e0bff18b 	ldhu	r2,-58(fp)
}
   12b74:	e037883a 	mov	sp,fp
   12b78:	dfc00117 	ldw	ra,4(sp)
   12b7c:	df000017 	ldw	fp,0(sp)
   12b80:	dec00204 	addi	sp,sp,8
   12b84:	f800283a 	ret

00012b88 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   12b88:	defffe04 	addi	sp,sp,-8
   12b8c:	dfc00115 	stw	ra,4(sp)
   12b90:	df000015 	stw	fp,0(sp)
   12b94:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   12b98:	001e6a40 	call	1e6a4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   12b9c:	00138fc0 	call	138fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   12ba0:	00139400 	call	13940 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   12ba4:	0013aa00 	call	13aa0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   12ba8:	00138200 	call	13820 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   12bac:	0015a200 	call	15a20 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   12bb0:	0016ef00 	call	16ef0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   12bb4:	00181240 	call	18124 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   12bb8:	00139a80 	call	139a8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   12bbc:	0013a240 	call	13a24 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   12bc0:	001e6c00 	call	1e6c0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   12bc4:	001430c0 	call	1430c <OSDebugInit>
#endif
}
   12bc8:	e037883a 	mov	sp,fp
   12bcc:	dfc00117 	ldw	ra,4(sp)
   12bd0:	df000017 	ldw	fp,0(sp)
   12bd4:	dec00204 	addi	sp,sp,8
   12bd8:	f800283a 	ret

00012bdc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   12bdc:	defffc04 	addi	sp,sp,-16
   12be0:	df000315 	stw	fp,12(sp)
   12be4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12be8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   12bec:	d0a8e343 	ldbu	r2,-23667(gp)
   12bf0:	10803fcc 	andi	r2,r2,255
   12bf4:	10800058 	cmpnei	r2,r2,1
   12bf8:	1000131e 	bne	r2,zero,12c48 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bfc:	0005303a 	rdctl	r2,status
   12c00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c04:	e0fffe17 	ldw	r3,-8(fp)
   12c08:	00bfff84 	movi	r2,-2
   12c0c:	1884703a 	and	r2,r3,r2
   12c10:	1001703a 	wrctl	status,r2
  
  return context;
   12c14:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   12c18:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   12c1c:	d0a8f103 	ldbu	r2,-23612(gp)
   12c20:	10803fcc 	andi	r2,r2,255
   12c24:	10803fe0 	cmpeqi	r2,r2,255
   12c28:	1000031e 	bne	r2,zero,12c38 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   12c2c:	d0a8f103 	ldbu	r2,-23612(gp)
   12c30:	10800044 	addi	r2,r2,1
   12c34:	d0a8f105 	stb	r2,-23612(gp)
   12c38:	e0bffd17 	ldw	r2,-12(fp)
   12c3c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c40:	e0bfff17 	ldw	r2,-4(fp)
   12c44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   12c48:	e037883a 	mov	sp,fp
   12c4c:	df000017 	ldw	fp,0(sp)
   12c50:	dec00104 	addi	sp,sp,4
   12c54:	f800283a 	ret

00012c58 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   12c58:	defffb04 	addi	sp,sp,-20
   12c5c:	dfc00415 	stw	ra,16(sp)
   12c60:	df000315 	stw	fp,12(sp)
   12c64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12c68:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   12c6c:	d0a8e343 	ldbu	r2,-23667(gp)
   12c70:	10803fcc 	andi	r2,r2,255
   12c74:	10800058 	cmpnei	r2,r2,1
   12c78:	10002f1e 	bne	r2,zero,12d38 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c7c:	0005303a 	rdctl	r2,status
   12c80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c84:	e0fffe17 	ldw	r3,-8(fp)
   12c88:	00bfff84 	movi	r2,-2
   12c8c:	1884703a 	and	r2,r3,r2
   12c90:	1001703a 	wrctl	status,r2
  
  return context;
   12c94:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   12c98:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   12c9c:	d0a8f103 	ldbu	r2,-23612(gp)
   12ca0:	10803fcc 	andi	r2,r2,255
   12ca4:	10000326 	beq	r2,zero,12cb4 <OSIntExit+0x5c>
            OSIntNesting--;
   12ca8:	d0a8f103 	ldbu	r2,-23612(gp)
   12cac:	10bfffc4 	addi	r2,r2,-1
   12cb0:	d0a8f105 	stb	r2,-23612(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   12cb4:	d0a8f103 	ldbu	r2,-23612(gp)
   12cb8:	10803fcc 	andi	r2,r2,255
   12cbc:	10001a1e 	bne	r2,zero,12d28 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   12cc0:	d0a8e303 	ldbu	r2,-23668(gp)
   12cc4:	10803fcc 	andi	r2,r2,255
   12cc8:	1000171e 	bne	r2,zero,12d28 <OSIntExit+0xd0>
                OS_SchedNew();
   12ccc:	0013d000 	call	13d00 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   12cd0:	d0e8e503 	ldbu	r3,-23660(gp)
   12cd4:	d0a8e543 	ldbu	r2,-23659(gp)
   12cd8:	18c03fcc 	andi	r3,r3,255
   12cdc:	10803fcc 	andi	r2,r2,255
   12ce0:	18801126 	beq	r3,r2,12d28 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   12ce4:	d0a8e503 	ldbu	r2,-23660(gp)
   12ce8:	10c03fcc 	andi	r3,r2,255
   12cec:	008000f4 	movhi	r2,3
   12cf0:	10846004 	addi	r2,r2,4480
   12cf4:	18c7883a 	add	r3,r3,r3
   12cf8:	18c7883a 	add	r3,r3,r3
   12cfc:	10c5883a 	add	r2,r2,r3
   12d00:	10800017 	ldw	r2,0(r2)
   12d04:	d0a8ed15 	stw	r2,-23628(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   12d08:	d0a8ed17 	ldw	r2,-23628(gp)
   12d0c:	10c00e17 	ldw	r3,56(r2)
   12d10:	18c00044 	addi	r3,r3,1
   12d14:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   12d18:	d0a8e817 	ldw	r2,-23648(gp)
   12d1c:	10800044 	addi	r2,r2,1
   12d20:	d0a8e815 	stw	r2,-23648(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   12d24:	001e3e40 	call	1e3e4 <OSCtxSw>
   12d28:	e0bffd17 	ldw	r2,-12(fp)
   12d2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d30:	e0bfff17 	ldw	r2,-4(fp)
   12d34:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   12d38:	e037883a 	mov	sp,fp
   12d3c:	dfc00117 	ldw	ra,4(sp)
   12d40:	df000017 	ldw	fp,0(sp)
   12d44:	dec00204 	addi	sp,sp,8
   12d48:	f800283a 	ret

00012d4c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   12d4c:	defffc04 	addi	sp,sp,-16
   12d50:	df000315 	stw	fp,12(sp)
   12d54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12d58:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   12d5c:	d0a8e343 	ldbu	r2,-23667(gp)
   12d60:	10803fcc 	andi	r2,r2,255
   12d64:	10800058 	cmpnei	r2,r2,1
   12d68:	1000161e 	bne	r2,zero,12dc4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d6c:	0005303a 	rdctl	r2,status
   12d70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d74:	e0fffe17 	ldw	r3,-8(fp)
   12d78:	00bfff84 	movi	r2,-2
   12d7c:	1884703a 	and	r2,r3,r2
   12d80:	1001703a 	wrctl	status,r2
  
  return context;
   12d84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   12d88:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   12d8c:	d0a8f103 	ldbu	r2,-23612(gp)
   12d90:	10803fcc 	andi	r2,r2,255
   12d94:	1000071e 	bne	r2,zero,12db4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   12d98:	d0a8e303 	ldbu	r2,-23668(gp)
   12d9c:	10803fcc 	andi	r2,r2,255
   12da0:	10803fe0 	cmpeqi	r2,r2,255
   12da4:	1000031e 	bne	r2,zero,12db4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   12da8:	d0a8e303 	ldbu	r2,-23668(gp)
   12dac:	10800044 	addi	r2,r2,1
   12db0:	d0a8e305 	stb	r2,-23668(gp)
   12db4:	e0bffd17 	ldw	r2,-12(fp)
   12db8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12dbc:	e0bfff17 	ldw	r2,-4(fp)
   12dc0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   12dc4:	e037883a 	mov	sp,fp
   12dc8:	df000017 	ldw	fp,0(sp)
   12dcc:	dec00104 	addi	sp,sp,4
   12dd0:	f800283a 	ret

00012dd4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   12dd4:	defff804 	addi	sp,sp,-32
   12dd8:	dfc00715 	stw	ra,28(sp)
   12ddc:	df000615 	stw	fp,24(sp)
   12de0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12de4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   12de8:	d0a8e343 	ldbu	r2,-23667(gp)
   12dec:	10803fcc 	andi	r2,r2,255
   12df0:	10800058 	cmpnei	r2,r2,1
   12df4:	1000281e 	bne	r2,zero,12e98 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12df8:	0005303a 	rdctl	r2,status
   12dfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e00:	e0fffb17 	ldw	r3,-20(fp)
   12e04:	00bfff84 	movi	r2,-2
   12e08:	1884703a 	and	r2,r3,r2
   12e0c:	1001703a 	wrctl	status,r2
  
  return context;
   12e10:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   12e14:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   12e18:	d0a8e303 	ldbu	r2,-23668(gp)
   12e1c:	10803fcc 	andi	r2,r2,255
   12e20:	10001926 	beq	r2,zero,12e88 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   12e24:	d0a8e303 	ldbu	r2,-23668(gp)
   12e28:	10bfffc4 	addi	r2,r2,-1
   12e2c:	d0a8e305 	stb	r2,-23668(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   12e30:	d0a8e303 	ldbu	r2,-23668(gp)
   12e34:	10803fcc 	andi	r2,r2,255
   12e38:	10000e1e 	bne	r2,zero,12e74 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   12e3c:	d0a8f103 	ldbu	r2,-23612(gp)
   12e40:	10803fcc 	andi	r2,r2,255
   12e44:	1000061e 	bne	r2,zero,12e60 <OSSchedUnlock+0x8c>
   12e48:	e0bffa17 	ldw	r2,-24(fp)
   12e4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e50:	e0bffc17 	ldw	r2,-16(fp)
   12e54:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   12e58:	0013c340 	call	13c34 <OS_Sched>
   12e5c:	00000e06 	br	12e98 <OSSchedUnlock+0xc4>
   12e60:	e0bffa17 	ldw	r2,-24(fp)
   12e64:	e0bffd15 	stw	r2,-12(fp)
   12e68:	e0bffd17 	ldw	r2,-12(fp)
   12e6c:	1001703a 	wrctl	status,r2
   12e70:	00000906 	br	12e98 <OSSchedUnlock+0xc4>
   12e74:	e0bffa17 	ldw	r2,-24(fp)
   12e78:	e0bffe15 	stw	r2,-8(fp)
   12e7c:	e0bffe17 	ldw	r2,-8(fp)
   12e80:	1001703a 	wrctl	status,r2
   12e84:	00000406 	br	12e98 <OSSchedUnlock+0xc4>
   12e88:	e0bffa17 	ldw	r2,-24(fp)
   12e8c:	e0bfff15 	stw	r2,-4(fp)
   12e90:	e0bfff17 	ldw	r2,-4(fp)
   12e94:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   12e98:	e037883a 	mov	sp,fp
   12e9c:	dfc00117 	ldw	ra,4(sp)
   12ea0:	df000017 	ldw	fp,0(sp)
   12ea4:	dec00204 	addi	sp,sp,8
   12ea8:	f800283a 	ret

00012eac <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   12eac:	defffe04 	addi	sp,sp,-8
   12eb0:	dfc00115 	stw	ra,4(sp)
   12eb4:	df000015 	stw	fp,0(sp)
   12eb8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   12ebc:	d0a8e343 	ldbu	r2,-23667(gp)
   12ec0:	10803fcc 	andi	r2,r2,255
   12ec4:	10000f1e 	bne	r2,zero,12f04 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   12ec8:	0013d000 	call	13d00 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   12ecc:	d0a8e503 	ldbu	r2,-23660(gp)
   12ed0:	d0a8e545 	stb	r2,-23659(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   12ed4:	d0a8e503 	ldbu	r2,-23660(gp)
   12ed8:	10c03fcc 	andi	r3,r2,255
   12edc:	008000f4 	movhi	r2,3
   12ee0:	10846004 	addi	r2,r2,4480
   12ee4:	18c7883a 	add	r3,r3,r3
   12ee8:	18c7883a 	add	r3,r3,r3
   12eec:	10c5883a 	add	r2,r2,r3
   12ef0:	10800017 	ldw	r2,0(r2)
   12ef4:	d0a8ed15 	stw	r2,-23628(gp)
        OSTCBCur      = OSTCBHighRdy;
   12ef8:	d0a8ed17 	ldw	r2,-23628(gp)
   12efc:	d0a8f215 	stw	r2,-23608(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   12f00:	001e4700 	call	1e470 <OSStartHighRdy>
    }
}
   12f04:	e037883a 	mov	sp,fp
   12f08:	dfc00117 	ldw	ra,4(sp)
   12f0c:	df000017 	ldw	fp,0(sp)
   12f10:	dec00204 	addi	sp,sp,8
   12f14:	f800283a 	ret

00012f18 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   12f18:	defff904 	addi	sp,sp,-28
   12f1c:	dfc00615 	stw	ra,24(sp)
   12f20:	df000515 	stw	fp,20(sp)
   12f24:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12f28:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   12f2c:	01000084 	movi	r4,2
   12f30:	001a5cc0 	call	1a5cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f34:	0005303a 	rdctl	r2,status
   12f38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f3c:	e0fffc17 	ldw	r3,-16(fp)
   12f40:	00bfff84 	movi	r2,-2
   12f44:	1884703a 	and	r2,r3,r2
   12f48:	1001703a 	wrctl	status,r2
  
  return context;
   12f4c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   12f50:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   12f54:	d028e415 	stw	zero,-23664(gp)
   12f58:	e0bffb17 	ldw	r2,-20(fp)
   12f5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f60:	e0bffd17 	ldw	r2,-12(fp)
   12f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   12f68:	0009883a 	mov	r4,zero
   12f6c:	001a5cc0 	call	1a5cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f70:	0005303a 	rdctl	r2,status
   12f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f78:	e0fffe17 	ldw	r3,-8(fp)
   12f7c:	00bfff84 	movi	r2,-2
   12f80:	1884703a 	and	r2,r3,r2
   12f84:	1001703a 	wrctl	status,r2
  
  return context;
   12f88:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   12f8c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   12f90:	d0a8e417 	ldw	r2,-23664(gp)
   12f94:	d0a8e915 	stw	r2,-23644(gp)
    OSStatRdy    = OS_TRUE;
   12f98:	00800044 	movi	r2,1
   12f9c:	d0a8f505 	stb	r2,-23596(gp)
   12fa0:	e0bffb17 	ldw	r2,-20(fp)
   12fa4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fa8:	e0bfff17 	ldw	r2,-4(fp)
   12fac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   12fb0:	e037883a 	mov	sp,fp
   12fb4:	dfc00117 	ldw	ra,4(sp)
   12fb8:	df000017 	ldw	fp,0(sp)
   12fbc:	dec00204 	addi	sp,sp,8
   12fc0:	f800283a 	ret

00012fc4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   12fc4:	defff704 	addi	sp,sp,-36
   12fc8:	dfc00815 	stw	ra,32(sp)
   12fcc:	df000715 	stw	fp,28(sp)
   12fd0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12fd4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   12fd8:	001e6880 	call	1e688 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fdc:	0005303a 	rdctl	r2,status
   12fe0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fe4:	e0fffc17 	ldw	r3,-16(fp)
   12fe8:	00bfff84 	movi	r2,-2
   12fec:	1884703a 	and	r2,r3,r2
   12ff0:	1001703a 	wrctl	status,r2
  
  return context;
   12ff4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   12ff8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   12ffc:	d0a8f317 	ldw	r2,-23604(gp)
   13000:	10800044 	addi	r2,r2,1
   13004:	d0a8f315 	stw	r2,-23604(gp)
   13008:	e0bffb17 	ldw	r2,-20(fp)
   1300c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13010:	e0bffd17 	ldw	r2,-12(fp)
   13014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13018:	d0a8e343 	ldbu	r2,-23667(gp)
   1301c:	10803fcc 	andi	r2,r2,255
   13020:	10800058 	cmpnei	r2,r2,1
   13024:	1000691e 	bne	r2,zero,131cc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13028:	d0a8e703 	ldbu	r2,-23652(gp)
   1302c:	10803fcc 	andi	r2,r2,255
   13030:	10c00060 	cmpeqi	r3,r2,1
   13034:	1800061e 	bne	r3,zero,13050 <OSTimeTick+0x8c>
   13038:	10c000a0 	cmpeqi	r3,r2,2
   1303c:	1800061e 	bne	r3,zero,13058 <OSTimeTick+0x94>
   13040:	10000a1e 	bne	r2,zero,1306c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   13044:	00800044 	movi	r2,1
   13048:	e0bffa05 	stb	r2,-24(fp)
                 break;
   1304c:	00000b06 	br	1307c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   13050:	e03ffa05 	stb	zero,-24(fp)
                 break;
   13054:	00000906 	br	1307c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   13058:	00800044 	movi	r2,1
   1305c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   13060:	00800044 	movi	r2,1
   13064:	d0a8e705 	stb	r2,-23652(gp)
                 break;
   13068:	00000406 	br	1307c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1306c:	00800044 	movi	r2,1
   13070:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   13074:	d028e705 	stb	zero,-23652(gp)
                 break;
   13078:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1307c:	e0bffa03 	ldbu	r2,-24(fp)
   13080:	1000011e 	bne	r2,zero,13088 <OSTimeTick+0xc4>
            return;
   13084:	00005106 	br	131cc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   13088:	d0a8e617 	ldw	r2,-23656(gp)
   1308c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13090:	00004906 	br	131b8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13094:	0005303a 	rdctl	r2,status
   13098:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1309c:	e0fffe17 	ldw	r3,-8(fp)
   130a0:	00bfff84 	movi	r2,-2
   130a4:	1884703a 	and	r2,r3,r2
   130a8:	1001703a 	wrctl	status,r2
  
  return context;
   130ac:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   130b0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   130b4:	e0bff917 	ldw	r2,-28(fp)
   130b8:	10800b8b 	ldhu	r2,46(r2)
   130bc:	10bfffcc 	andi	r2,r2,65535
   130c0:	10003626 	beq	r2,zero,1319c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   130c4:	e0bff917 	ldw	r2,-28(fp)
   130c8:	10800b8b 	ldhu	r2,46(r2)
   130cc:	10bfffc4 	addi	r2,r2,-1
   130d0:	1007883a 	mov	r3,r2
   130d4:	e0bff917 	ldw	r2,-28(fp)
   130d8:	10c00b8d 	sth	r3,46(r2)
   130dc:	e0bff917 	ldw	r2,-28(fp)
   130e0:	10800b8b 	ldhu	r2,46(r2)
   130e4:	10bfffcc 	andi	r2,r2,65535
   130e8:	10002c1e 	bne	r2,zero,1319c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   130ec:	e0bff917 	ldw	r2,-28(fp)
   130f0:	10800c03 	ldbu	r2,48(r2)
   130f4:	10803fcc 	andi	r2,r2,255
   130f8:	10800dcc 	andi	r2,r2,55
   130fc:	10000b26 	beq	r2,zero,1312c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   13100:	e0bff917 	ldw	r2,-28(fp)
   13104:	10c00c03 	ldbu	r3,48(r2)
   13108:	00bff204 	movi	r2,-56
   1310c:	1884703a 	and	r2,r3,r2
   13110:	1007883a 	mov	r3,r2
   13114:	e0bff917 	ldw	r2,-28(fp)
   13118:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   1311c:	e0bff917 	ldw	r2,-28(fp)
   13120:	00c00044 	movi	r3,1
   13124:	10c00c45 	stb	r3,49(r2)
   13128:	00000206 	br	13134 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1312c:	e0bff917 	ldw	r2,-28(fp)
   13130:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   13134:	e0bff917 	ldw	r2,-28(fp)
   13138:	10800c03 	ldbu	r2,48(r2)
   1313c:	10803fcc 	andi	r2,r2,255
   13140:	1080020c 	andi	r2,r2,8
   13144:	1000151e 	bne	r2,zero,1319c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   13148:	e0bff917 	ldw	r2,-28(fp)
   1314c:	10c00d83 	ldbu	r3,54(r2)
   13150:	d0a8ef03 	ldbu	r2,-23620(gp)
   13154:	1884b03a 	or	r2,r3,r2
   13158:	d0a8ef05 	stb	r2,-23620(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1315c:	e0bff917 	ldw	r2,-28(fp)
   13160:	10800d03 	ldbu	r2,52(r2)
   13164:	10c03fcc 	andi	r3,r2,255
   13168:	e0bff917 	ldw	r2,-28(fp)
   1316c:	10800d03 	ldbu	r2,52(r2)
   13170:	11003fcc 	andi	r4,r2,255
   13174:	d0a8ef44 	addi	r2,gp,-23619
   13178:	2085883a 	add	r2,r4,r2
   1317c:	11000003 	ldbu	r4,0(r2)
   13180:	e0bff917 	ldw	r2,-28(fp)
   13184:	10800d43 	ldbu	r2,53(r2)
   13188:	2084b03a 	or	r2,r4,r2
   1318c:	1009883a 	mov	r4,r2
   13190:	d0a8ef44 	addi	r2,gp,-23619
   13194:	1885883a 	add	r2,r3,r2
   13198:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   1319c:	e0bff917 	ldw	r2,-28(fp)
   131a0:	10800517 	ldw	r2,20(r2)
   131a4:	e0bff915 	stw	r2,-28(fp)
   131a8:	e0bffb17 	ldw	r2,-20(fp)
   131ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   131b8:	e0bff917 	ldw	r2,-28(fp)
   131bc:	10800c83 	ldbu	r2,50(r2)
   131c0:	10803fcc 	andi	r2,r2,255
   131c4:	10800518 	cmpnei	r2,r2,20
   131c8:	103fb21e 	bne	r2,zero,13094 <__alt_mem_Flash_flash_data+0xf4013094>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   131cc:	e037883a 	mov	sp,fp
   131d0:	dfc00117 	ldw	ra,4(sp)
   131d4:	df000017 	ldw	fp,0(sp)
   131d8:	dec00204 	addi	sp,sp,8
   131dc:	f800283a 	ret

000131e0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   131e0:	deffff04 	addi	sp,sp,-4
   131e4:	df000015 	stw	fp,0(sp)
   131e8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   131ec:	00804784 	movi	r2,286
}
   131f0:	e037883a 	mov	sp,fp
   131f4:	df000017 	ldw	fp,0(sp)
   131f8:	dec00104 	addi	sp,sp,4
   131fc:	f800283a 	ret

00013200 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   13200:	deffff04 	addi	sp,sp,-4
   13204:	df000015 	stw	fp,0(sp)
   13208:	d839883a 	mov	fp,sp
}
   1320c:	e037883a 	mov	sp,fp
   13210:	df000017 	ldw	fp,0(sp)
   13214:	dec00104 	addi	sp,sp,4
   13218:	f800283a 	ret

0001321c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   1321c:	defff804 	addi	sp,sp,-32
   13220:	dfc00715 	stw	ra,28(sp)
   13224:	df000615 	stw	fp,24(sp)
   13228:	df000604 	addi	fp,sp,24
   1322c:	e13ffc15 	stw	r4,-16(fp)
   13230:	e17ffd15 	stw	r5,-12(fp)
   13234:	3007883a 	mov	r3,r6
   13238:	3805883a 	mov	r2,r7
   1323c:	e0fffe05 	stb	r3,-8(fp)
   13240:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   13244:	e0bffc17 	ldw	r2,-16(fp)
   13248:	10800283 	ldbu	r2,10(r2)
   1324c:	10c03fcc 	andi	r3,r2,255
   13250:	008000b4 	movhi	r2,2
   13254:	10bcdd04 	addi	r2,r2,-3212
   13258:	10c5883a 	add	r2,r2,r3
   1325c:	10800003 	ldbu	r2,0(r2)
   13260:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   13264:	e0bffa03 	ldbu	r2,-24(fp)
   13268:	e0fffc17 	ldw	r3,-16(fp)
   1326c:	1885883a 	add	r2,r3,r2
   13270:	10800204 	addi	r2,r2,8
   13274:	108000c3 	ldbu	r2,3(r2)
   13278:	10c03fcc 	andi	r3,r2,255
   1327c:	008000b4 	movhi	r2,2
   13280:	10bcdd04 	addi	r2,r2,-3212
   13284:	10c5883a 	add	r2,r2,r3
   13288:	10800003 	ldbu	r2,0(r2)
   1328c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   13290:	e0bffa03 	ldbu	r2,-24(fp)
   13294:	100490fa 	slli	r2,r2,3
   13298:	1007883a 	mov	r3,r2
   1329c:	e0bffa43 	ldbu	r2,-23(fp)
   132a0:	1885883a 	add	r2,r3,r2
   132a4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   132a8:	e0fffa83 	ldbu	r3,-22(fp)
   132ac:	008000f4 	movhi	r2,3
   132b0:	10846004 	addi	r2,r2,4480
   132b4:	18c7883a 	add	r3,r3,r3
   132b8:	18c7883a 	add	r3,r3,r3
   132bc:	10c5883a 	add	r2,r2,r3
   132c0:	10800017 	ldw	r2,0(r2)
   132c4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   132c8:	e0bffb17 	ldw	r2,-20(fp)
   132cc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   132d0:	e0bffb17 	ldw	r2,-20(fp)
   132d4:	e0fffd17 	ldw	r3,-12(fp)
   132d8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   132dc:	e0bffb17 	ldw	r2,-20(fp)
   132e0:	10800c03 	ldbu	r2,48(r2)
   132e4:	1007883a 	mov	r3,r2
   132e8:	e0bffe03 	ldbu	r2,-8(fp)
   132ec:	0084303a 	nor	r2,zero,r2
   132f0:	1884703a 	and	r2,r3,r2
   132f4:	1007883a 	mov	r3,r2
   132f8:	e0bffb17 	ldw	r2,-20(fp)
   132fc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   13300:	e0bffb17 	ldw	r2,-20(fp)
   13304:	e0ffff03 	ldbu	r3,-4(fp)
   13308:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   1330c:	e0bffb17 	ldw	r2,-20(fp)
   13310:	10800c03 	ldbu	r2,48(r2)
   13314:	10803fcc 	andi	r2,r2,255
   13318:	1080020c 	andi	r2,r2,8
   1331c:	1000111e 	bne	r2,zero,13364 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   13320:	e0bffb17 	ldw	r2,-20(fp)
   13324:	10c00d83 	ldbu	r3,54(r2)
   13328:	d0a8ef03 	ldbu	r2,-23620(gp)
   1332c:	1884b03a 	or	r2,r3,r2
   13330:	d0a8ef05 	stb	r2,-23620(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   13334:	e0fffa03 	ldbu	r3,-24(fp)
   13338:	e13ffa03 	ldbu	r4,-24(fp)
   1333c:	d0a8ef44 	addi	r2,gp,-23619
   13340:	2085883a 	add	r2,r4,r2
   13344:	11000003 	ldbu	r4,0(r2)
   13348:	e0bffb17 	ldw	r2,-20(fp)
   1334c:	10800d43 	ldbu	r2,53(r2)
   13350:	2084b03a 	or	r2,r4,r2
   13354:	1009883a 	mov	r4,r2
   13358:	d0a8ef44 	addi	r2,gp,-23619
   1335c:	1885883a 	add	r2,r3,r2
   13360:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   13364:	e13ffb17 	ldw	r4,-20(fp)
   13368:	e17ffc17 	ldw	r5,-16(fp)
   1336c:	001360c0 	call	1360c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   13370:	e0bffb17 	ldw	r2,-20(fp)
   13374:	10800817 	ldw	r2,32(r2)
   13378:	10000826 	beq	r2,zero,1339c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1337c:	e0bffb17 	ldw	r2,-20(fp)
   13380:	10800817 	ldw	r2,32(r2)
   13384:	e13ffb17 	ldw	r4,-20(fp)
   13388:	100b883a 	mov	r5,r2
   1338c:	00136c00 	call	136c0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   13390:	e0bffb17 	ldw	r2,-20(fp)
   13394:	e0fffc17 	ldw	r3,-16(fp)
   13398:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1339c:	e0bffa83 	ldbu	r2,-22(fp)
}
   133a0:	e037883a 	mov	sp,fp
   133a4:	dfc00117 	ldw	ra,4(sp)
   133a8:	df000017 	ldw	fp,0(sp)
   133ac:	dec00204 	addi	sp,sp,8
   133b0:	f800283a 	ret

000133b4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   133b4:	defffd04 	addi	sp,sp,-12
   133b8:	df000215 	stw	fp,8(sp)
   133bc:	df000204 	addi	fp,sp,8
   133c0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   133c4:	d0a8f217 	ldw	r2,-23608(gp)
   133c8:	e0ffff17 	ldw	r3,-4(fp)
   133cc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   133d0:	d0a8f217 	ldw	r2,-23608(gp)
   133d4:	10800d03 	ldbu	r2,52(r2)
   133d8:	10803fcc 	andi	r2,r2,255
   133dc:	d0e8f217 	ldw	r3,-23608(gp)
   133e0:	18c00d03 	ldbu	r3,52(r3)
   133e4:	18c03fcc 	andi	r3,r3,255
   133e8:	e13fff17 	ldw	r4,-4(fp)
   133ec:	20c7883a 	add	r3,r4,r3
   133f0:	18c00204 	addi	r3,r3,8
   133f4:	190000c3 	ldbu	r4,3(r3)
   133f8:	d0e8f217 	ldw	r3,-23608(gp)
   133fc:	18c00d43 	ldbu	r3,53(r3)
   13400:	20c6b03a 	or	r3,r4,r3
   13404:	1809883a 	mov	r4,r3
   13408:	e0ffff17 	ldw	r3,-4(fp)
   1340c:	1885883a 	add	r2,r3,r2
   13410:	10800204 	addi	r2,r2,8
   13414:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   13418:	e0bfff17 	ldw	r2,-4(fp)
   1341c:	10c00283 	ldbu	r3,10(r2)
   13420:	d0a8f217 	ldw	r2,-23608(gp)
   13424:	10800d83 	ldbu	r2,54(r2)
   13428:	1884b03a 	or	r2,r3,r2
   1342c:	1007883a 	mov	r3,r2
   13430:	e0bfff17 	ldw	r2,-4(fp)
   13434:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   13438:	d0a8f217 	ldw	r2,-23608(gp)
   1343c:	10800d03 	ldbu	r2,52(r2)
   13440:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   13444:	e0fffe03 	ldbu	r3,-8(fp)
   13448:	e13ffe03 	ldbu	r4,-8(fp)
   1344c:	d0a8ef44 	addi	r2,gp,-23619
   13450:	2085883a 	add	r2,r4,r2
   13454:	10800003 	ldbu	r2,0(r2)
   13458:	1009883a 	mov	r4,r2
   1345c:	d0a8f217 	ldw	r2,-23608(gp)
   13460:	10800d43 	ldbu	r2,53(r2)
   13464:	0084303a 	nor	r2,zero,r2
   13468:	2084703a 	and	r2,r4,r2
   1346c:	1009883a 	mov	r4,r2
   13470:	d0a8ef44 	addi	r2,gp,-23619
   13474:	1885883a 	add	r2,r3,r2
   13478:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1347c:	e0fffe03 	ldbu	r3,-8(fp)
   13480:	d0a8ef44 	addi	r2,gp,-23619
   13484:	1885883a 	add	r2,r3,r2
   13488:	10800003 	ldbu	r2,0(r2)
   1348c:	10803fcc 	andi	r2,r2,255
   13490:	1000071e 	bne	r2,zero,134b0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   13494:	d0a8f217 	ldw	r2,-23608(gp)
   13498:	10800d83 	ldbu	r2,54(r2)
   1349c:	0084303a 	nor	r2,zero,r2
   134a0:	1007883a 	mov	r3,r2
   134a4:	d0a8ef03 	ldbu	r2,-23620(gp)
   134a8:	1884703a 	and	r2,r3,r2
   134ac:	d0a8ef05 	stb	r2,-23620(gp)
    }
}
   134b0:	e037883a 	mov	sp,fp
   134b4:	df000017 	ldw	fp,0(sp)
   134b8:	dec00104 	addi	sp,sp,4
   134bc:	f800283a 	ret

000134c0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   134c0:	defffb04 	addi	sp,sp,-20
   134c4:	df000415 	stw	fp,16(sp)
   134c8:	df000404 	addi	fp,sp,16
   134cc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   134d0:	d0a8f217 	ldw	r2,-23608(gp)
   134d4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   134d8:	d0a8f217 	ldw	r2,-23608(gp)
   134dc:	e0ffff17 	ldw	r3,-4(fp)
   134e0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   134e4:	e0bfff17 	ldw	r2,-4(fp)
   134e8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   134ec:	e0bffc17 	ldw	r2,-16(fp)
   134f0:	10800017 	ldw	r2,0(r2)
   134f4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   134f8:	00002006 	br	1357c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   134fc:	d0a8f217 	ldw	r2,-23608(gp)
   13500:	10800d03 	ldbu	r2,52(r2)
   13504:	10803fcc 	andi	r2,r2,255
   13508:	d0e8f217 	ldw	r3,-23608(gp)
   1350c:	18c00d03 	ldbu	r3,52(r3)
   13510:	18c03fcc 	andi	r3,r3,255
   13514:	e13ffd17 	ldw	r4,-12(fp)
   13518:	20c7883a 	add	r3,r4,r3
   1351c:	18c00204 	addi	r3,r3,8
   13520:	190000c3 	ldbu	r4,3(r3)
   13524:	d0e8f217 	ldw	r3,-23608(gp)
   13528:	18c00d43 	ldbu	r3,53(r3)
   1352c:	20c6b03a 	or	r3,r4,r3
   13530:	1809883a 	mov	r4,r3
   13534:	e0fffd17 	ldw	r3,-12(fp)
   13538:	1885883a 	add	r2,r3,r2
   1353c:	10800204 	addi	r2,r2,8
   13540:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   13544:	e0bffd17 	ldw	r2,-12(fp)
   13548:	10c00283 	ldbu	r3,10(r2)
   1354c:	d0a8f217 	ldw	r2,-23608(gp)
   13550:	10800d83 	ldbu	r2,54(r2)
   13554:	1884b03a 	or	r2,r3,r2
   13558:	1007883a 	mov	r3,r2
   1355c:	e0bffd17 	ldw	r2,-12(fp)
   13560:	10c00285 	stb	r3,10(r2)
        pevents++;
   13564:	e0bffc17 	ldw	r2,-16(fp)
   13568:	10800104 	addi	r2,r2,4
   1356c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   13570:	e0bffc17 	ldw	r2,-16(fp)
   13574:	10800017 	ldw	r2,0(r2)
   13578:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1357c:	e0bffd17 	ldw	r2,-12(fp)
   13580:	103fde1e 	bne	r2,zero,134fc <__alt_mem_Flash_flash_data+0xf40134fc>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   13584:	d0a8f217 	ldw	r2,-23608(gp)
   13588:	10800d03 	ldbu	r2,52(r2)
   1358c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   13590:	e0fffe03 	ldbu	r3,-8(fp)
   13594:	e13ffe03 	ldbu	r4,-8(fp)
   13598:	d0a8ef44 	addi	r2,gp,-23619
   1359c:	2085883a 	add	r2,r4,r2
   135a0:	10800003 	ldbu	r2,0(r2)
   135a4:	1009883a 	mov	r4,r2
   135a8:	d0a8f217 	ldw	r2,-23608(gp)
   135ac:	10800d43 	ldbu	r2,53(r2)
   135b0:	0084303a 	nor	r2,zero,r2
   135b4:	2084703a 	and	r2,r4,r2
   135b8:	1009883a 	mov	r4,r2
   135bc:	d0a8ef44 	addi	r2,gp,-23619
   135c0:	1885883a 	add	r2,r3,r2
   135c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   135c8:	e0fffe03 	ldbu	r3,-8(fp)
   135cc:	d0a8ef44 	addi	r2,gp,-23619
   135d0:	1885883a 	add	r2,r3,r2
   135d4:	10800003 	ldbu	r2,0(r2)
   135d8:	10803fcc 	andi	r2,r2,255
   135dc:	1000071e 	bne	r2,zero,135fc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   135e0:	d0a8f217 	ldw	r2,-23608(gp)
   135e4:	10800d83 	ldbu	r2,54(r2)
   135e8:	0084303a 	nor	r2,zero,r2
   135ec:	1007883a 	mov	r3,r2
   135f0:	d0a8ef03 	ldbu	r2,-23620(gp)
   135f4:	1884703a 	and	r2,r3,r2
   135f8:	d0a8ef05 	stb	r2,-23620(gp)
    }
}
   135fc:	e037883a 	mov	sp,fp
   13600:	df000017 	ldw	fp,0(sp)
   13604:	dec00104 	addi	sp,sp,4
   13608:	f800283a 	ret

0001360c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1360c:	defffc04 	addi	sp,sp,-16
   13610:	df000315 	stw	fp,12(sp)
   13614:	df000304 	addi	fp,sp,12
   13618:	e13ffe15 	stw	r4,-8(fp)
   1361c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   13620:	e0bffe17 	ldw	r2,-8(fp)
   13624:	10800d03 	ldbu	r2,52(r2)
   13628:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1362c:	e0bffd03 	ldbu	r2,-12(fp)
   13630:	e0fffd03 	ldbu	r3,-12(fp)
   13634:	e13fff17 	ldw	r4,-4(fp)
   13638:	20c7883a 	add	r3,r4,r3
   1363c:	18c00204 	addi	r3,r3,8
   13640:	18c000c3 	ldbu	r3,3(r3)
   13644:	1809883a 	mov	r4,r3
   13648:	e0fffe17 	ldw	r3,-8(fp)
   1364c:	18c00d43 	ldbu	r3,53(r3)
   13650:	00c6303a 	nor	r3,zero,r3
   13654:	20c6703a 	and	r3,r4,r3
   13658:	1809883a 	mov	r4,r3
   1365c:	e0ffff17 	ldw	r3,-4(fp)
   13660:	1885883a 	add	r2,r3,r2
   13664:	10800204 	addi	r2,r2,8
   13668:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1366c:	e0bffd03 	ldbu	r2,-12(fp)
   13670:	e0ffff17 	ldw	r3,-4(fp)
   13674:	1885883a 	add	r2,r3,r2
   13678:	10800204 	addi	r2,r2,8
   1367c:	108000c3 	ldbu	r2,3(r2)
   13680:	10803fcc 	andi	r2,r2,255
   13684:	10000a1e 	bne	r2,zero,136b0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	10800283 	ldbu	r2,10(r2)
   13690:	1007883a 	mov	r3,r2
   13694:	e0bffe17 	ldw	r2,-8(fp)
   13698:	10800d83 	ldbu	r2,54(r2)
   1369c:	0084303a 	nor	r2,zero,r2
   136a0:	1884703a 	and	r2,r3,r2
   136a4:	1007883a 	mov	r3,r2
   136a8:	e0bfff17 	ldw	r2,-4(fp)
   136ac:	10c00285 	stb	r3,10(r2)
    }
}
   136b0:	e037883a 	mov	sp,fp
   136b4:	df000017 	ldw	fp,0(sp)
   136b8:	dec00104 	addi	sp,sp,4
   136bc:	f800283a 	ret

000136c0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   136c0:	defffa04 	addi	sp,sp,-24
   136c4:	df000515 	stw	fp,20(sp)
   136c8:	df000504 	addi	fp,sp,20
   136cc:	e13ffe15 	stw	r4,-8(fp)
   136d0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   136d4:	e0bffe17 	ldw	r2,-8(fp)
   136d8:	10800d03 	ldbu	r2,52(r2)
   136dc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   136e0:	e0bffe17 	ldw	r2,-8(fp)
   136e4:	10800d83 	ldbu	r2,54(r2)
   136e8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   136ec:	e0bffe17 	ldw	r2,-8(fp)
   136f0:	10800d43 	ldbu	r2,53(r2)
   136f4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   136f8:	e0bfff17 	ldw	r2,-4(fp)
   136fc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   13700:	e0bffb17 	ldw	r2,-20(fp)
   13704:	10800017 	ldw	r2,0(r2)
   13708:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1370c:	00002506 	br	137a4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   13710:	e0bffd03 	ldbu	r2,-12(fp)
   13714:	e0fffd03 	ldbu	r3,-12(fp)
   13718:	e13ffc17 	ldw	r4,-16(fp)
   1371c:	20c7883a 	add	r3,r4,r3
   13720:	18c00204 	addi	r3,r3,8
   13724:	18c000c3 	ldbu	r3,3(r3)
   13728:	1809883a 	mov	r4,r3
   1372c:	e0fffd83 	ldbu	r3,-10(fp)
   13730:	00c6303a 	nor	r3,zero,r3
   13734:	20c6703a 	and	r3,r4,r3
   13738:	1809883a 	mov	r4,r3
   1373c:	e0fffc17 	ldw	r3,-16(fp)
   13740:	1885883a 	add	r2,r3,r2
   13744:	10800204 	addi	r2,r2,8
   13748:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1374c:	e0bffd03 	ldbu	r2,-12(fp)
   13750:	e0fffc17 	ldw	r3,-16(fp)
   13754:	1885883a 	add	r2,r3,r2
   13758:	10800204 	addi	r2,r2,8
   1375c:	108000c3 	ldbu	r2,3(r2)
   13760:	10803fcc 	andi	r2,r2,255
   13764:	1000091e 	bne	r2,zero,1378c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   13768:	e0bffc17 	ldw	r2,-16(fp)
   1376c:	10800283 	ldbu	r2,10(r2)
   13770:	1007883a 	mov	r3,r2
   13774:	e0bffd43 	ldbu	r2,-11(fp)
   13778:	0084303a 	nor	r2,zero,r2
   1377c:	1884703a 	and	r2,r3,r2
   13780:	1007883a 	mov	r3,r2
   13784:	e0bffc17 	ldw	r2,-16(fp)
   13788:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1378c:	e0bffb17 	ldw	r2,-20(fp)
   13790:	10800104 	addi	r2,r2,4
   13794:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   13798:	e0bffb17 	ldw	r2,-20(fp)
   1379c:	10800017 	ldw	r2,0(r2)
   137a0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   137a4:	e0bffc17 	ldw	r2,-16(fp)
   137a8:	103fd91e 	bne	r2,zero,13710 <__alt_mem_Flash_flash_data+0xf4013710>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   137ac:	e037883a 	mov	sp,fp
   137b0:	df000017 	ldw	fp,0(sp)
   137b4:	dec00104 	addi	sp,sp,4
   137b8:	f800283a 	ret

000137bc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   137bc:	defffc04 	addi	sp,sp,-16
   137c0:	df000315 	stw	fp,12(sp)
   137c4:	df000304 	addi	fp,sp,12
   137c8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   137cc:	e0bfff17 	ldw	r2,-4(fp)
   137d0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   137d4:	e0bfff17 	ldw	r2,-4(fp)
   137d8:	108002c4 	addi	r2,r2,11
   137dc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   137e0:	e03ffe05 	stb	zero,-8(fp)
   137e4:	00000706 	br	13804 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   137e8:	e0bffd17 	ldw	r2,-12(fp)
   137ec:	10c00044 	addi	r3,r2,1
   137f0:	e0fffd15 	stw	r3,-12(fp)
   137f4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   137f8:	e0bffe03 	ldbu	r2,-8(fp)
   137fc:	10800044 	addi	r2,r2,1
   13800:	e0bffe05 	stb	r2,-8(fp)
   13804:	e0bffe03 	ldbu	r2,-8(fp)
   13808:	108000f0 	cmpltui	r2,r2,3
   1380c:	103ff61e 	bne	r2,zero,137e8 <__alt_mem_Flash_flash_data+0xf40137e8>
        *ptbl++ = 0;
    }
}
   13810:	e037883a 	mov	sp,fp
   13814:	df000017 	ldw	fp,0(sp)
   13818:	dec00104 	addi	sp,sp,4
   1381c:	f800283a 	ret

00013820 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   13820:	defffb04 	addi	sp,sp,-20
   13824:	dfc00415 	stw	ra,16(sp)
   13828:	df000315 	stw	fp,12(sp)
   1382c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   13830:	010000f4 	movhi	r4,3
   13834:	21004c04 	addi	r4,r4,304
   13838:	0142d004 	movi	r5,2880
   1383c:	0013b800 	call	13b80 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   13840:	008000f4 	movhi	r2,3
   13844:	10804c04 	addi	r2,r2,304
   13848:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1384c:	008000f4 	movhi	r2,3
   13850:	10805804 	addi	r2,r2,352
   13854:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   13858:	e03ffd0d 	sth	zero,-12(fp)
   1385c:	00001306 	br	138ac <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13860:	e0bffe17 	ldw	r2,-8(fp)
   13864:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   13868:	e0bffe17 	ldw	r2,-8(fp)
   1386c:	e0ffff17 	ldw	r3,-4(fp)
   13870:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   13874:	e0bffe17 	ldw	r2,-8(fp)
   13878:	00c00fc4 	movi	r3,63
   1387c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   13880:	e0bffe17 	ldw	r2,-8(fp)
   13884:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   13888:	e0bffe17 	ldw	r2,-8(fp)
   1388c:	10800c04 	addi	r2,r2,48
   13890:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   13894:	e0bfff17 	ldw	r2,-4(fp)
   13898:	10800c04 	addi	r2,r2,48
   1389c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   138a0:	e0bffd0b 	ldhu	r2,-12(fp)
   138a4:	10800044 	addi	r2,r2,1
   138a8:	e0bffd0d 	sth	r2,-12(fp)
   138ac:	e0bffd0b 	ldhu	r2,-12(fp)
   138b0:	10800ef0 	cmpltui	r2,r2,59
   138b4:	103fea1e 	bne	r2,zero,13860 <__alt_mem_Flash_flash_data+0xf4013860>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   138b8:	e0bffe17 	ldw	r2,-8(fp)
   138bc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   138c0:	e0bffe17 	ldw	r2,-8(fp)
   138c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   138c8:	e0bffe17 	ldw	r2,-8(fp)
   138cc:	00c00fc4 	movi	r3,63
   138d0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   138d4:	e0bffe17 	ldw	r2,-8(fp)
   138d8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   138dc:	008000f4 	movhi	r2,3
   138e0:	10804c04 	addi	r2,r2,304
   138e4:	d0a8f015 	stw	r2,-23616(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   138e8:	e037883a 	mov	sp,fp
   138ec:	dfc00117 	ldw	ra,4(sp)
   138f0:	df000017 	ldw	fp,0(sp)
   138f4:	dec00204 	addi	sp,sp,8
   138f8:	f800283a 	ret

000138fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   138fc:	deffff04 	addi	sp,sp,-4
   13900:	df000015 	stw	fp,0(sp)
   13904:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   13908:	d028f315 	stw	zero,-23604(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1390c:	d028f105 	stb	zero,-23612(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   13910:	d028e305 	stb	zero,-23668(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   13914:	d028eb45 	stb	zero,-23635(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   13918:	d028e345 	stb	zero,-23667(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1391c:	d028e815 	stw	zero,-23648(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   13920:	d028e415 	stw	zero,-23664(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   13924:	d028f615 	stw	zero,-23592(gp)
    OSIdleCtrMax  = 0L;
   13928:	d028e915 	stw	zero,-23644(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1392c:	d028f505 	stb	zero,-23596(gp)
#endif
}
   13930:	e037883a 	mov	sp,fp
   13934:	df000017 	ldw	fp,0(sp)
   13938:	dec00104 	addi	sp,sp,4
   1393c:	f800283a 	ret

00013940 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   13940:	defffd04 	addi	sp,sp,-12
   13944:	df000215 	stw	fp,8(sp)
   13948:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1394c:	d028ef05 	stb	zero,-23620(gp)
    prdytbl       = &OSRdyTbl[0];
   13950:	d0a8ef44 	addi	r2,gp,-23619
   13954:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   13958:	e03ffe05 	stb	zero,-8(fp)
   1395c:	00000706 	br	1397c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   13960:	e0bfff17 	ldw	r2,-4(fp)
   13964:	10c00044 	addi	r3,r2,1
   13968:	e0ffff15 	stw	r3,-4(fp)
   1396c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   13970:	e0bffe03 	ldbu	r2,-8(fp)
   13974:	10800044 	addi	r2,r2,1
   13978:	e0bffe05 	stb	r2,-8(fp)
   1397c:	e0bffe03 	ldbu	r2,-8(fp)
   13980:	108000f0 	cmpltui	r2,r2,3
   13984:	103ff61e 	bne	r2,zero,13960 <__alt_mem_Flash_flash_data+0xf4013960>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   13988:	d028e545 	stb	zero,-23659(gp)
    OSPrioHighRdy = 0;
   1398c:	d028e505 	stb	zero,-23660(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   13990:	d028ed15 	stw	zero,-23628(gp)
    OSTCBCur      = (OS_TCB *)0;
   13994:	d028f215 	stw	zero,-23608(gp)
}
   13998:	e037883a 	mov	sp,fp
   1399c:	df000017 	ldw	fp,0(sp)
   139a0:	dec00104 	addi	sp,sp,4
   139a4:	f800283a 	ret

000139a8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   139a8:	defff804 	addi	sp,sp,-32
   139ac:	dfc00715 	stw	ra,28(sp)
   139b0:	df000615 	stw	fp,24(sp)
   139b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   139b8:	00bfffd4 	movui	r2,65535
   139bc:	d8800015 	stw	r2,0(sp)
   139c0:	008000f4 	movhi	r2,3
   139c4:	10be4c04 	addi	r2,r2,-1744
   139c8:	d8800115 	stw	r2,4(sp)
   139cc:	00808004 	movi	r2,512
   139d0:	d8800215 	stw	r2,8(sp)
   139d4:	d8000315 	stw	zero,12(sp)
   139d8:	008000c4 	movi	r2,3
   139dc:	d8800415 	stw	r2,16(sp)
   139e0:	01000074 	movhi	r4,1
   139e4:	210f8e04 	addi	r4,r4,15928
   139e8:	000b883a 	mov	r5,zero
   139ec:	018000f4 	movhi	r6,3
   139f0:	31804b04 	addi	r6,r6,300
   139f4:	01c00504 	movi	r7,20
   139f8:	00193d40 	call	193d4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   139fc:	01000504 	movi	r4,20
   13a00:	014000b4 	movhi	r5,2
   13a04:	297d1d04 	addi	r5,r5,-2956
   13a08:	e1bfff04 	addi	r6,fp,-4
   13a0c:	0019ca00 	call	19ca0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   13a10:	e037883a 	mov	sp,fp
   13a14:	dfc00117 	ldw	ra,4(sp)
   13a18:	df000017 	ldw	fp,0(sp)
   13a1c:	dec00204 	addi	sp,sp,8
   13a20:	f800283a 	ret

00013a24 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   13a24:	defff804 	addi	sp,sp,-32
   13a28:	dfc00715 	stw	ra,28(sp)
   13a2c:	df000615 	stw	fp,24(sp)
   13a30:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   13a34:	00bfff94 	movui	r2,65534
   13a38:	d8800015 	stw	r2,0(sp)
   13a3c:	008000f4 	movhi	r2,3
   13a40:	10bbd404 	addi	r2,r2,-4272
   13a44:	d8800115 	stw	r2,4(sp)
   13a48:	00808004 	movi	r2,512
   13a4c:	d8800215 	stw	r2,8(sp)
   13a50:	d8000315 	stw	zero,12(sp)
   13a54:	008000c4 	movi	r2,3
   13a58:	d8800415 	stw	r2,16(sp)
   13a5c:	01000074 	movhi	r4,1
   13a60:	210fa504 	addi	r4,r4,16020
   13a64:	000b883a 	mov	r5,zero
   13a68:	018000f4 	movhi	r6,3
   13a6c:	31bdd304 	addi	r6,r6,-2228
   13a70:	01c004c4 	movi	r7,19
   13a74:	00193d40 	call	193d4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   13a78:	010004c4 	movi	r4,19
   13a7c:	014000b4 	movhi	r5,2
   13a80:	297d2104 	addi	r5,r5,-2940
   13a84:	e1bfff04 	addi	r6,fp,-4
   13a88:	0019ca00 	call	19ca0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   13a8c:	e037883a 	mov	sp,fp
   13a90:	dfc00117 	ldw	ra,4(sp)
   13a94:	df000017 	ldw	fp,0(sp)
   13a98:	dec00204 	addi	sp,sp,8
   13a9c:	f800283a 	ret

00013aa0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   13aa0:	defffb04 	addi	sp,sp,-20
   13aa4:	dfc00415 	stw	ra,16(sp)
   13aa8:	df000315 	stw	fp,12(sp)
   13aac:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   13ab0:	010000f4 	movhi	r4,3
   13ab4:	21031c04 	addi	r4,r4,3184
   13ab8:	01414404 	movi	r5,1296
   13abc:	0013b800 	call	13b80 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   13ac0:	010000f4 	movhi	r4,3
   13ac4:	21046004 	addi	r4,r4,4480
   13ac8:	01401504 	movi	r5,84
   13acc:	0013b800 	call	13b80 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   13ad0:	008000f4 	movhi	r2,3
   13ad4:	10831c04 	addi	r2,r2,3184
   13ad8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   13adc:	008000f4 	movhi	r2,3
   13ae0:	10833704 	addi	r2,r2,3292
   13ae4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   13ae8:	e03ffd05 	stb	zero,-12(fp)
   13aec:	00001106 	br	13b34 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   13af0:	e0bffe17 	ldw	r2,-8(fp)
   13af4:	e0ffff17 	ldw	r3,-4(fp)
   13af8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   13afc:	e0bffe17 	ldw	r2,-8(fp)
   13b00:	00c00fc4 	movi	r3,63
   13b04:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   13b08:	e0bffe17 	ldw	r2,-8(fp)
   13b0c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   13b10:	e0bffe17 	ldw	r2,-8(fp)
   13b14:	10801b04 	addi	r2,r2,108
   13b18:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   13b1c:	e0bfff17 	ldw	r2,-4(fp)
   13b20:	10801b04 	addi	r2,r2,108
   13b24:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   13b28:	e0bffd03 	ldbu	r2,-12(fp)
   13b2c:	10800044 	addi	r2,r2,1
   13b30:	e0bffd05 	stb	r2,-12(fp)
   13b34:	e0bffd03 	ldbu	r2,-12(fp)
   13b38:	108002f0 	cmpltui	r2,r2,11
   13b3c:	103fec1e 	bne	r2,zero,13af0 <__alt_mem_Flash_flash_data+0xf4013af0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   13b40:	e0bffe17 	ldw	r2,-8(fp)
   13b44:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   13b48:	e0bffe17 	ldw	r2,-8(fp)
   13b4c:	00c00fc4 	movi	r3,63
   13b50:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   13b5c:	d028e615 	stw	zero,-23656(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   13b60:	008000f4 	movhi	r2,3
   13b64:	10831c04 	addi	r2,r2,3184
   13b68:	d0a8ea15 	stw	r2,-23640(gp)
}
   13b6c:	e037883a 	mov	sp,fp
   13b70:	dfc00117 	ldw	ra,4(sp)
   13b74:	df000017 	ldw	fp,0(sp)
   13b78:	dec00204 	addi	sp,sp,8
   13b7c:	f800283a 	ret

00013b80 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   13b80:	defffd04 	addi	sp,sp,-12
   13b84:	df000215 	stw	fp,8(sp)
   13b88:	df000204 	addi	fp,sp,8
   13b8c:	e13ffe15 	stw	r4,-8(fp)
   13b90:	2805883a 	mov	r2,r5
   13b94:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   13b98:	00000706 	br	13bb8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   13b9c:	e0bffe17 	ldw	r2,-8(fp)
   13ba0:	10c00044 	addi	r3,r2,1
   13ba4:	e0fffe15 	stw	r3,-8(fp)
   13ba8:	10000005 	stb	zero,0(r2)
        size--;
   13bac:	e0bfff0b 	ldhu	r2,-4(fp)
   13bb0:	10bfffc4 	addi	r2,r2,-1
   13bb4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   13bb8:	e0bfff0b 	ldhu	r2,-4(fp)
   13bbc:	103ff71e 	bne	r2,zero,13b9c <__alt_mem_Flash_flash_data+0xf4013b9c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   13bc0:	e037883a 	mov	sp,fp
   13bc4:	df000017 	ldw	fp,0(sp)
   13bc8:	dec00104 	addi	sp,sp,4
   13bcc:	f800283a 	ret

00013bd0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   13bd0:	defffc04 	addi	sp,sp,-16
   13bd4:	df000315 	stw	fp,12(sp)
   13bd8:	df000304 	addi	fp,sp,12
   13bdc:	e13ffd15 	stw	r4,-12(fp)
   13be0:	e17ffe15 	stw	r5,-8(fp)
   13be4:	3005883a 	mov	r2,r6
   13be8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   13bec:	00000b06 	br	13c1c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   13bf0:	e0bffd17 	ldw	r2,-12(fp)
   13bf4:	10c00044 	addi	r3,r2,1
   13bf8:	e0fffd15 	stw	r3,-12(fp)
   13bfc:	e0fffe17 	ldw	r3,-8(fp)
   13c00:	19000044 	addi	r4,r3,1
   13c04:	e13ffe15 	stw	r4,-8(fp)
   13c08:	18c00003 	ldbu	r3,0(r3)
   13c0c:	10c00005 	stb	r3,0(r2)
        size--;
   13c10:	e0bfff0b 	ldhu	r2,-4(fp)
   13c14:	10bfffc4 	addi	r2,r2,-1
   13c18:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   13c1c:	e0bfff0b 	ldhu	r2,-4(fp)
   13c20:	103ff31e 	bne	r2,zero,13bf0 <__alt_mem_Flash_flash_data+0xf4013bf0>
        *pdest++ = *psrc++;
        size--;
    }
}
   13c24:	e037883a 	mov	sp,fp
   13c28:	df000017 	ldw	fp,0(sp)
   13c2c:	dec00104 	addi	sp,sp,4
   13c30:	f800283a 	ret

00013c34 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   13c34:	defffb04 	addi	sp,sp,-20
   13c38:	dfc00415 	stw	ra,16(sp)
   13c3c:	df000315 	stw	fp,12(sp)
   13c40:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13c44:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c48:	0005303a 	rdctl	r2,status
   13c4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c50:	e0fffe17 	ldw	r3,-8(fp)
   13c54:	00bfff84 	movi	r2,-2
   13c58:	1884703a 	and	r2,r3,r2
   13c5c:	1001703a 	wrctl	status,r2
  
  return context;
   13c60:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13c64:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   13c68:	d0a8f103 	ldbu	r2,-23612(gp)
   13c6c:	10803fcc 	andi	r2,r2,255
   13c70:	10001a1e 	bne	r2,zero,13cdc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   13c74:	d0a8e303 	ldbu	r2,-23668(gp)
   13c78:	10803fcc 	andi	r2,r2,255
   13c7c:	1000171e 	bne	r2,zero,13cdc <OS_Sched+0xa8>
            OS_SchedNew();
   13c80:	0013d000 	call	13d00 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   13c84:	d0e8e503 	ldbu	r3,-23660(gp)
   13c88:	d0a8e543 	ldbu	r2,-23659(gp)
   13c8c:	18c03fcc 	andi	r3,r3,255
   13c90:	10803fcc 	andi	r2,r2,255
   13c94:	18801126 	beq	r3,r2,13cdc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   13c98:	d0a8e503 	ldbu	r2,-23660(gp)
   13c9c:	10c03fcc 	andi	r3,r2,255
   13ca0:	008000f4 	movhi	r2,3
   13ca4:	10846004 	addi	r2,r2,4480
   13ca8:	18c7883a 	add	r3,r3,r3
   13cac:	18c7883a 	add	r3,r3,r3
   13cb0:	10c5883a 	add	r2,r2,r3
   13cb4:	10800017 	ldw	r2,0(r2)
   13cb8:	d0a8ed15 	stw	r2,-23628(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   13cbc:	d0a8ed17 	ldw	r2,-23628(gp)
   13cc0:	10c00e17 	ldw	r3,56(r2)
   13cc4:	18c00044 	addi	r3,r3,1
   13cc8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   13ccc:	d0a8e817 	ldw	r2,-23648(gp)
   13cd0:	10800044 	addi	r2,r2,1
   13cd4:	d0a8e815 	stw	r2,-23648(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   13cd8:	001e3e40 	call	1e3e4 <OSCtxSw>
   13cdc:	e0bffd17 	ldw	r2,-12(fp)
   13ce0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ce4:	e0bfff17 	ldw	r2,-4(fp)
   13ce8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   13cec:	e037883a 	mov	sp,fp
   13cf0:	dfc00117 	ldw	ra,4(sp)
   13cf4:	df000017 	ldw	fp,0(sp)
   13cf8:	dec00204 	addi	sp,sp,8
   13cfc:	f800283a 	ret

00013d00 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   13d00:	defffe04 	addi	sp,sp,-8
   13d04:	df000115 	stw	fp,4(sp)
   13d08:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   13d0c:	d0a8ef03 	ldbu	r2,-23620(gp)
   13d10:	10c03fcc 	andi	r3,r2,255
   13d14:	008000b4 	movhi	r2,2
   13d18:	10bcdd04 	addi	r2,r2,-3212
   13d1c:	10c5883a 	add	r2,r2,r3
   13d20:	10800003 	ldbu	r2,0(r2)
   13d24:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   13d28:	e0bfff03 	ldbu	r2,-4(fp)
   13d2c:	100490fa 	slli	r2,r2,3
   13d30:	1009883a 	mov	r4,r2
   13d34:	e0ffff03 	ldbu	r3,-4(fp)
   13d38:	d0a8ef44 	addi	r2,gp,-23619
   13d3c:	1885883a 	add	r2,r3,r2
   13d40:	10800003 	ldbu	r2,0(r2)
   13d44:	10c03fcc 	andi	r3,r2,255
   13d48:	008000b4 	movhi	r2,2
   13d4c:	10bcdd04 	addi	r2,r2,-3212
   13d50:	10c5883a 	add	r2,r2,r3
   13d54:	10800003 	ldbu	r2,0(r2)
   13d58:	2085883a 	add	r2,r4,r2
   13d5c:	d0a8e505 	stb	r2,-23660(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   13d60:	e037883a 	mov	sp,fp
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00104 	addi	sp,sp,4
   13d6c:	f800283a 	ret

00013d70 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   13d70:	defffc04 	addi	sp,sp,-16
   13d74:	df000315 	stw	fp,12(sp)
   13d78:	df000304 	addi	fp,sp,12
   13d7c:	e13ffe15 	stw	r4,-8(fp)
   13d80:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   13d84:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   13d88:	00000b06 	br	13db8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   13d8c:	e0bffe17 	ldw	r2,-8(fp)
   13d90:	10c00044 	addi	r3,r2,1
   13d94:	e0fffe15 	stw	r3,-8(fp)
   13d98:	e0ffff17 	ldw	r3,-4(fp)
   13d9c:	19000044 	addi	r4,r3,1
   13da0:	e13fff15 	stw	r4,-4(fp)
   13da4:	18c00003 	ldbu	r3,0(r3)
   13da8:	10c00005 	stb	r3,0(r2)
        len++;
   13dac:	e0bffd03 	ldbu	r2,-12(fp)
   13db0:	10800044 	addi	r2,r2,1
   13db4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   13db8:	e0bfff17 	ldw	r2,-4(fp)
   13dbc:	10800003 	ldbu	r2,0(r2)
   13dc0:	10803fcc 	andi	r2,r2,255
   13dc4:	103ff11e 	bne	r2,zero,13d8c <__alt_mem_Flash_flash_data+0xf4013d8c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   13dc8:	e0bffe17 	ldw	r2,-8(fp)
   13dcc:	10000005 	stb	zero,0(r2)
    return (len);
   13dd0:	e0bffd03 	ldbu	r2,-12(fp)
}
   13dd4:	e037883a 	mov	sp,fp
   13dd8:	df000017 	ldw	fp,0(sp)
   13ddc:	dec00104 	addi	sp,sp,4
   13de0:	f800283a 	ret

00013de4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   13de4:	defffd04 	addi	sp,sp,-12
   13de8:	df000215 	stw	fp,8(sp)
   13dec:	df000204 	addi	fp,sp,8
   13df0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   13df4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   13df8:	00000606 	br	13e14 <OS_StrLen+0x30>
        psrc++;
   13dfc:	e0bfff17 	ldw	r2,-4(fp)
   13e00:	10800044 	addi	r2,r2,1
   13e04:	e0bfff15 	stw	r2,-4(fp)
        len++;
   13e08:	e0bffe03 	ldbu	r2,-8(fp)
   13e0c:	10800044 	addi	r2,r2,1
   13e10:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   13e14:	e0bfff17 	ldw	r2,-4(fp)
   13e18:	10800003 	ldbu	r2,0(r2)
   13e1c:	10803fcc 	andi	r2,r2,255
   13e20:	103ff61e 	bne	r2,zero,13dfc <__alt_mem_Flash_flash_data+0xf4013dfc>
        psrc++;
        len++;
    }
    return (len);
   13e24:	e0bffe03 	ldbu	r2,-8(fp)
}
   13e28:	e037883a 	mov	sp,fp
   13e2c:	df000017 	ldw	fp,0(sp)
   13e30:	dec00104 	addi	sp,sp,4
   13e34:	f800283a 	ret

00013e38 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   13e38:	defffa04 	addi	sp,sp,-24
   13e3c:	dfc00515 	stw	ra,20(sp)
   13e40:	df000415 	stw	fp,16(sp)
   13e44:	df000404 	addi	fp,sp,16
   13e48:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e50:	0005303a 	rdctl	r2,status
   13e54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e58:	e0fffd17 	ldw	r3,-12(fp)
   13e5c:	00bfff84 	movi	r2,-2
   13e60:	1884703a 	and	r2,r3,r2
   13e64:	1001703a 	wrctl	status,r2
  
  return context;
   13e68:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   13e6c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   13e70:	d0a8e417 	ldw	r2,-23664(gp)
   13e74:	10800044 	addi	r2,r2,1
   13e78:	d0a8e415 	stw	r2,-23664(gp)
   13e7c:	e0bffc17 	ldw	r2,-16(fp)
   13e80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e84:	e0bffe17 	ldw	r2,-8(fp)
   13e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   13e8c:	001e6dc0 	call	1e6dc <OSTaskIdleHook>
    }
   13e90:	003fef06 	br	13e50 <__alt_mem_Flash_flash_data+0xf4013e50>

00013e94 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   13e94:	defff804 	addi	sp,sp,-32
   13e98:	dfc00715 	stw	ra,28(sp)
   13e9c:	df000615 	stw	fp,24(sp)
   13ea0:	dc400515 	stw	r17,20(sp)
   13ea4:	dc000415 	stw	r16,16(sp)
   13ea8:	df000604 	addi	fp,sp,24
   13eac:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13eb0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   13eb4:	00000206 	br	13ec0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   13eb8:	01000044 	movi	r4,1
   13ebc:	001a5cc0 	call	1a5cc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   13ec0:	d0a8f503 	ldbu	r2,-23596(gp)
   13ec4:	10803fcc 	andi	r2,r2,255
   13ec8:	103ffb26 	beq	r2,zero,13eb8 <__alt_mem_Flash_flash_data+0xf4013eb8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   13ecc:	d0e8e917 	ldw	r3,-23644(gp)
   13ed0:	00947b34 	movhi	r2,20972
   13ed4:	10a147c4 	addi	r2,r2,-31457
   13ed8:	1888383a 	mulxuu	r4,r3,r2
   13edc:	1885383a 	mul	r2,r3,r2
   13ee0:	1021883a 	mov	r16,r2
   13ee4:	2023883a 	mov	r17,r4
   13ee8:	8804d17a 	srli	r2,r17,5
   13eec:	d0a8e915 	stw	r2,-23644(gp)
    if (OSIdleCtrMax == 0L) {
   13ef0:	d0a8e917 	ldw	r2,-23644(gp)
   13ef4:	1000031e 	bne	r2,zero,13f04 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   13ef8:	d028eb05 	stb	zero,-23636(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   13efc:	01003fc4 	movi	r4,255
   13f00:	001a2200 	call	1a220 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f04:	0005303a 	rdctl	r2,status
   13f08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f0c:	e0fffb17 	ldw	r3,-20(fp)
   13f10:	00bfff84 	movi	r2,-2
   13f14:	1884703a 	and	r2,r3,r2
   13f18:	1001703a 	wrctl	status,r2
  
  return context;
   13f1c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   13f20:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   13f24:	d0a8e417 	ldw	r2,-23664(gp)
   13f28:	d0a8f615 	stw	r2,-23592(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   13f2c:	d028e415 	stw	zero,-23664(gp)
   13f30:	e0bffa17 	ldw	r2,-24(fp)
   13f34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f38:	e0bffc17 	ldw	r2,-16(fp)
   13f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   13f40:	d0e8f617 	ldw	r3,-23592(gp)
   13f44:	d0a8e917 	ldw	r2,-23644(gp)
   13f48:	1885203a 	divu	r2,r3,r2
   13f4c:	1007883a 	mov	r3,r2
   13f50:	00801904 	movi	r2,100
   13f54:	10c5c83a 	sub	r2,r2,r3
   13f58:	d0a8eb05 	stb	r2,-23636(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   13f5c:	001e66c0 	call	1e66c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   13f60:	0013f700 	call	13f70 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   13f64:	0009883a 	mov	r4,zero
   13f68:	001a5cc0 	call	1a5cc <OSTimeDly>
    }
   13f6c:	003fe506 	br	13f04 <__alt_mem_Flash_flash_data+0xf4013f04>

00013f70 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   13f70:	defffa04 	addi	sp,sp,-24
   13f74:	dfc00515 	stw	ra,20(sp)
   13f78:	df000415 	stw	fp,16(sp)
   13f7c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   13f80:	e03ffc05 	stb	zero,-16(fp)
   13f84:	00002406 	br	14018 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   13f88:	e0fffc03 	ldbu	r3,-16(fp)
   13f8c:	e0bffe04 	addi	r2,fp,-8
   13f90:	1809883a 	mov	r4,r3
   13f94:	100b883a 	mov	r5,r2
   13f98:	001a0580 	call	1a058 <OSTaskStkChk>
   13f9c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   13fa0:	e0bffc43 	ldbu	r2,-15(fp)
   13fa4:	1000191e 	bne	r2,zero,1400c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   13fa8:	e0fffc03 	ldbu	r3,-16(fp)
   13fac:	008000f4 	movhi	r2,3
   13fb0:	10846004 	addi	r2,r2,4480
   13fb4:	18c7883a 	add	r3,r3,r3
   13fb8:	18c7883a 	add	r3,r3,r3
   13fbc:	10c5883a 	add	r2,r2,r3
   13fc0:	10800017 	ldw	r2,0(r2)
   13fc4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   13fc8:	e0bffd17 	ldw	r2,-12(fp)
   13fcc:	10000f26 	beq	r2,zero,1400c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   13fd0:	e0bffd17 	ldw	r2,-12(fp)
   13fd4:	10800060 	cmpeqi	r2,r2,1
   13fd8:	10000c1e 	bne	r2,zero,1400c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   13fdc:	e0bffd17 	ldw	r2,-12(fp)
   13fe0:	10c00217 	ldw	r3,8(r2)
   13fe4:	e0bffd17 	ldw	r2,-12(fp)
   13fe8:	10800317 	ldw	r2,12(r2)
   13fec:	1085883a 	add	r2,r2,r2
   13ff0:	1085883a 	add	r2,r2,r2
   13ff4:	1887883a 	add	r3,r3,r2
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   14000:	e0ffff17 	ldw	r3,-4(fp)
   14004:	e0bffd17 	ldw	r2,-12(fp)
   14008:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1400c:	e0bffc03 	ldbu	r2,-16(fp)
   14010:	10800044 	addi	r2,r2,1
   14014:	e0bffc05 	stb	r2,-16(fp)
   14018:	e0bffc03 	ldbu	r2,-16(fp)
   1401c:	10800570 	cmpltui	r2,r2,21
   14020:	103fd91e 	bne	r2,zero,13f88 <__alt_mem_Flash_flash_data+0xf4013f88>
#endif
                }
            }
        }
    }
}
   14024:	e037883a 	mov	sp,fp
   14028:	dfc00117 	ldw	ra,4(sp)
   1402c:	df000017 	ldw	fp,0(sp)
   14030:	dec00204 	addi	sp,sp,8
   14034:	f800283a 	ret

00014038 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   14038:	defff204 	addi	sp,sp,-56
   1403c:	dfc00d15 	stw	ra,52(sp)
   14040:	df000c15 	stw	fp,48(sp)
   14044:	df000c04 	addi	fp,sp,48
   14048:	e17ffc15 	stw	r5,-16(fp)
   1404c:	e1bffd15 	stw	r6,-12(fp)
   14050:	3807883a 	mov	r3,r7
   14054:	e0800417 	ldw	r2,16(fp)
   14058:	e13ffb05 	stb	r4,-20(fp)
   1405c:	e0fffe0d 	sth	r3,-8(fp)
   14060:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14064:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14068:	0005303a 	rdctl	r2,status
   1406c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14070:	e0fff617 	ldw	r3,-40(fp)
   14074:	00bfff84 	movi	r2,-2
   14078:	1884703a 	and	r2,r3,r2
   1407c:	1001703a 	wrctl	status,r2
  
  return context;
   14080:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   14084:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   14088:	d0a8ea17 	ldw	r2,-23640(gp)
   1408c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   14090:	e0bff517 	ldw	r2,-44(fp)
   14094:	10009326 	beq	r2,zero,142e4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   14098:	e0bff517 	ldw	r2,-44(fp)
   1409c:	10800517 	ldw	r2,20(r2)
   140a0:	d0a8ea15 	stw	r2,-23640(gp)
   140a4:	e0bff417 	ldw	r2,-48(fp)
   140a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140ac:	e0bff717 	ldw	r2,-36(fp)
   140b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   140b4:	e0bff517 	ldw	r2,-44(fp)
   140b8:	e0fffc17 	ldw	r3,-16(fp)
   140bc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   140c0:	e0bff517 	ldw	r2,-44(fp)
   140c4:	e0fffb03 	ldbu	r3,-20(fp)
   140c8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   140cc:	e0bff517 	ldw	r2,-44(fp)
   140d0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   140d4:	e0bff517 	ldw	r2,-44(fp)
   140d8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   140dc:	e0bff517 	ldw	r2,-44(fp)
   140e0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   140e4:	e0bff517 	ldw	r2,-44(fp)
   140e8:	e0c00317 	ldw	r3,12(fp)
   140ec:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   140f0:	e0bff517 	ldw	r2,-44(fp)
   140f4:	e0c00217 	ldw	r3,8(fp)
   140f8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   140fc:	e0bff517 	ldw	r2,-44(fp)
   14100:	e0fffd17 	ldw	r3,-12(fp)
   14104:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   14108:	e0bff517 	ldw	r2,-44(fp)
   1410c:	e0ffff0b 	ldhu	r3,-4(fp)
   14110:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   14114:	e0bff517 	ldw	r2,-44(fp)
   14118:	e0fffe0b 	ldhu	r3,-8(fp)
   1411c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   14120:	e0bff517 	ldw	r2,-44(fp)
   14124:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   14128:	e0bffb03 	ldbu	r2,-20(fp)
   1412c:	1004d0fa 	srli	r2,r2,3
   14130:	1007883a 	mov	r3,r2
   14134:	e0bff517 	ldw	r2,-44(fp)
   14138:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1413c:	e0bffb03 	ldbu	r2,-20(fp)
   14140:	108001cc 	andi	r2,r2,7
   14144:	1007883a 	mov	r3,r2
   14148:	e0bff517 	ldw	r2,-44(fp)
   1414c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   14150:	e0bff517 	ldw	r2,-44(fp)
   14154:	10800d03 	ldbu	r2,52(r2)
   14158:	10803fcc 	andi	r2,r2,255
   1415c:	00c00044 	movi	r3,1
   14160:	1884983a 	sll	r2,r3,r2
   14164:	1007883a 	mov	r3,r2
   14168:	e0bff517 	ldw	r2,-44(fp)
   1416c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   14170:	e0bff517 	ldw	r2,-44(fp)
   14174:	10800cc3 	ldbu	r2,51(r2)
   14178:	10803fcc 	andi	r2,r2,255
   1417c:	00c00044 	movi	r3,1
   14180:	1884983a 	sll	r2,r3,r2
   14184:	1007883a 	mov	r3,r2
   14188:	e0bff517 	ldw	r2,-44(fp)
   1418c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   14190:	e0bff517 	ldw	r2,-44(fp)
   14194:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   14198:	e0bff517 	ldw	r2,-44(fp)
   1419c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   141a0:	e0bff517 	ldw	r2,-44(fp)
   141a4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   141a8:	e0bff517 	ldw	r2,-44(fp)
   141ac:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   141b0:	e0bff517 	ldw	r2,-44(fp)
   141b4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   141b8:	e0bff517 	ldw	r2,-44(fp)
   141bc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   141c0:	e0bff517 	ldw	r2,-44(fp)
   141c4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   141c8:	e0bff517 	ldw	r2,-44(fp)
   141cc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   141d0:	e0bff517 	ldw	r2,-44(fp)
   141d4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   141d8:	e0bff517 	ldw	r2,-44(fp)
   141dc:	00c00fc4 	movi	r3,63
   141e0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   141e4:	e0bff517 	ldw	r2,-44(fp)
   141e8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   141ec:	e13ff517 	ldw	r4,-44(fp)
   141f0:	001e6f80 	call	1e6f8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   141f4:	e13ff517 	ldw	r4,-44(fp)
   141f8:	001e6100 	call	1e610 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141fc:	0005303a 	rdctl	r2,status
   14200:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14204:	e0fff817 	ldw	r3,-32(fp)
   14208:	00bfff84 	movi	r2,-2
   1420c:	1884703a 	and	r2,r3,r2
   14210:	1001703a 	wrctl	status,r2
  
  return context;
   14214:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   14218:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1421c:	e0fffb03 	ldbu	r3,-20(fp)
   14220:	008000f4 	movhi	r2,3
   14224:	10846004 	addi	r2,r2,4480
   14228:	18c7883a 	add	r3,r3,r3
   1422c:	18c7883a 	add	r3,r3,r3
   14230:	10c5883a 	add	r2,r2,r3
   14234:	e0fff517 	ldw	r3,-44(fp)
   14238:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1423c:	d0e8e617 	ldw	r3,-23656(gp)
   14240:	e0bff517 	ldw	r2,-44(fp)
   14244:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   14248:	e0bff517 	ldw	r2,-44(fp)
   1424c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   14250:	d0a8e617 	ldw	r2,-23656(gp)
   14254:	10000326 	beq	r2,zero,14264 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   14258:	d0a8e617 	ldw	r2,-23656(gp)
   1425c:	e0fff517 	ldw	r3,-44(fp)
   14260:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   14264:	e0bff517 	ldw	r2,-44(fp)
   14268:	d0a8e615 	stw	r2,-23656(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1426c:	e0bff517 	ldw	r2,-44(fp)
   14270:	10c00d83 	ldbu	r3,54(r2)
   14274:	d0a8ef03 	ldbu	r2,-23620(gp)
   14278:	1884b03a 	or	r2,r3,r2
   1427c:	d0a8ef05 	stb	r2,-23620(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14280:	e0bff517 	ldw	r2,-44(fp)
   14284:	10800d03 	ldbu	r2,52(r2)
   14288:	10c03fcc 	andi	r3,r2,255
   1428c:	e0bff517 	ldw	r2,-44(fp)
   14290:	10800d03 	ldbu	r2,52(r2)
   14294:	11003fcc 	andi	r4,r2,255
   14298:	d0a8ef44 	addi	r2,gp,-23619
   1429c:	2085883a 	add	r2,r4,r2
   142a0:	11000003 	ldbu	r4,0(r2)
   142a4:	e0bff517 	ldw	r2,-44(fp)
   142a8:	10800d43 	ldbu	r2,53(r2)
   142ac:	2084b03a 	or	r2,r4,r2
   142b0:	1009883a 	mov	r4,r2
   142b4:	d0a8ef44 	addi	r2,gp,-23619
   142b8:	1885883a 	add	r2,r3,r2
   142bc:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   142c0:	d0a8eb43 	ldbu	r2,-23635(gp)
   142c4:	10800044 	addi	r2,r2,1
   142c8:	d0a8eb45 	stb	r2,-23635(gp)
   142cc:	e0bff417 	ldw	r2,-48(fp)
   142d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142d4:	e0bff917 	ldw	r2,-28(fp)
   142d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   142dc:	0005883a 	mov	r2,zero
   142e0:	00000506 	br	142f8 <OS_TCBInit+0x2c0>
   142e4:	e0bff417 	ldw	r2,-48(fp)
   142e8:	e0bffa15 	stw	r2,-24(fp)
   142ec:	e0bffa17 	ldw	r2,-24(fp)
   142f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   142f4:	00801084 	movi	r2,66
}
   142f8:	e037883a 	mov	sp,fp
   142fc:	dfc00117 	ldw	ra,4(sp)
   14300:	df000017 	ldw	fp,0(sp)
   14304:	dec00204 	addi	sp,sp,8
   14308:	f800283a 	ret

0001430c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1430c:	defffe04 	addi	sp,sp,-8
   14310:	df000115 	stw	fp,4(sp)
   14314:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   14318:	d0a01704 	addi	r2,gp,-32676
   1431c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   14320:	d0a01804 	addi	r2,gp,-32672
   14324:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   14328:	d0a01984 	addi	r2,gp,-32666
   1432c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   14330:	d0a01a04 	addi	r2,gp,-32664
   14334:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   14338:	d0a01904 	addi	r2,gp,-32668
   1433c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   14340:	d0a01a84 	addi	r2,gp,-32662
   14344:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   14348:	d0a01b04 	addi	r2,gp,-32660
   1434c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   14350:	d0a01b84 	addi	r2,gp,-32658
   14354:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   14358:	d0a01c04 	addi	r2,gp,-32656
   1435c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   14360:	d0a01c84 	addi	r2,gp,-32654
   14364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   14368:	d0a01d04 	addi	r2,gp,-32652
   1436c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   14370:	d0a01d84 	addi	r2,gp,-32650
   14374:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   14378:	d0a01e04 	addi	r2,gp,-32648
   1437c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   14380:	d0a01e84 	addi	r2,gp,-32646
   14384:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   14388:	d0a01f04 	addi	r2,gp,-32644
   1438c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   14390:	d0a01f84 	addi	r2,gp,-32642
   14394:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   14398:	d0a02004 	addi	r2,gp,-32640
   1439c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   143a0:	d0a02084 	addi	r2,gp,-32638
   143a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   143a8:	d0a02104 	addi	r2,gp,-32636
   143ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   143b0:	d0a02184 	addi	r2,gp,-32634
   143b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   143b8:	d0a02204 	addi	r2,gp,-32632
   143bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   143c0:	d0a02284 	addi	r2,gp,-32630
   143c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   143c8:	d0a02304 	addi	r2,gp,-32628
   143cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   143d0:	d0a02384 	addi	r2,gp,-32626
   143d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   143d8:	d0a02404 	addi	r2,gp,-32624
   143dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   143e0:	d0a02484 	addi	r2,gp,-32622
   143e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   143e8:	d0a02504 	addi	r2,gp,-32620
   143ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   143f0:	d0a02584 	addi	r2,gp,-32618
   143f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   143f8:	d0a02604 	addi	r2,gp,-32616
   143fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   14400:	d0a02684 	addi	r2,gp,-32614
   14404:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   14408:	d0a02704 	addi	r2,gp,-32612
   1440c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   14410:	d0a02784 	addi	r2,gp,-32610
   14414:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   14418:	d0a02804 	addi	r2,gp,-32608
   1441c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   14420:	d0a02884 	addi	r2,gp,-32606
   14424:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   14428:	d0a02904 	addi	r2,gp,-32604
   1442c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   14430:	d0a02984 	addi	r2,gp,-32602
   14434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   14438:	d0a02a04 	addi	r2,gp,-32600
   1443c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   14440:	d0a02a84 	addi	r2,gp,-32598
   14444:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   14448:	d0a02b04 	addi	r2,gp,-32596
   1444c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   14450:	d0a02b84 	addi	r2,gp,-32594
   14454:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   14458:	d0a02c04 	addi	r2,gp,-32592
   1445c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   14460:	d0a02c84 	addi	r2,gp,-32590
   14464:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   14468:	d0a02d04 	addi	r2,gp,-32588
   1446c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   14470:	d0a02d84 	addi	r2,gp,-32586
   14474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   14478:	d0a02e04 	addi	r2,gp,-32584
   1447c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   14480:	d0a03304 	addi	r2,gp,-32564
   14484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   14488:	e037883a 	mov	sp,fp
   1448c:	df000017 	ldw	fp,0(sp)
   14490:	dec00104 	addi	sp,sp,4
   14494:	f800283a 	ret

00014498 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   14498:	defff204 	addi	sp,sp,-56
   1449c:	df000d15 	stw	fp,52(sp)
   144a0:	df000d04 	addi	fp,sp,52
   144a4:	e13ffc15 	stw	r4,-16(fp)
   144a8:	2807883a 	mov	r3,r5
   144ac:	3005883a 	mov	r2,r6
   144b0:	e1ffff15 	stw	r7,-4(fp)
   144b4:	e0fffd0d 	sth	r3,-12(fp)
   144b8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   144bc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   144c0:	e0bfff17 	ldw	r2,-4(fp)
   144c4:	1000021e 	bne	r2,zero,144d0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   144c8:	0005883a 	mov	r2,zero
   144cc:	0000b006 	br	14790 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	1000051e 	bne	r2,zero,144ec <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   144d8:	e0bfff17 	ldw	r2,-4(fp)
   144dc:	00c01b84 	movi	r3,110
   144e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   144e4:	0005883a 	mov	r2,zero
   144e8:	0000a906 	br	14790 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	10800003 	ldbu	r2,0(r2)
   144f4:	10803fcc 	andi	r2,r2,255
   144f8:	10800160 	cmpeqi	r2,r2,5
   144fc:	1000051e 	bne	r2,zero,14514 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   14500:	e0bfff17 	ldw	r2,-4(fp)
   14504:	00c00044 	movi	r3,1
   14508:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1450c:	0005883a 	mov	r2,zero
   14510:	00009f06 	br	14790 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   14514:	e0fffe03 	ldbu	r3,-8(fp)
   14518:	00bfe004 	movi	r2,-128
   1451c:	1884703a 	and	r2,r3,r2
   14520:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   14524:	e0bff503 	ldbu	r2,-44(fp)
   14528:	10000626 	beq	r2,zero,14544 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1452c:	e0bffe03 	ldbu	r2,-8(fp)
   14530:	10801fcc 	andi	r2,r2,127
   14534:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   14538:	00800044 	movi	r2,1
   1453c:	e0bff385 	stb	r2,-50(fp)
   14540:	00000106 	br	14548 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   14544:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   14548:	e0bfff17 	ldw	r2,-4(fp)
   1454c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14550:	0005303a 	rdctl	r2,status
   14554:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14558:	e0fff617 	ldw	r3,-40(fp)
   1455c:	00bfff84 	movi	r2,-2
   14560:	1884703a 	and	r2,r3,r2
   14564:	1001703a 	wrctl	status,r2
  
  return context;
   14568:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   1456c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   14570:	e0bffe03 	ldbu	r2,-8(fp)
   14574:	10c00060 	cmpeqi	r3,r2,1
   14578:	18005f1e 	bne	r3,zero,146f8 <OSFlagAccept+0x260>
   1457c:	10c00088 	cmpgei	r3,r2,2
   14580:	1800021e 	bne	r3,zero,1458c <OSFlagAccept+0xf4>
   14584:	10003f26 	beq	r2,zero,14684 <OSFlagAccept+0x1ec>
   14588:	00007706 	br	14768 <OSFlagAccept+0x2d0>
   1458c:	10c000a0 	cmpeqi	r3,r2,2
   14590:	1800031e 	bne	r3,zero,145a0 <OSFlagAccept+0x108>
   14594:	108000e0 	cmpeqi	r2,r2,3
   14598:	10001e1e 	bne	r2,zero,14614 <OSFlagAccept+0x17c>
   1459c:	00007206 	br	14768 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   145a0:	e0bffc17 	ldw	r2,-16(fp)
   145a4:	10c0020b 	ldhu	r3,8(r2)
   145a8:	e0bffd0b 	ldhu	r2,-12(fp)
   145ac:	1884703a 	and	r2,r3,r2
   145b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   145b4:	e0fff30b 	ldhu	r3,-52(fp)
   145b8:	e0bffd0b 	ldhu	r2,-12(fp)
   145bc:	18800d1e 	bne	r3,r2,145f4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   145c0:	e0bff383 	ldbu	r2,-50(fp)
   145c4:	10800058 	cmpnei	r2,r2,1
   145c8:	10000d1e 	bne	r2,zero,14600 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   145cc:	e0bffc17 	ldw	r2,-16(fp)
   145d0:	1080020b 	ldhu	r2,8(r2)
   145d4:	1007883a 	mov	r3,r2
   145d8:	e0bff30b 	ldhu	r2,-52(fp)
   145dc:	0084303a 	nor	r2,zero,r2
   145e0:	1884703a 	and	r2,r3,r2
   145e4:	1007883a 	mov	r3,r2
   145e8:	e0bffc17 	ldw	r2,-16(fp)
   145ec:	10c0020d 	sth	r3,8(r2)
   145f0:	00000306 	br	14600 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   145f4:	e0bfff17 	ldw	r2,-4(fp)
   145f8:	00c01c04 	movi	r3,112
   145fc:	10c00005 	stb	r3,0(r2)
   14600:	e0bff417 	ldw	r2,-48(fp)
   14604:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14608:	e0bff717 	ldw	r2,-36(fp)
   1460c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14610:	00005e06 	br	1478c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   14614:	e0bffc17 	ldw	r2,-16(fp)
   14618:	10c0020b 	ldhu	r3,8(r2)
   1461c:	e0bffd0b 	ldhu	r2,-12(fp)
   14620:	1884703a 	and	r2,r3,r2
   14624:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   14628:	e0bff30b 	ldhu	r2,-52(fp)
   1462c:	10000d26 	beq	r2,zero,14664 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14630:	e0bff383 	ldbu	r2,-50(fp)
   14634:	10800058 	cmpnei	r2,r2,1
   14638:	10000d1e 	bne	r2,zero,14670 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1463c:	e0bffc17 	ldw	r2,-16(fp)
   14640:	1080020b 	ldhu	r2,8(r2)
   14644:	1007883a 	mov	r3,r2
   14648:	e0bff30b 	ldhu	r2,-52(fp)
   1464c:	0084303a 	nor	r2,zero,r2
   14650:	1884703a 	and	r2,r3,r2
   14654:	1007883a 	mov	r3,r2
   14658:	e0bffc17 	ldw	r2,-16(fp)
   1465c:	10c0020d 	sth	r3,8(r2)
   14660:	00000306 	br	14670 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14664:	e0bfff17 	ldw	r2,-4(fp)
   14668:	00c01c04 	movi	r3,112
   1466c:	10c00005 	stb	r3,0(r2)
   14670:	e0bff417 	ldw	r2,-48(fp)
   14674:	e0bff815 	stw	r2,-32(fp)
   14678:	e0bff817 	ldw	r2,-32(fp)
   1467c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14680:	00004206 	br	1478c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   14684:	e0bffc17 	ldw	r2,-16(fp)
   14688:	1080020b 	ldhu	r2,8(r2)
   1468c:	0084303a 	nor	r2,zero,r2
   14690:	1007883a 	mov	r3,r2
   14694:	e0bffd0b 	ldhu	r2,-12(fp)
   14698:	1884703a 	and	r2,r3,r2
   1469c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   146a0:	e0fff30b 	ldhu	r3,-52(fp)
   146a4:	e0bffd0b 	ldhu	r2,-12(fp)
   146a8:	18800b1e 	bne	r3,r2,146d8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   146ac:	e0bff383 	ldbu	r2,-50(fp)
   146b0:	10800058 	cmpnei	r2,r2,1
   146b4:	10000b1e 	bne	r2,zero,146e4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   146b8:	e0bffc17 	ldw	r2,-16(fp)
   146bc:	10c0020b 	ldhu	r3,8(r2)
   146c0:	e0bff30b 	ldhu	r2,-52(fp)
   146c4:	1884b03a 	or	r2,r3,r2
   146c8:	1007883a 	mov	r3,r2
   146cc:	e0bffc17 	ldw	r2,-16(fp)
   146d0:	10c0020d 	sth	r3,8(r2)
   146d4:	00000306 	br	146e4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   146d8:	e0bfff17 	ldw	r2,-4(fp)
   146dc:	00c01c04 	movi	r3,112
   146e0:	10c00005 	stb	r3,0(r2)
   146e4:	e0bff417 	ldw	r2,-48(fp)
   146e8:	e0bff915 	stw	r2,-28(fp)
   146ec:	e0bff917 	ldw	r2,-28(fp)
   146f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   146f4:	00002506 	br	1478c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   146f8:	e0bffc17 	ldw	r2,-16(fp)
   146fc:	1080020b 	ldhu	r2,8(r2)
   14700:	0084303a 	nor	r2,zero,r2
   14704:	1007883a 	mov	r3,r2
   14708:	e0bffd0b 	ldhu	r2,-12(fp)
   1470c:	1884703a 	and	r2,r3,r2
   14710:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   14714:	e0bff30b 	ldhu	r2,-52(fp)
   14718:	10000b26 	beq	r2,zero,14748 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1471c:	e0bff383 	ldbu	r2,-50(fp)
   14720:	10800058 	cmpnei	r2,r2,1
   14724:	10000b1e 	bne	r2,zero,14754 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   14728:	e0bffc17 	ldw	r2,-16(fp)
   1472c:	10c0020b 	ldhu	r3,8(r2)
   14730:	e0bff30b 	ldhu	r2,-52(fp)
   14734:	1884b03a 	or	r2,r3,r2
   14738:	1007883a 	mov	r3,r2
   1473c:	e0bffc17 	ldw	r2,-16(fp)
   14740:	10c0020d 	sth	r3,8(r2)
   14744:	00000306 	br	14754 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14748:	e0bfff17 	ldw	r2,-4(fp)
   1474c:	00c01c04 	movi	r3,112
   14750:	10c00005 	stb	r3,0(r2)
   14754:	e0bff417 	ldw	r2,-48(fp)
   14758:	e0bffa15 	stw	r2,-24(fp)
   1475c:	e0bffa17 	ldw	r2,-24(fp)
   14760:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14764:	00000906 	br	1478c <OSFlagAccept+0x2f4>
   14768:	e0bff417 	ldw	r2,-48(fp)
   1476c:	e0bffb15 	stw	r2,-20(fp)
   14770:	e0bffb17 	ldw	r2,-20(fp)
   14774:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   14778:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1477c:	e0bfff17 	ldw	r2,-4(fp)
   14780:	00c01bc4 	movi	r3,111
   14784:	10c00005 	stb	r3,0(r2)
             break;
   14788:	0001883a 	nop
    }
    return (flags_rdy);
   1478c:	e0bff30b 	ldhu	r2,-52(fp)
}
   14790:	e037883a 	mov	sp,fp
   14794:	df000017 	ldw	fp,0(sp)
   14798:	dec00104 	addi	sp,sp,4
   1479c:	f800283a 	ret

000147a0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   147a0:	defff804 	addi	sp,sp,-32
   147a4:	df000715 	stw	fp,28(sp)
   147a8:	df000704 	addi	fp,sp,28
   147ac:	2005883a 	mov	r2,r4
   147b0:	e17fff15 	stw	r5,-4(fp)
   147b4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   147b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   147bc:	e0bfff17 	ldw	r2,-4(fp)
   147c0:	1000021e 	bne	r2,zero,147cc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   147c4:	0005883a 	mov	r2,zero
   147c8:	00003b06 	br	148b8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   147cc:	008000b4 	movhi	r2,2
   147d0:	108f6604 	addi	r2,r2,15768
   147d4:	10800003 	ldbu	r2,0(r2)
   147d8:	10803fcc 	andi	r2,r2,255
   147dc:	10000526 	beq	r2,zero,147f4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   147e0:	e0bfff17 	ldw	r2,-4(fp)
   147e4:	00c00404 	movi	r3,16
   147e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   147ec:	0005883a 	mov	r2,zero
   147f0:	00003106 	br	148b8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147f4:	0005303a 	rdctl	r2,status
   147f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147fc:	e0fffb17 	ldw	r3,-20(fp)
   14800:	00bfff84 	movi	r2,-2
   14804:	1884703a 	and	r2,r3,r2
   14808:	1001703a 	wrctl	status,r2
  
  return context;
   1480c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14810:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   14814:	008000b4 	movhi	r2,2
   14818:	108f6904 	addi	r2,r2,15780
   1481c:	10800017 	ldw	r2,0(r2)
   14820:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   14824:	e0bffa17 	ldw	r2,-24(fp)
   14828:	10001b26 	beq	r2,zero,14898 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1482c:	008000b4 	movhi	r2,2
   14830:	108f6904 	addi	r2,r2,15780
   14834:	10800017 	ldw	r2,0(r2)
   14838:	10c00117 	ldw	r3,4(r2)
   1483c:	008000b4 	movhi	r2,2
   14840:	108f6904 	addi	r2,r2,15780
   14844:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   14848:	e0bffa17 	ldw	r2,-24(fp)
   1484c:	00c00144 	movi	r3,5
   14850:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   14854:	e0bffa17 	ldw	r2,-24(fp)
   14858:	e0fffe0b 	ldhu	r3,-8(fp)
   1485c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   14860:	e0bffa17 	ldw	r2,-24(fp)
   14864:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   14868:	e0bffa17 	ldw	r2,-24(fp)
   1486c:	00c00fc4 	movi	r3,63
   14870:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14874:	e0bffa17 	ldw	r2,-24(fp)
   14878:	100002c5 	stb	zero,11(r2)
   1487c:	e0bff917 	ldw	r2,-28(fp)
   14880:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14884:	e0bffc17 	ldw	r2,-16(fp)
   14888:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1488c:	e0bfff17 	ldw	r2,-4(fp)
   14890:	10000005 	stb	zero,0(r2)
   14894:	00000706 	br	148b4 <OSFlagCreate+0x114>
   14898:	e0bff917 	ldw	r2,-28(fp)
   1489c:	e0bffd15 	stw	r2,-12(fp)
   148a0:	e0bffd17 	ldw	r2,-12(fp)
   148a4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   148a8:	e0bfff17 	ldw	r2,-4(fp)
   148ac:	00c01c84 	movi	r3,114
   148b0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   148b4:	e0bffa17 	ldw	r2,-24(fp)
}
   148b8:	e037883a 	mov	sp,fp
   148bc:	df000017 	ldw	fp,0(sp)
   148c0:	dec00104 	addi	sp,sp,4
   148c4:	f800283a 	ret

000148c8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   148c8:	defff204 	addi	sp,sp,-56
   148cc:	dfc00d15 	stw	ra,52(sp)
   148d0:	df000c15 	stw	fp,48(sp)
   148d4:	df000c04 	addi	fp,sp,48
   148d8:	e13ffd15 	stw	r4,-12(fp)
   148dc:	2805883a 	mov	r2,r5
   148e0:	e1bfff15 	stw	r6,-4(fp)
   148e4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   148e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   148ec:	e0bfff17 	ldw	r2,-4(fp)
   148f0:	1000021e 	bne	r2,zero,148fc <OSFlagDel+0x34>
        return (pgrp);
   148f4:	e0bffd17 	ldw	r2,-12(fp)
   148f8:	00008a06 	br	14b24 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   148fc:	e0bffd17 	ldw	r2,-12(fp)
   14900:	1000051e 	bne	r2,zero,14918 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14904:	e0bfff17 	ldw	r2,-4(fp)
   14908:	00c01b84 	movi	r3,110
   1490c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14910:	e0bffd17 	ldw	r2,-12(fp)
   14914:	00008306 	br	14b24 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14918:	008000b4 	movhi	r2,2
   1491c:	108f6604 	addi	r2,r2,15768
   14920:	10800003 	ldbu	r2,0(r2)
   14924:	10803fcc 	andi	r2,r2,255
   14928:	10000526 	beq	r2,zero,14940 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1492c:	e0bfff17 	ldw	r2,-4(fp)
   14930:	00c003c4 	movi	r3,15
   14934:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14938:	e0bffd17 	ldw	r2,-12(fp)
   1493c:	00007906 	br	14b24 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   14940:	e0bffd17 	ldw	r2,-12(fp)
   14944:	10800003 	ldbu	r2,0(r2)
   14948:	10803fcc 	andi	r2,r2,255
   1494c:	10800160 	cmpeqi	r2,r2,5
   14950:	1000051e 	bne	r2,zero,14968 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   14954:	e0bfff17 	ldw	r2,-4(fp)
   14958:	00c00044 	movi	r3,1
   1495c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14960:	e0bffd17 	ldw	r2,-12(fp)
   14964:	00006f06 	br	14b24 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14968:	0005303a 	rdctl	r2,status
   1496c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14970:	e0fff817 	ldw	r3,-32(fp)
   14974:	00bfff84 	movi	r2,-2
   14978:	1884703a 	and	r2,r3,r2
   1497c:	1001703a 	wrctl	status,r2
  
  return context;
   14980:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14984:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   14988:	e0bffd17 	ldw	r2,-12(fp)
   1498c:	10800117 	ldw	r2,4(r2)
   14990:	10000326 	beq	r2,zero,149a0 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14994:	00800044 	movi	r2,1
   14998:	e0bff405 	stb	r2,-48(fp)
   1499c:	00000106 	br	149a4 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   149a0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   149a4:	e0bffe03 	ldbu	r2,-8(fp)
   149a8:	10000326 	beq	r2,zero,149b8 <OSFlagDel+0xf0>
   149ac:	10800060 	cmpeqi	r2,r2,1
   149b0:	1000271e 	bne	r2,zero,14a50 <OSFlagDel+0x188>
   149b4:	00005006 	br	14af8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   149b8:	e0bff403 	ldbu	r2,-48(fp)
   149bc:	10001a1e 	bne	r2,zero,14a28 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   149c0:	e0bffd17 	ldw	r2,-12(fp)
   149c4:	00c00fc4 	movi	r3,63
   149c8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   149cc:	e0bffd17 	ldw	r2,-12(fp)
   149d0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   149d4:	e0bffd17 	ldw	r2,-12(fp)
   149d8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   149dc:	008000b4 	movhi	r2,2
   149e0:	108f6904 	addi	r2,r2,15780
   149e4:	10c00017 	ldw	r3,0(r2)
   149e8:	e0bffd17 	ldw	r2,-12(fp)
   149ec:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   149f0:	e0bffd17 	ldw	r2,-12(fp)
   149f4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   149f8:	008000b4 	movhi	r2,2
   149fc:	108f6904 	addi	r2,r2,15780
   14a00:	e0fffd17 	ldw	r3,-12(fp)
   14a04:	10c00015 	stw	r3,0(r2)
   14a08:	e0bff717 	ldw	r2,-36(fp)
   14a0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a10:	e0bff917 	ldw	r2,-28(fp)
   14a14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   14a18:	e0bfff17 	ldw	r2,-4(fp)
   14a1c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   14a20:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   14a24:	00003e06 	br	14b20 <OSFlagDel+0x258>
   14a28:	e0bff717 	ldw	r2,-36(fp)
   14a2c:	e0bffa15 	stw	r2,-24(fp)
   14a30:	e0bffa17 	ldw	r2,-24(fp)
   14a34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   14a38:	e0bfff17 	ldw	r2,-4(fp)
   14a3c:	00c01244 	movi	r3,73
   14a40:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   14a44:	e0bffd17 	ldw	r2,-12(fp)
   14a48:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   14a4c:	00003406 	br	14b20 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   14a50:	e0bffd17 	ldw	r2,-12(fp)
   14a54:	10800117 	ldw	r2,4(r2)
   14a58:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   14a5c:	00000606 	br	14a78 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   14a60:	e13ff517 	ldw	r4,-44(fp)
   14a64:	000b883a 	mov	r5,zero
   14a68:	0015b040 	call	15b04 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   14a6c:	e0bff517 	ldw	r2,-44(fp)
   14a70:	10800017 	ldw	r2,0(r2)
   14a74:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   14a78:	e0bff517 	ldw	r2,-44(fp)
   14a7c:	103ff81e 	bne	r2,zero,14a60 <__alt_mem_Flash_flash_data+0xf4014a60>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   14a80:	e0bffd17 	ldw	r2,-12(fp)
   14a84:	00c00fc4 	movi	r3,63
   14a88:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14a8c:	e0bffd17 	ldw	r2,-12(fp)
   14a90:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14a94:	e0bffd17 	ldw	r2,-12(fp)
   14a98:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   14a9c:	008000b4 	movhi	r2,2
   14aa0:	108f6904 	addi	r2,r2,15780
   14aa4:	10c00017 	ldw	r3,0(r2)
   14aa8:	e0bffd17 	ldw	r2,-12(fp)
   14aac:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   14ab0:	e0bffd17 	ldw	r2,-12(fp)
   14ab4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   14ab8:	008000b4 	movhi	r2,2
   14abc:	108f6904 	addi	r2,r2,15780
   14ac0:	e0fffd17 	ldw	r3,-12(fp)
   14ac4:	10c00015 	stw	r3,0(r2)
   14ac8:	e0bff717 	ldw	r2,-36(fp)
   14acc:	e0bffb15 	stw	r2,-20(fp)
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14ad8:	e0bff403 	ldbu	r2,-48(fp)
   14adc:	10800058 	cmpnei	r2,r2,1
   14ae0:	1000011e 	bne	r2,zero,14ae8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14ae4:	0013c340 	call	13c34 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   14ae8:	e0bfff17 	ldw	r2,-4(fp)
   14aec:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   14af0:	e03ff615 	stw	zero,-40(fp)
             break;
   14af4:	00000a06 	br	14b20 <OSFlagDel+0x258>
   14af8:	e0bff717 	ldw	r2,-36(fp)
   14afc:	e0bffc15 	stw	r2,-16(fp)
   14b00:	e0bffc17 	ldw	r2,-16(fp)
   14b04:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   14b08:	e0bfff17 	ldw	r2,-4(fp)
   14b0c:	00c001c4 	movi	r3,7
   14b10:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   14b14:	e0bffd17 	ldw	r2,-12(fp)
   14b18:	e0bff615 	stw	r2,-40(fp)
             break;
   14b1c:	0001883a 	nop
    }
    return (pgrp_return);
   14b20:	e0bff617 	ldw	r2,-40(fp)
}
   14b24:	e037883a 	mov	sp,fp
   14b28:	dfc00117 	ldw	ra,4(sp)
   14b2c:	df000017 	ldw	fp,0(sp)
   14b30:	dec00204 	addi	sp,sp,8
   14b34:	f800283a 	ret

00014b38 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   14b38:	defff604 	addi	sp,sp,-40
   14b3c:	dfc00915 	stw	ra,36(sp)
   14b40:	df000815 	stw	fp,32(sp)
   14b44:	df000804 	addi	fp,sp,32
   14b48:	e13ffd15 	stw	r4,-12(fp)
   14b4c:	e17ffe15 	stw	r5,-8(fp)
   14b50:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14b54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14b58:	e0bfff17 	ldw	r2,-4(fp)
   14b5c:	1000021e 	bne	r2,zero,14b68 <OSFlagNameGet+0x30>
        return (0);
   14b60:	0005883a 	mov	r2,zero
   14b64:	00003b06 	br	14c54 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   14b68:	e0bffd17 	ldw	r2,-12(fp)
   14b6c:	1000051e 	bne	r2,zero,14b84 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14b70:	e0bfff17 	ldw	r2,-4(fp)
   14b74:	00c01b84 	movi	r3,110
   14b78:	10c00005 	stb	r3,0(r2)
        return (0);
   14b7c:	0005883a 	mov	r2,zero
   14b80:	00003406 	br	14c54 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14b84:	e0bffe17 	ldw	r2,-8(fp)
   14b88:	1000051e 	bne	r2,zero,14ba0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14b8c:	e0bfff17 	ldw	r2,-4(fp)
   14b90:	00c00304 	movi	r3,12
   14b94:	10c00005 	stb	r3,0(r2)
        return (0);
   14b98:	0005883a 	mov	r2,zero
   14b9c:	00002d06 	br	14c54 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14ba0:	008000b4 	movhi	r2,2
   14ba4:	108f6604 	addi	r2,r2,15768
   14ba8:	10800003 	ldbu	r2,0(r2)
   14bac:	10803fcc 	andi	r2,r2,255
   14bb0:	10000526 	beq	r2,zero,14bc8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   14bb4:	e0bfff17 	ldw	r2,-4(fp)
   14bb8:	00c00444 	movi	r3,17
   14bbc:	10c00005 	stb	r3,0(r2)
        return (0);
   14bc0:	0005883a 	mov	r2,zero
   14bc4:	00002306 	br	14c54 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14bc8:	0005303a 	rdctl	r2,status
   14bcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14bd0:	e0fffa17 	ldw	r3,-24(fp)
   14bd4:	00bfff84 	movi	r2,-2
   14bd8:	1884703a 	and	r2,r3,r2
   14bdc:	1001703a 	wrctl	status,r2
  
  return context;
   14be0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14be4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   14be8:	e0bffd17 	ldw	r2,-12(fp)
   14bec:	10800003 	ldbu	r2,0(r2)
   14bf0:	10803fcc 	andi	r2,r2,255
   14bf4:	10800160 	cmpeqi	r2,r2,5
   14bf8:	1000091e 	bne	r2,zero,14c20 <OSFlagNameGet+0xe8>
   14bfc:	e0bff817 	ldw	r2,-32(fp)
   14c00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c04:	e0bffb17 	ldw	r2,-20(fp)
   14c08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	00c00044 	movi	r3,1
   14c14:	10c00005 	stb	r3,0(r2)
        return (0);
   14c18:	0005883a 	mov	r2,zero
   14c1c:	00000d06 	br	14c54 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   14c20:	e0bffd17 	ldw	r2,-12(fp)
   14c24:	10800284 	addi	r2,r2,10
   14c28:	e13ffe17 	ldw	r4,-8(fp)
   14c2c:	100b883a 	mov	r5,r2
   14c30:	0013d700 	call	13d70 <OS_StrCopy>
   14c34:	e0bff905 	stb	r2,-28(fp)
   14c38:	e0bff817 	ldw	r2,-32(fp)
   14c3c:	e0bffc15 	stw	r2,-16(fp)
   14c40:	e0bffc17 	ldw	r2,-16(fp)
   14c44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	10000005 	stb	zero,0(r2)
    return (len);
   14c50:	e0bff903 	ldbu	r2,-28(fp)
}
   14c54:	e037883a 	mov	sp,fp
   14c58:	dfc00117 	ldw	ra,4(sp)
   14c5c:	df000017 	ldw	fp,0(sp)
   14c60:	dec00204 	addi	sp,sp,8
   14c64:	f800283a 	ret

00014c68 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   14c68:	defff504 	addi	sp,sp,-44
   14c6c:	dfc00a15 	stw	ra,40(sp)
   14c70:	df000915 	stw	fp,36(sp)
   14c74:	df000904 	addi	fp,sp,36
   14c78:	e13ffd15 	stw	r4,-12(fp)
   14c7c:	e17ffe15 	stw	r5,-8(fp)
   14c80:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14c88:	e0bfff17 	ldw	r2,-4(fp)
   14c8c:	1000011e 	bne	r2,zero,14c94 <OSFlagNameSet+0x2c>
        return;
   14c90:	00004406 	br	14da4 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   14c94:	e0bffd17 	ldw	r2,-12(fp)
   14c98:	1000041e 	bne	r2,zero,14cac <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14c9c:	e0bfff17 	ldw	r2,-4(fp)
   14ca0:	00c01b84 	movi	r3,110
   14ca4:	10c00005 	stb	r3,0(r2)
        return;
   14ca8:	00003e06 	br	14da4 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14cac:	e0bffe17 	ldw	r2,-8(fp)
   14cb0:	1000041e 	bne	r2,zero,14cc4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14cb4:	e0bfff17 	ldw	r2,-4(fp)
   14cb8:	00c00304 	movi	r3,12
   14cbc:	10c00005 	stb	r3,0(r2)
        return;
   14cc0:	00003806 	br	14da4 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14cc4:	008000b4 	movhi	r2,2
   14cc8:	108f6604 	addi	r2,r2,15768
   14ccc:	10800003 	ldbu	r2,0(r2)
   14cd0:	10803fcc 	andi	r2,r2,255
   14cd4:	10000426 	beq	r2,zero,14ce8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14cd8:	e0bfff17 	ldw	r2,-4(fp)
   14cdc:	00c00484 	movi	r3,18
   14ce0:	10c00005 	stb	r3,0(r2)
        return;
   14ce4:	00002f06 	br	14da4 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ce8:	0005303a 	rdctl	r2,status
   14cec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cf0:	e0fff917 	ldw	r3,-28(fp)
   14cf4:	00bfff84 	movi	r2,-2
   14cf8:	1884703a 	and	r2,r3,r2
   14cfc:	1001703a 	wrctl	status,r2
  
  return context;
   14d00:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14d04:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   14d08:	e0bffd17 	ldw	r2,-12(fp)
   14d0c:	10800003 	ldbu	r2,0(r2)
   14d10:	10803fcc 	andi	r2,r2,255
   14d14:	10800160 	cmpeqi	r2,r2,5
   14d18:	1000081e 	bne	r2,zero,14d3c <OSFlagNameSet+0xd4>
   14d1c:	e0bff717 	ldw	r2,-36(fp)
   14d20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d24:	e0bffa17 	ldw	r2,-24(fp)
   14d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   14d2c:	e0bfff17 	ldw	r2,-4(fp)
   14d30:	00c00044 	movi	r3,1
   14d34:	10c00005 	stb	r3,0(r2)
        return;
   14d38:	00001a06 	br	14da4 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   14d3c:	e13ffe17 	ldw	r4,-8(fp)
   14d40:	0013de40 	call	13de4 <OS_StrLen>
   14d44:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   14d48:	e0bff803 	ldbu	r2,-32(fp)
   14d4c:	10800830 	cmpltui	r2,r2,32
   14d50:	1000081e 	bne	r2,zero,14d74 <OSFlagNameSet+0x10c>
   14d54:	e0bff717 	ldw	r2,-36(fp)
   14d58:	e0bffb15 	stw	r2,-20(fp)
   14d5c:	e0bffb17 	ldw	r2,-20(fp)
   14d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   14d64:	e0bfff17 	ldw	r2,-4(fp)
   14d68:	00c01cc4 	movi	r3,115
   14d6c:	10c00005 	stb	r3,0(r2)
        return;
   14d70:	00000c06 	br	14da4 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   14d74:	e0bffd17 	ldw	r2,-12(fp)
   14d78:	10800284 	addi	r2,r2,10
   14d7c:	1009883a 	mov	r4,r2
   14d80:	e17ffe17 	ldw	r5,-8(fp)
   14d84:	0013d700 	call	13d70 <OS_StrCopy>
   14d88:	e0bff717 	ldw	r2,-36(fp)
   14d8c:	e0bffc15 	stw	r2,-16(fp)
   14d90:	e0bffc17 	ldw	r2,-16(fp)
   14d94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14d98:	e0bfff17 	ldw	r2,-4(fp)
   14d9c:	10000005 	stb	zero,0(r2)
    return;
   14da0:	0001883a 	nop
}
   14da4:	e037883a 	mov	sp,fp
   14da8:	dfc00117 	ldw	ra,4(sp)
   14dac:	df000017 	ldw	fp,0(sp)
   14db0:	dec00204 	addi	sp,sp,8
   14db4:	f800283a 	ret

00014db8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   14db8:	deffe204 	addi	sp,sp,-120
   14dbc:	dfc01d15 	stw	ra,116(sp)
   14dc0:	df001c15 	stw	fp,112(sp)
   14dc4:	df001c04 	addi	fp,sp,112
   14dc8:	e13ffc15 	stw	r4,-16(fp)
   14dcc:	2809883a 	mov	r4,r5
   14dd0:	3007883a 	mov	r3,r6
   14dd4:	3805883a 	mov	r2,r7
   14dd8:	e13ffd0d 	sth	r4,-12(fp)
   14ddc:	e0fffe05 	stb	r3,-8(fp)
   14de0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14de4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14de8:	e0800217 	ldw	r2,8(fp)
   14dec:	1000021e 	bne	r2,zero,14df8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   14df0:	0005883a 	mov	r2,zero
   14df4:	00016706 	br	15394 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   14df8:	e0bffc17 	ldw	r2,-16(fp)
   14dfc:	1000051e 	bne	r2,zero,14e14 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14e00:	e0800217 	ldw	r2,8(fp)
   14e04:	00c01b84 	movi	r3,110
   14e08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14e0c:	0005883a 	mov	r2,zero
   14e10:	00016006 	br	15394 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14e14:	008000b4 	movhi	r2,2
   14e18:	108f6604 	addi	r2,r2,15768
   14e1c:	10800003 	ldbu	r2,0(r2)
   14e20:	10803fcc 	andi	r2,r2,255
   14e24:	10000526 	beq	r2,zero,14e3c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   14e28:	e0800217 	ldw	r2,8(fp)
   14e2c:	00c00084 	movi	r3,2
   14e30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14e34:	0005883a 	mov	r2,zero
   14e38:	00015606 	br	15394 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   14e3c:	008000b4 	movhi	r2,2
   14e40:	108f5804 	addi	r2,r2,15712
   14e44:	10800003 	ldbu	r2,0(r2)
   14e48:	10803fcc 	andi	r2,r2,255
   14e4c:	10000526 	beq	r2,zero,14e64 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   14e50:	e0800217 	ldw	r2,8(fp)
   14e54:	00c00344 	movi	r3,13
   14e58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14e5c:	0005883a 	mov	r2,zero
   14e60:	00014c06 	br	15394 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   14e64:	e0bffc17 	ldw	r2,-16(fp)
   14e68:	10800003 	ldbu	r2,0(r2)
   14e6c:	10803fcc 	andi	r2,r2,255
   14e70:	10800160 	cmpeqi	r2,r2,5
   14e74:	1000051e 	bne	r2,zero,14e8c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   14e78:	e0800217 	ldw	r2,8(fp)
   14e7c:	00c00044 	movi	r3,1
   14e80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14e84:	0005883a 	mov	r2,zero
   14e88:	00014206 	br	15394 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   14e8c:	e0fffe03 	ldbu	r3,-8(fp)
   14e90:	00bfe004 	movi	r2,-128
   14e94:	1884703a 	and	r2,r3,r2
   14e98:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   14e9c:	e0bfe703 	ldbu	r2,-100(fp)
   14ea0:	10000626 	beq	r2,zero,14ebc <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   14ea4:	e0bffe03 	ldbu	r2,-8(fp)
   14ea8:	10801fcc 	andi	r2,r2,127
   14eac:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   14eb0:	00800044 	movi	r2,1
   14eb4:	e0bfe505 	stb	r2,-108(fp)
   14eb8:	00000106 	br	14ec0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   14ebc:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ec0:	0005303a 	rdctl	r2,status
   14ec4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ec8:	e0ffe917 	ldw	r3,-92(fp)
   14ecc:	00bfff84 	movi	r2,-2
   14ed0:	1884703a 	and	r2,r3,r2
   14ed4:	1001703a 	wrctl	status,r2
  
  return context;
   14ed8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   14edc:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   14ee0:	e0bffe03 	ldbu	r2,-8(fp)
   14ee4:	10c00060 	cmpeqi	r3,r2,1
   14ee8:	1800921e 	bne	r3,zero,15134 <OSFlagPend+0x37c>
   14eec:	10c00088 	cmpgei	r3,r2,2
   14ef0:	1800021e 	bne	r3,zero,14efc <OSFlagPend+0x144>
   14ef4:	10006126 	beq	r2,zero,1507c <OSFlagPend+0x2c4>
   14ef8:	0000bb06 	br	151e8 <OSFlagPend+0x430>
   14efc:	10c000a0 	cmpeqi	r3,r2,2
   14f00:	1800031e 	bne	r3,zero,14f10 <OSFlagPend+0x158>
   14f04:	108000e0 	cmpeqi	r2,r2,3
   14f08:	10002f1e 	bne	r2,zero,14fc8 <OSFlagPend+0x210>
   14f0c:	0000b606 	br	151e8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   14f10:	e0bffc17 	ldw	r2,-16(fp)
   14f14:	10c0020b 	ldhu	r3,8(r2)
   14f18:	e0bffd0b 	ldhu	r2,-12(fp)
   14f1c:	1884703a 	and	r2,r3,r2
   14f20:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14f24:	e0ffe78b 	ldhu	r3,-98(fp)
   14f28:	e0bffd0b 	ldhu	r2,-12(fp)
   14f2c:	1880191e 	bne	r3,r2,14f94 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14f30:	e0bfe503 	ldbu	r2,-108(fp)
   14f34:	10800058 	cmpnei	r2,r2,1
   14f38:	1000091e 	bne	r2,zero,14f60 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   14f3c:	e0bffc17 	ldw	r2,-16(fp)
   14f40:	1080020b 	ldhu	r2,8(r2)
   14f44:	1007883a 	mov	r3,r2
   14f48:	e0bfe78b 	ldhu	r2,-98(fp)
   14f4c:	0084303a 	nor	r2,zero,r2
   14f50:	1884703a 	and	r2,r3,r2
   14f54:	1007883a 	mov	r3,r2
   14f58:	e0bffc17 	ldw	r2,-16(fp)
   14f5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14f60:	008000b4 	movhi	r2,2
   14f64:	108f6704 	addi	r2,r2,15772
   14f68:	10800017 	ldw	r2,0(r2)
   14f6c:	e0ffe78b 	ldhu	r3,-98(fp)
   14f70:	10c00b0d 	sth	r3,44(r2)
   14f74:	e0bfe617 	ldw	r2,-104(fp)
   14f78:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f7c:	e0bfea17 	ldw	r2,-88(fp)
   14f80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14f84:	e0800217 	ldw	r2,8(fp)
   14f88:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14f8c:	e0bfe78b 	ldhu	r2,-98(fp)
   14f90:	00010006 	br	15394 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14f94:	e1bffd0b 	ldhu	r6,-12(fp)
   14f98:	e0fffe03 	ldbu	r3,-8(fp)
   14f9c:	e0bfff0b 	ldhu	r2,-4(fp)
   14fa0:	e17ff704 	addi	r5,fp,-36
   14fa4:	d8800015 	stw	r2,0(sp)
   14fa8:	e13ffc17 	ldw	r4,-16(fp)
   14fac:	180f883a 	mov	r7,r3
   14fb0:	001585c0 	call	1585c <OS_FlagBlock>
   14fb4:	e0bfe617 	ldw	r2,-104(fp)
   14fb8:	e0bfeb15 	stw	r2,-84(fp)
   14fbc:	e0bfeb17 	ldw	r2,-84(fp)
   14fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14fc4:	00009206 	br	15210 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   14fc8:	e0bffc17 	ldw	r2,-16(fp)
   14fcc:	10c0020b 	ldhu	r3,8(r2)
   14fd0:	e0bffd0b 	ldhu	r2,-12(fp)
   14fd4:	1884703a 	and	r2,r3,r2
   14fd8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   14fdc:	e0bfe78b 	ldhu	r2,-98(fp)
   14fe0:	10001926 	beq	r2,zero,15048 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14fe4:	e0bfe503 	ldbu	r2,-108(fp)
   14fe8:	10800058 	cmpnei	r2,r2,1
   14fec:	1000091e 	bne	r2,zero,15014 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   14ff0:	e0bffc17 	ldw	r2,-16(fp)
   14ff4:	1080020b 	ldhu	r2,8(r2)
   14ff8:	1007883a 	mov	r3,r2
   14ffc:	e0bfe78b 	ldhu	r2,-98(fp)
   15000:	0084303a 	nor	r2,zero,r2
   15004:	1884703a 	and	r2,r3,r2
   15008:	1007883a 	mov	r3,r2
   1500c:	e0bffc17 	ldw	r2,-16(fp)
   15010:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15014:	008000b4 	movhi	r2,2
   15018:	108f6704 	addi	r2,r2,15772
   1501c:	10800017 	ldw	r2,0(r2)
   15020:	e0ffe78b 	ldhu	r3,-98(fp)
   15024:	10c00b0d 	sth	r3,44(r2)
   15028:	e0bfe617 	ldw	r2,-104(fp)
   1502c:	e0bfec15 	stw	r2,-80(fp)
   15030:	e0bfec17 	ldw	r2,-80(fp)
   15034:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15038:	e0800217 	ldw	r2,8(fp)
   1503c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15040:	e0bfe78b 	ldhu	r2,-98(fp)
   15044:	0000d306 	br	15394 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15048:	e1bffd0b 	ldhu	r6,-12(fp)
   1504c:	e0fffe03 	ldbu	r3,-8(fp)
   15050:	e0bfff0b 	ldhu	r2,-4(fp)
   15054:	e17ff704 	addi	r5,fp,-36
   15058:	d8800015 	stw	r2,0(sp)
   1505c:	e13ffc17 	ldw	r4,-16(fp)
   15060:	180f883a 	mov	r7,r3
   15064:	001585c0 	call	1585c <OS_FlagBlock>
   15068:	e0bfe617 	ldw	r2,-104(fp)
   1506c:	e0bfed15 	stw	r2,-76(fp)
   15070:	e0bfed17 	ldw	r2,-76(fp)
   15074:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15078:	00006506 	br	15210 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	1080020b 	ldhu	r2,8(r2)
   15084:	0084303a 	nor	r2,zero,r2
   15088:	1007883a 	mov	r3,r2
   1508c:	e0bffd0b 	ldhu	r2,-12(fp)
   15090:	1884703a 	and	r2,r3,r2
   15094:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15098:	e0ffe78b 	ldhu	r3,-98(fp)
   1509c:	e0bffd0b 	ldhu	r2,-12(fp)
   150a0:	1880171e 	bne	r3,r2,15100 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   150a4:	e0bfe503 	ldbu	r2,-108(fp)
   150a8:	10800058 	cmpnei	r2,r2,1
   150ac:	1000071e 	bne	r2,zero,150cc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   150b0:	e0bffc17 	ldw	r2,-16(fp)
   150b4:	10c0020b 	ldhu	r3,8(r2)
   150b8:	e0bfe78b 	ldhu	r2,-98(fp)
   150bc:	1884b03a 	or	r2,r3,r2
   150c0:	1007883a 	mov	r3,r2
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   150cc:	008000b4 	movhi	r2,2
   150d0:	108f6704 	addi	r2,r2,15772
   150d4:	10800017 	ldw	r2,0(r2)
   150d8:	e0ffe78b 	ldhu	r3,-98(fp)
   150dc:	10c00b0d 	sth	r3,44(r2)
   150e0:	e0bfe617 	ldw	r2,-104(fp)
   150e4:	e0bfee15 	stw	r2,-72(fp)
   150e8:	e0bfee17 	ldw	r2,-72(fp)
   150ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   150f0:	e0800217 	ldw	r2,8(fp)
   150f4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   150f8:	e0bfe78b 	ldhu	r2,-98(fp)
   150fc:	0000a506 	br	15394 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15100:	e1bffd0b 	ldhu	r6,-12(fp)
   15104:	e0fffe03 	ldbu	r3,-8(fp)
   15108:	e0bfff0b 	ldhu	r2,-4(fp)
   1510c:	e17ff704 	addi	r5,fp,-36
   15110:	d8800015 	stw	r2,0(sp)
   15114:	e13ffc17 	ldw	r4,-16(fp)
   15118:	180f883a 	mov	r7,r3
   1511c:	001585c0 	call	1585c <OS_FlagBlock>
   15120:	e0bfe617 	ldw	r2,-104(fp)
   15124:	e0bfef15 	stw	r2,-68(fp)
   15128:	e0bfef17 	ldw	r2,-68(fp)
   1512c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15130:	00003706 	br	15210 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15134:	e0bffc17 	ldw	r2,-16(fp)
   15138:	1080020b 	ldhu	r2,8(r2)
   1513c:	0084303a 	nor	r2,zero,r2
   15140:	1007883a 	mov	r3,r2
   15144:	e0bffd0b 	ldhu	r2,-12(fp)
   15148:	1884703a 	and	r2,r3,r2
   1514c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15150:	e0bfe78b 	ldhu	r2,-98(fp)
   15154:	10001726 	beq	r2,zero,151b4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15158:	e0bfe503 	ldbu	r2,-108(fp)
   1515c:	10800058 	cmpnei	r2,r2,1
   15160:	1000071e 	bne	r2,zero,15180 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15164:	e0bffc17 	ldw	r2,-16(fp)
   15168:	10c0020b 	ldhu	r3,8(r2)
   1516c:	e0bfe78b 	ldhu	r2,-98(fp)
   15170:	1884b03a 	or	r2,r3,r2
   15174:	1007883a 	mov	r3,r2
   15178:	e0bffc17 	ldw	r2,-16(fp)
   1517c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15180:	008000b4 	movhi	r2,2
   15184:	108f6704 	addi	r2,r2,15772
   15188:	10800017 	ldw	r2,0(r2)
   1518c:	e0ffe78b 	ldhu	r3,-98(fp)
   15190:	10c00b0d 	sth	r3,44(r2)
   15194:	e0bfe617 	ldw	r2,-104(fp)
   15198:	e0bff015 	stw	r2,-64(fp)
   1519c:	e0bff017 	ldw	r2,-64(fp)
   151a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   151a4:	e0800217 	ldw	r2,8(fp)
   151a8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   151ac:	e0bfe78b 	ldhu	r2,-98(fp)
   151b0:	00007806 	br	15394 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   151b4:	e1bffd0b 	ldhu	r6,-12(fp)
   151b8:	e0fffe03 	ldbu	r3,-8(fp)
   151bc:	e0bfff0b 	ldhu	r2,-4(fp)
   151c0:	e17ff704 	addi	r5,fp,-36
   151c4:	d8800015 	stw	r2,0(sp)
   151c8:	e13ffc17 	ldw	r4,-16(fp)
   151cc:	180f883a 	mov	r7,r3
   151d0:	001585c0 	call	1585c <OS_FlagBlock>
   151d4:	e0bfe617 	ldw	r2,-104(fp)
   151d8:	e0bff115 	stw	r2,-60(fp)
   151dc:	e0bff117 	ldw	r2,-60(fp)
   151e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   151e4:	00000a06 	br	15210 <OSFlagPend+0x458>
   151e8:	e0bfe617 	ldw	r2,-104(fp)
   151ec:	e0bff215 	stw	r2,-56(fp)
   151f0:	e0bff217 	ldw	r2,-56(fp)
   151f4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   151f8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   151fc:	e0800217 	ldw	r2,8(fp)
   15200:	00c01bc4 	movi	r3,111
   15204:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   15208:	e0bfe78b 	ldhu	r2,-98(fp)
   1520c:	00006106 	br	15394 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   15210:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15214:	0005303a 	rdctl	r2,status
   15218:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1521c:	e0fff317 	ldw	r3,-52(fp)
   15220:	00bfff84 	movi	r2,-2
   15224:	1884703a 	and	r2,r3,r2
   15228:	1001703a 	wrctl	status,r2
  
  return context;
   1522c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   15230:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   15234:	008000b4 	movhi	r2,2
   15238:	108f6704 	addi	r2,r2,15772
   1523c:	10800017 	ldw	r2,0(r2)
   15240:	10800c43 	ldbu	r2,49(r2)
   15244:	10803fcc 	andi	r2,r2,255
   15248:	10002226 	beq	r2,zero,152d4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1524c:	008000b4 	movhi	r2,2
   15250:	108f6704 	addi	r2,r2,15772
   15254:	10800017 	ldw	r2,0(r2)
   15258:	10800c43 	ldbu	r2,49(r2)
   1525c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   15260:	008000b4 	movhi	r2,2
   15264:	108f6704 	addi	r2,r2,15772
   15268:	10800017 	ldw	r2,0(r2)
   1526c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   15270:	e0bff704 	addi	r2,fp,-36
   15274:	1009883a 	mov	r4,r2
   15278:	0015c140 	call	15c14 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1527c:	008000b4 	movhi	r2,2
   15280:	108f6704 	addi	r2,r2,15772
   15284:	10800017 	ldw	r2,0(r2)
   15288:	10000c05 	stb	zero,48(r2)
   1528c:	e0bfe617 	ldw	r2,-104(fp)
   15290:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15294:	e0bff417 	ldw	r2,-48(fp)
   15298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1529c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   152a0:	e0bfe803 	ldbu	r2,-96(fp)
   152a4:	108000a0 	cmpeqi	r2,r2,2
   152a8:	10000426 	beq	r2,zero,152bc <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   152ac:	e0800217 	ldw	r2,8(fp)
   152b0:	00c00384 	movi	r3,14
   152b4:	10c00005 	stb	r3,0(r2)
                 break;
   152b8:	00000406 	br	152cc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   152bc:	e0800217 	ldw	r2,8(fp)
   152c0:	00c00284 	movi	r3,10
   152c4:	10c00005 	stb	r3,0(r2)
                 break;
   152c8:	0001883a 	nop
        }
        return (flags_rdy);
   152cc:	e0bfe78b 	ldhu	r2,-98(fp)
   152d0:	00003006 	br	15394 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   152d4:	008000b4 	movhi	r2,2
   152d8:	108f6704 	addi	r2,r2,15772
   152dc:	10800017 	ldw	r2,0(r2)
   152e0:	10800b0b 	ldhu	r2,44(r2)
   152e4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   152e8:	e0bfe503 	ldbu	r2,-108(fp)
   152ec:	10800058 	cmpnei	r2,r2,1
   152f0:	1000211e 	bne	r2,zero,15378 <OSFlagPend+0x5c0>
        switch (wait_type) {
   152f4:	e0bffe03 	ldbu	r2,-8(fp)
   152f8:	10001616 	blt	r2,zero,15354 <OSFlagPend+0x59c>
   152fc:	10c00090 	cmplti	r3,r2,2
   15300:	18000c1e 	bne	r3,zero,15334 <OSFlagPend+0x57c>
   15304:	10800108 	cmpgei	r2,r2,4
   15308:	1000121e 	bne	r2,zero,15354 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1530c:	e0bffc17 	ldw	r2,-16(fp)
   15310:	1080020b 	ldhu	r2,8(r2)
   15314:	1007883a 	mov	r3,r2
   15318:	e0bfe78b 	ldhu	r2,-98(fp)
   1531c:	0084303a 	nor	r2,zero,r2
   15320:	1884703a 	and	r2,r3,r2
   15324:	1007883a 	mov	r3,r2
   15328:	e0bffc17 	ldw	r2,-16(fp)
   1532c:	10c0020d 	sth	r3,8(r2)
                 break;
   15330:	00001106 	br	15378 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   15334:	e0bffc17 	ldw	r2,-16(fp)
   15338:	10c0020b 	ldhu	r3,8(r2)
   1533c:	e0bfe78b 	ldhu	r2,-98(fp)
   15340:	1884b03a 	or	r2,r3,r2
   15344:	1007883a 	mov	r3,r2
   15348:	e0bffc17 	ldw	r2,-16(fp)
   1534c:	10c0020d 	sth	r3,8(r2)
                 break;
   15350:	00000906 	br	15378 <OSFlagPend+0x5c0>
   15354:	e0bfe617 	ldw	r2,-104(fp)
   15358:	e0bff515 	stw	r2,-44(fp)
   1535c:	e0bff517 	ldw	r2,-44(fp)
   15360:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   15364:	e0800217 	ldw	r2,8(fp)
   15368:	00c01bc4 	movi	r3,111
   1536c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   15370:	0005883a 	mov	r2,zero
   15374:	00000706 	br	15394 <OSFlagPend+0x5dc>
   15378:	e0bfe617 	ldw	r2,-104(fp)
   1537c:	e0bff615 	stw	r2,-40(fp)
   15380:	e0bff617 	ldw	r2,-40(fp)
   15384:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   15388:	e0800217 	ldw	r2,8(fp)
   1538c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   15390:	e0bfe78b 	ldhu	r2,-98(fp)
}
   15394:	e037883a 	mov	sp,fp
   15398:	dfc00117 	ldw	ra,4(sp)
   1539c:	df000017 	ldw	fp,0(sp)
   153a0:	dec00204 	addi	sp,sp,8
   153a4:	f800283a 	ret

000153a8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   153a8:	defffb04 	addi	sp,sp,-20
   153ac:	df000415 	stw	fp,16(sp)
   153b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   153b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153b8:	0005303a 	rdctl	r2,status
   153bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153c0:	e0fffe17 	ldw	r3,-8(fp)
   153c4:	00bfff84 	movi	r2,-2
   153c8:	1884703a 	and	r2,r3,r2
   153cc:	1001703a 	wrctl	status,r2
  
  return context;
   153d0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   153d4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   153d8:	008000b4 	movhi	r2,2
   153dc:	108f6704 	addi	r2,r2,15772
   153e0:	10800017 	ldw	r2,0(r2)
   153e4:	10800b0b 	ldhu	r2,44(r2)
   153e8:	e0bffd0d 	sth	r2,-12(fp)
   153ec:	e0bffc17 	ldw	r2,-16(fp)
   153f0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153f4:	e0bfff17 	ldw	r2,-4(fp)
   153f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   153fc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   15400:	e037883a 	mov	sp,fp
   15404:	df000017 	ldw	fp,0(sp)
   15408:	dec00104 	addi	sp,sp,4
   1540c:	f800283a 	ret

00015410 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   15410:	deffef04 	addi	sp,sp,-68
   15414:	dfc01015 	stw	ra,64(sp)
   15418:	df000f15 	stw	fp,60(sp)
   1541c:	df000f04 	addi	fp,sp,60
   15420:	e13ffc15 	stw	r4,-16(fp)
   15424:	2807883a 	mov	r3,r5
   15428:	3005883a 	mov	r2,r6
   1542c:	e1ffff15 	stw	r7,-4(fp)
   15430:	e0fffd0d 	sth	r3,-12(fp)
   15434:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   15438:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1543c:	e0bfff17 	ldw	r2,-4(fp)
   15440:	1000021e 	bne	r2,zero,1544c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   15444:	0005883a 	mov	r2,zero
   15448:	0000ce06 	br	15784 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1544c:	e0bffc17 	ldw	r2,-16(fp)
   15450:	1000051e 	bne	r2,zero,15468 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15454:	e0bfff17 	ldw	r2,-4(fp)
   15458:	00c01b84 	movi	r3,110
   1545c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15460:	0005883a 	mov	r2,zero
   15464:	0000c706 	br	15784 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   15468:	e0bffc17 	ldw	r2,-16(fp)
   1546c:	10800003 	ldbu	r2,0(r2)
   15470:	10803fcc 	andi	r2,r2,255
   15474:	10800160 	cmpeqi	r2,r2,5
   15478:	1000051e 	bne	r2,zero,15490 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1547c:	e0bfff17 	ldw	r2,-4(fp)
   15480:	00c00044 	movi	r3,1
   15484:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15488:	0005883a 	mov	r2,zero
   1548c:	0000bd06 	br	15784 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15490:	0005303a 	rdctl	r2,status
   15494:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15498:	e0fff617 	ldw	r3,-40(fp)
   1549c:	00bfff84 	movi	r2,-2
   154a0:	1884703a 	and	r2,r3,r2
   154a4:	1001703a 	wrctl	status,r2
  
  return context;
   154a8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   154ac:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   154b0:	e0bffe03 	ldbu	r2,-8(fp)
   154b4:	10000326 	beq	r2,zero,154c4 <OSFlagPost+0xb4>
   154b8:	10800060 	cmpeqi	r2,r2,1
   154bc:	10000b1e 	bne	r2,zero,154ec <OSFlagPost+0xdc>
   154c0:	00001206 	br	1550c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   154c4:	e0bffc17 	ldw	r2,-16(fp)
   154c8:	1080020b 	ldhu	r2,8(r2)
   154cc:	1007883a 	mov	r3,r2
   154d0:	e0bffd0b 	ldhu	r2,-12(fp)
   154d4:	0084303a 	nor	r2,zero,r2
   154d8:	1884703a 	and	r2,r3,r2
   154dc:	1007883a 	mov	r3,r2
   154e0:	e0bffc17 	ldw	r2,-16(fp)
   154e4:	10c0020d 	sth	r3,8(r2)
             break;
   154e8:	00001106 	br	15530 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   154ec:	e0bffc17 	ldw	r2,-16(fp)
   154f0:	10c0020b 	ldhu	r3,8(r2)
   154f4:	e0bffd0b 	ldhu	r2,-12(fp)
   154f8:	1884b03a 	or	r2,r3,r2
   154fc:	1007883a 	mov	r3,r2
   15500:	e0bffc17 	ldw	r2,-16(fp)
   15504:	10c0020d 	sth	r3,8(r2)
             break;
   15508:	00000906 	br	15530 <OSFlagPost+0x120>
   1550c:	e0bff317 	ldw	r2,-52(fp)
   15510:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15514:	e0bff717 	ldw	r2,-36(fp)
   15518:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1551c:	e0bfff17 	ldw	r2,-4(fp)
   15520:	00c01c44 	movi	r3,113
   15524:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   15528:	0005883a 	mov	r2,zero
   1552c:	00009506 	br	15784 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   15530:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15534:	e0bffc17 	ldw	r2,-16(fp)
   15538:	10800117 	ldw	r2,4(r2)
   1553c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   15540:	00007406 	br	15714 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   15544:	e0bff117 	ldw	r2,-60(fp)
   15548:	10800483 	ldbu	r2,18(r2)
   1554c:	10803fcc 	andi	r2,r2,255
   15550:	10c00060 	cmpeqi	r3,r2,1
   15554:	18004d1e 	bne	r3,zero,1568c <OSFlagPost+0x27c>
   15558:	10c00088 	cmpgei	r3,r2,2
   1555c:	1800021e 	bne	r3,zero,15568 <OSFlagPost+0x158>
   15560:	10003126 	beq	r2,zero,15628 <OSFlagPost+0x218>
   15564:	00005f06 	br	156e4 <OSFlagPost+0x2d4>
   15568:	10c000a0 	cmpeqi	r3,r2,2
   1556c:	1800031e 	bne	r3,zero,1557c <OSFlagPost+0x16c>
   15570:	108000e0 	cmpeqi	r2,r2,3
   15574:	1000181e 	bne	r2,zero,155d8 <OSFlagPost+0x1c8>
   15578:	00005a06 	br	156e4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1557c:	e0bffc17 	ldw	r2,-16(fp)
   15580:	10c0020b 	ldhu	r3,8(r2)
   15584:	e0bff117 	ldw	r2,-60(fp)
   15588:	1080040b 	ldhu	r2,16(r2)
   1558c:	1884703a 	and	r2,r3,r2
   15590:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   15594:	e0bff117 	ldw	r2,-60(fp)
   15598:	1080040b 	ldhu	r2,16(r2)
   1559c:	10ffffcc 	andi	r3,r2,65535
   155a0:	e0bff40b 	ldhu	r2,-48(fp)
   155a4:	18800b1e 	bne	r3,r2,155d4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   155a8:	e0bff40b 	ldhu	r2,-48(fp)
   155ac:	e13ff117 	ldw	r4,-60(fp)
   155b0:	100b883a 	mov	r5,r2
   155b4:	0015b040 	call	15b04 <OS_FlagTaskRdy>
   155b8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   155bc:	e0bff483 	ldbu	r2,-46(fp)
   155c0:	10800058 	cmpnei	r2,r2,1
   155c4:	1000031e 	bne	r2,zero,155d4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   155c8:	00800044 	movi	r2,1
   155cc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   155d0:	00004d06 	br	15708 <OSFlagPost+0x2f8>
   155d4:	00004c06 	br	15708 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   155d8:	e0bffc17 	ldw	r2,-16(fp)
   155dc:	10c0020b 	ldhu	r3,8(r2)
   155e0:	e0bff117 	ldw	r2,-60(fp)
   155e4:	1080040b 	ldhu	r2,16(r2)
   155e8:	1884703a 	and	r2,r3,r2
   155ec:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   155f0:	e0bff40b 	ldhu	r2,-48(fp)
   155f4:	10000b26 	beq	r2,zero,15624 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   155f8:	e0bff40b 	ldhu	r2,-48(fp)
   155fc:	e13ff117 	ldw	r4,-60(fp)
   15600:	100b883a 	mov	r5,r2
   15604:	0015b040 	call	15b04 <OS_FlagTaskRdy>
   15608:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1560c:	e0bff483 	ldbu	r2,-46(fp)
   15610:	10800058 	cmpnei	r2,r2,1
   15614:	1000031e 	bne	r2,zero,15624 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15618:	00800044 	movi	r2,1
   1561c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15620:	00003906 	br	15708 <OSFlagPost+0x2f8>
   15624:	00003806 	br	15708 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15628:	e0bffc17 	ldw	r2,-16(fp)
   1562c:	1080020b 	ldhu	r2,8(r2)
   15630:	0084303a 	nor	r2,zero,r2
   15634:	1007883a 	mov	r3,r2
   15638:	e0bff117 	ldw	r2,-60(fp)
   1563c:	1080040b 	ldhu	r2,16(r2)
   15640:	1884703a 	and	r2,r3,r2
   15644:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   15648:	e0bff117 	ldw	r2,-60(fp)
   1564c:	1080040b 	ldhu	r2,16(r2)
   15650:	10ffffcc 	andi	r3,r2,65535
   15654:	e0bff40b 	ldhu	r2,-48(fp)
   15658:	18800b1e 	bne	r3,r2,15688 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1565c:	e0bff40b 	ldhu	r2,-48(fp)
   15660:	e13ff117 	ldw	r4,-60(fp)
   15664:	100b883a 	mov	r5,r2
   15668:	0015b040 	call	15b04 <OS_FlagTaskRdy>
   1566c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   15670:	e0bff483 	ldbu	r2,-46(fp)
   15674:	10800058 	cmpnei	r2,r2,1
   15678:	1000031e 	bne	r2,zero,15688 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1567c:	00800044 	movi	r2,1
   15680:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15684:	00002006 	br	15708 <OSFlagPost+0x2f8>
   15688:	00001f06 	br	15708 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1568c:	e0bffc17 	ldw	r2,-16(fp)
   15690:	1080020b 	ldhu	r2,8(r2)
   15694:	0084303a 	nor	r2,zero,r2
   15698:	1007883a 	mov	r3,r2
   1569c:	e0bff117 	ldw	r2,-60(fp)
   156a0:	1080040b 	ldhu	r2,16(r2)
   156a4:	1884703a 	and	r2,r3,r2
   156a8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   156ac:	e0bff40b 	ldhu	r2,-48(fp)
   156b0:	10000b26 	beq	r2,zero,156e0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   156b4:	e0bff40b 	ldhu	r2,-48(fp)
   156b8:	e13ff117 	ldw	r4,-60(fp)
   156bc:	100b883a 	mov	r5,r2
   156c0:	0015b040 	call	15b04 <OS_FlagTaskRdy>
   156c4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   156c8:	e0bff483 	ldbu	r2,-46(fp)
   156cc:	10800058 	cmpnei	r2,r2,1
   156d0:	1000031e 	bne	r2,zero,156e0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   156d4:	00800044 	movi	r2,1
   156d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   156dc:	00000a06 	br	15708 <OSFlagPost+0x2f8>
   156e0:	00000906 	br	15708 <OSFlagPost+0x2f8>
   156e4:	e0bff317 	ldw	r2,-52(fp)
   156e8:	e0bff815 	stw	r2,-32(fp)
   156ec:	e0bff817 	ldw	r2,-32(fp)
   156f0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   156f4:	e0bfff17 	ldw	r2,-4(fp)
   156f8:	00c01bc4 	movi	r3,111
   156fc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   15700:	0005883a 	mov	r2,zero
   15704:	00001f06 	br	15784 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   15708:	e0bff117 	ldw	r2,-60(fp)
   1570c:	10800017 	ldw	r2,0(r2)
   15710:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   15714:	e0bff117 	ldw	r2,-60(fp)
   15718:	103f8a1e 	bne	r2,zero,15544 <__alt_mem_Flash_flash_data+0xf4015544>
   1571c:	e0bff317 	ldw	r2,-52(fp)
   15720:	e0bff915 	stw	r2,-28(fp)
   15724:	e0bff917 	ldw	r2,-28(fp)
   15728:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1572c:	e0bff203 	ldbu	r2,-56(fp)
   15730:	10800058 	cmpnei	r2,r2,1
   15734:	1000011e 	bne	r2,zero,1573c <OSFlagPost+0x32c>
        OS_Sched();
   15738:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1573c:	0005303a 	rdctl	r2,status
   15740:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15744:	e0fffa17 	ldw	r3,-24(fp)
   15748:	00bfff84 	movi	r2,-2
   1574c:	1884703a 	and	r2,r3,r2
   15750:	1001703a 	wrctl	status,r2
  
  return context;
   15754:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15758:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1575c:	e0bffc17 	ldw	r2,-16(fp)
   15760:	1080020b 	ldhu	r2,8(r2)
   15764:	e0bff50d 	sth	r2,-44(fp)
   15768:	e0bff317 	ldw	r2,-52(fp)
   1576c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15770:	e0bffb17 	ldw	r2,-20(fp)
   15774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   15778:	e0bfff17 	ldw	r2,-4(fp)
   1577c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   15780:	e0bff50b 	ldhu	r2,-44(fp)
}
   15784:	e037883a 	mov	sp,fp
   15788:	dfc00117 	ldw	ra,4(sp)
   1578c:	df000017 	ldw	fp,0(sp)
   15790:	dec00204 	addi	sp,sp,8
   15794:	f800283a 	ret

00015798 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   15798:	defff904 	addi	sp,sp,-28
   1579c:	df000615 	stw	fp,24(sp)
   157a0:	df000604 	addi	fp,sp,24
   157a4:	e13ffe15 	stw	r4,-8(fp)
   157a8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   157ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   157b0:	e0bfff17 	ldw	r2,-4(fp)
   157b4:	1000021e 	bne	r2,zero,157c0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   157b8:	0005883a 	mov	r2,zero
   157bc:	00002306 	br	1584c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   157c0:	e0bffe17 	ldw	r2,-8(fp)
   157c4:	1000051e 	bne	r2,zero,157dc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   157c8:	e0bfff17 	ldw	r2,-4(fp)
   157cc:	00c01b84 	movi	r3,110
   157d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   157d4:	0005883a 	mov	r2,zero
   157d8:	00001c06 	br	1584c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   157dc:	e0bffe17 	ldw	r2,-8(fp)
   157e0:	10800003 	ldbu	r2,0(r2)
   157e4:	10803fcc 	andi	r2,r2,255
   157e8:	10800160 	cmpeqi	r2,r2,5
   157ec:	1000051e 	bne	r2,zero,15804 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   157f0:	e0bfff17 	ldw	r2,-4(fp)
   157f4:	00c00044 	movi	r3,1
   157f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   157fc:	0005883a 	mov	r2,zero
   15800:	00001206 	br	1584c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15804:	0005303a 	rdctl	r2,status
   15808:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1580c:	e0fffc17 	ldw	r3,-16(fp)
   15810:	00bfff84 	movi	r2,-2
   15814:	1884703a 	and	r2,r3,r2
   15818:	1001703a 	wrctl	status,r2
  
  return context;
   1581c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15820:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   15824:	e0bffe17 	ldw	r2,-8(fp)
   15828:	1080020b 	ldhu	r2,8(r2)
   1582c:	e0bffb0d 	sth	r2,-20(fp)
   15830:	e0bffa17 	ldw	r2,-24(fp)
   15834:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15838:	e0bffd17 	ldw	r2,-12(fp)
   1583c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15840:	e0bfff17 	ldw	r2,-4(fp)
   15844:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   15848:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1584c:	e037883a 	mov	sp,fp
   15850:	df000017 	ldw	fp,0(sp)
   15854:	dec00104 	addi	sp,sp,4
   15858:	f800283a 	ret

0001585c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1585c:	defff804 	addi	sp,sp,-32
   15860:	df000715 	stw	fp,28(sp)
   15864:	df000704 	addi	fp,sp,28
   15868:	e13ffb15 	stw	r4,-20(fp)
   1586c:	e17ffc15 	stw	r5,-16(fp)
   15870:	3009883a 	mov	r4,r6
   15874:	3807883a 	mov	r3,r7
   15878:	e0800117 	ldw	r2,4(fp)
   1587c:	e13ffd0d 	sth	r4,-12(fp)
   15880:	e0fffe05 	stb	r3,-8(fp)
   15884:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   15888:	008000b4 	movhi	r2,2
   1588c:	108f6704 	addi	r2,r2,15772
   15890:	10c00017 	ldw	r3,0(r2)
   15894:	008000b4 	movhi	r2,2
   15898:	108f6704 	addi	r2,r2,15772
   1589c:	10800017 	ldw	r2,0(r2)
   158a0:	10800c03 	ldbu	r2,48(r2)
   158a4:	10800814 	ori	r2,r2,32
   158a8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   158ac:	008000b4 	movhi	r2,2
   158b0:	108f6704 	addi	r2,r2,15772
   158b4:	10800017 	ldw	r2,0(r2)
   158b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   158bc:	008000b4 	movhi	r2,2
   158c0:	108f6704 	addi	r2,r2,15772
   158c4:	10800017 	ldw	r2,0(r2)
   158c8:	e0ffff0b 	ldhu	r3,-4(fp)
   158cc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   158d0:	008000b4 	movhi	r2,2
   158d4:	108f6704 	addi	r2,r2,15772
   158d8:	10800017 	ldw	r2,0(r2)
   158dc:	e0fffc17 	ldw	r3,-16(fp)
   158e0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   158e4:	e0bffc17 	ldw	r2,-16(fp)
   158e8:	e0fffd0b 	ldhu	r3,-12(fp)
   158ec:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   158f0:	e0bffc17 	ldw	r2,-16(fp)
   158f4:	e0fffe03 	ldbu	r3,-8(fp)
   158f8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   158fc:	008000b4 	movhi	r2,2
   15900:	108f6704 	addi	r2,r2,15772
   15904:	10c00017 	ldw	r3,0(r2)
   15908:	e0bffc17 	ldw	r2,-16(fp)
   1590c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   15910:	e0bffb17 	ldw	r2,-20(fp)
   15914:	10c00117 	ldw	r3,4(r2)
   15918:	e0bffc17 	ldw	r2,-16(fp)
   1591c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   15920:	e0bffc17 	ldw	r2,-16(fp)
   15924:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   15928:	e0bffc17 	ldw	r2,-16(fp)
   1592c:	e0fffb17 	ldw	r3,-20(fp)
   15930:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15934:	e0bffb17 	ldw	r2,-20(fp)
   15938:	10800117 	ldw	r2,4(r2)
   1593c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   15940:	e0bff917 	ldw	r2,-28(fp)
   15944:	10000326 	beq	r2,zero,15954 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   15948:	e0bff917 	ldw	r2,-28(fp)
   1594c:	e0fffc17 	ldw	r3,-16(fp)
   15950:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   15954:	e0bffb17 	ldw	r2,-20(fp)
   15958:	e0fffc17 	ldw	r3,-16(fp)
   1595c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   15960:	008000b4 	movhi	r2,2
   15964:	108f6704 	addi	r2,r2,15772
   15968:	10800017 	ldw	r2,0(r2)
   1596c:	10800d03 	ldbu	r2,52(r2)
   15970:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15974:	e0fffa03 	ldbu	r3,-24(fp)
   15978:	e13ffa03 	ldbu	r4,-24(fp)
   1597c:	008000b4 	movhi	r2,2
   15980:	108f6444 	addi	r2,r2,15761
   15984:	1105883a 	add	r2,r2,r4
   15988:	10800003 	ldbu	r2,0(r2)
   1598c:	1009883a 	mov	r4,r2
   15990:	008000b4 	movhi	r2,2
   15994:	108f6704 	addi	r2,r2,15772
   15998:	10800017 	ldw	r2,0(r2)
   1599c:	10800d43 	ldbu	r2,53(r2)
   159a0:	0084303a 	nor	r2,zero,r2
   159a4:	2084703a 	and	r2,r4,r2
   159a8:	1009883a 	mov	r4,r2
   159ac:	008000b4 	movhi	r2,2
   159b0:	108f6444 	addi	r2,r2,15761
   159b4:	10c5883a 	add	r2,r2,r3
   159b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   159bc:	e0fffa03 	ldbu	r3,-24(fp)
   159c0:	008000b4 	movhi	r2,2
   159c4:	108f6444 	addi	r2,r2,15761
   159c8:	10c5883a 	add	r2,r2,r3
   159cc:	10800003 	ldbu	r2,0(r2)
   159d0:	10803fcc 	andi	r2,r2,255
   159d4:	10000e1e 	bne	r2,zero,15a10 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   159d8:	008000b4 	movhi	r2,2
   159dc:	108f6704 	addi	r2,r2,15772
   159e0:	10800017 	ldw	r2,0(r2)
   159e4:	10800d83 	ldbu	r2,54(r2)
   159e8:	0084303a 	nor	r2,zero,r2
   159ec:	1007883a 	mov	r3,r2
   159f0:	008000b4 	movhi	r2,2
   159f4:	108f6404 	addi	r2,r2,15760
   159f8:	10800003 	ldbu	r2,0(r2)
   159fc:	1884703a 	and	r2,r3,r2
   15a00:	1007883a 	mov	r3,r2
   15a04:	008000b4 	movhi	r2,2
   15a08:	108f6404 	addi	r2,r2,15760
   15a0c:	10c00005 	stb	r3,0(r2)
    }
}
   15a10:	e037883a 	mov	sp,fp
   15a14:	df000017 	ldw	fp,0(sp)
   15a18:	dec00104 	addi	sp,sp,4
   15a1c:	f800283a 	ret

00015a20 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   15a20:	defffb04 	addi	sp,sp,-20
   15a24:	dfc00415 	stw	ra,16(sp)
   15a28:	df000315 	stw	fp,12(sp)
   15a2c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   15a30:	010000f4 	movhi	r4,3
   15a34:	2137ec04 	addi	r4,r4,-8272
   15a38:	0140dc04 	movi	r5,880
   15a3c:	0013b800 	call	13b80 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   15a40:	008000f4 	movhi	r2,3
   15a44:	10b7ec04 	addi	r2,r2,-8272
   15a48:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   15a4c:	008000f4 	movhi	r2,3
   15a50:	10b7f704 	addi	r2,r2,-8228
   15a54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   15a58:	e03ffd0d 	sth	zero,-12(fp)
   15a5c:	00001306 	br	15aac <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15a60:	e0bffe17 	ldw	r2,-8(fp)
   15a64:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   15a68:	e0bffe17 	ldw	r2,-8(fp)
   15a6c:	e0ffff17 	ldw	r3,-4(fp)
   15a70:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   15a74:	e0bffe17 	ldw	r2,-8(fp)
   15a78:	00c00fc4 	movi	r3,63
   15a7c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   15a80:	e0bffe17 	ldw	r2,-8(fp)
   15a84:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   15a88:	e0bffe17 	ldw	r2,-8(fp)
   15a8c:	10800b04 	addi	r2,r2,44
   15a90:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   15a94:	e0bfff17 	ldw	r2,-4(fp)
   15a98:	10800b04 	addi	r2,r2,44
   15a9c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   15aa0:	e0bffd0b 	ldhu	r2,-12(fp)
   15aa4:	10800044 	addi	r2,r2,1
   15aa8:	e0bffd0d 	sth	r2,-12(fp)
   15aac:	e0bffd0b 	ldhu	r2,-12(fp)
   15ab0:	108004f0 	cmpltui	r2,r2,19
   15ab4:	103fea1e 	bne	r2,zero,15a60 <__alt_mem_Flash_flash_data+0xf4015a60>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15ab8:	e0bffe17 	ldw	r2,-8(fp)
   15abc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   15ac0:	e0bffe17 	ldw	r2,-8(fp)
   15ac4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   15ac8:	e0bffe17 	ldw	r2,-8(fp)
   15acc:	00c00fc4 	movi	r3,63
   15ad0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   15ad4:	e0bffe17 	ldw	r2,-8(fp)
   15ad8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   15adc:	008000b4 	movhi	r2,2
   15ae0:	108f6904 	addi	r2,r2,15780
   15ae4:	00c000f4 	movhi	r3,3
   15ae8:	18f7ec04 	addi	r3,r3,-8272
   15aec:	10c00015 	stw	r3,0(r2)
#endif
}
   15af0:	e037883a 	mov	sp,fp
   15af4:	dfc00117 	ldw	ra,4(sp)
   15af8:	df000017 	ldw	fp,0(sp)
   15afc:	dec00204 	addi	sp,sp,8
   15b00:	f800283a 	ret

00015b04 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   15b04:	defffa04 	addi	sp,sp,-24
   15b08:	dfc00515 	stw	ra,20(sp)
   15b0c:	df000415 	stw	fp,16(sp)
   15b10:	df000404 	addi	fp,sp,16
   15b14:	e13ffe15 	stw	r4,-8(fp)
   15b18:	2805883a 	mov	r2,r5
   15b1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   15b20:	e0bffe17 	ldw	r2,-8(fp)
   15b24:	10800217 	ldw	r2,8(r2)
   15b28:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   15b2c:	e0bffd17 	ldw	r2,-12(fp)
   15b30:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   15b34:	e0bffd17 	ldw	r2,-12(fp)
   15b38:	e0ffff0b 	ldhu	r3,-4(fp)
   15b3c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   15b40:	e0bffd17 	ldw	r2,-12(fp)
   15b44:	10c00c03 	ldbu	r3,48(r2)
   15b48:	00bff7c4 	movi	r2,-33
   15b4c:	1884703a 	and	r2,r3,r2
   15b50:	1007883a 	mov	r3,r2
   15b54:	e0bffd17 	ldw	r2,-12(fp)
   15b58:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   15b5c:	e0bffd17 	ldw	r2,-12(fp)
   15b60:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   15b64:	e0bffd17 	ldw	r2,-12(fp)
   15b68:	10800c03 	ldbu	r2,48(r2)
   15b6c:	10803fcc 	andi	r2,r2,255
   15b70:	10001f1e 	bne	r2,zero,15bf0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   15b74:	e0bffd17 	ldw	r2,-12(fp)
   15b78:	10c00d83 	ldbu	r3,54(r2)
   15b7c:	008000b4 	movhi	r2,2
   15b80:	108f6404 	addi	r2,r2,15760
   15b84:	10800003 	ldbu	r2,0(r2)
   15b88:	1884b03a 	or	r2,r3,r2
   15b8c:	1007883a 	mov	r3,r2
   15b90:	008000b4 	movhi	r2,2
   15b94:	108f6404 	addi	r2,r2,15760
   15b98:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15b9c:	e0bffd17 	ldw	r2,-12(fp)
   15ba0:	10800d03 	ldbu	r2,52(r2)
   15ba4:	10c03fcc 	andi	r3,r2,255
   15ba8:	e0bffd17 	ldw	r2,-12(fp)
   15bac:	10800d03 	ldbu	r2,52(r2)
   15bb0:	11003fcc 	andi	r4,r2,255
   15bb4:	008000b4 	movhi	r2,2
   15bb8:	108f6444 	addi	r2,r2,15761
   15bbc:	1105883a 	add	r2,r2,r4
   15bc0:	11000003 	ldbu	r4,0(r2)
   15bc4:	e0bffd17 	ldw	r2,-12(fp)
   15bc8:	10800d43 	ldbu	r2,53(r2)
   15bcc:	2084b03a 	or	r2,r4,r2
   15bd0:	1009883a 	mov	r4,r2
   15bd4:	008000b4 	movhi	r2,2
   15bd8:	108f6444 	addi	r2,r2,15761
   15bdc:	10c5883a 	add	r2,r2,r3
   15be0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   15be4:	00800044 	movi	r2,1
   15be8:	e0bffc05 	stb	r2,-16(fp)
   15bec:	00000106 	br	15bf4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   15bf0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   15bf4:	e13ffe17 	ldw	r4,-8(fp)
   15bf8:	0015c140 	call	15c14 <OS_FlagUnlink>
    return (sched);
   15bfc:	e0bffc03 	ldbu	r2,-16(fp)
}
   15c00:	e037883a 	mov	sp,fp
   15c04:	dfc00117 	ldw	ra,4(sp)
   15c08:	df000017 	ldw	fp,0(sp)
   15c0c:	dec00204 	addi	sp,sp,8
   15c10:	f800283a 	ret

00015c14 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   15c14:	defffa04 	addi	sp,sp,-24
   15c18:	df000515 	stw	fp,20(sp)
   15c1c:	df000504 	addi	fp,sp,20
   15c20:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   15c24:	e0bfff17 	ldw	r2,-4(fp)
   15c28:	10800117 	ldw	r2,4(r2)
   15c2c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15c30:	e0bfff17 	ldw	r2,-4(fp)
   15c34:	10800017 	ldw	r2,0(r2)
   15c38:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   15c3c:	e0bffb17 	ldw	r2,-20(fp)
   15c40:	10000b1e 	bne	r2,zero,15c70 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   15c44:	e0bfff17 	ldw	r2,-4(fp)
   15c48:	10800317 	ldw	r2,12(r2)
   15c4c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   15c50:	e0bffd17 	ldw	r2,-12(fp)
   15c54:	e0fffc17 	ldw	r3,-16(fp)
   15c58:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   15c5c:	e0bffc17 	ldw	r2,-16(fp)
   15c60:	10000b26 	beq	r2,zero,15c90 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   15c64:	e0bffc17 	ldw	r2,-16(fp)
   15c68:	10000115 	stw	zero,4(r2)
   15c6c:	00000806 	br	15c90 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   15c70:	e0bffb17 	ldw	r2,-20(fp)
   15c74:	e0fffc17 	ldw	r3,-16(fp)
   15c78:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   15c7c:	e0bffc17 	ldw	r2,-16(fp)
   15c80:	10000326 	beq	r2,zero,15c90 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   15c84:	e0bffc17 	ldw	r2,-16(fp)
   15c88:	e0fffb17 	ldw	r3,-20(fp)
   15c8c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   15c90:	e0bfff17 	ldw	r2,-4(fp)
   15c94:	10800217 	ldw	r2,8(r2)
   15c98:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   15c9c:	e0bffe17 	ldw	r2,-8(fp)
   15ca0:	10000a15 	stw	zero,40(r2)
#endif
}
   15ca4:	e037883a 	mov	sp,fp
   15ca8:	df000017 	ldw	fp,0(sp)
   15cac:	dec00104 	addi	sp,sp,4
   15cb0:	f800283a 	ret

00015cb4 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   15cb4:	defffa04 	addi	sp,sp,-24
   15cb8:	df000515 	stw	fp,20(sp)
   15cbc:	df000504 	addi	fp,sp,20
   15cc0:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   15cc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   15cc8:	e0bfff17 	ldw	r2,-4(fp)
   15ccc:	1000021e 	bne	r2,zero,15cd8 <OSMboxAccept+0x24>
        return ((void *)0);
   15cd0:	0005883a 	mov	r2,zero
   15cd4:	00001906 	br	15d3c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   15cd8:	e0bfff17 	ldw	r2,-4(fp)
   15cdc:	10800003 	ldbu	r2,0(r2)
   15ce0:	10803fcc 	andi	r2,r2,255
   15ce4:	10800060 	cmpeqi	r2,r2,1
   15ce8:	1000021e 	bne	r2,zero,15cf4 <OSMboxAccept+0x40>
        return ((void *)0);
   15cec:	0005883a 	mov	r2,zero
   15cf0:	00001206 	br	15d3c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cf4:	0005303a 	rdctl	r2,status
   15cf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cfc:	e0fffd17 	ldw	r3,-12(fp)
   15d00:	00bfff84 	movi	r2,-2
   15d04:	1884703a 	and	r2,r3,r2
   15d08:	1001703a 	wrctl	status,r2
  
  return context;
   15d0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15d10:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   15d14:	e0bfff17 	ldw	r2,-4(fp)
   15d18:	10800117 	ldw	r2,4(r2)
   15d1c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   15d20:	e0bfff17 	ldw	r2,-4(fp)
   15d24:	10000115 	stw	zero,4(r2)
   15d28:	e0bffb17 	ldw	r2,-20(fp)
   15d2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d30:	e0bffe17 	ldw	r2,-8(fp)
   15d34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   15d38:	e0bffc17 	ldw	r2,-16(fp)
}
   15d3c:	e037883a 	mov	sp,fp
   15d40:	df000017 	ldw	fp,0(sp)
   15d44:	dec00104 	addi	sp,sp,4
   15d48:	f800283a 	ret

00015d4c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   15d4c:	defff904 	addi	sp,sp,-28
   15d50:	dfc00615 	stw	ra,24(sp)
   15d54:	df000515 	stw	fp,20(sp)
   15d58:	df000504 	addi	fp,sp,20
   15d5c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15d60:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15d64:	008000b4 	movhi	r2,2
   15d68:	108f6604 	addi	r2,r2,15768
   15d6c:	10800003 	ldbu	r2,0(r2)
   15d70:	10803fcc 	andi	r2,r2,255
   15d74:	10000226 	beq	r2,zero,15d80 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   15d78:	0005883a 	mov	r2,zero
   15d7c:	00002d06 	br	15e34 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d80:	0005303a 	rdctl	r2,status
   15d84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d88:	e0fffd17 	ldw	r3,-12(fp)
   15d8c:	00bfff84 	movi	r2,-2
   15d90:	1884703a 	and	r2,r3,r2
   15d94:	1001703a 	wrctl	status,r2
  
  return context;
   15d98:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15d9c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   15da0:	008000b4 	movhi	r2,2
   15da4:	108f6504 	addi	r2,r2,15764
   15da8:	10800017 	ldw	r2,0(r2)
   15dac:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   15db0:	008000b4 	movhi	r2,2
   15db4:	108f6504 	addi	r2,r2,15764
   15db8:	10800017 	ldw	r2,0(r2)
   15dbc:	10000726 	beq	r2,zero,15ddc <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15dc0:	008000b4 	movhi	r2,2
   15dc4:	108f6504 	addi	r2,r2,15764
   15dc8:	10800017 	ldw	r2,0(r2)
   15dcc:	10c00117 	ldw	r3,4(r2)
   15dd0:	008000b4 	movhi	r2,2
   15dd4:	108f6504 	addi	r2,r2,15764
   15dd8:	10c00015 	stw	r3,0(r2)
   15ddc:	e0bffb17 	ldw	r2,-20(fp)
   15de0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15de4:	e0bffe17 	ldw	r2,-8(fp)
   15de8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   15dec:	e0bffc17 	ldw	r2,-16(fp)
   15df0:	10000f26 	beq	r2,zero,15e30 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   15df4:	e0bffc17 	ldw	r2,-16(fp)
   15df8:	00c00044 	movi	r3,1
   15dfc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   15e00:	e0bffc17 	ldw	r2,-16(fp)
   15e04:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   15e08:	e0bffc17 	ldw	r2,-16(fp)
   15e0c:	e0ffff17 	ldw	r3,-4(fp)
   15e10:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   15e14:	e0bffc17 	ldw	r2,-16(fp)
   15e18:	00c00fc4 	movi	r3,63
   15e1c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15e20:	e0bffc17 	ldw	r2,-16(fp)
   15e24:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   15e28:	e13ffc17 	ldw	r4,-16(fp)
   15e2c:	00137bc0 	call	137bc <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   15e30:	e0bffc17 	ldw	r2,-16(fp)
}
   15e34:	e037883a 	mov	sp,fp
   15e38:	dfc00117 	ldw	ra,4(sp)
   15e3c:	df000017 	ldw	fp,0(sp)
   15e40:	dec00204 	addi	sp,sp,8
   15e44:	f800283a 	ret

00015e48 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15e48:	defff304 	addi	sp,sp,-52
   15e4c:	dfc00c15 	stw	ra,48(sp)
   15e50:	df000b15 	stw	fp,44(sp)
   15e54:	df000b04 	addi	fp,sp,44
   15e58:	e13ffd15 	stw	r4,-12(fp)
   15e5c:	2805883a 	mov	r2,r5
   15e60:	e1bfff15 	stw	r6,-4(fp)
   15e64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15e68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15e6c:	e0bfff17 	ldw	r2,-4(fp)
   15e70:	1000021e 	bne	r2,zero,15e7c <OSMboxDel+0x34>
        return (pevent);
   15e74:	e0bffd17 	ldw	r2,-12(fp)
   15e78:	00008806 	br	1609c <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15e7c:	e0bffd17 	ldw	r2,-12(fp)
   15e80:	1000051e 	bne	r2,zero,15e98 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15e84:	e0bfff17 	ldw	r2,-4(fp)
   15e88:	00c00104 	movi	r3,4
   15e8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15e90:	e0bffd17 	ldw	r2,-12(fp)
   15e94:	00008106 	br	1609c <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   15e98:	e0bffd17 	ldw	r2,-12(fp)
   15e9c:	10800003 	ldbu	r2,0(r2)
   15ea0:	10803fcc 	andi	r2,r2,255
   15ea4:	10800060 	cmpeqi	r2,r2,1
   15ea8:	1000051e 	bne	r2,zero,15ec0 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15eac:	e0bfff17 	ldw	r2,-4(fp)
   15eb0:	00c00044 	movi	r3,1
   15eb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15eb8:	e0bffd17 	ldw	r2,-12(fp)
   15ebc:	00007706 	br	1609c <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15ec0:	008000b4 	movhi	r2,2
   15ec4:	108f6604 	addi	r2,r2,15768
   15ec8:	10800003 	ldbu	r2,0(r2)
   15ecc:	10803fcc 	andi	r2,r2,255
   15ed0:	10000526 	beq	r2,zero,15ee8 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15ed4:	e0bfff17 	ldw	r2,-4(fp)
   15ed8:	00c003c4 	movi	r3,15
   15edc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15ee0:	e0bffd17 	ldw	r2,-12(fp)
   15ee4:	00006d06 	br	1609c <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ee8:	0005303a 	rdctl	r2,status
   15eec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ef0:	e0fff817 	ldw	r3,-32(fp)
   15ef4:	00bfff84 	movi	r2,-2
   15ef8:	1884703a 	and	r2,r3,r2
   15efc:	1001703a 	wrctl	status,r2
  
  return context;
   15f00:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15f04:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   15f08:	e0bffd17 	ldw	r2,-12(fp)
   15f0c:	10800283 	ldbu	r2,10(r2)
   15f10:	10803fcc 	andi	r2,r2,255
   15f14:	10000326 	beq	r2,zero,15f24 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15f18:	00800044 	movi	r2,1
   15f1c:	e0bff505 	stb	r2,-44(fp)
   15f20:	00000106 	br	15f28 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15f24:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15f28:	e0bffe03 	ldbu	r2,-8(fp)
   15f2c:	10000326 	beq	r2,zero,15f3c <OSMboxDel+0xf4>
   15f30:	10800060 	cmpeqi	r2,r2,1
   15f34:	10002c1e 	bne	r2,zero,15fe8 <OSMboxDel+0x1a0>
   15f38:	00004d06 	br	16070 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   15f3c:	e0bff503 	ldbu	r2,-44(fp)
   15f40:	10001a1e 	bne	r2,zero,15fac <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15f44:	e0bffd17 	ldw	r2,-12(fp)
   15f48:	00c00fc4 	movi	r3,63
   15f4c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15f50:	e0bffd17 	ldw	r2,-12(fp)
   15f54:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   15f58:	e0bffd17 	ldw	r2,-12(fp)
   15f5c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   15f60:	008000b4 	movhi	r2,2
   15f64:	108f6504 	addi	r2,r2,15764
   15f68:	10c00017 	ldw	r3,0(r2)
   15f6c:	e0bffd17 	ldw	r2,-12(fp)
   15f70:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   15f74:	e0bffd17 	ldw	r2,-12(fp)
   15f78:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   15f7c:	008000b4 	movhi	r2,2
   15f80:	108f6504 	addi	r2,r2,15764
   15f84:	e0fffd17 	ldw	r3,-12(fp)
   15f88:	10c00015 	stw	r3,0(r2)
   15f8c:	e0bff717 	ldw	r2,-36(fp)
   15f90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f94:	e0bff917 	ldw	r2,-28(fp)
   15f98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   15f9c:	e0bfff17 	ldw	r2,-4(fp)
   15fa0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   15fa4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   15fa8:	00003b06 	br	16098 <OSMboxDel+0x250>
   15fac:	e0bff717 	ldw	r2,-36(fp)
   15fb0:	e0bffa15 	stw	r2,-24(fp)
   15fb4:	e0bffa17 	ldw	r2,-24(fp)
   15fb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   15fbc:	e0bfff17 	ldw	r2,-4(fp)
   15fc0:	00c01244 	movi	r3,73
   15fc4:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   15fc8:	e0bffd17 	ldw	r2,-12(fp)
   15fcc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15fd0:	00003106 	br	16098 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   15fd4:	e13ffd17 	ldw	r4,-12(fp)
   15fd8:	000b883a 	mov	r5,zero
   15fdc:	01800084 	movi	r6,2
   15fe0:	000f883a 	mov	r7,zero
   15fe4:	001321c0 	call	1321c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   15fe8:	e0bffd17 	ldw	r2,-12(fp)
   15fec:	10800283 	ldbu	r2,10(r2)
   15ff0:	10803fcc 	andi	r2,r2,255
   15ff4:	103ff71e 	bne	r2,zero,15fd4 <__alt_mem_Flash_flash_data+0xf4015fd4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15ff8:	e0bffd17 	ldw	r2,-12(fp)
   15ffc:	00c00fc4 	movi	r3,63
   16000:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16004:	e0bffd17 	ldw	r2,-12(fp)
   16008:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1600c:	e0bffd17 	ldw	r2,-12(fp)
   16010:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16014:	008000b4 	movhi	r2,2
   16018:	108f6504 	addi	r2,r2,15764
   1601c:	10c00017 	ldw	r3,0(r2)
   16020:	e0bffd17 	ldw	r2,-12(fp)
   16024:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16028:	e0bffd17 	ldw	r2,-12(fp)
   1602c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16030:	008000b4 	movhi	r2,2
   16034:	108f6504 	addi	r2,r2,15764
   16038:	e0fffd17 	ldw	r3,-12(fp)
   1603c:	10c00015 	stw	r3,0(r2)
   16040:	e0bff717 	ldw	r2,-36(fp)
   16044:	e0bffb15 	stw	r2,-20(fp)
   16048:	e0bffb17 	ldw	r2,-20(fp)
   1604c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16050:	e0bff503 	ldbu	r2,-44(fp)
   16054:	10800058 	cmpnei	r2,r2,1
   16058:	1000011e 	bne	r2,zero,16060 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1605c:	0013c340 	call	13c34 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   16060:	e0bfff17 	ldw	r2,-4(fp)
   16064:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   16068:	e03ff615 	stw	zero,-40(fp)
             break;
   1606c:	00000a06 	br	16098 <OSMboxDel+0x250>
   16070:	e0bff717 	ldw	r2,-36(fp)
   16074:	e0bffc15 	stw	r2,-16(fp)
   16078:	e0bffc17 	ldw	r2,-16(fp)
   1607c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   16080:	e0bfff17 	ldw	r2,-4(fp)
   16084:	00c001c4 	movi	r3,7
   16088:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   1608c:	e0bffd17 	ldw	r2,-12(fp)
   16090:	e0bff615 	stw	r2,-40(fp)
             break;
   16094:	0001883a 	nop
    }
    return (pevent_return);
   16098:	e0bff617 	ldw	r2,-40(fp)
}
   1609c:	e037883a 	mov	sp,fp
   160a0:	dfc00117 	ldw	ra,4(sp)
   160a4:	df000017 	ldw	fp,0(sp)
   160a8:	dec00204 	addi	sp,sp,8
   160ac:	f800283a 	ret

000160b0 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   160b0:	defff404 	addi	sp,sp,-48
   160b4:	dfc00b15 	stw	ra,44(sp)
   160b8:	df000a15 	stw	fp,40(sp)
   160bc:	df000a04 	addi	fp,sp,40
   160c0:	e13ffd15 	stw	r4,-12(fp)
   160c4:	2805883a 	mov	r2,r5
   160c8:	e1bfff15 	stw	r6,-4(fp)
   160cc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   160d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   160d4:	e0bfff17 	ldw	r2,-4(fp)
   160d8:	1000021e 	bne	r2,zero,160e4 <OSMboxPend+0x34>
        return ((void *)0);
   160dc:	0005883a 	mov	r2,zero
   160e0:	00009706 	br	16340 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   160e4:	e0bffd17 	ldw	r2,-12(fp)
   160e8:	1000051e 	bne	r2,zero,16100 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   160ec:	e0bfff17 	ldw	r2,-4(fp)
   160f0:	00c00104 	movi	r3,4
   160f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   160f8:	0005883a 	mov	r2,zero
   160fc:	00009006 	br	16340 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   16100:	e0bffd17 	ldw	r2,-12(fp)
   16104:	10800003 	ldbu	r2,0(r2)
   16108:	10803fcc 	andi	r2,r2,255
   1610c:	10800060 	cmpeqi	r2,r2,1
   16110:	1000051e 	bne	r2,zero,16128 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16114:	e0bfff17 	ldw	r2,-4(fp)
   16118:	00c00044 	movi	r3,1
   1611c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16120:	0005883a 	mov	r2,zero
   16124:	00008606 	br	16340 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   16128:	008000b4 	movhi	r2,2
   1612c:	108f6604 	addi	r2,r2,15768
   16130:	10800003 	ldbu	r2,0(r2)
   16134:	10803fcc 	andi	r2,r2,255
   16138:	10000526 	beq	r2,zero,16150 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1613c:	e0bfff17 	ldw	r2,-4(fp)
   16140:	00c00084 	movi	r3,2
   16144:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16148:	0005883a 	mov	r2,zero
   1614c:	00007c06 	br	16340 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16150:	008000b4 	movhi	r2,2
   16154:	108f5804 	addi	r2,r2,15712
   16158:	10800003 	ldbu	r2,0(r2)
   1615c:	10803fcc 	andi	r2,r2,255
   16160:	10000526 	beq	r2,zero,16178 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16164:	e0bfff17 	ldw	r2,-4(fp)
   16168:	00c00344 	movi	r3,13
   1616c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16170:	0005883a 	mov	r2,zero
   16174:	00007206 	br	16340 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16178:	0005303a 	rdctl	r2,status
   1617c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16180:	e0fff817 	ldw	r3,-32(fp)
   16184:	00bfff84 	movi	r2,-2
   16188:	1884703a 	and	r2,r3,r2
   1618c:	1001703a 	wrctl	status,r2
  
  return context;
   16190:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16194:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   16198:	e0bffd17 	ldw	r2,-12(fp)
   1619c:	10800117 	ldw	r2,4(r2)
   161a0:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   161a4:	e0bff617 	ldw	r2,-40(fp)
   161a8:	10000a26 	beq	r2,zero,161d4 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   161ac:	e0bffd17 	ldw	r2,-12(fp)
   161b0:	10000115 	stw	zero,4(r2)
   161b4:	e0bff717 	ldw	r2,-36(fp)
   161b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161bc:	e0bff917 	ldw	r2,-28(fp)
   161c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   161c4:	e0bfff17 	ldw	r2,-4(fp)
   161c8:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   161cc:	e0bff617 	ldw	r2,-40(fp)
   161d0:	00005b06 	br	16340 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   161d4:	008000b4 	movhi	r2,2
   161d8:	108f6704 	addi	r2,r2,15772
   161dc:	10c00017 	ldw	r3,0(r2)
   161e0:	008000b4 	movhi	r2,2
   161e4:	108f6704 	addi	r2,r2,15772
   161e8:	10800017 	ldw	r2,0(r2)
   161ec:	10800c03 	ldbu	r2,48(r2)
   161f0:	10800094 	ori	r2,r2,2
   161f4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   161f8:	008000b4 	movhi	r2,2
   161fc:	108f6704 	addi	r2,r2,15772
   16200:	10800017 	ldw	r2,0(r2)
   16204:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   16208:	008000b4 	movhi	r2,2
   1620c:	108f6704 	addi	r2,r2,15772
   16210:	10800017 	ldw	r2,0(r2)
   16214:	e0fffe0b 	ldhu	r3,-8(fp)
   16218:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1621c:	e13ffd17 	ldw	r4,-12(fp)
   16220:	00133b40 	call	133b4 <OS_EventTaskWait>
   16224:	e0bff717 	ldw	r2,-36(fp)
   16228:	e0bffa15 	stw	r2,-24(fp)
   1622c:	e0bffa17 	ldw	r2,-24(fp)
   16230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   16234:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16238:	0005303a 	rdctl	r2,status
   1623c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16240:	e0fffb17 	ldw	r3,-20(fp)
   16244:	00bfff84 	movi	r2,-2
   16248:	1884703a 	and	r2,r3,r2
   1624c:	1001703a 	wrctl	status,r2
  
  return context;
   16250:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16254:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16258:	008000b4 	movhi	r2,2
   1625c:	108f6704 	addi	r2,r2,15772
   16260:	10800017 	ldw	r2,0(r2)
   16264:	10800c43 	ldbu	r2,49(r2)
   16268:	10803fcc 	andi	r2,r2,255
   1626c:	10000326 	beq	r2,zero,1627c <OSMboxPend+0x1cc>
   16270:	108000a0 	cmpeqi	r2,r2,2
   16274:	1000091e 	bne	r2,zero,1629c <OSMboxPend+0x1ec>
   16278:	00000d06 	br	162b0 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   1627c:	008000b4 	movhi	r2,2
   16280:	108f6704 	addi	r2,r2,15772
   16284:	10800017 	ldw	r2,0(r2)
   16288:	10800917 	ldw	r2,36(r2)
   1628c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   16290:	e0bfff17 	ldw	r2,-4(fp)
   16294:	10000005 	stb	zero,0(r2)
             break;
   16298:	00001006 	br	162dc <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1629c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   162a0:	e0bfff17 	ldw	r2,-4(fp)
   162a4:	00c00384 	movi	r3,14
   162a8:	10c00005 	stb	r3,0(r2)
             break;
   162ac:	00000b06 	br	162dc <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   162b0:	008000b4 	movhi	r2,2
   162b4:	108f6704 	addi	r2,r2,15772
   162b8:	10800017 	ldw	r2,0(r2)
   162bc:	1009883a 	mov	r4,r2
   162c0:	e17ffd17 	ldw	r5,-12(fp)
   162c4:	001360c0 	call	1360c <OS_EventTaskRemove>
             pmsg = (void *)0;
   162c8:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   162cc:	e0bfff17 	ldw	r2,-4(fp)
   162d0:	00c00284 	movi	r3,10
   162d4:	10c00005 	stb	r3,0(r2)
             break;
   162d8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   162dc:	008000b4 	movhi	r2,2
   162e0:	108f6704 	addi	r2,r2,15772
   162e4:	10800017 	ldw	r2,0(r2)
   162e8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   162ec:	008000b4 	movhi	r2,2
   162f0:	108f6704 	addi	r2,r2,15772
   162f4:	10800017 	ldw	r2,0(r2)
   162f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   162fc:	008000b4 	movhi	r2,2
   16300:	108f6704 	addi	r2,r2,15772
   16304:	10800017 	ldw	r2,0(r2)
   16308:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1630c:	008000b4 	movhi	r2,2
   16310:	108f6704 	addi	r2,r2,15772
   16314:	10800017 	ldw	r2,0(r2)
   16318:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1631c:	008000b4 	movhi	r2,2
   16320:	108f6704 	addi	r2,r2,15772
   16324:	10800017 	ldw	r2,0(r2)
   16328:	10000915 	stw	zero,36(r2)
   1632c:	e0bff717 	ldw	r2,-36(fp)
   16330:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16334:	e0bffc17 	ldw	r2,-16(fp)
   16338:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1633c:	e0bff617 	ldw	r2,-40(fp)
}
   16340:	e037883a 	mov	sp,fp
   16344:	dfc00117 	ldw	ra,4(sp)
   16348:	df000017 	ldw	fp,0(sp)
   1634c:	dec00204 	addi	sp,sp,8
   16350:	f800283a 	ret

00016354 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16354:	defff604 	addi	sp,sp,-40
   16358:	dfc00915 	stw	ra,36(sp)
   1635c:	df000815 	stw	fp,32(sp)
   16360:	df000804 	addi	fp,sp,32
   16364:	e13ffd15 	stw	r4,-12(fp)
   16368:	2805883a 	mov	r2,r5
   1636c:	e1bfff15 	stw	r6,-4(fp)
   16370:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16374:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16378:	e0bfff17 	ldw	r2,-4(fp)
   1637c:	1000021e 	bne	r2,zero,16388 <OSMboxPendAbort+0x34>
        return (0);
   16380:	0005883a 	mov	r2,zero
   16384:	00004906 	br	164ac <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16388:	e0bffd17 	ldw	r2,-12(fp)
   1638c:	1000051e 	bne	r2,zero,163a4 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16390:	e0bfff17 	ldw	r2,-4(fp)
   16394:	00c00104 	movi	r3,4
   16398:	10c00005 	stb	r3,0(r2)
        return (0);
   1639c:	0005883a 	mov	r2,zero
   163a0:	00004206 	br	164ac <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   163a4:	e0bffd17 	ldw	r2,-12(fp)
   163a8:	10800003 	ldbu	r2,0(r2)
   163ac:	10803fcc 	andi	r2,r2,255
   163b0:	10800060 	cmpeqi	r2,r2,1
   163b4:	1000051e 	bne	r2,zero,163cc <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   163b8:	e0bfff17 	ldw	r2,-4(fp)
   163bc:	00c00044 	movi	r3,1
   163c0:	10c00005 	stb	r3,0(r2)
        return (0);
   163c4:	0005883a 	mov	r2,zero
   163c8:	00003806 	br	164ac <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163cc:	0005303a 	rdctl	r2,status
   163d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163d4:	e0fffa17 	ldw	r3,-24(fp)
   163d8:	00bfff84 	movi	r2,-2
   163dc:	1884703a 	and	r2,r3,r2
   163e0:	1001703a 	wrctl	status,r2
  
  return context;
   163e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   163e8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   163ec:	e0bffd17 	ldw	r2,-12(fp)
   163f0:	10800283 	ldbu	r2,10(r2)
   163f4:	10803fcc 	andi	r2,r2,255
   163f8:	10002526 	beq	r2,zero,16490 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   163fc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   16400:	e0bffe03 	ldbu	r2,-8(fp)
   16404:	10800060 	cmpeqi	r2,r2,1
   16408:	10000e26 	beq	r2,zero,16444 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   1640c:	00000806 	br	16430 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   16410:	e13ffd17 	ldw	r4,-12(fp)
   16414:	000b883a 	mov	r5,zero
   16418:	01800084 	movi	r6,2
   1641c:	01c00084 	movi	r7,2
   16420:	001321c0 	call	1321c <OS_EventTaskRdy>
                     nbr_tasks++;
   16424:	e0bff803 	ldbu	r2,-32(fp)
   16428:	10800044 	addi	r2,r2,1
   1642c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   16430:	e0bffd17 	ldw	r2,-12(fp)
   16434:	10800283 	ldbu	r2,10(r2)
   16438:	10803fcc 	andi	r2,r2,255
   1643c:	103ff41e 	bne	r2,zero,16410 <__alt_mem_Flash_flash_data+0xf4016410>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   16440:	00000906 	br	16468 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   16444:	e13ffd17 	ldw	r4,-12(fp)
   16448:	000b883a 	mov	r5,zero
   1644c:	01800084 	movi	r6,2
   16450:	01c00084 	movi	r7,2
   16454:	001321c0 	call	1321c <OS_EventTaskRdy>
                 nbr_tasks++;
   16458:	e0bff803 	ldbu	r2,-32(fp)
   1645c:	10800044 	addi	r2,r2,1
   16460:	e0bff805 	stb	r2,-32(fp)
                 break;
   16464:	0001883a 	nop
   16468:	e0bff917 	ldw	r2,-28(fp)
   1646c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16470:	e0bffb17 	ldw	r2,-20(fp)
   16474:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   16478:	0013c340 	call	13c34 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1647c:	e0bfff17 	ldw	r2,-4(fp)
   16480:	00c00384 	movi	r3,14
   16484:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16488:	e0bff803 	ldbu	r2,-32(fp)
   1648c:	00000706 	br	164ac <OSMboxPendAbort+0x158>
   16490:	e0bff917 	ldw	r2,-28(fp)
   16494:	e0bffc15 	stw	r2,-16(fp)
   16498:	e0bffc17 	ldw	r2,-16(fp)
   1649c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   164a0:	e0bfff17 	ldw	r2,-4(fp)
   164a4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   164a8:	0005883a 	mov	r2,zero
}
   164ac:	e037883a 	mov	sp,fp
   164b0:	dfc00117 	ldw	ra,4(sp)
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00204 	addi	sp,sp,8
   164bc:	f800283a 	ret

000164c0 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   164c0:	defff704 	addi	sp,sp,-36
   164c4:	dfc00815 	stw	ra,32(sp)
   164c8:	df000715 	stw	fp,28(sp)
   164cc:	df000704 	addi	fp,sp,28
   164d0:	e13ffe15 	stw	r4,-8(fp)
   164d4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   164d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   164dc:	e0bffe17 	ldw	r2,-8(fp)
   164e0:	1000021e 	bne	r2,zero,164ec <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   164e4:	00800104 	movi	r2,4
   164e8:	00003406 	br	165bc <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   164ec:	e0bfff17 	ldw	r2,-4(fp)
   164f0:	1000021e 	bne	r2,zero,164fc <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   164f4:	008000c4 	movi	r2,3
   164f8:	00003006 	br	165bc <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   164fc:	e0bffe17 	ldw	r2,-8(fp)
   16500:	10800003 	ldbu	r2,0(r2)
   16504:	10803fcc 	andi	r2,r2,255
   16508:	10800060 	cmpeqi	r2,r2,1
   1650c:	1000021e 	bne	r2,zero,16518 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   16510:	00800044 	movi	r2,1
   16514:	00002906 	br	165bc <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16518:	0005303a 	rdctl	r2,status
   1651c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16520:	e0fffa17 	ldw	r3,-24(fp)
   16524:	00bfff84 	movi	r2,-2
   16528:	1884703a 	and	r2,r3,r2
   1652c:	1001703a 	wrctl	status,r2
  
  return context;
   16530:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16534:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   16538:	e0bffe17 	ldw	r2,-8(fp)
   1653c:	10800283 	ldbu	r2,10(r2)
   16540:	10803fcc 	andi	r2,r2,255
   16544:	10000c26 	beq	r2,zero,16578 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16548:	e13ffe17 	ldw	r4,-8(fp)
   1654c:	e17fff17 	ldw	r5,-4(fp)
   16550:	01800084 	movi	r6,2
   16554:	000f883a 	mov	r7,zero
   16558:	001321c0 	call	1321c <OS_EventTaskRdy>
   1655c:	e0bff917 	ldw	r2,-28(fp)
   16560:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16564:	e0bffb17 	ldw	r2,-20(fp)
   16568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1656c:	0013c340 	call	13c34 <OS_Sched>
        return (OS_ERR_NONE);
   16570:	0005883a 	mov	r2,zero
   16574:	00001106 	br	165bc <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   16578:	e0bffe17 	ldw	r2,-8(fp)
   1657c:	10800117 	ldw	r2,4(r2)
   16580:	10000626 	beq	r2,zero,1659c <OSMboxPost+0xdc>
   16584:	e0bff917 	ldw	r2,-28(fp)
   16588:	e0bffc15 	stw	r2,-16(fp)
   1658c:	e0bffc17 	ldw	r2,-16(fp)
   16590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   16594:	00800504 	movi	r2,20
   16598:	00000806 	br	165bc <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1659c:	e0bffe17 	ldw	r2,-8(fp)
   165a0:	e0ffff17 	ldw	r3,-4(fp)
   165a4:	10c00115 	stw	r3,4(r2)
   165a8:	e0bff917 	ldw	r2,-28(fp)
   165ac:	e0bffd15 	stw	r2,-12(fp)
   165b0:	e0bffd17 	ldw	r2,-12(fp)
   165b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   165b8:	0005883a 	mov	r2,zero
}
   165bc:	e037883a 	mov	sp,fp
   165c0:	dfc00117 	ldw	ra,4(sp)
   165c4:	df000017 	ldw	fp,0(sp)
   165c8:	dec00204 	addi	sp,sp,8
   165cc:	f800283a 	ret

000165d0 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   165d0:	defff604 	addi	sp,sp,-40
   165d4:	dfc00915 	stw	ra,36(sp)
   165d8:	df000815 	stw	fp,32(sp)
   165dc:	df000804 	addi	fp,sp,32
   165e0:	e13ffd15 	stw	r4,-12(fp)
   165e4:	e17ffe15 	stw	r5,-8(fp)
   165e8:	3005883a 	mov	r2,r6
   165ec:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   165f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   165f4:	e0bffd17 	ldw	r2,-12(fp)
   165f8:	1000021e 	bne	r2,zero,16604 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   165fc:	00800104 	movi	r2,4
   16600:	00004506 	br	16718 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   16604:	e0bffe17 	ldw	r2,-8(fp)
   16608:	1000021e 	bne	r2,zero,16614 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   1660c:	008000c4 	movi	r2,3
   16610:	00004106 	br	16718 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   16614:	e0bffd17 	ldw	r2,-12(fp)
   16618:	10800003 	ldbu	r2,0(r2)
   1661c:	10803fcc 	andi	r2,r2,255
   16620:	10800060 	cmpeqi	r2,r2,1
   16624:	1000021e 	bne	r2,zero,16630 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   16628:	00800044 	movi	r2,1
   1662c:	00003a06 	br	16718 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16630:	0005303a 	rdctl	r2,status
   16634:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16638:	e0fff917 	ldw	r3,-28(fp)
   1663c:	00bfff84 	movi	r2,-2
   16640:	1884703a 	and	r2,r3,r2
   16644:	1001703a 	wrctl	status,r2
  
  return context;
   16648:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1664c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   16650:	e0bffd17 	ldw	r2,-12(fp)
   16654:	10800283 	ldbu	r2,10(r2)
   16658:	10803fcc 	andi	r2,r2,255
   1665c:	10001d26 	beq	r2,zero,166d4 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   16660:	e0bfff03 	ldbu	r2,-4(fp)
   16664:	1080004c 	andi	r2,r2,1
   16668:	10000b26 	beq	r2,zero,16698 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   1666c:	00000506 	br	16684 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16670:	e13ffd17 	ldw	r4,-12(fp)
   16674:	e17ffe17 	ldw	r5,-8(fp)
   16678:	01800084 	movi	r6,2
   1667c:	000f883a 	mov	r7,zero
   16680:	001321c0 	call	1321c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   16684:	e0bffd17 	ldw	r2,-12(fp)
   16688:	10800283 	ldbu	r2,10(r2)
   1668c:	10803fcc 	andi	r2,r2,255
   16690:	103ff71e 	bne	r2,zero,16670 <__alt_mem_Flash_flash_data+0xf4016670>
   16694:	00000506 	br	166ac <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16698:	e13ffd17 	ldw	r4,-12(fp)
   1669c:	e17ffe17 	ldw	r5,-8(fp)
   166a0:	01800084 	movi	r6,2
   166a4:	000f883a 	mov	r7,zero
   166a8:	001321c0 	call	1321c <OS_EventTaskRdy>
   166ac:	e0bff817 	ldw	r2,-32(fp)
   166b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166b4:	e0bffa17 	ldw	r2,-24(fp)
   166b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   166bc:	e0bfff03 	ldbu	r2,-4(fp)
   166c0:	1080010c 	andi	r2,r2,4
   166c4:	1000011e 	bne	r2,zero,166cc <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   166c8:	0013c340 	call	13c34 <OS_Sched>
        }
        return (OS_ERR_NONE);
   166cc:	0005883a 	mov	r2,zero
   166d0:	00001106 	br	16718 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   166d4:	e0bffd17 	ldw	r2,-12(fp)
   166d8:	10800117 	ldw	r2,4(r2)
   166dc:	10000626 	beq	r2,zero,166f8 <OSMboxPostOpt+0x128>
   166e0:	e0bff817 	ldw	r2,-32(fp)
   166e4:	e0bffb15 	stw	r2,-20(fp)
   166e8:	e0bffb17 	ldw	r2,-20(fp)
   166ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   166f0:	00800504 	movi	r2,20
   166f4:	00000806 	br	16718 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   166f8:	e0bffd17 	ldw	r2,-12(fp)
   166fc:	e0fffe17 	ldw	r3,-8(fp)
   16700:	10c00115 	stw	r3,4(r2)
   16704:	e0bff817 	ldw	r2,-32(fp)
   16708:	e0bffc15 	stw	r2,-16(fp)
   1670c:	e0bffc17 	ldw	r2,-16(fp)
   16710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16714:	0005883a 	mov	r2,zero
}
   16718:	e037883a 	mov	sp,fp
   1671c:	dfc00117 	ldw	ra,4(sp)
   16720:	df000017 	ldw	fp,0(sp)
   16724:	dec00204 	addi	sp,sp,8
   16728:	f800283a 	ret

0001672c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   1672c:	defff704 	addi	sp,sp,-36
   16730:	df000815 	stw	fp,32(sp)
   16734:	df000804 	addi	fp,sp,32
   16738:	e13ffe15 	stw	r4,-8(fp)
   1673c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16740:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16744:	e0bffe17 	ldw	r2,-8(fp)
   16748:	1000021e 	bne	r2,zero,16754 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1674c:	00800104 	movi	r2,4
   16750:	00003606 	br	1682c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   16754:	e0bfff17 	ldw	r2,-4(fp)
   16758:	1000021e 	bne	r2,zero,16764 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1675c:	00800244 	movi	r2,9
   16760:	00003206 	br	1682c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   16764:	e0bffe17 	ldw	r2,-8(fp)
   16768:	10800003 	ldbu	r2,0(r2)
   1676c:	10803fcc 	andi	r2,r2,255
   16770:	10800060 	cmpeqi	r2,r2,1
   16774:	1000021e 	bne	r2,zero,16780 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16778:	00800044 	movi	r2,1
   1677c:	00002b06 	br	1682c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16780:	0005303a 	rdctl	r2,status
   16784:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16788:	e0fffc17 	ldw	r3,-16(fp)
   1678c:	00bfff84 	movi	r2,-2
   16790:	1884703a 	and	r2,r3,r2
   16794:	1001703a 	wrctl	status,r2
  
  return context;
   16798:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1679c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   167a0:	e0bffe17 	ldw	r2,-8(fp)
   167a4:	10c00283 	ldbu	r3,10(r2)
   167a8:	e0bfff17 	ldw	r2,-4(fp)
   167ac:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   167b0:	e0bffe17 	ldw	r2,-8(fp)
   167b4:	108002c4 	addi	r2,r2,11
   167b8:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   167bc:	e0bfff17 	ldw	r2,-4(fp)
   167c0:	10800104 	addi	r2,r2,4
   167c4:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   167c8:	e03ff805 	stb	zero,-32(fp)
   167cc:	00000b06 	br	167fc <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   167d0:	e0bffa17 	ldw	r2,-24(fp)
   167d4:	10c00044 	addi	r3,r2,1
   167d8:	e0fffa15 	stw	r3,-24(fp)
   167dc:	e0fff917 	ldw	r3,-28(fp)
   167e0:	19000044 	addi	r4,r3,1
   167e4:	e13ff915 	stw	r4,-28(fp)
   167e8:	18c00003 	ldbu	r3,0(r3)
   167ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   167f0:	e0bff803 	ldbu	r2,-32(fp)
   167f4:	10800044 	addi	r2,r2,1
   167f8:	e0bff805 	stb	r2,-32(fp)
   167fc:	e0bff803 	ldbu	r2,-32(fp)
   16800:	108000f0 	cmpltui	r2,r2,3
   16804:	103ff21e 	bne	r2,zero,167d0 <__alt_mem_Flash_flash_data+0xf40167d0>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   16808:	e0bffe17 	ldw	r2,-8(fp)
   1680c:	10c00117 	ldw	r3,4(r2)
   16810:	e0bfff17 	ldw	r2,-4(fp)
   16814:	10c00015 	stw	r3,0(r2)
   16818:	e0bffb17 	ldw	r2,-20(fp)
   1681c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16820:	e0bffd17 	ldw	r2,-12(fp)
   16824:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16828:	0005883a 	mov	r2,zero
}
   1682c:	e037883a 	mov	sp,fp
   16830:	df000017 	ldw	fp,0(sp)
   16834:	dec00104 	addi	sp,sp,4
   16838:	f800283a 	ret

0001683c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1683c:	defff404 	addi	sp,sp,-48
   16840:	df000b15 	stw	fp,44(sp)
   16844:	df000b04 	addi	fp,sp,44
   16848:	e13ffc15 	stw	r4,-16(fp)
   1684c:	e17ffd15 	stw	r5,-12(fp)
   16850:	e1bffe15 	stw	r6,-8(fp)
   16854:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16858:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1685c:	e0bfff17 	ldw	r2,-4(fp)
   16860:	1000021e 	bne	r2,zero,1686c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   16864:	0005883a 	mov	r2,zero
   16868:	00006d06 	br	16a20 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1686c:	e0bffc17 	ldw	r2,-16(fp)
   16870:	1000051e 	bne	r2,zero,16888 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16874:	e0bfff17 	ldw	r2,-4(fp)
   16878:	00c01884 	movi	r3,98
   1687c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16880:	0005883a 	mov	r2,zero
   16884:	00006606 	br	16a20 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   16888:	e0bffc17 	ldw	r2,-16(fp)
   1688c:	108000cc 	andi	r2,r2,3
   16890:	10000526 	beq	r2,zero,168a8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16894:	e0bfff17 	ldw	r2,-4(fp)
   16898:	00c01884 	movi	r3,98
   1689c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   168a0:	0005883a 	mov	r2,zero
   168a4:	00005e06 	br	16a20 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   168a8:	e0bffd17 	ldw	r2,-12(fp)
   168ac:	108000a8 	cmpgeui	r2,r2,2
   168b0:	1000051e 	bne	r2,zero,168c8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   168b4:	e0bfff17 	ldw	r2,-4(fp)
   168b8:	00c016c4 	movi	r3,91
   168bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   168c0:	0005883a 	mov	r2,zero
   168c4:	00005606 	br	16a20 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   168c8:	e0bffe17 	ldw	r2,-8(fp)
   168cc:	10800128 	cmpgeui	r2,r2,4
   168d0:	1000051e 	bne	r2,zero,168e8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   168d4:	e0bfff17 	ldw	r2,-4(fp)
   168d8:	00c01704 	movi	r3,92
   168dc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   168e0:	0005883a 	mov	r2,zero
   168e4:	00004e06 	br	16a20 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168e8:	0005303a 	rdctl	r2,status
   168ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168f0:	e0fffa17 	ldw	r3,-24(fp)
   168f4:	00bfff84 	movi	r2,-2
   168f8:	1884703a 	and	r2,r3,r2
   168fc:	1001703a 	wrctl	status,r2
  
  return context;
   16900:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16904:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   16908:	008000b4 	movhi	r2,2
   1690c:	108f6104 	addi	r2,r2,15748
   16910:	10800017 	ldw	r2,0(r2)
   16914:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   16918:	008000b4 	movhi	r2,2
   1691c:	108f6104 	addi	r2,r2,15748
   16920:	10800017 	ldw	r2,0(r2)
   16924:	10000726 	beq	r2,zero,16944 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   16928:	008000b4 	movhi	r2,2
   1692c:	108f6104 	addi	r2,r2,15748
   16930:	10800017 	ldw	r2,0(r2)
   16934:	10c00117 	ldw	r3,4(r2)
   16938:	008000b4 	movhi	r2,2
   1693c:	108f6104 	addi	r2,r2,15748
   16940:	10c00015 	stw	r3,0(r2)
   16944:	e0bff817 	ldw	r2,-32(fp)
   16948:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1694c:	e0bffb17 	ldw	r2,-20(fp)
   16950:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   16954:	e0bff917 	ldw	r2,-28(fp)
   16958:	1000051e 	bne	r2,zero,16970 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   1695c:	e0bfff17 	ldw	r2,-4(fp)
   16960:	00c01684 	movi	r3,90
   16964:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16968:	0005883a 	mov	r2,zero
   1696c:	00002c06 	br	16a20 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   16970:	e0bffc17 	ldw	r2,-16(fp)
   16974:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   16978:	e0fffc17 	ldw	r3,-16(fp)
   1697c:	e0bffe17 	ldw	r2,-8(fp)
   16980:	1885883a 	add	r2,r3,r2
   16984:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   16988:	e03ff715 	stw	zero,-36(fp)
   1698c:	00000c06 	br	169c0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   16990:	e0bff617 	ldw	r2,-40(fp)
   16994:	e0fff517 	ldw	r3,-44(fp)
   16998:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1699c:	e0bff517 	ldw	r2,-44(fp)
   169a0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   169a4:	e0fff517 	ldw	r3,-44(fp)
   169a8:	e0bffe17 	ldw	r2,-8(fp)
   169ac:	1885883a 	add	r2,r3,r2
   169b0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   169b4:	e0bff717 	ldw	r2,-36(fp)
   169b8:	10800044 	addi	r2,r2,1
   169bc:	e0bff715 	stw	r2,-36(fp)
   169c0:	e0bffd17 	ldw	r2,-12(fp)
   169c4:	10bfffc4 	addi	r2,r2,-1
   169c8:	e0fff717 	ldw	r3,-36(fp)
   169cc:	18bff036 	bltu	r3,r2,16990 <__alt_mem_Flash_flash_data+0xf4016990>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   169d0:	e0bff617 	ldw	r2,-40(fp)
   169d4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   169d8:	e0bff917 	ldw	r2,-28(fp)
   169dc:	e0fffc17 	ldw	r3,-16(fp)
   169e0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   169e4:	e0bff917 	ldw	r2,-28(fp)
   169e8:	e0fffc17 	ldw	r3,-16(fp)
   169ec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   169f0:	e0bff917 	ldw	r2,-28(fp)
   169f4:	e0fffd17 	ldw	r3,-12(fp)
   169f8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   169fc:	e0bff917 	ldw	r2,-28(fp)
   16a00:	e0fffd17 	ldw	r3,-12(fp)
   16a04:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   16a08:	e0bff917 	ldw	r2,-28(fp)
   16a0c:	e0fffe17 	ldw	r3,-8(fp)
   16a10:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   16a14:	e0bfff17 	ldw	r2,-4(fp)
   16a18:	10000005 	stb	zero,0(r2)
    return (pmem);
   16a1c:	e0bff917 	ldw	r2,-28(fp)
}
   16a20:	e037883a 	mov	sp,fp
   16a24:	df000017 	ldw	fp,0(sp)
   16a28:	dec00104 	addi	sp,sp,4
   16a2c:	f800283a 	ret

00016a30 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   16a30:	defff804 	addi	sp,sp,-32
   16a34:	df000715 	stw	fp,28(sp)
   16a38:	df000704 	addi	fp,sp,28
   16a3c:	e13ffe15 	stw	r4,-8(fp)
   16a40:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16a44:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16a48:	e0bfff17 	ldw	r2,-4(fp)
   16a4c:	1000021e 	bne	r2,zero,16a58 <OSMemGet+0x28>
        return ((void *)0);
   16a50:	0005883a 	mov	r2,zero
   16a54:	00002e06 	br	16b10 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   16a58:	e0bffe17 	ldw	r2,-8(fp)
   16a5c:	1000051e 	bne	r2,zero,16a74 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16a60:	e0bfff17 	ldw	r2,-4(fp)
   16a64:	00c01804 	movi	r3,96
   16a68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16a6c:	0005883a 	mov	r2,zero
   16a70:	00002706 	br	16b10 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a74:	0005303a 	rdctl	r2,status
   16a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a7c:	e0fffb17 	ldw	r3,-20(fp)
   16a80:	00bfff84 	movi	r2,-2
   16a84:	1884703a 	and	r2,r3,r2
   16a88:	1001703a 	wrctl	status,r2
  
  return context;
   16a8c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16a90:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   16a94:	e0bffe17 	ldw	r2,-8(fp)
   16a98:	10800417 	ldw	r2,16(r2)
   16a9c:	10001426 	beq	r2,zero,16af0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   16aa0:	e0bffe17 	ldw	r2,-8(fp)
   16aa4:	10800117 	ldw	r2,4(r2)
   16aa8:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   16aac:	e0bffa17 	ldw	r2,-24(fp)
   16ab0:	10c00017 	ldw	r3,0(r2)
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   16abc:	e0bffe17 	ldw	r2,-8(fp)
   16ac0:	10800417 	ldw	r2,16(r2)
   16ac4:	10ffffc4 	addi	r3,r2,-1
   16ac8:	e0bffe17 	ldw	r2,-8(fp)
   16acc:	10c00415 	stw	r3,16(r2)
   16ad0:	e0bff917 	ldw	r2,-28(fp)
   16ad4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ad8:	e0bffc17 	ldw	r2,-16(fp)
   16adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   16ae0:	e0bfff17 	ldw	r2,-4(fp)
   16ae4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   16ae8:	e0bffa17 	ldw	r2,-24(fp)
   16aec:	00000806 	br	16b10 <OSMemGet+0xe0>
   16af0:	e0bff917 	ldw	r2,-28(fp)
   16af4:	e0bffd15 	stw	r2,-12(fp)
   16af8:	e0bffd17 	ldw	r2,-12(fp)
   16afc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   16b00:	e0bfff17 	ldw	r2,-4(fp)
   16b04:	00c01744 	movi	r3,93
   16b08:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   16b0c:	0005883a 	mov	r2,zero
}
   16b10:	e037883a 	mov	sp,fp
   16b14:	df000017 	ldw	fp,0(sp)
   16b18:	dec00104 	addi	sp,sp,4
   16b1c:	f800283a 	ret

00016b20 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16b20:	defff704 	addi	sp,sp,-36
   16b24:	dfc00815 	stw	ra,32(sp)
   16b28:	df000715 	stw	fp,28(sp)
   16b2c:	df000704 	addi	fp,sp,28
   16b30:	e13ffd15 	stw	r4,-12(fp)
   16b34:	e17ffe15 	stw	r5,-8(fp)
   16b38:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16b3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16b40:	e0bfff17 	ldw	r2,-4(fp)
   16b44:	1000021e 	bne	r2,zero,16b50 <OSMemNameGet+0x30>
        return (0);
   16b48:	0005883a 	mov	r2,zero
   16b4c:	00002d06 	br	16c04 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16b50:	e0bffd17 	ldw	r2,-12(fp)
   16b54:	1000051e 	bne	r2,zero,16b6c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16b58:	e0bfff17 	ldw	r2,-4(fp)
   16b5c:	00c01804 	movi	r3,96
   16b60:	10c00005 	stb	r3,0(r2)
        return (0);
   16b64:	0005883a 	mov	r2,zero
   16b68:	00002606 	br	16c04 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16b6c:	e0bffe17 	ldw	r2,-8(fp)
   16b70:	1000051e 	bne	r2,zero,16b88 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16b74:	e0bfff17 	ldw	r2,-4(fp)
   16b78:	00c00304 	movi	r3,12
   16b7c:	10c00005 	stb	r3,0(r2)
        return (0);
   16b80:	0005883a 	mov	r2,zero
   16b84:	00001f06 	br	16c04 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16b88:	008000b4 	movhi	r2,2
   16b8c:	108f6604 	addi	r2,r2,15768
   16b90:	10800003 	ldbu	r2,0(r2)
   16b94:	10803fcc 	andi	r2,r2,255
   16b98:	10000526 	beq	r2,zero,16bb0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   16b9c:	e0bfff17 	ldw	r2,-4(fp)
   16ba0:	00c00444 	movi	r3,17
   16ba4:	10c00005 	stb	r3,0(r2)
        return (0);
   16ba8:	0005883a 	mov	r2,zero
   16bac:	00001506 	br	16c04 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bb0:	0005303a 	rdctl	r2,status
   16bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bb8:	e0fffb17 	ldw	r3,-20(fp)
   16bbc:	00bfff84 	movi	r2,-2
   16bc0:	1884703a 	and	r2,r3,r2
   16bc4:	1001703a 	wrctl	status,r2
  
  return context;
   16bc8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16bcc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   16bd0:	e0bffd17 	ldw	r2,-12(fp)
   16bd4:	10800504 	addi	r2,r2,20
   16bd8:	e13ffe17 	ldw	r4,-8(fp)
   16bdc:	100b883a 	mov	r5,r2
   16be0:	0013d700 	call	13d70 <OS_StrCopy>
   16be4:	e0bffa05 	stb	r2,-24(fp)
   16be8:	e0bff917 	ldw	r2,-28(fp)
   16bec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bf0:	e0bffc17 	ldw	r2,-16(fp)
   16bf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	10000005 	stb	zero,0(r2)
    return (len);
   16c00:	e0bffa03 	ldbu	r2,-24(fp)
}
   16c04:	e037883a 	mov	sp,fp
   16c08:	dfc00117 	ldw	ra,4(sp)
   16c0c:	df000017 	ldw	fp,0(sp)
   16c10:	dec00204 	addi	sp,sp,8
   16c14:	f800283a 	ret

00016c18 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16c18:	defff604 	addi	sp,sp,-40
   16c1c:	dfc00915 	stw	ra,36(sp)
   16c20:	df000815 	stw	fp,32(sp)
   16c24:	df000804 	addi	fp,sp,32
   16c28:	e13ffd15 	stw	r4,-12(fp)
   16c2c:	e17ffe15 	stw	r5,-8(fp)
   16c30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16c34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16c38:	e0bfff17 	ldw	r2,-4(fp)
   16c3c:	1000011e 	bne	r2,zero,16c44 <OSMemNameSet+0x2c>
        return;
   16c40:	00003606 	br	16d1c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16c44:	e0bffd17 	ldw	r2,-12(fp)
   16c48:	1000041e 	bne	r2,zero,16c5c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	00c01804 	movi	r3,96
   16c54:	10c00005 	stb	r3,0(r2)
        return;
   16c58:	00003006 	br	16d1c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16c5c:	e0bffe17 	ldw	r2,-8(fp)
   16c60:	1000041e 	bne	r2,zero,16c74 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   16c64:	e0bfff17 	ldw	r2,-4(fp)
   16c68:	00c00304 	movi	r3,12
   16c6c:	10c00005 	stb	r3,0(r2)
        return;
   16c70:	00002a06 	br	16d1c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16c74:	008000b4 	movhi	r2,2
   16c78:	108f6604 	addi	r2,r2,15768
   16c7c:	10800003 	ldbu	r2,0(r2)
   16c80:	10803fcc 	andi	r2,r2,255
   16c84:	10000426 	beq	r2,zero,16c98 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   16c88:	e0bfff17 	ldw	r2,-4(fp)
   16c8c:	00c00484 	movi	r3,18
   16c90:	10c00005 	stb	r3,0(r2)
        return;
   16c94:	00002106 	br	16d1c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c98:	0005303a 	rdctl	r2,status
   16c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ca0:	e0fffa17 	ldw	r3,-24(fp)
   16ca4:	00bfff84 	movi	r2,-2
   16ca8:	1884703a 	and	r2,r3,r2
   16cac:	1001703a 	wrctl	status,r2
  
  return context;
   16cb0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16cb4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16cb8:	e13ffe17 	ldw	r4,-8(fp)
   16cbc:	0013de40 	call	13de4 <OS_StrLen>
   16cc0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   16cc4:	e0bff903 	ldbu	r2,-28(fp)
   16cc8:	10800830 	cmpltui	r2,r2,32
   16ccc:	1000081e 	bne	r2,zero,16cf0 <OSMemNameSet+0xd8>
   16cd0:	e0bff817 	ldw	r2,-32(fp)
   16cd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cd8:	e0bffb17 	ldw	r2,-20(fp)
   16cdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   16ce0:	e0bfff17 	ldw	r2,-4(fp)
   16ce4:	00c018c4 	movi	r3,99
   16ce8:	10c00005 	stb	r3,0(r2)
        return;
   16cec:	00000b06 	br	16d1c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   16cf0:	e0bffd17 	ldw	r2,-12(fp)
   16cf4:	10800504 	addi	r2,r2,20
   16cf8:	1009883a 	mov	r4,r2
   16cfc:	e17ffe17 	ldw	r5,-8(fp)
   16d00:	0013d700 	call	13d70 <OS_StrCopy>
   16d04:	e0bff817 	ldw	r2,-32(fp)
   16d08:	e0bffc15 	stw	r2,-16(fp)
   16d0c:	e0bffc17 	ldw	r2,-16(fp)
   16d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16d14:	e0bfff17 	ldw	r2,-4(fp)
   16d18:	10000005 	stb	zero,0(r2)
}
   16d1c:	e037883a 	mov	sp,fp
   16d20:	dfc00117 	ldw	ra,4(sp)
   16d24:	df000017 	ldw	fp,0(sp)
   16d28:	dec00204 	addi	sp,sp,8
   16d2c:	f800283a 	ret

00016d30 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   16d30:	defff904 	addi	sp,sp,-28
   16d34:	df000615 	stw	fp,24(sp)
   16d38:	df000604 	addi	fp,sp,24
   16d3c:	e13ffe15 	stw	r4,-8(fp)
   16d40:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16d44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   16d48:	e0bffe17 	ldw	r2,-8(fp)
   16d4c:	1000021e 	bne	r2,zero,16d58 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   16d50:	00801804 	movi	r2,96
   16d54:	00002806 	br	16df8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   16d58:	e0bfff17 	ldw	r2,-4(fp)
   16d5c:	1000021e 	bne	r2,zero,16d68 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   16d60:	008017c4 	movi	r2,95
   16d64:	00002406 	br	16df8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d68:	0005303a 	rdctl	r2,status
   16d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d70:	e0fffb17 	ldw	r3,-20(fp)
   16d74:	00bfff84 	movi	r2,-2
   16d78:	1884703a 	and	r2,r3,r2
   16d7c:	1001703a 	wrctl	status,r2
  
  return context;
   16d80:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16d84:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   16d88:	e0bffe17 	ldw	r2,-8(fp)
   16d8c:	10c00417 	ldw	r3,16(r2)
   16d90:	e0bffe17 	ldw	r2,-8(fp)
   16d94:	10800317 	ldw	r2,12(r2)
   16d98:	18800636 	bltu	r3,r2,16db4 <OSMemPut+0x84>
   16d9c:	e0bffa17 	ldw	r2,-24(fp)
   16da0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16da4:	e0bffc17 	ldw	r2,-16(fp)
   16da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   16dac:	00801784 	movi	r2,94
   16db0:	00001106 	br	16df8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   16db4:	e0bffe17 	ldw	r2,-8(fp)
   16db8:	10c00117 	ldw	r3,4(r2)
   16dbc:	e0bfff17 	ldw	r2,-4(fp)
   16dc0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   16dc4:	e0bffe17 	ldw	r2,-8(fp)
   16dc8:	e0ffff17 	ldw	r3,-4(fp)
   16dcc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   16dd0:	e0bffe17 	ldw	r2,-8(fp)
   16dd4:	10800417 	ldw	r2,16(r2)
   16dd8:	10c00044 	addi	r3,r2,1
   16ddc:	e0bffe17 	ldw	r2,-8(fp)
   16de0:	10c00415 	stw	r3,16(r2)
   16de4:	e0bffa17 	ldw	r2,-24(fp)
   16de8:	e0bffd15 	stw	r2,-12(fp)
   16dec:	e0bffd17 	ldw	r2,-12(fp)
   16df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   16df4:	0005883a 	mov	r2,zero
}
   16df8:	e037883a 	mov	sp,fp
   16dfc:	df000017 	ldw	fp,0(sp)
   16e00:	dec00104 	addi	sp,sp,4
   16e04:	f800283a 	ret

00016e08 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   16e08:	defffa04 	addi	sp,sp,-24
   16e0c:	df000515 	stw	fp,20(sp)
   16e10:	df000504 	addi	fp,sp,20
   16e14:	e13ffe15 	stw	r4,-8(fp)
   16e18:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16e1c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   16e20:	e0bffe17 	ldw	r2,-8(fp)
   16e24:	1000021e 	bne	r2,zero,16e30 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   16e28:	00801804 	movi	r2,96
   16e2c:	00002c06 	br	16ee0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   16e30:	e0bfff17 	ldw	r2,-4(fp)
   16e34:	1000021e 	bne	r2,zero,16e40 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   16e38:	00801844 	movi	r2,97
   16e3c:	00002806 	br	16ee0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e40:	0005303a 	rdctl	r2,status
   16e44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e48:	e0fffc17 	ldw	r3,-16(fp)
   16e4c:	00bfff84 	movi	r2,-2
   16e50:	1884703a 	and	r2,r3,r2
   16e54:	1001703a 	wrctl	status,r2
  
  return context;
   16e58:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16e5c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   16e60:	e0bffe17 	ldw	r2,-8(fp)
   16e64:	10c00017 	ldw	r3,0(r2)
   16e68:	e0bfff17 	ldw	r2,-4(fp)
   16e6c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   16e70:	e0bffe17 	ldw	r2,-8(fp)
   16e74:	10c00117 	ldw	r3,4(r2)
   16e78:	e0bfff17 	ldw	r2,-4(fp)
   16e7c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   16e80:	e0bffe17 	ldw	r2,-8(fp)
   16e84:	10c00217 	ldw	r3,8(r2)
   16e88:	e0bfff17 	ldw	r2,-4(fp)
   16e8c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   16e90:	e0bffe17 	ldw	r2,-8(fp)
   16e94:	10c00317 	ldw	r3,12(r2)
   16e98:	e0bfff17 	ldw	r2,-4(fp)
   16e9c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   16ea0:	e0bffe17 	ldw	r2,-8(fp)
   16ea4:	10c00417 	ldw	r3,16(r2)
   16ea8:	e0bfff17 	ldw	r2,-4(fp)
   16eac:	10c00415 	stw	r3,16(r2)
   16eb0:	e0bffb17 	ldw	r2,-20(fp)
   16eb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16eb8:	e0bffd17 	ldw	r2,-12(fp)
   16ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   16ec0:	e0bfff17 	ldw	r2,-4(fp)
   16ec4:	10c00317 	ldw	r3,12(r2)
   16ec8:	e0bfff17 	ldw	r2,-4(fp)
   16ecc:	10800417 	ldw	r2,16(r2)
   16ed0:	1887c83a 	sub	r3,r3,r2
   16ed4:	e0bfff17 	ldw	r2,-4(fp)
   16ed8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   16edc:	0005883a 	mov	r2,zero
}
   16ee0:	e037883a 	mov	sp,fp
   16ee4:	df000017 	ldw	fp,0(sp)
   16ee8:	dec00104 	addi	sp,sp,4
   16eec:	f800283a 	ret

00016ef0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   16ef0:	defffc04 	addi	sp,sp,-16
   16ef4:	dfc00315 	stw	ra,12(sp)
   16ef8:	df000215 	stw	fp,8(sp)
   16efc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   16f00:	010000f4 	movhi	r4,3
   16f04:	2138c804 	addi	r4,r4,-7392
   16f08:	01430c04 	movi	r5,3120
   16f0c:	0013b800 	call	13b80 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   16f10:	008000f4 	movhi	r2,3
   16f14:	10b8c804 	addi	r2,r2,-7392
   16f18:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16f1c:	e03fff0d 	sth	zero,-4(fp)
   16f20:	00001306 	br	16f70 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   16f24:	e0bfff0b 	ldhu	r2,-4(fp)
   16f28:	10800044 	addi	r2,r2,1
   16f2c:	10c00d24 	muli	r3,r2,52
   16f30:	008000f4 	movhi	r2,3
   16f34:	10b8c804 	addi	r2,r2,-7392
   16f38:	1887883a 	add	r3,r3,r2
   16f3c:	e0bffe17 	ldw	r2,-8(fp)
   16f40:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   16f44:	e0bffe17 	ldw	r2,-8(fp)
   16f48:	00c00fc4 	movi	r3,63
   16f4c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   16f50:	e0bffe17 	ldw	r2,-8(fp)
   16f54:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   16f58:	e0bffe17 	ldw	r2,-8(fp)
   16f5c:	10800d04 	addi	r2,r2,52
   16f60:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16f64:	e0bfff0b 	ldhu	r2,-4(fp)
   16f68:	10800044 	addi	r2,r2,1
   16f6c:	e0bfff0d 	sth	r2,-4(fp)
   16f70:	e0bfff0b 	ldhu	r2,-4(fp)
   16f74:	10800ef0 	cmpltui	r2,r2,59
   16f78:	103fea1e 	bne	r2,zero,16f24 <__alt_mem_Flash_flash_data+0xf4016f24>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   16f7c:	e0bffe17 	ldw	r2,-8(fp)
   16f80:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   16f84:	e0bffe17 	ldw	r2,-8(fp)
   16f88:	00c00fc4 	movi	r3,63
   16f8c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   16f90:	e0bffe17 	ldw	r2,-8(fp)
   16f94:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   16f98:	008000b4 	movhi	r2,2
   16f9c:	108f6104 	addi	r2,r2,15748
   16fa0:	00c000f4 	movhi	r3,3
   16fa4:	18f8c804 	addi	r3,r3,-7392
   16fa8:	10c00015 	stw	r3,0(r2)
#endif
}
   16fac:	e037883a 	mov	sp,fp
   16fb0:	dfc00117 	ldw	ra,4(sp)
   16fb4:	df000017 	ldw	fp,0(sp)
   16fb8:	dec00204 	addi	sp,sp,8
   16fbc:	f800283a 	ret

00016fc0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   16fc0:	defff804 	addi	sp,sp,-32
   16fc4:	df000715 	stw	fp,28(sp)
   16fc8:	df000704 	addi	fp,sp,28
   16fcc:	e13ffe15 	stw	r4,-8(fp)
   16fd0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16fd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16fd8:	e0bfff17 	ldw	r2,-4(fp)
   16fdc:	1000021e 	bne	r2,zero,16fe8 <OSQAccept+0x28>
        return ((void *)0);
   16fe0:	0005883a 	mov	r2,zero
   16fe4:	00004206 	br	170f0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16fe8:	e0bffe17 	ldw	r2,-8(fp)
   16fec:	1000051e 	bne	r2,zero,17004 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16ff0:	e0bfff17 	ldw	r2,-4(fp)
   16ff4:	00c00104 	movi	r3,4
   16ff8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16ffc:	0005883a 	mov	r2,zero
   17000:	00003b06 	br	170f0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17004:	e0bffe17 	ldw	r2,-8(fp)
   17008:	10800003 	ldbu	r2,0(r2)
   1700c:	10803fcc 	andi	r2,r2,255
   17010:	108000a0 	cmpeqi	r2,r2,2
   17014:	1000051e 	bne	r2,zero,1702c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17018:	e0bfff17 	ldw	r2,-4(fp)
   1701c:	00c00044 	movi	r3,1
   17020:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17024:	0005883a 	mov	r2,zero
   17028:	00003106 	br	170f0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1702c:	0005303a 	rdctl	r2,status
   17030:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17034:	e0fffc17 	ldw	r3,-16(fp)
   17038:	00bfff84 	movi	r2,-2
   1703c:	1884703a 	and	r2,r3,r2
   17040:	1001703a 	wrctl	status,r2
  
  return context;
   17044:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17048:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1704c:	e0bffe17 	ldw	r2,-8(fp)
   17050:	10800117 	ldw	r2,4(r2)
   17054:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17058:	e0bffb17 	ldw	r2,-20(fp)
   1705c:	1080058b 	ldhu	r2,22(r2)
   17060:	10bfffcc 	andi	r2,r2,65535
   17064:	10001926 	beq	r2,zero,170cc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17068:	e0bffb17 	ldw	r2,-20(fp)
   1706c:	10800417 	ldw	r2,16(r2)
   17070:	11000104 	addi	r4,r2,4
   17074:	e0fffb17 	ldw	r3,-20(fp)
   17078:	19000415 	stw	r4,16(r3)
   1707c:	10800017 	ldw	r2,0(r2)
   17080:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17084:	e0bffb17 	ldw	r2,-20(fp)
   17088:	1080058b 	ldhu	r2,22(r2)
   1708c:	10bfffc4 	addi	r2,r2,-1
   17090:	1007883a 	mov	r3,r2
   17094:	e0bffb17 	ldw	r2,-20(fp)
   17098:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1709c:	e0bffb17 	ldw	r2,-20(fp)
   170a0:	10c00417 	ldw	r3,16(r2)
   170a4:	e0bffb17 	ldw	r2,-20(fp)
   170a8:	10800217 	ldw	r2,8(r2)
   170ac:	1880041e 	bne	r3,r2,170c0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   170b0:	e0bffb17 	ldw	r2,-20(fp)
   170b4:	10c00117 	ldw	r3,4(r2)
   170b8:	e0bffb17 	ldw	r2,-20(fp)
   170bc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   170c0:	e0bfff17 	ldw	r2,-4(fp)
   170c4:	10000005 	stb	zero,0(r2)
   170c8:	00000406 	br	170dc <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   170cc:	e0bfff17 	ldw	r2,-4(fp)
   170d0:	00c007c4 	movi	r3,31
   170d4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   170d8:	e03ff915 	stw	zero,-28(fp)
   170dc:	e0bffa17 	ldw	r2,-24(fp)
   170e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170e4:	e0bffd17 	ldw	r2,-12(fp)
   170e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   170ec:	e0bff917 	ldw	r2,-28(fp)
}
   170f0:	e037883a 	mov	sp,fp
   170f4:	df000017 	ldw	fp,0(sp)
   170f8:	dec00104 	addi	sp,sp,4
   170fc:	f800283a 	ret

00017100 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17100:	defff404 	addi	sp,sp,-48
   17104:	dfc00b15 	stw	ra,44(sp)
   17108:	df000a15 	stw	fp,40(sp)
   1710c:	df000a04 	addi	fp,sp,40
   17110:	e13ffe15 	stw	r4,-8(fp)
   17114:	2805883a 	mov	r2,r5
   17118:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1711c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17120:	008000b4 	movhi	r2,2
   17124:	108f6604 	addi	r2,r2,15768
   17128:	10800003 	ldbu	r2,0(r2)
   1712c:	10803fcc 	andi	r2,r2,255
   17130:	10000226 	beq	r2,zero,1713c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17134:	0005883a 	mov	r2,zero
   17138:	00006b06 	br	172e8 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1713c:	0005303a 	rdctl	r2,status
   17140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17144:	e0fff917 	ldw	r3,-28(fp)
   17148:	00bfff84 	movi	r2,-2
   1714c:	1884703a 	and	r2,r3,r2
   17150:	1001703a 	wrctl	status,r2
  
  return context;
   17154:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17158:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1715c:	008000b4 	movhi	r2,2
   17160:	108f6504 	addi	r2,r2,15764
   17164:	10800017 	ldw	r2,0(r2)
   17168:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1716c:	008000b4 	movhi	r2,2
   17170:	108f6504 	addi	r2,r2,15764
   17174:	10800017 	ldw	r2,0(r2)
   17178:	10000726 	beq	r2,zero,17198 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1717c:	008000b4 	movhi	r2,2
   17180:	108f6504 	addi	r2,r2,15764
   17184:	10800017 	ldw	r2,0(r2)
   17188:	10c00117 	ldw	r3,4(r2)
   1718c:	008000b4 	movhi	r2,2
   17190:	108f6504 	addi	r2,r2,15764
   17194:	10c00015 	stw	r3,0(r2)
   17198:	e0bff717 	ldw	r2,-36(fp)
   1719c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171a0:	e0bffa17 	ldw	r2,-24(fp)
   171a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   171a8:	e0bff617 	ldw	r2,-40(fp)
   171ac:	10004d26 	beq	r2,zero,172e4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171b0:	0005303a 	rdctl	r2,status
   171b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171b8:	e0fffb17 	ldw	r3,-20(fp)
   171bc:	00bfff84 	movi	r2,-2
   171c0:	1884703a 	and	r2,r3,r2
   171c4:	1001703a 	wrctl	status,r2
  
  return context;
   171c8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   171cc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   171d0:	008000b4 	movhi	r2,2
   171d4:	108f6304 	addi	r2,r2,15756
   171d8:	10800017 	ldw	r2,0(r2)
   171dc:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   171e0:	e0bff817 	ldw	r2,-32(fp)
   171e4:	10003126 	beq	r2,zero,172ac <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   171e8:	008000b4 	movhi	r2,2
   171ec:	108f6304 	addi	r2,r2,15756
   171f0:	10800017 	ldw	r2,0(r2)
   171f4:	10c00017 	ldw	r3,0(r2)
   171f8:	008000b4 	movhi	r2,2
   171fc:	108f6304 	addi	r2,r2,15756
   17200:	10c00015 	stw	r3,0(r2)
   17204:	e0bff717 	ldw	r2,-36(fp)
   17208:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1720c:	e0bffc17 	ldw	r2,-16(fp)
   17210:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   17214:	e0bff817 	ldw	r2,-32(fp)
   17218:	e0fffe17 	ldw	r3,-8(fp)
   1721c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   17220:	e0bfff0b 	ldhu	r2,-4(fp)
   17224:	1085883a 	add	r2,r2,r2
   17228:	1085883a 	add	r2,r2,r2
   1722c:	1007883a 	mov	r3,r2
   17230:	e0bffe17 	ldw	r2,-8(fp)
   17234:	10c7883a 	add	r3,r2,r3
   17238:	e0bff817 	ldw	r2,-32(fp)
   1723c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   17240:	e0bff817 	ldw	r2,-32(fp)
   17244:	e0fffe17 	ldw	r3,-8(fp)
   17248:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1724c:	e0bff817 	ldw	r2,-32(fp)
   17250:	e0fffe17 	ldw	r3,-8(fp)
   17254:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17258:	e0bff817 	ldw	r2,-32(fp)
   1725c:	e0ffff0b 	ldhu	r3,-4(fp)
   17260:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   17264:	e0bff817 	ldw	r2,-32(fp)
   17268:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1726c:	e0bff617 	ldw	r2,-40(fp)
   17270:	00c00084 	movi	r3,2
   17274:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   17278:	e0bff617 	ldw	r2,-40(fp)
   1727c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   17280:	e0bff617 	ldw	r2,-40(fp)
   17284:	e0fff817 	ldw	r3,-32(fp)
   17288:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1728c:	e0bff617 	ldw	r2,-40(fp)
   17290:	00c00fc4 	movi	r3,63
   17294:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   17298:	e0bff617 	ldw	r2,-40(fp)
   1729c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   172a0:	e13ff617 	ldw	r4,-40(fp)
   172a4:	00137bc0 	call	137bc <OS_EventWaitListInit>
   172a8:	00000e06 	br	172e4 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   172ac:	008000b4 	movhi	r2,2
   172b0:	108f6504 	addi	r2,r2,15764
   172b4:	10c00017 	ldw	r3,0(r2)
   172b8:	e0bff617 	ldw	r2,-40(fp)
   172bc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   172c0:	008000b4 	movhi	r2,2
   172c4:	108f6504 	addi	r2,r2,15764
   172c8:	e0fff617 	ldw	r3,-40(fp)
   172cc:	10c00015 	stw	r3,0(r2)
   172d0:	e0bff717 	ldw	r2,-36(fp)
   172d4:	e0bffd15 	stw	r2,-12(fp)
   172d8:	e0bffd17 	ldw	r2,-12(fp)
   172dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   172e0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   172e4:	e0bff617 	ldw	r2,-40(fp)
}
   172e8:	e037883a 	mov	sp,fp
   172ec:	dfc00117 	ldw	ra,4(sp)
   172f0:	df000017 	ldw	fp,0(sp)
   172f4:	dec00204 	addi	sp,sp,8
   172f8:	f800283a 	ret

000172fc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   172fc:	defff204 	addi	sp,sp,-56
   17300:	dfc00d15 	stw	ra,52(sp)
   17304:	df000c15 	stw	fp,48(sp)
   17308:	df000c04 	addi	fp,sp,48
   1730c:	e13ffd15 	stw	r4,-12(fp)
   17310:	2805883a 	mov	r2,r5
   17314:	e1bfff15 	stw	r6,-4(fp)
   17318:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1731c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17320:	e0bfff17 	ldw	r2,-4(fp)
   17324:	1000021e 	bne	r2,zero,17330 <OSQDel+0x34>
        return (pevent);
   17328:	e0bffd17 	ldw	r2,-12(fp)
   1732c:	0000a006 	br	175b0 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17330:	e0bffd17 	ldw	r2,-12(fp)
   17334:	1000051e 	bne	r2,zero,1734c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17338:	e0bfff17 	ldw	r2,-4(fp)
   1733c:	00c00104 	movi	r3,4
   17340:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17344:	e0bffd17 	ldw	r2,-12(fp)
   17348:	00009906 	br	175b0 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1734c:	e0bffd17 	ldw	r2,-12(fp)
   17350:	10800003 	ldbu	r2,0(r2)
   17354:	10803fcc 	andi	r2,r2,255
   17358:	108000a0 	cmpeqi	r2,r2,2
   1735c:	1000051e 	bne	r2,zero,17374 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17360:	e0bfff17 	ldw	r2,-4(fp)
   17364:	00c00044 	movi	r3,1
   17368:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1736c:	e0bffd17 	ldw	r2,-12(fp)
   17370:	00008f06 	br	175b0 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17374:	008000b4 	movhi	r2,2
   17378:	108f6604 	addi	r2,r2,15768
   1737c:	10800003 	ldbu	r2,0(r2)
   17380:	10803fcc 	andi	r2,r2,255
   17384:	10000526 	beq	r2,zero,1739c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17388:	e0bfff17 	ldw	r2,-4(fp)
   1738c:	00c003c4 	movi	r3,15
   17390:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17394:	e0bffd17 	ldw	r2,-12(fp)
   17398:	00008506 	br	175b0 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1739c:	0005303a 	rdctl	r2,status
   173a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173a4:	e0fff817 	ldw	r3,-32(fp)
   173a8:	00bfff84 	movi	r2,-2
   173ac:	1884703a 	and	r2,r3,r2
   173b0:	1001703a 	wrctl	status,r2
  
  return context;
   173b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   173b8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   173bc:	e0bffd17 	ldw	r2,-12(fp)
   173c0:	10800283 	ldbu	r2,10(r2)
   173c4:	10803fcc 	andi	r2,r2,255
   173c8:	10000326 	beq	r2,zero,173d8 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   173cc:	00800044 	movi	r2,1
   173d0:	e0bff405 	stb	r2,-48(fp)
   173d4:	00000106 	br	173dc <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   173d8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   173dc:	e0bffe03 	ldbu	r2,-8(fp)
   173e0:	10000326 	beq	r2,zero,173f0 <OSQDel+0xf4>
   173e4:	10800060 	cmpeqi	r2,r2,1
   173e8:	1000381e 	bne	r2,zero,174cc <OSQDel+0x1d0>
   173ec:	00006506 	br	17584 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   173f0:	e0bff403 	ldbu	r2,-48(fp)
   173f4:	1000261e 	bne	r2,zero,17490 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   173f8:	e0bffd17 	ldw	r2,-12(fp)
   173fc:	00c00fc4 	movi	r3,63
   17400:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17404:	e0bffd17 	ldw	r2,-12(fp)
   17408:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1740c:	e0bffd17 	ldw	r2,-12(fp)
   17410:	10800117 	ldw	r2,4(r2)
   17414:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   17418:	008000b4 	movhi	r2,2
   1741c:	108f6304 	addi	r2,r2,15756
   17420:	10c00017 	ldw	r3,0(r2)
   17424:	e0bff717 	ldw	r2,-36(fp)
   17428:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1742c:	008000b4 	movhi	r2,2
   17430:	108f6304 	addi	r2,r2,15756
   17434:	e0fff717 	ldw	r3,-36(fp)
   17438:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1743c:	e0bffd17 	ldw	r2,-12(fp)
   17440:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   17444:	008000b4 	movhi	r2,2
   17448:	108f6504 	addi	r2,r2,15764
   1744c:	10c00017 	ldw	r3,0(r2)
   17450:	e0bffd17 	ldw	r2,-12(fp)
   17454:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   17458:	e0bffd17 	ldw	r2,-12(fp)
   1745c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   17460:	008000b4 	movhi	r2,2
   17464:	108f6504 	addi	r2,r2,15764
   17468:	e0fffd17 	ldw	r3,-12(fp)
   1746c:	10c00015 	stw	r3,0(r2)
   17470:	e0bff617 	ldw	r2,-40(fp)
   17474:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17478:	e0bff917 	ldw	r2,-28(fp)
   1747c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   17480:	e0bfff17 	ldw	r2,-4(fp)
   17484:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   17488:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1748c:	00004706 	br	175ac <OSQDel+0x2b0>
   17490:	e0bff617 	ldw	r2,-40(fp)
   17494:	e0bffa15 	stw	r2,-24(fp)
   17498:	e0bffa17 	ldw	r2,-24(fp)
   1749c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   174a0:	e0bfff17 	ldw	r2,-4(fp)
   174a4:	00c01244 	movi	r3,73
   174a8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   174ac:	e0bffd17 	ldw	r2,-12(fp)
   174b0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   174b4:	00003d06 	br	175ac <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   174b8:	e13ffd17 	ldw	r4,-12(fp)
   174bc:	000b883a 	mov	r5,zero
   174c0:	01800104 	movi	r6,4
   174c4:	000f883a 	mov	r7,zero
   174c8:	001321c0 	call	1321c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   174cc:	e0bffd17 	ldw	r2,-12(fp)
   174d0:	10800283 	ldbu	r2,10(r2)
   174d4:	10803fcc 	andi	r2,r2,255
   174d8:	103ff71e 	bne	r2,zero,174b8 <__alt_mem_Flash_flash_data+0xf40174b8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   174dc:	e0bffd17 	ldw	r2,-12(fp)
   174e0:	00c00fc4 	movi	r3,63
   174e4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   174e8:	e0bffd17 	ldw	r2,-12(fp)
   174ec:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   174f0:	e0bffd17 	ldw	r2,-12(fp)
   174f4:	10800117 	ldw	r2,4(r2)
   174f8:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   174fc:	008000b4 	movhi	r2,2
   17500:	108f6304 	addi	r2,r2,15756
   17504:	10c00017 	ldw	r3,0(r2)
   17508:	e0bff717 	ldw	r2,-36(fp)
   1750c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   17510:	008000b4 	movhi	r2,2
   17514:	108f6304 	addi	r2,r2,15756
   17518:	e0fff717 	ldw	r3,-36(fp)
   1751c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17520:	e0bffd17 	ldw	r2,-12(fp)
   17524:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17528:	008000b4 	movhi	r2,2
   1752c:	108f6504 	addi	r2,r2,15764
   17530:	10c00017 	ldw	r3,0(r2)
   17534:	e0bffd17 	ldw	r2,-12(fp)
   17538:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1753c:	e0bffd17 	ldw	r2,-12(fp)
   17540:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   17544:	008000b4 	movhi	r2,2
   17548:	108f6504 	addi	r2,r2,15764
   1754c:	e0fffd17 	ldw	r3,-12(fp)
   17550:	10c00015 	stw	r3,0(r2)
   17554:	e0bff617 	ldw	r2,-40(fp)
   17558:	e0bffb15 	stw	r2,-20(fp)
   1755c:	e0bffb17 	ldw	r2,-20(fp)
   17560:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17564:	e0bff403 	ldbu	r2,-48(fp)
   17568:	10800058 	cmpnei	r2,r2,1
   1756c:	1000011e 	bne	r2,zero,17574 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17570:	0013c340 	call	13c34 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17574:	e0bfff17 	ldw	r2,-4(fp)
   17578:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1757c:	e03ff515 	stw	zero,-44(fp)
             break;
   17580:	00000a06 	br	175ac <OSQDel+0x2b0>
   17584:	e0bff617 	ldw	r2,-40(fp)
   17588:	e0bffc15 	stw	r2,-16(fp)
   1758c:	e0bffc17 	ldw	r2,-16(fp)
   17590:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   17594:	e0bfff17 	ldw	r2,-4(fp)
   17598:	00c001c4 	movi	r3,7
   1759c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   175a0:	e0bffd17 	ldw	r2,-12(fp)
   175a4:	e0bff515 	stw	r2,-44(fp)
             break;
   175a8:	0001883a 	nop
    }
    return (pevent_return);
   175ac:	e0bff517 	ldw	r2,-44(fp)
}
   175b0:	e037883a 	mov	sp,fp
   175b4:	dfc00117 	ldw	ra,4(sp)
   175b8:	df000017 	ldw	fp,0(sp)
   175bc:	dec00204 	addi	sp,sp,8
   175c0:	f800283a 	ret

000175c4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   175c4:	defffa04 	addi	sp,sp,-24
   175c8:	df000515 	stw	fp,20(sp)
   175cc:	df000504 	addi	fp,sp,20
   175d0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   175d4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   175d8:	e0bfff17 	ldw	r2,-4(fp)
   175dc:	1000021e 	bne	r2,zero,175e8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   175e0:	00800104 	movi	r2,4
   175e4:	00002106 	br	1766c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   175e8:	e0bfff17 	ldw	r2,-4(fp)
   175ec:	10800003 	ldbu	r2,0(r2)
   175f0:	10803fcc 	andi	r2,r2,255
   175f4:	108000a0 	cmpeqi	r2,r2,2
   175f8:	1000021e 	bne	r2,zero,17604 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   175fc:	00800044 	movi	r2,1
   17600:	00001a06 	br	1766c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17604:	0005303a 	rdctl	r2,status
   17608:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1760c:	e0fffd17 	ldw	r3,-12(fp)
   17610:	00bfff84 	movi	r2,-2
   17614:	1884703a 	and	r2,r3,r2
   17618:	1001703a 	wrctl	status,r2
  
  return context;
   1761c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17620:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   17624:	e0bfff17 	ldw	r2,-4(fp)
   17628:	10800117 	ldw	r2,4(r2)
   1762c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   17630:	e0bffc17 	ldw	r2,-16(fp)
   17634:	10c00117 	ldw	r3,4(r2)
   17638:	e0bffc17 	ldw	r2,-16(fp)
   1763c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   17640:	e0bffc17 	ldw	r2,-16(fp)
   17644:	10c00117 	ldw	r3,4(r2)
   17648:	e0bffc17 	ldw	r2,-16(fp)
   1764c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   17650:	e0bffc17 	ldw	r2,-16(fp)
   17654:	1000058d 	sth	zero,22(r2)
   17658:	e0bffb17 	ldw	r2,-20(fp)
   1765c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17660:	e0bffe17 	ldw	r2,-8(fp)
   17664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17668:	0005883a 	mov	r2,zero
}
   1766c:	e037883a 	mov	sp,fp
   17670:	df000017 	ldw	fp,0(sp)
   17674:	dec00104 	addi	sp,sp,4
   17678:	f800283a 	ret

0001767c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1767c:	defff304 	addi	sp,sp,-52
   17680:	dfc00c15 	stw	ra,48(sp)
   17684:	df000b15 	stw	fp,44(sp)
   17688:	df000b04 	addi	fp,sp,44
   1768c:	e13ffd15 	stw	r4,-12(fp)
   17690:	2805883a 	mov	r2,r5
   17694:	e1bfff15 	stw	r6,-4(fp)
   17698:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1769c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   176a0:	e0bfff17 	ldw	r2,-4(fp)
   176a4:	1000021e 	bne	r2,zero,176b0 <OSQPend+0x34>
        return ((void *)0);
   176a8:	0005883a 	mov	r2,zero
   176ac:	0000ad06 	br	17964 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   176b0:	e0bffd17 	ldw	r2,-12(fp)
   176b4:	1000051e 	bne	r2,zero,176cc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   176b8:	e0bfff17 	ldw	r2,-4(fp)
   176bc:	00c00104 	movi	r3,4
   176c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   176c4:	0005883a 	mov	r2,zero
   176c8:	0000a606 	br	17964 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   176cc:	e0bffd17 	ldw	r2,-12(fp)
   176d0:	10800003 	ldbu	r2,0(r2)
   176d4:	10803fcc 	andi	r2,r2,255
   176d8:	108000a0 	cmpeqi	r2,r2,2
   176dc:	1000051e 	bne	r2,zero,176f4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   176e0:	e0bfff17 	ldw	r2,-4(fp)
   176e4:	00c00044 	movi	r3,1
   176e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   176ec:	0005883a 	mov	r2,zero
   176f0:	00009c06 	br	17964 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   176f4:	008000b4 	movhi	r2,2
   176f8:	108f6604 	addi	r2,r2,15768
   176fc:	10800003 	ldbu	r2,0(r2)
   17700:	10803fcc 	andi	r2,r2,255
   17704:	10000526 	beq	r2,zero,1771c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   17708:	e0bfff17 	ldw	r2,-4(fp)
   1770c:	00c00084 	movi	r3,2
   17710:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17714:	0005883a 	mov	r2,zero
   17718:	00009206 	br	17964 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1771c:	008000b4 	movhi	r2,2
   17720:	108f5804 	addi	r2,r2,15712
   17724:	10800003 	ldbu	r2,0(r2)
   17728:	10803fcc 	andi	r2,r2,255
   1772c:	10000526 	beq	r2,zero,17744 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   17730:	e0bfff17 	ldw	r2,-4(fp)
   17734:	00c00344 	movi	r3,13
   17738:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1773c:	0005883a 	mov	r2,zero
   17740:	00008806 	br	17964 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17744:	0005303a 	rdctl	r2,status
   17748:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1774c:	e0fff817 	ldw	r3,-32(fp)
   17750:	00bfff84 	movi	r2,-2
   17754:	1884703a 	and	r2,r3,r2
   17758:	1001703a 	wrctl	status,r2
  
  return context;
   1775c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17760:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17764:	e0bffd17 	ldw	r2,-12(fp)
   17768:	10800117 	ldw	r2,4(r2)
   1776c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17770:	e0bff717 	ldw	r2,-36(fp)
   17774:	1080058b 	ldhu	r2,22(r2)
   17778:	10bfffcc 	andi	r2,r2,65535
   1777c:	10001e26 	beq	r2,zero,177f8 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17780:	e0bff717 	ldw	r2,-36(fp)
   17784:	10800417 	ldw	r2,16(r2)
   17788:	11000104 	addi	r4,r2,4
   1778c:	e0fff717 	ldw	r3,-36(fp)
   17790:	19000415 	stw	r4,16(r3)
   17794:	10800017 	ldw	r2,0(r2)
   17798:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1779c:	e0bff717 	ldw	r2,-36(fp)
   177a0:	1080058b 	ldhu	r2,22(r2)
   177a4:	10bfffc4 	addi	r2,r2,-1
   177a8:	1007883a 	mov	r3,r2
   177ac:	e0bff717 	ldw	r2,-36(fp)
   177b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   177b4:	e0bff717 	ldw	r2,-36(fp)
   177b8:	10c00417 	ldw	r3,16(r2)
   177bc:	e0bff717 	ldw	r2,-36(fp)
   177c0:	10800217 	ldw	r2,8(r2)
   177c4:	1880041e 	bne	r3,r2,177d8 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   177c8:	e0bff717 	ldw	r2,-36(fp)
   177cc:	10c00117 	ldw	r3,4(r2)
   177d0:	e0bff717 	ldw	r2,-36(fp)
   177d4:	10c00415 	stw	r3,16(r2)
   177d8:	e0bff617 	ldw	r2,-40(fp)
   177dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177e0:	e0bff917 	ldw	r2,-28(fp)
   177e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   177e8:	e0bfff17 	ldw	r2,-4(fp)
   177ec:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   177f0:	e0bff517 	ldw	r2,-44(fp)
   177f4:	00005b06 	br	17964 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   177f8:	008000b4 	movhi	r2,2
   177fc:	108f6704 	addi	r2,r2,15772
   17800:	10c00017 	ldw	r3,0(r2)
   17804:	008000b4 	movhi	r2,2
   17808:	108f6704 	addi	r2,r2,15772
   1780c:	10800017 	ldw	r2,0(r2)
   17810:	10800c03 	ldbu	r2,48(r2)
   17814:	10800114 	ori	r2,r2,4
   17818:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1781c:	008000b4 	movhi	r2,2
   17820:	108f6704 	addi	r2,r2,15772
   17824:	10800017 	ldw	r2,0(r2)
   17828:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1782c:	008000b4 	movhi	r2,2
   17830:	108f6704 	addi	r2,r2,15772
   17834:	10800017 	ldw	r2,0(r2)
   17838:	e0fffe0b 	ldhu	r3,-8(fp)
   1783c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   17840:	e13ffd17 	ldw	r4,-12(fp)
   17844:	00133b40 	call	133b4 <OS_EventTaskWait>
   17848:	e0bff617 	ldw	r2,-40(fp)
   1784c:	e0bffa15 	stw	r2,-24(fp)
   17850:	e0bffa17 	ldw	r2,-24(fp)
   17854:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   17858:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1785c:	0005303a 	rdctl	r2,status
   17860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17864:	e0fffb17 	ldw	r3,-20(fp)
   17868:	00bfff84 	movi	r2,-2
   1786c:	1884703a 	and	r2,r3,r2
   17870:	1001703a 	wrctl	status,r2
  
  return context;
   17874:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   17878:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1787c:	008000b4 	movhi	r2,2
   17880:	108f6704 	addi	r2,r2,15772
   17884:	10800017 	ldw	r2,0(r2)
   17888:	10800c43 	ldbu	r2,49(r2)
   1788c:	10803fcc 	andi	r2,r2,255
   17890:	10000326 	beq	r2,zero,178a0 <OSQPend+0x224>
   17894:	108000a0 	cmpeqi	r2,r2,2
   17898:	1000091e 	bne	r2,zero,178c0 <OSQPend+0x244>
   1789c:	00000d06 	br	178d4 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   178a0:	008000b4 	movhi	r2,2
   178a4:	108f6704 	addi	r2,r2,15772
   178a8:	10800017 	ldw	r2,0(r2)
   178ac:	10800917 	ldw	r2,36(r2)
   178b0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   178b4:	e0bfff17 	ldw	r2,-4(fp)
   178b8:	10000005 	stb	zero,0(r2)
             break;
   178bc:	00001006 	br	17900 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   178c0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   178c4:	e0bfff17 	ldw	r2,-4(fp)
   178c8:	00c00384 	movi	r3,14
   178cc:	10c00005 	stb	r3,0(r2)
             break;
   178d0:	00000b06 	br	17900 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   178d4:	008000b4 	movhi	r2,2
   178d8:	108f6704 	addi	r2,r2,15772
   178dc:	10800017 	ldw	r2,0(r2)
   178e0:	1009883a 	mov	r4,r2
   178e4:	e17ffd17 	ldw	r5,-12(fp)
   178e8:	001360c0 	call	1360c <OS_EventTaskRemove>
             pmsg = (void *)0;
   178ec:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   178f0:	e0bfff17 	ldw	r2,-4(fp)
   178f4:	00c00284 	movi	r3,10
   178f8:	10c00005 	stb	r3,0(r2)
             break;
   178fc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17900:	008000b4 	movhi	r2,2
   17904:	108f6704 	addi	r2,r2,15772
   17908:	10800017 	ldw	r2,0(r2)
   1790c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17910:	008000b4 	movhi	r2,2
   17914:	108f6704 	addi	r2,r2,15772
   17918:	10800017 	ldw	r2,0(r2)
   1791c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17920:	008000b4 	movhi	r2,2
   17924:	108f6704 	addi	r2,r2,15772
   17928:	10800017 	ldw	r2,0(r2)
   1792c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17930:	008000b4 	movhi	r2,2
   17934:	108f6704 	addi	r2,r2,15772
   17938:	10800017 	ldw	r2,0(r2)
   1793c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17940:	008000b4 	movhi	r2,2
   17944:	108f6704 	addi	r2,r2,15772
   17948:	10800017 	ldw	r2,0(r2)
   1794c:	10000915 	stw	zero,36(r2)
   17950:	e0bff617 	ldw	r2,-40(fp)
   17954:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17958:	e0bffc17 	ldw	r2,-16(fp)
   1795c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17960:	e0bff517 	ldw	r2,-44(fp)
}
   17964:	e037883a 	mov	sp,fp
   17968:	dfc00117 	ldw	ra,4(sp)
   1796c:	df000017 	ldw	fp,0(sp)
   17970:	dec00204 	addi	sp,sp,8
   17974:	f800283a 	ret

00017978 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17978:	defff604 	addi	sp,sp,-40
   1797c:	dfc00915 	stw	ra,36(sp)
   17980:	df000815 	stw	fp,32(sp)
   17984:	df000804 	addi	fp,sp,32
   17988:	e13ffd15 	stw	r4,-12(fp)
   1798c:	2805883a 	mov	r2,r5
   17990:	e1bfff15 	stw	r6,-4(fp)
   17994:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17998:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1799c:	e0bfff17 	ldw	r2,-4(fp)
   179a0:	1000021e 	bne	r2,zero,179ac <OSQPendAbort+0x34>
        return (0);
   179a4:	0005883a 	mov	r2,zero
   179a8:	00004906 	br	17ad0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   179ac:	e0bffd17 	ldw	r2,-12(fp)
   179b0:	1000051e 	bne	r2,zero,179c8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   179b4:	e0bfff17 	ldw	r2,-4(fp)
   179b8:	00c00104 	movi	r3,4
   179bc:	10c00005 	stb	r3,0(r2)
        return (0);
   179c0:	0005883a 	mov	r2,zero
   179c4:	00004206 	br	17ad0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   179c8:	e0bffd17 	ldw	r2,-12(fp)
   179cc:	10800003 	ldbu	r2,0(r2)
   179d0:	10803fcc 	andi	r2,r2,255
   179d4:	108000a0 	cmpeqi	r2,r2,2
   179d8:	1000051e 	bne	r2,zero,179f0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   179dc:	e0bfff17 	ldw	r2,-4(fp)
   179e0:	00c00044 	movi	r3,1
   179e4:	10c00005 	stb	r3,0(r2)
        return (0);
   179e8:	0005883a 	mov	r2,zero
   179ec:	00003806 	br	17ad0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179f0:	0005303a 	rdctl	r2,status
   179f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179f8:	e0fffa17 	ldw	r3,-24(fp)
   179fc:	00bfff84 	movi	r2,-2
   17a00:	1884703a 	and	r2,r3,r2
   17a04:	1001703a 	wrctl	status,r2
  
  return context;
   17a08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17a0c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   17a10:	e0bffd17 	ldw	r2,-12(fp)
   17a14:	10800283 	ldbu	r2,10(r2)
   17a18:	10803fcc 	andi	r2,r2,255
   17a1c:	10002526 	beq	r2,zero,17ab4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   17a20:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17a24:	e0bffe03 	ldbu	r2,-8(fp)
   17a28:	10800060 	cmpeqi	r2,r2,1
   17a2c:	10000e26 	beq	r2,zero,17a68 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17a30:	00000806 	br	17a54 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17a34:	e13ffd17 	ldw	r4,-12(fp)
   17a38:	000b883a 	mov	r5,zero
   17a3c:	01800104 	movi	r6,4
   17a40:	01c00084 	movi	r7,2
   17a44:	001321c0 	call	1321c <OS_EventTaskRdy>
                     nbr_tasks++;
   17a48:	e0bff803 	ldbu	r2,-32(fp)
   17a4c:	10800044 	addi	r2,r2,1
   17a50:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17a54:	e0bffd17 	ldw	r2,-12(fp)
   17a58:	10800283 	ldbu	r2,10(r2)
   17a5c:	10803fcc 	andi	r2,r2,255
   17a60:	103ff41e 	bne	r2,zero,17a34 <__alt_mem_Flash_flash_data+0xf4017a34>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17a64:	00000906 	br	17a8c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17a68:	e13ffd17 	ldw	r4,-12(fp)
   17a6c:	000b883a 	mov	r5,zero
   17a70:	01800104 	movi	r6,4
   17a74:	01c00084 	movi	r7,2
   17a78:	001321c0 	call	1321c <OS_EventTaskRdy>
                 nbr_tasks++;
   17a7c:	e0bff803 	ldbu	r2,-32(fp)
   17a80:	10800044 	addi	r2,r2,1
   17a84:	e0bff805 	stb	r2,-32(fp)
                 break;
   17a88:	0001883a 	nop
   17a8c:	e0bff917 	ldw	r2,-28(fp)
   17a90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a94:	e0bffb17 	ldw	r2,-20(fp)
   17a98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17a9c:	0013c340 	call	13c34 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17aa0:	e0bfff17 	ldw	r2,-4(fp)
   17aa4:	00c00384 	movi	r3,14
   17aa8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17aac:	e0bff803 	ldbu	r2,-32(fp)
   17ab0:	00000706 	br	17ad0 <OSQPendAbort+0x158>
   17ab4:	e0bff917 	ldw	r2,-28(fp)
   17ab8:	e0bffc15 	stw	r2,-16(fp)
   17abc:	e0bffc17 	ldw	r2,-16(fp)
   17ac0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17ac4:	e0bfff17 	ldw	r2,-4(fp)
   17ac8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   17acc:	0005883a 	mov	r2,zero
}
   17ad0:	e037883a 	mov	sp,fp
   17ad4:	dfc00117 	ldw	ra,4(sp)
   17ad8:	df000017 	ldw	fp,0(sp)
   17adc:	dec00204 	addi	sp,sp,8
   17ae0:	f800283a 	ret

00017ae4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   17ae4:	defff604 	addi	sp,sp,-40
   17ae8:	dfc00915 	stw	ra,36(sp)
   17aec:	df000815 	stw	fp,32(sp)
   17af0:	df000804 	addi	fp,sp,32
   17af4:	e13ffe15 	stw	r4,-8(fp)
   17af8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17afc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17b00:	e0bffe17 	ldw	r2,-8(fp)
   17b04:	1000021e 	bne	r2,zero,17b10 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17b08:	00800104 	movi	r2,4
   17b0c:	00004a06 	br	17c38 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17b10:	e0bffe17 	ldw	r2,-8(fp)
   17b14:	10800003 	ldbu	r2,0(r2)
   17b18:	10803fcc 	andi	r2,r2,255
   17b1c:	108000a0 	cmpeqi	r2,r2,2
   17b20:	1000021e 	bne	r2,zero,17b2c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   17b24:	00800044 	movi	r2,1
   17b28:	00004306 	br	17c38 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b2c:	0005303a 	rdctl	r2,status
   17b30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b34:	e0fffa17 	ldw	r3,-24(fp)
   17b38:	00bfff84 	movi	r2,-2
   17b3c:	1884703a 	and	r2,r3,r2
   17b40:	1001703a 	wrctl	status,r2
  
  return context;
   17b44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17b48:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   17b4c:	e0bffe17 	ldw	r2,-8(fp)
   17b50:	10800283 	ldbu	r2,10(r2)
   17b54:	10803fcc 	andi	r2,r2,255
   17b58:	10000c26 	beq	r2,zero,17b8c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17b5c:	e13ffe17 	ldw	r4,-8(fp)
   17b60:	e17fff17 	ldw	r5,-4(fp)
   17b64:	01800104 	movi	r6,4
   17b68:	000f883a 	mov	r7,zero
   17b6c:	001321c0 	call	1321c <OS_EventTaskRdy>
   17b70:	e0bff817 	ldw	r2,-32(fp)
   17b74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b78:	e0bffb17 	ldw	r2,-20(fp)
   17b7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   17b80:	0013c340 	call	13c34 <OS_Sched>
        return (OS_ERR_NONE);
   17b84:	0005883a 	mov	r2,zero
   17b88:	00002b06 	br	17c38 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   17b8c:	e0bffe17 	ldw	r2,-8(fp)
   17b90:	10800117 	ldw	r2,4(r2)
   17b94:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   17b98:	e0bff917 	ldw	r2,-28(fp)
   17b9c:	10c0058b 	ldhu	r3,22(r2)
   17ba0:	e0bff917 	ldw	r2,-28(fp)
   17ba4:	1080050b 	ldhu	r2,20(r2)
   17ba8:	18ffffcc 	andi	r3,r3,65535
   17bac:	10bfffcc 	andi	r2,r2,65535
   17bb0:	18800636 	bltu	r3,r2,17bcc <OSQPost+0xe8>
   17bb4:	e0bff817 	ldw	r2,-32(fp)
   17bb8:	e0bffc15 	stw	r2,-16(fp)
   17bbc:	e0bffc17 	ldw	r2,-16(fp)
   17bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17bc4:	00800784 	movi	r2,30
   17bc8:	00001b06 	br	17c38 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   17bcc:	e0bff917 	ldw	r2,-28(fp)
   17bd0:	10800317 	ldw	r2,12(r2)
   17bd4:	11000104 	addi	r4,r2,4
   17bd8:	e0fff917 	ldw	r3,-28(fp)
   17bdc:	19000315 	stw	r4,12(r3)
   17be0:	e0ffff17 	ldw	r3,-4(fp)
   17be4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17be8:	e0bff917 	ldw	r2,-28(fp)
   17bec:	1080058b 	ldhu	r2,22(r2)
   17bf0:	10800044 	addi	r2,r2,1
   17bf4:	1007883a 	mov	r3,r2
   17bf8:	e0bff917 	ldw	r2,-28(fp)
   17bfc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   17c00:	e0bff917 	ldw	r2,-28(fp)
   17c04:	10c00317 	ldw	r3,12(r2)
   17c08:	e0bff917 	ldw	r2,-28(fp)
   17c0c:	10800217 	ldw	r2,8(r2)
   17c10:	1880041e 	bne	r3,r2,17c24 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   17c14:	e0bff917 	ldw	r2,-28(fp)
   17c18:	10c00117 	ldw	r3,4(r2)
   17c1c:	e0bff917 	ldw	r2,-28(fp)
   17c20:	10c00315 	stw	r3,12(r2)
   17c24:	e0bff817 	ldw	r2,-32(fp)
   17c28:	e0bffd15 	stw	r2,-12(fp)
   17c2c:	e0bffd17 	ldw	r2,-12(fp)
   17c30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17c34:	0005883a 	mov	r2,zero
}
   17c38:	e037883a 	mov	sp,fp
   17c3c:	dfc00117 	ldw	ra,4(sp)
   17c40:	df000017 	ldw	fp,0(sp)
   17c44:	dec00204 	addi	sp,sp,8
   17c48:	f800283a 	ret

00017c4c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   17c4c:	defff604 	addi	sp,sp,-40
   17c50:	dfc00915 	stw	ra,36(sp)
   17c54:	df000815 	stw	fp,32(sp)
   17c58:	df000804 	addi	fp,sp,32
   17c5c:	e13ffe15 	stw	r4,-8(fp)
   17c60:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17c64:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17c68:	e0bffe17 	ldw	r2,-8(fp)
   17c6c:	1000021e 	bne	r2,zero,17c78 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17c70:	00800104 	movi	r2,4
   17c74:	00004c06 	br	17da8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17c78:	e0bffe17 	ldw	r2,-8(fp)
   17c7c:	10800003 	ldbu	r2,0(r2)
   17c80:	10803fcc 	andi	r2,r2,255
   17c84:	108000a0 	cmpeqi	r2,r2,2
   17c88:	1000021e 	bne	r2,zero,17c94 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   17c8c:	00800044 	movi	r2,1
   17c90:	00004506 	br	17da8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c94:	0005303a 	rdctl	r2,status
   17c98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c9c:	e0fffa17 	ldw	r3,-24(fp)
   17ca0:	00bfff84 	movi	r2,-2
   17ca4:	1884703a 	and	r2,r3,r2
   17ca8:	1001703a 	wrctl	status,r2
  
  return context;
   17cac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17cb0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   17cb4:	e0bffe17 	ldw	r2,-8(fp)
   17cb8:	10800283 	ldbu	r2,10(r2)
   17cbc:	10803fcc 	andi	r2,r2,255
   17cc0:	10000c26 	beq	r2,zero,17cf4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17cc4:	e13ffe17 	ldw	r4,-8(fp)
   17cc8:	e17fff17 	ldw	r5,-4(fp)
   17ccc:	01800104 	movi	r6,4
   17cd0:	000f883a 	mov	r7,zero
   17cd4:	001321c0 	call	1321c <OS_EventTaskRdy>
   17cd8:	e0bff817 	ldw	r2,-32(fp)
   17cdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ce0:	e0bffb17 	ldw	r2,-20(fp)
   17ce4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17ce8:	0013c340 	call	13c34 <OS_Sched>
        return (OS_ERR_NONE);
   17cec:	0005883a 	mov	r2,zero
   17cf0:	00002d06 	br	17da8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17cf4:	e0bffe17 	ldw	r2,-8(fp)
   17cf8:	10800117 	ldw	r2,4(r2)
   17cfc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17d00:	e0bff917 	ldw	r2,-28(fp)
   17d04:	10c0058b 	ldhu	r3,22(r2)
   17d08:	e0bff917 	ldw	r2,-28(fp)
   17d0c:	1080050b 	ldhu	r2,20(r2)
   17d10:	18ffffcc 	andi	r3,r3,65535
   17d14:	10bfffcc 	andi	r2,r2,65535
   17d18:	18800636 	bltu	r3,r2,17d34 <OSQPostFront+0xe8>
   17d1c:	e0bff817 	ldw	r2,-32(fp)
   17d20:	e0bffc15 	stw	r2,-16(fp)
   17d24:	e0bffc17 	ldw	r2,-16(fp)
   17d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17d2c:	00800784 	movi	r2,30
   17d30:	00001d06 	br	17da8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   17d34:	e0bff917 	ldw	r2,-28(fp)
   17d38:	10c00417 	ldw	r3,16(r2)
   17d3c:	e0bff917 	ldw	r2,-28(fp)
   17d40:	10800117 	ldw	r2,4(r2)
   17d44:	1880041e 	bne	r3,r2,17d58 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   17d48:	e0bff917 	ldw	r2,-28(fp)
   17d4c:	10c00217 	ldw	r3,8(r2)
   17d50:	e0bff917 	ldw	r2,-28(fp)
   17d54:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   17d58:	e0bff917 	ldw	r2,-28(fp)
   17d5c:	10800417 	ldw	r2,16(r2)
   17d60:	10ffff04 	addi	r3,r2,-4
   17d64:	e0bff917 	ldw	r2,-28(fp)
   17d68:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17d6c:	e0bff917 	ldw	r2,-28(fp)
   17d70:	10800417 	ldw	r2,16(r2)
   17d74:	e0ffff17 	ldw	r3,-4(fp)
   17d78:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17d7c:	e0bff917 	ldw	r2,-28(fp)
   17d80:	1080058b 	ldhu	r2,22(r2)
   17d84:	10800044 	addi	r2,r2,1
   17d88:	1007883a 	mov	r3,r2
   17d8c:	e0bff917 	ldw	r2,-28(fp)
   17d90:	10c0058d 	sth	r3,22(r2)
   17d94:	e0bff817 	ldw	r2,-32(fp)
   17d98:	e0bffd15 	stw	r2,-12(fp)
   17d9c:	e0bffd17 	ldw	r2,-12(fp)
   17da0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17da4:	0005883a 	mov	r2,zero
}
   17da8:	e037883a 	mov	sp,fp
   17dac:	dfc00117 	ldw	ra,4(sp)
   17db0:	df000017 	ldw	fp,0(sp)
   17db4:	dec00204 	addi	sp,sp,8
   17db8:	f800283a 	ret

00017dbc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17dbc:	defff504 	addi	sp,sp,-44
   17dc0:	dfc00a15 	stw	ra,40(sp)
   17dc4:	df000915 	stw	fp,36(sp)
   17dc8:	df000904 	addi	fp,sp,36
   17dcc:	e13ffd15 	stw	r4,-12(fp)
   17dd0:	e17ffe15 	stw	r5,-8(fp)
   17dd4:	3005883a 	mov	r2,r6
   17dd8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ddc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17de0:	e0bffd17 	ldw	r2,-12(fp)
   17de4:	1000021e 	bne	r2,zero,17df0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17de8:	00800104 	movi	r2,4
   17dec:	00007106 	br	17fb4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17df0:	e0bffd17 	ldw	r2,-12(fp)
   17df4:	10800003 	ldbu	r2,0(r2)
   17df8:	10803fcc 	andi	r2,r2,255
   17dfc:	108000a0 	cmpeqi	r2,r2,2
   17e00:	1000021e 	bne	r2,zero,17e0c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   17e04:	00800044 	movi	r2,1
   17e08:	00006a06 	br	17fb4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e0c:	0005303a 	rdctl	r2,status
   17e10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e14:	e0fff917 	ldw	r3,-28(fp)
   17e18:	00bfff84 	movi	r2,-2
   17e1c:	1884703a 	and	r2,r3,r2
   17e20:	1001703a 	wrctl	status,r2
  
  return context;
   17e24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17e28:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   17e2c:	e0bffd17 	ldw	r2,-12(fp)
   17e30:	10800283 	ldbu	r2,10(r2)
   17e34:	10803fcc 	andi	r2,r2,255
   17e38:	10001d26 	beq	r2,zero,17eb0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17e3c:	e0bfff03 	ldbu	r2,-4(fp)
   17e40:	1080004c 	andi	r2,r2,1
   17e44:	10000b26 	beq	r2,zero,17e74 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17e48:	00000506 	br	17e60 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17e4c:	e13ffd17 	ldw	r4,-12(fp)
   17e50:	e17ffe17 	ldw	r5,-8(fp)
   17e54:	01800104 	movi	r6,4
   17e58:	000f883a 	mov	r7,zero
   17e5c:	001321c0 	call	1321c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17e60:	e0bffd17 	ldw	r2,-12(fp)
   17e64:	10800283 	ldbu	r2,10(r2)
   17e68:	10803fcc 	andi	r2,r2,255
   17e6c:	103ff71e 	bne	r2,zero,17e4c <__alt_mem_Flash_flash_data+0xf4017e4c>
   17e70:	00000506 	br	17e88 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17e74:	e13ffd17 	ldw	r4,-12(fp)
   17e78:	e17ffe17 	ldw	r5,-8(fp)
   17e7c:	01800104 	movi	r6,4
   17e80:	000f883a 	mov	r7,zero
   17e84:	001321c0 	call	1321c <OS_EventTaskRdy>
   17e88:	e0bff717 	ldw	r2,-36(fp)
   17e8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e90:	e0bffa17 	ldw	r2,-24(fp)
   17e94:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17e98:	e0bfff03 	ldbu	r2,-4(fp)
   17e9c:	1080010c 	andi	r2,r2,4
   17ea0:	1000011e 	bne	r2,zero,17ea8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   17ea4:	0013c340 	call	13c34 <OS_Sched>
        }
        return (OS_ERR_NONE);
   17ea8:	0005883a 	mov	r2,zero
   17eac:	00004106 	br	17fb4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17eb0:	e0bffd17 	ldw	r2,-12(fp)
   17eb4:	10800117 	ldw	r2,4(r2)
   17eb8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17ebc:	e0bff817 	ldw	r2,-32(fp)
   17ec0:	10c0058b 	ldhu	r3,22(r2)
   17ec4:	e0bff817 	ldw	r2,-32(fp)
   17ec8:	1080050b 	ldhu	r2,20(r2)
   17ecc:	18ffffcc 	andi	r3,r3,65535
   17ed0:	10bfffcc 	andi	r2,r2,65535
   17ed4:	18800636 	bltu	r3,r2,17ef0 <OSQPostOpt+0x134>
   17ed8:	e0bff717 	ldw	r2,-36(fp)
   17edc:	e0bffb15 	stw	r2,-20(fp)
   17ee0:	e0bffb17 	ldw	r2,-20(fp)
   17ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17ee8:	00800784 	movi	r2,30
   17eec:	00003106 	br	17fb4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   17ef0:	e0bfff03 	ldbu	r2,-4(fp)
   17ef4:	1080008c 	andi	r2,r2,2
   17ef8:	10001326 	beq	r2,zero,17f48 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   17efc:	e0bff817 	ldw	r2,-32(fp)
   17f00:	10c00417 	ldw	r3,16(r2)
   17f04:	e0bff817 	ldw	r2,-32(fp)
   17f08:	10800117 	ldw	r2,4(r2)
   17f0c:	1880041e 	bne	r3,r2,17f20 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   17f10:	e0bff817 	ldw	r2,-32(fp)
   17f14:	10c00217 	ldw	r3,8(r2)
   17f18:	e0bff817 	ldw	r2,-32(fp)
   17f1c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   17f20:	e0bff817 	ldw	r2,-32(fp)
   17f24:	10800417 	ldw	r2,16(r2)
   17f28:	10ffff04 	addi	r3,r2,-4
   17f2c:	e0bff817 	ldw	r2,-32(fp)
   17f30:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   17f34:	e0bff817 	ldw	r2,-32(fp)
   17f38:	10800417 	ldw	r2,16(r2)
   17f3c:	e0fffe17 	ldw	r3,-8(fp)
   17f40:	10c00015 	stw	r3,0(r2)
   17f44:	00001006 	br	17f88 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   17f48:	e0bff817 	ldw	r2,-32(fp)
   17f4c:	10800317 	ldw	r2,12(r2)
   17f50:	11000104 	addi	r4,r2,4
   17f54:	e0fff817 	ldw	r3,-32(fp)
   17f58:	19000315 	stw	r4,12(r3)
   17f5c:	e0fffe17 	ldw	r3,-8(fp)
   17f60:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   17f64:	e0bff817 	ldw	r2,-32(fp)
   17f68:	10c00317 	ldw	r3,12(r2)
   17f6c:	e0bff817 	ldw	r2,-32(fp)
   17f70:	10800217 	ldw	r2,8(r2)
   17f74:	1880041e 	bne	r3,r2,17f88 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   17f78:	e0bff817 	ldw	r2,-32(fp)
   17f7c:	10c00117 	ldw	r3,4(r2)
   17f80:	e0bff817 	ldw	r2,-32(fp)
   17f84:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17f88:	e0bff817 	ldw	r2,-32(fp)
   17f8c:	1080058b 	ldhu	r2,22(r2)
   17f90:	10800044 	addi	r2,r2,1
   17f94:	1007883a 	mov	r3,r2
   17f98:	e0bff817 	ldw	r2,-32(fp)
   17f9c:	10c0058d 	sth	r3,22(r2)
   17fa0:	e0bff717 	ldw	r2,-36(fp)
   17fa4:	e0bffc15 	stw	r2,-16(fp)
   17fa8:	e0bffc17 	ldw	r2,-16(fp)
   17fac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17fb0:	0005883a 	mov	r2,zero
}
   17fb4:	e037883a 	mov	sp,fp
   17fb8:	dfc00117 	ldw	ra,4(sp)
   17fbc:	df000017 	ldw	fp,0(sp)
   17fc0:	dec00204 	addi	sp,sp,8
   17fc4:	f800283a 	ret

00017fc8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   17fc8:	defff604 	addi	sp,sp,-40
   17fcc:	df000915 	stw	fp,36(sp)
   17fd0:	df000904 	addi	fp,sp,36
   17fd4:	e13ffe15 	stw	r4,-8(fp)
   17fd8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17fdc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17fe0:	e0bffe17 	ldw	r2,-8(fp)
   17fe4:	1000021e 	bne	r2,zero,17ff0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17fe8:	00800104 	movi	r2,4
   17fec:	00004906 	br	18114 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   17ff0:	e0bfff17 	ldw	r2,-4(fp)
   17ff4:	1000021e 	bne	r2,zero,18000 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17ff8:	00800244 	movi	r2,9
   17ffc:	00004506 	br	18114 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18000:	e0bffe17 	ldw	r2,-8(fp)
   18004:	10800003 	ldbu	r2,0(r2)
   18008:	10803fcc 	andi	r2,r2,255
   1800c:	108000a0 	cmpeqi	r2,r2,2
   18010:	1000021e 	bne	r2,zero,1801c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18014:	00800044 	movi	r2,1
   18018:	00003e06 	br	18114 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1801c:	0005303a 	rdctl	r2,status
   18020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18024:	e0fffc17 	ldw	r3,-16(fp)
   18028:	00bfff84 	movi	r2,-2
   1802c:	1884703a 	and	r2,r3,r2
   18030:	1001703a 	wrctl	status,r2
  
  return context;
   18034:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18038:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1803c:	e0bffe17 	ldw	r2,-8(fp)
   18040:	10c00283 	ldbu	r3,10(r2)
   18044:	e0bfff17 	ldw	r2,-4(fp)
   18048:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1804c:	e0bffe17 	ldw	r2,-8(fp)
   18050:	108002c4 	addi	r2,r2,11
   18054:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18058:	e0bfff17 	ldw	r2,-4(fp)
   1805c:	10800204 	addi	r2,r2,8
   18060:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18064:	e03ff705 	stb	zero,-36(fp)
   18068:	00000b06 	br	18098 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1806c:	e0bff917 	ldw	r2,-28(fp)
   18070:	10c00044 	addi	r3,r2,1
   18074:	e0fff915 	stw	r3,-28(fp)
   18078:	e0fff817 	ldw	r3,-32(fp)
   1807c:	19000044 	addi	r4,r3,1
   18080:	e13ff815 	stw	r4,-32(fp)
   18084:	18c00003 	ldbu	r3,0(r3)
   18088:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1808c:	e0bff703 	ldbu	r2,-36(fp)
   18090:	10800044 	addi	r2,r2,1
   18094:	e0bff705 	stb	r2,-36(fp)
   18098:	e0bff703 	ldbu	r2,-36(fp)
   1809c:	108000f0 	cmpltui	r2,r2,3
   180a0:	103ff21e 	bne	r2,zero,1806c <__alt_mem_Flash_flash_data+0xf401806c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   180a4:	e0bffe17 	ldw	r2,-8(fp)
   180a8:	10800117 	ldw	r2,4(r2)
   180ac:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   180b0:	e0bffb17 	ldw	r2,-20(fp)
   180b4:	1080058b 	ldhu	r2,22(r2)
   180b8:	10bfffcc 	andi	r2,r2,65535
   180bc:	10000626 	beq	r2,zero,180d8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   180c0:	e0bffb17 	ldw	r2,-20(fp)
   180c4:	10800417 	ldw	r2,16(r2)
   180c8:	10c00017 	ldw	r3,0(r2)
   180cc:	e0bfff17 	ldw	r2,-4(fp)
   180d0:	10c00015 	stw	r3,0(r2)
   180d4:	00000206 	br	180e0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   180d8:	e0bfff17 	ldw	r2,-4(fp)
   180dc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   180e0:	e0bffb17 	ldw	r2,-20(fp)
   180e4:	10c0058b 	ldhu	r3,22(r2)
   180e8:	e0bfff17 	ldw	r2,-4(fp)
   180ec:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   180f0:	e0bffb17 	ldw	r2,-20(fp)
   180f4:	10c0050b 	ldhu	r3,20(r2)
   180f8:	e0bfff17 	ldw	r2,-4(fp)
   180fc:	10c0018d 	sth	r3,6(r2)
   18100:	e0bffa17 	ldw	r2,-24(fp)
   18104:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18108:	e0bffd17 	ldw	r2,-12(fp)
   1810c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18110:	0005883a 	mov	r2,zero
}
   18114:	e037883a 	mov	sp,fp
   18118:	df000017 	ldw	fp,0(sp)
   1811c:	dec00104 	addi	sp,sp,4
   18120:	f800283a 	ret

00018124 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18124:	defffb04 	addi	sp,sp,-20
   18128:	dfc00415 	stw	ra,16(sp)
   1812c:	df000315 	stw	fp,12(sp)
   18130:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18134:	010000f4 	movhi	r4,3
   18138:	213dd404 	addi	r4,r4,-2224
   1813c:	01407804 	movi	r5,480
   18140:	0013b800 	call	13b80 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18144:	008000f4 	movhi	r2,3
   18148:	10bdd404 	addi	r2,r2,-2224
   1814c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18150:	008000f4 	movhi	r2,3
   18154:	10bdda04 	addi	r2,r2,-2200
   18158:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1815c:	e03ffd0d 	sth	zero,-12(fp)
   18160:	00000c06 	br	18194 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   18164:	e0bffe17 	ldw	r2,-8(fp)
   18168:	e0ffff17 	ldw	r3,-4(fp)
   1816c:	10c00015 	stw	r3,0(r2)
        pq1++;
   18170:	e0bffe17 	ldw	r2,-8(fp)
   18174:	10800604 	addi	r2,r2,24
   18178:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1817c:	e0bfff17 	ldw	r2,-4(fp)
   18180:	10800604 	addi	r2,r2,24
   18184:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18188:	e0bffd0b 	ldhu	r2,-12(fp)
   1818c:	10800044 	addi	r2,r2,1
   18190:	e0bffd0d 	sth	r2,-12(fp)
   18194:	e0bffd0b 	ldhu	r2,-12(fp)
   18198:	108004f0 	cmpltui	r2,r2,19
   1819c:	103ff11e 	bne	r2,zero,18164 <__alt_mem_Flash_flash_data+0xf4018164>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   181a0:	e0bffe17 	ldw	r2,-8(fp)
   181a4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   181a8:	008000b4 	movhi	r2,2
   181ac:	108f6304 	addi	r2,r2,15756
   181b0:	00c000f4 	movhi	r3,3
   181b4:	18fdd404 	addi	r3,r3,-2224
   181b8:	10c00015 	stw	r3,0(r2)
#endif
}
   181bc:	e037883a 	mov	sp,fp
   181c0:	dfc00117 	ldw	ra,4(sp)
   181c4:	df000017 	ldw	fp,0(sp)
   181c8:	dec00204 	addi	sp,sp,8
   181cc:	f800283a 	ret

000181d0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   181d0:	defffa04 	addi	sp,sp,-24
   181d4:	df000515 	stw	fp,20(sp)
   181d8:	df000504 	addi	fp,sp,20
   181dc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   181e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   181e4:	e0bfff17 	ldw	r2,-4(fp)
   181e8:	1000021e 	bne	r2,zero,181f4 <OSSemAccept+0x24>
        return (0);
   181ec:	0005883a 	mov	r2,zero
   181f0:	00001f06 	br	18270 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   181f4:	e0bfff17 	ldw	r2,-4(fp)
   181f8:	10800003 	ldbu	r2,0(r2)
   181fc:	10803fcc 	andi	r2,r2,255
   18200:	108000e0 	cmpeqi	r2,r2,3
   18204:	1000021e 	bne	r2,zero,18210 <OSSemAccept+0x40>
        return (0);
   18208:	0005883a 	mov	r2,zero
   1820c:	00001806 	br	18270 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18210:	0005303a 	rdctl	r2,status
   18214:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18218:	e0fffd17 	ldw	r3,-12(fp)
   1821c:	00bfff84 	movi	r2,-2
   18220:	1884703a 	and	r2,r3,r2
   18224:	1001703a 	wrctl	status,r2
  
  return context;
   18228:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1822c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   18230:	e0bfff17 	ldw	r2,-4(fp)
   18234:	1080020b 	ldhu	r2,8(r2)
   18238:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1823c:	e0bffc0b 	ldhu	r2,-16(fp)
   18240:	10000626 	beq	r2,zero,1825c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   18244:	e0bfff17 	ldw	r2,-4(fp)
   18248:	1080020b 	ldhu	r2,8(r2)
   1824c:	10bfffc4 	addi	r2,r2,-1
   18250:	1007883a 	mov	r3,r2
   18254:	e0bfff17 	ldw	r2,-4(fp)
   18258:	10c0020d 	sth	r3,8(r2)
   1825c:	e0bffb17 	ldw	r2,-20(fp)
   18260:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18264:	e0bffe17 	ldw	r2,-8(fp)
   18268:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1826c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   18270:	e037883a 	mov	sp,fp
   18274:	df000017 	ldw	fp,0(sp)
   18278:	dec00104 	addi	sp,sp,4
   1827c:	f800283a 	ret

00018280 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   18280:	defff904 	addi	sp,sp,-28
   18284:	dfc00615 	stw	ra,24(sp)
   18288:	df000515 	stw	fp,20(sp)
   1828c:	df000504 	addi	fp,sp,20
   18290:	2005883a 	mov	r2,r4
   18294:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18298:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1829c:	008000b4 	movhi	r2,2
   182a0:	108f6604 	addi	r2,r2,15768
   182a4:	10800003 	ldbu	r2,0(r2)
   182a8:	10803fcc 	andi	r2,r2,255
   182ac:	10000226 	beq	r2,zero,182b8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   182b0:	0005883a 	mov	r2,zero
   182b4:	00002d06 	br	1836c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182b8:	0005303a 	rdctl	r2,status
   182bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182c0:	e0fffd17 	ldw	r3,-12(fp)
   182c4:	00bfff84 	movi	r2,-2
   182c8:	1884703a 	and	r2,r3,r2
   182cc:	1001703a 	wrctl	status,r2
  
  return context;
   182d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   182d4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   182d8:	008000b4 	movhi	r2,2
   182dc:	108f6504 	addi	r2,r2,15764
   182e0:	10800017 	ldw	r2,0(r2)
   182e4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   182e8:	008000b4 	movhi	r2,2
   182ec:	108f6504 	addi	r2,r2,15764
   182f0:	10800017 	ldw	r2,0(r2)
   182f4:	10000726 	beq	r2,zero,18314 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   182f8:	008000b4 	movhi	r2,2
   182fc:	108f6504 	addi	r2,r2,15764
   18300:	10800017 	ldw	r2,0(r2)
   18304:	10c00117 	ldw	r3,4(r2)
   18308:	008000b4 	movhi	r2,2
   1830c:	108f6504 	addi	r2,r2,15764
   18310:	10c00015 	stw	r3,0(r2)
   18314:	e0bffb17 	ldw	r2,-20(fp)
   18318:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1831c:	e0bffe17 	ldw	r2,-8(fp)
   18320:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   18324:	e0bffc17 	ldw	r2,-16(fp)
   18328:	10000f26 	beq	r2,zero,18368 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1832c:	e0bffc17 	ldw	r2,-16(fp)
   18330:	00c000c4 	movi	r3,3
   18334:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   18338:	e0bffc17 	ldw	r2,-16(fp)
   1833c:	e0ffff0b 	ldhu	r3,-4(fp)
   18340:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   18344:	e0bffc17 	ldw	r2,-16(fp)
   18348:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1834c:	e0bffc17 	ldw	r2,-16(fp)
   18350:	00c00fc4 	movi	r3,63
   18354:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   18358:	e0bffc17 	ldw	r2,-16(fp)
   1835c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18360:	e13ffc17 	ldw	r4,-16(fp)
   18364:	00137bc0 	call	137bc <OS_EventWaitListInit>
    }
    return (pevent);
   18368:	e0bffc17 	ldw	r2,-16(fp)
}
   1836c:	e037883a 	mov	sp,fp
   18370:	dfc00117 	ldw	ra,4(sp)
   18374:	df000017 	ldw	fp,0(sp)
   18378:	dec00204 	addi	sp,sp,8
   1837c:	f800283a 	ret

00018380 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18380:	defff304 	addi	sp,sp,-52
   18384:	dfc00c15 	stw	ra,48(sp)
   18388:	df000b15 	stw	fp,44(sp)
   1838c:	df000b04 	addi	fp,sp,44
   18390:	e13ffd15 	stw	r4,-12(fp)
   18394:	2805883a 	mov	r2,r5
   18398:	e1bfff15 	stw	r6,-4(fp)
   1839c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   183a0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   183a4:	e0bfff17 	ldw	r2,-4(fp)
   183a8:	1000021e 	bne	r2,zero,183b4 <OSSemDel+0x34>
        return (pevent);
   183ac:	e0bffd17 	ldw	r2,-12(fp)
   183b0:	00008806 	br	185d4 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   183b4:	e0bffd17 	ldw	r2,-12(fp)
   183b8:	1000051e 	bne	r2,zero,183d0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   183bc:	e0bfff17 	ldw	r2,-4(fp)
   183c0:	00c00104 	movi	r3,4
   183c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   183c8:	e0bffd17 	ldw	r2,-12(fp)
   183cc:	00008106 	br	185d4 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   183d0:	e0bffd17 	ldw	r2,-12(fp)
   183d4:	10800003 	ldbu	r2,0(r2)
   183d8:	10803fcc 	andi	r2,r2,255
   183dc:	108000e0 	cmpeqi	r2,r2,3
   183e0:	1000051e 	bne	r2,zero,183f8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   183e4:	e0bfff17 	ldw	r2,-4(fp)
   183e8:	00c00044 	movi	r3,1
   183ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   183f0:	e0bffd17 	ldw	r2,-12(fp)
   183f4:	00007706 	br	185d4 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   183f8:	008000b4 	movhi	r2,2
   183fc:	108f6604 	addi	r2,r2,15768
   18400:	10800003 	ldbu	r2,0(r2)
   18404:	10803fcc 	andi	r2,r2,255
   18408:	10000526 	beq	r2,zero,18420 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1840c:	e0bfff17 	ldw	r2,-4(fp)
   18410:	00c003c4 	movi	r3,15
   18414:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18418:	e0bffd17 	ldw	r2,-12(fp)
   1841c:	00006d06 	br	185d4 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18420:	0005303a 	rdctl	r2,status
   18424:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18428:	e0fff817 	ldw	r3,-32(fp)
   1842c:	00bfff84 	movi	r2,-2
   18430:	1884703a 	and	r2,r3,r2
   18434:	1001703a 	wrctl	status,r2
  
  return context;
   18438:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1843c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   18440:	e0bffd17 	ldw	r2,-12(fp)
   18444:	10800283 	ldbu	r2,10(r2)
   18448:	10803fcc 	andi	r2,r2,255
   1844c:	10000326 	beq	r2,zero,1845c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18450:	00800044 	movi	r2,1
   18454:	e0bff505 	stb	r2,-44(fp)
   18458:	00000106 	br	18460 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1845c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   18460:	e0bffe03 	ldbu	r2,-8(fp)
   18464:	10000326 	beq	r2,zero,18474 <OSSemDel+0xf4>
   18468:	10800060 	cmpeqi	r2,r2,1
   1846c:	10002c1e 	bne	r2,zero,18520 <OSSemDel+0x1a0>
   18470:	00004d06 	br	185a8 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18474:	e0bff503 	ldbu	r2,-44(fp)
   18478:	10001a1e 	bne	r2,zero,184e4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1847c:	e0bffd17 	ldw	r2,-12(fp)
   18480:	00c00fc4 	movi	r3,63
   18484:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18488:	e0bffd17 	ldw	r2,-12(fp)
   1848c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18490:	e0bffd17 	ldw	r2,-12(fp)
   18494:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18498:	008000b4 	movhi	r2,2
   1849c:	108f6504 	addi	r2,r2,15764
   184a0:	10c00017 	ldw	r3,0(r2)
   184a4:	e0bffd17 	ldw	r2,-12(fp)
   184a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   184ac:	e0bffd17 	ldw	r2,-12(fp)
   184b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   184b4:	008000b4 	movhi	r2,2
   184b8:	108f6504 	addi	r2,r2,15764
   184bc:	e0fffd17 	ldw	r3,-12(fp)
   184c0:	10c00015 	stw	r3,0(r2)
   184c4:	e0bff717 	ldw	r2,-36(fp)
   184c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184cc:	e0bff917 	ldw	r2,-28(fp)
   184d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   184d4:	e0bfff17 	ldw	r2,-4(fp)
   184d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   184dc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   184e0:	00003b06 	br	185d0 <OSSemDel+0x250>
   184e4:	e0bff717 	ldw	r2,-36(fp)
   184e8:	e0bffa15 	stw	r2,-24(fp)
   184ec:	e0bffa17 	ldw	r2,-24(fp)
   184f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   184f4:	e0bfff17 	ldw	r2,-4(fp)
   184f8:	00c01244 	movi	r3,73
   184fc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   18500:	e0bffd17 	ldw	r2,-12(fp)
   18504:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   18508:	00003106 	br	185d0 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1850c:	e13ffd17 	ldw	r4,-12(fp)
   18510:	000b883a 	mov	r5,zero
   18514:	01800044 	movi	r6,1
   18518:	000f883a 	mov	r7,zero
   1851c:	001321c0 	call	1321c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   18520:	e0bffd17 	ldw	r2,-12(fp)
   18524:	10800283 	ldbu	r2,10(r2)
   18528:	10803fcc 	andi	r2,r2,255
   1852c:	103ff71e 	bne	r2,zero,1850c <__alt_mem_Flash_flash_data+0xf401850c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   18530:	e0bffd17 	ldw	r2,-12(fp)
   18534:	00c00fc4 	movi	r3,63
   18538:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1853c:	e0bffd17 	ldw	r2,-12(fp)
   18540:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18544:	e0bffd17 	ldw	r2,-12(fp)
   18548:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1854c:	008000b4 	movhi	r2,2
   18550:	108f6504 	addi	r2,r2,15764
   18554:	10c00017 	ldw	r3,0(r2)
   18558:	e0bffd17 	ldw	r2,-12(fp)
   1855c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18560:	e0bffd17 	ldw	r2,-12(fp)
   18564:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18568:	008000b4 	movhi	r2,2
   1856c:	108f6504 	addi	r2,r2,15764
   18570:	e0fffd17 	ldw	r3,-12(fp)
   18574:	10c00015 	stw	r3,0(r2)
   18578:	e0bff717 	ldw	r2,-36(fp)
   1857c:	e0bffb15 	stw	r2,-20(fp)
   18580:	e0bffb17 	ldw	r2,-20(fp)
   18584:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18588:	e0bff503 	ldbu	r2,-44(fp)
   1858c:	10800058 	cmpnei	r2,r2,1
   18590:	1000011e 	bne	r2,zero,18598 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18594:	0013c340 	call	13c34 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18598:	e0bfff17 	ldw	r2,-4(fp)
   1859c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   185a0:	e03ff615 	stw	zero,-40(fp)
             break;
   185a4:	00000a06 	br	185d0 <OSSemDel+0x250>
   185a8:	e0bff717 	ldw	r2,-36(fp)
   185ac:	e0bffc15 	stw	r2,-16(fp)
   185b0:	e0bffc17 	ldw	r2,-16(fp)
   185b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   185b8:	e0bfff17 	ldw	r2,-4(fp)
   185bc:	00c001c4 	movi	r3,7
   185c0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   185c4:	e0bffd17 	ldw	r2,-12(fp)
   185c8:	e0bff615 	stw	r2,-40(fp)
             break;
   185cc:	0001883a 	nop
    }
    return (pevent_return);
   185d0:	e0bff617 	ldw	r2,-40(fp)
}
   185d4:	e037883a 	mov	sp,fp
   185d8:	dfc00117 	ldw	ra,4(sp)
   185dc:	df000017 	ldw	fp,0(sp)
   185e0:	dec00204 	addi	sp,sp,8
   185e4:	f800283a 	ret

000185e8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   185e8:	defff504 	addi	sp,sp,-44
   185ec:	dfc00a15 	stw	ra,40(sp)
   185f0:	df000915 	stw	fp,36(sp)
   185f4:	df000904 	addi	fp,sp,36
   185f8:	e13ffd15 	stw	r4,-12(fp)
   185fc:	2805883a 	mov	r2,r5
   18600:	e1bfff15 	stw	r6,-4(fp)
   18604:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18608:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1860c:	e0bfff17 	ldw	r2,-4(fp)
   18610:	1000011e 	bne	r2,zero,18618 <OSSemPend+0x30>
        return;
   18614:	00008906 	br	1883c <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18618:	e0bffd17 	ldw	r2,-12(fp)
   1861c:	1000041e 	bne	r2,zero,18630 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   18620:	e0bfff17 	ldw	r2,-4(fp)
   18624:	00c00104 	movi	r3,4
   18628:	10c00005 	stb	r3,0(r2)
        return;
   1862c:	00008306 	br	1883c <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18630:	e0bffd17 	ldw	r2,-12(fp)
   18634:	10800003 	ldbu	r2,0(r2)
   18638:	10803fcc 	andi	r2,r2,255
   1863c:	108000e0 	cmpeqi	r2,r2,3
   18640:	1000041e 	bne	r2,zero,18654 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   18644:	e0bfff17 	ldw	r2,-4(fp)
   18648:	00c00044 	movi	r3,1
   1864c:	10c00005 	stb	r3,0(r2)
        return;
   18650:	00007a06 	br	1883c <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   18654:	008000b4 	movhi	r2,2
   18658:	108f6604 	addi	r2,r2,15768
   1865c:	10800003 	ldbu	r2,0(r2)
   18660:	10803fcc 	andi	r2,r2,255
   18664:	10000426 	beq	r2,zero,18678 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   18668:	e0bfff17 	ldw	r2,-4(fp)
   1866c:	00c00084 	movi	r3,2
   18670:	10c00005 	stb	r3,0(r2)
        return;
   18674:	00007106 	br	1883c <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   18678:	008000b4 	movhi	r2,2
   1867c:	108f5804 	addi	r2,r2,15712
   18680:	10800003 	ldbu	r2,0(r2)
   18684:	10803fcc 	andi	r2,r2,255
   18688:	10000426 	beq	r2,zero,1869c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1868c:	e0bfff17 	ldw	r2,-4(fp)
   18690:	00c00344 	movi	r3,13
   18694:	10c00005 	stb	r3,0(r2)
        return;
   18698:	00006806 	br	1883c <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1869c:	0005303a 	rdctl	r2,status
   186a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186a4:	e0fff817 	ldw	r3,-32(fp)
   186a8:	00bfff84 	movi	r2,-2
   186ac:	1884703a 	and	r2,r3,r2
   186b0:	1001703a 	wrctl	status,r2
  
  return context;
   186b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   186b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   186bc:	e0bffd17 	ldw	r2,-12(fp)
   186c0:	1080020b 	ldhu	r2,8(r2)
   186c4:	10bfffcc 	andi	r2,r2,65535
   186c8:	10000d26 	beq	r2,zero,18700 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   186cc:	e0bffd17 	ldw	r2,-12(fp)
   186d0:	1080020b 	ldhu	r2,8(r2)
   186d4:	10bfffc4 	addi	r2,r2,-1
   186d8:	1007883a 	mov	r3,r2
   186dc:	e0bffd17 	ldw	r2,-12(fp)
   186e0:	10c0020d 	sth	r3,8(r2)
   186e4:	e0bff717 	ldw	r2,-36(fp)
   186e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186ec:	e0bff917 	ldw	r2,-28(fp)
   186f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   186f4:	e0bfff17 	ldw	r2,-4(fp)
   186f8:	10000005 	stb	zero,0(r2)
        return;
   186fc:	00004f06 	br	1883c <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   18700:	008000b4 	movhi	r2,2
   18704:	108f6704 	addi	r2,r2,15772
   18708:	10c00017 	ldw	r3,0(r2)
   1870c:	008000b4 	movhi	r2,2
   18710:	108f6704 	addi	r2,r2,15772
   18714:	10800017 	ldw	r2,0(r2)
   18718:	10800c03 	ldbu	r2,48(r2)
   1871c:	10800054 	ori	r2,r2,1
   18720:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   18724:	008000b4 	movhi	r2,2
   18728:	108f6704 	addi	r2,r2,15772
   1872c:	10800017 	ldw	r2,0(r2)
   18730:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   18734:	008000b4 	movhi	r2,2
   18738:	108f6704 	addi	r2,r2,15772
   1873c:	10800017 	ldw	r2,0(r2)
   18740:	e0fffe0b 	ldhu	r3,-8(fp)
   18744:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   18748:	e13ffd17 	ldw	r4,-12(fp)
   1874c:	00133b40 	call	133b4 <OS_EventTaskWait>
   18750:	e0bff717 	ldw	r2,-36(fp)
   18754:	e0bffa15 	stw	r2,-24(fp)
   18758:	e0bffa17 	ldw	r2,-24(fp)
   1875c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   18760:	0013c340 	call	13c34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18764:	0005303a 	rdctl	r2,status
   18768:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1876c:	e0fffb17 	ldw	r3,-20(fp)
   18770:	00bfff84 	movi	r2,-2
   18774:	1884703a 	and	r2,r3,r2
   18778:	1001703a 	wrctl	status,r2
  
  return context;
   1877c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   18780:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18784:	008000b4 	movhi	r2,2
   18788:	108f6704 	addi	r2,r2,15772
   1878c:	10800017 	ldw	r2,0(r2)
   18790:	10800c43 	ldbu	r2,49(r2)
   18794:	10803fcc 	andi	r2,r2,255
   18798:	10000326 	beq	r2,zero,187a8 <OSSemPend+0x1c0>
   1879c:	108000a0 	cmpeqi	r2,r2,2
   187a0:	1000041e 	bne	r2,zero,187b4 <OSSemPend+0x1cc>
   187a4:	00000706 	br	187c4 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   187a8:	e0bfff17 	ldw	r2,-4(fp)
   187ac:	10000005 	stb	zero,0(r2)
             break;
   187b0:	00000e06 	br	187ec <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   187b4:	e0bfff17 	ldw	r2,-4(fp)
   187b8:	00c00384 	movi	r3,14
   187bc:	10c00005 	stb	r3,0(r2)
             break;
   187c0:	00000a06 	br	187ec <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   187c4:	008000b4 	movhi	r2,2
   187c8:	108f6704 	addi	r2,r2,15772
   187cc:	10800017 	ldw	r2,0(r2)
   187d0:	1009883a 	mov	r4,r2
   187d4:	e17ffd17 	ldw	r5,-12(fp)
   187d8:	001360c0 	call	1360c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   187dc:	e0bfff17 	ldw	r2,-4(fp)
   187e0:	00c00284 	movi	r3,10
   187e4:	10c00005 	stb	r3,0(r2)
             break;
   187e8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   187ec:	008000b4 	movhi	r2,2
   187f0:	108f6704 	addi	r2,r2,15772
   187f4:	10800017 	ldw	r2,0(r2)
   187f8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   187fc:	008000b4 	movhi	r2,2
   18800:	108f6704 	addi	r2,r2,15772
   18804:	10800017 	ldw	r2,0(r2)
   18808:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1880c:	008000b4 	movhi	r2,2
   18810:	108f6704 	addi	r2,r2,15772
   18814:	10800017 	ldw	r2,0(r2)
   18818:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1881c:	008000b4 	movhi	r2,2
   18820:	108f6704 	addi	r2,r2,15772
   18824:	10800017 	ldw	r2,0(r2)
   18828:	10000815 	stw	zero,32(r2)
   1882c:	e0bff717 	ldw	r2,-36(fp)
   18830:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18834:	e0bffc17 	ldw	r2,-16(fp)
   18838:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1883c:	e037883a 	mov	sp,fp
   18840:	dfc00117 	ldw	ra,4(sp)
   18844:	df000017 	ldw	fp,0(sp)
   18848:	dec00204 	addi	sp,sp,8
   1884c:	f800283a 	ret

00018850 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18850:	defff604 	addi	sp,sp,-40
   18854:	dfc00915 	stw	ra,36(sp)
   18858:	df000815 	stw	fp,32(sp)
   1885c:	df000804 	addi	fp,sp,32
   18860:	e13ffd15 	stw	r4,-12(fp)
   18864:	2805883a 	mov	r2,r5
   18868:	e1bfff15 	stw	r6,-4(fp)
   1886c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18870:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18874:	e0bfff17 	ldw	r2,-4(fp)
   18878:	1000021e 	bne	r2,zero,18884 <OSSemPendAbort+0x34>
        return (0);
   1887c:	0005883a 	mov	r2,zero
   18880:	00004906 	br	189a8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18884:	e0bffd17 	ldw	r2,-12(fp)
   18888:	1000051e 	bne	r2,zero,188a0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1888c:	e0bfff17 	ldw	r2,-4(fp)
   18890:	00c00104 	movi	r3,4
   18894:	10c00005 	stb	r3,0(r2)
        return (0);
   18898:	0005883a 	mov	r2,zero
   1889c:	00004206 	br	189a8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   188a0:	e0bffd17 	ldw	r2,-12(fp)
   188a4:	10800003 	ldbu	r2,0(r2)
   188a8:	10803fcc 	andi	r2,r2,255
   188ac:	108000e0 	cmpeqi	r2,r2,3
   188b0:	1000051e 	bne	r2,zero,188c8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   188b4:	e0bfff17 	ldw	r2,-4(fp)
   188b8:	00c00044 	movi	r3,1
   188bc:	10c00005 	stb	r3,0(r2)
        return (0);
   188c0:	0005883a 	mov	r2,zero
   188c4:	00003806 	br	189a8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188c8:	0005303a 	rdctl	r2,status
   188cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188d0:	e0fffa17 	ldw	r3,-24(fp)
   188d4:	00bfff84 	movi	r2,-2
   188d8:	1884703a 	and	r2,r3,r2
   188dc:	1001703a 	wrctl	status,r2
  
  return context;
   188e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   188e4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   188e8:	e0bffd17 	ldw	r2,-12(fp)
   188ec:	10800283 	ldbu	r2,10(r2)
   188f0:	10803fcc 	andi	r2,r2,255
   188f4:	10002526 	beq	r2,zero,1898c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   188f8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   188fc:	e0bffe03 	ldbu	r2,-8(fp)
   18900:	10800060 	cmpeqi	r2,r2,1
   18904:	10000e26 	beq	r2,zero,18940 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18908:	00000806 	br	1892c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1890c:	e13ffd17 	ldw	r4,-12(fp)
   18910:	000b883a 	mov	r5,zero
   18914:	01800044 	movi	r6,1
   18918:	01c00084 	movi	r7,2
   1891c:	001321c0 	call	1321c <OS_EventTaskRdy>
                     nbr_tasks++;
   18920:	e0bff803 	ldbu	r2,-32(fp)
   18924:	10800044 	addi	r2,r2,1
   18928:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1892c:	e0bffd17 	ldw	r2,-12(fp)
   18930:	10800283 	ldbu	r2,10(r2)
   18934:	10803fcc 	andi	r2,r2,255
   18938:	103ff41e 	bne	r2,zero,1890c <__alt_mem_Flash_flash_data+0xf401890c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1893c:	00000906 	br	18964 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18940:	e13ffd17 	ldw	r4,-12(fp)
   18944:	000b883a 	mov	r5,zero
   18948:	01800044 	movi	r6,1
   1894c:	01c00084 	movi	r7,2
   18950:	001321c0 	call	1321c <OS_EventTaskRdy>
                 nbr_tasks++;
   18954:	e0bff803 	ldbu	r2,-32(fp)
   18958:	10800044 	addi	r2,r2,1
   1895c:	e0bff805 	stb	r2,-32(fp)
                 break;
   18960:	0001883a 	nop
   18964:	e0bff917 	ldw	r2,-28(fp)
   18968:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1896c:	e0bffb17 	ldw	r2,-20(fp)
   18970:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18974:	0013c340 	call	13c34 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18978:	e0bfff17 	ldw	r2,-4(fp)
   1897c:	00c00384 	movi	r3,14
   18980:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18984:	e0bff803 	ldbu	r2,-32(fp)
   18988:	00000706 	br	189a8 <OSSemPendAbort+0x158>
   1898c:	e0bff917 	ldw	r2,-28(fp)
   18990:	e0bffc15 	stw	r2,-16(fp)
   18994:	e0bffc17 	ldw	r2,-16(fp)
   18998:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1899c:	e0bfff17 	ldw	r2,-4(fp)
   189a0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   189a4:	0005883a 	mov	r2,zero
}
   189a8:	e037883a 	mov	sp,fp
   189ac:	dfc00117 	ldw	ra,4(sp)
   189b0:	df000017 	ldw	fp,0(sp)
   189b4:	dec00204 	addi	sp,sp,8
   189b8:	f800283a 	ret

000189bc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   189bc:	defff804 	addi	sp,sp,-32
   189c0:	dfc00715 	stw	ra,28(sp)
   189c4:	df000615 	stw	fp,24(sp)
   189c8:	df000604 	addi	fp,sp,24
   189cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   189d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   189d4:	e0bfff17 	ldw	r2,-4(fp)
   189d8:	1000021e 	bne	r2,zero,189e4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   189dc:	00800104 	movi	r2,4
   189e0:	00003506 	br	18ab8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   189e4:	e0bfff17 	ldw	r2,-4(fp)
   189e8:	10800003 	ldbu	r2,0(r2)
   189ec:	10803fcc 	andi	r2,r2,255
   189f0:	108000e0 	cmpeqi	r2,r2,3
   189f4:	1000021e 	bne	r2,zero,18a00 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   189f8:	00800044 	movi	r2,1
   189fc:	00002e06 	br	18ab8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a00:	0005303a 	rdctl	r2,status
   18a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a08:	e0fffb17 	ldw	r3,-20(fp)
   18a0c:	00bfff84 	movi	r2,-2
   18a10:	1884703a 	and	r2,r3,r2
   18a14:	1001703a 	wrctl	status,r2
  
  return context;
   18a18:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   18a1c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   18a20:	e0bfff17 	ldw	r2,-4(fp)
   18a24:	10800283 	ldbu	r2,10(r2)
   18a28:	10803fcc 	andi	r2,r2,255
   18a2c:	10000c26 	beq	r2,zero,18a60 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18a30:	e13fff17 	ldw	r4,-4(fp)
   18a34:	000b883a 	mov	r5,zero
   18a38:	01800044 	movi	r6,1
   18a3c:	000f883a 	mov	r7,zero
   18a40:	001321c0 	call	1321c <OS_EventTaskRdy>
   18a44:	e0bffa17 	ldw	r2,-24(fp)
   18a48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a4c:	e0bffc17 	ldw	r2,-16(fp)
   18a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18a54:	0013c340 	call	13c34 <OS_Sched>
        return (OS_ERR_NONE);
   18a58:	0005883a 	mov	r2,zero
   18a5c:	00001606 	br	18ab8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   18a60:	e0bfff17 	ldw	r2,-4(fp)
   18a64:	1080020b 	ldhu	r2,8(r2)
   18a68:	10ffffcc 	andi	r3,r2,65535
   18a6c:	00bfffd4 	movui	r2,65535
   18a70:	18800c26 	beq	r3,r2,18aa4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   18a74:	e0bfff17 	ldw	r2,-4(fp)
   18a78:	1080020b 	ldhu	r2,8(r2)
   18a7c:	10800044 	addi	r2,r2,1
   18a80:	1007883a 	mov	r3,r2
   18a84:	e0bfff17 	ldw	r2,-4(fp)
   18a88:	10c0020d 	sth	r3,8(r2)
   18a8c:	e0bffa17 	ldw	r2,-24(fp)
   18a90:	e0bffd15 	stw	r2,-12(fp)
   18a94:	e0bffd17 	ldw	r2,-12(fp)
   18a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18a9c:	0005883a 	mov	r2,zero
   18aa0:	00000506 	br	18ab8 <OSSemPost+0xfc>
   18aa4:	e0bffa17 	ldw	r2,-24(fp)
   18aa8:	e0bffe15 	stw	r2,-8(fp)
   18aac:	e0bffe17 	ldw	r2,-8(fp)
   18ab0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   18ab4:	00800c84 	movi	r2,50
}
   18ab8:	e037883a 	mov	sp,fp
   18abc:	dfc00117 	ldw	ra,4(sp)
   18ac0:	df000017 	ldw	fp,0(sp)
   18ac4:	dec00204 	addi	sp,sp,8
   18ac8:	f800283a 	ret

00018acc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18acc:	defff704 	addi	sp,sp,-36
   18ad0:	df000815 	stw	fp,32(sp)
   18ad4:	df000804 	addi	fp,sp,32
   18ad8:	e13ffe15 	stw	r4,-8(fp)
   18adc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18ae0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18ae4:	e0bffe17 	ldw	r2,-8(fp)
   18ae8:	1000021e 	bne	r2,zero,18af4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18aec:	00800104 	movi	r2,4
   18af0:	00003606 	br	18bcc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   18af4:	e0bfff17 	ldw	r2,-4(fp)
   18af8:	1000021e 	bne	r2,zero,18b04 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18afc:	00800244 	movi	r2,9
   18b00:	00003206 	br	18bcc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18b04:	e0bffe17 	ldw	r2,-8(fp)
   18b08:	10800003 	ldbu	r2,0(r2)
   18b0c:	10803fcc 	andi	r2,r2,255
   18b10:	108000e0 	cmpeqi	r2,r2,3
   18b14:	1000021e 	bne	r2,zero,18b20 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18b18:	00800044 	movi	r2,1
   18b1c:	00002b06 	br	18bcc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b20:	0005303a 	rdctl	r2,status
   18b24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b28:	e0fffc17 	ldw	r3,-16(fp)
   18b2c:	00bfff84 	movi	r2,-2
   18b30:	1884703a 	and	r2,r3,r2
   18b34:	1001703a 	wrctl	status,r2
  
  return context;
   18b38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18b3c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   18b40:	e0bffe17 	ldw	r2,-8(fp)
   18b44:	10c00283 	ldbu	r3,10(r2)
   18b48:	e0bfff17 	ldw	r2,-4(fp)
   18b4c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   18b50:	e0bffe17 	ldw	r2,-8(fp)
   18b54:	108002c4 	addi	r2,r2,11
   18b58:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   18b5c:	e0bfff17 	ldw	r2,-4(fp)
   18b60:	10800084 	addi	r2,r2,2
   18b64:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18b68:	e03ffa05 	stb	zero,-24(fp)
   18b6c:	00000b06 	br	18b9c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   18b70:	e0bff917 	ldw	r2,-28(fp)
   18b74:	10c00044 	addi	r3,r2,1
   18b78:	e0fff915 	stw	r3,-28(fp)
   18b7c:	e0fff817 	ldw	r3,-32(fp)
   18b80:	19000044 	addi	r4,r3,1
   18b84:	e13ff815 	stw	r4,-32(fp)
   18b88:	18c00003 	ldbu	r3,0(r3)
   18b8c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18b90:	e0bffa03 	ldbu	r2,-24(fp)
   18b94:	10800044 	addi	r2,r2,1
   18b98:	e0bffa05 	stb	r2,-24(fp)
   18b9c:	e0bffa03 	ldbu	r2,-24(fp)
   18ba0:	108000f0 	cmpltui	r2,r2,3
   18ba4:	103ff21e 	bne	r2,zero,18b70 <__alt_mem_Flash_flash_data+0xf4018b70>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18ba8:	e0bffe17 	ldw	r2,-8(fp)
   18bac:	10c0020b 	ldhu	r3,8(r2)
   18bb0:	e0bfff17 	ldw	r2,-4(fp)
   18bb4:	10c0000d 	sth	r3,0(r2)
   18bb8:	e0bffb17 	ldw	r2,-20(fp)
   18bbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bc0:	e0bffd17 	ldw	r2,-12(fp)
   18bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18bc8:	0005883a 	mov	r2,zero
}
   18bcc:	e037883a 	mov	sp,fp
   18bd0:	df000017 	ldw	fp,0(sp)
   18bd4:	dec00104 	addi	sp,sp,4
   18bd8:	f800283a 	ret

00018bdc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18bdc:	defff904 	addi	sp,sp,-28
   18be0:	df000615 	stw	fp,24(sp)
   18be4:	df000604 	addi	fp,sp,24
   18be8:	e13ffd15 	stw	r4,-12(fp)
   18bec:	2805883a 	mov	r2,r5
   18bf0:	e1bfff15 	stw	r6,-4(fp)
   18bf4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18bf8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18bfc:	e0bfff17 	ldw	r2,-4(fp)
   18c00:	1000011e 	bne	r2,zero,18c08 <OSSemSet+0x2c>
        return;
   18c04:	00003006 	br	18cc8 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18c08:	e0bffd17 	ldw	r2,-12(fp)
   18c0c:	1000041e 	bne	r2,zero,18c20 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18c10:	e0bfff17 	ldw	r2,-4(fp)
   18c14:	00c00104 	movi	r3,4
   18c18:	10c00005 	stb	r3,0(r2)
        return;
   18c1c:	00002a06 	br	18cc8 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18c20:	e0bffd17 	ldw	r2,-12(fp)
   18c24:	10800003 	ldbu	r2,0(r2)
   18c28:	10803fcc 	andi	r2,r2,255
   18c2c:	108000e0 	cmpeqi	r2,r2,3
   18c30:	1000041e 	bne	r2,zero,18c44 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   18c34:	e0bfff17 	ldw	r2,-4(fp)
   18c38:	00c00044 	movi	r3,1
   18c3c:	10c00005 	stb	r3,0(r2)
        return;
   18c40:	00002106 	br	18cc8 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c44:	0005303a 	rdctl	r2,status
   18c48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c4c:	e0fffb17 	ldw	r3,-20(fp)
   18c50:	00bfff84 	movi	r2,-2
   18c54:	1884703a 	and	r2,r3,r2
   18c58:	1001703a 	wrctl	status,r2
  
  return context;
   18c5c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   18c60:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   18c64:	e0bfff17 	ldw	r2,-4(fp)
   18c68:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   18c6c:	e0bffd17 	ldw	r2,-12(fp)
   18c70:	1080020b 	ldhu	r2,8(r2)
   18c74:	10bfffcc 	andi	r2,r2,65535
   18c78:	10000426 	beq	r2,zero,18c8c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   18c7c:	e0bffd17 	ldw	r2,-12(fp)
   18c80:	e0fffe0b 	ldhu	r3,-8(fp)
   18c84:	10c0020d 	sth	r3,8(r2)
   18c88:	00000b06 	br	18cb8 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18c8c:	e0bffd17 	ldw	r2,-12(fp)
   18c90:	10800283 	ldbu	r2,10(r2)
   18c94:	10803fcc 	andi	r2,r2,255
   18c98:	1000041e 	bne	r2,zero,18cac <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18c9c:	e0bffd17 	ldw	r2,-12(fp)
   18ca0:	e0fffe0b 	ldhu	r3,-8(fp)
   18ca4:	10c0020d 	sth	r3,8(r2)
   18ca8:	00000306 	br	18cb8 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18cac:	e0bfff17 	ldw	r2,-4(fp)
   18cb0:	00c01244 	movi	r3,73
   18cb4:	10c00005 	stb	r3,0(r2)
   18cb8:	e0bffa17 	ldw	r2,-24(fp)
   18cbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cc0:	e0bffc17 	ldw	r2,-16(fp)
   18cc4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   18cc8:	e037883a 	mov	sp,fp
   18ccc:	df000017 	ldw	fp,0(sp)
   18cd0:	dec00104 	addi	sp,sp,4
   18cd4:	f800283a 	ret

00018cd8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18cd8:	defff104 	addi	sp,sp,-60
   18cdc:	dfc00e15 	stw	ra,56(sp)
   18ce0:	df000d15 	stw	fp,52(sp)
   18ce4:	df000d04 	addi	fp,sp,52
   18ce8:	2007883a 	mov	r3,r4
   18cec:	2805883a 	mov	r2,r5
   18cf0:	e0fffe05 	stb	r3,-8(fp)
   18cf4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18cf8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18cfc:	e0bffe03 	ldbu	r2,-8(fp)
   18d00:	10800530 	cmpltui	r2,r2,20
   18d04:	1000051e 	bne	r2,zero,18d1c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   18d08:	e0bffe03 	ldbu	r2,-8(fp)
   18d0c:	10803fe0 	cmpeqi	r2,r2,255
   18d10:	1000021e 	bne	r2,zero,18d1c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   18d14:	00800a84 	movi	r2,42
   18d18:	00013a06 	br	19204 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   18d1c:	e0bfff03 	ldbu	r2,-4(fp)
   18d20:	10800530 	cmpltui	r2,r2,20
   18d24:	1000021e 	bne	r2,zero,18d30 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   18d28:	00800a84 	movi	r2,42
   18d2c:	00013506 	br	19204 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d30:	0005303a 	rdctl	r2,status
   18d34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d38:	e0fff917 	ldw	r3,-28(fp)
   18d3c:	00bfff84 	movi	r2,-2
   18d40:	1884703a 	and	r2,r3,r2
   18d44:	1001703a 	wrctl	status,r2
  
  return context;
   18d48:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18d4c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   18d50:	e0ffff03 	ldbu	r3,-4(fp)
   18d54:	008000f4 	movhi	r2,3
   18d58:	10846004 	addi	r2,r2,4480
   18d5c:	18c7883a 	add	r3,r3,r3
   18d60:	18c7883a 	add	r3,r3,r3
   18d64:	10c5883a 	add	r2,r2,r3
   18d68:	10800017 	ldw	r2,0(r2)
   18d6c:	10000626 	beq	r2,zero,18d88 <OSTaskChangePrio+0xb0>
   18d70:	e0bff517 	ldw	r2,-44(fp)
   18d74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d78:	e0bffa17 	ldw	r2,-24(fp)
   18d7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   18d80:	00800a04 	movi	r2,40
   18d84:	00011f06 	br	19204 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18d88:	e0bffe03 	ldbu	r2,-8(fp)
   18d8c:	10803fd8 	cmpnei	r2,r2,255
   18d90:	1000051e 	bne	r2,zero,18da8 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18d94:	008000b4 	movhi	r2,2
   18d98:	108f6704 	addi	r2,r2,15772
   18d9c:	10800017 	ldw	r2,0(r2)
   18da0:	10800c83 	ldbu	r2,50(r2)
   18da4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   18da8:	e0fffe03 	ldbu	r3,-8(fp)
   18dac:	008000f4 	movhi	r2,3
   18db0:	10846004 	addi	r2,r2,4480
   18db4:	18c7883a 	add	r3,r3,r3
   18db8:	18c7883a 	add	r3,r3,r3
   18dbc:	10c5883a 	add	r2,r2,r3
   18dc0:	10800017 	ldw	r2,0(r2)
   18dc4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   18dc8:	e0bff617 	ldw	r2,-40(fp)
   18dcc:	1000061e 	bne	r2,zero,18de8 <OSTaskChangePrio+0x110>
   18dd0:	e0bff517 	ldw	r2,-44(fp)
   18dd4:	e0bffb15 	stw	r2,-20(fp)
   18dd8:	e0bffb17 	ldw	r2,-20(fp)
   18ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   18de0:	00800a44 	movi	r2,41
   18de4:	00010706 	br	19204 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   18de8:	e0bff617 	ldw	r2,-40(fp)
   18dec:	10800058 	cmpnei	r2,r2,1
   18df0:	1000061e 	bne	r2,zero,18e0c <OSTaskChangePrio+0x134>
   18df4:	e0bff517 	ldw	r2,-44(fp)
   18df8:	e0bffc15 	stw	r2,-16(fp)
   18dfc:	e0bffc17 	ldw	r2,-16(fp)
   18e00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   18e04:	008010c4 	movi	r2,67
   18e08:	0000fe06 	br	19204 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   18e0c:	e0bfff03 	ldbu	r2,-4(fp)
   18e10:	1004d0fa 	srli	r2,r2,3
   18e14:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   18e18:	e0bfff03 	ldbu	r2,-4(fp)
   18e1c:	108001cc 	andi	r2,r2,7
   18e20:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   18e24:	e0bff703 	ldbu	r2,-36(fp)
   18e28:	00c00044 	movi	r3,1
   18e2c:	1884983a 	sll	r2,r3,r2
   18e30:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   18e34:	e0bff743 	ldbu	r2,-35(fp)
   18e38:	00c00044 	movi	r3,1
   18e3c:	1884983a 	sll	r2,r3,r2
   18e40:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   18e44:	e0fffe03 	ldbu	r3,-8(fp)
   18e48:	008000f4 	movhi	r2,3
   18e4c:	10846004 	addi	r2,r2,4480
   18e50:	18c7883a 	add	r3,r3,r3
   18e54:	18c7883a 	add	r3,r3,r3
   18e58:	10c5883a 	add	r2,r2,r3
   18e5c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   18e60:	e0ffff03 	ldbu	r3,-4(fp)
   18e64:	008000f4 	movhi	r2,3
   18e68:	10846004 	addi	r2,r2,4480
   18e6c:	18c7883a 	add	r3,r3,r3
   18e70:	18c7883a 	add	r3,r3,r3
   18e74:	10c5883a 	add	r2,r2,r3
   18e78:	e0fff617 	ldw	r3,-40(fp)
   18e7c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   18e80:	e0bff617 	ldw	r2,-40(fp)
   18e84:	10800d03 	ldbu	r2,52(r2)
   18e88:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   18e8c:	e0bff617 	ldw	r2,-40(fp)
   18e90:	10800d83 	ldbu	r2,54(r2)
   18e94:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   18e98:	e0bff617 	ldw	r2,-40(fp)
   18e9c:	10800d43 	ldbu	r2,53(r2)
   18ea0:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   18ea4:	e0fff803 	ldbu	r3,-32(fp)
   18ea8:	008000b4 	movhi	r2,2
   18eac:	108f6444 	addi	r2,r2,15761
   18eb0:	10c5883a 	add	r2,r2,r3
   18eb4:	10c00003 	ldbu	r3,0(r2)
   18eb8:	e0bff883 	ldbu	r2,-30(fp)
   18ebc:	1884703a 	and	r2,r3,r2
   18ec0:	10803fcc 	andi	r2,r2,255
   18ec4:	10003726 	beq	r2,zero,18fa4 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   18ec8:	e0fff803 	ldbu	r3,-32(fp)
   18ecc:	e13ff803 	ldbu	r4,-32(fp)
   18ed0:	008000b4 	movhi	r2,2
   18ed4:	108f6444 	addi	r2,r2,15761
   18ed8:	1105883a 	add	r2,r2,r4
   18edc:	10800003 	ldbu	r2,0(r2)
   18ee0:	1009883a 	mov	r4,r2
   18ee4:	e0bff883 	ldbu	r2,-30(fp)
   18ee8:	0084303a 	nor	r2,zero,r2
   18eec:	2084703a 	and	r2,r4,r2
   18ef0:	1009883a 	mov	r4,r2
   18ef4:	008000b4 	movhi	r2,2
   18ef8:	108f6444 	addi	r2,r2,15761
   18efc:	10c5883a 	add	r2,r2,r3
   18f00:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   18f04:	e0fff803 	ldbu	r3,-32(fp)
   18f08:	008000b4 	movhi	r2,2
   18f0c:	108f6444 	addi	r2,r2,15761
   18f10:	10c5883a 	add	r2,r2,r3
   18f14:	10800003 	ldbu	r2,0(r2)
   18f18:	10803fcc 	andi	r2,r2,255
   18f1c:	10000b1e 	bne	r2,zero,18f4c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   18f20:	e0bff843 	ldbu	r2,-31(fp)
   18f24:	0084303a 	nor	r2,zero,r2
   18f28:	1007883a 	mov	r3,r2
   18f2c:	008000b4 	movhi	r2,2
   18f30:	108f6404 	addi	r2,r2,15760
   18f34:	10800003 	ldbu	r2,0(r2)
   18f38:	1884703a 	and	r2,r3,r2
   18f3c:	1007883a 	mov	r3,r2
   18f40:	008000b4 	movhi	r2,2
   18f44:	108f6404 	addi	r2,r2,15760
   18f48:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   18f4c:	008000b4 	movhi	r2,2
   18f50:	108f6404 	addi	r2,r2,15760
   18f54:	10c00003 	ldbu	r3,0(r2)
   18f58:	e0bff783 	ldbu	r2,-34(fp)
   18f5c:	1884b03a 	or	r2,r3,r2
   18f60:	1007883a 	mov	r3,r2
   18f64:	008000b4 	movhi	r2,2
   18f68:	108f6404 	addi	r2,r2,15760
   18f6c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   18f70:	e0fff703 	ldbu	r3,-36(fp)
   18f74:	e13ff703 	ldbu	r4,-36(fp)
   18f78:	008000b4 	movhi	r2,2
   18f7c:	108f6444 	addi	r2,r2,15761
   18f80:	1105883a 	add	r2,r2,r4
   18f84:	11000003 	ldbu	r4,0(r2)
   18f88:	e0bff7c3 	ldbu	r2,-33(fp)
   18f8c:	2084b03a 	or	r2,r4,r2
   18f90:	1009883a 	mov	r4,r2
   18f94:	008000b4 	movhi	r2,2
   18f98:	108f6444 	addi	r2,r2,15761
   18f9c:	10c5883a 	add	r2,r2,r3
   18fa0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   18fa4:	e0bff617 	ldw	r2,-40(fp)
   18fa8:	10800717 	ldw	r2,28(r2)
   18fac:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   18fb0:	e0bff317 	ldw	r2,-52(fp)
   18fb4:	10003326 	beq	r2,zero,19084 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   18fb8:	e0bff803 	ldbu	r2,-32(fp)
   18fbc:	e0fff803 	ldbu	r3,-32(fp)
   18fc0:	e13ff317 	ldw	r4,-52(fp)
   18fc4:	20c7883a 	add	r3,r4,r3
   18fc8:	18c00204 	addi	r3,r3,8
   18fcc:	18c000c3 	ldbu	r3,3(r3)
   18fd0:	1809883a 	mov	r4,r3
   18fd4:	e0fff883 	ldbu	r3,-30(fp)
   18fd8:	00c6303a 	nor	r3,zero,r3
   18fdc:	20c6703a 	and	r3,r4,r3
   18fe0:	1809883a 	mov	r4,r3
   18fe4:	e0fff317 	ldw	r3,-52(fp)
   18fe8:	1885883a 	add	r2,r3,r2
   18fec:	10800204 	addi	r2,r2,8
   18ff0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   18ff4:	e0bff803 	ldbu	r2,-32(fp)
   18ff8:	e0fff317 	ldw	r3,-52(fp)
   18ffc:	1885883a 	add	r2,r3,r2
   19000:	10800204 	addi	r2,r2,8
   19004:	108000c3 	ldbu	r2,3(r2)
   19008:	10803fcc 	andi	r2,r2,255
   1900c:	1000091e 	bne	r2,zero,19034 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   19010:	e0bff317 	ldw	r2,-52(fp)
   19014:	10800283 	ldbu	r2,10(r2)
   19018:	1007883a 	mov	r3,r2
   1901c:	e0bff843 	ldbu	r2,-31(fp)
   19020:	0084303a 	nor	r2,zero,r2
   19024:	1884703a 	and	r2,r3,r2
   19028:	1007883a 	mov	r3,r2
   1902c:	e0bff317 	ldw	r2,-52(fp)
   19030:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   19034:	e0bff317 	ldw	r2,-52(fp)
   19038:	10c00283 	ldbu	r3,10(r2)
   1903c:	e0bff783 	ldbu	r2,-34(fp)
   19040:	1884b03a 	or	r2,r3,r2
   19044:	1007883a 	mov	r3,r2
   19048:	e0bff317 	ldw	r2,-52(fp)
   1904c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   19050:	e0bff703 	ldbu	r2,-36(fp)
   19054:	e0fff703 	ldbu	r3,-36(fp)
   19058:	e13ff317 	ldw	r4,-52(fp)
   1905c:	20c7883a 	add	r3,r4,r3
   19060:	18c00204 	addi	r3,r3,8
   19064:	190000c3 	ldbu	r4,3(r3)
   19068:	e0fff7c3 	ldbu	r3,-33(fp)
   1906c:	20c6b03a 	or	r3,r4,r3
   19070:	1809883a 	mov	r4,r3
   19074:	e0fff317 	ldw	r3,-52(fp)
   19078:	1885883a 	add	r2,r3,r2
   1907c:	10800204 	addi	r2,r2,8
   19080:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   19084:	e0bff617 	ldw	r2,-40(fp)
   19088:	10800817 	ldw	r2,32(r2)
   1908c:	10004226 	beq	r2,zero,19198 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   19090:	e0bff617 	ldw	r2,-40(fp)
   19094:	10800817 	ldw	r2,32(r2)
   19098:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1909c:	e0bff417 	ldw	r2,-48(fp)
   190a0:	10800017 	ldw	r2,0(r2)
   190a4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   190a8:	00003906 	br	19190 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   190ac:	e0bff803 	ldbu	r2,-32(fp)
   190b0:	e0fff803 	ldbu	r3,-32(fp)
   190b4:	e13ff317 	ldw	r4,-52(fp)
   190b8:	20c7883a 	add	r3,r4,r3
   190bc:	18c00204 	addi	r3,r3,8
   190c0:	18c000c3 	ldbu	r3,3(r3)
   190c4:	1809883a 	mov	r4,r3
   190c8:	e0fff883 	ldbu	r3,-30(fp)
   190cc:	00c6303a 	nor	r3,zero,r3
   190d0:	20c6703a 	and	r3,r4,r3
   190d4:	1809883a 	mov	r4,r3
   190d8:	e0fff317 	ldw	r3,-52(fp)
   190dc:	1885883a 	add	r2,r3,r2
   190e0:	10800204 	addi	r2,r2,8
   190e4:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   190e8:	e0bff803 	ldbu	r2,-32(fp)
   190ec:	e0fff317 	ldw	r3,-52(fp)
   190f0:	1885883a 	add	r2,r3,r2
   190f4:	10800204 	addi	r2,r2,8
   190f8:	108000c3 	ldbu	r2,3(r2)
   190fc:	10803fcc 	andi	r2,r2,255
   19100:	1000091e 	bne	r2,zero,19128 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   19104:	e0bff317 	ldw	r2,-52(fp)
   19108:	10800283 	ldbu	r2,10(r2)
   1910c:	1007883a 	mov	r3,r2
   19110:	e0bff843 	ldbu	r2,-31(fp)
   19114:	0084303a 	nor	r2,zero,r2
   19118:	1884703a 	and	r2,r3,r2
   1911c:	1007883a 	mov	r3,r2
   19120:	e0bff317 	ldw	r2,-52(fp)
   19124:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19128:	e0bff317 	ldw	r2,-52(fp)
   1912c:	10c00283 	ldbu	r3,10(r2)
   19130:	e0bff783 	ldbu	r2,-34(fp)
   19134:	1884b03a 	or	r2,r3,r2
   19138:	1007883a 	mov	r3,r2
   1913c:	e0bff317 	ldw	r2,-52(fp)
   19140:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19144:	e0bff703 	ldbu	r2,-36(fp)
   19148:	e0fff703 	ldbu	r3,-36(fp)
   1914c:	e13ff317 	ldw	r4,-52(fp)
   19150:	20c7883a 	add	r3,r4,r3
   19154:	18c00204 	addi	r3,r3,8
   19158:	190000c3 	ldbu	r4,3(r3)
   1915c:	e0fff7c3 	ldbu	r3,-33(fp)
   19160:	20c6b03a 	or	r3,r4,r3
   19164:	1809883a 	mov	r4,r3
   19168:	e0fff317 	ldw	r3,-52(fp)
   1916c:	1885883a 	add	r2,r3,r2
   19170:	10800204 	addi	r2,r2,8
   19174:	110000c5 	stb	r4,3(r2)
            pevents++;
   19178:	e0bff417 	ldw	r2,-48(fp)
   1917c:	10800104 	addi	r2,r2,4
   19180:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   19184:	e0bff417 	ldw	r2,-48(fp)
   19188:	10800017 	ldw	r2,0(r2)
   1918c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   19190:	e0bff317 	ldw	r2,-52(fp)
   19194:	103fc51e 	bne	r2,zero,190ac <__alt_mem_Flash_flash_data+0xf40190ac>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19198:	e0bff617 	ldw	r2,-40(fp)
   1919c:	e0ffff03 	ldbu	r3,-4(fp)
   191a0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   191a4:	e0bff617 	ldw	r2,-40(fp)
   191a8:	e0fff703 	ldbu	r3,-36(fp)
   191ac:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   191b0:	e0bff617 	ldw	r2,-40(fp)
   191b4:	e0fff743 	ldbu	r3,-35(fp)
   191b8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   191bc:	e0bff617 	ldw	r2,-40(fp)
   191c0:	e0fff783 	ldbu	r3,-34(fp)
   191c4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   191c8:	e0bff617 	ldw	r2,-40(fp)
   191cc:	e0fff7c3 	ldbu	r3,-33(fp)
   191d0:	10c00d45 	stb	r3,53(r2)
   191d4:	e0bff517 	ldw	r2,-44(fp)
   191d8:	e0bffd15 	stw	r2,-12(fp)
   191dc:	e0bffd17 	ldw	r2,-12(fp)
   191e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   191e4:	008000b4 	movhi	r2,2
   191e8:	108f5844 	addi	r2,r2,15713
   191ec:	10800003 	ldbu	r2,0(r2)
   191f0:	10803fcc 	andi	r2,r2,255
   191f4:	10800058 	cmpnei	r2,r2,1
   191f8:	1000011e 	bne	r2,zero,19200 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   191fc:	0013c340 	call	13c34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19200:	0005883a 	mov	r2,zero
}
   19204:	e037883a 	mov	sp,fp
   19208:	dfc00117 	ldw	ra,4(sp)
   1920c:	df000017 	ldw	fp,0(sp)
   19210:	dec00204 	addi	sp,sp,8
   19214:	f800283a 	ret

00019218 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   19218:	deffee04 	addi	sp,sp,-72
   1921c:	dfc01115 	stw	ra,68(sp)
   19220:	df001015 	stw	fp,64(sp)
   19224:	df001004 	addi	fp,sp,64
   19228:	e13ffc15 	stw	r4,-16(fp)
   1922c:	e17ffd15 	stw	r5,-12(fp)
   19230:	e1bffe15 	stw	r6,-8(fp)
   19234:	3805883a 	mov	r2,r7
   19238:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1923c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19240:	e0bfff03 	ldbu	r2,-4(fp)
   19244:	10800570 	cmpltui	r2,r2,21
   19248:	1000021e 	bne	r2,zero,19254 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1924c:	00800a84 	movi	r2,42
   19250:	00005b06 	br	193c0 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19254:	0005303a 	rdctl	r2,status
   19258:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1925c:	e0fff617 	ldw	r3,-40(fp)
   19260:	00bfff84 	movi	r2,-2
   19264:	1884703a 	and	r2,r3,r2
   19268:	1001703a 	wrctl	status,r2
  
  return context;
   1926c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19270:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19274:	008000b4 	movhi	r2,2
   19278:	108f6604 	addi	r2,r2,15768
   1927c:	10800003 	ldbu	r2,0(r2)
   19280:	10803fcc 	andi	r2,r2,255
   19284:	10000626 	beq	r2,zero,192a0 <OSTaskCreate+0x88>
   19288:	e0bff317 	ldw	r2,-52(fp)
   1928c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19290:	e0bff717 	ldw	r2,-36(fp)
   19294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19298:	00800f04 	movi	r2,60
   1929c:	00004806 	br	193c0 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   192a0:	e0ffff03 	ldbu	r3,-4(fp)
   192a4:	008000f4 	movhi	r2,3
   192a8:	10846004 	addi	r2,r2,4480
   192ac:	18c7883a 	add	r3,r3,r3
   192b0:	18c7883a 	add	r3,r3,r3
   192b4:	10c5883a 	add	r2,r2,r3
   192b8:	10800017 	ldw	r2,0(r2)
   192bc:	10003b1e 	bne	r2,zero,193ac <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   192c0:	e0ffff03 	ldbu	r3,-4(fp)
   192c4:	008000f4 	movhi	r2,3
   192c8:	10846004 	addi	r2,r2,4480
   192cc:	18c7883a 	add	r3,r3,r3
   192d0:	18c7883a 	add	r3,r3,r3
   192d4:	10c5883a 	add	r2,r2,r3
   192d8:	00c00044 	movi	r3,1
   192dc:	10c00015 	stw	r3,0(r2)
   192e0:	e0bff317 	ldw	r2,-52(fp)
   192e4:	e0bff815 	stw	r2,-32(fp)
   192e8:	e0bff817 	ldw	r2,-32(fp)
   192ec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   192f0:	e13ffc17 	ldw	r4,-16(fp)
   192f4:	e17ffd17 	ldw	r5,-12(fp)
   192f8:	e1bffe17 	ldw	r6,-8(fp)
   192fc:	000f883a 	mov	r7,zero
   19300:	001e4b40 	call	1e4b4 <OSTaskStkInit>
   19304:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   19308:	e0bfff03 	ldbu	r2,-4(fp)
   1930c:	d8000015 	stw	zero,0(sp)
   19310:	d8000115 	stw	zero,4(sp)
   19314:	d8000215 	stw	zero,8(sp)
   19318:	1009883a 	mov	r4,r2
   1931c:	e17ff417 	ldw	r5,-48(fp)
   19320:	000d883a 	mov	r6,zero
   19324:	000f883a 	mov	r7,zero
   19328:	00140380 	call	14038 <OS_TCBInit>
   1932c:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   19330:	e0bff503 	ldbu	r2,-44(fp)
   19334:	1000081e 	bne	r2,zero,19358 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19338:	008000b4 	movhi	r2,2
   1933c:	108f5844 	addi	r2,r2,15713
   19340:	10800003 	ldbu	r2,0(r2)
   19344:	10803fcc 	andi	r2,r2,255
   19348:	10800058 	cmpnei	r2,r2,1
   1934c:	1000151e 	bne	r2,zero,193a4 <OSTaskCreate+0x18c>
                OS_Sched();
   19350:	0013c340 	call	13c34 <OS_Sched>
   19354:	00001306 	br	193a4 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19358:	0005303a 	rdctl	r2,status
   1935c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19360:	e0fff917 	ldw	r3,-28(fp)
   19364:	00bfff84 	movi	r2,-2
   19368:	1884703a 	and	r2,r3,r2
   1936c:	1001703a 	wrctl	status,r2
  
  return context;
   19370:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19374:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   19378:	e0ffff03 	ldbu	r3,-4(fp)
   1937c:	008000f4 	movhi	r2,3
   19380:	10846004 	addi	r2,r2,4480
   19384:	18c7883a 	add	r3,r3,r3
   19388:	18c7883a 	add	r3,r3,r3
   1938c:	10c5883a 	add	r2,r2,r3
   19390:	10000015 	stw	zero,0(r2)
   19394:	e0bff317 	ldw	r2,-52(fp)
   19398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1939c:	e0bffa17 	ldw	r2,-24(fp)
   193a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   193a4:	e0bff503 	ldbu	r2,-44(fp)
   193a8:	00000506 	br	193c0 <OSTaskCreate+0x1a8>
   193ac:	e0bff317 	ldw	r2,-52(fp)
   193b0:	e0bffb15 	stw	r2,-20(fp)
   193b4:	e0bffb17 	ldw	r2,-20(fp)
   193b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   193bc:	00800a04 	movi	r2,40
}
   193c0:	e037883a 	mov	sp,fp
   193c4:	dfc00117 	ldw	ra,4(sp)
   193c8:	df000017 	ldw	fp,0(sp)
   193cc:	dec00204 	addi	sp,sp,8
   193d0:	f800283a 	ret

000193d4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   193d4:	deffec04 	addi	sp,sp,-80
   193d8:	dfc01315 	stw	ra,76(sp)
   193dc:	df001215 	stw	fp,72(sp)
   193e0:	df001204 	addi	fp,sp,72
   193e4:	e13ffa15 	stw	r4,-24(fp)
   193e8:	e17ffb15 	stw	r5,-20(fp)
   193ec:	e1bffc15 	stw	r6,-16(fp)
   193f0:	3809883a 	mov	r4,r7
   193f4:	e0c00217 	ldw	r3,8(fp)
   193f8:	e0800617 	ldw	r2,24(fp)
   193fc:	e13ffd05 	stb	r4,-12(fp)
   19400:	e0fffe0d 	sth	r3,-8(fp)
   19404:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19408:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1940c:	e0bffd03 	ldbu	r2,-12(fp)
   19410:	10800570 	cmpltui	r2,r2,21
   19414:	1000021e 	bne	r2,zero,19420 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   19418:	00800a84 	movi	r2,42
   1941c:	00006306 	br	195ac <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19420:	0005303a 	rdctl	r2,status
   19424:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19428:	e0fff417 	ldw	r3,-48(fp)
   1942c:	00bfff84 	movi	r2,-2
   19430:	1884703a 	and	r2,r3,r2
   19434:	1001703a 	wrctl	status,r2
  
  return context;
   19438:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1943c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19440:	008000b4 	movhi	r2,2
   19444:	108f6604 	addi	r2,r2,15768
   19448:	10800003 	ldbu	r2,0(r2)
   1944c:	10803fcc 	andi	r2,r2,255
   19450:	10000626 	beq	r2,zero,1946c <OSTaskCreateExt+0x98>
   19454:	e0bff117 	ldw	r2,-60(fp)
   19458:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1945c:	e0bff517 	ldw	r2,-44(fp)
   19460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19464:	00800f04 	movi	r2,60
   19468:	00005006 	br	195ac <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1946c:	e0fffd03 	ldbu	r3,-12(fp)
   19470:	008000f4 	movhi	r2,3
   19474:	10846004 	addi	r2,r2,4480
   19478:	18c7883a 	add	r3,r3,r3
   1947c:	18c7883a 	add	r3,r3,r3
   19480:	10c5883a 	add	r2,r2,r3
   19484:	10800017 	ldw	r2,0(r2)
   19488:	1000431e 	bne	r2,zero,19598 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1948c:	e0fffd03 	ldbu	r3,-12(fp)
   19490:	008000f4 	movhi	r2,3
   19494:	10846004 	addi	r2,r2,4480
   19498:	18c7883a 	add	r3,r3,r3
   1949c:	18c7883a 	add	r3,r3,r3
   194a0:	10c5883a 	add	r2,r2,r3
   194a4:	00c00044 	movi	r3,1
   194a8:	10c00015 	stw	r3,0(r2)
   194ac:	e0bff117 	ldw	r2,-60(fp)
   194b0:	e0bff615 	stw	r2,-40(fp)
   194b4:	e0bff617 	ldw	r2,-40(fp)
   194b8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   194bc:	e0bfff0b 	ldhu	r2,-4(fp)
   194c0:	e1000317 	ldw	r4,12(fp)
   194c4:	e1400417 	ldw	r5,16(fp)
   194c8:	100d883a 	mov	r6,r2
   194cc:	001a5600 	call	1a560 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   194d0:	e0bfff0b 	ldhu	r2,-4(fp)
   194d4:	e13ffa17 	ldw	r4,-24(fp)
   194d8:	e17ffb17 	ldw	r5,-20(fp)
   194dc:	e1bffc17 	ldw	r6,-16(fp)
   194e0:	100f883a 	mov	r7,r2
   194e4:	001e4b40 	call	1e4b4 <OSTaskStkInit>
   194e8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   194ec:	e13ffd03 	ldbu	r4,-12(fp)
   194f0:	e1fffe0b 	ldhu	r7,-8(fp)
   194f4:	e0bfff0b 	ldhu	r2,-4(fp)
   194f8:	e0c00417 	ldw	r3,16(fp)
   194fc:	d8c00015 	stw	r3,0(sp)
   19500:	e0c00517 	ldw	r3,20(fp)
   19504:	d8c00115 	stw	r3,4(sp)
   19508:	d8800215 	stw	r2,8(sp)
   1950c:	e17ff217 	ldw	r5,-56(fp)
   19510:	e1800317 	ldw	r6,12(fp)
   19514:	00140380 	call	14038 <OS_TCBInit>
   19518:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1951c:	e0bff303 	ldbu	r2,-52(fp)
   19520:	1000081e 	bne	r2,zero,19544 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   19524:	008000b4 	movhi	r2,2
   19528:	108f5844 	addi	r2,r2,15713
   1952c:	10800003 	ldbu	r2,0(r2)
   19530:	10803fcc 	andi	r2,r2,255
   19534:	10800058 	cmpnei	r2,r2,1
   19538:	1000151e 	bne	r2,zero,19590 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1953c:	0013c340 	call	13c34 <OS_Sched>
   19540:	00001306 	br	19590 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19544:	0005303a 	rdctl	r2,status
   19548:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1954c:	e0fff717 	ldw	r3,-36(fp)
   19550:	00bfff84 	movi	r2,-2
   19554:	1884703a 	and	r2,r3,r2
   19558:	1001703a 	wrctl	status,r2
  
  return context;
   1955c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19560:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19564:	e0fffd03 	ldbu	r3,-12(fp)
   19568:	008000f4 	movhi	r2,3
   1956c:	10846004 	addi	r2,r2,4480
   19570:	18c7883a 	add	r3,r3,r3
   19574:	18c7883a 	add	r3,r3,r3
   19578:	10c5883a 	add	r2,r2,r3
   1957c:	10000015 	stw	zero,0(r2)
   19580:	e0bff117 	ldw	r2,-60(fp)
   19584:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19588:	e0bff817 	ldw	r2,-32(fp)
   1958c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   19590:	e0bff303 	ldbu	r2,-52(fp)
   19594:	00000506 	br	195ac <OSTaskCreateExt+0x1d8>
   19598:	e0bff117 	ldw	r2,-60(fp)
   1959c:	e0bff915 	stw	r2,-28(fp)
   195a0:	e0bff917 	ldw	r2,-28(fp)
   195a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   195a8:	00800a04 	movi	r2,40
}
   195ac:	e037883a 	mov	sp,fp
   195b0:	dfc00117 	ldw	ra,4(sp)
   195b4:	df000017 	ldw	fp,0(sp)
   195b8:	dec00204 	addi	sp,sp,8
   195bc:	f800283a 	ret

000195c0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   195c0:	defff404 	addi	sp,sp,-48
   195c4:	dfc00b15 	stw	ra,44(sp)
   195c8:	df000a15 	stw	fp,40(sp)
   195cc:	df000a04 	addi	fp,sp,40
   195d0:	2005883a 	mov	r2,r4
   195d4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   195d8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   195dc:	008000b4 	movhi	r2,2
   195e0:	108f6604 	addi	r2,r2,15768
   195e4:	10800003 	ldbu	r2,0(r2)
   195e8:	10803fcc 	andi	r2,r2,255
   195ec:	10000226 	beq	r2,zero,195f8 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   195f0:	00801004 	movi	r2,64
   195f4:	0000e506 	br	1998c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   195f8:	e0bfff03 	ldbu	r2,-4(fp)
   195fc:	10800518 	cmpnei	r2,r2,20
   19600:	1000021e 	bne	r2,zero,1960c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   19604:	00800f84 	movi	r2,62
   19608:	0000e006 	br	1998c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1960c:	e0bfff03 	ldbu	r2,-4(fp)
   19610:	10800530 	cmpltui	r2,r2,20
   19614:	1000051e 	bne	r2,zero,1962c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   19618:	e0bfff03 	ldbu	r2,-4(fp)
   1961c:	10803fe0 	cmpeqi	r2,r2,255
   19620:	1000021e 	bne	r2,zero,1962c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   19624:	00800a84 	movi	r2,42
   19628:	0000d806 	br	1998c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1962c:	0005303a 	rdctl	r2,status
   19630:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19634:	e0fff917 	ldw	r3,-28(fp)
   19638:	00bfff84 	movi	r2,-2
   1963c:	1884703a 	and	r2,r3,r2
   19640:	1001703a 	wrctl	status,r2
  
  return context;
   19644:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   19648:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1964c:	e0bfff03 	ldbu	r2,-4(fp)
   19650:	10803fd8 	cmpnei	r2,r2,255
   19654:	1000051e 	bne	r2,zero,1966c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   19658:	008000b4 	movhi	r2,2
   1965c:	108f6704 	addi	r2,r2,15772
   19660:	10800017 	ldw	r2,0(r2)
   19664:	10800c83 	ldbu	r2,50(r2)
   19668:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1966c:	e0ffff03 	ldbu	r3,-4(fp)
   19670:	008000f4 	movhi	r2,3
   19674:	10846004 	addi	r2,r2,4480
   19678:	18c7883a 	add	r3,r3,r3
   1967c:	18c7883a 	add	r3,r3,r3
   19680:	10c5883a 	add	r2,r2,r3
   19684:	10800017 	ldw	r2,0(r2)
   19688:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1968c:	e0bff717 	ldw	r2,-36(fp)
   19690:	1000061e 	bne	r2,zero,196ac <OSTaskDel+0xec>
   19694:	e0bff617 	ldw	r2,-40(fp)
   19698:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1969c:	e0bffa17 	ldw	r2,-24(fp)
   196a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   196a4:	008010c4 	movi	r2,67
   196a8:	0000b806 	br	1998c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   196ac:	e0bff717 	ldw	r2,-36(fp)
   196b0:	10800058 	cmpnei	r2,r2,1
   196b4:	1000061e 	bne	r2,zero,196d0 <OSTaskDel+0x110>
   196b8:	e0bff617 	ldw	r2,-40(fp)
   196bc:	e0bffb15 	stw	r2,-20(fp)
   196c0:	e0bffb17 	ldw	r2,-20(fp)
   196c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   196c8:	00800f44 	movi	r2,61
   196cc:	0000af06 	br	1998c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   196d0:	e0bff717 	ldw	r2,-36(fp)
   196d4:	10800d03 	ldbu	r2,52(r2)
   196d8:	10c03fcc 	andi	r3,r2,255
   196dc:	e0bff717 	ldw	r2,-36(fp)
   196e0:	10800d03 	ldbu	r2,52(r2)
   196e4:	11003fcc 	andi	r4,r2,255
   196e8:	008000b4 	movhi	r2,2
   196ec:	108f6444 	addi	r2,r2,15761
   196f0:	1105883a 	add	r2,r2,r4
   196f4:	10800003 	ldbu	r2,0(r2)
   196f8:	1009883a 	mov	r4,r2
   196fc:	e0bff717 	ldw	r2,-36(fp)
   19700:	10800d43 	ldbu	r2,53(r2)
   19704:	0084303a 	nor	r2,zero,r2
   19708:	2084703a 	and	r2,r4,r2
   1970c:	1009883a 	mov	r4,r2
   19710:	008000b4 	movhi	r2,2
   19714:	108f6444 	addi	r2,r2,15761
   19718:	10c5883a 	add	r2,r2,r3
   1971c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   19720:	e0bff717 	ldw	r2,-36(fp)
   19724:	10800d03 	ldbu	r2,52(r2)
   19728:	10c03fcc 	andi	r3,r2,255
   1972c:	008000b4 	movhi	r2,2
   19730:	108f6444 	addi	r2,r2,15761
   19734:	10c5883a 	add	r2,r2,r3
   19738:	10800003 	ldbu	r2,0(r2)
   1973c:	10803fcc 	andi	r2,r2,255
   19740:	10000c1e 	bne	r2,zero,19774 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   19744:	e0bff717 	ldw	r2,-36(fp)
   19748:	10800d83 	ldbu	r2,54(r2)
   1974c:	0084303a 	nor	r2,zero,r2
   19750:	1007883a 	mov	r3,r2
   19754:	008000b4 	movhi	r2,2
   19758:	108f6404 	addi	r2,r2,15760
   1975c:	10800003 	ldbu	r2,0(r2)
   19760:	1884703a 	and	r2,r3,r2
   19764:	1007883a 	mov	r3,r2
   19768:	008000b4 	movhi	r2,2
   1976c:	108f6404 	addi	r2,r2,15760
   19770:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   19774:	e0bff717 	ldw	r2,-36(fp)
   19778:	10800717 	ldw	r2,28(r2)
   1977c:	10000526 	beq	r2,zero,19794 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   19780:	e0bff717 	ldw	r2,-36(fp)
   19784:	10800717 	ldw	r2,28(r2)
   19788:	e13ff717 	ldw	r4,-36(fp)
   1978c:	100b883a 	mov	r5,r2
   19790:	001360c0 	call	1360c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   19794:	e0bff717 	ldw	r2,-36(fp)
   19798:	10800817 	ldw	r2,32(r2)
   1979c:	10000526 	beq	r2,zero,197b4 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   197a0:	e0bff717 	ldw	r2,-36(fp)
   197a4:	10800817 	ldw	r2,32(r2)
   197a8:	e13ff717 	ldw	r4,-36(fp)
   197ac:	100b883a 	mov	r5,r2
   197b0:	00136c00 	call	136c0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   197b4:	e0bff717 	ldw	r2,-36(fp)
   197b8:	10800a17 	ldw	r2,40(r2)
   197bc:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   197c0:	e0bff817 	ldw	r2,-32(fp)
   197c4:	10000226 	beq	r2,zero,197d0 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   197c8:	e13ff817 	ldw	r4,-32(fp)
   197cc:	0015c140 	call	15c14 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   197d0:	e0bff717 	ldw	r2,-36(fp)
   197d4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   197d8:	e0bff717 	ldw	r2,-36(fp)
   197dc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   197e0:	e0bff717 	ldw	r2,-36(fp)
   197e4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   197e8:	008000b4 	movhi	r2,2
   197ec:	108f5804 	addi	r2,r2,15712
   197f0:	10800003 	ldbu	r2,0(r2)
   197f4:	10803fcc 	andi	r2,r2,255
   197f8:	10803fe0 	cmpeqi	r2,r2,255
   197fc:	1000081e 	bne	r2,zero,19820 <OSTaskDel+0x260>
        OSLockNesting++;
   19800:	008000b4 	movhi	r2,2
   19804:	108f5804 	addi	r2,r2,15712
   19808:	10800003 	ldbu	r2,0(r2)
   1980c:	10800044 	addi	r2,r2,1
   19810:	1007883a 	mov	r3,r2
   19814:	008000b4 	movhi	r2,2
   19818:	108f5804 	addi	r2,r2,15712
   1981c:	10c00005 	stb	r3,0(r2)
   19820:	e0bff617 	ldw	r2,-40(fp)
   19824:	e0bffc15 	stw	r2,-16(fp)
   19828:	e0bffc17 	ldw	r2,-16(fp)
   1982c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   19830:	00132000 	call	13200 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19834:	0005303a 	rdctl	r2,status
   19838:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1983c:	e0fffd17 	ldw	r3,-12(fp)
   19840:	00bfff84 	movi	r2,-2
   19844:	1884703a 	and	r2,r3,r2
   19848:	1001703a 	wrctl	status,r2
  
  return context;
   1984c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   19850:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   19854:	008000b4 	movhi	r2,2
   19858:	108f5804 	addi	r2,r2,15712
   1985c:	10800003 	ldbu	r2,0(r2)
   19860:	10803fcc 	andi	r2,r2,255
   19864:	10000826 	beq	r2,zero,19888 <OSTaskDel+0x2c8>
        OSLockNesting--;
   19868:	008000b4 	movhi	r2,2
   1986c:	108f5804 	addi	r2,r2,15712
   19870:	10800003 	ldbu	r2,0(r2)
   19874:	10bfffc4 	addi	r2,r2,-1
   19878:	1007883a 	mov	r3,r2
   1987c:	008000b4 	movhi	r2,2
   19880:	108f5804 	addi	r2,r2,15712
   19884:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   19888:	e13ff717 	ldw	r4,-36(fp)
   1988c:	001e6300 	call	1e630 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   19890:	008000b4 	movhi	r2,2
   19894:	108f6044 	addi	r2,r2,15745
   19898:	10800003 	ldbu	r2,0(r2)
   1989c:	10bfffc4 	addi	r2,r2,-1
   198a0:	1007883a 	mov	r3,r2
   198a4:	008000b4 	movhi	r2,2
   198a8:	108f6044 	addi	r2,r2,15745
   198ac:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   198b0:	e0ffff03 	ldbu	r3,-4(fp)
   198b4:	008000f4 	movhi	r2,3
   198b8:	10846004 	addi	r2,r2,4480
   198bc:	18c7883a 	add	r3,r3,r3
   198c0:	18c7883a 	add	r3,r3,r3
   198c4:	10c5883a 	add	r2,r2,r3
   198c8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   198cc:	e0bff717 	ldw	r2,-36(fp)
   198d0:	10800617 	ldw	r2,24(r2)
   198d4:	1000091e 	bne	r2,zero,198fc <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   198d8:	e0bff717 	ldw	r2,-36(fp)
   198dc:	10800517 	ldw	r2,20(r2)
   198e0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   198e4:	e0bff717 	ldw	r2,-36(fp)
   198e8:	10c00517 	ldw	r3,20(r2)
   198ec:	008000b4 	movhi	r2,2
   198f0:	108f5b04 	addi	r2,r2,15724
   198f4:	10c00015 	stw	r3,0(r2)
   198f8:	00000a06 	br	19924 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   198fc:	e0bff717 	ldw	r2,-36(fp)
   19900:	10800617 	ldw	r2,24(r2)
   19904:	e0fff717 	ldw	r3,-36(fp)
   19908:	18c00517 	ldw	r3,20(r3)
   1990c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   19910:	e0bff717 	ldw	r2,-36(fp)
   19914:	10800517 	ldw	r2,20(r2)
   19918:	e0fff717 	ldw	r3,-36(fp)
   1991c:	18c00617 	ldw	r3,24(r3)
   19920:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   19924:	008000b4 	movhi	r2,2
   19928:	108f5f04 	addi	r2,r2,15740
   1992c:	10c00017 	ldw	r3,0(r2)
   19930:	e0bff717 	ldw	r2,-36(fp)
   19934:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   19938:	008000b4 	movhi	r2,2
   1993c:	108f5f04 	addi	r2,r2,15740
   19940:	e0fff717 	ldw	r3,-36(fp)
   19944:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   19948:	e0bff717 	ldw	r2,-36(fp)
   1994c:	00c00fc4 	movi	r3,63
   19950:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   19954:	e0bff717 	ldw	r2,-36(fp)
   19958:	10001345 	stb	zero,77(r2)
   1995c:	e0bff617 	ldw	r2,-40(fp)
   19960:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19964:	e0bffe17 	ldw	r2,-8(fp)
   19968:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1996c:	008000b4 	movhi	r2,2
   19970:	108f5844 	addi	r2,r2,15713
   19974:	10800003 	ldbu	r2,0(r2)
   19978:	10803fcc 	andi	r2,r2,255
   1997c:	10800058 	cmpnei	r2,r2,1
   19980:	1000011e 	bne	r2,zero,19988 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   19984:	0013c340 	call	13c34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19988:	0005883a 	mov	r2,zero
}
   1998c:	e037883a 	mov	sp,fp
   19990:	dfc00117 	ldw	ra,4(sp)
   19994:	df000017 	ldw	fp,0(sp)
   19998:	dec00204 	addi	sp,sp,8
   1999c:	f800283a 	ret

000199a0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   199a0:	defff504 	addi	sp,sp,-44
   199a4:	df000a15 	stw	fp,40(sp)
   199a8:	df000a04 	addi	fp,sp,40
   199ac:	2005883a 	mov	r2,r4
   199b0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   199b4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   199b8:	e0bfff03 	ldbu	r2,-4(fp)
   199bc:	10800518 	cmpnei	r2,r2,20
   199c0:	1000021e 	bne	r2,zero,199cc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   199c4:	00800f84 	movi	r2,62
   199c8:	00004706 	br	19ae8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   199cc:	e0bfff03 	ldbu	r2,-4(fp)
   199d0:	10800530 	cmpltui	r2,r2,20
   199d4:	1000051e 	bne	r2,zero,199ec <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   199d8:	e0bfff03 	ldbu	r2,-4(fp)
   199dc:	10803fe0 	cmpeqi	r2,r2,255
   199e0:	1000021e 	bne	r2,zero,199ec <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   199e4:	00800a84 	movi	r2,42
   199e8:	00003f06 	br	19ae8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   199ec:	e0bfff03 	ldbu	r2,-4(fp)
   199f0:	10803fd8 	cmpnei	r2,r2,255
   199f4:	1000131e 	bne	r2,zero,19a44 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199f8:	0005303a 	rdctl	r2,status
   199fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a00:	e0fff917 	ldw	r3,-28(fp)
   19a04:	00bfff84 	movi	r2,-2
   19a08:	1884703a 	and	r2,r3,r2
   19a0c:	1001703a 	wrctl	status,r2
  
  return context;
   19a10:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   19a14:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   19a18:	008000b4 	movhi	r2,2
   19a1c:	108f6704 	addi	r2,r2,15772
   19a20:	10800017 	ldw	r2,0(r2)
   19a24:	10800dc3 	ldbu	r2,55(r2)
   19a28:	e0bff705 	stb	r2,-36(fp)
   19a2c:	e0bff617 	ldw	r2,-40(fp)
   19a30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a34:	e0bffa17 	ldw	r2,-24(fp)
   19a38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   19a3c:	e0bff703 	ldbu	r2,-36(fp)
   19a40:	00002906 	br	19ae8 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a44:	0005303a 	rdctl	r2,status
   19a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a4c:	e0fffb17 	ldw	r3,-20(fp)
   19a50:	00bfff84 	movi	r2,-2
   19a54:	1884703a 	and	r2,r3,r2
   19a58:	1001703a 	wrctl	status,r2
  
  return context;
   19a5c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19a60:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19a64:	e0ffff03 	ldbu	r3,-4(fp)
   19a68:	008000f4 	movhi	r2,3
   19a6c:	10846004 	addi	r2,r2,4480
   19a70:	18c7883a 	add	r3,r3,r3
   19a74:	18c7883a 	add	r3,r3,r3
   19a78:	10c5883a 	add	r2,r2,r3
   19a7c:	10800017 	ldw	r2,0(r2)
   19a80:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   19a84:	e0bff817 	ldw	r2,-32(fp)
   19a88:	1000061e 	bne	r2,zero,19aa4 <OSTaskDelReq+0x104>
   19a8c:	e0bff617 	ldw	r2,-40(fp)
   19a90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a94:	e0bffc17 	ldw	r2,-16(fp)
   19a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   19a9c:	008010c4 	movi	r2,67
   19aa0:	00001106 	br	19ae8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   19aa4:	e0bff817 	ldw	r2,-32(fp)
   19aa8:	10800058 	cmpnei	r2,r2,1
   19aac:	1000061e 	bne	r2,zero,19ac8 <OSTaskDelReq+0x128>
   19ab0:	e0bff617 	ldw	r2,-40(fp)
   19ab4:	e0bffd15 	stw	r2,-12(fp)
   19ab8:	e0bffd17 	ldw	r2,-12(fp)
   19abc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19ac0:	00800f44 	movi	r2,61
   19ac4:	00000806 	br	19ae8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   19ac8:	e0bff817 	ldw	r2,-32(fp)
   19acc:	00c00fc4 	movi	r3,63
   19ad0:	10c00dc5 	stb	r3,55(r2)
   19ad4:	e0bff617 	ldw	r2,-40(fp)
   19ad8:	e0bffe15 	stw	r2,-8(fp)
   19adc:	e0bffe17 	ldw	r2,-8(fp)
   19ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19ae4:	0005883a 	mov	r2,zero
}
   19ae8:	e037883a 	mov	sp,fp
   19aec:	df000017 	ldw	fp,0(sp)
   19af0:	dec00104 	addi	sp,sp,4
   19af4:	f800283a 	ret

00019af8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19af8:	defff404 	addi	sp,sp,-48
   19afc:	dfc00b15 	stw	ra,44(sp)
   19b00:	df000a15 	stw	fp,40(sp)
   19b04:	df000a04 	addi	fp,sp,40
   19b08:	2005883a 	mov	r2,r4
   19b0c:	e17ffe15 	stw	r5,-8(fp)
   19b10:	e1bfff15 	stw	r6,-4(fp)
   19b14:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   19b18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   19b1c:	e0bfff17 	ldw	r2,-4(fp)
   19b20:	1000021e 	bne	r2,zero,19b2c <OSTaskNameGet+0x34>
        return (0);
   19b24:	0005883a 	mov	r2,zero
   19b28:	00005806 	br	19c8c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   19b2c:	e0bffd03 	ldbu	r2,-12(fp)
   19b30:	10800570 	cmpltui	r2,r2,21
   19b34:	1000081e 	bne	r2,zero,19b58 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   19b38:	e0bffd03 	ldbu	r2,-12(fp)
   19b3c:	10803fe0 	cmpeqi	r2,r2,255
   19b40:	1000051e 	bne	r2,zero,19b58 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   19b44:	e0bfff17 	ldw	r2,-4(fp)
   19b48:	00c00a84 	movi	r3,42
   19b4c:	10c00005 	stb	r3,0(r2)
            return (0);
   19b50:	0005883a 	mov	r2,zero
   19b54:	00004d06 	br	19c8c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   19b58:	e0bffe17 	ldw	r2,-8(fp)
   19b5c:	1000051e 	bne	r2,zero,19b74 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   19b60:	e0bfff17 	ldw	r2,-4(fp)
   19b64:	00c00304 	movi	r3,12
   19b68:	10c00005 	stb	r3,0(r2)
        return (0);
   19b6c:	0005883a 	mov	r2,zero
   19b70:	00004606 	br	19c8c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   19b74:	008000b4 	movhi	r2,2
   19b78:	108f6604 	addi	r2,r2,15768
   19b7c:	10800003 	ldbu	r2,0(r2)
   19b80:	10803fcc 	andi	r2,r2,255
   19b84:	10000526 	beq	r2,zero,19b9c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   19b88:	e0bfff17 	ldw	r2,-4(fp)
   19b8c:	00c00444 	movi	r3,17
   19b90:	10c00005 	stb	r3,0(r2)
        return (0);
   19b94:	0005883a 	mov	r2,zero
   19b98:	00003c06 	br	19c8c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b9c:	0005303a 	rdctl	r2,status
   19ba0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ba4:	e0fff917 	ldw	r3,-28(fp)
   19ba8:	00bfff84 	movi	r2,-2
   19bac:	1884703a 	and	r2,r3,r2
   19bb0:	1001703a 	wrctl	status,r2
  
  return context;
   19bb4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   19bb8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19bbc:	e0bffd03 	ldbu	r2,-12(fp)
   19bc0:	10803fd8 	cmpnei	r2,r2,255
   19bc4:	1000051e 	bne	r2,zero,19bdc <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   19bc8:	008000b4 	movhi	r2,2
   19bcc:	108f6704 	addi	r2,r2,15772
   19bd0:	10800017 	ldw	r2,0(r2)
   19bd4:	10800c83 	ldbu	r2,50(r2)
   19bd8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19bdc:	e0fffd03 	ldbu	r3,-12(fp)
   19be0:	008000f4 	movhi	r2,3
   19be4:	10846004 	addi	r2,r2,4480
   19be8:	18c7883a 	add	r3,r3,r3
   19bec:	18c7883a 	add	r3,r3,r3
   19bf0:	10c5883a 	add	r2,r2,r3
   19bf4:	10800017 	ldw	r2,0(r2)
   19bf8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   19bfc:	e0bff717 	ldw	r2,-36(fp)
   19c00:	1000091e 	bne	r2,zero,19c28 <OSTaskNameGet+0x130>
   19c04:	e0bff617 	ldw	r2,-40(fp)
   19c08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c0c:	e0bffa17 	ldw	r2,-24(fp)
   19c10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19c14:	e0bfff17 	ldw	r2,-4(fp)
   19c18:	00c010c4 	movi	r3,67
   19c1c:	10c00005 	stb	r3,0(r2)
        return (0);
   19c20:	0005883a 	mov	r2,zero
   19c24:	00001906 	br	19c8c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   19c28:	e0bff717 	ldw	r2,-36(fp)
   19c2c:	10800058 	cmpnei	r2,r2,1
   19c30:	1000091e 	bne	r2,zero,19c58 <OSTaskNameGet+0x160>
   19c34:	e0bff617 	ldw	r2,-40(fp)
   19c38:	e0bffb15 	stw	r2,-20(fp)
   19c3c:	e0bffb17 	ldw	r2,-20(fp)
   19c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19c44:	e0bfff17 	ldw	r2,-4(fp)
   19c48:	00c010c4 	movi	r3,67
   19c4c:	10c00005 	stb	r3,0(r2)
        return (0);
   19c50:	0005883a 	mov	r2,zero
   19c54:	00000d06 	br	19c8c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   19c58:	e0bff717 	ldw	r2,-36(fp)
   19c5c:	10801304 	addi	r2,r2,76
   19c60:	e13ffe17 	ldw	r4,-8(fp)
   19c64:	100b883a 	mov	r5,r2
   19c68:	0013d700 	call	13d70 <OS_StrCopy>
   19c6c:	e0bff805 	stb	r2,-32(fp)
   19c70:	e0bff617 	ldw	r2,-40(fp)
   19c74:	e0bffc15 	stw	r2,-16(fp)
   19c78:	e0bffc17 	ldw	r2,-16(fp)
   19c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19c80:	e0bfff17 	ldw	r2,-4(fp)
   19c84:	10000005 	stb	zero,0(r2)
    return (len);
   19c88:	e0bff803 	ldbu	r2,-32(fp)
}
   19c8c:	e037883a 	mov	sp,fp
   19c90:	dfc00117 	ldw	ra,4(sp)
   19c94:	df000017 	ldw	fp,0(sp)
   19c98:	dec00204 	addi	sp,sp,8
   19c9c:	f800283a 	ret

00019ca0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19ca0:	defff304 	addi	sp,sp,-52
   19ca4:	dfc00c15 	stw	ra,48(sp)
   19ca8:	df000b15 	stw	fp,44(sp)
   19cac:	df000b04 	addi	fp,sp,44
   19cb0:	2005883a 	mov	r2,r4
   19cb4:	e17ffe15 	stw	r5,-8(fp)
   19cb8:	e1bfff15 	stw	r6,-4(fp)
   19cbc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19cc0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19cc4:	e0bfff17 	ldw	r2,-4(fp)
   19cc8:	1000011e 	bne	r2,zero,19cd0 <OSTaskNameSet+0x30>
        return;
   19ccc:	00005f06 	br	19e4c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   19cd0:	e0bffd03 	ldbu	r2,-12(fp)
   19cd4:	10800570 	cmpltui	r2,r2,21
   19cd8:	1000071e 	bne	r2,zero,19cf8 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   19cdc:	e0bffd03 	ldbu	r2,-12(fp)
   19ce0:	10803fe0 	cmpeqi	r2,r2,255
   19ce4:	1000041e 	bne	r2,zero,19cf8 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19ce8:	e0bfff17 	ldw	r2,-4(fp)
   19cec:	00c00a84 	movi	r3,42
   19cf0:	10c00005 	stb	r3,0(r2)
            return;
   19cf4:	00005506 	br	19e4c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19cf8:	e0bffe17 	ldw	r2,-8(fp)
   19cfc:	1000041e 	bne	r2,zero,19d10 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   19d00:	e0bfff17 	ldw	r2,-4(fp)
   19d04:	00c00304 	movi	r3,12
   19d08:	10c00005 	stb	r3,0(r2)
        return;
   19d0c:	00004f06 	br	19e4c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   19d10:	008000b4 	movhi	r2,2
   19d14:	108f6604 	addi	r2,r2,15768
   19d18:	10800003 	ldbu	r2,0(r2)
   19d1c:	10803fcc 	andi	r2,r2,255
   19d20:	10000426 	beq	r2,zero,19d34 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   19d24:	e0bfff17 	ldw	r2,-4(fp)
   19d28:	00c00484 	movi	r3,18
   19d2c:	10c00005 	stb	r3,0(r2)
        return;
   19d30:	00004606 	br	19e4c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d34:	0005303a 	rdctl	r2,status
   19d38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d3c:	e0fff817 	ldw	r3,-32(fp)
   19d40:	00bfff84 	movi	r2,-2
   19d44:	1884703a 	and	r2,r3,r2
   19d48:	1001703a 	wrctl	status,r2
  
  return context;
   19d4c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19d50:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   19d54:	e0bffd03 	ldbu	r2,-12(fp)
   19d58:	10803fd8 	cmpnei	r2,r2,255
   19d5c:	1000051e 	bne	r2,zero,19d74 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   19d60:	008000b4 	movhi	r2,2
   19d64:	108f6704 	addi	r2,r2,15772
   19d68:	10800017 	ldw	r2,0(r2)
   19d6c:	10800c83 	ldbu	r2,50(r2)
   19d70:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19d74:	e0fffd03 	ldbu	r3,-12(fp)
   19d78:	008000f4 	movhi	r2,3
   19d7c:	10846004 	addi	r2,r2,4480
   19d80:	18c7883a 	add	r3,r3,r3
   19d84:	18c7883a 	add	r3,r3,r3
   19d88:	10c5883a 	add	r2,r2,r3
   19d8c:	10800017 	ldw	r2,0(r2)
   19d90:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   19d94:	e0bff617 	ldw	r2,-40(fp)
   19d98:	1000081e 	bne	r2,zero,19dbc <OSTaskNameSet+0x11c>
   19d9c:	e0bff517 	ldw	r2,-44(fp)
   19da0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19da4:	e0bff917 	ldw	r2,-28(fp)
   19da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19dac:	e0bfff17 	ldw	r2,-4(fp)
   19db0:	00c010c4 	movi	r3,67
   19db4:	10c00005 	stb	r3,0(r2)
        return;
   19db8:	00002406 	br	19e4c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19dbc:	e0bff617 	ldw	r2,-40(fp)
   19dc0:	10800058 	cmpnei	r2,r2,1
   19dc4:	1000081e 	bne	r2,zero,19de8 <OSTaskNameSet+0x148>
   19dc8:	e0bff517 	ldw	r2,-44(fp)
   19dcc:	e0bffa15 	stw	r2,-24(fp)
   19dd0:	e0bffa17 	ldw	r2,-24(fp)
   19dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19dd8:	e0bfff17 	ldw	r2,-4(fp)
   19ddc:	00c010c4 	movi	r3,67
   19de0:	10c00005 	stb	r3,0(r2)
        return;
   19de4:	00001906 	br	19e4c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19de8:	e13ffe17 	ldw	r4,-8(fp)
   19dec:	0013de40 	call	13de4 <OS_StrLen>
   19df0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19df4:	e0bff703 	ldbu	r2,-36(fp)
   19df8:	10800830 	cmpltui	r2,r2,32
   19dfc:	1000081e 	bne	r2,zero,19e20 <OSTaskNameSet+0x180>
   19e00:	e0bff517 	ldw	r2,-44(fp)
   19e04:	e0bffb15 	stw	r2,-20(fp)
   19e08:	e0bffb17 	ldw	r2,-20(fp)
   19e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   19e10:	e0bfff17 	ldw	r2,-4(fp)
   19e14:	00c01044 	movi	r3,65
   19e18:	10c00005 	stb	r3,0(r2)
        return;
   19e1c:	00000b06 	br	19e4c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   19e20:	e0bff617 	ldw	r2,-40(fp)
   19e24:	10801304 	addi	r2,r2,76
   19e28:	1009883a 	mov	r4,r2
   19e2c:	e17ffe17 	ldw	r5,-8(fp)
   19e30:	0013d700 	call	13d70 <OS_StrCopy>
   19e34:	e0bff517 	ldw	r2,-44(fp)
   19e38:	e0bffc15 	stw	r2,-16(fp)
   19e3c:	e0bffc17 	ldw	r2,-16(fp)
   19e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19e44:	e0bfff17 	ldw	r2,-4(fp)
   19e48:	10000005 	stb	zero,0(r2)
}
   19e4c:	e037883a 	mov	sp,fp
   19e50:	dfc00117 	ldw	ra,4(sp)
   19e54:	df000017 	ldw	fp,0(sp)
   19e58:	dec00204 	addi	sp,sp,8
   19e5c:	f800283a 	ret

00019e60 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   19e60:	defff404 	addi	sp,sp,-48
   19e64:	dfc00b15 	stw	ra,44(sp)
   19e68:	df000a15 	stw	fp,40(sp)
   19e6c:	df000a04 	addi	fp,sp,40
   19e70:	2005883a 	mov	r2,r4
   19e74:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19e78:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   19e7c:	e0bfff03 	ldbu	r2,-4(fp)
   19e80:	10800530 	cmpltui	r2,r2,20
   19e84:	1000021e 	bne	r2,zero,19e90 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19e88:	00800a84 	movi	r2,42
   19e8c:	00006d06 	br	1a044 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e90:	0005303a 	rdctl	r2,status
   19e94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e98:	e0fff817 	ldw	r3,-32(fp)
   19e9c:	00bfff84 	movi	r2,-2
   19ea0:	1884703a 	and	r2,r3,r2
   19ea4:	1001703a 	wrctl	status,r2
  
  return context;
   19ea8:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19eac:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19eb0:	e0ffff03 	ldbu	r3,-4(fp)
   19eb4:	008000f4 	movhi	r2,3
   19eb8:	10846004 	addi	r2,r2,4480
   19ebc:	18c7883a 	add	r3,r3,r3
   19ec0:	18c7883a 	add	r3,r3,r3
   19ec4:	10c5883a 	add	r2,r2,r3
   19ec8:	10800017 	ldw	r2,0(r2)
   19ecc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19ed0:	e0bff717 	ldw	r2,-36(fp)
   19ed4:	1000061e 	bne	r2,zero,19ef0 <OSTaskResume+0x90>
   19ed8:	e0bff617 	ldw	r2,-40(fp)
   19edc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ee0:	e0bff917 	ldw	r2,-28(fp)
   19ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   19ee8:	00801184 	movi	r2,70
   19eec:	00005506 	br	1a044 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19ef0:	e0bff717 	ldw	r2,-36(fp)
   19ef4:	10800058 	cmpnei	r2,r2,1
   19ef8:	1000061e 	bne	r2,zero,19f14 <OSTaskResume+0xb4>
   19efc:	e0bff617 	ldw	r2,-40(fp)
   19f00:	e0bffa15 	stw	r2,-24(fp)
   19f04:	e0bffa17 	ldw	r2,-24(fp)
   19f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19f0c:	008010c4 	movi	r2,67
   19f10:	00004c06 	br	1a044 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19f14:	e0bff717 	ldw	r2,-36(fp)
   19f18:	10800c03 	ldbu	r2,48(r2)
   19f1c:	10803fcc 	andi	r2,r2,255
   19f20:	1080020c 	andi	r2,r2,8
   19f24:	10004226 	beq	r2,zero,1a030 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   19f28:	e0bff717 	ldw	r2,-36(fp)
   19f2c:	10c00c03 	ldbu	r3,48(r2)
   19f30:	00bffdc4 	movi	r2,-9
   19f34:	1884703a 	and	r2,r3,r2
   19f38:	1007883a 	mov	r3,r2
   19f3c:	e0bff717 	ldw	r2,-36(fp)
   19f40:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19f44:	e0bff717 	ldw	r2,-36(fp)
   19f48:	10800c03 	ldbu	r2,48(r2)
   19f4c:	10803fcc 	andi	r2,r2,255
   19f50:	1000311e 	bne	r2,zero,1a018 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   19f54:	e0bff717 	ldw	r2,-36(fp)
   19f58:	10800b8b 	ldhu	r2,46(r2)
   19f5c:	10bfffcc 	andi	r2,r2,65535
   19f60:	1000281e 	bne	r2,zero,1a004 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   19f64:	e0bff717 	ldw	r2,-36(fp)
   19f68:	10c00d83 	ldbu	r3,54(r2)
   19f6c:	008000b4 	movhi	r2,2
   19f70:	108f6404 	addi	r2,r2,15760
   19f74:	10800003 	ldbu	r2,0(r2)
   19f78:	1884b03a 	or	r2,r3,r2
   19f7c:	1007883a 	mov	r3,r2
   19f80:	008000b4 	movhi	r2,2
   19f84:	108f6404 	addi	r2,r2,15760
   19f88:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19f8c:	e0bff717 	ldw	r2,-36(fp)
   19f90:	10800d03 	ldbu	r2,52(r2)
   19f94:	10c03fcc 	andi	r3,r2,255
   19f98:	e0bff717 	ldw	r2,-36(fp)
   19f9c:	10800d03 	ldbu	r2,52(r2)
   19fa0:	11003fcc 	andi	r4,r2,255
   19fa4:	008000b4 	movhi	r2,2
   19fa8:	108f6444 	addi	r2,r2,15761
   19fac:	1105883a 	add	r2,r2,r4
   19fb0:	11000003 	ldbu	r4,0(r2)
   19fb4:	e0bff717 	ldw	r2,-36(fp)
   19fb8:	10800d43 	ldbu	r2,53(r2)
   19fbc:	2084b03a 	or	r2,r4,r2
   19fc0:	1009883a 	mov	r4,r2
   19fc4:	008000b4 	movhi	r2,2
   19fc8:	108f6444 	addi	r2,r2,15761
   19fcc:	10c5883a 	add	r2,r2,r3
   19fd0:	11000005 	stb	r4,0(r2)
   19fd4:	e0bff617 	ldw	r2,-40(fp)
   19fd8:	e0bffb15 	stw	r2,-20(fp)
   19fdc:	e0bffb17 	ldw	r2,-20(fp)
   19fe0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   19fe4:	008000b4 	movhi	r2,2
   19fe8:	108f5844 	addi	r2,r2,15713
   19fec:	10800003 	ldbu	r2,0(r2)
   19ff0:	10803fcc 	andi	r2,r2,255
   19ff4:	10800058 	cmpnei	r2,r2,1
   19ff8:	10000b1e 	bne	r2,zero,1a028 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   19ffc:	0013c340 	call	13c34 <OS_Sched>
   1a000:	00000906 	br	1a028 <OSTaskResume+0x1c8>
   1a004:	e0bff617 	ldw	r2,-40(fp)
   1a008:	e0bffc15 	stw	r2,-16(fp)
   1a00c:	e0bffc17 	ldw	r2,-16(fp)
   1a010:	1001703a 	wrctl	status,r2
   1a014:	00000406 	br	1a028 <OSTaskResume+0x1c8>
   1a018:	e0bff617 	ldw	r2,-40(fp)
   1a01c:	e0bffd15 	stw	r2,-12(fp)
   1a020:	e0bffd17 	ldw	r2,-12(fp)
   1a024:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1a028:	0005883a 	mov	r2,zero
   1a02c:	00000506 	br	1a044 <OSTaskResume+0x1e4>
   1a030:	e0bff617 	ldw	r2,-40(fp)
   1a034:	e0bffe15 	stw	r2,-8(fp)
   1a038:	e0bffe17 	ldw	r2,-8(fp)
   1a03c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1a040:	00801104 	movi	r2,68
}
   1a044:	e037883a 	mov	sp,fp
   1a048:	dfc00117 	ldw	ra,4(sp)
   1a04c:	df000017 	ldw	fp,0(sp)
   1a050:	dec00204 	addi	sp,sp,8
   1a054:	f800283a 	ret

0001a058 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1a058:	defff304 	addi	sp,sp,-52
   1a05c:	df000c15 	stw	fp,48(sp)
   1a060:	df000c04 	addi	fp,sp,48
   1a064:	2005883a 	mov	r2,r4
   1a068:	e17fff15 	stw	r5,-4(fp)
   1a06c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a070:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1a074:	e0bffe03 	ldbu	r2,-8(fp)
   1a078:	10800570 	cmpltui	r2,r2,21
   1a07c:	1000051e 	bne	r2,zero,1a094 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1a080:	e0bffe03 	ldbu	r2,-8(fp)
   1a084:	10803fe0 	cmpeqi	r2,r2,255
   1a088:	1000021e 	bne	r2,zero,1a094 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1a08c:	00800a84 	movi	r2,42
   1a090:	00005f06 	br	1a210 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1a094:	e0bfff17 	ldw	r2,-4(fp)
   1a098:	1000021e 	bne	r2,zero,1a0a4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1a09c:	00800244 	movi	r2,9
   1a0a0:	00005b06 	br	1a210 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1a0a4:	e0bfff17 	ldw	r2,-4(fp)
   1a0a8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1a0ac:	e0bfff17 	ldw	r2,-4(fp)
   1a0b0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0b4:	0005303a 	rdctl	r2,status
   1a0b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0bc:	e0fff917 	ldw	r3,-28(fp)
   1a0c0:	00bfff84 	movi	r2,-2
   1a0c4:	1884703a 	and	r2,r3,r2
   1a0c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a0cc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1a0d0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1a0d4:	e0bffe03 	ldbu	r2,-8(fp)
   1a0d8:	10803fd8 	cmpnei	r2,r2,255
   1a0dc:	1000051e 	bne	r2,zero,1a0f4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1a0e0:	008000b4 	movhi	r2,2
   1a0e4:	108f6704 	addi	r2,r2,15772
   1a0e8:	10800017 	ldw	r2,0(r2)
   1a0ec:	10800c83 	ldbu	r2,50(r2)
   1a0f0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a0f4:	e0fffe03 	ldbu	r3,-8(fp)
   1a0f8:	008000f4 	movhi	r2,3
   1a0fc:	10846004 	addi	r2,r2,4480
   1a100:	18c7883a 	add	r3,r3,r3
   1a104:	18c7883a 	add	r3,r3,r3
   1a108:	10c5883a 	add	r2,r2,r3
   1a10c:	10800017 	ldw	r2,0(r2)
   1a110:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1a114:	e0bff717 	ldw	r2,-36(fp)
   1a118:	1000061e 	bne	r2,zero,1a134 <OSTaskStkChk+0xdc>
   1a11c:	e0bff617 	ldw	r2,-40(fp)
   1a120:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a124:	e0bffa17 	ldw	r2,-24(fp)
   1a128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a12c:	008010c4 	movi	r2,67
   1a130:	00003706 	br	1a210 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a134:	e0bff717 	ldw	r2,-36(fp)
   1a138:	10800058 	cmpnei	r2,r2,1
   1a13c:	1000061e 	bne	r2,zero,1a158 <OSTaskStkChk+0x100>
   1a140:	e0bff617 	ldw	r2,-40(fp)
   1a144:	e0bffb15 	stw	r2,-20(fp)
   1a148:	e0bffb17 	ldw	r2,-20(fp)
   1a14c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a150:	008010c4 	movi	r2,67
   1a154:	00002e06 	br	1a210 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1a158:	e0bff717 	ldw	r2,-36(fp)
   1a15c:	1080040b 	ldhu	r2,16(r2)
   1a160:	10bfffcc 	andi	r2,r2,65535
   1a164:	1080004c 	andi	r2,r2,1
   1a168:	1000061e 	bne	r2,zero,1a184 <OSTaskStkChk+0x12c>
   1a16c:	e0bff617 	ldw	r2,-40(fp)
   1a170:	e0bffc15 	stw	r2,-16(fp)
   1a174:	e0bffc17 	ldw	r2,-16(fp)
   1a178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1a17c:	00801144 	movi	r2,69
   1a180:	00002306 	br	1a210 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1a184:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1a188:	e0bff717 	ldw	r2,-36(fp)
   1a18c:	10800317 	ldw	r2,12(r2)
   1a190:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1a194:	e0bff717 	ldw	r2,-36(fp)
   1a198:	10800217 	ldw	r2,8(r2)
   1a19c:	e0bff415 	stw	r2,-48(fp)
   1a1a0:	e0bff617 	ldw	r2,-40(fp)
   1a1a4:	e0bffd15 	stw	r2,-12(fp)
   1a1a8:	e0bffd17 	ldw	r2,-12(fp)
   1a1ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a1b0:	00000306 	br	1a1c0 <OSTaskStkChk+0x168>
        nfree++;
   1a1b4:	e0bff517 	ldw	r2,-44(fp)
   1a1b8:	10800044 	addi	r2,r2,1
   1a1bc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a1c0:	e0bff417 	ldw	r2,-48(fp)
   1a1c4:	10c00104 	addi	r3,r2,4
   1a1c8:	e0fff415 	stw	r3,-48(fp)
   1a1cc:	10800017 	ldw	r2,0(r2)
   1a1d0:	103ff826 	beq	r2,zero,1a1b4 <__alt_mem_Flash_flash_data+0xf401a1b4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1a1d4:	e0bff517 	ldw	r2,-44(fp)
   1a1d8:	1085883a 	add	r2,r2,r2
   1a1dc:	1085883a 	add	r2,r2,r2
   1a1e0:	1007883a 	mov	r3,r2
   1a1e4:	e0bfff17 	ldw	r2,-4(fp)
   1a1e8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1a1ec:	e0fff817 	ldw	r3,-32(fp)
   1a1f0:	e0bff517 	ldw	r2,-44(fp)
   1a1f4:	1885c83a 	sub	r2,r3,r2
   1a1f8:	1085883a 	add	r2,r2,r2
   1a1fc:	1085883a 	add	r2,r2,r2
   1a200:	1007883a 	mov	r3,r2
   1a204:	e0bfff17 	ldw	r2,-4(fp)
   1a208:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1a20c:	0005883a 	mov	r2,zero
}
   1a210:	e037883a 	mov	sp,fp
   1a214:	df000017 	ldw	fp,0(sp)
   1a218:	dec00104 	addi	sp,sp,4
   1a21c:	f800283a 	ret

0001a220 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1a220:	defff504 	addi	sp,sp,-44
   1a224:	dfc00a15 	stw	ra,40(sp)
   1a228:	df000915 	stw	fp,36(sp)
   1a22c:	df000904 	addi	fp,sp,36
   1a230:	2005883a 	mov	r2,r4
   1a234:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a238:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1a23c:	e0bfff03 	ldbu	r2,-4(fp)
   1a240:	10800518 	cmpnei	r2,r2,20
   1a244:	1000021e 	bne	r2,zero,1a250 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1a248:	008011c4 	movi	r2,71
   1a24c:	00007406 	br	1a420 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a250:	e0bfff03 	ldbu	r2,-4(fp)
   1a254:	10800530 	cmpltui	r2,r2,20
   1a258:	1000051e 	bne	r2,zero,1a270 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1a25c:	e0bfff03 	ldbu	r2,-4(fp)
   1a260:	10803fe0 	cmpeqi	r2,r2,255
   1a264:	1000021e 	bne	r2,zero,1a270 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1a268:	00800a84 	movi	r2,42
   1a26c:	00006c06 	br	1a420 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a270:	0005303a 	rdctl	r2,status
   1a274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a278:	e0fffb17 	ldw	r3,-20(fp)
   1a27c:	00bfff84 	movi	r2,-2
   1a280:	1884703a 	and	r2,r3,r2
   1a284:	1001703a 	wrctl	status,r2
  
  return context;
   1a288:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1a28c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1a290:	e0bfff03 	ldbu	r2,-4(fp)
   1a294:	10803fd8 	cmpnei	r2,r2,255
   1a298:	1000081e 	bne	r2,zero,1a2bc <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1a29c:	008000b4 	movhi	r2,2
   1a2a0:	108f6704 	addi	r2,r2,15772
   1a2a4:	10800017 	ldw	r2,0(r2)
   1a2a8:	10800c83 	ldbu	r2,50(r2)
   1a2ac:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1a2b0:	00800044 	movi	r2,1
   1a2b4:	e0bff705 	stb	r2,-36(fp)
   1a2b8:	00000b06 	br	1a2e8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1a2bc:	008000b4 	movhi	r2,2
   1a2c0:	108f6704 	addi	r2,r2,15772
   1a2c4:	10800017 	ldw	r2,0(r2)
   1a2c8:	10800c83 	ldbu	r2,50(r2)
   1a2cc:	10c03fcc 	andi	r3,r2,255
   1a2d0:	e0bfff03 	ldbu	r2,-4(fp)
   1a2d4:	1880031e 	bne	r3,r2,1a2e4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1a2d8:	00800044 	movi	r2,1
   1a2dc:	e0bff705 	stb	r2,-36(fp)
   1a2e0:	00000106 	br	1a2e8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1a2e4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a2e8:	e0ffff03 	ldbu	r3,-4(fp)
   1a2ec:	008000f4 	movhi	r2,3
   1a2f0:	10846004 	addi	r2,r2,4480
   1a2f4:	18c7883a 	add	r3,r3,r3
   1a2f8:	18c7883a 	add	r3,r3,r3
   1a2fc:	10c5883a 	add	r2,r2,r3
   1a300:	10800017 	ldw	r2,0(r2)
   1a304:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1a308:	e0bff917 	ldw	r2,-28(fp)
   1a30c:	1000061e 	bne	r2,zero,1a328 <OSTaskSuspend+0x108>
   1a310:	e0bff817 	ldw	r2,-32(fp)
   1a314:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a318:	e0bffc17 	ldw	r2,-16(fp)
   1a31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1a320:	00801204 	movi	r2,72
   1a324:	00003e06 	br	1a420 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1a328:	e0bff917 	ldw	r2,-28(fp)
   1a32c:	10800058 	cmpnei	r2,r2,1
   1a330:	1000061e 	bne	r2,zero,1a34c <OSTaskSuspend+0x12c>
   1a334:	e0bff817 	ldw	r2,-32(fp)
   1a338:	e0bffd15 	stw	r2,-12(fp)
   1a33c:	e0bffd17 	ldw	r2,-12(fp)
   1a340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a344:	008010c4 	movi	r2,67
   1a348:	00003506 	br	1a420 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1a34c:	e0bff917 	ldw	r2,-28(fp)
   1a350:	10800d03 	ldbu	r2,52(r2)
   1a354:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1a358:	e0fffa03 	ldbu	r3,-24(fp)
   1a35c:	e13ffa03 	ldbu	r4,-24(fp)
   1a360:	008000b4 	movhi	r2,2
   1a364:	108f6444 	addi	r2,r2,15761
   1a368:	1105883a 	add	r2,r2,r4
   1a36c:	10800003 	ldbu	r2,0(r2)
   1a370:	1009883a 	mov	r4,r2
   1a374:	e0bff917 	ldw	r2,-28(fp)
   1a378:	10800d43 	ldbu	r2,53(r2)
   1a37c:	0084303a 	nor	r2,zero,r2
   1a380:	2084703a 	and	r2,r4,r2
   1a384:	1009883a 	mov	r4,r2
   1a388:	008000b4 	movhi	r2,2
   1a38c:	108f6444 	addi	r2,r2,15761
   1a390:	10c5883a 	add	r2,r2,r3
   1a394:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1a398:	e0fffa03 	ldbu	r3,-24(fp)
   1a39c:	008000b4 	movhi	r2,2
   1a3a0:	108f6444 	addi	r2,r2,15761
   1a3a4:	10c5883a 	add	r2,r2,r3
   1a3a8:	10800003 	ldbu	r2,0(r2)
   1a3ac:	10803fcc 	andi	r2,r2,255
   1a3b0:	10000c1e 	bne	r2,zero,1a3e4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1a3b4:	e0bff917 	ldw	r2,-28(fp)
   1a3b8:	10800d83 	ldbu	r2,54(r2)
   1a3bc:	0084303a 	nor	r2,zero,r2
   1a3c0:	1007883a 	mov	r3,r2
   1a3c4:	008000b4 	movhi	r2,2
   1a3c8:	108f6404 	addi	r2,r2,15760
   1a3cc:	10800003 	ldbu	r2,0(r2)
   1a3d0:	1884703a 	and	r2,r3,r2
   1a3d4:	1007883a 	mov	r3,r2
   1a3d8:	008000b4 	movhi	r2,2
   1a3dc:	108f6404 	addi	r2,r2,15760
   1a3e0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1a3e4:	e0bff917 	ldw	r2,-28(fp)
   1a3e8:	10800c03 	ldbu	r2,48(r2)
   1a3ec:	10800214 	ori	r2,r2,8
   1a3f0:	1007883a 	mov	r3,r2
   1a3f4:	e0bff917 	ldw	r2,-28(fp)
   1a3f8:	10c00c05 	stb	r3,48(r2)
   1a3fc:	e0bff817 	ldw	r2,-32(fp)
   1a400:	e0bffe15 	stw	r2,-8(fp)
   1a404:	e0bffe17 	ldw	r2,-8(fp)
   1a408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1a40c:	e0bff703 	ldbu	r2,-36(fp)
   1a410:	10800058 	cmpnei	r2,r2,1
   1a414:	1000011e 	bne	r2,zero,1a41c <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1a418:	0013c340 	call	13c34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a41c:	0005883a 	mov	r2,zero
}
   1a420:	e037883a 	mov	sp,fp
   1a424:	dfc00117 	ldw	ra,4(sp)
   1a428:	df000017 	ldw	fp,0(sp)
   1a42c:	dec00204 	addi	sp,sp,8
   1a430:	f800283a 	ret

0001a434 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1a434:	defff604 	addi	sp,sp,-40
   1a438:	dfc00915 	stw	ra,36(sp)
   1a43c:	df000815 	stw	fp,32(sp)
   1a440:	df000804 	addi	fp,sp,32
   1a444:	2005883a 	mov	r2,r4
   1a448:	e17fff15 	stw	r5,-4(fp)
   1a44c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a450:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1a454:	e0bffe03 	ldbu	r2,-8(fp)
   1a458:	10800570 	cmpltui	r2,r2,21
   1a45c:	1000051e 	bne	r2,zero,1a474 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1a460:	e0bffe03 	ldbu	r2,-8(fp)
   1a464:	10803fe0 	cmpeqi	r2,r2,255
   1a468:	1000021e 	bne	r2,zero,1a474 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1a46c:	00800a84 	movi	r2,42
   1a470:	00003606 	br	1a54c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1a474:	e0bfff17 	ldw	r2,-4(fp)
   1a478:	1000021e 	bne	r2,zero,1a484 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1a47c:	00800244 	movi	r2,9
   1a480:	00003206 	br	1a54c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a484:	0005303a 	rdctl	r2,status
   1a488:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a48c:	e0fffa17 	ldw	r3,-24(fp)
   1a490:	00bfff84 	movi	r2,-2
   1a494:	1884703a 	and	r2,r3,r2
   1a498:	1001703a 	wrctl	status,r2
  
  return context;
   1a49c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a4a0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1a4a4:	e0bffe03 	ldbu	r2,-8(fp)
   1a4a8:	10803fd8 	cmpnei	r2,r2,255
   1a4ac:	1000051e 	bne	r2,zero,1a4c4 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1a4b0:	008000b4 	movhi	r2,2
   1a4b4:	108f6704 	addi	r2,r2,15772
   1a4b8:	10800017 	ldw	r2,0(r2)
   1a4bc:	10800c83 	ldbu	r2,50(r2)
   1a4c0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a4c4:	e0fffe03 	ldbu	r3,-8(fp)
   1a4c8:	008000f4 	movhi	r2,3
   1a4cc:	10846004 	addi	r2,r2,4480
   1a4d0:	18c7883a 	add	r3,r3,r3
   1a4d4:	18c7883a 	add	r3,r3,r3
   1a4d8:	10c5883a 	add	r2,r2,r3
   1a4dc:	10800017 	ldw	r2,0(r2)
   1a4e0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1a4e4:	e0bff917 	ldw	r2,-28(fp)
   1a4e8:	1000061e 	bne	r2,zero,1a504 <OSTaskQuery+0xd0>
   1a4ec:	e0bff817 	ldw	r2,-32(fp)
   1a4f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4f4:	e0bffb17 	ldw	r2,-20(fp)
   1a4f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1a4fc:	00800a44 	movi	r2,41
   1a500:	00001206 	br	1a54c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1a504:	e0bff917 	ldw	r2,-28(fp)
   1a508:	10800058 	cmpnei	r2,r2,1
   1a50c:	1000061e 	bne	r2,zero,1a528 <OSTaskQuery+0xf4>
   1a510:	e0bff817 	ldw	r2,-32(fp)
   1a514:	e0bffc15 	stw	r2,-16(fp)
   1a518:	e0bffc17 	ldw	r2,-16(fp)
   1a51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a520:	008010c4 	movi	r2,67
   1a524:	00000906 	br	1a54c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1a528:	e13fff17 	ldw	r4,-4(fp)
   1a52c:	e17ff917 	ldw	r5,-28(fp)
   1a530:	01801b04 	movi	r6,108
   1a534:	0013bd00 	call	13bd0 <OS_MemCopy>
   1a538:	e0bff817 	ldw	r2,-32(fp)
   1a53c:	e0bffd15 	stw	r2,-12(fp)
   1a540:	e0bffd17 	ldw	r2,-12(fp)
   1a544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a548:	0005883a 	mov	r2,zero
}
   1a54c:	e037883a 	mov	sp,fp
   1a550:	dfc00117 	ldw	ra,4(sp)
   1a554:	df000017 	ldw	fp,0(sp)
   1a558:	dec00204 	addi	sp,sp,8
   1a55c:	f800283a 	ret

0001a560 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1a560:	defffc04 	addi	sp,sp,-16
   1a564:	df000315 	stw	fp,12(sp)
   1a568:	df000304 	addi	fp,sp,12
   1a56c:	e13ffd15 	stw	r4,-12(fp)
   1a570:	e17ffe15 	stw	r5,-8(fp)
   1a574:	3005883a 	mov	r2,r6
   1a578:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1a57c:	e0bfff0b 	ldhu	r2,-4(fp)
   1a580:	1080004c 	andi	r2,r2,1
   1a584:	10000d26 	beq	r2,zero,1a5bc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1a588:	e0bfff0b 	ldhu	r2,-4(fp)
   1a58c:	1080008c 	andi	r2,r2,2
   1a590:	10000a26 	beq	r2,zero,1a5bc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a594:	00000706 	br	1a5b4 <OS_TaskStkClr+0x54>
                size--;
   1a598:	e0bffe17 	ldw	r2,-8(fp)
   1a59c:	10bfffc4 	addi	r2,r2,-1
   1a5a0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1a5a4:	e0bffd17 	ldw	r2,-12(fp)
   1a5a8:	10c00104 	addi	r3,r2,4
   1a5ac:	e0fffd15 	stw	r3,-12(fp)
   1a5b0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a5b4:	e0bffe17 	ldw	r2,-8(fp)
   1a5b8:	103ff71e 	bne	r2,zero,1a598 <__alt_mem_Flash_flash_data+0xf401a598>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1a5bc:	e037883a 	mov	sp,fp
   1a5c0:	df000017 	ldw	fp,0(sp)
   1a5c4:	dec00104 	addi	sp,sp,4
   1a5c8:	f800283a 	ret

0001a5cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1a5cc:	defff904 	addi	sp,sp,-28
   1a5d0:	dfc00615 	stw	ra,24(sp)
   1a5d4:	df000515 	stw	fp,20(sp)
   1a5d8:	df000504 	addi	fp,sp,20
   1a5dc:	2005883a 	mov	r2,r4
   1a5e0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a5e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a5e8:	008000b4 	movhi	r2,2
   1a5ec:	108f6604 	addi	r2,r2,15768
   1a5f0:	10800003 	ldbu	r2,0(r2)
   1a5f4:	10803fcc 	andi	r2,r2,255
   1a5f8:	10000126 	beq	r2,zero,1a600 <OSTimeDly+0x34>
        return;
   1a5fc:	00004006 	br	1a700 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1a600:	e0bfff0b 	ldhu	r2,-4(fp)
   1a604:	10003e26 	beq	r2,zero,1a700 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a608:	0005303a 	rdctl	r2,status
   1a60c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a610:	e0fffd17 	ldw	r3,-12(fp)
   1a614:	00bfff84 	movi	r2,-2
   1a618:	1884703a 	and	r2,r3,r2
   1a61c:	1001703a 	wrctl	status,r2
  
  return context;
   1a620:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1a624:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1a628:	008000b4 	movhi	r2,2
   1a62c:	108f6704 	addi	r2,r2,15772
   1a630:	10800017 	ldw	r2,0(r2)
   1a634:	10800d03 	ldbu	r2,52(r2)
   1a638:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1a63c:	e0fffc03 	ldbu	r3,-16(fp)
   1a640:	e13ffc03 	ldbu	r4,-16(fp)
   1a644:	008000b4 	movhi	r2,2
   1a648:	108f6444 	addi	r2,r2,15761
   1a64c:	1105883a 	add	r2,r2,r4
   1a650:	10800003 	ldbu	r2,0(r2)
   1a654:	1009883a 	mov	r4,r2
   1a658:	008000b4 	movhi	r2,2
   1a65c:	108f6704 	addi	r2,r2,15772
   1a660:	10800017 	ldw	r2,0(r2)
   1a664:	10800d43 	ldbu	r2,53(r2)
   1a668:	0084303a 	nor	r2,zero,r2
   1a66c:	2084703a 	and	r2,r4,r2
   1a670:	1009883a 	mov	r4,r2
   1a674:	008000b4 	movhi	r2,2
   1a678:	108f6444 	addi	r2,r2,15761
   1a67c:	10c5883a 	add	r2,r2,r3
   1a680:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1a684:	e0fffc03 	ldbu	r3,-16(fp)
   1a688:	008000b4 	movhi	r2,2
   1a68c:	108f6444 	addi	r2,r2,15761
   1a690:	10c5883a 	add	r2,r2,r3
   1a694:	10800003 	ldbu	r2,0(r2)
   1a698:	10803fcc 	andi	r2,r2,255
   1a69c:	10000e1e 	bne	r2,zero,1a6d8 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1a6a0:	008000b4 	movhi	r2,2
   1a6a4:	108f6704 	addi	r2,r2,15772
   1a6a8:	10800017 	ldw	r2,0(r2)
   1a6ac:	10800d83 	ldbu	r2,54(r2)
   1a6b0:	0084303a 	nor	r2,zero,r2
   1a6b4:	1007883a 	mov	r3,r2
   1a6b8:	008000b4 	movhi	r2,2
   1a6bc:	108f6404 	addi	r2,r2,15760
   1a6c0:	10800003 	ldbu	r2,0(r2)
   1a6c4:	1884703a 	and	r2,r3,r2
   1a6c8:	1007883a 	mov	r3,r2
   1a6cc:	008000b4 	movhi	r2,2
   1a6d0:	108f6404 	addi	r2,r2,15760
   1a6d4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1a6d8:	008000b4 	movhi	r2,2
   1a6dc:	108f6704 	addi	r2,r2,15772
   1a6e0:	10800017 	ldw	r2,0(r2)
   1a6e4:	e0ffff0b 	ldhu	r3,-4(fp)
   1a6e8:	10c00b8d 	sth	r3,46(r2)
   1a6ec:	e0bffb17 	ldw	r2,-20(fp)
   1a6f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6f4:	e0bffe17 	ldw	r2,-8(fp)
   1a6f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1a6fc:	0013c340 	call	13c34 <OS_Sched>
    }
}
   1a700:	e037883a 	mov	sp,fp
   1a704:	dfc00117 	ldw	ra,4(sp)
   1a708:	df000017 	ldw	fp,0(sp)
   1a70c:	dec00204 	addi	sp,sp,8
   1a710:	f800283a 	ret

0001a714 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1a714:	defff804 	addi	sp,sp,-32
   1a718:	dfc00715 	stw	ra,28(sp)
   1a71c:	df000615 	stw	fp,24(sp)
   1a720:	df000604 	addi	fp,sp,24
   1a724:	2015883a 	mov	r10,r4
   1a728:	2809883a 	mov	r4,r5
   1a72c:	3007883a 	mov	r3,r6
   1a730:	3805883a 	mov	r2,r7
   1a734:	e2bffc05 	stb	r10,-16(fp)
   1a738:	e13ffd05 	stb	r4,-12(fp)
   1a73c:	e0fffe05 	stb	r3,-8(fp)
   1a740:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a744:	008000b4 	movhi	r2,2
   1a748:	108f6604 	addi	r2,r2,15768
   1a74c:	10800003 	ldbu	r2,0(r2)
   1a750:	10803fcc 	andi	r2,r2,255
   1a754:	10000226 	beq	r2,zero,1a760 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1a758:	00801544 	movi	r2,85
   1a75c:	00004206 	br	1a868 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1a760:	e0bffc03 	ldbu	r2,-16(fp)
   1a764:	1000081e 	bne	r2,zero,1a788 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1a768:	e0bffd03 	ldbu	r2,-12(fp)
   1a76c:	1000061e 	bne	r2,zero,1a788 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1a770:	e0bffe03 	ldbu	r2,-8(fp)
   1a774:	1000041e 	bne	r2,zero,1a788 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1a778:	e0bfff0b 	ldhu	r2,-4(fp)
   1a77c:	1000021e 	bne	r2,zero,1a788 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1a780:	00801504 	movi	r2,84
   1a784:	00003806 	br	1a868 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1a788:	e0bffd03 	ldbu	r2,-12(fp)
   1a78c:	10800f30 	cmpltui	r2,r2,60
   1a790:	1000021e 	bne	r2,zero,1a79c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1a794:	00801444 	movi	r2,81
   1a798:	00003306 	br	1a868 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1a79c:	e0bffe03 	ldbu	r2,-8(fp)
   1a7a0:	10800f30 	cmpltui	r2,r2,60
   1a7a4:	1000021e 	bne	r2,zero,1a7b0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1a7a8:	00801484 	movi	r2,82
   1a7ac:	00002e06 	br	1a868 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1a7b0:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7b4:	1080fa30 	cmpltui	r2,r2,1000
   1a7b8:	1000021e 	bne	r2,zero,1a7c4 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1a7bc:	008014c4 	movi	r2,83
   1a7c0:	00002906 	br	1a868 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a7c4:	e0bffc03 	ldbu	r2,-16(fp)
   1a7c8:	10c38424 	muli	r3,r2,3600
   1a7cc:	e0bffd03 	ldbu	r2,-12(fp)
   1a7d0:	10800f24 	muli	r2,r2,60
   1a7d4:	1887883a 	add	r3,r3,r2
   1a7d8:	e0bffe03 	ldbu	r2,-8(fp)
   1a7dc:	1885883a 	add	r2,r3,r2
   1a7e0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1a7e4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7e8:	10800f84 	addi	r2,r2,62
   1a7ec:	100690fa 	slli	r3,r2,3
   1a7f0:	008418b4 	movhi	r2,4194
   1a7f4:	109374c4 	addi	r2,r2,19923
   1a7f8:	188a383a 	mulxuu	r5,r3,r2
   1a7fc:	1885383a 	mul	r2,r3,r2
   1a800:	1011883a 	mov	r8,r2
   1a804:	2813883a 	mov	r9,r5
   1a808:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a80c:	2085883a 	add	r2,r4,r2
   1a810:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1a814:	e0bffb17 	ldw	r2,-20(fp)
   1a818:	1004d43a 	srli	r2,r2,16
   1a81c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1a820:	e0bffb17 	ldw	r2,-20(fp)
   1a824:	10bfffcc 	andi	r2,r2,65535
   1a828:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1a82c:	e0bffb17 	ldw	r2,-20(fp)
   1a830:	10bfffcc 	andi	r2,r2,65535
   1a834:	1009883a 	mov	r4,r2
   1a838:	001a5cc0 	call	1a5cc <OSTimeDly>
    while (loops > 0) {
   1a83c:	00000706 	br	1a85c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1a840:	01200014 	movui	r4,32768
   1a844:	001a5cc0 	call	1a5cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1a848:	01200014 	movui	r4,32768
   1a84c:	001a5cc0 	call	1a5cc <OSTimeDly>
        loops--;
   1a850:	e0bffa0b 	ldhu	r2,-24(fp)
   1a854:	10bfffc4 	addi	r2,r2,-1
   1a858:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1a85c:	e0bffa0b 	ldhu	r2,-24(fp)
   1a860:	103ff71e 	bne	r2,zero,1a840 <__alt_mem_Flash_flash_data+0xf401a840>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1a864:	0005883a 	mov	r2,zero
}
   1a868:	e037883a 	mov	sp,fp
   1a86c:	dfc00117 	ldw	ra,4(sp)
   1a870:	df000017 	ldw	fp,0(sp)
   1a874:	dec00204 	addi	sp,sp,8
   1a878:	f800283a 	ret

0001a87c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1a87c:	defff504 	addi	sp,sp,-44
   1a880:	dfc00a15 	stw	ra,40(sp)
   1a884:	df000915 	stw	fp,36(sp)
   1a888:	df000904 	addi	fp,sp,36
   1a88c:	2005883a 	mov	r2,r4
   1a890:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a894:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1a898:	e0bfff03 	ldbu	r2,-4(fp)
   1a89c:	10800530 	cmpltui	r2,r2,20
   1a8a0:	1000021e 	bne	r2,zero,1a8ac <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a8a4:	00800a84 	movi	r2,42
   1a8a8:	00006b06 	br	1aa58 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a8ac:	0005303a 	rdctl	r2,status
   1a8b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8b4:	e0fff917 	ldw	r3,-28(fp)
   1a8b8:	00bfff84 	movi	r2,-2
   1a8bc:	1884703a 	and	r2,r3,r2
   1a8c0:	1001703a 	wrctl	status,r2
  
  return context;
   1a8c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1a8c8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1a8cc:	e0ffff03 	ldbu	r3,-4(fp)
   1a8d0:	008000f4 	movhi	r2,3
   1a8d4:	10846004 	addi	r2,r2,4480
   1a8d8:	18c7883a 	add	r3,r3,r3
   1a8dc:	18c7883a 	add	r3,r3,r3
   1a8e0:	10c5883a 	add	r2,r2,r3
   1a8e4:	10800017 	ldw	r2,0(r2)
   1a8e8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1a8ec:	e0bff817 	ldw	r2,-32(fp)
   1a8f0:	1000061e 	bne	r2,zero,1a90c <OSTimeDlyResume+0x90>
   1a8f4:	e0bff717 	ldw	r2,-36(fp)
   1a8f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8fc:	e0bffa17 	ldw	r2,-24(fp)
   1a900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a904:	008010c4 	movi	r2,67
   1a908:	00005306 	br	1aa58 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a90c:	e0bff817 	ldw	r2,-32(fp)
   1a910:	10800058 	cmpnei	r2,r2,1
   1a914:	1000061e 	bne	r2,zero,1a930 <OSTimeDlyResume+0xb4>
   1a918:	e0bff717 	ldw	r2,-36(fp)
   1a91c:	e0bffb15 	stw	r2,-20(fp)
   1a920:	e0bffb17 	ldw	r2,-20(fp)
   1a924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a928:	008010c4 	movi	r2,67
   1a92c:	00004a06 	br	1aa58 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1a930:	e0bff817 	ldw	r2,-32(fp)
   1a934:	10800b8b 	ldhu	r2,46(r2)
   1a938:	10bfffcc 	andi	r2,r2,65535
   1a93c:	1000061e 	bne	r2,zero,1a958 <OSTimeDlyResume+0xdc>
   1a940:	e0bff717 	ldw	r2,-36(fp)
   1a944:	e0bffc15 	stw	r2,-16(fp)
   1a948:	e0bffc17 	ldw	r2,-16(fp)
   1a94c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1a950:	00801404 	movi	r2,80
   1a954:	00004006 	br	1aa58 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1a958:	e0bff817 	ldw	r2,-32(fp)
   1a95c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1a960:	e0bff817 	ldw	r2,-32(fp)
   1a964:	10800c03 	ldbu	r2,48(r2)
   1a968:	10803fcc 	andi	r2,r2,255
   1a96c:	10800dcc 	andi	r2,r2,55
   1a970:	10000b26 	beq	r2,zero,1a9a0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1a974:	e0bff817 	ldw	r2,-32(fp)
   1a978:	10c00c03 	ldbu	r3,48(r2)
   1a97c:	00bff204 	movi	r2,-56
   1a980:	1884703a 	and	r2,r3,r2
   1a984:	1007883a 	mov	r3,r2
   1a988:	e0bff817 	ldw	r2,-32(fp)
   1a98c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1a990:	e0bff817 	ldw	r2,-32(fp)
   1a994:	00c00044 	movi	r3,1
   1a998:	10c00c45 	stb	r3,49(r2)
   1a99c:	00000206 	br	1a9a8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1a9a0:	e0bff817 	ldw	r2,-32(fp)
   1a9a4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1a9a8:	e0bff817 	ldw	r2,-32(fp)
   1a9ac:	10800c03 	ldbu	r2,48(r2)
   1a9b0:	10803fcc 	andi	r2,r2,255
   1a9b4:	1080020c 	andi	r2,r2,8
   1a9b8:	1000221e 	bne	r2,zero,1aa44 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1a9bc:	e0bff817 	ldw	r2,-32(fp)
   1a9c0:	10c00d83 	ldbu	r3,54(r2)
   1a9c4:	008000b4 	movhi	r2,2
   1a9c8:	108f6404 	addi	r2,r2,15760
   1a9cc:	10800003 	ldbu	r2,0(r2)
   1a9d0:	1884b03a 	or	r2,r3,r2
   1a9d4:	1007883a 	mov	r3,r2
   1a9d8:	008000b4 	movhi	r2,2
   1a9dc:	108f6404 	addi	r2,r2,15760
   1a9e0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a9e4:	e0bff817 	ldw	r2,-32(fp)
   1a9e8:	10800d03 	ldbu	r2,52(r2)
   1a9ec:	10c03fcc 	andi	r3,r2,255
   1a9f0:	e0bff817 	ldw	r2,-32(fp)
   1a9f4:	10800d03 	ldbu	r2,52(r2)
   1a9f8:	11003fcc 	andi	r4,r2,255
   1a9fc:	008000b4 	movhi	r2,2
   1aa00:	108f6444 	addi	r2,r2,15761
   1aa04:	1105883a 	add	r2,r2,r4
   1aa08:	11000003 	ldbu	r4,0(r2)
   1aa0c:	e0bff817 	ldw	r2,-32(fp)
   1aa10:	10800d43 	ldbu	r2,53(r2)
   1aa14:	2084b03a 	or	r2,r4,r2
   1aa18:	1009883a 	mov	r4,r2
   1aa1c:	008000b4 	movhi	r2,2
   1aa20:	108f6444 	addi	r2,r2,15761
   1aa24:	10c5883a 	add	r2,r2,r3
   1aa28:	11000005 	stb	r4,0(r2)
   1aa2c:	e0bff717 	ldw	r2,-36(fp)
   1aa30:	e0bffd15 	stw	r2,-12(fp)
   1aa34:	e0bffd17 	ldw	r2,-12(fp)
   1aa38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1aa3c:	0013c340 	call	13c34 <OS_Sched>
   1aa40:	00000406 	br	1aa54 <OSTimeDlyResume+0x1d8>
   1aa44:	e0bff717 	ldw	r2,-36(fp)
   1aa48:	e0bffe15 	stw	r2,-8(fp)
   1aa4c:	e0bffe17 	ldw	r2,-8(fp)
   1aa50:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1aa54:	0005883a 	mov	r2,zero
}
   1aa58:	e037883a 	mov	sp,fp
   1aa5c:	dfc00117 	ldw	ra,4(sp)
   1aa60:	df000017 	ldw	fp,0(sp)
   1aa64:	dec00204 	addi	sp,sp,8
   1aa68:	f800283a 	ret

0001aa6c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1aa6c:	defffb04 	addi	sp,sp,-20
   1aa70:	df000415 	stw	fp,16(sp)
   1aa74:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa78:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa7c:	0005303a 	rdctl	r2,status
   1aa80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa84:	e0fffe17 	ldw	r3,-8(fp)
   1aa88:	00bfff84 	movi	r2,-2
   1aa8c:	1884703a 	and	r2,r3,r2
   1aa90:	1001703a 	wrctl	status,r2
  
  return context;
   1aa94:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1aa98:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1aa9c:	008000b4 	movhi	r2,2
   1aaa0:	108f6804 	addi	r2,r2,15776
   1aaa4:	10800017 	ldw	r2,0(r2)
   1aaa8:	e0bffd15 	stw	r2,-12(fp)
   1aaac:	e0bffc17 	ldw	r2,-16(fp)
   1aab0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aab4:	e0bfff17 	ldw	r2,-4(fp)
   1aab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1aabc:	e0bffd17 	ldw	r2,-12(fp)
}
   1aac0:	e037883a 	mov	sp,fp
   1aac4:	df000017 	ldw	fp,0(sp)
   1aac8:	dec00104 	addi	sp,sp,4
   1aacc:	f800283a 	ret

0001aad0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1aad0:	defffb04 	addi	sp,sp,-20
   1aad4:	df000415 	stw	fp,16(sp)
   1aad8:	df000404 	addi	fp,sp,16
   1aadc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aae0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aae4:	0005303a 	rdctl	r2,status
   1aae8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aaec:	e0fffd17 	ldw	r3,-12(fp)
   1aaf0:	00bfff84 	movi	r2,-2
   1aaf4:	1884703a 	and	r2,r3,r2
   1aaf8:	1001703a 	wrctl	status,r2
  
  return context;
   1aafc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1ab00:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1ab04:	008000b4 	movhi	r2,2
   1ab08:	108f6804 	addi	r2,r2,15776
   1ab0c:	e0ffff17 	ldw	r3,-4(fp)
   1ab10:	10c00015 	stw	r3,0(r2)
   1ab14:	e0bffc17 	ldw	r2,-16(fp)
   1ab18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab1c:	e0bffe17 	ldw	r2,-8(fp)
   1ab20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1ab24:	e037883a 	mov	sp,fp
   1ab28:	df000017 	ldw	fp,0(sp)
   1ab2c:	dec00104 	addi	sp,sp,4
   1ab30:	f800283a 	ret

0001ab34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1ab34:	defffd04 	addi	sp,sp,-12
   1ab38:	dfc00215 	stw	ra,8(sp)
   1ab3c:	df000115 	stw	fp,4(sp)
   1ab40:	df000104 	addi	fp,sp,4
   1ab44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1ab48:	e13fff17 	ldw	r4,-4(fp)
   1ab4c:	014000b4 	movhi	r5,2
   1ab50:	29468504 	addi	r5,r5,6676
   1ab54:	001dab00 	call	1dab0 <alt_dev_llist_insert>
}
   1ab58:	e037883a 	mov	sp,fp
   1ab5c:	dfc00117 	ldw	ra,4(sp)
   1ab60:	df000017 	ldw	fp,0(sp)
   1ab64:	dec00204 	addi	sp,sp,8
   1ab68:	f800283a 	ret

0001ab6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1ab6c:	defffd04 	addi	sp,sp,-12
   1ab70:	dfc00215 	stw	ra,8(sp)
   1ab74:	df000115 	stw	fp,4(sp)
   1ab78:	df000104 	addi	fp,sp,4
   1ab7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1ab80:	001e3c40 	call	1e3c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1ab84:	00800044 	movi	r2,1
   1ab88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1ab8c:	e037883a 	mov	sp,fp
   1ab90:	dfc00117 	ldw	ra,4(sp)
   1ab94:	df000017 	ldw	fp,0(sp)
   1ab98:	dec00204 	addi	sp,sp,8
   1ab9c:	f800283a 	ret

0001aba0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1aba0:	defffd04 	addi	sp,sp,-12
   1aba4:	dfc00215 	stw	ra,8(sp)
   1aba8:	df000115 	stw	fp,4(sp)
   1abac:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1abb0:	01040034 	movhi	r4,4096
   1abb4:	21080004 	addi	r4,r4,8192
   1abb8:	000b883a 	mov	r5,zero
   1abbc:	000d883a 	mov	r6,zero
   1abc0:	01c00204 	movi	r7,8
   1abc4:	001bd200 	call	1bd20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1abc8:	010000b4 	movhi	r4,2
   1abcc:	2100c504 	addi	r4,r4,788
   1abd0:	000b883a 	mov	r5,zero
   1abd4:	01800204 	movi	r6,8
   1abd8:	001b0e80 	call	1b0e8 <altera_avalon_jtag_uart_init>
   1abdc:	010000b4 	movhi	r4,2
   1abe0:	2100bb04 	addi	r4,r4,748
   1abe4:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1abe8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1abec:	010000b4 	movhi	r4,2
   1abf0:	2104d604 	addi	r4,r4,4952
   1abf4:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1abf8:	010000b4 	movhi	r4,2
   1abfc:	2104e204 	addi	r4,r4,5000
   1ac00:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1ac04:	010000b4 	movhi	r4,2
   1ac08:	2104ee04 	addi	r4,r4,5048
   1ac0c:	001be500 	call	1be50 <alt_up_character_lcd_init>
   1ac10:	010000b4 	movhi	r4,2
   1ac14:	2104ee04 	addi	r4,r4,5048
   1ac18:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1ac1c:	010000b4 	movhi	r4,2
   1ac20:	2104f904 	addi	r4,r4,5092
   1ac24:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1ac28:	010000b4 	movhi	r4,2
   1ac2c:	21050404 	addi	r4,r4,5136
   1ac30:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1ac34:	010000b4 	movhi	r4,2
   1ac38:	21050f04 	addi	r4,r4,5180
   1ac3c:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1ac40:	010000b4 	movhi	r4,2
   1ac44:	21051a04 	addi	r4,r4,5224
   1ac48:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1ac4c:	010000b4 	movhi	r4,2
   1ac50:	21052504 	addi	r4,r4,5268
   1ac54:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1ac58:	010000b4 	movhi	r4,2
   1ac5c:	21053004 	addi	r4,r4,5312
   1ac60:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1ac64:	010000b4 	movhi	r4,2
   1ac68:	21053b04 	addi	r4,r4,5356
   1ac6c:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1ac70:	010000b4 	movhi	r4,2
   1ac74:	21054604 	addi	r4,r4,5400
   1ac78:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1ac7c:	010000b4 	movhi	r4,2
   1ac80:	21055104 	addi	r4,r4,5444
   1ac84:	001c7280 	call	1c728 <alt_up_ps2_init>
   1ac88:	010000b4 	movhi	r4,2
   1ac8c:	21055104 	addi	r4,r4,5444
   1ac90:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1ac94:	010000b4 	movhi	r4,2
   1ac98:	21055f04 	addi	r4,r4,5500
   1ac9c:	001c7280 	call	1c728 <alt_up_ps2_init>
   1aca0:	010000b4 	movhi	r4,2
   1aca4:	21055f04 	addi	r4,r4,5500
   1aca8:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
   1acac:	010000b4 	movhi	r4,2
   1acb0:	21056d04 	addi	r4,r4,5556
   1acb4:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1acb8:	010000b4 	movhi	r4,2
   1acbc:	21057804 	addi	r4,r4,5600
   1acc0:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1acc4:	010000b4 	movhi	r4,2
   1acc8:	21058304 	addi	r4,r4,5644
   1accc:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1acd0:	008000b4 	movhi	r2,2
   1acd4:	10859004 	addi	r2,r2,5696
   1acd8:	10800a17 	ldw	r2,40(r2)
   1acdc:	10800104 	addi	r2,r2,4
   1ace0:	10800017 	ldw	r2,0(r2)
   1ace4:	10ffffcc 	andi	r3,r2,65535
   1ace8:	008000b4 	movhi	r2,2
   1acec:	10859004 	addi	r2,r2,5696
   1acf0:	10c00c15 	stw	r3,48(r2)
   1acf4:	008000b4 	movhi	r2,2
   1acf8:	10859004 	addi	r2,r2,5696
   1acfc:	10800a17 	ldw	r2,40(r2)
   1ad00:	10800104 	addi	r2,r2,4
   1ad04:	10800017 	ldw	r2,0(r2)
   1ad08:	1006d43a 	srli	r3,r2,16
   1ad0c:	008000b4 	movhi	r2,2
   1ad10:	10859004 	addi	r2,r2,5696
   1ad14:	10c00d15 	stw	r3,52(r2)
   1ad18:	008000b4 	movhi	r2,2
   1ad1c:	10859004 	addi	r2,r2,5696
   1ad20:	10800c17 	ldw	r2,48(r2)
   1ad24:	10801068 	cmpgeui	r2,r2,65
   1ad28:	1000081e 	bne	r2,zero,1ad4c <alt_sys_init+0x1ac>
   1ad2c:	008000b4 	movhi	r2,2
   1ad30:	10859004 	addi	r2,r2,5696
   1ad34:	00c00fc4 	movi	r3,63
   1ad38:	10c00f15 	stw	r3,60(r2)
   1ad3c:	008000b4 	movhi	r2,2
   1ad40:	10859004 	addi	r2,r2,5696
   1ad44:	00c00184 	movi	r3,6
   1ad48:	10c01015 	stw	r3,64(r2)
   1ad4c:	008000b4 	movhi	r2,2
   1ad50:	10859004 	addi	r2,r2,5696
   1ad54:	10800d17 	ldw	r2,52(r2)
   1ad58:	10800868 	cmpgeui	r2,r2,33
   1ad5c:	1000041e 	bne	r2,zero,1ad70 <alt_sys_init+0x1d0>
   1ad60:	008000b4 	movhi	r2,2
   1ad64:	10859004 	addi	r2,r2,5696
   1ad68:	00c007c4 	movi	r3,31
   1ad6c:	10c01115 	stw	r3,68(r2)
   1ad70:	010000b4 	movhi	r4,2
   1ad74:	21059004 	addi	r4,r4,5696
   1ad78:	001d0400 	call	1d040 <alt_up_char_buffer_init>
   1ad7c:	010000b4 	movhi	r4,2
   1ad80:	21059004 	addi	r4,r4,5696
   1ad84:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1ad88:	008000b4 	movhi	r2,2
   1ad8c:	1085a204 	addi	r2,r2,5768
   1ad90:	10800a17 	ldw	r2,40(r2)
   1ad94:	10800017 	ldw	r2,0(r2)
   1ad98:	1007883a 	mov	r3,r2
   1ad9c:	008000b4 	movhi	r2,2
   1ada0:	1085a204 	addi	r2,r2,5768
   1ada4:	10c00b15 	stw	r3,44(r2)
   1ada8:	008000b4 	movhi	r2,2
   1adac:	1085a204 	addi	r2,r2,5768
   1adb0:	10800a17 	ldw	r2,40(r2)
   1adb4:	10800104 	addi	r2,r2,4
   1adb8:	10800017 	ldw	r2,0(r2)
   1adbc:	1007883a 	mov	r3,r2
   1adc0:	008000b4 	movhi	r2,2
   1adc4:	1085a204 	addi	r2,r2,5768
   1adc8:	10c00c15 	stw	r3,48(r2)
   1adcc:	008000b4 	movhi	r2,2
   1add0:	1085a204 	addi	r2,r2,5768
   1add4:	10800a17 	ldw	r2,40(r2)
   1add8:	10800204 	addi	r2,r2,8
   1addc:	10800017 	ldw	r2,0(r2)
   1ade0:	10ffffcc 	andi	r3,r2,65535
   1ade4:	008000b4 	movhi	r2,2
   1ade8:	1085a204 	addi	r2,r2,5768
   1adec:	10c00f15 	stw	r3,60(r2)
   1adf0:	008000b4 	movhi	r2,2
   1adf4:	1085a204 	addi	r2,r2,5768
   1adf8:	10800a17 	ldw	r2,40(r2)
   1adfc:	10800204 	addi	r2,r2,8
   1ae00:	10800017 	ldw	r2,0(r2)
   1ae04:	1006d43a 	srli	r3,r2,16
   1ae08:	008000b4 	movhi	r2,2
   1ae0c:	1085a204 	addi	r2,r2,5768
   1ae10:	10c01015 	stw	r3,64(r2)
   1ae14:	008000b4 	movhi	r2,2
   1ae18:	1085a204 	addi	r2,r2,5768
   1ae1c:	10800a17 	ldw	r2,40(r2)
   1ae20:	10800304 	addi	r2,r2,12
   1ae24:	10800017 	ldw	r2,0(r2)
   1ae28:	1005d07a 	srai	r2,r2,1
   1ae2c:	10c0004c 	andi	r3,r2,1
   1ae30:	008000b4 	movhi	r2,2
   1ae34:	1085a204 	addi	r2,r2,5768
   1ae38:	10c00d15 	stw	r3,52(r2)
   1ae3c:	008000b4 	movhi	r2,2
   1ae40:	1085a204 	addi	r2,r2,5768
   1ae44:	10800a17 	ldw	r2,40(r2)
   1ae48:	10800304 	addi	r2,r2,12
   1ae4c:	10800017 	ldw	r2,0(r2)
   1ae50:	1005d13a 	srai	r2,r2,4
   1ae54:	10c003cc 	andi	r3,r2,15
   1ae58:	008000b4 	movhi	r2,2
   1ae5c:	1085a204 	addi	r2,r2,5768
   1ae60:	10c00e15 	stw	r3,56(r2)
   1ae64:	008000b4 	movhi	r2,2
   1ae68:	1085a204 	addi	r2,r2,5768
   1ae6c:	10800a17 	ldw	r2,40(r2)
   1ae70:	10800304 	addi	r2,r2,12
   1ae74:	10800017 	ldw	r2,0(r2)
   1ae78:	1005d43a 	srai	r2,r2,16
   1ae7c:	e0bfff05 	stb	r2,-4(fp)
   1ae80:	008000b4 	movhi	r2,2
   1ae84:	1085a204 	addi	r2,r2,5768
   1ae88:	10800a17 	ldw	r2,40(r2)
   1ae8c:	10800304 	addi	r2,r2,12
   1ae90:	10800017 	ldw	r2,0(r2)
   1ae94:	1004d63a 	srli	r2,r2,24
   1ae98:	e0bfff45 	stb	r2,-3(fp)
   1ae9c:	008000b4 	movhi	r2,2
   1aea0:	1085a204 	addi	r2,r2,5768
   1aea4:	10800e17 	ldw	r2,56(r2)
   1aea8:	10800058 	cmpnei	r2,r2,1
   1aeac:	1000041e 	bne	r2,zero,1aec0 <alt_sys_init+0x320>
   1aeb0:	008000b4 	movhi	r2,2
   1aeb4:	1085a204 	addi	r2,r2,5768
   1aeb8:	10001115 	stw	zero,68(r2)
   1aebc:	00000e06 	br	1aef8 <alt_sys_init+0x358>
   1aec0:	008000b4 	movhi	r2,2
   1aec4:	1085a204 	addi	r2,r2,5768
   1aec8:	10800e17 	ldw	r2,56(r2)
   1aecc:	10800098 	cmpnei	r2,r2,2
   1aed0:	1000051e 	bne	r2,zero,1aee8 <alt_sys_init+0x348>
   1aed4:	008000b4 	movhi	r2,2
   1aed8:	1085a204 	addi	r2,r2,5768
   1aedc:	00c00044 	movi	r3,1
   1aee0:	10c01115 	stw	r3,68(r2)
   1aee4:	00000406 	br	1aef8 <alt_sys_init+0x358>
   1aee8:	008000b4 	movhi	r2,2
   1aeec:	1085a204 	addi	r2,r2,5768
   1aef0:	00c00084 	movi	r3,2
   1aef4:	10c01115 	stw	r3,68(r2)
   1aef8:	e0bfff03 	ldbu	r2,-4(fp)
   1aefc:	00c00804 	movi	r3,32
   1af00:	1885c83a 	sub	r2,r3,r2
   1af04:	00ffffc4 	movi	r3,-1
   1af08:	1886d83a 	srl	r3,r3,r2
   1af0c:	008000b4 	movhi	r2,2
   1af10:	1085a204 	addi	r2,r2,5768
   1af14:	10c01215 	stw	r3,72(r2)
   1af18:	e0ffff03 	ldbu	r3,-4(fp)
   1af1c:	008000b4 	movhi	r2,2
   1af20:	1085a204 	addi	r2,r2,5768
   1af24:	10801117 	ldw	r2,68(r2)
   1af28:	1887883a 	add	r3,r3,r2
   1af2c:	008000b4 	movhi	r2,2
   1af30:	1085a204 	addi	r2,r2,5768
   1af34:	10c01315 	stw	r3,76(r2)
   1af38:	e0bfff43 	ldbu	r2,-3(fp)
   1af3c:	00c00804 	movi	r3,32
   1af40:	1885c83a 	sub	r2,r3,r2
   1af44:	00ffffc4 	movi	r3,-1
   1af48:	1886d83a 	srl	r3,r3,r2
   1af4c:	008000b4 	movhi	r2,2
   1af50:	1085a204 	addi	r2,r2,5768
   1af54:	10c01415 	stw	r3,80(r2)
   1af58:	010000b4 	movhi	r4,2
   1af5c:	2105a204 	addi	r4,r4,5768
   1af60:	001ab340 	call	1ab34 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1af64:	010000b4 	movhi	r4,2
   1af68:	2105b704 	addi	r4,r4,5852
   1af6c:	001ab340 	call	1ab34 <alt_dev_reg>
}
   1af70:	e037883a 	mov	sp,fp
   1af74:	dfc00117 	ldw	ra,4(sp)
   1af78:	df000017 	ldw	fp,0(sp)
   1af7c:	dec00204 	addi	sp,sp,8
   1af80:	f800283a 	ret

0001af84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1af84:	defffa04 	addi	sp,sp,-24
   1af88:	dfc00515 	stw	ra,20(sp)
   1af8c:	df000415 	stw	fp,16(sp)
   1af90:	df000404 	addi	fp,sp,16
   1af94:	e13ffd15 	stw	r4,-12(fp)
   1af98:	e17ffe15 	stw	r5,-8(fp)
   1af9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1afa0:	e0bffd17 	ldw	r2,-12(fp)
   1afa4:	10800017 	ldw	r2,0(r2)
   1afa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1afac:	e0bffc17 	ldw	r2,-16(fp)
   1afb0:	10c00a04 	addi	r3,r2,40
   1afb4:	e0bffd17 	ldw	r2,-12(fp)
   1afb8:	10800217 	ldw	r2,8(r2)
   1afbc:	1809883a 	mov	r4,r3
   1afc0:	e17ffe17 	ldw	r5,-8(fp)
   1afc4:	e1bfff17 	ldw	r6,-4(fp)
   1afc8:	100f883a 	mov	r7,r2
   1afcc:	001b7340 	call	1b734 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1afd0:	e037883a 	mov	sp,fp
   1afd4:	dfc00117 	ldw	ra,4(sp)
   1afd8:	df000017 	ldw	fp,0(sp)
   1afdc:	dec00204 	addi	sp,sp,8
   1afe0:	f800283a 	ret

0001afe4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1afe4:	defffa04 	addi	sp,sp,-24
   1afe8:	dfc00515 	stw	ra,20(sp)
   1afec:	df000415 	stw	fp,16(sp)
   1aff0:	df000404 	addi	fp,sp,16
   1aff4:	e13ffd15 	stw	r4,-12(fp)
   1aff8:	e17ffe15 	stw	r5,-8(fp)
   1affc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b000:	e0bffd17 	ldw	r2,-12(fp)
   1b004:	10800017 	ldw	r2,0(r2)
   1b008:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1b00c:	e0bffc17 	ldw	r2,-16(fp)
   1b010:	10c00a04 	addi	r3,r2,40
   1b014:	e0bffd17 	ldw	r2,-12(fp)
   1b018:	10800217 	ldw	r2,8(r2)
   1b01c:	1809883a 	mov	r4,r3
   1b020:	e17ffe17 	ldw	r5,-8(fp)
   1b024:	e1bfff17 	ldw	r6,-4(fp)
   1b028:	100f883a 	mov	r7,r2
   1b02c:	001b9e80 	call	1b9e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1b030:	e037883a 	mov	sp,fp
   1b034:	dfc00117 	ldw	ra,4(sp)
   1b038:	df000017 	ldw	fp,0(sp)
   1b03c:	dec00204 	addi	sp,sp,8
   1b040:	f800283a 	ret

0001b044 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1b044:	defffc04 	addi	sp,sp,-16
   1b048:	dfc00315 	stw	ra,12(sp)
   1b04c:	df000215 	stw	fp,8(sp)
   1b050:	df000204 	addi	fp,sp,8
   1b054:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b058:	e0bfff17 	ldw	r2,-4(fp)
   1b05c:	10800017 	ldw	r2,0(r2)
   1b060:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1b064:	e0bffe17 	ldw	r2,-8(fp)
   1b068:	10c00a04 	addi	r3,r2,40
   1b06c:	e0bfff17 	ldw	r2,-4(fp)
   1b070:	10800217 	ldw	r2,8(r2)
   1b074:	1809883a 	mov	r4,r3
   1b078:	100b883a 	mov	r5,r2
   1b07c:	001b5e00 	call	1b5e0 <altera_avalon_jtag_uart_close>
}
   1b080:	e037883a 	mov	sp,fp
   1b084:	dfc00117 	ldw	ra,4(sp)
   1b088:	df000017 	ldw	fp,0(sp)
   1b08c:	dec00204 	addi	sp,sp,8
   1b090:	f800283a 	ret

0001b094 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1b094:	defffa04 	addi	sp,sp,-24
   1b098:	dfc00515 	stw	ra,20(sp)
   1b09c:	df000415 	stw	fp,16(sp)
   1b0a0:	df000404 	addi	fp,sp,16
   1b0a4:	e13ffd15 	stw	r4,-12(fp)
   1b0a8:	e17ffe15 	stw	r5,-8(fp)
   1b0ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1b0b0:	e0bffd17 	ldw	r2,-12(fp)
   1b0b4:	10800017 	ldw	r2,0(r2)
   1b0b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1b0bc:	e0bffc17 	ldw	r2,-16(fp)
   1b0c0:	10800a04 	addi	r2,r2,40
   1b0c4:	1009883a 	mov	r4,r2
   1b0c8:	e17ffe17 	ldw	r5,-8(fp)
   1b0cc:	e1bfff17 	ldw	r6,-4(fp)
   1b0d0:	001b6480 	call	1b648 <altera_avalon_jtag_uart_ioctl>
}
   1b0d4:	e037883a 	mov	sp,fp
   1b0d8:	dfc00117 	ldw	ra,4(sp)
   1b0dc:	df000017 	ldw	fp,0(sp)
   1b0e0:	dec00204 	addi	sp,sp,8
   1b0e4:	f800283a 	ret

0001b0e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1b0e8:	defff104 	addi	sp,sp,-60
   1b0ec:	dfc00e15 	stw	ra,56(sp)
   1b0f0:	df000d15 	stw	fp,52(sp)
   1b0f4:	df000d04 	addi	fp,sp,52
   1b0f8:	e13ff915 	stw	r4,-28(fp)
   1b0fc:	e17ffa15 	stw	r5,-24(fp)
   1b100:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1b104:	e0bff917 	ldw	r2,-28(fp)
   1b108:	10800c04 	addi	r2,r2,48
   1b10c:	e0bff315 	stw	r2,-52(fp)
   1b110:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1b114:	e0fff40b 	ldhu	r3,-48(fp)
   1b118:	e0bff884 	addi	r2,fp,-30
   1b11c:	1809883a 	mov	r4,r3
   1b120:	100b883a 	mov	r5,r2
   1b124:	00147a00 	call	147a0 <OSFlagCreate>
   1b128:	1007883a 	mov	r3,r2
   1b12c:	e0bff317 	ldw	r2,-52(fp)
   1b130:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1b134:	e0bff917 	ldw	r2,-28(fp)
   1b138:	10800a04 	addi	r2,r2,40
   1b13c:	e0bff515 	stw	r2,-44(fp)
   1b140:	00800044 	movi	r2,1
   1b144:	e0bff60d 	sth	r2,-40(fp)
   1b148:	e0bff60b 	ldhu	r2,-40(fp)
   1b14c:	1009883a 	mov	r4,r2
   1b150:	00182800 	call	18280 <OSSemCreate>
   1b154:	1007883a 	mov	r3,r2
   1b158:	e0bff517 	ldw	r2,-44(fp)
   1b15c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1b160:	e0bff917 	ldw	r2,-28(fp)
   1b164:	10800b04 	addi	r2,r2,44
   1b168:	e0bff715 	stw	r2,-36(fp)
   1b16c:	00800044 	movi	r2,1
   1b170:	e0bff80d 	sth	r2,-32(fp)
   1b174:	e0bff80b 	ldhu	r2,-32(fp)
   1b178:	1009883a 	mov	r4,r2
   1b17c:	00182800 	call	18280 <OSSemCreate>
   1b180:	1007883a 	mov	r3,r2
   1b184:	e0bff717 	ldw	r2,-36(fp)
   1b188:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b18c:	e0bff917 	ldw	r2,-28(fp)
   1b190:	00c00044 	movi	r3,1
   1b194:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1b198:	e0bff917 	ldw	r2,-28(fp)
   1b19c:	10800017 	ldw	r2,0(r2)
   1b1a0:	10800104 	addi	r2,r2,4
   1b1a4:	1007883a 	mov	r3,r2
   1b1a8:	e0bff917 	ldw	r2,-28(fp)
   1b1ac:	10800817 	ldw	r2,32(r2)
   1b1b0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1b1b4:	e0bffb17 	ldw	r2,-20(fp)
   1b1b8:	1009883a 	mov	r4,r2
   1b1bc:	e17ff917 	ldw	r5,-28(fp)
   1b1c0:	018000b4 	movhi	r6,2
   1b1c4:	31ac8a04 	addi	r6,r6,-19928
   1b1c8:	001de040 	call	1de04 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1b1cc:	e0bff917 	ldw	r2,-28(fp)
   1b1d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1b1d4:	e0bff917 	ldw	r2,-28(fp)
   1b1d8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b1dc:	008000b4 	movhi	r2,2
   1b1e0:	108f6e04 	addi	r2,r2,15800
   1b1e4:	10800017 	ldw	r2,0(r2)
   1b1e8:	1809883a 	mov	r4,r3
   1b1ec:	100b883a 	mov	r5,r2
   1b1f0:	018000b4 	movhi	r6,2
   1b1f4:	31ad3404 	addi	r6,r6,-19248
   1b1f8:	e1fff917 	ldw	r7,-28(fp)
   1b1fc:	001d9040 	call	1d904 <alt_alarm_start>
   1b200:	1000040e 	bge	r2,zero,1b214 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1b204:	e0fff917 	ldw	r3,-28(fp)
   1b208:	00a00034 	movhi	r2,32768
   1b20c:	10bfffc4 	addi	r2,r2,-1
   1b210:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1b214:	e037883a 	mov	sp,fp
   1b218:	dfc00117 	ldw	ra,4(sp)
   1b21c:	df000017 	ldw	fp,0(sp)
   1b220:	dec00204 	addi	sp,sp,8
   1b224:	f800283a 	ret

0001b228 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1b228:	defff104 	addi	sp,sp,-60
   1b22c:	dfc00e15 	stw	ra,56(sp)
   1b230:	df000d15 	stw	fp,52(sp)
   1b234:	df000d04 	addi	fp,sp,52
   1b238:	e13ffe15 	stw	r4,-8(fp)
   1b23c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1b240:	e0bffe17 	ldw	r2,-8(fp)
   1b244:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1b248:	e0bff517 	ldw	r2,-44(fp)
   1b24c:	10800017 	ldw	r2,0(r2)
   1b250:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b254:	e0bff617 	ldw	r2,-40(fp)
   1b258:	10800104 	addi	r2,r2,4
   1b25c:	10800037 	ldwio	r2,0(r2)
   1b260:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1b264:	e0bff717 	ldw	r2,-36(fp)
   1b268:	1080c00c 	andi	r2,r2,768
   1b26c:	1000011e 	bne	r2,zero,1b274 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1b270:	00009206 	br	1b4bc <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1b274:	e0bff717 	ldw	r2,-36(fp)
   1b278:	1080400c 	andi	r2,r2,256
   1b27c:	10004726 	beq	r2,zero,1b39c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1b280:	00800074 	movhi	r2,1
   1b284:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b288:	e0bff517 	ldw	r2,-44(fp)
   1b28c:	10800d17 	ldw	r2,52(r2)
   1b290:	10800044 	addi	r2,r2,1
   1b294:	1081ffcc 	andi	r2,r2,2047
   1b298:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1b29c:	e0bff517 	ldw	r2,-44(fp)
   1b2a0:	10c00e17 	ldw	r3,56(r2)
   1b2a4:	e0bff817 	ldw	r2,-32(fp)
   1b2a8:	1880011e 	bne	r3,r2,1b2b0 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1b2ac:	00002906 	br	1b354 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1b2b0:	e0bff617 	ldw	r2,-40(fp)
   1b2b4:	10800037 	ldwio	r2,0(r2)
   1b2b8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1b2bc:	e0bff317 	ldw	r2,-52(fp)
   1b2c0:	10a0000c 	andi	r2,r2,32768
   1b2c4:	1000011e 	bne	r2,zero,1b2cc <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1b2c8:	00002206 	br	1b354 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1b2cc:	e0bff517 	ldw	r2,-44(fp)
   1b2d0:	10800d17 	ldw	r2,52(r2)
   1b2d4:	e0fff317 	ldw	r3,-52(fp)
   1b2d8:	1809883a 	mov	r4,r3
   1b2dc:	e0fff517 	ldw	r3,-44(fp)
   1b2e0:	1885883a 	add	r2,r3,r2
   1b2e4:	10801104 	addi	r2,r2,68
   1b2e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b2ec:	e0bff517 	ldw	r2,-44(fp)
   1b2f0:	10800d17 	ldw	r2,52(r2)
   1b2f4:	10800044 	addi	r2,r2,1
   1b2f8:	10c1ffcc 	andi	r3,r2,2047
   1b2fc:	e0bff517 	ldw	r2,-44(fp)
   1b300:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1b304:	e0bff517 	ldw	r2,-44(fp)
   1b308:	10800c17 	ldw	r2,48(r2)
   1b30c:	e0bff915 	stw	r2,-28(fp)
   1b310:	00800044 	movi	r2,1
   1b314:	e0bffa0d 	sth	r2,-24(fp)
   1b318:	00800044 	movi	r2,1
   1b31c:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b320:	008000b4 	movhi	r2,2
   1b324:	108f5844 	addi	r2,r2,15713
   1b328:	10800003 	ldbu	r2,0(r2)
   1b32c:	10803fcc 	andi	r2,r2,255
   1b330:	103fd526 	beq	r2,zero,1b288 <__alt_mem_Flash_flash_data+0xf401b288>
  {
    OSFlagPost (group, flags, opt, &err);
   1b334:	e17ffa0b 	ldhu	r5,-24(fp)
   1b338:	e0fffa83 	ldbu	r3,-22(fp)
   1b33c:	e0bffcc4 	addi	r2,fp,-13
   1b340:	e13ff917 	ldw	r4,-28(fp)
   1b344:	180d883a 	mov	r6,r3
   1b348:	100f883a 	mov	r7,r2
   1b34c:	00154100 	call	15410 <OSFlagPost>
      }
   1b350:	003fcd06 	br	1b288 <__alt_mem_Flash_flash_data+0xf401b288>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1b354:	e0bff317 	ldw	r2,-52(fp)
   1b358:	10bfffec 	andhi	r2,r2,65535
   1b35c:	10000f26 	beq	r2,zero,1b39c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b360:	e0bff517 	ldw	r2,-44(fp)
   1b364:	10c00817 	ldw	r3,32(r2)
   1b368:	00bfff84 	movi	r2,-2
   1b36c:	1886703a 	and	r3,r3,r2
   1b370:	e0bff517 	ldw	r2,-44(fp)
   1b374:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1b378:	e0bff617 	ldw	r2,-40(fp)
   1b37c:	10800104 	addi	r2,r2,4
   1b380:	1007883a 	mov	r3,r2
   1b384:	e0bff517 	ldw	r2,-44(fp)
   1b388:	10800817 	ldw	r2,32(r2)
   1b38c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b390:	e0bff617 	ldw	r2,-40(fp)
   1b394:	10800104 	addi	r2,r2,4
   1b398:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1b39c:	e0bff717 	ldw	r2,-36(fp)
   1b3a0:	1080800c 	andi	r2,r2,512
   1b3a4:	10004426 	beq	r2,zero,1b4b8 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1b3a8:	e0bff717 	ldw	r2,-36(fp)
   1b3ac:	1004d43a 	srli	r2,r2,16
   1b3b0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b3b4:	00002706 	br	1b454 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1b3b8:	e0bff617 	ldw	r2,-40(fp)
   1b3bc:	e0fff517 	ldw	r3,-44(fp)
   1b3c0:	18c01017 	ldw	r3,64(r3)
   1b3c4:	e13ff517 	ldw	r4,-44(fp)
   1b3c8:	20c7883a 	add	r3,r4,r3
   1b3cc:	18c21104 	addi	r3,r3,2116
   1b3d0:	18c00003 	ldbu	r3,0(r3)
   1b3d4:	18c03fcc 	andi	r3,r3,255
   1b3d8:	18c0201c 	xori	r3,r3,128
   1b3dc:	18ffe004 	addi	r3,r3,-128
   1b3e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b3e4:	e0bff517 	ldw	r2,-44(fp)
   1b3e8:	10801017 	ldw	r2,64(r2)
   1b3ec:	10800044 	addi	r2,r2,1
   1b3f0:	10c1ffcc 	andi	r3,r2,2047
   1b3f4:	e0bff517 	ldw	r2,-44(fp)
   1b3f8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1b3fc:	e0bff517 	ldw	r2,-44(fp)
   1b400:	10800c17 	ldw	r2,48(r2)
   1b404:	e0bffb15 	stw	r2,-20(fp)
   1b408:	00800084 	movi	r2,2
   1b40c:	e0bffc0d 	sth	r2,-16(fp)
   1b410:	00800044 	movi	r2,1
   1b414:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b418:	008000b4 	movhi	r2,2
   1b41c:	108f5844 	addi	r2,r2,15713
   1b420:	10800003 	ldbu	r2,0(r2)
   1b424:	10803fcc 	andi	r2,r2,255
   1b428:	10000726 	beq	r2,zero,1b448 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1b42c:	e17ffc0b 	ldhu	r5,-16(fp)
   1b430:	e0fffc83 	ldbu	r3,-14(fp)
   1b434:	e0bffd04 	addi	r2,fp,-12
   1b438:	e13ffb17 	ldw	r4,-20(fp)
   1b43c:	180d883a 	mov	r6,r3
   1b440:	100f883a 	mov	r7,r2
   1b444:	00154100 	call	15410 <OSFlagPost>

        space--;
   1b448:	e0bff417 	ldw	r2,-48(fp)
   1b44c:	10bfffc4 	addi	r2,r2,-1
   1b450:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b454:	e0bff417 	ldw	r2,-48(fp)
   1b458:	10000526 	beq	r2,zero,1b470 <altera_avalon_jtag_uart_irq+0x248>
   1b45c:	e0bff517 	ldw	r2,-44(fp)
   1b460:	10c01017 	ldw	r3,64(r2)
   1b464:	e0bff517 	ldw	r2,-44(fp)
   1b468:	10800f17 	ldw	r2,60(r2)
   1b46c:	18bfd21e 	bne	r3,r2,1b3b8 <__alt_mem_Flash_flash_data+0xf401b3b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b470:	e0bff417 	ldw	r2,-48(fp)
   1b474:	10001026 	beq	r2,zero,1b4b8 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b478:	e0bff517 	ldw	r2,-44(fp)
   1b47c:	10c00817 	ldw	r3,32(r2)
   1b480:	00bfff44 	movi	r2,-3
   1b484:	1886703a 	and	r3,r3,r2
   1b488:	e0bff517 	ldw	r2,-44(fp)
   1b48c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b490:	e0bff517 	ldw	r2,-44(fp)
   1b494:	10800017 	ldw	r2,0(r2)
   1b498:	10800104 	addi	r2,r2,4
   1b49c:	1007883a 	mov	r3,r2
   1b4a0:	e0bff517 	ldw	r2,-44(fp)
   1b4a4:	10800817 	ldw	r2,32(r2)
   1b4a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b4ac:	e0bff617 	ldw	r2,-40(fp)
   1b4b0:	10800104 	addi	r2,r2,4
   1b4b4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b4b8:	003f6606 	br	1b254 <__alt_mem_Flash_flash_data+0xf401b254>
}
   1b4bc:	e037883a 	mov	sp,fp
   1b4c0:	dfc00117 	ldw	ra,4(sp)
   1b4c4:	df000017 	ldw	fp,0(sp)
   1b4c8:	dec00204 	addi	sp,sp,8
   1b4cc:	f800283a 	ret

0001b4d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1b4d0:	defff904 	addi	sp,sp,-28
   1b4d4:	dfc00615 	stw	ra,24(sp)
   1b4d8:	df000515 	stw	fp,20(sp)
   1b4dc:	df000504 	addi	fp,sp,20
   1b4e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1b4e4:	e0bfff17 	ldw	r2,-4(fp)
   1b4e8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b4ec:	e0bffb17 	ldw	r2,-20(fp)
   1b4f0:	10800017 	ldw	r2,0(r2)
   1b4f4:	10800104 	addi	r2,r2,4
   1b4f8:	10800037 	ldwio	r2,0(r2)
   1b4fc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b500:	e0bffc17 	ldw	r2,-16(fp)
   1b504:	1081000c 	andi	r2,r2,1024
   1b508:	10000b26 	beq	r2,zero,1b538 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b50c:	e0bffb17 	ldw	r2,-20(fp)
   1b510:	10800017 	ldw	r2,0(r2)
   1b514:	10800104 	addi	r2,r2,4
   1b518:	1007883a 	mov	r3,r2
   1b51c:	e0bffb17 	ldw	r2,-20(fp)
   1b520:	10800817 	ldw	r2,32(r2)
   1b524:	10810014 	ori	r2,r2,1024
   1b528:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1b52c:	e0bffb17 	ldw	r2,-20(fp)
   1b530:	10000915 	stw	zero,36(r2)
   1b534:	00002206 	br	1b5c0 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b538:	e0bffb17 	ldw	r2,-20(fp)
   1b53c:	10c00917 	ldw	r3,36(r2)
   1b540:	00a00034 	movhi	r2,32768
   1b544:	10bfff04 	addi	r2,r2,-4
   1b548:	10c01d36 	bltu	r2,r3,1b5c0 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1b54c:	e0bffb17 	ldw	r2,-20(fp)
   1b550:	10800917 	ldw	r2,36(r2)
   1b554:	10c00044 	addi	r3,r2,1
   1b558:	e0bffb17 	ldw	r2,-20(fp)
   1b55c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1b560:	e0bffb17 	ldw	r2,-20(fp)
   1b564:	10c00917 	ldw	r3,36(r2)
   1b568:	e0bffb17 	ldw	r2,-20(fp)
   1b56c:	10800117 	ldw	r2,4(r2)
   1b570:	18801336 	bltu	r3,r2,1b5c0 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1b574:	e0bffb17 	ldw	r2,-20(fp)
   1b578:	10800c17 	ldw	r2,48(r2)
   1b57c:	e0bffd15 	stw	r2,-12(fp)
   1b580:	00800104 	movi	r2,4
   1b584:	e0bffe0d 	sth	r2,-8(fp)
   1b588:	00800044 	movi	r2,1
   1b58c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b590:	008000b4 	movhi	r2,2
   1b594:	108f5844 	addi	r2,r2,15713
   1b598:	10800003 	ldbu	r2,0(r2)
   1b59c:	10803fcc 	andi	r2,r2,255
   1b5a0:	10000726 	beq	r2,zero,1b5c0 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1b5a4:	e17ffe0b 	ldhu	r5,-8(fp)
   1b5a8:	e0fffe83 	ldbu	r3,-6(fp)
   1b5ac:	e0bffec4 	addi	r2,fp,-5
   1b5b0:	e13ffd17 	ldw	r4,-12(fp)
   1b5b4:	180d883a 	mov	r6,r3
   1b5b8:	100f883a 	mov	r7,r2
   1b5bc:	00154100 	call	15410 <OSFlagPost>
   1b5c0:	008000b4 	movhi	r2,2
   1b5c4:	108f6e04 	addi	r2,r2,15800
   1b5c8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1b5cc:	e037883a 	mov	sp,fp
   1b5d0:	dfc00117 	ldw	ra,4(sp)
   1b5d4:	df000017 	ldw	fp,0(sp)
   1b5d8:	dec00204 	addi	sp,sp,8
   1b5dc:	f800283a 	ret

0001b5e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b5e0:	defffd04 	addi	sp,sp,-12
   1b5e4:	df000215 	stw	fp,8(sp)
   1b5e8:	df000204 	addi	fp,sp,8
   1b5ec:	e13ffe15 	stw	r4,-8(fp)
   1b5f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b5f4:	00000506 	br	1b60c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1b5f8:	e0bfff17 	ldw	r2,-4(fp)
   1b5fc:	1090000c 	andi	r2,r2,16384
   1b600:	10000226 	beq	r2,zero,1b60c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1b604:	00bffd44 	movi	r2,-11
   1b608:	00000b06 	br	1b638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b60c:	e0bffe17 	ldw	r2,-8(fp)
   1b610:	10c01017 	ldw	r3,64(r2)
   1b614:	e0bffe17 	ldw	r2,-8(fp)
   1b618:	10800f17 	ldw	r2,60(r2)
   1b61c:	18800526 	beq	r3,r2,1b634 <altera_avalon_jtag_uart_close+0x54>
   1b620:	e0bffe17 	ldw	r2,-8(fp)
   1b624:	10c00917 	ldw	r3,36(r2)
   1b628:	e0bffe17 	ldw	r2,-8(fp)
   1b62c:	10800117 	ldw	r2,4(r2)
   1b630:	18bff136 	bltu	r3,r2,1b5f8 <__alt_mem_Flash_flash_data+0xf401b5f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b634:	0005883a 	mov	r2,zero
}
   1b638:	e037883a 	mov	sp,fp
   1b63c:	df000017 	ldw	fp,0(sp)
   1b640:	dec00104 	addi	sp,sp,4
   1b644:	f800283a 	ret

0001b648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b648:	defffa04 	addi	sp,sp,-24
   1b64c:	df000515 	stw	fp,20(sp)
   1b650:	df000504 	addi	fp,sp,20
   1b654:	e13ffd15 	stw	r4,-12(fp)
   1b658:	e17ffe15 	stw	r5,-8(fp)
   1b65c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1b660:	00bff9c4 	movi	r2,-25
   1b664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1b668:	e0bffe17 	ldw	r2,-8(fp)
   1b66c:	10da8060 	cmpeqi	r3,r2,27137
   1b670:	1800031e 	bne	r3,zero,1b680 <altera_avalon_jtag_uart_ioctl+0x38>
   1b674:	109a80a0 	cmpeqi	r2,r2,27138
   1b678:	1000191e 	bne	r2,zero,1b6e0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1b67c:	00002806 	br	1b720 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b680:	e0bffd17 	ldw	r2,-12(fp)
   1b684:	10c00117 	ldw	r3,4(r2)
   1b688:	00a00034 	movhi	r2,32768
   1b68c:	10bfffc4 	addi	r2,r2,-1
   1b690:	18801226 	beq	r3,r2,1b6dc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1b694:	e0bfff17 	ldw	r2,-4(fp)
   1b698:	10800017 	ldw	r2,0(r2)
   1b69c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b6a0:	e0bffc17 	ldw	r2,-16(fp)
   1b6a4:	10800090 	cmplti	r2,r2,2
   1b6a8:	1000061e 	bne	r2,zero,1b6c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b6ac:	e0fffc17 	ldw	r3,-16(fp)
   1b6b0:	00a00034 	movhi	r2,32768
   1b6b4:	10bfffc4 	addi	r2,r2,-1
   1b6b8:	18800226 	beq	r3,r2,1b6c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b6bc:	e0bffc17 	ldw	r2,-16(fp)
   1b6c0:	00000206 	br	1b6cc <altera_avalon_jtag_uart_ioctl+0x84>
   1b6c4:	00a00034 	movhi	r2,32768
   1b6c8:	10bfff84 	addi	r2,r2,-2
   1b6cc:	e0fffd17 	ldw	r3,-12(fp)
   1b6d0:	18800115 	stw	r2,4(r3)
      rc = 0;
   1b6d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b6d8:	00001106 	br	1b720 <altera_avalon_jtag_uart_ioctl+0xd8>
   1b6dc:	00001006 	br	1b720 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b6e0:	e0bffd17 	ldw	r2,-12(fp)
   1b6e4:	10c00117 	ldw	r3,4(r2)
   1b6e8:	00a00034 	movhi	r2,32768
   1b6ec:	10bfffc4 	addi	r2,r2,-1
   1b6f0:	18800a26 	beq	r3,r2,1b71c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b6f4:	e0bffd17 	ldw	r2,-12(fp)
   1b6f8:	10c00917 	ldw	r3,36(r2)
   1b6fc:	e0bffd17 	ldw	r2,-12(fp)
   1b700:	10800117 	ldw	r2,4(r2)
   1b704:	1885803a 	cmpltu	r2,r3,r2
   1b708:	10c03fcc 	andi	r3,r2,255
   1b70c:	e0bfff17 	ldw	r2,-4(fp)
   1b710:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1b714:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b718:	00000006 	br	1b71c <altera_avalon_jtag_uart_ioctl+0xd4>
   1b71c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1b720:	e0bffb17 	ldw	r2,-20(fp)
}
   1b724:	e037883a 	mov	sp,fp
   1b728:	df000017 	ldw	fp,0(sp)
   1b72c:	dec00104 	addi	sp,sp,4
   1b730:	f800283a 	ret

0001b734 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b734:	deffec04 	addi	sp,sp,-80
   1b738:	dfc01315 	stw	ra,76(sp)
   1b73c:	df001215 	stw	fp,72(sp)
   1b740:	df001204 	addi	fp,sp,72
   1b744:	e13ffc15 	stw	r4,-16(fp)
   1b748:	e17ffd15 	stw	r5,-12(fp)
   1b74c:	e1bffe15 	stw	r6,-8(fp)
   1b750:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1b754:	e0bffd17 	ldw	r2,-12(fp)
   1b758:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1b75c:	e0bffc17 	ldw	r2,-16(fp)
   1b760:	10800a17 	ldw	r2,40(r2)
   1b764:	e0bff415 	stw	r2,-48(fp)
   1b768:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1b76c:	e0fff50b 	ldhu	r3,-44(fp)
   1b770:	e0bffb04 	addi	r2,fp,-20
   1b774:	e13ff417 	ldw	r4,-48(fp)
   1b778:	180b883a 	mov	r5,r3
   1b77c:	100d883a 	mov	r6,r2
   1b780:	00185e80 	call	185e8 <OSSemPend>

  while (space > 0)
   1b784:	00006506 	br	1b91c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b788:	e0bffc17 	ldw	r2,-16(fp)
   1b78c:	10800d17 	ldw	r2,52(r2)
   1b790:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1b794:	e0bffc17 	ldw	r2,-16(fp)
   1b798:	10800e17 	ldw	r2,56(r2)
   1b79c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1b7a0:	e0fff117 	ldw	r3,-60(fp)
   1b7a4:	e0bff217 	ldw	r2,-56(fp)
   1b7a8:	18800536 	bltu	r3,r2,1b7c0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1b7ac:	e0fff117 	ldw	r3,-60(fp)
   1b7b0:	e0bff217 	ldw	r2,-56(fp)
   1b7b4:	1885c83a 	sub	r2,r3,r2
   1b7b8:	e0bff015 	stw	r2,-64(fp)
   1b7bc:	00000406 	br	1b7d0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b7c0:	00c20004 	movi	r3,2048
   1b7c4:	e0bff217 	ldw	r2,-56(fp)
   1b7c8:	1885c83a 	sub	r2,r3,r2
   1b7cc:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1b7d0:	e0bff017 	ldw	r2,-64(fp)
   1b7d4:	1000011e 	bne	r2,zero,1b7dc <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1b7d8:	00001d06 	br	1b850 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1b7dc:	e0fffe17 	ldw	r3,-8(fp)
   1b7e0:	e0bff017 	ldw	r2,-64(fp)
   1b7e4:	1880022e 	bgeu	r3,r2,1b7f0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1b7e8:	e0bffe17 	ldw	r2,-8(fp)
   1b7ec:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b7f0:	e0bff217 	ldw	r2,-56(fp)
   1b7f4:	10801104 	addi	r2,r2,68
   1b7f8:	e0fffc17 	ldw	r3,-16(fp)
   1b7fc:	1885883a 	add	r2,r3,r2
   1b800:	e13fef17 	ldw	r4,-68(fp)
   1b804:	100b883a 	mov	r5,r2
   1b808:	e1bff017 	ldw	r6,-64(fp)
   1b80c:	0009a740 	call	9a74 <memcpy>
      ptr   += n;
   1b810:	e0ffef17 	ldw	r3,-68(fp)
   1b814:	e0bff017 	ldw	r2,-64(fp)
   1b818:	1885883a 	add	r2,r3,r2
   1b81c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1b820:	e0fffe17 	ldw	r3,-8(fp)
   1b824:	e0bff017 	ldw	r2,-64(fp)
   1b828:	1885c83a 	sub	r2,r3,r2
   1b82c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b830:	e0fff217 	ldw	r3,-56(fp)
   1b834:	e0bff017 	ldw	r2,-64(fp)
   1b838:	1885883a 	add	r2,r3,r2
   1b83c:	10c1ffcc 	andi	r3,r2,2047
   1b840:	e0bffc17 	ldw	r2,-16(fp)
   1b844:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1b848:	e0bffe17 	ldw	r2,-8(fp)
   1b84c:	00bfce16 	blt	zero,r2,1b788 <__alt_mem_Flash_flash_data+0xf401b788>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b850:	e0ffef17 	ldw	r3,-68(fp)
   1b854:	e0bffd17 	ldw	r2,-12(fp)
   1b858:	18800126 	beq	r3,r2,1b860 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1b85c:	00003106 	br	1b924 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b860:	e0bfff17 	ldw	r2,-4(fp)
   1b864:	1090000c 	andi	r2,r2,16384
   1b868:	10000126 	beq	r2,zero,1b870 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1b86c:	00002d06 	br	1b924 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1b870:	008000b4 	movhi	r2,2
   1b874:	108f5844 	addi	r2,r2,15713
   1b878:	10800003 	ldbu	r2,0(r2)
   1b87c:	10803fcc 	andi	r2,r2,255
   1b880:	10800058 	cmpnei	r2,r2,1
   1b884:	1000161e 	bne	r2,zero,1b8e0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1b888:	e0bffc17 	ldw	r2,-16(fp)
   1b88c:	10800c17 	ldw	r2,48(r2)
   1b890:	e0bff615 	stw	r2,-40(fp)
   1b894:	00800144 	movi	r2,5
   1b898:	e0bff70d 	sth	r2,-36(fp)
   1b89c:	00bfe0c4 	movi	r2,-125
   1b8a0:	e0bff785 	stb	r2,-34(fp)
   1b8a4:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1b8a8:	008000b4 	movhi	r2,2
   1b8ac:	108f5844 	addi	r2,r2,15713
   1b8b0:	10800003 	ldbu	r2,0(r2)
   1b8b4:	10803fcc 	andi	r2,r2,255
   1b8b8:	10001326 	beq	r2,zero,1b908 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1b8bc:	e17ff70b 	ldhu	r5,-36(fp)
   1b8c0:	e1bff783 	ldbu	r6,-34(fp)
   1b8c4:	e0fff80b 	ldhu	r3,-32(fp)
   1b8c8:	e0bffb44 	addi	r2,fp,-19
   1b8cc:	d8800015 	stw	r2,0(sp)
   1b8d0:	e13ff617 	ldw	r4,-40(fp)
   1b8d4:	180f883a 	mov	r7,r3
   1b8d8:	0014db80 	call	14db8 <OSFlagPend>
   1b8dc:	00000a06 	br	1b908 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b8e0:	0001883a 	nop
   1b8e4:	e0bffc17 	ldw	r2,-16(fp)
   1b8e8:	10c00d17 	ldw	r3,52(r2)
   1b8ec:	e0bff117 	ldw	r2,-60(fp)
   1b8f0:	1880051e 	bne	r3,r2,1b908 <altera_avalon_jtag_uart_read+0x1d4>
   1b8f4:	e0bffc17 	ldw	r2,-16(fp)
   1b8f8:	10c00917 	ldw	r3,36(r2)
   1b8fc:	e0bffc17 	ldw	r2,-16(fp)
   1b900:	10800117 	ldw	r2,4(r2)
   1b904:	18bff736 	bltu	r3,r2,1b8e4 <__alt_mem_Flash_flash_data+0xf401b8e4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b908:	e0bffc17 	ldw	r2,-16(fp)
   1b90c:	10c00d17 	ldw	r3,52(r2)
   1b910:	e0bff117 	ldw	r2,-60(fp)
   1b914:	1880011e 	bne	r3,r2,1b91c <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1b918:	00000206 	br	1b924 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b91c:	e0bffe17 	ldw	r2,-8(fp)
   1b920:	00bf9916 	blt	zero,r2,1b788 <__alt_mem_Flash_flash_data+0xf401b788>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1b924:	e0bffc17 	ldw	r2,-16(fp)
   1b928:	10800a17 	ldw	r2,40(r2)
   1b92c:	1009883a 	mov	r4,r2
   1b930:	00189bc0 	call	189bc <OSSemPost>

  if (ptr != buffer)
   1b934:	e0ffef17 	ldw	r3,-68(fp)
   1b938:	e0bffd17 	ldw	r2,-12(fp)
   1b93c:	18801826 	beq	r3,r2,1b9a0 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b940:	0005303a 	rdctl	r2,status
   1b944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b948:	e0fff917 	ldw	r3,-28(fp)
   1b94c:	00bfff84 	movi	r2,-2
   1b950:	1884703a 	and	r2,r3,r2
   1b954:	1001703a 	wrctl	status,r2
  
  return context;
   1b958:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b95c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b960:	e0bffc17 	ldw	r2,-16(fp)
   1b964:	10800817 	ldw	r2,32(r2)
   1b968:	10c00054 	ori	r3,r2,1
   1b96c:	e0bffc17 	ldw	r2,-16(fp)
   1b970:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b974:	e0bffc17 	ldw	r2,-16(fp)
   1b978:	10800017 	ldw	r2,0(r2)
   1b97c:	10800104 	addi	r2,r2,4
   1b980:	1007883a 	mov	r3,r2
   1b984:	e0bffc17 	ldw	r2,-16(fp)
   1b988:	10800817 	ldw	r2,32(r2)
   1b98c:	18800035 	stwio	r2,0(r3)
   1b990:	e0bff317 	ldw	r2,-52(fp)
   1b994:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b998:	e0bffa17 	ldw	r2,-24(fp)
   1b99c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b9a0:	e0ffef17 	ldw	r3,-68(fp)
   1b9a4:	e0bffd17 	ldw	r2,-12(fp)
   1b9a8:	18800426 	beq	r3,r2,1b9bc <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1b9ac:	e0ffef17 	ldw	r3,-68(fp)
   1b9b0:	e0bffd17 	ldw	r2,-12(fp)
   1b9b4:	1885c83a 	sub	r2,r3,r2
   1b9b8:	00000606 	br	1b9d4 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1b9bc:	e0bfff17 	ldw	r2,-4(fp)
   1b9c0:	1090000c 	andi	r2,r2,16384
   1b9c4:	10000226 	beq	r2,zero,1b9d0 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1b9c8:	00bffd44 	movi	r2,-11
   1b9cc:	00000106 	br	1b9d4 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1b9d0:	00bffec4 	movi	r2,-5
}
   1b9d4:	e037883a 	mov	sp,fp
   1b9d8:	dfc00117 	ldw	ra,4(sp)
   1b9dc:	df000017 	ldw	fp,0(sp)
   1b9e0:	dec00204 	addi	sp,sp,8
   1b9e4:	f800283a 	ret

0001b9e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b9e8:	deffed04 	addi	sp,sp,-76
   1b9ec:	dfc01215 	stw	ra,72(sp)
   1b9f0:	df001115 	stw	fp,68(sp)
   1b9f4:	df001104 	addi	fp,sp,68
   1b9f8:	e13ffc15 	stw	r4,-16(fp)
   1b9fc:	e17ffd15 	stw	r5,-12(fp)
   1ba00:	e1bffe15 	stw	r6,-8(fp)
   1ba04:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1ba08:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1ba0c:	e0bffd17 	ldw	r2,-12(fp)
   1ba10:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1ba14:	e0bffc17 	ldw	r2,-16(fp)
   1ba18:	10800b17 	ldw	r2,44(r2)
   1ba1c:	e0bff515 	stw	r2,-44(fp)
   1ba20:	e03ff60d 	sth	zero,-40(fp)
   1ba24:	e0fff60b 	ldhu	r3,-40(fp)
   1ba28:	e0bffbc4 	addi	r2,fp,-17
   1ba2c:	e13ff517 	ldw	r4,-44(fp)
   1ba30:	180b883a 	mov	r5,r3
   1ba34:	100d883a 	mov	r6,r2
   1ba38:	00185e80 	call	185e8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ba3c:	00003806 	br	1bb20 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1ba40:	e0bffc17 	ldw	r2,-16(fp)
   1ba44:	10800f17 	ldw	r2,60(r2)
   1ba48:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1ba4c:	e0bffc17 	ldw	r2,-16(fp)
   1ba50:	10801017 	ldw	r2,64(r2)
   1ba54:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1ba58:	e0fff317 	ldw	r3,-52(fp)
   1ba5c:	e0bff017 	ldw	r2,-64(fp)
   1ba60:	1880062e 	bgeu	r3,r2,1ba7c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1ba64:	e0fff017 	ldw	r3,-64(fp)
   1ba68:	e0bff317 	ldw	r2,-52(fp)
   1ba6c:	1885c83a 	sub	r2,r3,r2
   1ba70:	10bfffc4 	addi	r2,r2,-1
   1ba74:	e0bff115 	stw	r2,-60(fp)
   1ba78:	00000b06 	br	1baa8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1ba7c:	e0bff017 	ldw	r2,-64(fp)
   1ba80:	10000526 	beq	r2,zero,1ba98 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1ba84:	00c20004 	movi	r3,2048
   1ba88:	e0bff317 	ldw	r2,-52(fp)
   1ba8c:	1885c83a 	sub	r2,r3,r2
   1ba90:	e0bff115 	stw	r2,-60(fp)
   1ba94:	00000406 	br	1baa8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1ba98:	00c1ffc4 	movi	r3,2047
   1ba9c:	e0bff317 	ldw	r2,-52(fp)
   1baa0:	1885c83a 	sub	r2,r3,r2
   1baa4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1baa8:	e0bff117 	ldw	r2,-60(fp)
   1baac:	1000011e 	bne	r2,zero,1bab4 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1bab0:	00001d06 	br	1bb28 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1bab4:	e0fffe17 	ldw	r3,-8(fp)
   1bab8:	e0bff117 	ldw	r2,-60(fp)
   1babc:	1880022e 	bgeu	r3,r2,1bac8 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1bac0:	e0bffe17 	ldw	r2,-8(fp)
   1bac4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1bac8:	e0bff317 	ldw	r2,-52(fp)
   1bacc:	10821104 	addi	r2,r2,2116
   1bad0:	e0fffc17 	ldw	r3,-16(fp)
   1bad4:	1885883a 	add	r2,r3,r2
   1bad8:	1009883a 	mov	r4,r2
   1badc:	e17ffd17 	ldw	r5,-12(fp)
   1bae0:	e1bff117 	ldw	r6,-60(fp)
   1bae4:	0009a740 	call	9a74 <memcpy>
      ptr   += n;
   1bae8:	e0fffd17 	ldw	r3,-12(fp)
   1baec:	e0bff117 	ldw	r2,-60(fp)
   1baf0:	1885883a 	add	r2,r3,r2
   1baf4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1baf8:	e0fffe17 	ldw	r3,-8(fp)
   1bafc:	e0bff117 	ldw	r2,-60(fp)
   1bb00:	1885c83a 	sub	r2,r3,r2
   1bb04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bb08:	e0fff317 	ldw	r3,-52(fp)
   1bb0c:	e0bff117 	ldw	r2,-60(fp)
   1bb10:	1885883a 	add	r2,r3,r2
   1bb14:	10c1ffcc 	andi	r3,r2,2047
   1bb18:	e0bffc17 	ldw	r2,-16(fp)
   1bb1c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1bb20:	e0bffe17 	ldw	r2,-8(fp)
   1bb24:	00bfc616 	blt	zero,r2,1ba40 <__alt_mem_Flash_flash_data+0xf401ba40>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb28:	0005303a 	rdctl	r2,status
   1bb2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb30:	e0fff717 	ldw	r3,-36(fp)
   1bb34:	00bfff84 	movi	r2,-2
   1bb38:	1884703a 	and	r2,r3,r2
   1bb3c:	1001703a 	wrctl	status,r2
  
  return context;
   1bb40:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1bb44:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1bb48:	e0bffc17 	ldw	r2,-16(fp)
   1bb4c:	10800817 	ldw	r2,32(r2)
   1bb50:	10c00094 	ori	r3,r2,2
   1bb54:	e0bffc17 	ldw	r2,-16(fp)
   1bb58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1bb5c:	e0bffc17 	ldw	r2,-16(fp)
   1bb60:	10800017 	ldw	r2,0(r2)
   1bb64:	10800104 	addi	r2,r2,4
   1bb68:	1007883a 	mov	r3,r2
   1bb6c:	e0bffc17 	ldw	r2,-16(fp)
   1bb70:	10800817 	ldw	r2,32(r2)
   1bb74:	18800035 	stwio	r2,0(r3)
   1bb78:	e0bff417 	ldw	r2,-48(fp)
   1bb7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb80:	e0bff817 	ldw	r2,-32(fp)
   1bb84:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1bb88:	e0bffe17 	ldw	r2,-8(fp)
   1bb8c:	00802e0e 	bge	zero,r2,1bc48 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1bb90:	e0bfff17 	ldw	r2,-4(fp)
   1bb94:	1090000c 	andi	r2,r2,16384
   1bb98:	10000126 	beq	r2,zero,1bba0 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1bb9c:	00002c06 	br	1bc50 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1bba0:	008000b4 	movhi	r2,2
   1bba4:	108f5844 	addi	r2,r2,15713
   1bba8:	10800003 	ldbu	r2,0(r2)
   1bbac:	10803fcc 	andi	r2,r2,255
   1bbb0:	10800058 	cmpnei	r2,r2,1
   1bbb4:	1000161e 	bne	r2,zero,1bc10 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1bbb8:	e0bffc17 	ldw	r2,-16(fp)
   1bbbc:	10800c17 	ldw	r2,48(r2)
   1bbc0:	e0bff915 	stw	r2,-28(fp)
   1bbc4:	00800184 	movi	r2,6
   1bbc8:	e0bffa0d 	sth	r2,-24(fp)
   1bbcc:	00bfe0c4 	movi	r2,-125
   1bbd0:	e0bffa85 	stb	r2,-22(fp)
   1bbd4:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1bbd8:	008000b4 	movhi	r2,2
   1bbdc:	108f5844 	addi	r2,r2,15713
   1bbe0:	10800003 	ldbu	r2,0(r2)
   1bbe4:	10803fcc 	andi	r2,r2,255
   1bbe8:	10001326 	beq	r2,zero,1bc38 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1bbec:	e17ffa0b 	ldhu	r5,-24(fp)
   1bbf0:	e1bffa83 	ldbu	r6,-22(fp)
   1bbf4:	e0fffb0b 	ldhu	r3,-20(fp)
   1bbf8:	e0bffb84 	addi	r2,fp,-18
   1bbfc:	d8800015 	stw	r2,0(sp)
   1bc00:	e13ff917 	ldw	r4,-28(fp)
   1bc04:	180f883a 	mov	r7,r3
   1bc08:	0014db80 	call	14db8 <OSFlagPend>
   1bc0c:	00000a06 	br	1bc38 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1bc10:	0001883a 	nop
   1bc14:	e0bffc17 	ldw	r2,-16(fp)
   1bc18:	10c01017 	ldw	r3,64(r2)
   1bc1c:	e0bff017 	ldw	r2,-64(fp)
   1bc20:	1880051e 	bne	r3,r2,1bc38 <altera_avalon_jtag_uart_write+0x250>
   1bc24:	e0bffc17 	ldw	r2,-16(fp)
   1bc28:	10c00917 	ldw	r3,36(r2)
   1bc2c:	e0bffc17 	ldw	r2,-16(fp)
   1bc30:	10800117 	ldw	r2,4(r2)
   1bc34:	18bff736 	bltu	r3,r2,1bc14 <__alt_mem_Flash_flash_data+0xf401bc14>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1bc38:	e0bffc17 	ldw	r2,-16(fp)
   1bc3c:	10800917 	ldw	r2,36(r2)
   1bc40:	10000126 	beq	r2,zero,1bc48 <altera_avalon_jtag_uart_write+0x260>
         break;
   1bc44:	00000206 	br	1bc50 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1bc48:	e0bffe17 	ldw	r2,-8(fp)
   1bc4c:	00bf7b16 	blt	zero,r2,1ba3c <__alt_mem_Flash_flash_data+0xf401ba3c>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1bc50:	e0bffc17 	ldw	r2,-16(fp)
   1bc54:	10800b17 	ldw	r2,44(r2)
   1bc58:	1009883a 	mov	r4,r2
   1bc5c:	00189bc0 	call	189bc <OSSemPost>

  if (ptr != start)
   1bc60:	e0fffd17 	ldw	r3,-12(fp)
   1bc64:	e0bff217 	ldw	r2,-56(fp)
   1bc68:	18800426 	beq	r3,r2,1bc7c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1bc6c:	e0fffd17 	ldw	r3,-12(fp)
   1bc70:	e0bff217 	ldw	r2,-56(fp)
   1bc74:	1885c83a 	sub	r2,r3,r2
   1bc78:	00000606 	br	1bc94 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1bc7c:	e0bfff17 	ldw	r2,-4(fp)
   1bc80:	1090000c 	andi	r2,r2,16384
   1bc84:	10000226 	beq	r2,zero,1bc90 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1bc88:	00bffd44 	movi	r2,-11
   1bc8c:	00000106 	br	1bc94 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1bc90:	00bffec4 	movi	r2,-5
}
   1bc94:	e037883a 	mov	sp,fp
   1bc98:	dfc00117 	ldw	ra,4(sp)
   1bc9c:	df000017 	ldw	fp,0(sp)
   1bca0:	dec00204 	addi	sp,sp,8
   1bca4:	f800283a 	ret

0001bca8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1bca8:	defff904 	addi	sp,sp,-28
   1bcac:	dfc00615 	stw	ra,24(sp)
   1bcb0:	df000515 	stw	fp,20(sp)
   1bcb4:	df000504 	addi	fp,sp,20
   1bcb8:	e13ffe15 	stw	r4,-8(fp)
   1bcbc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1bcc0:	0007883a 	mov	r3,zero
   1bcc4:	e0bffe17 	ldw	r2,-8(fp)
   1bcc8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1bccc:	e0bffe17 	ldw	r2,-8(fp)
   1bcd0:	10800104 	addi	r2,r2,4
   1bcd4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bcd8:	0005303a 	rdctl	r2,status
   1bcdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bce0:	e0fffc17 	ldw	r3,-16(fp)
   1bce4:	00bfff84 	movi	r2,-2
   1bce8:	1884703a 	and	r2,r3,r2
   1bcec:	1001703a 	wrctl	status,r2
  
  return context;
   1bcf0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1bcf4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1bcf8:	001e2c00 	call	1e2c0 <alt_tick>
   1bcfc:	e0bffb17 	ldw	r2,-20(fp)
   1bd00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd04:	e0bffd17 	ldw	r2,-12(fp)
   1bd08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1bd0c:	e037883a 	mov	sp,fp
   1bd10:	dfc00117 	ldw	ra,4(sp)
   1bd14:	df000017 	ldw	fp,0(sp)
   1bd18:	dec00204 	addi	sp,sp,8
   1bd1c:	f800283a 	ret

0001bd20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1bd20:	defff904 	addi	sp,sp,-28
   1bd24:	dfc00615 	stw	ra,24(sp)
   1bd28:	df000515 	stw	fp,20(sp)
   1bd2c:	df000504 	addi	fp,sp,20
   1bd30:	e13ffc15 	stw	r4,-16(fp)
   1bd34:	e17ffd15 	stw	r5,-12(fp)
   1bd38:	e1bffe15 	stw	r6,-8(fp)
   1bd3c:	e1ffff15 	stw	r7,-4(fp)
   1bd40:	e0bfff17 	ldw	r2,-4(fp)
   1bd44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1bd48:	008000b4 	movhi	r2,2
   1bd4c:	108f6e04 	addi	r2,r2,15800
   1bd50:	10800017 	ldw	r2,0(r2)
   1bd54:	1000041e 	bne	r2,zero,1bd68 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1bd58:	008000b4 	movhi	r2,2
   1bd5c:	108f6e04 	addi	r2,r2,15800
   1bd60:	e0fffb17 	ldw	r3,-20(fp)
   1bd64:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1bd68:	e0bffc17 	ldw	r2,-16(fp)
   1bd6c:	10800104 	addi	r2,r2,4
   1bd70:	00c001c4 	movi	r3,7
   1bd74:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1bd78:	e13ffe17 	ldw	r4,-8(fp)
   1bd7c:	e17ffc17 	ldw	r5,-16(fp)
   1bd80:	018000b4 	movhi	r6,2
   1bd84:	31af2a04 	addi	r6,r6,-17240
   1bd88:	001de040 	call	1de04 <alt_irq_register>
#endif  
}
   1bd8c:	e037883a 	mov	sp,fp
   1bd90:	dfc00117 	ldw	ra,4(sp)
   1bd94:	df000017 	ldw	fp,0(sp)
   1bd98:	dec00204 	addi	sp,sp,8
   1bd9c:	f800283a 	ret

0001bda0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1bda0:	defffc04 	addi	sp,sp,-16
   1bda4:	df000315 	stw	fp,12(sp)
   1bda8:	df000304 	addi	fp,sp,12
   1bdac:	e13ffe15 	stw	r4,-8(fp)
   1bdb0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1bdb4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1bdb8:	e0bfff17 	ldw	r2,-4(fp)
   1bdbc:	1000061e 	bne	r2,zero,1bdd8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1bdc0:	e0bffe17 	ldw	r2,-8(fp)
   1bdc4:	1007883a 	mov	r3,r2
   1bdc8:	e0bffd03 	ldbu	r2,-12(fp)
   1bdcc:	1884b03a 	or	r2,r3,r2
   1bdd0:	e0bffd05 	stb	r2,-12(fp)
   1bdd4:	00000806 	br	1bdf8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1bdd8:	e0bffe17 	ldw	r2,-8(fp)
   1bddc:	1007883a 	mov	r3,r2
   1bde0:	e0bffd03 	ldbu	r2,-12(fp)
   1bde4:	1884b03a 	or	r2,r3,r2
   1bde8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1bdec:	e0bffd03 	ldbu	r2,-12(fp)
   1bdf0:	10801014 	ori	r2,r2,64
   1bdf4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1bdf8:	e0fffd03 	ldbu	r3,-12(fp)
   1bdfc:	00bfe004 	movi	r2,-128
   1be00:	1884b03a 	or	r2,r3,r2
}
   1be04:	e037883a 	mov	sp,fp
   1be08:	df000017 	ldw	fp,0(sp)
   1be0c:	dec00104 	addi	sp,sp,4
   1be10:	f800283a 	ret

0001be14 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1be14:	defffd04 	addi	sp,sp,-12
   1be18:	df000215 	stw	fp,8(sp)
   1be1c:	df000204 	addi	fp,sp,8
   1be20:	e13ffe15 	stw	r4,-8(fp)
   1be24:	2805883a 	mov	r2,r5
   1be28:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1be2c:	e0bffe17 	ldw	r2,-8(fp)
   1be30:	10800a17 	ldw	r2,40(r2)
   1be34:	1007883a 	mov	r3,r2
   1be38:	e0bfff03 	ldbu	r2,-4(fp)
   1be3c:	18800025 	stbio	r2,0(r3)
}
   1be40:	e037883a 	mov	sp,fp
   1be44:	df000017 	ldw	fp,0(sp)
   1be48:	dec00104 	addi	sp,sp,4
   1be4c:	f800283a 	ret

0001be50 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1be50:	defffe04 	addi	sp,sp,-8
   1be54:	df000115 	stw	fp,4(sp)
   1be58:	df000104 	addi	fp,sp,4
   1be5c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1be60:	e0bfff17 	ldw	r2,-4(fp)
   1be64:	10800a17 	ldw	r2,40(r2)
   1be68:	1007883a 	mov	r3,r2
   1be6c:	00800044 	movi	r2,1
   1be70:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1be74:	e037883a 	mov	sp,fp
   1be78:	df000017 	ldw	fp,0(sp)
   1be7c:	dec00104 	addi	sp,sp,4
   1be80:	f800283a 	ret

0001be84 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1be84:	defffc04 	addi	sp,sp,-16
   1be88:	dfc00315 	stw	ra,12(sp)
   1be8c:	df000215 	stw	fp,8(sp)
   1be90:	df000204 	addi	fp,sp,8
   1be94:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1be98:	e13fff17 	ldw	r4,-4(fp)
   1be9c:	014000b4 	movhi	r5,2
   1bea0:	29468504 	addi	r5,r5,6676
   1bea4:	001dc0c0 	call	1dc0c <alt_find_dev>
   1bea8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1beac:	e0bffe17 	ldw	r2,-8(fp)
}
   1beb0:	e037883a 	mov	sp,fp
   1beb4:	dfc00117 	ldw	ra,4(sp)
   1beb8:	df000017 	ldw	fp,0(sp)
   1bebc:	dec00204 	addi	sp,sp,8
   1bec0:	f800283a 	ret

0001bec4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1bec4:	defffb04 	addi	sp,sp,-20
   1bec8:	df000415 	stw	fp,16(sp)
   1becc:	df000404 	addi	fp,sp,16
   1bed0:	e13ffd15 	stw	r4,-12(fp)
   1bed4:	e17ffe15 	stw	r5,-8(fp)
   1bed8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1bedc:	e03ffc15 	stw	zero,-16(fp)
   1bee0:	00000f06 	br	1bf20 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1bee4:	e0bffd17 	ldw	r2,-12(fp)
   1bee8:	10800a17 	ldw	r2,40(r2)
   1beec:	10800044 	addi	r2,r2,1
   1bef0:	1009883a 	mov	r4,r2
   1bef4:	e0fffe17 	ldw	r3,-8(fp)
   1bef8:	e0bffc17 	ldw	r2,-16(fp)
   1befc:	1885883a 	add	r2,r3,r2
   1bf00:	10800003 	ldbu	r2,0(r2)
   1bf04:	10803fcc 	andi	r2,r2,255
   1bf08:	1080201c 	xori	r2,r2,128
   1bf0c:	10bfe004 	addi	r2,r2,-128
   1bf10:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1bf14:	e0bffc17 	ldw	r2,-16(fp)
   1bf18:	10800044 	addi	r2,r2,1
   1bf1c:	e0bffc15 	stw	r2,-16(fp)
   1bf20:	e0fffc17 	ldw	r3,-16(fp)
   1bf24:	e0bfff17 	ldw	r2,-4(fp)
   1bf28:	18bfee36 	bltu	r3,r2,1bee4 <__alt_mem_Flash_flash_data+0xf401bee4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1bf2c:	e037883a 	mov	sp,fp
   1bf30:	df000017 	ldw	fp,0(sp)
   1bf34:	dec00104 	addi	sp,sp,4
   1bf38:	f800283a 	ret

0001bf3c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1bf3c:	defffd04 	addi	sp,sp,-12
   1bf40:	df000215 	stw	fp,8(sp)
   1bf44:	df000204 	addi	fp,sp,8
   1bf48:	e13ffe15 	stw	r4,-8(fp)
   1bf4c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1bf50:	00000d06 	br	1bf88 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1bf54:	e0bffe17 	ldw	r2,-8(fp)
   1bf58:	10800a17 	ldw	r2,40(r2)
   1bf5c:	10800044 	addi	r2,r2,1
   1bf60:	1007883a 	mov	r3,r2
   1bf64:	e0bfff17 	ldw	r2,-4(fp)
   1bf68:	10800003 	ldbu	r2,0(r2)
   1bf6c:	10803fcc 	andi	r2,r2,255
   1bf70:	1080201c 	xori	r2,r2,128
   1bf74:	10bfe004 	addi	r2,r2,-128
   1bf78:	18800025 	stbio	r2,0(r3)
		++ptr;
   1bf7c:	e0bfff17 	ldw	r2,-4(fp)
   1bf80:	10800044 	addi	r2,r2,1
   1bf84:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1bf88:	e0bfff17 	ldw	r2,-4(fp)
   1bf8c:	10800003 	ldbu	r2,0(r2)
   1bf90:	10803fcc 	andi	r2,r2,255
   1bf94:	1080201c 	xori	r2,r2,128
   1bf98:	10bfe004 	addi	r2,r2,-128
   1bf9c:	103fed1e 	bne	r2,zero,1bf54 <__alt_mem_Flash_flash_data+0xf401bf54>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1bfa0:	e037883a 	mov	sp,fp
   1bfa4:	df000017 	ldw	fp,0(sp)
   1bfa8:	dec00104 	addi	sp,sp,4
   1bfac:	f800283a 	ret

0001bfb0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1bfb0:	defffb04 	addi	sp,sp,-20
   1bfb4:	dfc00415 	stw	ra,16(sp)
   1bfb8:	df000315 	stw	fp,12(sp)
   1bfbc:	df000304 	addi	fp,sp,12
   1bfc0:	e13ffd15 	stw	r4,-12(fp)
   1bfc4:	e17ffe15 	stw	r5,-8(fp)
   1bfc8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1bfcc:	e0bffd17 	ldw	r2,-12(fp)
   1bfd0:	10c00017 	ldw	r3,0(r2)
   1bfd4:	e0bfff17 	ldw	r2,-4(fp)
   1bfd8:	1809883a 	mov	r4,r3
   1bfdc:	e17ffe17 	ldw	r5,-8(fp)
   1bfe0:	100d883a 	mov	r6,r2
   1bfe4:	001bec40 	call	1bec4 <alt_up_character_lcd_write>
	return 0;
   1bfe8:	0005883a 	mov	r2,zero
}
   1bfec:	e037883a 	mov	sp,fp
   1bff0:	dfc00117 	ldw	ra,4(sp)
   1bff4:	df000017 	ldw	fp,0(sp)
   1bff8:	dec00204 	addi	sp,sp,8
   1bffc:	f800283a 	ret

0001c000 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1c000:	defffa04 	addi	sp,sp,-24
   1c004:	dfc00515 	stw	ra,20(sp)
   1c008:	df000415 	stw	fp,16(sp)
   1c00c:	df000404 	addi	fp,sp,16
   1c010:	e13ffd15 	stw	r4,-12(fp)
   1c014:	e17ffe15 	stw	r5,-8(fp)
   1c018:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c01c:	e0bffe17 	ldw	r2,-8(fp)
   1c020:	10800a28 	cmpgeui	r2,r2,40
   1c024:	1000031e 	bne	r2,zero,1c034 <alt_up_character_lcd_set_cursor_pos+0x34>
   1c028:	e0bfff17 	ldw	r2,-4(fp)
   1c02c:	108000b0 	cmpltui	r2,r2,2
   1c030:	1000021e 	bne	r2,zero,1c03c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1c034:	00bfffc4 	movi	r2,-1
   1c038:	00000906 	br	1c060 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c03c:	e13ffe17 	ldw	r4,-8(fp)
   1c040:	e17fff17 	ldw	r5,-4(fp)
   1c044:	001bda00 	call	1bda0 <get_DDRAM_addr>
   1c048:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c04c:	e0bffc03 	ldbu	r2,-16(fp)
   1c050:	e13ffd17 	ldw	r4,-12(fp)
   1c054:	100b883a 	mov	r5,r2
   1c058:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
	return 0;
   1c05c:	0005883a 	mov	r2,zero
}
   1c060:	e037883a 	mov	sp,fp
   1c064:	dfc00117 	ldw	ra,4(sp)
   1c068:	df000017 	ldw	fp,0(sp)
   1c06c:	dec00204 	addi	sp,sp,8
   1c070:	f800283a 	ret

0001c074 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c074:	defffb04 	addi	sp,sp,-20
   1c078:	dfc00415 	stw	ra,16(sp)
   1c07c:	df000315 	stw	fp,12(sp)
   1c080:	df000304 	addi	fp,sp,12
   1c084:	e13ffe15 	stw	r4,-8(fp)
   1c088:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c08c:	e0bfff17 	ldw	r2,-4(fp)
   1c090:	1000011e 	bne	r2,zero,1c098 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1c094:	00001406 	br	1c0e8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c098:	e0bfff17 	ldw	r2,-4(fp)
   1c09c:	0080020e 	bge	zero,r2,1c0a8 <alt_up_character_lcd_shift_cursor+0x34>
   1c0a0:	00800504 	movi	r2,20
   1c0a4:	00000106 	br	1c0ac <alt_up_character_lcd_shift_cursor+0x38>
   1c0a8:	00800404 	movi	r2,16
   1c0ac:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c0b0:	e0bfff17 	ldw	r2,-4(fp)
   1c0b4:	1000010e 	bge	r2,zero,1c0bc <alt_up_character_lcd_shift_cursor+0x48>
   1c0b8:	0085c83a 	sub	r2,zero,r2
   1c0bc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c0c0:	00000406 	br	1c0d4 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c0c4:	e0bffd43 	ldbu	r2,-11(fp)
   1c0c8:	e13ffe17 	ldw	r4,-8(fp)
   1c0cc:	100b883a 	mov	r5,r2
   1c0d0:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c0d4:	e0bffd03 	ldbu	r2,-12(fp)
   1c0d8:	10ffffc4 	addi	r3,r2,-1
   1c0dc:	e0fffd05 	stb	r3,-12(fp)
   1c0e0:	10803fcc 	andi	r2,r2,255
   1c0e4:	103ff71e 	bne	r2,zero,1c0c4 <__alt_mem_Flash_flash_data+0xf401c0c4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c0e8:	e037883a 	mov	sp,fp
   1c0ec:	dfc00117 	ldw	ra,4(sp)
   1c0f0:	df000017 	ldw	fp,0(sp)
   1c0f4:	dec00204 	addi	sp,sp,8
   1c0f8:	f800283a 	ret

0001c0fc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c0fc:	defffb04 	addi	sp,sp,-20
   1c100:	dfc00415 	stw	ra,16(sp)
   1c104:	df000315 	stw	fp,12(sp)
   1c108:	df000304 	addi	fp,sp,12
   1c10c:	e13ffe15 	stw	r4,-8(fp)
   1c110:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c114:	e0bfff17 	ldw	r2,-4(fp)
   1c118:	1000011e 	bne	r2,zero,1c120 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1c11c:	00001406 	br	1c170 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c120:	e0bfff17 	ldw	r2,-4(fp)
   1c124:	0080020e 	bge	zero,r2,1c130 <alt_up_character_lcd_shift_display+0x34>
   1c128:	00800704 	movi	r2,28
   1c12c:	00000106 	br	1c134 <alt_up_character_lcd_shift_display+0x38>
   1c130:	00800604 	movi	r2,24
   1c134:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c138:	e0bfff17 	ldw	r2,-4(fp)
   1c13c:	1000010e 	bge	r2,zero,1c144 <alt_up_character_lcd_shift_display+0x48>
   1c140:	0085c83a 	sub	r2,zero,r2
   1c144:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c148:	00000406 	br	1c15c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c14c:	e0bffd43 	ldbu	r2,-11(fp)
   1c150:	e13ffe17 	ldw	r4,-8(fp)
   1c154:	100b883a 	mov	r5,r2
   1c158:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c15c:	e0bffd03 	ldbu	r2,-12(fp)
   1c160:	10ffffc4 	addi	r3,r2,-1
   1c164:	e0fffd05 	stb	r3,-12(fp)
   1c168:	10803fcc 	andi	r2,r2,255
   1c16c:	103ff71e 	bne	r2,zero,1c14c <__alt_mem_Flash_flash_data+0xf401c14c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c170:	e037883a 	mov	sp,fp
   1c174:	dfc00117 	ldw	ra,4(sp)
   1c178:	df000017 	ldw	fp,0(sp)
   1c17c:	dec00204 	addi	sp,sp,8
   1c180:	f800283a 	ret

0001c184 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1c184:	defffa04 	addi	sp,sp,-24
   1c188:	dfc00515 	stw	ra,20(sp)
   1c18c:	df000415 	stw	fp,16(sp)
   1c190:	df000404 	addi	fp,sp,16
   1c194:	e13ffd15 	stw	r4,-12(fp)
   1c198:	e17ffe15 	stw	r5,-8(fp)
   1c19c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c1a0:	e0bffe17 	ldw	r2,-8(fp)
   1c1a4:	10800a28 	cmpgeui	r2,r2,40
   1c1a8:	1000031e 	bne	r2,zero,1c1b8 <alt_up_character_lcd_erase_pos+0x34>
   1c1ac:	e0bfff17 	ldw	r2,-4(fp)
   1c1b0:	108000b0 	cmpltui	r2,r2,2
   1c1b4:	1000021e 	bne	r2,zero,1c1c0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1c1b8:	00bfffc4 	movi	r2,-1
   1c1bc:	00000f06 	br	1c1fc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c1c0:	e13ffe17 	ldw	r4,-8(fp)
   1c1c4:	e17fff17 	ldw	r5,-4(fp)
   1c1c8:	001bda00 	call	1bda0 <get_DDRAM_addr>
   1c1cc:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c1d0:	e0bffc03 	ldbu	r2,-16(fp)
   1c1d4:	e13ffd17 	ldw	r4,-12(fp)
   1c1d8:	100b883a 	mov	r5,r2
   1c1dc:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1c1e0:	e0bffd17 	ldw	r2,-12(fp)
   1c1e4:	10800a17 	ldw	r2,40(r2)
   1c1e8:	10800044 	addi	r2,r2,1
   1c1ec:	1007883a 	mov	r3,r2
   1c1f0:	00800084 	movi	r2,2
   1c1f4:	18800025 	stbio	r2,0(r3)
	return 0;
   1c1f8:	0005883a 	mov	r2,zero
}
   1c1fc:	e037883a 	mov	sp,fp
   1c200:	dfc00117 	ldw	ra,4(sp)
   1c204:	df000017 	ldw	fp,0(sp)
   1c208:	dec00204 	addi	sp,sp,8
   1c20c:	f800283a 	ret

0001c210 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1c210:	defffd04 	addi	sp,sp,-12
   1c214:	dfc00215 	stw	ra,8(sp)
   1c218:	df000115 	stw	fp,4(sp)
   1c21c:	df000104 	addi	fp,sp,4
   1c220:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1c224:	e13fff17 	ldw	r4,-4(fp)
   1c228:	01400304 	movi	r5,12
   1c22c:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
}
   1c230:	e037883a 	mov	sp,fp
   1c234:	dfc00117 	ldw	ra,4(sp)
   1c238:	df000017 	ldw	fp,0(sp)
   1c23c:	dec00204 	addi	sp,sp,8
   1c240:	f800283a 	ret

0001c244 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1c244:	defffd04 	addi	sp,sp,-12
   1c248:	dfc00215 	stw	ra,8(sp)
   1c24c:	df000115 	stw	fp,4(sp)
   1c250:	df000104 	addi	fp,sp,4
   1c254:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1c258:	e13fff17 	ldw	r4,-4(fp)
   1c25c:	014003c4 	movi	r5,15
   1c260:	001be140 	call	1be14 <alt_up_character_lcd_send_cmd>
}
   1c264:	e037883a 	mov	sp,fp
   1c268:	dfc00117 	ldw	ra,4(sp)
   1c26c:	df000017 	ldw	fp,0(sp)
   1c270:	dec00204 	addi	sp,sp,8
   1c274:	f800283a 	ret

0001c278 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1c278:	defffd04 	addi	sp,sp,-12
   1c27c:	df000215 	stw	fp,8(sp)
   1c280:	df000204 	addi	fp,sp,8
   1c284:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c288:	e0bfff17 	ldw	r2,-4(fp)
   1c28c:	10800a17 	ldw	r2,40(r2)
   1c290:	10800104 	addi	r2,r2,4
   1c294:	10800037 	ldwio	r2,0(r2)
   1c298:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1c29c:	e0bffe17 	ldw	r2,-8(fp)
   1c2a0:	10800054 	ori	r2,r2,1
   1c2a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c2a8:	e0bfff17 	ldw	r2,-4(fp)
   1c2ac:	10800a17 	ldw	r2,40(r2)
   1c2b0:	10800104 	addi	r2,r2,4
   1c2b4:	1007883a 	mov	r3,r2
   1c2b8:	e0bffe17 	ldw	r2,-8(fp)
   1c2bc:	18800035 	stwio	r2,0(r3)
}
   1c2c0:	e037883a 	mov	sp,fp
   1c2c4:	df000017 	ldw	fp,0(sp)
   1c2c8:	dec00104 	addi	sp,sp,4
   1c2cc:	f800283a 	ret

0001c2d0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1c2d0:	defffd04 	addi	sp,sp,-12
   1c2d4:	df000215 	stw	fp,8(sp)
   1c2d8:	df000204 	addi	fp,sp,8
   1c2dc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c2e0:	e0bfff17 	ldw	r2,-4(fp)
   1c2e4:	10800a17 	ldw	r2,40(r2)
   1c2e8:	10800104 	addi	r2,r2,4
   1c2ec:	10800037 	ldwio	r2,0(r2)
   1c2f0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1c2f4:	e0fffe17 	ldw	r3,-8(fp)
   1c2f8:	00bfff84 	movi	r2,-2
   1c2fc:	1884703a 	and	r2,r3,r2
   1c300:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c304:	e0bfff17 	ldw	r2,-4(fp)
   1c308:	10800a17 	ldw	r2,40(r2)
   1c30c:	10800104 	addi	r2,r2,4
   1c310:	1007883a 	mov	r3,r2
   1c314:	e0bffe17 	ldw	r2,-8(fp)
   1c318:	18800035 	stwio	r2,0(r3)
}
   1c31c:	e037883a 	mov	sp,fp
   1c320:	df000017 	ldw	fp,0(sp)
   1c324:	dec00104 	addi	sp,sp,4
   1c328:	f800283a 	ret

0001c32c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1c32c:	defffd04 	addi	sp,sp,-12
   1c330:	df000215 	stw	fp,8(sp)
   1c334:	df000204 	addi	fp,sp,8
   1c338:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1c33c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1c340:	e0bfff17 	ldw	r2,-4(fp)
   1c344:	10800a17 	ldw	r2,40(r2)
   1c348:	10800084 	addi	r2,r2,2
   1c34c:	1080002b 	ldhuio	r2,0(r2)
   1c350:	10bfffcc 	andi	r2,r2,65535
   1c354:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1c358:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c35c:	e037883a 	mov	sp,fp
   1c360:	df000017 	ldw	fp,0(sp)
   1c364:	dec00104 	addi	sp,sp,4
   1c368:	f800283a 	ret

0001c36c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1c36c:	defffd04 	addi	sp,sp,-12
   1c370:	df000215 	stw	fp,8(sp)
   1c374:	df000204 	addi	fp,sp,8
   1c378:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c37c:	e0bfff17 	ldw	r2,-4(fp)
   1c380:	10800a17 	ldw	r2,40(r2)
   1c384:	10800104 	addi	r2,r2,4
   1c388:	10800037 	ldwio	r2,0(r2)
   1c38c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1c390:	e0bffe17 	ldw	r2,-8(fp)
   1c394:	1004d43a 	srli	r2,r2,16
}
   1c398:	e037883a 	mov	sp,fp
   1c39c:	df000017 	ldw	fp,0(sp)
   1c3a0:	dec00104 	addi	sp,sp,4
   1c3a4:	f800283a 	ret

0001c3a8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1c3a8:	defffd04 	addi	sp,sp,-12
   1c3ac:	df000215 	stw	fp,8(sp)
   1c3b0:	df000204 	addi	fp,sp,8
   1c3b4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1c3b8:	e0bfff17 	ldw	r2,-4(fp)
   1c3bc:	1080800c 	andi	r2,r2,512
   1c3c0:	1004d27a 	srli	r2,r2,9
   1c3c4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c3c8:	e0bffe17 	ldw	r2,-8(fp)
   1c3cc:	10000226 	beq	r2,zero,1c3d8 <alt_up_irda_check_parity+0x30>
   1c3d0:	00bfffc4 	movi	r2,-1
   1c3d4:	00000106 	br	1c3dc <alt_up_irda_check_parity+0x34>
   1c3d8:	0005883a 	mov	r2,zero
}
   1c3dc:	e037883a 	mov	sp,fp
   1c3e0:	df000017 	ldw	fp,0(sp)
   1c3e4:	dec00104 	addi	sp,sp,4
   1c3e8:	f800283a 	ret

0001c3ec <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1c3ec:	defffd04 	addi	sp,sp,-12
   1c3f0:	df000215 	stw	fp,8(sp)
   1c3f4:	df000204 	addi	fp,sp,8
   1c3f8:	e13ffe15 	stw	r4,-8(fp)
   1c3fc:	2805883a 	mov	r2,r5
   1c400:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1c404:	e0bffe17 	ldw	r2,-8(fp)
   1c408:	10800a17 	ldw	r2,40(r2)
   1c40c:	1007883a 	mov	r3,r2
   1c410:	e0bfff03 	ldbu	r2,-4(fp)
   1c414:	18800035 	stwio	r2,0(r3)
	return 0;
   1c418:	0005883a 	mov	r2,zero
}
   1c41c:	e037883a 	mov	sp,fp
   1c420:	df000017 	ldw	fp,0(sp)
   1c424:	dec00104 	addi	sp,sp,4
   1c428:	f800283a 	ret

0001c42c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1c42c:	defffa04 	addi	sp,sp,-24
   1c430:	dfc00515 	stw	ra,20(sp)
   1c434:	df000415 	stw	fp,16(sp)
   1c438:	df000404 	addi	fp,sp,16
   1c43c:	e13ffd15 	stw	r4,-12(fp)
   1c440:	e17ffe15 	stw	r5,-8(fp)
   1c444:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1c448:	e0bffd17 	ldw	r2,-12(fp)
   1c44c:	10800a17 	ldw	r2,40(r2)
   1c450:	10800037 	ldwio	r2,0(r2)
   1c454:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1c458:	e0bffc17 	ldw	r2,-16(fp)
   1c45c:	1007883a 	mov	r3,r2
   1c460:	e0bffe17 	ldw	r2,-8(fp)
   1c464:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1c468:	e13ffc17 	ldw	r4,-16(fp)
   1c46c:	001c3a80 	call	1c3a8 <alt_up_irda_check_parity>
   1c470:	1007883a 	mov	r3,r2
   1c474:	e0bfff17 	ldw	r2,-4(fp)
   1c478:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1c47c:	e0bffc17 	ldw	r2,-16(fp)
   1c480:	10a0000c 	andi	r2,r2,32768
   1c484:	1004d3fa 	srli	r2,r2,15
   1c488:	10bfffc4 	addi	r2,r2,-1
}
   1c48c:	e037883a 	mov	sp,fp
   1c490:	dfc00117 	ldw	ra,4(sp)
   1c494:	df000017 	ldw	fp,0(sp)
   1c498:	dec00204 	addi	sp,sp,8
   1c49c:	f800283a 	ret

0001c4a0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c4a0:	defff804 	addi	sp,sp,-32
   1c4a4:	dfc00715 	stw	ra,28(sp)
   1c4a8:	df000615 	stw	fp,24(sp)
   1c4ac:	df000604 	addi	fp,sp,24
   1c4b0:	e13ffd15 	stw	r4,-12(fp)
   1c4b4:	e17ffe15 	stw	r5,-8(fp)
   1c4b8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c4bc:	e0bffd17 	ldw	r2,-12(fp)
   1c4c0:	10800017 	ldw	r2,0(r2)
   1c4c4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1c4c8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1c4cc:	00000e06 	br	1c508 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1c4d0:	e0bffe17 	ldw	r2,-8(fp)
   1c4d4:	10c00044 	addi	r3,r2,1
   1c4d8:	e0fffe15 	stw	r3,-8(fp)
   1c4dc:	e0fffc04 	addi	r3,fp,-16
   1c4e0:	e13ffb17 	ldw	r4,-20(fp)
   1c4e4:	100b883a 	mov	r5,r2
   1c4e8:	180d883a 	mov	r6,r3
   1c4ec:	001c42c0 	call	1c42c <alt_up_irda_read_data>
   1c4f0:	1000041e 	bne	r2,zero,1c504 <alt_up_irda_read_fd+0x64>
			count++;
   1c4f4:	e0bffa17 	ldw	r2,-24(fp)
   1c4f8:	10800044 	addi	r2,r2,1
   1c4fc:	e0bffa15 	stw	r2,-24(fp)
   1c500:	00000106 	br	1c508 <alt_up_irda_read_fd+0x68>
		else
			break;
   1c504:	00000406 	br	1c518 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1c508:	e0bfff17 	ldw	r2,-4(fp)
   1c50c:	10ffffc4 	addi	r3,r2,-1
   1c510:	e0ffff15 	stw	r3,-4(fp)
   1c514:	103fee1e 	bne	r2,zero,1c4d0 <__alt_mem_Flash_flash_data+0xf401c4d0>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1c518:	e0bffa17 	ldw	r2,-24(fp)
}
   1c51c:	e037883a 	mov	sp,fp
   1c520:	dfc00117 	ldw	ra,4(sp)
   1c524:	df000017 	ldw	fp,0(sp)
   1c528:	dec00204 	addi	sp,sp,8
   1c52c:	f800283a 	ret

0001c530 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c530:	defff904 	addi	sp,sp,-28
   1c534:	dfc00615 	stw	ra,24(sp)
   1c538:	df000515 	stw	fp,20(sp)
   1c53c:	df000504 	addi	fp,sp,20
   1c540:	e13ffd15 	stw	r4,-12(fp)
   1c544:	e17ffe15 	stw	r5,-8(fp)
   1c548:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c54c:	e0bffd17 	ldw	r2,-12(fp)
   1c550:	10800017 	ldw	r2,0(r2)
   1c554:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1c558:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1c55c:	00000e06 	br	1c598 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1c560:	e0bffe17 	ldw	r2,-8(fp)
   1c564:	10c00044 	addi	r3,r2,1
   1c568:	e0fffe15 	stw	r3,-8(fp)
   1c56c:	10800003 	ldbu	r2,0(r2)
   1c570:	10803fcc 	andi	r2,r2,255
   1c574:	e13ffc17 	ldw	r4,-16(fp)
   1c578:	100b883a 	mov	r5,r2
   1c57c:	001c3ec0 	call	1c3ec <alt_up_irda_write_data>
   1c580:	1000041e 	bne	r2,zero,1c594 <alt_up_irda_write_fd+0x64>
			count++;
   1c584:	e0bffb17 	ldw	r2,-20(fp)
   1c588:	10800044 	addi	r2,r2,1
   1c58c:	e0bffb15 	stw	r2,-20(fp)
   1c590:	00000106 	br	1c598 <alt_up_irda_write_fd+0x68>
		else
			break;
   1c594:	00000406 	br	1c5a8 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1c598:	e0bfff17 	ldw	r2,-4(fp)
   1c59c:	10ffffc4 	addi	r3,r2,-1
   1c5a0:	e0ffff15 	stw	r3,-4(fp)
   1c5a4:	103fee1e 	bne	r2,zero,1c560 <__alt_mem_Flash_flash_data+0xf401c560>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1c5a8:	e0bffb17 	ldw	r2,-20(fp)
}
   1c5ac:	e037883a 	mov	sp,fp
   1c5b0:	dfc00117 	ldw	ra,4(sp)
   1c5b4:	df000017 	ldw	fp,0(sp)
   1c5b8:	dec00204 	addi	sp,sp,8
   1c5bc:	f800283a 	ret

0001c5c0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1c5c0:	defffc04 	addi	sp,sp,-16
   1c5c4:	dfc00315 	stw	ra,12(sp)
   1c5c8:	df000215 	stw	fp,8(sp)
   1c5cc:	df000204 	addi	fp,sp,8
   1c5d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1c5d4:	e13fff17 	ldw	r4,-4(fp)
   1c5d8:	014000b4 	movhi	r5,2
   1c5dc:	29468504 	addi	r5,r5,6676
   1c5e0:	001dc0c0 	call	1dc0c <alt_find_dev>
   1c5e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c5e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1c5ec:	e037883a 	mov	sp,fp
   1c5f0:	dfc00117 	ldw	ra,4(sp)
   1c5f4:	df000017 	ldw	fp,0(sp)
   1c5f8:	dec00204 	addi	sp,sp,8
   1c5fc:	f800283a 	ret

0001c600 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1c600:	defffd04 	addi	sp,sp,-12
   1c604:	df000215 	stw	fp,8(sp)
   1c608:	df000204 	addi	fp,sp,8
   1c60c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1c610:	e0bfff17 	ldw	r2,-4(fp)
   1c614:	1080400c 	andi	r2,r2,256
   1c618:	1004d23a 	srli	r2,r2,8
   1c61c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1c620:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c624:	e037883a 	mov	sp,fp
   1c628:	df000017 	ldw	fp,0(sp)
   1c62c:	dec00104 	addi	sp,sp,4
   1c630:	f800283a 	ret

0001c634 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1c634:	defffd04 	addi	sp,sp,-12
   1c638:	df000215 	stw	fp,8(sp)
   1c63c:	df000204 	addi	fp,sp,8
   1c640:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1c644:	e0bfff17 	ldw	r2,-4(fp)
   1c648:	1080004c 	andi	r2,r2,1
   1c64c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c650:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c654:	e037883a 	mov	sp,fp
   1c658:	df000017 	ldw	fp,0(sp)
   1c65c:	dec00104 	addi	sp,sp,4
   1c660:	f800283a 	ret

0001c664 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1c664:	defffd04 	addi	sp,sp,-12
   1c668:	df000215 	stw	fp,8(sp)
   1c66c:	df000204 	addi	fp,sp,8
   1c670:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1c674:	e0bfff17 	ldw	r2,-4(fp)
   1c678:	1081000c 	andi	r2,r2,1024
   1c67c:	1004d2ba 	srli	r2,r2,10
   1c680:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c684:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c688:	e037883a 	mov	sp,fp
   1c68c:	df000017 	ldw	fp,0(sp)
   1c690:	dec00104 	addi	sp,sp,4
   1c694:	f800283a 	ret

0001c698 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1c698:	defffd04 	addi	sp,sp,-12
   1c69c:	df000215 	stw	fp,8(sp)
   1c6a0:	df000204 	addi	fp,sp,8
   1c6a4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1c6a8:	e0bfff17 	ldw	r2,-4(fp)
   1c6ac:	1004d43a 	srli	r2,r2,16
   1c6b0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1c6b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c6b8:	e037883a 	mov	sp,fp
   1c6bc:	df000017 	ldw	fp,0(sp)
   1c6c0:	dec00104 	addi	sp,sp,4
   1c6c4:	f800283a 	ret

0001c6c8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1c6c8:	defffd04 	addi	sp,sp,-12
   1c6cc:	df000215 	stw	fp,8(sp)
   1c6d0:	df000204 	addi	fp,sp,8
   1c6d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1c6d8:	e0bfff17 	ldw	r2,-4(fp)
   1c6dc:	10a0000c 	andi	r2,r2,32768
   1c6e0:	1004d3fa 	srli	r2,r2,15
   1c6e4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1c6e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c6ec:	e037883a 	mov	sp,fp
   1c6f0:	df000017 	ldw	fp,0(sp)
   1c6f4:	dec00104 	addi	sp,sp,4
   1c6f8:	f800283a 	ret

0001c6fc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1c6fc:	defffd04 	addi	sp,sp,-12
   1c700:	df000215 	stw	fp,8(sp)
   1c704:	df000204 	addi	fp,sp,8
   1c708:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1c70c:	e0bfff17 	ldw	r2,-4(fp)
   1c710:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1c714:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c718:	e037883a 	mov	sp,fp
   1c71c:	df000017 	ldw	fp,0(sp)
   1c720:	dec00104 	addi	sp,sp,4
   1c724:	f800283a 	ret

0001c728 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1c728:	defffb04 	addi	sp,sp,-20
   1c72c:	dfc00415 	stw	ra,16(sp)
   1c730:	df000315 	stw	fp,12(sp)
   1c734:	df000304 	addi	fp,sp,12
   1c738:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1c73c:	e13fff17 	ldw	r4,-4(fp)
   1c740:	01403fc4 	movi	r5,255
   1c744:	001c9840 	call	1c984 <alt_up_ps2_write_data_byte_with_ack>
   1c748:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1c74c:	e0bffd17 	ldw	r2,-12(fp)
   1c750:	1000211e 	bne	r2,zero,1c7d8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c754:	e0bffe04 	addi	r2,fp,-8
   1c758:	e13fff17 	ldw	r4,-4(fp)
   1c75c:	100b883a 	mov	r5,r2
   1c760:	001c9e80 	call	1c9e8 <alt_up_ps2_read_data_byte_timeout>
   1c764:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1c768:	e0bffd17 	ldw	r2,-12(fp)
   1c76c:	10001a1e 	bne	r2,zero,1c7d8 <alt_up_ps2_init+0xb0>
   1c770:	e0bffe03 	ldbu	r2,-8(fp)
   1c774:	10803fcc 	andi	r2,r2,255
   1c778:	10802a98 	cmpnei	r2,r2,170
   1c77c:	1000161e 	bne	r2,zero,1c7d8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c780:	e0bffe04 	addi	r2,fp,-8
   1c784:	e13fff17 	ldw	r4,-4(fp)
   1c788:	100b883a 	mov	r5,r2
   1c78c:	001c9e80 	call	1c9e8 <alt_up_ps2_read_data_byte_timeout>
   1c790:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1c794:	e0bffd17 	ldw	r2,-12(fp)
   1c798:	10bfe318 	cmpnei	r2,r2,-116
   1c79c:	1000041e 	bne	r2,zero,1c7b0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1c7a0:	e0bfff17 	ldw	r2,-4(fp)
   1c7a4:	00c00044 	movi	r3,1
   1c7a8:	10c00d15 	stw	r3,52(r2)
   1c7ac:	00000a06 	br	1c7d8 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1c7b0:	e0bffd17 	ldw	r2,-12(fp)
   1c7b4:	1000081e 	bne	r2,zero,1c7d8 <alt_up_ps2_init+0xb0>
   1c7b8:	e0bffe03 	ldbu	r2,-8(fp)
   1c7bc:	10803fcc 	andi	r2,r2,255
   1c7c0:	1000051e 	bne	r2,zero,1c7d8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1c7c4:	e0bfff17 	ldw	r2,-4(fp)
   1c7c8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1c7cc:	e13fff17 	ldw	r4,-4(fp)
   1c7d0:	01403d04 	movi	r5,244
   1c7d4:	001c8a00 	call	1c8a0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1c7d8:	e037883a 	mov	sp,fp
   1c7dc:	dfc00117 	ldw	ra,4(sp)
   1c7e0:	df000017 	ldw	fp,0(sp)
   1c7e4:	dec00204 	addi	sp,sp,8
   1c7e8:	f800283a 	ret

0001c7ec <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c7ec:	defffd04 	addi	sp,sp,-12
   1c7f0:	df000215 	stw	fp,8(sp)
   1c7f4:	df000204 	addi	fp,sp,8
   1c7f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c7fc:	e0bfff17 	ldw	r2,-4(fp)
   1c800:	10800a17 	ldw	r2,40(r2)
   1c804:	10800104 	addi	r2,r2,4
   1c808:	10800037 	ldwio	r2,0(r2)
   1c80c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c810:	e0bffe17 	ldw	r2,-8(fp)
   1c814:	10800054 	ori	r2,r2,1
   1c818:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c81c:	e0bfff17 	ldw	r2,-4(fp)
   1c820:	10800a17 	ldw	r2,40(r2)
   1c824:	10800104 	addi	r2,r2,4
   1c828:	1007883a 	mov	r3,r2
   1c82c:	e0bffe17 	ldw	r2,-8(fp)
   1c830:	18800035 	stwio	r2,0(r3)
}
   1c834:	e037883a 	mov	sp,fp
   1c838:	df000017 	ldw	fp,0(sp)
   1c83c:	dec00104 	addi	sp,sp,4
   1c840:	f800283a 	ret

0001c844 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c844:	defffd04 	addi	sp,sp,-12
   1c848:	df000215 	stw	fp,8(sp)
   1c84c:	df000204 	addi	fp,sp,8
   1c850:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c854:	e0bfff17 	ldw	r2,-4(fp)
   1c858:	10800a17 	ldw	r2,40(r2)
   1c85c:	10800104 	addi	r2,r2,4
   1c860:	10800037 	ldwio	r2,0(r2)
   1c864:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c868:	e0fffe17 	ldw	r3,-8(fp)
   1c86c:	00bfff84 	movi	r2,-2
   1c870:	1884703a 	and	r2,r3,r2
   1c874:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c878:	e0bfff17 	ldw	r2,-4(fp)
   1c87c:	10800a17 	ldw	r2,40(r2)
   1c880:	10800104 	addi	r2,r2,4
   1c884:	1007883a 	mov	r3,r2
   1c888:	e0bffe17 	ldw	r2,-8(fp)
   1c88c:	18800035 	stwio	r2,0(r3)
}
   1c890:	e037883a 	mov	sp,fp
   1c894:	df000017 	ldw	fp,0(sp)
   1c898:	dec00104 	addi	sp,sp,4
   1c89c:	f800283a 	ret

0001c8a0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c8a0:	defffb04 	addi	sp,sp,-20
   1c8a4:	dfc00415 	stw	ra,16(sp)
   1c8a8:	df000315 	stw	fp,12(sp)
   1c8ac:	df000304 	addi	fp,sp,12
   1c8b0:	e13ffe15 	stw	r4,-8(fp)
   1c8b4:	2805883a 	mov	r2,r5
   1c8b8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1c8bc:	e0bffe17 	ldw	r2,-8(fp)
   1c8c0:	10800a17 	ldw	r2,40(r2)
   1c8c4:	1007883a 	mov	r3,r2
   1c8c8:	e0bfff03 	ldbu	r2,-4(fp)
   1c8cc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1c8d0:	e0bffe17 	ldw	r2,-8(fp)
   1c8d4:	10800a17 	ldw	r2,40(r2)
   1c8d8:	10800104 	addi	r2,r2,4
   1c8dc:	10800037 	ldwio	r2,0(r2)
   1c8e0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1c8e4:	e13ffd17 	ldw	r4,-12(fp)
   1c8e8:	001c6640 	call	1c664 <read_CE_bit>
   1c8ec:	10803fcc 	andi	r2,r2,255
   1c8f0:	10000226 	beq	r2,zero,1c8fc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1c8f4:	00bffec4 	movi	r2,-5
   1c8f8:	00000106 	br	1c900 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1c8fc:	0005883a 	mov	r2,zero
}
   1c900:	e037883a 	mov	sp,fp
   1c904:	dfc00117 	ldw	ra,4(sp)
   1c908:	df000017 	ldw	fp,0(sp)
   1c90c:	dec00204 	addi	sp,sp,8
   1c910:	f800283a 	ret

0001c914 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1c914:	defffc04 	addi	sp,sp,-16
   1c918:	dfc00315 	stw	ra,12(sp)
   1c91c:	df000215 	stw	fp,8(sp)
   1c920:	df000204 	addi	fp,sp,8
   1c924:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1c928:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1c92c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1c930:	e0bffe44 	addi	r2,fp,-7
   1c934:	e13fff17 	ldw	r4,-4(fp)
   1c938:	100b883a 	mov	r5,r2
   1c93c:	001c9e80 	call	1c9e8 <alt_up_ps2_read_data_byte_timeout>
   1c940:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1c944:	e0bffe03 	ldbu	r2,-8(fp)
   1c948:	1000061e 	bne	r2,zero,1c964 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1c94c:	e0bffe43 	ldbu	r2,-7(fp)
   1c950:	10803fcc 	andi	r2,r2,255
   1c954:	10803e98 	cmpnei	r2,r2,250
   1c958:	1000041e 	bne	r2,zero,1c96c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1c95c:	0005883a 	mov	r2,zero
   1c960:	00000306 	br	1c970 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1c964:	e0bffe03 	ldbu	r2,-8(fp)
   1c968:	00000106 	br	1c970 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1c96c:	003ff006 	br	1c930 <__alt_mem_Flash_flash_data+0xf401c930>
	return -ETIMEDOUT;
}
   1c970:	e037883a 	mov	sp,fp
   1c974:	dfc00117 	ldw	ra,4(sp)
   1c978:	df000017 	ldw	fp,0(sp)
   1c97c:	dec00204 	addi	sp,sp,8
   1c980:	f800283a 	ret

0001c984 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c984:	defffa04 	addi	sp,sp,-24
   1c988:	dfc00515 	stw	ra,20(sp)
   1c98c:	df000415 	stw	fp,16(sp)
   1c990:	df000404 	addi	fp,sp,16
   1c994:	e13ffe15 	stw	r4,-8(fp)
   1c998:	2805883a 	mov	r2,r5
   1c99c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1c9a0:	e0bfff03 	ldbu	r2,-4(fp)
   1c9a4:	e13ffe17 	ldw	r4,-8(fp)
   1c9a8:	100b883a 	mov	r5,r2
   1c9ac:	001c8a00 	call	1c8a0 <alt_up_ps2_write_data_byte>
   1c9b0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1c9b4:	e0bffc17 	ldw	r2,-16(fp)
   1c9b8:	10000226 	beq	r2,zero,1c9c4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1c9bc:	e0bffc17 	ldw	r2,-16(fp)
   1c9c0:	00000406 	br	1c9d4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1c9c4:	e13ffe17 	ldw	r4,-8(fp)
   1c9c8:	001c9140 	call	1c914 <alt_up_ps2_wait_for_ack>
   1c9cc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1c9d0:	e0bffd17 	ldw	r2,-12(fp)
}
   1c9d4:	e037883a 	mov	sp,fp
   1c9d8:	dfc00117 	ldw	ra,4(sp)
   1c9dc:	df000017 	ldw	fp,0(sp)
   1c9e0:	dec00204 	addi	sp,sp,8
   1c9e4:	f800283a 	ret

0001c9e8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c9e8:	defffa04 	addi	sp,sp,-24
   1c9ec:	dfc00515 	stw	ra,20(sp)
   1c9f0:	df000415 	stw	fp,16(sp)
   1c9f4:	df000404 	addi	fp,sp,16
   1c9f8:	e13ffe15 	stw	r4,-8(fp)
   1c9fc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ca00:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1ca04:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1ca08:	e0bffc17 	ldw	r2,-16(fp)
   1ca0c:	10800044 	addi	r2,r2,1
   1ca10:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ca14:	e0bffe17 	ldw	r2,-8(fp)
   1ca18:	10800a17 	ldw	r2,40(r2)
   1ca1c:	10800037 	ldwio	r2,0(r2)
   1ca20:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1ca24:	e13ffd17 	ldw	r4,-12(fp)
   1ca28:	001c6c80 	call	1c6c8 <read_data_valid>
   1ca2c:	10803fcc 	andi	r2,r2,255
   1ca30:	10000726 	beq	r2,zero,1ca50 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1ca34:	e13ffd17 	ldw	r4,-12(fp)
   1ca38:	001c6fc0 	call	1c6fc <read_data_byte>
   1ca3c:	1007883a 	mov	r3,r2
   1ca40:	e0bfff17 	ldw	r2,-4(fp)
   1ca44:	10c00005 	stb	r3,0(r2)
			return 0;
   1ca48:	0005883a 	mov	r2,zero
   1ca4c:	00000a06 	br	1ca78 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1ca50:	e0bffe17 	ldw	r2,-8(fp)
   1ca54:	10800c17 	ldw	r2,48(r2)
   1ca58:	10000626 	beq	r2,zero,1ca74 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1ca5c:	e0bffe17 	ldw	r2,-8(fp)
   1ca60:	10c00c17 	ldw	r3,48(r2)
   1ca64:	e0bffc17 	ldw	r2,-16(fp)
   1ca68:	1880022e 	bgeu	r3,r2,1ca74 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1ca6c:	00bfe304 	movi	r2,-116
   1ca70:	00000106 	br	1ca78 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1ca74:	003fe406 	br	1ca08 <__alt_mem_Flash_flash_data+0xf401ca08>
}
   1ca78:	e037883a 	mov	sp,fp
   1ca7c:	dfc00117 	ldw	ra,4(sp)
   1ca80:	df000017 	ldw	fp,0(sp)
   1ca84:	dec00204 	addi	sp,sp,8
   1ca88:	f800283a 	ret

0001ca8c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ca8c:	defffb04 	addi	sp,sp,-20
   1ca90:	dfc00415 	stw	ra,16(sp)
   1ca94:	df000315 	stw	fp,12(sp)
   1ca98:	df000304 	addi	fp,sp,12
   1ca9c:	e13ffe15 	stw	r4,-8(fp)
   1caa0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1caa4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1caa8:	e0bffe17 	ldw	r2,-8(fp)
   1caac:	10800a17 	ldw	r2,40(r2)
   1cab0:	10800037 	ldwio	r2,0(r2)
   1cab4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1cab8:	e13ffd17 	ldw	r4,-12(fp)
   1cabc:	001c6c80 	call	1c6c8 <read_data_valid>
   1cac0:	10803fcc 	andi	r2,r2,255
   1cac4:	10000726 	beq	r2,zero,1cae4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1cac8:	e13ffd17 	ldw	r4,-12(fp)
   1cacc:	001c6fc0 	call	1c6fc <read_data_byte>
   1cad0:	1007883a 	mov	r3,r2
   1cad4:	e0bfff17 	ldw	r2,-4(fp)
   1cad8:	10c00005 	stb	r3,0(r2)
		return 0;
   1cadc:	0005883a 	mov	r2,zero
   1cae0:	00000106 	br	1cae8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1cae4:	00bfffc4 	movi	r2,-1
}
   1cae8:	e037883a 	mov	sp,fp
   1caec:	dfc00117 	ldw	ra,4(sp)
   1caf0:	df000017 	ldw	fp,0(sp)
   1caf4:	dec00204 	addi	sp,sp,8
   1caf8:	f800283a 	ret

0001cafc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1cafc:	defffb04 	addi	sp,sp,-20
   1cb00:	dfc00415 	stw	ra,16(sp)
   1cb04:	df000315 	stw	fp,12(sp)
   1cb08:	df000304 	addi	fp,sp,12
   1cb0c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1cb10:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1cb14:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cb18:	e0bfff17 	ldw	r2,-4(fp)
   1cb1c:	10800a17 	ldw	r2,40(r2)
   1cb20:	10800037 	ldwio	r2,0(r2)
   1cb24:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1cb28:	e13ffe17 	ldw	r4,-8(fp)
   1cb2c:	001c6980 	call	1c698 <read_num_bytes_available>
   1cb30:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1cb34:	e0bffd0b 	ldhu	r2,-12(fp)
   1cb38:	103ff71e 	bne	r2,zero,1cb18 <__alt_mem_Flash_flash_data+0xf401cb18>
}
   1cb3c:	e037883a 	mov	sp,fp
   1cb40:	dfc00117 	ldw	ra,4(sp)
   1cb44:	df000017 	ldw	fp,0(sp)
   1cb48:	dec00204 	addi	sp,sp,8
   1cb4c:	f800283a 	ret

0001cb50 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1cb50:	defff804 	addi	sp,sp,-32
   1cb54:	dfc00715 	stw	ra,28(sp)
   1cb58:	df000615 	stw	fp,24(sp)
   1cb5c:	df000604 	addi	fp,sp,24
   1cb60:	e13ffd15 	stw	r4,-12(fp)
   1cb64:	e17ffe15 	stw	r5,-8(fp)
   1cb68:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1cb6c:	e0bffd17 	ldw	r2,-12(fp)
   1cb70:	10800017 	ldw	r2,0(r2)
   1cb74:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1cb78:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1cb7c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1cb80:	e0fffc17 	ldw	r3,-16(fp)
   1cb84:	e0bfff17 	ldw	r2,-4(fp)
   1cb88:	18bffd16 	blt	r3,r2,1cb80 <__alt_mem_Flash_flash_data+0xf401cb80>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1cb8c:	e0bffe17 	ldw	r2,-8(fp)
   1cb90:	10c00044 	addi	r3,r2,1
   1cb94:	e0fffe15 	stw	r3,-8(fp)
   1cb98:	e13ffa17 	ldw	r4,-24(fp)
   1cb9c:	100b883a 	mov	r5,r2
   1cba0:	001c9e80 	call	1c9e8 <alt_up_ps2_read_data_byte_timeout>
   1cba4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1cba8:	e0bffb17 	ldw	r2,-20(fp)
   1cbac:	10000226 	beq	r2,zero,1cbb8 <alt_up_ps2_read_fd+0x68>
			return count;
   1cbb0:	e0bffc17 	ldw	r2,-16(fp)
   1cbb4:	00000406 	br	1cbc8 <alt_up_ps2_read_fd+0x78>
		count++;
   1cbb8:	e0bffc17 	ldw	r2,-16(fp)
   1cbbc:	10800044 	addi	r2,r2,1
   1cbc0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1cbc4:	e0bffc17 	ldw	r2,-16(fp)
}
   1cbc8:	e037883a 	mov	sp,fp
   1cbcc:	dfc00117 	ldw	ra,4(sp)
   1cbd0:	df000017 	ldw	fp,0(sp)
   1cbd4:	dec00204 	addi	sp,sp,8
   1cbd8:	f800283a 	ret

0001cbdc <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1cbdc:	defff804 	addi	sp,sp,-32
   1cbe0:	dfc00715 	stw	ra,28(sp)
   1cbe4:	df000615 	stw	fp,24(sp)
   1cbe8:	df000604 	addi	fp,sp,24
   1cbec:	e13ffd15 	stw	r4,-12(fp)
   1cbf0:	e17ffe15 	stw	r5,-8(fp)
   1cbf4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1cbf8:	e0bffd17 	ldw	r2,-12(fp)
   1cbfc:	10800017 	ldw	r2,0(r2)
   1cc00:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1cc04:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1cc08:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1cc0c:	00001006 	br	1cc50 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1cc10:	e0bffe17 	ldw	r2,-8(fp)
   1cc14:	10c00044 	addi	r3,r2,1
   1cc18:	e0fffe15 	stw	r3,-8(fp)
   1cc1c:	10800003 	ldbu	r2,0(r2)
   1cc20:	10803fcc 	andi	r2,r2,255
   1cc24:	e13ffb17 	ldw	r4,-20(fp)
   1cc28:	100b883a 	mov	r5,r2
   1cc2c:	001c8a00 	call	1c8a0 <alt_up_ps2_write_data_byte>
   1cc30:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1cc34:	e0bffc17 	ldw	r2,-16(fp)
   1cc38:	10000226 	beq	r2,zero,1cc44 <alt_up_ps2_write_fd+0x68>
			return count;
   1cc3c:	e0bffa17 	ldw	r2,-24(fp)
   1cc40:	00000706 	br	1cc60 <alt_up_ps2_write_fd+0x84>
		count++;
   1cc44:	e0bffa17 	ldw	r2,-24(fp)
   1cc48:	10800044 	addi	r2,r2,1
   1cc4c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1cc50:	e0fffa17 	ldw	r3,-24(fp)
   1cc54:	e0bfff17 	ldw	r2,-4(fp)
   1cc58:	18bfed16 	blt	r3,r2,1cc10 <__alt_mem_Flash_flash_data+0xf401cc10>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1cc5c:	e0bffa17 	ldw	r2,-24(fp)
}
   1cc60:	e037883a 	mov	sp,fp
   1cc64:	dfc00117 	ldw	ra,4(sp)
   1cc68:	df000017 	ldw	fp,0(sp)
   1cc6c:	dec00204 	addi	sp,sp,8
   1cc70:	f800283a 	ret

0001cc74 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1cc74:	defffc04 	addi	sp,sp,-16
   1cc78:	dfc00315 	stw	ra,12(sp)
   1cc7c:	df000215 	stw	fp,8(sp)
   1cc80:	df000204 	addi	fp,sp,8
   1cc84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1cc88:	e13fff17 	ldw	r4,-4(fp)
   1cc8c:	014000b4 	movhi	r5,2
   1cc90:	29468504 	addi	r5,r5,6676
   1cc94:	001dc0c0 	call	1dc0c <alt_find_dev>
   1cc98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cc9c:	e0bffe17 	ldw	r2,-8(fp)
}
   1cca0:	e037883a 	mov	sp,fp
   1cca4:	dfc00117 	ldw	ra,4(sp)
   1cca8:	df000017 	ldw	fp,0(sp)
   1ccac:	dec00204 	addi	sp,sp,8
   1ccb0:	f800283a 	ret

0001ccb4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ccb4:	defffd04 	addi	sp,sp,-12
   1ccb8:	df000215 	stw	fp,8(sp)
   1ccbc:	df000204 	addi	fp,sp,8
   1ccc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ccc4:	e0bfff17 	ldw	r2,-4(fp)
   1ccc8:	10800a17 	ldw	r2,40(r2)
   1cccc:	10800104 	addi	r2,r2,4
   1ccd0:	10800037 	ldwio	r2,0(r2)
   1ccd4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1ccd8:	e0bffe17 	ldw	r2,-8(fp)
   1ccdc:	10800054 	ori	r2,r2,1
   1cce0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1cce4:	e0bfff17 	ldw	r2,-4(fp)
   1cce8:	10800a17 	ldw	r2,40(r2)
   1ccec:	10800104 	addi	r2,r2,4
   1ccf0:	1007883a 	mov	r3,r2
   1ccf4:	e0bffe17 	ldw	r2,-8(fp)
   1ccf8:	18800035 	stwio	r2,0(r3)
}
   1ccfc:	e037883a 	mov	sp,fp
   1cd00:	df000017 	ldw	fp,0(sp)
   1cd04:	dec00104 	addi	sp,sp,4
   1cd08:	f800283a 	ret

0001cd0c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1cd0c:	defffd04 	addi	sp,sp,-12
   1cd10:	df000215 	stw	fp,8(sp)
   1cd14:	df000204 	addi	fp,sp,8
   1cd18:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1cd1c:	e0bfff17 	ldw	r2,-4(fp)
   1cd20:	10800a17 	ldw	r2,40(r2)
   1cd24:	10800104 	addi	r2,r2,4
   1cd28:	10800037 	ldwio	r2,0(r2)
   1cd2c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1cd30:	e0fffe17 	ldw	r3,-8(fp)
   1cd34:	00bfff84 	movi	r2,-2
   1cd38:	1884703a 	and	r2,r3,r2
   1cd3c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1cd40:	e0bfff17 	ldw	r2,-4(fp)
   1cd44:	10800a17 	ldw	r2,40(r2)
   1cd48:	10800104 	addi	r2,r2,4
   1cd4c:	1007883a 	mov	r3,r2
   1cd50:	e0bffe17 	ldw	r2,-8(fp)
   1cd54:	18800035 	stwio	r2,0(r3)
}
   1cd58:	e037883a 	mov	sp,fp
   1cd5c:	df000017 	ldw	fp,0(sp)
   1cd60:	dec00104 	addi	sp,sp,4
   1cd64:	f800283a 	ret

0001cd68 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1cd68:	defffd04 	addi	sp,sp,-12
   1cd6c:	df000215 	stw	fp,8(sp)
   1cd70:	df000204 	addi	fp,sp,8
   1cd74:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1cd78:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1cd7c:	e0bfff17 	ldw	r2,-4(fp)
   1cd80:	10800a17 	ldw	r2,40(r2)
   1cd84:	10800084 	addi	r2,r2,2
   1cd88:	1080002b 	ldhuio	r2,0(r2)
   1cd8c:	10bfffcc 	andi	r2,r2,65535
   1cd90:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1cd94:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1cd98:	e037883a 	mov	sp,fp
   1cd9c:	df000017 	ldw	fp,0(sp)
   1cda0:	dec00104 	addi	sp,sp,4
   1cda4:	f800283a 	ret

0001cda8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1cda8:	defffd04 	addi	sp,sp,-12
   1cdac:	df000215 	stw	fp,8(sp)
   1cdb0:	df000204 	addi	fp,sp,8
   1cdb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1cdb8:	e0bfff17 	ldw	r2,-4(fp)
   1cdbc:	10800a17 	ldw	r2,40(r2)
   1cdc0:	10800104 	addi	r2,r2,4
   1cdc4:	10800037 	ldwio	r2,0(r2)
   1cdc8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1cdcc:	e0bffe17 	ldw	r2,-8(fp)
   1cdd0:	1004d43a 	srli	r2,r2,16
}
   1cdd4:	e037883a 	mov	sp,fp
   1cdd8:	df000017 	ldw	fp,0(sp)
   1cddc:	dec00104 	addi	sp,sp,4
   1cde0:	f800283a 	ret

0001cde4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1cde4:	defffd04 	addi	sp,sp,-12
   1cde8:	df000215 	stw	fp,8(sp)
   1cdec:	df000204 	addi	fp,sp,8
   1cdf0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1cdf4:	e0bfff17 	ldw	r2,-4(fp)
   1cdf8:	1080800c 	andi	r2,r2,512
   1cdfc:	1004d27a 	srli	r2,r2,9
   1ce00:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1ce04:	e0bffe17 	ldw	r2,-8(fp)
   1ce08:	10000226 	beq	r2,zero,1ce14 <alt_up_rs232_check_parity+0x30>
   1ce0c:	00bfffc4 	movi	r2,-1
   1ce10:	00000106 	br	1ce18 <alt_up_rs232_check_parity+0x34>
   1ce14:	0005883a 	mov	r2,zero
}
   1ce18:	e037883a 	mov	sp,fp
   1ce1c:	df000017 	ldw	fp,0(sp)
   1ce20:	dec00104 	addi	sp,sp,4
   1ce24:	f800283a 	ret

0001ce28 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1ce28:	defffd04 	addi	sp,sp,-12
   1ce2c:	df000215 	stw	fp,8(sp)
   1ce30:	df000204 	addi	fp,sp,8
   1ce34:	e13ffe15 	stw	r4,-8(fp)
   1ce38:	2805883a 	mov	r2,r5
   1ce3c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1ce40:	e0bffe17 	ldw	r2,-8(fp)
   1ce44:	10800a17 	ldw	r2,40(r2)
   1ce48:	1007883a 	mov	r3,r2
   1ce4c:	e0bfff03 	ldbu	r2,-4(fp)
   1ce50:	18800035 	stwio	r2,0(r3)
	return 0;
   1ce54:	0005883a 	mov	r2,zero
}
   1ce58:	e037883a 	mov	sp,fp
   1ce5c:	df000017 	ldw	fp,0(sp)
   1ce60:	dec00104 	addi	sp,sp,4
   1ce64:	f800283a 	ret

0001ce68 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ce68:	defffa04 	addi	sp,sp,-24
   1ce6c:	dfc00515 	stw	ra,20(sp)
   1ce70:	df000415 	stw	fp,16(sp)
   1ce74:	df000404 	addi	fp,sp,16
   1ce78:	e13ffd15 	stw	r4,-12(fp)
   1ce7c:	e17ffe15 	stw	r5,-8(fp)
   1ce80:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1ce84:	e0bffd17 	ldw	r2,-12(fp)
   1ce88:	10800a17 	ldw	r2,40(r2)
   1ce8c:	10800037 	ldwio	r2,0(r2)
   1ce90:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1ce94:	e0bffc17 	ldw	r2,-16(fp)
   1ce98:	1007883a 	mov	r3,r2
   1ce9c:	e0bffe17 	ldw	r2,-8(fp)
   1cea0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1cea4:	e13ffc17 	ldw	r4,-16(fp)
   1cea8:	001cde40 	call	1cde4 <alt_up_rs232_check_parity>
   1ceac:	1007883a 	mov	r3,r2
   1ceb0:	e0bfff17 	ldw	r2,-4(fp)
   1ceb4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1ceb8:	e0bffc17 	ldw	r2,-16(fp)
   1cebc:	10a0000c 	andi	r2,r2,32768
   1cec0:	1004d3fa 	srli	r2,r2,15
   1cec4:	10bfffc4 	addi	r2,r2,-1
}
   1cec8:	e037883a 	mov	sp,fp
   1cecc:	dfc00117 	ldw	ra,4(sp)
   1ced0:	df000017 	ldw	fp,0(sp)
   1ced4:	dec00204 	addi	sp,sp,8
   1ced8:	f800283a 	ret

0001cedc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1cedc:	defff804 	addi	sp,sp,-32
   1cee0:	dfc00715 	stw	ra,28(sp)
   1cee4:	df000615 	stw	fp,24(sp)
   1cee8:	df000604 	addi	fp,sp,24
   1ceec:	e13ffd15 	stw	r4,-12(fp)
   1cef0:	e17ffe15 	stw	r5,-8(fp)
   1cef4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1cef8:	e0bffd17 	ldw	r2,-12(fp)
   1cefc:	10800017 	ldw	r2,0(r2)
   1cf00:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1cf04:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1cf08:	00000e06 	br	1cf44 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1cf0c:	e0bffe17 	ldw	r2,-8(fp)
   1cf10:	10c00044 	addi	r3,r2,1
   1cf14:	e0fffe15 	stw	r3,-8(fp)
   1cf18:	e0fffc04 	addi	r3,fp,-16
   1cf1c:	e13ffb17 	ldw	r4,-20(fp)
   1cf20:	100b883a 	mov	r5,r2
   1cf24:	180d883a 	mov	r6,r3
   1cf28:	001ce680 	call	1ce68 <alt_up_rs232_read_data>
   1cf2c:	1000041e 	bne	r2,zero,1cf40 <alt_up_rs232_read_fd+0x64>
			count++;
   1cf30:	e0bffa17 	ldw	r2,-24(fp)
   1cf34:	10800044 	addi	r2,r2,1
   1cf38:	e0bffa15 	stw	r2,-24(fp)
   1cf3c:	00000106 	br	1cf44 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1cf40:	00000406 	br	1cf54 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1cf44:	e0bfff17 	ldw	r2,-4(fp)
   1cf48:	10ffffc4 	addi	r3,r2,-1
   1cf4c:	e0ffff15 	stw	r3,-4(fp)
   1cf50:	103fee1e 	bne	r2,zero,1cf0c <__alt_mem_Flash_flash_data+0xf401cf0c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1cf54:	e0bffa17 	ldw	r2,-24(fp)
}
   1cf58:	e037883a 	mov	sp,fp
   1cf5c:	dfc00117 	ldw	ra,4(sp)
   1cf60:	df000017 	ldw	fp,0(sp)
   1cf64:	dec00204 	addi	sp,sp,8
   1cf68:	f800283a 	ret

0001cf6c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1cf6c:	defff904 	addi	sp,sp,-28
   1cf70:	dfc00615 	stw	ra,24(sp)
   1cf74:	df000515 	stw	fp,20(sp)
   1cf78:	df000504 	addi	fp,sp,20
   1cf7c:	e13ffd15 	stw	r4,-12(fp)
   1cf80:	e17ffe15 	stw	r5,-8(fp)
   1cf84:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1cf88:	e0bffd17 	ldw	r2,-12(fp)
   1cf8c:	10800017 	ldw	r2,0(r2)
   1cf90:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1cf94:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1cf98:	00000f06 	br	1cfd8 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1cf9c:	e0bffe17 	ldw	r2,-8(fp)
   1cfa0:	10800003 	ldbu	r2,0(r2)
   1cfa4:	10803fcc 	andi	r2,r2,255
   1cfa8:	e13ffc17 	ldw	r4,-16(fp)
   1cfac:	100b883a 	mov	r5,r2
   1cfb0:	001ce280 	call	1ce28 <alt_up_rs232_write_data>
   1cfb4:	1000071e 	bne	r2,zero,1cfd4 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1cfb8:	e0bffb17 	ldw	r2,-20(fp)
   1cfbc:	10800044 	addi	r2,r2,1
   1cfc0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1cfc4:	e0bffe17 	ldw	r2,-8(fp)
   1cfc8:	10800044 	addi	r2,r2,1
   1cfcc:	e0bffe15 	stw	r2,-8(fp)
   1cfd0:	00000106 	br	1cfd8 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1cfd4:	00000406 	br	1cfe8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1cfd8:	e0bfff17 	ldw	r2,-4(fp)
   1cfdc:	10ffffc4 	addi	r3,r2,-1
   1cfe0:	e0ffff15 	stw	r3,-4(fp)
   1cfe4:	103fed1e 	bne	r2,zero,1cf9c <__alt_mem_Flash_flash_data+0xf401cf9c>
			ptr++;
		}
		else
			break;
	}
	return count;
   1cfe8:	e0bffb17 	ldw	r2,-20(fp)
}
   1cfec:	e037883a 	mov	sp,fp
   1cff0:	dfc00117 	ldw	ra,4(sp)
   1cff4:	df000017 	ldw	fp,0(sp)
   1cff8:	dec00204 	addi	sp,sp,8
   1cffc:	f800283a 	ret

0001d000 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1d000:	defffc04 	addi	sp,sp,-16
   1d004:	dfc00315 	stw	ra,12(sp)
   1d008:	df000215 	stw	fp,8(sp)
   1d00c:	df000204 	addi	fp,sp,8
   1d010:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1d014:	e13fff17 	ldw	r4,-4(fp)
   1d018:	014000b4 	movhi	r5,2
   1d01c:	29468504 	addi	r5,r5,6676
   1d020:	001dc0c0 	call	1dc0c <alt_find_dev>
   1d024:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d028:	e0bffe17 	ldw	r2,-8(fp)
}
   1d02c:	e037883a 	mov	sp,fp
   1d030:	dfc00117 	ldw	ra,4(sp)
   1d034:	df000017 	ldw	fp,0(sp)
   1d038:	dec00204 	addi	sp,sp,8
   1d03c:	f800283a 	ret

0001d040 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1d040:	defffc04 	addi	sp,sp,-16
   1d044:	dfc00315 	stw	ra,12(sp)
   1d048:	df000215 	stw	fp,8(sp)
   1d04c:	df000204 	addi	fp,sp,8
   1d050:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1d054:	e0bfff17 	ldw	r2,-4(fp)
   1d058:	10800217 	ldw	r2,8(r2)
   1d05c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1d060:	00000b06 	br	1d090 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1d064:	e13ffe17 	ldw	r4,-8(fp)
   1d068:	014000b4 	movhi	r5,2
   1d06c:	297d8d04 	addi	r5,r5,-2508
   1d070:	00022b40 	call	22b4 <strcmp>
   1d074:	1000031e 	bne	r2,zero,1d084 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1d078:	e0bffe17 	ldw	r2,-8(fp)
   1d07c:	10000005 	stb	zero,0(r2)
			break;
   1d080:	00000906 	br	1d0a8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1d084:	e0bffe17 	ldw	r2,-8(fp)
   1d088:	10800044 	addi	r2,r2,1
   1d08c:	e0bffe15 	stw	r2,-8(fp)
   1d090:	e0bffe17 	ldw	r2,-8(fp)
   1d094:	10800003 	ldbu	r2,0(r2)
   1d098:	10803fcc 	andi	r2,r2,255
   1d09c:	1080201c 	xori	r2,r2,128
   1d0a0:	10bfe004 	addi	r2,r2,-128
   1d0a4:	103fef1e 	bne	r2,zero,1d064 <__alt_mem_Flash_flash_data+0xf401d064>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1d0a8:	0001883a 	nop
}
   1d0ac:	e037883a 	mov	sp,fp
   1d0b0:	dfc00117 	ldw	ra,4(sp)
   1d0b4:	df000017 	ldw	fp,0(sp)
   1d0b8:	dec00204 	addi	sp,sp,8
   1d0bc:	f800283a 	ret

0001d0c0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1d0c0:	defffc04 	addi	sp,sp,-16
   1d0c4:	dfc00315 	stw	ra,12(sp)
   1d0c8:	df000215 	stw	fp,8(sp)
   1d0cc:	df000204 	addi	fp,sp,8
   1d0d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1d0d4:	e13fff17 	ldw	r4,-4(fp)
   1d0d8:	014000b4 	movhi	r5,2
   1d0dc:	29468504 	addi	r5,r5,6676
   1d0e0:	001dc0c0 	call	1dc0c <alt_find_dev>
   1d0e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d0e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1d0ec:	e037883a 	mov	sp,fp
   1d0f0:	dfc00117 	ldw	ra,4(sp)
   1d0f4:	df000017 	ldw	fp,0(sp)
   1d0f8:	dec00204 	addi	sp,sp,8
   1d0fc:	f800283a 	ret

0001d100 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1d100:	defffa04 	addi	sp,sp,-24
   1d104:	df000515 	stw	fp,20(sp)
   1d108:	df000504 	addi	fp,sp,20
   1d10c:	e13ffc15 	stw	r4,-16(fp)
   1d110:	2805883a 	mov	r2,r5
   1d114:	e1bffe15 	stw	r6,-8(fp)
   1d118:	e1ffff15 	stw	r7,-4(fp)
   1d11c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1d120:	e0bffc17 	ldw	r2,-16(fp)
   1d124:	10800c17 	ldw	r2,48(r2)
   1d128:	e0fffe17 	ldw	r3,-8(fp)
   1d12c:	1880042e 	bgeu	r3,r2,1d140 <alt_up_char_buffer_draw+0x40>
   1d130:	e0bffc17 	ldw	r2,-16(fp)
   1d134:	10800d17 	ldw	r2,52(r2)
   1d138:	e0ffff17 	ldw	r3,-4(fp)
   1d13c:	18800236 	bltu	r3,r2,1d148 <alt_up_char_buffer_draw+0x48>
		return -1;
   1d140:	00bfffc4 	movi	r2,-1
   1d144:	00001d06 	br	1d1bc <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1d148:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1d14c:	e0bffc17 	ldw	r2,-16(fp)
   1d150:	10c00f17 	ldw	r3,60(r2)
   1d154:	e0bffe17 	ldw	r2,-8(fp)
   1d158:	1884703a 	and	r2,r3,r2
   1d15c:	e0fffc17 	ldw	r3,-16(fp)
   1d160:	18c00e17 	ldw	r3,56(r3)
   1d164:	10c4983a 	sll	r2,r2,r3
   1d168:	e0fffb17 	ldw	r3,-20(fp)
   1d16c:	1884b03a 	or	r2,r3,r2
   1d170:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1d174:	e0bffc17 	ldw	r2,-16(fp)
   1d178:	10c01117 	ldw	r3,68(r2)
   1d17c:	e0bfff17 	ldw	r2,-4(fp)
   1d180:	1884703a 	and	r2,r3,r2
   1d184:	e0fffc17 	ldw	r3,-16(fp)
   1d188:	18c01017 	ldw	r3,64(r3)
   1d18c:	10c4983a 	sll	r2,r2,r3
   1d190:	e0fffb17 	ldw	r3,-20(fp)
   1d194:	1884b03a 	or	r2,r3,r2
   1d198:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1d19c:	e0bffc17 	ldw	r2,-16(fp)
   1d1a0:	10c00b17 	ldw	r3,44(r2)
   1d1a4:	e0bffb17 	ldw	r2,-20(fp)
   1d1a8:	1885883a 	add	r2,r3,r2
   1d1ac:	1007883a 	mov	r3,r2
   1d1b0:	e0bffd03 	ldbu	r2,-12(fp)
   1d1b4:	18800025 	stbio	r2,0(r3)

	return 0;
   1d1b8:	0005883a 	mov	r2,zero
}
   1d1bc:	e037883a 	mov	sp,fp
   1d1c0:	df000017 	ldw	fp,0(sp)
   1d1c4:	dec00104 	addi	sp,sp,4
   1d1c8:	f800283a 	ret

0001d1cc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1d1cc:	defffa04 	addi	sp,sp,-24
   1d1d0:	df000515 	stw	fp,20(sp)
   1d1d4:	df000504 	addi	fp,sp,20
   1d1d8:	e13ffc15 	stw	r4,-16(fp)
   1d1dc:	e17ffd15 	stw	r5,-12(fp)
   1d1e0:	e1bffe15 	stw	r6,-8(fp)
   1d1e4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1d1e8:	e0bffc17 	ldw	r2,-16(fp)
   1d1ec:	10800c17 	ldw	r2,48(r2)
   1d1f0:	e0fffe17 	ldw	r3,-8(fp)
   1d1f4:	1880042e 	bgeu	r3,r2,1d208 <alt_up_char_buffer_string+0x3c>
   1d1f8:	e0bffc17 	ldw	r2,-16(fp)
   1d1fc:	10800d17 	ldw	r2,52(r2)
   1d200:	e0ffff17 	ldw	r3,-4(fp)
   1d204:	18800236 	bltu	r3,r2,1d210 <alt_up_char_buffer_string+0x44>
		return -1;
   1d208:	00bfffc4 	movi	r2,-1
   1d20c:	00002b06 	br	1d2bc <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1d210:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1d214:	e0bffc17 	ldw	r2,-16(fp)
   1d218:	10801017 	ldw	r2,64(r2)
   1d21c:	1007883a 	mov	r3,r2
   1d220:	e0bfff17 	ldw	r2,-4(fp)
   1d224:	10c6983a 	sll	r3,r2,r3
   1d228:	e0bffe17 	ldw	r2,-8(fp)
   1d22c:	1885883a 	add	r2,r3,r2
   1d230:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1d234:	00001a06 	br	1d2a0 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1d238:	e0bffc17 	ldw	r2,-16(fp)
   1d23c:	10c00b17 	ldw	r3,44(r2)
   1d240:	e0bffb17 	ldw	r2,-20(fp)
   1d244:	1885883a 	add	r2,r3,r2
   1d248:	1007883a 	mov	r3,r2
   1d24c:	e0bffd17 	ldw	r2,-12(fp)
   1d250:	10800003 	ldbu	r2,0(r2)
   1d254:	10803fcc 	andi	r2,r2,255
   1d258:	1080201c 	xori	r2,r2,128
   1d25c:	10bfe004 	addi	r2,r2,-128
   1d260:	18800025 	stbio	r2,0(r3)
		++ptr;
   1d264:	e0bffd17 	ldw	r2,-12(fp)
   1d268:	10800044 	addi	r2,r2,1
   1d26c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1d270:	e0bffe17 	ldw	r2,-8(fp)
   1d274:	10800044 	addi	r2,r2,1
   1d278:	e0bffe15 	stw	r2,-8(fp)
   1d27c:	e0bffc17 	ldw	r2,-16(fp)
   1d280:	10800c17 	ldw	r2,48(r2)
   1d284:	e0fffe17 	ldw	r3,-8(fp)
   1d288:	18800236 	bltu	r3,r2,1d294 <alt_up_char_buffer_string+0xc8>
			return -1;
   1d28c:	00bfffc4 	movi	r2,-1
   1d290:	00000a06 	br	1d2bc <alt_up_char_buffer_string+0xf0>
		++offset;
   1d294:	e0bffb17 	ldw	r2,-20(fp)
   1d298:	10800044 	addi	r2,r2,1
   1d29c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1d2a0:	e0bffd17 	ldw	r2,-12(fp)
   1d2a4:	10800003 	ldbu	r2,0(r2)
   1d2a8:	10803fcc 	andi	r2,r2,255
   1d2ac:	1080201c 	xori	r2,r2,128
   1d2b0:	10bfe004 	addi	r2,r2,-128
   1d2b4:	103fe01e 	bne	r2,zero,1d238 <__alt_mem_Flash_flash_data+0xf401d238>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1d2b8:	0005883a 	mov	r2,zero
}
   1d2bc:	e037883a 	mov	sp,fp
   1d2c0:	df000017 	ldw	fp,0(sp)
   1d2c4:	dec00104 	addi	sp,sp,4
   1d2c8:	f800283a 	ret

0001d2cc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1d2cc:	defffe04 	addi	sp,sp,-8
   1d2d0:	df000115 	stw	fp,4(sp)
   1d2d4:	df000104 	addi	fp,sp,4
   1d2d8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1d2dc:	e0bfff17 	ldw	r2,-4(fp)
   1d2e0:	10800a17 	ldw	r2,40(r2)
   1d2e4:	10800084 	addi	r2,r2,2
   1d2e8:	1007883a 	mov	r3,r2
   1d2ec:	00800044 	movi	r2,1
   1d2f0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1d2f4:	0001883a 	nop
   1d2f8:	e0bfff17 	ldw	r2,-4(fp)
   1d2fc:	10800a17 	ldw	r2,40(r2)
   1d300:	10800084 	addi	r2,r2,2
   1d304:	10800023 	ldbuio	r2,0(r2)
   1d308:	10803fcc 	andi	r2,r2,255
   1d30c:	1080004c 	andi	r2,r2,1
   1d310:	103ff91e 	bne	r2,zero,1d2f8 <__alt_mem_Flash_flash_data+0xf401d2f8>
	return 0;
   1d314:	0005883a 	mov	r2,zero
}
   1d318:	e037883a 	mov	sp,fp
   1d31c:	df000017 	ldw	fp,0(sp)
   1d320:	dec00104 	addi	sp,sp,4
   1d324:	f800283a 	ret

0001d328 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   1d328:	defffd04 	addi	sp,sp,-12
   1d32c:	df000215 	stw	fp,8(sp)
   1d330:	df000204 	addi	fp,sp,8
   1d334:	2005883a 	mov	r2,r4
   1d338:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d33c:	e03ffe15 	stw	zero,-8(fp)
   1d340:	00000d06 	br	1d378 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   1d344:	008000b4 	movhi	r2,2
   1d348:	10865b04 	addi	r2,r2,6508
   1d34c:	e0fffe17 	ldw	r3,-8(fp)
   1d350:	10c5883a 	add	r2,r2,r3
   1d354:	10800003 	ldbu	r2,0(r2)
   1d358:	10c03fcc 	andi	r3,r2,255
   1d35c:	e0bfff03 	ldbu	r2,-4(fp)
   1d360:	1880021e 	bne	r3,r2,1d36c <get_multi_byte_make_code_index+0x44>
			return i;
   1d364:	e0bffe17 	ldw	r2,-8(fp)
   1d368:	00000706 	br	1d388 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d36c:	e0bffe17 	ldw	r2,-8(fp)
   1d370:	10800044 	addi	r2,r2,1
   1d374:	e0bffe15 	stw	r2,-8(fp)
   1d378:	e0bffe17 	ldw	r2,-8(fp)
   1d37c:	108019b0 	cmpltui	r2,r2,102
   1d380:	103ff01e 	bne	r2,zero,1d344 <__alt_mem_Flash_flash_data+0xf401d344>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1d384:	00801984 	movi	r2,102
}
   1d388:	e037883a 	mov	sp,fp
   1d38c:	df000017 	ldw	fp,0(sp)
   1d390:	dec00104 	addi	sp,sp,4
   1d394:	f800283a 	ret

0001d398 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   1d398:	defffd04 	addi	sp,sp,-12
   1d39c:	df000215 	stw	fp,8(sp)
   1d3a0:	df000204 	addi	fp,sp,8
   1d3a4:	2005883a 	mov	r2,r4
   1d3a8:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d3ac:	e03ffe15 	stw	zero,-8(fp)
   1d3b0:	00000d06 	br	1d3e8 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   1d3b4:	008000b4 	movhi	r2,2
   1d3b8:	10864184 	addi	r2,r2,6406
   1d3bc:	e0fffe17 	ldw	r3,-8(fp)
   1d3c0:	10c5883a 	add	r2,r2,r3
   1d3c4:	10800003 	ldbu	r2,0(r2)
   1d3c8:	10c03fcc 	andi	r3,r2,255
   1d3cc:	e0bfff03 	ldbu	r2,-4(fp)
   1d3d0:	1880021e 	bne	r3,r2,1d3dc <get_single_byte_make_code_index+0x44>
			return i;
   1d3d4:	e0bffe17 	ldw	r2,-8(fp)
   1d3d8:	00000706 	br	1d3f8 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d3dc:	e0bffe17 	ldw	r2,-8(fp)
   1d3e0:	10800044 	addi	r2,r2,1
   1d3e4:	e0bffe15 	stw	r2,-8(fp)
   1d3e8:	e0bffe17 	ldw	r2,-8(fp)
   1d3ec:	108019b0 	cmpltui	r2,r2,102
   1d3f0:	103ff01e 	bne	r2,zero,1d3b4 <__alt_mem_Flash_flash_data+0xf401d3b4>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1d3f4:	00801984 	movi	r2,102
}
   1d3f8:	e037883a 	mov	sp,fp
   1d3fc:	df000017 	ldw	fp,0(sp)
   1d400:	dec00104 	addi	sp,sp,4
   1d404:	f800283a 	ret

0001d408 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1d408:	defff804 	addi	sp,sp,-32
   1d40c:	dfc00715 	stw	ra,28(sp)
   1d410:	df000615 	stw	fp,24(sp)
   1d414:	df000604 	addi	fp,sp,24
   1d418:	e13ffc15 	stw	r4,-16(fp)
   1d41c:	2805883a 	mov	r2,r5
   1d420:	e1bffe15 	stw	r6,-8(fp)
   1d424:	e1ffff15 	stw	r7,-4(fp)
   1d428:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   1d42c:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   1d430:	00801984 	movi	r2,102
   1d434:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   1d438:	e0800217 	ldw	r2,8(fp)
   1d43c:	10000005 	stb	zero,0(r2)
	switch (state)
   1d440:	e0bffc17 	ldw	r2,-16(fp)
   1d444:	10c00060 	cmpeqi	r3,r2,1
   1d448:	18003a1e 	bne	r3,zero,1d534 <get_next_state+0x12c>
   1d44c:	0080052e 	bgeu	zero,r2,1d464 <get_next_state+0x5c>
   1d450:	10c000a0 	cmpeqi	r3,r2,2
   1d454:	18004c1e 	bne	r3,zero,1d588 <get_next_state+0x180>
   1d458:	108000e0 	cmpeqi	r2,r2,3
   1d45c:	10005f1e 	bne	r2,zero,1d5dc <get_next_state+0x1d4>
   1d460:	00007306 	br	1d630 <get_next_state+0x228>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   1d464:	e0bffd03 	ldbu	r2,-12(fp)
   1d468:	10803818 	cmpnei	r2,r2,224
   1d46c:	1000031e 	bne	r2,zero,1d47c <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   1d470:	00800044 	movi	r2,1
   1d474:	e0bffa15 	stw	r2,-24(fp)
   1d478:	00002d06 	br	1d530 <get_next_state+0x128>
			}
			else if (byte == 0xF0)
   1d47c:	e0bffd03 	ldbu	r2,-12(fp)
   1d480:	10803c18 	cmpnei	r2,r2,240
   1d484:	1000031e 	bne	r2,zero,1d494 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   1d488:	00800084 	movi	r2,2
   1d48c:	e0bffa15 	stw	r2,-24(fp)
   1d490:	00002706 	br	1d530 <get_next_state+0x128>
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   1d494:	e0bffd03 	ldbu	r2,-12(fp)
   1d498:	1009883a 	mov	r4,r2
   1d49c:	001d3980 	call	1d398 <get_single_byte_make_code_index>
   1d4a0:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   1d4a4:	e0bffb17 	ldw	r2,-20(fp)
   1d4a8:	10800a30 	cmpltui	r2,r2,40
   1d4ac:	1000061e 	bne	r2,zero,1d4c8 <get_next_state+0xc0>
   1d4b0:	e0bffb17 	ldw	r2,-20(fp)
   1d4b4:	10801120 	cmpeqi	r2,r2,68
   1d4b8:	1000031e 	bne	r2,zero,1d4c8 <get_next_state+0xc0>
   1d4bc:	e0bffb17 	ldw	r2,-20(fp)
   1d4c0:	10801430 	cmpltui	r2,r2,80
   1d4c4:	1000111e 	bne	r2,zero,1d50c <get_next_state+0x104>
   1d4c8:	e0bffb17 	ldw	r2,-20(fp)
   1d4cc:	108019a0 	cmpeqi	r2,r2,102
   1d4d0:	10000e1e 	bne	r2,zero,1d50c <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   1d4d4:	e0bffe17 	ldw	r2,-8(fp)
   1d4d8:	00c00044 	movi	r3,1
   1d4dc:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   1d4e0:	008000b4 	movhi	r2,2
   1d4e4:	10862804 	addi	r2,r2,6304
   1d4e8:	e0fffb17 	ldw	r3,-20(fp)
   1d4ec:	10c5883a 	add	r2,r2,r3
   1d4f0:	10c00003 	ldbu	r3,0(r2)
   1d4f4:	e0800217 	ldw	r2,8(fp)
   1d4f8:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   1d4fc:	e0bfff17 	ldw	r2,-4(fp)
   1d500:	e0fffd03 	ldbu	r3,-12(fp)
   1d504:	10c00005 	stb	r3,0(r2)
   1d508:	00000606 	br	1d524 <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   1d50c:	e0bffe17 	ldw	r2,-8(fp)
   1d510:	00c00084 	movi	r3,2
   1d514:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   1d518:	e0bfff17 	ldw	r2,-4(fp)
   1d51c:	e0fffd03 	ldbu	r3,-12(fp)
   1d520:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   1d524:	00800104 	movi	r2,4
   1d528:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1d52c:	00004406 	br	1d640 <get_next_state+0x238>
   1d530:	00004306 	br	1d640 <get_next_state+0x238>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   1d534:	e0bffd03 	ldbu	r2,-12(fp)
   1d538:	10803c20 	cmpeqi	r2,r2,240
   1d53c:	10000c1e 	bne	r2,zero,1d570 <get_next_state+0x168>
   1d540:	e0bffd03 	ldbu	r2,-12(fp)
   1d544:	10803820 	cmpeqi	r2,r2,224
   1d548:	1000091e 	bne	r2,zero,1d570 <get_next_state+0x168>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   1d54c:	e0bffe17 	ldw	r2,-8(fp)
   1d550:	00c000c4 	movi	r3,3
   1d554:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d558:	e0bfff17 	ldw	r2,-4(fp)
   1d55c:	e0fffd03 	ldbu	r3,-12(fp)
   1d560:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d564:	00800104 	movi	r2,4
   1d568:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   1d56c:	00003406 	br	1d640 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   1d570:	e0bffe17 	ldw	r2,-8(fp)
   1d574:	00c00104 	movi	r3,4
   1d578:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   1d57c:	008000c4 	movi	r2,3
   1d580:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1d584:	00002e06 	br	1d640 <get_next_state+0x238>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1d588:	e0bffd03 	ldbu	r2,-12(fp)
   1d58c:	10803c20 	cmpeqi	r2,r2,240
   1d590:	10000c1e 	bne	r2,zero,1d5c4 <get_next_state+0x1bc>
   1d594:	e0bffd03 	ldbu	r2,-12(fp)
   1d598:	10803820 	cmpeqi	r2,r2,224
   1d59c:	1000091e 	bne	r2,zero,1d5c4 <get_next_state+0x1bc>
			{
				*decode_mode = KB_BREAK_CODE;
   1d5a0:	e0bffe17 	ldw	r2,-8(fp)
   1d5a4:	00c00104 	movi	r3,4
   1d5a8:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d5ac:	e0bfff17 	ldw	r2,-4(fp)
   1d5b0:	e0fffd03 	ldbu	r3,-12(fp)
   1d5b4:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d5b8:	00800104 	movi	r2,4
   1d5bc:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   1d5c0:	00001f06 	br	1d640 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   1d5c4:	00800084 	movi	r2,2
   1d5c8:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   1d5cc:	e0bffe17 	ldw	r2,-8(fp)
   1d5d0:	00c00104 	movi	r3,4
   1d5d4:	10c00015 	stw	r3,0(r2)
			}
			break;
   1d5d8:	00001906 	br	1d640 <get_next_state+0x238>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1d5dc:	e0bffd03 	ldbu	r2,-12(fp)
   1d5e0:	10803c20 	cmpeqi	r2,r2,240
   1d5e4:	10000c1e 	bne	r2,zero,1d618 <get_next_state+0x210>
   1d5e8:	e0bffd03 	ldbu	r2,-12(fp)
   1d5ec:	10803820 	cmpeqi	r2,r2,224
   1d5f0:	1000091e 	bne	r2,zero,1d618 <get_next_state+0x210>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   1d5f4:	e0bffe17 	ldw	r2,-8(fp)
   1d5f8:	00c00144 	movi	r3,5
   1d5fc:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1d600:	e0bfff17 	ldw	r2,-4(fp)
   1d604:	e0fffd03 	ldbu	r3,-12(fp)
   1d608:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1d60c:	00800104 	movi	r2,4
   1d610:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   1d614:	00000a06 	br	1d640 <get_next_state+0x238>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   1d618:	008000c4 	movi	r2,3
   1d61c:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   1d620:	e0bffe17 	ldw	r2,-8(fp)
   1d624:	00c00144 	movi	r3,5
   1d628:	10c00015 	stw	r3,0(r2)
			}
			break;
   1d62c:	00000406 	br	1d640 <get_next_state+0x238>
		default:
			*decode_mode = KB_INVALID_CODE;
   1d630:	e0bffe17 	ldw	r2,-8(fp)
   1d634:	00c00184 	movi	r3,6
   1d638:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   1d63c:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   1d640:	e0bffa17 	ldw	r2,-24(fp)
}
   1d644:	e037883a 	mov	sp,fp
   1d648:	dfc00117 	ldw	ra,4(sp)
   1d64c:	df000017 	ldw	fp,0(sp)
   1d650:	dec00204 	addi	sp,sp,8
   1d654:	f800283a 	ret

0001d658 <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1d658:	defff704 	addi	sp,sp,-36
   1d65c:	dfc00815 	stw	ra,32(sp)
   1d660:	df000715 	stw	fp,28(sp)
   1d664:	df000704 	addi	fp,sp,28
   1d668:	e13ffc15 	stw	r4,-16(fp)
   1d66c:	e17ffd15 	stw	r5,-12(fp)
   1d670:	e1bffe15 	stw	r6,-8(fp)
   1d674:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   1d678:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   1d67c:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   1d680:	e0bffd17 	ldw	r2,-12(fp)
   1d684:	00c00184 	movi	r3,6
   1d688:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   1d68c:	e0bffb04 	addi	r2,fp,-20
   1d690:	e13ffc17 	ldw	r4,-16(fp)
   1d694:	100b883a 	mov	r5,r2
   1d698:	001ca8c0 	call	1ca8c <alt_up_ps2_read_data_byte>
   1d69c:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   1d6a0:	e0bffa17 	ldw	r2,-24(fp)
   1d6a4:	10000626 	beq	r2,zero,1d6c0 <decode_scancode+0x68>
			if (state == STATE_INIT)
   1d6a8:	d0a8f717 	ldw	r2,-23588(gp)
   1d6ac:	1000021e 	bne	r2,zero,1d6b8 <decode_scancode+0x60>
				return status_read;
   1d6b0:	e0bffa17 	ldw	r2,-24(fp)
   1d6b4:	00001106 	br	1d6fc <decode_scancode+0xa4>
			else
				return -2;
   1d6b8:	00bfff84 	movi	r2,-2
   1d6bc:	00000f06 	br	1d6fc <decode_scancode+0xa4>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   1d6c0:	d128f717 	ldw	r4,-23588(gp)
   1d6c4:	e0bffb03 	ldbu	r2,-20(fp)
   1d6c8:	10c03fcc 	andi	r3,r2,255
   1d6cc:	e0bfff17 	ldw	r2,-4(fp)
   1d6d0:	d8800015 	stw	r2,0(sp)
   1d6d4:	180b883a 	mov	r5,r3
   1d6d8:	e1bffd17 	ldw	r6,-12(fp)
   1d6dc:	e1fffe17 	ldw	r7,-8(fp)
   1d6e0:	001d4080 	call	1d408 <get_next_state>
   1d6e4:	d0a8f715 	stw	r2,-23588(gp)
	} while ( state != STATE_DONE );
   1d6e8:	d0a8f717 	ldw	r2,-23588(gp)
   1d6ec:	10800118 	cmpnei	r2,r2,4
   1d6f0:	103fe61e 	bne	r2,zero,1d68c <__alt_mem_Flash_flash_data+0xf401d68c>

	state = STATE_INIT;
   1d6f4:	d028f715 	stw	zero,-23588(gp)

	return 0;
   1d6f8:	0005883a 	mov	r2,zero
}
   1d6fc:	e037883a 	mov	sp,fp
   1d700:	dfc00117 	ldw	ra,4(sp)
   1d704:	df000017 	ldw	fp,0(sp)
   1d708:	dec00204 	addi	sp,sp,8
   1d70c:	f800283a 	ret

0001d710 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   1d710:	defffb04 	addi	sp,sp,-20
   1d714:	dfc00415 	stw	ra,16(sp)
   1d718:	df000315 	stw	fp,12(sp)
   1d71c:	df000304 	addi	fp,sp,12
   1d720:	e13ffe15 	stw	r4,-8(fp)
   1d724:	2805883a 	mov	r2,r5
   1d728:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
   1d72c:	e13ffe17 	ldw	r4,-8(fp)
   1d730:	01403cc4 	movi	r5,243
   1d734:	001c9840 	call	1c984 <alt_up_ps2_write_data_byte_with_ack>
   1d738:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   1d73c:	e0bffd17 	ldw	r2,-12(fp)
   1d740:	1000061e 	bne	r2,zero,1d75c <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   1d744:	e0bfff03 	ldbu	r2,-4(fp)
   1d748:	108007cc 	andi	r2,r2,31
   1d74c:	e13ffe17 	ldw	r4,-8(fp)
   1d750:	100b883a 	mov	r5,r2
   1d754:	001c9840 	call	1c984 <alt_up_ps2_write_data_byte_with_ack>
   1d758:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   1d75c:	e0bffd17 	ldw	r2,-12(fp)
}
   1d760:	e037883a 	mov	sp,fp
   1d764:	dfc00117 	ldw	ra,4(sp)
   1d768:	df000017 	ldw	fp,0(sp)
   1d76c:	dec00204 	addi	sp,sp,8
   1d770:	f800283a 	ret

0001d774 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   1d774:	defffa04 	addi	sp,sp,-24
   1d778:	dfc00515 	stw	ra,20(sp)
   1d77c:	df000415 	stw	fp,16(sp)
   1d780:	df000404 	addi	fp,sp,16
   1d784:	e13ffd15 	stw	r4,-12(fp)
   1d788:	2805883a 	mov	r2,r5
   1d78c:	e1bfff15 	stw	r6,-4(fp)
   1d790:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   1d794:	e0bffd17 	ldw	r2,-12(fp)
   1d798:	10c000a0 	cmpeqi	r3,r2,2
   1d79c:	1800131e 	bne	r3,zero,1d7ec <translate_make_code+0x78>
   1d7a0:	10c000e0 	cmpeqi	r3,r2,3
   1d7a4:	1800201e 	bne	r3,zero,1d828 <translate_make_code+0xb4>
   1d7a8:	10800060 	cmpeqi	r2,r2,1
   1d7ac:	10002d26 	beq	r2,zero,1d864 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1d7b0:	e0bffe03 	ldbu	r2,-8(fp)
   1d7b4:	1009883a 	mov	r4,r2
   1d7b8:	001d3980 	call	1d398 <get_single_byte_make_code_index>
   1d7bc:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d7c0:	008000b4 	movhi	r2,2
   1d7c4:	1085c204 	addi	r2,r2,5896
   1d7c8:	e0fffc17 	ldw	r3,-16(fp)
   1d7cc:	18c7883a 	add	r3,r3,r3
   1d7d0:	18c7883a 	add	r3,r3,r3
   1d7d4:	10c5883a 	add	r2,r2,r3
   1d7d8:	10800017 	ldw	r2,0(r2)
   1d7dc:	e13fff17 	ldw	r4,-4(fp)
   1d7e0:	100b883a 	mov	r5,r2
   1d7e4:	00023580 	call	2358 <strcpy>
			break;
   1d7e8:	00002206 	br	1d874 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1d7ec:	e0bffe03 	ldbu	r2,-8(fp)
   1d7f0:	1009883a 	mov	r4,r2
   1d7f4:	001d3980 	call	1d398 <get_single_byte_make_code_index>
   1d7f8:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d7fc:	008000b4 	movhi	r2,2
   1d800:	1085c204 	addi	r2,r2,5896
   1d804:	e0fffc17 	ldw	r3,-16(fp)
   1d808:	18c7883a 	add	r3,r3,r3
   1d80c:	18c7883a 	add	r3,r3,r3
   1d810:	10c5883a 	add	r2,r2,r3
   1d814:	10800017 	ldw	r2,0(r2)
   1d818:	e13fff17 	ldw	r4,-4(fp)
   1d81c:	100b883a 	mov	r5,r2
   1d820:	00023580 	call	2358 <strcpy>
			break;
   1d824:	00001306 	br	1d874 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   1d828:	e0bffe03 	ldbu	r2,-8(fp)
   1d82c:	1009883a 	mov	r4,r2
   1d830:	001d3280 	call	1d328 <get_multi_byte_make_code_index>
   1d834:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1d838:	008000b4 	movhi	r2,2
   1d83c:	1085c204 	addi	r2,r2,5896
   1d840:	e0fffc17 	ldw	r3,-16(fp)
   1d844:	18c7883a 	add	r3,r3,r3
   1d848:	18c7883a 	add	r3,r3,r3
   1d84c:	10c5883a 	add	r2,r2,r3
   1d850:	10800017 	ldw	r2,0(r2)
   1d854:	e13fff17 	ldw	r4,-4(fp)
   1d858:	100b883a 	mov	r5,r2
   1d85c:	00023580 	call	2358 <strcpy>
			break;
   1d860:	00000406 	br	1d874 <translate_make_code+0x100>
		default:
			str = "";
   1d864:	008000b4 	movhi	r2,2
   1d868:	10be2204 	addi	r2,r2,-1912
   1d86c:	e0bfff15 	stw	r2,-4(fp)
			break;
   1d870:	0001883a 	nop
	}
}
   1d874:	e037883a 	mov	sp,fp
   1d878:	dfc00117 	ldw	ra,4(sp)
   1d87c:	df000017 	ldw	fp,0(sp)
   1d880:	dec00204 	addi	sp,sp,8
   1d884:	f800283a 	ret

0001d888 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   1d888:	defffb04 	addi	sp,sp,-20
   1d88c:	dfc00415 	stw	ra,16(sp)
   1d890:	df000315 	stw	fp,12(sp)
   1d894:	df000304 	addi	fp,sp,12
   1d898:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   1d89c:	e13fff17 	ldw	r4,-4(fp)
   1d8a0:	01403fc4 	movi	r5,255
   1d8a4:	001c9840 	call	1c984 <alt_up_ps2_write_data_byte_with_ack>
   1d8a8:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   1d8ac:	e0bffd17 	ldw	r2,-12(fp)
   1d8b0:	10000e1e 	bne	r2,zero,1d8ec <reset_keyboard+0x64>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   1d8b4:	e0bffe04 	addi	r2,fp,-8
   1d8b8:	e13fff17 	ldw	r4,-4(fp)
   1d8bc:	100b883a 	mov	r5,r2
   1d8c0:	001ca8c0 	call	1ca8c <alt_up_ps2_read_data_byte>
   1d8c4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1d8c8:	e0bffd17 	ldw	r2,-12(fp)
   1d8cc:	1000051e 	bne	r2,zero,1d8e4 <reset_keyboard+0x5c>
   1d8d0:	e0bffe03 	ldbu	r2,-8(fp)
   1d8d4:	10803fcc 	andi	r2,r2,255
   1d8d8:	10802a98 	cmpnei	r2,r2,170
   1d8dc:	1000011e 	bne	r2,zero,1d8e4 <reset_keyboard+0x5c>
   1d8e0:	00000206 	br	1d8ec <reset_keyboard+0x64>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   1d8e4:	00bfffc4 	movi	r2,-1
   1d8e8:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   1d8ec:	e0bffd17 	ldw	r2,-12(fp)
}
   1d8f0:	e037883a 	mov	sp,fp
   1d8f4:	dfc00117 	ldw	ra,4(sp)
   1d8f8:	df000017 	ldw	fp,0(sp)
   1d8fc:	dec00204 	addi	sp,sp,8
   1d900:	f800283a 	ret

0001d904 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d904:	defff504 	addi	sp,sp,-44
   1d908:	df000a15 	stw	fp,40(sp)
   1d90c:	df000a04 	addi	fp,sp,40
   1d910:	e13ffc15 	stw	r4,-16(fp)
   1d914:	e17ffd15 	stw	r5,-12(fp)
   1d918:	e1bffe15 	stw	r6,-8(fp)
   1d91c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d920:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d924:	008000b4 	movhi	r2,2
   1d928:	108f6e04 	addi	r2,r2,15800
   1d92c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1d930:	10003f26 	beq	r2,zero,1da30 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1d934:	e0bffc17 	ldw	r2,-16(fp)
   1d938:	10003b26 	beq	r2,zero,1da28 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1d93c:	e0bffc17 	ldw	r2,-16(fp)
   1d940:	e0fffe17 	ldw	r3,-8(fp)
   1d944:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d948:	e0bffc17 	ldw	r2,-16(fp)
   1d94c:	e0ffff17 	ldw	r3,-4(fp)
   1d950:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d954:	0005303a 	rdctl	r2,status
   1d958:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d95c:	e0fff817 	ldw	r3,-32(fp)
   1d960:	00bfff84 	movi	r2,-2
   1d964:	1884703a 	and	r2,r3,r2
   1d968:	1001703a 	wrctl	status,r2
  
  return context;
   1d96c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1d970:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d974:	008000b4 	movhi	r2,2
   1d978:	108f6f04 	addi	r2,r2,15804
   1d97c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1d980:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d984:	e0fffd17 	ldw	r3,-12(fp)
   1d988:	e0bff617 	ldw	r2,-40(fp)
   1d98c:	1885883a 	add	r2,r3,r2
   1d990:	10c00044 	addi	r3,r2,1
   1d994:	e0bffc17 	ldw	r2,-16(fp)
   1d998:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d99c:	e0bffc17 	ldw	r2,-16(fp)
   1d9a0:	10c00217 	ldw	r3,8(r2)
   1d9a4:	e0bff617 	ldw	r2,-40(fp)
   1d9a8:	1880042e 	bgeu	r3,r2,1d9bc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1d9ac:	e0bffc17 	ldw	r2,-16(fp)
   1d9b0:	00c00044 	movi	r3,1
   1d9b4:	10c00405 	stb	r3,16(r2)
   1d9b8:	00000206 	br	1d9c4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1d9bc:	e0bffc17 	ldw	r2,-16(fp)
   1d9c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d9c4:	e0fffc17 	ldw	r3,-16(fp)
   1d9c8:	008000b4 	movhi	r2,2
   1d9cc:	1086aa04 	addi	r2,r2,6824
   1d9d0:	e0bff915 	stw	r2,-28(fp)
   1d9d4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d9d8:	e0bffa17 	ldw	r2,-24(fp)
   1d9dc:	e0fff917 	ldw	r3,-28(fp)
   1d9e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d9e4:	e0bff917 	ldw	r2,-28(fp)
   1d9e8:	10c00017 	ldw	r3,0(r2)
   1d9ec:	e0bffa17 	ldw	r2,-24(fp)
   1d9f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d9f4:	e0bff917 	ldw	r2,-28(fp)
   1d9f8:	10800017 	ldw	r2,0(r2)
   1d9fc:	e0fffa17 	ldw	r3,-24(fp)
   1da00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1da04:	e0bff917 	ldw	r2,-28(fp)
   1da08:	e0fffa17 	ldw	r3,-24(fp)
   1da0c:	10c00015 	stw	r3,0(r2)
   1da10:	e0bff717 	ldw	r2,-36(fp)
   1da14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da18:	e0bffb17 	ldw	r2,-20(fp)
   1da1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1da20:	0005883a 	mov	r2,zero
   1da24:	00000306 	br	1da34 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1da28:	00bffa84 	movi	r2,-22
   1da2c:	00000106 	br	1da34 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1da30:	00bfde84 	movi	r2,-134
  }
}
   1da34:	e037883a 	mov	sp,fp
   1da38:	df000017 	ldw	fp,0(sp)
   1da3c:	dec00104 	addi	sp,sp,4
   1da40:	f800283a 	ret

0001da44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1da44:	deffff04 	addi	sp,sp,-4
   1da48:	df000015 	stw	fp,0(sp)
   1da4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1da50:	e037883a 	mov	sp,fp
   1da54:	df000017 	ldw	fp,0(sp)
   1da58:	dec00104 	addi	sp,sp,4
   1da5c:	f800283a 	ret

0001da60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1da60:	defffe04 	addi	sp,sp,-8
   1da64:	dfc00115 	stw	ra,4(sp)
   1da68:	df000015 	stw	fp,0(sp)
   1da6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1da70:	008000b4 	movhi	r2,2
   1da74:	10868804 	addi	r2,r2,6688
   1da78:	10800017 	ldw	r2,0(r2)
   1da7c:	10000526 	beq	r2,zero,1da94 <alt_get_errno+0x34>
   1da80:	008000b4 	movhi	r2,2
   1da84:	10868804 	addi	r2,r2,6688
   1da88:	10800017 	ldw	r2,0(r2)
   1da8c:	103ee83a 	callr	r2
   1da90:	00000206 	br	1da9c <alt_get_errno+0x3c>
   1da94:	008000b4 	movhi	r2,2
   1da98:	108f4f04 	addi	r2,r2,15676
}
   1da9c:	e037883a 	mov	sp,fp
   1daa0:	dfc00117 	ldw	ra,4(sp)
   1daa4:	df000017 	ldw	fp,0(sp)
   1daa8:	dec00204 	addi	sp,sp,8
   1daac:	f800283a 	ret

0001dab0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1dab0:	defffa04 	addi	sp,sp,-24
   1dab4:	dfc00515 	stw	ra,20(sp)
   1dab8:	df000415 	stw	fp,16(sp)
   1dabc:	df000404 	addi	fp,sp,16
   1dac0:	e13ffe15 	stw	r4,-8(fp)
   1dac4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1dac8:	e0bffe17 	ldw	r2,-8(fp)
   1dacc:	10000326 	beq	r2,zero,1dadc <alt_dev_llist_insert+0x2c>
   1dad0:	e0bffe17 	ldw	r2,-8(fp)
   1dad4:	10800217 	ldw	r2,8(r2)
   1dad8:	1000061e 	bne	r2,zero,1daf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1dadc:	001da600 	call	1da60 <alt_get_errno>
   1dae0:	1007883a 	mov	r3,r2
   1dae4:	00800584 	movi	r2,22
   1dae8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1daec:	00bffa84 	movi	r2,-22
   1daf0:	00001306 	br	1db40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1daf4:	e0bffe17 	ldw	r2,-8(fp)
   1daf8:	e0ffff17 	ldw	r3,-4(fp)
   1dafc:	e0fffc15 	stw	r3,-16(fp)
   1db00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1db04:	e0bffd17 	ldw	r2,-12(fp)
   1db08:	e0fffc17 	ldw	r3,-16(fp)
   1db0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1db10:	e0bffc17 	ldw	r2,-16(fp)
   1db14:	10c00017 	ldw	r3,0(r2)
   1db18:	e0bffd17 	ldw	r2,-12(fp)
   1db1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1db20:	e0bffc17 	ldw	r2,-16(fp)
   1db24:	10800017 	ldw	r2,0(r2)
   1db28:	e0fffd17 	ldw	r3,-12(fp)
   1db2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1db30:	e0bffc17 	ldw	r2,-16(fp)
   1db34:	e0fffd17 	ldw	r3,-12(fp)
   1db38:	10c00015 	stw	r3,0(r2)

  return 0;  
   1db3c:	0005883a 	mov	r2,zero
}
   1db40:	e037883a 	mov	sp,fp
   1db44:	dfc00117 	ldw	ra,4(sp)
   1db48:	df000017 	ldw	fp,0(sp)
   1db4c:	dec00204 	addi	sp,sp,8
   1db50:	f800283a 	ret

0001db54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1db54:	defffd04 	addi	sp,sp,-12
   1db58:	dfc00215 	stw	ra,8(sp)
   1db5c:	df000115 	stw	fp,4(sp)
   1db60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1db64:	008000b4 	movhi	r2,2
   1db68:	10bb7e04 	addi	r2,r2,-4616
   1db6c:	e0bfff15 	stw	r2,-4(fp)
   1db70:	00000606 	br	1db8c <_do_ctors+0x38>
        (*ctor) (); 
   1db74:	e0bfff17 	ldw	r2,-4(fp)
   1db78:	10800017 	ldw	r2,0(r2)
   1db7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1db80:	e0bfff17 	ldw	r2,-4(fp)
   1db84:	10bfff04 	addi	r2,r2,-4
   1db88:	e0bfff15 	stw	r2,-4(fp)
   1db8c:	e0ffff17 	ldw	r3,-4(fp)
   1db90:	008000b4 	movhi	r2,2
   1db94:	10bb7f04 	addi	r2,r2,-4612
   1db98:	18bff62e 	bgeu	r3,r2,1db74 <__alt_mem_Flash_flash_data+0xf401db74>
        (*ctor) (); 
}
   1db9c:	e037883a 	mov	sp,fp
   1dba0:	dfc00117 	ldw	ra,4(sp)
   1dba4:	df000017 	ldw	fp,0(sp)
   1dba8:	dec00204 	addi	sp,sp,8
   1dbac:	f800283a 	ret

0001dbb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1dbb0:	defffd04 	addi	sp,sp,-12
   1dbb4:	dfc00215 	stw	ra,8(sp)
   1dbb8:	df000115 	stw	fp,4(sp)
   1dbbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1dbc0:	008000b4 	movhi	r2,2
   1dbc4:	10bb7e04 	addi	r2,r2,-4616
   1dbc8:	e0bfff15 	stw	r2,-4(fp)
   1dbcc:	00000606 	br	1dbe8 <_do_dtors+0x38>
        (*dtor) (); 
   1dbd0:	e0bfff17 	ldw	r2,-4(fp)
   1dbd4:	10800017 	ldw	r2,0(r2)
   1dbd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1dbdc:	e0bfff17 	ldw	r2,-4(fp)
   1dbe0:	10bfff04 	addi	r2,r2,-4
   1dbe4:	e0bfff15 	stw	r2,-4(fp)
   1dbe8:	e0ffff17 	ldw	r3,-4(fp)
   1dbec:	008000b4 	movhi	r2,2
   1dbf0:	10bb7f04 	addi	r2,r2,-4612
   1dbf4:	18bff62e 	bgeu	r3,r2,1dbd0 <__alt_mem_Flash_flash_data+0xf401dbd0>
        (*dtor) (); 
}
   1dbf8:	e037883a 	mov	sp,fp
   1dbfc:	dfc00117 	ldw	ra,4(sp)
   1dc00:	df000017 	ldw	fp,0(sp)
   1dc04:	dec00204 	addi	sp,sp,8
   1dc08:	f800283a 	ret

0001dc0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1dc0c:	defffa04 	addi	sp,sp,-24
   1dc10:	dfc00515 	stw	ra,20(sp)
   1dc14:	df000415 	stw	fp,16(sp)
   1dc18:	df000404 	addi	fp,sp,16
   1dc1c:	e13ffe15 	stw	r4,-8(fp)
   1dc20:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1dc24:	e0bfff17 	ldw	r2,-4(fp)
   1dc28:	10800017 	ldw	r2,0(r2)
   1dc2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1dc30:	e13ffe17 	ldw	r4,-8(fp)
   1dc34:	00023e80 	call	23e8 <strlen>
   1dc38:	10800044 	addi	r2,r2,1
   1dc3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1dc40:	00000d06 	br	1dc78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1dc44:	e0bffc17 	ldw	r2,-16(fp)
   1dc48:	10c00217 	ldw	r3,8(r2)
   1dc4c:	e0bffd17 	ldw	r2,-12(fp)
   1dc50:	1809883a 	mov	r4,r3
   1dc54:	e17ffe17 	ldw	r5,-8(fp)
   1dc58:	100d883a 	mov	r6,r2
   1dc5c:	001ea9c0 	call	1ea9c <memcmp>
   1dc60:	1000021e 	bne	r2,zero,1dc6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1dc64:	e0bffc17 	ldw	r2,-16(fp)
   1dc68:	00000706 	br	1dc88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1dc6c:	e0bffc17 	ldw	r2,-16(fp)
   1dc70:	10800017 	ldw	r2,0(r2)
   1dc74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1dc78:	e0fffc17 	ldw	r3,-16(fp)
   1dc7c:	e0bfff17 	ldw	r2,-4(fp)
   1dc80:	18bff01e 	bne	r3,r2,1dc44 <__alt_mem_Flash_flash_data+0xf401dc44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1dc84:	0005883a 	mov	r2,zero
}
   1dc88:	e037883a 	mov	sp,fp
   1dc8c:	dfc00117 	ldw	ra,4(sp)
   1dc90:	df000017 	ldw	fp,0(sp)
   1dc94:	dec00204 	addi	sp,sp,8
   1dc98:	f800283a 	ret

0001dc9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1dc9c:	defffe04 	addi	sp,sp,-8
   1dca0:	dfc00115 	stw	ra,4(sp)
   1dca4:	df000015 	stw	fp,0(sp)
   1dca8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1dcac:	0009883a 	mov	r4,zero
   1dcb0:	01440004 	movi	r5,4096
   1dcb4:	001e9280 	call	1e928 <alt_icache_flush>
#endif
}
   1dcb8:	e037883a 	mov	sp,fp
   1dcbc:	dfc00117 	ldw	ra,4(sp)
   1dcc0:	df000017 	ldw	fp,0(sp)
   1dcc4:	dec00204 	addi	sp,sp,8
   1dcc8:	f800283a 	ret

0001dccc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1dccc:	defff904 	addi	sp,sp,-28
   1dcd0:	dfc00615 	stw	ra,24(sp)
   1dcd4:	df000515 	stw	fp,20(sp)
   1dcd8:	df000504 	addi	fp,sp,20
   1dcdc:	e13ffc15 	stw	r4,-16(fp)
   1dce0:	e17ffd15 	stw	r5,-12(fp)
   1dce4:	e1bffe15 	stw	r6,-8(fp)
   1dce8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1dcec:	e13ffd17 	ldw	r4,-12(fp)
   1dcf0:	e17ffe17 	ldw	r5,-8(fp)
   1dcf4:	e1bfff17 	ldw	r6,-4(fp)
   1dcf8:	001e0d00 	call	1e0d0 <open>
   1dcfc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1dd00:	e0bffb17 	ldw	r2,-20(fp)
   1dd04:	10001c16 	blt	r2,zero,1dd78 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1dd08:	008000b4 	movhi	r2,2
   1dd0c:	10805b04 	addi	r2,r2,364
   1dd10:	e0fffb17 	ldw	r3,-20(fp)
   1dd14:	18c00324 	muli	r3,r3,12
   1dd18:	10c5883a 	add	r2,r2,r3
   1dd1c:	10c00017 	ldw	r3,0(r2)
   1dd20:	e0bffc17 	ldw	r2,-16(fp)
   1dd24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1dd28:	008000b4 	movhi	r2,2
   1dd2c:	10805b04 	addi	r2,r2,364
   1dd30:	e0fffb17 	ldw	r3,-20(fp)
   1dd34:	18c00324 	muli	r3,r3,12
   1dd38:	18c00104 	addi	r3,r3,4
   1dd3c:	10c5883a 	add	r2,r2,r3
   1dd40:	10c00017 	ldw	r3,0(r2)
   1dd44:	e0bffc17 	ldw	r2,-16(fp)
   1dd48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1dd4c:	008000b4 	movhi	r2,2
   1dd50:	10805b04 	addi	r2,r2,364
   1dd54:	e0fffb17 	ldw	r3,-20(fp)
   1dd58:	18c00324 	muli	r3,r3,12
   1dd5c:	18c00204 	addi	r3,r3,8
   1dd60:	10c5883a 	add	r2,r2,r3
   1dd64:	10c00017 	ldw	r3,0(r2)
   1dd68:	e0bffc17 	ldw	r2,-16(fp)
   1dd6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1dd70:	e13ffb17 	ldw	r4,-20(fp)
   1dd74:	0011db80 	call	11db8 <alt_release_fd>
  }
} 
   1dd78:	e037883a 	mov	sp,fp
   1dd7c:	dfc00117 	ldw	ra,4(sp)
   1dd80:	df000017 	ldw	fp,0(sp)
   1dd84:	dec00204 	addi	sp,sp,8
   1dd88:	f800283a 	ret

0001dd8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1dd8c:	defffb04 	addi	sp,sp,-20
   1dd90:	dfc00415 	stw	ra,16(sp)
   1dd94:	df000315 	stw	fp,12(sp)
   1dd98:	df000304 	addi	fp,sp,12
   1dd9c:	e13ffd15 	stw	r4,-12(fp)
   1dda0:	e17ffe15 	stw	r5,-8(fp)
   1dda4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1dda8:	010000b4 	movhi	r4,2
   1ddac:	21005e04 	addi	r4,r4,376
   1ddb0:	e17ffd17 	ldw	r5,-12(fp)
   1ddb4:	01800044 	movi	r6,1
   1ddb8:	01c07fc4 	movi	r7,511
   1ddbc:	001dccc0 	call	1dccc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1ddc0:	010000b4 	movhi	r4,2
   1ddc4:	21005b04 	addi	r4,r4,364
   1ddc8:	e17ffe17 	ldw	r5,-8(fp)
   1ddcc:	000d883a 	mov	r6,zero
   1ddd0:	01c07fc4 	movi	r7,511
   1ddd4:	001dccc0 	call	1dccc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1ddd8:	010000b4 	movhi	r4,2
   1dddc:	21006104 	addi	r4,r4,388
   1dde0:	e17fff17 	ldw	r5,-4(fp)
   1dde4:	01800044 	movi	r6,1
   1dde8:	01c07fc4 	movi	r7,511
   1ddec:	001dccc0 	call	1dccc <alt_open_fd>
}  
   1ddf0:	e037883a 	mov	sp,fp
   1ddf4:	dfc00117 	ldw	ra,4(sp)
   1ddf8:	df000017 	ldw	fp,0(sp)
   1ddfc:	dec00204 	addi	sp,sp,8
   1de00:	f800283a 	ret

0001de04 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1de04:	defff004 	addi	sp,sp,-64
   1de08:	df000f15 	stw	fp,60(sp)
   1de0c:	df000f04 	addi	fp,sp,60
   1de10:	e13ffd15 	stw	r4,-12(fp)
   1de14:	e17ffe15 	stw	r5,-8(fp)
   1de18:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1de1c:	00bffa84 	movi	r2,-22
   1de20:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1de24:	e0bffd17 	ldw	r2,-12(fp)
   1de28:	10800828 	cmpgeui	r2,r2,32
   1de2c:	10005c1e 	bne	r2,zero,1dfa0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de30:	0005303a 	rdctl	r2,status
   1de34:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de38:	e0fff317 	ldw	r3,-52(fp)
   1de3c:	00bfff84 	movi	r2,-2
   1de40:	1884703a 	and	r2,r3,r2
   1de44:	1001703a 	wrctl	status,r2
  
  return context;
   1de48:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1de4c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1de50:	008000f4 	movhi	r2,3
   1de54:	10847504 	addi	r2,r2,4564
   1de58:	e0fffd17 	ldw	r3,-12(fp)
   1de5c:	180690fa 	slli	r3,r3,3
   1de60:	10c5883a 	add	r2,r2,r3
   1de64:	e0ffff17 	ldw	r3,-4(fp)
   1de68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1de6c:	008000f4 	movhi	r2,3
   1de70:	10847504 	addi	r2,r2,4564
   1de74:	e0fffd17 	ldw	r3,-12(fp)
   1de78:	180690fa 	slli	r3,r3,3
   1de7c:	18c00104 	addi	r3,r3,4
   1de80:	10c5883a 	add	r2,r2,r3
   1de84:	e0fffe17 	ldw	r3,-8(fp)
   1de88:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1de8c:	e0bfff17 	ldw	r2,-4(fp)
   1de90:	10001f26 	beq	r2,zero,1df10 <alt_irq_register+0x10c>
   1de94:	e0bffd17 	ldw	r2,-12(fp)
   1de98:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de9c:	0005303a 	rdctl	r2,status
   1dea0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dea4:	e0fff517 	ldw	r3,-44(fp)
   1dea8:	00bfff84 	movi	r2,-2
   1deac:	1884703a 	and	r2,r3,r2
   1deb0:	1001703a 	wrctl	status,r2
  
  return context;
   1deb4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1deb8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1debc:	e0bff417 	ldw	r2,-48(fp)
   1dec0:	00c00044 	movi	r3,1
   1dec4:	1884983a 	sll	r2,r3,r2
   1dec8:	1007883a 	mov	r3,r2
   1decc:	008000b4 	movhi	r2,2
   1ded0:	108f6d04 	addi	r2,r2,15796
   1ded4:	10800017 	ldw	r2,0(r2)
   1ded8:	1886b03a 	or	r3,r3,r2
   1dedc:	008000b4 	movhi	r2,2
   1dee0:	108f6d04 	addi	r2,r2,15796
   1dee4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1dee8:	008000b4 	movhi	r2,2
   1deec:	108f6d04 	addi	r2,r2,15796
   1def0:	10800017 	ldw	r2,0(r2)
   1def4:	100170fa 	wrctl	ienable,r2
   1def8:	e0bff617 	ldw	r2,-40(fp)
   1defc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1df00:	e0bff717 	ldw	r2,-36(fp)
   1df04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1df08:	0005883a 	mov	r2,zero
   1df0c:	00001f06 	br	1df8c <alt_irq_register+0x188>
   1df10:	e0bffd17 	ldw	r2,-12(fp)
   1df14:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1df18:	0005303a 	rdctl	r2,status
   1df1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1df20:	e0fff917 	ldw	r3,-28(fp)
   1df24:	00bfff84 	movi	r2,-2
   1df28:	1884703a 	and	r2,r3,r2
   1df2c:	1001703a 	wrctl	status,r2
  
  return context;
   1df30:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1df34:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1df38:	e0bff817 	ldw	r2,-32(fp)
   1df3c:	00c00044 	movi	r3,1
   1df40:	1884983a 	sll	r2,r3,r2
   1df44:	0084303a 	nor	r2,zero,r2
   1df48:	1007883a 	mov	r3,r2
   1df4c:	008000b4 	movhi	r2,2
   1df50:	108f6d04 	addi	r2,r2,15796
   1df54:	10800017 	ldw	r2,0(r2)
   1df58:	1886703a 	and	r3,r3,r2
   1df5c:	008000b4 	movhi	r2,2
   1df60:	108f6d04 	addi	r2,r2,15796
   1df64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1df68:	008000b4 	movhi	r2,2
   1df6c:	108f6d04 	addi	r2,r2,15796
   1df70:	10800017 	ldw	r2,0(r2)
   1df74:	100170fa 	wrctl	ienable,r2
   1df78:	e0bffa17 	ldw	r2,-24(fp)
   1df7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1df80:	e0bffb17 	ldw	r2,-20(fp)
   1df84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1df88:	0005883a 	mov	r2,zero
   1df8c:	e0bff115 	stw	r2,-60(fp)
   1df90:	e0bff217 	ldw	r2,-56(fp)
   1df94:	e0bffc15 	stw	r2,-16(fp)
   1df98:	e0bffc17 	ldw	r2,-16(fp)
   1df9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1dfa0:	e0bff117 	ldw	r2,-60(fp)
}
   1dfa4:	e037883a 	mov	sp,fp
   1dfa8:	df000017 	ldw	fp,0(sp)
   1dfac:	dec00104 	addi	sp,sp,4
   1dfb0:	f800283a 	ret

0001dfb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dfb4:	defffe04 	addi	sp,sp,-8
   1dfb8:	dfc00115 	stw	ra,4(sp)
   1dfbc:	df000015 	stw	fp,0(sp)
   1dfc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dfc4:	008000b4 	movhi	r2,2
   1dfc8:	10868804 	addi	r2,r2,6688
   1dfcc:	10800017 	ldw	r2,0(r2)
   1dfd0:	10000526 	beq	r2,zero,1dfe8 <alt_get_errno+0x34>
   1dfd4:	008000b4 	movhi	r2,2
   1dfd8:	10868804 	addi	r2,r2,6688
   1dfdc:	10800017 	ldw	r2,0(r2)
   1dfe0:	103ee83a 	callr	r2
   1dfe4:	00000206 	br	1dff0 <alt_get_errno+0x3c>
   1dfe8:	008000b4 	movhi	r2,2
   1dfec:	108f4f04 	addi	r2,r2,15676
}
   1dff0:	e037883a 	mov	sp,fp
   1dff4:	dfc00117 	ldw	ra,4(sp)
   1dff8:	df000017 	ldw	fp,0(sp)
   1dffc:	dec00204 	addi	sp,sp,8
   1e000:	f800283a 	ret

0001e004 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1e004:	defffd04 	addi	sp,sp,-12
   1e008:	df000215 	stw	fp,8(sp)
   1e00c:	df000204 	addi	fp,sp,8
   1e010:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1e014:	e0bfff17 	ldw	r2,-4(fp)
   1e018:	10800217 	ldw	r2,8(r2)
   1e01c:	10d00034 	orhi	r3,r2,16384
   1e020:	e0bfff17 	ldw	r2,-4(fp)
   1e024:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e028:	e03ffe15 	stw	zero,-8(fp)
   1e02c:	00001d06 	br	1e0a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e030:	008000b4 	movhi	r2,2
   1e034:	10805b04 	addi	r2,r2,364
   1e038:	e0fffe17 	ldw	r3,-8(fp)
   1e03c:	18c00324 	muli	r3,r3,12
   1e040:	10c5883a 	add	r2,r2,r3
   1e044:	10c00017 	ldw	r3,0(r2)
   1e048:	e0bfff17 	ldw	r2,-4(fp)
   1e04c:	10800017 	ldw	r2,0(r2)
   1e050:	1880111e 	bne	r3,r2,1e098 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e054:	008000b4 	movhi	r2,2
   1e058:	10805b04 	addi	r2,r2,364
   1e05c:	e0fffe17 	ldw	r3,-8(fp)
   1e060:	18c00324 	muli	r3,r3,12
   1e064:	18c00204 	addi	r3,r3,8
   1e068:	10c5883a 	add	r2,r2,r3
   1e06c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e070:	1000090e 	bge	r2,zero,1e098 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1e074:	e0bffe17 	ldw	r2,-8(fp)
   1e078:	10c00324 	muli	r3,r2,12
   1e07c:	008000b4 	movhi	r2,2
   1e080:	10805b04 	addi	r2,r2,364
   1e084:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e088:	e0bfff17 	ldw	r2,-4(fp)
   1e08c:	18800226 	beq	r3,r2,1e098 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1e090:	00bffcc4 	movi	r2,-13
   1e094:	00000a06 	br	1e0c0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e098:	e0bffe17 	ldw	r2,-8(fp)
   1e09c:	10800044 	addi	r2,r2,1
   1e0a0:	e0bffe15 	stw	r2,-8(fp)
   1e0a4:	008000b4 	movhi	r2,2
   1e0a8:	10868704 	addi	r2,r2,6684
   1e0ac:	10800017 	ldw	r2,0(r2)
   1e0b0:	1007883a 	mov	r3,r2
   1e0b4:	e0bffe17 	ldw	r2,-8(fp)
   1e0b8:	18bfdd2e 	bgeu	r3,r2,1e030 <__alt_mem_Flash_flash_data+0xf401e030>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1e0bc:	0005883a 	mov	r2,zero
}
   1e0c0:	e037883a 	mov	sp,fp
   1e0c4:	df000017 	ldw	fp,0(sp)
   1e0c8:	dec00104 	addi	sp,sp,4
   1e0cc:	f800283a 	ret

0001e0d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1e0d0:	defff604 	addi	sp,sp,-40
   1e0d4:	dfc00915 	stw	ra,36(sp)
   1e0d8:	df000815 	stw	fp,32(sp)
   1e0dc:	df000804 	addi	fp,sp,32
   1e0e0:	e13ffd15 	stw	r4,-12(fp)
   1e0e4:	e17ffe15 	stw	r5,-8(fp)
   1e0e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1e0ec:	00bfffc4 	movi	r2,-1
   1e0f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1e0f4:	00bffb44 	movi	r2,-19
   1e0f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1e0fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1e100:	e13ffd17 	ldw	r4,-12(fp)
   1e104:	014000b4 	movhi	r5,2
   1e108:	29468504 	addi	r5,r5,6676
   1e10c:	001dc0c0 	call	1dc0c <alt_find_dev>
   1e110:	e0bff815 	stw	r2,-32(fp)
   1e114:	e0bff817 	ldw	r2,-32(fp)
   1e118:	1000051e 	bne	r2,zero,1e130 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1e11c:	e13ffd17 	ldw	r4,-12(fp)
   1e120:	001e7180 	call	1e718 <alt_find_file>
   1e124:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1e128:	00800044 	movi	r2,1
   1e12c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1e130:	e0bff817 	ldw	r2,-32(fp)
   1e134:	10002926 	beq	r2,zero,1e1dc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1e138:	e13ff817 	ldw	r4,-32(fp)
   1e13c:	001e82c0 	call	1e82c <alt_get_fd>
   1e140:	e0bff915 	stw	r2,-28(fp)
   1e144:	e0bff917 	ldw	r2,-28(fp)
   1e148:	1000030e 	bge	r2,zero,1e158 <open+0x88>
    {
      status = index;
   1e14c:	e0bff917 	ldw	r2,-28(fp)
   1e150:	e0bffa15 	stw	r2,-24(fp)
   1e154:	00002306 	br	1e1e4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1e158:	e0bff917 	ldw	r2,-28(fp)
   1e15c:	10c00324 	muli	r3,r2,12
   1e160:	008000b4 	movhi	r2,2
   1e164:	10805b04 	addi	r2,r2,364
   1e168:	1885883a 	add	r2,r3,r2
   1e16c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1e170:	e0fffe17 	ldw	r3,-8(fp)
   1e174:	00900034 	movhi	r2,16384
   1e178:	10bfffc4 	addi	r2,r2,-1
   1e17c:	1886703a 	and	r3,r3,r2
   1e180:	e0bffc17 	ldw	r2,-16(fp)
   1e184:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1e188:	e0bffb17 	ldw	r2,-20(fp)
   1e18c:	1000051e 	bne	r2,zero,1e1a4 <open+0xd4>
   1e190:	e13ffc17 	ldw	r4,-16(fp)
   1e194:	001e0040 	call	1e004 <alt_file_locked>
   1e198:	e0bffa15 	stw	r2,-24(fp)
   1e19c:	e0bffa17 	ldw	r2,-24(fp)
   1e1a0:	10001016 	blt	r2,zero,1e1e4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1e1a4:	e0bff817 	ldw	r2,-32(fp)
   1e1a8:	10800317 	ldw	r2,12(r2)
   1e1ac:	10000826 	beq	r2,zero,1e1d0 <open+0x100>
   1e1b0:	e0bff817 	ldw	r2,-32(fp)
   1e1b4:	10800317 	ldw	r2,12(r2)
   1e1b8:	e13ffc17 	ldw	r4,-16(fp)
   1e1bc:	e17ffd17 	ldw	r5,-12(fp)
   1e1c0:	e1bffe17 	ldw	r6,-8(fp)
   1e1c4:	e1ffff17 	ldw	r7,-4(fp)
   1e1c8:	103ee83a 	callr	r2
   1e1cc:	00000106 	br	1e1d4 <open+0x104>
   1e1d0:	0005883a 	mov	r2,zero
   1e1d4:	e0bffa15 	stw	r2,-24(fp)
   1e1d8:	00000206 	br	1e1e4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1e1dc:	00bffb44 	movi	r2,-19
   1e1e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1e1e4:	e0bffa17 	ldw	r2,-24(fp)
   1e1e8:	1000090e 	bge	r2,zero,1e210 <open+0x140>
  {
    alt_release_fd (index);  
   1e1ec:	e13ff917 	ldw	r4,-28(fp)
   1e1f0:	0011db80 	call	11db8 <alt_release_fd>
    ALT_ERRNO = -status;
   1e1f4:	001dfb40 	call	1dfb4 <alt_get_errno>
   1e1f8:	1007883a 	mov	r3,r2
   1e1fc:	e0bffa17 	ldw	r2,-24(fp)
   1e200:	0085c83a 	sub	r2,zero,r2
   1e204:	18800015 	stw	r2,0(r3)
    return -1;
   1e208:	00bfffc4 	movi	r2,-1
   1e20c:	00000106 	br	1e214 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1e210:	e0bff917 	ldw	r2,-28(fp)
}
   1e214:	e037883a 	mov	sp,fp
   1e218:	dfc00117 	ldw	ra,4(sp)
   1e21c:	df000017 	ldw	fp,0(sp)
   1e220:	dec00204 	addi	sp,sp,8
   1e224:	f800283a 	ret

0001e228 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1e228:	defffa04 	addi	sp,sp,-24
   1e22c:	df000515 	stw	fp,20(sp)
   1e230:	df000504 	addi	fp,sp,20
   1e234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e238:	0005303a 	rdctl	r2,status
   1e23c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e240:	e0fffc17 	ldw	r3,-16(fp)
   1e244:	00bfff84 	movi	r2,-2
   1e248:	1884703a 	and	r2,r3,r2
   1e24c:	1001703a 	wrctl	status,r2
  
  return context;
   1e250:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1e254:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1e258:	e0bfff17 	ldw	r2,-4(fp)
   1e25c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1e260:	e0bffd17 	ldw	r2,-12(fp)
   1e264:	10800017 	ldw	r2,0(r2)
   1e268:	e0fffd17 	ldw	r3,-12(fp)
   1e26c:	18c00117 	ldw	r3,4(r3)
   1e270:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1e274:	e0bffd17 	ldw	r2,-12(fp)
   1e278:	10800117 	ldw	r2,4(r2)
   1e27c:	e0fffd17 	ldw	r3,-12(fp)
   1e280:	18c00017 	ldw	r3,0(r3)
   1e284:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1e288:	e0bffd17 	ldw	r2,-12(fp)
   1e28c:	e0fffd17 	ldw	r3,-12(fp)
   1e290:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1e294:	e0bffd17 	ldw	r2,-12(fp)
   1e298:	e0fffd17 	ldw	r3,-12(fp)
   1e29c:	10c00015 	stw	r3,0(r2)
   1e2a0:	e0bffb17 	ldw	r2,-20(fp)
   1e2a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e2a8:	e0bffe17 	ldw	r2,-8(fp)
   1e2ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1e2b0:	e037883a 	mov	sp,fp
   1e2b4:	df000017 	ldw	fp,0(sp)
   1e2b8:	dec00104 	addi	sp,sp,4
   1e2bc:	f800283a 	ret

0001e2c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1e2c0:	defffb04 	addi	sp,sp,-20
   1e2c4:	dfc00415 	stw	ra,16(sp)
   1e2c8:	df000315 	stw	fp,12(sp)
   1e2cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1e2d0:	d0a03517 	ldw	r2,-32556(gp)
   1e2d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1e2d8:	d0a8fa17 	ldw	r2,-23576(gp)
   1e2dc:	10800044 	addi	r2,r2,1
   1e2e0:	d0a8fa15 	stw	r2,-23576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e2e4:	00002e06 	br	1e3a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1e2e8:	e0bffd17 	ldw	r2,-12(fp)
   1e2ec:	10800017 	ldw	r2,0(r2)
   1e2f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1e2f4:	e0bffd17 	ldw	r2,-12(fp)
   1e2f8:	10800403 	ldbu	r2,16(r2)
   1e2fc:	10803fcc 	andi	r2,r2,255
   1e300:	10000426 	beq	r2,zero,1e314 <alt_tick+0x54>
   1e304:	d0a8fa17 	ldw	r2,-23576(gp)
   1e308:	1000021e 	bne	r2,zero,1e314 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1e30c:	e0bffd17 	ldw	r2,-12(fp)
   1e310:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1e314:	e0bffd17 	ldw	r2,-12(fp)
   1e318:	10800217 	ldw	r2,8(r2)
   1e31c:	d0e8fa17 	ldw	r3,-23576(gp)
   1e320:	18801d36 	bltu	r3,r2,1e398 <alt_tick+0xd8>
   1e324:	e0bffd17 	ldw	r2,-12(fp)
   1e328:	10800403 	ldbu	r2,16(r2)
   1e32c:	10803fcc 	andi	r2,r2,255
   1e330:	1000191e 	bne	r2,zero,1e398 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1e334:	e0bffd17 	ldw	r2,-12(fp)
   1e338:	10800317 	ldw	r2,12(r2)
   1e33c:	e0fffd17 	ldw	r3,-12(fp)
   1e340:	18c00517 	ldw	r3,20(r3)
   1e344:	1809883a 	mov	r4,r3
   1e348:	103ee83a 	callr	r2
   1e34c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1e350:	e0bfff17 	ldw	r2,-4(fp)
   1e354:	1000031e 	bne	r2,zero,1e364 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1e358:	e13ffd17 	ldw	r4,-12(fp)
   1e35c:	001e2280 	call	1e228 <alt_alarm_stop>
   1e360:	00000d06 	br	1e398 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1e364:	e0bffd17 	ldw	r2,-12(fp)
   1e368:	10c00217 	ldw	r3,8(r2)
   1e36c:	e0bfff17 	ldw	r2,-4(fp)
   1e370:	1887883a 	add	r3,r3,r2
   1e374:	e0bffd17 	ldw	r2,-12(fp)
   1e378:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1e37c:	e0bffd17 	ldw	r2,-12(fp)
   1e380:	10c00217 	ldw	r3,8(r2)
   1e384:	d0a8fa17 	ldw	r2,-23576(gp)
   1e388:	1880032e 	bgeu	r3,r2,1e398 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1e38c:	e0bffd17 	ldw	r2,-12(fp)
   1e390:	00c00044 	movi	r3,1
   1e394:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1e398:	e0bffe17 	ldw	r2,-8(fp)
   1e39c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e3a0:	e0fffd17 	ldw	r3,-12(fp)
   1e3a4:	d0a03504 	addi	r2,gp,-32556
   1e3a8:	18bfcf1e 	bne	r3,r2,1e2e8 <__alt_mem_Flash_flash_data+0xf401e2e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1e3ac:	0012fc40 	call	12fc4 <OSTimeTick>
}
   1e3b0:	e037883a 	mov	sp,fp
   1e3b4:	dfc00117 	ldw	ra,4(sp)
   1e3b8:	df000017 	ldw	fp,0(sp)
   1e3bc:	dec00204 	addi	sp,sp,8
   1e3c0:	f800283a 	ret

0001e3c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1e3c4:	deffff04 	addi	sp,sp,-4
   1e3c8:	df000015 	stw	fp,0(sp)
   1e3cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1e3d0:	000170fa 	wrctl	ienable,zero
}
   1e3d4:	e037883a 	mov	sp,fp
   1e3d8:	df000017 	ldw	fp,0(sp)
   1e3dc:	dec00104 	addi	sp,sp,4
   1e3e0:	f800283a 	ret

0001e3e4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1e3e4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1e3e8:	d0e00917 	ldw	r3,-32732(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1e3ec:	d128f217 	ldw	r4,-23608(gp)

      stw ra,  0(sp)
   1e3f0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1e3f4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1e3f8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1e3fc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1e400:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1e404:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1e408:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1e40c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1e410:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1e414:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1e418:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1e41c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e420:	001e6500 	call	1e650 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1e424:	d128ed17 	ldw	r4,-23628(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1e428:	d168e507 	ldb	r5,-23660(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1e42c:	d128f215 	stw	r4,-23608(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1e430:	d168e545 	stb	r5,-23659(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1e434:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1e438:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1e43c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1e440:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1e444:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1e448:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1e44c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1e450:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1e454:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1e458:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1e45c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1e460:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1e464:	d0e00915 	stw	r3,-32732(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1e468:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1e46c:	f800283a 	ret

0001e470 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1e470:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1e474:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1e478:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1e47c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e480:	001e6500 	call	1e650 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1e484:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1e488:	d4a8e345 	stb	r18,-23667(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1e48c:	003fe506 	br	1e424 <__alt_mem_Flash_flash_data+0xf401e424>

0001e490 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1e490:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1e494:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1e498:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1e49c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1e4a0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1e4a4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1e4a8:	dec00204 	addi	sp,sp,8

      callr r2
   1e4ac:	103ee83a 	callr	r2

      nop
   1e4b0:	0001883a 	nop

0001e4b4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1e4b4:	defff704 	addi	sp,sp,-36
   1e4b8:	dfc00815 	stw	ra,32(sp)
   1e4bc:	df000715 	stw	fp,28(sp)
   1e4c0:	df000704 	addi	fp,sp,28
   1e4c4:	e13ffc15 	stw	r4,-16(fp)
   1e4c8:	e17ffd15 	stw	r5,-12(fp)
   1e4cc:	e1bffe15 	stw	r6,-8(fp)
   1e4d0:	3805883a 	mov	r2,r7
   1e4d4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1e4d8:	e0fffe17 	ldw	r3,-8(fp)
   1e4dc:	00bfff04 	movi	r2,-4
   1e4e0:	1884703a 	and	r2,r3,r2
   1e4e4:	10bef704 	addi	r2,r2,-1060
   1e4e8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1e4ec:	e13ff917 	ldw	r4,-28(fp)
   1e4f0:	000b883a 	mov	r5,zero
   1e4f4:	01810904 	movi	r6,1060
   1e4f8:	0001fa80 	call	1fa8 <memset>
   1e4fc:	e0bff917 	ldw	r2,-28(fp)
   1e500:	10c0bb04 	addi	r3,r2,748
   1e504:	e0bff917 	ldw	r2,-28(fp)
   1e508:	10c00115 	stw	r3,4(r2)
   1e50c:	e0bff917 	ldw	r2,-28(fp)
   1e510:	10c0d504 	addi	r3,r2,852
   1e514:	e0bff917 	ldw	r2,-28(fp)
   1e518:	10c00215 	stw	r3,8(r2)
   1e51c:	e0bff917 	ldw	r2,-28(fp)
   1e520:	10c0ef04 	addi	r3,r2,956
   1e524:	e0bff917 	ldw	r2,-28(fp)
   1e528:	10c00315 	stw	r3,12(r2)
   1e52c:	e0fff917 	ldw	r3,-28(fp)
   1e530:	008000b4 	movhi	r2,2
   1e534:	10be2304 	addi	r2,r2,-1908
   1e538:	18800d15 	stw	r2,52(r3)
   1e53c:	e0bff917 	ldw	r2,-28(fp)
   1e540:	00c00044 	movi	r3,1
   1e544:	10c02915 	stw	r3,164(r2)
   1e548:	10002a15 	stw	zero,168(r2)
   1e54c:	e0bff917 	ldw	r2,-28(fp)
   1e550:	00ccc384 	movi	r3,13070
   1e554:	10c02b0d 	sth	r3,172(r2)
   1e558:	e0bff917 	ldw	r2,-28(fp)
   1e55c:	00eaf344 	movi	r3,-21555
   1e560:	10c02b8d 	sth	r3,174(r2)
   1e564:	e0bff917 	ldw	r2,-28(fp)
   1e568:	00c48d04 	movi	r3,4660
   1e56c:	10c02c0d 	sth	r3,176(r2)
   1e570:	e0bff917 	ldw	r2,-28(fp)
   1e574:	00f99b44 	movi	r3,-6547
   1e578:	10c02c8d 	sth	r3,178(r2)
   1e57c:	e0bff917 	ldw	r2,-28(fp)
   1e580:	00f7bb04 	movi	r3,-8468
   1e584:	10c02d0d 	sth	r3,180(r2)
   1e588:	e0bff917 	ldw	r2,-28(fp)
   1e58c:	00c00144 	movi	r3,5
   1e590:	10c02d8d 	sth	r3,182(r2)
   1e594:	e0bff917 	ldw	r2,-28(fp)
   1e598:	00c002c4 	movi	r3,11
   1e59c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e5a0:	e0bff917 	ldw	r2,-28(fp)
   1e5a4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e5a8:	e0bffa17 	ldw	r2,-24(fp)
   1e5ac:	10bff304 	addi	r2,r2,-52
   1e5b0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e5b4:	e0bffb17 	ldw	r2,-20(fp)
   1e5b8:	10800c04 	addi	r2,r2,48
   1e5bc:	e0fffc17 	ldw	r3,-16(fp)
   1e5c0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e5c4:	e0bffb17 	ldw	r2,-20(fp)
   1e5c8:	10800b04 	addi	r2,r2,44
   1e5cc:	e0fffd17 	ldw	r3,-12(fp)
   1e5d0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e5d4:	e0bffb17 	ldw	r2,-20(fp)
   1e5d8:	10800a04 	addi	r2,r2,40
   1e5dc:	e0fff917 	ldw	r3,-28(fp)
   1e5e0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e5e4:	008000b4 	movhi	r2,2
   1e5e8:	10b92404 	addi	r2,r2,-7024
   1e5ec:	10c00104 	addi	r3,r2,4
   1e5f0:	e0bffb17 	ldw	r2,-20(fp)
   1e5f4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e5f8:	e0bffb17 	ldw	r2,-20(fp)
}
   1e5fc:	e037883a 	mov	sp,fp
   1e600:	dfc00117 	ldw	ra,4(sp)
   1e604:	df000017 	ldw	fp,0(sp)
   1e608:	dec00204 	addi	sp,sp,8
   1e60c:	f800283a 	ret

0001e610 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e610:	defffe04 	addi	sp,sp,-8
   1e614:	df000115 	stw	fp,4(sp)
   1e618:	df000104 	addi	fp,sp,4
   1e61c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e620:	e037883a 	mov	sp,fp
   1e624:	df000017 	ldw	fp,0(sp)
   1e628:	dec00104 	addi	sp,sp,4
   1e62c:	f800283a 	ret

0001e630 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e630:	defffe04 	addi	sp,sp,-8
   1e634:	df000115 	stw	fp,4(sp)
   1e638:	df000104 	addi	fp,sp,4
   1e63c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e640:	e037883a 	mov	sp,fp
   1e644:	df000017 	ldw	fp,0(sp)
   1e648:	dec00104 	addi	sp,sp,4
   1e64c:	f800283a 	ret

0001e650 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e650:	deffff04 	addi	sp,sp,-4
   1e654:	df000015 	stw	fp,0(sp)
   1e658:	d839883a 	mov	fp,sp
}
   1e65c:	e037883a 	mov	sp,fp
   1e660:	df000017 	ldw	fp,0(sp)
   1e664:	dec00104 	addi	sp,sp,4
   1e668:	f800283a 	ret

0001e66c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e66c:	deffff04 	addi	sp,sp,-4
   1e670:	df000015 	stw	fp,0(sp)
   1e674:	d839883a 	mov	fp,sp
}
   1e678:	e037883a 	mov	sp,fp
   1e67c:	df000017 	ldw	fp,0(sp)
   1e680:	dec00104 	addi	sp,sp,4
   1e684:	f800283a 	ret

0001e688 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e688:	deffff04 	addi	sp,sp,-4
   1e68c:	df000015 	stw	fp,0(sp)
   1e690:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e694:	e037883a 	mov	sp,fp
   1e698:	df000017 	ldw	fp,0(sp)
   1e69c:	dec00104 	addi	sp,sp,4
   1e6a0:	f800283a 	ret

0001e6a4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e6a4:	deffff04 	addi	sp,sp,-4
   1e6a8:	df000015 	stw	fp,0(sp)
   1e6ac:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e6b0:	e037883a 	mov	sp,fp
   1e6b4:	df000017 	ldw	fp,0(sp)
   1e6b8:	dec00104 	addi	sp,sp,4
   1e6bc:	f800283a 	ret

0001e6c0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e6c0:	deffff04 	addi	sp,sp,-4
   1e6c4:	df000015 	stw	fp,0(sp)
   1e6c8:	d839883a 	mov	fp,sp
}
   1e6cc:	e037883a 	mov	sp,fp
   1e6d0:	df000017 	ldw	fp,0(sp)
   1e6d4:	dec00104 	addi	sp,sp,4
   1e6d8:	f800283a 	ret

0001e6dc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e6dc:	deffff04 	addi	sp,sp,-4
   1e6e0:	df000015 	stw	fp,0(sp)
   1e6e4:	d839883a 	mov	fp,sp
}
   1e6e8:	e037883a 	mov	sp,fp
   1e6ec:	df000017 	ldw	fp,0(sp)
   1e6f0:	dec00104 	addi	sp,sp,4
   1e6f4:	f800283a 	ret

0001e6f8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1e6f8:	defffe04 	addi	sp,sp,-8
   1e6fc:	df000115 	stw	fp,4(sp)
   1e700:	df000104 	addi	fp,sp,4
   1e704:	e13fff15 	stw	r4,-4(fp)
}
   1e708:	e037883a 	mov	sp,fp
   1e70c:	df000017 	ldw	fp,0(sp)
   1e710:	dec00104 	addi	sp,sp,4
   1e714:	f800283a 	ret

0001e718 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1e718:	defffb04 	addi	sp,sp,-20
   1e71c:	dfc00415 	stw	ra,16(sp)
   1e720:	df000315 	stw	fp,12(sp)
   1e724:	df000304 	addi	fp,sp,12
   1e728:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1e72c:	008000b4 	movhi	r2,2
   1e730:	10868304 	addi	r2,r2,6668
   1e734:	10800017 	ldw	r2,0(r2)
   1e738:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e73c:	00003106 	br	1e804 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1e740:	e0bffd17 	ldw	r2,-12(fp)
   1e744:	10800217 	ldw	r2,8(r2)
   1e748:	1009883a 	mov	r4,r2
   1e74c:	00023e80 	call	23e8 <strlen>
   1e750:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1e754:	e0bffd17 	ldw	r2,-12(fp)
   1e758:	10c00217 	ldw	r3,8(r2)
   1e75c:	e0bffe17 	ldw	r2,-8(fp)
   1e760:	10bfffc4 	addi	r2,r2,-1
   1e764:	1885883a 	add	r2,r3,r2
   1e768:	10800003 	ldbu	r2,0(r2)
   1e76c:	10803fcc 	andi	r2,r2,255
   1e770:	1080201c 	xori	r2,r2,128
   1e774:	10bfe004 	addi	r2,r2,-128
   1e778:	10800bd8 	cmpnei	r2,r2,47
   1e77c:	1000031e 	bne	r2,zero,1e78c <alt_find_file+0x74>
    {
      len -= 1;
   1e780:	e0bffe17 	ldw	r2,-8(fp)
   1e784:	10bfffc4 	addi	r2,r2,-1
   1e788:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e78c:	e0bffe17 	ldw	r2,-8(fp)
   1e790:	e0ffff17 	ldw	r3,-4(fp)
   1e794:	1885883a 	add	r2,r3,r2
   1e798:	10800003 	ldbu	r2,0(r2)
   1e79c:	10803fcc 	andi	r2,r2,255
   1e7a0:	1080201c 	xori	r2,r2,128
   1e7a4:	10bfe004 	addi	r2,r2,-128
   1e7a8:	10800be0 	cmpeqi	r2,r2,47
   1e7ac:	1000081e 	bne	r2,zero,1e7d0 <alt_find_file+0xb8>
   1e7b0:	e0bffe17 	ldw	r2,-8(fp)
   1e7b4:	e0ffff17 	ldw	r3,-4(fp)
   1e7b8:	1885883a 	add	r2,r3,r2
   1e7bc:	10800003 	ldbu	r2,0(r2)
   1e7c0:	10803fcc 	andi	r2,r2,255
   1e7c4:	1080201c 	xori	r2,r2,128
   1e7c8:	10bfe004 	addi	r2,r2,-128
   1e7cc:	10000a1e 	bne	r2,zero,1e7f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1e7d0:	e0bffd17 	ldw	r2,-12(fp)
   1e7d4:	10c00217 	ldw	r3,8(r2)
   1e7d8:	e0bffe17 	ldw	r2,-8(fp)
   1e7dc:	1809883a 	mov	r4,r3
   1e7e0:	e17fff17 	ldw	r5,-4(fp)
   1e7e4:	100d883a 	mov	r6,r2
   1e7e8:	001ea9c0 	call	1ea9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e7ec:	1000021e 	bne	r2,zero,1e7f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1e7f0:	e0bffd17 	ldw	r2,-12(fp)
   1e7f4:	00000806 	br	1e818 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1e7f8:	e0bffd17 	ldw	r2,-12(fp)
   1e7fc:	10800017 	ldw	r2,0(r2)
   1e800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e804:	e0fffd17 	ldw	r3,-12(fp)
   1e808:	008000b4 	movhi	r2,2
   1e80c:	10868304 	addi	r2,r2,6668
   1e810:	18bfcb1e 	bne	r3,r2,1e740 <__alt_mem_Flash_flash_data+0xf401e740>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1e814:	0005883a 	mov	r2,zero
}
   1e818:	e037883a 	mov	sp,fp
   1e81c:	dfc00117 	ldw	ra,4(sp)
   1e820:	df000017 	ldw	fp,0(sp)
   1e824:	dec00204 	addi	sp,sp,8
   1e828:	f800283a 	ret

0001e82c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1e82c:	defff904 	addi	sp,sp,-28
   1e830:	dfc00615 	stw	ra,24(sp)
   1e834:	df000515 	stw	fp,20(sp)
   1e838:	df000504 	addi	fp,sp,20
   1e83c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1e840:	00bffa04 	movi	r2,-24
   1e844:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1e848:	008000b4 	movhi	r2,2
   1e84c:	108f5004 	addi	r2,r2,15680
   1e850:	10800017 	ldw	r2,0(r2)
   1e854:	e0bffd15 	stw	r2,-12(fp)
   1e858:	e03ffe0d 	sth	zero,-8(fp)
   1e85c:	e0fffe0b 	ldhu	r3,-8(fp)
   1e860:	e0bffe84 	addi	r2,fp,-6
   1e864:	e13ffd17 	ldw	r4,-12(fp)
   1e868:	180b883a 	mov	r5,r3
   1e86c:	100d883a 	mov	r6,r2
   1e870:	00185e80 	call	185e8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e874:	e03ffb15 	stw	zero,-20(fp)
   1e878:	00001d06 	br	1e8f0 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1e87c:	008000b4 	movhi	r2,2
   1e880:	10805b04 	addi	r2,r2,364
   1e884:	e0fffb17 	ldw	r3,-20(fp)
   1e888:	18c00324 	muli	r3,r3,12
   1e88c:	10c5883a 	add	r2,r2,r3
   1e890:	10800017 	ldw	r2,0(r2)
   1e894:	1000131e 	bne	r2,zero,1e8e4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1e898:	008000b4 	movhi	r2,2
   1e89c:	10805b04 	addi	r2,r2,364
   1e8a0:	e0fffb17 	ldw	r3,-20(fp)
   1e8a4:	18c00324 	muli	r3,r3,12
   1e8a8:	10c5883a 	add	r2,r2,r3
   1e8ac:	e0ffff17 	ldw	r3,-4(fp)
   1e8b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1e8b4:	008000b4 	movhi	r2,2
   1e8b8:	10868704 	addi	r2,r2,6684
   1e8bc:	10c00017 	ldw	r3,0(r2)
   1e8c0:	e0bffb17 	ldw	r2,-20(fp)
   1e8c4:	1880040e 	bge	r3,r2,1e8d8 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1e8c8:	008000b4 	movhi	r2,2
   1e8cc:	10868704 	addi	r2,r2,6684
   1e8d0:	e0fffb17 	ldw	r3,-20(fp)
   1e8d4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1e8d8:	e0bffb17 	ldw	r2,-20(fp)
   1e8dc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1e8e0:	00000606 	br	1e8fc <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e8e4:	e0bffb17 	ldw	r2,-20(fp)
   1e8e8:	10800044 	addi	r2,r2,1
   1e8ec:	e0bffb15 	stw	r2,-20(fp)
   1e8f0:	e0bffb17 	ldw	r2,-20(fp)
   1e8f4:	10800810 	cmplti	r2,r2,32
   1e8f8:	103fe01e 	bne	r2,zero,1e87c <__alt_mem_Flash_flash_data+0xf401e87c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1e8fc:	008000b4 	movhi	r2,2
   1e900:	108f5004 	addi	r2,r2,15680
   1e904:	10800017 	ldw	r2,0(r2)
   1e908:	1009883a 	mov	r4,r2
   1e90c:	00189bc0 	call	189bc <OSSemPost>

  return rc;
   1e910:	e0bffc17 	ldw	r2,-16(fp)
}
   1e914:	e037883a 	mov	sp,fp
   1e918:	dfc00117 	ldw	ra,4(sp)
   1e91c:	df000017 	ldw	fp,0(sp)
   1e920:	dec00204 	addi	sp,sp,8
   1e924:	f800283a 	ret

0001e928 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e928:	defffb04 	addi	sp,sp,-20
   1e92c:	df000415 	stw	fp,16(sp)
   1e930:	df000404 	addi	fp,sp,16
   1e934:	e13ffe15 	stw	r4,-8(fp)
   1e938:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e93c:	e0bfff17 	ldw	r2,-4(fp)
   1e940:	10840070 	cmpltui	r2,r2,4097
   1e944:	1000021e 	bne	r2,zero,1e950 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e948:	00840004 	movi	r2,4096
   1e94c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e950:	e0fffe17 	ldw	r3,-8(fp)
   1e954:	e0bfff17 	ldw	r2,-4(fp)
   1e958:	1885883a 	add	r2,r3,r2
   1e95c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e960:	e0bffe17 	ldw	r2,-8(fp)
   1e964:	e0bffc15 	stw	r2,-16(fp)
   1e968:	00000506 	br	1e980 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e96c:	e0bffc17 	ldw	r2,-16(fp)
   1e970:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e974:	e0bffc17 	ldw	r2,-16(fp)
   1e978:	10800804 	addi	r2,r2,32
   1e97c:	e0bffc15 	stw	r2,-16(fp)
   1e980:	e0fffc17 	ldw	r3,-16(fp)
   1e984:	e0bffd17 	ldw	r2,-12(fp)
   1e988:	18bff836 	bltu	r3,r2,1e96c <__alt_mem_Flash_flash_data+0xf401e96c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e98c:	e0bffe17 	ldw	r2,-8(fp)
   1e990:	108007cc 	andi	r2,r2,31
   1e994:	10000226 	beq	r2,zero,1e9a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e998:	e0bffc17 	ldw	r2,-16(fp)
   1e99c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e9a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e9a4:	e037883a 	mov	sp,fp
   1e9a8:	df000017 	ldw	fp,0(sp)
   1e9ac:	dec00104 	addi	sp,sp,4
   1e9b0:	f800283a 	ret

0001e9b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1e9b4:	defffe04 	addi	sp,sp,-8
   1e9b8:	df000115 	stw	fp,4(sp)
   1e9bc:	df000104 	addi	fp,sp,4
   1e9c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1e9c4:	e0bfff17 	ldw	r2,-4(fp)
   1e9c8:	10bffe84 	addi	r2,r2,-6
   1e9cc:	10c00428 	cmpgeui	r3,r2,16
   1e9d0:	18001a1e 	bne	r3,zero,1ea3c <alt_exception_cause_generated_bad_addr+0x88>
   1e9d4:	100690ba 	slli	r3,r2,2
   1e9d8:	008000b4 	movhi	r2,2
   1e9dc:	10ba7b04 	addi	r2,r2,-5652
   1e9e0:	1885883a 	add	r2,r3,r2
   1e9e4:	10800017 	ldw	r2,0(r2)
   1e9e8:	1000683a 	jmp	r2
   1e9ec:	0001ea2c 	andhi	zero,zero,1960
   1e9f0:	0001ea2c 	andhi	zero,zero,1960
   1e9f4:	0001ea3c 	xorhi	zero,zero,1960
   1e9f8:	0001ea3c 	xorhi	zero,zero,1960
   1e9fc:	0001ea3c 	xorhi	zero,zero,1960
   1ea00:	0001ea2c 	andhi	zero,zero,1960
   1ea04:	0001ea34 	movhi	zero,1960
   1ea08:	0001ea3c 	xorhi	zero,zero,1960
   1ea0c:	0001ea2c 	andhi	zero,zero,1960
   1ea10:	0001ea2c 	andhi	zero,zero,1960
   1ea14:	0001ea3c 	xorhi	zero,zero,1960
   1ea18:	0001ea2c 	andhi	zero,zero,1960
   1ea1c:	0001ea34 	movhi	zero,1960
   1ea20:	0001ea3c 	xorhi	zero,zero,1960
   1ea24:	0001ea3c 	xorhi	zero,zero,1960
   1ea28:	0001ea2c 	andhi	zero,zero,1960
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1ea2c:	00800044 	movi	r2,1
   1ea30:	00000306 	br	1ea40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1ea34:	0005883a 	mov	r2,zero
   1ea38:	00000106 	br	1ea40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1ea3c:	0005883a 	mov	r2,zero
  }
}
   1ea40:	e037883a 	mov	sp,fp
   1ea44:	df000017 	ldw	fp,0(sp)
   1ea48:	dec00104 	addi	sp,sp,4
   1ea4c:	f800283a 	ret

0001ea50 <atexit>:
   1ea50:	200b883a 	mov	r5,r4
   1ea54:	000d883a 	mov	r6,zero
   1ea58:	0009883a 	mov	r4,zero
   1ea5c:	000f883a 	mov	r7,zero
   1ea60:	001eb181 	jmpi	1eb18 <__register_exitproc>

0001ea64 <exit>:
   1ea64:	defffe04 	addi	sp,sp,-8
   1ea68:	000b883a 	mov	r5,zero
   1ea6c:	dc000015 	stw	r16,0(sp)
   1ea70:	dfc00115 	stw	ra,4(sp)
   1ea74:	2021883a 	mov	r16,r4
   1ea78:	001ec2c0 	call	1ec2c <__call_exitprocs>
   1ea7c:	008000b4 	movhi	r2,2
   1ea80:	10867d04 	addi	r2,r2,6644
   1ea84:	11000017 	ldw	r4,0(r2)
   1ea88:	20800f17 	ldw	r2,60(r4)
   1ea8c:	10000126 	beq	r2,zero,1ea94 <exit+0x30>
   1ea90:	103ee83a 	callr	r2
   1ea94:	8009883a 	mov	r4,r16
   1ea98:	001edc00 	call	1edc0 <_exit>

0001ea9c <memcmp>:
   1ea9c:	01c000c4 	movi	r7,3
   1eaa0:	3980192e 	bgeu	r7,r6,1eb08 <memcmp+0x6c>
   1eaa4:	2144b03a 	or	r2,r4,r5
   1eaa8:	11c4703a 	and	r2,r2,r7
   1eaac:	10000f26 	beq	r2,zero,1eaec <memcmp+0x50>
   1eab0:	20800003 	ldbu	r2,0(r4)
   1eab4:	28c00003 	ldbu	r3,0(r5)
   1eab8:	10c0151e 	bne	r2,r3,1eb10 <memcmp+0x74>
   1eabc:	31bfff84 	addi	r6,r6,-2
   1eac0:	01ffffc4 	movi	r7,-1
   1eac4:	00000406 	br	1ead8 <memcmp+0x3c>
   1eac8:	20800003 	ldbu	r2,0(r4)
   1eacc:	28c00003 	ldbu	r3,0(r5)
   1ead0:	31bfffc4 	addi	r6,r6,-1
   1ead4:	10c00e1e 	bne	r2,r3,1eb10 <memcmp+0x74>
   1ead8:	21000044 	addi	r4,r4,1
   1eadc:	29400044 	addi	r5,r5,1
   1eae0:	31fff91e 	bne	r6,r7,1eac8 <__alt_mem_Flash_flash_data+0xf401eac8>
   1eae4:	0005883a 	mov	r2,zero
   1eae8:	f800283a 	ret
   1eaec:	20c00017 	ldw	r3,0(r4)
   1eaf0:	28800017 	ldw	r2,0(r5)
   1eaf4:	1880041e 	bne	r3,r2,1eb08 <memcmp+0x6c>
   1eaf8:	31bfff04 	addi	r6,r6,-4
   1eafc:	21000104 	addi	r4,r4,4
   1eb00:	29400104 	addi	r5,r5,4
   1eb04:	39bff936 	bltu	r7,r6,1eaec <__alt_mem_Flash_flash_data+0xf401eaec>
   1eb08:	303fe91e 	bne	r6,zero,1eab0 <__alt_mem_Flash_flash_data+0xf401eab0>
   1eb0c:	003ff506 	br	1eae4 <__alt_mem_Flash_flash_data+0xf401eae4>
   1eb10:	10c5c83a 	sub	r2,r2,r3
   1eb14:	f800283a 	ret

0001eb18 <__register_exitproc>:
   1eb18:	008000b4 	movhi	r2,2
   1eb1c:	defffa04 	addi	sp,sp,-24
   1eb20:	10867d04 	addi	r2,r2,6644
   1eb24:	dc000315 	stw	r16,12(sp)
   1eb28:	14000017 	ldw	r16,0(r2)
   1eb2c:	dc400415 	stw	r17,16(sp)
   1eb30:	dfc00515 	stw	ra,20(sp)
   1eb34:	80805217 	ldw	r2,328(r16)
   1eb38:	2023883a 	mov	r17,r4
   1eb3c:	10003626 	beq	r2,zero,1ec18 <__register_exitproc+0x100>
   1eb40:	10c00117 	ldw	r3,4(r2)
   1eb44:	010007c4 	movi	r4,31
   1eb48:	20c00e16 	blt	r4,r3,1eb84 <__register_exitproc+0x6c>
   1eb4c:	1a400044 	addi	r9,r3,1
   1eb50:	8800211e 	bne	r17,zero,1ebd8 <__register_exitproc+0xc0>
   1eb54:	18c00084 	addi	r3,r3,2
   1eb58:	18c7883a 	add	r3,r3,r3
   1eb5c:	18c7883a 	add	r3,r3,r3
   1eb60:	12400115 	stw	r9,4(r2)
   1eb64:	10c7883a 	add	r3,r2,r3
   1eb68:	19400015 	stw	r5,0(r3)
   1eb6c:	0005883a 	mov	r2,zero
   1eb70:	dfc00517 	ldw	ra,20(sp)
   1eb74:	dc400417 	ldw	r17,16(sp)
   1eb78:	dc000317 	ldw	r16,12(sp)
   1eb7c:	dec00604 	addi	sp,sp,24
   1eb80:	f800283a 	ret
   1eb84:	00800034 	movhi	r2,0
   1eb88:	10800004 	addi	r2,r2,0
   1eb8c:	10002526 	beq	r2,zero,1ec24 <__register_exitproc+0x10c>
   1eb90:	01006404 	movi	r4,400
   1eb94:	d9400015 	stw	r5,0(sp)
   1eb98:	d9800115 	stw	r6,4(sp)
   1eb9c:	d9c00215 	stw	r7,8(sp)
   1eba0:	00000000 	call	0 <__reset>
   1eba4:	d9400017 	ldw	r5,0(sp)
   1eba8:	d9800117 	ldw	r6,4(sp)
   1ebac:	d9c00217 	ldw	r7,8(sp)
   1ebb0:	10001c26 	beq	r2,zero,1ec24 <__register_exitproc+0x10c>
   1ebb4:	80c05217 	ldw	r3,328(r16)
   1ebb8:	10000115 	stw	zero,4(r2)
   1ebbc:	02400044 	movi	r9,1
   1ebc0:	10c00015 	stw	r3,0(r2)
   1ebc4:	80805215 	stw	r2,328(r16)
   1ebc8:	10006215 	stw	zero,392(r2)
   1ebcc:	10006315 	stw	zero,396(r2)
   1ebd0:	0007883a 	mov	r3,zero
   1ebd4:	883fdf26 	beq	r17,zero,1eb54 <__alt_mem_Flash_flash_data+0xf401eb54>
   1ebd8:	18d1883a 	add	r8,r3,r3
   1ebdc:	4211883a 	add	r8,r8,r8
   1ebe0:	1211883a 	add	r8,r2,r8
   1ebe4:	41802215 	stw	r6,136(r8)
   1ebe8:	01000044 	movi	r4,1
   1ebec:	11806217 	ldw	r6,392(r2)
   1ebf0:	20c8983a 	sll	r4,r4,r3
   1ebf4:	310cb03a 	or	r6,r6,r4
   1ebf8:	11806215 	stw	r6,392(r2)
   1ebfc:	41c04215 	stw	r7,264(r8)
   1ec00:	01800084 	movi	r6,2
   1ec04:	89bfd31e 	bne	r17,r6,1eb54 <__alt_mem_Flash_flash_data+0xf401eb54>
   1ec08:	11806317 	ldw	r6,396(r2)
   1ec0c:	3108b03a 	or	r4,r6,r4
   1ec10:	11006315 	stw	r4,396(r2)
   1ec14:	003fcf06 	br	1eb54 <__alt_mem_Flash_flash_data+0xf401eb54>
   1ec18:	80805304 	addi	r2,r16,332
   1ec1c:	80805215 	stw	r2,328(r16)
   1ec20:	003fc706 	br	1eb40 <__alt_mem_Flash_flash_data+0xf401eb40>
   1ec24:	00bfffc4 	movi	r2,-1
   1ec28:	003fd106 	br	1eb70 <__alt_mem_Flash_flash_data+0xf401eb70>

0001ec2c <__call_exitprocs>:
   1ec2c:	008000b4 	movhi	r2,2
   1ec30:	10867d04 	addi	r2,r2,6644
   1ec34:	10800017 	ldw	r2,0(r2)
   1ec38:	defff404 	addi	sp,sp,-48
   1ec3c:	dd800815 	stw	r22,32(sp)
   1ec40:	d8800015 	stw	r2,0(sp)
   1ec44:	10805204 	addi	r2,r2,328
   1ec48:	dd000615 	stw	r20,24(sp)
   1ec4c:	dc800415 	stw	r18,16(sp)
   1ec50:	dfc00b15 	stw	ra,44(sp)
   1ec54:	df000a15 	stw	fp,40(sp)
   1ec58:	ddc00915 	stw	r23,36(sp)
   1ec5c:	dd400715 	stw	r21,28(sp)
   1ec60:	dcc00515 	stw	r19,20(sp)
   1ec64:	dc400315 	stw	r17,12(sp)
   1ec68:	dc000215 	stw	r16,8(sp)
   1ec6c:	2025883a 	mov	r18,r4
   1ec70:	2829883a 	mov	r20,r5
   1ec74:	d8800115 	stw	r2,4(sp)
   1ec78:	05bfffc4 	movi	r22,-1
   1ec7c:	d8800017 	ldw	r2,0(sp)
   1ec80:	14c05217 	ldw	r19,328(r2)
   1ec84:	98001d26 	beq	r19,zero,1ecfc <__call_exitprocs+0xd0>
   1ec88:	dd400117 	ldw	r21,4(sp)
   1ec8c:	98800117 	ldw	r2,4(r19)
   1ec90:	173fffc4 	addi	fp,r2,-1
   1ec94:	e0000d16 	blt	fp,zero,1eccc <__call_exitprocs+0xa0>
   1ec98:	14000044 	addi	r16,r2,1
   1ec9c:	8421883a 	add	r16,r16,r16
   1eca0:	8421883a 	add	r16,r16,r16
   1eca4:	84402004 	addi	r17,r16,128
   1eca8:	9c63883a 	add	r17,r19,r17
   1ecac:	9c21883a 	add	r16,r19,r16
   1ecb0:	a0001e26 	beq	r20,zero,1ed2c <__call_exitprocs+0x100>
   1ecb4:	80804017 	ldw	r2,256(r16)
   1ecb8:	15001c26 	beq	r2,r20,1ed2c <__call_exitprocs+0x100>
   1ecbc:	e73fffc4 	addi	fp,fp,-1
   1ecc0:	843fff04 	addi	r16,r16,-4
   1ecc4:	8c7fff04 	addi	r17,r17,-4
   1ecc8:	e5bff91e 	bne	fp,r22,1ecb0 <__alt_mem_Flash_flash_data+0xf401ecb0>
   1eccc:	00800034 	movhi	r2,0
   1ecd0:	10800004 	addi	r2,r2,0
   1ecd4:	10000926 	beq	r2,zero,1ecfc <__call_exitprocs+0xd0>
   1ecd8:	98800117 	ldw	r2,4(r19)
   1ecdc:	1000311e 	bne	r2,zero,1eda4 <__call_exitprocs+0x178>
   1ece0:	98800017 	ldw	r2,0(r19)
   1ece4:	10003426 	beq	r2,zero,1edb8 <__call_exitprocs+0x18c>
   1ece8:	9809883a 	mov	r4,r19
   1ecec:	a8800015 	stw	r2,0(r21)
   1ecf0:	00000000 	call	0 <__reset>
   1ecf4:	acc00017 	ldw	r19,0(r21)
   1ecf8:	983fe41e 	bne	r19,zero,1ec8c <__alt_mem_Flash_flash_data+0xf401ec8c>
   1ecfc:	dfc00b17 	ldw	ra,44(sp)
   1ed00:	df000a17 	ldw	fp,40(sp)
   1ed04:	ddc00917 	ldw	r23,36(sp)
   1ed08:	dd800817 	ldw	r22,32(sp)
   1ed0c:	dd400717 	ldw	r21,28(sp)
   1ed10:	dd000617 	ldw	r20,24(sp)
   1ed14:	dcc00517 	ldw	r19,20(sp)
   1ed18:	dc800417 	ldw	r18,16(sp)
   1ed1c:	dc400317 	ldw	r17,12(sp)
   1ed20:	dc000217 	ldw	r16,8(sp)
   1ed24:	dec00c04 	addi	sp,sp,48
   1ed28:	f800283a 	ret
   1ed2c:	98800117 	ldw	r2,4(r19)
   1ed30:	80c00017 	ldw	r3,0(r16)
   1ed34:	10bfffc4 	addi	r2,r2,-1
   1ed38:	17001526 	beq	r2,fp,1ed90 <__call_exitprocs+0x164>
   1ed3c:	80000015 	stw	zero,0(r16)
   1ed40:	183fde26 	beq	r3,zero,1ecbc <__alt_mem_Flash_flash_data+0xf401ecbc>
   1ed44:	00800044 	movi	r2,1
   1ed48:	1708983a 	sll	r4,r2,fp
   1ed4c:	98806217 	ldw	r2,392(r19)
   1ed50:	9dc00117 	ldw	r23,4(r19)
   1ed54:	2084703a 	and	r2,r4,r2
   1ed58:	1000061e 	bne	r2,zero,1ed74 <__call_exitprocs+0x148>
   1ed5c:	183ee83a 	callr	r3
   1ed60:	98800117 	ldw	r2,4(r19)
   1ed64:	15ffc51e 	bne	r2,r23,1ec7c <__alt_mem_Flash_flash_data+0xf401ec7c>
   1ed68:	a8800017 	ldw	r2,0(r21)
   1ed6c:	14ffd326 	beq	r2,r19,1ecbc <__alt_mem_Flash_flash_data+0xf401ecbc>
   1ed70:	003fc206 	br	1ec7c <__alt_mem_Flash_flash_data+0xf401ec7c>
   1ed74:	98806317 	ldw	r2,396(r19)
   1ed78:	2084703a 	and	r2,r4,r2
   1ed7c:	1000061e 	bne	r2,zero,1ed98 <__call_exitprocs+0x16c>
   1ed80:	89400017 	ldw	r5,0(r17)
   1ed84:	9009883a 	mov	r4,r18
   1ed88:	183ee83a 	callr	r3
   1ed8c:	003ff406 	br	1ed60 <__alt_mem_Flash_flash_data+0xf401ed60>
   1ed90:	9f000115 	stw	fp,4(r19)
   1ed94:	003fea06 	br	1ed40 <__alt_mem_Flash_flash_data+0xf401ed40>
   1ed98:	89000017 	ldw	r4,0(r17)
   1ed9c:	183ee83a 	callr	r3
   1eda0:	003fef06 	br	1ed60 <__alt_mem_Flash_flash_data+0xf401ed60>
   1eda4:	98800017 	ldw	r2,0(r19)
   1eda8:	982b883a 	mov	r21,r19
   1edac:	1027883a 	mov	r19,r2
   1edb0:	983fb61e 	bne	r19,zero,1ec8c <__alt_mem_Flash_flash_data+0xf401ec8c>
   1edb4:	003fd106 	br	1ecfc <__alt_mem_Flash_flash_data+0xf401ecfc>
   1edb8:	0005883a 	mov	r2,zero
   1edbc:	003ffa06 	br	1eda8 <__alt_mem_Flash_flash_data+0xf401eda8>

0001edc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1edc0:	defffd04 	addi	sp,sp,-12
   1edc4:	df000215 	stw	fp,8(sp)
   1edc8:	df000204 	addi	fp,sp,8
   1edcc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1edd0:	008000b4 	movhi	r2,2
   1edd4:	108f5844 	addi	r2,r2,15713
   1edd8:	10000005 	stb	zero,0(r2)
   1eddc:	e0bfff17 	ldw	r2,-4(fp)
   1ede0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1ede4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1ede8:	10000226 	beq	r2,zero,1edf4 <_exit+0x34>
    ALT_SIM_FAIL();
   1edec:	002af070 	cmpltui	zero,zero,43969
   1edf0:	00000106 	br	1edf8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1edf4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1edf8:	003fff06 	br	1edf8 <__alt_mem_Flash_flash_data+0xf401edf8>
